## 小结好了，我们小结一下。今天，我展示了 Kafka Streams在金融领域的一个应用案例，重点演示了如何利用连接函数来实时关联流和表。其实，KafkaStreams提供的功能远不止这些，我推荐你阅读一下[官网](https://kafka.apache.org/23/documentation/streams/developer-guide/)的教程，然后把自己的一些轻量级的实时计算线上任务改为使用Kafka Streams 来实现。![](Images/d3bb2a2db6c76e03f9b50e0641e1e2db.png){savepage-src="https://static001.geekbang.org/resource/image/75/e7/75df06c2b75c3886ca3496a774730de7.jpg"}
## 开放讨论最后，我们来讨论一个问题。在刚刚的这个例子中，你觉得我为什么使用leftJoin 方法而不是 join 方法呢？（小提示：可以对比一下 SQL 中的 leftjoin 和 inner join。）欢迎写下你的思考和答案，我们一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。![](Images/a7d15815f9efb5693db5b2d278244658.png){savepage-src="https://static001.geekbang.org/resource/image/c8/bf/c89da43deab85fe7cb06acec867aa5bf.jpg"}
# 加餐 \| 搭建开发环境、阅读源码方法、经典学习资料大揭秘你好，我是胡夕。截止到现在，专栏已经更新了 38讲，你掌握得怎么样了呢？如果暂时掌握得不是很好，也没有关系，慢慢来，有问题记得在留言区留言，我们一起讨论。今天，我们来聊点儿不一样的。我总结了 3个讨论热度很高的话题，现在一一来为你"揭秘"。1.  如何搭建 Kafka 开发环境？很多人对于编译和调试 Kafka    饶有兴致，却苦于无从下手。今天我就给你完整地演示一遍搭建 Kafka    开发环境的过程。2.  如何阅读 Kafka 源码？我曾经在专栏[第 1    讲](https://time.geekbang.org/column/article/98948)提到过我自己阅读    Kafka    源码的经历，后来我收到很多留言，问我是如何阅读的，今天，我就跟你分享一些阅读    Kafka 源代码的比较好的法则或者技巧。3.  Kafka    的学习资料。幸运的是，我在这方面还是有过一些总结的，今天我会毫无保留地把资料全部分享给你。
## Kafka 开发环境搭建现在，我先来回答第 1 个问题：如何搭建 Kafka 开发环境。我以 IDEA为例进行说明，Eclipse 应该也是类似的。
### 第 1 步：安装 Java 和 Gradle要搭建 Kafka 开发环境，你必须要安装好 Java 和 Gradle，同时在 IDEA 中安装Scala 插件。你最好把 Java 和 Gradle 环境加入到环境变量中。
### 第 2 步：下载 Kafka 的源码``{=html}完成第 1 步之后，下载 Kafka 的源码，命令如下：    $ cd Projects$ git clone https://github.com/apache/kafka.git这个命令下载的是 Kafka 的 trunk 分支代码，也就是**当前包含所有已提交Patch 的最新代码，甚至比 Kafka官网上能够下载到的最新版本还要超前很多**。值得注意的是，如果你想向 Kafka社区贡献代码，通常要以 trunk 代码为主体进行开发。
### 第 3 步：下载 Gradle 的 Wrapper 程序套件代码下载完成之后，会自动创建一个名为 kafka的子目录，此时需要进入到该目录下，执行下面的这条命令，主要目的是下载Gradle 的 Wrapper 程序套件。    $ gradleStarting a Gradle Daemon (subsequent builds will be faster)  > Configure project :Building project 'core' with Scala version 2.12.9Building project 'streams-scala' with Scala version 2.12.9  Deprecated Gradle features were used in this build, making it incompatible with Gradle 6.0.Use '--warning-mode all' to show the individual deprecation warnings.See https://docs.gradle.org/5.3/userguide/command_line_interface.html#sec:command_line_warning