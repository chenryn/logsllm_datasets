  _responseCounter.Labels("200", "/").Inc();
  return Ok(new string[] { "value1", "value2" });
}
```
普罗米修斯有各种其他类型的指标，您可以使用它们来记录关于您的应用的关键信息——计数器只会增加，但仪表会增加和减少，因此它们对记录快照很有用。普罗米修斯用您提供的时间戳和一组任意标签记录每个度量值。在这种情况下，我将把`URL`和`HTTP`方法添加到请求计数中，把 URL 和状态代码添加到响应计数中。我可以用这些来聚合或过滤普罗米修斯中的指标。
我在网络应用编程接口控制器中设置的计数器为我提供了一组自定义指标，显示了哪些端点正在被使用以及响应的状态。这些是由`NuGet`包中的服务器组件公开的，还有记录系统性能的默认指标。在此应用的 Dockerfile 中，普罗米修斯端点还有两行:
```
EXPOSE 50505
RUN netsh http add urlacl url=http://+:50505/metrics user=BUILTIN\IIS_IUSRS; `
    net localgroup 'Performance Monitor Users' 'IIS APPPOOL\DefaultAppPool' /add
```
第一行只是公开了我用于度量端点的自定义端口。第二行设置该端点所需的权限。在这种情况下，度量端点托管在 ASP.NET 应用中，因此 IIS 用户帐户需要权限来侦听自定义端口和访问系统性能计数器。
您可以用通常的方式构建 Dockerfile 并从映像运行一个容器，即通过用`-P`发布所有端口:
```
docker container run -d -P --name api dockeronwindows/ch11-api-with-metrics:2e
```
为了检查度量是否被记录和公开，我可以运行一些 PowerShell 命令来获取容器的端口，然后对 API 端点进行一些调用并检查度量:
```
$apiPort = $(docker container port api 80).Split(':')[1]
for ($i=0; $i -lt 10; $i++) {
 iwr -useb "http://localhost:$apiPort/api/values"
}
$metricsPort = $(docker container port api 50505).Split(':')[1]
(iwr -useb "http://localhost:$metricsPort/metrics").Content
```
您将看到一个标准的纯文本列表，按名称和标签分组。每个指标还包含普罗米修斯的元数据，包括指标名称、类型和友好描述:
```
# HELP process_num_threads Total number of threads
# TYPE process_num_threads gauge
process_num_threads 27
# HELP dotnet_total_memory_bytes Total known allocated memory
# TYPE dotnet_total_memory_bytes gauge
dotnet_total_memory_bytes 8519592
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 2212962820096
# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 1.734375
...
# HELP ValuesController_Requests Request count
# TYPE ValuesController_Requests counter
ValuesController_Requests{method="GET",url="/"} 10
# HELP ValuesController_Responses Response count
# TYPE ValuesController_Responses counter
ValuesController_Responses{code="200",url="/"} 10
```
完整的输出要大得多。在这个片段中，我展示了线程总数、分配的内存和 CPU 使用情况，这些都来自标准的 Windows 和.NET 性能计数器。我还展示了定制的 HTTP 请求和响应计数器。
我在这个应用中的自定义计数器显示 URL 和响应代码。在这种情况下，我可以看到对值控制器根 URL 的 10 个请求，以及 10 个带有 OK 状态代码`200`的响应。在本章的后面，我将向您展示如何使用 Grafana 可视化这些统计数据。
将`NuGet`包添加到项目中并运行`MetricServer`是对源代码的简单扩展。它让我可以记录任何有用的指标，但这确实意味着要改变应用，所以它只适用于正在积极开发的应用。
在某些情况下，您可能希望在不改变要检测的应用的情况下添加监控。在这种情况下，你可以在你的应用旁边运行一个**导出器**。导出器从您的应用流程中提取指标，并将其展示给普罗米修斯。在 Windows 容器中，您可以从标准性能计数器中获得许多有用的信息。
# 在现有应用旁边添加普罗米修斯导出器
在 Dockerized 解决方案中，Prometheus 将对从容器公开的度量端点进行计划调用，并将存储结果。对于现有的应用，您不需要添加度量端点，您可以在当前应用旁边运行一个控制台应用，并将度量端点托管在该控制台应用中。
我已经在第 10 章、*的 NerdDinner web 应用中添加了一个 Prometheus 端点，使用 Docker* 为持续部署管道提供动力，而无需更改任何代码。在`dockeronwindows/ch11-nerd-dinner-web-with-metrics`映像中，我添加了一个控制台应用，它导出 ASP.NET 性能计数器并提供指标端点。ASP.NET 出口商应用来自 Docker Hub 上的一个公众形象。NerdDinner 的完整 Dockerfile 复制导出器的二进制文件，并为容器设置启动命令:
```
#escape=`
FROM dockeronwindows/ch10-nerd-dinner-web:2e
EXPOSE 50505
ENV COLLECTOR_CONFIG_PATH="w3svc-collectors.json"
WORKDIR C:\aspnet-exporter
COPY --from=dockersamples/aspnet-monitoring-exporter:4.7.2-windowsservercore-ltsc2019 C:\aspnet-exporter .
ENTRYPOINT ["powershell"]
CMD Start-Service W3SVC; `
    Invoke-WebRequest http://localhost -UseBasicParsing | Out-Null; `
    Start-Process -NoNewWindow C:\aspnet-exporter\aspnet-exporter.exe; `
    netsh http flush logbuffer | Out-Null; `
    Get-Content -path 'C:\iislog\W3SVC\u_extend1.log' -Tail 1 -Wait 
```
`aspnet-exporter.exe`控制台应用实现了一个自定义指标收集器，它读取系统上运行的一个命名进程的性能计数器值。它使用与 NuGet 包中默认收集器相同的一组计数器，但是它的目标是不同的进程。导出器读取 IIS `w3wp.exe`进程的性能计数器，并被配置为导出关键的 IIS 指标。
The source code for the exporter is all on GitHub in the `dockersamples/aspnet-monitoring` repository.
控制台导出器是一个轻量级组件。它在容器启动时启动，并在容器运行期间保持运行。它仅在调用度量端点时使用计算资源，因此在普罗米修斯计划中运行时影响最小。我以通常的方式运行 NerdDinner(这里，我只是运行 ASP.NET 组件，而不是完整的解决方案):
```
docker container run -d -P --name nerd-dinner dockeronwindows/ch11-nerd-dinner-web-with-metrics:2e
```
我可以以通常的方式获取容器端口并浏览到 NerdDinner。然后，我还可以浏览到导出应用端口上的度量端点，该端点发布 IIS 性能计数器:
![](img/45dac49c-d499-475b-b061-7b0d59893237.png)
在这种情况下，应用中没有自定义计数器，所有指标都来自标准的 Windows 和.NET 性能计数器。导出器应用可以为正在运行的`w3wp`进程读取这些性能计数器值，因此应用不需要更改就可以向普罗米修斯提供基本信息。
这些是运行时指标，告诉您 IIS 在容器中工作有多努力。您可以看到活动线程的数量、内存使用情况以及 IIS 文件缓存的大小。还有 IIS 响应的 HTTP 状态代码百分比的指标，因此您可以看到是否有大量的 404 或 500 个错误。
要记录定制的应用度量，您需要测试您的代码并明确记录您感兴趣的数据点。您需要为此付出努力，但结果是一个仪表化的应用，除了.NET 运行时度量。
向您的 Dockerized 应用添加工具意味着为 Prometheus 查询提供度量端点。普罗米修斯服务器本身运行在一个 Docker 容器中，您可以用想要监控的服务来配置它。
# 在 Windows Docker 容器中运行普罗米修斯服务器
Prometheus 是用 Go 编写的跨平台应用，因此可以在 Windows 容器或 Linux 容器中运行。像其他开源项目一样，该团队在 Docker Hub 上发布了一个 Linux 映像，但是您需要构建自己的 Windows 映像。我正在使用一个现有的映像，该映像将普罗米修斯打包到一个 Windows Server 2019 容器中，该容器来自我为 ASP.NET 出口商使用的 GitHub 上的同一个`dockersamples/aspnet-monitoring`示例。
普罗米修斯的 Dockerfile 没有做任何你在本书中已经看过很多次的事情——它下载发布文件，提取它，并设置运行时环境。普罗米修斯服务器有多种功能:它运行计划的作业来轮询指标端点，它将数据存储在时间序列数据库中，它提供了一个 REST API 来查询数据库，并提供了一个简单的 Web UI 来导航数据。
我需要为调度器添加我自己的配置，这可以通过运行一个容器并为配置文件挂载一个卷，或者在集群模式下使用 Docker 配置对象来实现。我的指标端点的配置是相当静态的，所以最好将一组默认配置捆绑到我自己的 Prometheus 映像中。我已经用`dockeronwindows/ch11-prometheus:2e`做了，它有一个非常简单的 Dockerfile:
```
FROM dockersamples/aspnet-monitoring-prometheus:2.3.1-windowsservercore-ltsc2019
COPY prometheus.yml /etc/prometheus/prometheus.yml
```
我已经有了从我的仪表化应用编程接口和 NerdDinner 网络映像运行的容器，这些容器公开了供 Prometheus 使用的度量端点。为了在普罗米修斯中监控它们，我需要在`prometheus.yml`配置文件中指定度量位置。普罗米修斯将按照可配置的时间表轮询这些端点。它称之为**刮擦**，我已经在`scrape_configs`部分添加了我的容器名称和港口:
```
global: