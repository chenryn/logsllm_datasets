::: para
例如：运行 `idle`{.literal}（闲置）负荷 120 秒：
:::
``` screen
bltk -I -T 120
```
::: para
默认可用的工作负荷有：
:::
::: variablelist
[`-I`{.option}, ]{.term}[`--idle`{.option}]{.term}
:   ::: para
    系统闲置，将其作为与其它负载进行比较的基准
    :::
[`-R`{.option}, ]{.term}[`--reader`{.option}]{.term}
:   ::: para
    模拟读取文件（默认使用 [**Firefox**]{.application}）
    :::
[`-P`{.option}, ]{.term}[`--player`{.option}]{.term}
:   ::: para
    模拟观看 CD 或者 DVD 驱动器中的多媒体文件（默认使用
    [**mplayer**]{.application}）
    :::
[`-O`{.option}, ]{.term}[`--office`{.option}]{.term}
:   ::: para
    使用 [**OpenOffice.org**]{.application} 套件模拟编辑文件
    :::
:::
::: para
其它可让您指定的选项：
:::
::: variablelist
[`-a`{.option}, ]{.term}[`--ac-ignore`{.option}]{.term}
:   ::: para
    忽略 AC 电源是否可用（台式计算机需使用）
    :::
[`-T number_of_seconds`{.option}, ]{.term}[`--time number_of_seconds`{.option}]{.term}
:   ::: para
    测试时间（以秒为单位），此选项需与 `idle`{.literal} 负荷一起使用
    :::
[`-F filename`{.option}, ]{.term}[`--file filename`{.option}]{.term}
:   ::: para
    指定特定负荷使用的文件，例如不访问 CD 或者 DVD
    驱动器，而是指定别的文件供 `player`{.literal} 负荷使用
    :::
[`-W application`{.option}, ]{.term}[`--prog application`{.option}]{.term}
:   ::: para
    指定特定负载使用的应用程序，例如：不使用 [**Firefox**]{.application}
    ，而是指定其它的浏览器供 `reader`{.literal} 负载使用
    :::
:::
::: para
``{=html}BLTK``{=html}
支持大量更具体的选项。详情请参考 `bltk`{.literal} 的 man page。
:::
::: para
``{=html}BLTK``{=html}
会将产生的结果保存在 `/etc/bltk.conf`{.filename}
配置文件指定的目录中，默认为
`~/.bltk/workload.results.number/`{.filename}。例如：`~/.bltk/reader.results.002/`{.filename}
目录中会保存第三次 `reader`{.literal}
负荷测试的结果（第一次不计数）。所有的结果会分散存在几个文本文件中。要将这些结果压缩成方便读取的格式，请运行：
:::
``` screen
bltk_report path_to_results_directory
```
::: para
结果会显示在结果目录下的 `Report`{.filename}
文件中。如需在终端模拟器中查看结果，请使用 `-o`{.option} 选项：
:::
``` screen
bltk_report -o path_to_results_directory
```
:::
::: section
::: titlepage
# [⁠]{#Audit_and_Analysis.html#Tuned}2.5. Tuned {.title}
:::
::: para
[**tuned**]{.application} 是一项守护程序，它会使用 udev
来监控联网装置，并且根据选择的配置文件对系统设置进行静态和动态的微调。它有许多为常见使用案例（例如高吞吐量、低延迟或者节电）的预定义配置文件，并且允许用户更改为每个配置文件定义的规则，还可以自定义如何对一个特定的设备进行微调。若要通过某个配置文件还原系统设置的所有更改，您可以切换到另一个配置文件，或者停用
[**tuned**]{.application} 守护程序。
:::
::: para
静态微调主要包括预定义的 `sysctl`{.systemitem} 和 `sysfs`{.systemitem}
设置和对几种配置工具的单次激活，例如
[**ethtool**]{.application}。[**tuned**]{.application}
还会监控系统组件的使用状况，并根据监控的信息动态地微调信息系统设置。动态微调使得在任何给定系统的运行时间内，不同的系统组件能够以不同的方式被使用。例如，在启动和登录过程中会大量使用硬盘驱动器，但是之后用户可能主要使用类似网页浏览器或者电子邮件客户端这类的应用程序，这种情况下就几乎不会使用硬盘驱动器。类似地，不同的时间对
CPU 和网络设备的使用是不同的。[**Tuned**]{.application}
会监控这些组件的活动，并且对它们在使用过程中出现的改变作出反应。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
动态微调在 Red Hat Enterprise Linux 中被全局禁用，若要启用，请编辑
`/etc/tuned/tuned-main.conf`{.systemitem} 文件， 将
`dynamic_tuning`{.literal} 修改为 `1`{.literal}。
:::
:::
:::
::: para
以典型的办公室工作站为例。大多数时间里，以太网网络接口是非常不活跃的。这段时间内可能只会偶尔接收和发送一些电子邮件，或者载入一些网页。对这类型的负载，网络接口并不需要一直按默认设置全速运行。[**tuned**]{.application}
有一个针对网络设备的监控和微调插件，能够检测这种低活跃度，然后自动降低该接口的速度，这样通常能够降低电源消耗。如果接口的活跃度在较长的时间内增加（比如因为正在下载一个
DVD 映像，或者打开一个有大附件的电子邮件），[**tuned**]{.application}
会检测到这种情况并将接口速度设置为最大，以便在活跃等级很高的时候提供最佳的性能。此原则也适用于
CPU 和硬盘的其它插件。
:::
::: section
::: titlepage
## [⁠]{#Audit_and_Analysis.html#tuned-plugins}2.5.1. 插件 {.title}
:::
::: para
[**tuned**]{.application}
通常使用两种插件："*监控插件*"和"*微调插件*"。监控插件是用来获取运行中的系统的信息。目前使用的是下列监控插件：
:::
::: variablelist
[`disk`{.literal}]{.term}
:   ::: para
    获取每个设备在每个测量间隔的磁盘负载（ IO 操作的数量）。
    :::
[`net`{.literal}]{.term}
:   ::: para
    获取每个网卡在每个测量间隔的网络负载（已传输数据包的数量）。
    :::
[`load`{.literal}]{.term}
:   ::: para
    获取每个 CPU 在每个测量间隔的 CPU 负载。
    :::
:::
::: para
用于动态微调的微调插件可以使用监控插件的输出结果。目前使用的动态微调算法试图在性能和节能之间找到平衡，因此它在性能配置文件中是被禁用的（对单项插件的动态微调能够在
[**tuned**]{.application}
配置文件中启用或禁用）。若任何启用的微调插件需要监控插件的指标，监控插件将会自动实例化。如果两个微调插件需要相同的数据，监控插件只会生成一个实例，两个微调插件共享该数据。
:::
::: para
每个微调插件会对一个单独的子系统进行调整，并且获得从
[**tuned**]{.application}
配置文件中导出的参数。每个子系统可以有多个由微调插件的单独实例操作的设备（比如多个
CPU
或者网卡）。同样支持为单独设备进行特定设置。提供的配置文件使用通配符来将所有的设备和独立子系统配对（欲知如何更改，请参阅〈[第 2.5.3 节
"自定义配置文件"](#Audit_and_Analysis.html#custom-profiles){.xref}〉），这使得插件能够根据需要的目标（选定的文件）对子系统进行微调，用户只需要选择正确的
[**tuned**]{.application}
配置文件（欲知如何选择配置文件或获取提供的配置文件列表，请参阅〈[第 2.5 节
"Tuned"](#Audit_and_Analysis.html#Tuned){.xref}〉和〈[第 2.5.4 节
"Tuned-adm"](#Audit_and_Analysis.html#tuned-adm){.xref}〉）。目前主要使用下列微调插件（这些插件中只有一部分是用于动态微调，插件所支持的参数同样也已列出）：
:::
::: variablelist
[`cpu`{.literal}]{.term}
:   ::: para
    通过 *`governor`* 参数将 CPU 调控器设置为指定值，并且根据 CPU
    负载动态地改变 PM QoS CPU DMA 延迟。如果 CPU 负载低于
    *`load_threshold`* 参数设定的指定值，延迟便会根据 *`latency_high`*
    参数设定的指定值被设置，不然它就会由 *`latency_low`*
    参数设定的指定值设置。延迟同样可以被设为一个固定的值，而不被动态更改。这可以通过将
    *`force_latency`* 参数设置为需要的延迟值办到。
    :::
[`eeepc_she`{.literal}]{.term}
:   ::: para
    根据 CPU 负载动态设置 FSB
    速度。一些上网本也具有此功能，这一功能也被称为华硕 Super Hybrid
    Engine。如果 CPU 负载低于或等于 *`load_threshold_powersave`*
    参数设定的指定值， 插件会根据 *`she_powersave`* 参数设置 FSB
    速度（请在 kernel 文档中查看关于 FSB
    频率极其对应值的详细信息，该文档提供了对大多数用户有用的默认设置）。
    如果 CPU 负载高于或等于 *`load_threshold_normal`*
    参数设定的指定值，插件会根据 *`she_normal`* 参数设置 FSB
    速度。若无法检测到硬件支持，那么就无法支持静态微调，插件也会被禁用。
    :::
[`net`{.literal}]{.term}
:   ::: para
    根据 *`wake_on_lan`* 参数设定的指定值对 LAN
    唤醒进行配置（它使用的是和 [**ethtool**]{.application}
    实用工具相同的语法）。它也会根据接口使用情况动态地更改接口速度。
    :::
[`sysctl`{.literal}]{.term}
:   ::: para
    使用插件参数设置不同的 `sysctl`{.systemitem} 设置。该语法是
    `name`{.literal}=`value`{.literal}，其中 `name`{.literal} 和
    [**sysctl**]{.application}
    工具提供的名称相同。如果需要改变其它插件无法更改的设置，请使用本插件（如果其它插件可以更改该设置，最好使用其它特定插件）。
    :::
[`usb`{.literal}]{.term}
:   ::: para
    根据 *`autosuspend`* 参数设定的指定值对 USB
    设备自动挂起超时进行设置。若该值为 0 意味着禁用自动挂起。
    :::
[`vm`{.literal}]{.term}
:   ::: para
    启用或禁用透明 Huge Page 取决于 *`transparent_hugepages`*
    参数的布尔值。
    :::
[`audio`{.literal}]{.term}
:   ::: para
    根据 *`timeout`*
    参数设定的指定值设置音频编码解码器的自动挂起超时。目前支持
    `snd_hda_intel`{.literal} 和 `snd_ac97_codec`{.literal}。该值为
    `0`{.literal} 意味着自动挂起被禁用。您还可以将 *`reset_controller`*
    的布尔参数设置为 `true`{.literal}，以此来强制重设控制器。
    :::
[`disk`{.literal}]{.term}
:   ::: para
    根据 *`elevator`* 参数设定的指定值设置 elevator。它同样会根据
    *`alpm`* 参数设置 ALPM （请参阅〈[第 3.7 节
    "主动连接电源管理"](#Core_Infrastructure.html#ALPM){.xref}〉），根据
    *`aspm`* 参数设置 ASPM （请参阅〈[第 3.6 节
    "活动状态电源管理"](#Core_Infrastructure.html#ASPM){.xref}〉），根据
    *`scheduler_quantum`* 参数设置计划程序量程，根据 *`spindown`*
    参数设置磁盘旋转降速，根据 *`readahead`* 参数设置磁盘 readahead
    ，根据 *`readahead_multiply`* 参数指定的常量乘以当前的 readahead
    值。除此之外，这一插件会动态地更改高级电源管理和磁盘旋转降速超时，根据当前的驱动器使用情况对驱动器进行设置。默认情况下动态微调将被启用，并可以通过
    *`dynamic`* 的布尔参数进行控制。
    :::
[`mounts`{.literal}]{.term}
:   ::: para
    根据 *`disable_barriers`* 参数的布尔值启用或禁用挂载障碍。
    :::
[`script`{.literal}]{.term}
:   ::: para
    此插件能够用来执行一种外置脚本，该脚本在配置文件已加载或未加载时都会运行。此脚本会被
    `start`{.literal} 或 `stop`{.literal}
    参数调用（这取决于在配置文件加载或卸载期间脚本是否被调用）。您可以通过
    *`script`*
    参数指定脚本文件名。您需要在脚本中正确执行停止行为，并且还原在启动期间改变的所有设置，否则还原将无法运行。为了方便使用，`functions`{.filename}
    文件的 Bash
    帮助脚本已经默认安装，您可以导入和使用其中定义的多种函数。此功能主要用于实现后向兼容性，建议您仅在其它插件无法提供需要的设置时使用本功能。
    :::
[`sysfs`{.literal}]{.term}
:   ::: para
    通过插件参数设定不同的 `sysfs`{.systemitem} 设置。该语法为
    `name`{.literal}=`value`{.literal}，其中 `name`{.literal} 是供
    `sysfs`{.systemitem}
    路径使用的。如需更改其他插件未提供的设置，请使用本插件（若其它插件有提供需要的设置，最好使用该特定插件）。
    :::
[`video`{.literal}]{.term}
:   ::: para
    为视频卡设置不同的节电等级（目前仅支持 Radeon 卡）。可使用
    *`radeon_powersave`*
    参数指定节电等级。支持的值有：`default`{.literal}、
    `auto`{.literal}、`low`{.literal}、`mid`{.literal}、`high`{.literal}
    和 `dynpm`{.literal}。详情请参阅
    。请注意此插件正处于试验阶段，未来发行时参数可能有所更改。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#Audit_and_Analysis.html#installation-and-usage}2.5.2. 安装和使用 {.title}
:::
::: para
若要安装 [tuned]{.package} 软件包，请以 root 身份运行下列指令：
:::
``` screen
yum install tuned
```
::: para
安装 [tuned]{.package}
软件包还会预先设置对您的系统最佳的配置文件。目前，默认配置文件是根据下列可自定义的规则选择的：
::: variablelist