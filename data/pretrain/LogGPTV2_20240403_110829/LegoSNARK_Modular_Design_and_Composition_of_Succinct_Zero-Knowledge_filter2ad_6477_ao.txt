returns ((u(cid:48)
ccΠ.RG,ccΠ.Z,ccΠ.A,ccΠ.E = 1] is negligible.
Pr[GameccKSND
CPlink
CPlink.A there exists extractor CPlink.E that returns (cid:0)(ulink
KSND(CPlink.RGCom, CPlink.Z)
is
– If
)j∈[(cid:96)], ωlink(cid:1) such that the
every
for
then
)j∈[(cid:96)], (olink
j
j
CPlink.RGCom,CPlink.Z,CPlink.A,CPlink.E = 1].
following probability is negligible
Pr[GameKSND
Hence, let ccΠ.E and CPlink.E be the extractors corresponding to our adversaries ccΠ.A and CPlink.A
respectively. From the existence of the two extractors ccΠ.E and CPlink.E we construct extractor
CP.E as below.
51
CP.E((ck, R), (ek, vk), auxR, auxZ) :
(cid:48)
, eklink) ; vk as (vk
Parse ek as (ck
, ek
(cid:48)
(cid:48)
Z := (eklink, vklink, auxZ ) ; (cid:0)(u
, vklink) ; crs
(cid:48)
R :=(cid:0)ek
(cid:48)
:= (ck
(cid:48)
(cid:48)
vk
, ek
(cid:48)
j)j∈[(cid:96)], o
(cid:48)
(cid:1) ; auxlink
, ω
)
(cid:48)(cid:1) ← ccΠ.E(R, crs
(cid:48)
(cid:48)
R := (ck, auxR) ; aux
aux
u ,Dlink
Rlink := (ck
x ,Dlink
(cid:48)
(cid:48)
∗
, R
, auxR
(cid:48)
, vk
j )j∈[(cid:96)], (olink
ω ) ; auxlink
,Dlink
j )j∈[(cid:96)], (olink
j )j∈[(cid:96)], ωlink(cid:1) ← CPlink.E((ck, Rlink), crslink, auxlink
(cid:0)(ulink
return(cid:0)(ulink
Recall that the output of CP.A is of the form(cid:0)x, (cj)j∈[(cid:96)], π(cid:1) with π =(cid:0)c(cid:48), πlink, π(cid:48)(cid:1), and for CP.E is
of the form(cid:0)(ulink
Combining the steps above, we have shown that for any CP adversary CP.A there exists a
CP.RGCom,CP.Z,CP.A,CP.E = 1] = negl.
corresponding extractor CP.E. We are left to prove that Pr[GameKSND
(cid:48)(cid:1)
)j∈[(cid:96)], w(cid:48)(cid:1).
)j∈[(cid:96)], (olink
For convenience we use the following shorter notations about “good proofs” and “good commit-
R , auxlink
Z )
Z := auxZ
j )j∈[(cid:96)], ω
j
j
(cid:48)
(cid:48)
(cid:48)
R, aux
, aux
Z )
ments”:
GdPf(π(cid:48)) := ccΠ.VerProof(vk(cid:48), x, c(cid:48), π(cid:48)) = 1
GdPf(πlink) := CPlink.VerProof(vklink, c(cid:48), (cj)j∈[(cid:96)], πlink) = 1
GdCom(cj, ulink
, olink
GdCom(cid:48)(c(cid:48), ulink) := ccΠ.VerCommit(ck(cid:48), c(cid:48), (ulink
GdCom(cid:48)(c(cid:48), u(cid:48)) := ccΠ.VerCommit(ck(cid:48), c(cid:48), (u(cid:48)
j)j∈[(cid:96)], o(cid:48)) = 1
Rlink(xlink, ulink, ωlink) := ccΠ.VerCommit(ck(cid:48), xlink, (ulink
) := VerCommit(ck, cj, ulink
j
j
j
j
) = 1
)j∈[(cid:96)], ωlink) = 1
)j∈[(cid:96)], ωlink)
¬GdCom(cj, ulink
bad :=(cid:0) (cid:95)
bad(cid:48) :=(cid:0)¬GdCom(cid:48)(c(cid:48), u(cid:48)) ∨ ¬R(x, u(cid:48), ω(cid:48))(cid:1);
bad◦ :=(cid:0)(cid:95)
) ∨ ¬R(x, ulink, ω(cid:48))(cid:1)
)∨¬GdCom(c(cid:48), xlink)∨¬Rlink(xlink, ulink, ωlink)(cid:1)
¬GdCom(cj, ulink
j∈[(cid:96)]
j
j
j
j∈[(cid:96)]
Let us deﬁne the following events:
By the knowledge soundness of CPlink and ccΠ we have that Pr[GdPf(πlink) ∧ bad◦] = negl(λ) and
Pr[GdPf(π(cid:48)) ∧ bad(cid:48)] = negl(λ), and we abbreviate nλ := negl(λ) for convenience. Let us now ﬁrst
consider the case when cc-SNARK is binding and observe that:
Pr[GameKSND
CP.RGCom,CP.Z,CP.A,CP.E = 1]
(cid:48)
) ∧ GdPf(πlink) ∧ bad]
= Pr[GdPf(π
≤ Pr[GdPf(πlink)∧bad
◦
]+Pr[GdPf(π
(cid:48)
)∧bad∧Rlink(c
(cid:48)
,ulink,ωlink)
(cid:94)
j∈[(cid:96)]
GdCom(cj,u
◦
j)]
≤ Pr[GdPf(π
≤ Pr[GdPf(π
(cid:48)
Pr[Rlink(c
≤ Pr[GdPf(π
≤ Pr[GdPf(π
≤ Pr[GdPf(π
≤ negl(λ)
(cid:48)
(cid:48)
(cid:48)
)∧¬R(x, ulink, ω
) ∧ Rlink(c
(cid:48)
, ulink, ωlink)] + nλ
)∧¬R(x, ulink, ω
) ∧ Rlink(c
,ulink,ωlink)∧(¬Rlink(c
(cid:48)
(cid:48)
(cid:48)
(cid:48)
,u
) ∧ u
, ulink, ωlink)∧Rlink(c
(cid:48)
(cid:48)
, u
, o
)∧¬R(x, ulink, ω
)∧Rlink(c
,ulink,ωlink)∧(¬Rlink(c
(cid:48)
(cid:48)
(cid:48)
) ∧ Rlink(c
(cid:48)
(cid:48)
(cid:48)
, ω
(cid:48)
(cid:48)
, o
) ∨ ¬Rlink(c
(cid:48)
) ∧(cid:0)(¬R(x, u
) ∧(cid:0)¬R(x, u
) ∧ ¬R(x, ulink, ω
(cid:48)
)(cid:1)] + nλ
(¬Rlink(c
(cid:48)
(cid:48)
(cid:48) (cid:54)= ulink] + nλ
) ∧ Rlink(c
, ωlink)) ∨
, u
(cid:48)
(cid:48)
,u
, ω
, u
, u
, o
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
,o
)∨u
(cid:48)
= ulink)] +
(cid:48)
(cid:48)
,o
)∨u
(cid:48)
= ulink)]+nλ
, ulink, ωlink))(cid:1)] + nλ
52
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
¬bad◦ := Rlink(c(cid:48),ulink,ωlink)(cid:86)
Above, (1) follows by spelling out the winning condition of the experiment considering our con-
struction of CP.VerCommit; (2) follows ﬁrst partitioning over bad◦ and then by observing that
); (3) follows by knowledge soundness of CPlink; (4)
follows after partitioning on the event Rlink(c(cid:48),u(cid:48),o(cid:48))∧u(cid:48) (cid:54)= ulink; (5) is by the binding property of the
commitment of ccΠ;25 (7) holds by using that Pr[((E1∧E(cid:48)
2))]≤ Pr(E1 ∨ E2)]; ﬁnally, (8)
follows by knowledge soundness of ccΠ.
j∈[(cid:96)] GdCom(cj, ulink
1)∨(E2∧E(cid:48)
j
The case of weak binding. Let us now consider the case in which ccΠ has only weak binding. In
this case the commitment returned by ccΠ.Prove refers to the whole witness w = u, which in the
previous proof means that the value ω(cid:48) returned by ccΠ.E is empty.