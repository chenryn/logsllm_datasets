      arg11 = addr;
      *(_QWORD *)&n[4] = value;
      v11 = a1;
      v8 = (addr >> 20) & 0xF;
      idx = (addr >> 16) & 0xF;
      result = (_BYTE *)((addr >> 20) & 0xF);
      switch ( (unsigned __int64)result )
      {
        case 0uLL:
          if ( idx >= 0 && idx = 0 && idx = 0 && idx = 0 && idx = 0 && idx = 0 && idx 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    unsigned char* mmio_mem;
    void die(const char* msg)
    {
        perror(msg);
        exit(-1);
    }
    void mmio_write(uint64_t choice,uint64_t idx,uint64_t chr)
    {
        uint64_t addr = ((choice & 0xf) 
> 首先需要明确的是，该接口在用户态就可以使用。在通常环境下，IN指令是一条特权指令，在普通用户态程序下是无法使用的。因此，运行这条指令会让用户态程序出错并陷出到hypervisor层，从而hypervisor层可以对客户机进行相关的操作和处理，因此利用此机制完成了通信。利用backdoor的通信机制，客户机便可以使用RPC进行一系列的操作，例如拖放、复制、获取信息、发送信息等等。
    /* in Intel syntax (MASM and most Windows based assemblers) */
        MOV EAX, 564D5868h                      /* magic number     */
        MOV EBX, command-specific-parameter
        MOV CX,  backdoor-command-number
        MOV DX,  5658h                          /* VMware I/O Port  */
        IN  EAX, DX (or OUT DX, EAX)
        /* in AT&T syntax (gnu as and many unix based assemblers)   */
        movl $0x564D5868, %eax;                 /* magic number     */
        movl command-specific-parameter, %ebx;
        movw backdoor-command-number, %cx;
        movw $0x5658, %dx;                      /* VMware I/O port  */
        inl  %dx, %eax; (or outl %eax, %dx)
在另一篇文章[VMWare GuestRPC
mechanism](http://sysprogs.com/legacy/articles/kdvmware/guestrpc.shtml)中我们可以看到一个简单的使用demo:
    #define BDOOR_MAGIC 0x564D5868
    #define BDOOR_PORT 0x5658
    #define BDOOR_CMD_GETMHZ 1
    #define BDOOR_CMD_GETDISKGEO 3
    #define BDOOR_CMD_GETPTRLOCATION 4
    #define BDOOR_CMD_SETPTRLOCATION 5
    //Continued in backdoor_def.h
    Let's now make a simple program querying the current mouse cursor location using VMWare backdoor interface:
    #include 
    unsigned __declspec(naked) GetMousePos()
    {
        __asm
        {
            mov eax, 564D5868h
            mov ecx, 4
            mov edx, 5658h
            in eax, dx
            ret
        }
    }
    void main()
    {
        unsigned mousepos = GetMousePos();
        printf("Mouse cursor pos: x=%d,y=%d\n", mousepos >> 16, mousepos & 0xFFFF);
    }
> If this program is executed on a real machine, the in instruction will cause
> a "privileged instruction" exception, as user-mode code runs in Ring 3.
> However, when this program is executed on the virtual machine, it will print
> the correct mouse cursor position.
上述的代码在物理机中运行会出错，因为涉及到了特权指令，但是在虚拟机中运行可以获取到鼠标游标位置。
除了Backdoor，VMWare提供了一种更加灵活的接口，叫做`GuestRPC`，一次RPC请求包含了以下的请求序列：
  1. Open a GuestRPC channel
  2. Send command length
  3. Send command data
  4. Receive reply size
  5. Receive reply data
  6. Signalize end-of-receive
  7. Close channel
前面的数字对应了调用它们的RPC子命令号，在`open-vm-tool`中有实现上述调用过程，对应的函数如下：
    //https://github.com/drothlis/open-vm-tools/blob/master/lib/rpcOut/rpcout.c
    RpcOut *RpcOut_Construct(void);
    void RpcOut_Destruct(RpcOut *out);
    Bool RpcOut_start(RpcOut *out);
    Bool RpcOut_send(RpcOut *out, char const *request, size_t reqLen,
    char const **reply, size_t *repLen);
    Bool RpcOut_stop(RpcOut *out);
除了现成的函数，长亭的师傅自己也实现了一套通信中需要的函数，在知乎那篇文章中有详细的`参数寄存器设置/返回值含义/调用方式`，限于篇幅不再赘述。
总之，我们现在有了一套guest同host通信的机制。
### 漏洞分析
#### 静态分析
原题给了`vmware.ovf、vmware-disk1.vmdk、vmware.mf、vmware-vmx.patched、VMware-Workstation-Full-15.5.0-14665864.x86_64.bundle和ubuntu-18.04.3-desktop-amd64.iso镜像文件`。前面三个文件是用来搭建本地环境的，vmdk是磁盘文件，通过ovf文件可以导入vmdk从而起一个题目的环境。`.bundle`文件可以看成是linux下的安装包，`.patch`文件是patch之后的`vmware-vmx`文件，这个文件是实际执行`.vmx`的二进制文件。
    /usr/lib/vmware/bin/vmware-vmx -s vmx.stdio.keep=TRUE -# product=1;name=VMware Workstation;version=15.5.0;buildnumber=14665864;licensename=VMware Workstation;licenseversion=15.0+; -@ duplex=3;msgs=ui /home/wz/vmware/Ubuntu/Ubuntu.vmx
因为是patch文件，我们只要比较和原文件不同即可，这里首先使用`.bundle`文件在宿主机`ubuntu 18.04`安装上`VMWareWordk
Station Pro 15.5`，找到`/usr/lib/vmware/bin/vmware-vmx`，拖出来，拿`BinDiff`定位patch点，这个工具我是参考[bindiff基本使用以及小试牛刀
](https://bbs.pediy.com/thread-246326.htm)安装使用的，我的IDA版本是7.1，需要安装一个`6.8`的IDA，下载`4.3`的bindiff方可在IDA使用这个插件。
安装成功之后用IDA打开原vmx，保存idb数据库之后退出。再用IDA打开patch后的vmx，ctrl+6调出bindiff插件选择之前的idb进行比较，之后`Save
Results`生成`.BinDiff`文件，再到bindiff里打开`bindiff.jar`，导入这个文件查看详细信息。
可以看到只有一个函数`0x16E220`是`0.99`的相似，其余全部`1`，点进去之后定位到具体的不同点。
发现有块区域被大片nop掉，且换成了调用`system`函数的指令，这里很明显是个后门，可以拿来执行命令。
继续回到IDA查看这个漏洞函数，发现其中有关于`channel`的字符串`GuestMsg: Channel %u, Not enough memory
to receive a message`，加上函数开头的switch case判断number的范围为`0-6`，很容易联想到这就是`GuestRPC
Handler`，一个RPC指令处理函数，下面代码只包含了漏洞所在的部分，可以看到这个路径是当`subcommand=0x4`，也就是`Receive
reply data`的处理部分，因为本人逆向水平有限，已经大差不差到漏洞触发条件，就从动态调试入手如何到达这个路径。
    case 4:
          v40 = sub_16DE80(6LL, 7LL);
          v5 = (unsigned int *)v40;
          if ( !v40 )
            goto LABEL_62;
          if ( *(_DWORD *)v40 != 3 )
            goto LABEL_20;
          if ( *(_BYTE *)(v40 + 8) == 1 )
            goto LABEL_48;
          if ( !*(_QWORD *)(v40 + 0x38) )
            goto LABEL_90;