title:Multi-Version Attack Recovery for Workflow System
author:Meng Yu and
Peng Liu and
Wanyu Zang
Multi-Version Attack Recovery for Workﬂow Systems
School of Information Sciences and Technology, Pennsylvania State University, 16801
Meng Yu, Peng Liu, Wanyu Zang
PI:EMAIL
Abstract
Workﬂow systems are popular in daily business process-
ing. Since vulnerabilities cannot be totally removed from a
system, recovery from successful attacks is unavoidable. In
this paper, we focus on attacks that inject malicious tasks
into workﬂow management systems. We introduce practi-
cal techniques for on-line attack recovery, which include
rules for locating damage and rules for execution order.
In our system, an independent Intrusion Detection System
reports identiﬁed malicious tasks periodically. The recov-
ery system detects all damage caused by the malicious tasks
and automatically repairs the damage according to depen-
dency relations. Without multiple versions of data objects,
recovery tasks may be corrupted by executing normal tasks
when we try to run damage analysis and normal tasks con-
currently. This paper addresses the problem by introduc-
ing multi-version data objects to reduce unnecessary block-
ing of normal task execution and improve the performance
of the whole system. We analyze the integrity level and per-
formance of our system. The analytic results demonstrate
guidelines for designing such kinds of systems.
1. Introduction
Increasingly, workﬂow management systems are being
used as the primary technology for organizations to per-
form their daily business processes (workﬂows). A work-
ﬂow consists of a set of tasks that are related to each other
in terms of the semantics of a business process. Each task
represents a speciﬁc unit of work that the business needs to
do (e.g., a speciﬁc application program, a database trans-
action). A consistent and reliable execution of workﬂow is
crucial for all organizations. However, it is well known that
system vulnerabilities cannot be totally eliminated and such
vulnerabilities can be exploited by attackers who penetrate
the system.
In this paper we mainly consider those intrusions that in-
ject malicious tasks into the workﬂow management system
instead of the attacks that only crash the workﬂow manage-
ment system. These intrusions happen when attackers ac-
cess a system with stolen (guessed, calculated, etc.) pass-
words or when some defense mechanisms, such as access
control, are broken by the attackers. Under such intrusions,
some tasks in a workﬂow may be forged or corrupted. Even
worse, these malicious tasks will ultimately spread mislead-
ing information or damage to more tasks and nodes, gen-
erating more trash data in the workﬂow management sys-
tem. The attack recovery on which we focus in this paper
attempts to remove the malicious effects of the intrusions
and to provide reasonable on-line recovery services. A mo-
tivating example for the attack recovery is illustrated in Fig-
ure 1.
Workflow A
T1
B
T2
A
T3
I
T4
A
T5
U
T6
G
Workflow B
T7
G
T8
A
T9
G
T10
A
Processor 1
Processor 2
Processor 3
Executed path
Unexecuted path
Data dependence
Excuting path after re−excuting the bad task
A − infected tasks
B − bad tasks
G − good tasks
I − innocent tasks
U − unexecuted tasks
Figure 1. A Workﬂow
In the example, there are two workﬂows processed by
three processors. Branches in the ﬁgure are not for paral-
lel tasks but for selections of executing paths. P1 : T1 →
T2 → T3 → T4 → T6 and P2 : T1 → T2 → T5 → T6 are
two different executing paths, which are selected by task T2
in a speciﬁc execution. In this example, P1 is the execut-
ing path led by attacks and P2 is the normal executing path
without attacks.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:34:29 UTC from IEEE Xplore.  Restrictions apply. 
In the example, task T1 marked with “B” is the only ma-
licious task that is damaged directly by the attacker and is
identiﬁed by the IDS. Due to reading dirty data from task
T1, task T2, T4, T8 and T10 calculate wrong results. They
are marked by “A”, indicating infected tasks. Furthermore,
task T2, based on dirty data it reads from T1, makes a wrong
decision to execute tasks on path P1. In fact task T3 and task
T4 would not have been executed at all if T1 were not dam-
aged.
From this example, we learn that the IDS is unable to dis-
cover all damage to the system. The damage directly caused
by the attacker will be spread by executing normal tasks
without being detected by the IDS.
The example in Figure 1 shows how complex an at-
tack recovery can be even for simple workﬂows with a sin-
gle malicious task. We use it to explain our techniques in
this paper. The example seems simple while it is complex
enough to include all situations where a workﬂow can be
affected by attacks. It is also powerful enough to demon-
strate all aspects of our attack recovery theories.
Therefore, when attacks happen, we need to identify
tasks that were affected and need to be undone. Then we
need to identify tasks that need to be redone. In this pa-
per, we will show that in some circumstances certain tasks
that compute correctly need to be undone (e.g., task T3 and
task T6) and some affected tasks may not need to be redone
(e.g., task T4), which is contrary, at least to some extent,
to common knowledge on recovery. In addition, we need to
execute recovery tasks and new workﬂow tasks in correct
executing order in order to guarantee the correctness of at-
tack recovery. Existing techniques do not effectively and ef-
ﬁciently solve the problem.
Within this paper, we introduce the fundamental theories
for workﬂow attack recovery, which guarantee the correct-
ness of recoveries. We propose an architecture and a sched-
uler algorithm for workﬂow attack recovery based on our
theories. According to the set of malicious tasks reported
by the IDS, our approach identiﬁes all directly and indi-
rectly infected tasks and repairs them with as little cost as
possible. We break restrictions caused by dependency rela-
tions to achieve better performance. The performance and
integrity level of our system are analyzed.
The rest of the paper is organized as follows. In Sec-
tion 2 we introduce some deﬁnitions and notions used in
this paper. Theories of multi-version data object based re-
covery are described and proved in Section 3. Our theories
include the rules and conditions to ﬁnd tasks affected by
attacks and to guarantee the recovery correctness. We in-
troduce an architecture and related algorithms in Section 4
based on our recovery theories. The performance and in-
tegrity level are analyzed in Section 5. We compare related
work with ours in Section 6 and our conclusions are pre-
sented in Section 7.
2. Preliminaries
2.1. Set and Partial Orders
During the execution of workﬂow tasks and recovery
tasks, there are some speciﬁc partial orders that need to be
satisﬁed. In this section, we introduce some set and partial
order relations related to our theories.
Preceding relations Given two tasks Ti and Tj, if task Ti
is executed before Tj according to a workﬂow speciﬁcation,
or Ti occurs earlier than Tj in the system log, then Ti pre-
cedes Tj by deﬁnition, which is denoted by Ti ≺ Tj.
Relation ≺ is a preceding relation deﬁned by both work-
ﬂow speciﬁcation and system log. If Ti and Tj are tasks in
the same workﬂow and they have not been executed, their
relation is deﬁned by the workﬂow speciﬁcation. Otherwise,
the relation is deﬁned by their occurring sequence in the
system log. If two tasks are within different workﬂows and
have not been executed, then they have no deﬁned ≺ rela-
tion.
In the example shown in Figure 1, a solid directed edge
indicates a preceding relation. For example, T1 ≺ T2,
T2 ≺ T3, T7 ≺ T8 and T8 ≺ T9. Relation ≺ is transi-
tive. We can get T1 ≺ T3 from T1 ≺ T2 and T2 ≺ T3. The
relation ≺ is a partial order because some tasks have no pre-
ceding relations among them, such as T4 and T5 in the ex-
ample.
When tasks of are executed in the workﬂow system, they
have realistic preceding relations that are determined by the
task scheduler. We use Ti ≺s Tj to denote that task Ti runs
before Tj by scheduling, which we say task Ti precedes task
Tj by scheduling.
Given any two tasks in the same workﬂow, if Ti ≺ Tj
then Ti should be scheduled before Tj, namely Ti ≺s Tj,
and Ti will occur earlier than Tj in the system log. For two
tasks within two different workﬂows and without a ≺ rela-
tion, or at least one of these two tasks is a recovery task,
they will ultimately be scheduled by the scheduler and they
will have ≺s relations. Before they are done and commit-
ted, they are neither deﬁned by the same workﬂow speciﬁ-
cation nor in the system log. Therefore they have only ≺s
relation, which is the difference between ≺ and ≺s relation.
Assuming that ≺ is a relation on set S then we deﬁne
minimal(S,≺) = x where x ∈ S ∧ (cid:1)x(cid:1) ∈ S, x(cid:1) ≺ x. If
S is a set including all tasks in Figure 1 then minimal(S,≺
) = T1. Note that there may be more than one result qual-
iﬁed to the deﬁnition of minimal(S,≺). For example, if
S = {Ti, Tj, Tk}, Ti ≺ Tk and Tj ≺ Tk, then both Ti
and Tj are qualiﬁed results for minimal(S,≺). In cases like
these, we randomly select one qualiﬁed result as the value
for minimal(S,≺).
Data dependency and multi-version data objects We use
R(T ) and W (T ) to denote the reading set and the writing
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:34:29 UTC from IEEE Xplore.  Restrictions apply. 
set of task T . For example, given a task Tx : x = a + b,
R(Tx) = {a, b} and W (Tx) = {x}.
We introduce some concepts that are usually discussed
in the ﬁeld of parallel computing. Given two tasks ti ≺ tj,
• If (W (ti) − (cid:1)
W (tk)) ∩ R(tj) (cid:6)= φ, then tj is
ti≺tk≺tj
ﬂow dependent on ti, which is denoted by ti →f tj.
• If R(ti) ∩ (W (tj) − (cid:1)
W (tk)) (cid:6)= φ, then tj is
ti≺tk≺tj
anti-ﬂow dependent on ti, which is denoted by ti →a
tj.
• If (W (ti) − (cid:1)
W (tk)) ∩ W (tj) (cid:6)= φ, then tj is
ti≺tk≺tj
output dependent on ti, which is denoted by ti →o tj.
Intuitively, if ti →f tj, then tj reads some data objects
written by ti. If ti →a tj, then tj modiﬁes some date ob-
jects after ti reads them. If ti →o tj, then ti and tj have
some common data objects that they modify.
Consider another task Tb : b = x − 1, where Tx ≺
Tb, R(Tb) = {x} and W (Tb) = {b}, we have Tx →f Tb
and Tx →a Tb. All the relations →f ,→a and →o are data
dependency relations and are not transitive. From the well
known results of parallel computing, if a task Tj is data de-
pendent on another task Ti then they cannot run in paral-
lel and Tj should be executed after executing Ti, otherwise
we will get wrong results.
With a single version of each data object, Tx must be ex-
ecuted before Tb to get the correct result. The order can be
changed by introducing multiple versions of data objects.
Suppose b1 is one version of b with revision number 1, and
b2 is another version of b with revision number 2, and so
on. The anti-ﬂow dependency among Tx and Tb can be bro-
ken by revising Tx : x = a + b1 and Tb : b2 = x − 1.
Even if Tb is executed before Tx, Tx still gets correct re-
sults by reading b1. Multi-version data objects also can be
used to break output dependencies.
By introducing multi-version data objects, restrictions
caused by anti-ﬂow and output dependencies are removed.
Note that executing orders determined by ﬂow dependen-
cies are not changed by multiple-version data objects.
Control Dependency Given two tasks Ti ≺ Tj within the
same workﬂow, if the execution of task Tj is decided by task
Ti, then we say Tj is control dependent on Ti, which is de-
noted by Ti →c Tj. A control dependency relation is tran-
sitive. If Ti →c Tj and Tj →c Tk then Ti →c Tk. In the
example shown in Figure 1, T2 →c T3, T2 →c T4 and
T2 →c T5.
We use → to denote data or control dependency when
the concrete type of dependency does not matter to our dis-
cussion. If there exist such tasks T1, T2, . . . , Tn, n ≥ 2 that
T1 → T2 →, . . . ,→ Tn, then T1 →∗ Tn.
If Ti →c Tj then there are two possibilities about the ex-
ecution of Tj: Tj should be executed or should not. We de-
ﬁne two sets to describe these possibilities.
c x and x should be
executed according to the executing result of Ti.
ST (Ti) is a set of x, where Ti →∗
SF (Ti) is a set of x, where Ti →∗
c x and x should not be
ST (Ti) is the set of task Ti’s true successors and SF (Ti)
executed according to the executing result of Ti.
is the set of task Ti’s false successors.
Please note the deﬁnition of these two sets are speciﬁc to
concrete executions of workﬂows (or workﬂow instances).
For the same task, these two sets may have different con-
tents in different executions. If Tj ∈ ST (Ti), then Tj is on
the executing path according to the current execution. Oth-
erwise Tj is not on the executing path according to the cur-
rent execution. So, if there are more than two branches go-
ing out of task Ti within the workﬂow speciﬁcation, only
tasks on one branch belong to ST (Ti) in a speciﬁc execu-
tion. Others belong to SF (Ti). Consider the example in Fig-
ure 1, in the attacked execution ST (T2) = {T3, T4} and
SF (T2) = {T5}. After we carry out the undo tasks and
redo(T2), it is another story. That is, ST (redo(T2)) = {T5}
should be in the recovered execution. Therefore, ST (Ti)
may be different from ST (redo(Ti)), which indicates that
the recovered workﬂow may go through a different path
from the previous path executed.
2.2. Workﬂows, recovery schemes and the system
log
Based on the above deﬁnitions, workﬂows can be repre-
sented by (cid:8)T ,≺,→c(cid:9), where T is the set of all workﬂow
tasks, ≺ is the preceding relation on T and →c is the con-
trol dependency relation on T . Consider the example in Fig-
ure 1, T = {Ti | 1 ≤ i ≤ 10}, ≺= {(T1, T2), (T2, T3),
(T3, T4), (T2, T5), (T4, T6), (T5, T6), (T7, T8), (T8, T9),
(T9, T10)} and →c= {(T2, T3), (T2, T4), (T2, T5)}. We do
not limit our deﬁnition to a single workﬂow, here the set T
may consist of tasks from more than one workﬂow.
Given workﬂows, data dependencies →f ,→a and →o
can be calculated from T while relations ≺ and →c are de-
ﬁned only by workﬂows.
Similarly, we deﬁne a recovery scheme as (cid:8)R,≺s,→c
(cid:9), where R is the set of recovery tasks that consists of
undo and redo tasks, ≺s is the scheduled preceding rela-
tion among the recovery tasks, and →c is the control depen-
dency relation among the recovery tasks.
Finally, given workﬂows (cid:8)T ,≺,→c(cid:9), the system log is
represented as (cid:8)L,≺(cid:9), where L ⊆ T is the set of tasks that