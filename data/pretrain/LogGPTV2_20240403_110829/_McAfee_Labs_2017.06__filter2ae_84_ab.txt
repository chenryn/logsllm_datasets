在成功解码PNG之后, 我们可以看到了它的输出：
图 8：在解码PNG数据后，代码利用到漏洞CVE-2015-2419。
通过进一步对PNG图像的解码，和此漏洞攻击代码的分析显示，它包含了针对CVE-2015-2419，即在IE中JavaScript处理方面的漏洞攻击代码。此漏洞攻击代码也包含了成功利用此漏洞后执行的shellcode。
图 9：攻击CVE-2015-2419的shellcode。
此Sundown工具包还被发现能够分发来自IP地址93.190.143.82的，使用到隐写术的Cerber勒索软件。
有关本分析的SHA256散列为：
    A5E991B647BC60A9323A214C71146F534D4195182C3C630B228 3BF1D3CEC8D6D
    EFB5308AA78FFD53E799F7411CC92A564219C27B15D630B6BFA EC674DF8B5923
    EEDBD8CDDBA5ED59D86207E37252406E2E1DB1762098A6293E A25762E555E75B
**Cerber隐藏在.jpg 文件中**
Cerber勒索软件族目前非常流行。最初的传播载体是在Microsoft 文档中嵌入的宏代码。
图 10：当受害人打开Cerber感染的文档时，它会投放一个恶意的.vbs文件，作用是使用一个可执行文件wscript.exe，并从恶意网站下载
mhtr.jpg。
图 11：该网络捕获显示了mhtr.jpg的请求。
图 12：下载的mhtr.jpg (SHA256 哈希值： 8f14257937bd6d45c2455592614331ebb
10078d8bfd9e6acf1b502ed609ef131) 表明它与Zen Coding有关。
图 13: mhtr.jpg的标头。
图 14： 单个XOR 字节的密钥被用来加密可执行文件，并使用隐写术嵌入到偏移量0x25c9。
偏移量0x25c9每个字节都使用XOR字节的密钥0x73进行加密。其解密过程为：
图 15： 解密后的文件。
加密的文件的有效载荷是一个Nullsoft安装程序文件 (SHA256 哈希值：
37397f8d8e4b3731749094d7b7cd2cf56cacb12dd69e0131f07dd78dff6f262b)，它被放置在%APPDATA%文件夹中，并用于勒索活动。
**Zbot、Vawtrak、Stegoloader和Stegoloader所用到的隐写术**
在2015年的早期，Vawtrak开始使用隐写术来隐藏其图标中的设置。恶意软件使用tor2web服务，从TOR上托管服务器里下载favicon.ico文件。该favicon.ico图像显示在浏览器URL的左边。一般来说，每个网站都包含一个.ico图标，所以看到这类请求的安全产品通常不测试它们的有效性。接下来，恶意软件提取每个像素的最低有效位，并构造一个URL，用以下载其配置文件。
Zbot 恶意软件的一个变种还使用隐写术来隐藏其配置的数据。这种变体在受害者的系统上下载
JPEG。配置数据就隐藏在该图像中。之后，恶意软件从图像中提取配置数据，并进一步执行恶意操作。
Lurk使用隐写术来下载其他恶意软件到目标系统上。并非简单地下载和执行恶意的二进制文件，Lurk首先下载一个BMP图像。它使用最高有效位算法，在图像文件中嵌入加密的URLs。它从图像文件中提取嵌入的URLs，然后再下载额外的恶意软件。
Stegoloader
安装恶意软件到受害者的系统上，以窃取敏感信息。一旦成功执行，Stegoloader会从一个合法的网站下载一个PNG图像。它使用隐写术将其主要模块的代码嵌入到已下载PNG内。恶意软件通过应用隐写的提取算法，来检索隐藏的数据。
**数据渗出和隐写术**
数据渗出，也称为数据盗窃，是将敏感信息从一台计算机或服务器，以未经授权的方式进行转移。2016年，我们注意到了和Magento有关的攻击，它发生在一个在线的电子商务平台。此类袭击使用图像隐写术来隐藏支付卡的详细信息。
一般情况下，Magento
网站用核心内容管理系统文件–cc.php，来将处理信用卡信息。因此攻击者能够将恶意代码放在Magento网站的[magento_root] /app/
code/core/Mage/Payment/Model/Method/cc.php，这样明显位置。
图 16：一个合法的prepareSave （）方法。
通常，恶意软件将恶意代码插入到prepareSave
（）方法里，当然它可能会出现在任何其他的方法里。在执行之后，恶意代码收集支付卡的详细信息，并隐藏在本地的图像文件中，比如说真正的产品图片里。一旦完成收集，攻击者只需下载图像文件（典型场景是电子商务网站），然后再提取隐藏的数据。
**网络隐写术**
网络隐写术是目前恶意软件使用到的最新型的数字隐写术。这种形式正在成上升趋势，因为攻击者可以通过网络发送无限数量的信息。一些恶意软件作者使用TCP/IP
协议标头里未使用到的字段来隐藏数据。
在某些情况下，恶意软件将其控制服务器的流量隐藏在简单的DNS和HTTP请求里。恶意软件从硬编码DNS服务器，即一台真实的控制服务器上向不存在的域发送请求。在内部DNS响应中通过使用简单Base64编码技术，这些命令会被嵌入并混淆。
我们分析了TeslaCrypt，它使用HTTP错误消息来隐藏其通信，并且通过Neutrino的利用工具包被下载。
图 17： 最初，TeslaCrypt 勒索的载荷通过带有"404"错误消息的、且经过Base64编码的消息与远程服务器通信。
该HTML页面的评论部分是被Base64编码的。我们发现“,”对于响应的解码就是"成功"的。
然后，恶意软件用下面的编码数据来予以响应，如下图所示。
图 18-19： 恶意软件成功感染的响应。
图 20： 在答复中，恶意软件接收另一个带有下载链接的、Base64编码过的404错误消息。
已解码的字符串具有以下格式：
**结论**
隐写术将继续变得越来越流行。它是一种古老的技术，却又一次证明其有效性。因为隐写术可以经常绕过反恶意软件的检测，可见会有更多的威胁将使用到这种技术。
**策略和流程**
为了防止内部的威胁，加强使用的软件交付和分发机制。维护一个受信任的、企业应用程序的中央存储库，用户可以在那里下载到经过批准的软件。同时也禁止用户下载未知来源的软件。
在图像编辑软件的帮助下，寻找图像上细微的、颜色差异之类的隐写术标记。而且，要注意图像中大量重复的颜色，那可能就是隐写攻击的指示。
控制隐写软件的使用。应该禁止在任何公司的系统上存在隐写软件，除非有着具体所需的业务目的。只允许在受限的网段中部署此类软件。
只安装来自受信任供应商的、具有信任签名的应用程序。
配置反恶意软件以检测捆绑。反恶意软件应被配置为能够识别出可能包含有隐写图像的binder是否存在。
如果隐写攻击已成功，一个结合了适当网络分段的、虚拟化的架构可能有助于遏制其爆发，因为虚拟化系统会用到安全和可核查启动进程，以及连续的网络流量监测能够有助于隔离各种应用程序。
监控出站的流量。通过监测出站流量，来识别那些得逞的隐写攻击是否存在。
传送门
[【安全报告】McAfee Labs 威胁报告 2017.06
（上）](http://bobao.360.cn/learning/detail/4090.html)