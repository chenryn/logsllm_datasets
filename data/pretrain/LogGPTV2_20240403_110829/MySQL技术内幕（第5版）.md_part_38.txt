它们所需要的存储空间都各不相同。（取值范围越大，所需的存储空间也会越多。）可以将整型
是INT的同义词。这几种数据类型之间的主要区别在于，它们可以表示的那些值的取值范围和
3.2.4.1米
边字节存储占用总和，是小数点左右两侧数值所需存储空间的总和。
字需要4个字节，最后剩下的数字需要1~4个字节。每一个值的存储空间都等于小数点左右两
在DECIMAL列的定义里，可以包含一个最大有效位数M和一个小数位数D（即精度和小数
这里的M和D都是可选的。如果省略了D，那么其默认值为·0。如果省略了M，那么其默认
DECIMAL 列也可以被定义成 UNSIGNED。与整数类型不同的是，把一个 DECIMAL 类型定义
整型列的显示宽度M只与MySQL 用于显示列值时所使用到的字符数相关，而与存储该值
在定义整型列时，
NUMERIC和FIXED 都是DECIMAL的同义词。
要占用的字节存储空间无关。例如，不管其显示宽度是多少个字符，BIGINT值都要占用
精确值数据类型包括整数类型和定点DECIMAL类型。
一个 BIT(M)值大约需要(M+7)/8个字节的存储空间。
MySQL中的整数类型包括TINYINT、SMALLINT、MEDIUMINT、INT和 BIGINT。其中，INTEGER
类型DECIMAL的存储空间要求取决于小数点左右两侧的数字个数。对于每一侧，每9位数
BIT[(M）]
DOUBLE[(M, D) ]
FLOAT[(M,D）]
DECIMAL([M[D]])
BIGINT[(M)]
INT[(M)]
MEDIUMINT[ (M) ]
SMALLINT[(M)]
TINYINT[(M)]
精确值数字数据类型
类型名称
一半。这个M与列的取值范围也没有任何关系。例如，把某列定义为INT(3），这并
，这个默认宽度通常是该列里“最长”值的长度。
，下列等式是成立的：
你可以为它指定一个可选的显示宽度M，该值必须是1~255的整数。
以禁止出现负数，这也将其取值范围上移到了从0开始的区间。
表3-6
数字数据类型的存储空间要求
—此特性使得DECIMAL 非常适合于保存货币值。
取决于M
8个字节
4个字节
取决于M和D
8个字节
4个字节
3个字节
2个字节
1个字节
存储空间占用量
3.2MySQL数据类型
它
141
值
8
---
## Page 162
需要加上零或是使用CAST（）函数：
是按二进制位计算列的“宽度”。M的取值必须是一个1~64的整数。如果省略，M的默认值将为1。
3.2.4.3
值
果
数
位数D（即精度和小数位数)。其中，M的取值范围是1~255；D的取值范围是0~30，且不超过M。
REAL_AS_DEFAULT模式，则它会成为FLOAT的同义词。
3.2.4.2
是
将随着D的变大而减小（见表3-8)。
取值范围将随着M的变大而增加（见表3-7）。
直，来确定是 FLOAT 类型，还是 DOUBLE 类型。
果落在25～53的区间内，则此列将被视为双精度列。也就是说，此列会根据是否带有用M和D
142
在默认情况下，从 BIT列检索出来的值不能打印显示。要显示一个位域值的可打印形式，
为是单精度值，还是双精度值。如果p值落在0-24的区间内，则此列会被视为单精度列；如
，这尺
的最大精度来存储。
DOUBLE的同义词。在默认情况下，RAEL类型是DOUBLE 的同义词；如果启用了 SQL的
BIT数据类型可用于存放位域值。BIT列的定义里可以包含一个可选的最大宽度M，它表示的
使用 FLOAT(p)语法也是可以的。不过，
这里的 M和D都是可选的。如果在定义列时省略了它们，那么这些值会按你的硬件所支持
mysql> INSERT
mySql> CREATE TABLE t (b BIT(3));
与
浮点类型也可以定义为UNSIGNED。这样，该类型的负数部分将被“砍掉”。
MySQL提供了两种浮点类型一
DECIMAL类型的最大取值范围取决于M和D的值。
DECIMAL（n)=DECIMAL(n,0)
DECIMAL = DECIMAL(10）= DECIMAL(10,0)
b+0
点与MySQL的处理方式有所差异。p的取值范围是0~53，并且只能用于确定此列存储
DECIMAL类型相似，在浮点类型列的定义里，可以包含一个最大有效位数M和一个小数
第3章数据类型
BIT数据类型
近似值数字数据类型
DECIMAL(6,1)
3
DECIMAL(5,1)
DECIMAL(4,1)
DECIMAL(4,2)
DECIMAL(4,1)
DECIMAL(4,0)
1CAST(b AS UNSIGNED)
类型定义
类型定义
表3-8
表3-7
0
D对DECIMAL(M，D)取值范围的影响
M对DECIMAL(M，D)取值范围的影响
3
一FLOAT和DOUBLE,用于存储近似值数。DOUBLEPRECISION
#列宽为3位，取值范围为0~7
，这里的 p 在标准 SQL 里表示的是所要求的精度位
。如果在M保持不变的情况下调整D，则取值范围
如果在D保持不变的情况下调整M，则
-99999.9~99999.9
-9999.9~9999.9
-999.9~999.9
-99.99~ 99.99
-999.9~999.9
-9999~9999
取值范围
取值范围
---
## Page 163
后那个值是完整显示的，因为它比列的显示宽度宽。
宽度的数值，会全部显示出来，而不会被截断。可以调用下面的语句来查看效果。请注意，
ZEROFILL。
使其宽度最终达到显示宽度。当你想要让列值按指定的显示宽度进行显示时，就可以使
下都是带符号的，所以即使为允许使用负数的列加上SIGNED 属性，也没有什么效果。
而下端会变成0（在效果上，即是将整个取值范围“砍掉”
具体表现在：浮点值的取值范围不会朝正数方向平移；相反，原取值范围的上端将保持不变，
用某列来保存序列编号，那么在加上UNSIGNED 属性之后，可用编号的长度会翻一倍。
的一半取值范围。在为该列加上UNSIGNED 属性之后，可用范围则立刻会增加一倍。例如，想
上UNSIGNED 属性。如果用一个带正负号的列类型来保存这类数据，则只能使用到该数据类型
itiny 和 itiny_u 都是范围跨度为 256的 TINYINT 列，只是允许的值集不一样。itiny 的取值范围
取值范围的宽度，而只是把这个范围向右平移。请看下面这个表声明：
是与各种整数类型一起使用。让一个整型列具有UNSIGNED 属性，并不会改变底层数据类型的
3.2.4.4
以使用BIN（）函数：
ZEROFILL属性适用于除BIT以外的所有数字类型。它会在列里的显示值前面填充若干0,
所有支持UNSIGNED 属性的数字类型，也都可以用 SIGNED 属性。因为这些类型在默认情况
你也可以为DECIMAL
如果数据不可能出现负数值（如人口统计数字或观众人数），则应考虑给相应的整型列加
UNSIGNED 属性可以防止出现负值。它适用于除 BIT 以外的所有数字类型，但大部分情况
mysql> SELECT
mysql>
mySql> DROP TABLE IF EXISTS mytbl;
CREATE TABLE mytbl
对于八进制和十六进制的显示，可以分别使用函数OCT（）和HEX（）。
mysql> SELECT BIN(b), BIN(b & b'101′), BIN(b I b'101) FROM t;
如果需要以二进制表示法来显示某些位域值或是它们以二进制形式计算后的结果，那么可
my_zerofill
sql>
111
BIN(b)
itiny
11
0
数字数据类型的属性
INSERT INTO mytb1VALUES（1),（100),(10000),（1000000）;
CREATE TABLE mytbl (my_zerofill INT(5) ZEROFILL);
，确切来讲，
U
00001
TINYINT,
1BIN(b&b'101')
101
101
，显示宽度其实是“一个给定的最小数字个数”，因为那些长度大于显示
或浮点列加上UNSIGNED属性，但最终效果与整型列的情况稍有不同
BIN(bIb101)
101
111
了一半）。
3.2MySQL 数据类型
143
最
用
---
## Page 164
它可用于很多类型的信息，只是在存储空间方面会有些额外的开销。BIGINT类型的取值范围最
年龄或兄弟姐妹人数），则选择TINYINT类型是最佳的。MEDIUMINT类型能够表示上百万的值，
这样的表时，无法像处理选择了更小类型的表那样有效率。如果数据的取值范围很小（如人的
小类型。选择较大的类型，会浪费存储空间；会导致表毫无必要地变得很大；也会导致在处理
3.2.4.5选择数字数据类型
个默认值。
分别为-1、1和NULL：
值（通常情况是这样。不过，如上所述，AUTO_INCREMENT 列默认使用的是NOT NULL)。
或 NOT NULL 属性。如果没有为数字类型列指定 NULL或 NOT NULL,那么它将默认允许使用 NULL
自动把它加上。
么必须使用独立子句。更多相关示例请参考3.4.2.1节。
子句的方式则是可选的。如果想要创建一个涉及多个列且包含AUTO_INCREMENT列的索引，那
CREATE TABLE语句的一个独立子句。如果这个索引只包含AUTO_INCREMENT 列，那么使用独立
可以用下列任意
索引。此外，因
必须被索引。
序列值可能会被再次使用，但是这种情况是否会发生，还要看具体的存储引擎。
一行，序列值也加1。如果在表里删除了某几行，那么这个序列可能也会受到影响。也就是说，
中。通常情况下，在没有做出另外设定的时候，AUTO_INCREMENT 列的值将从1开始，每新增
当把 NULL 插到AUTO_INCREMENT 列时，MySQL会自动生成下一个序列值，并把它存储到该列
的情况比较少见）。当想要生成一组唯一标识符或序列值时，可以指定 AUTO_INCREMENT 属性。
144
在为数字列选择数据类型时，需要考虑数据的取值范围，并选择一个能够覆盖该范围的最
你还可以利用DEFAULT属性来指定默认值。下面这个表包含了3个INT 列，它们的默认值
AUTO_INCREMENT 列可以显式地声明为 NOT NULL。即使你省略了NOT NULL，MySQL也会
每个表最多只能有一个AUTO_INCREMENT 列。该类型的列应该具备NOT NULL 约束，并且
如果列定义没有包含DEFAULT子句，那么MySQL将根据3.2.3节描述的规则，为它选择一
CREATE TABLE t
以上介绍的各种属性都是数字类型列所特有的。在这些属性后面，你可以继续指定 NULL
3.4节将进一步讨论AUTO_INCREMENT列的行为特点。
其中，前面两种形式将索引信息指定为列定义的一部分。紧接着的两种形式将索引指定为
CREATE TABLE
CREATE
CREATE TABLE
另外一个属性是AUTO_INCREMENT，它可用于整数或浮点数类型（不过，用于浮点数类型
如果给某个列指定了ZEROFILL 属性，那么它将自动转换成一个UNSIGNED 列。
il
EATE
第3章数据类型
INT
INT DEFAULT-1
TABLE
1000000
TABLE
。一般情况下，最好能把AUTO_INCREMENT 列声明为一个PRIMARYKEY 或UNIQUE
DEFAULT NULL
DEFAULT
因为序列值不可能是负数，所以通常还应该为该列加上UNSIGNED 属性。例如，
10000
意一条语句来声明
00100
ai
P
P.
P
1,
F.
INT
INT UNSIGNED NOT N
UNSIGNED
NULL
NULL
NULL
NULL
AUTO_INCREMENT,
AUTO_INCREMENT
AUTO_INCREMENTPRIMARYKEY);
UNIQUE）;
UNIQUE（i））;
PRIMARY KEY（i））;
---
## Page 165