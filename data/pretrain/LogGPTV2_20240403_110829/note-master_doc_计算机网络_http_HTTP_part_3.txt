### nginx配置证书
```
 server {
     ....  
     ssl on;
     ssl_certificate fullchain.pem;
     ssl_certificate_key privkey.pem;
 }
```
## HTTP/2.0
### HTTP/1.x缺陷
- 使用多个连接提升性能
- 没有压缩请求与响应
- 不支持资源优先级
### 二进制分帧
![20203894642](/assets/20203894642.png)
只会有一个TCP连接，一个连接会有任意数量的双向数据流
一个数据流会有一个一个唯一的标识符，一个数据流可以承载一来一回双向信息
消息是请求消息或者响应消息
帧是最小的通信单位，不同数据流的帧可以交错发送，然后根据唯一标识符来重新组装
![20203895038](/assets/20203895038.png)
### 服务端推送
HTTP/2.0 在客户端请求一个资源时，服务端会把相关的资源一起发送给客户端
![20203895124](/assets/20203895124.png)
### 首部压缩
HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输
![2020389543](/assets/2020389543.png)
不仅如此，HTTP/2.0 也使用 [哈夫曼编码](/算法与数据结构/字符串.md#哈夫曼编码)对首部字段进行压缩
## HTTP3
![HTTP/2 和 HTTP/3 协议栈](/assets/20221019164625.webp)
- QUIC 协议
解决的问题：
1. 连接迁移：当网络环境发生变化，如果还使用原来的 TCP 连接，则会导致连接失败，QUIC 的连接不受四元组的影响，使用一个 64 位的随机数作为 Connection ID来表示连接
2. 零 RTT 建立连接
3. 队头阻塞：UDP接收没有顺序，中间丢包也不会影响其他资源的处理
4. 拥塞控制：相比TCP的拥塞控制，QUIC可以在客户端动态调整算法
![零 RTT 建立连接](/assets/20221019165349.jpg)
## GET与POST
GET 用于获取资源，而 POST 用于传输实体主体。
### 参数
GET是通过URL携带参数的，而 POST 的参数存储在实体主体中
### 安全
GET语义来说是安全的，因为GET操作只是获取资源
而POST的语义是不安全的，因为POST是上传数据
### 幂等性
幂等方法不应该具有副作用，所有的安全方法也都是幂等的
在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的
### 可缓存
一般来说GET和HEAD是可缓存的，PUT和DELETE不可缓存，POST在大多数情况下不可缓存
## 跨域问题
同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，所以通常情况下一个源无法通过ajax与另外一个源进行交互
![批注 2020-02-29 141744](/assets/批注%202020-02-29%20141744.png)
### 解决方案
- JSONP（缺陷很多）
服务端将返回数据封装成js函数调用并返回，客户端js通过动态加载script标签加载服务器的js数据，加载完成后执行封装的js函数获取数据
所以jsonp这种请求方式与ajax有着本质的不同
- 被调服务端设置响应头允许跨域
```java
response.setHeader("Access-Control-Allow-Origin","*");
```
- 后端请求转发
前端所在的服务端调用被调服务端，将结果返回给前端
- nginx反向代理
```
server {
    listen 80;
    server_name api.domain;
    location /api1 {
        proxy_pass http://outter_server;
    }
}
```
- 使用应用网关
使可以通过一个统一入口访问各个项目
## 传输链路优化
前端会通过一些诸如精灵图、文件合并、请求合并的方式方法来降低HTTP请求数 又或者是HTTP1.1引入的Keep-Alive机制 使用一条连接来处理请求 但这就会导致请求被阻塞的问题
HTTP2的出现很好地解决了这个问题 它将数据拆分为小端 并且使用id标识 在客户端进行组装，这样多个请求阻塞整条连接的情况出现的概率就比较小了
另外一种优化方式是通过压缩 但一旦压缩 并且只使用一个连接 那如何判断内容以及传输完毕？使用分块编码 最后以一个长度值为0的分块来表示资源结束
### 快速UDP网络连接
QUIC的可靠传输能力并不是由底层协议提供的，而是完全由自己来实现
QUIC的另一个设计目标是面向移动设备的专门支持，使用了一个标识符来处理由于移动网络断开重新连接的客户端识别问题
## DASH
基于HTTP的动态自适应流（英语：Dynamic Adaptive Streaming over HTTP，缩写DASH，也称MPEG-DASH）
将内容分解成一系列小型的基于HTTP的文件片段，每个片段包含很短长度的可播放内容，而内容总长度可能长达数小时。内容将被制成多种比特率的备选片段，以提供多种比特率的版本供选用。当内容被DASH客户端回放时，客户端将根据当前网络条件自动选择下载和播放哪一个备选方案
## CDN
>CDN加速意思就是在用户和我们的服务器之间加一个缓存机制,动态获取IP地址根据地理位置，让用户到最近的服务器访问
![屏幕截图 2020-09-27 113806](/assets/屏幕截图%202020-09-27%20113806.png)
### 原理
1) 用户向浏览器提供要访问的域名；
2) **路由解析**：浏览器调用域名解析库对域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录（CDN地址），为了得到实际IP地址，浏览器需要再次对获得的CNAME进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析，如根据地理位置信息解析对应的IP地址，使得用户能就近访问；
3) 此次解析得到CDN缓存服务器的IP地址，浏览器在得到实际的IP地址以后，向缓存服务器发出访问请求
4) 缓存服务器根据浏览器提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求
5) 缓存服务器从实际IP地址得得到内容以后，一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程
6) 客户端得到由缓存服务器返回的数据以后显示出来并完成整个浏览的数据请求过程
### 路由解析
```mermaid
sequenceDiagram 
  浏览器 ->> 本地DNS: 查询网站CNAME
  loop 递归查询 
    本地DNS ->> 域名的权威DNS: 查询网站CNAME 
  end 
  域名的权威DNS -->> 本地DNS: 查询到CNAME: cname.xx
  本地DNS -->> CNAME的权威DNS: 查询CNAME：cname.xx
  loop 递归查询 
    CNAME的权威DNS ->> CNAME的权威DNS: 经过递归查询和负载均衡，确定合适的CDN 
  end 
  CNAME的权威DNS -->> 本地DNS: 地址:xx.xx.xx.xx 
  本地DNS -->> 浏览器: 地址:xx.xx.xx.xx 
  浏览器 ->> CDN服务器: 请求 
  CDN服务器 ->> 源站服务器: 请求 
  源站服务器 -->> CDN服务器: 响应 
  CDN服务器 -->> 浏览器: 缓存并响应
```
### 内容分发
缓存节点中必须有用户想要请求的资源副本，那么这些节点资源时如何获取以及存储的？
- 主动分发：也被称为预热，分发由源站主动发起，将内容从源站或者其他资源库推送到用户边缘的各个CDN缓存节点上 这种分发不仅可以从源站分发到CDN节点 甚至能提前分发到用户浏览器 降低高峰时期压力
- 被动回源：CDN缓存节点发现自己没有该资源，就会实时从源站中获取
对于资源的管理，一般分为主动失效与被动失效：
- 被动失效：一段时间后资源过期，需要重新回源
- 主动失效：某些事件强行使资源失效
### CDN 动态加速
![路径优化模式：通过动态的链路探测来寻找回源最好的一条路径](/assets/屏幕截图%202020-09-27%20114519.png)
边缘计算的模式：数据的逻辑计算和存储的放在边缘的节点。定时从源数据同步数据，然后在边缘进行计算得到结果
### CDN应用
- 加速
- 协议升级 源站http 对外https...
- 访问控制 基础DDos防御
- 修改资源 功能注入
### CDN容灾
- CDN一挂 业务就会受到极大影响甚至停摆
![美团CDN容灾方案](/assets/2022114155034.png)
![美团CDN容灾流程](/assets/20221141699.png)
#### 目标
- 终端CDN域名自动切换
- CDN域名之间隔离
- CDN监控
- 不同的CDN持续热备
#### 端侧实现
Web端实现：
传统的标签资源如css img等通过监听失败回调实现
而js脚本则需要统一使用动态加载的方式
Native端实现：
- 适配多种http框架
- 使用统一拦截
域名动态计算：
域名A -> 请求失败 -> 域名B -> 请求失败 -> 域名C
## PCDN
> 在CDN产品的基础上融合新一代P2P技术，充分利用边缘网络海量碎片化的计算、存储、网络等闲置资源
对于诸如热门视频之类的文件，开头部分从CDN上获取，后续的数据跟其他用户进行P2P互相传输
## RESTful
一套关于设计请求的规范，本质上谈不上规范，更多的是一种风格
- 资源：代表一个抽象实体
- 表征（表现层）：资源的表现形式
- 状态：在特定上下文下产生的信息
- 转移：状态发生了变化
- 超文本驱动：通过服务端返回的超文本来决定客户端行为
>URI代表一种资源、客户端与服务器，传递资源的某种表现层、客户端通过HTTP动词，对服务器资源进行操作
GET：      获取数据
POST：    添加数据
PUT：      更新数据
DELETE： 删除数据
### 常见错误
- URI包含动词
- URI包含版本
### 范例
请求方式    | URL                              | 含义
------- | -------------------------------- | -------------
GET：    |    | 获取用户列表数据
POST：   |    | 创建(添加)用户数据
GET：    |  | 获取用户ID为1的用户信息
PUT：    |  | 修改用户ID为1的用户信息
DELETE： |  | 删除用户ID为1的用户信息
### RESTful的系统
1. 服务端与客户端分离
2. 无状态
3. 可缓存
4. 分层系统
5. 统一接口
6. 按需代码
#### REST风格的好处
1. 降低服务接口的学习成本
2. 资源之间有天然的集合或者层次结构
#### RMM成熟度
0. The Swamp of Plain Old XML：完全不REST。另外，关于Plain Old XML这说法，SOA表示感觉有被冒犯到。
1. Resources：开始引入资源的概念。
2. HTTP Verbs：引入统一接口，映射到HTTP协议的方法上。
3. Hypermedia Controls：超媒体控制在本文里面的说法是“超文本驱动”
#### 不足
- 面向资源（也就是REST）更适合做CRUD，面向过程面向对象才能表达更加复杂的逻辑
- REST绑定HTTP 既是优点，同时也是缺点，不适合用于高性能的场景
- REST本身没有传输可靠性支持 需要自己做好幂等性处理
- REST缺乏对资源进行“部分”和“批量”的处理能力