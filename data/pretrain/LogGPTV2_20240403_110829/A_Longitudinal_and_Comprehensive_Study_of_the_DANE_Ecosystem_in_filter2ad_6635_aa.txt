title:A Longitudinal and Comprehensive Study of the DANE Ecosystem in
Email
author:Hyeonmin Lee and
Aniketh Gireesh and
Roland van Rijswijk-Deij and
Taekyoung Kwon and
Taejoong Chung
A Longitudinal and Comprehensive Study of the 
DANE Ecosystem in Email
Hyeonmin Lee, Seoul National University; Aniketh Gireesh, Amrita Vishwa Vidyapeetham; 
Roland van Rijswijk-Deij, University of Twente & NLnet Labs; Taekyoung “Ted” Kwon, 
Seoul National University; Taejoong Chung, Rochester Institute of Technology
https://www.usenix.org/conference/usenixsecurity20/presentation/lee-hyeonmin
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.A Longitudinal and Comprehensive Study of the DANE Ecosystem in Email
Hyeonmin Lee∗
Seoul National University
Aniketh Girish∗
Amrita Vishwa Vidyapeetham
Roland van Rijswijk-Deij
University of Twente & NLnet Labs
Taekyoung “Ted” Kwon
Seoul National University
Taejoong Chung
Rochester Institute of Technology
Abstract
1
Introduction
The DNS-based Authentication of Named Entities (DANE)
standard allows clients and servers to establish a TLS connec-
tion without relying on trusted third parties like CAs by pub-
lishing TLSA records. DANE uses the Domain Name System
Security Extensions (DNSSEC) PKI to achieve integrity and
authenticity. However, DANE can only work correctly if each
principal in its PKI properly performs its duty: through their
DNSSEC-aware DNS servers, DANE servers (e.g., SMTP
servers) must publish their TLSA records, which are consistent
with their certiﬁcates. Similarly, DANE clients (e.g., SMTP
clients) must verify the DANE servers’ TLSA records, which
are also used to validate the fetched certiﬁcates.
DANE is rapidly gaining popularity in the email ecosystem,
to help improve transport security between mail servers. Yet
its security beneﬁts hinge on deploying DANE correctly. In
this paper we perform a large-scale, longitudinal, and compre-
hensive measurement study on how well the DANE standard
and its relevant protocols are deployed and managed. We col-
lect data for all second-level domains under the .com, .net,
.org, .nl, and .se TLDs over a period of 24 months to ana-
lyze server-side deployment and management. To analyse the
client-side deployment and management, we investigate 29
popular email service providers, and four popular MTA and
ten DNS software programs.
Our study reveals pervasive mismanagement in the DANE
ecosystem. For instance, we found that 36% of TLSA records
cannot be validated due to missing or incorrect DNSSEC
records, and 14.17% of them are inconsistent with their
certiﬁcates. We also found that only four email service
providers support DANE for both outgoing and incoming
emails, but two of them have drawbacks of not checking the
Certificate Usage in TLSA records. On the bright side,
the administrators of email servers can leverage open source
MTA and DNS programs to support DANE correctly.
∗This work was done while the authors did an internship at Rochester
Institute of Technology.
Transport Layer Security (TLS) is responsible for securing In-
ternet trafﬁc in a variety of protocols such as DNS and HTTP.
Coupled with a Public Key Infrastructure (PKI), TLS relies
on certiﬁcates to bind entities to their public keys. Certiﬁcates
are typically issued by Certiﬁcate Authorities (CAs), in a hi-
erarchical fashion. At the top level of the hierarchy, there are
root CAs, who have self-signed certiﬁcates since they cannot
rely on other trusted third parties.
However, the current PKI model, discussed above, has been
criticized for its potential vulnerability, since any CA can is-
sue certiﬁcates for any domain name. Historically, we have
observed that compromised CAs issued valid-looking but
fraudulent certiﬁcates inappropriately [15, 58, 75]. Since then,
a number of new protocols and extensions [40, 41, 48, 62, 68]
have been proposed to mitigate these problems. However,
none of these fundamentally solves the problem: the valida-
tion process of a certiﬁcate still relies on CAs.
To address this issue, the DNS-based Authentication of
Named Entities (DANE) protocol [38] was proposed to sup-
port TLS without relying on trusted third-parties like CAs. At
its core, a domain name owner that runs a TLS server such as
HTTPS, or secure email via SMTP+STARTTLS, can publish
its certiﬁcate information as a DNS record called the TLSA
record, which can be used by TLS clients to verify the authen-
ticity of the certiﬁcate in a non-PKI fashion. Furthermore, the
integrity and authenticity of the TLSA records are guaranteed
by the DNS Security Extensions (DNSSEC) [16–18]. Thus, a
TLS server can easily publish and serve its certiﬁcate without
relying on CAs, and TLS clients can also verify the certiﬁ-
cate by (1) fetching TLSA records, (2) validating them using
DNSSEC signatures, and (3) checking if the TLSA records are
consistent with the certiﬁcate from the TLS server.
Due to its simple but robust security guarantees, there have
been a number of attempts to deploy DANE for the Web
PKI (HTTPS). However, DANE has never been adopted due
to two operational challenges. First, a client (i.e., browser)
may be behind a middlebox, which is notorious for discarding
USENIX Association
29th USENIX Security Symposium    613
TLSA or DNSSEC records. Second, the browser needs to make
additional DNS queries to retrieve the TLSA and DNSSEC
records, which incurs additional latency. Thus, modern web
browsers do not usually support DANE [47].
Fortunately, many email service providers have begun to
deploy DANE for their SMTP services as users are tolerant
to millisecond-order additional delays in sending and receiv-
ing emails—moreover, DANE can solve security challenges
in SMTP not solved so far, such as STARTTLS downgrade
attacks [27] and receiver authentication [37].
In response to emerging threats in email security [30], the
Dutch and German national governments require DANE sup-
port from vendors in public tenders [13, 19] and certain TLD
registries (e.g., the .se and .nl registries) have employed
ﬁnancial incentives for registrars providing email hosting ser-
vices to deploy DANE [59]. Finally, popular mail service
providers have also begun to deploy DANE; Web.de (one of
the largest free webmail providers in Germany) supports out-
bound DANE since 2016 [29], and Comcast (one of the largest
ISPs in the US) did the same thing [26] in August 2017.
Like other PKIs, however, DANE can only function
correctly when all principals fulﬁll their responsibilities:
TLS servers presenting certiﬁcates, DNS servers publishing
TLSA records, DNS clients validating DNS responses using
DNSSEC, and TLS clients verifying certiﬁcates using TLSA
records. Unfortunately, the complexity of DANE leads to
many opportunities for mismanagement. For instance, on the
server side, TLSA records may have DNSSEC errors such as
expired signatures, or the certiﬁcates may be inconsistent with
published TLSA records. On the client side, DNS resolvers
may not validate TLSA records properly, or buggy TLS appli-
cations do not bother to check the validity of certiﬁcates.
Surprisingly little is known about the practice of the current
DANE PKI ecosystem for email services. While there have
been some studies of DANE [83], no prior work has studied
the DANE PKI in SMTP longitudinally or comprehensively.
In this paper, we present a comprehensive study of the
entire DANE ecosystem for SMTP. To study server-side be-
havior, our work leverages daily snapshots for 24 months and
hourly snapshots for 4 months of MX records and TLSA records
for all second level domain names that end with .com, .net,
.org, .nl, or .se. For the MX records present, we retrieve
the certiﬁcates of the corresponding email servers. To study
client-side behavior, we investigate how DANE is supported
by analyzing (1) the 29 most popular email service providers,
(2) their DNS resolvers, (3) software implementations of pop-
ular or DANE-supporting mail transfer agents (MTAs), and
(4) software implementations of popular DNS programs.
Our analysis reveals many instances of troubling and per-
sistent mismanagement in the DANE PKI in SMTP:
• First, we ﬁnd nearly 36% of TLSA records cannot be vali-
dated due to missing or incorrect DNSSEC records, e.g.,
some 19% are signed but lack a secure delegation (i.e., DS
records).
• Second, even though most of the mail servers that pro-
vide TLSA records (99.5%) present their certiﬁcates through
STARTTLS, we ﬁnd that over 14% of them do not match
the presented certiﬁcates.
• Third, when focusing on 29 popular email providers, we
ﬁnd that only four of them support DANE for their outgoing
and incoming emails and one provider only supports DANE
for incoming emails.
• Finally, we tested four popular MTA and ten popular DNS
implementations to see if email providers can easily support
DANE; we ﬁnd that two popular MTAs correctly support
DANE for both incoming and outgoing emails in conjunc-
tion with four DNS implementations that support TLSA
records and DNSSEC.
Overall, our results show that DANE deployment is rare,
but steadily increasing (especially in some country-code
TLDs). Unfortunately, we also ﬁnd widespread mismanage-
ment of certiﬁcates and TLSA records. On the bright side,
however, only a few players can easily make changes in order
to bring the beneﬁts and a greater adoption of DANE to end
users, which are mainly large email providers and MTA and
DNS Software providers.
To allow other researchers and administrators to reproduce
and extend our work, we publicly release all of our analysis
code and data to the research community at
https://dane-study.github.io
2 Background
In this section, we provide an overview of DNS, DNSSEC,
DANE, and explain how they work together to secure email
transport (i.e., SMTP).
DNS and DNSSEC DNS maintains the mapping between
domain names and their associated values such as their IPv4
addresses (A records) and their mail servers’ domain names
(MX records). Unfortunately, the original DNS protocol [55]
has serious security problems (e.g., no authentication of DNS
records), making DNS vulnerable to numerous attacks such
as DNS hijacking and cache poisoning [21, 42, 70]. To pre-
vent such attacks, the DNS Security Extensions (commonly
referred to as DNSSEC) were introduced to provide integrity
and authenticity of DNS records using three new record types:
• DNSKEY records, which contain public keys used in
DNSSEC.
• RRSIG records, which contain the cryptographic signatures
(of DNS records) generated by the private keys; their cor-
responding public keys are in DNSKEY records.
• DS records, which are hashes of DNSKEYs. These records
must be uploaded to the parent DNS zone to construct a
chain of trust, which reaches up to the root DNS zone.
614    29th USENIX Security Symposium
USENIX Association
TLSA Records DANE introduces an additional DNS record
type, called the TLSA record [38], which provides informa-
tion that can verify the certiﬁcate of a corresponding domain
name. There can be multiple applications that require TLS
for a single domain name. Thus, a TLSA record is stored for a
particular location, which is a combination of a port number,
a protocol (i.e., TCP or UDP), and a base domain name. For a
given base domain name, this allows speciﬁcation of different
certiﬁcates for different combinations (i.e., different applica-
tions). For example, to request a TLSA record for an SMTP
server that has as its MX record mail.example.com and sup-
ports STARTTLS on port 25, the derived domain name must
be _25._tcp.mail.example.com to fetch its TLSA record.
A TLSA record consists of four ﬁelds (details in [38]):
• Certificate Usage, which speciﬁes how the presented
certiﬁcates from the TLS server can be validated with the
Certificate Association Data (see below). There are
four Certificate Usages: ﬁrst, it can specify that the
certiﬁcate for Certificate Association Data should
be used as either (a) a trust anchor (i.e., a root certiﬁcate),
thus permitting any leaf certiﬁcates as long as they are
signed by the trust anchor (DANE-TA), or (b) a leaf certiﬁ-
cate (DANE-EE), both of which do not require any IETF
PKIX validation. In other words, if the presented certiﬁcate
of which Certificate Usage in the fetched TLSA record
is either DANE-TA or DANE-EE, the TLS client does not need
to check if the certiﬁcate is signed by trusted CAs or is al-
ready in the root certiﬁcate stores. Similarly, the PKIX-TA
usage can specify that (c) Certificate Association
Data has to be used as a trust anchor, or (d) PKIX-EE for
a leaf certiﬁcate. Note that the presented certiﬁcate must
pass PKIX certiﬁcation path validation using a set of root
certiﬁcate stores, which are mutually agreed between the
client and the server.
• Selector, which speciﬁes the type of Certificate
Association Data, indicating whether the Certificate
Association Data is derived from a certiﬁcate or its sub-
ject public key.
• Matching Type, which speciﬁes what Certificate
Association Data presents, which can be the original
data, its SHA-256 hash, or its SHA-512 hash.
• Certificate Association Data, which contains the
full data or a digest of a certiﬁcate or its public key.
At ﬁrst glance, it may seem that PKIX-TA or PKIX-EE
would be more secure as they require additional PKIX vali-
dation; in fact, they only provide illusory incremental secu-
rity over DANE-TA or DANE-EE. If attackers can compromise
the integrity of DNSSEC, PKIX-TA or PKIX-EE can be eas-
ily replaced by forged TLSA records containing DANE-TA or
DANE-EE, so that any added PKIX veriﬁcation can be by-
passed. Moreover, they are even more brittle in SMTP with
STARTTLS since the TLS client and TLS server need to have
a list of mutually trusted CA and TLS servers, which still
relies on trusted third parties (i.e., CAs) to manage their cer-
tiﬁcates. Thus, the DANE operational practice recommends
to avoid using PKIX-EE and PKIX-TA [28].
DANE and DNSSEC A TLS client may be vulnerable
to man-in-the-middle (MITM) attacks if it cannot verify the
server’s certiﬁcate that binds a public key to the server’s
identity such as the domain name of the mail or web server.
In an email protocol, however, the name of the email server
is not usually encoded in the recipient address; instead, the
client obtains the server name through an MX record lookup1.
To leverage DANE, the client has to obtain TLSA records to
verify the presented certiﬁcate from a TLS server. However,
if there is no security guarantee that the fetched DNS records
(including TLSA) are not authentic, the client can be vulnera-
ble to active attacks such as MITM and DNS cache poisoning.
Thus, a client who wishes to rely on DANE must use DNS
resolvers that support DNSSEC, or it needs to look up and
authenticate the DNS records using DNSSEC by itself.
DANE and SMTP
Email service providers use SMTP
(as TLS clients) to send emails to destination mail servers
(i.e., TLS servers). However, SMTP has no built-in security
mechanisms such as authenticating recipients or encrypting
messages in transit. To overcome this limitation, an SMTP ex-
tension called STARTTLS was introduced in 2002 to encrypt
the messages within a TLS session [37]. However, unlike
other TLS protocols, such as HTTPS that signals TLS sup-
port explicitly through the URI scheme (e.g., https://), an
email address itself cannot indicate any transport security pol-
icy. Thus, STARTTLS supports opportunistic TLS; a client
can send a plain-text command, “STARTTLS”, to express its
TLS support at the initial stage of the SMTP connection. Un-
fortunately, STARTTLS is well-known to be vulnerable to
downgrade attacks, in which a man-in-the-middle may strip
out the STARTTLS command. Even worse, the STARTTLS
RFC [37] does not specify what to do when the certiﬁcate pre-
sented by the TLS server is not valid, thus making many TLS
clients ignore mismatches between MX records and the domain
names in the certiﬁcates or continue email transmissions even
with invalid certiﬁcates (e.g., self-signed certiﬁcates) [30].
With DANE, however, the destination mail server can ex-
plicitly tell the clients through TLSA records that (1) it sup-
ports TLS for secure email transmissions, (2) the presented
certiﬁcate will be exactly matched with the TLSA records, and
(3) the TLSA records are not forged by providing their RRSIGs,
DNSKEYs, and DS records.
Figure 1 brieﬂy illustrates how an SMTP client can use
DNSSEC to verify the integrity and authenticity of the fetched
TLSA records and validate the certiﬁcates.
1For example, a domain name (of the email server) mapped to a recipient
address of PI:EMAIL is gmail-smtp-in.l.google.com, which is
speciﬁed in the MX record.
USENIX Association
29th USENIX Security Symposium    615
DANE production systems. Since then, there have been mul-
tiple incentives introduced by national governments [13, 19]
and TLD registries [59] to spur greater adoption of DANE,
which completely changed the landscape of DANE; for exam-
ple, the German and Dutch national government guidelines
for secure emails state that DANE is mandatory for govern-
ment bodies and on the comply-or-explain list for public ten-
ders [13, 19] and we conﬁrm a 1,400-fold and 3,100-fold
increase of DANE usages in .com and .net domains com-
pared to earlier work [83], which we detail in the following
section. Third, we examine DANE deployment more compre-
hensively including TLSA validation against their correspond-
ing certiﬁcates and (mis)conﬁgurations of the related entities
(e.g., SMTP servers and clients) to study the complete DANE
ecosystem in email.
Email Security
SMTP has long been fraught with secu-
rity issues such as sender spooﬁng [36, 66]. To address these
problems, there have been many SMTP extensions such as
DomainKeys Identiﬁed Mail (DKIM) [20], the Sender Pol-
icy Framework (SPF) [45] and Domain-based Message Au-
thentication, Reporting, and Conformance (DMARC) [44].
Their purposes are mainly to authenticate a sender and ver-
ify the integrity of received emails, but not to encrypt email
transport. Studies have focused on how many email servers
support those extensions [30] or how popular email service
providers actually behave [36]. To encrypt emails, START-
TLS [37] was introduced in 2002 and several studies focused
on the deployment of STARTTLS [30,35,57,74]. For example,
Foster et al. [35] showed that 89% of popular email service
providers deployed STARTTLS. Similarly, Rijs et al. [69]
also showed that 60.3% of 116 scanned domains mainly from
the Netherlands support STARTTLS. However, STARTTLS
was originally designed to protect messages from passive
eavesdroppers, thus one of the remaining challenges was the
lack of an authentication mechanism of receiver mail servers.
Durumeric et al. [30] showed that 52% of SMTP servers in
Alexa 1M domains presented trusted certiﬁcates, and 34.2%
of their Common Name values are consistent with the ones in
their MX records.
Recently, MTA-STS was proposed to authenticate email
servers and resist SMTP downgrade attacks [53]. Even though
MTA-STS is simple to deploy with a TXT record, it does not
provide any security guarantee for certiﬁcates and the integrity
of the record (e.g., MITM attack can take place by simply
dropping the TXT record). Also, MTA-STS relies on trust-on-
ﬁrst-use (ToFU) and policy caching. Thus, the initial SMTP
connection is trusted without authentication of the receiving
mail server [53].
4 DANE Deployment
We study the DANE PKI in email applications with a focus on
its deployment by analyzing how email servers conﬁgure their
Figure 1: Overview of how DANE works along with DNSSEC
and STARTTLS. The integrity and authenticity of TLSA records are
supported through DNSSEC chain validation; Each RRSIG is the
signature of a record set (e.g., TLSA records) veriﬁed with a DNSKEY
(blue lines) and each DS record is uploaded by a child zone (red
lines). After DNSSEC chain veriﬁcation, the SMTP client veriﬁes
the obtained certiﬁcate by matching with it to a TLSA record.
3 Related Work
In this section, we discuss related work concerning studies of
the DANE ecosystem and security protocols for email.
DANE Deployment
Liang et al. [83] studied the early
stages of DANE deployment in 2014. They speciﬁcally fo-
cused on the very early stage of DANE usage for the HTTPS,
SMTP, and XMPP protocols. Liang et al. found fewer than
1,000 TLSA records in 485K signed zones, of which 13% were
invalid, which indicated that DANE usage was very rare.
There have been many attempts to deploy DANE to Web
PKI in browsers [47, 72]; however, due to some problems
like middleboxes blocking TLSA records lookup, these were
abandoned. Recently, a new TLS extension [56] proposes
to allow a web server to deliver its DANE records and its
DNSSEC authentication chain during TLS handshakes. This