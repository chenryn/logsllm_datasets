process image. When loading the new image the mod-
iﬁed execve system call handler 1 loads the rules into
the kernel and starts enforcement. If no rules for the
new image are found, then the process will try to in-
herit and share the rules of the old image; if these rules
are not inheritableor do not exist, then the process will
be crippled; i.e., it is only allowed to make harmless
system calls.
Rules are read–only after being loaded. Each moni-
tored process is allocated a kernel memory buffer2 to
1The API for execve is not changed.
2At present, the size of the buffer is one page or
bytes.
hold its private BlueBox state which can change as
the process executes. More discussion on BlueBox
process state is given in Section 4.3. When a process
forks, the child process shares the parent’s policy but
will be given a copy of the parent’s BlueBox state. A
process’s BlueBox state will be reset when it execves
a program.
4.2 Rules for Different Types of Resources
In this section we will discuss rules for three types of re-
sources, namely ﬁle system objects, uid/gid lists and sig-
nals; each has particular syntax and semantics. We be-
lieve the syntax and semantics discussed here can represent
most, if not all, of BlueBox rules.
4.2.1 Rules for File System Objects
Rules on ﬁle system objects are encoded as a tree which
mimics the hierarchyof ﬁles on a UNIX system. The policy
of a programincludes one such tree encodingthe program’s
access rights to ﬁle system objects. Figure 2 shows a part of
the speciﬁcation of rules on ﬁle system objects for Apache
2.0 HTTP Server.
Each node in the tree records access rights to a (set of)
ﬁle system object(s). The root of a tree corresponds to the
root of the hierarchyof ﬁles. Like a UNIX ﬁle system, each
node has a name. Unlike a UNIX ﬁle system, the name
can contain UNIX shell–like wildcard characters ’*’ and
’?’ with the same interpretation as in a UNIX shell. The
only exception is that a leaf node with the name “ ” repre-
On-Line
Off-Line
Process
Rule Enforcer
Binary Rule
in Kernel
System Call
Handler
loaded into the
kernel when execve
Human-readable
Rules
Rule
Parser
User
kernel
Binary Rule
File
Figure 1. BlueBox Architecture
lists of
Besides
sents an entire subtree; for example, “
” matches any
ﬁle in the subtree under “
”. Limited support for char-
acter classes (e.g.,
) is also provided3. A node’s name
can also contain environment variables and these are eval-
uated when the policy is being loaded into the kernel. For
”
example, if a rule is “
and the value of
is “joe”, then the process will have
read access to all HTML ﬁles under
.
When a process makes a system call to access a ﬁle system
object, the object’s absolute pathname is matched against
the tree. If a path in the tree matches the object’s pathname,
then the access rights in the last node of the path determines
if this invocation of the system call is allowed.
usual read, write, execute,
the
create, append, access rights to a ﬁle system objects
also include :
delete, hard link to, soft
link to, shared lock, exclusive lock,
truncate. There are also rights related to directories
used as ﬁle system mount points : (a) mount point :
a directory can be a mount point, (b) unmount: a ﬁle
system mounted on a directory can be unmounted; and
rights related to swapping devices (c) swapon : a device
can be a swapping device, (d) swapoff: a device can be
released from being a swapping device.
A node in the tree may also be associated with a list of
uid’s and a list of gid’s (see Section 4.2.2). These lists are
the allowed new user and group ownerships for ﬁle system
objects matching the node.
3Character ranges (e.g.,
in a character class.
-
) and the character ’
’ are not allowed
gids)
.
on identities
singular
(uids or
are
integers and ranges4
4.2.2 Rules for Identities
encoded
Rules
as
such as
The basic opera-
tion on such a list is to check if a speciﬁc integral value is
in it.
Each program’spolicyhas an uid list and a gid list. These
lists are the new identities a process running the program is
allowed to assume. A process has three types of identities
: real, effective and saved [MBKQ96]. Since a process can
freelyexchangethe values of differenttypes of ids or assign
one to the other, the BlueBox enforcer does not make a
distinction among the three types of id’s when checking
the rules. In other words, when a system call requests new
uid’s or gid’s, the enforcer only allows one of the following
two cases :
1. the uid’s/gid’s are in the set of uid’s/gid’s which the
process already has, or
2. the uid’s/gid’s are in the process’s uid/gid list and if
the following condition is met: if the process’s
has gone through the transition “
” and asks to
change its
equals
. This condi-
tion is meant to prevent an attacker from hopping over
different uid’s.
to , then
An integer list can also represent rules on system re-
sources with integral values such as scheduling priorities,
etc..
4It may contain non–negative and negative integers; e.g., uid’s could
be negative or non–negative.
pathname
access permisions
creation mode
r
r
r
r
r
r
r
/* r:read, w:write, x:execute, c:create, a:append */
/* share libraries */
/etc/ld.so.*
/lib/*
/* system conﬁguration ﬁles */
/etc/host.conf
/etc/hosts
/etc/passwd
/etc/group
/etc/resolv.conf
/* Apache ﬁles */
/usr/local/apache2/conf/*
/usr/local/apache2/htdocs/*.html
/usr/local/apache2/logs/error log
/usr/local/apache2/logs/access log
/usr/local/apache2/logs/referer log
/usr/local/apache2/logs/agent log
/usr/local/apache2/logs/httpd.pid
/usr/local/apache2/cgi-bin/*
r
r
rwca
wca
wca
wca
rwc
rx
666
666
666
666
644
Figure 2. Partial rules for Apache ﬁle access
4.2.3 Rules for Signals
Rules for signals are encoded as a bit–mask5, which is an
array of unsigned integers used as bit–vectors and repre-
sents a set of non–negative integers whose corresponding
bits are . Bits in a bit mask are numbered sequentially,
starting from the LSB of the ﬁrst integer, numbered zero,
to the MSB of the last integer. Unlike an integer list, set
operations can be easily performed on bit–masks.
For rules on handling received signals, BlueBox puts sig-
nals into four subsets : (1) those can be blocked (CBB), (2)
those can be ignored (CBI), (3) those can be default (CBD)
: their handlers can be the default handlers, (4) those can
be handled (CBH) : their handlers can be assigned by the
process. These subsets can intersect in any possible way.
Since a UNIX/LINUX system does not support other types
of treatment for received signals, if a signal is in only one
subset, then “can be” becomes “must be”. For example,
signals that are only in the CBB subset are signals that must
be blocked. Besides maintaining four bit–masks for the
four “can be” subsets, BlueBox also computes and main-
5Bit–masks are also used to encode the allowed system calls list.
tains the must be blocked subset for performance reasons.
An array of pointers to handlers for the CBH subset is also
maintained; Section 4.3 gives more details on this array.
4.3 Per–Process State
Incorporating process state into rules can protect process
against a much larger number of potential attacks. Several
daemons, especially setuid programs, start out with real
uid as root, setting only the effective uid as a user, while
retaining the possibility of acquiring root state to do privi-
leged operations. If such a daemon is subvertedthe attacker
can then re–acquire root privileges. One such example is
described in the attack on the wu–ftp daemon in Section.
5. Incorporation of state into the system call checks im-
pacts performance as process state needs to be updated and
checked. We have chosen to have a small amount of pro-
cess state so as to minimize the performance impact. Our
guiding principle is to add state only when absolutely nec-
essary. Parts of the states we maintain are:
Identity state: The main state component we maintain
is the current process identity state. The states we note
are the initial root state, user state and reroot state
when the process becomes root again. For each state,
there is a separate edition of the rules dictating which
system calls are allowed but all states share the same
set of ﬁle system access permissions. Daemons typi-
cally switch back to root state only for a short while to
do a few privileged operations and this can be effec-
tively controlled by just changing the allowed system
calls.
System call count: Another process state component
is the number of times certain system calls are made.
Currently, this is enabled for only the fork and waitpid
system calls. For each call we keep the current count
and maximum allowed. This component is useful in
two situations: First, we can use this to stop DOS
attacks which repeatedly consume system resources
via system calls: e.g. an attacker could repeatedly
fork child processes. The second situation where this
might be useful is in controlling scripts which execute
arbitrary shell commands. Since the shell script forks
processes to execute different commands this can con-
trol the number of commands the process can execute.
While this by itself does not offer more security, it
does so in combination with other rules.
Signal Handlers: Another DOS attack is to have sig-
nals handled incorrectly resulting in errant process be-
havior. This can be done by registering a “wrong” sig-
nal handler . Since there is no way for the IDS to iden-
tify the “correct” signal handler, it assumes that the
ﬁrst handler registered is the right handler and does
not permit any change to this.
Our philosophy to adding state to the rules is that if we
add state only when there is substantial beneﬁt to be gained
either in strengthening security guarantees or in making it
easier to specify rules for a particular process. We note that
our process state is substantially smaller than the system
proposed by Sekar et. al [SU99].
4.4 Kernel Impact
A very important design criteria for our system was to
minimize the impact on the kernel. The placement of func-
tionality has been carefully done to reduce impact on the
kernel. Our reference intrusion avoidance implementation
on Linux has an intercept at the system call entry point, and
minor hooks in the kernel code for process creation and ter-
mination(the fork, execveand exit system calls). The total
impact on the kernel sources is limited to about 10 lines of
assembly and 20 lines of C code. The rest of the enforce-
ment process and the code to parse, allocate memory for
and install rules are in a completely independent module.
The patches to kernel are very simple and do not change
the semantics of the remaining code nor do they interfere
with other parts of the system. A very valid concern is the
portability of BlueBox across different versions of the ker-
nel: we believe that the points in the Linux kernel which
we have intercepted are very stable and unlikely to change
in revisions of the kernel. On Linux, where it is easier to
allocate memory as pages, each process usually needs no
more than 2 pages (8K) to store all IDS related structures.
Of course, we use only a smaller subset of this depending
on rule size etc. Substantial portions of the rules are shared
by processes and any child thread/process that they spawn.
This can be reduced with elementary optimization.
5 Examples
In this section we illustrate how our framework can be
effectively used to thwart well-known attacks. They also
illustrate how rules for various process can be deﬁned.
5.1 Phf cgi–bin with Apache
The phf cgi–bin script was a sample script which came
with the earlier distributions of Apache as an example of
how cgi–bin scripts could be written. Figure 5.1 shows the
relevant parts of the code for phf script. The script ﬁrst
/* transform http request
* into options */
/* Remove shell characters
* from options */
escape shell command(
popen(‘‘/sbin/ph options’’,’r’);
‘‘/sbin/ph options’’);
Figure 3. The PHF cgi–bin script
syntactically transforms the incoming http request into a
list of options for a ﬁctional program ph and then spawns
(using popen) a shell to execute ph with the created op-
tions. The escape shell cmd subroutine escapes shell
characters which may be present in the options string. The
fatal bug was that it did not escape the newline ( n) char-
acter: The attack simply ensured that arbitrary command
was executed by passing the new command after a newline
character in the options.
This is a good example of how straightforward it is to
write effective rules. By design, the script invokes two
commands /bin/sh ( while using the popen library call )
and the program /sbin/ph. Thus a very natural set of rules
is to allow read and execute to these ﬁles. Besides shared
libraries, the process accesses no other objects. Marking
these rules as inherited ensures that the process which exe-
cutes /bin/sh can only execute these two programs and the
attack is thwarted. Note that the process can execute these
as many times as it wants.
5.2 Buffer overﬂow in wwwcount
The wwwcount program is a popular cgi program which
maintains a count of the number of hits on a website and
displays this in a graphical form. This is widely used al-
though in non sensitive web sites. The earlier versions of
the program suffer from a well known buffer overﬂow at-
tack which can be used to execute arbitrary program on
the web site. It is almost trivial to deﬁne the rules for this
script. From the deﬁnition, or from an inspection of the
system call audit trace for this process we can derive the
proper ﬁle accesses: These are all restricted to a single di-
rectory based on the initial conﬁguration of the program.
No executable is in the rules; in fact, the execve system
call is not in the allowed system call list.
5.3 wu–ftpd buffer overﬂow
This example illustrates how to use the state maintenance
part of our system to enforcesophisticated checks. wu–ftpd
is the ftp daemon developed at the Washington University
at St. Louis and is one of the more popular ftp daemons in
use today. There have been a number of attempts to model
the behavior of the daemon to detect intrusions [SU99].
At a very high level, the ftp daemon starts running as
root, waits for a user to login by authentication and sets its
effective uid to that of the user. For the rest of this session,
the daemon has as effective uid that of the authenticated
user. It is thus in an unprivilegedstate, exceptwhen it needs
to bind sockets to the well–known ftp data port. Since this
is a privileged port, this bind operation can only be done in
privileged state so the daemon becomes root again. The
only system calls made by the daemon in this state are
socket, bind and setuid to user. Figure 4 describes this
state diagram of the ftp daemon. From this functional de-
scription we can easily identify one portion of the rules for
the ftp daemon. In the initial state it starts as root and is
permitted to make most of the system calls, in the second
state it has a nonzero uid and is permitted among other the
setuid system call to become root again. In the third state
the daemon is only allowed to execute the socket, bind
and setuid to user system calls. Note that this is only a
subset of the entire rule set and illustrates how this thwarts
a well–known attack. This subset of the rules is shown in
Figure 5.
The earlier versions of this daemon were susceptible to
an attack where a regular user authenticated and overﬂew
the process heap[WUF]. Then, arbitrary code could be ex-
ecuted in the reroot state e.g. spawn a root shell on the
server. Using the subset of the BlueBox rules described
above, we can mitigate the damage due to this attack. The
only system calls the attacker can execute in the reroot
state are the socket, bind and setuid to user; the attacker
has no potential access to the ﬁle system objects i.e. all
other sensitive system calls are disallowed. Although there
is no way in the kernel, to distinguish the normal setting
uid to root by the ftp daemon from the user state and the
attacker setting uid to root after the buffer overﬂow, this is
the best protection one can expect.
The examplesthat we have describedin this section high-
light several important features of the semantics of the rules
in our system. They also illustrate the security guarantees
the system can provide. For instance, in the case of the
phf–attack, the system guarantees that the only executables
are /bin/sh and /sbin/ph. However the attack can make
the system endlessly execute these binaries resulting in a
denial–of–service. In the ftpd example, we are unable to
detect that the buffer overﬂowed, yet we are able to sub-
stantially mitigate the damage that the attacker can do. An-
other important feature is that the rules for a large number
of programs are very easy to write and can potentially be
done with a single examination of the audit trail. Even in
the more sophisticated example of the ftp daemon, we be-
lieve our approach is substantially simpler than the state
diagram based approach advocated by [SU99].
6 Performance
One of the main design guidelines for BlueBox is to min-
imize the performance impact. Crucial design decisions
about how much state to incorporate into the rules were
driven primarily by how much it impacts the performance
of the process being monitored. The prototypical applica-
tion we use to measure the performance is the Apache 2.0
web server daemon. The results for this daemon are rep-
resentative as it exercises most of the checks implemented
for the various system calls. In fact, many of the compute
intensive system call checks, such as open, read and fcntl,
are used substantially. Other processes will typically use
fewer such calls and hence the performance impact on the
Apache httpd daemon will be an upper bound.
6.1 Testbed
Our tests ran the WebStone benchmark of server perfor-
mance with the following parameters: There is a single
client machine generatingload and it has between three and