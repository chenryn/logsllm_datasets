### 符号执行与抽象解释

**符号执行**通过使用符号值作为程序的输入，将程序的执行过程转换为相应的符号表达式操作。这种方法系统地遍历程序的所有可能路径，以实现对程序行为的精确分析。因此，符号执行不依赖于具体的输入值，而是采用抽象化的符号形式来表示程序中的变量和表达式。其主要目的是生成算术表达式，用于检查条件分支等。

**抽象解释**则是基于在一定抽象级别上进行程序分析的思想。它不需要跟踪每个变量的确切值，而是用抽象语义来描述指令对变量的影响。例如，可以通过定义变量的符号来简化加法指令的结果判断：如果操作数的符号均为正，则结果也为正。此外，还可以通过其他抽象域（如内存位置上的值区间）来跟踪变量的值。**值集分析（VSA）**就是一种基于这种抽象表示的方法。monoREIL框架是基于REIL中间表示（IR）的一个VSA引擎，极大地简化了VSA算法的开发，并允许开发者在自定义的抽象域上执行VSA。

### 分析中间表示形式

当通过控制流图（CFG）实现分析算法时，存在两种方法：
- **过程内分析**：仅限于当前函数的范围。
- **过程间分析**：能够跨越多个函数进行分析。

显然，过程内分析相对简单，但为了检测某些特定漏洞（如Use-After-Free, UAF），需要跨函数跟踪内存块的状态。因此，论文[Gol10]提出了一种结合这两种方法的技术：首先进行过程内分析，然后将其扩展到全局的过程间分析。每个函数的行为被总结在一个方框中，这些方框的输出和输入相互连接。这样，即使一个函数被多次调用，也只需分析一次即可。此方法不仅提高了效率，还确保了准确性。

另一种解决方案由[Fei14]提出，即将被调用函数内联到调用函数中。虽然该方法易于实现，但它会导致重复分析同一函数，从而增加时间和内存开销。

### 检测UAF漏洞

UAF漏洞通常涉及两个事件：
- 创建悬空指针
- 访问该指针指向的已释放内存

针对这一问题，[Fei14]建议跟踪所有已释放的内存区域，并在每次使用指针时检查其是否指向这些区域。例如，在以下伪代码中：

```plaintext
1. malloc(A);
2. malloc(B);
3. use(A);
4. free(A);
5. use(A);  // 这里会触发UAF警告
```

通过维护分配和释放的堆元素集合，可以在每条指令处更新这些集合，并检查访问的内存是否属于已分配的内存块。一旦发现访问已释放的内存块，即报告UAF漏洞。

[Ye14]则提出了一个基于状态机的方法。在内存分配后，相关指针进入“分配”状态；当内存被释放时，指针转为“释放”状态；若此时仍使用该指针，则标记为“Use-After-Free”。若指针及其别名不再引用内存块，则进入“结束”状态。

[Gol10]则利用图论技术，检查使用指针的语句是否出现在释放内存的语句之后。如果是，则可能存在UAF漏洞。

### 总结

本文介绍了几种基于静态分析的二进制代码UAF漏洞检测方法，并详细讨论了它们的优缺点。值得注意的是，尽管有许多研究工作，但开源项目较少。Veribag团队的GUEB项目是一个例外，值得进一步探索。

### 参考文献

- [Lee15] Preventing Use-after-free with Dangling Pointers Nullification. Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang. NDSS Symposium 2015.
- [Cab12] Early Detection of Dangling Pointers in Use-after-Free and Double Free Vulnerabilities. Juan Cabaleero, Gustavo Grieco, Mark Marron, Antionia Nappa. ISSTA 2012.
- [Ye14] UAFChecker: Scalable Static Detection or Use-After-Free Vulnerabilities. Jiay Ye, Chao Zhang, Xinhui Han. CCS'14.
- [Gol10] Detecting aliased stale pointers via static analysis. Vincenzo Iosso. Politecnico di Milano, 2010.
- [Fei14] Statically detecting use after free on binary code. Josselin Feist, Laurent Mounier, Marie-Laure Potet. Journal of Computer Virology and Hacking Techniques, 2014.
- [Bru11] Brumley, D., Jager, I., Avgerinos, T., Schwartz, E.J.: Bap: a binary analysis platform. CAV’11, Springer, Heidelberg (2011).
- [Bar11] Bardin, S., Herrmann, P., Leroux, J., Ly, O., Tabary, R., Vincent, A.: The bincoa framework for binary code analysis. CAV’11, Springer, Berlin (2011).