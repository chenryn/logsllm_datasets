affect 57.8% tested apps.
In the original protocol specification [21], the access token is
issued on a per-user basis. In contrast, the tokens issued by the
three studied IdPs are per-app and per-user based, so RPs should
verify the binding between the received access token and itself from
the IdP response, e.g., Step 8 in Fig. 1, which tends to be missed.
Besides, the access tokens are all bearer tokens [25]. Thus, the
attacker can extract the associated user information of victims from
the IdP directly with either the stolen (i.e., network attacker) or
obtained (i.e., malicious RP attacker) token, e.g., replaying Step 7
in Fig. 1. Consequently, the attacker can inject both the token and
its corresponding user information in his own session, e.g., Step 6
of Fig. 1. As a result, the attacker can bypass the aforementioned
checking by augmenting the injected access token with related user
information and thus cheat the RP.
In terms of exploiting the vulnerability, there are two major dif-
ferences between WeChat and the others. First, WeChat customizes
the operation of extracting user information and requires the cor-
responding openid (an app-specific user id) in the request (Step 8
in Fig. 7). However, according to our manual test, WeChat server
actually will not check its value so the attacker can still extract
the user information with solely an access token. Second, WeChat
adopts the authorization code flow (Section 2.2) such that the access
token is invisible to the attacker-controlled handset in the normal
flow and thus cannot be tampered. Unfortunately, as mentioned in
Section 4.2.1, 74.3% (168 out of 226) RPs supporting WeChat SSO
implement the interaction (Step 6 and 7 in Fig. 7) on their client
sides (RP apps), making the exploit feasible again.
Security Impacts and Remedies: The impacts of the vulnerabil-
ity depend on the property of the injected access token and the
authenticator chosen by the RP server.
If the token is issued to the targeted RP, the attacker can log into
the RP app as the victim. For example, a network attacker may steal
a valid access token. Then, he can invoke the debug API from the
IdP to identify which RP the token is issued to and launch the attack
on the same one. According to our testing result, 94 (17.1%) tested
apps transmit the access token in the plaintext and thus vulnerable.
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand276Table 2: Statistics of the testing results from 550 RP apps
Profile
#of vulnerable
48
41
5
94
Credential
Disclosure
(Access Token)
Credential
Disclosure
88
179
0
267
125
81
24
230
145
119
54
318
Augmented Token
Replacement
Vulnerability ‡
RPs †
149 (76%)
191 (84.5%)
57 (44.5%)
397 (72.2%) *
App Secret
Disclosure
Access Token
Replacement
(Code)
N/A
23
N/A
23
IdPs (# of
3rd-party RP app)
140
Sina Weibo (196)
98
WeChat (226)
46
Facebook (128)
Summary
284
* 397 out of the 550 RPs (72.2%) are incorrectly implemented.
† One RP app may be susceptible to multiple vulnerabilities, e.g., access token replacement and profile vulnerability, simultaneously.
‡ The scope of the detected Profile Vulnerability is larger than [49], where we also take the user profile from malicious RPs into account.
In the scenario, the RPs that utilize the SSO services from Sina
Weibo and WeChat cannot detect the attack so that they must pro-
tect the access token well. In contrast, the RPs using the Facebook
SSO service can detect the injection by verifying the signature
within the id token (Section 2.3), if the signing key is not leaked.
In contrast, if the token is issued to a different RP, i.e., a malicious
RP attacker, the impacts rely on the chosen authenticator within
the user information (e.g., Step 8 in Fig. 1). If the authenticator
is shared among different RPs, e.g., email, the attacker can still
steal a benign RP account. Otherwise, the attacker may only forge
a malicious RP account with the IdP identities of victims. Using
the forged account, the attacker can post malicious content on
the RP and hurt the reputation of the victim. In many cases, some
information required for registration cannot be directly forged as
additional verification is needed, e.g., SMS verification. However, the
information returned by IdP is trusted by the RP, thus the attacker
can exploit the vulnerability to bypass the verifications and create
malicious accounts with valid user profiles (from the IdP).
However, as mentioned in Section 4.2.1, some RPs tend to customize
the logic on the client side (RP app). Then, the attacker can steal the
secret and use it to impersonate as the benign RP/ IdP for cheating
the other party. For example, in the Facebook case, the app secret
is used as the signing key of the id token (in Fig. 8). Consequently,
the attacker can impersonate as the benign IdP and forge a valid
signature to cheat the RP server into the wrong authentication.
Different from [11, 47], we extended MoSSOT and utilized a
hybrid method to improve the accuracy of detecting the known
vulnerability. Readers may refer to Appendix. C for more details
about the extension. Overall, 267 RP apps (48.5%) leak the app secret
and none of the Facebook apps is vulnerable, which may attribute
to the explicit warning in its documentation.
6 DISCUSSION AND FUTURE WORK
As reflected in Table. 1, MoSSOT encounters several obstacles in
the test. In the section, we elaborate the open issues in different
testing phases and give some proposed solutions.
To mitigate the vulnerability in the situation, the RP server
should verify the binding between the received token and itself.
5.3.2 Discovery of Code Maintenance Failure
Observations: In addition to the vulnerabilities resulted from the
incorrect implementations by RPs, MoSSOT also finds a new one
caused by the IdP. According to the protocol specification [21], the
code used in the authorization code flow should be short-lived.
However, after analyzing the testing result, we find that an un-
used code generated more than 100 minutes ago (10 times longer
than the claimed value in [44]) will still be accepted by the server.
Thus, the IdP server does not maintain authorization code properly.
Security Impacts and Remedies: The vulnerability facilitates an
attacker to exploit the stolen code (available through [15, 24, 28])
and log into the RP app as the victim. In the case of Credential
Disclosure [47], a network attacker may intercept the code from
the RP app to its server (Step 5 in Fig. 7). According to the testing
result, around 10% RP apps (23 out of 223 in Table. 2) indeed disclose
the code in the plaintext and thus is susceptible to the vulnerability.
It is the duty of IdP to fix the vulnerability, where its server needs
to shorten the validity period of codes and reject expired ones.
5.3.3
Improved Detection of App Secret Disclosure
Besides the three known vulnerabilities discussed above, MoSSOT
also detected App Secret Disclosure [11, 47].
The app secret is the identity proof issued by the IdP to RP and
required in the critical requests from the RP server to the IdP server.
6.1 Misclassification in Dataset Screening
Misclassification in the screening (Section 5.1) is unavoidable. We
apply conservative strategies to limit the false negative rate, as
UI Explorer (Section 4.1.2) can eliminate false positives. We run
the Screener against the whole dataset and randomly selected 200
passed apps to evaluate its performance. We manually examined
each of them to get the true positives and analyzed the rest for
failure investigation. The result is shown in Table 3.
The high false positive rate, 84 out of 200 (42%), is mainly due to
the fact that many apps include SSO SDK without using it. However,
it is possible to improve the accuracy so that UI Explorer will not
waste time on those apps. One potential solution is to extract the
call flow graph from the APK and check the usage of SSO SDK.
6.2 UI Automation Failure
The most challenging part in UI automation is the exploration. The
step is crucial as it feeds input to Test Engine (Module B in Fig. 3).
Based on the ground truth in Table 3, we evaluate and compare the
performance of UI Explorer with both Algorithm I and Algorithm
II (described in Section 4.1.2). The success rate and average running
time are summarized in Table 3. The result indicates the choice
between Algorithm I and Algorithm II is actually a tradeoff between
false negative rate and efficiency. In our experiments, the runtime
overhead of Algorithm II is mainly caused by the penalty of false
positives. For example, if there is a button appearing to be a login
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand277Table 3: Performance evaluation dataset: 200 sample apps that passed Screener
Apps that pass
manual SSO test *
73/200
Apps that cannot pass
manual SSO test
127/200
Performance of Algorithm I & II
Algorithm I (LKS)
47/73 (64.4%), ¯t = 236s †
Algorithm II (DFS)
57/73 (78.1%), ¯t = 376s
Both Algorithms failed
14/73 (19.2%)
Reasons that manual SSO test failed
SSO not integrated
84/127 (66.1%)
Launch failure ‡
33/127 (26.0%)
† ¯t is the average running time per app.
Update required
10/127 (7.9%)
‡ The failure can be caused by the
* The manual SSO test was done in an emulator.
emulator or the app itself (e.g., unable to connect to its server).
Table 4: Statistics of the failure cases in Test Learner
Failure Reasons
Fixable with
manual config.
Fixable with
RP’s support
App Error
RP Account
Settings
Failure to Extract
User Login Status
Captcha Required
#Cases
(percent)
18 (30%)
14 (23.3%)
27 (45%)
1 (1.7%)
×
✓
×
×
×
✓
✓
✓
At the moment, we do not have a proper solution to the issue as
there does not exist a uniform method to parse the TCP messages.
Captcha Required: We encountered one app requiring Captcha
verification, which our UI automation module could not handle.
As indicated in Table. 4, RP Account Settings can be fixed with
the one-time manual configuration so that the success rate at the
stage can increase to around 44.2%. Besides, Failure to Extract User
Login Status and Captcha Required may be solved given the support
from the RP, where the rate can increase to around 78.1% further.
6.4 Speeding up the Execution of Test Cases
Most apps could complete the test once they passed the previous
phases due to the special handling mentioned in Section 4.5. How-
ever, our tester still suffers a large time cost, which is mainly caused
by network delay and UI navigation (Section 4.1).
In the normal flow, the RP server will not reply the authentication
request (e.g., Step 6 in Fig. 1) to the app until the handshake between
the servers (e.g., Step 7 and 8 in Fig. 1) is finished. Since one of our
targets is to find the vulnerabilities in the blackbox servers, the
testing must be online and the network delay cannot be avoided.
Besides, the UI Navigation is also time-consuming because every
widget in the UI path needs triggering in each round. Worse still,
once noise appears, e.g., advertisement popup, Noise Reducer needs
to take more time to recover the app to the normal state.
There are two possible solutions to increase the speed. The first