# Introduction to Unicornscan

## Introducing Unicornscan

**RIDING THE UNICORN**

Unicornscan is an open-source (GPL) tool designed for information gathering and security auditing. This presentation will highlight the real-world challenges we have encountered with other tools and methods, and demonstrate how Unicornscan can provide effective solutions.

For the latest version of this talk, visit: [http://www.dyadlabs.com/defcon05.pdf](http://www.dyadlabs.com/defcon05.pdf)

### Presented By:
- **Robert E. Lee**
  - CEO, Dyad Labs, Inc.
  - Director of Projects and Resources, ISECOM
  - OPST & OPSA Certified Trainer
- **Jack C. Louis**
  - Chief Security Researcher, Dyad Labs, Inc.
  - Systems Programmer
  - OPST & OPSA Certified Trainer
- **Anthony de Almeida Lopes**
  - Intern, Dyad Labs, Inc.

## Outline
1. **Introduction to Unicornscan**
2. **Scatter Connect**
3. **Unicornscan - History, Background, & Technical Details**
4. **Demo**

## Introduction to Unicornscan

### Scatter Connect

#### 3-way Handshake Connect Picture
[Insert Image Here]

#### Scatter Connect Picture
[Insert Image Here]

#### Scatter Connect Explained
- **TCP Connection State Tracking**: Move TCP connection state tracking from kernel space to user space.
  - **Master Control (Unicornscan)**: Manages packet transmission, tracks responses, and maintains connection state.
  - **Sender (unisend)**: Assembles and sends packets. Can be split into Batch Sender and Immediate Sender modes.
  - **Listener (unilisten)**: Listens for responses and sends meta information back to the master control.

#### Scatter Connect Explained - Cont
- When `unilisten` detects a SYN/ACK packet, it sends the meta information back to Unicornscan.
- Unicornscan then requests `unisend` to send an ACK packet to complete the 3-way handshake.
- Depending on the session requirements, Unicornscan schedules additional payloads to be sent by `unisend`.

### Common Port Scanning Problems
- **No Reliable UDP Scanning**: Traditional UDP scanning relies on ICMP responses, which are often blocked by firewalls. This necessitates scripting UDP protocol clients (e.g., `dig`, `snmpwalk`) to enumerate live services.
- **TCP Enumeration Complexity**: Involves multiple steps such as Syn Scanning, banner grabbing, and protocol-specific stimulus. Networks are growing, and existing tools are not designed for large-scale testing (65k-4 billion+ IPs). Processing the output can be overwhelming.

### Common Vulnerability Scanning Problems
- **Contradictory Modules**: Tools may report conflicting information (e.g., "Remote host is running Amiga Miami OS" and "Remote host is running IIS 5.0 on TCP Port 80"). Better module integration is needed for accurate results.

### Timing Problems
- **Packet Per Second (PPS) Rate Control**: Existing tools like Scanrand and Nmap lack precise PPS rate control, leading to bursty behavior and packet loss at high speeds. The timing is also affected by the responses received.

### Mindset
- **Fundamental Design Goals**:
  - **Scalability**: Efficient use of resources, not just speed.
  - **Accuracy**: Valid data collection for valid analysis. Tools should introduce stimuli and record responses, leaving analysis to humans.
  - **Flexibility**: Users supply the stimulus; Unicornscan provides the delivery mechanism. Dynamic "just in time" decision control.
  - **Security**: Implementation modeled after IDSSCPP_V1.2. A sample security policy for SE Linux is provided.

### What Does It Do?
- **Distributed User Space TCP/IP Stack**:
  - **Key Features**:
    - Asynchronous stateless TCP/UDP port scanning.
    - Asynchronous stateless TCP banner grabbing.
    - Active remote OS, application, and component collection.
    - Custom static and dynamic payload module support.
    - Protocol-specific TCP/UDP stimulus and response framework.
    - Metamorphic shellcode encoder.
    - PCAP file logging and filtering.
    - Relational database output.

### Architecture
- **Three Processes (NOT THREADS)**:
  - **Why?**: No safe way to implement separation of duties (SoD) with threads due to shared memory.
  - **Processes**:
    - **Sender (unisend)**: Sends packets (Batch Sender and Immediate Sender).
    - **Listener (unilisten)**: Sniffs for responses.
    - **Master (Unicornscan)**: Manages overall operations.

### Sequence Number Encoding
- **Stateless TCP Scanning**: Supports TCP streams using a simple algorithm:
  ```c
  #define TCPHASHTRACK(srcip, srcport, dstport, syncookie) \
    ((syncookie) ^ ((srcip) ^ ((srcport) << 16) + (dstport)))
  ```
  - This allows TCP connections without a one-way algorithm, reducing IPC messages.
  - State table entries are created only after receiving a response (SYN+ACK), unlike traditional TCP/IP stacks.

### Internal Steps for a Syn Scan
- **Example (Single Host, Basic SYN Scan)**:
  1. User invokes scanner via command line.
  2. Scanner reads configuration file.
  3. Scanner processes command line options (overriding configuration file).
  4. Master process opens shared library modules.
  5. Master process forks children processes.
  6. Master process forks a sender process and records its creation information.
  7. Sender process opens Unix domain socket and awaits master connection.
  8. Master thread awaits signals from both children.
  9. Master connects to sender and sends an IDENT message.
  10. Sender and Listener send back IDENT_SENDER and IDENT_LISTENER messages respectively.
  11. Master process forks listener process and records its creation information.
  12. Listener process opens Unix domain socket and awaits master connection.
  13. Master ACKs both messages.
  14. Sender opens configuration file and shared libraries, looking for UDP payloads.
  15. Listener opens pcap interface, looks up interface information, and attempts to drop privileges.
  16. Sender sends READY message to Master.
  17. Listener sends READY message with interface information.
  18. Master prepares workunit information based on Listener's information.
  19. Master sends Listener a "sniffing" workunit, including a pcap filter string.
  20. Listener gets "sniffing" workunit and responds with a READY message after processing it.

---

This optimized text provides a clear, professional, and structured overview of Unicornscan, its features, and its operational details.