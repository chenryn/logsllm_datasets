Introduction to Unicornscan
Introducing Unicornscan
RIDING THE UNICORN
Unicornscan is an open source (GPL) tool designed to assist with information gathering and security auditing.
This talk will contrast the real world problems we’ve experienced using other tools and methods while
demonstrating the solutions that Unicornscan can provide.
For the latest copy of this talk go to http://www.dyadlabs.com/defcon05.pdf
Presented By:
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Outline
1
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Speakers
Speakers:
Robert E. Lee
CEO, Dyad Labs, Inc.
Director of Projects and Resources, ISECOM
OPST & OPSA Certiﬁed Trainer
Jack C. Louis
Chief Security Researcher, Dyad Labs, Inc.
Systems Programmer
OPST & OPSA Certiﬁed Trainer
Anthony de Almeida Lopes
Intern, Dyad Labs, Inc.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
3-way Handshake Connect Picture
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Scatter Connect Picture
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Scatter Connect Explained
Move TCP connection state tracking out of kernel space and
into user space
One process is the master control (Unicornscan).
Keeps track of what packets need to be sent
Who can send them
The responses that have come back
connection state.
A second process is the sender (unisend).
Assembles the packets and puts them on the wire.
Optionally, you can split this function into Batch Sender and
Immediate Sender modes.
A third process is the listener (unilisten).
Listens for responses and sends the meta information back
to the master control.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Scatter Connect Explained - Cont
When unilisten sees the SYN/ACK packet, it sends the
meta information back to Unicornscan.
Unicornscan then requests that unisend send a ACK
packet back to the host that sent the SYN/ACK to complete
the 3-way hand-shake.
At that point, depending on what other modules or
payloads were to be used in the session, Unicornscan
would schedule the additional payloads to be sent by
unisend.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Common Port Scanning Problems
No reliable UDP scanning
UDP port scanning involves sending UDP probes with no
application/protocol speciﬁc instructions in the datagram
and counting on ICMP responses to indicate "Closed" ports
Turns out, people use ﬁrewalls
Required us to script UDP protocol clients (dig, snmpwalk,
etc) to enumerate live services through ﬁrewalls
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Common Port Scanning Problems - Cont
TCP enumeration has too many steps
Syn Scanning
Connect/banner grab scanning the "open" ports
Protocol speciﬁc stimulus (ala amap, manual testing, etc)
Networks are getting bigger
Tools not intended for testing large (65k-4billion+ IPs)
networks
Processing the output can be overwhelming
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Common Vulnerability Scanning Problems
These tools have modules that contradict each other
Remote host is running Amiga Miami OS
Remote host is running IIS 5.0 on TCP Port 80
Remote host is vulnerable to Apache Nosejob vulnerability
To be useful, the modules need to share information better
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Timing Problems
No mechanism for accurate control over the Packets Per
Second (PPS) rate
Scanrand provided a -b (bandwidth) option, but is bursty
and has lots of packet loss at relatively low speeds
Nmap’s -T option has a few problems
Normal, Aggressive, Insane, etc isn’t easily translated into
PPS ranges
Even Insane doesn’t scale to high speeds
The timing is affected by the responses received
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Mindset
Fundamental Design Goals
Scalability
Efﬁcient use of resources (bus analogy)
Not the same as just "going faster"
Accuracy
Invalid data collection leads to invalid analysis
Tools should introduce stimulus, record response
Humans analyze
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Mindset
Flexibility
You supply the stimulus
We supply the delivery mechanism
Dynamic "just in time" decision control
Security
Implementation modeled after IDSSCPP_V1.2
We also provide a sample security policy for use with SE
Linux
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
What does it do?
Provides a distributed user space TCP/IP stack
Some key features:
Asynchronous stateless TCP/UDP port Scanning
Asynchronous stateless TCP banner grabbing
Active remote OS, application, and component collection
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
What does it do? - Cont
Some key features - Cont:
Custom static and dynamic payload module support
Protocol speciﬁc TCP/UDP stimulus & response framework
Metamorphic shellcode encoder
PCAP ﬁle logging and ﬁltering
Relational database output
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Architecture
3 processes (NOT THREADS)
Why? - No safe way to do SoD with threads (due to the
sharing of memory).
There is no good reason to share memory
Sender (It sends packets)
Batch Sender
Immediate Sender
Listener (It Sniffs)
Master (It does everything else)
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Sequence Number Encoding
Stateless TCP scanning that can support TCP streams:
#deﬁne TCPHASHTRACK(srcip, srcport, dstport, syncookie)
((syncookie) ˆ ((srcip) ˆ ((srcport) << 16) + (dstport) )))
With something so simple we can do TCP connections
because the algorithm is NOT one way.
Without this there would be an IPC message for every
packet received.
We don’t have an entry in our state table until after we
receive a response (SYN+ACK)
Normal TCP/IP stacks would use a state table entry after
sending the initial SYN
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Internal Steps for a Syn Scan
How a Scan Works: (example, cluster mode is different,
obviously)
Simple 30 step process to running a port scan. (for a basic
SYN scan running on one host)
1
User invokes scanner via command line.
2
Scanner reads conﬁguration ﬁle.
3
Scanner walks command line options (overriding
conﬁguration ﬁle).
4
Master process opens shared library modules.
5
Master Process ﬁgures out that it needs to fork children.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Internal Steps for a Syn Scan
6
Master Process forks a sender process and records its
creation information.
7
Sender Process opens Unix domain socket and awaits
master connection.
8
Master thread awaits signals from both children.
9
Master connects to sender and sends an IDENT message.
10 Sender and Listener send back IDENT_SENDER and
IDENT_LISTENER message respectively.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Internal Steps for a Syn Scan
11 Master Process forks listener process and records its
creation information.
12 Listener Process opens Unix domain socket and awaits
master connection.
13 Master ACKS both messages.
14 Sender opens up conﬁguration ﬁle and shared libraries
looking for UDP payloads.
15 Listener opens pcap interface, looks up interface
information, and attempts to drop privs.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo
Internal Steps for a Syn Scan
16 Sender sends back READY message to Master.
17 Listener sends back READY message with listeners
interface information included.
18 Master considers information from Listener and prepares
workunit information.
19 Master sends Listener a "snifﬁng" workunit, including a
pcap ﬁlter string, etc.
20 Listener gets "snifﬁng" workunit and responds with a
READY message after processing it.
Robert E. Lee & Jack C. Louis
Introducing Unicornscan – Dyad Labs, Inc.
Introduction to Unicornscan
Scatter Connect
Unicornscan - History, Background, & Technical Details
Demo