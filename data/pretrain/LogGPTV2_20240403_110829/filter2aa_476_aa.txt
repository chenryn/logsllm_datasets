Upload
Upload
Upload
Upload Attack
Attack
Attack
Attack Framework
Framework
Framework
Framework
Version
Version
Version
Version 1.0
1.0
1.0
1.0
CasperKid [Syclover][Insight-Labs]
2011/10/6
[*] Team : Syclover Security Team & Insight Labs
[*] Web : www.myclover.org & www.insight-labs.org
[*] Blog : hi.baidu.com/hackercasper
[*] Mail : PI:EMAIL
前言
这篇 paper 还是断断续续憋了我两个月左右，想把整个攻击能抽象出一个体系出来，所
以一直拖了很久才最终成型，个中艰辛还是在自己能体会。原本 paper 是投到 webzine0x06，
后来刺总(axis)说 webzine0x06 要 11 月才发布，很多朋友又在催，就提前公开这篇 paper 了。
在现在越来越安全的体系下，sql injection 这类漏洞已经很难在安全性较高的站点出现，
比如一些不错的.NET 或 JAVA 的框架基本上都是参数化传递用户输入以及其他一些能防御
SQL 注入的 API，直接封死注入攻击。在非 php 的 web 安全中出现概率很大而且威力也很
大的攻击主要有两种，第一种是 sql injection，第二种便是上传攻击。（php 的还有本地/远程
文件包含或代码注入漏洞等)。
通常 web 站点会有用户注册功能，而当用户登入之后大多数情况下都会存在类似头像
上传、附件上传一类的功能，这些功能点往往存在上传验证方式不严格的安全缺陷，是在
web 渗透中非常关键的突破口，只要经过仔细测试分析来绕过上传验证机制，往往会造成被
攻击者直接上传 web 后门，进而控制整个 web 业务的控制权，复杂一点的情况是结合 web
server 的解析漏洞来上传后门获取权限。
这篇 paper 或许还并不算完善，但在分类总结上还是比较全面，我看过 OWASP 和
Acunetix 对上传攻击的分类，很多方面并不够全面。在写 paper 这段时间，因为也在学习其他
东西，比较忙，现在才把这篇 paper 算写了一个相对来说比较完整的版本，麻雀虽小，五脏
俱全，之中有不足之处，希望大家有类似经验的提出来，以便我能更加完善这篇 paper，也
让大家的交流产生更大的价值。
还有关于这个 framework，当时看有部分朋友有些误解，以为有这个 framework，就一
定能挖到 exp 之类，为了不误导大家，在这里还是做个说明。我的本意，只是为了提供一种
相对来说系统的分析方法，比如给你一份 upload 的源码或者一个 website，你怎么来系统地
进行白盒/黑盒分析它，并从流程中找出它的逻辑漏洞或其他漏洞来，而不是去猜它会有什
么漏洞。更高层次的渗透不应该是去猜测目标，而是通过好的分析和总结能确定甚至预测目
标，要自己能心里真正清楚目标的信息，是什么版本，有什么漏洞，一次就成功，而不是我
猜下这样是否能成功的侥幸心理。渗透不是猜测，而是结合社会工程学收集到足够多的信息，
明确甚至预测目标的环境，然后不做过多的动作，而让自己最大化隐藏完成渗透测试。
在写 paper 时，保存的图像分辨率都比较高，大家用 100%分辨率观看时可能不太清晰，
需要看图像的细节时，推荐大家用 200%-400%分辨率来观看即可。
目录概览
目录概览
目录概览
目录概览
0x00 上传检测流程概述
0x01 客户端检测绕过(javascript 检测)
0x02 服务端检测绕过(MIME 类型检测)
0x03 服务端检测绕过(目录路径检测)
0x04 服务端检测绕过(文件扩展名检测)
- 黑名单检测
- 白名单检测
- .htaccess 文件攻击
0x05 服务端检测绕过(文件内容检测)
- 文件幻数检测
- 文件相关信息检测
- 文件加载检测
0x06 解析攻击
- 网络渗透的本质
- 直接解析
- 本地文件包含解析
- .htaccess 解析
- web 应用程序解析漏洞及其原理
0x07 上传攻击框架
- 轻量级检测绕过攻击
- 路径/扩展名检测绕过攻击
- 文件内容性检测绕过攻击
- 上传攻击框架
- 结语
0x00 上传检测流程概述
通常一个文件以 HTTP 协议进行上传时，将以 POST 请求发送至 web 服务器
web 服务器接收到请求后并同意后，用户与 web 服务器将建立连接，并传输 data
而一般一个文件上传过程中的检测如下图红色标记部分：
A 客户端 javascript 检测 (通常为检测文件扩展名)
B 服务端 MIME 类型检测 (检测 Content-Type 内容)
C 服务端目录路径检测 (检测跟 path 参数相关的内容)
D 服务端文件扩展名检测 (检测跟文件 extension 相关的内容)
E 服务端文件内容检测 (检测内容是否合法或含有恶意代码)
随后本文将对这些检测如何绕过攻击进行详细的讲解
0x01 客户端检测绕过(javascript 检测)
这类检测通常在上传页面里含有专门检测文件上传的 javascript 代码
最常见的就是检测扩展名是否合法
下面将给出具体实例
打开 http 反向代理工具 burp
先随便点击浏览选择文件 2012.asa
但是刚点击“打开”，而这时也并没点击 Upload
burp 里也还没出现任何内容，便弹出了一个警告框
这种情况一看就知道是个客户端 javascript 检测 (因为没有流量经过 burp 代理)
下图是该上传页面负责检测扩展名合法性的 javascript 代码
我们可以用 firebug 之类的插件把它禁掉或者通过 burp 之类的代理工具进行绕过提交
这里我将用 burp 进行代理修改
先将文件扩展名改成 jpg
然后点击 Upload
现在在 POST Packet 里文件名字段的值是 2012.jpg
在 burp 里将 filename="2012.jpg" 改成 filename="2012.asp"
然后继续 forward 上传
最后可以看到 asp 成功上传
0x02 服务端检测绕过(MIME 类型检测)
因为没有找到合适的案例源码程序，就找了个模拟代码讲解下
更具体的找到了一个渗透实例，也是利用的 MIME 类型上传绕过漏洞
地址是: http://www.heibai.net/articles/hacker/ruqinshili/2011/0325/13735.html
下面是找到的一个模拟检测代码
假如服务器端上的 upload.php 代码如下
然后我们可以将 request 包的 Content-Type 修改
POST /upload.php HTTP/1.1
TE: deflate,gzip;q=0.3
Connection: TE, close
Host: localhost
User-Agent: libwww-perl/5.803
Content-Type: multipart/form-data; boundary=xYzZY
Content-Length: 155
--xYzZY
Content-Disposition: form-data; name="userfile"; filename="shell.php"
Content-Type: image/gif (原为 Content-Type: text/plain)
--xYzZY--
得到服务端的应答
HTTP/1.1 200 OK
Date: Thu, 31 May 2011 14:02:11 GMT
Server: Apache
Content-Length: 59
Connection: close
Content-Type: text/html
File is valid, and was successfully uploaded.
可以看到我们成功绕过了服务端 MIME 类型检测
像这种服务端检测 http 包的 Content-Type 都可以用这种类似的方法来绕过检测
0x03 服务器检测绕过(目录路径检测)
目录路径检测，一般就检测路径是否合法，但稍微特殊一点的都没有防御。
比如比较新的 fckeditor php <= 2.6.4 任意文件上传漏洞
地址: http://www.wooyun.org/bugs/wooyun-2010-01684
效果如下
漏洞成因是因为对目录路径的检测不够严谨而导致可以用 0x00 截断进行攻击
可以看到图中，在最后将要进行写文件之前的变量状态
sFilePath = C:/wamp/www/userfiles/image/fuck.php .gif/fvck.gif (.php 后面是 0x00)
当右图执行 move_uploaded_file( $oFile['tmp_name'], $sFilePath) 这个函数时
1. 先将 sFilePath 写入到指定位置，但是底层操作应该是调用的类似于 c 语言，遇到 0x00 会
自动截断，所以真正写入的实际地址是 C:/wamp/www/userfiles/image/fuck.php
2. 把原本 fvck.gif 里的内容(目前应该存在临时文件，类似于 C:/Temp/phpf3at7b 这样的文件)
然后把 C:/Temp/phpf3at7b 的内容写入到 C:/wamp/www/userfiles/image/fuck.php 里
这样便获得了我们所想要的 webshell
问题出在了 io.php 里的 ServerMapFolder 函数
当 POST 下面的 URL 的时候
/fckeditor264/filemanager/connectors/php/connector.php?Command=FileUpload&Type=Image&
CurrentFolder=fuck.php%00.gif
HTTP/1.0
CurrentFolder 这个变量的值会传到 ServerMapFolder($resourceType, $folderPath, $sCommand)
中的形参 $folder 里，而 $folder 在这个函数中并没做任何检测，就被 CombinePaths()了
0x04 服务端检测绕过(文件扩展名检测)
对于扩展名检测不强的，时常还可以结合目录路径攻击
比如 filename="test.asp/evil.jpg" 之类
---- 黑名单检测
黑名单的安全性比白名单的安全性低很多，攻击手法自然也比白名单多
一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件
例如 fckeditor 2.4.3 或之前版本的黑名单
1. 文件名大小写绕过
用像 AsP，pHp 之类的文件名绕过黑名单检测
2. 名单列表绕过
用黑名单里没有的名单进行攻击，比如黑名单里没有 asa 或 cer 之类
3. 特殊文件名绕过
比如发送的 http 包里把文件名改成 test.asp. 或 test.asp_(下划线为空格)，这种命名方式
在 windows 系统里是不被允许的，所以需要在 burp 之类里进行修改，然后绕过验证后，会
被 windows 系统自动去掉后面的点和空格，但要注意 Unix/Linux 系统没有这个特性。
4. 0x00 截断绕过
在扩展名检测这一块目前我只遇到过 asp 的程序有这种漏洞，给个简单的伪代码
name = getname(http request) //假如这时候获取到的文件名是 test.asp .jpg(asp 后面为 0x00)
type = gettype(name) //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg
if (type == jpg)
SaveFileToPath(UploadPath.name, name) //但在这里却是以 0x00 作为文件名截断
//最后以 test.asp 存入路径里
5. .htaccess 文件攻击
配合名单列表绕过，上传一个自定义的.htaccess，就可以轻松绕过各种检测
6. 解析调用/漏洞绕过
这类漏洞直接配合上传一个代码注入过的非黑名单文件即可，再利用解析调用/漏洞
---- 白名单检测
白名单相对来说比黑名单安全一些，但也不见得就绝对安全了
1. 0x00 截断绕过
用像 test.asp%00.jpg 的方式进行截断，属于白名单文件，再利用服务端代码的检测逻辑
漏洞进行攻击，目前我只遇到过 asp 的程序有这种漏洞
2. 解析调用/漏洞绕过
这类漏洞直接配合上传一个代码注入过的白名单文件即可，再利用解析调用/漏洞
---- .htaccess
.htaccess
.htaccess
.htaccess 文件攻击
无论是黑名单还是白名单
再直接点就是直接攻击.htaccess 文件
(其实目前我只见过结合黑名单攻击的，在后面的攻击分类里，我会把它归到黑名单绕过攻