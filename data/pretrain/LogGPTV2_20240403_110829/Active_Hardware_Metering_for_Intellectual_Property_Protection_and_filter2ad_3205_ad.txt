benchmarks that are not realistic compared to the current
complex designs, the power increases signiﬁcantly. As
the circuit size increases, the percentage power overhead
decreases.
Next, we make a small model of the percentage of area
and power overhead versus size of the circuit to extrapo-
late to more complex designs. The size of the added STG
is ﬁxed to 15 FFs. Figures 8(a) and 8(b) show the over-
head data vs. size along with the ﬁtted polynomial mod-
els, for power and area respectively. The plots suggest
that as the circuit size increases, the percentage of power
and area overheads both decrease. Note that, for more
complex designs, it is required to add signiﬁcantly more
than 15 FFs. Even if adding a STG with 100 FFs would
add six times the overhead of the 15 FFs case in absolute
terms, the overhead would be negligible, while there will
be 285 extra states added to the design. Thus, for current
and future circuit technologies, the BFSM would have a
minimal impact on the performance in terms of power,
area, and delay (i.e., it will most likely stay less than 1%
of the overall design).
7.3 Resiliency against the brute force at-
tack
Most of the attacks described in Section 6 can be en-
countered by devising intelligent design strategies, as de-
scribed in Subsection 6.2. The only attack that we quan-
titatively study here is the brute force attack. We model
this attack by randomly guessing the values on the graph
until arriving at the functional reset state of the original
FSM.
We simulated the brute force attack on BFSMs with
12, 15, and 18 FFs, varying the inputs from 3 to 8. In this
experiment, we set an upper bound of 1,000,000 guesses;
if the reset state is not reached after this many trials,
the original STG is considered unreachable (denoted by
N/R) and the brute force attack is reported unsuccessful.
Table 3 shows the average number of guesses needed
to unlock the BFSM over a 10,000 simulation runs. The
ﬁrst three rows show added STGs with 12, 15, and 18
FFs respectively. The next two rows show the results for
STGs with 12 and 15 FFs, after adding 1 and 2 black
holes respectively. Although the number of inputs does
not affect the overhead, it impacts the resiliency against
the brute force attack: the table illustrates that the brute
force attacks are less successful if we use more than 3
different inputs. Also, as the size of the added STG in-
creases, more guesses are necessary to unlock the circuit.
By adding one black hole to the smaller FSMs, they per-
form better than the larger FSMs. Adding one or two
black holes makes the original STG unreachable for the
brute force attack. It is worth noting here that STGs with
12 and 15 FFs are really small, as they have a total of
4,096 and 32,768 states respectively. If the active meter-
ing scheme was to be implemented on current industrial
strength designs, the added circuit would have at least a
100 FFs that would create 2100 ∼ 1030 states. It would
be impossible for a brute force attack to ﬁnd a key. Fur-
thermore, addition of a few black holes will further make
302
16th USENIX Security Symposium
USENIX Association
Original Details
12 FFs
15 FFs
Circuit
s27
s298
s344
s444
s526
s641
s713
s953
s832
s1238
s1423
s9234
s13207
s38417
In Out
1
4
6
3
11
9
3
6
6
3
23
35
23
35
16
23
19
18
14
14
5
17
39
36
31
121
106
28
FFs
3
14
15
21
21
17
17
29
5
18
74
135
453
1463
Area
18
244
269
352
445
539
591
743
769
1041
1164
7971
11248
32246
12 FFs
Area
224
454
480
554
648
743
793
947
971
1264
1382
8174
11450
32448
%
11.44
0.86
0.78
0.57
0.46
0.38
0.34
0.27
0.26
0.21
0.19
0.03
0.02
0.01
Area
278
508
534
609
702
797
847
1001
1025
1318
1436
8228
11504
32502
%
14.44
1.08
0.99
0.73
0.58
0.48
0.43
0.35
0.33
0.27
0.23
0.03
0.02
0.01
Table 1: Area overhead of active metering for various benchmarks.
Circuit
s27
s298
s344
s444
s526
s641
s713
s953
s832
s1238
s1423
s5378
s9234
s13207
s38417
Original Details
Delay
6.60
15.00
27.00
17.60
15.20
97.60
100.00
23.60
28.80
34.40
92.40
32.20
75.80
85.60
69.40
Power
134.00
1167.20
1030.00
1550.80
2065.70
1560.60
1670.70
1816.50
2849.60
2709.40
4882.70
12459.40
19385.50
37874.00
112706.80
Delay
14.40
15.00
27.00
17.60
15.20
97.60
100.00
23.60
28.80
34.40
92.40
32.20
75.80
85.60
69.40
%
1.18
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
Power
1418.70
2468.60
2325.90
2815.20
3334.30
2832.10
2935.00
3084.20
4114.00
4034.00
6226.30
13515.00
20653.30
39138.40
113869.00
% Delay
14.40
15.00
27.00
17.60
15.20
97.60
100.00
23.60
28.80
34.40
92.40
32.20
75.80
85.60
69.40
9.59
1.11
1.26
0.82
0.61
0.81
0.76
0.70
0.44
0.49
0.28
0.08
0.07
0.03
0.01
15 FFs
Power
1696.70
2746.60
2603.90
3152.30
3664.70
3162.40
3265.40
3414.60
4444.40
4312.00
6504.30
14057.50
20983.70
39402.00
114147.00
%
1.18
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
%
11.66
1.35
1.53
1.03
0.77
1.03
0.95
0.88
0.56
0.59
0.33
0.13
0.08
0.04
0.01
Table 2: Delay and power overhead of active metering for various benchmarks.
the system resilient against the brute force attack.
Table 4 shows area and power overheads for adding a
black hole with 2 states to added STGs with 12 and 15
FFs respectively. The overhead of adding a black hole
does not exceed 5% even for very small benchmarks. For
larger circuits it is unnoticeable. Note that, we often add
more than one black hole to the design, to warrant the
impossibility of the brute force attacks.
To evaluate the diversity of keys, we studied the num-
ber of cycles in the added STGs. For this STG, we form
a new graph STG*, that has the same nodes as STG, but
reverses the edges. Note that, simultaneously reversing
all the edges will not affect the number of cycles in the
graph. Since each state on STG has a path to the reset
state, the directed acyclic graph (DAG) rooted at the orig-
inal reset state in STG* will have a path to all states. We
ﬁnd a DAG of STG* by using the Dijkstra’s shortest path
algorithm. Next, we add the STG* edges to the DAG and
see if they form a cycle and combine the cycles into one
node; we iteratively continue until the cycles are gone.
This approximate method is used to count the number of
cycles. Using the method, we roughly guess that the STG
with 12 FFs had more than 40 cycles that enables the use
to build exponentially many keys for traversal from a cer-
tain state. The large number of keys can be easily gener-
ated by a combination of cycling and switching between
the cycles of the STG.
8 Potential applications
Active hardware metering provides strong anti-piracy
mechanisms for hardware IP cores as well as remote-
disabling mechanisms for the manufactured parts. Re-
mote disabling can be accomplished if a malicious activ-
USENIX Association
16th USENIX Security Symposium
303