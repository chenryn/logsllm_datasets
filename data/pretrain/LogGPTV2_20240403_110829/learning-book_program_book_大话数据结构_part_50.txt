8.8多路查找树（B树）
台湾出版人何飞鹏在《自慢》书中曾经有这样的文字：“要观察一个公司是否严
谨，看他们如何开会就知道了，如果开会时每一个人都只是带一张嘴，即兴发言，这
肯定是一家不严谨的公司，因为肯定每一个人都只是用直觉与反射神经在互相应对，
不可能有深度的思考与规划……，语言是沟通的工具，文字是记录存证的工具，而文
字化的过程，又可以让思考彻底沉淀，善于使用文字的人，通常是深沉而严谨的。”显
然，这是一个很好理解的观点，但许多人都难以做到它。
2
注”：本节来对平衡二叉树的则除结点进行讲解，有兴趣的同学可壹阅（数据结构从应用到实现（Jam版）一名的第
十章内客。二又的序树还有易给的平街其法，如红累树（Red BlackTirce）等，与平衡二叉树（AVL树）相此各有优
势，可以参考（算法寻论）第13章的内容。
341
---
## Page 366
大话数据结构
图 8-8-1
要是我们把开会比作内存中的数据处理的话，那么写下来和时常阅读它就是内存
数据对外存磁盘上的存取操作了。
内存一般都是由硅制的存储芯片组成，这种技术的每一个存储单位代价都要比磁存
储技术昂贵两个数量级，因此基于磁盘技术的外存，容量比内存的容量至少大两个数量
级。这也就是目前PC通常内存几个G而已、而硬盘却可以成百上千G容量的原因。
我们前面讨论过的数据结构，处理数据都是在内存中，因此考虑的都是内存中的
运算时间复杂度。
但如若我们要操作的数据集非常大，大到内存已经没办法处理了怎么办呢？如数
据库中的上千万条记录的数据表、硬盘中的上万个文件等。在这种情况下，对数据的
处理需要不断从硬盘等存储设备中调入或调出内存页面
一旦涉及到这样的外部存储设备，关于时间复杂度的计算就会发生变化，访问该
集合元素的时间已经不仅仅是寻找该元素所需比较次数的函数，我们必须考虑对硬盘
等外部存储设备的访问时间以及将会对该设备做出多少次单独访问。
试想一下，为了要在一个拥有几十万个文件的磁盘中查找一个文本文件，你设计
的算法需要读取磁盘上万次还是读取几十次，这是有本质差异的。此时，为了降低对
外存设备的访问次数，我们就需要新的数据结构来处理这样的问题。
我们之前谈的树，都是一个结点可以有多个孩子，但是它自身只存储一个元素。
二叉树限制更多，结点最多只能有两个孩子。
342
---
## Page 367
第8章查找
一个结点只能存储一个元素，在元素非常多的时候，就使得要么树的度非常大
（结点拥有子树的个数的最大值），要么树的高度非常大，甚至两者都必须足够大才
行。这就使得内存存取外存次数非常多，这显然成了时间效率上的瓶颈，这迫使我们
要打破每一个结点只存储一个元素的限制，为此引入了多路查找树的概念。
多路查找树（muitl-waysearchtree），其每一个结点的孩子数可以多于两个，且
每一个结点处可以存储多个元素。由于它是查找树，所有元素之间存在某种特定的排
序关系。
在这里，每一个结点可以存储多少个元素，以及它的孩子数的多少是非常关键
的。为此，我们讲解它的4种特殊形式：2-3树、2-3-4树、B树和B+树。
8.8.12-3树
说到二三，我就会想起儿时的童谣，“一去二三里，烟村四五家。亭台六七座，八
九十支花。”2和3是最基本的阿拉伯数字，用它们来命名一种树结构，显然是说明这
种结构与数字2和3有密切关系。
2-3树是这样的一棵多路查找树：其中的每一个结点都具有两个孩子（我们称它
为2结点）或三个孩子（我们称它为3结点）。
一个2结点包含一个元素和两个孩子（或没有孩子），且与二叉排序树类似，左子
树包含的元素小于该元素，右子树包含的元素大于该元素。不过，与二叉排序树不同
的是，这个2结点要么没有孩子，要有就有两个，不能只有一个孩子。
一个3结点包含一小一大两个元素和三个孩子（或没有孩子），一个3结点要么没
有孩子，要么具有3个孩子。如果某个3结点有孩子的话，左子树包含小于较小元素
的元素，右子树包含大于较大元素的元素，中间子树包含介于两元素之间的元素。
并且2-3树中所有的叶子都在同一层次上。如图8-8-2所示，就是一棵有效的
2-3树。
事实上，2-3树复杂的地方就在于新结点的插入和已有结点的删除。毕竞，每个
结点可能是2结点也可能是3结点，要保证所有叶子都在同一层次，是需要进行一番
复杂操作的。
343
---
## Page 368
大话数据结
2结点，有一个元素8和两个子树，
左子树4小于8，右子树12、14大于8
3结点，有两个元素12、14
和三个子树，左子树9、10
小于12，右子树15大于14，
中子树13介于12与14之间
12
14
6
7
9]
10
13
15
2-3树所有叶子都在同一层次
图8-8-2
1.2-3树的插入实现
对于2-3树的插入来说，与二叉排序树相同，插入操作一定是发生在叶子结点
上。可与二叉排序树不同的是，2-3树插入一个元素的过程有可能会对该树的其余结
构产生连锁反应。
2-3树插入可分为三种情况。
1）对于空树，插入一个2结点即可，这很容易理解。
2）插入结点到一个2结点的叶子上。应该说，由于其本身就只有一个元素，所以
只需要将其升级为3结点即可。如图8-8-3所示20。我们希望从左图的2-3树
中插入元素3，根据遍历可知，3比8小、比4小，于是就只能考虑插入到叶
子结点1所在的位置，因此很自然的想法就是将此结点变成一个3结点，即
右图这样完成插入操作。当然，要视插入的元素与当前叶子结点的元素比较大
小后，决定谁在左谁在右。例如，若插入的是0，则此结点就是“0”在左
“1”在右了。
8
8
1214
1214
67)
910
13
67
910
（13）(15
图8-8-3
注”：为了对树结构更清晰的表达，将图8-8-2的结点用88.3的左图简化形式表示。
344
---
## Page 369
第8章查找
3）要往3结点中插入一个新元素。因为3结点本身已经是2-3树的结点最大容
量（已经有两个元素），因此就需要将其拆分，且将树中两元素或插入元素的
三者中选择其一向上移动一层。复杂的情况也正在于此。
第一种情况，见图8-8-4，需要向左图中插入元素5。经过遍历可得到元素5比8
小比4大，因此它应该是需要插入在拥有6、7元素的3结点位置。问题就在于，6
和7结点已经是3结点，不能再加。此时发现它的双亲结点4是个2结点，因此考虑
让它升级为3结点，这样它就得有三个孩子，于是就想到，将6、7结点拆分，让6
与4结成3结点，将5成为它的中间孩子，将7成为它的右孩子，如图8-8-4的右图
所示。
8
8
（1214
46）
1214
（13（67（9101315
图 8-8-4
另一种情况，如图8-8-5所示，需要向左图中插入元素11。经过遍历可得到元素
11比12、14小比9、10大，因此它应该是需要插入在拥有9、10元素的3结点位
置。同样道理，9和10结点不能再增加结点。此时发现它的双亲结点12、14也是一
个3结点，也不能再插入元素了。再往上看，12、14结点的双亲，结点8是个2结
点。于是就想到，将9、10拆分，12、14也拆分，让根结点8升级为3结点，最终
形成如图8-8-5的右图样子。
（812）
46
（1214）
（46）
(10)
(14)
图 8-8-5
再来看个例子，如图8-8-6所示，需要在左图中插入元素2。经过遍历可得到元素
2比4小、6比1大，因此它应该是需要插入在拥有1、3元素的3结点位置。与上
例一样，你会发现，1、3结点，4、6结点都是3结点，都不能再插入元素了，再往
上看，8、12结点还是一个3结点，那就意味着，当前我们的树结构是三层已经不能
满足当前结点增加的需要了。于是将1、3拆分，4、6拆分，连根结点8、12也拆
分，最终形成如图8-8-6的右图样子。
345
---
## Page 370
大调数据结栏
2
①
图 8-8-6
通过这个例子，也让我们发现，如果2-3树插入的传播效应导致了根结点的拆
分，则树的高度就会增加。
2.2-3树的删除实现
对于2-3树的删除来说，如果对前面插入的理解足够到位的话，应该不是难事
了。2-3树的删除也分为三种情况。与插入相反，我们从3结点开始说起。
1）所删除元素位于一个3结点的叶子结点上，这非常简单，只需要在该结点处删
除该元素即可，不会影响到整棵树的其他结点结构。如图8-8-7所示，删除元
素9，只需要将此结点改成只有元素10的2结点即可。
8
8
12
1
15
10
(13)
(15
图8-8-7
2）所删除的元素位于一个2结点上，即要删除的是一个只有一个元素的结点。如
果按照以前树的理解，删除即可，可现在的2-3树的定义告诉我们这样做是不
可以的。比如图8-8-8所示，如果我们删除了结点1，那么结点4本来是一个
2结点（它拥有两个孩子），此时它就不满足定义了。
除1后，此结点不满足
8
有两个孩子的2结点定文
（1214）
67
（910）
③15
图8-8-8
因此，对于删除叶子是2结点的情况，我们需要分四种情形来处理。
情形一，此结点的双亲也是2结点，且拥有一个3结点的右孩子。如图8-8-9所
346
---
## Page 371
第8章查找
示，删除结点1，那么只需要左旋，即6成为双亲，4成为6的左孩子，7是6的右
孩子。
8
12
12
67
910
（13）
7
910）（13（15
图 8-8-9
情形二，此结点的双亲是2结点，它的右孩子也是2结点。如图8-8-10所示，此
时删除结点1，如果直接左旋会造成没有右孩子，因此需要对整棵树变形，办法就
是，我们目标是让结点7变成3结点，那就得让比7稍大的元素8下来，随即就得让
比元素8稍大的元素9补充结点8的位置，于是就有了图8-8-10的中间图，于是再
用左旋的方式，变成右图结果。
8
14
10
(13)
(15
810
1③15
图8-8-10
情形三，此结点的双亲是一个3结点。如图8-8-11所示，此时删除结点10，意
味着双亲12、14这个结点不能成为3结点了，于是将此结点拆分，并将12与13合
并成为左孩子。
1213
15
图8-8-11
情形四，如果当前树是一个满二叉树的情况，此时删除任何一个叶子都会使得整
棵树不能满足2-3树的定义。如图8-8-12所示，删除叶子结点8时（其实删除任何一
个结点都一样），就不得不考虑要将2-3的层数减少，办法是将8的双亲和其左子树6
合并为一3个结点，再将14与9合并为3结点，最后成为右图的样子。
347
---
## Page 372
大话
(13)
15
图8-8-12
3）所删除的元素位于非叶子的分支结点。此时我们通常是将树按中序遍历后得到
此元素的前驱或后继元素，考虑让它们来补位即可。
如果我们要删除的分支结点是2结点。如图8-8-13所示我们要删除4结点，分析
后得到它的前驱是1后继是6，显然，由于6、7是3结点，只需要用6来补位即
可，如图8-8-13右图所示。
8
8
12
14
12
1
67
10
7
910
13
15
图8-8-13
如果我们要删除的分支结点是3结点的某一元素，如图8-8-14所示我们要删除
12、14结点的12，此时，经过分析，显然应该是将是3结点的左孩子的10上升到
删除位置合适。
8