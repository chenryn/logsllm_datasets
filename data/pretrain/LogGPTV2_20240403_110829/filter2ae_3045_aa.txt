虽然前面我已经写了一篇文章，“总结”了一些rmi的攻击类型，那篇文章我只是介绍了攻击方法，但是原理我不是很清楚，而且也不是太全。最近花了一些时间，调试了代码，算是大致搞清楚了rmi的具体流程，并写了一个工具
[attackRmi](https://github.com/waderwu/attackRmi)
。这个工具使用socket模拟rmi协议直接发包，比直接调用java相关函数方便不少。为了搞懂rmi协议，还是花了一些力气。
本文会包含一下内容
  * RMI 协议介绍
  * RMI 攻击面
  * attackRmi 实现
## RMI 协议介绍
关于RMI已经有不少文章总结的比较全了，感谢各位的分享。比如
  * 
  * 
  * 
他们基本都参考了
  * 
  * 
然后这两篇文章基本上都是来自这篇blackhat
  * 
“客户端”：这里指的是主动发请求的
“服务端”：这里指的是接收处理请求的
下面贴了一些调用栈，方便大家自己下断点自己调试，要想搞清楚还得自己动手调试。
服务端处理请求主要包括三种Implement
  * RegistryImpl_Skel
    * 主要是和registry相关的一些处理，主要是处理bind，unbind，rebind，list，lookup等请求
    * 调用栈
        dispatch:129, RegistryImpl_Skel (sun.rmi.registry)
    oldDispatch:469, UnicastServerRef (sun.rmi.server)
    dispatch:301, UnicastServerRef (sun.rmi.server)
    ......
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
  * DGCImpl_Skel
    * 主要处理DGC请求
调用栈
        dispatch:88, DGCImpl_Skel (sun.rmi.transport)
    oldDispatch:469, UnicastServerRef (sun.rmi.server)
    dispatch:301, UnicastServerRef (sun.rmi.server)
    ......
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
  * 还有一类自己写的Implement
    * 处理自定义方法的调用
调用栈
        sayHello:8, HelloImpl (com.wu)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    dispatch:357, UnicastServerRef (sun.rmi.server)
    ......
    serviceCall:196, Transport (sun.rmi.transport)
    handleMessages:573, TCPTransport (sun.rmi.transport.tcp)
下面我从网络数据包的角度分析一下RMI协议。
按照blackhat上的那篇，从“客户端” 发出的协议报文一般开头是这样的。
这些都是tcp的data部分，tcp那层省略了。
红色标记的部分是序列化数据。
关于具体的协议只找到了这个简略的文档。
  * operation
    * call
      * 0x50
    * ping
      * 0x52
    * DgcAck
      * 0x54
  * objid 是个ObjID的实例
对于RegistryImpl_Skel 和 DGCImpl_Skel 的Objid是固定的，对于自己写的Implementde
Objid是随机生成的，这个需要事先通过lookup获取
    * RegistryImpl_Skel
      * `new ObjID(0)`
    * DGCImpl_Skel
      * `new ObjID(2)`
  * num
在RegistryImpl_Skel中分别对应bind，list，lookup，rebind，unbind这5种操作
    * bind
      * 0
    * list
      * 1
    * lookup
      * 2
    * rebind
      * 3
    * unbind
      * 4
在DGCImpl_Skel中分别对应clean和dirty这两种操作
    * clean
      * 0
    * dirty
      * 1
在自己写的implement中，num必须设为一个负数，没有具体的含义
  * hash
    * 在RegistryImpl_Skel情况下为interfaceHash是个固定值
      * 4905912898345647071L
    * 在DGCImpl_Skel情况下也是interfaceHash是个固定值
      * -669196253586618813L
    * 在自己写的Implement中为自己写的Class中方法签名的sha1
下面介绍一下如何计算自己实现方法的对应的hash。首先要了解java的方法签名。
参考这个 
    Signature    Java Type
    Z    boolean
    B    byte
    C    char
    S    short
    I    int
    J    long
    F    float
    D    double
    V    void
    L fully-qualified-class ;    fully-qualified-class
    [ type   type[]
比如下面sayHello这个method的签名就是`sayHello(Ljava/lang/String;)Ljava/lang/String;`
    public interface HelloInter extends Remote {
        String sayHello(String name) throws RemoteException;
    }
格式就是`methodName(params)return`
然后从代码里扒拉出了通过上面的签名计算hash的代码
具体见
这个文件
    public static long computeMethodHash(String s) {
            long hash = 0;
            ByteArrayOutputStream sink = new ByteArrayOutputStream(127);
            try {
                MessageDigest md = MessageDigest.getInstance("SHA");
                DataOutputStream out = new DataOutputStream(new DigestOutputStream(sink, md));
                out.writeUTF(s);
                // use only the first 64 bits of the digest for the hash
                out.flush();
                byte hasharray[] = md.digest();
                for (int i = 0; i < Math.min(8, hasharray.length); i++) {
                    hash += ((long) (hasharray[i] & 0xFF)) << (i * 8);
                }