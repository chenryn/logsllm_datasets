title:A Financial Institution's Legacy Mainframe Access Control System in
Light of the Proposed NIST RBAC Standard
author:Andrew D. Marshall
A Financial Institution’s Legacy Mainframe Access Control System in Light of
the Proposed NIST RBAC Standard
Andrew D. Marshall
TD Bank Financial Group
275 Dundas Street
London, Ontario, Canada
PI:EMAIL
Abstract
In this paper we describe a mainframe access control
system (DENT) and its associated delegated administration
tool (DSAS) that were used in a ﬁnancial institution for over
20 years to control access to banking transaction products.
The ﬁr st part of this paper describes the design and oper-
ation of DENT/DSAS as an example of a long-lived access
control system in a ﬁnancial institution.
A standard for Role-Based Access Control (RBAC) has
recently been proposed by the United States National Insti-
tute of Standards and Technology (NIST). The second part
of this paper discusses how the functionality of DENT/DSAS
could be achieved by applying its principles of operation
within the NIST model. In so doing we also evaluate the
proposed standard by validating it against the requirements
embodied in a successful access control system.
We conclude with some observations about the design
of DENT/DSAS and suggestions for changes in the pro-
posed RBAC standard to accommodate some features of
DENT/DSAS that it does not appear to support.
1. Introduction
The The Toronto-Dominion Bank (TD)
is one of
Canada’s largest ﬁnancial
institutions. On February 1,
2000, it acquired the assets of CT Financial Services (CT),
which operated a trust company and related ﬁnancial ser-
vices businesses under the name Canada Trust. With the
purchase TD acquired a portfolio of software that consti-
tuted the banking systems of the former Canada Trust. As a
consequence of system integration decisions driven by busi-
ness requirements, much of the CT software portfolio has
been or shortly will be retired, including the access control
system described in this paper.
CT’s mainframe banking software included a number of
“product systems”, each of which implemented a particu-
lar product or family of products. For example, the Savings
system implemented traditional savings accounts, and the
Mortgage system implemented mortgages. All the banking
product systems ran in a common transactional environment
using IBM’s Customer Information Control System (CICS).
Around 1978, an access control system called “Data Entry”
was written as a front end for CICS-based transactional pro-
grams1. Developers of product systems were provided with
code templates which enabled them to wrap each “business
function” (i.e., one or more transaction calls and associated
business rules) with a call to DENT’s access control rou-
tine. DENT thus provided a common access control mech-
anism across all product systems. Each business function
protected by DENT had an associated “keyword”. DENT
made its access control decisions by determining whether
the user requesting access to a business function possessed
the corresponding keyword in his or her “security proﬁle”.
A user’s security proﬁle,
then, was a list of products which
the user was allowed to run, and a list of keywords for each
product representing the product-speciﬁc business functions
to which the user had been granted access. DENT’s secu-
rity database contained the security proﬁles for all users, as
well as some related tables (e.g., a list of all products and
all valid keywords).
One of the products controlled by DENT was “Data Se-
curity Administration System” (DSAS), which was the ad-
ministrative tool for DENT’s security database. DSAS was
used most often by retail bank branch managers to grant and
deny access to business functions for their employees with-
out intervention by a central security department. DSAS up-
dated the DENT security database; DENT read its security
database to enforce the access rights set up by the users of
DSAS. The relationships among the DENT/DSAS compo-
1DENT also provided a number of other common functions, including
data presentation, journalling, logging, etc., but we are only concerned here
with its access control component.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Figure 1. DENT/DSAS component relationships
nents are shown in Figure 1. The programs and databases in
DENT/DSAS were protected from unauthorized access out-
side of that mediated by DENT/DSAS by the native main-
frame security system, which was Computer Associates’
ACF2 and then IBM’s RACF. In general, the native main-
frame security system was used to guard access to the ﬁles
and programs of the product systems; DENT was used to
grant ﬁner -grained access to speciﬁc banking functions im-
plemented in these systems.
A proposed standard for Role-Based Access Control
(RBAC) has been put forward by the United States National
Institute of Standards and Technology (NIST). The pro-
posed standard has generated interest within TD and other
large corporations (see, for example, the theme of the Oc-
tober 2001 meeting of the Network Applications Consor-
tium, www.netapps.org) facing the headaches associ-
ated with managing the access rights of thousands of users
to thousands of business functions. The role of a “role” as
an intermediary between users and permissions offers sim-
pliﬁed processes for user rights administration. By compar-
ing the proposed RBAC standard against the functionality
embedded in a successful access control system, we believe
we can offer suggestions that will make the RBAC standard
even more appealing and useful within ﬁnancial institutions.
The rest of this paper is organized as follows. Section 2
presents an overview of DENT, the legacy access control
system, and DSAS, its delegated administration tool. Sec-
tion 3 outlines the software developer’s view of DENT. We
give a brief overview of the NIST’s proposed RBAC stan-
dard in Section 4. Section 5 demonstrates the power of
the NIST RBAC standard by describing a scheme through
which it could be applied to offer much of the functional-
ity of DENT/DSAS. Finally, in Section 6, we conclude with
some observations on the design of DENT/DSAS and with
some suggestions for changes to the proposed NIST RBAC
standard.
2. Overview of DENT and DSAS
The environment protected by DENT was a collection
of products, each one responsible for one part of the overall
banking functions offered by CT. Each product had a “prod-
uct code”, e.g., SVG for the Savings product, MTG for the
Mortgage product, etc. Each product was associated with a
business unit within CT that was responsible for the strat-
egy, marketing, and business rules for the product. Each
such business unit would designate one or more individuals
within the unit as “product owners” for the product. The
software for each product was designed and maintained by
developers in the Business Systems department.
Associated with each product was a set of keywords
(character strings, chosen where possible to have mnemonic
value). Each keyword was used to protect a “business func-
tion” within a product. By “business function”, we are re-
ferring to a speciﬁc CICS transaction and the associated
business rules and context around the transaction. The
designation of business functions that were of a sensitive
enough nature to require access control was the job of the
product’s developer, in concert with the product owner(s).
For example, most products offered an Inquiry function, ac-
cess to which was typically controlled by the presence (or
absence) of an INQ keyword in a user’s security proﬁle .
Note that keywords were product speciﬁc:
two products
could have the same keyword, with each controlling access
to vastly different business functions in the products.
Keywords were divided into two classes: “normal” and
“restricted”. When a keyword in the normal class was re-
quested for a user’s proﬁle it was automatically added to
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
the proﬁle. A keyword in the restricted class required ap-
proval from the product’s owner before it was added to a
user’s proﬁle. The keyword mechanism was used to denote
product owners: a product owner for product FOO would
have the keyword KYAPFOO in his or her security proﬁl e
for product FOO.
As an example of the distinction between normal and
restricted keywords, consider a simpliﬁed version of the
“Deposit” business function of the Savings product. Sup-
pose that for legal reasons the Savings business unit dis-
tinguished between two kinds of deposits:
those under
$10,000, and those of $10,000 or more. The logic of the de-
posit business function would be split into two cases, each
depending on a different keyword. The normal keyword,
DEP, would apply to deposits of less than $10,000, and
the restricted keyword, HIDEP, would permit the holder to
process deposits of $10,000 or more. The Savings product
owner would freely grant the DEP keyword to any user, but
would not grant users the HIDEP keyword until it had ver-
iﬁed that the user had met the requirements of the Savings
business unit.
One of the products controlled by DENT was DSAS
(Data Security Administration System), the delegated ad-
ministration tool used by managers to assign product key-
words to the company employees under their direct control.
The philosophy employed by the designers of DENT/DSAS
was one of centralized oversight with decentralized admin-
istration. Keywords were created by a central authority (the
DSAS Administrator; see Section 3) but were assigned to
users by local decision makers. The rationale behind this
philosophy was that local managers were in the best posi-
tion to determine the access needs of their employees, but
the keyword creation and deletion process required central
coordination.
To be able to run DSAS, a user had to have the DSAS
product in his or her security proﬁle and the proﬁle had to
include the appropriate DSAS keywords. The DSAS key-
word, BRAUTH, permitted its holder to create security pro-
ﬁles within the holder’s branch (a branch number was an
attribute of each user’s identity). Someone holding this key-
word could automatically add normal keywords to a user’s
proﬁle and generate a request (to a product owner) to add a
restricted keyword to a user’s proﬁle.
3. The Developer’s View of DENT
We now describe the steps involved in developing prod-
ucts that ran under the DENT system.
1. The product owner, in cooperation with the developer
assigned to the product, developed a plan for adding a
new business function to the product (or changing an
existing business function).
MOVE LOW-VALUES
MOVE DTE-TRANS-COMP-A
MOVE ’KEYUPDT ’
MOVE SPACE
MOVE SPACE
MOVE ’OPER’
TO DE059-INTERFACE.
TO DE059-PRODUCT.
TO DE059-KEYWORD.
TO DE059-INTERBR-IND.
TO DE059-BYPASS-ABEND-IND.
TO DE059-REQUEST-CODE.
EXEC CICS LINK
PROGRAM(’DE059O’)
COMMAREA(DE059-COMMON-AREA)
LENGTH(DE059-COMM-LENGTH)
RESP(W-CICS-RESPONSE)
END-EXEC
EVALUATE W-CICS-RESPONSE
WHEN DFHRESP(NORMAL)
IF DE059-KEYWORD-MATCHED
PERFORM ...
ELSE
<---
executed ok
MOVE DE059-RETURN-MESSAGE ....
END-IF
WHEN OTHER
.....
END-EVALUATE
<--- other error
Figure 2. Keyword check library call template.
2. The developer determined whether it would be appro-
priate to protect the new business function with an ex-
isting product keyword. If so, step 3 was skipped.
3. The developer
sent
a
request
The request
to the DSAS
Administrator—the person within the company’s
Data Security team responsible for maintaining the
DENT/DSAS security database—for a new product
keyword.
included the name of the
the name of the new keyword, a short
product,
description, an indication whether the keyword was
normal or restricted, and guidelines for its assignment
to users. Normally, the DSAS Administrator granted
the request and added the keyword to the list of
keywords for the product maintained in the DENT
security database.
4. The developer wrote (or modiﬁed) the COBOL code
needed to implement the desired new or changed busi-
ness function. The code included a call to a library
routine to check whether the user executing the code
had the designated keyword in his or her proﬁle. The
general form of the library routine calling sequence is
given in Figure 2.
The business rules around some business functions re-
quired a slightly more complicated approach. For various
reasons (e.g., the sensitivity of the transaction, the user’s
transaction limits or job level) some business functions re-
quired a Dual Control security policy to be applied to them.
As an example, consider the “Correction” business function
in the Savings product. This function allowed transactions
made in error to be reversed. Because of its power, the Cor-
rection function required the participation of two people: an
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
initiator and an approver. The code implementing the Cor-
rection function was structured as follows:
1. Is the keyword for the Correction function of the Sav-
ings product (e.g., SVG, COR) in the initiator’s security
proﬁle?2
2. A routine was then called to pop up a request for a
supervisor override on the initiator’s display. At this
point, the initiator would call an approver (supervisor)
to the initiator’s terminal, who would authenticate to
the system by supplying his or her logon id and pass-
word.
3. The approver’s proﬁle was then checked for the pres-
ence of a Correction override keyword for the Savings
product (say, COROVR). If the approver held the key-
word, then the transaction continued, otherwise, it was
aborted.
4. Overview of the NIST Proposed RBAC Stan-
dard
Space limitations do not permit a full exposition of the
RBAC standard proposed by NIST. The diagram in Fig-
ure 3 shows the entities and relationships and each of them
is brieﬂy described in the chart below. For more details, the
reader is directed to the standard [2].
Entity Description
USERS Set denoting the users whose access privileges are
to be managed.
ROLES Set of roles deﬁned for the organization.
PRMS Set of Permissions. Permissions are deﬁned as ab-
stract operations on objects.
OBS Set of objects used to construct PRMS.
OPS Set of abstract operations used to construct PRMS.
UA (User Assignment) A many-to-many mapping between
Users and Roles: one user may be assigned many roles,
and one role may be assigned to many users.
PA (Permission Assignment) A many-to-many mapping
between ROLES and PRMS. A given role may have
(is likely to have) more than one permission, and one
permission may be assigned to multiple roles.
2Note that, strictly speaking, the initiator could not have made it this
far without possessing the COR keyword, as the screen display routines
generated by DENT—another of its functions—used the user’s security
proﬁle to generate the list of transaction codes available to the user. The
display routine only displayed transaction codes for which the user had
permission (i.e., possessed the corresponding keyword).
SESSIONS Set denoting all the active sessions. A session
is a mapping of one user to one or more roles. Each
session is associated with only one user; a user may
have more than one active session.
user sessions Mapping of a user, u, onto a set of sessions.
session roles Mapping of a session, s, onto a set of roles.
The entities described above are those of “Core RBAC”.
The standard also offers “Hierarchical RBAC”, which in-
troduces role hierarchies, and “Constrained RBAC”, which
adds constructs to support Static and Dynamic Separation
of Duty relations.
5. Modelling DENT/DSAS in the RBAC Model
In this section we demonstrate how most features of
DENT/DSAS’s operation could be modelled in the pro-
posed NIST RBAC standard. The presentation is structured
from the point of view of an organization migrating from a
a legacy access control system to one based on the proposed
NIST RBAC standard. We deﬁne the new entities, those in
the RBAC standard, in terms of those in the legacy system.
We also identify where it is not possible within the RBAC-
based system to completely implement concepts or func-
tionality from the legacy system. As an example through-
out this section, we will be referring to the sample DENT
security database in Table 1. We begin by formalizing what
we have so far referred to as the DENT security database.
• U, a set of users.
• P , a set of product codes.
• We represent a keyword k, associated with product
p, as a tuple (p, k). K = KN ∪ KR, is the set of
keywords, where KN is the set of all normal key-
words, KR is the set of all restricted keywords, and
KN ∩ KR = ∅.
• S represents the users’ security proﬁles.