# A Financial Institution's Legacy Mainframe Access Control System in Light of the Proposed NIST RBAC Standard

**Author: Andrew D. Marshall**

**Affiliation: TD Bank Financial Group, 275 Dundas Street, London, Ontario, Canada**

**Email: [PI:EMAIL]**

## Abstract
This paper examines a mainframe access control system (DENT) and its associated delegated administration tool (DSAS), which have been in use at a financial institution for over 20 years to manage access to banking transaction products. The first part of the paper provides an overview of the design and operation of DENT/DSAS as a long-lived access control system in a financial context.

The United States National Institute of Standards and Technology (NIST) has recently proposed a standard for Role-Based Access Control (RBAC). The second part of this paper explores how the functionality of DENT/DSAS can be achieved within the NIST RBAC model. This analysis also evaluates the proposed standard by validating it against the requirements embodied in a successful access control system.

We conclude with observations on the design of DENT/DSAS and suggestions for modifications to the proposed RBAC standard to accommodate features that are not currently supported.

## 1. Introduction
Toronto-Dominion Bank (TD) is one of Canadaâ€™s largest financial institutions. On February 1, 2000, TD acquired the assets of CT Financial Services (CT), including its trust company and related financial services businesses, known as Canada Trust. With this acquisition, TD inherited a portfolio of software that constituted the banking systems of the former Canada Trust. Due to system integration decisions driven by business requirements, much of the CT software portfolio, including the access control system described in this paper, has been or will soon be retired.

CT's mainframe banking software included several "product systems," each implementing a specific product or family of products. For example, the Savings system managed traditional savings accounts, and the Mortgage system handled mortgages. All these product systems operated in a common transactional environment using IBM's Customer Information Control System (CICS).

In 1978, an access control system called "Data Entry" (DENT) was developed as a front end for CICS-based transactional programs. Product system developers were provided with code templates to wrap each "business function" (one or more transaction calls and associated business rules) with a call to DENT's access control routine. DENT provided a common access control mechanism across all product systems. Each protected business function had an associated "keyword." DENT made access control decisions by checking whether the user requesting access to a business function possessed the corresponding keyword in their "security profile."

A user's security profile consisted of a list of products they were allowed to run and a list of keywords for each product, representing the product-specific business functions to which the user had access. DENT's security database contained the security profiles for all users, along with related tables such as a list of all products and valid keywords.

One of the products controlled by DENT was the "Data Security Administration System" (DSAS), the administrative tool for DENT's security database. DSAS was primarily used by retail bank branch managers to grant and deny access to business functions for their employees without intervention from a central security department. DSAS updated the DENT security database, and DENT read this database to enforce the access rights set up by DSAS users. The relationships among the DENT/DSAS components are shown in Figure 1.

The programs and databases in DENT/DSAS were protected from unauthorized access outside of that mediated by DENT/DSAS by the native mainframe security system, which was initially Computer Associates' ACF2 and later IBM's RACF. Generally, the native mainframe security system was used to guard access to the files and programs of the product systems, while DENT was used to grant finer-grained access to specific banking functions implemented in these systems.

The proposed NIST standard for Role-Based Access Control (RBAC) has generated interest within TD and other large corporations. By comparing the proposed RBAC standard against the functionality embedded in a successful access control system, we believe we can offer suggestions to make the RBAC standard even more appealing and useful in financial institutions.

The rest of this paper is organized as follows. Section 2 presents an overview of DENT and DSAS. Section 3 outlines the software developer's view of DENT. We provide a brief overview of the NIST's proposed RBAC standard in Section 4. Section 5 demonstrates the power of the NIST RBAC standard by describing a scheme through which it could be applied to offer much of the functionality of DENT/DSAS. Finally, in Section 6, we conclude with some observations on the design of DENT/DSAS and suggestions for changes to the proposed NIST RBAC standard.

## 2. Overview of DENT and DSAS
The environment protected by DENT was a collection of products, each responsible for a part of the overall banking functions offered by CT. Each product had a "product code," such as SVG for the Savings product and MTG for the Mortgage product. Each product was associated with a business unit within CT that was responsible for the strategy, marketing, and business rules for the product. Each business unit designated one or more individuals as "product owners" for the product. The software for each product was designed and maintained by developers in the Business Systems department.

Each product was associated with a set of keywords (character strings, chosen where possible to have mnemonic value). Each keyword was used to protect a "business function" within a product. A "business function" referred to a specific CICS transaction and the associated business rules and context around the transaction. The designation of business functions that required access control was the responsibility of the product's developer, in consultation with the product owner(s). For example, most products offered an Inquiry function, access to which was typically controlled by the presence (or absence) of an INQ keyword in a user's security profile.

Keywords were divided into two classes: "normal" and "restricted." Normal keywords were automatically added to a user's profile when requested, while restricted keywords required approval from the product owner before being added. The keyword mechanism was also used to denote product owners: a product owner for product FOO would have the keyword KYAPFOO in their security profile for product FOO.

For example, consider a simplified version of the "Deposit" business function of the Savings product. Suppose the Savings business unit distinguished between deposits under $10,000 and those of $10,000 or more. The logic of the deposit business function would be split into two cases, each depending on a different keyword. The normal keyword, DEP, would apply to deposits of less than $10,000, and the restricted keyword, HIDEP, would permit the holder to process deposits of $10,000 or more. The Savings product owner would freely grant the DEP keyword to any user but would not grant the HIDEP keyword until verifying that the user met the requirements of the Savings business unit.

One of the products controlled by DENT was DSAS (Data Security Administration System), the delegated administration tool used by managers to assign product keywords to employees under their direct control. The philosophy behind DENT/DSAS was centralized oversight with decentralized administration. Keywords were created by a central authority (the DSAS Administrator) but assigned to users by local decision-makers. This approach was based on the rationale that local managers were best positioned to determine the access needs of their employees, while the keyword creation and deletion process required central coordination.

To run DSAS, a user needed to have the DSAS product in their security profile and the appropriate DSAS keywords. The DSAS keyword, BRAUTH, permitted the holder to create security profiles within their branch. Someone holding this keyword could automatically add normal keywords to a user's profile and generate a request to add a restricted keyword to a user's profile.

## 3. The Developer's View of DENT
We now describe the steps involved in developing products that ran under the DENT system:

1. **Planning**: The product owner, in cooperation with the assigned developer, developed a plan for adding a new business function to the product (or changing an existing business function).
2. **Keyword Determination**: The developer determined whether it was appropriate to protect the new business function with an existing product keyword. If so, step 3 was skipped.
3. **Keyword Request**: The developer sent a request to the DSAS Administrator for a new product keyword. The request included the name of the product, the name of the new keyword, a short description, an indication of whether the keyword was normal or restricted, and guidelines for its assignment to users. The DSAS Administrator typically granted the request and added the keyword to the list of keywords for the product maintained in the DENT security database.
4. **Code Implementation**: The developer wrote (or modified) the COBOL code needed to implement the desired new or changed business function. The code included a call to a library routine to check whether the user executing the code had the designated keyword in their profile. The general form of the library routine calling sequence is given in Figure 2.

Some business functions required a more complex approach, such as a Dual Control security policy. For example, the "Correction" business function in the Savings product allowed transactions made in error to be reversed. Due to its power, the Correction function required the participation of two people: an initiator and an approver. The code implementing the Correction function was structured as follows:
1. Check if the keyword for the Correction function of the Savings product (e.g., SVG, COR) was in the initiatorâ€™s security profile.
2. Call a routine to pop up a request for a supervisor override on the initiatorâ€™s display. The initiator would then call an approver (supervisor) to their terminal, who would authenticate to the system by supplying their logon ID and password.
3. Check the approverâ€™s profile for the presence of a Correction override keyword for the Savings product (say, COROVR). If the approver held the keyword, the transaction continued; otherwise, it was aborted.

## 4. Overview of the NIST Proposed RBAC Standard
Space limitations do not permit a full exposition of the RBAC standard proposed by NIST. The diagram in Figure 3 shows the entities and relationships, and each is briefly described below. For more details, the reader is directed to the standard [2].

- **USERS**: Set denoting the users whose access privileges are to be managed.
- **ROLES**: Set of roles defined for the organization.
- **PRMS**: Set of Permissions. Permissions are defined as abstract operations on objects.
- **OBS**: Set of objects used to construct PRMS.
- **OPS**: Set of abstract operations used to construct PRMS.
- **UA (User Assignment)**: A many-to-many mapping between Users and Roles: one user may be assigned many roles, and one role may be assigned to many users.
- **PA (Permission Assignment)**: A many-to-many mapping between ROLES and PRMS. A given role may have (and is likely to have) more than one permission, and one permission may be assigned to multiple roles.
- **SESSIONS**: Set denoting all the active sessions. A session is a mapping of one user to one or more roles. Each session is associated with only one user; a user may have more than one active session.
- **user sessions**: Mapping of a user, u, onto a set of sessions.
- **session roles**: Mapping of a session, s, onto a set of roles.

The entities described above are those of "Core RBAC." The standard also offers "Hierarchical RBAC," which introduces role hierarchies, and "Constrained RBAC," which adds constructs to support Static and Dynamic Separation of Duty relations.

## 5. Modelling DENT/DSAS in the RBAC Model
In this section, we demonstrate how most features of DENT/DSAS's operation could be modeled within the proposed NIST RBAC standard. The presentation is structured from the perspective of an organization migrating from a legacy access control system to one based on the proposed NIST RBAC standard. We define the new entities, those in the RBAC standard, in terms of those in the legacy system. We also identify where it is not possible within the RBAC-based system to completely implement concepts or functionality from the legacy system.

As an example throughout this section, we will refer to the sample DENT security database in Table 1. We begin by formalizing what we have so far referred to as the DENT security database:

- **U**: A set of users.
- **P**: A set of product codes.
- **K**: A set of keywords, where K = KN âˆª KR. KN is the set of all normal keywords, and KR is the set of all restricted keywords, with KN âˆ© KR = âˆ….
- **S**: Represents the usersâ€™ security profiles.

By mapping these entities to the RBAC model, we can achieve the following:

- **Users (U)**: Corresponds directly to the USERS entity in the RBAC model.
- **Roles (R)**: Can be derived from the combination of product codes (P) and keywords (K). Each product and keyword combination can be treated as a role.
- **Permissions (PRMS)**: Corresponds to the business functions protected by the keywords. Each keyword represents a specific permission.
- **User Assignment (UA)**: Maps users to roles. In the DENT/DSAS system, this is represented by the security profiles (S).
- **Permission Assignment (PA)**: Maps roles to permissions. In the DENT/DSAS system, this is represented by the association of keywords with specific business functions.

While the RBAC model can effectively capture most of the functionality of DENT/DSAS, there are some features that may not be fully supported, such as the distinction between normal and restricted keywords and the dual control mechanisms. These features may require additional customization or extensions to the RBAC model.

## 6. Conclusion
This paper has provided an in-depth look at the DENT/DSAS access control system and its potential migration to the proposed NIST RBAC standard. We have demonstrated that the RBAC model can effectively capture the core functionalities of DENT/DSAS, but some features may require additional customization.

We conclude with some observations on the design of DENT/DSAS and suggestions for changes to the proposed NIST RBAC standard to better accommodate the unique features of the legacy system. Specifically, the RBAC standard could benefit from incorporating mechanisms to handle normal and restricted keywords, as well as dual control policies, to ensure a smooth transition for organizations with similar legacy systems.