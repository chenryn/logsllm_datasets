opcode can produce; including the eﬀects to registers and
memory locations directly addressed by opcodes as well as
the ﬂags register.
In addition to being particularly hard
to implement, emulation takes a single instruction and can
expand it to tens of instructions. Therefore, to avoid us-
ing ptrace and to eliminate the bulk of the inter-process
communication, we use a solution we call monitored direct
execution.
This optimized design attempts to retain the beneﬁts of
direct execution while eliminating the need for ptrace. The
information required to guide English generation is the same,
except we explore more eﬃcient ways to obtain such infor-
mation. Intuitively, what was formerly two processes is now
accomplished by one process that performs both tasks. This
is achieved by maintaining two sets of machine state and
switching between them to change execution roles. Essen-
tially, both the watcher and the execution “programs” have
their own registers, stack, and memory which we call their
state. They “share” only the memory associated with state
switching and the candidate solution.
Switching is accomplished by using two pieces of stub code
that saves the state of the watcher program and restores the
state of the execution program.
Intuitively, we use three
separate stacks to minimize the context switch penalty be-
tween kernel and user space that arose in the unoptimized
case. The ﬁrst stack is the original watcher stack (indeed,
the only “oﬃcial” stack), the second is an intermediate stack,
and the third is the execution program’s stack. The interme-
diate stack houses the information necessary to restore the
execution process. The two pieces of stub code mentioned
previously use this stack to either save or restore the execu-
tor’s state. The third stack is simply a portion of memory
mapped to a static location. It is saved and restored after
each batch of executed instructions, keeping the contents
untouched during the watcher’s execution.
To boost performance even further, we also forgo single-
step execution. A key observation is that we only need infor-
mation at very speciﬁc points in the execution of a candidate
solution. Speciﬁcally, we only need to know the execution
path dictated by changes to the ﬂags register, as well as
when memory beyond the current point of candidate execu-
tion changes. As such, we pause to inspect execution on two
pause conditions. The ﬁrst is when the execution encoun-
ters a jump where EFLAGS could be aﬀected by a previous
instruction. We identiﬁed the conditions under which this
could be true by enumerating all the instructions that could
change the ﬂags:
i.e., all the arithmetic operations (e.g.,
inc, dec, add, imul) and logical operations (e.g., and, or).
(This analysis was made possible because of our earlier use of
ptrace.) The second pause condition is set in places where
we encounter instructions that can change memory; in our
implementation, and and add are the only such instructions.
Any operations between either of these pause conditions are
executed without intervention.
It is important to note that before the ﬁrst instructions
are executed and during each of the aforementioned pause
conditions, the watcher process examines upcoming instruc-
tions to avoid either of two undesirable scenarios. Speciﬁ-
cally, the execution process cannot be allowed to execute any
instructions that (i) may result in a crash, e.g., privileged
instructions, or (ii) result in unpredictable machine state,
e.g., by using unpredictable values from registers or mem-
ory. Thankfully, we can again take advantage of our experi-
ences using ptrace to enumerate and preemptively dismiss
any candidate solution containing either of these scenarios.
The result of these optimizations is that we can now rou-
tinely generate entire solutions in less than 1 hour on com-
531ASSEMBLY
OPCODE
ASCII
1
2
3
4
5
push %esp
push $20657265
imul %esi,20(%ebx),$616D2061
push $6F
jb short $22
push $20736120
push %ebx
je short $63
jb short $22
push %ebx
push $202E776F
push %esp
push $6F662065
jb short $6F
push %ebx
je short $63
je short $67
jnb short $22
inc %esp
jb short $77
popad
54
68 65726520
6973 20 61206D61
6A 6F
72 20
68 20617320
53
74 61
72 20
53
68 6F772E20
54
68 6520666F
72 6D
53
74 61
74 65
73 20
44
72 75
61
There is a major 
h as Star 
Show. The form
States Dru
a
3
4
2
Skip
Skip
Skip
1
There is a major center of economic activity, such as Star Trek, including The Ed 
Skip
Sullivan  Show.  The  former  Soviet  Union.  (cid:42)International  organization  participation 
Skip
Asian  Development  Bank,  established  in  the  United  States  Drug  Enforcement 
Skip
Administration,  and  the  Palestinian  territories,  the  International  Telecommunication 
5
Skip
Union, the ﬁrst ma...
Skip
Figure 9: Partial anatomy for an excerpt of an automatically
generated English encoding.
modity hardware with 4GB of RAM — almost a 12-fold
improvement over using ptrace.
6. EVALUATION
As a preface, we note that given the sensitivity of this
work, we purposely do not show complete samples of En-
glish shellcode. We believe that doing so would be irrespon-
sible, as the risks (i.e., helping the attackers) outweigh the
beneﬁts.
Figure 9 shows an annotated excerpt from an English-
encoded sample that simply calls exit(0). Notice that the
English-encodings we produce generally follow the form and
cadence of non-synthetic text. Since our generation engine is
merely a proof-of-concept, continued reﬁnement may further
reduce the prevalence of seemingly artiﬁcial phrases or sen-
tences. The full text is 2054 bytes in length. The segments
of text underneath the table with a grey background denote
portions of the shellcode that are passed over via jump in-
structions (and are therefore not executed).
In the table,
we depict the assembly, machine code, and ASCII-character
representations for the bolded (i.e., executed) segments.
Since our focus in this paper is to show that shellcode
need not be diﬀerent in structure than non-executable pay-
load data, we consider assessment of the quality of the En-
glish we generate outside the scope of this work.5 Instead,
for pedagogical reasons, we revisit a recent approach that is
based on using spectrum analysis to detect the presence of
executable code in network traﬃc in lieu of emulation [8].
The key assumption in that work is that the structure of ex-
ecutable content is statistically dissimilar from the structure
5Indeed, several conferences (e.g., the International Natural
Language Generation Conference) are devoted almost en-
tirely to that topic.
INSTRUCTION DISTRIBUTION
CONTENT TYPE
Windows Bind DLL Inject
Pexfnstenvsub-encoded
PexAlphaNum-encoded
Alpha2-encoded
English-encoded (Average)
Wikipedia Entry (Average)
Arithmetic
Stack
Load/Store
Logical
Transfer
Control
NOP
SSE
Privileged
MMX
Float
Interrupt
Other
Figure 10:
Instruction spectrum for various encodings of
the Windows Bind DLL Inject shellcode included in the Metas-
ploit framework. For comparison, we also “disassembled” 500
Wikipedia articles selected at random and 6 English shellocode
samples.
of non-executable data, and so argue that this can be used
to identify shellcode. By grouping opcodes into canonical
categories (e.g, push and pop instructions might be classi-
ﬁed as stack functions while and and or might be grouped
together with other logical operations), they posit that sim-
ilar ﬁletypes will have similar categorization patterns. Their
results indicate that data and plaintext ﬁles have instruction
spectrums that are characteristically diﬀerent from those of
executable code6.
... the result of the collapse of large portions of the three provinces to have a syntax which can be 
found in the case of Canada and the UK, for the carriage of goods were no doubt ﬁrst considered 
by the British, and the government, and the Soviet Union operated on the basis that they were...
... the US Navys interpretation of the state to which he was subsequently inﬂuenced by the new 
government was established in 1951, when the new constitution approved it you King, he now had 
the higher than that the M.G.u, and soul shouters like Diane. There's a mama maggot...  
... including the major justiﬁcations that the test led to his own. This is usually prepared by the 
infection of the Sinai to the back and the Star Destroyers in the parliament, by the speed of these 
books and the revival of environmental problems of their new Arab states of the Arctic as a more... 
Source Material: Wikipedia
... and they possess power to the effort she was especially valuable as the Union and that would 
have said, as to note that the goods, which the night that if ever I rode after the word Father upon 
His Church to claim that the peace that had permitted him the city are as a hand of one into...
... I thought of Mr. Crow and the Jews by the days of the C.Cs front garden which had ﬁrst to St 
Cyriacus. All of a theology in the setting in a human heart as the tale of this day. I have it to 
friendship and the States that the way the English of the St Lawrence seven miles of an adjutant...
Source Material: Project Gutenberg
1
2
3
4
5
Figure 11: Excerpts for alternative encodings of exit(0). The
instruction distribution are over the entire shellcode. Refer to the
key in Figure 10 for information about instruction categories.
Using the same categories, we classiﬁed each IA32 in-
struction and produced instruction spectrums for the Win-
dows Bind DLL Inject shellcode supplied with the Metas-
ploit framework, various encodings of the shellcode, and
Wikipedia articles selected at random. Figure 10 shows the
6We note that even using the same 13 instruction groups
in [8] we could not verify their results because of inconsis-
tencies and ambiguous statements in their manuscript.
532results after sorting each spectrum by category, highlighting
the distribution of instruction types in each ﬁle. Through
visual observation, it is easy to see that the Pexfnstenvsub
encoding of the Metasploit shellcode is not signiﬁcantly dif-
ferent than the unmodiﬁed shellcode. Alternatively, both
alphanumeric encodings are unlike the aforementioned sam-
ples and, additionally, have distributions that are most sim-
ilar to each other.
More importantly, notice that the instruction distribu-
tion of the English encoding is most like the instruction
distribution of the randomly chosen Wikipedia articles—
illuminating the diﬃculty of distinguishing English shellcode
without considering syntactic information. In particular, it
is not clear (at least to us), how to easily mitigate this threat
without considering the semantics of the input. We show ex-
cerpts from other samples we generated in Figure 11.
7. CONCLUSION
In this paper we revisit the assumption that shellcode need
be fundamentally diﬀerent in structure than non-executable
data. Speciﬁcally, we elucidate how one can use natural lan-
guage generation techniques to produce shellcode that is su-
perﬁcially similar to English prose. We argue that this new
development poses signiﬁcant challenges for inline payload-
based inspection (and emulation) as a defensive measure,
and also highlights the need for designing more eﬃcient tech-
niques for preventing shellcode injection attacks altogether.
8. ACKNOWLEDGEMENTS
We thank Bryan Hoﬀman, Ryan MacArthur, Scott Coull,
John McHugh, Ryan Gardner, and Charles Wright for many
insightful discussions. Thank you also to our anonymous re-
viewers for their invaluable comments and suggestions. This
work was funded in part by NFS grants CNS-0627611 and
CNS-0852649.
9. REFERENCES
[1] P. Akritidis, E. P. Markatos, M. Polychronakis, and
K. Anagnostakis. STRIDE: Polymorphic Sled Detection
through Instruction Sequence Analysis. In Proceedings of
the International Information Security Conference, 2005.
[2] K. Borders, A. Prakash, and M. Zielinski. Spector:
Automatically Analyzing Shell Code. Proceedings of the
Annual Computer Security Applications Conference, pages
501–514, 2007.
[3] E. Buchanan, R. Roemer, H. Shacham, and S. Savage.
When Good Instructions Go Bad: Generalizing
Return-Oriented Programming to RISC. In Proceedings of
ACM Conference on Computer and Communications
Security, Oct. 2008.
[4] C. Cowan, C. Pu, D. Maier, H. Hinton, P. Bakke,
S. Beattie, A. Grier, P. Wagle, and Q. Zhang. Stackguard:
Automatic Adaptive Detection and Prevention of
Buﬀer-overﬂow Attacks. In Proceedings of the USENIX
Security Symposium, pages 63–78, 1998.
[5] T. Detristan, T. Ulenspiegel, Y. Malcom, and M. S. V.
Underduk. Polymorphic Shellcode Engine Using Spectrum
Analysis. Phrack, 11(61), August 2003.
[6] T. Durden. Bypassing PaX ASLR Protection. Phrack,
11(59), July 2002.
[7] K2. ADMmutate. See
http://www.ktwo.ca/c/ADMmutate-0.8.4.tar.gz.
[8] I. Kim, K. Kang, Y. Choi, D. Kim, J. Oh, and K. Han. A
Practical Approach for Detecting Executable Codes in
Network Traﬃc. In Asia-Paciﬁc Network Operations and
Management Symposium, 2007.
[9] O. Kolesnikov, D. Dagon, and W. Lee. Advanced
Polymorphic Worms: Evading IDS by Blending in with
Normal Traﬃc. Technical Report GIT-CC-05-09, Georgia
Institute of Technology, 2005.
[10] G. MacManus and M. Sutton. Punk Ode: Hiding Shellcode
in Plain Sight. In Black Hat USA, 2006.
[11] Obscou. Building IA32 Unicode-Proof Shellcodes. Phrack,
11(61), August 2003.
[12] A. One. Smashing The Stack For Fun And Proﬁt. Phrack,
7(49), November 1996.
[13] A. Pasupulati, J. Coit, K. Levitt, S. F. Wu, S. H. Li, R. C.
Kuo, and K. P. Fan. Buttercup: on Network-based
Detection of Polymorphic Buﬀer Overﬂow Vulnerabilities.
In IEEE/IFIP Network Operation and Management
Symposium, pages 235–248, May 2004.
[14] U. Payer, P. Teuﬂ, and M. Lamberger. Hybrid Engine for
Polymorphic Shellcode Detection. In Proceedings of
Detection of Intrusions and Malware & Vulnerability
Assessment, pages 19–31, 2005.
[15] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos.
Network-level Polymorphic Shellcode Detection using
Emulation. In Proceedings of Detection of Intrusions and
Malware & Vulnerability Assessment, pages 54–73, 2006.
[16] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos.
Emulation-based Detection of Non-self-contained
Polymorphic Shellcode. In Proceedings of the International
Symposium on Recent Advances in Intrusion Detection,
2007.
[17] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos.
An Empirical Study of Real-world Polymorphic Code
Injection Attacks. In USENIX Workshop on Large-Scale
Exploits and Emergent Threats, 2009.
[18] Rix. Writing IA32 Alphanumeric Shellcode. Phrack, 11(57),
August 2001.
[19] H. Shacham, M. Page, B. Pfaﬀ, E.-J. Goh, N. Modadugu,
and D. Boneh. On the eﬀectiveness of address-space
randomization. In Proceedings of ACM Conference on
Computer and Communications Security, pages 298–307,
Oct. 2004.
[20] Y. Song, M. E. Locasto, A. Stavrou, A. D. Keromytis, and
S. J. Stolfo. On the Infeasibility of Modeling Polymorphic
Shellcode. In Proceedings of ACM Conference on Computer
and Communications Security, pages 541–551, 2007.
[21] A. Sotirov and M. Dowd. Bypassing Browser Memory
Protections. In Black Hat USA, 2008.
[22] A. N. Sovarel, D. Evans, and N. Paul. Where’s the FEEB?
On the Eﬀectiveness of Instruction Set Randomization. In
Proceedings of the USENIX Security Symposium, 2005.
[23] T. Toth and C. Kruegel. Accurate Buﬀer Overﬂow
Detection via Abstract Payload Execution. In Proceedings
of the International Symposium on Recent Advances in
Intrusion Detection, pages 274–291, 2002.
[24] A. J. Viterbi. Error Bounds for Convolutional Codes and
an Asymptotically Optimum Decoding Algorithm. IEEE
Transactions on Information Theory, 13(2):260–269, April
1967.
[25] T. Wana. Writing UTF-8 compatible shellcodes. Phrack,
11(62), July 2004.
[26] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu. STILL: Exploit
Code Detection via Static Taint and Initialization
Analyses. Proceedings of the Annual Computer Security
Applications Conference, pages 289–298, December 2008.
[27] Q. Zhang, D. S. Reeves, P. Ning, and S. P. Iyer. Analyzing
Network Traﬃc to Detect Self-decrypting Exploit Code. In
Proceedings of the ACM Symposium on Information,
Computer and Communications Security, 2007.
533