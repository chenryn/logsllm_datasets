### Optimized Text

**Opcode Effects and Emulation Challenges**

Opcodes can produce a variety of effects, including changes to registers, memory locations directly addressed by the opcodes, and the flags register. Implementing emulation is particularly challenging, as it often expands a single instruction into tens of instructions. To avoid using `ptrace` and reduce inter-process communication, we employ a solution called monitored direct execution.

**Monitored Direct Execution**

This optimized design aims to retain the benefits of direct execution while eliminating the need for `ptrace`. The information required to guide the generation process remains the same, but we explore more efficient methods to obtain it. Intuitively, what was previously handled by two processes is now accomplished by a single process that performs both tasks. This is achieved by maintaining two sets of machine state and switching between them to change execution roles. Essentially, both the watcher and the execution "programs" have their own registers, stack, and memory, which we refer to as their state. They "share" only the memory associated with state switching and the candidate solution.

**State Switching Mechanism**

Switching between states is accomplished using two pieces of stub code: one to save the state of the watcher program and another to restore the state of the execution program. To minimize the context switch penalty between kernel and user space, we use three separate stacks. The first stack is the original watcher stack (the only "official" stack), the second is an intermediate stack, and the third is the execution program's stack. The intermediate stack holds the information necessary to restore the execution process. The two pieces of stub code use this stack to either save or restore the executor's state. The third stack is a portion of memory mapped to a static location, saved and restored after each batch of executed instructions, ensuring its contents remain untouched during the watcher's execution.

**Performance Enhancements**

To further boost performance, we also forgo single-step execution. A key observation is that we only need information at specific points in the execution of a candidate solution. Specifically, we need to know the execution path dictated by changes to the flags register and when memory beyond the current point of candidate execution changes. Therefore, we pause to inspect execution under two conditions:
1. When the execution encounters a jump where the EFLAGS could be affected by a previous instruction. We identified the conditions under which this could be true by enumerating all the instructions that could change the flags, such as arithmetic operations (e.g., `inc`, `dec`, `add`, `imul`) and logical operations (e.g., `and`, `or`).
2. When we encounter instructions that can change memory; in our implementation, `and` and `add` are the only such instructions.

Any operations between these pause conditions are executed without intervention.

**Preventing Undesirable Scenarios**

Before the first instructions are executed and during each pause condition, the watcher process examines upcoming instructions to prevent two undesirable scenarios:
1. Executing any instructions that may result in a crash, such as privileged instructions.
2. Executing instructions that result in unpredictable machine state, such as using unpredictable values from registers or memory.

We can take advantage of our previous experiences with `ptrace` to enumerate and preemptively dismiss any candidate solution containing these scenarios.

**Results and Evaluation**

These optimizations allow us to routinely generate entire solutions in less than 1 hour on commodity hardware with 4GB of RAM, representing almost a 12-fold improvement over using `ptrace`.

### Evaluation

Given the sensitivity of this work, we do not show complete samples of English shellcode to avoid irresponsible disclosure. Figure 9 shows an annotated excerpt from an English-encoded sample that simply calls `exit(0)`. The generated English-encodings generally follow the form and cadence of non-synthetic text. The full text is 2054 bytes in length. The segments of text with a grey background denote portions of the shellcode that are passed over via jump instructions and are therefore not executed.

In the table, we depict the assembly, machine code, and ASCII-character representations for the executed segments. Since our focus is to show that shellcode need not be different in structure from non-executable payload data, we do not assess the quality of the generated English. Instead, we revisit a recent approach based on spectrum analysis to detect the presence of executable code in network traffic [8].

The key assumption in that work is that the structure of executable content is statistically dissimilar from non-executable data, allowing for the identification of shellcode. By grouping opcodes into canonical categories, they argue that similar file types will have similar categorization patterns. Their results indicate that data and plaintext files have instruction spectrums that are characteristically different from those of executable code.

### Instruction Distribution

Using the same categories, we classified each IA32 instruction and produced instruction spectrums for the Windows Bind DLL Inject shellcode supplied with the Metasploit framework, various encodings of the shellcode, and randomly selected Wikipedia articles. Figure 10 shows the results after sorting each spectrum by category, highlighting the distribution of instruction types in each file. Through visual observation, it is clear that the Pexfnstenvsub encoding of the Metasploit shellcode is not significantly different from the unmodified shellcode. Alternatively, both alphanumeric encodings are unlike the aforementioned samples and have distributions most similar to each other.

More importantly, the instruction distribution of the English encoding is most like the instruction distribution of the randomly chosen Wikipedia articles, illustrating the difficulty of distinguishing English shellcode without considering syntactic information. It is not clear how to easily mitigate this threat without considering the semantics of the input. Excerpts from other generated samples are shown in Figure 11.

### Conclusion

In this paper, we revisit the assumption that shellcode must be fundamentally different in structure from non-executable data. We demonstrate how natural language generation techniques can produce shellcode that is superficially similar to English prose. This development poses significant challenges for inline payload-based inspection and highlights the need for more efficient techniques to prevent shellcode injection attacks.

### Acknowledgements

We thank Bryan Hoï¬€man, Ryan MacArthur, Scott Coull, John McHugh, Ryan Gardner, and Charles Wright for many insightful discussions. We also thank our anonymous reviewers for their invaluable comments and suggestions. This work was funded in part by NFS grants CNS-0627611 and CNS-0852649.

### References

[References listed as provided, with no changes made.]

---

This optimized version maintains the technical details while improving clarity, coherence, and professionalism.