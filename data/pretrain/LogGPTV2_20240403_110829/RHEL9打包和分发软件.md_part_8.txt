:::
在检查二进制 RPM 时，`rpmlint`{.literal} 会检查以下项目：
::: itemizedlist
-   Documentation
-   man page
-   致地使用文件系统层次结构标准
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140427926811984}
**例 3.10. 在用于 cello 的二进制 RPM 上运行 `rpmlint`{.literal}
命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/RPMS/x86_64/cello-1.0-1.el8.x86_64.rpm
cello.x86_64: W: invalid-url URL: https://www.example.com/cello HTTP Error 404: Not Found
cello.x86_64: W: no-documentation
cello.x86_64: W: no-manual-page-for-binary cello
1 packages and 0 specfiles checked; 0 errors, 3 warnings.
```
:::
:::
`no-documentation`{.literal} 和 `no-manual-page-for-binary`{.literal}
警告表示他 RPM 没有文档或 man
page，因为您没有提供任何信息。除以上警告外，RPM 会传递
`rpmlint`{.literal} 检查。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#logging-rpm-activity_packaging-software}将 RPM 活动记录到 syslog {.title}
:::
任何 RPM 活动或事务都可以由系统日志协议(syslog)记录。
::: itemizedlist
**先决条件**
-   要启用 RPM 事务记录到 syslog，请确定在系统中安装了
    `syslog`{.literal} 插件：
    ``` literallayout
    # dnf install rpm-plugin-syslog
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    syslog 消息的默认位置是 `/var/log/messages`{.literal}
    文件。但是，您可以将 syslog 配置为使用另一个位置来存储信息。
    :::
:::
要查看 RPM 活动的更新，请按照上述步骤操作。
::: orderedlist
**步骤**
1.  打开您配置为存储 syslog 消息的文件，或者使用默认的 syslog 配置，打开
    `/var/log/messages`{.literal} 文件。
2.  搜索包括 `[RPM]`{.literal} 字符串的新行。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#proc_extracting-rpm-content_packaging-software}提取 RPM 内容 {.title}
:::
在某些情况下，比如，如果 RPM
所需的软件包被损坏，则需要提取软件包的内容。在这种情况下，如果 RPM
安装仍正常工作，您可以使用 `rpm2archive`{.literal} 实用程序将
[**.rpm**]{.strong} 文件转换为 tar 存档以使用软件包的内容。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果 RPM 安装被严重损坏，您可以使用 `rpm2cpio`{.literal} 实用程序将 RPM
软件包文件转换为 cpio 存档。
:::
以下流程描述了如何使用 `rpm2archive`{.literal} 实用程序将 rpm
有效负载转换为 tar 归档。
::: itemizedlist
**步骤**
-   运行以下命令：
    ``` literallayout
    $ rpm2archive filename.rpm
    ```
    将 [*filename*]{.emphasis} 替换为 [**.rpm**]{.strong} 文件的名称。
    生成的文件具有 `.tgz`{.literal} 后缀。例如，要归档 `bash`{.literal}
    软件包：
    ``` literallayout
    $ rpm2archive bash-4.4.19-6.el8.x86_64.rpm
    $ bash-4.4.19-6.el8.x86_64.rpm.tgz
    bash-4.4.19-6.el8.x86_64.rpm.tgz
    ```
:::
:::
:::
[]{#advanced-topics.html}
::: chapter
::: titlepage
# []{#advanced-topics.html#advanced-topics}第 4 章 高级主题 {.title}
:::
本节涵盖超出入门教程范围但对真实 RPM 打包很有用的主题。
::: section
::: titlepage
# []{#advanced-topics.html#signing-packages_advanced-topics}签名软件包 {.title}
:::
软件包经过签名，以确保没有第三方可以更改其内容。在下载软件包时，用户可以使用
HTTPS 协议添加额外的安全层。
对软件包进行签名有两种：
::: itemizedlist
-   [向已经存在的软件包中添加签名](#advanced-topics.html#adding-a-signature_signing-packages "在已经存在的软件包中添加签名"){.link}。
-   [在已经存在的软件包中替换签名](#advanced-topics.html#replacing-the-signature_signing-packages "在已经存在的软件包中替换签名"){.link}。
:::
::: itemizedlist
**先决条件**
-   要能够签署软件包，您需要创建 GNU Privacy Guard(GPG)密钥，如创建 [GPG
    密钥](#advanced-topics.html#creating-a-gpg-key_signing-packages "创建 GPG 密钥"){.link}
    中所述。
:::
::: section
::: titlepage
## []{#advanced-topics.html#creating-a-gpg-key_signing-packages}创建 GPG 密钥 {.title}
:::
以下流程描述了如何创建签名软件包所需的 GNU Privacy Guard(GPG)密钥。
::: orderedlist
**步骤**
1.  生成 GNU Privacy Guard(GPG)密钥对：
    ``` literallayout
    # gpg --gen-key
    ```
2.  确认并查看生成的密钥：
    ``` literallayout
    # gpg --list-keys
    ```
3.  导出公钥：
    ``` literallayout
    # gpg --export -a '' > RPM-GPG-KEY-pmanager
    ```
    将 \ 替换为您选择的实际名称。
4.  将导出的公钥导入到 RPM 数据库中：
    ``` literallayout
    # rpm --import RPM-GPG-KEY-pmanager
    ```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#proc_configuring-rpm-to-sign-a-package_signing-packages}配置 RPM 为软件包签名 {.title}
:::
要能够签署软件包，您需要指定 `%_gpg_name`{.literal} RPM 宏。
以下流程描述了如何配置 RPM 以签名软件包。
::: itemizedlist
**步骤**
-   在 `$HOME/.rpmmacros`{.literal} 文件中定义 `%_gpg_name`{.literal}
    宏，如下所示：
    ``` literallayout
    %_gpg_name Key ID
    ```
    使用 GNU Privacy Guard(GPG)密钥 ID 替换 [*Key
    ID*]{.emphasis}，以用于签名。有效的 GPG 密钥 ID
    值是创建密钥的用户的完整名称或电子邮件地址。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#adding-a-signature_signing-packages}在已经存在的软件包中添加签名 {.title}
:::
这部分论述了在没有签名的情况下构建软件包时最常见的情况。签名仅在软件包发布前添加。
要在软件包中添加签名，请使用 `rpm-sign`{.literal} 软件包提供的
`--addsign`{.literal} 选项。
通过多个签名，可以将软件包构建器的所有权路径记录到最终用户。
::: itemizedlist
**步骤**
-   在软件包中添加签名：
    ``` literallayout
    $ rpm --addsign blather-7.9-1.x86_64.rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您需要输入密码来解锁签名的机密密钥。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#a-practical-example-of-adding-a-signature_signing-packages}在已经存在的软件包中添加签名的实际示例 {.title}
:::
这部分论述了在现有软件包中添加签名可能会很有用的示例。
公司的一个部门创建了软件包并使用部门的密钥对其进行签名。然后，公司总部检查软件包的签名，并将企业签名添加到软件包中，说明已签名软件包是验证的。
使用两个签名时，该软件包可让其为零售商采用方法。零售商会检查签名，如果匹配，也会添加其签名。
现在，这个软件包已成为希望部署该软件包的公司。检查软件包中的每个签名后，它们知道它是真实的副本。根据部署公司的内部控制，他们可以选择添加自己的签名，以通知其员工收到其公司批准。
:::
::: section
::: titlepage
## []{#advanced-topics.html#replacing-the-signature_signing-packages}在已经存在的软件包中替换签名 {.title}
:::
以下流程描述了如何更改公钥而无需重建每个软件包。
::: itemizedlist
**步骤**
-   要更改公钥，请运行以下命令：
    ``` literallayout
    $ rpm --resign blather-7.9-1.x86_64.rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您需要输入密码来解锁签名的机密密钥。
    :::
:::
`--resign`{.literal} 选项还允许您更改多个软件包的公钥，如以下步骤所示。
::: itemizedlist
**步骤**
-   要更改多个软件包的公钥，请执行：
    ``` literallayout
    $ rpm --resign b*.rpm
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您需要输入密码来解锁签名的机密密钥。
    :::
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#more-on-macros_advanced-topics}有关宏的更多内容 {.title}
:::
本节介绍所选内置 RPM Macros。有关此类宏的详细列表，请参阅 [RPM
文档](https://rpm-software-management.github.io/rpm/manual/macros.html){.link}。
::: section
::: titlepage
## []{#advanced-topics.html#defining-your-own-macros_more-on-macros}定义您自己的宏 {.title}
:::
下面的部分论述了如何创建自定义宏。
::: itemizedlist
**步骤**
-   在 RPM SPEC 文件中包括以下行：
    ``` literallayout