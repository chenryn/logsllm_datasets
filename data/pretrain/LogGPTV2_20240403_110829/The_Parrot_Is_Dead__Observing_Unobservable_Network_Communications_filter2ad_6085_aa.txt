title:The Parrot Is Dead: Observing Unobservable Network Communications
author:Amir Houmansadr and
Chad Brubaker and
Vitaly Shmatikov
2013 IEEE Symposium on Security and Privacy
The Parrot is Dead:
Observing Unobservable Network Communications
Amir Houmansadr
Chad Brubaker
Vitaly Shmatikov
The University of Texas at Austin
Abstract—In response to the growing popularity of Tor
and other censorship circumvention systems, censors in non-
democratic countries have increased their technical capabilities
and can now recognize and block network trafﬁc generated by
these systems on a nationwide scale. New censorship-resistant
communication systems such as SkypeMorph, StegoTorus, and
CensorSpoofer aim to evade censors’ observations by imitating
common protocols like Skype and HTTP.
We demonstrate that these systems completely fail to achieve
unobservability. Even a very weak,
local censor can easily
distinguish their trafﬁc from the imitated protocols. We show
dozens of passive and active methods that recognize even a
single imitated session, without any need to correlate multiple
network ﬂows or perform sophisticated trafﬁc analysis.
We enumerate the requirements that a censorship-resistant
system must satisfy to successfully mimic another protocol and
conclude that “unobservability by imitation” is a fundamentally
ﬂawed approach. We then present our recommendations for the
design of unobservable communication systems.
Keywords-Censorship circumvention; unobservable commu-
nications; Tor pluggable transports
I. INTRODUCTION
Censorship-resistant communication systems such as the
Tor anonymity network1 are increasingly used by people in
non-democratic countries to bypass restrictions on Internet
access, share information, browse websites prohibited by the
regime, etc. In response, government censors have greatly
improved their technical capabilities and are now able to
perform real-time deep-packet inspection and trafﬁc analysis
on ISP-level volumes of network trafﬁc (see Section IV-C).
This increase in censors’ power threatens to make anony-
mous communication systems unavailable to users who need
them the most. Tor, in particular, has faced frequent blocking
even after deploying private “bridges” [17] that hide the
addresses of Tor relays in order to circumvent IP address
ﬁltering. The problem is that Tor trafﬁc remains recognizable
by its characteristic patterns and content signatures.
The continuing availability of low-latency, censorship-
resistant communications thus critically depends on their
unobservability. This has motivated an entire class of cir-
cumvention systems that aim to achieve unobservability
by imitating popular applications such as Web browsers
and Skype clients. In the rest of this paper, we refer to
1https://www.torproject.org/
them as parrot circumvention systems. For example, Skype-
Morph [41] hides Tor trafﬁc by mimicking Skype video
calls, CensorSpoofer [59] mimics SIP-based Voice-over-IP,
and StegoTorus [60] mimics Skype and/or HTTP.
Our contributions. We present the ﬁrst in-depth study of
unobservability in censorship-resistant communication sys-
tems. We develop a taxonomy of adversaries and a detailed
list of technical requirements that a parrot system must
satisfy to successfully mimic another protocol.
We analyze the recently proposed parrot systems, includ-
ing SkypeMorph, StegoTorus, CensorSpoofer and their vari-
ants, and show that they completely fail to achieve unobserv-
ability. We demonstrate multiple techniques to distinguish
their trafﬁc from the protocols they attempt to imitate and
prove that all of these techniques work in practice.
Most of our methods assume a much weaker adversary
than considered by the designers of these parrot systems.
They aim to foil large-scale statistical trafﬁc analysis by
ISP-level adversaries, yet even a single trafﬁc ﬂow generated
by any of their systems can be recognized at a low cost
by a local network adversary (e.g, a censor in control
of a Wi-Fi access point or local router) because of the
glaring discrepancies between their crude imitations and the
behavior of genuine protocol implementations.
To give just one example, SkypeMorph and StegoTorus
take great care to generate datagrams whose size distribu-
tions mimic a Skype video chat session, yet forget to mimic
the TCP control channel that always accompanies a genuine
Skype session. These imitation mistakes are numerous and
in many cases unﬁxable. Even plausible-looking ﬁxes (e.g.,
“add an imitated TCP channel”) do not help in practice
because they do not correctly mimic the complex, dynamic
dependences exhibited by the genuine protocols.
We argue that the entire approach of “unobservability by
imitation” is fundamentally ﬂawed. Convincingly mim-
icking a sophisticated distributed system like Skype, with
multiple, inter-dependent sub-protocols and correlations, is
an insurmountable challenge. To win, the censor needs only
to ﬁnd a few discrepancies, while the parrot must satisfy a
daunting list of imitation requirements. Furthermore, it is not
enough to mimic some protocol; the parrot must plausibly
mimic a speciﬁc implementation of the protocol down to
every quirk and implementation-speciﬁc bug. For example,
© 2012, Amir Houmansadr. Under license to IEEE.
DOI 10.1109/SP.2013.14
65
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
StegoTorus’s imitation of an HTTP server does not look like
any known Web server and is thus easily recognizable.
We conclude with the lessons and recommendations for
designing unobservable communication systems. A promis-
ing alternative to parrots is offered by systems that operate
higher in the protocol stack [28, 29]: for example, instead of
imitating Skype, they run genuine Skype and transport their
trafﬁc in the encrypted voice or video payloads.
II. UNOBSERVABILITY BY IMITATION
Intuitively, unobservability means that a censor can nei-
ther recognize the trafﬁc generated by the circumvention
system, nor identify the endpoints engaged in circumvention.
Parrot circumvention systems aim to achieve unobservability
by mimicking a widely used, uncensored target protocol.
Popular imitation targets include HTTP, Skype, and IETF-
based VoIP. It is essential that the target be a common
protocol which the censor may be unwilling to block for
political or economic reasons. Imitating an unpopular pro-
tocol is futile because the censor will simply block both the
genuine protocol and its imitations.
Skype. Skype is a very popular Voice-over-IP (VoIP) system
based on a P2P overlay network of users running Skype
software. Skype’s proprietary design has been extensively
studied and reverse-engineered (see Appendix A).
A Skype client
is an ordinary user who makes calls
and sends messages. Users are authenticated by a central
login server. A Skype supernode is a resource-rich user
with a public IP address and sufﬁcient CPU, memory, and
network bandwidth [1, 5]. Supernodes relay media and
signals between clients that cannot communicate directly due
to network address translation (NAT) and ﬁrewalls.
IETF-based VoIP. IETF has several standards for VoIP
protocols, including network discovery to connect to the
VoIP network, session control to set up and tear down calls,
and media transmission to communicate voice datagrams.
Session Initiation Protocol (SIP) [51] is a popular session
control protocol. SIP is an application-layer protocol and can
run over TCP or UDP. A SIP system comprises user agents,
location services, registrar servers, and proxy servers. User
agents have registered SIP IDs and run SIP client software. A
location service is the VoIP provider’s database listing users,
their SIP IDs and network locations, etc. Registrar servers
are network machines operated by the VoIP provider that
receive SIP registration requests from user agents and update
their information in the location service. Proxy servers
receive call requests from user agents and forward them
either to the requested callees, or to other SIP proxies.
they use a media transmission protocol
Once a VoIP session is established between two SIP
to
user agents,
trafﬁc, e.g., audio data. Real-time
communicate the call
Transport Protocol (RTP) [53] is an IETF standard for
media transmission. Real-time Transport Control Protocol
(RTCP) is a sister protocol that controls an established RTP
connection by exchanging out-of-band statistics and control
information. Both RTP and RTCP run over UDP and have
encrypted versions, called SRTP and SRTCP, respectively.
If SRTP/SRTCP is used, an additional protocol is needed to
establish a shared key, e.g., MIKEY [3], or else user agents
may use pre-established keys.
Session Traversal Utilities for NAT (STUN) [50] is a set
of methods that allows a VoIP client behind NAT to discover
this fact and connect to a VoIP network.
III. PARROT CIRCUMVENTION SYSTEMS
A. SkypeMorph
SkypeMorph [41] is a pluggable transport [46] for Tor
intended to make the trafﬁc between a Tor client and a Tor
bridge [17] look like a Skype video call.
The client obtains the bridge’s Skype ID in advance, e.g.,
through Tor’s BridgeDB [13]. The bridge logs into Skype
and picks a high UDP port. The client logs into Skype, picks
a high UDP port, and waits until the bridge’s ID is online,
then sends a Skype text message to the bridge containing the
client’s IP address, UDP port, and public key. The bridge
replies with a Skype message containing its own IP address,
UDP port, and public key. The exchanged public keys are
used to derive a shared secret key.
The client simulates the start of a video call by sending
a Skype ring signal to the server and then dropping the
call. The bridge does not “answer” this call. Instead, it
listens on its own UDP port for incoming SkypeMorph
messages and responds to the client’s UDP port. These
messages are encrypted with the shared secret key. Once
the encrypted UDP connection starts, both the client and
the bridge terminate their Skype runtime.
B. StegoTorus
StegoTorus [59] is a pluggable Tor transport derived from
Obfsproxy [44]. It adds chopping and steganography to
Tor clients and bridges. The chopper aims to foil statistical
analysis by changing packet sizes and timings. It carries Tor
trafﬁc over links comprised of multiple connections. Each
connection is a sequence of blocks, padded and delivered
out of order. The steganography module aims to hide trafﬁc
contents by mimicking HTTP, Skype, and Ventrilo.
Embed steganography. StegoTorus-Embed aims to mimic
a P2P connection such as Skype or Ventrilo VoIP. The
StegoTorus prototype uses a database of genuine, previously
collected Skype and Ventrilo packet traces to shape its trafﬁc,
but users can supply their own traces. To ensure that trafﬁc
patterns match, a StegoTorus client sends packet timings
and sizes to the StegoTorus server at the beginning of the
connection. In addition, StegoTorus emulates application
headers to match the trafﬁc payload. The current prototype
generates application headers “by hand” because neither
Skype, nor Ventrilo are open-source.
66
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:59 UTC from IEEE Xplore.  Restrictions apply. 
HTTP steganography. StegoTorus-HTTP aims to mimic
unencrypted HTTP trafﬁc by using a client-side request
generator and a server-side response generator. Both rely
on a pre-recorded trace of HTTP requests and responses.
Unlike StegoTorus-Embed, clients and servers use indepen-
dent HTTP traces; neither trace is temporally arranged.
The request generator picks a random HTTP GET request
from the trace and hides the payload produced by the
chopper in the  and  ﬁelds of the request
by encoding the payload into a modiﬁed base64 alphabet
and inserting special characters at random positions to make
it look like a legitimate URI or cookie header.
The response generator picks a random HTTP response
consistent with the request and hides the data in the ﬁles
carried by this response. The StegoTorus prototype uses
PDF, SWF, and JavaScript ﬁles for this purpose.
C. CensorSpoofer
Unlike StegoTorus and SkypeMorph, which are pluggable
Tor transports, CensorSpoofer [59] is a standalone system
that (1) uses IP spooﬁng to obfuscate the server’s identity,
and (2) mimics VoIP trafﬁc to obfuscate trafﬁc patterns.
CensorSpoofer is mainly designed for censorship-resistant
Web browsing, where the upstream ﬂow (requested URLs)
requires much less bandwidth than the downstream ﬂow (po-
tentially large HTTP responses). Therefore, CensorSpoofer
decouples upstream and downstream connections. A Cen-
sorSpoofer client uses a low-capacity channel such as email
or instant messaging to send requests to the CensorSpoofer
server. The server hides HTTP responses by mimicking P2P
trafﬁc from an oblivious dummy host. The CensorSpoofer
prototype focuses on mimicking UDP-based VoIP trafﬁc,
thus dummy hosts are chosen by port-scanning random IPs
and picking the ones whose SIP ports are open.
A CensorSpoofer client initiates a SIP connection with
the CensorSpoofer server by sending a SIP INVITE to the
appropriate SIP ID. The CensorSpoofer spoofer replies with
a SIP OK message spoofed to look as if its origin is the
dummy host. Once the client receives this message, it starts
sending encrypted RTP/RTCP packets with random content
to the dummy host. At the same time, the spoofer starts
sending spoofed, encrypted RTP/RTCP packets to the client
ostensibly from the dummy host’s address.
To browse a URL, the client sends it through the upstream
channel. The spoofer fetches the contents and embeds them
in the spoofed RTP packets to the client. To terminate,
the client sends a termination signal upstream. The spoofer
replies with a spoofed SIP BYE message, the client sends a
SIP OK message and closes the call.
IV. ADVERSARY MODELS
A. Capability classiﬁcation
Passive attacks involve observing and analyzing network
trafﬁc and the behavior of Internet entities. Typical tech-
niques are statistical trafﬁc analysis, deep-packet inspection,
and behavioral analysis.
Active attacks involve manipulation of network trafﬁc.
Typical techniques are delaying, dropping, or injecting pack-
ets into existing connections, modifying packet contents,
throttling bandwidth, and terminating connections.
Proactive attacks aim to identify network entities involved
in circumvention by sending probes that are crafted to elicit
recognizable responses. For example, a censor may try to
discover Tor bridges by initiating connections to random
or suspected IP addresses [40]. By contrast, active attacks
perturb already existing connections.
B. Knowledge classiﬁcation
Local adversary (LO) controls at most a few network
devices and can only observe a small number of connec-
tions. Examples include compromised home routers or Wi-Fi
access points, corporations monitoring employees, etc.
By contrast, a state-level adversary observes large vol-
umes of network trafﬁc. Examples include malicious ISPs
and government censors. We further subdivide state-level
adversaries into two categories based on their resources.
State-level oblivious adversary (OB) has limited com-
putational and/or storage resources. He can neither keep
network traces for a long time, nor perform heavyweight
trafﬁc analysis. An OB censor may possess capabilities like
deep-packet inspection (DPI), but can only apply them at
close to line speeds to short observations of network trafﬁc:
for example, to individual packets but not across packets.
State-level omniscient adversary (OM) has ample process-
ing and storage resources. He can aggregate data collected
at different network locations and store all intercepted trafﬁc
for ofﬂine, computationally expensive analysis.
C. Real-world censors
Repressive states like China, Iran, Cuba, Syria, and North
Korea have deployed the most aggressive Internet censor-
ship [16, 31, 38, 49], but censorship is practiced even by
Australia [4] and Italy [33], as well as enterprise networks
and search engines [35]. Some government censors are