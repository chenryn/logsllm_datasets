除了通过映像 Dockerfile 公开端口，我们还可以在容器运行时公开它们。以这种方式公开的任何端口都与 Dockerfile 中公开的端口组合在一起。例如，让我们再次运行同一个容器，并将端口`80` UDP 作为`docker run`命令的一部分公开:
```
user@docker1:~$ docker run --name web1 --expose=80/udp \
-d -P jonlangemak/web_server_1
f756deafed26f9635a3b9c738089495efeae86a393f94f17b2c4fece9f71a704
user@docker1:~$
user@docker1:~$ docker port web1
80/udp -> 0.0.0.0:32768
80/tcp -> 0.0.0.0:32776
user@docker1:~$
```
如您所见，我们不仅发布了来自 Dockerfile ( `80/tcp`)的端口，还发布了来自`docker run`命令(`80/udp`)的端口。
### 注
在容器运行时公开端口允许您有一些额外的灵活性，因为您可以定义要公开的端口范围。在使用 Dockerfile `expose`语法创建映像期间，这目前是不可能的。当暴露大范围的端口时，您可以通过在命令的末尾添加您正在寻找的容器端口来过滤`docker port`命令的输出。
虽然 expose 方法确实很方便，但它并不能解决我们所有的需求。如果您想要更多地控制所使用的端口和接口，您可以绕过`expose`并在启动容器时直接发布端口。当传递`-P`标志时，发布所有公开的端口，传递`-p`标志允许您指定映射端口时使用的特定端口和接口。`-p`标志可以采用几种不同的形式，语法如下:
```
–p ::
```
任何选项都可以省略，唯一需要的字段是容器港口。例如，您可以使用以下几种不同的语法:
*   指定主机端口和容器端口:
    ```
    –p :
    ```
*   指定主机接口、主机端口和容器端口:
    ```
    –p ::
    ```
*   指定主机接口，让 Docker 选择一个随机的主机端口，并指定容器端口:
    ```
    –p ::
    ```
*   仅指定一个容器端口，并让 Docker 使用随机主机端口:
    ```
    –p 
    ```
到目前为止，我们看到的所有发布的端口都使用了目的地 IP 地址(`0.0.0.0`)，这意味着它们绑定到 Docker 主机的所有 IP 接口。默认情况下，Docker 服务总是将发布的端口绑定到所有主机接口。然而，正如我们将在本章下面的食谱中看到的，我们可以通过向 Docker 服务传递`--ip`参数来告诉 Docker 使用特定的接口。
鉴于我们还可以定义将发布的端口绑定到哪个接口，作为`docker run`命令的一部分，我们需要知道哪个选项优先。一般规则是，在容器运行时定义的任何选项都将获胜。例如，让我们看一个例子，我们告诉 Docker 服务绑定到`docker1`主机的`192.168.10.101` IP 地址，方法是将以下选项传递给服务:
```
--ip=10.10.10.101
```
现在，让我们以两种不同的方式运行容器，看看结果:
```
user@docker1:~$ docker run --name web1 -P -d jonlangemak/web_server_1
629129ccaebaa15720399c1ac31c1f2631fb4caedc7b3b114a92c5a8f797221d
user@docker1:~$ docker port web1
80/tcp -> 10.10.10.101:32768
user@docker1:~$
```
在前面的例子中，我们看到了预期的行为。发布的端口绑定到服务级别`--ip`选项(`10.10.10.101`)中指定的 IP 地址。但是，如果我们在容器运行时指定一个 IP 地址，我们可以覆盖服务级别设置:
```
user@docker1:~$ docker run --name web2 -p 0.0.0.0::80 \
-d jonlangemak/web_server_2
7feb252d7bd9541fe7110b2aabcd6a50522531f8d6ac5422f1486205fad1f666
user@docker1:~$ docker port web2
80/tcp -> 0.0.0.0:32769
user@docker1:~$
We can see that we specified a host IP address of 0.0.0.0, which will match all the IP addresses on the Docker host. When we check the port mapping, we see that the 0.0.0.0 specified in the command overrode the service-level default.
```
有可能你找不到暴露端口的用途，而仅仅依靠手动发布它们。`EXPOSE`命令不是 Dockerfile 创建映像的要求。没有定义公开端口的容器映像可以直接发布，如以下命令所示:
```
user@docker1:~$ docker run --name noexpose -p 0.0.0.0:80:80 \
-d jonlangemak/web_server_noexpose
2bf21219b45ba05ef7169fc30d5eac73674857573e54fd1a0499b73557fdfd45
user@docker1:~$ docker port noexpose
80/tcp -> 0.0.0.0:80
user@docker1:~$
```
在前面的例子中，容器映像`jonlangemak/web_server_noexpose`是一个容器，作为其定义的一部分，它不暴露任何端口。
# 将容器连接到现有容器
至此，Docker 网络连接依赖于将容器中托管的单个服务暴露给物理网络。但是，如果您想将一个服务从一个容器公开给另一个容器，而不将其公开给 Docker 主机，那该怎么办？在本食谱中，我们将介绍如何在运行于同一 Docker 主机上的两个容器之间映射服务。
## 做好准备
您需要访问 Docker 主机，并了解您的 Docker 主机是如何连接到网络的。在本食谱中，我们将使用之前食谱中使用的`docker1`主机。您需要确保您有权查看`iptables`规则以验证网络过滤策略。如果您希望下载并运行示例容器，您的 Docker 主机也需要访问互联网。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
将服务从一个容器映射到另一个容器有时被称为映射容器模式。映射容器模式允许您启动利用现有或主要容器网络配置的容器。也就是说，映射容器将使用与主容器相同的 IP 和端口配置。为了举例，让我们考虑运行以下容器:
```
user@docker1:~$ docker run --name web4 -d -P \
jonlangemak/web_server_4_redirect
```
运行这个容器会在桥模式下启动容器，并按照我们的预期将其连接到`docker0`桥。
在这一点上，拓扑看起来非常标准，如下图所示:
![How to do it…](img/B05453_02_09.jpg)
现在在同一个主机上运行第二个容器，但是这次指定网络应该是主容器`web4`的网络:
```
user@docker1:~$ docker run --name web3 -d --net=container:web4 \
jonlangemak/web_server_3_8080
```
我们的拓扑现在如下所示:
![How to do it…](img/B05453_02_10.jpg)
注意容器`web3`现在是如何被描绘成直接连接到`web4`而不是`docker0`桥。通过查看每个容器的网络配置，我们可以验证实际情况是否如此:
```
user@docker1:~$ docker exec web4 ip addr show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
16: eth0@if17:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
user@docker1:~$ docker exec web3 ip addr show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
16: eth0@if17:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
正如我们看到的，接口在 IP 配置和 MAC 地址上都是相同的。使用`docker run`命令中`--net:container`的语法，将新容器连接到引用容器所在的同一网络结构。这意味着映射容器与主容器具有相同的网络配置。
这种配置有一个值得注意的限制。加入另一个容器网络的容器不能发布它自己的任何端口。因此，虽然这意味着我们不能向主机发布映射容器的端口，但我们可以在本地使用它们。回到我们的例子，这意味着我们不能向主机发布容器`web3`的端口`8080`。然而，容器`web4`可以在本地消费容器`web3`的非公共服务。例如，本例中的每个容器都承载一个 web 服务:
*   `web3`在端口`8080`上运行网络服务器
*   `web4`在端口`80`上运行网络服务器
从外部主机的角度来看，没有办法访问容器的 web 服务`web3`。然而，我们可以通过容器`web4`访问这些服务。容器`web4`正在托管一个名为`test.php`的 PHP 脚本，该脚本提取自己的网络服务器以及运行在端口`8080`上的网络服务器的索引页面。脚本如下:
```
```
该脚本位于 web 服务器的根托管目录(`/var/www/`)中，因此我们可以通过浏览到`web4`容器的发布端口，后跟`test.php`来访问该端口:
```
user@docker1:~$ docker port web4
80/tcp -> 0.0.0.0:32768
user@docker1:~$
user@docker1:~$ curl http://localhost:32768/test.php
    Web Server #4 - Running on port 80
    Web Server #3 - Running on port 8080
user@docker1:~$
```
正如您所看到的，该脚本能够从两个容器中提取索引页面。让我们停止容器`web3`并再次运行这个测试来证明它确实是提供这个索引页面响应的那个:
```
user@docker1:~$ docker stop web3
web3
user@docker1:~$ curl http://localhost:32768/test.php
    Web Server #4 - Running on port 80