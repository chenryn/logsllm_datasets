### Vulnerabilities in Different Versions of the Android Platform

#### WebView Information Leaks
WebView is a critical component in the Android Framework responsible for rendering web content. In certain versions of Android, the WebView component contains bugs that can lead to information leaks when used in specific programming patterns (e.g., CVE-2014-6041). We have identified and summarized these potentially vulnerable code patterns and aim to detect them in our dataset.

#### SSL Hijacking
SSL hijacking has become a common security flaw in mobile applications in recent years. This vulnerability arises when mobile apps fail to verify the SSL certificates of the servers they communicate with, making them susceptible to man-in-the-middle attacks, especially when connected to untrusted networks. Our evaluation focuses on detecting inappropriate implementations of HTTPS communications in Android apps.

#### FileCross
Android browsers support the `file://` URI scheme. FileCross vulnerabilities exploit this feature to inject malicious JavaScript code into the file system, thereby stealing on-device data. These vulnerabilities are particularly concerning as they can lead to significant data breaches.

### Detecting Vulnerable Apps
We use SmartDroid [17] as our vulnerability detection tool to determine whether an Android app is vulnerable. As previously mentioned, SmartDroid can only detect vulnerabilities at the app level, not at the third-party library level. Our modifications to the original analysis system improve this by narrowing the scope of vulnerability detection from the entire app to specific code blocks.

### Evaluating Vulnerable Library Detection
Our modified vulnerability analysis system demonstrates that our approach is effective in identifying vulnerable third-party libraries. All detected vulnerable libraries are real and pose a threat to a large number of apps simultaneously.

As shown in Section IV, we found multiple versions of the same library, with only some being vulnerable. In total, we detected 10,801 vulnerable third-party libraries using a clustering threshold of 10 (see §IV-C for threshold selection). These vulnerable libraries account for 17.7% of all libraries, indicating that third-party libraries are not as secure as previously assumed. The risks associated with defective third-party libraries must be thoroughly considered.

In our case study, we observed that a single library can be affected by multiple vulnerabilities. Table XIII provides statistics on this phenomenon. According to our results, 34.0% of the vulnerable libraries contain more than one vulnerability. The most common combination is DoS and FileCross, which is particularly alarming as these two defects can easily form a realizable attack sequence. Attackers can first exploit FileCross to deploy and execute malicious JavaScript code on a victim device, which can then trigger a DoS attack.

### Further Analysis
To gain a deeper understanding of the characteristics of the detected vulnerable libraries, we manually inspected the top 200 most popular ones, ranked by the number of affected apps. Tables XIV and XV list the top 10 most popular obfuscated and unobfuscated vulnerable libraries, respectively, showing library names, the number of affected apps, and the types of vulnerabilities reported. The 200 analyzed libraries cover all those listed in Tables XIV and XV. For each library, we randomly selected an instance from each corresponding cluster.

We developed a systematic protocol for the manual inspection of these library instances. For obfuscated libraries, the key questions were: "What are their identities?" and "What are their main functionalities?" We answered these questions primarily through reverse engineering, such as dumping all string literals used by the library code to identify library names. For unobfuscated libraries, our primary goal was to confirm their identities and investigate whether they were published by a third-party library developer. If so, we collected all historical versions of the library and checked if the instance in our dataset matched any of these versions.

Two authors participated in the manual analysis. To avoid biases, they started with a small subset of 20 libraries and cross-validated their results. Conflicts were resolved through face-to-face discussions before proceeding to inspect the entire dataset. Most conflicts were due to carelessness, so we relied on qualitative methods for the analysis.

Through the manual analysis, we made two interesting empirical findings:
1. Renamed libraries are not always constructed with random characters. Some modifications are manually done. For example, the pair of libraries `/com/wendyapp/wps` and `/com/lovepop/flystart` have almost identical code structures, suggesting that at least one name is obfuscated. DNS checks revealed that the original name is `/com/lovepop/flystart`, an ads library for recommending pop-up greeting cards.
2. Renaming-based obfuscations are mostly applied to finance-related libraries, such as ads libraries. Seven of the ten libraries in Table XIV are related to Google’s advertising library, indicating that many obfuscated ads libraries inherit vulnerabilities from Google’s library.

Table XV shows the ten most commonly unobfuscated libraries, all developed by large internet enterprises. These libraries are widely spread in apps provided by third-party software markets in China. A vulnerability in any instance of these libraries can quickly affect a large number of apps. Since these libraries are not reported as obfuscated by LibD, it is likely that they have not been tampered with by malicious parties. Therefore, the vulnerabilities discovered in Table XV are introduced by the original developers.

In Section III-D1, we discussed the RPC vulnerability in the Baidu moplus SDK library [20], which is also a target of our modified SmartDroid system. After analyzing all the libraries and apps, we found that 2,012 different apps in our dataset are affected by 15 different versions of the library containing this flaw.

### Limitations of LibD
Compared to previous work, LibD has advanced the state of the art in several aspects. However, it still has limitations, some of which can be addressed. These limitations can be categorized into general and specialist limitations.

#### General Limitations
1. **Packers**: During our evaluation, we noticed that some samples could not be correctly unpacked or decompiled, preventing further analysis. This issue is due to the use of Android "packers," which transform APK files to protect them from reverse engineering.

For more details on the manual analysis process, please refer to Appendix B.