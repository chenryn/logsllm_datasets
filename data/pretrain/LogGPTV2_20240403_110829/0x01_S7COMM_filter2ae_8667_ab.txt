---|---|---  
0 | NULL  
3 | BIT | bit access, len is in bits  
4 | BYTE/WORD/DWORD | byte/word/dword access, len is in bits  
5 | INTEGER | integer access, len is in bits  
6 | DINTEGER | integer access, len is in bytes  
7 | REAL | real access, len is in bytes  
9 | OCTET STRING | octet string, len is in bytes  
2 – 4 字节：
    Length:，即数据的长度
4 – 4+length(未定义) 字节：
    Data，即数据。
4+length(未定义) – 5 字节：
    Fill byte，即填充字节，如果数据的长度不满足 2-4 字节中的Length的话，填充0x00
### Write Var（0x05）
写数据操作，通过指定变量的存储区域，地址（偏移量）及其大小或类型来执行。Write Var中Parameter的结构和 Read Var 中的
parameter 的结构一致，但是由于是写数据，因此和读数据相比，多了写的data结构：
Write Var的结构如下：
如上图所示，这就是一个向地址为0x000000的Flags（M）写入0x77100002的作业请求。  
与此对应，其Ack_Data 功能码结构也很类似：
与 Read Var 的结构相比，Write Var 在Data中只有一个Return code字段。  
上图中的Item1，表示向地址为0x000000的Flags（M）写入0x77100002成功！
### Request download（0x1a）
Request download，即请求下载功能码，说这个之前不得不说一下整个下载的流程。因为这个内容与 Download block、Download
ended 内容其实是连贯的，三个功能码构成了一个完整的下载流程。  
其流程如下：
说了上面的流程后，就可以来正式开始谈request download，Request download的Parameter的结构如下：
0 – 1 字节：
    Function: Request download (0x1a)，即Parameter/data 的函数声明
1 – 2 字节：
    Function Status，即功能状态，包含错误是否发生、是否使用另一个检索块/文件来请求的更多数据
2 – 4 字节：
    Unknown byte(s) in blockcontrol，无意义
4 – 8 字节：
    Unknown byte(s) in blockcontrol，无意义，一般为0x00000000
8 – 9 字节：
    Filename Length，即文件名长度
9 – 18 字节：
    Filename，文件名，其结构如下：
0 – 1 字节：
    File identifier，即文件标识符，有_ (Complete Module)、$ (Module header for up-loading)两种文件标识符；
1 – 3 字节：
    Block type，即块类型，在西门子设备中有8种不同类型的功能块，如下表：
Hex | 类型 | 描述  
---|---|---  
0x3038 | OB，ASCII为'08'，组织块 | OB决定用户程序的结构  
0x3039 | CMod，ASCII为'09'  
0x3041 | DB，ASCII为'0A'，数据块 | DB是用于存储用户数据的数据区域，除了指定给一个功能块的数据，还可以定义可以被任何块使用的共享数据  
0x3042 | SDB，ASCII为'0B'，系统和数据块 | 由编程软件自动生成主要存放PLC的硬件组态等信息，用户无法直接打开和更改  
0x3043 | FC，ASCII为'0C'，功能 |
FB、FC本质都是一样的，都相当于子程序，可以被其他程序调用（也可以调用其他子程序），FC使用的是共享数据块  
0x3044 | SFC，ASCII为'0D'，系统功能 | SFB和SFC集成在S7 CPU中可以让你访问一些重要的系统功能  
0x3045 | FB，ASCII为'0E'，功能块，带背景数据块 |
FB、FC本质都是一样的，都相当于子程序，可以被其他程序调用（也可以调用其他子程序），FB使用的是背景数据块  
0x3046 | SFB，ASCII为'0F'，系统功能块 | SFB和SFC集成在S7 CPU中可以让你访问一些重要的系统功能  
OB、FB、SFB、FC和SFC都包含部分程序，因此也称作逻辑块。每种块类型所允许的块的数量以及块的长度视CPU而定。  
3 – 8 字节：
Block number，即请求的块编号
8 – 9 字节：
    Destination filesystem，即请求目标的文件系统，有三种：
  * P（Passive (copied, but not chained) module)：被动文件系统
  * A (Active embedded module)：主动文件系统
  * B (Active as well as passive module)：既主既被文件系统
18 – 19 字节：
    Length part ，即参数的第二部分长度，也就是接下来的字段长度；
19 – 20 字节：
    Unknown char before load mem，即加载mem之前的未知字符
20 – 26 字节：
    Length of load memory，即装载长度
26 – 32 字节：
    Length of MC7 code，即 MC7 代码长度
以上即为 request download的结构，其实也就是要告诉 PLC，我要下载块了，如下实例：
上图中，请求的文件标识是_ (Complete Module)，请求块类型为DB，块的编号为00001，目标块的文件系统是P (Passive
(copied, but not chained) module)，所以文件名为_0A00001P，用于将DB1复制到被动文件系统或从被动文件系统复制。
与读写文件类似，这里PDU类型是Job ，而PDU类型是 Ack_Data时，Request download 的结构如下：
可以看到，其 Parameter 内容仅有一个function 确认，因此在 request download 的job和 ack_data
完成后，就可以进行download block了。
### Download block（0x1b）
Download block的Parameter的结构如下：
可以看到，`Download block`的`Parameter`内容是和`request download`的内容重合的，只不过与后者相比，少了18 –
32 字节的内容`（Length part、Unknown char before load mem、Length of load
memory、Length of MC7 code）`，上图的内容也就是下载块 `_0A00001P` 的作业请求。
PDU类型为Ack_Data时，其Parameter的结构如下图所示：
Parameter 内容仅有function确认和function 状态，但是多出了 Data
结构，内容主要为数据长度、未知字节以及数据内容，数据内容的长度。
需要注意的是，一个完整的下载块，可能会通过几次请求，如下所示：
### Download ended（0x1c）
Download ended的Parameter的结构如下：
从上图中可以看到`Download ended`跟`Download block`的`Parameter`和`Request
download`的`Parameter`的第一部分相同，仅是少了18 – 32 字节的内容`（Length part、Unknown char
before load mem、Length of load memory、Length of MC7
code）`，这里的意思也就是结束下载`0A00001P`的作业请求。
当PDU类型为Ack_Data时，Download ended的Parameter结构如下：
只有一个function确认，返回后即确定结束下载_0A00001P的响应，整个下载过程也就完成了。
### Start upload（0x1d）
Start upload，即开始上传功能码，和请求下载功能码类似，说这个之前也不得不说一下整个上传的流程。因为这个内容与 Upload、End upload
内容其实是连贯的，三个功能码构成了一个完整的上传流程。
其流程如下：
说了上面的流程后，就可以来正式开始谈Start upload，Start upload的Parameter的结构如下：
可以看到，`Start upload`的结构和`Request Download` 的前部分结构一致，如上图所示的内容，其实就是告诉 PLC
一个文件名，文件标识是`_ (Complete Module)`，块类型为`0B（SDB）`，块的编号为`00000`，目标块的文件系统是`A
(Active embedded module)`，所以文件名为`_0B00000A`
PDU类型为Ack_Data时，其结构如下图：
0 – 1 字节：
    Function: Start upload (0x1d)，即Parameter/data 的函数声明
1 – 2 字节：
    Function Status，即功能状态，包含错误是否发生、是否使用另一个检索块/文件来请求
2 – 4 字节：
    Unknown byte(s) in blockcontrol，即blockcontrol中的所有未知字节
4 – 8 字节：
    UploadID，即上传文件会话的 ID
8 – 9 字节：
    Blocklengthstring Length，即块长字符串后的字节长度
9 – 16 字节：
    Blocklength，完整上传块的长度（以字节为单位），可以拆分为多个PDU
### Upload（0x1e）
当PDU类型为Job时，Upload 结构中没有Data，其Parameter的结构，如下：Upload的Parameter的结构如下：
0 - 1 字节：
Function: Upload (0x1e)，功能码状态；
1 – 2 字节:
    Function Status，即功能状态，包含错误是否发生、是否使用另一个检索块/文件来请求
2 – 4 字节:
Unknown byte(s) in blockcontrol，blockcontrol中的所有未知字节
4 – 8 字节：
    UploadID，即上传的会话ID，主要是告诉Step7上传会话ID；
    这是 JOB 型的结构，当PDU类型为Ack_Data时，Upload有Data，其Parameter的结构，如下：
在parameter 中仅有 function确认以及 function status，多出的 data 中字节长度主要看 data 的长度，这个结构和
download block 是一致的。
### End upload（0x1f）
上传结束的会话过程，当所有上传块上传结束后，Step7对 PLC发送结束上传的作业请求，PLC收到后就关闭会话，然后返回一个Ack_Data响应。
End upload的Parameter的结构如下：
结构比较简单，没有什么特殊地方，共有8 字节内容，UploadID 最大，有4 个字节。
当PDU类型为Ack_Data时，其结构如下：
仅有一个功能确认的结构。到这里，一个上传的过程就结束了。
### PI-Service（0x28）
PI-Service 即程序调用服务 ，它用于PLC修改执行/内存状态的日常工作。这些命令可以用于启动或停止PLC控制程序、激活或删除程序块。
PI-Service的Parameter的结构如下：
0 – 1 字节：
    Function: PI-Service (0x28)，即功能码状态
1 – 8 字节：
    Unknown bytes，即未知字节
8 – 10 字节：
    Parameter block length，即参数块长度
10 -12 字节：
    Parameter block，即参数块
12 -13 字节：
    String length，即PI service的字符串长度
13 -22 字节：
    PI (program invocation) Service，程序调用服务名，具体见附录二
需要注意的是，如果服务调用的参数是块的话，Parameter block的结构是不同的，如下图所示：
上图中主要含义如下：
> 服务名称：_INSE  
>  参数：0800001P [OB 1]  
>  请求内容：激活OB 1
请求的结果如下图所示：
function确认，请求成功
### PLC Stop（0x29）
PLC STOP其实和PI -Service 是一致的，PLC Stop的Parameter的结构如下：
唯一和 PI-Service有区分的地方可能就是 PLC Stop 中不存在Parameter block结构，其他结构，包括
PDU类型为Ack_Data时也是一样，如下图所示：
### 小结
上面介绍的S7Comm中PDU类型为JOB和ACK_DATA的相关知识，还有最复杂的UserData的内容就不再介绍了（因为真的太多，太复杂，有兴趣可以自己查询相关资料，这里仅作JOB
和 ACK_DATA 的入门内容介绍），它的用处很广，比如`TIME functions、NC programming、CPU
functions、Cyclic data、Security`等。
# 0x02 MODBUS 协议
Modbus是Modicon公司推出的协议，ModbusRTU和Modbus