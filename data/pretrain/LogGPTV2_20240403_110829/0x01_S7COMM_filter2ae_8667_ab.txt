### 优化后的文本

#### 数据类型及长度
| 类型标识 | 数据类型 | 描述 |
| --- | --- | --- |
| 0 | NULL | 无数据 |
| 3 | BIT | 按位访问，长度以比特为单位 |
| 4 | BYTE/WORD/DWORD | 按字节/字/双字访问，长度以比特为单位 |
| 5 | INTEGER | 整数访问，长度以比特为单位 |
| 6 | DINTEGER | 整数访问，长度以字节为单位 |
| 7 | REAL | 实数访问，长度以字节为单位 |
| 9 | OCTET STRING | 八位字符串，长度以字节为单位 |

- **2 - 4 字节**：`Length`字段表示数据的长度。
- **4 - (4+length) 字节**：`Data`字段包含实际的数据。
- **(4+length) - 5 字节**：`Fill byte`字段用于填充，如果数据长度不足则填充0x00。

### Write Var（0x05）
`Write Var`指令用于写入数据，通过指定变量的存储区域、地址（偏移量）及其大小或类型来执行。其参数结构与`Read Var`相同，但增加了写入数据的结构。

**示例**：
- 向地址为0x000000的Flags（M）写入0x77100002的数据请求。

**响应**：
- `Ack_Data`功能码结构与`Read Var`类似，但在`Data`字段中只有一个`Return code`字段。
- 示例中的Item1表示向地址为0x000000的Flags（M）成功写入0x77100002。

### Request download（0x1a）
`Request download`是下载流程的一部分，与`Download block`和`Download ended`共同构成完整的下载过程。

**参数结构**：
- **0 - 1 字节**：`Function: Request download (0x1a)`，函数声明。
- **1 - 2 字节**：`Function Status`，功能状态，包括错误信息和其他状态。
- **2 - 4 字节**：`Unknown byte(s) in blockcontrol`，无意义字段。
- **4 - 8 字节**：`Unknown byte(s) in blockcontrol`，无意义字段，通常为0x00000000。
- **8 - 9 字节**：`Filename Length`，文件名长度。
- **9 - 18 字节**：`Filename`，文件名。
  - **0 - 1 字节**：`File identifier`，文件标识符（例如_或$）。
  - **1 - 3 字节**：`Block type`，块类型（如OB, DB, FC等）。
  - **3 - 8 字节**：`Block number`，请求的块编号。
  - **8 - 9 字节**：`Destination filesystem`，目标文件系统（P, A, B）。
- **18 - 19 字节**：`Length part`，参数第二部分的长度。
- **19 - 20 字节**：`Unknown char before load mem`，加载内存前的未知字符。
- **20 - 26 字节**：`Length of load memory`，装载长度。
- **26 - 32 字节**：`Length of MC7 code`，MC7代码长度。

**示例**：
- 请求下载文件标识为_ (Complete Module)，块类型为DB，编号为00001，目标文件系统为P (Passive module)。

**响应**：
- `Ack_Data`仅包含`function`确认。

### Download block（0x1b）
`Download block`用于下载具体的块内容，其参数结构与`Request download`类似，但缺少了`Length part`、`Unknown char before load mem`、`Length of load memory`和`Length of MC7 code`字段。

**示例**：
- 下载块 `_0A00001P` 的作业请求。

**响应**：
- `Ack_Data`包含`function`确认和`function status`，以及数据长度和内容。

### Download ended（0x1c）
`Download ended`用于结束下载过程，其参数结构与`Download block`和`Request download`的第一部分相同，但缺少了`Length part`、`Unknown char before load mem`、`Length of load memory`和`Length of MC7 code`字段。

**示例**：
- 结束下载 `_0A00001P` 的作业请求。

**响应**：
- `Ack_Data`仅包含`function`确认。

### Start upload（0x1d）
`Start upload`用于开始上传过程，其参数结构与`Request download`类似，但缺少了一些字段。

**参数结构**：
- **0 - 1 字节**：`Function: Start upload (0x1d)`，函数声明。
- **1 - 2 字节**：`Function Status`，功能状态。
- **2 - 4 字节**：`Unknown byte(s) in blockcontrol`，无意义字段。
- **4 - 8 字节**：`UploadID`，上传会话ID。
- **8 - 9 字节**：`Blocklengthstring Length`，块长字符串长度。
- **9 - 16 字节**：`Blocklength`，完整上传块的长度。

**示例**：
- 上传文件标识为_ (Complete Module)，块类型为SDB，编号为00000，目标文件系统为A (Active embedded module)。

**响应**：
- `Ack_Data`包含`function`确认和`function status`。

### Upload（0x1e）
`Upload`用于上传具体的数据块，其参数结构与`Start upload`类似，但缺少了一些字段。

**示例**：
- 上传数据块的作业请求。

**响应**：
- `Ack_Data`包含`function`确认和`function status`，以及数据长度和内容。

### End upload（0x1f）
`End upload`用于结束上传过程，其参数结构较为简单。

**参数结构**：
- **0 - 1 字节**：`Function: End upload (0x1f)`，函数声明。
- **1 - 8 字节**：`UploadID`，上传会话ID。

**响应**：
- `Ack_Data`仅包含`function`确认。

### PI-Service（0x28）
`PI-Service`用于PLC修改执行/内存状态的操作，如启动或停止PLC控制程序、激活或删除程序块。

**参数结构**：
- **0 - 1 字节**：`Function: PI-Service (0x28)`，函数声明。
- **1 - 8 字节**：`Unknown bytes`，无意义字段。
- **8 - 10 字节**：`Parameter block length`，参数块长度。
- **10 - 12 字节**：`Parameter block`，参数块。
- **12 - 13 字节**：`String length`，PI服务字符串长度。
- **13 - 22 字节**：`PI (program invocation) Service`，程序调用服务名。

**示例**：
- 服务名称：_INSE
- 参数：0800001P [OB 1]
- 请求内容：激活OB 1

**响应**：
- `function`确认，请求成功。

### PLC Stop（0x29）
`PLC Stop`用于停止PLC控制程序，其参数结构与`PI-Service`类似，但缺少了`Parameter block`字段。

**响应**：
- `Ack_Data`仅包含`function`确认。

### 小结
本文介绍了S7Comm协议中`JOB`和`ACK_DATA`类型的使用，包括读写操作、下载和上传流程。更复杂的`UserData`内容未在此详述，有兴趣者可自行查阅相关资料。