inique
primary key(id)
name
idint
createtabletest
首先创建一张表 test，建表语句如下：
这个案例的场景听起来比较蹊跷，按理说 insert 应该是影响最小的 DML 语句了，怎
场景1：3条insert语句导致的死锁问题
engine=innodb;
发起时间
经典的死锁案例集
（1）
int
T3
2
T1
not null
TRANSACTION
insert into test values(2018,826);
insert into test values(2017,827);
ACTIVE 1l sec inserting
begin;
会
话
表7-6
detected,
insert into test values(2016,827); --阻塞
 dumping detailed information.
产生死锁
begin;
会话2
第7章MySQL事务和锁丨283
---
## Page 306
284
入队列
|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
发起时间
Record
 RECORD LOCKS space id 32 paqe no 4 n bits 72 index name of table 
至具保的1k
12
T1
我们把整个过程和死锁日志结合起来，如下表7-7所示。
2017-08-31T15:19:51.632374Z 4 [Note] InnoDB: *** WE ROLL BACK TRANSACTION (1)
Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits
 RECORD LOCKS space id 32 paqe no
insert into test values(2018,826)
mysql.
2017-08-31T15:19:51.632274Z
2017-08-31T15:19:51.632216Z 4 [Note] InnoDB: ***(1) WAITING FOR THIS LOCK
因为是我们模拟的死锁场景，
3
1:len 4;hex 800007el;
0：
3
insert into test
1：
0：
lock struct(s),
0：
len
Ien
3857
len4;
len
len
1lock,
tables in use
申请X锁，类型是 insert intention，因为
产生循环）
已经持有X锁，所以进入队列等待
4；
4：
4；
4;
insert into test values(2018,826);
lock
两方都在互相等待，陷入僵持
insert into test values(2017,827);
hex
hex
hex
hex
持有X锁，record_lock
nex
8000033b;
800007el;
800007e1;
values (2016,827)
begin;
会
OS
heap
ACTIVE 34
话
locks gap before rec
thread
前
size
asc
asc
asc
asc
asc
asc
所以我们可以得到更为全面的信息，而在真实的环境
: RECoRD: n_fields 2; compact format; info bits 0
4 [Note] InnoDB:*** (2） WAITING FOR THIS LOCK
1136,
sec
！！！
[Note]
inserting
！！!
表7-7
！！！
insert 写入做 duplicate冲突检测，持有S 锁，等待会话2释
2 row lock(s),
insert into test values(2016,827);--阻塞
insert
insert
2；
compact
事务
放相关锁
(2）HOLDS THE LOCK(S):
产生死锁
 undo log entries 2
begin;
会话1
）TRANSACTION:
个
X锁，
TO BE GRANTED:
TO BE GRANTED:
test
test
root update
x锁）
test
名
---
## Page 307
拟场景是要高一些的，也可以通过这样的一个过程来举一反三，加深对于锁机制的理解。
中，
2017-08-31T16:15:05.277236Z
整个死锁的模拟过程如下表7-9所示。
insert
我们准备下数据：
为了模拟这个死锁过程，
场景2：事务回滚导致的死锁
在这种情况下，我们就需要联系上下文来构建整个死锁的场景，这个难度比我们模
我们通过死锁日志得到的结果可能是下表7-8这样的。
死锁相关的日志如下：
发起时间
ENGINE=InnoDB DEFAULT CHARSET=gbk
UNIQUE KEY
6
（1）TRANSACTION:
C
12
发起时间
int(11)
int(11)
int(11)
T2
into
KEY
(100213,215,215,312);
insert into test2values
test2
DEFAULT
DEFAULT
NOT NULL
申请X锁，类型是insert intention
insert into test values(2018,826);
rollback;
begin;
会话
一
values(100202,213
、a、）
NULL
NULL,
我们需要开启三个会话，
DEFAULT'O',
会话
C)
6
[Note]
(100214,215,215,312);
表7-9
表7-8
insert into test2 values
会话2
insert into test values(2016,827);；持有S锁
InnoDB:
,213
建表语句如下：
,312),(100212,214,214,
Transactions
产生死锁
begin;
会话1
(100215,215,215,312);
insert into test2values
第7章MySQL事务和锁丨285
产生死锁
会话3
deadlock
---
## Page 308
286丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
bits0
TO
bits0
root update
bits0
test
七锁
TO
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info
BE
发起时间
2017-08-31T16:15:05.277534Z6[Note]InnoDB:
2017-08-31T16:15:05.277496Z 6 [Note] InnoDB: *** (2) WAITING FOR THIS LOCK
0: len 8; hex 73757072656d756d; asc supremum;;
Record lock,
mysql
2017-08-31T16:15:05.277440Z 6[
Record lock,
我们把过程和死锁日志结合起来，就是下表7-10 这样一个过程。
insert
mysql
TRANSACTION 3880, ACTIVE 19 sec inserting
0：
GRANTED:
lock struct(s),
GRANTED:
心
二
len 8; hex 73757072656d756d; asc supremum;;
len 8; hex 73757072656d756d;
test2
test2`
into test2 values(100214,215,215,312)
values(100213,15,215,312);
持有X锁，record_lock
类型为insert intention
insertinto test2
trx
3881,
：heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info
trx
begin;
space
会
话
use
3
heap
ACTIVE8
id
size
33
locked
lock
申请获得S锁，duplicate 检查
values(100214,215,15,312);
sec
modeS-
1136,
[Note]
inserting
[Note]
insert into test2
表7-10
asc
会话1
2 row lock(s),
4nbits
4nbits 72index
supremum;;
InnoDB:
InnoDB:
*** WE ROLL BACK TRANSACTION (2)
***（2）TRANSACTION:
乙
1;compact
undo log entries 1
 query id 84 localhost
会话2
S THE LOCK(S):
format; info
of
table
---
## Page 309
.detected, dumping detailed information.
瞬间其实是在T2→T5 的一个状态。顺着整个过程下来，还是比较容易理解的。
2017-09-07T16:45:56.652608Z 18 [Note] InnoDB: *** (1) WAITING FOR THIS LOCK
TRANSACTION 1888, ACTIVE 35 sec
2017-09-07T16:45:56.652535Z
insert into t8 values(null,10)
mysql tables in use 1,
日志如下：
模拟过程如下表 7-11所示。
unique
orimary
c2 int default null,
create table t8
首先我们创建一张表 t8，整个过程相对比较简单，开启两个会话即可。
场景3：自增列导致的死锁
通过这样的过程我们可以看到如果单单从日志去推理还是比较复杂的，整个死锁的
发起时间
ENGINE=InnoDB
发起时间
T6
T4
13