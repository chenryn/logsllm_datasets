项⽬目末尾时发现多个开发团队
的变更更集成在⼀一起⽆无法⼯工作
修复问题需要数天甚⾄至数周的调查，
谁破坏的代码，以及考虑如何修复
DevOps典范：部署前置时间数分钟
开发收到他们⼯工作快速和持续的反馈
可以让他们快速和独⽴立的执⾏行行、集成
和验证代码，并部署到⽣生产环境（⾃自
助或通过他⼈人）
如何实现
持续将⼩小批量量代码签⼊入版本控制库，
执⾏行行⾃自动化测试和探索性测试，部署
到⽣生产环境
模块化架构，⾼高度封装和解耦，⼩小团
队可以⾼高度⾃自治，即使有⼩小的失败也
不不会导致全局中断
Percent complete and accurate 
(%C/A) 作为返⼯工的度量量
反映价值流中每⼀一步输出的质量量
三步⼯工作法：DevOps的基础原则
First Way enables fast left-to-right ﬂow
从开发到运营到客户
让⼯工作可视化
减少⼯工作批量量和间隔
内建质量量
防⽌止缺陷流转到下游
实践：持续构建、集成、测试、部署；
按需创建环境，限制在制品，构建安全
变更更的环境和组织
为全局⽬目标持续优化
Second Way enables the fast and 
constant ﬂow of feedback from 
right to left
放⼤大反馈，防⽌止问题再次发⽣生
快速探测和恢复
在源头建⽴立质量量
在需要时，产⽣生和嵌⼊入需要的知识
持续缩短和放⼤大反馈循环
Third Way enables the creation of 
a generative, high-trust culture
⽀支持动态、纪律律性和科学的⽅方法进⾏行行实验和冒险
促进形成组织学习，⽆无论是成功或失败经验
构建更更为安全的⼯工作系统，更更好承担⻛风
险和进⾏行行实验，⽐比竞争对⼿手学习更更快
将新知识、变⾰革中的局部发现转换为全局改进
2. The Principles of Flow
优化全局⽬目标⽽而⾮非局部⽬目标
局部⽬目标
开发功能完成率
测试缺陷发现率
运维可⽤用性度量量
全局⽬目标
降低变更更部署到⽣生产环境的时间
增加服务的可靠性和质量量
让⼯工作可视化
技术价值流和制造业价值
流的区别：⼯工作不不可视
⽆无法轻易易看到阻塞和约束点的积压
团队之间容易易因信息不不全⽽而踢⽪皮球，
问题延迟到投产才发现
Kanban 或 Sprint计划板是可视化⼯工作的好办法
不不仅我们的⼯工作变得可视化了了
还可以管理理流动，从左到右越快越好
可以度量量前置周期（从卡⽚片放到看板
到移动到Done状态）
看板跨越整个价值流，不不仅是开发完成，
要运⾏行行到⽣生产环境，交付价值到客户
⼲干系⼈人可以根据全局⽬目标调整优先级
每个⼯工作单元可以优先完成最⾼高优先
级的单⼀一任务，增加吞吐量量
限制在制品 (WIP)
⼯工作的动态性
尤其是要服务于不不同需求⽅方的共享服务
处理理来⾃自各种渠道的紧急⼯工作
⼯工单系统
邮件，电话，聊天室
管理理的向上汇报
⽇日常⼯工作经常被打断，多任务上下⽂文切换成本⾼高
通过看板可以限制并⾏行行任务，
⽐比如限制每列列的卡⽚片数的上限
⽐比如测试的WIP限制为3
如果已经达到3个卡⽚片
⽆无法有新的卡⽚片加⼊入
除⾮非有卡⽚片完成或回退到左侧队列列
除⾮非有卡⽚片加到看板，否则不不⼯工作
强制所有⼯工作必须可视化
更更容易易发现阻碍⼯工作完成的问题
暂缓开始，聚焦完成
减少批量量规模
寄信件的例例⼦子
10封信件要发，每封信件有四个步
骤：折纸、插⼊入信封、封⼝口、贴邮票
⽅方式⼀一：⼤大批量量策略略：先折纸10张，然后
统⼀一插⼊入信封，然后统⼀一封⼝口，再贴邮票
⽅方式⼆二：⼩小批量量策略略：第⼀一封信做完四个
步骤，再开始做第⼆二封信，以此类推
⽅方式⼀一：第⼀一个完成的信件花费310秒，
更更糟的是如果折纸步骤有错，在200秒
后才会发现，然后所有信件都要重做
⽅方式⼆二：第⼀一个完成的信件花费40秒，
⽐比⽅方式⼀一快8倍，如果折纸步骤有错，只
需要把第⼀一个完成的信件重做
⼩小批量量的好处
更更少的WIP
更更快的前置时间
快速发现错误
更更少的返⼯工
在技术价值流中，与单
件流对等的是持续部署
每次变更更提交到版本控制库，被集成、
测试和部署到⽣生产环境
减少交接数量量
将代码从版本库转移到
⽣生产环境需要很多操作
需要多个部⻔门执⾏行行多种任务
包括功能测试、集成测试、环境准备、
系统/存储/⽹网络/负载均衡/安全管理理等
⼯工作在团队间交接，需要各种沟通
请求、说明、发信号
协调、排序、排期
解决冲突、测试与验证
需要使⽤用不不同的⼯工单或项⽬目管理理系统
编写各类技术说明⽂文档
沟通会议、邮件、电话
使⽤用⽂文件系统/FTP/Wiki进⾏行行共享
以上每⼀一个步骤都有潜在队列列
前置周期很⻓长
经常需要向上升级以满⾜足时间要求
交接过程中会有信息丢失
管理理员接到⼯工单创建⼀一个账号，但不不知
道是哪个服务的、为什什么、有⽆无依赖、
是否是重复性的⼯工作等
为了了解决以上问题，需要
减少交接数量量
⾃自动化 ⼯工作的重要部分
调整组织结构
可以⾃自⼰己交付价值给客户
⽽而不不⽤用⼀一直依赖其他⼈人
持续识别和拓拓宽约束
为了了缩短前置时间并增加吞吐量量，
需要持续识别约束并改进⼯工作容量量
在约束点之前改进，只会让⼯工作更更快
的堆积在瓶颈点
在瓶颈点之后改进，会保持饥饿，等
待⼯工作从瓶颈点通过
解决约束的五个步骤
识别系统约束
考虑如何拓拓宽约束（挖尽潜能）
约束资源休息时找⼈人替换
让其他⼀一切配合上述决定
帮助约束资源，任务转移到⾮非瓶颈资源
不不允许约束资源停⼯工
释放⾜足够的WIP，保持约束队资源列列在预计的⻓长度
移除过多的WIP
提升系统的约束（如增加资源）
如果约束解决，回到第⼀一步，
但不不允许惰性导致系统约束
DevOps转型中，约束
经常遵循以下发展过程
环境建⽴立
测试或⽣生产环境不不能等待数周才建好
对策：按需、完全⾃自服务的创建环境
代码部署
代码部署不不能通过多个⼿手⼯工、易易出错
的多⼈人协作完成
对策：⾃自动化部署，⽬目标是开发⾃自服
务且完全⾃自动化
测试启动和运⾏行行
不不能每次花费两周准备测试环境和数
据，另外四周进⾏行行⼿手⼯工回归测试
对策：⾃自动化测试集，让测试速度跟
上代码部署速度，平⾏行行进⾏行行
过于紧耦合的架构
不不能每次代码变更更都要⼯工程师到管
理理层申请变更更
对策：构造解耦架构，变更更可以更更
安全和⾃自治，提⾼高开发⽣生产率
以上约束解决后，约束点会
在开发或产品负责⼈人
限制只有好的商业假设和必要的代码
开发，⽤用于向真实⽤用户验证假设
在价值流中排除艰⾟辛和浪费
制造业的七种浪费
inventory, overproduction, extra processing, 
transportation, waiting, motion, and defects
软件开发中的浪费
部分完成的⼯工作
未评审的需求⽂文档和变更更单
等待QA审核或系统管理理员处理理
额外的流程
下游⼯工作不不使⽤用的⽂文档
对输出不不增值的审核审批
额外的功能
范围镀⾦金金
增加测试和管理理的复杂性和⼯工作量量
任务切换
需要多项⽬目切换，管理理⼯工作依赖
增加了了额外的⼯工作量量和时间消耗
等待浪费
等待⼯工作所需资源
增加了了周期时间，阻⽌止了了⽤用户获得价值
动作浪费
需要频繁沟通的⼈人不不在⼀一处办公
交接经常导致动作浪费，需要额
外的沟通和解决歧义