A3
eﬀect
heap
eﬀect
heap
eﬀect heap eﬀect
A4
heap
Galaxy S7*
exynos5 3.18.14
D1
T3:N7,N16
T4:N15,N11
T5:N17,N14,
yes
T1:N18
no
no
L1
T3:N7,N16
Galaxy S6*
Meizu Pro 5
Nexus 6P*
LG V10
HTC A9
yes
yes
N12,N13
exynos5 3.10.61 D1,D4,D3 T3:N5,N3
exynos5 3.10.61 D1,D4
T3:N5,N3
msm8994 3.10.73 D1,D2 T4:N2,N4,N1 yes T1:N19 T2:N20 yes T4:N6 L2,L4
msm8992 3.10.49 D1,D2 T4:N2,N4,N1 yes T1:N19 T2:N20 no
no L2,L4
msm8952 3.10.73 D1,D2 T4:N2,N4,N1 yes T1:N19 T2:N20 yes T4:N6 L2,L4
T4:N2,N4,N1 yes T1:N19 T2:N20 yes T4:N6 L2,L4
no L2,L4
no L2,L4
no L2,L4
msm8992 3.10.73 D1,D2 T4:N2,N4,N1 yes T1:N19 T2:N20 no
T4:N2,N4,N1 yes T1:N19 T2:N20 no
T4:N2,N4,N1 yes T1:N19 T2:N20 no
T1:N18
T1:N18
D2
D2
D2
no
no
no
no
L1
L1
T3:N3,N5
T3:N3,N5
T4:N1,N4,N2
T4:N1,N4,N2
T4:N1,N4,N2
T4:N1,N4,N2
T4:N1,N4,N2
T4:N1,N4,N2
T4:N1,N4,N2
T3:N1
T3:N1
T3:N1
T3:N1
Oppo R7sm* msm8916 3.10.49
Nexus 5X*
Xiaomi 4C* msm8992 3.10.49
vivo Y927
msm8916 3.10.28
Nexus 5*
msm8974
3.4.0
LG D950*
msm8974
3.4.0
HTC D816
msm8226
3.4.0
Oneplus One msm8974
3.4.0
D2
D2
D2
D2
Galaxy note 3 msm8974
3.4.0
D2,D4
T4:N2,N4
T3:N1,N6
T4:N2,N4
T3:N1,N6
T4:N2,N4
T3:N1,N6
T4:N2,N4
T3:N1,N6
T4:N2,N4
T3:N1,N6,N7
yes T1:N21 T2:N20 no
yes T1:N19 T2:N20 no
yes T1:N19 T2:N20 no
yes T1:N19 T2:N20 no
no
no
no
no
L2
L2
L2
L2
yes T1:N19 T2:N20 no
no L1,L2
T3:N1,N7
Huawei P9
hi3650
3.4.90
Huawei Mate8*
hi3650
3.4.86
D5
D5
T3:N8
yes T1:N22 T2:N10 no
T3:N8
yes T1:N22 T2:N10 no
no
no
L4
L4
* Devices with detailed experimentation and constructed exploits
- “eﬀect” column shows only attack eﬀects known to us (which can be incomplete)
[A] Vulnerabilities Classiﬁcation: A1:DoS for limited size heaps A2:DoS for unlimited size heaps
A3:System crash due to protection exception A4:Information leakage
T4:N9
T2:N10
T4:N9
T2:N10
[D] DoS Attack: D1:ﬁngerprint D2:audio D3:video D4:camera D5:system crash
[L] Information Leakage: L1:camera L2:audio L3:video L4:general user apps
[T] Heap Type: T1:SYSTEM T2:SYSTEM CONTIG T3:CARVEOUT T4:CMA T5:SECURE CMA
[N] Heap Name: N1:audio N2:adsp N3:video N4:qsecom N5:secdma N6:pil N7:camera N8:carveout-heap N9:ion-dma-heap
N10:system-contig-heap N11:video nfw N12:video fw N13:video scaler N14:video frame N15:crypto N16:gpu crc
N17:gpu buﬀer N18:ion noncontig heap N19:system N20:kmalloc N21:vmalloc N22:system heap
Table 2: Vulnerability summary
In this section, we will ﬁrst give the experiment setting
and a summary of discovered vulnerability instances. Then
we will evaluate the eﬀectiveness of the methodology to dis-
cover two classes of vulnerabilities, including how successful
is the static taint analysis tool in practice. Finally, we will
use case studies to highlights important ﬁndings.
Scope. We have analyzed 17 Android devices in total,
which are listed in Table 2. They cover a wide range of
devices such as Nexus, Samsung, to HTC. All of them are
veriﬁed through runtime testing and source code analysis.
Out of 17 devices, we have experimented in detail using 8
devices, for which we have constructed exploits to conﬁrm
the existence of vulnerabilities.
5.1 Summary of ION related Vulnerabilities
After applying the methodology described in §4, we re-
port our ﬁndings in Table 2. Note that we group the tested
devices based on their hardware platforms (SoC vendor and
model) and kernel versions. This is because hardware de-
vices are the most common reason for customization of ION.
Generally speaking, devices sharing the same hardware plat-
form will have similar conﬁgurations regarding ION heap
types and instances.
In addition, diﬀerent phone vendors
and kernel versions may also have an impact.
In our study, we focus on three main general hardware
platforms: MSM (Qualcomm), Exynos (Samsung), and Hisi
(Huawei). Each platform can also include diﬀerent models,
e.g., Snapdragon 810 and 820 correspond to two diﬀerent
Qualcomm SoCs, along with numerous Android and kernel
versions. As we can see in the Table, there exist a variety of
vulnerable ION heaps (up to 22 instances across all devices).
In the Table, we breakdown the vulnerabilities into 4 cat-
egories, along with their corresponding attack eﬀects and
vulnerable heaps (types and instances). For instance, re-
garding A1: DoS against heaps of limited size, all experi-
mented devices are vulnerable in one form or another. On
Huawei devices speciﬁcally, A1 attacks can even cause sys-
tem crash directly. Regarding A4: information leakage, all
Heap Type
SYSTEM
1158(8)
SYSTEM CONTIG 288(6)
CMA
CARVEOUT
4(4)
0(0)
TP*
FP* FN* Un-zeroed paths? Analysis/Actual result
Involved allocation function
5
0
2
0
0
0
0
0
n
n
y
y
zeroed/zeroed
zeroed/zeroed
un-zeroed/un-zeroed
un-zeroed/un-zeroed
alloc pages()**
alloc pages()**
dma alloc attrs()
gen pool alloc aligned()
* TP, FP, and FN refer to the amount of call chains. The number in brackets indicate the number of paths.
** The parameters passed to alloc pages() are diﬀerent for the two heap types.
Table 3: Static taint analysis result on Nexus 6P
studied Android devices have unzeroed memory that can be
leaked from diﬀerent heap types. The most surprising result
is that 9 out of 17 devices have the information leakage vul-
nerabilities that allow a malicious app to obtain dirty pages
used by other apps, which can contain sensitive information
such as passwords, credit card numbers, or even secret keys.
Although the number of Android devices we analyze is
limited, they do cover most representative manufactures,
hardware platforms and software versions, thus we can in-
fer that most Android devices to date are aﬀected by ION-
related vulnerabilities.
Speciﬁcally, Nexus 6P, Samsung
Galaxy S7, and Huawei Mate 8 represent the latest devices
from each manufacturer, all of which have both DoS and
information leakage vulnerabilities.
5.2 Runtime Testing for DoS Vulnerabilities
The runtime testing procedure described in §4.1 is over-
all eﬀective for most devices; however, when applying this
methodology, we did encounter some special cases in which
the normal routine fails to give useful results even though
we can successfully allocate arbitrary memory buﬀers from
a certain heap. We describe them below.
Failure to identify any DoS vulnerabilities. For cer-
tain heaps with limited size on some devices, even after we
occupy all of its free space, no issues can be observed. After
looking into these cases, we conclude two main reasons for
this: 1) Some heaps will be rarely, if not never, used by their
host devices. For instance, we cannot observe any utiliza-
tion of “kmalloc” heap, whose type is SYSTEM CONTIG,
on Nexus 6P in our experiments. Besides, there exists other
heaps that may be used in only the early stage of system
booting, such as “pil” heaps on some devices that are used
to load certain ﬁrmware images during the boot process.
Vulnerabilities depending on proper timing.
In
some cases, we can successfully perform DoS attacks against
certain system functionalities by exhausting speciﬁc heaps,
but not at arbitrary points in time. In the case of Samsung
S6’s ﬁngerprint authentication service, a CARVEOUT heap
named “secdma” is used to fulﬁll its task. If a malicious app
occupies the entire heap ahead of time, then ﬁngerprint ser-
vice will stop functioning. The challenge is that the service
itself typically occupies the heap when the screen is locked
and releases it only when the screen is unlocked. Generally
speaking, our testing methodology may not always be able
to catch the correct timing; however, such vulnerabilities do
exist and are simply harder to trigger. Manual investiga-
tions are performed to catch these cases as reported later in
§4.1.
5.3 Static Taint Analysis for Dirty Pages
Next, we evaluate the eﬀectiveness of the static taint anal-
ysis described in §4.2.1, using Nexus 6P as a case study. The
1. ion_cma_allocate
2. dma_alloc_writecombine
2. dma_alloc_nonconsistent
3.   dma_alloc_attrs
733DWK
4.   dma_alloc_from_coherent
5.   memset
8Q]HURHGDOORFDWLRQ3DWK
4.   arm64_swiotlb_alloc_coherent
)33DWK
...
7.   apply_to_pud_range
...
11. pmd_alloc_one
12. get_zeroed_page
5.   dma_alloc_from_contiguous
...
Figure 5: Call chains of interest for CMA heap type
source code we analyze is from kernel version 3.10.73.
In
total, it takes about 9.5 hours for the tool to analyze the
memory allocation functions for 4 ION heap types — SYS-
TEM, SYSTEM CONTIG, CMA, and CARVEOUT — on a
server with Intel Xeon E5-2640 V2 CPU and 64GB physical
memory. The analyzed LOC is over 10,000. We omit the
remaining heap types that fall in two categories: 1) the ones
that never have any instances, e.g., REMOVED type; 2) the
ones that deny any mmap() requests from user space, e.g.,
SECURE CMA, indicating that it is impossible to access
the memory although they may contain dirty pages.
We summarize the result of the tool on Nexus 6P’s kernel
source code in Table 3. We output the number of taint paths
as well as the corresponding unique call chains (the number
in brackets indicates the number of unique call chains). We
conﬁrm the true positives, false positives, and false negatives
by manually analyzing the source code. The false positives
are relatively easy to deal with, as a developer or researcher
can quickly inspect the output path (or even the function
call chain) to conﬁrm them (we will explain the FP cases of
CMA heap later). For false negatives, it is more problematic
as we may not even realize this and incorrectly report that
there are no zeroing operations while in fact there are. One
potential source of false negatives is the incomplete set of
sink functions considered, which include the common func-
tions such as memset() and bzero() so far. However in our
evaluation, we ﬁnd that memset() and its wrappers are the
only used sinks.
CMA heap type. We ﬁrst discuss the false positive
taint paths in CMA heap. We group such paths into call
chains as shown in Figure 5 (labelled “FP path”). When
we look at the results, the taint analysis in fact correctly
outputs the taint result according to the source and sink