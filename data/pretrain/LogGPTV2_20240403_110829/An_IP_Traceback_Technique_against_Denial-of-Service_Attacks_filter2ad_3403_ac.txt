while (count <4 and k < 8 and (8-k+count) < 4) { 
/* “8-k+count < 4” implies count will not be 4 after exiting 
this while loop */ 
select a packet  from Xk of P0, which has not been selected 
before in this while loop; 
path = (A1,1 + A1,2x + A1,3x2 + A1,4x3) mod p
// A1,j (j = 1, 2, 3, 4) form the IP address of R
// x and Fullpath are from the selected packet 
if (path == Fullpath ) count = count + 1; 
if ((all packets in Xk have been visited)or(path==Fullpath))
k = k + 1; 
}
if (count == 4) insert R into G next to V;
}
for d = 1 to maxd
for every router R inserted into G in the last loop { 
for every upstream router R’ of R in M or R itself { 
k = 0; 
while (k < 8){ 
select a packet from Xk of Pd which has not been 
selected before in this while loop; 
path = (A1,1 + A1,2x + A1,3x2 + A1,4x3 + A2,1x4
+ A2,2x5 + A2,3x6 + A2,4x7) mod p
// A1,j (j = 1, 2, 3, 4) form the IP address of R’
// A2,j (j = 1, 2, 3, 4) form the IP address of R
if (path == Fullpath ) k = k + 1; 
if (all packets in Xk have been visited) 
quit this while loop; 
}
if (k == 8) insert R’ into G next to R;
}
}
output the reconstructed attack paths from graph G
Figure 5. Attack paths reconstruction algorithm. 
Pn
X0
X1
F
F01
F0a
F11
x
d
n
x0
… … …
n
x0
n
x1
… … …
n
x1
… … … …
n
x7
… … …
n
x7
X7
F1b
F71
F7h
Figure 6. Packet set Pn . 
The initial stage of the attack paths reconstruction starts 
from the routers adjacent to the victim. The algorithm first 
identifies the nearest routers in layer 1 (whose distance to 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:38 UTC from IEEE Xplore.  Restrictions apply. 
the victim is 0). The table in Figure 6 depicts  the  packet 
set Pn. The routers in layer 1 can be identified using only 
the  packet  set  P0  since  we  have  grouped  the  packets  by 
distance d. For each adjacent upstream router of V in the 
upstream routers map M, and for each packet in Xi (i = 0, 
1, … , 7), the value for path is computed as follows (x and 
Fullpath are obtained from the packet):
path
=
+
(
A
1,1
xA
2,1
i
+
2
xA
3,1
i
+
xA
4,1
3
i
)
mod
.
p
If path is equal to Fullpath, we move to another packet 
set Xi+1. If each of the 4 packet sets has at least one packet 
yielding path equal to Fullpath, we can conclude that the 
selected router is  on  one  of  the  attack  paths  and  insert  it 
into the reconstructed attack paths graph.
Now the victim will identify the routers in other layers 
after  finding  the  routers  in  the  first  layer.  Suppose  an 
attack  path  has  been  reconstructed  from  the  victim  to 
router Rn in layer n (whose distance to the victim is n-1). 
Now,  we  need  to  identify  Rn’s  upstream  router  Rn+1  in 
layer n+1 by using the packet set Pn. For each router next 
to Rn in M, and for each packet in Xi (i = 0, 1, … , 7), the 
value for path is computed as follows: 
path
=
+
+
(
A
1,1
5
xA
2,2
i
+
xA
2,1
i
+
6
xA
3,2
i
2
xA
3,1
i
+
+
3
xA
4,1
i
7
)
mod
xA
4,2
i
+
4
xA
1,2
i
.
p
If path is equal to Fullpath, we move to another packet 
set Xi+1. If no packet in Xi yields the same value for path
and Fullpath, we can declare that the selected router is not 
on the attack paths of this layer (it could be on the paths of 
other layers). If each of the 8 packet sets has at least one 
packet yielding the same values, we can conclude that the 
selected router is  on  one  of  the  attack  paths  and  insert  it 
into  the  reconstructed  attack  paths  graph. Here  we  must 
check whether a router has marked a single packet twice. 
This case happens when a request packet has been marked 
by  a  router  of  a  reflector  and  then  the  reply  packet  goes 
through the same router to the victim; so this router could 
mark the packet again. 
By  this  method,  we  can  try  different  branches  in  the 
upstream  routers  map  to  reconstruct  all  the  attack  paths. 
We  use  4  packets  to  identify  one  nearest  router  and  8 
packets to identify two adjacent routers to make sure that 
there  are  no  collisions  because  the  corresponding  matrix 
equations have a unique solution. 
5. Backward Compatibility 
Backward  compatibility  is  the  most  important  issue 
concerning whether a proposal can be put into practice. As 
our marking scheme requires writing some information to 
the IP header of a packet, we should find out those bits in 
the IP header which can be overwritten. 
Version
H.Len
Service 
Type 
Total Length 
Identification (16-bit) 
(1-bit) Flags 
(total 3-bit) 
Fragmentation
Offset 
Time to Live 
Protocol
Source IP Address 
Header Checksum 
Destination IP Address 
Figure  7.  IP  header.  The  shaded  fields  (17  bits)  are  little  used  in 
current network implementation 
Figure 7 shows the structure of the IP header. The 16-
bit  Identification  field  allows  the  destination  host  to 
determine  which  datagram  a  newly  arrived  fragment 
belongs  to.  Stoica  and  Zhang  pointed  out  that  less  than 
0.25% of the entire network traffic is fragments [6]; so the 
bits for the identification field can be overloaded with the 
marking information. In addition, one out of three bits in 
the Flags field is of little use in the current version of IP 
protocol  [1].  Thus  we  can  use  up  to  17  bits  to  store 
marking information. 
The total number of bits b needed to store the marking 
information  can  be  estimated  as  b  =  log2(p)  +  log2(d)  + 
log2(n).  The  first  term  estimates  the  bits  needed  to  store 
Fullpath, which has a value less than p. The second term 
estimates  the  bits  needed  to  store  distance,  and  the  third 
term estimates the bits needed to store x. Letting c = 4, d = 
32, p = 257, and  n =  2c = 8, the  above  expression  for  b 
can be computed to a value no more than 17. The reason 
for  setting  n  =  2c  is  that  each  Fullpath  is  related  to  2c
fragments of two IP addresses; as  long  as  we  provide  2c
distinct values of x, the two IP addresses can be uniquely 
identified. Thus 3 bits would be needed to store 8 distinct 
values of x.
There  is  a  tradeoff  between  the  number  of  packets 
required for reconstruction and the number of bits needed. 
A smaller value for c implies a smaller number of packets 
and  a  shorter  reconstruction  time.  However,  the  total 
number of bits in the IP header that can be used to store 
the marking information is quite limited, so we eclectically 
choose c = 4 in our implementation. In general, a packet 
can reach its destination by passing no more than 32 hops 
[5]. For reflector attacks, we can assume the distance field 
of  a  packet  is  less  than  64.  Therefore,  6  bits  would  be 
sufficient for the distance field. Then there would be only 
8  (17  –  3  –  6)  bits  left  for  storing  the  Fullpath  value, 
which ranges from 0 to 256. Thus two of the values will 
be  in  collision.  In  our  implementation,  if  the  Fullpath
value  calculated  by  the  router  is  256,  the  router  would 
write 0 to the Fullpath field. While doing the attack paths 
reconstruction, if the path value calculated by the victim is 
256,  the  victim  would  convert  it  to  0.  With  this  simple 
technique  employed  to  handle  the  collision  of  two 
different  values,  the  probability  of  reconstructing  a  false 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:38 UTC from IEEE Xplore.  Restrictions apply. 
positive  would  be  extremely  low.  In  our  thousands  of 
attack paths reconstruction experiments, no false positives 
were generated.  
In  summary,  we  have  identified  sufficient  appropriate 
bits in the IP header for storing the marking information; 
therefore,  the  proposed  marking  scheme  is  backward 
compatible with the current version of the IP protocol and 
can be effectively put into practice. 
6. Experiment results 
We  have  performed  a  good  number  of  simulation 
experiments  to  examine  the  feasibility  and  evaluate  the 
performance  of  our  marking  scheme.  The  primary 
objective  of  the  experiments  is  to  investigate  some 
parameters related to the marking scheme: the number of 
false  positives,  minimum  number  of  packets  needed  for 
attack paths reconstruction, reconstruction time, etc. 
In  preparation  for  the  simulation  experiments,  we 
prepared an upstream routers map with over 200 routers.  
The  routers  were  then  assigned  some  real  IP  addresses 
obtained  from  the  Internet  by  using  the  traceroute
technique.  The attack paths are randomly chosen from the 
paths  in  the  map;  and  different  number  of  packets  are 
generated and transmitted along each of these paths. Each 
of the routers simulates marking the packets as defined in 
the  marking  algorithm.  With  the  pool  of  marked  packets 
collected,  the  victim  simulates  applying  the  proposed 
reconstruction algorithm to reconstruct all the attack paths. 
   Len1
Len2 
0 
5 
10 
15 
20 
25 
30 
  Len1
Len2 
0 
5 
10 
15 
20 
25 
30 
5 
660 
610 
615 
620 
630 
640 
645 
5 
1900
1830
1840
1845
1850
1860
1870
10 