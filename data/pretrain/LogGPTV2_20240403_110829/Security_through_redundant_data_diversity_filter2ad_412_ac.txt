UID  values  are  transformed  using  the  appropriate 
reexpression function. When the variants then perform 
an  operation  such  as  a  read  on  an  unshared  file,  each 
will  do  it  on  its  separate  file,  while  shared  files  will 
behave the same as before, having one variant perform 
the system call and giving all variants the same result. 
variants 
both 
request 
We  modified  the  kernel  so  that  each  variant  keeps 
its  own  file  table  data  structure  where  information 
about  the  processes’  open  files  resides.  We  keep  this 
data-structure  synchronized  between  the  variants  so 
that the nth slot in P0’s data structure corresponds to the 
nth slot in P1’s data structure. When a file is opened, the 
kernel creates an entry for that file in each variants’ file 
table.  If  the  file  being  opened  is  shared  (the  normal 
case), the kernel marks the bit in the shared files data-
structure  to  indicate  it,  otherwise  it  will  clear  that  bit. 
When subsequent system calls are made that use a file 
descriptor,  the  kernel  accesses  the  shared  files  bitmap 
and  determine  if  the  files  are  shared  or  unshared.  If 
they  are  shared,  the  kernel  will  have  P0  perform  the 
system call and give the result to all variants. If the file 
is  unshared,  each  variant  will  perform  the  system  call 
reading  or  writing  data  to  their  own  diversified  file. 
When the files are closed the kernel will clear the entry 
in all variants’ file tables. 
3.5  System Calls 
The kernel calls that take UID parameters are the target 
interface for the data variation. Hence, the implementa-
tions of these calls should incorporate the inverse data 
transformation.  We  also  use  the  system  calls  to  check 
that  the  variants  have  not  diverged.  They  should 
operate  identically  on  the  same  data  (after  it  has  been 
transformed using the appropriate inverse reexpression 
function). 
We  modified  the  wrappers  of  all  system  calls  that 
involve  UID  parameters.  For  calls  that  take  UID 
parameters  such  as  long  setuid(uid_t), 
the 
Table 2. Detection System Calls. 
wrapper  applies  the  inverse  reexpression  function.  It 
also checks that the same actual (post-inverse transfor-
mation)  values  are  passed  into  the  call  by  all  variants. 
For  the  system  calls  that  return  a  UID  value  such  as 
uid_t  getuid(),  the  wrapper  applies  the  re-ex-
pression transformation on the result (which is trusted), 
giving each variant its own varied UID value.  
We  are  also  concerned  with  attacks  where  a  UID 
value is corrupted in a way that leads to other behaviors 
before  one  of  the  system  calls  involves  a  UID 
parameter  directly. Ideally, the monitor would observe 
and  check  the  variants  to  be  in  normally  equivalent 
states  after  each  transition.  This  is  impractical,  so  our 
current implementation approximates this by observing 
the  system  call  made  by  the  variants  and  ensures  that 
they are equivalent. To ensure detection, we transform 
the  program  to  expose  UID  uses  to  the  monitor  with 
newly  created  system  calls.  This  ensures  that  the 
monitor  observes  any  UID  divergence  before  the  cor-
rupted UID value is used.  
Table 2 summarizes the newly created system calls. 
The  uid_value(uid_t)  function  passes  the  UID 
value  to  the  kernel  which  compares  the  values  across 
the variants and ensures they have equivalent meanings 
(i.e.,  they  are  identical  after  applying  the  appropriate 
inverse  reexpression  functions).  The  function  returns 
the  same  value  that  was  passed  in.  An  example  where 
this is used is in getpwname(uid_t): 
pw = getpwname(uid); 
becomes 
pw = getpwname(uid_value
uid_value(uid)); 
uid_value
uid_value
The  cond_chk(bool)  function  checks  a  condition 
code,  which  UID  values  may  directly  or  indirectly 
affect.  It  is  passed  in  the  result  of  a  conditional 
expression and ensures that both variants take the same 
path. For example, (pw == NULL) would  be  replaced 
by (cond_chk
cond_chk(pw == NULL)). 
cond_chk
cond_chk
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE192DSN 2008: Nguyen-Tuong et al.Configuration 
Description 
Unsaturated 
Saturated 
Throughput (KB/s) 
Latency (ms) 
Throughput (KB/s) 
Latency (ms) 
1 
2 
3 
4 
Unmodified 
Transformed 
2-Variant 
2-Variant 
Apache 
Apache 
1010 
5.81 
5420 
16.32 
973 
5.81 
5372 
16.24 
Address Space  
887 
6.56 
2369 
37.36 
UID 
877 
6.65 
2262 
38.49 
Table 3. Performance Results. 
The  other  system  calls  are  used  when  directly 
comparing  two  UID  values  (=,  ≠,  ,  ≥).  They 
the  cond_chk  call,  but 
could  be  written  using 
providing  these additional calls offers two advantages: 
(1)  it  reduces  the  number  of  system  calls  needed  to 
perform  the  check  since  both  UID  values  are  checked 
with  one  system  call,  and  (2)  the  variants’  instruction 
streams remain identical, while if the comparison were 
done  in  user  space,  P1’s  operators  would  need  to  get 
switched  (≤  becomes  ≥)  due  to  the  data  variation.  For 
example,  (uid  ==  VARIANT_ROOT)  is  replaced  by  
(cc_eq
cc_eq(uid, VARIANT_ROOT)). 
cc_eq
cc_eq
4.  Apache Case Study 
To  evaluate  our  variation,  we  conducted  a  case  study 
on  the  Apache  web  server.  To  create  Apache  variants 
we needed to make a total of 73 changes to the source 
code.  Fifteen  of  the  changes  involved  applying  the 
reexpression  function  to  constant  UID  values  in  the 
source  code.  We  needed  16  changes  to  introduce  the 
new system calls to expose single UID value usages to 
the  monitor,  22  changes  to  expose  conditional  state-
ments  that  compared  UID  values,  and  20  changes  to 
check conditional statements. 
Constructing  variants  by  hand  is  tedious  and  error 
prone.  Without  any  automation,  this  variation  would 
not likely be practical. There are two main parts of this 
transformation.  First,  identifying  the  variables  that 
contain UID values. If the programmer uses the uid_t 
and  gid_t  data  types  strictly,  then  it  would  only 
require 
identifying  which  constant  values  were 
assigned  or  compared  to  those  variables  and  changing 
them according to the variation. If the programmer did 
not  use  uid_t  data  type  to  declare  the  variables,  they 
could  be  inferred  using  dataflow  analysis  by  seeing 
which variables stored the result of functions returning 
a  known  uid  value  (e.g., getuid) or were passed as a 
parameter  to  a  function  expecting  a  user  id  (e.g., 
setuid). Several static analysis tools, including Splint 
[31],  are  available  that  already  do  this  analysis.  Using 
this simple analysis technique would have identified all 
instances of UIDs in the Apache Web Server. 
Once  all  the  UID  values  were  identified  and 
changed  accordingly,  we  exposed  the  uses  of  UID 
variables  to  the  monitor  using  the  newly  developed 
system calls (Table 2). 
Apache only had one complicating factor. If Apache 
encountered an error related to the UID, it would write 
an  error  message  including  the  UID  to  a  log  file.  If 
these  output  statements  were  left unmodified, it would 
result  in  a  divergence  since  the  UID  values  are 
different.  However,  modifying  the  statements  so  P1 
converts the UID value would open a potential security 
vulnerability.  We  worked  around  this  problem  simply 
by removing the user id value from the log output. 
Table  3  summarizes  our  performance  results.  We 
measured  the  throughput  and  latency  of  our  system 
using WebBench 5.0 [41], a web server benchmark that 
serves  a  variety  of  static  web  page  requests.  We  ran 
two  sets  of  experiments  measuring  the  performance of 
our Apache server under unsaturated and saturated load 
conditions.  For  the  first  set  of  experiments,  we  used  a 
single  client  machine  running  one  WebBench  client 
engine.  For  the  load  experiments,  we  saturated  our 
server  using  3  clients  each  running  five  WebBench 
clients  connected  to  the  same  networks  switch  as  the 
server. In both sets, a single 1.4 GHz Pentium 4 server 
machine with 384 MB RAM ran Fedora Core 5 (2.6.16 
kernel) using 4 different configurations.   
Configuration  1  is  the  baseline  configuration:  un-
modified  apache  running  on  our  kernel.  Note  that  in 
general  an  unmodified  program  running  under  our 
modified  kernel  incurs  practically  no  overhead.  The 
only overhead would be the addition of an extra check 
(an  if  statement  to  determine  if  a  process  is  participa-
ting in N-variant system) per system call.  
Configuration  2  shows  the  overhead  of  the  UID 
code  transformations  made  to  Apache.  In  our  experi-
ments, it was negligible; this is unsurprising since most 
of the UID operations are done when the server initial-
izes.  The  additional  overhead  is  one  system  call  per 
request to compare two UID values.  
Configuration 3 is a 2-variant system where the two 
variants  differ  in  the  address  spaces  with  the  kernel 
configured  to  support  unshared  files.  This  configura-
tion provides a baseline case when running two variants 
and  can  be  used  to  measure  the  overhead  of  any 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE193DSN 2008: Nguyen-Tuong et al.additional  variations.  For  the  unloaded  server,  this 
resulted  in  a  throughput  decrease  of  12.2%  and  a 
the  baseline 
latency 
configuration.  For 
throughput 
decreases by 56% while latency increases by 129%.  
increase  of  12.9% 
from 
the 
loaded  server, 
Since the N-variant system executes all computation 
twice, but all I/O system calls only once, the overhead 
incurred reflects the cost of duplicating computation, as 
well  as  the  checking  done  by  the  wrappers.  The 
overhead  measured  for  the  unloaded  server  is  fairly 
low,  since  the  process  is  primarily  I/O  bound.  For  the 
loaded  server,  the  process  becomes  more  compute-
bound,  and  the  approximate  halving  of  throughput 
reflects  the  redundant  computation  required  from 
running 2 variants. 
Configuration  4  is  a  2-variant  system  running  the 
UID  variation  described  in  Section  4.  We  present 
overhead  relative  to  Configuration  3  to  measure  the 
added  overhead  of  our  variation.  For  the  unloaded 
server,  throughput  decreased  by  1%,  while  latency 
increased  by  1.4%.  For  the  loaded  server,  throughput 
decreased by 4.5%, while latency increased by 3%.  
These  results  are  encouraging  in  that  although  the 
overall  overhead  is  high  because  of  the  redundant 
computation, additional variations may be performed at 
relatively  low  cost.  This  opens  up  the  practical 
possibility  of  combining  variations  to  achieve  broader 
coverage  of  attack  classes.  However,  variation 
composition  must  be  done  carefully  to  ensure  that 
variations  still  satisfy  the  required  normal  equivalence 
properties when they are composed [16]. 
In  general,  our  results  indicate  that  for  I/O  bound 
services, N-variant systems with the UID variation can 
be  done  with  performance  overhead  that  would  be 
acceptable  for  many  deployments.  For  CPU-bound 
services, the overhead of our approach is high since all 
computations  need  to  be  performed  twice.  Multi-
processors may alleviate some of the problem (in cases 
where  there  is  not  enough  load  to  keep  the  other 
processors busy normally) [20].  
5.  Discussion 
Designing  data  variations  for  non-control  data  attacks 
is more difficult than we had anticipated. In particular, 
applications  such  as  Apache  rely  on  external  config-
uration  files  such  as  /etc/passwd  and  /etc/group 
to  map  user  names  to  UIDs.  We  wanted  to  avoid 
embedding  the  reexpression  functions  directly  inside 
the web server itself since this would have opened up a 
potential  path  by  which  an  attacker  could  bypass 
detection  by  reusing  the  reexpression  functions.  Our 
solution  was  to  provide  support  for  the  concept  of 
unshared  files,  in  which  the  variants  read  from  their 
respective reexpressed files (e.g., /etc/passwd-0 for 
variant 0 and /etc/passwd-1 for variant 1). Although 
we  have  not  yet  explored  other  applications  of  un-
shared  files,  they  provide  other  exciting  opportunities 
for  diversity.  For  example,  web  server  variants  could 
be  run  with  different  directory  structures  and  different 
configuration files to thwart attacks on file paths.  
For  detection,  we  defined  new  system  calls  to 
synchronize and check for the validity of UID values at 
the  point  of  use.  This  design  choice  was  motivated  by 
our desire to make strong arguments regarding (nearly) 
immediate detection of corrupted UID values. Another 
possibility is to rely on the already existing monitoring 
mechanism  for  checking  divergence  at  system  call 