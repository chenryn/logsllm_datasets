where each(cid:74)si(cid:75) is contributed by a distinct server 𝒫i, and we output
(cid:74)r1(cid:75), . . . ,(cid:74)rt +1(cid:75). The choice of M ensures the(cid:74)ri(cid:75) are random and
attempt to reconstruct one column each of(cid:74)rn−2t−1(cid:75), . . . ,(cid:74)rn(cid:75). The
of the correct degree, then so are all of(cid:74)r1(cid:75), . . . ,(cid:74)rt +1(cid:75). Since all n
ings, which are t- and 2t-sharings of the same random value(cid:74)r(cid:75)t
and(cid:74)r(cid:75)2t . For this we use RanDouSha [10, 41], wherein each server
contributes a pair of shares,(cid:74)si(cid:75)t and(cid:74)si(cid:75)2t . The first t + 1 pairs
(cid:74)r1(cid:75){t,2t }, . . . ,(cid:74)rt +1(cid:75){t,2t } after applying M are taken as output,
erating random shares(cid:74)a(cid:75)t ,(cid:74)b(cid:75)t , calculating(cid:74)ab(cid:75)2t =(cid:74)a(cid:75)t ·(cid:74)b(cid:75)t ,
and the remaining 2t + 1 pairs are reconstructed as a checksum (by
one server each). All together, this protocol is given in Figure 3.
parties must be online to provide input for this process, this cannot
guarantee output if any parties crash.
Given the double sharing, we generate a Beaver triple by gen-
To generate Beaver triples, we make use of random double shar-
and performing degree reduction:
(cid:74)ab(cid:75)t := Open((cid:74)ab(cid:75)2t −(cid:74)r(cid:75)2t) +(cid:74)r(cid:75)t .
Besides random field elements and multiplication triples, the offline
phase is also used to prepare random bits, and k powers of random
elements using standard techniques [36]. In general, we can imple-
ment any necessary preprocessing task by combining the above
two ingredients. The overall cost of the offline phase is summarized
Session 4C: Secure Computing IIICCS ’19, November 11–15, 2019, London, United Kingdom889Protocol RanDouSha
• Input: pairs {(cid:74)si(cid:75)t ,(cid:74)si(cid:75)2t} contributed by each server
• Output:(cid:74)r1(cid:75)t ,(cid:74)r1(cid:75)2t , . . . ,(cid:74)rt +1(cid:75)t ,(cid:74)rt +1(cid:75)2t
• Procedure (as server 𝒫i):
(1) (cid:74)r1, . . . , rn(cid:75)t ← M((cid:74)s1(cid:75)t , . . . ,(cid:74)sn(cid:75)t)
(2) (cid:74)r1, . . . , rn(cid:75)2t ← M((cid:74)s1(cid:75)2t , . . . ,(cid:74)sn(cid:75)2t)
(3) Each party 𝒫i where t + 1 < i ≤ n privately reconstructs
(cid:74)ri(cid:75)t ,(cid:74)ri(cid:75)2t and checks that both shares are of the correct
degree, and that their 0-evaluation is the same. Reliable-
Broadcast OK if the verification succeeds, ABORT otherwise.
(4) Wait to receive each broadcast and abort unless all are OK
(5) Output(cid:74)r1(cid:75)t ,(cid:74)r1(cid:75)2t , . . . ,(cid:74)rt +1(cid:75)t ,(cid:74)rt +1(cid:75)2t
Figure 3: Generating random double sharings [10, 36, 41]
by the number of batch reconstructions and the number of random
shares needed. We summarize the offline costs for our two mixing
approaches in Section 5.
2.3 Asynchronous Reliable Broadcast and
Common Subset
We employ an asynchronous reliable broadcast primitive in order
to receive client inputs. A reliable broadcast (RBC) protocol satisfies
the following properties:
• (Validity) If the sender (i.e., the client in our case) is correct and
inputs v, then all correct nodes deliver v
• (Agreement) If any two correct servers deliver v and v′, then
v = v′.
• (Totality) If any correct node delivers v, then all correct nodes
deliver v.
While Bracha’s [20] classic reliable broadcast protocol requires
O(n
2|v|) bits of total communication in order to broadcast a mes-
sage of size |v|, Cachin and Tessaro [24] observed that Merkle trees
and erasure coding can reduce this cost to merely O(n|v| + n
2 log n)
(assuming constant size hashes), even in the worst case. The non-
linear factor of this cost comes from the need to send branches of a
Merkle tree created over the erasure-coded shares to ensure data
integrity.
In order to reach an agreement on which instances of RBC have
terminated, and to initiate each mixing epoch, we rely on an asynch-
ronous common subset protocol [12, 23, 67]. In CommonSubset,
each server begins with an input bi (in our application each bi is
a κ-bit vector). The protocol outputs an agreed-upon vector of n
values that includes the inputs of at least n − 2t correct parties, as
well as up to t default values. CommonSubset satisfies following
properties:
• (Validity) If a correct server outputs a vector b′, then b′
= bi for
i
at least n − 2t correct servers;
• (Agreement) If a correct server outputs b′, then every server
outputs b′;
• (Totality) All correct servers eventually produce output.
To stick to purely asynchronous primitives, we concretely instanti-
ate CommonSubset with the protocol from HoneyBadgerBFT [12,
67]; as an alternative, BEAT0 [44] is similar but offers more effi-
cient cryptographic primitives. For small messages, the overhead
2, although for very large mes-
for either protocol grows with n
sages it achieves linear overhead. If asynchronous liveness is not
needed, then any partially synchronous consensus protocol, such
as PBFT [25], would suffice here as well.
3 ROBUSTNESS IN MPC PROTOCOLS AND
IMPLEMENTATIONS
In practice, distributed computing protocols should successfully
protect against not just benign failures like system churn, but also
network partitions and denial of service attacks. Distributed consen-
sus protocols and systems employed in practice (e.g., [25, 54, 61]) put
significant emphasis on achieving this robustness property, and the
same also holds for prominent blockchain systems [5, 21]. Various
notions of robustness have also been explored in the context of MPC,
although we observe that the practical MPC tool-kits [4, 8, 36, 40]
available today have not made a similar effort to incorporate this
robustness. We therefore place a strong emphasis on achieving
robustness in this paper.
In this section we evaluate the robustness of existing MPC imple-
mentations and protocols (summarized in Table 1), and use this eval-
uation to inform the design of HoneyBadgerMPC and AsynchroMix.
We focus mainly on three forms of robustness: fairness, guaranteed
output, and safety in asynchronous communication setting. In our
work we focus on the MPC-System-as-a-Service model [3, 8, 46, 65],
where clients submit secret inputs to servers for processing. How-
ever, in the usual MPC setting, the servers themselves are the clients.
Thus for the sake of comparison, in this section we assume n = k
(where n is the number of servers and k is the number of clients).
In this evaluation we leave implicit the need to agree on which
inputs to include. In a synchronous network, MPC typically en-
sures that every honest party’s inputs are included [11], while in
an asynchronous network it is inherent that up to t honest parties
may be left out [28]; to accommodate asynchronous protocols we
assume the weaker definition. We also elide discussion of protocols
and implementations that offer only semi-honest security, such as
PICCO [80] or Fairplay [64], or that rely on trusted hardware [27].
Fairness and Guaranteed Output. Fairness is widely studied in
MPC. Roughly speaking, it means that either all parties receive their
output, or else none of them do [50]. Unfair protocols allow the ad-
versary to peek at the output of the computation, while the honest
parties observe the protocol fail. In the context of anonymous com-
munications, unfair protocols pose a severe hazard of intersection
attacks. For example, if a client retries to send their message in a
new session with a different anonymity set, the adversary would
learn which messages were common to both sessions [70]. To the
best of our knowledge, none of the practical implementations of
MPC aim to provide fairness against an active adversary. Instead,
they focus on the weaker notion of security with abort, meaning that
the honest parties reach consensus on whether or not the protocol
aborts, which admits the intersection attack above.
Guaranteed output delivery is usually considered synonymous
with robustness in MPC. It is a stronger notion than fairness that
further requires that corrupt parties cannot prevent honest parties
from receiving output. MPC Protocols based on n-of-n sharing
Session 4C: Secure Computing IIICCS ’19, November 11–15, 2019, London, United Kingdom890Table 1: Summary of Robustness in Active Secure MPC Protocols and Toolkits
Protocol Designs
BGW [6, 11]
HN06 [53]
BH08 [10],DN07 [41]
DN07 [41]
DIK+08 [38, 39]1
COPS15 [29]
CHP13[28],CP17[31]
CP15 [30]
MPC Toolkits
Viff [36]
SPDZ [40, 55, 56]
EMP [78]
SCALE-MAMBA [4]
HyperMPC [8]
CGH+18 [26]
This paper
t <
n/3
n/2
n/3
n/2
n/8
n/2
n/4
n/3
n/3
n
n
n/2
n/3
n/2
hbMPC n/3
HE
SHE
OT
SHE
Dlog
Offline
Fairness Guaranteed Output Asynchronous
Live
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
Online
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
SHE or OT
Communication
Complexity
Assumption Overhead
quadratic
linear
linear
linear
linear
quadratic
linear
linear
Safe
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
We say a protocol has asynchronous safety if its safety properties
hold even in an asynchronous network and up to t parties are
corrupt.3 The second camp of guaranteed MPC protocols relies
on asynchronous primitives rather than dispute resolution, and
proceed with the fastest n − t nodes regardless of the network
time [28–31]. We notice that since the MPC implementations do
not aim for guaranteed output anyway and block on all n parties
before proceeding, trivially satisfy this property.
quadratic
linear
quadratic
quadratic
linear
linear
linear
for the dishonest majority setting t < n, such as EMP [78] as
well as SPDZ [40] and its descendants, are inherently unable to
provide guaranteed output. However, as long as t < n/3, then the
online phase techniques for degree-t SSS described in Section 2.1-
2.2 suffice. HyperMPC [8], for example, cannot guarantee output
in the t < n/3 setting as it works with 2t-sharings in the online
phase. Unlike fairness, guaranteed output is primarily a concern
for liveness rather than safety. A fair protocol that aborts can in
principle be restarted with a new set of parties. In any case, the
protocols we evaluate satisfy both or neither.
Asynchronous Safety and Liveness. MPC protocols that guar-
antee output typically fall into one of two camps. The first camp
is based on (bounded) synchronous broadcast primitives and in-
volves restarting the computation after detecting and eliminating
one or more faulty parties. Such protocols can be unconditionally
secure when t < n/3 [6, 10, 11, 41] and using cryptography can
reach t < n/2 [41, 53]. Dispute resolution is also used by virtualized
protocols that boost a low-resilience outer protocol (i.e., t < n/8)
to t < n/2 − ϵ [38, 39].2 However, we observe that these protocols
rely on the ability to time out nodes that appear to be unrespon-
sive, restarting the computation with the remaining parties. If t
honest nodes are temporarily partitioned from the network, then
any failures among the remaining parties could compromise the
safety properties, including confidentiality. Using this approach to
guarantee output, therefore, leads to an inherent trade-off between
the liveness and safety properties—the more faults tolerated for
liveness, the fewer tolerated for safety. Furthermore, the preference
for performance would be to set the timeout parameter low enough
to tolerate benign crashes, though this means even shorter dura-
tion network partitions weaken the security threshold among the
remaining nodes.
2We only consider the outer protocols of DIK+08,DIK10. By composing with an inner
protocol, these can obtain security of t = n/2 +ϵ, though this requires large randomly
selected committees, and in any case, inherits the robustness and practicality of the
inner protocol.