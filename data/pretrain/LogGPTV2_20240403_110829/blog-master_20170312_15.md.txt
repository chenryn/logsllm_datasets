## PostgreSQL 10.0 preview 性能增强 - libpq支持pipeline batch模式减少网络交互提升性能    
##### [TAG 13](../class/13.md)
### 作者                                                                                         
digoal                                       
### 日期                                         
2017-03-12                                        
### 标签                                       
PostgreSQL , 10.0 , libpq , pipeline , batch  
----                                      
## 背景                     
PostgreSQL 10.0 libpq支持pipeline batch两种模式，batch模式意味着客户端可以将多个QUERY塞入pipeline，作为一个batch提交给server段，从而减少客户端和服务端的网络交互次数。  
在网络环境不太好的环境中，特别是云环境，大幅提升性能。  
```  
+   libpq supports queueing up mulitiple queries into  
+   a pipeline to be executed as a batch on the server. Batching queries allows  
+   applications to avoid a client/server round-trip after each query to get  
+   the results before issuing the next query.  
```  
详见  
```  
Hi all  
Following on from the foreign table batch inserts thread[1], here's a patch  
to add support for pipelining queries into asynchronous batches in libpq.  
Attached, and also available at  
https://github.com/2ndQuadrant/postgres/tree/dev/libpq-async-batch (subject  
to rebasing and force pushes).  
It's cleaned up over the draft I posted on that thread and has error  
recovery implemented. I've written and included the SGML docs for it. The  
test program is now pretty comprehensive, more so than for anything else in  
libpq anyway. I'll submit it to the next CF as a 9.7/10.0 candidate.  
I'm measuring 300x (not %) performance improvements doing batches on  
servers over the Internet, so this seems pretty worthwhile. It turned out  
to be way less invasive than I expected too.  
(I intentionally didn't add any way for clients to annotate each work-item  
in a batch with their own private data. I think that'd be really useful and  
would make implementing clients easier, but should be a separate patch).  
This should be very useful for optimising FDWs, Postgres-XC, etc.  
[1]  
http://www.postgresql.org/message-id/CAMsr+YFgDUiJ37DEfPRk8WDBuZ58psdAYJd8iNFSaGxtw=PI:EMAIL  
--   
 Craig Ringer                   http://www.2ndQuadrant.com/  
 PostgreSQL Development, 24x7 Support, Training & Services  
```   
一些例子  
```  
+    
+   An example of batch use may be found in the source distribution in  
+   src/test/examples/libpqbatch.c.  
+    
+  
+    
+   When to use batching  
+  
+     
+    Much like asynchronous query mode, there is no performance disadvantage to  
+    using batching and pipelining. It somewhat increased client application  
+    complexity and extra caution is required to prevent client/server network  
+    deadlocks, but can offer considerable performance improvements.  
+     
+  
+     
+    Batching is most useful when the server is distant, i.e. network latency  
+    ("ping time") is high, and when many small operations are being performed in  
+    rapid sequence. There is usually less benefit in using batches when each  
+    query takes many multiples of the client/server round-trip time to execute.  
+    A 100-statement operation run on a server 300ms round-trip-time away would take  
+    30 seconds in network latency alone without batching; with batching it may spend  
+    as little as 0.3s waiting for results from the server.  
+     
+  
+     
+    Use batches when your application does lots of small  
+    INSERT, UPDATE and  
+    DELETE operations that can't easily be transformed into  
+    operations on sets or into a  
+    COPY operation.  
+     
+  
+     
+    Batching less useful when information from one operation is required by the  
+    client before it knows enough to send the next operation. The client must  
+    introduce a synchronisation point and wait for a full client/server  
+    round-trip to get the results it needs. However, it's often possible to  
+    adjust the client design to exchange the required information server-side.  
+    Read-modify-write cycles are especially good candidates; for example:  
+      
+     BEGIN;  
+     SELECT x FROM mytable WHERE id = 42 FOR UPDATE;  
+     -- result: x=2  
+     -- client adds 1 to x:  
+     UPDATE mytable SET x = 3 WHERE id = 42;  
+     COMMIT;  
+      
+    could be much more efficiently done with:  
+      
+     UPDATE mytable SET x = x + 1;  
+      
+     
+  
+     
+      
+     The batch API was introduced in PostgreSQL 9.6, but clients using it can  
+     use batches on server versions 8.4 and newer. Batching works on any server  
+     that supports the v3 extended query protocol.  
+      
+     
+  
+    
+  
+    
+   Using batch mode  
+  
+     
+    To issue batches the application must switch  
+    libpq into batch mode. Enter batch mode with PQbeginBatchMode(conn) or test  
+    whether batch mode is active with PQisInBatchMode(conn). In batch mode only asynchronous operations are permitted, and  
+    COPY is not allowed. (The restriction on COPY is an implementation  
+    limit; the PostgreSQL protocol and server can support batched COPY).  
+     
+  
+     
+    The client uses libpq's asynchronous query functions to dispatch work,  
+    marking the end of each batch with PQsendEndBatch.  
+    Concurrently, it uses PQgetResult and  
+    PQgetNextQuery to get results. It may eventually exit  
+    batch mode with PQendBatchMode once all results are  
+    processed.  
+     
+  
+     
+      
+     It is best to use batch mode with libpq in  
+     non-blocking mode. If used in  
+     blocking mode it is possible for a client/server deadlock to occur. The  
+     client will block trying to send queries to the server, but the server will  
+     block trying to send results from queries it's already processed to the  
+     client. This only occurs when the client sends enough queries to fill its  
+     output buffer and the server's receive buffer before switching to  
+     processing input from the server, but it's hard to predict exactly when  
+     that'll happen so it's best to always use non-blocking mode.  
+      
+     
+  
+     
+    Issuing queries  
+  
+      
+     After entering batch mode the application dispatches requests  
+     using normal asynchronous libpq functions like  
+     PQsendQueryParams, PQsendPrepare,  
+     etc. The asynchronous requests are followed by a PQsendEndBatch(conn) call to mark  
+     the end of the batch. The client does not need to call  
+     PQgetResult immediately after dispatching each  
+     operation. Result processing  
+     is handled separately.  
+      
+      
+      
+     Batched operations will be executed by the server in the order the client  
+     sends them. The server will send the results in the order the statements  
+     executed. The server usually begins executing the batch before all commands  
+     in the batch are queued and the end of batch command is sent. If any  
+     statement encounters an error the server aborts the current transaction and  
+     skips processing the rest of the batch. Query processing resumes after the  
+     end of the failed batch.  
+      
+  
+      
+     It's fine for one operation to depend on the results of a  
+     prior one. One query may define a table that the next query in the same  
+     batch uses; similarly, an application may create a named prepared statement  
+     then execute it with later statements in the same batch.  
+      
+  
+     
+  
+     
+    Processing results  
+  
+      
+     The client interleaves result  
+     processing with sending batch queries, or for small batches may  
+     process all results after sending the whole batch.  
+      
+  
+      
+     To get the result of the first batch entry the client must call PQgetNextQuery. It must then call  
+     PQgetResult and handle the results until  
+     PQgetResult returns null (or would return null if  
+     called). The result from the next batch entry may then be retrieved using  
+     PQgetNextQuery and the cycle repeated.  The  
+     application handles individual statement results as normal.  
+      
+  
+      
+     PQgetResult behaves the same as for normal asynchronous  
+     processing except that it may contain the new PGresult types  
+     PGRES_BATCH_END and PGRES_BATCH_ABORTED.  
+     PGRES_BATCH_END is reported exactly once for each  
+     PQsendEndBatch call at the corresponding point in  
+     the result stream and at no other time. PGRES_BATCH_ABORTED  
+     is emitted during error handling; see   
+     error handling.  
+      
+  
+      
+     PQisBusy, PQconsumeInput, etc  
+     operate as normal when processing batch results.  
+      
+  
+      
+     libpq does not provide any information to the  
+     application about the query currently being processed. The application  
+     must keep track of the order in which it sent queries and the expected  
+     results. Applications will typically use a state machine or a FIFO queue  
+     for this.  
+      
```  
这个patch的讨论，详见邮件组，本文末尾URL。  
PostgreSQL社区的作风非常严谨，一个patch可能在邮件组中讨论几个月甚至几年，根据大家的意见反复的修正，patch合并到master已经非常成熟，所以PostgreSQL的稳定性也是远近闻名的。  
## 参考              
https://commitfest.postgresql.org/13/1024/  
https://www.postgresql.org/message-id/attachment/44303/0001-Pipelining-batch-support-for-libpq.patch  
https://github.com/2ndQuadrant/postgres/tree/dev/libpq-async-batch  
https://www.postgresql.org/message-id/flat/CAMsr+YFUjJytRyV4J-16bEoiZyH=4nj+sQ7JP9ajwz=PI:EMAIL#CAMsr+YFUjJytRyV4J-16bEoiZyH=4nj+sQ7JP9ajwz=PI:EMAIL  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")