### A Password is Not Enough: Why Disk Encryption is Broken and How We Might Fix It

**Presented by: Daniel Selifonov  
Event: DEF CON 21  
Date: August 2, 2013**

#### Five Questions
- Do you encrypt the drive in your computer?
- Do you use tools like TrueCrypt, dm-crypt, or loop-AES?
- Do you always perform a cold shutdown when leaving your computer unattended?
- Have you ever left your computer unattended for more than a few hours?
- How about more than a few minutes?

#### Why Do We Encrypt?
- **Confidentiality and Integrity:** Ensuring that data remains secret and unaltered.
- **Secrecy, Privacy, and Control:** The power to determine what happens to personal and business data.
- **Legal Liability:** Protecting sensitive information from unauthorized access.
- **Access Control:** Managing who can access data even with physical access to the device.
- **Trustworthiness of Endpoints:** Ensuring that our devices are secure.

#### Armor, Sieves, and Rubber Hoses
- **Cryptography is Not the Weakest Link:**
  - Random number generation
  - Block cipher modes of operation
  - Key derivation from passwords
- **Many Open Source Implementations:**
  - These implementations provide transparency and community scrutiny.
- **Side Channels:**
  - **Attack the Apparatus:** Exploit vulnerabilities in the hardware or software.
  - **Attack the User:** Use social engineering or physical coercion.

#### Mismatched Objectives
- **Disk Encryption Threat Models vs. De Facto Use:**
  - TrueCrypt's security model assumes that an attacker does not have physical access to the computer before or while TrueCrypt is running. (Source: [TrueCrypt Security Model](http://www.truecrypt.org/docs/security-model))

#### From the Horse's Mouth
- **TrueCrypt's Perspective:**
  - "We generally disregard 'janitor' attacks since they inherently make the machine untrusted. We never consider the feasibility of hardware attacks; we simply have to assume the worst. After an attacker has 'worked' with your hardware, you should stop using it for sensitive data. TPM cannot prevent hardware attacks, such as using hardware key loggers."
- **Joanna Rutkowska's Counterpoint:**
  - "How can you determine if an attacker has 'worked' with your hardware? Do you carry your laptop with you all the time?"
- **TrueCrypt's Response:**
  - "Ensuring physical security is the user's responsibility. You could use a proper safety case with a lock or store it in a strongbox."
- **Rutkowska's Follow-Up:**
  - "If I could arrange for a proper lock or an impenetrable strongbox, why would I need encryption?"

#### FDE Boot Process
- **Hardware Components Involved:**
  - SSD/HDD, Storage Controller, USB, Firewire, Thunderbolt, ExpressCard, Network Adapter, PCI Bus, LPC Bus, TPM, Keyboard, GPU, Platform Controller Hub, CPU + Memory Controller, RAM

#### Three Attack Tiers
1. **Non-Invasive:**
   - Using tools like screwdrivers and soldering irons.
2. **Compromised Bootloader:**
   - Altering the bootloader to gain access.
3. **Compromised Operating System:**
   - Exploiting vulnerabilities in the OS.

#### Direct Memory Access (DMA) and Cold Boot Attacks
- **DMA:** Exploiting direct memory access to read or write to memory.
- **Cold Boot Attack:** Extracting encryption keys from RAM after a cold boot.

#### What's in a CPU Anyway?
- **Execution Units, Caches, Registers, MMU, and Bus Interface:**
  - Modern CPUs include features like AES-NI for hardware-accelerated AES encryption.

#### x86-64 as a Hardware Crypto Module
- **AES-NI (2010):** Hardware instructions for AES.
- **Key Storage in Registers:**
  - Machine State Registers, SSE, and DRx hardware debugging registers (TRESOR).

#### TRESOR Implementation
- **DRx Registers:**
  - 6 registers, 256 bits of key storage.
  - First implemented by Tilo MÃ¼ller for Linux in 2011.

#### RAM Vulnerabilities
- **Hostile DMA:** Can alter the OS to dump DRx.
- **IOMMU Technology:** Intel VT-d, AMD Vi, to protect against hostile DMA.

#### Other Sensitive Data in RAM
- **Active Files, SSH/PGP Keys, Password Manager Databases:**
  - Encrypt everything you don't want to leak.
  - Self-encrypting drives are insufficient.

#### Encrypting RAM
- **CryptKeeper Proof of Concept:**
  - Divides RAM into small "clear" and larger "crypt" segments.
  - Uses ordinary Linux paging facilities.
  - Performance impact: 10x-50x slower in synthetic benchmarks, ~10% slower in typical use.

#### Verifying Computer Integrity
- **Trusted Platform Module (TPM):**
  - Leverages measured boot to ensure the system is pristine.
  - Seals secrets to platform configuration registers (PCRs).

#### TPM Sealed Secrets
- **Seeds for TOTP or HOTP Tokens:**
  - Unique images or animations.
  - Part of the input to a key derivation function for the disk key.
  - Tying the disk key to the TPM dictates system boot policy.

#### TPM Facilitated System Boot Policy
- **Cloning the Disk:** Limited benefit; disk only accessible on the original computer.
- **Monotonic Counters:** Compare on-disk and TPM NVRAM values.
- **User-Defined Policies:**
  - Limit incomplete boots, password entry timeout, incorrect password attempts, etc.

#### TPM vs. Hardware Attacks
- **Assumptions:**
  - No backdoor in TPM NVRAM.
  - No effective reset attack on PCR state.
  - Conducting a hardware attack to extract secrets takes at least 12 hours.

#### Phalanx Toolset
- **Xen Hypervisor Patch:**
  - Implements TRESOR variant.
  - DR2/DR3 available to VMs, DR0/DR1 used as master AES-128 key.
- **Linux Kernel Patches:**
  - Modified TRESOR for AES-128 in DR2/DR3.
  - zRAM uses TRESOR to encrypt pages after compression.
- **Userspace Utilities:**
  - Initrd script skeleton, built on tboot and Intel TXT.

#### Suggested Installation Basis
- **Qubes OS:**
  - Pragmatic formulation of Xen, Linux, and custom tools for "security by isolation."
  - Isolates information in separate domU guests in Xen.

#### Hardware Requirements
- **AES-NI, Hardware Virtualization Extensions (Intel VT-x, AMD-V), IOMMU (Intel VT-d, AMD-Vi), TPM.**

#### Security Assumptions
- **TPM, CPU, Memory Controller, IOMMU, Xen:**
  - Correctly configured IOMMU, no backdoors, and no hypervisor compromise vulnerabilities.

#### Threat Model
- **Realistic Threat Assessment:**
  - No system is unbreakable.
  - Aim for hours of protection, not just minutes.
  - Verify assumptions.

#### Expected Security
- **Cold Boot Attack Ineffective:**
  - Against FDE key and encrypted user information in RAM.
- **Hardware-Based RAM Acquisition Ineffective.**
- **TPM NVRAM Extraction:**
  - Re-enables "evil maid" attacks.
- **Tampering Noticeable:**
  - Unseal failures, computer missing for hours.

#### Attack Methods
- **Key Loggers, Cameras, Shoulder Surfing:**
  - TPM attacks, NVRAM extraction, LPC bus intercept/reset hardware.
- **RAM Manipulation:**
  - Hardware intercept/manipulation, transient pulse injection.

#### Legal Notes
- **Not Legal Advice:**
  - US 5th Amendment prevents compelling a password from a suspect in criminal cases.
  - Automatic self-destruct timer believed to be legal in the US.
  - TPM and strong cryptography illegal in some jurisdictions.
  - Mandatory key disclosure in some countries.

#### Future Work & Improvements
- **Greater Control Over Encrypted Paging:**
  - Modify OpenSSL to aggressively swap out keys.
- **Easily Installable Variant:**
  - Based on Qubes OS.
- **Upstream Patches:**
  - Unclear if they would be accepted.

#### Conclusions
- **Usability and Realistic Use Patterns:**
  - The best security model is one that is usable.
- **Full System Encryption:**
  - Disk encryption alone is not enough; real protection comes from full system encryption.
- **Commodity Hardware:**
  - Full system encryption is barely possible but still better than the status quo.

#### Thank You!
- **Get the Code:**
  - [GitHub Repository](https://github.com/thyth/phalanx)
- **Web:**
  - [thyth.com](http://thyth.com/)
- **Email:**
  - [PI:EMAIL]
- **PGP:**
  - ID 0xdfc02d75
  - Fingerprint: 201a 7b59 a15b e5f0 bc37 08d3 bc7f 39b2 dfc0 2d75