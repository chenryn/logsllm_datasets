# LFI 绕过 Session 包含限制 Getshell
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
之前打CTF和挖洞的时候遇到过不少服务器本地文件包含`Session`的漏洞，不过几乎这种`Session`包含漏洞都会有一些限制的，需要结合一些特殊的技巧去`Bypass`，于是打算整理一下关于`PHP
LFI`绕过`Session`包含限制`Getshell`的一些奇思妙想。
## 用户会话
在了解session包含文件漏洞及绕过姿势的时候，我们应该首先了解一下服务器上针对用户会话session的存储与处理是什么过程，只有了解了其存储和使用机制我们才能够合理的去利用它得到我们想要的结果。
###  会话存储
**存储方式**
`Java`是将用户的session存入内存中，而`PHP`则是将session以文件的形式存储在服务器某个文件中，可以在`php.ini`里面设置session的存储位置`session.save_path`。
可以通过phpinfo查看`session.save_path`的值
知道session的存储后，总结常见的php-session默认存放位置是很有必要的，因为在很多时候服务器都是按照默认设置来运行的，这个时候假如我们发现了一个没有安全措施的session包含漏洞就可以尝试利用默认的会话存放路径去包含利用。
  * **默认路径**
    /var/lib/php/sess_PHPSESSID
    /var/lib/php/sessions/sess_PHPSESSID
    /tmp/sess_PHPSESSID
    /tmp/sessions/sess_PHPSESSID
**命名格式**
如果某个服务器存在session包含漏洞，要想去成功的包含利用的话，首先必须要知道的是服务器是如何存放该文件的，只要知道了其命名格式我们才能够正确的去包含该文件。
`session`的文件名格式为`sess_[phpsessid]`。而phpsessid在发送的请求的cookie字段中可以看到。
###  会话处理
在了解了用户会话的存储下来就需要了解php是如何处理用户的会话信息。php中针对用户会话的处理方式主要取决于服务器在php.ini或代码中对`session.serialize_handler`的配置。
**session.serialize_handler**
PHP中处理用户会话信息的主要是下面定义的两种方式
    session.serialize_handler = php           一直都在(默认方式)  它是用 |分割
    session.serialize_handler = php_serialize  php5.5之后启用 它是用serialize反序列化格式分割
下面看一下针对PHP定义的不同方式对用户的session是如何处理的，我们只有知道了服务器是如何存储session信息的，才能够往session文件里面传入我们所精心制作的恶意代码。
**session.serialize_handler=php**
服务器在配置文件或代码里面没有对session进行配置的话，PHP默认的会话处理方式就是`session.serialize_handler=php`这种模式机制。
下面通过一个简单的用户会话过程了解`session.serialize_handler=php`是如何工作的。
`session.php`
从图中可以看到默认`session.serialize_handler=php`处理模式只对用户名的内容进行了序列化存储，没有对变量名进行序列化，可以看作是服务器对用户会话信息的半序列化存储过程。
**session.serialize_handler=php_serialize**
php5.5之后启用这种处理模式，它是用serialize反序列化格式进行存储用户的会话信息。一样的通过一个简单的用户会话过程了解`session.serialize_handler=php_serialize`是如何工作的。这种模式可以在php.ini或者代码中进行设置。
`session.php`
从图中可以看到`session.serialize_handler=php_serialize`处理模式，对整个session信息包括文件名、文件内容都进行了序列化处理，可以看作是服务器对用户会话信息的完全序列化存储过程。
对比上面`session.serialize_handler`的两种处理模式，可以看到他们在session处理上的差异，既然有差异我们就要合理的去利用这两种处理模式，假如编写代码不规范的时候处理session同时用了两种模式，那么在攻击者可以利用的情况下，很可能会造成session反序列化漏洞。
## LFI Session
介绍了用户会话的存储和处理机制后，我们就可以去深入的理解session文件包含漏洞。LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如Session会话文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。
其中针对`LFI
Session`文件的包含或许是现在见的比较多，简单的理解session文件包含漏洞就是在用户可以控制session文件中的一部分信息，然后将这部分信息变成我们的精心构造的恶意代码，之后去包含含有我们传入恶意代码的这个session文件就可以达到攻击效果。下面通过一个简单的案例演示这个漏洞利用攻击的过程。
###  测试代码
session.php
index.php
###  漏洞利用
分析session.php可以看到用户会话信息username的值用户是可控的，因为服务器没有对该部分作出限制。那么我们就可以传入恶意代码就行攻击利用
payload
    http://192.33.6.145/FI/session/session.php
    POST
    username=
可以看到有会话产生，同时我们也已经写入了我们的恶意代码。
既然已经写入了恶意代码，下来就要利用文件包含漏洞去包含这个恶意代码，执行我们想要的结果。借助上一步产生的sessionID进行包含利用构造相应的payload。
payload
    PHPSESSID：7qefqgu07pluu38m45isiesq3s
    index.php?file=/var/lib/php/sessions/sess_7qefqgu07pluu38m45isiesq3s
    POST
    Qftm=system('whoami');
从攻击结果可以看到我们的payload和恶意代码确实都已经正常解析和执行。
###  包含限制
在上面我们所介绍的只是一种简单的理想化的漏洞条件，所以你会看到这么简单就利用成功了，但是，事实上在平常我们所遇到的会有很多限制，比如说代码中对用户会话信息做了一定的处理然后才进行存储，这些处理操作常见的包括对用户session信息进行编码或加密等。另外常见的限制比如说服务器代码中没有出现代码`session_start();`进行会话的初始化操作，这个时候服务器就无法生成用户session文件，攻击者也就没有办法就进行恶意session文件的包含。
下面主要针对这几种session包含限制，利用系统服务或代码本身的缺陷进行探索与利用。
## Session Base64Encode
很多时候服务器上存储的Session信息都是经过处理的（编码或加密），这个时候假如我们利用本地文件包含漏洞直接包含恶意session的时候是没有效果的。那么该怎么去绕过这个限制呢，一般做法是逆过程，既然他选择了编码或加密，我们就可以尝试着利用解码或解密的手段还原真实session，然后再去包含，这个时候就能够将恶意的session信息包含利用成功。
很多时候服务器上的session信息会由base64编码之后再进行存储，那么假如存在本地文件包含漏洞的时候该怎么去利用绕过呢？下面通过一个案例进行讲解与利用。
###  测试代码
**session.php**
     $username";
    ?>
**index.php**
###  常规利用
正常情况下我们会先传入恶意代码在服务器上存储恶意session文件
然后在利用文件包含漏洞去包含session
从包含结果可以看到我们包含的session被编码了，导致`LFI -> session`失败。
在不知道源代码的情况下，从编码上看可以判断是base64编码处理的
在这里可以用逆向思维想一下，他既然对我们传入的session进行了base64编码，那么我们是不是只要对其进行base64解码然后再包含不就可以了，这个时候`php://filter`就可以利用上了。
构造payload
    index.php?file=php://filter/convert.base64-decode/resource=/var/lib/php/sessions/sess_qfg3alueqlubqu59l822krh5pl
意外的事情发生了，你发现解码后包含的内容竟然是乱码！！这是为什么呢？？
###  Bypass serialize_handler=php
对于上面利用`php://filter`的base64解码功能进行解码包含出现了错误，还是不能够利用成功，回过头仔细想想会发现，session存储的一部分信息是用户名base64编码后的信息，然而我们对session进行base64解码的是整个session信息，也就是说编码和解码的因果关系不对，也就导致解码的结果是乱码。
那有没有什么办法可以让base64编码和解码的因果关系对照上，答案是有的，先来了解一下base64编码与解码的原理。
**Base64编码与解码**
Base64编码是使用64个可打印ASCII字符（A-Z、a-z、0-9、+、/）将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。
**base64索引表**
base64编码与解码的基础索引表如下
**base64编码原理**
**（1）base64编码过程**
Base64将输入字符串按字节切分，取得每个字节对应的二进制值（若不足8比特则高位补0），然后将这些二进制数值串联起来，再按照6比特一组进行切分（因为2^6=64），最后一组若不足6比特则末尾补0。将每组二进制值转换成十进制，然后在上述表格中找到对应的符号并串联起来就是Base64编码结果。
由于二进制数据是按照8比特一组进行传输，因此Base64按照6比特一组切分的二进制数据必须是24比特的倍数（6和8的最小公倍数）。24比特就是3个字节，若原字节序列数据长度不是3的倍数时且剩下1个输入数据，则在编码结果后加2个=；若剩下2个输入数据，则在编码结果后加1个=。
完整的Base64定义可见RFC1421和RFC2045。因为Base64算法是将3个字节原数据编码为4个字节新数据，所以Base64编码后的数据比原始数据略长，为原来的4/3。
**（2）简单编码流程**
    1）将所有字符转化为ASCII码；
    2）将ASCII码转化为8位二进制；
    3）将8位二进制3个归成一组(不足3个在后边补0)共24位，再拆分成4组，每组6位；
    4）将每组6位的二进制转为十进制；
    5）从Base64编码表获取十进制对应的Base64编码；
下面举例对字符串`“ABCD”`进行base64编码：
对于不足6位的补零（图中浅红色的4位），索引为“A”；对于最后不足3字节，进行补零处理（图中红色部分），以“=”替代，因此，“ABCD”的base64编码为：“QUJDRA==”。
**base64解码原理**
**（1）base64解码过程**
base64解码，即是base64编码的逆过程，如果理解了编码过程，解码过程也就容易理解。将base64编码数据根据编码表分别索引到编码值，然后每4个编码值一组组成一个24位的数据流，解码为3个字符。对于末尾位“=”的base64数据，最终取得的4字节数据，需要去掉“=”再进行转换。