### In this case, the JavaScript file from `www.paypalobjects.com` will execute in the context of `www.paypal.com`, and the browser grants it full access to `www.paypal.com`. An adversary capable of pharming `www.paypalobjects.com` can effectively insert JavaScript on the PayPal homepage and hijack users' sessions. Note that the adversary does not need to pharm `www.paypal.com` for this attack to succeed. Browsers also allow cross-domain Java and Flash, and there are mechanisms that enable Java and Flash to interact with the enclosing document.

Given these vulnerabilities, a vigilant website should avoid using Java and Flash and include all necessary JavaScript explicitly within its web pages. However, this significantly restricts flexibility and functionality. Unfortunately, we have limited options to protect active objects requested over HTTP. For active objects requested over HTTPS, we discuss two solutions: 1) YURLs, and 2) extending the locked Same-Origin Policies (SOPs).

#### 4.8.1 YURLs
A YURL [8] consists of a URL and a public key hash, allowing the browser to authenticate the server. For example, if a browser requests a YURL for `xyz.com`, it uses DNS to resolve `xyz.com` to an IP address and then establishes an SSL connection with the server. After the connection is established, the browser compares the public key hash in the YURL with the server's public key. If the hash matches, the browser proceeds with the request; otherwise, it cancels the connection without user override. YURLs help active objects resist pharming attacks by enabling websites to specify the server hosting an object by its public key. Browsers currently do not support YURLs, but the necessary modifications should be relatively simple and straightforward.

#### 4.8.2 Extending the Locked Same-Origin Policies
We can also extend the locked SOPs to protect same-domain requests for active objects against pharming attacks. In the strong locked SOP, a website explicitly specifies the list of valid public keys for its domain, allowing the browser to safely refuse to load active objects from a server with a different public key. We can similarly extend the weak locked SOP. If the server for the enclosing page has a valid certificate, the browser should only accept a same-domain active object from a server with a valid certificate. Based on our deployability analysis, this additional restriction for the weak locked SOP should be safe.

Unfortunately, this approach will not work for cross-domain active objects. Since the enclosing page and the object are from different domains, their certificates are incomparable. Currently, if the server hosting the object has an invalid certificate, most browsers and plugins will issue a warning, but users often ignore and override such warnings.

#### 4.9 Caching and Dependent Elements
Browsers do not persistently cache HTTPS web objects by default (except SSL-only cookies), but they do use session caching. As demonstrated in Section 4.8, adversaries can use the cache to launch subtle dynamic pharming attacks. Additionally, vulnerabilities may arise if adversaries control dependent HTML elements, such as images and style sheets. To resist attacks involving the cache and dependent elements, further measures are needed.

#### 4.10 Limitations
Our locked same-origin policies do not address attacks where an adversary tricks a victim into installing malicious software such as executable malware, ActiveX plugins, or browser extensions. These objects usually execute with elevated privileges and are not governed by the SOP.

Security researchers have found DNS rebinding weaknesses in third-party browser plugin implementations such as Flash, Java, and Adobe Reader. Some of these weaknesses can be exploited to launch dynamic pharming attacks, and the locked SOPs do not address them. Jackson et al. address some of these vulnerabilities [29], and the locked SOPs can work in conjunction with their solutions to resist dynamic pharming attacks.

The locked same-origin policies do not address problems in the JavaScript language or implementation (e.g., JavaScript Prototype Hijacking) [54], cross-site scripting (XSS) vulnerabilities in servers, and cross-site request forgery (XSRF) attacks. Other research efforts address XSS vulnerabilities [27, 39, 44, 79, 80] and XSRF attacks [31, 34, 35], and these techniques complement our work. We also do not address browser-side cross-site scripting vulnerabilities, such as Universal XSS [54].

### 5. Applications to Web Authentication
In this section, we discuss how the locked same-origin policies can help protect two existing browser authentication mechanisms, client-side SSL and SSL-only cookies, against pharmers and active attackers. The web authentication problem can be divided into two subproblems: the initialization of users' authentication credentials and the use of those credentials to authenticate users to websites. Our discussion focuses primarily on the latter, but we briefly address initialization.

**Client-side SSL:** Intuitively, since client-side SSL authenticates users with end-to-end cryptography, one might expect it to protect sensitive web sessions against pharming and active attacks. However, the presence of dynamic pharming vulnerabilities proves this is not the case. Using one of our locked same-origin policies in conjunction with client-side SSL results in an authentication scheme with strong security properties. The user is not required to memorize her private key. After importing her private key, the browser uses it automatically. Although an adversary may trick a user into participating in mutual authentication using SSL, the adversary cannot use this interaction to impersonate the user at another website. Authentication requires knowledge of the private key, which the user's browser always keeps secret. As a result, the browser cryptographically authenticates the user's requests, and the locked SOP isolates the user's authenticated sessions from malicious subjectsâ€”even if the adversary is a pharmer or active attacker.

**SSL-only cookies:** Many websites use cookies for authentication [16]. For example, some websites offer a "remember me" option, which sets a persistent cookie on a user's machine. The browser will present this cookie during subsequent visits, enabling the user to bypass the initial login process. Some existing anti-phishing solutions also use authentication cookies to complement regular password authentication. Examples include Bank of America's SiteKey [4] and similar approaches by ING Direct [28], Vanguard [74], and Yahoo [81]. Before a user is permitted to log in from a particular computer, she must "register" it. The registration process sets an SSL-only persistent authentication cookie on the user's computer, and only computers with authentication cookies are permitted to access the user's account. In current browsers, cookie authentication resists phishing attacks but is vulnerable to pharming attacks. Our locked same-origin policies protect SSL-only cookies against pharmers and active attackers. Thus, in conjunction with browsers enforcing a locked SOP, websites can use SSL-only persistent cookies to authenticate users and resist phishing, pharming, and active attacks.

**Other authentication mechanisms:** The locked same-origin policies complement other authentication mechanisms designed to resist pharming, such as Phoolproof phishing prevention [55] and Passpet [83]. Our policies help these schemes resist dynamic pharming attacks.

**The registration problem:** The initialization of a user's authentication credentials is commonly known as the registration problem. This is a critical element of any web authentication scheme and a challenging problem in itself. For space reasons, we do not explore potential solutions here. One key challenge in the registration problem is resisting registration attacks. Bank of America's SiteKey and similar anti-phishing mechanisms have registration attack vulnerabilities [67, 85]. When a SiteKey user initially registers, she provides answers to several "personal entropy" questions [12], questions to which a phisher is unlikely to guess the answers, e.g., "What is the name of your high school mascot?". Users who need to register another computer must correctly answer these questions before receiving an authentication cookie. However, phishers and pharmers can use a man-in-the-middle registration attack to solicit the correct answers from unsuspecting victims and obtain valid authentication cookies, making SiteKey insecure against registration attacks. The problem is that "in-band" (HTTP-based) registration procedures are normally vulnerable to the same attacks we are trying to prevent. We are exploring registration protocols utilizing "out-of-band" channels to distribute authentication credentials.

### 6. Related Work
Several anti-phishing mechanisms help provide information to users regarding the trustworthiness of websites. Studies have shown that users can be fooled by misleading domain names and do not understand browser security indicators [10, 14, 15, 18]. Several researchers and security vendors have developed browser extensions to make it easier for users to interpret relevant security information [7, 25, 43, 69], use a blacklist to identify known phishing sites [11, 52], or establish trusted paths with sites users have a relationship with [9, 78, 82]. Recent versions of Firefox and Internet Explorer have adopted similar mechanisms. However, these approaches still require users to diligently observe security warnings and indicators, and studies have shown that users still struggle to interpret improved security indicators and warnings [30, 64, 77, 78]. Additionally, many browser extensions that try to automatically detect phishing sites are often wrong and inconsistent [86].

Another approach to resisting phishing attacks is better password management. Passwords remain the dominant method of web authentication. Password databases included with most modern web browsers automatically fill in passwords for users. However, users might still manually disclose their passwords to phishing sites or use the same password for multiple sites. Password hashing addresses these problems by hashing the user's secret password together with a variable, non-secret string (e.g., each site's domain name) to produce per-site passwords [1, 17, 24, 37, 38, 62, 83]. Recent work in this area has made usability a primary goal [24, 62, 83], but studies have shown that some users still have trouble using them correctly and securely [6]. If a password hashing scheme generates passwords based on the site's domain [24, 62], it is vulnerable to pharming attacks. Passpet [83] provides some resistance to pharming attacks but is still vulnerable to dynamic pharming.

The Phoolproof phishing prevention system uses cell phones to manage client-side SSL certificates for authentication on behalf of users [55]. Phoolproof's designers noted the importance of disclosure-resistant authentication credentials. In Phoolproof, a user logs in using a secure bookmark on her cell phone. The cell phone then 1) initiates an SSL connection to the website via a Bluetooth connection with a web browser on the user's computer; 2) checks the site's X.509 certificate against the one stored in the bookmark; and 3) authenticates the user via client-side SSL. Although Phoolproof verifies the site's certificate in step 2, this protocol is still vulnerable to a dynamic pharming attack if the adversary can pharm the user (i.e., serve the user a webpage that appears to come from the target domain) before she activates the login process.

The locked same-origin policies are similar to work done independently and concurrently by Masone et al. on Web Server Key Enabled Cookies, a new cookie policy that tags SSL-only cookies with the server's public key and allows access only to a server that can authenticate itself to the same key [41]. However, their proposal falls short of protecting cookies against dynamic pharming attacks. They do not address pharming attacks against other web objects or other web authentication mechanisms, e.g., client-side SSL, nor do they address subdomain object sharing or key updates.

The locked SOP was inspired by the concept of Key Continuity Management (KCM), a model for key management first proven successful by SSH [60, 84] and made more explicit by Guttman [23]. KCM associates public keys with subjects and takes defensive action when a subject's public key unexpectedly changes. Garfinkel expands on KCM further and applies it to S/MIME [19].

Security researchers and browser developers have been aware of DNS rebinding vulnerabilities since as early as 1996 [22]. In 2001 and 2002, Jim Roskind and Adam Megacz, respectively, described firewall circumvention DNS rebinding attacks using DNS records with short TTLs [42, 61]. DNS pinning was adopted by browsers to defend against these kinds of attacks, but pinning has a lengthy and controversial history in Firefox and Mozilla [46, 47, 48]. The current implementation is an explicit compromise to support dynamic DNS and round-robin DNS for failover. In August 2006, Martin Johns discovered a reliable technique for circumventing DNS pinning completely [32], and in early 2007, Johns and Kanatoko found additional DNS rebinding vulnerabilities with Flash and Java [33, 36].

Jackson et al. present an excellent analysis of DNS rebinding vulnerabilities, including issues with Flash, Java, VPNs, caching, and proxies [29]. They discuss several countermeasures, including host name authorization, a technique based on a variant of reverse DNS lookups. With cooperation from websites' DNS servers, host name authorization enables clients to determine the valid set of domain names for a particular IP address. Host name authorization is a promising approach, but since it relies on DNS, it is ineffective against adversaries capable of subverting DNS.

### 7. Conclusion
We demonstrated how adversaries can use dynamic pharming attacks to hijack users' authenticated web sessions, irrespective of the authentication mechanism. Dynamic pharming enables an adversary to eavesdrop on sensitive content, forge transactions, sniff secondary passwords, etc. To address dynamic pharming attacks, we introduced two locked same-origin policies, which regulate cross-object access control using servers' X.509 certificates and public keys, rather than domain names. We evaluated the security and deployability of our approaches and showed how browsers can deploy these policies today to substantially increase their resistance to pharming attacks and provide both a solid and necessary foundation for developing pharming-resistant authentication.

### 8. Acknowledgements
This work was supported in part by the National Science Foundation award number CCF-0424422 (The TRUST Center). We thank Dan Boneh and Adam Barth for helpful suggestions with policy files. We also thank Ben Adida, Naveen Sastry, Ka-Ping Yee, and Zulfiqar Ramzan for providing useful comments on previous drafts.

### 9. References
[1] Martin Abadi, T. Mark A. Lomas, and Roger Needham. Strengthening passwords. Technical Report 1997-033, SRC, September 1997.
[2] P. Akritidis, W.Y. Chin, V.T. Lam, S. Sidiroglou, and K.G. Anagnostakis. Proximity Breeds Danger: Emerging Threats in Metro-area Wireless Networks. In Proceedings of the 16th USENIX Security Symposium, pages 323â€“338, August 2007.
[3] Anti-phishing working group. http://www.antiphishing.org/.
[4] Bank of America Sitekey: Online banking security. http://www.bankofamerica/privacy/sitekey/.
[5] Stephen Bell. Invalid banking cert spooks only one user in 300. ComputerWorld New Zealand, http://www.computerworld.co.nz/news.nsf/NL/-FCC8B6B48B24CDF2CC257002001%8FF73, May 2005.
[6] Sonia Chiasson, P.C. van Oorschot, and Robert Biddle. A usability study and critique of two password managers. In Proceedings of the 15th USENIX Security Symposium, pages 1â€“16, August 2006.
[7] Tyler Close. Petname tool. http://petname.mozdev.org/.
[8] Tyler Close. Waterken YURL. http://www.waterken.com/dev/YURL/httpsy/.
[13] Alan O. Freier, Philip Karlton, and Paul C. Kocher. The SSL Protocol Version 3.0. Internet Draft, November 1996.