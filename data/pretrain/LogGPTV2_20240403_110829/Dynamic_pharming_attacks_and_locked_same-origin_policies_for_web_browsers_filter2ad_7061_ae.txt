In this case, the Javascript ﬁle from www.paypalobjects.com
will execute in the context of www.paypal.com and the browser
gives it full access to www.paypal.com. An adversary capa-
ble of pharming www.paypalobjects.com will effectively be
able to insert Javascript on the PayPal homepage and hijack users’
sessions. Notice that the adversary does not need to pharm www.
paypal.com for this attack to succeed. Browsers also allow
cross-domain Java and Flash, and there are mechanisms which en-
able Java and Flash to interact with the enclosing document.
In light of these vulnerabilities, a vigilant web site should forgo
the use of Java and Flash, and include all necessary Javascript ex-
plicitly within its web pages. However, this signiﬁcantly restricts
ﬂexibility and functionality. Unfortunately, we can do little to pro-
tect active objects requested over HTTP. For active objects requested
over HTTPS, we discuss two solutions: 1) YURLs, and 2) extend-
ing the locked SOPs.
4.8.1 YURLs
A YURL [8] consists of a URL and a public key hash, and the
browser can use the hash to authenticate the server. For example,
if browser requests a YURL for xyz.com, the browser uses DNS
to resolve xyz.com to an IP address, and then establishes an SSL
connection with the server. After a connection is established, the
browser compares the public key hash in the YURL against the
public key of the server. If the hash is consistent with the server’s
public key, the browser proceeds with the request; otherwise it can-
cels the connection with no opportunity for user override. YURLs
help active objects resist pharming attacks because they enable web
sites to explicitly specify the server hosting an object by its public
key. Browsers do not currently support YURLs, but the necessary
modiﬁcations should be relatively simple and straightforward.
4.8.2 Extending the locked same-origin policies
We can also extend the locked SOPs to help protect same-domain
requests for active objects against pharming attacks. Since in the
strong locked SOP, a web site explicitly speciﬁes the list of valid
public keys for its domain, a browser can safely refuse to load ac-
tive objects from a alleged server for that domain with a different
public key. We can similarly extend the weak locked SOP. If the
server for the enclosing page has valid certiﬁcate, then a browser
should only accept a same-domain active object from a server with
a valid certiﬁcate. Based on the results of our deployability anal-
ysis, this additional restriction for the weak locked SOP should be
safe.
Unfortunately, this approach will not work for cross-domain ac-
tive objects. Since the enclosing page and the object are from dif-
ferent domains, their certiﬁcates are incomparable. Currently, if the
server hosting the object has an invalid certiﬁcate, most browsers
and plugins will issue a warning, but as we have seen, users often
ignore and override such warnings.
4.9 Caching and dependent elements
Browsers do not by default persistently cache HTTPS web ob-
jects (except SSL-only cookies), but they do use session caching.
As we demonstrated in Section 4.8, adversaries can use the cache to
launch subtle dynamic pharming attacks. Also, vulnerabilities may
arise if adversaries can control dependent HTML elements, such as
images and style sheets. To resist attacks involving the cache and
4.10 Limitations
Our locked same-origin policies do not address attacks where the
adversary tricks a victim into installing malicious software such as
executable malware, an ActiveX plugin, or a browser extension.
These objects usually execute with elevated privilege and are not
governed by the SOP.
Security researchers have found DNS rebinding weaknesses in
third-party browser plugin implementations such as Flash, Java,
and Adobe Reader. Some of these weaknesses can be exploited
to launch dynamic pharming attacks, and the locked SOPs do not
address them. Jackson et al. address some of these vulnerabili-
ties [29], and the locked SOPs can work in conjunction with their
solutions to resist dynamic pharming attacks.
The locked same-origin policies do not address problems in the
Javascript language or implementation (e.g., Javascript Prototype
Hijacking) [54], cross-side scripting (XSS) vulnerabilities in servers,
and cross-site request forgery (XSRF) attacks. Other research ef-
forts address XSS vulnerabilities [27, 39, 44, 79, 80] and XSRF
attacks [31, 34, 35], and these techniques complement our work.
We also do not address browser-side cross-site scripting vulnera-
bilities, such as Universal XSS [54].
5. APPLICATIONS TO WEB
AUTHENTICATION
In this section, we discuss how the locked same-origin policies
can help protect two existing browser authentication mechanisms,
client side-SSL and SSL-only cookies, against pharmers and ac-
tive attackers. However, the web authentication problem is actually
two distinct subproblems: the initialization of users’ authentication
credentials and the use of those credentials to authenticate users to
web sites. Our discussion in this section focuses primarily on the
latter, but we discuss initialization brieﬂy.
Client-side SSL. Intuitively, since client-side SSL authenticates
users with end-to-end cryptography, one might expect it would pro-
tect sensitive web sessions against pharming and active attacks,
but unfortunately, the presence of dynamic pharming vulnerabili-
ties proves this is not the case. However, using one of our locked
same-origin policies in conjunction with client-side SSL results in
an authentication scheme with strong security properties. The user
is not required to memorize her private key. After the user im-
ports her private key, her browser uses it automatically. Although
an adversary may be able to trick a user into participating in mu-
tual authentication using SSL, the adversary cannot use this inter-
action to impersonate the user at another web site. Authentication
requires knowledge of the private key, which the user’s browser al-
ways keeps secret. As a result, the browser authenticates the user’s
requests cryptographically and the locked SOP isolates the user’s
authenticated sessions from malicious subjects – even if the adver-
sary is a pharmer or active attacker.
SSL-only cookies. Many web sites use cookies for authentica-
tion [16]. For example, some web sites offer a “remember me”
option, which sets a persistent cookie on a user’s machine. The
browser will present this cookie during subsequent visits to the web
site, enabling the user to bypass the initial login process. Some
existing anti-phishing solutions also use authentication cookies to
complement regular password authentication. Examples include
Bank of America’s SiteKey [4] and similar approaches by ING Di-
rect [28], Vanguard [74], and Yahoo [81]. Before a user is per-
mitted to login from a particular computer, she must “register” it.
The registration process sets a SSL-only persistent authentication
cookie on the user’s computer, and only computers with authenti-
cation cookies are permitted to access the user’s account. In current
browsers, cookie authentication resists phishing attacks but is vul-
nerable to pharming attacks. Our locked same-origin policies pro-
tect SSL-only cookies against pharmers and active attackers. Thus,
in conjunction with browsers enforcing a locked SOP, web sites
can use SSL-only persistent cookies to authenticate users and resist
phishing, pharming, and active attacks.
Other authentication mechanisms. The locked same-origin poli-
cies nicely complement other authentication mechanisms designed
to resist pharming, such as Phoolproof phishing prevention [55]
and Passpet [83]. Our policies help these schemes resist dynamic
pharming attacks.
The registration problem. The initialization of a user’s authen-
tication credentials is commonly known as the registration prob-
lem. The registration problem is a critical element of any web au-
thentication scheme, and a challenging problem on its own right.
For space reasons, we do not attempt to explore potential solutions
here. One key challenge in the registration problem is resisting
registration attacks. Bank of America’s SiteKey and similar anti-
phishing mechanisms have registration attack vulnerabilities [67,
85]. When a SiteKey user initially registers, she gives answers
to several “personal entropy” questions [12], questions to which
a phisher is unlikely to be able to guess the answers, e.g., “What
is the name of your high school mascot?”. Users who need to
register another computer must correctly answer these questions
before receiving an authentication cookie. However, phishers and
pharmers can use a man-in-the-middle registration attack to solicit
the correct answers from unsuspecting victims and obtain valid au-
thentication cookies, making SiteKey insecure against registration
attacks. The problem is that “in-band” (HTTP-based) registration
procedures are normally vulnerable to the same attacks we are try-
ing to prevent. We are exploring registration protocols utilizing
“out of band” channels to distribute authentication credentials.
6. RELATED WORK
Several anti-phishing mechanisms help provide information to
users regarding the trustworthiness of web sites. Since studies have
shown that users can be fooled by misleading domain names and
do not understand browser security indicators [10, 14, 15, 18], sev-
eral researchers and security vendors have developed browser ex-
tensions to make it easier for users to interpret relevant security
information [7, 25, 43, 69], use a blacklist to help identify known
phishing sites [11, 52], or establish trusted paths with sites users
have a relationship with [9, 78, 82]. Recent versions Firefox and In-
ternet Explorer have adopted similar mechanisms. However, these
approaches still expect some degree of diligence from users to re-
liably observe security warnings and indicators to operate securely,
and studies have shown that users still have troubling interpreting
improved security indicators and warnings [30, 64, 77, 78]. In addi-
tion, studies have also shown that many browser extensions which
try to automatically detect phishing sites are often wrong and in-
consistent [86].
Another approach to resisting phishing attacks is better pass-
word management. Passwords are still the dominant method of
web authentication. Password databases included with most mod-
ern web browsers automatically ﬁll in passwords for users. How-
ever, users might still manually disclose their passwords to phish-
ing sites or use the same password for multiple sites. Password
hashing addresses these problems by hashing the user’s secret pass-
word together with a variable, non-secret string (e.g., each site’s
domain name) to produce per-site passwords [1, 17, 24, 37, 38, 62,
83]. Recent work in this area has made usability one of the pri-
mary goals [24, 62, 83], but studies have shown some users still
have trouble using them correctly and securely [6]. Also, if pass-
word hashing scheme generates passwords based on the site’s do-
main [24, 62], it is vulnerable to pharming attacks. Passpet [83]
provides some resistance to pharming attacks, but is still vulnera-
ble to dynamic pharming.
The Phoolproof phishing prevention system uses cell phones to
manage client-side SSL certiﬁcates for authentication on behalf of
users [55]. Phoolproof’s designers also noted the importance of
disclosure resistant authentication credentials.
In Phoolproof, a
user logs in using a secure bookmark on her cell phone. The cell
phone then 1) initiates an SSL connection to the web site via a
Bluetooth connection with a web browser on the user’s computer;
2) checks the site’s X.509 certiﬁcate against the one stored in the
bookmark; and 3) authenticates the user via client-side SSL. Al-
though Phoolproof veriﬁes the site’s certiﬁcate in step 2, this proto-
col is still vulnerable to a dynamic pharming attack if the adversary
is able to pharm the user (i.e., serve the user a web page which
appears to come from the target domain) before she activates the
login process.
The locked same-origin policies are similar to work done inde-
pendently and concurrently by Masone et al. on Web Server Key
Enabled Cookies, a new cookie policy which tags SSL-only cook-
ies with the server’s public key and allows access only to a server
which can authenticate itself to the same key [41]. However, their
proposal falls short of protecting cookies against dynamic pharm-
ing attacks. Also, they do not address pharming attacks against
other web objects or other web authentication mechanisms, e.g.,
client-side SSL, nor do they address subdomain object sharing or
key updates.
The locked SOP was inspired by the concept of Key Conti-
nuity Management (KCM), a model for key management ﬁrst
proven successful by SSH [60, 84] and made more explicit by Gut-
mann [23]. KCM associates public keys with subjects and takes de-
fensive action when a subject’s public key unexpectedly changes.
Garﬁnkel expands on KCM further, and applies it to S/MIME [19].
Security researchers and browser developers have been aware of
DNS rebinding vulnerabilities since as early as 1996 [22]. In 2001
and 2002, Jim Roskind and Adam Megacz, resp., described ﬁre-
wall circumvention DNS rebinding attacks using DNS records with
short TTLs [42, 61]. DNS pinning was adopted by browsers to de-
fend against these kinds of attacks, but pinning has a lengthy and
controversial history in Firefox and Mozilla [46, 47, 48]. The cur-
rent implementation is an explicit compromise to support dynamic
DNS and round robin DNS for failover. In August 2006, Martin
Johns discovered a reliable technique for circumventing DNS pin-
ning completely [32], and in early 2007, Johns and Kanatoko found
additional DNS rebinding vulnerabilities with Flash and Java [33,
36].
Jackson et al. present a excellent analysis of DNS rebinding
vulnerabilities, including issues with Flash, Java, VPNs, caching,
and proxies [29]. They discuss several countermeasures, including
host name authorization, a technique based on a variant of reverse
DNS lookups. With cooperation from web sites’ DNS servers, host
name authorization enables clients to determine the valid set of do-
main names for a particular IP address. Host name authorization
is promising approach, but since it relies on DNS, it is ineffective
against adversaries capable of subverting DNS.
7. CONCLUSION
We demonstrated how adversaries can use dynamic pharming at-
tacks to hijack users’ authenticated web sessions, irrespective of the
authentication mechanism. Dynamic pharming enables an adver-
sary to eavesdrop on sensitive content, forge transactions, sniff sec-
ondary passwords, etc. To address dynamic pharming attacks, we
introduced two locked same-origin policies, which regulate cross-
object access control using servers’ X.509 certiﬁcates and public
keys, rather than domain names. We evaluated the security and
deployability of our approaches and showed how browsers can de-
ploy these policies today to substantially increase their resistance
to pharming attacks and provide both a solid and necessary foun-
dation for developing pharming resistant authentication.
8. ACKNOWLEDGEMENTS
This work was supported in part by National Science Foundation
award number CCF-0424422 (The TRUST Center). We thank Dan
Boneh and Adam Barth for helpful suggestions with policy ﬁles.
We thank Ben Adida, Naveen Sastry, Ka-Ping Yee, and Zulﬁkar
Ramzan for providing useful comments on previous drafts.
9. REFERENCES
[1] Martin Abadi, T. Mark A. Lomas, and Roger Needham.
Strengthening passwords. Technical Report 1997-033, SRC,
September 1997.
[2] P. Akritidis, W.Y. Chin, V.T. Lam, S. Sidiroglou, and K.G.
Anagnostakis. Proximity Breeds Danger: Emerging Threats
in Metro-area Wireless Networks. In Proceedings of the 16th
USENIX Security Symposium, pages 323–338, August 2007.
[3] Anti-phishing working group.
http://www.antiphishing.org/.
[4] Bank of America Sitekey: Online banking security. http:
//www.bankofamerica/privacy/sitekey/.
[5] Stephen Bell. Invalid banking cert spooks only one user in
300. ComputerWorld New Zealand,
http://www.computerworld.co.nz/news.nsf/
NL/-FCC8B6B48B24CDF2CC257002001%8FF73,
May 2005.
[6] Sonia Chiasson, P.C. van Oorschot, and Robert Biddle. A
usability study and critique of two password managers. In
Proceedings of the 15th USENIX Security Symposium, pages
1–16, August 2006.
[7] Tyler Close. Petname tool.
http://petname.mozdev.org/.
[8] Tyler Close. Waterken YURL.
http://www.waterken.com/dev/YURL/httpsy/.
[13] Alan O. Freier, Philip Karlton, and Paul C. Kocher. The SSL