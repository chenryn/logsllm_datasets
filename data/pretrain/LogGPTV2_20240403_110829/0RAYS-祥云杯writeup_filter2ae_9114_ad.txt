            }
        });
        var a = Java.use('com.test.third.MainActivity');
        a.check.implementation=function(p1){
                console.log(p1);
                return this.check(p1);
        };
     });
###  RE1
题目主函数非常巨大，无法F5，使用idaemu和unicorn模拟执行来辅助我们逆向算法。
    from idaemu import *
    a = Emu(UC_ARCH_X86, UC_MODE_64)
    a.setData(0x80000000,'1234567890abcdefghij123456789012')
    a.eFunc(0x810, 0x6d3,[0x80000000,32])
    flag=''
    for i in a.curUC.mem_read(0x80000000,32):
    print hex(i)
打印出来发现题目对输入的变换就是一个简单的加法，提取出密文减回去即可。
    addr = 0x18096
    end_addr = 0x181cf
    arr=[]
    while(addr!=end_addr):
        if(GetMnem(addr)=='cmp'):
            arr.append(GetOperandValue(addr,1))
        addr = NextHead(addr)
    flag=''
    for i in arr:
        if(i>=0xe8):
            flag+='0123456789'[i-0xe8]
        else:
            flag+='abcdef'[i-0x19]
    print flag
## Crypto
###  simplersa
wiener_attack，根据d的bit_legnth来judge。
exp:
    #coding:utf-8
    import gmpy2
    from Crypto.Util.number import *
    def transform(x,y):       #使用辗转相处将分数 x/y 转为连分数的形式
        res=[]
        while y:
            res.append(x//y)
            x,y=y,x%y
        return res
    def continued_fraction(sub_res):
        numerator,denominator=1,0
        for i in sub_res[::-1]:      #从sublist的后面往前循环
            denominator,numerator=numerator,i*numerator+denominator
        return denominator,numerator   #得到渐进分数的分母和分子，并返回
    #求解每个渐进分数
    def sub_fraction(x,y):
        res=transform(x,y)
        res=list(map(continued_fraction,(res[0:i] for i in range(1,len(res)))))  #将连分数的结果逐一截取以求渐进分数
        return res
    #以上是获得e/n的连分数
    def get_pq(a,b,c):      #由p+q和pq的值通过维达定理来求解p和q
        par=gmpy2.isqrt(b*b-4*a*c)   #由上述可得，开根号一定是整数，因为有解
        x1,x2=(-b+par)//(2*a),(-b-par)//(2*a)
        return x1,x2
    def wienerAttack(e,n):
        for (d,k) in sub_fraction(e,n):  #用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数
            #if k==0:                     #可能会出现连分数的第一个为0的情况，排除
                #continue
            #if (e*d-1)%k!=0:             #ed=1 (\pmod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)
                #continue
            if 250 = PolynomialRing(Zmod(n))
    _e =inverse_mod(e,n)
    for kp in range(e):
        try:
            print(kp)
            f = x + a - _e * (1 - kp)
            x0 = f.monic().small_roots(X=2^kbits, beta=0.4)
            print(x0)
            if x0:
                print(x[0])
                break
        except:
            pass
    from Crypto.Util.number import *
    r=int(x0[0])
    dpp = a + r
    print (dpp)
    def fxxk(n,e,dp):
        for i in range(1,e+1):
            if (dp*e-1)%i == 0:
                if n%(((dp*e-1)/i)+1)==0:
                    p=((dp*e-1)/i)+1
                    q=n/(((dp*e-1)/i)+1)
                    print(p,q)
                    phi = (p-1)*(q-1)
                    d = inverse_mod(e,phi)
                    print(d)
                    print(long_to_bytes(pow(c,d,n)))
    fxxk(n,e,dpp)
###  RSAssss
yafu分解得到p _(nextprime(q) 和 q_ nextprime(p)，
然后爆破x和y解方程（ nextprime(p) = p + x, nextprime(q) = q+y )
    from gmpy2 import *
    from tqdm import *
    from Crypto.Util.number import *
    n=8030860507195481656424331455231443135773524476536419534745106637165762909478292141556846892146553555609301914884176422322286739546193682236355823149096731058044933046552926707682168435727800175783373045726692093694148718521610590523718813096895883533245331244650675812406540694948121258394822022998773233400623162137949381772195351339548977422564546054188918542382088471666795842185019002025083543162991739309935972705871943787733784491735500905013651061284020447578230135075211268405413254368439549259917312445348808412659422810647972872286215701325216318641985498202349281374905892279894612835009186944143298761257
    c=3304124639719334349997663632110579306673932777705840648575774671427424134287680988314129312593361087606243819528298610131797078262351307396831985397555390640151391138633431951746748156610463582479645561779194981806129898009876517899450840875569675976765155608446799203699927448835004756707151281044859676695533373755798273892503194753948997947653100690841880925445059175494314198605475023939567750409907217654291430615102258523998394231436796902635077995829477347316754739938980814293304289318417443493019704073164585505217658570214989150175123757038125380996050761572021986573934155470641091678664451080065719261207
    #yufu
    p_nextq = 89615068527538836315602124154008300286636934599617334867509053076622715365809371740037316558871796433906844464070995869293654082577887578197182408045175035339285085728002838220314068474670975228778464240088084331807420720121364486765011169669747553393661650912114228227308579940164269877101973728452252879383
    q_nextp = n/p_nextq
    print n%p_nextq
    diff = p_nextq - q_nextp
    #print diff
    e = 0x10001
    for x in tqdm(range(2,2222,2)):
        for y in range(2,2222,2):
            b = diff + x*y
            a = x
            c = -q_nextp*y
            delta = b**2 - 4*a*c
            if iroot(delta,2)[1]:
                try:
                    #print iroot(delta,2)
                    q = (-b + iroot(delta,2)[0])/(2*a)
                    assert n%q==0
                    print "suceess"
                    d = inverse(e,q-1)
                    c=3304124639719334349997663632110579306673932777705840648575774671427424134287680988314129312593361087606243819528298610131797078262351307396831985397555390640151391138633431951746748156610463582479645561779194981806129898009876517899450840875569675976765155608446799203699927448835004756707151281044859676695533373755798273892503194753948997947653100690841880925445059175494314198605475023939567750409907217654291430615102258523998394231436796902635077995829477347316754739938980814293304289318417443493019704073164585505217658570214989150175123757038125380996050761572021986573934155470641091678664451080065719261207
                    print long_to_bytes(pow(c,d,q))
                    exit()
                except Exception as ee:
                    print str(ee)
                    pass
    -    
###  easy matrix
GGH，直接套祥哥在xnuca的板子
exp:
    from sage.modules.free_module_integer import IntegerLattice
    import numpy as np
    matrix=np.load("matrix.npy")
    result=np.load("result.npy")
    def BabaisClosestPlaneAlgorithm(L, w):
        '''
        Yet another method to solve apprCVP, using a given good basis.
        INPUT:
        * "L" -- a matrix representing the LLL-reduced basis (v1, ..., vn) of a lattice.
        * "w" -- a target vector to approach to.
        OUTPUT:
        * "v" -- a approximate closest vector.
        Quoted from "An Introduction to Mathematical Cryptography":
        In both theory and practice, Babai's closest plane algorithm
        seems to yield better results than Babai's closest vertex algorithm.
        '''
        G, _ = L.gram_schmidt()
        t = w
        i = L.nrows() - 1
        while i >= 0:
            w -= round( (w*G[i]) / G[i].norm()^2 ) * L[i]
            i -= 1
        return t - w
    def fxxk_ggh(module,row,column):
        module = 2129
        row = 128
        column = 42
        Lattice = Matrix(ZZ, row + column, row)
        for i in range(row):
            for j in range(column):
                Lattice[row + j, i] = matrix[i][j]
            Lattice[i, i] = module
        lattice = IntegerLattice(Lattice, lll_reduce=True)
        target = vector(ZZ, result[:row])
        cvp = BabaisClosestPlaneAlgorithm(lattice.reduced_basis, target)
        #R = IntegerModRing(module)
        FLAG = Matrix(Zmod(module), matrix[:row])
        flag = FLAG \ cvp
        print(''.join( chr(i) for i in flag))
    fxxk_ggh(2129,128,42)
###  more_calc
不知道是不是非预期，直接另外的东西不管，把p看成模数，（m < p)
    import gmpy2
    from Crypto.Util.number import *
    flag = b"flag{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}"
    e = 0x10001
    p = 27405107041753266489145388621858169511872996622765267064868542117269875531364939896671662734188734825462948115530667205007939029215517180761866791579330410449202307248373229224662232822180397215721163369151115019770596528704719472424551024516928606584975793350814943997731939996459959720826025110179216477709373849945411483731524831284895024319654509286305913312306154387754998813276562173335189450448233216133842189148761197948559529960144453513191372254902031168755165124218783504740834442379363311489108732216051566953498279198537794620521800773917228002402970358087033504897205021881295154046656335865303621793069
    c = 350559186837488832821747843236518135605207376031858002274245004287622649330215113818719954185397072838014144973032329600905419861908678328971318153205085007743269253957395282420325663132161022100365481003745940818974280988045034204540385744572806102552420428326265541925346702843693366991753468220300070888651732502520797002707248604275755144713421649971492440442052470723153111156457558558362147002004646136522011344261017461901953583462467622428810167107079281190209731251995976003352201766861887320739990258601550606005388872967825179626176714503475557883810543445555390014562686801894528311600623156984829864743222963877167099892926717479789226681810584894066635076755996423203380493776130488170859798745677727810528672150350333480506424506676127108526488370011099147698875070043925524217837379654168009179798131378352623177947753192948012574831777413729910050668759007704596447625484384743880766558428224371417726480372362810572395522725083798926133468409600491925317437998458582723897120786458219630275616949619564099733542766297770682044561605344090394777570973725211713076201846942438883897078408067779325471589907041186423781580046903588316958615443196819133852367565049467076710376395085898875495653237178198379421129086523
    phi = p - 1
    d = gmpy2.invert(e, phi)
    m = gmpy2.powmod(c, d, p)
    print(long_to_bytes(m))
###  blowfish
基本字节翻转再来一个beast，
    #coding:utf-8
    from base64 import *
    from pwn import *
    from hashlib import sha384
    from string import printable
    from tqdm import *
    #context.log_level = 'debug'
    sh = remote("8.131.69.237","15846")
    def _xor(s1,s2):
        tmp=""
        for i in range(len(s1)):
            tmp+=chr(ord(s1[i])^ord(s2[i]))
        #print tmp
        return tmp
    def sha384(content):
        return hashlib.sha384(content).hexdigest()
    def PoW():
        sh.recvuntil("sha384(XXX+")
        tail = sh.recvuntil(")")[:-1]
        sh.recvuntil(" == ")
        tar = sh.recvuntil("\n")[:-1]
        for i in tqdm(printable):
            for j in printable:
                for k in printable:
                    tmp = i+j+k
                    #print tmp+tail
                    #print tar
                    #print sha384(tmp+tail)
                    if sha384(tmp+tail) == tar:
                        sh.sendline(tmp)
                        return
        else:
            print "no"
    PoW()                    
    sh.recvuntil("\\___/|_|  |_|\\__,_|\n")
    sh.recvuntil("\n")
    msg = sh.recvuntil("\n")[:-1]
    #print "msg",msg
    #msg='ralI0ycVw0IuDjZ/cPp0m6dxFH1ROdAo'
    iv = b64decode(msg)[:8]
    cipher = b64decode(msg)[8:]
    #print iv,cipher
    ticket=b64encode(_xor(_xor(iv,'Blowfish'),'get_flag')+cipher)
    #print "ticket",ticket
    pre="0"*47
    flag=""
    for block in range(42):
            sh.sendline(ticket)
            sh.sendline(pre)
            target = b64decode(sh.recvuntil("\n")[:-1])[40:48]
            for i in printable:
                tmp = '0'*(47-block)+flag+i
                sh.sendline(ticket)
                sh.sendline(tmp)
                get = sh.recvuntil("\n")[:-1]
                now = b64decode(get)
                #print now
                if now[40:48] == target:
                    flag += i
                    print flag
                    pre = pre[:-1]
                    break
            else:
                print "no"