              the error ETIMEDOUT.  If the futex was not equal to the expected value, the  operation  fails  with  the  
              error  EWOULDBLOCK.  Signals (see signal(7)) or other spurious wakeups cause FUTEX_WAIT to fail with the  
              error EINTR.  
       FUTEX_WAKE  
              Returns the number of processes woken up.  
       FUTEX_FD  
              Returns the new file descriptor associated with the futex.  
       FUTEX_REQUEUE  
              Returns the number of processes woken up.  
       FUTEX_CMP_REQUEUE  
              Returns the number of processes woken up.  
       In the event of an error, all operations return -1, and set errno to indicate the error.  
ERRORS  
       EACCES No read access to futex memory.  
       EAGAIN FUTEX_CMP_REQUEUE found an unexpected futex value.  (This  probably  indicates  a  race;  use  the  safe  
              FUTEX_WAKE now.)  
       EFAULT Error in getting timeout information from userspace.  
       EINVAL An operation was not defined or error in page alignment.  
       ENFILE The system limit on the total number of open files has been reached.  
       ENOSYS Invalid operation specified in op.  
VERSIONS  
       Initial  futex support was merged in Linux 2.5.7 but with different semantics from what was described above.  A  
       4-argument system call with the semantics given here was introduced in Linux 2.5.40.  In Linux 2.5.70 one argu-  
       ment was added.  In Linux 2.6.7 a sixth argument was added — messy, especially on the s390 architecture.  
CONFORMING TO  
       This system call is Linux-specific.  
NOTES  
       To  reiterate, bare futexes are not intended as an easy-to-use abstraction for end-users.  (There is no wrapper  
       function for this system call in glibc.)  Implementors are expected to be assembly literate and  to  have  read  
       the sources of the futex userspace library referenced below.  
SEE ALSO  
       futex(7)  
       Fuss,  Futexes  and Furwocks: Fast Userlevel Locking in Linux (proceedings of the Ottawa Linux Symposium 2002),  
       futex example library, futex-*.tar.bz2 .  
COLOPHON  
       This page is part of release 3.22 of the Linux man-pages project.  A description of the project,  and  informa-  
       tion about reporting bugs, can be found at http://www.kernel.org/doc/man-pages/.  
Linux                             2008-11-27                          FUTEX(2)  
```  
2\. man 7 futex  
```  
FUTEX(7)                   Linux Programmer’s Manual                  FUTEX(7)  
NAME  
       futex - Fast Userspace Locking  
SYNOPSIS  
       #include   
DESCRIPTION  
       The Linux kernel provides futexes ("Fast Userspace muTexes") as a building block for fast userspace locking and  
       semaphores.  Futexes are very basic and lend themselves well for building  higher  level  locking  abstractions  
       such as POSIX mutexes.  
       This  page does not set out to document all design decisions but restricts itself to issues relevant for appli-  
       cation and library development.  Most programmers will in fact not be using futexes directly but  instead  rely  
       on system libraries built on them, such as the NPTL pthreads implementation.  
       A futex is identified by a piece of memory which can be shared between different processes.  In these different  
       processes, it need not have identical addresses.  In its bare form, a futex has semaphore semantics;  it  is  a  
       counter  that  can  be incremented and decremented atomically; processes can wait for the value to become posi-  
       tive.  
       Futex operation is entirely userspace for the non-contended case.  The kernel is only involved to arbitrate the  
       contended  case.  As any sane design will strive for non-contention, futexes are also optimized for this situa-  
       tion.  
       In its bare form, a futex is an aligned integer which is only touched by atomic assembler  instructions.   Pro-  
       cesses  can share this integer using mmap(2), via shared memory segments or because they share memory space, in  
       which case the application is commonly called multithreaded.  
   Semantics  
       Any futex operation starts in userspace, but it may necessary to communicate with the kernel using the futex(2)  
       system call.  
       To "up" a futex, execute the proper assembler instructions that will cause the host CPU to atomically increment  
       the integer.  Afterwards, check if it has in fact changed from 0 to 1, in which case there were no waiters  and  
       the operation is done.  This is the non-contended case which is fast and should be common.  
       In  the  contended case, the atomic increment changed the counter from -1  (or some other negative number).  If  
       this is detected, there are waiters.  Userspace should now set the counter to 1 and instruct the kernel to wake  
       up any waiters using the FUTEX_WAKE operation.  
       Waiting  on  a futex, to "down" it, is the reverse operation.  Atomically decrement the counter and check if it  
       changed to 0, in which case the operation is done and the futex was uncontended.  In all  other  circumstances,  
       the  process should set the counter to -1 and request that the kernel wait for another process to up the futex.  
       This is done using the FUTEX_WAIT operation.  
       The futex(2) system call can optionally be passed a timeout specifying how long the kernel should wait for  the  
       futex  to  be  upped.   In this case, semantics are more complex and the programmer is referred to futex(2) for  
       more details.  The same holds for asynchronous futex waiting.  
VERSIONS  
       Initial futex support was merged in Linux 2.5.7 but with different semantics from those described above.   Cur-  
       rent semantics are available from Linux 2.5.40 onwards.  
NOTES  
       To  reiterate,  bare  futexes  are  not intended as an easy to use abstraction for end-users.  Implementors are  
       expected to be assembly literate and to have read the sources of the futex userspace library referenced  below.  
       This man page illustrates the most common use of the futex(2) primitives: it is by no means the only one.  
SEE ALSO  
       futex(2)  
       Fuss,  Futexes  and Furwocks: Fast Userlevel Locking in Linux (proceedings of the Ottawa Linux Symposium 2002),  
       futex example library, futex-*.tar.bz2 .  
COLOPHON  
       This page is part of release 3.22 of the Linux man-pages project.  A description of the project,  and  informa-  
       tion about reporting bugs, can be found at http://www.kernel.org/doc/man-pages/.  
Linux                             2002-12-31                          FUTEX(7)  
```  
3\. https://sourceware.org/systemtap/SystemTap_Beginners_Guide/futexcontentionsect.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")