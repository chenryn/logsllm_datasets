:   ::: para
    显示更详细的信息。就是说多进程的进程信息会为每个进程显示详细的信息。
    :::
[`-V`{.option}]{.term}
:   ::: para
    显示 [**numastat**]{.application} 版本信息。
    :::
[`-z`{.option}]{.term}
:   ::: para
    省略表格显示的信息中数值为 0 的行和列。注：有些接近 0
    的值都四舍五入为 0 以方便显示，这些数值不会在显示的输出结果中省略。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#s-cpu-numad}4.1.4. NUMA 亲和性管理守护进程（[**numad**]{.application}） {.title}
:::
::: para
[**numad**]{.application} 是一个自动 NUMA
亲和性管理守护进程，它监控系统中的 NUMA 拓扑以及资源使用以便动态提高
NUMA 资源分配和管理（以及系统性能）。
:::
::: para
根据系统负载，[**numad**]{.application} 可对基准性能有 50%
的提高。要达到此性能优势，[**numad**]{.application} 会周期性访问
`/proc`{.filename}
文件系统中的信息以便监控每个节点中的可用系统资源。该守护进程然后会尝试在有足够内存和
CPU 资源的 NUMA 节点中放置大量进程已优化 NUMA
性能。目前进程管理阈为至少是一个 CPU 的 50%，且至少有 300 MB
内存。[**numad**]{.application} 会尝试维护资源使用水平，并在需要时通过在
NUMA 节点间移动进程平衡分配。
:::
::: para
[**numad**]{.application}
还提供预布置建议服务，您可以通过各种任务管理系统进行查询以便提供 CPU
起始捆绑以及进程内存资源的支持。这个预布置建议服务无论系统中是否运行
[**numad**]{.application} 都可以使用。有关为预布置建议使用 `-w`{.option}
选项的详情请参考 man page：`man numad`{.command}。
:::
::: section
::: titlepage
### [⁠]{#main-cpu.html#idm140329722506736}4.1.4.1. [**numad**]{.application} 的优点 {.title}
:::
::: para
[**numad**]{.application}
主要可让长期运行消耗大量资源的系统受益，特别是当这些进程是包含在总系统资源子集中时尤为突出。
:::
::: para
[**numad**]{.application} 还可以让消耗相当于多个 NUMA
节点资源的程序受益，但 [**numad**]{.application}
提供的优势可被由于系统增长而消耗的资源比例抵消。
:::
::: para
[**numad**]{.application}
不太可能在进程只运行几分钟或者不会消耗很多资源时改进性能。有连续不可预测内存访问的系统，比如大型内存中的数据库也不大可能从
[**numad**]{.application} 使用中受益。
:::
:::
::: section
::: titlepage
### [⁠]{#main-cpu.html#idm140329714450288}4.1.4.2. 操作模式 {.title}
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
内核内存审核统计数据之间可能会在大规模整合后产生冲突。如果是这样则可能会在
KSM 数据库处整合大量内存时让 [**numad**]{.application} 困惑。将来的 KSM
守护进程版本可能会更好地识别
NUMA。但目前，如果您的系统有大量剩余内存，则可能需要您关闭并禁用 KSM
守护进程方可获得较高的性能。
:::
:::
:::
::: para
[**numad**]{.application} 有两种使用方法：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    作为服务使用
    :::
-   ::: para
    作为可执行文件使用
    :::
:::
::: section
::: titlepage
#### [⁠]{#main-cpu.html#idm140329760462336}4.1.4.2.1. 将 [**numad**]{.application} 作为服务使用 {.title}
:::
::: para
在 [**numad**]{.application}
服务运行时，它将会尝试根据其负载动态调节系统。
:::
::: para
要启动该服务，请运行：
:::
``` screen
# service numad start
```
::: para
要让该服务在重启后仍保留，请运行：
:::
``` screen
# chkconfig numad on
```
:::
::: section
::: titlepage
#### [⁠]{#main-cpu.html#idm140329713272368}4.1.4.2.2. 将 [**numad**]{.application} 作为可执行文件使用 {.title}
:::
::: para
要将 [**numad**]{.application} 作为可执行文件使用，请运行：
:::
``` screen
# numad
```
::: para
[**numad**]{.application}
将运行直到将其停止。在它运行时，其活动将被记录到
`/var/log/numad.log`{.filename} 文件中。
:::
::: para
要将 [**numad**]{.application}
限制为管理具体进程，请使用以下选项启动它。
:::
``` screen
# numad -S 0 -p pid
```
::: variablelist
[*`-p pid`*]{.term}
:   ::: para
    在明确包含列表中添加指定的 *pid*。[**numad**]{.application}
    进程将管理这个指定的进程直到达到其重要阈值。
    :::
[*`-S mode`*]{.term}
:   ::: para
    *`-S`* 参数指定扫描的进程类型。如示将其设定为 `0`{.literal} 则将
    [**numad**]{.application} 管理明确规定到所包含的进程。
    :::
:::
::: para
要停止 [**numad**]{.application}，请运行：
:::
``` screen
# numad -i 0
```
::: para
停止 [**numad**]{.application} 不会删除它对改进 NUMA
亲和性所做的更改。如果系统使用大量更改，再次运行
[**numad**]{.application} 将调整清河性以便在新条件下提高性能。
:::
::: para
有关 [**numad**]{.application} 可用选项的详情请参考
[**numad**]{.application} man page：`man numad`{.command}。
:::
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#main-cpu.html#s-cpu-scheduler}4.2. CPU 调度 {.title}
:::
::: para
[*调度程序*]{.emphasis}负责保证系统中的 CPU 处于忙碌状态。Linux
调度程序采用[*调度策略*]{.emphasis}，它可以决定合适以及在具体 CPU
核中线程运行的时间。
:::
::: para
调度策略有两个主要分类：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    实时策略
    :::
    ::: itemizedlist
    -   ::: para
        SCHED_FIFO
        :::
    -   ::: para
        SCHED_RR
        :::
    :::
2.  ::: para
    一般策略
    :::
    ::: itemizedlist
    -   ::: para
        SCHED_OTHER
        :::
    -   ::: para
        SCHED_BATCH
        :::
    -   ::: para
        SCHED_IDLE
        :::
    :::
:::
::: section
::: titlepage
## [⁠]{#main-cpu.html#idm140329714383088}4.2.1. 实时调度策略 {.title}
:::
::: para
首先调度实时线程，所有实时线程调度完成后会调度一般线程。
:::
::: para
[*实时*]{.emphasis}策略用于必须无间断完成的关键时间任务。
:::
::: variablelist
[`SCHED_FIFO`{.literal}]{.term}
:   ::: para
    这个策略也称作[*静态优先调度*]{.emphasis}，因为它为每个线程规定固定的优先权（在
    1 到 99 之间）。该调度程序根据优先权顺序扫描 SCHED_FIFO
    线程列表，并调度准备好运行的最高优先权线程。这个线程会运行到它阻断、推出或者被更高的线程抢占准备运行的时候。
    :::
    ::: para
    即使是最低优先权的实时线程也会比非实时策略线程提前被调度。如果只有一个实时线程，则
    `SCHED_FIFO`{.literal} 优先权值就无所谓了。
    :::
[`SCHED_RR`{.literal}]{.term}
:   ::: para
    `SCHED_FIFO`{.literal} 策略的轮循变体。也会为 `SCHED_RR`{.literal}
    线程提供 1-99
    之间的固定优先权。但有相同优先权的线程使用特定仲裁或者时间片以轮循方式进行调度。`sched_rr_get_interval(2)`{.methodname}
    系统调用所有时间片返回的数值，但用户无法设定时间片持续时间。这个策略在您需要以相同的优先权运行多个线程是很有帮助。
    :::
:::
::: para
有关实时调度策略的规定的语义详情请参考系统界面 --- 实时中的*《IEEE
1003.1 POSIX 标准》*，地址为
。
:::
::: para
定义线程优先权的最佳实践是从低开始，并只在识别了合法延迟时才增加优先权。实时线程不象一般线程那样是时间片。`SCHED_FIFO`{.literal}
线程只有在他们阻断、退出或者由更高优先权线程占先时才停止。因此不建议将优先权设定为
99。因为这样会将您的进程放到与迁移和 watchdog
线程相同的优先权等级。如果这些线程因为您的线程进入计算池而被阻断，则他们将无法运行。单处理机系统会在这种情况下平均分配锁定。
:::
::: para
在 Linux 内核中，`SCHED_FIFO`{.literal}
策略包括一个带宽封顶机制。这样可以保护实时应用程序程序员不会受可能独占
CPU 的任务影响。这个机制可通过 `/proc`{.filename} 文件系统参数进行调整：
:::