User: write a kql query for  Host Exporting Mailbox and Removing Export
Assistant: let starttime = 14d;
let endtime = 1d;
let timeframe = 1h;
let scorethreshold = 1.5;
let percentthreshold = 50;
// Preparing the time series data aggregated hourly count of MailItemsAccessd Operation in the form of multi-value array to use with time series anomaly function.
let TimeSeriesData =
    CloudAppEvents 
    | where Timestamp   between (startofday(ago(starttime))..startofday(ago(endtime)))
    | where ActionType =~ "MailItemsAccessed"
    | where Application has "Exchange"
    | extend RawEventData = parse_json(RawEventData)
    | where RawEventData.ResultStatus == "Succeeded"  
    | project Timestamp, ActionType, RawEventData.MailboxOwnerUPN    
    | make-series Total=count() on Timestamp from startofday(ago(starttime)) to startofday(ago(endtime)) step timeframe;
let TimeSeriesAlerts =
  TimeSeriesData
  | extend (anomalies, score, baseline) = series_decompose_anomalies(Total, scorethreshold, -1, 'linefit')
  | mv-expand Total to typeof(double), Timestamp to typeof(datetime), anomalies to typeof(double), score to typeof(double), baseline to typeof(long)
  | where anomalies > 0
  | project Timestamp, Total, baseline, anomalies, score;
  // Joining the flagged outlier from the previous step with the original dataset to present contextual information
  // during the anomalyhour to analysts to conduct investigation or informed decisions.
  TimeSeriesAlerts | where Timestamp > ago(2d)  
  // Join against base logs since specified timeframe to retrive records associated with the hour of anomoly
  | join (
      CloudAppEvents 
        | where Timestamp > ago(2d)
        | where ActionType =~ "MailItemsAccessed"
        | where Application has "Exchange"
        | extend RawEventData = parse_json(RawEventData)
        | where RawEventData.ResultStatus == "Succeeded"  
  ) on Timestamp