### 2. Mathematical Formulations and Checks

The following mathematical formulation ensures the validity of difficulty transitions in queried blocks:

\[
D_{\text{start}} \cdot \tau^{k + \tau - (\tau + 1)\tau} \sum_{i=-n-k}^{\tau-1} \tau^i + \sum_{i=k+1}^{k+n} \tau^i
\]

where:
- \( D_{\text{start}} \) is the initial difficulty,
- \( \tau \) is the difficulty adjustment factor,
- \( k \) is the number of difficulty-lowering transitions,
- \( n \) is the total number of blocks.

The time \( t \) must be sufficiently long to cover the required number of difficulty-lowering transitions. If \( n = k \), all periods are maximally increasing, and \( t \leq f \cdot \tau \cdot n \).

For other scenarios, such as when \( k \) is not an integer or \( k < 0 \), the calculations follow a similar pattern.

These checks ensure that the difficulty transitions of queried blocks are valid and that the queried blocks were not affected by invalid difficulty transitions. We formally prove this by showing that an adversary using invalid difficulty transitions cannot increase its success probability. Specifically, the adversary might as well have used valid difficulty transitions and mined more invalid blocks.

**Lemma 4.** Let \( A \) be an adversary defined by the variable backbone model that produces a chain \( C \) with non-negligible probability \( p \) such that \( k \) blocks are valid. Assuming a collision-resistant hash function, there exists an adversary \( A' \) that, using the same number of oracle queries as \( A \), respects the retargeting rules and produces a chain \( C' \) with probability at least \( p - \text{negl}(\lambda) \) that contains the same valid blocks but respects the retargeting rules.

The proof of Lemma 4 is provided in Appendix B-E.

### 3. Non-Interactive FlyClient

We present the probabilistic verification as an interactive protocol between a client and a verifier. The client queries random blocks according to a publicly known probability distribution. This interactive public-coin protocol can be transformed into a non-interactive argument using the Fiat-Shamir heuristic [30]. The randomness for determining which blocks are sampled is derived using a secure hash function (e.g., SHA-3) applied to the head of the chain. The verifier checks both the queries and the proper derivation of the randomness.

The Fiat-Shamir heuristic converts the statistical soundness of the information-theoretic sampling protocol into computational soundness. A prover can receive new samples by recomputing the final block header, but this requires solving a new PoW puzzle, which itself requires a high number of hash function queries. Our security assumption provides a concrete bound on the number of PoW puzzles the adversary can solve, which is \( c \cdot n \). Let \( p_m \) be the soundness of Protocol 1 and \( 2^{-\lambda} \) be the desired failure probability (e.g., \( 2^{-50} \)). Using the union bound, we conclude that the non-interactive FlyClient is secure as long as \( p_m < \frac{2^{-\lambda}}{c \cdot n} \).

### 4. FlyClient Security

We finally prove the security of the overall protocol. The proof uses the security of the information-theoretic sampling protocol and the cryptographic MMR to make the queries verifiable and ensure that the proper difficulty rules are followed.

**Theorem 1 (FlyClient).** Assuming a variable difficulty backbone protocol where all adversaries are limited to be \((c, L)\)-adversaries as per Assumption 2, and assuming a collision-resistant hash function \( H \) (Definition 8), the FlyClient protocol is a secure NIPoPoW protocol in the random oracle model as per Definition 3 with all but negligible probability. The protocol is succinct with proof size \( O(L + \lambda \cdot \log_{1/c}(n) \cdot \log_2(n)) \).

**Proof.** The \((c, L)\)-adversary assumption requires that all difficulty transitions are honest. Lemma 4 shows that any adversary not following these transitions is not more successful in fooling the verifier. The security of the MMR ensures that the MMR is position and weight binding with overwhelming probability. Corollary 2 shows that with \( O(\lambda \log_{1/c}(n)) \) queries and a constant number of \( L \) blocks being checked at the end, the probability of an adversary evading the sampling protocol is negligible. The one-round public coin protocol can be made non-interactive using the Fiat-Shamir heuristic, which is secure in the random oracle model [34]. The proof size consists of \( L \) successive blocks being revealed plus the sampled blocks and their MMR paths, giving a total proof size of \( O(L + \lambda \log_{1/c}(n) \log_2(n)) \) hashes and blocks.

### 5. Evaluation

#### Experimental Setup

We implemented FlyClient and evaluated it empirically in two different scenarios, focusing on the proof size. Both creating and verifying proofs is fast, taking less than a second in our unoptimized implementation.

We evaluate the performance of FlyClient using data from the Ethereum blockchain, which has widely varying difficulty. FlyClient significantly outperforms standard SPV clients, especially for longer chains. The evaluation assumes a block header of 508 bytes and a hash output of 32 bytes. Additionally, the MMR nodes contain 16 bytes to store the time and difficulty parameters. Note that Ethereum does not strictly satisfy the definition of the variable difficulty model as explained in Section III-B. We still evaluate FlyClient on Ethereum because it has a high block production rate, making the evaluation results more interesting. Additionally, it is possible to run FlyClient for Ethereum but only with heuristic security guarantees until the Ethereum backbone itself has been proven to be secure.

**Figure 3.** The plot shows the number of manually checked blocks \( L \) and the number of queried blocks for the Ethereum blockchain with \( c = 0.5 \) and \( \lambda = 50 \). Additionally, on the secondary axes, the plot shows the proof size both without the MMR proof optimization and with it.

#### Implementation and Optimizations

We implemented FlyClient as a proof of concept in Python. Our implementation supports the production and verification of FlyClient proofs but does not verify state transitions. We assume a hard fork, i.e., each block header contains the MMR root of all previous blocks. We perform several optimizations to minimize the proof size:

1. **Optimize for Smallest Proof Size:** We try different values of \( \delta \) to minimize the proof size. The security holds for arbitrary values of \( \delta \), so a prover can choose a \( \delta \) that minimizes the proof size. Our protocol does this automatically while ensuring that at least \( L = \lambda \) blocks are checked at the end.
2. **Reduce Overlapping MMR Proof Elements:** We avoid duplicating overlapping MMR proof elements. The overlaps are common as our sampling distribution samples late blocks with higher probability. The verifier can detect shared nodes and does not require duplicated information. This optimization reduces the proof size by around 30%.

**Figure 4.** FlyClient for the Ethereum chain at varying chain lengths \( n \) and for different adversarial powers \( c \). Additionally, the difficulty is displayed on the secondary axis.

### 6. Ethereum Implementation with Variable Difficulty

We implement FlyClient and evaluate it using data from the Ethereum blockchain. We measure its performance at different chain lengths, i.e., at different historic data points. Ethereum's PoW difficulty varies widely and has historically been increasing. Note that technically, Ethereum's difficulty transition function does not fall into the variable difficulty model of [10]. We still use Ethereum data as it is a popular PoW blockchain with a long chain. Additionally, using FlyClient for Ethereum is possible but only heuristically secure as explained in Section III-A.

FlyClient is the first PoPoW design that achieves succinct proof sizes for variable difficulty chains. For \( c = 0.5 \), i.e., the adversary controls less than a third of the total mining power, the proofs are less than 1 MB even for 7,000,000 Ethereum blocks. This compares to a 3.4 GB SPV proof size for the same chain. Interestingly, the proof size decreases from 3 to 4 million blocks as the difficulty rapidly grows, reducing the number of blocks that need to be sampled from the rest of the chain. From 3 to 4 million blocks, a so-called difficulty bomb [35] resulted in a rapid increase in proof size. This "bomb" was removed at around 4.3 million blocks, leading to a drastic decrease in difficulty and a slightly higher proof size.

### 7. Acknowledgements

We thank the anonymous CCS reviewers for pointing out Bahack style attacks and problems with the security proof in a previous version of the paper. We also thank Vladislav Gelfer, Dionysis Zindros, Matthew Jagielski, and Mahnush Movahedi for helpful comments and discussions. This work was partially supported by NSF, SGF, ONR, the Simons Foundation, the ZCash Foundation, and Visa Research.

### 8. References

[1] “Top 6 vendors in the wearable payment market from 2016 to 2020: Technavio — business wire,” https://www.businesswire.com/news/home/20161118005252/en/Top-6-Vendors-Wearable-Payment-Market-2016, 2018, (Accessed on 11/27/2018).

[2] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008, available at https://bitcoin.org/bitcoin.pdf.

[3] V. Buterin, “Ethereum’s white paper,” https://github.com/ethereum/wiki/wiki/White-Paper, 2014.

[4] C. Dwork and M. Naor, “Pricing via processing or combatting junk mail,” in Advances in Cryptology — CRYPTO’ 92: 12th Annual International Cryptology Conference Santa Barbara, California, USA August 16–20, 1992 Proceedings. Springer Berlin Heidelberg, 1993, pp. 139–147. [Online]. Available: http://dx.doi.org/10.1007/3-540-48071-4

[5] J. A. Garay, A. Kiayias, and N. Leonardos, “The Bitcoin backbone protocol: Analysis and applications,” in Advances in Cryptology - EUROCRYPT 2015, 2015, pp. 281–310.

[6] R. Pass, L. Seeman, and A. Shelat, “Analysis of the blockchain protocol in asynchronous networks,” in Advances in Cryptology – EUROCRYPT 2017, J.-S. Coron and J. B. Nielsen, Eds. Springer International Publishing, 2017, pp. 643–673.

[7] L. Kiffer, R. Rajaraman, and A. Shelat, “A better method to analyze blockchain consistency,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 729–744.

[8] “Blockchain takes way too long to sync · issue #2394 · ethereum/mist,” on https://github.com/ethereum/mist/issues/2394, 2017, (Accessed on 11/29/2018).

[9] A. Kiayias, N. Lamprou, and A.-P. Stouka, Proofs of Proofs of Work with Sublinear Complexity. Springer Berlin Heidelberg, 2016, pp. 61–78.

[10] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol with chains of variable difficulty,” in Annual International Cryptology Conference. Springer, 2017, pp. 291–323.

[11] M. Herlihy, “Atomic cross-chain swaps,” arXiv preprint arXiv:1801.09515, 2018.

[12] “ethereum/btcrelay: Ethereum contract for bitcoin spv,” https://github.com/ethereum/btcrelay, 2018, (Accessed on 12/14/2018).

[13] A. Back and G. Maxwell, “Transferring ledger assets between blockchains via pegged sidechains,” Nov 2016, uS Patent App. 15/150,032.

[14] A. Kiayias, A. Miller, and D. Zindros, “Non-interactive proofs of proof-of-work,” 2017.

[15] A. Kiayias and D. Zindros, “Proof-of-work sidechains,” Cryptology ePrint Archive, Report 2018/1048, 2018, https://eprint.iacr.org/2018/1048.

[16] M. Zamani, M. Movahedi, and M. Raykova, “RapidChain: Scaling blockchain via full sharding,” in 2018 ACM Conference on Computer and Communications Security (CCS), 2018.

[17] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and B. Ford, “OmniLedger: A secure, scale-out, decentralized ledger via sharding,” in 2018 IEEE Symposium on Security and Privacy (S&P), 2018, pp. 19–34. [Online]. Available: doi.ieeecomputersociety.org/10.1109/SP.2018.000-5

[18] “Open timestamps,” https://opentimestamps.org/, 2018.

[19] “Stampery,” https://stampery.com/, 2018.

[20] “Ethereum blocks,” https://etherscan.io/blocks, July 2019, (Accessed on 07/30/2019).

[21] A. Back, M. Corallo, L. Dashjr, M. Friedenbach, G. Maxwell, A. Miller, A. Poelstra, J. Timón, and P. Wuille, “Enabling blockchain innovations with pegged sidechains.”

[22] “Getting deep into geth: Why syncing Ethereum node is slow,” https://blog.ethereum.org/2018/06/27/getting-deep-geth-why-syncing-ethereum-node-slow/

[27] J. Bonneau, “Why buy when you can rent? bribery attacks on bitcoin-style consensus,” in Proceedings of Financial Cryptography, 2016.

[28] I. Eyal and E. G. Sirer, “Majority is not enough: Bitcoin mining is vulnerable,” in Financial Cryptography and Data Security: 18th International Conference, FC 2014, Christ Church, Barbados, March