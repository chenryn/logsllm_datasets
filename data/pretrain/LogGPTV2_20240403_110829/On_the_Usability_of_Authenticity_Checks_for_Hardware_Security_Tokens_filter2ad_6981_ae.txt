### Introduction
This document discusses the importance of secure and user-friendly design for Hardware Security Tokens (HSTs) and provides actionable recommendations based on a market review and a large-scale survey. The key focus is on enhancing the transparency and effectiveness of authenticity checks, which are crucial for ensuring the security and trustworthiness of HSTs.

### Key Concepts and Terminology
- **Exploit**: A method or technique used to take advantage of a vulnerability in a system.
- **Malware**: Malicious software designed to harm or exploit any programmable device or network.
- **Token**: A physical or digital device that provides an additional layer of security, often used for authentication.
- **USB**: Universal Serial Bus, a standard interface for connecting peripherals to a computer.
- **Firmware**: Software that is embedded in hardware and controls its operation.
- **Pre-initialization**: The process of setting up a device before it is fully initialized.
- **Side-channels**: Information leakage through unintended channels, such as power consumption or electromagnetic emissions.
- **Microprobing**: A technique used to physically probe and extract data from a chip.
- **Injection**: Inserting malicious code or data into a system.
- **Snooping**: Eavesdropping on data transmission.
- **Timing**: Analyzing the time taken by a system to perform operations.
- **Fault**: An error or defect in a system.
- **Bus**: A communication pathway in a computer.
- **IC**: Integrated Circuit, a set of electronic circuits on a small flat piece of semiconductor material.
- **Over-estimated/Under-estimated**: Incorrectly evaluating the benefits or risks of a security measure.
- **Hardware/Software**: Physical and logical components of a system.
- **Secret Extraction**: The process of extracting sensitive information from a system.
- **Tamper-evident**: Features that show evidence of tampering.
- **Single-piece cast**: A device made in one piece, making it difficult to open without visible damage.
- **Openable device**: A device that can be opened for inspection.
- **Holographic sticker**: A security feature that uses holograms to indicate tampering.
- **Secure element (co-processor)**: A dedicated security component in a device.
- **Remote firmware attestation**: Verifying the integrity of firmware remotely.
- **Manual firmware load**: Manually loading firmware onto a device.
- **Key attestation**: Verifying the authenticity of cryptographic keys.
- **Secure CPU**: A processor with built-in security features.
- **Local firmware attestation**: Verifying the integrity of firmware locally.

### Survey and Market Review Findings
- **User Perceptions**: Users often overestimate or underestimate the effectiveness of certain security measures due to a lack of information and transparency.
- **Security Labels**: Introducing clear and self-explanatory security labels can help users make informed decisions.
- **Secure Elements/CPU**: Only six out of nine tested devices use secure elements or CPUs, which are essential for protecting key material.
- **Remote Attestation**: Remote firmware attestation is more effective than local methods but is not widely implemented.
- **Collaborative Protocols**: These protocols can prevent in-protocol secret leakage but are not yet widely adopted.
- **Manual vs. Automated Checks**: Many users are unaware of automatic checks and find manual checks too complicated.
- **Openable Devices vs. Single-Piece Casts**: Both approaches have their pros and cons, and users' perceptions of their security benefits vary.
- **Security Theater**: Ineffective security measures, such as holographic stickers, can give users a false sense of security.

### Recommendations
1. **Transparent Authenticity Checks**: Visualize the availability and results of authenticity checks and provide standardized labels.
2. **Security Labels**: Place self-explanatory security labels on HSTs to facilitate purchase decisions.
3. **Secure CPU or Secure Elements**: Deploy a secure element or secure CPU that contains critical operations and data.
4. **Remote Firmware Attestation**: Implement methods for remote firmware attestation and make them visible to users.
5. **Collaborative Protocols**: Implement collaborative protocols for key and signature generation, especially for U2F tokens.
6. **Automated and Transparent Checks**: Implement automated but transparent authenticity checks. If manual methods are used, they should be a mandatory part of the initialization process.
7. **Device Inspection**: If manual inspection is required, integrate it tightly into the initialization process. Clearly communicate the security properties of single-piece cast devices.
8. **Disestablish Security Theater**: Discontinue authenticity checks that give users a false sense of security while being marginally or not effective.

### Conclusion
The current state of authenticity checks in HSTs is insufficient to defeat distribution attacks, and users often base their trust decisions on visual but ineffective features. To address these issues, a multi-faceted approach is recommended, focusing on transparency, usability, and the implementation of effective security measures.