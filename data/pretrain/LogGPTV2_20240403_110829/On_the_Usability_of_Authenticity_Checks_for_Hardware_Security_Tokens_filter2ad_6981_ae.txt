exploit
ware
Token
USB
Firm
pre-initialization
side-channels
microprobing
injection
snooping
Timing
Fault
Bus
IC
IC
over-estimated
under-estimated1
Hardware
Software
Secret Extraction
e
r
u
s
a
e
m
r
e
t
n
u
o
C
/
n
o
i
t
a
t
s
e
t
t
A
t
f
o
S
. Tamper-evident
k
c
a
P
e Single-piece cast
r
a
w
d
r
a
H
Openable device
Holographic sticker
(cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35)
(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:32) (cid:71)(cid:35) (cid:71)(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:35)
(cid:71)(cid:35) (cid:71)(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
Secure element (co-processor) (cid:35) (cid:32) (cid:32) (cid:35) (cid:35) (cid:35) (cid:32) (cid:71)(cid:35) (cid:32) (cid:32)
(cid:71)(cid:35) (cid:32) (cid:32) (cid:35) (cid:35) (cid:35) (cid:32) (cid:32) (cid:32) (cid:32)
(cid:35) (cid:35) (cid:35) (cid:32) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:71)(cid:35) (cid:35) (cid:32) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:32) (cid:35) (cid:71)(cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35) (cid:35)
(cid:35) (cid:71)(cid:35) (cid:35) (cid:32) (cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35) (cid:71)(cid:35)
Remote ﬁrmware attestation
Manual ﬁrmware load
Key attestation
Secure CPU
e Local ﬁrmware attestation
r
a
w
1 Beneﬁts need to be better explained to customers.
hardware implants/modiﬁcation (see Table 1), a third reported
that they do not have any beneﬁt. Generally, Y rated the
beneﬁts higher than H with signiﬁcant differences for adding
hardware χ2(Y H ) : p  4.1,
σ = 1.1) than their sample. The SeBIS answers of Y and H
correlate strongly with each other (ρH Y > .97, p < .02) and
less with S (ρH S ≈ .91, ρY S ≈ .9, p < .04) as our S group is
slightly less security-savy.
We found no statistical signiﬁcance for a correlation be-
tween the participants’ SeBIS score and correct or incorrect
assessments of the authenticity checks. This might be due to
the fact that our participants’ SeBIS answers are very homo-
geneous, and most of them are in the upper third of the SeBIS.
6.8 Limitations
Our recruitment methods allowed us to collect a represen-
tative sample from the IT industry and Bitcoin community
(see Section 6.3), which is skewed towards male and tech-
savvy participants. Due to the lack of available data regarding
the overall population of hardware wallet and YubiKey users,
we cannot conclude whether our sample is representative of
these two groups with respect to demographics. Moreover, no
expressive evaluation of cultural differences can be made as
our sample is biased towards residents of industrial countries.
As the survey was conducted either in English (87%) or Ger-
man (13%), people speaking other native languages and/or
having no or weak English or German skills were potentially
excluded. Furthermore, if longer periods of time have passed
between HST purchase and taking part in the study, this may
have inﬂuenced how accurately the participants recalled the
authenticity checks.
7 Discussion
In this section, we connect the results from the survey and
the market review and provide seven actionable recommen-
dations for a secure and user-friendly design of HST au-
thenticity checks (answering RQ3). Table 5 compares the
effectiveness of attestation methods as assessed in the mar-
ket review with user perceptions. Darker shades of red indi-
cate methods that users perceive as effective, while lighter
shades indicate perceived ineffectiveness. These colors visu-
alize trends based on the HST users’ responses to whether the
described method prevents certain attacks (Q4a, Q6, Q7, Q9,
Q11–Q13). The effectiveness of some methods is correctly
perceived, while that of others is severely over-estimated ,
severely under-estimated , or slightly over-estimated (see
the following subsections). Our survey showed that these gaps
between perceived and actual security of HST authenticity
checks are caused by a lack of information and transparency.
Our market review also revealed that many manufacturers
do not implement sufﬁcient and/or transparent authenticity
checks. We found that no single check and no currently imple-
mented combination of checks can adequately protect against
the multitude of attack vectors described in this paper. In order
to maximize the security and usability of HST attestation, we
suggest (i) a user-centered transparent design combined
with (ii) secure CPUs or elements, (iii) remote ﬁrmware
attestation, and (iv) collaborative protocols [19].
7.1 User-centered Design
To close the gap between the perceived and actual security of
authenticity checks, we propose to visualize the availability
and results of authenticity checks (incl. information material)
and provide standardized labels.
7.1.1 Transparent authenticity checks
In line with Distler et al. [22], Fahl et al. [29], Mathiasen
et al. [69], and Mai et al. [67], we argue that security mech-
anisms should not be completely hidden from users since
transparency of these mechanisms is crucial for perceived and
actual security. In order to understand security characteristics
USENIX Association
30th USENIX Security Symposium    47
and build up trust, authenticity checks should be visible to
users by adapting the UI of HSTs. Rode et al. [90] showed that
visualizations of system aspects can help people understand a
system’s security and incorporate it into their actions. They
suggest not to overwhelm users with complexity but dynami-
cally visualize system aspects as a GUI’s temporal response.
For HSTs, this could be achieved by spinners, check-marks,
or warnings that explain the process and results of authenticity
checks. The effectiveness of security warnings was demon-
strated by Akhawe et al. [4] who also recommended that
security information should be communicated to users.
Our market review found a lack of accessible information
on implemented authenticity checks, which was conﬁrmed
by our survey. Our survey also indicates that users can be
effectively reached via online or ofﬂine information.
Recommendation 1: The existence and results of authentic-
ity checks should be visualized to users (e.g., through spinners,
check-marks, or warnings) following the respective design
literature [100, 102, 112]. Easily accessible descriptions of
authenticity checks should be provided online and ofﬂine.
7.1.2 Security Labels
To avoid overwhelming users with complex information, se-
curity labels similar to the European Union energy label [15],
with equivalent grades from A (most secure) to G (least se-
cure), should be introduced. Clear guidelines for manufactur-
ers on how to achieve a speciﬁc grade should be provided.
Such labels could encourage manufacturers to implement
high-quality and secure authenticity checks by giving them
a competitive advantage. Our evaluation framework (attack
vectors) and recommendations provide a basis for construct-
ing such labels and to certify the implementation of secure
HST design rules.
Available independent certiﬁcations, such as NIST FIPS
140-2 [77], were explicitly designed for cryptographic mod-
ules in governmental use. They are not easily understandable
for end users and do not cover attestation mechanisms. To ob-
tain such a certiﬁcate, third-party laboratories have to conduct
costly tests. Such certiﬁcates should be taken into account
when creating user-friendly HST security labels.
Recommendation 2: Self-explanatory security labels
should be placed on the HSTs to facilitate purchase decisions.
7.2 Secure CPU or Secure Elements
Protecting the key material in trustworthy hardware is
paramount for HSTs. The effectiveness of many software
methods (including local/remote software attestation and key
attestation) is dramatically increased when implemented on a
side-channel-hardened circuitry (see Section 5.2.3). Neverthe-
less, only six out of the nine tested devices use secure CPUs or
secure elements. We think this is due to additional costs and
effort during design and production. In general, secure CPUs
and secure elements do not require user interaction. However,
in our survey, we found that their effectiveness is incorrectly
assessed by the majority of the users as their existence and
beneﬁts are not transparent. Hence, secure elements/CPUs
cannot affect users’ trust.
Recommendation 3: HSTs should deploy a secure element
or secure CPU that contains critical operations and data
and checks the ﬁrmware in a secure boot setup. Authenticity
checks should be visible, and security labels should verify
their existence (see Section 7.1).
7.3 Remote Firmware Attestation
Remote attestation (currently only implemented in two of the
tested devices) is more effective than local methods. Our sur-
vey showed that the effectiveness of local and remote ﬁrmware
attestation is assessed correctly (see Table 5). However, we
also found that many users are not aware of these methods.
Hence, they do not increase the users’ trust in their devices.
Recommendation 4: Methods for remote ﬁrmware attesta-
tion should be implemented. These methods should be made
visible to users (see Section 7.1).
7.4 Collaborative Protocols
In-protocol secret leakage and weak or pre-loaded keys on
HSTs can be prevented with collaborative protocols. To date,
no off-the-shelf HST implements this approach. Thereby,
the single point of computation at the HST is removed and
distributed equally between the HST and the browser. The key
and signatures are generated during their interaction; thereby,
the browser can enforce the HST’s correct behavior without
learning the secret. If one of the parties produces attacker-
impacted results, the other one will detect that.
Dauterman et al. [19] recently showed that collaborative
key and signature generation is feasible for U2F tokens. It
is not straightforward to apply such protocols to hardware
wallets, as conﬁrmed by one manufacturer. Hardware wallets
commonly use BIP32 (a standard for hierarchical determin-
istic wallets) [58, 111] which does not support collaborative
and veriﬁable key generation building on veriﬁable identity
families (VIFs). Upgrading hardware wallets to use such pro-
tocols would force users to distinguish between BIP32 and
upgraded wallets, given that the key schemes are different.
Collaborative protocols have no immediate usability issues
since the execution is hidden from the users. However, secrets
can still be leaked out-of-band or via the USB interface, and
ransom attacks are still feasible.
Recommendation 5: U2F tokens should implement collab-
orative protocols for key and signature generation. Other
token families should consider a long-term switch. Self-
explanatory labels and sufﬁcient information material (see
Section 7.1) should be used to inform users about implemented
methods and achieved security beneﬁts.
7.5 Manual vs. Automated Checks
Our survey shows that many HST users are not aware of
the performed automatic checks or underestimate their ef-
fectiveness (key attestation) due to a lack of visibility and
48    30th USENIX Security Symposium
USENIX Association
information. Our market review and survey revealed that man-
ual authenticity checks are often too complicated or time-
consuming for users and, moreover, are not sufﬁciently adver-
tised by manufacturers (e.g., command-line checks). Hence,
they are only performed by half of H and less than half of Y .
We found that many users are eager to compare the packaging
or the product with reference pictures, but felt let down by
manufacturers who only provided insufﬁcient material.
Recommendation 6: HSTs should implement automated
but transparent authenticity checks (see Section 7.1). If man-
ual methods are used, they should be a mandatory part of the
initialization process. Moreover, all methods should be easily
visible and explained on the manufacturers’ websites.
7.6 Openable Devices vs. Single-Piece Casts
Token manufacturers use two mutually exclusive approaches:
(i) easily openable HSTs for visual inspection of the interior,
or (ii) unopenable HSTs with integrated electronics or a single-
piece cast. Both approaches are double-edged swords:
Our market review shows that easily openable devices pro-
vide quick access to users and attackers alike. However, our
survey also revealed that users rarely open and visually in-
spect their HST. A possible remedy would be an application
that automatically compares pictures of the devices’ inside to
reference pictures. Still, verifying the genuineness of such an
application would pose a new and complex challenge.
On the other hand, users can easily inspect the state of
single-piece cast devices, which provides some level of se-
curity assertion. The inside cannot be seen; therefore, an
attacker needs to create a similar-looking outer appearance
of the product (see Section 5.2.2). Our survey showed that
users incorrectly rate the security beneﬁts of single-piece cast
devices rather low. Manufacturers could experiment with see-
through molded devices; the Ledger Nano S series already
offers transparent cases. However, it is also openable, thus
diminishing the security intent of the transparent case.
Recommendation 7: If manual inspection of the hard-
ware is required, it should be tightly integrated into the
initialization process. If single-piece casts are used, their
security properties should be clearly communicated to the
user (Section 7.1).
7.7 Security Theater
Security theater [96] describes actions aiming at creating a
sense of security although they are not (or only marginally)
effective. In our market review, we could verify that although
holographic stickers are frequently used, they are ineffective
against all attack vectors presented in this work. Our sur-
vey conﬁrms that, depending on the target audience, many
customers understood the insigniﬁcance of holographic stick-
ers, while others assumed that they offer a level of protec-
tion. Along these lines, e.g., Ledger claims not to use anti-
tampering seals (or holographic seals) since they give users a
false sense of security [57].
We also found that it is common practice to utilize tamper-
evident packaging, although this is less effective than other
approaches. Our survey suggests that packaging profoundly
inﬂuences the users’ trust. We recognize that this method
might be useful to increase people’s trust in their HST. How-
ever, we argue that such an approach on its own is unreward-
ing in the long-term.
Recommendation 8: Authenticity checks that give users a
false feeling of security while only being marginally (or not)
effective should be disestablished.
8 Conclusion
Our ﬁndings show that technical and usability issues of au-
thenticity checks in widely used HSTs undermine the security
beneﬁts these tokens are supposed to provide. We performed
a market review of state-of-the-art HSTs and a large-scale
survey to assess users’ perceptions and usage of authenticity
checks. Our results suggest that commonly used authenticity
checks—even the best-case implementations—are not sufﬁ-
cient to defeat distribution attacks. Moreover, users cannot
make informed trust decisions based on the deployed methods
as their existence and beneﬁts are often hidden. Thus, users
currently base their trust decisions to a large extent on visual
but ineffective features such as packaging.
Based on our ﬁndings, we suggest a multi-faceted approach