ﬂags. In virtual-8086 mode, the IOPL must equal 3 to
use the POPF instructions. The IOPL allows an OS to
set the privilege level needed to perform I/O. In virtual-
8086 mode, the VM, RF, IOPL, VIP, and VIF ﬂags are
unaffected by the POPF instruction. In protected mode,
there are several conditions based on privilege levels.
First, if the CPL is greater than 0 and less than or equal
to the IOPL, all ﬂags can be modiﬁed except IOPL,
VIP, VIF, and VM. The interrupt ﬂag is altered when
the CPL is at least as privileged as the IOPL. Finally, if
a POPF/POPFD instruction is executed without enough
privilege, an exception is not generated. However, the
bits of the EFLAGS register are not changed.
The POPF/POPFD instructions also prevent processor
virtualization because they allow modiﬁcation of certain
bits in the EFLAGS register that control the operating
mode and state of the processor.
3.2 Protection System References
Many Intel instructions violate Requirement 3C: In-
structions are sensitive if they reference the storage pro-
tection system, memory or address relocation system.
3.2.1 LAR, LSL, VERR, VERW
Four instructions violate the rule in a similar man-
ner: LAR, LSL, VERR, and VERW. The LAR instruc-
tion loads access rights from a segment descriptor into
a general purpose register. The LSL instruction loads
the unscrambled segment limit from the segment de-
scriptor into a general-purpose register. The VERR and
VERW instructions verify whether a code or data seg-
ment is readable or writable from the current privilege
level. The problem with all four of these instructions
is that they all perform the following check during their
execution: (CPL ! DPL) OR (RPL ! DPL). This con-
ditional checks to ensure that the current privilege level
(located in bits 0 and 1 of the CS register and the SS reg-
ister) and the requested privilege level (bits 0 and 1 of
any segment selector) are both greater than the descrip-
tor privilege level (the privilege level of a segment). This
is a problem because a VM normally does not execute at
the highest privilege (i.e., CPL = 0). It is normally exe-
cuted at the user or application level (CPL = 3) so that
all privileged instructions will cause traps that can be
handled by the VMM. However, most operating systems
assume that they are operating at the highest privilege
level and that they can access any segment descriptor.
Therefore, if a VMOS running at CPL = 3 uses any of
the four instructions listed above to examine a segment
descriptor with a DPL < 3, it is likely that the instruction
will not execute properly.
3.2.2 POP Instruction
The reason that the POP instruction prevents virtual-
ization is very similar to that mentioned in the previous
paragraph. The POP instruction loads a value from the
top of the stack to a general-purpose register, memory
location, or segment register. However, the POP instruc-
tion cannot be used to load the CS register since it con-
tains the CPL. A value that is loaded into a segment reg-
ister must be a valid segment selector. The reason that
POP prevents virtualization is because it depends on the
value of the CPL. If the SS register is being loaded and
the segment selector’s RPL and the segment descriptor’s
DPL are not equal to the CPL, a general protection ex-
ception is raised. Additionally, if the DS, ES, FS, or GS
register is being loaded, the segment being pointed to is
a nonconforming code segment or data, and the RPL and
CPL are greater than the DPL, a general protection ex-
ception is raised. As in the previous case, if a VM’s CPL
is 3, these privilege level checks could cause unexpected
results for a VMOS that assumes it is in CPL 0.
3.2.3 PUSH Instruction
The PUSH instruction also prevents virtualization be-
cause it references the protection system. The PUSH in-
struction allows a general-purpose register, memory lo-
cation, an immediate value, or a segment register to be
pushed onto the stack. This cannot be allowed because
bits 0 and 1 of the CS and SS register contain the CPL
of the current executing task. The following scenario
demonstrates why these instructions could cause prob-
lems for virtualization. A process that thinks it is run-
ning in CPL 0 pushes the CS register to the stack. It then
examines the contents of the CS register on the stack to
check its CPL. Upon ﬁnding that its CPL is not 0, the
process may halt.
3.2.4 CALL, JMP, INT n, and RET
The CALL instruction saves procedure linking infor-
mation to the stack and branches to the procedure given
in its destination operand. There are four types of proce-
dure calls: near calls, far calls to the same privilege level,
far calls to a different privilege level, and task switches.
Near calls and far calls to the same privilege level are not
a problem for virtualization. Task switches and far calls
to different privilege levels are problems because they
involve the CPL, DPL, and RPL. If a far call is executed
to a different privilege level, the code segment for the
procedure being accessed has to be accessed through a
call gate. A task uses a different stack for every privilege
level. Therefore, when a far call is made to another priv-
ilege level, the processor switches to a stack correspond-
ing to the new privilege level of the called procedure. A
task switch operates in a manner similar to a call gate.
The main difference is that the target operand of the call
instruction speciﬁes the segment selector of a task gate
instead of a call gate. Both call gates and task gates have
many privilege level checks that compare the CPL and
RPL to DPLs. Since the VM normally operates at user
level (CPL 3), these checks will not work correctly when
a VMOS tries to access call gates or task gates at CPL 0.
The discussion above on LAR, LSL, VERR, and
VERW provides a speciﬁc example of how running a
CPL 0 operating system as a CPL 3 task could cause a
problem. The JMP instruction is similar to the CALL in-
struction in both the way that it executes and the reasons
it prevents virtualization. The main difference between
the CALL and the JMP instruction is that the JMP in-
struction transfers program control to another location
in the instruction stream and does not record return in-
formation.
The INT instruction is also similar to the CALL in-
struction. The INT n instruction performs a call to the
interrupt or exception handler speciﬁed by n. INT n does
the same thing as a far call made using the CALL in-
struction except that it pushes the EFLAGS register onto
the stack before pushing the return address. The INT
instruction references the protection system many times
during its execution.
The RET instruction has the opposite effect of the
CALL instruction. It transfers program control to a re-
turn address that is placed on the stack (normally by a
CALL instruction). The RET instruction can be used
for three different types of returns: near, far, and inter-
privilege-level returns. Much like the CALL instruction,
the inter-privilege-level far return examines the privilege
levels and access rights of the code and stack segments
that are being returned to determine if the operation
should be allowed. The DS, ES, FS, and GS segment
registers are cleared by the RET instruction if they refer
to segments that cannot be accessed by the new privilege
level. Therefore, RET prevents virtualization because
having a CPL of 3 (the VM’s privilege level) could cause
the DS, ES, FS, and GS registers to not be cleared when
they should be. The IRET/IRETD instruction is similar
to the RET instruction. The main difference is it returns
control from an exception, interrupt handler, or nested
task. It prevents virtualization in the same way that the
RET instruction does.
3.2.5 STR Instruction
Another instruction that references the protection sys-
tem is the STR instruction. The STR instruction stores
the segment selector from the task register into a general-
purpose register or memory location. The segment se-
lector that is stored with this instruction points to the
task state segment of the currently executing task. This
instruction prevents virtualization because it allows a
task to examine its requested privilege level (RPL). Ev-
ery segment selector contains an index into the GDT or
LDT, a table indicator, and an RPL. The RPL is rep-
resented by bits 0 and 1 of the segment selector. The
RPL is an override privilege level that is checked (along
with the CPL) to determine if a task can access a seg-
ment. The RPL is used to ensure that privileged code
cannot access a segment on behalf of an application un-
less the application also has the privilege to access the
segment. This is a problem because a VM does not ex-
ecute at the highest CPL or RPL (RPL = 0), but at RPL
= 3. However, most operating systems assume that they
are operating at the highest privilege level and that they
can access any segment descriptor. Therefore, if a VM
running at a CPL and RPL of 3 uses STR to store the
contents of the task register and then examines the infor-
mation, it will ﬁnd that it is not running at the privilege
level at which it expects to run.
3.2.6 MOVE Instruction
Two variants of the MOVE instruction prevent Intel
processor virtualization. These are the two MOV in-
structions that load and store control registers. The
MOV opcode that stores segment registers allows all six
of the segment registers to be stored to either a general-
purpose register or to a memory location. This is a prob-
lem because the CS and SS registers both contain the
CPL in bits 0 and 1. Thus, a task could store the CS or
SS in a general-purpose register and examine the con-
tents of that register to ﬁnd that it is not operating at the
expected privilege level. The MOV opcode that loads
segment registers does offer some protection because it
does not allow the CS register to be loaded at all. How-
ever, if the task tries to load the SS register, several priv-
ilege checks occur that become a problem when the VM
is not operating at the privilege level at which a VMOS
is expecting–typically 0.
The analysis of Section 3 shows that the Intel proces-
sor is not virtualizable according to Goldberg’s hardware
rules.
4 Pentium-Based “VMM” Security
This section will examine several security issues for a
VMM designed for the Intel Pentium architecture. We
begin with a brief review of previous secure VMMs.
Second, use of Intel processors for highly secure sys-
tems is discussed. Third, ways to provide virtual ma-
chine monitors on unmodiﬁed Intel platforms are exam-
ined to gain insight into the challenges faced in a virtual
machine monitor effort. Next we discuss the security im-
pact of using unmodiﬁed Intel platforms for VMMs. Fi-
nally, a better approach to creating a highly secure VMM
on the Intel architecture is covered.
4.1 Are Secure VMMs Possible?
An early discussion of VMMs and security argued that
the isolation provided by a combined VMM/OS pro-
vided better software security than a conventional multi-
programming operating system. It was also suggested
that the redundant security mechanisms found in the
VMM and the OS executing in one of its virtual ma-
chines enhanced security [21]. Penetration experiments
indicated that redundant weak implementations are in-
sufﬁcient to secure a system [5, 11].
KVM/370 was an early secure Type I VMM [11, 33, 9].
Called a “security retroﬁt,” two approaches to the work
were examined: (1) “hardening” of the existing VM/370
control program (CP) to repair identiﬁed penetration
vulnerabilities and (2) a redesign of the VM/370 CP
to place all security-relevant functionality within a for-
mally veriﬁed security kernel based upon the reference
monitor concept [4]. (Note that the ﬁrst approach was
abandoned because ﬂaw remediation did not provide a
guarantee of the absence of yet undetected, exploitable
security ﬂaws.) The redesigned system consisted of four
domains:
1. A minimized security kernel and veriﬁed trusted
processes executing in supervisor state.
2. Semi-trusted processes executing in real problem
state. These processes managed some global data,
were audited, had access only to virtual addresses.
3. Non-kernel control programs (NKCPs) that exe-
cuted the non-security relevant bulk of the VM/370
control program in real problem state. Each NKCP
executed at a single security level and had access
only to virtual addresses.
4. User VMs executing in real problem state under the
control of a NKCP, with the same security level as
the NKCP.
A security kernel is deﬁned as hardware and software
that implements the reference monitor concept [4]. A
reference monitor enforces authorized access relation-
ships between the subjects and objects within a system.
It imposes three design requirements on its implementa-
tions:
1. The mechanism must be tamperproof.
2. The mechanism must always be invoked.
3. The mechanism must be small enough to be to sub-
ject to analysis and tests to ensure completeness.
The VAX Security Kernel[17] was a highly secure
Type I VMM. The system’s hardware, microcode, and
software were designed to meet TCSEC Class A1 assur-
ance and security requirements [22]. The project also
maintained standard VMS and Ultrix-32 interfaces to
run COTS operating systems and applications in virtual
machines.
The VAX VMM security kernel allowed multiple vir-
tual machines to run concurrently on a single VAX sys-
tem. It could support a large number of simultaneous
users and provided isolation and controlled sharing of
sensitive data.
The VAX processor, much like the Intel Pentium pro-
cessor, contained several sensitive, unprivileged instruc-
tions. It also had four rings. The security kernel design-
ers modiﬁed the VAX processor microcode to make it
virtualizable. The four instructions that prevented vir-
tualization on the VAX processor were: CHM, REI,
MOVPSL, and PROBE [13]. The CHM instruction
switches to a mode of equal or increased privilege. The
REI instruction switches to a mode of equal or decreased
privilege. The MOVPSL instruction is used to read the
Processor Status Longword (similar to the machine sta-
tus word in the Intel architecture). The PROBE instruc-
tion is used to determine the accessibility of a page of
memory. These four instructions read or write one of
the following pieces of sensitive data: the current exe-
cution mode, the previous execution mode, the modify
bit of a page table entry, and the protection bit of a page
table entry.
To support compatibility with existing operating sys-
tems and applications, some of the microcode changes
included: deﬁning a new VM mode bit, deﬁning a new
register called VMPSL, deﬁning a VM-emulation ex-
ception, as well as the four instructions described above.
Ring compression, implemented entirely in software,
was used to avoid certain processor modiﬁcations. The
protection between compressed layers is weakened;
however, this choice had little security impact since, al-
though the VMS operating system for the VAX used all
four rings, all three inner rings were in fact used for fully
trusted operating system software.
The VAX I/O hardware was difﬁcult to virtualize be-
cause its I/O mechanisms read and write various control
and status registers in the I/O space of physical memory.
To overcome this difﬁculty, the VAX security kernel I/O
interface used a special, performance-optimized kernel
call mechanism. To use this mechanism, a virtual ma-
chine executed a Move To Privileged Register (MTPR)
instruction to a special kernel call register. The MTPR
instruction trapped the security kernel software that per-
formed the I/O. Untrusted device drivers were written
for each guest OS in order to run on the VMM.
The VAX security kernel applied mandatory and dis-
cretionary access controls to virtual machines. The ker-
nel assigned every virtual machine an access class con-
sisting of a secrecy class (based on the Bell and La-
Padula model [6]) and an integrity class (based on the
Biba model [7]). The kernel supported access control
lists on all objects including real devices, disk and tape
volumes, and security kernel volumes. The VMM se-
curity kernel differed from a typical secure operating
system because the subjects and objects are virtual ma-
chines and virtual disks, not ﬁles and processes, which
are implemented by each guest OS.
It is worth noting that timing channels in VMMs [33]
were addressed in the context of the VAX VMM work
[14]. Despite the challenge of timing channel mitiga-
tion, VMMs provide a solution to the problem of shar-
ing while running legacy or commercial code securely
with ﬁrewalling between the VMs managed by a highly
secure VMM kernel.