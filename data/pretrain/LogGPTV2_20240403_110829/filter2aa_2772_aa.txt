# Application Report: SPRAAO8 â€“ April 2009
## Common Object File Format (COFF)

### Abstract
The assembler and linker generate object files in the Common Object File Format (COFF). COFF is a standardized object file format, originally developed by AT&T for use in UNIX-based systems. This format supports modular programming and provides robust and flexible methods for managing code segments and memory allocation on the target system.

This document serves as a supplementary guide to the internal structure of COFF object files, with a focus on the symbolic debugging information produced by the C compiler. The following sections detail the technical aspects of the Texas Instruments (TI) COFF object file structure.

### Table of Contents
- **1. COFF File Structure** - Page 2
- **2. File Header Structure** - Page 4
- **3. Optional File Header Format** - Page 5
- **4. Section Header Structure** - Page 5
- **5. Relocation Information** - Page 7
- **6. Symbol Table Structure and Content** - Page 11

---

## 1. COFF File Structure

A COFF object file consists of several key components that describe the file's sections and symbolic debugging information. These elements include:

- **File Header**: Contains general information about the file.
- **Optional Header**: Provides additional details used during the linking process.
- **Section Headers Table**: Describes each section within the file.
- **Raw Data**: Executable code and initialized data for each section.
- **Relocation Information**: Used to adjust addresses during the linking process.
- **Symbol Table**: Contains symbols and their associated information.
- **String Table**: Stores names of symbols and sections.

The assembler and linker produce object files with this structure. However, a fully linked program typically does not include relocation entries. Figure 1 illustrates the overall structure of a COFF object file.

**Figure 1. COFF File Structure**

```
File Header
Optional Header
Section 1 Header
...
Section n Header
Section 1 Raw Data
...
Section n Raw Data
Section 1 Relocation Information
...
Section n Relocation Information
Symbol Table
String Table
```

**Figure 2. Sample COFF Object File**

```
File Header
.text Section Header
.data Section Header
.bss Section Header
Other Section Header
.text Raw Data
.data Raw Data
Other Section Raw Data
.text Relocation Information
.data Relocation Information
Other Section Relocation Information
Symbol Table
String Table
```

By default, the tools place sections in the following order: `.text`, `.data`, initialized named sections, `.bss`, and uninitialized named sections. Uninitialized sections (e.g., `.bss`) have section headers but no raw data or relocation information because they only reserve space for uninitialized data.

---

## 2. File Header Structure

The file header contains 22 bytes of information that describe the general format of an object file. Table 1 outlines the structure of the COFF file header.

**Table 1. File Header Contents**

| Byte Number | Type         | Description                                                      |
|-------------|--------------|------------------------------------------------------------------|
| 0-1         | Unsigned short | Version ID; indicates the version of the COFF file structure.     |
| 2-3         | Unsigned short | Number of section headers.                                        |
| 4-7         | Integer      | Time and date stamp; indicates when the file was created.         |
| 8-11        | Integer      | File pointer; contains the starting address of the symbol table.  |
| 12-15       | Integer      | Number of entries in the symbol table.                            |
| 16-17       | Unsigned short | Number of bytes in the optional header. If 0, there is no optional header. |
| 18-19       | Unsigned short | Flags (see Table 2).                                             |
| 20-21       | Unsigned short | Target ID; magic number (see Table 3) indicating the specific TI system. |

**Table 2. File Header Flags (Bytes 18 and 19)**

| Mnemonic    | Flag   | Description                                                     |
|-------------|--------|-----------------------------------------------------------------|
| F_RELFLG    | 0001h  | Relocation information was stripped from the file.               |
| F_EXEC      | 0002h  | The file is relocatable (contains no unresolved external references). |
| F_LNNO(1)   | 0004h  | For TMS430 and TMS470 only: Line numbers were stripped. For other targets: Reserved. |
| F_LSYMS     | 0008h  | Local symbols were stripped from the file.                       |
| F_LITTLE    | 0100h  | The target is a little-endian device.                            |
| F_BIG(1)    | 0200h  | For C6000, MSP430, and TMS470 only: The target is a big-endian device. For other targets: Reserved. |
| F_SYMMERGE(1)| 1000h  | For C2800, MSP430, and TMS470: Duplicate symbols were removed. For C6000: Reserved. |

(1) No mnemonic is defined when the flag value is reserved.

**Table 3. Magic Number**

| Magic Number | Device Family   |
|--------------|-----------------|
| 0097h        | TMS470          |
| 0098h        | TMS320C5400     |
| 0099h        | TMS320C6000     |
| 009Ch        | TMS320C5500     |
| 009Dh        | TMS320C2800     |
| 00A0h        | MSP430          |
| 00A1h        | TMS320C5500+    |

---

## 3. Optional File Header Format

The linker generates the optional file header, which is used for relocation at download time. Partially linked files do not contain this header. Table 4 shows the structure of the optional file header.

**Table 4. Optional File Header Contents**

| Byte Number | Type         | Description                                                   |
|-------------|--------------|---------------------------------------------------------------|
| 0-1         | Short        | Optional file header magic number (0108h).                    |
| 2-3         | Short        | Version stamp.                                                |
| 4-7         | Long(1)      | Size (in bytes) of executable code.                           |
| 8-11        | Long(1)      | Size (in bytes) of initialized data.                          |
| 12-15       | Long(1)      | Size (in bytes) of uninitialized data.                        |
| 16-19       | Long(1)      | Entry point.                                                  |
| 20-23       | Long(1)      | Beginning address of executable code.                         |
| 24-27       | Long(1)      | Beginning address of initialized data.                        |

(1) For C6000, the type is integer.

---

## 4. Section Header Structure

Each section in a COFF object file has its own section header, which defines where the section begins in the file. Table 5 shows the structure of each section header.

**Table 5. Section Header Contents**

| Byte Number | Type         | Description                                                                 |
|-------------|--------------|-----------------------------------------------------------------------------|
| 0-7         | Character    | An 8-character section name padded with nulls, or a pointer into the string table if the name is longer than eight characters. |
| 8-11        | Long(1)      | Section's physical address.                                                 |
| 12-15       | Long(1)      | Section's virtual address.                                                  |
| 16-19       | Long(1)      | Section size in bytes (C6000, C55x, TMS470, TMS430) or words (C2800, C5400). |
| 20-23       | Long(1)      | File pointer to raw data.                                                   |
| 24-27       | Long(1)      | File pointer to relocation entries.                                         |
| 28-31       | Long(1)      | Reserved.                                                                   |
| 32-35       | Unsigned long(2) | Number of relocation entries.                                              |
| 36-39       | Unsigned long(2) | For TMS470 and TMS430 only: Number of line number entries. For other devices: Reserved. |
| 40-43       | Unsigned long(2) | Flags (see Table 7).                                                       |
| 44-45       | Unsigned short | Reserved.                                                                   |
| 46-47       | Unsigned short | Memory page number.                                                         |

(1) For C6000, the type is integer.
(2) For C6000, the type is unsigned integer.

For C5400, object files can be in either COFF1 or COFF2 format. For all other device families, COFF object files are in the COFF2 format. Table 6 shows the section header contents for COFF1 files, while Table 5 shows the section header contents for COFF2 files.

**Table 6. Section Header Contents for COFF1**

| Byte Number | Type         | Description                                                                 |
|-------------|--------------|-----------------------------------------------------------------------------|
| 0-7         | Character    | An 8-character section name padded with nulls.                             |
| 8-11        | Long         | Section's physical address.                                                 |
| 12-15       | Long         | Section's virtual address.                                                  |
| 16-19       | Long         | Section size in words.                                                      |
| 20-23       | Long         | File pointer to raw data.                                                   |
| 24-27       | Long         | File pointer to relocation entries.                                         |
| 28-31       | Long         | Reserved.                                                                   |
| 32-33       | Unsigned short | Number of relocation entries.                                               |
| 34-35       | Unsigned short | Reserved.                                                                   |
| 36-37       | Unsigned short | Flags (see Table 7).                                                       |
| 38          | Char         | Reserved.                                                                   |
| 39          | Char         | Memory page number.                                                         |

**Table 7. Section Header Flags**

| Mnemonic    | Flag         | Description                                                                 |
|-------------|--------------|-----------------------------------------------------------------------------|
| STYP_REG    | 00000000h    | Regular section (allocated, relocated, loaded).                             |
| STYP_DSECT  | 00000001h    | Dummy section (relocated, not allocated, not loaded).                       |
| STYP_NOLOAD | 00000002h    | Noload section (allocated, relocated, not loaded).                          |
| STYP_GROUP  | 00000004h    | Grouped section (formed from several input sections). Other devices: Reserved. |
| STYP_PAD    | 00000008h    | Padding section (loaded, not allocated, not relocated). Other devices: Reserved. |
| STYP_COPY   | 00000010h    | Copy section (relocated, loaded, but not allocated; relocation entries are processed normally). |
| STYP_TEXT   | 00000020h    | Section contains executable code.                                           |
| STYP_DATA   | 00000040h    | Section contains initialized data.                                          |
| STYP_BSS    | 00000080h    | Section contains uninitialized data.                                        |
| STYP_BLOCK  | 00001000h    | Alignment used as a blocking factor.                                        |
| STYP_PASS   | 00002000h    | Section should pass through unchanged.                                      |
| STYP_CLINK  | 00004000h    | Section requires conditional linking.                                       |
| STYP_VECTOR | 00008000h    | Section contains vector table.                                              |
| STYP_PADDED | 00010000h    | Section has been padded.                                                    |

Bits 8-11 of the section header flags define the alignment, calculated as \(2^{(\text{value of bits 8-11})}\). For example, if bits 8-11 are 0101b (decimal 5), the alignment is 32 (2^5).

For MSP430 and TMS470, alignment is indicated by the bits masked by 0xF00. The alignment is \(2^{\text{(value in these 4 bits)}}\). For example, if the value in these 4 bits is 2, the alignment is 4 (2^2).

**Figure 3. Pointers in a Section Header**

```
Section Header
Pointer to .text Raw Data
Pointer to .text Relocation Information
```

This figure illustrates how the pointers in a section header point to the elements in an object file associated with the `.text` section.

---

For further details and feedback, please refer to the documentation provided by Texas Instruments.