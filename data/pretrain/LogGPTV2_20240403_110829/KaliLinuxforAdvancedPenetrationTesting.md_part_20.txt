hydra using a brute-force attack to determine access credentials on an HTTP page:
Injection attacks against databases
The most common and exploitable vulnerability in websites is the injection
vulnerability, which occurs when the victim site does not monitor the user input,
thereby allowing the attacker to interact with backend systems. An attacker can craft
the input data to modify or steal contents from a database, place an executable onto
the server, or issue commands to the operating system.
One of the most useful tools for assessing SQL injection vulnerabilities is sqlmap,
a Python tool that automates the reconnaissance and exploitation of Firebird,
Microsoft SQL, MySQL, Oracle, PostgreSQL, Sybase, and SAP MaxDB databases.
We'll demonstrate an SQL injection attack against the Mutillidae database. The first
step is to determine the web server, the backend database management system, and
the available databases.
Launch a Metasploitable virtual machine, and access the Mutillidae website. When
this is completed, review the web pages to identify one that accepts user input (for
example, the user login form that accepts username and password from a remote
user); these pages may be vulnerable to SQL injection. Then, open Kali, and from a
command prompt, enter the following (using the appropriate target IP address):
[ 252 ]
Chapter 9
root@kali:~# sqlmap -u
'http://192.168.75.129/mutillidae/index.php?page=user-
info.php&username=admin&password=&user-info-php-submit-
button=View+Account+Details' --dbs
Sqlmap will return data, as shown in the following screenshot:
The most likely database to store the application's data is the owasp10 database;
therefore, we will check for all tables of that database using the following command:
root@kali:~# sqlmap -u
'http://192.168.75.129/mutillidae/index.php?page=user-
info.php&username=admin&password=&user-info-php-submit-
button=View+Account+Details' –D owasp10 --tables
The returned data from executing that command is shown in the following screenshot:
[ 253 ]
Reconnaissance and Exploitation of Web-based Applications
Of the six tables that were enumerated, one was titled accounts. We will attempt to
dump the data from this part of the table. If successful, the account credentials will
allow us to return to the database if further SQL injection attacks fail. To dump the
credentials, use the following command:
root@kali:~# sqlmap -u
'http://192.168.75.129/mutillidae/index.php?page=user-
info.php&username=admin&password=&user-info-php-submit-
button=View+Account+Details' –D owasp10 – T accounts --dump
Similar attacks can be used against the database to extract credit card numbers.
Maintaining access with web backdoors
Once a web server and its services have been compromised, it is important to ensure
that secure access can be maintained. This is usually accomplished with the aid of a
web shell—a small program that provides stealth backdoor access and allows the use
of system commands to facilitate post-exploitation activities.
Kali comes with several web shells; here we will use a popular PHP web shell
called Weevely.
Weevely simulates a Telnet session and allows the tester or attacker to take advantage
of more than 30 modules for post-exploitation tasks, including the following:
• Browsing the target filesystem
• File transfer to and from the compromised system
• Performing audits for common server misconfigurations
[ 254 ]
Chapter 9
• Brute-forcing SQL accounts through the target system
• Spawning reverse TCP shells
• Executing commands on remote systems that have been compromised,
even if PHP security restrictions have been applied
Finally, Weevely endeavors to hide communications in HTTP cookies to
avoid detection. To create Weevely, issue the following command from the
command prompt:
root@kali:~# weevely generate  
This will create the file weevely.php in the root directory. Executing commands on
remote systems that have been compromised, even if PHP security restrictions have
been applied:
Using a file upload vulnerability or any other compromise, including ones that
give access to the meterpreter file upload functions, upload weevely.php onto the
compromised website.
To communicate with the web shell, issue the following command from the
command prompt, ensuring that the target IP address, directory, and password
variables are changed to reflect those of the compromised system:
root@kali:~# weevely http:// 
[ 255 ]
Reconnaissance and Exploitation of Web-based Applications
In the example shown in the following screenshot, we have verified that we are
connected to the web shell using the whoami command (which identifies the correct
directory) and the ls command in order to obtain a file list (which again confirms the
source of the connection as weevely.php). The cat /etc/password command was
used to view passwords.
The web shell can also be used to establish a reverse shell connection back to the
tester, using either Netcat or the Metasploit Framework as the local listener.
Summary
In this chapter, we examined websites and the services that they provide to
authorized users from the perspective of an attacker. We applied the kill chain
perspective to web services in order to understand the correct application of
reconnaissance and vulnerability scanning.
Several different vulnerability scanners were presented; we focused on making and
using modifications to existing scanners to support the assessment of websites and
web services, the use of browser-based vulnerability scanners, and vulnerability
scanners that are specifically designed to assess websites and their services.
Only a select few exploits were reviewed, and we completed the chapter with an
examination of a web shell that is specific for web services.
In the next chapter, we will learn how to identify and attack remote access
communications that connect users to the web services.
[ 256 ]
Exploiting Remote Access
Communications
In Chapter 9, Reconnaissance and Exploitation of Web-based Applications, we applied the
kill chain methodology against web-based applications. We reviewed reconnaissance,
vulnerability scanning, and exploitation methodologies that are particular to websites
and other applications. We also reviewed the unique tools that are required for
assessing web-based applications, especially client-side proxies and post-exploitation
tools such as web shells.
In this chapter, we'll focus on compromising the remote access communications to
the devices and applications that have proliferated over the Internet.
Attackers are taking advantage of the pervasiveness of these remote access
communications to achieve the following goals:
• Exploit pre-existing communication channels to gain direct remote access to
target systems
• Intercept communications
• Deny authenticated users access to regular communications and force them
to use insecure channels that might be vulnerable to other attacks
Since most users feel they are using communications tools that are "secure"
(even banks rely on SSL protocols to secure online banking), these attacks can
have a significant impact on both the communication that is compromised as
well as the victim's trust in other online communications.
This chapter will focus on the reconnaissance and exploit phases of the kill chain
as they pertain to remote access communications. It will not cover subjects such as
war dialing, voice over IP and related telephony issues, highly proprietary systems
such as specialized kiosks, and complex applications that deserve their own book.
Exploiting Remote Access Communications
By the end of this chapter, you will have learned the following:
• Exploiting operating system communications protocols (RDP and SSH)
• Exploiting remote access applications (VNC)
• Configuring Kali for Secure Sockets Layerv2 scanning
• Reconnaissance and exploitation of Secure Sockets Layer, including
man-in-the-middle and denial of service attacks
• Attacking a virtual private network
Exploiting operating system
communication protocols
Some protocols transmit access credentials in the clear (Telnet and FTP). Using a packet
sniffer such as Wireshark will allow an attacker to intercept and reuse the credentials.
However, most remote access protocols, especially those embedded in the
operating system, are now protected with access controls and encryption.
Although this adds a degree of security, they are still subject to attacks that may
occur due to misconfigurations or the use of poor encryption keys. In this section,
we will examine other risks that can be exploited to compromise supposedly secure
communication channels.
Compromising Remote Desktop Protocol
Remote Desktop Protocol (RDP) is a proprietary Microsoft communication protocol
which allows a client to connect with another computer using a graphical interface.
Although the protocol is encrypted, access to the server can be gained if the attacker
guesses the username and password.
It should be noted that the most common compromise of RDP is
using social engineering. The user is contacted by a remote service
technician who convinces the user that they need remote access to
fix something on the user's system. Malware attacks that target the
RDP protocol are also becoming more common.
[ 258 ]
Chapter 10
From a tester's (or attacker's) perspective, the first step in compromising a target's RDP
service is to locate the RDP server and characterize the strength of the cryptography
that is in use. This reconnaissance is normally conducted using a tool such as nmap,
configured to scan for the standard RDP port 3389.
The nmap tool now includes specialized scripts that provide additional details about
RDP, including the configuration of the encryption. If time permits, and if stealth is
not an issue, these should be used during the initial scanning stage. The command line
to invoke the script that enumerates supported encryption protocols is as follows:
root@kali:~# nmap – p 3389 –-script rdp-enum-encryption 
The execution of the previous command is shown in the following screenshot:
Some RDP vulnerabilities have been identified (especially MS12-020), and these can
be remotely exploited using crafted packets.
To determine whether the current version of RDP is vulnerable, use the appropriate
nmap script, by invoking the following command line:
root@kali:~# nmap –sV -p 3389 --script rdp-vuln-ms12-020
[ 259 ]
Exploiting Remote Access Communications
The execution of the previous command is shown in the following screenshot:
Once a vulnerable system has been identified using nmap, it can be exploited
using the Metasploit Framework's auxiliary/dos/windows/rdp/ms12_020_
maxchannelids module to cause a denial of service.
The most common method to compromise RDP is to use a brute-force attack based
on a dictionary of the most common usernames and passwords (target-specific
dictionaries can also be constructed to be target specific using tools such as CeWL and
crunch; brute force attempts using these dictionaries are faster than attempts using
generic dictionaries, and are stealthier because they generate less network traffic).
Kali provides several tools to brute-force access, including hydra, medusa, ncrack,
and patator. Through testing, we have found ncrack to be the most reliable in terms
of speed and effectiveness.
Lists of common usernames and passwords are available from several
sources. Most cracking tools, especially hydra, ncrack, and john (John
the Ripper), include lists in the application's home directory. Testers can
also download lists of various types from online sources. Lists derived
from compromised user accounts are particularly useful because they
reflect the real-world usage of the authentication information. No matter
what list you use, you may wish to personalize it for testing by adding
names of the current and former employees (for usernames) or wordlists
that have been created using tools such as CeWL, which crawls the
target's website to create words of a defined length.
[ 260 ]
Chapter 10
The ncrack tool is a high-speed authentication cracking tool that supports the FTP,
HTTP(S), POP3, RDP, SMB, SSH, Telnet, and VNC protocols. It is invoked from the
terminal window using the following command:
root@kali:~# ncrack -vv -U user.lst -P password.list
:
The execution of the previous command is shown in the following screenshot:
The ncrack tool discovered the access credentials for all users in approximately
1,700 seconds. However, the amount of time required will depend on the overall
size of the dictionaries used and how many guesses must be made before we get
a successful hit.
[ 261 ]
Exploiting Remote Access Communications
Compromising Secure Shell
The secure shell (SSH) protocol is a network protocol that is used to establish an
encrypted channel across an open network between a server and a client. In general,
a public-private key pair allows users to log in to a system without requiring the
password. The public key is present on all systems that require a secure connection,
while the user keeps the private key secret. The authentication is based on the private
key; SSH verifies the private key against the public key. On the target systems, the
public key is verified against a list of authorized keys that are permitted to remotely
access the system. This supposedly secure communication channel fails when the
public key is not cryptographically strong and can be guessed.
Like RDP, SSH is vulnerable to a brute-force attack that guesses the user's access
credentials. For this particular example, we'll use a tool called hydra. The hydra
tool is probably the oldest brute-force tool and is definitely the most feature-rich
tool. It also supports attacks against the greatest number of target protocols.
The hydra tool can be found by navigating to Kali Linux | Password Attacks |
Online Attacks, and it can also be invoked directly from the command line. There
are two versions of hydra: the command-line version (hydra) and the GUI version
(hydra-gtk). For this example, we will invoke hydra from the command line using
the following command:
root@kali:~# hydra -s 22 -v -V -L 
-P  -t 8 
The command parameters are described in the following list:
• -s designates the port to be used. Although it does not need to be
entered when the default port is intended to be used, it is used to
remove ambiguities and because it speeds up testing, in this case.
• -v and -V select the maximum verbosity of reports.
• -L selects the login, or username file.
• -P selects the password file.
• -t selects the number of parallel tasks or connections. The greater the
number, the faster the testing will occur. However, if the number is too
high, errors may be introduced and correct passwords will be missed.
[ 262 ]
Chapter 10
The following screen capture presents the verbose output of the initial
brute-force attack:
When a successful login is achieved using the dictionary, hydra reports the port, the
protocol, the host, and the login credentials. It then continues to use the dictionaries to
identify the other possible accounts. In the top-most line of the following screenshot,
Hydra has correctly identified an SSH account with DigitalDefence as the login
and darkstar as the password; the screenshot also shows the other attempts made
by Hydra as it attempts to identify additional accounts.
If you know the password configuration, you can also use hydra to autocreate the
password list on the fly, using the following command:
root@kali:~# hydra –L user.lst –V –x 6:8:aA1  SSH
[ 263 ]
Exploiting Remote Access Communications
The parameters used in the previous command are described in the following list:
• -x directs Hydra to automatically create the passwords used in the
brute-force attack. The passwords will be created according to the
parameters that follow -x.
• 6:8 indicates a minimum password length of six characters and a maximum
password length of eight characters.
• aA1 will automatically create the passwords using a combination of
letters and numbers. It will use all lowercase letters (denoted by a) and all
uppercase letters (denoted by A), and the numerals 0 to 9 (denoted by 1).
You can also add special characters to the generated list, however, you need to add
single quotes around the –x option, as shown in the following command:
root@kali:~# -L user.lst –V –x '6:8:aA1 !@#$'  SSH
Exploiting third-party remote access
applications
Applications that bypass system protocols to provide remote access were quite
popular at one time. Although they are presently being replaced with online services
such as GoToMyPC or LogMeIn, they remain quite common. Examples of such
programs include pcAnywhere and VNC.
It should be noted that instances of these tools may be present on the network due to
the legitimate actions of a system administrator. However, they may also be present
because the network has been compromised and the attacker wanted a means to
remotely access the network.
In the following example, we'll compromise VNC using the built-in functionality of
the Metasploit Framework.
1. Locate the remote access software on the target using nmap. As shown in the
following screenshot, VNC is usually found on TCP port 5900.
[ 264 ]
Chapter 10
2. Activate the Metasploit Framework using the msfconsole command from
a terminal window. From the msf prompt, configure it to compromise VNC,
as shown in the following screenshot:
3. Initiate the run command, as shown in the following screenshot, and watch
for a successful run:
4. Finally, once Metasploit has determined the credentials, validate them by
logging in to the VNC client using vncviewer. From the command prompt
in a terminal window, enter the following:
root@kali:~# vncviewer 
[ 265 ]
Exploiting Remote Access Communications
This will connect to the remote host and prompt you to enter the appropriate
credentials. When the authentication is successful, a new window will be
opened, giving you remote access to the target system. Verify that you are
on the target system by issuing the whoami query, as shown in the following
screenshot, and request the system's ID or IP address:
Attacking Secure Sockets Layer
Secure Sockets Layer (SSL) and its successor, Transport Layer Security (TLS),
are cryptographic protocols used to provide secure communications across the
Internet. These protocols have been widely used in secure applications such as
Internet messaging and e-mail, web browsing, and voice-over-IP.
[ 266 ]
Chapter 10
These protocols are ubiquitous across the Internet, however, they originated in the
mid-1990s and are increasingly coming under attack as they age. SSL Version 2.0
(Version 1.0 was never publicly released) contains a significant number of flaws that
can be exploited, such as poor key control and a weakness to man-in-the middle
attacks. Although most users have implemented Version 3.0 of that protocol or
newer versions of TLS, misconfigured systems may still permit the use of the
earlier insecure version.
Configuring Kali for SSLv2 scanning
Before beginning the reconnaissance phase, verify that Kali has been configured
to scan for SSL version 2 protocols. At the time of writing this book, this was not
the case.
From a terminal window, enter the following command:
root@kali:~# openssl_s_client -connect
www.opensecurityresearch.com:443 -ssl2
If this returns an unknown option -ssl2 error (shown in the following screenshot),
then additional configuration will be required.