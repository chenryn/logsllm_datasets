= ω Pr(B1 | Cx) = ω · 1
ω
= Pr(S1 is compromised | Cx)
(cid:14)j(cid:13)
1 − τ
ω
(cid:12)(cid:13) τ
x(cid:10)
(cid:11)
x
j
=
ω
j=λ+1
· Pr(S1 is compromised | Cx)
(cid:14)x−j
.
(9)
Assume that there are γ secure communication links that do not
involve any of the x compromised nodes. Given the probability
Pr(c is broken | Cx), we know that the expected fraction of broken
communication links among those γ links is
γ · Pr(c is broken | Cx)
γ
= Pr(c is broken | Cx)
= Pr(S1 is compromised | Cx).
(10)
The above equation indicates that, given that x nodes are com-
promised, the fraction of the compromised secure communication
links outside of those x compromised nodes is the same as the prob-
ability of one space being compromised. This can be explained
quite intuitively. Since spaces are selected in an equally likely fash-
ion during the key pre-distribution process, after x nodes are com-
promised, the expected number of spaces that are compromised
is about ω Pr(S1 is compromised | Cx). Therefore, the fraction
of the spaces that are compromised is Pr(S1 is compromised |
Cx). Because keys from different spaces are evenly selected by
the communication links, the fraction of communication links com-
promised should be the same as the fraction of the spaces compro-
mised. Therefore, the fraction of the spaces compromised is also
Pr(S1 is compromised | Cx).
4.2.1 Comparison
Fig. 4 shows the comparison of our scheme (the one with solid
lines) with the Chan-Perrig-Song scheme (q = 2, q = 3) and
the Eschenauer-Gligor scheme (q = 1). The ﬁgure clearly shows
the advantage of our scheme. For example, when the memory us-
age m is the same (m = 200), and pactual = 0.33, with both
Chan-Perrig-Song and Eschenauer-Gligor schemes, an adversary
only needs to compromise less than 100 nodes in order to compro-
mise 10% of the rest of the secure links, whereas in our scheme,
the adversary needs to compromise 500 nodes. Therefore, our
scheme quite substantially lowers the initial payoff to the adver-
sary of smaller scale network breaches. Chan, Perrig, and Song
also proposed a modiﬁcation of their scheme using multipath key
reinforcement to improve the security [7]. The same technique can
also be applied to our scheme to improve the security of our scheme
as well; we leave further comparison to our future work.
Regarding the original Blom’s scheme, because m = 200, the
network is perfectly secure if less than 200 nodes are compromised;
the network is completely compromised when 200 nodes are com-
promised (pactual is always equal to 1 in Blom’s scheme).
4.2.2 Further Analysis
Even though Equation (9) can be used for numerical computa-
tion, it is too complicated to ﬁgure out the relationship between x,
m, ω, and τ . According to the results shown in Fig. 4, there is
a small range of x where the fraction of the compromised secure
communication links increases exponentially with respect to x. We
develop an analytical form to estimate this range. It should be noted
that Equation (9) is the tail of the binomial distribution. Therefore,
using the bound on the tail of the binomial distribution [17], we can
derive the following fact regarding that range. The proof of this fact
can be found in the extended version of this paper.
(cid:11) 1, s.t. λ + 1 ≈ λ. Deﬁne the entropy
function of y, 0 ≤ y ≤ 1, as H(y) = −y ln y − (1 − y) ln(1 − y)
(cid:11)
(cid:12)
and H(cid:1)(y) = dH(y)/dy. For all x ≥ λ + 1,
Assume that λ = m
τ
(cid:15)
2
1
xα(1 − α)
e−xE(α,θ) ≤ x(cid:10)
j=λ+1
θj(1 − θ)x−j,
x
j
where α = λ+1
x , θ = τ
H(α). Furthermore, if
ω , and E(α, θ) = H(θ) + (α − θ)H(cid:1)(θ) −
then
(cid:11)
(cid:12)
x
j
x(cid:10)
j=λ+1
x  mω
τ 2 . So, when
x > mω
τ 2 , the lower bound indicates that the tail of the binomial
distribution increases exponentially with respect to x. It is also true
that E(α, θ) > 0 when Inequality (11) is satisﬁed [17]. The up-
per bound indicates that the tail of the binomial distribution can
be exponentially bounded away from 1 when x is not close to
mω
τ 2 . For example, assume that x is 25% away from mω
τ 2 , i.e.,
x = 0.75 ∗ mω
τ 2 = 413, where m = 200, τ = 2, and ω = 11,
the upper bound is e−5.089 = 0.006 which is two orders of magni-
tude smaller than 1. Hence, mω
τ 2 can be used as an estimation (upper
bound) of the value of x where the fraction of the compromised se-
cure communication links increases exponentially with respect to
x. So the adversary can obtain higher payoff when the number of
nodes it compromises reaches within the neighborhood of mω
τ 2 . The
results shown in Fig. 4 verify that this estimation is quite accurate.
Based on the above discussions, the number of nodes an adver-
sary needs to compromise to gain a signiﬁcant payoff is linearly
related to the amount of the memory used when ω and τ are ﬁxed.
That is, if the probability of any two nodes sharing at least one
space, pactual, is ﬁxed, increasing the memory space at each node
linearly increases the degree of security. For ﬁxed memory usage,
the security is linearly related to ω
τ 2 . Since ω and τ are related
to pactual, one should choose those values of ω and τ that satisfy
the requirement on global connectivity and at the same time yield
largest value of ω
τ 2 . For example, by using Inequality (4), one may
ﬁnd all the pairs of (ω, τ ) that satisfy the requirement of the global
connectivity. Among all the pairs, the one with the largest value of
ω
τ 2 gives the best security strength.
5. OVERHEAD ANALYSIS
5.1 Communication Overhead
According to our previous discussions on pactual, the probabil-
ity that two neighbor nodes share a key space is less than 1. When
two neighboring nodes are not connected directly, they need to ﬁnd
a route, in the key sharing sense, to connect to each other. We in-
vestigate the number of hops required on this route under various
conditions for our scheme in this section. When the two neighbors
are connected directly, the number of hops needed to connect them
is obviously 1. When more hops are needed to connect two neigh-
bor nodes, the communication overhead of setting up the security
association between them is higher.
Let ph((cid:7)) be the probability that the smallest number of hops
needed to connect two neighboring nodes is (cid:7). Obviously, ph(1)
is pactual. We present the results of ph(2) and ph(3) as follows,
while leaving the details of the calculation to the extended version
of this paper:
ph(2) = (1 − pactual)
(cid:19) 1
1 − 2
·
yp
0
(cid:20)
n
π
2,2
(cid:9)
2 )−y·
2cos−1( y
1−( y
2 )2
(cid:21)
dy
i
d
e
s
m
o
r
p
m
o
c
s
n
o
i
t
a
c
n
u
m
m
o
c
f
o
n
o
i
t
c
a
r
F
i
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
100
200
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
q=1
q=2
q=3
Our scheme: ω=7, τ=2
i
d
e
s
m
o
r
p
m
o
c
s
n
o
i
t
a
c
n
u
m
m
o
c
f
o
n
o
i
t
c
a
r
F
i
q=1
q=2
q=3
Our scheme: ω=11, τ=2
300
400
500
600
700
Number of nodes compromised
800
900
1000
0
0
100
200
400
Number of nodes compromised
300
500
600
(a) m = 200, pactual = 0.33
(b) m = 200, pactual = 0.5
Figure 4: The ﬁgures show the probability that a speciﬁc random communication link between two random nodes i, j can be
decrypted by the adversary when the adversary has captured some set of x nodes that does not include i or j. m is the memory
usage (m multiplied by the key length is the total amount of memory used for storing keys or key information), pactual is the
probability of any two neighbors being able to set up a secure link.
tiplications, we compare our computation with the RSA public key
encryption algorithm, whose cost corresponding to modular multi-
plications makes it unsuitable for sensor networks. We want to
show that the energy consumption of the modular multiplications
in our scheme is far less than that of RSA. This is due to two fac-
tors: λ is small and the block size is small.
According to Equation (5), when m = 200 and τ = 4, λ is
about 50; the total number of multiplications is 100. If we choose
64 bits as the size of a secret key, then our modular multiplica-
tions are 64-bit computations. Therefore we need 100 64-bit mod-
ular multiplications. Compared to RSA, this is a very small num-
ber.
In RSA signature signing scheme, the length for the expo-
nent usually needs to be more than 1024 bits long, so the expo-
nentiation requires at least 1024 multiplications. Moreover, using a
1024-bit exponent, RSA needs to be conducted in blocks that are at
least 1024 bits long; a single modular multiplication on a 1024-bit
)2 = 256 times more expensive than a multiplica-
block is ( 1024
64
tion on a 64-bit block. Therefore, in total RSA scheme is about
256 ∗ 1024
= 2621 times more expensive than the multiplications
in our scheme. Assuming that the energy cost is proportional to
the cost of multiplications, the cost of our scheme is about
2621
of the cost of RSA. According to the data presented by Carman,
Kruus, and Matt [6], in a mid-range processor, such as the Mo-
torola MC68328 “DragonBall”, the cost of multiplications in our
scheme is about 25 times more expensive than in an 128-bit AES
encryption (AES is considered as very energy-efﬁcient), i.e.
the
computation cost of our scheme is equivalent to encrypting a 3200-
bit long message using AES.
100
1
Since the computation overhead occurs only once for each neigh-
boring pair that has a common key space, the cost is not signiﬁ-
cant. Moreover, we can choose a larger τ to further lower the cost.
However, our results show that increasing τ value may degrade
the resilience of the network even though the connectivity is still
the same. More analysis regarding this will be given in our future
work.
ph(3) ≈ [1 − ph(1) − ph(2)]
1 − 2
(cid:20)
(cid:25) 2π
0
(cid:25) 1
0
· (˜p3,2)
n2
π2
2cos−1( x
2 )−x
1−( x
2 )2
(cid:20)
(cid:19) 1
z
(cid:9)
0
(cid:26)
(cid:21)
dydθ
dz
where
p2,2 = 1 −
˜p3,2 ≈ 1 −
(cid:11)
·
(cid:15)
τ
τ
ω
τ
+
(cid:8)
ω−τ
ω−τ
ω−2τ
(cid:7)
(cid:8) − 2
(cid:7)
(cid:8)(cid:27)(cid:7)
(cid:7)
(cid:8)2
(cid:8)
(cid:8)3 · τ−1(cid:10)
τ−max(a,b)(cid:10)
τ−1(cid:10)
(cid:12)(cid:11)
(cid:7)
(cid:7)
(cid:7)
ω − 2τ − c
τ − a − c
τ
a
ω − 2τ − (τ − a)
τ − b − c
τ
(cid:11)
ω−τ
τ
ω
τ
a=1
b=1
c=1
ω
τ
(cid:8)(cid:28)
(cid:12)(cid:11)
(cid:12)
x =
y2 + z2 + 2yz cos(θ).
(cid:12)
(cid:12)(cid:11)
τ
b
ω − 2τ