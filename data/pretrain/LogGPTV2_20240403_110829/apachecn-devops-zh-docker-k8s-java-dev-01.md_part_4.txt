7.  `apt`包管理器会下载很多包；这些将是所需的依赖项和`docker-engine`本身:
![](img/85755b79-0571-4bf5-8b00-ec829518fb69.png)
8.  就这样，你应该准备好了。让我们验证 Docker 是否适用于我们的 Linux 盒子:
```
$sudo docker run milkyway/java-hello-world  
```
9.  如您所见，Docker 引擎将从 Docker Hub 中拉出带有所有图层的`milkyway/java-hello-world`映像，并以问候回应:
![](img/210d8295-0413-43f9-a29b-78369be32bc4.png)
但是我们需要用`sudo?`运行 Docker 命令吗，原因是 Docker 守护进程总是作为`root`用户运行，并且由于 Docker 版本为 0.5.2，Docker 守护进程绑定到一个 Unix 套接字而不是 TCP 端口。默认情况下，该 Unix 套接字属于用户`root`，因此，默认情况下，您可以使用 sudo 访问它。让我们将其修复，以便能够作为普通用户运行`Docker`命令:
1.  首先，添加`Docker`组，如果它还不存在的话:
```
$ sudo groupadd docker
```
2.  然后，将您自己的用户添加到 Docker 组。更改用户名以匹配您的首选用户:
```
$ sudo gpasswd -a jarek docker  
```
3.  重新启动停靠守护进程:
```
$ sudo service docker restart  
```
4.  现在让我们注销再登录，再执行一次`docker run`命令，这次不用`sudo`了。如您所见，您现在可以作为正常的非`root`用户使用 Docker:
![](img/f7eabd22-fb79-4855-b9d4-9410711656c3.png)
5.  就这样。我们的 Linux Docker 安装已经准备好了。现在让我们在 Windows 盒子上进行安装。
# 在 Windows 上安装
本机 Docker 包可以在 64 位 Windows 10 专业版或企业版上运行。它使用 Windows 10 虚拟化引擎来虚拟化 Linux 内核。这就是安装包不再包含 VirtualBox 设置的原因，就像以前版本的窗口 Docker 一样。本机应用来自典型的`.msi`安装包。如果你运行它，它会向你发出友好的信息，说从现在开始，它将生活在你的任务栏托盘中，在小鲸鱼图标下:
![](img/14cc3cb6-6d95-4d47-8403-3e5aade7635a.png)
托盘中的 Docker 图标通知您 Docker 引擎的状态。它还包含一个小而有用的上下文菜单:
![](img/2e0d32a3-9be8-4a1f-9f62-9be05d2525d4.png)
让我们探索首选项设置，看看有什么可用的。第一个选项卡“常规”允许您将 Docker 设置为在登录时自动运行。如果您每天使用 Docker，这可能是推荐的设置。您还可以标记为自动检查更新并发送使用统计信息。发送使用统计数据将有助于 Docker 团队在未来版本中改进该工具；除非您有一些关键的、安全的工作要做，否则我建议您打开这个选项。这是为这一重要工具的未来版本做出贡献的好方法:
![](img/5a80b789-e56a-4cb9-b74a-11acf59680f5.png)
第二个选项卡“共享驱动器”允许您选择本地 Windows 驱动器，这些驱动器可用于您将运行的 Docker 容器:
![](img/6c9fbbe9-5147-41bb-9d3a-e4ac41d070ba.png)
我们将在[第 2 章](02.html)、*网络和持久存储*中介绍 Docker 卷。在此选择驱动器意味着您可以从本地系统映射一个目录，并将其作为 Windows 主机读取到 Docker 容器中。下一个首选项页面“高级”允许我们对运行在我们的 Windows 电脑上的 Docker 引擎进行一些限制，并选择带有 Linux 内核的虚拟机映像的位置:
![](img/f70d8b29-0839-48ed-a8ee-754467834494.png)
默认值通常是现成的，除非您在开发过程中遇到问题，否则我建议保持原样。网络允许您配置 Docker 与网络的工作方式，与子网地址和掩码或 DNS 服务器相同。我们将在[第 2 章](02.html)、*网络和持久存储*中介绍 Docker 网络:
![](img/62339641-c3e5-4a0c-be27-59e83643b5b0.png)
如果您在网络中使用代理，并且希望 Docker 访问互联网，您可以在“代理”选项卡中设置代理设置:
![](img/0dea2d7a-f383-4493-bf9d-44cdce53be26.png)
该对话框类似于您在其他应用中发现的对话框，您可以在其中定义代理设置。它不接受任何代理、系统代理设置或手动设置(HTPP 和 HTTPS 通信使用不同的代理)。下一个窗格可用于配置 Docker 守护程序:
![](img/b21a09b5-5fea-402f-9296-db19f3b6217d.png)
基本开关意味着 Docker 使用基本配置。您可以将其切换到高级，并以 JSON 结构的形式提供自定义设置。实验特性与我们在 macOS 上的 Docker 安装期间已经提到的相同，例如，这将是检查点&恢复或启用 Docker 图形驱动程序插件。您还可以指定远程注册表的列表。Docker 将只使用普通 HTTP 而不是 HTTPS 从不安全的注册中心提取映像。
使用最后一个窗格上的重置选项，您可以重新启动 Docker 或将 Docker 重置为出厂设置:
![](img/ac39e1ce-6fce-49ec-98c2-4a15f01d6ff3.png)
请注意，将 Docker 重置为其初始设置也将删除您机器上当前存在的所有映像和容器。
开放的厨房...选项，它也存在于 Docker 托盘图标上下文菜单中，是启动 Kitematic 的快速快捷方式。如果您是第一次下载，并且没有安装 Kitematic，Docker 会询问您是否想第一次下载:
![](img/54fc3188-f479-4348-9649-0c2df56c378e.png)
这就是为 Windows 安装 Docker 的原因。这是一个相当无痛的过程。作为安装过程的最后一步，让我们检查 Docker 是否可以从命令提示符运行，因为这可能是您将来启动它的方式。在命令提示符或 PowerShell 中执行以下命令:
```
docker run milkyway/java-hello-world  
```
![](img/1a67dd58-bbcf-4f04-95d2-c1306aee0241.png)
正如您在前面的截图中看到的，我们有一条 Hello World 消息，来自作为 Docker 容器启动的 Java 应用。
# 摘要
就这样。我们的窗口安装 Docker 功能齐全。在本章中，我们已经了解了 Docker 背后的思想以及传统虚拟化和容器化之间的主要区别。我们非常了解 Docker 的核心概念，例如映像、层、容器和注册表。我们应该已经在本地机器上安装了 Docker 现在是时候继续学习更高级的 Docker 功能了，例如网络和持久存储。