---
author: K Young
category: 系统运维
comments_data:
- date: '2015-08-08 11:31:43'
  message: 赞一个，如何！！！！！！
  postip: 219.130.236.83
  username: Nic [Firefox 33.0|Ubuntu]
- date: '2016-03-28 09:40:56'
  message: datadog 不是开源的！ B4
  postip: 124.72.48.20
  username: 来自福建厦门的 Chrome 45.0|Windows 7 用户
- date: '2021-05-06 11:49:56'
  message: 俄罗斯方块不对劲，
  postip: 171.221.227.116
  username: 来自四川成都的 Chrome 87.0|Windows 10 用户
count:
  commentnum: 3
  favtimes: 14
  likes: 0
  sharetimes: 1
  viewnum: 40985
date: '2015-08-07 07:30:00'
editorchoice: false
excerpt: NGINX 是什么? NGINX (发音为 engine X) 是一种流行的 HTTP 和反向代理服务器。作为一个 HTTP 服务器，NGINX
  可以使用较少的内存非常高效可靠地提供静态内容。作为反向代理，它可以用作多个后端服务器或类似缓存和负载平衡这样的其它应用的单一访问控制点。NGINX 是一个自由开源的产品，并有一个具备更全的功能的叫做
  NGINX Plus 的商业版。 NGINX 也可以用作邮件代理和通用的 TCP 代理，但本文并不直接讨论 NGINX 的那些用例的监控。 NGINX 主要指标
  通过监控 NGINX 可以 捕获到两类问题：NGINX 本身的资源问题，和出现在你的基础网络设
fromurl: https://www.datadoghq.com/blog/how-to-monitor-nginx/
id: 5970
islctt: true
largepic: /data/attachment/album/201508/07/000445fik0uiga75un5qnn.png
permalink: /article-5970-1.html
pic: /data/attachment/album/201508/07/000445fik0uiga75un5qnn.png.thumb.jpg
related:
- displayorder: 0
  raid: 5985
- displayorder: 0
  raid: 6088
reviewer: ''
selector: ''
summary: NGINX 是什么? NGINX (发音为 engine X) 是一种流行的 HTTP 和反向代理服务器。作为一个 HTTP 服务器，NGINX
  可以使用较少的内存非常高效可靠地提供静态内容。作为反向代理，它可以用作多个后端服务器或类似缓存和负载平衡这样的其它应用的单一访问控制点。NGINX 是一个自由开源的产品，并有一个具备更全的功能的叫做
  NGINX Plus 的商业版。 NGINX 也可以用作邮件代理和通用的 TCP 代理，但本文并不直接讨论 NGINX 的那些用例的监控。 NGINX 主要指标
  通过监控 NGINX 可以 捕获到两类问题：NGINX 本身的资源问题，和出现在你的基础网络设
tags:
- NGINX
- 监控
thumb: false
title: 如何监控 NGINX（第一篇）
titlepic: false
translator: strugglingyouth
updated: '2015-08-07 07:30:00'
---
![](/data/attachment/album/201508/07/000445fik0uiga75un5qnn.png)
### NGINX 是什么?
[NGINX](http://nginx.org/en/) (发音为 “engine X”) 是一种流行的 HTTP 和反向代理服务器。作为一个 HTTP 服务器，NGINX 可以使用较少的内存非常高效可靠地提供静态内容。作为[反向代理](http://nginx.com/resources/glossary/reverse-proxy-server/)，它可以用作多个后端服务器或类似缓存和负载平衡这样的其它应用的单一访问控制点。NGINX 是一个自由开源的产品，并有一个具备更全的功能的叫做 NGINX Plus 的商业版。
NGINX 也可以用作邮件代理和通用的 TCP 代理，但本文并不直接讨论 NGINX 的那些用例的监控。
### NGINX 主要指标
通过监控 NGINX 可以 捕获到两类问题：NGINX 本身的资源问题，和出现在你的基础网络设施的其它问题。大多数 NGINX 用户会用到以下指标的监控，包括**每秒请求数**，它提供了一个由所有最终用户活动组成的上层视图；**服务器错误率** ，这表明你的服务器已经多长没有处理看似有效的请求；还有**请求处理时间**，这说明你的服务器处理客户端请求的总共时长（并且可以看出性能降低或当前环境的其他问题）。
更一般地，至少有三个主要的指标类别来监视：
* 基本活动指标
* 错误指标
* 性能指标
下面我们将分析在每个类别中最重要的 NGINX 指标，以及用一个相当普遍但是值得特别提到的案例来说明：使用 NGINX Plus 作反向代理。我们还将介绍如何使用图形工具或可选择的监控工具来监控所有的指标。
本文引用指标术语[来自我们的“监控 101 系列”](https://www.datadoghq.com/blog/monitoring-101-collecting-data/),，它提供了一个指标收集和警告框架。
#### 基本活跃指标
无论你在怎样的情况下使用 NGINX，毫无疑问你要监视服务器接收多少客户端请求和如何处理这些请求。
NGINX Plus 上像开源 NGINX 一样可以报告基本活跃指标，但它也提供了略有不同的辅助模块。我们首先讨论开源的 NGINX，再来说明 NGINX Plus 提供的其他指标的功能。
**NGINX**
下图显示了一个客户端连接的过程，以及开源版本的 NGINX 如何在连接过程中收集指标。
![connection, request states](/data/attachment/album/201508/07/000449auf93aker1oze8ca.png)
Accepts（接受）、Handled（已处理）、Requests（请求数）是一直在增加的计数器。Active（活跃）、Waiting（等待）、Reading（读）、Writing（写）随着请求量而增减。
| 名称 | 描述 | [指标类型](https://www.datadoghq.com/blog/monitoring-101-collecting-data/) |
| --- | --- | --- |
| Accepts（接受） | NGINX 所接受的客户端连接数 | 资源: 功能 |
| Handled（已处理） | 成功的客户端连接数 | 资源: 功能 |
| Active（活跃） | 当前活跃的客户端连接数 | 资源: 功能 |
| Dropped（已丢弃，计算得出） | 丢弃的连接数（接受 - 已处理） | 工作：错误\* |
| Requests（请求数） | 客户端请求数 | 工作：吞吐量 |
*\*严格的来说，丢弃的连接是 [一个资源饱和指标](https://www.datadoghq.com/blog/monitoring-101-collecting-data/#resource-metrics)，但是因为饱和会导致 NGINX 停止服务（而不是延后该请求），所以，“已丢弃”视作 [一个工作指标](https://www.datadoghq.com/blog/monitoring-101-collecting-data/#work-metrics) 比较合适。*
NGINX worker 进程接受 OS 的连接请求时 **Accepts** 计数器增加，而**Handled** 是当实际的请求得到连接时（通过建立一个新的连接或重新使用一个空闲的）。这两个计数器的值通常都是相同的，如果它们有差别则表明连接被**Dropped**，往往这是由于资源限制，比如已经达到 NGINX 的[worker\_connections](http://nginx.org/en/docs/ngx_core_module.html#worker_connections)的限制。
一旦 NGINX 成功处理一个连接时，连接会移动到**Active**状态，在这里对客户端请求进行处理：
Active状态
* **Waiting**: 活跃的连接也可以处于 Waiting 子状态，如果有在此刻没有活跃请求的话。新连接可以绕过这个状态并直接变为到 Reading 状态，最常见的是在使用“accept filter（接受过滤器）” 和 “deferred accept（延迟接受）”时，在这种情况下，NGINX 不会接收 worker 进程的通知，直到它具有足够的数据才开始响应。如果连接设置为 keep-alive ，那么它在发送响应后将处于等待状态。
* **Reading**: 当接收到请求时，连接离开 Waiting 状态，并且该请求本身使 Reading 状态计数增加。在这种状态下 NGINX 会读取客户端请求首部。请求首部是比较小的，因此这通常是一个快速的操作。
* **Writing**: 请求被读取之后，其使 Writing 状态计数增加，并保持在该状态，直到响应返回给客户端。这意味着，该请求在 Writing 状态时， 一方面 NGINX 等待来自上游系统的结果（系统放在 NGINX “后面”），另外一方面，NGINX 也在同时响应。请求往往会在 Writing 状态花费大量的时间。
通常，一个连接在同一时间只接受一个请求。在这种情况下，Active 连接的数目 == Waiting 的连接 + Reading 请求 + Writing 。然而，较新的 SPDY 和 HTTP/2 协议允许多个并发请求/响应复用一个连接，所以 Active 可小于 Waiting 的连接、 Reading 请求、Writing 请求的总和。 （在撰写本文时，NGINX 不支持 HTTP/2，但预计到2015年期间将会支持。）
**NGINX Plus**
正如上面提到的，所有开源 NGINX 的指标在 NGINX Plus 中是可用的，但另外也提供其他的指标。本节仅说明了 NGINX Plus 可用的指标。
![connection, request states](/data/attachment/album/201508/07/000451ckrxmestxlel80e0.png)
Accepted （已接受）、Dropped，总数是不断增加的计数器。Active、 Idle（空闲）和处于 Current（当前）处理阶段的各种状态下的连接或请​​求的当前数量随着请求量而增减。
| 名称 | 描述 | [指标类型](https://www.datadoghq.com/blog/monitoring-101-collecting-data/) |
| --- | --- | --- |
| Accepted（已接受） | NGINX 所接受的客户端连接数 | 资源: 功能 |
| Dropped（已丢弃） | 丢弃的连接数（接受 - 已处理） | 工作：错误\* |
| Active（活跃） | 当前活跃的客户端连接数 | 资源: 功能 |
| Idle（空闲） | 没有当前请求的客户端连接 | 资源: 功能 |
| Total（全部请求数） | 客户端请求数 | 工作：吞吐量 |
*\*严格的来说，丢弃的连接是 [一个资源饱和指标](https://www.datadoghq.com/blog/monitoring-101-collecting-data/#resource-metrics)，但是因为饱和会导致 NGINX 停止服务（而不是延后该请求），所以，“已丢弃”视作 [一个工作指标](https://www.datadoghq.com/blog/monitoring-101-collecting-data/#work-metrics) 比较合适。*
当 NGINX Plus worker 进程接受 OS 的连接请求时 **Accepted** 计数器递增。如果 worker 进程为请求建立连接失败（通过建立一个新的连接或重新使用一个空闲），则该连接被丢弃， **Dropped** 计数增加。通常连接被丢弃是因为资源限制，如 NGINX Plus 的[worker\_connections](http://nginx.org/en/docs/ngx_core_module.html#worker_connections)的限制已经达到。
**Active** 和 **Idle** 和[如上所述](https://www.datadoghq.com/blog/how-to-monitor-nginx/#active-state)的开源 NGINX 的“active” 和 “waiting”状态是相同的，但是有一点关键的不同：在开源 NGINX 上，“waiting”状态包括在“active”中，而在 NGINX Plus 上“idle”的连接被排除在“active” 计数外。**Current** 和开源 NGINX 是一样的也是由“reading + writing” 状态组成。
**Total** 为客户端请求的累积计数。请注意，单个客户端连接可涉及多个请求，所以这个数字可能会比连接的累计次数明显大。事实上，（total / accepted）是每个连接的平均请求数量。
**开源 和 Plus 之间指标的不同**