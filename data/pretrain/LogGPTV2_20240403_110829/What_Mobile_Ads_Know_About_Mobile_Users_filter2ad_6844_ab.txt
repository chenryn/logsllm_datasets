AdSDK, Ads
AdSDK
AdSDK −
Information sent only if Google Play Services are not present on the device.
GAID
AdSDK
AdSDK +, Ads +
AdSDK
AdSDK +, Ads +
Model
AdSDK
AdSDK
AdSDK, Ads
AdSDK, Ads
H(IMEI)
AdSDK, Ads
TABLE II: Tracking information available to advertisers and AdSDK providers
can reset
their identiﬁers to avoid tracking. We don’t
know whether users are aware of this or do in fact reset
this identiﬁer. In any case,
location itself is a strong
deanonymizer [20, 31, 55]. Furthermore, on devices with-
out Google Play Services, ﬁxed hash values of permanent
Android identiﬁers are used instead of GAID. Whenever
location is paired with a semi-permanent or permanent
identiﬁer, the advertiser can infer the device’s trajectory
(see Section VI-E).
III. Advertising software stack on Android
A. AdSDKs and WebView
Developers of ad-supported mobile apps integrate
AdSDK code into their apps and request permissions
needed by AdSDKs. When the user runs an ad-supported
app, the included AdSDK fetches advertising creatives by
sending a GET or POST HTTP(S) request to its provider’s
servers. As explained in Section II-C, AdSDK may attach
device identiﬁer and location to these requests.
Depending on the AdSDK, the response from the server
may be in JSON, XML, or HTML. AdSDK extracts an ad-
vertising creative from this response. AdSDK then creates
a WebView instance and loads the extracted creative into
this instance. WebView is an Android class designed to
display webpages inside apps [51].
Figure 2 shows a banner impression from the AdMob
AdSDK and an interstitial impression from the MoPub
AdSDK, both displayed within WebView (and deliberately
blurred).
B. External storage
It is critical for AdSDKs to reduce latency when deliver-
ing advertising creatives to mobile devices and to minimize
network data usage. AdSDKs thus need to cache ﬁles,
images, and advertising videos on the device. They use
external storage for this purpose.
Android supports devices with external storage [16],
typically an SD card. External storage is protected by the
permission system. Prior to Android 4.4 KitKat, reading
data from external storage did not require any permis-
sions; writing required the WRITE EXTERNAL STO-
RAGE permission. Android 4.4 made two major changes
4
Fig. 2: Examples of mobile advertising impressions
in access control for external storage. First, reading ex-
ternal storage requires the READ EXTERNAL STO-
RAGE permission (implicitly granted by WRITE EX-
TERNAL STORAGE). Second, each app has its own
directory on external storage, allowing it to manage its
data without any storage permissions. Apps with the RE-
AD EXTERNAL STORAGE permission can read data
from the directories managed by other apps, but cannot
write into them.
MoPub, AirPush, and AdMarvel all instruct app de-
velopers to request WRITE EXTERNAL STORAGE so
that their AdSDKs can function properly. This automat-
ically grants the READ EXTERNAL STORAGE per-
mission. Furthermore, READ EXTERNAL STORAGE
is one of the top four permissions requested by apps in
popular categories [39]. Therefore, we assume that most
ad-supported mobile apps can read external storage.
C. Mobile ad isolation
As explained in Section II-B, mobile ads must be
treated as potentially malicious. Even prominent Inter-
net sites have been affected by malicious advertising
impressions [48]. Furthermore, many AdSDK providers,
including AdMob, MoPub, and AdMarvel, serve ads over
HTTP. Therefore, a man-in-the-middle attacker can inject
malicious code into ads as they travel over the network.
loaded in this manner can embed local ﬁles,1 subject to
the standard SOP for cross-origin resources. Conceptu-
ally, this is very similar to a cross-domain GET, which
is pervasively used in conventional webpages. Although
embedding is allowed, SOP does not allow JavaScript from
one origin to read content from another origin. Therefore,
assuming that WebView correctly enforces SOP, JavaScript
in advertising creatives can load—but not read!—local ﬁle
resources. This seemingly safe design is directly based on
the standard Web browser security model.
Prior to Android 4.1 Jelly Bean, WebView considered
all ﬁle-scheme URIs to belong to the same origin. Tech-
nically, this is not a violation of SOP because Section 4
in RFC 6454 speciﬁes that the treatment of ﬁle-scheme
URI origins is implementation-speciﬁc [8]. For example,
Firefox treats two different ﬁle URIs as the same origin
only if one is the other’s child directory, Internet Explorer
treats all ﬁle URIs as the same origin by default, and
Chrome treats each ﬁle URI as a unique origin [11].
Therefore, prior to Android 4.1, any ad loaded by an
AdSDK could access any ﬁle owned by the host app and
any ﬁle in external storage. Since Android 4.1, WebView
by default treats each ﬁle-scheme URI as a unique origin.
AdSDKs may change this default setting by enabling
setAllowFileAccessFromFileURLs or setAllowUniver-
salAccessFromFileURLs [50]. The former allows HTML
content loaded from any ﬁle URI to access all resources
from any ﬁle URIs. The latter allows HTML content
loaded from any ﬁle URI to access all resources regardless
of their origins. In either of these cases, if the host app
has the READ EXTERNAL STORAGE permission, any
HTML content loaded in a WebView created by an AdSDK
can read any ﬁle from external storage. In particular,
if the AdSDK loads a malicious ad, JavaScript code in
this ad can steal
local ﬁles using AJAX requests via
XMLHttpRequest.
Fortunately, with one exception (see Section IV-B),
modern AdSDKs do not change the default setting of
WebView. Therefore, malicious ads can only load, but not
read, local ﬁles on the device.
IV.
Inference mechanisms
In this section, we explain the mechanisms that mobile
advertisers can use to infer sensitive information about the
users to whom their ads are shown.
A. Attack model
As explained in Section II-B, we focus on threats from
malicious advertisers, as opposed to malicious apps or abu-
sive advertising libraries. In contrast to attacks that exploit
advertising to entice victims to install malware [29, 48],
in our model the attacker’s goal is to collect sensitive
information about users.
1Android 5.0 Lollipop does not allow the embedding of local resources
if baseU rl starts with https://.
5
Fig. 3: Overview of Android advertising stack
Because AdSDKs have the same privileges as their host
apps, they must ensure that the ads they display cannot
enjoy these privileges. To this end, AdSDKs conﬁne ads
in separate WebView instances, as shown in Figure 3.
WebView instances created by different processes do not
share any state, such as cookies, even if they display
content from the same origin. Furthermore, WebView
enforces the standard same origin policy [8, 42] on the
displayed content. An advertising creative displayed in a
WebView can interact with the host app through exposed
bridge objects [19], but an AdSDK can restrict which
bridges are available in its WebViews.
In this architecture, WebView instances still share the
application process with their host app. There are research
proposals such as AdDroid [37] and AdSplit [43] that
impose stronger privilege separation between the AdSDK
execution environment and the host app. All of the vulner-
abilities described in this paper would still be present and
exploitable even if the Android OS and AdSDKs deployed
AdDroid or AdSplit.
Table III describes all methods for loading HTML
content into a WebView instance. loadUrl fetches HTML
content from a given URL; unless the URL is a ﬁle-scheme
URI, this content cannot access local ﬁles via ﬁle-scheme
URIs. loadData loads speciﬁed HTML content with the
data-scheme origin; access to local ﬁles is blocked.
loadDataWithBaseURL loads the data string with the
given baseU rl origin. Unless baseU rl is a ﬁle-scheme
URI, loaded content and local ﬁles have different origins.
Nevertheless, the same origin policy (SOP) allows content
from one origin to embed content from another origin, in-
cluding image elements. Therefore, HTML and JavaScript
WebView member method
void loadUrl (String url)
void loadData (String data, String mimeT ype, String encoding)
void loadDataWithBaseURL
(String baseU rl, String data, String mimeT ype,
String encoding, String historyU rl)
Functionality
Loads url
Loads data using a data-scheme URL
Loads data using baseU rl as its origin
TABLE III: Methods for loading content into WebView
Mobile advertisers typically have some control over the
selection and number of mobile devices on which their ads
are shown. For example, they can bid through different
advertising networks and specify the user proﬁles they
wish to target. The number of victims is related to the
number of ads served and the duration of the advertising
campaign, both of which depend on the attacker’s budget.
B. Reading local ﬁles
The attack described in this section depends on the
Android version and exact AdSDK used to show the
malicious ad. Prior to Android 4.1 Jelly Bean, WebView
treated all ﬁle URIs as the same origin (see Section III-C).
Since Android 4.1, each ﬁle-scheme URI has a separate
origin by default. Nevertheless, AdSDKs can change this
default setting of WebView via setAllowFileAccessFrom-
FileURLs or setAllowUniversalAccessFromFileURLs.
Neither requires user permission.
The attacker ﬁrst entices the victim to download an
HTML page that holds malicious payload. For example,
the attacker can set up a webpage that causes Chrome
and Firefox mobile browsers to automatically download
the malicious ﬁle without user’s consent [23].
Once the payload page is present on the user’s device,
the attacker’s ad invokes the payload by opening this
page within the same WebView where the ad is running.
To do this, JavaScript
in the ad can create an iframe
pointing to the downloaded page via a ﬁle-scheme URI,
or else change window.location to this URI. WebView
calls shouldOverrideUrlLoading to check whether the
host app has registered a callback to intercept URI loading.
If the answer is “false,” WebView loads the payload page;
otherwise it delegates the URI to the host app. After the ad
has successfully loaded the page, JavaScript in the payload
can steal any local ﬁle that belongs to the same ﬁle-scheme
origin and that the host app is allowed to read.
The following summarizes the conditions under which
a malicious ad can directly read ﬁles from the device’s
external storage.
•
•
•
•
Victim automatically downloads a malicious pay-
load page by visiting an attacker-controlled web-
site.
A mobile app on the victim’s device includes an
AdSDK that displays the attacker’s ad.
To display the attacker’s ad, AdSDK loads it in a
WebView instance using loadDataWithBaseURL
with a scheme other than https:// for baseU rl.
There is no shouldOverrideUrlLoading callback
deﬁned for the WebView instance, or the callback
6
•
•
•
•
returns false.
The WebView instance enables setJavascriptEn-
abled.
The WebView instance enables setAllowFileAc-
cess.
The WebView instance precedes Android 4.1, or
else the WebView instance enables either setAl-
lowFileAccessFromFileURLs or setAllowUni-
versalAccessFromFileURLs.
(Since Android 4.4 KitKat) The host app has the
READ EXTERNAL STORAGE permission.
We found that
the AdMarvel AdSDK satisﬁes the
WebView-related conditions even on post-4.1 Android, i.e.,
it allows ﬁles loaded by ads to access any ﬁle on the device.
This enables any ad shown in an AdMarvel-supported app
to steal local ﬁles from external storage.
Figure 4 shows a sample exploit. First,
the victim
downloads trigger.html
to his device by visiting the
attacker’s webpage. The victim then opens an ad-supported
app whose AdSDK, such as AdMarvel, shows ads in a
WebView instance that satisﬁes the above conditions. The
fetched advertising creative embeds an iframe whose src
property is the ﬁle URI of the downloaded page—see Ln 4
in the top section of Figure 4. The attack payload initiates
XMLHttpRequest to local resources, receives byte streams
with the data, and exﬁltrates them to the attacker’s domain.
C. Inferring the existence of local ﬁles
When an AdSDK uses loadDataWithBaseURL to load
an advertising creative via a scheme other than https://
in Android 5.0 or any scheme in pre-5.0 Android, the
creative’s HTML code can embed local ﬁles as DOM
elements. The origin of the code is baseU RL, the ﬁrst
argument of loadDataWithBaseURL. All AdSDKs in
Table V use null or their own domain names as baseU RL.
Therefore, the origin of any advertising code they load is
different from the origin of the local ﬁles.
SOP thus prevents advertising code from reading the
contents of cross-origin resources such as local ﬁles, but
it does not prevent advertising code from embedding these
ﬁles as image, audio, or video elements. This is the
standard browser security model, enforced correctly. It is
common for conventional webpages to include iframes,
images, etc. from a different origin (without being able
to read them). In fact, few modern websites would work if
SOP prohibited the embedding of cross-origin resources.
This key feature of the Web programming model ap-
pears fairly harmless in its original Web context but has
interesting privacy consequences when translated to the
Malicious advertising creative
1 
2
3
4
...
...
5
6 
Attack code for stealing local ﬁles
’Picture1’ ’image1.jpg’,
...
1 var list_to_extract = {
2
3
4 };
5
6 function readFile(file) {
7
8
9
var rawFile = new XMLHttpRequest();
rawFile.open("GET", file, false);
rawFile.onreadystatechange = function ()
10
11
{
if(rawFile.readyState === 4) {
if(rawFile.status === 200 || rawFile.
status == 0) {
var allText = rawFile.responseText;
// Send retrieved data anywhere
12
13
14 } } }
15
16 function extractFilesFromSDcard() {
for (var key in list_to_extract) {
17
18
var file_url = "file:///sdcard/DCIM/
Camera/" + list_to_extract[key];
}
readFile(file_url);
19
20
21 }