# 四、缩放容器
在本章中，我们将获取我们的服务，并尝试使用同一个容器的多个实例来横向扩展它。我们将在本章中讨论以下主题:
*   编排选项及其优缺点
*   服务发现
*   国家和解
*   部署自己的 Docker Swarm 集群
*   将前一章中的文字服务部署到该集群中
# 服务发现
在进一步深入之前，我们确实需要深入了解概念性的 Docker 容器连接，这在某些方面与在非容器化世界中使用服务器构建高可用性服务非常相似，这并不奇怪。正因为如此，深入讨论这个主题不仅会扩展您对 Docker 网络的理解，而且还有助于构建弹性服务。
# Docker 网络概述
在前一章中，我们介绍了一点 Docker 网络布局，因此我们将在这里介绍要点:
*   默认情况下，Docker 容器运行在主机上的隔离虚拟网络上
*   每个容器在网络中都有自己的网络地址
*   默认情况下，容器的`localhost`是*而不是*主机的`localhost`
*   为了手动连接容器，人工工作的开销很大
*   容器之间的手动网络连接本质上是脆弱的
在设置本地服务器网络的并行世界中，Docker 连接的基本体验非常类似于用静态 IP 连接整个网络。虽然这种方法并不难操作，但维护起来极其困难和费力，这就是为什么我们需要比这更好的东西。
# 深度服务发现
由于我们不想处理这种脆弱的保留和维护硬编码 IP 地址的系统，我们需要找到一种方法，以便我们的连接是灵活的，并且在目标服务死亡或创建新服务时不需要客户端进行调整。如果同一个服务的每个连接在同一个服务的所有实例之间是相等平衡的，那也是很好的。理想情况下，我们的服务如下所示:
![](img/27677e4c-7c2e-4cb3-9749-5fca259138bf.png)
对于互联网的这种确切的使用情况，创建域名系统是为了使客户端能够找到服务器，即使 IP 地址或网络在世界任何地方发生变化。另一个好处是，我们有更容易记住的目标地址(域名，如[https://google.com](https://google.com)而不是`https://123.45.67.89`等)，并且能够将处理分配给我们想要的任意多的处理服务。
如果您没有深入研究过域名系统，主要原则可以归纳为以下几个基本步骤:
1.  用户(或应用)想要连接到服务器(即[google.com](http://www.google.com))。
2.  本地机器要么使用自己缓存的域名系统答案，要么进入域名系统并搜索该名称。
3.  本地机器返回它应该用作目标的 IP 地址(`123.45.67.89`)。
4.  本地机器连接到该 IP 地址。
The DNS system is much more complicated than the single sentences mentioned here. While DNS is a really good thing to know about in any server-oriented tech position, here, it was sufficient just to know that the input to the DNS system is a hostname and the output is the real target (IP). If you would like to know more about how the DNS system actually works, I recommend that you visit [https://en.wikipedia.org/wiki/Domain_Name_System](https://en.wikipedia.org/wiki/Domain_Name_System) at your leisure.
如果我们强制已经在几乎所有客户端中实现的 DNS 处理作为自动发现服务的方式，我们可以使自己成为我们一直在寻找的服务发现机制！如果我们让它足够聪明，它可以告诉我们运行的容器在哪里，在同一个容器的所有实例之间进行负载平衡，并为我们提供一个静态名称作为我们的目标。正如人们可能期望的那样，几乎所有的容器服务发现系统都具有这种确切的功能模式；如果它是作为客户端发现模式、服务器端发现模式或某种混合系统来完成的，那么它通常会有所不同。
# 客户端发现模式
这种类型的模式并不经常使用，但它几乎涉及到使用服务感知客户端来发现其他服务并在它们之间进行负载平衡。这样做的好处是，客户端可以就连接到哪里以及以何种方式进行智能决策，但缺点是，这种决策分散到每个服务上，很难维护，但它不依赖于单个真实来源(单个服务注册中心)，如果失败，它可能会关闭整个集群。
架构通常看起来类似于这样:
**![](img/3ae6749f-1a67-4c2a-a798-0643429469ac.png)** 
# 服务器端发现模式
更常见的服务发现模式是集中式服务器端发现模式，其中使用 DNS 系统将客户端定向到容器。在这种查找服务的特殊方式中，容器从保存系统状态的服务注册表中注册和注销自己。这种状态反过来又用于填充域名系统条目，然后客户端联系这些条目来查找它试图连接的目标。虽然这个系统通常非常稳定和灵活，但它有时会遇到一些非常棘手的问题，这些问题通常会阻碍其他地方的域名系统，例如域名系统缓存，它使用过时的 IP 地址，直到**生存时间** ( **TTL** )到期，或者当应用本身缓存域名系统条目而不考虑更新时(NGINX 和 Java 应用以此而臭名昭著)。
**![](img/0158ef96-a636-4467-a81c-d45be72e55b0.png)** 
# 混合系统
这个分组包括了我们还没有涉及到的所有其他组合，但是它涵盖了使用工具 HAProxy 的最大部署类别，我们将在后面详细介绍。它基本上是将主机上的一个特定端口(即`:10101`)连接到集群中其他地方的负载平衡目标。
从客户的角度来看，他们连接到一个单一和稳定的位置，然后 HAProxy 将其无缝地隧道传输到正确的目标。
**![](img/57abb71c-bfcf-463e-aa3c-55808de1be35.png)** 
这个设置支持方法的拉和推刷新，并且非常有弹性，但是我们将在后面的章节中深入探讨这种类型的设置。
# 选择(不)可用选项
有了所有这些类型的服务发现，我们应该能够处理我们想要的任何容器扩展，但是我们需要记住一些非常重要的事情:几乎所有的服务发现工具都与用于部署和管理容器的系统紧密绑定(也称为容器编排)，因为对容器端点的更新通常只是编排系统实现的细节。因此，服务发现系统通常不像人们希望的那样可移植，所以这个基础设施的选择通常由您的编排工具决定(除了一些例外)。
# 容器编排
正如我们之前所暗示的，服务发现是以任何方式部署基于容器的系统的关键部分。如果没有这样的东西，您还不如使用裸机服务器，因为使用容器获得的大部分优势已经丧失。为了拥有一个有效的服务发现系统，您必须使用某种容器编排平台，幸运的是(或者可能不幸运？)，容器编排的选项已经以几乎惊人的速度萌芽！然而，总的来说，在我写这本书的时候(在我看来)，流行的和稳定的选择主要归结为以下几点:
*   DockerSwarm
*   KubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetes
*   阿帕奇 Mesos/马拉松
*   基于云的产品(亚马逊 ECS、谷歌容器引擎、Azure 容器服务等)
每一个都有自己的词汇表和基础结构部分连接的方式，因此在我们进一步讨论之前，我们需要了解与编排服务相关的词汇表，这些词汇表在所有这些服务之间大多是可重用的:
*   **节点**:Docker 引擎的一个实例。通常仅在谈论集群连接的实例时使用。
*   **服务**:由同一 Docker 映像的一个或多个运行实例组成的功能分组。
*   **任务**:正在运行的服务的特定且唯一的实例。这通常是一个单独运行的 Docker 容器。
*   **缩放**:为服务运行指定的任务数。这通常决定了一个服务可以支持多少吞吐量。
*   **管理节点**:负责集群管理和编排职责的节点。
*   **工作节点**:指定为任务运行器的节点。
# 国家和解
除了我们刚刚学习的字典，我们还需要了解几乎所有编排框架的底层算法，即状态协调，它值得在这里有自己的小部分。它的基本原理是一个非常简单的三步过程，如下所示:
*   用户设置每个服务或服务消失的期望计数。
*   流程编排框架了解将当前状态更改为所需状态(增量评估)需要什么。
*   执行将集群带到该状态所需的任何操作(称为状态协调)。
![](img/0f476518-a5ab-4f92-9396-66aeb62e6cde.png)
例如，如果我们当前在集群中有一个服务的五个正在运行的任务，并且将期望的状态更改为只有三个任务，我们的管理/编排系统将会看到区别是`-2`，从而选择两个随机任务并无缝地杀死它们。相反，如果我们有三个任务正在运行，而我们想要五个任务，管理/编排系统将看到期望的增量是`+2`，因此它将为它选择两个有可用资源的位置，并启动两个新任务。对两种状态转换的简短解释也应该有助于阐明这一过程:
```
Initial State: Service #1 (3 tasks), Service #2 (2 tasks)
Desired State: Service #1 (1 task),  Service #2 (4 tasks)
Reconciliation:
 - Kill 2 random Service #1 tasks
 - Start 2 Service #2 tasks on available nodes
New Initial State: Service #1 (1 tasks), Service #2 (4 tasks)
New Desired State: Service #1 (2 tasks), Service #2 (0 tasks)
Reconciliation:
 - Start 1 tasks of Service #1 on available node
 - Kill all 4 running tasks of Service #2
Final State: Service #1 (2 tasks), Service #2 (0 tasks)
```
使用这个非常简单但强大的逻辑，我们可以动态地扩展和缩减我们的服务，而不用担心中间阶段(在一定程度上)。在内部，保持和维护状态是一项非常困难的任务，以至于大多数编排框架都使用一个特殊的、高速的键值存储组件来为它们完成这项任务(即`etcd`、`ZooKeeper`和`Consul`)。
由于我们的系统只关心我们的当前状态在哪里以及它需要在哪里，所以该算法还可以作为构建弹性的系统，作为一个死节点，或者容器将减少应用的当前任务计数，并将自动触发状态转换回期望的计数。只要服务大部分是无状态的，并且您有运行新服务的资源，这些集群几乎可以抵御任何类型的故障，现在您有望看到几个简单的概念是如何结合在一起创建这样一个健壮的基础架构的。
随着我们对管理和编排框架基础知识的新理解，我们现在将简要了解我们的每一个可用选项(Docker Swarm、Kubernetes、Marathon)，并看看它们之间的比较。
# DockerSwarm
开箱即用，Docker 包含一个编排框架和一个管理平台，在架构上非常类似于刚才介绍的 Docker Swarm。Swarm 提供了一种非常快速和简单的方法，可以以最少的启动时间将扩展与您的平台集成在一起，并且考虑到它已经是 Docker 本身的一部分，您真的不需要太多其他东西就可以在集群环境中部署一组简单的服务。一个额外的好处是，它包含一个相当可靠的服务发现框架，具有多主机联网能力，并使用 TLS 进行节点间的通信。
Multi-host networking capability is the ability of a system to create a virtual network across multiple physical machines that are transparent from the point of view of the container. Using one of these, your containers can communicate with each other as if they were on the same physical network, simplifying the connectivity logic and reducing operational costs. We will look into this aspect of clustering in depth a bit later.
Docker Swarm 的集群配置可以是一个简单的 YAML 文件，但缺点是在编写本文时，图形用户界面工具有些缺乏，尽管 Portainer([https://Portainer . io](https://portainer.io))和船厂([https://shipyard-project.com](https://shipyard-project.com))变得相当不错，所以这可能不会成为太长时间的问题。此外，缺少一些大规模的操作工具，而且似乎 Swarm 的特性通常都在不断发展，因此处于不断变化的状态，所以如果您需要在小到大的规模上快速启动和运行一些东西，我个人的建议是使用这种类型的编排。随着该产品越来越成熟(由于 Docker Inc .在这背后投入了大量开发资源)，它可能会有显著的改进，我预计它将在许多方面与 Kubernetes 的功能相匹配，因此请密切关注其功能新闻。
# KubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetes
Kubernetes 是谷歌的云平台和编排引擎，目前提供的功能比 Swarm 多一点。Kubernetes 的设置要困难得多，因为您需要:一个主节点、一个节点(根据我们早期的字典是工作节点)和 pods(一个或多个容器的分组)。Pods 总是在同一个位置，同一个计划，所以处理它们的依赖关系稍微容易一点，但是你不会得到同样的隔离。这里需要记住的有趣的事情是，pod 中的所有容器共享相同的 IP 地址/端口，共享卷，并且通常位于相同的隔离组中。将 pod 想象成一个运行许多服务的小虚拟机几乎比许多并行运行的容器要好。
Kubernetes 最近获得了大量的社区支持，可能是使用中部署最多的集群编排和管理系统，尽管公平地说，找到确切的数字很困难，其中大多数部署在私有云中。考虑到谷歌已经使用这个系统有一段时间了，而且规模如此之大，它有一个相当可靠的记录，我可能会推荐它用于中大型规模。如果您不介意设置一切的开销，我认为更小的规模也是可以接受的，但是在这个领域，Docker Swarm 非常容易使用，因此使用 Kubernetes 来实现它通常是不切实际的。
At the time of writing this book, both Mesos and Docker EE have included capabilities to support Kubernetes so if you would want to bet on an orchestration engine, this would probably be it.
![](img/ca719d2e-6abe-4234-bc18-99aee75754fd.png)
# 阿帕奇 Mesos/马拉松
当你真的需要升级到 Twitter 和 Airbnb 的级别时，你可能需要比 Swarm 或 Kubernetes 更强大的东西，这也是 Mesos 和 Marathon 发挥作用的地方。Apache Mesos 实际上并没有考虑 Docker，而是作为一个通用的集群管理工具，为在其上运行的应用提供一致的资源管理。您可以相对轻松地从脚本、实际应用和多个平台(如 HDFS 和 Hadoop)运行任何东西。如今，对于这个平台上基于容器的编排和调度，马拉松是这里的常规目标。
As mentioned a little bit earlier, Kubernetes support has been now available again for Mesos after being in a broken state for a while so the suggestion of Marathon may change by the time you read this text.
马拉松作为一个应用运行(在这个词的非常宽松的意义上)在作为容器编排平台的 Mesos 之上，并提供各种各样的细节，例如一个伟大的 UI(尽管 Kubernetes 也有一个)、度量、约束、持久的卷(在撰写本文时是实验性的)和许多其他东西。作为一个平台，Mesos 和 Marathon 可能是处理数万节点范围内集群的最强大的组合，但是要将一切拼凑起来，除非您使用预打包的 DC/操作系统解决方案([https://dcos.io/](https://dcos.io/))，在我的经验中，与其他两个相比，启动和运行真的非常棘手。如果你需要覆盖中等至最大范围的秤，并增加灵活性，以便在其上运行其他平台(如 Chronos)，目前，我强烈推荐这种组合。
![](img/44ec58cd-4ddd-489b-95eb-64321a4f75b9.png)
# 基于云的产品
如果所有这些看起来都太麻烦，并且你不介意每个月为此支付高额溢价，那么所有大型云提供商都有某种基于容器的服务。由于这些在功能和特性集方面有很大的不同，所以在发布时，在这方面被放在这个页面上的任何东西都可能已经过时，我们对自己部署服务更感兴趣，所以如果您选择以下路线，我将为您留下相应产品的链接，这些产品将包含最新信息:
*   **亚马逊 ECS**:[https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)
*   **谷歌容器引擎**:[https://cloud.google.com/container-engine/](https://cloud.google.com/container-engine/)T4】
*   **微软 Azure** ( **Azure 容器服务**):[https://Azure . Microsoft . com/en-us/services/Container-Service/](https://azure.microsoft.com/en-us/services/container-service/)
*   **甲骨文容器云服务**:[https://cloud.oracle.com/container](https://cloud.oracle.com/container)
*   **Docker 风云**:[https://cloud.docker.com/](https://cloud.docker.com/)
*   可能还有很多我错过的
就我个人而言，由于易用性和经过测试的环境，我建议将这种方法用于中小型部署。如果您的需求超过了这些规模，那么在具有相同云服务提供商的**虚拟私有云** ( **VPCs** )上的可扩展虚拟机组上实施您的服务通常是可行的方法之一，因为您可以按照您的需求扩展的确切方式定制您的基础架构，尽管前期 DevOps 成本不小，因此请做出相应的决定。几乎所有云产品都需要记住的一个好的经验法则是，通过已经提供的简单工具，您可以获得更快的部署，同时抵消成本增加(通常是隐藏的)和缺乏灵活性/可定制性的影响。
# 实现编排
随着我们对编排和管理产品的新了解，是时候亲自尝试一下了。在我们的下一个练习中，我们将首先尝试使用 Docker Swarm 创建一个本地集群并玩一会儿，然后我们将尝试将上一章中的服务部署到它上面。
# 设置 Docker 集群
由于设置 Docker Swarm 集群的所有功能已经包含在 Docker 安装中，这实际上是一件非常容易的事情。让我们看看我们有哪些可用的命令:
```
$ docker swarm
Commands:
 init        Initialize a swarm
 join        Join a swarm as a node and/or manager
 join-token  Manage join tokens
 leave       Leave the swarm
 unlock      Unlock swarm
 unlock-key  Manage the unlock key
 update      Update the swarm
```