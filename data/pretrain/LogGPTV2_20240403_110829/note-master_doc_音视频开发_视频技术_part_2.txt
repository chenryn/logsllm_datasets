如果参考块与编码块直接没有移动，那就是一种帧间模式，称为 SKIP 模式，这种模式非常省码率，且压缩效率非常高
#### 变换量化
分离图像块的高频和低频信息：DCT变换使得高频信息在量化的过程中能够比较容易被减少
去除掉大部分高频信息：量化，其实就是一个除法操作。通过除法操作就可以将幅值变小，而高频信息幅值比较小，就比较容易被量化成 0，起到压缩的目的
![20230319144706](/assets/20230319144706.webp)
![20230319144742](/assets/20230319144742.webp)
### 编解码器
编码标准|块大小和划份方式|帧内编码|帧间编码|变换|熵编码|滤波和后处理
-|-|-|-|-|-|-
H264|最大16x16，可划分成8X16、16X8、8X8、4X8、8X4、4X4|8个方向模式+planar+DC模式|中值MVP|DCT 4X4/8X8|CAVLC、CABAC|去块滤波
H265|最大支持64x64,四叉树划分|33个方向模式+planar+DC模式|Merget模式，AMVP模式|DCT 4X4/8X8/16X16/32X32，DST 4X4|CABAC|去块滤波，SAO滤波
AV1|最大支持128x128,四叉树划分|56个方向模式+3个平滑模式+递归Filterlntra模式+色度CFL模式+调色板模式+帧内块拷贝模式|OBMC+扭曲运动补偿+高级复合预测+复合帧内预测|4x4-64x64正方形+1:2/2:1+1:4/4:1矩形DCT/ADST/flipADST/IDTX|多符号算术编码|去块滤波，CDEF，LR滤波，Frame超分，Film Grain
H264 和 H265 是需要专利费的，而 VP8 和 VP9 完全免费
在软件编码下的情况下，相同码率下，AV1 清晰度稍好于 H265，而 H264 最差，但是编码耗时则相反，AV1 最高，H265 次之，H264 速度最快
### h264
如果范围内帧大部分都是相同的，那刷新第一帧图像后，从第二帧开始，我们只要刷新正中心字母区域的内容即可。这个叫局部更新
![2022111202335](/assets/2022111202335.webp)
- I 帧作为关键帧，仅由帧内预测的宏块组成
- P 帧代表预测帧，通过使用已经编码的帧进行运动估计
- B 帧则可以参考自己前后出现的帧
H264 编码标准中规定，IDR 帧之后的帧不能再参考 IDR 帧之前的帧
压缩后的视频码率也就变得比常规图像更高一些，这个码率的波动通常时高时低，具有可变性，我们一般称之为可变码率（VBR）
#### 封装
容器格式：在容器格式的内部会同时存储音频、视频的数据
- 交错存储：对顺序读取比较友好
- 分区存储：这种对磁盘、网络流不友好，因为需要不断跳跃读取数据
#### GOP
GOP（图像组）：从一个 IDR 帧开始到下一个 IDR 帧的前一帧为止，这个间隔叫做关键帧间隔
![20230315205104](/assets/20230315205104.webp)
GOP 太大，也会导致 IDR 帧距离太大，点播场景时进行视频的 seek 操作就会不方便
#### Slice
为了并行编码设计的，可以将一帧图像划分成几个 Slice，Slice 之间相互独立，就可以多线程并行对多个 Slice 进行编码
#### 码流结构
Annexb格式：
使用起始码来表示一个编码数据的开始，一种是 4 字节的“00 00 00 01”，一种是 3 字节的“00 00 01”，为了避免编码的数据中有跟起始码一样，需要做一下替换
- “00 00 00”修改为“00 00 03 00”
- “00 00 01”修改为“00 00 03 01”
- “00 00 02”修改为“00 00 03 02”
- “00 00 03”修改为“00 00 03 03”
![20230315205950](/assets/20230315205950.webp)
MP4 格式没有起始码，而是在图像编码数据的开始使用了 4 个字节作为长度标识
![20230315210250](/assets/20230315210250.webp)
帧在码流中实际上是以 Slice 的形式呈现的，H264 的码流主要是由 SPS、PPS、I Slice、P Slice和B Slice 组成的
为了区分这几种数据，使用一个名为NALU的结构来封装数据
![20230315210752](/assets/20230315210752.webp)
## 视频传输
### RTP&RTCP
视频码流被打包成一个个 RTP 包进行发送，同时这个协议还能实现告知当前视频码流是哪种视频编码标准，按照什么速度播放视频等额外的信息
![RTP包头部](/assets/20230319145533.webp)
宇段              | 占用位数             | 含义
--------------- | ---------------- | -----------------------------------------------------------------------------------------------------------------
V               | 2                | RTP版本号。当前版本号必须是2
P               | 1                | 填充标志位。当为1时，表示在RTP包的最后面有若干个填充宇节。注意填充字节只用于字节对齐填充，不是视频数据
X               | 1                | 扩展标志位。当为1时，表示在RTP默认头部后面会有一个用于自定义的扩展头部
СС              | 4                | CSRC个数。表示CSRC标识符个数。
M               | 1                | Marker位。对于不同的有效载荷Marker位含义不同。对于视频，表示当前RTP包是一帧的最后一个包。
Payload Type    | 7                | 有效载荷类型。用于说明RTP报文中有效载荷的类型，比如说可以是H264、VP8等，用于接收端进行解析RTP的有效载荷
Sequence Number | 16               | 序列号。用于表示当前RTP包的序号，每发送一个RTP包，序 列号加1。它是RTP包的标识。接收端可以使用它来告诉发送端RTP包丢失了，要求发送端重传。序列号的初始值是随机的
Timestamp       | 32               | 时间戳。时问戳反映了该RTP包所属视频帧的采样时间。接收 端使用时间戳来控制播放速度和音视频同步。使用90000Hz的时间基（就是说时间戳的单位是1/90000秒）
SSRC            | 32               | 同步信源。比如说当前RTP用于传输H264视频数据和OPUS音频数据。H264的RTP包使用同一个SSRC，OPUS的RTP包使用同一个SSRC。接收端根据SSRC标识符来区分当前RTP包是H264RTP包还是OPUSRTP包
CSRCs           | 每一个占用32位，数量由CC指定 | 提供信源，可以有0~15个CSRC。每个CSRC标识了包含在RTP 包有效载荷中的所有提供信源。主要用在混合器中
RTCP则是用来辅助 RTP 协议使用的，RTCP 报文有很多种，分别负责不同的功能。常用的报文有发送端报告（SR）、接收端报告（RR）、RTP 反馈报告（RTPFB）等
H264 RTP 打包：
![单 NALU 封包方式](/assets/20230319152833.webp)
![组合封包方式](/assets/20230319152857.webp)
![分片封包方式](/assets/20230319152931.webp)
使用不同打包方式取决于打包完成之后的RTP包是否超过1500字节，这个主要跟UDP的MTU有关
## 带宽预测
### 基于延迟预测
通过计算一组 RTP 包它们的发送时长和接收时长，来判断当前延时的变化趋势，并根据当前的延时变化趋势来调整更新预测的带宽值
计算延迟：
发送端与接受端分别记录包的发送时间与接受时间，来计算出前后两组包之间的发送时长和接收时长，接受端再通过Transport-CC 报文把统计信息发送给发送端
为了过滤掉噪声，引入一个叫做 Trendline Filter 的滤波器，它保存了 20 个最近的延时数据，通过线性回归的方式平滑掉延迟，避免偶发的噪声导致尖刺得到一个延迟趋势k
网络状态判断：
将延时趋势 k 乘以一个固定增益 4 和包组的数量（包组数量最大是 60）作为当前的修改后延时值。将当前的修改后延时值跟延时阈值进行比较，然后根据比较的结果来判断网络状态（过载、正常、欠载）
带宽调整更新：