2× improvement.
4 DIVISION AND TRUNCATION
,(cid:0)4
(cid:1)-OT1). Two calls to Π𝜂+1
(cid:1)-OT1)-hybrid.
0 , ⟨xt⟩𝐵
0 ⊕ 𝑗∗
MILL
1
1
We present our results on secure implementations of division in
the ring by a positive integer and truncation (division by power-
of-2) that are bitwise equivalent to the corresponding cleartext
computation. We begin with closed form expressions for each of
these followed by secure protocols that use them.
4.1 Expressing general division and truncation
using arithmetic over secret shares
Let idiv : Z × Z → Z denote signed integer division, where the
quotient is rounded towards −∞ and the sign of the remainder is
the same as that of divisor. We denote division of a ring element by
a positive integer using rdiv : Z𝑛 × Z → Z𝑛 defined as
rdiv(𝑎, 𝑑) ≜ idiv(𝑎𝑢 − 1{𝑎𝑢 ≥ ⌈𝑛/2⌉} · 𝑛, 𝑑) mod 𝑛,
(2)
where the integer 𝑎𝑢 ∈ {0, 1, . . . , 𝑛 − 1} is the unsigned representa-
tion of 𝑎 ∈ Z𝑛 lifted to integers and 0 < 𝑑 < 𝑛. For brevity, we use
𝑥 =𝑛 𝑦 to denote 𝑥 mod 𝑛 = 𝑦 mod 𝑛.
0 , ⟨𝑎⟩𝑛
Theorem 4.1. (Division of ring element by positive integer). Let
1 ∈ Z𝑛, for some 𝑛 = 𝑛1 · 𝑑 + 𝑛0 ∈ Z,
the shares of 𝑎 ∈ Z𝑛 be ⟨𝑎⟩𝑛
where 𝑛0, 𝑛1, 𝑑 ∈ Z and 0 ≤ 𝑛0 < 𝑑 < 𝑛.
Let the unsigned representation of 𝑎, ⟨𝑎⟩𝑛
0 , ⟨𝑎⟩𝑛
1 in Z𝑛 lifted to inte-
gers be 𝑎𝑢, 𝑎0, 𝑎1 ∈ {0, 1, . . . , 𝑛 − 1}, respectively, such that 𝑎0 =
0 · 𝑑 + 𝑎0
1 ∈ Z and
0 and 𝑎1 = 𝑎1
𝑎1
1, where 𝑎1
0, 𝑎1
0, 𝑎0
1 < 𝑑. Let 𝑛′ = ⌈𝑛/2⌉ ∈ Z. Define corr, 𝐴, 𝐵, 𝐶 ∈ Z
0 ≤ 𝑎0
0, 𝑎0
1 · 𝑑 + 𝑎0
1, 𝑎0
7
as follows:
 −1
corr =
(𝑎𝑢 ≥ 𝑛′) ∧ (𝑎0 < 𝑛′) ∧ (𝑎1 < 𝑛′)
(𝑎𝑢 < 𝑛′) ∧ (𝑎0 ≥ 𝑛′) ∧ (𝑎1 ≥ 𝑛′)
1
0
1 − (1{𝑎0 ≥ 𝑛′} + 1{𝑎1 ≥ 𝑛′} − corr) · 𝑛0.
0 + 𝑎0
𝐴 = 𝑎0
0 − 1{𝑎0 ≥ 𝑛′} · 𝑛0, 𝑑) + idiv(𝑎0
𝐵 = idiv(𝑎0
𝐶 = 1{𝐴 < 𝑑} + 1{𝐴 < 0} + 1{𝐴 < −𝑑}
otherwise
,
1 − 1{𝑎1 ≥ 𝑛′} · 𝑛0, 𝑑)
Then, we have:
rdiv(⟨𝑎⟩𝑛
0 , 𝑑) + rdiv(⟨𝑎⟩𝑛
1 , 𝑑) + (corr · 𝑛1 + 1 − 𝐶 − 𝐵) =𝑛 rdiv(𝑎, 𝑑).
The proof of the above theorem is presented in Appendix C.
Special Case of truncation for ℓ bit integers. The expression
4.1.1
above can be simplified for the special case of division by 2𝑠 of ℓ-bit
integers, i.e., arithmetic right shift with 𝑠 (≫ 𝑠), as follows:
0 , ⟨𝑎⟩𝐿
1 · 2𝑠 + 𝑎0
0 and 𝑎1 = 𝑎1
Corollary 4.2. (Truncation for ℓ-bit integers). Let the shares
of 𝑎 ∈ Z𝐿 be ⟨𝑎⟩𝐿
1 ∈ Z𝐿. Let the unsigned representation of
1 in Z𝐿 lifted to integers be 𝑎𝑢, 𝑎0, 𝑎1 ∈ {0, 1, . . . , 2ℓ − 1},
0 , ⟨𝑎⟩𝐿
𝑎, ⟨𝑎⟩𝐿
0 · 2𝑠 + 𝑎0
respectively, such that 𝑎0 = 𝑎1
1, where
1 ∈ Z and 0 ≤ 𝑎0
1 < 2𝑠. Let corr ∈ Z be defined as in
1, 𝑎0
0, 𝑎0
0, 𝑎1
𝑎1
0, 𝑎0
Theorem 4.1. Then, we have:
(𝑎0 ≫ 𝑠) + (𝑎1 ≫ 𝑠) + corr · 2ℓ−𝑠 + 1{𝑎0
1 ≥ 2𝑠} =𝐿 (𝑎 ≫ 𝑠).
Proof. The corollary follows directly from Theorem 4.1 as fol-
lows: First, (𝑎 ≫ 𝑠) = rdiv(𝑎, 2𝑠). Next, 𝑛 = 2ℓ, 𝑛1 = 2ℓ−𝑠, and
1, 𝐵 = 0 and 𝐶 = 1{𝐴 < 2𝑠} =
𝑛0 = 0. Using these, we get 𝐴 = 𝑎0
1{𝑎0
□
4.2 Protocols for division
1 < 2𝑠}.
0 + 𝑎0
0 + 𝑎0
0 + 𝑎0
In this section, we describe our protocols for division in different
settings. We first describe a protocol for the simplest case of trun-
cation for ℓ-bit integers followed by a protocol for general division
in Z𝑛 by a positive integer (Section 4.2.2). Finally, we discuss an-
other simpler case of truncation, which allows us to do better than
general division for rings with a special structure (Section 4.2.3).
4.2.1 Protocol for truncation of ℓ-bit integer. Let F int,ℓ,𝑠
Trunc be
the functionality that takes arithmetic shares of 𝑎 as input and
returns arithmetic shares of 𝑎 ≫ 𝑠 as output. In this work, we
give a protocol (Algorithm 5) that realizes the functionality F int,ℓ,𝑠
Trunc
correctly building on Corollary 4.2.
Intuition. Parties 𝑃0 & 𝑃1 first invoke an instance of F int,ℓ
DReLU (where
one party locally flips its share of DReLU(𝑎)) to get boolean shares
⟨𝑚⟩𝐵
lating ⟨corr⟩𝐿
Next, they use an instance of F 𝑠
𝑐 = 1{𝑎0
0 + 𝑎0
using a call to F 𝐿
Correctness and Security. For any 𝑧 ∈ Z𝐿, MSB(𝑧) = 1{𝑧𝑢 ≥ 2ℓ−1},
where 𝑧𝑢 is unsigned representation of 𝑧 lifted to integers. First, note
0 , ⟨𝑚⟩𝐵
that Reconst𝐵(⟨𝑚⟩𝐵
1 ) = MSB(𝑎)
DReLU. Next, we show that Reconst𝐿(⟨corr⟩𝐿
by correctness of F int,ℓ
0 ,
1 ) = corr, as defined in Corollary 4.2. Let 𝑥𝑏 = MSB(⟨𝑎⟩𝐿
𝑏)
⟨corr⟩𝐿
𝑏 , i.e., arithmetic shares of corr term in Corollary 4.2.
MILL to compute boolean shares of
1 ≥ 2𝑠}. Finally, they compute arithmetic shares of 𝑐
𝑏 of MSB(𝑎). Using these shares, they use a(cid:0)4
(cid:1)-OTℓ for calcu-
1 ) = 1⊕Reconst𝐵(⟨𝛼⟩𝐵
B2A (Algorithm 7).
0 , ⟨𝛼⟩𝐵
1
𝑏 ∈ Z be as defined in Corollary 4.2.
, 𝑎1
𝑏 to learn
0 ⊕ 𝑗0 ⊕ 𝑗1) s.t.
𝑏 , where 𝑎 ∈ Z𝐿.
𝑏 s.t. 𝑧 = 𝑎 ≫ 𝑠.
Algorithm 5 Truncation, Πint,ℓ,𝑠
Trunc:
Input: For 𝑏 ∈ {0, 1}, 𝑃𝑏 holds ⟨𝑎⟩𝐿
Output: For 𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨𝑧⟩𝐿
1: For 𝑏 ∈ {0, 1}, let 𝑎𝑏, 𝑎0
2: For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes F int,ℓ
𝑏 . Party 𝑃𝑏 sets ⟨𝑚⟩𝐵
output ⟨𝛼⟩𝐵
𝑏
DReLU with input ⟨𝑎⟩𝐿
𝑏 = ⟨𝛼⟩𝐵
𝑏 ⊕ 𝑏.
3: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets 𝑥𝑏 = MSB(⟨𝑎⟩𝐿
𝑏).
4: 𝑃0 samples ⟨corr⟩𝐿
$← Z2ℓ .
0
5: for 𝑗 = {00, 01, 10, 11} do
𝑃0 computes 𝑡 𝑗 = (⟨𝑚⟩𝐵
6:
if 𝑡 𝑗 ∧ 1{𝑥0 = 0} then
𝑃0 sets 𝑠 𝑗 =𝐿 −⟨corr⟩𝐿
0 − 1.
else if 𝑡 𝑗 ∧ 1{𝑥0 = 1} then
𝑃0 sets 𝑠 𝑗 =𝐿 −⟨corr⟩𝐿
0 + 1.
else
𝑃0 sets 𝑠 𝑗 =𝐿 −⟨corr⟩𝐿
0 .
0 ⊕ 𝑗0 ⊕ 𝑥0) ∧ (⟨𝑚⟩𝐵
𝑗 = ( 𝑗0|| 𝑗1).
7:
8:
9:
10:
11:
12:
13:
14: end for
1
end if
15: 𝑃0 & 𝑃1 invoke an instance of(cid:0)4
(cid:1)-OTℓ, where 𝑃0 is the sender
0 ⊕ ⟨𝑚⟩𝐵
𝑏 = (⟨𝑎⟩𝐿
𝑏 ≫ 𝑠) + ⟨corr⟩𝐿
18: 𝑃𝑏 outputs ⟨𝑧⟩𝐿
𝑏 and learns ⟨𝑑⟩𝐿
𝑏 .
and 𝑃1’s input as 𝑎0
input ⟨𝑐⟩𝐵
𝑏 · 2ℓ−𝑠 + ⟨𝑑⟩𝐿
1 ||𝑥1). Then, 𝑡 𝑗∗ = (⟨𝑚⟩𝐵
16: 𝑃0 & 𝑃1 invoke an instance of F 𝑠
17: For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes an instance of F 𝐿
with inputs {𝑠 𝑗} 𝑗 and 𝑃1 is the receiver with input ⟨𝑚⟩𝐵
and learns ⟨corr⟩𝐿
1 .
1. For 𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨𝑐⟩𝐵
𝑏 .
1 ||𝑥1
MILL with 𝑃0’s input as 2𝑠−1−𝑎0
0
B2A (𝐿 = 2ℓ) with
𝑏 , 𝑏 ∈ {0, 1}.
for 𝑏 ∈ {0, 1}, and let 𝑗∗ = (⟨𝑚⟩𝐵
0 ⊕ ⟨𝑚⟩𝐵
1 ⊕
𝑥0) ∧ (⟨𝑚⟩𝐵
1 ⊕ 𝑥1) = (MSB(𝑎) ⊕ 𝑥0) ∧ (MSB(𝑎) ⊕ 𝑥1). Now,
𝑡 𝑗∗ = 1 implies that we are in one of the first two cases of expression
for corr – which case we are in can be checked using 𝑥0 (steps 7
0 + corr = ⟨corr⟩𝐿
& 9). Now it is easy to see that 𝑠 𝑗∗ = −⟨corr⟩𝐿
1 .
1 ) = ⟨𝑐⟩𝐵
0 ⊕
0 , ⟨𝑐⟩𝐵
1 ≥ 2𝑠}. Given boolean shares of 𝑐, step 17, cre-
⟨𝑐⟩𝐵
ates arithmetic shares of the same using an instance of F 𝐿
B2A. Since
⟨corr⟩𝐿
0 is uniformly random, security of our protocol is easy to see
in (F int,ℓ
B2A)-hybrid.
, F 𝐿
DReLU
Communication complexity. Πint,ℓ,𝑠
Trunc involves a single call each to
F int,ℓ
MILL. Hence, communication required
is < 𝜆ℓ + 2𝜆 + 19ℓ+ communication for F 𝑠
DReLU
MILL that depends on
parameter 𝑠. For ℓ = 32 and 𝑠 = 12, our concrete communication is
MILL inside Πint,32
4310 bits (using 𝑚 = 7 for Π12
DReLU)
as opposed to 24064 bits for garbled circuits.
(cid:1)-OTℓ, F 𝑠
,(cid:0)4
(cid:1)-OTℓ, F 𝐿
Next, by correctness of F 𝑠
1 = 1{𝑎0
MILL, 𝑐 = Reconst𝐵(⟨𝑐⟩𝐵
MILL as well as Π31
B2A and F 𝑠
,(cid:0)4
0 + 𝑎0
MILL
1
1
4.2.2 Protocol for division in ring. Let F ring,𝑛,𝑑
be the func-
tionality for division that takes arithmetic shares of 𝑎 as input and
returns arithmetic shares of rdiv(𝑎, 𝑑) as output. Our protocol builds
on our closed form expression from Theorem 4.1. We note that ℓ-bit
integers is a special case of Z𝑛 and we use the same protocol for
DIV
8
division of an element in Z𝐿 by a positive integer.
Intuition. This protocol is similar to the previous protocol for trun-
cation and uses the same logic to compute shares of corr term. Most