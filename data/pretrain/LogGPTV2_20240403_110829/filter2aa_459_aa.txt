Atlassian Confluence（简称Confluence）是⼀个专业的wiki程序。它是⼀个知识管理的⼯具，通过它
可以实现团队成员之间的协作和知识共享。本次漏洞为 Ognl 表达式注⼊，攻击者可未授权通过 Ognl 
表达式在服务器上执⾏任意代码。
影响版本：
version  create database fluence7123 CHARACTER SET utf8 COLLATE utf8_bin;
mysql> SET GLOBAL tx_isolation='READ-COMMITTED';
先来看下 官⽅漏洞描述 ，这⾥注意到官⽅说了本次漏洞为 Ognl 表达式注⼊，CVE 编号为 CVE-2021-
26084 ，7.12.x 的修复版本为 7.12.5 。
那么在翻看通告下⾯评论的时候，发现这个漏洞之前在 7.12.4 版本就修复过⼀次，CVE 编号为 CVE-
2021-26077 ，个⼈猜测之前的修复代码可能存在绕过。这⾥为了避免修复代码的⼲扰，选择 7.12.3 
（完全没修复）和 7.12.5 （完全修）这两个版本进⾏代码差异对⽐。
补丁分析
继续翻看信息，会发现官⽅还出了 离线补丁 （内容⼤致如下）。看了下⼤概，补丁基本上是字符串匹配
替换，修改的都是 .vm 后缀的⽂件。
在安装好 7.12.3、7.12.5 两个版本后，先⽤ find 命令找到 .vm ⽂件所在的⽬录。
然后使⽤ diff 命令对⽐⽬录下的所有⽂件。可以看到，修复⽅式基本上就是把 $ 符号给去掉。
.vm 后缀的⽂件，⼀般是 velocity 模板⽂件，$action 则是 velocity 上下⽂中的⼀个变量，⼀般在进
⾏模板渲染前会设置到 context ⾥⾯。这⾥的 $action 则是当前访问路由对应的具体 Action 类。 
$action.backupPath 则表⽰取 Action 类的 backupPath 属性值。
寻找路由
这⾥我们选择第⼀处模板 /admin/editdailybackupsettings.vm 来分析。⾸先，我们得先找到这个模
板对应的 action 。通过路径名，我们可以猜测该功能是管理员才有的类似编辑备份设置的功能。这⾥
也确实在后台找到了这⼀功能，但是这⼀功能默认不开启。按照 官⽅⽂档 开启即可。
点击编辑并抓包，数据包⼤致如下：
我们使⽤ grep -Rni editdailybackupsettings 命令全局搜索，看下这个路由是否配置在某个⽂件⾥
⾯。不过在执⾏该命令之前，我们需要先将所有的 jar ⽂件解压。因为，有些时候⼀些配置⽂件会放置
在 jar 包⾥⾯，grep 命令是⽆法精确搜索 jar ⾥⾯的字符串。很快我们便发现 confluence-
7.12.3.jar!/xwork.xml ⽂件，⾥⾯配置了不同请求对应的具体模板。直接在⽂件中搜 
/admin/editdailybackupsettings.vm ，命中的有3条。
按照配置⽂件，我们可以清晰的看到路由与模板的关系。假设我们访问 
/admin/editdailybackupsettings.action ，那么程序将会调⽤ 
com.atlassian.confluence.admin.actions.DailyBackupAdminAction#doDefault() ⽅法。如果
该⽅法执⾏完返回 success ，那么就由 /admin/editdailybackupsettings.vm 模板渲染结果。所
以， $action.backupPath ，对应的就是 DailyBackupAdminAction#backupPath 属性。
那我们怎么给 backupPath 属性赋值呢？我们去看 DailyBackupAdminAction 继承的类，发现其继
承的是 Struts 框架的 ActionSupport 类。那么我们直接通过 HTTP 请求传相同名字的参数即可。
POST /admin/editdailybackupsettings.action HTTP/1.1
Host: 127.0.0.1:11111
Content-Length: 74
Cookie: JSESSIONID=8F0BED13740956694A28DE2DFD62AA92
Connection: close
atl_token=e93f57dc0294d03f2c54b6651cfd2f30ab23f68d&edit=%E7%BC%96%E8%BE%91
tag标签
搞清楚路由和模板的关系后，我们再仔细观察刚才的补丁，就会发现所有修复的地⽅都在 #tag(xxx) 。
这个 tag 有可能是宏，也有可能是标签。通过阅读官⽅⽂档，发现这并不是 velocity ⾃带的语法。所
以， #tag(xxx) 很有可能是⾃定义的宏或标签，我们需要先找到它。 velocity ⾃定义宏的写法如下：
但是通过全局搜索，我们并没有找到类似的定义，于是转向⾃定义标签。在 velocity 中，⾃定义的标签
需要继承 org.apache.velocity.runtime.directive.Directive 类，并且需要在 velocity.properties 
⽂件中配置。通过搜索，确实在 /WEB-INF/classes/velocity.properties  中找到了 tag 指令对应的
类： com.opensymphony.webwork.views.velocity.TagDirective 。
velocity ⾃定义的标签必须实现 Directive 类的 getName()、getType()、render() 三个⽅法。
getName() ⽅法表⽰标签的名字；getType() ⽅法则表⽰是⾏标签（LINE） 还是块标签（BLOCK）；
render() ⽅法则⽤来实现标签的具体处理逻辑。所以我们在 TagDirective#render() 中下断点，看看
这个标签是如何处理的。
漏洞触发
#macro( tag )
#end
#tag()
这⾥我们在⾃定义的路径中注⼊ Ognl 表达式，点击提交（数据包如下），会发现提⽰ Backup path 
specified does not exist. 
对应数据包如下：
这是因为在 com.atlassian.confluence.admin.actions.DailyBackupAdminAction#validate() 
中，会对路径是否存在进⾏检查。在 Windows 系统中，我们可以使⽤ C:/Windows/{1+1}/../temp 绕
过检查，而 Unix 系统则不⾏。我的运⾏环境是 Linux ，所以直接在调试的时候⼿动绕过这个判断就⾏
（在运⾏到 !backupPathFile.exists() 这⼀⾏的时候，执⾏ backupPathFile=new File("/tmp"); 
）。
POST /admin/doeditdailybackupsettings.action HTTP/1.1
Host: 127.0.0.1:11111
Content-Length: 222
Cookie: JSESSIONID=988EA67C6E5E0EFF5C84EB3AC4DBAB2E
Connection: close