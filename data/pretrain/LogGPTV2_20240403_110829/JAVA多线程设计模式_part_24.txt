## Page 240
Future
您这张提货单
第9章
先给
---
## Page 241
糕的操作。如果其他线程已经处理完毕了，那调用 getContent 方法的线程就可以马
是说，这个返回值，不是蛋糕本身，而是提货单（Future 参与者）。
事实上，用来获取执行结果的程序，现在其实正在其他线程刚开始执行而己。也就
时，
章）。
则继续等待到执行结果出现为上。
取蛋糕--样，如果已经有执行结果了，就可以马上拿到数据，如果执行结果还没好，
就是Future 参与者。
而获取·张替代的“提货单”。因为获取提货单不需要花时间，这时这个“提货单
您的蛋糕已经好了”，并把蛋糕交给了我。
米”
我--张提货单。黄昏后，我就拿着这张提货单到蛋糕店取货。店员说了--声“先生
226
范例程序
张取Future 参与者的线程，会在事斤再去获取执行结果。就好像拿提货单去领
Future Pattern
这样，使用 data的 getContent方法，获取执行结果。这就像是拿提货单去换蛋
·-段时间以后，这时才像
加以现金化的一种契约凭据。
Future 参与者，可说是蛋糕的提货单、剧场的预售票、签名会的句柄，是将“未
data.getContent {)
方法是有返回值（data）的。但是，这个返回值 data，并不是程序执行的结果。
建立一个新的线程”的范例程序。当时，我们送出的请求像是这样：
在 Thread-Per-MessagePatterm（第7章）中，我们已经研究过“收到每个请求
我们先来看 Future Pattern 的范例程序。
建议读者在阅读本章之前，务必先看过 Thread-Per-Messagc Pattern（第7
而 Future Pattem中，送出请求后，马上就要获取返回值。也就是像：
只有请求，而不用获取返回值，
host.request(l0, 'A');
假设有－-个执行起来需要花-些时间的方法，我们就不要等待执行结果出来了
future是“未来”、“（经济学用语”）期货”的意思。
这-章要学习的是Future Patten.
我去蛋糕店买蛋糕。
Data data = host.requeat(lo, 'A');
，下订单以后，店员请我“请在天黑以后再来店取货”，并给
---
## Page 242
Data
上退出这个方法，如果还没处理完毕，就要等待到处理好为止。
RealData
FutureData
Host
Main
后。该线程会调用setReuldata
RealData的实例则由其他线程建立。当实例建立
requcst会马.L.返[FuureData的实例：
范例程序的类图和顺序图，如图9-1和图9-2 所示。
类与接口的说明如表9-1 所示。
笔者在这里稍微偷跑了·下，以上就是范例程序所表达的Future Pattern运行概
名
Main
称
Requests now 
ReadData 的提货单类，m RealData 实例则由其他线程建立
表达数据访问方式的接il，FutureData 与 RealData 都实现这个接口
对请求返同FutureData 实例的类
对 Host 送出请求，获取数据的类
达实际数据的类，
Requesl
图9-1
Host
表9-1
执行构造器需要花—
范例程序的类阁
类与接口一览表
Creates 
说
getContent{gurded}
realdata
Creates-
Future-
Futurebata
一些时间
盈
c
Data
-先给您这张提货单
getContent
content
Readate
第9章
---
## Page 243
Main类
228
Main类（List 9-1)会调用3次request方法。而获取3个Data类型的返回值（datal、
Main
图9.2
ley
范例程序的顺序图
: Thread
线产
内
---
## Page 244
线程”，就像是做蛋糕的蛋糕师父。
RealData 的实例需要花费一些时间，不过是交给新的线程进行的。这里所谓“新的
这个操作并不特别花费时间。future 实例会成为这个方法的返回值。
Host 类
我们真正想要的东西（request 方法处理的结果)。也就是拿提货单去领蛋糕。
的工作。
时间，也就相当于蛋糕的提货单。所以在这里我们获取了3张提货单。
data2、data3），这些返回值，实际上是FutureData 的实例，获取这些实例并不花费
接着建立新的线程并启动，在这里产生 RealData 的实例（realdata）。产生出
Host类（List 9-2）的request 方法·开始会建立出FutureData 的实例（future）。
之后，程序 sleep 约 2 秒。在这里是表现程序可以在这个时候继续做一些其他
新的线程会努力地产生出 RealData 实例（realdata）。当 realdata 建立后，就调
之后，再对刚才收到的返回值 datal、data2、data3 使用 getContent 方法，获取
public class Main {
List 9-1
public static void main(String[] args) {
 System.cut.println("main FND");
System.out.printin("data3 = " + data3.getContent ());
System.out.println("data2 =
System.out-println("datal =
System.out.printin("main otherJob END");
1
System.out.println("main otherJob BEGIN");
Data data3 = host.request(30.
Data data2 = host.request(20,
Data datal = host.request(l0, 'A');
Host host = new Hostl);
System.out.println("main BEGiN");
 catch (InterruptedExceptior é)(
Thread.sleep(2000);
Main 类(Main.java)
" + data2.getContent());
" + datal.getContent());
'C'};
'B');
Future-
一先给您这张提货单
9
章
---
## Page 245
以调用 request 的线程可以马上退出这个方法。
230
是 future 实例。这就好像是拿到提货单的客人，就不等待蛋糕做好，而马上回家一
好，等待客人来领取一样。
设置操作在一段时间后（未来）才会执行。对future 设置realdata，就像把蛋糕准备
用 setRealData 方法，设置给 future。因为建立 realdata 需要花一些时间，所以这个
样。
这3个操作，（跟建立RealData 实例的工作相较之下，）都不花费什么时间。所
调用request 方法的线程（主线程）启动新的线程以后，便马上退出，返回值则
END"I;
BEGIN"}；
public class Host ↑
总之，调用request 的线程（也就是买蛋糕的客人），作了下面3 个操作：
（3）取回FutureData实例，作为返回值。
（2）为了建立RcalData 的实例，
（1）建立FutureData 的实例；
List 9-2
 public Data request(final int count, final char c) ↑
System.out.println("
return
//(3)
System.out.printin("
).start();
mew
final FutureData future = new FutureData();
//[1]
public void run()
(2）为了建立ReaiData 的实例。启动新的线程
Thread()
Host 类 (Host.java)
 futuré;
future.setRealData(realdata);
RealData realdata = new RealData{count, c);
取回 FutureData 实例，作为返回值
建文 FutureData 的实例
启动新的线程;
‘ + uno + )sanbax
request(" + count + "， " + c + ") 
---
## Page 246
realdata，所以在这里使用ready 作为防卫条件，使用到了Guarded Suspension Pattern
是绝对必要的)，
使用了Balking Patterm（第4章），防上 setRealData被调用两次以”：（这个措施并不
醒所有在 getContert 方法里等待的线程。
值赋给realdata字段了（蛋糕做好了），
这个字段，要使用 setRealData 方法。
FutureData 类
类与 RealData类都实现这个接口.
Data接口
（第3竞）。接着后面的
补充说明：final与匿名内部类
补充说明：参数与局部变量是线程所拥有的
geiContent 方法用来获取实际的数据。因为必须等待 setRealData 方法设置
sctRealData 方法用来将 RcalData 的实例赋给 realdata 字段。因为这时表示
ready 学段表示是否已经有值赋给 realdata 字段了。当值为 ture 时，表示已经有
匿名内部类里使用。
全的。这是因为request 里使用的参数（count.c）与局部变量（future）都是调
setRealData 方法，会被 Host 类的 request 方法中所建立的新线程调用。在这里
 return realdata.getContent ();
realdata 字段是用来存放未来将建立好的 RealData 实例。要将 ReaiData 指定给
FutureData类（List 9-4）是表示“提货单”的类。
request 方法的参数（count、c）与局部变量（future）声明成 final，是为了在
request 方法虽然不是 synchronized的、但就算从多个线程同时调用，仍是安
public interface Data l
Data(List 9-3）是用来表现数据的访问方式（getContent 方法）的接口。FutureData
List 9-3
 publie abstract Sering getcontent(l;
Data 接 (Data.java)
Future—-先给您这张提货单
9
草
---
## Page 247
使用了 sleep。好不容易建立IH的 String 实例，则存放在 content 字段里。
出一个字符串，包含count 个c字符。为了表现出方法需要花费－些时间，在这里
RealData 类
您的蛋糕”的卢音。
还是需要在蛋糕店里等待，而notifyAli，就是蛋糕店老板l1中“计您久等了，这是
setRealData 方法里调用的 notifyAll 唤醒。
RealData 的实例还没有好，那就会 wait 到好了为止。在 wait 状态里的线程，会被
232
（delegation）给了 RealData 类的 getContent 方法：
如果 RealData 的实例已经设置了，那就会马.上从 getContent 方法退山。如果
拿到提货单以后，如果马上就去领蛋糕，
public class FutureData implements Data
语句，则是返回实际的数据。FutureData 类 getContent 方法，将I作委托
List 9.4
public synchronized String getcontent() {
public synchronized void setRealData(RealData realdata) {
private boolean ready = false;
private RealJata realdata = null;
return realdata.getContent();
while (!ready)
notifyAll();
this.ready = true;
if 
this.realdata
{ready) {
return;
FutureData 类 (FutureData.java)
catch (InrerruptedException e) (
wait()
// balk
realdata;
可能蛋糕还没有做好。这个时候客人
---
## Page 248
内容（data3）。
显示出内容（datal、data2）．如果还没有建立好，就会等待到建立好后，才显示出
当主线程在进行其他操作时，我们可以看到 RealData 的实例一个接一个被建立
Thread-Per-MessagePattern（第7章）的范例程序是一-样的（参考图7-2）。
程序多线程化后仍可提高执行性能。
到实例建立好为止”的线程控制操作。RealData 类井不需要考虑多线程环境。
而接下来主线程调用了getContent 方法。若 ReadData 已经建立好了，就会马上
不同的是，这个范例程序中，我们还能看到 RealData 的实例建立的状况，
执行范例如图 9-3 所示。3次的调用request 方法的操作都是马上结束，这点与
（N ++
public class RealData implements Data ↑
请注意这个类完全没有用到 synchronized。也就是说，这个类片不处理“等待
getContent 方法做的事，只有将 content 字段的值返回而己。
+ C+"} BEGIN"};
List 9-5
public String getContenti) l
public RealData(int count, char c)
 private final String content:
 this.content = new String(buffer);
System.out.println("
return content;
System.out.println("
for (int i = O; i < count; i++)
charl] buffer = new char[count];
try
buffer[i] = c;
catch (InterruptedException e)
RealData 类 (RealData.java)
Thread.sleep(l00);
making RealData(" + count + ",
'" + qunoo + m)eeateaα buTyeu
Future-
一先给您这张提货单
9章
233
---
## Page 249
Host参易者
参与者进行操作。
RealData 参与者还是Future 参与者。一段时间后，Client 参与者会通过VirtualIData
Future 参与者带着VirturlData 参与者的面具。Client 参与者并不需要知道返回值是
VirtualData 参与者，作为这个请求的结果（返回值）。
Chient（委托人）参与者
然而，这里所收到的 VirtualData 参与者，实际上足Future 参与者。也就是说
Future Pattern 的所有参与者
mair: END
dara = Ctccccccccaccccccccccccccccccc
datal=AAAAAAAAAA
mairl otherJob ENL
main otherJob BEGIN
main BEGIN
Host 参与者会建立出新的线程，开始建立 RealData 参与者，另一方面，会对
在范例程序中，Client参与者是Main类。
Client 参与者会向 Host 参与者送出请求（request）.
Future Pattern 的所有参与者如下;
request (30,
request (3C, C) BEGIN
request(20, B) BEGIN
request(l0, 
request(lo, A) BEGJN
request(20,
making RealData(30, C} END
making ReaiData(20,
making RealData(30,
making ReaiData(20,
makirg RealData(lc. 
making RealData(lo,
图9-3执行范例（结果司能随每次执行有所变化）
C) END
B}
A)END
END
A1
C1
BI BEGIN
A) BEGTN
END
EN
BEGIN
（显示出好不容易建立好的ReaiData(33，C)
主线程结束
T
好不容易RealData（30，C)也建立好了
显示出建立好的RealData(20，H)
显示出建立好的 RealData（10，
这时主线程其他操作做完了
RealData(20，B)建立好了
ReaiData（l0，A)建立好了
Rea²Data{30，C)开始建立
主线程进行其他操作。这段时间中...
RealData(2C，B)开始建立
ReaiData(l0，A}开始建立
request(20，B)开始
request(30，C)马上结束
reques（30，C)开始
request{20,E
request (10，A)马上结束
requesL（l0，A)开始
主线程开始
．Clinet 参与者会马上得到