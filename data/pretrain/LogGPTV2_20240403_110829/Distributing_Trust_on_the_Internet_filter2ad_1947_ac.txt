same order. Any implementation of it must implicitly reach 
agreement whether or not to deliver a message sent by a cor- 
rupted party  and, intuitively, this is where Byzantine agree- 
ment is needed. The basic structure of the atomic broadcast 
187 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:54 UTC from IEEE Xplore.  Restrictions apply. 
protocol  follows the atomic broadcast protocol  of Chandra 
and Toueg [ 121 for the crash-failure model: the parties pro- 
ceed in global rounds and agree on a set of messages to de- 
liver at the end of each round, using multi-valued Byzantine 
agreement as follows. 
First, every party digitally signs the message it proposes 
for the current round and sends this to all other parties.  Ev- 
ery party  then proposes a list of n - t properly signed mes- 
sages for the multi-valued agreement.  The external validity 
condition ensures that all messages in the decided list come 
with  valid  signatures, so that at least n - 2t  2 t + 1 of the 
messages  come from  honest  parties.  All  messages  in  the 
agreed-on list are then delivered according to a fixed order. 
This atomic broadcast protocol guarantees liveness and fair- 
ness, i.e., a message broadcast by an honest party cannot be 
delayed arbitrarily  by  the adversary once it  is  known  to at 
least t + 1 honest parties. 
A  secure  causal  atonzic  broadcast  is  an  atomic  broad- 
cast  that  also ensures  a  causal  order  among  all  broadcast 
messages, as put forward by Reiter and Birman  [3 I].  It can 
be implemented by combining an atomic broadcast protocol 
that tolerates a Byzantine adversary with a robust threshold 
cryptosystem. Encryption ensures that messages remain se- 
cret up to the  moment  at  which  they  are guaranteed to be 
delivered.  Thus, client requests to  a  trusted  service using 
this broadcast remain  confidential until  they  are scheduled 
and  answered  by  the  service.  The threshold  cryptosystem 
must  be  secure against adaptive chosen-ciphertext attacks 
to prevent the  adversary  from  submitting any  related  mes- 
sage for delivery, which would violate causality in our con- 
text.  Maintaining causality  is  crucial in  the  asynchronous 
environment for replicating  services that  involve  confiden- 
tial data. 
The protocol for secure causal atomic broadcast follows 
the  basic  idea of  Reiter  and  Birman's  protocol.  By  using 
the  robust  atomic  broadcast  mentioned  before  and  the  re- 
cent, non-interactive threshold  cryptosystem  of  Shoup and 
Gennaro [34], it is actually the first  secure implementation 
that we are aware of, and it can be proved secure in the ran- 
dom oracle model. 
4  Generalized Adversary Structures 
The common approach  in  fault-tolerant distributed  sys- 
tems is that at most a fraction of all servers fail..This model 
is based on the assumption that faults occur independently 
of each  other and affect all servers equally  likely.  For ran- 
dom and uncorrelated faults within a system as well as iso- 
lated external events this seems adequate. 
However, faults that represent malicious acts of an adver- 
sary may not always match these assumptions. This causes 
a  conceptual  obstacle  for  using  the  replication-based  ap- 
proach to achieve security  in  adversarial environments.  In 
our setting, for example, if  all servers in the system have a 
common vulnerability that permits a successful attack by an 
intruder, the integrity of the whole system may  be violated 
easily.  The independence  assumption  applies here only  to 
the  extent that the  work  needed  for breaking  into a  server 
is the same for each machine.  With the sophisticated tools, 
automated  exploit  scripts,  and  large-scale coordinated  at- 
tacks found on the Internet today, this assumption becomes 
increasingly difficult to justify. 
Concept.  Our solution for this problem is to use general- 
ized adversary structures. They can accommodate a strictly 
more general class of failures than any  weighted  threshold 
structure.  In  the Byzantine model, a collection  of corrupt- 
ible servers is  also called an adversary structure.  Such an 
adversary structure specifies the subsets of parties that may 
be corrupted at the same time. 
We describe two concrete  instantiations of such general 
adversary  structures  that  are  based  on  a  classification  of 
all servers according to one or more independent attributes 
with  at least four values each. 
Generalized adversary structures for secure fault-tolerant 
computing are also used in Byzantine Quorum systems [23] 
and the synchronous Byzantine agreement protocol of Fitzi 
and Maurer  [ 161; for combining  them with  threshold cryp- 
tography, we are restricted to those that correspond to linear 
secret sharing schemes [ 131. 
Let P  = (1, . . . , n} denote the  index  set of all parties 
PI, . . . , P,.  The adversary structure A is a family of sub- 
sets of P that specifies which parties the adversary may cor- 
rupt. d is monotone (i.e , S E  d and T  C S imply T E  d) 
and uniquely determined by the corresponding maximal ad- 
versary  structure d*, in  which  no subset contains another 
one.  In  the traditional threshold  model, the adversary  may 
corrupt up to t arbitrary parties, and A'  contains all subsets 
of P with cardinality  t. 
Most protocols impose certain restrictions on the type of 
corruptions that they can tolerate.  For a threshold adversary 
in  an asynchronous distributed system model, n > 3t  is in 
general a necessary and sufficient condition. The analogous 
condition for protocols with a general adversary structure A 
is the so-called Q3 condition [ 191: no three of the sets in A 
cover P. (Note that n > 3t is a special case of this.) 
The  adversary  structure  specifies  the  (maximally)  cor- 
ruptible subsets of parties.  Its complement is called the ac- 
cess  structure  and  specifies the  (minimally) qualified sub- 
sets that are needed to take some action. For example, it is 
used  in secret sharing in  cryptographywhere  it denotes the 
sets of  parties who may reconstruct the shared secret.  The 
access structure is  usually  the more  important  tool for the 
protocol designer than the adversary structure. In the exam- 
ple of the threshold  system above, all sets o f t  + 1 or more 
parties belong to the access structure. 
188 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:54 UTC from IEEE Xplore.  Restrictions apply. 
Protocol Design.  Every  adversary  structure can  also  be 
described by  a Boolean  function g on n variables  that rep- 
resent  a subset of  P  as follows.  We  associate a subset  of 
P  with  its characteristic  vector, whose  ith element  is  1  if 
and  only  if Pi  is  in  the  subset.  Defining  g  on  all  subsets 
of P  in this way, g outputs 0 on all elements of the adver- 
sary structure (i.e.,  for all sets of parties that might be cor- 
rupted by  the  adversary), and  1 otherwise.  To represent g, 
we use n-ary threshold gates 0; that output 1 if and only if 
at least k of their n inputs are 1 (note that A N D  and OR gates 
correspond to the special cases 0: and e:). For instance, 
g ( S )  = Or+,,(S)  in the threshold example. 
All threshold-cryptographic protocols used by our archi- 
tecture (cf. Section 3) can be extended to a generalized Q3 
adversary  structure A for  which  the  corresponding  secret 
sharing access structure can be implemented by  a linear se- 
cret sharing  scheme.  This requires changing  some details 
in  the  cryptographic operations, but  there  are  no essential 
difficulties. The agreement and broadcast protocols need to 
be changed as follows: 
the second one is based on combining two separate classifi- 
cations by independent attributes. 
Before we continue, we need to introduce some notation. 
Let class denote the name of an attribute and also the set of 
attribute values. For c E  class, let xc : 2 p  + {0,1} be the 
characteristic  function  of  the  attribute  on  a set  of  parties, 
i.e., x c ( S )  = 1 if and only if class(i) = c for some i  E S. 
Example  1.  Consider  a  system  of  nine  servers  and 
one attribute  class  = {a, b, c, d }  that  satisfies  cluss(1) = 
... = class(4) = a, class(5) = class(6) = b, class(7) = 
class(8) = c, and class(9) = d. This could be the operating 
system of a server, for example, with class a representing a 
common but  not very  secure operating system and class d 
representing the most secure one of the four class values. 
We want to design a system that tolerates the corruption 
of at most two arbitrary servers or all servers in any partic- 
ular class; its adversary structure A1  is given by 
SUT. 
0  Where t + l  values are needed, take all values in S U { i }  
for any S  E A'  and i # S. 
Differentiating Servers by Attributes.  Suppose there is 
an attribute of all parties in  the system that takes on at least 
four different values.  If  the characteristics of corrupting a 
party  vary  with  the attribute,  then this classification can be 
exploited  directly  to  design  a  system  in  which  all  parties 
in  the  same class may  be corrupted  simultaneously.  With 
n  = 4  this  reduces  to  the  threshold  case.  For  example, 
the  servers in  a  wide-area  distributed  system  may  vary  by 
physical location, logical domain, system management per- 
sonnel, type of operating system, other applications running 
on the same machine, and implementation of the protocols. 
All of these seem suitable attributes. 
We do not make any further distinctions between the at- 
tribute values here; this leads naturally to a threshold failure 
model  in  the  attribute dimension.  However,  arbitrary  and 
complex  relations  between  the  par:ies  can  be  modeled  as 
long  as there  exists a  corresponding  linear  secret  sharing 
scheme.  For  simple  linear  relations,  traditional  weighted 
thresholds may  already  be  enough,  which  can be  obtained 
by allocating several logical parties to one physical party. 
We  give  two  examples  of  generalized  adversary  struc- 
tures  by  describing  the  linear  secret  sharing  schemes  on 
which  they  are based.  The first one shows how to combine 
attribute classification with the traditional threshold model, 
In  other words, secrets may be reconstructed  by  coalitions 
of servers of  size at least three that also cover at least two 
different classes. 
One may  readily  verify  that  A1  satisfies the Q3 condi- 
tion.  The corresponding linear secret sharing scheme fol- 
lows directly  from the  expression  for g(S) using the  stan- 
dard construction of  Benaloh and Leichter  [4].  The agree- 
ment and broadcast  protocols  can  be  adapted according to 
the modifications sketched above. 
Example 2.  The classification method  works simulta- 
neously  for an  arbitrary  number  of  independent  attributes 
and  attribute  values.  We  illustrate  this  for two  attributes 
with  four values each, denoted by classl  = { a ,  b, c, d }  and 
class:! = { a ,  ,Dl y, S}.  Assume  all  combinations  of class1 
and class2  exist so that P contains at least sixteen servers. 
To  be  concrete,  think  of  a  distributed  system  of  six- 
teen  servers  implementing  a  secure  directory  service  for 
a  large  multi-national  company  that  is  running  on  nodes 
in New York (USA), Tokyo (Japan), Zurich  (Switzerland), 
and Haifa (Israel)  and consists of servers running the AIX, 
Windows NT, Linux, and Solaris operating systems.  Thus, 
class1 corresponds to the location and class2 to the operat- 
ing system of a server. 
We can now  obtain a distributed  system that, for exam- 
ple, tolerates the simultaneous corruption of all servers with 
189 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:54 UTC from IEEE Xplore.  Restrictions apply. 
a particular operating system and all servers in one location.. 
Its adversary structure is characterized by 
classl, 
where xu = @$(xU(S) A xa(S), xv(s) A xp(s), x,(S) A 
xr(S), xU(S) A  X S ( S ) )  for  U 
and 
E 
Yu  =  @!(xa(s)  A  xv(s), X b ( 8   A  xv(s), xc(s) A 
xv(S), ~ci(S) A xv(s)) for v E  C ~ ~ S S Z .  
This adversary  structure satisfies  the  Q3 condition,  as 
can  be  verified  easily.  The  corresponding  secretsharing 
scheme is characterized by the negated expression, g(S) = 
@i(xa, Z6, G, xa) A  @;(ya,  YO, Y-,, YS). 
Intuitively,  the 
sharing  introduces  two  secret  values  (one  for  each  class) 
at the top level  that  must both be known  to recover the se- 
cret.  To  reconstruct the  first  one,  at  least  two of  the  four 
classl  points xa, . . . , x d  must be known; each point in  turn 
can  again only be reconstructed by  a  subset that covers at 
least two class:! values and  the corresponding class1 value. 
In other words, x, is shared among the four parties with  a 
classl  value of a  using a two-out-of-four scheme, etc.  The 
top-level secret for class2 is distributed analogously. 
The resulting distributed system  maintains liveness and 
safety as long as there are servers with three operating sys- 
tems at three locations that are uncorrupted; but one location 
may  be unreachable and  one  operating system  could  con- 
tain easily exploitable vulnerabilities so that a maximum of 
seven servers could have failed  at  any moment.  Note  that 
all  solutions based  on  thresholds can  tolerate  at  most  five 
corruptions among the  16 servers. 
5  Applications 
Our  distributed  trusted  services  are  based  on  secure 
state machine  replication  in  the Byzantine  model  (follow- 
ing [32, 311). Requests to a particular service are delivered 
by the broadcast protocols mentioned in Section 3. A broad- 
cast is started when  the client  sends a message containing 
the request to a sufficient number of servers. In general, the 
client must send the request  to more than  t  servers or the 
corrupted servers could simply ignore the message; alterna- 
tively, one could postulate that one server acts as a gateway 
to relay  the request to all servers and  leave it to the client 
to resend its message if it receives no answer within the ex- 
pected time. 
Depending  on  whether  it  needs  to  maintain  causality 
among client requests,  a service may  use  atomic broadcast 
directly or secure causal atomic broadcast otherwise. If the 
client requests commute, reliable broadcast suffices. 
Each  server  returns a partial  answer to the client,  who 
must wait for at least 2t + 1 values before determining the 
proper  answer  by  majority  vote.  Since atomic  broadcast 
guarantees that all servers process the same sequence of re- 
quests, the client will obtain the same answer from all hon- 
est servers. If the application returns a digital  signature, the 
answers may contain signature shares from which the client 