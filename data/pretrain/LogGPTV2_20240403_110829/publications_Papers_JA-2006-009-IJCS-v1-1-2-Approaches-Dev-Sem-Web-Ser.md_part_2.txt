### Automated and Successful Accomplishment of Web Services

The automated and more successful accomplishment of web services can be achieved through the use of WSDL-S, which establishes a mapping between WSDL descriptions and ontological concepts. This idea was first introduced in [21]. 

#### WSDL-S Mapping
WSDL-S [19, 20] facilitates the mapping between service, task, or activity descriptions and ontological concepts. For example, in the `StudentManagement.wsdl20` file, the following namespaces are defined:
- `xmlns="http://www.w3.org/2004/03/wsdl"`
- `xmlns:tns="http.../StudentManagement.wsdl20"`
- `xmlns:sm="http.../StudentMng.owl#"`
- `xmlns:mep="http.../TR/wsdl20-patterns"`

#### Service Profile
The service profile describes "what the service does" by advertising its capabilities. It includes:
- **Inputs**: The data the service expects.
- **Outputs**: The information returned by the service.
- **Preconditions**: Conditions that must be satisfied to use the service.
- **Effects**: Expected outcomes after running the service.

In the `StudentManagement` service, two operations are provided: `RegisterStudent` and `StudentInformation`. 
- **RegisterStudent**:
  - Input: `student`, semantically described by the concept `sm:StudentInfo`.
  - Output: `ID`, semantically described by the concept `sm:StudentID`.
  - Annotated with the ontological concept `sm:RegisterStudent`.

- **StudentInformation**:
  - Uses similar ontological concepts to annotate the input, output, and action.

These ontological concepts are defined in the ontology `http://dme.uma.pt/jcardoso/StudentMng.owl#`, specified using OWL [4].

#### Creating and Manipulating WSDL-S Documents
To create, represent, and manipulate WSDL-S documents, WSDL4J (available at http://sourceforge.net/projects/wsdl4j/) can be used. WSDL4J provides Java APIs for WSDL parsing and generation, supporting extensibility elements. This allows WSDL to represent specific technologies under various elements defined by WSDL.

### Pure Semantic Web Services: OWL-S

OWL-S (formerly DAML-S) is a web service description language that uses OWL ontologies to semantically describe web services. OWL-S consists of three main parts:
1. **Service Profile**: Describes what the service does, aimed at advertisement and discovery.
2. **Service Model**: Describes how the service works, enabling invocation, enactment, composition, message formats, and protocols.
3. **Service Grounding**: Specifies the details about transport protocols, message formats, serialization, addressing, and other service-specific details.

#### Example: Congo.com
An example provided by www.daml.org, available for download at http://daml.semanticweb.org/services/owl-s/1.0/, describes the inputs, outputs, preconditions, and effects of the Congo book selling service. The process `FullCongoBuy` is composed of two sub-processes: `locateBook` and `CongoBuyBook`. The `FullCongoBuy` process has several inputs, but only one, `FullCongoBuyBookName` (a string), is shown.

#### Process Model
A process model decomposes into an ordered collection of processes, including:
- **Sequence**: A list of processes to be carried out in a specific order.
- **Split**: Concurrent execution of process components.
- **Unordered**: Execution of process components in any order.
- **Split+Join**: Concurrent execution with barrier synchronization.
- **Choice**: Allows a choice between alternative processes.
- **If-then-else**: Implements conditional logic.
- **Repeat-until and repeat-while**: Iterates execution until/while a condition holds.

If a process cannot be further decomposed, it is an atomic process, corresponding to direct operations. Processes have inputs, preconditions, outputs, and effects.

#### Service Grounding
Service grounding specifies the details for accessing the service, such as transport protocols and message formats. OWL-S uses WSDL for message specifications. For example:
- `wsdlDocument`: Identifies the URI of the WSDL document.
- `wsdlOperation`: Identifies the URI of the WSDL operation.
- `wsdlInput` and `wsdlOutput`: Map OWL-S input and output properties to WSDL message parts.

### Another Semantic Approach: WSMO

Web Services Modeling Ontology (WSMO) provides ontological specifications for semantic web services. Developed by the Digital Enterprise Research Institute (DERI), WSMO aims to solve application integration problems for web services, EAI, and SOA by providing a conceptual framework and formal language. WSMO includes four main concepts:
- **Web Services**
- **Goals**
- **Ontologies**
- **Mediators**

#### WSML
Web Service Modeling Language (WSML) is based on different logical formalisms, including Description Logics, First-Order Logic, and Logic Programming. WSML is divided into five subsets: WSML-Core, WSML-DL, WSML-Light, WSML-Rule, and WSML-Full, each providing different levels of expressiveness.

#### Example: Trip Reservation Ontology
An example of an ontology definition in WSMO:
```xml
namespace {
  _"http://example.org/tripReservationOntology#",
  dc _"http://purl.org/dc/elements/1.1#",
  loc _"http://example.org/locationOntology#",
  po _"http://example.org/purchaseOntology#",
  foaf _"http://xmlns.com/foaf/0.1/",
  wsml _"http://www.wsmo.org/wsml/wsml-syntax#",
  prs _"http://example.org/owlPersonMediator#"
}

ontology
_"http://example.org/tripReservationOntology"
nonFunctionalProperties
  dc#title hasValue "Trip Reservation Ontology"
  dc#creator hasValue _"http://example.org/foaf#deri"
  dc#format hasValue "text/x-wsml"
endNonFunctionalProperties
importsOntology{
  _"http://example.org/locationOntology",
  _"http://example.org/purchaseOntology"
}
usesMediator
  _"http://example.org/owlPersonMediator"

concept trip
  origin impliesType loc#location
  destination impliesType loc#location
  departure ofType _date
  arrival ofType _date

concept tripFromAustria subConceptOf trip
```

This example illustrates how ontologies are defined using WSMO, providing the terminology and formal semantics for web services.

### Conclusion
The use of WSDL-S, OWL-S, and WSMO enhances the automation and success of web services by providing clear, semantically rich descriptions and mappings. These approaches facilitate the discovery, interoperability, composition, and invocation of web services, making them more effective and reliable.