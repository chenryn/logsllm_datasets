title:HACL*: A Verified Modern Cryptographic Library
author:Jean Karim Zinzindohou&apos;e and
Karthikeyan Bhargavan and
Jonathan Protzenko and
Benjamin Beurdouche
HACL∗: A Verified Modern Cryptographic Library
Karthikeyan Bhargavan
Jean Karim Zinzindohoué
INRIA
INRIA
Jonathan Protzenko
Microsoft Research
Benjamin Beurdouche
INRIA
ABSTRACT
HACL∗ is a verified portable C cryptographic library that imple-
ments modern cryptographic primitives such as the ChaCha20 and
Salsa20 encryption algorithms, Poly1305 and HMAC message au-
thentication, SHA-256 and SHA-512 hash functions, the Curve25519
elliptic curve, and Ed25519 signatures.
HACL∗ is written in the F∗ programming language and then
compiled to readable C code. The F∗ source code for each crypto-
graphic primitive is verified for memory safety, mitigations against
timing side-channels, and functional correctness with respect to a
succinct high-level specification of the primitive derived from its
published standard. The translation from F∗ to C preserves these
properties and the generated C code can itself be compiled via
the CompCert verified C compiler or mainstream compilers like
GCC or CLANG. When compiled with GCC on 64-bit platforms,
our primitives are as fast as the fastest pure C implementations in
OpenSSL and Libsodium, significantly faster than the reference C
code in TweetNaCl, and between 1.1x-5.7x slower than the fastest
hand-optimized vectorized assembly code in SUPERCOP.
HACL∗ implements the NaCl cryptographic API and can be used
as a drop-in replacement for NaCl libraries like Libsodium and
TweetNaCl. HACL∗ provides the cryptographic components for
a new mandatory ciphersuite in TLS 1.3 and is being developed
as the main cryptographic provider for the miTLS verified imple-
mentation. Primitives from HACL∗ are also being integrated within
Mozilla’s NSS cryptographic library. Our results show that writing
fast, verified, and usable C cryptographic libraries is now practical.
1 THE NEED FOR VERIFIED CRYPTO
Cryptographic libraries lie at the heart of the trusted computing
base of the Internet, and consequently, they are held to a higher stan-
dard of correctness, robustness, and security than other distributed
applications. Even minor bugs in cryptographic code typically result
in CVEs and software updates. For instance, since 2016, OpenSSL
has issued 11 CVEs1 for bugs in its core cryptographic primitives,
including 6 memory safety errors, 3 timing side-channel leaks, and
2 incorrect bignum computations. Such flaws may seem difficult
to exploit at first, but as Brumley et al. [24] demonstrated, even
an innocuous looking arithmetic bug hiding deep inside an elliptic
curve implementation may allow an attacker to efficiently retrieve
a victim’s long-term private key, leading to a critical vulnerability.
Bugs in cryptographic code have historically been found by a
combination of manual inspection, testing, and fuzzing, on a best-
effort basis. Rather than finding and fixing bugs one-by-one, we join
Brumley et al. and a number of recent works [8, 12, 25, 29, 37] in
advocating the use of formal verification to mathematically prove
1https://www.openssl.org/news/vulnerabilities.html
the absence of entire classes of potential bugs. In this paper, we will
show how to implement a cryptographic library and prove that it is
memory safe and functionally correct with respect to its published
standard specification. Our goal is to write verified code that is
as fast as state-of-the-art C implementations, while implementing
standard countermeasures to timing side-channel attacks.
A Library of Modern Cryptographic Primitives. To design a
high-assurance cryptographic library, we must first choose which
primitives to include. The more we include, the more we have
to verify, and their proofs can take considerable time and effort.
Mixing verified and unverified primitives in a single library would
be dangerous, since trivial memory-safety bugs in unverified code
often completely break the correctness guarantees of verified code.
General-purpose libraries like OpenSSL implement a notoriously
large number of primitives, totaling hundreds of thousands of lines
of code, making it infeasible to verify the full library. In contrast,
minimalist easy-to-use libraries such as NaCl [17] support a few
carefully chosen primitives and hence are better verification targets.
For example, TweetNaCl [19], a portable C implementation of NaCl
is fully implemented in 700 lines of code.
For our library, we choose to implement modern cryptographic
algorithms that are used in NaCl and popular protocols like Signal
and Transport Layer Security (TLS): the ChaCha20 and Salsa20
stream ciphers [1, 15], the SHA-2 family of hash functions [36],
the Poly1305 [1, 13] and HMAC [26] message authentication codes,
the Curve25519 elliptic curve Diffie-Hellman group [2, 14], and
the Ed25519 elliptic curve signature scheme [3, 16]. By restricting
ourselves to these primitives, we obtain a compact verified library
of about 7000 lines of C code that provides both the full NaCl API as
well as a TLS-specific API that can be used by libraries like OpenSSL
and NSS. In particular, our library is being used as the main crypto-
graphic provider for miTLS, a verified TLS implementation [27].
Verification Goals for Cryptographic Code. Before a crypto-
graphic library can be safely used within a larger protocol or appli-
cation, the following are the most commonly desired guarantees:
Memory Safety The code never reads or writes memory at
invalid locations, such as null or freed pointers, unallocated
memory, or out-of-bounds of allocated memory. Also, any
locally allocated memory is eventually freed (exactly once).
Functional Correctness The code for each primitive con-
forms to its published standard specification on all inputs.
Mitigations against Side-Channel Attacks The code does
not reveal any secret inputs to the adversary, even if the
adversary can observe low-level runtime behavior such as
branching, memory access patterns, cache hits and misses,
power consumption, etc.
Cryptographic Security The code for each cryptographic
construction implemented by the library is indistinguish-
able (with high probability) from some standard security
definition, under well-understood cryptographic assump-
tions on its underlying building blocks.
For libraries written in C or in assembly, memory safety is the
first and most important verification goal, since a memory error in
any part of the library may compromise short- or long-term secrets
held in memory (as in the infamous HeartBleed attack.) Functional
correctness may be easy if the code does not diverge too far from the
standard specification, but becomes interesting for highly optimized
code and for elliptic curves and polynomial MACs, which need to
implement error-prone bignum computations. Mitigating against all
low-level side-channel attacks is an open and challenging problem.
The best current practice in cryptographic libraries is to require a
coding discipline that treats secret values as opaque; code cannot
compare or branch on secrets or access memory at secret indices.
This discipline is called secret independence (or constant-time coding),
and while it does not prevent all side-channel attacks, it has been
shown to prevent certain classes of timing leaks [7, 9].
In our library, we seek to verify memory safety, functional cor-
rectness, and secret independence. We do not consider crypto-
graphic security in this paper, but our library is being used as the
basis for cryptographic proofs for constructions like authenticated
encryption and key exchange in miTLS [27].
Balancing Verification Effort with Performance. Making code
auditable, let alone verifiable, typically comes with a significant
performance cost. TweetNaCl sacrifices speed in order to be small,
portable, and auditable; it is about 10 times slower than other NaCl
libraries that include code optimized for specific architectures. For
example, Libsodium includes three versions of Curve25519, two C
implementations—tailored for 32-bit and 64-bit platforms—and a
vectorized assembly implementation for SIMD architectures. All
three implementations contain their own custom bignum libraries
for field arithmetic. Libsodium also includes three C implementa-
tions of Poly1305, again each with its own bignum code. In order
to fast verify a library like Libsodium, we would need to account
for all these independent implementations, a challenging task.
Prior work on verifying cryptographic code has explored various
strategies to balance verification effort with performance. Some
authors verify hand-written assembly code optimized for specific
architectures [25]; others verify portable C code that can be run on
any platform [8, 12]; still others verify new cryptographic libraries
written in high-level languages [29, 37]. The trade-off is that as we
move to more generic, higher-level code, verification gets easier but
at a significant cost to performance and usability. Assembly code
provides the best performance, but requires considerable manual
verification effort that must be repeated for each supported plat-
form. C code is less efficient but portable; so even libraries that
aggressively use assembly code often include a reference C imple-
mentation. Code in higher-level languages obtain properties like
memory safety for free, but they are typically slow and difficult
to protect against side-channels, due to their reliance on complex
runtime components like garbage collectors.
In this paper, we attempt to strike a balance between these ap-
proaches by verifying cryptographic code written in a high-level
language and then compiling it to efficient C code. For each primi-
tive, we focus on implementing and verifying a single C implemen-
tation that is optimized for the widely used 64-bit Intel architecture,
but also runs (more slowly) on other platforms. Our goal is not
to replace or compete with assembly implementations; instead we
seek to provide fast verified C code that can be used as default
reference implementations for these primitives.
Our Approach. We take state-of-the-art optimized C implemen-
tations of cryptographic primitives and we adapt and reimplement
them in F∗ [34] a dependently-typed programming language that
supports semi-automated verification by relying on an external SMT
solver (Z3). Our code is compiled to C via the KreMLin tool [20].
The resulting C code can then be compiled using the CompCert
compiler [31] which results in verified machine code. Code com-
piled from CompCert is still not as fast as CLANG or GCC, but this
gap is narrowing as more optimizations are verified and included
in CompCert. In the meantime, for high-performance settings, we
use GCC at optimization level -O3 to compile our C code.
To minimize the code base and the verification effort, we share
as much code as possible between different primitives and differ-
ent architectures. For example, we share bignum arithmetic code
between Poly1305, Curve25519, and Ed25519. We also provide F∗
libraries that expose (and formally specify) modern hardware fea-
tures such as 128-bit integer arithmetic and vector instructions,
which are supported by mainstream C compilers through builtins
and intrinsics. Using these libraries, we can build and verify effi-
cient cryptographic implementations that rely on these features.
On platforms that do not support these features, we provide custom
implementations for these libraries, so that our compiled C code is
still portable, albeit at reduced performance.
Our Contributions and Limitations. We present HACL∗, a veri-
fied, self-contained, portable, reference cryptographic library that is
written in F∗ and compiled to C. All our code is verified to be mem-
ory safe, functionally correct, and secret independent. Our library
includes the first verified vectorized implementation of a crypto-
graphic primitive (ChaCha20), the first verified implementations of
SHA-512, and Ed25519, and includes new verified implementations
of Salsa20, Poly1305, SHA-256, HMAC, and Curve25519. Our code
is roughly as fast as state-of-the-art pure-C implementations of
these primitives and is within a small factor of assembly code.
Our library is the first verified implementation of the full NaCl
API and can be used as a drop-in replacement for any application
that uses it via Libsodium or TweetNaCl. Our code is already being
used to implement TLS ciphersuites in the miTLS project [27] and
we are currently working with Mozilla to use our code within the
NSS library. Our hope is that cryptographic software developers will
be able to reuse our libraries and our methodology to write verified
code for new primitives and new optimized implementations of
existing primitives.
Throughout the paper, we will try to be precise in stating what we
have proved about our code, but an early word of caution: although
formal verification can significantly improve our confidence in a
cryptographic library, any such guarantees rely on a large trusted
computing base. The semantics of F* has been formalized [5] and
our translation to C has been proven to be correct on paper [20],
but we still rely on the correctness of the F* typechecker, the Z3
2 VERIFIED C CRYPTO VIA F∗ AND KREMLIN
Our verification approach is built on F∗ [34], a general purpose
dependently-typed programming language that was designed to
make it easier to incorporate formal verification into the software
development cycle. More specifically, to obtain a verified C cryp-
tographic library, we rely on recent work [20] that identifies a
low-level subset of F∗ (dubbed Low∗) that can be efficiently com-
piled to C, via a tool called KreMLin. The most up-to-date reference
for the semantics of F∗ and the soundness of its type system appears
in [5]. For a full description of Low∗ and its formal development,
including a correctness theorem for the C compilation, we refer the
reader to [20]. In this section, we focus on informally describing
the parts of this framework that we use to build and verify HACL∗.
The workflow for adding a new primitive in HACL∗ is depicted
in Figure 1. We first write a high-level specification (Spec) for the
primitive in a higher-order purely functional subset of F∗ (Pure F∗).
We then write a optimized implementation (Code) in Low∗. The
Code is then verified, using the F∗ typechecker, for conformance to
the Spec and to ensure that it respects the logical preconditions and
type abstractions required by the F∗ standard library. If typecheck-
ing fails, there may be potentially be a bug in the code, or it may
be that the typechecker requires more annotations to prove the
code correct. Finally, the Low∗ code for the primitive is compiled
via KreMLin to C code. In the rest of this section, we describe each
of these steps in more detail, and show how we use typechecking
to guarantee our three target verification goals.
Writing High-Level Specifications in Pure F∗. Starting from
the published standard for a cryptographic primitive, our goal is
to write a succinct formal specification that is as readable (if not
more so) than the textual description or pseudocode included in
the standard. We write all our specifications in Pure F∗, a subset of
F∗ where all code is side-effect free and guaranteed to terminate
on all inputs. In particular, our specifications cannot use mutable
data structures, and so must be written in a purely functional style.
On the other hand, specifications can use mathematical objects like
infinite precision integers (int) and natural numbers (nat) without
worrying about how they would be implemented on 32-bit or 64-bit
architectures. In addition, specifications can also use finite-precision
integers (uint32,uint64,...) and immutable finite-length sequences
(seq T). The function to_int converts a finite-precision integer to
an int. We use the notation s.[i] (or equivalently index s i) to read
the i’th element from a sequence s; updating a sequence s.[i] ← x
returns a copy of s whose i’th element is set to x.
For example, the Poly1305 MAC algorithm, standardized in IETF
RFC7539, evaluates a polynomial over the prime field Z2130−5. Its
field arithmetic can be fully specified in six lines of F∗:
let prime = pow2 130 − 5
type felem = e:int{0 ≤ e ∧ e < prime}
let zero : felem = 0
let one : felem = 1
let fadd (e1:felem) (e2:felem) : felem = (e1 + e2) % prime
let fmul (e1:felem) (e2:felem) : felem = (e1 ∗ e2) % prime
The syntax of F∗ resembles functional languages like OCaml and
F#. Each module is a sequence of type declarations, global constant
definitions, and function definitions. The code above first defines
Figure 1: HACL∗ Verification and Compilation Toolchain
SMT solver, the KreMLin compiler, and the C compiler (that is, if
we use GCC instead of CompCert.) We hope to reduce these trust
assumptions over time by moving to verified F∗ [33] and only using
CompCert. For now, we choose the pragmatic path of relying on
a few carefully designed tools and ensuring that the generated C
code is readable, so that it can be manually audited and tested.
Related Work. Formal verification has been successfully used
on large security-critical software systems like the CompCert C
compiler [31] and the sel4 operating system kernel [30]. It has been
used to prove the security of cryptographic constructions like RSA-
OAEP [10] and MAC-Encode-Encrypt [6]. It has even been used
to verify a full implementation of the Transport Layer Security
(TLS) protocol [21]. However, until recently, formal methods had
not been applied to the cryptographic primitives underlying these
constructions and protocols.
Recently, several works have taken on this challenge. Hawblitzel
et al. [29] wrote and verified new implementations of SHA, HMAC,
and RSA in the Dafny programming language. Appel [8] verified
OpenSSL’s C implementation of SHA-256 in Coq, and Behringer et
al. [12] followed up with a proof of OpenSSL’s HMAC code. Chen
et al. [25] used a combination of SMT solving and the Coq proof
assistant to verify a qhasm implementation of Curve25519. Zinzin-
dohoue et al. [37] wrote and verified three elliptic curves P-256,
Curve25519, and Curve448 in the F* programming language and
compiled them to OCaml. Bond et al. [23] show how to verify assem-
bly implementations of SHA-256, Poly1305, and AES-CBC. Cryptol
and SAW [35] have been used to verify C and Java implementations
of Chacha20, Salsa20, Poly1305, AES, and ECDSA. Compared to
these works, we use a different methodology, by verifying code in
F∗ and compiling it to C. Furthermore, unlike these prior works,
our goal is to build a self-contained cryptographic library, so we
focus on a complete set of primitives and we aggressively share
code between them. Throughout the paper, we will compare our
results with these works where relevant.
the constant prime as 2130 − 5. It then declares the type of field
elements felem, as a subset or refinement of the unbounded integer
type int. It defines the constants zero and one in the field, and finally
defines the field addition (fadd) and multiplication (fmul) functions.
This high-level mathematical specification serves as the basis
for verifying our optimized implementation of Poly1305, but how
can we be confident that we did not make a mistake in writing the
specification itself? First, by focusing on brevity and readability,
we believe we are able to write a specification that can be audited
by visually comparing it with the published standard. Second, our
specifications are executable, so the developer can compile the F∗
code to OCaml and test it. Indeed, all the crypto specifications in
HACL∗ have been run against multiple test vectors taken from the
RFCs and other sources. Thirdly, we can ask F∗ to verify properties
about the specification itself. By default, F∗ will already check that
the F∗ specification obeys its declared types. For example, F∗ checks
that all sequence accesses (s.[i]) fall within bounds (0 ≤ i < length s).
In In the specification above, F∗ will also verify that zero, one, and
the outputs of fadd and fmul are fall valid field elements. To prove
such arithmetic properties, F∗ uses an external SMT solver called Z3.
In addition to such sanity checks, we can also ask F∗ to prove more
advanced properties about the specification. For example, in §4, we
will prove that two variants of the ChaCha20 specification—one
sequential, the other vectorized—are equivalent.
Writing C-like Code in Low∗. F∗ supports a powerful proof style
that relies on high-level invariants and a strong type system. In
contrast, C programs tend to rely on low-level invariants, as the type
system is not strong enough to prove properties such as memory
safety. The Low∗subset of F∗ blends the performance and control of
C programming with the verification capabilities of F∗. Importantly,
Low∗targets a carefully curated subset of C, and by eliminating the
need to reason about legacy C code that may contain hard-to-prove
features like pointer arithmetic, address-taking, and casts between
pointers and integers, we obtain many invariants for free, leaving
the programmer to only focus on essential properties and proofs.
Low∗code can use finite-precision machine integers (uint8,uint32,...)
but they cannot use unbounded integers (int), sequences or other
heap-allocated data structures like lists, since these do not directly
translate to native concepts in C. Instead, they can use immutable
records (which translate to C structs) and mutable buffers (which
translate to C arrays). Following OCaml notation, we use b.(i) to
read the i’th element of a buffer, and b.(i) ← x to overwrite it.
When implementing a cryptographic primitive in Low∗, we aim
to write efficient code that avoids unnecessary copying, implements
algorithmic optimizations, if any, and exploits hardware features,
wherever available. For example, as we will see in §5, to implement
prime field arithmetic for Poly1305 on 64-bit platforms, one efficient
strategy is to represent each 130-bit field element as an array of
three 64-bit limbs, where each limb uses 42 or 44 bits and so has
room to grow. When adding two such field elements, we can simply
add the arrays point-wise, and ignore carries, as depicted in the
fsum function below:
type limbs = b:buffer uint64_s{length b = 3}
let fsum (a:limbs) (b:limbs) =
a.(0ul) ← a.(0ul) + b.(0ul);
a.(1ul) ← a.(1ul) + b.(1ul);
a.(2ul) ← a.(2ul) + b.(2ul)