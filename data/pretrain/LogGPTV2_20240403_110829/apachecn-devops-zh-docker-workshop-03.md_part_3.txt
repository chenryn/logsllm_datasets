14.  There is a different way we can use the `basic-base` image we used earlier. Use the `docker build` command with the `–cache-from` option to specify the cache layers that will be used when the image is built. Set out the `FROM` command to still use the `alpine` image and use the `–cache-from` option that follows to make sure the layers used to build `basic-base` are being used for our current image:
    ```
    docker build --cache-from basic-base -t basic-app .
    ```
    在完成本练习之前，我们还有一些任务。在下面的步骤中，我们将查看提交对映像的更改，以了解它如何影响我们的图层。这不是我们经常使用的东西，但有时我们需要将生产数据复制到开发或测试环境中，一种方法是使用带有`commit`命令的 Docker 映像，这将对我们运行的容器的顶部可写层进行更改。
15.  在交互 shell 模式下运行`basic-app`创建一些生产数据。为此，使用`-it`选项运行以下`docker run`命令，以交互模式运行，并使用`sh`外壳访问运行容器:
    ```
    docker run -it basic-app sh
    /var/www/html #
    ```
16.  使用 vi 文本编辑器创建一个名为`prod_test_data.txt` :
    ```
    vi prod_test_data.txt
    ```
    的新文本文件
17.  添加下面一行文本作为一些测试数据。文本中的数据并不重要；这只是一个示例，说明我们可以将这些更改复制到另一个映像中:
18.  This is a sample production piece of data. Exit out of the running container and then check the container ID using the `docker ps` command with the `-a` option:
    ```
    docker ps -a
    ```
    您将获得如下输出:
    ```
    CONTAINER ID    IMAGE        COMMAND    CREATED
    ede3d51bba9e    basic-app    "sh"       4 minutes ago
    ```
19.  Run the `docker commit` command with the container ID to create a new image that will include all those changes. Make sure to add the name of the new image. In this example, use `basic-app-test`:
    ```
    docker commit ede3d51bba9e basic-app-test
    ```
    您将获得如下输出:
    ```
    sha256:0717c29d29f877a7dafd6cb0555ff6131179b457
           e8b8c25d9d13c2a08aa1e3f4
    ```
20.  Run the `docker history` command on the newly created image:
    ```
    docker history basic-app-test
    ```
    现在，这应该向我们显示了一个额外的层，我们在其中添加了示例生产数据，在我们的输出中显示为 72B 的大小:
    ```
    IMAGE        CREATED       CREATED BY                         SIZE
    0717c29d29f8 2 minutes ago sh                                 72B
    302e01f9ba6a 2 minutes ago /bin/sh -c cat Dockerfile          0B
    10b405ceda34 2 minutes ago /bin/sh -c #(nop) ADD file:e39f…   283B
    397f533f4019 2 minutes ago /bin/sh -c #(nop) WORKDIR /var/…   0B
    c8782986b276 2 minutes ago /bin/sh -c #(nop)  CMD ["/bin/sh"… 0B
    6dee05f36f95 2 minutes ago /bin/sh -c apk update && apk ad    3.2MB
    961769676411 6 weeks ago   /bin/sh -c #(nop)  CMD ["/bin/sh"] 0B
        6 weeks ago   /bin/sh -c #(nop) ADD file:fe3dc…  5.6MB
    ```
21.  Now, run the newly created `basic-app-test` image and `cat`, the new file we added:
    ```
    docker run basic-app-test cat prod_test_data.txt
    ```
    这将向我们显示我们添加的输出，显示我们可以在需要时重用现有映像:
    ```
    This is a sample production piece of data
    ```
    注意
    截至撰写本文时，`docker build`命令还允许使用`–squash`选项创建新的实验特征。该选项试图在构建期间将所有图层合并为一个图层。我们还没有讨论这个特性，因为它还处于实验阶段。
本练习演示了构建缓存和映像层如何改善构建时间。到目前为止，我们已经使用从 Docker Hub 中提取的映像开始了所有的构建，但是如果您希望进一步控制事情，也可以选择从您自己创建的映像开始。下一节将帮助您创建您的基本 Docker 映像。
# 创建基本 Docker 映像
创建您的基本 Docker 映像实际上很简单。正如我们之前使用`docker commit`命令从运行的容器中创建映像一样，我们也可以从最初运行应用的系统或服务器中创建映像。我们需要记住，创建基础映像仍然需要保持小而轻。这不仅仅是将运行在现有服务器上的现有应用转移到 Docker 的问题。
我们可以使用我们专门开发的系统，但是如果您使用的是生产服务器，映像实际上可能会非常大。如果您有一台小型虚拟机，并且您认为它非常适合基本映像，您可以使用以下步骤来创建基本映像。类似于`docker commit`命令，这可以用于任何你可以访问的系统。
## 练习 3.03:创建您的基本 Docker 映像
以下练习将使用我们当前运行的`basic-app`映像，并展示创建基础映像有多容易。这些相同的步骤也将用于更大、更复杂的环境:
1.  执行`docker run`命令运行容器，同时登录:
    ```
    docker run -it basic-app sh
    ```
2.  在运行的容器上运行`tar`命令，创建系统的备份。要限制新映像中的信息，请排除`.proc`、`.tmp`、`.mnt`、`.dev`和`.sys`目录，并在`basebackup.tar.gz`文件下创建所有内容:
    ```
    tar -czf basebackup.tar.gz --exclude=backup.tar.gz --exclude=proc --exclude=tmp --exclude=mnt --exclude=dev --exclude=sys /
    ```
3.  To ensure that you have data in your `basebackup.tar.gz` file, run the `du` command to make sure it is of substantial size:
    ```
    du -sh basebackup.tar.gz 
    ```
    输出返回`basebackup.tar.gz`文件的大小:
    ```
    4.8M	basebackup.tar.gz
    ```
4.  Run the `docker ps` command to find the container ID that is currently holding your new backup file, the `.tar` file:
    ```
    docker ps
    ```
    该命令将返回映像的容器标识:
    ```
    CONTAINER ID        IMAGE        COMMAND      CREATED
    6da7a8c1371a        basic-app    "sh"         About a minute ago
    ```
5.  使用我们正在运行的容器的容器标识以及您想要复制的位置和文件，使用`docker cp`命令将`.tar`文件复制到您的开发系统上。以下命令将使用您的容器 ID 执行此操作，并将其移动到您的`/tmp`目录中:
    ```
    docker cp 6da7a8c1371a:/var/www/html/basebackup.tar.gz /tmp/
    ```
6.  使用`docker import`命令创建新映像。只需将`basebackup.tar.gz`文件的输出导入`docker import`命令，在此过程中命名新映像。在我们的例子中，称之为`mynew-base` :
    ```
    cat /tmp/basebackup.tar.gz | docker import - mynew-base
    ```
7.  Use the `docker images` command with the name of your new image to verify that it has been created in the previous step:
    ```
    docker images mynew-base
    ```
    您应该得到如下输出:
    ```
    REPOSITORY    TAG     IMAGE ID      CREATED         SIZE
    mynew-base    latest  487e14fca064  11 seconds ago  8.79MB
    ```
8.  Run the `docker history` command:
    ```
    docker history mynew-base
    ```
    您将看到我们的新映像只有一层:
    ```
    IMAGE         CREATED         CREATED BY   SIZE   COMMENT
    487e14fca064  37 seconds ago               .79MB  Imported from –
    ```
9.  To test your new image, run the `docker run` command on the new image, and list the files in your `/var/www/html/` directory:
    ```
    docker run mynew-base ls -l /var/www/html/
    ```
    该命令应该返回类似的输出:
    ```
    total 4
    -rw-r--r--    1 501      dialout      283 Oct  3 04:07 Dockerfile
    ```
    可以看到映像已经创建成功，`/var/www/html/`目录下有 24 个文件。
本练习已经向您展示了如何从运行的系统或环境创建基础映像，但是如果您想要创建一个小的基础映像，那么下一部分将向您展示如何使用 **scratch** 映像。
## 划痕映像
暂存映像是 Docker 创建的映像，专门用于构建最小映像。如果您有一个用 Java、C++等编写并编译的二进制应用，可以在没有任何支持应用的情况下自行运行，那么 scratch 将帮助您使用您可以创建的最小映像之一运行该映像。
当我们在我们的`Dockerfile`中使用`FROM scratch`命令时，我们指定我们将使用 Docker 的保留最小映像，它被命名为`scratch`来构建我们的新容器映像。
## 练习 3.04:使用抓图
在本练习中，您将创建一个小的 C 应用在映像上运行。要完成这个练习，你不需要真正了解 C 语言。该应用将安装在您的基本映像上，以确保映像尽可能小。您创建的应用将向您展示如何创建最少的可用基础映像之一:
1.  Pull the scratch image using the `docker pull` command:
    ```
    docker pull scratch
    ```
    您会注意到您将无法提取映像，并将收到一条错误消息:
    ```
    Using default tag: latest
    Error response from daemon: 'scratch' is a reserved name
    ```
2.  创建一个 C 程序，您将构建到我们的`Dockerfile`中使用的映像中。创建名为`test.c` :
    ```
    touch test.c
    ```
    的程序文件
3.  打开文件，加入下面的代码，在控制台上简单的从 1 数到 10:
    ```
    #include 
    int main()
    {
        int i;
        for (i=1; i<=10; i++)
        {
            printf("%d\n", i);
        }
        return 0;
    }
    ```
4.  Build the image from the command line by running the following command to build the C program:
    ```
    g++ -o test -static test.c
    ```
    注意
    如果您想在映像中构建它之前测试它，您可以通过在命令行上运行`./test`来完成。
5.  创建`Dockerfile`。`Dockerfile`将非常少，但需要从`FROM scratch`开始。文件的其余部分会将 C 程序添加到您的映像中，然后在*第 4 行* :
    ```
    1 FROM scratch
    2
    3 ADD test /
    4 CMD ["/test"]
    ```
    中运行它
6.  建立新形象。在这种情况下，使用以下命令调用映像【T0:
    ```
    docker build -t scratchtest .