8:
9:
10:
11:
12:
13:
for j ← z to Z − 1 do
read a random valid dummy
data(cid:29) ← read and decrypt data[ptrs[ j]]
z ← z + 1
if addrs[ j] (cid:28)= ⊥ then
block ← (addr[ j], leaf[ j], data(cid:29))
Stash ← Stash∪ block
1: function WriteBucket(bucket, Stash)
2:
3:
4:
5:
6:
ﬁnd up to Z blocks from Stash that can reside
in this bucket, to form addrs, leaves, data(cid:29)
ptrs ← PRP(0,Z + S)
for j ← 0 to Z − 1 do
valids ← {1}Z+S
count ← 0
encrypt addrs, leaves, ptrs, data
write out count, valids, addrs, leaves, ptrs, data
data[ptrs[ j]] ← data(cid:29)[ j]
(cid:30) or truly random
7:
8:
9:
10:
the protocol faithfully, the client can let the server up-
date count and valids. All the other structures should be
probabilistically encrypted.
For example,
Having deﬁned the bucket structure, we can be more
speciﬁc about some of the operations in earlier sec-
tions.
in Algorithm 2 Line 5 means
reading P(l,i).data[oﬀset], and Line 6 means setting
P(l,i).valids[oﬀset] to 0.
Now we describe the helper functions in detail.
GetBlockOﬀset reads in the valids, addrs, ptrs ﬁeld, and
looks for the block of interest. If it ﬁnds the block of
interest, meaning that the address of a still valid block
matches the block of interest, it returns the permuted lo-
cation of that block (stored in ptrs). If it does not ﬁnd
the block of interest, it returns the permuted location of
a random valid dummy block.
428  24th USENIX Security Symposium 
USENIX Association
14
Notation
Size (bits)
Meaning
count
valids
addrs
leaves
ptrs
data
EncSeed
log(S)
(Z + S)∗ 1
Z ∗ log(N)
Z ∗ L
Z ∗ log(Z + S)
(Z + S)∗ B
λ (security parameter)
# of times this bucket has been touched by ReadPath since it was last shufﬂed
Indicates whether each of the Z + S blocks is valid
Address for each of the Z (potentially) real blocks
Leaf label for each of the Z (potentially) real blocks
Offset in the bucket for each of the Z (potentially) real blocks
Data ﬁeld for each of the Z + S blocks, permuted according to ptrs
Encryption seed for the bucket; count and valids are stored in the clear
Table 6: Ring ORAM bucket format. All logs are taken to their ceiling.
ReadBucket reads all of the remaining real blocks in a
bucket into the stash. For security reasons, ReadBucket
always reads exactly Z blocks from that bucket. If the
bucket contains less than Z valid real blocks, the remain-
ing blocks read out are random valid dummy blocks. Im-
portantly, since we allow at most S reads to each bucket
before reshufﬂing it, it is guaranteed that there are at least
Z valid (real + dummy) blocks left that have not been
touched since the last reshufﬂe.
WriteBucket evicts as many blocks as possible (up to
Z) from the stash to a certain bucket. If there are z(cid:30) ≤ Z
real blocks to be evicted to that bucket, Z +S−z(cid:30) dummy
blocks are added. The Z + S blocks are then randomly
shufﬂed based on either a truly random permutation or a
Pseudo Random Permutation (PRP). The permutation is
stored in the bucket ﬁeld ptrs. Then, the function resets
count to 0 and all valid bits to 1, since this bucket has
just been reshufﬂed and no blocks have been touched.
Finally, the permuted data ﬁeld along with its metadata
are encrypted (except count and valids) and written out
to the bucket.
B Proof of the Lemmas
To prove Lemma 1, we made a little change to the Ring
ORAM algorithm. In Ring ORAM, a ReadPath opera-
tion adds the block of interest to the stash and replaces it
with a dummy block in the tree. Instead of making the
block of interest in the tree dummy, we turn it into a stale
block. On an EvictPath operation to path l, all the stale
blocks that are mapped to leaf l are turned into dummy
blocks. Stale blocks are treated as real blocks in both
ORAMZ,A
(including GZ) until they are
turned into dummy blocks. Note that this trick of stale
blocks is only to make the proof go through.
It hurts
the stash occupancy and we will not use it in practice.
With the stale block trick, we can use induction to prove
Lemma 1.
and ORAM∞,A
L
L
Proof of Lemma 1. Initially, the lemma obviously holds.
Suppose GSZ (S∞) =S Z after some accesses. We need to
15
S(cid:30)Z
(S∞) = S(cid:30)Z where S(cid:30)Z and S(cid:30)∞ are the states
show that G
after the next operation (either ReadPath or EvictPath).
A ReadPath operation adds a block to the stash (the root
bucket) for both ORAMZ,A
, and does not
move any blocks in the tree except turning a real block
into a stale block. Since stale blocks are treated as real
blocks, G
and ORAM∞,A
L
L
Now we show the induction holds for an EvictPath
l be an EvictPath operation to P(l)
l be an EvictPath operation
l (SZ) and S(cid:30)∞ =
l has the same effect as EP∞
l
operation. Let EPZ
(path l) in ORAMZ,A
L
to P(l) in ORAM∞,A
L
EP∞
followed by post-processing, so
and EP∞
. Then, S(cid:30)Z = EPZ
l (S∞). Note that EPZ
(S∞) =S (cid:30)Z holds.
S(cid:30)Z
S(cid:30)Z = EPZ
l (SZ) =G
(EP∞
= G
S(cid:30)Z
(EP∞
l (GSZ (S∞)))
S(cid:30)Z
l (SZ))
The last equation is due to the induction hypothesis.
It remains to show that
G
(EP∞
(EP∞
S(cid:30)Z
S(cid:30)Z
(EP∞
l (S∞)) ,
l (GSZ (S∞))) = G
S(cid:30)Z
(S(cid:30)∞). To show this, we decompose G into
which is G
steps for each bucket, i.e., GSZ (S∞) = g1g2···g 2L+1 (S∞)
where gi processes bucket b∞
in reference to bZ
i . Sim-
i
into g(cid:30)1g(cid:30)2···g(cid:30)2L+1 where
ilarly, we decompose G
S(cid:30)Z
each g(cid:30)i processes bucket b(cid:30)∞
of S(cid:30)∞ in reference
i
to b(cid:30)Z
of S(cid:30)Z. We now only need to show that
i
for any 0  c(T ) + R. Observe that G can assign the blocks
in a bucket only to an ancestor bucket. Since T can store
at most c(T ) blocks, more than R blocks must be as-
signed to the stash by G.
L
Only if part: Suppose that st (GSZ (S∞)) > R. Let T
be the maximal rooted subtree such that all the buck-
ets in T contain exactly Z blocks after post-processing
G. Suppose b is a bucket not in T . By the maximality
of T , there is an ancestor (not necessarily proper ances-
tor) bucket b(cid:31) of b that contains less than Z blocks after
post-processing, which implies that no block from b can
go to the stash. Hence, all blocks that are in the stash
must have originated from T . Therefore, it follows that
X(T ) > c(T ) +R.
L
L
Proof of Lemma 3. For a bucket b in ORAM∞,A
, de-
ﬁne Y (b) to be the number of blocks in b before post-
It sufﬁces to prove that ∀b ∈ ORAM∞,A
,
processing.
E[Y (b)] ≤ A/2.
If b is a leaf bucket, the blocks in it are put there by the
last EvictPath operation to that leaf/path. Note that only
real blocks could be put in b by that operation, although
some of them may have turned into stale blocks. Stale
blocks can never be moved into a leaf by an EvictPath
operation, because that EvictPath operation would re-
move all the stale blocks mapped to that leaf. There are
at most N distinct real blocks and each block has a prob-
ability of 2−L to be mapped to b independently. Thus
E[Y (b)] ≤ N · 2−L ≤ A/2.
If b is not a leaf bucket, we deﬁne two variables m1 and
m2: the last EvictPath operation to b’s left child is the
m1-th EvictPath operation, and the last EvictPath oper-
ation to b’s right child is the m2-th EvictPath operation.
Without loss of generality, assume m1  m2 will not be in b as the last access to b
(m2-th) has already passed. Therefore, only blocks with
time stamp m1 < m∗ ≤ m2 will be put in b by the m2-
th access. (Some of them may be accessed again after
the m2-th access and become stale, but this does not af-
fect the total number of blocks in b as stale blocks are
treated as real blocks.) There are at most d = A|m1− m2|
such blocks, and each goes to b independently with a
probability of 2−(i+1), where i is the level of b. The de-
terministic nature of evictions in Ring ORAM ensures
|m1 − m2| = 2i. (One way to see this is that a bucket b
at level i will be written every 2i EvictPath operations,
and two consecutive EvictPath operations to b always
travel down the two different children of b.) Therefore,
E[Y (b)] ≤ d · 2−(i+1) = A/2 for any non-leaf bucket as
well.
430  24th USENIX Security Symposium 
USENIX Association
16