‚Ä¢ We made all our code available2, from the testing environ-
ment setup using Docker, to the password recovery script.
Our attack illustrates the danger of overlooking a widely poten-
tial attack during a standardization process. Therefore, we hope that
our work would raise awareness concerning the need of constant-
time algorithms by design that do not rely on savvy developers to
provide secure implementations of ad-hoc mitigations.
practical results (see Section 4).
1.3 Attack Scenario
We suppose a classical infrastructure where clients communicate
with an access point (AP) across a wireless network. The goal of
the attacker is to steal the password used to establish a secure
communication with the AP. Once the password is compromised,
the attacker can enter the network and perform malicious activities.
In order to leverage the vulnerabilities defined in this paper, the
attacker requires to perform two tasks. First, they need to install a
spy daemon on a client station without any particular privilege. Sec-
ond, they need to create a rogue AP that behaves as the legitimate
AP, but can use different MAC addresses for different connections.
Of course, we suppose that the rogue AP does not know the
correct password, and therefore any session establishment between
the rogue AP and a valid client will fail. Here, the goal of the rogue
AP is to state different MAC addresses and to trick a client device
to start a Dragonfly key exchange. Thus, the Wi-Fi daemon, using
the correct password, will perform some operations that will be
monitored by the attacker spy process. For each of these (failed)
connections, the spy will generate a new trace that leaks the number
of iterations needed to successfully encode the password. These bits
of information are then used offline in order to prune a dictionary
by verifying the number of iterations needed for each password.
Each trace, with a different MAC address, yields a different iteration
number. In our paper, we estimate that attackers require 16 traces
to prune, for instance, the entire Rockyou dictionary. It is worth
noting that, in our work, a trace generation needs 10 measurements
1https://freeradius.org/about/#usage_statistics
2https://gitlab.inria.fr/ddealmei/poc-iwd-acsac2020/-/tree/master/
Dragonblood is Still Leaking:
Practical Cache-based Side-Channel in the Wild
with the same MAC address in order to guarantee a high accurate
leakage.
1.4 Responsible Disclosure
Our attacks were performed on the most updated version of iwd
and FreeRADIUS, as published at the time of discovery. We com-
piled both libraries using their default compilation flags, leaving all
side-channel countermeasures in place. We reported our findings to
the maintainers of iwd and FreeRADIUS following the practice of
responsible disclosure. We further actively participated in coding as
well as the empirical verification of the proposed countermeasures.
Correspondingly, three patches were committed on the vulnerable
projects: on iwd3, ell4 (the underlying cryptographic library of iwd,
also maintained by Intel), and FreeRadius5. On a side note, iwd
maintainers prefered not to scrupulously respect the recommen-
dations of the RFC 7664 [16] by fixing the number of iterations to
30 (instead of 40). Moreover, we received special thanks from Alan
Dekok, the project leader of FreeRADIUS, for our disclosure of the
issue, and for helping with creating and verifying the fix.
We did not issue any communication to the Wi-Fi Alliance, since
the identified vulnerability is mainly caused by implementation
flaws, and not the standard itself.
2 BACKGROUND
In this section, we introduce the Dragonfly protocol, and describe
the variant currently used in WPA3 and EAP-pwd.
2.1 The Dragonfly Key Exchange
Dragonfly is part of the Password Authenticated Key Exchange
(PAKE) family. Its purpose is to use a low entropy password as
an authentication medium, and to derive some high entropy cryp-
tographic material from it. An important security requirement of
PAKE protocols is to avoid offline dictionary attack: the only way
an attacker should be able to get information about the password
is to run the protocol with a guess and observe the outcome. Since
Dragonfly is a symmetric PAKE, each party knows the password
before initiating the protocol.
Dragonfly has been designed by Dan Harkins in 2008. In 2012, it
has been submitted to the CFRG as a candidate standard for general
internet use. This standardization ended up in 2015 by the release of
RFC 7664 [16]. Along with the protocol described in this standard,
some other variants have been included in other protocols, such as
TLS-pwd [19], WPA3 [1] or EAP-pwd [40]. These variants mainly
differ by instantiation details, such as some constant values.
The security of Dragonfly is based on the discrete logarithm
problem. Implementations can therefore rely on either Finite Field
Cryptography (FFC) over multiplicative groups modulo a prime
(MODP groups) or Elliptic Curve Cryptography (ECC) over prime
field (using ECP groups). The exact workflow of the Dragonfly hand-
shake varies slightly depending on the underlying group (ECP/-
MODP). In order to avoid confusion, we adopt a classic elliptic curve
3https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=
211f7dde6e87b4ab52430c983ed75b377f2e49f1
4https://git.kernel.org/pub/scm/libs/ell/ell.git/commit/?id=
47c2afeec967b83ac53b5d13e8f2dc737572567b
5https://github.com/FreeRADIUS/freeradius-server/commit/
6f0e0aca4f4e614eea4ce10e226aed73ed4ab68b
ACSAC 2020, December 7‚Äì11, 2020, Austin, USA
notation: ùê∫ is the generator of a group, with order ùëû. Lowercase
denotes scalars and uppercase denotes group element. For elliptic
curve, we assume the equation to be in the short Weirestrass form
ùë¶2 = ùë•3 + ùëéùë• + ùëè mod ùëù where ùëé, ùëè and ùëù are curve-dependent and
ùëù is prime.
The protocol follows the same workflow for both side, meaning it
can be performed simultaneously by both side, without attributing
a role. It can be broken down into three main parts: (i) password
derivation; (ii) password commitment; and (iii) confirmation.
Following the disclosure of Dragonblood attack [35] in 2019,
both the Wi-Fi standard [17] and EAP-pwd [18] are updating the
password derivation function of Dragonfly. Due to the fact that
updates are long to be approved, and even longer to be deployed,
current implementations of WPA3 still use the original derivation
function, as described in [16]. In this section, we will focus on
currently deployed implementations, hence the original design.
2.1.1 Password derivation. First, both the sender and the receiver
need to convert the shared password into a group element. To do so,
the standard describes a try-and-increment method called Hunting
and Pecking. This approach consists in hashing the password along
with the identity of both parties and a counter until the result-
ing value corresponds to a group element. For MODP groups, this
method, called hash-to-group, converts the password into an inte-
ger modulo ùëù. For ECP groups, the method, called hash-to-curve,
converts the password into the x-coordinates of an elliptic curve
point. The y-coordinate is chosen at the end from the parity of the
digest. The pseudocode describing this process on ECP groups is
summed-up in Listing 1.
Along the standardization process, various design flaws have
been identified regarding the password-dependent nature of this
function. Therefore, some mitigations were introduced to avoid
password-dependent time variation in the execution of the func-
tion. Indeed, the number of rounds needed to find a value ùë• that
corresponds to a point on the curve is directly related to the pass-
word and the parties identities. First, the standard mandates a fixed
number of iterations in the derivation loop, noted ùëò, regardless of
the correct iteration. Setting this limit at ùëò = 40 is recommended
to minimize the risk of a password needing more iterations. All
extra operations are performed on a random string, with no impact
on the resulting element. Generating a dummy string for the extra
DragonbloodisStillLeaking:PracticalCache-basedSide-ChannelintheWildACSAC2020,December7‚Äì11,2020,Austin,USAofiterationsneededtosuccessfullyencodethepassword.Thesebitsofinformationarethenusedofflineinordertopruneadictionarybyverifyingthenumberofiterationsneededforeachpassword.Eachtrace,withadifferentMACaddress,yieldsadifferentiterationnumber.Inourpaper,weestimatethatattackersrequire16tracestoprune,forinstance,theentireRockyoudictionary.Itisworthnotingthat,inourwork,atracegenerationneeds10measurementswiththesameMACaddressinordertoguaranteeahighaccurateleakage.1.4ResponsibleDisclosureOurattackswereperformedonthemostupdatedversionofiwdandFreeRADIUS,aspublishedatthetimeofdiscovery.Wecom-piledbothlibrariesusingtheirdefaultcompilationflags,leavingallside-channelcountermeasuresinplace.WereportedourfindingstothemaintainersofiwdandFreeRADIUSfollowingthepracticeofresponsibledisclosure.Wefurtheractivelyparticipatedincodingaswellastheempiricalverificationoftheproposedcountermeasures.Correspondingly,threepatcheswerecommittedonthevulnerableprojects:oniwd3,ell4(theunderlyingcryptographiclibraryofiwd,alsomaintainedbyIntel),andFreeRadius5.Onasidenote,iwdmaintainerspreferednottoscrupulouslyrespecttherecommen-dationsoftheRFC7664[16]byfixingthenumberofiterationsto30(insteadof40).Moreover,wereceivedspecialthanksfromAlanDekok,theprojectleaderofFreeRADIUS,forourdisclosureoftheissue,andforhelpingwithcreatingandverifyingthefix.WedidnotissueanycommunicationtotheWi-FiAlliance,sincetheidentifiedvulnerabilityismainlycausedbyimplementationflaws,andnotthestandarditself.2BACKGROUNDInthissection,weintroducetheDragonflyprotocol,anddescribethevariantcurrentlyusedinWPA3andEAP-pwd.2.1TheDragonflyKeyExchangeDragonflyispartofthePasswordAuthenticatedKeyExchange(PAKE)family.Itspurposeistousealowentropypasswordasanauthenticationmedium,andtoderivesomehighentropycryp-tographicmaterialfromit.AnimportantsecurityrequirementofPAKEprotocolsistoavoidofflinedictionaryattack:theonlywayanattackershouldbeabletogetinformationaboutthepasswordistoruntheprotocolwithaguessandobservetheoutcome.SinceDragonflyisasymmetricPAKE,eachpartyknowsthepasswordbeforeinitiatingtheprotocol.DragonflyhasbeendesignedbyDanHarkinsin2008.In2012,ithasbeensubmittedtotheCFRGasacandidatestandardforgeneralinternetuse.Thisstandardizationendedupin2015bythereleaseofRFC7664[16].Alongwiththeprotocoldescribedinthisstandard,someothervariantshavebeenincludedinotherprotocols,suchasTLS-pwd[19],WPA3[1]orEAP-pwd[40].Thesevariantsmainlydifferbyinstantiationdetails,suchassomeconstantvalues.3https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=211f7dde6e87b4ab52430c983ed75b377f2e49f14https://git.kernel.org/pub/scm/libs/ell/ell.git/commit/?id=47c2afeec967b83ac53b5d13e8f2dc737572567b5https://github.com/FreeRADIUS/freeradius-server/commit/6f0e0aca4f4e614eea4ce10e226aed73ed4ab68b1defhash2curve(pwd,id1,id2):2found,counter=False,03A,B=max(id1,id2),min(id1,id2)4whilecounter<kornotfound:5counter+=16base=Hash(A||B||pwd||counter)7seed=KDF(base,label_1,p)8ifis_quadratic_residue(seed^3+a‚àóseed+b,p):9iffound==False:10x,save,found=seed,base,True11#NotdescribedintheRFC,butimplementedinSAE12pwd=random(32)13y=sqrt(x^3+ax+b)14P=(x,y)iflsb(y)==lsb(save)else(x,p‚àíy)1516returnPListing1:HuntingandPeckingonECPgroupasusedinWPA3.Thevalueoflabel_1andkmayvaryalongwiththeimplementation.ThesecurityofDragonflyisbasedonthediscretelogarithmproblem.ImplementationscanthereforerelyoneitherFiniteFieldCryptography(FFC)overmultiplicativegroupsmoduloaprime(MODPgroups)orEllipticCurveCryptography(ECC)overprimefield(usingECPgroups).TheexactworkflowoftheDragonflyhand-shakevariesslightlydependingontheunderlyinggroup(ECP/-MODP).Inordertoavoidconfusion,weadoptaclassicellipticcurvenotation:ùê∫isthegeneratorofagroup,withorderùëû.Lowercasedenotesscalarsanduppercasedenotesgroupelement.Forellipticcurve,weassumetheequationtobeintheshortWeirestrassformùë¶2=ùë•3+ùëéùë•+ùëèmodùëùwhereùëé,ùëèandùëùarecurve-dependentandùëùisprime.Theprotocolfollowsthesameworkflowforbothside,meaningitcanbeperformedsimultaneouslybybothside,withoutattributingarole.Itcanbebrokendownintothreemainparts:(i)passwordderivation;(ii)passwordcommitment;and(iii)confirmation.FollowingthedisclosureofDragonbloodattack[35]in2019,boththeWi-Fistandard[17]andEAP-pwd[18]areupdatingthepasswordderivationfunctionofDragonfly.Duetothefactthatupdatesarelongtobeapproved,andevenlongertobedeployed,currentimplementationsofWPA3stillusetheoriginalderivationfunction,asdescribedin[16].Inthissection,wewillfocusoncurrentlydeployedimplementations,hencetheoriginaldesign.2.1.1Passwordderivation.First,boththesenderandthereceiverneedtoconvertthesharedpasswordintoagroupelement.Todoso,thestandarddescribesatry-and-incrementmethodcalledHuntingandPecking.Thisapproachconsistsinhashingthepasswordalongwiththeidentityofbothpartiesandacounteruntiltheresult-ingvaluecorrespondstoagroupelement.ForMODPgroups,thismethod,calledhash-to-group,convertsthepasswordintoaninte-germoduloùëù.ForECPgroups,themethod,calledhash-to-curve,convertsthepasswordintothex-coordinatesofanellipticcurvepoint.They-coordinateischosenattheendfromtheparityofthedigest.ThepseudocodedescribingthisprocessonECPgroupsissummed-upinListing1.Alongthestandardizationprocess,variousdesignflawshavebeenidentifiedregardingthepassword-dependentnatureofthisfunction.Therefore,somemitigationswereintroducedtoavoidACSAC 2020, December 7‚Äì11, 2020, Austin, USA
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt
operations is not described in RFC 7664, but has been discussed
by the CFRG during the standardization process, and has been in-
cluded in deployed variants of Dragonfly (such as TLS-pwd [19]
and SAE [1]). In our paper, we show that such an operation is not
enough to defend against our cache attacks.
Sensitive information may also leak when checking for the va-
lidity of the potential x-coordinate (Listing 1, line 7). Indeed, WPA3
mandates to compute the Legendre before computing ùë¶. However,
textbook Legendre may not be constant time and leak information
about the value of ùë• [20]. To overcome this issue, the protocol has
been updated [12, 15] to blind the computations by generating a
random number for each test, squaring it, and multiplying it to the
number being tested. The result is then multiplied by a per-session
random quadratic (non-)residue before computing the Legendre
symbol. The square root is then computed once and for all at the
end of the function.
2.1.2 Commitment and Confirmation phase. Once the shared group
element has been computed, both parties exchange a commit frame
followed by a confirmation frame to conclude the handshake, as
illustrated in Figure 1.
The commit frame is built with two values: a commit scalar
ùë†ùëñ = ùëüùëñ + ùëöùëñ mod ùëû, computed by adding two random numbers
ùëüùëñ, ùëöùëñ ‚àà [2, ùëû), and a commit element ùëÑùëñ = ‚àíùëöùëñùëÉ. When receiving
this frame, a party needs to check if the value ùë†ùëñ is in the bounds
(i.e. ùë†ùëñ ‚àà [2, ùëû)) and if the commit element ùëÑùëñ belongs to the group.
A failure in any check results in aborting the handshake.
In the confirmation phase, both parties compute the master key
ùêæ. For MODP groups, the key can be used as is, but the x-coordinate
is extracted in case of ECP group. This value is then derived into two
sub keys using a KDF: ùëòùëêùëò is a confirmation key and ùëöùëò is used as
a master key for the subsequent exchanges. Using the confirmation
key, HMAC is computed over the transcript of the session. The
resulting tag is included then in a confirm frame, to be verified by
the other party. The handshake succeeds only if both verification
ends successfully.
2.2 Integration of Dragonfly in WPA3
WPA3 uses a slight variant of Dragonfly, called Simultaneous Au-
thentication of Equals (SAE) [1]. In this particular variant, the label
values are fixed and each party is identified by its MAC address
(ùëñùëë1 and ùëñùëë2 in Listing 1).
The SAE handshake is executed between the client and the access
point (AP) in order to compute the Pairwise Master Key (PMK),
called ùëöùëò in Figure 1. Afterward, a classic WPA2 4-way handshake
is performed with this PMK in order to derive fresh cryptographic
material. Since the entropy of the initial master key is significantly
higher than in WPA2, the dictionary attack on the 4-way handshake
is no longer relevant.
2.3 Micro-architectural Preliminaries
2.3.1 Cache architecture. To mitigate the gap between slow mem-
ory access and fast processing, CPU benefits from fast access caches
that are located close to the processor cores. The storage capacity
is kept small, so only currently or recently used data are stored.
On modern processors, the CPU cache is usually divided into sev-
eral levels following an access hierarchy. Higher-level caches are
Figure 1: Dragonfly handshake workflow. ùëÉ is the group el-
ement derived from the password, and ùëôùëéùëèùëíùëô2 is a string that
may vary along with the protocol in which the handshake
is performed.
closer to the core and typically smaller and faster than lower-level
caches. In classical Intel architecture, which we will consider from
now on, CPU cache is divided into three levels. Each core has two
dedicated caches, L1 and L2, shared by all processes executing on
the same core. The third cache, called Last-Level-Cache (LLC) is
shared between all cores, hence all the processes.
When the CPU tries to access a memory address, it will first
check the higher level cache. If the memory line has been cached,
the processor will find it (cache hit). Otherwise, in a cache miss, the
processor will keep looking in lower memory, down to the DRAM if
needed. Once the appropriate memory line is found, the processor