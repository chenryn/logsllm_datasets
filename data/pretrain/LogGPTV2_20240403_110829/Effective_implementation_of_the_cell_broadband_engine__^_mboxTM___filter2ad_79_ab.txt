tion loader are described.
3.1 Software Stack
Figure 2 depicts our software stack consisting of the build
tools, the PPE isolation runtime and the SPE isolation run-
time. The ’spu-isolated-app’ is one of the build tools used
to sign and encrypt an ELF binary image for the SPEs. We
call a new binary image produced by the spu-isolated-app
in such a way as an SPE secure application. Note that the
SPE secure application in the signed and encrypted form
is structured in the original binary format. This format is
described in Section 3.3.
In the PPE isolation runtime, we have the Linux kernel
and libspe2 to support the interfaces to enable the isola-
tion mode. For programming, it is easy to port a regular
Cell/B.E. application to isolation mode, since the change
visible to the application programmers is just setting one
ﬂag. The two programming models are compared later in
this section.
The most important part is the SPE isolation runtime.
The SPE isolation runtime consists of three layers: the hard-
ware authentication layer, the software authentication layer,
and the application layer. The hardware authentication
layer includes the cryptographic algorithms to verify and
decrypt the upper layer, the SPE isolation loader. The soft-
ware authentication layer includes the cryptographic algo-
rithms to verify and decrypt the SPE secure application.
The SPE secure application running on top of the layered
model is invoked after a chain-of-trust is established from
the hardware authentication layer to the application layer.
The software layer provides separation of the hardware
and the application layer so that if one changes (for exam-
ple, a diﬀerent cryptographic algorithm is used), the other
is not aﬀected.
In addition, it is easy to change signing
algorithms, encryption algorithms or keys implemented in
the SPE isolation loader depending on application require-
ments. Application programmers can beneﬁt from this lay-
ered structure for portability, ﬂexibility, and security in their
applications.
Instead of supporting the encrypted application execution,
obfuscation techniques [7, 24] can be applied to hide the ap-
plication secrets embedded in the application images from
malicious parties. However, these are not fundamental solu-
tions. Therefore, we recommend encrypted application exe-
cution by the SPE isolation loader.
3.2 Comparison of Programming Models
In this section, we compare the two programming models,
the regular Cell/B.E. programming model and the secure
Cell/B.E. programming model. Because of the heterogene-
ity of the Cell/B.E., application developers generally write
two types of source code: one for the PPE and the other for
the SPEs. Since the instruction set of the PPE is diﬀerent
from that of the SPEs, it is necessary to generate both PPE
and SPE executables that are dispatched to the appropri-
ate cores. For the simplicity of application execution, both
binaries are integrated into one binary by a linker, ppu-ld
provided as part of the GNU toolchain [11].
305Figure 2: Software stack for the Cell/B.E. isolation environment
It is important to allow Cell/B.E. users to develop secure
SPE applications with the same programming paradigm as
used for regular Cell/B.E. applications. Figure 3 compares
the two programming models. The left of the ﬁgure shows
the execution ﬂow of the regular Cell/B.E. application, while
the execution ﬂow of the SPE secure applications is illus-
trated on the right.
In the regular case, here is how the SPE application is
started. After a PPE executable is initiated in Steps 1 and
2, libspe2 and the Linux kernel launch the SPE executable
embedded in the PPE executable (Figure 3 A(i)). In Step 3,
the SPE executable is transferred from the system memory
to the target LS (Figure 3 A(ii)). In Step 4, the Linux kernel
writes an SPU-Run request to the speciﬁc register. In Step
5, the SPE executable starts from its entry point (Figure 3
A(iii)).
In contrast, in the isolation case, although the binary im-
age format of the SPE secure application is diﬀerent from the
regular SPE application, the overall execution ﬂow is similar
to the regular ﬂow. In Steps 1 and 2, the PPE-SPE inte-
grated application uses libspe2 and the Linux kernel to start
the SPU isolation mode (Figure 3 B(i)). In contrast to the
regular case, the hardware fetches the SPE isolation loader
ﬁrst after the mode is switched to the SPU isolation mode.
At the same time, the hardware validates and decrypts the
SPE isolation loader in Step 3 (Figure 3 B(ii)). In Steps 4
and 5, the validated SPE isolation loader fetches, validates
and decrypts the SPE secure application (Figure 3 B(iii)).
After that, as Figure 3 B(iv) shows, only the validated SPE
secure application starts running in Step 6.
3.3 SPE Secure Application Format and Its
Transformation
An SPE secure application has the special format, because
we need information about the integrity check and the en-
crypted part in the application validation and decryption
process. Similar to the previous work on [8], the binary for-
mat of an SPE secure application is illustrated on the right
side of Figure 4. The spu-isolated-app tool transforms the
SPU ELF binary format (SPE executable) to this binary
format.
As the left hand side of Figure 4 shows, spu-isolated-app
extracts all of the code and data segments including the
relocatable segments and read-only segments from the SPU
ELF binary in the ﬁrst step. Since we sign and encrypt the
ﬁnal memory map image, the bss section is also extracted
from the SPE-ELF executable and is ﬁlled with zeros. Then
spu-isolated-app encrypts the user-speciﬁed ELF segment
(ALL, any one of the segments, or none) with AES-128/CBC
mode. The reason why we provide application programmers
with several options to encrypt ELF segments is to meet
application requirements. Some applications do not need
the code encryption, but they require the code veriﬁcation,
while some applications require both. During this process,
an AES 128 key is required. Although it is possible for the
user to supply an AES 128 key, the current spu-isolated-app
automatically and randomly generates this key each time
this tool is invoked. Note that spu-isolated-app does not
allow weak keys or semi-weak keys in this process.
After the executable encryption, spu-isolated-app encrypts
the previously used AES key with the SPE isolation loader’s
encryption key. The spu-isolated-app tool supports RSA-
1024, RSA-1536, and RSA-20482 in this AES key encryp-
tion. The Cell/B.E. Security SDK provides an RSA 2048-
bit public key as the SPE isolation loader’s encryption key.
Thus, spu-isolated-app will encrypt the AES key with RSA-
2048. Now that the encryption of the executable and the
AES key encryption are ﬁnished, spu-isolated-app formats
the encrypted data by attaching the secure application header
and the encryption section header.
Afterward, spu-isolated-app will generate the digital sig-
nature. It calculates hash values from oﬀset 0 of the binary
image to the end of the encrypted key section. We use the
SHA-1 algorithm for this purpose. To generate a digital sig-
nature, spu-isolate-app encrypts the SHA-1 hash values with
a user-speciﬁed RSA private key. Supported algorithms in
the digital signature generation are RSA-1024, RSA-1536
and RSA-2048 as in the AES key encryption. Finally, spu-
isolated-app produces the image on the right side of Figure 4
by attaching the signature section header, the digital signa-
ture and the user certiﬁcate associated with the RSA private
key used in the digital signature generation. In the current
implementation, the size of the SPE secure application is
a multiple of 16 bytes, since the DMA engine in each SPE
requires such a size.
3.4 Secure Application Loading
As explained in the previous section, spu-isolated-app builds
an SPE secure application with an encrypt-then-sign pol-
2The SPE isolation loader supports the corresponding de-
cryption algorithms
306Figure 3: Comparison between the regular SPE application (left) and the SPE secure application (right)
programming models
Figure 4: The binary format of the SPE secure application and its generation
icy. Compared with a sign-then-encrypt policy, this policy
has a performance advantage. If the loader detects a veri-
ﬁcation error in the encrypt-then-sign case, then the loader
does only the RSA and SHA-1 operations. In the sign-then-
encrypt case, the loader should perform the RSA and SHA-
1 operations after decrypting the application. Sometimes,
the decryption process can be time-consuming. The crypto-
graphic performance of the SPE isolation loader is discussed
in Section 4.
However, [9] pointed out that encrypt-then-sign has a se-
curity ﬂaw. In particular, it is possible to replace the sig-
nature if a malicious party has a legitimate signing key. This
attack is the ’substituted-ciphertext attack’. The substituted-
ciphertext attack is a fatal problem for SPE secure applica-
tions.
Let us assume that spu-isolated-app only does encrypt-
then-sign to build a secure application:
1. key generation: KAAlice to encrypt and decrypt the
application secrets, S.
2. application encryption: KAAlice{S}
3. key encryption: {KAAlice}loader
4. application hash calculation: HASH(AP P )
5. signature generation: [HASH(AP P )]CAlice
In Steps 1 and 2, spu-isolated-app generates an AES key,
KAAlice, and encrypts the application secrets, S, with this
key.
In Step 3, it encrypts KAAlice with the SPE isola-
tion loader encryption key (an RSA public key). Then spu-
isolated-app calculates the SHA-1 hash values, HASH(AP P )
for the application image, where AP P includes KAAlice{S}
and {KAAlice}loader, and then signs it with a private key
associated with Alice’s digital certiﬁcate, CAlice in Step 5.
Figure 5 A(i)) shows the ﬁnal output of spu-isolated-app.
When the SPE secure application A is launched, the SPE
isolation loader performs the validation and decryption op-
erations in the reverse order of these build steps (Figure 5
A(ii)).
Now Mallory who has his legitimate certiﬁcate, CM allory
issued by the SPE isolation loader, can attempt a substituted-
ciphertext attack against the SPE secure application A. He
307imports KAAlice{S} and {KAAlice}loader into his applica-
tion image, the SPE secure application A’ and signs this
application with a private key associated with CM allory. Fi-
nally, Mallory gets the SPE secure application A’ containing
his original code, KAAlice{S}, {KAAlice}loader,
[HASH(AP P 0)]CM allory and CM allory (Figure 5 B(i)).
When this application is launched, the SPE isolation loader
will begin to validate the integrity of CM allory as in Figure 5
B(ii). Since CM allory is a valid certiﬁcate, the loader is going
to decrypt [HASH(AP P 0)]CM allory with the public key in
CM allory. After that, the loader validates the integrity of the
SPE secure application A’ by comparing the expected hash
values in the digital signature with HASH(AP P 0). This
validation process also succeeds, because Mallory signed the
SPE secure application A’ with his valid certiﬁcate. Thus,
the SPE isolation loader goes to the next step to decrypt
{KAAlice}loader, which is decipherable only by the SPE iso-
lation loader. After the decryption of {KAAlice}loader, the
loader decrypts KAAlice{S} with Alice’s key, KAAlice re-
trieved in the previous step. Then the loader will give the
control to Mallory’s code, thus revealing Alice’s secrets to
Mallory.
Figure 5: Substituted-ciphertext attack against an
SPE secure application
To solve this problem, we need more steps for spu-isolated-
app:
1. certiﬁcate hash calculation: HASH(CAlice)
2. key generation: KAAlice to encrypt/decrypt the ap-
plication image
3. application encryption: KAAlice{S}
4. session key generation(XOR): KAAlice⊕HASH(CAlice)
5. key encryption: {KAAlice ⊕ HASH(CAlice)}loader
6. application hash calculation: HASH(AP P )
7. signature generation: [HASH(AP P )]CAlice
The most important part is coupling the hash values of Al-
ice’s certiﬁcate and Alice’s application encryption/decryption
key (in Step 1 and Step 4). In Step 1, spu-isolated-app calcu-
lates the hash value of CAlice Steps 2 and 3 in this new ver-
sion are identical to Steps 1 and 2 in the previous vulnerable
version. In Step 4, spu-isolated-app uses an XOR operation
between KAAlice and HASH(CAlice) to generate a session
key, and encrypts this session key with the SPE isolation
loader encryption key.
In steps 6 and 7, spu-isolated-app
generates a digital signature for the SPE secure application
A, [HASH(AP P )]CAlice . Finally, spu-isolated-app outputs
the ﬁnal image of the secure application A in Figure 6 A(i).
When the application runs, the SPE isolation loader vali-
dates the integrity of CAlice and the integrity of the applica-
tion image in the ﬁrst stage. Then it decrypts {KAAlice ⊕
HASH(CAlice)}loader with its private key associated with
the SPE isolation loader encryption key to retrieve a session
key (KAAlice ⊕ HASH(CAlice)). Now the SPE isolation
loader can extract KAAlice by calculating the hash value of
CAlice. Next the SPE isolation loader can successfully de-
crypt KAAlice{S} with KAAlice extracted at the previous
stage (Figure 6 A(ii)).
With this algorithm, even if Mallory performs the substituted-
ciphertext attack against this SPE secure application im-
age, he can no longer read S. Since Mallory cannot gener-
ate {KAAlice ⊕ HASH(CM allory)}loader, he can only attach
{KAAlice ⊕ HASH(CAlice)}loader to his application image.
The possible application images he generates are shown in
Figure 6 B(i) and Figure 6 C(i). In the case of Figure 6 B,
the SPE isolation loader will detect the tampering, because
the digital signature, [HASH(AP P 0)]CM allory is not signed
with CAlice. The loader stops the application execution at
this point (6 B(ii)).
In Figure 6 C, both of the validation processes for CM allory
and [HASH(AP P 0)]CM allory succeed as shown in Figure 6
C(ii)). This is because CM allory was issued by the SPE iso-
lation loader and HASH(AP P 0) is signed with CM allory.
However, in the decryption phase, although the SPE isola-
tion loader can retrieve KAAlice ⊕ HASH(CAlice) using the
RSA decryption, it cannot extract KAAlice correctly. The
SPE isolation loader performs KAAlice ⊕ HASH(CAlice) ⊕
HASH(CM allory). Therefore, Alice’s secrets, S, are pro-
tected from the substituted-ciphertext attack. This method
works properly as long as the loader’s private key for the
RSA decryption or the private key associated with CAlice
are not compromised. Note that our countermeasure has
one restriction. A session key should not be weak or semi-
weak, or Malory could easily retrieve KAAlice, because he
could ﬁnd a session key and calculate HASH(CAlice). Our
build tool can avoid this by generating a new KAAlice with
a session key that is not weak or semi-weak.