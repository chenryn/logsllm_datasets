User: Write a Playbook with Ansible automation tool to install and configure MySQL database, and deploy the same configuration on multiple hosts.
Assistant: The following is a sample MySQL Playbook to install and configure a MySQL database and deploy the same configuration on multiple hosts. First, all MySQL hosts need to be defined in the Inventory file. In this example, we use three hosts: mysql1, mysql2, mysql3. ``` [mysql] mysql1 mysql2 mysql3 ``` Next, write the Playbook file: ``` --- name: Install and configure MySQL hosts: mysql become: true vars: mysql_root_password: YOUR_ROOT_PASSWORD_HERE tasks: # Install MySQL - name : Install MySQL server apt: name: mysql-server state: present # Set the root password - name: Set MySQL root password mysql_user: name: root password: "{{ mysql_root_password }}" host: localhost login_user: root login_password: '' # Create a new user and database - name: Create MySQL user and database mysql_db: name: mydb state: present login_user: root login_password: "{{ mysql_root_password }}" # Configure MySQL - name: Configure MySQL lineinfile: path: /etc/ mysql/mysql.conf.d/mysqld.cnf regexp: "^bind-address\s*=\s*127.0.0.1$" line: "bind-address = 0.0.0.0" notify: Restart MySQL handlers: # Restart MySQL after configuration changes - name: Restart MySQL systemd: name: mysql state: restarted ``` This MySQL Playbook does the following: * Install the MySQL server. * Set MySQL root password. * Create a new user and database named mydb. * Change the MySQL configuration to allow remote connections. * Restart the MySQL service to apply the changes. You can edit the hosts file and replace mysql1, mysql2, mysql3 with your own server. You can then run this playbook with the following command: ``` ansible-playbook -i inventory.ini mysql.yml ``` After running this command, Ansible will install and configure MySQL on all MySQL hosts. You can now log into the MySQL client and see if the mydb database is created on this server.