Implementing the /login route
212
■ Extending the / 
route
214
■ Implementing the /createMessage route
215
Implementing the user route
216
■ Adding the Follow 
button
217
■ Implementing the /follow route
218
7.6
Deploying the web application
219
Configuring Jester
219
■ Setting up a reverse proxy
219
7.7
Summary
221
PART 3
ADVANCED CONCEPTS....................................223
8 Interfacing with other languages
225
8.1
Nim’s foreign function interface
226
Static vs. dynamic linking
227
■ Wrapping C procedures
228
Type compatibility
231
■ Wrapping C types
231
8.2
Wrapping an external C library
234
Downloading the library
235
■ Creating a wrapper for 
the SDL library
235
■ Dynamic linking
236
Wrapping the types
237
■ Wrapping the procedures
238
Using the SDL wrapper
240
Licensed to   
CONTENTS
ix
8.3
The JavaScript backend
242
Wrapping the canvas element
243
■ Using the Canvas 
wrapper
246
8.4
Summary
248
9 Metaprogramming
249
9.1
Generics
250
Generic procedures
251
■ Generics in type definitions
252
Constraining generics
252
■ Concepts
253
9.2
Templates
254
Passing a code block to a template
256
■ Parameter 
substitution in templates
257
■ Template hygiene
259
9.3
Macros
260
Compile-time function execution
261
■ Abstract syntax 
trees
262
■ Macro definition
265
■ Arguments in 
macros
266
9.4
Creating a configuration DSL
267
Starting the configurator project
268
■ Generating the 
object type
270
■ Generating the constructor procedure
274
Generating the load procedure
275
■ Testing the 
configurator
278
9.5
Summary
278
appendix A
Getting help
280
appendix B
Installing Nim
282
index
291
Licensed to   
Licensed to   
xi
preface
Nim has been my labor of love over the years. Gradually, from the time I discovered it,
I’ve become increasingly involved in its development. Although I sacrificed consider-
able time working on it, Nim gave back in the form of experience and knowledge. My
work with Nim has taught me far more than any other work or studies have done.
Many opportunities have also opened up for me, a shining example being this book.
 I never actually thought I would end up writing a book, and until a Manning acqui-
sitions editor got in touch with me, I didn’t realize that I wanted to. While planning
this book, I looked to other books and determined where they fell short. I realized
that this, the first book on Nim, must be written for programmers with a bit of experi-
ence. I decided that I wanted to write a book that teaches programmers about Nim,
but that also teaches other programming concepts that work well in Nim’s particular
programming paradigms. These concepts can also be applied to other programming
languages and have been very useful in my career.
 My other goal for this book was to make it fun and engaging. I decided to do this
by building some chapters around small projects. The projects are designed to be
practical and to teach a number of Nim features and concepts. By following along and
developing these projects, you’ll gain hands-on experience developing Nim applica-
tions. This should put you in a good position to write your own software, which is the
ultimate goal of this book.
 Nim in Action covers a lot, but it can’t cover everything. It shouldn’t be viewed as a
complete Nim reference; instead, it should be considered a practical guide to writing
software in Nim.
 It’s my hope that this book helps you learn Nim and that you find it a useful refer-
ence for many years to come. I and the Nim community are at your disposal and are
available online to help you solve any problems you run into. Thank you for purchas-
ing this book and taking an interest in Nim.
Licensed to   
xii
acknowledgments
First, I would like to thank Andreas Rumpf for creating Nim and for both his reviews
and words of encouragement throughout the development of this book. Andreas cre-
ated a one-of-a-kind programming language, and without his commitment to Nim,
this book wouldn’t exist.
 This book wouldn’t be what it is today without the brilliant and passionate people
at Manning publications. I give my thanks to Marjan Bace, who made it possible to
publish this book; my editors Cynthia Kane, Dan Seiter, and Marina Michaels, for
helping me improve my writing; and the production team, including Andy Carroll,
Janet Vail, Karen Gulliver, and Katie Tennant. 
 I thank the Nim community and everyone who participated in reviews and pro-
vided feedback on the manuscript, including technical proofreader Michiel Trimpe,
and the following reviewers: Andrea Ferretti, Yuriy Glukhov, Michał Zielin´ ski, Stefan
Salewski, Konstantin Molchanov, Sébastien Ménard, Abel Brown, Alessandro Campeis,
Angelo Costa, Christoffer Fink, Cosimo Attanasi, James Anaipakos, Jonathan Rioux,
Marleny Nunez, Mikkel Arentoft, Mohsen Mostafa Jokar, Paulo Nuin, Peter Hampton,
Robert Walsh, Samuel Bosch, Thomas Ballinger, and Vincent Keller. 
 Thanks also to the readers of the Manning Early Access Program (MEAP). Their
corrections and comments on the manuscript as it was being written were invaluable.
 Finally, I’d like to thank my family and friends, who in their own way steered my life
in a positive direction, leading me to authoring this book. First, I thank my mother,
Bogumiła Picheta, for her bravery and hard work, without which I wouldn’t have had
the means to start my programming journey, and I especially thank her for making a
hard decision that turned out to be very beneficial for my future. I would also like to
Licensed to   
ACKNOWLEDGMENTS
xiii
thank my uncle, Piotr Kossakowski-Stefan´ ski, and aunt, Marzena Kossakowska-
Stefan´ ska, for inspiring and challenging me to write software, and also for always being
there to share their advice. Thanks to Ilona, Maciej Sr., and Maciej Jr. Łosinski for my
first exposure to a computer and the internet. And I thank Kazimierz S´ lebioda, a.k.a
Kazik, for the Age of Empires 2 LAN parties and for showing me how delicious chicken
with garlic can be.
 Most of all, I thank my partner, Amy-Leigh Shaw, for always believing in me, and
for her patience and support throughout my work on this book. I love you very much
Amy, and am lucky to have you.
Licensed to   
xiv
about this book
Nim in Action is a practical way to learn how to develop software using the open source
Nim programming language. This book includes many examples, both large and
small, to show and teach you how software is written in Nim.
 Nim is unique. It’s multi-paradigm, and unlike most other languages, it doesn’t
emphasize object-oriented programming. Because of this, I encourage you to con-
sciously absorb the styles used in this book instead of applying your own. Nim in Action
will teach you a set of best practices and idioms that you’ll also find useful in other
programming languages.
 By learning Nim, you’ll discover a language that straddles the lines between effi-
ciency, expressiveness, and elegance. Nim will make you productive and your end
users happy.
Who should read this book
This is by no means a beginner’s book. It assumes that you know at least one other
programming language and have experience writing software in it. For example, I
expect you to be aware of basic programming language features such as functions,
variables, and types. The fundamentals of programming aren’t explained in this book.
 This book will teach you how to develop practical software in the Nim program-
ming language. It covers features that are present in all programming languages, such
as concurrency, parallelism, user-defined types, the standard library, and more. In
addition, it covers Nim features that you may not be familiar with, such as asynchro-
nous input/output, metaprogramming, and the foreign function interface.
Licensed to   
ABOUT THIS BOOK
xv
How the book is organized 
The book is divided into three parts and includes a total of nine chapters.
 Part 1 introduces the language and its basic features:
 Chapter 1 explains what Nim is, compares it to other programming languages,
and discusses its strengths and weaknesses.
 Chapter 2 teaches the basics, such as the syntax and fundamental features of
the language. This includes a demonstration of procedure definitions and
exception handling.
Part 2 includes a wide range of examples to show how Nim is used in practice:
 Chapter 3 is where you’ll develop your first nontrivial Nim application. The pri-
mary purpose of this application is communication: it allows messages to be
sent through a network. You’ll learn, among other things, how to create com-
mand-line interfaces, parse JSON, and transfer data over a network in Nim.
 Chapter 4 gives an overview of the standard library, particularly the parts of it
that aren’t covered in other chapters but are useful.
 Chapter 5 discusses package management in Nim and teaches you how to cre-
ate your own packages and make them available to others.
 Chapter 6 explains what parallelism is and how it can be applied to different
programming tasks. You’ll see a parsing example, demonstrating different ways
to parse data in Nim and how parsing can be parallelized.
 Chapter 7 is where you’ll develop your second nontrivial Nim application: a
web application based on Twitter. You’ll learn how to store data in a SQL data-
base and generate HTML.
Part 3 introduces some advanced Nim features:
 Chapter 8 looks at the foreign function interface and shows how it can be used
to make use of C and JavaScript libraries. You’ll develop a simple application
that draws the letter N on the screen, first using a C library and then using
JavaScript’s Canvas API.
 Chapter 9 explains what metaprogramming is, discussing features such as
generics, templates, and macros. At the end of this chapter, you’ll use macros to
create a domain-specific language.
You may wish to skip the first two chapters if you already know the basics of Nim. I rec-
ommend reading the book from beginning to end, and I especially encourage you to
follow along with the examples. Each chapter teaches you something new about Nim,
even if it primarily focuses on a standalone example. If you get stuck, feel free to get in
touch with me or the Nim community. Appendix A contains information on how to
get help, so use it to your advantage.
Licensed to   
ABOUT THIS BOOK
xvi
Code conventions and downloads  
The source code examples in this book are fairly close to the samples that you’ll find
online, but for the sake of brevity, many of the comments were removed. The online
samples include a lot of comments to make them as easy to understand as possible, so
you’re encouraged to take a look at them to learn more.
 The source code is available for download from the publisher’s website at
https://manning.com/books/nim-in-action and from GitHub at https://github.com/
dom96/nim-in-action-code. Nim is still evolving, so be sure to watch the repository for
changes. I’ll do my best to keep it up to date with the latest Nim version.
 This book contains many examples of source code, both in numbered listings and
inline with normal text. In both cases, source code is formatted in a mono-spaced
typeface like this, to distinguish it from ordinary text. Sometimes code is also in
bold to highlight code that has changed from previous steps in the chapter, such as
when a new feature is added to existing code.
 In many cases, the original source code has been reformatted for print; we’ve
added line breaks and reworked the indentation to accommodate the available page
space in the book. In rare cases, even this was not enough, and listings include line-
continuation markers (➥). Additionally, comments in the source code have often
been removed from the listings when the code is described in the text. 
Book forum
The purchase of Nim in Action includes free access to a private web forum run by Man-
ning Publications, where you can make comments about the book, ask technical ques-
tions, and receive help from the author and from other users. To access the forum, go
to https://forums.manning.com/forums/nim-in-action. You can also learn more
about Manning’s forums and the rules of conduct at https://forums.manning
.com/forums/about.
 Manning’s commitment to our readers is to provide a venue where a meaningful
dialogue between individual readers and between readers and the author can take
place. It is not a commitment to any specific amount of participation on the part of
the author, whose contribution to the forum remains voluntary (and unpaid). We sug-
gest you try asking him some challenging questions lest his interest stray! The forum
and the archives of previous discussions will be accessible from the publisher’s website
as long as the book is in print.
Licensed to   
xvii
about the author
DOMINIK PICHETA (@d0m96, picheta.me) is a Computer Science student at Queen’s
University Belfast. He is one of the core developers of the Nim programming lan-
guage and has been using it for most of its history. He also wrote Nimble, the official
Nim package manager, and many other Nim libraries and tools.
Licensed to   
xviii
about the cover illustration
The figure on the cover of Nim in Action is captioned “Morlaque de l’Isle Opus,” or “A
Morlach from the Island of Opus.” The Morlachs were a Vlach people originally cen-
tered around the eastern Adriatic port of Ragusa, or modern Dubrovnik. The illustra-
tion is taken from a collection of dress costumes from various countries by Jacques
Grasset de Saint-Sauveur (1757–1810), titled Costumes de Différents Pays, published in
France in 1797. Each illustration is finely drawn and colored by hand. The rich variety
of Grasset de Saint-Sauveur’s collection reminds us vividly of how culturally apart the
world’s towns and regions were just 200 years ago. Isolated from each other, people
spoke different dialects and languages. In the streets or in the countryside, it was easy
to identify where they lived and what their trade or station in life was just by their dress.
 The way we dress has changed since then and the diversity by region, so rich at the
time, has faded away. It is now hard to tell apart the inhabitants of different conti-
nents, let alone different towns, regions, or countries. Perhaps we have traded cultural
diversity for a more varied personal life—certainly, for a more varied and fast-paced
technological life.
 At a time when it is hard to tell one computer book from another, Manning cele-
brates the inventiveness and initiative of the computer business with book covers
based on the rich diversity of regional life of two centuries ago, brought back to life by
Grasset de Saint-Sauveur’s pictures.
Licensed to   
Part 1
The basics of Nim
This part of the book begins your study of the Nim programming language.
It doesn’t assume you know much about Nim, so chapter 1 begins by looking at
the characteristics of the language, what makes it different from other lan-
guages, and how it’s used in the real world. Chapter 2 looks at some of the most
commonly used elements of any programming language—the syntax, semantics,
and type system—and in doing so teaches you the necessary foundations for writ-
ing simple applications in Nim.
Licensed to   
Licensed to   
3
Why Nim?
Nim is still a relatively new programming language. In fact, you’re holding one of
the very first books about it. The language is still not fully complete, but core
aspects, like its syntax, the semantics of procedures, methods, iterators, generics,
templates, and more, are all set in stone. Despite its newness, there has been signif-
icant interest in Nim from the programming community because of the unique set
of features that it implements and offers its users.
 This chapter answers questions that you may ask before learning Nim, such as
why you might want to use it. In this chapter, I outline some of the common practi-
cal uses of Nim, compare it to other programming languages, and discuss some of
its strengths and weaknesses.
This chapter covers
 What Nim is
 Why you should learn about it
 Comparing Nim to other programming languages
 Use cases
 Strengths and weaknesses
Licensed to   
4
CHAPTER 1
Why Nim?
1.1
What is Nim?
Nim is a general-purpose programming language designed to be efficient, expressive,
and elegant. These three goals are difficult to achieve at the same time, so Nim’s
designers gave each of them different priorities, with efficiency being the most
important and elegance being the least.
 But despite the fact that elegance is relatively unimportant to Nim’s design, it’s still
considered during the design process. Because of this, the language remains elegant
in its own right. It’s only when trade-offs between efficiency and elegance need to be
made that efficiency wins.
 On the surface, Nim shares many of Python’s characteristics. In particular, many
aspects of Nim’s syntax are similar to Python’s, including the use of indentation to
delimit scope as well as the tendency to use words instead of symbols for certain oper-
ators. Nim also shares other aspects with Python that aren’t related to syntax, such as
the highly user-friendly exception tracebacks, shown here:
Traceback (most recent call last)
request.nim(74)
request
request.nim(25)
getUsers
json.nim(837)
[]
tables.nim(147)
[]
Error: unhandled exception: key not found: totalsForAllResults [KeyError]
You’ll also see many differences, especially when it comes to the semantics of the lan-
guage. The major differences lie within the type system and execution model, which
you’ll learn about in the next sections.
CONTRIBUTING TO NIM
The compiler, standard library, and related tools are
all open source and written in Nim. The project is available on GitHub, and
everyone is encouraged to contribute. Contributing to Nim is a good way to
learn how it works and to help with its development. See Nim’s GitHub page
for more information: https://github.com/nim-lang/Nim#contributing.
1.1.1
Use cases
Nim was designed to be a general-purpose programming language from the outset. As
such, it consists of a wide range of features that make it usable for just about any soft-
ware project. This makes it a good candidate for writing software in a wide variety of
A little bit about Nim’s history
Andreas Rumpf started developing Nim in 2005. The project soon gained support and
many contributions from the open source community, with many volunteers around
the world contributing code via pull requests on GitHub. You can see the current open
Nim pull requests at https://github.com/nim-lang/Nim/pulls.
Licensed to   
5
What is Nim?
application domains, ranging from web applications to kernels. In this section, I’ll dis-
cuss how Nim’s features and programming support apply in several use cases.
 Although Nim may support practically any application domain, this doesn’t make
it the right choice for everything. Certain aspects of the language make it more suit-
able for some categories of applications than others. This doesn’t mean that some
applications can’t be written using Nim; it just means that Nim may not support the
code styles that are best suited for writing some kinds of applications.
 Nim is a compiled language, but the way in which it’s compiled is special. When
the Nim compiler compiles source code, it first translates the code into C code. C is an
old but well supported systems programming language that allows easier and more
direct access to the physical hardware of the machine. This makes Nim well suited to
systems programming, allowing projects such as operating systems (OSs), compilers,
device drivers, and embedded system software to be written.
 Internet of Things (IoT) devices, which are physical devices with embedded elec-
tronics that are connected to the internet, are good targets for Nim, primarily thanks
to the power offered by Nim’s ease of use and its systems programming capabilities.
 A good example of a project making use of Nim’s systems programming features is
a very simple OS called NimKernel available on GitHub: https://github.com/
dom96/nimkernel.
HOW DOES NIM COMPILE SOURCE CODE?
I describe Nim’s unusual compilation
model and its benefits in detail in section 1.1.3.
Applications written in Nim are very fast; in many cases, just as fast as applications writ-