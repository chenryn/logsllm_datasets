这个定义没有什么好讲的，它的构造和作用是很明显的。task元素把被“催眠”进程的有关
信息保存在一个任务结构里，面next是一个指向等待队列中下一个条目的指针。很明显，在了解
了等待队列的构造之后，你就可以让任意多个进程休眠在某个等待队列上，那么，怎样才能让
进程休眠呢？
long interruptible_sleep_on_timeout(struct wait_queue **p, long timeout)
void interruptible_alaep_on（struct vait_queue**p)
这两个宏定义的作用是把进程“催眠”为某个状态，但允许它们被信号唤。_timcout变体
在内部调用了schedule_timeout，使作为其调用参数的等待队列能够让进程在时间到了的时候自
动苏醒。我们将在后面讨论定时器的部分介绍如何设定倒计时时间。
void sleep_on（atruct wait_gueue**p)
long sleep_on_timeout(struct vait_queue **p, long tineout)
这两个宏定义的语法和上面两个函数是完全-样的，只不过进程的休眠状态被设置为了
TASK_ININTERRUTIBLE。
如果读者有兴趣做深人研究，可以在kernel/sched.c里查到它们。
一个休眠中的进程迟早需要被唤醒，唤醒的办法也不外两种：
vake_up_interruptible(atruct wait_queue **p)
wake_up（ntruct wait_queue **p)
这是由_wake_up廷伸而来的两个宏定义。前一个只唤醒可中断休眠进程，而后一个可以唤
醒两种状态的休眠进程。但明确地被停止了执行（比如发送一个SIGSTOP信号）的进程将不会
被唤醒。
当Schar没有数据可提供时，它会把读数据进程催眠在自已的等待队列上。而当有个写数
据进程提供了足够多的数据，从而能够满足进程的请求时，休眠进程将被一个定时器唤醒。
interruptible_sleep_on(&schar_wq) :
if (≤igmal_pending (cu
return -EINTR:
这个结构在内核的许多地方都可以看到。我们把current进程催眠了，但允许它在信号的触发
下苏醒过来。在interuptible_sleep_on成功之后，进程或者因为wake_up_interruptible调用而被唤
醒，或者因为接收到一个信号而苏醒。如果是后一种情况，signal_pending先要返回“1"，我们
就会利用返回一个“-EINTR”错误的办法来激发一个中断调用，VFS会根据这个中断重新启动
读数据进程。如果我们使用sleep_on函数简单地催眠了进程，进程就会进入不可中断的休眠以等
加入jaVa编程群：524621833
---
## Page 719
702Linux程序设计
待数据：在这种情况下，即使是一个SIGKILL信号也不能消除它。
就象我们前面介绍的那样，我们在定时器处理器和schsr_write两个地方分别唤醒相应的读数
据进程：
wake_up_interrupt tble (&schar_wq ) ;
这个调用会把休眠在队列里的所有读数据进程都唤醒。这样做是否合理要视具体情况而定
"一因为我们只能满足一个读进程，所以我们是否应该唤醒所有的读数据进程让它们竞争数据
呢？Schar可以通过为设备的每次打开分别建立一个等待队列的办法来解决这个问题。这样做并
不涉及什么新概念，所以我们把它做为练习留给有兴趣的读者去完或。我们可以让各个设备拥
有自己的数据，这是个既有趣又有用的概念，我们将在后面通过lomap模块演示这个问题的解决
方案。
21.3.8文件操作write：向设备写入数据
相对面言，schar_write就简单的多了，它给schar_pool增加count个字节，再修改file->f_pos
的值以反映出有多少数据被写到了设备（实际上是读到设备的内部缓冲区里）。之所以说它比读
操作简单的多是因为Schar不需要对写到设备里来的这些数据进行处理，它只要张开大口把我们
扔给它的数据照单全收就行了。除此之外，我们只有一件事可做，那就是唤醒读数据进程，因
为这个时候可能已经有足够的数据能够满足它们的读数据请求了。下面是这个函数的实现代码：
static ssize_t schar_write(struct file *file.const char *buf,
size_t count, off_t *offset)
schar_data_written += count;
schar_pool *= count;
tile->f_pos•s count:
reflect the amount of Gata written*/
if (copy_from_user(schax_buffer, buf, count))
return -EFAULT;
/*wake up reading processes. if any */
wake_up_interruptible(&schar_wg);
vake_up_interruptible(&schar_po1l_read) :
！
MSG(*trying to write gu bytes, $ld bytes in queue nowin*,
(unsigned)count, scbar_poo1) :
/*return data written */
return count:
21.3.9非阻塞性读操作
提供数据服务的驱动程序必须区分阻塞和非阻塞两种打开方式。如果没有足够的数据满足
个请求，我们惯常的做法是使进程进人休眠状态；而一且有了足够的数据，就再把它唤醒。
但如果设备是以非阻塞方式打开的，我们就不能象刚才那样做了：我们必须尽可能多地供应数
据.而进程在没有数据可读时会立刻返回而不是进人休眠状态。给schar_read函数加上下面阴影
加入jaVa编程群：524621833
---
## Page 720
第21章设备驱动程序
703
部分里的代码就可以实现非阻寒读操作了：
static ssize_t schar_readistiuct tile *file. char *buf, size_t count,
while (count > schar_pon:)↑
/*if the device is opened non blocking satisty what we
if (file->f_flags& O_NONBLoCK1(
can of the request and don't put the process to sleep. */
if (schar_pool > 0){
if (copy_to_user(buf, schar_buffer, sch&r_pool))
file->f_pos += schar_pool;
roturn -EFAULT:
=d
}else {
return count;
return -EAGAIN;
1
MSG(*putting process with pid eu to sleep\n". current->pid);
/* go to sleep, but wake up on signals */
((azaude
interruptible_olcep_on(&schar_wq);
MSGI*pid tu got signal\n*.(unsigned)current->pid);
/*tel1 vfs about the signal */
return -EINTR;
schar_read检查f_flags以确定设备当前是以什么方法打开的。如果应用程序请求的数据比我
们数据池里现有的要多，我们就先把里面有的返回给应用程序，等数据泡空了时再返回一个“
EAGAIN”错误。这等于暗示读数据进程应该过一会儿再来试试自己的请求。
如果一个设备驱动程序只实现了read和write未免缺少点活力。文件操作结构可还提供了不少
其他的入口点呢一我们决定在Schar设备上实现其中的一些，并且要向大家说明为什么有的文
件操作即使我们没有在驱动程序里写出一个明确的处理函数也能够执行一定的动作。
21.3.10查找操作
Schar没有实现自己的查找函数，因此它要依于内核里实现的缺省查找功能。如果在传递
给register_chrdev函数的文件操作结构里把lseek注册为NULL，就表明查找操作将调用内核里的
缺省实现来完成。内核版本的查找操作可以在fs/read_write.c文件里找到，它的名字是
default_llseek，这个调用提供了SEEK_SET、SEEK_CUR和SEEK_END三项功能。这些与llseek
用在一起的宏定义的作用是修改file->f_pos的值，即当前文件流里将被读取的下一个字节的位置。
如果你想自己处理查找操作（比如某个设备不支持相对于文件尾的查找操作时）就必须自行编
写代码实现llseek调用。下面是一个典型的用法示范：
loff_t om_llseek(struct file *file,loff_t offset,int mode)
switch (mode){
case 0:
file->f_pos =offset:
/* SEEK_SET */
case 1:
/* SEEK_CUR */
加入iaVa编程群：524621833
---
## Page 721
Linux程序设计
return file->f_pos;
file->f_pos += offset;
case 2:
return -EINVAL;
/* SEEK_END */
default:
/  uaddeu qouuro./
return -EINVAL:
，
如果该设备上的查找操作根本没有意义，就必须定义一个llseek函数以阻止查找。此时我们
只需简单地返回一个“-ESPIPE”，它的意思是“查找操作非法”，即这个设备没有查找操作。
loff_t oun_llseek(struct file *file, loff_t offset, int mode)
/* illegal seek */
1
return -ESPIPE;
21.3.11文件操作ioctl：1/O控制
有时候，能够改变或者读取一个运行中驱动程序的参数是很有用的；要不然我们就得重新
对它进行配置、编译和运行。但对某些驱动程序来说，如果它们在使用中没有间歇，我们也就
不可能把它们从系统里拿下来，重新配置、编译和运行它也就无从谈起。而ioctl就是驱动程序电
让我们能够在它运行时设置或检索其有关设置情况的人口点。
内核里的每个设备都对应地有一个独一无二（基本如此，但也有两块硬盘这样的例外）的
ioctl基地址和一组设备命令。举个例子，SCSI主控制器的ioctl基地址是0x22，并且整个子范围
0x00-0xff也都分配给了它。因为大多数设备并不需要支持多达256个命令，所以只用到了子范
围的一小部分。16位的基地址构成ioct命令的上半部分，面16位的设备命令构成了ioct命令的下
半部分一因此，SCSI主控制器的第一个命令就是0x2200。ioctl基地址都写在Documentation
/ioctl-number.txt文档里，但我们写这本书的时候它已经很久没有更新了。这个文件还介绍了怎
样才能为你自已的设备申请一个适当的设备命令范围。我们为Schar换选了一个没人使用的基地
址0xbb。底层实现可就要比我们这么简单的一选要复杂多了，我们还是不要去管它了。但如果
读者确实对它感兴趣的话，它的定义可以在asm/loctl.h文件里查到。
Linux能够区分四种类型的ioct调用，它们是：直接命令、读、写、读和写。这是由模块里
标识符的写法定义的。这几种类型的定义见表21-5：
表21-5
_IO (base, command)
定义了中选命令。在发出iocl调用时设有需要传通进出应用橙序的数
据。一个_1O类的ioctl调用将返网一个正整数（也就是说它不会被解释为
一个错误）
_10R (base, command, size)
一个从应用程序角度看的读操作ioct命令。size是著要传回给应用积序
的参数的长度
_TOw(base, command, size)
一个从应用程序角度看的写操作ncu命令。siz是从应用程序传来的参
数的长度
_IOWR (base, command, s1ze)
一个读写操作的ioci命令。size是来回传递的参数的长度
加入jaVa编程群：524621833
---
## Page 722
第21章设备驱动程序
705
此外，还有几个用来对待发送命令的合法性进行检查的宏定义。内核方面的编码机制把这
个数据域划分为方向、长度和命令几个部分。这些信息可以用表21-6中的宏定义提取出来：
表21-6
_IOC_DIR (conmand)
command命令的方向。根据上表中介绍的命令类型，这个方向可以是_I0C。
NONE、_IOC_WRITE或_IOC_READ。对_IOWR类的命令，这个方向值是
_IOC_WRITE与_KOC_READ的逻辑或结果
_IOC_TYPE (command)
这个数据项的iocti基地址部分，Schar的是0xb
_IOC_NR (connand)
这个数据项的设备命令部分
_IOC_SIZE [command)
参数的长度一一如果有参数的话
iocti函数本身是在模块注册时提供给内核的file_operations结构里定义的。我们把Schar设备
支持的ioctl命令定义在schar.h文件里
#define SCHAR_IOCTL_SASE
define SCHAR_TOGGLE_DEBUG
0xbb
define SCHAR_GET_POOL
_IOR(SCHAR_IOCTL_BASE,1,unsigned 1ong)
_IO(SCHAR_IOCTL_BASE,0)
define SCHAR_EX_TIMER_DELAY
_IOWR(SCHAR_IOCTL_BASE, 5,unsigned long)
我们选择的基地址远离一切有用的设备，这样就不会引起任何冲突。在Schar里我们使用了
三种类型的ioctl命令。SCHAR_TOGGLE_DEBUG切换打印或不打印调试信息，因为它是一个
_IO类型的ioctl命令，所以不带参数。SCHAR_GET_POOL返回数据池里现有数据的字节长度，
SCHAR_EX_TIMER_DELAY设置定时器的每次延时的“jiffies"（内核时基）个数并返回原来的
设置值。“jiffics”是内核用来测量时间的一个基本单位，我们很快就会讲到它。
schar_ioctl函数几乎完全由一个switch语句构成，设备支持的ioctl命令就在这个语句里得到
处理。如下所示：
statie int sthar_ioctl(struct inode *inode,struct file *file,
unsigned int cmd, unsigned Long arg)
/make sure that the connand is really one of schar's */
if(_IOC_TYPE(cnd)
return -ENOTTY;
!= SCHAR_IOCTL_BASE}
switch (cmd)(
case SCHAR_TOGGLE_DEBUG:(
schar_debug = Ischar_debug;
return 0:
case SCHAR_GET_POOL:{
if (put_user(schar_pool,{unsigned 1ong *)arg))
return -gFAULT:
break;
case SCHAR_&X_TIMER_DELAY:{
unsigned long tnp = schax_timer_delay:
if(!capable(CAP_SYS_ADHIN))
if (get_user(schar_tiner_delay,
return -EACCES;
(unsigned 1ong *}arg))
if (put_user(tmp.
return -EFAULT;
return -EFAULT:
(unsigned long *)arg1)
break:
default:(
加入jaVa编程群：524621833
---
## Page 723
706Linux程序设计
MSG(*ioctl: no such coumand\n′);
return -ENOTTY:
/*to keep gcc hapey */
returr. 0;
如果读者曾经使用过iocu系统调用，就能轻松地看懂这段代码。这里出现了两个我们以前没
有见过的调用—get_user和put_user，我们稍后再向大家说明它们的细节，现在只要知道它们的
功能是在用户空间和内核空间之间来回拷贝数据就可以了。default子句负责处理一切Schar设备
不支持的ioctl命令。耐“-ENOTTY”对设备不支持的ioctl命令来说是个很合适的返回值：这个
错误的本意是“不是一台打字机”一那个年代算的上是设备的只有电传打字机；如今用在ioctl
调用的返同值里时，它的含义是“此ioctl命令不适用于这个设备”。
21.3.12检查用户权限
只要用户拥有打开某个设备的权限，他就可以对该设备进行ioct调用。但并不是每个用户都
能使用全部的命令，这要根据将要执行的具体操作来定。SCHAR_EX_TIMER_DELAY命令需要
检查打开设备的人是不是超级用户，因为如果倒计时的时间值设置得过低会使定时器很快就会