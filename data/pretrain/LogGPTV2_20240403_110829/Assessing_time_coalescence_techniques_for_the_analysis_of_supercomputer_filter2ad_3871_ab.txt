and all the parameters needed by the log generator component
to produce the logs (the exhaustive list of parameters is
presented later in section V).
A. The log generator
The log generator component is the core of the framework
and it is in charge of generating both synthetic and oracle
logs. It is based on a set of hierarchical models, which take
into account system-related aspects, i.e., the number of nodes,
subsystems inside a node, the workload, and the related failure
activation and propagation processes. Models are implemented
as Stochastic Activity Networks (SAN) in the Mobius Tool
[15]. The whole system is modeled as a replicate/join com-
position [15] of a set of distinct nodes, modeling computing
resources. Each node is in turn composed of a set of subsystem
models, i.e., memory, processor, IO, software, and network,
each one specifying the failure and recovery process of the
modeled subsystem, when subject to a speciÔ¨Åc workload.
The workload model is introduced to take into account
the dependency between the workload (its type and intensity)
and the failure rate of subsystems [20], [24], [27], [32]. For
instance, nodes executing IO bound jobs are known to be more
susceptible to IO failures than nodes processing CPU intensive
jobs [1], [23], whereas, wide jobs (i.e., jobs requesting a large
1The framework is accessible at
catellodimartino.it
the following address http://www.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:29 UTC from IEEE Xplore.  Restrictions apply. 


	
Failure 
Recovery 
Propagation 
Detection 
and Logging 
Propagation to 
subsystems 
Propagation 
to Nodes 
Entry(Time;Node; 
Entity;Message) 
Failure F  
end 
Failure F  
start 
Involved Subsystem 
Nodes Involved in F 
Propagation on F Start 
	



Fig. 3: Structure of a generic subsystem model.
in details. Due to space limitations, only important details of
the SAN models are provided.
1) The IO Subsystem Model: The IO subsystem model is
organized in two layers. The Ô¨Årst is the SAN layer, shown in
Figure 4, in charge of reproducing the stochastic behavior of
the failure, recovery, and log writing processes. The second
is implemented by means of an external C++ library, called
ExternalLib, in charge of decoupling the stochastic be-
havior from system related aspects, such as, job scheduling
and spatial propagation of failures. For the sake of clarity,
Figure 4 divides the model in Ô¨Åve zones. Zone 1 models
the activation of local IO failures. Zone 2 models the failure
activation due to external causes, such as propagation from
other subsystems or from other nodes. Zone 3 is in charge of
modeling the propagation of local failures (due to zones 1 or
2) to other subsystems or nodes. Zone 4 mimics the detection
and logging mechanisms. Finally, zone 5 models the failure
recovery process. The models of the other subsystems share
the same internal organization.
a) Zone 1 - Failure Activation: The IO subsystem may
fail following three different distributions, modeled by TTF1,
TTF2, and TTF3 actions. These distributions model the time
to failure for nodes executing i) IO intensive jobs, ii) mixed
IO and CPU bound jobs, and iii) CPU bound jobs, allowing
to generate failures depending on the running workload. The
correspondence between the node with ID (unique) nodeID
hosted in the rack rackID and running jobs is handled by the
ExternalLib. When one of the actions TTF1, TTF2, and
TTF3 Ô¨Åres, the IO subsystem is marked as failed (mark in
the place failed) and a unique identiÔ¨Åer is generated for the
failure (place failureSignature). The signature is used by the
ExternalLib to keep track of failure propagations.
b) Zone 2 and Zone 3 - Failure Propagation: When a
failure is activated in zone 1, it can cause a local propagation.
To this aim, the places propagate to CPU, propagate to SW,
and propagate to MEM of zone 3 are shared with the places
CPU correlated, MEM correlated, SW correlated of zone
number of nodes) are known to be more prone to failures than
small jobs [32].
Figure 3 shows the structure of a generic subsystem model.
It is composed of i) a failure model, ii) a propagation model
(to model failure propagations to other subsystems and to
other nodes), iii) a detection and logging model, and iv) a
recovery model. The failure model reproduces the failure inter-
arrival process of both local failures and external failures, i.e.,
propagated from other subsystems (local propagation) or from
other nodes (spatial propagation). For instance, concerning
local propagation,
is known that software failures may
depend on memory or on processor failures [33], [34], but they
can also manifest due to endogenous errors, such as software
bugs. They can still propagate to other subsystems, such as to
the network or IO. Instead, concerning spatial propagation, it is
known that network and IO failure manifestations are clustered
in space [1], [8], [13], [21]; this means that a single IO or
Network failure manifesting on a node can easily propagate
to multiple nodes. The detection and logging is in charge of
producing entries in the synthetic log when failures occur. The
writing of entries is terminated when the subsystem recovers.
All the models concur to produce the ground truth on the
failure process, stored in the oracle log.
it
In the remainder of this section, we describe the IO model,
as an example of subsystem model, and the workload model




	





















	

	






	


	
	
	
		
	
		
	

	


	

Fig. 4: The SAN model of the IO subsystem
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:29 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Example
of
distrib_propagation
code
from the Output Gate
TABLE II: Example of synthetic logs
Output Gate distrib_propagation
ExternalLib* l = ExternalLib::Instance();
Distribution distr = l‚àí >getAffectedNodesDistr();
int affected_nodes = (int)distr.next();
std::vectorIDs;
IDs=(l->getPropIDs(nodeID->Mark(),_IO,
affected_nodes));
node!=nodeID->Mark())
‚àó
‚àó
‚àó
IDs::iterator node;
//It cycles on the nodes involved in the propagation
...
if(
//sets the
l‚àí >setIoFailure(
IoFailureRACK->Mark()=rackID->Mark();
//this wakes up all not failed nodes of rackID
//they check if they are failed calling the method
//l->isIOFailed(nodeID->Mark()) of the library
node, failureSignature‚àí >Mark());
node as failed in the library
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
2 of other subsystem models. For instance, when a token
is placed in the propagate to SW place, it will be placed
also in the IO correlated place of the software subsystem
model, enabling a propagated failure activation in zone 2. The
propagated failure will share the same signature of the original
failure, and it will cause the affected subsystem to pass in the
failed state.
Spatial propagation follows a similar mechanism: upon
a failure activation, the failure is propagated with a given
prop_probability (action selectPropagate in zone 3)
to a set of nodes. Consequently, a failure is activated in
the zone 2 of all nodes affected by the propagation. The
selection of affected nodes is performed by considering i)
the nodes running the same job as the failed one [32] (to
take into account the workload), and ii) nodes sharing the
same rack. Since these aspects are dependent on the system
conÔ¨Åguration and on the running workload, we delegate the
selection of affected nodes to the ExternalLib. In this
way, it is possible to account for different failure propagation
criteria without changing the SAN model. The use of the
library is exempliÔ¨Åed in Table I, reporting the code of the
output gate distrib propagation in zone 3. First, a number of
affected_nodes is extracted (line 3) using a distribution
(returned by the library - line 2). Then, the IDs of affected
nodes are selected using the getPropIDs() method of the
ExternalLib (line 5). Finally, selected nodes are tagged
as failed using the setIoFailure() method of the library
(line 11); this method requires the failure signature to allow
the ExternalLib to keep track of all spatial propagations.
A node receiving a propagation (zone 2) is notiÔ¨Åed by means
of the EN SPATIAL PROP input gate. SpeciÔ¨Åcally, the input
gate is enabled if the node has been tagged as failed (the check
is performed in the input gate using the isIOFailed()
method of the ExternalLib) and if the mark of IoFail-
ureRACK is equal
to rackID. The propagated failure will
manifest after a speciÔ¨Åc delay modeled in ttf prop.
c) Zone 4 - Detection and Logging: When a subsystem
fails, one or several events can be written into the synthetic
log. The distribution choice activity selects a random number
of entries to be generated in the log, according to different
writing distributions. For instance, it may select a periodic
writing process (distr1, to emulate timeouts and watch dog
timers behaviors, typical in logs), or it may select a random
inter-arrival of events (distr2, distr3, or distr4 branches). When
Time
11/22/11 19:06:41
11/22/11 19:06:41
11/22/11 19:06:41
11/22/11 19:06:41
11/22/11 19:06:41
11/22/11 19:06:41
11/22/11 19:06:41
11/22/11 19:06:43
11/22/11 19:06:43
11/22/11 19:06:46
11/22/11 19:06:46
11/22/11 19:06:49
11/22/11 19:07:01
11/22/11 19:07:02
11/22/11 19:07:03
11/22/11 19:07:09
11/22/11 19:07:09
11/22/11 19:07:09
11/22/11 19:07:47
...
12/17/11 23:22:39
12/17/11 23:22:42
12/17/11 23:22:43
12/17/11 23:22:49
NodeID
191
212
212
191
195
195
212
195
192
192
191
195
195
161
195
195
161
195
161
297
297
297
297
Subsys
IO
IO
IO
IO
IO
IO
IO
SW
IO
IO
IO
SW
SW
NET
IO
IO
NET
SW
NET
PROC
MEM
MEM
MEM
Message
IO Error no. 1
IO Error no. 1
IO Error no. 2
IO Error no. 2
IO Error no. 1
IO Error no. 2
IO Error no. 3
SW Error no. 1
IO Error no. 1
IO Error no. 2
IO Error no. 3
SW Error no. 2
SW Error no. 3
NET Error no. 1
IO Error no. 3
IO Error no. 4
NET Error no. 2
SW Error no. 4
NET Error no. 3
CPU Error no. 1
MEM Error no. 1
MEM Error no. 2
MEM Error no. 3
the subsystem recovers from the failure (zone 5), the writing
of events in the synthetic log is interrupted.
As it happens in actual systems, such as in the Unix syslog,
entries in the generated synthetic logs encompass a time stamp,
the ID of the node generating the event, the subsystem in
which the event took place, and a text message. Table II
shows an extract of the generated log. The message contains
a generic text and the sequence number of the entry, since
time coalescence techniques do not exploit message contents.
It is worth noting that we generate logs containing only error
entries without any other content, i.e., we assume logs are
pre-processed with a perfect Ô¨Åltering and free from all useless
entries. Despite optimistic, this assumption avoids to correlate
measurements with the adopted Ô¨Åltering, allowing us to focus
only on the coalescence.
d) Zone 5 - Recovery: Failures generated in zone 1
recover following a random recovery process, implemented
by the TTR activity in zone 5. Failures propagated by other
subsystems (place gotASubPropagated) may be recovered only
if the subsystem, which generated the failure, recovers itself
(action subRecover). Failure propagated by other nodes (place
gotAPropagation), may be recovered with a probability r