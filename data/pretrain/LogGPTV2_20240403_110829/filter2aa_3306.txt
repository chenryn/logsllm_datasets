fox-it.com
Pwning your Azure environment
Dirk-jan Mollema / @_dirkjan
I’m in your cloud…
-
Lives in The Netherlands
-
Hacker / Red Teamer / Researcher @ Fox-IT since 2016
-
Author of several Active Directory tools
-
Mitm6
-
ldapdomaindump
-
BloodHound.py
-
aclpwn.py
-
Co-author of ntlmrelayx
-
One of the MSRC Most Valuable Security Researchers 2018/2019
-
Blogs on dirkjanm.io
-
PrivExchange
-
Tweets stuff on @_dirkjan
Whoami
• Azure AD: what is it and how to talk to it
• Azure AD roles, applications and service principals
• Fun with MFA
• Linking up cloud and on-premise
• Azure Resource manager and Azure AD
• Azure integrations – Azure DevOps
This talk
• “Azure Active Directory (Azure AD) is Microsoft’s cloud-based 
identity and access management service.”
• Source of authentication for Office 365, Azure Resource Manager, 
and anything else you integrate with it.
Azure AD
Azure AD
Azure AD vs Active Directory
(Windows Server) Active Directory
Azure Active Directory
LDAP
REST API’s
NTLM/Kerberos
OAuth/SAML/OpenID/etc
Structured directory (OU tree)
Flat structure
GPO’s
No GPO’s
Super fine-tuned access controls
Predefined roles
Domain/forest
Tenant
Trusts
Guests
• Portal
• PowerShell modules
• Azure CLI
• API’s
Interacting with Azure AD
• Nice and shiny
• Built for ease of use
• Sucks if you’re trying to understand how stuff actually works
Portal
• MSOnline PowerShell module
• Focusses on Office 365
• Some Office 365 specific features
• AzureAD PowerShell module
• General Azure AD
• Different feature set
• Azure CLI / Az powershell module
• More focus on Azure Resource Manager
Powershell
• Azure AD Graph
• Microsoft Graph
• Exchange Provisioning service
API’s
• All of them have limitations
• Unique features, yet deprecated
• Different authentication methods supported
• Different terminology
Which one to use?
Confusion
• There is not one uniform way to talk to Azure AD
• You’re limited to what Microsoft considers important and 
documents
• Most of this research is from using documented and 
undocumented APIs
Talking to Azure
fox-it.com
Azure AD – roles, applications, 
service principals
• Users
• Devices
• Applications
Azure AD Principals
• RBAC Roles are only used for Azure Resource Manager
• Office 365 uses administrator 
roles exclusively
Azure AD roles
• Global/Company administrator can do anything
• Limited administrator accounts 
• Application Administrator
• Authentication Administrator
• Exchange Administrator
• Etc
• Roles are fixed
Azure AD admin roles
Source: https://docs.microsoft.com/en-us/azure/active-directory/users-groups-roles/directory-assign-admin-roles
• Most confusing part (IMO) of Azure AD
• Documentation unclear
• Terminology different between documentation, APIs and Azure 
portal
• Complex permission system
“Applications”
• Examples:
• Microsoft Graph
• Azure Multi-Factor Auth Client
• Azure Portal
• Office 365 portal
• Azure ATP
• A default Office 365 Azure AD has about 200 service principals
(read: applications)
Everything is an application
Applications and multitenancy – your apps
Applications and multitenancy – third party apps
Applications and multitenancy – Microsoft apps
• Two types of privileges:
• Delegated permissions
• Require signed-in user present to utilize
• Application permissions
• Are assigned to the application, which can use them at any time
• These privileges are assigned to the service principal
Application privileges
• Every application defines permissions
• Can be granted to Service Principals
• Commonly used:
• Microsoft Graph permissions
• Azure AD Graph permissions
Permissions model
Example: Application permissions
Service principal permissions
How permissions actually work
API definition
Portal terminology
Every application defines:
- OAuth2 permissions
- Application roles
App registration:
- Delegated permissions
- Application permissions
An application requires:
- Resource access
App registration:
- API permissions
A service principal has:
- OAuth2 permission grants
- Application roles
An enterprise application has:
- Delegated permissions
- Application permissions
• Normal flow:
• Define required permissions in application
• Approve permissions
• Alternative flow:
• Assign a service principal to a role in MS Graph/AAD Graph 
directly
Hiding in plain sight
Application view
Service Principal view
• No way to tell from portal or API which permissions they have
The exception: Microsoft applications…
JWT
• Some admin roles allow managing all applications
• Global Administrator
• (Cloud) Application Administrator
• Including assigning credentials
• Possibility for backdooring Azure AD
• No MFA for Service Principals
• Possible to escalate privileges
• If you control an application with more privileges than you
• Previously: default applications with more permissions than Application 
Administrator
Why does this matter?
• Add certificate as credential to an application
Example: Add certificate to service principal
• Connect as service principal
Example (2)
• Log shows actions were performed by application
Logging?
• Application admins can’t assign Application roles for 
Microsoft/Azure AD Graph (Application permissions)
• They can assign OAuth2 permissions (delegated permissions)
• Only valid when user is using the application
• To exploit:
• Add user impersonation permission to application
• Phish a Global Administrator with link
• Do stuff
Assigning permissions
Demo
• Assign a new redirect URL to an Office 365 application
• (ab)use built-in permissions for this application
• Phish admin
• Logs?
Phishing with a twist
Login log
fox-it.com
Fun with MFA
• Authenticator app
• Notification
• One time code
• Text message
• Voice call
(some of the) MFA methods
• The number registered in Azure AD is called
• To authenticate, press #
Voice call
• Break into someone’s voicemail
• Change the welcome message to a # tone
• Make sure the phone is occupied
• Sign in using password
• Azure AD will get redirected to voicemail
• Authenticated 
Abuse scenario
Demo
More cool research on this topic: see Martin Vigo’s talk at Def Con 26 
“Compromising online services by cracking voicemail systems”
• “closing this as a v-next fix” … “post-exploitation technique” … “the 
attacker must compromise the users voicemail to enable the 
attack”
Microsoft’s reaction
fox-it.com
What could possibly go wrong
Linking up cloud and on-premise
• Application administrator is high-privilege cloud account
• Hopefully protected with MFA
• What about on-premise?
Exploiting the link with on-premise
• Tool that resides on-premise and syncs AD data to Azure AD
• Installed in both Password Hash Synchronization and ADFS 
scenario’s
Azure AD connect
Source: https://docs.microsoft.com/en-us/azure/active-
directory/hybrid/whatis-phs
AD Sync account privileges
• If Password Hash Synchronization is in use, the Sync account can 
sync all password hashes
• Means it’s basically Domain Admin on-premise
• Either way, the sync account has high privileges in the cloud
• Cloud assets may extend beyond the AD Domain
Sync account privileges
• Adconnectdump: 3 ways to dump the password on-premises
• Technical explanation: see my Troopers presentation
Azure AD Connect password extraction
https://github.com/fox-it/adconnectdump
• Dump all on-premise password hashes (if PHS is enabled)
• Log in on the Azure portal (since it’s a user)
• Bypass conditional access policies for admin accounts
• Add credentials to service principals
• Modify service principals properties
Fun stuff to do with the Sync account
fox-it.com
Azure Resource manager and Azure AD
• RBAC roles can be assigned to service principals
• These can be managed by Application Administrators
• Also by the on-premise sync account
• High privilege applications might need an account
• Example: Terraform
Azure RBAC
• Pwn on-premise sync account 
• Assign credentials to service principals with rights in Azure RM
• Now you also control any cloud resources
Escalating again
fox-it.com
Azure integrations – Azure DevOps
• DevOps tooling
• Source code management
• Build pipelines
• Automatic deployment
What is Azure DevOps
• Kinda cool feature that allows you to build code for free
• Uses Microsoft hosted resources in Azure
Azure DevOps - Pipelines
Shoutout to @_xpn_ for his blog that got me into this
Example: adconnectdump
• Manual definition through GUI
• Pipelines-as-code using YAML file (new)
Pipeline definitions
Build definitions
• Team member wants to publish artifacts in Azure using Blob 
storage
• Links up Azure RM with Azure DevOps
Scenario
• New team member joins
• Needs minimal privileges to contribute to the repository
• No special privileges to edit build pipelines
Adding a new user
New user commit
Meanwhile in an unrelated Azure VM
RBAC permissions
How about that notepad
• No – specific role is required
• However: since pipeline definitions are part of the repository, 
commit privileges is sufficient
• Reported to Microsoft, is fixed in the latest version of DevOps
Can anyone edit pipelines?
• Be careful about integrations
• Anyone that can edit the pipelines can access the secrets
• If secrets are enabled for public repositories, rogue pull request is 
sufficient to extract secrets
• (this is documented)
Azure DevOps conclusions
Source: https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-
devops&tabs=yaml#validate-contributions-from-forks
• Cloud can be beautiful
• All your stuff is on the internet
• You need to secure it yourself (MFA!!!!)
• SaaS takes away your need to patch manually
• Always the latest patches
• Always the latest features
• Always the latest vulnerabilities
• Full trust in vendor is implied
General conclusions
fox-it.com
Pwning your Azure environment
Dirk-jan Mollema / @_dirkjan
I’m in your cloud…