well as systematically considering separate adversarial action
for the variants of the user-to-device channel.
Recent research in the computational setting [18], [23]
incorporates user–device interaction in the analysis of au-
thentication protocols. The 3-Party Possession User Mediated
Authentication (3-PUMA) model, presented in [23], provided a
computational model to capture communications sent over both
the device-to-device channel and the user-to-device channels.
That model was later adapted to allow for the adversarial
queries ShowUser and ControlUser [18] and used to analyze
entity authentication in Signal under the Mediated Epoch
Three-Party Authentication (META) computational model.
These queries capture adversarial ability to show erroneous
information to the user (e.g. via malware on the device) as well
as input erroneous information from the user (e.g. via modeling
social engineering). These models form the foundation for our
development of the CYBORG model.
3
Init-Gen’d
Resp-Gen’d
User-Gen’d
k
r
o
w
e
m
a
r
F
y
t
i
r
u
c
e
S
G
R
O
B
Y
C
UncUser
CompUser[iu]
CompUser[ru]
CompUser[ui]
CompUser[ur]
CompUser[iu,ru]
CompUser[iu,ur]
CompUser[ru,ui]
CompUser[iu,ui]
CompUser[ru,ur]
CompUser[iu,ru,ui,ur]
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
(cid:88)
X
(cid:88)∗
(cid:88)∗
X
X
X
(cid:88)∗
X
X
X
(cid:88)
(cid:88)∗
X
X
(cid:88)∗
X
(cid:88)∗
X
X
X
X
Bluetooth BR/EDR Secure Simple Pairing/Secure Connections Passkey Entry
Original Protocol
with Secure Hash Modiﬁcation
User-Gen’d
Resp-Gen’d
Init-Gen’d
Dual
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)∗
(cid:88)
(cid:88)
(cid:88)∗
(cid:88)∗
X
X
(cid:88)∗
X
X
X
X
X
TABLE I.
TABLE DEPICTING LEVELS OF CYBORG SECURITY IN THE UNCOMPROMISED (UncUser) AND COMPROMISED USER (CompUser[x])
SETTINGS ACHIEVED BY THE PASSKEY ENTRY PROTOCOL (SECTION IV), AS WELL AS SECURE HASH MODIFICATION (SHM) PASSKEY ENTRY AND DUAL
(SECTION III). ALL OTHER VERSIONS OF PASSKEY ENTRY WERE FOUND TO BE INSECURE UNDER THE DEFINITIONS NOT DEPICTED. (cid:88) DEPICTS PROVEN
PASSKEY ENTRY (SECTION VI). DUAL PASSKEY ENTRY IS PROVABLY SECURE UNDER ALL VARIANTS OF THE CYBORG SECURITY MODEL
SECURE IN THIS WORK, (cid:88)∗ DEPICTS PROVABLY SECURE BY IMPLICATION, AND X DEPICTS INSECURE.
While previous work focused on authentication protocols,
we introduce a framework for the analysis of cyborg key
exchange. Our key exchange framework is in keeping with
other prominent standard AKE models [7], [13], [26], [29]
where matching participant transcripts are required. We further
add user modeling components from [18], [23]. Additionally,
we extend earlier models for ﬁner-grained analysis of the
user-to/from-device channel security for individual devices and
sessions, by separating out speciﬁc adversarial categories as
shown in Figure 2.
Table I summarizes our results, showing the security
of the original Passkey Entry protocol in our model under
all protocol variants (Initiator-Generated Passkey, Responder-
Generated Passkey, and User-Generated Passkey) and all ad-
versarial channel control variants (rows). Furthermore,
the
security of Bluetooth under our two proposed protocol mod-
iﬁcation variants is also shown (columns 4-7). While Dual
Passkey Entry with Secure Hash Modiﬁcation is the strongest
protocol in our model, it also requires the most changes to
the underlying protocol, and may not be feasible if both
devices do not possess both input and output capabilities. Thus
we demonstrate how even a minor change to the protocol
can enable Passkey Entry to provide some security under a
CYBORG adversary (columns 4-6).
D. Contributions
We build on research of user-mediated protocols with an
analysis of Passkey Entry, and summarize our results in Table I.
Speciﬁcally,
• we provide the ﬁrst security framework in computational
analysis for cyborg AKEs supporting adversarial modiﬁ-
cation and creation of user-to-device messages, where the
user is an active participant in protocol execution.
• we provide the ﬁrst systematic separation of all variants
of adversarial capabilities against user-to-device channels.
4
• we conduct the ﬁrst computational analysis of Passkey
Entry for Bluetooth BR/EDR, under either Secure Sim-
ple Pairing or Secure Connections. This analysis com-
prehensively covers all protocol variants, where the
passkey is initiator-generated, responder-generated, or
user-generated.
• we show that basic protocol modiﬁcations can improve
the security of Passkey Entry in the CYBORG model,
even to the point of full CYBORG security. This high-
lights the usability of the model, as well as the ﬁne-
grained clarity it provides to the conditions of protocol
security.
The paper organization proceeds as follows: Section II
introduces the Bluetooth Passkey Entry protocol per speciﬁ-
cation. The CYBORG model, including freshness conditions
to capture various adversarial capabilities, is introduced in
Section III. In Section IV we analyze all variants of Passkey
Entry in the CYBORG model. Finally, in Section V we present
two modiﬁcations of Passkey Entry, requiring different degrees
of protocol changes and show, in Section VI the corresponding
security analyses of the modiﬁed variants.
II. PASSKEY ENTRY PROTOCOL
In this section we present
the Passkey Entry protocol
adapted to ﬁt within below mathematical deﬁnitions and a
diagram for reference in Figure 3.
A. Relevant Variables
Variables used in Passkey Entry are described as follows:
• A ∈ {0, 1}48: The Bluetooth device address / identity of
• btlk: a ﬁxed 16 bit ASCII string label for LK.
• Ca ∈ {0, 1}128: 128 bit tag from device A, the commit-
device of A.
ment value.
value.
rithm.
• DHKey ∈ {0, 1}256: Ephemeral DH key.
• Ea ∈ {0, 1}128: 128 bit tag from device A, the check
• IOcapA ∈ {0, 1}24: The IO capability of device A.
• LK ∈ {0, 1}128: A device’s session key, the link key.
• HMAC: a hash-based message authentication code algo-
• Na ∈ {0, 1}128: A nonce generated from device A.
• P : generator point for elliptic curve employed.
• P Ka = (P Kax, P Kay) ∈ {0, 1}256 × {0, 1}256: a bit
representation of the ephemeral public key of device A
for an elliptic curve DH key agreement. We write P Kax
for the x-coordinate and P Kay for the y-coordinate.
• r ∈ {0, . . . , 9}6: A 6-digit, decimal value, the passkey.
• SKa ∈ {0, 1}255: Ephemeral secret key of Device A.
Bluetooth’s speciﬁcation requires that Na be sampled fresh
for every execution of Passkey Entry, and recommends the
same for SKa, r. In this analysis we assume SKa, Na, and r
are fresh values. We impose this restriction not only to simplify
analysis but also because Passkey Entry with long-term DH
keys allows for potential forward secrecy issues, as only long-
term secrets would factor into session key generation, and long
term passkeys allows for MitM attacks [31].
We state the actual bit lengths for the relevant variables
as required under either BR/EDR Secure Simple Pairing or
Secure Connections Passkey Entry. Secure Simple Pairing
utilizes the P-192 elliptic curve while Secure Connections
uses P-256 [34]. Both modes use SHA-256 [35] for the hash
function and HMAC-SHA256 [28] for the MAC. Also note that
DHKey is computed as the x-coordinate of [SKa]P Kb where
[·]· is used to symbolize elliptic curve point multiplication. We
require P Kay as part of the public key, by way of validation
checks to prevent the attack described in [8].
IO capability not only determines the version of Bluetooth
AKE (Numeric Comparison, Just Works, Out-of-Band, and
Passkey Entry), but also, for Passkey Entry, how the passkey
is generated (by the initiating device, the responding device,
or the user). Passkey Entry requires a display output on no
more than one device; in the case of a user-generated passkey,
no device display is required. Thus, Passkey Entry can cover
a wider variety of device pairings than other Bluetooth pairing
modes, such as a wireless keyboard and a computer.
B. Protocol Phases
Phase 0: Init and IOcap Exchange.: This phase is not
explicitly listed in the Bluetooth v5.2 speciﬁcation and is not
a phase of the Passkey Entry protocol as presented therein;
however, it encompasses a variety of steps performed over
an insecure channel before pairing commences including the
sharing of data essential to the protocol. This includes device
discovery for the sharing of identities (A and B), IO capabili-
ties (IOcapA and IOcapB), and initialization of a connection.
Phase 1: Public Key Exchange.: The purpose of Phase
1 is to generate a shared key via an ECDH key agreement.
To accomplish this, the public keys of devices A and B are
exchanged in steps 2 and 3, and the shared key DHKey is
calculated in steps 5a and 5b.
Initiating
Device: A
Responding
Device: B
Phase 0: Init and IOcap Exchange
0. A, B, IOcapA, IOcapB
Phase 1: Public Key Exchange
$← {0, 1}255
1a. SKa
2a. P Ka ← [SKa]P
5a. DHKey ← [SKa]P Kb
$← {0, 1}255
1b. SKb
2b. P Kb ← [SKb]P
5b. DHKey ← [SKb]P Ka
3. P Ka
4. P Kb
Phase 2: Authentication Stage 1
Initiator-Generated Passkey Entry
6. r $← {0, 1, 2, . . . , 9}6
7. r
User
8. r
Responder-Generated Passkey Entry
6. r $← {0, 1, 2, . . . , 9}6
8. r
User
7. r
User-Generated Passkey Entry
6. r $← {0, 1, 2, . . . , 9}6
7. r
8. r
User
9a. ra ← r, rb ← r
$← {0, 1}128
10a. Na,i
11a. Ca,i ← HMAC(Na,i, P Kax(cid:107)P Kbx(cid:107)ra,i)
Execute steps 10a - 17
twenty times in sequence
9b. ra ← r, rb ← r
$← {0, 1}128
10b. Nb,i
11b. Cb,i ← HMAC(Nb,i, P Kbx(cid:107)P Kax(cid:107)rb,i)
12. Ca,i
13. Cb,i
14. Na,i
15. v1 ← Vfy(Na,i, (P Kax(cid:107)P Kbx(cid:107)rb,i), Ca,i)
17. v2 ← Vfy(Nb,i, (P Kbx(cid:107)P Kax(cid:107)ra,i), Cb,i)
16. Nb,i
18a. Ea ← HMAC(DHKey, Na,20(cid:107)Nb,20(cid:107)rb(cid:107)IOcapA(cid:107)A(cid:107)B)
Phase 3: Authentication Stage 2
18b. Eb ← HMAC(DHKey, Nb,20(cid:107)Na,20(cid:107)ra(cid:107)IOcapB(cid:107)B(cid:107)A)
20. v3 ← Vfy(DHKey, (Na,20(cid:107)Nb,20(cid:107)rb(cid:107)IOcapA(cid:107)A(cid:107)B), Ea)
19. Ea
22. v4 ← Vfy(DHKey, (Nb,20(cid:107)Na,20(cid:107)ra(cid:107)IOcapB(cid:107)B(cid:107)A), Eb)