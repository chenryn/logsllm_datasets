associated with any of the user’s currently operating exit
bridges, it sends a request to the broker to instantiate a new
exit bridge. In this way, an exit bridge (or an eavesdropper) can
only see the user’s network activity to a single website. A cabal
of curious exit bridges (or an eavesdropper that can observe
trafﬁc traversing multiple exit bridges) still cannot link web
requests, since each exit bridge is accessed over independent
Tor circuits; that is, it cannot discern whether web requests
forwarded through two exit bridges belong to the same or
different Tor users.
One potential concern is that multiple exit bridges are
needed for browsing even just one website, if the site includes
web objects from multiple second-level domains that block
Tor. To determine how often this might happen in practice,
we conducted a short experiment in which we conﬁgure the
Tor Browser plugin to use exit bridges for all sites in the Alexa
top 10,000 list that block Tor. We then visit 20 sites that block
2A second-level domain is a domain that is directly below the top-level
domain, e.g., twitter.com.
258
Tor, chosen uniformly at random from all such sites on the top
10,000 list. We ﬁnd that 19 of the visits required just one exit
bridge; the remaining site required the use of two exit bridges.
In summary, we envision that users will require only one exit
bridge to visit the vast majority of sites that block Tor.
C. Operating Cost
The operating cost of exit bridges is dominated by the
instance cost and bandwidth usage. With the current pricing
of AWS EC2 spot
instances [1], a t3-nano instance with
one vCPU and 1 GB memory, costing $0.0016 per hour, is
sufﬁcient to host an exit bridge. (All prices are in USD.)
Amazon charges $0.05 per GB for outgoing trafﬁc to the
Internet (for monthly trafﬁc over 100TB). Therefore, running
an exit bridge for 15 mins and 50 MB data transmission costs
under $0.0029.
Cost of running a global service. We further estimate the
cost of providing an exit bridge service for all Tor users
to freely visit all Tor-blocking websites. Hence, we provide
conservative cost estimates in this section.
is,
that
We assume that Tor users exhibit similar browsing behav-
ior to general web users [27];
the distribution of
website visits follows the power-law distribution [8]. Based
on this assumption, we estimate the percentage of website
visits that experience server-side blocking of Tor, using the
measurements we collected for the Alexa Top 10,000 websites.
Here, we ﬁt the power-law distribution to the Alexa list since
the latter speciﬁes only the ranks of websites but not their
respective popularities. According to our ﬁtted distribution, we
calculated a block rate of 4.8% for Tor’s web trafﬁc. For the
month of May 2019, Tor’s average daily measured bandwidth
across all exit relays was 52.18 Gbps [49]. Given that AWS
only charges for egress trafﬁc to the Internet, the bandwidth
subject to fees is calculated as 11.74 TB per day ($219,584
per year).
Estimating the instance cost is more challenging, since, to
the best of our knowledge, there is no study measuring screen
time on the Tor Browser. We instead take an indirect approach:
we estimate the machine time based on the number of per-day
Tor connections. Prior work has shown that the aggregated
number of Tor connections per day is approximately 148 mil-
lion [27]. Given that an esimated 4.8% of Tor trafﬁc is blocked
at the server side, We then estimate the number of connections
blocked by target websites (and therefore beneﬁtting from exit
bridges) is 710K per day. We conservatively assume that each
blocked connection needs the creation of a new 15-minute
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
exit bridge, which yields $284 in machine-time cost per day,
or $103,660 for a year.
As brokers only participate in spawning new exit bridges but
not in the actual web communication, their operating cost is
almost negligible. Taking the conservative estimation of 710K
requests per day, we ﬁnd that 250 AWS t3-nano instances are
sufﬁcient to sustain such a request rate, given that each request
typically lasts under ﬁve minutes and communicates around
300 KB data (200 KB ingress and 100 KB egress). Therefore,
the instance cost of running the global broker service is $3,285
per year, and the bandwidth cost is $1,236 per year.
The total yearly cost to allow all Tor users to visit all Tor-
blocking sites is $328K.
Crowdsourcing the operating cost. In principle, the bro-
ker could recover its operating costs using traditional web
monetization techniques—that is, by serving advertisements.
However, since visitors arrive via Tor and are anonymous,
it is both unclear whether ad networks would be willing to
serve ads where they cannot identify users (e.g., via tracking
cookies) and whether the trafﬁc volume and click-through rates
would be sufﬁcient to recover the costs.
We instead consider revenue models that are better suited
for anonymous browsing and do not require the identiﬁcation
of users. There is a nascent market of companies that present
crowdsourced image labeling tasks to website visitors and
provide some revenue to website operators.3 For example, the
hCaptcha service [23] serves a traditional CAPTCHA (e.g.,
labeling which animals are dogs or identifying dress sizes from
photographs), with the results then being used as the ground-
truth for some machine learning task by a third-party company.
Unlike Google’s popular reCAPTCHA service, hCaptcha pays
the website operator for each completed task (approximately
$0.0017 per task). In our experience, solving an hCaptcha
puzzle takes between ﬁve and ten seconds.
Assuming 710K Tor connections are blocked per day (see
the estimation of instance cost), the revenue collected from
hCaptcha is $441K per year, which is enough to cover the
running cost of the exit bridges (and, in fact, earn a small
proﬁt). In short, solving a single labeling task (requiring less
than 10 seconds) provides sufﬁcient funds for the infrastructure
required to provide access to an otherwise inaccessible site.
D. Typical workﬂow
a
to access
a website
Finally we describe
typical workﬂow for using
that otherwise
Tor
exit bridges
blocks Tor. For
illustrative purposes, we conﬁgure our
Tor Browser extension to include http://whatsmyip.com in
the Tor Browser
its
extension considers
(Choosing
whatsmyip.com is intended to show that an exit bridge is
indeed used to forward trafﬁc, since the site lists the requesting
IP. In actuality, whatsmyip.com does not block Tor trafﬁc.)
server-side blocking list;
site
that
to block Tor.
the
is,
3This is very distinct from and should not be confused with unscrupulous
sites that outsource the solving of CAPTCHAs (primarily to workers in
inexpensive labor markets) in order to bypass site protections.
259
When the user attempts to browse to the site,
the Tor
Browser extension detects that it has been tagged as a site
that blocks Tor. The Tor Browser will not load the webpage
directly; instead, it offers the user the option of accessing the
site through an exit bridge (Figure 5a). Should the user choose
to, it will be redirected to the broker and asked to complete a
CAPTCHA to instantiate an exit bridge (Figure 5b).
Once the CAPTCHA is completed, an exit bridge (an
AWS EC2 instance in this case) will be instantiated and be
conﬁgured to dedicatedly route trafﬁc for the user to access
http://whatsmyip.com. The instantiation and conﬁguration pro-
cess is transparent to the user. From the user’s perspective, it
will immediately be able to access the website (which would
otherwise block Tor) through a Tor-circuit to the exit bridge
and then to the target destination (Figure 5c). The IP address
displayed on the webpage belongs to the exit bridge.
V. EVALUATION
In this section, we focus on answering the following ques-
tions: (i) how much collateral damage is inﬂicted when site
operators opt to block all requests originating from cloud
service providers? (ii) what is the effectiveness of exit bridges
in enabling Tor users to access previously blocked websites?
and (iii) how much performance overhead is introduced by
exit bridges, in terms of the latency and total time spent for
loading a website?
A. Experimental Setup
In our evaluation, we deployed the broker as a Tor hidden
service. Exit bridges were hosted on t3-nano EC2 instances
in Amazon’s US East Region, conﬁgured as we described in
§IV-A2. To enable automated evaluation on a large coverage
of websites, we emulated the browsing of a destination website
by calling PYCURL.PERFORM() with a Firefox USER-AGENT
HTTP request header.
As a comparative study, we consider the following four
different conﬁgurations:
• DIRECT serves as the baseline of the evaluation, where
the client communicates with the destination website
directly through the Internet.
• TOR represents that the client attempts to visit the desti-
nation website through Tor.
• In PROXYONLY, the client communicates with the des-
tination website through the exit bridge only, but not
through Tor. This conﬁguration enables microbenchmarks
to assess the overheads of exit bridges, but is not intended
for real-world use.
• Finally, EXITBRIDGE is the complete deployment, where
the client-website communication is relayed through both
the Tor network and the exit bridge.
In our evaluation, as the destination websites, we used the
top 1,000 websites in the Amazon Alexa’s top one million
site list [4]. For each website, we sent 10 consecutive requests
using each conﬁguration. As minor complications, we had to
resolve issues caused by HTTP redirects and inconsistent DNS
resolutions:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
(c)
Fig. 5: (a) The Tor Browser extension detects that the user is attempting to access a site that blocks Tor, and offers the user the option
of accessing the site through an exit bridge. (b) The exit bridge requires the user to complete a CAPTCHA to continue. (c) The site (that
otherwise would block Tor) is accessed through the exit bridge. The IP address displayed in the screenshot is the (AWS-hosted) IP address
of the exit bridge.
Handling HTTP redirections. We used Amazon Alexa’s
top 1,000 websites as the destination websites. Since this is
a list of hostnames, a direct connection to http://hostname
(or https://hostname) may be redirected, which can introduce
unpredictable extra trafﬁc and unexpected HTML responses.
To address this, we generated a list of redirected URLs from
the original hostname list before the evaluation: we directly
connected to http://hostname (or https://hostname) and then
noted any redirections.
Fixing DNS resolution. For many websites, a single hostname
could resolve to multiple IP addresses. This can occur when
reverse proxies,
load balanced DNS, or (most commonly)
content distribution networks (CDNs) are used. To ensure
that we communicated to the same IP address across all
four conﬁgurations, we performed DNS resolution before the
evaluation and ensured that all subsequent experiments would
use consistent IP addresses.
For each request, if a server response is received within
10 seconds, we save the response as well as pcap packet
traces captured from the local machine and the exit bridge.
(We emphasize that we record only our own trafﬁc.) Note
that we fetch the base HTML only and do not retrieve other
web objects or execute embedded Javascript. The collected
HTML and pcap ﬁles are used to analyze the HTML similarity
between different conﬁgurations, and the latency incurred
when accessing the destination websites.
Our results are obtained using a ﬁxed client location. How-
ever, the location of the client should have negligible impact
on our evaluation results since the client’s network location
is protected by Tor—and not available to the destination
website—and thus does not affect server-side blocking of Tor
trafﬁc. In terms of the effectiveness of the exit bridges, whether
a web request encounters server-side blocking is inﬂuenced
almost exclusively by the IP or geolocation of the last hop in
the circuit, i.e., the exit relay or exit bridge.
B. Effectiveness of Exit Bridges
By using exit bridges, Tor users should be able to access
websites that block Tor trafﬁc, and the responses received
should be the same or similar to those when the pages are
fetched directly without Tor. To verify this, we calculate the
HTML similarity [28] of DIRECT, TOR, PROXYONLY, and
Baseline
Tor
ExitBridge
ProxyOnly
F
D
C
1.0
0.8
0.6
0.4
0.2
0.0
0.0
0.2
0.4
0.6
Similarity
0.8
1.0
Fig. 6: CDF of HTML similarity scores.
EXITBRIDGE (see §V-A) against pages fetched directly. Both
this baseline and DIRECT use direct IP to fetch the webpages;
we include DIRECT here to show how HTML similarity
naturally shifts due to dynamic content.
Figure 6 plots the CDF of the similarity scores. A sim-
ilarity score of 1 indicates an exact match and a score of
0 indicates little or no commonalities. As expected, DIRECT
consistently has the highest HTML similarity: over 90% of
the fetched websites are the exact match of their references.
A signiﬁcant portion of requests in the TOR conﬁguration
yield a similarity score of zero, meaning Tor trafﬁc is blocked
by these websites. We note that this block rate is inﬂated by
including the websites hosted on Cloudﬂare—these websites
require a CAPTCHA challenge for accesses from pycurl
but would otherwise have rendered correct content on the
Tor Browser [40]. Even excluding these Cloudﬂare-hosted
websites, the accurate block rate of Tor is still well above
13.8% (the rate decreases to around 8.97% for the Alexa top
10,000 websites).
On the other hand, the curves for PROXYONLY and EXIT-
BRIDGE track that of DIRECT closely, offering signiﬁcantly
improved access to the Tor-blocking websites. The relatively
lower similarity scores (compared to DIRECT) are mainly due
to the use of the exit bridge’s geographic location, which
differs from that of the machine in the DIRECT conﬁguration,
leading to differences in sites that customize content based on
clients’ perceived geographic locations. EXITBRIDGE receives
marginally lower similarity scores compared to PROXYONLY.
This is because,
the use of Tor caused a
in rare cases,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
260
signiﬁcantly prolonged retrieval time that caused the request
to time out.
C. Performance Overhead
To evaluate the performance overhead of exit bridges,
we measure both the time-to-ﬁrst-byte and time-to-last-byte
latency for each “browsing action”. We present the analysis re-
sults of time-to-last-byte; similar observations are made in the
time-to-ﬁrst-byte analysis below. Time-to-last-byte measures
the time elapsed for the pycurl.perform() function call
to complete—that is, for the entire page to be fetched. Time-
to-last-byte additionally reveals the transmission goodput.
Figure 7a shows the CDF of the time-to-last-byte latency.
We observe that PROXYONLY incurred negligible latency
compared to DIRECT for web requests. Similarly, the compar-