on dynamic taint analysis [24, 39, 13] wherein, input data
is marked as tainted and tracked through memory to ensure
that they do not end up in security critical data structures.
PVE component relies on integrity of kernel data to guaran-
tee the correctness of perceived events in the guest kernel.
Since PVE component retrieves the data directly from the
guest OS kernel data structures, attacks that tamper with
the kernel data will mislead Total-CFI.
Furthermore, non-control ﬂow side channel attacks, phys-
ical attacks and attacks that target the VMM are also out
of Total-CFI’s scope. Attacks against the VMM have been
demonstrated in the past [4].
Exploits within whitelist. Total-CFI treats the entries in
the whitelist as legal entries for indirect branch operations.
Therefore, all the function entry points (such as libc func-
tions) belong to the whitelist. This gives rise to a possibility
for an attacker to craft an attack such that the jump/call
target is an entry within the whitelist. Currently, Total-CFI
is vulnerable to such jump-or-call-to-libc type of attacks.
4Passmark Software: http://www.passmark.com
Note that return-to-libc will be captured by Total-CFI due
to the violation in the shadow call stack.
6.2 Integration with Hardware
While enforcing CFI at the hardware provides improved
performance and stricter security, low performance overhead
is a primary requirement for a functionality to be imple-
mented at the hardware. An average overhead of 7.46KB per
loaded binary in the memory allows a hardware engineer to
set aside a designated amount of memory for whitelist cache
(say 8MB or 16MB). This makes it feasible to move system-
wide CFI enforcement to the hardware. CFIMon [36] has
made eﬀorts in this direction. Though CFIMon uses perfor-
mance counters in the CPU to aid in CFI enforcement, the
actual CFI enforcement happens in software modules.
While the core functionality can be accomplished by di-
rectly accessing the guest CPU and memory, guest OS data
structures are needed to reconstruct guest semantic view. It
is possible to design a system wherein, the PVE component
and CFIC are embedded in the guest CPU, and the mod-
ule whitelists for CFI enforcement are retrieved and shared
to the CPU by a privileged kernel module. We intend to
pursue this direction as future research.
7. RELATED WORK
Vulneratbility Detection and Testing. There have been
several works [21, 7, 32, 20] that discover vulnerabilities in
binaries either through static analysis or through dynamic
analysis or both. Fundametally, we diﬀer from such works
since our goal is to dynamically identify when a particular
vulnerability is exploited and not to detect the vulnerability
itself. However, once an exploit has been detected, Total-
CFI does help in analyzing the exploit and identifying the
vulnerability that was exploited.
Exploit Diagnosis. Exploit diagnosis and mitigation has
attracted several research eﬀorts [40, 27, 30, 11, 14] in the
past. PointerScope [40] deﬁnes control and data types and
performs instruction level type propagation to identify type
misuses, which is usually the case during an exploit. How-
ever, PointerScope suﬀers from severe performance over-
head. On the other hand, tainting based approaces [27, 30,
39] are prone to under and overtainting problems that cause
false positives.
Program Integrity Models. Control Flow Integrity is
just one of many Program Integrity Models such as Data
Flow Integrity, Software Fault Isolation, etc. Abadi et al. [2]
highlighted and formalized Control Flow Integrity in binary
programs. They enforce CFI during a program execution
by embedding CFI checks in the form of inlined reference
monitors into the binary during compilation.
Along similar lines, WIT [3] uses points analysis to iden-
tify the objects that a program can write to at compile time
and prevents the program from writing to other objects.
Both [2, 3] approaches rely on the program source code,
which is not always available. Kiriansky et al. [25] proposed
Program Shepherding, where the control ﬂows are restricted
based on the origin and the target of the control transfer.
Their solution does not address whole system CFI enforce-
ment.
Davi et al. [16] introduce CFI on ARM. They combine
static analysis with dynamic binary rewriting to moderate
320control ﬂow. CFIMon [36], on the other hand, uses hard-
ware performance counters to identify control ﬂow viola-
tions.
In an oﬄine mode, it gathers the set of legitimate
target addresses for each branch instruction and in the on-
line mode, it gathers and analyzes the traces from branch
counters, and uses heuristics to identify control ﬂow viola-
tions. Though it relies on the hardware for trace gather-
ing, actual enforcement happens in the the software. Some
prior eﬀorts also made use of relocation tables and export
address tables to validate the legitimacy of indirect jump
targets. HookScout [38] tracks function pointers in the ker-
nel and automatically generates hook detection policy. More
recently, FPGate [35] retrieves a list of indirect code targets
from relocation table and export table, and performs binary
rewriting to validate indirect jump/call targets and prevent
control-ﬂow hijacking attacks.
To address data attacks, DFI [8] ﬁrst performs static anal-
ysis to capture legitimate data ﬂows in the form of data ﬂow
graph and then ensures that the data ﬂow at runtime satis-
ﬁes the computed graph.
Software Fault Isolation [33] focusses on software based
isolation of untrusted modules within an address space. They
modify an untrusted binary to prevent it from branching out
of or changing memory outside the memory region allocated
to it. This way, untrusted modules cannot exploit other
modules. Though such a solution is feasible for individual
modules, it is not feasible for system-wide monitoring.
Virtual Machine Introspection.
Introspecting a vir-
tual machine often requires interpreting the low level bits
and bytes of guest OS kernels to high level semantic state.
This is a non-trivial task, because of the semantic-gap [10].
Garﬁnkel and Rosenblum [19] introduced VMI in intrusion
detection and Jiang et al. used VMI in to detect mal-
ware [23]. Early approaches (e.g., [29, 23, 5, 39]) use manual
eﬀorts in combination with installing hooks in the guest OS
to locate the kernel objects in the guest OS. Recent ad-
vances largely automate this process [17, 18]. In our work,
we identify OS entities like process, thread and modules di-
rectly from the CPU. We also minimize the access to guest
memory in the better interest of performance and devise a
new thread stack identiﬁcation algorithm to cope with per-
formance requirements.
OS-Sommelier [22] takes a memory only approach to ﬁn-
gerprint the guest OS in the cloud. It identiﬁes the kernel
code and computes a hash to ﬁngerprint the OS. Though
its approach is scalable to diﬀerent OSs, such an approach
is more suitable for memory forensics than for punctual OS
view extraction.
8. CONCLUSION
In this paper, we presented Total-CFI, a proof-of-concept
implementation of system-wide CFI enforcement. To accom-
plish system-wide CFI, we performed Punctual Guest OS
View Extraction and introduced a novel Thread Stack Lay-
out Identiﬁcation algorithm to gather semantic information
from the guest in a timely manner. We evaluated Total-CFI
and found 0 false positives and false negatives. We found
a memory overhead of 7.46KB per loaded module and an
execution overhead of 64.1% hence making it feasible for
integration with hardware.
9. ACKNOWLEDGEMENTS
We would like to thank anonymous reviewers for their
comments, and in particular our shepherd, Lenx Wei, for his
help in addressing the concerns of those reviewers. We would
also like to thank Masters students at Syracuse University,
Shengming Xu and Haoru Zhao for their help in evaluating
Total-CFI. This research was supported in part by McAfee
Inc., NSF grant #1018217, NSF grant #1054605 and Singa-
pore MoE grant R-252-000-460-112. Any opinion, ﬁndings,
conclusions, or recommendations expressed are those of the
authors and not necessarily of the funding agencies.
10. REFERENCES
[1] DECAF: Binary Analysis Platform. Sycurelab,
Syracuse University.
http://code.google.com/p/decaf-platform/.
[2] Abadi, M., Budiu, M., Erlingsson, U., and
Ligatti, J. Control-ﬂow integrity principles,
implementations, and applications. ACM Trans. Inf.
Syst. Secur. 13, 1 (Nov. 2009), 4:1–4:40.
[3] Akritidis, P., Cadar, C., Raiciu, C., Costa, M.,
and Castro, M. Preventing memory error exploits
with wit. In Proceedings of the 2008 IEEE Symposium
on Security and Privacy (2008), SP ’08.
[4] Bahram, S., Jiang, X., Wang, Z., Grace, M., Li,
J., Srinivasan, D., Rhee, J., and Xu, D. Dksm:
Subverting virtual machine introspection for fun and
proﬁt. In Proceedings of the 29th IEEE International
Symposium on Reliable Distributed Systems
(SRDS’10) (2010).
[5] Baiardi, F., and Sgandurra, D. Building
trustworthy intrusion detection through vm
introspection. In Proceedings of the Third
International Symposium on Information Assurance
and Security (2007), IEEE Computer Society.
[6] Bellard, F. Qemu, a fast and portable dynamic
translator. In USENIX Annual Technical Conference,
FREENIX Track (April 2005).
[7] Cadar, C., Dunbar, D., and Engler, D. KLEE:
unassisted and automatic generation of high-coverage
tests for complex systems programs. In Proceedings of
the 8th USENIX conference on Operating systems
design and implementation (OSDI’08).
[8] Castro, M., Costa, M., and Harris, T. Securing
software by enforcing data-ﬂow integrity. In
Proceedings of the 7th symposium on Operating
systems design and implementation, OSDI ’06.
[9] Chaudhuri, A., Naldurg, P., and Rajamani, S. A
type system for data-ﬂow integrity on windows vista.
SIGPLAN Not. 43, 12 (Feb. 2009), 9–20.
[10] Chen, P. M., and Noble, B. D. When virtual is
better than real. In Proceedings of the Eighth
Workshop on Hot Topics in Operating Systems (2001).
[11] Chen, S., Xu, J., Nakka, N., Kalbarczyk, Z.,
and Iyer, R. Defeating memory corruption attacks
via pointer taintedness detection. In Dependable
Systems and Networks, 2005. DSN 2005. Proceedings.
International Conference on (2005).
[12] Chen, S., Xu, J., Sezer, E. C., Gauriar, P., and
Iyer, R. K. Non-control-data attacks are realistic
threats. In Proceedings of the 14th conference on
USENIX Security Symposium (2005), SSYM’05.
[13] Clause, J., Li, W., and Orso, A. Dytan: a generic
dynamic taint analysis framework. In Proceedings of
the 2007 International Symposium on Software
Testing and Analysis (ISSTA’07).
[14] Costa, M. Vigilante: End-to-end containment of
internet worms. In Proceedings of the 20th ACM
321Symposium on Operating Systems Principles
(SOSP’05).
[15] Costa, M., Castro, M., Zhou, L., Zhang, L., and
Peinado, M. Bouncer: securing software by blocking
bad input. In Proceedings of 21st ACM SIGOPS
Symposium on Operating Systems Principles
(SOSP’07).
[16] Davi, L., Dmitrienko, R., Egele, M., Fischer, T.,
Holz, T., Hund, R., N ˜Aijrnberger, S., and reza
Sadeghi, A. Mocﬁ: A framework to mitigate
control-ﬂow attacks on smartphones. In In Proceedings
of the Network and Distributed System Security
Symposium (NDSS’12).
[17] Dolan-Gavitt, B., Leek, T., Zhivich, M., Giffin,
J., and Lee, W. Virtuoso: Narrowing the semantic
gap in virtual machine introspection. In Proceedings of
the IEEE Symposium on Security and Privacy
(Oakland) (May 2011).
[18] Fu, Y., and Lin, Z. Space traveling across vm:
Automatically bridging the semantic-gap in virtual
machine introspection via online kernel data
redirection. In Proceedings of the 2012 IEEE
Symposium on Security and Privacy (San Francisco,
CA, May 2012).
[19] Garfinkel, T., and Rosenblum, M. A virtual
machine introspection based architecture for intrusion
detection. In Proceedings of Network and Distributed
Systems Security Symposium (NDSS’03) (February
2003).
[20] Godefroid, P., Klarlund, N., and Sen, K. Dart:
directed automated random testing. In Proceedings of
the 2005 ACM SIGPLAN conference on Programming
language design and implementation (2005), PLDI ’05,
ACM.
[21] Godfroid, P., Levin, M. Y., and Molnar, D.
Automated whitebox fuzz testing. In Proceedings of
the 15th Annual Network and Distributed System
Security Symposium (NDSS’08) (February 2008).
[22] Gu, Y., Fu, Y., Prakash, A., Lin, Z., and Yin, H.
Os-sommelier: memory-only operating system
ﬁngerprinting in the cloud. In Proceedings of the Third
ACM Symposium on Cloud Computing, SoCC ’12.
[23] Jiang, X., Wang, X., and Xu, D. Stealthy malware
detection through VMM-based ”out-of-the-box”
semantic view reconstruction. In Proceedings of the
14th ACM conference on Computer and
Communications Security (CCS’07) (October 2007).
[24] Kang, M. G., McCamant, S., Poosankam, P.,
and Song, D. Dta++: Dynamic taint analysis with
targeted control-ﬂow propagation. In Proceedings of
the 18th Annual Network and Distributed System
Security Symposium (NDSS’11).
[25] Kiriansky, V., Bruening, D., and Amarasinghe,
S. P. Secure execution via program shepherding. In
Proceedings of the 11th USENIX Security Symposium
(2002), USENIX Association.
[26] Lin, Z., Rhee, J., Zhang, X., Xu, D., and Jiang,
X. Siggraph: Brute force scanning of kernel data
structure instances using graph-based signatures. In
Proceedings of the 18th Annual Network and
Distributed System Security Symposium (NDSS’11).
[27] Newsome, J., and Song, D. Dynamic taint analysis
for automatic detection, analysis, and signature
generation of exploits on commodity software. In
Proceedings of the 12th Annual Network and
Distributed System Security Symposium (NDSS’05).
[28] Nicolas Falliere, Liam O Murchu, E. C.
Symantec stuxnet dossier. http://www.symantec.com/
content/en/us/enterprise/media/security_
response/whitepapers/w32_stuxnet_dossier.pdf.
[29] Petroni, N. L., Jr., Fraser, T., Molina, J., and
Arbaugh, W. A. Copilot - a coprocessor-based kernel
runtime integrity monitor. In Proceedings of the 13th
USENIX Security Symposium (2004).
[30] Portokalidis, G., Slowinska, A., and Bos, H.
Argos: an emulator for ﬁngerprinting zero-day attacks.
In EuroSys 2006 (April 2006).
[31] Russinovich, M., Solomon, D. A., and Ionescu,
A. Windows Internals. 5th Ed. Microsoft press, 2009.
[32] Sen, K., Marinov, D., and Agha, G. Cute: a
concolic unit testing engine for c. In Proceedings of the
10th European software engineering conference held
jointly with 13th ACM SIGSOFT international
symposium on Foundations of software engineering
(2005).
[33] Wahbe, R., Lucco, S., Anderson, T. E., and
Graham, S. L. Eﬃcient software-based fault
isolation. In Proceedings of the 14th SymPosium on
Operating System Principles (1993).
[34] Wartell, R., Mohan, V., Hamlen, K. W., and
Lin, Z. Binary stirring: self-randomizing instruction
addresses of legacy x86 binary code. In Proceedings of
the 2012 ACM conference on Computer and
communications security, CCS ’12.
[35] Wei, T., Zhang, C., Chen, Z., Duan, L.,
Szekeres, L., McCamant, S., and Song, D.
Fpgate: The last building block for a practical cﬁ
solution, technical report for microsoft bluehat prize
contest. Tech. rep., Apr 2012.
[36] Xia, Y., Liu, Y., Chen, H., and Zang, B. Cﬁmon:
Detecting violation of control ﬂow integrity using
performance counters. In Dependable Systems and
Networks (DSN) 2012.
[37] Yan, L. K., and Yin, H. Droidscope: seamlessly
reconstructing the os and dalvik semantic views for
dynamic android malware analysis. In Proceedings of
the 21st USENIX conference on Security symposium -
2012, USENIX Association.
[38] Yin, H., Poosankam, P., Hanna, S., and Song, D.
HookScout: Proactive binary-centric hook detection.
In Proceedings of Seventh Conference on Detection of
Intrusions and Malware & Vulnerability Assessment
(DIMVA’10) (July 2010).
[39] Yin, H., Song, D., Manuel, E., Kruegel, C., and
Kirda, E. Panorama: Capturing system-wide
information ﬂow for malware detection and analysis.
In Proceedings of the 14th ACM Conference on
Computer and Communication Security (CCS’07).
[40] Zhang, M., Prakash, A., Li, X., Liang, Z., and
Yin, H. Identifying and analyzing pointer misuses for
sophisticated memory-corruption exploit diagnosis. In
Proceedings of 19th Annual Network & Distributed
System Security Symposium (2012).
322