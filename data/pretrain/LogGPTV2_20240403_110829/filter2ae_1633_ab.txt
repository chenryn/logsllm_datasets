        }
      });
    }
并且compileAndExecuteMethod()在解析表达式之前，执行了一些[额外的过滤](https://lgtm.com/projects/g/apache/struts/snapshot/a7d06dc8c2c2439fd75692fe40b0a93fd0d60022/files/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java#L415
"额外的过滤")
    private  Object compileAndExecuteMethod(String expression, Map context, OgnlTask task) throws OgnlException {
      Object tree;
      if (enableExpressionCache) {
        tree = expressions.get(expression);
        if (tree == null) {
          tree = Ognl.parseExpression(expression);
          checkSimpleMethod(tree, context); //
                 register2
本地运行后，通过访问URL，成功在本地弹出计算器。  
命令执行需要花了一些时间去绕过OGNL沙箱。出于安全考虑，作者暂时不公开沙箱绕过的细节。
不仅如此，从ActionChainResult、PostbackResult、ServletUrlRenderer传入也可以触发漏洞。PortletActionRedirectResult可能也存在漏洞，但作者并没有测试它。四个RCE已经足以证明问题的严重性。
### 结论
在这篇文章中，作者通过老洞，来进行污点建模，把遍历操作交给QL
DataFlow库处理。通过研究之前的3个RCE漏洞，发现了新的4个RCE漏洞（可能是五个）！  
鉴于S2-032，S2-033和S2-037都是在同一段时间内被发现的，大家很快能通过S2-032寻找到类似的S2-033和S2-037。那么问题来了，（S2-057）也来自类似的污染源，为啥整整两年时间内都没人发现嘞？个人认为，这是因为S2-032，S2-033和S2-037都出现在源代码中的相似位置（都在Rest插件中）。而S2-057和S2-032之间的相似性更多的是在语义层面。
如果你认为这个0day只是侥幸，因为作者假设了从ActionProxy传入的namespace可控，那请关注作者的下一篇文章，下一篇文章会详细介绍从HttpRequestServlet本身开始攻击链挖掘。作者还会分享他的一些工具，以及一些改进算法的Tips。在这个过程中，将看到QL如何发现S2-045！