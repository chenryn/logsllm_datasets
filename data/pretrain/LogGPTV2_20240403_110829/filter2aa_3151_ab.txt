Company  Logo 
Wrong Module Switching 
v Detect ROP Attacks 
v Based on Stack Back-tracing 
Company  Logo 
Wrong Module Switching 
v Hooks in Kernel-Mode on win32 
v Uses SSDT Hooking 
v Hooking on WOW64 for win64 
v Hook Specific APIs 
v Hooks: 
§  VirtualProtect and similar functions 
§  CreateProcess and similar 
§  Network and Socket APIs 
§  And more 
Company  Logo 
Wrong Module Switching 
v Using Stack Backtracing to Return to The API 
Caller 
v Checks the API Call are: 
§  Check The Call to this API or not 
§  Check The Parameters 
§  Check the next Call Stack if it calls to the function that 
calls to the API 
§  Check The SEH if it’s in the same module 
§  Check if there’s null parameters 
§  Near return address after the call 
§  And more 
v Gives a score to API call 
Company  Logo 
Wrong Module Switching 
v Check on Different Calls like: 
§  Call dword ptr [] 
§  Lea eax,  
call eax 
§  Call API 
API:Jmp dword ptr [] 
Company  Logo 
Wrong Module Switching 
v Category Parameters based on: 
§  CONST: push xxxxxxxxh 
    OR lea eax, [xxxxxxxh] 
       push eax 
§  STACK: lea eax, [ebp +/- xxxxh] 
   push eax 
§  REGISTER: push exx 
§  UNKNOWN: push any 
Company  Logo 
Wrong Module Switching 
Demo on ShellExecute 
Company  Logo 
Demo: Hooking Firefox with EDS 
Company  Logo 
Demo: Force Firefox to create 
Process 
Company  Logo 
Demo: The call stack to 
ShellExecute 
Company  Logo 
Demo: The ShellExecute Params 
Company  Logo 
Demo: The Action Scoring 
Company  Logo 
Demo: a Vulnerable application 
Company  Logo 
Demo: Running and Hooking it 
Company  Logo 
Demo: The Action Scoring and 
Detection 
Company  Logo 
SEH Mitigation 
v SEH is a linked list of pointers to 
functions handle an error 
v Very basic Mitigation 
v Saves the SEH Linked List 
v Check if it ends differently 
Company  Logo 
Mitigations For Heap 
v We mitigate these attack vectors: 
§  Heap Overflow 
§  Heap Spray 
§  Heap Use After Free 
v Hooks GlobalAlloc and jemalloc 
v Create a new Header for memory 
allocations 
Company  Logo 
New Header Design 
v It’s Divided Into 2 Headers 
Company  Logo 
Design of Buffer Header 
v This is a Header in a separate Buffer 
v It points to the buffer 
v It get the Caller Module  
and the allocation Time 
v It checks for vtable inside 
the buffer and Mark it  
as Important 
v It reset everything in ~ 2 secs 
Company  Logo 
Overflow Mitigation 
v It checks for: 
§  Nulls: to stop the string overwrite 
§  Cookie: to stop managed overwrite 
v It’s used mainly against jemalloc 
Company  Logo 
HeapSpray Mitigation 
v It searches for Allocations: 
§  Many Allocations from the same Module 
§  Large Memory Usage 
§  In very small time 
v Take 2 random buffers 
v Scan for shellcode and ROP chains 
Company  Logo 
Use-After-Free Mitigation 
v Scans for vtable inside buffers 
v Delay the free for these buffers 
v Wipe them with 0xBB 
v Free them at the end of the slot ~ 2 
secs 
v Detect Attacks when access 0xBB in 
Heap 
Company  Logo 
Put All together 
v It does 2 type of scanning: 
§  Critical Scanning: when calls to an API to 
check ROP Attack or detect HeapSpray .. etc 
§  Periodical Scanning: That’s the monitoring 
system 
Company  Logo 
Scoring System 
v It’s based on the Mitigation 
v It stop the known Attacks and 
terminate the Process 
v Alert for suspicious Inputs 
v Take Dump of the Process 
Company  Logo 
Monitoring System 
v It scans Periodically 
v Checks for possible Attacks 
v Like: 
§  Check Executable Places in Stack 
§  Check Executable Places in Memory Mapped 
Files 
§  Search for ROP Chains and Shellcode in 
Stack and Heap 
§  Check Threads running in place outside 
memory 
§  And many more 
Company  Logo 
Future Work 
v We are planning to create a central 
Server 
v Receives Alerts and warning 
v Monitoring Exploitations on  
client machine 
v With a graphical  
Dashboard 
Company  Logo 
Future Work: Dashboard 
v The Dashboard includes Suspicious 
Processes in all Machines 
v Includes the files loaded inside the 
suspicious processes (PDF, DOC … 
etc) 
v Includes IPs of these processes 
connect to (after review the Privacy 
policy) 
Company  Logo 
Future Work: Dashboard 
v EDS will become your Memory and 
Exploitation Monitor. 
v Will correlate with your network tools 
v Will be your defense inside the client 
v More Intelligent than Antivirus 
v Better Response 
Company  Logo 
Dashboard: What you can Detect 
v Using this Dashboard you can detect: 
§  Suspicious PDF or Word File many people 
opened it: 
it could be an email sent to many people in 
the company 
Company  Logo 
Dashboard: What you can Detect 
v Using this Dashboard you can detect: 
§  In small time … IE for many employees 
become suspicious with similar shellcode: 
could be a suspicious URL visited by a 
phishing mail 
Company  Logo 
Dashboard: What you can Detect 
v Using this Dashboard you can detect: 
§  You can detect suspicious IPs did a scanning 
over your network and now suspicious 
processes connect to it 
Company  Logo 
Development 
v The EDS is based on SRDF  
v “Security Research and Development 
Framework” 
v Created by Amr Thabet 
v Includes 3 main contributors 
Company  Logo 
SRDF 
v development framework 
v Support writing security tools 
v Anti-Malware and Network Tools 
v Mainly in windows and C++ 
v Now creating linux SRDF and 
implementation on python 
Company  Logo 
SRDF Features 
v Parsers: 
§  PE and ELF Parsers 
§  PDF Parser 
§  Andoid (APK or/and DEX) Parser 
v Static Analysis: 
§  Include wildcard like YARA 
§  x86 Assembler and Disassembler 
§  Android Delivk Java Disassembler  
Company  Logo 
SRDF Features 
v Dynamic Analysis: 
§  Full Process Analyzer 
§  Win32 Debugger 
§  x86 Emulator for apps and shellcodes 
v Behavior Analysis: 
§  API Hooker 
§  SSDT Hooker (for win32) 
§  And others 
Company  Logo 
SRDF Features 
v Network Analysis 
§  Packet Capturing using WinPcap 
§  Pcap File Analyzer 
§  Flow Analysis and Session Separation 
§  Protocol Analysis: tcp, udp, icmp and arp 
§  App Layer Analysis: http and dns 
§  Very Object Oriented design 
§  Very scalable 
Company  Logo 
SRDF 
v Very growing community 
v I will present it in  
v Become a part of this growing 
community 
Company  Logo 
SRDF 
v Reach it at: 
§  Website: www.security-framework.com 
§  Source: 
https://github.com/AmrThabet/winSRDF 
§  Twitter: @winSRDF 
v Join us 
Company  Logo 
What we reach in EDS 
v We developed the Mitigations 
separately 
v We tested the Shellcode Scanner on 
real shellcodes 
v Still testing on real world scenarios 
v Join us and help us. 
Company  Logo 
Reach Us 
v Still there’s no website for EDS 
v You can reach us at SRDF Website: 
 www.security-framework.com 
v And my Twitter: @Amr_Thabet 
v Just mail me if you have any feedback 
§  Amr.thabet[@#!*^]owasp.org 
Company  Logo 
Conclusion 
v EDS is the new security tool for this 
Era 
v The Last line to defend against APT 
Attacks 
v Still we are in the middle of the 
Development 
v SRDF is the main backbone for it 
v Join Us 
Company  Logo 
Big Thanks to 
v Jonas Lekyygaurd 
v Anwar Mohamed  
v Corlan Team 
v All Defcon Team   
v Big thanks for YOU 
Company  Logo