---
author: Tim Pettersen
category: 观点
comments_data:
- date: '2017-04-21 10:00:37'
  message: 瞬干爆炸
  postip: 202.107.194.180
  username: 来自浙江杭州的 Firefox 52.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 9329
date: '2017-04-18 11:52:00'
editorchoice: true
excerpt: 我决定整理这一年里六个我最喜爱的 Git 特性涵盖的改进，来做一次分类回顾。
fromurl: https://medium.com/hacker-daily/git-in-2016-fad96ae22a15
id: 8419
islctt: true
largepic: /data/attachment/album/201704/18/115511oda1vievvd1em1cd.jpg
permalink: /article-8419-1.html
pic: /data/attachment/album/201704/18/115511oda1vievvd1em1cd.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我决定整理这一年里六个我最喜爱的 Git 特性涵盖的改进，来做一次分类回顾。
tags:
- Git
thumb: false
title: 2016 Git 新视界
titlepic: true
translator: xiaow6
updated: '2017-04-18 11:52:00'
---
![](/data/attachment/album/201704/18/115511oda1vievvd1em1cd.jpg)
2016 年 Git 发生了 *惊天动地* 地变化，发布了五大新特性**¹** （从 *v2.7* 到 *v2.11* ）和十六个补丁**²**。189 位作者**³**贡献了 3676 个提交**⁴**到 `master` 分支，比 2015 年多了 15%**⁵**！总计有 1545 个文件被修改，其中增加了 276799 行并移除了 100973 行**⁶**。
但是，通过统计提交的数量和代码行数来衡量生产力是一种十分愚蠢的方法。除了深度研究过的开发者可以做到凭直觉来判断代码质量的地步，我们普通人来作仲裁难免会因我们常人的判断有失偏颇。
谨记这一条于心，我决定整理这一年里六个我最喜爱的 Git 特性涵盖的改进，来做一次分类回顾。这篇文章作为一篇中篇推文有点太过长了，所以我不介意你们直接跳到你们特别感兴趣的特性去。
* 完成 `git worktree` 命令
* 更多方便的 `git rebase` 选项
* `git lfs` 梦幻的性能加速
* `git diff` 实验性的算法和更好的默认结果
* `git submodules` 差强人意
* `git stash` 的90 个增强
在我们开始之前，请注意在大多数操作系统上都自带有 Git 的旧版本，所以你需要检查你是否在使用最新并且最棒的版本。如果在终端运行 `git --version` 返回的结果小于 Git `v2.11.0`，请立刻跳转到 Atlassian 的快速指南 [更新或安装 Git](https://www.atlassian.com/git/tutorials/install-git/) 并根据你的平台做出选择。
### [所需的“引用”]
在我们进入高质量内容之前还需要做一个短暂的停顿：我觉得我需要为你展示我是如何从公开文档生成统计信息（以及开篇的封面图片）的。你也可以使用下面的命令来对你自己的仓库做一个快速的 *年度回顾*！
> 
> ¹ 2016 年匹配 vX.Y.0 格式的里程碑
> 
> 
> 
```
$ git for-each-ref --sort=-taggerdate --format \
'%(refname) %(taggerdate)' refs/tags | grep "v\d\.\d*\.0 .* 2016"
```
> 
> ² 2016 年匹配 vX.Y.Z 格式的里程碑
> 
> 
> 
```
$ git for-each-ref --sort=-taggerdate --format '%(refname) %(taggerdate)' refs/tags | grep "v\d\.\d*\.[^0] .* 2016"
```
> 
> ³ 2016 年做过提交的贡献者数量
> 
> 
> 
```
$ git shortlog -s -n --since=2016-01-01 --until=2017-01-01
```
> 
> ⁴ 2016 年的提交数量
> 
> 
> 
```
$ git log --oneline --since=2016-01-01 --until=2017-01-01 | wc -l
```
> 
> ⁵ 以及 2015 年的提交数量
> 
> 
> 
```
$ git log --oneline --since=2015-01-01 --until=2016-01-01 | wc -l
```
> 
> ⁶ 2016 年添加、删除行数
> 
> 
> 
```
$ git diff --shortstat `git rev-list -1 --until=2016-01-01 master` \
 `git rev-list -1 --until=2017-01-01 master`
```
以上的命令是在 Git 的 `master` 分支运行的，所以不会显示其他出色的分支上没有合并的工作。如果你使用这些命令，请记住提交的数量和代码行数不是应该值得信赖的度量方式。请不要使用它们来衡量你的团队成员的贡献。
现在，让我们开始说好的回顾……
### 完成 Git  工作树   （    worktree    ） 
`git worktree` 命令首次出现于 Git v2.5 ，但是在 2016 年有了一些显著的增强。两个有价值的新特性在 v2.7 被引入：`list` 子命令，和为二分搜索增加了命令空间的 refs。而 `lock`/`unlock` 子命令则是在 v2.10 被引入。
#### 什么是工作树呢？
[git worktree](https://git-scm.com/docs/git-worktree) 命令允许你同步地检出和操作处于不同路径下的同一仓库的多个分支。例如，假如你需要做一次快速的修复工作但又不想扰乱你当前的工作区，你可以使用以下命令在一个新路径下检出一个新分支：
```
$ git worktree add -b hotfix/BB-1234 ../hotfix/BB-1234
Preparing ../hotfix/BB-1234 (identifier BB-1234)
HEAD is now at 886e0ba Merged in bedwards/BB-13430-api-merge-pr (pull request #7822)
```
工作树不仅仅是为分支工作。你可以检出多个 里程碑   （    tag    ） 作为不同的工作树来并行构建或测试它们。例如，我从 Git v2.6 和 v2.7 的里程碑中创建工作树来检验不同版本 Git 的行为特征。
```
$ git worktree add ../git-v2.6.0 v2.6.0
Preparing ../git-v2.6.0 (identifier git-v2.6.0)
HEAD is now at be08dee Git 2.6
$ git worktree add ../git-v2.7.0 v2.7.0
Preparing ../git-v2.7.0 (identifier git-v2.7.0)
HEAD is now at 7548842 Git 2.7
$ git worktree list
/Users/kannonboy/src/git         7548842 [master]
/Users/kannonboy/src/git-v2.6.0  be08dee (detached HEAD)
/Users/kannonboy/src/git-v2.7.0  7548842 (detached HEAD)
$ cd ../git-v2.7.0 && make
```
你也使用同样的技术来并行构造和运行你自己应用程序的不同版本。
#### 列出工作树
`git worktree list` 子命令（于 Git v2.7 引入）显示所有与当前仓库有关的工作树。
```
$ git worktree list
/Users/kannonboy/src/bitbucket/bitbucket       37732bd [master]
/Users/kannonboy/src/bitbucket/staging         d5924bc [staging]
/Users/kannonboy/src/bitbucket/hotfix-1234     37732bd [hotfix/1234]
```
#### 二分查找工作树
[git bisect](https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git#Binary-Search) 是一个简洁的 Git 命令，可以让我们对提交记录执行一次二分搜索。通常用来找到哪一次提交引入了一个指定的退化。例如，如果在我的 `master` 分支最后的提交上有一个测试没有通过，我可以使用 `git bisect` 来贯穿仓库的历史来找寻第一次造成这个错误的提交。
```