a
attacker
Empirical results: This vulnerability requires three con-
ditions: an HSTS domain with a non-HSTS subdomain (a
“hole”), cookies scoped to that subdomain, and those cookies
to not be marked with secure. Table VI summarizes the
number of domains vulnerable to the attack, broken down by
these three conditions.
This issue was present on several important domains like
Paypal, Lastpass, and USAA, and the cookies included nu-
merous tracking and analytics cookies, user attributes cookies
like county code and language, and unique session identiﬁca-
tion cookies like “guest id,” “VISITORID”, and “EndUserId”.
Stealing these cookies can be a violation of user’s privacy
and may be used to obtain a unique identiﬁer for users
browsing over HTTPS. Encouragingly, however, all authen-
tication cookies we were able to identify for these sites were
marked as secure and hence could not be leaked over HTTP.
This suggests that the secure attribute is relatively well-
understood by web developers.
C. Interaction of cookies and pinning
A similar
if example.com,
issue exists for pinned domains whereby
a cookie may leak to unprotected subdomains. For ex-
ample,
a pinned domain without
includeSubDomains, sets a cookie session_id=x with
domain=example.com, the cookie will be transmitted over
unpinned HTTPS to any subdomain of example.com. Note
that even setting the secure ﬂag doesn’t help here—this will
TABLE VII.
LEAKABLE PINNED COOKIES
Domain
crypto.cat
dropbox.com
facebook.com
twitter.com
Domain Hole
*.crypto.cat
*.dropbox.com
*.facebook.com
*.twitter.com
www.gmail.com
*.www.gmail.com
total
Insecure Cookies
3
3
17
35
5
63
Total Cookies
3
8
21
38
5
75
only require the cookie to be sent over HTTPS but an attacker
able to compromise HTTPS with a rogue certiﬁcate will still
be able to observe the value of the cookie.
Because there is no equivalent attribute to secure which
would require a cookie to be sent over a pinned connection,
there is currently no good ﬁx for this problem. The only way to
securely set cookies for a pinned domain is either to limit them
to a speciﬁc domain (by not setting a domain parameter) or
to specify includeSubDomains for the pinning policy.
Empirical results: We checked for cookies vulnerable to
theft over non-pinned HTTPS from all pinned domains in the
Chrome preload list. We observed 75 cookies on 5 pinned
domains which are accessible by non-pinned subdomains,
as summarized in Table VII. As mentioned above, there is
no equivalent of the secure attribute to limit cookies to
transmission over a pinned connection, meaning all of these
cookies are vulnerable.
Interestingly, the majority of these cookies are also in fact
vulnerable to theft over plain HTTP as 63 of these cookies
(84.0%) did not set the secure attribute.16 This suggests
that even if an attribute existed to limit cookies to a pinned
connection, the semantics of this problem are complex enough
that developers may not always deploy it.
Unlike our results for HSTS domains, we crawled 4 of
the pinned sites with login cookies and we did observe
several authentication cookies vulnerable to theft. Notably,
authentication cookies17 for both Twitter (with it’s critical
auth_token cookie) and Facebook (with c_user and xs)
are both vulnerable. Both are scoped to .twitter.com and
.facebook.com, respectively, meaning they are visible to all
subdomains even though neither Twitter nor Facebook set
includeSubDomains for their base domain. Thus an at-
tacker can steal valid authentication cookies for either website
without triggering the pinning policy.
in both cases it
We responsibly disclosed this vulnerability to both
is considered unﬁx-
sites. Unfortunately,
able at
the moment as neither site is capable of setting
includeSubDomains for their preloaded HSTS policy. A
ﬁx has been proposed which will allow these sites to specify
includeSubDomainsForPinning in the preload ﬁle.
Dropbox, by contrast, sets pins for dropbox.com with-
out includeSubDomains but scoped its login cookies to
.www.dropbox.com, for which includeSubDomains is set,
preventing the cookies from being vulnerable.
16Note
that because
requires only one
line per domain for both pinning and HSTS policies, every domain
with a non-includeSubDomains pinning policy also has a non-
includeSubDomains HSTS policy (if any HSTS policy at all).
the Chrome preload ﬁle
17Identifying exactly which set of cookies is sufﬁcient to hijack a user’s
session can be a difﬁcult problem [42] but we conﬁrmed manually for Twitter
and Facebook that the vulnerable cookies were sufﬁcient to log in.
Google’s case is considerably more complex but
in-
structive. While the majority of Google’s pinning entries
set includeSubDomains including google.com and thus
would appear to avoid this error, until August 2014 play.
google.com did not set includeSubDomains.18 For sub-
domains *.play.google.com,
the play.google.com this entry
overrode the less speciﬁc google.com entry as per RFC 6797
[5]. As a result, any subdomain of play.google.com like
evil.play.google.com was not be bound by the Google pin
set and an adversary with a rogue certiﬁcate for one of
these domains would have access to all of cookies scoped
for *.google.com there. However, Google limits its “mas-
ter” authentication cookies’ scope to accounts.google.com,
which cannot be accessed by *.play.google.com, but assigns
per-subdomain authentication cookies as needed. Thus this
vulnerability was limited to login cookies giving access to
play.google.com only. Google was aware of this vulnerability
when we initially disclosed it and has since ﬁxed it by
extending includeSubDomains to cover play.google.com.
Recommendation to browsers: As a result of our ﬁndings
with pinned cookies, we recommend that browser vendors
extend the semantics of the secure attribute for cookies as
follows: if a cookie is set by a domain with a pinning policy
and marked secure, the cookie should only be transmitted
over HTTPS connections which satisfy the pinning policy of
the domain setting the cookie. This is a relatively simple ﬁx
which would close the security holes we found without intro-
ducing any new syntax. This is also a reasonable interpretation
of the original speciﬁcation for secure, which never limited
the syntax to mean simply HTTPS. Given that a large number
of developers have successfully learned to mark important
cookies as secure, it makes to extend this in a natural way
as pinning and other HTTPS upgrades are deployed.
VII. RELATED WORK
A. Empirical web security studies
Our work ﬁts nicely into a long and fruitful line of measure-
ment studies of web security, covering a wide variety web se-
curity topics such as authentication cookies [43], http-only
cookies [42], password implementations [44], third-party script
inclusions [45], [46],
third-party trackers [47], [48], Flash
cross-domain policies [49], and OpenID implementations [50],
[51]. A classic problem is detecting cross-site scripting vulner-
abilities which is practically its own sub-ﬁeld of research [52]–
[55]. A common model for this research is exploration and
analysis of an emerging threat on the web, followed by mea-
surement and crawling to detect its prevalence and character.
A desirable research outcome is for automated detection to be
built-in to web application security scanners [56]–[58].
Ultimately, browsers themselves have come to absorb some
of this logic. For example, Chrome and Firefox both now warn
developers about basic mixed-content errors in their built-in
developer consoles. Several issues identiﬁed in our research
are solid candidates for inclusion in future automated tools:
cookies vulnerable to theft, pinning mixed content, and some
types of erroneous or short-lived HSTS headers.
18Chrome’s preload list previously included the comment “play.google.com
doesn’t have include subdomains because of crbug.com/327834;” however,
this link was never valid and it isn’t clear what the original bug was.
12
B. Empirical studies of HTTPS and TLS
A signiﬁcant amount of research has also focused speciﬁ-
cally on empirical errors with HTTPS and TLS, of which Clark
and van Oorschot provide the deﬁnitive survey [3]. Important
studies of cryptographic vulnerabilities have included studies
of key revocation after the Debian randomness bug [59], stud-
ies of factorable RSA keys due to shared prime factors [60],
[61], studies of elliptic curve deployment errors in TLS [62],
forged TLS certiﬁcates in the wild [18] and multiple studies of
key sizes and cipher suites used in practice [23], [63], [64]. Our
work is largely distinct from these in that we focus on two new
aspects of HTTPS (pinning and strict transport security) which
are vulnerabilities at the HTTPS (application) level rather than
the TLS (cryptographic) level.
Perhaps the most similar study to ours was by Chen
et al. [65] which focused on mixed-content and stripping
vulnerabilities. This study was performed prior to the advent
of HSTS, pinning, and mixed content blocking. Hence, that
work can be viewed as a ﬁrst-generation study compared
to our second-generation study based on newly introduced
security measures (although no doubt many of the original
vulnerabilities are still present on the web today).
Other empirical studies of the TLS ecosystem have fo-
cused on certiﬁcate validation libraries [66], non-browser TLS
libraries [67], the interaction of HTTPS with content-delivery
networks [68], and TLS implementations in Android apps [69],
[70]. Again, these efforts all found widespread weaknesses. A
common theme is developers not correctly understanding the
underlying technology and using them in an insecure manner.
C. Other proposals for improving HTTPS
We brieﬂy overview several noteworthy proposals for fur-
ther improving HTTPS. These proposals are mainly aimed
at
limiting the risk of rogue certiﬁcates and hence could
complement or supplant key pinning. We exclude other web
security proposals such as Content Security Policy (CSP) [71].
1) DANE: DNS-based Authentication of Named Entities
(DANE) [72] is a proposal for including the equivalent of
public key pins in DNS records, relying on DNSSEC [73]
for security. This has the advantage of avoiding the scalability
concerns of preloaded pins and potentially being easier19
and more efﬁcient20 to conﬁgure than pins set in headers.
Unfortunately, DANE adoption is delayed pending widespread
support for DNSSEC, which common browsers do not cur-
rently implement.
DANE does not currently contain support for declaring
policies applicable to all subdomains. Based on our study, we
would strongly advise such support be added (and possibly
turned on by default) to avoid the type of mixed content and
cookie vulnerabilities we observed with pinning today.
2) Out-of-chain key pinning: An alternative to pinning to
keys within a cite’s certiﬁcate chain is to specify a separate
self-managed public key which must sign all end-entity public
19It is an open question whether web developers are more comfortable
conﬁguring HTTP headers or DNS TXT records.
20Unlike for HSTS which operates with relatively small headers, there is
signiﬁcant concern about the efﬁciency of setting pins in headers which may
be hundreds of bytes long for complicated pin sets as seen in our study.
13
keys, in addition to requiring a certiﬁcate chain leading to
a trusted CA. This avoids fully trusting any external CA
while offering more ﬂexibility than pinning to an enumerated
set of end-entity public keys. Conceptually, it is similar to
pinning to a domain-owned key in a CA-signed, domain-bound
intermediate certiﬁcate.21 TACK [74] proposes distributing
out-of-chain public keys using continuity,22 while Sovereign
Keys [75] proposes using a public append-only log.
instead recommending that
TACK explicitly does not contain support for extending
policies to subdomains,
imple-
menters omit the domain parameter to limit cookies to one
domain and/or set the secure ﬂag to avoid cookie theft. Of
course, the secure ﬂag is inadequate for defending against
rogue certiﬁcates given that one cannot set a TACK policy for
non-existent subdomains. Sovereign Keys, by contrast, does
support wildcards to extend support to subdomains.
3) Public logging: Due to the risk of improperly conﬁgured
pinning policies causing websites to be inaccessible, some
proposals aim simply to require that all valid certiﬁcates
be publicly logged to ensure rogue certiﬁcates are detected
after the fact. Certiﬁcate Transparency [76] (CT) is the most
prominent of these efforts, recording all valid end-entity cer-
tiﬁcates in a publicly veriﬁable, append-only log. As currently
proposed, clients will begin to reject certiﬁcates lacking proof
of inclusion in the log after universal adoption23 by all pub-
lic CAs.24 A somewhat-related proposal is Accountable Key
Infrastructure [77].
As proposed, Certiﬁcate Transparency would avoid most
of the subtle issues identiﬁed in this work in that the burden
on web developers is extremely low (the only requirement is
to start using a CT-logged certiﬁcate prior to some future
deadline). Given the number of errors we observed in our
study, this seems like a major design advantage. However,
if CT is not able to be adopted via the proposed “ﬂag day”
strategy, it may be necessary to distribute policies to browsers
specifying which domains require CT protection. This problem
would be largely similar to distributing HSTS today. Thus,
the lessons from our paper would apply to designing such a
mechanism, which most likely would be implemented as an
extra directive in HSTS itself.
VIII. CONCLUDING DISCUSSION
HSTS is still in the early stages of adoption and pinning
is in the very early stages of adoption. Nevertheless, both
technologies have already greatly enhanced security for a
number of important websites. It is a tribute to pinning that it
has been responsible for the detection of most of the known
CA compromises since it was deployed in 2010. Still our
research shows that a large number of misconﬁguration errors
are undermining the potential security in many cases with its
early deployment.
21Domain-bound
X.509’s