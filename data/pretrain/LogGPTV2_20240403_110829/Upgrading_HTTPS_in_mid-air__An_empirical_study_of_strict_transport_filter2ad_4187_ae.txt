### Empirical Results and Analysis

#### Vulnerability Conditions
This vulnerability is contingent upon three conditions:
1. An HSTS (HTTP Strict Transport Security) domain with a non-HSTS subdomain (referred to as a "hole").
2. Cookies scoped to that subdomain.
3. These cookies not being marked with the `secure` attribute.

Table VI summarizes the number of domains vulnerable to this attack, categorized by these three conditions.

#### Affected Domains
Several significant domains, including PayPal, LastPass, and USAA, were found to be vulnerable. The cookies involved included tracking and analytics cookies, user attribute cookies (such as country code and language), and unique session identification cookies (e.g., "guest id," "VISITORID," and "EndUserId"). Stealing these cookies can lead to privacy violations and potentially provide a unique identifier for users browsing over HTTPS. However, all authentication cookies identified for these sites were marked as secure, preventing them from being leaked over HTTP. This indicates that the `secure` attribute is well-understood by web developers.

### Interaction of Cookies and Pinning

A similar issue arises for pinned domains, where cookies may leak to unprotected subdomains. For example, if a pinned domain without `includeSubDomains` sets a cookie `session_id=x` with `domain=example.com`, the cookie will be transmitted over unpinned HTTPS to any subdomain of `example.com`. Even setting the `secure` flag does not help here, as it only ensures the cookie is sent over HTTPS, but an attacker with a rogue certificate can still observe the cookie's value.

#### Leakable Pinned Cookies
Table VII provides a summary of leachable pinned cookies across various domains:

| Domain          | Domain Hole         | Insecure Cookies | Total Cookies |
|-----------------|---------------------|------------------|---------------|
| crypto.cat      | *.crypto.cat        | 3                | 3             |
| dropbox.com     | *.dropbox.com       | 3                | 8             |
| facebook.com    | *.facebook.com      | 17               | 21            |
| twitter.com     | *.twitter.com       | 35               | 38            |
| www.gmail.com   | *.www.gmail.com     | 5                | 5             |
| **Total**       | **-**               | **63**           | **75**        |

Interestingly, 84.0% of these cookies (63 out of 75) did not set the `secure` attribute, making them vulnerable to theft over plain HTTP. This suggests that even if an attribute existed to limit cookies to a pinned connection, the complexity of the problem might prevent developers from consistently deploying it.

#### Authentication Cookie Vulnerabilities
In contrast to our findings on HSTS domains, we observed several authentication cookies vulnerable to theft on four pinned sites. Notably, authentication cookies for Twitter (e.g., `auth_token`) and Facebook (e.g., `c_user` and `xs`) are both vulnerable. These cookies are scoped to `.twitter.com` and `.facebook.com`, respectively, meaning they are visible to all subdomains, even though neither site has set `includeSubDomains` for their base domain. Thus, an attacker can steal valid authentication cookies for either website without triggering the pinning policy.

We responsibly disclosed this vulnerability to both sites. Unfortunately, it is currently unfixable as neither site can set `includeSubDomains` for their preloaded HSTS policy. A proposed fix would allow these sites to specify `includeSubDomainsForPinning` in the preload file.

Dropbox, however, sets pins for `dropbox.com` without `includeSubDomains` but scopes its login cookies to `www.dropbox.com`, where `includeSubDomains` is set, thus preventing the cookies from being vulnerable.

### Google's Case
Google’s situation is more complex. While most of Google’s pinning entries set `includeSubDomains`, `play.google.com` did not until August 2014. Subdomains like `*.play.google.com` were not bound by the Google pin set, allowing an adversary with a rogue certificate for one of these domains to access cookies scoped for `*.google.com`. However, Google limits its master authentication cookies’ scope to `accounts.google.com`, which cannot be accessed by `*.play.google.com`, and assigns per-subdomain authentication cookies as needed. This vulnerability was limited to login cookies giving access to `play.google.com` only. Google was aware of this vulnerability and has since fixed it by extending `includeSubDomains` to cover `play.google.com`.

### Recommendation to Browsers
Based on our findings, we recommend that browser vendors extend the semantics of the `secure` attribute for cookies as follows: if a cookie is set by a domain with a pinning policy and marked `secure`, the cookie should only be transmitted over HTTPS connections that satisfy the pinning policy of the domain setting the cookie. This simple fix would close the security holes we found without introducing new syntax. It also aligns with the original specification for `secure`, which never limited the syntax to mean simply HTTPS. Given that many developers have learned to mark important cookies as `secure`, it makes sense to extend this in a natural way as pinning and other HTTPS upgrades are deployed.

### Related Work

#### Empirical Web Security Studies
Our work fits into a long line of empirical web security studies, covering topics such as authentication cookies, HTTP-only cookies, password implementations, third-party script inclusions, third-party trackers, Flash cross-domain policies, and OpenID implementations. A common model for this research is the exploration and analysis of emerging threats, followed by measurement and crawling to detect their prevalence and characteristics. Automated detection tools and browser warnings are often developed as a result.

#### Empirical Studies of HTTPS and TLS
Significant research has focused on empirical errors with HTTPS and TLS, including key revocation, RSA key factorization, elliptic curve deployment errors, forged TLS certificates, and cipher suite usage. Our work is distinct in focusing on new aspects of HTTPS (pinning and strict transport security) at the application level rather than the cryptographic level.

#### Other Proposals for Improving HTTPS
Several proposals aim to further improve HTTPS, primarily by limiting the risk of rogue certificates. These include:
1. **DANE (DNS-based Authentication of Named Entities)**: Includes public key pins in DNS records, relying on DNSSEC for security. DANE adoption is delayed due to the lack of widespread DNSSEC support.
2. **Out-of-chain Key Pinning**: Specifies a separate self-managed public key that must sign all end-entity public keys, offering more flexibility than traditional pinning.
3. **Public Logging (Certiﬁcate Transparency)**: Requires all valid certificates to be publicly logged to ensure rogue certificates are detected after the fact.

### Concluding Discussion
HSTS and pinning are still in the early stages of adoption but have already enhanced security for many important websites. However, our research shows that a large number of misconfiguration errors are undermining their potential security benefits. Addressing these issues through better tooling and education for developers is crucial for realizing the full security benefits of these technologies.