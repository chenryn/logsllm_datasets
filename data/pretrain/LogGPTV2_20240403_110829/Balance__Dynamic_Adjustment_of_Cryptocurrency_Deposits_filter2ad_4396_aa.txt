title:Balance: Dynamic Adjustment of Cryptocurrency Deposits
author:Dominik Harz and
Lewis Gudgeon and
Arthur Gervais and
William J. Knottenbelt
Balance: Dynamic Adjustment of Cryptocurrency Deposits
Dominik Harz
PI:EMAIL
Department of Computing
Imperial College London
Arthur Gervais
PI:EMAIL
Department of Computing
Imperial College London
ABSTRACT
Financial deposits are fundamental to the security of cryptoeco-
nomic protocols as they serve as insurance against potential mis-
behaviour of agents. However, protocol designers and their agents
face a trade-off when choosing the deposit size. While substantial
deposits might increase the protocol security, for example by min-
imising the impact of adversarial behaviour or risks of currency
fluctuations, locked-up capital incurs opportunity costs. Moreover,
some protocols require over-collateralization in anticipation of fu-
ture events and malicious intentions of agents. We present Balance,
an application-agnostic system that reduces over-collateralization
without compromising protocol security. In Balance, malicious
agents receive no additional utility for cheating once their deposits
are reduced. At the same time, honest and rational agents increase
their utilities for behaving honestly as their opportunity costs for
the locked-up deposits are reduced. Balance is a round-based
mechanism in which agents need to continuously perform desired
actions. Rather than treating agents’ incentives and behaviour as
ancillary, we explicitly model agents’ utility, proving the conditions
for incentive compatibility. Balance improves social welfare given
a distribution of honest, rational, and malicious agents. Further,
we integrate Balance with a cross-chain interoperability protocol,
XCLAIM, reducing deposits by 10% while maintaining the same
utility for behaving honestly. Our implementation allows any num-
ber of agents to be maintained for at most 55,287 gas (≈ USD 0.07)
to update all agents’ scores, and at a cost of 54,948 gas (≈ USD 0.07)
to update the assignment of all agents to layers.
CCS CONCEPTS
• Information systems → Reputation systems; • Security and
privacy → Trust frameworks; Distributed systems security; • The-
ory of computation → Algorithmic game theory.
KEYWORDS
deposits; cryptocurrency; reputation; mechanism design; cryptoe-
conomic protocols
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3354221
Lewis Gudgeon
PI:EMAIL
Department of Computing
Imperial College London
William J. Knottenbelt
PI:EMAIL
Department of Computing
Imperial College London
ACM Reference Format:
Dominik Harz, Lewis Gudgeon, Arthur Gervais, and William J. Knottenbelt.
2019. Balance: Dynamic Adjustment of Cryptocurrency Deposits. In 2019
ACM SIGSAC Conference on Computer and Communications Security (CCS
’19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY,
USA, 18 pages. https://doi.org/10.1145/3319535.3354221
1 INTRODUCTION
Capital deposits are a security measure to motivate economically
rational agents to behave honestly in cryptoeconomic protocols. Yet,
sources of uncertainty, such as exchange rate volatility, can lead to
over-collateralization, where more capital than necessary is locked-
up as a buffer. Moreover, locked capital is expensive: being unable to
access funds, agents face an opportunity cost in the form of forgone
returns that they could have accrued in alternative investments.
Hence, cryptoeconomic protocol design plays an important role in
balancing security with locked capital costs.
Cryptoeconomic protocols (π) combine cryptographic primitives
and economic theory. In such protocols, a utility maximising agent
chooses which action to perform based on self-interest, ignoring
the impact of their action on other agents. However, cheating or
other malicious behaviour by self-interested agents may harm the
protocol as a whole. Therefore, protocols typically involve two types
of incentives, e.g. [5, 12, 24, 26–30, 33, 44, 48, 53–55]: (i) payouts
motivate agents to act in the best interest of the protocol, and
(ii) deposits prevent malicious actions by punishing misbehaving
agents. Yet, choosing the appropriate deposit is challenging due to
private information and event-dependency:
Definition 1 (Private information). A valuation vA(σ) encodes
the preference of an agent A for a specific outcome in a protocol
depending on an action σ 1. We define this information as private,
i.e. only known to the agent2.
Definition 2 (Event-dependency). Deposits paid in cryptocurren-
cies can be subject to external events. Event-dependency is caused
by events that occur outside of the underlying blockchain and af-
fects the level of required deposits.
An agent A performing an action in a protocol can (i) be intrin-
sically motivated to harm the protocol or (ii) receive an external
payment to act maliciously due to e.g. bribing [36]. This preference
is encoded in vA and is unknown to the designer of π. Since such a
1For brevity, we write vA(σ ) as vA in the rest of the paper.
2See also Chapter 9.4.1 on games with incomplete information in [41].
valuation is private information, the required deposit for secure op-
eration is ambiguous. Further, a deposit can be used as insurance for
tasks performed outside the underlying ledger, e.g. performing ver-
ifiable computations [20, 30, 48], cross-chain assets exchanges [53],
or exchanging digital goods [12]. For such usage, the protocol is
event-dependent, e.g. affected by exchange rate fluctuations. Private
information and event-dependency require protocol designers to
dynamically calculate the required deposit levels. However, this
leads to a dilemma: if the required deposit is too high, the agent is
likely to refuse to participate in the protocol. A requesting agent
fears that the providing agent has an incentive to cheat if the de-
posit is too low. In both cases, whether the deposit is set “too low”
and “too high” is subjective. Thus, our central research question
arises: how can deposits in over-collateralised protocols be dynami-
cally adjusted when assuming that agents have private information
and there exists a dependency on external events?
We present Balance which provides dynamic adjustment of de-
posits in over-collateralized protocols, improving agents’ financial
welfare, without compromising security. Balance is applicable to
protocols that (i) are implemented on a decentralised ledger, (ii) use
a deposit to prevent economically rational agents from performing
undesired actions, (iii) require agents to over-collateralize due to at
least one of the two identified sources of uncertainty, and (iv) verify
interactions with agents through objective specifications ϕ. Suitable
examples for integrating Balance are FairSwap [12], TrueBit [48],
NOCUST [27], and XCLAIM [53].
Security intuition. Balance allows agents to reduce their cap-
ital deposits over a sequence of periodic rounds, while preventing
the addition of incentives to act maliciously. In fact, malicious
agents that aim to misbehave in a protocol obtain more utility if
they do early on, before their deposits are reduced. Conversely,
honest and rational agents receive a higher utility by consistently
acting in the interest of the protocol. Balance achieves this prop-
erty for protocols which feature over-collateralization by reducing
deposits to a lower bound. Above the lower bound, the additional
utility gained from reducing the deposit is less than the opportunity
cost for locking-up the deposit. Hence, a malicious agent gains no
additional utility from cheating in a later round with a reduced
deposit. However, honest and rational agents gain additional utility
by reducing the opportunity cost of the locked deposit.
Contributions
• Introduction of Balance, a mechanism for deposit re-
duction: the mechanism maps agents to layers according
to their behaviour, where each layer is associated with a
different level of deposit. The higher the layer, the lower
the required deposit, mitigating over-collateralization. To
the best of our knowledge, this is the first mechanism allow-
ing for the dynamic adjustment of cryptocurrency deposits
while maintaining the same level of security.
• A formal analysis of agents’ incentives: we explicitly
model agents’ utilities with and without Balance. For agents
committed to a protocol, we characterise the conditions on
incentive compatibility for Balance. Further, we show that
given a distribution of agents over honest, rational, and ma-
licious agent types in a protocol, introducing Balance leads
to an increase in social welfare. We show that with a decrease
of the provided deposit, we can achieve a greater incentive
for economically rational agents to behave honestly.
• An integration with XCLAIM: we integrate Balance with
XCLAIM [53], a protocol that allows two cryptocurrencies to
be exchanged without trusted intermediaries, using Solidity3.
The clear exhibition of event dependency and private infor-
mation in XCLAIM makes it a highly suitable Balance use
case. We show that Balance reduces deposits by 10% while
maintaining the same level of payoff for complying with the
specification of the protocol. The implementation has linear
complexity for storing the score of agents depending on the
number of layers with a maximum cost of updating a score
of a single agent of 55,287 gas (≈ USD 0.07). Further, curating
the agents to layers during transition to the next round has
constant complexity with 54,948 gas (≈ USD 0.07).
Structure
In Section 2 we provide a definition for cryptoeconomic protocols
including contracts and utilities. We provide an overview of Bal-
ance and its security assumptions in Section 3. Next, we introduce
the design and functionality of Balance in Section 4. We define a
model to prove incentive compatibility and social welfare increase
in Section 5. Balance’s security is evaluated in Section 6. We apply
Balance to XCLAIM in Section 7. Finally, we present related work
in Section 8 and conclude in Section 9.
2 CRYPTOECONOMIC PROTOCOLS
Cryptoeconomic protocols combine cryptographic primitives and
economic theory to create applications on a decentralised ledger.
We define a cryptoeconomic protocol as follows.
Definition 3 (Cryptoeconomic protocol π). A cryptoeconomic
protocol implements agreements—containing publicly known spec-
ifications (i.e. the terms of the agreement), verified through cryp-
tographic primitives in a decentralised ledger—between multiple
agents. An agreement encodes an incentive mechanism through
payments and deposits, seeking to promote honest behaviour.
The states of a protocol are as follows (cf. Appendix A).
(1) Committed: an agent A commits to perform an action σ
that fulfils a specification ϕ defined by an agreement. The
commitment requires payment of a deposit D.
(2) Executed: an agent A performs an action σ. This action either
complies with the specification or violates it4.
(3) Concluded: if the action σ complies with the specification,
the deposit plus any payments is transferred to the agent.
Otherwise, the agent’s deposit is destroyed or transferred to
another agent that suffered from σ 5.
In this work, we use notation as summarised in Appendix D.
3The implementation is available at https://github.com/nud3l/balance.
4There are protocols that implement more complex verification steps, e.g. over multiple
rounds with accusations. However, at a high-level, the principle remains the same: the
protocol implements a method to determine whether or not a specification ϕ holds.
5Once the protocol is concluded, agents are free to redeem their deposit (if it has not
been destroyed or sent to another agent).
2.1 Contracts and agreements
A cryptoeconomic protocol π is implemented through smart con-
tracts. A contract includes agreements A in the form of (similar
to [46]):
A = ⟨ϕ, p, D⟩
(1)
ϕ represents a condition that needs to be fulfilled by an action
and can evaluate to either true or false, i.e. ϕ : σ → {0, 1}. For
example, the FairSwap protocol implements such a mechanism by
arithmetic circuits [12]. p are the payments made from a receiving
agent B to a performing agent A as stated in the agreement. Further,
agents need to provide deposits to commit to a protocol. D is a set of
deposits {D1, .., Dn} paid by agents to participate in an agreement
implemented in a smart contract. The smart contract acts as an
escrow of the deposit. If an agent complies with the specification
in an agreement, i.e. ϕ(σ) = 1, the deposit is refunded. If an agent
performs an action ϕ(σ) = 0 (or no action), the smart contract will
not refund the deposit to the agent.
2.2 Action choices
Following Definition 3, an agent commits to a protocol and can
only then perform an action. The agent has two action choices.
(1) An agent A ∈ P performs a desired action σA ∈ Σd, where Σd
is defined as the set of all actions that evaluate to true with
respect to the specification of an agreement, i.e. ϕ(Σd) = 1.
(2) An agent A ∈ P performs an undesired action σA ∈ Σu,
where Σu is the set of all actions that evaluate to false for the
specification of an agreement, i.e. ϕ(Σu) = 0. This includes
also no action σA = ∅ as this results in ϕ(∅) = 0.
2.3 Utility parameters
Each of the two action choices results in a utility for the agent ex-
pressed by u(σ). The utility of an action depends on five parameters.
(1) Payment p: determines how much an agent B has to pay for
an action in an agreement A and how much the performing
agent A receives by fulfilling the specification in A.
(2) Cost c: captures all costs associated with performing an ac-
tion. This includes, for example, transaction costs and costs
for executing an action σ in A.
(3) Deposit D: summarises the deposits by agents in A.
(4) Expected future return E[rD]: describes the opportunity cost
for locking deposit D within an agreement that could be used
in another protocol to earn an interest6.
(5) Valuation v: encodes the private preference of an agent for
an outcome depending on an action σ.
The private valuation expresses that an agent A prefers performing
an action σ ∈ Σu. Reflecting our security focus, we focus on the
worst case, where agents only derive a valuation from performing
an undesired action. Assume A is given the task to perform a com-
putation in a protocol like TrueBit [48] and provided a deposit D
in the agreement A to perform a computation that fulfils the speci-
fication ϕ. If A has a positive valuation for vA that does not fulfil
6We assume the future return rate is stochastic such that the opportunity cost is not
known with certainty. We therefore denote the return rate as the expected return rate,
E[r].
the specification and the provided deposit D is smaller than vA, the
agent prefers the undesired action. Note that this private valuation
is not limited to pecuniary value: it can include the non-pecuniary
value that an agent may derive from performing an undesired ac-
tion. In practice, v might be hard to approximate. We reflect this by
introducing agent types depending on the relation between v and
the protocol incentives D and p (cf. Section 2.6).
2.4 Performing agent utilities
The following are the utilities an agent A ∈ P performing an action7.
(cid:40)
uA(σA) =
p − cA − E[rDA],
vA − DA − cA − E[rDA],
if σA ∈ Σd
if σA ∈ Σu
(2)
The agent tries to maximise its utility by choosing an appro-
priate action. We note two observations from equation (2). First,
performing an undesired action becomes a rational choice if σA,i ∈
Σd , σA, j ∈ Σu : u(σA,i) < u(σA, j). In a protocol π without Bal-
ance agents can enter or leave the game at any time and their