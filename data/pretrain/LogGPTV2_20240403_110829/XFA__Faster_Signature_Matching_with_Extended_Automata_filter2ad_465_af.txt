### Table 5. Machine Size and Execution Times for XFAs, DFAs, and Multiple DFAs

| Technique | Total Memory (MB) | Number of Automata | Execution Time (s/GB) |
|-----------|--------------------|---------------------|------------------------|
| DFA       | 43 + 3.5           | 1                   | 75.6                   |
| MDFA      | > 15,000           | n/a                 | ∼11.6                  |
| MDFA      | 432                | 67                  | 1,458                  |
| MDFA      | 397                | 107                 | 2,690                  |
| MDFA      | 277                | 147                 | 3,780                  |
| MDFA      | 191                | 346                 | 8,570                  |
| MDFA      | 98                 | 587                 | 14,889                 |
| MDFA      | 66                 | 786                 | 20,865                 |

**Note:** The table summarizes the performance and memory usage for various techniques. XFAs approach DFA performance at small memory sizes.

### 5.3. Performance and Memory Usage

We compared Extended Finite Automata (XFAs) to traditional Deterministic Finite Automata (DFAs) and Multiple DFA (MDFA)-based solutions using the same 1,450 signatures for each technique. Our attempt to build a single, combined DFA for all signatures failed after processing only 88 out of 1,450 signatures, requiring over 15 GB of memory for the partial automaton. We then produced MDFAs for several memory limits ranging from 66 MB (the smallest memory size that could hold all signatures) to 512 MB.

Table 5 provides a summary of the performance and memory usage for each technique. If realizable, DFAs would offer the best performance but with the highest memory consumption. The reported execution time for the DFA was obtained using the largest partially combined DFA that could fit into our test machine’s memory. The six MDFA data points illustrate the trade-offs between increased memory and increased time, with execution time being largely a function of the number of created automata.

The combined XFA compares favorably: compared to the next-best data point (the penultimate MDFA entry), the XFA requires 10 times less memory and is 20 times faster. On average, the XFA executed 1.12 instructions per byte, consistent with the data in Table 3.

### Figure 11. Memory vs. Run-Time for MDFAs and XFAs

In this plot, the y-axis reflects total memory usage, including both instruction and scratch memory (46.5 MB) for XFAs. Both axes are on a logarithmic scale. The plus marks ('+') represent multiple MDFA instances, indicating the true cost of realizable DFA-based approaches. These points suggest the trade-offs obtained through pure DFA approaches and provide lower bounds given specific time or memory requirements.

If we could plot the DFA point, it would reside close to the left edge, several orders of magnitude beyond the extent of the graph. The XFA result, represented by a star, is below and to the left of the curve suggested by the DFA-based approaches, indicating that XFAs require fewer resources overall. Even with the inefficiencies of our prototype system, the XFA yields superior results in both memory usage and performance compared to MDFAs.

### 6. Limitations and Discussion

#### 6.1. Mapping to EIDDs

The basic procedure for mapping an XFA with abstract data domains to an appropriate Explicit Instruction Domain Description (EIDD) uses a backtracking algorithm enhanced to aggressively identify and prune fruitless searches. Some mappings still require an hour or more of computation time to complete. Each EIDD must specify all high-level scratch memory types (typically bits and counters in various forms) used by an XFA. Common expressions that need one or more bits or counters can be mapped quickly. However, complex regular expressions that compose bits and counters into complex data types require equally complex EIDDs, which are difficult to specify. In principle, we could define a fully generic EIDD that provides many compositions of bits and counters from which Algorithm 4 selects only those needed. However, in our prototype, the resulting mapping times would be infeasible. We are working to address this issue.

#### 6.2. Expressions with Exponential State

Some signatures require exponential amounts of space during the construction process, even though they have a compact XFA representation. For example, any deterministic automaton recognizing `.*a.{n}b` needs to remember which of the previous `n+1` bytes in the input were 'a' to accept if it sees a 'b' in the next `n + 1` input characters. DFAs require at least `2^(n+1)` states for this case. Similarly, during construction, an XFA also needs at least `2^(n+1)` distinct configurations, although these can be contained partially in scratch memory rather than only in explicit automaton states. An XFA corresponding to this regular expression, as shown in Figure 12, needs only two states, a counter, and a bitmap with `k = n + 2` bits of scratch memory. The number of configurations is exponential, but the number of distinct states is small.

For small values of `n`, we can annotate the regular expression (as `.*a#.{n}b`), construct an EIDD, and build the XFA in Figure 12. However, as `n` grows, we quickly run out of memory during construction. We found dozens of such regular expressions among Snort's web rules, such as rule 3519, which recognizes the regular expression `.*wqPassword=[^&\r\n]{294}`.

We are developing techniques to address these difficulties and expand the class of signatures that can be readily mapped to compact, efficient XFAs. XFAs can be easily combined with other techniques to achieve full generality. For instance, we may use substring-based filters [20, 22] that identify only subparts of signatures and invoke full signature evaluation using DFAs, NFAs, or other techniques when the subparts are matched. Alternatively, MDFAs [33] may also be used.

In general, signatures are written with an understanding of the underlying matching engine's capabilities. Signatures written for an NFA-based engine (such as `.*a.{n}b`) may not be appropriate for a deterministic engine and vice versa. Small changes to a regular expression can often turn it into something we can build XFAs for efficiently. For example, `.*a[ˆa]{n}b` can be recognized as an XFA with two states and a data domain of size `n + 2` used essentially as a counter. Whether such changes are possible without altering the intent of the rule requires human judgment and is best performed by the signature writer.

### 7. Conclusion and Future Work

In this paper, we introduced Extended Finite Automata (XFAs), which augment traditional finite state automata with a scratch memory manipulated by instructions attached to edges and states. We provided a formal definition for XFAs and presented a technique for constructing them from regular expressions. Using a set of HTTP signatures from Snort, we observed that XFAs have matching speeds approaching DFAs but with memory requirements similar to NFAs. Compared to multiple DFA-based techniques, our tests used 10 times less memory and were 20 times faster.

The techniques and results presented here are preliminary, and we are actively working to refine them. Some aspects of our construction procedure require manual input, and some signatures require inordinately long construction times. There is still some missing functionality and inefficiencies in our interpreter and execution environment. We are investigating techniques to address these and other issues. Despite these open problems, we are hopeful that XFAs will lead to better solutions for high-speed signature matching.

### Acknowledgements

This work is sponsored by NSF grants 0546585 and 0716538 and by a gift from the Cisco University Research Program Fund at Silicon Valley Community Foundation.

### References

[1] A. V. Aho and M. J. Corasick. Efficient string matching: An aid to bibliographic search. In Communications of the ACM, June 1975.
[2] R. Alur. Timed automata. In Proceedings of the Int. Conf. on Computer Aided Verification, pages 8–22, 1999.
[3] R. S. Boyer and J. S. Moore. A fast string searching algorithm. In Communications of the ACM, volume 20, October 1977.
[4] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In IEEE Symposium on Security and Privacy, Oakland, California, May 2006.
[5] C. R. Clark and D. E. Schimmel. Scalable pattern matching for high-speed networks. In IEEE Symposium on Field-Programmable Custom Computing Machines (FCCM), pages 249–257, April 2004.
[6] C. J. Coit, S. Staniford, and J. McAlerney. Towards faster pattern matching for intrusion detection or exceeding the speed of Snort. In 2nd DARPA Information Survivability Conference and Exposition, June 2001.
[7] S. Crosby. Denial of service through regular expressions. In Usenix Security work in progress report, August 2003.
[8] S.T. Eckmann, G. Vigna, and R.A. Kemmerer. STATL: An attack language for state-based intrusion detection. Journal of Computer Security, 10(1/2):71–104, 2002.
[9] M. Fisk and G. Varghese. Fast content-based packet handling for intrusion detection. TR CS2001-0670, UC San Diego, May 2001.
[10] L. Fortnow. Nondeterministic polynomial time versus nondeterministic logarthmic space: Time-space trade-offs for satisfiability. In Proceedings of Twelfth IEEE Conference on Computational Complexity, 1997.
[11] M. Handley, V. Paxson, and C. Kreibich. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Usenix Security, August 2001.
[12] T. A. Henzinger. The theory of hybrid automata. In Proceedings of the 11th Annual Symposium on Logic in Computer Science (LICS), pages 278–292, 1996.
[13] M. Jordan. Dealing with metamorphism. Virus Bulletin Weekly, 2002.
[14] S. Kumar, S. Dharmapurikar, F. Yu, P. Crowley, and J. Turner. Algorithms to accelerate multiple regular expressions matching for deep packet inspection. In Proceedings of ACM SIGCOMM, September 2006.
[15] R-T Liu, N-F Huang, C-H Chen, and C-N Kao. A fast string-matching algorithm for network processor-based intrusion detection system. Transactions on Embedded Computing Sys., 3(3):614–633, 2004.
[16] A. Narayanan and V. Shmatikov. Fast dictionary attacks on passwords using time-space tradeoff. In ACM Conference on Computer and Communications Security (CCS), 2005.
[17] P. Oechslin. Making a faster cryptanalytic time-memory trade-off. In 23rd Annual International Cryptology Conference (CRYPTO), 2003.
[18] V. Paxson. Bro: a system for detecting network intruders in real-time. In Computer Networks, volume 31, pages 2435–2463, 1999.
[19] T. Ptacek and T. Newsham. Insertion, evasion and denial of service: Eluding network intrusion detection. In Secure Networks, Inc., January 1998.
[20] M. Roesch. Snort - lightweight intrusion detection for networks. In Proceedings of the 13th Systems Administration Conference. USENIX, 1999.
[21] S. Rubin, S. Jha, and B. Miller. Language-based generation and evaluation of NIDS signatures. In IEEE Symposium on Security and Privacy, May 2005.
[22] S. Rubin, S. Jha, and B. P. Miller. Protomatching network traffic for high throughput network intrusion detection. In ACM Conference on Computer and Communications Security (CCS), pages 47–58, 2006.
[23] R. Sekar and P. Uppuluri. Synthesizing fast intrusion prevention/detection systems from high-level specifications. In Usenix Security, August 1999.
[24] U. Shankar and V. Paxson. Active mapping: Resisting NIDS evasion without altering traffic. In IEEE Symposium on Security and Privacy, May 2003.
[25] R. Sidhu and V. Prasanna. Fast regular expression matching using FPGAs. In Field-Programmable Custom Computing Machines (FCCM), April 2001.
[26] R. Sommer and V. Paxson. Enhancing byte-level network intrusion detection signatures with context. In ACM Conference on Computer and Communications Security (CCS), 2003.
[27] I. Sourdis and D. Pnevmatikatos. Fast, large-scale string match for a 10Gbps FPGA-based network intrusion detection system. In International Conference on Field Programmable Logic and Applications, September 2003.
[28] I. Sourdis and D. Pnevmatikatos. Pre-decoded CAMs for efficient and high-speed NIDS pattern matching. In IEEE Symposium on Field-Programmable Custom Computing Machines (FCCM), April 2004.
[29] L. Tan and T. Sherwood. A high throughput string matching architecture for intrusion detection and prevention. In International Symposium on Computer Architecture (ISCA), June 2005.
[30] K. Thompson. Programming techniques: Regular expression search algorithm. Commun. ACM, 11(6):419–422, 1968.
[31] H. J. Wang, C. Guo, D. Simon, and A. Zugenmaier. Shield: Vulnerability-driven network filters for preventing known vulnerability exploits. In Proceedings of the 2004 ACM SIGCOMM Conference, August 2004.
[32] V. Yegneswaran, J. T. Giffin, P. Barford, and S. Jha. An architecture for generating semantics-aware signatures. In 14th USENIX Security Symposium, August 2005.
[33] F. Yu, Z. Chen, Y. Diao, T. V. Lakshman, and R. H. Katz. Fast and memory-efficient regular expression matching for deep packet inspection. In Proceedings of Architectures for Networking and Communications Systems (ANCS), pages 93–102, 2006.