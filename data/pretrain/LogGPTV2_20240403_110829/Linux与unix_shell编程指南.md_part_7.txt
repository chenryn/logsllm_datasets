下载
指定了一个变量，那么r e a d将会把所有的输入赋给该变量，直至遇到第一个文件结束符或回
车。
它的一般形式为：
read varible1 varible2 ...
在下面的例子中，只指定了一个变量，它将被赋予直至回车之前的所有内容：
在下面的例子中，我们给出了两个变量，它们分别被赋予名字和姓氏。 s h e l l将用空格作
为变量之间的分隔符：
如果输入文本域过长，Shell 将所有的超长部分赋予最后一个变量。下面的例子，假定要
读取变量名字和姓，但这次输入三个名字；结果如下；
在上面的例子中，如果我们输入字符串 John Lemon Doe，那么第一个单词将被赋给第一
个变量，而由于变量数少于单词数，字符串后面的部分将被全部赋给第二个变量。
在编写s h e l l脚本的时候，如果担心用户会对此感到迷惑，可以采用每一个 r e a d语句只给一
个变量赋值的办法：
用户在运行上面这个脚本的时候，就能够知道哪些信息赋给了哪个变量。
如果是LINUX系统，那么......
别忘了使用“-n”选项。
加入java编程群：524621833
37
第5章 s h e l l输入与输出
下载
（续）
5.3 cat
c a t是一个简单而通用的命令，可以用它来显示文件内容，创建文件，还可以用它来显示
控制字符。在使用c a t命令时要注意，它不会在文件分页符处停下来；它会一下显示完整个文
件。如果希望每次显示一页，可以使用 m o r e命令或把c a t命令的输出通过管道传递到另外一个
具有分页功能的命令中，请看下面的例子：
$ cat myfile | more
或
$ cat myfile | pg
c a t命令的一般形式为：
cat [options] filename1 ... filename2 ...
c a t命令最有用的选项就是：
-v 显示控制字符
如果希望显示名为m y f i l e的文件，可以用：
$ cat myfile
如果希望显示m y f i l e 1、m y f i l e 2、m y f i l e 3这三个文件，可以用：
$ cat myfile1 myfile2 myfile3
如果希望创建一个名为b i g f i l e的文件，该文件包含上述三个文件的内容，可以把上面命令
的输出重定向到新文件中：
$ cat myfile1 myfile2 myfile3 > bigfile
如果希望创建一个新文件，并向其中输入一些内容，只需使用 c a t命令把标准输出重定向
到该文件中，这时 c a t命令的输入是标准输入—键盘，你输入一些文字，输入完毕后按
结束输入。这真是一个非常简单的文字编辑器！
还可以使用c a t命令来显示控制字符。这里有一个对从 D O S机器上f t p过来的文件进行检察
的例子，在这个例子中，所有的控制字符都在行末显示了出来。
有一点要提醒的是，如果在敲入了 c a t以后就直接按回车，该命令会等你输入字符。如果
你本来就是要输入一些字符，那么它除了会在你输入时在屏幕上显示以外，还会再回显这些
加入java编程群：524621833
38
第一部分 shell
下载
内容；最后按结束输入即可。
5.4 管道
可以通过管道把一个命令的输出传递给另一个命令作为输入。管道用竖杠 |表示。它的一
般形式为：
命令1 |命令2
其中|是管道符号。
在下面的例子中，在当前目录中执行文件列表操作，如果没有管道的话，所有文件就会
显示出来。当s h e l l看到管道符号以后，就会把所有列出的文件交给管道右边的命令，因此管
道的含义正如它的名字所暗示的那样：把信息从一端传送到另外一端。在这个例子中，接下
来g r e p命令在文件列表中搜索q u a r t e r 1 . d o c：
让我们再来用一幅图形象地讲解刚才的例子（见图 5 - 1）：
这就是管道
Is 命令的输出
图5-1 管道
s e d、a w k和g r e p都很适合用管道，特别是在简单的一行命令中。在下面的例子中， w h o命
令的输出通过管道传递给a w k命令，以便只显示用户名和所在的终端。
如果你希望列出系统中所有的文件系统，可以使用管道把 d f命令的输出传递给a w k命令，
a w k显示出其中的第一列。你还可以再次使用管道把 a w k的结果传递给g r e p命令，去掉最上面
的题头f i l e s y s t e m。
当然，你没准还会希望只显示出其中的分区名，不显示 / d e v /部分，这没问题；我们只要
在后面简单地加上另一个管道符号和相应的s e d命令即可。
加入java编程群：524621833
39
第5章 s h e l l输入与输出
下载
在这个例子中，我们先对一个文件进行排序，然后通过管道输送到打印机。
$ sort myfile | lp
5.5 tee
t e e命令作用可以用字母T来形象地表示。它把输出的一个副本输送到标准输出，另一个
副本拷贝到相应的文件中。如果希望在看到输出的同时，也将其存入一个文件，那么这个命
令再合适不过了。
它的一般形式为：
tee -a files
其中，- a表示追加到文件末尾。
当执行某些命令或脚本时，如果希望把输出保存下来， t e e命令非常方便。
下面我们来看一个例子，我们使用 w h o命令，结果输出到屏幕上，同时保存在 w h o . o u t文
件中：
可以用图5 - 2来表示刚才的例子。
screen who.out
who命令的输出
$ who
图5-2 tee
在下面的例子中，我们把一些文件备份到磁带上，同时将所备份的文件记录在 t a p e . l o g文
件中。由于需要不断地对文件进行备份，为了保留上一次的日志，我们在 t e e命令中使用了- a
选项。
在上面的例子中，第一行末尾的反斜杠 \告诉s h e l l该命令尚未结束，应从下面一行继续读
入该命令。
可以在执行脚本之前，使用一个 e c h o命令告诉用户谁在执行这个脚本，输出结果保存在
加入java编程群：524621833
40
第一部分 shell
下载
什么地方。
如果不想把输出重定向到文件中，可以不这样做，而是把它定向到某个终端上。在下面
的例子中，一个警告被发送到系统控制台上，表明一个磁盘清理进程即将运行。
$ echo "stand-by disk cleanup starting in 1 minute"| tee /dev/console
可以让不同的命令使用同一个日志文件，不过不要忘记使用 - a选项。
5.6 标准输入、输出和错误
当我们在s h e l l中执行命令的时候，每个进程都和三个打开的文件相联系，并使用文件描
述符来引用这些文件。由于文件描述符不容易记忆， s h e l l同时也给出了相应的文件名。
下面就是这些文件描述符及它们通常所对应的文件名：
文 件 文件描述符
输入文件—标准输入 0
输出文件—标准输出 1
错误输出文件—标准错误 2
系统中实际上有1 2个文件描述符，但是正如我们在上表中所看到的，0、1、2是标准输入、
输出和错误。可以任意使用文件描述符3到9。
5.6.1 标准输入
标准输入是文件描述符0。它是命令的输入，缺省是键盘，也可以是文件或其他命令的输出。
5.6.2 标准输出
标准输出是文件描述符1。它是命令的输出，缺省是屏幕，也可以是文件。
5.6.3 标准错误
标准错误是文件描述符2。这是命令错误的输出，缺省是屏幕，同样也可以是文件。你可
能会问，为什么会有一个专门针对错误的特殊文件？这是由于很多人喜欢把错误单独保存到
一个文件中，特别是在处理大的数据文件时，可能会产生很多错误。
如果没有特别指定文件说明符，命令将使用缺省的文件说明符（你的屏幕，更确切地说
是你的终端）。
5.7 文件重定向
在执行命令时，可以指定命令的标准输入、输出和错误，要实现这一点就需要使用文件
加入java编程群：524621833
41
第5章 s h e l l输入与输出
下载
重定向。表5 - 1列出了最常用的重定向组合，并给出了相应的文件描述符。
在对标准错误进行重定向时，必须要使用文件描述符，但是对于标准输入和输出来说，
这不是必需的。为了完整起见，我们在表5 - 1中列出了两种方法。
表5-1 常用文件重定向命令
command > filename 把把标准输出重定向到一个新文件中
command >> filename 把把标准输出重定向到一个文件中(追加)
command 1 > fielname 把把标准输出重定向到一个文件中
command > filename 2>&1 把把标准输出和标准错误一起重定向到一个文件中
command 2 > filename 把把标准错误重定向到一个文件中
command 2 >> filename 把把标准输出重定向到一个文件中(追加)
command >> filename 2>&1 把把标准输出和标准错误一起重定向到一个文件中(追加)
command filename2 把c o m m a n d命令以f i l e n a m e文件作为标准输入，以f i l e n a m e 2文件
作为标准输出
command &m 把把标准输出重定向到文件描述符m中
command sort.out
从表5 - 1中可以看出，我们也可以使用如下的表达方式，结果和上面一样：
$ cat passwd | awk -F: '{print $1}' | sort >sort.out
可以把很多命令的输出追加到同一文件中。
在上面的例子中，所有的目录名和以a c c o u n t开头的文件名都被写入到f i l e . o u t文件中。
如果希望把标准输出重定向到文件中，可以用 > f i l e n a m e。在下面的例子中，l s命令的所
有输出都被重定向到l s . o u t文件中：
$ ls >ls.out
如果希望追加到已有的文件中 (在该文件不存在的情况下创建该文件 )，那么可以使用
> > f i l e n a m e：
如果想创建一个长度为0的空文件，可以用' > f i l e n a m e '：
$ >myfile
加入java编程群：524621833
42
第一部分 shell
下载
5.7.2 重定向标准输入
可以指定命令的标准输入。在a w k一章就会遇到这样的情况。下面给出一个这样的例子：
$ sort name.out
在发送邮件时，可以用重定向的方法发送一个文件中的内容。在下面的例子中，用户
l o u i s e将收到一个邮件，其中含有文件c o n t e n t s . t x t中的内容：
$ mail louise < contents.txt
重定向操作符command << delimiter是一种非常有用的命令，通常都被称为“此处”文挡。
我们将在本书后面的章节深入讨论这一问题。现在只介绍它的功能。 s h e l l将分界符d e l i m i t e r之
后直至下一个同样的分界符之前的所有内容都作为输入，遇到下一个分界符， s h e l l就知道输
入结束了。这一命令对于自动或远程的例程非常有用。可以任意定义分界符 d e l i m i t e r，最常见
的是E O F，而我最喜欢用M AY D AY，这完全取决于个人的喜好。还可以在 < <后面输入变量。
下面给出一个例子，我们创建了一个名为 m y f i l e的文件，并在其中使用了T E R M和L O G N A M E