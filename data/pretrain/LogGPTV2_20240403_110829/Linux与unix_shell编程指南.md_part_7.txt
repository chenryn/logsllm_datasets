### 5.3 使用 `read` 命令读取输入

`read` 命令用于从标准输入（通常是键盘）读取一行文本，并将其赋值给一个或多个变量。当指定了一个变量时，`read` 将把所有输入内容（直到遇到文件结束符或回车）赋给该变量。

**一般形式：**
```bash
read variable1 variable2 ...
```

**示例1：单个变量**
如果只指定一个变量，`read` 会将回车前的所有内容都赋给该变量。
```bash
read name
```
假设用户输入 `John Doe`，则 `name` 变量的值为 `John Doe`。

**示例2：多个变量**
如果指定了多个变量，`read` 会使用空格作为分隔符，将输入内容分别赋给这些变量。
```bash
read first_name last_name
```
假设用户输入 `John Doe`，则 `first_name` 的值为 `John`，`last_name` 的值为 `Doe`。

**处理长输入：**
如果输入的内容多于指定的变量数量，多余的部分将被赋给最后一个变量。
```bash
read first_name last_name
```
假设用户输入 `John Lemon Doe`，则 `first_name` 的值为 `John`，`last_name` 的值为 `Lemon Doe`。

**编写脚本时的建议：**
为了使用户更清楚地知道哪些信息被赋给了哪个变量，可以每个 `read` 语句只给一个变量赋值。
```bash
read first_name
echo "First Name: $first_name"
read last_name
echo "Last Name: $last_name"
```

**注意事项：**
- 在 Linux 系统中，可以使用 `-n` 选项来限制输入字符的数量。
- 示例：
  ```bash
  read -n 5 input
  ```
  这将只读取前 5 个字符。

### 5.4 使用 `cat` 命令

`cat` 命令是一个简单而通用的命令，可以用来显示文件内容、创建文件以及显示控制字符。

**一般形式：**
```bash
cat [options] filename1 ... filename2 ...
```

**常用选项：**
- `-v`：显示控制字符

**示例1：显示文件内容**
```bash
$ cat myfile
```

**示例2：显示多个文件内容**
```bash
$ cat myfile1 myfile2 myfile3
```

**示例3：创建包含多个文件内容的新文件**
```bash
$ cat myfile1 myfile2 myfile3 > bigfile
```

**示例4：创建新文件并输入内容**
```bash
$ cat > newfile
```
输入一些文字后按 `Ctrl+D` 结束输入。

**示例5：显示控制字符**
```bash
$ cat -v dosfile
```

**注意事项：**
- 如果直接按回车键，`cat` 会等待输入。输入完毕后按 `Ctrl+D` 结束输入。

### 5.5 使用管道 `|`

管道符号 `|` 用于将一个命令的输出传递给另一个命令作为输入。

**一般形式：**
```bash
command1 | command2
```

**示例1：在文件列表中搜索特定文件**
```bash
$ ls | grep quarter1.doc
```

**示例2：显示用户名和终端**
```bash
$ who | awk '{print $1, $2}'
```

**示例3：列出系统中的所有文件系统**
```bash
$ df | awk 'NR>1 {print $1}' | grep -v /dev/
```

**示例4：排序文件并打印**
```bash
$ sort myfile | lp
```

### 5.6 使用 `tee` 命令

`tee` 命令将输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。

**一般形式：**
```bash
tee [options] files
```

**常用选项：**
- `-a`：追加到文件末尾

**示例1：将 `who` 命令的输出保存到文件**
```bash
$ who | tee who.out
```

**示例2：备份文件并将日志记录到文件**
```bash
$ tar czf backup.tar.gz * | tee -a tape.log
```

**示例3：发送警告到控制台**
```bash
$ echo "stand-by disk cleanup starting in 1 minute" | tee /dev/console
```

### 5.7 标准输入、输出和错误

每个进程都与三个打开的文件相关联，并使用文件描述符引用这些文件。

**文件描述符及对应的文件名：**
- 标准输入 (0)：通常是键盘
- 标准输出 (1)：通常是屏幕
- 标准错误 (2)：通常是屏幕

### 5.8 文件重定向

文件重定向允许你改变命令的标准输入、输出和错误的目标。

**常用重定向组合：**

- `command > filename`：将标准输出重定向到一个新文件
- `command >> filename`：将标准输出追加到一个文件
- `command 1> filename`：将标准输出重定向到一个文件
- `command > filename 2>&1`：将标准输出和标准错误一起重定向到一个文件
- `command 2> filename`：将标准错误重定向到一个文件
- `command 2>> filename`：将标准错误追加到一个文件
- `command < filename`：将文件作为标准输入
- `command << delimiter`：使用“此处”文档

**示例1：将 `ls` 命令的输出重定向到文件**
```bash
$ ls > ls.out
```

**示例2：追加到已有文件**
```bash
$ ls >> ls.out
```

**示例3：创建一个空文件**
```bash
$ > myfile
```

**示例4：重定向标准输入**
```bash
$ sort < name.out
```

**示例5：发送邮件**
```bash
$ mail louise < contents.txt
```

**示例6：使用“此处”文档**
```bash
$ cat << EOF
This is a here document.
EOF
```

通过这些示例和解释，你应该能够更好地理解和使用 `read`、`cat`、管道、`tee` 以及文件重定向等命令。