work cross-core because the attacking core cannot in-
ﬂuence the target core’s private cache. Note that it is
possible, and indeed common on ARM processors, that
there are separate L1 caches for instructions and data and
that the LLC is inclusive with respect to one of them, but
non-inclusive with respect to the other. In Section 7, we
discuss possible strategies to circumvent AutoLock and
re-enable cross-core cache attacks. Because of said sim-
ilarities, those strategies also facilitate cross-core attacks
on non-inclusive LLCs.
Distinct from Automatic Lockdown,
there exists
programmable lockdown in some ARM processors. Re-
gardless of inclusiveness, it allows the user to explicitly
lock and unlock cache lines by writing to registers of the
cache controller. This has the same effect as AutoLock,
i.e., the locked cache line will not be evicted until it is un-
locked. In contrast, however, programmable lockdown
must be actively requested by a (privileged) user. Of the
four Cortex-A processors we study in this paper, the tech-
nical reference manuals do not mention programmable
lockdown for any of them [5, 6, 8, 9]. AutoLock, how-
ever, is found in all of them.
3 How to Test for AutoLock
AutoLock is neither mentioned in ARM’s architecture
reference manuals [7, 10] nor in the technical refer-
ence manuals of the Cortex-A cores considered in this
work [5, 6, 8, 9]. To the best of our knowledge, it is
not publicly documented other than in patent form [50].
Based on ofﬁcial information, it is therefore impossi-
ble to determine which Cortex-A or thereto compliant
processor cores implement AutoLock, let alone whether
an actual system-on-chip features it. The presence of
AutoLock, however, is crucial to assess the risk of cache
attacks, in particular those that rely on cross-core evic-
tions in the LLC. We therefore propose the following test
methodology to determine the existence of AutoLock.
On any device under test, two processes are spawned on
distinct cores of the processor implementing an inclusive
last-level cache. The ﬁrst process allocates a cache line in
the private cache level of the core it is running on. This
allocation is done with a simple memory access. The
inclusiveness property ensures that a copy of the cache
line must also be allocated in the last-level cache. The
second process then tries to evict the line from the LLC
by ﬁlling the corresponding cache set with dummy data.
If the cache line remains in the LLC and core-private
cache after the cross-core eviction, the test concludes that
AutoLock is implemented. If the line is removed from
both, the test concludes that AutoLock is not present.
Test Requirements and Intricacies. The proposed
test strategy requires that the eviction itself works re-
liably, because otherwise AutoLock cannot be distin-
guished from a failed eviction and false positives are the
consequence. We ensure a working eviction by veri-
fying it in the same-core scenario before executing the
AutoLock tests. Another requirement is that the LLC
is inclusive, because AutoLock is deﬁned only in the
context of inclusive cache levels [50]. If the inclusive-
ness property is not documented for a processor, it must
be determined experimentally. For these inclusiveness
tests we recommend to refrain from using cross-core
evictions, as AutoLock might interfere, which leads to
wrong conclusions. Instead, hardware debugger or cache
maintenance operations should be used to conﬁdently de-
termine whether caches are inclusive or not. If neither
of those are available, cross-core evictions still allow to
draw a conclusion, but only for a certain outcome. As-
sume the same scenario as in the AutoLock tests. The
ﬁrst process allocates memory on a cache line in its pri-
vate cache level. The second process then ﬁlls the cor-
responding LLC set, after which the ﬁrst process tries
to re-access its memory. If the access is fulﬁlled from
RAM, then it can be concluded that the LLC is inclu-
sive and that AutoLock is not present. If the access is
fulﬁlled from either private or last-level cache, no con-
clusion can be drawn, because either the LLC is not in-
clusive or AutoLock interfered. Once the inclusiveness
property of the LLC is ensured, AutoLock can be tested
as described in the following sections.
3.1 Cache Eviction
In order to evict a cache line from the LLC, we imple-
ment the method described by Gruss et al. [22] and Lipp
et al. [37]. Assume that an address T is stored on line L
in cache set S. In order to evict L from S, one has to ac-
cess a number of addresses distinct from T that all map
to S. These memory accesses ﬁll up S and eventually re-
move L from the set. The addresses that are accessed in
this process are said to be set-congruent to T . They are
1078    26th USENIX Security Symposium
USENIX Association
collected in the eviction set C. Whenever C is accessed,
T is forced out of the set S. The sequence of accesses
to addresses in C is referred to as the eviction strategy.
The strategy proposed by Gruss et al. [22] is shown in
Algorithm 1.
Algorithm 1: Sliding window eviction of the form
N-A-D [22, 37].
Input:
C ... list of set-congruent addresses
/* # of windows */
/* # reps/window */
/* # addrs/window */
for j = 0..A-1 do
for k = 0..D-1 do
access(C[i + k]);
1 for i = 0..N-1 do
2
3
4
5
6
7 end
end
end
The idea is to always access a subset of the addresses
in C for a number of repetitions, then replace one address
in the subset with a new one, and repeat. This essen-
tially yields a window that slides over all available set-
congruent addresses. We therefore refer to this method as
sliding window eviction. In the algorithm, N denotes the
total number of generated windows, A deﬁnes the repeti-
tions per window, and D denotes the number of addresses
per window. The required size of C is given by the sum
of N and D. The ﬁnal eviction strategy is then written
as the triple N-A-D. The strategy 23-4-2, for example,
comprises 23 total windows, each iterated 4 consecutive
times and containing 2 addresses. Lipp et al. [37] demon-
strate that sliding window eviction can successfully be
applied to ARM processors.
The parameters N-A-D must be determined once for
each processor. This is done by creating a list of set-
congruent addresses C and exhaustively iterating over
multiple choices of N, A, and D. By continuously check-
ing the success of the eviction, the strategy with the
least number of memory accesses that still provides re-
liable eviction can be determined. Generating the list
of set-congruent addresses C requires access to physi-
cal address information. This is because the last-level
caches on our test devices use bits of the physical address
as the index to the cache sets. If the parameter search
for N, A, and D is done in a bare-metal setting, physi-
cal address information is directly available. Operating
systems typically employ virtual addresses that must be
translated to physical ones. Applications on Linux, for
instance, can consult the ﬁle /proc/[pid]/pagemap to
translate virtual addresses [37]. Although accessing the
pagemap is efﬁcient, access to it can be limited to priv-
ileged code or deactivated permanently. Alternatively,
huge pages reveal sufﬁcient bits of the physical address
to derive the corresponding cache set [27]. To ﬁnd ad-
dresses set-congruent to T , new memory is allocated and
the containing addresses are compared to T . If the least
signiﬁcant address bits match while the most signiﬁcant
bits differ, the address will map to T ’s cache set but will
be placed on a different line within the set. If access to
physical address information is entirely prohibited, tim-
ing measurements can still be used to ﬁnd set-congruent
addresses [41].
Once C is ﬁlled with addresses, they are accessed
according to Algorithm 1.
If a processor core imple-
ments separated data and instruction caches, the manner
in which a set-congruent address ought to be accessed
differs. Data addresses can be accessed by loading their
content to a register with the LDR assembly instruction.
Instruction addresses can be accessed by executing a
branch instruction that jumps to it. When determining
N-A-D on devices that might implement AutoLock, all
memory accesses to T and all evictions of it must be per-
formed on a single core. This ensures that AutoLock is
not interfering with the parameter search. Once the evic-
tion with a triple N-A-D works reliably in the same-core
setting, the AutoLock tests can be commenced.
3.2 AutoLock Tests
In the subsequent sections we propose three tests that
have been designed to prove or disprove the existence of
AutoLock. All of them follow the general methodology
of determining the success of a cross-core eviction strat-
egy that is known to succeed in the same-core scenario.
For simplicity, all tests are explained in a dual-core set-
ting. For a system with more processor cores, each test
can either be repeated multiple times or extended in order
to determine the presence of AutoLock simultaneously
on all but one core. In the dual-core setting, core 0 is ac-
cessing the target address T and core 1 is trying to evict
it by using the eviction set C and the processor speciﬁc
eviction parameters N-A-D. Table 1 contains the param-
eters for the processors considered in this work. For all
tests, both T and C are listed as inputs required for evic-
tion, while the triple N-A-D is assumed to be correctly
set according to Table 1. As currently nothing indicates
Table 1: List of ARM and ARM-compliant processors
under test, including the number of inclusive L1 and L2
ways, as well as the eviction strategy parameters N-A-D.
Processor
Cortex-A7
Cortex-A15
Cortex-A53
Cortex-A57
Krait 4501
L1 Ways
2 (Instr.)
2 (Data)
2 (Instr.)
2 (Data)
4 (Data)
L2 Ways
8
16
16
16
8
N-A-D
23-4-2
36-6-2
25-2-6
30-4-6
50-1-1
USENIX Association
26th USENIX Security Symposium    1079
that AutoLock can be en- or disabled from software, its
presence on a processor has to be determined only once.
3.2.1 Hardware Debugger
The ﬁrst method to test for AutoLock is through the us-
age of a hardware debugger. It allows to halt a processor
at will and directly monitor the cache content. A break-
point is inserted after the eviction of T and the contents
of the caches are analyzed. Through this visual inspec-
tion, it is possible to determine with very high conﬁdence
whether or not T remains in the cache after the eviction
strategy is run. Given an inclusive LLC, it is sufﬁcient to
conﬁrm that T either remains in L1 or in L2 to prove that
AutoLock is present. Algorithm 2 outlines this test.
Algorithm 2: Hardware Debugger Test
Input:
T ... target address
C ... corresponding eviction set
1 Core 0 brings T to L1 and L2.
2 Core 1 runs eviction strategy using C.
3 Halt processor and inspect caches.
4 if T in L1 of Core 0 or L2 then AutoLock is present
5 else AutoLock is not present
The hardware debugger test requires a debugging unit,
a target platform that supports it, and physical access
to the target device.
In our experiments, we use the
DSTREAM debugging unit [11] in combination with the
ARM DS-5 development studio. Of course, the test can
also be run with other debugging hardware.
3.2.2 Performance Monitoring Unit (PMU)
The second test utilizes the performance monitoring
unit, which can count the occurrence of microarchitec-
tural events in a processor. The PMU of ARMv7- and
ARMv8-compliant processors can be conﬁgured to count
the number of accesses (hit or miss) to the last-level
cache. The corresponding event is deﬁned under the ID
0x16 in the architectural reference manuals [7, 10]. The
difference of the access counts before and after reloading
the target address T indicates whether the reload fetched
the address from the L1 or the L2 cache. A fetch from
L1 indicates that the eviction strategy failed and suggests
that AutoLock is implemented. If the eviction strategy is
successful, the target address has to be fetched from ex-
ternal memory. Before querying the slow external mem-
ory, the L2 cache is accessed and checked for the tar-
get address. This access is counted and indicates that
AutoLock is not implemented. To determine this extra
access to the L2, a reference value R must be obtained
before the test. This is done by reading the L2 access
counter for a reload with no previous run of the evic-
tion strategy, which guarantees a fetch from core-private
cache. The PMU test can the be conducted as outlined in
Algorithm 3.
Algorithm 3: PMU Test
Input:
T ... target address
C ... corresponding eviction set
R ... L2 access reference count
1 Core 0 brings T to L1 and L2.
2 Core 1 runs eviction strategy using C.
3 Save PMU count of L2 accesses.
4 Core 0 reloads T .
5 Save PMU count again and calculate difference d.
6 if d ≈ R then AutoLock is present
7 else AutoLock is not present
This test requires access to the PMU, which on ARM
is typically limited to privileged code, unless other-
wise conﬁgured. Some operating systems, however,
allow userspace applications to access hardware per-
the perf
formance events. On Linux, for instance,
subsystem of the kernel provides this access via the
perf_event_open system call [36].
In general, the
PMU test can be used when the target processor is
not supported by a hardware debugger, or if physical
access to the device is not given. Since PMU event
counts can be affected by system activity unrelated to the
AutoLock test, it is recommended to repeat the experi-
ment multiple times. The best results can be obtained
in a bare-metal setting, where the test code is executed
without a full-scale operating system.
3.2.3 Cache-timing Measurements
The third experiment uses timing measurements to infer
from where in the memory hierarchy the target address T
is reloaded after the supposed eviction. If external mem-
ory access times are known, the reload time of T can
indicate whether AutoLock is implemented or not. This
test approach is outlined in Algorithm 4.
Algorithm 4: Cache-timing Test
Input:
T ... target address
C ... corresponding eviction set
M ... external memory access time
1 Core 0 brings T to L1 and L2.
2 Core 1 runs eviction strategy using C.
3 Core 0 reloads T and measures reload time t.
4 if t < M then AutoLock is present
5 else AutoLock is not present