Is there an easy way to disable jitting for a part of the code only?
    # can't @jax.jit because it contains a non-jittable section
    def foo(a):
       b = bar(a) # jittable
       c = scipy.bfgs.minimize(b) # non-jittable
       d = zar(c) # jittable
       return d
This can be manually split into two different jit sections
    bar = jax.jit(bar)
    zar = jax.jit(zar)
    def foo(a):
       b = bar(a)
       c = scipy.bfgs.minimize(b) # non-jittable
       d = zar(c)
       return d
However I often have an extremely long call-stack that explicit jitting is
very tedious (especially through compositions and custom_vjps) and it would be
nice to be able to specify something like `@jax.nojit`. Not sure how the
implementation detail would work though, maybe automatically generate two sets
of jaxprs/HLOs that sandwich the non-jittable part?
(and yes, I've tried tfp's bfgs optimizers and unfortunately it is very
deficient compared to that of scipy's bfgs)