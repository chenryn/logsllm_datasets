title:Effective Inter-Component Communication Mapping in Android: An Essential
Step Towards Holistic Security Analysis
author:Damien Octeau and
Patrick D. McDaniel and
Somesh Jha and
Alexandre Bartel and
Eric Bodden and
Jacques Klein and
Yves Le Traon
Effective Inter-Component Communication 
Mapping in Android with Epicc: An Essential Step 
Towards Holistic Security Analysis
Damien Octeau and Patrick McDaniel, Pennsylvania State University;  
Somesh Jha, University of Wisconsin; Alexandre Bartel, University of Luxembourg;  
Eric Bodden, Technische Universität Darmstadt;  
Jacques Klein and Yves Le Traon, University of Luxembourg
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Effective Inter-Component Communication Mapping in Android with Epicc:
An Essential Step Towards Holistic Security Analysis
Damien Octeau1, Patrick McDaniel1, Somesh Jha2, Alexandre Bartel3, Eric Bodden4, Jacques
Klein3, and Yves Le Traon3
1Department of Computer Science and Engineering, Pennsylvania State University
2Computer Sciences Department, University of Wisconsin,
3Interdisciplinary Centre for Security, Reliability and Trust, University of Luxembourg
4EC SPRIDE, Technische Universit¨at Darmstadt
{octeau,mcdaniel}@cse.psu.edu, PI:EMAIL, {alexandre.bartel,jacques.klein,yves.letraon}@uni.lu, PI:EMAIL
Abstract
Many threats present in smartphones are the result of in-
teractions between application components, not just ar-
tifacts of single components. However, current tech-
niques for identifying inter-application communication
are ad hoc and do not scale to large numbers of ap-
plications.
In this paper, we reduce the discovery of
inter-component communication (ICC) in smartphones
to an instance of the Interprocedural Distributive Envi-
ronment (IDE) problem, and develop a sound static anal-
ysis technique targeted to the Android platform. We ap-
ply this analysis to 1,200 applications selected from the
Play store and characterize the locations and substance
of their ICC. Experiments show that full speciﬁcations
for ICC can be identiﬁed for over 93% of ICC locations
for the applications studied. Further the analysis scales
well; analysis of each application took on average 113
seconds to complete. Epicc, the resulting tool, ﬁnds ICC
vulnerabilities with far fewer false positives than the next
best tool. In this way, we develop a scalable vehicle to
extend current security analysis to entire collections of
applications as well as the interfaces they export.
1
Introduction
The rapid rise of smartphone has led to new applications
and modes of communication [1]. The scale of the new
software markets is breathtaking; Google’s Play Store
has served billions of application downloads [31] within
a few years. Such advances have also come with a dark
side. Users are subjected to privacy violations [11, 12]
and malicious behaviors [33] from the very applications
they have come to depend on. Unfortunately, for many
reasons, application markets cannot provide security as-
surances on the applications they serve [26], and previ-
ous attempts at doing so have had limited success [27].
Past analyses of Android applications [12, 14, 15, 17,
19, 36] have largely focused on analyzing application
components in isolation. Recent works have attempted
to expose and analyze the interfaces provided by com-
ponents to interact [6, 12], but have done so in ad hoc
and imprecise ways. Conversely, this paper attempts to
formally recast Inter-Component Communication (ICC)
analysis to infer the locations and substance of all inter-
and intra-application communication available for a tar-
get environment. This approach provides a high-ﬁdelity
means to study how components interact, which is a nec-
essary step for a comprehensive security analysis. For
example, our analysis can also be used to perform in-
formation ﬂow analysis between application components
and to identify new types of attacks, such as application
collusion [5, 8], where two applications work together
to compromise the privacy of the user. In general, most
vulnerability analysis techniques for Android need to an-
alyze ICC, and thus can beneﬁt from our analysis.
Android application components interact through ICC
objects – mainly Intents. Components can also commu-
nicate across applications, allowing developers to reuse
functionality. The proposed approach identiﬁes a spec-
iﬁcation for every ICC source and sink. This includes
the location of the ICC entry point or exit point, the ICC
Intent action, data type and category, as well as the ICC
Intent key/value types and the target component name.
Note that where ICC values are not ﬁxed we infer all
possible ICC values, thereby building a complete speci-
ﬁcation of the possible ways ICC can be used. The spec-
iﬁcations are recorded in a database in ﬂows detected by
matching compatible speciﬁcations. The structure of the
speciﬁcations ensures that ICC matching is efﬁcient.
We make the following contributions in this work:
• We show how to reduce the analysis of Intent ICC
to an Interprocedural Distributive Environment (IDE)
problem. Such a problem can be solved efﬁciently
using existing algorithms [32].
• We develop Epicc, a working analysis tool built
on top of an existing IDE framework [3] within
the Soot [34] suite, which we have made available
USENIX Association  
22nd USENIX Security Symposium  543
Component A
Intent
  - Action
  - Categories
  - Data
Component B
Intent Filter
  - Actions
  - Categories
  - Data
Figure 1: Implicit Intent ICC
at http://siis.cse.psu.edu/epicc/.
• We perform a study of ICC vulnerabilities and com-
pare it to ComDroid [6], the current state-of-the-art.
Our ICC vulnerability detection shows signiﬁcantly
increased precision, with ComDroid ﬂagging 32%
more code locations. While we use our tool to per-
form a study of some ICC vulnerabilities, our anal-
ysis can be used to address a wider variety of ICC-
related vulnerabilities.
• We perform a study of ICC in 1,200 representative
applications from the free section of the Google Play
Store. We found that the majority of speciﬁcations
were relatively narrow, most ICC objects having a
single possible type. Also, key/value pairs are widely
used to communicate data over ICC. Lastly, our anal-
ysis scales well, with an average analysis time of 113
seconds per application.
face is deﬁned through Activities.
within and across applications.
that should take place in the background.
1.1 Android ICC
Android applications are developed in Java and compiled
to a platform-speciﬁc Dalvik bytecode, and are com-
posed of four types of components:
• An Activity represents a user screen. The user inter-
• A Service allows developers to specify processing
• A Content Provider allows sharing of structured data
• A Broadcast Receiver is a component that receives
Intents are the primary vehicle for ICC. For example, a
developer might want to start a component to display the
user’s current location on a map. She can create an Intent
containing the user’s location and send it to a component
that renders the map. Developers can specify an Intent’s
target component (or target components) in two ways, (a)
explicitly, by specifying the target’s application package
and class name, and (b) implicitly by setting the Intent’s
action, category or data ﬁelds.
broadcast communication objects, called Intents.
In order for a component to be able to receive implicit
Intents, Intent Filters have to be speciﬁed for it in the
application’s manifest ﬁle. Illustrated in Figure 1, Intent
Filters describe the action, category or data ﬁelds of the
Intents that should be delivered by the operating system
to a given application component.
ICC can occur both within a single application and be-
tween different applications. In order for a component to
be accessible to other applications, its exported attribute
has to be set to true in the manifest ﬁle. If the exported
attribute of a component is not deﬁned, the OS makes
the component available to other applications if an Intent
Filter has been declared for it.
Intents can carry extra data in the form of key-value
mappings. This data is contained in a Bundle object as-
sociated with the Intent. Intents can also carry data in the
form of URIs with context-speciﬁc references to external
resources or data.
Developers can restrict access to components using
permissions. Permissions are generally declared in the
manifest ﬁle. A component protected by a permission
can only be addressed by applications that have obtained
that permission. Permission requests by applications are
granted by users at install time and enforced by the OS
at runtime.
2 Android ICC Analysis
As highlighted above, the goal of the analysis presented
in this paper is to infer speciﬁcations for each ICC source
and sink in the targeted applications. These speciﬁca-
tions detail the type, form, and data associated with the
communication. We consider communication with Con-
tent Providers to be out of scope. Our analysis has the
following goals:
Soundness - The analysis should generate all speciﬁca-
tions for ICC that may appear at runtime. Informally, we
want to guarantee that no ICC will go undetected. Our
analysis was designed to be sound under the assumption
that the applications use no reﬂection or native calls, and
that the components’ life cycle is modeled completely.
Precision - The previous goal implies that some gen-
erated ICC speciﬁcations may not happen at runtime
(“false positives”). Precision means that we want to
limit the number of cases where two components are de-
tected as connected, even though they are not in practice.
Our analysis currently does not handle URIs1. Since the
data contained in Intents in the form of URIs is used to
match Intents to target components, not using URIs as
a matching criterion potentially implies more false posi-
tives. Other possible sources of imprecision include the
points-to and string analyses. We empirically demon-
strate analysis precision in Section 6.1.
Note that, since we do not handle URIs yet, this im-
plies that Content Providers are out of the scope of this
paper and will be handled in future work.
1Extending the analysis to include URIs is a straightforward exer-
cise using the same approaches deﬁned in the following sections. We
have a working prototype and defer reporting on it to future work.
544  22nd USENIX Security Symposium 
USENIX Association
new O n C l i c k L i s t e n e r () {
public void onClick ( View v ) {
1 private O n C l i c k L i s t e n e r m M y L i s t e n e r =
2
3
4
5
6
7
Figure 2: Example of implicit Intent communication
Intent intent = new Intent () ;
intent . s e t A c t i o n ( " a . b . ACTION " ) ;
intent . a d d C a t e g o r y ( " a . b . C A T E G O R Y " ) ;
s t a r t A c t i v i t y ( intent ) ; } };
2.1 Applications
Although Android applications are developed in Java,
existing Java analyses cannot handle the Android-
speciﬁc ICC mechanisms. The analysis presented in this
paper deals with ICC and can be used as the basis for
numerous important analyses, for example:
Finding ICC vulnerabilities - Android ICC APIs are
complex to use, which causes developers to commonly
leave their applications vulnerable [6, 12]. Examples of
ICC vulnerabilities include sending an Intent that may be
intercepted by a malicious component, or exposing com-
ponents to be launched by a malicious Intent. The ﬁrst
application of our work is in ﬁnding these vulnerabilities.
We present a study of ICC vulnerabilities in Section 6.4.
Finding attacks on ICC vulnerabilities - Our analy-
sis can go beyond ICC vulnerability detection and can be
used for a holistic attack detection process. For each app.
we compute entry points and exit points and systemati-
cally match them with entry and exit points of previously
processed applications. Therefore, our analysis can de-
tect applications that may exploit a given vulnerability.
Inter-component information ﬂow analysis - We com-
pute which data sent at an exit point can potentially be
used at a receiving entry point. An information ﬂow anal-
ysis using our ICC analysis ﬁnd ﬂows between a source
in a component and a sink in a different component (pos-
sibly in a different application).
In the case where the source and sink components
belong to different applications, we can detect cases of
application collusion [5, 8]. The unique communica-
tion primitives in Android allow for a new attack model
for malicious or privacy-violating application develop-
ers. Two or more applications can work together to leak
private information and go undetected. For example, ap-
plication A can request access to GPS location informa-
tion, while application B requests access to the network.
Permissions requested by each application do not seem
suspicious, therefore a user might download both appli-
cations. However, in practice it is possible for A and B to
work together to leak GPS location data to the network.
It is almost impossible for users to anticipate this kind of
breach of privacy. However, statically detecting this at-
tack is a simple application of our ICC analysis, whereas
the current state-of-the-art requires dynamic analysis and
modiﬁcation of the Android platform [5].
1 public void onClick ( View v ) {
2
3
4
5
Intent i = new Intent () ;
i . p u t E x t r a ( " Balance " , this . m B a l a n c e ) ;
if ( this . m C o n d i t i o n ) {
i . s e t C l a s s N a m e ( " a . b " ,
" a . b . MyClass " ) ;
} else {
}
s t a r t A c t i v i t y ( i ) ; }
i . s e t A c t i o n ( " a . b . ACTION " ) ;
i . a d d C a t e g o r y ( " a . b . C A T E G O R Y " ) ;
i = m o d i f y I n t e n t ( i ) ;
6
7
8
9
10
11
12
13 public Intent m o d i f y I n t e n t ( Intent in ) {
14
15
16
17
Intent intent = new Intent ( in ) ;
intent . s e t A c t i o n ( " a . b . N E W _ A C T I O N " ) ;
intent . a d d C a t e g o r y ( " a . b . N E W _ C A T E G O R Y " ) ;
return intent ; }
Figure 3: Intent communication: running example
2.2 Examples
Figure 2 shows a representative example of ICC pro-
gramming.
It deﬁnes a ﬁeld that is a click listener.
When activated by a click on an element, it creates In-
tent intent and sets its action and category. Finally, the
startActivity() call takes intent as an argument. It causes
the OS to ﬁnd an activity that accepts Intents with the
given action and category. When such an activity is
found, it is started by the OS. If several activities meeting
the action and category requirements are found, the user
is asked which activity should be started.
This ﬁrst example is trivial. Let us now consider the
more complex example from Figure 3, which will be
used throughout this paper. Let us assume that this piece
of code is in a banking application. First, Intent intent
containing private data is created. Then, if condition
this.mCondition is true, intent is made explicit by tar-
geting a speciﬁc class. Otherwise, it is made implicit.
Next, an activity is started using startActivity(). Note
that we have made the implicit Intent branch contrived to
demonstrate how function calls are handled. In this ex-
ample, the safe branch is the one in which intent targets a
speciﬁc component. The other one may leak data, since it
might be intercepted by an malicious Activity. We want
to be able to detect that possible information leak.
In
other words, we want to infer the two possible Intent val-
ues at startActivity(). In particular, knowing the implicit
value would allow us to ﬁnd which applications can in-
tercept it and to detect possible eavesdropping.
3 Connecting Application Components:
Overview
Our analysis aims at connecting components, both within
single applications and between different applications.
For each input application A, it outputs the following:
1. A list of entry points for A that may be called by com-
USENIX Association  
22nd USENIX Security Symposium  545
ponents in A or in other applications.
2. A list of exit points for A where A may send an Intent
to another component. That component can be in A
or in a different application. The value of Intents at
each exit point is precisely determined, which allows
us to accurately determine possible targets.
3. A list of links between A’s own components and be-
tween A’s components and other applications’ com-
ponents. These links are computed using 1. and 2. as