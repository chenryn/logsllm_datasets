# Effective Inter-Component Communication Mapping in Android: An Essential Step Towards Holistic Security Analysis

## Authors
- Damien Octeau, Pennsylvania State University
- Patrick McDaniel, Pennsylvania State University
- Somesh Jha, University of Wisconsin
- Alexandre Bartel, University of Luxembourg
- Eric Bodden, Technische Universität Darmstadt
- Jacques Klein, University of Luxembourg
- Yves Le Traon, University of Luxembourg

## Abstract
Many security threats in smartphones arise from interactions between application components, rather than from individual components. However, current techniques for identifying inter-component communication (ICC) are often ad hoc and do not scale well to large numbers of applications.

In this paper, we reduce the discovery of ICC in smartphones to an instance of the Interprocedural Distributive Environment (IDE) problem and develop a sound static analysis technique for the Android platform. We apply this analysis to 1,200 applications from the Google Play Store, characterizing the locations and substance of their ICC. Our experiments show that full specifications for ICC can be identified for over 93% of ICC locations in the studied applications. The analysis scales well, with an average analysis time of 113 seconds per application. Epicc, the resulting tool, detects ICC vulnerabilities with significantly fewer false positives compared to the next best tool. This work provides a scalable method to extend current security analysis to entire collections of applications and the interfaces they export.

## 1. Introduction
The rapid rise of smartphones has led to new applications and modes of communication. The scale of the new software markets is impressive; for example, Google’s Play Store has served billions of application downloads within a few years. However, these advances have also brought significant security challenges. Users are frequently subjected to privacy violations and malicious behaviors from the very applications they rely on. Unfortunately, application markets often cannot provide robust security assurances, and previous attempts at doing so have had limited success.

Past analyses of Android applications have largely focused on analyzing components in isolation. Recent works have attempted to expose and analyze the interfaces provided by components, but have done so in ad hoc and imprecise ways. In contrast, this paper formally recasts ICC analysis to infer the locations and substance of all inter- and intra-application communication available in a target environment. This approach provides a high-fidelity means to study how components interact, which is essential for comprehensive security analysis. For example, our analysis can be used to perform information flow analysis between application components and to identify new types of attacks, such as application collusion, where two applications work together to compromise user privacy. Generally, most vulnerability analysis techniques for Android need to analyze ICC and can benefit from our approach.

Android application components interact through ICC objects, primarily Intents. Components can also communicate across applications, allowing developers to reuse functionality. Our approach identifies a specification for every ICC source and sink, including the location of the ICC entry or exit point, the Intent action, data type, category, key-value types, and the target component name. When ICC values are not fixed, we infer all possible ICC values, thereby building a complete specification of the possible ways ICC can be used. These specifications are recorded in a database, and flows are detected by matching compatible specifications. The structure of the specifications ensures efficient ICC matching.

### Contributions
- We show how to reduce the analysis of Intent ICC to an Interprocedural Distributive Environment (IDE) problem, which can be solved efficiently using existing algorithms.
- We develop Epicc, a working analysis tool built on top of an existing IDE framework within the Soot suite, which is available at http://siis.cse.psu.edu/epicc/.
- We perform a study of ICC vulnerabilities and compare it to ComDroid, the current state-of-the-art. Our ICC vulnerability detection shows significantly increased precision, with ComDroid flagging 32% more code locations.
- We perform a study of ICC in 1,200 representative applications from the free section of the Google Play Store. We found that most specifications were relatively narrow, with most ICC objects having a single possible type. Key-value pairs are widely used to communicate data over ICC. Our analysis scales well, with an average analysis time of 113 seconds per application.

## 1.1. Android ICC
Android applications are developed in Java and compiled to Dalvik bytecode. They are composed of four types of components:
- **Activity**: Represents a user screen.
- **Service**: Allows background processing.
- **Content Provider**: Enables sharing of structured data.
- **Broadcast Receiver**: Receives broadcast Intents.

Intents are the primary vehicle for ICC. Developers can specify an Intent's target component explicitly by specifying the target's application package and class name, or implicitly by setting the Intent's action, category, or data fields. To receive implicit Intents, components must have Intent Filters specified in the application's manifest file. These filters describe the action, category, or data fields of the Intents that should be delivered to the component. ICC can occur within a single application or between different applications. A component must have its exported attribute set to true in the manifest file to be accessible to other applications. If the exported attribute is not defined, the OS makes the component available to other applications if an Intent Filter has been declared for it.

Intents can carry extra data in the form of key-value mappings, contained in a Bundle object associated with the Intent. Developers can restrict access to components using permissions, which are generally declared in the manifest file. Permission requests by applications are granted by users at install time and enforced by the OS at runtime.

## 2. Android ICC Analysis
Our analysis aims to infer specifications for each ICC source and sink in the targeted applications, detailing the type, form, and data associated with the communication. We consider communication with Content Providers out of scope. Our analysis has the following goals:

- **Soundness**: The analysis should generate all specifications for ICC that may appear at runtime. Our analysis is designed to be sound under the assumption that the applications use no reflection or native calls, and that the components' lifecycle is modeled completely.
- **Precision**: We aim to limit the number of false positives, where two components are detected as connected even though they are not in practice. Our analysis currently does not handle URIs, which can lead to more false positives. Other sources of imprecision include points-to and string analyses.

## 2.1. Applications
Although Android applications are developed in Java, existing Java analyses cannot handle Android-specific ICC mechanisms. Our analysis deals with ICC and can be used as the basis for numerous important analyses, such as:
- **Finding ICC vulnerabilities**: Android ICC APIs are complex, leading to common vulnerabilities. Examples include sending an Intent that may be intercepted by a malicious component or exposing components to be launched by a malicious Intent.
- **Finding attacks on ICC vulnerabilities**: Our analysis can detect applications that may exploit a given vulnerability by computing entry and exit points and systematically matching them with previously processed applications.
- **Inter-component information flow analysis**: We compute which data sent at an exit point can potentially be used at a receiving entry point. This can detect cases of application collusion, where two or more applications work together to leak private information.

## 2.2. Examples
Figure 2 shows a representative example of ICC programming, defining a click listener that creates an Intent and sets its action and category. The `startActivity()` call takes the Intent as an argument, causing the OS to find an activity that accepts Intents with the given action and category.

Figure 3 shows a more complex example, where an Intent containing private data is created. If a condition is true, the Intent targets a specific class. Otherwise, it is made implicit. The safe branch is the one in which the Intent targets a specific component, while the other branch may leak data if intercepted by a malicious Activity. We want to infer the two possible Intent values at `startActivity()` to detect potential information leaks.

## 3. Connecting Application Components: Overview
Our analysis aims to connect components both within single applications and between different applications. For each input application, it outputs:
1. A list of entry points that may be called by components in the same or other applications.
2. A list of exit points where the application may send an Intent to another component, with the value of Intents at each exit point precisely determined.
3. A list of links between the application's own components and between the application's components and other applications' components, computed using the entry and exit points.

This structured approach ensures that ICC matching is efficient and accurate, providing a robust foundation for comprehensive security analysis.