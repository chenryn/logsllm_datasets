你基本上只需要在请求的+59秒内添加。这不太安全，但如果这意味着更多的用户请求正在通过，那么这是一个相对公平的权衡。只要记住将其标记为你身边的被接受的风险，这样就不会被遗忘。
**工具**
虽然这里提出的概念可以适用于你可以选择的任何语言和任何框架，但是我必须选择一个作为开始。由于我将重点关注在了本系列中的PHP示例，所以我决定开发一个简单的PHP框架，我熟知的框架是Slim框架。这个框架在技术上是一个“微框架”，旨在为开发人员提供最少的功能，用于制作Web应用程序。在其基础上，它只是一个简单的前端控制器，并附加路由器和请求/响应处理。它没有太多的其他东西。有几个优点捆绑在了一起，但如果你正在寻找一个框架，你可以去寻找一个能为你提供一切的一个框架，
Slim并不是最好的选择。
然而，这种简约的方法使其非常适合我们的例子，特别是当API更多的只是请求和响应周期比具有前端的Web应用程序。Slim提供了我们需要设置的一些基本路线并将其链接到我们的API的功能部件的一切。
只要给出一个我们谈论的内容的简单想法，一旦通过[ **Composer**](https://getcomposer.org/)
安装，响应所有这些都需要的索引页面请求的应用程序是：
    require_once 'vendor/autoload.php';
    $app = new SlimApp();
    $app->get('/', function() {
        echo 'Hello world!';
    });
    $app->run();
这就是所有代码…在这个简化的结构中，我们将构建我们的API并集成其他几个部分，以帮助保护它及其要保护的数据。谈到其他部分，让我们来看看下一个在我们的请求/响应周期中给我们提供一些可重用的逻辑：中间件。
如果你不熟悉中间件的概念，其实这是一个非常简单的概念。我一般是一个视觉学习者，所以我发现这个图（从Slim框架借来的）很有用：
**  
**
**中间件解释**
如图所示，中间件的基本思想是围绕你的应用程序的主要部分进行“包装”。它旨在提供以请求和响应处理为中心的附加功能。当然，它也可以做其他的事情，但是大多数中间件在整个HTTP请求中处理数据流方面表现出色。该请求进入应用程序，通过中间件层，一旦内部处理完成，它将以相反的顺序返回到相同的中间件层。
这个中间件层是我们在示例应用程序中执行某些授权逻辑的地方。由于需要在每个请求上检查API访问级别，所以将其包装在中间件中是很有意义的，并检查所需数据的传入请求。这种方法还允许我们在控制器和内部的逻辑出现授权问题时，踢掉客户端。
接下来是我们将在API示例中使用数据库的两个软件包：[ **Laravel
Enloquent数据库层**](https://laravel.com/docs/5.4/eloquent) 和[
**Phinx迁移工具**](https://phinx.org/)
。如果你是PHP开发人员，那么你可能会听说过Laravel框架。这个框架在过去几年中人气大涨，由于其易用性和“简单”的感觉，已经获得了很多人的追捧。虽然框架本身具有很多功能，但我们这里的这些示例中Eloquent包仅用于处理数据库。
幸运的是，这个包可以在主要的Laravel框架之外使用，因为“胶囊”这种特性。有了这个，我们可以将Eloquent及其功能引入我们基于Slim的应用程序，并像Laravel应用程序一样使用它。你可以查看[
**“Eloquent”手册**](https://laravel.com/docs/5.4/eloquent) 了解更多信息，以下是使用它的示例：
    $links = Link::all();
    $users = User::where(['active' => 1])->get();
    $userLinks = User::find(1)->links;
它不仅允许直接提取记录，还可以搜索数据库信息并在模型之间建立关系，从而使你更容易在PHP中交叉引用数据，而不会对SQL造成困扰。
Phinx工具使我们能够进行可重用的数据库迁移。迁移基本上是一种自动执行SQL命令的方法。当你考虑开发人员面临的一些常见的数据库问题时，迁移的真正好处就非常明显了：初始数据库设置的一致性，并保持整个团队的同步性。Phinx是一个基于PHP的工具，可以让你创建迁移，也可以用PHP编写，让你定义迁移的“up”和“down”逻辑：当新增数据时执行“up“，当需要移除数据时执行“down“。Phinx工具还可以跟踪哪些迁移已经运行，如果更改后有意想不到的后果，则可以回滚。
以下是创建表的Phinx迁移的示例：
    table('sources');
            $table->addColumn('name', 'string')
                ->addColumn('type', 'string')
                ->addColumn('user_id', 'string')
                ->addColumn('source', 'string')
                ->addColumn('last_update', 'datetime', ['default' => 'CURRENT_TIMESTAMP'])
                ->addColumn('created_at', 'datetime')
                ->addcolumn('updated_at', 'datetime')
                ->create();
        }
    }
在这种情况下，我们创建一个sources表，其中包含用户引用的列，类型，名称和源值。你会注意到，在这个例子中没有一个具体的up或者down方法。随着更新版本的Phinx，该工具已经使用一些魔法实现了change方法。当你写一个change方法时，Phinx会尽力找出，并根据正在执行的操作（应用或回滚）判断如何处理迁移。在这个例子的情况下，它比较简单：执行up，表将被创建，并且执行down，表将被删除。
还有一些其他随机的功能将被包括在随机数生成函数和自定义异常处理的方式，但不要担心，这些都将被及时覆盖。
**  
**
**下集预告**
这是本系列文章的第一部分的结尾。我向你描述了API生态系统的当前状态，描述了应用程序的基本流程，并列出了我们将在本系列中使用的一些工具来实现魔术方法。在本系列的下一部分中，我们将花费一些时间通过规划我们的一些基本API功能来设置和通信。
**参考资源**
[Slim Framework](http://slimframework.com/)
[Laravel Eloquent](https://laravel.com/docs/5.4/eloquent)
[Eloquent
Capsule](https://laravel.com/api/5.4/Illuminate/Database/Capsule/Manager.html)
[Phinx](https://phinx.org/)
[Part Two](https://websec.io/2017/05/01/Build_Secure-API-Part2.html)
[Part Three](https://websec.io/2017/05/12/Build-Secure-API-Part3.html)