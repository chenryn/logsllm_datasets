Process number
Process
Processn
Process n
Processn
Processn
Processn
Process number 8
Process number
Process number 5, sleeps
Process number 3, sleeps
Process number
Processnumberofinished
[ngift@Macintosh-7][H:11199][J:0]# python processing1.py
cocessnumber
print "Process
，使用进程而不使用线程，就可以实现一个几乎等同的脚本。参见例10-24。
ip = q.get()
number
number
number
number
number
number
number 9, sleeps
number 7,
2
2,sleeps
9
5
finishec
finishec
finished
finished
finished
finished
finished
finished
sleeps
sleeps
sleeps
Number:%s"% i
shell=True,
sfor9seconds
for7seconds
for8seconds
for5seconds
for 4seconds
for
for
2 seconds
seconds
www.TopSage.com
seconds
进程与并发丨315
---
## Page 330
316
同步绑定到Python上。
每一个都首先查看队列是否为空，如果为空，那么它会通过运行sys.exit让自己退出。
是，每一个进程运行在一个无限循环体内，从每一个队列中获得元素。为了告诉进程
这个代码段还需要进一步解释。尽管API非常相似，但仍略微有些不同。需要注意的
的输出结果：
这段代码看起来非常类似于之前介绍过的线程化的代码。如果看一下输出，会看到相似
p.join()
print“main process joins on queue"
for i in range(50):
#q.put("192.168.1.1")
for ip in ips:
章，我们介绍了一个实际使用processing模块的Net-SNMP的实现，其中Net-SNMP已经
使用API与使用processing模块一样简便，fork取代了线程使问题变得相对简单。在第7
束，队列变空之后，接下来的输出语句被执行，表明程序结束。
们在线程脚本中所做的那样，将队列进行添加，直到队列为空。在所有的工作进程都结
及相应的被指定的作业（本示例中为ping指定的IP地址）。主程序使用了join，就像我
如果队列仍不为空，那么进程会获得队列中的元素，在这个示例中，元素包括IP地址以
“远离”processing模块，我们创建了一个条件语句，查看队列是否为空。50个线程中的
q.put(ip)
[ngift@Macintosh-7][H:11205][J:0]#
p.start()
Process Number: 49 didn't find a response f
Process Number: 48 didn't find a response for 10.0.1.216
[snip]
[snip]
"Main Program finished"
else:
if ret == 0:
第10章
print "%s: is alive" % ip
stderr=subprocess.STDoUT)
stdout=open('/dev/null', 'w'),
www.TopSage.com
for 10.0.1.218
for.10.0.1.217
---
## Page 331
server,quit()
server = smtplib.SMTP('localhost')
例10-25：Python的基于Cron的磁盘报告邮件
得好处。事实上，cron和Python在一起配合得非常好。让我们看一个Bash的示例，然后
还有一个更好的方法。甚至cron作业也可以从Python脚本中（而不是Bash或Perl中）获
当你将这个脚本放在/etc/cron.daily/diskusage.sh中时，邮件看起来会像是以下这样。
server.sendmail(FROM, TO, msg)
SUBJECT = "Nightly Disk Usage Report"
p = subprocess.Popen("df -h", shell=True, stdout=subprocess.PIPE)
import smtplib
将其转化为Python。参见例10-25。
磁盘使用情况的email。通常是在/etc/cron.daily中放一个类似这样的Bash脚本：
有相当一部分系统管理员已经在他们工作期间，编写了非常不错的具有传统风格的反映
法）: Ietc/cron.daily, letc/cron.hourly, letc/cron.monthly和/etc/cron.weekly。
只需要放python脚本到以下四个默认目录中即可（这也是我们使用cron的仅有的方
在POSIX系统中，调度目录的出现是cron的一个非常新颖的特点。使用cron非常方便，
法。使用传统风格的cron非常适合在Python中运行进程。
现在，已经介绍了在Python中处理进程的全部内容，接下来应该讨论调度这些进程的方
调度Python进程
T0 = "PI:EMAIL"
importstring
import subprocess
df -h ↓ mail -s "Nightly Disk Usage Report" PI:EMAIL 
MSG),"\r\n")
tmpfs
/dev/hda1
/dev/hda3
Filesystem
To: PI:EMAIL
Date:
Subject:
From: PI:EMAIL
Nightly Disk Usage Report
1010M
Size
W66
72G
Used Avail Use%
20M
16G
01010M
www.TopSage.com
75M
52G
21%
24%
0%/dev/shm
Mounted on
/boot
进程与并发丨317
ODG
---
## Page 332
def daemonize（stdin='/dev/null',stdout=′/dev/null',stderr=′/dev/null'）:
后台只是这三个特征中的第一个。
征：在后台运行，与启动它的进程脱离，无须控制终端。使用shell的job命令将进程移至
立，并且与控制终端（或许是你的shell进程）无关。因此，以下是守护进程的三个特
程。所有这些都会使一个进程在后台运行，但是它们不会破坏进程与shelI进程之间的独
Apache的httpd）等。
处理请求、发送文件到打印机（例如，1pd），处理HTTP请求、以及文件服务（例如，
守护进程对于在Unix上花费了大量时间的人是个福音。守护进程可以做许多事情，包括
daemonizer
更多建议。
加快速完成。在第4章中，我们详细地介绍创建email信息，因此你可以参阅该章以获得
如果你是一个使用Python的新手，你或许希望将这个脚本作为样板代码来让一些工作更
脚本简单地放在/etc/cron.daily/nightly_disk_report.py中。
localhost，并将之前设置的变量传入server.sendmailO。使用这个脚本的典型方法是将该
接到一起创建信息。这是该脚本最难的部分。最后，设置smtp发送邮件服务器来使用
来读取df的标准输出。接下来，创建变量From、To和Subject，然后将这些字符串连
该工作得非常出色。这里是Python如何进行处理的过程。首先，使用subprocess.Popen
这是一个简单的方法，用来创建一个自动的基于cron的磁盘报告。在许多情况下，它应
318
import sys, os
例10-26：Daemonize函数
中包括如何创建Unix下的守护进程的内容。参见例10-26。
的方法。对于任何不熟悉Stevens书的人，该书普遍被认为是Unix网络编程的参考书，其
API》（O'Reilly出版）中给出的代码十分相近，为将进程变为守护进程提供了“适合”
下来的代码与Richard Stevens在《UNIXNetwork Programming：The Sockets Networking
（O'Reilly出版）第二版，第388~389页的“Forking a Daemon Process on Unix”。接
为一个在前一段中讨论的守护进程。函数摘自DavidAscher编著的《PythonCookbook》
个守护进程。或是启动一个进程之后，按Ctrl-z，然后通过bg命令来将其转为守护进
如果你熟悉Unix的作业控制，你或许会想到执行命令时，在命令的结尾使用&将会创建
那么什么是守护进程？一个守护进程通常被认为是一个不对终端进行控制的后台任务
#Perform first fork.
try:
第10章
Cor
www.TopSage.com
---
## Page 333
个新的进程组的领导者。最后，也许是转化为守护进程的最重要的一步，使该进程不再
系列事情：首先它使得该进程成为一个新会话的领导者。接下来，它将进程转变成为一
这三步中的最后一步（os.setsid()）或许是最不为人熟悉的部分。setsid调用做了一
组可写权限的文件，一个被继承的具有更严格权限的掩码会有反面作用。
它的文件模式、创建掩码到最大的允许限度。如果一个守护进程需要创建具有组可读、
件系统的能力（如果碰巧文件系统的目录需要被卸载）。接下来进程所做的事情是修改
存在的目录中。修改目录到/的一个额外的好处是你的常驻进程不会束缚住你卸载一个文
umask(o)），创建一个新的会话（os.setsid()）。修改目录到/，将守护进程放到总是
接下来进程要做的三件事情是修改目录到／（os.chdir("/")，设置它的掩码为o（os。
了。但是你启动的进程的子进程（例如，子孙进程）仍然运行。
是父进程），都会退出。如果这时有一个异常发生，进程将退出。如果你从交互式shell
中，返回进程ID号，则表示在父进程中。无论哪个进程有一个非零的返回代码（这只能
之后，有相同的两个副本在运行。它们都检测fork的返回值，返回值为o则表示在子进程
中。如果你之前从没有fork过一个子进程，这或许会令你感到困惑。在调用os.fork()
在使用fork之后，我们通过检测pid进行识别。如果pid是正数，这表明我们在父进程
（例如，Bash）中调用这个脚本，你将重新得到提示符，因为你启动的进程已经终止
是子进程，而原始的进程被认为是父进程。当子进程结束fork，父进程可以自由退出。
代码做的第一件事是fork()一个进程。fork()创建了一个运行进程的副本，副本被认为
os.dup2(se.fileno(
# Perform second fork.
os.setsid(
os.umask(o)
=file(stdout,
=file(stdin,
sys.stderr.write("fork #1 failed: (%d) %s\n" % (e.errno, e.strerror))
sys.exrt(1)
sys.exit(1)
file(stderr,
:0<pTd
sys.exit(o) # Exit first parent.
),sys.stdin.fileno( ))
'a+'
+e
sys.stdout.fileno(
www.TopSage.com
进程与并发丨319
---
## Page 334
def mod_5_watcher():
stdout和sys.stderr）被清空。这保证了那些数据流的信息在这里被创建。该函数允许
fork和setsid为第二个fork设置环境，他们从控制终端分离，并设置进程为会话的领
但是有趣之处并不是到此为止。在调用os.setsid()之后，另一个fork发生了。第一个
的。
有意）作业控制的牺牲品。对于一个不会被中断的常驻进程来说，这一点是非常重要
控制终端。事实上，不再控制终端意味着该进程不会成为一些终端的意外（或者甚至是
程使用/tmp/stdout.log作为标准输出，使用/tmp/stderr.log作为标准错误输出，应该在运行
可以被5整除，将其写入标准错误输出。如果时间没能被5整除，写到标准输出。由于进
准错误输出。接下来进行20秒检测，在两次检测之间休眠1秒。如果时间以秒为单位，
from daemonize import daemonize
例10-27：使用daemonizer
中，例10-27是使用它的样例脚本。
那么，你如何使用daemonizer？假设daemonizer代码是在一个名这daemonize.py的模块
分别到这些文件。
定义，或是默认的stdin，stdout和stderr，并设置进程的标准输人、输出和错误输出
调用者定义stdin、stdout和stderr文件，其默认值是/dev/null。代码或者是来自用户
这里做的最后一件事情是对一些文件的清除和再调整。标准输出和标准错误输出（sys.
终端的仅有的方法是：是否直接打开了一个终端设备，而没有使用O_NOCTTY标志。
端。这第二个frok不是必须的，更多是一种预防。没有最后的fork，进程可以获得控制
这个示例之后查看文件中的结果。
这个脚本首先转化为守护进程，然后指定/tmp/stdout.log为标准输出，/tmp/stderr.log为标
import time
导者。另一个fork意味着结果进程不是会话的领导者。这表示进程不会获得一个控制终
320丨第10章
import sys
mod_5_watcher()
while time.time()
end_time = start_time+20
start_time = time.time()
time.sleep(1)
else:
sys.stdout.write('No mod 5 at %s\n' % now)
sys.stderr.write('Mod 5 at %s\n' % now)
: time.time()
main
==0:
www.TopSage.com
河
9
---
## Page 335
Subprocess为处理子进程提供了一站式服务。
最后，如果你还没有准备好，那么熟悉一下Subprocess模块是一个不错的主意。
使用线程要好，甚至在GL不存在的情况下，其主要原因是调试线程非常困难。
题，但是如果你需要多处理器，那么使用进程是一个好的选择。一些人认为使用进程比
精密的线程API，但是记得GIL也总是有好处的。如果你被I/O绑定，那么这不是什么间
本章非常有意义，展示了Python在处理进程时的成熟与强大。Python具有非常完备且
本章小结
或是任何你可以想象的，运行一段较长时间（或者没有指定具体时间）的进程。
你可以使用这个daemonizer来写目录的监测程序，网络的监测程序可以是网络服务器，
这是一个非常简单的写入守护进程的示例，但是非常有意义的是它包含了基本的概念。
以下是来自示例的结果：
在运行这个脚本之后，我们立即看到一个新的提示符出现了：
No mod 5 at 1207272472.2
 jmjones@dinkgutsy:code$ cat /tmp/stdout.1og
pow
pow
jmjones@dinkgutsy:code$ cat/tmp/stderr.log
N
2
jmjones@dinkgutsy:code$
ON
15at1207272470.2
mod 5 at 1207272471.2
mod
pow
pow
pou
pou
pow
pow
pow
mod
mod 5 at 1207272453.18
mod
at