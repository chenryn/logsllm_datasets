title:Strict Virtual Call Integrity Checking for C++ Binaries
author:Mohamed Elsabagh and
Dan Fleck and
Angelos Stavrou
Strict Virtual Call Integrity Checking for C++ Binaries
Mohamed Elsabagh
PI:EMAIL
Dan Fleck
dﬂPI:EMAIL
Angelos Stavrou
PI:EMAIL
Department of Computer Science
George Mason University
Fairfax, VA 22030, USA
ABSTRACT
Modern operating systems are equipped with defenses that
render legacy code injection attacks inoperable. However,
attackers can bypass these defenses by crafting attacks that
reuse existing code in a program’s memory. One of the most
common classes of attacks manipulates memory data used
indirectly to execute code, such as function pointers. This is
especially prevalent in C++ programs, since tables of func-
tion pointers (vtables) are used by all major compilers to
support polymorphism. In this paper, we propose VCI, a
binary rewriting system that secures C++ binaries against
vtable attacks. VCI works directly on stripped binary ﬁles.
It identiﬁes and reconstructs various C++ semantics from
the binary, and constructs a strict CFI policy by resolving
and pairing virtual function calls (vcalls) with precise sets
of target classes. The policy is enforced by instrumenting
checks into the binary at vcall sites. Experimental results
on SPEC CPU2006 and Firefox show that VCI is signiﬁ-
cantly more precise than state-of-the-art binary solutions.
Testing against the ground truth from the source-based de-
fense GCC VTV, VCI achieved greater than 60% precision
in most cases, accounting for at least 48% to 99% additional
reduction in the attack surface compared to the state-of-
the-art binary defenses. VCI incurs a 7.79% average run-
time overhead which is comparable to the state-of-the-art.
In addition, we discuss how VCI defends against real-world
attacks, and how it impacts advanced vtable reuse attacks
such as COOP.
Keywords
Virtual table attacks; C++; Control ﬂow integrity; Type-call
pairing; Static binary analysis
1.
INTRODUCTION
Presently, memory subversion remains an unsolved secu-
rity threat. By manipulating control data, such as func-
tion pointers and return addresses, attackers can hijack the
control ﬂow of programs and execute arbitrary code. Even
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052976
though modern systems are equipped with W⊕X and Data
Execution Prevention (DEP), attackers can still achieve ar-
bitrary code execution by repurposing existing code from the
program memory, in what is known as code-reuse attacks.
This can range from reusing blocks of instructions, such
as Return Oriented Programming (ROP), to even reusing
whole functions in a Function Reuse Attack (FRA).
The use of Control Flow Integrity (CFI) [1], which is a crit-
ical program security property, can assure the program does
not execute unintended code. Unfortunately, constructing
a sound and complete CFI policy has proven to be a chal-
lenging task [9]. Enforcing CFI is especially hard due to
indirect control ﬂow transfer, such as indirect calls through
function pointers. The problem becomes even harder if the
source code is not available. This makes binary-only solu-
tions very desirable, since, in practice, the source code of
many programs is not always available, and that includes
many commercial products, 3rd party libraries, legacy soft-
ware and ﬁrmware to name a few. Even if the source code is
available, compiling in new protections is not always feasible
or desirable, for instance, due to the presence of legacy code
and compiler dependencies.
Indirect calls are prevalent in OOP languages in order
to enable polymorphism. Of particular interest to us is
C++, where all major compilers, including GCC, LLVM, and
MSVC, support C++ polymorphism via tables of function
pointers. This is also the case for compilers of closely related
languages, such as C# and D. C++ supports class and func-
tion polymorphs by allowing derived classes to redeﬁne base
functions that are declared virtual. Each object of a class
that (re)deﬁnes virtual functions stores a pointer (vptr) to
a read-only table of pointers to virtual function deﬁnitions
(called vtable for short). To invoke a virtual function, the
compiler generates code that indirectly executes the corre-
sponding function in the object’s vtable (see Section 2). We
refer to such code sites in the binary as virtual call (vcall)
sites.
In an unprotected binary, an attacker with control over
an object’s memory or vtable can call any function within
the program whenever the program uses the object’s vtable
to make a vcall. This is typically achieved by exploiting
a memory access bug that enables overwriting the vptr in
an object’s memory, in what is known as a “vtable attack”.
Perhaps the most common class of enabler bugs in this cat-
egory is the infamous use-after-free [2]. Here, a pointer to a
freed object is used in a later program statement (a dangling
pointer) to invoke one of the object’s virtual functions. This
dangling pointer can allow an attacker to execute arbitrary
code if she can control the contents of the object’s freed
140memory, e.g., using heap overﬂows or heap spraying [12].
Such bugs are very prevalent in commodity desktop appli-
cations, such as oﬃce suites and browsers, since they are
typically written in C++. Recent studies (e.g., [7, 22, 25])
suggested use-after-free vulnerabilities account for at least
69% of all vulnerabilities in browsers, about 50% of Win-
dows 7 exploits, and 21% of all vulnerabilities in all operat-
ing systems.
In this paper, we present VCI, a static binary CFI system
that retroﬁts C++ binaries with defenses against vtable at-
tacks. VCI protects the binaries by enforcing a strict CFI
policy that limits the number of callable function from vcall
sites (see Section 3). VCI works on stripped binaries, with-
out needing debug, symbol or type information. To deter-
mine valid function targets we developed algorithms to re-
construct several C++ semantics from binaries, namely: vta-
bles, constructors, class layouts, class hierarchies, and vcalls
(see Section 4). VCI exploits patterns in the assembly, and
uses backward slicing and inter-procedural analysis to sym-
bolically trace the this pointer expressions of objects across
function boundaries. It builds a mapping between vcall sites
and their target class types. It then instruments the binary
by generating and injecting the integrity policy to enforce
the mapping at runtime.
We implemented a prototype of VCI in C++ on Linux, us-
ing Dyninst [15] for binary parsing and rewriting. The pro-
totype consists of ∼3500 SLOC for the analysis in addition
to a ∼500 SLOC dynamic library where the integrity pol-
icy procedures reside. Experimental results (see Section 5)
on the C++ SPEC CPU2006 benchmarks and Mozilla Fire-
fox show that VCI signiﬁcantly reduces the attack surface
compared to the state-of-the-art binary vtable defenses. For
instance, in comparison with VTint [43] and vfGuard [30],
VCI achieved at least 96% and 48% additional reduction
in the number of allowable vcall targets, respectively.
In
comparison to GCC VTV (source-based ground truth), VCI
achieved the highest precision amongst other binary solu-
tions, with 100% precision in some cases and greater than
60% precision for the majority of the test programs. Our
experiments show that VCI incurs a low runtime overhead
(∼7.79%), and can defend against real-world exploits includ-
ing the recent COOP attacks [10, 34]. In summary, we make
the following contributions:
• We present VCI, a binary analysis and rewriting tool
that automatically analyzes and retroﬁts stripped C++
binaries with a strict defense against vtable attacks.
• We introduce multiple algorithms to reconstruct C++
semantics from binaries, without the need for source
code, debug symbols, or symbol and type informa-
tion. VCI employs these algorithms along with inter-
procedural type propagation to resolve vcall targets.
• We introduce a strict and precise integrity policy that
covers all three cases of fully, partially and unresolved
vcall targets. VCI constructs and enforces the policy
via static binary rewriting.
• We quantify the precision of VCI’s policy on various
C++ programs, and compare it to the precision of the
state-of-the-art binary vtable defenses as well as to
GCC VTV [37], the de facto standard source-based
vtable defense of GCC. We show that VCI has signiﬁ-
cantly higher precision than the state-of-the-art binary
solutions.
• We empirically quantify the eﬀectiveness of VCI, dis-
cuss how it impacts COOP attacks, and benchmark
its runtime overhead. We show that VCI can mitigate
real-world attacks, and incurs a comparable overhead
to existing solutions.
The rest of the paper is organized as follows: Section 2
provides an overview of relevant C++ primitives.
In Sec-
tion 3 we deﬁne the threat model, discuss vtable attacks
and give an overview of our solution. Section 4 lays out the
details of VCI. We evaluate VCI in Section 5, and discuss
limitations and improvements in Section 6. We present re-
lated work in Section 7 and conclude in Section 8. In the
Appendix, we provide additional technical details and dis-
cuss complementary policies.
2. BACKGROUND
Commodity applications, such as oﬃce suites and web
browsers, are built with performance in mind. Given the
sophisticated functionalities they provide, it is standard to
use languages that provide suﬃcient levels of abstraction
with a minimal performance penalty. Therefore, low-level
object-oriented languages, such as C++, are typically the
choice for their implementation. To enable polymorphism,
C++ uses virtual functions. A function is declared virtual
if its behavior (implementation) can be changed by derived
classes. The exact function body to be called is determined
at runtime depending on the invoking object’s class.
2.1 Polymorphism and Virtual Tables
All major C++ compilers, including GCC, Clang/LLVM,
MSVC, Linux versions of HP and Intel compilers, use vta-
bles to dispatch virtual functions. A vtable is a reserved
read-only table in the binary that contains function point-
ers to the deﬁnitions of virtual functions accessible through
a polymorphic class. A polymorphic class is a class that
declares, deﬁnes or inherits virtual functions.1 Each virtual
function in a class has a corresponding oﬀset in the class’
vtable which stores the address of the implementation body
of the function in the code section. Whenever an object of
some class type invokes a virtual function, the class’ vtable
is accessed, and the address at the corresponding function
oﬀset is loaded and indirectly called. If a class implements
virtual functions, when an object of that class type is cre-
ated, the compiler adds a hidden pointer to the class’ vtable
(the vptr). The compiler also generates code in the class’
constructor to set the vptr to the address (eﬀective begin-
ning) of its corresponding vtable.
2.2 Virtual Call Dispatch
Since a vcall is always invoked on some object, the com-
piler has to decide how to pass the pointer of the object,
i.e., the this pointer, to the callee. There are two widely
adopted argument passing conventions for vcalls: thiscall,
which is the default convention used by the MSVC compiler
on Windows, and stdcall adopted by GCC, LLVM and
other Linux compilers. In the thiscall, the this pointer
is passed in the ecx register to the callee, while the remain-
ing arguments are passed on the stack. In the stdcall, the
this pointer is passed as an implicit argument on the stack
(top of stack). The argument is implicit in the sense that
it is not part of the callee function signature as seen by the
developer.
1Unless explicitly stated, we use the term “class” to refer to
“polymorphic class” in the rest of this document.
141public:
virtual void foo() = 0;
public:
virtual void foo() {...}
virtual void bar() {...}
1 class Base {
2
3
4 };
5
6 class A: public Base {
7
8
9
10 };
11
12 class B: public Base {
13
14
15
16 };
17
18 class C: public A, public B {
19
20
21
22 };
virtual void foo() {...}
void baz() {...}
virtual void foo() {...}
virtual void qux() {...}
public:
public:
1 mov
2 mov
3 add
4 mov
5 mov
6 mov
7 call
0x1c(%esp), %eax ; this of A
(%eax), %eax
$0x4, %eax
(%eax), %eax
0x1c(%esp), %edx
%edx, (%esp)
*%eax
; eax = vptr_A
; add offset
; eax = vptr_A[4]
; push this of A
; call A::bar()
(c)
0x8(%ebx), %eax
%eax, 18(%esp)
(%eax), %eax
(%eax), %eax
0x18(%esp), %edx
%edx, (%esp)
*%eax
1 ; ebx = this of C
2 lea
3 mov
4 mov
5 mov
6 mov
7 mov
8 call
9
10 thunk:
11
12
0x8, (%esp)
subl
jmp
; adjust to C::B
; store ptr to C::B
; eax = vptr_C_B
; eax = vptr_C_B[0]
; push this of C::B
; call vptr_C_B[0]
; point this to C
(a)
(b)
(d)
Figure 1: (a) Sample C++ classes. (b) Corresponding layouts of instances of classes A, B, C, and their vtables.
(c) Assembly snippets for invoking A::bar(). (d) Assembly snippet for invoking C::foo() using a base pointer
of type B (e.g., B *ptr = new C(); ptr->foo();). Note that B::Baz() is not virtual and therefore is not in the
vtables.
Figure 1(c) shows the steps taken to dispatch a vcall based
on the Itanium ABI, which comprises the following steps:
1) The this pointer of the target object is loaded and
dereferenced.
2) An oﬀset is added to the vptr to point to the vtable
entry with the address of the target virtual function.
3) The adjusted vptr is dereferenced to load the address
of the target virtual function (the vcall address).
4) The this pointer is pushed on the stack.
5) The virtual function is invoked by indirectly calling the
vcall address.
Note that step 2 is optional, depending on the index of the
target virtual function in the vtable. If it is the ﬁrst function
in the vtable, the oﬀset is 0 and step 2 is omitted. If the
virtual function takes arguments, they are all pushed before
the this pointer at step 4. While steps 1 – 3 have to occur in
that speciﬁc order due to data dependency, the ABI does not
guarantee the order of steps 1 – 4. For example, pushing the
this pointer and the arguments (step 4) can occur before
step 1, or even in a diﬀerent (predecessor) basic block.
In later sections we use this pattern as part of the algo-
rithm to locate virtual call sites in the binary.
2.3 Inheritance
C++ supports single, multiple, and virtual inheritance.
When a derived class inherits from base classes, the con-
structor of the derived class calls the constructor of each
base class, in the order of inheritance. The derived class
passes its this pointer to each base constructor. In the case
of multiple inheritance, the this pointer is adjusted to point
to the beginning of the base subobject in the derived object’s
memory layout. According to the Itanium ABI, inheritance
of virtual functions is implemented using multiple vtables,
one for each base class. When a derived class C inherits from
base classes A and B, an object of type C would contain two
subobjects of types A and B, each with its own vtable and
vptr. The eﬀective vtable of the derived class consists of a
table of vtables (called VTT), one for each subobject type,
in the order of inheritance, with the only exception that the
derived class and the ﬁrst subobject share the same vptr.
Figure 1(b) illustrates the layout of vtables in memory for
single and multiple inheritance.
This leads to the need for this pointer adjustments when
using a base pointer to a derived class. For example, Fig-
ure 1(d) shows the assembly generated for invoking ptr->
foo(), where B *ptr = new C(), i.e., ptr is of base class
type besides the ﬁrst base (ﬁrst base is A, second is B). The
compiler adjusts the pointer before the vcall to point to the
subobject B in C (line 2). It then calls (indirectly) a thunk
that re-points this to C then jumps to the actual (derived)
function body. Similarly, this adjustments are used to ac-
cess and invoke virtual functions of member class objects
(more on this in Section 4.3). In VCI, we keep track of any
adjustments done on identiﬁed this pointers, and recon-
struct the inheritance hierarchy among polymorphic classes.
3. PROBLEM DEFINITION
Given a C++ program binary, VCI aims to protect the
program against vtable attacks by enforcing a strict CFI
policy at vcall sites. Speciﬁcally, VCI guarantees that for
each vcall site, the vcall target is one of the class types that
can be legitimately used by that particular vcall site, as
statically inferred. If the condition is violated, VCI raises
an alarm and terminates the program.
In the following, we discuss our assumptions and give a
quick overview of vtable attacks in C++ binaries and how
VCI operates.
3.1 Assumptions and Threat Model
We assume that: 1) attackers can read arbitrary read-
able memory, therefore bypassing any secret-based solution
where the secret is stored in readable memory. 2) They can
write arbitrary writable memory, including injecting vtables
and modifying objects’ layouts and contents. 3) They cannot
142control the memory protection ﬂags without injecting and