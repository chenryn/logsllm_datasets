Here, we further extend such correlation to the system calls that
share the same type of system resources (e.g., (cid:128)les, sockets). In
this way, all the related system calls are put together in the seed
input. Although this may bring some useless system calls to trigger
the vulnerability, it increases the probability to hit the vulnerable
functions.
5.3 Coarse-level Mutation
(cid:140)e goal of this step is to generate an input that could let the
execution reach the vulnerable function. Di(cid:130)erent from symbolic
execution that generates inputs by solving the constraints on the
path from the program start to the vulnerable function, fuzzing
achieves this in a “mutate-and-check” way, that is, continuously
mutating inputs and checking whether the vulnerable function
is reached. In this way, a good strategy of mutation can greatly
increase the fuzzing speed. Our idea is to leverage the guidance
“system calls” and “vulnerable functions”. We start with the seed
input and mutate it for fuzzing. We refer to each running using
an input as a fuzzing instance. (cid:140)en for each instance, we observe
the execution of Linux kernel through the in-box observer, and
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA21461 int r0 = syscall ( __NR_socket , AF_INET , SOCK_DGRAW , 0) ;
2 syscall ( __NR_setsockopt , r0 , ......) ;
3 syscall ( __NR_bind , r0 , lookback ,....)
4 int r1 = syscall ( __NR_socket , AF_INET , SOCK_DGRAW , 0) ;
5 syscall ( __NR_sendto , r1 , NULL , 0, MSG_MORE , loopback );
6 syscall ( __NR_sendto , r1 , buff , buff_size , 0, loopback );
7 syscall ( __NR_poll , .....) ;
8 syscall ( __NR_recvfrom , r0 , ... , loopaddr );
Figure 6: (cid:135)e sequence of system calls to trigger CVE-2017-
6347.
selected and used for future mutations. We measure the input
quality using the distance between basic blocks. As we know, a
basic block is a sequence of instructions with no branches in except
to the entry and no branches out except at the exit [25]. A function
can be represented as a control (cid:131)ow graph, in which each node
is a basic block and each edge between two basic blocks indicates
there is a control (cid:131)ow relationship between them. We measure the
distance between two basic blocks (b1 and b2) by the number of basic
blocks in the shortest path from b1 to b2, denoted as distB(b1, b2).
A special situation is that, when b1 == b2, the distB equals to 1. In
this way, we can de(cid:128)ne the priority of an input as follows.
Given a vulnerable function f ∈ VU L with an entry point e.
Suppose the patched code of function f is in the set of basic blocks
PATCH = {p1, p2, ..., pn}. Let KCOVB(s) be the set of covered basic
blocks in a system call sequence s. For ∀b ∈ KCOVB(s), we de(cid:128)ne
its priority prio(cid:48) to a patched block p ∈ PATCH as:
(cid:48)
p (b) =
prio
distB(e,b) × 100
distB(e,b) + distB(b,p) − 1 ,
1,
i f e (cid:123) b and b (cid:123) p
otherwise
(cid:40)
where e (cid:123) b means there is a path from the entry e to the basic
block b, and b (cid:123) p means there is a path from the basic block b to
patched basic block p. (cid:140)e priority of the system call sequence s is
de(cid:128)ned as:
p (b) | b ∈ KCOVB (s)(cid:9)
(cid:8)prio(cid:48)
prio(cid:48) (s) = maxf ∈V U L,p∈PAT CH
From this de(cid:128)nition, the priority of a given system call sequence
can be represented in the range [1, 100], where 1 means the patched
code is less likely to be reached, while 100 means the patched code
is reached. (cid:140)e higher the value, the more likely that the patched
code could be reached. SemFuzz chooses the input that has the
highest value for further fuzzing.
We take CVE-2017-6347 as an example. (cid:140)e critical variable of
the vulnerable function ip cmsg recv checksum is skb.len, where
skb is the parameter of the function. Consider two system call
sequences s1 and s2. (cid:140)e former one can reach a basic block whose
distance to the function entry is 95 in a path with distance 100
(from the function entry to the patched basic block). (cid:140)en the
prio(cid:48)(s1) = (95/100) × 100 = 95. (cid:140)e la(cid:138)er one s2 can reach a basic
block whose distance to the function entry is 90 in the same path.
(cid:140)en the prio(cid:48)(s2) = (90/100)×100 = 90. (cid:140)us, we prefer to choose
s1 instead of s2 for (cid:128)ne-grained mutation. We randomly select a
mutation operation on s1 to generate a new system call sequence
s(cid:48)
1. When executing s(cid:48)
1, we observe the len (cid:128)eld of the skb parame-
ter. If its value is changed, we prioritize the selected operation in
further mutations. Figure 6 shows a system call sequence in the
(cid:128)ned-grained mutation process. For brevity, we omit some tedious
parameters in the (cid:128)gure, and use loopback to present the sock addr
structure assigned with the loop back address (i.e., 127.0.0.1). (cid:140)e
feedback from the in-box observer indicates that by mutating the
parameter bu(cid:130) of the system call sendto (line 7), the skb.len will
be impacted. So SemFuzz focuses on such a mutation and (cid:128)nally
triggers the vulnerability when the bu(cid:130) argument is ful(cid:128)lling with
more than 512 bytes data.
6 EVALUATION AND FINDINGS
In this section, we evaluate the e(cid:130)ectiveness and performance of
SemFuzz. Also included is the evaluation on the accuracy of the
retrieved information using natural language processing, which
supports the high performance of SemFuzz.
Interestingly, two
unknown vulnerabilities were found in this process, which were
presented in the case study. We demonstrate that the leaked in-
formation from CVE and Linux git log could help a(cid:138)ackers to
automatically generate PoC exploits.
6.1 Settings
CVEs and Linux git logs. We collected the CVEs in last (cid:128)ve
years that target x86/x86 64 Linux kernel from version 4.0 to the
latest version 4.11. We (cid:128)ltered out the vulnerabilities that require
speci(cid:128)c devices to trigger (e.g., CVE-2016-2782 requires a speci(cid:128)c
USB device that lacks a bulk-in or interrupt-in endpoint) and the
logical vulnerabilities whose abnormal behaviors cannot be directly
observed (e.g., bypass the intended (cid:128)le system access restriction as
shown in CVE-2015-8660). Finally, we got 112 CVEs, which covers
the most common vulnerability types (e.g., double free, use-a(cid:137)er-
free, bu(cid:130)er over-read and bu(cid:130)er over(cid:131)ow, etc., as shown in Table 1)
and various subsystems (e.g., networking, (cid:128)le system, keys, etc.) of
the Linux kernel. For each CVE, we collected the corresponding
Linux git log, including the log message and patching code.
We compiled 103 versions of Linux kernel from 4.0 to 4.11 with
the allyesconfig con(cid:128)guration while opting out the test modules
that may crash the kernel. To support the code coverage collection,
we enabled the KCOV functionality, which was introduced into the
kernel since version 4.6. We ported the KCOV functionality to the old
kernels before 4.6. We also enabled internal kernel error detectors
(e.g., KASAN detector and the UBSAN detector) to enhance the ability
of SemFuzz in capturing abnormal behaviors.
Computing environment. All the experiments were run on a 64-
bit Ubuntu server with 40 cores (2.3GHz Intel®Xeon®CPU E5-2650),
256GB memory and 70TB hard drive. For each CVE, the fuzzing
process continued for 48 hours or until the given vulnerability is
successfully triggered.
6.2 E(cid:130)ectiveness
E(cid:130)ective of exploit generation. We evaluated the number of
CVEs from which SemFuzz successfully generates the PoC exploits,
indicating the e(cid:130)ectiveness of this end-to-end approach. Further, we
made a deep analysis on the rest CVEs to check why SemFuzz does
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2147Table 2: Precision and recall of semantic information re-
trieving.
Table 3: Performance evaluation.
Information
A(cid:130)ected Version
Vuln. Type
Vuln. Functions
Critical Variables
System Calls
TP
112
112
95
33
70
FP
0
0
16
7
13
FN TN Precision
100.00%
0
100.00%
0
85.59%
0
82.50%
5
3
84.34%
0
0
1
67
26
Recall
100.00%
100.00%
100.00%
86.84%
95.89%
not trigger the vulnerabilities. (cid:140)is gives us further understanding
on both our approach and the descriptions of CVEs/Linux git logs.
SemFuzz successfully generated PoC exploits for 18 (16%) CVEs,
including use-a(cid:137)er-free, null pointer deference, bu(cid:130)er over-read,
etc. (cid:140)e details of these 18 CVEs are shown in Table 4 in Appendix.
(cid:140)e a(cid:130)ected Linux versions and vulnerable functions are correctly
pointed out. Interestingly, we note that only 5 of the 18 CVEs have
been studied and the corresponding exploits were released on the
Internet, which shows that most of the exploits are not generated or
only owned by very few a(cid:138)ackers. We then compared the exploits
from Internet and ours. Actually, we (cid:128)nd the sequences of system
calls between them are not the same. Neither the values of the
parameters. One reason is that the vulnerable function can be
triggered in di(cid:130)erent execution traces.
For the rest 94 CVEs, we analyzed the intermediate results. We
found 49% (46/94) of them give correct inputs that can lead the
execution to the vulnerable functions. 20% (19/94) of them give
correct inputs that can even let the execution run to the patched ba-
sic block in the vulnerable functions. We manually examined why
SemFuzz does not generate PoC exploits for these CVEs and found
that it is mainly due to two reasons. Firstly, some vulnerabilities
can only be triggered when the inputs (especially the parameters
of system calls) meet some speci(cid:128)c conditions, which is hard for
SemFuzz to generate in limited time. Secondly, some vulnerabilities
are only possible if race conditions can occur. Still SemFuzz needs
more time to trigger such conditions due to non-determinism of
concurrent executions. Researches on augmenting fuzzing through
selective symbolic execution [52] and manipulating thread schedul-
ing [29, 58] could help further improve the performance of SemFuzz.
E(cid:130)ective of semantic information retrieving. In this part, we
measured whether the extracted semantic information is accurate
and whether there is any important information missed by our
natural language processing. (cid:140)is evaluation was performed for
each guidance. In general, we compared the retrieved information
with manually retrieved ones from the descriptions of CVEs and
Linux git logs, and computed the precision and recall. Details are
elaborated in Table 2.
For “a(cid:130)ected version” and “vulnerability type”, we found the
extracted information is very accurate, with 100% precision and
100% recall. (cid:140)at is, our NLP-based approach can correctly retrieve
the a(cid:130)ected version and vulnerability type from all the CVEs. For
the “vulnerable functions”, SemFuzz can always (cid:128)nd them by com-
paring the patched code with the original one (i.e., with 100% recall).
Considering some of the identi(cid:128)ed “vulnerable functions” may not
be related to the vulnerable code, we manually checked them on
CVE
CVE-2015-0275
CVE-2015-1333
CVE-2015-5706
CVE-2015-6937
CVE-2015-7872
CVE-2015-7990
CVE-2016-0728
CVE-2016-10147
CVE-2016-3134
CVE-2016-3841
CVE-2016-4482
CVE-2016-4794
CVE-2016-6213
CVE-2016-8646
CVE-2016-9555
CVE-2016-9793
CVE-2017-6074
CVE-2017-6347
Reach Vuln. Function Trigger Vulnerability
SemFuzz
Syzkaller
>48.00 h
0.12 h
37.26 h
2.73 h
>48.00 h
0.07 h
>48.00 h