1f (outerMatch.index == outerRegex.lastIndex) outerRegex.lastIndex++;
// Search and replace through the text between this match,
// and the previous one
var textBetween = subject.slice(lastIndex, outerMatch.index);
result += textBetween.replace(innerRegex,
"\u201C$1\u201D");
lastIndex = outerMatch.index + outerMatch[o] .length;
// Append the regex match itself unchanged
result += outerMatch[o];
// Search and replace through the remainder after the last regex match
var textAfter = subject.slice(lastIndex);
result += textAfter.replace(innerRegex, "\u201C$1\u201D°);
PHP
$result -'';
$lastindex = 0;
while (preg_match(′/]*>/', $subject, $groups, PREG_oFFSET_CAPTURE,
$matchstart = $groups[o][1];
$lastindex)) (
// Search and replace through the text between this match,
$matchlength = strlen($groups[o][o]);
// and the previous one
$textbetween = substr($subject, $lastindex, $matchstart-$lastindex);
$result .= preg_replace(′/*([^"]*)"/', *"$1”′, $textbetheen);
// Append the regex match itself unchanged
[o][o]sdnox3g =4nsaxs
$lastindex = $natchstart + $matchlength;
// Move the starting position for the next match
1f ($matchlength = 0) {
// Don’t get stuck in an infinite loop
++xaptss
// 1f the regex allous zero-length matches
// Search and replace through the remainder after the last regex match
$textafter = substr($subject, $lastindex);
$result = preg_replace(*/"([^*J*)"/′,"$"', $textafter);
208 | Chapter 3: Programming with RegularExpressions
---
## Page 225
Perl
use encoding *utf-8";
$result =
while ($subject =~ m/]*>/g) {
$match = $&;
$textafter = $′;
8/{atoz}x\t${toz}x/([])/s =($=uaaqxs)
$result ,= $textbetween . $match;
$textafter = s/"([^*]*)"/\x{201c)$1\x{201D}/g;
$result .= $textafter;
Python
（.(*]).)aduooax =axxauu
result = "";
for outermatch in re.finditer(°]*>, subject):
lastindex = 0;
# Search and replace through the text between this natch,
# and the previous one
textbetween = subject[lastindex:outermatch.start()]
result += 1nnerre,sub(u*\u201C\\1\u201D", textbetween)
lastindex = outernatch.end()
# Append the regex match itself unchanged
result += outermatch.group()
# Search and replace through the remainder after the last regex match
textafter = subject[lastindex:]
result += innerre.sub(u*\u201C\\1\u201D", textafter)
Ruby
result = '';
textafter =
subject,scan(/]*>/) (|match|
(T\,/,(+[])/)qns3-s =uaanμaqμxa
textafter = $'
result += textbetween + match
result += textafter.gsub(/"([^*J*)"/, *"\1*′)
Discussion
Recipe 3.13 explains how to use two regular expressions to find matches (of the second
regex) only within certain sections of the file (matches of the first regex). The solution
for this recipe uses the same technique to search and replace through only certain parts
of the subject string.
3.18 Replace Al Matches Between the Matches of Another Regex | 209
---
## Page 226
It is important that the regular expression you use to find the sections continues to
atq no us oafqns qeuuo au pou no g fus 1afqns qeuguo au uo som
to shift the stating position for theregex that finds the section as the inner regex adds
or deletes characters. More importantly, the modifications can have unintended side
effects. For example if your outer regex uses the anchor ^ to match something at the
start of a line, and your inner regex inserts a line break at the end of the section found
by the outer regex, then ^) will match right after the previous section because of the
newly inserted line break.
Though the solutions for this recipe are quite long, they’re very straightforward. Two
regular expressions are used. The “outer” regular expression, ]*>), matches a
pair of angle brackets and anything berween them, except angle brackets. Thisis a crude
way of matching any HTML tag, This regex works fine as long as the HTML file does
not contain any literal angle brackets that were (incorrectly) not encoded as entities.
We implement this regular expression with the same code shown in Recipe 3.11. The
only difference is that the placeholder comment in that code that said where to use the
match was replaced by the code that does the actual search-and-replace.
The search-and-replace within the loop follows the code shown in Recipe 3.14. The
subject string for the search-and-replace is the text between the previous match of the
outer regex and the current match. We append the result of the inner search-and-
replace to the overall result string. We also append the current match of the outer
regular expression unchanged.
When the outerregex fails tofindfurthermatches, we run theinner search-and-replace
once more, on the text after the last match of the outer regex.
The regex , but none of the programming languages discussed in this book support
such tokens as part of the replacement text. If an end user wants to insert smart quotes
into the replacement text he types into an edit control, he'll have to paste them in
literally from a character map. In your source code, you can use Unicode escapes in the
replacement text, if your language supports such escapes as par of literal strings. For
example, C# and Java suppor u2oc at the string level, but VB.NET does not offer a
to convert a Unicode code point into a character.
210 | Chapter 3: Programming with RegularExpressions
---
## Page 227
Perl and Ruby
The Perl and Ruby solutions use rwo special variables available in these languages that
we haven’t explained yet. $° (dollar backtick) holds the part of the text to the left of
the subject match, and $’ (dollar single quote) holds the part of the text to the right of
the subject match. Instead of iterating over the matches in the original subject string.
we start a new search on the part of the string after the previous match. This way, we
can easily retrieve the text between the match and the previous one with $'.
Python
The result of this code is a Unicode string because the replacement text is specified as
a Unicode string. You may need to call encode() to be able to display it, for example
print result.encode(′1252′)
See Also
This recipe uses techniques introduced by three earlier recipes. Recipe 3.11 shows code
01 apoo smous I' adlioay Bus e ut pug ueo xadau e saqpieu aq le aaao aneai o1
find regex matches within the matches of another regex. Recipe 3.16 shows code to
search and replace with replacements generated in code for each regex match instead
of using a fixed replacement text for all matches.
3.19SplitaString
Problem
You want to split a string using a regular expression. After the split, you will have an
array or list of strings with the text between the regular expression matches.
For example, you want to split a string with HTML tags in it along the HTML tags.
jo tre t ui ansau pnous suootet<>pueeptoq>eaxtI 
five strings: Ilike, bold, *and=, italic, and =fonts.
Solution
C#
You can use the static call when you process only a small number of strings with the
same regular expression:
(]>, “Bu.xasaqns)dsxa8ag - Aex.v[ds []8ux5
Iftheregex is provided by the enduser, youshould use the static call with full exception
handling:
3.19 Split a String I 211
---
## Page 228
string[] splitArray = null;
}
(]>。sqs)sx8ag =Aes
}catch (ArgumentNullException ex) {
// Cannot pass null as the regular expression or subject string
}catch (ArgumentException ex){
// Syntax error in the regular expression
ael e uia uoissaudxa 1eqnau aues au asn oi suem no. j! 1oa(qo xaag t 1onsuo
number of strings:
（]>)xa3ay mau =goxa8a1 xa8ag
(8uxs>aqns)dsqoxa8ax = Aeytds []8uxs
exception handing:
If the regex is provided by the end user, you should use the Regex object with full
string[] splitArray = null;
try{
Regex regexobj = new Regex("]*>);
try {
(8uxsaqs)dsaoxaax = Aexxvads
} catch (ArgumentNullException ex) {
// Cannot pass null as the subject string
{
}catch (ArgumentException ex){
// Syntax error in the regular expression
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
(]>。 “8uxas>{qns)dsxa8ag = Kexxvds wgo
If the regex is provided by the end user, you should use the static call with fullexception
handling:
Dim SplitArray As String()
Try
(]>。8uxsa[qns]dsxag = Aexxvds
Catch ex As ArgunentNullException
'Cannot pass null as the regular expression or subject string
Catch ex As ArgunentException
End Try
‘Syntax error in the regular expression
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
212 | Chapter 3: Programming with RegularExpressions
---
## Page 229
Dim Regex0bj As New Regex("]*>*)
(8uxsaans)+dsaoxaag = Aexxvatds wa
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
Dim SplitArray As String()
Txy
Din RegexObj As New Regex(*]*>")
Try
(8utxsaqns)tdsCaoxaag = Aexxvds
Catch ex As ArgumentNullException
‘Cannot pass null as the subject string
End Try
Catch ex As ArgunentException
End Txy
Syntax error 1n the regular expression
Java
a qa Sus auo fquo 1ds on suea no uaum Apa ()ards Buaas [eo ue no
same regular expression:
(]>)[dsSuxsa{qns = Aex[ds []uxs
If the regex is provided by the end user, you should use full exception handling:
try {
(]>suxsfqns = Kexxvds []us
}catch (PatternSyntaxException ex){
// Syntax error in the regular expression
Construct a Pattern object if you want to use the same regular expression with a large
number of strings:
Pattern regex = Pattern.compile(“]*>");
(8uxsqns)dsxa8ax = Aex.yds []8ux5
If the regex is provided by the end user, you should use the Pattern object with full
exception handling:
nu = Aex.yt[ds []8uxs
}A
(]>)aduos*uxaed =xafax uxaied
(8utasoafqns)tds*xadax = Aexxvatds
}catch (ArgumentException ex){
// Syntax error in the regular expression
3.19 SplitaString | 213
---
## Page 230
JavaScript
:uorssaudxa aenau e ussn Suus t ands ueo poqau ()t[ds -fuzs au
(/]>/)[ds{qns = nsx
XRegExp
result = XRegExp-split(subject, /]*>/);
PHP
$result = preg_split(′/]*>/', $subject);
Perl
@result = split(m/]*>/, $subject);
Python
If you have only a few strings to split, you can use the global function:
result = re.split(*]*>*, subject))
To use the same regex repeatedly, use a compiled object:
reobj = re.compile("]*>)
qs)qox = sx
Ruby
(/]>/)[ds{qns = nsx
Discussion
jo 1nsau asoddo aq saonpoud Xeuassa uossaadxa 1eqnBau e Busn Sus t Suds
Recipe 3.10. Instead of retrieving a list with althe regex matches, you get alist of the
text betrween the matches, including the text before the first and after the last match.
The regex matches themselves are omitted from the output of the split function.
C# and VB.NET
In .NET, you will always use the Regex. Split () method to split a string with a regular
expression. The first parameter expected by Split() is always the string that holds the
original subject text you want to split. This parameter should not be nul1. If it is,
Split() will throw an ArgunentNullException. The return value of Split() is always an
array of strings.
If you want to use the regular expression only a few times, you can use a static call. The
second parameter is then the regular expression you want to use. You can pass regex
214 | Chapter 3: Programming with RegularExpresions
---
## Page 231
options as an optional third parameter If your regular expression has a syntax error,
an ArgumentException will be thrown.
If you want to use the same regular expression on many strings, you can make your
code more efficientby constructing a Regex objectfirst, and then calling Split() on that
object. The subject string is then the only required parameter.
When calling Split() on an instance of the Regex class, you can pass additional pa
rameters to limit the split operation. If you omit these parameters, the string will be
split at al matches of the regular expression in the subject sring. The static overloads
of Split() do not allow these additional parameters. They always split the whole string
at all matches.
As the optional second parameter, after the subject string, you can pass the maximum
number of split strings you want to end up with. For example, if you call
regex0bj -Split(subject, 3), you will receive an array with at most three strings in it.
The Split() function will try to find rwo regex matches, and retum an array with the
text before the first match, the text berween the rwo matches, and the text after the
second match. Any further possible regex matches within the remainder of the subject
string are ignored, and lft in the last string in the array.
If there are not enough regex matches to reach your limit, Split() will split along all
the available regex matches and return an array with fewer strings than you specified.
regexobj -Split(subject, 1) does not split the string at all, returning an array with the
original string as the only element. regex0bj -Split(subject, 0) splits at all regex
matches, just like Split() does when you omit the second parameter. Specifying a
negative number will cause Split() to throw an ArgumentoutofRangeException.
If you specify the second parameter with the maximum number of strings in the re-
tumed array, you also can specify an optional third parameter to indicate the character
index at which the regular expression should begin to find matches. Essentially, the
number you pass as the third parameter is the number of characters at the start of your
subject string that the regular expression should ignore. This can be useful when you've
already processed the string up to a point, and you only want to split the remainder of
the string.
The characters skipped by the regular expression will still be added to the returned
array. The first string in the array is the whole substring before the first regex
match found after the starting position you specified, including the characters before
that starting position. If you specify the third parameter, it must be berween
zero and the length of the subject string. Otherwise, Split() throws an
ArgumentoutofRangeException. Unlike Match(), Split() does not allow you to specify a
parameter that sets the length of the substring the regular expression is allowed to
search through.
If a match occurs at the start of the subject string, the first string in the resulting array