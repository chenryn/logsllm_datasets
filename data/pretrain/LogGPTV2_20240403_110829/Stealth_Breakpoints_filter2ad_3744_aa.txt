title:Stealth Breakpoints
author:Amit Vasudevan and
Ramesh Yerraballi
Stealth Breakpoints
Amit Vasudevan and Ramesh Yerraballi
Department of Computer Science and Engineering
University of Texas at Arlington
{vasudeva,ramesh}@cse.uta.edu
Abstract
1. Introduction
Microscopic analysis of malicious code (malware) re-
quires the aid of a variety of powerful tools. Chief among
them is a debugger that enables runtime binary analysis at
an instruction level. One of the important services provided
by a debugger is the ability to stop execution of code at
an arbitrary point during runtime, using breakpoints. Soft-
ware breakpoints support an unlimited number of breakpoint
locations by changing the code being debugged so that it
can be interrupted during runtime. Most, if not all, malware
are very sensitive to code modiﬁcation with self-modifying
and/or self-checking (SM-SC) capabilities, rendering the use
of software breakpoints limited in their scope. Hardware
breakpoints supported by the underlying processor, on the
other hand, use a subset of the processor register set and ex-
ception mechanisms to provide breakpoints that do not en-
tail code modiﬁcation. This makes hardware breakpoints the
most powerful breakpoint mechanism for malware analysis.
However, current processors provide a very limited number
of hardware breakpoints (typically 2–4 locations). Thus, a
serious restriction is imposed on the debugger to set a de-
sired number of breakpoints without resorting to the limited
alternative of software breakpoints. Also, with the ever evolv-
ing nature of malware, there are techniques being employed
that prevent the use of hardware breakpoints. This calls for a
new breakpoint mechanism that retains the features of hard-
ware breakpoints while providing an unlimited number of
breakpoints, which cannot be detected or countered.
In this paper, we present the concept of stealth breakpoints
and discuss the design and implementation of VAMPiRE 1, a
realization of this concept. VAMPiRE cannot be detected or
countered and provides unlimited number of breakpoints to
be set on code, data, and I/O with the same precision as that
of hardware breakpoints. It does so by employing a subtle
combination of simple stealth techniques using virtual mem-
ory and hardware single-stepping mechanisms that are avail-
able on all processors, old and new. This technique makes
VAMPiRE portable to any architecture, providing powerful
breakpoint ability similar to hardware breakpoints for mi-
croscopic malware analysis.
1 VAMPiRE is a beast (in folklore) that attacks in a stealth fashion.
Microscopic malware analysis — a ﬁne-grained analysis
process that provides insight into malware structure and in-
ner functioning — helps in gleaning important information
regarding a malware to facilitate the development of an anti-
dote. Fine-grained analysis requires the aid of various pow-
erful tools, chief among them being a debugger that enables
runtime binary analysis at an instruction level. One of the im-
portant services provided by a debugger is the ability to stop
execution of code being debugged at an arbitrary point dur-
ing runtime. This is achieved using breakpoints, which can
be of two types: Hardware and Software. Hardware break-
points, as the name suggests, are provided by the underly-
ing processor and support precise breakpoints on code, data
and I/O. They are deployed by programming speciﬁc pro-
cessor registers to specify the breakpoint locations and type.
Software breakpoints on the other hand are implemented by
changing the code being debugged to trigger certain excep-
tions upon execution (usually a breakpoint exception).
Software breakpoints support unlimited number of break-
point locations but suffer from the fact that they modify the
target code at runtime. This is clearly unsuitable in the con-
text of malware since most if not all malware possess SM-
SC capabilities and are very sensitive to changes made to
their code. For example, viruses such as W32.HIV [18],
W9x.CIH [17], W32.MyDoom [19] etc. use polymor-
phic/metamorphic code envelopes and employ a host of in-
tegrity checks to detect any changes made to their internal
code fragments, to prevent their analysis. Hardware break-
points on the other hand do not involve any form of code
modiﬁcation and, hence, are the most powerful tool in the
repertoire of any debugger tailored for malware. Current pro-
cessors , however, provide a very limited number of hard-
ware breakpoints (typically 2–4 locations). Thus, a serious
restriction is imposed on a debugger to set desired number
of breakpoints without resorting to the limited alternative of
software breakpoints. Also, with the ever evolving nature of
malware, there are techniques being employed that prevent
the use of hardware breakpoints to analyze them. For exam-
ple, the W32.HIV virus uses the processor debug registers
and the breakpoint exception for its internal computations,
thereby effectively thwarting hardware breakpoints. This sit-
uation calls for a new breakpoint mechanism that retains the
features of hardware breakpoints while providing unlimited
number of breakpoints that cannot be detected or countered.
This paper discusses the concept of stealth breakpoints
and presents VAMPiRE, a realization of this concept that of-
fers the best of both worlds in the sense of unlimited num-
ber of precise breakpoints on code, data and I/O which can-
not be detected or countered. This is achieved by employing
simple stealth techniques that involve virtual memory, single-
stepping and task state segments 2 (for processors supporting
legacy I/O) — features found in most new and old proces-
sor architectures.
While various ideas using virtual memory for breakpoint
purposes have been explored in many debuggers [2, 15, 6],
most if not all, allow only data read and/or write breakpoints.
Also none of them are speciﬁcally tailored for malware anal-
ysis and their breakpoint implementation can be easily de-
tected and defeated. To the best of our knowledge, VAM-
PiRE is the ﬁrst to combine virtual memory, single-stepping,
task state segments (TSS) and stealth techniques to provide a
stealth and portable breakpoint framework highly conducive
for malware analysis. By stealth we mean that the break-
points inserted using VAMPiRE is completely invisible to
the code being debugged. VAMPiRE currently runs under the
Windows (9x, NT, 2K and XP) and Linux operating systems
(OS) on IA-32 (and compatible) processors and is portable
on any platform (OS and processor architecture) that sup-
ports virtual memory and single-stepping. The framework
performance is well within the limits to suit interactive de-
bugging and having a simple and easy-to-use API allows it
to be incorporated into existing debuggers with ease.
This paper is organized as follows: In Section 2 we con-
sider related work on breakpoints and compare them with
VAMPiRE. In Section 3 we discuss the design and imple-
mentation of VAMPiRE. In Section 4 we demonstrate the
use of VAMPiRE and present some performance numbers
for the framework. We conclude the paper in Section 5 sum-
marizing our contributions with suggestions for future work.
2. Background and Related Work
Breakpoints — debugging aids that provide the ability to
stop execution of code at an arbitrary point during execu-
tion — are primarily categorized into hardware and software.
There are various designs and implementations of break-
points. Several authors have speculated that efﬁcient data
breakpoints require special purpose hardware [20, 4, 11].
There are also surveys [21] which discuss the architectural
support towards debugging that emphasize the need for spe-
cial purpose hardware as a debugging aid. One such mech-
anism is called ICE breakpoints. ICE or in-circuit emula-
tion is a specialized circuitry embedded within the proces-
sors, designed for debugging the internals of the processor.
There are various approaches to embed the functionality of
in-circuit emulation, in hardware, software and hybrid [5].
2
Task State Segments (TSS) are used to store all the information the pro-
cessor needs in order to manage a task. This includes the processor reg-
isters, stacks, the task’s virtual memory mappings etc.
ICE breakpoints require supporting hardware [8, 1] and is
typically used for processor core debugging than normal pro-
gram debugging. Many processors also have built-in support
for hardware breakpoint facilities. This involves a subset of
the processor register set and exception mechanisms to pro-
vide precise code, data and/or I/O breakpoints albeit allow-
ing breakpoints to be set on a limited number of locations
(typically 2–4 locations).
Software breakpoints on the other hand provide an ele-
gant, cost-effective and scalable solution with the existing
hardware. There are various categories of software break-
points. The ﬁrst variety relies on program source code avail-
ability. This coupled with help from the compiler is used
to insert data and/or code breakpoints. Practical data break-
points
[26, 25] use efﬁcient runtime data structures and
ideas from compiler optimization to provide several meth-
ods of data breakpoints. The method involves checking all
read and/or write instructions using complex data ﬂow anal-
ysis with a segmented bitmap, reserving registers to hold in-
termediate values during address lookup.
The second variety of software breakpoints uses proces-
sor supported trap and/or breakpoint instructions to set the
desired breakpoint. There are a host of implementations as in
GDB [15], KDB [3], Windbg [23], DBX [14], WDB [1],
Softice [6] etc. In this method, a debugger typically encodes
a 1 byte trap instruction at the breakpoint location, while sav-
ing the byte that was replaced. When the breakpoint triggers
by means of the trap exception, the debugger gets control and
the original byte is replaced and the program is restarted to
execute the instruction. While this method solves the prob-
lem of the number of breakpoints that could be active simul-
taneously, it does not support data and/or I/O breakpoints
and is unsuitable for SM-SC code. Also, there are specula-
tions regarding the correctness of trap-based breakpoint im-
plementations. The combination of trap and single-stepping
may result in missed breakpoints in a multithreaded program
if not correctly implemented by the debugger [22].
Fast breakpoints [12] suggested a novel way to imple-
ment software breakpoints using instruction ﬂow change.
The idea is to encode a jump instruction to transfer control to
the debugger at the breakpoint. While the idea is similar to
that of a trap, this method, to some extent, avoids the prob-
lem of correctness of a breakpoint in a multi-threaded pro-
gram. However, the mechanism supports only code break-
points and is not applicable to SM-SC code.
There are software breakpoint mechanisms which employ
the virtual memory system. Vax debug [2], a source level
debugger, implements data read and/or write breakpoints us-
ing page protection techniques. The attribute of the mem-
ory page containing the breakpoint is modiﬁed so as to trig-
ger an exception when any location in the page is accessed.
The debugger then performs a few checks to ensure the cor-
rectness of breakpoint triggering and responds accordingly.
However, this idea was not studied or developed further to
study the performance or to support code and/or I/O break-
points. GDB [15], another popular debugger and Poor mans
watchpoint
mechanism.
[7] also support data breakpoints via a similar
3.1. Framework Overview
Softice [6] supports breakpoint on instruction execution
using page protection, but has problems regarding the cor-
rectness of the breakpoint. For example, if a code execute
breakpoint is set on a branch instruction using page protec-
tion, the debugger triggers the breakpoint at the destination
address of the branch instruction and not the branch instruc-
tion itself. Also, Softice is a commercial product only de-
veloped for the Windows OS on IA-32 processors, exploit-
ing the OS internals. Thus, its implementation is not generic
and sometimes unstable. As an example, the page protec-
tion breakpoint mechanism of Softice is only supported un-
der Windows 9x and not under Windows NT, 2K or XP.
Another category of software breakpoints is found in de-
buggers based on virtual machines. While complete virtual
machine based interfaces such as Simics [16] and debug-
gers running on them can overcome many problems related
to breakpoints and their stealthness, they are seldom con-
structed in that fashion as they do not speciﬁcally target mal-
ware analysis and are not well suited for interactive debug-
ging. The alternative of using debuggers based on compat-
ibility layers such as TTVM [13], has its drawback since
they do not run on commodity OSs and use ofﬂine tech-
niques based on logging, replaying and check-pointing [9].
Also, they only maintain a single or a subset of the execu-
tion traces which is unsuitable for SM-SC code.
In comparison, VAMPiRE is a software breakpoint frame-
work — running in real-time on commodity OSs such as
Windows and Linux — employing the virtual memory sys-
tem and page protection techniques similar to the ones used
in existing debuggers such as GDB [15], Softice [6] etc.,
but unique in that: (a) it supports unlimited number of pre-
cise code and I/O breakpoints in addition to data breakpoints
with low latency, (b) it provides breakpoint persistence simi-
lar to hardware breakpoints, (c) it supports SM-SC code and