following three supplemental SIDs added for compatibility), regardless of the
account it’s running. Because of this, all services running inside that process
(part of the same service group) must have the restricted SID type; otherwise,
services with the restricted SID type fail to start. Once the token becomes
write-restricted, three more SIDs are added for compatibility reasons:
■    The world SID is added to allow write access to objects that are
normally accessible by anyone anyway, most importantly certain
DLLs in the load path.
■    The service logon SID is added to allow the service to communicate
with the SCM.
■    The write-restricted SID is added to allow objects to explicitly allow
any write-restricted service write access to them. For example, ETW
uses this SID on its objects to allow any write-restricted service to
generate events.
Figure 10-11 shows an example of a service-hosting process containing
services that have been marked as having restricted service SIDs. For
example, the Base Filtering Engine (BFE), which is responsible for applying
Windows Firewall filtering rules, is part of this hosting process because these
rules are stored in registry keys that must be protected from malicious write
access should a service be compromised. (This could allow a service exploit
to disable the outgoing traffic firewall rules, enabling bidirectional
communication with an attacker, for example.)
Figure 10-11 Service with restricted SIDs.
By blocking write access to objects that would otherwise be writable by
the service (through inheriting the permissions of the account it is running
as), restricted service SIDs solve the other side of the problem we initially
presented because users do not need to do anything to prevent a service
running in a privileged account from having write access to critical system
files, registry keys, or other objects, limiting the attack exposure of any such
service that might have been compromised.
Windows also allows for firewall rules that reference service SIDs linked
to one of the three behaviors described in Table 10-11.
Table 10-11 Network restriction rules
Scenario
Example
Restrictions
Network 
access blocked
The shell hardware 
detection service 
(ShellHWDetection).
All network 
communications are 
blocked (both incoming and 
outgoing).
Network 
access 
statically port-
restricted
The RPC service 
(Rpcss) operates on 
port 135 (TCP and 
UDP).
Network communications 
are restricted to specific 
TCP or UDP ports.
Network 
access 
dynamically 
port-restricted
The DNS service (Dns) 
listens on variable 
ports (UDP).
Network communications 
are restricted to 
configurable TCP or UDP 
ports.
The virtual service account
As introduced in the previous section, a service SID also can be set as the
owner of the token of a service running in the context of a virtual service
account. A service running with a virtual service account has fewer privileges
than the LocalService or NetworkService service types (refer to Table 10-10
for the list of privileges) and no credentials available to authenticate it
through the network. The Service SID is the token’s owner, and the token is
part of the Everyone, Users, Authenticated Users, and All Services groups.
This means that the service can read (or write, unless the service uses a
restricted SID type) objects that belong to standard users but not to high-
privileged ones belonging to the Administrator or System group. Unlike the
other types, a service running with a virtual service account has a private
profile, which is loaded by the ProfSvc service (Profsvc.dll) during service
logon, in a similar way as for regular services (more details in the “Service
logon” section). The profile is initially created during the first service logon
using a folder with the same name as the service located in the
%SystemRoot%\ServiceProfiles path. When the service’s profile is loaded,
its registry hive is mounted in the HKEY_USERS root key, under a key
named as the virtual service account’s human readable SID (starting with S-
1-5-80 as explained in the “Understanding service SIDs” experiment).
Users can easily assign a virtual service account to a service by setting the
log-on account to NT SERVICE\, where  is
the name of the service. At logon time, the Service Control Manager
recognizes that the log-on account is a virtual service account (thanks to the
NT SERVICE logon provider) and verifies that the account’s name
corresponds to the name of the service. A service can’t be started using a
virtual service account that belongs to another one, and this is enforced by
SCM (through the internal ScIsValidAccountName function). Services that
share a host process cannot run with a virtual service account.
While operating with securable objects, users can add to the object’s ACL
using the service log-on account (in the form of NT SERVICE\
), an ACE that allows or denies access to a virtual service. As
shown in Figure 10-12, the system is able to translate the virtual service
account’s name to the proper SID, thus establishing fine-grained access
control to the object from the service. (This also works for regular services
running with a nonsystem account, as explained in the previous section.)
Figure 10-12 A file (securable object) with an ACE allowing full access to
the TestService.
Interactive services and Session 0 Isolation
One restriction for services running under a proper service account, the local
system, local service, and network service accounts that has always been
present in Windows is that these services could not display dialog boxes or
windows on the interactive user’s desktop. This limitation wasn’t the direct
result of running under these accounts but rather a consequence of the way
the Windows subsystem assigns service processes to window stations. This
restriction is further enhanced by the use of sessions, in a model called
Session 0 Isolation, a result of which is that services cannot directly interact
with a user’s desktop.
The Windows subsystem associates every Windows process with a
window station. A window station contains desktops, and desktops contain
windows. Only one window station can be visible at a time and receive user
mouse and keyboard input. In a Terminal Services environment, one window
station per session is visible, but services all run as part of the hidden session
0. Windows names the visible window station WinSta0, and all interactive
processes access WinSta0.
Unless otherwise directed, the Windows subsystem associates services
running within the proper service account or the local system account with a
nonvisible window station named Service-0x0-3e7$ that all noninteractive
services share. The number in the name, 3e7, represents the logon session
identifier that the Local Security Authority process (LSASS) assigns to the
logon session the SCM uses for noninteractive services running in the local
system account. In a similar way, services running in the Local service
account are associated with the window station generated by the logon
session 3e5, while services running in the network service account are
associated with the window station generated by the logon session 3e4.
Services configured to run under a user account (that is, not the local
system account) are run in a different nonvisible window station named with
the LSASS logon identifier assigned for the service’s logon session. Figure
10-13 shows a sample display from the Sysinternals WinObj tool that shows
the object manager directory in which Windows places window station
objects. Visible are the interactive window station (WinSta0) and the three
noninteractive services window stations.
Figure 10-13 List of window stations.
Regardless of whether services are running in a user account, the local
system account, or the local or network service accounts, services that aren’t
running on the visible window station can’t receive input from a user or
display visible windows. In fact, if a service were to pop up a modal dialog
box, the service would appear hung because no user would be able to see the
dialog box, which of course would prevent the user from providing keyboard
or mouse input to dismiss it and allow the service to continue executing.
A service could have a valid reason to interact with the user via dialog
boxes or windows. Services configured using the
SERVICE_INTERACTIVE_PROCESS flag in the service’s registry key’s
Type parameter are launched with a hosting process connected to the
interactive WinSta0 window station. (Note that services configured to run
under a user account can’t be marked as interactive.) Were user processes to
run in the same session as services, this connection to WinSta0 would allow
the service to display dialog boxes and windows and enable those windows
to respond to user input because they would share the window station with
the interactive services. However, only processes owned by the system and
Windows services run in session 0; all other logon sessions, including those
of console users, run in different sessions. Therefore, any window displayed
by processes in session 0 is not visible to the user.
This additional boundary helps prevent shatter attacks, whereby a less-
privileged application sends window messages to a window visible on the
same window station to exploit a bug in a more privileged process that owns
the window, which permits it to execute code in the more privileged process.
In the past, Windows included the Interactive Services Detection service
(UI0Detect), which notified users when a service had displayed a window on
the main desktop of the WinSta0 window station of Session 0. This would
allow the user to switch to the session 0’s window station, making interactive
services run properly. For security purposes, this feature was first disabled;
since Windows 10 April 2018 Update (RS4), it has been completely
removed.
As a result, even though interactive services are still supported by the
Service Control Manager (only by setting the
HKLM\SYSTEM\CurrentControlSet\Control\Windows\NoInteractiveService
s registry value to 0), access to session 0 is no longer possible. No service
can display any window anymore (at least without some undocumented
hack).
The Service Control Manager (SCM)
The SCM’s executable file is %SystemRoot%\System32\Services.exe, and
like most service processes, it runs as a Windows console program. The
Wininit process starts the SCM early during the system boot. (Refer to
Chapter 12 for details on the boot process.) The SCM’s startup function,
SvcCtrlMain, orchestrates the launching of services that are configured for
automatic startup.
SvcCtrlMain first performs its own initialization by setting its process
secure mitigations and unhandled exception filter and by creating an in-
memory representation of the well-known SIDs. It then creates two
synchronization events: one named SvcctrlStartEvent_A3752DX and the
other named SC_AutoStartComplete. Both are initialized as nonsignaled. The
first event is signaled by the SCM after all the steps necessary to receive
commands from SCPs are completed. The second is signaled when the entire
initialization of the SCM is completed. The event is used for preventing the
system or other users from starting another instance of the Service Control
Manager. The function that an SCP uses to establish a dialog with the SCM
is OpenSCManager. OpenSCManager prevents an SCP from trying to
contact the SCM before the SCM has initialized by waiting for
SvcctrlStartEvent_A3752DX to become signaled.
Next, SvcCtrlMain gets down to business, creates a proper security
descriptor, and calls ScGenerateServiceDB, the function that builds the
SCM’s internal service database. ScGenerateServiceDB reads and stores the
contents of
HKLM\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder\List, a
REG_MULTI_SZ value that lists the names and order of the defined service
groups. A service’s registry key contains an optional Group value if that
service or device driver needs to control its startup ordering with respect to
services from other groups. For example, the Windows networking stack is
built from the bottom up, so networking services must specify Group values
that place them later in the startup sequence than networking device drivers.
The SCM internally creates a group list that preserves the ordering of the
groups it reads from the registry. Groups include (but are not limited to)
NDIS, TDI, Primary Disk, Keyboard Port, Keyboard Class, Filters, and so
on. Add-on and third-party applications can even define their own groups and
add them to the list. Microsoft Transaction Server, for example, adds a group
named MS Transactions.
ScGenerateServiceDB then scans the contents of
HKLM\SYSTEM\CurrentControlSet\Services, creating an entry (called
“service record”) in the service database for each key it encounters. A
database entry includes all the service-related parameters defined for a
service as well as fields that track the service’s status. The SCM adds entries
for device drivers as well as for services because the SCM starts services and
drivers marked as autostart and detects startup failures for drivers marked
boot-start and system-start. It also provides a means for applications to query
the status of drivers. The I/O manager loads drivers marked boot-start and
system-start before any user-mode processes execute, and therefore any
drivers having these start types load before the SCM starts.
ScGenerateServiceDB reads a service’s Group value to determine its
membership in a group and associates this value with the group’s entry in the
group list created earlier. The function also reads and records in the database
the service’s group and service dependencies by querying its
DependOnGroup and DependOnService registry values. Figure 10-14 shows
how the SCM organizes the service entry and group order lists. Notice that
the service list is sorted alphabetically. The reason this list is sorted
alphabetically is that the SCM creates the list from the Services registry key,
and Windows enumerates registry keys alphabetically.
Figure 10-14 Organization of the service database.
During service startup, the SCM calls on LSASS (for example, to log on a
service in a nonlocal system account), so the SCM waits for LSASS to signal
the LSA_RPC_SERVER_ACTIVE synchronization event, which it does when
it finishes initializing. Wininit also starts the LSASS process, so the
initialization of LSASS is concurrent with that of the SCM, and the order in
which LSASS and the SCM complete initialization can vary. The SCM
cleans up (from the registry, other than from the database) all the services
that were marked as deleted (through the DeleteFlag registry value) and
generates the dependency list for each service record in the database. This
allows the SCM to know which service is dependent on a particular service
record, which is the opposite dependency information compared to the one
stored in the registry.
The SCM then queries whether the system is started in safe mode (from
the HKLM\System\CurrentControlSet\
Control\Safeboot\Option\OptionValue registry value). This check is needed
for determining later if a service should start (details are explained in the
“Autostart services startup” section later in this chapter). It then creates its
remote procedure call (RPC) named pipe, which is named \Pipe\Ntsvcs, and
then RPC launches a thread to listen on the pipe for incoming messages from
SCPs. The SCM signals its initialization-complete event,
SvcctrlStartEvent_A3752DX. Registering a console application shutdown
event handler and registering with the Windows subsystem process via
RegisterServiceProcess prepares the SCM for system shutdown.
Before starting the autostart services, the SCM performs a few more steps.
It initializes the UMDF driver manager, which is responsible in managing
UMDF drivers. Since Windows 10 Fall Creators Update (RS3), it’s part of
the Service Control Manager and waits for the known DLLs to be fully
initialized (by waiting on the \KnownDlls\SmKnownDllsInitialized event
that’s signaled by Session Manager).
EXPERIMENT: Enable services logging
The Service Control Manager usually logs ETW events only when
it detects abnormal error conditions (for example, while failing to
start a service or to change its configuration). This behavior can be
overridden by manually enabling or disabling a different kind of
SCM events. In this experiment, you will enable two kinds of
events that are particularly useful for debugging a service change of
state. Events 7036 and 7042 are raised when a service change status
or when a STOP control request is sent to a service.
Those two events are enabled by default on server SKUs but not
on client editions of Windows 10. Using your Windows 10
machine, you should open the Registry Editor (by typing
regedit.exe in the Cortana search box) and navigate to the
following registry key:
HKLM\SYSTEM\CurrentControlSet\Control\ScEvents. If the last
subkey does not exist, you should create it by right-clicking the
Control subkey and selecting the Key item from the New context
menu).
Now you should create two DWORD values and name them
7036 and 7042. Set the data of the two values to 1. (You can set
them to 0 to gain the opposite effect of preventing those events
from being generated, even on Server SKUs.) You should get a
registry state like the following one:
Restart your workstation, and then start and stop a service (for
example, the AppXSvc service) using the sc.exe tool by opening an
administrative command prompt and typing the following
commands:
Click here to view code image
sc stop AppXSvc
sc start AppXSvc
Open the Event Viewer (by typing eventvwr in the Cortana
search box) and navigate to Windows Logs and then System. You
should note different events from the Service Control Manager
with Event ID 7036 and 7042. In the top ones, you should find the
stop event generated by the AppXSvc service, as shown in the
following figure:
Note that the Service Control Manager by default logs all the
events generated by services started automatically at system
startup. This can generate an undesired number of events flooding
the System event log. To mitigate the problem, you can disable
SCM autostart events by creating a registry value named
EnableAutostartEvents in the
HKLM\System\CurrentControlSet\Control key and set it to 0 (the
default implicit value is 1 in both client and server SKUs). As a
result, this will log only events generated by service applications
when starting, pausing, or stopping a target service.
Network drive letters
In addition to its role as an interface to services, the SCM has another totally
unrelated responsibility: It notifies GUI applications in a system whenever
the system creates or deletes a network drive-letter connection. The SCM
waits for the Multiple Provider Router (MPR) to signal a named event,
\BaseNamedObjects\ScNetDrvMsg, which MPR signals whenever an
application assigns a drive letter to a remote network share or deletes a
remote-share drive-letter assignment. When MPR signals the event, the SCM
calls the GetDriveType Windows function to query the list of connected
network drive letters. If the list changes across the event signal, the SCM
sends a Windows broadcast message of type WM_DEVICECHANGE. The
SCM uses either DBT_DEVICEREMOVECOMPLETE or
DBT_DEVICEARRIVAL as the message’s subtype. This message is primarily
intended for Windows Explorer so that it can update any open computer
windows to show the presence or absence of a network drive letter.
Service control programs
As introduced in the “Service applications” section, service control programs
(SCPs) are standard Windows applications that use SCM service
management functions, including CreateService, OpenService, StartService,
ControlService, QueryServiceStatus, and DeleteService. To use the SCM
functions, an SCP must first open a communications channel to the SCM by
calling the OpenSCManager function to specify what types of actions it
wants to perform. For example, if an SCP simply wants to enumerate and
display the services present in the SCM’s database, it requests enumerate-
service access in its call to OpenSCManager. During its initialization, the
SCM creates an internal object that represents the SCM database and uses the
Windows security functions to protect the object with a security descriptor
that specifies what accounts can open the object with what access
permissions. For example, the security descriptor indicates that the
Authenticated Users group can open the SCM object with enumerate-service
access. However, only administrators can open the object with the access
required to create or delete a service.
As it does for the SCM database, the SCM implements security for
services themselves. When an SCP creates a service by using the
CreateService function, it specifies a security descriptor that the SCM
associates internally with the service’s entry in the service database. The
SCM stores the security descriptor in the service’s registry key as the
Security value, and it reads that value when it scans the registry’s Services
key during initialization so that the security settings persist across reboots. In
the same way that an SCP must specify what types of access it wants to the
SCM database in its call to OpenSCManager, an SCP must tell the SCM
what access it wants to a service in a call to OpenService. Accesses that an
SCP can request include the ability to query a service’s status and to
configure, stop, and start a service.
The SCP you’re probably most familiar with is the Services MMC snap-in
that’s included in Windows, which resides in
%SystemRoot%\System32\Filemgmt.dll. Windows also includes Sc.exe
(Service Controller tool), a command-line service control program that we’ve
mentioned multiple times.
SCPs sometimes layer service policy on top of what the SCM implements.
A good example is the timeout that the Services MMC snap-in implements
when a service is started manually. The snap-in presents a progress bar that