      "layers": {
        ...
        "icmp_raw": ["0800597300010001ffd8ffe000104a46494600010100000100010000ffdb00430005030404040305", 34, 40, 0, 1],
        "icmp": {
          "icmp.type_raw": ["08", 34, 1, 0, 4],
          "icmp.type": "8",
          "icmp.code_raw": ["00", 35, 1, 0, 4],
          "icmp.code": "0",
          "icmp.checksum_raw": ["5973", 36, 2, 0, 5],
          "icmp.checksum": "0x00005973",
          "icmp.checksum.status": "1",
          "icmp.ident_raw": ["0001", 38, 2, 0, 5],
          "icmp.ident": "1",
          "icmp.ident_raw": ["0001", 38, 2, 0, 5],
          "icmp.ident": "256",
          "icmp.seq_raw": ["0001", 40, 2, 0, 5],
          "icmp.seq": "1",
          "icmp.seq_le_raw": ["0001", 40, 2, 0, 5],
          "icmp.seq_le": "256",
          "data_raw": ["ffd8ffe000104a46494600010100000100010000ffdb00430005030404040305", 42, 32, 0, 1],
          "data": {
            "data.data_raw": ["ffd8ffe000104a46494600010100000100010000ffdb00430005030404040305", 42, 32, 0, 30],
            "data.data": "ff:d8:ff:e0:00:10:4a:46:49:46:00:01:01:00:00:01:00:01:00:00:ff:db:00:43:00:05:03:04:04:04:03:05",
            "data.len": "32"
          }
        }
      }
    }
root@kali:/media/sf_CTFs/hoshen/2# tshark -nr Challenge2.pcapng  -Y 'frame.number==126' -x
Running as user "root" and group "root". This could be dangerous.
0000  00 0c 29 53 4c a5 48 0f cf 50 3d f1 08 00 45 00   ..)SL.H..P=...E.
0010  00 3c 00 01 00 00 40 01 66 9f 0a 00 00 18 0a 00   . ping_data.json
Running as user "root" and group "root". This could be dangerous.
```
Now let's concatenate the data into a big binary:
```python
import json
with open("ping_data.json") as f, open("output.bin", "wb") as o:
    json_data = json.loads(f.read())
    for packet in json_data:
        data = packet["_source"]["layers"]["icmp"]["data"]["data.data"].replace(":", "")
        o.write(bytes.fromhex(data))
```
After running it:
```console
root@kali:/media/sf_CTFs/hoshen/2# file output.bin
output.bin: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 1093x615, frames 3
root@kali:/media/sf_CTFs/hoshen/2# foremost output.bin
Processing: output.bin
|*|
root@kali:/media/sf_CTFs/hoshen/2# cat output/audit.txt
Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus
Audit File
Invocation: foremost output.bin
Output directory: /media/sf_CTFs/hoshen/2/output
Configuration file: /etc/foremost.conf
------------------------------------------------------------------
File: output.bin
Length: 266 KB (273064 bytes)
Num      Name (bs=512)         Size      File Offset     Comment
0:      00000000.jpg         162 KB               0
1:      00000325.jpg           2 KB          166799
2:      00000330.jpg          34 KB          168991
3 FILES EXTRACTED
jpg:= 3
------------------------------------------------------------------
```
We got three JPEG files. Two of them were unrelated, but the third one seemed important:
![](images/00000330.jpg)
`foremost` works with file signatures, and is able to extract files from within other files. Let's check if the binary file is composed only of the three files we've extracted:
```console
root@kali:/media/sf_CTFs/hoshen/2# stat output.bin output/jpg/* | egrep "File|Size"
  File: output.bin
  Size: 273064          Blocks: 536        IO Block: 4096   regular file
  File: output/jpg/00000000.jpg
  Size: 166799          Blocks: 328        IO Block: 4096   regular file
  File: output/jpg/00000325.jpg
  Size: 2192            Blocks: 8          IO Block: 4096   regular file
  File: output/jpg/00000330.jpg
  Size: 34844           Blocks: 72         IO Block: 4096   regular file
root@kali:/media/sf_CTFs/hoshen/2# echo $((273064 - (166799 + 2192 + 34844) ))
69229
```
It looks like there are 69229 bytes which weren't extracted as part of the images. Let's investigate that:
```console
root@kali:/media/sf_CTFs/hoshen/2# cmp -l output.bin output/jpg/00000000.jpg
cmp: EOF on output/jpg/00000000.jpg after byte 166799
root@kali:/media/sf_CTFs/hoshen/2# cmp -l --ignore-initial=166799:0 output.bin output/jpg/00000325.jpg
cmp: EOF on output/jpg/00000325.jpg after byte 2192
root@kali:/media/sf_CTFs/hoshen/2# cmp -l --ignore-initial=$((166799+2192)):0 output.bin output/jpg/00000330.jpg
cmp: EOF on output/jpg/00000330.jpg after byte 34844
```
So it looks like `output.bin` contains all three files one after the other, and then some extra `69229` bytes. Let's extract them:
```console
root@kali:/media/sf_CTFs/hoshen/2# dd if=output.bin of=output/jpg/extra.bin bs=1 count=69229 skip=$((166799 + 2192 + 34844))
69229+0 records in
69229+0 records out
69229 bytes (69 kB, 68 KiB) copied, 11.4035 s, 6.1 kB/s
```
What did we get?
```console
root@kali:/media/sf_CTFs/hoshen/2/output/jpg# file extra.bin
extra.bin: data
root@kali:/media/sf_CTFs/hoshen/2/output/jpg# xxd -g 1 extra.bin | head
00000000: b1 96 b1 ae 4e 5e 04 08 07 08 4e 4f 4f 4f 4e 2e  ....N^....NOOON.
00000010: 4e 2e 4e 4e b1 af 5e ba 0b 36 27 28 4e 4e 03 03  N.NN..^..6'(NN..
00000020: 4e 64 4e 4e 4e 46 4e 4a 4f 75 4e 4c 4e 4e 4e 40  NdNNNFNJOuNLNNN@
00000030: 4e 4e 46 04 c9 27 4e 4a 4e 4e 4e 4f 4e 4e 46 16  NNF..'NJNNNONNF.
00000040: d2 d3 4e 4f 4e 4e 4e 52 4e 4e 5e 9e a4 52 4e 49  ..NONNNRNN^..RNI
00000050: 4e 4e 46 42 4e 4e 4e 70 4e 4e 4e 4e 52 a4 4e 4e  NNFBNNNpNNNNR.NN
00000060: 4e 46 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e  NFNNNNNNNNNNNNNN
00000070: 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e  NNNNNNNNNNNNNNNN
00000080: 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e  NNNNNNNNNNNNNNNN
00000090: 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e  NNNNNNNNNNNNNNNN
```
Nothing much. Well, the hint says "JFIF" and "XOR", so should we XOR this file to receive a JPEG file?
A [JEPG header](https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format) is defined to start with:
```
FF D8 FF E0 ?? ?? 4A 46 49 46 00
```
To find the key, let's XOR the expected values with the current values:
```python
>>> current = map(lambda x: int(x, 16), "b1 96 b1 ae".split(' '))
>>> expected = map(lambda x: int(x, 16), "FF D8 FF E0".split(' '))
>>> for a, b in zip(current, expected):
...     print("{:x} ".format(a^b), end='')
...
4e 4e 4e 4e
```
This looks like a single-byte XOR cipher with the key of `0x4e`. Let's use it to decrypt the file:
```python
with open("extra.bin", "rb") as f, open("extra_out.bin", "wb") as o:
    key = 0x4e
    input_data = f.read()
    output_data = bytearray()
    for b in input_data:
        output_data.append(b ^ key)
    o.write(output_data)
```
Output:
```console
root@kali:/media/sf_CTFs/hoshen/2/output/jpg# python3 xor.py
root@kali:/media/sf_CTFs/hoshen/2/output/jpg# file extra_out.bin
extra_out.bin: JPEG image data, JFIF standard 1.01, resolution (DPI), density 96x96, segment length 16, Exif Standard: [TIFF image data, big-endian, direntries=4], baseline, precision 8, 1323x746, frames 3
root@kali:/media/sf_CTFs/hoshen/2/output/jpg# mv extra_out.bin extra_out.jpg
```
We got a JPEG file!
![](images/extra_out.jpg)
The IP is stated on the figure's mask: `13.67.133.176`.