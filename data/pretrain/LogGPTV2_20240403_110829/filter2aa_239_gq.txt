        OrderBy(sc => sc.DisplayName).
        Select(sc => new ServiceControllerInfo(sc));
    }
在列表框中获得所有服务的RefreshServiceList（）方法在ServiceControlWindow类的
构造函数中调用。这个构造函数还为按钮的Click事件定义了事件处理程序：
    public ServiceControlWindow()
    {
     InitializeComponent();
     RefreshServiceList();
    }
现在就可以定义XAML代码，把信息绑定到控件上。首先，为显示在列表框中的信息
定义一个DataTemplate。列表框包含一个标签，其Content属性绑定到数据源的
DisplayName属性上。在绑定ServiceControllerInfo对象数组时，用ServiceControllerInfo类
定义DisplayName属性（代码文件ServiceControlWPF/MainWindow.xaml）：
放在窗口左边的列表框将ItemsSource属性设置为{Binding}。这样，显示在列表中的
数据就从RefreshServiceList（）方法设置的DataContext属性中获得。ItemTemplate属性引
用了前面用DataTemplate定义的资源listTemplate。把IsSynchronizedWithCurrentItem属性设
置为True，从而使位于同一个窗口中的文本框和按钮控件绑定到列表框中当前选择的项
上。
为了区分按钮控件，使之分别用于启动、停止、暂停、继续服务，定义了下面的枚举
（代码文件ServiceControlWPF/ButtonState.cs）：
    public enum ButtonState
    {
      Start,
      Stop,
      Pause,
      Continue
    }
对于TextBlock控件，Text属性绑定到ServiceControllerInfo实例的对应属性上。按钮控
件是启用还是禁用也从数据绑定中定义，即把IsEnabled属性绑定到ServiceControllerInfo实
例的对应属性上，该属性返回一个布尔值。给按钮的Tag属性赋予前面定义的ButtonState
枚举的一个值，以便在同一个处理程序方法OnServiceCommand中区分按钮（代码文件
ServiceControlWPF/MainWindow.xaml）：
2．服务的控制
使用ServiceController类，也可以把控制请求发送给服务，该类的方法如表39-5所示。
表39-5
方法
说明
Start（）
Start（）方法告诉SCM应启动服务。在服务程序示例中，调
用了OnStart（）方法
Stop（）
如果CanStop属性在服务类中的值是true，则在SCM的帮助
下，Stop（）方法调用服务程序中的OnStop（）方法
Pause（）
如果CanPauseAndContinue属性的值是true，则Pause（）方
法调用OnPause（）方法
Continue（）
如果CanPauseAndContinue属性的值是true，则Continue（）
方法调用OnContinue（）方法
ExecuteCommand（）
使用ExecuteCommand（）可以把定制的命令发送给服务
下面就是控制服务的代码。因为启动、停止、挂起和暂停服务的代码是相似的，所以
仅为这4个按钮使用一个处理程序（代码文件ServiceControlWPF/MainWindow.
xaml.cs）：
    protected void OnServiceCommand(object sender, RoutedEventArgs e)
    {
      Cursor oldCursor = this.Cursor;
      try
      {
        this.Cursor = Cursors.Wait;
        ButtonState currentButtonState = (ButtonState)(sender as Button).Tag;
        var si = listBoxServices.SelectedItem as ServiceControllerInfo;
        if (currentButtonState == ButtonState.Start)
        {
        si.Controller.Start();
        si.Controller.WaitForStatus(ServiceControllerStatus.Running,
          TimeSpan.FromSeconds(10));
        }
        else if (currentButtonState == ButtonState.Stop)
        {
        si.Controller.Stop();
        si.Controller.WaitForStatus(ServiceControllerStatus.Stopped,
        TimeSpan.FromSeconds(10));
        }
        else if (currentButtonState == ButtonState.Pause)
        {
        si.Controller.Pause();
        si.Controller.WaitForStatus(ServiceControllerStatus.Paused,
          TimeSpan.FromSeconds(10));
        }
        else if (currentButtonState == ButtonState.Continue)
        {
        si.Controller.Continue();
        si.Controller.WaitForStatus(ServiceControllerStatus.Running,
          TimeSpan.FromSeconds(10));
        }
        int index = listBoxServices.SelectedIndex;
        RefreshServiceList();
        listBoxServices.SelectedIndex = index;
      }
      catch (System.ServiceProcess.TimeoutException ex)
      {
        MessageBox.Show(ex.Message, "Timout Service Controller",
        MessageBoxButton.OK, MessageBoxImage.Error);
      }
      catch (InvalidOperationException ex)
      {
        MessageBox.Show(String.Format("{0} {1}", ex.Message,
        ex.InnerException ! = null ? ex.InnerException.Message:
          String.Empty), MessageBoxButton.OK, MessageBoxImage.Error);
      }
      finally
      {
        this.Cursor = oldCursor;
      }
    }
    protected void OnExit(object sender, RoutedEventArgs e) =>
      Application.Current.Shutdown();
    protected void OnRefresh_Click(object sender, RoutedEventArgs e) =>
      RefreshServiceList();
由于控制服务要花费一定的时间，因此光标在第一条语句中切换为等待光标。然后，
根据所按下的按钮调用ServiceController类的方法。使用WaitForStatus（）方法，表明用户
正在等待检查服务把状态改为被请求的值，但是我们最多等待10秒。在10秒之后，就会刷
新列表框中的信息，并把选中的索引设置为与以前相同的值，接着显示这个服务的新状
态。
因为应用程序需要管理权限，大多数服务都需要管理权限来启动和停止，所以把一个
应用程序清单添加到项目中，并把requestedExecutionLevel属性设置为
requireAdministrator（代码文件Service-ControlWPF/app.manifest）。
运行应用程序的结果如图39-15所示。
图39-15
39.5 故障排除和事件日志
服务方面的故障排除与其他类型应用程序的故障排除并不相同。本节将讨论一些服务
问题、交互式服务特有的问题和事件日志。
创建服务最好的方式就是在实际创建服务之前，先创建一个具有所需功能的程序集和
一个测试客户端，以便进行正常的调试和错误处理。只要应用程序运行，就可以使用该程
序集创建服务。当然，对于服务，仍然存在下列问题：
● 在服务中，错误信息不显示在消息框中（除了运行在客户端系统上的交互式服务之
外），而是使用事件日志服务把错误写入事件日志中。当然，在使用服务的客户
端应用程序中，可以显示一个消息框，以通知用户出现了错误。
● 虽然服务不能从调试器中启动，但是调试器可以与正在运行的服务进程联系起来。
打开带有服务源代码的解决方案，并且设置断点。从Visual Studio的Debug菜单中
选择Processes命令，关联正在运行的服务进程。
● 性能监视器可以用于监控服务的行为。可以把自己的性能对象添加到服务中，这样
可以添加一些有用的信息，以便进行调试。例如，通过Quote服务，可以建立一个
对象，让它给出返回的引用总数和初始化花费的时间等。
把事件添加到事件日志中，服务就可以报告错误和其他信息。当AutoLog属性设置为
true时，从ServiceBase类中派生的服务类可以自动把事件写入日志中。ServiceBase类检查
AutoLog属性，并且在启动、停止、暂停和继续请求时编写日志条目。
图39-16是服务中的一个日志条目示例。
图39-16
  注意： 事件日志和如何编写自定义事件的内容详见第20章。
39.6 小结
本章讨论了Windows服务的体系结构和如何使用.NET Framework创建Windows服务。
应用程序可以与Windows服务一起在系统启动时自动启动，也可以把具有特权的System账
户用作服务的用户。Windows服务从主函数、service-main函数和处理程序中创建。本章还
介绍了与Windows服务相关的其他程序，如服务控制程序和服务安装程序。
.NET Framework对Windows服务提供了很好的支持。创建、控制和安装服务所需的代
码都封装在System.ServiceProcess名称空间的.NET Framework类中。从ServiceBase类中派
生一个类，就可以重写暂停、继续或停止服务时调用的方法。对于服务的安装，
ServiceProcessInstaller类和ServiceInstaller类可以处理服务所需的所有注册表配置。还可以
使用ServiceController类控制和监控服务。
第40章介绍ASP.NET Core 1.0，这个技术使用Web服务器，一般运行在Windows服务
中（假定服务器在Windows操作系统上使用）。
第40章
ASP.NET Core
本章要点
● 了解ASP.NET Core 1.0和Web技术
● 使用静态内容
● 处理HTTP请求和响应
● 使用依赖注入和ASP.NET
● 定义简单的定制路由
● 创建中间件组件
● 使用会话管理状态
● 读取配置设置
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码包含的示例文件是WebSampleApp。
40.1 ASP.NET Core 1.0
在走过15年之后，ASP.NET Core 1.0完全重写了ASP.NET。它的特色在于采用模块化
编程，完全开源，是轻量级的，最适合用在云上，可用于非微软平台。
完全重写的ASP.NET有很多优势，但这也意味着重写基于老版本ASP.NET的现有Web
应用程序。有必要把现有的Web应用程序重写为ASP.NET Core 1.0版本吗？下面试着回答
这个问题。
ASP.NET Web Forms不再是ASP.NET Core 1.0的一部分。但是，在Web应用程序中包
括这项技术并不意味着必须重写它们。仍然可以用完整框架维护用ASP.NET Web Forms编
写的旧应用程序。在最新版本ASP.NET 4.6中，ASP.NET Web Forms甚至有一些增强，如
异步的模型绑定。
ASP.NET MVC仍然是ASP.NET Core 1.0的一部分。因为ASP.NET MVC 6已经完全重
写，所以需要修改用ASP.NET MVC 5或旧版本编写的Web应用程序，把它们带到新的应
用程序堆栈中。
将ASP.NET Web Forms转换为ASP.NET MVC可能需要做很多工作。ASP.NET Web
Forms从开发人员手中抽象出了HTML和JavaScript。使用ASP.NET Web Forms，就没有必
要了解HTML和JavaScript。只需要使用服务器端控件和C#代码。服务器端控件返回HTML
和JavaScript。此编程模型类似于旧的Windows Forms编程模型。使用ASP.NET MVC，开
发人员需要了解HTML和JavaScript。ASP.NET 
MVC基于模型-视图-控制器（MVC）模
式，便于进行单元测试。因为ASP.NET Web Forms和ASP.NET MVC基于完全不同的体系
结构模式，所以把ASP.NET Web Forms应用程序迁移到ASP.NET MVC是一个艰巨的任
务。承担这个任务之前，应该创建一个清单，列出解决方案仍使用旧技术的优缺点，并与
新技术的优缺点进行比较。未来多年仍可以使用ASP.NET Web Forms。
  注意： 网站http://www.cninnoation.com最初用ASP.NET Web Forms创建。这
个用ASP.NET MVC早期版本创建的网站被转换到这项新技术堆栈中。因为原来的网站
使用了很多独立的组件，抽象出了数据库和服务代码，所以工作量不大，很快就完成
了。可以在ASP.NET MVC中直接使用数据库和服务。另一方面，如果使用Web Forms
控件访问数据库，而不是使用自己的控件，工作量就很大。
  注意： 本书不介绍旧技术ASP.NET Web Forms，也不讨论ASP.NET MVC
5。本书主要论述新技术；因此对于Web应用程序，这些内容基于ASP.NET 
5和
ASP.NET MVC 6。这些技术应该用于新Web应用程序。如果需要维护旧应用程序，应
该阅读本书的旧版，如《C#高级编程（第9版）——C# 5.0 & .NET 4.5.1》，其中介绍
了ASP.NET 4.5、ASP.NET Web Forms 4.5和ASP.NET MVC 5。
本章介绍ASP.NET Core 1.0的基础知识。第41章解释ASP.NET MVC 6的用法，这个
框架建立在ASP.NET Core 1.0的基础之上。
40.2 Web技术
在介绍ASP.NET的基础知识之前，本节讨论创建Web应用程序时必须了解的核心Web
技术：HTML、CSS、JavaScript和jQuery。
40.2.1 HTML
HTML是由Web浏览器解释的标记语言。它定义的元素显示各种标题、表格、列表和
输入元素，如文本框和组合框。
2014年10月以来，HTML5已经成为W3C推荐标准（http://w3.org/TR/html5），所有主
流浏览器都提供了它。有了HTML5的特性，就不再需要一些浏览器插件（如Flash和
Silverlight）了，因为插件可以执行的操作现在都可以直接使用HTML和JavaScript完成。
当然，可能仍然需要Flash和Silverlight，因为不是所有的网站都转而使用新技术，或用户
可能仍然使用不支持HTML5的旧浏览器版本。
HTML5添加的新语义元素可以由搜索引擎使用，更好地分析站点。canvas元素可以
动态使用2D图形和图像，video和audio元素使object元素过时了。由于最近添加的媒体源
（http://w3c.github.io/media-source），自适应流媒体也由HTML提供；此前这是Silverlight
的一个优势。
HTML5还为拖放操作、存储器、Web套接字等定义了API。
40.2.2 CSS
HTML定义了Web页面的内容，CSS定义了其外观。例如，在HTML的早期，列表项
标记定义列表元素在显示时是否应带有圆、圆盘或方框。目前，这些信息已从HTML
中完全删除，而放在CSS中。
在CSS样式中，HTML元素可以使用灵活的选择器来选择，还可以为这些元素定义样
式。元素可以通过其ID或名称来选择，也可以定义CSS类，从HTML代码中引用。在CSS
的新版本中，可以定义相当复杂的规则，来选择特定的HTML元素。
自Visual Studio 2015起，Web项目模板使用Twitter Bootstrap，这是CSS和HTML约定
的集合。这使得我们很容易采用不同的外观，下载易用的模板。文档和基本模板可参阅
www.getbootstrap.com。