挑战:  
- 已经发生的突发事件, 如何分析其原因? 哪里有 数据、案例、逻辑 ?    
PG 解决方案:  
- 性能洞察, 采样点(平均活跃会话数、等待事件、SQL细粒度)  
- stats 统计快照  
- auto_explain, 设置阈值, 超出记录执行和消耗详情.   
- 锁等待日志记录.   
参考:  
[《PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]》](../202104/20210415_01.md)    
[《PostgreSQL 函数调试、诊断、优化 & auto_explain & plprofiler》](../201611/20161121_02.md)    
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)      
https://www.postgresql.org/docs/14/auto-explain.html  
https://www.postgresql.org/docs/devel/runtime-config-locks.html  
视频回放:  https://www.bilibili.com/video/BV1sb4y1C72E/   
#### 33、重新发现PostgreSQL之美 - 33 刘姥姥进大观园
场景:  
很多使用JSON类型的场景  
- 敏捷开发  
- 游戏、多媒体、教育、SAAS等行业的半结构数据  
- 离线业务的终端数据上传, 格式或标准没有定义  
挑战:  
- JSON内容查询慢  
- JSON内容查询、部分内容的更新、删除麻烦,   
- 更新的隔离性和原子性要求高, 怎么实现?  
- JSON+其他字段组合搜索的问题怎么解决?  
PG解决方案:  
- jsquery语法支持  
- gin index  
- partial index  
- btree_gin   
参考:    
https://www.postgresql.org/docs/devel/datatype-json.html  
https://www.postgresql.org/docs/devel/functions-json.html  
https://www.postgresql.org/docs/devel/btree-gin.html  
https://www.postgresql.org/docs/devel/indexes-partial.html  
视频回放: https://www.bilibili.com/video/BV15v411H7Sn/    
#### 34、重新发现PostgreSQL之美 - 34 月老 - 撮合系统    
场景:   
- 交易撮合系统  
挑战:   
- 有时间优先约束, 单只股票只能串行操作, 容易导致交易拥堵的瓶颈.   
- 一笔交易涉及多份, 例如200股, 存在部分交易, 部分撤单的需求.   
- 买卖双方的数量可能不匹配, 一笔撮合交易可能涉及多方.   
- 隐蔽问题: 价格挂太高或太低, 无法撮合时, 会导致资源浪费. 类似vacuum, 有长事务, 导致垃圾不能回收, 但是依旧要触发扫描.   
- 业务层实现撮合的挑战: 与数据库需要进行很多轮交互, 并且需要在事务中完成, 事务RT和死锁问题增加. 性能弱.   
PG解决方案:   
- 业务逻辑放在函数内完成, 大幅降低应用与数据库交互, 降低RT.   
- advisory lock, skip locked等技术手段避免死锁.   
视频回放: https://www.bilibili.com/video/BV1DV411s74x/    
#### 35、重新发现PostgreSQL之美 - 35 茅山道士 - rdkit 化学分析   
场景:  
- 化学计算  
- 医药行业  
挑战:  
- 化学键、分子式等非结构化数据在数据库中不好表达. 如何解决高效存储.  
- 不好表达也不好查询, 例如在化学指纹、化合物相似搜索、化合物分裂和溶解性包含等常见查询.  
PG 解决方案:  
- rdkit 插件  
- 新增指纹类型、mol类型  
- 新增了分子式、指纹等类型对应运算符、索引、排序能力等  
[《PostgreSQL 化学分析 - RDKit Cartridge 1 - 环境部署》](../201911/20191125_01.md)  
[《PostgreSQL 化学插件 - pgchem_tigress molecules rdkit》](../202003/20200326_06.md)  
视频回放: https://www.bilibili.com/video/BV1og411g7fN/  
#### 36、重新发现PostgreSQL之美 - 36 方世玉 安全第一 
场景:  
数据安全法颁布.   
行业安全合规, 敏感信息加密: 手机号码、密码、邮箱、账号、资金等个人隐私加密  
挑战:  
防谁? 网络层窃取、内部工作人员窃取(DBA、SA)、机房或数据库服务方窃取  
数据加密后: 不能被检索、不能排序. 使用不方便  
PG 解决方案:  
- SSL   
- pgcrypto插件:  
    - 加密效率、加密强度自由, 不可逆(静态、动态)、可逆(对称、非对称)  
- RLS   
- RDS PG sgx 全加密数据库, 防一切问题: 网络、内部人员、机房或数据库服务方窃取  
参考:  
[《PostgreSQL 数据库安全指南 - 以及安全合规》](../201506/20150601_01.md)    
[《PG 目前的两种数据库用户密码存储方法, 建议选择scram-sha-256.》](../202106/20210625_02.md)    
[《PostgreSQL pgcrypto 对称加密、非对称加密用法介绍》](../201802/20180226_03.md)    
https://help.aliyun.com/document_detail/144156.html  
https://www.postgresql.org/docs/14/pgcrypto.html#PGCRYPTO-ICFC-TABLE  
http://www.npc.gov.cn/npc/c30834/202106/7c9af12f51334a73b56d7938f99a788a.shtml  
[《为什么校园贷、注销校园贷、刷单、杀猪盘等电信诈骗这么猖獗? - 数据库安全解决方案(SSL)》](../202105/20210511_01.md)    
[《[珍藏级] PostgreSQL ssl 证书配置 - 防止中间攻击者 - 以及如何使用证书无密码登录配置cert》](../202006/20200619_01.md)    
[《EnterpriseDB & PostgreSQL RLS & Oracle VPD》](../201602/20160203_03.md)    
视频回放: https://www.bilibili.com/video/BV1gV411x7QY/      
#### 37、重新发现PostgreSQL之美 - 37 三焦者,决渎之官,水道出焉. FDW 
场景:   
多数据源的数据引用和互通. 数据流通产生价值.   
挑战:   
数据源多, 需要写大量ETL, 费研发资源, 开发成本高、数据重复存放, 存在ETL延迟等问题.   
PG 解决方案:   
FDW, 在PG内可以直接读写外部数据源. FDW为开放式接口, 可以对接一切数据源: 数据库、文件、NOSQL、LDAP、WWW、bigdata等.   
统一SQL访问, 使用成本大幅降低, 会写SQL就可以访问一切数据源, 而且支持pushdown, 任意数据源包括本地表的相互JOIN等运算.   
参考:  
[《从人类河流文明 洞察 数据流动的重要性》](../201707/20170706_01.md)    
https://wiki.postgresql.org/wiki/Foreign_data_wrappers  
视频回放: https://www.bilibili.com/video/BV1xg41137Wf/  
#### 38、重新发现PostgreSQL之美 - 38 肝者,将军之官,谋虑出焉. 优化器  
场景:    
- HTAP业务, 企业级OLTP业务.    
- ORM(自动生成SQL, 无法优化, 数十表的SQL JOIN)    
挑战:    
- 优化器弱无法选择最佳执行路径,     
- 统计信息不及时, 无法得出最佳执行计划,     
- 环境: ssd, disk 多种不同硬件组成的表空间, 怎么才能算出最佳代价    
- 执行器弱支持的数据扫描、计算方法少的可怜.     
PG 解决方案:    
- 优化器强大    
- 执行器强大    
- 支持扩展执行器    
- 支持并行计算、JIT   
参考:  
[《重新发现PostgreSQL之美 - 38 肝者,将军之官,谋虑出焉. 优化器》](../202106/20210630_01.md)    
视频回放: https://www.bilibili.com/video/BV1Uw411o7t9/    
#### 39、重新发现PostgreSQL之美 - 39 谁动了我的奶酪
场景:   
- 关键数据被误操作或篡改怎么办?    
挑战:   
- 怎么发现和定位?   
- 怎么快速通知?   
- 能不能记下前后变化差异?   
- 能不能回退?   
- 采取什么行动?   
- 能不能限制?   
- 能不能藏起来, 基于行或者列?   
PG 解决方案:   
- 发现并记下来  
- 可回退  
- 告状  
- 拒绝执行  