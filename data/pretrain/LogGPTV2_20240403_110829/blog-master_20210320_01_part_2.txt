 127 SELECT SUBSTR(f1, 200, 5) FROM cmdata2;    
 128  substr     
 129 --------    
 130  8f14e    
 131 (1 row)    
 132     
 133 DROP TABLE cmdata2;    
 134 --test column type update varlena/non-varlena    
 135 CREATE TABLE cmdata2 (f1 int);    
 136 \d+ cmdata2    
 137                                          Table "public.cmdata2"    
 138  Column |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description     
 139 --------+---------+-----------+----------+---------+---------+-------------+--------------+-------------    
 140  f1     | integer |           |          |         | plain   |             |              |     
 141     
 142 ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE varchar;    
 143 \d+ cmdata2    
 144                                               Table "public.cmdata2"    
 145  Column |       Type        | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
 146 --------+-------------------+-----------+----------+---------+----------+-------------+--------------+-------------    
 147  f1     | character varying |           |          |         | extended | pglz        |              |     
 148     
 149 ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE int USING f1::integer;    
 150 \d+ cmdata2    
 151                                          Table "public.cmdata2"    
 152  Column |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description     
 153 --------+---------+-----------+----------+---------+---------+-------------+--------------+-------------    
 154  f1     | integer |           |          |         | plain   |             |              |     
 155     
 156 --changing column storage should not impact the compression method    
 157 --but the data should not be compressed    
 158 ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE varchar;    
 159 \d+ cmdata2    
 160                                               Table "public.cmdata2"    
 161  Column |       Type        | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
 162 --------+-------------------+-----------+----------+---------+----------+-------------+--------------+-------------    
 163  f1     | character varying |           |          |         | extended | pglz        |              |     
 164     
 165 ALTER TABLE cmdata2 ALTER COLUMN f1 SET STORAGE plain;    
 166 \d+ cmdata2    
 167                                               Table "public.cmdata2"    
 168  Column |       Type        | Collation | Nullable | Default | Storage | Compression | Stats target | Description     
 169 --------+-------------------+-----------+----------+---------+---------+-------------+--------------+-------------    
 170  f1     | character varying |           |          |         | plain   | pglz        |              |     
 171     
 172 INSERT INTO cmdata2 VALUES (repeat('123456789', 800));    
 173 SELECT pg_column_compression(f1) FROM cmdata2;    
 174  pg_column_compression     
 175 -----------------------    
 176      
 177 (1 row)    
 178     
 179 -- test compression with materialized view    
 180 CREATE MATERIALIZED VIEW mv(x) AS SELECT * FROM cmdata1;    
 181 \d+ mv    
 182                                     Materialized view "public.mv"    
 183  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
 184 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
 185  x      | text |           |          |         | extended | pglz        |              |     
 186 View definition:    
 187  SELECT cmdata1.f1 AS x    
 188    FROM cmdata1;    
 189     
 190 SELECT pg_column_compression(f1) FROM cmdata1;    
 191  pg_column_compression     
 192 -----------------------    
 193  lz4    
 194  lz4    
 195 (2 rows)    
 196     
 197 SELECT pg_column_compression(x) FROM mv;    
 198  pg_column_compression     
 199 -----------------------    
 200  lz4    
 201  lz4    
 202 (2 rows)    
 203     
 204 -- test compression with partition    
 205 CREATE TABLE cmpart(f1 text COMPRESSION lz4) PARTITION BY HASH(f1);    
 206 CREATE TABLE cmpart1 PARTITION OF cmpart FOR VALUES WITH (MODULUS 2, REMAINDER 0);    
 207 CREATE TABLE cmpart2(f1 text COMPRESSION pglz);    
 208 ALTER TABLE cmpart ATTACH PARTITION cmpart2 FOR VALUES WITH (MODULUS 2, REMAINDER 1);    
 209 INSERT INTO cmpart VALUES (repeat('123456789', 1004));    
 210 INSERT INTO cmpart VALUES (repeat('123456789', 4004));    
 211 SELECT pg_column_compression(f1) FROM cmpart1;    
 212  pg_column_compression     
 213 -----------------------    
 214  lz4    
 215 (1 row)    
 216     
 217 SELECT pg_column_compression(f1) FROM cmpart2;    
 218  pg_column_compression     
 219 -----------------------    
 220  pglz    
 221 (1 row)    
 222     
 223 -- test compression with inheritence, error    
 224 CREATE TABLE cminh() INHERITS(cmdata, cmdata1);    
 225 NOTICE:  merging multiple inherited definitions of column "f1"    
 226 ERROR:  column "f1" has a compression method conflict    
 227 DETAIL:  pglz versus lz4    
 228 CREATE TABLE cminh(f1 TEXT COMPRESSION lz4) INHERITS(cmdata);    
 229 NOTICE:  merging column "f1" with inherited definition    
 230 ERROR:  column "f1" has a compression method conflict    
 231 DETAIL:  pglz versus lz4    
 232 -- test default_toast_compression GUC    
 233 SET default_toast_compression = '';    
 234 ERROR:  invalid value for parameter "default_toast_compression": ""    
 235 DETAIL:  default_toast_compression cannot be empty.    
 236 SET default_toast_compression = 'I do not exist compression';    
 237 ERROR:  invalid value for parameter "default_toast_compression": "I do not exist compression"    
 238 DETAIL:  Compression method "I do not exist compression" does not exist.    
 239 SET default_toast_compression = 'lz4';    
 240 DROP TABLE cmdata2;    
 241 CREATE TABLE cmdata2 (f1 text);    
 242 \d+ cmdata2    
 243                                         Table "public.cmdata2"    
 244  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
 245 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
 246  f1     | text |           |          |         | extended | lz4         |              |     
 247     
 248 -- test alter compression method    
 249 ALTER TABLE cmdata ALTER COLUMN f1 SET COMPRESSION lz4;    
 250 INSERT INTO cmdata VALUES (repeat('123456789', 4004));    
 251 \d+ cmdata    
 252                                         Table "public.cmdata"    
 253  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
 254 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
 255  f1     | text |           |          |         | extended | lz4         |              |     
 256 Indexes:    
 257     "idx" btree (f1)    
 258     
 259 SELECT pg_column_compression(f1) FROM cmdata;    
 260  pg_column_compression     
 261 -----------------------    
 262  pglz    
 263  lz4    
 264 (2 rows)    
 265     
 266 -- test alter compression method for the materialized view    
 267 ALTER MATERIALIZED VIEW mv ALTER COLUMN x SET COMPRESSION lz4;    
 268 \d+ mv    
 269                                     Materialized view "public.mv"    
 270  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
 271 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
 272  x      | text |           |          |         | extended | lz4         |              |     
 273 View definition:    
 274  SELECT cmdata1.f1 AS x    
 275    FROM cmdata1;    
 276     
 277 -- test alter compression method for the partitioned table    
 278 ALTER TABLE cmpart1 ALTER COLUMN f1 SET COMPRESSION pglz;    
 279 ALTER TABLE cmpart2 ALTER COLUMN f1 SET COMPRESSION lz4;    
 280 -- new data should be compressed with the current compression method    
 281 INSERT INTO cmpart VALUES (repeat('123456789', 1004));    
 282 INSERT INTO cmpart VALUES (repeat('123456789', 4004));    
 283 SELECT pg_column_compression(f1) FROM cmpart1;    
 284  pg_column_compression     
 285 -----------------------    
 286  lz4    
 287  pglz    
 288 (2 rows)    
 289     
 290 SELECT pg_column_compression(f1) FROM cmpart2;    
 291  pg_column_compression     
 292 -----------------------    
 293  pglz    
 294  lz4    
 295 (2 rows)    
 296     
 297 --vacuum full to recompress the data    
 298 SELECT pg_column_compression(f1) FROM cmdata;    
 299  pg_column_compression     
 300 -----------------------    
 301  pglz    
 302  lz4    
 303 (2 rows)    
 304     
 305 VACUUM FULL cmdata;    
 306 SELECT pg_column_compression(f1) FROM cmdata;    
 307  pg_column_compression     
 308 -----------------------    
 309  lz4    
 310  lz4    
 311 (2 rows)    
 312     
 313 -- check data is ok    
 314 SELECT length(f1) FROM cmdata;    
 315  length     
 316 --------    
 317   10000    
 318   36036    
 319 (2 rows)    
 320     
 321 SELECT length(f1) FROM cmdata1;    
 322  length     
 323 --------    
 324   10040    
 325   12449    
 326 (2 rows)    
 327     
 328 SELECT length(f1) FROM cmmove1;    
 329  length     
 330 --------    
 331   10000    
 332 (1 row)    
 333     
 334 SELECT length(f1) FROM cmmove2;    
 335  length     
 336 --------    
 337   10040    
 338 (1 row)    
 339     
 340 SELECT length(f1) FROM cmmove3;    
 341  length     
 342 --------    
 343   10000    
 344   10040    
 345 (2 rows)    
 346     
 347 \set HIDE_TOAST_COMPRESSION true    
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")