title:New Methods for Passive Estimation of TCP Round-Trip Times
author:Bryan Veal and
Kang Li and
David K. Lowenthal
New Methods for Passive Estimation of
TCP Round-Trip Times
Bryan Veal, Kang Li, and David Lowenthal
Department of Computer Science,
The University of Georgia,
Athens, GA 30602, USA
{veal, kangli, dkl}@cs.uga.edu
Abstract. We propose two methods to passively measure and monitor
changes in round-trip times (RTTs) throughout the lifetime of a TCP
connection. Our ﬁrst method associates data segments with the acknowl-
edgments (ACKs) that trigger them by leveraging the TCP timestamp
option. Our second method infers TCP RTT by observing the repeating
patterns of segment clusters where the pattern is caused by TCP self-
clocking. We evaluate the two methods using both emulated and real
Internet tests.
1
Introduction
Round-trip time (RTT) is an important metric in determining the behavior of
a TCP connection. Passively estimating RTT is useful in measuring the the
congestion window size and retransmission timeout of a connection, as well as
the available bandwidth on a path [1]. This information can help determine
factors that limit data ﬂow rates and cause congestion [2]. When known at a
network link along the path, RTT can also aid eﬃcient queue management and
buﬀer provisioning. Additionally, RTT can be used to improve node distribution
in peer-to-peer and overlay networks [3].
Our work contributes two new methods to passively measure RTT at an inte-
rior measurement point. The ﬁrst method works for bidirectional traﬃc through
a measurement point. It associates segments from the sending host with the
ACK segments that triggered their release from the sender. Our method uses
TCP timestamps to associate data segments with the acknowledgments that
trigger them. Since the other direction is easy—associating acknowledgments
with the data segments they acknowledge—we can obtain a three-way segment
association. Thus, we have a direct and simple solution that can collect many
RTT samples throughout the lifetime of the connection.
There is no guarantee that the network route is symmetric, so only one direc-
tion of ﬂow may be available to the measurement point. We introduce a second
method to monitor a data stream and detect cyclical patterns caused by TCP’s
self-clocking mechanism. Because of self-clocking, a TCP connection’s segment
arrival pattern within one RTT is very likely to repeat in the next RTT. We use
C. Dovrolis (Ed.): PAM 2005, LNCS 3431, pp. 121–134, 2005.
c(cid:1) Springer-Verlag Berlin Heidelberg 2005
122
B. Veal, K. Li, and D. Lowenthal
algorithms that employ autocorrelation to ﬁnd the period of the segment arrival
pattern, which is the RTT. As with our previous method, we can take samples
throughout the lifetime of a TCP session.
We show both methods to be accurate by evaluating them using both emu-
lated and real network traces. For the emulated traces, we tested RTT estimates
with network delays ranging from 15ms to 240ms, as well as with competing
traﬃc over a bottleneck link using 0–1200 emulated Web users. The average
RTT estimate for each delay tested was always within 1ms of the average RTT
reported by the server. The maximum coeﬃcients of variation (standard devi-
ation/mean) were 3.79% for the timestamp based method and 6.69% for the
self-clocking based method. Average RTT estimates for the tests with compet-
ing traﬃc were all within 1ms for the timestamp based method and 5ms for the
self-clocking based method.
We also tested our RTT estimation methods with downloads from Internet
FTP servers. Out of seven servers, the maximum coeﬃcient of variation was
0.11% for the timestamp based method. For ﬁve of those servers, all RTT esti-
mates for each server were within 1ms of each other using the self-clocking based
method, and their average estimates were within 2.2ms of the average estimates
from the timestamp based method.
2 Related Work
The method [4] uses segment association during the three-way handshake that
initiates a TCP connection, as well as during the slow start phase. This takes
advantage of the fact that the number of data segments sent can be easily pre-
dicted in advance. However, during the congestion avoidance phase, it is hard to
predict the RTT based on the number of segments. Our method can associate a
data segment with the ACK that triggered it, and thus it can follow changes in
the RTT throughout the lifetime of a TCP session.
There is a method [5] to associate, throughout the lifetime of a session (includ-
ing during congestion avoidance), a data segment with the ACK segment that
triggered it. This method ﬁrst generates a set of all possible candidate sequences
of ACKs followed by data segments. Sequences that can be determined to violate
basic TCP properties are discarded. The method then uses maximum-likelihood
estimation to choose from the remaining possible sequences. This method is com-
plex and would be cumbersome to implement as a passive estimation method at
a device such as a router. Our method of using TCP timestamps to associate
segments is simpler and more direct.
A previous work [6] introduces a method to passively measure RTT by mim-
icking changes in the sender’s congestion window size. The measurement point
must accurately predict the type of congestion control used: Tahoe, Reno, or
NewReno. The accuracy of the estimate is aﬀected by packet loss, the TCP win-
dow scaling option, and buggy TCP implementations. Our method avoids these
diﬃculties by directly detecting the associations between segments.
New Methods for Passive Estimation of TCP Round-Trip Times
123
3 TCP Timestamps
Both our RTT estimation methods use the TCP timestamp option. The original
purpose of the option was to estimate the RTT at the sender for the purpose
of deriving the retransmission timeout. The option adds two ﬁelds to the TCP
header: timestamp value (TSval) and timestamp echo reply (TSecr). TSval is
ﬁlled with the time at which the segment was sent, and TSecr is ﬁlled with the
TSval of most recently received segment, with some exceptions. If a segment is
received before a segment previous to it in the sequence arrives, leaving a hole,
then the timestamp of the segment previous to the hole in the sequence is echoed.
When this hole is ﬁlled by an out-of-order segment or a retransmission, the
timestamp of the segment that ﬁlls the hole is echoed rather than the timestamp
of a segment later in the sequence.
3.1
Timestamp Deployment
For timestamps to be useful for passive RTT measurement, the option should
have a wide deployment and its implementation should be consistent across
diﬀerent hosts. We have developed a tool that can test the timestamp option
on remote Web servers. This tool was run on 500 servers taken from the Alexa
Global 500 list [7]. Of these, 475 servers responded to HTTP requests from our
tool.
The tool tests for timestamp deployment by sending SYN segments with the
timestamp option enabled and checking the SYN/ACK response for timestamps.
Of the 475 responding servers, 76.4% support the TCP timestamp option. We ex-
pect timestamp deployment to increase over time. Furthermore, the self-clocking
based RTT estimation method does not have to rely on TCP timestamps as the
time unit used to associate segments into clusters. Other time units are possible,
such as arrival time at the measurement point. We will address this possibility
in future work.
Implementation Consistency
3.2
The tool also tests for implementation consistency. It tests the exceptions to
echoing the most recent timestamp, described above. The tool sends three data
segments with the last two out of order in sequence. The server should indicate
the hole by sending a duplicate ACK with the timestamp of the ﬁrst segment.
When the client sends the last segment that ﬁlls the hole, the server should echo
its timestamp. Of the servers tested that support TCP timestamps, 100% echoed
the correct timestamp in both cases.
Another possible implementation error is to echo the timestamps of only
data segments, disregarding ACKs that carry no data. Our tool tests for this
possibility by sending an HTTP request to the server, receiving a data segment,
sending an acknowledgment, and receiving more data. The congestion window
is throttled to one byte to ensure that one segment is sent at a time. The second
data segment from the server should echo the timestamp of the ACK and not
the timestamp of the HTTP request. Of the servers tested, 99.4% correctly echo
the timestamp of the the ACK.
124
B. Veal, K. Li, and D. Lowenthal
Timestamp Granularity
3.3
The granularity chosen for TCP timestamps is implementation dependent. A ﬁne
granularity increases the accuracy and usefulness of both our RTT estimation
methods, as shall be explained in later sections. Our tool tests granularity by
sending data segments to the server at a known interval and then measuring the
diﬀerence between the timestamps of the ACKs the server sends in response.
Table 1 shows the distribution of timestamp granularity across the servers tested
that support the timestamp option.
Table 1. Distribution of timestamp granularity
Granularity Percent of Servers
500ms
476ms
100ms
10ms
1ms
0.6%
0.6%
36.9%
54.8%
7.2%
4 RTT Estimation Using Timestamps
Our ﬁrst RTT estimation method method requires ﬁnding associations between
TCP segments at an interior point along the route between the sender and
receiver. The ﬁrst segment in an association is a data segment from the sending
end of a TCP connection. The second is the ACK segment from the receiving
end that acknowledges receipt of the data segment. The third segment in the
association is the next data segment from the sender, which is triggered when it
receives the ACK. This assumes that the sender always has enough data ready
to ﬁll the congestion window as soon as more room becomes available.
Since multiple data and ACK segments may be in transmission concurrently,
it is not obvious at an interior point which segments from one host have been
triggered by the other. For the interior point to recognize an association, a
segment must carry identiﬁcation of the segment that triggered it. For the case
of a data segment triggering an ACK, the acknowledgment number carried by
the ACK is derived from the sequence number of the data segment. Thus the
interior point can associate the two segments. However, the sequence numbers of
ACK segments remain constant as long as the receiver sends no data. Because
of this, it is impossible to use the acknowledgment number of a data segment to
identify the ACK that triggered it.
The measurement point may use TCP timestamps instead of sequence num-
bers to associate segments. Timestamps are used only for association and not
for calculating the RTT. Both the sender and receiver of a TCP session echo
the most recently received timestamp, with minor exceptions in the cases of loss
and segment reordering. The measurement point records the timestamps, their
echoes, and arrival times of segments in each direction to estimate the RTT.
New Methods for Passive Estimation of TCP Round-Trip Times
125
Sender
s1
(s1, −)
s2
(s2,r1)
Measurement Point
Receiver
m1
m2
r1
( r 1 , s 1 )
Fig. 1. Association of segments using TCP timestamps
Figure 1 provides an example. The sender transmits a segment at time s1. It
arrives at the interior measurement point at time m1. The receiver responds with
an ACK at time r1 and echoes the sender’s timestamp, s1. The measurement
point recognizes s1 in both segments and makes an association. Upon receiving
the ACK, the sender transmits more data at time s2 and echoes the receiver’s
timestamp, r1. The measurement point receives this segment at time m2. It
recognizes r1 in both segments and forms an association. Having associated all
three segments, the measurement point estimates the RTT to be m2 − m1 .
4.1 Constraints
Timestamp Granularity. The granularity of timestamps depends upon the
TCP implementation of the sender. Even with a granularity as ﬁne as 1ms, a
burst of segments sent in a short interval may carry the same timestamp. The
receiver may acknowledge parts of the burst at diﬀerent times, but all the ACKs
would carry the same timestamp echo. It would be diﬃcult for the interior point
to determine which data segments caused which ACKs. Since the ﬁrst segment
carrying a timestamp may be associated safely with the ﬁrst segment carrying
its echo, the algorithm only considers the ﬁrst arriving segment with a particu-
lar timestamp and others with identical timestamps are discarded. However, a
coarser timestamp granularity increases the the number of segments with iden-
tical timestamps, and thus allows for fewer measurements to be taken.
A side eﬀect of preventing associations with ACKs containing old timestamps
is that later ACKs containing the same timestamp echo as the discarded segment
may be used to make an association, leading to an overestimate. To prevent this
situation, only the ﬁrst ACK with any particular timestamp echo is used to make
associations.
Packet Loss. When the receiver is missing data due to packet loss, it sends
duplicate ACKs. Since timestamp echoes are not updated when the receiver is
missing data, this problem is automatically eliminated by discarding associations
with ACKs that contain old timestamp echoes. However, when selective acknowl-
126
B. Veal, K. Li, and D. Lowenthal
edgments are enabled, overestimates can still occur. This problem is avoided by
not considering selective ACK segments (which are only produced when loss is
present), when making associations.
Interactive Sessions. This algorithm does not consider situations where the
sender has no new data available when it receives and ACK. Such sessions are
typically for interactive applications, such as ssh or telnet. Though not imple-
mented here, it should be possible to obtain RTT estimates for interactive ses-
sions based on some simple application heuristics. For example, in a typical
session, when a user types a key, the character is sent to the server. Then the
server echos the character back to the client to be displayed on the terminal. The
client then responds with an ACK. An interior measurement point could take
advantage of this to make an association for the three segments and estimate
the RTT.
It is still possible that the sender has some delay in sending more data during
a bulk transfer which could lead to an inﬂated RTT estimate at the measurement
point. To ﬁlter such measurements, we have devised a method that tracks current
maximum RTT for the session between the measurement point itself and each
of the two hosts. These RTTs would be taken for only data-ACK pairs to avoid
any possibility of sender delay. Any RTT estimates greater than the current sum
of the two maximum delays would be discarded as an inﬂated estimate. We plan
to evaluate this method as future work.
Asymmetric Routing. Though the RTT estimation algorithm requires both
data and ACKs, there is no guarantee that both directions of traﬃc will follow
the same route. However, it is still possible to obtain estimates using the second
algorithm described in the next section.
5 RTT Estimation Using Self-Clocking Patterns
Our second algorithm detects patterns in a bulk data stream caused by a mech-
anism in TCP known as self-clocking. Capturing ACKs from the receiver is
not required, so this algorithm maybe used for either asymmetric or symmetric
routes. With self-clocking, the bulk data sender produces more data each time
it receives an ACK, and the receiver sends an ACK each time it receives more
data. Because of this, the the spacing between bursts of segments is likely pre-
served from one round trip to the next. Although packet losses and competing
traﬃc could change the spacing and cause bursts to split or merge, the changes
do not always happen frequently, and the bursts tend to persevere for at least
a few round trips after each change. There may be multiple bursts of segments
per round trip, and their size and spacing generally repeat every RTT. This al-
gorithm detects the repetition of these burst-gap patterns to ﬁnd the RTT. An
example of such a pattern is shown in Fig. 2.
Discrete autocorrelation measures how well a data set is correlated with itself
at an oﬀset determined by the lag (l). If the correlation is strong, then the data
New Methods for Passive Estimation of TCP Round-Trip Times
127
 10
 8
 6
 4
 2
s
t
n
e
m
g
e
S
f
o
r
e
b
m
u
N
 0
 250
 300
 350
 400
 450
 500
Time (ms)
Fig. 2. Burst-gap pattern caused by self-clocking
matches its oﬀset closely. Figure 3 shows the autocorrelation strengths for the
data in Fig. 2. The strong correlation at 61ms corresponds closely to the RTT
(which is 60ms).
Our algorithm uses autocorrelation to make RTT estimates. The algorithm
repeats the RTT estimation once per measurement interval, T , which is supplied
as a parameter. During this interval, the number of packets that arrive with
timestamp t is stored in array P [t] ranging from 0 to T − 1. Once the count is
complete, the discrete autocorrelation A[l] is computed for each lag l from 1 to
l/2. The RTT estimate is computed as max(A).
This process is repeated to produce multiple estimates throughout the ses-
sion. The number of estimates depends upon the duration of the measurement
interval and the duration of the session. However, more estimates may be taken
by allowing measurement intervals to overlap.
5.1 Constraints
Timestamp Granularity. According to a theoretical limit known as the Ny-
quist period, it is only possible to measure RTTs at least twice the TCP times-
tamp granularity. For instance, if the granularity is 10ms, we can only detect
RTTs of at least 20ms. This is a problem with timestamp granularities of 100ms
or more. Although we do not explore it in this paper, a possible solution is to
use arrival times at the measurement point rather than TCP timestamps from
the sender.
Harmonic Frequencies. A consequence of a burst-gap pattern that repeats
every RTT is a strong autocorrelation at multiples of the RTT that is sometimes
stronger than that of the actual RTT. Rather than assuming that the strongest
128
B. Veal, K. Li, and D. Lowenthal
l
n
o
i
t
a
e
r
r
o
C
 1
 0.5
 0
-0.5
-1
 0
 20
 40
 60
 80
 100
 120
Lag (ms)
Fig. 3. Autocorrelation for self-clocking pattern
correlation corresponds to the RTT, the algorithm starts with the lag at the
strongest correlation, s, and compares it to A[ s
4], . . ., until a certain
limit is reached. If the correlation at the fractional lag is at least a certain
percent of the actual lag, then that lag is considered the RTT instead. The limit
of fractional lags and the percent of the maximum correlation are both provided
as parameters to the algorithm.
3], A[ s
2], A[ s
Measurement Interval. The measurement interval chosen places an upper
bound on the maximum RTT that can be measured. Autocorrelation becomes
unreliable at a lag of half the measurement interval, since two complete round