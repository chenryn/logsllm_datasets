is enabling clients to automatically retrieve their keys
with sufﬁcient security. It is very easy to have clients au-
tomatically retrieve their private keys – when a machine
or piece of client software (such as an email program)
220
12th USENIX Security Symposium 
USENIX Association
1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
flags
|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|
/
/
/
/
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
domain parameters
protocol
|
algorithm
Figure 4: The wire format of RDATA for the PARAMS DNS resource record.
ﬁrst realizes that it doesn’t have a necessary private key,
the ﬁrst time an IPsec-enabled host boots, or the
e.g.
ﬁrst time a mail client receives IBC-encrypted mail for
a particular user, it attempts to retrieve that key from the
domain’s PKG. While it would be very easy to create a
system to allow a user to securely retrieve that key, for
example through a password-protected web site linked
to the domain’s user database, we would like to enable
automated key retrieval.
A host wishing to automatically retrieve its private-key
must ﬁrst ﬁnd the domain PKG. This can be done, for
example, through the use of a standard conﬁguration ﬁle
general to the domain, or by using a designated record
similar to an MX record in the domain’s internal DNS
to indicate the host acting as the PKG. Then, the client
must create an encrypted and preferably authenticated
connection to the PKG – encrypted to protect its private-
key from eavesdroppers, and authenticated to make sure
that an intermediary is not attempting to hijack its key en
route. Interestingly, a rogue host attempting to pretend
to be the PKG is no more than an nuisance, as the client
can verify the authenticity of the private-key it receives
simply by encrypting and decrypting a message to itself.
In practice, we simply use SSL/TLS to secure communi-
cation between the client and the PKG. The PKG can use
a traditional server certiﬁcate authenticated through any
number of standard means – e.g.
traditional DNSSEC
mechanisms for distributing keys, certiﬁcates, or CA
keys; an internal domain PKI; an external trusted CA;
a modiﬁed IBC-based version of SSL, or it could even
use a self-signed certiﬁcate if the internal infrastructure
is deemed sufﬁciently resistant to spooﬁng attacks.
More importantly, the PKG must be able to authenticate
that the client requesting the key for a certain id is ac-
tually the client that should have that id. There are a
number of ways of accomplishing that. At one extreme,
clients could be equipped with private keys and certiﬁ-
cates, which they use to authenticate themselves to the
PKG. Clients can also be identiﬁed using any secrets
they already share with the domain (e.g. user passwords,
or machine domain credentials). It would also be very
simple to design mechanisms that use temporary client
passwords or “cookies” provided to clients through user
registration or administrator action, that they can use to
authenticate themselves to the PKG. More practically,
simple mechanisms that seem inherently insecure when
used globally may be more than sufﬁcient when used
inside a trust domain, especially when combined with
the ability to verify over time that the correct client re-
ceived the correct key. In the case of email, this could
mean using the ability of a user to receive mail at a par-
ticular address to be an indicator that they really are the
valid “owner” of that address. Similarly, if the PKG is
only allowed to communicate with hosts within a trusted
domain (say, behind a ﬁrewall on a trusted piece of the
network) that in and of itself may be sufﬁcient to authen-
ticate host identity.
Client Key Update Clients must receive new private-
keys when the salt (and rarely, the domain-params) are
updated (see Section 2.1). Clients can use DNS TTL val-
ues to automatically determine the intervals at which
they ought to check for new salt or domain-params val-
ues (see Section 2.2). While client key updates can obvi-
ously be performed in the same manner as initial client
key retrieval, some optimization is possible when only
the salt has changed. In such a situation, a client whose
old private-key has not been compromised can be sent
its new private-key encrypted under its old id, which it
can use its old private-key to decrypt. The security of
the system is maintained as long as the initial private-
key exchange was secure.
We note that clients will want to keep a list of several
previous private-keys and associated salts. This is nec-
essary to to decrypt email which was sent before, but not
read until after, the domain underwent a domain-params
or salt change.
USENIX Association
12th USENIX Security Symposium 
221
3 Secure Email Client
In this section, we describe our approach to provid-
ing secure email using domain-based administration of
identity-based cryptography.
Suppose a sender Al-
ice wishes to send email to a recipient, say Bob with
email address “PI:EMAIL”. Alice’s email client
ﬁrst retrieves from the DNS the PARAMS and PSALT
resource records for parc.com. These decode into a
domain-params and salt, respectively. Alice then
uses identity-based encryption [2] with the domain-
params and “salt(cid:3)PI:EMAIL” as the public key to
encrypt a symmetric cipher key. This is in turn used
to encrypt (and MAC) the email. Alice sends the en-
crypted email, along with the salt and a digest of the
domain-params used to Bob’s mail server (which was
presumably learned from a MX record in the same DNS
query.) Note that Bob is not involved in this process.
Indeed, up until the encrypted email is sent, Alice has
no need to communicate with any machine in parc.com;
the DNS will cache all appropriate parameters until their
TTLs run out.
Bob’s email client then pulls the encrypted email into his
mailbox, checks that the digest of the domain-params
matches its current knowledge of the domain-params,
and pulls from a private store the private-key corre-
sponding to the salt encoded in the message. If either
the domain-params digest fails to match, or no entry ex-
ists for the salt used in the message, the client asks the
DNS for the latest domain-params and salt to see if it
needs an updated private-key. If so, it contacts the PKG
for a new private-key (using SSL with encryption and
mutual authentication); otherwise, it rejects the email as
invalid. It then decrypts the message and presents it to
Bob.
4 IPsec Client
We would like to use identity-based cryptography to se-
cure IP-based network trafﬁc. Previous work has sug-
gested the use of non-interactive identity-based key ex-
change protocols to secure trafﬁc between hosts in the
same IBC trust domain [1], but did so by inventing a
new set of protocols. We’d prefer to use IBC in a way
that works easily with existing standards and software,
and supports hosts using different sets of IBC parame-
ters.3 This means using IBC to secure IPsec [18].
3We are primarily interested in hosts using domain-based parame-
ters, but the details of how we incorporate IBC into IPsec should be
generic across almost any IBC trust distribution mechanism.
IPsec is an IETF standard protocol providing mecha-
nisms for encrypting and authenticating IP packets. This
protection is provided using algorithms and symmetric
keys negotiated using the Internet Key Exchange proto-
col, or IKE [15, 20, 24].4 Clients using IPsec generally
implement IKE in a user-space daemon, which negoti-
ates security associations (SAs) and keys with the corre-
sponding IKE daemon on the hosts with which it wishes
to communicate securely. The negotiated SAs and keys
are then provided to the IPsec implementation in the net-
work stack, which uses them to secure IP packets.
Using IBC to secure IPsec trafﬁc means describing IBC-
based key exchange protocols to be used as part of IKE,
and implementing them in the IKE daemon. It does not
require modiﬁcation to the network stack components in
the kernel. Luckily, it turns out that IBC can be eas-
ily accommodated in the existing IKE protocol, with no
change to packet structure or protocol ﬂows.
4.1 Structure of IKE
IKE is deﬁned as a particular instantiation of the Inter-
net Security Association and Key Management Protocol
(ISAKMP [20]). This is a very complex family of proto-
cols, designed to provide negotiability of algorithms and
parameters, optional identity protection for the partici-
pating parties, and a number of authentication options.
IKE is divided into two phases. Phase 1 is used by two
peers to establish a secure, authenticated channel over
which to communicate; this is referred to the ISAKMP
Security Association (SA). During Phase 2, those peers
go on to negotiate Security Associations to be used by
IPsec or other services. Phase 2 trafﬁc is secured us-
ing the symmetric keys agreed on as part of the SA ne-
gotiated in Phase 1, and therefore is unchanged in our
scheme. As part of authenticating each other during
Phase 1, the two parties exchange their “identities”, in
one of several forms, e.g. fully-qualiﬁed (DNS) domain
names (FQDN), or IP addresses.
Phase 1 can be accomplished in two ways, described as
“modes”. Main mode provides identity protection for
the communicating parties by protecting the identifying
information they send to each other under either a key
derived from an ephemeral Difﬁe-Hellman exchange, or
a public key that they have previously exchanged. Ag-
gressive mode is designed to be more efﬁcient, and in
4At this writing, IKEv2 is currently under development. In order
to experiment with our approach using current software, we have fo-
cused our efforts on IKE. Similar modiﬁcations should be possible
with IKEv2.
222
12th USENIX Security Symposium 
USENIX Association
Initiator
Responder
xiP −→
←− xrP
Ki = ˆe(Si, xrP) ˆe(Qr, xisrdP)
Kr = ˆe(Sr, xiP) ˆe(Qi, xrsidP)
K = Ki = Kr = ˆe(xrSi + xiSr, P)
Kpsk = hash(K, xixrP)
Symbols are deﬁned as follows:
P, q subgroup generator and subgroup, part of domain’s group-params
initiator’s ephemeral elliptic curve Difﬁe-Hellman private value,xi ∈R Zq
xi
xiP initiator’s ephemeral elliptic curve Difﬁe-Hellman public value
xr,xrP analogous values for responder
sid, Pid = sidP initiator’s domain’s master-secret and domain-public-key
srd, Prd = srdP responder’s domain’s master-secret and domain-public-key
Qi, Qr mapToPoint of the initiator and responder’s identities, i.e., Qi = H(IDi), Qr = H(IDr)
Si,Sr
ˆe
initiator and responder’s private keys,Si = sidQi,Sr = srdQr
an admissible pairing function, ˆe(point1
Ki, Kr method used by initiator and responder, respectively to compute the shared key
, point2
)
K resulting shared key computed by both parties
Kpsk ﬁnal shared session key without key escrow
Figure 5: Identity-based key exchange algorithm using different domain-public-keys but the same group-params [5].
general does not provide identity protection – partici-
pants’ identities are sent in the clear as part of their ﬁrst
exchanges.5
three authentication protocol types. In the next section,
we show how to map domain-based IBC onto each of
these authentication protocols.
Finally, Phase 1 (both main and aggressive modes) can
be authenticated using one of four protocols: signature-
based authentication, two forms of authentication using
public key encryption (both of which do provide identity
protection in aggressive mode), and authentication using
a pre-shared key.
All components of IKE are designed to support a variety
of cryptographic algorithms, key lengths, and parame-
ters. Acceptable choices for these variables are listed by
the initiator in proposal payloads, as part of the ﬁrst se-
curity association (SA) negotiation message it sends to
the responder; the responder replies with the single pro-
posal of its choice. This extensibility allows us to incor-
porate IBC seamlessly into Phase 1, simply by identity-
based algorithms as alternatives in these proposal pay-
loads, as long as they can ﬁt into the ﬂows used by IKE’s
5IKE uses two other “modes” – quick mode is what is used to per-
form Phase 2 key exchanges, and new group mode can be used after a
Phase 1 exchange to change the cryptographic group used by the par-
ticipants. As cryptographic groups can be negotiated during Phase 1,
we present our discussion of group management in that context, and
do not discuss either of these modes further.
4.2
IBC-Based IKE
Using IBC in the signature and public-key based authen-
tication modes for IKE Phase 1 is extremely straightfor-
ward. It will work even if the participants come from dif-
ferent domains, using unrelated domain-params to issue
private keys. All that is required is to select an identity-
based signature algorithm (e.g. [3, 16, 23]), and/or an
identity-based encryption algorithm (e.g. Boneh and
Franklin’s IBE algorithm [2]). Given the selection of
appropriate algorithm identiﬁers and a ﬁxed format in
which to exchange the resulting encryptions and signa-
tures, these can be dropped directly into the standard
protocol ﬂows provided by IKE [15].
When using identity-based cryptography, the authentic-
ity of a peer’s public key is given merely because they
prove possession of the private key corresponding to
a given identity (sent by the peer as part of IKE, or
known a priori), relative to the public system parame-
ters of the domain that they claim to be a part of. As a
result, the optional IKE messages provided for the ex-
USENIX Association
12th USENIX Security Symposium 
223
change of certiﬁcates can be omitted. Additionally, all
of IKE’s key exchange protocols can provide perfect for-
ward secrecy (PFS) by generating session keys not from
long-term cryptographic secrets (e.g. IBC private keys),