            }
        }
        free(sym);
        return 0;
    }
再来康康handle_one_lmap是如何把当前link_map指向的so中的SYMTAB、STRTAB、RELPLT、REPLDYN信息提取出来的：
    struct lmap_result *handle_one_lmap(int pid, struct link_map *lm)
    {
        Elf_Addr dyn_addr;
        Elf_Dyn  *dyn = (Elf_Dyn *)calloc(1, sizeof(Elf_Dyn));
        struct lmap_result *lmret = NULL;
        // 符号表
        Elf_Addr    symtab;
        Dyn_Val     syment;
        Dyn_Val     symsz;
        // 字符串表
        Elf_Addr    strtab;
        // rel.plt
        Elf_Addr    jmprel;
        Dyn_Val     relpltsz;
        // rel.dyn
        Elf_Addr    reldyn;
        Dyn_Val     reldynsz;
        // size of one REL relocs or RELA relocs
        Dyn_Val     relent;
        // 每个lmap对应的库的映射基地址
        Elf_Addr    link_addr;
        link_addr = lm->l_addr;
        dyn_addr = lm->l_ld;
        ptrace_getdata(pid, dyn_addr, dyn, sizeof(Elf_Dyn));
        while(dyn->d_tag != DT_NULL)
        {
            switch(dyn->d_tag)
            {
            // 符号表
                case DT_SYMTAB:
                symtab = dyn->d_un.d_ptr;
                break;
                case DT_SYMENT:
                syment = dyn->d_un.d_val;
                break;
                case DT_SYMINSZ:
                symsz = dyn->d_un.d_val;
                break;
            // 字符串表
                case DT_STRTAB:
                strtab = dyn->d_un.d_ptr;
                break;
            // rel.plt, Address of PLT relocs
                case DT_JMPREL:
                jmprel = dyn->d_un.d_ptr;
                break;
            // rel.plt, Size in bytes of PLT relocs
                case DT_PLTRELSZ:
                relpltsz = dyn->d_un.d_val;
                break;
            // rel.dyn, Address of Rel relocs
                case DT_REL:
                case DT_RELA:
                reldyn = dyn->d_un.d_ptr;
                break;
            // rel.dyn, Size of one Rel reloc
                case DT_RELENT:
                case DT_RELAENT:
                relent = dyn->d_un.d_val;
                break;
            //rel.dyn  Total size of Rel relocs
                case DT_RELSZ:
                case DT_RELASZ:
                reldynsz = dyn->d_un.d_val;
                break;
            }
            ptrace_getdata(pid, dyn_addr += (sizeof(Elf_Dyn)/sizeof(Elf_Addr)), dyn, sizeof(Elf_Dyn));
        }
        if (0 == syment || 0 == relent)
        {
            printf("[-]Invalid ent, syment=%u, relent=%u\n", (unsigned)syment, (unsigned)relent);
            return lmret;
        }
        lmret = (struct lmap_result *)calloc(1, sizeof(struct lmap_result));
        lmret->symtab = symtab;
        lmret->strtab = strtab;
        lmret->jmprel = jmprel;
        lmret->reldyn = reldyn;
        lmret->link_addr = link_addr;
        lmret->nsymbols = symsz / syment;
        lmret->nrelplts = relpltsz / relent;
        lmret->nreldyns = reldynsz / relent;
        free(dyn);
        return lmret;
    }
可以看到 这里利用了`link_map->l_ld`读取到 `Elf_Dyn *dyn`，从而拿到有关当前so的 `.dynamic`的内容
再用switch语句区分各种`dyn->d_tag`下的不同类别的信息
循环处理完毕后将存储的有用信息的`(struct lmap_result *)lmret` 返回
至此，我们构造了一个find_symbol函数用于查找目标程序内存空间里已加载so的函数
### 第三步
通过第二步的find_symbol函数，可以得到`__libc_dlopen_mode`的地址，接下来就是对目标程序的寄存器进行操作
    /* 查找要被替换的函数 */
        old_sym_addr = find_symbol(pid, map, oldfunname);      
        /* 查找hook.so中hook的函数 */
        new_sym_addr = find_symbol(pid, map, newfunname);
        /* 查找__libc_dlopen_mode，并调用它加载hook.so动态链接库 */
        dlopen_addr = find_symbol(pid, map, "__libc_dlopen_mode");
        /*把hook.so动态链接库加载进target程序 */
        inject_code(pid, dlopen_addr, libpath);
这里的重点在于`inject_code(pid, dlopen_addr, libpath);`
    int inject_code(pid_t pid, unsigned long dlopen_addr, char *libc_path)
    {
        char sbuf1[STRLEN], sbuf2[STRLEN];
        struct user_regs_struct regs, saved_regs;
        int status;
        puts(">> start inject_code to call the dlopen");
        ptrace_getregs(pid, &regs);//获取所有寄存器值
        ptrace_getdata(pid, regs.rsp + STRLEN, sbuf1, sizeof(sbuf1));
        ptrace_getdata(pid, regs.rsp, sbuf2, sizeof(sbuf2));//获取栈上数据并保存在sbuf1、2
        /*用于引发SIGSEGV信号的ret内容*/
        unsigned long ret_addr = 0x666;
        ptrace_setdata(pid, regs.rsp, (char *)&ret_addr, sizeof(ret_addr));
        ptrace_setdata(pid, regs.rsp + STRLEN, libc_path, strlen(libc_path) + 1); 
        memcpy(&saved_regs, &regs, sizeof(regs));
        printf("before inject:rsp=%zx rdi=%zx rsi=%zx rip=%zx\n", regs.rsp,regs.rdi, regs.rsi, regs.rip);
        regs.rdi = regs.rsp + STRLEN;
        regs.rsi = RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE;
        regs.rip = dlopen_addr+2;
        printf("after inject:rsp=%zx rdi=%zx rsi=%zx rip=%zx\n", regs.rsp,regs.rdi, regs.rsi, regs.rip);
        if (ptrace(PTRACE_SETREGS, pid, NULL, &regs) nrelplts; i++) 
        {
            ptrace_getdata(pid, lmret->jmprel + i*sizeof(Elf_Rela), rel, sizeof(Elf_Rela));
            ptrace_getdata(pid, lmret->symtab + ELF64_R_SYM(rel->r_info) * sizeof(Elf_Sym), sym, sizeof(Elf_Sym));
            int n = ptrace_getstr(pid, lmret->strtab + sym->st_name, str, STRLEN);
            printf("self->st_name: %s, self->r_offset = %p\n",str, rel->r_offset);
            if (strcmp(str, sym_name) == 0) 
            {
                break;
            }
        }
        if (i == lmret->nrelplts)
            ret = 0;
        else
            ret = rel->r_offset;
        free(rel);
        return ret;
    }
找好了got表地址后最后进行的就是修改got表了
    /* 找到旧函数在重定向表的地址 */          
        old_rel_addr = find_sym_in_rel(pid, oldfunname);
        ptrace_getdata(pid, old_rel_addr, &target_addr, sizeof(Elf_Addr));
        ptrace_setdata(pid, old_rel_addr, &new_sym_addr, sizeof(Elf_Addr));
        //修改oldfun的got表内容为newfun
        To_detach(pid);//退出并还原ptrace attach前的寄存器内容
至此利用ptrace进行hook的操作就这样完成了，其实可以发现，这种hook手段离不开注入技术
### ptrace hook演示
在这里，我们的target程序如下
    #include 
    #include 
    int main()
    {
        int num=10;
        printf("my pid is %d\n", getpid());
        puts("start hook?");
        while(--num)
        {
            puts("hello?");
            sleep(1);
        }
        return 0;
    }
    //gcc target.c -o target
hook_so源码如下
    #include 
    int newputs(const char *str)
    {
        write(1,"hook puts! ",11);
        puts(str);
        return 0;
    }
    //gcc hook_so.c -o hook_so.so -fPIC --shared
hook3源码见附件，太长了不贴了
编译`gcc hook3.c -o hook3 -ldl && gcc target.c -o target && gcc hook_so.c -o
hook_so.so -fPIC --shared`
运行：
    $ sudo ./hook3 ./hook_so.so puts newputs 26600
    ---------------------------------    target pid = 26600
    target oldfunname: puts
    patch libpath: ./hook_so.so
    patch newfunname: newputs
    ---------------------------------    
    [+]the address of .dynamic is 0x600e28
    [+]the address of .got.plt is 0x601000
    [+]the address of link_map is 0x7fc95aa38168
    [-]invalud name of link_map at 0x7fc95aa386f8
    [-]invalud name of link_map at 0x7fc95aa38b90
    >> start search symbol in /lib/x86_64-linux-gnu/libc.so.6:
    [+]has find the symbol name: puts
    found puts at addr 0x7fc95a4b6690
    [-]invalud name of link_map at 0x7fc95aa386f8
    [-]invalud name of link_map at 0x7fc95aa38b90
    >> start search symbol in /lib/x86_64-linux-gnu/libc.so.6:
    [+]has find the symbol name: __libc_dlopen_mode
    found __libc_dlopen_mode at addr 0x7fc95a58a610
    >> start inject_code to call the dlopen
    before inject:rsp=7fff4b267ac8 rdi=7fff4b267ad0 rsi=7fff4b267ad0 rip=7fc95a5132f0
    after inject:rsp=7fff4b267ac8 rdi=7fff4b267ec8 rsi=1102 rip=7fc95a58a612
    after waitpid inject:rsp=7fff4b267ad0 rdi=7fc95aa37948 rsi=7fff4b267a98 rip=666
    -----inject_code done------    [-]invalud name of link_map at 0x7fc95aa386f8
    [-]invalud name of link_map at 0x7fc95aa38b90
    >> start search symbol in /lib/x86_64-linux-gnu/libc.so.6:
    >> nothing found in this so...
    >> start search symbol in /lib64/ld-linux-x86-64.so.2:
    >> nothing found in this so...
    >> start search symbol in ./hook_so.so:
    [+]has find the symbol name: newputs
    ===> found newputs at addr 0x7fc95a2456e0
    self->st_name: puts, self->r_offset = 0x601018
    oldfunname: puts  rel addr:0x601018
    oldfunction addr:0x7fc95a4b6690
    newfunction addr:0x7fc95a2456e0
    hook has done!
    ***detach***
可以看到puts函数被hook成功
> ps：我的环境是Ubuntu16.04，以上所有的源码编译操作都是在以64位进行的，32位的没有实现
## 注入技术
如果我们希望进行的操作不仅仅只是hook一个函数，我还想让程序运行一系列的代码，该如何操作？
  1. 比较容易被想到的就是模仿上面的ptrace操作，对目标程序的内存数据和寄存器进行修改，从而达到注入代码的目标，但是这种方法比较麻烦一方面要考虑注入前后对目标程序的影响，又要兼顾执行注入代码时的信号的发送，才能让hook程序时刻注意目标程序的执行状态
  2. 先注入so进行hook，在hook.so中设计一系列执行代码
这里主要想介绍第二种，这种方法执行注入代码非常方便，基本上不需要考虑目标程序的运行环境
把hook_so.c进行修改
    #include 
    //gcc hook_so.c -o hook_so.so -fPIC --shared
    int newputs(const char *str)
    {
        write(1,"hook puts! ",11);
        puts(str);
        return 0;
    }
    __attribute__((constructor))
    void loadMsg()
    {
        puts("hook.so has been injected!");
        puts("now let's do somesthing...");
        printf("->pid:%d\n\n", getpid());
    }
    __attribute__((destructor))
    void eixtMsg()
    {
        puts("bye bye~");
    }
这里使用了 `__attribute__`关键词，专门用它设计两个函数分别在最开始的时候 执行和结束的时候执行
再次进行之前的hook操作：`sudo ./hook3 ./hook_so.so puts newputs 26868`
可以看到不仅成功hook，还多执行了两个函数，这里可以发挥想象，如果在hook3对target进行ptrace时得到的信息写入一个文本文件中，然后在hook.so中再读取这个文件，就能获取到本程序的大部分信息，如一些函数的地址，got表的地址等等，有了这些信息简直就是为所欲为之为所欲为
再骚一点的话，还可以新开一个子进程or线程执行execve，从而执行各种其他程序
## 参考链接