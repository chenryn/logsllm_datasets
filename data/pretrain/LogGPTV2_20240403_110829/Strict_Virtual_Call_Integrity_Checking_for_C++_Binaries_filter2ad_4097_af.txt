7ba:
7c0:
7c3:
7c8:
7cc:
; if x == 1:
7ce:
7d5:
7da:
7dc:
7e2:
7e5:
7ea:
; vcall site
7ee:
7f2:
7f4:
7f6:
7fa:
7fd:
...
movl
call
mov
movl
mov
call
mov
mov
mov
mov
mov
mov
call
$0x4, (%esp)
660
%eax, %ebx
$0x0, (%ebx)
%ebx, (%esp)
8aa
%ebx, 0x1c(%esp)
7ee 
$0x4, (%esp)
660
%eax, %ebx
$0x0, (%ebx)
%ebx, (%esp)
8c6
%ebx, 0x1c(%esp)
0x1c(%esp), %eax
(%eax), %eax
(%eax), %eax
0x1c(%esp), %edx
%edx, (%esp)
*%eax
; operator new()
; constructor of A
; this ptr of A
; operator new()
; %eax = this ptr
; %eax = vptr
; %eax = vptr[0]
; push this ptr
; invoke vptr[0]
; constructor of B
; this ptr of B
E. DESTRUCTORS CORNER CASES
1 int main() {
2
3
4
5
6
7 }
int x; cin >> x;
Base *ptr = nullptr;
if (x == 1) ptr = new A();
else ptr = new B();
ptr->foo(); //vcall
(a) Example C++ program with a virtual call.
%ebp
$0x0, 0x1c(%esp)
; ptr = nullptr
$0x1, %eax
7ce 
; x == 1 ?
(b) Assembly dump of (a).
clsz ← {A,B};
ptr ← (%esp);
assert(∃ cls ∈ clsz
∧ vtable(ptr) == cls.vtable
∧ layout(ptr) == cls.layout);
(c) Injected policy checks before the vcall at 7fd.
Figure B.1: (a) Example C++ program, (b) it’s as-
sembly dump, and (c) the policy injected by VCI.
clsz is the statically constructed set of valid classes
at the vcall site. ptr refers to the pointer at address
0x1c(%esp).
record is included at a negative oﬀset in the vtable. The
RTTI record contains several structures that describe the
class type and its bases.
The structural details of RTTI records can be very useful
in reconstructing the polymorphic class hierarchy. However,
RTTI is not required if the program uses an RTTI operator
in a way that the compiler can infer at compile-time. For ex-
ample, a dynamic up cast to an unambiguous base can be re-
placed by a static (compile-time) cast by the compiler, hence
not requiring RTTI. All major compilers support RTTI as
an optional feature that can be enabled or disabled. Some
compilers, such as Clang/LLVM, use alternative implemen-
tations of RTTI via C++ templates (dyn_cast<>, isa<> in
Clang). Additionally, RTTI is typically stripped from COTS
binaries or is not present to begin with. For instance, the
7c3
7b8
7b3
7da
7d5
787
784
796
A
7c8
7ba
7c0
7dc
7e2
78b
78f
7ac
7ce
7e5
B
7ea
7f6
7fa
Figure B.2: Extracted PDG backward slice start-
ing at the this pointer argument at oﬀset 7fa in
Figure B.1. For simplicity, nodes only show the
corresponding instruction oﬀsets. Dashed nodes
and edges correspond to irrelevant dependences that
were ﬁltered out by VCI.
C++ Firefox modules on Ubuntu that we used in our ex-
periments had no RTTI by default. Finally, the details of
the RTTI record are compiler-speciﬁc, and the ABI does
not mandate an implementation standard for compilers to
follow. Therefore, we opted against depending on RTTI in
VCI.
The Itanium ABI deﬁnes three diﬀerent types of destruc-
tors: 1) base destructor, which destroys the object itself,
data members, and non-virtual base subobjects; 2) com-
plete destructor, additionally destroys virtual base subob-
jects; and 3) deleting destructor, which in addition to per-
forming a complete destruction, calls operator delete to
free the object’s memory. Since base destructors do not
call non-virtual bases, they do not reference any vtable and
therefore are always ignored by VCI. Deleting destructors
are also ignored since they call complete destructors and do
not reference vtables. Complete destructors, on the other
hand, have to call the virtual destructors of base classes.
Therefore, they access the vtable of the object and its sub-
objects, in a somewhat similar behavior to constructors. Al-
gorithm A.2 implicitly assumes that all complete destructors
are virtual. While that is true most of the time, there are a
few exceptions to this rule.
For instance, the C++11 ABI added a final speciﬁer that
can be applied to classes. A class that is marked ﬁnal cannot
be inherited from (C++11 Clause 9.3). A ﬁnal class can have
a non-virtual complete destructor even though it deﬁnes or
inherits virtual functions. This would cause VCI to incor-
rectly identify those destructors as constructors. However,
the ﬁrst thing a complete destructor does is store the vtable
address of its class in the object’s memory. This is done
before calling base destructors, if any. Therefore, VCI will
not identify any base classes when analyzing the destructor
site, compared to analyzing a constructor, when extract-
ing inheritance relationships. VCI utilizes this disagreement
in the identiﬁed “is-a” relationship to ﬁlter out non-virtual
complete destructors (if any).
F. CROSS-MODULE POLYMORPHISM
A C++ binary can use or inherit a class that is deﬁned
in a diﬀerent module (shared library). In this case, space
for the vtable of the shared class is reserved in the .bss
section of the binary, but the contents of the vtable are not
153present until after the dynamic linker populates the .bss
section. Similarly, in the case of cross-module inheritance,
the derived class vtable may contain pointers to the PLT
(Procedure Linkage Table), where the actual addresses of
the base functions are to be determined at runtime by the
dynamic linker.
In both cases, VCI applies the SameOﬀ
policy since it has limited visibility into the shared vtables
and the virtual function bodies. This gap can be narrowed
via cross-module inter-procedural analysis, and a runtime
stage, similar to VTV, that adjusts the policy as modules
are loaded and the contents of the vtables become available.
We leave this extension for future work.
G. VCALL RESOLUTION STATISTICS
Table G.1 provides summary statistics of VCI’s vcall tar-
get resolution results of the programs used in our experi-
ments. The statistics represent the number of vcall targets
per vcall site for each of the three policy cases.
Table G.1: Vcall target resolution statistics.
Unres.
Partially
Fully
Program
444.namd
447.deal
450.soplex
453.povray
471.omnetpp
483.xalanch
Min. Max. Avg. Min. Max. Avg. Min. Max. Avg.
1
1
1
1
1
1
0
91
16
24
49
213 705
0
0
43
76
9
14
13
22
51
39
112 81
0
207
17
26
68
283
0
335
30
30
82
1
18
5
7
19
31
1
31
7
11
28
49
0
2
2
4
2
3
libgbllibs.so
1
libmozgnome.so 1
libmozjs.so
1
1
libxul.so
libzmq.so
1
1
updater
1
3
8
12
62
33
208 74
9
1
4
1
2
2
8
12
4
3
0
18
201 917
4
5
18
11
192 83
987 646 1104 10021 2619
23
3
0
19
402
11
3
30
7
37
7
0
24
54
7
H. COMPARISON TO RELATED POLICIES
H.1 Reference Counts
It is possible to further strengthen the policies enforced
by VCI via means of reference counting [41]. For instance,
a vcall can never be invoked on a class type that has zero
referenced instances. While this may result in additional
reduction in the attack surface, the reference counters are
vulnerable to memory corruption attacks since they have to
reside in writable memory. Thus, VCI does not use reference
counters.
H.2 Calling Convention
Though VCI handles the stdcall convention by default,
developers could set speciﬁc calling conventions, such as
thiscall and fastcall, for some virtual functions. This re-
sults in discrepancies in how arguments are passed to vcalls:
stdcall passes arguments on the stack, thiscall passes
only the this pointer in ecx, while fastcall passes the
ﬁrst two arguments in ecx and edx. By identifying the call-
ing convention at each vcall site, it is possible to ﬁlter out
target virtual functions that do not adhere to the same call-
ing convention. Care must be taken to precisely distinguish
overlapping conventions, such as thiscall and fastcall.
This policy was applied by Prakash et al. [30], but it yielded
minimal precision improvements (<1%).
H.3 Call Arity
In C++, polymorphs of a function must have the same
parameters type list (C++14 Clause 10.3.2). This implies
that they must also have the same arity, i.e., accept the
same number of arguments. Therefore, it seems plausible
to use the number of arguments passed to a vcall site to
ﬁlter out potential target virtual functions that cannot ac-
cept that number of arguments. However, exact argument
matching will be unsound, since at the binary level, only
consumed parameters rather than accepted arguments are
present. Additionally, as per the ABI, the this pointer is
passed to class member functions regardless of whether the
functions consume the this pointer or not. This discrepancy
in the number of passed (prepared) arguments and the num-
ber of consumed parameters makes such policies unsound, as
legitimate targets may be incorrectly eliminated if function
polymorphs consume (use) a diﬀerent number of arguments.
As a result, exact matching has to be relaxed by allow-
ing compatible arguments, i.e., icall sites that prepare N
arguments can target functions that consume less than or
equal to N arguments. This policy was recently applied by
TypeArmor, by van der Veen et al. [39], to protect indirect
calls in both C and C++ binaries. TypeArmor, however, does
not take the C++ semantics into consideration. Though the
compatible arguments policy is sound, it is less precise than
semantic-aware policies, as noted by the authors.
To evaluate how imprecise this policy is compared to VCI,
we parsed the assembly dump of libxul.so, and counted the
number of prepared arguments at each icall site as well as
the number of accepted arguments by each function.5 We
then computed the number of compatible target functions
per icall site, grouped by the number of prepared arguments.
Figure H.1 depicts the results. For the sake of this argument,
assume the best case scenario where any vcall site prepares
only one argument (the this pointer). That means there
are 188k compatible targets per vcall (functions that accept
one or zero arguments). This is approximately 188× more
targets per vcall than VCI. Even if, hypothetically speaking,
policy reﬁnements applied by TypeArmor would reduce that
by 90%, there would still be 18k targets per vcall, about
18× less precise than VCI. Hence, we conclude that generic
policies based on call arity cannot replace C++ semantic-
aware policies. This, of course, does not nullify the fact that
layering multiple policies helps reduce the attack surface and
is essential for complete protection at the binary level.
Figure H.1: Number of compatible target functions
in libxul.so for a given number of prepared argu-
ments at icall sites, under TypeArmor’s [39] policy.
5The reported counts are underestimates as we ignored un-
used and variable length arguments.
140k160k180k200k220k240k260k012345678910111213# of compatibletarget functions# prepared arguments154