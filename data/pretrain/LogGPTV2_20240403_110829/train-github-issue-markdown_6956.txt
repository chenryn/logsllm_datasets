Templates exist to resolve placeholders in pieces of text and can only be used
in indexed scripts and ingest. While scripts are used in many other places and
exist to flexible execute custom logic related to the context it is running
in.
Templates are integrated into the script infrastructure (mustache implements
`ScriptEngineService` interface, `Template` extends from `Script` and all
places that use templates are hardcoded to use mustache language). I think it
makes sense to strip templates from the script infrastructure and let it be
its own thing. For example `Template` should be not extend from Script,
template implementations would implement `TemplateEngineService` and all of
the template features would be accessible from a `TemplateService`.
The following is a list of tasks to work towards a separated
`TemplateService`:
  * Add `ScriptService#compileTemplate` and cut some script compilations to that method (#24280)
  * Cut all script compilation to `ScriptService#compileTemplate` (#24280)
  * Create a `Template` class similar to the `Script` class that we can use to parse templates and use that with `ScriptService#compileTemplate`
  * Make a replacement for `ScriptEngineService` for templates, us it in `ScriptService#compileTemplate`, and make mustache implement that instead.
  * Remove template specific stuff from `Script` and `ScriptEngineService` (I'm starting to get fuzzy on exactly what this is so we'll have to clarify later)