# 2021强网杯easyheap
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 逆向
  * 进入prepare时会进行一个权限的检查  
倒推回去
    '''
    *(_QWORD *)s ^ '06210147' | 
    *(_QWORD *)&s[8] ^ 'c701e631'
    || 
    unsigned __int64)v16 ^ '27c7c475' | 
    *((_QWORD *)&v16 + 1) ^ '21111647'
    '''
    a = "06210147"[::-1]
    b = "c701e631"[::-1]
    c = "27c7c475"[::-1]
    d = "21111647"[::-1]
    s = a+b+c+d
    s = bytes.fromhex(s)
    res = ''
    for C in s:
        res+=chr(C^0x23)
    # W31C0M3_to_QWB21
  * 后面的逻辑可以概括为
  * buf_2是固定的, 因此重点在与逆向XOR_Input()
  * XOR_Input()先对前16B进行了异或
  * 接着进行字典变换
  * 然后交换位置
    input = []
    for i in range(16):
        input.append(i)
    input_5 = input[5]
    input_1 = input[1];
    input_14 = input[14];
    input_15 = input[15];
    input[5] = input[9];
    input_13 = input[13];
    input[13] = input_1;
    input_10 = input[10];
    input[1] = input_5;
    input[9] = input_13;
    input_2 = input[2];
    input[2] = input_10;
    input[10] = input_2;
    input_6 = input[6];
    input[6] = input_14;
    input[14] = input_6;
    input[15] = input[11];
    input[11] = input[7];
    input_3 = input[3];
    input[3] = input_15;
    input[7] = input_3;
    # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    # [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]
###  逆向中间的Func()
  * 后面这一段逻辑太搞人心态了
美化:
    char F(char A)
    {
        if (A & 0x80)
            return 2 * A ^ 0x1B;
        else
            return 2 * A;
    }
    int Func()
    {
        char *Input, *Input_;
        char Input_5;
        char Input_10;
        char Input_15;
        char v19, v20, v21, v22, v23, v24, v25, v26;
        for (; Input_ x的映射, 就是F()的逆函数
    * 既然有if存在, 那么就可以按照假设检验的思路: 
      * 假设A&0x80!=0, 那么按照 2 * A ^ 0x1B逆向出A之后, 再去检验得到的结果是不是真的与上0x80不为0
      * 假设A&0x80==0, 那么按照 2 * A 逆向出A之后, 再去检验得到的结果是不是真的与上0x80为0
    * 打表思路的代码如下, 实际上经过检验, 确实F()确实是一个单射函数
    typedef unsigned char uC;
    uC revF_tab[0x100];
    uC F(uC A)
    {
        if (A & 0x80)
            return (2 * A) ^ 0x1Bu;
        else
            return (2 * A);
    }
    void init_revF_tab(void)
    {
        for (int i = 0; i 
    typedef unsigned long long LL;
    typedef unsigned char uC;
    uC F(uC A)
    {
        if (A & 0x80)
            return (2 * A) ^ 0x1Bu;
        else
            return (2 * A);
    }
    void Func(uC *Input)
    {
        printf("0x%x\n\n", Input[0]);
        uC I0, I1, I2, I3;
        for (uC *Input_end = Input + 16; Input < Input_end; Input += 4)
        {
            I0 = F(Input[0]) ^ F(Input[1]) ^ Input[1] ^ Input[2] ^ Input[3];
            I1 = Input[0] ^ F(Input[1]) ^ Input[2] ^ F(Input[2]) ^ Input[3];
            I2 = Input[0] ^ Input[1] ^ F(Input[2]) ^ F(Input[3]) ^ Input[3];
            I3 = F(Input[0]) ^ Input[0] ^ Input[1] ^ Input[2] ^ F(Input[3]);
            Input[0] = I0;
            Input[1] = I1;
            Input[2] = I2;
            Input[3] = I3;
        }
    }
    int main(void)
    {
        LL Input[] = {0x6b23a8f2c7cf7b30, 0xd177c55b7c6f2c92};
        Func(Input);
        printf("0x%llx 0x%llx\n", Input[0], Input[1]);
    }
    /*
        0x6b23a8f2 c7cf7b30 0xd177c55b7c6f2c92
        0x50a1b754 719c4be5 0xe618824416e40758
    */
  * 重点在与中间那段xor的代码, 实际上每4B前后无关, 可以单独拿出来求解, 因此现在的问题就是, 已知I0 I1 I2 I3, 已知变换方式, 求解Input[0], Input[1], Input[2] ,Input[3], 也就是求中间xor过程的逆函数
  * 一开始向解方程消元, 结果发现初等变换根本解不开
  * 换个思路: 用乘法表达if的逻辑,试下用z3解决, 结果成功了, 还是z3 NB
    def Solve4B(I0, I1, I2, I3):
        A, B, C, D = BitVecs("A B C D", 8)
        FA, FB, FC, FD = BitVecs("FA FB FC FD", 8)
        s = Solver()
        s.add(FA == (A*2)^(((A&0x80)/0x80)*0x1B))
        s.add(FB == (B*2)^(((B&0x80)/0x80)*0x1B))
        s.add(FC == (C*2)^(((C&0x80)/0x80)*0x1B))
        s.add(FD == (D*2)^(((D&0x80)/0x80)*0x1B))
        s.add(I0 == FA^FB^B^C^D)
        s.add(I1 == A^FB^C^FC^D)
        s.add(I2 == A^B^FC^FD^D)
        s.add(I3 == FA^A^B^C^FD)
        print(s.check())
        m = s.model()
        return m[A].as_long(), m[B].as_long(), m[C].as_long(), m[D].as_long()
    def Solve16B(R):
        res = []
        for i in range(0, 16, 4):
            A, B, C, D = Solve4B(R[i+0], R[i+1], R[i+2], R[i+3])
            res.append(A)
            res.append(B)
            res.append(C)
            res.append(D)
        return res
###  总体逆向
  * 解决了最困难的部分之后就是简单的变幻了, 从后往前慢慢来就好
  * 逆向异或
    # [96, 123, 202, 5, 142, 12, 228, 233, 192, 209, 162, 65, 59, 165, 155, 151]
    # [0x9f, 0xb9, 0x8a, 0x10, 0x53, 0x3b, 0x71, 0x06, 0x68, 0xb2, 0x33, 0xf4, 0x81, 0x1e, 0x58, 0xf5]
    Out = [0x9f, 0xb9, 0x8a, 0x10, 0x53, 0x3b, 0x71, 0x06, 0x68, 0xb2, 0x33, 0xf4, 0x81, 0x1e, 0x58, 0xf5]
    buf2 = [87, 51, 49, 67, 48, 77, 51, 95, 116, 111, 95, 81, 87, 66, 50, 49, 
            122, 16, 246, 24, 74, 93, 197, 71, 62, 50, 154, 22, 105, 112, 168, 
            39, 41, 210, 58, 225, 99, 143, 255, 166, 93, 189, 101, 176, 52, 205, 
            205, 151, 144, 111, 178, 249, 243, 224, 77, 95, 174, 93, 40, 239, 154, 
            144, 229, 120, 248, 182, 14, 65, 11, 86, 67, 30, 165, 11, 107, 241, 
            63, 155, 142, 137, 252, 175, 169, 52, 247, 249, 234, 42, 82, 242, 129, 
            219, 109, 105, 15, 82, 37, 217, 169, 8, 210, 32, 67, 34, 128, 210, 194, 
            249, 237, 187, 205, 171, 143, 100, 203, 93, 93, 68, 136, 127, 221, 150, 
            74, 134, 48, 45, 135, 45, 215, 115, 19, 89, 138, 55, 155, 38, 87, 161, 
            209, 160, 103, 140, 86, 141, 168, 194, 78, 220, 34, 245, 213, 250, 117, 
            84, 4, 90, 18, 216, 82, 215, 255, 194, 64, 21, 221, 55, 149, 239, 168, 
            99, 145, 181, 186, 187, 195, 98]
    def revXOR_Buf2(Out, num):
        arr = []
        for i in range(16):
            arr.append(Out[i]^buf2[num*16+i])
        return arr
    Out = revXOR_Buf2(Out, 10)
  * 逆向换位
    # [96, 165, 162, 233, 142, 123, 155, 65, 192, 12, 202, 151, 59, 209, 228, 5]
    Out = [96, 123, 202, 5, 142, 12, 228, 233, 192, 209, 162, 65, 59, 165, 155, 151]