essary to extend these approaches to provide comprehensive protection against
memory errors on production environments [46,30,19,84].
Sandboxing. To reduce the potential damage that an exploitable vulnerabil-
ity could cause to a system, more research is needed on containment mechanisms.
This technique is already widely adopted on diﬀerent platforms, but even in its
sophisticated forms (e.g., the Android’s sandbox), it comes with weaknesses and
ways to bypass it [31].
5 Conclusion
Despite half a century worth of research on software safety, memory errors are
still one of the primary threats to the security of our systems. Not only is this
conﬁrmed by statistics, trends, and our study, but it is also backed up by evi-
dence showing that even state-of-the-art detection and containment techniques
fail to protect against motivated attackers [41,104]. Besides, protecting mobile
applications from memory errors may even be more challenging [10].
Finding alternative mitigation techniques is no longer (just) an academic ex-
ercise, but a concrete need of the industry and society at large. For instance, ven-
dors have recently announced consistent cash prizes to researchers who will im-
prove on the state-of-the-art detection and mitigation techniques against mem-
ory error attacks [15], showing their concrete commitment towards a long-standing
battle against memory error vulnerabilities.
References
1. Afek, J., Sharabani, A.: Dangling Pointer, Smashing the Pointer for Fun and
Proﬁt. In: Blackhat USA. (2007)
2. Akritidis, P.: Cling: A memory allocator to mitigate dangling pointers. In: Pro-
ceedings of the 19th USENIX conference on Security. (2010)
3. Akritidis, P., Costa, M., Castro, M., Hand, S.: Baggy bounds checking: an eﬃcient
and backwards-compatible defense against out-of-bounds errors. In: Proceedings
of the 18th conference on USENIX security symposium. (2009)
4. Aleph1: Smashing The Stack For Fun And Proﬁt. Phrack Magazine (Nov. 1996)
5. Anderson, J.P.: Computer Security Technology Planning Study. Volume 2 (Oct.
1972)
6. Anisimov, A.: Defeating Microsoft Windows XP SP2 Heap protection and DEP
bypass (Jan. 2005)
7. Anonymous: Once Upon a Free(). Phrack Magazine (Aug. 2001)
8. Barrantes, E.G., Ackley, D.H., Forrest, S., Stefanovi, D.: Randomized instruction
set emulation. ACM TISSEC (2005)
9. Basili, V.R., Perricone, B.T.: Software errors and complexity: an empirical inves-
tigation. CACM (1984)
10. Becher, M., Freiling, F.C., Hoﬀmann, J., Holz, T., Uellenbeck, S., Wolf, C.: Mobile
security catching up? In: IEEE S&P. (2011)
11. Bhatkar, S., Sekar, R., DuVarney, D.C.: Eﬃcient techniques for comprehensive
protection from memory error exploits. In: USENIX Security Symposium. (Aug.
2005)
12. blackngel: Malloc Des-Maleﬁcarum. Phrack Magazine (Jun. 2009)
13. blackngel: The House Of Lore: Reloaded. Phrack Magazine (Nov. 2010)
14. Blazakis, D.: Interpreter Exploitation. In: Proceedings of the 4th USENIX con-
ference on Oﬀensive technologies. (2010)
15. BlueHat, M.: Microsoft BlueHat Prize Contest (2011)
16. Bosman, E., Slowinska, A., Bos, H.: Minemu: The world’s fastest taint tracker.
In: RAID. (Sept. 2011)
17. Bray, B.: Compiler Security Checks In Depth (Feb. 2002)
18. Brumley, D., Poosankam, P., Song, D., Zheng, J.: Automatic patch-based exploit
generation is possible: Techniques and implications. In: Proceedings of the 2008
IEEE Symposium on Security and Privacy. (2008)
19. Bruschi, D., Cavallaro, L., Lanzi, A.: Diversiﬁed Process Replicae for Defeating
Memory Error Exploits. In: Intern. Workshop on Assurance (WIA). (2007)
20. BugTraq: Wu-Ftpd Remote Format String Stack Overwrite Vulnerability (Jun.
2000)
21. Bulba, Kil3r: Bypassing StackGuard and StackShield. Phrack Magazine (Jan.
2000)
22. CERT Coordination Center: The CERT FAQ (Jan. 2011)
23. Chen, S., Xu, J., Sezer, E.C., Gauriar, P., Iyer, R.K.: Non-control-data attacks
are realistic threats. In: USENIX Sec. Symposium. (2005)
24. Christey, S., Martin, R.A.: Vulnerability Type Distributions in CVE (May 2007)
25. cker Chiueh, T., hau Hsu, F.: Rad: A compile-time solution to buﬀer overﬂow
attacks. In: ICDCS. (2001)
26. Conover, M., Horovitz, O.: Windows Heap Exploitation (Win2KSP0 through
WinXPSP2). In: SyScan. (Dec. 2004)
27. Conover, M., w00w00 Security Team: w00w00 on Heap Overﬂows (Jan. 1999)
28. Cowan, C., Barringer, M., Beattie, S., Kroah-Hartman, G.: FormatGuard: Auto-
matic Protection From printf Format String Vulnerabilities. In: USENIX Security
Symposium. (Aug. 2001)
29. Cowan, C., Pu, C., Maier, D., Hintongif, H., Walpole, J., Bakke, P., Beattie, S.,
Grier, A., Wagle, P., Zhang, Q.: StackGuard: Automatic Adaptive Detection
and Prevention of Buﬀer-Overﬂow Attacks. In: Proceedings of the 7th USENIX
Security Symposium. (Jan. 1998)
30. Cox, B., Evans, D., Filipi, A., Rowanhill, J., Hu, W., Davidson, J., Knight, J.,
Nguyen-Tuong, A., Hiser, J.: N-variant systems: a secretless framework for secu-
rity through diversity. In: USENIX Security Symposium. (2006)
31. Davi, L., Dmitrienko, A., Sadeghi, A.R., Winandy, M.: Privilege Escalation At-
tacks on Android. In: Information Security. (2011)
32. de Raadt, T.: Exploit Mitigation Techniques (in OpenBSD, of course) (Nov. 2005)
33. Designer, S.: Getting around non-executable stack (and ﬁx) (Aug. 1997)
34. Designer, S.: Linux kernel patch to remove stack exec permission (Apr. 1997)
35. Designer, S.: JPEG COM Marker Processing Vulnerability (Jul. 2000)
36. DilDog: L0pht Advisory MSIE4.0(1) (Jan. 1998)
37. Dowd, M.: Application-Speciﬁc Attacks: Leveraging the ActionScript Virtual
Machine (Apr. 2008)
38. Durden, T.: Bypassing PaX ASLR Protection. Phrack Magazine (Jul. 2002)
39. Egele, M., Wurzinger, P., Kruegel, C., Kirda, E.: Defending Browsers against
In:
Drive-by Downloads: Mitigating Heap-Spraying Code Injection Attacks.
DIMVA. (Jul. 2009)
40. Etoh, H., Yoda, K.: Protecting from stack-smashing attacks (Jun. 2000)
41. Fewer, S.: Pwn2Own 2011: IE8 on Windows 7 hijacked with 3 vulnerabilities
(May 2011)
42. Fisher, D.: Survey Shows Most Flaws Sold For $5,000 Or Less (May 2010)
43. Fisher, D.: Chaouki Bekrar: The Man Behind the Bugs (Mar. 2012)
44. Fisher, D.: Oﬀense is Being Pushed Underground (Mar. 2012)
45. Flake, H.: Third Generation Exploits. In: Blackhat USA Windows Security. (Feb.
2002)
46. Flake, H.: Exploitation and State Machines: Programming the “weird machine”
revisited (Apr. 2011)
47. Fresi-Roglia, G., Martignoni, L., Paleari, R., Bruschi, D.: Surgically returning to
randomized lib(c). In: ACSAC. (Dec. 2009)
48. Giuﬀrida, C., Kuijsten, A., Tanenbaum, A.S.: Enhanced Operating System Se-
In:
curity Through Eﬃcient and Fine-grained Address Space Randomization.
Proceedings of the 21th USENIX conference on Security. (2012)
49. Goodin, D.: Legal goons threaten researcher for reporting security bug (2011)
50. Guido, D.: Vulnerability Disclosure (2011)
51. Hawkes, B.: Attacking the Vista Heap. In: Blackhat USA. (Aug. 2008)
52. Hiser, J., Nguyen-Tuong, A., Co, M., Hall, M., Davidson, J.W.: ILR: Where’d
My Gadgets Go? In: Proceedings of the 2012 IEEE Symposium on Security and
Privacy. (2012)
53. Jim, T., Morrisett, G., Grossman, D., Hicks, M., Cheney, J., Wang, Y.: Cyclone:
A safe dialect of c. In: USENIX ATC. (2002)
54. Jones, R.W.M., Kelly, P.H.J., C, M., Errors, U.: Backwards-compatible bounds
checking for arrays and pointers in c programs. In: Third International Workshop
on Automated Debugging. (1997)
55. jp: Advanced Doug lea’s malloc exploits. Phrack Magazine (Aug. 2003)
56. Kc, G.S., Keromytis, A.D., Prevelakis, V.: Countering Code-Injection Attacks
With Instruction-Set Randomization (Oct. 2003)
57. Kononenko, S.: Remote root vulnerability in Exim (Dec. 2010)
58. Krahmer, S.: x86-64 buﬀer overﬂow exploits and the borrowed code chunks ex-
ploitation technique (Sept. 2005)
59. Labs, M.S.: Security Labs Report, July - December 2011 Recap (Feb. 2012)
60. Lemos, R.: Does Microsoft Need Bug Bounties? (May 2011)
61. Litchﬁeld, D.: Defeating the Stack Based Buﬀer Overﬂow Prevention Mechanism
of Microsoft Windows 2003 Server. In: Blackhat Asia. (Dec. 2003)
62. Litchﬁeld, D.: Windows Heap Overﬂows. In: Blackhat USA Windows Security.
(Jan. 2004)
63. Lopatic, T.: Vulnerability in NCSA HTTPD 1.3 (Feb. 1995)
64. Marinescu, A.: Windows Vista Heap Management Enhancements. In: Blackhat
USA. (Aug. 2006)
65. MaXX: VUDO Malloc Tricks. Phrack Magazine (Aug. 2001)
66. McDonald, J.: Defeating Solaris/SPARC Non-Executable Stack Protection) (Mar.
1999)
67. McDonald, J., Valasek, C.: Practical Windows XP/2003 Heap Exploitation. In:
Blackhat USA. (Jul. 2009)
68. Meer, H.: Memory Corruption Attacks The (almost) Complete History.
In:
Blackhat USA. (Jul. 2010)
69. Mein, A.: Celebrating one year of web vulnerability research (2012)
70. Microsoft: A detailed description of the Data Execution Prevention (DEP) fea-
ture in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005, and
Windows Server 2003 (Sept. 2006)
71. Miller, M.: Preventing the Exploitation of SEH Overwrites (Sept. 2006)
72. Necula, G.C., Condit, J., Harren, M., Mcpeak, S., Weimer, W.: Ccured: Type-safe
retroﬁtting of legacy software. ACM Trans. on Progr. Lang. and Syst. (2005)
73. Nergal: The Advanced Return-Into-Lib(c) exploits (PaX Case study). Phrack
Magazine (Dec. 2001)
74. NIST: The Second Static Analysis Tool Exposition (SATE) 2009. (Jun 2010)
75. Okun, V., Guthrie, W.F., Gaucher, R., Black, P.E.: Eﬀect of static analysis tools
on software security: preliminary investigation. In: Proceedings of the 2007 ACM
workshop on Quality of protection. (2007)
76. Ostrand, T.J., Weyuker, E.J.: The distribution of faults in a large industrial
software system. In: ISSTA. (2002)
77. Pappas, V., Polychronakis, M., Keromytis, A.D.: Smashing the Gadgets: Hin-
dering Return-Oriented Programming Using In-Place Code Randomization. In:
Proceedings of the 2012 IEEE Symposium on Security and Privacy. (2012)
78. Phantasmagoria, P.: The Malloc Maleﬁcarum (Oct. 2005)
79. Planet, C.: A Eulogy for Format Strings. Phrack (Nov. 2010)
80. Polychronakis, M., Anagnostakis, K.G., Markatos, E.P.: Comprehensive shellcode
detection using runtime heuristics. In: ACSAC. (2010)
81. Richarte, G.: Four diﬀerent tricks to bypass StackShield and StackGuard protec-
tion (Jun. 2002)
82. Ruwase, O., Lam, M.: A practical dynamic buﬀer overﬂow detector. In: Proceed-
ings of NDSS Symposium. (February 2004)
83. Ryan Roemer, Erik Buchanan, H.S., Savage, S.: Return-Oriented Programming:
Systems, Languages, and Applications. ACM TISSEC (Apr 2010)
84. Salamat, B., Jackson, T., Gal, A., Franz., M.: Orchestra: Intrusion Detection
Using Parallel Execution and Monitoring of Program Variants in User-Space. In:
EuroSys. (2009)
85. SANS: CWE/SANS TOP 25 Most Dangerous Software Errors (Jun. 2011)
86. Schmidt, C., Darby, T.: The What, Why, and How of the 1988 Internet Worm
(Jul. 2001)
87. Scut: Exploiting Format String Vulnerabilities (Sept. 2001)
88. Seifried, K., Levy, E.: Interview with Elias Levy (Bugtraq) (2001)
89. Serna, F.J.: CVE-2012-0769, the case of the perfect info leak (Feb. 2012)
90. Shacham, H., Page, M., Pfaﬀ, B., Goh, E.J., Modadugu, N., Boneh, D.: On the
Eﬀectiveness of Address-Space Randomization. In: ACM CCS. (Oct. 2004)
91. SkyLined: Internet Exploiter 3: Technical details (Nov. 2004)
92. SkyLined: Internet Explorer IFRAME src&name parameter BoF remote compro-
mise (Oct. 2004)
93. SkyLined: Microsoft Internet Explorer DHTML Object handling vulnerabilities
(MS05-20) (Apr. 2005)
94. Slowinska, A., Stancescu, T., Bos, H.: Howard: a dynamic excavator for reverse
engineering data structures. In: Proceedings of NDSS 2011, San Diego, CA (2011)
95. Slowinska, A., Stancescu, T., Bos, H.: Body armor for binaries: preventing buﬀer
overﬂows without recompilation. In: Proceedings of the USENIX Security Sym-
posium. (2012)
96. StackShield: Stack Shield: A ”stack smashing” technique protection tool for Linux
(Dec. 1999)
97. Symantec: Symantec report on the underground economy (2008)
98. Team, P.: Address Space Layout Randomization (Mar. 2003)
99. The Pax Team: Design & Implementation of PAGEEXEC (2000)
100. Theriault, C.: Why is a 14-month-old patched Microsoft vulnerability still being
exploited? (Feb. 2012)
101. Twillman, T.: Exploit for proftpd 1.2.0pre6 (Sept. 1999)
102. van der Veen, V., dutt Sharma, N., Cavallaro, L., Bos, H.: Memory Errors: The
Past, the Present, and the Future. Technical Report IR-CS-73 (Nov. 2011)
103. Veracode: State of Software Security Report Volume 4. (Dec 2011)
104. VUPEN: Safari/MacBook ﬁrst to fall at Pwn2Own 2011 (Mar. 2011)
105. VUPEN: Pwn2Own 2012: Google Chrome browser sandbox ﬁrst to fall (Mar.
2012)
106. VUPEN: Pwn2Own 2012: IE 9 hacked with two 0day vulnerabilities (Mar. 2012)
107. Waisman, N.: Understanding and Bypassing Windows Heap Protection (Jun.
2007)
108. Wei, T., Wang, T., Duan, L., Luo, J.: Secure dynamic code generation against
spraying. In: ACM CCS. (2010)
109. X-Force, I.: IBM X-Force 2011 Mid-year Trend and Risk Report. (Sep 2011)
110. Younan, Y., Joosen, W., Piessens, F.: Code injection in C and C++: A Survey
of Vulnerabilities and Countermeasures. Technical Report CW386 (Jul. 2004)
111. Younan, Y., Philippaerts, P., Cavallaro, L., Sekar, R., Piessens, F., Joosen, W.:
PAriCheck: an eﬃcient pointer arithmetic checker for c programs. In: AsiaCCS.
(2010)
112. Zatko, P.: How to write Buﬀer Overﬂows (1995)
113. Zetter, K.: Three minutes with rain forrest puppy (2001)