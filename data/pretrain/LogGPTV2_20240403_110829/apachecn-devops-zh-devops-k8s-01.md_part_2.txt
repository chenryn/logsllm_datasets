当应用的规模越来越大时，开发人员试图划分几个模块。每个模块应该是独立的和可重用的，并且应该由不同的开发团队来维护。然后，当我们开始实现一个应用时，应用只是初始化并使用这些模块来高效地构建一个更大的应用。
下面的例子展示了 Nginx([https://www.nginx.com](https://www.nginx.com))在 CentOS 7 上使用什么样的库。表示 Nginx 使用`OpenSSL`、`POSIX thread`库、`PCRE`正则表达式库、`zlib`压缩库、`GNU C`库等等。所以，Nginx 没有重新发明来实现 SSL 加密、正则表达式等等:
```
$ /usr/bin/ldd /usr/sbin/nginx
 linux-vdso.so.1 =>  (0x00007ffd96d79000)
 libdl.so.2 => /lib64/libdl.so.2 (0x00007fd96d61c000)
 libpthread.so.0 => /lib64/libpthread.so.0   
  (0x00007fd96d400000)
 libcrypt.so.1 => /lib64/libcrypt.so.1   
  (0x00007fd96d1c8000)
 libpcre.so.1 => /lib64/libpcre.so.1 (0x00007fd96cf67000)
 libssl.so.10 => /lib64/libssl.so.10 (0x00007fd96ccf9000)
 libcrypto.so.10 => /lib64/libcrypto.so.10   
  (0x00007fd96c90e000)
 libz.so.1 => /lib64/libz.so.1 (0x00007fd96c6f8000)
 libprofiler.so.0 => /lib64/libprofiler.so.0 
  (0x00007fd96c4e4000)
 libc.so.6 => /lib64/libc.so.6 (0x00007fd96c122000)
 ...
```
The `ldd` command is included in the `glibc-common` package on CentOS.
# 包装管理
Java 语言和几种轻量级编程语言(如 Python、Ruby 和 JavaScript)都有自己的模块或包管理工具。比如 Java 的 Maven([http://maven.apache.org](http://maven.apache.org))，Python 的 pip ( [https://pip.pypa.io](https://pip.pypa.io) )，RubyGems([https://rubygems.org](https://rubygems.org))和 JavaScript 的 NPM([https://www.npmjs.com](https://www.npmjs.com))。
包管理工具允许您将您的模块或包注册到集中或私有的存储库中，还允许下载必要的包。下面的截图显示了 AWS SDK 的 Maven 存储库:
![](img/00010.jpeg)
当您向应用添加一些特定的依赖项时，Maven 会下载必要的包。以下截图是您在应用中添加`aws-java-sdk`依赖项时得到的结果:
![](img/00011.jpeg)
模块化编程可以帮助你提高软件开发速度，减少重新发明轮子的时间，所以它是现在最流行的开发软件应用的方式。
然而，当我们不断添加特性和逻辑时，应用需要越来越多的模块、包和框架的组合。这使得应用更加复杂和庞大，尤其是服务器端应用。这是因为它通常需要连接到一个数据库，如 RDBMS，以及一个身份验证服务器，如 LDAP，然后通过适当设计的 HTML 将结果返回给用户。
因此，开发人员采用了一些软件设计模式来开发一个应用，在应用中包含一堆模块。
# MVC 设计模式
流行的应用设计模式之一是**模型视图和控制器** ( **MVC** )。它定义了三层。**视图**层负责**用户界面** ( **UI** ) **输入输出** ( **I/O** )。**模型**层负责数据查询和持久化，如加载和存储到数据库。然后，**控制器**层负责介于**视图**和**模型**之间的业务逻辑:
![](img/00012.jpeg)
有一些框架可以帮助开发人员让 MVC 变得更容易，比如 Struts([https://struts.apache.org/](https://struts.apache.org/))、spring MVC([https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/))、Ruby on Rails([http://rubyonrails.org/](http://rubyonrails.org/))和 Django([https://www.djangoproject.com/](https://www.djangoproject.com/))。MVC 是一种成功的软件设计模式，它被用来作为现代 web 应用和服务的基础。
MVC 在每一层之间定义了一条边界线，允许许多开发人员共同开发同一个应用。然而，它会引起副作用。也就是说，应用中源代码的大小不断变大。这是因为数据库代码(**模型**)、呈现代码(**视图**)和业务逻辑(**控制器**)都在同一个 VCS 存储库中。它最终会对软件开发周期产生影响，而软件开发周期又变得更慢了！它被称为**单片**，其中包含了大量构建巨型 exe/war 程序的代码。
# 单片应用
单片应用定义没有明确的衡量标准，但它过去有 50 多个模块或包，50 多个数据库表，然后需要 30 多分钟来构建。当它需要添加或修改一个模块时，它会影响很多代码，因此开发人员会尽量减少应用代码的更改。这种犹豫会导致更糟糕的结果，以至于有时应用甚至会因为没有人想再维护代码而死亡。
因此，开发人员开始将单一应用分割成小块应用，并通过网络进行连接。
# 远程过程得
实际上，早在 20 世纪 90 年代，人们就已经尝试将应用分割成小块并通过网络进行连接。太阳微系统公司推出**太阳 RPC** ( **远程过程调用**)。它允许您远程使用该模块。热门的 Sun RPC 实现者之一是网络文件系统 T5(T6 T7)。中央处理器操作系统版本独立于 NFS 客户端和 NFS 服务器，因为它们基于 Sun RPC。
编程语言本身也支持 RPC 风格的功能。UNIX 和 C 语言都有`rpcgen`工具。它帮助开发人员生成一个存根代码，负责网络通信代码，这样开发人员就可以使用 C 函数风格，从困难的网络层编程中解脱出来。
Java 有 **Java** **远程方法调用** ( **RMI** )类似 Sun RPC，但是对于 Java 来说， **RMI 编译器** ( **rmic** )会生成连接远程 Java 进程的存根代码来调用方法并得到结果。下图显示了 Java RMI 过程流程:
![](img/00013.jpeg)
目标 C 也有**分布式对象**和。NET 有**远程处理**，所以大多数现代编程语言都有开箱即用的远程过程调用功能。
这些远程过程调用设计的好处是将应用分成多个进程(程序)。单个程序可以有独立的源代码库。尽管机器资源(中央处理器、内存)在 20 世纪 90 年代和 21 世纪受到限制，但它运行良好。
然而，它的设计和意图是使用相同的编程语言，并且也是为客户机/服务器模型架构而设计的，而不是分布式架构。此外，安全考虑较少；因此，不建议在公共网络上使用。
在 2000 年代，有一个倡议 **web 服务**使用 **SOAP** (HTTP/SSL)作为数据传输，使用 XML 作为数据表示和服务定义 **web 服务描述语言** ( **WSDL** )，然后使用**通用描述、发现和集成** ( **UDDI** )作为服务注册表来查找 Web 服务应用。然而，由于机器资源不丰富，并且由于 web 服务编程的复杂性和可维护性，它没有被开发人员广泛接受。
# RESTful 设计
走到 2010 年代，现在机器功率甚至智能手机都有充足的 CPU 资源，除此之外到处都是几百 Mbps 的网络带宽。因此，开发人员开始利用这些资源来尽可能简化应用代码和系统结构，从而加快软件开发周期。
基于硬件资源，使用 HTTP/SSL 作为 RPC 传输是一个自然的决定，但是由于有过 web 服务困难的经验，开发人员将其简化如下:
*   通过使 HTTP 和 SSL/TLS 成为标准传输
*   使用 HTTP 方式进行**创建/加载/上传/删除** ( **CLUD** )操作，如`GET` / `POST` / `PUT` / `DELETE`
*   通过使用 URI 作为资源标识符，例如:用户 ID 123 作为`/user/123/`
*   通过使用 JSON 作为标准数据表示
它被称为 **RESTful** 设计，已经被很多开发者广泛接受，成为分布式应用事实上的标准。RESTful 应用允许任何编程语言，因为它是基于 HTTP 的，所以 RESTful 服务器是 Java，客户端 Python 非常自然。
它给开发人员带来了自由和机会，可以轻松地执行代码重构、升级库，甚至切换到另一种编程语言。它还鼓励开发人员通过多个 RESTful 应用构建分布式模块化设计，这被称为微服务。
如果您有多个 RESTful 应用，那么就需要考虑如何在 VCS 上管理多个源代码，以及如何部署多个 RESTful 服务器。然而，持续集成和持续交付自动化降低了构建和部署多 RESTful 服务器应用的难度。
因此，微服务设计越来越受到 web 应用开发人员的欢迎。
# 微服务
虽然名字是 micro，但与 20 世纪 90 年代或 21 世纪的应用相比，它实际上已经足够重了。它使用完整的 HTTP/SSL 服务器栈，并包含整个 MVC 层。微服务设计应该关注以下主题:
*   **无状态**:这不会将用户会话存储到系统中，这有助于更容易地横向扩展。
*   **无共享数据存储**:微服务应该拥有数据库等数据存储。它不应该与其他应用共享。它有助于将易于重构和更新数据库方案的后端数据库封装在单个微服务中。
*   **版本化和兼容性**:微服务可以改变和更新 API，但是应该定义一个版本，并且应该具有向后兼容性。这有助于其他微服务和应用之间的解耦。
*   **集成 CI/CD** :微服务应该采用 CI 和 CD 流程来消除管理工作。
有一些框架可以帮助构建微服务应用，例如 Spring Boot([https://projects.spring.io/spring-boot/)](https://projects.spring.io/spring-boot/))和 Flask([http://flask.pocoo.org)](http://flask.pocoo.org))。但是，有很多基于 HTTP 的框架，所以开发人员可以自由尝试和选择任何首选的框架甚至编程语言。这就是微服务设计的妙处。
下图是单片应用设计和微服务设计之间的比较。它表明微服务(也称 MVC)设计与单片是一样的，它包含接口层、业务逻辑层、模型层和数据存储。
但不同的是，应用(服务)是由多个微服务构建的，不同的应用可以在下面共享同一个微服务:
![](img/00014.jpeg)
开发人员可以添加必要的微服务，并使用不会再影响现有应用(服务)的快速软件交付方法修改现有的微服务。
它是对整个软件开发环境和方法的突破，现在正被许多开发人员广泛接受。