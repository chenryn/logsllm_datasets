下一条指令为`LT`（即“less than”），指令功能如下：
指令 | 结果  
---|---  
mstore(p, v) | mem[p..(p+32)) := v  
lt(x, y) | 如果x < y则为1，否则为0  
如果第一个参数小于第二个参数，则`lt`会将1压入栈，否则就压入0。在我们的例子中，根据此时的栈布局，这条指令为`lt((however long the
msg.data or calldata is), 0x4)` （判断msg.data或calldata的大小是否小于0x4字节）。
为什么EVM需要检查我们提供的calldata大小是否至少为4字节？这里涉及到函数的识别过程。
EVM会通过函数`keccak256`哈希的前4个字节来识别函数。也就是说，函数原型（函数名以及所需参数）需要交给`keccak256`哈希函数处理。在这个合约中，我们可以得到如下结果：
    keccak256("greet()") = cfae3217...
    keccak256("kill()") = 41c0e1b5...
因此，`greet()`的函数标识符为`cfae3217`，`kill()`的函数标识符为`41c0e1b5`。Dispatcher会检查我们发往合约的`calldata`（或者消息数据）大小至少为4字节，以确保我们的确想跟某个函数交互。
函数标识符大小 **始终** 为4字节，因此如果我们发往智能合约的数据小于4字节，那么我们无法与任何函数交互。
事实上，我们可以在汇编代码中看到智能合约如何拒绝不符合规定的行为。如果`calldatasize`小于4字节，那么bytecode会立即跳到代码尾部，结束合约执行过程。
来具体看一下判断过程。
如果`lt((however long the msg.data or calldata is), 0x4)`
等于`1`（为真，即calldata小于4字节），那么从栈中取出2个元素后，`lt`会往栈中压入1。
    0: 1
接下来的指令为`PUSH 0x4c` 以及`JUMPI`。`PUSH 0x4c`指令执行后，栈的布局为：
    1: 0x4c
    0: 1
`JUMPI`代表的是“jump if”（条件满足则跳转），如果条件满足，则跳转到特定的标签或者位置。
指令 | 结果  
---|---  
mstore(p, v) | mem[p..(p+32)) := v  
lt(x, y) | 如果x < y则为1，否则为0  
jumpi(label, cond) | 如果cond非零则跳转至label  
在这个例子中，`label`为代码中的`0x4c`偏移地址，并且`cond`为1，因此程序会跳转到`0x4c`偏移处。
###  函数调度
来看一下如何从`calldata`中提取所需的函数。上一条`JUMPI`指令执行完毕后，栈处于清空状态。
第二个代码块中的命令如下：
    PUSH1 0x0
    CALLDATALOAD
    PUSH29 0x100000000....
    SWAP1
    DIV
    PUSH4 0xffffffff
    AND
    DUP1
    PUSH4 0x41c0e1b5
    EQ
    PUSH2 0x51
    JUMPI
`PUSH1 0x0`会将0压入栈顶。
    0: 0
`CALLDATALOAD`指令接受一个参数，该参数可以作为发往智能合约的calldata数据的索引，然后从该索引处再读取32个字节，指令说明如下：
指令 | 结果  
---|---  
mstore(p, v) | mem[p..(p+32)) := v  
lt(x, y) | 如果x < y则为1，否则为0  
jumpi(label, cond) | 如果cond非零则跳转至label  
calldataload(p) | 从calldata的位置p处读取数据（32字节）  
`CALLDATALOAD`会将读取到的32字节压入栈顶。由于该指令收到的索引值为0（来自于`PUSH1
0x0`命令），因此`CALLDATALOAD`会读取calldata中从0字节处开始的32个字节，然后将其压入栈顶（先弹出栈中的`0x0`）。新的栈布局为：
    0: 32 bytes of calldata starting at byte 0
下一条指令为`PUSH29 0x100000000....`。
    1: 0x100000000....
    0: 32 bytes of calldata starting at byte 0
`SWAPi`指令会将栈顶元素与栈中第`i`个元素进行交换。在这个例子中，该指令为`SWAP1`，因此指令会将栈顶元素与随后的第一个元素交换。
指令 | 结果  
---|---  
mstore(p, v) | mem[p..(p+32)) := v  
lt(x, y) | 如果x < y则为1，否则为0  
jumpi(label, cond) | 如果cond非零则跳转至label  
calldataload(p) | 从calldata的位置p处读取数据（32字节）  
swap1 … swap16 | 交换栈顶元素与随后的第i个元素  
    1: 32 bytes of calldata starting at byte 0
    0: PUSH29 0x100000000....
下一跳指令为`DIV`，即`div(x, y)`也就是x/y。在这个例子中，x为`32 bytes of calldata starting at byte
0`，y为`0x100000000....`。
`0x100000000....`的大小为29个字节，最开头为1，后面全部都为0。先前我们从calldata中读取了32个字节，将32字节的calldata除以`10000...`，结果为calldataload从索引0开始的前4个字节。这4个字节其实就是函数标识符。
如果大家还不明白，可以类比一下10进制的除法，`123456000 / 100 =
123456`，在16进制中运算过程与之类似。将32字节的某个值除以29字节的某个值，结果只保留前4个字节。
`DIV`运算的结果也会压入栈中。
    0: function identifier from calldata
接下来的指令为`PUSH4
0xffffffff`以及`AND`，这个例子中，对应的是将`0xffffffff`与calldata发过来的函数标识符进行`AND`操作。这样就把能栈中函数标识符的后28个字节清零。
随后是一条`DUP1`指令，可以复制栈中的第一个元素（这里对应的是函数标识符），然后将其压入栈顶。
    1: function identifier from calldata
    0: function identifier from calldata
接下来是`PUSH4
0x41c0e1b5`指令，这是`kill()`的函数标识符。我们将该标识符压入栈，目的是想将其与calldata的函数标识符进行对比。
    2: 0x41c0e1b5
    1: function identifier from calldata
    0: function identifier from calldata
下一条指令为`EQ`（即`eq(x,y)`），该指令会将x以及y弹出栈，如果两者相等则压入1，否则压入0。这个过程正是dispatcher的“调度”过程：将calldata函数标识符与智能合约中所有的函数标识符进行对比。
    1: (1 if calldata functio identifier matched kill() function identifier, 0 otherwise)
    0: function identifier from calldata
执行完`PUSH2 0x51`后，栈的布局如下：
    2: 0x51
    1: (1 if calldata functio identifier matched kill() function identifier, 0 otherwise)
    0: function identifier from calldata
之所以压入`0x51`，是希望条件满足时，可以通过`JUMPI`指令跳转到这个偏移处。换句话说，如果calldata发过来的函数标识符与`kill()`匹配，那么执行流程就会跳转到代码中的`0x51`偏移位置（即`kill()`函数所在位置）。
`JUMPI`执行之后，我们要么跳转到`0x51`偏移位置，要么继续执行当前流程。
现在栈中只包含一个元素：
    0: function identifier from calldata
细心的读者会注意到，如果我们没有跳转到`kill()`函数，那么dispatcher依然会采用相同逻辑，将calldata函数标识符与`greet()`函数标识符进行对比。Dispatcher会检查智能合约中的每个函数，如果不能找到匹配的函数，则会将我们引导至程序退出代码。
## 五、总结
以上是对以太坊虚拟机工作原理的简单介绍，大家如果想了解以太坊或者区块链安全方面内容，欢迎关注我的[推特](https://twitter.com/arvanaghi)。