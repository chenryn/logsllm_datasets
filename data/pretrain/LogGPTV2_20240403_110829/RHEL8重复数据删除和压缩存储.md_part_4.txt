在未使用的块中使用 `TRIM`{.literal} `或 DISCARD`{.literal} 不是 VDO
的唯一需求。任何精简置备的存储系统也会遇到同样的问题。
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#proc_monitoring-vdo_managing-free-space-on-vdo-volumes}监控 VDO {.title}
:::
此流程描述了如何从 VDO 卷获取使用效率的信息。
::: itemizedlist
**先决条件**
-   安装 VDO 软件。请参阅 ["安装
    VDO"一节](#deploying-vdo_deduplicating-and-compressing-storage.html#proc_installing-vdo-deploying-vdo "安装 VDO"){.xref}。
:::
::: itemizedlist
**流程**
-   使用 `vdostats`{.literal} 工具获取有关 VDO 卷的信息：
    ``` screen
    # vdostats --human-readable
    Device                   1K-blocks    Used     Available    Use%    Space saving%
    /dev/mapper/node1osd1    926.5G       21.0G    905.5G       2%      73%
    /dev/mapper/node1osd2    926.5G       28.2G    898.3G       3%      64%
    ```
:::
::: itemizedlist
**其它资源**
-   The `vdostats(8)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#reclaiming-space-for-vdo-on-file-systems_managing-free-space-on-vdo-volumes}在文件系统中为 VDO 回收空间 {.title}
:::
此流程在托管文件系统的 VDO 卷中回收存储空间。
除非文件系统使用 `DISCARD`{.literal}、`TRIM`{.literal} 或
`UNMAP`{.literal} 命令来自由通信块，否则 VDO 无法回收空间。
::: itemizedlist
**流程**
-   如果 VDO 卷中的文件系统支持丢弃（discard）操作，请启用它们。请参阅
    [第 5 章
    *丢弃未使用块*](#discarding-unused-blocks_deduplicating-and-compressing-storage.html "第 5 章 丢弃未使用块"){.xref}。
-   对于不使用 `DISCARD`{.literal}、`TRIM`{.literal} 或
    `UNMAP`{.literal} 的文件系统，您可以手动回收可用空间。保存由二进制 0
    组成的文件，以便占据空闲空间，然后删除该文件。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#reclaiming-space-for-vdo-without-a-file-system_managing-free-space-on-vdo-volumes}在没有文件系统的情况下为 VDO 回收空间 {.title}
:::
此流程在 VDO 卷中回收存储空间，该卷用作没有文件系统的块存储目标。
::: itemizedlist
**流程**
-   使用 `blkdiscard`{.literal} 实用程序。
    例如，一个 VDO 卷可以通过在子卷上部署 LVM
    来划分成多个子卷。在取消置备逻辑卷前，使用 `blkdiscard`{.literal}
    实用程序释放之前该逻辑卷使用的空间。
    LVM 支持 `REQ_DISCARD`{.literal}
    命令，并在适当的逻辑块地址上将请求转发到
    VDO，以便释放空间。如果您使用其他卷管理器，则还需要支持
    `REQ_DISCARD`{.literal}，或者支持用于 SCSI 设备的 `UNMAP`{.literal}
    或 ATA 设备的 `TRIM`{.literal}。
:::
::: itemizedlist
**其它资源**
-   The `blkdiscard(8)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#reclaiming-space-for-vdo-on-fibre-channel-or-ethernet-network_managing-free-space-on-vdo-volumes}在光纤通道或以太网网络中为 VDO 回收空间 {.title}
:::
此流程回收 VDO 卷（或部分卷）中被置备到光纤通道存储结构中的主机或使用
SCSI 目标框架（如 LIO 或 SCST）的以太网空间。
::: itemizedlist
**流程**
-   SCSI 启动器可以使用 `UNMAP`{.literal}
    命令在精简配置的存储目标上释放空间，但需要配置 SCSI
    目标框架来公告对此命令的支持。这通常通过在这些卷上启用精简置备来完成。
    运行以下命令，在基于 Linux 的 SCSI 启动器上验证对 `UNMAP`{.literal}
    的支持：
    ``` screen
    # sg_vpd --page=0xb0 /dev/device
    ```
    在输出中，验证 [*Maximum unmap LBA count*]{.emphasis} 的值大于零。
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#starting-or-stopping-vdo-volumes_maintaining-vdo}启动或停止 VDO 卷 {.title}
:::
您可以启动或停止给定 VDO 卷或所有 VDO 卷及其关联的 UDS 索引。
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#started-and-activated-vdo-volumes_starting-or-stopping-vdo-volumes}已启动并激活的 VDO 卷 {.title}
:::
在系统引导过程中，`vdo`{.literal} `systemd`{.literal} 单元
[*会自动启动*]{.emphasis} 所有配置为 [*激活*]{.emphasis} 的 VDO 设备。
安装 `vdo`{.literal} 软件包时，默认会安装并启用 The `vdo`{.literal}
`systemd`{.literal} 单元。本单元会在系统启动时自动运行
`vdo start --all`{.literal} 命令来调出所有激活的 VDO 卷。
您还可以通过在 `vdo create`{.literal} 命令中添加
`--activate=disabled`{.literal} 选项来创建不会自动启动的 VDO 卷。
::: title
**启动顺序**
:::
有些系统可能会将 LVM 卷放在 VDO
卷之上，或它们之下。在这些系统中，需要以正确顺序启动服务：
::: orderedlist
1.  必须首先启动 LVM 的下层。在大多数系统中，当安装 LVM
    软件包时会自动启动这个层。
2.  随后，`vdo`{.literal} `systemd`{.literal} 单元必须启动。
3.  最后，必须运行其他脚本才能在正在运行的 VDO 卷之上启动 LVM
    卷或其他服务。
:::
::: title
**停止卷所需的时间**
:::
停止 VDO 卷需要根据存储设备速度以及卷需要写入的数据量而有所不同：
::: itemizedlist
-   卷总是为每 1GiB UDS 索引写入大约 1GiB。
-   卷还写入与块映射缓存大小相等的数据量，再加上每个 slab 最多 8MiB。
-   卷必须完成处理所有未完成的 IO 请求。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#starting-a-vdo-volume_starting-or-stopping-vdo-volumes}启动 VDO 卷 {.title}
:::
此流程启动给定 VDO 卷或系统中的所有 VDO 卷。
::: itemizedlist
**流程**
-   要启动给定的 VDO 卷，请使用：
    ``` screen
    # vdo start --name=my-vdo
    ```
-   要启动所有 VDO 卷，请使用：
    ``` screen
    # vdo start --all
    ```
:::
::: itemizedlist
**其它资源**
-   The `vdo(8)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#stopping-a-vdo-volume_starting-or-stopping-vdo-volumes}停止 VDO 卷 {.title}
:::
此流程停止给定 VDO 卷或系统中的所有 VDO 卷。
::: orderedlist
**流程**
1.  停止卷。
    ::: itemizedlist
    -   要停止给定的 VDO 卷，请使用：
        ``` screen
        # vdo stop --name=my-vdo
        ```
    -   要停止所有 VDO 卷，请使用：
        ``` screen
        # vdo stop --all
        ```
    :::
2.  等待卷完成向磁盘写入数据。
:::
::: itemizedlist
**其它资源**
-   The `vdo(8)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#related-information-starting-or-stopping-vdo-volumes}相关信息 {.title}
:::
::: itemizedlist
-   如果在未清除关闭后重启，VDO
    会执行重建来验证其元数据的一致性，并在需要时修复它。有关重建过程的详情，请查看
    ["在未清除关闭后恢复 VDO
    卷"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#recovering-a-vdo-volume-after-an-unclean-shutdown_maintaining-vdo "在未清除关闭后恢复 VDO 卷"){.xref}。
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#automatically-starting-vdo-volumes-at-system-boot_maintaining-vdo}系统引导时自动启动 VDO 卷 {.title}
:::
您可以配置 VDO 卷以便在系统引导时自动启动。您还可以禁用自动启动。
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#started-and-activated-vdo-volumes_automatically-starting-vdo-volumes-at-system-boot}已启动并激活的 VDO 卷 {.title}
:::
在系统引导过程中，`vdo`{.literal} `systemd`{.literal} 单元
[*会自动启动*]{.emphasis} 所有配置为 [*激活*]{.emphasis} 的 VDO 设备。
安装 `vdo`{.literal} 软件包时，默认会安装并启用 The `vdo`{.literal}
`systemd`{.literal} 单元。本单元会在系统启动时自动运行
`vdo start --all`{.literal} 命令来调出所有激活的 VDO 卷。
您还可以通过在 `vdo create`{.literal} 命令中添加
`--activate=disabled`{.literal} 选项来创建不会自动启动的 VDO 卷。
::: title
**启动顺序**
:::
有些系统可能会将 LVM 卷放在 VDO
卷之上，或它们之下。在这些系统中，需要以正确顺序启动服务：
::: orderedlist
1.  必须首先启动 LVM 的下层。在大多数系统中，当安装 LVM
    软件包时会自动启动这个层。
2.  随后，`vdo`{.literal} `systemd`{.literal} 单元必须启动。
3.  最后，必须运行其他脚本才能在正在运行的 VDO 卷之上启动 LVM
    卷或其他服务。
:::
::: title
**停止卷所需的时间**
:::
停止 VDO 卷需要根据存储设备速度以及卷需要写入的数据量而有所不同：
::: itemizedlist
-   卷总是为每 1GiB UDS 索引写入大约 1GiB。
-   卷还写入与块映射缓存大小相等的数据量，再加上每个 slab 最多 8MiB。
-   卷必须完成处理所有未完成的 IO 请求。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#activating-a-vdo-volume_automatically-starting-vdo-volumes-at-system-boot}激活 VDO 卷 {.title}
:::
此流程激活 VDO 卷使其自动启动。
::: itemizedlist
**流程**