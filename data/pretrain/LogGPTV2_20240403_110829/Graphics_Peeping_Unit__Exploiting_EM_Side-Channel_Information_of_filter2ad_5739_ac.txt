almost every direction no matter which GPU is used. On the
other hand, in the second scenario, the all-metal computer case
can attenuate the strength of the EM signals in the directions
from 270° to 90° counter-clockwise, but the signals of our
interest can still be picked up at a distance of 3 meters or more
in many other directions for each GPU. Notice that, nowadays,
modern-looking computer cases with a translucent side panel
dominate the market [44] and are in effect extremely popular
among users of mid-range to high-end GPUs. Therefore, in
reality, it is very likely that an attacker can easily capture the
EM emanations of interest at a very far distance. Even if a
computer case with all metal sides is used, the exploitable
EM signals can still be measured from several meters away.
TABLE II: The signal strength reduction due to the walls
RTX 3060
-0.51 dB
-4.50 dB
GTX 1080
-1.32 dB
-8.64 dB
GTX 1650
-0.21 dB
-5.24 dB
RX 5600
-1.03 dB
-4.28 dB
RX 5700
-1.18 dB
-6.92 dB
Plaster Wall
Concrete Wall
RX 580
-1.06 dB
-4.41 dB
We also isolate the GPU machine having the modern-
looking computer case in two rooms and test
if the EM
emanations of our interest can be captured from the outside
of the rooms. The ﬁrst one is an ofﬁce room whose wall is
as thick as 15 cm and made of plaster, and the second one
is a lab room which has very thick concrete walls (∼15 cm).
We measure and compare the strengths of the exploitable EM
signals when the antenna and the target machine are separated
by 1 m with and without the walls in between. Table II shows
the EM signal strength reduction due to the walls. From the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1444
results, we can observe that the plaster wall can only reduce the
EM signal strength by at most 1.32 dB while the concrete wall
can reduce the strength by up to 8.64 dB. These results indicate
negligible effects of normal plaster walls and manageable
effects of thick concrete walls on potential attacks exploiting
this newly discovered EM side-channel vulnerability.
V. SIGNAL TRANSFORMATION AND ENHANCEMENT
Although we may directly exploit the derived spectrograms
like the ones shown in Figure 2 to identify activities, it can
become very difﬁcult to do so under circumstances where the
SNR is too low to induce visible stripes on the spectrograms.
To address this problem, we introduce two signal processing
techniques that can preserve the target signal’s appearance and
disappearance patterns even when the SNR becomes very low.6
A. Time Series Derivation
As mentioned in Section IV-A, SSC is used to spread the
energy of a clock signal over a frequency range for meeting
the EMC regulations. Given a clock whose frequency is fc,
SSC in effect scatters its energy to a series of N sub-clocks
at fc − nfm, where 0 ≤ n < N and fm is the modulating
frequency [52]. Typically, fm is 30 to 33 kHz. Due to factors
like path loss or better EM shielding, the power of such
sub-clock signals may become too weak compared to the
background noise. Inspired by the work in [52], we leverage
the folding technique to amplify the manifestation of the
targeted memory clock signal being present.
Assume we perform an M-point discrete Fourier transform
(DFT) to derive a spectrum X. Since the frequencies of the
sub-clocks are separated by fm, they should be separated by
Δ DFT bins in X, where
Δ = fm × M
fs
,
(1)
and fs is the sampling rate. Let us deﬁne S[i] as the sum of
the magnitudes of the ith, (i − Δ)th, ··· , [i − (N − 1) × Δ]th
DFT bins of X, namely we have
S[i] =
N−1(cid:2)
j=0
X[i − j × Δ] .
(2)
If the clock frequency fc is located in the kth bin of X, S[k]
can be treated as the accumulated energy of all the sub-clocks,
and it will reach a much higher value compared to any S[i]
where i (cid:4)= k, given the fact that sub-clocks coherently increase
the power at the corresponding frequency locations.
Therefore, given a sequence of sampled values, it is divided
into subsequences without overlap and each subsequence has
L samples. (We should have L ≤ M, and if L < M, it is ex-
panded to M using zero-padding.) For the ith subsequence, we
calculate S[k]i, and again the kth bin in X contains the highest
sub-clock’s spectral content. The sequence {S[k]0, S[k]1,···}
will be the one-dimensional time series data derived from
6The implementation is available at https://github.com/0x5ec1ab/gpu-mem-
em-sig-processing.
the measured EM emanations. We show an example of this
technique in Appendix B.
Note that, although fm is unknown to us, it can be exhaus-
tively searched given the fact that its search space is small (30
to 33 kHz). An incorrect fm will not produce noticeably high
S[k]’s. Another unknown parameter is N, i.e., the number of
sub-clocks. Nevertheless, we do not need to know the exact
number. The GPU memory sub-clocks generated by SSC span
at least 4 MHz, which means that there are at least 121 sub-
clocks even when fm is 33 kHz. Thus, the number 120, which
is large enough to make S[k] stand out, may be chosen as N
if no other information is available.
Another issue is that although fc is known and theoretically
ﬁxed, it may still vary in a small range due to clock jitters;
hence, if the DFT frequency resolution is ﬁne-grained (e.g.,
in this paper we use 100 Hz), the kth bin computed directly
from fc may not be the one where the highest sub-clock truly
locates. To address this problem, we compute multiple S[i]’s
around k and update k to the one whose result is signiﬁcantly
larger than others.
It is worth highlighting that, aside from coping with the low
SNR problem, using this time series derivation technique can
also help separate signals generated by multiple similar GPUs.
Given two GPUs having the same second lowest WCK, their
generated signals in the spectrum can be mingled together; yet,
we observe that the kth bin of fc for one GPU may be different
from the kth bin for the other one (e.g., due to imperfection of
clocks), and thus two independent traces can be derived. For
more detailed discussion, please refer to Appendix C.
B. Strong Noise Contamination Effect Reduction
The second lowest WCK frequency of all NVIDIA GPUs
is 810 MHz, and their SSC sub-clocks are distributed in the
800 MHz – 810 MHz frequency band. In certain areas, this
band may be too noisy for us. For instance, in North America,
the Federal Communications Commission allocates the 614
MHz – 806 MHz frequency band for TV communication use.
The contamination induced by such strong background noise
makes it very difﬁcult to ﬁnd the correct sub-clock positions
using the aforementioned technique. As an example, Figure 6
(A) shows a spectrum where communication signals exist, and
we cannot rely on comparing different S[i]’s around the initial
k to ﬁnd where the highest sub-clock truly locates, because
one signiﬁcantly large noise peak can easily dwarf the sum of
all the sub-clocks.
100
50
e
d
u
t
i
n
g
a
M
0
800
50
0
-50
800
f
f
i
D
e
d
u
t
i
n
g
a
M
(A)
802
804
806
808
810
812
814
816
818
820
Frequency(MHz)
(B)
802
804
806
808
810
812
814
816
818
820
Frequency(MHz)
Fig. 6: Spectrum comparison: (A) the original spectrum X,
and (B) the derived spectrum X(cid:2) after the proposed operation
is performed
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1445
To address this issue, we propose to process the spectrum X
using a convolution kernel [−0.5, 1, −0.5]. In other words,
we derive X(cid:2) from X as
X(cid:2)[i] = − 1
2
X[i − 1] + X[i] − 1
2
X[i + 1] ,
(3)
and replace X with X(cid:2) in Equation 2. Note that, after this
operation, the local peaks originally in X should have positive
values in X(cid:2); otherwise, negative values. Thus, this operation
will pinpoint all
the local peaks which include (most of)
the sub-clocks. Figure 6 (B) shows the spectrum after the
operation is performed on the one in Figure 6 (A).
The reason why using X(cid:2) can help reduce the negative effect
of strong background noise on ﬁnding the correct sub-clock
positions is that: (1) if the highest sub-clock is in the jth bin,
S[j] will sum up the bins which are certainly dependent (as
they correspond to sub-clocks), and thus it should be a positive
value; but (2) if the highest sub-clock is not in the jth bin, S[j]
will be the sum of bins which are independent, and given
the fact that the kernel makes the expectation of randomly
summing up X(cid:2) bins be 0, S[j] is very likely to be close to 0
in this case. Therefore, we can still ﬁnd the correct sub-clock
positions even in the presence of strong background noise.
10
]
k
[
S
5
0
0
3
2
1
0
0
]
k
[
S
0.5
0.5
1
1
1.5
1.5
2
Time (s)
2
Time (s)
2.5
2.5
3
3
3.5
3.5
(A)
(B)
4
4
Fig. 7: Time series comparison: (A) time series derived from
X’s, and (B) time series derived from X(cid:2)’s
Figure 7 demonstrates the effectiveness of our approach
in the context of NVIDIA RTX 3060 being used with the
existence of strong background noise as in Figure 6 (A). The
EM signal of the second lowest WCK should appear around
every 0.5 s, namely, there should be a peak in the derived
time series about every 0.5 s. However, due to the strong
noise contaminating the frequency band of our interest, the
peak appearance pattern is completely incorrect in Figure 7
(A). After applying the proposed approach, we can observe
the correct peak appearance pattern in Figure 7 (B).
VI. CASE STUDY 1: WEBSITE FINGERPRINTING
In Section IV, we have illustrated that GPU performance
level switching patterns derived from the EM emanations of
interest can be exploited to identify which application is being
launched by a user. To further exemplify the exploitability of
this DVFS-induced EM side-channel vulnerability, we show a
case study in this section where an attacker can leverage this
vulnerability to infer which webpages have been visited by a
victim user, namely, to mount a website ﬁngerprinting attack.
A. GPU-Accelerated Webpage Rendering
When browsing websites, the GPU is actually involved in a
much more complicated fashion than simply showing pages on
the screen. Modern web browsers such as Chrome and Firefox
use GPU not only for displaying but also for helping webpage
rendering.
Webpage rendering is a procedure that translates an HTML
ﬁle along with its associated cascading style sheets (CSS) and
JavaScript code into a rasterized image. The whole procedure
consists of multiple stages: it builds a document object model
(DOM) tree, calculates the style for each DOM node, creates
the layout of the page, separates the DOM-represented page
into layers, rasterizes each layer, and combines the rasterized
results into a ﬁnal screen image [24]. In such a complicated
procedure, GPU is often leveraged to accelerate operations
that involve large numbers of pixels. For example, a layer is
normally divided into a grid of tiles, and these tiles need to be
rasterized into bitmaps which are then uploaded to the GPU as
textures. In the presence of GPU-accelerated rasterization, the
GPU may be directly used to rasterize many tiles into textures,
based on certain heuristics (e.g., if the tiles can be affected
by animations or transition effects,
is better to employ
the GPU). In addition, the GPU can be used to accelerate
compositing textures into screen images.
it
B. EM-Based Website Fingerprinting
As stated above, GPU is extensively used during webpage
rendering in a modern web browser. Since different webpages
have different designs and contents, rendering them are likely
to have different GPU workloads generated. In the light of the
investigation presented in Section IV-B, such differences in
workloads should be able to induce different patterns of GPU
performance level switches, and these patterns can be captured
approximately through monitoring the EM emanations of the
GPU memory clock at a speciﬁc frequency. Exploiting such
derived patterns, we should be able to distinguish the rendered
webpages from each other (i.e., ﬁngerprinting).
40
]
k
[
S
20
0
0
40
]
k
[
S
20
0
0
40
]
k
[
S
20
0
0
0.5
0.5
0.5
1
1
1
(A) Google
1.5
2
Time (s)
2.5
(B) Amazon
1.5
2
Time (s)
2.5
(C) Youtube
1.5
2
Time (s)
2.5
3
3
3
3.5
3.5
3.5
4
4
4
Fig. 8: Time series derived from the EM emanations that are
measured when opening three websites using Chrome on a
system equipped with an AMD Radeon RX 580 GPU
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:13:36 UTC from IEEE Xplore.  Restrictions apply. 
1446
Speciﬁcally, we monitor the EM emanations generated by
the WCK at its second lowest frequency and leverage the
techniques described in Section V to derive time series to
ﬁngerprint webpage rendering activities. To illustrate this, we
use three popular websites, Google, Amazon, and Youtube,
as an example, and compare the time series derived from the
signals captured when opening these three websites in Chrome
on a system equipped with an AMD Radeon RX 580 GPU.
Chrome uses GPU-accelerated webpage rendering by default.
Accordingly, rendering the homepages of these three websites
should create different GPU workloads, as their contents differ
signiﬁcantly (e.g., Google homepage is more concise, Amazon
has more animations, and Youtube is populated with videos).
Figure 8 shows the corresponding time series, and as expected,
we can notice clear differences between them.
From Figure 8, we can observe that the peaks in the time
series data appear very frequently corresponding to Youtube