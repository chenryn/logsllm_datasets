      runAsUser: 100
      runAsGroup: 1000
```
`nginx-pod`内的`nginx`容器作为用户运行，用户的 UID 为`100`，GID 为`1000`。除了之外，`nginx`容器获得了额外的`NETWORK_ADMIN`功能，并且根文件系统被设置为只读。这里的 YAML 文件只显示了一个如何配置安全上下文的示例。请注意，对于在生产环境中运行的容器，不建议添加`NETWORK_ADMIN`。
## Pod 的安全上下文
安全上下文用于容器级别，这意味着安全属性将应用于容器内的所有容器。
以下是 pod 级别的主要安全属性列表:
*   **fsGroup** :这是一个适用于所有容器的特殊补充组。该属性的有效性取决于卷类型。本质上，它允许`kubelet`使用补充的 GID 将装载卷的所有权设置到 pod。
*   **sysctls** : `sysctls`用于在运行时配置内核参数。在这种情况下，`sysctls`和内核参数可以互换使用。这些`sysctls`命令是应用于 pod 的命名空间内核参数。下面的`sysctls`命令被命名为:`kernel.shm*`、`kernel.msg*`、`kernel.sem`和`kernel.mqueue.*`。不安全`sysctls`默认禁用，在生产环境中不应启用。
*   **运行用户**:这是为了指定运行容器映像入口点过程的 UID。默认设置是映像元数据中指定的用户(例如 Dockerfile 中的`USER`指令)。该属性在`SecurityContext`中也可用，在容器级生效。如果在`SecurityContext`和`PodSecurityContext`中设置了该属性，则在容器级别指定的值优先。
*   **runAsGroup** :类似于`runAsUser`，这是为了指定运行容器入口点进程的 GID。该属性在`SecurityContext`中也可用，在容器级生效。如果在`SecurityContext`和`PodSecurityContext`中设置了该属性，则在容器级别指定的值优先。
*   **runAsNonRoot** :默认设置为`false`，设置为`true`可以验证容器中的进程不能作为 Root 用户运行(UID=0)。验证由`kubelet`完成。通过将其设置为`true`，`kubelet`将阻止容器以 root 用户身份运行。将其设置为`true`是一个很好的安全做法。该属性在`SecurityContext`中也可用，在容器级生效。如果在`SecurityContext`和`PodSecurityContext`中都设置了该属性，则在容器级别指定的值优先。
*   **seLinuxOptions** :这是为容器指定 SELinux 上下文而设计的。默认情况下，如果没有指定，容器运行时将为容器分配一个随机的 SELinux 上下文。该属性在`SecurityContext`中也有，在容器级生效。如果在`SecurityContext`和`PodSecurityContext`中设置了该属性，则在容器级别指定的值优先。
请注意，属性`runAsUser`、`runAsGroup`、`runAsNonRoot`和`seLinuxOptions`在容器级别的`SecurityContext`和容器级别的`PodSecurityContext`中都可用。这为用户提供了安全控制的灵活性和极端重要性。`fsGroup`和`sysctls`没有其他的常用，所以 o 只在必要的时候使用。
## 外观轮廓
一个 AppArmor 概要文件通常定义进程拥有什么样的 Linux 能力，容器可以访问什么样的网络资源和文件等等。为了使用 AppArmor 配置文件来保护容器或容器，您需要更新容器的注释。让我们看一个例子，假设您有一个 AppArmor 配置文件来阻止任何文件写活动:
```
#include 
profile k8s-apparmor-example-deny-write flags=(attach_disconnected) {
  #include 
  file,
  # Deny all file writes.
  deny /** w,
}
```
请注意，AppArmor 不是一个 Kubernetes 对象，就像一个 pod、部署等等。不能通过`kubectl`操作。您将必须 SSH 到每个节点，并将 AppArmor 配置文件加载到内核中，以便 pod 可以使用它。
以下是加载设备配置文件的命令:
```
cat /etc/apparmor.d/profile.name | sudo apparmor_parser -a
```
然后，将配置文件置于`enforce`模式:
```
sudo aa-enforce /etc/apparmor.d/profile.name
```
一旦加载了 apparemor 配置文件，您可以更新 pod 的注释，以使用 apparemor 配置文件来保护您的容器。下面是一个将 AppArmor 配置文件应用于容器的示例:
```
apiVersion: v1
kind: Pod
metadata:
  name: hello-apparmor
  annotations:
    # Tell Kubernetes to apply the AppArmor profile 
    # "k8s-apparmor-example-deny-write".
    container.apparmor.security.beta.kubernetes.io/hello: 
      localhost/k8s-apparmor-example-deny-write
spec:
  containers:
  - name: hello
    image: busybox
    command: [ "sh", "-c", "echo 'Hello AppArmor!' && sleep 1h" ]
```
`hello-apparmor`内的容器在回应`Hello AppArmor!`信息后除了休眠什么都不做。当它运行时，如果你从一个容器启动一个 shell 并写入任何文件，它将被 AppArmor 阻止。即使编写一个健壮的 AppArmor 配置文件并不容易，您仍然可以创建一些基本的限制，例如拒绝写入某些目录、拒绝接受原始数据包以及将某些文件设为只读。此外，在将概要文件应用到生产集群之前，先测试它。像贝恩这样的开源工具可以帮助创建容器的 AppArmor 配置文件。
我们不打算在本书中深入讨论 seccomp 概要文件，因为为微服务编写 seccomp 概要文件并不容易。即使是应用开发人员也不知道他们开发的微服务的什么系统调用是合法的。尽管您可以打开审核模式来避免破坏微服务的功能，但是构建一个健壮的 seccomp 概要文件仍然任重道远。另一个原因是这个特性直到 1.17 版本还处于 alpha 阶段。根据 Kubernetes 的官方文档，作为 alpha 意味着默认情况下它是禁用的，可能有问题，并且只建议在短期测试集群中运行。当 seccomp 上有任何新的更新时，我们可能会在稍后的日期回来更详细地介绍 seccomp。
我们已经介绍了如何在构建时保护 Kubernetes PODS。接下来，让我们看看如何在运行时恢复 KubernetesPODS。
# 粮食安全政策的力量
Kubernetes PodSecurityPolicy 是一个集群级资源，它控制 pod 规范的安全敏感方面，通过该规范限制 Kubernetes pod 的访问权限。作为 DevOps 工程师，您可能希望使用 PodSecurityPolicy 来限制大多数工作负载以有限的访问权限运行，同时只允许少数工作负载以额外的权限运行。
在这一节中，我们将首先仔细研究一个 PodSecurityPolicy，然后我们将介绍一个开源工具`kube-psp-advisor`，它可以帮助构建一个自适应的 PodSecurityPolicy f 或者正在运行的 Kubernetes 集群。
## 理解粮食安全政策
您可以将 PodSecurityPolicy 视为评估 pod 的规范中定义的安全属性的策略。只有那些安全属性符合 PodSecurityPolicy 要求的 pods 才会被允许进入集群。例如，PodSecurityPolicy 可用于阻止大多数权限 pods 的启动，同时只允许那些必要的或有限的 pods 访问主机文件系统。
以下是由 PodSecurity 策略控制的主要安全属性:
*   **权限**:决定 Pod 是否可以在权限模式下运行。
*   **主机 PID** :确定 pod 是否可以使用主机 PID 命名空间。
*   **主机网络**:确定 pod 是否可以使用主机网络命名空间。
*   **主机 IPC** :确定 pod 是否可以使用主机 IPC 命名空间。默认设置为`true`。
*   **允许能力**:指定可以添加到容器中的能力列表。默认设置为空。
*   **默认添加功能**:指定默认情况下将添加到容器中的功能列表。默认设置为空。
*   **要求数据能力**:指定将从容器中删除的能力列表。请注意，不能在`allowedCapabilities`和`requiredDropCapabilities`字段中同时指定功能。默认设置为空。
*   **readOnlyRootFilesystem** :当设置为`true`时，PodSecurityPolicy 将强制容器使用只读根文件系统运行。如果在容器的安全上下文中将属性显式设置为`false`，pod 将被拒绝运行。默认设置为`false`。
*   **运行用户**:指定可以在容器和容器的安全上下文中设置的允许用户标识。默认设置允许所有。
*   **运行组**:指定可以在容器和容器的安全上下文中设置的允许组标识。默认设置允许所有。
*   **允许权限升级**:确定 pod 是否可以提交允许权限升级的请求。默认设置为`true`。
*   **允许主机路径**:指定可由 pod 装载的主机路径列表。默认设置允许所有。
*   **卷**:指定可由 pod 装载的卷类型列表。例如，`secret`、`configmap`和`hostpath`是有效的音量类型。默认设置允许所有。
*   **seLinux** :指定可以在容器和容器的安全上下文中设置的允许的`seLinux`标签。默认设置允许所有。
*   **允许不安全的**:允许不安全的`sysctls`运行。默认设置不允许。
现在，让我们来看一个食品安全政策的例子:
```
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
    name: example
spec:
  allowedCapabilities:
  - NET_ADMIN
  - IPC_LOCK
  allowedHostPaths:
  - pathPrefix: /dev
  - pathPrefix: /run
  - pathPrefix: /
  fsGroup:
    rule: RunAsAny
  hostNetwork: true
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - hostPath
  - secret
```
这个 PodSecurityPolicy 允许`NET_ADMIN`和`IPC_LOCK`功能，从主机和 Kubernetes 的机密卷中挂载`/`、`/dev`和`/run`。它不强制任何文件系统组标识或补充组，它还允许容器作为任何用户运行，访问主机网络命名空间，并作为权限容器运行。策略中没有强制执行 SELinux 策略。
要启用此 Pod 安全策略，您可以运行以下命令:
```
$ kubectl apply -f example-psp.yaml
```
现在，让我们验证 Pod 安全策略是否已成功创建:
```
$ kubectl get psp
```
输出将如下所示:
```
NAME      PRIV     CAPS                           SELINUX    RUNASUSER   FSGROUP    SUPGROUP   READONLYROOTFS   VOLUMES
example   true     NET_ADMIN, IPC_LOCK            RunAsAny   RunAsAny    RunAsAny   RunAsAny   false            hostPath,secret
```
创建 Pod 安全策略后，还需要一个步骤来实施它。您将必须授予用户、组或服务帐户使用`PodSecurityPolicy`对象的权限。这样，pod 安全策略有权根据相关的服务帐户评估工作负载。这是一个如何实施公共安全政策的例子。首先，您需要创建一个使用 PodSecurityPolicy 策略的集群角色:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: use-example-psp
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - example
```