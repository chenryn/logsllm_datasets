12. MIT Lincoln Labs. DARPA Intrusion Detection Evaluation.:
http://www.ll.mit.edu/IST/ideval/. Accessed March 13, 2005.
13. The Snort homepage: http://www.snort.org/. Accessed March 13, 2005.
14. The TCPREPLAY & FLOWRELAY homepage: http://tcpreplay.sourceforge.net/.
Accessed March 14, 2005.
15. The TCPDUMP homepage: http://www.tcpdump.org/. Accessed March 14, 2005.
16. The libpcap project homepage: http://sourceforge.net/projects/libpcap/. Accessed
March 14, 2005.
17. Feng, Wu-chang, Goel, A., Bezzaz, A., Feng, Wu-chi, Walpole, J.: TCPivo: a high-
performance packet replay engine. MoMeTools ’03: Proceedings of the ACM SIG-
COMM workshop on Models, methods and tools for reproducible network research
(2003) 57–64.
18. Cheng, Y., H¨olzle, U., Cardwell, N., Savage, S., Voelker, C. M.: Monkey See, Mon-
key Do: A Tool for TCP Tracing and Replaying. USENIX Annual Technical Con-
ference, General Track (2004) 87–98.
19. The Tomahawk Test Tool homepage: http://tomahawk.sourceforge.net/. Accessed
March 14, 2005.
20. The LIBNET project homepage: http://www.packetfactory.net/libnet/. Accessed
March 16, 2005.
21. The libpcap project homepage: http://sourceforge.net/projects/libpcap/. Accessed
March 14, 2005.
22. Stevens, W. R., Write, G. R.: TCP/IP illustrated (vol. 2): the implementation.
Addison-Wesley Longman Publishing Co., Inc. (1995).
23. Jacobson, V.: Congestion avoidance and control. SIGCOMM Comput. Commun.
Rev. 18(4) (1988) 314–329.
24. Jacobson, V.: Berleley TCP Evolution from 4.3-Tahoe to 4.3-Reno. Proceedings of
the Eighteenth Internet Engineering Task Force, University of British Columbia,
Vancouver, Canada (1990).
25. Jacobson, V.: Modiﬁed TCP Congestion Avoidance Algorithm. end2end-interest
mailing list, (1990).
On Interactive Internet Traﬃc Replay
263
Appendix: The Eﬀectiveness Test Result of IDEVAL99
Dataset
Table 3 present the detection results from Snort over the IDEVAL99 dataset
with diﬀerent test conditions. Snort generated a slightly diﬀerent number of
alerts for each traﬃc on 11 diﬀerent signatures. Except the bold-ed signatures
in Table 3, diﬀerences in the number of alerts were from connection drops by
SYN packet losses at our BSD ﬁrewall. The ﬁrst signature is web bug 0x0 gif
attempt that issues an alert when Snort detects an access to a null gif image
in HTTP packets. For this signature, Snort issued 3 less alerts on TCPopera
(1%-loss) traﬃc. After the survey on alerts, we found that there was a single
TCP connection drop by a SYN packet loss. Also, Snort failed to detect 2 alerts
from another TCP connections that has normally completed replaying.
Table 3. The detection results from Snort over various test conditions. All Snort rules
and stream 4 analysis are enabled during the test.
Signature
ICMP Destination Port Unreachable
ICMP PING BSDtype
ICMP PING *NIX
ICMP PING
INFO web bug 0x0 gif attempt
ICMP Echo Reply
INFO TELNET access
INFO TELNET login incorrect
POLICY FTP anonymous login attempt
CHAT IRC nink change
CHAT IRC message
ATTACK-RESPONSES Invalid URL
ATTACK-RESPONSES 403 Forbidden
SHELLCODE x86 NOOP
SCAN FIN
(stream4) (Fin scan) detection
X11 open
(stream4) Possible rxmt detection
(stream4) WINDOW violation detection
INFO FTP Bad login
FTP .rhosts
WEB-MISC http directory traversal
BACKDOOR MISC Solaris 2.5 attempt
ATTACK-RESPONSES id check returned userid
ATTACK-RESPONSES directory listing
Total
Number of alerts
Input TCPopera
trace no loss 1% loss
89
89
17
17
17
17
152
152
185
185
152
152
289
290
47
47
118
118
7
7
280
281
2
2
5
5
1
1
0
15
0
15
1
1
0
2
4
0
12
12
1
1
1
1
1
1
1
1
30
30
1442 1412
89
17
17
152
182
151
286
46
117
7
280
2
5
1
0
0
1
4
6
11
1
1
1
1
30
1408
264
S.-S. Hong and S. Felix Wu
The second signature is the TELNET access signature that issues an alert
when Snort detects a remote user successfully login to a telnet server. Snort
issued one less alert from TCPopera (no-loss) and 4 less alerts from TCPopera
(1%-loss), comparing to the Input trace. The reason for one less alert in TCP-
opera (no-loss) is because TCPopera discards an unnecessary duplicate data
packet transmission. Since TCPopera performs the stateful TCP replaying, it
can distinguish any unnecessary packet transmission. For TCPopera (1%-loss),
except one less alert from discarding unnecessary packet transformation, The
TCP connection drop was the reason for one less alert and Snort failed to detect
two of them from the connection has been completed normally.
The next two signatures we move on are SCAN FIN and (stream4) FIN scan
detection. Basically, these two signatures issue the alert when Snort observes a
packet with only FIN ﬂag is set.8 For these signatures, Snort issued no alert for
both TCPopera traﬃc. This is the side eﬀect of the stateful replaying of TCP
connections because it diacrads packets that does not belong to any existing
TCP connection, called orphan packets. As a result, Snort has no chance to see
these FIN scanning packets. For the next version of TCPopera, we have the plan
to implement the option for replaying orphan packets to provide an option for
users to choose whether orphan packets are replayed or not.
The next two signatures are stream4 analysis. For the (stream4) possible rxmt
detection rule, Snort issued 2 alerts from the Input trace and no alerts from
TCPopera (no-loss). TCPopera discarded two unnecessary retransmissions in
the Input trace during the stateful operation. In contrast, Snort generated 4
new alerts for TCPopera (1%-loss) because of the diﬀerence in timing between
the Snort’s sniﬃng point and an internal TCPopera node. For the (stream4)
WINDOW violation detection rule, Snort only issued alerts for TCPopera traﬃc.
This is the result of mishandling of RST packets we described in the analysis of
ITRI dataset.
8 A packet with only a FIN ﬂag is uncommon behavior because a FIN ﬂag is usually
combined with ACK ﬂag.
Interactive Visualization for
Network and Port Scan Detection
Chris Muelder1, Kwan-Liu Ma1, and Tony Bartoletti2
1 University of California, Davis
2 Lawrence Livermore National Laboratory
Abstract. Many times, network intrusion attempts begin with either
a network scan, where a connection is attempted to every possible des-
tination in a network, or a port scan, where a connection is attempted
to each port on a given destination. Being able to detect such scans can
help identify a more dangerous threat to a network. Several techniques
exist to automatically detect scans, but these are mostly dependant on
some threshold that an attacker could possibly avoid crossing. This pa-
per presents a means to use visualization to detect scans interactively.
Keywords: Network security, information visualization, intrusion detec-
tion, user interfaces, port scans, network scans.
1 Introduction
Network scans and port scans are often used by analysts to search their networks
for possible security hazards in order to ﬁx them. Unfortunately, these same
hazards are exactly what an attacker is also interested in ﬁnding so that they
can be exploited. Therefore, scanning the computers on a target network or the
ports of a target computer are very common ﬁrst steps in a network intrusion
attempt. In fact, any network exposed to the Internet is likely to be regularly
scanned and attacked by both automated and manual means [13]. Also, many
Internet worms exhibit scan-like behavior, and so for the purposes of detection
can be treated similarly [16]. Thus, it is in the best interests of network analysts
to be able to detect such scans in order to learn where an attack might be coming
from or to enable countermeasures such as a honeypot system.
Also, it is possible to take an attacker’s attempt to gain information about a
network through a scan and use it to gain information about the attacker. That
is, a scan can be analyzed in order to identify features of an attacker, such as the
attacker’s operating system, the scanning tool being used, or the attacker’s par-
ticular hardware. Timing information can even be used to analyze routing delays
which can reveal the attacker’s actual location in cases of IP address spooﬁng
[14]. Thus, it is also beneﬁcial to detect scans for counterintelligence purposes.
Previous research has been done in ﬁnding ways to automatically detect net-
work and port scans. These methods usually involve distinguishing between an
attacker and a normal user by checking to see if the traﬃc meets some criteria.
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 265–283, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
266
C. Muelder, K.-L. Ma, and T. Bartoletti
However, it is usually possible for an attacker to avoid detection by avoiding
meeting the criteria in question. The simplest kind of detection system is to des-
ignate a tripwire port or IP address, such that if there is any traﬃc to that port
or IP address, the traﬃc is designated as a port or network scan respectively.
However, this method is essentially just security through obscurity. If an attacker
can determine what port or system is being used as a tripwire, it is a relatively
simple task to just avoid connecting to that port or system. One of the most
common scan detection methods, however, is based on timing thresholds [6]. If
traﬃc from a particular source meets some threshold of connections per unit
time to diﬀerent ports or systems then it is classiﬁed as a scan, otherwise it is
classiﬁed as normal traﬃc. The diﬃculty with this method is that if the thresh-
old is too low, then normal traﬃc can be determined to be a scan, and if the
threshold is too high, then scans could be classiﬁed as normal traﬃc. Therefore,
if an attacker runs a scan slowly enough to be classiﬁed as normal traﬃc, then
it would go undetected entirely.
Visualization provides an alternate approach to solving this problem. Many
attempts have been made to ease the detection of interesting information in the
logs, using both traditional information visualization mechanisms like parallel
coordinates, self-organizing maps, and multi-dimensional scaling, and novel vi-
sualization mechanisms designed speciﬁcally for this task [4, 3]. Instead of work-
ing with the low level timing information for every packet, however, one can
summarize the data and display it for the user to look for patterns. Because it
requires human interaction, this is a somewhat more time consuming method
and would not be very useful when a quick response time is necessary. However,
it provides a high level view of the data, from which patterns such as network or
port scans should be easily visible. Visualization also provides a means to detect
new and interesting patterns in the information that could be missed by auto-
mated rules. From these patterns, new rules can be deﬁned in order to improve
the automated methods. This allows an analyst to iteratively reﬁne the rule set,
and with each cycle the detection improves.
We have developed eﬀective visualization representations and interaction tech-
niques within a uniﬁed system design to address the challenges presented by the
complexity and dimension of the traﬃc information that must be routinely ex-
amined. In our study, the (sanitized) traﬃc data are provided by the Computer
Incident Advisory Capability group at the Lawrence Livermore National Labo-
ratory (LLNL).
2 Related Work
This overall method of creating an image of network traﬃc is not wholly new.
SeeNet [1] uses an abstract representation of network destinations and displays
a colored grid. Each point on the grid represents the level of traﬃc between the
entity corresponding to the point’s x value and the entity corresponding to the
point’s y value. NVisionIP [8] uses network ﬂow traﬃc and axes that correspond
to IP addresses; each point on the grid represents the interaction between the
Interactive Visualization for Network and Port Scan Detection
267
corresponding network hosts. The points can represent changes in activity in
addition to raw activity. In [17], a quadtree coding of IP addresses is used to form
a grid; Border Gateway Protocol (BGP) data is visualized as colored quadtree
cells and connections between points on the quadtree. The Spinning Cube of
Potential Doom [9] is a visualization system that uses two IP address axes and a
port number axis to display network activity in a colorful, 3-dimensional cube.
The combination makes attacks like port scans very clear; attacks that vary over
the IP address space and port number produce interesting visuals (one method
of attack, for instance, produces a “barber pole” ﬁgure). In [14], scans of class B
networks are visualized by using the third and fourth octets of the destination
IP addresses as the x and y axes in a grid, and coloring these points based on
metrics derived from connection times.
PortVis [11] is a system designed to take very coarsely detailed data—basic,
summarized information of the activity on each TCP port during each given
time period—and uses visualization to help uncover interesting security events.
Similar to the other related works, the primary methods of visualization used
by PortVis are to display network traﬃc by choosing axes that correspond to
important features of the data (such as time and port number), creating a grid
based on these axes, and then ﬁlling each cell of the grid with a color that
represents the network activity there. However, all the other related works work
with the low level data itself, so they can not scale as large as easily as a system
like PortVis that works with summarized information.
This paper presents the design of a port-based visualization system and a
set of case studies to demonstrate how the visualization directed approach im-
plemented eﬀectively helps identify and understand network scans. Our designs
were made according to the lessons we learned from building and using PortVis
[11]. This new system oﬀers analysts a suite of carefully integrated capabilities
with an interactive interface to interrogate port data at diﬀerent levels of details.
This paper also serves to suggest some general guidelines to those who intend to
incorporate visualization into their IDS.
3 A Port Based Visualization System
We have developed a portable system, written in C++ with OpenGL and a
GLUT based widget toolkit, that takes general, summarized network data and
presents multiple, meaningful perspectives of the data. The resulting visual-
ization often leads to useful insights concerning network activities. The system
design was tailored to eﬀective detection and better understanding of a variety of
port and network scans. However, the system is also capable of detecting other
large-scale and small-scale network security events while requiring a minimal