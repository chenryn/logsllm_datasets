1 0
0 1
0 0
0 0
0 0
0
0
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
1
Figure 5: Skylake L2 sTLB’s hash function (H), which
converts a virtual address VA to a L2 sTLB set with the
matrix multiplication H ·VA[26 : 12], where VA[26 : 12]
represent the next 14 lowest bits of VA after the 12 lowest
bits of VA. We call this function XOR-7, because it XORs
7 consecutive virtual address bits. We have observed a
similar XOR-8 function on Broadwell.
Figure 6: Timed accesses used to monitor a 4-way TLB
set with pointer chasing.
uint64_t probe; /* probe addr */
uint32_t time1,time2;
asm volatile (
"lfence\n"
"rdtsc\n"
"mov %%eax, %%edi\n"
"mov (%2), %2\n"
"mov (%2), %2\n"
"mov (%2), %2\n"
"mov (%2), %2\n"
"lfence\n"
"rdtscp\n"
"mov %%edi, %0\n"
"mov %%eax, %1\n"
: "=r" (time1), "=r" (time2)
: "r" (probe)
: "rax", "rbx", "rcx",
"rdx", "rdi");
Figure 7: Memory access latency determining TLB hit
or misses. The mapped physical page is always the same
one, and so always in the cache, so the latency of the
memory access purely depends on TLB latency.
1. We assemble three working sets. The ﬁrst stays en-
tirely within L1 dTLB. The second misses L1 par-
tially, but stays inside L2. The third set is larger than
L2 and will so force a page table walk.
2. The eviction sets are virtual addresses, which we
all map to the same physical page, thereby avoiding
noise from the CPU data cache.
3. Using the assembly code we developed, we access
these eviction sets. If the latency predicts the cate-
gory, we should see a clear separation.
We take the Skylake platform as an example. The re-
sult of our experiment can be seen in Figure 7. We see
a multi-modal distribution, clearly indicating that we can
use unprivileged instructions to proﬁle TLB activity.
USENIX Association
27th USENIX Security Symposium    961
0481216TLB set0481216TLB setL1 dtlb0481216TLB set0481216TLB setL1 itlb0326496128TLB set0326496128TLB setL2 stlb2468101290100110120130140150160170180CPU cycles0.000.050.100.150.200.250.30FrequencyL1 dTLB hitL2 TLB hitL2 TLB missFigure 9: Elliptic curve point multiplication in libgcrypt.
We attack the non-constant-time half of the branch.
void
_gcry_mpi_ec_mul_point (mpi_point_t result,
gcry_mpi_t scalar, mpi_point_t point,
mpi_ec_t ctx)
{
gcry_mpi_t x1, y1, z1, k, h, yy;
unsigned int i, loops;
mpi_point_struct p1, p2, p1inv;
...
if (mpi_is_secure (scalar)) {
/* If SCALAR is in secure memory we assume that it
is the secret key we use constant time operation.
*/
...
} else {
for (j=nbits-1; j >= 0; j--) {
_gcry_mpi_ec_dup_point (result, result, ctx);
if (mpi_test_bit (scalar, j))
_gcry_mpi_ec_add_points(result,result,point,ctx);
}
}
}
tion operation depending on a single bit in the private
key as shown in a code snippet taken from libgcrypt.
If we can differentiate between the TLB operations of
these two functions, we can leak the secret private key.
It is clear that the same sets are always active in both
sides of the branch, making it impossible to leak bits
of the key by just monitoring which sets are active a
la PRIME+PROBE. Hence, due to (page-level) side-
channel coarsening, TLB attacks cannot easily rely on
traditional spatial access information to leak secrets in
real-world attack settings.
Looking more carefully at Figure 8, it is clear that
some sets are accessed at different times within the ex-
ecution of each side of the branch. For example, it is
clear that the data variables that map to TLB set 9 are
being accessed at different times in the different sides
of the branch. The question is whether we can use
such timings as distinguishing features for leaking bits of
data from libgcrypt’s ECC multiplication function. In
other words, we have to rely on temporal accesses to the
TLB sets instead of the commonly-used spatial accesses
for the purposes of leaking information.
To investigate this approach, we now look at signal
classiﬁcation for the activity in the TLB sets. Further-
more, in the presence of address-space layout random-
ization (ASLR), target data may map to different TLB
sets. We discuss how we can detect the TLB sets of in-
terest using a similar technique.
Signal classiﬁcation Assuming availability of latency
measurements from a target TLB set, we want to distin-
guish the execution of different functions that access the
Figure 8: Page-level access patterns of data of an ECC
point multiplication routine. The background is the
ground truth of the cases we wish to distinguish. The
rectangles show temporally unique patterns that make
this possible.
Our analysis here addresses Q3. We can now rely on
unprivileged memory access latency measurements to re-
liably distinguish TLB misses from TLB hits and hence
monitor the activity of the victim over shared TLBs in
practical settings.
8 Temporal Analysis
Given the monitoring logic we developed in Section 5,
we now turn to Q4—how can we leak information with
a page-granular signal for data pages only? When target-
ing sensitive cryptographic applications, previous work
on controlled channels focused on leaking the secret us-
ing code pages due to the difﬁculty of extracting secrets
using page-granular data accesses [58]. Data pages are
only used for synchronization purposes in the attack. In
other words, this is a non-trivial challenge, especially
given our side-channel rather than controlled-channel at-
tack scenario.
To investigate the extent of this challenge, we pick an
example target, libgcrypt, and target its elliptic curve
cryptography (ECC) multiplication function, shown in
Figure 9. This function will be used in a signing op-
eration, where scalar is a secret. We use the non-
constant-time version in this work. We instrument the
code with the Intel Pin Dynamic Binary Instrumentation
framework [39].
Figure 8 shows the observed activity in each of the
16 L1 dTLB sets over time. The two background col-
ors differentiate between data accesses of the two dif-
ferent functions, namely the function that performs a
duplication operation and one that performs an addi-
962    27th USENIX Security Symposium
USENIX Association
0100200300400500600Event number2468101214L1TLB settarget TLB set at different times. For this purpose, we
train a classiﬁer that can distinguish which function is
being executed by the victim, as a function of observed
TLB latencies. We ﬁnd that, due to the high resolution
of our channel, a simple classiﬁcation and feature ex-
traction strategy is sufﬁcient to leak our target functions’
temporal traces with a high accuracy. We discuss what
more may be possible with more advanced learning tech-
niques and the implications for future cache attacks and
defenses in Section 10. We now discuss how we trained
our classiﬁer.
To collect the ground truth, we instrument the victim
with statements that record the state of the victim’s func-
tions, that is how the classiﬁer should classify the current
state. This information is written to memory and shared
with our TLB monitoring code developed in Section 5.
We run the monitoring code on the sibling hyperthread
of the one that executes the instrumented victim. Our
monitoring code uses the information provided by the
instrumented victim to measure the activity of the tar-
get TLB set for each of the two functions that we wish to
differentiate.
To extract suitable features from the TLB signal, we
simply encode information about the activity in the tar-
geted TLB set using a vector of normalized latencies.
We then use a number of such feature vectors to train
a Support Vector Machine (SVM) classiﬁer, widely used
nowadays for general-purpose classiﬁcation tasks [12].
We use our SVM classiﬁer to solve a three-class classiﬁ-
cation problem: distinguishing accesses to two different
functions (class-1 and class-2) and other arbitrary func-
tions (class-3) based on the collected TLB signals. The
training set consists of a ﬁxed number (300) of observed
TLB latencies starting at a function boundary (based on
the ground truth). We ﬁnd the normalizing the ampli-
tude of the latencies prior to training and classiﬁcation
to be critical for the performance of our classiﬁer. For
each training sample, we normalize the latencies by sub-
tracting the mean latency and dividing by the standard
deviation of the 300 latencies in the training sample.
We use 8 executions to train our SVM classiﬁer. On
average, this results in 249 executions of the target dupli-
cation function, and 117 executions of the target addition
function, leading to 2,928 training samples of function
boundaries. After training, the classiﬁer can be used on
target executions to extract function signatures and re-
construct the target private key. We report on the perfor-
mance of the classiﬁer and its effect on the end-to-end
TLBleed attack on libgcrypt in Section 9.2.
As an example of the classiﬁer in action on the raw
signal, see Figure 10. It has been trained on the latency
values, and can reliably detect the 2 different function
boundaries. We use a peak detection algorithm to derive
the bit stream from the classiﬁcation output. The mov-
Figure 10: SVM signal classiﬁcation on raw latency data.
The background shade represents ground truth; either the
execution of the ‘dup’ function (0) or the ‘mul’ function
(1). The classiﬁer properly classiﬁes signal boundaries
from raw latency data; either the start of a dup (0), mul
(1) or not a boundary (0.5). The peak detection converts
the continuous classiﬁcations into discrete single detec-
tions.
ing average is not used by the classiﬁer, but is shown
to make the signal discrepancy more apparent to human
inspection. The peak detection merges spurious peaks/-
valleys into one as seen in the ﬁrst valley, and turns the
continuous classiﬁcation into a discrete bitstream.
Identifying the Target TLB Set For the libgcrypt
target, we only need to use a single TLB set for training
and testing. For the purpose of training our classiﬁer, we
assume that this information is known. During a real-
world attack, however, we cannot know the target TLB
set beforehand, due to virtual address randomization per-
formed by ASLR.
Nonetheless, our hypothesis is that each of the TLB
sets behave differently during the execution of our tar-
get program. Hence, we can follow the same approach
of classifying behavior based on the temporal activity of
each of the sets to distinguish the target set.
In other
words, in a preliminary step, we can now use our SVM
classiﬁer to solve a s-class classiﬁcation problem, where
each class represents TLB signals for a particular TLB
set and we want to identify TLB signals that belong to
the "target" class of interest. To validate our hypothesis,
we run this step for the same period as we do for the at-
tack, when the ECC point multiplication occurs. We ﬁnd
that this simple strategy already results in a classiﬁer that
can distinguish the TLB sets. Section 9.1 evaluates the
reliability and performance of our target TLB set detec-
tion technique.
We can now mount an end-to-end attack using a sim-
ple classiﬁcation and feature extraction strategy, as well
as a preliminary step to identify the victim TLB set in
spite of ASLR.
USENIX Association
27th USENIX Security Symposium    963
050100150cycleslatency6080cyclesmoving average400042004400460048005000time0.00.51.0SVM outputclassifier outputdup detectionmul detection9 Evaluation
In this section we select a challenging case study, and
evaluate the reliability of TLBleed.
Testbed To gain insights on different recent micro-
architectures, we evaluated TLBleed on three different
systems: (i) a workstation with an Intel Skylake Core i7-
6700K CPU and 16 GB of DDR4 memory, (ii) a server
with an Intel Broadwell Xeon E5-2620 v4 and 16 GB of
DDR4 memory, and (iii) a workstation with an Intel Cof-
feelake Core i7-8700 and 16 GB of DDR4 memory. We
mention which system(s) we use for each experiment.
Overview of the results We ﬁrst target libgcrypt’s
Curve 25519 EdDSA signature implementation. We use
a version of the code that is not written to be constant-
time. We ﬁrst show that our classiﬁer can successfully
distinguish the TLB set of interest from other TLB sets
(Section 9.1). We then evaluate the reliability of the
TLBleed attack (Section 9.2). On average, TLBleed can
reconstruct the private key in 97% of the case using only
a single signature generation capture and in only 17
seconds. In the remaining cases, TLBleed signiﬁcantly
compromises the private key. Next we perform a simi-
lar evaluation on RSA code implemented in libgcrypt,
that was written to be constant-time in order to mitigate
FLUSH+RELOAD [59], but nevertheless leaves a secret-
dependent data trace. The implementation has since been
improved, already before our work. We then evaluate
the security of state-of-the-art cache defenses in face of
TLBleed. We ﬁnd that TLBleed is able to leak informa-
tion even in presence of strong, hardware-based cache
defenses (Section 9.5 and Section 9.6). Finally, we con-
struct a covert channel using the TLB, to evaluate the
resistance of TLBleed to noise (Section 9.7).
9.1 TLB set identiﬁcation
To show all TLB sets behave in a sufﬁciently unique way
for TLBleed to reliably differentiate them, we show our
classiﬁer trained on all the different TLB sets recogniz-
ing test samples near-perfectly. After training a classiﬁer
on samples from each of the 16 L1 dTLB access pat-
terns in libgcrypt, we are able to distinguish all TLB sets
from each other with an F1-score of 0.54, as shown in
a reliability matrix in Figure 11. We observe no false
positives or false negatives to ﬁnd the desired TLB set
across repeated runs. We hence conclude that TLBleed
is effective against ASLR in our target application. We
further discuss the implications of TLB set identiﬁcation
on weakening ASLR in Section 10.
Figure 11: Classiﬁcation reliability for distinguishing
TLB sets using temporal access patterns. For all active
TLB sets during our target operation, we can reliably
determine where they are mapped in the virtual address
space.
9.2 Compromising EdDSA
Curve 25519 EdDSA signature algorithm in libgcrypt
v1.6.3 is a high-performance elliptic curve algorithm [6].
To demonstrate TLBleed determining a key by just mon-
itoring the TLB, we attack the non-constant-time version
of this code. This would still be safe when cache isola-
tion is deployed.
As shown previously in Figure 9, we are in-
terested in distinguishing between the duplication
(i.e., _gcry_mpi_ec_dup_point) and addition (i.e.,
_gcry_mpi_ec_add_points) operations, so that we
can distinguish key bits in the secret used in the signa-
ture. There will always be a dup invocation for every bit
position in the execution trace, plus an average of 128
add invocations somewhere for every ’1’ bit in the secret
value. As keys are 256 bits in Curve 25519, on average
we observe 384 of these operations.
Hence, we must be able to distinguish the two oper-
ations with high reliability. Errors in the classiﬁcation
require additional bruteforcing on the attacker’s side to
compensate. As misclassiﬁcation errors translate to ar-
bitrary bit edit operations in the secret key, bruteforcing
quickly becomes intractable with insufﬁcient reliability.
We follow a two step approach in evaluating TLBleed
on libgcrypt. We ﬁrst collect the activities in the TLB
for only 2 ms during a single signing operation. Our clas-
siﬁer then uses the information in this trace to ﬁnd the
TLB set of interest and to classify the duplication and
addition operations for leaking the private key.
In the
second step, we try to compensate for classiﬁcation er-
rors using a number of heuristics to guide bruteforcing
in exhausting the residual entropy. We ﬁrst discuss the
964    27th USENIX Security Symposium
USENIX Association
0123456789101112131415Predictedlabel0123456789101112131415True label0.00.20.40.60.81.0Table 2: Success rate of TLBleed on various microar-
chitectures. The success rate is a count of the number of
successful full key recoveries, with some brute forcing
(BF) attempts. Unsuccessful cases were out of reach of
bruteforcing.
Micro-architecture
Skylake