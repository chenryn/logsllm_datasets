title:Reuse-oriented camouflaging trojan: Vulnerability detection and attack
construction
author:Zhiqiang Lin and
Xiangyu Zhang and
Dongyan Xu
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
Reuse-Oriented 
Camouflaging 
Trojan: Vulnerability 
and 
Detection 
Attack Construction 
Zhiqiang Lin Xiangyu Zhang Dongyan Xu 
Department of Computer Science and CERIAS, Purdue University 
{zlin,xyzhang,dxu}@cs.purdue.edu 
Abstract 
We introduce 
the reuse-oriented 
camouflaging 
ma­
trojan - a 
in 
action, 
of implementing 
Trojan 
63% 
invocation 
At the network 
of a targeted 
to legitimate 
software binaries. 
such a trojan identifies 
a legal invocation. 
To perform a 
and reuses an existing 
this trojan is stealthy 
function usually 
where it is legal to do so, closely 
new threat 
licious 
function in a legal binary program instead 
the function itself. Furthermore, 
that the malicious 
takes place in a location 
mimicking 
tim binary can still 
out exhibiting 
close-source 
shareware 
can be maliciously 
gets of this type of attack. 
work to determine 
to this attack and to construct 
experiments 
demonstrate 
are a real threat 
naries can be effectively 
the vic­
level, 
protocol 
follow its communication 
with­
Meanwhile, 
many 
are rich in functions 
that 
tar­
a frame­
with a number of real-world 
that the reuse-oriented 
trojan if so. Our 
software binaries 
trojans 
camouflaging 
of this type in legal bi­
any anomalous behavior. 
and vulnerabilities 
making them attractive 
In this paper, we present 
and confirmed. 
"reused", 
a concrete 
binaries 
revealed 
if a given binary program is vulnerable 
TmJ:::Ec: 
2% 
Troj:m-13ankc; 
4% 
Trojan-
Gamc"lllicf 
17% 
I'll 
Trojan·Dropper 
5% 
Trojan-Spy  Troj:m-PSW 
10% 
7% 
(a) 
(b) 
Figure 1. Distribution 
(b) trojan payloads 
in VxHeaven. 
of (a) malware types and 
1 Introduction 
Trojan is the type of mal ware that appears 
to perform a 
logics. 
It 
and reliability. 
security 
malicious 
to our study of mal ware samples in VxHeaven 
remain a dominant 
As shown 
for 63% of all 266980 mal ware 
mal ware category. 
account 
contains 
function 
but actually 
desirable 
has been a major threat to software 
According 
[5], trojans 
in Fig. 1 (a), trojans 
samples, 
are 9%, 5%, and 1 %, respectively. 
trojans 
[1] shows that, from January 
is on the rise, accounting 
detected 
to June 2009, trojan mal ware 
The diverse 
payload of 
for 83% of the global malware 
whereas the shares of virus, worms, and rootkits 
is shown in Fig. l(b). Another study by BitDefender 
in the wild. 
Most existing 
trojans 
are implemented 
as new, indepen­
dent pieces of code. In this paper, we demonstrate 
that tro­
jans can be more stealthily 
from existing, 
third-party 
attacks 
(or ROC for the rest of the paper) attacks. 
show that real-world 
ROC attacks 
Reuse-Oriented 
we 
constructed 
software 
as the ROC 
and we define such vulnerability 
We call such 
Camouflaging 
Moreover, 
by reusing 
on existing 
functions 
binaries. 
software 
binaries 
binaries 
may be vulnerable to 
We demonstrate 
as well as the construction 
of ROC trojans) 
for confirming 
that the detection 
of ROC 
of ROC attacks 
the vulnera­
vulnerability. 
vulnerabilities 
(i.e., 
bilities 
tematic. 
creation 
are not only feasible 
but can be made highly sys­
files; an email client 
The key observation 
behind ROC attacks 
in legal software 
purposes. 
is that cer­
can be 
binaries 
For example, 
an FTP 
features 
for malicious 
tain functional 
subverted 
program has all the basic capabilities 
privacy-sensitive 
to send spams. For a ROC trojan for spamming, 
ject and content 
the proper mail-sending 
the message just like a regular email. 
have to perform any environment 
ation, 
the sub­
to 
which will then send out 
does not 
hand-shaking, 
The attacker 
function, 
of a spam message could be supplied 
setup such as socket cre­
encoding. 
have unique properties. 
In particular: 
and payload 
to steal and transfer 
has all the functions 
ROC trojans 
code body 
In compar­
or persistent 
• Statically, 
they do not have a stand-alone 
require 
attacks 
[6] usually 
parasites 
semantics. 
the malicious 
code injection 
that implements 
ison, traditional 
injecting 
software 
of code to the victim program and the injected 
code 
often manifests 
footprint 
that can be used 
to detect such code. In a ROC attack, 
licious 
by reusing 
tions in the victim binary, 
the attack only needs to ap­
ply a simple patch with a few writes to memory re-
since the ma­
existing 
func­
rich, distinct 
is fulfilled 
semantics 
a piece 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
281 
DSN 2010: Lin et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable Systems 
& Networks 
(DSN) 
to legal variables 
in the original 
the email client 
These writes could be indistinguishable 
from 
folder - a side-effect 
gions that correspond 
binary. 
the existing 
writes in the binary. 
logs emails 
that should 
employs 
for a spammer. Our framework 
For example, 
side-effects. 
sent in the sent-email 
be reversed 
dynamic binary analysis 
the reuse-able 
functions 
techniques 
to narrow down 
their side-effects. 
and quantify 
•  Dynamically, 
the runtime behavior 
of the binary un­
dictated 
by the 
with constraints 
The attack is mostly carried 
out 
der attack complies 
program semantics. 
by manipulating 
ing function 
function 
to do so. 
program states 
invocations. 
invocations 
occur at a place where it is legal 
and duplicating 
exist­
The duplicated 
"malicious" 
• Furthermore, 
since the attack reuses communication 
implementation 
protocol 
work's perspective, 
low the communication 
any anomalous 
behavior. 
in the binary, 
from the net­
the victim binary could still fol­
protocol 
without exhibiting 
• Step II - reuse-able 
function argument identifica­
feature 
source code and symbolic 
We show that it is possible 
without 
to invoke the reuse-able 
to identify 
such 
tion. The key part of a ROC attack is the malicious 
setup of parameters 
function. 
arguments 
tion. Our framework 
diff-ing 
binary twice -with the same setting 
value assignments. 
ing memory states 
about the arguments 
ing their memory regions 
informa­
adopts a runtime program state 
which involves  running 
but different 
input 
in the two result­
The differences 
will reveal a wealth of information 
of the reuse-able 
and reference 
function, 
approach, 
the subject 
paths. 
includ­
A typical 
scenario 
of launching 
a ROC attack is as fol­
downloads 
the binary 
of a popular 
c1ose­
a P2P sharing 
or streaming 
program) 
it with logic for malicious 
reuse of legit­
According 
to a study on how the top 
[4], the 
in 2008 infect computers 
the ROC trojan) 
could be disseminated 
via a number of ways: downloaded 
for 53% 
from the Internet 
which accounts 
(with­
dropped by other malware (43%); 
(e.g., 
lows: The attacker 
source freeware 
and then patches 
imate function(s). 
100 mal ware programs 
patched 
by the attacker 
out user consent) 
of mal ware infection; 
through 
mises (7%), software 
binary (i.e., 
email attachments 
vulnerabilities 
(12%), browser iframe compro­
(5%), and so forth. 
are likely to succeed considering 
(1) the 
and the wide exis­
downloads" 
of "drive-by 
ROC attacks 
prevalence 
tence of stealthy 
downloader 
nary integrity 
shareware 
shareware 
for malicious 
ROC attacks. 
programs 
programs 
downloading 
the trojan­
in Fig. l(b)) and (2) the lack of universal 
mal ware (e.g., 
bi­
checking 
infrastructure 
today. Meanwhile, 
are rich in functions 
for many close-source 
many close-source 
that can be reused 
targets 
purposes, 
making them attractive 
of 
To illustrate 
the real threat of ROC attacks, 
we propose 
framework 
for detecting 
our framework 
in it and further 
a systematic 
Given a close-source 
binary, 
ROC vulnerabilities 
jan to confirm the true existence 
framework 
feasibility 
ness. The detection 
main steps: 
a ROC tro­
Our 
the 
public aware­
of ROC vulnerabilities 
involves 
two 
also serves the purpose of demonstrating 
of ROC attacks 
and thus raising 
will identify 
construct 
of the vulnerability. 
Our framework 
also includes 
a ROC attack composer. 
logic, reusable  function 
invocations 
binary are patched to expose critical 
inter­
by the ROC vulnerability 
and states 
Such functions 
If needed, 
detector. 
in the same context 
can be duplicated 
invocations 
To implant malicious 
in the original 
nal states and allow mutation. 
are identified 
function 
of the original 
imposed on legal calling 
i.e., the legal calling 
vide API functions 
Non-trivial attacks 
of code, which will be translated 
into the victim binary. 
invocation 
context 
such that the semantic 
of the target 
function 
is maliciously 
reused. 
We pro­
are satisfied, 
constraints 
to enable easy ROC attack composition. 
can be constructed by 
writing a 
few lines 
into binary and patched 
We  have implemented 
a prototype 
and attack composer 
of the ROC vul­
and applied 
them 
Our experiments 
a number of real-world binaries. 
For 
the email client pine and mailx can be con­
are real and easy to construct. 
nerability  detector 
against 
show that ROC attacks 
example, 
verted into a stealthy 
Mutella can be exploited 
(C&C) for a botnet; 
and Control 
can be converted 
to transfer 
without 
being noticed. 
to perform covert Command 
and the P2P software 
gift 
sensitive 
files to other hosts 
email interceptor; 
the P2P software 
2  Approach Overview 
ROC vulnerabilities: 
• Step I - reuse-able 
feature extraction. 
Given a sub­
Desirable I 
Vulnerability 
Specification 
1[010[00[0 
(patched binary) 
The final lrojan 
(e.g., 
an email client 
ject binary and its output that can be used in mali­
cious contexts 
and the emails it 
sends out), our framework 
tions exist which are dedicated 
put. Such functions 
reuse if their execution 
to producing 
that out­
are potential targets 
of malicious 
leads to very few reversible 
will check if modular func­
Figure 2. Typical 
ity detection 
workflow 
of ROC vulnerabil­
and attack construction. 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
282 
DSN 2010: Lin et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:05:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable Systems 
& Networks 
(DSN) 
Fig. 2 illustrates 
a typical 
workflow of ROC vulnerabil­
and attack composition. 
Given a target bi­
Unlike traditional 
ity detection 
nary, the user will first specify 
bility. 
buffer-overflows, 
on the victim program's 
functional 
feature 
ROC vulnerabilities 
semantics, 
such as 
vulnerabilities 
are highly dependent 
namely the program's 
context. 
that can be reused in a malicious 
a desirable 
ROC vulnera­
"syntactic" 
Using the desirable 
vulnerability 
(feature) 
component 
specification 
automatically 
functions 
to reuse. The best 
is the one that leads to the least amount 
are quantified 
side-effects 
by 
extraction 
The functions' 
component. 
component 
a set of candidate 
function 
as input, the feature 
identifies 
candidate 
of side effects. 
the side effect analysis 
ment reverse 
locations 
component 
cal view of the memory for the argument 
using the outputs 
verse engineering, 
actual malicious 
tion. 
engineering 
of the functions' 
is a reference 
patch that invokes 
arguments. 
graph, which presents 
a hierarchi­
Finally, 
of side-effect 
the ROC attack composer 
analysis 
variables. 
and argument 
generates 
the best reuse-able 
re­
the 
func­
Meanwhile, 
identifies 
the argu­
the memory 
The output of this 
3  ROC Vulnerability 
Detection 
3.1 Specifying 
ROC Vulnerabilities 
Since we assume neither 
the source code nor in-depth 
feature 
features. 
does 
For 
about the relevant 
In many cases, the input/output 
the only thing we can 
is the input and out­
a lot of information 
if we want to decide if the email sending 
of a victim binary, 
to define a functional 
understanding 
leverage 
put of the software. 
provide 
instance, 
of pine can be exploited, 
pine can be used to trace back to the functions 
sponsible 
to detect whether the file transfer 
vulnerable, 
by the file transfer 
tions corresponding 
cution monitoring. 
emitted 
by 
that are re­
if we want 
of a P2P client 
the network packets 
generated 
the func­
With the annotations, 
can be disclosed 
by exe­
the email messages 
we can annotate 
them. As another 
to file transfer 
protocol. 
for sending 
example, 
feature 
feature 
is 
Message 
Header 
Receiver 
Sender 
Title 
Body 
Sender 
Header Body 
Subject Receiver 
Addr+ 
Addr 
String 
String 
Figure 3. Simplified 
sages, provided 
nerability 
detector. 
grammar 9 of email mes­
as the input to the ROC vul­
A sample output grammar provided 
to our detector 
shown in Fig. 3. It is to detect ROC vulnerabilities 
regarding 
sion for sake of presentation. 
in RFC-2822. 
It is a simplified 
A full grammar can be found 
the email sending feature. 
is 
in pine 
ver­
3.2 Detecting 
ROC Vulnerabilities 
This section 
describes 
how the detector 
works given the 
in the previous 
section. 
For brevity, 
focuses 
on output based spec­
i.e., 9 is a grammar that filters output. 
ROC vulnerabilities 
is similar 
Handling 
and examples 
ROC vulnerabilities 
can be found in Sec­
described 
in this section 
specification 
our discussion 
ification, 
input-oriented 
of input-oriented 
tion 5. 
3.2.1 Feature Extraction 
Given a grammar 9 describing 
ture extraction 
binary that are exclusively 
ulating 
dedicated 
may cause unexpected 
sendpacket 
ing sending 
is not vulnerable 
The function 
email sending 
because 