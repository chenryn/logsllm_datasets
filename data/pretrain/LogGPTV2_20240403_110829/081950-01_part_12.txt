subprocess模块是Python自带的模块，无须再另行安装，它主要用来取代一些旧的模块或
方法，如os.system、os.spawn*、os.popen*、commands.*等，因此如果需要使用Python调用外
部命令或任务时，则优先使用subprocess模块。使用subprocess模块可以方便地执行操作系统
支持的命令，可与其他应用程序结合使用。因此，Python也常被称为胶水语言。
2.4.1 subprocess.run()方法
subprocess.run()是官方推荐使用的方法，几乎所有的工作都可以由它来完成。首先来看一
下函数原型：
subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None,
shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None)
该函数返回一个CompletedProcess类（有属性传入参数及返回值）的实例，虽然该函数的
参数有很多，但是我们只需要知道几个常用的就可以了。
 args 代表需要在操作系统中执行的命令，可以是字符串形式（要求shell=True），也
可以是列表list类型。
 *代表可变参数，一般是列或字典形式。
 stdin、stdout、stderr 指定了可执行程序的标准输入、标准输出、标准错误文件句柄。
 shell 代表着程序是否需要在shell上执行，当想使用shell的特性时，设置shell=True ，
这样就可以使用shell指令的管道、文件名称通配符、环境变量等，不过Python 也提
供了许多类 shell 的模块，如 glob、fnmatch、os.walk()、os.path.expandvars()、
os.path.expanduser()和shutil 。
 check 如果 check 设置为 True，就检查命令的返回值，当返回值为非 0 时，将抛出
CalledProcessError异常。
 timeout 设置超时时间，如果超时，则强制kill掉子进程。
【示例2-20】下面举例说明。
在Linux系统中如果我们执行一个脚本并获取它的返回值，可有如下两种方法，如图2.12
和图2.13所示。
84
第2章 基础运维
方法一：
图2.12 获取subprocess.run返回值（方法一）
方法二：
图2.13 获取subprocess.run返回值（方法二）
如果要捕获脚本的输出，可以按如图2.14所示的做法。
图2.14 捕获脚本输出
如果传入参数check=True，当returncode不为0时，将会抛出subprocess.CalledProcessError
异常；如果传输 timeout 参数，当运行时间超过 timeout 时就会抛出 TimeoutExpired 异常。运
行结果如图2.15所示。
图2.15 运行结果
上面的例子虽然很长，但是为了说明超时会抛出 TimeoutExpired 异常，这在实际工作中
85
Python自动化运维快速入门
非常有用，比如一个任务不确定什么时间完成，可以设置一个超时时间，如果超时仍未完成，
可以通过代码控制超时重新运行。如果超时重试3次不成功，就让程序报错退出。
2.4.2 Popen 类
先来看一下Popen类的构造函数。
class subprocess.Popen( args,
bufsize=0,
executable=None,
stdin=None,
stdout=None,
stderr=None,
preexec_fn=None,
close_fds=False,
shell=False,
cwd=None,
env=None,
universal_newlines=False,
startupinfo=None,
creationflags=0)
参数的说明可参见表2-5。
表2-5 Popen类构造函数的参数
args 字符串或列表
bufsize 0 无缓冲
1 行缓冲
其他正值，缓冲区大小
负值，采用默认系统缓冲（一般是全缓冲）
executable 一般不用，args字符串或列表第一项表示程序名
stdin None 没有任何重定向，继承父进程
stdout PIPE 创建管道
stderr 文件对象
文件描述符（整数）
stderr 还可以设置为 STDOUT
preexec_fn 钩子函数， 在fork和exec之间执行。
close_fds unix 下执行新进程前是否关闭0/1/2之外的文件
windows下不继承还是继承父进程的文件描述符
shell 为真的话
unix下相当于args前面添加了 "/bin/sh" "-c"
window下，相当于添加"cmd.exe /c"
cwd 设置工作目录
env 设置环境变量
universal_newlines 各种换行符统一处理成 '\n'
startupinfo window下传递给CreateProcess的结构体
creationflags windows下，传递CREATE_NEW_CONSOLE创建自己的控制台窗口
86
第2章 基础运维
使用方法如下：
subprocess.Popen(["gedit","abc.txt"])
subprocess.Popen("gedit abc.txt")
这两个方法，后者将不会工作。因为如果是一个字符串的话，就必须是程序的路径才可以。
（考虑unix的api函数 exec，接受的是字符串列表）。但是下面的可以工作：
subprocess.Popen("gedit abc.txt", shell=True)
这是因为它相当于：
subprocess.Popen(["/bin/sh", "-c", "gedit abc.txt"])
Popen类的对象还有其他实用方法，参见表2-6。
表2-6 Popen类对象的方法
名称 功能
poll() 检查是否结束，设置返回值
wait() 等待结束，设置返回值
communicate() 参数是标准输入，返回标准输出和标准出错
send_signal() 发送信号 （主要在unix下有用）
terminate() 终止进程，unix对应的SIGTERM信号，windows下调用api函数TerminateProcess()
kill() 杀死进程（unix对应SIGKILL信号），windows下同上
stdin 参数中指定PIPE时，有用
stdout
stderr
pid 进程id
returncode 进程返回值
2.4.3 其他方法
（1）subprocess.call(*popenargs, **kwargs)：call方法调用Popen() 执行程序，并等待它完
成。
（2）subprocess. check_call(*popenargs, **kwargs) ：调用前面的call()，如果返回值非零，
则抛出异常。
（3）subprocess. check_output (*popenargs, **kwargs)：调用Popen() 执行程序，并返回其
标准输出。
2.5
日志记录
日志收集与分析是运维工作中十分重要的内容，要分析日志，最好先知道日志是如何生成
的，这样才能知己知彼，分析日志才更有成效。本节将介绍如何通过Python的标准库logging
87
Python自动化运维快速入门
模块定制自己多样化的记录日志需求。
2.5.1 日志模块简介
运维工作有很多情况需要查问题、解决bug，而查问题和解决bug的过程离不开查看日志，
我们编写脚本或程序时总是需要有日志输出，Python的logging模块就是为记录日志使用的，
而且是线程安全的，意味着使用它完全不用担心因日志模块的异常导致程序崩溃。
【示例2-21】首先看一下日志模块的第一个例子。简单将日志打印到屏幕：
1 import logging
2 logging.debug('debug message')
3 logging.info('info message')
4 logging.warning('warning message')
5 logging.error('error message')
6 logging.critical('critical message')
输出为：
WARNING:root:warning message
ERROR:root:error message
CRITICAL:root:critical message
默认情况下，Python 的 logging 模块将日志打印到标准输出中，而且只显示大于等于
WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL
> ERROR > WARNING > INFO > DEBUG ）。默认的日志格式：日志级别为Logger，名称为
用户输出消息。
各日志级别代表的含义如下。
 DEBUG：调试时的信息打印。
 INFO：正常的日志信息记录。
 WARNING：发生了警告信息，但程序仍能正常工作。
 ERROR：发生了错误，部分功能已不正常。
 CRITICAL：发生严重错误，程序可能已崩溃。
上面的例子是非常简单的，还不足以显示logging模块的强大，因为我们使用print函数也
可以实现以上功能。下面来看第二个例子。
【示例2-22】将日志信息记录至文件（文件名：lx_log1.py）。
1 import logging
2 logging.basicConfig(filename='./lx_log1.log')
3 logging.debug('debug message')
4 logging.info('info message')
5 logging.warning('warning message')
6 logging.error('error message')
7 logging.critical('critical message')
88
第2章 基础运维
执行以上代码后发现，在当前目录多了一个文件lx_log1.log，文件内容与第一个例子的输
出是一致的。多次执行lx_log1.py发现log文件的内容变多了，说明默认的写log文件的方式
是追加。
2.5.2 logging 模块的配置与使用
我们可以通过 logging 模块的配置改变 log 文件的写入方式、日志级别、时间戳等信息。
例如下面的配置：
logging.basicConfig(level=logging.DEBUG, #设置日志的级别
format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
#日志的格式
datefmt=' %Y-%m-%d %H:%M:%S', #时间格式
filename='./lx_log1.log', #指定文件位置
filemode='w') #指定写入方式
可见在logging.basicConfig()函数中可通过具体参数来更改logging模块的默认行为。
 filename：用指定的文件名创建FiledHandler，这样日志会被存储在指定的文件中。
 filemode：文件打开方式，在指定了 filename 时使用这个参数，默认值为 a，还可指
定为w。
 format：指定handler使用的日志显示格式。
 datefmt：指定日期时间格式。
 level：设置rootlogger的日志级别。
 stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或
者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参
数会被忽略。
format参数中可能用到的格式化串如下。
 %(name)s Logger的名字。
 %(levelno)s 数字形式的日志级别。
 %(levelname)s 文本形式的日志级别。
 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有。
 %(filename)s 调用日志输出函数的模块的文件名。
 %(module)s 调用日志输出函数的模块名。
 %(funcName)s 调用日志输出函数的函数名。
 %(lineno)d 调用日志输出函数的语句所在的代码行。
 %(created)f 当前时间，用UNIX标准表示时间的浮点数。
 %(relativeCreated)d 输出日志信息时，自Logger创建以来的毫秒数。
 %(asctime)s 字符串形式的当前时间。默认格式是“2013-07-08 16:49:45,896”。逗号
后面的是毫秒。
 %(thread)d 线程ID，可能没有。
89
Python自动化运维快速入门
 %(threadName)s 线程名，可能没有。
 %(process)d 进程ID，可能没有。
 %(message)s用户输出的消息。
【示例2-23】例如以下代码。
1 import logging
2 logging.basicConfig(
3 level=logging.DEBUG,
4 format="%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s
%(message)s", # 日志的格式
5 datefmt=" %Y-%m-%d %H:%M:%S", # 时间格式
6 filename="./lx_log1.log", # 指定文件位置
7 filemode="w",
8 )
9 logging.debug("debug message")
10 logging.info("info message")
11 logging.warning("warning message")
12 logging.error("error message")
13 logging.critical("critical message")
运行代码后我们会看到lx_log1.py文件的内容如下：
2018-06-07 21:09:51 lx_log1.py[line:9] DEBUG debug message
2018-06-07 21:09:51 lx_log1.py[line:10] INFO info message
2018-06-07 21:09:51 lx_log1.py[line:11] WARNING warning message
2018-06-07 21:09:51 lx_log1.py[line:12] ERROR error message
2018-06-07 21:09:51 lx_log1.py[line:13] CRITICAL critical message
这样的配置已基本满足我们写一些小程序或 Python 脚本的日志需求。然而这还不够体现
logging 模块的强大，毕竟以上功能通过自定义一个函数也可以方便实现。下面先介绍几个概
念以及它们之间的关系图。
 logger：记录器，应用程序代码能直接使用的接口。
 handler：处理器，将（记录器产生的）日志记录发送至合适的目的地。
 filter：过滤器，提供了更好的粒度控制，可以决定输出哪些日志记录。
 formatter：格式化器，指明了最终输出中日志记录的布局。
日志事件信息在记录器（logger）、处理器（handler）、过滤器（filter）、格式化器（formatter）
之间通过一个日志记录实例来传递。通过调用记录器实例的方法来记录日志，每一个记录器实
例都有一个名字，名字相当于其命名空间，是一个树状结构。例如，一个记录器叫scan， 记
录器scan.tex、scan.html、scan.pdf的父节点。记录器的名称。可以任意取，但一个比较好的实
践是通过下面的方式来命名一个记录器。
logger = logging.getLogger(__name__)
上面这条语句意味着记录器的名字会通过搜索包的层级来获致，根记录器叫root logger。
记录器通过debug()、info()、warning()、error()和critical()方法记录相应级别的日志，根记录器
90
第2章 基础运维
也一样。
根记录器 root logger 输出的名称是'root'。当然，日志的输出位置可能是不同的，logging
模块支持将日志信息输出到终端、文件、HTTP GET/POST请求、邮件、网络sockets、队列或
操作系统级的日志等。日志的输出位置在处理器 handler 类中进行配置，如果内建的 hangler
类无法满足需求，则可以自定义 hander 类来实现自己特殊的需求。默认情况下，日志的输出
位置为终端（标准错误输出），可以通过 logging 模块的 basicConfig()方法指定一个具体的位
置来输出日志，如终端或文件。
logger和hander的工作流程如图2.16所示。
图2.16 logging模块的工作流程
现在让我们从整体到局部来说明logger的日志记录过程。
第一步：获取logger的名称。
logger = logging.getLogger(‘logger name’) #这里的logger name是自己定义的
第二步：配置logger。
1）配置该logger的输出级别，如logger.setLevel(loging.INFO)。
91
Python自动化运维快速入门
2）添加该logger的输出位置，即logger的handler，logger.addHandler(ch)。这里ch是我
们自定义的handler，如ch=logging.StreamHandler，即输出到终端。我们可以添加多个handler，
一次性将日志输出到不同的位置。日志的输出格式是在 handler 中进行配置，如
ch.setFormatter(formatter) ， formatter 也 我 们 自 定 义 的 ， 如 formatter =
logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')。不同的hander可以
配置不同的格式化器，可以实现不同的输出位置，不同的输出格式，完全可能灵活配置。
第三步：在应用程序中记录日志。
logger.debug('debug message')
logger.info('info message')