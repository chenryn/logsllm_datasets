ACC_VOLATILE 不可以同时设置
第三部分的字段描述符也值得具体学习⼀下。
字段描述符⽤来表⽰某个字段的类型，在 JVM 中定义⼀个 int 类型的字段时，类⽂件中储存
的类型不是字符串 int，⽽是更精简的字母 I，因此根据字段类型的不同，字段描述符分为三
⼤类：
原始类型：byte、int、char、float 等这些类型使⽤⼀个字符来表⽰，⽐如 J 对应的long 类
型，B 对应的是 byte 类型（如果对序列化熟悉的朋友，⼀定知道这⾥其实和序列化中的基
础类型字段是相同的）
引⽤类型使⽤ L;  的⽅式来表⽰，为了防⽌多个连续的引⽤类型描述符出现混淆，引⽤
类型描述符最后都加了⼀个 ;  作为结束，⽐如字符串类型 String 的描述符为
Ljava/lang/String;
JVM 使⽤⼀个前置的 [  来表⽰数组类型，如 int[]  类型的描述符为 [I  ，字符串数组
String[]的描述符为 [Ljava/lang/String; ，⽽多为数组描述符知识多加了⼏个 [  ⽽已，⽐如
Object[][][]  类型的描述符为 [[[Ljava/lang/Object; （这⾥是不是感到很熟悉，是的，我们
曾经在 fastjson 1.2.25-1.2.41版本的利⽤的就是在类加上L开头;结尾，来达到绕过所有⿊名
单的⽬的）
7、⽅法表（method）  
⽅法表的作⽤和字段表很类似，类中定义的⽅法会被存储在这⾥。⽅法表也是⼀个变长结
构，如下：
methods_count 表⽰⽅法的数量，methods 表⽰⽅法的集合，共有methods_count个，每⼀个⽅
法⽤method_info结构表⽰
method_info 的结构如下：
method_info 的结构分为四个部分：第⼀部分 access_flags 表⽅法的访问标记、name_index表
⽰⽅法名、
descriptor_index 表⽰⽅法描述符的索引值、attributes_count表⽰⽅法相关属性的个数、
attribute_info表⽰相关属性的集合，结构⽰意图如下：
⽅法的访问标记⽐类和字段的访问标记类型更丰富，⼀共有 12 种，如下表：
{
  u2    methods_count;
  method_info   methods[methods_count];
}
{
  u2    access_flags;
  u2    name_index;
  u2    descriptor_index;
  u2    attributes_count;
  attribute_info  attributes[attributes_count];
}
标志名
标志值
标志含义
ACC_PUBLIC
0x0001
public类型
ACC_PRIVATE
0x0002
private 类型
ACC_PROTECTED
0x0004
protected 类型
ACC_STATIC
0x0008
static 类型
ACC_FINAL
0x0010
final类型
ACC_SYNCHRONIZED
0x0020
synchronize 类型
ACC_BRIDGE
0x0040
bridge ⽅法，由编译器⽣成
ACC_VARARGS
0x0080
⽅法包含可变长度参数，⽐如 String... args
ACC_NATIVE
0x0100
native 类型
ACC_ABSTRACT
0x0400
abstract 类型
ACC_STRICT
0x0800
strictfp 类型，表⽰使⽤ IEEE-754 规范的精确浮点
数，极少使⽤
ACC_SYNTHETIC
0x1000
表⽰这个⽅法由编译器⾃动⽣成，⾮⽤户代码编译
⽣成
⽐如⼀个⽅法如下所⽰ ：
在⽣成的类⽂件中，foo ⽅法的访问标记值为 0x002a
这个值是由 ACC_PRIVATE | ACC_STATIC | ACC_SYNCHRONIZED 组成，表明这是⼀个
private static synchronized⽅法
⼀个⽅法在内存中默认如下：
private static synchronized void foo(){
}
则 private static synchronized⽅法为：
所以 ⼆进制的 0010 1010 转换为 ⼗六进制为 0x002a ，也正是该标记值的由来
同前⾯的字段访问标记⼀样，不是所有的⽅法访问标记都可以随意组合设置
最后提⼀点的是⽅法描述符，在前⾯学了字段描述符，⽅法描述符其实和字段描述符还是很
像的，其格式如下：
(参数1类型 参数2类型 参数3类型 ... )返回值类型
⽐如⽅法 Object foo(int i,double d, Thread t) 的描述符为
(IDLjava/lang/Thread;)Ljava/lang/Object; 其中，I 表⽰第⼀个参数 i 的参数类型 int ，D 表
⽰第⼆个参数 d 的类型 double，Ljava/java/Thread; 表⽰第三个参数 t 的类型
Tread，Ljava/lang/Object; 表⽰返回值类型为 Object ，如下图所⽰：
8、属性表（attribute）  
属性表是 class ⽂件的最后⼀部分内容，属性出现的地⽅⽐较⼴泛，除了字段和⽅法中，在顶
层的 class ⽂件中也会出现。属性表的类型很灵活，不同的虚拟机实现⼚商可以⾃定义属性，
属性表的结构如下：
和其他结构类似，属性表使⽤两个直接来表⽰属性的个数 attributes_count，接下来是若⼲个属
性项的集合，可以看做是⼀个数组，数组的每⼀项都是⼀个属性项 attribute_info，数组的⼤⼩
为attributes_count，attribute_info结构如下：
{
  u2    attributes_count;
  attribute_info attributes[attributes_count];
}
attribute_name_index 是指向常量池的索引，根据这个索引可以找到 attribute 的名字，接下来
的两部分表⽰ info 数组的长度和具体 byte 数组的内容。
虚拟机⾥预定义了 20 多种属性，书⾥介绍了两种属性—— ConstantValue 属性以及 Code 属
性。
对于 ConstantValue 属性，书上给出的介绍是其出现在字段 field_info 中，⽤来表⽰静态变量
的初始值
对于 Code 属性，书上给出的介绍是该属性是类⽂件中最重要的组成部分，它包含⽅法的字节
码，除 native 和 abstract ⽅法外，每个 method 都有且仅有⼀个 Code 属性，并且 Code属性只
作⽤于⽅法表中，其结构如下：
{
  u2    attribute_name_index;
  u4    attribute_length;
  u1    info[attribute_length];
}
Code_attribute{
  u2    attribute_name_index;
  u4    attribute_length;
  u2    max_stack;
  u4    code_length;
  u1    code[code_length];
  u2    exception_table_length;
  {
    u2  start_pc;
    u2  end_pc;
    u2  handler_pc;
    u2  catch_type;
  } exception_table[exception_table_length];
  u2    attributes_count;
  attribute_info    attributes[attributes_count];
}
attribute_name_index 表⽰属性的名字，attribute_length表⽰属性值的长度，max_stack表⽰ 操
作数栈的最⼤深度，虚拟机运⾏的时候需要根据这个值来分配栈帧中的操作栈深度。它的计
算规则是：有⼊栈的指令 stack 增加，有出栈的指令 stack 减少，在整个过程中 stack 的最⼤
值就是 max_stack 的值，增加和减少的值⼀般都是 1，但也有例外，⽐如 LONG 和 DOUBLE
相关的指令⼊栈 stack 会增加 2，VOID 相关的指令是 0。
max_locals 表⽰局部变量表的⼤学，他的值并不等于⽅法中所有局部变量的数量值和。当⼀
个局部作⽤域结束，它内部的局部变量占⽤的位置就可以被接下来的局部变量复⽤。
code_length和 code ⽤来表⽰字节码相关的信息，code_length 存储了字节码指令的长度，占⽤
4 个字节，虽然长度是4个字节(表⾯也就是说字节码指令的长度可以达到2^32-1)，但实际上
Java虚拟机规定了⽅法体中的字节码指令最多有65535条。在code属性中存储了Java⽅法体经
过编译后Java的字节码指令，具体的字节码指令可以不⽤强记，在使⽤的时候根据字节码去
查表就可以，具体可以参考：https://www.cnblogs.com/longjee/p/8675771.html
exception_table_length 和 exception_table ⽤来表⽰代码内部的异常表信息，其中start_pc、
end_pc、handler_pc都是指向 code 字节数组的索引值，start_pc和end_pc表⽰异常处理器覆盖
的字节码开始和结束的位置，是左闭右开区间[start_pc,end_pc)，即包含 start_pc，不包含
end_pc。handler_pc表⽰异常处理 handler 在 code 字节数组的起始位置，异常被捕获以后该跳
转到何处继续执⾏。
catch_type表⽰需要处理的 catch 的异常类型是什么，⽤ 2 个字节表⽰，指向常量池中的类型
为 CONSTANT_Class_info 的常量项。如果 catch_type 为0，表⽰可处理任意异常。
当 JVM 执⾏到某个⽅法的[start_pc,end_pc)范围内的字节码发⽣异常时，如果发⽣的异常是这
个 catch_type 对应的异常类或者它的⼦类，则跳转到 code 字节数组handler_pc处继续处理。
此外，书上还给出了 code 属性结构，⽐较直观，有兴趣的朋友可以⾃⾏看书。
作者在第⼀章的最后介绍了 javap 查看类⽂件的使⽤技巧，这个互联⽹上有很多资料，⽐
如：https://blog.csdn.net/jkli52051315/article/details/83943473
0x03 总结
作者第⼀章主要介绍了 class ⽂件的内部结构，收获还是挺多的，基础性的知识，学习再多也
不为过
后⾯继续学习这本书并分享⾃⼰的学习笔记