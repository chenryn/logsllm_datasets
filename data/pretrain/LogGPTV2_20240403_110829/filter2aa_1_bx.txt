    在打印对象之前，我们需要对其进行URL编码1，因为我们将通过cookie注入该对象。将由此代码生成的字符串传递到数据cookie中将导致服务器执行PHP代码phpinfo();，它会输出有关服务器上PHP配置的信息。phpinfo()函数通常用作概念证明函数来运行bug报告以证明成功的PHP命令注入。以下是在目标服务器上此攻击发生的详细过程：
     The serialized
      Example2
     object is passed into the program as the
      data
     cookie.
     The program calls
      unserialize()
     on the
      data
     cookie.
     Because the
      data
     cookie is a serialized
      Example2
     object,
      unserialize()
     instantiates a new
      Example2
     object.
     The
      unserialize()
     function sees that the
      Example2
     class has
      __wakeup()
     implemented, so
      __wakeup()
     is called.
     The
      __wakeup()
     function looks for the object’s
      $hook
     property, and if it is not
      NULL
     , it runs
      eval($hook)
     .
     The
      $hook
     property is not
      NULL
     , because it is set to
      phpinfo();
     , and so
      eval("phpinfo();")
     is run.
     You’ve achieved RCE by executing the arbitrary PHP code you’ve placed in the
      data
     cookie.
    Using Other Magic Methods
    So far, we’ve mentioned the magic methods
     __wakeup()
    and
     __destruct()
    . There are actually four magic methods you’ll find particularly useful when trying to exploit an
     unserialize()
    vulnerability:
     __wakeup()
    ,
     __destruct()
    ,
     __toString()
    , and
     __call()
    .
    到目前为止，我们已经提到了魔术方法__wakeup()和__destruct()。当尝试利用unserialize()漏洞时，实际上有四个魔术方法会特别有用：__wakeup()，__destruct()，__toString()和__call()。
    Unlike
     __wakeup()
    and
     __destruct()
    , which always get executed if the object is created, the
     __toString()
    method is invoked only when the object is treated as a string. It allows a class to decide how it will react when one of its objects is treated as a string. For example, it can decide what to display if the object is passed into an
     echo()
    or
     print()
    function. You’ll see an example of using this method in a deserialization attack in
     “Using POP Chains” on page 238
    .
    与__wakeup() 和 __destruct()不同的是，它们无论对象是否被创建都会执行，__toString()方法仅在对象被视为字符串时调用。它允许类在对象被视为字符串时决定如何反应。例如，它可以决定如果对象被传递到echo()或print()函数中时要显示什么内容。您将在第238页的“使用POP链”中看到使用此方法的示例。
    A program invokes the
     __call()
    method when an undefined method is called. For example, a call to
     $object->undefined($args)
    will turn into
     $object->__call('undefined', $args)
    . Again, the exploitability of this magic method varies wildly, depending on how it was implemented. Sometimes attackers can exploit this magic method when the application’s code contains a mistake or when users are allowed to define a method name to call themselves.
    当调用未定义的方法时，程序会调用__call()方法。例如，对$object->undefined($args)的调用将变为$object->__call('undefined', $args)。再次说明，这个魔术方法的可利用性因其实现方式而大不相同。有时候攻击者可以利用这个魔法方法，当应用程序的代码存在错误或当用户允许定义方法名称调用自己时。
    You’ll typically find these four magic methods the most useful for exploitation, but many other methods exist. If the ones mentioned here aren’t exploitable, it might be worth checking out the class’s implementation of the other magic methods to see whether you can start an exploit from there. Read more about PHP’s magic methods at
     https://www.php.net/manual/en/language.oop5.magic.php
    .
    通常情况下，对于利用这四个魔法方法最为有用。但是还存在许多其他的方法。如果在这里提到的方法不可利用，那么检查类的其他魔法方法实现是否可以从那里开始利用，可能会有所帮助。请参阅https://www.php.net/manual/en/language.oop5.magic.php了解更多关于PHP魔法方法的信息。
    Using POP Chains
    So far, you know that when attackers control a serialized object passed into
     unserialize()
    , they can control the properties of the created object. This gives them the opportunity to hijack the flow of the application by choosing the values passed into magic methods like
     __wakeup()
    .
    到目前为止，您已经知道当攻击者控制传递给unserialize（）的序列化对象时，他们可以控制创建的对象的属性。这使他们有机会通过选择传递给像__wakeup（）这样的魔术方法的值来劫持应用程序的流程。
    This exploit works . . . sometimes. But this approach has a problem: what if the declared magic methods of the class don’t contain any useful code in terms of exploitation? For example, sometimes the available classes for object injections contain only a few methods, and none of them contain code injection opportunities. Then the unsafe deserialization is useless, and the exploit is a bust, right?
    这个漏洞有时候有效。但这种方法存在一个问题：如果类的声明魔术方法在利用方面没有任何有用的代码怎么办？例如，有时可用于对象注入的类仅包含几个方法，而且它们都没有代码注入机会。那么，不安全的反序列化就无用了，漏洞就会失败，对吧？
    We have another way of achieving RCE even in this scenario: POP chains. A
     property-oriented programming (POP) chain
    is a type of exploit whose name comes from the fact that the attacker controls all of the deserialized object’s properties. POP chains work by stringing bits of code together, called
     gadgets
    , to achieve the attacker’s ultimate goal. These gadgets are code snippets borrowed from the codebase. POP chains use magic methods as their initial gadget. Attackers can then use these methods to call other gadgets.
    我们在这种情况下有另一种实现 RCE 的方式：POP 链。属性导向编程（POP）链是一种攻击利用方式，其名称源于攻击者控制了所有反序列化对象的属性。POP 链通过将被称为小工具的代码片段串联在一起来实现攻击者的最终目标。这些小工具是从代码库中借用的代码片段。POP 链使用魔术方法作为它们的初始小工具。攻击者可以使用这些方法来调用其他小工具。
    If this seems abstract, consider the following example application code, taken from
     https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection
    :
    如果这个看上去抽象的话，不妨看一下以下的应用代码示例，取自https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection:。
class Example
{
1 private $obj;
  function __construct()
  {
    // some PHP code...
  }
  function __wakeup()
  {
  2 if (isset($this->obj)) return $this->obj->evaluate();
  }
}
class CodeSnippet
{
3 private $code;
4 function evaluate()
  {
    eval($this->code);
  }
}
// some PHP code...
5 $user_data = unserialize($_POST['data']);
// some PHP code...
    In this application, the code defines two classes:
     Example
    and
     CodeSnippet
    .
     Example
    has a property named
     obj
     1
    , and when an
     Example
    object is deserialized, its
     __wakeup()
    function is called, which calls
     obj
    ’s
     evaluate()
    method
     2
    .
    这个应用程序定义了两个类：Example和CodeSnippet。Example有一个名为“obj 1”的属性，当反序列化Example对象时，它的__wakeup()函数被调用，该函数调用obj的evaluate()方法。
    The
     CodeSnippet
    class has a property named
     code
    that contains the code string to be executed
     3
    and an
     evaluate()
    method
     4
    , which calls
     eval()
    on the
     code
    string.
    CodeSnippet类具有名为code的属性，其中包含要执行的代码字符串，并具有一个evaluate（）方法，该方法在代码字符串上调用eval（）。
    In another part of the code, the program accepts the POST parameter
     data
    from the user and calls
     unserialize()
    on it
     5
    .
    在代码的另一部分，程序接受用户的POST参数数据，并在其上调用unserialize（） 5。
    Since that last line contains an insecure deserialization vulnerability, an attacker can use the following code to generate a serialized object:
    由于最后一行包含不安全的反序列化漏洞，攻击者可以使用以下代码生成序列化对象：
class CodeSnippet
{
  private $code = "phpinfo();";
}
class Example
{
  private $obj;
  function __construct()
  {
    $this->obj = new CodeSnippet;
  }