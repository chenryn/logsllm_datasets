### 函数和宏的说明

#### 1. `abort` 函数
- **功能**：使程序非正常终止。
- **等效操作**：类似于 `raise(SIGABRT)`。

#### 2. `exit` 函数
- **功能**：使程序正常终止。
- **行为**：
  - 调用顺序与注册顺序相反的 `atexit` 函数。
  - 清洗所有已打开文件的缓冲区，关闭所有已打开的流。
  - 控制返回给环境。
- **参数**：
  - `int status`：状态值，具体实现决定如何返回。通常，0 表示成功终止，也可以使用 `EXIT_SUCCESS` 和 `EXIT_FAILURE` 宏。

#### 3. `atexit` 函数
- **功能**：注册一个函数，在程序正常终止时调用。
- **原型**：`int atexit(void (*fcn)(void))`
- **返回值**：如果注册成功，返回 0；否则返回非 0 值。

#### 4. `system` 函数
- **功能**：将字符串传递给执行环境。
- **原型**：`int system(const char *s)`
- **行为**：
  - 如果 `s` 为 `NULL` 且存在命令处理器，返回非 0 值。
  - 否则，返回值依赖于具体实现。

#### 5. `getenv` 函数
- **功能**：返回与指定名称相关的环境字符串。
- **原型**：`char *getenv(const char *name)`
- **返回值**：如果找到环境变量，返回其值；否则返回 `NULL`。

#### 6. `bsearch` 函数
- **功能**：在有序数组中查找匹配项。
- **原型**：`void *bsearch(const void *key, const void *base, size_t n, size_t size, int (*cmp)(const void *keyval, const void *datum))`
- **行为**：
  - 使用比较函数 `cmp` 进行查找。
  - 返回匹配项的指针；如果没有匹配项，返回 `NULL`。

#### 7. `qsort` 函数
- **功能**：对数组进行升序排序。
- **原型**：`void qsort(void *base, size_t n, size_t size, int (*cmp)(const void *, const void *))`
- **行为**：
  - 使用比较函数 `cmp` 进行排序。
  - 数组中的每个对象长度为 `size`。

#### 8. `abs` 和 `labs` 函数
- **功能**：返回整数的绝对值。
- **原型**：
  - `int abs(int n)`
  - `long labs(long n)`

#### 9. `div` 和 `ldiv` 函数
- **功能**：计算商和余数。
- **原型**：
  - `div_t div(int num, int denom)`
  - `ldiv_t ldiv(long num, long denom)`
- **行为**：
  - 结果保存在结构体 `div_t` 或 `ldiv_t` 中，成员分别为 `quot`（商）和 `rem`（余数）。

### 诊断

#### `assert` 宏
- **功能**：增加程序的诊断功能。
- **形式**：`void assert(int expression)`
- **行为**：
  - 如果 `expression` 为 0，打印错误信息并调用 `abort` 终止程序。
  - 如果定义了 `NDEBUG` 宏，`assert` 宏将被忽略。

### 可变参数表

#### `va_list`, `va_start`, `va_arg`, `va_end` 宏
- **功能**：处理可变数量和类型的函数参数。
- **使用**：
  - `va_list ap;` 声明一个 `va_list` 变量。
  - `va_start(va_list ap, lastarg);` 初始化 `ap`。
  - `type va_arg(va_list ap, type);` 获取下一个参数。
  - `va_end(va_list ap);` 结束参数处理。

### 非局部跳转

#### `setjmp` 和 `longjmp` 宏
- **功能**：提供不同于常规函数调用和返回的跳转方式。
- **原型**：
  - `int setjmp(jmp_buf env)`
  - `void longjmp(jmp_buf env, int val)`
- **行为**：
  - `setjmp` 保存状态信息。
  - `longjmp` 恢复状态并继续执行。

### 信号处理

#### `signal` 函数
- **功能**：设置信号处理方式。
- **原型**：`void (*signal(int sig, void (*handler)(int)))(int)`
- **行为**：
  - `SIG_DFL`：默认行为。
  - `SIG_IGN`：忽略信号。
  - 其他：调用指定的处理函数。
- **有效信号**：
  - `SIGABRT`：异常终止。
  - `SIGFPE`：算术运算出错。
  - `SIGILL`：非法指令。
  - `SIGINT`：中断信号。
  - `SIGSEGV`：非法内存访问。
  - `SIGTERM`：终止请求。

#### `raise` 函数
- **功能**：发送信号。
- **原型**：`int raise(int sig)`
- **返回值**：成功返回 0，失败返回非 0 值。

### 日期与时间函数

#### 时间类型和结构
- **类型**：`clock_t`, `time_t`, `struct tm`
- **结构 `tm` 成员**：
  - `tm_sec`：秒（0-61）
  - `tm_min`：分钟（0-59）
  - `tm_hour`：小时（0-23）
  - `tm_mday`：当月天数（1-31）
  - `tm_mon`：月份（0-11）
  - `tm_year`：年份（从 1900 年起）
  - `tm_wday`：星期几（0-6）
  - `tm_yday`：一年中的天数（0-365）
  - `tm_isdst`：夏令时标记

#### 时间函数
- **`clock` 函数**：
  - **功能**：返回程序占用的处理器时间。
  - **原型**：`clock_t clock(void)`
  - **返回值**：无法获取时返回 -1。
- **`time` 函数**：
  - **功能**：返回当前日历时间。
  - **原型**：`time_t time(time_t *tp)`
  - **返回值**：无法获取时返回 -1。
- **`difftime` 函数**：
  - **功能**：计算两个时间点之间的差值（以秒为单位）。
  - **原型**：`double difftime(time_t time2, time_t time1)`
- **`mktime` 函数**：
  - **功能**：将本地时间转换为日历时间。
  - **原型**：`time_t mktime(struct tm *tp)`
  - **返回值**：无法表示时返回 -1。
- **`asctime` 函数**：
  - **功能**：将时间结构转换为字符串。
  - **原型**：`char *asctime(const struct tm *tp)`
- **`ctime` 函数**：
  - **功能**：将日历时间转换为本地时间字符串。
  - **原型**：`char *ctime(const time_t *tp)`
- **`gmtime` 函数**：
  - **功能**：将日历时间转换为协调世界时 (UTC)。
  - **原型**：`struct tm *gmtime(const time_t *tp)`
- **`localtime` 函数**：
  - **功能**：将日历时间转换为本地时间。
  - **原型**：`struct tm *localtime(const time_t *tp)`
- **`strftime` 函数**：
  - **功能**：根据格式化字符串生成时间字符串。
  - **原型**：`size_t strftime(char *s, size_t smax, const char *fmt, const struct tm *tp)`
  - **返回值**：实际写入字符数（不包括 `\0`），超过 `smax` 时返回 0。

#### 格式化说明
- **`%a`**：缩写的星期几。
- **`%A`**：完整的星期几。
- **`%b`**：缩写的月份。
- **`%B`**：完整的月份。
- **`%c`**：本地时间和日期表示。
- **`%d`**：一个月中的某一天（01-31）。
- **`%H`**：24 小时制小时（00-23）。
- **`%I`**：12 小时制小时（01-12）。
- **`%j`**：一年中的天数（001-366）。
- **`%m`**：月份（01-12）。
- **`%M`**：分钟（00-59）。
- **`%p`**：AM/PM 标记。
- **`%S`**：秒（00-61）。
- **`%U`**：一年中的星期序号（00-53，周日为一周的第一天）。
- **`%w`**：一周中的天数（0-6，周日为 0）。
- **`%W`**：一年中的星期序号（00-53，周一为一周的第一天）。