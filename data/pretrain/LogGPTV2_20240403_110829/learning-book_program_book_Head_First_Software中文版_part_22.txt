揪出坏的设计
准备练习
答案
如果按照下面的要求，要求你写下你认为需要做的变更
你需要增加三个新的事件类型？
我们必须为每个新的类型增加一个新的事件类。三种新的方法（一种针对事件的一个类
型）需要波增加到抽象的Oate义员。然后，date类中的多个子类（不管他们有多少）都必
.须旗果新..以像判新展置名许速三种新类型的费件.根据慎事件是否为此约金所允许。
-你需要增加一个称之为“Sleepingover”（睡过头）的新的事件类型，但该事件
只被“ThirdDate”允许。
新的事件类需要被增加，被称之为“SleepinsOvetEvent”类。接着，一个称之
为“StepOe的新方法增加到Dte类中固此，新的事件可以被增加到约金中，最
.反..三个强购Date是需票殊更新.换明SleepingOerEent只金TiDete所元许。
.-你要将OrderFlowersEvent类中的name（名称）属性的值更改为“SendFlowers”？
Date的三个具体的子类需要被更新，以便判新特定的事件是否被元许的还辑能够使
用与OdetFlowetEvent相美联的新茗字。第外OdeFlowetEvents的nme集性估也需
漂强见煎使用的命名约底。
哦，丝样不是太好.….
一项变更就意啡着我们
必须动一堆类。我们不能在设计时就做好这些
事情响？
设计良好的类是极度聚焦的
这里的问题是针对任何特定的行为，比如送花的行为，这种行
为的逻辑被分散在很多不同的类。所以，看起来是简单的改变，
将变成多个类的修改，比如像OrderFLowersEvent中的名字
改为“SendFlowers”。
152
第5章
---
## Page 189
足够好的设计
这种设计打破了
“单一责任原则
因为iSwoon项目打破了良好的面向对象设计中的一条基本原则，即单一贵任原则
（Single Responsibility Principle（SRP）），所以，更新便是一个头痛的问题。
责任原则
当每个对象
在你的设计系统中，每个对象应该有
只有一个理
个单一的责任，并且所有对象的服务应
该集中在实现单一责任上。
由去改变时
Date和Event类都打破了单一贵任原则
你已经正确
当要增加事件的新的类型时，单一责任原则指明：你所要做的全
地实施了单
部工作是增加新的事件类，别无其他。然而，采用现在的设计，
增加新的事件同样需要在Date类和其全部子类中做变更。
一责任原则
Dete
如果你要增加
个新的事件
Sttingl]
类型，你必质在达里增加一
个方法。
ToR
SeconiDste
ThitdDate
FisstOate
Enent)
接，更新Date类中多一个子类，b
便允许或拖绝这个新的事件类型。
目前位置
153
---
## Page 190
设计重构
你当前的设计使得增加事件、变更事件名，甚至处理额外的约会成为一项困
难的任务。看看当前的设计，标出你会做什么改变，以便把单一责任原则应
用到iSwoon项目的设计当中（使增加新的事件和约会变得更容易）。
Date
Dete类0前处理判
断拼定事件是否
+seeMovie）：void
递合特定的的会
+soToRestauzant):void
个组增加到
购付务
+
orderFlowers)：void
+
soOnDate():boolean
validateEvent(event,Event):boolean
SecondDate
ThirdDate
FirstDate
walidateEvent(event Event)
walidateEvent(event Event)
validateEvent(event;Event)
b0olean
:60olean
,booleax
T
每次当你增加新的事件类型时
学方法中的所有的证福都需暑设更
91.
154
第5章
---
## Page 191
足够好的设计
记值，每个类应值只员责它本
身，并且不应该保税于在其他类
在退行的事情。
events
Event
0..*
十setName：String
SeeMovieEvent
CoToRestautantEvent
OrderFlowetsEvent
name;Stting="SeeMovie
name:Strins=
name:Sting=
"CoToRestaurant"
"OrderFlowers
setName()
Sttins
7
setName()
:Stting
setName()
Stting
以便决定特定的金元许部叠事件类
不同的Date员必展知道Name字符享
型，但是，如果事件的名称发生验
交，Di的子类也必频复重收交。
奢案见162页。
如累你感到阅读不下去，翻到下一页，可以
多了解一些单一责任原则。
目前位置
155
---
## Page 192
srp分析
辨别设计中的多重责任
大多数的时间里，通过简单测试，你能辨别没有采用SRP的类：
在一张纸上，像这样记录下许多行：The[空格][空格]itself，针对你正
采用SRP测试的类中每一种方法，你应该有一行像这样的东西。
在每一行的第一个空格处，记录下类的名字。在第二个空白处，记录
下类中的一个方法。对类中的每个方法都这样微。
③大声地把每一行念出来（你可能需要去增加一个字母或一个单词，使
其能正常阅读）。你刚才念出来的东西合理吗？你的类真的有该方法
指明的贵任吗？
如果你刚才念出来的东西不合理，你可能正在违反SRP的
原则。这个方法可能属于其他的类考虑除掉该方法。
送置是SRP分析单
SRP分析：
在达些空格里买下核
在空格的地方写炎的
类利的每一个方法
每行一个。
The
K
Itself.
itself.
The
itself.
一特一个方法，方法多时
增加几行
个
156
第5章
---
## Page 193
足够好的设计
备练习
将SRP应用到Automobile类
Automobile类的SRP分析显示如下。按照我们在上一页描述的那样，
为下表填入Automobile类中的类名与方法，然后，判断Automobile类
具有的每个方法是否合理，勾选右边的方框。
Automobile
+
start)void
+stop)：void
+changeTites(tites,Tite):void
+
drive):void
+wash):void
+checkOil：void
+setOitint
SRP分析：
Automobile
遵循SRP
违背SRP
原则
原则
The
itself.
口
口
The
itself.
口
口
The
itself.
口
口
The
itself.
口
口
The
itself.
口
口
The
itself.
口
口
The
itself.
口
口
一如果你读的内容没有急义，这
7
SRP原则。
目前位置
157
---
## Page 194
单一责任原则
练习
答案
将SRP应用到Automobile类
你的任务是对Automobile类微SRP分析（如下图所示），你应该用
Automobile类中的类名和方法填入到表中，并且判断Automobile类具有的
每一个方法是否合理。
SRP分析：
Automobile
你可继常是伴
一个
道循SRP
违背SRP
范车员费息动和
或一两个单词
原则
原则
停止振合理
>The
Aatomobile
stane[s]
itself.
使司子可读。
恶花车的功能。
口
The
Aatomobile
stop[s]
Itself.
口
The
Automobile
changesTites
itself.
口
汽车不费费更换
The
Aatomobile
drive[e]
itself.
口
洗的己或更换也
The
Aatomobile
washes)
itself.
口
巴机油
The
Automobile
check[e]oil
itself.
口
The
see)oil
itself.
日
口
个
这一点有一点儿懂，我们想
汽车可组离动和停止自己，
你应值仔细地当过这一点，以及
但舟车确实是司机的费任，
set”是什么参累，
这只是个即得信
车油董的方法，是范车应谨做物事
集这样的例子航说明为什公SRP分析只
是一个类是，你还常要用常识和经检进
行判
158
9巢
---
## Page 195
足够好的设计
从多重责任到单一责任
一且你完成分析，你可以将不应该存在于某个类的方法去掉，
并移动到会担负起特定责任的类中。
开车是司机的费任
不是范车自身的责任
Automobile
Drivet
+stant:void
tisr(s,Aeemetil).soif
+stop()void
+changeTites（tites
Tite
+dtive,void
CarWash
CarWask类
我们用我们的分析弄
处理港洗汽车
谨了这四个方法不恶
★
wash)aoid
汽车的费任
+checkOitOvoid
aak(a,Aec
file),oif
+getOit)int
Mechanic
chesgeTises(a,Aat
meia,ter,Tire[ .wi
Automobile
个
现在洗库只有单一
责性：
处理它自己
start)，void
技工员责更描给肠和更描机油
的基本功能
+stop：woid
+setOitO：int
没有愚蠢的问题
问：
当某个方法带了参数，像CarWash类中的
问：
但万一CarWash把Automobile参数作为构造
wash（Automobile）一样，如何做SRP分析工作？
符（constructor）的一部分，并且方法只是wash（）呢？。