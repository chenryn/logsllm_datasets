  -- in_usa 包含所有的美国境内的位置 ID
    in_usa(vertex_id) AS (
    SELECT vertex_id FROM vertices WHERE properties ->> 'name' = 'United States'
    UNION
    SELECT edges.tail_vertex FROM edges
      JOIN in_usa ON edges.head_vertex = in_usa.vertex_id
      WHERE edges.label = 'within'
  ),
  -- in_europe 包含所有的欧洲境内的位置 ID
    in_europe(vertex_id) AS (
    SELECT vertex_id FROM vertices WHERE properties ->> 'name' = 'Europe'
    UNION
    SELECT edges.tail_vertex FROM edges
      JOIN in_europe ON edges.head_vertex = in_europe.vertex_id
      WHERE edges.label = 'within' ),
  -- born_in_usa 包含了所有型别为 Person，且出生在美国的顶点
    born_in_usa(vertex_id) AS (
      SELECT edges.tail_vertex FROM edges
        JOIN in_usa ON edges.head_vertex = in_usa.vertex_id
        WHERE edges.label = 'born_in' ),
  -- lives_in_europe 包含了所有型别为 Person，且居住在欧洲的顶点。
    lives_in_europe(vertex_id) AS (
      SELECT edges.tail_vertex FROM edges
        JOIN in_europe ON edges.head_vertex = in_europe.vertex_id
        WHERE edges.label = 'lives_in')
  SELECT vertices.properties ->> 'name'
  FROM vertices
    JOIN born_in_usa ON vertices.vertex_id = born_in_usa.vertex_id
    JOIN lives_in_europe ON vertices.vertex_id = lives_in_europe.vertex_id;
```
* 首先，查询 `name` 属性为 `United States` 的顶点，将其作为 `in_usa` 顶点的集合的第一个元素。
* 从 `in_usa` 集合的顶点出发，沿著所有的 `with_in` 入边，将其尾顶点加入同一集合，不断递回直到所有 `with_in` 入边都被访问完毕。
* 同理，从 `name` 属性为 `Europe` 的顶点出发，建立 `in_europe` 顶点的集合。
* 对于 `in_usa` 集合中的每个顶点，根据 `born_in` 入边来查找出生在美国某个地方的人。
* 同样，对于 `in_europe` 集合中的每个顶点，根据 `lives_in` 入边来查询居住在欧洲的人。
* 最后，把在美国出生的人的集合与在欧洲居住的人的集合相交。
同一个查询，用某一个查询语言可以写成 4 行，而用另一个查询语言需要 29 行，这恰恰说明了不同的资料模型是为不同的应用场景而设计的。选择适合应用程式的资料模型非常重要。
### 三元组储存和 SPARQL
三元组储存模式大体上与属性图模型相同，用不同的词来描述相同的想法。不过仍然值得讨论，因为三元组储存有很多现成的工具和语言，这些工具和语言对于构建应用程式的工具箱可能是宝贵的补充。
在三元组储存中，所有资讯都以非常简单的三部分表示形式储存（**主语**，**谓语**，**宾语**）。例如，三元组 **(吉姆, 喜欢, 香蕉)** 中，**吉姆** 是主语，**喜欢** 是谓语（动词），**香蕉** 是物件。
三元组的主语相当于图中的一个顶点。而宾语是下面两者之一：
1. 原始资料型别中的值，例如字串或数字。在这种情况下，三元组的谓语和宾语相当于主语顶点上的属性的键和值。例如，`(lucy, age, 33)` 就像属性 `{“age”：33}` 的顶点 lucy。
2. 图中的另一个顶点。在这种情况下，谓语是图中的一条边，主语是其尾部顶点，而宾语是其头部顶点。例如，在 `(lucy, marriedTo, alain)` 中主语和宾语 `lucy` 和 `alain` 都是顶点，并且谓语 `marriedTo` 是连线他们的边的标签。
[例 2-6]() 展示了与 [例 2-3]() 相同的资料，以称为 Turtle 的格式（Notation3（N3）【39】的一个子集）写成三元组。
**例 2-6 图 2-5 中的资料子集，表示为 Turtle 三元组**
```reStructuredText
@prefix : .
_:lucy     a       :Person.
_:lucy     :name   "Lucy".
_:lucy     :bornIn _:idaho.
_:idaho    a       :Location.
_:idaho    :name   "Idaho".
_:idaho    :type   "state".
_:idaho    :within _:usa.
_:usa      a       :Location
_:usa      :name   "United States"
_:usa      :type   "country".
_:usa      :within _:namerica.
_:namerica a       :Location
_:namerica :name   "North America"
_:namerica :type   :"continent"
```
在这个例子中，图的顶点被写为：`_：someName`。这个名字并不意味著这个档案以外的任何东西。它的存在只是帮助我们明确哪些三元组引用了同一顶点。当谓语表示边时，该宾语是一个顶点，如 `_:idaho :within _:usa.`。当谓语是一个属性时，该宾语是一个字串，如 `_:usa :name"United States"`
一遍又一遍地重复相同的主语看起来相当重复，但幸运的是，可以使用分号来说明关于同一主语的多个事情。这使得 Turtle 格式相当不错，可读性强：请参阅 [例 2-7]()。
**例 2-7 一种相对例 2-6 写入资料的更为简洁的方法。**
```
@prefix : .
_:lucy      a :Person;   :name "Lucy";          :bornIn _:idaho.
_:idaho     a :Location; :name "Idaho";         :type "state";   :within _:usa
_:usa       a :Loaction; :name "United States"; :type "country"; :within _:namerica.
_:namerica  a :Location; :name "North America"; :type "continent".
```
#### 语义网
如果你深入了解关于三元组储存的资讯，可能会陷入关于**语义网**的讨论漩涡中。三元组储存模型其实是完全独立于语义网存在的，例如，Datomic【40】作为一种三元组储存资料库 [^vii]，从未被用于语义网中。但是，由于在很多人眼中这两者紧密相连，我们应该简要地讨论一下。
[^vii]: 从技术上讲，Datomic 使用的是五元组而不是三元组，两个额外的栏位是用于版本控制的元资料
从本质上讲，语义网是一个简单且合理的想法：网站已经将资讯释出为文字和图片供人类阅读，为什么不将资讯作为机器可读的资料也释出给计算机呢？（基于三元组模型的）**资源描述框架**（**RDF**）【41】，被用作不同网站以统一的格式释出资料的一种机制，允许来自不同网站的资料自动合并成 **一个数据网路** —— 成为一种网际网路范围内的 “通用语义网资料库”。
不幸的是，语义网在二十一世纪初被过度炒作，但到目前为止没有任何迹象表明已在实践中应用，这使得许多人嗤之以鼻。它还饱受眼花缭乱的缩略词、过于复杂的标准提案和狂妄自大的困扰。
然而，如果从过去的失败中汲取教训，语义网专案还是拥有很多优秀的成果。即使你没有兴趣在语义网上释出 RDF 资料，三元组这种模型也是一种好的应用程式内部资料模型。
#### RDF 资料模型
[例 2-7]() 中使用的 Turtle 语言是一种用于 RDF 资料的人类可读格式。有时候，RDF 也可以以 XML 格式编写，不过完成同样的事情会相对啰嗦，请参阅 [例 2-8]()。Turtle/N3 是更可取的，因为它更容易阅读，像 Apache Jena 【42】这样的工具可以根据需要在不同的 RDF 格式之间进行自动转换。
**例 2-8 用 RDF/XML 语法表示例 2-7 的资料**
```xml