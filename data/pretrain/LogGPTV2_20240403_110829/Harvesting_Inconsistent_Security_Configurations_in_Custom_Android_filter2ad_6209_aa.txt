title:Harvesting Inconsistent Security Configurations in Custom Android
ROMs via Differential Analysis
author:Yousra Aafer and
Xiao Zhang and
Wenliang Du
Harvesting Inconsistent Security Configurations  
in Custom Android ROMs via Differential Analysis
Yousra Aafer, Xiao Zhang, and Wenliang Du, Syracuse University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/aafer
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Harvesting Inconsistent Security Conﬁgurations in Custom Android ROMs
via Differential Analysis
Yousra Aafer, Xiao Zhang, and Wenliang Du
Syracuse University
{yaafer, xzhang35, wedu}@syr.edu
Abstract
Android customization offers substantially different ex-
periences and rich functionalities to users. Every party
in the customization chain, such as vendors and carri-
ers, modify the OS and the pre-installed apps to tailor
their devices for a variety of models, regions, and custom
services. However, these modiﬁcations do not come at
no cost. Several existing studies demonstrate that mod-
ifying security conﬁgurations during the customization
brings in critical security vulnerabilities. Albeit these
serious consequences, little has been done to systemat-
ically study how Android customization can lead to se-
curity problems, and how severe the situation is. In this
work, we systematically identiﬁed security features that,
if altered during the customization, can introduce poten-
tial risks. We conducted a large scale differential analy-
sis on 591 custom images to detect inconsistent security
features. Our results show that these discrepancies are
indeed prevalent among our collected images. We have
further identiﬁed several risky patterns that warrant fur-
ther investigation. We have designed attacks on real de-
vices and conﬁrmed that these inconsistencies can indeed
lead to actual security breaches.
1
Introduction
When vendors, such as Samsung, LG and HTC, put An-
droid AOSP OS on their devices, they usually conduct
extensive customization on the system. The reasons for
customization can be many, including adding new func-
tionalities, adding new system apps, tailoring the device
for different models (e.g., phone or tablet), or carriers
(e.g., T-mobile and AT&T), etc. Further complicating
the process is Android updates pushed to the devices: the
updates might target a new Android or app version.
This fragmented eco-system brings in several secu-
rity risks when vendors change the functionalities and
conﬁgurations without a comprehensive understanding
of their implications. Previous work has demonstrated
some aspects of these changes and the resulting risks.
Wu et al. [25] analyze several stock Android images from
different vendors, and assess security issues that may be
introduced by vendor customization. Their results show
that customization is responsible for a number of secu-
rity problems ranging from over-privileged to buggy sys-
tem apps that can be exploited to mount permission re-
delegation or content leaks attacks. Harehunter [5] re-
veals a new category of Android vulnerabilities, called
Hares, caused by the customization process. Hares oc-
cur when an attribute is used on a device but the party
deﬁning it has been removed during the customization.
A malicious app can “impersonate” the missing attribute
to launch privilege escalation, information leakage and
phishing attacks. ADDICTED [29] ﬁnds that many cus-
tom Android devices do not properly protect Linux de-
vice drivers, exposing them to illegitimate parties.
All the problems reported so far on Android cus-
tomization are mainly caused by vendors’ altering of crit-
ical conﬁgurations. They change security conﬁgurations
of system apps and Linux device drivers; they also re-
move, add, and alter system apps. Although the exist-
ing work has studied several aspects of security problems
in the changes of system/app conﬁgurations, there is no
work that systematically ﬁnds all security conﬁguration
changes caused by vendor customization, how likely it
can lead to security problems, what risky conﬁguration
changes are often made by vendors, etc.
In this work, we make the ﬁrst attempt to systemat-
ically detect security conﬁguration changes introduced
by parties in the customization chain. Our key intu-
ition is that through comparing a custom device to simi-
lar devices from other vendors, carriers, and regions, or
through comparing different OS versions, we might be
able to ﬁnd security conﬁguration changes created unin-
tentionally during the customization. More importantly,
through a systematic study, we may be able to ﬁnd valu-
able insights in vendor customization that can help ven-
USENIX Association  
25th USENIX Security Symposium  1153
dors improve the security of their future customizations.
We propose DroidDiff, a tool that detects inconsistent
security conﬁgurations in a large scale, and that can be
employed by vendors to locate risky conﬁgurations.
The ﬁrst challenge that we face in our systematic study
is to identify what conﬁgurations are security relevant
and are likely to be customized. We start from the An-
droid layered architecture and list access control checks
employed at each layer. Then, for each check, we rely on
Android documentation and our domain knowledge to
deﬁne corresponding security features. We further ana-
lyze how different conﬁgurations of these features across
custom images can lead to inconsistencies and thus af-
fect the access control check semantics. As a result, we
have identiﬁed ﬁve categories of features. DroidDiff then
extracts these features from 591 custom Android ROMs
that we collected from multiple sources. This step pro-
duces the raw data that will be used for our analysis.
The next challenge is how to compare these images
to ﬁnd out whether they have inconsistent values for the
features that we extracted. Given a set of images, con-
ducting the comparison itself is not difﬁcult; the difﬁ-
culty is to decide the set of images for comparison. If
we simply compare all the 591 images, it will not pro-
vide much insight, because it will be hard to interpret
the implications of detected inconsistencies. To gain
useful insights, we need to select a meaningful set of
images for each comparison. Based on our hypothesis
that inconsistencies can be introduced by vendors, device
models, regions, carriers, and OS versions, we devel-
oped ﬁve differential analysis algorithms: Cross-Vendor,
Cross-Model, Cross-Region, Cross-Carrier, and Cross-
Version analyses, each targeting to uncover inconsisten-
cies caused by customization of different purposes. For
example, in the Cross-Vendor analysis, we aim to know
how many inconsistencies are there among different ven-
dors; in the Cross-Model analysis, we attempt to identify
whether vendors may further introduce inconsistencies
when they customize Android for different models (e.g.
Samsung S4, S5, S6 Edge).
DroidDiff results reveal that indeed the customization
process leads to many inconsistencies among security
features, ranging from altering the protection levels of
permissions, removing protected broadcasts deﬁnitions,
changing the requirement for obtaining critical GIDs,
and altering the protection conﬁguration of app compo-
nents. We present our discoveries in the paper to show
the inconsistency situations among each category of fea-
tures and how versions, vendors, models, region, and car-
riers customizations impact the whole situation.
Not all
inconsistencies are dangerous, but some
changes patterns are deﬁnitely risky and warrant further
investigation. We have identiﬁed such risky patterns,
and presented results to show how prevalent they are in
the customization process. The inconsistencies expose
systems to potential attacks, but if the vendors under-
stand fully the implication of such customization, they
will more likely remedy the introduced risks by putting
proper protection at some other places. Unfortunately,
most of the inconsistencies seem to be introduced by de-
velopers who do not fully understand the security im-
plications. Therefore, our DroidDiff can help vendors
to identify the inconsistencies introduced during their
customization, so they can question themselves whether
they have implemented mechanisms to remedy the risks.
To demonstrate that the identiﬁed inconsistencies, if
introduced by mistakes, can indeed lead to attacks, we
picked few cases detected through our differential anal-
ysis, and designed proof-of-concept attacks on physical
devices1. We have identiﬁed several real attacks. To il-
lustrate, we found that a detected inconsistency on Nexus
6 can be exploited to trigger emergency broadcasts with-
out the required system permission and another similar
one on Samsung S6 Edge allows a non-privileged app to
perform a factory reset without a permission or user con-
ﬁrmation. Through exploiting another inconsistency on
Samsung Note 2, an attacker can forge SMS messages
without the SEND_SMS permission. Moreover, an in-
consistency related to permission to Linux GID mapping
allows apps to access the camera device driver with a nor-
mal protection level permission. We have ﬁled security
reports about the conﬁrmed vulnerabilities to the corre-
sponding vendors. We strongly believe that vendors, who
have source code and know more about their systems,
can ﬁnd more attacks from our detected risky inconsis-
tencies. We also envision that in the future, vendors can
use our proposed tool and database to improve their cus-
tomization process.
Contributions. The scientiﬁc contributions of this pa-
per are summarized as the followings:
• We have systematically identiﬁed possible security
features that may hold different conﬁgurations be-
cause of the Android customization process.
• We have developed ﬁve differential analysis algo-
rithms and conducted a large-scale analysis on 591
Android OS images. Our results produce signiﬁcant
insights on the dangers of vendor customization.
• We have identiﬁed risky conﬁguration inconsisten-
cies that may have been introduced unintentionally
during customization. Our results can help vendors’
security analysts to conduct further investigation to
conﬁrm whether the risks of the inconsistencies are
offset in the system or not. We have conﬁrmed via
our own attacks that some inconsistencies can in-
deed lead to actual security breaches.
1Due to resource limitation, we could not design the attacks for all
the cases identiﬁed in our analysis.
1154  25th USENIX Security Symposium 
USENIX Association
(cid:3)(cid:23)(cid:21)(cid:12)(cid:18)(cid:22)(cid:1)
(cid:6)(cid:22)(cid:23)(cid:31)(cid:20)(cid:15)(cid:14)(cid:16)(cid:15)(cid:1)
(cid:2)(cid:22)(cid:14)(cid:24)(cid:23)(cid:18)(cid:14)(cid:1)
(cid:3)(cid:23)(cid:13)(cid:30)(cid:21)(cid:15)(cid:22)(cid:26)(cid:12)(cid:27)(cid:23)(cid:22)(cid:1)
(cid:2)(cid:25)(cid:25)(cid:21)(cid:19)(cid:16)(cid:14)(cid:28)(cid:24)(cid:23)(cid:1)
(cid:2)(cid:25)(cid:25)(cid:21)(cid:19)(cid:16)(cid:14)(cid:28)(cid:24)(cid:23)(cid:1)(cid:1)
(cid:9)(cid:17)(cid:12)(cid:25)(cid:15)(cid:1)(cid:5)(cid:1)
(cid:9)(cid:17)(cid:12)(cid:25)(cid:15)(cid:1)(cid:5)(cid:5)(cid:1)
(cid:6)(cid:11)(cid:3)(cid:1)
(cid:11)(cid:17)(cid:26)(cid:22)(cid:19)(cid:27)(cid:27)(cid:19)(cid:24)(cid:23)(cid:1)(cid:34)(cid:1)(cid:13)(cid:6)(cid:4)(cid:1)(cid:16)(cid:18)(cid:17)(cid:16)(cid:20)(cid:1)
(cid:2)(cid:25)(cid:25)(cid:21)(cid:19)(cid:16)(cid:14)(cid:28)(cid:24)(cid:23)(cid:1)(cid:5)(cid:26)(cid:14)(cid:22)(cid:17)(cid:31)(cid:24)(cid:26)(cid:20)(cid:1)
(cid:9)(cid:19)(cid:15)(cid:26)(cid:14)(cid:26)(cid:19)(cid:17)(cid:27)(cid:1)
(cid:7)(cid:10)(cid:6)(cid:1)
(cid:7)(cid:10)(cid:6)(cid:1)
Component Visibility 
Permission Check 
Protected Broadcast 
UID Check 
(cid:9)(cid:19)(cid:23)(cid:30)(cid:32)(cid:1)(cid:4)(cid:2)(cid:3)(cid:1)
(cid:9)(cid:19)(cid:23)(cid:30)(cid:32)(cid:1)(cid:8)(cid:17)(cid:26)(cid:23)(cid:17)(cid:21)(cid:1)
(cid:1)
(cid:12)(cid:14)(cid:31)(cid:1)(cid:12)(cid:17)(cid:27)(cid:24)(cid:30)(cid:26)(cid:16)(cid:17)(cid:27)(cid:1)
Figure 2: Android Security Model
many high-level services such as Package Manager, Ac-
tivity Manager, Notiﬁcation Manager and many others.
These services mediate access to system resources and
enforce proper access control based on the app’s user
id and its acquired Android permissions. Additionally,
certain services might enforce access control based on
the caller’s package name or certiﬁcate. Right below
the framework layer lies the Libraries layer, which is a
set of Android speciﬁc libraries and other necessary li-
braries such as libc, SQLite database, media libraries,
etc. Just like the framework services, certain Android
speciﬁc libraries perform various access control checks
based on the caller’s user id and its permissions as well.
At the bottom of the layers is Linux kernel which pro-
vides a level of abstraction between the device hardware
and contains all essential hardware drivers like display,
camera, etc. The Linux kernel layer mediates access to
hardware drivers and raw resources based on the standard
Discretionary Access Control (DAC).
To encourage collaboration and functionality re-use
between apps, Android apps are connected together by
Inter-Component Communication (ICC). An app can in-
voke other apps’ components (e.g. activities and ser-
vices) through the intent mechanism. It can further con-
ﬁgure several security parameters to protect its resources
and functionalities. As summarized in Figure 2, it can
make its components private, require the caller to have
certain permissions or to belong to a certain process.
Based on Figure 2, we summarize the Access Con-
trol (AC) checks employed by Android in Table 1. We
specify the ones whose security features might be altered
statically during device customization. By static modi-
ﬁcation, we refer to any modiﬁcation that can be per-
formed through changing framework resources ﬁles (in-
cluding framework-res*.xml which contains most con-
ﬁgurations of built-in security features), preloaded apps’
manifest ﬁles and other system-wide conﬁguration ﬁles
Feature Selection 
F t
S l
S
ti
(cid:2)(cid:22)(cid:14)(cid:24)(cid:23)(cid:18)(cid:14)(cid:1)
(cid:10)(cid:8)(cid:7)(cid:25)(cid:1)
Data Generation 
G
(cid:10)(cid:12)(cid:31)(cid:1)(cid:3)(cid:12)(cid:26)(cid:12)(cid:1)
Methodology: 
odo
Differential Analysis 
(cid:5)(cid:22)(cid:13)(cid:23)(cid:22)(cid:25)(cid:18)(cid:25)(cid:26)(cid:15)(cid:22)(cid:13)(cid:32)(cid:1)(cid:10)(cid:15)(cid:25)(cid:30)(cid:20)(cid:26)(cid:25)(cid:1)
(cid:9)(cid:17)(cid:12)(cid:25)(cid:15)(cid:1)(cid:5)(cid:5)(cid:5)(cid:1)
(cid:3)(cid:12)(cid:22)(cid:16)(cid:15)(cid:24)(cid:23)(cid:30)(cid:25)(cid:1)
(cid:9)(cid:12)(cid:29)(cid:15)(cid:24)(cid:22)(cid:25)(cid:1)
Result Analysis 