title:The Strength of Weak Randomization: Easily Deployable, Efficiently
Searchable Encryption with Minimal Leakage
author:David Pouliot and
Scott Griffy and
Charles V. Wright
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
The Strength of Weak Randomization: Easily
Deployable, Efﬁciently Searchable Encryption
with Minimal Leakage
David Pouliot
Portland State University
PI:EMAIL
Scott Griffy
Portland State University
PI:EMAIL
Charles V. Wright
Portland State University
PI:EMAIL
Abstract—Efﬁciently searchable and easily deployable
encryption schemes enable an untrusted,
legacy service
such as a relational database engine to perform searches
over encrypted data. The ease with which such schemes
can be deployed on top of existing services makes them
especially appealing in operational environments where
encryption is needed but it is not feasible to replace large
infrastructure components like databases or document
management systems. Unfortunately all previously known
approaches for efﬁciently searchable and easily deployable
encryption are vulnerable to inference attacks where an
adversary can use knowledge of the distribution of the
data to recover the plaintext with high probability.
We present a new efﬁciently searchable, easily deployable
database encryption scheme that is provably secure against
inference attacks even when used with real, low-entropy
data. We implemented our constructions in Haskell and
tested databases up to 10 million records showing our
construction properly balances security, deployability and
performance.
I. INTRODUCTION
into the cloud protects against
Many organizations today are moving to the cloud,
shipping their critical data to servers over which they
have little control. Encrypting data before uploading
it
theft or accidental
disclosure, but standard encryption mechanisms also
prevent the cloud service from performing any useful
computation on the client’s behalf. One of the most
desirable operations on encrypted data is search.
The problem of searching on encrypted data involves
inherent trade-offs between security, performance, and
utility. One part of a cryptographic construction’s utility
is the expressiveness of the queries that it supports. For
example, a construction that supports a large subset of
Structured Query Language (SQL) has more utility than
one that supports only exact-match queries.
Another aspect of utility more relevant to this paper
is the ease or difﬁculty of deploying a construction for
use in the real world.
A. The Importance of Deployability
Searchable Symmetric Encryption (SSE) encompasses
a class of efﬁcient constructions for encrypted databases
that provide security for data and queries [12], [15], [22],
[46]. One practical limitation of SSE schemes is that they
can be very difﬁcult to retroﬁt into existing production
systems. Grubbs [26] recounts one organization’s expe-
rience, where a team of applied cryptographers invested
12 person-months of effort to implement and deploy a
recent, high-performance SSE scheme [12]. In the end,
the new construction proved too difﬁcult to integrate with
the businesses’ existing systems, and the prototype was
scrapped.
In the real world, there is demand for protections
that can be deployed immediately. To meet this need,
another parallel line of work has investigated “efﬁciently
searchable” and “efﬁciently deployable” schemes that
enable an untrusted server to efﬁciently index and search
on encrypted data [4], [6], [8], [31], [39]. An efﬁciently
searchable encryption (ESE) scheme is one that reveals
some function of the plaintext in order to allow logarith-
mic search time using a legacy database or information
retrieval system. This might be done through a query
proxy rather than an complex database construction.
An “easily deployable” efﬁciently searchable encryption
scheme is one that retains (enough of) the expected
format of the plaintext to enable search with an existing
application or cloud service [31] [39].
Breaking from SSE, ESE gives up some security in
exchange for the ability to easily deploy encryption on
existing cloud services without the long delays and high
cost of developing entirely new cryptographic systems
(for example, see Grubbs [26]). This approach also
frees the encryption developer from needing to worry
about a whole host of practical systems issues including:
availability, redundancy, performance, scaling, backups,
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00059
517
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
system monitoring, user accounts and access control, etc.
The underlying cloud service already takes care of these.
The CryptDB system of Popa et al [44] ﬁrst demon-
strated the potential of this approach for protecting
outsourced relational databases. By layering a collection
of encryption techniques, including efﬁciently searchable
and order-preserving encryption, CryptDB supports most
SQL queries used by real applications. They achieved
near-native performance on queries from a standard
database benchmark, while storing only ciphertext in a
standard MySQL database. Similar efforts from industry
include SAP’s SEEED project [25] and Microsoft’s
Always Encrypted feature in SQL Server 2016 [1], which
is available commercially today.
Unfortunately, efﬁciently searchable constructions like
deterministic and order-preserving encryption trade off
more than just a little security. Inference attacks have
recently been demonstrated that enable an adversary to
recover some or all of the plaintext records if it has
some auxiliary information about their statistical distri-
bution [11], [18], [27], [41], [45], [50], [51]. In practice,
these attacks allow the adversary to recover almost the
entire database. Given the power of these attacks, it is
reasonable to ask: Is security feasible at all for efﬁciently
searchable and easily deployable encryption in the real
world? Much to our surprise, it turns out that the answer
is a qualiﬁed “yes.”
B. Contributions
In this paper, we focus on maximizing security in
operational scenarios where deployability is a hard re-
quirement. As a consequence of this deployability re-
quirement, the security of our schemes will necessarily
be somewhat less compared to other approaches where
easy real-world deployment is of no concern.
Still, we aim to provide provable security against the
most common adversaries, for applications that other-
wise could afford no security at all.
We present a new, efﬁciently searchable, easily de-
ployable database encryption scheme that is provably
secure against inference attacks even when used with
low-entropy data from the real world.
The security of our schemes is tunable with a single
parameter, allowing database owners to choose the most
appropriate balance of security versus runtime perfor-
mance and space overhead for the demands of their
individual applications. We also achieve even stronger
levels of security by bucketizing a small portion of the
data.
Weakly Randomized Encryption. Our core technique
is a generalization of a “folklore” encryption technique
that we call weakly randomized encryption (WRE). WRE
is a middle ground between deterministic encryption
(DET) and conventional, strongly randomized encryp-
tion. DET enables efﬁcient, logarithmic-time search be-
cause it allows a legacy server to create an index from
only ciphertexts, but on the other hand,
it provides
very little security for real data [41]. Conventional
(strongly) randomized encryption prevents the adversary
from learning even a single bit about the plaintext [24],
but
it also precludes the possibility of
efﬁcient search.
in doing so,
In a weakly randomized encryption, only a few bits
of randomness sampled from a low-entropy distribution
are used in each encryption. Our analysis shows that
this is sufﬁcient to protect against inference attacks if
we choose the distribution carefully. In order to perform
our WRE schemes, one must know the probability distri-
bution of the plaintexts. We believe it is not unreasonable
to ask that the data owner must know his data at least
as well as the attacker does. The distribution can also be
calculated during database initialization.
Deployability. Our constructions are compatible with
standard SQL relational databases. They can be de-
ployed immediately on popular cloud service platforms
including Google Cloud SQL1 and Amazon Relational
Database Service2. They are efﬁciently scalable up to
databases containing millions of records. We performed
queries returning up to 10,000,000 records. Our en-
crypted database, including its server-generated indices,
requires less than twice the space required for the plain-
text DB. Query response time with our Poisson Random
Frequency construction achieves response times within
27% of those of the plaintext database.
Security. We show that our construction is secure
against a passive “snapshot” attacker. We give the ad-
versary access to only the encrypted data and a source
of auxiliary information. We assume he does not have
access to the encrypted queries,
the access patterns
or return results. This model includes important real-
world threats, including attackers who can obtain ofﬂine
access to the encrypted database by SQL injection or by
stealing a backup hard drive. In contrast, previous easily
deployable, efﬁciently searchable schemes fail to achieve
even this modest level of security [41].
We acknowledge that
the adversary in this model
is weaker than the more powerful adversaries that are
typically considered for SSE or oblivious RAM. For new
applications that do not require deployability on legacy
1https://cloud.google.com/sql/
2https://aws.amazon.com/rds/
518
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
infrastructure, we recommend that system builders use
those stronger but less-deployable constructions.
Outline.
The paper is organized as follows. We
review related work in Section II. We introduce our
notion of security for WRE against inference attacks in
Section III and in Section IV we present the generic
template for a weakly randomized encryption. Then, in
Section V we give sequentially stronger variations on this
idea, leading up to our most secure construction, WRE
with bucketized Poisson salt allocation. We evaluate the
performance of our new constructions experimentally
with real databases in Section VI.
II. RELATED WORK
Bellare, Boldyreva, and O’Neill [6] and Amanatidis,
Boldyreva and O’Neill [4] proposed and analyzed early
ESE schemes using deterministic encryption (DET).
Those schemes are provably secure only when the plain-
text database has high min-entropy [6].
Order-preserving encryption was ﬁrst described in
2004 by Agrawal et al., who proposed a method to
encrypt data so that the resulting ciphertexts retain the
same ordering as the plaintext [3]. OPE was ﬁrst studied
formally by Boldyreva, Chenette, Lee, and O’Neill [8].
Boldyreva, Chenette, and O’Neill introduced the related
notion of efﬁciently orderable encryption [9], in which
a public, efﬁcient function can be used to compare
the ciphertexts. The similar notion of order-revealing
encryption was proposed by Boneh et al. [10], and
recent works give efﬁcient symmetric schemes for ORE
[14], [40]. The term “property-preserving encryption” is
sometimes used to encapsulate both OPE/ORE and ESE
[42].
Homomorphic encryption [21] and oblivious RAM
[23], [47] offer very strong guarantees of security, but
their practical performance is limited compared to other,
more efﬁcient techniques like SSE [12], [15], [22], [46].
Recent SSE schemes support rich queries [7], [16], [19],
[30], [34], [36] and achieve fast performance even on
very large data sets [12] by exploiting spatial locality
[5], [17] and/or secure hardware extensions [20].
Deterministic ESE constructions were shown to be
insecure against inference attacks [41], [11], [45]. Even
more powerful attacks have been demonstrated against
OPE and ORE [41] [18] [29]. In some passive attack
scenarios, e.g. with a stolen hard drive, if the attacker has
access to server logs and other system artifacts, then this
may enable more powerful attacks [28]. Our techniques
provide a necessary but not sufﬁcient level of protec-
tion against such attacks. Protecting other system-level
artifacts against inference attack remains an interesting
open problem, and is beyond the scope of this work.
Other recent attacks assume an online adversary who
can observe queries and their results in order to mount
inference attacks [38] [35]. Countering such attacks
remains an important open problem for all encrypted
database constructions.
Techniques for “bucketizing” search tokens, for exam-
ple with hash collisions, to reduce information leakage
have been proposed in encrypted search schemes since
their inception [6], [22], [39], [46]. Another line of work
also uses bucketization to enable range queries over
encrypted data without the use of ORE [32], [33], [49].
The paper most closely related to ours is a technical
report by Lacharit´e and Paterson on Frequency Smooth-
ing Encryption [37]. Their frequency-based homophonic
encoding is equivalent to our proportional salt allocation
method (see Section V-B).
III. SECURITY DEFINITIONS
Our security deﬁnitions are closely modeled after the
standard notion of security against a chosen plaintext
attack. Like all previous efﬁciently searchable construc-
tions, our scheme does not meet the standard deﬁni-
tion of Indistinguishable Under Chosen Plaintext Attack
(IND-CPA) security, as we must reveal the equality of
some plaintexts in order to allow efﬁcient searching. We
extend the standard IND-CPA deﬁnition as follows.
Where the CPA adversary submits pairs of plaintext
messages to its challenger, our adversary submits pairs of
lists of messages. In the real world, a snapshot adversary
does not know the order in which plaintext messages
were added to the database. To capture this limitation on
the adversary, in our game after the challenger randomly
selects one list of messages, it randomly shufﬂes the
selected list to prevent the adversary using any infor-
mation about the original order. Finally, the challenger
encrypts all messages in the shufﬂed list and provides
the encrypted list back to the adversary. The adversary’s
task is then to determine which list was selected.
The two lists of messages are required to contain the
same number of messages, and the messages (across
both lists) must all be of the same size. Otherwise
the adversary could use the size of the ciphertexts to
distinguish between the lists of messages. The other
requirement is that the order of messages in the lists
must be random. Otherwise the ordering of the search
tags could be used by the adversary to distinguish.
We call our security game Indistinguishability under
chosen unordered database attack (IND-CUDA).
519
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 1 (Negligible Function). A function : N →
N is negligible in k if for every positive polynomial p()
and sufﬁciently large k, (k) < 1/p(k). Let poly(k) and
negl(k) denote unspeciﬁed polynomial and negligible
functions in k, respectively.
Deﬁnition 2 (Pseudo-Random Function (PRF)). Let
F : {0, 1}kx{0, 1}n → {0, 1}m be an efﬁcient keyed
for all
function. F is a pseudo-random function if
probabilistic polynomial time distinguishers D there is
a negligible function negl such that
(cid:2)(cid:2)(cid:2)P r[DFk(·)
= 1] − P r[Df (·)
= 1]≤ negl(k)
(cid:2)(cid:2)(cid:2)
where the ﬁrst probability is taken over the uniform
random choice of k and the randomness of D and the
second probability it taken over the uniform choice of
f ∈ Funcn and the randomness of D.
Informally, a pseudo-random function is a polynomial
time function that is indistinguishable from a truly ran-
dom function by any polynomial time adversary.
Deﬁnition 3 (Statistical Distance). The statistical dis-
tance Δ between two random variables X, Y over a
common domain ω is deﬁned as:
(cid:2)(cid:2)(cid:2)(cid:2)P r(X = α) − P r(Y = α)
(cid:2)(cid:2)(cid:2)(cid:2)
Δ(X, Y ) =
1
2
(cid:3)
α∈ω
Two random variables X, Y are said to be -close