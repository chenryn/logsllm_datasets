2012
2013
2
10
3
10
4
10
5
10
Volume x Density
(f)
0
10
F
D
C
C
−1
10
2005
2006
2007
2008
2009
2010
2011
2012
2013
3
10
4
10
5
10
Volume
(d)
10
−2
0.8
2005
2006
2007
2008
2009
2010
2011
2012
2013
0.85
0.95
1
0.9
Density
(e)
10
−5
1
10
5
10
4
10
3
10
e
m
u
o
V
l
2
10
0
10
4
10
e
m
u
o
V
l
3
10
2
10
2
10
0
10
1
10
Number of Prefixes
(g)
4
10
e
m
u
o
V
l
3
10
2
10
2
10
0
10
1
10
Number of ASes
(h)
1
10
Number of days
2
10
(i)
Figure 6: Basic statistics about (λ, ν)-events found by PathMiner (λ = 0.8 and ν = 100). Time series of: (a) total number of next-hop
changes in each yearly sample; (b) percentage of these changes captured in events by PathMiner; (c) number of events found in each
day. Complementary CDFs of: volume of events – volume is deﬁned as the product of the number of preﬁxes, ASes and days in a
event; (e) density of events – density is the number of changes captured by an event over its volume; (f) product volume × density of
events. Event scatterplots (2013 only): (g) number of preﬁxes versus volume; (h) number of ASes versus volume; (i) number of days
versus volume.
6(a), 6(b) and 6(c) present the same statistics on a daily basis as
a time series over the 9 years of data. Note that the samples for
each year are distinct so trends should not be inferred across years.
From Figures 6(b) and 6(c) we can see that PathMiner performs
better in tensors with higher density and that overall, the shape of
the time series related to the fraction of changes and the number of
events a day is similar to the shape of the time series related to the
total number of changes (higher values in 2008 and in the last three
years, 2011, 2012 and 2013).
Next, we move to analyzing density and volume of events. As an
algorithmic constraint we have that each block has density higher
than 0.8 and volume greater than 100. But, in general, how large
and dense are the events? Figures 6(d), 6(e) and 6(f) present the
log-log complementary CDF for volume, density and their product,
respectively, for all 9 datasets. In general the distributions are long-
tailed, with many small events and a few very large events. In terms
of volume we can see that for 2005 more than 10% of all blocks
have volume greater than 500 and that this number goes up to 1000
in 2013.
In the tail of the curves we can see some huge events
with volume greater than 104. Similar comments can be made for
Figure 6(f). In terms of density, although 0.8 can be considered
a high threshold, there are many blocks that are much denser. For
instance, approximately 30% of all events (in all datasets) have den-
sity higher than 0.9 and 10% are higher than 0.95 in density.
We also explore the relationship between the volume of events
and the number of preﬁxes, ASes and days that the event con-
tains. Figures 6(g), 6(h) and 6(i) present the results for the year
of 2013 (results for other years follow the same trend). It can be
seen that the extracted events include large numbers of days and
ASes (obtained via the 2 dimensional factorization algorithm) and
that events with many preﬁxes are formed as a result of the 2D
event aggregation step.
Finally, Table 4 presents the 5 largest events, in terms of vol-
ume for each year. Columns 2 to 4 represent the number of pre-
ﬁxes, ASes and days in each event (thus the volume of the event
can be obtained by their product). The table shows that PathMiner
was able to ﬁnd events of remarkable scope, some of which in-
volve dozens of ASes, preﬁxes, and days. The largest events (in
4282007 and 2008) involve over 100,000 individual routing changes.
In this respect it is important to recall as well that each preﬁx in
our datasets is originated in a distinct AS, so the actual number of
routing changes per event in the full data is much larger because of
the similar routing behavior of co-originated preﬁxes.
Table 4: Description of top-5 events over 9 years
Dataset
#Preﬁxes
#ASes
#Days Density
2005
2006
2007
2008
2009
2010
2011
2012
2013
2
2
1
1
2
3
82
1
3
1
140
13
75
77
45
156
79
15
22
10
45
1
13
6
14
49
28
60
98
17
81
37
21
46
47
1
4
1
1
31
43
6
11
1
57
54
60
59
57
52
68
11
66
58
65
49
52
8
5
37
28
41
44
37
103
102
90
51
89
48
38
41
101
15
43
23
23
43
53
20
87
65
98
94
36
34
80
92
128
83
200
109
138
95
48
168
19
183
61
156
20
44
35
28
6
25
6
23
13
10
2
91
11
13
10
16
11
2
8
13
16
19
14
5
11
152
44
101
96
8
32
77
27
158
4
0.90
0.88
0.83
0.87
0.91
0.86
0.83
0.86
0.91
0.85
0.80
0.81
0.89
0.80
0.91
0.88
0.85
0.83
0.83
0.88
0.80
0.87
0.81
0.80
0.83
0.90
0.97
0.88
0.94
0.80
0.80
0.90
0.88
0.90
0.95
0.82
0.86
0.90
0.90
0.87
0.82
0.82
0.81
0.80
0.86
7. SINGLE ACTOR ANALYSIS
In this section we present the second component of PathMiner,
an algorithm to identify the network element that is most likely to
have caused a large event, given that the ASes, preﬁxes and days
involved in the event are known. We start by explaining our identi-
ﬁcation methodology, and then we present results.
7.1 Algorithm
We start with some basic observations. Consider an action taken
by some network element a (say, an AS) that causes a path from
AS b towards preﬁx p to change. We observe that a is, in general,
either on the path from b to p before the change, or after [10]. For
example, if a link fails or comes up, or an AS announces a new
route and/or withdraws an existing route, these events can cause
changes to many paths, but the paths involved will all pass through
the link or AS either before or after the change.1
Thus, if we are interested in some event that happened on day k,
then we may want to compare the set of paths seen in the network
on day k with those seen on day k + 1. Counting paths in order
to identify (or narrow down) a root cause for a routing change has
been explored before, e.g. [16]. However, PathMiner differs from
such previous work in terms of goals (since it particularly focuses
on large events that may re-occur over time) and in methods (since
it carefully chooses the set of paths to analyze).
PathMiner takes advantage of the fact that starting from a collec-
tion of (λ, ν)-events, found by its ﬁrst component, is an effective
way of isolating the set of paths to study, thus avoiding interference
of paths that are changing for unrelated reasons. Speciﬁcally, when
analyzing an event that on day k has set of ASes J and set of pre-
ﬁxes I, we consider only paths seen on days k and k + 1 passing
through ASes in J towards preﬁxes in I. If one of such path start
at an AS which is not in J and passes through a ∈ J , then Path-
Miner takes such path in account, but it ignores the portion before
a. Accordingly, we deﬁne Pk to be the multiset of all paths that are
found starting at an element of J and ending at an element of I on
day k.
Considering the above observations we have that a good candi-
date for the single network element responsible for the entire set
of observed path changes has the following properties: on either
day k or day k + 1, (a) most of the changed paths pass through
the network element and (b) most the paths going through the net-