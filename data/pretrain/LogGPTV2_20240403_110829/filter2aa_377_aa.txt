1
些malware-dev开源项⽬介绍-nim
项⽬列表
OffensiveNim
pop_bin.nim
作⽤
编译
运⾏
pop_winim_bin.nim
作⽤
编译
运⾏
pop_winim_lib.nim
作⽤
编译
运⾏
execute_assembly_bin.nim
作⽤
编译
运⾏
clr_host_cpp_embed_bin.nim
作⽤
编译
运⾏
scshell_c_embed_bin.nim
作⽤
编译
运⾏
fltmc_bin.nim
作⽤
2
编译
运⾏
blockdlls_acg_ppid_spoof_bin.nim
作⽤
编译
运⾏
named_pipe_client_bin.nim && named_pipe_server_bin.nim
作⽤
编译
运⾏
embed_rsrc_bin.nim
作⽤
编译
运⾏
self_delete_bin.nim
作⽤
编译
运⾏
encrypt_decrypt_bin.nim
作⽤
编译
运⾏
amsi_patch_bin.nim && execute_powershell_bin.nim
作⽤
编译
运⾏
etw_patch_bin.nim
作⽤
编译
运⾏
wmiquery_bin.nim
作⽤
3
编译
运⾏
out_compressed_dll_bin.nim
作⽤
编译
运⾏
dynamic_shellcode_local_inject_bin.nim
作⽤
编译
运⾏
shellcode_callback_bin.nim
作⽤
编译
运⾏
shellcode_bin.nim
作⽤
编译
运⾏
shellcode_fiber.nim
作⽤
编译
运⾏
shellcode_inline_asm_bin.nim
作⽤
编译
运⾏
syscalls_bin.nim
作⽤
编译
运⾏
passfilter_lib.nim
作⽤
4
编译
运⾏
minidump_bin.nim
作⽤
编译
运⾏
http_request_bin.nim
作⽤
编译
运⾏
execute_sct_bin.nim
作⽤
编译
运⾏
scriptcontrol_bin.nim
作⽤
编译
运⾏
excel_com_bin.nim
作⽤
编译
运⾏
keylogger_bin.nim
作⽤
编译
运⾏
uuid_exec_bin.nim
作⽤
编译
运⾏
unhookc.nim
作⽤
5
编译
运⾏
unhook.nim
作⽤
编译
运⾏
taskbar_ewmi_bin.nim
作⽤
编译
运⾏
fork_dump_bin.nim
作⽤
编译
运⾏
ldap_query_bin.nim
作⽤
编译
运⾏
sandbox_process_bin.nim
作⽤
编译
运⾏
list_remote_shares.nim
作⽤
编译
运⾏
chrome_dump_bin.nim
作⽤
编译
运⾏
suspended_thread_injection.nim
作⽤
6
编译
运⾏
steganography
简介
使⽤
nim-strenc
简介
使⽤
Nim-RunPE
简介
使⽤
NimGetSyscallStub
简介
使⽤
Nim_CBT_Shellcode
简介
使⽤
nimcrypto
简介
使⽤
winim
简介
使⽤
NimlineWhispersP
简介
⽤途
zippy
简介
⽤途
nuglifier
简介
⽤途
7
tiny-sqlite
简介
⽤途
编译命令
参考⽂献
OﬀensiveNim 
steganography 
nim-strenc 
Nim-RunPE 
NimGetSyscallStub 
Nim_CBT_Shellcode 
nimcrypto 
winim 
NimlineWhispers3 
zippy 
nugliﬁer 
tiny_sqlite 
该项⽬是S3cur3Th1sSh1t⼤佬开发的，项⽬当中的每个⽂件都可以单独编译，并且⽂件名字标识了这份
代码起到的作⽤。
直接调⽤MessageBoxA弹窗，但需要⾃⼰定义系统api函数调⽤的数据类型 
项⽬列表
●
●
●
●
●
●
●
●
●
●
●
●
OﬀensiveNim 
pop_bin.nim 
作⽤
编译
8
通过winim调⽤windows api，减少需要编写的nim代码 
运⾏
pop_winim_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/pop_bin64.exe  src\pop_bin.nim
1
9
通过winim库调⽤windows系统API，并且编译DLL动态链接库，导出函数为DllMain 
运⾏
pop_winim_lib.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/pop_winim_bin64.exe  src\pop_winim_bin.nim
1
10
运⾏
execute_assembly_bin.nim 
Bash
复制代码
nim cc --app=lib --nomain --cpu=amd64 -d:release -d:strip --
out=bin/pop_winim_lib64.dll  src\pop_winim_lib.nim
1
Bash
复制代码
rundll32 bin\pop_winim_lib64.dll DllMain
1
11
通过winim调⽤CLR API，内存执⾏.net assembly 
作⽤
编译
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/execute_assembly_bin64.exe  src\execute_assembly_bin.nim
1
12
嵌⼊C++代码，通过C++调⽤系统API函数加载CLR环境运⾏.net程序 
将scshell的C代码嵌⼊到nim程序当中编译，实现快速“加壳”，或许可以绕过⼀些杀软检测 
clr_host_cpp_embed_bin.nim 
作⽤
编译
运⾏
scshell_c_embed_bin.nim 
作⽤
编译
Bash
复制代码
nim cpp --app=console --cpu=amd64 -d:release -d:strip --
out=bin/clr_host_cpp_embed_bin64.exe  src\clr_host_cpp_embed_bin.nim
1
13
枚举系统上所有的Miniﬁlter驱动 
运⾏
ﬂtmc_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/scshell_c_embed_bin64.exe  src\scshell_c_embed_bin.nim
1
14
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/fltmc_bin64.exe  src\fltmc_bin.nim
1
15
16
以suspended状态创建⼀个进程，并将该进程的⽗进程PID指向explorer.exe（PPID Spooﬁng），并且开
启BlockDLL（禁⽌⾮系统DLL加载进进程，防注⼊）和ACG（保护进程代码不被修改，防hook） 
这⾥在taskbar⾥⾯没有看到suspened状态的notepad.exe程序，所以修改下原来的代码，以常规
CreationFlag启动程序。 
blockdlls_acg_ppid_spoof_bin.nim 
作⽤
编译
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/blockdlls_acg_ppid_spoof_bin64.exe  
src\blockdlls_acg_ppid_spoof_bin.nim
1
17
编译后再次运⾏
测试利⽤frida注⼊notepad.exe进程，然后枚举当前进程加载的模块列表，这⾥使⽤开源项⽬
https://github.com/poxyran/misc 
18
查看当前notepad进程当中加载的DLL 
19
Plain Text
复制代码
Module name: notepad.exe - Base Address: 0x7ff6a9500000
Module name: ntdll.dll - Base Address: 0x7ffba8990000
Module name: KERNEL32.DLL - Base Address: 0x7ffba82f0000
Module name: KERNELBASE.dll - Base Address: 0x7ffba5d00000
Module name: apphelp.dll - Base Address: 0x7ffba3350000
Module name: ADVAPI32.dll - Base Address: 0x7ffba8580000
Module name: msvcrt.dll - Base Address: 0x7ffba6a30000
Module name: sechost.dll - Base Address: 0x7ffba63d0000
Module name: RPCRT4.dll - Base Address: 0x7ffba8450000
Module name: GDI32.dll - Base Address: 0x7ffba83b0000
Module name: gdi32full.dll - Base Address: 0x7ffba52c0000
Module name: USER32.dll - Base Address: 0x7ffba6c70000
Module name: win32u.dll - Base Address: 0x7ffba5440000
Module name: combase.dll - Base Address: 0x7ffba5f60000
Module name: ucrtbase.dll - Base Address: 0x7ffba5110000
Module name: bcryptPrimitives.dll - Base Address: 0x7ffba5460000
Module name: OLEAUT32.dll - Base Address: 0x7ffba8630000
Module name: msvcp_win.dll - Base Address: 0x7ffba54d0000
Module name: COMDLG32.dll - Base Address: 0x7ffba86f0000
Module name: shcore.dll - Base Address: 0x7ffba5210000
Module name: SHLWAPI.dll - Base Address: 0x7ffba6c10000
Module name: SHELL32.dll - Base Address: 0x7ffba6de0000
Module name: cfgmgr32.dll - Base Address: 0x7ffba5cb0000
Module name: windows.storage.dll - Base Address: 0x7ffba55d0000
Module name: powrprof.dll - Base Address: 0x7ffba4e20000
Module name: kernel.appcore.dll - Base Address: 0x7ffba4e70000
Module name: profapi.dll - Base Address: 0x7ffba4e00000
Module name: COMCTL32.dll - Base Address: 0x7ffb97510000
Module name: FeClient.dll - Base Address: 0x7ffb9b110000
Module name: PROPSYS.dll - Base Address: 0x7ffba0ff0000
Module name: WINSPOOL.DRV - Base Address: 0x7ffb8dc50000
Module name: urlmon.dll - Base Address: 0x7ffb9cb00000
Module name: bcrypt.dll - Base Address: 0x7ffba49e0000
Module name: iertutil.dll - Base Address: 0x7ffb9c850000
Module name: IMM32.DLL - Base Address: 0x7ffba5f20000
Module name: uxtheme.dll - Base Address: 0x7ffba3660000
Module name: MSCTF.dll - Base Address: 0x7ffba68d0000
Module name: dwmapi.dll - Base Address: 0x7ffba2de0000
Module name: clbcatq.dll - Base Address: 0x7ffba6330000
Module name: efswrt.dll - Base Address: 0x7ffb87460000
Module name: MPR.dll - Base Address: 0x7ffb9bbd0000
Module name: wintypes.dll - Base Address: 0x7ffba2690000
Module name: twinapi.appcore.dll - Base Address: 0x7ffba3900000
Module name: CRYPTBASE.DLL - Base Address: 0x7ffba48f0000
Module name: frida-agent.dll - Base Address: 0x7ffb7e400000
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
20
可以看到上⾯第45⾏显示frida-agent.dll，证明成功注⼊notepad.exe进程当中⾮微软签名的DLL。。。
这个问题有知道为什么可以注⼊成功的师傅可以私聊我回复笔者下，笔者后⾯花时间研究下为什么这⾥
会注⼊成功。
利⽤命名管道进⾏进程间通信。
named_pipe_client_bin.nim && named_pipe_server_bin.nim 
作⽤
编译
Module name: CRYPT32.dll - Base Address: 0x7ffba4f40000
Module name: MSASN1.dll - Base Address: 0x7ffba4e80000
Module name: ole32.dll - Base Address: 0x7ffba6ad0000
Module name: WS2_32.dll - Base Address: 0x7ffba62c0000
Module name: DNSAPI.dll - Base Address: 0x7ffba44f0000
Module name: PSAPI.DLL - Base Address: 0x7ffba83a0000
Module name: NSI.dll - Base Address: 0x7ffba6430000
Module name: IPHLPAPI.DLL - Base Address: 0x7ffba4450000
Module name: WINMM.dll - Base Address: 0x7ffba2040000
Module name: WINMMBASE.dll - Base Address: 0x7ffba2000000
46
47
48
49
50
51
52
53
54
55
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/named_pipe_client_bin64.exe  src\named_pipe_client_bin.nim
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/named_pipe_server_bin64.exe  src\named_pipe_server_bin.nim
1
2
21
⾸先启动server端，server端创建命名管道，并等待client端连接。 
再启动client端 
客户端读取完成后退出，服务端也退出。
运⾏
embed_rsrc_bin.nim 
22
通过slurp嵌⼊压缩包到资源节中，转换为string后在运⾏期间解压使⽤。 
运⾏提示⽂件存在，修改下源码重新编译，再次运⾏。
作⽤
编译
运⾏
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/embed_rsrc_bin64.exe  src\embed_rsrc_bin.nim
1
23
查看⽂件是否存在和⽂件内容。
秘密是:https://www.youtube.com/watch?v=sT-mlWm_mag 
self_delete_bin.nim 
作⽤
24
通过将⾃身重命名为⽂件流实现⾃删除。
查看bin⽬录，是否有self_delete_bin64.exe 
可以发现程序已经⾃删除。
使⽤nimcrypto库对数据进⾏AES256 CTR加解密。 
编译
运⾏