to  study  and  recommend  hardware  and  software 
safeguards  that  would  satisfactorily  protect  classified 
information in multi-access, resource-sharing computer 
systems.”  The  RAND  Corporation’s  Willis  Ware  was 
asked to chair the Task Force under the authority of the 
Defense Science Board, and began meeting in October. 
The  Task  Force  and  its  panels  included  a  number  of 
future  security  visionaries  and  colleagues,  including 
E.L.  (Ted)  Glaser,  Pat  Haverty,  Art  Bushkin,  Bob 
Mosier,  Jerry  Moskowitz,  Larry  Roberts,  Bob  von 
Buelow,  Roy  McCabe,  Barry  Wessler,  James  P. 
Anderson,  Ed  Bensley,  Dan  Edwards,  Jerry  Saltzer, 
Hilda  Faust  [later  Mathieu],  Bob  Balzer,  and  Clark 
Weissman.5
Their 
landmark  report,  Security  Controls 
for 
Computer  Systems  [27],  was  published  as  a  classified 
CONFIDENTIAL  RAND  report  in  February  1970.  Its 
findings  are  still  of  interest  today,  but  unfortunately, 
were not widely disseminated at the time because of the 
classification.6
5 SDC was well represented on the Task Force by Mosier, von 
Buelow,  McCabe  and  Weissman.  This  eventually  proved  to  benefit 
my education in computer security. 
6  In  the  preface  to  the  publicly  reissued  version  of  the  report, 
Ware  states:  “At  that  time  it  was  felt  that  because  representatives 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:37:23 UTC from IEEE Xplore.  Restrictions apply. 
The  Ware  Report  was  prescient  in  its  presentation 
of: 
software 
to 
1.  Security 
risks  and 
enumerated 
the  nature  of 
security 
vulnerabilities.  In  addition,  computer  network 
vulnerabilities  were 
include: 
hardware  and 
failures;  emanations; 
wiretaps  and  crosstalk;  sabotage  from  operators, 
maintenance staff, systems programmers, and subtle 
software  modifications  by  users,  and  attachment  of 
bugs to terminals. Identified difficulties of securing 
a computer system included: 
2.  consideration  of  the  difficulty  and  complexity  of 
security  controls  on  a  range  of  ranging  from  the 
most  easily  controlled    processing  environments: 
local-access  batch,  remote-access  batch, 
local-
access 
remote-access 
multiprogramming,  to  the  most  difficult  of  all, 
remote-access time-shared systems 
multiprogramming, 
3.  consideration  of 
the  challenges  presented  by 
increasing  user  capability  and  the  complexity  of 
security  controls  based  on  the  simplest  risks  posed 
by  template-based  file  query  systems,  through  a 
scale  of  increasing  challenges  of  programming  via 
interpretation,  programming  via  limited  languages 
and checked-out compilers,7 up to users having full-
programming  capabilities  as 
risky 
environment 
the  most 
4.  The  specifics  of  access  control  policy  to  specific 
files  were 
to  be-based  on  system-confirmed 
authentication  of  the  user’s  identity  and  clearance, 
the  clearance  of  the  facility  from  which  the  user 
would  access  the  file,  and  the  clearances  of 
designate output devices 
5.  Defense  Department  needs  were  identified  for 
adaptive  access  control  policies  in  the  face  of 
degraded  operation  or  national  emergency.  The 
Report specifically addressed the costs, financial to 
mission-specific, of implementing access controls.  
from  government  agencies  participated  in  the  work  of  the  Task 
Force, the information in the report would appear to be of an official 
nature,  suggestive  of  the  policies  and  guidelines  that  would 
eventually  be  established.    Consequently,  it  was  felt  prudent  to 
classify the report CONFIDENTIAL overall….” 
7  There  was  a  long-standing  belief  that  allowing  assembly-
language  programming  would  pose  the  greatest  threats  to  computer 
security.  Programming  languages  like  FORTRAN  did  not  explicitly 
support  assembly-language  programming,  although  the  systems 
programming  language  JOVIAL  did.  Hence,  FORTRAN  was  consider 
“safer” at the time of the Ware Report. A few years later, this fallacy 
was  corrected  through  a  demonstration  that  EQUIVALENCE  and
DIMENSION  declarations  could  be  used  in  a  way  that  would  enable 
the execution of assembled code posing as binary data. 
6.  Hardware  and  software,  acting  together,  were  to 
provide 
isolation  from  user  programs  of  all 
operating  system  security  controls,  including  the 
audit  trail.  The  emerging  design  of  Multics  was 
specifically  given 
in  an 
explication of how this could be reliably achieved. 
salutary  comments 
7.  Specific  hardware  features  were 
identified  as 
necessary  for  access  control,  including  a  minimum 
of  a  supervisor  state  and  a  user  state,  program 
isolation  mechanisms  such  as  base  and  bounds 
mechanisms, machine fault detection, etc.  
8.  Operating  system  complexity  was  recognized as an 
impediment  to  actually  proving  that  the  design and 
implementation  were  correct.  To  compensate  for 
for  detailed 
this, 
documentation 
the 
modules on which access control was based.  
the  Ware  Report  called 
text  and  flowcharts  of 
in 
9.  Penetration testing was required on a periodic basis, 
and  it  was  highly  recommended  that  some  of  these 
tests  would  necessarily  be  conducted  by  outside 
personnel  not  connected  with 
the  design  or 
implementation of the system. 
The  system  would  need  to  periodically  perform 
dynamic operating system integrity tests and to validate 
the  efficacy  of  specific  security  tests  by  running 
attempts to subvert the access control policy.  
Although  incomplete  by  contemporary  standards, 
many  of  the  Ware  Report’s  recommendations  and 
findings  are  still  valid.  The  Report  contained  an 
appendix 
in  which  system  access  controls  were 
formally  specified  as  a  set  of  transformation  rules  in 
Backus-Naur Form (BNF). 
Ultimately, the Report’s technical recommendations 
came  from  the  research  community.  Many  ideas, 
including  segmented  virtual  memory  and  privilege 
states are reflected in the Task Force’s conclusions and 
recommendations.  The  significant  outgrowth  of  the 
Task Force’s work was the funded development of two 
multiprocessing 
designed 
incorporating  computer  security  principles  from  the 
start. These were the refined security design of Multics 
at  MIT  (first  specified  in  1965),  and  the  multilevel 
time-sharing system adept-50 in 1967-8 at SDC. 
that  were 
systems 
1.2.1.  Multics.  The  Multics  project  introduced  a 
number  of  security  principles  to  the  technology.  The 
system  was  designed  as  a  collaboration  between  MIT, 
General  Electric  and  Bell  Labs  under  arpa  Funding  to 
run  a  modified  GE  635  computer,  renamed  the  GE 
645..  Early  management  and  technical  contribution 
spanned the three organizations, and included principal 
contributions  from  Fernando  “Corby”  Corbató,  Ed 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:37:23 UTC from IEEE Xplore.  Restrictions apply. 
Vance,  Vic  Vyssotsky,  Peter  Neumann,  Jerry  Saltzer, 
Ted  Glaser,  Butler  Lampson,  Tom  Van  Vleck  and 
Charlie Clingen.  
incorporated 
Many  of  the  concepts  I  mentioned  above  were 
including: 
ultimately 
Segmented  virtual  memory,  protection  and  privilege 
rings,  the  operating  system  was  coded  in  PL/I  instead 
of  assembler,  and  it  incorporated  modular  design  and 
least privilege.8
in  Multics, 
Multics  design,  implementation,  and  use  ran  over 
the period 1963-2000. Multics history is documented at 
http://www.multicians.org/. 
Because  of  the  lack  of  an  identified  computer 
security  problem,  Bell  Labs’  participation  in  the 
Multics  project  ended  after  a  few  years.  A  laboratory 
version  of  a  stripped-down  Multics-like  system  soon 
came  about  that  had  no  file  access  controls  because 
they  weren’t  perceived  as  necessary 
lab 
environment.  Peter  Neumann  suggested  the  name  for 
the  system  should  be  Unics  (making  the  pun  of  an 
emasculated  single-user  Multics)  because  of  the  many 
Multics features that had been eliminated. It was Brian 
Kernighan who claims credit for naming it UNIX.9
the 
in 
to 
1.2.2. ADEPT-50. ARPA  awarded  a  contract  in  1966  to 
Sdc 
implement  a  Time  Shared  Database 
Management System (TDMS) on an IBM S/360 model 
50  computer.  TDMS  was  specified  to  support  rapid 
retrieval on ad-hoc queries over any field combination 
as  a  recursively-defined  hierarchical  fully-inverted 
database.  The  underlying  operating  system  reflected  a 
multilevel  security  design  created by Clark Weissman, 
who  directed  a  staff  that  included  Dick  Linde,  Sal 
Aranda,  Martha  Bleier,  Barry  Gold,  Steve  Sherman, 
and Clay Fox.  
the  ADEPT-50 
formulation  of 
In  1967,  Weissman  asked  me  to  prepare  a  formal 
mathematical 
[28] 
interpretation  of  the  military  security  policy-based 
model  described  in  the  Ware  Report.  The  model 
addressed 
compartments/categories, 
franchise  (specific  permissions),  and  need-to-know  for 
authenticated  users.  It  implemented  a  dynamic  user-
specific  High  Water-Mark  (HWM)  access  policy  that 
determined the level at which objects and files created 
by the user could be read or stored to media.10
clearance, 
I ported META6, the compiler-compiler I had been 
developing,  to  ADEPT-50  which  served  as  a  base  for 
8  A  military  version,  AFDSC  Multics,  was  derived  from 
Multics  that  provided  for  hierarchical  and  compartmented  security 
clearances/classifications.  This  later  version  implemented  a  version 
of the Bell-LaPadula security policy models. 
9 Peter Neumann, private communication. 
10  ADEPT-50  was  certified  and  accredited  for  use  by  part  of 
producing  tools  for  converting  flat-structure  record-
based  databases  automatically  into  the  TDMS  data 
model.  In  1967-8,  I  ended  up  commuting  on a weekly 
basis from Santa Monica to the Pentagon,11 which had 
a  growing  need  to convert classified databases over to 
TDMS.  Keypunch  errors  and  semantic  confusions 
among  the  military  users  were  the  causes  of  my  many 
trips 
the  National  Military  Command  System 
Support Center (NMCSSC) during the Vietnam War.  
to 
its  dynamic  HWM  policy, 
ADEPT-50  was  being  used  to  support  multilevel 
operation,  and 
in 
anticipation  of  the  *-Property,  proved  to  be  confusing 
and  frustrating  to  nmcssc  users.  The  most  plaguing  of 
problems  was  that  a  user  would  create  a  new  file  or 
modify  an  old  one  such  that  it  could  not  be  accessed 
once  closed.  This  was  because  the  new  file’s  security 
level  would  be 
the 
  attributes  of  all 
files  opened  during  the  user’s  session.  The  new  file’s 
access control list became the intersection of the access 
control lists (and rights) of all open files that had been 
accessed  during  the  session.  This  rapidly  became  a 
singleton  access  control  list,  thereby  isolating  the  new 
or modified file from all other users. 
least  upper  bound  of 
the 
ADEPT-50 was in use through the Vietnam War and 
well into the 1970s. 
1.3. The Anderson Report 
The  U.S.  Air  Force  awarded  a  contract  in  1972  to 
the  James  P.  Anderson  Company 
to  produce  a 
computer  security  planning  study.  A  panel  of  experts, 
chaired  by  E.L.  “Ted”  Glaser,  met  between  February 
and September 1972 to produce an UNCLASSIFIED two-
volume  report  [2].  Additional  participants  included 
Eldred  Nelson,  Bruce  Peters,  Dan  Edwards,  Hilda 
Faust, Steve Lipner, Roger Schell, Clark Weissman and 
Chuck  Rose.  The  Anderson  Report  outlined  a  sound 
approach  to  the  development  of  multiuser  multilevel 
computer systems. 
The  most  important  contribution  of  the  Anderson 
Panel  was  its  strong  direction  toward  the  use  of 
formalisms in addressing controlled sharing in terms of 
an  access  control  policy  model,  the  design  of  the 
security  mechanisms,  and  the  production  of  security 
assurances. The concept of an access control model, or 
security policy model, soon led to formalisms. G. Scott 
Graham  and  Peter  Denning  had  published  a  model  in 
which  the  accesses  by  subjects  to  objects  were 
represented  in  a  matrix M wherein:  rows  represented 
subjects  S,  columns  represented  objects  O,  and 
11  This  was  a  difficult  period  for  me.  I  was  working  full-time 
the U.S. Intelligence Community and in the Pentagon. 
both at SDC and at UCLA on a doctorate in mathematics. 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:37:23 UTC from IEEE Xplore.  Restrictions apply. 
In 
access. 
this  model, 
elements Ms,o represented the specific modes of access