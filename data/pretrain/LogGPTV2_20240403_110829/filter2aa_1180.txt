周末hitconctf2021两道题简单记录。
W3rmup PHP这题有两个⼩考点，结合起来⽐较有趣。⾸先是题⽬中这个循环，考察的是经典的循环体中改变被
遍历对象的⻓度导致遍历不全的bug。我们只要传⼊类似 $arr= ['123', false, "';$(id)'"] 这样的数组，
就可以绕过 escapeshellarg 的过滤逃逸单引号。因为在循环到 $arr[1] 时，由于unset的作⽤， $arr 数组⻓度
会变成2，这样在下次循环就⽆法满⾜ $i写⽂件。SSRF是调⽤了pycurl，pycurl是libcurl的封装，所以⽀持curl⽀持的所有协
议。⽐较好⽤的就是 file 读⽂件和 gopher 发tcp payload。题⽬唯⼀能打的内⽹服务就是nfs。nfs共享的⽬录
是 /app/static/images ，⽽模版⽂件在 /app/templates/ 下⾯，⽆法直接逃逸出共享⽬录写模板⽂件。这些
是前提条件。
这道题的⼤思路就是ssrf打nfs-server的2049端⼝，告诉nfs-server我创建了⼀个 /app/templates/index.html
-> ./xxx.jpg 的软链接（软链接可以指向共享⽬录外很关键，之所以存在这个包也是因为nfs协议⽀持同步软链
接，但linux的软链接毕竟没有真的内容，所以nfs做法就是⽤这样⼀个包告诉nfs-server在服务端创建⼀个⼀摸⼀
样的链接，有点基因复制的味道了），然后nfs-server傻乎乎的在服务器上创建这个软链接，之后这个软链接⼜会
被反过来同步到nfs-client上，这样就通过SSRF nfs server实现了在nfs-client的共享⽬录中创建了⼀个指向模板⽂
件的软链接xxx.jpg。然后就可以利⽤题⽬的保存图⽚的功能向模板⽂件中写模板字符串，xxx这个名字是根据
$yaml = <<<EOF
    - echo          # cmd
    - $addr         # address
    - $country      # country
    - $mail         # mail
    EOF;
$arr = yaml_parse($yaml);
if (!$arr) die('bad yaml');
for ($i=0; $i < count($arr); $i++) { 
  if (!$arr[$i]) {
    unset($arr[$i]);
    continue;
  }
  $arr[$i] = escapeshellarg($arr[$i]);
}
system(implode(" ", $arr));
remote_addr+url算出来的，最后请求⾸⻚即可渲染模板执⾏任意命令。
⽽这题恶⼼的地⽅在于nfs协议的复杂，所以⽣成nfs协议的SSRF payload的路⽐较艰⾟。经过⼀下午调试最终确
定了nfs v3的三个包可以实现上述⽬的。
1. 第1个包是与nfs-server的111/tcp端⼝通信，可以获取到⼀个随机的⾼端⼝P
2. 第2个包是与nfs-server的⾼端⼝P/tcp通信，可以获取到⼀个叫做 file handle 的参数
3. 第3个包是与nfs-server的2049/tcp通信，带上 file handle 参数，可以执⾏nfs v3的SYMLINK操作，⼀击
命中靶⼼
1、2两个包可以通过下⾯这个命令发出
需要注意的就是 -o vers=3,tcp 参数，前⼀个指定协议版本，后⼀个指定使⽤ tcp 协议，默认是udp的，⽽curl
好像⽆法通过udp发这些包。
还有就是第2、3两个包是需要源端⼝是 privileged port 的，即 <1024 端⼝，这可以通过设置 LOCALPORT=233
参数来指定，因为题⽬的docker启动时指定了 --privileged 参数，所以即使题⽬是 nobody 权限运⾏，依然可
以绑定权限端⼝。111端⼝是 rpcbind ,⾼端⼝P好像是 rpc.mountd ,这些应该是和nfs v3的架构有关系，这⾥不深
究。
还有最后⼀个看似很⼩的考点就是⽤gohper协议把这些包发过去后，由于⽆法设置超时时间，会⼀直卡着，由于
curl⼜有缓存，所以我们会拿不到第⼆个包的输出 file handle 。解决办法是在url后⾯加⼀个 %0d%0a ，看流量
是 0d0a 是⼀个RPC的continuation包，111端⼝在收到之后主动与client四次挥⼿了，所以 0d0a 应该是相当于⼀
个结束符。
赛后复盘发现nfs v4.0更好⽤，因为v4协议优化了交互流程，只需要和2049交互就可以完成所有操作。查询 file
handle 只需要向2049发⼀个LOOKUP就⾏了。从4.1版本开始才需要session，⽐赛时调了很久4.2版本，因为存
在seq以及client id验证的问题搞了挺久，赛后验证4.1其实也可以做，需要构造好相应client id就可以了，具体可
以参考rfc5661
mount -t nfs nfs-server:/data /data -o nolock -o vers=3,tcp