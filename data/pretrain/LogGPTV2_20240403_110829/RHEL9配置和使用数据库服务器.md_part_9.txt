-   请设置 `ON_ERROR_STOP`{.literal} 变量，使
    [**[psql]{.application}**]{.strong} 在发生 SQL
    错误时退出，且有一个为 3 的退出状态码：
    ``` literallayout
    $ psql --set ON_ERROR_STOP=on dbname 
## []{#using-postgresql_configuring-and-using-database-servers.html#backuping-postgresql-system-level-backup_backing-up-postgresql-data}使用文件系统级别备份来备份 PostgreSQL 数据 {.title}
:::
要执行文件系统级备份，请将 [**PostgreSQL**]{.strong}
数据库文件复制到其它位置。例如，您可以使用以下任一方法：
::: itemizedlist
-   使用 [**tar**]{.strong} 工具创建归档文件。
-   使用 [**rsync**]{.strong} 工具将文件复制到其它位置。
-   创建数据目录的一致快照。
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#_advantages_and_disadvantages_of_a_file_system_level_backup}文件系统级别备份的优点和缺陷 {.title}
:::
文件系统级别备份与其他 [**PostgreSQL**]{.strong}
备份方法相比有以下优点：
::: itemizedlist
-   文件系统级的备份通常比 SQL 转储要快。
:::
与其它 [**PostgreSQL**]{.strong}
备份方法相比，文件系统级别备份有以下缺陷：
::: itemizedlist
-   当您要从 RHEL 8 升级到 RHEL 9
    时，这个备份方法不合适，并将您的数据迁移到升级的系统。文件系统级别备份是特定于架构的，特定于
    RHEL 主版本。如果升级不成功，但无法在 RHEL 9
    系统中恢复数据，则可以在 RHEL 8 系统中恢复数据。
-   数据库服务器必须在数据备份前和数据恢复前关闭。
-   无法备份和恢复某些独立文件或表。文件系统备份只能用于完整备份和恢复整个数据库集群。
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#_performing_a_file_system_level_backup}执行文件系统级别备份 {.title}
:::
要执行文件系统级备份，请使用以下流程：
::: orderedlist
**流程**
1.  选择数据库集群的位置，并初始化该集群：
    ``` literallayout
    # postgresql-setup --initdb
    ```
2.  停止 postgresql 服务：
    ``` literallayout
    # systemctl stop postgresql.service
    ```
3.  使用任何方法来进行文件系统备份，例如 `tar`{.literal} 归档：
    ``` literallayout
    $ tar -cf backup.tar /var/lib/pgsql/data
    ```
4.  启动 postgresql 服务：
    ``` literallayout
    # systemctl start postgresql.service
    ```
:::
::: itemizedlist
**其他资源**
-   [PostgreSQL 文档 -
    文件系统级备份](https://www.postgresql.org/docs/current/backup-file.html){.link}。
:::
:::
:::
::: section
::: titlepage
## []{#using-postgresql_configuring-and-using-database-servers.html#backuping-postgresql-continuous-archiving_backing-up-postgresql-data}通过持续存档来备份 PostgreSQL 数据 {.title}
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#intro-continuous-archiving}持续归档介绍 {.title}
:::
[**PostgreSQL**]{.strong}
将对数据库的数据文件所做的每项修改记录到预写日志(WAL)文件中，该文件位于集群数据目录的
`pg_wal/`{.literal}
子目录中。此日志主要用于崩溃恢复。崩溃后，可用上次检查点以后所记录的日志条目将数据库恢复到一致。
持续归档方法也称为在线备份，以在运行的服务器上执行的基础备份或文件系统级备份的形式，将
WAL 文件与数据库集群的副本结合起来。
如果需要进行数据库恢复，您可以从数据库集群的副本恢复数据库，然后从备份的
WAL 文件中重新执行日志，使系统恢复到当前状态。
使用持续归档方法时，您必须保持所有归档的 WAL
文件的连续顺序，这些文件至少可扩展到上一次基础备份的开始时间。因此，基础备份的理想频率取决于：
::: itemizedlist
-   归档 WAL 文件的存储卷。
-   需要恢复时数据恢复的最可能持续时间。如果自上次备份起已有较长时间，系统会重新执行更多的
    WAL 段，因此恢复需要更长的时间。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您不能将 [**[pg_dump]{.application}**]{.strong} 和
[**[pg_dumpall]{.application}**]{.strong} SQL
转储用作持续归档备份解决方案的一部分。SQL
转储生成逻辑备份，但所包含的信息不足以供WAL重新执行。
:::
要使用持续归档方法执行数据库备份和恢复，请按照以下说明：
::: orderedlist
1.  设置并测试您归档 WAL 文件的步骤 - 请参阅 ["设置 WAL
    归档"一节](#using-postgresql_configuring-and-using-database-servers.html#setting-wal-archiving "设置 WAL 归档"){.xref}。
2.  执行基础备份 - 请参阅
    ["进行基础备份"一节](#using-postgresql_configuring-and-using-database-servers.html#making-base-backup "进行基础备份"){.xref}。
:::
要恢复您的数据，请按照
["使用持续归档备份来恢复数据库"一节](#using-postgresql_configuring-and-using-database-servers.html#restoring-database-with-continuous-archiving "使用持续归档备份来恢复数据库"){.xref}
中的说明。
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#advantages-continuous-archiving}持续归档的优点和缺陷 {.title}
:::
与其它 [**PostgreSQL**]{.strong} 备份方法相比，持续归档具有以下优势：
::: itemizedlist
-   使用持续备份方法时，可以使用不完全一致的基础备份，因为备份中的任何内部不一致都可以被重新执行日志所修正。因此，您可以在正在运行的
    [**PostgreSQL**]{.strong} 服务器上执行基础备份。
-   不需要文件系统快照； `tar`{.literal} 或类似的归档工具就足够了。
-   持续备份可以通过继续归档 WAL 文件来实现，因为日志重播的 WAL
    文件序列可能会无限期地延长。这对大型数据库尤其重要。
-   持续备份支持点恢复。不需要将 WAL
    条目重新显示到结尾。可在任何时间点停止重新执行，并且数据库可以恢复到执行基础备份以后的任何状态。
-   如果已经加载了相同的基础备份文件的另一台机器可以连续使用WAL文件系列，那么可以在任何时候用数据库几乎当前的副本来恢复其它机器。
:::
与其他 [**PostgreSQL**]{.strong} 备份方法相比，持续归档有以下缺点：
::: itemizedlist
-   持续备份方法只支持恢复整个数据库集群，而不是子集。
-   持续备份需要广泛的归档存储。
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#setting-wal-archiving}设置 WAL 归档 {.title}
:::
运行的 [**PostgreSQL**]{.strong}
服务器会生成一系列预写日志(WAL)记录。服务器物理上将该序列分成 WAL
段文件，这些文件被指定了数字名称，以反映它们在 WAL
序列中的位置。如果不进行 WAL
归档，段文件将被重新使用，并被重命名为更高的段号。
在归档 WAL
数据时，在重用段文件之前，都会捕获每一个段文件的内容，并将其保存在一个新的位置。您有多个保存内容的选项，例如其他机器上的
NFS 挂载目录、磁带驱动器或 CD。
请注意，WAL 记录不包括对配置文件的修改。
要启用 WAL 归档，请使用以下流程：
::: orderedlist
**流程**
1.  在 `/var/lib/pgsql/data/postgresql.conf`{.literal} 文件中：
    ::: orderedlist
    1.  将 `wal_level`{.literal} 配置参数设置为 `replica`{.literal}
        或更高的值。
    2.  将 `archive_mode`{.literal} 参数设置为 `on`{.literal}。
    3.  在 `archive_command`{.literal} 配置参数中指定 shell
        命令。您可以使用 `cp`{.literal} 命令、其它命令或 shell 脚本。
    :::
2.  重启 `postgresql`{.literal} 服务以使修改生效：
    ``` literallayout
    # systemctl restart postgresql.service
    ```
3.  测试您的归档命令，并确保它不会覆盖现有的文件，如果失败，它会返回一个非零的退出状态码。
4.  要保护您的数据，请确保将段文件归档到不具有组或全局读权限的目录中。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
归档命令只对已完成的 WAL 段执行。生成小 WAL
流量的服务器在交易完成和其归档存储中的安全记录之间可能会有很长时间的延迟。要限制未归档数据可保留多久，您可以：
::: itemizedlist
-   设置 `archive_timeout`{.literal}
    参数，来强制服务器以给定频率切换到新的 WAL 段文件。
-   使用 `pg_switch_wal`{.literal}
    参数强制段切换，以确保交易在完成后立即归档。
:::
:::
::: example
[]{#using-postgresql_configuring-and-using-database-servers.html#idm140063683446224}
**例 4.3. 用于归档 WAL 段的 shell 命令**
::: example-contents
本例显示了您可以在 `archive_command`{.literal} 配置参数中设置的简单
shell 命令。
以下命令将完成的段文件复制到所需位置：
``` literallayout
archive_command = 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
```
其中 `%p`{.literal} 参数替换为归档文件的相对路径，`%f`{.literal}
参数替换为文件名。
此命令将可归档的 WAL 段复制到 `/mnt/server/archivedir/`{.literal}
目录中。替换 `%p`{.literal} 和 `%f`{.literal}
参数后，执行的命令如下所示：
``` literallayout
test ! -f /mnt/server/archivedir/00000001000000A900000065 && cp pg_wal/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065
```
对每个归档的新文件都会生成类似的命令。
:::
:::
::: itemizedlist
**其他资源**
-   有关设置 WAL 存档的更多信息，请参阅 [PostgreSQL 13
    文档](https://www.postgresql.org/docs/13/continuous-archiving.html#BACKUP-ARCHIVING-WAL){.link}
:::
:::
::: section
::: titlepage
### []{#using-postgresql_configuring-and-using-database-servers.html#making-base-backup}进行基础备份 {.title}
:::
您可以通过多种方法创建基础备份：本节描述了在运行的
[**PostgreSQL**]{.strong} 服务器上使用
[**[pg_basebackup]{.application}**]{.strong}
工具执行基础备份的最简单的方法。
基础备份进程会创建一个备份历史记录文件，该文件存储在 WAL
归档区，并以基础备份所需的第一个 WAL 段文件来命名。
备份历史记录文件是一个小文本文件，其包含开始和结束时间，以及备份的 WAL
段。如果您使用标签字符串来标识关联的转储文件，那么您可以使用备份历史记录文件来确定要恢复哪个转储文件。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
请考虑保留多个备份集，以确保您可以恢复数据。
:::
要执行基础备份，请使用以下流程：
::: itemizedlist
**先决条件**
-   您必须以 `postgres`{.literal}
    超级用户身份、具有数据库管理员特权的用户身份或至少具有
    `REPLICATION`{.literal} 权限的其他用户身份来运行命令。
-   您必须保留在基础备份期间和之后生成的所有 WAL 段文件。
:::
::: orderedlist
**流程**
1.  使用 `pg_basebackup`{.literal} 工具执行基础备份。
    ::: itemizedlist
    -   将基础备份创建为单个的文件（纯格式）：
        ``` literallayout
        $ pg_basebackup -D backup_directory -Fp
        ```