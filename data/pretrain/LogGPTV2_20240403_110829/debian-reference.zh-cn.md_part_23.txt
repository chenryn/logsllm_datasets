userservicemanagerprocessownedbythecorrespondinguser. Seesystemd(1).
Thesystemduserservicemanagerprocessspawnsprocessesinparallelbasedonthedeclarativeunitconfigurationfiles(see
systemd.unit(5)anduser@.service(5)).
Unitsfortheusermodeareloadedfromthe”UserUnitSearchPath”describedinsystemd.unit(5). Themainonesareas
followsintheorderofpriority:
• ”~/.config/systemd/user/*”: Userconfigurationunits
• ”/etc/systemd/user/*”: Userunitscreatedbytheadministrator
• ”/run/systemd/user/*”: Runtimeunits
• ”/lib/systemd/user/*”: Userunitsinstalledbythedistributionpackagemanager
Thesearemanagedinthesamewayas第 3.2.1 节.
3.3 内核消息
在控制台上显示的内核错误信息，能够通过设置他们的阈值水平来配置。
# dmesg -n3
Debian参考手册 80/233
错误级别值 错误级别名称 说明
0 KERN_EMERG 系统不可用
1 KERN_ALERT 行为必须被立即采取
2 KERN_CRIT 危险条件
3 KERN_ERR 错误条件
4 KERN_WARNING 警告条件
5 KERN_NOTICE 普通但重要的条件
6 KERN_INFO 信息提示
7 KERN_DEBUG debug级别的信息
Table3.4: 内核错误级别表
3.4 系统消息
在 systemd 下, 内核和系统的信息都通过日志服务 systemd-journald.service (又名 journald) 来记录，放
在”/var/log/journal”下的不变的二进制数据，或放在”/run/log/journal/”下的变化的二进制数据.这些二
进制日志数据，可以通过journalctl(1)命令来访问。例如，你可以显示从最后一次启动以来的日志，按如下所示：
$ journalctl -b
操作 命令片段
查看从最后一次启动开始的系统服务和内核
”journalctl -b --system”
日志
查看从最后一次启动开始的当前用户的服务
”journalctl -b --user”
日志
查看从最后一次启动开始的”$unit”工作
”journalctl -b -u $unit”
日志
查看从最后一次启动开始的”$unit”的工
”journalctl -b -u $unit -f”
作日志(”tail -f”式样)
Table3.5: 典型的journalctl命令片段列表
在systemd下，系统日志工具rsyslogd(8)可以被卸载。如果安装了它，它会改变它的行为来读取易失性二进制日志数
据（代替在systemd之前默认的”/dev/log”）并创建传统的永久性ASCII系统日志数据。”/etc/default/rsyslog”
和”/etc/rsyslog.conf”能够自定义日志文件和屏幕显示。参见rsyslogd(8)和rsyslog.conf(5)，也可以参见
第 9.3.2 节。
3.5 系统管理
systemd不仅仅提供系统初始化，还用systemctl(1)命令提供通用的系统管理操作。
这里,上面例子中的”$unit”，可以是一个单元名（后缀.service和.target是可选的)，或者，在很多情况下，也
可以是匹配的多个单元(shell式样的全局通配符”*”,”?”,”[]”，通过使用fnmatch(3)，来匹配目前在内存中的所有
单元的基本名称).
上面列子的系统状态改变命令，通常是通过”sudo”来处理，用以获得需要的系统管理权限。
”systemctl status $unit|$PID|$device”的输出使用有颜色的点(”●”)来概述单元状态，让人看一眼就知道。
• 白色的”●”表示一个”不活动”或”变为不活动中”的状态。
• 红色的”●”表示“失败”或者“错误”状态。
• 绿色”●”表示“活动”、“重新加载中”或“激活中”状态。
Debian参考手册 81/233
操作 命令片段
列出所有target单元配置 ”systemctl list-units --type=target”
列出所有service单元配置 ”systemctl list-units --type=service”
列出所有单元配置类型 ”systemctl list-units --type=help”
列出内存中所有socket单元 ”systemctl list-sockets”
列出内存中所有timer单元 ”systemctl list-timers”
启动”$unit” ”systemctl start $unit”
停止”$unit” ”systemctl stop $unit”
重新加载服务相关的配置 ”systemctl reload $unit”
停止和启动所有”$unit” ”systemctl restart $unit”
启动”$unit”并停止所有其它的 ”systemctl isolate $unit”
转换到” 图形”(图形界面系统) ”systemctl isolate graphical”
转换到” 多用户”(命令行系统) ”systemctl isolate multi-user”
转换到” 应急模式”(单用户命令行系统) ”systemctl isolate rescue”
向”$unit”发送杀死信号 ”systemctl kill $unit”
检查”$unit”服务是否是活动的 ”systemctl is-active $unit”
检查”$unit”服务是否是失败的 ”systemctl is-failed $unit”
检查”$unit|$PID|device”的状态 ”systemctl status $unit|$PID|$device”
显示”$unit|$job”的属性 ”systemctl show $unit|$job”
重设失败的”$unit” ”systemctl reset-failed $unit”
列出所有单元服务的依赖性 ”systemctl list-dependencies --all”
列出安装在系统上的单元文件 ”systemctl list-unit-files”
启用”$unit”(增加符号链接) ”systemctl enable $unit”
禁用”$unit”(删除符号链接) ”systemctl disable $unit”
取消遮掩”$unit”(删除到”/dev/null”的
”systemctl unmask $unit”
符号链接)
遮掩”$unit”(增加到”/dev/null”的符号
”systemctl mask $unit”
链接)
获取默认的target设置 ”systemctl get-default”
设置默认target为”graphical”(图形系统) ”systemctl set-default graphical”
设置默认的target为”multi-user”(命令
”systemctl set-default multi-user”
行系统)
显示工作环境变量 ”systemctl show-environment”
设置环境变量”variable”的值为”value” ”systemctl set-environment variable=value”
取消环境变量”variable”的设置 ”systemctl unset-environment variable”
重新加载所有单元文件和后台守护进程
”systemctl daemon-reload”
（daemon）
关闭系统 ”systemctl poweroff”
关闭和重启系统 ”systemctl reboot”
挂起系统 ”systemctl suspend”
休眠系统 ”systemctl hibernate”
Table3.6: 典型的systemctl命令片段列表
Debian参考手册 82/233
3.6 其它系统监控
这里是systemd下其它零星的监控命令列表。请阅读包括cgroups(7)在内的相关的man手册页。
操作 命令片段
显示每一个初始化步骤所消耗的时间 ”systemd-analyze time”
列出所有单元的初始化时间 ”systemd-analyze blame”
加载”$unit”文件并检测错误 ”systemd-analyze verify $unit”
简洁的显示用户调用会话的运行时状态信息 ”loginctl user-status”
简洁的显示调用会话的运行时状态信息 ”loginctl session-status”
跟踪cgroups的启动过程 ”systemd-cgls”
跟踪cgroups的启动过程 ”ps xawf -eo pid,user,cgroup,args”
跟踪cgroups的启动过程 读取”/sys/fs/cgroup/”下的sysfs
Table3.7: systemd下其它零星监控命令列表
3.7 System configuration
3.7.1 主机名
内核维护系统主机名。在启动的时候，通过systemd-hostnamed.service启动的系统单位设置系统的主机名，此
主机名保存在”/etc/hostname”。这个文件应该只包含系统主机名，而不是全称域名。
不带参数运行hostname(1)命令可以打印出当前的主机名。
3.7.2 文件系统
硬盘和网络文件系统的挂载选项可以在”/etc/fstab”中设置，参见fstab(5)和第 9.6.7 节。
加密文件系统的配置设置在“/etc/crypttab”中。参见crypttab(5)
软RAID的配置mdadm(8)设置在”/etc/mdadm/mdadm.conf”. 参见mdadm.conf(5).
警告
每次启动的时候，在挂载了所有文件系统以后，”/tmp”,”/var/lock”,和”/var/run”中的临时文件会被清
空。
3.7.3 网络接口初始化
对于使用systemd的现代Debian桌面系统，网络接口通常由两个服务进行初始化：lo接口通常在“networking.service”
处理，而其它接口则由“NetworkManager.service”处理。
参见第 5 章来获取怎样来配置它们的信息。
3.7.4 Cloud system initialization
Thecloudsysteminstancemaybelaunchedasacloneof”DebianOfficialCloudImages”orsimilarimages. Forsuchsystem
instance, personalitiessuchashostname, filesystem, networking, locale, SSHkeys, usersandgroupsmaybeconfiguredusing
functionalities provided by cloud-init and netplan.io packages with multiple data sources such as files placed in the
Debian参考手册 83/233
originalsystemimageandexternaldataprovidedduringitslaunch. Thesepackagesenablethedeclarativesystemconfiguration
usingYAMLdata.
Seemoreat”CloudComputingwithDebiananditsdescendants”,”Cloud-initdocumentation”and第 5.4 节.
3.7.5 Customization example to tweak sshd service
使用默认安装，通过systemd启动的过程中，在network.target启动后，很多网络服务(参见第 6 章)作为后台
守护进程（daemon）启动。”sshd”也不列外。让我们修改为按需启动”sshd”作为一个定制化的例子。
首先，禁用系统安装的服务单元。
$ sudo systemctl stop sshd.service
$ sudo systemctl mask sshd.service
传统 Unix 服务的按需套接字激活（on-demand socket activation）系统由 inetd (或 xinetd) 超级服务来提供。在
systemd下,相同功能能够通过增加*.socket和*.service单元配置文件来启用。
sshd.socket用来定义一个监听的套接字
[Unit]
Description=SSH Socket for Per-Connection Servers
[Socket]
ListenStream=22
Accept=yes
[Install]
WantedBy=sockets.target
sshd@.service作为sshd.socket匹配的服务文件
[Unit]
Description=SSH Per-Connection Server
[Service]
ExecStart=-/usr/sbin/sshd -i
StandardInput=socket
然后重新加载。
$ sudo systemctl daemon-reload
3.8 udev 系统
从Linux内核2.6版开始，udev系统提供了自动硬件发现和初始化机制。(参见udev(7)).在内核发现每个设备的基础
上，udev系统使用从sysfs文件系统(参见第 1.2.12 节)的信息启动一个用户进程，使用modprobe(8)程序(参见第
3.8.1 节)加载支持它所要求的内核模块,创建相应的设备节点。
提示
如果由于某些理由，”/lib/modules/kernel-version/modules.dep” 没有被 depmod(8) 正常生成，模块可
能不会被udev系统按期望的方式加载。执行”depmod -a”来修复它。
”/etc/fstab”里面的挂载规则,设备节点不必需是静态的。你能够使用UUID来挂载设备，来代替”/dev/sda”之
类的设备名. 参见第 9.6.3 节.