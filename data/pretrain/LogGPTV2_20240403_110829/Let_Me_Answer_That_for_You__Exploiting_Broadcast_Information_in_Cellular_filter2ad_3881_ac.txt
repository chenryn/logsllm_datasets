work. Thus, in order to estimate the paging response
time, we operate our own test GSM BTS based on a
USRP and OpenBTS [20]. OpenBTS implements a sim-
pliﬁed GSM network stack running on commodity hard-
ware while using the USRP device as a transceiver. We
patched OpenBTS to obtain timing information for the
different steps during the paging procedure. Speciﬁcally,
we are interested in the time a phone needs to acquire
a radio channel and to send the paging response. This
includes two parts of the paging procedure, the time
between the initial paging request and the channel re-
quest, and the time between the initial paging request
and the reception of the paging response. We log both
of these timestamps for the relevant baseband vendors
in nanoseconds using clock gettime(2). Additionally, we
measure the same for an attack phone running our own
lightweight, OsmocomBB-based baseband implementa-
tion. To trigger paging activity, we consecutively send
250 short messages, one after each channel teardown, to
our test devices.
While we could have also used software like
OpenBSC [25] in combination with a nanoBTS [27], we
decided to utilize OpenBTS to be in full control over the
transmission and reception. The nanoBTS is controlled
over Ethernet, runs its own operating system, including
scheduling algorithms, and cannot be modiﬁed. Thus,
we used OpenBTS to minimize the deviation that may
occur due to the nature of this BTS device.
Timing Observations. Figure 4 summarizes the results
of our time measurements for each baseband vendor. It
shows the elapsed time between the ﬁrst paging request
message sent to the phone, the arrival of the channel
request message, and the occurrence of the paging re-
sponse.
Interestingly, the generation of the phone had
little inﬂuence on the response timing.
In our tests, a
Nokia 3310, which is almost 10 years older than the
tested Nokia N900, shows almost the same timing behav-
ior. We do not have a deﬁnitive answer to explain this ob-
servation. However, a plausible explanation can be found
in the age of GSM. GSM was developed in the 1980s and
most of the mobile telephony stacks for GSM are of this
channel request
paging response
s
d
n
o
c
e
s
i
l
l
i
m
n
i
e
m
T
i
1200
1000
800
600
400
200
0
N
O
S
s
m
o
kia 3
o
c
o
o
n
y 
3
1
0
m
B
iP
h
o
n
E
ric
e 4
s
s
s
B
 la
o
n 
S
S
S
cip
o
a
n
y 
X
m
s
u
h
o
Bla
O
N
s
m
o
c
k
b
e
kia 
N
o
c
o
n
e 
p
e
D
r
e
a
ria 
U
n
g 
G
w
8
y
e
r
2
3
0
0i
m
G
2
rry 9
m
B
9
0
0
ala
3
x
y 
0
0 
C
B
 L
S
2
1 atta
u
rv
e
c
k
Tested mobile phone
Figure 4: Time difference between initial paging request
and subsequent channel request or paging response for
different baseband vendors. Conﬁdence interval: 95%.
40  22nd USENIX Security Symposium 
USENIX Association
era. As most baseband vendors nowadays concentrate
their efforts on exploring the technical challenges of 3G
and 4G telephony standards, we believe that GSM stacks
have not been modiﬁed for a long time. We do not ex-
pect signiﬁcant modiﬁcations of baseband stacks by the
respective vendors nowadays. Thus, we assume that tim-
ing behavior across different phone platforms using the
same baseband will show similar patterns.
The most important observation from Figure 4 is that
on average, with a conﬁdence interval of 95%, our min-
imal OsmocomBB-based implementation is the fastest
in transmitting the channel request and paging response.
For our implementation, there is roughly a 180 millisec-
onds delay between the paging request and the arrival of
the paging response. Thus, on average our attack imple-
mentation is able to transmit the ﬁnal paging response
prior to all other major basebands and can be conducted
within the duration of a single multiframe (235.4 ms).
This includes the OsmocomBB layer23 mobile applica-
tion, which is signiﬁcantly slower than our self-contained
layer1 attack software and shows similar timing perfor-
mance as conventional phones.
Therefore, with a very high likelihood, our software is
able to win the race. It is also noteworthy that our light-
weight stack can transmit the paging response almost im-
mediately after the channel request (and reception of the
Immediate Assignment). The test devices show a gap of
at least 200ms before the transmission of the paging re-
sponse. We expect that this is related to internal schedul-
ing algorithms and queuing mechanisms between differ-
ent layers of the baseband implementation.
4 Attacking Location Areas
Besides attacking individual subscribers, we show that it
is also possible to leverage this attack to disrupt network
service in large geographical regions. As explained in
Section 2, the serving network does not always have the
knowledge of the exact location a subscriber resides in.
As a consequence, it also does not know which BTS is
currently within a good reception of the mobile device.
The phone announces a change of the location area by
performing the Location Update [4] procedure. By mon-
itoring System Information [4] messages on the Broad-
cast Control Channel (BCCH), a phone can keep track
of location areas served by the BTSs within reception.
The aforementioned lack of knowledge is compensated
by the network by distributing paging requests through-
out all base stations in the location area. This implies that
an adversary is able to observe and respond to paging re-
quests not only transmitted by a single a BTS, but within
a larger geographical region formed by the location area.
We already showed in Section 3.5 that we win the race
for the paging response with high probability. Given that
an attacker is able to answer all paging requests that can
be observed on the PCH, it is possible to perform a denial
of service attack against all MT services within the loca-
tion area. Depending on its size, the impact of this would
be massive, e.g., breaking MT calls in areas as large as
city districts or even bigger regions. However, in practice
there are a few obstacles to consider.
Depending on the paging activity, it is unlikely that
service in an entire geographical can be disrupted by a
single attacker phone.
In order to send the paging re-
sponse, the MS has to tune to a dedicated channel. As
a result, it would not be able to observe paging requests
while being in dedicated mode. After sending the re-
sponse, the attacker MS has to resynchronize with the
BTS to observe CCCH/PCH trafﬁc again. By logging
timestamps for the various protocol steps, we measured
the time for this procedure on the OsmocomBB side. On
average we need 745 milliseconds to resynchronize in
order to receive further paging requests after we sent the
response. Furthermore, as shown in Figure 4, we need
on average 180 milliseconds to transmit the paging re-
sponse. This means that in ideal conditions, with a single
phone, we are able to handle up to
60 s
745 ms + 180 ms
= 64.8 paging requests per minute.
Depending on the network activity, this may or may not
be enough to answer all paging requests. Additionally,
we need to examine the different paging activities that
can be seen in real operator networks. If the paging ac-
tivity is very large, then the attacker may need to use
multiple phones to perform the attack.
Finally, to get an understanding of the impact of such
an attack, we need to determine the size of the geograph-
ical region covered by a location area.
4.1 Location Area Paging Activity
An attack against an entire location area, e.g.,
in a
metropolitan area, requires an adversary to respond to
all paging requests in that area. Consequently, the ef-
ﬁciency of a large-scale attack depends on the operator
speciﬁc paging activities and the allocated resources on
the attacker side.
For the purpose of estimating paging activity, we mod-
iﬁed our OsmocomBB stack to log all TMSIs in com-
bination with a time stamp of its appearance. Because
the paging requests are broadcasted throughout a loca-
tion area, camping on one operator BTS for that area is
sufﬁcient to observe all paging activity for that area on
the CCCH/PCH. We recorded the TMSIs in paging re-
quests for all major German operators in a metropolitan
area over a time period of 24 hours. The logs were cre-
ated at exactly the same location, at the same date and
USENIX Association  
22nd USENIX Security Symposium  41
(a) Unﬁltered measurement
(b) Filtered paging requests caused by T3113 timer
Figure 5: Number of TMSIs per minute contained in paging requests of four major German operators over 24 hours.
time. We observed that in some cases the network is not
paging with the TMSI but with the IMSI. E.g., if the sub-
scriber is marked as attached to the network but cannot
be reached using the TMSI, the MSC starts paging using
the IMSI. In this case, depending on the operator network
conﬁguration, paging may also be performed outside of
the location area. However, this type of paging request
is the minority and thus ignored in our measurements.
Furthermore, assuming that a subscriber is present in the
monitored location area, the network very likely already
paged using the TMSI in this area. Obviously, it is sim-
ple to implement the attack in the case that network pages
using IMSIs instead of TMSIs. In fact our code can also
handle IMSIs.
Figure 5a summarizes the paging observations. The
ﬁrst observation to be made is that paging activity heav-
ily varies throughout the time of the day. The observed
pattern is not random, but rather reﬂects human activity
during typical days. It is also interesting to note that the
amount of paging requests heavily differs among the var-
ious tested operators. While for example E-Plus at peak
times has a rate of roughly 415 TMSIs contained in pag-
ing requests per minute, Vodafone has almost 1200 in the
same time period.
Such differences can be caused for example by the
number of active subscribers in the network, or the size
of the respective location area. During this measurement,
we noticed several reoccurring TMSI patterns. Vodafone
is actually always paging each TMSI at least two times.
A second paging request is always issued two seconds
after the initial paging request. This explains the mas-
sive amount of paging requests and we suspect this to be
an attempt to improve the overall subscriber availability.
Also, our logged data shows that some of these TMSIs
are paged at regular intervals. We believe that these re-
quests may partially be directed at M2M devices, e.g.,
for remote monitoring.
Figure 5b shows a ﬁltered version of Figure 5a.
Speciﬁcally, we ﬁltered appearances of TMSIs contained
in paging requests that we do not need to respond to.
3GPP TS 04.08 [4] speciﬁes a timer, T3113, that is set
on transmission of a paging request.
If no paging re-
sponse was received prior to the expiry of this timer, the
network reissues the paging request by paging the mo-
bile subscriber again. However, assuming that we are
able to observe and respond to all paging requests, this
retransmission would not occur during an attack. There-
fore, these can be ﬁltered from the result. By analyz-
ing the logged TMSIs and the respective timestamps, we
recorded the reappearance of each TMSI that was orig-
inally transmitted as part of a paging request. The vast
majority of reappearances in time reach a common max-
imum which we assume is the timer value. A prevalent
value seems to be ﬁve seconds. It is also reasonable that
this is caused by a triggered timer. A normal call setup
takes longer than ﬁve seconds [30] and short messages
are queued at the SMS service center and likely transmit-
ted over the same channel following one paging request.
As a result, the overall activity of relevance in practice
is lower than the general amount of TMSIs contained in
observed paging requests. The Vodafone measurements
can be reduced by almost 22% during peak times and
33% during low activity times. However, due to the lim-
ited memory resources of the attacking phones, we can-
not take this into account during an active attack.
4.2 A Randomized Attack Strategy using
TMSIs
The measured data in Section 4.1 suggests that even in
location areas with low paging activity an attacker needs
more than a single phone to respond to all paging re-
quests. Thus, paging requests need to be distributed
across multiple attacking phones. While serial commu-
42  22nd USENIX Security Symposium 
USENIX Association
s
I
S
M
T
d