[OWASP: Path Traversal](https://www.owasp.org/index.php/Path_Traversal)  
[CAPEC-126: Path Traversal](http://capec.mitre.org/data/definitions/126.html)  
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
Traversal') ](http://cwe.mitre.org/data/definitions/22.html)
# 潜在的路径穿越（文件写）
漏洞特征：PATH_TRAVERSAL_OUT  
一个文件被打开，然后读取文件内容，这个文件名来自于一个输入的参数。如果没有过滤这个传入的参数，那么本地文件系统中任意文件都会被修改。  
这个规则识别潜在的路径穿越漏洞。在许多场景中，用户无法控制文件路径，如果有工具报告了这个问题，那么这个就是误报  
引用：  
[WASC: Path
Traversal](http://projects.webappsec.org/w/page/13246952/Path%20Traversal)  
[OWASP: Path Traversal](https://www.owasp.org/index.php/Path_Traversal)  
[CAPEC-126: Path Traversal](http://capec.mitre.org/data/definitions/126.html)  
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
Traversal') ](http://cwe.mitre.org/data/definitions/22.html)
# 潜在的路径穿越（文件读取）
漏洞特征：SCALA_PATH_TRAVERSAL_IN  
一个文件被打开，然后读取文件内容，这个文件名来自于一个输入的参数。如果没有过滤这个传入的参数，那么本地文件系统中任意文件都会被读取。  
这个规则识别潜在的路径穿越漏洞。在许多场景中，用户无法控制文件路径，如果有工具报告了这个问题，那么这个就是误报  
有漏洞代码：
    def getWordList(value:String) = Action {
      if (!Files.exists(Paths.get("public/lists/" + value))) {
        NotFound("File not found")
      } else {
        val result = Source.fromFile("public/lists/" + value).getLines().mkString // Weak point
        Ok(result)
      }
    }
解决方案：
    import org.apache.commons.io.FilenameUtils;
    def getWordList(value:String) = Action {
      val filename = "public/lists/" + FilenameUtils.getName(value)
      if (!Files.exists(Paths.get(filename))) {
        NotFound("File not found")
      } else {
        val result = Source.fromFile(filename).getLines().mkString // Fix
        Ok(result)
      }
    }
引用：  
[WASC: Path
Traversal](http://projects.webappsec.org/w/page/13246952/Path%20Traversal)  
[OWASP: Path Traversal](https://www.owasp.org/index.php/Path_Traversal)  
[CAPEC-126: Path Traversal](http://capec.mitre.org/data/definitions/126.html)  
[CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
Traversal') ](http://cwe.mitre.org/data/definitions/22.html)
# 潜在的命令注入
漏洞特征：COMMAND_INJECTION  
高亮部分的api被用来执行系统命令，如果输入这个api的数据没有被过滤，那么就会导致任意命令执行  
有漏洞的代码：
    import java.lang.Runtime;
    Runtime r = Runtime.getRuntime();
    r.exec("/bin/sh -c some_tool" + input);
引用：  
[OWASP: Command Injection](https://www.owasp.org/index.php/Command_Injection)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[CWE-78: Improper Neutralization of Special Elements used in an OS Command
('OS Command Injection')](http://cwe.mitre.org/data/definitions/78.html)
# 潜在的命令注入(Scala)
漏洞特征：COMMAND_INJECTION  
高亮部分的api被用来执行系统命令，如果输入这个api的数据没有被过滤，那么就会导致任意命令执行  
有漏洞的代码：
    def executeCommand(value:String) = Action {
        val result = value.!
        Ok("Result:\n"+result)
    }
引用：  
[OWASP: Command Injection](https://www.owasp.org/index.php/Command_Injection)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[CWE-78: Improper Neutralization of Special Elements used in an OS Command
('OS Command Injection')](http://cwe.mitre.org/data/definitions/78.html)
# 文件类函数没有过滤空字符
漏洞特征：WEAK_FILENAMEUTILS  
一些文件类中方法没有过滤空字节（0x00）  
如果空字节被注入到文件名之中，如果这个文件被放进系统之中，那么系统则只会读取空字符之前的文件名，字符串就会被空字符截断，甚至java本身也不能关注空字符或者处理这些特殊情况。操作系统的这一特性通常被用来绕过文件名验证去访问其他的文件（例如，后缀是.log"的文件）。
给出两点建议去修复这个问题：
  * 升级到7 update 40 或者最近的版本，或者java 8 +，因为空字节注入这个问题已经被这些版本的java所[解决](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8014846)
  * 要严格验证用户输入的文件名是否是有效的（例如不能包含空字符，不能包含路径字符） 
如果你知道你使用的现有的java版本可以避免空字符注入问题，你可以忽略上面的问题。
引用：  
[WASC-28: Null Byte
Injection](http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection)  
[CWE-158: Improper Neutralization of Null Byte or NUL
Character](http://cwe.mitre.org/data/definitions/158.html)
# 证书管理器接受任何证书
漏洞特征： WEAK_TRUST_MANAGER  
空的证书管理器通常可以更轻松的连接到没有[根证书](http://en.wikipedia.org/wiki/Certificate_authority)的主机上。结果就是，就会更容易受到中间人攻击，因为客户端信任所有的证书。  
一个证书管理器应该允许信任指定的一种证书（例如：基于信任库）。下面是一种可行的实现方法：  
有漏洞的代码：
    class TrustAllManager implements X509TrustManager {
        @Override
        public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
            //Trust any client connecting (no certificate validation)
        }
        @Override
        public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
            //Trust any remote server (no certificate validation)
        }
        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return null;
        }
    }
解决方案(基于证书库的证书管理器）：
    KeyStore ks = //Load keystore containing the certificates trusted
    SSLContext sc = SSLContext.getInstance("TLS");
    TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
    tmf.init(ks);
    sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
引用：  
[WASC-04: Insufficient Transport Layer
Protection](http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection)  
[CWE-295: Improper Certificate
Validation](http://cwe.mitre.org/data/definitions/295.html)
# HostnameVerifier 接收任何签名证书
漏洞规则：WEAK_HOSTNAME_VERIFIER  
因为证书会被很多主机重复使用，接收任意证书的HostnameVerifier经常被使用。结果就是，就会更容易受到中间人攻击，因为客户端信任所有的证书。  
一个证书管理器应该允许信任指定的一种证书（例如：基于信任库）。应该创建通配符证书，可以允许多个子域下证书。下面是一种可行的实现方法：  
有漏洞的代码：
    public class AllHosts implements HostnameVerifier {
        public boolean verify(final String hostname, final SSLSession session) {
            return true;
        }
    }
解决方案(基于证书库的证书管理器）：
    KeyStore ks = //Load keystore containing the certificates trusted
    SSLContext sc = SSLContext.getInstance("TLS");
    TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
    tmf.init(ks);
    sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
引用：  
[WASC-04: Insufficient Transport Layer
Protection](http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection)  
[CWE-295: Improper Certificate
Validation](http://cwe.mitre.org/data/definitions/295.html)
# 发现JAX-RS REST服务器端
漏洞规则： JAXRS_ENDPOINT  
这些函数是REST Web Service 的一部分(JSR311).  
这个网站的安全性应该被分析。例如：
  * 权限认证，如果强制实施，就应该被测试 
  * 访问控制，如果强制实施，就应该被测试 
  * 输入应该被追踪，因为可能会有潜在的漏洞 
  * 聊天程序应该使用SSL 
  * 如果服务器支持存储私人数据（例如，通过POST），应该调查它是否对csrf有防御 
引用：  
[OWASP: REST Assessment Cheat
Sheet](https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet)  
[OWASP: REST Security Cheat
Sheet](https://www.owasp.org/index.php/REST_Security_Cheat_Sheet)  
[OWASP: Web Service Security Cheat
Sheet](https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet)  
[OWASP: Cross-Site Request Forgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_\(CSRF))  
[OWASP: CSRF Prevention Cheat Sheet](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet)  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# 发现Tapestry页面
漏洞规则： TAPESTRY_ENDPOINT  
在应用启动的时候，Tapestry会被发现。Tapestry应用的每一个页面又后端java类和相关的Tapestry标记语言构成（a.tml
文件）。当请求到达的时候，GET/POST参数会被映射到后端的java类之中。映射可以使用fieldName完成：
    [...]
        protected String input;
    [...]
或者显示注释的定义：
    [...]
        @org.apache.tapestry5.annotations.Parameter
        protected String parameter1;
        @org.apache.tapestry5.annotations.Component(id = "password")
        private PasswordField passwordField;
    [...]
这个页面被映射到视图中[/resources/package/PageName].tml.
在应用中的每一个Tapestry页面应该被调查，确保所有的输入都能被自动的映射，并在这些参数被使用之前都是有效的。  
引用：  
[Apache Tapestry Home Page](http://tapestry.apache.org/)  
[CWE-20: Improper Input
Validation](http://cwe.mitre.org/data/definitions/20.html)
# 发现Wicket的web页面
漏洞特征：WICKET_ENDPOINT  
这个类代表一个Wicket
web页面。输入的数据会被来自实例中的PageParameters读取，然后把它们送入后端处理程序。当前页面会被映射到视图之中[/package/WebPageName].html.  
在应用中的每一个Wicket页面应该被调查，确保所有的输入都能被自动的映射，并在这些参数被使用之前都是有效的。  