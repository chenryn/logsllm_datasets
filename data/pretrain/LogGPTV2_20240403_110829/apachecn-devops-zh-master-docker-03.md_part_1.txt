# 三、存储和分发映像
在本章中，我们将介绍几个服务，例如允许您存储映像的 Docker Hub，以及可以用来运行 Docker 容器的本地存储的 Docker Registry。我们将回顾这些服务之间的差异，以及何时和如何使用它们。
本章还将介绍如何使用 Webhooks 设置自动化构建，以及设置它们所需的所有部分。让我们快速浏览一下本章将涉及的主题:
*   Docker 集线器
*   Docker 商店
*   Docker 注册表
*   第三方注册中心
*   微博客
# 技术要求
在本章中，我们将使用我们的 Docker 安装来构建映像。和以前一样，虽然本章中的截图将来自我的首选操作系统 macOS，但我们将运行的命令将适用于前一章中介绍的所有三个操作系统。本章所用代码的完整副本可在以下网址找到:[https://github . com/PacktPublishing/Mastering-Docker-第三版/tree/master/chapter03](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03) 。
查看以下视频，了解《行为准则》:
[http://bit.ly/2EBVJjJ](http://bit.ly/2EBVJjJ)
# Docker 集线器
虽然我们在前两章中已经介绍了 Docker Hub，但是除了使用`docker image pull`命令下载远程映像之外，我们并没有与它进行过多的交互。
在本节中，我们将重点介绍 Docker Hub，它既有一个免费的选项，您只能托管公共可访问的映像，也有一个订阅选项，允许您托管自己的私有映像。我们将重点关注 Docker Hub 的网络方面以及您可以在那里进行的管理。
主页可以在[https://hub.docker.com/](https://hub.docker.com/)找到，包含一个注册表单和右上角的登录选项。很有可能，如果你一直在涉猎 Docker，那么你已经有了一个 Docker ID。如果没有，请使用主页上的注册表单创建一个。如果您已经有了 Docker 的身份证，那么只需点击登录。
Docker Hub is free to use, and if you do not need to upload or manage your own images, you do not need an account to search for pull images.
# 仪表盘
登录 Docker Hub 后，您将进入以下登录页面。该页面被称为 Docker Hub 的**仪表盘**:
![](img/38b9210c-61b3-4d7c-a2b0-87a738efdfd8.png)
从这里，您可以访问 Docker Hub 的所有其他子页面。然而，在我们看这些部分之前，我们应该先谈谈仪表板。从这里，您可以查看您的所有映像，包括公共映像和私人映像。它们首先按星星的数量排序，然后按拉动的数量排序；这个顺序不能改变。
在接下来的部分中，我们将从页面顶部的深蓝色菜单开始，浏览您在仪表板上看到的所有内容。
# 探索
**探索**选项将带您进入官方 Docker 映像列表；就像你的**仪表盘**一样，它们是星星点点点然后拉的。从下面的屏幕中可以看到，每张官方图片都有超过 1000 万次的点击量:
![](img/7afcf1af-ec1e-4b5a-8e65-1b2f7282d0a3.png)
这不是下载官方图片的首选 Docker Store 方法。Docker 更希望您现在使用 Docker Store，但是由于我们将在本章后面更详细地了解这一点，因此我们在此不再赘述。
# 组织
**组织**是您已经创建或添加的组织。组织允许你对一个多人合作的项目进行分层控制。组织有自己的设置，例如默认情况下是将存储库存储为公共存储库还是私有存储库，或者更改计划以允许不同数量的私有存储库，并将存储库与您或其他人拥有的存储库完全分开。
![](img/d413a10e-eab5-4e2b-96c5-ec0f63b8a236.png)
您还可以从 Docker 徽标正下方的**仪表板**访问或切换帐户或组织，登录时通常会看到您的用户名:
![](img/22313429-bbf7-4f75-9b8d-5506b6e5f7b2.png)
# 创造
我们将在后面的章节中详细介绍如何创建存储库和自动化构建，因此我不会在这里详细介绍，只是说 **Create** 菜单为您提供了三个选项:
*   **创建存储库**
*   **创建自动化构建**
*   **创建组织**
这些选项可以在下面的截图中看到:
![](img/dcdcaa8c-ff8c-4ee3-a44f-02dde79a1dc1.png)
# 配置文件和设置
顶部菜单中的最后一个选项是关于管理**我的个人资料**和**设置**:
![](img/94f37f95-80e0-46e1-b62d-e5bf664e66b0.png)
“设置”页面允许您设置公共配置文件，包括以下选项:
*   更改您的密码
*   看你属于哪个组织
*   查看您订阅了哪些电子邮件更新
*   设置您希望接收的特定通知
*   设置哪些授权服务可以访问您的信息
*   查看链接账户(如您的 GitHub 或 Bitbucket 账户)
*   查看您的企业许可证、账单和全局设置
目前唯一的全局设置是在创建时将您的存储库默认为**公共**或**私有**之间进行选择。默认情况下，将它们创建为**公共**存储库:
![](img/f9ed7275-c2eb-4c3c-9df5-286deb542a46.png)
“我的个人资料”菜单项会将您带到您的公共个人资料页面；我的可以在[https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/)找到。
# 其他菜单选项
在**仪表板**页面顶部的深蓝色条下面，还有两个我们尚未涉及的区域。第一个页面是**之星**页面，让你可以看到你自己主演了哪些资料库:
![](img/b777bca4-59f4-4316-b611-3131dbb57188.png)
如果您遇到一些您更喜欢使用的存储库，并且想要访问它们以查看它们最近是否被更新，或者这些存储库是否发生了任何其他变化，这将非常有用。
第二个是新的设定，**贡献了**。点击此处将会显示一个部分，其中将会有一个你在你自己的**资料库**列表之外所做贡献的资料库列表。
# 创建自动化构建
在本节中，我们将研究自动化构建。自动构建是那些您可以链接到您的 GitHub 或 Bitbucket 帐户的构建，当您更新代码库中的代码时，您可以在 Docker Hub 上自动构建映像。我们将查看这样做所需的所有部分，到最后，您将能够自动化您的所有构建。
# 设置您的代码
创建自动化构建的第一步是设置您的 GitHub 或 Bitbucket 存储库。这是选择代码存储位置时的两个选项。对于我们的例子，我将使用 GitHub，但是 GitHub 和 Bitbucket 的设置是相同的。
事实上，我将使用这本书附带的存储库。由于存储库是公开可用的，您可以使用自己的 GitHub 帐户分叉它并跟随，正如我在下面的截图中所做的:
![](img/efc78b12-ed7f-4204-83d4-348842b88d6b.png)
在[第 2 章](02.html)、*构建容器映像*中，我们处理了几个不同的 Docker 文件。我们将把这些用于我们的自动化构建。如果你还记得，我们安装了 nginx，并添加了一个简单的页面，上面有消息**你好，世界！这是由 Docker** 提供的，我们也有一个多阶段构建。
# 设置 Docker 中心
在 Docker Hub 中，我们将使用创建下拉菜单并选择创建自动构建。选择后，我们将进入一个屏幕，向您显示您链接到 GitHub 或 Bitbucket 的帐户:
![](img/0f0c0290-2ffa-4764-9c03-e24569febe0a.png)
从前面的截图中可以看到，我已经将我的 GitHub 帐户链接到了 Docker Hub 帐户。链接这两个工具的过程很简单，我所要做的就是按照屏幕上的说明，允许 Docker Hub 权限访问我的 GitHub 帐户。
将 Docker Hub 连接到 GitHub 时，有两个选项:
*   **公有和私有**:这是推荐选项。Docker Hub 将可以访问您的所有公共和私有存储库以及组织。Docker Hub 还能够在设置自动化构建时配置所需的网络钩子。
*   **受限访问**:这限制了 Docker Hubs 对公开可用的存储库和组织的访问。如果您使用此选项链接您的帐户，Docker Hub 将无法配置自动构建所需的 Webhooks。然后，您需要从您想要创建自动化构建的任何位置搜索并选择存储库。这将基本上创建一个 Webhook，它指示当在选定的代码存储库上完成提交时，将在 Docker Hub 上创建一个新的构建。
![](img/e86e4a7e-b777-454d-95e1-94f907c2bb98.png)
在前面的截图中，我选择了`Mastering-Docker-Third-Edition`并访问了自动构建的设置页面。从这里，我们可以选择映像附加到哪个 Docker Hub 配置文件，命名映像，将其从公共映像更改为私有映像，描述构建，并通过单击**进行自定义单击此处自定义**。我们可以让 Docker Hub 知道我们的 Docker 文件的位置，如下所示:
![](img/8b016edc-4f1a-43c1-8d1b-1823af07864f.png)
如果你跟着我，我输入了以下信息:
*   **存储库名称空间&名称:** `dockerfile-example`
*   **能见度:**公共
*   **简短描述:** `Testing an automated build`
*   **推送类型:**分支
*   **名称:**T0】
*   **Docker 配置位置:**t0]
*   **Docker 标签:**最新
点击**创建**，将进入类似下一张截图的画面:
![](img/153124b2-b207-46d8-881c-ae926facd384.png)
现在我们已经定义了我们的构建，我们可以通过点击**构建设置**来添加一些额外的配置。当我们使用官方的 Alpine Linux 映像时，我们可以将它链接到我们自己的构建。为此，在**存储库链接**部分输入阿尔卑斯，然后点击**添加存储库链接**。每当新版本的官方 Alpine Linux 映像发布时，这将启动一个无人值守的构建。
![](img/6922478b-7d32-4c26-bd3c-c78d86a13edf.png)
因此，现在每当我们更新 GitHub 存储库，或者发布新的官方映像时，我们的映像都会自动重建并发布。由于这两种情况都不可能立即发生，所以单击触发器按钮来手动启动构建。您会注意到该按钮会短暂变绿，这表明已经在后台安排了构建。
一旦触发了你的构建，点击**构建细节**会弹出一个映像的所有构建列表，包括成功的和失败的。您应该会看到一个构建正在进行；单击它将显示构建的日志:
![](img/17e9aace-1120-480c-9299-2a24a451349b.png)
构建完成后，您应该能够通过运行以下命令移动到本地 Docker 安装，如果您一直在跟踪，请确保提取您自己的映像:
```
$ docker image pull masteringdockerthirdedition/dockerfiles-example
$ docker image ls
```
这些命令显示在下面的屏幕截图中:
![](img/feae53be-7cf1-4484-aa8c-71d533a10bd0.png)