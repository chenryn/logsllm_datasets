fingerprints and eye retina—but it's your visa that decides what you can do. To enter into 
the country, you need to have a valid visa that has not expired. A valid visa is not a part of 
your identity, but a part of what you can do. What you can do inside the country depends 
on the visa type. What you do with a B1 or B2 visa differs from what you can do with an 
L1 or L2 visa. That is authorization.
OAuth 2.0 is about authorization—not about authentication. With OAuth 2.0, the 
client does not know about the end user (only exception is resource owner password 
credentials grant type, which we discussed in Chapter 4). It simply gets an access token 
to access a resource on behalf of the user. With OpenID Connect, the client will get an ID 
token along with the access token. ID token is a representation of the end user’s identity. 
What does it mean by securing an API with OpenID Connect? Or is it totally meaningless? 
OpenID Connect is at the application level or at the client level—not at the API level or 
at the resource server level. OpenID Connect helps client or the application to find out 
who the end user is, but for the API that is meaningless. The only thing API expects is the 
CHAPTEr 6  OPEnID COnnECT (OIDC)
134
access token. If the resource owner or the API wants to find who the end user is, it has to 
query the authorization server or rely on a self-contained access token (which is a JWT).
 Anatomy of the ID Token
The ID token is the primary add-on to OAuth 2.0 to support OpenID Connect. It’s a JSON 
Web Token (JWT) that transports authenticated user information from the authorization 
server to the client application. Chapter 7 delves deeper into JWT. The structure of the ID 
token is defined by the OpenID Connect specification. The following shows a sample ID 
token: 
 {
   "iss":"https://auth.server.com",
   "sub":"PI:EMAIL",
   "aud":"67jjuyuy7JHk12",
   "nonce":"88797jgjg32332",
   "exp":1416283970,
   "iat":1416281970,
   "auth_time":1311280969,
   "acr":"urn:mace:incommon:iap:silver",
   "amr":"password",
   "azp":"67jjuyuy7JHk12"
  }
Let’s examine the definition of each attribute: 
• 
iss: The token issuer’s (authorization server or identity provider) 
identifier in the format of an HTTPS URL with no query parameters 
or URL fragments. In practice, most of the OpenID Provider 
implementations or products let you configure an issuer you want—
and also this is mostly being used as an identifier, rather than a URL. 
This is a required attribute in the ID token.
• 
sub: The token issuer or the asserting party issues the ID token 
for a particular entity, and the claims set embedded into the ID 
token normally represents this entity, which is identified by the sub 
parameter. The value of the sub parameter is a case-sensitive string 
value and is a required attribute in the ID token.
CHAPTEr 6  OPEnID COnnECT (OIDC)
135
• 
aud: The audience of the token. This can be an array of identifiers, but 
it must have the OAuth client ID in it; otherwise, the client ID should 
be added to the azp parameter, which we discuss later in this section. 
Prior to any validation check, the OpenID client must first see 
whether the particular ID token is issued for its use and if not should 
reject immediately. In other words, you need to check whether the 
value of the aud attribute matches with the OpenID client’s identifier. 
The value of the aud parameter can be a case-sensitive string value or 
an array of strings. This is a required attribute in the ID token.
• 
nonce: A new parameter introduced by the OpenID Connect 
specification to the initial authorization grant request. In addition 
to the parameters defined in OAuth 2.0, the client application 
can optionally include the nonce parameter. This parameter was 
introduced to mitigate replay attacks. The authorization server must 
reject any request if it finds two requests with the same nonce value. 
If a nonce is present in the authorization grant request, then the 
authorization server must include the same value in the ID token. 
The client application must validate the value of the nonce once it 
receives the ID token from the authorization server.
• 
exp: Each ID token carries an expiration time. The recipient of the ID 
token must reject it, if that token has expired. The issuer can decide 
the value of the expiration time. The value of the exp parameter is 
calculated by adding the expiration time (from the token issued time) 
in seconds to the time elapsed from 1970-01-01T00:00:00Z UTC to 
the current time. If the token issuer’s clock is out of sync with the 
recipient’s clock (irrespective of their time zone), then the expiration 
time validation could fail. To fix that, each recipient can add a couple 
of minutes as the clock skew during the validation process. This is a 
required attribute in the ID token.
• 
iat: The iat parameter in the ID token indicates the issued 
time of the ID token as calculated by the token issuer. The value 
of the iat parameter is the number of seconds elapsed from 
1970-01-01T00:00:00Z UTC to the current time, when the token is 
issued. This is a required attribute in the ID token.
CHAPTEr 6  OPEnID COnnECT (OIDC)
136
• 
auth_time: The time at which the end user authenticates with 
the authorization server. If the user is already authenticated, then 
the authorization server won’t ask the user to authenticate back. 
How a given authorization server authenticates the user, and 
how it manages the authenticated session, is outside the scope of 
OpenID Connect. A user can create an authenticated session with 
the authorization server in the first login attempt from a different 
application, other than the OpenID client application. In such cases, 
the authorization server must maintain the authenticated time and 
include it in the parameter auth_time. This is an optional parameter.
• 
acr: Stands for authentication context class reference. The value of this 
parameter must be understood by both the authorization server and the 
client application. It gives an indication of the level of authentication. 
For example, if the user authenticates with a long- lived browser cookie, 
it is considered as level 0. OpenID Connect specification does not 
recommend using an authentication level of 0 to access any resource of 
any monetary value. This is an optional parameter.
• 
amr: Stands for authentication method references. It indicates how the 
authorization server authenticates the user. It may consist of an array 
of values. Both the authorization server and the client application 
must understand the value of this parameter. For example, if the user 
authenticates at the authorization server with username/password 
and with one-time passcode over SMS, the value of amr parameter 
must indicate that. This is an optional parameter.
• 
azp: Stands for authorized party. It’s needed when there is one audience 
(aud) and its value is different from the OAuth client ID. The value of 
azp must be set to the OAuth client ID. This is an optional parameter.
Note The authorization server must sign the ID token, as defined in JSOn 
Web Signature (JWS) specification. Optionally, it can also be encrypted. Token 
encryption should follow the rules defined in the JSOn Web Encryption (JWE) 
specification. If the ID token is encrypted, it must be signed first and then 
encrypted. This is because signing the encrypted text is questionable in many legal 
entities. Chapters 7 and 8 talk about JWT, JWS, and JWE.
CHAPTEr 6  OPEnID COnnECT (OIDC)
137
OPENID CONNECT WITH WSO2 IDENTITY SERVER
In this exercise, you see how to obtain an OpenID Connect ID token along with an OAuth 2.0 
access token. Here we run the WSO2 Identity Server as the OAuth 2.0 authorization server.
Note WSO2 Identity Server is a free, open source identity and entitlement 
management server, released under the Apache 2.0 license. At the time of this 
writing, the latest released version is 5.9.0 and runs on Java 8.
Follow these steps to register your application as a service provider in WSO2 Identity Server 
and then log in to your application via OpenID Connect:
 1. Download WSO2 Identity Server 5.9.0 from http://wso2.com/products/
identity-server/, set up the JAVA_HOME environment variable, and start the 
server from the wso2server.sh/wso2server.bat file in the WSO2_IS_HOME/
bin directory. If the WSO2 Identity Server 5.9.0 isn’t available from the main 
download page, you can find it at http://wso2.com/more-downloads/
identity-server/.
 2. By default, the WSO2 Identity Server starts on HTTPS port 9443.
 3. Log in to the Identity Server running at https://localhost:9443 with its 
default username and password (admin/admin).
 4. To get an OAuth 2.0 client ID and a client secret for a client application, you 
need to register it as a service provider on the OAuth 2.0 authorization server. 
Choose Main ➤ Service Providers ➤ Add. Enter a name, say, oidc-app, and 
click register.
 5. Choose Inbound Authentication Configuration ➤ OAuth and OpenID Connect 
Configuration ➤ Configure.
 6. Uncheck all the grant types except Code. Make sure the OAuth version is  
set to 2.0.
 7. Provide a value for the Callback Url text box—say, https://localhost/
callback—and click Add.
 8. Copy the values of OAuth Client Key and the OAuth Client Secret.
CHAPTEr 6  OPEnID COnnECT (OIDC)
138
 9. You use cUrL here instead of a full-blown web application. First you need to 
get an authorization code. Copy the following UrL, and paste it into a browser. 
replace the values of client_id and redirect_uri appropriately. note that 
here we are passing the openid as the value of the scope parameter in the 
request. This is a must to use OpenID Connect. You’re directed to a login page 
where you can authenticate with admin/admin and then approve the request 
by the client:
https://localhost:9443/oauth2/authorize?
        response_type=code&scope=openid&
        client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya&
        redirect_uri=https://localhost/callback
 10. Once approved, you’re redirected back to the redirect_uri with the 
authorization code, as shown here. Copy the value of the authorization code:
https://localhost/callback?code=577fc84a51c2aceac2a9e2f723f0f47f
 11. now you can exchange the authorization code from the previous step 
for an ID token and an access token. replace the value of client_id, 
client_secret, code, and redirect_uri appropriately. The value of –u is 
constructed as client_id:client_secret:
curl -v -X POST --basic
     -u NJ0LXcfdOW2...:EsSP5GfYliU96MQ6...
      -H "Content-Type: application/x-www-form-urlencoded; 
charset=UTF-8" -k
     -d "client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya&
         grant_type=authorization_code&
         code=577fc84a51c2aceac2a9e2f723f0f47f&
         redirect_uri=https://localhost/callback"
         https://localhost:9443/oauth2/token
This results in the following JSOn response:
{
    "scope":"openid",
    "token_type":"bearer",
    "expires_in":3299,
    "refresh_token":"1caf88a1351d2d74093f6b84b8751bb",
CHAPTEr 6  OPEnID COnnECT (OIDC)
139
    "id_token":"eyJhbGciOiJub25......",
    "access_token":"6cc611211a941cc95c0c5caf1385295"
}
 12. The value of id_token is base64url-encoded. Once it’s base64url-decoded, it 
looks like the following. Also you can use an online tool like https://jwt.io 
to decode the ID token:
{
    "alg":"none",
    "typ":"JWT"
}.
{
    "exp":1667236118,
    "azp":"NJ0LXcfdOW20EvD6DU0l0p01u_Ya",
    "sub":"PI:EMAIL",
    "aud":"NJ0LXcfdOW20EvD6DU0l0p01u_Ya",
    "iss":"https://localhost:9443/oauth2endpoints/token",
    "iat":1663636118
}
 OpenID Connect Request
The ID token is the heart of OpenID Connect, but that isn’t the only place where it deviates 
from OAuth 2.0. OpenID Connect introduced some optional parameters to the OAuth 2.0 
authorization grant request. The previous exercise didn’t use any of those parameters. 
Let’s examine a sample authorization grant request with all the optional parameters: 
https://localhost:9443/oauth2/authorize?response_type=code&
     scope=openid&
     client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya&
     redirect_uri= https://localhost/callback&
     response_mode=.....&
     nonce=.....&
     display=....&
     prompt=....&
     max_age=.....&
     ui_locales=.....&
CHAPTEr 6  OPEnID COnnECT (OIDC)
140
     id_token_hint=.....&
     login_hint=.....&
     acr_value=.....
Let’s review the definition of each attribute:
• 
response_mode: Determines how the authorization server sends back 
the parameters in the response. This is different from the response_
type parameter, defined in the OAuth 2.0 core specification. With the 
response_type parameter in the request, the client indicates whether 
it expects a code or a token. In the case of an authorization code 
grant type, the value of response_type is set to code, whereas with an 
implicit grant type, the value of response_type is set to token. The 
response_mode parameter addresses a different concern. If the value 
of response_mode is set to query, the response parameters are sent 
back to the client as query parameters appended to the redirect_
uri; and if the value is set to fragment, then the response parameters 
are appended to the redirect_uri as a URI fragment.
• 
nonce: Mitigates replay attacks. The authorization server must 
reject any request if it finds two requests with the same nonce value. 
If a nonce is present in the authorization grant request, then the 
authorization server must include the same value in the ID token. 
The client application must validate the value of the nonce once it 
receives the ID token from the authorization server.
• 
display: Indicates how the client application expects the 
authorization server to display the login page and the user consent 
page. Possible values are page, popup, touch, and wap.
• 
prompt: Indicates whether to display the login or the user consent 
page at the authorization server. If the value is none, then neither the 
login page nor the user consent page should be presented to the user. 
In other words, it expects the user to have an authenticated session 
at the authorization server and a preconfigured user consent. If the 
value is login, the authorization server must reauthenticate the user. 
If the value is consent, the authorization server must display the user 
consent page to the end user. The select_account option can be 
CHAPTEr 6  OPEnID COnnECT (OIDC)
141
used if the user has multiple accounts on the authorization server. 
The authorization server must then give the user an option to select 
from which account he or she requires attributes.
• 
max_age: In the ID token there is a parameter that indicates the time 
of user authentication (auth_time). The max_age parameter asks the 
authorization server to compare that value with max_age. If it’s less 
than the gap between the current time and max_age (current time-
max_age), the authorization server must reauthenticate the user. 
When the client includes the max_age parameter in the request, the 
authorization server must include the auth_time parameter in the 
ID token.
• 
ui_locales: Expresses the end user’s preferred language for the user 
interface.
• 
id_token_hint: An ID token itself. This could be an ID token 
previously obtained by the client application. If the token is 
encrypted, it has to be decrypted first and then encrypted back by 
the public key of the authorization server and then placed into the 
authentication request. If the value of the parameter prompt is set to 
none, then the id_token_hint could be present in the request, but it 
isn’t a requirement.
• 
login_hint: This is an indication of the login identifier that the end 
user may use at the authorization server. For example, if the client 
application already knows the email address or phone number of the 
end user, this could be set as the value of the login_hint. This helps 
provide a better user experience.
• 
acr_values: Stands for authentication context reference values. 
It includes a space-separated set of values that indicates the 