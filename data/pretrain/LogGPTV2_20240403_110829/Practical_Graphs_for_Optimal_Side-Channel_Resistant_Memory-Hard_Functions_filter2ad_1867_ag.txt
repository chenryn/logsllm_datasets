(cid:18) 4n
(cid:18)
, Ω
log n
n
log1−ϵ n
, log n
. 11
-block depth robust DAGs. In fact, we conjecture that DRSample
already satisfies this property. Such a family could be used along
with aATSample to obtain a family of DAGs with aAT provably at
least (1−ϵ)n2
log n
How close to optimal are the depth-reducing attacks on DAGs
like DRSample and Deterministic? We conjecture that the construc-
tions of depth-reducing sets are nearly optimal. If this conjecture
is true it would imply that for n ≤ 224 the quality of any attack on
DRSample is at most 28 [7]. Thus, an important open challenge is
to find smaller depth-reducing set for the specific graph DRSample
with n = 224 nodes (or demonstrate that no smaller depth-reducing
set exists). Is there an efficient approximation algorithm to find a
small depth-reducing set S given a target depth dtдt ? While it is
hard to approximate |S| to within a factor of 1.99 [19], it is still possi-
ble that an efficient 2.01-approximation algorithm exists. Similarly,
is there an efficient algorithm to approximate the aAT of a fixed
DAG G? Blocki and Zhou [19] recently showed that aAT is NP-hard
(cid:17) to re-pebble the DAG starting with 4(1−ϵ)n
(cid:17) to re-pebble every
11In particular, it would cost Ω
log n
pebbles on the graph. The graph aATSample constructs would consist of a gadget
that forces us to either keep 2(1−ϵ)n
pebbles on the DAG during the last n/2 steps or
log n
re-pebble within the next
nlog n
aAT ≥ (1−ϵ)n2
log n
pebbles around for these last n/2 steps. Thus,
steps so it is better to keep 2(1−ϵ)n
log n
steps. It would cost Ω
n2
log2−ϵ n
n2
log1−ϵ n
n2 log n
(cid:16)
(cid:16)
.
Session E1:  Hardening CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1013to compute exactly, but an efficient approximation algorithm would
allow us to quickly analyze constructions like DRSample.
Finally, we conjecture that our constructions of practical depth-
robust DAGs might lead to the development of data-dependent
MHFs with provably strong resistance to space-time trade-off at-
tacks.
A MEMORY-HARD VS. MEMORY-BOUND
We show that memory-bound and memory-hard are distinct com-
plexity notions by giving a simple and intuitive separating example.
In other words we describe a function which is memory-bound but
not memory-hard.
Recall that a function fn with hardness parameter n ∈ N is
memory-bound if the expected number of cache misses required
to compute fn on fresh input (in the random oracle model) grows
linearly in n. Conversely fn is memory-hard if, roughly speaking,
the product of (parallel) space-time grows roughly quadratically in
n.
Consider the function fn given by a array A of s uniform random
w-bit values. The function fn on input x with random oracle H
is defined as follows. Let b0 = x. For i ∈ [n] let bi = aj where
j = H(bi−1) mod s and set fn(x) = bn. Roughly speaking this is
the memory-bound function given in [27] and the authors show
that if w ∗ s is at least twice the size of cache then the expected
number of cache misses grows linearly in n. In other words fn is
memory-bound.
However, the trivial (sequential) algorithm which computes fn
by computing the bi values in increasing order of their index shows
that fn is not memory-hard. Indeed, the time complexity of this
algorithm grows linearly in n but its space complexity remains
constant in n. Thus, the product of its space-time grows only linearly
in n rather than quadratically.
B EXTRA GRAPH CONSTRUCTIONS
C CONCENTRATION BOUNDS
Lemma C.1. Let G ← DRSample(n) and let m = (τ + 1) log n,
r∗ = O(1) and let x ∈ [n′] = [n/m] be a meta-node then x is
a (c4, r∗)-local expander in the meta-graph Gm = (Vm, Em) with
probability at most c6 =
where
1
(cid:18)
2c4 ln(cid:16) 1
(cid:17)
+2(1−c4) ln(cid:16)
4r ∗π 2e−2c4(1−c4)
1
1−c4
c4
x = e
(cid:17)
(cid:16) x r∗
(cid:17)− τ (1−γ )2c2
1−x
4
8
(cid:19)
.
Furthermore, for any ϵ > 0 we have that, except with negligible
probability in n, at least n′(1 − c6 − ϵ) nodes in the meta-graph are
(c4, r∗)-local expanders.
Proof. (sketch) We first show that except with negligible prob-
ability every node is a (c4, n
1/4)-local expander.
(cid:32)
(cid:33)
Claim 3. Except with probability
3/4
n
c4(1 − c4)
e−2
1/4)-local expander.
every node v ∈ Vm is a (c4, n
xn1/4
1 − x
4π
2
The proof of Claim 3 closely follows the proof of Lemma 3.3. It
is included below for completeness. Let EXPAND be the event that
Algorithm 3: An alternative algorithm for sampling depth-
robust graphs.
Function HDRSample(n ∈ {2i
: i ∈ N≥1}):
V := [v]
E := {(1, 2)}
for v ∈ [3, n] and i ∈ [2] do
graph.
// Populate edges of
E := E ∪ {(v, GetParent(v, i))} // Get i th parent of
node v
end
return G := (V , E).
Function GetParent(v,i):
else
if i = 1 then
u := i − 1
д′ := v mod log2(n)
// Select range size.
д := min(v, 2д′+1) // Don’t make edges too long.
r←[д/2, д]
// Select random edge length.
end
return v − r
Algorithm 4: A deterministic algorithm for sampling (conjec-
tured) depth-robust graphs.
Function Deterministic(n ∈ {2i
: i ∈ N≥1}):
V := [v]
E := {(1, 2)}
for v ∈ [3, n] and i ∈ [2] do
graph.
// Populate edges of
E := E ∪ {(v, GetParent(v, i))} // Get i th parent of
node v
end
return G := (V , E).
Function GetParent(v,i):
else
if i = 1 then
u := i − 1
j := v mod log2(n)
end
return v − min{2j , v − 1}
1/4)-local expanders and let EXPu,r ∗ be the
all metanodes are (c4, n
indicator random variable for the event that node u is a(c4, r∗)-local
expander. Conditioning on the event EXPAND the events EXPu,r ∗ and
1/4. We can now
EXPv,r ∗ are independent whenever |v − u| ≥ 4n
1/4. Since Bj is the sum
of independent random variables we can apply chernoff bounds+
union bounds to show that except with negligible probability we
j Bj ≥
(cid:3)
set Bj =
have E(cid:2)Bj
1/4. It follows that
(1 − c6 − ϵ)n′ except with negligible probability in n.
(cid:3)−Bj ≤ ϵ n′
4n1/4 for each j ≤ 4n
,r ∗ for each j ≤ 4n
i EXPj +4in1/4
Session E1:  Hardening CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1014Algorithm 5: A alternative algorithm for sampling a high aAT
graph.
Function HaATSample(H = ( ¯V = [n], ¯E), c ∈ (0, 1)):
V := [2n]
E := ¯E ∪ {(i, i + 1) : i ∈ [2n − 1]}
for v ∈ [n + 1, 2n] and i ∈ [2] do
edges of graph.
E := E ∪ {(v, GetParentc(v, i))}
of node v
end
return G := (V , E).
// Populate new
// Get i th parent
Function GetParentc (v,i):
if i = 1 then
u := i − 1
end
else if v ≤ n then
д′←[1,(cid:4)log2(v)(cid:5) + 1]
// Select random range
// Don’t make edges too long.
// Select random edge
size.
д := min(v, 2д′)
r←[max(д/2, 2), д]
length.
u := v − r
end
else
if v = 1 mod 2 then
u←[n]
end
else
д′←[1,(cid:4)log2(v)(cid:5) + 1] // Select random range
// Don’t make edges too
// Select random edge
size.
д := min(v, 2д′)
long.
r←[max(д/2, 2), д]
length.
u := v − r
end
end
return u
v(r) and Y ⊆ I∗
(cid:18)
Proof of Claim 3. Fix a node v ∈ Vm and r ≥ n
such that 2i +1 ≥ 2rm ≥ 2i. Fix X ⊆ I∗
have
(cid:19)(1−γ)m|Y |
1 − |X|(1 − γ)
Pr[X × Y ∩ Em = ∅] ≤
8r log n
(cid:19) (1−γ )2c2
(cid:18) 1
If we set |X| = |Y| = c4r then we have
≤
4 r τ
8
1/4. Let i be given
v +r(r) then we
(cid:18) 1
(cid:19) (1−γ )2|Y ||X |τ
8r
e
Pr[X × Y ∩ Em = ∅] ≤
sets X , Y exist. We have(cid:0) r
We would like to use union bounds to show that (whp) no such
inequalities √2πnn+0.5
(cid:1)2 such pairs X , Y where, by Sterling’s
c4r
e−n ≤ n! ≤ enn+0.5
e−n, we have
e
.
(cid:19)
(cid:18) r
c4r
=
≤
=
=
= e
r
e
2π
er r +1/2
er r +1/2
(c4r)!(r − c4r)!
√2π(c4r)c4r +0.5√2π(r − c4r)r−c4r +0.5
√
2π(cid:112)rc4(1 − c4)(c4)c4r(1 − c4)r−c4r
r(c4)c4r +1/2(1 − c4)r−c4r +1/2
c4r ln(cid:16) 1
+(1−c4)r ln(cid:16)
(cid:17)
2πe−1(cid:112)rc4(1 − c4)
(cid:17)