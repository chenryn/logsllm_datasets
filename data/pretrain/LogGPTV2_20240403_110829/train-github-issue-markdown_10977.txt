So I'm currently adding in logic to handle the removal of arbitrary nodes that
would result in invalid code.
There are currently two ways to tackle this:
  1. Detect it and throw compiler errors
  2. Detect it and fix it up on a case-by-case basis.
##
For example, when removing the `foo` `callee` of a `CallExpression` the
following _could_ be done:
### Change the callee to undefined
    bar(foo("bar"));
=>
    bar(undefined("bar"));
### Noop the function
    bar(foo("bar"));
=>
    bar(undefined);
(Arguments are turned into a `SequenceExpression`, "pure" values are removed
from it, and we ensure it evaluates to `undefined` by pushing it onto the
sequence expression)
### Throw an error
    bar(foo("bar"));
=>
    CompilerError: Invalid removal of `CallExpression` `callee`.
* * *
Unsure how to handle these, ideally I'd like idiomatic transforms. Having to
worry about the context whenever you want to remove a node is gross, it leads
to duplicating every single contextual validation permutation which is pretty
nasty. Leaning more towards the noop case since at least that doesn't result
in broken code.