### The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities

#### 10.10 Username/Password Authentication and DNS Spoofing

In the past, many services relied on username/password authentication, similar to other services at the time. If attackers could forge DNS responses to make their IP addresses appear as one of the hosts in the authentication file, they could bypass authentication and log into the target machine. Today, DNS names are rarely used for direct authentication; however, the ability to forge DNS responses remains a serious security issue. The most significant current risk is the impersonation of legitimate sites. Malicious nodes can pose as legitimate destinations and collect authentication details or other sensitive data. For example, an attacker could mimic a popular retailer like `www.amazon.com`. By posing as the legitimate site and deceiving certain clients, the attacker might collect Amazon login credentials and credit card information from unsuspecting users. These attackers often use various techniques to make the spoofed site seem authentic, but they can usually fool most users.

#### Cache Poisoning

The original resolver algorithm specified in DNS RFCs was vulnerable to a poisoning attack that allowed attackers to provide malicious IP addresses for arbitrary domain names. Suppose an attacker controls the zone at `badperson.com`. When a victim queries the attacker's name server for the A records of `www.badperson.com`, the attacker can respond by delegating authority for the `www` subdomain to the hostname they want to poison. For instance, they could include an authority section in the response with these NS resource records:

```
www.badperson.com. NS ns1.google.com.
www.badperson.com. NS ns2.google.com.
www.badperson.com. NS ns3.google.com.
www.badperson.com. NS ns4.google.com.
```

Essentially, the attacker tells the victim that the `www` subdomain of `badperson.com` is handled by four authoritative name servers, which happen to be Google's name servers. The critical part of the attack comes in the additional section of the response, where the attacker places the A resource records for the Google name servers:

```
ns1.google.com A 10.20.30.40
ns2.google.com A 10.20.30.40
ns3.google.com A 10.20.30.40
ns4.google.com A 10.20.30.40
```

RFC 1034 states that the resolution code should check that the delegation is to a "better" name server than the one used in the current query. In this example, the query for `www.badperson.com` was made to the `badperson.com` name server. This request is then delegated to the Google name servers, and the packet claims that these name servers are authoritative for the `www.badperson.com` subdomain. This passes the algorithm's "better" check. The real problem is that the algorithm suggests that the code should blindly honor the supplemental A records that purport to be helpful glue. Vulnerable implementations of BIND circa 1997 would enter these A records into the cache. Any future requests by victims for a `google.com` host would end up contacting the attacker's evil name server at `10.20.30.40`.

#### Windows Resolver Bug

Windows resolvers also have a bug that allows attackers to hijack popular websites for specific targets. If an attacker controls the zone at `badperson.com` and a victim asks their name server for the A records of `www.badperson.com`, the attacker can respond by delegating the authority for the `com` domain to an evil name server under their control. The authority section might contain this NS resource record:

```
com. NS evil.reallybad.org.
```

There is no logical reason for the victim's resolver to honor this response, but due to an implementation bug, Windows cached this NS record. This means that later, when the resolver needs to contact a name server for the `.com` zone, it contacts `evil.reallybad.org` instead. Windows NT and Windows 2000 SP1 and SP2 were vulnerable to this issue by default, and it also affected various Symantec products.

#### Spoofing Responses

Most communications between DNS clients and servers occur over UDP, an unreliable and unauthenticated transport. TCP is also an unauthenticated transport but to a lesser extent. (For more information, refer to Chapter 14.) Therefore, how does a client or server know if a request is from a legitimate source? The traditional way of validating DNS responses is using the DNS ID field in the header. When a DNS client generates a question, it assigns a (presumably) random number for the ID field. When it receives responses, it checks that the DNS ID field matches the request. This check is done by verifying that the response packet has the same value in the DNS ID field as the query packet the client originally sent. With this information, several attacks can be launched. One of the most obvious is a man-in-the-middle attack by someone in a position to observe DNS traffic. This attack is relatively easy to achieve, so it is considered a known risk. Focus should be on blind spoofing.

DNS spoofing issues affect both DNS server and client implementations because servers make requests on behalf of clients and usually cache results (if configured for recursion). When a server issues a DNS request to recursively resolve a remote host on behalf of a client, remote responses to servers could be forged and subsequently cached. Most attacks of this nature revolve around how predictable an implementation's DNS ID generation algorithm is. The simplest implementations have fixed increments (usually of 1) for each question they generate. In the past, BIND (one of the premier name servers on the Internet) was vulnerable to this problem, as pointed out by Secure Networks Inc. and CORE (documented at http://attrition.org/security/advisory/nai/SNI-12.BIND.advisory). The advisory walks through the steps required to cache poison name servers by forging responses from a remote DNS server.

#### Summary

This chapter has described a general process for assessing network protocol implementations. To supplement that process, you have also walked through identifying vulnerabilities in several popular protocols. Although this chapter isn't an exhaustive coverage of protocols, it should give you a firm grasp of how to assess an unfamiliar implementation. You should feel comfortable applying these basic techniques to reviewing an implementation of a file format specification or other data-exchange method.

#### 8.4 Web Applications

**Introduction**

Web applications are one of the most popular areas of modern software development and might be the single biggest innovation of the dot-com era. In less than a decade, they have transformed a simple communications protocol (HTTP) into a primary means of modern interaction. The rapid adoption of web applications is due to their capability to provide convenient access to information and services in ways not previously possible. However, web applications have introduced new security concerns and vulnerability classes, making it essential to assess their security. This task can be formidable because the web exists as a loose collection of rapidly developing technologies. Basic strategies can help cut through the complexity and focus on finding security vulnerabilities. Modern web application development is often tied to complex third-party frameworks, so security reviewers should augment web application source-code reviews with operational reviews and live testing.

**Web Technology Overview**

Developing a website might seem straightforward, but web technology has evolved to the point where developing a web application is almost as complex as other networked services. The core of the Struts framework, for example, is a flexible control layer based on standard technologies like Java Servlets, JavaBeans, ResourceBundles, and XML, as well as various Jakarta Commons packages. Struts encourages application architectures based on the Model 2 approach, a variation of the classic Model-View-Controller (MVC) design paradigm. Struts provides its own Controller component and integrates with other technologies to provide the Model and the View. For the Model, Struts can interact with standard data access technologies like JDBC and EJB, as well as third-party packages like Hibernate, iBATIS, or Object Relational Bridge. For the View, Struts works well with JavaServer Pages, including JSTL and JSF, as well as Velocity Templates, XSLT, and other presentation systems.

**The Basics**

The World Wide Web (WWW) is a distributed global network of servers that publish documents over various protocols, such as gopher, FTP, and HTTP. A document, or resource, is identified by a Uniform Resource Identifier (URI), such as `http://www.neohapsis.com/index.html`. This URI identifies the HTML document located on the `www.neohapsis.com` Web server at `/index.html`, which can be retrieved via an HTTP request.

Hypertext Markup Language (HTML) is a simple language for marking up text documents with tags that identify semantic structure and visual presentation. HTML is a Standard Generalized Markup Language (SGML) application—a markup language defined in SGML. A key concept in HTML is the hyperlink, which is a reference to another resource on another server (given as a URI). One of the defining characteristics of the web is that it is composed largely of hypertext—interconnected documents that reference each other via hyperlinks.

Hypertext Transfer Protocol (HTTP) is a simple protocol that web servers use to make documents available to clients. A web client, or web browser, connects to a web server using a TCP connection and issues a simple request for a URI path, such as `/index.html`. The server then returns this document over the connection or notifies the client if there has been an error condition. Web servers typically listen on port 80, while SSL-wrapped HTTP (HTTPS) is typically available on port 443.

**Static Content**

The most straightforward request a web server can handle is for a file sitting on its local file system or in memory. The web server simply retrieves the file and sends it to the network as the HTTP response. This process is known as serving static content because the document is the same for every user every time it is served. Static content is suitable for data that doesn't change often, like a Star Trek website or pictures of a collection of potted meat products. However, more complex websites need to control the web server's output programmatically. The web server must create content on the fly that reacts to users' actions to exhibit the behavior of an application. There are myriad ways a programmer can interface with a web server to create dynamic content.

**CGI**

Common Gateway Interface (CGI) is one of the oldest mechanisms for creating dynamic web content. A CGI program takes input from the web server via environment variables, the command line, and standard input. This input describes the request the user made to the web server. The CGI program processes this input and writes its output (usually an HTML document) to standard output. When a web server receives a request for a CGI program, it forks and runs that program as a new process, then relays the program's output back to the user.

CGI programs can be written in almost any language, as the only real requirement is the ability to write to STDOUT. Perl is a popular choice due to its string manipulation features, as are Python and Ruby. Here is a bare-bones CGI program in Perl:

```perl
#!/usr/bin/perl
print "Content-type: text/html\r\n\r\n";
print "hi!\r\n";
```

The primary disadvantage of the CGI model is that it requires a separate process for each web request, making it unsuitable for handling heavy traffic. Modified interfaces, such as FastCGI, allow a more lightweight request-handling process, but CGI-style programs are typically used for low-traffic applications.

**Web Server APIs**

Most web servers provide an API that enables developers to customize the server's behavior. These APIs are provided by creating a shared library or dynamic link library (DLL) in C or C++ that is loaded into the web server at runtime. These web server extensions can be used for creating dynamic content, as web requests can be passed to developer-supplied functions that process them and generate responses. These extensions also allow global modification of the server, so developers can perform analysis or processing of every request the server handles. These APIs allow far more customization than an interface such as CGI because web developers can alter the behavior of the web server at a very granular level by manipulating shared data structures and using control APIs and callbacks. Common interfaces include:

- **Internet Server Application Programming Interface (ISAPI)**: Microsoft provides this API for extending the functionality of its Internet Information Services (IIS) web server. ISAPI filters and DLLs are often found in older Microsoft-based web applications, particularly in web interfaces to commercial software packages.
- **Netscape Server Application Programming Interface (NSAPI)**: Netscape's web server control API can be used to extend Netscape's line of servers and web proxies. It is occasionally used in older enterprise applications for global input validation as a first line of defense.
- **Apache API**: This API supports extension of the Apache open-source web server via modules and filters.

Many of the other web programming technologies discussed in this chapter are implemented on top of these web server APIs. Modern web servers are usually constructed in an open, modular fashion, allowing these extension APIs to make changes commensurate with what you'd expect from full source-code-based modifications of the web server.

**Server-Side Includes (SSIs)**

A web server doesn't examine a typical static HTML document when presenting it to a web browser. The server simply reads the document from memory or disk and sends it out over the network without looking at the document's contents. Several technologies slightly alter this design so that the web server inspects and processes the document while serving it to the client. These technologies range in complexity from simple directives to the web server to full programming language interpreters embedded in the web server.

The simplest and oldest form of server-side document processing is Server-Side Includes (SSIs), which are specially formatted tags placed in HTML pages. These tags are simple directives to the web server that are followed as a document is presented to a user. As the web server outputs the document, it pulls out the SSI tags and performs the appropriate actions. These tags provide basic functionality and can be used to create simple dynamic content. Most web servers support them in some fashion. Here are a few examples of SSIs:

- The following command prints the value of the web server variable `DOCUMENT_NAME`, which is the name of the requested document:
  ```html
  <p>The current page is <!--#echo var="DOCUMENT_NAME" --></p>
  ```
- The following SSI directs the server to retrieve the file `/footer.html` and replace the `#include` tag with the contents of that file:
  ```html
  <!--#include file="/footer.html" -->
  ```
- The following SSI runs the `ls` command and replaces the `#exec` tag with its results:
  ```html
  <!--#exec cmd="ls" -->
  ```

As a security reviewer, SSI functionality should raise concerns. You will learn more about handling issues with SSI in "Programmatic SSI" later in this chapter.

**Server-Side Transformation**

Storing the content of a website in a format other than HTML is often advantageous. This content might be generated by another program or tool in a common format such as XML, or it might reside on a live resource, such as a database server. Web developers can use server-side parsing technologies to instruct the web server to automatically transform content into HTML on the fly. These technologies are more involved than server-side includes but are not as sophisticated as full server-side scripting implementations.

Extensible Stylesheet Language Transformation (XSLT) is a general language that describes how to turn one XML document into another XML document. Web developers can use XSLT to tell a web server how to transform an XML document containing a page's content into an HTML document that is presented to users. For example, consider the following simple XML document describing a person:

```xml
<person>
    <name>Zoe</name>
    <age>1</age>
</person>
```

An XSLT style sheet that describes how to turn this XML document into HTML might look like this:

```xml
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <html>
            <body>
                <h2><xsl:value-of select="person/name"/></h2>
                <p>Age: <xsl:value-of select="person/age"/></p>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>
```

This XSLT style sheet transforms the XML document into an HTML document that displays the person's name and age.