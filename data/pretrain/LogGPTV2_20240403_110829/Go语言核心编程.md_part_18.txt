 0号是保留端口.
 1-1024 是固定端口(程序员不要使用)
又叫有名端口,即被某些程序固定使用,一般程序员不使用.
22:SSH远程登录协议 23: telnet 使用 21: ftp 使用
25:smtp 服务使用 80: iis使用 7:echo 服务
 1025-65535 是动态端口
这些端口，程序员可以使用.
18.2.7 端口(port)-使用注意
1) 在计算机(尤其是做服务器)要尽可能的少开端口
2) 一个端口只能被一个程序监听
3) 如果使用 netstat –an 可以查看本机有哪些端口在监听
4) 可以使用 netstat –anb 来查看监听端口的pid,在结合任务管理器关闭不安全的端口
18.3 tcp socket 编程的客户端和服务器端
为了授课方法，我们将 tcp socket 编程，简称 socket 编程.下图为 Golang socket 编程中客户端和服
务器的网络分布
18.4 tcp socket 编程的快速入门
18.4.1 服务端的处理流程
1) 监听端口 8888
2) 接收客户端的tcp 链接，建立客户端和服务器端的链接.
3) 创建goroutine，处理该链接的请求(通常客户端会通过链接发送请求包)
18.4.2 客户端的处理流程
1) 建立与服务端的链接
2) 发送请求数据[终端]，接收服务器端返回的结果数据
3) 关闭链接
18.4.3 简单的程序示意图
18.4.4 代码的实现
 程序框架图示意图
 服务器端功能:
编写一个服务器端程序，在8888 端口监听
可以和多个客户端创建链接
链接成功后，客户端可以发送数据，服务器端接受数据，并显示在终端上.
先使用telnet 来测试，然后编写客户端程序来测试
 服务端的代码:
package main
import(
"fmt"
"net" //做网络socket 开发时,net 包含有我们需要所有的方法和函数
_"io"
)
funcprocess(conn net.Conn){
//这里我们循环的接收客户端发送的数据
defer conn.Close() //关闭conn
for{
//创建一个新的切片
buf:=make([]byte, 1024)
//conn.Read(buf)
//1. 等待客户端通过conn 发送信息
//2. 如果客户端没有wrtie[发送]，那么协程就阻塞在这里
fmt.Printf("服务器在等待客户端%s 发送信息\n", conn.RemoteAddr().String())
n,err :=conn.Read(buf)//从 conn 读取
iferr!= nil {
fmt.Printf("客户端退出 err=%v", err)
return //!!!
}
//3. 显示客户端发送的内容到服务器的终端
fmt.Print(string(buf[:n]))
}
}
funcmain() {
fmt.Println("服务器开始监听....")
//net.Listen("tcp", "0.0.0.0:8888")
//1.tcp 表示使用网络协议是tcp
//2.0.0.0.0:8888 表示在本地监听 8888端口
listen,err :=net.Listen("tcp", "0.0.0.0:8888")
iferr!= nil {
fmt.Println("listenerr=", err)
return
}
defer listen.Close() //延时关闭listen
//循环等待客户端来链接我
for{
//等待客户端链接
fmt.Println("等待客户端来链接....")
conn, err :=listen.Accept()
iferr!= nil {
fmt.Println("Accept() err=", err)
} else{
fmt.Printf("Accept()suc con=%v 客户端ip=%v\n", conn, conn.RemoteAddr().String())
}
//这里准备其一个协程，为客户端服务
go process(conn)
}
//fmt.Printf("listen suc=%v\n", listen)
}
 客户端功能:
1. 编写一个客户端端程序，能链接到 服务器端的8888端口
2. 客户端可以发送单行数据，然后就退出
3. 能通过终端输入数据(输入一行发送一行), 并发送给服务器端 []
4. 在终端输入exit,表示退出程序.
5. 代码:
package main
import(
"fmt"
"net"
"bufio"
"os"
)
funcmain() {
conn, err :=net.Dial("tcp", "192.168.20.253:8888")
iferr!= nil {
fmt.Println("client dial err=", err)
return
}
//功能一：客户端可以发送单行数据，然后就退出
reader:= bufio.NewReader(os.Stdin)//os.Stdin 代表标准输入[终端]
//从终端读取一行用户输入，并准备发送给服务器
line,err :=reader.ReadString('\n')
iferr!= nil {
fmt.Println("readStringerr=", err)
}
//再将line 发送给 服务器
n,err :=conn.Write([]byte(line))
iferr!= nil {
fmt.Println("conn.Writeerr=", err)
}
fmt.Printf("客户端发送了 %d 字节的数据，并退出",n)
}
对client.go 做了改进：
18.5 经典项目-海量用户即时通讯系统
18.5.1 项目开发流程
需求分析--> 设计阶段---> 编码实现 --> 测试阶段-->实施
18.5.2 需求分析
1) 用户注册
2) 用户登录
3) 显示在线用户列表
4) 群聊(广播)
5) 点对点聊天
6) 离线留言
18.5.3 界面设计
18.5.4 项目开发前技术准备
项目要保存用户信息和消息数据，因此我们需要学习数据库(Redis 或者 Mysql) , 这里我们选择
Redis ， 所以先给同学们讲解如何在Golang 中使用 Redis.
18.5.5 实现功能-显示客户端登录菜单
功能：能够正确的显示客户端的菜单。
界面：
思路分析：这个非常简单，直接写.
代码实现：
client/main.go
client/login.go
18.5.6 实现功能-完成用户登录
 要求：先完成指定用户的验证，用户id=100, 密码pwd=123456 可以登录，其它用户不能登录
 这里需要先说明一个Message的组成(示意图)，并发送一个 Message 的流程
 1.完成客户端可以发送消息长度，服务器端可以正常收到该长度值
分析思路
(1) 先确定消息Message 的格式和结构
(2) 然后根据上图的分析完成代码
(3) 示意图
代码实现：
server/main.go
common/message/message.go
client/main.go
和前面的代码一样，没有修改
client/login.go
 2.完成客户端可以发送消息本身，服务器端可以正常接收到消息,并根据客户端发送的消息
(LoginMes), 判断用户的合法性，并返回相应的LoginResMes
思路分析：
(1) 让客户端发送消息本身
(2) 服务器端接受到消息， 然后反序列化成对应的消息结构体.
(3) 服务器端根据反序列化成对应的消息， 判断是否登录用户是合法, 返回 LoginResMes
(4) 客户端解析返回的LoginResMes,显示对应界面
(5) 这里我们需要做函数的封装
代码实现：
client/login.go 做了修改
server/main.go 修改
将读取包的任务封装到了一个函数中.readPkg()
 能够完成登录，并提示相应信息
server/main.go 修改
client/utils.go 新增
client/login.go 增加代码
 程序结构的改进， 前面的程序虽然完成了功能，但是没有结构，系统的可读性、扩展性和维护性
都不好，因此需要对程序的结构进行改进。
1) 先改进服务端, 先画出程序的框架图[思路]，再写代码.
2) 步骤
[1] . 先把分析出来的文件，创建好，然后放到相应的文件夹[包]
[2] 现在根据各个文件，完成的任务不同，将 main.go 的代码剥离到对应的文件中即可。
[3] 先修改了utils/utils.go
[4] 修改了 process2/userProcess.go
[5] 修改了 main/processor.go
[6] 修改main/main.go
 修改客户端, 先画出程序的框架图[思路]，再写代码
[1] 步骤1-画出示意图
[2] 先把各个文件放到对应的文件夹[包]
[3] 将server/utils.go 拷贝到 client/utils/utils.go
[4] 创建了server/process/userProcess.go
说明：该文件就是在原来的 login.go 做了一个改进，即封装到UserProcess 结构体
[5] 创建了server/process/server.go
[6] server/main/main.go 修改
 在Redis手动添加测试用户,并画图+说明注意.(后面通过程序注册用户)
手动直接在redis 增加一个用户信息：
 如输入的用户名密码在Redis中存在则登录，否则退出系统，并给出相应的
提示信息:
1. 用户不存在,你也可以重新注册，再登录
2. 你密码不正确。。
代码实现：
[1] 编写 model/user.go
[2] 编写 model/error.go
[3] 编写 model/userDao.go
package model
import(
"fmt"
"github.com/garyburd/redigo/redis"
"encoding/json"
)
//我们在服务器启动后，就初始化一个userDao 实例，
//把它做成全局的变量，在需要和 redis 操作时，就直接使用即可
var(
MyUserDao *UserDao
)
//定义一个 UserDao 结构体体
//完成对User 结构体的各种操作.
type UserDao struct {
pool *redis.Pool
}
//使用工厂模式，创建一个 UserDao 实例
funcNewUserDao(pool *redis.Pool)(userDao *UserDao) {
userDao =&UserDao{
pool:pool,
}
return
}
//思考一下在 UserDao 应该提供哪些方法给我们
//1. 根据用户 id 返回 一个User 实例+err
func(this *UserDao) getUserById(conn redis.Conn, idint)(user *User,err error) {
//通过给定 id 去 redis 查询这个用户
res, err :=redis.String(conn.Do("HGet", "users", id))
iferr!= nil {
//错误!
iferr== redis.ErrNil { //表示在 users 哈希中，没有找到对应id
err =ERROR_USER_NOTEXISTS
}
return
}
user= &User{}
//这里我们需要把 res 反序列化成 User 实例
err =json.Unmarshal([]byte(res), user)
iferr!= nil {
fmt.Println("json.Unmarshal err=", err)
return
}
return
}
//完成登录的校验 Login
//1.Login 完成对用户的验证
//2. 如果用户的 id 和pwd 都正确，则返回一个user 实例
//3. 如果用户的 id 或pwd 有错误，则返回对应的错误信息
func(this *UserDao) Login(userId int,userPwd string) (user *User,err error){
//先从UserDao 的连接池中取出一根连接
conn :=this.pool.Get()
defer conn.Close()
user,err =this.getUserById(conn, userId)
iferr!= nil {
return
}
//这时证明这个用户是获取到.
ifuser.UserPwd !=userPwd {
err =ERROR_USER_PWD
return
}
return
}
[4] main/redis.go
[5] main/main.go
[6] 在process/userProcess.go 使用到redis 验证的功能
18.5.7 实现功能-完成注册用户
1) 完成注册功能，将用户信息录入到Redis中
2) 思路分析，并完成代码
3) 思路分析的示意图
 实现功能-完成注册用户
[1] common/message/user.go
[2] common/message/message.go
[3] client/process/userProcess.go
func(this *UserProcess) Register(userId int,
userPwd string, userNamestring) (err error){
//1. 链接到服务器
conn, err :=net.Dial("tcp", "localhost:8889")
iferr!= nil {
fmt.Println("net.Dial err=", err)