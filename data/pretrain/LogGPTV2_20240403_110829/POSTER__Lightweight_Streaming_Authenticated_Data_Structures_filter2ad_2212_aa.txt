title:POSTER: Lightweight Streaming Authenticated Data Structures
author:Chia-Mu Yu
Accepted Manuscript
Dynamic Fully Homomorphic encryption-based Merkle Tree for lightweight streaming
authenticated data structures
Jian Xu, Laiwen Wei, Yu Zhang, Andi Wang, Fucai Zhou, Chong-zhi Gao
PII:
DOI:
Reference:
S1084-8045(18)30028-6
10.1016/j.jnca.2018.01.014
YJNCA 2056
To appear in:
Journal of Network and Computer Applications
Received Date: 14 April 2017
Revised Date: 17 January 2018
Accepted Date: 26 January 2018
Please cite this article as: Xu, J., Wei, L., Zhang, Y., Wang, A., Zhou, F., Gao, C.-z., Dynamic Fully
Homomorphic encryption-based Merkle Tree for lightweight streaming authenticated data structures,
Journal of Network and Computer Applications (2018), doi: 10.1016/j.jnca.2018.01.014.
This is a PDF file of an unedited manuscript that has been accepted for publication. As a service to
our customers we are providing this early version of the manuscript. The manuscript will undergo
copyediting, typesetting, and review of the resulting proof before it is published in its final form. Please
note that during the production process errors may be discovered which could affect the content, and all
legal disclaimers that apply to the journal pertain.
Dynamic Fully Homomorphic Encryption-based Merkle Tree for
Lightweight Streaming Authenticated Data Structures
Jian Xua,b, Laiwen Weia, Yu Zhanga, Andi Wanga, Fucai Zhoua, Chong-zhi Gaoc
bState Key Laboratory of Information Security (Institute of Information Engineering, The Chinese Academy of Sciences), Beijing 100093, China
aSoftware College, Northeastern University, Shenyang 110169, China
cSchool of Computer Science, Guangzhou University,China
Abstract
Fully Homomorphic encryption-based Merkle Tree (FHMT) is a novel technique for streaming authenticated data structures (SADS) to achieve
the streaming veriﬁable computation. By leveraging the computing capability of fully homomorphic encryption, FHMT shifts almost all of
the computation tasks to the server, reaching nearly no overhead for the client. Therefore, FHMT is an important technique to construct a
more eﬃcient lightweight ADS for resource-limited clients. But the typical FHMT cannot support the dynamic scenario very well because it
cannot expend freely since its height is ﬁxed. We now present our fully dynamic FHMT construction, which is a construction that is able to
authenticate an unbounded number of data elements and improves upon the state-of-the-art in terms of computational overhead. We divided the
algorithms of the DFHMT with the following phases: initialization, insertion, tree expansion, query and veriﬁcation. The DFHMT removes the
drawbacks of the static FHMT. In the initialization phase, it is not required for the scale of the tree to be determined, and the scale of the tree
can be adaptively expanded during the data-appending phase. This feature is more suitable for streaming data environments. We analysed the
security of the DFHMT, and point out that DFHMT has the same security with FHMT. The storage, communication and computation overhead of
DFHMT is also analysed, the results show that the client uses simple numerical multiplications and additions to replace hash operations, which
reduces the computational burden of the client; the length of the authentication path in DFHMT is shorter than FHMT, which reduces storage and
communication overhead. The performance of DFHMT was compared with other construction techniques of SADS via some tests, the results
show that DFHMT strikes the performance balance between the client and server, which has some performance advantage for lightweight devices.
Keywords: Veriﬁable data streaming, Streaming authenticated data structures, Merkle tree, Fully Homomorphic Encryption
1. Introduction
With the growing market of cloud computing, it is crucial to
construct protocols that enable the veriﬁcation of computation
performed by untrusted servers (Li et al., 2014; Li et al., 2017;
Li et al., 2018; Gao et al., 2018; Huang et al., 2017; Peng et al.,
2016; Sookhak et al., 2014). Especially with the popularity of
the applications of the Internet of Things and the advent of the
era of big data, data stream has been widely used in the current
information system. For example, the air information collected
by environmental sensors, including temperature, pressure and
PM2.5 values, the stock quotes and the DNA ﬂows generated
by the DNA computing servers in medical areas. All the infor-
mation mentioned above can be viewed as a data stream, which
can be seen as an unlimited sequence of data continuously gen-
erated by the source over time. Each data unit in it can be a
numeric value, a ﬁle or a frame. And the source can only store
a small state as the stream goes by, so it has to outsource the data
stream to the servers in networks to store the data stream and
answer the query from the user.Only the correct answer could
be used by the user, so the problem of integrity veriﬁcation for
data stream (or called veriﬁable data streaming, VDS) becomes
very popular in academia (Kim and Jeong, 2016; Schoder and
Simkin, 2015; Khan, 2016; Krupp et al., 2016). Because of the
Email address: PI:EMAIL (Chong-zhi Gao)
Preprint submitted to Elsevier
unlimited length, the stream cannot be sent together. So, the
data source has to send the data continuously.
The problem of veriﬁable computation in a steaming set-
ting means the client (veriﬁer) outsources the numeric data in a
streaming fashion to an untrusted server (prover). A character-
istic of such a streaming veriﬁable computation is that the client
is only able to see the current element; the previous elements
cannot be stored and the future elements are unpredictable.
However, for a data stream, the client keeps a constant-sized
local state. When the client issues a range query and receives
the query result from the server, the cached local state can be
used to verify the correctness of the query result. The model
consists of three parts: the data source, servers and users. The
data source constantly produces data stream and sends it to the
server. The servers have three main functions: storing the data,
dealing with the query from users and sending the correspond-
ing proof along with the answer to users. The users can verify
the correctness of the answer with the proof.
An authenticated data structure (ADS) is a distributed model
of computation where a directory answers queries on a data
structure on behalf of a trusted source and provides to the user
a cryptographic proof of the validity of the answer. The source
signs a cryptographic digest of the content of the data structure
and sends it to the directory. The signed digest is for warded by
the directory to the user together with the proof of the answer
to a query. To verify the validity of answer, the user computes
February 2, 2018
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
2
the digest of the data from the answer and the proof, and com-
putes this computed digest against the original digest signed
by the source (Tamassia and Triandopoulos, 2005; Atighehchi
et al., 2015; Brandenburger et al., 2017). Therefore, authenti-
cated data structure can be an approach for VDS (Papamanthou
et al., 2010). It is for both the client and server to construct an
ordered neighborhood chain of a Merkle tree (Merkle, 1987).
The client keeps only the partial information about the chain or
tree, which can be used for the veriﬁcation purpose. Unfortu-
nately, the existing technique cannot apply to the streaming set-
ting very well, especially to the lightweight environments (the
systems with the resource constrained devices), because they
require the client to be in possession of the entire data stream.
Hence, the primary challenge of streaming authenticated data
structure lies in the design enabling the client to update the ver-
iﬁcation state locally (Yu, 2015) proposed FHMT for streaming
authenticated data structures to achieve the streaming veriﬁable
computation. But the scale of the FHMT has to be determined
in advance, which means the amount of data supported is ﬁxed.
Therefore, it is not suitable for dynamic environments.
1.1. Related works
The VDS problem is similar to the problem of the veriﬁable
database (VDB), which is proposed by Benabbas et al. (2011).
The diﬀerence between the VDS and the VDB is that the VDB
normally does not consider the order of the elements, which is
very important for VDS. Other veriﬁcation problems in both
VDS and VDB almost remain the same.
The researches on the VDB are mainly based on authenti-
cated data structures (Martel et al., 2004; Papamanthou et al.,
2010; Papamanthou et al., 2013; Miller et al., 2014; Pulls and
Peeters, 2015). Naor and Nissim (2000) proposed the meth-
ods of certiﬁcate revocation and updated in order to solve the
problem of data authentication using digital signature. (Mar-
tel et al., 2004) proposed a general authentication data struc-
ture. However, all these methods rely on the assumptions with
weak security and cannot be well proved (such as the q-strong
Diﬃe-Hellman assumption). The method of the veriﬁcation of
large data sets, proposed by Benabbas et al. (2011), and the vec-
tor commitment, proposed by Catalano and Fiore (2013), are
mainly focused on the veriﬁcation for the value of speciﬁc data
types (Fiore and Gennaro, 2012; Goodrich et al., 2011; Parno
et al., 2012) (such as polynomial) instead of the value of any
data type. Therefore they are unsuitable in the streaming set-
ting. Furthermore, other schemes (Tang et al., 2014; Papaman-
thou et al., 2013), in which the amount of data has linear growth
rate instead of exponential growth rate, are also unsuitable in
the steaming setting, which may contain very large amount of
data. In addition, the data in above schemes is not publicly ver-
iﬁable.
Schroeder and Schroeder put forward a concept of veriﬁable
data streaming (Schroeder and Schroeder, 2012). They used the
chameleon hash function Camenisch et al. (2017) to construct
a static chameleon authentication tree (CAT), and constructed a
veriﬁable data streaming scheme (VDS) using the CAT, meet-
ing the requirements of integrity veriﬁcation for data stream.
However, in this scheme, the scale of the chameleon authenti-
cation tree has to be determined in advance, which means the
amount of data supported is ﬁxed. Schoder and Simkin (2015)
proposed dynamic chameleon authentication tree (DCAT) to
solve the problem of the scale of the chameleon authentica-
tion tree has to be determined in advance. But, both CAT and
DCAT need require the client to be in possession of the en-
tire data stream, which means they cannot apply to the stream-
ing setting very well. Yu (2015) develop FHMT for streaming
authenticated data structure to achieve the streaming veriﬁable
computation. By leveraging the computing capability of fully
homomorphic encryption, FHMT shifts almost all of the com-
putation tasks to the server, reaching nearly no overhead for the
client. Due to its eﬃciency, FHMT is considered applicable for
the systems with the resource-constrained devices such as sen-
sors, IoT devices, and mobile phones. Unfortunately, FHMT
is static and the scale of the FHMT has to be determined in
advance. Therefore, it cannot be used in dynamic scenarios.
1.2. Contributions
In this paper, we conducted a research on Lightweight
Streaming Authenticated Data Structures, and obtained the
following achievements: we proposed a Dynamic Fully Ho-
momorphic encryption-based Merkle Tree (DFHMT) which
could overcome the shortcomings of the Fully Homomorphic
encryption-based Merkle Tree (FHMT) and designed the key
algorithms for the DFHMT including initialization, data ap-
pending, scale expansion, data query, veriﬁcation and range
query. In our scheme, the scale of the DFHMT does not need
to be determined, and it can be adaptively extended when ap-
pending new data to the tree. Furthermore, we analyzed the se-
curity of the DFHMT, and point out that DFHMT has the same
security with FHMT. We also performed a theoretical analysis
and drew a comparison between the DFHMT, FHMT and Dy-
namic Chameleon Authentication Tree (DCAT). The result in-
dicates that the DFHMT has better performance than FHTM in
all aspects. And in terms of time-consuming of client operation,
DFHMT has advantages for lightweight clients, which means it
is more suitable for Lightweight Streaming Authenticated Data
Structures.
1.3. Organization
The organization of the rest of the paper is as follows: In
section 2, we ﬁrstly give the design idea of our scheme. In sec-
tion 3, we outline some deﬁnitions used in this paper. In sec-
tion 4, we give the construction process of DFHMT, which in-
cludes initialization, data appending, tree extension, query and
veriﬁcation. In section 5 and section 6, we analyze the secu-
rity and the performance of the proposed DFHMT to show its
advantages compared with FHMT and DCAT.
2. Design idea
The DFHMT designed in this paper is based on the improve-
ment of FHMT, and the focus is how to dynamically extend
the scale. Like most Merkle trees, DFHMT is constructed as a
2
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
3
binary tree, with all non-leaf nodes having left and right sub-
trees except leaf nodes. Each node in the DFHMT consists of a
pointer to the left child lchild, a pointer to the right child rchild,
a pointer to the parent parent, and data value. The lchild and
rchild of leaf nodes are empty, value stores the value of the
stream element, these values are arrived in chronological order.
As shown in Fig. 1, the data at time t1 arrives before the data at
time t2. The value of a non-leaf node is calculated based on its
left and right child nodes. In addition, each node also saves the
corresponding weight weight, that is, Fig. 1 W1 1 and W2 2 and
so on. DFHMT also needs to set size and capacity, which rep-
resent the amount of data inserted currently and the maximum
amount of data that can be accommodated respectively, when
size < capacity, can insert data into the tree.
Fig. 1. Clients’ Merkle tree
It is worth noting that the client and server need to main-
tain a Merkle tree —VeriﬁerTree and ProverTree respectively.
As shown in Fig. 1, the value and weight of the node in Veri-
ﬁerTree are both plaintext values. As shown in Fig. 2, the value
and weight of the node in ProverTree are both ciphertext values.
In fact, the client does not need to save the value of each node
in practice, so VeriﬁerTree can be considered as a tree consist-
ing of only weights, the tree stores the information includes the
root node value Nt
1 M of the tree (M represents amount of data
supported by the current tree) and all weights. DFHMT uses
the root of VeriﬁerTree as evidence information basis to ver-
ify the integrity of the data, which is ρ in Fig. 1. ProverTreeof
the server does not need to calculate and store the value of the
root node. The calculation method of the root node of Veri-
ﬁerTreeand the inner nodes of ProverTree is roughly the same
with that of the FHMT, as shown in Fig. 1 and Fig. 2
Fig. 2. Servers’ Merkle tree
Taking into account the amount of streaming data continues
3
to grow, the dept of the tree can not be predetermined in the ini-
tialization phase. Because the Merkle tree once ﬁxed, when the
tree is full, the new data will not be inserted, and re-establishing
the tree needs to import the previous data, which is very time-
consuming and resource-consuming. On the other hand, if the
initial value of the tree depth is set too large, the computation
overhead of initialization, appending, query and veriﬁcation
may be very large. Therefore, this paper improves the FHMT
so that it can dynamically extend the scale of the tree, and then
proposes a dynamic fully homomorphic encryption-based on
Merkle tree (DFHMT) .
Here are two methods to dynamically extend DFHMT. First,
set the threshold τ for the size of tree, when size=capacity and
capacity < τ, DFHMT extends the tree by double expansion,
that is, the number of leaf nodes increases by 1 times after each
expansion; when size=capacity and capacity ≥ τ, DFHMT ex-
tends the tree with a ﬁxed size, and sets the ﬁxed size as µ, After
extension, the number of leaf nodes increases µ.
(1) Double Extension
When the size of DFHMT does not reach the threshold, uses
the method of double extension. Fig. 3 shows three diﬀerent
size of DFHMT. When inserting the ﬁrst data, the depth of the
tree d = 1, at this time can only insert 2d−1 = 1 data. After
extending the size of the tree, the depth of the tree becomes d =
2, the maximum amount of data supported is 2d−1 = 2, at this
time the second data can be inserted at this time. Need to extend
the scale before inserting the third data, so d = 2, the amount