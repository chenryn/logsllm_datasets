replaces
ARM7 ( Amendment
4) with
ARC6
Listing 10. Extract of express_logic_threadx.txt
To better understand the logic of the ﬁrmware, support for these
instruction sets was added to Ghidra. This work was already presented at
SSTIC 2021 [6].
3
Vulnerability Research
3.1
Executing arbitrary code
Talking to the Wi-Fi chip through debugfs The previous parts
focused on static analysis, using ﬁles and source code. When analyzing a
system, it is useful to also have some way to query its state, debug some
code, etc. For Intel’s Wi-Fi chip, iwlwifi and iwlmvm modules expose
many ﬁles in the debug ﬁlesystem. For example, iwlmvm/fw_ver contains
information about the ﬁrmware which was loaded (listing 11).
1
$ DBGFS =/ sys/kernel/debug/ iwlwifi /0000:00:14.3
2
$ cat
$DBGFS/iwlmvm/fw_ver
3
FW
prefix: iwlwifi -9000 -pu -b0 -jf -b0 -
4
FW: release /core43 ::6 f9f215c
5
Device: Intel(R) Wireless -AC 9560
160 MHz
6
Bus: pci
Listing 11. Reading the ﬁrmware version from Linux debugfs
Among these ﬁles, iwlmvm/mem enables reading the memory of the
Wi-Fi chip (listing 12)!
1
$ dd if=$DBGFS/iwlmvm/mem bs=1
count =128 |xxd
2
00000000:
2020
800f 0000
4000
2020
800f 0300
e474
....@.
.....t
3
00000010:
2020
800f 0300
3837
2020
800f 0000
c819
....87
......
4
00000020:
6920
0000
6920
4000
6920
0000
6920
4000
i ..i @.i ..i @.
5
00000030:
2020
800f 4700 14b6 6920
0000
6920
4000
..G...i ..i @.
6
00000040:
6920
0000 4a20
0000 4a21
0000 4a22
0000
i ..J ..J!..J"..
7
00000050: 4a23
0000 4a24
0000 4a25
0000 4a26
0000
J#.. J$..J%..J&..
8
00000060: 4a27
0000 4a20
0010 4a21
0010 4a22
0010
J ’..J ..J!..J"..
N. Iooss, G. Campana
13
9
00000070: 4a23
0010 4a24
0010 4a25
0010 4a26
0010
J#.. J$..J%..J&..
Listing 12. Reading the beginning of the chip memory
The kernel module also implements write operations with iwlmvm/mem
but they do not seem to work. During the study we discovered that some
Wi-Fi chips could be booted in debug mode, where writing to iwlmvm/mem
would work ﬁne. However, we only had access to Wi-Fi chips in production
mode, where writing the memory was forbidden.
The debug ﬁlesystem also provides another way to read the chip
memory with a ﬁle named iwlmvm/sram. This interface provided by this
ﬁle only allows reading data from the chip, not writing to it.
Back
to
the
debug
ﬁlesystem,
another
ﬁle
interested
us,
iwlmvm/prph_reg. The Wi-Fi chip contains many peripheral registers
(sometimes called hardware registers) located at addresses 0x00a*****
and this ﬁle enabled reading them. Such registers would usually contain
state information, but in the case of the studied Wi-Fi chip, they also
included the current Program Counter (pc) of the processors! The address
of these interesting registers are deﬁned in Linux 17 (listing 13). Even
though three pc registers are deﬁned, only the ﬁrst two contain non-zero
values on the studied Wi-Fi chip (listing 14): one for the UMAC processor
and another for the LMAC processor, which this document described
previously (in section 2.2).
1
# define
UREG_UMAC_CURRENT_PC
0xa05c18
2
# define
UREG_LMAC1_CURRENT_PC
0xa05c1c
3
# define
UREG_LMAC2_CURRENT_PC
0xa05c20
Listing 13. Deﬁnitions of program counter registers in Linux
1
$ echo 0 xa05c18
> $DBGFS/iwlmvm/ prph_reg
2
$ cat
$DBGFS/iwlmvm/ prph_reg
3
Reg 0 xa05c18 : (0 xc0084f40 )
4
5
$ echo 0 xa05c1c
> $DBGFS/iwlmvm/ prph_reg
6
$ cat
$DBGFS/iwlmvm/ prph_reg
7
Reg 0 xa05c1c : (0 xb552)
8
9
$ echo 0 xa05c20
> $DBGFS/iwlmvm/ prph_reg
10
$ cat
$DBGFS/iwlmvm/ prph_reg
11
Reg 0 xa05c20 : (0x0)
Listing 14. Reading the values of program counter registers
17 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/iwl-prph.h#L373
14
Ghost in the Wireless, iwlwiﬁ edition
Talking to the Wi-Fi chip through PCIe The previous section
described very useful ﬁles in the Linux debug ﬁlesystem. How are they
actually implemented? More precisely, how is the operating system (Linux)
able to read the memory and the peripheral registers of the Wi-Fi chip? An-
swering these questions is important to understand the security boundaries
and how running arbitrary code on the chip is prevented.
Reading iwlmvm/prph_reg makes the Linux kernel execute the func-
tion iwl_trans_pcie_read_prph.18 A simpliﬁed implementation of this
function is presented in listing 15.
1
//
drivers /net/ wireless /intel/ iwlwifi /iwl -csr.h
2
/*
3
* HBUS (Host -side
Bus)
4
*
5
* HBUS
registers
are
mapped
directly
into
PCI
bus
space , but
are
6
* used
to
indirectly
access
device ’s internal
memory
or
registers
7
* that
may be
powered -down.
8
*/
9
# define
HBUS_BASE
(0 x400)
10
11
/*
12
* Registers
for
accessing
device ’s internal
peripheral
registers
13
* (e.g. SCD , BSM , etc .).
First
write
to
address
register ,
14
* then
read
from
or
write
to
data
register
to
complete
the
job.
15
* Bit
usage
for
address
registers (read
or
write):
16
*
0 -15:
register
address ( offset ) within
device
17
* 24 -25:
(#
bytes
- 1) to
read
or
write (e.g. 3 for
dword)
18
*/
19
# define
HBUS_TARG_PRPH_WADDR
(HBUS_BASE +0 x044)
20
# define
HBUS_TARG_PRPH_RADDR
(HBUS_BASE +0 x048)
21
# define
HBUS_TARG_PRPH_WDAT
(HBUS_BASE +0 x04c)
22
# define
HBUS_TARG_PRPH_RDAT
(HBUS_BASE +0 x050)
23
24
//
drivers /net/ wireless /intel/ iwlwifi /pcie/trans.c
25
u32
iwl_trans_pcie_read_prph (struct
iwl_trans *trans , u32
reg) {
26
// Here , 0 x03000000
means "read
3+1 = 4 bytes"
27
reg = 0 x03000000 | (reg & 0 x000FFFFF );
28
29
//
hw_base
address
mapping
the
MMIO
space
of the
PCIe
endpoint
30
writel(reg , trans -> trans_specific -> hw_base + HBUS_TARG_PRPH_RADDR );
31
return
readl(trans -> trans_specific -> hw_base + HBUS_TARG_PRPH_RDAT );
32
}
Listing 15. Implementation of iwl_trans_pcie_read_prph
In short, iwl_trans_pcie_read_prph writes a normalized register
index to some oﬀset of the MMIO space (line 30 of listing 15) and reads back
a 32-bit value from another oﬀset (line 31). These oﬀsets are documented
as being part of a Host-side Bus interface (HBUS) and the underlying
18 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/pcie/trans.c#L1833
N. Iooss, G. Campana
15
implementation seems to be directly in hardware (it does not involve the
ﬁrmware). This impression is strengthened by the fact that this interface
can be used to read the program counters of the chip processors. Doing so
shows values which change so much that this indicates that neither the
UMAC or the LMAC processor is executing code to process host requests
to read peripheral register values. This interface is described in ﬁgure 4.
iwlwifi
also
deﬁnes
oﬀsets
(macros
HBUS_TARG_MEM_RADDR,
HBUS_TARG_MEM_RDAT, etc.) and functions (iwl_trans_pcie_read_mem
and iwl_trans_pcie_write_mem) to access the chip memory. Of course
these functions cannot be used to write to arbitrary memory locations at
runtime but their use by functions such as iwl_trans_pcie_txq_enable
indicates that some regions of the ﬁrmware are indeed writable from
Linux.
Linux user space
/sys/kernel/debug/.../iwlmvm/prph_reg
Linux kernel
iwlwifi module
Wi-Fi chip PCIe endpoint
MMIO address space:
0x40c...0x41c: HBUS registers to read/write memory
0x444...0x450: HBUS registers to read/write registers
Wi-Fi chip registers
0xa05c18: LMAC pc
0xa05c1c: UMAC pc
Wi-Fi chip memory
(cf. ﬁgure 3)
PCIe bus
Fig. 4. Interaction between Linux debug ﬁlesystem and the Wi-Fi chip