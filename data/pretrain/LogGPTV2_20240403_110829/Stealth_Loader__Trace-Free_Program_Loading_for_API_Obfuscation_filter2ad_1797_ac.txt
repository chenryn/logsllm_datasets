5.1 Resistance
To show the resistance capability of Stealth Loader against existing API de-
obfuscation tools, we prepared test executables and analyzed them with seven
major static and dynamic analysis tools that are primarily used in the prac-
tical malware analysis ﬁeld. These tools are public available and cover various
techniques we mentioned in Subsect. 2.2. Regarding the other techniques which
are not covered by these tools, we qualitatively discuss the resistance capabil-
ity of Stealth Loader against them in Subsect. 7.3 because they are not public
available.
The test executables were prepared by applying Stealth Loader for nine Win-
dows executables, calc.exe, winmine.exe, notepad.exe, cmd.exe, regedt32.exe,
tasklist.exe, taskmgr.exe, xcopy.exe, and ftp.exe. After applying Stealth Loader
for them, we veriﬁed if the executables were runnable without any disruptions
and as functional as they had been before applying Stealth Loader by interact-
ing with running test executables, such as clicking buttons, inputting keystrokes,
writing and reading ﬁles, and connecting to the internet.
For comparison, we prepared tools using diﬀerent API obfuscation tech-
niques, that is, IAT obfuscation, API redirection which is explained in Fig. 1-(c),
and DLL unlinking. Using the tools, we applied these techniques to the same
nine Windows executables. We analyzed them with the same analysis tools and
compared the results.
Stealth Loader: Trace-Free Program Loading for API Obfuscation
229
Static Analysis. In this experiment, we analyzed each test executable with four
major static analysis tools, IDA [7], Scylla [14], impscan (The Volatility Frame-
work [11]), and ldrmodules (The Volatility Framework [11]). IDA is a de-facto
standard dis-assembler for reverse engineering. Scylla is a tool that reconstructs
the destroyed IAT of an obfuscated executable. impscan and ldrmodules are plu-
gins of The Volatility Framework for reconstructing IATs and making a list of
all loaded modules on memory, respectively.
Table 1. Static and dynamic analysis resistance results
API obfuscations Static analysis
Dynamic analysis
(cid:2)
(cid:2)
(cid:2)
N/Aa
N/Aa
IDA Scylla impscan ldrmodules Cuckoo traceapi mapitracer
(cid:2)
Stealth Loader
IAT Obfuscation (cid:2)
API Redirection (cid:2)
DLL Unlinking
(cid:2) indicates that obfuscation technique successfully evaded tool. Stealth Loader evaded
all the tools.
a IAT Obfuscation and API Redirection are a technique for API obfuscation while
ldrmodules is a tool for extracting loaded DLLs.
b When we manually gave the correct original entry point of a test executable to
Scylla, it could identify imported APIs correctly. When we did not, it failed.
(cid:2)
(cid:2)
b
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
We explain how each analysis tool, except for IDA, resolves API. Scylla
acquires the base addresses of loaded DLLs from the EnumProcessModules
API, which internally references PEB and resolves API addresses with Get-
ProcAddress. In addition, it heuristically overcomes API redirection. impscan
also acquires the base addresses from PEB and resolves API addresses from the
export address table (EAT) of each loaded DLL. ldrmodules acquires the base
addresses from VAD.
Procedure. We ﬁrst statically analyzed each test executable using each analysis
tool, and then identiﬁed imported APIs. In the case of ldrmodules, we identi-
ﬁed loaded DLLs. Then, we manually compared the identiﬁed imported APIs
or loaded DLLs with ones we had acquired from the same executables before
applying Stealth Loader.
Result. The left part of Table 1 shows the result of this experiment. Stealth
Loader successfully defeated all static analysis tools, while the others were ana-
lyzed by some of them. This is because there were no hints for the analysis
tools to acquiring the base addresses of loaded DLLs. IAT Obfuscation failed
to defeat Scylla and impscan because these two tools are originally designed
for reconstructing IAT by themselves in the way we explained in Subsect. 2.2.
API redirection failed to evade Scylla because Scylla is designed for heuristically
overcoming API redirection. DLL unlinking failed to evade ldrmodules because
ldrmodules identiﬁed loaded DLLs through VADs, not PEB.
230
Y. Kawakoya et al.
In this experiment, we analyzed each test executable
Dynamic Analysis.
with three dynamic analysis tools, Cuckoo Sandbox [15], traceapi
[8], and
mini apitracer [21]. All of them are designed to monitor API calls. Cuckoo Sand-
box is an open-source, dynamic malware analysis sandbox. traceapi is a sample
tool of Detours, which is a library released from Microsoft Research for hooking
API calls. mini apitracer, shown as mapitracer in Table 1, is a plugin of DECAF
[6], which is a binary analysis framework built on QEMU [2].
Each analysis tool relates API names and memory addresses as follows.
Cuckoo acquires the base address of loaded DLLs from callback functions regis-
tered with the LdrRegisterDllNotiﬁcation API and resolves API addresses with
GetProcAddress. traceapi acquires the base address of loaded DLLs with LoadLi-
brary and resolves API addresses with GetProcAddress. mini apitracer acquires
the base addresses of loaded DLLs from PEB and resolves API addresses by
parsing the EAT of each DLL.
Procedure. We ﬁrst ran each test executable on each dynamic analysis environ-
ment and monitored the API calls. Then, we compared the monitored API calls
with the ones we had collected from the same executable before applying Stealth
Loader.
Result. The right part of Table 1 shows the results of this experiment. Stealth
Loader successfully evaded all dynamic analysis tools, while the others were
captured by some of them. IAT obfuscation totally failed because the dynamic
analysis tools did not depend on IAT at all to identify the locations of APIs.
API redirection successfully defeated all of them. This is because even though
the dynamic analysis tools set hooks on the ﬁrst instruction of each API for
API monitoring, API redirection avoided executing them. As we explained in
Subsect. 2.1, when an API is called API redirection transfers an execution to
the code at a few instructions after the entry of the API. DLL unlinking also
failed because the analysis tools calculated the locations of each API from the
addresses of loaded DLLs and set hooks on each API before DLL unlinking had
hidden DLLs.
5.2 Real Malware Experiment
The purpose of this experiment is to demonstrate that the current Stealth Loader
implementation is practical enough for hiding the major characteristic behaviors
of malware even though it has unsupported APIs.
Procedure. First, we collected 117 pieces of malware from VirusTotal [22] that
were detected by several anti-virus products. At that time, we picked up four ones
(DownloadAdmin, Win32.ZBot, Eorezo, and CheatEngine) from them because
they were not obfuscated at all. We also picked one piece of malware (ICLoader)
from 113 obfuscated ones as a representative case of obfuscated ones. Next,
we applied Stealth Loader to the ﬁve pieces of malware. Then, using Cuckoo
Sandbox, we analyzed both the malware before and after Stealth Loader was
Stealth Loader: Trace-Free Program Loading for API Obfuscation
231
Table 2. Real malware experiment results
without Stealth Loader
with Stealth Loader
Malware Name
Score Signatures Events # of Calls Score Signatures Events # of Calls
DownloadAdmin 3.6
Win32.ZBot
Eorezo
CheatEngine
5.0
5.6
4.8
11
11
15
12
16
46
192
209
9,581
1,350
20,661
126,086
1.8
1.4
0.8
1.6
5
4
3
5
12
10
10
10
224
183
64
120
4.0
11
33
ICLoader
Score is calculated from hit signatures, which are scored depending on severity of each behavior;
score of less than 1.0 is benign, 1.0 - 2.0 is warning, 2.0 - 5.0 is malicious, and higher than 5.0 means
danger. Signatures means number of hit signatures. Events indicates number of captured events. #
of Calls is number of API calls captured by Cuckoo Sandbox.
3,321
1,661
4.0
11
38
applied. Last, we compared the results of the analyses in terms of the malicious
score, the number of detected events, hit signatures, and monitored API calls.
The malicious scores were calculated from observed behaviors matched with
pre-deﬁned malicious behavioral signatures [15].
To achieve the purpose of this experiment, we believe that the variety
of malware’s behaviors is more important than the number of malware. We
also consider that the behaviors of the 4 pieces of malware (DownloadAdmin,
Win32.ZBot, Eorezo, and CheatEngine) can cover the majority of behaviors,
such as modifying a speciﬁc registry key or injecting code into another process,
exhibited in all of the pieces of malware we collected for this experiment. This is
because the signatures hit by analyzing the 4 ones contributed to detecting 637
out of 792 events which were generated by analyzing the 117 pieces of malware.
To ensure that Stealth-Loader-applied malware actually ran and conducted
malicious activities, we conﬁgured Cuckoo Sandbox to write a memory dump ﬁle
after each analysis had been done, and we then manually analyzed it with The
Volatility Framework to conﬁrm the traces which had been seen before applying
Stealth Loader, such as created ﬁles or modiﬁed registries, were actually found.
Result. Table 2 shows the results of this experiment. Regarding DownloadAd-
min, Win32.ZBot, Eorezo, and CheatEngine, Stealth Loader successfully hid
the malicious behaviors and then the scores dropped to warning or benign from
malicious or danger levels.
Regarding ICLoader, the score was the same before and after applying Stealth
Loader because the same behaviors were observed. The reason is that this piece
of malware acquires the base address of kernel32.dll by itself without depending
on Windows APIs. That is, it directly accesses PEB, parses a list in PEB to
ﬁnd an entry of kernel32.dll, and then acquires the base address of kernel32.dll
from the entry. From this base address, the malware acquires the addresses of
LoadLibrary and GetProcAddress of the Windows-loaded kernel32.dll and then
resolves the dependencies of the other APIs by using these two APIs. Since
this malware does not use LoadLibrary or the equivalent APIs of the stealth-
loaded kernel32.dll for dynamic API resolution, Stealth Loader did not have a
232
Y. Kawakoya et al.
chance to obfuscate the calls of dynamically resolved APIs invoked from this
malware. We consider this to not be a limitation because our expected use case
of Stealth Loader is to directly obfuscate compiler-generated executables, not
already-obfuscated executables. This behavior, i.e., acquiring the base address
of kernel32.dll through PEB, is a typical behavior of obfuscated executables.
6 Related Work
In this section, we brieﬂy repeat the API obfuscation techniques which we men-
tioned in Sect. 2 for comparison with Stealth Loader and then explain other
types of API obfuscations related to our research.
IAT obfuscation has the diﬀerent target from Stealth Loader. It disturbs
API name resolution by deleting INT and IAT and disconnecting to them from
PE header, while Stealth Loader focuses on Windows-managed data structures,
such as PEB or VAD. DLL unlinking obfuscates loaded DLLs. Its purpose is
the same as Stealth Loader. However, DLL unlinking focuses on only PEB, not
VAD, while Stealth Loader does on both. API redirection obfuscates the control
ﬂow from API call instructions to recognized API code whereas Stealth Loader
attacks API name resolution. That is, Stealth Loader tries to make API code