26
第2章
表2-1列出了各UNIX系统对于#1行的长度限制（这些都是通过经验法则得知的）。结
果出乎意料：有一半以上的数字都不是二的次方。
表2-1：各系统对行的长度限制
平台
操作系统版本
最大长度
V
Apple Power Mac
Mac Darwin 7.2 (Mac OS 10.3.2)
512
Compaq/DEC Alpha
OSF/14.0
1024
Compag/DEC/HP Alpha
OSF/1 5.1
1000
GNU/Linux 
Red Hat 6, 7, 8, 9; Fedora 1
127
HP PA-RISC and Itanium-2
HP-UX 10, 11
127
IBM RS/6000
AIX 4.2
255
Intel x86
FreeBSD 4.4
64
Intel x86
FreeBSD 4.9, 5.0, 5.1
128
Intel x86
NetBSD 1.6
63
Intel x86
OpenBSD 3.2
63
SGI MIPS
IRIX 6.5
255
Sun SPARC, x86
Solaris 7, 8, 9, 10
1023
注：斯有来构。
POSIX标准对！的行为模式保留来定义（unspecified）状态。此状态是“只要一直保
持POSIX兼容性，这是一个扩展功能”的标准说法：
本书接下来的所有脚本开头都会有#1行。下面是修订过的nusers程序：
S cat susers
显示文件内容
#1 /bin/ah -
神奇的：行
who 1  wc -1
所要执行的命令
选项一表示没有Shell选项，这是基于安全上的考虑，可避免某种程度的欺骗式攻
击(spoofing attack)。
2.5
Shell的基本元素
本节要介绍的是，适用于所有Shell脚本的基本元素。通过以交互的方式使用Shell，你
会慢慢熟悉的。
www.TopSage.com
---
## Page 39
入门
27
2.5.1命令与参数
Shell最基本的工作就是执行命令。以互动的方式来使用Shell很容易了解这一点：每键
入一道命令，Shell就会执行.像这样：
$ cd work 1 1s -1 whizprog.c
--1----
tasaplosto
30252 Jul 9 22:52 whizprog.c
$ make
以上的例子展现了UNIX命令行的原理。首先，格式很简单，以空白（Space键或Tab
键）隔开命令行中各个组成部分。
其次，命令名称是命令行的第一个项目。通常后面会跟着选项（option），任何额外的参
数（argument）都会放在选项之后。如下的语法是不可能出现的：
COH0CAND=CD, ARG=WORK
COH(AND=LISTPILES,MODE=LONG, ARG=MEIZPROG . C
这类语法多半出现在正在设计UNIX时的传统大型系统上，UNIXShell的自由格式语法
在当时是一大革新，大大增强了Shell脚本的可读性。
第三，选项的开头是一个破折号（或减号），后面接着一个字母，选项是可有可无的，有
可能需要加上参数（例如cc-Owhizprogwhizprog.c）。不需要参数的选项可以合
并：例如，ls-1twhizprog.c比ls-1-twhizprog.c更方便（后者当然也可
以，只是得多些录入）。
长选项的使用越来越普遍，特别是标准工具的GNU版本，以及在XWindowSystem
（X11）下使用的程序。例如：
$ ed whizprog-1.1
---o>-d-o-g
长选项的开头是一个破折号还是两个（如上所示），视程序而定。（</tmp/whizprog-
1.1-1.2-patch是一个I/O重定向，它会使得patch从/tmp/whizprog-1.1-1.2-
patch文件而不是从键盘读取输人。I/O重定向也是重要的基本概念之一，本章稍后会
谈到）。
以两个破折号（--）来表示选项结尾的用法，源自SystemV，不过已被纳入POSIX标
准，自此之后命令行上看起来像选项的任何项目，都将一视同仁地当成参数处理（例如，
视为文件名）
最后要说的是，分号（：）可用来分隔同一行里的多条命令，Shell会依次执行这些命令。
www.TopSage.com
---
## Page 40
28
如果你使用的是&符号面不是分号，则Shell将在后台执行其前面的命令这意味着OIm
Shell不用等到该命令完成，就可以继续执行下一个命令。
Shell识别三种基本命令：内建命令、Shell函数以及外部命令：
内建命令就是由Shell本身所执行的命令。有些命令是由于其必要性才内建的，例
如cd用来改变目录，read会将来自用户（或文件）的输入数据传给Shell变量。
另一种内建命令的存在则是为了效率，其中最具型的就是test命令（稍后在6.2.4
节会谈到），编写脚本时会经需用到它。另外还有I/O命令，例如echo与printf。
Shell函数是功能健全的一系列程序代码，以Shell语言写成，它们可以像命令那样
引用。稍后会在6.5节讨论这个部分。此处，我们只需要知道，它们可以引用，就
像一般的命令那样。
外部命令就是由Shell的副本（新的进程）所执行的命令，基本的过程如下：
a建立一个新的进程。此进程即为Shell的一个副本，
b.在新的进程里，在PATH变量内所列出的目录中，寻找特定的命令。/bin：/
usr/bin:/usr/X11R6/bin:/usr/1ocal/bin为PATH变量典型的默认值，当
命令名称含有斜杠（/）符号时，将略过路径查找步骤。
c.在新的进程里，以所找到的新程序取代执行中的Shell程序并执行。
d.程序完成后，最初的Shell会接着从终端读取的下一条命令，或执行脚本里的
下一条命令。如图2-1所示。
以上只是基本程序。当然，Shell可以做的事很多，例如变量与通配字符的展开、命令与
算术的替换等，接下来，本书会一一探讨这些话题。
父hell
等待子域
父shell
子shell
新程序
图2-1：程序执行
2.5.2变量
变量（variable）就是为某个信息片段所起的名字，例如first_name或driver_lic_no
所有程序语言都会有变量，Shell也不例外。每个变量都有一个值（value），这是由你分
www.TopSage.com
---
## Page 41
入门
29
配给变量的内容或信息，在Shell的世界里，变量值可以是（而且通常是）空值，也就
是不含任何字符。这是合理的，也是常见的、好用的特性。空值就是null，本书接下来
的部分将会经常用到这个术语。
Shell变量名称的开头是一个字母或下划线符号，后面可以接着任意长度的字母、数字或
下划线符号，变量名称的字符长度并无限制。Shell变量可用来保存字符申值，所能保存
的字符数同样没有限制。Bourne Shell是少数几个早期的UNIX程序里，遵循不限制（no
arbitrarylimit）设计原则的程序之一。例如：
S myvar=thie_ia_a_long_string_that_does_not_mean_much
分配变量值
thl.8_is_a_1ong_string_that_does_not_mean_much 
S echo Smyvar
打印变量值
变量赋值的方式为：先写变量名称，紧接着=字符，最后是新值，中间完全没有任何空
格。当你想取出Shell变量的值时，需于变量名称前面加上$字符。当所赋予的值内含
空格时，请加上引号：
fullname=*isaac bashevis singer*
firstisaac middle=bashevis last=singer
单行可进行多次赋值
oldname=$fu11nane
值中包含空格时使用引号
此处不需要引号
如上例所示，当变量作为第二个变量的新值时，不需要使用双引号（参见7.7节），但是
使用双引号也没关系。不过，当你将几个变量连接起来时，就需要使用引号了：
fullname=*$first Smiddle $last*
达里需要双引号
2.5.3简单的echo输出
这里要看的是echo命令如何显示myVar变量的值，这是很可能会在命令行里使用到的
情况。echo的任务就是产生输出，可用来提示用户，或是用来产生数据供进一参处理，
原始的echo命令只会将参数打印到标准输出，参数之间以一个空格隔开，并以换行符
号（newline）结尾。
S echo Mow,ls the tine for all good men
S ecbo to cone to the ald of thelr oountry.
Now is the time for all good men
to come to the aid of their country.
不过，随着时间的流逝，有各种版本的echo开发出来。BSD版本的echo看到第一个
参数为-n时，会省略结尾的换行符号，例如（下划线符号表示终端画面的光标）：
S echo -n "Enter your name: *
Enter your namei =
显示提示
键人数据
www.TopSage.com
---
## Page 42
30
第2章
echo
语法
echo [ string ...]
用途
产生Shell脚本的输出。
主要选项
无。
行为模式
echo将各个参数打印到标准输出，参数之间以一个空格隔开，并以换行持号
结束。它会解释每个字将事显的转义序列（escape sequences）。转义序列可
用来表示特珠字持，以及控制其行为模式。
UNIX各版本间互不相同的行为模式使得echo的可移桂性变得很图难，不过
它仍是最局单的一种输出方式。
许多版本都支持-n选项。如果有支持，echo的输出会省略最后的换行符号。
这适合用来打印提示字持事。不过，目败echo将合POSIX标准的版本并术
包含此选项。
SystemV版本的echo会解释参数里特殊的转义序列（稍后会说明）。例如，\c用来指
示echo不要打印最后的换行符号：
S ecbo "Enter your nane: \e*
显示提示
Entex your name1 =
人数据
转义序列可用来表示程序中难以键人或难以看见的字符，echo遇到转义序列时，会打
印相应的字符，有效的转义序列如表2-2所示。
表2-2：echo的转义序列
序列
说明
1a
警示字符，通常是ASCII的BEL字符
\b
退格（Backspace)
1c
输出中忽略最后的换行字符（Newline）。这个参数之后的任何字符，包括接下
来的参数，都会被忽略掉（不打印）
\f
清除屏幕（Formfeed）
\n
换行（Newline）
www.TopSage.com
---
## Page 43
入门
表2-2：echo的转义序列（续）
.com
序列
明
\r
回车（Carriage return)
\t
水平制表符（Horizontal tab）
A\
垂直制表符（Verticaltab）
11
反斜杠字符
PPPO\
将字符表示成1到3位的八进制数值
实际编写Shell脚本的时候，\a序列通常用来引起用户的注意：\Oddd序列最有用的地
方，就是通过送出终端转义序列进行（非常）原始的光标操作，但是不建议这么微。
由于很多系统默认以BSD的行为模式来执行echo，所以本书只会使用它的最简单形式。
比较复杂的输出，我们会使用printf。
2.5.4华丽的printf输出
由于echo有版本上的差异，所以导致UNIX版本间可移植性的头疼问题。在POSIX标
准化的首次讨论中，与会成员无法在如何标准化echo上达到共识，便提出折表方案。
虽然echo是POSIX标准的一部分，但该标准却未说明当第一个参数是-n或有任何参
数包含转义序列的行为模式。取面代之的是，将其行为模式保留为实现时定义
（implementation-defined），也就是说，各厂商必须提供说明文件，描述其echo版本的
做法（注4）。事实上，只要是使用最简单的形式，其echo的可移植性不会有问题。相
对来看，NinthEditionResearchUNIX系统上所采用的printf命令，比echo更灵
活，却也更复杂。
printf命令模仿C程序库（library）里的printf（）库程序（libraryroutine）。它几乎
复制了该函数所有的功能（见printf(3）的在线说明文档），如果你曾使用C、C++、awk、
Perl、Python或Tcl写过程序，对它的基本概念应该不陌生，当然，它在Shell层级的版