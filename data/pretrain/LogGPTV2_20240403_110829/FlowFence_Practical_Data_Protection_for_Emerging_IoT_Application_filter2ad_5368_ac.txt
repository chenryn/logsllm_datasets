The user wants to ensure that camera data does not flow
to the internet.
The consumer app (DoorCon) consists of non-
sensitive code that reads the above opaque handles from
the publishers, and invokes three QMs. QMrecog operates
on both OHT1(d1) and OHT2(d2). When the non-sensitive
code requests execution of QMrecog, FlowFence will al-
locate a clean sandbox, dereference the handles into raw
values, and invoke the module. The sandbox inherits
the taint label T1 ∪ T2. Later on, when QMrecog tries to
declassify its results by invoking the trusted API, Flow-
Fence will read the taint labels (dotted line in Figure 1)—
T1 ∪ T2. That is, FlowFence taint arithmetic defines that
the taint label of the result is the combination of input
data taint labels. In our example, declassifying camera
and door state tainted data to the door lock is permitted,
since the user authorized the flow earlier.
If the consumer app tries to declassify sensitive data d1
by invoking a trusted API using QMmal, the API reads the
taint labels on the handle being declassified, determines
that there is no policy that allows d1 → Internet, and
denies the declassification.
Immutable opaque handles are key to realizing this di-
rected data flow graph. Consider Figure 1. If handles
were mutable, and if QMmal read in some data with taint
label T3, then we would have to assume that OHT1(d1) is
tainted with T3, leading to overtainting. Later on, when
QMrecog executes, its sandbox would inherit the taint la-
bel T3 due to the overtainting. If there was a policy that
prevented T3 from flowing to the door lock, FlowFence
would prevent QMrecog from executing the declassifica-
tion. FlowFence avoids these overtainting issues by hav-
ing immutable handles, which enable better precision
when reasoning about flows. There are other sources
of overtainting related to how a programmer structures
the computation and IoT-specific mechanisms that Flow-
Fence introduces. We discuss their implications and how
to manage them in §4 and §6.
As discussed above, taint flows transitively from data
sources, to opaque handles, to sandboxes, back to opaque
handles, and eventually to sinks via the trusted API,
where FlowFence can enforce security policies. This
design allows taint flow to be observed in a black-box
manner, simply by tracking the inputs and outputs. This
allows QMs to internally use any language, without the
overhead of native taint tracking, only by using sandbox
processes to enforce isolation as described in §4.
FlowFence Security Guarantees. FlowFence uses its
taint arithmetic rules to maintain the invariant that the
taint set of a QM executing in a sandbox at any time rep-
resents the union of the taints of sensitive data used by
the QM through opaque handles or through calls from
another QM. Furthermore, FlowFence avoids propagat-
ing taint on QM returns with the help of opaque han-
dles. Since these handles are opaque outside a QM, non-
sensitive code must pass them into QMs to dereference
them, allowing FlowFence to track taints.
If the non-
sensitive code of a consumer app transmits an opaque
handle to another app via an OS-provided IPC mecha-
nism, FlowFence still tracks that flow since the receiving
app also has to use a QM to make use of the handle.
To prevent flow policy violations, a sandbox must be
designed such that writes from a QM to a sink go through
a trusted API that enforces specified flow policies. We
discuss how we achieve this sandbox design in §4.
USENIX Association  
25th USENIX Security Symposium  537
4 FlowFence Architecture
FlowFence supports executing untrusted IoT apps using
two major components (Figure 2): (1) A series of sand-
boxes that execute untrusted, app-provided QMs in an
isolated environment that prevents unwanted communi-
cation, and (2) A Trusted Service that maintains handles
and the data they represent; converting data to opaque
handles and dereferencing opaque handles back; mediat-
ing data flow between sources, QMs, and sinks, includ-
ing taint propagation and policy enforcement; and cre-
ating, destroying, scheduling, and managing lifetime of
sandboxes.
We discuss the design of these components in the con-
text of an IoT hub with Android OS running on top. We
selected Android because of the availability of source
code. Google’s recently announced IoT-specific OS—
Brillo [29], is also an Android variant.5 Furthermore,
with the introduction of Google Weave [30], we expect
to see Android apps adding IoT capabilities in the future.
Untrusted IoT Apps & QMs. Developers write apps for
FlowFence in Java and can optionally load native code
into QMs. As shown in Figure 2, each app consists of
code that does not use sensitive data inputs, and a set of
QMs that use sensitive data inputs. Although abstractly,
QMs are functions, we designed them as methods oper-
ating on serializable objects. Each method takes some
number of parameters, each of which can either be (1)
raw, serialized data, or (2) opaque handles returned from
previous method calls on this or another QM. A devel-
oper can write a method to return raw data, but returning
raw data would allow leakage. Thus, FlowFence con-
verts that raw data to an opaque handle prior to returning
to the untrusted app.6
Trusted Service & APIs. This service manages all sen-
sitive data flowing to and from QMs that are executing
in sandboxes.
It schedules QMs for execution inside
sandboxes, dereferencing any opaque handle parameters,
and assigning the appropriate taint labels to the sand-
boxes. The Trusted Service also ensures that a sand-
box is correctly tainted whenever a QM reads in sensi-
tive data (Tainter component of Figure 2), as per the taint
arithmetic rules in FlowFence (Table 1). Once it taints a
sandbox, the Trusted Service maintains the current taint
labels securely in its process memory.
FlowFence does not track or update taints for variables
inside a QM. Instead, it treats a QM as a blackbox for the
5Brillo OS is only a limited release at the time of writing. Therefore,
we selected the more mature codebase for design, since core services
are the same on Android and Brillo.
6A QM can theoretically leak sensitive data through side channels
(e.g., by varying the execution time of the method prior to returning).
We assume side channels to be out of scope of our system and thus we
do not address them in our current threat model. If such leaks were to
be a concern, we discuss potential defense strategies in §6.
Consumer
Trusted Service
Sandbox 1
Other codes
Resources
QM 1
QM 2
Opaque Handle
Publisher
Other codes
Publisher
QM
Opaque Handle Table
Handle
Data
…
…
Taint
…
Key-Value Store
Taint
Key
…
…
Value
…
Trusted API
Tainted Data
r
e
t
n
a
T
i
r
e
t
n
a
T
i
r
e
t
n
a
T
i
QM 1
Sandbox 2
QM 2
Sandbox 3
Policy
Publisher QM
Figure 2: FlowFence Architecture. Developers split
apps into Quarantined Modules, that run in sandbox pro-
cesses. Data leaving a sandbox is converted to an opaque
handle tainted with the sandbox taint set.
purpose of taint analysis and it only needs to examine
sensitive inputs being accessed or handles provided to
a method as inputs. We expect QMs to be limited to the
subset of code that actually processes sensitive data, with
non-sensitive code running without change. Although
this does reduce performance overhead and avoids im-
plicit flow leaks by forcing apps to only use controlled
and well-defined data transfer mechanisms, it does re-
quire programmers to properly split their app into least-
privilege QMs, which if done incorrectly, could lead to
overtainting.
When a QM Q running inside a sandbox S returns,
the Trusted Service creates a new opaque handle h cor-
responding to the return data d, and then creates an entry
> in its opaque handle Table (Figure 2),
and returns h to the caller.
The Trusted Service provides APIs for QMs allow-
ing them to access various sinks. Our current proto-
type has well-known APIs for access to network, ZWave
switches, ZWave locks, camera streams, camera pictures,
and location. As an example of bridging FlowFence with
such cyber-physical devices, we built an API for Sam-
sung SmartThings. This API makes remote calls to a
web services SmartThings app that proxies device com-
mands from FlowFence to devices like ZWave locks. The
Trusted API also serves as a policy enforcement point,
and makes decisions whether to allow or deny flows
based on the specific policy set for the consumer app.
We envision a plug-in architecture that enables
community-built and vetted Trusted APIs to integrate
with our framework. The plugin API should ideally be
in a separate address space. The Trusted Service will
send already declassified data to this plugin API via se-
cure IPC. This limits risk by separating the handle table
from external code.
538  25th USENIX Security Symposium 
USENIX Association
Sandboxes. The Trusted Service uses operating sys-
tem support to create sandbox processes that FlowFence
uses to execute QMs. When a QM arrives for execution,
FlowFence reserves a sandbox for exclusive use by that
QM, until execution completes. Once a QM finishes ex-
ecuting, FlowFence sanitizes sandboxes to prevent data
leaks. It does this by destroying and recreating the pro-
cess.
For efficiency reasons, the Trusted Service maintains
a pool of clean spare sandboxes, and will sanitize idle
sandboxes in the background to keep that pool full. In ad-
dition, the Trusted Service can reassign sandboxes with-
out needing to sanitize them, if the starting taint (based
on the input parameters) of the new QM is a superset of
or equal to the ending taint of the previous occupant of
that sandbox. This is true in many common cases, in-
cluding passing the return value of one QM directly into
another QM. In practice, sandbox restarts only happen
on a small minority of calls.
the
the
isolatedProcess flag set, which causes Android
to activate a combination of restrictive user IDs, IPC
limitations, and strict SELinux policies.
These re-
strictions have the net effect of preventing the isolated
process from communicating with the outside world,
except via an IPC interface connected to the Trusted
Service.
sandboxes with
FlowFence
creates
As shown in Figure 2, this IPC interface belongs to the
Trusted API discussed earlier. When the sandboxes com-
municate with the Trusted Service over an IPC interface,
the IPC request is matched to the sandbox it originated
from as well as to the QM that initiated the call. As dis-
cussed, the Trusted Service maintains information about
each sandbox, including its taint labels and running QM,
in a lookup table in its own memory, safely out of reach
of, possibly malicious, QMs.
Debugging. Code outside QMs cannot dereference
opaque handles to inspect corresponding data or excep-
tions, complicating debugging during development. To
alleviate this, FlowFence supports a development time
debugging option that allows code outside a QM to deref-
erence handles and inspect their data and any exception
traces. However, a deployment of FlowFence has this
debugging flag removed. Also, as discussed previously,
use of a opaque handle in exception state as a parameter
to a QM results in the QM returning a new opaque han-
dle that is also in the exception state. Providing a mecha-
nism for exception handling in the called QM without in-
creasing programmer burden is challenging and a work-
in-progress. Currently, we use the idiom of a QM han-
dling all exceptions it can and encoding any error as part
of the returned value. This allows any subsequent QM
that is called with the handle as a parameter to examine
the value and handle the error.
Key-Value Store. This is one of the primary data-
sharing mechanisms in FlowFence between publishers
of tainted sensitive data and consumer apps that use the
data. This design was inspired by our framework study
in §2, and it supports publishers and consumers operating
in a device-agnostic manner, with consumers only having
to know the type of data (taint label) they are interested
in processing. Each app receives its own KV store (Fig-
ure 2) into which it can update the value associated with
a key by storing a 
while executing a QM. For instance, a camera im-
age publisher may create a key such as CAM BITMAP,
with an image byte array as the value, and a taint
label Taint CAMERA to denote the type of published
data (declared in the app manifest). A key is public
information—non-sensitive code outside a QM must cre-
ate a key before it can write a corresponding value. This
ensures that a publisher cannot use creation of keys as
a signaling mechanism. An app on FlowFence can only
write to its own KV store. Taints propagate as usual when
a consumer app keys from the KV store. Finally, the pub-
lishing QM associated with a sensor usually would not
read other sensitive information sources, and thus would
not have any additional taint. In the case this QM has
read other sources of information, then the existing taint
is applied to any published data automatically.
If a QM reads a key’s value, the value’s taint label will
be added to that QM’s sandbox. All key accesses are
pass-by-value, and any subsequent change in a value’s
taint label does not affect the taint labels of QMs that
accessed that value in prior executions. Consider an ex-
ample value V with taint label T1. Assuming a QM Q1
accessed this value, it would inherit the taint. Later on,
if the publisher changes the taint label of V to T1 ∪ T2,
this would not affect the taint label of Q1, until it reads V
again.
The polling design pattern is easy to implement using
a Key-Value Store. A consumer app’s QM can periodi-
cally access the value of a given key until it finds a new
value or a non-null value. Publicly accessible keys sim-
plify making sensitive data available to third-party apps,
subject to flow policies.
Event Channels. This is the second data-sharing mecha-
nism in FlowFence; it supports the design pattern of reg-
istering callbacks for IoT device state changes (e.g., new
data being available). The channel mechanism supports
all primitive and serializable data types. An app creates
channels statically by declaring them in a manifest file
at development time (non-sensitive code outside QMs
could also create it), making it the owner for all declared
channels. Once an app is installed, its channels are avail-
able for use—there are no operations to explicitly open
or close channels. Other app’s QMs can then register
to such channels for updates. When a channel-owner’s
USENIX Association  
25th USENIX Security Symposium  539
QM puts data on the channel, FlowFence invokes all reg-
istered QMs with that data as a parameter. FlowFence
automatically assigns the current set of taint labels of the
channel-owner to any data it puts on the channel, so that
all QMs that receive the callback will be automatically
tainted correctly. If a QM is executed as a callback for
a channel update, it does not return any data to the non-
sensitive code of the app.
Although the publishers and consumers can share
opaque handles using OS-provided sharing mechanisms,
we designed the Key-Value store, and Event channels ex-
plicitly so that publishers and consumers can operate in
a device-agnostic manner by specifying the types of data
they are interested in, ignoring lower level details.
As described here, both inter-app communication
mechanisms, the KV store and event channels, can po-
tentially lead to poison-pill attacks [37] where a compro-
mised or malicious publisher adds arbitrary taint labels,
with the goal of overtainting consumers and preventing
them from writing to sinks. See the discussion of over-
tainting in §6 for a defense strategy.
FlowFence Policies and User Experience. In our proto-
type, users install the app binary package with associated
policies. FlowFence prompts users to approve consumer
flow policies that are not covered by publisher policies at
install time. This install-time prompting behavior is sim-
ilar to the existing Android model. FlowFence models its
flow request UI after the existing Android runtime per-
mission request screens, in an effort to remain close to
existing permission-granting paradigms and to leverage