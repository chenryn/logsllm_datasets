order. This in turn affects the electrical load on the power
supply components [29] that provide power to the monitor’s
digital board [16], causing them (as in [22]) to vibrate and
emit sound. Unfortunately, the precise propagation of signal
along this causal chain is difﬁcult to precisely characterize:
power signal modulation have a complex dependence on
circuit topology, layout and environment; inadvertent power-
to-acoustic transduction varies greatly with circuits electrical
and mechanical characteristics; the different channels involve
different means of acquisition and have different bandwidth
and SNR constraints, necessitating different signal processing;
and the choice of acoustic sensors and their placement creates
2In an attempt to mitigate these, we also tried to lift major components
away from the board and connect them by extension wires; but this changed
the circuits behavior and resulting signal, and did not yield conclusive results.
Fig. II.1:
Setup used for signal characterization. In this
photograph, (A) is a Soyo DYLM2086 target screen, (B) is
a Brüel & Kjaer 4190 microphone, connected to a Brüel &
Kjaer 2669 preampliﬁer, (C) is a Brüel & Kjaer 2610 ampliﬁer,
(D) is a Creative E-MU 0404 USB sound card with a 192 kHz
sample rate (E) is a laptop performing the attack.
B. Exploring the leakage signal
Distinguishing various images. We begin our analysis of
acoustic leakage emitted from LCD computer monitors by
attempting to distinguish simple repetitive images displayed
on the target monitor. For this purpose, we created a simple
program that displays patterns of alternating horizontal black
and white stripes of equal thickness (in pixels), which we shall
refer to as Zebras. The period of a Zebra is the distance,
in pixels, between two adjacent black stripes. Finally, we
recorded the sound emitted by a Soyo DYLM2086 screen
while displaying different such Zebras. See Figure II.1 for a
picture of our recording setup.
As can be seen from Figure II.2–b, the alternating the
displayed Zebras causes clear changes in the monitor’s acoustic
signature. See Figure II.3 for additional examples of monitors
that displayed particular clear signals. Beyond those presented
in ﬁgures throughout the paper, we experimented with dozens
of other monitors, including both old and newer-generation
monitors of various sizes, and observed similar effects. We
conclude that the leakage has existed in screens manufactured
and sold for at least the past 16 years, old and new models
alike, including LED and CCFL-based screens.
Acoustic or EM? To verify that the obtained signal indeed
results from an acoustic signal emanating from LCD monitors,
as opposed to electromagnetic radiation accidentally picked
up by the microphone, we placed a sheet of non-conductive
sound-absorbing material (e.g., thick cloth or foam) in front
of the microphone. Figure II.2–a is analogous to Figure II.2–
b using the same setup, but with the microphone physically
blocked with a thick piece of cloth. As can be seen in the
ﬁgure, the resulting signal is severely attenuated, thus proving
that the signals observed here are indeed acoustic. Additional
evidence is that as microphone-to-screen distance increases,
the induced signal delay matches the speed of sound rather
than the speed of light (see Appendix D).1
1 Conversely, with some of the microphones used in the self-measurements
experiments of Section III-C, the observed signal appears to have both acoustic
and electromagnetic contributions (judging by the above methodology). This
is, presumably, due to poor shielding and grounding on those cheap micro-
phones. However, in the self-measurement setting, the precise physical channel
through which the emanation propagates is inconsequential.
855
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:34 UTC from IEEE Xplore.  Restrictions apply. 
(a) Samsung 920NW
(b) HP ZR30w
(c) Dell U3011t
(d) Philips 170S4
Fig. II.3: Acoustic emanations of various target screens while displaying Zebra patterns of different periods, recorded using our
setup from Section II-A. The horizontal axis is frequency (0-43kHz) and vertical axis is time (10 seconds).
at the center of the image (to induce clearly-observable times
when the sine waves disappears and reappears).
As can be seen in Figure II.5–b, displaying the Punc-
tured Sinusoidal Zebra causes a strong leakage at the Ze-
bra’s “natural” frequency of 1050/21 · 60 = 3000Hz on
the resulting spectrogram. Next, plotting the acoustic signal
in the time domain (after applying a band-pass ﬁlter at 3-
4kHz) has resulted in a 3 kHz signal (matching the Zebra’s
frequency), where the amplitude of the middle third of the
signal is considerably lower compared to the ﬁrst and last
third (see Figure II.5–c). Experimenting with different sizes
for the solid black area, the lower-amplitude area increases and
decreases correspondingly. We conclude that the momentary
amplitude of the acoustic leakage signal is a rather accurate
approximation of the brightness level of the individual pixel
rows of the target monitor.
D. Analyzing amplitude modulated signals
Observing the spectrogram in Figure II.2–b, we notice that
in addition to signal changes in the 0 − 22 kHz range which
correspond to different Zebra patters, there are also changes at
the 27 − 37 kHz range which are again correlated to different
Zebra patters. Analyzing the latter range, we notice that the
signal takes form of two distinct side lobes that mirror a central
32 kHz carrier and that increasing the period of the Zebra
image being displayed leads to the carrier’s side lobes coming
closer together. This signal behavior at the 27 − 37 kHz range
is highly indicative of a different type of leakage (compared
to the 0 − 22 kHz range) where an amplitude modulated
signal being transmitted on a central carrier. Investigating this
hypothesis, in Figure II.5–d we plot in the time domain the
signal obtained after applying a 27.5-38 kHz bandpass ﬁlter
around the carrier and its two side lobes. As can be seen, there
is a clear correlation between the color of the displayed pixel
row and the amplitude of the 32 kHz carrier (blue), where dark
rows corresponding to high signal amplitudes. Recovering the
envelope signal (red line in Figure II.5–d) using the Hilbert
transform method [24] results in a direct leakage of the color
of the displayed pixel row.
Leveraging the modulated signal. As the modulated signal
is present on a carrier frequency that is much higher than the
frequency of most naturally occurring acoustic signals (e.g.,
human speech), it can be leveraged to extract a relatively clean
version of the screen’s image. We now proceed to describe our
method for performing acoustic image extraction.
Because the screen refreshes approximately 60 times a
second, the output trace produced by our extraction process
is a 192 kHz-sampled time series vector in the duration of one
refresh cycle (1/60 s). Ostensibly, we simply need to sample
Fig. II.4: Internal components of a ViewSonic VA903b moni-
tor. (A) is the LCD panel, (B) is the screen’s digital logic and
image rendering board and, (C) is the screen’s power supply
board. The green circle marks the approximate source of the
acoustic signal. On the right is the acoustic Zebra leakage
(similarly to Figure II.3) from the disassembled screen.
additional considerations that cannot be separated from the
transduction’s physical nature. We thus focus on the aggre-
gate bottom-line effect and its exploitability in the practical
scenarios (e.g., webcams and phones).
Analyzing the leakage frequency. Having veriﬁed that
different images produce different acoustic leakage, we now
turn our attention to the connection between the displayed
image and the produced leakage signal. Indeed, assume that
the rendering of individual pixels produce sounds that depend
on the individual pixel’s color (e.g., black or white). Because
the entire screen is redrawn approximately r = 60 times
per second, we expect that spatial-periodic changes in the
displayed pixels will introduce a strong frequency component
corresponding to the frequency of transitions between render-
ing black and white pixels.
More speciﬁcally, a Zebra with a 16-pixel period drawn
on a screen with a vertical resolution of 1050 pixels produces
1050/16 = 65.625 color changes per screen redraw. Account-
ing for approximately 60 redraws per second, the acoustic
leakage is expected to have a strong 65.625 · 60 = 3937.5
Hz frequency component; which is clearly observable in Fig-
ure II.2–b (marked by a yellow arrow).
C. Signal analysis in the time domain
Following our hypothesis that the intensity of pixel lines
is directly manifested in the leakage signal, we monitored the
leakage of a Soyo DYLM2086 screen (see Figure II.5) while
displaying the Punctured Sinusoidal Zebra image shown in
Figure II.5–a. This is a Zebra pattern with a 21-pixel period,
modiﬁed in two ways. First, the intensity change between
stripes is smoothed, following a sinusoidal pattern of the given
period (to minimize harmonic distortions). Second, we “punc-
tured” it by placing a full-width third-height black rectangle
856
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:34 UTC from IEEE Xplore.  Restrictions apply. 
(a) Punctured Sinusoidal Zebra image with period 21
(b) Spectrogram (0-43 kHz, 800 ms) of the resulting acoustic
signal. Notice the strong acoustic signal present at 3 kHz.
(c) A segment of the acoustic signal after applying a 3-4 kHz
bandpass ﬁlter. Notice the clear correlation between the amplitidue
of the red signal and the brightness of pixel lines.
(d) Blue: The acoustic signal after applying a 27.5-38 kHz bandpass
ﬁlter around the screen’s carrier. Red: amplitude demodulation
of the blue signal. Notice the inverse correlation between the
amplitude of the red signal and the brightness of pixel lines.
Fig. II.5: Analyzing the acoustic leakage of a Soyo DYLM2086 screen. Recording captured using our setup from Section II-A.
Figures II.5–c and II.5–d are time-synchronized using the vsync probe.
the demodulated signal for one refresh cycle. However, as the
leakage signal is not completely noise free, we leverage the fact
that the entire image is redrawn 60 times per second (thus pro-
ducing a fresh sample of the leakage signal corresponding to
the image at each redraw) to reduce noise by averaging. More
speciﬁcally, after recording the screen’s acoustic emanations
for a few seconds, we bandpass ﬁlter the obtained recording
around the carrier signal (allowing only the frequencies 27.5–
38) and AM-demodulate it by subtracting the trace’s average,
computing the analytic signal using a Hilbert transform [24],
and taking its absolute value. We then divide the signal into
chunks of samples where each such chunk contains the acoustic
leakage produced during a single screen refresh cycle. Finally,
we perform sample-wise averaging of the chunks.
For traces acquired while the vsync probe is attached
(see Section II-A), we can easily apply this approach: after
demodulating, we chop the signal into chunks according to
probe’s signal, so they correspond exactly with refresh periods,
and average. Figure II.6 illustrates this.
Modulated signal quality. We observe that while individual
chunks exhibit some noise-related variations, they do tightly
follow a similar content-dependent pattern, with an average
Pearson correlation coefﬁcient of 0.957 between a chunk and
the average of all chunks. We used this correlation test to
perform a systematic investigation of the effect of distance
on the leakage signal (see Appendix D). We found that by
this metric, the content-dependent leakage is observable when
recording at a distance of up to 3 meters (by a bare microphone
Fig. II.6: One-period modulated signal chunks (in color) and
their average (in black), of the “black-hole” screen trace (see
Figure II.5–a).
without a parabolic dish).
1) Chunking challenges: The vsync probe we use above
is not available to the attacker, who must nevertheless divide
the signal accurately into chunks whose phase within a refresh
period is almost identical. Next, we discuss the challenges in
this, and our approach in addressing them.
Challenge 1: drift. Unfortunately, using exactly 60 Hz is
usually erroneous by up to 0.2 Hz. The refresh rate used has to
be extremely accurate: in our sample rate (192 kHz) and around
a 60 Hz refresh rate, an error of about 0.002 Hz would cause
a drift of one sample per ten chunks. Even such a small error
would introduce destructive interference in averaging hundreds
of chunks. The attacker thus has to very accurately measure the
refresh rate. Empirically, even for the exact same conﬁguration,
857
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:47:34 UTC from IEEE Xplore.  Restrictions apply. 
the refresh rate has slight changes of up to 0.02 kHz.
Challenge 2: jitter. Using the vsync probe (see Section II-A),
we examined refresh cycles. We observed signal jitter that
caused destructive interference even when averaging with the
accurate refresh rate. The jitter creates timing abnormalities
that are not averaged out over a few seconds. For our Soyo
monitor, every few dozen refreshes, there is an abnormal cycle,
whose duration is abnormal. The abnormalities are erratic:
cycles can be either down to 10% shorter than 1/60 s long, or
as long as 1/30 s. Even with the accurate average refresh rate,
drift still occurs: the average refresh rate is actually far from
the refresh rate for non-abnormal refresh cycles. Effectively,
every few hundred cycles, the refresh period gets phase-shifted
by some unknown value.
Naive solution: correlation. A natural approach is ﬁrst
approximating or measuring the refresh rate, segmenting the
trace into chunks corresponding to refresh cycle duration, and
use correlation with one arbitrarily chosen “master” chunk
to phase-align the traces, i.e., trace phases are aligned such
that correlation is the highest. Then, outlier rejection can be
performed to mitigate jitter and drift in still-misaligned chunks.
We found the variants of this approach to underperform
even when the refresh rate used is extremely accurate (see
Appendix A2). Presumably, this is because they all allow for
very lenient alignment of the chunks to the master chunk, i.e.,
all chunks are rotated so that they correlate best with the master
chunk, which contains a noisy version of the signal of interest.
Averaging is thus likely to increase the noise in the master
chunk. Another problem is arbitrarily setting the master chunk,
which can produce an abnormally noisy chunk. The approach
is also prohibitively slow.
W and
2) Our denoising approach: We need a chunking algorithm
that is robust to jitter and small drift, i.e., every chunk should
correspond to a refresh cycle at a speciﬁc phase (identical for
all chunks). Denote the sample rate fs. We empirically observe
that, except for abnormal cycles, refresh times are relatively
stable in the following sense: for each of our recordings there
exists an integer W ≈ fs
r such that cycles are either W or
W + 1 samples long, implying that the actual refresh cycle
is between fs
fs
W +1. Moreover, W is always one of
two possible consecutive numbers: S, S − 1. Non-abnormal
cycle sizes are therefore always in S − 1, S, S + 1. Another
empirical observation is that Pearson correlation values can
be used to heuristically distinguish between pairs of chunks
with the same cycle phase and ones with different phases:
same-phase chunks are typically above some threshold value,
whereas different-phase chunks are typically below it (espe-
cially if the phase difference is more than a few samples). Our
chunking algorithm is parametrized by S, by a small integer
d, and a “correlation threshold”, a real number T .
High-level overview.
The algorithm starts from the ﬁrst
sample in the signal, and iteratively ﬁnds the next chunk start
location using Pearson correlation with a reference chunk,
assuming that each chunk size is in G = {S − d, ..., S + d}.
The range d is very small: in our experiments it is usually
1, and never more than 3. This is designed to make small
adaptive changes in chunk sizes to account for the minor drift
introduced by the refresh-rate approximation and, sometimes,