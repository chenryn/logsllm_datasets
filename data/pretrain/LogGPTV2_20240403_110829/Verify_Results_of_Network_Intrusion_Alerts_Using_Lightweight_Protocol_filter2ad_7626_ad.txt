### Optimized Text

#### FTP and IIS Web Server Attacks
The FTP server responded in accordance with the FTP protocol, leading to the conclusion that the attacks had failed, and thus, the alerts were suppressed. Additionally, the IIS web server on the Windows NT 4.0 system was found to have directory traversal vulnerabilities. Exploiting these vulnerabilities could allow an attacker to access the command prompt program `cmd.exe` and execute arbitrary programs. However, this required careful encoding of the attack string. We observed a total of 11,741 such attacks, of which 2,046 successfully accessed `cmd.exe` and were reported under our new rule sets. The remaining attacks failed, and their alerts were suppressed. Overall, our approach effectively distinguished between successful and unsuccessful attacks, significantly reducing the number of reported alerts.

#### Performance Evaluation
To evaluate the performance of our off-line experiments, we executed Snort on Tcpdump data for the Windows NT 4.0 server. First, we extracted TCP connections related to the FTP, HTTP, and POP3 protocols from the Tcpdump data, resulting in 168MB of data. We then ran Snort twice: once with the original rule sets and once with the new rule sets. Each run was repeated ten times. We also conducted the experiments using the full 2,770MB of Tcpdump data. The CPU-seconds in user mode are shown in Table 2. The results indicate that, when focusing on the monitored protocols, the new rule sets increased execution time by 35.24%. However, when averaged over the entire background traffic, the slowdown reduced to 20.33%.

Given that the percentage of malicious network traffic in a honeynet is higher than in a typical network environment, the average slowdown is expected to be lower in a normal setting. We are currently investigating the primary causes of the slowdown and exploring methods to improve performance, which will be part of our future work.

#### Discussions
Our proposed approach is particularly useful for verifying alerts generated by misuse detectors. While misuse IDSs can accurately detect attacks, they do not determine the outcome. Anomaly detectors, on the other hand, often struggle with accurate detection and require manual analysis for verification. Specification-based detectors, which use protocol specifications to detect attacks, theoretically always report intrusions if a specification violation is detected, assuming the specification is correct. Thus, there is no need to verify alerts from specification-based detectors.

Our approach is similar to specification-based detectors but uses protocol specifications to determine the results of attacks that violate the specifications. We also demonstrate that it is possible to verify attack results even if their outputs comply with the protocol specifications.

Anomaly detection techniques can enhance our approach. For example, to reduce overhead, misuse NIDSes often retain data from suspicious network sessions for only a short period. If an intrusion triggers an erroneous response after the session's lifetime, it can bypass detection. In such cases, anomaly detection can profile normal session lifetimes, flagging sessions with longer response times as potential intrusions.

Another approach is to apply vulnerability and system profiles for verification. Comparing our method to profile-based verification, we find that the fundamental ideas are similar, suggesting that both approaches could perform comparably. This is supported by successful experiments on the RedHat Linux system.

The limited data collected in our approach can affect verification precision. If an attack does not produce an erroneous response and the protocol status code does not provide clear evidence of an intrusion, our approach may generate incorrect results. This occurred in our experiment to verify the IIS view source via translate header attack on the RedHat Linux system. To address this, more data in the response can be analyzed. For instance, a successful IIS attack aiming to execute a command shell might produce banner information like "Volume Serial Number" in the server response, which can be used for verification. Although inspecting more data increases IDS overhead, if limited to specific signatures, the overhead could be acceptable.

Verification errors can be of two types: (1) false positives, where failed attacks are reported as successful, and (2) false negatives, where successful attacks are reported as failed. Our strategy is to minimize false positives and avoid false negatives. Therefore, we conservatively chose the set of status codes for alert verification. Experiments show that our conservative approach correctly identifies most failed attacks with few false positives. While we have not observed false negatives in our experiments, a buffer overflow attack that corrupts non-control data in a server process could be a potential source of false negatives. This is a challenge for other verification approaches as well.

Our approach does not address reconnaissance or probe activities that gather information about computer systems and network services. For example, an attacker might try to access a potentially vulnerable CGI program on a web server. The server's response ("404 Not Found" or "403 Forbidden") can inform the attacker about the program's existence, making the probe successful from the attacker's perspective. From the viewpoint of alert verification, the probe has failed, but our method behaves correctly in this context.

#### Conclusion and Future Work
In this paper, we presented an approach to verify the results of intrusion attempts using lightweight protocol analysis. Our method analyzes and tracks network application responses to intrusion attempts, using header information to verify the outcomes. This approach does not require collecting vulnerability information, relying on host-based intrusion detection, or performing complete protocol analysis. We modified Snort signatures and evaluated our method using real-world data. Our off-line experiments demonstrated that the approach effectively verifies the results of intrusion attempts against network application servers, improving the quality of alerts reported by NIDSes. The method is simple and easy to apply.

Future work includes enhancing the performance of our approach and evaluating its performance for online verification. We have identified several potential performance issues that need in-depth study. The current implementation is limited to simple network connections due to Snort's lack of a powerful semantic model. We plan to use Bro and NetSTAT to evaluate the efficacy of our approach on more complex network activities, such as HTTP sessions. Combining anomaly detection techniques, as discussed, will also be part of our future work.

#### Acknowledgments
This research is supported by a grant from Promia Inc. to the University of California at Davis. We thank the anonymous reviewers for their valuable comments, and Bhume Bhumiratana, Senthilkumar G. Cheetancheri, Ebrima Ceesay, and Patrick Wheeler for their proof-reading.

#### References
[References remain unchanged]