ftp server responded as the FTP protocol dictates. The at-
tacks were considered to have failed, and the alerts were
suppressed. Finally, the IIS web server on the Windows NT
4.0 server suffered from some directory transversal vulner-
abilities. An attack utilizing them can access the command
prompt program “cmd.exe” and execute arbitrary programs.
But it required careful encoding of the attack string. We ob-
served 11,741 such attacks. Among them, 2,046 have suc-
cessfully accessed the “cmd.exe” and were reported under
our new rule sets. The others have failed and the alerts were
suppressed. Overall, our approach was able to effectively
distinguish successful and unsuccessful attacks, and signif-
icantly reduce the number of reported alerts.
We measured the off-line experiments performance by
executing Snort on the Tcpdump data for the Windows NT
4.0 server. We ﬁrst extracted the TCP connections related
to the FTP, HTTP, and POP3 protocols from the Tcpdump
data, obtaining 168MB of Tcpdump data. We then ran Snort
twice on the new data. The ﬁrst run used the original Snort
rule sets and the second used the new rule sets. We re-
peated each run over the data for ten times. We also repeated
the experiments using the original 2,770MB Tcpdump data.
The time of CPU-seconds in user mode is shown in Ta-
ble 2 7. It shows that if we focus on the protocols we were
monitoring, the new rule sets slow down execution time by
35.24%, which looks high. But if we average it into back-
ground trafﬁc, the total slow down is reduced to 20.33%.
Since the percentage of malicious network trafﬁc in the hon-
eynet is much higher than that of a normal network environ-
ment, the average slow-down is expected to be lower in a
normal network environment. We are investigating the ma-
jor cause of slow-down and are exploring the methods to
improve the performance. This will be our future work.
7We eliminate the CPU-seconds in system mode in order to avoid cal-
culating time spent on ﬁle I/O. In fact, using total execution time, the slow
down is about 27% for new data and 0.3% for original data, which is obvi-
ously wrong because of time spent on ﬁle I/O.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
6. Discussions
The approach we propose is particularly useful for veri-
fying alerts reported by misuse detectors. Our assumption is
that a misuse IDS is able to precisely detect attacks but does
not know the results. Anomaly detectors usually are unable
to detect attacks accurately. To verify alerts by anomaly de-
tectors is difﬁcult and often requires manual analysis. On
the other hand, if a speciﬁcation-based detector detected
an attack, theoretically it is always an intrusion because a
violation of speciﬁcation has been detected, assuming the
speciﬁcation is correct. There is no need to verify the alerts
reported by speciﬁcation-based detectors.
Our approach is similar to speciﬁcation-based detectors.
These detectors use protocol speciﬁcations to detect attacks.
Our method uses protocol speciﬁcations to determine the at-
tack results if the network trafﬁc violates the speciﬁcations.
Moreover, we also demonstrate that it is possible to verify
attack results even if their outputs satisfy the protocol spec-
iﬁcations.
We believe that anomaly detection techniques can help
improve our approach. For example, to reduce the over-
head, misuse NIDSes often keep the data of some suspi-
cious network sessions in its memory for only a short period
of time [9]. If an intrusion can trigger a server to produce an
erroneous response after a period of time that is longer than
the life time of the session, it is possible to bypass the detec-
tion. In this case, we can use anomaly detection techniques
to proﬁle normal lifetime of the sessions. Each suspicious
session that has a longer response time than the normal life-
time of the sessions is ﬂagged as a possible intrusion.
Another popular approach is to apply vulnerability and
system proﬁle in veriﬁcation. In fact, by comparing our ap-
proach to the proﬁle based veriﬁcation approach, we realize
that the fundamental ideas of two approaches are similar.
This suggests that the two approaches could perform as well
as, or at least close to, each other. This is demonstrated by
the successful experiments on the RedHat Linux system.
The limited data collected in our approach limits the pre-
cision of veriﬁcation. That is, if an attack does not produce
an erroneous response, and the protocol status code in the
response to the attack does not provide compelling evidence
of an intrusion, our approach can generate incorrect veriﬁ-
cation results. This happened in our experiment to verify
the IIS view source via translate header attack against the
RedHat Linux system. In order to correctly verify the at-
tack results, further information is needed. A solution is
to analyze more data in the response. For example, a suc-
cessful IIS attack aiming to execute the command shell can
produce banner information like “Volume Serial Number”
in a server response. This can be used to verify the attack
result. Though inspecting more data in the response will in-
crease the overhead of IDSes, if it is only used for a limited
number of signatures, the overhead could be acceptable.
There could be two types of errors in veriﬁcation: (1)
failed attacks are reported as successful ones; (2) success-
ful attacks are regarded as failed ones. Our strategy is to
minimize the ﬁrst type of errors and to avoid the second
type. Thus, we were conservative in choosing the set of sta-
tus codes in alert veriﬁcation as discussed in Sect. 4.2. The
experiments show that our conservative approach can cor-
rectly and effectively identify a majority of failed attacks
with few errors of the ﬁrst type. Though we have not ob-
served a case of the second type of errors in the experi-
ments, there exists a possible source of it in our approach: a
buffer overﬂow attack can corrupt the non-control data of a
server process [5]. It violates security policy, but the server
response still obeys the protocol speciﬁcation. It can be a
problem for other veriﬁcation approaches as well.
Our approach does not deal with reconnaissance/probe
activities that collect information about computer systems
and network services. For example, an attacker can try
to access a potentially vulnerable CGI program on a web
server. The server either responds “404 Not Found” if the
CGI program does not exist, or “403 Forbidden” if the CGI
program exists but the access is denied. Thus, the attacker is
able to tell the existence of the CGI program on the server,
and takes further actions based on this information. From
the view of the attacker, regardless of the server response,
the probe has successfully gathered the information. From
the view of alert veriﬁcation, the probe has failed. But for
the purpose of our approach, our methods behave correctly.
7. Conclusion and Future Work
In this paper, we have presented an approach to verify
the results of intrusion attempts using lightweight protocol
analysis. The approach analyzes and tracks network appli-
cation responses to the intrusion attempts, and uses header
information in the responses to verify the result of the at-
tempts. Thus, our method does not need to collect vulner-
ability information, rely on host-based intrusion detection,
or perform a complete protocol analysis. We have modiﬁed
Snort signatures and evaluated our method by the real-world
data collected at our site. Our off-line experiments showed
that the approach can effectively verify the results of intru-
sion attempts against network application servers, thus im-
proving the quality of alerts reported by the NIDSes. We
demonstrated that the method is simple and easy to apply.
Our future work includes improving the performance of
our approach, and evaluating the performance for on-line
veriﬁcation. We have identiﬁed several potential perfor-
mance issues that impact our approach, and they need an
in-depth study. The current implementation is limited to
simple network connections because Snort lacks a power-
ful semantic model. We plan to use Bro and NetSTAT to
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
evaluate the efﬁcacy of this approach on more sophisticated
network activities, like HTTP sessions. Our approach can
be further improved by combining anomaly detection tech-
niques as we have discussed. This also remains our future
work.
8. Acknowledgments
This research is supported by a grant from Promia Inc. to
the University of California at Davis. We thank the anony-
mous reviewers for their valuable comments to improve the
paper. We thank Bhume Bhumiratana, Senthilkumar G.
Cheetancheri, Ebrima Ceesay, and Patrick Wheeler for their
proof-reading.
References
[1] M. Almgren, H. Debar, and M. Dacier. A lightweight tool
for detecting web server attacks. In Proceedings of Network
and Distributed Systems Security (NDSS 2000) Symposium,
pages 157–170, 2000.
[2] J. P. Anderson. Computer security threat monitoring and
surveillance. James P. Anderson Co., 1980.
[3] M. Bishop. Computer Security: Art and Science. Addison
Wesley Professional, 2002.
[4] CERT.
Incident Note IN-2001-09 Code Red II: Another
worm exploiting buffer overﬂow in IIS indexing service dll,
2001.
[5] S. Chen, J. Xu, and E. C. Sezer. Non-control-data attacks are
In Proceedings of 14th USENIX Security
realistic threats.
Symposium, August 2005.
[6] F. Cuppens and A. Mi`ege. Alert correlation in a cooperative
intrusion detection framework. In Proceedings of the 2002
IEEE Symposium on Security and Privacy, pages 202–, May
2002.
[7] H. Debar and A. Wespi. Aggregation and correlation of
In Proceedings of Recent Ad-
intrusion-detection alerts.
vances in Intrusion Detection (RAID), October 2001.
[8] D. E. Denning. An intrusion detection model. IEEE Trans-
action of Software Engineering, 13(2):222–232, 1987.
[9] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer. Oper-
ational experiences with high-volume network intrusion de-
tection. In Proceedings of 11th ACM Conference on Com-
puter and Communications Security, October 2004.
[10] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masin-
ter, P. Leach, and T. Berners-Lee. Hypertext transfer pro-
tocol – HTTP/1.1. ftp://ftp.rfc-editor.org/
in-notes/rfc2616.txt, 1999.
[11] R. Gula. Correlating ids alerts with vulnerability informa-
tion. Technical report, Tenable Network Security, December
2002.
[12] H. S. Javitz and A. Valdes. The NIDES statistical component
description and justiﬁcation. Technical report, SRI Interna-
tional, March 1994.
[13] C. Ko, P. Brutch, J. Rowe, G. Tsafnat, and K. Levitt. System
health and intrusion monitoring using a hierarchy of con-
straints. In Proceedings of the 4th International Symposium
on Recent Advances in Intrusion Detection, pages 190–203,
2001.
[14] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna.
Automating mimicry attacks using static binary analysis. In
Proceedings of 14th USENIX Security Symposium, August
2005.
[15] C. Kruegel and W. Robertson. Alert veriﬁcation: Deter-
In Proceedings
mining the success of intrusion attempts.
of the 1st Workshop on Detection of Intrusions and Malware
& Vulnerability Assessment (DIMVA), July 2004.
[16] R. P. Lippmann, S. E. Webster, and D. Stetson. The effect
of identifying vulnerabilities and patching software on the
utility of network intrusion detection. In Proceedings of 5th
International Symposium of Recent Advances in Intrusion
Detection (RAID), 2002.
[17] B. Mukherjee, L. T. Heberlein, and K. N. Levitt. Network
Intrusion Detection. IEEE Network, 8(3):26–41, 1994.
[18] P. Ning and Y. Cui. An intrusion alert correlator based on
prerequisites of intrusions. Technical Report TR-2002-01,
North Carolina State University of Erlangen, Department of
Computer Science, January 2002.
[19] P. Ning and D. Xu. Learning attack strategies from intrusion
alert. In Proceedings of 10th ACM Conference on Computer
and Communications Security, October 2003.
[20] V. Paxson. Bro: A system for detecting network intruders in
real-time. In Proceedings of 7th USENIX Security Sympo-
sium, January 1998.
[21] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and de-
nial of service: Eluding network intrusion detection. Secure
Networks, Inc., 1998.
[22] M. Roesch. Snort - lightweight intrusion detection for net-
works. In Proceedings of the USENIX LISA ’99 Conference,
November 1999.
[23] U. Shankar and V. Paxson. Active mapping: Resisting nids
In Proceedings of 2003
evasion without altering trafﬁc.
IEEE Symposium on Security and Privacy, May 2003.
[24] R. Sommer and V. Paxson. Enhancing byte-level network
intrusion detection signatures with context. In Proceedings
of 10th ACM Conference on Computer and Communications
Security, October 2003.
[25] C. Taylor and J. Alves-Foss. Nate — network analysis of
anomalous trafﬁcevents, a low-cost approach. In Proceed-
ings of New Security Paradigms Workshop, 2001.
[26] Tcpdump and Libpcap. http://www.tcpdump.org/.
[27] The Honeypot Project. Know your enemy: Revealing the se-
curity tools, tactics, and motives of the blackhat community.
http://www.honeynet.org, 2001.
[28] G. Vigna and R. A. Kemmerer. NetSTAT: A network-based
intrusion detection system. Journal of Computer Security,
7:37–71, 1999.
[29] G. Vigna, W. Robertson, V. Kher, and R. Kemmerer. A state-
ful intrusion detection system for world-wide web servers.
In Proceedings of the 19th Annual Computer Security Ap-
plications Conference (ACSAC), December 2003.
[30] D. Wagner and D. Dean. Intrusion detection via static analy-
sis. In Proceedings of the IEEE Symposium on Security and
Privacy, May 2001.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply.