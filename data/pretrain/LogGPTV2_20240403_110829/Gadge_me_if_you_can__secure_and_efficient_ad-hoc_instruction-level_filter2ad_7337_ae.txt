### Suite
The C++ benchmarks are listed in gray.

### Exploit
To demonstrate the effectiveness of our approach against an exploit, we constructed a sample program vulnerable to code-reuse attacks. The code is shown in Appendix A. The function `foo()` opens a file whose path and length are provided as parameters. Then, `fgets()` reads as many characters as specified by the `file_length` parameter and copies them into the local buffer `buf` without checking its bounds. This allows an adversary to divert the control flow by overflowing the buffer and overwriting the return address of `foo()`, thereby injecting a ROP (Return-Oriented Programming) payload onto the stack.

We used ROPgadget to find gadgets in the executable and successfully mounted a shellcode exploit. After randomizing the program, the exploit failed. Even intentionally disclosing addresses with `printf("%x", &foo)` no longer works because the relative offsets in the code segment have been changed.

### 6.2 Performance Evaluation
We evaluated the performance of XIFER on the Intel x86 platform and conducted micro-benchmarks on the ARM platform. To evaluate efficiency, we used the SPEC CPU2006 integer benchmark suite for the x86 version.

#### Runtime Overhead on Intel x86
All benchmarks were performed on an Intel Core i7-2600 CPU running at 3.4 GHz with 8 GB of DDR3-SDRAM. We excluded two of the total twelve benchmarks because they use C++ exceptions (see Section 4.5). We compiled all benchmarks using gcc-4.5.3 and the uClibc C library. All measurements included a complete randomization of the entire address space, including the executable and all shared libraries. We examined three different randomization configurations:
- **Config-1:** Maximum entropy of 52 bits.
- **Config-2:** Forcing a split of code after exactly 15 instructions.
- **Config-3:** Strict BBL (Basic Block) permutation: all found BBLs are split into code pieces.

The results of our evaluation, summarized in Figure 9, demonstrate that XIFER is highly efficient and thus addresses property P7 (see Section 3). For Config-1, which already achieves an entropy of 52 bits, the overhead is only 5%.

#### Runtime Overhead on ARM
In contrast to our evaluation on x86, we conducted micro-benchmarks for ARM. Specifically, we used an Android Nexus S device running Android version 4.0.3. To perform precise measurements, we leveraged the ARM hardware clock cycle counter (CCNT), part of the system co-processor (CP15).

To measure the runtime overhead of our prototype, we developed an application that calculates 10,000 times the SHA-1 hash of a 1K buffer with padding. The second micro-benchmark is a standard bubble sort algorithm run on an array of 1024 reverse-ordered elements, ensuring all elements in the array are touched (worst-case scenario). Both benchmarks were measured 10,000 times and averaged. On average, the runtime overhead for the diversified executable is only 1.52% for the SHA-1 benchmark and 1.92% for the bubble sort algorithm.

#### Cache Miss Penalty
We also evaluated the cache effects of XIFER. Since wild jumping in the code due to randomization thwarts the locality of code assumed by the processor cache, it has a negative impact. To measure this impact, we handcrafted code consisting of add-instructions whose input depends on the prior output. These instructions are aligned in memory so that they start at the beginning of a cache line and re-occur in memory, filling every cache set and every cache line after execution. The total number of instructions fits the entire L1 cache of the Intel Core i7 CPU.

We then split the instruction sequences by inserting jumps between them while keeping the original number of interdependent add instructions. This effectively decreases the number of instructions executed per cache line before jumping to the next location. As the jump instructions are inserted at equal distances, the total number of instructions to execute grows larger than the L1 cache, leading to cache misses and lines being evicted from the cache to load new lines. The total runtime of all instructions in the cache was measured 100,000 times.

For our benchmark system, equipped with an Intel Core i7-2600 (32 KB L1 cache, 64 bytes per line), we found an acceptable minimum length of 6 add instructions (12 bytes) before a jump. This yields a negligible overhead of 0.4%. Smaller sizes induce a significant number of cache misses. For instance, when we lower the maximum number of instructions between a jump to 2 instructions, we notice a 90.3% overhead due to cache misses, as every third instruction is a jump instruction. Hence, we suggest not setting the granularity of randomization to â‰¤ 6, as this still achieves very high entropy.

### 6.3 Rewriting Time
Based on the SPEC CPUint2006 benchmarks, we also evaluated the time XIFER requires to rewrite and randomize a program. On average, the throughput of the rewriting is 5500 kBit/s, demonstrating the efficiency of our approach.

### 6.4 Memory Overhead
The possibility of writing out ELF executable or shared library files might increase their file size compared to the original, as the code becomes more bloated and additional segments are introduced to cope with different load addresses.

#### File Size
Encapsulating each memory page in a separate segment in the ELF file requires the allocation of one section header and one program header per page. A section header is 40 bytes, and the ELF program header is 32 bytes, leading to an overhead of 72 bytes per 4096-byte memory page, or approximately 1.76%. Figure 10 depicts both the increase in instructions due to static translation and the increase in ELF section and program headers. The `librewrite.so` itself occupies 72 kB when loaded.

#### Run-Time
During run-time, `librewrite.so` must be loaded once into the address space of a process. However, it is unloaded after the `.init` section has finished and the target program has been randomized. The code size of `librewrite.so` that is temporarily mapped into an address space is approximately 90 kB. The overhead due to the inserted instructions varies, increasing the code by approximately 5% on average.

In summary, our approach has a negligible impact on file size and memory, accurately addressing criterion P8.

### 7. Other Mitigation Techniques
In this paper, we focused on randomization-based countermeasures against code reuse attacks. The main advantage of these defenses is that they typically require no access to source code, perform efficiently, and are already deployed in their basic form (ASLR) on today's commodity systems. Nevertheless, for completeness, we briefly elaborate on the most well-known countermeasures against return-oriented programming-like attacks.

One of the first defense techniques against runtime attacks (based on corrupting return addresses) is StackGuard [8], a compiler extension that inserts random stack canaries before return addresses on the stack. A more comprehensive defense is provided by StackGhost [10], which encrypts return addresses on the stack and proposes the concept of return address stacks (i.e., shadow stacks) to keep valid copies of return addresses in a protected memory area. However, these defenses only focus on specific code reuse attacks and can typically be circumvented by a sophisticated adversary.

Another compiler-based solution against ROP attacks was proposed by Onarlioglu et al. [27]. The authors propose a compiler extension for Intel x86 to eliminate the so-called unintended instruction sequences of a program. A well-known binary-based solution against code-reuse attacks is monitoring of the program flow, originally proposed by Kiriansky et al. [22]. In particular, Control-Flow Integrity (CFI) [3] ensures that a program only follows legitimate execution paths. However, CFI induces more performance overhead than randomization-based proposals [3].

### 8. Conclusion
Runtime attacks that reuse existing code pieces (e.g., return-oriented programming and return-into-libc) are a prevalent attack vector against today's applications. In this paper, we tackle these attacks and present the design and implementation of an efficient mitigation technique inspired by the principle of software diversity. Our software diversity tool, XIFER, accurately mitigates code-reuse attacks by diversifying the structure of an application for each run through binary rewriting at the load-time of the application.

At the heart of XIFER is our binary rewriter, which disassembles application binaries on-the-fly, performs code transformations, and assembles new application instances with new memory layouts, while still covering the entire semantics of the initial program. XIFER is fully dynamic, highly effective (providing high randomization entropy based on a security parameter), and efficient (inducing only 1.2% of runtime overhead on average). Moreover, it requires no access to source codes (which are rarely available in practice) and is compatible with application signatures. Our reference implementation targets both ARM and Intel x86 processors.

To achieve a highly efficient and effective dynamic binary rewriter, we had to overcome several challenges, which we highlighted in this paper.

### 9. References
[1] Dwarf 2.0 debugging format standard. http://www.dwarfstd.org/doc/dwarf-2.0.0.pdf.

[2] ROPgadget. http://shell-storm.org/project/ROPgadget/.

[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In ACM Conference on Computer and Communications Security (CCS), 2005.

[4] S. Bhatkar, R. Sekar, and D. C. DuVarney. Efficient techniques for comprehensive protection from memory error exploits. In USENIX Security Symposium. USENIX Association, 2005.

[5] D. Bruenning. Efficient, Transparent, and Comprehensive Run-time Code Manipulation. PhD thesis, Massachusetts Institute of Technology, 2004.

[6] F. B. Cohen. Operating system protection through program evolution. Computer & Security, 12(6):565â€“584, Oct. 1993.

[7] comex. http://www.jailbreakme.com//#.

[8] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In USENIX Security Symposium, 1998.

[9] R. Enderle. Windows 8: The app store to rule them all? http://www.conceivablytech.com/9973/products/windows-8-the-app-store-to-rule-them-all.

[10] M. Frantzen and M. Shuey. StackGhost: Hardware Facilitated Stack Protection. In USENIX Security Symposium, 2001.

[11] M. Franz. E unibus pluram: massive-scale software diversity as a defense mechanism. In Proceedings of the 2010 workshop on New security paradigms, pages 7â€“16. ACM, 2010.

[25] C. Miller and D. Blazakis. Pwn2Own contest. http://www.ditii.com/2011/03/10/pwn2own-iphone-4-running-ios-4-2-1-successfully-hacked/, 2011.

[26] National Institute of Standards and Technology. National vulnerability database statistics. http://web.nvd.nist.gov/view/vuln/search.

[27] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-Free: defeating return-oriented programming through gadget-less binaries. In ACSACâ€™10, Annual Computer Security Applications Conference, Dec. 2010.

[28] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In IEEE Symposium on Security and Privacy, 2012.

[12] G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically Returning to Randomized lib(c). In ACSAC, 2009.

[29] PaX Team. PaX Address Space Layout Randomization (ASLR). http://pax.grsecurity.net/docs/aslr.txt.

[13] C. Giuï¬€rida, A. Kuijsten, and A. S. Tanenbaum. Enhanced operating system security through efficient and fine-grained address space randomization. In USENIX Security Symposium, 2012.

[30] M. J. Schwartz. Adobe Acrobat, Reader under attack from zero-day exploit. http://www.informationweek.com/news/security/vulnerabilities/227400016, 2010.

[14] D. Goodin. Apple QuickTime backdoor creates code-execution peril. http://www.theregister.co.uk/2010/08/30/apple_quicktime_critical_vuln/, 2010.

[15] Google Play. https://play.google.com/store.

[16] J. D. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson. ILR: Whereâ€™d My Gadgets Go? In IEEE Symposium on Security and Privacy, 2012.

[17] V. Iozzo and R. Weinmann. PWN2OWN contest. http://blog.zynamics.com/2010/03/24/ralf-philipp-weinmann-vincenzo-iozzo-own-the-iphone-at-pwn2own/, 2010.

[18] T. Jackson, B. Salamat, A. Homescu, K. Manivannan, G. Wagner, A. Gal, S. Brunthaler, C. Wimmer, and M. Franz. Compiler-generated software diversity. In Moving Target Defense. 2011.

[19] X. Jiang. GingerMaster: First android malware utilizing a root exploit on Android 2.3 (Gingerbread). http://www.csc.ncsu.edu/faculty/jiang/GingerMaster/, 2011.

[20] M. Keith. Android 2.0-2.1 Reverse Shell Exploit, 2010. http://www.exploit-db.com/exploits/15423/.

[21] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In ACSAC, 2006.

[22] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure Execution via Program Shepherding. In USENIX Security Symposium, 2002.

[23] C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. Reddi, and K. Hazelwood. Pin: building customized program analysis tools with dynamic instrumentation. In ACM SIGPLAN Notices, volume 40, pages 190â€“200. ACM, 2005.

[24] Mac App Store. http://itunes.apple.com/us/app/apple-store/id375380948?mt=8.

[32] H. Shacham, E. Jin Goh, N. Modadugu, B. Pfaï¬€, and D. Boneh. On the Effectiveness of Address-Space Randomization. In ACM Conference on Computer and Communications Security (CCS), 2004.

[33] M. Smithson, K. Anand, A. Kotha, K. Elwazeer, N. Giles, and R. Barua. Binary rewriting without relocation information. Technical report, University of Maryland, 2010.

[34] M. Tran, M. Etheridge, T. Bletsch, X. Jiang, V. Freeh, and P. Ning. On the expressiveness of return-into-libc attacks. In Proceedings of the 14th international conference on Recent Advances in Intrusion Detection. Springer-Verlag, 2011.

[35] P. Vreugdenhil. Pwn2Own 2010 Windows 7 Internet Explorer 8 exploit. http://vreugdenhilresearch.nl/Pwn2Own-2010-Windows7-InternetExplorer8.pdf, 2010.

[36] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In ACM Conference on Computer and Communications Security (CCS), 2012.

### Appendix A: Vulnerable Program
```c
1 FILE *sFile;
2 void foo(char *path, int file_length) {
3   char buf[8];
4   sFile = fopen(path, "r");
5   fgets(buf, file_length, sFile);
6   fclose(sFile);
}
```

This optimized text provides a clearer, more coherent, and professional presentation of the original content.