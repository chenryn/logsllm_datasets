In
Proceedings of the 2012 ACM conference on Computer and commu-
nications security, pages 439–449, New York, NY, USA, 2012.
13
[19] Sibin Mohan, Stanley Bak, Emiliano Betti, Heechul Yun, Lui Sha,
and Marco Caccamo. S3A: Secure System Simplex Architecture for
Enhanced Security of Cyber-Physical Systems. http://arxiv.org, 2012.
[20] National Energy Regulatory Comission. NERC CIP 002 1 - Critical
Cyber Asset Identiﬁcation, 2006.
[21] Sidi Ould Biha. A Formal Semantics of PLC Programs in Coq.
In
IEEE 35th Annual Computer Software and Applications Conference
(COMPSAC), pages 118–127. IEEE, 2011.
[22] Taeshin Park and Paul I Barton. Formal Veriﬁcation of Sequence
Controllers. Computers & Chemical Engineering, 23(11):1783–1793,
2000.
[23] Dale G. Peterson. Project Basecamp at S4. http://www.digitalbond.
com/2012/01/19/project-basecamp-at-s4/, January 2012.
[24] Ludovic Pi`etre-Cambac´ed`es, Marc Trischler, and G¨oran N. Ericsson.
Cybersecurity Myths on Power Control Systems: 21 Misconceptions
and False Beliefs. IEEE Transactions on Power Delivery, 2011.
[26]
[25] Amir Pnueli. The Temporal Logic of Programs. In Proceedings of the
18th Annual Symposium on Foundations of Computer Science, pages
46–57. IEEE Computer Society, 1977.
Jonathan Pollet. Electricity for Free? The Dirty Underbelly of SCADA
and Smart Meters. In Proceedings of Black Hat USA 2010, July 2010.
[27] Henrik Sandberg, Andr´e Teixeira, and Karl H. Johansson. On security
indices for state estimators in power networks. In Proceedings of the
First Workshop on Secure Control Systems (SCS), 2010.
[28] Moses D Schwartz, John Mulder, Jason Trent, and William D Atkins.
Control System Devices: Architectures and Supply Channels Overview.
Jill Slay and Michael Miller. Lessons Learned from the Maroochy Water
Breach.
In Critical Infrastructure Protection, pages 73–82. Springer,
2007.
[29]
[30] Dawn Song, David Brumley, Heng Yin,
Ivan
Jager, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin
Poosankam, and Prateek Saxena. BitBlaze: A New Approach to Com-
puter Security via Binary Analysis.
In Information systems security,
pages 1–25. Springer, 2008.
Juan Caballero,
[31] Keith Stouffer, Joe Falco, and Karen Scarfone. Guide to Industrial
Control Systems (ICS) Security. NIST Special Publication, 800:82,
2008.
[32] U.S. Department of Energy Ofﬁce of Electricity Delivery and Energy
Reliability. A Summary of Control System Security Standards Activities
in the Energy Sector, October 2005.
Joe Weiss. Are the NERC CIPS making the grid less reliable. Control
Global, 2009.
[33]
[34] Kyle Wilhoit. Who’s Really Attacking Your ICS Equipment. Trend
Micro, 2013.
A. Example Property Check
APPENDIX
In this section, we provide a simple property check in-
volving TSV’s main four steps executed over the trafﬁc light
controller code. For the code, and intermediate artifacts: ILIL
code, symbolic scan cycle, and TEG, are all too long to ﬁt in
the space provided, so we provide illustrative examples from
each.
The trafﬁc light control program manipulates a set of
Boolean variables, Q 0.0 - Q 0.5 representing the six lights
facing two opposing directions. This is done in two steps. First,
a set of internal state variables, denoted by M 0.x, track which
state the system is in. The duration of each system state is
dictated by a timer T x. Second, each light is turned on only
if one or more state variables tell it to. As an example of
the ﬁrst step, the following statement checks whether a light
needs to change from red to green based on a timer expiring.
(The “check not ﬁrst run” instruction makes sure that the PLC
was not just turned on.) The lines marked “bookkeeping” are
needed to decompile the program into a graphical language.
A(
O
O
ON
)
AN
=
A
BLD
=
A
L
SD
T
M
M
6
0.0
0.6
;; Check red light timer.
;; Check already green.
;; Check not first run.
1
20.0
20.0
0.0
20.0
T
L
L
102
M
L
S5T#10S
T
1
;; Check green light timer.
;; Bookkeeping.
;; Bookkeeping.
;; Bookkeeping.
;; Set green light state.
;; Bookkeeping.
;; 10 second timer.
;; Start green light timer.
The green light itself is then activated by the statement:
A
=
M
Q
0.0
0.2
;; Check for green state.
;; Activate green light.
The lifted version of above two lines of code is as follows.
0.0
// (9) AND M
STA := cast(low, reg1_t, load(mem, [M::0::0::0::0]));
RLO := RLO && STA;
FC := 1 : reg1_t;
OR := 0 : reg1_t;
0.2
// (10) ST Q
OR := 0 : reg1_t;
STA := RLO;
FC := 0 : reg1_t;
mem := store(mem, [Q::0::0::0::2], RLO);
The resulting symbolic scan cycle constraint for the green light
is as follows.
// The green output variable.
(declare-const Q_0_0_0_2 Bool)
// The state variable.
(declare-const M_0_0_0_0 Bool)
[M_0_0_0_0] -> (and (or (or T_6 M_0_0_0_0)
(not M_0_0_0_6)) (not T_1))
[Q_0_0_0_2] -> (M_0_0_0_0)
Consequently, TSV made use of the produced symbolic
scan cycle to generate its corresponding temporal execution
graph with 24 states that is partially shown in Figure 10. Here,
we also show how the usage of symbolic state matching to
avoid creation of equivalent states helps TSV to save the TEG
memory requirement and consequently improve the overall
TSV performance. Figure 11 illustrates the generated TEG
graph with 12 states partially for the same controller program
while the symbolic state matching engine was on. As shown,
several states in Figure 10 have been lumped together in
Figure 11 as the result of being equivalent. Because of such
state lumpings, there are several states with more than one
incoming transitions. The generated TEG graphs with larger
model generation bounds resulted in the same growth pattern
of 4 states per depth11, i.e., the graph size grows linearly for
this particular case with the model generation bound because
of condition-free controller program.
Finally, TSV employed the generated TEG graph (Fig-
ure 11) to verify whether the safety requirement holds if
11For presentation clarity, we did not include the generated TEG graph with
larger model generation bounds here.
Fig. 10. Partial TEG without Symbolic State Matching
Fig. 11. Partial TEG with Symbolic State Matching
the abovementioned controller program runs on a PLC. The
following shows the model checking results to check whether
both of the green lights can be on at the same time, i.e.,
G ¬ (¬a & ¬b) where a := (Q 0 0 0 2 = 0) and b :=
(Q 0 0 0 5 = 0).
G !(a & b)
-- specification
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample
-> State = S0  State: S1 S4S9S14S19S5S6S7S8S10S11S12S13S15S16S17S18S20S21S22S23...S3S4S9S10S11S5S6S7S8-> State: S2  State: S3  State: S10  State: 18 <-
a = TRUE
State trace: S0 S1 S2 S3 S10 S8
The model checking engine comes up with a counterexample
for the code that shows the state sequence in TEG that causes
the violation of the given safety requirement.
B. ILIL Semantics
The operational semantics of ILIL extend those of the
Vine intermediate language to include function blocks, scoped
variable resolution, hierarchical addresses, loads and stores to
multi-indexed memories, and casts of hierarchical addresses.
Contexts. The ILIL machine state consists of the following
contexts.
S - The function call stack.
•
L - Label to instruction number mapping.
•
• P - Instruction pointer to instruction mapping.
• F - Function name to entry point mapping.
•
•
•
•
D - The global variable context.
` - The local variable context.
p - The instruction pointer.
G - The type context.
Overview. The operational consist of instructions and expres-
sions. The consequence of each instruction is of the form
S,D, `, p,i
,! S0,D0, `0, p0,i0, meaning the call stack, global
and local variable contexts, instruction pointer, and current
instruction are transformed from the left hand side to the right
hand side after execution of the instruction i. Similarly, The
consequence of each expression is of the form D, ` ` e + v,
meaning that under the global and local variable contexts, the
expression e evaluates to the value v.
S = ·
Operational semantics of instructions:
D0 = D[x   v] P ` p + 1 : i
D ` e + v
S,D, `, p, x :=e ,! S,D0, `, p + 1,i
` ` e + v
S,D, `, p, x :=e ,! S,D, `0, p + 1,i
`0 = `[x   v] P ` p + 1 : i
S 6= ·
assign–g
assign–l
S0 = S;(`, p + 1)
D, ` ` e + v F ` f : p0 P ` p0 : i
call
S,D, `, p, call f (x e) ,! S0,D,{x : v}, p0,i
ret
P ` p0 : i
S;(`0, p0),D, `, p, ret ,! S,D, `0, p0,i
D, ` ` e + v
L ` v : p0 P ` p0 : i
S,D, `, p, jmp e ,! S,D, `, p0,i
jmp
D, ` ` e1 + 1
D, ` ` e1 + 0
D, ` ` e2 + v
L ` v : p0 P ` p0 : i
S,D, `, p, cjmp e1,e2,e3 ,! S,D, `, p0,i
D, ` ` e3 + v
L ` v : p0 P ` p0 : i
S,D, `, p, cjmp e1,e2,e3 ,! S,D, `, p0,i
S,D, `, p, label s ,! S,D, `, p + 1,i label
P ` p + 1 : i
cjmp–t
cjmp–f
15
D, ` ` e + 1 P ` p + 1 : i
S,D, `, p, assert e
,! S,D, `, p + 1,i assert–t
D, ` ` e + 0
S,D, `, p, assert e
,! •,•,{“err” : “e”},•,•
Operational semantics of expressions:
size(v2) = m
n = # bytes treg
D, ` ` e2 + v2
D, ` ` e1 + v1
G ` v1 : mem t(tendian,m)
v = v1[v2 . . .v2 + n]
in tendian order
D, ` ` load(e1,e2,treg) + v
assert–f
load–bytes
D, ` ` e1 + v1
G ` v1 : mem t(tendian,m)
D, ` ` e2 + v2
v = v1[v2]
size(v2) = m + 1
treg = reg1 t
D, ` ` load(e1,e2,treg) + v
load–bit
D, ` ` e1 + v1 D, ` ` e2 + v2 D, ` ` e3 + v3
G ` v1 : mem t(tendian,m)
v = v1[v2 . . .v2 + n   v3]
n = # bytes
in tendian order
treg
size(v2) = m
D, ` ` store(e1,e2,e3,treg) + v
store–bytes
D, ` ` e1 + v1 D, ` ` e2 + v2 D, ` ` e3 + v3 size(v2) = m + 1
treg = reg1 t
G ` v1 : mem t(tendian,m)
v = v1[v2   v3]
D, ` ` store(e1,e2,e3,treg) + v
D, ` ` e1 + v1
D0 = D[x   v1]
D0, ` ` e2 + v
D, ` ` let x = e1 in e2 end + v
store–bit
let
D, ` ` e1 + v1
v = v1 ⇧b v2
D, ` ` e2 + v2
D, ` ` e1 ⇧b e2 + v
D, ` ` ⇧u e1 + v
v = higher treg bits of v1
v = ⇧u v1
uop
D, ` ` e1 + v1
bop
D, ` ` e + v1
D, ` ` e + v1
D, ` ` e + v1
D, ` ` cast(high,treg,e) + v
v = lower treg bits of v1
D, ` ` e + v1
D, ` ` cast(low,treg,e) + v
v = v1 sign-extended to treg bits
cast–u
cast–l
D, ` ` cast(signed,treg,e) + v
v = v1 zero extended to treg bits
D, ` ` cast(unsigned,treg,e) + v
D, ` ` e + v1
v = pack(v1)
D, ` ` cast(ptr, addr t,e) + v
D, ` ` e + v1
v = unpack(v1)
D, ` ` cast(addr, reg32 t,e) + v cast–addr
cast–ptr
cast–s
cast–u
` ` x : v
` ` x + v var–local
D ` x : v
D, ` ` x + v
D, ` ` v + v value
x 62 `
var