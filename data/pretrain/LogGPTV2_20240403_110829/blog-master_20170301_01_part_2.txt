c66 serial8 unique   check(c66>0) ,  
c67 serial8 unique   check(c67>0) ,   
c68 serial8 unique   check(c68>0) ,  
c69 serial8 unique   check(c69>0) ,   
c70 serial8 unique   check(c70>0) ,   
c71 serial8 unique   check(c71>0) ,   
c72 serial8 unique   check(c72>0) ,  
c73 serial8 unique   check(c73>0) ,   
c74 serial8 unique   check(c74>0) ,  
c75 serial8 unique   check(c75>0) ,   
c76 serial8 unique   check(c76>0) ,  
c77 serial8 unique   check(c77>0) ,   
c78 serial8 unique   check(c78>0) ,  
c79 serial8 unique   check(c79>0) ,   
c80 serial8 unique   check(c80>0) ,   
c81 serial8 unique   check(c81>0) ,   
c82 serial8 unique   check(c82>0) ,  
c83 serial8 unique   check(c83>0) ,   
c84 serial8 unique   check(c84>0) ,  
c85 serial8 unique   check(c85>0) ,   
c86 serial8 unique   check(c86>0) ,  
c87 serial8 unique   check(c87>0) ,   
c88 serial8 unique   check(c88>0) ,  
c89 serial8 unique   check(c89>0) ,   
c90 serial8 unique   check(c90>0) ,   
c91 serial8 unique   check(c91>0) ,   
c92 serial8 unique   check(c92>0) ,  
c93 serial8 unique   check(c93>0) ,   
c94 serial8 unique   check(c94>0) ,  
c95 serial8 unique   check(c95>0) ,   
c96 serial8 unique   check(c96>0) ,  
c97 serial8 unique   check(c97>0) ,   
c98 serial8 unique   check(c98>0) ,  
c99 serial8 unique   check(c99>0)   
);  
create or replace function create_test(int,int) returns void as $$  
declare  
begin  
for i in $1..$2 loop  
execute 'create table test'||i||' (like test including all)';  
end loop;  
end;  
$$ language plpgsql strict;  
select create_test(1,16);  
```  
创建了17张表，涉及1818个索引。  
创建测试脚本  
```  
vi test.sql  
\set id random(1,100000000)  
insert into test values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test1 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test2 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test3 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test4 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test5 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test6 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test7 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test8 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test9 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test10 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test11 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test12 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test13 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test14 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test15 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
insert into test16 values (:id,'test',now()) on conflict(id) do update set info=excluded.info, crt_time=excluded.crt_time;  
```  
压测  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 1000  
```  
观察延迟  
```  
select pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_insert_location(),sent_location)) sent_delay,   
       pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_insert_location(),replay_location)) replay_delay,   
       * from pg_stat_replication ;  
```  
分析  
```  
pstack startup进程  
perf record -avg  
perf report --stdio  
```  
## 参考  
[《PostgreSQL DaaS设计注意 - schema与database的抉择》](../201610/20161012_01.md)  
内核已优化解决：  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=b41669118c00e25376a6c9ac991e0d074990484a    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")