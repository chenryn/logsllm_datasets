title:Invisible designated confirmer signatures without random oracles
author:Victor K. Wei
Invisible Designated Conﬁrmer Signatures
without Random Oracles
Victor K. Wei
Dept. of Information Engineering, The Chinese Univ. of Hong Kong, Hong Kong
PI:EMAIL
October 11, 2006
Abstract. We construct the ﬁrst O(1)-size designated conﬁrmer signa-
tures (DCS) with security in the state-of-the-art model of Camenisch
and Michels, Eurocrypt 2000, without random oracles. In particular, we
achieve the security notion called the ”invisibility of signature” therein.
1 Introduction
Chaum [9] introduced the DCS (Designated Conﬁrmer Signature). The
signature veriﬁcation requires the interaction with a conﬁrmer who was
designated by the signer when the signature was created. The motivation
was to split the power to sign and the power to conﬁrm in order to
mitigate the overpower of the signer. Several applications beneﬁt from
such a power splitting [9, 3].
T. Okamoto [20] gave a formal security model for DCS, and a poly-
nomial equivalence reduction between DCS and public-key encryption.
Camenisch and Michels [8] presented an upgraded DCS security model
which included, among other things, the adaptive chosen conﬁrmation
attacker who can query a conﬁrmation oracle about the validity of adap-
tively chosen DCS candidates. [8] also gave concrete instantiations, using
the RSA signature and the Cramer-Shoup encryption. The conﬁrmation
and disavowal were not very eﬃcient as they involved double discrete
logarithms or range proof [7].
Goldwasser and Waisbard [16] and Gentry, et al. [15] presented DCS
without random oracles. [15]’s DCS has O(1)-size. However, [16, 15] did
not achieve the security notion of the invisibility of signature [8]. In a nut-
shell, the invisibility of the signature means that two DCS’s corresponding
to two messages are indistinguishable before conﬁrmation. It essentially
also means that distinguishing the validity/invalidity of a putative DCS
is hard. This is a security notion motivated by zero-knowledge protocols.
2
Victor K. Wei
[16, 15] argued such a requirement is unnecessarily strong and costly to
attain.
We think it is still better to have such a requirement to defend against
adaptive chosen conﬁrmation attackers such as the well-known signature
transformation attackers introduced in [8]. Furthermore, we show in this
paper how to attain the invisibility eﬃciently without trading oﬀ other
security notions. In signature transformation attacks the attackers trans-
form the triple (putative DCS, message, signer public key) into another
triple in such a way that their respective validity/invalidity are related. By
querying the transformed triple to the conﬁmration oracle, the attacker
learns the validity of the transformed triple, and consequently learns that
of the putative DCS. See [8] for the deﬁnition and several examples of
signature transform attacks. In Section 5 we apply this attack on some
DCS’s in [16, 15]. Since [16, 15] did not claim the invisibility of the signa-
ture, our attacks are ”beyond their model” attacks. Their DCS’s remain
secure in their own models.
Our Contributions are
1. We construct the ﬁrst O(1)-size designated conﬁrmer signatures (DCS)
secure without random oracles in the strong security model of Ca-
menisch and Michels [8], which includes the invisibility of signatures
is achieved.
2. We apply [8]’s signature transformation attacks on [16, 15] to show
they do not have the invisibility of signatures. However, [16, 15] did
not claim the invisibility of signatures. Their DCS’s remain secure in
their own models.
3. We construct an O(1)-size undeniable signature secure without ran-
dom oracles. Among the state-of-the-art security notions it attains is
the invisibility of the signature. It is also interesting that this unde-
niable signature is cast in the bilinear subgroup (gap Diﬃe-Hellman
group with non-trivial subgroups) which received invigorated resarch
interests recently [6, 18, 2].
Related results. Camenisch and Michels ’00 [8] presented a generic
construction of DCS, which roughly proceeds as follows: The DCS is σ =
Enc(pkC, σ0 = Sign(skS, M)), where Enc is a secure cipher, Sign a secure
signature, skS is signer’s private key, and pkC is conﬁrmer’s public key. To
conﬁrm, the conﬁrmer decrypts to obtain σ0, and then conduct a (concur-
rent) zero-knowledge proof that σ = Enc(pkC, σ0) and σ0 = Sign(skS, M).
To disavow, the conﬁrmer conduct (concurrent) zero-knowledge proof that
Invisible Designated Conﬁrmer Signatures without Random Oracles
3
σ is not a valid ciphertext, or that it decrypts to σ0 but σ0 is not a valid
signature. [8] gave the following theorem:
Theorem 1. [8] If Sign is existentially unforgeable under an adaptive
chosen-message (ACM) attack and Enc is chosen ciphertext attacker (CCA)
secure, then the above construction constitutes a secure DCS.
Our intuitions. Recently, Gentry, et al. [15] presented an eﬃcient
DCS without random oracles. Their generic construction uses, as build-
ing blocks, an arbitrary signature secure without random oracles, a suit-
able commitment, and an arbitrary public-key encryption secure without
random oracles. When the Pedersen commitment and the Cramer-Shoup
encryption is used with an arbitrary signature, the resulting DCS has
O(1)-size and also has eﬃcient coeﬃcients. [15] did not achieve the in-
visibility of signatures. It is the main result of this paper to modify and
upgrade [15]’s DCS to attain this security notion. The resulting DCS
remains eﬃcient, O(1) in size with similarly eﬃcient coeﬃcients.
Our modiﬁcation is a small one. [15] used the Cramer-Shoup encryp-
tion as a black box. We open the black box slightly to add more inputs
to the hashing used inside. This modiﬁcation is suﬃcient to ward oﬀ the
signature transformation attacks and other adaptive chosen conﬁrmation
attacks on the invisibility. Details are in the remains of the paper.
2 Security model
We follow the security model of DCS in Camenisch and Michels [8]. Brief
summaries below. Consult [8] for further details.
Syntax. A designated conﬁrmer signature (DCS) is a tuple (CKGS,
CKGC, CSig, Eviden=(CV erC, CV erV ), CConv, COV er) where
1. (Key Generation) CKGS (resp. CKGC) accepts input the security
parameter 1λs to output signer key pair (skS, pkS) (resp. conﬁrmer
key pair (skC, pkC)).
2. (Signing Protocol) CSig accepts inputs message m, signer key pair
(skS, pkS), conﬁrmer public key pkC, to output a signature σ.
3. (Evidentiation Protocol) Eviden = (CV erC(skC), CV erV )(m, σ, pkS,
pkC) is a pair of interactive protocols corresponding to (Conﬁrmer
CV erC, Veriﬁer CV erV ) with common inputs m, σ, pkS, pkC, and
private input to Conﬁrmer is skC. At the conclusion of interactions,
Veriﬁer outputs 1/0, for conﬁrmed/disavowed.
4
Victor K. Wei
4. (Selective Convertibility Protocol) Algorithm CConv accepts inputs
m, σ, pkS, skC, pkC, to output an ordinary signature s or NULL.
5. (Veriﬁcation of Ordinary Signature Protocol) denoted COV er.
Correctness, validity, and security notions.
1. Correctness of Evidentiation. The Evidentiation Protocol is complete
and correct.
2. Validity of evidentiation. With an honestly generated DCS in common
inputs of the Evidentiation Protocol, no PPT protocol CV erC∗ can
cause an honest CV erV to output 0 with non-negligible probability;
and with a string not corresponding to an honestly generated DCS is
in the common inputs of the Evidentiation Protocol, no PPT protocol
CV erC∗ can cause an honest CV erV to output 1 with non-negligible
probability.
3. Security for the signer. The DCS is unforgeable if no PPT attacker
can deliver a valid DCS in the standard unforgeability game after
making queries to the CSig oracle. The attacker has skC. Naturally,
the delivered DCS cannot be the output of a CSig oracle query.
4. Invisibility of signature (security for conﬁrmers). The DCS is invisible
if no PPT adversary A can win the following game with probability
non-negligibly over half: The simulator B sets up, gives all public
keys and skS to A. In arbitrary interleaf, A queries CV erC, CConv,
generates signer public keys for these queries even not by invoking
CKGS. At a certain point, A selects a message m1. B selects a random
message m0, ﬂips a fair coin b and sends the gauntlet DCS: σga =
CSig(mb, skS, pkS, pkC). At the end, A returns ˆb. A wins the game
if ˆb = b and σga has never been queried to CV erC.
5. Non-Transferability (of Evidentiation). After the conclusion of Evi-
dentiation, the veriﬁer cannot convince a third party of the valid-
ity/invalidity of the signature.
Giving skS to the attacker in the invisibility deﬁnition models forward
security: If the signer’s long-term secret skS is stolen some time in the
future, the validity/invalidity of the DCS should remain indistinguishable.
Another, also standard, way to specify the invisibility experiment is to
have A generates both m0 and m1.
Remark on non-transferability and un-impesonation: In [8], the non-
transferability is deﬁned in terms of the simulatability of the evidentia-
tion transcript by the adversary without skC. It can usually be achieved
by using concurrent zero-knowledge proofs in Protocol Eviden. We do
Invisible Designated Conﬁrmer Signatures without Random Oracles
5
not consider weakened notions such as un-impersonation from the lit-
erature which means A cannot convince a third party using Protocol
Eviden. Note non-transferability essentially means A cannot convince a
third party using any correct and sound interactive protocol.
Deﬁnition 1. The DCS is secure if it has correctness of evidentiation,
correctness of conversion, validity of evidentiation, and is unforgeable,
non-transferable, invisible.
We re-iterate Okamoto [20]’s equivalence reduction between DCS and
pubic-key encryption below:
Theorem 2. (Okamoto [20]’s Theorem 3) There exists an M-secure DCS
if and only if there exists a secure public-key encryption.
We brieﬂy summarize [20]’s proof: Given a secure public key encryp-
tion encryption Enc(pk, m), construct an M-secure signature Sign(sk, m)
using one-way functions. Then construct a DCS σ = Enc(pkC, Sign(skS, m)).
Note the security of the encryption, i.e. the indistinguishability of the en-
cryptions of two plaintexts, implies the invisibility of the DCS. Given
an M-secure DCS, encrypt the one-bit plaintext b ∈ {0, 1} to the public
key pkC as CSig(skS, pkC, constb). The invisibility of the DCS implies
indistinguishability of the ciphertexts.
3 Preliminaries
3.1
Intractability assumptions
The strong RSA problem is, given n = pq, p and q are unknown primes,
z ∈ Zn, compute (A, e), e ≥ 3, satisfying Ae = z (mod n). The strong
RSA assumption is that no PPT algorithm can solve a random instance
of the strong RSA problem with non-negligible probability.
The decision composite residuosity (DCR) assumption [21] is that
n2 from random
given n it is hard to distinguish random elements of Z∗
elements of all n-th powers of elements in Z∗
n2.
The decisional Diﬃe-Hellman (DDH) problem is, given g, ga, gb, gc,
distinguish c = ab from random. The DDH assumption is that no PPT
algorithm can solve a random instance of the DDH problem with proba-
bility non-negligibly over half.
6
Victor K. Wei
3.2 Survey
We brieﬂy summarize relevant literatures. Consult original references for
details.
Cramer-Shoup encryption [11]:
1 gx2
2, u3 = ptxt· dr
2 , d2 = gy1
1 gy2
3, u4 = (d1dα
r is randomly selected and α = Hash(u1, u2, u3).
1. Setup: sk = (x,x2, y1, y2, z), pk = (d1 = gx1
2. Encrypt: ctxt = (u1 = gr
1).
2 )r) where
before outputting ptxt = u3u−1
3. Decrypt: Verify u4 = gx1+αy1
1 .
4. Security: The encryption is secure against adaptive chosen cipher-
text attackers (without random oracles) provided the decisional Diﬃe-
Hellman (DDH) assumption holds.
2 , d3 = gz
1, u2 = gr
1
gx2+αy2
2
0
Paillier system and partial discrete logarithm: Given n = pq, p
and q are all primes, and g0 = n+1, it is computationally easy to compute
the partial discrete logarithm (PDL): That is, given m ∈ Zn2, compute x
0 yn = m. Here is the PDL algorithm: Compute m0 =
and y satisfying gx
m(p−1)(q−1) = gx(p−1)(q−1)
yn(p−1)(q−1) = (n + 1)x(p−1)(q−1) = x(p− 1)(q −
1)n + 1 ∈ Zn2. Then compute x = ((m0 − 1)/n)((p − 1)(q − 1))−1 ∈ Zn.
Four-move concurrent zero-knowledge protocols: We very brieﬂy
summarize this advanced topic. Consult original papers [14, 22] for details.
In a nutshell, concurrent zero-knowledge protocols are zero-knowledge
protocols that can be concurrently compositioned while retaining zero-
knowledge. This property requires that the protocol transcript (without
timeline) can be simulated by the Veriﬁer in an indistinguishing way.
While the general topic of concurrent zero-knowledge protocols, espe-
cially three-move ones, remain highly advanced, there is a well-known
method [22] to convert a typical three-move zero knowledge protocol
into a four-move concurrent zero-knowledge protocol as follows: Denote
a typical three-move zero-knowledge protocol as (D, c, z) for (commit,
challenge, response). The four moves of the converted concurrent zero-
knowledge protocol consists of (c0 = H(c), D, c, z). In the ﬁrst move,
Veriﬁer selects challenge c, sends its hashed value c0. In the second move,
Prover sends the commitment D. In the third move, Veriﬁer sends c. In
the fourth move, Prover checks c0 = H(c) before sending the response z.