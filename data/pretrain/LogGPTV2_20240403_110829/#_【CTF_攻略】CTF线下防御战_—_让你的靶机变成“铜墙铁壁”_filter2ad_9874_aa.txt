# 【CTF 攻略】CTF线下防御战 — 让你的靶机变成“铜墙铁壁”
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[ssooking](http://bobao.360.cn/member/contribute?uid=1490911994)
预估稿费：500RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**一. 前言**
随着CTF的普及，比赛的形式也有了越来越多的花样，对于线下赛来说，开始出现了安全加固或者防御战之类的环节，亦或者因为拿下靶机后不希望其他攻击者进入而进行“争夺”，无论什么形式，这些都需要我们对于服务器的防护工作有所了解。对于线下赛，笔者虽说没有什么很高超的攻防技巧，但也是有着一些自己的心得。本文总结了一些CTF线下赛中常用的服务器加固姿势，希望能对各位CTF朋友们有所帮助。环境针对目前常见线下赛常见的linux
Web服务器，但是因为CTF毕竟与真实网络环境有很大区别，本文的涉及的大部分姿势不具有普遍适用性。本文涉及到的相关代码github下载地址：[CTFDefense](https://github.com/ssooking/CTFDefense)。
**二. 常用姿势**
**1\. 提权**
在开始正文之前，需要先提一下提权，这个要根据自己的比赛过程中的需要而定。有些比赛就有专门的防御加固环节，但安全加固的很多操作都会涉及到root权限，如果直接给root权限最好，但一般一开始会给一个普通权限账号，或者干脆什么都不给，需要我们自己通过漏洞拿下服务器，这样往往就需要提权了。关于提权，通常我们要根据kernel版本号找到对应的poc，平时我们可以收集测试一些比较新的提权poc，以备不时之需。这里有一个网站：，里面有许多linux本地提权的poc。github上有一个挺全的提权exp项目：
。网上也有人分享的一些打包搜集的poc,比如[这个](https://bbs.77169.com/forum.php?mod=viewthread&tid=363466)，有兴趣的朋友可以多下载看看。
下面分享几个最近两年并且影响范围比较大的：
[CVE-2017-6074 (DCCP双重释放漏洞 > 2.6.18
）](https://github.com/torvalds/linux/commit/5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4)
描述：DCCP双重释放漏洞可允许本地低权限用户修改Linux内核内存，导致拒绝服务（系统崩溃）或者提升权限，获得系统的管理访问权限
用法：
    ./pwn
[CVE-2016-5195（脏牛，kernel 2.6.22 
[CVE-2017-1000367（sudo本地提权漏洞 ）](https://github.com/c0d3z3r0/sudo-CVE-2017-1000367)
CVE-2017-1000364
描述：Linux Kernel Stack
Clash安全漏洞。该漏洞是由于操作系统内存管理中的一个堆栈冲突漏洞，它影响Linux，FreeBSD和OpenBSD，NetBSD，Solaris，i386和AMD64，攻击者可以利用它破坏内存并执行任意代码
。
[CVE-2016-1247（Nginx权限提升漏洞）](https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html)
描述：Nginx服务在创建log目录时使用了不安全的权限设置，可造成本地权限提升，恶意攻击者能够借此实现从 nginx/web 的用户权限 www-data
到 root 用户权限的提升。
POC：
提权相关代码在GetRoot目录，POC中是上面提到的几个本地提权源代码，release中分别是编译好的32位和64位程序。
实用脚本
[Linux_Exploit_Suggester.pl](https://github.com/PenturaLabs/Linux_Exploit_Suggester.git)
，它可以根据系统内核版本号返回一个包含了可能exploits的列表。还有一个检查linux安全状况的脚本：[原文链接](http://www.freebuf.com/sectool/108564.html)
还有几个详见：[Linux提权？这四个脚本可以帮助你](http://www.freebuf.com/sectool/121847.html)
**2\. 常用操作命令**
linux操作有很多命令，但是线下赛的防护工作中常用的也就那么一些，我们平时可以留意并总结起来，便于我们比赛使用。
    ssh  用户名@IP  
    scp 文件路径  用户名@IP:存放路径    
    tar -zcvf web.tar.gz /var/www/html/  
    w     
    pkill -kill -t      
    ps aux | grep pid或者进程名    
    #查看已建立的网络连接及进程
    netstat -antulp | grep EST
    #查看指定端口被哪个进程占用
    lsof -i:端口号 或者 netstat -tunlp|grep 端口号
    #结束进程命令
    kill PID
    killall   
    kill -   
    #封杀某个IP或者ip段，如：.  
    iptables -I INPUT -s . -j DROP
    iptables -I INPUT -s ./ -j DROP
    #禁止从某个主机ssh远程访问登陆到本机，如123..  
    iptable -t filter -A INPUT -s . -p tcp --dport  -j DROP  
    #备份mysql数据库
    mysqldump -u 用户名 -p 密码 数据库名 > back.sql    
    mysqldump --all-databases > bak.sql      
    #还原mysql数据库
    mysql -u 用户名 -p 密码 数据库名 < bak.sql  
    find / *.php -perm       
    awk -F:  /etc/passwd    
    crontab -l    
    #检测所有的tcp连接数量及状态
    netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn
    #查看页面访问排名前十的IP
    cat /var/log/apache2/access.log | cut -f1 -d   | sort | uniq -c | sort -k  -r | head -  
    #查看页面访问排名前十的URL
    cat /var/log/apache2/access.log | cut -f4 -d   | sort | uniq -c | sort -k  -r | head -  
再推荐两篇篇安全应急排查手册：[应急排查手册](https://yq.aliyun.com/articles/177337)
，[Linux应急响应姿势浅谈](https://xianzhi.aliyun.com/forum/mobile/read/2150.html)
**3\. 文件监控防webshell**
防御webshell，我们可以监控我们的web目录，对文件的增加或修改等操作进行限制等，粗暴一点的话，就禁止任何文件产生变化，杜绝被传webshell的可能性。
**（1）使用系统 chattr +i 命令**
linux下的文件有着隐藏属性，可以用lsattr命令查看。其中有一个i属性，表示不得更动任意文件或目录。如果你已经有root或者sudo权限了，那么你可以使用"chattr
+i 命令"修改文件隐藏属性，这样所有用户都不能对该文件或者目录进行修改删除等操作（包括root），如果想进行修改，必须用命令"chattr
-i"取消隐藏属性。
[Linux文件保护禁止修改、删除、移动文件等,使用chattr +i保护](http://www.runoob.com/linux/linux-comm-chattr.html)
例子：
用chattr命令防止系统中某个关键文件被修改：
    chattr +i /etc/profile
将/var/www/html目录下的文件设置为不允许任何人修改：
    chattr -R +i /var/www/html
****
**（2）自己动手丰衣足食**
python的第三方库pyinotify可以让我们很方便地实现这些功能。但是由于是第三方库， **线下赛中通常没法联网安装库**
，所以我们可以手工把库文件传到靶机里python库中: /usr/lib/pythonXXX/site-packages，但是更方便的做法是借用pyinstaller等工具将其打包成linux可执行文件。
安装了pyinotify库之后，我们仅仅运行在机器上： "python -m pyinotify 监控目录路径"
这条简单的命令，就可以看到对这个目录以及该目录下所有进行任何操作的的监控日志。
但由于监控事件太过杂，很多并不是我们关注的，并且我们不仅仅要监控，还需要对某些操作进行自动处理，因此我们可以自己编程，针对性地实现我们需要的功能，下面是一段代码示例。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    # ** Author: ssooking
    import os
    import argparse
    from pyinotify import WatchManager, Notifier,ProcessEvent
    from pyinotify import IN_DELETE, IN_CREATE,IN_MOVED_TO,IN_ATTRIB
    class EventHandler(ProcessEvent):
            """事件处理"""
            #创建