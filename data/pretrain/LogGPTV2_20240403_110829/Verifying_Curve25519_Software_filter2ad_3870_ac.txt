ﬁcation works on qhasm level. The obvious disadvantage is
that we rely on the correctness of qhasm translation. The
advantage of this approach is that we can easily adapt our
approach to assembly software for other architectures. In the
future, we plan to also formally verify the qhasm to assembly
translation to provide stronger correctness guarantees.
4.2 Hoare Logic
Hoare logic [28] is a system for proving the correctness of
imperative sequential programs. It contains axioms and in-
ference rules used to establish a valid Hoare triple (|P|) C (|Q|)
where P and Q are formulas in predicate logic and C is a pro-
gram. The Hoare triple (|P|) C (|Q|) is valid iﬀ the program
C ends in a state satisfying Q provided that C starts in a
state satisfying P . The formula P and Q are called pre- and
postconditions respectively. For example, a program C that
increments the value of a variable x by 1 can be speciﬁed
by the Hoare triple (|x = a|) C (|x = a + 1|) where a is a log-
ical variable that captures the value of x before C. Logical
variables must not appear in programs and are used only
for reasoning. We write |= (|P|) C (|Q|) if the Hoare triple
(|P|) C (|Q|) is valid and write (cid:96) (|P|) C (|Q|) if the Hoare triple
is proven in Hoare logic. The axioms and inference rules of
Hoare logic guarantee that |= (|P|) C (|Q|) iﬀ (cid:96) (|P|) C (|Q|).
Among the inference rules of Hoare logic, there is a rule
called Composition:
(cid:96) (|P|) C0 (|R|) (cid:96) (|R|) C1 (|Q|)
(cid:96) (|P|) C0; C1 (|Q|)
Composition
With the rule Composition, to prove (cid:96) (|P|) C0; C1 (|Q|), it
suﬃces to prove both (cid:96) (|P|) C0 (|R|) and (cid:96) (|R|) C1 (|Q|) where
R is a midcondition. Sometimes we may not just ﬁnd a
single midcondition in the middle. In this case, we can use
the following relaxed version of Composition:
(cid:96) (|P|) C0 (|R|) R → S (cid:96) (|S|) C1 (|Q|)
(cid:96) (|P|) C0; C1 (|Q|)
RelaxedComposition
In rule RelaxedComposition, R → S is a logic implication.
4.3 The Boolector SMT solver
Boolector is an eﬃcient SMT solver supporting the the-
ories of bit vectors and arrays [23]. To be brief, an instance
of the SMT problem can be viewed as an instance of the
Boolean satisﬁability (SAT) problem where a Boolean vari-
able corresponds to a predicate from some background the-
ory. For example, f (x, y) = g(z) ∧ z = x + y is an SMT
formula where f (x, y) = g(z) is a predicate from the theory
of equality and uninterpreted functions while z = x + y is
303a predicate from the theory of integers. This SMT formula
can be viewed as a Boolean formula a∧ b where (1) a is true
iﬀ f (x, y) = g(z) holds and (2) b is true iﬀ z = x + y holds.
In cryptographic software, arithmetic in large ﬁnite ﬁelds
requires hundreds of signiﬁcant bits. Standard algorithms
for linear (integer) arithmetic do not apply. Boolector re-
duces queries to instances of the SAT problem by bit blasting
and is hence more suitable for our purposes.
Theory of arrays is also essential to the formalization of
qhasm programs. In low-level programming languages such
as qhasm, memory and pointers are indispensable. We use
theory of arrays to model memory in Boolector. Each
qhasm program is of ﬁnite length. Sizes of program vari-
ables (including pointers) must be declared. Subsequently,
each variable is of ﬁnite domain and, more importantly, the
memory is ﬁnite. Since formal models of qhasm programs
are necessarily ﬁnite, they are expressible in theories of bit
vectors and arrays. Boolector therefore ﬁts perfectly in
this application.
4.4 The Coq proof assistant
The Coq proof assistant has been developed in INRIA for
more than twenty years [19]. The tool is based on a higher-
order logic called the Calculus of Inductive Construction
and has lots of libraries for various theories. Theorems are
proven with the help of Coq tactics. In contrast to model-
theoretic tools such as Boolector, proof assistants are op-
timized for symbolic reasoning. For instance, the algebraic
equation (x + y)2 = x2 + 2xy + y2 can be veriﬁed by the
Coq tactic ring instantaneously.
In this work, we use the Coq standard library ZArith
to formalize the congruence relation modulo 2255 − 19. For
non-linear modular relations in F
2255−19, Boolector may
fail to verify in a handful of cases. We verify them with our
formalization and simple rewrite tactics in Coq.
5. METHODOLOGY
We aim to verify the Montgomery ladder step of the record-
holding implementation of Curve25519 in [13, 14]. A ladder
step (Alg. 2) consists of 18 ﬁeld arithmetic operations. Con-
sidering the complexity of Fp multiplication (Sec. 3), the
correctness of manually optimized qhasm implementation for
the Montgomery ladder step is by no mean clear. The algo-
rithm itself is just a linearization of projective addition. The
implementation however changes the order of instructions
for eﬃciency and no longer a linearization of mathematical
operations. The correctness of the qhasm implementation is
not clear as illustrated by the early incorrect version, which
passed extensive tests.
Due to space limit, we only detail the veriﬁcation of Fp
multiplication. Other ﬁeld arithmetic and the Montgomery
ladder step (Alg. 2) itself are handled similarly.
We will use Hoare triples to specify properties about qhasm
implementations. We only use quantiﬁer-free pre- and post-
conditions. The typewriter and Fraktur fonts are used to
denote program and logical variables respectively in pre- and
postconditions.
Let P be a qhasm implementation for Fp multiplication.
Note that P is loop-free. When the pre- and postcondi-
tions are quantiﬁer-free, it is straightforward to translate
a Hoare triple (|Q|) P (|Q(cid:48)|) to a Boolector speciﬁcation.
This speciﬁcation is equivalent to the quantiﬁer-free SMT
formula R ∧ PSSA ∧ ¬R(cid:48) where PSSA is the qhasm fragment
P in static single assignment form [5, 35], and R and R(cid:48) are
respectively Q and Q(cid:48) with program variables replaced by
their indexed version. For example, (|r = 0|) r+=19∗x; r+=19∗
y (|r = 19x + 19y|) is translated to r0 = 0 ∧ r1 = r0 + 19x0 ∧
r2 = r1 + 19y0 ∧ r2 (cid:54)= 19x0 + 19y0. We then check whether
the quantiﬁer-free formula in the theory of bit-vectors is sat-
isﬁable. If not, we establish |= (|Q|) P (|Q(cid:48)|). In order to au-
tomate this process, we deﬁne a simple assertion language
to specify pre- and postconditions in qhasm. Moreover, we
build a converter that translates annotated qhasm fragments
into Boolector speciﬁcations.
5.1
Fp multiplication in radix-264
Let P 64 denote the qhasm program for Fp multiplication
in the radix-264 representation. The inputs X = x0+264x1+
2128x2 + 2192x3 and Y = y0 + 264y1 + 2128y2 + 2192y3 are
stored in memory pointed to by the qhasm variables xp and
yp respectively. qhasm uses a C-like syntax. Pointer deref-
erences, pointer arithmetic, and type coercion are allowed
in qhasm expressions. Thus, the limbs xi and yi corre-
spond to the qhasm expressions *(uint64 *)(xp + 8i) and
*(uint64 *)(yp + 8i) respectively for every i ∈ [0, 3]. We
introduce logical variables xi and yi to record the limbs xi
and yi respectively. Consider
Q64xy eqns
:=
64= *(uint64 *)(xp + 8i)∧
xi
yi
64= *(uint64 *)(yp + 8i).
3(cid:86)
3(cid:86)
i=0
i=0
The operator n= denotes the n-bit equality in the theory of
bit-vectors. The formula Q64xy eqns states that the values of
the logical variables xi and yi are equal to the limbs xi and
yi of the initial inputs respectively.
In P 64, the outcome is stored in memory pointed to by
the qhasm variable rp. That is, the limb ri of R = r0 +
264r1 + 2128r2 + 2192r3 corresponds to the qhasm expressions
*(uint64 *)(rp + 8i) for every i ∈ [0, 3]. Deﬁne
3(cid:86)
3(cid:80)
i=0
Q64r eqns :=
Q64prod := (
ri
xi264i) × (
3(cid:80)
64= *(uint64 *)(rp + 8i),
512≡ 3(cid:80)
yi264i)
ri264i
(mod p).
i=0
i=0
i=0
n≡ denotes the n-bit signed modulo operator
The operator
in the bit-vector theory and the operation × is an exact
product (without any truncation). The formula Q64r eqns
introduces the logical variable ri equal to the limb ri for
0 ≤ i ≤ 3. The formula Q64prod speciﬁes that the outcome
R is indeed the product of X and Y in ﬁeld arithmetic.
Consider the top-level Hoare triple
(|Q64xy eqns|) P 64 (|Q64r eqns ∧ Q64prod|) .
We are concerned about the outcomes of the qhasm fragment
P 64 from states where logical variables xi and yi are equal to
limbs of the inputs pointed to by the program variables xp
and yp respectively. During the execution of the qhasm pro-
gram P 64, program variables may change their values. Log-
ical variables, on the other hand, remain unchanged. The
logical variables xi, yi in the precondition Q64xy eqns eﬀec-
tively memorize the input limbs before the execution of P 64.
The postcondition Q64r eqns ∧ Q64prod furthermore speciﬁes
that the outcome pointed to by the program variable rp is
the product of the inputs stored in xi and yi. In other words,
3047(cid:86)
the top-level Hoare triple speciﬁes that the qhasm fragment
P 64 is Fp multiplication in the radix-264 representation.
The top-level Hoare triple contains complicated arithmetic
operations over hundreds of 64-bit vectors. It is perhaps not
unexpected that naive veriﬁcation fails. In order to verify
the qhasm implementation of Fp multiplication, we exploit
the compositionality of proofs for sequential programs. Ap-
plying the rule Composition, it suﬃces to ﬁnd a midcondi-
tion for the top-level Hoare triple. Recall that Fp multipli-
cation can be divided into two phases: multiply and reduce
(Sec. 3.1). It is but natural to verify each phase separately.
More precisely, we introduce logical variables to memorize
values of program variables at start and end of each phase.
The computation of each phase is thus speciﬁed by arith-
metic relations between logical variables.
Multiplication in radix-264 representation. Let P 64M
and P 64R denote the qhasm fragments for multiply and
reduce respectively. The multiply fragment P 64M com-
putes the 512-bit value S = (s0, . . . , s7) in (1) stored in
the memory pointed to by the qhasm variable sp. Thus
each 64-bit value si corresponds to the qhasm expression
*(uint64 *)(sp + 8i) for every i ∈ [0, 3]. Deﬁne
Q64s eqns
:=
Q64mult
64= *(uint64 *)(sp + 8i),
512= 264Xy1 + A0∧
si
512= Xy0 ∧ A1
512= 2128Xy2 + A1∧
512= 2192Xy3 + A2∧
3(cid:80)
xi264i ∧ 7(cid:80)
si264i 512= A3.
i=0
:= A0
A2
A3
X 512=
i=0
i=0
For clarity, we introduce the logical variable X for the input
X = x0 + 264x1 + 2128x2 + 2192x3 in Q64mult . Consider the
Hoare triple (|Q64xy eqns|) P 64M (|Q64s eqns ∧ Q64mult|) The
precondition Q64xy eqns memorizes the limbs of the inputs
X and Y in logical variables xi’s and yi’s. The formula
Q64s eqns records the limbs si’s after the qhasm fragment
P 64M in logical variables si’s. Q64mult ensures that the
limbs si’s are computed according to (1). In other words, the
Hoare triple speciﬁes the multiply phase of Fp multiplication
in the radix-264 representation.
i for the limbs s(cid:48)
Reduction in radix-264 representation. Following the
reduction phase in Sec. 3.1, we introduce logical variables s(cid:48)
i respectively for every i ∈ [0, 4].
and s(cid:48)(cid:48)
The formulas Q64s(cid:48) red , Q64s(cid:48)(cid:48) red , Q64r red are deﬁned for
the three reduction steps. The formulas Q64s(cid:48) bds , Q64s(cid:48)(cid:48) bds ,
and Q64r bds moreover give upper bounds.
i and s(cid:48)(cid:48)
i
s(cid:48)
i264i 320= s0 + 264s1 + 2128s2 + 2192s3+
i=0
38(s4 + 264s5 + 2128s6 + 2192s7)
Q64s(cid:48) red
:=
Q64s(cid:48) bds
:=
Q64s(cid:48)(cid:48) red
:=
Q64s(cid:48)(cid:48) bds
:=
Q64r red
:=
Q64r bds
:=
4(cid:80)
4(cid:86)
4(cid:80)
3(cid:86)
3(cid:80)
3(cid:86)
i=0
i=0
i=0
i=0
i=0
0 ≤ s(cid:48)
i < 264
s(cid:48)(cid:48)
i 264i 320= 38s(cid:48)
0 ≤ s(cid:48)(cid:48)
ri264i 256= 38s(cid:48)(cid:48)
0 ≤ ri < 264
4 +
s(cid:48)
i264i
i < 2 ∧ 0 ≤ s(cid:48)(cid:48)
4 < 2
s(cid:48)(cid:48)
i 264i
4 +
3(cid:80)
3(cid:80)
i=0
i=0
Consider the following Hoare triple
(|Q64mult|) P 64R
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Q64s(cid:48) red ∧ Q64s(cid:48) bds∧
Q64s(cid:48)(cid:48) red ∧ Q64s(cid:48)(cid:48) bds∧
Q64r red ∧ Q64r bds∧
Q64r eqns
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
 .
The precondition Q64mult assumes that variables si’s are ob-
tained from the multiply phase. Recall the formula Q64r eqns
deﬁned at the beginning of this subsection. The postcondi-
tion states that outcome ri’s are obtained by the reduce
phase. Note that the logical variable s(cid:48)(cid:48)
4 is at
most 1. We are using Boolector to verify this fact in the
reduction phase.
4 for the limb s(cid:48)(cid:48)
Proposition 1. Assume
1. |= (|Q64xy eqns|) P 64M (|Q64s eqns ∧ Q64mult|);
Q64s(cid:48) red ∧ Q64s(cid:48) bds∧
Q64s(cid:48)(cid:48) red ∧ Q64s(cid:48)(cid:48) bds∧
Q64r red ∧ Q64r bds∧
2. |= (|Q64mult|) P 64R
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Q64r eqns
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)