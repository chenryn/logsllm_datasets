    .text:67127026                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
    .text:6712702B                 leave
    .text:6712702C                 retn    0Ch
漏洞利用非常精妙，也就是用这种方法，巧妙的绕过了gs的检查，最后达到漏洞利用，稳定的代码执行，首先，WebDav对数据包的处理逻辑是在DAVxxx函数中完成的。比如当前数据包是PROPFIND，那么当前的函数处理逻辑就是DAVpropfind函数。
    0:009> kb
    ChildEBP RetAddr  Args to Child              
    00fff798 67119469 680312c0 00fff800 00000000 httpext!ScStoragePathFromUrl
    00fff7ac 6712544a 0060e7b0 680312c0 00fff800 httpext!CMethUtil::ScStoragePathFromUrl+0x18
    00fffc34 6712561e 0060b508 0060584e 00fffc78 httpext!HrCheckIfHeader+0x124
    00fffc44 6711f659 0060b508 0060584e 00000001 httpext!HrCheckStateHeaders+0x10
    00fffc78 6711f7c5 0060c010 00fffcd4 671404e2 httpext!CPropFindRequest::Execute+0xf0
    00fffc90 671296f2 0060c010 00000004 01017af8 httpext!DAVPropFind+0x47
在内层的函数处理逻辑中，有一处关键的函数处理逻辑HrCheckIfHeader，主要负责DAVPropFind函数对头部的check，这个函数处理逻辑中有一处while循环，我已经把这个循环的关键位置的注释写在伪代码中。
    __int32 __stdcall HrCheckIfHeader(struct CMethUtil *a1, const unsigned __int16 *a2)
     while ( 2 )
      {
      v6 = IFITER::PszNextToken(&v20, 0);
        v7 = v6;
        if ( v6 )／／这里获取下一个url值，第一轮会进入这里，第二轮也会，第三轮就进不去了
        {
          CStackBuffer::CStackBuffer(260);
          v9 = (const wchar_t *)(v7 + 2);
          LOBYTE(v34) = 2;
          v27 = _wcslen(v9);
          if ( !CStackBuffer::resize(2 * v27 + 2) )
            goto LABEL_35;
          v5 = ScCanonicalizePrefixedURL(v9, v32, &v27);
          if ( v5 )
            goto LABEL_43;
          v27 = v29 >> 3;
          v5 = CMethUtil::ScStoragePathFromUrl(a1, v32, Str, &v27);
          if ( v5 == 1 )
          {
            if ( !CStackBuffer::resize(v27) )
            {
    LABEL_35:
              LOBYTE(v34) = 1;
              CStackBuffer::release(&v31);
              v5 = -2147024882;
              goto LABEL_39;
            }
            v5 = CMethUtil::ScStoragePathFromUrl(a1, v32, Str, &v27);
          }
          if ( v5 ::release(&v31);
            goto LABEL_39;
          }
          v10 = _wcslen(Str);
          v27 = v10;
          v11 = &Str[v10 - 1];
          if ( *v11 == 62 )
            *v11 = 0;
          v8 = Str;
          LOBYTE(v34) = 1;
          CStackBuffer::release(&v31);
        }
        else
        {
          if ( !v25 )／／进不去就跳入这里，直接break掉，随后进入locktoken，会调用sc函数
            goto LABEL_38;
          v8 = (const unsigned __int16 *)v24;
        }
        v25 = 0;
        for ( i = (wchar_t *)IFITER::PszNextToken(&v20, 2); ; i = (wchar_t *)IFITER::PszNextToken(&v20, v19) )
        {
          v17 = i;
          if ( !i )
            break;
          v12 = *i;
          if ( *v17 == 60 )
          {
            v13 = HrValidTokenExpression((int)a1, v17, (int)v8, 0);
          }
          else if ( v12 == 91 )
          {
            if ( !FGetLastModTime(0, v8, (struct _FILETIME *)&v23)
              || !FETagFromFiletime((int)&v23, &String, *((_DWORD *)a1 + 4)) )
            {
    LABEL_26:
              if ( v22 )
                goto LABEL_27;
              goto LABEL_30;
            }
            v14 = v17 + 1;
            if ( *v14 == 87 )
              v14 += 2;
            v15 = _wcslen(&String);
            v13 = _wcsncmp(&String, v14, v15);
          }
          else
          {
            v13 = -2147467259;
          }
          if ( v13 )
            goto LABEL_26;
          if ( !v22 )／／如果不等于22，则v26为1 continue，这里v22为0
          {
    LABEL_27:
            v26 = 1;
            v19 = 3;
            continue;
          }
    LABEL_30:
          v26 = 0;
          v19 = 4;
        }
        v2 = 0;
        if ( v26 )／／这里进这里
        {
          v6 = IFITER::PszNextToken(&v20, 1);／／获得下一个url部分，第一次处理完，由于后面还有url，所以这里v6会有值，而第二次，这里后面没有值了
          continue;
        }
        break;
      }
如果看的比较迷糊，可以看我下面的描述，首先这个while函数中，有一个非常有意思的函数PszNextToken，这个函数会连续获取<>中的http
url，直到后面没有http url，则跳出循环，这也是这个漏洞利用的关键条件。
首先，第一次会处理IF后面的第一个http url，这个url就是http://localhost/aaaa
..，这个处理过程，实际上就完成了第一次溢出，首先stackbuffer会通过CStackBuffer函数获取，获取到之后，这个值会存放在stack中的一个位置。接下来会进行第一次ScStorageFromUrl，这个地方会对第一个<>中的http
url处理。长度是0xa7。
    0:009> p
    eax=00fff910 ebx=0060b508 ecx=00000410 edx=00000000 esi=0060c64a edi=77bd8ef2
    eip=671253e2 esp=00fff7bc ebp=00fffc34 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!HrCheckIfHeader+0xbc:
    671253e2 ffd7            call    edi {msvcrt!wcslen (77bd8ef2)}／／第一次处理aaaa部分，长度只有a7
    0:009> dc 60c64a
    0060c64a  00740068 00700074 002f003a 006c002f  h.t.t.p.:././.l.
    0060c65a  0063006f 006c0061 006f0068 00740073  o.c.a.l.h.o.s.t.
    0060c66a  0061002f 00610061 00610061 00610061  /.a.a.a.a.a.a.a.
    0060c67a  78636f68 71337761 47726936 4b777a39  hocxaw3q6irG9zwK
    0:009> p
    eax=000000a7 
这个a7长度很小，不会覆盖到gs，因此可以通过security check，但是这个a7却是一个溢出，它超过了stack
buffer的长度，会覆盖到stack中关于stack buffer指针的存放位置。这个位置保存在ebp-328的位置。
    0:009> p
    eax=00fff800 ebx=0060b508 ecx=0060b508 edx=00000104 esi=00000001 edi=77bd8ef2
    eip=67125479 esp=00fff7b8 ebp=00fffc34 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!HrCheckIfHeader+0x153:
    67125479 ffb5e4fdffff    push    dword ptr [ebp-21Ch] ss:0023:00fffa18=0060c828
    0:009> p
    eax=00fff800 ebx=0060b508 ecx=0060b508 edx=00000104 esi=00000001 edi=77bd8ef2
    eip=6712547f esp=00fff7b4 ebp=00fffc34 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!HrCheckIfHeader+0x159:
    6712547f e8cd3fffff      call    httpext!CMethUtil::ScStoragePathFromUrl (67119451)
    0:009> dd ebp-328／／注意拷贝的地址，这个90c是scstoragepathfromurl要拷贝的栈地址