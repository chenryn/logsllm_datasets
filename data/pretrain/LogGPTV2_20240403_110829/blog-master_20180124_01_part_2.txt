extern spinlock_t lock;  
// ...  
spin_lock_irq(&lock);	   
Code 2  
extern spinlock_t lock;  
// ...  
spin_lock_irq(&lock);  
// do something  
spin_unlock_irq(&lock);  
Code 1  
// do something  
spin_unlock_irq(&lock);	   
```  
问题是在第一个spin_unlock_irq后这个CPU的中断已经被打开，“死锁”的问题又会回到我们身边！  
解决方法是我们在每次关闭中断前纪录当前中断的状态，然后恢复它而不是直接把中断打开。  
```  
unsigned long flags;  
local_irq_save(flags);  
spin_lock(&lock);  
// do something  
spin_unlock(&lock);  
local_irq_restore(flags);  
```  
Linux同样提供了更为简便的方式:  
```  
unsigned long flags;  
spin_lock_irqsave(&lock, flags);  
// do something  
spin_unlock_irqrestore(&lock, flags);  
```  
## 复现    
使用这篇文档提到的方法，创建几千个分区的分区表，然后使用pgbench压测就可以复现这个问题。    
[《PostgreSQL 商用版本EPAS(阿里云ppas) - 分区表性能优化 (堪比pg_pathman)》](../201801/20180122_03.md)      
不再赘述。    
## 小结    
优化方法：    
1、假设我们的QUERY进程要查询多个分区（指很多个分区），那么建议把分区的粒度降低，尽量让QUERY减少真正被访问的分区数，从而减少LWLockAcquire次数。    
2、如果我们的分区很多，但是通过QUERY的WHERE条件过滤后实际被访问的分区不多，那么分区表的选择就非常重要。（目前尽量不要使用NATIVE分区）。尽量使用PPAS的edb_enable_pruning。对于PostgreSQL社区版本用户，在社区优化这部分代码前，请尽量使用pg_pathman分区功能。    
3、使用数据库UDF，根据输入条件，自动拼接子表，从而避免访问主表导致的本文提到的问题。   
[《PostgreSQL Oracle 兼容性之 - DBMS_SQL(存储过程动态SQL中使用绑定变量-DB端prepare statement)》](../201803/20180323_02.md)  
[《PostgreSQL 时序最佳实践 - 证券交易系统数据库设计 - 阿里云RDS PostgreSQL最佳实践》](../201704/20170417_01.md)   
4、使用程序自动实现数据路由，直接访问子表，从而避免访问主表导致的本文提到的问题。   
5、DBA可以做的：把不需要访问到的分区，临时从主表no inherit，这样访问主表时访问的子表数目减少，也能够降低BIND带来的问题。（比如一些很老的分区，实际上业务程序已经不需要访问，但是还挂载在主表上，带来性能问题）  
这里还可以给一个建议，对于单张子表，可以inherit多个父表，所以业务上保持少量子表，而分析层面（需要访问多个子表时）可以挂载多个子表。这样的话用起来也不会不舒服，只是DBA辛苦一点了。  
例子  
t_p_current  -- 业务表,访问较高频率，但是仅需访问最近2个月的数据。  
```
t_c_201802
t_c_201803
```
t_p_all  -- 分析表, 访问较少，但是需要访问所有子表  
```
t_c_201601
t_c_201602
....
t_c_201802  -- 它有两个主表
t_c_201803  -- 它有两个主表
....
t_c_201812
```
操作语法：   
```
alter table tbl1 inherit tbl_p_all;
alter table tbl1 no inherit tbl_p_current;
```
6、  
对于PPAS用户，建议能常量输入的，就使用常量输入，这样能够用到分区过滤的优化特性。（特别是在分区表非常多的情况下，优化效果非常明显）。
[《PostgreSQL 商用版本EPAS(阿里云ppas(Oracle 兼容版)) - 分区表性能优化 (堪比pg_pathman)》](../201801/20180122_03.md)  
对于PG用户，使用pg_pathman作为分区组件，在分区很多的情况下，性能比native的分区好很多很多。
[《PostgreSQL 10 内置分区 vs pg_pathman perf profiling》](../201710/20171015_01.md)  
PostgreSQL 社区正在改进这块的代码，PATCH如下(PostgreSQL 11可能会包含这部分优化)：
https://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL
https://commitfest.postgresql.org/17/1272/
## 参考    
[《Linux中的spinlock和mutex》](../201611/20161109_02.md)      
[《PostgreSQL 商用版本EPAS(阿里云ppas) - 分区表性能优化 (堪比pg_pathman)》](../201801/20180122_03.md)      
[《PostgreSQL 商用版本EPAS(阿里云ppas) NUMA 架构spin锁等待优化》](../201801/20180113_04.md)      
[《PostgreSQL 传统 hash 分区方法和性能》](../201711/20171122_02.md)      
[《PostgreSQL 10 内置分区 vs pg_pathman perf profiling》](../201710/20171015_01.md)      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")