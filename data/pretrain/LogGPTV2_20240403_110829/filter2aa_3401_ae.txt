▲
alert(/xss/.source)
▲
window[/alert/.source](8)
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Cross-Site Scripting
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.103
▼
alert(document.cookie)
▲
with(document)alert(cookie)
▲
alert(document['cookie'])
▲
alert(document[/cookie/.source])
▲
alert(document[/coo/.source+/kie/.so
urce])
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Cross-Site Scripting
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.104
▲
▲
javascript:alert(document.cookie)
▲
▲
▲
▲
data:text/html;base64,PHNjcmlwdD5h
bGVydCgnWFNTJyk8L3NjcmlwdD4=
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Blind SQL Injection
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.105
▼
' or 1=1
▲
' or 6=6
▲
' or 0x47=0x47
▲
or char(32)=' '
▲
or 6 is not null
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
SQL Injection
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.106
▼
UNION SELECT
▲
UNION ALL SELECT
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Directory Traversal
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.107
▼
/etc/passwd
▲
/too/../etc/far/../passwd
▲
/etc//passwd
▲
/etc/ignore/../passwd
▲
/etc/passwd.......
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Web Shell
Instead of using:
The best choice is:
1.2.2.1 Simple Rules to Bypass WAFs
|  p.108
▲
c99.php
▲
r57.php
▲
shell.aspx
▲
cmd.jsp
▲
CmdAsp.asp
▲
augh.php
DO
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Usually WAFs work in passive mode, reactive mode, or 
sometimes both. It depends on the period at which they are 
installed. For example, once deployed, they can be in passive 
mode, reducing the number of false positives and avoiding 
blocking the application; however, once in production, most are 
reactive.
Before testing a web application, it is extremely useful to know if 
there is a WAF on the other side and what kind it is. WAF systems 
leave several footprints of their presence, which allow us to 
detect which WAF is in place. Let’s check out some techniques.
1.2.2.2 WAF Detection and Fingerprinting
|  p.109
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Cookie Values
Some WAF systems reveal their presence through cookies. 
They release their own cookie during the HTTP 
communications. 
1.2.2.2 WAF Detection and Fingerprinting
|  p.110
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Cookie Values: 
Citrix Netscaler uses some different cookies in the HTTP 
responses like ns_af or citrix_ns_id or NSC_
F5 BIG-IP ASM (Application Security Manager) uses 
cookies starting with TS and followed with a string that 
respect the following regex:
^TS[a-zA-Z0-9]{3,6}
1.2.2.2 WAF Detection and Fingerprinting
|  p.111
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Cookie Values: 
Barracuda uses two cookies barra_counter_session and 
BNI__BARRACUDA_LB_COOKIE.
HTTP/1.1 200 OK 
Cache-Control: no-cache 
Pragma: no-cache 
Content-Length: 8543
Content-Type: text/html 
Expires: Tue, 08 Apr 2014 08:56:45 GMT
Server: Microsoft-IIS/6.0 
X-Powered-By: ASP.NET 
Date: Tue, 08 Apr 2014 08:57:44 GMT
Set-Cookie: BNI__BARRACUDA_LB_COOKIE=000000000000000000000000c400000a0000bb20; Path=/ 
|  p.112
1.2.2.2 WAF Detection and Fingerprinting
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Header Rewrite
Some WAFs rewrite the HTTP headers. Usually these 
modify the Server header to deceive the attackers.
For example, they either rewrite the header if the request is 
malicious or, depending on the malicious request, remove 
the HTTP Server header in the response. 
1.2.2.2 WAF Detection and Fingerprinting
|  p.113
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Header Rewrite: Example – Rewrite Server Header
1.2.2.2 WAF Detection and Fingerprinting
|  p.114
HTTP response for hostile request
HTTP/1.1 404 Not Found
Date: Mon, 7 Apr 2014 10:11:06 GMT
Server: Netscape-Enterprise/6.1
Content-Type: text/html; 
Content-Length: 158
HTTP/1.1 200 OK
Date: Mon, 7 Apr 2014 10:10:50 GMT
Server: Apache (Unix)
Content-Type: text/html
Content-Length: 2506
HTTP response for non-hostile request
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
HTTP Response Code
Some WAFs modify the HTTP response codes if the 
request is hostile; for example:
mod_security >
406 Not Acceptable
AQTRONIX WebKnight >
999 No Hacking
1.2.2.2 WAF Detection and Fingerprinting
|  p.115
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
HTTP Response Body
It is also possible to detect the presence of the WAF plainly 
in the response body. 
1.2.2.2 WAF Detection and Fingerprinting
|  p.116
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
HTTP Response Body: mod_security
HTTP/1.1 406 Not Acceptable 
Date: Mon, 7 Apr 2014 11:10:50 GMT
Server: Apache 
Content-Length: 226 
Keep-Alive: timeout=10, max=30 
Connection: Keep-Alive 
Content-Type: text/html; charset=iso-8859-1 
Not Acceptable!Not Acceptable!
An appropriate representation of the requested resource could not be found on this server. 
This error was generated by Mod_Security. 
|  p.117
1.2.2.2 WAF Detection and Fingerprinting
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
HTTP Response Body: AQTRONIX WebKnight
1.2.2.2 WAF Detection and Fingerprinting
|  p.118
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
HTTP Response Body: dotDefender
1.2.2.2 WAF Detection and Fingerprinting
|  p.119
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Close Connection
An interesting feature supported by some WAFs is 
close connection. 
It is useful in dropping the connection in the case the WAF 
detects a malicious request. 
1.2.2.2 WAF Detection and Fingerprinting
|  p.120
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Close Connection: mod_security
Here is a possible implementation with mod_security to 
detect a brute force attack:
SecAction phase:1,id:109,initcol:ip=%{REMOTE_ADDR},nolog 
SecRule ARGS:login "!^$" 
"nolog,phase:1,id:110,setvar:ip.auth_attempt=+1,deprecatevar:ip.auth_attempt=20/120" 
SecRule IP:AUTH_ATTEMPT "@gt 25" 
"log,drop,phase:1,id:111,msg:'Possible Brute Force Attack'" 
Source and Meaning > https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#drop
|  p.121
1.2.2.2 WAF Detection and Fingerprinting
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Many penetration testing tools have features to detect the 
presence of a WAF. These features are both used as a first 
step to understand how to craft payloads and if it is 
needed. 
An example would be to obfuscate the attack vector or use 
a specific bypass.
1.2.2.2 WAF Detection and Fingerprinting
|  p.122
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
https://code.google.com/p/waffit/
The most well-known tool made by 
Sandro Gauci and Wendel G. 
Henrique is called wafw00f.
Wafw00f is a tool written in python 
that can detect up to 20 different 
WAF products. 
1.2.2.2 WAF Detection and Fingerprinting
|  p.123
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The techniques used to detect a WAF are similar to those 
we have seen previously: 
1. Cookies 
2. Server Cloaking 
3. Response Codes
4. Drop Action
5. Pre-Built-In Rules
1.2.2.2 WAF Detection and Fingerprinting
|  p.124
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Scanning a website with wafw00f is very simple, and the 
following image confirms it:
1.2.2.2 WAF Detection and Fingerprinting
|  p.125
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://nmap.org/nsedoc/scripts/http-waf-fingerprint.html
As an addition to wafw00f you might want to use Nmap. It 
contains a script that tries to detect the presence of a web 
application firewall, its type and version. 
The script file is http-waf-fingerprint and is authored by 
Hani Benhabiles.
1.2.2.2 WAF Detection and Fingerprinting
|  p.126
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Scanning a website with nmap is as simple as running 
wafw00f.  We just require the script name to be in the 
command:
1.2.2.2 WAF Detection and Fingerprinting
|  p.127
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
https://code.google.com/p/imperva-detect/
Another interesting resource is imperva-detect by Lamar 
Spells. This utility is 100% focused on the detection of an 
Imperva WAF and it runs 6 tests, one baseline and five 
additional:
1.2.2.2 WAF Detection and Fingerprinting
|  p.128
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The following image is an example of how to run imperva-
detect test scripts:
1.2.2.2 WAF Detection and Fingerprinting
|  p.129
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
Web Application Firewalls and libraries are filtering 
solutions used to block web attacks, server-side at the 
heart of web applications. Over the years, this has become 
the "classic" and consolidated approach.
However, in the last ten years another approach has arisen. 
The concept is to block web attacks client-side within web 
browsers. These browsers are the primary mean used to 
address attacks.
1.2.3 Client-Side Filters
|  p.130
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
The goal of client-side defenses is to protect users against 
vulnerabilities in web applications. Of course this approach 
is not simple, and defenses need to be generic enough to 
always be enabled. If they are not, they can become a 
blocker for the browsers themselves and to their respective 
users.
From an attacker's point of view, we want to understand 
these mechanisms and how to bypass them. Our aim is the 
target users who would otherwise be protected.
1.2.3 Client-Side Filters
|  p.131
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
https://addons.mozilla.org/it/firefox/addon/noscript/
The first browser protection began in the open source 
community. 
The pioneer of the first valid solution was Giorgio Maone, in 
late 2005, with the NoScript Security Suite extension for 
Firefox.
1.2.3.1 Browser Add-ons
|  p.132
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
NoScript is a whitelist-based 
security tool that basically 
disables all the executable 
web content (JavaScript, Java, 
Flash, Silverlight, …) and lets 
the user choose which sites 
are "trusted”, thus allowing the 
use of these technologies.
1.2.3.1 Browser Add-ons
|  p.133
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
NoScript is easy enough 
to use; however, the 
strongest point of this 
extension is the extensive 
list of security features 
supported.
1.2.3.1 Browser Add-ons
|  p.134
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://noscript.net/features#xss
Among the features, the strong and powerful anti-XSS 
protection is probably one of the most effective browser-
based solutions to prevent targeted malicious Web attacks.
1.2.3.1 Browser Add-ons
|  p.135
WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020
http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-
iv-the-xss-filter.aspx
History
The first attempt at blocking malicious requests "natively” 
(i.e. internally in the browser), was made by Microsoft and 