NODOZE? NODOZE is independent to the choice of under-
lying TDS, we used this TDS [8] in particular because it was
licensed by our enterprise; licensing additional TDS for our
13
bashlsapache2bashbashcpbzip2lscatapache2sshd/var/www/data.tar.bz2data.tar.bz2apache2data.tartarapache2bash.ssh/authorized_keys/nc.traditionalbashbashnc.traditionalls         lslscatlsdircat           apache2apache2apache2wgetdata.tar.bz2apache2sensitive.txtbashbashnc.traditionalpasswdLow Anomaly Score High Anomaly Score E1E2E3.bash_historycatapache2bash        nc.traditionalbash          cpbzip2/var/www/data.tar.bz2data.tar.bz2apache2data.tarwgetdata.tar.bz2catbashevaluation, which was conducted on hundreds of hosts, was
prohibitively costly. However, this tool is a state-of-the-art
commercial TDS that is based on a reputable peer-reviewed
detection algorithm [31] and is similar to existing commercial
and academic TDS [3], [5], [43], [29], [21] in FPR.
XI. RELATED WORK
In §II, we described the limitations of combining TDS with
provenance tracker that NODOZE addresses, and complement
the discussion on related work here.
Threat Detection. Existing threat detection approaches can
be classiﬁed as online and ofﬂine approaches. Online detection
approaches often look for a speciﬁc sequence of syscalls to
detect malicious programs in a running system [37], [48].
While ofﬂine approaches leverage forensic analysis on audit
log to ﬁnd the root cause of intrusion. Due to performance and
space constraints, online approaches do not keep audit logs to
support forensic analysis. On the other hand, existing ofﬂine
approaches are labor intensive which makes them prohibitively
impractical in an enterprise.
To improve syscall based methods, Tandon et al. [61]
considered syscall arguments in addition to syscall sequences
for malicious program detection. Sekar et al. [57] further added
more complex structures such as loops and branches in the
syscall sequences. However, all these syscall based systems
suffer from a high false alarm rate due to the lack of contextual
information. NODOZE use historical contextual information
of system activities with more domain information such as
process names and commandline arguments to achieve better
accuracy. Researchers have also proposed to automatically
detect attacks using machine learning [38], [64]. However,
these methods also have signiﬁcant detection error and suffer
from generating too many false alerts [58], [34].
Threat Alert Triage. Ben-Asher et al. [27] did a study to
investigate the effects of knowledge in detecting true attacks.
They found that contextual knowledge about alert was more
helpful in detection than cyber analysts experience and prior
knowledge. Zhong et al. [68] mined past analysts’ operation
traces to generate a state machine for automated alert triage.
Chyssler et al. [32] used a static ﬁlter with aggregation to
reduce false alarm in IP network with the help of end-user
involvement to adjust ﬁlter rules. There are many other pro-
posed approaches to reduce the number of alerts such as careful
conﬁguration and improved classiﬁcation methods [22], [45];
however, there are still too many threat alerts for the analysts
to properly investigate [32]. To the best of our knowledge,
NODOZE is the ﬁrst system to leverage data provenance to
automate the alert
triage process in an enterprise without
analysts involvement.
Provenance Analysis. A lot of work has been done to
leverage data provenance for forensic analysis [26], [46], [56],
[63], network debugging [23], [65], and access control [55].
Jiang et al. [39] used process coloring approach to identify the
intrusion entry point and then use taint propagation approach to
reduce log entries. Xie et al. [66] used high-level dependency
information to detect malicious behaviour. However, this sys-
tem only considered one event at a time without malicious
behaviour propagation i.e.
if ftp connects to some socket
address which is not in their normal event database they will
mark it as malicious. However, NODOZE considered the whole
path i.e. the creation and ramiﬁcation ftp-socket event for
categorization by using anomaly score propagation algorithm.
PrioTracker [49] accelerates the forward tracing by prioritizing
abnormal events. Unlike PrioTracker, NODOZE focuses on
triaging alerts and generating a more precise provenance graph.
Furthermore, Priotracker only considers the abnormality of
single events, it is not capable to distinguish similar events
with different contexts in the dependency graph, such as E1
and E2 in our motivating example in Figure 2a.
Dependency graph compression techniques [47], [36], [30]
are proposed to reduce the space overhead of provenance
tracking. Provenance visualization [28] technique is also pro-
posed to facilitate data provenance analysis. As such, these
techniques do not remove any benign events for the efﬁcient
alert triage and investigation; however, NODOZE can use these
techniques to further decrease the overhead of backward and
forward tracing by removing redundant event.
XII. CONCLUSION
We develop NODOZE, a threat alert triage system that
features historical and contextual
information of generated
alerts to automatically triage alerts. NODOZE uses a novel
network diffusion algorithm to propagate anomaly scores in the
dependency graphs of alerts and generates aggregate anomaly
scores for each alert. These aggregate anomaly scores are then
used by NODOZE to triage alerts. Our evaluation results show
that our system substantially reduces the slog of investigating
false alarms and accelerates the incident investigation with
concise contextual alerting. NODOZE runtime overhead is low
enough to be practical and can be deployed with any threat
detection software.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their
helpful feedback. This work was supported in part by the
National Science Foundation under contracts CNS-16-57534
and CNS-17-50024. This work was done while Wajih Ul
Hassan and Shengjian Guo were interns under the supervision
of Ding Li at NEC Labs America. Ding Li is the corresponding
author of this paper. Any opinions, ﬁndings, conclusions,
or recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of their
employers or the sponsors.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
“Event Tracing,” https://docs.microsoft.com/en-us/windows/desktop/
ETW/event-tracing-portal.
“Automated Incident Response: Respond to Every Alert,” https://
swimlane.com/blog/automated-incident-response-respond-every-alert/.
“Endpoint Monitoring & Security,” https://logrhythm.com/solutions/
security/endpoint-threat-detection/.
“How Many Alerts is Too Many to Handle?” https://www2.ﬁreeye.com/
StopTheNoise-IDC-Numbers-Game-Special-Report.html.
“Insider Threat Detection,” https://www.netwrix.com/insider threat
detection.html.
“New Research from Advanced Threat Analytics,” https://prn.to/
2uTiaK6.
“Pass-the-hash attacks: Tools and Mitigation,” https://www.sans.
org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-
mitigation-33283, 2010.
14
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
“Automated Security Intelligence (ASI),” https://www.nec.com/en/
global/techrep/journal/g16/n01/160110.html, 2018.
“Dangerous and malicious ﬁle extensions,” https://www.ﬁle-extensions.
org/ﬁletype/extension/name/dangerous-malicious-ﬁles, 2018.
“Google Safe Browsing,” https://developers.google.com/safe-browsing/
v4/, 2018.
“System administration utilities,” man7.org/linux/man-pages/man8/
auditd.8.html/.
“200,000+ Systems Affected by WannaCry Ransom Attack,” https://
www.statista.com/chart/9399/wannacry-cyber-attack-in-numbers/.
“CVE-2014-6271,” https://nvd.nist.gov/vuln/detail/CVE-2014-6271.
“MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corrup-
tion,” https://www.rapid7.com/db/modules/exploit/windows/smb/ms17
010 eternalblue.
“Target Missed Warnings in Epic Hack of Credit Card Data,” https:
//bloom.bg/2KjElxM.
“CVE-2008-0081,”
2018.
“Persistent
metasploit-unleashed/persistent-netcat-backdoor/, 2018.
“Ransom.Wannacry,” https://symc.ly/2NSK5Rg, 2018.
“VirusTotal,” https://www.virustotal.com/, 2018.
“VPNFilter: New Router Malware with Destructive Capabilities,” https:
//symc.ly/2IPGGVE, 2018.
https://nvd.nist.gov/vuln/detail/CVE-2008-0081,
https://www.offensive-security.com/
netcat
backdoor,”
[21] S. Axelsson, “The base-rate fallacy and the difﬁculty of intrusion
detection,” ACM Trans. Inf. Syst. Secur., 2000.
[22] D. Barbar´a and S. Jajodia, Applications of data mining in computer
security. Springer Science & Business Media, 2002.
[23] A. Bates, K. Butler, A. Haeberlen, M. Sherr, and W. Zhou, “Let SDN
Be Your Eyes: Secure Forensics in Data Center Networks,” in SENT,
2014.
[24] A. Bates, W. U. Hassan, K. Butler, A. Dobra, B. Reaves, P. Cable,
T. Moyer, and N. Schear, “Transparent web service auditing via network
provenance functions,” in WWW, 2017.
[25] A. Bates, B. Mood, M. Valafar, and K. Butler, “Towards secure
provenance-based access control in cloud environments,” in CODASPY,
2013.
[26] A. Bates, D. Tian, K. R. B. Butler, and T. Moyer, “Trustworthy whole-
system provenance for the linux kernel,” in USENIX Security, 2015.
[27] N. Ben-Asher and C. Gonzalez, “Effects of cyber security knowledge
on attack detection,” Computers in Human Behavior, vol. 48, 2015.
[28] S. P. Callahan, J. Freire, E. Santos, C. E. Scheidegger, C. T. Silva,
and H. T. Vo, “Vistrails: Visualization meets data management,” in
SIGMOD. ACM, 2006.
[29] V. Chandola, A. Banerjee, and V. Kumar, “Anomaly detection: A
survey,” ACM Comput. Surv., 2009.
[30] C. Chen, H. T. Lehri, L. Kuan Loh, A. Alur, L. Jia, B. T. Loo, and
W. Zhou, “Distributed provenance compression,” in SIGMOD, 2017.
[31] T. Chen, L.-A. Tang, Y. Sun, Z. Chen, and K. Zhang, “Entity
embedding-based anomaly detection for heterogeneous categorical
events,” in IJCAI, 2016.
[32] T. Chyssler, S. Burschka, M. Semling, T. Lingvall, and K. Burbeck,
“Alarm reduction and correlation in intrusion detection systems.” in
DIMVA, 2004.
J. Ellson, E. Gansner, L. Koutsoﬁos, S. C. North, and G. Woodhull,
“Graphvizopen source graph drawing tools,” in International Sympo-
sium on Graph Drawing. Springer.
[33]
[34] R. Harang and A. Kott, “Burstiness of intrusion detection process:
Empirical evidence and a modeling approach,” IEEE Transactions on
Information Forensics and Security, 2017.
[35] R. Hasan, R. Sion, and M. Winslett, “Preventing History Forgery with
Secure Provenance,” Trans. Storage.
[36] W. U. Hassan, M. Lemay, N. Aguse, A. Bates, and T. Moyer, “To-
wards Scalable Cluster Auditing through Grammatical Inference over
Provenance Graphs,” in NDSS, 2018.
[37] S. A. Hofmeyr, S. Forrest, and A. Somayaji, “Intrusion detection using
sequences of system calls,” J. Comput. Secur., 1998.
[38] W. Hu, Y. Liao, and V. R. Vemuri, “Robust anomaly detection using
support vector machines,” in ICML, 2003.
[39] X. Jiang, A. Walters, D. Xu, E. H. Spafford, F. Buchholz, and Y.-M.
Wang, “Provenance-aware tracing ofworm break-in and contaminations:
A process coloring approach,” in ICDCS, 2006.
[40] A. Kharraz, S. Arshad, C. Mulliner, W. K. Robertson, and E. Kirda,
“Unveil: A large-scale, automated approach to detecting ransomware.”
in USENIX Security Symposium, 2016.
[41] S. T. King and P. M. Chen, “Backtracking intrusions,” in SOSP, 2003.
[42] M. Kloft and P. Laskov, “A poisoning attack against online anomaly
detection,” in NIPS Workshop on Machine Learning in Adversarial
Environments for Computer Security, 2007.
[43] C. Kruegel, Intrusion Detection and Correlation: Challenges and So-
lutions. Springer-Verlag TELOS, 2004.
[44] Y. Kwon, F. Wang, W. Wang, K. H. Lee, W.-C. Lee, S. Ma, X. Zhang,
D. Xu, S. Jha, G. Ciocarlie et al., “MCI: Modeling-based causality
inference in audit logging for attack investigation,” in NDSS, 2018.
[45] A. Laszka, J. Lou, and Y. Vorobeychik, “Multi-defender strategic
ﬁltering against spear-phishing attacks.” in AAAI, 2016.
[46] K. H. Lee, X. Zhang, and D. Xu, “High Accuracy Attack Provenance
via Binary-based Execution Partition,” in NDSS, 2013.
[47] ——, “LogGC: garbage collecting audit log,” in CCS, 2013.
[48] W. Lee and S. J. Stolfo, “Data mining approaches for intrusion
detection,” in USENIX Security Symposium, 1998.
[49] Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal,
“Towards a timely causality analysisfor enterprise security,” in NDSS,
2018.
[50] S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu, “MPI:
Multiple perspective attack investigation with semantic aware execution
partitioning,” in USENIX Security Symposium, 2017.
[51] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards Practical Provenance
Tracing by Alternating Between Logging and Tainting,” in NDSS, 2016.
[52] P. Macko and M. Seltzer, “Provenance map orbiter: Interactive explo-
ration of large provenance graphs.” in TaPP, 2011.
[53] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser,
and G. Czajkowski, “Pregel: a system for large-scale graph processing,”
in ACM SIGMOD, 2010.
[54] K.-K. Muniswamy-Reddy, D. A. Holland, U. Braun, and M. Seltzer,
“Provenance-aware storage systems,” in ATC, 2006.
J. Park, D. Nguyen, and R. Sandhu, “A provenance-based access control
model,” in IEEE PST, 2012.
[55]
[56] D. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, “Hi-Fi: Collecting
High-Fidelity Whole-System Provenance,” in ACSAC, 2012.
[57] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni, “A fast automaton-
based method for detecting anomalous program behaviors,” in IEEE
S&P, 2001.
[58] R. Sommer and V. Paxson, “Outside the closed world: On using
machine learning for network intrusion detection,” in IEEE Symposium
on Security and Privacy, 2010.
[59] G. P. Spathoulas and S. K. Katsikas, “Using a fuzzy inference sys-
tem to reduce false positives in intrusion detection,” in International
Conference on Systems, Signals and Image Processing, 2009.
[60] S. J. Stolfo, S. Hershkop, L. H. Bui, R. Ferster, and K. Wang,
“Anomaly detection in computer security and an application to ﬁle
system accesses,” in International Symposium on Methodologies for
Intelligent Systems. Springer, 2005.
[61] G. Tandon and P. K. Chan, “On the learning of system call attributes
for host-based anomaly detection,” International Journal on Artiﬁcial
Intelligence Tools, 2006.
[62] D. Wagner and P. Soto, “Mimicry attacks on host-based intrusion
detection systems,” in CCS, 2002.
[63] Q. Wang, W. U. Hassan, A. Bates, and C. Gunter, “Fear and logging
in the internet of things,” in NDSS, 2018.
J. Wu, D. Peng, Z. Li, L. Zhao, and H. Ling, “Network intrusion
detection based on a general regression neural network optimized by
an improved artiﬁcial immune algorithm,” PloS one, 2015.
[64]
[65] Y. Wu, A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo, “Automated
network repair with meta provenance,” in NSDI, 2017.
[66] Y. Xie, D. Feng, Z. Tan, and J. Zhou, “Unifying intrusion detection and
forensic analysis via provenance awareness,” Future Gener. Comput.
Syst., 2016.
[67] Z. Xu, Z. Wu, Z. Li, K. Jee, J. Rhee, X. Xiao, F. Xu, H. Wang, and
G. Jiang, “High ﬁdelity data reduction for big data security dependency
analyses,” in CCS, 2016.
[68] C. Zhong, J. Yen, P. Liu, and R. F. Erbacher, “Automate cybersecurity
data triage by leveraging human analysts’ cognitive process,” in IEEE
BigDataSecurity, 2016.
15