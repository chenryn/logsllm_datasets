### 优化后的文本

#### 兼容性测试结果
- **95.65% (+25)**
- **99.31% (+2)**
- **99.08% (+1)**
- **98.32% (+7)**
- **88.69% (+8)**
- **97.24% (+5)**
- **96.43% (+1)**
- **97.56% (+0)**

#### 不兼容原因
- **[6, 21, 1, 2]**
- **[1, 0, 0, 0]**
- **[1, 0, 0, 0]**
- **[3, 0, 0, 0]**
- **[7, 24, 1, 5]**
- **[2, 1, 1, 0]**
- **[2, 0, 0, 0]**
- **[2, 0, 0, 0]**

#### 域名
即使长期存储，这些域名也很难恢复。因此，用户在不重新安装浏览器的情况下无法中止保护措施，从而确保了安全性的执行。

### 5.2 兼容性分析
该提案向后兼容，所有在旧版浏览器中运行的服务均不受影响。但只有满足SSLock保护要求的服务，在SSLock支持的浏览器中才能继续运行。通过在用户体验和现有网络的兼容性之间取得平衡，我们选择将“安全”作为SSLock保护域的主要选择。“安全”一词具有自解释性，用户期望当一个域名通过子域名明确强调其安全性时，它应当提供安全的内容。我们认为，如果一个“安全”域名欺骗性地提供不安全内容，那么该网站应被屏蔽。

**兼容性测试：** 我们对提议的命名格式（b）引入的兼容性问题表示关注。2009年5月，我们进行了兼容性测试，结果如表3所示。该测试旨在调查部署SSLock保护（例如在secure.gmail.com, www.secure.gmail.com等）后，有多少网站会被严重屏蔽。我们还将其与另一个听起来更技术化的命名选择“ssl”进行了比较。测试首先设置了一台标准安装CentOS Linux 5.2的机器，并准备了一个机器人，从每个特殊查询中提取Google前1000条记录。这些查询都限制返回的网站必须符合提议的命名格式（b）。某些查询进一步通过匹配关键词（如“银行”、“购买”和“购物”）来细化结果。机器人随后删除了相同域名的重复记录，并使用标准cURL v7.15.5库爬取每个网站。

**数据处理：** 对于标记为不兼容的条目，我们在Windows Vista系统中手动验证，并进行以下安排：
- **死网站（总计少于40个）** - 如果网站返回错误404或空白页，则视为死网站。看起来未维护或仅包含少量文字（如“发生错误”）的页面也被视为死网站。过期或无法解析的域名也包括在内。
- **未识别的证书颁发者** - 如果证书在Firefox 3或IE 8中有效，则记录被视为有效。由于我们的测试机缺乏一些知名根证书和中间证书机构（CA）的证书（所有EV证书以及VeriSign和Thawte签发的一些其他证书未被识别），因此需要这种安排。
- **证书过期** - 发现一些由认可的CA签发的证书仅在几天到几个月内过期。因此，我们在表3中单独列出一列，以查看证书过期如何影响兼容率。
- **混合内容** - 由于可扩展性问题，本实验忽略了混合内容作为兼容性问题。

**兼容率：** 如表3所示，92%的收集记录与SSLock兼容，因为它们拥有有效的证书。特别是与在线银行和购物相关的网站，平均兼容率达到97%。我们认为采样和结果是合理的。高兼容率提供了支持提议的命名约定的理由。此外，像汇丰银行（www.secure.hsbcnet.com）和PayPal（secure.paypal.com）这样的金融机构已经倾向于使用“安全”作为子域名来提供HTTPS内容。

### 5.3 限制
不出所料，SSLock继承了一些上游SSL缺陷，本文未对其进行处理。例如，在老版本浏览器中发现了一个SSL部署缺陷，使得在某些代理设置下SSL合法性可能受到损害。这里我们进一步列出一些重要的限制。然而，所有这些限制都不是SSLock特有的问题。

- **证书伪造**：SSL/SSLock依赖现有的PKI来确保证书的有效性。如果认证体系被破坏，整个PKI将崩溃，任何在线银行网站和当前使用的SSL解决方案都无法幸存。据报道，研究人员能够利用MD5中的缺陷伪造证书，而粗心的CA则可以颁发mozilla.com的有效证书。对于能够劫持域名并修改WHOIS详情的高级攻击者，他们也可以从长期存在且排名较高的CA申请有效证书，这些CA提供免费的域名验证证书。另一方面，通过诱使用户在其客户端证书存储中安装攻击者的自签名证书作为根CA证书，也可以破坏SSL。

- **拼写错误或未受保护的域名**：攻击者可能会使用一个与合法域名略有不同的域名。例如，如果启用了扩展通配符保护，secare.gmail.com（而不是使用secure作为子域名）的受损网站将永远不会触发SSLock保护。或者，攻击者可以购买完全钓鱼的域名secure.vvest.com（而不是secure.west.com），如果他们迫切希望购买相应的有效证书。

- **浏览器的钓鱼过滤器已经帮助防御了在域名抢注中服务的网站。然而，如果用户访问假域名并保持无知，没有任何完美的方案可以保护他们。用户有责任和要求验证域名，尤其是对他们认为重要的网站。为了辅助验证，自动建议功能会根据用户的浏览历史和书签建议条目。在Chrome中，搜索引擎的顶级条目也会作为可能的建议返回。由于假网站不太可能出现在实时建议中，Chrome中的建议可以更好地保护用户免受假网站的影响。此外，IE和Chrome现在突出显示域名，而Firefox 3.5突出显示HTTPS域名。我们还建议使用等宽字体来在一定程度上缓解此类攻击。随着时间的推移，采用零初始化的SSLock保护域名也将得到广泛引用。**

### 6. 保护
总体而言，SSLock确保只有具有有效证书的内容才会在SSLock保护的域名中被接受。鉴于攻击者不具备任意域名的有效证书，攻击者提供的任何未加密或无效内容都将被拒绝，从而防止其到达SSL应用程序。用户不再面临绕过选项从而危及安全的情况。相反，SSL应用程序将返回一个错误，说明服务可能受到攻击，并阻止任何其他敏感的在线活动。

在这里，我们将回顾第3节讨论的攻击，并解释SSLock如何作为唯一解决方案击败所有这些攻击。我们还将讨论一些特定于攻击的解决方案。

#### 6.1 攻击1再访
动态药房攻击不仅利用证书警告，还利用不安全的DNS基础设施。DNSSEC（详见第7.5节）可以通过保护DNS来缓解攻击1，但由于性能开销，DNSSEC的部署受到阻碍。攻击的原作者提出了锁定SOP（详见第7.4节）作为缓解措施，使得恶意JS即使到达浏览器也无法嗅探任何合法内容。然而，SOP实现已知存在问题。

借助SSLock，只要浏览器正确进入SSLock保护的域名secure.gmail.com（如我们在示例中讨论的那样），攻击就会被击败。这是因为任何证书错误都不会再触发可绕过的证书警告。相反，SSLock会简单地拒绝连接到只提供无效证书的攻击者服务器。因此，恶意JS甚至无法到达浏览器。

#### 6.2 攻击2再访
欺骗性的捕获门户引起了我们的注意，因为它通过“捕获”SSL连接本质上击败了SSL保护的目的。这无疑是一个影响浏览器和其他SSL应用程序的漏洞，但遗憾的是没有通用的解决方案。Windows 7试图通过警告用户登录可能需要获得互联网连接（如图4所示）来解决这种捕获行为。然而，如果浏览器的主页是HTTPS页面，此警告无法避免浏览器启动后出现的可绕过的证书警告。

SSLock通过拒绝由捕获门户发起的任何无效SSL连接来减轻SSLock保护域上的“捕获”行为。因此，用户没有机会绕过证书警告。结果，SSL服务也没有机会被欺骗性的捕获门户破坏。然而，SSLock可能会禁止用户访问互联网。为了解决这个问题，可以实现类似于Windows 7中的检测机制，只是当点击警告消息时，应该启动一个连接到虚拟HTTP页面的浏览器，然后在认证后重定向用户回到他们的主页。

#### 6.3 攻击3再访
SSLStrip攻击是一种强大的攻击，因为它完全消除了SSL保护的作用。用户被迫使用HTTP而不是HTTPS，并且不会像其他两种攻击那样显示任何证书警告。此外，唯一的攻击特定缓解措施——表明HTTPS存在的挂锁图标——也被假冒的favicon模仿。显然，视觉安全提示的有效性取决于用户的意识。但对于任何关键的安全系统来说，依赖用户作为主要防御手段注定会失败。

借助SSLock，没有HTTP内容会进入SSLock保护的域名中的浏览器。尽管浏览器尝试发起SSL协商，但由于攻击者无意通过SSL响应受害者，这注定会失败。因此，由于SSL协商失败，攻击被击败。再次，唯一的基本要求是正确进入SSLock保护的域名secure.gmail.com。

### 7. 相关工作
在这里，我们列举了一些按相关性排序的现有提案，并讨论这些提案如何缓解上述攻击。请注意，SSLock可以补充所有以下提案。

#### 7.1 ForceHTTPS
ForceHTTPS [11] 提出强制执行类似于SSLock保护的安全策略。然而，ForceHTTPS必须先由网站或用户初始化才能启用保护。如果攻击者在初始化之前（即初始化攻击）就出现，保护将无效。另一方面，初始化将生成一些以明文形式存储的特定于域的设置，从而使用户承担泄露浏览记录的风险。因此，ForceHTTPS内在地引入了一个两难境地，用户要么牺牲安全性，要么牺牲隐私。