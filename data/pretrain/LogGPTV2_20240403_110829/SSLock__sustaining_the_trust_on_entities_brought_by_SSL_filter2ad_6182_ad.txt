95.65% (+25) 
99.31% (+2)  
99.08% (+1)  
98.32% (+7)  
88.69% (+8)  
97.24% (+5)  
96.43% (+1)  
97.56% (+0)  
Incompatible Reasons 
[6,21,1,2] 
[1,0,0,0] 
[1,0,0,0] 
[3,0,0,0] 
[7,24,1,5] 
[2,1,1,0] 
[2,0,0,0] 
[2,0,0,0] 
domains 
hardly  recoverable  even  if  the  CL  is  stored  long-lastingly. 
Security enforcement is thus sustained as users are not allowed to 
neutralize protection unless their browsers are reinstalled. 
5.2  Compatibility Analysis 
  The  proposal  is  backward  compatible  such  that  all  services 
running  in  legacy  browser  are  unaffected.  But  only  services, 
hosted  in  SSLock-protected  domains,  fulfilling  the  requirements 
of  SSLock-protection  will  survive  in  SSLock-capable  browsers. 
By  striking 
the  balance  between  users’  perception  and 
compatibility  to  the  existing  web,  we  vote  for  secure  as  the 
primary choice for SSLock-protected domains. The word “secure” 
is self-explanatory and it is what typical users expected when the 
domain explicitly highlight its security by means of a subdomain. 
We  assert  that  a  website  deserves  to  be  blocked  if  its  “secure” 
domain is deceptively feeding insecure content. 
Compatibility  Test:  We  are  concerned  about  the  compatibility 
problem introduced by the proposed naming format (b) specified 
in Section 4. In May 2009, we then conducted a compatibility test 
which generated results as tabulated in Table 3. It is to investigate 
how severe websites are blocked if SSLock-protection is deployed 
(e.g. 
in 
secure.gmail.com, www.secure.gmail.com, and so on). We 
also compared the compatibility rate with another naming choice 
ssl which sounds more technical. The test began by setting up a 
machine  with  a  standard  installation  of  CentOS  Linux  5.2.  We 
then  prepared  a  robot  that  extracted  the  first  1000  records6 in 
Google  for  each  special  query.  These  queries  all  limited  the 
returned  websites  were  hosted  in  domains  conforming  to  the 
proposed naming format (b). Some of the queries further refined 
the  returned  results  by  matching  special  keywords  including 
“bank”, “buy” and “shop” in the websites’ context. The robot then 
removed  duplicate  records  that  were  of  the  same  domain.  After 
that, the robot crawled each of these websites using the standard 
cURL v7.15.5 library. 
Data  Processing:  For  any  entries 
that  were  flagged  as 
incompatible,  they  are  manually  verified  in  a  Windows  Vista 
system and the following arrangements are made. 
6 We  would  have  gathered  and  analyzed  even  more  records  if 
Google  does  not  apply  a  hard  limit  which  is  1000  for  every 
query. In addition, wildcard domain matching yields no results 
in Bing as well as Yahoo unfortunately. 
secure.*.com 
end  with 
that 
  Dead Websites (Less than 40 in total) – A website is dead if it 
returned  either  an  Error  404  or  a  blank  page.  Pages  that 
appeared  to  be  unmaintained  or  only  with  a  few  words  like 
“error  occurred”  are  also  considered  dead.  Expired  or 
unresolvable domains are as well taken into account. 
  Unrecognized  Certificate  Issuers  –  A  record  is  remarked  as 
valid if the certificate is valid in either Firefox 3 or IE 8. The 
arrangement is needed since our testing machine lacked some 
certificates  of  reputable  root  and  intermediate  certificate 
authority (CA). (All EV certificates and some others issued by 
big CAs like VeriSign and Thawte were not recognized.) 
  Certificate Expiry – A few certificates, signed by recognized 
CAs, were found expired only for a few days to few months. 
We  thus  separate  a  special  column  in  Table  3  to  see  how 
certificate expiry affects the compatibility rate. 
  Mixed Content – Owing to the scalability issue, we disregard 
mixed content as a compatibility issue in this experiment. 
Compatibility  Rate: As shown in Table 3, 92% of the gathered 
records  are  compatible  with  SSLock  because  they  possess  valid 
certificates. In particular websites with contexts related to online 
banking  and  shopping  have  an  even  higher  compatibility  rate 
reaching 97% on average. We believe the sampling and result is 
reasonably realistic. The high compatibility rate provides grounds 
to support the proposed naming convention. It is also found that 
financial  institutions  like  HSBC  (www.secure.hsbcnet.com) 
and Paypal (secure.paypal.com) have already favored the use 
of secure as a subdomain to serve HTTPS content. 
5.3  Limitations 
  Unsurprisingly, SSLock inherits a subset of upstream SSL flaws 
that are not handled in this paper. For instance, a SSL deployment 
flaw is found in aged browsers such that SSL legitimacy can be 
compromised under some proxy settings [24]. Here we further list 
out some important limitations. However, all these limitations are 
not failures specific to SSLock. 
Certificate Forgery: SSL/SSLock depends on the existing PKI to 
ensure certificate validity. If the certification is broken, the whole 
PKI  is  sentenced  to  death  along  with  any  other  online  banking 
websites, SSL solutions currently in play, and neither can SSLock 
survive.  It  was  reported  that  researchers  were  able  to  forge 
certificates owing to a defect in MD5 [25] and a valid certificate 
of mozilla.com could be applied from a careless CA [26]. For 
advanced attackers that are able to hijack a domain and modify its 
WHOIS  details,  they  can  also  apply  for  a  valid  certificate  from 
210long-lived  and  highly  ranked, 
CAs offering free domain-validated certificates. On the other hand, 
it  is  feasible  to  compromise  SSL  by  luring  users  to  install  an 
attacker’s  self-signed certificate  as a root CA certificate into the 
clients’ certificate stores. 
Misspelled  or  Unprotected  Domains:  An  attacker  may  use  a 
domain that slightly differs from a legitimate one. For instance, a 
compromised  website served in secare.gmail.com (instead of 
using  secure  as  the  subdomain)  will  never  trigger  the  SSLock 
protection  if  the  extended  wildcard  protection  is  not  enabled. 
Alternatively,  a  totally  phishing  domain  secure.vvest.com 
(instead  of  secure.west.com)  can  also  be  purchased  if  an 
attacker is eager to purchase a corresponding valid certificate.  
  Phishing  filters  of  browsers  have  already  helped  defend 
websites that are served in cybersquatting domains. However, it is 
asserted that no perfect schemes can ever protect users if they visit 
a  fake  domain  and  stay  ignorant.  It  is  the  users’  minimal 
obligation and requirement to verify domain names especially for 
websites they find important. To assist in verification, a robust aid 
is  the  auto-suggest  feature  which  suggests  entries  according  to 
users’ histories and bookmarks. In Chrome, top entries in search 
engine  are  also  returned  as  possible  suggestions.  Since  fake 
websites  are  unlikely 
live 
suggestions in Chrome can better protect users from reaching fake 
websites. In addition, both IE and Chrome now highlight domain 
names  while  Firefox  3.5  highlights  HTTPS  domainsError! 
Reference  source  not  found..  We  recommend  also  the  use  of 
fixed-width font to mitigate this type of attacks in certain extent. 
The zero-initialization SSLock-protected domains if adopted will 
also be widely referred as time evolves. 
6.  Protection 
  In general, SSLock assures that only content served with a valid 
certificate  is  accepted  in  SSLock-protected  domains.  Given  that 
attackers  do  not  possess  valid  certificates  for  arbitrary  domains, 
any unencrypted or invalid content served by attackers is simply 
denied and guarded from reaching SSL applications. Users will no 
longer  be  presented  with  bypassable  options  that  compromise 
security.  Instead,  a  SSL  application  simply  returns  an  error, 
describes that the service is possibly under attack and discourages 
any other sensitive online activities. 
  Here  we  revisit  the  attacks  discussed  in  Section 3  and  explain 
how SSLock, being the only single solution, defeat all the visited 
attacks. We also discuss some attack-specific solutions. 
6.1  Attack 1 Revisited 
  The dynamic pharming attack serves as a characteristic example 
exploiting not only certificate warnings but also the insecure DNS 
infrastructure.  DNSSEC  (details  in  Section  7.5)  can  mitigate 
attack  1  by  securing  the  DNS,  however  the  deployment  of 
DNSSEC  is  hampered  by  the  performance  overhead  introduced. 
The original authors of the attack proposed Locked SOP (details 
in Section 7.4) for mitigation so that the malicious JS, even if it 
reached  the  browser,  fails  to  sniff  at  any  legitimate  content. 
However, SOP implementation is known to be problematic [17]. 
  With  SSLock,  as  long  as  the  browser  lands  in  the  correct 
SSLock-protected  domain  secure.gmail.com  as  discussed  in 
our  example,  the  attack  is  defeated.  It  is  because  any  certificate 
errors  will  no  longer  trigger  bypassable  certificate  warnings. 
Instead,  SSLock  simply  denies  the  connection  to  the  attacker’s 
server  that  presents  only  invalid  certificate.  Therefore,  the 
malicious JS fails to even reach the browser. 
Figure 4: Windows 7 detects the “captive” behavior. 
6.2  Attack 2 Revisited 
  The deceptive captive portal is brought to our attention because 
by  taking  SSL  connections  “captive”  it  intrinsically  defeats  the 
purpose  of  SSL  protection.  It  is  indisputably  a  vulnerability 
affecting  both  browsers  and  other  SSL  applications  but 
unfortunately there are no universal solutions. Windows 7 tries to 
address this captive behavior by warning users that log on may be 
required  to  gain  Internet  connectivity  as  depicted  in  Figure  4. 
However given that the homepage of a browser is a HTTPS page, 
this warning cannot avoid the bypassable certificate warning after 
the browser is launched.  
  SSLock  mitigates  the  “captive”  behavior  on  SSLock-protected 
domains by denying any invalid SSL connections initiated by the 
captive  portal.  A  user  is  thus  given  no  chance  to  bypass  the 
certificate warning. As a result, a SSL service also has no chance 
to  be  compromised  by  the  deceptive  captive  portals.  However, 
SSLock  may  prohibit  a  user  from  getting  to  the  Internet.  To 
address  this  problem,  a  detection  mechanism  like  the  one  in 
Windows 7 can be implemented except that the warning message, 
when  clicked,  should  instead  launch  a  browser  connecting  to  a 
dummy  HTTP  page  and  then  redirecting  users  back  to  their 
homepage after authentication. 
6.3  Attack 3 Revisited 
  The SSLStrip attack is a powerful attack because it demilitarizes 
entirely the use of SSL protection. Users are forced to use HTTP 
instead of HTTPS and not presented with any certificate warnings 
as in the other two attacks. In addition, the padlock, being the only 
attack-specific mitigation which indicates the presence of HTTPS, 
is  also  imitated  by  a  fake  favicon.  Clearly,  the  effectiveness  of 
visual  security  clues  depends  on  users’  awareness.  But  it  is 
doomed failure for any security-critical systems to rely on users as 
the main defense [1]. 
  With  SSLock,  no  HTTP  content  will  enter  the  browser  in  the 
SSLock-protected  domains.  Although  the  browser  attempts  to 
initiate SSL negotiation, it is doomed to failure as the attacker has 
no  intention  to  respond  the  victim  over  SSL.  The  attack  is  thus 
defeated  because  of  the  failed  SSL  negotiation.  Again,  the  only 
essential  requirement  is  to  land  in  the  correct  SSLock-protected 
domain secure.gmail.com. 
7.  RELATED WORK 
  Here  we  enumerate  some  existing  proposals  ordered  by 
relevance to this paper. We also discuss how these proposals can 
mitigate the addressed attacks. Note that SSLock can complement 
all of the following proposals. 
7.1  ForceHTTPS 
  ForceHTTPS  [11]  is  proposed  to  enforce  security  policies 
similar  to  SSLock-protection.  However,  ForceHTTPS  must  be 
first initiated either by a website or user to enable protection. If an 
adversary comes before the initialization has taken place (i.e. an 
initialization  attack),  the  protection  is  ineffective.  On  the  other 
hand,  the  initialization  will  generate  some  domain-specific 
211settings stored in plaintext so that users have to bear the risk of 
leaking  their  browsing  records.  ForceHTTPS  thus  intrinsically 
introduces  a  dilemma  since  users  will  have  to  either  sacrifice 