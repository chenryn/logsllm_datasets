# 【技术分享】通过Exchange ActiveSync访问内部文件共享
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**摘要**
Exchange ActiveSync (EAS) 是用于在消息服务器和移动设备之间同步电子邮件、策略和其他内容的协议。
我发现仅仅使用Exchange用户邮箱凭据就可以远程访问Windows 文件共享和内部 SharePoint 站点。我们已经在Exchange
2013和2016版本的默认设置中证实了这一点，尽管在2010版本中已经[删除](https://technet.microsoft.com/en-us/library/aa998911%28EXCHG.140%29.aspx)了 Outlook Web App 文件共享的访问功能。
基于这个研究，MWR[公布](https://labs.mwrinfosecurity.com/tools/peas-access-internal-fileshares-through-exchange-activesync/)了PEAS库，用来协助访问共享文件和执行其他EAS命令。
**研究**
* * *
**目标**
MWR的网络防御顾问会帮助客户设计安全的企业体系结构。作为注重研究的顾问，我们会看中目前企业体系结构中存在的薄弱环节。
Microsoft
Exchange是一个广泛使用的企业电子邮件服务器，由于其函数本质，服务器需要从互联网进行访问。外部攻击者会周期性地攻击Exchange，尝试去访问存储在电子邮件中的敏感信息库和目标企业的内部网络。
由于外部接口太多，Exchange存在太多的“攻击面”。电子邮件就是主要的一个，已经有大量的内部电子邮件解析器漏洞报告显示会给Exchange自己带来代码执行类的安全漏洞（从这个[例子](http://blog.talosintel.com/2016/07/vulnerability-spotlight-oracles-outside.html)就可以明显的看出）。最近的新研究还发现攻击者会滥用设置复杂信息处理规定在工作站中实现代码执行。
在这项服务推出的这些年来，已经报告过太多包括Outlook Web Access (OWA)在内的各种问题。
最终，EAS连接器允许手机这类的设备互相连接来交换信息。这份协议相对比较复杂，内容就是加入移动设备的相关规则。
研究的主要目标就是查明EAS中存在的功能性漏洞，尤其是证实远程访问共享文档的可能性（在它被[发现](https://msdn.microsoft.com/en-us/library/cc425499%28EXCHG.80%29.aspx)之后）。为实现这个目标，我将任务分为以下几个子任务：
建立域控制器，并安装Microsoft Exchange 服务器。
测试现有的 Python EAS 项目并适当修改，以提取邮箱中的所有电子邮件。
在安全评估中执行共享文件访问以及其他功能。
**以前的研究**
在之前的文章[《Exchange移动平台的SSL实现弱点》](http://data.openduck.com/wp-posts/2013/12/paper-exchanging/demands.pdf)中，研究人员发现可以利用MitM
远程擦除设备。他们提出的关于访问远程共享文件的几点建议都是无效的，但是他们正确指出了禁用SSL来协助监视EAS信息交换的可行性。
**EAS协议**
可以通过[EAS文件](https://msdn.microsoft.com/en-us/library/cc425499%28EXCHG.80%29.aspx)对该协议做个简单了解。EAS使用XML通过HTTPS编码成WAP 二进制
XML (WBXML)。下面是一个示例：
          1 
          7 
使用十六进制编辑器时，WBXML 看起来是这样的：
    0000000: 0301 6a00 455c 4f4b 0331 0001 5203 3700 ..j.EOK.1..R.7. 
    0000010: 0101 0101 ....
这些数据会通过一个 HTTP POST
请求发送到EAS网络站点中，一起被发送的还有呈GET参数形式的用户和设备信息。标头用于授权、会话管理和区分EAS版本。
服务器的响应也是相应的WBXML。
**服务器安装**
虚拟机配置运行的是 Windows 2012 R2 标准 （64
位）。最开始没有足够的RAM来运行OS和Exchange，所以如果想要重复过程，最好使用至少8GB的容量；第二次分配需要10GB，其中正在使用的是7.8GB。
服务器中启用了活动目录，还创建了一个新的目录林，主机也被升级成域控制器。
可以用两个任务来安装Microsoft Exchange Server
2013，这是不同于默认安装的唯一途径。启用“邮箱任务”是因为需要它来控制用户邮箱，这也是Exchange的主要功能。启用”客户端访问任务“是因为这是ActiveSync客户端、Outlook
Web Access、 POP3、 IMAP4协议和Web 服务的使用前提。
安装之后，OWA可以通过[https://server-name/owa/](https://server-name/owa/)
访问，EAC可以通过[https://server-name/ecp/](https://server-name/ecp/)访问，这两种访问都依赖于互联网。
最开始就只有一个管理员邮箱。使用EAC可以创建一个新的邮箱，使用OWA可以在新邮箱和管理员邮箱之间成功发送电子邮件。
有关服务器安装的更多详细信息可以在这一研究项目的git存储库中找到。
**测试**
为了对这个协议有一个切实的了解，同时对服务器进行测试，我们在[指南](http://mobilitydojo.net/2010/03/17/digging-into-the-exchange-activesync-protocol/)和协议文件的帮助之下，编写了一个WBXML的HTTP请求，然后利用Python发送给 Exchange 服务器。
用管理员账户发送一个Sync指令的返回值是状态代码126，记录为”UserDisabledForSync“，意思就是ActiveSync
被禁用。尝试使用新的邮箱账户发送相同的命令就没有这样的问题，这就意味着管理员账户在默认情况下存在一些限制行为。
服务器通过互联网响应了EAS请求，不需要进行额外配置。
**现有软件回顾**
我们想要通过搜索Github、Stackoverflow和谷歌来确定一个内容详尽的Python 项目。如果发现现有的 Python
库不适合，其他两个项目就会用来参考编写新软件。
只有两个Python项目可以直接与使用EAS的服务器通信：pyActiveSync和py-eas-client。对比这两者的性能评估可以确定哪一个更完整地执行了该协议，哪一个更有利于研究。两个库的包装的编写都是为了创建一个一致的接口，并形成我们此次研究成果中的基础工具。
pyActiveSync
pyActiveSync部分支持EAS 12.1版本，可以执行服务器提供的23个指令中的17个。它附带一些示例代码，但是没有相关文档。
pyActiveSync 需要创建的 Python 源文件被称为 proto_creds.py，其中包含 EAS 服务器地址、
用户名和密码。它会永久地存储在本地数据库中以便于日后恢复。
为了在测试环境下使用库，必须要禁用SSL验证。示例代码试图请求”推荐联系人“，但这是根本不存在的，所以也必须禁用。在此之后，这个库就可以成功地向测试服务器器请求邮件了。
py-eas-client
使用一个恰当的setup.py脚本包就可以成功安装py-eas-client。它只支持23个指令中的4个。
py-eas-client使用 Twisted，也就是说它的功能与 Twisted库的运行方式绑定，这使得扩展变得困难。它还会从 Python
库中生成WBXML，这使得其存在极大的限制，还会为其他用户造成大[问题](http://stackoverflow.com/questions/25433201/create-an-activesync-sendmail-request-in-python)，最终只能选择 libwbxml。
要想在测试环境下使用库，还是需要禁用SSL验证。这会变得更加困难，因为必须要了解Twisted才可以完成。示例代码试图请求索引一个不存在的硬编码，所以这里做了修改，请求所有返回值。在这之后，这个库就可以成功地向测试服务器器请求邮件了。
软件回顾总结
pyActiveSync显然比py-eas-client支持更多的指令，同时更新状态也更佳，还不需要过渡到Twisted。这使得pyActiveSync成为了研究人员的更佳选择。
**潜在攻击**
虽然主要目标是获得共享文件的访问权，我们还是选择使用更全面的方式来调查可能存在的攻击。初步研究表明，Exchange
2010之后的版本都不可能支持共享文件的远程访问，但一定还存在其他的攻击形式。
我们解析了EAS文件，想要整理出每个文档示例部分所支持功能的列表。对于每个示例功能来说，可能的攻击手段应该都使用了STRIDE。