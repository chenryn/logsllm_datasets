s
6. Results 
Table  1  shows  a  summary  of  the  results  of  the  fault 
injection  experiments.  Two  versions  of  the  kernel  were 
evaluated.  One  without  support  for  time  redundancy, 
called Kernel, and one that implements time redundancy, 
called FT-Kernel.  
Table 1. Result of the fault injection  
Kernel
FT-kernel 
%    (95% conf)  # 
%    (95 % conf)  # 
Correct result 
80.9% (± 0.98%)  4962  88.8% (± 0.75%)  6017 
Fail-stop failure  17.4% (± 0.95%)  1068  10.1% (± 0.72%)  681 
Value failures 
1.73% (± 0.33%)  106  1.15% (± 0.25%) 
78 
Injected faults 
               6136   
              6776  
The  percentage  of  correct  results  produced  increases 
from 81% using Kernel to 89% using FT-kernel, while the 
fail-stop failures decrease from 17% to 10%.  
The  10%  fail-stop  failures  observed  for  the  FT-kernel 
are  caused  by 
the  cache.  The 
corresponding  errors  remained  latent  until  activated  by 
kernel  code,  for  which  no  recovery  mechanisms  are 
available. 
injected 
faults 
in 
The  value  failures  decrease  from  1.7%  to  1.1%.  The 
1.1% value failures stem either from the case when errors 
are not detected (0.7%) or when errors are detected but the 
recovery fails (0.4%). 
We  have  made  a  preliminary  investigation  of  the 
causes  for  the  0.7%  non-detected  errors.  We  conjecture 
that most of these are control flow errors (0.6%), i.e. there 
is  an  unexpected  jump  to  an  incorrect  location  in  the 
program  code,  although  further  investigation  of  the  error 
propagation is required  to  verify  this.  Another reason  for 
the  non-detected  errors  is  errors  in  the  output  variable 
from  the  second  task  copy  (which  is  used  as  the  final 
output)  after  the  checksum  has  been  calculated  (0.07%). 
The reason for the remaining non-detected errors (0.03%) 
has not yet been identified. 
The  0.4% recovery  failures  are  due  to  errors  affecting 
the  input  variables  in  the  second  and  third  task  copy, 
causing the majority voter to deliver a faulty output due to 
two  equal  but  faulty  results. The  cache  is  flushed,  i.e. all 
updated rows in the cache are written to memory, between 
each  task  copy  to  avoid  faults  injected  in the  cache-lines 
causing  two  copies  to  use  the  same  faulty  values.  This 
works for constants since they are not updated. However, 
input  variables  are  updated  in  the  first  task  copy  (all 
copies  use  the  same  input  variables)  causing  potentially 
faulty values to be written to main memory and be used by 
two subsequent task copies.  
Table  2  presents  the  percentage  of  errors  detected  by 
the  Thor  run-time  checks  and  the  double  execution 
mechanisms. 
Table 2. Percentage of errors detected by the 
error detection mechanisms for the FT-kernel. 
% 
(95 % conf) 
# 
All errors detected by Thor run-
time checks 
Errors detected by double 
execution 
14.74 % 
(± 0.84 %) 
999 
3.31 % 
(± 0.43 %) 
224 
The percentage of errors detected by all Thor run-time 
checks decreases from 17.4% for the Kernel, to 14.7% in 
the  case  of  the  FT-kernel  since  more  errors  were 
overwritten  during  execution  of  the  FT-kernel.  Time 
redundant  execution  of  critical  tasks  detects  3.3%  of  the 
errors.  Figure  7  shows  a  histogram  of  the  fault  tolerance 
latency  for  faults  detected  by  the  run-time  checks.  The 
fault  tolerance  latency  for  faults  detected  by  the  double 
execution  is  the  time  for  executing  the  task  again  and  a 
small  amount  of  time  for  performing  the  majority  vote 
(aprox. 105 us). 
Fault tolerance latency
Error detected by Thor run-time checks
s
r
o
r
r
e
f
o
.
o
N
150
100
50
0
100%
50%
0%
e
v
i
t
l
a
u
m
u
C
6
2
3
3
9
3
6
4
2
5
9
5
5
6
µs 
2
7
9
7
5
8
2
9
8
9
e
r
o
M
Figure 7. Fault tolerance latency 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:15:17 UTC from IEEE Xplore.  Restrictions apply. 
7. Conclusion 
The  experimental  evaluation  of  the  FT-kernel  clearly 
demonstrates  the  effectiveness  of  our  temporal  error 
masking  technique.  The  percentage  of  correct  results 
increased from 81% to 89% using temporal error masking, 
while  fail-stop  failures  decreased  from  17%  to  10%  and 
value 
to  1.1%.  
Nevertheless,  the  error  handling  mechanisms  in  the  FT-
kernel  need  to  be  improved  as  the  percentage  of  value 
failures is unacceptably high. 
failures  decreased 
from  1.7% 
the  Thor  processor. 
By  analyzing  the  fault  injection  data,  we  investigated 
the causes for the value failures. Most value failures were 
assumed to be caused  by  control-flow errors (0.6% of all 
errors).  It  is  likely  that  these  errors  would  have  been 
the  control  flow  checking  mechanism 
detected  by 
available 
in 
current 
implementation of the FT-kernel does not support the use 
of control flow checking.) The other main reason for value 
failures  (0.4%  of  the  errors)  was  errors  that  affected  the 
common  input to  the  second  and  third  execution  causing 
those  two  executions  to  produce  identical  but  incorrect 
checksums.  These  value  failures  can  be  avoided  by 
protecting  the  input  data  with  error  detecting  and 
correcting  codes.  They  can  also  be  avoided  by  using 
triplication and majority voting. 
(The 
Future work will focus on extending the FT-kernel with 
additional  error  detection  and  recovery  mechanisms  to 
further  reduce  the  probability  of  value  failures.  We  will 
investigate the techniques discussed above to improve the 
handling of errors affecting the application tasks. We will 
also  consider  mechanisms  to  handle  faults  that  affect  the 
execution  of  the  kernel  code.  These  mechanisms  will  be 
validated  by  injecting  faults  during  the  execution  of  the 
kernel  code.  We  will  also  validate  the  FT-kernel  with 
respect to transient faults in the main memory.  
8. Acknowledgements 
This  work  was  supported  by  ARTES  and  the  Swedish 
Foundation  for  Strategic  Research  (SSF).  We  would  like 
to  thank  Stefan  Asserhäll  and  Torbjörn  Hult  at  Saab 
Ericsson Space for their technical assistance with the Thor 
processor.  We  thank  Jerker  Lennevi  and  Henrik  Lönn  at 
Volvo  Technological  Development  for  providing  and 
supporting the brake-by-wire model. Special thanks go to 
Philip  Koopman  for  many  valuable  suggestions  and  for 
proposing the term temporal error masking. We also thank 
the anonymous reviewers for their constructive criticism. 
9. References 
[1]  R.K.  Iyer,  D.J.  Rossetti,  and  M.C.  Hsueh,  “Measurement 
and  Modeling  of  Computer  Reliability  as  Affected  by 
System Activity”, ACM Trans. on Computer Systems, 4(3), 
1986, pp. 214-37. 
[2]  E. Normand, “Single Event Upset at Ground Level”, IEEE 
Trans. on Nuclear Science, 43(6, pt.1), 1996, pp. 2742-50. 
[3]  Johnson  B.W.,  Design  and  Analysis  of  Fault-Tolerant 
Digital Systems, Addison-Wessley, 1989. 
[4]  N. Oh, P.P. Shirvani and E.J. McCluskey, "Error Detection 
by  Duplicated  Instructions  In  Super-scalar  Processors," 
IEEE Trans. on Reliability, Sep. 2001. 
[5]  Oh,  N., and  E.J. McCluskey,  “Procedure  Call  Duplication: 
Minimization  of  Energy  Consumption  with  Constrained 
Error  Detection  Latency”  in  Proc.  IEEE  Int’l  Symp.  on 
Defect  and  Fault  Tolerance  in  VLSI  Systems,  2001,  
pp. 182 –187. 
[6]  A. Damm, “The Effectiveness of Software Error-Detection 
Mechanisms  in  Real-Time  Operating  Systems”,  in  FTCS 
Digest of Papers. 16th Annual Int’l Symp. on Fault-Tolerant 
Computing Systems, Washington, DC, USA, 1986, pp. 171-
176. 
[7]  F.  Cristian,  “Understanding  Fault-Tolerant  Distributed 
Systems”, Comm. of the ACM, 34(2), 1991, pp. 56-78. 
[8]  J.  Vinter,  J.  Aidemark,  P.  Folkesson,  and  J.  Karlsson, 
“Reducing  Critical  Failures  for  Control  Algorithms  Using 
Executable Assertions and Best Effort Recovery”, in Proc. 
Int’l.  Conf.  on  Dependable  Systems  and  Networks. 
Göteborg, Sweden, 2001, pp 347 -356. 
[9]  T.  Lovric,  "Dynamic  Double  Virtual  Duplex  System:  A 
Cost-Efficient  Approach 
in 
Dependable  Computing  for  Critical  Applications  5,  IEEE 
Computer Society, 1998, pp 57-74. 
Fault-Tolerance", 
to 
[10] E. Rotenberg, "AR-SMT: A Microarchitectural Approach to 
Fault Tolerance in Microprocessors", in Proc Int’l Conf. on 
Dependable  Systems  and  Networks,  Madison,  WI,  USA, 
1999, pp 84-91. 
[11] Schuette,  M.A.,  Shen  J.P.,  Siewiorek  D.P.,  and  Zhu  Y.X., 
“Experimental  Evaluation  of  Two  Concurrent  Error 
Detection  Schemes”,  in  FTCS  Digest  of  Papers.  16th 
Annual  Int’l  Symp.  on  Fault-Tolerant  Computing  Systems, 
Washington, DC, USA, 1986, pp. 138-143. 
[12] Pradhan  D.K.,  Fault-Tolerant  Computer  System  Design, 
Upper Saddle River, New Jersey, Prentice Hall PTR, 1996. 
[13] A.  Burns,  S.  Punnekkat,  L.  Strigini,  and  D.R.  Wright, 
“Probabilistic  Scheduling  Guarantees  for  Fault-Tolerant 
Real-Time Systems”, in Dependable Computing for Critical 
Applications 7, Piscataway, NJ, USA, 1999, pp. 361-378. 
[14] G.  Fohler,  “Adaptive  Fault-Tolerance  with  Statically 
Scheduled  Real-Time  Systems”, in  Proc.  Ninth  Euromicro 
Workshop on Real Time Systems, Los Alamitos, CA, USA, 
1997, pp 161-167. 
[15] I.  Bate,  and  A.  Burns,  “Schedulability  Analysis  of  Fixed 
Priority  Real-Time  Systems  with  Offsets”,  in  Proc.  Ninth 
Euromicro Workshop on Real Time Systems, Toledo, Spain, 
1997, pp 153-160. 
[16] K.G.  Shin,  and  H.  Kim,  “Derivation  and  Application  of 
Hard  Deadlines  for  Real-Time  Control  Systems”,  IEEE 
Trans.  on  Systems,  Man  and  Cybernetics,  22(6),  1992  pp. 
1403-13. 
[17] Saab  Ericsson  Space  AB,  Microprocessor  Thor,  Product 
Information, 1993. 
[18] H.  Kim,  and  K.G.  Shin,  “Evaluation  of  Fault  Tolerance 
Latency from Real-Time Application's Perspectives”, IEEE 
Trans. on Computers, 49(1), 2000, pp. 55-64. 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:15:17 UTC from IEEE Xplore.  Restrictions apply.