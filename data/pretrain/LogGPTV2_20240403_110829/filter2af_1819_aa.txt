## Mips是个啥？
MIPS：无互锁流水级的微处理器(Microprocessor without Interlocked Piped Stages)
MIPS架构（英语：MIPS architecture，为Microprocessor without Interlocked Pipeline
Stages的缩写，亦为Millions of Instructions Per
Second的头字语），是一种采取精简指令集（RISC）的处理器架构，1981年出现，由MIPS科技公司开发并授权，广泛被使用在许多电子产品、网络设备、个人娱乐设备与商业设备上。最早的MIPS架构是32位，最新的版本已经变成64位。
## 机器周期
大多数计算机处理器都会不断地重复三个基本步骤。每个机器周期内会执行一条机器指令。一个现代的计算机处理器每秒钟运行数百万次机器周期。
一条机器指令是由一串对应着处理器基本操作的二进制码组成的，在不同的处理器架构中，机器周期的组成也不相同，但他们的基本行为都包含下面三个主要步骤：
  * 从内存中读取指令：指令存放在内存中，PC _(Program Counter)_ 存放了指令在内存中的地址
  * PC=PC+4：让PC指向下一条指令所在的地址
  * 执行所得到的指令
## 汇编语言
机器指令是由0,1的二进制码构成的因而人类无法阅读。相对应地，汇编语言允许我们使用相应的代码来编写指令。下面是对应的机器码和汇编语言：
**machine instruction**  
`0000 0001 0010 1011 1000 0000 0010 0000`
**assembly language statement**
    add $t0,$t1,$t2
这条指令的意思是：寄存器`$t0,$t1,$t2`间
    $t0 = $t1 + $t2
## 寄存器种类
  * MIPS下一共有32个通用寄存器
  * 在汇编中，寄存器标志由$符开头
  * 寄存器表示可以有两种方式
    * 直接使用该寄存器对应的编号，例如：从$0到$31
    * 使用对应的寄存器名称，例如：`$t1,$`sp
  * 对于乘法和除法分别有对应的两个寄存器`$lo,$`hi
    * 对于以上二者，不存在直接寻址；必须要通过`mfhi(“move from hi”)`以及`mflo(“move from lo”)`分别来进行访问对应的内容
    * 乘法：`HI` 存储32位高位， `LO`存储32位低位
    * 除法：`LO`存储结果，`HI`存储余数
  * 栈的走向是从高地址到低地址
### $0
即`$zero`,该寄存器总是返回零，为0这个有用常数提供了一个简洁的编码形式。
    move $t0,$t1
    #实际为  
    add $t0,$0,$t1
### $1
即`$at`，该寄存器为汇编保留，由于I型指令的立即数字段只有16位，在加载大常数时，编译器或汇编程序需要把大常数拆开，然后重新组合到寄存器里。比如加载一个32位立即数需要
lui（装入高位立即数）和addi两条指令。像MIPS程序拆散和重装大常数由汇编程序来完成，汇编程序必需一个临时寄存器来重组大常数，这也是为汇编保留`$at`的原因之一。
### $2..$3
即`$v0-$v1`，用于子程序的非浮点结果或返回值，对于子程序如何传递参数及如何返回，MIPS范围有一套约定，堆栈中少数几个位置处的内容装入CPU寄存器，其相应内存位置保留未做定义，当这两个寄存器不够存放返回值时，编译器通过内存来完成。简单来说：
**一般用于存储表达式或者函数的返回值(value的简写)**
### $4..$7
即`$a0-$a3`，用来传递前四个参数给子程序，不够的用堆栈。a0-a3和v0-v1以及ra一起来支持子程序／过程调用，分别用以传递参数，返回结果和存放返回地址。当需要使用更多的寄存器时，就需要堆栈（stack)了,MIPS编译器总是为参数在堆栈中留有空间以防有参数需要存储。
**参数寄存器(Argument简写)**
### $8..$15
即`$t0-$t7`临时寄存器，子程序可以使用它们而不用保留。 **一般用于存储临时变量(temp简写)**
### $16..$23
即`$s0-$s7`，保存寄存器，在过程调用过程中需要保留（被调用者保存和恢复，还包括`$fp`和`$ra`），MIPS提供了临时寄存器和保存寄存器，这样就减少了寄存器溢出（spilling,即将不常用的变量放到存储器的过程),编译器在编译一个叶（leaf)过程（不调用其它过程的过程）的时候，总是在临时寄存器分配完了才使用需要保存的寄存器。
**存放子函数调用过程需要被保留的数据(saved values)**
### $24..$25
即`$t8-$t9`，同`$t0-$t7`， **一般用于存储临时变量(temp简写)**
### $26..$27
即`$k0-$k1`，为操作系统／异常处理保留，至少要预留一个。
异常（或中断）是一种不需要在程序中显示调用的过程。MIPS有个叫异常程序计数器（exception program
counter,EPC)的寄存器，属于CP0寄存器，用于保存造成异常的那条指令的地址。查看控制寄存器的唯一方法是把它复制到通用寄存器里，指令`mfc0`(move
from system
control)可以将EPC中的地址复制到某个通用寄存器中，通过跳转语句（`jr`)，程序可以返回到造成异常的那条指令处继续执行。MIPS程序员都必须保留两个寄存器`$k0和$k1`，供操作系统使用。简单来说就是
**中断函数返回值，不可做其他用途**
### $28
即`$gp`，为了简化静态数据的访问，MIPS软件保留了一个寄存器：全局指针gp(global
pointer,`$gp`)，全局指针指向静态数据区中的运行时决定的地址，在存取位于gp值上下32KB范围内的数据时，只需要一条以gp为基指针的指令即可。在编译时，数据须在以gp为基指针的64KB范围内。
**指向64k(2^16)大小的静态数据块的中间地址（字面上好像就是这个意思，块的中间），GlobalPointer简写** 。
### $29
即`$sp`，MIPS硬件并不直接支持堆栈，你可以把它用于别的目的，但为了使用别人的程序或让别人使用你的程序，还是要遵守这个约定的，但这和硬件没有关系。
**栈指针，指向栈顶(Stack Pointer简写)**
### $30
即`$fp`，GNU MIPS C编译器使用了帧指针(frame
pointer),而SGI的C编译器没有使用，而把这个寄存器当作保存寄存器使用（`$s8`),这节省了调用和返回开销，但增加了代码生成的复杂性。
### $31
即`$ra`，存放返回地址，MIPS有个`jal`(jump-and-link,跳转并
链接)指令，在跳转到某个地址时，把下一条指令的地址放到`$ra`中。用于支持子程序，例如调用程序把参数放到`$a0`~`$a3`，后`jal
X`跳到X过程，被调过程完成后把结果放到`$v0`,`$v1`，然后使用`jr $ra`返回。 **栈指针，指向栈顶(Stack Pointer简写)**
## 程序结构（Program Structure）
  * 本质其实就只是数据声明+普通文本+程序编码（文件后缀为.s，或者.asm也行）
  * 数据声明在代码段之后（其实在其之前也没啥问题，也更符合高级程序设计的习惯）
### 数据声明（Data Declarations）
  * 数据段以 **.data** 为开始标志
  * 声明变量后，即在主存中分配空间。
### 代码（Code）
  * 代码段以 **.text** 为开始标志
  * 其实就是各项指令操作
  * 程序入口为 **main：** 标志（这个都一样啦）
  * 程序结束标志（详见下文）
### 注释（Comments）
感觉和c是有点像的
    # Comment giving name of program and description of function
    # 说明下程序的目的和作用（其实和高级语言都差不多了）
    # Template.s
    #Bare-bones outline of MIPS assembly language program
               .data       # variable declarations follow this line
                        # 数据变量声明
                           # ...
               .text       # instructions follow this line
                   # 代码段部分
    main:                  # indicates start of code (first instruction to execute)
                           # 主程序
                           # ...
    # End of program, leave a blank line afterwards to make SPIM happy
    # 结束
### 数据声明（Data Declarations）
    name:                   storage_type    value(s)
    变量名：（冒号别少了）     数据类型         变量值
  * 通常给变量赋一个初始值；对于 **.space** ,需要指明需要多少大小空间（bytes)
举个例子
    var1:       .word   3   # create a single integer variable with initial value 3
                       # 声明一个 word 类型的变量 var1, 同时给其赋值为 3
    array1:     .byte   'a','b' # create a 2-element character array with elements initialized
                    #   to  a  and  b
                       # 声明一个存储2个字符的数组 array1，并赋值 'a', 'b'
    array2:     .space  40  # allocate 40 consecutive bytes, with storage uninitialized
                    #   could be used as a 40-element character array, or a
                    #   10-element integer array; a comment should indicate which!
                       # 为变量 array2 分配 40字节（bytes)未使用的连续空间，当然，对于这个变量
                       # 到底要存放什么类型的值， 最好事先声明注释下！
### 加载/保存(读取/写入) 指令集（Load / Store Instructions）
  * 如果要访问内存，不好意思，你只能用 **load** 或者 **store** 指令
  * 其他的只能都一律是寄存器操作
#### load
    lw  register_destination, RAM_source
    #copy word (4 bytes) at source RAM location to destination register.
    从内存中 复制 RAM_source 的内容到 对应的寄存器中
    （lw中的'w'意为'word',即该数据大小为4个字节
    lb  register_destination, RAM_source
    #copy byte at source RAM location to low-order byte of destination register,
    # and sign-e.g.tend to higher-order bytes
    从内存中 复制 RAM_source 的内容到 对应的寄存器中
    同上， lb 意为 load byte
#### store word
    sw  register_source, RAM_destination
    #store word in source register into RAM destination
    #将指定寄存器中的数据 写入 到指定的内存中
    sb  register_source, RAM_destination
    #store byte (low-order) in source register into RAM destination
    #将源寄存器中的字节（低位）存储到内存中
#### load immediate:
    li  register_destination, value
    #load immediate value into destination register
    顾名思义，这里的 li 意为 load immediate，将立即值加载到目标寄存器
综上，举个例子
    .data
    var1:   .word   3       # declare storage for var1; initial value is 3
                       # 先声明一个 word 型的变量 var1 = 3;
        .text
    __start:
        lw  $t0, var1   # load contents of RAM location into register $t0:  $t0 = var1
                       # 令寄存器 $t0 = var1 = 3;
        li  $t1, 5      # $t1 = 5   ("load immediate")
                       # 令寄存器 $t1 = 5;
        sw  $t1, var1   # store contents of register $t1 into RAM:  var1 = $t1
                       # 将var1的值修改为$t1中的值： var1 = $t1 = 5;
        done
### 立即与间接寻址（Indirect and Based Addressing）
#### load address：
直接给了地址
    la  $t0, var1
    #copy RAM address of var1 (presumably a label defined in the program) into register $t0
    将 var1 的 RAM 地址（大概是程序中定义的标签）复制到寄存器 $t0
#### indirect addressing：
地址是寄存器的内容（可以理解为指针）
    lw  $t2, ($t0)
    #load word at RAM address contained in $t0 into $t2
    将 $t0 中包含的 RAM 地址处的字加载到 $t2
    sw  $t2, ($t0)
    #store word in register $t2 into RAM at address contained in $t0
    将寄存器 $t2 中的字存储到 $t0 中包含的地址的 RAM 中
#### based or indexed addressing：
+偏移量
    lw  $t2, 4($t0)
    #load word at RAM address ($t0+4) into register $t2
    #"4" gives offset from address in register $t0
    将 RAM 地址 ($t0+4) 的字加载到寄存器 $t2
    “4”给出寄存器 $t0 中地址的偏移量
    sw  $t2, -12($t0)
    #store word in register $t2 into RAM at address ($t0 - 12)
    #negative offsets are fine
    将寄存器 $t2 中的字存储到地址为 ($t0 - 12) 的 RAM 中
    负偏移也行
Note: based addressing is especially useful for:
arrays; access elements as offset from base address  
stacks; easy to access elements at offset from stack pointer or frame pointer
不必多说，要用到偏移量的寻址，基本上使用最多的场景无非两种：数组，栈。