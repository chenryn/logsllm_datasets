    (gdb)
这里简单说一下kvm_run，这是用于vcpu和应用层的程序（典型如qemu)通信的一个结构，user space的
程序通过KVM__VCPU_MMAP_SIZE这个ioctl得到大小得到大小，然后映射到用户空间。
    (gdb) x /2b 0x7ffff7ff4000+0x1000
    0x7ffff7ff5000: 10
我们通过gdb可以看到，我们在guest向端口写入的数据以及端口都能够从user space读出来。在这个示例程序中，
仅仅是把数据输出来，qemu中会根据端口去寻找对应的设备，然后执行对应的回调。
整体而言，out指令的流程是非常简单的，guest写端口，陷入kvm, kvm回到user space处理。
**三. PIO中in的处理流程**
虽然我们说guest访问端口包含了读写，都会导致vm exit。但是如果我们细想一下会发现，out和in肯定是不一样
的。out只需要guest写一个数据就好了，但是in还需要读回来数据。所以流程应该是guest发起一个in操作， 然后kvm处理，返回到user
space之中，把数据填到kvm_run结构中，这样，kvm得到数据了再vm entry，这样 in的数据就能够到guest中了。
我们队实例程序做简单修改。在test.S中首先从0x10端口读入一个值，这个值为0xbeff，然后写到端口0x10。
    test.S
    # A test code for kvmsample
    .globl _start
        .code16
    _start:
        xorw %ax, %ax
        mov  $0x0a,%al
        in $0x10,%ax
        out %ax, $0x10
        hlt
对main.c做如下修改：
在处理KVM_EXIT_IO的时候区分了一下in/out，对in我们拷贝一个0xbeff过去。然后用在guest中用out向 端口0x10输出这个值。
执行in指令的第一次仍然是陷入kvm handle_io处理，只是这次走另一条路：
    Thread 486 hit Breakpoint 1, handle_io (vcpu=0xffff88011d428000)
        at arch/x86/kvm/vmx.c:4816
    4816    {
    (gdb) n
    4821        exit_qualification = vmcs_readl(EXIT_QUALIFICATION);
    (gdb) 
    4825        ++vcpu->stat.io_exits;
    (gdb) 
    4827        if (string || in)
    (gdb) 
    4828            return emulate_instruction(vcpu, 0) == EMULATE_DONE;
    (gdb) s
    emulate_instruction (emulation_type=, vcpu=)
        at /home/test/linux-3.10.105/arch/x86/include/asm/kvm_host.h:811
    811     return x86_emulate_instruction(vcpu, 0, emulation_type, NULL, 0);
    (gdb) s
调用x86_emulate_instruction，这之中调用的最重要的两个函数时x86_decode_insn， x86_emulate_insn。
    int x86_emulate_instruction(struct kvm_vcpu *vcpu,
                unsigned long cr2,
                int emulation_type,
                void *insn,
                int insn_len)
    {
        int r;
        struct x86_emulate_ctxt *ctxt = &vcpu->arch.emulate_ctxt;
        bool writeback = true;
        bool write_fault_to_spt = vcpu->arch.write_fault_to_shadow_pgtable;
        /*
        * Clear write_fault_to_shadow_pgtable here to ensure it is
        * never reused.
        */
        vcpu->arch.write_fault_to_shadow_pgtable = false;
        kvm_clear_exception_queue(vcpu);
        if (!(emulation_type & EMULTYPE_NO_DECODE)) {
            init_emulate_ctxt(vcpu);
            r = x86_decode_insn(ctxt, insn, insn_len);
        }
    restart:
        r = x86_emulate_insn(ctxt);
        if (ctxt->have_exception) {
            inject_emulated_exception(vcpu);
            r = EMULATE_DONE;
        } else if (vcpu->arch.pio.count) {
            if (!vcpu->arch.pio.in)
                vcpu->arch.pio.count = 0;
            else {
                writeback = false;
                vcpu->arch.complete_userspace_io = complete_emulated_pio;
            }
            r = EMULATE_DO_MMIO;
        if (writeback) {
            toggle_interruptibility(vcpu, ctxt->interruptibility);
            kvm_set_rflags(vcpu, ctxt->eflags);
            kvm_make_request(KVM_REQ_EVENT, vcpu);
            vcpu->arch.emulate_regs_need_sync_to_vcpu = false;
            kvm_rip_write(vcpu, ctxt->eip);
        } else
            vcpu->arch.emulate_regs_need_sync_to_vcpu = true;
        return r;
    }
    EXPORT_SYMBOL_GPL(x86_emulate_instruction);
第一个函数，x86_decode_insn，顾名思义，就是解码当前的指令。
    int x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len)
    {
        /* Legacy prefixes. */
        for (;;) {
            switch (ctxt->b = insn_fetch(u8, ctxt)) {
        }
        /* Opcode byte(s). */
        opcode = opcode_table[ctxt->b];
        /* Two-byte opcode? */
        if (ctxt->b == 0x0f) {
            ctxt->twobyte = 1;
            ctxt->b = insn_fetch(u8, ctxt);
            opcode = twobyte_table[ctxt->b];
        }
        ctxt->d = opcode.flags;
        ctxt->execute = opcode.u.execute;
        ctxt->check_perm = opcode.check_perm;
        ctxt->intercept = opcode.intercept;
        rc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask);
        if (rc != X86EMUL_CONTINUE)
            goto done;
        /*
        * Decode and fetch the second source operand: register, memory
        * or immediate.
        */
        rc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask);
        if (rc != X86EMUL_CONTINUE)
            goto done;
        /* Decode and fetch the destination operand: register or memory. */
        rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask);
    }
首先通过insn_fetch获取指令，从下面的调试可以看到取到的指令正好是我们的in指令的机器码：
    (gdb) 
    4366            switch (ctxt->b = insn_fetch(u8, ctxt)) {
    (gdb) 
    4414        if (ctxt->rex_prefix & 8)
    (gdb) p ctxt->b
    $38 = 229 '345'
    (gdb) p /x ctxt->b
    $39 = 0xe5
之后根据指令，查表opcode_table找到对应的回调函数，将回调赋值给ctxt->execute.对于我们的in指令 来说这个回调是em_in函数。
    4472        ctxt->execute = opcode.u.execute;
    (gdb) 
    4473        ctxt->check_perm = opcode.check_perm;
    (gdb) p ctxt->execute 
    $41 = (int (*)(struct x86_emulate_ctxt *)) 0xffffffff81027238 
    (gdb) n
接下来就是调用三次decode_operand取出对应指令的操作数了。从下面的调试结果我们看出，源操作数
的值为ctxt->src->val=16，需要写到的寄存器是RAX，即ctxt->dst->addr.reg
    (gdb) n
    4528        rc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask);
    (gdb) n
    4529        if (rc != X86EMUL_CONTINUE)
    (gdb) p ctxt->src->val
    $42 = 16
    (gdb) n
    4533        rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask);
    (gdb) s
    ...
    (gdb) p op->addr.reg
    $46 = (unsigned long *) 0xffff88011d4296c8
    (gdb) p ctxt->_regs[0]
    $47 = 10
    (gdb) p &ctxt->_regs[0]
    $48 = (unsigned long *) 0xffff88011d4296c8
继续回到x86_emulate_instruction函数中，指令解码之后就是执行了，这是通过调用x86_emulate_insn 实现的。
    int x86_emulate_insn(struct x86_emulate_ctxt *ctxt)
    {
        const struct x86_emulate_ops *ops = ctxt->ops;
        int rc = X86EMUL_CONTINUE;
        int saved_dst_type = ctxt->dst.type;
        if (ctxt->execute) {
            if (ctxt->d & Fastop) {
                void (*fop)(struct fastop *) = (void *)ctxt->execute;
                rc = fastop(ctxt, fop);
                if (rc != X86EMUL_CONTINUE)
                    goto done;
                goto writeback;
            }
            rc = ctxt->execute(ctxt);
            if (rc != X86EMUL_CONTINUE)
                goto done;
            goto writeback;
        }
    writeback:
        rc = writeback(ctxt);
        if (rc != X86EMUL_CONTINUE)
            goto done;
    done:
        if (rc == X86EMUL_PROPAGATE_FAULT)
            ctxt->have_exception = true;
        if (rc == X86EMUL_INTERCEPTED)
            return EMULATION_INTERCEPTED;
        if (rc == X86EMUL_CONTINUE)
            writeback_registers(ctxt);
        return (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;
    }
最重要的当然是调用回调函数了
    rc = ctxt->execute(ctxt);
从之前的解码中，我们已经知道这是em_in了,相关调用函数如下：
    static int em_in(struct x86_emulate_ctxt *ctxt)
    {
        if (!pio_in_emulated(ctxt, ctxt->dst.bytes, ctxt->src.val,
                    &ctxt->dst.val))
            return X86EMUL_IO_NEEDED;
        return X86EMUL_CONTINUE;
    }
    static int pio_in_emulated(struct x86_emulate_ctxt *ctxt,
                unsigned int size, unsigned short port,
                void *dest)
    {
        struct read_cache *rc = &ctxt->io_read;
        if (rc->pos == rc->end) { /* refill pio read ahead */
            ...
            rc->pos = rc->end = 0;
            if (!ctxt->ops->pio_in_emulated(ctxt, size, port, rc->data, n))
                return 0;
            rc->end = n * size;
        }
        if (ctxt->rep_prefix && !(ctxt->eflags & EFLG_DF)) {
            ctxt->dst.data = rc->data + rc->pos;
            ctxt->dst.type = OP_MEM_STR;
            ctxt->dst.count = (rc->end - rc->pos) / size;
            rc->pos = rc->end;
        } else {
            memcpy(dest, rc->data + rc->pos, size);
            rc->pos += size;