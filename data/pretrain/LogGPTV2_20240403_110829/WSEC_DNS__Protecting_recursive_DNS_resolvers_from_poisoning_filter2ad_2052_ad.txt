### Introduction

In this work, we analyze the security of DNS (Domain Name System) and propose a novel method, Wildcard-Secure DNS (WSECDNS), to protect recursive DNS resolvers (RDNS) from brute-force cache poisoning attacks. Specifically, we focus on Kaminsky's attack [13], which exploits the vulnerability in the DNS protocol to inject forged responses into the DNS cache. Our analysis includes the impact of various parameters such as domain name length, network bandwidth, and defense mechanisms like 0x20-bit encoding and WSECDNS.

### Parameters and Assumptions

- **Domain Name Length (Γ0x20):** 
  - For short domain names containing 6 letters (e.g., cnn.com, aol.com), Γ0x20 = 26.
  - For average domain names, Γ0x20 = 212, based on [7] which reports an average length of 12 characters.
  - For longer domain names, Γ0x20 = 216.

- **WSECDNS Queries:**
  - We assume WSECDNS queries use random alphanumeric prefixes of length 5, resulting in ΓWSEC = 36^5 (combinations of lowercase letters and digits).

- **Round-Trip Time (RTT):**
  - The RTT between the RDNS and an Authoritative Name Server (ANS) is ΔT = 100 ms.
  - Each domain typically has 4 ANS, as observed for popular domains like cnn.com, aol.com, google.com, etc.

- **Attack Scenario:**
  - The attacker uses Kaminsky's technique [13] to launch a brute-force DNS cache poisoning attack.
  - The forged responses are 80 bytes long, similar to [12].
  - The attacker's available network bandwidth (BW) is considered in three scenarios: 1 Mbps, 10 Mbps, and 100 Mbps.
  - The attack frequency is fattack = ΔT−1 = 1/100 ms, meaning the attacker repeats the attack every 100 ms.

### Probability of Successful Cache Poisoning

The probability of successful cache poisoning for one attack attempt can be computed as:
\[ p_{\text{succ}} = 1 - p_{\text{fail}} = 1 - \sum_{i=0}^{M-1} \left(1 - \frac{1}{\Gamma - i}\right) \]
where \( \Gamma > M - 1 \). This equation assumes that the forged responses are generated without repetitions.

The total probability of success after launching \( n \) instances of the attack is:
\[ P_{\text{succ}} = 1 - (1 - p_{\text{succ}})^n \]

### Comparison of Defense Mechanisms

- **TXID + Source Port (16 bits):** 
  - Provides minimal protection, with \( \bar{T}_{\text{attack}} \) in the order of seconds.
  
- **TXID + 0x20 (6 letters):** 
  - Offers better protection, with \( \bar{T}_{\text{attack}} \) in the order of minutes.
  
- **TXID + 0x20 (12 letters):** 
  - Provides even better protection, with \( \bar{T}_{\text{attack}} \) in the order of days.
  
- **TXID + 0x20 (16 letters):** 
  - Offers robust protection, with \( \bar{T}_{\text{attack}} \) in the order of years.

- **WSECDNS (5 random prefix strings):** 
  - Provides the most robust protection, with \( \bar{T}_{\text{attack}} \) in the order of decades, even with high-bandwidth attacks.

### Experimental Results

We implemented WSECDNS on top of the PowerDNS recursive DNS resolver version 3.1.7. Our experiments involved replaying a dataset of real DNS queries to evaluate the performance and security of different configurations:

- **PowerDNS (pdns):** 
  - 220,930 queries to ANS, 3,892 ServerFailure messages, median RTT of 52 ms, 28.67 MB DNS traffic, and 3.25 MB cache usage.
  
- **PowerDNS + 0x20 (pdns+0x20):** 
  - 229,157 queries to ANS, 4,093 ServerFailure messages, median RTT of 73 ms, 30.04 MB DNS traffic, and 3.25 MB cache usage.
  
- **PowerDNS + WSECDNS + 0x20 (16) (pdns+WSEC+0x20(16)):** 
  - 255,605 queries to ANS, 4,066 ServerFailure messages, median RTT of 87 ms, 37.22 MB DNS traffic, and 4.79 MB cache usage.
  
- **PowerDNS + WSECDNS (pdns+WSEC):** 
  - 269,156 queries to ANS, 4,125 ServerFailure messages, median RTT of 90 ms, 41.11 MB DNS traffic, and 5.57 MB cache usage.

### Conclusion

WSECDNS significantly enhances the security of recursive DNS resolvers against brute-force cache poisoning attacks, including Kaminsky's attack. While it introduces some overhead in terms of latency, DNS traffic, and memory usage, these costs are justified by the substantial improvement in security. Additionally, WSECDNS maintains complete backward compatibility, allowing for incremental deployment without requiring changes at root and TLD nameservers.

### Acknowledgements

We thank David Dagon, Robert Edmonds, Prof. Farnam Jahanian, Scott Rose, Tom Karygiannis, and the anonymous reviewers for their valuable insights and comments. This work was supported in part by the National Science Foundation under Grant No. 0627477 and Grant No. 0831300, and the Department of Homeland Security under Contract No. FA8750-08-2-0141.

### References

[1] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose. DNS security introduction and requirements, March 2005. http://www.ietf.org/rfc/rfc4033.txt.

[2] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose. Protocol modifications for the DNS security extensions, March 2005. http://www.ietf.org/rfc/rfc4035.txt.

[3] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose. Resource records for the DNS security extensions, March 2005. http://www.ietf.org/rfc/rfc4034.txt.

[4] D.J. Bernstein. djb-dns. http://cr.yp.to/djbdns.html.

[5] D.J. Bernstein. DNSCurve. http://dnscurve.org.

[6] D.J. Bernstein. The DNS Security Mess, 2006. http://cr.yp.to/talks.html#2006.10.17.

[7] D. Dagon, M. Antonakakis, P. Vixie, J. Tatuya, and W. Lee. Increased DNS forgery resistance through 0x20-bit encoding. In ACM CCS, 2008.

[8] C.R. Dougherty. Vulnerability note VU#800113, 2008. https://www.kb.cert.org/vuls/id/800113.

[9] D. Eastlake and C. Kaufman. Domain name system security extensions, January 1997. http://www.ietf.org/rfc/rfc2065.txt.

[10] A. Householder and I.A. Finlay. Vulnerability note VU#457875, 2004. https://www.kb.cert.org/vuls/id/457875.

[11] J.G. Høy. AntiDNS spoofing-extended query ID (XQID), April 2008. http://www.jhsoft.com/dns-xqid.htm.

[12] A. Hubert and R. van Mook. Measures for making DNS more resilient against forged answers, July 2008. http://tools.ietf.org/html/draft-ietf-dnsext-forgery-resilience-06.

[13] D. Kaminsky. BlackOps 2008 – it's the end of the cache as we know it. Presented at BlackHat 2008, 2008.

[14] O.M. Kolkman. DNSSEC basics, risks and benefits, 2005. https://ripe.net/info/ncc/presentations/domain-pulse.pdf.

[15] B. Laurie, G. Sisson, R. Arends, and D. Blacka. DNS security (DNSSEC) hashed authenticated denial of existence, March 2008. http://www.ietf.org/rfc/rfc5155.txt.

[16] D. Leonard and D. Loguinov. Turboking: Framework for large-scale internet delay measurements. In IEEE INFOCOM, 2008.

[17] E. Lewis. The role of wildcards in the domain name system, July 2006. http://www.ietf.org/rfc/rfc4592.txt.

[18] P. Mockapetris. Domain names - concepts and facilities, November 1987. http://www.ietf.org/rfc/rfc1034.txt.

[19] P. Mockapetris. Domain names - implementation and specification, November 1987. http://www.ietf.org/rfc/rfc1035.txt.

[20] J. Oberheide. Hardening DNS with IP TTLs, 2008. http://jon.oberheide.org/blog/2008/08/10/hardening-dns-with-ip-ttls/.

[21] E. Osterweil, M. Ryan, D. Massey, and L. Zhang. Quantifying the operational status of the DNSSEC deployment, 2008. UCLA Technical Report http://irl.cs.ucla.edu/papers/080019.pdf.

[22] R. Perdisci, M. Antonakakis, X. Luo, and W. Lee. WSECDNS: Protecting recursive DNS resolvers from poisoning attacks (extended version), November 2008. Unpublished Technical Report, http://roberto.perdisci.com/projects/wsecdns.

[23] J. Stewart. DNS cache poisoning – the next generation. http://www.secureworks.com/research/articles/dns-cache-poisoning/, 2002.

[24] M. Wong and W. Schlitt. Sender policy framework (SPF) for authorizing use of domains in e-mail, version 1, April 2006. http://www.ietf.org/rfc/rfc4408.txt.