：
---
## Page 107
6.1发现漏洞91
+0x030 DriverStartIo
+0x034 DriverUnload
：
+0x038 MajorFunction
：[28]
调试器的输出显示MajorFunction[]数组从结构体偏移0x38处开始。看了
WDK的ntddk.h头文件后，我知道了IRP_MJ_DEVICE_CONTROL在MajorFunction[]
中位于偏移0x0e处，而且数组元素的尺寸是一个指针的大小（32位平台上的4
字节）。
因此，这个分派可用以下方式表示。
InC:DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]=IOCTL_dispatch_routine;
offsets
：Driverobject
+
0x38+0x0e*4
IOCTLdispatch_routine；
Simplified form:Driverobject
+
0x70
=IOCTL_dispatch_routine;
有无数方法可以表示这个Intel汇编的任务分派，但是我在avast!驱动程序代
码里找到的是下面这些指令。
[..]
.text:00010748
mov
eax，[ebp+DriverObject]
[..]
.text:00010750
mov
dword ptr [eax+70h]， offset sub_1098C
[..]
在地址.teXt：00010748处，一个指向DRIVER_OBJECT的指针保存在EAX寄存器中。
在地址.text:00010750处，IOCTL调度例程的函数指针赋给了MajorFunction[IRP_MJ
_DEVICE_CONTROL]。
Assignment in C:DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]= Sub_1098c;
offsets
：Driver0bject+0x70
=Sub_1098c;
最后我找到了这个驱动程序的IOCTL调度例程：Sub_1098C！借助调试器，也
可以找到IOCTL调度例程。
kd>1drvobjAavmKer47
*
Driverobject(86444f38)is for:
Aavmker4.SYS
\Driver\Aavmker4
Driver Extension List:(id，addr)
Device Object list:
863a9150
DriverEntry:
f792d620 Aavmker4
DriverStartIo:00000000
DriverUnload:0oo00000
---
## Page 108
92第6章一个内核统治一切
AddDevice:
00000000
Dispatch routines:
[00]
IRP MJ CREATE
f792d766
Aavmker4+0x766
[01]
IRPMJ_CREATENAMEDPIPE
f792d766
Aavmker4+0x766
02]
IRP_MJ_CLOSE
f792d766
Aavmker4+0x766
03]
IRP_MJ_READ
f792d766
Aavmker4+0x766
[04]
IRP_MJ_WRITE
f792d766
Aavmker4+0x766
[05]
IRP_MJ_QUERY_INFORMATION
f792d766
Aavmker4+0x766
06]
IRP_MJ_SET_INFORMATION
f792d766
Aavmker4+0x766
07]
IRP_MJ_QUERY_EA
f792d766
Aavmker4+0x766
08]
IRP_MJ_SET_EA
f792d766
Aavmker4+0x766
[09]
IRP_MJ_FLUSH BUFFERS
f792d766
Aavmker4+0x766
[oa]
IRP_MJ_QUERY_VOLUME_INFORMATION
f792d766
Aavmker4+0x766
[ob]
IRPMJSETVOLUMEINFORMATION
f792d766
Aavmker4+0x766
[oc]
IRP_MJ_DIRECTORY_CONTROL
f792d766
Aavmker4+0x766
[po]
IRP_MJ_FILE_SYSTEM_CONTROL
f792d766
Aavmker4+0x766
[oe]
IRP_MJ_DEVICE_CONTROL
f792d98c
Aavmker4+0x98c
[.]
调度例程。
找到这个调度例程后，我在这个函数里搜索实现的IOCTL。IOCTL调度例程
的原型如下。[13]
NTSTATUS
DispatchDeviceControl(
in struct_DEVICE_oBJECT*DeviceObject,
in struct _IRP*Irp
{...}
函数的第二个参数是一个指向IO请求数据包（IRP）结构的指针。IRP是
WindowsI/O管理器用来和驱动程序通信并允许驱动程序之间通信的基本结构体。
这个结构体传输用户提供的IOCTL数据以及IOCTL请求编号。[14]
然后，为产生一个IOCTL的列表，我查看了这个调度例程的反汇编码。
[.]
.text:0001098C；int
_stdcall sub_1098C(int,PIRP Irp)
.text:0001098C sub_1098C
proc near
；DATA XREF:DriverEntry+130
[..]
.text:000109B2
mov
ebx，[ebp+Irp]
；ebx = address of IRP
.text:000109B5
mov
eax,[ebx+60h]
[..]
IOCTL调度例程的地址.text：000109B2处，一个指向IRP结构体的指针保存
在了EBX寄存器中。之后，位于IRP结构体偏移0x60处的一个值被引用
---
## Page 109
6.1发现漏洞93
（见.text:000109B5）。
nt!_IRP
struct _IRP，21 elements,0x70 bytes
+0x000Type
：
+0x002 Size
证：
+0x004 Md1Address
+0x008Flags
i：
[..]
+0x040 Tail
：union
_unnamed,3elements,0x30 bytes
+0x0o00verlay
:struct
unnamed，8elements,0x28bytes
+Oxo00 DeviceQueueEntry：struct_KDEVICE_QUEUE_ENTRY，3elements,Ox10bytes
+0xooo DriverContext
[]：
+0x010 Thread
：
+0x014 AuxiliaryBuffer
+0x018 ListEntry
:struct
_LIST_ENTRY，2 elements，Ox8 bytes
+oxo2o CurrentStackLocation:????
[..]
WinDbg的输出显示，IRP结构体成员CurrentStackLocation位于偏移Ox60
处。这个结构体定义于Windows驱动程序开发包（WDK）的ntddk.h中。
[..]
//
//I/0 Request Packet(IRP） definition
11
typedef struct _IRP{
/1
//Currentstacklocation-contains a pointer tothe cuxrent
//IO_STACK_LOCATIONstructure in the IRPstack.
This field
//should never be directly accessedby drivers.
They should
//use the standard functions.
/1
struct _IO_STACK_LOCATION *CurrentStackLocation;
[..]
以下代码显示了_IO_STACK_LOCATION结构体的布局（见WDK的ntddk.h）。
[..]
typedefstruct_Io_STACK_LOCATION{
UCHAR MajorFunction;
UCHAR MinorFunction;
UCHAR F1agS;
UCHAR Control;
[..]
/1
//Systemservice parametersfor:NtDeviceIoControlFile
/1
//Note that the user's output buffer is stored inthe
//UserBuffer field
//and the user's input buffer is stored in the SystemBuffer
---
## Page 110
94第6章一个内核统治一切
// field.
//
struct{
ULONG OutputBufferLength;
ULONG POINTER_ALIGNMENT InputBufferLength;
ULONGPOINTER_ALIGNMENTIoControlCode;
PVOID Type3InputBuffer;
}DeviceIoControl;
[..]
除了IOCTL请求的IoControlCode，这个结构体还包含输人输出缓冲区的大
小信息。现在我有了更多关于_IO_STACK_LOCATION结构体的信息，再次查看反汇
编码。
[..]
.text:0001098C；int
stdcall sub_1098C（int,PIRP Irp)
.text:0001098C sub_1098C
proc near
；DATA XREF:DriverEntry+130
[..]
.text:00010982
mov
ebx,
[ebp+Irp]
；ebx=address of IRP
.text:000109B5
mov
eax,
[ebx+60h]
；eax=address of CurrentStackLocation
.text:000109B8
mov
esi,[eax+8]
；ULONG InputBufferLength
.text:000109BB
mov
[ebp+var_1C],esi；saveInputBufferlengthinvar_1C
.text:000109BE
mov
edx,[eax+4]
；ULONG OutputBufferLength
.text:000109C1
mov
[ebp+var_3C],edx；saveOutputBufferlengthinvar_3C
.text:000109C4
mov
eax,[eax+och]
；ULONG IoControlCode
.text:000109C7
mov
eCX,0B2D6002Ch；eCX=0xB2D6002C
.text:000109CC
cmp
eax,ecx
；compare0xB2D6002CwithIoControlCode
.text:000109CE
ja
1oc_10D15
[..]
之前提到过，在地址.text:000109B5处，一个指向_I0_STACK_LOCATION的指
针保存到EAx寄存器，然后，在地址.text：000109B8处，InputBufferLength保存
到ESI寄存器中。在地址.text:000109BE处，OutPutBufferLength保存在EDX寄存
器中，在地址.text：000109C4处，IoControlCode保存在EAx寄存器中。之后，EAX
中保存的IOCTL请求编号和值0xB2D6002C比较（见地址.text:000109C7
和.text：000109CC处）。嗨，我找到了驱动程序第一个有效的IOCTL代码！我在
函数里搜索所有与保存在EAX中的IOCTL请求编号进行比较的值，得到一份
Aavmker4.sys支持的IOCTL列表。
6.1.5第五步：找出用户控制的输入数据
得到驱动支持的IOCTL列表后，我尝试定位包含用户提供的IOCTL输人数
据的缓冲区。所有IRP_MJ_DEVICE_CONTROL请求都同时提供输人缓冲区和输出缓冲
---
## Page 111
6.1发现漏洞95
区。系统描述这些缓冲区的方式依赖于数据传输类型。传输类型保存在IOCTL代
码中。在微软Windows中，IOCTL代码值通常由CTL_cODE宏生成。[15]下面是ntddk.h
的另一段代码。
[..]
//
//Macro definition for defining IoCTL and FSCTL function control codes.Note
// that function codes 0-2047 are reserved for Microsoft Corporation, and
//2048-4095 are reserved for customers.
//
#define CTL_CoDE(DeviceType，Function，Method,Access）（
（（DeviceType)
02 #include 
03
04int
05main(int argc,char *argv[])
06{
07
unsigned int
method
=0;
08
unsigned int
code
=0;
60
10
if （argc1=2）{
11
fprintf (stderr,
"Usage:%s \n"，argv[o]);
12
return 1;
13