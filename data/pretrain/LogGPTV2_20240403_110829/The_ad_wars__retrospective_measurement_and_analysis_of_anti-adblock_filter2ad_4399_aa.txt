title:The ad wars: retrospective measurement and analysis of anti-adblock
filter lists
author:Umar Iqbal and
Zubair Shafiq and
Zhiyun Qian
The Ad Wars: Retrospective Measurement and Analysis of
Anti-Adblock Filter Lists
Umar Iqbal
The University of Iowa
Zubair Shafiq
Zhiyun Qian
The University of Iowa
University of California-Riverside
ABSTRACT
The increasing popularity of adblockers has prompted online pub-
lishers to retaliate against adblock users by deploying anti-adblock
scripts, which detect adblock users and bar them from accessing
content unless they disable their adblocker. To circumvent anti-
adblockers, adblockers rely on manually curated anti-adblock filter
lists for removing anti-adblock scripts. Anti-adblock filter lists cur-
rently rely on informal crowdsourced feedback from users to add/re-
move filter list rules. In this paper, we present the first comprehen-
sive study of anti-adblock filter lists to analyze their effectiveness
against anti-adblockers. Specifically, we compare and contrast the
evolution of two popular anti-adblock filter lists. We show that
these filter lists are implemented very differently even though they
currently have a comparable number of filter list rules. We then use
the Internet Archive’s Wayback Machine to conduct a retrospec-
tive coverage analysis of these filter lists on Alexa top-5K websites
over the span of last five years. We find that the coverage of these
filter lists has considerably improved since 2014 and they detect
anti-adblockers on about 9% of Alexa top-5K websites. To improve
filter list coverage and speedup addition of new filter rules, we
also design and implement a machine learning based method to
automatically detect anti-adblock scripts using static JavaScript
code analysis.
CCS CONCEPTS
• Security and privacy → Browser security; Web application
security;
KEYWORDS
Adblocking, Anti-Adblocking, JavaScript, Machine Learning, Pri-
vacy, Static Code Analysis, The Wayback Machine
ACM Reference Format:
Umar Iqbal, Zubair Shafiq, and Zhiyun Qian. 2017. The Ad Wars: Retrospec-
tive Measurement and Analysis of Anti-Adblock Filter Lists. In Proceedings
of IMC ’17, London, United Kingdom, November 1–3, 2017, 13 pages.
https://doi.org/10.1145/3131365.3131387
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, United Kingdom
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11. . . $15.00
https://doi.org/10.1145/3131365.3131387
1 INTRODUCTION
Millions of users around the world use adblockers on desktop and
mobile devices [31]. Users employ adblockers to get rid of intrusive
and malicious ads as well as improve page load performance and
protect their privacy. Since online publishers primarily rely on ads
to monetize their services, they cannot monetize their services if a
user employs an adblocker to remove ads. Online publishers have
lost billions of dollars in advertising revenues due to adblocking
[56]. Online publishers use two strategies to recoup lost advertising
revenues.
First, many online publishers and advertisers have become part
of the acceptable ads program [1], which allows their ads to be
whitelisted if they conform to the acceptable ads guidelines. Small-
and medium-sized publishers can enroll in the acceptable ads pro-
gram for free, however, large publishers need to pay about 30% of
the additional revenue recouped by whitelisting of acceptable ads.
Popular adblockers, such as Adblock Plus, use the acceptable ads
filter list to whitelist acceptable ads. While some stakeholders in the
advertising ecosystem think that the acceptable ads program offers
a reasonable compromise for users and publishers, there are linger-
ing concerns about the acceptable ads criteria and the transparency
of the whitelisting process [66].
Second, many online publishers have started to interrupt adblock
users by employing anti-adblock scripts. These anti-adblock scripts
allow publishers to detect adblock users and respond by showing
notifications that ask users to disable their adblocker altogether,
whitelist the website, or make a donation to support them. Most
publishers rely on third-party anti-adblock scripts provided by
vendors such as PageFair and Outbrain as well as community scripts
provided by the IAB and BlockAdblock.
Adblockers employ anti-adblock filter lists to remove anti-adblock
scripts and notifications by anti-adblockers. Similar to the filter lists
such as EasyList and EasyPrivacy for blocking ads and trackers
respectively, there are several crowdsourced anti-adblock filter lists
that are used by adblockers to circumvent anti-adblokcers. These
anti-adblock filter lists represent the state-of-the-art solution to
anti-adblockers for adblock users, but little is known about the
origin, evolution, and effectiveness of anti-adblock filter lists in
circumventing anti-adblockers.
To fill this gap, in this paper we present the first comprehensive
study of anti-adblock filter lists. We analyze the complete history of
crowdsourced anti-adblock filter lists and conduct a retrospective
measurement study to analyze their coverage over time. We also
develop a lightweight machine learning based approach to auto-
matically detect anti-adblock scripts using static JavaScript code
analysis. Our approach can complement crowdsourcing to speed
up the creation of new filter rules as well as improve the overall
coverage of filter lists.
IMC ’17, November 1–3, 2017, London, United Kingdom
Iqbal et al.
We address three research questions in this paper.
2 BACKGROUND & RELATED WORK
(1) How have the filter rules in anti-adblock filter lists evolved over
time? We analyze two anti-adblock filter lists, Anti-Adblock
Killer List and Combined EasyList (Adblock Warning Re-
moval List + Anti-Adblock sections in EasyList). Our analysis
reveals that they are implemented differently. More specifi-
cally, the Combined EasyList uses a few broadly defined filter
rules and then uses many more exception rules to take care
of false positives. In contrast, the Anti-Adblock Killer List
tends to contain high precision filter rules that target specific
websites. We also find that while the Combined EasyList is
updated almost daily, the Anti-Adblock Killer List is being
updated approximately once every month for the last one
year.
(2) How has the coverage of anti-adblock filter lists evolved over
time? We test different versions of anti-adblock filter lists on
historical snapshots of Alexa top-5K websites archived by
the Wayback Machine to study their coverage. We find that
the Anti-Adblock Killer List triggers on 8.7% websites and
the Combined EasyList only triggers on 0.4% websites cur-
rently. We further test both anti-adblock filter lists on Alexa
top-100K live websites. We find that the Anti-Adblock Killer
List triggers on 5.0% websites and the Combined EasyList
only triggers on 0.2% websites. While the Anti-Adblock Killer
List clearly seems to provide better coverage than the Com-
bined EasyList, it has not been updated by its authors since
November 2016.
(3) How can we improve creation of anti-adblock filter lists? To aid
filter list authors in maintaining anti-adblock filter lists, we
investigate a machine learning based automated approach
to identify anti-adblock scripts. Our method conducts static
analysis of JavaScript code to fingerprint syntactic features of
anti-adblock scripts. The evaluation shows that our method
achieves up to 99.7% detection rate and 3.2% false positive
rate. Our proposed machine learning based automated ap-
proach can aid filter list authors to more quickly update
anti-adblock filter lists as well as improve its coverage.
Our work is motivated by recent studies of different filter lists
[44, 58, 66] that are used by adblockers. Our findings highlight in-
herent limitations of manual curation and informal crowdsouricng
to maintain anti-adblock filter lists. Our work can help filter list
authors to automatically and quickly update anti-adblock filter lists.
Paper Organization. The rest of the paper is organized as follows.
§2 provides a brief background and discussion of related work on
anti-adblocking. §3 discusses the evolution of anti-adblock filter
lists. §4 presents our methodology to crawl historical snapshots of
Alexa top-5K websites from the Wayback Machine and our retro-
spective coverage analysis of anti-adblock filter lists. §5 discusses
our machine learning based approach to automatically detect anti-
adblock scripts using static analysis. Finally, we conclude in §6 with
an outlook to future research directions.
2.1 Background
Online publishers, advertisers, and data brokers track users across
the Web to serve them personalized content and targeted adver-
tisements. Online tracking is conducted using cookies, beacons,
and fingerprinting [44]. Online tracking has raised serious privacy
and surveillance concerns. Web tracking allows advertisers to infer
sensitive information about users such as their medical and finan-
cial conditions [57]. Nation states can piggyback on web tracking
information to conduct mass surveillance [45]. To combat privacy
and surveillance concerns, one solution is to block trackers and the
other is to block advertisements.
Tracker blockers remove network requests to known tracker do-
mains. Tracker blocking extensions are available for all major web
browsers. Ghostery [22] is one of the most popular tracker blocking
extensions. It is used by more than 2.6 million Google Chrome users
[23] and 1.3 million Mozilla Firefox users [24]. Another popular
tracker blocking extension is the EFF’s Privacy Badger [32], which
is used by more than 532K Google Chrome users [33] and 116K
Mozilla Firefox users [34]. Mainstream browsers such as Apple
Safari and Mozilla Firefox have developed built-in tracking preven-
tion solutions. Apple has recently launched Intelligent Tracking
Prevention [67] in Safari to mitigate excessive tracking. Mozilla
also has a tracking prevention solution [28] in the private browsing
mode of Firefox.
Adblocking extensions can remove both advertisements and
trackers. Like tracker blockers, adblocking extensions are also avail-
able for all major web browsers. Two of the popular adblockers are
Adblock Plus and AdBlock. Adblock Plus [4] is used by more than
10 million Google Chrome users [5] and 19 million Mozilla Fire-
fox users [6]. AdBlock [2] is used by more than 10 million Google
Chrome users [3]. Some new web browsers such as Cliqz [13] and
Brave [12] now have built-in adblockers. Google Chrome has also
recently announced that they will block ads [63] on websites that
do not comply with the Better Ads Standards set by the Coalition
for Better Ads [14].
Adblockers have become much more popular than tracker block-
ers because they provide benefits such as removal of intrusive ads,
protection from malware, and improved page load time in addition
to privacy protection against online tracking. A recent survey [31]
showed that 43% users install adblockers to get rid of interruptive
or too many ads, 30% to avoid spread of malware, 16% to boost the
page load time, and 6% to protect their privacy.
Adblockers rely on crowdsourced filter lists to block advertise-
ments and trackers. EasyList [16] is the most widely used filter
list to block advertisements. There are also some language-specific
filter lists to block advertisements such as EasyList Dutch [18], Ea-
syList Germany [18], and EasyList Spanish [18]. EasyPrivacy [18]
is the most widely used filter list to block trackers. Other tracker
blocking filter lists include Fanboy’s Enhanced Tracking List [19],
Disconnect.me [15], Blockzilla [11], and NoTrack Blocklist [30]. Ad-
blockers such as Adblock Plus and AdBlock, as well as web browsers
such as Cliqz and Brave, are subscribed to EasyList. Adblockers typ-
ically allow users to subscribe to different filter lists and incorporate
custom filter rules.
The Ad Wars
IMC ’17, November 1–3, 2017, London, United Kingdom
Filter list rules are regular expressions that match HTTP requests
and HTML elements. Adblockers block HTTP requests and hide
HTML elements if they match any of the filter rules. Below we
provide a brief overview of the syntax of HTTP request filter rules
and HTML element filter rules [20].
HTTP Request Filter Rules: HTTP request rules match against
URLs in the HTTP request headers. As shown in Code 1, these rules
may be domain specific with a domain anchor ((cid:2)) or a domain tag
(domain=). Rule 1 blocks HTTP requests to example1.com. Rule 2
blocks HTTP requests to example1.com to load JavaScript. Rule 3
blocks HTTP requests to example1.com to load JavaScript on ex-
ample2.com. Rule 4 blocks HTTP requests to download example.js
JavaScript on example2.com.
1
2
3
4
5
6
7
8
! R u l e 1
| | e x a m p l e 1 . c o m
! R u l e 2
| | e x a m p l e 1 . c o m $ s c r i p t
! R u l e 3
| | e x a m p l e 1 . c o m $ s c r i p t , d o m a i n = e x a m p l e 2 . c o m
! R u l e 4
/ e x a m p l e . j s $ s c i p t , d om a i n = e x a m p l e 2 . c o m
Code 1: HTTP request filter rules.
HTML Element Filter Rules: HTML element rules match against
HTML elements loaded in a web page and hide the matched ele-
ments. Code 2 shows three examples of HTML element filter rules.
Rule 1 hides the HTML element with ID examplebanner on exam-
ple.com. Rule 2 hides the HTML element with class name example-
banner on example.com. Rule 3 hides the HTML element with ID
examplebanner on any website.
1
2
3
4
5
6
! R u l e 1
e x a m p l e . c o m # # # e x a m p l e b a n n e r
! R u l e 2
e x a m p l e . c o m # # . e x a m p l e b a n n e r
! R u l e 3
# # # e x a m p l e b a n n e r
Code 2: HTML element filter rules.
Exception Rules: Exception rules override filter rules by allow-
ing HTTP requests and HTML elements that match other filter
rules. Exception rules are generally used to protect against false
positives by filter rules that cause site breakage. Code 3 shows two
examples of exception rules. Rule 1 allows HTTP requests to exam-
ple.com to load JavaScript. Rule 2 allows HTML element with ID
examplebanner on example.com.
! R u l e 1
1
2 @@| | e x a m p l e . c o m $ s c r i p t
3
4
! R u l e 2
e x a m p l e . c o m #@## e l e m e n t b a n n e r
Code 3: Exception rules for HTTP requests and HTML
elements.
2.2 Related Work
Online Tracking. Prior research has demonstrated the widespread
nature of online tracking. Krishnamurthy and Wills [51] showed
that top 10 third party trackers had grown from 40% in October
2005 to 70% in September 2008 for 1200 popular websites. In an-
other study, Ihm et al. [49] reported that the popularity of search
engines (google.com or baidu.com) and analytics sites (google-
analytics.com) had increased from 2006 to 2010. Lerner et al. [53]
conducted a retrospective study of online tracking on top-500 web-
sites using the Internet Archive’s Wayback Machine [38]. They
reported that the percentage of websites contacting at least 5 sep-
arate third parties has increased from 5% in early 2000s to 40% in
2016. They also reported that the coverage of top trackers on the
web is increasing rapidly, with top 5 trackers now covering more
than 60% of the top 500 websites as compared to less than 30% ten
years ago. Englehardt and Narayanan [44] showed that a handful
of third parties including Google, Facebook, Twitter, Amazon, and
AdNexus track users across a significant fraction of the Alexa top
one million websites. For example, they reported that Google alone
tracks users across more than 80% of Alexa top one million websites.
Tracker Blocking. Tracker blocking tools have had mixed success
in blocking online trackers. Roesner et al. [64] found that defenses
such as third-party cookie blocking, Do Not Track (DNT), and
popup blocking are not effective in blocking social media widgets
tracking. Englehardt and Narayanan [44] demonstrated that exist-
ing tracker blocking tools like Ghostery, Disconnect, EasyList, and
EasyPrivacy are less effective against obscure trackers. Merzdovnik
et al. [58] found that popular tracker blocking tools have blind
spots against stateless trackers and trackers with smaller footprints.
To improve tracker blockers, Gugelmann et al. [48] proposed an
automated approach that learns properties of advertisements and
analytics services on existing filter lists and identifies new services
to be included in adblockers’ filter lists. Yu et al. [69] proposed an
approach, inspired by k-anonymity, to automatically filter data sent
to trackers that have the potential to uniquely identify a user. Their
approach aims to block third-party tracker requests while avoiding
blanket blocking of 3rd parties based on blacklists. Ikram et al. [50]
proposed a one-class machine learning approach to detect trackers
with high accuracy based on their JavaScript code structure. In
the same spirit as prior research on improving tracker blocking
tools, in this paper we propose a machine learning approach to
detect anti-adblock filter lists. As we discuss later, our approach is
customized to capture syntactic behaviors of anti-adblockers.
Adblocking and Anti-Adblocking. Prior research has focused
on analyzing the prevalence of adblockers. Pujol et al. [61] analyzed
network traces from a major European ISP and found that 22% of the
most active users used Adblock Plus. Malloy et al. [55] conducted a
measurement study of 2 million users and found that 18% of users in
the U.S. employ adblockers. The increasing popularity of adblockers
has pushed online publishers to retaliate against adblock users.
First, some online publishers have started to manipulate ad deliv-
ery to evade filter lists. For example, publishers can keep changing
third-party domains that serve ads to bypass filter list rules. More
recently, Facebook manipulated HTML element identifiers [42] to
bypass their ads through filter lists. To address this problem, Storey
IMC ’17, November 1–3, 2017, London, United Kingdom
Iqbal et al.
et al. [65] proposed a perceptual adblocking method for visually
identifying and blocking ads based on optical character recogni-
tion and fuzzy image matching techniques. The key idea behind
perceptual adblocking is that ads are distinguishable from organic
content due to government regulations (e.g., FTC [36]) and industry
self-regulations (e.g., AdChoices [41]). The authors [65] reported
that their perceptual adblocking approach is robust to ad delivery
manipulation by online publishers.
Second, some online publishers have started to employ anti-
adblock scripts to detect adblockers. Anti-adblock scripts detect
adblock users and prompt them to disable their adblocker. Adblock-
ers currently rely on manually curated anti-adblock filter lists, e.g.,
Anti-Adblock Killer List, to block anti-adblock scripts. Rafique et
al. [62] manually analyzed top 1,000 free live streaming websites
and reported that 16.3% websites attempted to detect adblockers.
Nithyanand et al. [60] crawled Alexa top-5K websites and manu-
ally analyzed JavaScript snippets to find that 6.7% websites used
anti-adblocking scripts. In our prior work, Mughees et al. [59] used
a machine learning based approach with A/B testing to analyze
changes in page content due to anti-adblockers. We found that only
686 out of Alexa-100K websites visibly react to adblockers. In con-
trast to prior efforts to study anti-adblock deployment, in this paper
we conduct a retrospective measurement study of anti-adblock
filter lists that are currently used by adblockers to circumvent anti-