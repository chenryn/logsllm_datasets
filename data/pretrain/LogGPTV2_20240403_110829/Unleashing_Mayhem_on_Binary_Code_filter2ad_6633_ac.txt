l
e
u
a
v
l
e
u
a
v
l
64
91
memory index
(a) to_lower conversion table
64
91
memory index
(b) Index search tree
64
91
(c) Linearization
memory index
Figure 5: Figure (a) shows the to_lower conversion table, (b) shows the generated IST, and (c) the IST after linearization.
optimization techniques MAYHEM includes to tackle some
of the caveats of the original algorithm:
• Querying the solver on every symbolic memory derefer-
ence is expensive. Even with binary search, identifying
both bounds of a 32-bit index required ∼ 54 queries on
average (§VIII) (§V-B1,§V-B2,§V-B3).
• The memory region may not be continuous. Even though
many values between the bounds may be infeasible, they
are still included in the memory object, and consequently,
in the formula (§V-B2).
• The values within the memory object might have structure.
By modeling the object as a single byte array we are
missing opportunities to optimize our formulas based on
the structure. (§V-B4,§V-B5).
possible location in memory (§V-C).
• In the worst case, a symbolic index may access any
1) Value Set Analysis (VSA): MAYHEM employs an online
version of VSA [4] to reduce the solver load when resolving
the bounds of a symbolic index (i). VSA returns a strided
interval for the given symbolic index. A strided interval
represents a set of values in the form S[L,U], where S is
the stride and L, U are the bounds. For example, the interval
2[1, 5] represents the set {1, 3, 5}. The strided interval output
by VSA will be an over-approximation of all possible values
the index might have. For instance, i = (1 + byte) b a r [ 0 ] ;
return 0 ;
i n p u t ) ;
symbolic
region 3
symbolic
region 2
symbolic
region 1
bar *
value
ptr *
buffer
Figure 6: MAYHEM reconstructing symbolic data structures.
values. Speciﬁcally, for every symbolic pointer, MAYHEM
performs three checks:
1) Check if it is possible to redirect the pointer to unmapped
memory under the context of the current path predicate.
If true, MAYHEM will generate a crash test case for the
satisfying value.
2) Check if it is possible to redirect the symbolic pointer
to symbolic data. If it is, MAYHEM will redirect (and
concretize) the pointer to the least constrained region of
the symbolic data. By redirecting the pointer towards the
least constrained region, MAYHEM tries to avoid loading
overconstrained values, thus eliminating potentially inter-
esting paths that depend on these values. To identify the
least constrained region, MAYHEM splits memory into
symbolic regions, and sorts them based on the complexity
of constraints associated with each region.
3) If all of the above checks fail, MAYHEM concretizes the
index to a valid memory address and continues execution.
The above steps infer whether a symbolic expression is a
pointer, and if so, whether it is valid or not (e.g., NULL).
For example, Figure 6 contains a buffer overﬂow at line
9. However, an attacker is not guaranteed to hijack control
even if strcpy overwrites the return address. The program
needs to reach the return instruction to actually transfer
control. However, at line 10 the program performs two
dereferences both of which need to succeed (i.e., avoid
crashing the program) to reach line 11 (note that pointer ptr
is already overwritten with user data). MAYHEM augmented
with prioritized concretization will generate 3 distinct test
cases: 1) a crash test case for an invalid dereference of pointer
ptr, 2) a crash test case where dereferencing pointer bar
fails after successfully redirecting ptr to symbolic data, and
3) an exploit test case, where both dereferences succeed and
user input hijacks control of the program. Figure 6 shows
the memory layout for the third test case.
VI. EXPLOIT GENERATION
MAYHEM checks for two exploitable properties: a sym-
bolic (tainted) instruction pointer, and a symbolic format
string. Each property corresponds to a buffer overﬂow and
format string attack respectively. Whenever any of the two
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
exploitable policies are violated, MAYHEM generates an
exploitability formula and tries to ﬁnd a satisfying answer,
i.e., an exploit.
MAYHEM can generate both local and remote attacks.
Our generic design allows us to handle both types of
attacks similarly. For Windows, MAYHEM detects overwritten
Structured Exception Handler (SEH) on the stack when an
exception occurs, and tries to create an SEH-based exploit.
Buffer Overﬂows: MAYHEM generates exploits for any
possible instruction-pointer overwrite, commonly triggered
by a buffer overﬂow. When MAYHEM ﬁnds a symbolic
instruction pointer, it ﬁrst tries to generate jump-to-register
exploits, similar to previous work [14]. For this type of
exploit, the instruction pointer should point to a trampoline,
e.g. jmp %eax, and the register, e.g. %eax, should point
to a place in memory where we can place our shellcode.
By encoding those constraints into the formula, MAYHEM
is able to query the solver for a satisfying answer. If an
answer exists, we proved that the bug is exploitable. If we
can’t generate a jump-to-register exploit, we try to generate
a simpler exploit by making the instruction pointer point
directly to a place in memory where we can place shellcode.
Format String Attacks: To identify and generate format
string attacks, MAYHEM checks whether the format argument
of format string functions, e.g., printf, contains any
symbolic bytes. If any symbolic bytes are detected, it tries
to place a format string payload within the argument that
will overwrite the return address of the formatting function.
VII. IMPLEMENTATION
MAYHEM consists of about 27,000 lines of C/C++ and
OCaml code. Our binary instrumentation framework was built
on Pin [18] and all the hooks for modeled system and API
calls were written in C/C++. The symbolic execution engine
is written solely in OCaml and consists of about 10,000 lines
of code. We rely on BAP [15] to convert assembly instructions
to the IL. We use Z3 [12] as our decision procedure, for which
we built direct OCaml bindings. To allow for remote com-
munication between the two components we implemented
our own cross-platform, light-weight RPC protocol (both in
C++ and OCaml). Additionally, to compare between different
symbolic execution modes, we implemented all three: online,
ofﬂine and hybrid.
VIII. EVALUATION
A. Experimental Setup
We evaluated our system on 2 virtual machines running
on a desktop with a 3.40GHz Intel(R) Core i7-2600 CPU
and 16GB of RAM. Each VM had 4GB RAM and was
running Debian Linux (Squeeze) VM and Windows XP SP3
respectively.
)
s
e
t
y
B
(
e
s
U
y
r
o
m
e
M
2.0 x 106
1.8 x 106
1.6 x 106
1.4 x 106
1.2 x 106
1.0 x 106
8.0 x 105
6.0 x 105
4.0 x 105
2.0 x 105
0.0 x 100
online
hybrid
offline
 0
 500
 1000
 1500
 2000
 2500
 3000
Time (sec.)
Figure 7: Memory use in online, ofﬂine, and hybrid mode.
B. Exploitable Bug Detection
We downloaded 29 different vulnerable programs to check
the effectiveness of MAYHEM. Table I summarizes our
results. Experiments were performed on stripped unmodiﬁed
binaries on both Linux and Windows. One of the Windows
applications MAYHEM exploited (Dizzy) was a packed
binary.
Column 3 shows the type of exploits that MAYHEM
detected as we described in §VI. Column 4 shows the
symbolic sources that we considered for each program.
There are examples from all the symbolic input sources
that MAYHEM supports, including command-line arguments
(Arg.), environment variables (Env. Vars), network packets
(Network) and symbolic ﬁles (Files). Column 5 is the size
of each symbolic input. Column 6 describes the precondition
types that we provided to MAYHEM, for each of the 29
programs. They are split into three categories: length, preﬁx
and crashing input as described in §IV-D. Column 7 shows
the advisory reports for all the demonstrated exploits. In
fact, MAYHEM found 2 zero-day exploits for two Linux
applications, both of which we reported to the developers.
The last column contains the exploit generation time for
the programs that MAYHEM analyzed. We measured the
exploit generation time as the time taken from the start
of analysis until the creation of the ﬁrst working exploit.
The time required varies greatly with the complexity of
the application and the size of symbolic inputs. The fastest
program to exploit was the Linux wireless conﬁguration
utility iwconfig in 1.90 seconds and the longest was the
Windows program Dizzy, which took about 4 hours.
C. Scalability of Hybrid Symbolic Execution
We measured the effectiveness of hybrid symbolic execu-
tion across two scaling dimensions: memory use and speed.
Less Memory-Hungry than Online Execution. Figure 7
shows the average memory use of MAYHEM over time
while analyzing a utility in coreutils (echo) with online,
ofﬂine and hybrid execution. After a few minutes, online
389
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
Program
Exploit Type
Input
Source
Symbolic
Input Size
Symb.
Mem.
Precondition
Advisory ID.
Exploit Gen.
Time (s)
A2ps
Aeon
Aspell
Atphttpd
FreeRadius
GhostScript
Glftpd
Gnugol
Htget
Htpasswd
Iwconﬁg
Mbse-bbs
nCompress
OrzHttpd
PSUtils
Rsync
SharUtils
Socat
Squirrel Mail
Tipxd
xGalaga
Xtokkaetama
Coolplayer
Destiny
Dizzy
GAlan
GSPlayer
Muse
Soritong
x
u
n
i
L
s
w
o
d
n
i
W
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Format String
Stack Overﬂow
Stack Overﬂow
Format String
Format String
Stack Overﬂow
Format String
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow (SEH)
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow (SEH)
Env. Vars
Env. Vars
Stdin
Network
Env.
Arg.
Arg.
Env.
Env. vars