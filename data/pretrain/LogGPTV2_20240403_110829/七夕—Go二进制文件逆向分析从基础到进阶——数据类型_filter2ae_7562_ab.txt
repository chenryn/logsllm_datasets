**按位与** 运算，依据结果来看本 **type name** 是否可导出，以及是否附带 **tag data** 或 **package path**
。在 Go 语言的规范中， **可导出** 就意味着 **首字母大写** 。
**tag** 在 Go 中也很常见，相当于给相应的 **type name** 又起了一个别名。最常见的用法是用 Struct 定义 Json 结构时，给
Struct 中的字段打上一个 Json 的 Tag。如果 **type name** 附带了 **tag data** ，那么紧接着 **type
name** 的 String 数据后 2 Bytes，就是 **tag string** 的长度，该长度值计算方式同于 **type name**
length。2 Bytes 之后，就是指定长度的 **tag string** 数据。如下所示：
**package path** 则是在 **type name** 的基础数据和 **tag data** 之后，是一个 4 Bytes(uint32)
类型的 Offset 值，这个 Offset 是相对于 **firstmoduledata.types** 来说的，相加之后得出一个 **type
name** 的 **地址** 。这个地址，指向的是另外一个 **type name** 结构，这个结构就存放了 **pacakge path**
的信息。这个 **package path** 结构的解析，也就跟 **type name** 一样了。下图是一个标准库 **sync** 中的 type
name，一目了然：
###  8.4 composite type 解析
Go 中的 Common Basic Types 都可以用上面的 **rtype** 来表示，如果 **rtype.kind** 对应于 Composite
Types 其中一个，那么完整的类型定义就需要在 **rtype** 的基础上加上各自独有的字段或者属性才能表示了。本小节就盘点一下这些 Composite
Types 的结构，以及解析思路。
####  8.4.1 Ptr Type
Ptr Type 即指针类型，它指向某一个具体的数据类型。源码定义如下：
    type ptrType struct {
        rtype
        elem *rtype // pointer element (pointed at) type
    }
即在 **rtype** 后面又附带了一个指向 **rtype** 的指针(是地址，不是偏移)，对这个被指向的 **rtype** 的解析，参考上文即可。
**[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的一个 Ptr Type
结构效果如图所示：
####  8.4.2 Struct Type
Struct Type 即 Go 语言中的结构体。不同于 C 中的 Struct，Go 中的 Struct
中的字段有的可以导出，有的只能私用，还可以匿名存在，最重要的时可以绑定方法，其实更像是面向对象概念中的 **类(Class)** 。Struct Type
源码定义如下：
    type structType struct {
        rtype
        pkgPath name          // !! pointer
        fields  []structField // sorted by offset
    }
可以看到 Struct Type 是在 **rtype** 数据后面加了一个 **package path** 和一组 **structField** 。
**pkgPath** 其实是相对于 **firstmoduledata.types** 的一个偏移，指向一个 **type name**
结构，解析方式参考上文。 **fields** ，顾名思义，就是 Struct 中的字段定义信息。
**structField** 在源码中的定义如下：
    type structField struct {
        name        name    // name is always non-empty
        typ         *rtype  // type of field
        offsetEmbed uintptr // byte offset of field hash
        hasher     func(unsafe.Pointer, uintptr) uintptr
        keysize    uint8  // size of key slot
        valuesize  uint8  // size of value slot
        bucketsize uint16 // size of bucket
        flags      uint32
    }
可见 Map Struct 比较复杂，在 **rtype** 数据后附加了比较多的字段，而其中对逆向分析比较有帮助的只有 2 个： **key** 和
**elem** ，顾名思义，就是 **key** 指向的类型定义数据和 **element(value)** 的数据类型定义数据。
**[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的一个 Map Type 如下：
####  8.4.8 Chan Type
Chan Type，即 **Channel(通道)** 类型，是 Go 中一个比较特殊的数据类型。这个类型主要是用来在 Goroutine
之间传递消息、同步数据，是 Go 原生高并发特性的支撑要素之一。Chan Type 的源码定义如下：
    type chanType struct {
        rtype
        elem *rtype  // channel element type
        dir  uintptr // channel direction (ChanDir)
    }
一个 Channel 在使用时，只能传输一种类型的数据，在声明或者创建时，要指定一个可传输的数据类型，比如创建一个可传输 int 类型值的 channel：
    ch := make(chan int)
另外，Go 中的 Channel 是有方向的。虽然 Channel 默认既可以发送数据，也可以接收数据，但也可以通过指定方向让它做到只能发送或只能接收数据。
所以，上面可以看到 Chan Type 的源码定义中，在 **rtype** 数据后附加了两个字段：指向一个可发送的数据类型的定义的地址 **elem**
，和一个代表 Channel 方向（单向接收为 1；单向发送为 2，双向收发为 3）的值。
**[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的一个 Chan Type 如下：
####  8.4.9 Ucommon Type
前面提了多次可以绑定 Methods 的 **Uncommon Type** ，具体是什么样的呢？源码定义如下：
    // uncommonType is present only for defined types or types with methods
    // (if T is a defined type, the uncommonTypes for T and *T have methods).
    // Using a pointer to this struct reduces the overall size required
    // to describe a non-defined type with no methods
    type uncommonType struct {
        pkgPath nameOff // import path; empty for built-in types like int, string
        mcount  uint16  // number of methods
        xcount  uint16  // number of exported methods
        moff    uint32  // offset from this uncommontype to [mcount]method
        _       uint32  // unused
    }
任何一个 Type，无论是 Basic Type 还是 Composite Type，都可以是 Uncommon Type。如果一个 Type 的
**tflag** 字段标记该 Type 时 **Uncommon Type** ，那么在该 Type 前面所有的字段之后，就是 **Uncommon
Type** 的信息了。
第一个字段是 **pkgPath** ，这个字段的用法与 **Interface Type** 中的 **pkgPath** 相同。
第二个字段是 **mcount** ，即所有绑定的 Methods 的数量；第三个字段 **xcount** 则是可导出的 Methods 的数量，即
Method name 首字母大写。第 4 个字段，是 Methods 列表到 **Uncommon Type** 信息起始地址的 **偏移** 。
Uncommon Type 这里绑定的 Method，与 Interface 那里声明的 **Interface Method** 定义还不一样：
    type method struct {
        name nameOff // name of method
        mtyp typeOff // method type (without receiver) // offset to an *rtype
        ifn  textOff // fn used in interface call (one-word receiver) // offset from top of text section
        tfn  textOff // fn used for normal method call // offset from top of text section
    }
  * **name** 是相对于 **firstmoduledata.types** 的一个偏移，两者相加之后得出的地址指向一个 **type name** 结构，解析出来就是 Method name；
  * **mtyp** 也是对于 **firstmoduledata.types** 的一个便宜，两者相加之后得出的地址，指向一个 Type 定义信息，其实就是 Method 的声明信息；
  * 后面的 **ifn/tfn** 通常指向这个 Method 实际的函数实现，不过一个是面向 Interface 的，一个就是普通的实现。
综合起来，一个简单的 Uncommon Type 由
**[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的效果如下：
###  8.5 总结
至此，本文阐述了如何遍历找到 Go 二进制文件中每一个 Type 的定义信息，以及每一个 Type 源码级的定义和解析方式。之后就可以基于这些知识完成对
Go 二进制文件中 Types 信息的解析了。
## 参考资料：
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 