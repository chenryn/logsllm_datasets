25
96
32
0
1,865
32,430
27,739
2,600
24,497
183
90
133
25
96
32
18
3,110
58,523
Exposed
Sensitive
252
204
15
12
2
2
0
0
12
0
16
515
Table 6: Executables used by Init routines in the analyzed ﬁrmware.
Custom
Total used
•
•
Count
2,685 (1;100;10)
310 (1;9;1)
16,772 (1;136;64)
18,419 (1;131;70)
1,606 (1;68;6)
863 (1;12;3)
504 (1;9;2)
Used by an app-triggered Init routine
Type
Script
Script
Binary
Binary
Script
Binary
Binary
Script
Binary
Binary
•
•
•
•
•
•
Used by an exposed Init routine
Script
Binary
Binary
1,161 (0;57;4)
414 (0;9;2)
181 (0;8;1)
Exposed and calls a sensitive command/API
581 (0;34;2)
410 (0;9;2)
82 (0;4;0.3)
Counts are ‘total (min;max;avg per ﬁrmware)’
unique custom scripts (10 per ﬁrmware), 310 known scripts,
16,772 custom binaries (64 per ﬁrmware), and 18,419 known
binaries were used by Init routines. Of these, 1,606 custom
scripts, 863 custom binaries, and 504 known binaries were
used by Init routines triggered from pre-installed apps. With
regard to exposed routines, 1,161 custom scripts, 414 custom
binaries, and 181 known binaries were called by at least one
exposed Init routine. On average, there were four scripts and
two binaries invoked by an exposed Init routine per ﬁrmware.
Of those exposed scripts and binaries, 581 custom shell scripts
and 410 custom binaries invoked at least one sensitive com-
mand. These numbers show the signiﬁcant changes vendors
introduce to the Init process. The results also suggest that
vendors are more likely to use custom shell scripts rather than
binaries for their custom app-triggered Init routines, probably
due to the ease of developing shell scripts.
6.3
Impact of Exposed Behaviors
Table 7 shows the breakdown of exposed sensitive routines,
grouped by behavior category. We discuss the overall prospect
of these routines below and provide the full breakdown per
sensitive command in Table A.6. Our discussion here is fo-
cused on exposed routines that can be abused without user
interaction with the pre-installed apps exposing the sensi-
tive functionalities. We report on routines that require user
interaction in Appendix A.5.
Behaviors common to multiple vendors were for routines
calling commands from the sensitive data, networking, and
process management categories. The top category in terms
of exposed routines was for intrusive routines accessing sen-
sitive device data, such as memory dumps, system logs, and
network trafﬁc captures. This totaled to 336 unique rou-
tines across 65 ﬁrmware from 11 vendors. These routines
were exposed by 109 different pre-installed apps. The major-
ity (298) of these routines were triggered directly (i.e., via
ctl.start=) whereas 38 were triggered by setting
system properties satisfying a trigger. The impact of these
exposed routines accessing sensitive data can be signiﬁcant
if this data is transferred by the routines to shared storage
on the device, making it accessible to all apps (privileged or
not). These routines tend to expose user data through various
debugging and development mechanisms such as capturing
detailed log messages from all processes and dumping the
state of all Android framework services.
For the 65 routines in the networking category, the majority
were routines creating local domain socket servers. These lo-
cal domain socket servers provide a communication interface
for other processes on the device to interact with the server
process, potentially introducing security weaknesses. Unfortu-
nately, identifying the behavior lying behind the server socket
process is a very challenging task that requires knowledge of
the speciﬁcs of the protocol implemented by the involved pro-
cesses. Nevertheless, various instance have been discovered in
the wild where missing authorization checks in domain socket
server processes has resulted in critical code and command in-
jection vulnerabilities in privileged system processes [21–24].
Of the 30 routines in the process management category,
the majority were delegating to Android framework services
via the service command. The service command was gen-
erally used in conjunction with debugging routines to dump
a snapshot of the active framework services on the system
using the service list command. An interesting case is the
aee-reinit Init service that uses the ptrace command. Upon
manual inspection of the binary implementing the Init routine,
it appeared to be a process that attaches to a target process
using the ptrace command to dump its state, which can result
in information leakage as third-party apps are not allowed to
call ptrace on other processes on the system.
The device settings category had 13 identiﬁed routines to
modify device-wide settings. The svc command was the most
USENIX Association
30th USENIX Security Symposium    3693
Table 7: Init routines exposing sensitive functionalities, the number of apps exposing them, and the impacted ﬁrmware. Multiple matches in
the same category are counted only once per unique routine.
Category
Device settings
Sensitive data
Networking
Package management
Permission control
Power management
Process management
UI interaction
Total (unique)
Total
13
336
65
9
9
6
30
48
430
Direct
13
298
16
0
8
0
25
29
323
Indirect
0
38
49
9
1
6
5
19
107
Apps
13
109
65
9
9
5
28
48
173
Firmware
13
65
62
9
9
5
28
42
101
Vendors
2
11
9
3
2
3
5
6
13
commonly used among these routines. Certain pre-installed
apps used the svc power reboot command to reboot the
device which can be repeatedly initiated by an adversary to
prevent the user proper access to the device.
For routines in the package management category, the most
sensitive behavior was loading a kernel module which was
detected in nine ﬁrmware. We found a particularly interesting
case where the kernel module was loaded from a writeable
path, which may result in a third-party app being able to over-
write the kernel module and achieve arbitrary code execution
in kernel space. Most of the other cases, based on their routine
names, appeared to be for snifﬁng network packets.
The permission control category had only nine exposed
Init routines, but this category contains some of the most sen-
sitive commands. Speciﬁcally, the setenforce 0 command
disables SELinux, essentially exempting all processes from
their Mandatory Access Control policies, allowing them to
perform actions that would otherwise be blocked such as set-
ting system properties, accessing sandboxes, and connecting
to restricted framework services. Surprisingly, we found seven
such instances in six ﬁrmware (one can be exploited without
user interaction, six by clicking a button) all from one popular
vendor from the largest manufacturer group globally, where
SELinux can be disabled through an exposed Init routine.
The six routines in the power management category per-
tained to commands that initiate a reboot of the system. These
may appear uninteresting, although they can be leveraged by
an attacker to perform controlled DoS attacks by continuously
rebooting the system, which, for example, can be leveraged in
ransom DoS [25]. Of these six routines, ﬁve allowed an app
to perform a programmatic reboot spanning three different
vendors. This can also result in factory resetting the device
and erasing all user data in certain cases [11].
The UI interaction category had 48 Init routines which
were generally used to send IPC messages using the am
command. All of the messages were implicit, lacking a
named destination, except for few messages for opening the
results of an operation in the default HTML viewer (i.e.,
com.android.htmlviewer). We observed some routines in-
jecting key events for the “power” and “menu” buttons in the
foreground device UI using the input command. While this
likely has low impact, injecting these events may still cause
undesirable effects on the system when used at inopportune
times. Moreover, uncovering additional key events can be
used to build a UI interaction toolkit for use by an attacker.
6.4 Vulnerability Studies
We further inspected routines that exhibited more specialized
behaviors and manually inspected them to verify their poten-
tial security impact when triggered by an attacker. Table 8
shows the outcome of this analysis. Thus far, we have man-
ually veriﬁed 89 vulnerabilities in 34 unique apps from 30
ﬁrmware from 6 vendors. Our disclosure process is still on-
going, and three vendors so far have conﬁrmed our ﬁndings
(covering 49 ﬂaws in 11 ﬁrmware). Again, we only focus
here on vulnerabilities that can be exploited without user in-
teraction with the pre-installed apps. There are another 134
vulnerabilities in 52 unique apps from 35 ﬁrmware from 9
vendors that can be exploited but require user interaction with
the pre-installed apps, which we outline in Table A.5.
Veriﬁcation Methodology. The veriﬁcation involved man-
ually verifying the reported code paths to ensure the following:
(1) There are no runtime checks (e.g., dependencies on UID,
permissions, signatures, package names) on the path that may
increase the attack requirements beyond what is accessible to
a third-party app. (2) The privileged app sets the expected sys-
tem properties to the required value. (3) The system properties
trigger the expected Init routine. (4) The executable, corre-
sponding to the triggered Init routine, performs the reported
security-sensitive functionality.
For the stock Android devices we were able to obtain, we
manually developed exploits to dynamically verify 53 ﬁndings
(none requiring user interaction besides installing and running
our attack app). Note that dynamically verifying all ﬁndings
on their corresponding native Android devices presents signif-
icant difﬁculty since it requires purchasing Android devices
for each vendor/model/version combination.
3694    30th USENIX Security Symposium
USENIX Association
Table 8: Veriﬁed vulnerabilities and the functionalities they allow an
unprivileged attack app to perform programmatically via inadequate
access control exhibited by pre-installed apps.
Impact
Read system logs
Record screen
Sniff modem trafﬁc
Sniff Wi-Fi trafﬁc
Sniff Bluetooth trafﬁc
Read Wi-Fi passwords
Read dumpstate
Read dumpsys
Read kernel logs
Read bugreport
Read radio logs
Load kernel module
Disable SELinux
Reboot device
Write to node device
Total (unique)
Total Apps Firmware Vendors Versions
8,9,10
8,9
8,9
8,9
8,9
9,10
8,9
8,9,10
8,9,10
9
9
8,9
8
9,10
8
8,9,10
11
5
7
8
2
3
7
10
10
3
6
9
1
5
2
30
3
1
2
2
1
1
2
3
3
2
2
1
1
3
1
6
11
5
7
8
2
3
7
10
10
3
6
9
1
5
2
89
11
5
7
8
2
3
7
10
10
3
6
9
1
5
2
34
Findings.
In addition to disabling SELinux, loading kernel
modules, and rebooting the device, we found instances where
third-party apps can indirectly obtain the following data due
to exposed Init routines: system logs (main log, kernel, ra-
dio), screen captures, telephony data (SMS messages, calls),
extensive system dumps (dumpsys, dumpstate, bug reports),
and packet captures (modem, Wi-Fi, Bluetooth). Overall, the
impact is signiﬁcant. As shown in Table 8, numerous sensi-
tive capabilities are exposed through Init routines that can
be indirectly triggered by an unprivileged third-party app,
manifesting as privilege escalation vulnerabilities. The vul-
nerabilities we found pose serious threats to the security and
privacy of end users.
In the following, we discuss some representative cases that
we have exploited on stock devices. Note that we could only
exploit a limited number of ﬁndings on live devices due to the
lack of physical devices, in our possession, compatible with
each impacted ﬁrmware in the data set.
Case Study 1: Disabling SELinux. Security-Enhanced
Linux (SELinux) is the default security module to manage
mandatory access control security policies for all processes
on the device. Since Android 5.0, SELinux has been enabled
by default, serving as an integral part of the Android security
model. We identiﬁed a severe vulnerability where an exposed
Init service can be used to globally disable SELinux enforce-
ment. This impacted six different ﬁrmware from the same
vendor where one of the seven detected instances can be ex-
ploited without user interaction, whereas the other six require
a button click. In the affected vendor’s ﬁrmware, they have
included a custom Init service named wiﬁtest that, when
launched, executes a shell script as the root user. The shell
script calls setenforce 0 to disable SELinux, then resets the
Wi-Fi interface. Interestingly, in the same .rc ﬁle where the
wiﬁtest service is declared, two property triggers have the
actions to start this service. One impacted ﬁrmware had a priv-
ileged app that can be used by attackers to launch the service
in the background, without any user interaction. Additionally,
ﬁve ﬁrmware had six privileged apps that could also launch
the service upon clicking on a button in their exported GUI.
Case Study 2: Capturing modem and network trafﬁc.
Certain Android 9 ﬁrmware from two popular Android ven-
dors contained a pre-installed app that utilizes Init services
to capture modem and network trafﬁc. On these ﬁrmware,
third-party apps can send an IPC message to an exported
broadcast receiver component of the pre-installed app to start
and stop capturing of modem and network trafﬁc on demand.
The pre-installed app interacts with multiple custom Init ser-
vices to capture trafﬁc and store them on external storage.
These Init services were all running as the root user and used
a common shell script where each service passed a different
hard-coded string parameter to the shell script to capture data
from different interfaces. The script captured trafﬁc to inter-
nal storage and then moved the captured trafﬁc to external
storage upon completion. These captured records contained
signiﬁcant amount of sensitive data, such as network packets,
SMS messages, and phone calls. We were notiﬁed by the two
impacted vendors that this ﬂaw was introduced by mistake
into production builds by a common chipset provider that
both vendors had used, and in fact impacted more ﬁrmware
than in our data set.