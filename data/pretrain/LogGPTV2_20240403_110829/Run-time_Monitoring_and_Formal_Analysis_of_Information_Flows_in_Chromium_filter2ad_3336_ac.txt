network interface’s label will be dynamically constructed as
(cid:16)
C({evil.∗}),{network},{}(cid:17)
(cid:96)network 1 =
to capture the browser’s policy that the source must both have
the network integrity tag and be able to de- or reclassify to
evil.entity to be allowed to send data to evil.com (similarly, to
other sites). The script’s source label will be checked against
the destination label (cid:96)network 1. Although (cid:96)EveCS 2 permits
exteve access to the network (via +network), it does not enable
exteve’s content script to de- or reclassify its cnn... secrecy
tags. Hence, the request will fail.
The password manager content script sends the password
to its extension core, which saves it, tainting both the core and
its local storage with secrets from cnn.com.
S = F ({cnn.extPwd, cnn.user},{∗.extPwd,∗.user})
(cid:96)Pwd 1
I = {localStorage}
D = {+localStorage,−∗.extPwd,−∗.user}
I = {localStorage}, D = {}
(cid:96)PwdLS 1 S = F ({cnn.user, cnn.extPwd},{∗.user,∗.extPwd})
Subsequent visits
The next time the user visits cnn.com’s
login page, the page and injected content scripts will have
labels (cid:96)doc1 and (cid:96)PwdCS 1. After extpwdMgr’s content script
is injected, extpwdMgr’s core will fetch the stored password
from its local storage and send it to its content script. Reading
the password from local storage will cause the core’s secrecy
label to be raised to include cnn.user and cnn.extPwd, if it
did not already. If extpwdMgr’s core stored passwords from
multiple sites, then sending the appropriate password to its
content script running in cnn.com’s page will be possible only
because of its ability to declassify passwords from other sites
(using its −∗ .extPwd) declassiﬁcation capability.
When extpwdMgr’s content script writes the password into
the page, the appropriate DOM node’s label ﬂoats (after the
check to make sure the write is allowed succeeds) to reﬂect
that it received information from extpwdMgr’s content script.
The node would then have the following label.
(cid:96)domNd 2 S = F ({cnn.extPwd, cnn.user},{cnn.∗, ad.∗, google.∗})
I = {}, D = {+network, cnn.∗→ ad.∗, cnn.∗→ google.∗}
If exteve’s content script now tries to read the password,
the label check will fail, because the target node contains the
secrecy tag cnn.extPwd, which exteve’s content script doesn’t
have and cannot ﬂoat to. This prevents, for instance, attacks
in which exteve might open a new tab and load a page for the
purpose of harvesting passwords automatically ﬁlled in by a
password manager.
IV. FORMAL MODEL AND VERIFICATION
We develop a formal model to serve as the design speciﬁ-
cation of our information-ﬂow control enforcement mechanism
and its integration with Chromium. We use the model
to
conﬁrm that the design obeys noninterference, a key desirable
property for any information-ﬂow enforcement system. The
formal model of our enhanced browser includes: (1) the policy
language and policy enforcement mechanisms, (2) key entities
in the browser environment and their interactions, and (3)
formal deﬁnitions of security properties and proof that the
design of our enforcement mechanism has the desired security
properties. Due to space constraints, we omit formal deﬁnitions
of the policy language, and focus on the speciﬁcation and
proof of the noninterference property and its implications. The
full syntax and transition rules, as well as the full deﬁnition
and proof of noninterference, can be found in the companion
technical report [11].
A. Modeling the Browser
The Chromium architecture is complex (see Figures 1
and 4); the purpose of the model is to identify key compo-
nents relevant for reasoning about how information ﬂows in
the browser, and to deﬁne the rules that are to govern the
interactions between these components if our approach is to
successfully enforce speciﬁed information-ﬂow policies.
We model the behavior of the browser using a labeled
transition system. The state modeled by the transition system
encompasses the user, servers, as well as entities in the browser
such as the DOM, extensions, browser APIs, browser events,
and persistent browser state such as cookies and history. Using
the model, we later state and prove the security properties of
our approach.
System state
Each browser entity is a tuple consisting
of elements in that entity. We summarize key entities in
Figure 3. Typically, each entity in the browser is associated
with an information-ﬂow label (cid:96) or κ, when that entity has no
declassiﬁcation capabilities.
The top-level
system state Σ contains
the follow-
ing. Ψ is a list of internal browser states; for instance,
ws.beforeRequest(κ,···) denotes the state of a web request.
Tabs are the open browser tabs. ExtCoreRs are run-time
instances of extension cores. proInjCSs are the programmat-
ically injected content scripts. Exts are installed extensions.
Browser state also includes shared state objects: cookies,
bookmarks, and browser history. Finally, U I captures user
actions, e.g., when a user presses “Ctrl + T”.
An event is a tuple consisting of a unique event ID (id e),
an event type, whether actions are needed after the event is
processed (return), additional arguments of the event (info),
and the information-ﬂow label for the event (κ). An event
handler has its own unique ID,
it
processes, and the code for processing events (x.cmd). An
event handler can only process one event at a time; events
waiting to be processed are stored in an event queue E. The
BlockingFlag indicates whether a handler is a blocking event
handler. The last three ﬁelds in the event handler are the
script processing the current event and the ID and the return
information of the event being processed.
the type of event
that
We model the main page and iframed subpages in a browser
tab as a list of documents Docs. A document Doc is deﬁned
as (id d , url , nodes, DocCSs, CSP , (cid:96)). id d is the document
ID. url is the page URL. nodes denotes the page elements.
DocCSs are the content scripts injected by extensions. CSP
denotes the content security policies of the page. Each doc-
ument is associated with a policy label. The elements in a
page are modeled as tree nodes in a document. A node is
deﬁned as (id , attributes, nodes, content, (cid:96)). id denotes the
node ID. attributes contains general information about the
node, e.g., the content type, the URL (if the node loads an
external object), and the parent node ID. nodes are the child
nodes. content is a piece of data with a speciﬁc format,
e.g., an image ﬁle. (cid:96) is the policy label attached to the node.
DocCSs is the list of active content scripts. id r is the unique
identiﬁer for that run-time instance. A browser tab is deﬁned
as (id t , Docs, url , EventHandlers, (cid:96)), where id t is the unique
ID of the tab, Docs denotes the documents in the tab, url is the
URL of the displayed page, and EventHandlers the JavaScript
event handlers that come from the page scripts. Finally, (cid:96) is
the information-ﬂow policy associated with the tab.
An extension is a tuple consisting of: a unique ID, one
extension core, several content scripts, local storage, an active
ﬂag, and a policy label. The active ﬂag aF lag indicates
whether an extension is active. A static extension core contains
programs, which are modeled as a variable environment Γ,
commands cmd, and a list of event handlers. A content script
ExtCS contains three identiﬁers: the ID of the extension it
belongs to, its own unique ID, and the ID of the tab in which
it runs. Similar to the extension core, Γ denotes the variables,
cmd is the main program of the script, and EventHandlers is
a set of event handlers in the content script. The index runat
indicates when to inject the script to a tab.
We deﬁne a multi-level bookmark MBookmarks data
structure, consisting of a set of pairs of a bookmark bookmark
and a simple label κ. The label indicates the secrecy and
integrity level of the bookmark. A bookmark is a tree: each leaf
node is a bookmark entry and each non-leaf node represents a
directory. (Multi-level bookmarks are discussed in more detail
in Section IV-C.) Both cookie entries and history entries are
labeled with simple labels κ.
Transition rules
The top-level transition rules are of the
form Ξ; Σ;E β−→ Ξ(cid:48); Σ(cid:48);E(cid:48). Here, Ξ denotes remote servers,
which are active entities that exchange information with the
7
System state
Σ
Browser internal state Ψ
::= Ψ, Tabs, ExtCoreRs, proInjCSs, Exts, Cookies, MBookmarks, histories, UI
::= · | Ψ, ws.beforeRequest(κ,···) | ···
Event
Event Queue
Event handlers
e
E
EventHandlers
Documents
Nodes
Doc content scripts
Tabs
Docs
nodes
DocCSs
Tabs
Installed extension
Content scripts
Content script
Injection time tag
Extension core
Installed extensions
Extension cores
Injected content scripts
Ext
ExtCSs
ExtCS
runat
ExtCore
Exts
ExtCoreRs
proInjCSs
Multi-level bookmarks MBookmarks
Bookmarks
Bookmark
Cookies
Histories
Bookmarks
bookmark
Cookies
histories
::= id e , eventType, return, info, κ
::= · | E :: e
::= · | EventHandlers, (id , eventType, x.cmd ,E, BlockingFlag, cmd , id e , return)
::= · | Docs, (id d , url , nodes, DocCSs, CSP , (cid:96))
::= · | nodes, (id , attributes, nodes, content, id parent , (cid:96))
::= · | DocCSs, (id ext , id cs , id r, Γ, cmd , EventHandlers, (cid:96))
::= · | Tabs, (id t , Docs, url , EventHandlers, (cid:96))
::= id ext , ExtCore, ExtCSs, Storage, activeFlag, (cid:96)
::= · | ExtCSs, ExtCS
::= id ext , id cs , id t , Γ, cmd , EventHandlers, runat, (cid:96)
::= DocBegin | DocEnd | DocIdle
::= Γ, cmd , EventHandlers
::= · | Ext :: Exts
::= · | ExtCoreRs, (id ext , ExtCore, (cid:96))
::= · | proInjCSs, ExtCS
::= · | MBookmarks, (Bookmarks, κ)
::= · | Bookmarks, bookmark
::= id , title, Bookmarks | id , title, url
::= · | Cookies, (name, value, url , κ)
::= · | histories, (id , url , name, visitTime, visitType, κ)
U I
UI
::= user, cmd , (cid:96)
Fig. 3: Deﬁnitions of browser state
browser. Σ is the browser state (see Figure 1), which includes
tabs, extensions, bookmarks, cookies, history, etc. E denotes
events waiting to be processed. Events can be user inputs,
API requests, and other internal browser events. Each transi-
tion is labeled with an action β, representing the observable
effects of that transition. Observable actions include API calls,
invocations of callbacks, processed events, etc. The browser
makes internal transitions, which do not produce observable
effects. We use τ to label such transitions, and call them silent
transitions. We deﬁne an execution trace ρ as the sequence of
non-silent actions in a transition sequence.
For space reasons, we omit detailed rules. We show one
example rule for processing an event below. When e is not a
blocking event, we enqueue e in the event queues of relevant
event handlers. The enqueue operation is deﬁned using the (cid:1)Q
operator. This rule does not perform label checks. We check
the event handler’s label against e’s label to make sure that
the handler is allowed to learn secrets contained in e when the
event handler is ready to process e. The action of this transition
is silent (τ), as there is no observable behavior.
e is not a blocking event
Σ = (Ψ, Tabs, ExtCoreRs,···)
Σ(cid:48) = Σ[ExtCoreRs⇐ExtCoreRs (cid:1)Q e][Tabs⇐Tabs (cid:1)Q e]
τ−→ Ξ; Σ(cid:48);E
Ξ; Σ;E :: e
We deﬁne transition rules for processing scripts, processing
events, browser internal state transitions, API calls to access
shared state, and other API calls (e.g.,
tab accessing and
programmatic content script injection). Transition rules for
events include event ﬁring and dequeuing rules and special
8
rules about events for sending/receiving data to/from web
sites. Browser internal state transition rules include rules for
deciding whether to send a web request, web-request-state
transitions, content loading and DOM creation, and content
script
injection. Rules for accessing shared browser state
include accesses to page contents (accessed through the DOM
API), bookmarks, cookies, and history.
B. Noninterference
We analyze the security guarantees of our model by proving
a noninterference theorem. We would like to show that the
attacker cannot learn secrets beyond what’s allowed by the
policy. Before presenting the ﬁnal
theorem, we introduce
several necessary supporting concepts.
Attacker model revisited
A policy label speciﬁes an
attacker’s capabilities. We denote such a label κA. Given κA,
the system’s components are partitioned into two sets: one
containing components whose labels are lower than or equal
to κA (κ (cid:118) κA); the other containing components whose labels
are either higher or not compatible with κA (κ (cid:54)(cid:118) κA). Our
enforcement mechanism enforces the policy that information
can ﬂow to an attacker’s component from the ﬁrst set, but
not easily from the second. We discuss possible implicit ﬂows