    - 锁粒度  
- dcl  
    - 权限  
### 2 基于规则+辅助输入的方法  
动态规则依旧解决不了某些问题, 例如, 如果是高并发的慢SQL可能风险就较大, 如果是低并发的慢SQL风险可能就较小.  
- SQL的基准是什么? 吞吐诉求、RT诉求. 数据库是否满足业务需求?  
- 新增的SQL会不会导致数据库性能瓶颈, 并且影响已有业务.  
- SQL 是不是处于优化执行路径? 需不需要加索引? 需不需要加hint? 需不需要改写SQL等? 需不需要锁表? 锁粒度多大? 需不需要在低峰期操作?  
- 回退预案是什么?  
- 操作流程是什么?  
- 哪些操作有删库跑路风险? 例如DROP或truncate的DDL、没有条件或条件绝对为true的update或delete.  
基于规则+辅助输入的方法:  
- 输入新增的SQL、并发、吞吐、RT等诉求.  
- 输入取消的SQL(业务变更之后不再需要的SQL)  
- 返回报告: 评估变更的耗时, SQL的模拟QPS和RT, 数据库的资源消耗等.  
    - 揭示风险, 例如无法满足RT|QPS预期、资源打满、删库跑路、雪崩 等风险.  
    - 给出SQL优化建议等.  
同时希望数据库内核能支持快速闪回, 变更快速回退能力.  
### 3 增加执行优化  
- 某些场景可能用原始SQL执行会有长时间持有大锁引起堵塞业务SQL的隐患, 因此SQL审核工具如果能发现并将这些SQL进行rewrite, 或者增加一些锁等待超时的保护等, 会更加安全.  
- 某些场景的SQL写法可能有问题, 也可以通过改写SQL解决  
- 某些场景SQL本身没问题, 但是因为缺少索引, 可能导致效率较低, 如果能给出索引建议, 能提升SQL性能.  
例子:  
1、修改列类型或长度, 直接执行SQL必须进行table rewrite, 大表会长时间持有排他锁, 可能影响业务. 可以考虑采用增量修改的方法, 新增一列, 增加触发器进行增量更新, 再执行SQL将老的字段覆盖到新字段, 最后rename字段的方式.  (还需要注意依赖关系, 例如主外键、视图、物化视图、函数等)  
2、加列操作(虽然只是改元数据), 但是如果系统中已经有与之冲突的锁存在(典型的是查询相关的长事务), 那么将引起ddl等待, 未来的SQL请求这个表的任何锁都会与之冲突, 可能导致雪崩. 建议对加列操作可以增加锁超时参数, 避免长时间等待导致雪崩.  
3、新增索引, 但是没有使用concurrently. 建议可以修改为concurrently, 防止堵塞dml.  
4、vacuum full垃圾回收, 与1类似, 需要table rewrite, 建议使用pg_repack, 增量回收.  
5、sql 没有索引性能较差, 可能引起业务性能问题, 建议增加索引.  
6、SQL 写得不好, 而且数据库的优化器目前还没有query rewrite的规则, 通过修改SQL, 保证语义正确性. 例子  
merge join的条件未写全,  
inner join 顺序不对,  
[《PostgreSQL merge join 扫描方法实例细说，以及SQL写法注意 或 内核优化建议 - query rewrite》](201907/20190713_01.md)  
7、JOIN 未对齐数据类型  
8、collate 索引类型与字段collate不匹配  
9、未使用正确的索引类型(例如时序brin, 选择了btree. gin选择了btree, )  
10、递归死循环  
11、未使用`skip index scan`  
12、判断数据有无, 使用了count聚合, 是否考虑修改为`select 1 where .. limit 1`  
## 6、bytebase, pigsty与PolarDB开源社区合作给用户带来的价值  
用户使用PolarDB开源版本更加从容了:  
- 1、科技是第一生产力, bytebase把DBA的经验产品化之后, 至少在SQL自动审核层面, 可以做到人人都具备DBA的能力. 大幅度降低业务上线带来的SQL变更风险.  
- 2、Pigsty 覆盖了数据库实例的生命周期管理的能力, 包括规模化部署、备份、恢复、容灾、高可用、监控、优化、诊断等DBA常用的需求.  
期待bytebase的SQL审查能力:  
- 提升安全(例如防止删除裤跑路)+  
- 提升效率(DDL、未优化、风险SQL rewrite)+  
- 优化建议(例如是否需要增加索引)+  
- 风险揭示(例如SQL的性能风险、变更导致的依赖关系的风险、锁风险、资源风险等)+  
- 版本管理(类似github, 管理变更)+  
- 回退管理+  
- 定时变更计划(防红眼)+  
- SQL 审核 API (SaaS服务)+  
- 背锅能力(haha)  
## 参考:  
[《DB吐槽大会,第51期 - 缺乏SQL审查功能》](../202109/20210928_03.md)  
[《PostgreSQL sql 审核功能》](../202001/20200105_02.md)  
https://github.com/pganalyze/libpg_query  
[《SQL 审查基础插件 pg_query , 识别风险SQL等, Introducing pg_query 2.0: The easiest way to parse Postgres queries》](../202103/20210320_03.md)  
[bytebase：安全高效、专为团队协同设计、数据库变更以及版本控制](https://www.bytebase.com/zh)  
[Pigsty：开箱即用的数据库发行版](http://pigsty.cc/zh/)  
[《PostgreSQL 数据库开发规范》](../201609/20160926_01.md)  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")  
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")  
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")  
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")  
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")  
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")