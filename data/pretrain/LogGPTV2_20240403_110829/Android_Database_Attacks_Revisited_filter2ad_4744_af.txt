marized URI instance for u2, the ﬁrst argument of the query
method which is a Uri object. Next, it analyzes supporte-
dUri() at Line 2. This method builds and returns a new Uri
object, hence the symbolic executor creates another instance
of a summarized URI and initializes its ﬁelds with the corre-
sponding values (e.g., scheme ﬁeld will be "content"). Line 3
enforces constraints on the ﬁelds of u2 as well and adds them
to the path constraint. At this point, the path constraint
for this part of the program9 is:
φ = f2,1 . c o n t a i n s ( " content " ) ∧ f2,2 = " com . example . app .
f2,3 = " / " . x1 . " / " . x2 ∧ ¬ x1 . c o n t a i n s " / " ∧ ¬ x2 .
P u b l i c D a t a b a s e " ∧
c o n t a i n s " / " ∧ x1 (cid:54)= null
where xi
is the (i-1)th path segment determined by the
Uri.getPathSegments() at Line 3 and the ﬁelds of u2 are de-
noted by f2,i: f2,1 is the scheme, f2,2 is the authority and f2,3
is the path ﬁeld of u2. The authority "com.example.app.Public
Database" is obtained from the manifest ﬁle.
At each transition of the SFT, new constraints are con-
catenated to the path constraint as shown below and if they
are satisﬁable, the transducer moves to the next state:
c1 : f1,1 = f2,1 ∧ f1,1 = " content "
c4 : f1,2 = f2,2 ∧ f1,2 = " com . example . app . P u b l i c D a t a b a s e
c6 : f1,3 = f2,3 ∧ f1,3 = " / profile /1 "
c7 : f1,4 = f2,4 ∧ f1,4 = " id =1 "
c7 : f1,5 = f2,5 ∧ f1,5 = " type = admin "
"
where the ﬁelds of u1 and u2 are denoted by f1,i and f2,i
respectively. The indices in this example are from 1 to 5 and
refer to the scheme, authority, path, ﬁrst query parameter
and second query parameter respectively.
If the analysis
doesn’t ﬁnd any constraint for a transition, it moves to the
next state. Since the constraints for all transitions in this
example are satisﬁed, the SFT returns zero which means
that u1 and u2 are equal. For example, c1 enforces the f1,1
(scheme) ﬁeld of u1 to be equal to both "content" and f2,1
and the path constraint also enforces the f2,1 ﬁeld of u2 to
9
We do not present the path constraint for the previously analyzed
parts of the program for simplicity.

1 public Cursor query ( Uri u2 , String [] projection ,
String selection , String [] selectionArgs , String
s o r t O r d e r ) {
2
3
4
5
6
7
8
9
Uri u1 = s u p p o r t e d U r i () ;
if ( u2 . g e t S c h e m e () . c o n t a i n s ( " content " ) && ( u2 .
g e t P a t h S e g m e n t s () . get (0) != null ) ) {
if ( u1 . c o m p a r e T o ( u2 ) == 0) {
S Q L i t e D a t a b a s e db = d b H e l p e r . g e t R e a d a b l e D a t a b a s e
() ;
db . query ( u2 . g e t P a t h S e g m e n t s () . get (0) , projection
, selection , selectionArgs , null , null ,
sortOrder , null ) ;
}
}
return null ;
10 }
11 Uri s u p p o r t e d U r i () {
12
13
Builder builder = new Uri . Builder () ;
builder . scheme ( " content " ) . a u t h o r i t y ( " com . example . app
. P u b l i c D a t a b a s e " ) . a p p e n d P a t h ( " profile " ) .
a p p e n d P a t h ( " 1 " ) . a p p e n d Q u e r y P a r a m e t e r ( " id " , " 1 " )
. a p p e n d Q u e r y P a r a m e t e r ( " type " , " admin " ) ;
Uri u = builder . build () ;
return u ;

14
15
16 }
Listing
Uri.compareTo(Uri) method.
Example Android
6:
program which
calls
the
start
S
c1/1
q7
c8/0
c3/1
q2
c2/1
c3/1
q3
c3/1
c4/1
c5/1
c7/1
q5
q4
c6/1
q1
q6
c7/1
c6/1
Figure 3: SFT for Uri.compareTo(Uri). The label for each transition
is a constraint (ci) for a particular ﬁeld of the base and argument
URIs: c1 for scheme, c2 for userinfo, c3 for host, c4 for authority, c5
for port, c6 for path, c7 for query pairs, c8 for fragment.
contain "content". The concatenation of the path constraint
and c1 is satisﬁable and restricts the f2,1 ﬁeld of u2 to be
equal to "content". Similarly, the constraints for the rest of
transitions are satisﬁable and as a result, the sink method
at Line 6 can be reached by the malware on the device.
The transducer for Uri.compareTo() deals with the multiple
query parameters in the URI instance (Line 13) using c7.
In this case, the SFT iterates through the query parameters
stored in the summarized URI and moves to the accepting
state if all the constraints are satisﬁable. Note that the
query parameter pairs in URIs are implemented using Java
container classes.
In order to obtain the constraint for a
pair, we keep track of individual loaded and stored elements
during symbolic execution.
B. CASE STUDIES FOR REPRESENTATIVE
VULNERABLE APPLICATIONS
We now discuss some ﬁndings for the representative vul-
nerable apps from our dataset. The public and private vul-
nerabilities are further categorized into pollution, leakage
and ﬁle access attacks.
Chomp SMS (version 6.07) is an SMS app which provides sev-
637eral features such as sending scheduled SMS. This app is vul-
nerable to the pollution and leakage public attacks. The ex-
ported content provider, provider.ChompProvider, allows the
malware to steal or manipulate sensitive data such as sched-
uled and MMS messages. CallApp - Caller ID & Block (ver-
sion 1.56) is a phone-call number identiﬁcation app which is
vulnerable to the public leakage attacks. The unprotected
.provider.CustomSuggestionsProvider component allows at-
tackers to query if a particular contact name is present in
the contact list.
Kii Keyboard (version 1.2.22r6) is an alternative Android
keyboard app vulnerable to public pollution and leakage at-
tacks. This application has a content provider .enhanced
.BlacklistProvider which is exported but not protected by
any permission. This provider contains the blacklist of words
which should not be shown as predictions. The attacker can
manipulate or steal the content of the blacklist. AppLoc (ver-
sion 1.99.2) is another app which allows users to lock apps
with passwords. This app is vulnerable to the public leak-
age attacks due to an exported content provider which leaks
information about the locks such as the process names and
alarm times. The attacker can also apply SQL injection to
retrieve information from the tables such as locations by
setting the projection argument to "* from locations;".
ES File Explorer File Manager (version 3.1.2), a popular
ﬁle manager app, is vulnerable to public ﬁle access attacks.
The exported content provider, app.FileContentProvider al-
lows the attacker to obtain the ﬁle descriptors for arbitrary
ﬁles in the private internal or external storage which can
lead to the leakage of sensitive information.
Lelong.my - Shop and Save (version 1.2.5.3) is a shopping
app, vulnerable to the leakage and pollution private at-
tacks. The shoppingcart.PaymentOptionsActivity activity in
this app allows the attacker to pop up order requests where
the price and order ID can be manipulated by the attacker.
Another activity product.ProductNewActivity allows the at-
tacker to perform rawQuery() and insert() to the database
to search items.
Money Manager Expense & Budget (version
2.4.6) is a money manager app vulnerable to private leak-
age attacks.
It exposes an activity allowing attackers to
query and pop up bills for a speciﬁc account id. Adidas World
Football Live WP (version 3.1) is a sport news app which is
vulnerable to private pollution attacks. It has an exposed
broadcast receiver which can be exploited to insert sched-
uled advertisements into its private database.
Eﬀectiveness of the Symbolic Models. chomp SMS (ver-
sion 6.07) is an SMS app vulnerable to pollution public
attacks. This app requires accurate modeling of the an-
droid.content.UriMatcher and android.content.ContentUris
libraries. The provider.ChompProvider component is vulner-
able and accepts requests to update the scheduled messages
if the URI parameter of the update API passes certain con-
straints. The goal is to generate speciﬁc values for each pa-
rameter of the update API (e.g., the URI parameter) to use in
a working exploit. Our model for the UriMatcher.match(Uri)
method tries to ﬁnd a registered URI matching the given
URI parameter: (1) our model checks if the URI param-
eter’s authority is com.p1.chompsms.provider.ChompProvider;
(2) it checks the path segment of the URI. If it is sched-
uled_messages, all the scheduled messages can be updated
with the playloads crafted by the malware. In this case, DB-
DroidScanner generates the corresponding constraints using
our model. Solving the constraints gives the attack URI pa-
rameter: "content://com.p1.chompsms.provider.ChompProvider
/scheduled_messages". Otherwise, if the path segment matches
"scheduled_messages/#", ContentUris.parseId(Uri) is invoked
to retrieve the last path segment of the URI parameter and
use it as the selection argument for the SQLiteDatabase.update
sink method.
In summary, the constraints generated us-
ing our models constrain the URI parameter to contain the
scheduled_messages path segment and its last segment to be
a number. Solving these constraints, DBDroidScanner gen-
erates a malicious URI, "content://com.p1.chompsms.provider
.ChompProvider/scheduled_messages/1", which triggers a dif-
ferent execution path.
We now discuss how we generate an accurate exploit for
the com.netease.cloudmusic (version 1.7.3) app which is vul-
nerable to private leakage attacks. The vulnerable compo-
nent to which malware sends an Intent exploit is Loadin-
gActivity. The victim app obtains the URI object set in
the Intent by invoking the Intent.getData() method and
performs the following validations: (1) the scheme part of
the URI object is checked whether it is "content". Our
analysis also generates the corresponding constraints using
our model for the android.net.Uri library; (2) the Conten-
tUris.parseId(Uri) method is called with the URI object
passed as the argument to obtain its last path segment and
checks if the last path segment is a number. Our model
for android.content.ContentUris generates the correspond-
ing constraints and our tool generates "content:///1"10 as
the malicious URI part of the Intent message. The Intent is
further conﬁgured by setting its action and type attributes
to target the victim app and launch a private leakage attack.
B.1 Representative Applications in [31]
Public Database Attacks
DBDroidScanner did not ﬁnd public database vulnerabil-
ities in the updated versions of: Shady SMS 4.0 PAYG, Nim-
buzz Messenger, MiTalk Messenger, Youdao Dictionary, Dol-
phin Browser HD, Mobile Security Personal Ed., Youni SMS,
Netease Weibo, Sina Weibo and Tencent WBlog. Our results
are consistent with the results reported by ContentScope on
the following apps (these apps have not been updated): 360
Kouxin, GO FBWidget, Boat Browser Mini, Droid Call Filter,
GO TwiWidget.
For the remaining apps in Table 2, we present the pub-
lic database attack case-studies as follows. The results are
sorted by the application ID in the ID column.
1. Pansi SMS is a messaging app which is vulnerable to the
leakage and pollution attacks. ContentScope reports that
the .provider.MsgSummaryProvider is vulnerable. However,
this component is protected by both readPermission and
writePermission in the updated version of the app. There-
fore, malware will not be able to access this component.
However, DBDroidScanner ﬁnds other content provider com-
ponents which are not explicitly protected. The target SDK
version for this app is 13 (<17), hence the content providers
are exported by default and this application is vulnerable in
all compatible Android platforms. The vulnerable content
providers are: .provider.PansiContactProvider, .provider
.PhraseProvider and .provider.SmsDraftProvider which may
be compromised by attackers to steal or manipulate infor-
mation such as contact details.
3. mOffice - Outlook sync is a productivity app which syn-
chronizes private contact information with remote desktops.
10
The authority part of the URI can be empty.
638The updated app studied in our work does not export .dao
.DBProvider anymore but .dao.BackupProvider is another con-
tent provider vulnerable to leakage and pollution attacks.
Thus, attackers can steal and manipulate the sensitive data
such as SMS and contact details.
6. The updated version of GO SMS Pro, an instant messaging
app, is vulnerable under Android 16 and below. The .Stat-
icDataContentProvider and .golauex.smswidget.SmsProvider
components are unprotected content providers vulnerable
to the public leakage and pollution attacks.
7.
In the Messenger WithYou app, we ﬁnd that the open-
File() method in the MiyowaExplorerContentProvider con-
tent provider may return arbitrary database ﬁle descriptors,
which is similar to ContentScope. In addition, we ﬁnd the
openAssetFile() API as another source method to trigger a
similar vulnerability.
14. We could only ﬁnd an updated version of the Maxthon
Android Web Browser app. We ﬁnd SQL injection and pollu-
tion vulnerabilities in the .BrowserProvider content provider
if it runs in Android 16 and below. Even though Con-
tentScope reports that the vulnerability in this app is ﬁxed,
the exported attribute of the vulnerable provider in the man-
ifest ﬁle is not explicitly set to "false" in the updated ver-
sion, nor is it protected by any permission. Hence, DB-
DroidScanner still reports vulnerabilities which are consis-
tent with descriptions provided in [31]. These attacks can
successfully be launched in Android SDK ≤ 16.
18. The Tc Assistant app logs outgoing calls and traﬃc.
The .net.provider.TrafficProvider and com.wali.android
.provider.LogsContentProvider content providers in the up-
dated version of this app are not protected resulting in sen-
sitive data leakage.
Private Database Attacks. Now we present the private
database attack case-studies for the vulnerable apps in Ta-
ble 2. We remark that ContentScope only aims to detect the
public database vulnerabilities, however, our analysis also
ﬁnds the private database vulnerabilities in these represen-
tative apps analyzed by ContentScope. The last column in
Table 2 shows our results for the private database vulner-
abilities. The dynamic testing for a few apps could not be
done due to some practical problems: e.g., we have to reg-
ister a valid phone number for one app or the app crashes
once launched due to incompatibilities. Thus, we do not
conﬁrm if these apps are vulnerable or not. We now discuss
the case-studies by the ID column of Table 2.
1. Pansi SMS is vulnerable to private pollution and leakage
attacks. The attacker can launch privilege escalation at-
tacks using the vulnerable MrBeanUpgradeMsgActivity activ-
ity in this app to update the SMS content. It is also possible
to exploit a vulnerability in SearchActivity activity to force
this app to search the messages in the phone for a keyword.
3. The mOffice - Outlook sync app which has SMS read and
write permissions can be reached by a malware through its
com.innov8tion.mobisynapse.core.SMSReceiver component.
By sending a malicious Intent, the malware can choose an
SMS ID and launch a privilege escalation attack by forcing
the app to send an update request to the content provider of
the default SMS app on the phone. Malware can also force
the mOffice - Outlook sync app to send query requests to
.dao.DBProvide even though this component is not exported
and has been protected by readPermission. The malware can
craft malicious Intents and choose arbitrary task identiﬁers
(e.g., taskID) to invoke the vulnerable component .activ-
ity.task.EventEditActivity to launch leakage attacks.
4. A malware on the phone can launch privilege escalation
attacks and force the Shady SMS 4.0 PAYG app to manipulate
a particular SMS content.
7. Messenger WithYou is vulnerable to the private pollution
and leakage database attacks. For instance, the malware
can send malicious Intents to the CapptainWebAnnouncemen-
tActivity component to send query or delete requests using
arbitrary WHERE clauses.
11. The GO FBWidget app has a vulnerability which can be
exploited to send requests to manipulate Facebook authen-
tication data.
12. An existing malware on the phone can force the Netease
Weibo app to open an input stream for a given URI.
13. Although Dolphin Browser HD is updated to ﬁx its pub-
lic database vulnerabilities, it happens to be vulnerable to
private leakage attacks. The vulnerable component is the
AddBookmarkPage activity which allows malware to force this
component to send query requests to the BrowserProvider
even though the latter is not exported in the updated version
of the app. Therefore, the attacker can access the component
which was reported by ContentScope [31] to be vulnerable
in a new way.
19. GO TwiWidget is another app which can be forced by the
malware to query the details of an account on the device.
639