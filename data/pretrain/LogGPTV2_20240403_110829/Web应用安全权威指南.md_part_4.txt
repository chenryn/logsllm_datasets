    **图 2-10 成功连接虚拟机上的 Web 服务器**
-   **设置并确认邮箱账号**
    接下来，为了试验发送邮件时的安全隐患，需要设置邮箱账号。此设置将在
    4.9 节和 4.11 节使用，所以现在暂时不设置也没有影响。
    在您使用的电子邮件客户端上设置以下账号。之所以设置 2
    个账号，是因为试验中假设有 2 类收件人。
    **表 2-1 试验用邮箱账号**
      --------- --------- -------------------- ------------ ------------
      用户名    密码      邮箱地址             POP3服务器   SMTP服务器
      wasbook   wasbook   PI:EMAIL   example.jp   example.jp
      bob       wasbook   PI:EMAIL       example.jp   example.jp
      --------- --------- -------------------- ------------ ------------
    使用 wasbook 的账号给 bob 发封邮件，即可检测以上设置是否成功。如果
    bob 能正常收到，就表示配置正常。
    如果无法连接 POP3 服务器的话，请参考本章最后一页。
## **2.4 安装 Fiddler** {#text00000.html#nav_point_14 line-num="195 196"}
为了深入理解 HTTP，本书将通过使用免费工具 Fiddler 来观察并修改 HTTP
数据包。本节首先解说 Fiddler 的安装方法。
-   **什么是 Fiddler**
    Fiddler 是一款由 Eric Lawrence 开发的免费的 Web
    应用调试工具。Fiddler 在 Windows
    计算机上以代理的方式运行，能够观察和修改 HTTP
    的通信内容。同类产品还有 Burp suite 和 Paros
    等。但是，和其他软件相比，Fiddler
    不易出现乱码问题，且安装容易，因此本书将重点对 Fiddler 进行解说。
-   **安装 Fiddler**
    Fiddler 的最新版，可以在 
    下载。点击"Download Fiddler2"按钮即可下载。下载后点击安装即可。
-   **Fiddler 的运行确认及简单用法**
    Fiddler 能够从开始菜单处启动。启动后画面如图
    2-11。这时，请点击"Decode"。
    ![{%}](Image00011.jpg)
    **图 2-11 Fiddler 的启动画面**
    Fiddler 启动时会修改 Internet
    Explorer（IE）的代理设置。这时，防病毒软件可能会阻止代理设置的变更。此情况下请解除防病毒软件的阻止。
    确认启动 Fiddler 后，用 IE 打开 
    （虚拟机上的网页）。如果已经显示有 phpinfo.php 的话，按 F5
    刷新一下页面即可。这时会显示如图 2-12 的页面。
    ![{%}](Image00012.jpg)
    **图 2-12 通过 Fiddler 观察 HTTP 通信**
    在画面左侧的"Web Session"中选择 /phpinfo.php。
    另外，请从界面上的众多标签中，选择画面上方的"Inspect"和"Raw"，以及画面中间的"Raw"。上述操作的目的在于显示
    HTTP 的原始状态。
    Fiddler 除了能显示 HTTP
    消息，还能修改这些消息。具体内容在下一章会做讲述。
    至此，试验环境的安装就全部结束了。
#### **参考：虚拟机的数据一览** {line-num="229 230"}
**已建立的用户账号**
  用户名    密码      目的
  --------- --------- -----------------
  root      wasbook   Linux的root用户
  wasbook   wasbook   应用程序管理者
  alice     wasbook   邮件发送者
  bob       wasbook   邮件接收者
  carol     wasbook   其他
  down      （无）    关机用
**已安装的软件**
  服务             软件         版本
  ---------------- ------------ -------------
  OS(Linux)        Ubuntu       10.04.1 LTS
  Web服务器        Apache       2.2.14
  PHP              PHP          5.3.2
  数据库           PostgreSQL   8.4.4
  邮件发送服务器   Postfix      2.7.0
  POP3服务器       Dovecot      1.2.9
  SSH服务器        OpenSSH      5.3
**Apache 的根目录**
/var/www
#### **参考：如果无法连接试验环境的 POP3 服务器** {line-num="258 259"}
设置了第 17 页的邮箱账号后，如果无法连接 POP3
服务器，可以在虚拟机上执行以下命令来启动 Dovecot。
    # /etc/init.d/dovecot start
![{%}](Image00013.jpg)
**图 2-13 启动 Dovecot**
如图 2-13 所示，显示"OK"即表明 Dovecot 已经启动。这时请再次连接 POP3
服务器。
# **第 3 章 Web 安全基础 ： HTTP、会话管理、同源策略** {#text00000.html#nav_point_15 line-num="0 1"}
> 本章的内容是 Web 安全的重要基础。首先介绍 HTTP
> 协议和会话管理，然后讲述浏览器的安全性功能之一，也是理解跨站脚本等主要安全隐患的原理的必备知识------同源策略。
## **3.1 HTTP 与会话管理** {#text00000.html#nav_point_16 line-num="4 5"}
#### **为什么要学习 HTTP** {line-num="6 7"}
Web 应用的安全隐患有些源于网络的固有特性。在 Web
应用中，哪些信息容易泄漏，哪些信息容易被篡改，如何才能保证信息安全？正是因为开发人员缺乏这些知识，才会在开发时埋下安全隐患。为了理解诸如此类源自
Web 特性的安全隐患，就必须要掌握 HTTP
和会话管理的相关知识。而这也是本节要讲述的内容。
#### **最简单的 HTTP** {line-num="10 11"}
在正式开始前，先来体验下最简单的 HTTP 吧。31-001.php 中有如下 PHP
代码。这段脚本的功能为显示当前时间。
> **代码清单 /31/31-001.php**
``` {.代码无行号 line-num="16 17 18 19"}
```
访问  的菜单（以下写作"/31/ 菜单"），点击"31-001:
当前时间"链接（图 3-1），就可以在虚拟机上执行这段脚本了。
![{%}](Image00014.jpg)
**图 3-1 /31/ 菜单**
执行结果如图 3-2 所示。
![{%}](Image00015.jpg)
**图 3-2 显示时间脚本**
与此同时，在后台，浏览器会向服务器发送 HTTP 请求（HTTP
Request），而收到浏览器请求的服务器则会向浏览器发回 HTTP 响应（HTTP
Response）（图 3-3）。
![{%}](Image00016.jpg)
**图 3-3 HTTP 的请求与响应**
-   **使用 Fiddler 观察 HTTP 消息**
    我们可以使用 Fiddler 来观察 HTTP 消息。启动 Fiddler 后，在 IE
    浏览器上刷新刚才的页面。这次，浏览器和服务器之间的通信经过了
    Fiddler，所以在 Fiddler 上能够看到 HTTP 的通信内容。
    ![{%}](Image00017.jpg)
    **图 3-4 通过 Fiddler 显示 HTTP 通信**
    为了让 Fiddler 显示 HTTP 的通信情况，如图 3-4
    所示，选择界面上方的"Inspectors"-"Raw"标签以及界面中间的"Raw"标签。然后，在界面左侧选择
    31-001.php 请求。
    图中右侧红框中的内容就是浏览器与 Web
    服务器之间互相传递的消息。下面，让我们来具体看一下这些内容。
-   **请求消息**
    Fiddler
    界面右侧上半部分显示的内容，是浏览器向服务器发出的请求，被称为请求消息（Request
    Message）。
    请求消息的第 1 行被称为请求行（Request
    Line），相当于浏览器下达给服务器的命令。请求行由请求方法、URL（URI）和协议版本组成，它们之间以空格相隔（图
    3-5）。在 Fiddler 界面中，请求行上显示的是包含了
    Scheme（协议）和主机名（FQDN，全称域名）的绝对路径的
    URL，这是因为请求经过了代理（Fiddler）的缘故，而通常情况下只会显示相对路径的
    URL。
    ![{%}](Image00018.jpg)
    **图 3-5 请求行**
    HTTP 的请求方法除了 GET（取得资源）以外，还有 POST 和 HEAD 等。GET
    和 POST 与 HTML 中 form 元素的 method 属性指定的值相同。关于 POST
    方法后面还会讲述。
    请求消息的第 2
    行及以后的内容被称为请求头信息（Header），其格式为名称与值以冒号相隔。图
    3-4 中显示了很多请求头信息，但其中只有 Host 是必需的 [1]{.注释编号}
    。Host 表示接收信息的主机名（FQDN）和端口号（80 时可以省略）。
-   **响应消息**
    图 3-4 右侧的下半部分显示的是从 Web
    服务器返回的内容，被称为响应消息（Response Message）。如图 3-6
    所示，响应消息包含状态行、响应头信息和响应正文（Body）。
    +-----------------------------------+-----------------------------------+
    | 状态行                            |     HTTP/1.1 200 OK               |
    +-----------------------------------+-----------------------------------+
    | 响应头信息                        |     Da                            |
    |                                   | te: Mon, 10 Jan 2011 05:34:30 GMT |
    |                                   |                                   |
    |                                   |    Server: Apache/2.2.14 (Ubuntu) |
    |                                   |     X                             |
    |                                   | -Powered-By: PHP/5.3.2-1ubuntu4.2 |
    |                                   |     Vary: Accept-Encoding         |
    |                                   |     Content-Length: 20            |
    |                                   |                                   |
    |                                   |   Keep-Alive: timeout=15, max=100 |
    |                                   |     Connection: Keep-Alive        |
    |                                   |     Conte                         |
    |                                   | nt-Type: text/html; charset=UTF-8 |
    +-----------------------------------+-----------------------------------+
    | 空行                              |                                   |
    +-----------------------------------+-----------------------------------+
    | 响应正文                          |                             |
    |                                   |     14:34                  |
    +-----------------------------------+-----------------------------------+
    **图 3-6 响应消息的构造**
-   **状态行**
    状态行的内容是请求消息经过服务器处理以后的状态（图 3-7）。
    ![{%}](Image00019.jpg)
    **图 3-7 状态行的构造**
    状态码的百位数有特殊含义，代表了响应的几种状态（表
    3-1）。常见的状态码有：200（成功）、301 和
    302（重定向）、404（找不到资源）、500（服务器内部发生错误）等。
    **表 3-1 状态码的说明**
      -------- --------------
      状态码   概要
      1xx      处理正在继续
      2xx      成功
      3xx      重定向
      4xx      客户端错误
      5xx      服务器错误
      -------- --------------
-   **响应头信息**
    响应消息的第 2 行及以后的内容为响应头信息（图
    3-6），内容一直到出现空行（只含有换行符的行）为止。以下为典型的响应头信息。
    -   Content-Length
        显示响应正文的字节数。
    -   Content-Type
        指定为 MIME 类型。HTML 文档的情况下则为
        text/html。下表列出了常见的 MIME 类型。