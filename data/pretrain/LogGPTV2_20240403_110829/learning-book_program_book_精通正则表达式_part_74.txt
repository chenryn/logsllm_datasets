=>
"Mary",
1
=>
',Kew.
Middle
=>
"B.*,
2
=>
"B.",
Family
=>
"Miller"
3
=>
"Miller"
我个人认为，在使用了命名分组之后，就应该去掉数字编号，因为这样程序更清晰，效率
更高，不过，如果它们被保留了，你可以当它们不存在。
---
## Page 484
458
第10章：PHP
preg_replace
使用方法
preg_replace(pattern, replacement, subject [, limit [. count ]])
参数简介
patterm
分隔符包围起来的正则表达式，可能出现修饰符。pattern也可能是一个patterm
argument字符串的数组。
replacementreplacement字符串，如果pattern是一个数组，则replacement是包含多个字符
串的数组。如果使用了模式修饰符e，则字符串（或者是数组中的字符串）会
被当作PHP代码（459）。
subject
需要搜索的目标字符串。也可能是字符串数组（按顺序依次处理）。
limit
非强制出现，是一个整数，表示替换发生的上限（460）。
noo
非强制出现，用来保存实际进行的替换次数（只有PHP5提供，460）。
返回值
如果subject是单个字符串，则返回值也是一个字符串（subject的副本，可能经过修改）。
如果subject是字符串数组，返回值也是数组（包含subjecr的副本，可能经过修改）。
讲解
PHP提供了许多对文本进行查找-替换的办法。如果查找部分可以用普通的字符串描述，
str_replace或者str_ireplace就更合适，但是如果查找比较复杂，就应该使用preg_
replace。
来看一个简单的例子：在Web开发中经常会遇到这样的任务，把信用卡号或电话号码输人
一张表单。你是否经常看到“不要输入空格和连字符”的提示？要求用户按规则输入数据，
还是由程序员做一点小小的改进，让用户可以照自己的习惯输入数据？哪种办法更好（注
$card_number =preg_replace('/\D+/','',$card_number);
/*Scard_number只包含数字，或者为空*/
其中用preg_replace来去掉非数字字符。更确切的说，它用preg_replace 来生成
Scard_number的副本，将其中的非数字字符替换为空（空字符串），把这个经过修改的副
本赋值给scard_number。
注3：显然，Web开发中懒情的程序员随处可见，所以我兄弟所做的“不要输入连字符和空格”
的纪念堂很不幸地证明了这一点。参考http://www.unixwiz.net/ndos-shame.html。
---
## Page 485
Preg函数罗列
459
单字符串，单替换规则的preg_replace
前面三个元素（pattern，replacement和subjecr）都是既可以为字符串，也可以为字符串数
组。通常这三者都是普通的字符串，preg_replace首先生成subject的副本，在其中找到
pattern的第1次匹配，将匹配的文本替换为replacement，然后重复这一过程，直到搜索到
字符串的末尾。
在replacement字符串中，‘$0’表示匹配的所有文本，‘$1’表示第1组捕获型括号匹配的
文本，“$2’表示第2组，依次类推。请注意，美元符加数字的字符序列并不会引用变量，
虽然它们在其他某些语言中有这种功能，但是preg_replace能识别简单的序列，并进行
特殊处理。你可以使用一对花括号来包围数字，比如“S（0）和‘$（1），这样就不会引起
混淆。
这个简单的例子把HTML的boldtag转换为全部大写：
$html=preg_replace(*/\b[A-z](2,)\b/','$0'，$html）;
如果使用了模式修饰符e（它只能出现在preg_replace中），replacement字符申会作为PHP
代码，每次匹配时执行，结果作为replacement字符串。下面这个扩展的例子把boldtag里
的单词变为小写：
Shtml =preg_replace('/\b[A-z](2,)\b/e',
'strtolower(*S0")',
Shtml);
如果正则表达式匹配的单词是‘HEY”，replacement字符事中的so会被替换为这个值。结果，
replacement字符串就成了‘strtolower（"HEY"），执行这段PHP代码，结果就是
‘hey。
如果使用模式修饰符é，replacement字符串中的捕获引用会按照特殊的规定来插值：插值
中的引号（单引号或双引号）会转义。如果不这样处理，插入的数值中的引号会导致PHP
代码出错。
如果使用模式修饰符e，在replacement字符串中引l用外部变量，最好是在replacement字符
串文本中使用单引号，这样变量就不会进行错误的插值。
---
## Page 486
460
第10章：PHP
这个例子类似于PHP内建的htmlspecialchars（）函数：
'&1t;
，qbx，] /eS',‘$replacement[*$0*]′,$subject);
需要注意，这个例子中的replacement使用了单引l号字符串来避免Sreplacement变量插值，
直到将其作为PHP代码执行。如果使用双引号字符串，在传递给preg_replace之前，插
值就会进行。
可以用模式修饰符S用来提高效率（478）。
表达式，参见下一节)。默认值是-1，表示“没有限制”。
如果设置了第5个参数count（PHP4没有提供），它会用来保存preg_replace的实际替换
的次数。如果你希望知道是否发生了替换，可以比较原来的目标字符串和结果，不过检查
count参数效率更高。
多字符串，多替换规则
前一节已经提到，目标字符事通常是普通字符串，至少我们目前看到的所有例子都是如此。
不过，subject也可以是一个字符串数组，这样搜索和替换是对每个字符事依次进行的。返
回值也是由每个字符串经过搜索和替换之后的数组。
无论使用的是字符串还是字符串数组，pattern和replacement参数也可以是字符串数组，下
面是各种组合及其意义：
Patterm
Replacement
行为
宇符串
宇符串
应用pattern，将每次匹配的文本替换为replacement
数组
宇符串
轮流应用pattern，将每次匹配的文本替换为replacement
宇符串
数组
轮流应用pattern，将每次匹配的文本替换为对应的replacement
数组
数组
不容评
如果subject参数是数组，则依次处理数组中的每个元素，返回值也是字符串数组。
---
## Page 487
Preg函数罗列
461
请注意limit参数是以单个pattern和单个subject为单位的。它不是对所有的pattern和subject
生效。返回的Scount则是所有patterm和subject字符串所进行操作次数的总合。
这里有一个preg_replace的例子，其中pattern和replacement都是数组。其结果类似于PHP
内建的htmlspecialchars（）函数，它保证处理过的文本符合HTML规范：
$cooked = preg_replace(
/*要匹配的文本..．
*/array（'/&/，//，*/*/）,
/*要替换的文本..
/*...要操作的目标宇符串*/Stext
);
如果输入的文本是：
AT&T --> *baby Bells"
Scooked的值就是：
当然也可以预先准备好这些数组，下面的程序运行结果相同：
Spatterns
：（.//、.//.'./3/.）Kexxe=
Sreplacements=array（'&amp;′，'&lt;'，‘&gt;'，‘&quot;'）;
$cooked = preg_replace($patterns,$replacements,$text);
preg_replace能够接收数组作为参数是很方便的（这样程序员就不需要使用循环在各个
patterm和subject中进行选代），但是它的功能并没有增强。比如，各个pattermn并不是“并
行”处理的。但是，相比自己写PHP循环代码，内建的处理效率更高，而且更容易阅读。
为了说清楚，请参考这个例子，其中所有的参数都是数组：
$result_array = preg_replace($regex_array, $replace_array, $subject_array);
它等价于：
Sresult_array = array();
foreach ($subject_array as $subject)
reset（Sregex_array）；//准备通历两个数组
reset（Sreplace_array）；//把数组指针恢复到开头位置
while (list(,$regex) = each($regex_array))
1
list（,$replacement)=each($replace_array):
//regex和replacemnet已经准备就绪，应用到subject
$subject =preg_replace($regex,$replacement,$subject);
//已经处理完所有的regex，此subject处理完毕..·
Sresult_array[]=Ssubject；//...附加到结果数组中
---
## Page 488
462
第10章：PHP
数组参数的排序问题如果patterm和replacement都是字符串，它们会根据数组的内部顺序
配对，这种顺序通常就是它们添加到数组中的先后顺序（patterm数组中添加的第1个元素
对应replacemenr数组中的第1个元素，依次类推）。也就是说，对于array（）创建的“文
本数组”来说，排序没有问题，例如：
      . 
Sresult = preg_replace(array(′/[a-z]+/','/\d+/'),
（.unu.'.pxom.）e1e
$subject);
print "result: Sresult\n";
[a-z]+i对应‘word’，下面的'\d+对应‘num’，结果就是
result: word word num word word num word
相反，如果patterm或replacement数组是多次填充的，数组的内部顺序可能就不同于keys
的顺序（也就是说，由keys表示的数字顺序）。所以前一页的程序使用数组模拟
preg_replacement的程序要使用each来按照数组的内部顺序遍历整个数组，而不关心它
们的keys 如何。
如果pattern或replacement数组的内部顺序不同于你希望匹配的顺序，可以使用ksort（）
函数来确保每个数组的实际顺序和外表顺序是相同的。
如果patterm和replacement都是数组，而pattern中元素的数目多于replacement中的元素，
则会在replacement数组中产生对应的空字符串，来进行配对。
patterm数组中的元素顺序不同，结果可能大不相同，因为它们是按照数组中的顺序来处理
的。如果把例子中的pattem数组的顺序颠倒过来（把replacement数组中的顺序也颠倒过来），
结果是什么呢？也就是说，下面代码的结果是什么呢？
Ssubject ="this has 7words and 31 1etters*;
$result=preg_replace（array(/\d+/,/[a-z]+/),
array（'num'，word'),
$subject);
print *result:$result\n";
请翻到下页查看答案。
---
## Page 489
Preg函数罗列
463
preg_replace_callback
使用方法
preg_replace_callback(pattern, callback, subject [, limit [, count ]])
参数简介
pattern分隔符包围起来的正则表达式，可能出现修饰符（r444）。也可能是字符串数组。
callbackPHP回调函数，每次匹配成功，就执行它，生成replacement字符串。
subject需要搜索的目标字符串。也可能是字符串数组（依次处理）。
limit
非强制出现，设定替换操作的上限（460)。
非强制出现，用来保存实际发生替换的次数（只在PHP5.1.0中提供）。
返回值
如果subject是字符串，返回值就是字符事（其实是subject的一个副本，可能经过了修改）。
如果subject是字符串数组，返回值就是数组（每个元素都是subject中对应元素的副本，可
能发生了修改)。
讲解
preg_replace_callback类似于preg_replace，只是replacement参数变成了PHP回调
函数，而不是字符串或是字符串数组。它有点像使用模式修饰符e的preg_replace(459)，
但是效率更高（如果replacement部分的代码很复杂，这种办法更易于阅读）。
请参考PHP文档获得更多关于回调的知识，不过简单地说，PHP回调引I用（以许多种方式
中的一种）一个预先规定的函数，以预先规定的参数，返回预先规定的值。在preg_replace
callback中，每次成功匹配之后都会进行这种调用，参数是Smatches数组。函数的返回
值用作preg_replace_callback作为replacement。
回调可以以三种方式引用函数。一种是直接以字符串形式给出函数名；另一种是用PHP内
建的create_function生成一个匿名函数。稍后我们会看到使用这两种方法的例子。第三
种方式本书没有提及，它采用面向对象的方式，由一个包含两个元素（分别是类名和方法
名）的数组构成。
---
## Page 490
464
第10章：PHP
测验答案
462页问题的答案
462页问题中的程序运行结果如下（为了适应排版，进行了折行）：