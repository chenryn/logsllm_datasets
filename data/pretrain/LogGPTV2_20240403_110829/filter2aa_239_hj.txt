        await _hubProxy.Invoke("RemoveGroup", SelectedGroup);
        Groups.Remove(SelectedGroup);
      }
      catch (Exception ex)
      {
        _messagingService.ShowMessage(ex.Message);
      }
    }
发送和接收消息非常类似于前面的示例，区别是现在添加了分组信息（代码文件
WPFChatClient/ViewModels/GroupChatViewModel.cs）：
    public async void OnSendMessage()
    {
      try
      {
        await _hubProxy.Invoke("Send", SelectedGroup, Name, Message);
      }
      catch (Exception ex)
      {
        _messagingService.ShowMessage(ex.Message);
      }
    }
    public void OnMessageReceived(string group, string name, string message)
    {
      App.Current.Dispatcher.Invoke(() =>
      {
        Messages.Add($"{group}-{name}: {message}");
      });
    }
运行应用程序时，可以为所有已经加入的分组发送消息，查看所有已注册分组收到的
消息，如图43-6所示。
图43-6
43.5 WebHooks的体系结构
WebHooks通过Web应用程序提供了发布/订阅功能。这是WebHooks和SignalR之间唯
一的相似之处。在其他方面，WebHooks和SignalR大不相同，但可以彼此利用。在讨论如
何联合使用它们之前，先概述WebHooks。
在WebHooks中，可以把SaaS（软件即服务）服务调入网站。只需要向SaaS服务注册
网站。接着SaaS服务调用网站（参见图43-7）。在网站上，接收控制器从WebHooks发送
器中接收所有消息，并将其转发给相应的接收器。接收器验证安全性，检查消息是否来自
已注册的发送器，然后将消息转发给处理程序。处理程序包含处理请求的自定义代码。
图43-7
与SignalR技术相反，发送器和接收器并不总是连接起来的。接收器只提供了一个服
务API，由发送器在需要时调用。接收器需要在公共互联网地址上可用。
WebHooks的优点是在接收端易于使用，支持接收来自许多SaaS提供者的消息，如
Dropbox, GitHub、WordPress、PayPal、Slack、SalesForce等。每星期都会涌现出更多的新
提供者。
创建发送器并不比创建接收器容易，但ASP.NET Framework提供了大力支持。发送器
需要WebHook接收器的一个注册选项，这通常使用Web UI完成。当然，也可以通过编程
方式创建一个Web 
API来注册。注册后，发送器收到来自接收器的密钥和需要调用的
URL。这个密钥由接收器验证，只允许具备该密钥的发送器使用。发送器触发事件时，就
启动WebHook，实际上这涉及调用接收器的Web服务，传递（大部分）JSON信息。
Microsoft的ASP.NET NuGet包WebHooks可以抽象出差异，便于为不同的服务实现接
收器。也很容易创建ASP.NET Web API服务，验证发送器发出的密钥，把调用转发给自
定义处理程序。
为了查看WebHooks的易用性和优点，下面的示例应用程序创建Dropbox和GitHub接
收器。当创建多个接收器时，可以看到提供者和NuGet包提供的功能之间的区别。可以用
类似方式给其他SaaS提供者创建一个接收器。
43.6 创建Dropbox和GitHub接收器
为了创建并运行Dropbox和GitHub接收器示例，需要GitHub和Dropbox账户。对于
GitHub，需要存储库的管理员访问权限。当然，为了学习WebHooks，最好只使用这些技
术之一。无论使用什么服务，要使用所有的接收器，只需要设法让网站公开可用，例如发
布到Microsoft Azure上。
Dropbox（http://www.dropbox.com）在云上提供了一个文件存储。可以在其中保存文
件和目录，并与他人分享。有了WebHooks，可以收到Dropbox存储中的更改信息，例如
添加、修改和删除文件时可以收到通知。
GitHub（http://www.github.com）提供源代码存储库。.NET Core和ASP.NET Core 1.0
在GitHub的公共存储库上可用，本书的源代码也可用
（http://www.github.com/ProfessionalCSharp/Professional-CSharp6）。有了GitHub
WebHook，就可以接收推送事件的信息或对存储库的所有更改，如分叉、Wiki页面的更
新、问题等。
43.6.1 创建Web应用程序
首先创建一个名为SaasWebHooksReceiverSample的ASP.NET Web Application。选择
ASP.NET 4.6 Templates中的MVC，并添加Web API选项（参见图43-8）。
图43-8
接下来，添加NuGet包Microsoft.AspNet.WebHooks.Receivers.Dropbox和
Microsoft.AspNet. WebHooks.Receivers.GitHub。这些NuGet包支持从Dropbox和GitHub上接
收消息。使用NuGet包管理器，会发现更多支持其他SaaS服务的NuGet包。
43.6.2 为Dropbox和GitHub配置WebHooks
调用扩展方法InitializeReceiveDropboxWebHooks可以为Dropbox初始化WebHooks，调
用扩展方法InitializeReceiveGitHubWebHooks可以为GitHub初始化WebHooks。在启动代码
中通过HttpConfiguration调用这些方法（代码文件
SaaSWebHooksReceiverSample/App_Start/WebApiConfig.cs）：
    using System.Web.Http;
    namespace SaaSWebHooksReceiverSample
    {
      public static class WebApiConfig
      {
        public static void Register(HttpConfiguration config)
        {
          config.MapHttpAttributeRoutes();
          config.Routes.MapHttpRoute(
            name: "DefaultApi",
            routeTemplate: "api/{controller}/{id}",
            defaults: new { id = RouteParameter.Optional }
          );
          config.InitializeReceiveDropboxWebHooks();
          config.InitializeReceiveGitHubWebHooks();
        }
      }
    }
为了只允许接收定义的SaaS服务的消息，应使用密钥。可以通过应用程序设置配置这
些密钥。用于设置的键在NuGet包的代码中预定义。对于Dropbox，使用
MS_WebHookReceiverSecret_Dropbox键，对于GitHub使用
MS_WebHookReceiverSecret_GitHub键。这个密钥需要至少15个字符长。
如果想使用不同的Dropbox账户或不同的GitHub库，可以使用不同的密钥，通过标识
符定义多个密钥，如下面的代码段所示（代码文件
SaaSWebHooksReceiverSample/Web.config）：
43.6.3 实现处理程序
WebHook的功能在WebHookHandler中实现。在这个处理程序中可以做些什么呢？可
以把信息写入数据库、文件，以调用其他服务等。只是请注意，实现代码不需要执行太长
时间——几秒钟即可。如果实现代码需要执行太长时间，则发送器可能会重发请求。对于
更长时间的活动，最好把信息写入队列，在方法完成后遍历队列，例如使用一个后台进
程。
示例应用程序在接收事件时，会把一条消息写进Microsoft Azure Storage队列。要使用
这个队列系统，需要在http://portal.azure.com上创建一个Storage账户。在示例应用程序
中，Storage账户名为professionalcsharp。为了使用Microsoft Azure Storage，可以给项目添
加NuGet包WindowsAzure.Storage。
创建Azure Storage账户后，打开门户，复制账户名称和主要访问密钥，并将这些信息
添加到配置文件中（代码文件SaaSWebHooksSampleReceiver/web.config）：
要向队列发送消息，需要创建QueueManager。在构造函数中，读取配置文件中的配
置，创建一个CloudStorageAccount对象。CloudStorageAccount允许访问不同的Azure
Storage设备，例如队列、表和blob存储。CreateCloudQueueClient方法返回一个
CloudQueueClient，它允许创建队列和把消息写入队列。如果队列不存在，它就由
CreateIfNotExists创建。队列的AddMessage写入一条消息（代码文件
SaaSWebHooksSampleReceiver/WebHookHandlers/QueueManager.cs）：
    public class QueueManager
    {
      private CloudStorageAccount _storageAccount;
      public QueueManager()
      {
        _storageAccount = CloudStorageAccount.Parse(
          ConfigurationManager.AppSettings["StorageConnectionString"]);
      }
      public void WriteToQueueStorage(string queueName, string actions,
        string json)
      {
        CloudQueueClient client = _storageAccount.CreateCloudQueueClient();
        CloudQueue queue = client.GetQueueReference(queueName);
        queue.CreateIfNotExists();
        var message = new CloudQueueMessage(actions + "—-" + json);
        queue.AddMessage(message);
      }
    }
接下来，进入WebHook实现中最重要的部分：Dropbox和GitHub事件的自定义处理程
序。WebHook处理程序派生自基类WebHookHandler，重写了基类的抽象方法
ExecuteAsync。使用此方法，可从WebHook中收到接收器和上下文。接收器包含SaaS服务
的信息，例如示例代码中的github和dropbox。负责的接收器收到事件后，就一个接一个地
调用所有处理程序。如果每个处理程序都用于不同的服务，则最好首先检查接收器，比较
它和对应的服务，之后执行代码。在示例代码中，两个处理程序调用相同的功能，唯一的
区别是队列的名称不同。这里，只要一个处理程序就足够了。然而，基于SaaS服务，通常
有不同的实现，所以在示例代码中实现两个处理程序，每个都检查接收器的名称。使用
WebHookHandlerContext可以访问一组动作（这是触发WebHook的原因列表）、来自调用
者的请求的信息和从服务发送的JSON对象。动作和JSON对象被写入Azure 
Storage队列
（代码文件
SaaSWebHooksSampleReceiver/WebHookHandlers/GithubWebHookHandler.cs）：
        public class GithubWebHookHandler: WebHookHandler
        {
          public override Task ExecuteAsync(string receiver,
            WebHookHandlerContext context)
          {
            if ("GitHub".Equals(receiver, StringComparison.CurrentCultureIgnoreCa
se))
            {
              QueueManager queue = null;
              try
              {
                queue = new QueueManager();
                string actions = string.Join(", ", context.Actions);
                JObject incoming = context.GetDataOrDefault();
                queue.WriteToQueueStorage("githubqueue", actions, incoming.ToStri
ng());
              }
              catch (Exception ex)
              {
                queue? .WriteToQueueStorage("githubqueue", "error", ex.Message);
              }
            }
            return Task.FromResult(null);
          }
        }
对于生产场景中的实现，可以从JSON对象中读取信息，并作出相应的反应。然而请
记住，在处理程序中应该用几秒钟完成这项工作。否则，服务会重新发送WebHook。这
种行为随提供者的不同而不同。
在实现的处理程序中，可以构建项目，将应用程序发布到Microsoft Azure。可以直接
从Visual Studio的Solution Explorer中发布。选择项目，选择Publish上下文菜单，再选择
Microsoft Azure App Service目标。
  注意： 将网站发布到Microsoft Azure的内容参见第45章。
发布后，可以配置Dropbox和GitHub。对于这些配置，网站需要是公开可用的。
43.6.4 用Dropbox和GitHub配置应用程序
为了启用WebHooks和Dropbox，需要在Dropbox应用控制台中创建应用程序：
https://www.dropbox.com/developers/apps，如图43-9所示。
图43-9
为了在Dropbox上接收WebHooks，需要注册网站的公共URI。通过Microsoft Azure托
管站点时，主机名是.azurewebsites.net。接收器的服务
在/api/webhooks/incoming/provider上监听——例如，对于Dropbox是在
https://professionalcsharp.azurewebsites.net/api/webhooks/incoming/dropbox上。如果注册了
多个密钥，而不是其他密钥的URI，就把其密钥添加到URI中，
如/api/webhooks/incoming/dropbox/dp1。
Dropbox发送一个必须返回的挑战来验证有效的URI。可以使用接收器试一试，对于
Dropbox将接收器配置为访问URI:hostname/api/webhooks/incoming/dropbox/?
challenge=12345，返回字符串12345。
为了启用WebHooks和GitHub，打开GitHub库的Settings选项卡（参见图43-10）。这
里需要添加一个负载链接，对于这个项目是
http:///api/webhooks/incoming/github。同时，别忘了添加密钥，它必须与配置
文件中定义的相同。对于GitHub配置，可以从GitHub中选择application/json或基于表单的
application/x-www-form-urlencoded内容。使用事件，可以选择只接收推送事件、接收所有
事件或选择单个事件。
图43-10
  注意： 如果使用ASP.NET Web App，就可以使用向导启用WebHooks和
GitHub。
43.6.5 运行应用程序
配置好公共Web应用程序后，因为改变了Dropbox文件夹或GitHub库，所以新消息会
到达Microsoft Azure Storage队列。在Visual Studio内部，可以使用Cloud Explorer直接访问
队列。在Storage Accounts树中选择Storage Accounts，可以看到Queues条目显示了生成的
所有队列。打开队列，可以看到消息，如图43-11所示。
图43-11
43.7 小结
本章描述了Web应用程序的发布/订阅机制。使用SignalR，可以轻松地利用WebSocket
技术，使网络连接保持打开状态，允许信息从服务器传递到客户端。SignalR也适用于老
客户端，因为如果WebSocket不可用，SignalR可以作为后备轮询。
本章了解了如何创建SignalR集线器，在JavaScript和.NET客户端上通信。
SignalR支持分组，所以服务器可以向一组客户端发送信息。
在示例代码中，演示了如何使用SignalR在多个客户端之间聊天。同样，可以在许多
其他场景中使用SignalR。例如，如果设备中的一些信息通过服务器调用Web API，那么就
可以用这些信息通知连接的客户端。
介绍WebHooks时，可以看到基于发布/订阅机制的另一个技术。WebHooks与SignalR
不同，因为它只能用于带有公共互联网地址的接收器，而发送器（通常是SaaS服务）通过
调用Web服务来发布信息。由于WebHooks的功能，许多SaaS服务都提供了它，因此很容
易创建接收器，从这些服务中接收信息。
为了让WebHooks转发到防火墙后面的客户端，可以把WebHooks与SignalR结合起
来。只需要把WebHook信息传递给连接的SignalR客户端。
下一章介绍WCF的信息，这是一个成熟的技术，它基于SOAP，提供了先进的通信功
能。
第44章
WCF
本章要点
● WCF概述
● 创建简单的服务和客户端
● 定义服务、操作、数据和消息协定
● 服务的实现
● 对通信使用绑定
● 创建服务的不同宿主
● 通过服务引用和编程方式创建客户端
● 使用双工通信
● 使用路由
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● 简单的服务和客户端
● WebSocket
● 双工通信
● 路由
44.1 WCF概述
第42章介绍了ASP.NET 
Web 
API，这个通信技术基于Representational 
State
Transfer（REST）。用于客户端和服务器之间通信的老大哥是Windows 
Communication
Foundation（WCF）。这项技术最初在.NET 
3.0中引入，替换了一些不同的技术，如
在.NET应用程序和ASP.NET Web Services之间快速通信的.NET Remoting和用于独立于平
台进行通信的Web Services Enhancements（WSE）。如今，WCF相比ASP.NET Web API要
复杂得多，也提供了更多的功能，如可靠性、事务和Web服务安全性。如果不需要任何这
些先进的通信功能，ASP.NET Web API可能是更好的选择。WCF对于这些额外的功能而
言很重要，而且还支持旧应用程序。
本章用到的名称空间是System.ServiceModel。
  注意： 尽管本书的大多数章节都基于新的.NET Framework堆栈——.NET
Core 1.0，但本章需要完整的框架。WCF的客户端部分可用于.NET Core，但服务器端
需要完整的.NET Framework。在这些示例中，使用了.NET 4.6。不过作者还是会尽可能
使用.NET Core。用于定义协定和数据访问的库是使用.NET Core构建的。