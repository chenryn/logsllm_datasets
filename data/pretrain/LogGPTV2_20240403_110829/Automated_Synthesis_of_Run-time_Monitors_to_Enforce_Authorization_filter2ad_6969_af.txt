density which is the ratio, expressed as a percentage, be-
t{at(u) = true|u is a user} and
nt · nu (where t ranges over the set of tasks); and pc, the
constraint density which is the ration between the number
of SoD constraints in the set C and nt.
tween the cardinality of (cid:83)
The generator also produces random (ﬁnite) sequences
(r0, r1, ..., rn) of authorization requests where ri = (t, u) for
t a task and u a user, encoding the question “can u per-
1We would like to thank the authors for sharing their source
code with us.
form task t according to the authorization policy speciﬁed
by the at’s and the constraints in C while guaranteeing its
termination?”
According to our experience with real-world workﬂows (cf.
Section 4.1), we set ntw to 5 and increase the number nw of
subﬂows so that the total number nt of tasks in the gener-
ated workﬂows range from 10 to 500 (notice that [12] consid-
ers workﬂows with at most 150 tasks). More precisely, we
let nt = 10, 20, ..., 150, 200, 250, ..., 500 and, following [12],
nu = nt, pa = 100%, 50%, 10%, pc = 5%, 10%, 20%.
Figure 7 shows the behavior of our prototype tool, for the
oﬀ-line (left) and on-line (right) phases, on the hierarchic
workﬂows produced by the random generator with the pa-
rameters described above. The x-axis shows the number nt
of task in the workﬂow, the y-axis the timings in seconds,
each line corresponds to diﬀerent values for the pair (pa, pc)
of parameters (recall that nu = nt). The timings are ob-
tained on a MacBook 2014 laptop with a 1.3GHz dual-core
Intel Core i5 processor and 8GB of RAM, running MAC OS
X 10.9.4.
It is clear that the computation time of our tool in both
the on-line and oﬀ-line phases is linear in the number of tasks
in the workﬂows for any value of the pair (pa, pc) of param-
eters. For the oﬀ-line phase, this is so because of the divide-
and-conquer strategy described above and supported by hi-
erarchic workﬂows. For the on-line phase, the linear growth
is due to the fact that the synthesized Datalog programs
belong to a class whose requests can be answered in linear-
time. Notice also that that for workﬂows with nt ≤ 200, the
(median) time to answer a request is under 1 second while
for workﬂows with 200 < nt ≤ 500, it is around 1.6 seconds.
This clearly demonstrates that the monitors synthesized by
our tool are suitable to be used on-line.
To give an idea of the distribution of the answers given
by the synthesized monitors to the randomly generated
sequences of authorization requests, Figure 8 shows the
number of denied (in red) and granted (in green) requests
(y-axis) for workﬂows with nt = 10, ..., 400 (x-axis) and
(pa, pc) = (10, 20) (the number shown on the x-axis must
be multiplied by 10 to obtain the number of tasks in the
workﬂow). We believe that these results clearly show the
scalability and practical applicability of our approach on the
important class of hierarchically speciﬁed workﬂows.
5. RELATED WORK
Veriﬁcation of array-based systems. Model Check-
ing Modulo Theories [16] is an approach for the veriﬁcation
of array-based systems based on the computation of pre-
DynamicEnforcementofAbstractSeparationofDutyConstraints13:7Fig.1.DrugdispensationprocessmodeledinBPMN.drugstopatientswithinahospital.Thedrugsdispensedareeitherinanexperimentalstageorareveryexpensiveandthereforerequirespecialdiligence.Figure1showsavisualizationofthedrugdispensationworkﬂowintheBusinessProcessModelingNotation(BPMN)[OMG2011].Forourcasestudy,letT={t1,...,t10},wheret1referstoRequestDrugs,t2toRetrievePatientRecord,etc.,asillustratedinFigure1.ThesetofusersUandthesetofrolesRareshowninFigure2.Let(UA1,PA)betheinitialRBACconﬁgurationofourcasestudy.TheuserassignmentrelationUA1isdepictedinFigure2,ignoringthedashedanddottedlinesbetweenusersandroles,forexample,(Alice,Therapist)∈UA1and(Alice,Pharmacist)̸∈UA1.ThepermissionassignmentrelationPAisillustratedinFigure1bymeansofBPMNannotations.Forexample,onlyusersactingintheroleNurseareauthorizedtoexecutet2withrespectto(UA1,PA).Weassignedonlyoneroletoeachtaskbutingeneraltaskscanbeannotatedwithsetsofroles.AninstanceofthedrugdispensationworkﬂowisstartedbyaPatientwhorequestsdrugsbyhandinghisprescriptiontoaNurse.TheNurseretrievesthepatient’srecordfromthehospital’sdatabaseandforwardsalldatatoaPrivacyAdvocatewhocheckswhetherthepatient’sdatamustbeanonymized.Ifanonymizationisrequired,thisisdonebyacomputerprogram.Weignorethistaskinourforthcomingdiscussionaswefocusonhumantasks.Iftherapeuticnotesarecontainedintheprescription,theyarereviewedbyaTherapist.Inparallel,research-relateddataisaddedbyaResearcheriftherequesteddrugsareinanexperimentalstage.Finally,aPharmacisteitherapprovesthedispensationandaNursecollectsthedrugsfromthestockandgivesthemtothepatient,orhedeniesthedispensationandaNurseinformsthePatientaccordingly.WemodelthedrugdispensationworkﬂowinCSPasthefollowingworkﬂowprocess.W=t1.u1:U→t2.u2:U→t3.u3:U→!(W1|||W2);W3",W1=SKIP⊓(t5.u5:U→SKIP),W2=SKIP⊓(t6.u6:U→SKIP),W3=t7.u7:U→!(t8.u8:U→SKIP)⊓(t9.u9:U→t10.u10:U→SKIP)".Becausewedonotmodeldata-ﬂow,weoverapproximategatewaydecisions,suchaswhethertherapeuticalnotesmustbereviewed,withCSP’sinternal-choiceoperatorACMTransactionsonInformationandSystemSecurity,Vol.15,No.3,Article13,Publicationdate:November2012.Basinetal./Obstruction-freeauthorizationenforcement7Figure4:ThecollateralevaluationworkﬂowmodelledinBPMN3.1WorkﬂowsTherearenumeroustranslationsfromBPMNandsimilarworkﬂowmodelinglanguagestoprocesscalculisuchasCSP[37]orthe⇡-calculus[22].ThetechnicaldifferencesareunimportantforourworkhereandweuseastraightforwardtranslationtoCSP,illustratedinourrunningexample.Forthereminderofthisarticle,assumeasetoftasksTandasetofpointsO.PointsareusedtomodelBPMNevents.Weformalizeworkﬂowsatthecontrol-ﬂowlevelusingCSPasfollows.Deﬁnition1(Workﬂowprocess)AworkﬂowprocessisaprocessWsuchthatT(W)✓(T[O)⇤X.Inotherwords,aworkﬂowprocessmayengageintasks,points,andﬁnallytheeventX.Wegivebelowanexampleworkﬂow,visualizedinBPMN,andacorrespondingworkﬂowprocess.Thisworkﬂowservesasarunningexamplefortheremainderofthisarticle.Example1(CollateralEvaluationWorkﬂow)Theﬁnancialindustrydistinguishesbetweensecuredandunsecuredloans.Inasecuredloan,theborrowerpledgessomeasset,suchasahouseoracar,ascollateralforhisdebt.Iftheborrowerdefaults,thecreditortakespossessionoftheassettomitigatehisﬁnancialloss.Figure4showsaBPMNmodelofthecollateralevaluationworkﬂow,whichweadoptedfromIBM’sInformationFrameWork[14].IgnorethegrayBPMNelementsforthemoment.Thiswork-ﬂowisexecutedbyaﬁnancialinstitutiontoevaluate,accept,andpreparethesafeguardingofthecollateralthataborrowerpledgesinreturnforasecuredloan.Forthisexample,letT={t1,...,t5}wheret1referstoComputeMarketValue,t2toControlComputation,etc.,andO={o1,o2,o3},asshowninFigure4.TheworkﬂowprocessWmodelsthecollateralevaluationworkﬂowinCSP.W=(P1|||P2);(t5!((o2!W)uSKIP))P1=t1!t2!((o1!P1)uSKIP)P2=o3!t3!((t4!SKIP)uSKIP)Wedonotmodeldata-ﬂowinourexampleandthereforeoverapproximategatewaydecisionswithCSP’sinternalchoiceoperatoru.⇧Next,wemodeltheexecutionofworkﬂowsatthetask-executionlevel.Forthereminderofthisarticle,letUbethesetofusers.Foratasktandauseru,theCSPeventt.umodelstheexecutionofaninstanceoftbyu.Wecallt.ua(task)executionevent.LetX={t.u|t2T,u2U}bethesetofallexecutionevents.Theauxiliaryrelation⇡={(t.u,t)|t2T,u2U}mapseveryFigure 7: Total run-time of oﬀ-line (left) and online (right) phase by the number of tasks in all conﬁgurations
Wang and Li [27] proposed a role-and-relation based ac-
cess control model that allows to describe the relationships
between users and thus specify complex authorization con-
straints. The authors showed that the WSP is NP-complete
in their model and that this intractability is inherent in
authorization systems supporting simple constraints. They
showed that with only equality and inequality relations, us-
ing the number of tasks as a parameter renders the WSP
ﬁxed-parameter tractable. They also reduced the problem
to SAT. Yang et al. [20] studied the complexity of several
formulations of the WSP, considering the possibility of dif-
ferent control-ﬂow patterns, and showed that, in general, the
problem is intractable.
Basin et al. [5] considered the problem of choosing autho-
rization policies that allow a successful workﬂow execution
and an optimal balance between system protection and user
empowerment. They treat the problem as an optimization
problem (ﬁnding the cost-minimizing authorization policy
that allows a successful workﬂow execution) and show that,
in the role-based case, it is NP-complete. They generalize
the decision problem of whether a given authorization pol-
icy allows a successful workﬂow execution to the notion of
an optimal authorization policy that satisﬁes this property.
In a following work, Basin et al. [4] used the Separation of
Duties Algebra (SoDA) to enforce SoD constraints in a dy-
namic, service-oriented enterprise environment. The authors
generalized SoDA’s semantics to workﬂow traces that satisfy
a term and reﬁned it for control-ﬂow and role-based autho-
rizations. Their formalization, based on CSP, is the base
for provisioning SoD as a Service, with an implementation
using a workﬂow engine and a SoD enforcement monitor. [4]
is the closest to us in terms of monitor implementation, but
their monitor only veriﬁes if a trace of a workﬂow satisﬁes
a SoDA term, being incapable of checking whether there is
a future trace that can be concatenated in order to satisfy
the workﬂow.
This work. This work extends the results in [7, 9] by
describing a fully automated technique, arguing its correct-
ness, providing an implementation, and a thorough experi-
mental evaluation. The main advantages of our work with
respect to the others discussed above is the speciﬁcation of
the security-sensitive workﬂows as array-based systems, the
consideration of an oﬀ-line and an on-line phase and the
composition of sub- workﬂows. These three characteristics
allow us to eﬃciently compute all terminating executions of
large instances of workﬂows for a ﬁnite but unbounded num-
ber of users and then translate it to a Datalog program that
acts as an eﬃcient run-time monitor.
Figure 8: Number of granted (green) and de-
nied (red) requests for increasing values of nt with
(pa, pc) = (10, 20)
images of a set of states using ﬁrst-order formulae and on
reducing ﬁx-point checks to SMT solving. This approach is
implemented by the model checker mcmt [17]. The link be-
tween array-based systems and security-sensitive workﬂows
was given in [8], where composed array-based systems rep-
resent security-sensitive workﬂows, with a terminating pro-
cedure for the veriﬁcation of reachability properties for this
class of systems.
Workﬂow Satisﬁability. Bertino et al. [6] described the
speciﬁcation and enforcement of authorization constraints
in workﬂow management systems, presenting constraints as
clauses in a logic program and an exponential algorithm
for assigning users and roles to tasks without violating
them, but considering only linear workﬂows. Crampton [11]
showed another model for specifying constraints, considering
workﬂows as DAGs, and an algorithm to determine whether
there is an assignment of users to tasks that satisﬁes the
constraints, showing that it can be incorporated into a ref-
erence monitor. [13] extended the previous work to consider
the eﬀects of delegation on satisﬁability, showing algorithms
to only allow delegations that can still satisfy a workﬂow.
Crampton et al. [12] used model checking on an NP-complete
fragment of linear temporal logic to decide the satisﬁability
of workﬂow instances. The authors presented three diﬀer-
ent encodings in LTL(F) that can compute a set of solutions,
minimal user bases and a safe bound on resiliency. The syn-
thesis of monitors was left as future work.
6. CONCLUSIONS
We have introduced and implemented a precise technique
to automatically synthesize run-time monitors capable of en-
suring the successful termination of workﬂows while enforc-
ing authorization policies and SoD constraints, thus solving
the run-time version of the WSP. It consists of an oﬀ-line
phase in which we compute a symbolic representation of all
possible behaviors of a workﬂow and an on-line phase in
which the monitor is derived from such a symbolic represen-
tation. An advantage of the technique is that changes in the
policies can be taken into account without re-running the
oﬀ-line phase since only an abstract interface to policies is
required. The interface is reﬁned to the concrete policy only
in the on-line phase. We have also described the assump-
tions for the correctness of the technique (cf. Theorem 3.4).
An extensive experimental evaluation with an implementa-
tion of the technique shows the scalability of our approach
on the important class of hierarchic workﬂows.
As future work, we plan to present a detailed descrip-
tion of our heuristics to obtain equivalent hierarchic spec-
iﬁcation of monolithic workﬂows. This would allows us to
enlarge the scope of applicability of our approach even fur-
ther. We also intend to integrate our prototype in avail-
able workﬂow execution engines—e.g., the one available in
the SAP HANA platform (http://www.sap.com/hana)—to
collect data about the performances of our monitors on real
workﬂows, and compare the results with those in this paper.
This would be an important step towards the creation of a
library of benchmarks to set a standard for the evaluation
of workﬂow analysis techniques.
7. REFERENCES
[1] P. A. Abdulla, K. Cerans, B. Jonsson, and Y.-K. Tsay.
General decidability theorems for inﬁnite-state
systems. In Proc. of LICS, pages 313–321, 1996.
[2] A. Armando and S. E. Ponta. Model Checking of
Security-sensitive Business Processes. In 6th Int. Ws.
on Formal Aspects in Security and Trust (FAST),
2009.
[3] D. Basin, S. J. Burri, and G. Karjoth. Obstruction-free
authorization enforcement: Aligning security with
business objectives. In Proc. of CSF’11, pages 99–113,
Washington, DC., 2011. IEEE Computer Society.
[4] D. Basin, S. J. Burri, and G. Karjoth. Dynamic
enforcement of abstract separation of duty constraints.
ACM TISSeC, 15(3):13:1–13:30, Nov. 2012.
[5] D. Basin, S. J. Burri, and G. Karjoth. Optimal
workﬂow-aware authorizations. In Proc. of SACMAT
’12, pages 93–102, New York, NY, 2012. ACM.
[6] E. Bertino, E. Ferrari, and V. Atluri. The speciﬁcation
and enforcement of authorization constraints in
workﬂow management systems. TISSeC, 2:65–104,
1999.
[7] C. Bertolissi and S. Ranise. A Methodology to build
run-time Monitors for Security-Aware Workﬂows. In
Proc. of ICITST’13. IEEE, 2013.
[8] C. Bertolissi and S. Ranise. Veriﬁcation of Composed
Array-based Systems with Applications to
Security-Aware Workﬂows. In Proc. of FROCOS’13.
Springer, 2013.
[9] C. Bertolissi and S. Ranise. A smt–based methodology
for monitoring of security–aware workﬂows. Int. J. of
ITST, 5(3):275–290, 01 2014.
[10] S. Ceri, G. Gottlob, and L. Tanca. What You Always
Wanted to Know About Datalog (And Never Dared to
Ask). IEEE TKDE, 1(1):146–166, 1989.
[11] J. Crampton. A reference monitor for workﬂow
systems with constrained task execution. In 10th ACM
SACMAT, pages 38–47. ACM, 2005.
[12] J. Crampton, M. Huth, and J.-P. Kuo. Authorized
workﬂow schemas: deciding realizability through ltl(f)
model checking. STTT, 16(1):31–48, 2014.
[13] J. Crampton and H. Khambhammettu. Delegation
and satisﬁability in workﬂow systems. In SACMAT,
pages 31–40, New York, NY, USA, 2008. ACM.
[14] E. W. Dijkstra. A Discipline of Programming.
Prentice-Hall, 1976.
[15] H. B. Enderton. A Mathematical Introduction to
Logic. Academic Press, New York-London, 1972.
[16] S. Ghilardi and S. Ranise. Backward reachability of
array-based systems by SMT solving: Termination and
invariant synthesis. In LMCS, Vol. 6, Issue 4, 2010.
[17] S. Ghilardi and S. Ranise. MCMT: A Model Checker
Modulo Theories. In IJCAR, volume 6173 of LNCS,
pages 22–29, 2010.
[18] N. Li and J. C. Mitchell. Datalog with constraints: a
foundation for trust management languages. In
PADL’03, pages 58–73, 2003.
[19] T. Murata. Petri nets: properties, analysis and
applications. Proc. of the IEEE, 77(4):541–580, 1989.
[20] I. R. P. Yang, X. Xie and S. Lu. Satisﬁability analysis
of workﬂows with control-ﬂow patterns and
authorization constraints. IEEE TSC, 99, 2013.
[21] S. Sankaranarayanan, H. Sipma, and Z. Manna. Petri
net analysis using invariant generation. In In
Veriﬁcation: Theory and Practice, LNCS 2772, pages
682–701. Springer Verlag, 2003.
[22] A. U. Shankar. An Introduction to Assertional
Reasoning for Concurrent Systems. ACM Comput.
Surv., 25(3):225–262, Sept. 1993.
[23] W. van der Aalst. Workﬂow veriﬁcation: Finding
control-ﬂow errors using petri-net-based techniques. In
Business Process Management, volume 1806 of LNCS,
pages 161–183. Springer, 2000.
[24] W. van der Aalst and A. H. M. T. Hofstede. Yawl:
Yet another workﬂow language. Inf. Systems,
30:245–275, 2003.
[25] W. van der Aalst, K. van Hee, A. ter Hofstede,
N. Sidorova, H. Verbeek, M. Voorhoeve, and
M. Wynn. Soundness of workﬂow nets: classiﬁcation,
decidability, and analysis. Formal Aspects of Comp.,
23(3):333–363, 2011.
[26] W. M. P. Van Der Aalst, A. H. M. Ter Hofstede,
B. Kiepuszewski, and A. P. Barros. Workﬂow patterns.
Distrib. Parallel Databases, 14(1):5–51, July 2003.
[27] Q. Wang and N. Li. Satisﬁability and resiliency in
workﬂow authorization systems. TISSeC,
13:40:1–40:35, December 2010.