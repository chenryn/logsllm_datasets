title:LASTor: A Low-Latency AS-Aware Tor Client
author:Masoud Akhoondi and
Curtis Yu and
Harsha V. Madhyastha
2012 IEEE Symposium on Security and Privacy
LASTor: A Low-Latency AS-Aware Tor Client
Masoud Akhoondi, Curtis Yu, and Harsha V. Madhyastha
Department of Computer Science and Engineering
University of California, Riverside
{makho001,cyu,harsha}@cs.ucr.edu
Abstract—The widely used Tor anonymity network is designed
to enable low-latency anonymous communication. However, in
practice, interactive communication on Tor—which accounts for
over 90% of connections in the Tor network [1]—incurs latencies
over 5x greater than on the direct Internet path. In addition, since
path selection to establish a circuit in Tor is oblivious to Internet
routing, anonymity guarantees can breakdown in cases where an
autonomous system (AS) can correlate trafﬁc across the entry
and exit segments of a circuit.
In this paper, we show that both of these shortcomings in Tor
can be addressed with only client-side modiﬁcations, i.e., without
requiring a revamp of the entire Tor architecture. To this end,
we design and implement a new Tor client, LASTor. First, we
show that LASTor can deliver signiﬁcant latency gains over the
default Tor client by simply accounting for the inferred locations
of Tor relays while choosing paths. Second, since the preference
for low latency paths reduces the entropy of path selection,
we design LASTor’s path selection algorithm to be tunable. A
user can choose an appropriate tradeoff between latency and
anonymity by specifying a value between 0 (lowest latency) and
1 (highest anonymity) for a single parameter. Lastly, we develop
an efﬁcient and accurate algorithm to identify paths on which
an AS can correlate trafﬁc between the entry and exit segments.
This algorithm enables LASTor to avoid such paths and improve a
user’s anonymity, while the low runtime of the algorithm ensures
that the impact on end-to-end latency of communication is low.
By applying our techniques to measurements of real Internet
paths and by using LASTor to visit the top 200 websites from
several geographically-distributed end-hosts, we show that, in
comparison to the default Tor client, LASTor reduces median
latencies by 25% while also reducing the false negative rate of
not detecting a potential snooping AS from 57% to 11%.
I. INTRODUCTION
Tor [2] is a widely used and deployed network for anony-
mous communication on the Internet. Unlike other systems
that facilitate anonymous communication [3], [4], Tor distin-
guishes itself by enabling low-latency communication. Indeed,
a vast majority of users—accounting for over 90% of TCP
connections [1] on Tor—use Tor for interactive trafﬁc.
However, several measures for increasing client anonymity
in Tor fundamentally inﬂate communication latencies. For
example, the default Tor client sets up a tunnel between itself
and a destination via three relays selected at random, with
some preference for relay stability and access link bandwidth.
This random selection of relays can lead to circuitous rout-
ing of tunnels around the globe, resulting in high latencies.
Previous solutions for improving performance on Tor have
either focused on increasing throughput [5], or those that
focused on improving latencies mandate a revamp of the Tor
network, e.g., by having all Tor relays participate in a network
coordinate system [6], [7] or by modifying trafﬁc management
at relays [8]. Due to the undoubtedly signiﬁcant development
effort required to implement these changes, these solutions are
yet to be deployed.
In addition, Tor’s anonymity guarantees breakdown in some
cases due to its path selection being oblivious to Internet
routing. For example, on some paths, an Autonomous System
(AS) may be present on the Internet routes both between the
client and the entry relay and between the exit relay and the
destination. Such an AS can statistically correlate trafﬁc on
the entry and exit segments of the path and potentially infer
the destination with which the client communicated. Though
this problem has been recognized previously [9], [10] and the
default Tor client attempts to preempt such cases by ensuring
that no two relays in a path are in the same /16 IP preﬁx,
we ﬁnd that this heuristic is insufﬁcient for detecting most
instances of potential snooping by ASes.
In this paper, we seek to address both of the above short-
comings with Tor today by making only client-side modi-
ﬁcations. This approach ensures that a user can obtain the
resultant beneﬁts in latency and anonymity simply by updating
her Tor client, without having to wait for changes to the rest of
the Tor network. Therefore, we seek to answer the following
question: what latency improvements can a Tor client obtain
today, without any modiﬁcations to the rest of Tor, while
also avoiding paths on which an AS could break the client’s
anonymity by correlating trafﬁc? Towards this end, we design
and implement LASTor, a new Tor client that differs from the
default Tor client only in its path selection algorithm.
In developing LASTor, we make three primary contributions.
First, we show that signiﬁcant latency gains are possible by
solely accounting for the inferred geographic locations of
relays, rather than needing up-to-date latency information of
Internet paths (e.g., from network coordinates). We implement
the Weighted Shortest Path (WSP) algorithm that probabilis-
tically chooses paths with a preference for shorter paths.
However, with a naive implementation of WSP, an adversary
can increase the probability of a relay under his control being
on the chosen path by simply setting up a large number of
relays in the same location, which is close to the direct line
between the client and the destination. To preempt this attack,
we implement LASTor to execute WSP on a graph of the
Tor network where nearby relays are clustered together; this
increases the onus on an adversary to establish relays in several
© 2012, Masoud Akhoondi. Under license to IEEE.
DOI 10.1109/SP.2012.35
476
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
locations in order to ensure a high probability for the chosen
path traversing a relay under his control. A side-effect of
clustering relays is that WSP’s runtime is signiﬁcantly reduced.
Second, we make LASTor resilient to the attack where an AS
can correlate trafﬁc on the entry and exit segments of the cho-
sen path by explicitly avoiding such paths. To do so, we need
to equip LASTor with the ability to predict Internet routing be-
tween relays and end-hosts; we cannot simply measure routes
from every relay since we seek a solution that only requires
client-side modiﬁcations. The use of existing approaches for
predicting Internet routes is however impractical since they
either require clients to download gigabytes of data daily [11],
[12] or have signiﬁcantly high runtimes [13], which would
override the beneﬁts of selecting a low latency path. Therefore,
we instead develop a computationally lightweight technique
that has a low false-negative rate in failing to identify paths
that permit the possibility of “snooping” ASes. Our key insight
here is to predict the set of ASes through which the Internet
may route trafﬁc between a pair of IP addresses, rather than
predicting the precise route between them. Importantly, in
order to run this AS set prediction algorithm, clients need
download only 13 MB of data initially and 1.5 MB every
week thereafter.
Finally, LASTor makes path selection tunable. Probabilistic
selection of paths with a preference for shorter paths re-
duces the entropy of path selection, and all users may not
wish to trade-off the resulting reduction in anonymity for
reduced latency. Therefore, LASTor enables a user to choose
an appropriate tradeoff between latency and anonymity. By
choosing a value between 0 (lowest latency) and 1 (highest
anonymity) for a single parameter, a user can conﬁgure LASTor
to appropriately tailor path selection.
We demonstrate LASTor’s beneﬁts in improving latency by
using it to visit the top 200 websites from 50 geographically
distributed PlanetLab nodes. We see that even without any
modiﬁcation to the rest of Tor, LASTor provides a median
latency improvement of 25% over the default Tor client. We
also use measurements of AS-level routes on over 200K
Internet paths to evaluate LASTor’s ability to preempt the
possibility of snooping ASes jeopardizing the anonymity of
clients. We see that for the median (client, destination) pair,
LASTor fails to identify only 11% of the instances in which
a snooping AS can exist; in comparison, we observe a false-
negative rate of 57% with the default Tor client.
II. BACKGROUND AND MOTIVATION
(a)
AS3
AS2
AS4
AS2
S
AS1
R1
R2
R3
AS5
D
(b)
(a) Random relay selection can inﬂate end-to-end latencies
Fig. 1.
due to circuitous routing, and (b) an example in which an AS (AS2)
can subvert the client’s anonymity by correlating trafﬁc across the
entry and exit segments.
relays—entry, middle, and exit nodes—and builds a circuit 1
through these three relays. The client appropriately encrypts
the data it sends to the entry relay so that each of these three
relays only knows the nodes before and after it on the path,
i.e., the entry relay knows the source and the middle relay, the
middle relay knows only the entry and exit relays, and the exit
relay knows only the middle relay and the destination. This
form of onion routing [15] preserves the client’s anonymity
by ensuring that no one other than the client knows that it
communicated with the destination.
To avoid statistical proﬁling attacks, the default Tor client
restricts its choice of entry nodes to a persistent list of three
randomly chosen nodes named “entry guards” [16]. For the
middle node, the Tor client sorts Tor relays based on their
access link bandwidth and randomly selects a relay, with the
probability of selection being higher for relays with higher
bandwidth. For the selection of the exit node, clients are
constrained by the fact that a large fraction of relays choose
to not serve as exit nodes. This is because destination servers
see the exit node as the computer that communicates with
them; if any malicious activity is detected by the destination, it
will assume that the exit relay is responsible. Therefore, when
selecting an exit node, a client chooses at random (again with
bias for higher bandwidth relays) among those relays willing
to serve as an exit node for the particular destination that the
client is attempting to contact and the particular service with
which this communication is associated.
In this section, we provide some background on Tor and
B. Motivation
discuss results that motivate our work.
A. Tor overview
Tor [14], a low-latency open source application that allows
users to use the Internet anonymously, was developed in
September of 2002. In Tor, clients download a list of relays and
some information about these relays from directory servers. To
establish a connection to a destination, a client selects three
The motivation for our work stems from two sources of
inefﬁciency in path selection as above in Tor today—high
latency due to circuitous routing and degradation of anonymity
because of path selection being oblivious to Internet routing.
Poor latency. First, as discussed above, a client selects en-
try, middle, and exit nodes in a circuit more or less at random.
As a result, the circuit between a client and a destination
1We use the terms path, circuit, and tunnel interchangeably in this paper.
477
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:33 UTC from IEEE Xplore.  Restrictions apply. 
 1
 0.8
 0.6
 0.4
 0.2
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 0
 0
 0.5
s
r
i
a
p
)
t
s
d
,
c
r
s
(
f
o
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
No Tor
SP Tor
Default Tor
 1
 1.5
 2
Latency (sec)
(a)
Same AS
Same /16
 0
 20  40  60  80  100
False negative rate (%)
(b)
(a) Comparison of latencies on the direct Internet path, with
Fig. 2.
Shortest Path routing on Tor, and with the default Tor client. (b) False
negatives in detecting snooping ASes with default Tor client.
can often be circuitous, causing signiﬁcant latency overhead
compared to latency on the default Internet path between the
client and the destination. Since Tor is predominantly used
for interactive communication [1], e.g., to visit websites, this
increased latency degrades user experience. Fig. 1(a) presents
such an example. A client in the US communicates with a
server in Canada. The client incurs signiﬁcant latency overhead
due to relay selection inefﬁciencies because all packets from
the client travel around the world two times before they reach
their destination.
To quantify the extent of this latency overhead, we measured
the latency of visiting the top 200 websites [17] from 50
PlanetLab nodes [18] spread across the globe. We measured
the latency between every PlanetLab node and every website
as the median latency of 5 HTTP HEAD requests. We ﬁrst
measured latencies by having the PlanetLab nodes contact the
websites directly. Next, we repeated the same with the com-
munication happening over the default Tor setup. We ﬁnally
measured latencies via Tor when choosing entry, middle, and
exit nodes that result in the shortest end-to-end path based
on the geographical locations (inferred using MaxMind’s IP
geolocation database [19]) of the client, the destination, and
the relays on the path. Fig. 2(a) shows the distribution across
(PlanetLab node, website) pairs of the latencies measured in
the three cases. First, we see that latencies measured using
default Tor are more than 5x greater than via the direct Internet
path (no Tor) in the median case. Second, latencies over the
shortest path on Tor (SP Tor) result in a 2x reduction in median
latency compared to default Tor.
Circuit establishment
in Tor however cannot simply be
modiﬁed to select the shortest path between the client and
the destination; this makes path selection deterministic and
enables adversaries to strategically setup relays that can sub-
vert the client’s anonymity. Instead, motivated by the latency
improvements possible by choosing geographically shorter
paths, our goal is to enable probabilistic path selection that
can deliver some of these latency beneﬁts without signiﬁcantly
compromising client anonymity.
Lack of AS-awareness. Though Tor’s use of onion routing
tries to ensure that no one other than the client has knowledge
of the destinations with which it communicates, there are a
variety of attacks possible (e.g., [20] [21]) from which this
information can be inferred. One such attack arises because
of Tor’s path selection being oblivious to Internet routing. In
the case where the routes through the Internet from the client
to the entry node and from the exit node to the destination
both traverse a common Autonomous System (AS), such an
AS can correlate the trafﬁc it observes to infer the (client,
destination) pair [22], [23]. Fig. 1(b) shows an example in
which AS2, which appears on both the routes from the source
S to the entry relay R1 and from the exit relay R2 to the
destination D, can potentially infer that S is communicating
with D. We hereafter refer to such ASes that have the potential
of correlating trafﬁc by snooping as snooping ASes. Note that
even though trafﬁc between the client and the entry node is
encrypted, ASes can observe the client’s IP address in the
headers of the packets that the client sends to the entry node.
Feamster and Dingledine [9] showed that the probability
of existence of snooping ASes is 10–30%. This observation
was re-evaluated 5 years later by Edman and Syverson [10].
They observed that while there are many more Tor relays
than before, this growth has only a slight effect on mitigating
attacks by snooping ASes. This is because Tor relays are not
scattered uniformly among ASes, and so the growth of the
network does not guarantee path location diversity. Further,
the presence of ASes that can snoop is especially likely in
cases where the client and destination are in the same location,
because the entry and exit segments of the circuit may go
through the same ASes with presence in that region.
Therefore, to protect its anonymity, a Tor client needs to
ensure that its algorithm for path selection prevents, or at least
minimizes, the existence of common ASes across both ends of
a circuit. To preempt AS-level attacks and preserve anonymity,
Tor’s default path selection algorithm ensures that the entry
and exit nodes on any particular circuit do not share the same
/16 IP address preﬁx [24].
We however ﬁnd that
this heuristic performs poorly in
practice in avoiding snooping ASes. First, in the deployment
of Tor as of June 2011, we observe that 60% of ASes that
have Tor relays resident in them have at least two relays that
are in different /16 subnets. In addition, we evaluated the /16
preﬁx heuristic on a dataset of measured AS paths (the PL-
BGP-Rand dataset described later in Section III). For every
(client, destination) pair in our dataset, we computed the false
negative rate of the /16 heuristic, i.e., of all entry and exit
node combinations in which there was a common AS across
the entry and exit segments, the fraction that the /16 heuristic
deemed as safe from snooping ASes. Fig. 2(b) plots this false
negative rate for this heuristic across (client, destination) pairs.
The /16 heuristic for avoiding snooping ASes miss over 40%
of instances of snooping ASes for more than 80% of (client,
destination) pairs. Furthermore, we ﬁnd that simply accounting
for the ASes in which the relays reside (the “Same AS” line
in Fig. 2(b)) is also insufﬁcient.