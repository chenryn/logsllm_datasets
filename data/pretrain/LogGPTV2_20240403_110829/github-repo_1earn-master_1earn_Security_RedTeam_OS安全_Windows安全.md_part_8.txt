#c:  c3                      ret
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)
```
---
### ETW
**什么是 ETW**
ETW(Event Trace for Windows) 是一个高效的内核级别的事件追踪机制，它可以记录系统内核或是应用程序的事件 (进程、文件、网络、注册表等行为) 到 Windows 日志文件， Process Monitor 工具以及大名鼎鼎的 Sysmon 也是基于 ETW 进行事件跟踪，有很多的 EDR 都是基于该数据源进行检测。
**相关文章**
- [Design Issues Of Modern EDRs: Bypassing ETW-Based Solutions](https://www.binarly.io/posts/Design_issues_of_modern_EDRs_bypassing_ETW-based_solutions/index.html)
- [两种最新Bypass ETW的方法](https://www.anquanke.com/post/id/202797)
- [基于内存补丁ETW的绕过](https://idiotc4t.com/defense-evasion/memory-pacth-bypass-etw)
- [Hiding your .NET - ETW](https://blog.xpnsec.com/hiding-your-dotnet-etw/)
- [ETW的攻与防](http://tttang.com/archive/1612/)
### UAC
**相关文章**
- [Advanced Windows Task Scheduler Playbook - Part.2 UAC](https://mp.weixin.qq.com/s/3H6krW59Sci5SsA_5fyOzw)
    - https://github.com/zcgonvh/TaskSchedulerMisc
**相关项目**
- [zha0gongz1/iscsicpl_bypassUAC](https://github.com/zha0gongz1/iscsicpl_bypassUAC) - UAC bypass for x64 Windows 7 - 11（无弹窗版）
- [Wh04m1001/IFaultrepElevatedDataCollectionUAC](https://github.com/Wh04m1001/IFaultrepElevatedDataCollectionUAC)
### DLL 劫持
**相关文章**
- [x64dbg中的白加黑利用](https://payloads.online/archivers/2022-08-17/1/)
    - https://github.com/Rvn0xsy/Invoke-x64dbg-loaddll
- [DEFCON议题解读｜Dll劫持新思路——修改环境变量](https://mp.weixin.qq.com/s/S1yA8M_0EMUBNScxd9NWjw)
- [dll 劫持和应用](https://paper.seebug.org/1713/)
- [Backdooring MSBuild - marpie (a12d404.net)](https://www.a12d404.net/ranting/2021/01/17/msbuild-backdoor.html)
- https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security
**相关工具**
- [strivexjun/AheadLib-x86-x64](https://github.com/strivexjun/AheadLib-x86-x64) - hijack dll Source Code Generator. support x86/x64
**相关项目**
- [wietze/HijackLibs](https://github.com/wietze/HijackLibs)
    - https://hijacklibs.net
---
### PatchGuard
**相关工具**
- [everdox/InfinityHook](https://github.com/everdox/InfinityHook) - Hook system calls, context switches, page faults and more.
- [hfiref0x/UPGDSED](https://github.com/hfiref0x/UPGDSED) - Universal PatchGuard and Driver Signature Enforcement Disable
---
### PPL
**相关文章**
- [PPL利用](http://tttang.com/archive/1743/)
---
### Hook
#### D/Invoke
**相关文章**
- [破局P/Invoke，D/Invoke隐匿技术与武器化实现剖析](https://mp.weixin.qq.com/s/aqDnt211GL1v-BfO41SJSQ)
- [Emulating Covert Operations - Dynamic Invocation (Avoiding PInvoke & API Hooks)](https://thewover.github.io/Dynamic-Invoke/)
- [Syscalls with D/Invoke](https://offensivedefence.co.uk/posts/dinvoke-syscalls/)
---
## BitLocker
**相关工具**
- [e-ago/bitcracker](https://github.com/e-ago/bitcracker) - BitCracker is the first open source password cracking tool for memory units encrypted with BitLocker
    - [BitCracker：BitLocker密码破解工具](https://www.freebuf.com/sectool/185006.html)
**BitLocker 磁盘文件解密**
- 使用 FTK Imager 挂载目标盘,例如挂载到 E:
    ```
    manage-bde -unlock [盘符] -RecoveryPassword [恢复密钥]
    manage-bde -unlock E: -RecoveryPassword xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx
    ```
- diskgenius 也可以解锁
---
## Windows Defender
**相关文章**
- [渗透基础——Windows Defender](https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80-Windows-Defender)
**查看Windows Defender版本**
```
dir "C:\ProgramData\Microsoft\Windows Defender\Platform\" /od /ad /b
```
**查看已存在的查杀排除列表**
```bash
# 注册表方式查看
reg query "HKLM\SOFTWARE\Microsoft\Windows Defender\Exclusions" /s
# powershell 方式查看
Get-MpPreference | select ExclusionPath
```
**关闭 Windows Defender**
```bash
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /d 1 /t REG_DWORD /f
# 之后重启电脑应用修改
# 取消关闭(实测,部分场景会自动开启)
reg delete "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /f
```
### Tamper Protection
- https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/prevent-changes-to-security-settings-with-tamper-protection?view=o365-worldwide
当开启Tamper Protection时，用户将无法通过注册表、Powershell和组策略修改Windows Defender的配置
开启Tamper Protection的方法：依次选择Windows Security->Virus & theat protection settings，启用Tamper Protection
```bash
# 注册表方式开启
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /d 5 /t REG_DWORD /f
```
关闭Tamper Protection的方法：依次选择Windows Security->Virus & theat protection settings，禁用Tamper Protection
```bash
# 注册表方式关闭
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /d 4 /t REG_DWORD /f
```
无法通过修改注册表的方式去设置Tamper Protection，只能通过面板进行修改
查看Tamper Protection的状态：
```bash
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection"
```
返回结果中的数值5代表开启，数值4代表关闭
### 关闭Windows Defender的Real-time protection
利用条件：
- 需要 TrustedInstaller 权限
- 需要关闭 Tamper Protection
```bash
# 注册表方式关闭
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /d 1 /t REG_DWORD /f
# 注册表方式开启
reg delete "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /f
# 使用 AdvancedRun 关闭
AdvancedRun.exe /EXEFilename "%windir%\system32\cmd.exe" /CommandLine '/c reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /d 1 /t REG_DWORD /f' /RunAs 8 /Run
# powershell 方式关闭(新版不可用❌)
Set-MpPreference -DisableRealtimeMonitoring $true
# 组策略关闭(新版不可用❌)
gpedit.msc->Computer Configuration->Administrative Templates->Windows Components->Microsoft Defender Antivirus->Real-time Protection，选择Turn off real-time protection，配置成Enable
```
### 添加查杀排除列表
- https://docs.microsoft.com/en-us/powershell/module/defender/add-mppreference?view=windowsserver2022-ps
利用条件：
- (注册表)需要TrustedInstaller权限
- (powershell)需要管理员权限
```bash
# 注册表方式添加
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths" /v "c:\test" /d 0 /t REG_DWORD /f
# powershell 方式添加
Add-MpPreference -ExclusionPath "C:\test"
# powershell 方式删除
Remove-MpPreference -ExclusionPath "C:\test"
```
### 恢复被隔离的文件
- https://docs.microsoft.com/en-us/microsoft-365/security/defender-endpoint/command-line-arguments-microsoft-defender-antivirus?view=o365-worldwide
定位MpCmdRun
```bash
dir "C:\ProgramData\Microsoft\Windows Defender\Platform\" /od /ad /b
```
获得 ``
MpCmdRun 的位置为：`C:\ProgramData\Microsoft\Windows Defender\Platform\`
```bash
# 查看被隔离的文件列表
MpCmdRun -Restore -ListAll
# 恢复指定名称的文件至原目录：
MpCmdRun -Restore -FilePath C:\test\xxxxx.zip
# 恢复所有文件至原目录：
MpCmdRun -Restore -All
# 查看指定路径是否位于排除列表中：
MpCmdRun -CheckExclusion -path C:\test
```
### 移除Token导致Windows Defender失效
Windows Defender进程为MsMpEng.exe,MsMpEng.exe是一个受保护的进程(Protected Process Light，简写为PPL)
非 PPL 进程无法获取 PPL 进程的句柄，导致我们无法直接结束 PPL 进程 MsMpEng.exe, 但是我们能够以 SYSTEM 权限运行的线程修改进程 MsMpEng.exe 的 token, 当我们移除进程 MsMpEng.exe 的所有 token 后，进程 MsMpEng.exe 无法访问其他进程的资源，也就无法检测其他进程是否有害，最终导致 Windows Defender 失效
- https://github.com/pwn1sher/KillDefender
- https://github.com/Octoberfest7/KillDefender
利用条件：
- 需要管理员权限
![](../../../../assets/img/Security/RedTeam/OS安全/Windows安全/12.png)
**防御手段**
- https://github.com/elastic/PPLGuard
### ASR 规则
**关于 ASR 规则**
- https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/attack-surface-reduction-rules-reference?view=o365-worldwide
**相关资源**
- [HackingLZ/ExtractedDefender](https://github.com/HackingLZ/ExtractedDefender)
- https://gist.github.com/infosecn1nja/24a733c5b3f0e5a8b6f0ca2cf75967e3
**相关文章**
- [Extracting Whitelisted Paths from Windows Defender ASR Rules](https://adamsvoboda.net/extracting-asr-rules/)
### VDM 文件提取
Windows Defender 签名/规则存储在 VDM 容器中。其中许多只是 Lua 脚本文件。可以使用 WDExtract 等工具从这些容器中解密和提取所有 PE 图像。
**关于 VDM 格式**
- https://github.com/commial/experiments/tree/master/windows-defender/VDM
**相关工具**
- [hfiref0x/WDExtract](https://github.com/hfiref0x/WDExtract) - Extract Windows Defender database from vdm files and unpack it
- https://github.com/commial/experiments/tree/master/windows-defender/lua
- [crisprss/Extracted_WD_VDM](https://github.com/crisprss/Extracted_WD_VDM)