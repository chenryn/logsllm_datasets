De Capitani di Vimercati and Paul Syverson (Eds.). ACM Press, 552–61.
[58] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagendra Modadugu,
and Dan Boneh. 2004. On the effectiveness of address-space randomization. In
Proceedings of the 11th ACM conference on Computer and communications security.
[59] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
and others. 2016. SOK:(State of) The Art of War: Offensive Techniques in Binary
Analysis. In Security and Privacy (SP), 2016 IEEE Symposium on.
[60] Jack Tang and Trend Micro Threat Solution Team. 2015. Exploring con-
trol flow guard in windows 10. Available at "http://blog.trendmicro.com/
trendlabs-security-intelligence/exploring-control-flow-guard-in-windows-10"
(2015).
[61] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC & LLVM.. In USENIX Security.
maximal matchings in bipartite graphs. Algorithms and Computation (1997).
f/pdf/rhel/WHP0006US_Execshield.pdf. (2004).
[63] Arjan van de Ven and Ingo Molnar. 2004. Exec shield. https://www.redhat.com/
[62] Takeaki Uno. 1997. Algorithms for enumerating all perfect, maximum and
[64] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context-
Sensitive CFI. In Proceedings of the 22nd Conference on Computer and Communi-
cations Security (CCS’15).
[65] Victor van der Veen, Dennis Andriesse, Manolis Stamatogiannakis, Xi Chen,
Herbert Bos, and Cristiano Giuffrida. 2017. The Dynamics of Innocent Flesh on
the Bone: Code Reuse Ten Years Later. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security, CCS 2017, Dallas, TX,
USA, October 30 - November 03, 2017. 1675–1689. DOI:http://dx.doi.org/10.1145/
3133956.3134026
[66] RN Wojtczuk. 2001. The advanced return-into-lib (c) exploits: PaX case study.
[67] Jin Y Yen. 1971. Finding the k shortest loopless paths in a network. management
Phrack Magazine, Volume 0x0b, Issue 0x3a, Phile# 0x04 of 0x0e (2001).
Science 17, 11 (1971), 712–716.
A EXTENDED BACKUS-NAUR FORM OF SPL
⟨SPL⟩
⟨stmts⟩
⟨stmt⟩
::= void payload( ) { ⟨stmts⟩ }
::= (⟨stmt⟩ | ⟨label⟩)* ⟨return⟩?
::= ⟨varset⟩ | ⟨regset⟩ | ⟨regmod⟩ | ⟨call⟩
⟨memwr⟩ | ⟨memrd⟩ | ⟨cond⟩ | ⟨jump⟩
|
⟨varset⟩
::= int64 ⟨var⟩ = ⟨rvalue⟩;
int64* ⟨var⟩ = {⟨rvalue⟩ (, ⟨rvalue⟩)*};
|
string ⟨var⟩ = ⟨str⟩;
|
⟨regset⟩
::= ⟨reg⟩ = ⟨rvalue⟩;
::= ⟨reg⟩ ⟨op⟩= ⟨number⟩;
⟨regmod⟩
⟨memwr⟩ ::= *⟨reg⟩ = ⟨reg⟩;
::= ⟨reg⟩ = *⟨reg⟩;
⟨memrd⟩
::= ⟨var⟩ ( ( ϵ | ⟨reg⟩ (, ⟨reg⟩)* );
⟨call⟩
⟨label⟩
::= ⟨var⟩:
⟨cond⟩
::= if (⟨reg⟩ ⟨cmpop⟩ ⟨number⟩) goto ⟨var⟩;
⟨jump⟩
::= goto ⟨var⟩;
::= returnto ⟨number⟩;
⟨return⟩
:= ‘__r’⟨regid⟩
⟨reg⟩
⟨regid⟩
:= [0-7]
⟨var⟩
:= [a-zA-Z_][a-zA-Z_0-9]*
⟨number⟩
:= (‘+’ | ‘-’) [0-9]+ | ‘0x’[0-9a-fA-F]+
:= ⟨number⟩ | ‘&’ ⟨var⟩
⟨rvalue⟩
⟨str⟩
:= [.]*
⟨op⟩
:= ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘&’ | ‘|’ | ‘~’ | ‘’ | ‘>=’ | ‘'
// '<'
// '+'
// '-'
// '.'
// ','
// '['
COMMA:
OPEN:
1 int64 *tape
2 string input = ".+[.+]";
3 __r0 = &tape;
4 __r2 = &input;
5 __r6 = 0;
6 __r7 = 1;
7 __r8 = 1;
8 NEXT:
9
10
11 LESS:
12
13 PLUS:
14
15 MINUS:
16
17 DOT:
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
__r3 += 1;
goto FIND_O;
__r2 += 1;
END:
goto NEXT;
CLOSE:
FIND_C: if (__r3 <= 0) goto CLOSE;
// Loop depth counter
CHECK_C: if (__r1 != 0x5d) goto FIND_C;
__r2 += 1;
__r1 = *__r2;
if (__r1 != 0x5b) goto CHECK_C; // '['
__r3 += 1;
__r3 -= 1;
goto FIND_C;
if (__r1 != 0x5d) goto END;
if (__r0 != 0) goto END;
__r3 = 1;
// Loop depth counter
// ']'
// ']'
FIND_O: if (__r3 <= 0) goto END;
__r2 -= 1;
__r1 = *__r2;
if (__r1 != 0x5b) goto CHECK_O; // '['
__r3 -= 1;
CHECK_O: if (__r1 != 0x5d) goto FIND_O;
// ']'
D CFG OF NGINX AFTER PRUNING
The following graph, is a portion of nginx’s CFG that includes
function calls starting from the function ngx_cache_manager_-
process_cycle. The graph only displays functions which are up
to 3 function calls deep to simplify visualization. Note the reduction
in search space–which is a result of BOPC’s pruning–as this portion
of the CFG reduces to the small delta graph in Figure 7.
40c6a340c6ac40c6b140c8f840c8fc40c5e640c5f041e0c941e0df4117af4117f54117be4043b34043b6418a7b418a99418a8c41153c40429e41155b4044224044c840442c40f79140f7a141e06c41e0bf41e07640c4f440c50e40c58840c59341ec8b41ec934189db40440740440f418acb418ad341161741163640c57440c57e40c58441e1ad40288040c5c440c5c84115d24115f641ec8141144141ebfc41ec1e41ec05418ac1418ad541e3e841e3ed41e41740c9cf40c9d94116f341172641170241e25e41e28241e1c841e1fa41e1d440c94d40c95740c95d40c6fb40c6ff41e2fe41e3084117604117a640c81a40c83b40c82441e17241e17a41e31c418a4f418a5e418a5540c4a240c4a641e3c341e3cd40f78a40f7b3418aad418aa341169f4116d74116a440f82c40f83640f85741146c41147341148a40c89d40c84640c91240c93740c93b40c51b40c54240c52141e48841e49841e48e41e23f41e24441e19040c7a040c7b140c90c40f83b40f7de40f7fa41e1d941e11241e2b841e2c141e02a41e03940c9c041160341161240c4fa40c50440c50a4114de4114e341e20741e23541e21341e0a240f77040f78c40f77c41ec1341177e41178340c49c41e38541e38a41e16541e16a41eca041d8d141d8e640c41940c41f41e29341e2984115fe41e00541e32141e32c41e34a41eb5c41eb6940f88941eb4240ca6241ebde41173e41174340c7bb40c7e040c7e440447f4044854044ef40c492418a49418a654115be4115cd40c69140c6ba40f7ca40f7cf4116b840c8e840c8f240430c4042cc40c86340c86741164c4044c641e17f41e1b741e2d741e2f4418ab2418ab741e11c41e13241167841169741e35741e35c40c46040c46940c4b140c5f841e21840439941eb6c41e3d241e3db40f80440f80e40f81740c47e40c47a40c80a41e25140c4e240c4e641e0e441e0f040ca5840c77240c77641e42841e44240c87940c874418a3f40f75640f76640f7c24116ee40c43540c43f40444840444b40c60140c60f40c4244117dc40c80640c3fc40c61340c48c40c88940c88341eb2340f70940f71640f74c40f87340447541ec1541ec4b41d90241eba741e18b40c80041176241e2c641e2d240431c40433740c6bf41166441167341152841153741156341e3e341e13741e14341ec2841ec4140ca2f40ca4841e3fe41172e41173341148140c76540c76941e44741e47041e45240c8d640c8e341e02340c9d541dfe340c99240c9b340c9af41e0f540c54b40c55c40c56040c94841e03e41e04a41e14840c8d241e39341e3a841e3314117c84117cd4114a64114af4114c74115054114cf41e20241e37940438d41e28741e2b140436c40c82e40ca5341156841159b411577418ae240448e4044b340c6e641e39841ebf741e00041e00f40c79e40c9714115b940441f40c70e40c70440ca3e41e3b941e04f41e3f940c96141d8a740c74340c74840443540c7f141170740ca4440c88d41d8f240f7bb4115a940c56e411510403cdb40c5ec418a14418a20418a2d41ebe341ebbc40c6b741157c40c9c540c3e640c97b40c98541e4574117d740f82740ca3440c75c41e08c41e09141ec6841e1c34116b341165f4117a241150040f7a341e39e41e24c40c75841e09d41176a41ec5441ebcf40c68440c69a4189ff418a0a40c9e940f7d9418a0440ca1e40ca2241152341176f40c5dc40c7f640c5d641149d418a3540c75240c6f5403d9c403da5403fa6403fb440513a403d1b403d0b403d8b4050ba40511c403fd9