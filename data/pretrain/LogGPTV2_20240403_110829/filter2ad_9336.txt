# 深入理解 Win32（三）

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 前言
在上一节中，我们了解了 Win32 的入口函数、ESP 与回调函数，以及如何在 OllyDbg (OD) 中定位这些结构。本节我们将探讨子窗口及其消息处理函数的定位方法。

## 子窗口

### 在窗口中创建按钮
我们知道，创建窗口时会用到 `CreateWindow` 这个 API。我们先回顾一下它的参数结构：

```c
HWND CreateWindow(
    [in, optional] LPCTSTR lpClassName,    // 窗口类名称
    [in, optional] LPCTSTR lpWindowName,   // 窗口标题
    [in] DWORD dwStyle,                    // 窗口风格
    [in] int x,                            // 初始 x 坐标
    [in] int y,                            // 初始 y 坐标
    [in] int nWidth,                       // 初始 x 方向尺寸
    [in] int nHeight,                      // 初始 y 方向尺寸
    [in, optional] HWND hWndParent,        // 父窗口句柄
    [in, optional] HMENU hMenu,            // 窗口菜单句柄
    [in, optional] HINSTANCE hInstance,    // 程序实例句柄
    [in, optional] LPVOID lpParam          // 创建参数
);
```

接下来，我们在一个窗口中创建一个普通按钮：

```c
void CreateButton(HWND hwnd)
{
    HWND hwndPushButton;
    hwndPushButton = CreateWindow(
        TEXT("button"),
        TEXT("普通按钮"),
        WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON | BS_DEFPUSHBUTTON,
        10, 10,
        80, 20,
        hwnd,         // 父窗口句柄
        (HMENU)1001,  // 子窗口 ID
        hAppInstance, // 应用程序实例句柄
        NULL
    );
}
```

这里的 `hAppInstance` 是当前应用程序的句柄，定义为全局变量 `HINSTANCE hAppInstance;`。需要注意的是，`button` 不能独立存在，必须有父窗口句柄，并且此函数需在父窗口创建之后调用。

编译后，在第一个窗口中会出现一个普通按钮。

### 探索 `dwStyle` 参数
`WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON | BS_DEFPUSHBUTTON` 参数的具体含义如下：
- **WS_CHILD**：创建子窗口。不能与 **WS_POPUP** 样式一起使用。
- **WS_VISIBLE**：创建初始可见的窗口。
- **BS_PUSHBUTTON**：创建一个发送 **WM_COMMAND** 消息给拥有者窗口的按钮。
- **BS_DEFPUSHBUTTON**：创建一个带有粗黑边框的按钮。用户可以通过按 Enter 键选择该按钮。

我们也可以通过改变 `dwStyle` 参数来创建其他类型的按钮，如复选框和单选按钮：

```c
void CreateButton(HWND hwnd)
{
    HWND hwndPushButton, hwndCheckBox, hwndRadio;

    hwndPushButton = CreateWindow(
        TEXT("button"),
        TEXT("普通按钮"),
        WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON | BS_DEFPUSHBUTTON,
        10, 10,
        80, 20,
        hwnd,
        (HMENU)1001,  // 子窗口 ID
        hAppInstance,
        NULL
    );

    hwndCheckBox = CreateWindow(
        TEXT("button"),
        TEXT("复选框"),
        WS_CHILD | WS_VISIBLE | BS_CHECKBOX | BS_AUTOCHECKBOX,
        10, 40,
        80, 20,
        hwnd,
        (HMENU)1002,  // 子窗口 ID
        hAppInstance,
        NULL
    );

    hwndRadio = CreateWindow(
        TEXT("button"),
        TEXT("单选按钮"),
        WS_CHILD | WS_VISIBLE | BS_RADIOBUTTON | BS_AUTORADIOBUTTON,
        10, 70,
        80, 20,
        hwnd,
        (HMENU)1003,  // 子窗口 ID
        hAppInstance,
        NULL
    );
}
```

编译后，我们可以得到包含三个按钮的窗口。

### 按钮事件的处理
系统已经定义了一些常用的窗口类，因此我们在创建按钮时可以直接使用这些预定义的类。如果想查看按钮的 `WNDCLASS` 定义，可以使用 `GetClassName` 函数：

```c
TCHAR szBuffer[0x20];
GetClassName(hwndPushButton, szBuffer, 0x20);
```

`GetClassName` 函数的原型如下：

```c
int GetClassName(
    HWND hWnd,           // 窗口句柄
    LPTSTR lpClassName,  // 类名缓冲区
    int nMaxCount        // 缓冲区大小
);
```

然后使用 `GetClassInfo` 获取更多信息：

```c
WNDCLASS wc;
GetClassInfo(hAppInstance, szBuffer, &wc);
OutputDebugStringF("-->%s\n", wc.lpszClassName);
OutputDebugStringF("-->%x\n", wc.lpfnWndProc);
```

`GetClassInfo` 函数的原型如下：

```c
BOOL GetClassInfo(
    HINSTANCE hInstance,  // 应用程序实例句柄
    LPCTSTR lpClassName,  // 类名
    LPWNDCLASS lpWndClass // 类数据
);
```

当按钮产生事件时，会向父窗口的消息处理程序发送 `WM_COMMAND` 消息。我们需要在 `WinProc` 中添加 `WM_COMMAND` 处理代码：

```c
case WM_COMMAND:
{
    switch(LOWORD(wParam))
    {
        case 1001:
            MessageBox(hwnd, "Hello Button 1", "Demo", MB_OK);
            return 0;
        case 1002:
            MessageBox(hwnd, "Hello Button 2", "Demo", MB_OK);
            return 0;
        case 1003:
            MessageBox(hwnd, "Hello Button 3", "Demo", MB_OK);
            return 0;
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
```

### 消息堆栈
生成 release 版本并在 OD 中调试。找到回调函数的地址 `00401260` 并设置断点。返回值是消息类型。

`WM_COMMAND` 的 `WindowProc` 结构如下：

```c
LRESULT CALLBACK WindowProc(
    HWND hwnd,       // 窗口句柄
    UINT uMsg,       // 消息
    WPARAM wParam,   // 通知码和标识符
    LPARAM lParam    // 控件句柄
);
```

回调函数的堆栈中，`esp + 0x8` 指向 `uMsg` 的值，即消息类型。

### 按钮事件定位
在 `WM_COMMAND` 消息中，我们可以通过 `wParam` 来区分不同的按钮。例如，只中断复选框的消息：

```c
case WM_COMMAND:
{
    if (LOWORD(wParam) == 1002)
    {
        MessageBox(hwnd, "Hello Button 2", "Demo", MB_OK);
        return 0;
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
```

在 OD 中，点击普通按钮不会触发断点，而点击复选框则会暂停。这样就可以定位指定按钮的消息处理位置。