describes the cozilet protection.) 
4.2. Cozilet generation 
As  described  in  Section  3.2.2,  the  cozilet  generator 
converts a target signed applet into a cozilet. An example is 
Applet-Document Binding
HTML
Document
Script Code
Protection of Cozilet
Attacker’s
HTML
Document
Script Code
Attacker’s
Applet
An  applet  is  a  type  of  GUI  component  that  is  simply 
added  to  a  parent  panel  (i.e.,  java.awt.Panel).  The 
cozilet can switch to the encapsulated applet by removing 
itself  from  the  parent  panel  and  adding  the  encapsulated 
applet  to  the  panel.  After  doing  this,  GUI-related  method 
calls are directed to the encapsulated applet. 
For common non-GUI methods applied as applets (such 
as start() or stop()), JRE maintains an internal list of 
all running applets, and calls such methods of each applet 
by referring to the list. The cozilet is registered to the list, 
not the encapsulated applet, and the cozilet cannot update 
the list. Therefore, we have designed the cozilet so that it 
delegates  common  method  calls  from  JRE 
the 
encapsulated applet. 
to 
3.2.2.  Cozilet  generator.  To  realize  the  mechanism 
described in the previous subsection, a target signed applet 
must be converted to a cozilet. For transparency, however, 
such  conversion  should  not  require  changes  to  the  target 
applet.  We  therefore  propose  a  tool  for  such  conversion 
which we refer to as the cozilet generator. 
the 
applet  main 
class  of 
is 
the 
cozilet 
the  class  of 
The tool generates a single cozi-format file containing 
the  following  files  (Figure  2):  target  remote  JAR  files, 
cozilet  properties,  and  cozilet  classes.  Cozilet  properties 
contain a trusted URL for applet-document binding and the 
applet main class name of the target applet. Cozilet classes 
are needed for cozilet execution, including Cozilet which 
and 
is 
CoziletClassLoader  which 
the 
cozi-loader. Because the cozilet is a standard signed applet, 
classes  or  resources  in  the  cozi-format  file  may  be 
replaced  in  a  replacement  attack 
as  described  in  Section  2.3.  To 
protect cozilet classes, all of these 
same  package, 
are 
com...cozilet,  so 
the 
same-package-same-signer 
mechanism  prevents  replacement 
of  them.  Signing of the generated 
cozi-format JAR file is mandatory. 
Because the tool does not sign it, it 
should  be  signed  by  other  tools, 
such as jarsigner.
that 
in 
the 
a 
special 
To  protect  resources  in  the 
the  tool  also 
cozi-format  file, 
generates 
class 
CoziletData  and  adds  it  to  the 
cozi-format  file.  CoziletData
values 
contains 
of 
target.jar  and 
the  cozilet 
properties  as  constant 
fields 
(Figure 2). The cozi-loader checks 
the  integrity  of  target.jar  and 
the  cozilet  properties 
the 
cozi-format  file  based  on  hash 
hash 
in 
Class Loader Based Isolation
Encapsulated
Applet
Cozilet
Applet Switching
Cozi-Loader
target.jar
Cozilet Properties
Cozi-Format File
Figure 3. Cozilet architecture 
6
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
shown below. 
% java -jar cozilet-tool.jar –applet ¥ 
      foo.MyApplet cozilet.jar sample.jar 
the  cozi-format 
This  operation  generates 
file 
cozilet.jar to encapsulate a target applet whose remote 
JAR  file  is  sample.jar  and  whose  applet  main  class  is 
foo.MyApplet. The developer of the target applet has to 
sign  cozilet.jar 
tools,  such  as 
jarsigner.
through  other 
The cozilet is always  invoked by the following applet 
tag. 
<applet code="com...cozilet.Cozilet" 
 archive="cozilet.jar" ... 
4.3. Cozilet execution 
This subsection describes the behavior of cozilets, and 
shows  that  they  can  securely  and  transparently  execute 
encapsulated applets. 
4.3.1. Cozilet startup. Cozilets are standard signed applets 
which are executed by JRE in the following way. 
(1) First, JRE loads and instantiates the cozilet main class 
Cozilet. Cozilet  loads  the  cozilet  properties  that 
contain  the  information  regarding  the  encapsulated 
applet  at  its  static  initializer.  Its  integrity  can  be 
verified  by  using 
in 
CoziletData.
the  hash  value 
included 
(2) Next, JRE executes init() of the cozilet. The method 
checks  the  applet-document  binding  as  described  in 
Section  3.1.2.  The  trusted  URL  is  obtained  from  the 
cozilet properties. If the check succeeds, it goes to the 
next step. 
(3) The  method 
instantiates  CoziletClassLoader,
which  works  as  a  cozi-loader,  and  requests  the 
cozi-loader to load the main  class  of  the  encapsulated 
applet whose name is included in the cozilet properties. 
The  cozi-loader  verifies  the  integrity  of  the  class  by 
using the hash value included in CoziletData. If it is 
verified, the cozi-loader loads the class and the cozilet 
instantiates it. After this, all the classes and resources 
of  the  encapsulated  applet  are  loaded  only  by  the 
cozi-loader. 
(4) Finally, the cozilet switches itself for the encapsulated 
applet and executes its init().
4.3.2. Switching to an encapsulated applet. As described 
in  Section  3.2.1,  applet  switching  can  be  achieved  by 
replacing  a  reference  of  an  applet’s  parent  panel.  In 
addition, an applet needs an appropriate applet context and 
an applet stub. A stub can be set to an applet by calling its 
setStub() [15], and a context can be obtained  from the 
stub. Therefore, it is sufficient that only an applet stub be 
passed to an applet. 
A  cozilet  must  pass  its  own  applet  stub  to  the 
encapsulated applet. It is not easy to get the stub, though, 
because  there  is  no  method  like  getStub()  and  because 
setStub()  cannot  be  overridden  since  it  is  declared  as 
final. 
Fortunately, in Sun Java VM implementations, a parent 
panel  of  an  applet  also  serves  as  an  applet  stub,  and  the 
applet can get its stub by simply converting the type of (or 
casting) its parent panel. In this way, cozilets can hand over 
their  applet  stubs  to  encapsulated  applets.  After  this, 
cozilets  finish  the  applet  switching  by  calling  init()  of 
the encapsulated applets. 
Also,  as  described  in  Section  3.2.1,  cozilets  delegate 
control  calls  issued  by  JRE  to  encapsulated  applets,  by 
overriding  corresponding  methods,  such  as  start()  or 
stop().  This  delegation  enables  encapsulated  applets  to 
be normally controlled by JRE after switching. 
4.4. Cozilet protection 
is 
effective  measure 
A  cozilet may be attacked in various ways because it  is 
a standard signed applet. It protects itself through several 
measures.  The  most 
the 
applet-document binding explained in Section 3.1.2, which 
can block most attacks provided that the Web server, data 
communication channel, and the domain name of the Web 
site  are  trustworthy.  And  as  described  in  Section  3.2.2,  a 
cozilet  prevents  class  and  resource  replacement  by 
declaring its classes as a single package and verifying the 
hash  values  of  its  resource  files.  A  cozilet  has  additional 
protection mechanisms, and this subsection describes two 
of these which are particularly important. 
such 
and 
at 
public  methods 
First,  the  public  methods  of  cozilet  are  protected 
through stack inspection. The cozilet inherits many public 
methods from Applet. An attacker may be able to harm a 
user by calling these methods. To prevent this, the cozilet 
overrides 
calls 
AccessController.checkPermission() 
the 
beginning  of  the  methods.  checkPermission()  causes 
the stack inspection to check if all the callers in the current 
call  chain  have  the  permission  specified  by  a  caller  of 
checkPermission() 
specifies 
AllPermission to the method so that only system classes 
can execute its public methods. 
[15].  The 
cozilet 
Second,  serialization  of  the  cozilet  is  disabled.  If 
serialization is enabled, an attacker can take advantage of 
the  serialization  and  deserialization  interface  to  read  a 
sensitive value of a private field and write an illegal value 
to 
is 
serializable  because  its  superclass  Applet  is  serializable. 
The  cozilet  forcibly  disables  its  serialization  by  throwing 
the  field  [2][3][4].  Unfortunately, 
the  cozilet 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
7
an  exception  unconditionally  for  every  method  related  to 
serialization  in  the  following  way.  This  measure  is 
introduced in Securing Java [2]. 
public final class Cozilet extends Applet { 
   : 
  private void 
     writeObject(ObjectOutputStream o) 
                         throws IOException { 
    throw new NotSerializableException(); 
  } 
  private void 
     readObject(ObjectInputStream o) 
             throws IOException, 
                    ClassNotFoundException { 
    throw new NotSerializableException(); 
  } 
  private Object writeReplace() 
             throws ObjectStreamException { 
    throw new NotSerializableException(); 
  } 
  private Object readResolve() 
             throws ObjectStreamException { 
    throw new NotSerializableException(); 
  } 
}
4.5. Optional features 
Up  to  now,  this  paper  has  described  the  basic 
architecture  of  the  Cozilet  mechanism.  This  section 
describes  some  additional  features.  Although  they  are 
optional, they can make cozilets and encapsulated applets 
more secure(cid:2)or useful. 
4.5.1. Interaction with browser script code. Current Java 
VM  implementations  enable  applets  to  interact  with 
browser  script  code.  For  transparency,  the  cozilet  has  to 
allow the encapsulated applet to do the same. 
Fortunately,  access  from  encapsulated  applets 
to 
browser  script  code  is  possible  without  any  particular 
mechanism.  In  the  Sun  Java  VM  implementations,  an 
applet needs  to get a mediate object to access the browser 
script  code  by  calling  getWindow()  of  JSObject  or 
getService()  of  DOMService  with  a  reference  to  the 
applet itself passed as the parameters of these methods [15]. 
These  methods  obtain  the  applet  context  and  return  the 
mediate  object  corresponding  to  the  applet  context. 
Because  the  encapsulated  applet  has  the  same  applet 
context  as  the  cozilet,  the  encapsulated  applet  can  obtain 
the same mediate object as the cozilet. 
encapsulated  applets  is  not  possible  without  a  trick, 
because JRE refers to its internal list (described in Section 
3.2.1)  when  the  browser  script  code  requires  access  to 
applets. Cozilet’s trick to enable such access is to delegate 
limited  kinds  of  calls  from  the  browser  script  code  to 
encapsulated  applets.  If  the  developer  of  a  target  applet 
specifies  that  the  browser  script  code  should  call  the 
method  signatures  at  conversion  by  the  cozilet  generator, 
the  tool  adds  delegation  methods  having  the  same 
signatures to the cozilet. Delegation also has the advantage 
of limiting methods which can be called by the script code 
of  attackers  to  the  minimum  required.  This  is  because 
attackers can call all the public methods of the applet if the 
applet is not encapsulated. 
Through  method  delegation,  however,  cozilets  cannot 
delegate their fields to encapsulated applets. We think that 