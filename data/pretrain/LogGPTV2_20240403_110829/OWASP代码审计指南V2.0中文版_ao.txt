144 
IIS 允许指定是否支持 SSL、是否需要 SSL、是否支持或需要客户端身份验证以及密码
强度。它是在  部分配置的。下面示例要求到
MySite 的所有连接均需要 SSL。 
IIS 允许对源 IP 地址或 DNS 名称进行限制。它在
 部分进行配置，如下示例所示，其中示例
配置拒绝访问 IP 地址 192.168.100.1 和整个 169.254.0.0 网络: 
有关 IIS 安全配置的详细信息，请参见 IIS 安全配置。特定的安全功能配置信息可以在
身份验证、授权、SSL、源 IP、请求过滤和自定义请求过滤[12]中找到。 
145 
3.5.8 编程配置:微软 IIS 
Microsoft IIS 安全配置也可以通过各种语言以编程方式进行设置: 
⚫ 
appcmd.exe 配置 
⚫ 
C# 
⚫ 
Visual Basic 
⚫ 
JavaScript 
例如，对一个名为“我的站点”的站点禁用匿名身份验证，然后对该站点启用基本身份
验证和 windows 身份验证(如通过上面部分的配置所做的那样)是可以这样实现的： 
appcmd.exe set config “MySite” -section:system.webServer/security/authentication 
/anonymousAuthentication /enabled:”False” /commit:apphost 
appcmd.exe set config “MySite” -section:system.webServer/security/authentication 
/basicAuthentication /enabled:”True” /commit:apphost 
appcmd.exe set config “MySite” -section:system.webServer/security/authentication 
/windowsAuthentication /enabled:”True” /commit:apphost 
或者，相同的身份验证设置也可以像下面示例中那样以编程方式进行编码。 
using System; 
using System.Text; 
using Microsoft.Web.Administration; 
internal static class Sample { 
private static void Main() { 
using(ServerManager serverManager = new ServerManager()) { 
Configuration config = serverManager.GetApplicationHostConfiguration(); 
ConfigurationSection anonymousAuthenticationSection = 
config.GetSection(“system.webServer/security/authentication/anonymousAuthentication”, “MySite”); 
146 
anonymousAuthenticationSection[“enabled”] = false; 
ConfigurationSection basicAuthenticationSection = 
config.GetSection(“system.webServer/security/authentication/basicAuthentication”, “MySite”); 
basicAuthenticationSection[“enabled”] = true; 
ConfigurationSection windowsAuthenticationSection = 
config.GetSection(“system.webServer/security/authentication/windowsAuthentication”, “MySite”); 
windowsAuthenticationSection[“enabled”] = true; 
serverManager.CommitChanges(); 
} 
} 
} 
查看源代码时，应特别注意安全部分的配置。 
3.5.9 IIS 配置过滤请求和网址重写 
请求过滤是在 IIS7 中引入的，它已经取代了 IIS 6.0 的 UrlScan 加载项功能。这种内置
的安全功能允许过滤不需要的网址请求，但也可以配置不同类型的过滤。首先，理解当请求
完成时，IIS 管道如何工作是很重要的。下图显示了这些模块的顺序： 
图: IIS 请求过滤文件 
147 
可以通过 IIS 界面或在 web.config 文件中设置请求筛选。示例： 
HTTP 
HTTP 
请求开始 
请求认证
请求授权
匹配缓存 
请求结束 
请求过滤（高优先级） 
URL 重写（中优先级） 
148 
这也可以通过应用程序代码来完成，例如:(Yakushev，2008) 
using System; 
using System.Text; 
using Microsoft.Web.Administration; 
internal static class Sample 
{ 
private static void Main() 
{ 
using (ServerManager serverManager = new ServerManager()) 
{ 
Configuration config = serverManager.GetWebConfiguration(“Default Web Site”); 
ConfigurationSection requestFilteringSection = config.GetSection(“system.webServer/security 
/requestFiltering”); 
ConfigurationElementCollection denyUrlSequencesCollection = 
requestFilteringSection.GetCollection(“denyUrlSequences”); 
ConfigurationElement addElement = denyUrlSequencesCollection.CreateElement(“add”); 
addElement[“sequence”] = @”..”; 
149 
denyUrlSequencesCollection.Add(addElement); 
ConfigurationElement addElement1 = denyUrlSequencesCollection.CreateElement(“add”); 
addElement1[“sequence”] = @”:”; 
denyUrlSequencesCollection.Add(addElement1); 
ConfigurationElement addElement2 = denyUrlSequencesCollection.CreateElement(“add”); 
addElement2[“sequence”] = @”\”; 
denyUrlSequencesCollection.Add(addElement2); 
serverManager.CommitChanges(); 
} 
} 
} 
过滤双重编码的请求 
这种攻击技术包括以十六进制格式对用户请求参数进行两次编码，以绕过安全控制或导
致应用程序的意外行为。因为网络服务器接受并处理许多编码形式的客户请求导致了这种攻
击的出现。 
通过使用双重编码，可以绕过只解码用户输入一次的安全过滤器。第二个解码过程由后
端平台或适当处理编码数据的模块执行，但没有相应的安全审计。 
攻击者可以在路径名或查询字符串中注入双重编码，以绕过 web 应用程序使用的身份
验证模式和安全筛选器。 
网络应用程序攻击中使用了一些常见的字符。例如，路径遍历使用.. /(点-点-斜线)，而
XSS 攻击使用“”字符。这些字符给出了不同于正常数据的十六进制表示。 
比如，”.. /(点-点-斜线)字符以十六进制表示%2E%2E%2f。当% symbol 被再次编码，
150 
其 十 六 进 制 代 码 表 示 为 %25 。 双 重 编 码 过 程 的 结 果 ” .. /( 点 - 点 - 斜 线 ) 将
是%252E%252E%252F: 
⚫ 
“.. /"的十六进制编码是“%2E%2E%2f” 
⚫ 
“%”的十六进制编码是“%25” 
⚫ 
所以“.. /"的双重编码是" %252E%252E%252F " 
如果您不希望 IIS 允许双重编码的请求得到服务，请使用以下方法(IIS 团队，2007): 
过滤高位字符 
这允许或拒绝对包含非 ASCII 字符的 IIS 的所有请求。出现这种情况时，会向用户显示
错误代码 404.12.。等效的 UrlScan (IIS6 加载项)配置项是 AllowHighBitCharacters。 
151 
基于文件扩展名的过滤器 
使用此过滤器，您可以允许 IIS 基于文件扩展名请求，由此产生的错误代码是 404.7。
“下限扩展”和“上限扩展”选项是等效的。 
基于请求限制的过滤 
当 IIS 基于请求限制拒绝请求时，记录的错误代码为: 
⚫ 
404.13-内容太长。 
⚫ 
404.14-网址太大。 
⚫ 
404.15-查询字符串太长。 
152 
这可用于限制发送给应用程序的查询字符串过长或内容过多，而您无法通过更改源代码
来解决该问题。 