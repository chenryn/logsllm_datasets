ValidatorAuction
SimpleAuction
RockPaperScissors
Auction
Overall
# Veriﬁed
# Falsiﬁed
# Properties
LOC
129
102
374
171
55
260
50
51
66
1258
0
0
0
0
0
3
2
1
0
6
TABLE I: Liveness veriﬁcation results
2
2
5
5
3
6
5
3
3
34
2
2
4
5
3
3
3
1
3
26
Avg. Time (s)
333.2.0
2587.6
1124.8
442.2
19.8
980.8
277.4
11.8
8.5
622.9
number of properties for which SMARTPULSE was able to
provide a real counterexample. Finally, the column labeled
“Time” shows the average analysis time in seconds.
The key take-away from Table I is that SMARTPULSE is
able to successfully solve 32 of the 34 benchmarks (94%)
but fails to terminate within the provided time limit for
the remaining two. Out of 32 benchmarks on which the
analysis terminates, SMARTPULSE reports counterexamples
for six of them. In all six cases, we found that there was
a discrepancy between the contract’s implementation and the
expected speciﬁcation. For example, for the ValidatorAuction
contract, one of the properties we speciﬁed is “losing bidders
should be refunded the total sum of their bids”. However,
the actual implementation of this contract has two possible
outcomes, namely failed and DepositPending. If the
auction has failed (e.g., if there are not enough bidders), then
all participants are issued their refund, so the expected property
holds. On the other hand, if the auction has closed successfully,
then the losing bidders are issued their refund minus some
amount called lowestSlotPrice. In this case, if we change
the speciﬁcation to be consistent with the contract’s actual
behavior, then SMARTPULSE is able to verify the property.
Running time. The running time of SMARTPULSE varies
from 7 seconds to 4833 seconds, with average running time
being 623 seconds. On some benchmarks (e.g., EscrowVault),
SMARTPULSE takes a very long time due to the large number
of reﬁnement steps that need to be performed. In general, the
more complex the property, the longer SMARTPULSE takes
to verify it. However, as we show in subsequent sections,
SMARTPULSE is a lot faster when verifying safety properties.
B. Comparison with VERX on Temporal Safety Properties
Next, we compare SMARTPULSE against VERX, a state-of-
the-art safety tool for verifying temporal safety properties of
smart contracts. To perform this comparison, we ﬁrst translated
all VERX benchmarks from [27] to Solidity 0.5.0 and then
wrote a corresponding SMARTLTL speciﬁcation for each of
the PastLTL speciﬁcations used by VERX. Since VERX per-
forms veriﬁcation under the effective external callback freedom
assumption, we use SMARTPULSE’s no re-entrancy attacker
model when performing this evaluation.
The results of our VERX comparison are shown in Table
II. Since VERX often needs the user to provide additional
predicates to facilitate veriﬁcation, we compare SMARTPULSE
against two variants of VERX. For the ﬁrst, labeled “VERX-
USER”, we supply VERX with the exact same set of predicates
used in the VERX evaluation [27]. However, since SMART-
PULSE is fully automated and does not require users to provide
any predicates, this is not an apples-to-apples comparison.
Thus, we also compare SMARTPULSE against a fully auto-
mated variant of VERX (labeled “VERX-AUTOMATED”) in
which we do not supply VERX with any predicates.
As shown in Table II, SMARTPULSE is able to verify
signiﬁcantly more benchmarks (43 vs. 81) compared to the
fully automated version of VERX. When comparing SMART-
PULSE against VERX-USER, SMARTPULSE still veriﬁes more
benchmarks within the 5 hour time limit, and the average
running times of both tools are similar, with SMARTPULSE’s
median running time being faster.10
C. Large Scale Evaluation and KEVM-VER Comparison
In the previous subsections, we demonstrated the expres-
siveness and ﬂexibility of SMARTPULSE by using it to verify
several
liveness and temporal safety properties. However,
because this evaluation requires writing custom speciﬁcations
for each contract, we were only able to evaluate SMARTPULSE
on 22 contracts. In this section, we perform a larger scale
evaluation on ERC20 contracts that all share the same speciﬁ-
cation. We chose ERC20 contracts because they are the most
widely used contracts on the Ethereum blockchain, making up
72.9% of all high-activity contracts [24]. While the correctness
properties of ERC20 contracts are much simpler than those
considered in Sections IX-A and IX-B, this evaluation allows
us to demonstrate that SMARTPULSE can be used to analyze a
large number of contracts. Furthermore, since a prior research
effort [26], henceforth called KEVM-VER, has also been
evaluated on ERC20 contracts, this evaluation allows us to
perform a comparison against an additional state-of-the-art
veriﬁcation tool for smart contracts.
To perform this large scale evaluation, we collected from
EtherScan the 200 (unique) most widely-used ERC20 con-
tracts whose source is available. Among these 200 contracts,
49 of them cannot be analyzed by KEVM-VER, which
leaves us with a total of 151 contracts to evaluate on. In
terms of correctness speciﬁcations, we utilize the ERC20-
K formalism proposed in prior work [28] that serves as a
complete formal speciﬁcation of the ERC20 standard in the
K framework [29]. However, since SMARTPULSE does not
consume K speciﬁcations, we translated these speciﬁcations
to equivalent (but often much shorter) SMARTLTL properties.
Furthermore, since ERC20-K speciﬁcations are in the form
of method pre- and post-conditions, we also use method-level
speciﬁcations, but expressed in SMARTLTL.
The results of this evaluation are shown in Table III. Here,
rows correspond to each of the 12 ERC20 speciﬁcations, and
the right and left halves of the table provide statistics about
SMARTPULSE and KEVM-VER respectively. In particular, for
each tool, we report (1) the number of ERC20 contracts that
could be veriﬁed, (2) the number of contracts that were proven
to violate the property, (3) the number of contracts for which
10At the time of writing, VERX was not freely available. However, the
authors of VERX provided us with server access that allowed us to run these
experiments. Since the two tools are run on different machines, we note that
the reported running times do not provide an apples-to-apples comparison.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
565
SMARTPULSE
Average Median
Time (s)
Time (s)
# Veriﬁed
VERX-USER
Average Median
Time (s)
Time (s)
VERX-AUTOMATED
Average Median
Time (s)
Time (s)
# Veriﬁed
# Veriﬁed
Project
Overview
Alchemist
Brickblock
Crowdsale
ERC20
ICO
Mana
Melon
MRV
PolicyPal
VUToken
Zebi
Zilliqa
Overall
# Properties
4
3
6
9
9
8
4
16
5
4
5
5
5
83
4
2
6
9
9
7
4
16
5
4
5
5
5
81
0
2
3
0
9
0
0
16
5
0
0
3
5
43
TABLE II: Comparison against VERX on temporal safety properties.
88.7
3.8
17.9
91.5
396.9
29.6
222.8
821.4
32.7
85.2
138.9
93.5
1168.3
328.6
116.9
40.7
110.2
95.3
25.8
1749.4
——
112.0
393.5
——
445.9
178.8
40.2
310.4
89.2
40.7
112.4
94.4
21.6
1697.2
——
62.9
350.1
——
216.9
27.4
31.1
69.0
80.6
3.8
19.2
31.4
9.8
21.7
152.2
12.0
24.1
27.1
75.3
22.8
7.9
20.1
4
3
6
9
9
8
0
16
5
0
4
5
5
74
——
41.6
43.3
——
21.6
——
——
27.6
350.1
——
——
13.3
31.1
29.5
——
41.6
53.1
——
25.8
——
——
28.9
426.8
——
——
17.5
40.2
77.3
Average
Time (s)
390.1
391.9
397.2
402.4
403.6
400.8
404.3
405.9
416.8
412.4
414.5
405.1
403.7
Property
TotalSupply
BalanceOf
Allowance
Approve
Transfer-Normal
Transfer-Self
Transfer-Fail
Transfer-Self-Fail
TransferFrom-Normal
TransferFrom-Self
TransferFrom-Fail
TransferFrom-Self-Fail
Overall
#
108
133
139
69