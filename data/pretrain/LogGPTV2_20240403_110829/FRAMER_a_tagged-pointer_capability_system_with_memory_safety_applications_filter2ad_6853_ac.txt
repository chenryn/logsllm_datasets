header and one for the original allocation as shown below:
struct attribute((packed)) newTy –
HeaderTy hd;
Ty obj; // Ty is an original object’s type
;
We insert a callsite to our hook function that decides if it is small
or large-framed, updates metadata in the header, and also in the
entry for large-framed objects. It then creates a flag and tag (offset
or N value), and moves the pointer to the second field whose type
is the actual allocated type by the target program. The hook returns
a tagged pointer. The allocation of the original object is removed
by FRAMER’s pass, after the pass replaces all the pointers to the
original object with the tagged pointer to the new object.
We instrument function epilogues to reset entries for large-
framed non-static objects. Currently we instrument all the epi-
logues, but this instrumentation can be removed for better perfor-
mance.
Statically-allocated objects (address-taken globals). Transfor-
4.2.2
mation on static/global objects is similar to handling stack objects.
Creating a new global object with a header attached is straight-
forward, however, other parts of the implementation are more
challenging.
For stack objects, FRAMER’s pass replaces pointers to an orig-
inal object with a tagged one (i.e. the return value of the hook).
This cannot be applied to global objects, since the return value of
a function is non-constant, whereas the original pointer may be
an initializer of other static/global objects or an operand of con-
stant expression (LLVM ConstExpr) [28]. Global variables’
initializer and ConstExpr’s operands must be constant, hence, the
operations performed in a hook for stack objects should be done
by a transformation pass for global objects.
In addition, while the tag should be generated at compile-time,
the wrapper frame size is determined by their actual addresses
in memory, that are known only at run-time. To implement a
tagged pointer generated from run-time information at compile-
time, FRAMER’s transformation pass builds ConstExpr of (1) the
wrapper frame size 𝑁 (2) offset, (3) tag and flag selection depending
on its wrapper frame size, (4) pointer arithmetic operation to move
the pointer to the second field, and then finally (5) constructs a
tagged pointer based on them. The original pointers are replaced
with this constant tagged pointer. The concrete value of the tagged
FRAMER: A Tagged-Pointer Capability System with Memory Safety Applications
Table 1: FRAMER inserts code, highlighted in gray, for cre-
ating a header-padded object, updating metadata and detect-
ing memory corruption. Codes in line 2, 5, and 8 in the first
column are transformed to codes in the second column.
5 FRAMER APPLICATIONS
In this section we discuss how FRAMER can be used for building
security applications. We explore mainly spatial safety, but we
discuss additional case studies related to temporal safety.
Original C
1
Instrumented C
struct HeaderTy {unsigned size; unsigned type id;};
struct newTy{HeaderTy hd;int A[10];};
2 int A[10]; struct newTy new A;
3
tagged = handle alloc(&new A, A size);
/* tagged = tag & &(new A->A[0]),
A size = sizeof(int) * 10 */
int *p;
4 int *p;
5 p = A+idx; p = tagged + idx;
6
7
8 *p = val;
check inframe(tagged, p);
untagged p = check bounds(p, sizeof(int));
*untagged p = val;
pointer is then propagated at run-time, when the memory addresses
for the base and bound are assigned.
FRAMER inserts at the entry of the program’s main function
a call to an initialisation function for each object. This function
updates metadata in the header and, for large-framed objects, the
address in the table entry, during program initialisation.
4.2.3 Heap objects. We interpose calls to malloc, realloc,
and calloc at link time with wrapper functions in our binary
libraries. The wrappers increase the user-defined size by the header
size, call the wrapped function, and perform the required updates
and adjustments similar to the hook for stack objects. We also
interpose free with a wrapper to reset table entries for large-
framed objects.
4.3 Memory Access
FRAMER’s transformation pass inserts a call to our bounds check-
ing function right before each store and load, such that each
pointer is examined and its tag stripped-off before being derefer-
enced. The hook extracts the tag from a pointer, gets the header
location, performs the check using metadata in the header, and then
returns an untagged pointer after cleaning the tag. The transforma-
tion pass replaces a tagged pointer operand of store/load with
an untagged one to avoid segmentation fault caused by dereferenc-
ing it.
Bounds checking and untagging are also performed on memcpy,
memmove and memset in similar way. (Note that LLVM over-
rides the C lib functions to their intrinsic ones [29]). memmove
and memcpy has two pointer operands, so we instrument each
argument separately.
As for string functions, we interpose these at link time. Wrap-
per functions perform checks on their arguments, call wrapped
functions with pointers cleared from tags, and then restore the tag
for their return value.
4.4 Interoperability
FRAMER ensures compatibility between instrumented modules and
regular pointer representation in precompiled non-instrumented
libraries. We strip off tagged pointers before passing them to non-
instrumented functions. FRAMER adds a header to objects for track-
ing, but this does not introduce incompatibility, since it does not
change the internal memory layout of objects or pointers.
5.1 Spatial Memory Safety
FRAMER can be used to track individual memory allocations, and
store object bounds in the header associated with the object. These
bounds can be used at runtime to check memory accesses. Un-
like other object-tracking or relative location-based approaches,
FRAMER can tackle legitimate pointers outside the object bounds
without padding objects, or requiring metadata retrieval or bounds
checking at pointer arithmetic operations.
In this section, we describe how FRAMER performs bounds
checking at run-time.
5.1.1 Memory allocation. As described in Section 4.2, a header
is prepended to memory objects (lines 1, 2 in Table 1). For spa-
tial safety, this header must hold at least the raw object size, but
can hold additional information such as a type id. This could be
used for additional checks for sub-object bounds violations or type
confusion. Its potential in type confusion checking is presented in
Section 5.3, and we do not experiment with these in this work.
Once we get the header address from a tagged pointer, an object’s
base address is obtained by adding the header size to the header
address. After a new object is allocated, a hook (handle alloc)
updates metadata, moves the pointer to (new A-¿A), and then tags
it (line 3). The pointer to the removed original object is replaced
with a tagged one (A to tagged in line 5).
5.1.2 Pointer arithmetic. Going out-of-bounds at pointer arith-
metic is not corrupting memory as long as the pointer is not deref-
erenced. However, skipping checks at pointer arithmetic can lose
track of pointers’ intended referents. Memory access to these pointer
can be seen valid in many object bounds-based approaches. To keep
track of intended referents, object-tracking approaches may have
to check bounds at pointer arithmetic [22]. However, performing
bounds checks only at pointer arithmetic may therefore cause false
positives, where a pointer going out-of-bounds by pointer arithmetic
is not dereferenced as follows:
int *p;
int *a = malloc(n * sizeof(int));
for (p = a; p ¡ &a[100]; p++) *p = 0;
On exiting the for loop, p goes out-of-bounds yet is not deref-
erenced – this is valid according to the C standard. [3] handles
this by marking such pointers during pointer arithmetic and re-
porting errors only when dereferenced, and [22] pads an object by
off-by-one byte.
Instead of padding, we include one imaginary off-by-one byte (or
multiple bytes) when deciding the wrapper frame (see Section 3.2)
on memory allocation. The fake padding then is within the wrapper
frame, and pointers to this are still derived to the header, even
when they alias another object by pointer arithmetic. The biggest
advantage of fake padding is that it is allowed to be overlapped
with neighboring objects and thus saves memory. The fake padding
does not cause conflicting supplementary table 𝑁 values across
objects possibly overlapping the bytes.
offset
p
a
p’
b
p”
214
215
216
slot0
16-frame0
slot1
Figure 7: By pointer arithmetic, a pointer p goes out-of-
bounds (p’), and also violates its intended referent (a to b).
FRAMER still can keep track of its referent, since p’ is in-
frame. p” is out-of-frame, which we catch at pointer arith-
metic.
FRAMER tolerates pointers to the padding at pointer arithmetic,
and reports errors on attempts to access them. FRAMER detects
those pointers being dereferenced, since bounds checking at mem-
ory access retrieves the raw size of the object. Currently FRAMER
adds fake padding only in the tail of objects, but it could be also
attached at the front to track pointers going under lower bounds,
even though such pointer are banned by the C standard.
Beyond utilising fake padding, to make a stronger guarantee
for near-zero false negatives, we could perform in-frame checking
(currently not included for evaluation) at pointer arithmetic (line
6 in Table 1). We can derive the header address of an intended
referent, as long as the pointer stays inside its wrapper frame (slot
for small-framed), in any circumstance. In Fig. 7, consider a pointer
(p), and its small-framed referent (a). Assuming p going out-of-
bounds to p’ by pointer arithmetic, p’ even violates its intended
referent, but p’ is still within slot0. Hence, p’ is derived to
a’s header by zeroing lower 𝑙𝑜𝑔2(𝑠𝑙𝑜𝑡 𝑠𝑖𝑧𝑒) (15) bits and adding
offset. This applies the same for large-framed objects.
Hence, we could check only out-of-frame (p” in Fig. 7) by per-
forming simple bit-wise operations (no metadata retrieval) checking
if p and p’ are in its wrapper frame (or slot for small-framed):
// p: the source pointer of pointer arithmetic
// p’: the result of pointer arithmetic
// N: log2 wrapperframesize (or slotsize)
isinframe = (p’
assert(isinframe == 0);
p) & (0ULL ¡¡ N);
FRAMER may report false positives for programs not comform-
ing to the C standard with out-of-frame pointers getting back in-
frame by pointer arithmetic without being dereferenced while they
are out-of-frame. This is very rare, and those uses will be usually
optimised away by the compiler above optimisation level -O1. Nor-
mally the distance between an object’s and its wrapper frame’s
bounds is large. We can also increase the wrapper frame size for all
objects to enlarge this distance.
There is another rare case of false positives (we did not encounter
them), where library code uses a tagged pointer it reads from mem-
ory, where the instrumentation did not have a chance to clear the
tag (the pointer was not passed as a function argument). This can be
handled with hardware support or, with a performance overhead,
by a segmentation fault handler.
5.1.3 Memory access. As mentioned in Section 4.3, we instrument
memory access by replacing pointer operands with a return of our
Myoung Jin Nam, et al.
hook, so that the pointers are verified and tag-stripped, before being
dereferenced (line 7,8 in Table 1).
check bounds first reads a tagged pointer’s flag telling if the
object is small or large-framed. As we described in Section 3.3.1
and 3.3.2, we derive the header address from either an offset or an
entry, and then get an object’s size from the header and its base
address as follows:
objbase = headeraddr + sizeof(HeaderTy);
objsize = ((HeaderTy *)headeraddr)-¿size;
We then check both under/overflows ((1) and (2) below, respec-
tively). Detection of underflows is essential for FRAMER to prevent
overwrites to the header.
assert(untaggedp ¿= objbase);
// (1)
assert(untaggedp + sizeof(T) - 1 ¡= upperbound)
); // (2)
// Where T is the type to be accessed
The assertion (2) aims to catch overflows and memory corrup-
tion caused by access after unsafe typecast such as the following
example:
char *p = malloc(10);
int *q = p + 8;
*q = 10; // Memory corruption
In a similar fashion, we instrument memcpy, memmove,
memset, and string functions (strcpy, strncmp, strncpy,
memcmp, memchr and strncat). Handling individual func-
tion depends on how each function works. For instance, strcpy
copies a string src up to null-terminated byte, and src’s length
may not be equal to the array size holding it. As long as the desti-
nation array is big enough to hold src, it is safe, even if the source
array is bigger than the destination array. Hence, we check if the
destination size is not smaller than strlen(src), returning the
length up to the null byte as follows:
assert(destarraysize ¡= strlen(src));
On the other hand, strncpy copies a string up to user-specified
n bytes, so we check both sizes of destination and source arrays are
bigger than n. Metadata for both arrays are retrieved for bounds
checking unlike handling strcpy.
5.2 Temporal Memory Safety
Although our primary focus in this paper is spatial safety, FRAMER
can also detect some forms of temporal memory errors [2, 11, 33, 40]
that we now discuss briefly.
Each large-framed object is mapped to an entry in a division
array in the supplementary table, and the entry is mapped to at
most one large-framed object for each 𝑁. We make sure an entry
is set to zero whenever a corresponding object is released. This
way, we can detect an attempt to free an already deallocated
object (i.e. a double free), by checking if the entry is zero. Access to
a deallocated object (i.e. use-after-free) is detected in the same way
during metadata retrieval for a large-framed object. Note that this
cannot detect invalid temporal intended referents, i.e., an object is
released, a new object mapped to the same entry is allocated, and
then a pointer attempts to access the first object.
FRAMER: A Tagged-Pointer Capability System with Memory Safety Applications
Detection of dangling pointers for small-framed objects is out-
of-scope for this case-study.
5.3 Type Cast Checking
FRAMER can be used for other applications such as type safety,
garbage collection and etc. We did not implement in the aspect in
this paper, but we briefly introduce how to utilise FRAMER as the
base of type safety enforcement as an application in this section.
The majority of type casts in C/C++ programs are either up-
casts (conversion from a descendant type to its ancestor type) or
downcasts (in the opposite direction). Upcasts are considered safe,
and this can be verified at compile time, since if a source type of
upcasts is a descendant type, then the type of the allocated object
at runtime is also a descendant type.
In contrast, the target type of downcasts may mismatch the run-
time type (RTT). If an allocated object’s type is a descendant type
of the target type at downcast, access to an object after downcasts
may cause boundary overruns including internal overflows. This
is a vulnerability commonly known as type confusion [16, 21? ? ].
The RTT is usually unknown statically due to inter-procedural data
flows, so downcasts require run-time checking to prevent this type
confusion.
RTT verification is more challenging than upcast checking at
compiler-time, since it requires pointer-to-type mapping. We need to
track individual objects (or pointers) and store per-object (pointer)
type information in the database. In addition, RTT checking requires
mappings of unique offsets to fields corresponding to types of sub-
objects. FRAMER could be the basis of metadata storage (mapping
a pointer to per-object type) with supplementary type descriptors.
FRAMER’s header can hold corresponding per-object type layout
information (i.e. a list of types at each offset in the object type)
or its type ID for the object, and all type layout information and
type-compatibility relations can be stored in the type descriptors
(implementations can vary). FRAMER’s current implementation as
an LTO pass makes it easier to collect all used types of the whole
program.
Downcasts may be critical for approaches using embedded meta-
data (e.g. fat pointers or tagged pointers), since memory writes after
unsafe type casts on program’s user data can pollute metadata in a
neighboring object’s header. Prevention of metadata corruption is
easier with FRAMER than with fat pointers. We can detect memory
overwrites to another object’s header caused by downcasts by sim-
ply keeping track of structure-typed objects and using our bounds
checking. Unlike fat pointers, we do not need to check internal
overflows by unsafe downcasts to protect metadata, since metadata
is placed outside an object.
6 OPTIMISATIONS
We applied both our customised and LLVM built-in optimisations.
This section describes our own optimisations. Suggestion of further
optimisations is provided later in Section 8.3.
Implementation Considerations. As described in Section 4.2.2, we
replaced all occurrences of an original pointer to a global object
with a tagged one in constant expression (LLVM ConstExpr). Unfor-
tunately, we experienced runtime hotspots due to the propagation
of a constant (a global variable’s address) to every large ConstExpr.
To work around this issue we created a helper global variable for
each global object; assigned the result of the constant propagation
to the corresponding helper variable during program initialisation;
and then replaced uses of an original pointer with load of the
helper variable. This way, runtime overheads are reduced, for in-
stance, benchmark anagram’s overhead decreased from 14 to 1.7
seconds.