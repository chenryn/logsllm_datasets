abnormal behavior related to combinations of the current
chunk ID and the number of chunks in a sequence. For
example missing chunk and chunk IDs higher than the
number of total chunks.
MMS indication:
When a subscriber receives
an MMS (Multimedia Messaging Service) message an
MMS notiﬁcation indication message [48] is sent to him.
This MMS indication is in fact a binary encoded WAP-
push message sent via SMS. The notiﬁcation contains
multiple variable length ﬁelds for subject, transaction ID
and sender name. There are no length ﬁelds for these
values. They are simple zero terminated hex strings. An
MMS indication message can also consist of multipart
sequences. Therefore, our fuzzing target were the vari-
able length ﬁeld values included in the message seeking
for classic issues like buffer overﬂow vulnerabilities.
Simple text:
Implementations of decoders for sim-
ple 7 bit encoded SMS often work with a GSM alpha-
bet represented for example with an array. The decoder
ﬁrst needs to unpack the 7 bit encoded values and convert
7
them to bytes. After this step it can lookup the charac-
ter values in the GSM alphabet table. Our fuzzers mixed
valid 7 bit sequences with invalid encodings that would
result in no corresponding array index. This could trigger
all kinds of implementation bugs but most noteworthy
out of bounds access resulting in null pointer exceptions
and the like.
TP-Protocol-Identiﬁer/TP-Data-Coding-Scheme:
The combination of both of these ﬁelds deﬁnes how
the message is displayed and treated on the phone.
Both of these ﬁelds are one byte values and also cover
several rather unpopular features and reserved values.
With fuzzing combinations of these values with random
lengths of user data payload we were aiming for odd
behavior and bugs in code paths that are seldom used by
normal SMS trafﬁc.
Flash SMS: Flash messages are directly displayed on
the phone without any user interaction and the user can
optionally save the message to the phone memory. Our
observations made it clear that often the code that ren-
ders the ﬂash SMS message on the display is not the
same as the one that displays a normal message from
the menu. Therefore, it can be prone to the same imple-
mentation ﬂaws as simple text messages. Additionally,
ﬂash SMS can consist of multipart chunks and there are
several combinations of TP-Protocol-Identiﬁer and TP-
Data-Coding-Scheme that cause the phone to display the
SMS as ﬂash message. Our ﬂash SMS fuzzers aim to
cover a combination of all of the above possible imple-
mentation weaknesses.
4.7 Fuzzing Trial
After each fuzzing-test-run we evaluate the log gener-
ated by our monitoring script. All of the bugs described
later in this paper were triggered by one or very few SMS
messages and reproducing problems from log entries was
rarely problematic. However, during our fuzzing stud-
ies we stumbled across various forms of strange behav-
ior. Problems we faced included non-standard conform-
ing message replies and various kinds of weird behav-
ior. Some phones were not properly reporting memory
exhaustion. Others did not notice free memory until a re-
boot. Some did not display a received SMS message on
the user interface which made it hard to tell if the phone
accepted a message or silently discarded it on the phone.
Almost every phone we fuzzed needed a hard reset at
some point because it became simply unusable for un-
known reason, the mass of messages or a speciﬁc SMS
needed to be deleted from the SIM card using another
phone. One of the biggest issues we came across was
that very few manufacturers’ hard reset actually restored
the phone to an initial factory state. From what we know
this is done as a feature for customers in order to ensure
no personal data is lost. The behavior also differed be-
tween phones of the same manufacturer. When testing a
bug on the Samsung B5310 it was always sufﬁcient to re-
move the offending SMS message from the phone’s SIM
card while the Samsung S5230 needed an additional hard
reset. Understanding such issues proved to be extremely
time-consuming. However, it is worth noting that purg-
ing a phone of all personal information can prove to be
nearly impossible for a user. This can become an issue
whenever a user plans to sell a used handset to a third
party.
4.8 Results
During our fuzz-testing we discovered quite a few bugs
that lead to security vulnerabilities. The bugs mostly
lead to phones crashing and rebooting, which discon-
nected the phones from the mobile network and inter-
rupted ongoing voice calls and data connections. Our
testing even resulted in two bricked phones that could
no longer be reset and brought back into working order.
We did not investigate the bricking in-depth because this
would have gotten quite costly. Furthermore, some of
the phones crash during the process of receiving the SMS
message, and, therefore, fail to acknowledge the message
thus causing re-transmission of the SMS message by the
network.
Below we present some of the bugs we discovered on
each platform. In most cases we fuzzed only one phone
from each platform and later only veriﬁed the bugs on
other phones we had access to. This is expected because
most manufacturers base their entire product line on a
single software platform. Only customizing options such
as the user interface depending on the hardware of a spe-
ciﬁc device.
We reported all bugs to the manufacturers including
full PDUs in order to verify and reproduce them. The
feedback we received indicates that the bugs are present
in most of their products based on their feature phone
platforms. So far we have not received any information
about ﬁxes or updates.
Nokia S40: On our test devices 6300, 6233,
6131 NFC, 3110c we found a bug in the ﬂash SMS
implementation. The phones run different versions of the
S40 operating system, the oldest of which was over 3
years older than the newest. The manufacturer conﬁrmed
that this bug is present in almost all of their S40 phones.
By sending a certain ﬂash SMS the phone crashes and
triggers the ”Nokia white-screen-of-death”. This also re-
sults in the phone disconnecting and re-connecting to the
mobile phone network. Most notably, the SMS actually
never reaches the mobile phone. The phone will crash
before it can fully process and acknowledge the message.
On the one hand this has the side effect that the GSM net-
8
work performs a Denial-of-Service attack for free as it
continuously tries to transmit the message to the phone.
On the other hand this has a side effect on the phone since
there seems to be a watchdog in place that is monitoring
such crashes. This watchdog shuts down the phone af-
ter 3 to 5 crashes depending on the delay between the
crashes.
Sony Ericsson: Our test devices W800i, W810i,
W890i, Aino running OSE have a problem similar
to the Nokia phones. When combining certain payload
lengths together with a speciﬁc protocol identiﬁer value
it is possible to knock the phone off the network.
In
this case there is no watchdog, but one SMS message is
enough to force a reboot of the phone. As in the case of
the Nokia bug, this SMS message will never be acknowl-
edged by the phone. To get an idea on how wide spread
the problem is, we investigated the age of the devices and
found that the oldest phone (W800i) is from 2005 while
the newest phone (Aino) is from late 2009.
LG: Our LG GM360 seems to do insufﬁcient bounds
checking when parsing an MMS indication message.
This allows us to construct an MMS indication SMS
message containing long strings that span over three or
more sms. This crashes the phone and thus forces an un-
expected reboot when receiving the message or as well
when trying to open the SMS message on the phone.
Motorola: As aforementioned, SMS supports telem-
atic interworking with other network types. By send-
ing one SMS message that speciﬁes an Internet elec-
tronic mail interworking combined with certain charac-
ters in the payload it is possible to knock the phone off
the mobile network. Upon receiving the message the
phone shows a ﬂashing white screen similar to the one
shown by the Nokia phones. The phone does not com-
pletely reboot; instead it simply restarts the user interface
and reconnects to the network. This process takes a few
seconds and depending on the payload it is possible to
achieve this twice in a row with one message. We ver-
iﬁed this on the Razr, Rokr, and the SVLR L7 –
older, but extremely popular devices. The devices span
3+ years, providing us with conﬁdence that the bug is
present in their entire platform.
Samsung: Multipart UDH chunks are commonly used
for payloads that span over multiple SMS messages. The
header chunk for multipart messages is simple.
Our Samsung phones S5230 and B5310 do not prop-
erly validate such multipart sequences. This allows us to
craft messages that show up as a very large SMS mes-
sage on the phone. When opening such a message the
phone tries to reassemble the message and crashes. De-
pending on the exact model one to four SMS messages
are needed to trigger the bug.
Micromax: The Micromax X114 is prone to a sim-
ilar issue like the Samsung phones but behaves slightly
differently. When sending one SMS that contains a mul-
tipart UDH with a higher chunk ID than the overall num-
ber of chunks and a reference ID that has not been used
yet, the phone receives the SMS message without in-
stantly crashing. However a few seconds after the re-
ceipt the display turns black for some seconds before the
phone disconnects and reconnects to the network.
4.9 Validation and Extended Testing
After the initial fuzz-testing we needed to validate our
results over a real operator network since we tested in a
closed environment – our own GSM network. We need
to evaluate if the bugs can be triggered in the real world
or if operator restrictions prevent this. For the validation
we put an active SIM card (of the four German operators)
into our test phones and connected them to a real mobile
phone network. We sent the SMS PDUs that triggered
the bugs using the AT command interface of another mo-
bile phone. These tests validated all the bugs described
in the previous section.
During our fuzzing tests we deactivated the security
PIN on the SIM cards we used in the target phones so that
we did not have to enter the PIN on every reboot. We also
tested the phones with an enabled SIM PIN. Our goal was
to determine if such reboots also reset the baseband and
the SIM card. If the SIM card is blocked after reboot the
phone is not reconnected to the GSM network, and, thus,
the user is cut off permanently. We determined that this
is true for our LG, Samsung, and Nokia devices.
4.10 Bug Characterization
We group the discovered bugs depending on the software
layer they trigger.
The ﬁrst group are bugs that require user interaction
such as the bug we discovered in the Samsung mobile
phones. In this case the user has to view the message in
order to trigger the bug.
The second group are bugs that crash without user in-
teraction. These bugs occur as soon as the phone has
completed receiving the entire message and starts pro-
cessing it. In this group we put the bugs we found on the
Motorola, LG, and Micromax devices.
The third and last group are bugs that trigger at a lower
layer of the software stack. With lower layer we mean
during the process of receiving the SMS message from
the network. A crash during the transfer process means
that the process is not completed and the network be-
lieves the message is not successfully delivered to the
phone. We categorize the bugs discovered in our Nokia
S40 and the Sony Ericsson devices in this third group.
9
5 Implementing the Attack
5.2 Sending SMS Messages
The attacks presented in this work utilize SMS messages
to trigger software bugs and crash mobile handsets, in-
terrupting mobile communications. These bugs cover the
mobile phone platforms of all major handset manufactur-
ers and a wide variety of different models and ﬁrmware
versions. The resulting bug arsenal can potentially be
abused to carry out a large scale attack.
5.1 Building a Hit-List
To launch an attack phone numbers of mobile phones
need to be acquired since simply sending SMS messages
to every possible number is problematic. Furthermore,
sending SMS messages to a large number of unconnected
phone numbers dark address space could trigger some
kind of fraud prevention system, such as observed on
the Internet to detect worms [7]. In addition, for the de-
scribed attack only phone numbers that are connected to
a mobile phone are of interest. Depending on the kind of
attack, a different set of phone numbers is required. In
one case an attack might be targeted towards a speciﬁc
mobile operator, therefore, only phone numbers that are
connected to the speciﬁc operator are of interest.
Regulatory Databases:
In many countries around
the world mobile network operators have their own area
codes. Some examples are Germany1, Italy2, the United
Kingdom3, and Australia4. Such area codes can be read-
ily acquired to help building a hit-list. Likewise one can
use the North American Numbering Plan (NANP) to de-
termine which area exchange codes are used by mobile
operators.
Web Scraping: Web Scraping is a technique to col-
lect data from the World Wide Web through automated
querying of search engines using scripted tools. Find-
ing German mobile phone numbers can be easily done
through queries like "+49151*" site:.de. More-
over, online phonebooks [2] also include mobile phone
numbers. These sites often allow wild card searches, and,
thus can be abused to harvest mobile phone numbers.
HLR Queries: Some Bulk SMS operators [5] offer a
service to query the Home Location Register (HLR) for a
mobile phone number. These queries are very cheap (we
found one for only 0.006 Euro) and answers the ques-
tion if a mobile phone number exists and where it is
connected. Together with the information from the reg-
ulatory databases one can easily generate a list of a few
thousand mobile phone numbers that belong to a speciﬁc
mobile network operator.
SMS messages can be sent by a mobile phone that pro-
vides either an API that allows it to send arbitrary binary
messages or through its AT command interface. We used
the AT interface for most of our testing and validation.
To carry out any kind of large scale attack a way for de-
livering large quantities of SMS messages for low price
is needed. Multiple options exist to achieve this:
Bulk SMS Operators: Bulk SMS operators such
as [1, 5, 3] offer mass SMS sending over the Internet
providing various methods ranging from HTTP to FTP
and the specialized SMPP (Short Messaging Peer Proto-
col). Bulk SMS operators are so-called External Short
Message Entity (EMSE) that are often connected via In-
ternet to the mobile operators but sometimes have their
own SS7 connection to the Public Switched Telephone
Network (PSTN). Figure 4 shows the various connec-
tions of an EMSE. All Bulk SMS operators operate in
the same way. For a given amount of money they de-
liver SMS messages to the speciﬁed destination(s). No
questions asked. Most of the APIs support sending a sin-
gle message to a list of recipients. Prices range from 0.1
to 0.01 Euro depending on the volume and destination
of the messages. The APIs among the bulk SMS opera-
tors differ. Usually they allow to set a number of SMS
ﬁelds from which they assemble the actual payload. Not
all of them are offering the same predeﬁned ﬁelds. For
example [3] was the only one that allows us to set a TP-
Protocol-Identiﬁer ﬁeld. However, we veriﬁed that the
provided APIs are sufﬁcient to carry out the presented
attacks and to generate attack payloads that are identical
to those sent from one of our phones.
MNO A
ESME K
ESME J
PSTN
SS7
Internet
BS
MSC
BS
HLR
Network
SMSC
BS
SS7
SMSC
MNO B
Figure 4: SMS relevant structure of a mobile network
operator (MNO) network and the links to the PSTN, ES-
MEs, and other MNOs.
Mobile Phone Botnets: A botnet consisting of hi-
jacked mobile or smartphones [35] could also be used
for such attacks since every mobile phone is capable of
sending SMS messages. A mobile botnet has the distinct
advantage of free message delivery and high anonymity
10
for the attacker. using a mobile phone botnet one could