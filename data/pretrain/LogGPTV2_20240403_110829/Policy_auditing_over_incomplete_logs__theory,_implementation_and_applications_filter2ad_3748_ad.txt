system logs; predicates tagged and purp are EVAL because
they are implemented by analysis of messages (their ﬁrst
arguments); predicate doctorOf is SUBJ because its veri-
ﬁcation requires knowledge of all of a principal’s doctors,
which is unlikely to be available in mechanized form.
Second, a function, lookup, to query the database must be
provided. Our current implementation requires that lookup
support standard SQL SELECT queries. Using this func-
tion, we deﬁne a function sat db(P ) that ﬁnds all satisfying
substitutions for variables in a DB atom P by running a
query on the database table corresponding to P .
Third, a function eval(P ) to evaluate EVAL atoms P must
be provided. This function has the same speciﬁcation as sat,
except that it need be deﬁned only for EVAL atoms.
Fourth, we require a function isFinal(P ) that takes as in-
put a DB or EVAL atom P with ground input arguments
and returns true iﬀ in future extensions of the structure,
no additional substitutions satisfying P will be found (i.e.,
substitutions other than those found by looking up its cor-
responding table or by running eval on it). The implemen-
tation of isFinal(P ) will vary based on the predicate in P ,
but a simple heuristic works for DB atoms P if the database
table corresponding to P is available in its entirety at the
time of audit: isFinal(P ) = true iﬀ the time argument of P
(which speciﬁes the time at which the truth of P is being as-
certained) is less than the time at which the database table
was last updated.
Fifth, we require two tables of ground SUBJ atoms subjTrue
and subjFalse that contain SUBJ atoms that have been marked
true and false respectively by human auditors earlier. These
tables are initially empty and an interactive front-end could
allow a human auditor to add entries to both tables, making
sure that no atom appears in both tables simultaneously.
Given these ﬁve components deﬁning a structure L, sat
can be deﬁned on L as follows.
sat(L, P ) =
if category(P ) = DB
eval(P )
if category(P ) = EVAL
undeﬁned if category(P ) = SUBJ
 sat db(P )
(Our mode check ensures that a SUBJ atom never appears in
a restriction so, following the deﬁnition of reduce, sat(L, P )
is never called if P is SUBJ. Hence,
it is okay to have
sat(L, P ) = undeﬁned when P is SUBJ.)
Finally, we deﬁne L(P ). Note that L(P ) is meaningful
only for P without free variables, and for such P , sat(L, P )
must be either {} (no satisfying substitution) or {•} (only
the trivial satisfying substitution) or undeﬁned.
L(P ) =
tt if sat(L, P ) = {•} or P ∈ subjTrue
ff if (sat(L, P ) = {} and isFinal(P ) = true)
or P ∈ subjFalse
uu otherwise
The valuation of a variable-free atom P is tt if either it has
a satisfying substitution or it exists in the table subjTrue;
the valuation is ff if either P does not have a satisfying
substitution and it cannot become true in any extension of
the structure or it exists in the table subjFalse; in all other
cases, the valuation of P is uu.
4.2 Optimizations
We discuss some optimizations to simplify the output of
reduce and improve the performance of its implementation.
Removing Residual Terms. The residual formula ψ(cid:48) =
∀(cid:126)x.((c ∧ (cid:126)x (cid:54)∈ S) ⊃ ϕ) or ψ(cid:48) = ∃(cid:126)x.((c ∧ (cid:126)x (cid:54)∈ S) ∧ ϕ) in
the output of reduce in Figure 1 can be very large because
it contains all substitutions S in the output of (cid:100)sat(L, c).
the evaluation of (cid:100)sat(L, c) in the reduction of a quantiﬁer
Accordingly, we remove this residual formula from the out-
put of reduce using the following simple heuristic: If during
∀(cid:126)x.(c ⊃ ϕ) or ∃(cid:126)x.(c ∧ ϕ), every recursive call of the form
sat(L, P ) satisﬁes isFinal(P ) = true, then the c ∧ (cid:126)x (cid:54)∈ S can-
not be satisﬁed in any extension of L, so the residual term
ψ(cid:48) can be omitted. Whether or not isFinal(P ) = true in ev-
ery recursive call is easily checked by maintaining a boolean
variable during evaluation of (cid:100)sat.
Database Indexing. As may be expected, indexing ta-
bles in system databases has a signiﬁcant impact on perfor-
mance. We list two reasonable syntax-directed heuristics for
choosing tables and columns to index. These heuristics are
justiﬁed through experiments in Section 5.
• Index deeper: More performance gains may be ex-
pected by indexing tables corresponding to DB pred-
icates that are nested deeper inside quantiﬁers in the
policy because our reduce procedure replicates formu-
las for each instance of a quantiﬁer and this has a mul-
tiplicative eﬀect for nested quantiﬁers.
• Index input modes: A table corresponding to the DB
predicate p should be indexed on columns that cor-
respond to input arguments in the mode of p because
these columns are guaranteed to be known in any look-
up query on the table.
Database Caching. We mention that in-memory caching
of previously read entries of a database table is unlikely to
improve performance when policies contain quantiﬁers. This
is because the atoms checked against a database change
every time quantiﬁers are instantiated diﬀerently. On the
other hand, in-memory caching of database entries is very
beneﬁcial for policies without quantiﬁers.
5. EVALUATION
We evaluate our implementation of the algorithm reduce
on policies that regulate the transmission of protected health
information in the HIPAA Privacy Rule using synthetic logs
generated by a simulator. Section 5.1 explains the setup of
our experiments and Section 5.2 reports measurements of
running time and memory consumed.
5.1 System Setup
In prior work, we formalized all 84
HIPAA Policies.
transmission related clauses of HIPAA in a ﬁrst-order logic
PrivacyLFP [15]. To use our audit algorithm reduce on the
formalized policy, we made semantics-preserving changes to
our earlier encoding to make it ﬁt our restricted quantiﬁer
syntax and to make it pass our mode check. These changes
are minor and mostly involve refactoring parts of formulas
under quantiﬁers into the restrictions required by our re-
duced syntax.
We show below the top-level formula of the HIPAA pol-
icy, ϕHIPAA. Predicates in ϕHIPAA have the same meaning
as predicates of the same names in Example 2.1. The new
predicate contains(m, q, t, u) means that the disclosed mes-
sage m is both correctly tagged with the subject q and the
attribute t of the information it is carrying and is correctly
labeled with the purpose of the disclosure u. Veriﬁcation of
correctness of tags requires manual analysis of the content
of m, which may be free text and, therefore, the predicate
contains has category SUBJ. The body of the HIPAA pol-
icy is a conjunction of three components: 1) The contains
predicate, 2) a disjunction of the so-called positive norms
ϕ+
i , of which at least one must be satisﬁed for every disclo-
sure, and 3) a conjunction of the so-called negative norms
−
ϕ
i , all of which must be satisﬁed for every disclosure [15].
ϕHIPAA =
∀p1,p2, m, u, τ. (send(p1, p2, m, τ ) ∧ purp(m, u))
⊃ ∀q,t. tagged(m, q, t)
⊃ (contains(m, q, t, u) ∧(cid:87)
i ∧(cid:86)
i ϕ+
−
i )
i ϕ
Synthesizing Audit Logs. We test the algorithm reduce
on synthetic logs generated by a discrete event-driven sim-
ulation that considers several disclosure scenarios governed
by HIPAA. In particular, we simulate disclosures of pro-
tected health information by a HIPAA covered entity in the
following scenarios: For its own treatment, payment and
health operations; for another health provider’s treatment,
payment and health operations; for law-enforcement activi-
ties; for judicial administrative proceedings; for notiﬁcation
to friends and family to assist in treatment; and for market-
ing purposes.
Generated logs contain diﬀerent types of events (disclo-
sures, role changes, etc.). Each type of event is represented
in the logic by a predicate (e.g., disclosures correspond to
the predicate send) and is stored in a separate table in a
SQLite database.
More precisely, the simulator implements a probabilistic
event scheduler. Each scenario is repeated after a probabilis-
tic gap, whose average value is an input to the simulator.
For instance, we may assume that, on average, a hospital
releases some patient’s protected health information for ju-
dicial administrative proceedings every 30 days. During the
execution of a scenario, the simulator adds relevant events
to the database. In some cases, events may not be added
with certain probabilities to model policy violations. For
instance, one of our scenarios discloses protected health in-
formation to a coroner for the purpose of determining the
cause of death of a patient. During this scenario, an entry
corresponding to the disclosure is created in the database.
In addition, two other facts are added to the database, but
with probabilities less than 1: The ﬁrst fact asserts that the
receiver is actually in the role of a coroner and the second
fact asserts that the purpose of the disclosure is determining
the cause of death. Failure to add either of these two facts
models a policy violation.
During simulation, we tag each disclosed message with
a fresh symbolic attribute, and create entries in a table
attr in db to record sub-attribute relations between such
symbolic attributes. An entry (t1, t2) in table attr in db
means that attribute t1 is a sub-attribute of t2. The table
attr in db is used to compute the EVAL predicate attr in.
5.2 Performance Evaluation
We perform two sets of experiments: one evaluates a single
run of reduce, and the other evaluates iterative runs of reduce
in the sense described at the beginning of Section 3.1. All
experiments were performed on a 3GHz Intel Core 2 Duo
CPU running Linux with 8GB RAM and a 7200 RPM hard
disk drive. The database used for storing logs is SQLite
version 3.7.2. Our implementation was compiled using the
MLton compiler for Standard ML.
In the ﬁrst set of experiments, we evaluate the impact of
database indexing, the size of the database and the rate of
policy violations on running time and memory consumption
of reduce, by executing it on logs generated by the simu-
lator. We vary the size of, and indexes on, three tables:
send, tagged, and attr in db. These tables correspond to
predicates that are nested progressively deeper inside quan-
tiﬁers in ϕHIPAA. For each experiment, we record the size
of the entire log (actually the size of the database containing
all logs and indexes on them) and for each table we record
the number of entries in the table, and whether or not it is
indexed.
Figure 2 summarizes the evaluation results. For instance,
in Experiment 1, the size of the entire database is 2.68MB,
the table send contains 5401 entries, and it is not indexed
(symbols N in the last four columns). Following the heuristic
“index input modes” from Section 4.2, whenever we index
a database table (entry Y in the last four columns), the
index is created only on columns that correspond to input
arguments of the corresponding predicate. The ﬁfth column
of Figure 2 is the probability that a disclosure in any scenario
violates the policy.
Experiments 1–5 demonstrate the eﬀect of indexing the
database tables. Indexing a database table allows eﬃcient
random read access to data. As mentioned in Section 4.2,
Exp No. Ave. Time per Total time Memory used Prob. of
violation
disclosure (s)
Log size
Number of entries/indexed (Y or N)
(MB)
2.68
2.99
3.14
3.29
3.98
7.68
15.11
15.10
14.41
send
tagged
4947/N
5401/N
4947/N
5401/Y
4947/Y
5401/Y
4947/Y
5401/Y
4947/Y
5401/Y
10866/Y
9040/Y
21684/Y 16945/Y
21742/Y 17182/Y
21626/Y 16865/Y
attr in db
the rest
5100/N
5100/N
5100/N