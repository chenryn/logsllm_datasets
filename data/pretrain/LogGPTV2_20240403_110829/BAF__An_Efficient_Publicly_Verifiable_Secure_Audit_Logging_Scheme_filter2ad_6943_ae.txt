### Advantages of BAF over Symmetric Logging Schemes

BAF (Blind-Aggregate-Forward) logging scheme offers several advantages over traditional symmetric logging schemes, including public verifiability, high storage and communication efficiency, and scalability. Additionally, BAF is designed to be resilient against specific security threats, such as truncation and delayed detection attacks, thereby enhancing the overall verifier efficiency.

### Storage and Communication Overheads in BAF

In the BAF scheme, the size of the signing key is 2|p| (e.g., |p| = 512 bits), and the size of the authentication tag is |p|. BAF supports signature aggregation, meaning that the size of the resulting authentication tag remains constant at |p|, regardless of the number of data items being signed. Furthermore, BAF generates the current signing key from the previous one and then deletes the previous key from memory, ensuring that the size of the signing key remains constant at 2|p|. Consequently, both the storage and communication overheads in BAF are small and constant, specifically 3|p| and |p|, respectively.

#### Comparison with Other Schemes

To provide a comparative analysis, we consider the storage and communication overheads of various logging schemes. The overheads are measured based on the size of a single signing key, the size of a single authentication tag, and the growth rate of these parameters with respect to the number of data items processed. Table IV summarizes this comparison.

- **Bellare-Yee Schemes (BY I and BY II)**: These schemes use a MAC function to compute an authentication tag for each log entry with a different key, where the sizes of the key and the resulting tag are both |H| (e.g., 160 bits). The storage and communication overheads are linear, O(L) * |H|.
  
- **Schneier-Kelsey Schemes (SK I and SK II)**: Similar to the Bellare-Yee schemes, these also use a MAC function, resulting in linear overheads, O(L) * |H|.

- **Logcrypt**: This scheme extends the idea of using digital signatures like ECDSA, where the size of the signing key is |q| (e.g., 160 bits) and the size of the resulting signature is 2|q|. The overheads are linear, O(L) * |q|.

- **FssAgg-MAC**: This scheme achieves signature aggregation, but requires symmetric key distribution, leading to linear storage overheads, O(R) * |H|, while the communication overhead is constant at |H|.

- **FssAgg-BLS, FssAgg-BM, and FssAgg-AR**: These PKC-based schemes achieve signature aggregation in a publicly verifiable manner, resulting in constant storage and communication overheads. However, FssAgg-BM is slightly more costly with (x + 2)|n|.

BAF stands out with its constant and small storage and communication overheads, making it significantly more efficient than schemes with linear overheads. It is also more efficient than FssAgg-AR/BM and as efficient as FssAgg-BLS.

### Scalability and Security Properties

BAF can produce forward-secure and aggregate signatures that are publicly verifiable using the signers' corresponding public key sets. Unlike symmetric schemes, BAF does not require online TTP support for signature verification, as verifiers can store all necessary keying material without risk of key exposure. BAF also achieves immediate verification and is secure against truncation and delayed detection attacks. Table V provides a detailed comparison of BAF with other schemes in terms of scalability and security properties.

- **Symmetric Schemes (BY I, BY II, SK I, SK II)**: These schemes lack public verifiability and require online TTP support, making them less suitable for large distributed systems. They are also vulnerable to truncation and delayed detection attacks.

- **FssAgg-MAC**: While it does not need online TTP and is secure against the mentioned attacks, it is not publicly verifiable.

- **PKC-based FssAgg Schemes and Logcrypt**: These schemes are publicly verifiable, do not need online TTP support, and can achieve immediate verification. However, Logcrypt is not secure against delayed detection attacks.

BAF, by achieving all the required scalability and security properties, is also more computationally and storage-efficient than the FssAgg schemes, making it the most efficient among the existing alternatives for secure auditing.

### Related Work

The early work on forward-secure stream integrity for audit logging was presented in [4], [10]. These studies focused on formally defining and analyzing forward-secure MACs and PRNGs. Schneier et al. [2], [5] proposed secure logging schemes using one-way hash chains and forward-secure MACs. Logcrypt [11] extended this idea to PKC, replacing MACs with digital signatures and ID-based cryptography. Ma et al. [1], [3] developed comprehensive secure audit logging schemes based on their forward-secure and aggregate signature schemes [8], [9].

Other related works include Chong et al. [28], who strengthened the scheme in [5] with tamper-resistant hardware, and Waters et al. [21], who proposed an encrypted and searchable audit log via IBE. These works complement our approach.

### Conclusion

In this paper, we introduced the BAF logging scheme, which simultaneously achieves low computational overhead, near-zero storage and communication overheads, public verifiability, immediate log verification, and high verifier efficiency. Our comparison with alternative approaches demonstrates that BAF is the best choice for secure audit logging in large distributed systems, even in task-intensive or resource-constrained environments. Future work will focus on integrating BAF into distributed systems like virtual computing clouds and addressing system-level issues in untrusted platforms.