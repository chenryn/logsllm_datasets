and certain security properties (e.g., truncation and delayed
detection attacks) to achieve this veriﬁer efﬁciency. Overall,
the advantages of BAF over the symmetric logging schemes
include its public veriﬁability, high storage and communication
efﬁciency, and scalability.
B. Storage and Communication Overheads
In BAF, the size of signing key is 2|p| (e.g., |p|=512 bit), and
the size of authentication tag is |p|. Since BAF allows signature
aggregation, independent from the number of data items to
be signed, the size of resulting authentication tag is always
constant, which is equal to |p|. Furthermore, BAF derives the
current signing key from the previous one, and then deletes
the previous signing key from the memory. Hence, the size of
signing key is also constant, which is equal to 2|p|. Based
on these parameters, both the storage and communication
overheads of BAF are small and constant (i.e., 3|p| and |p|,
respectively).
Comparison: We use the storage and communication over-
heads of loggers as the comparison basis. The storage and
communication overheads are measured according to the size
of a single signing key, the size of a single authentication
tag, and the growth rate of these two parameters with respect
to the number of data items to be processed, that is, whether
they grow linear, or remain constant for the increasing number
of data items to be processed. Table IV summarizes the
comparison.
Bellare-Yee scheme I [10] and scheme II [4] (denoted BY
I and BY II, respectively), Schneier-Kelsey scheme I [5] and
scheme II [2] (denoted SK I and SK II, respectively), and
FssAgg-MAC [8] all use a MAC function to compute an
authentication tag for each log entry with a different key,
where the sizes of key and resulting tag are both |H| (e.g.,
160 bit). Logcrypt [11] extended the idea given in [4], [5]
by replacing MAC with a digital signature such as ECDSA,
where the size of signing key is |q| (e.g., 160 bit) and the size
of resulting signature is 2|q|, respectively. All these schemes
incur high storage and communication overheads to the logger.
They cannot achieve signature aggregation, and therefore they
require storing/transmitting an authentication tag for each log
226
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
STORAGE AND COMMUNICATION OVERHEADS OF BAF AND PREVIOUS SCHEMES
TABLE IV
Criteria
Key Size
Signature Size
Storage Cost
Comm. Cost
BAF
2|p|
|p|
3|p|
|p|
FssAgg Schemes [1], [3], [8], [9]
MAC
|H|
|H|
|H|
AR
2|n|
|n|
3|n| O(R) ∗ |H|
|n|
(x + 1)|n|
(x + 2)|n|
BM
|n|
|n|
BLS
|q|
|p|
|p|
|p| + |q|
Logcrypt [11]
|q|
2|q|
BY I [10],
BY II [4]
|H|
|H|
SK I [5],
SK II [2]
|H|
|H|
O(L) ∗ |q|
O(L) ∗ 2|q|
O(L) ∗ |H| O(L) ∗ |H|
O(L) ∗ |H| O(L) ∗ |H|
SCALABILITY AND SECURITY PROPERTIES OF BAF AND PREVIOUS SCHEMES
TABLE V
Criteria
BAF
Public Veriﬁability
Ofﬂine TTP
Immediate Veriﬁcation
Resilient to Delayed
Detection Attack
Resilient to Truncation
(Deletion) Attack
Y
Y
Y
Y
Y
MAC
FssAgg Schemes [1], [3], [8], [9]
BLS
Y
Y
Y
Y
BM AR
Y
Y
Y
Y
Y
Y
Y
Y
N
Y
Y
Y
Y
Y
Y
Y
Logcrypt [11]
BY I [10],
BY II [4]
SK I [5],
SK II [2]
Y
Y
Y
Y
N
N
N
N
N
N
N
N
N
N
N
entry. Hence, the storage and communication overheads of
these symmetric schemes [2], [4], [5], [10] and Logcrypt [11]
are all linear as O(L) ∗ |H| and O(L) ∗ |q|, respectively.
Different from these schemes, FssAgg-MAC achieves sig-
nature aggregation, and its communication overhead is only
|H|. However, since FssAgg-MAC requires symmetric key
distribution, its storage overhead is also linear (i.e., O(R)|H|).
The PKC-based FssAgg-BLS [8], FssAgg-BM and FssAgg-
AR [9] achieve signature aggregation in a publicly veriﬁable
way, and therefore their storage and communication overheads
are constant. Table IV shows that they are efﬁcient in terms
of both the storage and communication overheads, with the
exception of FssAgg-BM, which is slightly more costly (i.e.,
(x + 2)|n|).
BAF has constant and small storage and communication
the
overheads, and is signiﬁcantly more efﬁcient
schemes that incur linear storage and communication over-
heads (e.g., [2], [4], [5], [8], [10], [11]). BAF is also more
efﬁcient than FssAgg-AR/BM [9] and as efﬁcient as FssAgg-
BLS [8], as shown in Table IV.
than all
C. Scalability and Security
BAF can produce forward secure and aggregate signatures
that are publicly veriﬁable via the signers’ corresponding
public key sets. Also, BAF does not need online TTP support
for the signature veriﬁcation, since the veriﬁers can store all
the required keying material without facing a key exposure
risk. (Note that in the symmetric schemes such as [2], [4], [5],
[10], the veriﬁers cannot store the veriﬁcation keys on their
own memory, since A compromising a veriﬁer can obtain all
the secret keys of all signers.) Furthermore, BAF does not
use the time factor to be publicly veriﬁable, and therefore
achieves immediate veriﬁcation. Finally, BAF is proven to be
secure against the truncation and delayed detection attacks (see
Section IV). Hence, BAF achieves all the desirable scalability
and security properties simultaneously.
Comparison: Table V shows the comparison of BAF with
the previous schemes in terms of their scalability and security
properties. The symmetric schemes BY I, BY II [4], [10], SK I,
and SK II [2], [5] cannot achieve public veriﬁability. Moreover,
they require online TTP support to enable log veriﬁcation.
The lack of public veriﬁability and the requirement for online
TTP signiﬁcantly limit their applicability to large distributed
systems. Furthermore, they are vulnerable to both truncation
and delayed detection attacks [1], [3]. FssAgg-MAC [8] does
not need online TTP and is secure against the aforementioned
attacks. However, FssAgg-MAC is also a symmetric scheme,
which is not publicly veriﬁable. Hence, none of the previous
symmetric schemes can fulﬁll the requirements of large dis-
tributed systems.
PKC-based FssAgg schemes
and
Logcrypt [11] are publicly veriﬁable. They do not need online
TTP support, and can achieve immediate veriﬁcation. These
schemes are also secure against the truncation and delayed
detection attacks, with the exception of Logcrypt in [11].
[1],
[3],
[8],
[9]
BAF, achieving all
the required scalability and security
properties,
is also much more computational and storage
efﬁcient than FssAgg schemes [1], [3], [8], [9]. Hence, BAF
is the most efﬁcient scheme among the existing alternatives
that can achieve all the desirable secure auditing properties
simultaneously.
VI. RELATED WORK
The pioneering studies addressing the forward secure stream
integrity for audit logging were presented in [4], [10]. The
main focus of these schemes is to formally deﬁne and analyze
forward-secure MACs and PRNGs. Based on their forward-
secure MAC construction, they also presented a secure logging
scheme, in which log entries are tagged and indexed according
to the evolving time periods. Schneier et al. [2], [5] proposed
secure logging schemes that use one-way hash chains together
with forward-secure MACs to avoid using tags and indexes.
Logcrypt [11] extended the idea given in [4], [5] to PKC
227
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
[12] A. Boldyreva, C. Gentry, A. O’Neill, and D. Yum, “Ordered multisig-
natures and identity-based sequential aggregate signatures, with appli-
cations to secure routing,” in Proceedings of the 14th ACM conference
on Computer and communications security, CCS ’07. New York, NY,
USA: ACM, 2007, pp. 276–285.
[13] Y. Mu, W. Susilo, and H. Zhu, “Compact sequential aggregate signa-
tures,” in SAC ’07: Proceedings of the 2007 ACM symposium on Applied
computing. New York, NY, USA: ACM, 2007, pp. 249–253.
[14] M. Bellare and P. Rogaway, “The exact security of digital signatures:
How to sign with rsa and rabin.” Springer-Verlag, 1996, pp. 399–416.
Cambridge University
[15] O. Goldreich, Foundations of Cryptography.
Press, 2001, vol. Basic Tools.
[16] M. Bellare and P. Rogaway, “Random oracles are practical: a paradigm
for designing efﬁcient protocols,” in CCS ’93: Proceedings of the 1st
ACM conference on Computer and communications security. NY, USA:
ACM, 1993, pp. 62–73.
[17] D. Boneh, “The decision difﬁe-hellman problem,” in Proceedings of the
Third Algorithmic Number Theory Symposium, LNCS, 1998, pp. 48–63.
[18] H. Krawczyk, “Simple forward-secure signatures from any signature
scheme,” in Proceedings of the 7th ACM conference on Computer and
Communications Security, CCS ’00. NY, USA: ACM, pp. 108–115.
[19] D. Boneh, C. Gentry, B. Lynn, and H. Shacham, “Aggregate and
veriﬁably encrypted signatures from bilinear maps,” in Proceedings of
Advances in Cryptology (EUROCRPYT 2003).
Springer, 2004, pp.
416–432.
[20] A. Lysyanskaya, S. Micali, L. Reyzin, and H. Shacham, “Sequential
aggregate signatures from trapdoor permutations,” EUROCRYPT, 2004.
[21] B. Waters, D., G. Durfee, and D. Smetters, “Building an encrypted
and searchable audit log,” in ACM Annual Symposium on Network and
Distributed System Security, 2004.
[22] M. Bellare and S. Miner, “A forward-secure digital signature scheme,” in
Proceedings of the 19th Annual International Cryptology Conference on
Advances in Cryptology, CRYPTO ’99. Springer-Verlag, pp. 431–448.
[23] M. Abdalla and L. Reyzin, “A new forward-secure digital signature
scheme,” in ASIACRYPT ’00: Proceedings of the 6th International Con-
ference on the Theory and Application of Cryptology and Information
Security. London, UK: Springer-Verlag, 2000, pp. 116–129.
[24] A. Perrig, R. Canetti, D. Song, and D. Tygar, “Efﬁcient authentication
and signing of multicast streams over lossy channels,” in Proceedings
of the 2000 IEEE Symposium on Security and Privacy, May 2000.
[25] M. Bellare and D. Micciancio, “A new paradigm for collision-free
hashing: incrementality at reduced cost,” in In Eurocrypt97. Springer-
Verlag, 1997, pp. 163–192.
[26] B.-M. Goi, M. Siddiqi, and H.-T. Chuah, “Computational complexity
and implementation aspects of the incremental hash function,” IEEE
Transactions on Consumer Electronics, vol. 49, no. 4, 2003.
[27] Shamus Software, “Multiprecision integer and rational arithmetic c/c++
library (MIRACL),” http://www.shamus.ie/.
[28] C. N. Chong and Z. Peng, “Secure audit logging with tamper-resistant
hardware,” in 18th IFIP International Information Security Conference
(IFIPSEC). Kluwer Academic Publishers, 2003, pp. 73–84.
domain by replacing MACs with digital signatures and ID-
based cryptography. Finally, Ma et al. proposed a set of
comprehensive secure audit logging schemes in [1], [3] based
on their forward secure and aggregate signature schemes given
in [8], [9]. The detailed analysis and comparison of all these
schemes with ours were given in Section V.
Apart from the above schemes, Chong et al. extended
the scheme in [5] by strengthening it via tamper-resistant
hardware [28]. Moreover, Waters et al. proposed an audit
log scheme that enables encrypted search on audit logs via
Identity-Based Encryption (IBE) [21]. These works are com-
plementary to ours.
VII. CONCLUSION
In this paper, we developed a new forward secure and
aggregate audit logging scheme for large distributed systems,
which we refer to as Blind-Aggregate-Forward (BAF) logging
scheme. BAF simultaneously achieves six seemingly conﬂict-
ing goals for secure audit logging, including very low logger
computational overhead, near-zero storage and communication
overheads, public veriﬁability (without online TTP support),
immediate log veriﬁcation, and high veriﬁer efﬁciency. Our
comparison with the previous alternative approaches demon-
strate that BAF is the best choice for secure audit logging
in large distributed systems, even for task intensive and/or
resource constrained environments.
In our future work, we will investigate the integration of
BAF in distributed systems such as virtual computing clouds.
We would like to examine and identify system level issues
involved in secure audit logging on untrusted platforms.
REFERENCES
[1] D. Ma and G. Tsudik, “A new approach to secure logging,” ACM
Transaction on Storage (TOS), vol. 5, no. 1, pp. 1–21, 2009.
[2] B. Schneier and J. Kelsey, “Secure audit logs to support computer
forensics,” ACM Transaction on Information System Security, vol. 2,
no. 2, pp. 159–176, 1999.
[3] D. Ma and G. Tsudik, “A new approach to secure logging,” 22nd Annual
IFIP WG 11.3 Working Conference on Data and Applications Security,
DBSEC ’08, London, UK., 2008.
[4] M. Bellare and B. S. Yee, “Forward-security in private-key cryptogra-
phy,” in CT-RSA, 2003, pp. 1–18.
[5] B. Schneier and J. Kelsey, “Cryptographic support for secure logs on
untrusted machines,” in Proceedings of the 7th conference on USENIX
Security Symposium. Berkeley, CA, USA: USENIX Association, 1998.
[6] K. Fall, “A delay-tolerant network architecture for challenged internets,”
in Proceedings of the 2003 conference on Applications, technologies,
architectures, and protocols for computer communications, SIGCOMM
’03. New York, NY, USA: ACM, 2003, pp. 27–34.
[7] D. Halperin, T. Kohno, T. Heydt-Benjamin, K. Fu, and W. Maisel, “Secu-
rity and privacy for implantable medical devices,” Pervasive Computing,
IEEE, vol. 7, no. 1, pp. 30–39, Jan.-March 2008.
[8] D. Ma and G. Tsudik, “Forward-secure sequential aggregate authenti-
cation,” in Security and Privacy, SP ’07. IEEE Symposium on Security
and Privacy, 20-23 May 2007, pp. 86–91.
[9] D. Ma, “Practical forward secure sequential aggregate signatures,” in
ASIACCS ’08: Proc. of the 2008 ACM symposium on Information,
computer and communications security. NY, USA: ACM, 2008, pp.
341–352.
[10] M. Bellare and B. S. Yee, “Forward integrity for secure audit logs,”
ftp://www.cs.ucsd.edu/pub/bsq/pub/ﬁ.ps, 1997.
[11] J. E. Holt, “Logcrypt: forward security and public veriﬁcation for
secure audit logs,” in ACSW Frontiers ’06: Proceedings of the 2006
Australasian workshops on Grid computing and e-research. Australia:
Australian Computer Society, Inc., 2006, pp. 203–211.
228
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply.