title:Sensor-based intrusion detection for intra-domain distance-vector
routing
author:Vishal Mittal and
Giovanni Vigna
Sensor-Based Intrusion Detection
for Intra-Domain Distance-Vector Routing
Vishal Mittal, Giovanni Vigna
University of California Santa Barbara
Reliable Software Group
{vishal,vigna}@cs.ucsb.edu
ABSTRACT
Detection of routing-based attacks is diﬃcult because ma-
licious routing behavior can be identiﬁed only in speciﬁc
network locations.
In addition, the conﬁguration of the
signatures used by intrusion detection sensors is a time-
consuming and error-prone task because it has to take into
account both the network topology and the characteristics
of the particular routing protocol in use. We describe an
intrusion detection technique that uses information about
both the network topology and the positioning of sensors to
determine what can be considered malicious in a particular
place of the network. The technique relies on an algorithm
that automatically generates the appropriate sensor signa-
tures. This paper presents a description of the approach,
applies it to an intra-domain distance-vector protocol and
reports the results of its evaluation.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols—Routing protocols,Protocol Veriﬁcation
General Terms
Security
Keywords
Routing Security, Intrusion Detection, Network Topology
1.
INTRODUCTION
Attacks against the IP routing infrastructure can be used
to perform substantial denial-of-service attacks or as a basis
for more sophisticated attacks, such as man-in-the-middle
and non-blind-spooﬁng attacks. Given the insecure nature
of the routing protocols currently in use, preventing these
attacks requires modiﬁcations to the routing protocols, the
routing software, and, possibly, the network topology itself.
Because of the critical role of routing, there is a considerable
inertia in this process. As a consequence, insecure routing
protocols are still widely in use throughout the Internet.
A complementary approach to securing the routing infras-
tructure relies on detection of routing attacks and execution
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’02, November 18–22, 2002, Washington, DC, USA.
Copyright 2002 ACM 1-58113-612-9/02/0011 ...$5.00.
of appropriate countermeasures. Detecting routing attacks
is a complex task because malicious routing behavior can
be identiﬁed only in speciﬁc network locations.
In addi-
tion, routing information propagates from router to router,
throughout the network. Therefore, the presence of mali-
cious routing information is not necessarily restricted to the
location where an attack is carried out.
We describe a misuse detection technique that uses a set
of sensors deployed within the network infrastructure. Sen-
sors are intrusion detection components equipped with a set
of signatures, which describe the characteristics of malicious
behavior. The traﬃc that is sent on the network links is
matched against these signatures to determine if it is mali-
cious or not.
The use of multiple sensors for intrusion detection is a
well-established practice. The analysis of network traﬃc at
diﬀerent locations in the network supports more comprehen-
sive intrusion detection with respect to single-point analysis.
The disadvantage of a distributed approach is the diﬃculty
of conﬁguring the sensors according to the characteristics of
the protected network. This problem is exacerbated by the
nature of routing. The conﬁguration of the sensors has to
take into account the network topology, the positioning of
the sensors in the network, and the characteristics of the
particular routing protocol in use.
In addition, some at-
tacks can be detected only by having sensors communicate
with each other. As a consequence, the conﬁguration of
the signatures used by the sensors is a time-consuming and
error-prone task.
The novel contribution of our approach is an algorithm
that, given a network topology and the positioning of the in-
trusion detection sensors, can automatically determine both
the signature conﬁguration of the sensors and the messages
that the sensors have to exchange to detect attacks against
the routing infrastructure. This paper introduces the gen-
eral approach and describes its application to the Routing
Information Protocol (RIP).
RIP is an intra-domain distance-vector routing protocol
[13]. At startup, every RIP router knows only its own ad-
dresses and the links corresponding to these addresses. Ev-
ery RIP router propagates this information to its immediate
neighbors. On receiving the routing information, the neigh-
bors update their routing tables to add, modify, or delete
routes to the advertised destinations.
Routers add a route to a destination if they do not have
one. A route is modiﬁed if the advertised route is better
than the one that the router already has. If a router receives
a message from a neighbor advertising unreachability to a
certain destination and if the router is using that neighbor
to reach the destination, then the router deletes the route
127to the destination from its routing table.
Under certain conditions, RIP might not converge. It may
exhibit the bouncing-eﬀect problem or the count-to-inﬁnity
problem [9]. These problems are partially overcome by us-
ing the split-horizon technique, triggered-updates, and by
limiting the number of hops that can be advertised for a
destination 1.
In order to decide whether a routing update is malicious
or not, a router needs to have reliable, non-local topology
information. Unfortunately, RIP routers do not have this
information. To support router-based intrusion detection it
would be necessary to modify both the RIP protocol and the
routing software. Therefore, our approach relies on external
sensors.
Sensor conﬁgurations are generated oﬄine on the basis of
the complete network topology and the positions of the sen-
sors in the network. The conﬁguration generation algorithm
determines every possible path from every router to every
other router. The conﬁguration for an individual sensor is a
subset of this information based on the position of the sensor
in the network. Sensors need to be reconﬁgured if routers
and links are added to the topology. However, sensors do
not need to be reconﬁgured if the topology changes due to
link or router failures.
The remainder of this paper is organized as follows. Sec-
tion 2 discusses related work in the ﬁeld. Section 3 intro-
duces an abstract reference model of the network routing
infrastructure. Section 4 presents an algorithm to generate
the conﬁguration of intrusion detection sensors for the RIP
distance-vector protocol. Section 5 discusses how routing
attacks are detected. Section 6 describes the experimental
setup that was used to analyze the attacks and evaluate the
detection technique. Section 7 discusses the strengths and
weaknesses of the approach. Section 8 draws some conclu-
sions and outlines future work.
2. RELATED WORK
One of the earliest works on securing routing protocols is
by Radia Perlman [16]. Perlman suggests the use of digital
signatures in routing messages to protect against Byzantine
failures. The main drawback of this approach is that gener-
ating digital signatures is a computationally intensive task.
Signature veriﬁcation is usually not as expensive, but most
of the solutions that use digital signatures require that a
number of them be veriﬁed, leading to a considerable per-
formance overhead.
The use of digital signatures is also advocated by Mur-
phy et al. [14, 15] for both distance-vector and link-state
advertisements. Kent et al. [12, 11] describe an approach to
allow the recipient of a BGP [18] message to verify the entire
path to a destination. Smith et al. [19] introduce a scheme
to protect BGP using digital signatures and also describe a
scheme to secure distance-vector routing protocols by using
predecessor information [20].
Several other schemes have been proposed to reduce the
performance overhead associated with securing routing pro-
tocols using digital signatures. Hauser et al. [7] describe two
techniques for eﬃcient and secure generation and process-
ing of updates in link-state routing. Zhang [24] describes
that routing messages can be protected by using one-time
1
Limiting the number of hops ensures that a route is declared
unusable, when the protocol does not converge and the number
of advertised hops exceeds the maximum number of allowed hops.
However, this also limits the diameter of the networks in which
RIP can be used.
signatures on message chains. In [6], Goodrich describes a
leap-frog cryptographic signing protocol that uses secret-key
cryptography.
While the research referenced so far focuses on prevent-
ing attacks, a complementary approach to the problem of
securing the routing infrastructure focuses on detecting at-
tacks [1, 5, 8]. For example, Cheung et al. [3, 4] present
solutions to the denial-of-service problem for the routing
infrastructure using intrusion detection. Another example
is a protocol called WATCHERS described by Bradley et
al. [2]. The protocol detects and reacts to routers that drop
or misroute packets by applying the principle of conserva-
tion of ﬂow to the routers in a network. The JiNao project
at MCNC/NCSU focuses on detecting intrusions, especially
insider attacks, against OSPF. Wu et al. [21, 17, 23, 22, 10]
consider how to eﬃciently integrate security control with
intrusion detection in a single system.
The approach described in this paper diﬀers from other in-
trusion detection approaches because it focuses on the topo-
logical characteristics of the network to be protected and the
placement of the detection sensors. The approach relies on
topology information to automatically generate the signa-
tures used by sensors to detect the attacks. The details of
the algorithm and its application are described in the fol-
lowing sections.
3. REFERENCE MODEL
An abstract reference model of the network is introduced
to describe the algorithm used to generate the signatures
and how these signatures are used to detect attacks against
the routing infrastructure. A network is represented by an
undirected graph G = (V, E) where vertices V = {v1, v2,
··· , vn} denote the set of routers. Positive weight edges
E = {e1, e2, ··· , em} represent the links connecting router
interfaces. An edge eij ∈ E connects routers vi and vj .2
A subnet is a range of IP addresses with the same network
mask. Every link eij is associated with a subnet sij . S =
{s1, s2, ··· , sm} is the set of subnets corresponding to the
set of links E. We assume that eij = eji and sij = sji.
Every vertex vj ∈ V has an associated set Ej = {ej1, ej2,
···} ⊂ E that represents the set of edges connected to vj .
Sj = {sj1, sj2, ···} is the set of subnets corresponding to
the set of links Ej. Every link eij is associated with a cost
cij , with cij = cji.3 A sensor placed on link eij is identiﬁed
as sensorij . A host p that is connected to link eij is denoted
by hp
ij .
Consider the sub-graph Gsub ⊂ G shown in Figure 1. In
that context, routing problems can occur due to faults in
routers vi, vj , and vk or due to malicious actions of both
the routers and the host hp
ij . Hosts or routers are termed
malicious when they have been compromised and are used
as a means to modify the normal operation of the network.
Both network failures and threats due to malicious intent
need to be included in the threat model because a sensor
cannot always diﬀerentiate between the two. The approach
described here is concerned with attacks involving injection,
alteration, or removal of routes to speciﬁc destinations, by
2
For the sake of simplicity, this model does not consider the pos-
sibility of more than two routers being connected to a single link.
The model can be extended to support that possibility by assum-
ing graph G to be a hyper-graph.
3
The model does not consider the possibility of links being asym-
metric, i.e., having diﬀerent costs in diﬀerent directions. The
model can be extended to support asymmetric costs by assuming
graph G to be a directed graph where eij (cid:1)= eji, and cij (cid:1)= cji.
128vj
v
i
v
k
e
ik
s
ik
eij
sij
h p
ij
Figure 1: Threat Reference Model
malicious hosts or routers. Security threats, e.g., unautho-
rized access to information, dropping and alteration of data
packets by routers, etc., are not addressed here. More pre-
cisely, we can describe our threat model with respect to Gsub
as follows:
1. vi fails. This will result in sub-optimal paths or no
paths at all from sij to sik and vice-versa.
2. vi is compromised and misconﬁgured to advertise a
sub-optimal or inﬁnite-cost path to sik. This will re-
sult in sub-optimal paths or no paths at all from sij
to sik.
3. vj is compromised and misconﬁgured to advertise a
better than optimal path for sik. This will result in
hosts from subnet sij using vj to reach hosts in subnet
sik even though vi has a better route to subnet sik.
If vj actually has no path to subnet sik then packets
from subnet sij will not reach subnet sik.
4. hp
ij pretends to be vi with respect to vj or pretends
to be either vj or vk with respect to vi. hp
ij can then
advertise routes as in 2 and 3.
5. hp
ij renders vi unusable and pretends to be vi. hp
ij
advertises the same information as vi but since vi is
unusable, packets do not get routed.
Gsub represents a segment of the network, represented by G,
where incorrect routing information is generated. If there is
a sensor present on every link of Gsub, the faulty or mali-
cious entity can be identiﬁed and a response process can be
initiated. In the absence of sensors on every link of Gsub,
the incorrect routing information can propagate to the rest
of the network. In this case, the attack can still be detected,
but determining the origin of the attack requires an analy-
sis of the eﬀects of the incorrect routing information. This
analysis is considerably diﬃcult to perform and is not in the
scope of the approach described here.
4. SENSOR CONFIGURATION
A sensor is conﬁgured on the basis of the network topol-
ogy and the sensor’s position in the network. A sensor’s
position in the network is speciﬁed by the link on which the
sensor is placed. A separate component, called the Sensor
Conﬁgurator, is given the network topology and the position
of all available sensors as inputs. The Sensor Conﬁgurator
uses an algorithm to generate the conﬁguration of each sen-
sor. The conﬁgurations are then loaded into the appropriate
sensors.
The ﬁrst step of the Sensor Conﬁgurator algorithm is
to ﬁnd all paths and their corresponding costs from every
e
12
s
12
v
1
s
23
e
23
e
13
s
13
s
24
e
24
v
2
s
35
e
35
v
3
Figure 2: Sensor Conﬁguration Example
ij , pk
ij is the cost of the path pk
router to every other router in the graph G. The results
are organized into a 2-dimensional vertex-to-vertex matrix.
The (i, j)th entry of the matrix points to a list of 2-tuples
ij)}. The list contains a tuple for each path between
{(ck
vertices vi and vj . pk
ij is a set of vertices traversed to reach
vj from vi. ck
ij between vertices
vi and vj . For example, consider Figure 2. v1, v2, v3 are
routers. e12, e13, e23, e24, e35 are links with associated sub-
nets s12, s13, s23, s24, s35, respectively. The cost of all links
is equal to 1. Table 1 shows the vertex-to-vertex matrix for
the graph in Figure 2. The {(cost, path)} entry in row v1,
column v1, is the set of possible paths and their correspond-
ing costs that vertex v1 can take to reach vertex v1. The
entry {(0, (∅))} means that vertex v1 can reach vertex v1 at
cost 0, through itself. The entry in row v1, column v2, means
that vertex v1 can reach vertex v2 at cost 1 through itself