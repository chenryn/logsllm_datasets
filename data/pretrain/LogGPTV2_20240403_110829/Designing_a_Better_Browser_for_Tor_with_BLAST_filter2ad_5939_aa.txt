title:Designing a Better Browser for Tor with BLAST
author:Tao Wang
Designing a Better Browser for Tor with BLAST
Tao Wang
Department of Computer Science and Engineering
Hong Kong University of Science and Technology
PI:EMAIL
Abstract—Tor is an anonymity network that allows clients
to browse web pages privately, but loading web pages with
Tor is slow. To analyze how the browser loads web pages, we
examine their resource trees using our new browser logging and
simulation tool, BLAST. We ﬁnd that the time it takes to load a
web page with Tor is almost entirely determined by the number
of round trips incurred, not its bandwidth, and Tor Browser
incurs unnecessary round trips. Resources sit in the browser
queue excessively waiting for the TCP and TLS handshakes, each
of which takes a separate round trip. We show that increasing
resource loading capacity with larger pipelines and even HTTP/2
do not decrease load time because they do not save round trips.
We set out to minimize round trips with a number of protocol
and browser improvements, including TCP Fast Open, optimistic
data and 0-RTT TLS. We also recommend the use of databases
to assist the client with redirection, identifying HTTP/2 servers,
and prefetching. All of these features are designed to cut down
on the number of round trips incurred in loading web pages. To
evaluate these proposed improvements, we create a simulation
tool and validate that it is highly accurate in predicting mean
page load times. We use the simulator to analyze these features
and it predicts that they will decrease the mean page load time
by 61% over HTTP/2. Our large improvement to user experience
comes at trivial cost to the Tor network.
I.
INTRODUCTION
The Snowden revelations showed us the massive scale and
breadth of state-level surveillance against internet activity. To
avoid privacy compromise, web-browsing clients may choose
to use anonymity networks. Anonymity networks relay user
trafﬁc through multiple nodes across the globe, ensuring that
a single eavesdropper cannot know both the true origin and
destination of any trafﬁc.
Tor [7] is a highly successful anonymity network with
millions of daily users. Its success can be partly attributed to
the easy-to-use Tor Browser, which is based on Firefox. One
of its chief downsides — and a barrier to further adoption —
is that web browsing using Tor Browser is notably slow. From
our data, we ﬁnd that it takes a mean of 16 to 19 seconds to
load web pages over Tor Browser depending on version.
In this work, we seek to reduce load times on Tor through
improving its browser design to improve user experience.
Fabian et al. [9] studied browser load times; their results sug-
gest that a mean of 16 to 19 seconds would have corresponded
to high loading cancellation rates and low user satisfaction if
they were experienced on a normal browser. Faster load times
reduce user frustration and downtime. A better user experience
would furthermore draw in more users who were previously
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24199
www.ndss-symposium.org
unwilling to trade off utility for its better privacy. Having
more users improves the anonymity of Tor Browser by creating
larger anonymity sets, reducing the chance that eavesdroppers
could deanonymize a Tor user using side information.
Anonymity network optimization is a well-studied privacy
problem with a decade of research, generally focused on
Tor [4], [5], [12], [14], [18]. Researchers have proposed various
solutions to optimize Tor’s performance on the network level
so as to improve user experience. On the other hand, the
problem of browser design for anonymity networks remains
academically untouched, with many open problems that are
just as signiﬁcant for user experience as network design
problems. Tor Browser should be designed with Tor’s high
latency in mind, but instead it is largely identical to Firefox
with regards to how it loads web pages.
There are two chief barriers to research in browser design.
First, any changes to browser design require a lengthy imple-
mentation, validation, and data collection process to measure
results. Second, random network conditions can signiﬁcantly
alter results, so that one browser design may only be perform-
ing better than another because of better network conditions.
An example of the inconsistency of browser design evaluation
can be found in the history of HTTP Pipelining. Pipelining
was implemented and standardized in Firefox and Chrome to
reduce page load times, but quickly abandoned and disabled
in both browsers as further analysis showed no signiﬁcant
improvement in performance (despite earlier claims).
We overcome both barriers by creating BLAST (Browser
Logging, Analysis and Simulation for Tor), a tool capable
of logging, analyzing and simulating page loading on Tor in
minute detail. BLAST consists of a logger and a simulator.
The logger is an extensive instrumentation of Tor Browser
to analyze its page loading process; the simulator simulates
page loads based on basic information about its structure. With
BLAST, we make the following contributions:
1) Analyzing BLAST logs, we show that Tor Browser’s
high page load times are almost entirely due to incurring
round trips with Tor’s high latency, not because of limited
bandwidth or resource loading capacity. In addition, we
ﬁnd that on Tor Browser, HTTP/2 does not load pages
more quickly than HTTP/1.1 with pipelining despite its
superior connection multiplexing.
2) We create a page loading simulator tool that is highly
accurate at predicting mean page load times and can do
so for a variety of browser set-ups, including HTTP/1.1,
HTTP/1.1 with pipelining, and HTTP/2.
3) We propose a number of browser and protocol improve-
ments to eliminate unnecessary round trips and, using
the BLAST simulator, we verify their positive effect on
reducing page load times. Our simulator predicts that our
proposed features combined reduce mean page load time
from 18.0 s to 7.1 s, a 61% decrease.
We proceed as follows. In Section II, we go through the
basics of web browsing and the implementation of BLAST.
We analyze HTTP/1.1 with pipelining and examine its short-
comings for use in anonymity network browsing in Section III,
focusing on the causes of long load times. We then analyze
HTTP/2 and compare against HTTP/1.1 with pipelining in
Section IV. Conclusions drawn from the comparison guide
our design of a better browser for anonymity networks in
Section V, where we also evaluate each of our design decisions
separately with the help of our simulator. We discuss various
browser design issues in Section VI, compare our work with
related work on anonymity network design in Section VII, and
conclude with Section VIII.
II. TOOLS AND TERMINOLOGY
A. Basics of Page Loading
To load a web page, the client’s web browser dispatches
resource requests onto TCP connections. If no connection
is available, the request is instead appended onto a resource
queue where it waits until a connection is available. We expand
on these terms in the following.
Resources. A web page fully comprises of a set of web
resources. Each resource is associated with a distinct GET
or PUT request. For example, a resource could be an HTML
document, a CSS sheet, JS code, PHP code, or an image. A
resource load can be triggered by user activity (such as typing
in a URL or clicking on a link), by another resource (such
as an image that is referred to by an HTML document), or
the browser application itself (such as an update for an add-
on). We can represent the structure of each web page as a
resource tree with each resource as a node. The root resource
is the original resource requested by the user’s activity, and a
node’s parent is whichever resource triggered its loading.
Connections. To obtain a resource, the browser establishes
TCP connections and then dispatches resources onto available
connections. The connection thus becomes active until the
resource is fully loaded. After the resource is fully loaded, the
connection becomes idle until the browser chooses to dispatch
another resource onto the connection (often immediately).
A resource cannot be dispatched onto multiple connections,
while a single connection is likely to dispatch many resources.
The browser can establish multiple connections to the same
server, up to a limit, to dispatch more resources concurrently.
Currently, Tor Browser will establish up to six simultaneous
connections to the same server.1
Resource queue. When the browser determines that a re-
source is necessary, due to user action or a reference by a
previously loaded resource, the browser adds its request to the
resource queue, and attempts to ﬁnd connections to dispatch
all resources in the queue. A connection becoming established,
idle, or closed also causes the browser to attempt to dispatch
resources in the queue. If there are not enough connections
to dispatch resources in the queue, the browser may establish
a new connection, respecting limits on the total number of
connections. Thus the queue acts as a callback system to ensure
that resources can be sent as soon as conditions permit.
1 The maximum number of simultaneous connections to different servers
in total is 900, which will not be reached in normal browsing.
Client
Server
1. TCP Handshake
Establish connection
C o n n e c t i o n e s t a b l i s h e d
2. TLS Negotiation
3. HTTP
Client Hello
S e r v e r H e l l o
Get Res. 1
R e s . 1
Get Res. 2, 3, 4
R e s . 2 , 3 , 4
Browser
Queue:
Res. 2, 3, 4
Fig. 1: Client-server diagram of how the browser loads a
web page with four resources (Res. 1–4) from a server with
HTTPS. The browser only establishes one connection in this
case. Loading Res. 2–4 this way requires either pipelining or
HTTP/2.
We illustrate these concepts with a client-server diagram in
Figure 1 for a web page with four resources, all on the same
server. The client types in an HTTPS URL corresponding to
the ﬁrst resource (Res. 1), whose children are Res. 2, 3, and
4. It takes three round trips to load the ﬁrst resource. If the
client parses references in Res. 1 to its children before Res. 1
is fully loaded, the client would establish another connection
in an attempt to load the children (since the one shown is still
actively loading Res. 1).
It is not possible to load Res. 2, 3 and 4 as in the diagram
with original HTTP/1.1 because each connection can only load
one resource at once; more connections would be constructed
to load them, requiring more round trips. For one connection
to dispatch more than one resource simultaneously, the client
needs either HTTP/1.1 pipelining or HTTP/2. We highlight the
differences between HTTP/1.1 without pipelining, HTTP/1.1
with pipelining, and HTTP/2 in Table I for easier comparison;
we describe their mechanisms in detail in their respective
sections (Section III and Section IV).
B. What causes long page load times on Tor?
Tor’s high latency imposes a challenging condition on
browser design. Here, we characterize the types of pages that
would be especially difﬁcult to load when the client suffers
from high latency. Later, we will investigate whether or not
Tor Browser deals with these situations effectively.
Large number of web servers. Loading a resource from
a HTTPS server necessitates up to three round trips: TCP
connection establishment, TLS negotiation, and HTTP re-
source request. A resource reusing a previously established
2
TABLE I: Summary of page loading restrictions under different protocols.
Max. number of connections per server
Max. number of simultaneous resources
loaded per connection
Response must be in order of request
HTTP/1.1 without
pipelining
6
1
Yes
HTTP/1.1 with
pipelining
6
6–14
Yes
HTTP/2
1
100
No
connection to the same server can avoid the ﬁrst two round
trips. Therefore, a web page that distributes its resources across
more servers often requires more round trips to load, counter-
intuitively causing longer load times.
Tall resource trees. The browser can only request a resource
once its parent’s data has been received and parsed to obtain
its reference. Since it takes at least one round trip to request
and receive a resource, the height of a resource tree is the
minimum number of round trips required to load the page. In
the worst case, if each resource between the parent and the
deepest leaf of the tree is on a separate HTTPS server, we
would need three round trips per height of the tree to load the
web page (as above).
Excessive number of resources. The total number of re-
sources that can be loaded concurrently is limited by the
number of connections and the number of resources that
can be sent on each connection; we refer to this as the
resource loading capacity. On HTTP/1.1 without pipelining,
the resource loading capacity is 6. Pipelining multiplies the
resource loading capacity with the depth of pipelines (6 to 14).
On HTTP/2, the resource loading capacity is 100; few servers
have more than 100 resources. If resource loading capacity is
too low, resources would have to wait excessively in the queue
for connections to free up.
C. Categorizing load time
We use two metrics to capture user experience. First, we
use page load time, which is how long it takes 95% of all
resources to load. We do not require all resources to load
when calculating page load time because many web pages