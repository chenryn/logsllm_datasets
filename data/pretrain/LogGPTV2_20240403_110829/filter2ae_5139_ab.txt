直接把图片放到 stegslove 里，向右多点几次就出来
    hgame{LSB_is_easy_for_u}
### 打字机
提示给了谷歌识图，那么就识图一波，发现这是一个漫画中出现的打字机。
然而这个图片出给的只有大写以及数字的对应关系， **没有小写字母对应的关系，导致 flag.png 中的一些字符无法一一对应**
最后在这里找到了对应关系，相当于是把小写字母的对应关系破译出来了。  
小写字母的映射表：
最后把三个图对应起来得到 flag
    hgame{My_vi0let_tyPewRiter}
### Broken Chest
zip 文件修复，用 winhex 打开，把开头的 4F 改成 50
打开时候，发现了 zip 文件的注释 "S0mETh1ng_U5efuL"，这个也就是压缩包的密码
输入密码打开文件，得到 flag
### Try
用 wireshark 打开数据包， **过滤出 HTTP 报文** ，发现有两个文件可以提取出来。一个是 png，另外一个 zip
在相应的返回包上右键 -> 导出分组字节流
导出之后，发现图片没什么用，但是 zip 包还可以提取
解压后的 password.txt 文件打开之后，后面的字符用 * 号打码了，于是想到了掩码爆破（ **直觉猜测应该都是数字** ）
使用 **Ziperello** 打开压缩包文件 open-it.zip
破解模式选择基于模块的破解（也就是掩码爆破），按照左边的密码模板填完后，下一步
很快就会破解出来压缩包的密码
用破解出来用密码解压出压缩包， **发现下面有张图片**
放到 winhex 中，发现图片里面还有一个 docx 文件。
**用 foremost 提取出来是个压缩包** ，解压发现需要密码，尝试伪加密的解密（在 winhex 中直接改控制位就行了）
成功解密出来 docx 文件。
打开发现是空白，然后在 word 中把显示隐藏文字的选项打开，就可以看到 flag
## CRYPTO
### Mix
首先摩斯密码解密：  
解码出来发现是十六进制，在这里继续解码
观察特征，拿到这样的字符串 **一般就是凯撒和栅栏的混合加密** 。
这里面没有 hgame 这几个字符，所以需要先用凯撒转换一下。  
找到有 hgame 字符的字符串，如下
使用栅栏解密，2 个一栏就可以解除 flag
    hgame{E4sY_cRypt0}
### base 全家
三次 base64 解码，三次 base16（相当于十六进制的 ascii 码转字符），base32 两次即可解出。（字符串太长了就不贴出来了。。。）
## RE
### HelloRe
IDA 进去 main 函数直接 f5 就可以看到 flag，不多说。
### r & xor
IDA 打开程序，在 v31 到 v35 处按下 r 会出现字符串，但是这个 flag 提交显然不对，因为后面有这个字符串异或的操作
    s[i] != (v6[i] ^ *(&v31 + i))
也就是将 fake flag 与一系列的变量异或，得到的就是 flag
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int result; // eax@2
      __int64 v4; // rsi@9
      signed int i; // [sp+8h] [bp-138h]@3
      int v6[6]; // [sp+10h] [bp-130h]@1
      int v7; // [sp+28h] [bp-118h]@1
      int v8; // [sp+30h] [bp-110h]@1
      int v9; // [sp+38h] [bp-108h]@1
      int v10; // [sp+3Ch] [bp-104h]@1
      int v11; // [sp+40h] [bp-100h]@1
      int v12; // [sp+44h] [bp-FCh]@1
      int v13; // [sp+48h] [bp-F8h]@1
      int v14; // [sp+4Ch] [bp-F4h]@1
      int v15; // [sp+50h] [bp-F0h]@1
      int v16; // [sp+54h] [bp-ECh]@1
      int v17; // [sp+5Ch] [bp-E4h]@1
      int v18; // [sp+60h] [bp-E0h]@1
      int v19; // [sp+64h] [bp-DCh]@1
      int v20; // [sp+68h] [bp-D8h]@1
      int v21; // [sp+6Ch] [bp-D4h]@1
      int v22; // [sp+70h] [bp-D0h]@1
      int v23; // [sp+74h] [bp-CCh]@1
      int v24; // [sp+78h] [bp-C8h]@1
      int v25; // [sp+80h] [bp-C0h]@1
      int v26; // [sp+84h] [bp-BCh]@1
      int v27; // [sp+88h] [bp-B8h]@1
      int v28; // [sp+8Ch] [bp-B4h]@1
      int v29; // [sp+90h] [bp-B0h]@1
      int v30; // [sp+94h] [bp-ACh]@1
      __int64 v31; // [sp+A0h] [bp-A0h]@1
      __int64 v32; // [sp+A8h] [bp-98h]@1
      __int64 v33; // [sp+B0h] [bp-90h]@1
      __int64 v34; // [sp+B8h] [bp-88h]@1
      int v35; // [sp+C0h] [bp-80h]@1
      char s[104]; // [sp+D0h] [bp-70h]@1
      __int64 v37; // [sp+138h] [bp-8h]@1
      v37 = *MK_FP(__FS__, 40LL);
      v31 = '0Y{emagh';
      v32 = '_3byam_u';
      v33 = '1ht_deen';
      v34 = '!!!en0_s';
      v35 = '}!!';
      memset(v6, 0, 0x90uLL);        //应该是 memset(v6, 0, 6);
      v7 = 1;
      v8 = 7;
      v9 = 92;
      v10 = 18;
      v11 = 38;
      v12 = 11;
      v13 = 93;
      v14 = 43;
      v15 = 11;
      v16 = 23;
      v17 = 23;
      v18 = 43;
      v19 = 69;
      v20 = 6;
      v21 = 86;
      v22 = 44;
      v23 = 54;
      v24 = 67;
      v25 = 66;
      v26 = 85;
      v27 = 126;
      v28 = 72;
      v29 = 85;
      v30 = 30;
      puts("Input the flag:");
      __isoc99_scanf("%s", s);
      if ( strlen(s) == 35 )
      {
        for ( i = 0; i < 35; ++i )
        {
          if ( s[i] != (v6[i] ^ *(&v31 + i)) )
          {
            puts("Wrong flag , try again later!");
            result = 0;
            goto LABEL_9;
          }
        }
        puts("You are right! Congratulations!!");
        result = 0;
      }
      else
      {
        puts("Wrong flag , try again later!");
        result = 0;
      }
    LABEL_9:
      v4 = *MK_FP(__FS__, 40LL) ^ v37;
      return result;
    }
  * 另外这个的 IDA 在处理 memset 函数时翻译有错，应该是 memset(v6,0,6)
最后将这个 fake flag **与这些变量逐个异或即可** 。
    l = [0,0,0,0,0,0,1,7,92,18,38,11,93,43,11,23,23,43,69,6,86,44,54,67,66,85,126,72,85,30]
    v31 = '0Y{emagh';
    v32 = '_3byam_u';
    v33 = '1ht_deen';
    v34 = '!!!en0_s';
    v35 = '}!!';
    f = v31[::-1]+v32[::-1]+v33[::-1]+v34[::-1]+v35[::-1]
    flag = ''
    for i in range(len(l)):
        flag += chr(ord(f[i])^l[i])
    print flag
这道题也可以使用 angr 来跑出 flag，具体的步骤就不多说了。
### Pro的Python教室(一)
将中间的字符串 **base64 解码** 拼接三段就可以得到 flag
    hgame{Here_1s_3asy_Pyth0n}