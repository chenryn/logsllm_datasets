管理员和一个程序员，承担了很重的责任。如果让我们中的任何一
个人单独工作，都不可能有这么高的工作效率。
我们团队对自动化测试设计跟产品代码设计投入的精力是一样多
的。对任何一个产品代码来说，好的代码编译和设计时间对测试脚
2030
---
## Page 2032
本来说是非常关键的。我们不断地重构测试是为了最大限度地降低
维护成本。如果出现了功能变化，好的测试设计意味着测试更新是
轻而易举的。
我们在测试设计上的投资成倍地取得回报。我们的自动化测试提供
着无可争议的系统特性文件材料。常常会有我们的商业伙伴提出这
样的问题。“我不记得了，如果没有偿还贷款，那这部分利息是怎么
计算的？”我就可以运行一个FitNesse测试来有说服力地显示出这些
功能是如何实施的。这样就节省了费时去讨论“我以为我们是那样设
计的”这种问题。
实现价值
当BrianMarick为“软件之旅"接见我时，他问了我一个有趣的问题：
“如果你能回到2003年，你会对自己说什么呢？”我认为最重要的
是，当我们团队第一次实施Scrum的时候，我真希望我能知道我们真
的必须把这业务的里里外外都了解清楚。不仅仅是我们软件中的业
务自动化这部分，所有的人工操作、财务、市场和营销一—这些全
都是成功的要素。
每个人都要解决业务难题
敏捷开发进行了一年，我们团队已经能有效运用测试驱动开发生成
强健又稳定的代码了。我们实现了100%的回归测试，也花费了很长
时间实现探索测试。尽管如此，我们也时常不能给出顾客最满意的
功能。我们错过了也误解了很多要求，尤其是主要应用程序以外的
很多方面，如财务会计方面。我们有时会错过改变了系统看似无关
的其他部分的连锁反应。
有些不是软件导致的缺陷问题也困扰着我们。程序使用者操作不
当，这就必须用手动改变数据来纠正。我们怎么才能使这个系统变
得更“简单安全"呢？我们能不能提供一些软件使这些使用者能解决
自已的问题呢？我们怎么才能使每两周交付一次的软件达到投资回
报率最大化呢？
我们决定安排时间，学习与商业更密切的业务。我们与客户一起进
行日常的处理，我们发现了一些简单的软件解决方案，每周可以节
省很多时间，还可以减少手动的错误。例如，往一些现存的屏幕中
添加一些信息是很简单易行的，也能节省很大一部分调查研究的时
2031
---
## Page 2033
间。用软件执行一些复杂的计算，直到不得不手动实现这几个选代
过程为止。因此业务人员可以做出更多精确的操作，所以他们不经
常来找我们在数据库中做手动纠正。弄明白整个财务会计系统，而
不仅仅是应用程序做好的那一部分，这对保证账户结余是很关键
的。
下面的这个例子是关于我利用业余时间和精力学习商业业务的。我
在ePlan下工作了5年都不知道钱是怎样在5个不同的账户中转移的。
这些账户结余中每天的现金余额很关键。学了这些以后，我明白了
为什么当一个账户因为500000美金导致失衡时，我们的会计师会有
些紧张了。理解了货币运动，我们就能写出正确的代码来确保这些
资金每天在正确的账户中存取。到现在似乎很明显了，但是这花了
我们几年的时间理解到这个程度。现在我们已经能每天帮助商业业
务准确地评估状况了。
增量测试及编程
我们总是试着把工作量分成小块来完成，而且致力于每次完成一小
块的功能。另外我还想告诉2003年的我，不要承诺于一次交付太
多。我们都想尽量满足客户，但是我们有时候不得不现实点。在这
些小增量上的努力使我们工作更有效率了。我们把复杂的故事分割
成我们所说的“钢化线程”。第一个“线程”是一个最基本功能中的端
对端数组。我们把随后的每一个“线程”都建立在完整线程之上。每
一个线程都是可测试的。甚至在所有的线程都完成之前，通常这些
小块的功能都是可用的。
这是一个相关的实例。最近，我们有一个主题，包括上传、解析、
验证文档、生成数据，并保存在数据库中，然后处理数据。测试
员、程序员和顾客都在电子白板上模拟系统。UI由四个屏幕组成。
我们的第一个UI线程将要做的是，在每个屏幕中伴随着一些硬编码
的数据和按钮来实现屏幕中的相互浏览。这些现在还没有商业价
值，但是我们可以把这展示给顾客，确保他们喜欢这个流程，并写
下一些自动化的端对端GUI测试。我们为每个屏幕增量添加了很多额
外的功能，完成了测试，为每个小“线程”做自动化测试并构建在下
一次增量中。
另一个“线程”是要去解析并验证上传的文档。我为解析和验证过程
写了FitNesse测试用例，然后我无须运用UI就写出并测试了代码。随
后，我们指定测试生成代码，插入数据库中并写了代码。我们解决
2032
---
## Page 2034
数据进程代码用的是同一种方法。这些功能可以与独立于U数组中
独立完成。所有的代码都到位时，我们就有时间做端到端的探索性
测试，并使用脚本来帮助建立手动测试场景。顾客最需要的功能即
及时无误地交货。这个增量方法引导我们得到了最好的解决方案。
提前计划就足够了
如果我告诉你，“当你没有正式开始开发前，不要提前太长时间计划
故事和主题；优先事项可能会变，而且你开始写故事时，脑子里会
有很多新的想法。”这听起来似乎并不像在讨论测试。这是因为我不
能把测试从编码中分离出来。能提升测试的实践和原理同样能提升
代码，反之亦然。
开发团队对于商业业务知识了解的深度使计划更加有效率。我们能
提供有用的输入业务开始计划一个新的特征。我们可以提出一些好
问题，使他们的需求更充实，更具体化。我们经常提议一些可能减
少开发成本的可选择的解决方案。我们能帮助业务专家决定一个特
定的功能能否产生出好的投资回报率，以致我们并没有把时间浪费
在计划并不能提供足够的价值的特征上。
一个成功的故事
当我们的团队最初开发出Scrum时，一共有500个商业用户，利润并
不是很高，而且因为我们并未满足顾客的需求而濒临失败。当我写
这个作品时，我们已经有了超过3000顾客，我们已经盈利了很多
年，尽管现在的经济不稳定，我们却在稳步成长。用测试指导开
发，结合本领域的知识，能保证我们生产出正确的软件。我们设计
的这些测试用来确保我们使用正确的方法编写正确的功能，并且它
们也提供了一个非常好的安全保证。我们团队对于正确设计软件的
长期承诺帮助我们更快、更频繁地创造价值。
我们的股东可以信赖我们团队改进和提高产品的能力，这种能力不
仅让现有的客户满意，也会吸引更多新的客户。我们用于测试和开
发的漂亮的团队方式不仅对我们团队自身，而且对于我们的公司和
客户来说，意味着快乐和满意。
公布脚本
2033
---
## Page 2035
我是作为一名ePlan服务公司的测试员写这一章草稿的，随后接受了
Ultimate软件组的工作机会。我很高兴地告诉大家我的经历，到目前
为止，我在ePlan的经历已经在新团队派上了用场。
我加人这个团队时，Ultimate已经做了4年的敏捷开发，而且这28个
敏捷团队每年都交付了4个产品。我的新团队致力于单元和验收水平
的测试驱动开发。我们与生产人员一起努力工作让客户了解怎样使
用我们的软件。看到这样的过程如此类似于我在ePlan的团队，这是
对我的巨大肯定。
相同的思路是：我们团队关注客户的需求并提供他们想要的东西。
用测试驱动代码和例子帮助确保我们的代码可以适应所有未来的变
化。企业有信心及时交付新的软件特性并能继续产生价值。
第16章剥析Socialtext的测试
Matthew Heusser
我不明百为什么我们从一开始就认为这种方式能行。
——James Mathis，2004年
这与工作无关....是私事儿
我将我成人后的全部时间都用在了开发、测试和软件项目的管理
上。通过这些年的经历，我学到了关于我们这一行的以下几件事：
实际的软件测试与学校学到的软件测试，甚至与有些企业在做演示
时描述的软件测试都很不一样。
关于什么是好的软件测试和如何很好地测试有很多不同的观点。
·上一条是说没有“最佳实践”，意味着没有任何观点或测试方法能够
此外，对于商业软件开发，我还想补充几点。首先，检验（chec
king）与调查（investigating）之间有显著的区别。②检验是指像办
2034
---
## Page 2036
事员似的通过重复的操作来确认事情做得正确的过程；而调查是指
由于反馈驱动（feedbackdriven）的过程。
检验是可以自动化的，或至少一部分可以是自动化的。程序员可以
对任意一个小的结构进行输入和比较的自动操作。当我们将所有这
些小的结构结合到一起的时候事情就复杂了。
我们来想象这种情况：有一个计算器程序，我们每按一次“清除"都
没有什么异常，但如果我们使用这个计算器超过半个小时，那么这
个计算器的操作可能无故地失灵了。
检验的过程是找不到这种缺陷的，而调查的过程可能就行。或者，
针对此例的缺陷用内存泄漏静态检查器效果可能更好。
上例的情况就是我想指出的关键点：软件令我们面对许多风险。我
们必须利用很多的技术手段来消除这些风险。因为没有最好的可行
的方法，我不能说去做什么一定能行，但我能说我们到目前为止都
在Socialtext里做了什么，为什么我们喜欢这些可行的方法，为什么
我们认为这些可行的测试方法很美好。
我们采用的方法是把测试摆在风险管理的位置。公司在测试上投入
时间和资金，以期得到所需要的信息，这种信息能减少差质量软件
发布的儿率。风险管理有一整套的商业法则，保险公司每大都在实
践风险管理法则。测试刚好符合风险管理的定义。我们将在讨论
Socialtext的时候重温风险管理，而现在我们先来谈一谈美。
[1]我是“软件测试的上下文驱动学院"的一员，这是由持有相似观点
（包括“没有最佳实践”）的人组成的社区。参见http://www.context-
driven-testing.com/。
[2]其实我的同事和朋发MichaelBolton第一个注意到了这个区别，我
觉得他有资格获此荣誉。
测试者站在舞台上；美丽登场，站对位置
你还没有怀疑吗？如果你有了怀疑，那不奇怪。对于测试，很多人
的印象都是简单的触屏和点击，或者是按照无聊的文本进行：测试
工作是简单的，是由那些不太动脑筋，至少是那些不用花多少钱就
能雇到的人来做的工作。如果你也这么想那就错了。这样的工作不
2035
---
## Page 2037
是真正的调查，而是检验。不管怎么说检验确实不美，而美感太重
要了。
我来解释给你听。
在我真正作为软件开发员的时候，我常常就软件的开发方法与同事
及上级产生分歧。我觉得那些分歧是生长在东海岸和中部人的分
歧，或者是由于我的专业不是计算机科学而是数学的分歧回。由于
年轻和不安，我还特意利用晚上时间重新回到学校拿到了计算机信
息系统专业的硕士学位，以此“弥补"分歧。尽管如此，在并发软件
上我还是和他们有文化上的差异。我要单纯的软件开发，而我的同
事们则要软件开发得“合适”、“有扩展性”或“完整”。
有一大我醒悟过来：我的计算机科学专业的同事们从没有学过美
学，也感受不到美学的与生俱来的好处。我虽然可能错过了计算机
科学专业的几门课程，但他们也错过了我从数学专业中学到的美学