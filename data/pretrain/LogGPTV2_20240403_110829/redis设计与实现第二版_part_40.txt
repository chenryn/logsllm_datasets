127.0.0.1:7000> CLUSTER KEYSLOT "date"
reply_client(slot)
普   将槽号返回给客户端
slot = slot_number(key)
#计算槽号
return CRCi6(key)
16383
---
## Page 265
错误，指引客户端转向至正在负责槽的节点。
17.3.3
当节点发现键所在的槽并非由自已负责处理的时候，节点就会向客户端返回一个 MOVED
口当客户端向节点 7000 发送命令 SET date
理槽6257的节点7001。
向客户端返回错误MOVED6257127.0.0.1：7001，指引节点转向至正在负责处
的clusterNode结构，并根据结构中记录的IP地址127.0.0.1和端口号7001
点 7000负责处理，于是节点7000访问clusterState.slots[6257］所指向
于clusterState.myself，结果发现两者并不相等：这说明槽 6257并非由节
直接执行这个 SET命令，并将结果返回给发送命令的客户端。
clusterState.myself，这说明槽2022正是由节点7000负资，于是节点7000
计算出键date属于槽2022，然后检查得出clusterState.slots[2022］等于
MOVED 
查找负费槽6257的节点-→
查找负费槽 2022 的节点--→
clusterState
slots
myself
错误
图17-19节点 7000的 clusterState 结构
clusterNode*[16384]
16383
10002
10001
10000
6257
5002
5001
5000
2022
...
··
“2013-12-31”的时候，节点首先
"127.0.0.1"
clusterNode
"127.0.0.1"
clusterNode
port
.··
7001
··
第17章
集
群·261
---
## Page 266
262◆第三部分多机数据库的实现
提供的IP 地址和端口号来连接节点，然后再进行转向。
就是换一个套接字来发送命令。
的过程。
以前面的客户端从节点7000转向至7001的情况作为例子：
址和端口号，转向至负责处理槽 slot的节点，并向该节点重新发送之前想要执行的命令。
口号。例如错误：
如果客户端尚未与想要转向的节点创建套接字连接，那么客户端会先根据MOVED 错误
一个集群客户端通常会与集群中的多个节点创建套接字连接，而所谓的节点转向实际上
而图17-21则展示了客户端根据 MOVED 错误，转向至节点7001，并重新发送 SET命令
图17-20展示了客户端向节点7000发送SET命令，并获得 MOVED 错误的过程。
当客户端接收到节点返回的MOVED 错误时，客户端会根据 MOVED 错误中提供的IP地
MOVED 10086 127.0.0.1:7002
其中 slot 为键所在的槽，而 ip 和 port 则是负责处理槽 slot 的节点的 IP 地址和端
127.0.0.1:7001>
ui1eaA mau Addeu. 6sw 1a9  :
MOVED错误的格式为：
> Redirected to slot [6257] 1ocated at 127.0.0.1:7001
图 17-21客户端根据 MOVED 错误的指示转向至节点 7001
客户端
客户端
图17-20节点 7000向客户端返回 MOVED 错误
MOVED 6257 127.0.0.1:7001
SET msg "happy new year!"
SET msg "happy new year!"
OK
转向
节点7000
节点7001
---
## Page 267
slots_to_keys 跳跃表来保存槽和键之间的关系:
希键"book"，以及字符串键“date"，其中键"lst"和键"book"带有过期时间。
Redis 服务器则没有这一限制。
器保存键值对以及键值对过期时间的方式完全相同。
17.3.4节点数据库的实现
集群节点保存键值对以及键值对过期时间的方式，与第9章里面介绍的单机 Redis 服务
直接将MOVED 错误直接打印出来，而不会进行自动转向。
7000发送相同的命令，那么MOVED错误就会被客户端打印出来：
节点和单机服务器在数据库方面的一个区别是，节点只能使用0号数据库，而单机
节点返回的 MOVED 错误的：
误，而是根据MOVED 错误自动进行节点转向，并打印出转向信息，所以我们是看不见
另外，除了将键值对保存在数据库里面之外，节点还会用clusterState 结构中的
举个例子，图17-22展示了节点7000的数据库状态，数据库中包含列表键"1st"，哈
) clusterState;
typedef struct clusterstate {
这是因为单机模式的 redis-cli 客户端不清楚 MOVED 错误的作用，所以它只会
127.0.0.1:7000>
127.0.0.l:7000> SET msg "happy new year!"
$ redis-cli-p7000 #单机模式
但是，如果我们使用单机（stand alone）模式的 redis-cli 客户端，再次向节点
$ redis-cli-c -p 7000 #集群模式
(error) MoVED 6257 127.0.0.1:7001
127.0.0.1:7001>
集群模式的redis-cli 客户端在接收到 MOVED 错误时，并不会打印出 MOVED 错
>
...
zskiplist *slots_to_keys;
！.··
被隐藏的 MOVED 错误 
第17章 集
群263
---
## Page 268
264·第三部分多机数据库的实现
命令可以返回最多count 个属于槽 slot 的数据库键，而这个命令就是通
属于某个或某些槽的所有数据库键进行批量操作，例如命令CLUSTERGETKEYSINSLOT
to_keys 跳跃表：
（member）都是一个数据库键：
expires
redisDb
dict
通过在 slots_to_keys 跳跃表中记录各个数据库键所属的槽，节点可以很方便地对
口键"1st"所在跳跃表节点的分值为3347.0，这表示键"1st"所在的槽为 3347。
键“book"所在跳跃表节点的分值为1337.0，这表示键“book"所在的槽为1337。
举个例子，对于图17-22所示的数据库，节点7000将创建类似图17-23 所示的 slots
口 当节点删除数据库中的某个键值对时，节点就会在 slots_to_keys 跳跃表解除被
口每当节点往数据库中添加一个新的键值对时，节点就会将这个键以及键的槽号关联
slots_to_keys 跳跃表每个节点的分值（score）都是一个槽号，而每个节点的成员
··
键"date”所在跳跃表节点的分值为2022.0，这表示键“date"所在的槽为2022。
删除键与槽号的关联。
到slots_to_keys 跳跃表。
Stringobject
Stringobject
Stringobject
Stringobject
"date"
"book"
"lst"
dict
"lst"
dict
图17-22节点7000的数据库
1388556000000
1385877600000
long long
 long long
"2013-12-31"
Stringobject
Stringobject
Stringobject
Stringobject
Stringobject
"publisher'
Hashobject
"author"
"name"
"Josiah L. Carlson"
"Redis in Action"
Stringobject
Stringobject
Stringobject
Listobject
"Manning"
Stringobject
"c"
---
## Page 269
7003。
以向这个集群添加—个IP为127.0.0.1，端口号为7003的节点（后面简称节点7003）：
源节点和目标节点都可以继续处理命令请求。
派给另一个节点（目标节点），并且相关槽所属的键值对也会从源节点被移动到目标节点。
17.4
重新分片操作可以在线（online）进行，在重新分片的过程中，集群不需要下线，并且
举个例子，对于之前提到的，包含7000、7001、7002三个节点的集群来说，我们可
Redis 集群的重新分片操作可以将任意数量已经指派给某个节点（源节点）的槽改为指
length
level
header
51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master -0 0 0 connected 0-5000
以下是重新分片操作执行之后，
然后通过重新分片操作，将原本指派给节点7002的槽15001至16383改为指派给节点
04579925484ce537a3410d7ce97bd2e260c459a2 127.0.0.1:7003 master - 0 1388635782330
68eef66df23420a5862208ef5bla7005b806f2ff 127.0.0.1:7001 master -
127.0.0.1:7000> CLUSTER MEET 127.0.0.1 7003
tail
68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001
127.0.0.1:7000> cluster nodes
9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388635782831
51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0. 0 0 connected 0-5000
$ redis-cli -c -p 7000
 0 connected 10001-15000
0 connected 5001-10000
0connected
0 connected 5001-10000
重新分片
NULL
L1
L2
L32
G
图17-23 节点7000 的 slots_to_keys 跳跃表
Stringobject
→NULL
"book"
1337.0
BW
L1
5
L4
心
节点的槽分配状态：
Stringobject
"date"
2022.0
BW
2
master -0 1388635782831
Stringobject
3347.0
"lst"
BW
0138863578283
第17章
→NULL
集
?
NULL
NULL
NULL
NULL
群
·265
---
## Page 270
266·第三部分多机数据库的实现
步骤。
最终集群中的所有节点都会知道槽slot已经指派给了目标节点。
命令，将槽 slot 指派给目标节点，这一指派信息会通过消息发送至整个集群,
至目标节点为止。每次迁移键的过程如图17-24 所示。
子地从源节点迁移至目标节点。
O命令，将被选中的键原
获得最多 count 个属于槽 slot 的键值对的键名（key name）。
命令，让源节点准备好将属于槽slot的键值对迁移（migrate）至目标节点。
id>命令，让目标节点准备好从源节点导人（import）属于槽 slot 的键值对。
发送命令来进行重新分片操作。
Redis 提供了进行重新分片所需的所有命令，而 redis-trib 则通过向源节点和目标节点
重新分片的实现原理
6）redis-trib向集群中的任意一个节点发送CLUSTER SETSLOTNODE
5）重复执行步骤3和步骤4，直到源节点保存的所有属于槽slot的键值对都被迁移
4）对于步骤3获得的每个键名，redis-trib 都向源节点发送一个MIGRATE
3）redis-trib向源节点发送CLUSTER GETKEYSINSLOT  命令，
2） redis-trib 对源节点发送 CLUSTER SETSLOT  MIGRATING 
如果重新分片涉及多个槽，那么 redis-trib 将对每个给定的槽分别执行上面给出的
Redis 集群的重新分片操作是由 Redis 的集群管理软件 redis-trib 负责执行的,
图17-25展示了对槽slot进行重新分片的整个过程。
1） redis-trib 对目标节点发送 CLUSTER SETSLOT  IMPORTING  
2)返回最多count个属于槽 slot 的键
向源节点发送一
3)对于每个返回键
1)发送命令
MIGRATE 命令
图 17-24迁移键的过程
源节点
4)根据 MIGRATE 命令的指示
将键迁移至目标节点
目标节点
---
## Page 271
就属于正在被迁移的槽时：
且命令要处理的数据库键恰好
个与数据库键有关的命令，并
点里面。
一部分键值对则保存在目标节
值对保存在源节点里面，而另
况：属于被迁移槽的一部分键
17.5ASK错误
当客户端向源节点发送一
举个例子，假设节点7002正在向节点7003迁移槽16198，这个槽包含“is"和“1ove"
在进行重新分片期间，源节点向目标节点迁移一个槽的过程中，可能会出现这样一种情
图17-26展示了源节点判断是否需要向客户端发送ASK错误的整个过程。
口
源节点会先在自己的数
在导人槽的目标节点，并再次发送之前想要执行的命令。
经被迁移到了目标节点，源节点将向客户端返回一个ASK 错误，指引客户端转向正
相反地，如果源节点没能在自己的数据库里面找到指定的键，那么这个键有可能已
直接执行客户端发送的命令。
键，如果找到的话，就
据库里面查找指定的
图17-25对槽 slot进行重新分片的过程