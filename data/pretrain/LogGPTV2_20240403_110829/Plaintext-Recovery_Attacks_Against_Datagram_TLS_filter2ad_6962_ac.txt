preferred version of our attack. Note that, strictly speaking,
this version of the attack does not build a padding oracle,
but rather considers all possible 256 byte values simultane-
ously.
Even more sophisticated statistical techniques, such as
sequential estimation (as in [2]) or likelihood estimation,
can be used in place of averaging or selecting the minimum
when processing the results of the m trials per byte. How-
ever, these more advanced approaches were not needed in
order to successfully launch our attack. They could be use-
ful in further reducing the amount of data sent or Heartbeat
request messages consumed in an attack.
Finally, we note two further advantages of using an at-
tack without proﬁling. Firstly, the process of proﬁling it-
self will require Heartbeat request messages to be gathered.
Secondly, the attack environment may change over time
during the attack itself, as varying network or server loads
are experienced, for example. The attack without proﬁling
described here automatically adjusts for such changes, at
least if they do not occur within the time taken to recover a
single byte of plaintext.
4.4 Measuring Success Under Budgetary Con-
straints
The attack is such that a byte is successfully decrypted
only if all the preceding bytes in the same block are success-
fully decrypted. Hence, under a reasonable independence
assumption, if the probability of successfully decrypting a
byte is p, then the probability of successfully decrypting a
block of size b will be pb = pb. For AES, b = 16, so for suc-
cessful decryption of a whole block with a reasonable prob-
ability, we need p to be rather close to 1. For example, with
p = 0.99 and b = 16 we have pb = 0.85. The adversary
can tune the attack parameters (l, m, n) so as to increase
the success probability p of the attack and can try to ﬁnd
the optimal combination that results in the highest success
probability. However, in practice, an adversary will have a
limit on, for example, the maximum number of bytes that
he wishes to send in order to recover a byte. As discussed
below, when anti-replay is enabled, Heartbeat request pack-
ets (or their equivalents) will become a precious resource.
Since each train consumes one such packet in this situation,
it may be desirable to increase l, the packet size and n, the
number of packets per train, so as to maximize the ampli-
ﬁcation effect, whilst minimizing m, the number of trains
sent per byte. However, as our later experimental results
will show, simply increasing l and n does not always help,
especially in the case of AES-256.
4.5 Attacks with Anti-Replay Enabled
Attacking DTLS becomes slightly more complex when
anti-replay is enabled. Since the OpenSSL implementation
of DTLS ﬁrst checks the sequence number against the anti-
replay window before doing any cryptographic processing,
the adversary has to take care that all packets sent in trains
do not have sequence numbers that are marked as having
20406080050100150200250DTLSPayloadSizeinBytesTimeinMicrosecondsSHA13DES6436868810081328145620406080050100150200250DTLSPayloadSizeinBytesTimeinMicrosecondsSHA1AES25664368688100813281456previously arrived. Fortunately, the anti-replay window is
only updated if the MAC on a packet is successfully veri-
ﬁed, and all the packets used in the attack will fail the MAC
veriﬁcation (with the exception of the Heartbeat packets), so
the window is not updated as a consequence of these attack
packets.
With anti-replay enabled, each Heartbeat request packet
can be used only once, since its sequence number will be
marked in the window as having been seen once the packet
arrives. Moreover, the adversary has to ensure that the se-
quence number for each Heartbeat request packet used does
fall within (or to the right of) the current anti-replay win-
dow, otherwise the Heartbeat request will be discarded and
no response generated.
Thus Heartbeat request packets become a precious re-
source in the situation where anti-replay is enabled: the at-
tack can only proceed as quickly as they become available.
Hence decryption in this setting may be rather slow and “op-
portunistic” – every time a packet is seen on the wire by the
adversary, a new packet train can be launched and a byte
value tested.
Given these issues,
it is apparent that the adversary
should try to use as few Heartbeat request packets as possi-
ble, which means minimizing m for a given target success
probability p. A further enhancement arises by building
packet trains that test multiple byte values simultaneously.
For example, the adversary could build two sets of m trains,
each train containing 128n packets, with half of the possi-
ble byte values being tested in each train n times each. This
would represent the ﬁrst step in a binary search for the cor-
rect byte value, requiring only 8 steps and therefore 16m
Heartbeat request packets to extract a byte. The number
of Heartbeat requests consumed could be halved again with
initial system proﬁling. In contrast, our basic attack would
consume 256m Heartbeat request packets for the same re-
sult. We have not tested this version of the attack, but our
experience indicates that it would work well whenever us-
ing long packet trains does not degrade performance.
Finally, we recall that packets from any suitable appli-
cation layer protocol could be used in place of Heartbeat
request packets, so long as the corresponding application al-
ways sends a detectable response packet with a predictable
response time. So the success of our attack does not depend
completely on the availability of Heartbeat request packets
in the case where anti-replay is enabled.
5
Implementation and Results for OpenSSL
5.1 Implementation
In our laboratory set-up, we have a client, the adversary
and the targeted system all connected to a 100Mbps Eth-
ernet switch on the same VLAN. The targeted system was
a machine running a single core processor operating at a
speed of 1.87 GHz and having 2 GByte of RAM.
We ran version 1.0.0a of OpenSSL on the client and the
server. We used the built-in OpenSSL utilities for the client8
and the server9, s client and s server respectively.
s client implements a generic client which connects to
a remote host using DTLS, while s server implements a
generic server which listens for connections on a given UDP
port using DTLS. We implemented the Heartbeat Extension
feature by installing the appropriate OpenSSL patch10. We
deactivated anti-replay by directly modifying the OpenSSL
code.
5.2 Results
The results shown in this section reﬂect our speciﬁc
set-up. Of course, the values would change as the set-up
changes – for example, the timings are heavily dependent
on the clock-speed of the processor used on the target sys-
tem. However, the fundamentals of the attack would remain
the same.
5.2.1 Experimentally observed PDFs:
The ﬁgures we discuss hereafter show PDFs observed in
our experiments for different attack parameters and encryp-
tion algorithms.
In all the ﬁgures, the x-axis represents
RTTs while the y-axis represents the probability of observ-
ing these RTTs. In all ﬁgures, outliers have been removed.
Each ﬁgure shows two PDFs, PDF1 (in red) and PDF2 (in
blue), that correspond to having valid and invalid padding
in the packets in the trains, respectively. We recall that l
denotes the DTLS payload size, m denotes the number of
trials per byte, and n denotes the number of DTLS packets
per trial. Figures 2 and 3 show PDFs for n equal to 10 and
varying the value of l, for 3DES and AES-256 respectively.
We note the following:
• It is generally easier to distinguish between the two
PDFs in the case of 3DES.
• Generally, there is an increasing overlap between the
two PDFs as the value of l, the DTLS payload size,
increases. This is more evident in the case of AES-
256.
• In the case of AES-256, increasing l makes the PDFs
much harder to distinguish. The reason for this is that
the adversary spends more time preparing and sending
packets as the packet size increases, while the targeted
system may already have ﬁnished AES decryption and
8http://www.openssl.org/docs/apps/s_client.html
9http://www.openssl.org/docs/apps/s_server.html
10http://sctp.fh-muenster.de/dtls-patches.html
MAC veriﬁcation and be waiting for the next packet.
Thus long packets tend to arrive “late” at the targeted
system.
Figures 4 and 5 show the PDFs for l = 1024 and varying
the value of n, for 3DES and AES respectively. We note the
following:
• In the case of 3DES, increasing the value of n helps
in making the two PDFs more distinguishable. This is
the case with AES-256 when small DTLS payloads are
used.
• With AES, increasing the value of n when using large
DTLS payloads makes the PDFs harder to distinguish.
Figures 6 and 5 show this effect when AES-256 is used
for l = 256 and l = 1024 respectively.
• By appropriately choosing the attack parameters, it is
possible to obtain PDFs that are very easy to distin-
guish. For example, the last graph in Figure 6 shows
the PDFs for AES-256 when l = 256 and n = 160,
where the peaks are separated by more than 500µs
while the distributions are entirely contained within 50
µs of the peaks.
5.2.2 Success Probability:
Table 1 shows the success probability, p, of decrypting a
byte under different attack parameters (l, m, n) when AES-
256 is used. We recall that the success probability for a
block is then given by pb where b is the block length in
bytes.
These tables were obtained using the preferred version of
our attack described in Section 4.3, where no system proﬁl-
ing is used, outliers are removed, and, for each byte, we use
the minimum RTT value from the m values available, and
then select the correct byte as being the one that gives the
maximum amongst these values. Each entry in the tables is
calculated using 100 runs of the attack.
We can clearly see that the probability of success in-
creases as the number of trials, m, increases. Success prob-
abilities p equal to 0.99 or above are easily achieved for
moderate values of l, m and n, making our preferred at-
tack both efﬁcient and highly reliable for these parameter
choices.
Table 2 shows analogous success probabilities for 3DES.
Note however that in these tables, we report ﬁgures for sub-
stantially larger values of l than we did for AES-256. This is
indicative of the fact that our attacks are still quite success-
ful for 3DES even with long payloads, giving an additional
ampliﬁcation opportunity. As further conﬁrmation of the
practicality of our attacks,Table 3 provides success proba-
bilities for AES-256 for l = 192 and various values of m
and n, with the probabilities being based on 1000 runs of
HHHHH
n
l
1
2
5
10
20
50
HHHHH
n
l
1
2
5
10
20
50
HHHHH
n
l
1
2
5
10
20
50
192
0.41
0.32
0.49
0.36
0.34
0.38
192
1.00
0.99
1.00
0.99
1.00
1.00
192
1.00
0.99
1.00
0.99
1.00
1.00
224
0.32
0.40
0.02
0.00
0.05
0.03
224
0.99
1.00
1.00
1.00
1.00
1.00
224
0.99
1.00
1.00
1.00
1.00
1.00
256
0.00
0.00
0.00
0.01
0.02
0.00
256
1.00
1.00
1.00
1.00
1.00
0.98
256
1.00
1.00
1.00
1.00
1.00
0.99
288
0.01
0.01
0.01
0.01
0.01
0.01
288
0.99
0.98
0.98
0.99
0.99
0.95
288
0.99
0.99
0.98
0.99
0.99
0.95
128
0.00
0.02
0.05
0.04
0.01
0.10
160
0.15
0.24
0.08
0.12
0.13
0.33
m = 1
160
0.99
1.00
1.00
1.00
0.99
0.99
128
0.99
0.99
0.99
0.98
0.99
0.99
m = 5
160
0.99
1.00
1.00
1.00
0.99
0.99
128
0.99