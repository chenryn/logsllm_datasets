# PHP字符串格式化特点和漏洞利用点
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## PHP中的格式化字符串函数
在PHP中存在多个字符串格式化函数，分别是`printf()`、`sprintf()`、`vsprintf()`。他们的功能都大同小异。
  * printf, `int printf ( string $format [, mixed $args [, mixed $... ]] )`,直接将格式化的结果输出，返回值是int。
  * sprintf, `string sprintf ( string $format [, mixed $args [, mixed $... ]] )`,返回格式化字符串的结果
  * vsprintf, `string vsprintf ( string $format , array $args )`,与`sprintf()`相似，不同之处在于参数是以数组的方式传入。
三者的功能类似，以下仅以`sprintf()`来说明常规的格式化字符串的方法。
单个参数格式化的方法
    var_dump(sprintf('1%s9','monkey'));         # 格式化字符串。结果是1monkey9
    var_dump(sprintf('1%d9','456'));            # 格式化数字。结果是14569
    var_dump(sprintf("1%10s9",'moneky'));       # 设置格式化字符串的长度为10，如果长度不足10，则以空格代替。结果是1    moneky9(length=12)
    var_dump(sprintf("1%10s9",'many monkeys')); # 设置格式化字符串的长度为10，如果长度超过10，则保持不变。结果是1many monkeys9(length=14)
    var_dump(sprintf("1%'^10s9",'monkey'));     # 设置格式化字符串的长度为10，如果长度不足10，则以^代替。结果是1^^^^monkey9(length=12)
    var_dump(sprintf("1%'^10s9",'monkey'));     # 设置格式化字符串的长度为10，如果长度超过10，则保持不变。结果是1many monkeys9(length=14)
多个参数格式化的方法
    $num = 5;
    $location = 'tree';
    echo sprintf('There are %d monkeys in the %s', $num, $location);            # 位置对应，
    echo sprintf('The %s contains %d monkeys', $location, $num);                # 位置对应
    echo sprintf('The %2$s contains %1$d monkeys', $num, $location);            # 通过%2、%1来申明需要格式化的是第多少个参数，比如%2$s表示的是使用第二个格式化参数即$location进行格式化，同时该参数的类型是字符串类型(s表明了类型)
在格式化中申明的格式化参数类型有几个就说明是存在几个格式化参数，在上面的例子都是两个参数。如果是下方这种:
    echo sprintf('The %s contains %d monkeys', 'tree');                     # 返回结果为False
则会出现`Too few
arguments`，因为存在两个格式化参数`%s`和`%d`但仅仅只是传入了一个变量`tree`导致格式化出错返回结果为False，无法进行格式化。
## 格式化字符串的特性
除了上面的一般用法之外，格式化中的一些怪异的用法常常被人忽略，则这些恰好是漏洞的来源。
###  字符串padding
常规的padding默认采用的是空格方式进行填充，如果需要使用其他的字符进行填充，则需要以`%'[需要填充的字符]10s`格式来表示，如`%'#10s`表示以`#`填充，`%'$10s`表示以`$`填充
    var_dump(sprintf("1%10s9",'monkey'));           # 使用空格进行填充
    var_dump(sprintf("1%'#10s9",'monkey'));         # 使用#填充，结果是 1####monkey9
    var_dump(sprintf("1%'$10s9",'monkey'));         # 使用$填充，结果是 1$$$$monkey9
从上面的例子看到， **在某些情况下单引号在格式化时会被吞掉，而这就有可能会埋下漏洞的隐患。**
###  字符串按位置格式化
按位置格式化字符串的常规用法
    $num = 5;
    $location = 'tree';
    var_dump(sprintf('The %2$s contains %1$d monkeys', $num, $location));
这种制定参数位置的格式化方法会使用到`%2$s`这种格式化的方式表示。其中`%2`表示格式化第二个参数，`$s`表示需要格式化的参数类型是字符串。如下:
    var_dump(sprintf('%1$s-%s', 'monkey'));         # 结果是monkey-monkey
因为`%1$s`表示格式化第一个字符串，而后面的`%s`默认情况下同样格式化的是第一个字符串，所以最终的结果是`monkey-monkey`。如果是:
    var_dump(sprintf('%2$s-%s', 'monkey1','monkey2'));      # 结果是monkey2-monkey1
因为`%2$s`格式化第二个字符串，`%s`格式化第一个字符串。
下面看一些比较奇怪的写法。首先我们需要知道在[sprintf用法](http://php.net/manual/en/function.sprintf.php)中已经说明了可以格式化的类型
如果遇到无法识别的格式化类型呢？如：
    var_dump(sprintf('%1$as', 'monkey'));               # 结果是s
由于在格式化类型中不存在`a`类型，导致格式化失败。此时`%1$a`在格式化字符串时无用就直接舍弃，最后得到的就是`s`。但是如果我们写成：
    var_dump(sprintf('%1$a%s', 'monkey'));             # 结果是monkey
因为`%1$a%s`中`a`为无法识别的类型，则直接舍弃。剩下的`%s`可以继续进行格式化得到`monkey`
**那么结论就是`%1$[格式化类型]`，如果所声明的格式化类型不存在，则`%1$[格式化类型]`会被全部舍弃，留下剩下的字符。**
如果在`$`接上数字呢？如`%1$10s`呢？
    var_dump(sprintf('%1$10s', 'monkey'));             # 结果是'    monkey' (length=10)
此时表示的是格式化字符串的长度，默认使用的是空格进行填充。如果需要使用其他的字符串填充呢？此时格式是`%1$'[需要填充的字符]10s`。
    var_dump(sprintf("%1$'#10s", 'monkey'));           # 结果是 '####monkey' (length=10)
除此之外，还存在一些其他的奇怪的用法，如下：
    var_dump(sprintf("%1$'%s", 'monkey'));            # 得到的结果就是 monkey
    `
按照之前的说法，由于`'`是无法识别的类型，所以`%1$'`会被舍弃，剩余的`%s`进行格式化得到的就是`monkey`。可以发现在这种情况下`'`已经消失了。假设程序经过过滤得到的字符串是`%1$'%s'`,那么就会导致中间的`'`被吞掉，如下：
    var_dump(sprintf("%1$'%s'", 'monkey'));        # 得到的结果是 monkey'
## 吞掉引号
对上面进行一个简单的总结，除了一些不常见的字符串的格式化用法之外，还存在一些吞掉引号的用法。都是处在字符串padding的情况下。
    var_dump(sprintf("1%'#10s9",'monkey'));         # 使用#填充，结果是 1####monkey9
    var_dump(sprintf("%1$'#10s", 'monkey'));           # 结果是 '####monkey' (length=10)
这两种`'`被吞掉的情况都有可能会引起漏洞。
## 漏洞示例
通过一段存在漏洞的代码来说明这种情况
    $value1 = $_GET['value1'];
    $value2 = $_GET['value2'];
    $a = prepare("AND meta_value=%s",$value1);
    $b = prepare("SELECT * FROM table WHERE key=%s $a",$value2);
    function prepare($query,$args) {
        $query = str_replace("'%s'",'%s',$query);