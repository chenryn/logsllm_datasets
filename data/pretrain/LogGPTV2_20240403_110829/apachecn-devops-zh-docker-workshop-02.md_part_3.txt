在本练习中，我们学习了如何使用`Dockerfile`构建自定义 Docker 映像，并从该映像运行 Docker 容器。在下一节中，我们将学习可以在`Dockerfile`中使用的其他 Docker 指令。
# 其他文件指令
在 Dockerfile 中的公共指令一节中，我们讨论了可用于`Dockerfile`的公共指令。在那一节中，我们讨论了`FROM`、`LABEL`、`RUN`、`CMD`和`ENTRYPOINT`指令，以及如何使用它们来创建一个简单的`Dockerfile`。
在本节中，我们将讨论更高级的`Dockerfile`指令。这些指令可用于创建更高级的 Docker 映像。例如，我们可以使用`VOLUME`指令将主机的文件系统绑定到 Docker 容器。这将允许我们保存 Docker 容器生成和使用的数据。另一个例子是`HEALTHCHECK`指令，它允许我们定义健康检查来评估 Docker 容器的健康状态。我们将在本节中研究以下指令:
1.  `ENV`指令
2.  `ARG`指令
3.  `WORKDIR`指令
4.  `COPY`指令
5.  `ADD`指令
6.  `USER`指令
7.  `VOLUME`指令
8.  `EXPOSE`指令
9.  `HEALTHCHECK`指令
10.  `ONBUILD`指令
## 环境指令
`Dockerfile`中的 ENV 指令用于设置环境变量。**应用和进程使用环境变量**来获取进程运行环境的信息。一个例子是`PATH`环境变量，它列出了搜索可执行文件的目录。
环境变量按照以下格式定义为键值对:
```
ENV  
```
PATH 环境变量设置为以下值:
```
$PATH:/usr/local/myapp/bin/
```
因此，可以使用`ENV`指令进行如下设置:
```
ENV PATH $PATH:/usr/local/myapp/bin/
```
我们可以在由空格分隔的同一行中设置多个环境变量。然而，在这种形式中，`key`和`value`应该用等于(`=`)符号分开:
```
ENV = = ...
```
在下面的示例中，配置了两个环境变量。`PATH`环境变量配置为`$PATH:/usr/local/myapp/bin/`值，`VERSION`环境变量配置为`1.0.0`值:
```
ENV PATH=$PATH:/usr/local/myapp/bin/ VERSION=1.0.0
```
一旦用`Dockerfile`中的`ENV`指令设置了环境变量，该变量在所有后续的 Docker 映像层中都可用。这个变量甚至在从这个 Docker 映像启动的 Docker 容器中可用。
在下一节中，我们将研究`ARG`指令。
## ARG 指令
`ARG`指令用于定义用户在构建时可以传递的变量。`ARG`是`Dockerfile`中唯一可以先于`FROM`指令的指令。
用户可以在构建 Docker 映像时使用`--build-arg =`传递值，如下所示:
```
$ docker image build -t : --build-arg = .
```
`ARG`指令的格式如下:
```
ARG 
```
一个`Dockerfile`中可以有多个`ARG`指令，如下所示:
```
ARG USER
ARG VERSION
```
`ARG`指令也可以定义一个可选的默认值。如果在生成时没有传递任何值，将使用此默认值:
```
ARG USER=TestUser
ARG VERSION=1.0.0
```
与`ENV`变量不同，`ARG`变量不能从运行容器中访问。它们仅在构建过程中可用。
在下一个练习中，我们将使用到目前为止获得的知识来使用`Dockerfile`中的`ENV`和`ARG`指令。
## 练习 2.03:在文件中使用 ENV 和 ARG 指令
您的经理要求您创建一个`Dockerfile`，它将使用 ubuntu 作为父映像，但是您应该能够在构建时更改 ubuntu 版本。您还需要指定发布者的名称和应用目录作为 Docker 映像的环境变量。您将使用`Dockerfile`中的`ENV`和`ARG`指令来执行本练习:
1.  使用`mkdir`命令创建一个名为`env-arg-exercise`的新目录:
    ```
    mkdir env-arg-exercise
    ```
2.  使用`cd`命令导航至新创建的`env-arg-exercise`目录:
    ```
    cd env-arg-exercise
    ```
3.  在`env-arg-exercise`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
5.  Add the following content to the `Dockerfile`. Then, save and exit from the `Dockerfile`:
    ```
    # ENV and ARG example
    ARG TAG=latest
    FROM ubuntu:$TAG
    LABEL maintainer=PI:EMAIL 
    ENV PUBLISHER=packt APP_DIR=/usr/local/app/bin
    CMD ["env"]
    ```
    这个`Dockerfile`首先定义了一个名为`TAG`的参数，默认值为最新。下一行是`FROM`指令，它将使用 ubuntu 父映像，其`TAG`变量值与`build`命令一起发送(如果没有值与 build 命令一起发送，则为默认值)。然后，`LABEL`指令为维护者设置值。接下来是`ENV`指令，用值`packt`定义`PUBLISHER`的环境变量，用值`/usr/local/app/bin`定义`APP_DIR`。最后，使用`CMD`指令执行`env`命令，该命令将打印所有环境变量。
6.  Now, build the Docker image:
    ```
    $ docker image build -t env-arg --build-arg TAG=19.04 .
    ```
    请注意用于向构建过程发送`TAG`参数的`env-arg --build-arg TAG=19.04`标志。输出应如下所示:
    ![Figure 2.5: Building the env-arg Docker image ](img/B15021_02_05.jpg)
    图 2.5:构建环境参数文档映像
    请注意，ubuntu 映像的`19.04`标签被用作父映像。这是因为您在构建过程中发送了带有`TAG=19.04`值的`--build-arg flag`。
7.  Now, execute the `docker container run` command to start a new container from the Docker image that you built in the last step:
    ```
    $ docker container run env-arg
    ```
    从输出中我们可以看到，`PUBLISHER`环境变量的值为`packt`，而`APP_DIR`环境变量的值为`/usr/local/app/bin`:
    ![Figure 2.6: Running the env-arg Docker container ](img/B15021_02_06.jpg)
图 2.6:运行环境参数 Docker 容器
在本练习中，我们使用`ENV`指令为 Docker 映像定义了环境变量。我们还体验了如何在 Docker 映像构建期间使用`ARG`指令来传递值。在下一节中，我们将介绍`WORKDIR`指令，该指令可用于定义 Docker 容器的当前工作目录。
## 工作目录指令
`WORKDIR`指令用于指定 Docker 容器的当前工作目录。任何后续的`ADD`、`CMD`、`COPY`、`ENTRYPOINT`和`RUN`指令都将在该目录中执行。`WORKDIR`指令的格式如下:
```
WORKDIR /path/to/workdir
```
如果指定的目录不存在，Docker 将创建该目录并使其成为当前工作目录，这意味着该指令隐式执行`mkdir`和`cd`命令。
`Dockerfile`中可以有多个`WORKDIR`指令。如果在后续的`WORKDIR`指令中提供了相对路径，该路径将相对于之前的`WORKDIR`指令设置的工作目录:
```
WORKDIR /one
WORKDIR two
WORKDIR three
RUN pwd
```
在前面的例子中，我们使用`Dockerfile`末尾的`pwd`命令来打印当前的工作目录。`pwd`命令的输出将是`/one/two/three`。
在下一节中，我们将讨论用于将文件从本地文件系统复制到 Docker 映像文件系统的`COPY`指令。
## 复制指令
在 Docker 映像构建过程中，我们可能需要将文件从本地文件系统复制到 Docker 映像文件系统。这些文件可以是源代码文件(例如，JavaScript 文件)、配置文件(例如，属性文件)或工件(例如，JAR 文件)。`COPY`指令可用于在构建过程中将文件和文件夹从本地文件系统复制到 Docker 映像。这个指令有两个参数。第一个是本地文件系统的源路径，第二个是映像文件系统的目标路径:
```
COPY  
```
在下面的例子中，我们使用`COPY`指令将`index.html`文件从本地文件系统复制到 Docker 映像的`/var/www/html/`目录中:
```
COPY index.html /var/www/html/index.html
```
还可以指定通配符来复制与给定模式匹配的所有文件。以下示例将把扩展名为`.html`的所有文件从当前目录复制到 Docker 映像的`/var/www/html/`目录:
```
COPY *.html /var/www/html/
```
除了复制文件之外，`--chown`标志还可以与`COPY`指令一起使用，以指定文件的用户和组所有权:
```
COPY --chown=myuser:mygroup *.html /var/www/html/
```
在上例中，除了将所有 HTML 文件从当前目录复制到`/var/www/html/`目录外，`--chown`标志用于设置文件所有权，用户为`myuser`，组为`mygroup`:
注意
`--chown`标志仅在 Docker 及以上版本支持。对于 17.09 以下的 Docker 版本，您需要在`COPY`命令之后运行`chown`命令来更改文件所有权。
在下一节中，我们将看看`ADD`指令。
## 添加指令
`ADD`指令也类似于`COPY`指令，格式如下:
```
ADD  
```
然而，除了`COPY`指令提供的功能之外，`ADD`指令还允许我们使用网址作为``参数:
```
ADD http://sample.com/test.txt /tmp/test.txt
```
在前面的例子中，`ADD`指令将从`http://sample.com`下载`test.txt`文件，并将该文件复制到 Docker 映像文件系统的`/tmp`目录。
`ADD`指令的另一个特点是自动提取压缩文件。如果我们将压缩文件(gzip、bzip2、tar 等)添加到``参数中，`ADD`指令将提取归档文件并将内容复制到映像文件系统中。
假设我们有一个名为`html.tar.gz`的压缩文件，其中包含`index.html`和`contact.html`文件。以下命令将提取`html.tar.gz`文件并将`index.html`和`contact.html`文件复制到`/var/www/html`目录:
```
ADD html.tar.gz /var/www/html
```
由于`COPY`和`ADD`指令提供几乎相同的功能，建议始终使用`COPY`指令，除非您需要`ADD`指令提供的附加功能(从网址添加或提取压缩文件)。这是因为`ADD`指令提供了额外的功能，如果使用不当，这些功能可能会出现不可预测的行为(例如，当您想要提取时复制文件，或者当您想要复制时提取文件)。
在下一个练习中，我们将使用`WORKDIR`、`COPY`和`ADD`指令将文件复制到 Docker 映像中。
## 练习 2.04:在文档中使用工作目录、复制和添加指令
在本练习中，您将把您的自定义 HTML 文件部署到 Apache 网络服务器上。您将使用 Ubuntu 作为基础映像，并在其上安装 Apache。然后，您将把您的自定义 index.html 文件复制到 Docker 映像中，并下载 Docker 徽标(从 https://www.docker.com 网站)与自定义 index.html 文件一起使用:
1.  使用`mkdir`命令创建一个名为`workdir-copy-add-exercise`的新目录:
    ```
    mkdir workdir-copy-add-exercise
    ```
2.  导航至新创建的`workdir-copy-add-exercise`目录:
    ```
    cd workdir-copy-add-exercise
    ```
3.  在`workdir-copy-add-exercise`目录下，创建一个名为`index.html`的文件。该文件将在构建期间复制到 Docker 映像中:
    ```
    touch index.html 