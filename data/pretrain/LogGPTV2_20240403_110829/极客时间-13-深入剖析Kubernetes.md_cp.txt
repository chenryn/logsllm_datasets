# 3. 看得见、摸得着、能落地的"云原生"自从 CNCF社区迅速崛起以来，"云原生"三个字就成了各大云厂商竞相角逐的一个关键词。不过，相比于Kubernetes 项目和容器技术实实在在的发展和落地过程，云原生（CloudNative）的概念却长期以来"曲高和寡"，让人很难说出个所以然来。其实，"云原生"的本质，不是简单对 Kubernetes 生态体系的一个指代。"云原生"**刻画出的，是一个使用户能低心智负担的、敏捷的，以可扩展、可复制的方式，最大化利用"云"的能力、发挥"云"的价值的一条最佳路径**。而这其中，**"不可变基础设施"**是"云原生"的实践基础（这也是容器技术的核心价值）；而Kubernetes、Prometheus、Envoy 等 **CNCF核心项目，则可以认为是这个路径落地的最佳实践**。这套理论体系的发展过程，与CNCF 基金会创立的初衷和云原生生态的发展历程是完全一致的。也正是伴随着这样的发展过程，云原生对于它的使用者的意义，在 2019年之后已经变得非常清晰：**是否采用云原生技术体系，实际上已经成为了一个关系到是不是要最大化"云"的价值、是不是要在"云"上赢取最广泛用户群体的一个关键取舍**。这涉及到的，是关系到整个组织的发展、招聘、产品形态等一系列核心问题，而绝非一个单纯的技术决定。明白了这一层道理，在 2019年，我们已经不难看到，国内最顶尖的技术公司们，都已经开始在云原生技术框架下发起了实实在在的技术体系升级与落地的"战役"。显然，大家都已经注意到，**相比于纠结于"云原生到底是什么"这样意识形态话题，抓紧时间和机遇将Kubernetes及其周边核心技术生态在组织中生长起来，并借此机会完成自身基础技术体系的转型与升级，才是这些体量庞大的技术巨人赶上这次云计算浪潮的不二法宝**。在这个背景下，所谓"云原生"体系在这些公司的落地，只是这个激动人心的技术革命背后的一个附加值而已。而在"云原生"这个关键词的含义不断清晰的过程中，我们一定要再次强调：**云原生不等于CNCF，更不等于 Kubernetes**。云原生固然源自于 Kubernetes技术生态和理念，**但也必然是一个超越 CNCF 和 Kubernetes存在的一个全集**。它被创立的目的和始终在坚持探索的方向，**是使用户能够最大化利用"云"的能力、发挥"云"的价值，而不是在此过程中构建一个又一个不可复制、不可扩展的"巨型烟囱"。**所以说，云原生这个词语的准确定义，是围绕着 Kubernetes技术生态为核心的，但也一定是一个伴随着 CNCF 社区和 Kubernetes项目不断演进而日趋完善的一个动态过程。而更为重要的是，**在这次以"云"为关键词的技术革命当中，我们每一个人都有可能成为"云原生"的一个重要的定义者。**![](Images/e870b7df0db49509e735e6becd4a9a9a.png){savepage-src="https://static001.geekbang.org/resource/image/96/25/96ef8576a26f5e6266c422c0d6519725.jpg"}
# 结束语 \| Kubernetes：赢开发者赢天下你好，我是张磊。在本专栏一开始，我用了大量的笔墨和篇幅和你探讨了这样一个话题：Kubernetes为什么会赢？而在当时的讨论中，我为你下了这样一个结论：Kubernetes项目之所以能赢，最重要的原因在于它争取到了云计算生态里的绝大多数开发者。不过，相信在那个时候，你可能会对这个结论有所疑惑：大家不都说Kubernetes 是一个运维工具么？怎么就和开发者搭上了关系呢？事实上，Kubernetes项目发展到今天，已经成为了云计算领域中平台层当仁不让的事实标准。但这样的生态地位，并不是一个运维工具或者Devops 项目所能达成的。这里的原因也很容易理解：Kubernetes项目的成功，是成千上万云计算平台上的开发者用脚投票的结果。而在学习完本专栏之后，相信你也应该能够明白，云计算平台上的开发者们所关心的，并不是调度，也不是资源管理，更不是网络或者存储，他们关心的只有一件事，那就是Kubernetes 的 API。这也是为什么，在 Kubernetes 这个项目里，只要是跟 API相关的事情，那就都是大事儿；只要是想要在这个社区构建影响力的人或者组织，就一定会在API 层面展开角逐。这一层 "API 为王"的思路，早已经深入到了 Kubernetes里每一个 API 对象的每一个字段的设计过程当中。``{=html}所以说，Kubernetes项目的本质其实只有一个，那就是"控制器模式"。这个思想，不仅仅是Kubernetes 项目里每一个组件的"设计模板"，也是 Kubernetes项目能够将开发者们紧紧团结到自己身边的重要原因。作为一个云计算平台的用户，能够用一个YAML文件表达我开发的应用的最终运行状态，并且自动地对我的应用进行运维和管理。这种信赖关系，就是连接Kubernetes 项目和开发者们最重要的纽带。更重要的是，当这个 API趋向于足够稳定和完善的时候，越来越多的开发者会自动汇集到这个 API上来，依托它所提供的能力构建出一个全新的生态。事实上，在云计算发展的历史上，像这样一个围绕一个 API创建出一个"新世界"的例子，已经出现过了一次，这正是 AWS和它庞大的开发者生态的故事。而这一次 Kubernetes 项目的巨大成功，其实就是AWS 故事的另一个版本而已。只不过，相比于 AWS作为基础设施层提供运维和资源抽象标准的故事，Kubernetes生态终于把触角触碰到了应用开发者的边界，使得应用的开发者可以有能力去关心自己开发的应用的运行状态和运维方法，实现了经典PaaS 项目很多年前就已经提出、但却始终没能达成的美好愿景。这也是为什么我在本专栏里一再强调，Kubernetes项目里最重要的，是它的"容器设计模式"，是它的 API 对象，是它的 API编程范式。这些，都是未来云计算时代的每一个开发者需要融会贯通、融化到自己开发基因里的关键所在。也只有这样，作为一个开发者，你才能够开发和构建出符合未来云计算形态的应用。而更重要的是，也只有这样，你才能够借助云计算的力量，让自己的应用真正产生价值。而通过本专栏的讲解，我希望你能够真正理解 Kubernetes API背后的设计思想，能够领悟 Kubernetes项目为了赢得开发者信赖的"煞费苦心"。更重要的是，当你带着这种"觉悟"再去理解和学习Kubernetes调度、网络、存储、资源管理、容器运行时的设计和实现方法时，才会真正触碰到这些机制隐藏在文档和代码背后的灵魂所在。所以说，**当你不太理解为什么要学习 Kubernetes 项目的时候，或者，你在学习Kubernetes 项目感到困难的时候，不妨想象一下 Kubernetes 就是未来的 Linux操作系统。**在这个云计算以前所未有的速度迅速普及的世界里，Kubernetes项目很快就会像操作系统一样，成为每一个技术从业者必备的基础知识。而现在，你不仅牢牢把握住了这个项目的精髓，也就是声明式API 和控制器模式；掌握了这个 API 独有的编程范式，即 Controller 和Operator；还以此为基础详细地了解了这个项目每一个核心模块和功能的设计与实现方法。那么，对于这个未来云计算时代的操作系统，你还有什么好担心的呢？所以说，《深入剖析 Kubernetes》专栏的结束，其实是你技术生涯全新的开始。我相信你一定能够带着这个"赢开发者赢天下"的启发，在云计算的海洋里继续乘风破浪、一往无前！![](Images/e870b7df0db49509e735e6becd4a9a9a.png){savepage-src="https://static001.geekbang.org/resource/image/96/25/96ef8576a26f5e6266c422c0d6519725.jpg"}