we focus on detecting the extensions that alter the DOM tree
of the visited web page, while in subsections III-C and III-D
we present our new techniques for capturing extensions’ intra-
and inter-communication patterns.
DOM modiﬁcation. In general, the types of modiﬁcations
that are performed by extensions can be attributed to the
following behaviors: (i) adding new nodes in the DOM tree
of the page, (ii) removing nodes from the DOM tree and (iii)
changing the attributes of existing nodes. A special case of the
latter category is the case of extensions that identify speciﬁc
keywords in the text of the page and replace them with other
predeﬁned keywords.
To capture the modiﬁcations performed by each extension
and generate their behavioral ﬁngerprints, we follow a dynamic
analysis process where we aim to “trigger” extensions and
elicit their functionality. To that end, Carnus incorporates a
precisely crafted website under our control (i.e., a honeysite
with honeypages). Speciﬁcally, for each extension we launch
a new instance of the Chrome browser with only this extension
installed and visit our honeysite three times. During these
visits we detect the extension’s modiﬁcations by comparing the
content rendered in the browser with the honeysite’s original
contents and generate the extension’s behavioral ﬁngerprints.
Our system visits the honeysite three times during the ﬁn-
gerprint generation process, as our empirical analysis showed
that this provides a good balance between eliciting different
behaviors by the extensions and not signiﬁcantly increasing
the duration of the dynamic analysis.
Since the honeysite is controlled by us (or in the case of an
actual attack by the attacker), all the modiﬁcations that occur
3
Fig. 1: Overview of Carnus’ two main workﬂows. The extension enumeration phase analyzes extensions and creates signatures
that enable ﬁngerprinting browser extensions. The privacy inference phase analyzes extensions and their respective reviews and
identiﬁes extensions that implicitly reveal sensitive or personal information about the users.
in the page during the attack phase are the result of the user’s
installed extensions and not some other external factor, thus,
allowing the attacker to isolate precisely the changes performed
by extensions. When a user visits our website (i.e., during
the extension detection phase), Carnus captures the contents
of the website, detects the modiﬁcations performed by their
installed extensions, and constructs signatures that describe
these modiﬁcations. Finally, for identifying the user’s installed
extensions, Carnus matches the visiting user’s signatures with
the ﬁngerprints that we have previously stored in our database.
Design of honeysite. As the goal is to trigger as many exten-
sions as possible into performing some form of modiﬁcation,
and generate their ﬁngerprint, our honeysite includes highly-
diverse content. The main challenge we attempt to tackle is
that extensions may exhibit detectable behavior only when
speciﬁc conditions are met. For example, the popular password
manager LastPass inserts an icon in form ﬁelds, but may not
interfere with any other objects in the page. If the honeysite
does not have such a ﬁeld, LastPass will not insert the speciﬁc
icon in the page, hence, Carnus will not be able to detect it. To
avoid such cases, our honeysite includes all available HTML
tags, types, various attributes, ad-fetching scripts (that do not
actually fetch any ads) and media resources of various types.
Since the space of all potential extension triggers is vast,
including all available HTML tags in the honeysite cannot
deﬁnitely offer the coverage we aim to obtain, as our system
will not be able to detect extensions that are only triggered by
speciﬁc keywords being present in the page’s text. As such,
our system tries to identify keywords that need to be included
in our honeysite through the following process: we visit each
extension’s page in the Chrome Web Store twice, once with the
respective extension installed and once without, and compare
the text of the extension’s description across the two visits.1
The observation behind this is that, speciﬁc keywords that
activate such behavior are typically included in the extension’s
1Descriptions can be found at https://chrome.google.com/webstore/detail/UUID
description. Any keywords that are detected when visiting the
description page are included in our honeysite. While this
is a fairly straightforward approach, it has not been used in
prior extension ﬁngerprinting studies and actually enables the
detection of 7.6% of all the extensions that we detect through
honeypage modiﬁcations (22.1% of these also reveal sensitive
information in our inference study).
Fingerprint generation. This methodology is followed for
the generation of the extensions’ behavioral ﬁngerprints that
are stored in our database, as well as the signature of the mod-
iﬁcations that are performed when the user visits the attacker’s
website. In both cases, Carnus treats all the observed modiﬁ-
cations as a sequence of additions and removals (replacement
or modiﬁcation of an existing element can be considered as
a removal of that element and addition of a new one). We
construct the signature by considering all added and removed
terms. That is, a signature consists of two distinct parts: (i) the
set of additions and (ii) the set of removals. For instance, in the
case of an extension that injects a new image in the web page
(i.e., ), the signature will be generated
as the following sets [{""},{}]
that represent the added and removed terms, with the latter
one being an empty set in this case. Similarly, for an extension
that replaces image-1 with image-2, the signature will be
[{"src='image-2.png'>"}, {"src='image-1.png'>"}].
At a high level, after identifying the modiﬁcations of all
extensions and generating their ﬁngerprints, we can enumerate
the extensions of a user by matching the observed modiﬁ-
cations’ signatures with the extensions’ ﬁngerprints that we
already have in our database. That is, when a user visits our
website, we have embedded JavaScript code that identiﬁes
the modiﬁcations during that visit, calculates the signatures
of these modiﬁcations on-the-ﬂy, and compares them with the
ﬁngerprints we have previously generated for all extensions.
However, in practice, there are two important challenges
that can signiﬁcantly affect the behavior-based detection of
extensions and lead to false positives or negatives. First, exten-
4
sions can exhibit different behaviors across different executions
or inject content that contains dynamic parts. Second, multiple
extensions may perform similar modiﬁcations on the website’s
DOM tree, which can affect the accuracy of our system. Next,
we describe the process we have established for solving these
issues and making Carnus more robust.
Dynamic content. As mentioned before, during the ﬁn-
gerprint generation phase we visit the honeysite three times.
This allows us to differentiate between extensions that always
perform the same modiﬁcations and those that exhibit different
but likely similar behaviors. If these visits generate different
behavioral ﬁngerprints, we keep them all
in our database
as the extension’s ﬁngerprints. We estimate how similar or
different these ﬁngerprints are and detect whether some parts
of them include dynamic content. An example of ﬁngerprints
that change with every execution is given by the following:
[{"","timestamp=100"},{}]
[{"","timestamp=200"},{}]
[{"","timestamp=300"},{}]
In the case where the extension injects dynamic content,
the user’s signature will never directly match the extension’s
ﬁngerprint
that we have already generated and stored. To
handle such cases, during the ﬁngerprint generation phase
Carnus tries to identify the static and dynamic parts of highly
similar ﬁngerprints (i.e., that have all but one terms identical,
and a single term partially matching) and re-writes them so
that the dynamic part of the partially matching term is not
included in the ﬁngerprint. In the above example, Carnus will
include the matching part (i.e., “timestamp=”), but it will
omit the value that follows the “=” sign.
The approach we described above for the detection and
omission of ﬁngerprints’ dynamic values is a bit conservative,
as it only considers the case of almost identical ﬁngerprints
that have all their components matching or partially matching.
Since this approach cannot detect all cases of ﬁngerprints with
dynamic parts, we also allow a certain number of components
to mismatch when comparing the ﬁngerprints in the database
with the visiting user’s signature. The number of allowed mis-
matches is determined according to the size of the ﬁngerprints
(i.e., number of terms in the sets of additions and removals).
Since smaller ﬁngerprints tend to be more speciﬁc and also
have a higher risk of a false positive matching, we enforce
a strict policy of no mismatches allowed for ﬁngerprints that
have a size of up to 10 (covering almost 55% of our extensions
as shown in Figure 4). For larger ﬁngerprints, with a size of
10 to 50, which covers an additional ∼26% of the extensions,
Carnus is more lax and allows mismatches of up to 10% of the
ﬁngerprint’s size. For the ﬁnal ∼20% of even larger ﬁngerprints
we allow mismatches of up to 5% of the ﬁngerprint’s size.
Fingerprints overlap. When comparing the extensions’
ﬁngerprints that are stored in our database with the visiting
user’s signature, we essentially compare the two sets of added
and removed terms of every stored extension’s ﬁngerprint with
the respective sets of added and removed terms in the user’s
signature. To have a match both sets of a ﬁngerprint need to
match those of the user’s or a subset of them (i.e., the user
has multiple extensions installed and her signature consists of
the modiﬁcations performed by all of them). However, since
there are extensions that perform similar modiﬁcations, it’s
possible to end up with overlapping ﬁngerprints. In such cases,
the ﬁngerprint of an extension appears to be the same or part
of another extension’s ﬁngerprint. As this can result in false
positives (all overlapping ﬁngerprints will match the user’s
signature), after detecting all the matching ﬁngerprints, we try
to identify and resolve such cases.
In the case where two identical ﬁngerprints match the
user’s signature, our system cannot determine which one of the
extensions the user has installed. Therefore, we consider both
of the extensions unless one of them can be matched by another
technique of our system (i.e., WAR-based or communication-
based). When one of the matched ﬁngerprints appears to be a
subset of another matched ﬁngerprint, Carnus keeps the one
that has the highest number of terms matching the signature.
C. Intra-communication Based Enumeration
For security reasons, browsers separate the execution con-
text of extensions’ background scripts, content scripts, and the
page’s scripts. These scripts run in isolated worlds, preventing
one from accessing variables and functions of the others [1].
However, they can communicate by exchanging messages [3].
Content scripts can communicate with background scripts by
using the runtime.sendMessage API. Background scripts
can use the tabs.sendMessage API to communicate with
content scripts. The messages exchanged between the exten-
sions’ background and content scripts are invisible to the page.
Furthermore, communication between an extension and a
web page can be achieved in two ways: the page’s scripts
can exchange messages with (i) the extension’s background
scripts and (ii) content scripts. For the ﬁrst approach, a page
can use the runtime.sendMessage API to send messages
to the extension’s background, and the extension in turn
uses the runtime.onMessageExternal.addListener API
to receive these messages and send responses back to the
page. However, this communication is only possible when
the extension adds an externally_connectable key in its
manifest ﬁle, specifying the URL patterns of websites that
the extension wants to communicate with. The URL pattern
must contain at least a second-level domain, and wildcard style
patterns like “*” or “*.com” are prohibited. This is to prevent
arbitrary websites from communicating with the extension.
For communication between an extension’s content script
and a web page, the postMessage API can be used (and the
externally_connectable key is not required). As a result
any arbitrary web page can exchange messages with the exten-
sion. In this section, we leverage this kind of message-passing
to create a new extension ﬁngerprinting vector. Differences in
the messages sent by extensions allow Carnus to distinguish
between different extensions that employ message passing for
intra-communication purposes. For instance, Listing 1 shows
parts of the content script of the “MeetMe Dolby Voice 1.1”
extension (UUID: lflnplggpolkcgknahacafilopgngelc),
which sends two messages to the web page.
Fingerprint generation. The approach that we follow for
capturing such messages is similar to the one we implemented
for detecting DOM modiﬁcations and generating behavioral
ﬁngerprints. We include a JavaScript EventListener in our
honeysite to capture and log all message events. Again, we
visit the honeysite three times for each extension to identify
5
function logToJavascriptPlugin (msg) {
window.postMessage({MeetMeDolbyVoiceMsgP1x1:
'log_msg', raw_value:{component:'ChromeExt-FG',
message: msg}},'*');
}
...
logToJavascriptPlugin('Sending \'ping\' message to
window.postMessage({MeetMeDolbyVoiceMsgP1x1:'ping'},
transport layer');
'*');
Listing 1: Code snippets of an extension that sends two
messages to the web page.
[{"MeetMeDolbyVoiceMsgP1x1":"log_msg", "raw_value":{
"component":"ChromeExt-FG", "message":"Sending '
ping' message to transport layer"}},
{"MeetMeDolbyVoiceMsgP1x1":"ping"}]
Listing 2: Example of an intra-communication ﬁngerprint.
whether it always sends the same messages and if they contain
any dynamic values. After removing the dynamic parts, the set
of exchanged messages is used for generating the extension’s
ﬁngerprint. Listing 2 shows the ﬁngerprint that is generated for
the aforementioned extension (that was presented in Listing 1).
Extension enumeration. During the attack phase, when a
user visits our website, our system captures all the messages
sent by the installed extensions and matches them with the
message-based ﬁngerprints that we created during the mes-
sage capturing phase. To capture the exchanged messages,
as described above, we include an EventListener in our
website and log all received messages. After constructing
the user’s message-based signature, Carnus checks which of
the extensions’ ﬁngerprints are a subset of it, indicating that
those extensions are installed in the user’s browser. For this
enumeration technique, 20% mismatches are allowed. Finally,
from the list of detected extensions with this approach, we
remove extensions if their ﬁngerprint is a subset of a ﬁngerprint
of another detected extension.
D. Inter-communication Based Enumeration
Extensions can issue HTTP requests for fetching resources
(i.e., css ﬁles, scripts, images, etc.) from the Internet. For in-
stance, the HTTP requests that are issued by the “source now”
extension (UUID: dimnlaemmkbhojonandnnbogfifjnpno)
are shown in Listing 3. Carnus incorporates a novel extension-
detection module that relies on monitoring all
the HTTP
requests issued by extensions for fetching resources.
For detecting HTTP requests issued by the user’s installed
extensions, we use the Resource Timing API [57], which stores
performance metrics regarding the performance and execution
of web applications and is accessible through JavaScript. Us-
ing the performance.getEntriesByType("resource")
method we can query the list of all resources requested. As a
result, we obtain all resources requested by the web page and
content scripts of extensions installed in the user’s browser.2
Such requests can exhibit unique features, thus rendering them
a useful signal for enumerating installed extensions.
2Resources requested by extensions’ background pages are not included.
6
[{"https://b.alicdn.com/@sc/list-buyer/assets/source
{"https://b.alicdn.com/@sc/list-buyer/lib/js/jquery.
-now/entry/index.js"},
js"}]
Listing 3: Example of an inter-communication ﬁngerprint.
Fingerprint generation. As before, we visit our specially
crafted honeysite and detect and record the URLs of all
requested resources. Since, in practice, the attacker creates and
controls the honeysite, it is trivial to detect any issued requests
that are not part of the page but originate from extensions.
During our dynamic analysis we visit our honeysite three times
to detect whether an extension always fetches the same or
different resources, and accordingly generate the extension’s
ﬁngerprint based on the set of these URLs.
Extension enumeration. When a user visits our website,
we capture all the outgoing HTTP requests in the same fashion
and determine which requests appear due to the installed
extensions. Thus, we generate the signature of the visiting user
as the set of these requests, and try to match the extensions’ ﬁn-
gerprints that we created previously with the user’s signature.
As with the intra-communication technique, we allow 20%
mismatches and remove any detected extensions that have a
ﬁngerprint that is a subset of another detected extension.
Overall, we follow different mismatch thresholds for
the DOM-based and communication-based ﬁngerprints. Since
some DOM-based modiﬁcations are common across different
extensions, and the extensions’ behavior and ﬁngerprint size
vary signiﬁcantly, we found that an adaptive approach based on
the ﬁngerprint size is more effective. For communication-based