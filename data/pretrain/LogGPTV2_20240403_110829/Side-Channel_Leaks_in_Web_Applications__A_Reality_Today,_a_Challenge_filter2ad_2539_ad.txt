### Determining Filing Status and Inference of Tax Information

**Filing Status Eligibility:**

The filing status is determined by a state machine, as shown in Figure 6. The following are the possible filing statuses:

1. **Single**
2. **Married Filing Jointly**
3. **Married Filing Separately**
4. **Head of Household**
5. **Qualifying Widow(er)**

Each status is determined through a series of eligibility tests, including:
- **Head of Household Eligibility Test**
- **Exemption Eligibility Test**
- **Social Security Number of Deceased Spouse (if applicable)**

The result of these tests, along with a summary of personal information, determines the final filing status.

**Inference of Family Information:**

The number of children in the family can be inferred by observing how many times the user fills out the child information page. Similarly, whether the spouse has salaries can be inferred from the salary form submissions (W-2 forms). These user actions generate unique web flow vectors.

**Inference of Adjusted Gross Income (AGI):**

AGI is calculated by OnlineTaxA based on data in the Income module. Inferring AGI from the sizes of W-2 or other income forms is challenging due to the high entropy of the input data. Each W-2 form has twenty input boxes, most of which contain variable-length data, making side-channel analysis difficult.

**Stateful Web Application Communication:**

Web applications maintain stateful communication. The inference of user input does not need to occur at the initial data entry but can leverage web flow vectors observed during later state transitions. For tax calculations, the dependencies between AGI and tax deductions/credits provide an intrinsic link. Specifically, the attacker can use the following facts:
1. Many credits and deductions depend on AGI, as specified in tax laws.
2. These dependencies affect state transitions, which can be inferred from traffic patterns.

**Example: Child Credit Eligibility:**

Figure 7 shows the state machine for determining child credit eligibility. When the user reaches the Deductions & Credits entry page, the web flow vector \( X \) is observed. Based on the value of \( b \), the attacker can determine the transition to one of three states: "not eligible for child credit," "partial child credit," or "full child credit." According to IRS-Pub-792:
- A taxpayer can claim up to $1000 per dependent child.
- If AGI is below $110,000 for Married Filing Jointly, the full credit is available.
- For every $1000 in AGI above $110,000, the taxpayer loses $50 in child credit (phase-out rule).

By observing the transitions, the attacker can identify the AGI range: below $110,000, between $110,000 and $150,000, or above $150,000.

**Asymmetric Paths in Other Credits and Deductions:**

Other credits and deductions have asymmetric execution paths. For example, Figure 8 shows the Student Loan Interest deduction. If AGI is higher than $145,000, the user is not eligible, and no further questions are asked. Otherwise, the application requires more information, leading to a longer path of state transitions. This allows an eavesdropper to infer whether the AGI is above $145,000.

**Disclosure of AGI Ranges:**

Figure 9 lists some disclosed AGI ranges for various credits and deductions. These ranges can be inferred from the web flow vectors, providing the attacker with additional private information.

**State Taxes:**

The same attack could apply to state taxes, as many state income tax provisions are also associated with AGI. Further study is needed to explore the extent of information disclosure.

### OnlineInvestA.com: Financial Data Disclosure

**Mutual Fund Page and Fund Allocation Page:**

When a user logs into their OnlineInvestA account, they can view investment holdings, such as mutual funds, stocks, or bonds, in a list. The 12-month price history charts and fund detail pages are displayed. These charts are GIF images, and their sizes can be identified from the packet size of the server's response.

**Leaking Investment Secrets:**

The price history charts and fund detail pages are publicly accessible. Since the choices of mutual funds have low entropy and the sizes of the charts and detail pages are distinct, the funds that the user invests in can be identified by comparing the sizes of the packets received with publicly obtained sizes.

**Inferring Fund Allocation:**

To infer the fund allocation, we assume the user invests in 3 funds. The pie chart image dimensions are 136×136, with 380 pixels on the circumference. The portions of two funds, denoted by \( \alpha \) and \( \omega \), have 380 possible values each. By conservatively adopting a 0.25% increment, we get 400 values for each fund, resulting in 79,401 possible charts. The sizes of the charts vary within a range of 200 bytes, with a density over 385.

**Algorithm for Inferring Pie Charts:**

The pie chart's evolution can be viewed as state transitions over multiple days, driven by daily market inputs. The algorithm parameters include:
- `allSizes(α, ω)`: An array of image sizes for the 79,401 pie charts.
- `price(fund, day)`: Prices of the invested mutual funds every day.
- `size(day)`: Image size of the pie chart observed by the attacker.

The algorithm initializes the ambiguity set `AgtySet` based on the first day's image size. For each subsequent day, the price change is applied to every pie chart in the set, and those that do not match the day's image size are dropped, gradually reducing `AgtySet`.

```python
AgtySet = { (α, ω) | allSizes(α, ω) == size(1) }
for d in range(2, len(AgtySet) > 1):
    AgtySet' = { (α, ω) | ( (α, ω) ∈ AgtySet ) and (size(d) == allSizes(α, ω)) }
    AgtySet = AgtySet'
```

This process continues until the ambiguity set is reduced to a single, identifiable pie chart.