Mark Vincent Yason（IBM X-Force Advanced Research） **译：xd0ol1（知道创宇404实验室）**
原文链接：
### 目录
  * 0 摘要
  * 1 引言
  * 2 概述
    * 2.1 攻击面及其防护简介
    * 2.2 初窥：EdgeHTML和MSHTML的比对
  * 3 漏洞利用攻击面
    * 3.1 标记/样式的解析
    * 3.2 图像的解码
    * 3.3 音频/视频的解码
    * 3.4 字体渲染
    * 3.5 DOM API
    * 3.6 FLASH和PDF渲染器
    * 3.7 分析与总结：漏洞利用攻击面
  * 4 漏洞利用防护措施
    * 4.1 64位、ASLR、DEP和APPCONTAINER保护
    * 4.2 栈缓冲区安全检查(/GS)
    * 4.3 执行流保护(CFG)
    * 4.4 虚表保护(VTGUARD)
    * 4.5 内存垃圾回收(MEMGC)
    * 4.6 分析与总结：漏洞利用防护措施
  * 5 结论
### 0 摘要
EdgeHTML是Windows 10中引入的下一代网页浏览器（代号Spartan）所用的新渲染引擎，因其使用广泛 -涵盖移动端到PC端，故理解它的攻击面和相应防护措施是很重要的。
在本文中，我们将讨论EdgeHTML的攻击面并对各攻击维度进行枚举，同时，我们还会阐述一种用于比较EdgeHTML和MSHTML的方法，以此了解fork过程中所发生的变化，当然更为重要的是发掘可能被攻击的新特性和新增内部函数。最后，我们将讨论相关的漏洞利用防护措施，即它们是如何防御特定类型漏洞的，此外，还会讨论那些目前仍然适用的绕过技术。
### 1 引言
EdgeHTML[1, 2]是微软Edge浏览器（早前代号为Project Spartan）中新引入的渲染引擎，它是目前Internet
Explorer中在用的Trident（MSHTML）渲染引擎的一个fork，主要为了支持现有的Web标准以及删除其中陈旧的代码。
据估计[3]fork过程中大约有超过22万行代码被删除，并重新添加了大约30万行代码用于程序互操作的修缮与新功能的实现。站在安全研究的角度看，理解这些变化所带来的影响，换言之渲染引擎在攻击面上的变化，是既有趣而又重要的
- 新的攻击维度是什么？攻击者先前使用的一些方式还有效吗？另一个需要重点理解的方面是新渲染引擎应对攻击时的防护措施 -漏洞利用的保护策略是否有变化？默认设置下与MSHTML相比攻击者进行利用的难度有多大？回答这些基本问题正是本文的目的所在。
接下去的内容分为三大块。第一部分（概述）将简要介绍漏洞利用的攻击面和防护措施，后面还会再进行深入的探讨，其中给出的“EdgeHTML攻击面及其防护”示意图可作为本文余下篇幅的参考，此外，这部分还讨论了我在早前研究过程中用于比对EdgeHTML和MSHTML的方法。第二部分（漏洞利用攻击面）我们将深入分析组成EdgeHTML攻击面的那些不同攻击维度，并指出从MSHTML到EdgeHTML后重要攻击维度的变化情况。而在最后一部分（漏洞利用防护措施）我们将讨论不同的保护策略，它们都有助于增大EdgeHTML引擎上进行漏洞利用的难度和代价。
另外，本文的分析是基于64位Windows 10 build
10240系统中的Edge浏览器展开的（edgehtml.dll版本号为11.0.10240.16384）。
### 2 概述
在深入解读EdgeHTML引擎的攻击面与防护措施相关细节前，本节先来做个简要的介绍，同时本节还将讨论EdgeHTML和MSHTML的比较方法，这能帮助我们找出代码中的主要变化。
#### 2.1 攻击面及其防护简介
EdgeHTML引擎模块（%System32%\edgehtml.dll）负责解析和渲染网页中各种潜在的恶意内容，它属于Edge浏览器的内容处理单元（MicrosoftEdgeCP.exe），该单元是一个64位的AppContainer沙箱进程。
这里的攻击面图示给出了EdgeHTML引擎所接受的不同输入类型以及负责处理它们的各EdgeHTML类，注意这些类只是相应解析或处理过程的初始入口，其中一些可能还需要借助额外的EdgeHTML类。此外，图示还列出了EdgeHTML类用于处理输入时所依赖的函数库。
对于HTML，EdgeHTML会使用内部的解析器来处理标记，而对基于XML的标记（XHTML，SVG，XML），引擎会额外使用XmlLite进行解析，且如果标记中有引用XSL样式表，那么引擎会首先通过MSXML6对XML进行转换，然后才将输出内容交给标记处理单元，至于CSS的解析同样也由内部解析器处理。对于图像的解码，EdgeHTML主要依赖于Windows
Imaging Component (WIC)，而对于音频/视频内容的解码，EdgeHTML则主要依赖Media Foundation
(MF)，同时，用于音频/视频字幕的计时文本轨道文件是由EdgeHTML的内部解析器负责处理的，当然这其中还需要借助XmlLite。而字体渲染则会通过DirectWrite进行处理。另外，由标记标签的解析或经由动态创建所生成的DOM对象会通过DOM
API暴露出来，其中一些DOM对象可能需要依赖相应函数库来实现它们的功能。此外，EdgeHTML引擎在默认情况下还可实例化内置或预安装的渲染器 -例如，用于处理PDF内容的WinRT PDF渲染器，以及用于处理Flash内容的Adobe Flash Player程序。
EdgeHTML渲染引擎所处的64位内容处理进程中用到了多种漏洞利用的防护措施，其中就包括了ASLR保护（高熵且强制启用ASLR）、DEP保护和AppContainer进程隔离保护。并且EdgeHTML及其依赖在编译时均采用了栈缓冲区安全检查保护技术（/GS）和最新引入的执行流保护技术（CFG）。此外，例如虚表保护（VTGuard）以及新的内存垃圾回收机制（MemGC）等额外措施也被专门用于EdgeHTML的防护。
#### 2.2 初窥：EdgeHTML和MSHTML的比对
当我一开始对EdgeHTML进行研究的时候就很想知道从MSHTML到EdgeHTML的fork过程中代码的主要变化是什么。由于类和命名空间能够表征一组相关的代码，而这些代码又反过来对应着程序的某一特性，因此，我尝试的方法是借助IDAPython枚举函数或变量名，然后提取其中的命名空间部分，接着去除那些重复项并对得到的结果进行排序，最后，通过diff工具对得到的MSHTML和EdgeHTML命名空间列表进行比较：
来看一个比对结果的例子，如下EdgeHTML中的删除类表明了引擎在WMF和EMF图像格式支持上的变化（详见3.3小节）：
    -CImgTaskEmf
    -CImgTaskWmf
而从另一比对结果的例子可看出CFastDOM下又新增了命名空间，即通过DOM API导出了新的DOM对象类型（详见3.5小节）：
    +CFastDOM::{…more…}
    +CFastDOM::CXPathEvaluator
    +CFastDOM::CXPathExpression
    +CFastDOM::CXPathNSResolver
    +CFastDOM::CXPathResult
    +CFastDOM::CXSLTProcessor
最后，再看一个有意思的比对结果，如下表明其中的一些代码是从Blink渲染引擎[4,5]（Blink是从WebKit的WebCore部分fork来的，大部分的命名空间已从“WebCore”重命名为“blink”）移植过来的：
    +blink::WebThread
    +WebCore::AnalyserNode
    +WebCore::AudioArray
    +WebCore::AudioBasicInspectorNode
    +WebCore::Audio{…more…}
进一步分析可知这部分移植代码主要用于EdgeHTML引擎中对Web音频的支持。
另外，除了用于比较命名空间，这个基本的方法还可用于函数名、类方法名（以识别新的或移除的类功能）、字符串（可给出新功能的描述 -例如：日志字符串）、导入表（以识别新的依赖库、用到的特定API）和导出表的比对。
使用此方法时需要留意命名空间被重命名的情况，这会导致比对结果中命名空间的添加及删除，因此需要做进一步的验证，该方法还要求相关的符号文件是可用的。此外，二进制的比对[7]则是识别两个二进制文件间差异的另一选择。
### 3 漏洞利用攻击面
在本节，我们将列举EdgeHTML引擎所处理的不同输入以及与此相关的代码接口。需要注意的是给出的EdgeHTML类仅是解析或处理时的初始入口点，其中一些可能还依赖额外的类来进行处理，获取这些类的目的在于当我们需要了解引擎是如何处理特定的输入类型时可借助它们来设置断点。例如，若要了解基于XML的标记其预解析时的工作原理，则可通过以下方式设置CXmlPre类中的断点：
    (WinDbg)> bm edgehtml!CXmlPre::*
此外，如果引擎依赖其它函数库来处理特定的输入类型，那么此函数库和用到的特定接口也会被列出来。
#### 3.1 标记/样式的解析
渲染引擎的主要任务之一是处理标记和样式，对于HTML和CSS，EdgeHTML引擎依靠其内部类进行解析，而对基于XML的标记，引擎则借助XmlLite
[8]和MSXML6 [9]进行解析：
EdgeHTML分两个阶段来处理标记，从CHtmPre::Exec()或CXmlPre::Exec()开始的预解析阶段涉及到标记的初始解析、将解析的标签写入标签流以及开始下载引用资源（如果可用
- 比如图像和CSS文件），从CHtmPost::Exec()开始的后解析阶段则从标签流中获取标签，如果需要可对标签执行进一步解析，并最终创建DOM对象。
而通过调用xmllite!CreateXmlReader()函数实例化的IXmlReader接口会被CXmlPre作为解析器用于预解析基于XML的标记，同时，当检测到XML文件中有引用XSL样式表时，此接口也会被CBaseXSLTFilter用作XML解析。另外，MSXML6的IXMLDOMDocument接口会被CBaseXSLTFilter用于转换引用了XSL样式表的XML文件。
引擎中一个重要的变化是对于二进制行为的支持[10]，包括删除内置的VML。基于VML的（VGX.DLL）漏洞[11]是很严重的，因其虽然过时，但在IE11/MSHTML下仍然可以默认使用。
预计随着时间的推移，渲染引擎对标记/样式的处理，特别是CSS和HTML的解析会有所更新，因为届时将会有新的Web标准需要新的HTML标签、HTML属性、CSS属性等来支持。与此相关的一个较有名0day例子是MSHTML
CSS递归导入漏洞[12]。
#### 3.2 图像的解码
图像渲染是EdgeHTML引擎的另一基本任务，其中图像文件可通过链接或以HTML标签（如``和``标签）的方式传给引擎。
我们可以通过查看g_rgMimeInfoImg数组来枚举所支持的图像格式，此数组包含指定图像MIME类型的MIMEINFO项以及用于实例化相关图像处理接口的函数。
如下是EdgeHTML支持的图像格式，从Library列可以看出所有的图像都是通过Windows Imaging Component
(WIC)[13]进行处理的（SVG格式则通过3.1小节中描述的标记来处理）：
对于图像的处理，EdgeHTML首先通过CWicGlobals::GetWicImagingFactory()函数实例化WIC的IWICImagingFactory接口，接着再调用IWICImagingFactory::CreateDecoder()函数来为特定的图像格式实例化一个IWICBitmapDecoder接口。
一个有意思的变化是EdgeHTML中对WMF和EMF图像格式的支持被删除了，意味着先前借助GDI库来解析远程WMF和EMF文件的依赖也被移除了，与此相关的远程利用漏洞已经是屡见不鲜了[14,15,16]。
#### 3.3 音频/视频的解码
通过链接或HTML的``和``标签，我们可将任意音频/视频内容交由渲染引擎处理，所支持的音频/视频格式的Mime信息可在`g_rgMimeInfoAudio`和`g_rgMimeInfoVideo`数组中得到。此外，正如下表所示，EdgeHTML中用于处理音频/视频内容的依赖库是Media
Foundation（MF）[17]：
EdgeHTML引擎会借助MFCreateMediaEngine()函数来实例化MF的IMFMediaEngine接口，以此设定媒体源并对播放进行控制。
除了音频/视频文件外，EdgeHTML引擎还会处理计时文本轨道[18]，我们可通过HTML的``标签来指定，引擎中支持的两种文本轨道文件格式如下：
其中，TTML是基于XML的，处理它的EdgeHTML类会借助XmlLite的IXmlReader接口进行解析。
#### 3.4 字体渲染
任意字体都可通过CSS @font-face
规则传给EdgeHTML渲染引擎[19]。而对于字体解析漏洞[20]，特别的，如果能通过浏览器渲染引擎触发的话，那么就可能造成远程利用 -CVE-2011-3402
[21,22]就是这样一个例子，它为GDI中的字体解析漏洞（位于Win32k.sys模块），此漏洞最初被用于0day攻击，后来被集成到浏览器的漏洞利用套件中。
EdgeHTML引擎使用DirectWrite [23]来渲染字体且支持的格式如下：
所需DirectWrite接口的实例化是由CDXResourceDomain::EnsureDXFactories()函数完成的，且引擎会通过CDXEmbeddedFontFace::Initialize()函数检测实际的字体格式，并通过IDWriteFactory::CreateCustomFontFileReference()调用在CDXPrivateFont::Initialize()函数中执行自定义字体的注册。