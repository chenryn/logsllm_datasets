In previous work it was always implicitly assumed that
snifﬁng the network over which the ciphertext is sent is a
comparatively trivial task, and thus that obtaining the key is
sufﬁcient for also recovering the plaintext. We go one step
further and show how our attack can be used to also recover
the plaintext without knowing the ciphertext. Because of
space limitations we will only describe the plaintext recovery
technique given ideal observations of the cache.
As in §III-B we assume that we have a continuous stream
of cache hits/misses, without knowing where one encryption
starts and the next one ends. Further, we assume that the
full key K has already been recovered. We then perform
the following steps to recover the plaintext without knowing
the ciphertext:
• As in §III-B, we consider each of the N possible offsets
in the stream of observations, and treat it as if it was the
beginning of an AES round. As earlier, we use xi, y
i
to denote the ith column of the state matrix X before
and after the round.
• For each possible number of the inner round,
i.e.,
j = 1, . . . , 9, and each column number,
i.e., i =
0, . . . , 3, we now solve the following equation, under
the constraint that x∗
are equal to the observed
values:
i , y∗
i
kj
i = y
i
⊕ M • s(˜xi) .
Enumerating all possibilities shows that this equation
typically has 0 or 1 solutions, where is 0 is dominating.
For each j, we consider all possibly resulting state
matrices, i.e., all possible Xj = (x0, x1, x2, x3).
• For each Xj, we now compute the offset at which
the corresponding encryption started by just subtracting
16(j − 1) from the current offset. Further, we compute
the corresponding plaintext which can easily be done
as the key is already known.
• For each of the resulting plaintexts, we now count its
frequency. At some offset (namely, the correct starting
point of an encryption), the correct plaintext will occur
at least 9 times, whereas all other resulting plaintexts
will be randomly distributed by a similar argument as
in §III-A.
An ad hoc real-world implementation of this approach
takes about 2 minutes to recover the plaintext of a single
encryption, i.e., to reconstruct 16 B of the input. However,
this must be seen as a proof of concept, which leaves
much space for optimization, and which shows that it is
not necessary to know the ciphertext to recover both, the
key and the plaintext.
VI. COUNTERMEASURES
In the following we discuss mitigation strategies against
our attack, which we believe to be practical. They either get
rid of information leakage entirely, or at least limit leakage
to an extent which renders our attack impossible. For an
extensive list of countermeasures against access-driven cache
attacks we refer to [7].
A. Generic Countermeasures
Let us describe two generic countermeasures against
access-based cache attacks, which seem to be reasonably
efﬁcient.
First, the OS could be adapted such that it offers the
possibility of pre-loading certain data each time a certain
process is activated. If, in our case, the lookup table T [x]
would be pre-loaded, a spy process would only see cache
hits, and could not infer any information about the secret
key. However, such a pre-loading mechanism only seems
to be reasonable if the lookup table is sufﬁciently small,
such as 2 kB in our situation. For lookup tables used in
asymmetric cryptography this is often not the case. Also,
the implementation of this feature might require substantial
work on the kernels of current operating systems.
Alternatively, the task scheduler could itself be hardened
against our (and similar) attacks. Namely, one could limit
the minimum time period between two context switches to,
e.g., 500µs. While such a bound is small enough to keep the
system responsive, denial of service attacks on the scheduler
similar to ours would no longer work.
503
B. Countermeasures for AES
One concrete mitigation strategy, which defeats our attack
has been realized in OpenSSL 1.0 [19]. In that implementa-
tion only the substitution tables S is stored, which contains
28 entries of 1 byte each. Thus, on standard x86 architectures
with a cache line size of 26 bytes we have that only l = 2
bits of each x∗
i are leaked. Looking at Table 1 now shows
i ∈ {0, 1}4·2 is a valid
∗
that we have p3 = 1, i.e., every k
partial key column candidate for every x∗
. For this
reason, our key search algorithm does not work anymore.
i and y∗
This mitigation strategy prevents our speciﬁc attack, but
it does not eliminate the problem completely, because it still
leaks information. Since AES was not designed to be secure
in a threat model where an attacker is able to learn any bits
of the xi, the implementation remains, at least potentially,
attackable. For instance, it might be possible to combine
information leaking in three or more rounds to infer possible
conﬁgurations of the lower, not directly leaking bits.
Finally, because of the prevalence and importance of AES,
we increasingly see hardware implementation of AES, which
render access-driven cache attacks impossible [26], [40],
[41].
i
VII. CONCLUSION AND OUTLOOK
The most obvious limitation of our attack is that it targets
a very speciﬁc software and hardware conﬁguration (i.e.,
Linux OS, OpenSSL 0.9.8n, and single core x86 CPUs). In
the following we discuss in how far our attack can be made
more generic by extending it to a broader set of systems. In
general, we believe that it is very hard to render the attack to
be inherently generic, since it is sensitive to exact parameters
of the target system. In fact, we have put substantial effort
into ﬁne tuning the attack, and have also experienced that
minor updates of the operating system required substantial
adjustments.
Yet we believe that the attack might be extended to other
operating systems and multi core CPUs. To port the attack
to other operating system, an intimate knowledge of task
scheduler mechanics is needed to implement a successful
DoS attack. According to our experience with the Linux
kernel, the scheduler is a moving target, subtly changing
from one release to another. With Linux understanding the
scheduler and these changes is a surmountable task, as it is
open source software. For a closed source operating system,
one would have to reverse engineer the scheduler ﬁrst. This
of course tremendously increases the effort going into the
attack, but does not make it impossible.
We believe our results are relevant for modern CPUs
which typically have more than one core. Multiple cores
clearly complicate the attack on the task scheduler, because
the fundamental assumption that the victim is preempted
while the spy process is running is not satisﬁed any longer.
Yet, we believe that a dedicated attacker might overcome
this problem in certain cases. For example with CPU afﬁnity
(either by explicitly using the OS’s APIs or by deceiving the
OS’s scheduler heuristics) the attacker can inﬂuence where
the victim will run and gain nearly the same amount of
control as it had in the single core scenario. The spy needs
to be distributed across multiple cores and has to perform
sophisticated synchronization. This is certainly a difﬁcult
but not unsurmountable task. On the other hand, multi core
CPUs give the opportunity to an OS to defeat such attacks
by dedicating a whole CPU core to sensitive processes. That
core could even be isolated by not sharing its cache with
other cores.
Finally, as cloud computing and virtualization are be-
coming more and more prevalent, investigating to which
extent
these systems are vulnerable to cache-based side
channel attacks is an interesting open problem. Ristenpart
et al. [42] demonstrate the existence of a cache-based side
channel between virtual machines in Amazon’s EC2 cloud
computing service. It seems very likely that their attack can
be improved signiﬁcantly, e.g., by abusing mechanisms like
kernel same-page mapping (KSM) in Linux KVM, where
an attacker can share memory with a victim across virtual
machine boundaries and mount a powerful attack through
that channel.
Acknowledgments
We would like to thank Billy Brumley, the anonymous
reviewers and our shepherd, Adrian Perrig, for their valuable
comments and support.
REFERENCES
[1] J.-F. Gallais, I. Kizhvatov, and M. Tunstall, “Improved trace-
driven cache-collision attacks against embedded AES imple-
mentations,” in WISA ’10, ser. LNCS, Y. Chung and M. Yung,
Eds., vol. 6513. Springer, 2010, pp. 243–257.
[2] Y. Tsunoo, T. Saito, T. Suzaki, M. Shigeri, and H. Miyauchi,
“Cryptanalysis of DES implemented on computers with
cache,” in CHES ’03, ser. LNCS, C. D. Walter, C¸ . Koc¸, and
C. Paar, Eds., vol. 2779. Springer, 2003, pp. 62–76.
[3] B. Brumley and R. Hakala, “Cache-timing template attacks,”
in ASIACRYPT ’09, ser. LNCS, S. Halevi, Ed., vol. 5677.
Springer, 2009, pp. 667–684.
[4] C. Percival,
“Cache missing
for
fun
and
proﬁt,”
http://www.daemonology.net/hyperthreading-considered-
harmful/, 2005.
[5] O. Acıic¸mez, B. Brumley, and P. Grabher, “New results
on instruction cache attacks,” in CHES 2010, ser. LNCS,
S. Mangard and F.-X. Standaert, Eds., vol. 6225. Springer,
2010, pp. 110–124.
[8] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and
countermeasures: The case of AES,” in CT-RSA ’06, ser.
LNCS, D. Pointcheval, Ed., vol. 3860. Springer, 2006, pp.
1–20.
[9] O. Acıic¸mez, W. Schindler, and C¸ . Koc¸, “Cache based remote
timing attack on the AES,” in CT-RSA ’07, ser. LNCS,
M. Abe, Ed., vol. 4377. Springer, 2007, pp. 271–286.
[10] D.
J. Bernstein,
“Cache-timing
attacks
http://cr.yp.to/papers.html, 2004, University of
Chicago, US.
on AES,”
Illinois,
[11] M. Neve, J.-P. Seifert, and Z. Wang, “A reﬁned look at
Bernstein’s AES side-channel analysis,” in ASIACCS ’06, F.-
C. Lin, D.-T. Lee, B.-S. Lin, S. Shieh, and S. Jajodia, Eds.
ACM, 2006, p. 369.
[12] J. Bonneau and I. Mironov, “Cache-collision timing attacks
against AES,” in CHES ’06, ser. LNCS, L. Goubin and
M. Matsui, Eds., vol. 4249. Springe, 2006, pp. 201–215.
[13] O. Acıic¸mez and C¸ . Koc¸, “Trace-driven cache attacks on
AES,” Cryptology ePrint Archive, Report 2006/138, 2006.
[14] X. Zhao and T. Wang, “Improved cache trace attack on
AES and CLEFIA by considering cache miss and S-box
misalignment,” Cryptology ePrint Archive, Report 2010/056,
2010.
[15] G. Bertoni, V. Zaccaria, L. Breveglieri, M. Monchiero, and
G. Palermo, “AES power attack based on induced cache miss
and countermeasure,” in ITCC ’05.
IEEE Computer Society,
2005, pp. 586–591.
[16] C. Lauradoux, “Collision attacks on processors with cache
and countermeasures,” in WEWoRC ’05, ser. LNI, C. Wolf,
S. Lucks, and P.-W. Yau, Eds., vol. 74. GI, 2005, pp. 76–85.
[17] J. Daemen and V. Rijmen, “AES proposal: Rijndael,” AES
Algorithm Submission, 1999.
[18] FIPS, Advanced Encryption Standard (AES).
of
Institute
and
http://csrc.nist.gov/publications/ﬁps/.
Processing Standard 197.
Standards
Technology,
Federal
National
2001,
Information
[19] OpenSSL,
“OpenSSL: The Open Source
SSL/TSL,” http://www.openssl.org/, 1998–2010.
toolkit
for
[20] P. Kocher, “Timing attacks on implementations of Difﬁe-
Hellman, RSA, DSS, and other systems,” in CRYPTO ’96,
ser. LNCS, N. Koblitz, Ed., vol. 1109. Springer, 1996, pp.
104–113.
[21] J. Kelsey, B. Schneier, D. Wagner, and C. Hall, “Side chan-
nel cryptanalysis of product ciphers,” Journal of Computer
Security, vol. 8, no. 2/3, pp. 141–158, 2000.
[6] M. Neve and J.-P. Seifert, “Advances on access-driven cache
attacks on AES,” in SAC ’06, ser. LNCS, E. Biham and A. M.
Youssef, Eds., vol. 4356. Springer, 2006, pp. 147–162.
[22] D. Page, “Theoretical use of cache memory as a cryptanalytic
side-channel,” Department of Computer Science, University
of Bristol, Tech. Rep. CSTR-02-003, June 2002.
[7] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient cache at-
tacks on AES, and countermeasures,” Journal of Cryptology,
vol. 23, no. 1, pp. 37–71, 2010.
[23] ——, “Defending against cache based side-channel attacks,”
Information Security Technical Report, vol. 8, no. 1, pp. 30–
44, April 2003.
504
[33] J. Bernardo and A. Smith, Bayesian Theory. Wiley, 1994.
[34] I. Moln´ar,
“Design
of
the
CFS
scheduler,”
http://people.redhat.com/mingo/cfs-scheduler/sched-design-
CFS.txt, 2007, Redhat.
[35] D. Tsafrir, Y. Etsion, and D. Feitelson, “Secretly monop-
olizing the cpu without superuser privileges,” in USENIX
Security ’07. USENIX, 2007, pp. 1–18.
[36] M. Jordan and C. Bishop, “Neural networks,” ACM Comput-
ing Surveys, vol. 28, no. 1, pp. 73–75, 1996.
[37] W. McCulloch and W. Pitts, “A logical calculus of the
ideas immanent in nervous activity,” Bulletin of Mathematical
Biophysics, vol. 5, no. 4, pp. 115–113, 1943.
[38] C. Bishop, Neural Networks for Pattern Recognition. Oxford
University Press, 1996.
[39] P. Simard, D. Steinkraus, and J. Platt, “Best practices for
convolutional neural networks applied to visual document
analysis,” in ICDAR ’03.
IEEE Computer Society, 2003,
pp. 958–962.
[40] P. Ghewari, J. Patil, and A. Chougule, “Efﬁcient hardware de-
sign and implementation of AES cryptosystem,” International
Journal of Engineering Science and Technology, vol. 2, no. 3,
pp. 213–219, 2010.
[41] M. Mali, F. Novak, and A. Biasizzo, “Hardware implemen-
tation of AES algorithm,” Journal of Electrical Engineering,
vol. 56, no. 9-10, pp. 265–269, 2005.
[42] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey,
you, get off of my cloud! Exploring information leakage
in third-party compute clouds,” in CCS ’09, S. Jha and
A. Keromytis, Eds. ACM Press, 2009, pp. 199–212.
[24] K. Tiri, O. Acıic¸mez, M. Neve, and F. Andersen, “An ana-
lytical model for time-driven cache attacks,” in FSE ’07, ser.
LNCS, A. Biryukov, Ed., vol. 4593.
Springer, 2007, pp.
399–413.
[25] E. Brickell, G. Graunke, M. Neve, and J.-P. Seifert, “Software
mitigations to hedge AES against cache-based software side
channel vulnerabilities,” Cryptology ePrint Archive, Report
2006/052, 2006.
[26] S. Gueron, “Advanced Encryption Standard (AES) instruc-
set,” www.intel.com/Assets/PDF/manual/323641.pdf,
tions
2008, Intel Corporation.
[27] R. K¨onighofer, “A fast and cache-timing resistant implemen-
tation of the AES,” in CT-RSA ’08, ser. LNCS, T. Malkin,
Ed., vol. 4964. Springer, 2008, pp. 187–202.
[28] “Intel 64 and IA-32 architectures optimization reference man-
http://www.intel.com/Assets/PDF/manual/248966.pdf,
ual,”
2010, Intel Corporation.
[29] “Intel 64 and IA-32 architectures software developer’s man-
ual. Volume 3A: System Programming Guide, Part 1,”
http://www.intel.com/Assets/PDF/manual/253668.pdf, 2010,
Intel Corporation.
[30] J. Daemen and V. Rijmen, The Design of Rijndael: AES - The
Advanced Encryption Standard. Springer, 2002.
[31] V.
Rijmen,
A.
“Optimised ANSI C code
http://fastcrypto.org/front/misc/rijndael-alg-fst.c, 2000.
the Rijndael
Bosselaers,
for
and
P.
Barreto,
cipher,”
[32] M. Bayes, “An essay towards solving a problem in the
doctrine of chances,” Philosophical Transactions, vol. 53, pp.
370–418, 1763.
505