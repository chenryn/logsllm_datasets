        如果[*首次*]{.emphasis} 使用 `network`{.command} 命令时缺少
        `--device=`{.option} 选项，则会使用 `ksdevice=`{.option}
        [**Anaconda**]{.application}
        引导选项值（如果可用）。注：这是已放弃的行为，在大多数情况下应该为每个
        `network`{.command} 命令指定 `--device=`{.option} 选项。
        :::
        ::: para
        如果缺少 `--device=`{.option} 选项，同一 Kickstart
        文件中的任意连续 `network`{.command}
        命令的行为尚不确定。请确定在每次使用 `network`{.command}
        命令时都指定这个选项。
        :::
        ::: para
        可以使用以下任何方法指定要激活的设备：
        :::
        ::: itemizedlist
        -   ::: para
            接口的设备名称，例如：`em1`{.systemitem}
            :::
        -   ::: para
            接口中的 MAC 地址，例如：`01:23:45:67:89:ab`{.systemitem}
            :::
        -   ::: para
            关键字 `link`{.literal}，指定链接状态为 `up`{.literal}
            的第一个接口
            :::
        -   ::: para
            关键字 `bootif`{.literal}，使用 [**pxelinux**]{.application}
            在 *`BOOTIF`* 变量里设置的 MAC 地址。在
            `pxelinux.cfg`{.filename} 文件中设定 `IPAPPEND 2`{.literal}
            使 [**pxelinux**]{.application} 设置 *`BOOTIF`* 变量。
            :::
        :::
        ::: para
        例如：
        :::
        ``` programlisting
        network --bootproto=dhcp --device=em1
        ```
    -   ::: para
        `--ip=`{.option} - 该设备的 IP 地址。
        :::
    -   ::: para
        `--ipv6=`{.option} - 该设备的 IPv6 地址，格式为
        *address*\[/*prefix* *length*\] -
        例如：`3ffe:ffff:0:1::1/128 `{.literal}。如果缺少
        *prefix*，则使用 `64`{.literal}。还可以使用 `auto`{.literal}
        自动配置，`dhcp`{.literal} 只能用于 DHCPv6
        配置（无路由器公告）。
        :::
    -   ::: para
        `--gateway=`{.option} - 单一 IPv4 地址的默认网关。
        :::
    -   ::: para
        `--ipv6gateway=`{.option} - 单一 IPv6 地址的默认网关。
        :::
    -   ::: para
        `--nodefroute`{.option} - 防止将接口设置为默认路由。使用
        `--activate=`{.option}
        选项激活其他设备时使用这个选项，例如：在独立子网中用于 iSCSI
        目标的网卡。
        :::
    -   ::: para
        `--nameserver=`{.option} - DNS 名称服务器作为 IP
        地址。要指定一个以上名称服务器，请使用这个选项，并用逗号分开每个地址。
        :::
    -   ::: para
        `--nodns`{.option} - 不要配置任何 DNS 服务器。
        :::
    -   ::: para
        `--netmask=`{.option} - 已安装系统的子网掩码。
        :::
    -   ::: para
        `--hostname=`{.option} -
        已安装系统的主机名。主机名可以是*完全限定域名*（FQDN），其格式为
        `hostname.domainname`{.literal}；也可以是不含域名的简要主机名。很多网络有*动态主机配置协议*（DHCP）服务，它可自动提供带域名的连接的系统。要允许
        DHCP 服务为这台机器分配域名，只指定简要主机名即可。
        :::
        ::: important
        ::: admonition_header
        **重要**
        :::
        ::: admonition
        ::: para
        如果您的网络[*不提供*]{.emphasis} DHCP 服务，则一定要使用 FQDN
        作为系统的主机名。
        :::
        :::
        :::
    -   ::: para
        `--ethtool=`{.option} -
        指定用于网络设备的附加底层设置，可将其传送给
        [**ethtool**]{.application} 程序。
        :::
    -   ::: para
        `--essid=`{.option} - 无线网络的网络 ID。
        :::
    -   ::: para
        `--wepkey=`{.option} - 无线网络的 WEP 加密密钥。
        :::
    -   ::: para
        `--wpakey=`{.option} - 无线网络的 WPA 加密密钥。
        :::
    -   ::: para
        `--onboot=`{.option} - 是否在引导时启用该设备。
        :::
    -   ::: para
        `--dhcpclass=`{.option} - DHCP 类别。
        :::
    -   ::: para
        `--mtu=`{.option} - 该设备的 MTU。
        :::
    -   ::: para
        `--noipv4`{.option} - 在这个设备中禁用 IPv4。
        :::
    -   ::: para
        `--noipv6`{.option} - 在这个设备中禁用 IPv6。
        :::
    -   ::: para
        `--bondslaves=`{.option} - 使用这个选项时，会使用
        `--bondslaves=`{.option} 选项中定义的 slave 生成
        `--device=`{.option} 选项中指定的网络设备。例如：
        :::
        ``` programlisting
        network --device=mynetwork --bondslaves=em1,em2
        ```
        ::: para
        上述命令可生成绑定设备，名为 `mynetwork`{.literal}，并使用
        `em1`{.literal} 和 `em2`{.literal} 接口作为其从属。
        :::
    -   ::: para
        `--bondopts=`{.command} - 绑定接口的自选参数列表，使用
        `--bondslaves=`{.command} 和 `--device=`{.command}
        选项指定。该列表中的选项必须以逗号（\"`,`{.literal}\"）或分号（\"`;`{.literal}\"）分开。如果某个选项本身包含一个口号，请使用分号分开选项。例如：
        :::
        ``` programlisting
        network --bondopts=mode=active-backup,balance-rr;primary=eth1
        ```
        ::: para
        可用自选参数列表请查看 [《Red Hat Enterprise Linux 7
        系统管理员指南》](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/index.html)中*《使用内核模块》*一章。
        :::
        ::: important
        ::: admonition_header
        **重要**
        :::
        ::: admonition
        ::: para
        `--bondopts=mode=`{.option} 参数只支持完整模式名称，比如
        `balance-rr`{.literal} 或者
        `broadcast`{.literal}，而不是与之对应的数字，比如 `0`{.literal}
        或者 `3`{.literal}。
        :::
        :::
        :::
    -   ::: para
        `--vlanid=`{.option} - 为使用在 `--device=`{.option}
        中指定的上级设备创建的设备指定虚拟 LAN（VLAN）ID 号（802.1q
        标签）。例如：`network --device=em1 --vlanid=171`{.command}
        将生成虚拟 LAN 设备 `em1.171`{.literal}。
        :::
    -   ::: para
        `--interfacename=`{.option} - 为虚拟 LAN
        设备指定定制接口名称。这个选项应在使用 `--vlanid=`{.option}
        选项生成的默认名称不令人满意时使用。这个选项必须与
        `--vlanid=`{.option} 一同使用。例如：
        :::
        ``` programlisting
        network --device=em1 --vlanid=171 --interfacename=vlan171
        ```
        ::: para
        上述命令会在 `em1`{.literal} 设备中生成虚拟 LAN 接口名称
        `vlan171`{.literal}，ID 为 `171`{.literal}。
        :::
        ::: para
        接口名称可以是任意名称（例如：`my-vlan`{.literal}），但在具体情况下必须符合以下常规：
        :::
        ::: itemizedlist
        -   ::: para
            如果名称中包含点符号（`.`{.literal}），则其格式必须为
            `NAME.ID`{.literal}。*NAME* 可为任意名称，但 *ID* 必须是
            VLAN ID。例如：`em1.171`{.literal} 或者
            `my-vlan.171`{.literal}。
            :::
        -   ::: para
            以 `vlan`{.literal} 开始的名称，其格式必须为
            `vlanID`{.literal}。例如：`vlan171`{.literal}。
            :::
        :::
    -   ::: para
        `--teamslaves=`{.option} - `--device=`{.option}
        选项指定的成组设备将使用这个选项中指定的 slave
        生成。使用逗号将各个 slave 分开。每个 slave
        后接其配置，该配置是一个单引号括起来的 JSON 字符串，其中间隔使用
        `\`{.literal} 和双引号。例如：
        :::
        ``` programlisting
        network --teamslaves="p3p1'{\"prio\": -10, \"sticky\": true}',p3p2'{\"prio\": 100}'"
        ```
        ::: para
        还请查看 `--teamconfig=`{.option} 选项。
        :::
    -   ::: para
        `--teamconfig=`{.option} -
        用双引号括起来的成组设备配置，该配置是一个单引号括起来的 JSON
        字符串，其中间隔使用 `\`{.literal} 和双引号。设备名称由
        `--device=`{.option} 选项指定，其 slave 和它们的配置由
        `--teamslaves=`{.option} 选项指定。例如：
        :::
        ``` programlisting
        network --device team0 --activate --bootproto static --ip=10.34.102.222 --netmask=255.255.255.0 --gateway=10.34.102.254 --nameserver=10.34.39.2 --teamslaves="p3p1'{\"prio\": -10, \"sticky\": true}',p3p2'{\"prio\": 100}'" --teamconfig="{\"runner\": {\"name\": \"activebackup\"}}"
        ```
    -   ::: para
        `--bridgeslaves=`{.option} - 使用此选项时，会生成使用
        `--device=`{.option}
        选项指定设备名称的网络桥接，并在桥接中添加使用
        `--bridgeslaves=`{.option} 选项的设备。例如：
        :::
        ``` programlisting
        network --device=bridge0 --bridgeslaves=em1
        ```
    -   ::: para
        `--bridgeopts=`{.option} -
        用于桥接接口的用逗号分开的自选参数列表。可用值包括
        `stp`{.literal}、`priority`{.literal}、`forward-delay`{.literal}、`hello-time`{.literal}、`max-age`{.literal}
        和 `ageing-time`{.literal}。有关这些参数的详情请查看
        `nm-settings(5)`{.systemitem} 手册页中的*《桥接设置》*
        表，或查看
        。
        :::
        ::: para
        有关网络桥接的详情请查看 [《Red Hat Enterprise Linux 7
        联网指南》](https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/index.html)。
        :::
    :::
[`%addon org_fedora_oscap`{.command}（自选）[]{#chap-kickstart-installations.html#idm139805866910432 .indexterm}]{.term}
:   ::: para
    OpenSCAP 安装程序附加组件是用来在安装的系统中应用
    SCAP（安全内容自动化协议）内容，即安全策略。从 Red Hat
    Enterprise Linux 7.2
    开始默认启用这个附加组件。启用后，会自动安装提供这个功能的软件包。但默认情况下，不会强制采用任何策略，就是说在安装过程中或安装后不会执行任何选择操作，除非有特殊配置。
    :::
    ::: {.important xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    不一定在所有系统中应用安全策略。只有机构规则或政府法规强制某种策略时，才应该使用这个页面。
    :::
    :::
    :::
    ::: para
    与大多数命令不同，这个附加组件不接受常规选项，而是使用
    `%addon`{.command}
    定义中的密钥-数值对。这些数值对无法验证空白。数值为自选，采用单引号（`'`{.literal}）或双引号（`"`{.literal}）括起。
    :::
    ::: para
    该附加组件可识别以下密钥：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        `content-type`{.literal} - 安全内容类型。可能值包括
        `datastream`{.literal}、`archive`{.literal}、`rpm`{.literal} 和
        `scap-security-guide`{.literal}。
        :::
        ::: para
        如果 `content-type`{.literal} 是
        `scap-security-guide`{.literal}，则该附加组件将使用
        [scap-security-guide]{.package}
        软件包提供的内容，这些内容包含着引导介质中。就是说除
        `profile`{.literal} 外，其他所有密钥均无效。
        :::
    -   ::: para
        `content-url`{.literal} - 安全内容为主。必须通过 HTTP、HTTPS
        或者 FTP
        访问该内容。本地存储目前不支持此功能。必须有可用的网络连接方可在使用远程位置中的内容定义。
        :::
    -   ::: para
        `datastream-id`{.literal} - `content-url`{.literal}
        值中所参考数据流的 ID。只有在 `content-type`{.literal} 为
        `datastream`{.literal} 时方可使用。
        :::
    -   ::: para
        `xccdf-id`{.literal} - 要使用的基准点的 ID。
        :::
    -   ::: para
        `xccdf-path`{.literal} - 应使用的 XCCDF
        文件的路径；在归档中采用相对路径格式。
        :::
    -   ::: para
        `profile`{.literal} - 要应用的配置文件 ID。使用
        `default`{.literal} 应用默认配置文件。
        :::
    -   ::: para
        `fingerprint`{.literal} - `content-url`{.literal} 参考的
        MD5、SHA1 或者 SHA2 校验和。
        :::
    -   ::: para
        `tailoring-path`{.literal} -
        应使用裁剪文件的路径，在归档中使用相对路径。
        :::
    :::
    ::: para
    使用安装介质中 [scap-security-guide]{.package} 内容的
    `%addon org_fedora_oscap`{.command} 部分类似如下：
    :::
    ::: example
    [⁠]{#chap-kickstart-installations.html#exam-org-fedora-oscap-ssg}
    **例 23.2. 使用 SCAP Security Guide 的 OpenSCAP 附加组件定义示例**
    ::: example-contents
    ``` programlisting
    %addon org_fedora_oscap
      content-type = scap-security-guide
      profile = pci-dss
    %end
    ```
    :::
    :::
    ::: para
    可从网页服务器载入自定义配置文件的复杂示例类似如下：
    :::
    ::: example
    [⁠]{#chap-kickstart-installations.html#exam-org-fedora-oscap-datastream}
    **例 23.3. 使用 Datastream 的 OpenSCAP 附加组件定义示例**
    ::: example-contents
    ``` programlisting
    %addon org_fedora_oscap
      content-type = datastream
      content-url = http://www.example.com/scap/testing_ds.xml
      datastream-id = scap_example.com_datastream_testing
      xccdf-id = scap_example.com_cref_xccdf.xml
      profile =  xccdf_example.com_profile_my_profile
      fingerprint = 240f2f18222faa98856c3b4fc50c4195
    %end
    ```
    :::
    :::
    ::: para
    有关 OpenSCAP 安装程序附加组件附加信息，请查看