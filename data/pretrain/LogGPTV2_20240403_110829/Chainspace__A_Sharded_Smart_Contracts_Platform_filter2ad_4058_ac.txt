the fate of their transaction, and may be used to detect past
of future violations of integrity. A partial audit is an efﬁcient
operation since the evidence has size O(s + log N ) in N the
number of transactions in the checkpoint and s the size of
the shard—thanks to the efﬁciency of proving inclusion in a
Merkle tree, and checking signatures.
A full audit involves replaying all transactions processed
by the shard, and ensuring that (1) all transactions were valid
according to the checkers the shard executed; (2) the objects
input or references of all committed transactions were all active
(see rules in Figure 2); and (3) the evidence received from
other shards supports committing or aborting the transactions.
To do so an auditor downloads the full hash-chain representing
the decisions of the shard from the beginning of time, and
re-executes all the transactions in sequence. This is possible,
since—besides their secret signing keys—peers in shards
have no secrets, and their execution is deterministic once
the sequence of transactions is deﬁned. Thus, an auditor can
re-execute all transactions in sequence, and check that their
decision to commit or abort them is consistent with the decision
of the shard. Doing this, requires any inter-shard communication
(namely the promises from other shards to commit or abort
transactions) to be logged in the hash-chain, and used by the
auditor to guide the re-execution of the transactions. A full
audit needs to re-execute all transactions and requires evidence
of size O(N ) in the number N of transactions. This is costly,
but may be done incrementally as new blocks of shard decisions
are created.
B. Distributed Architecture & Consensus
A network of nodes manages the state of Chainspace objects,
keeps track of their validity, and record transactions that are
seen or that are accepted as being committed.
Chainspace uses sharding strategies to ensure scalability:
a public function φ(o) maps each object o to a set of nodes,
we call a shard. These nodes collectively are entrusted to
manage the state of the object, keep track of its validity, record
transactions that involve the object, and eventually commit
at most one transaction consuming the object as input and
rendering it inactive. However, nodes must only record such a
transaction as committed if they have certainty that all other
nodes have, or will in the future, record the same transaction
as consuming the object. We call this distributed algorithm the
consensus algorithm within the shard.
More mathematically, Φ(T ) = S{φ(oi)|oi ∈ ζ \ ξ}, where
For a transaction T we deﬁne a set of concerned nodes,
Φ(T ) for a transaction structure T . We ﬁrst denote as ζ the
set of all objects identiﬁers that are input into or referenced
by any trace contained in T . We also denote as ξ the set of
all objects that are output by any trace in T . The function
Φ(T ) represents the set of nodes that are managing objects
that should exist, and be active, in the system for T to succeed.
ζ \ ξ represents the set of objects input but not output by the
transaction itself (its free variables). The set of concerned peers
thus includes all shard nodes managing objects that already
exist in Chainspace that the transaction uses as references or
inputs.
An important property of this set of nodes holds, that ensures
that all smart contracts involved in a transaction will be mapped
to some concerned nodes that manage state from this contract:
Security Theorem 2. If a contract c appears in any trace
within a transaction T , then the concerned nodes set Φ(T )
will contain nodes in a shard managing an object o of a type
from contract c. I.e. ∃o.type(o) ∈ types(c) ∧ φ(o) ∩ Φ(T ) (cid:54)= ∅.
Proof: Consider any trace t within T , from contract c. If the
inputs or references to this trace are not in ξ—the set of objects that
were created within T —then their shards will be included within
Φ(T ). Since those are of types within c the theorem holds. If on the
other hand the inputs or references are in ξ, it means that there exists
another trace within T from the same contract c that generated those
outputs. We then recursively apply the case above to this trace from
the same c. The process will terminate with some objects of types
in c and shard managing them within the concerned nodes set—and
this is guarantee to terminate due to the Hash-DAG structure of the
transactions (that may have no loops).
Security Theorem 2 ensures that the set of concerned
nodes, includes nodes that manage objects from all contracts
represented in a transaction. Chainspace leverages this to
distribute the process of rule validation across peers in two
ways:
•
For any existing object o in the system, used as a
reference or input within a transaction T , only the
shard nodes managing it, namely in φ(o), need to
check that it is active (as part of the ‘check’ rule in
Figure 2).
•
For any trace t from contract c within a transaction T ,
only shards of concerned nodes that manage objects of
types within c need to run the checker of that contract
to validate the trace (again as part of the ‘check’ rule),
and that all input, output and reference objects are of
types within c.
However, all shards containing concerned nodes for T need
to ensure that all others have performed the necessary checks
before committing the transaction, and creating new objects.
There are many options for ensuring that concerned nodes in
each shards do not reach an inconsistent state for the accepted
transactions, such as Nakamoto consensus through proof-of-
work [Nak08], two-phase commit protocols [LL94], and clas-
sical consensus protocols like Paxos [L+01], PBFT [CL+99],
or xPaxos [LCQV15]. However, these approaches lack in
performance, scalability, and/or security. We design an open,
6
ALL
PREPARED
(commit, T’)
start
None
LOCAL
PREPARED
(abort, T)
Active
LOCAL
PREPARED
(commit, T)
*
PREPARED
(*, T”)
SOME
PREPARED
(Abort, T)
Locked
for T
Inactive
ALL
PREPARED
(commit, T)
Fig. 3. The state machine representing the active, locked and inactive states
for any object within Chainspace. Each node in a shard replicates the state of
the object, and participates in a consensus protocol that allows it to derive the
invariants “Local prepared”, “All prepared”, and “Some prepared” to update
the state of an object.
scalable and decentralized mechanism to perform Sharded
Byzantine Atomic Commit or S-BAC.
C. Sharded Byzantine Atomic Commit (S-BAC).
Chainspace implements the previously described intra-shard
consensus algorithm for transaction processing in the byzantine
and asynchronous setting,
through the Sharded Byzantine
Atomic Commit (S-BAC) protocol, that combines two primitive
protocols: Byzantine Agreement and atomic commit.
•
•
Byzantine agreement ensures that all honest members
of a shard of size 3f + 1, agree on a speciﬁc common
sequence of actions, despite some f malicious nodes
within the shard. It also guarantees that when agree-
ment is sought, a decision or sequence will eventually
be agreed upon. The agreement protocol is executed
within each shard to coordinate all nodes. We use MOD-
SMART [SB12] implementation of PBFT for state
machine replication that provides an optimal number of
communications steps (similar to PBFT [CL+99]). This
is achieved by replacing reliable broadcast with a spe-
cial leader-driven Byzantine consensus primitive called
Validated and Provable Consensus (VP-Consensus).
Atomic commit is ran across all shards managing
objects relied upon by a transaction. It ensures that
each shard needs to accept to commit a transaction,
for the transaction to be committed; even if a sin-
gle shard rejects the transaction, then all agree it
is rejected. We propose the use of a simple two-
phase commit protocol [BHG87], composed with an
agreement protocol to achieve this—loosely inspired
by Lamport and Gray [GL06]. This protocol was the
ﬁrst to reconcile the needs for distributed commit, and
replicated consensus (but only in the non-byzantine
setting).
S-BAC composes the above primitives in a novel way
to ensure that shards process safely and consistently all
transactions. Figure 4 illustrates a simple example of the S-BAC
protocol to commit a single transaction with two inputs and one
output that we may use as an example. The corresponding object
state transitions have been illustrated in Figure 3. The combined
7
protocol has been described below. For ease of understanding,
in our description we state that all messages are sent and
processed by shards. In reality, some of these are handled by
a designated node in each shard—the BFT-Initiator —as we
discuss at the end of this section.
Initial Broadcast (Prepare). A user acts as a transaction
initiator, and sends ‘prepare(T)’ to at least one honest concerned
node for transaction T . To ensure at least one honest node
receives it, the user may send the message to f + 1 nodes of a
single shard, or f + 1 nodes in each concerned shard.
Sequence Prepare. Upon a message ‘prepare(T)’ being re-
ceived, nodes in each shard interpret it as the initiation of a two-
phase commit protocol performed across the concerned shards.
The shard locally sequences ‘prepare(T)’ message through the
Byzantine consensus protocol.
Process Prepare. Upon the ﬁrst action ‘prepare(T )’ being
sequenced through BFT consensus in a shard, nodes of the
shard implicitly decide whether it should be committed or
aborted. Since all honest nodes in the shard have a consistent
replica of the full sequence of actions, they will all decide the
same consistent action following ‘prepare(T)’.
Transaction T is to be committed if it is valid according to
the usual rules (see Figure 2), in brief: (1) the objects input
or referenced by T in the shard are active, (2) there is no
other instance of the two-phase commit protocol on-going
concerning any of those objects (no locks held) and (3) if T
is valid according to the validity rules, and the smart contract
checkers in the shard. Only the checkers for types of objects
held by the shard are checked by the shard.
If the decision is to commit, the shard broadcasts to all
concerned nodes ‘prepared(T ,commit)’, otherwise it broadcasts
‘prepared(T , abort)’—along with sufﬁcient signatures to con-
vince any party of the collective shard decision (we denote
this action as LOCALPREPARED(*, T)). The objects used or
referenced by T are ‘locked’ (Figure 3) in case of a ‘prepared
commit’ until an ‘accept’ decision on the transaction is reached,
and subsequent transactions concerning them will be aborted by
the shard. Any subsequent ‘prepare(T (cid:48)(cid:48))’ actions in the sequence
are ignored, until a matching accept(T , abort) is reached to
release locks, or forever if the transaction is committed.
Process Prepared (accept or abort). Depending on the deci-
sion of ‘prepare(T )’, the shard sequences ‘accept(T ,commit)’ or
‘accept(T ,abort)’ through the atomic commit protocol across all
the concerned shards—along with all messages and signatures
of the bundle of ‘prepared’ messages relating to T proving to
other shards that the decision should be ‘accept(T ,commit)’ or
‘accept(T ,abort)’ according to its local consensus. If it receives
even a single ‘LOCALPREPARED(T ,abort)’ from another shard
it instead will move to reach consensus on ‘accept(T , abort)’
(denoted as SOMEPREPARED(abort,T)). Otherwise, if all the
shards respond with ‘LOCALPREPARED(T ,commit)’ it will
reach a consensus on ALLPREPARED(commit,T). The ﬁnal
decision is sent to the user, along with all messages and
signatures of the bundle of ‘accept’ messages relating to T
proving that the ﬁnal decision should be to commit or abort
according to responses from all concerned shards.
User with T{o1, o2} → o3
Send prepare(T )
Client Accept Conﬁrmation
Input shard φ(o1)
Input shard φ(o2)
Output shard φ(o3)
BFT
BFT
Initial
Broadcast
Process
Prepare
BFT
Inactive o1
BFT
Inactive o2
Process
Prepared
BFT
Create o3
Process
Accept
Fig. 4. S-BAC for a transaction T with two inputs (o1, o2) and one output object (o3). The user sends the transaction to all nodes in shards managing o1 and o2.
The BFT-Initiator takes the lead in sequencing T , and emits ’prepared(accept, T)’ or ’prepared(abort, T)’ to all nodes within the shard. Next the BFT-Initiator of
each shard assesses whether overall ‘All proposed(accept, T)’ or ‘Some proposed(abort, T)’ holds across shards, sequences the accept(T,*), and sends the decision
to the user. All cross-shard arrows represent a multicast of all nodes in one shard to all nodes in another.
It is possible, that a shard hears a prepared message for
T before a prepare message, due to unreliability, asynchrony
or a malicious user. In that case the shard assumes that a
‘prepare(T)’ message is implicit, and sequences it.
Process Accept. When a shard sequences an ‘accept(T , com-
mit)’ decision, it sets all objects that are inputs to the transaction
T as being inactive (Figure 3). It also creates any output objects
from T via BFT consensus that are to be managed by the shard.
If the output objects are not managed by the shard, the shard
sends requests to the concerned shards to create the objects. On
the other hand if the shard decision is ‘accept(T , abort)’, all
nodes release locks held on inputs or references of transaction
T . Thus those objects remain active and may be used by other
transactions.
As previously mentioned, some of the messages in S-BAC
are handled by a designated node in each shard called the BFT-
Initiator . Speciﬁcally, the BFT-Initiator drives the composed
S-BAC protocol by sending ‘prepare(T)’ and then ‘accept(T , *)’
messages to reach BFT consensus within and across shards. It is
also responsible for broadcasting consensus decisions to relevant
parties. The protocol supports a two-phase process to recover
from a malicious BFT-Initiator that suppresses transactions. As
nodes in a shard hear all messages, they wait for the BFT-
Initiator to act on it until they time out. They ﬁrst send a
reminder to the BFT-Initiator along with the original message
to account for network losses. Next they proceed to wait; if
they time out again, other nodes perform the action of BFT-
Initiator which is idempotent.
D. Concurrency & Scalability
Each transaction T involves a ﬁxed number of concerned
nodes Φ(T ) within Chainspace, corresponding to the shards
managing its inputs and references. If two transactions T0 and
T1 have disjoint sets of concerned nodes (Φ(T0) ∩ Φ(T1) = ∅)
they cannot conﬂict, and are executed in parallel or in any
arbitrary order. If however, two transactions have common
input objects, only one of them is accepted by all nodes. This
is achieved through the S-BAC protocol. It is local, in that it
concerns only nodes managing the conﬂicting transactions, and
does not require a global consensus.
From the point of view of scalability, Chainspace capacity
grows linearly as more shards are added, subject to transactions
having on average a constant, or sub-linear, number of inputs