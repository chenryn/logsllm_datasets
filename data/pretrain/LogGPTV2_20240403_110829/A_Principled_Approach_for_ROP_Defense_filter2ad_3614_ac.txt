termined never to return.
expensive because of the need to lock them before access.
To reduce the need for locking, we cache the range of the
current stack in TLS. A pointer to the current RCAP-stack
is also stored in TLS. Since most calls, returns and RAstores
don’t involve a switching of stacks, this design allows them
to be handled without accessing global storage, and hence
without the need for locking. When a switch is recognized,
the cached information is propagated from TLS to global
data structures, and the switching performed as before.
Although our approach is simple and can generally sup-
port diverse context-switching mechanisms, it has some lim-
itations: one issue is that although we can detect the use
of a new stack and associate a newly allocated RCAP-stack
with it, there is no way to determine if there are valid return
addresses already on the stack. Our solution is to require
programmer annotation for constructs that exhibit this be-
havior. In our experiments, this annotation has been needed
for just one operation, namely, the call to makecontext. Sec-
ond, if a stack is freed and reallocated, then we may end up
using a stale RCAP-stack. This won’t lead to false positives,
but very slightly increases the attacker’s abilities: attacks
can now return to one of the stale return addresses on the
RCAP-stack. Third limitation concerns JIT code: since our
implementation is based on oﬀ-line static analysis, it does
not currently support runtime-generated code.
4.3 RCAP-stack Protection
Since return capabilities are generated and consumed for
control ﬂow authentication, their integrity needs to be en-
In other words, RCAP-stack which stores return
sured.
capabilities should be protected. Otherwise, determined at-
tackers could use vulnerabilities to corrupt both the program
stack and RCAP-stack for control ﬂow subversion.
We used the same approach as described in CFCI [52],
which has also been implemented on our platform PSI. In
short, the protection mechanisms are architecture-dependent.
For x86-32, we rely on segmentation for eﬃcient protection,
and for x86-64, a randomization based approach is used.
The randomization approach ensures that the location of
RCAP-stack cannot be leaked.
5.
5.1 Static Analysis
Implementation
The ﬁrst step of static analysis is to extract candidate
snippets. We utilized PSI [50] for this purpose. Speciﬁcally,
PSI has a disassembly engine that is based on objdump, and
adds a layer of error detection and correction over it. It also
builds a CFG for the code disassembled. We traversed the
CFG backwards from each return instruction to collect code
snippets that were 30 instructions long.
For our static analysis, we need to accurately model the
semantics of each instruction. Speciﬁcally, we utilized a tool
by Hasabnis et al [21, 19] that lifts assembly to GCC’s inter-
mediate language called RTL. This tool is driven by GCC’s
architectural speciﬁcations, and can hence support all x86
instructions, as well as other ISAs supported by GCC.
Our lifting enables the semantics of each instruction to
be captured using a handful of RTL operations, e.g., arith-
metic operations, memory dereferencing, and assignment.
As a result, our static analysis can be implemented in an
architecture-neutral fashion. Moreover, is can side-step the
complexities posed by large instruction sets such as the x86.
RTL is a tree-structured language. To simplify analysis,
Figure 3: Multiple RCAP-stacks for multiple stacks
stores are instrumented in the same manner: a copy of the
address being stored on the main stack is also pushed on
RCAP-stack.
Return instructions are instrumented to check the RCAP-
stack for the corresponding capability. Note that due to
normal program behaviors such as stack unwinding, the re-
quired return capability may not always be located at the
top of RCAP-stack. Similar to previous shadow stack pro-
posals, our design also pops non-matching capabilities from
the top of RCAP-stack until a capability that matches the
target location of the return is encountered. If such a capa-
bility is never found, then a policy violation is reported and
program execution aborted.
4.2 Multi-threading Support
The operating system allocates a separate stack for each
OS-visible thread. In addition, some applications may main-
tain multiple stacks at the user-level. This may be done to
implement user-level threads (e.g., using setcontext/get-
context family of system calls) , or for purposes such as
signal handling (e.g., using sigaltstack). Regardless of
the mechanism used, it is necessary to maintain a unique
RCAP-stack for each stack used by the application.
If the only threading mechanism in use consisted of OS-
visible threads, then there is a simple solution for maintain-
ing one RCAP-stack per main stack: the typical solution
used in previous shadow scheme techniques (e.g., [50]) is
to store the shadow stack pointer in thread-local storage
(TLS). However, this technique won’t work correctly in the
presence of user-level threading mechanisms. We therefore
develop a simple but uniform technique for supporting vari-
ous context-switching mechanisms transparently. This tech-
nique operates by recognizing changes to the stack pointer
value, and switching to the corresponding RCAP-stack.
Figure 3 illustrates the design. For each stack used by the
program, a RCAP-stack is maintained. The stack range array
is a global data structure used to keep the range information
for each stack. For the nth stack, its range information is
kept in hi n and lo n, while the corresponding RCAP-stack
pointer is rsp n. Variable cur is a pointer to address meta-
data associated with the current stack and RCAP-stack.
The current stack range information is updated at instru-
mentation of calls, returns and RAstores, based on %esp
value. However, if %esp is too far away from current stack
range, a stack switch is identiﬁed. A threshold value needs
to be deﬁned for this scheme — we found that 256K worked
well in experiments. The stack range array is searched in
order to look for the target stack information.
If such a
stack is not found, a new RCAP-stack is allocated on de-
mand, and its metadata is also created in stack range array.
After the right RCAP-stack is identiﬁed, pushes and checks
of return addresses can be performed.
Maintaining and updating global data structures can be
program stackshi_1…stack_range_arraycurlo_1rsp1hi_2lo_2rsp2hi_3lo_3rsp3RCAP- stackswe ﬂatten RTL into a sequence of triples, each consisting
of a destination and up to two source operands. Our static
analysis is performed on these triples. Since we analyze sin-
gle execution paths, the main step in the static analysis is
to substitute each register or memory location by the ex-
pression representing its previously computed value. This
expression is maintained in a canonical form by deﬁning an
ordering on variables, and by performing constant-folding
and other arithmetic simpliﬁcations.
5.2 Binary Rewriting based Enforcement
Our shadow stack instrumentation is based on PSI [50]
and was implemented as a plugin. We chose PSI primarily
for two reasons. First, shadow stack needs to be built on top
of CFI to be eﬀective against ROP attacks, and PSI oﬀers
CFI as a primitive. Second, PSI is a platform for COTS
binary instrumentations and works on both executables and
shared libraries, and therefore aligns with our goal of instru-
mentation completeness.
Protecting the Dynamic Loader. Since the dynamic
loader ld.so is an implicit dependency for all dynamically
linked executables, it is also instrumented to prevent returns
from being misused. We ensured that memory protection for
RCAP-stack is set up before it is used by instrumentation.
Signal Handling. The static analysis discussed in Sec-
tion 3.3 is able to identify non-standard returns that con-
sume return addresses stored by program code. However,
return addresses can sometimes originate from the operat-
ing system. This is the case for UNIX signals. Once the
OS delivers a signal to a process, it invokes the registered
signal handler by switching context so that the user space
execution starts at the ﬁrst instruction of the signal han-
dler. Prior to that, the OS puts the address of the sigreturn
trampoline on the stack, which is to be used as the return
address for the signal handler. Therefore, signal handler
will “return” to the sigreturn trampoline, whose purpose is
to trap back to the kernel. The kernel can proceed and re-
vert user program execution with saved context. Since the
returns for signal handlers (which are just normal functions)
are also instrumented, if the corresponding return capabili-
ties are not pushed onto RCAP-stack, signal delivery would
cause false positives.
Fortunately, PSI [50] already has a mechanism for signal
handler mediation. The platform intercepts all signal han-
dler registrations (using signal and sigaction system calls)
and registers wrappers for the signal handlers. Once a wrap-
per function is invoked by the OS, it transfers control to the
real signal handler after resolving its address. We use an
updated version of wrapper code so that it pushes the corre-
sponding return capabilities to RCAP-stack. (The wrapper
code is not instrumented, and the CFI policy conﬁgured to
ensure that it cannot be invoked by the application.)
5.3 Optimizing returns
Our shadow stack is built on top of a binary instrumenta-
tion system that requires code pointer translation. In par-
ticular, code pointers point to original code section, while
the instrumented code resides in a diﬀerent section. As a
result, code pointer values need to be translated to the cor-
responding code locations in the instrumented code. This
step, called address translation, is a signiﬁcant source of
runtime overhead because it requires a hash table lookup.
To improve the performance, we performed an optimization
that has also been used in some previous research works [36]:
Directory
/lib
/usr/lib
/bin
/sbin
/usr/bin
/rescue
/opt
total
Linux
NSR # module #
Linux NSR FreeBSD FreeBSD NSR
NSR #
module #
9
41
6
6
26
N/A
28
116
4
23
1
1
7
N/A
7
42
7
0
7
4
0
182
N/A
213
2
0
2
1
0
91
N/A
98
Figure 4: Non-standard return (NSR) statistics
Module
/lib/ld-2.15.so
/lib/i386-linux-gnu/libc.so.6
/lib/i386-linux-gnu/libgcc s.so.1
/usr/bin/cpp-4.8
/usr/bin/g++-4.8
/usr/bin/gcc-4.8
/lib/libc.so.7
/lib/libgcc s.so.1
/usr/bin/clang
OS
Linux
Linux
Linux
Linux
Linux
Linux
FreeBSD
FreeBSD
FreeBSD
NSR Count
2
2
4
4
4
4
3
4
5
Figure 5: Non-standard returns in common modules
push both the original address and translated address on the
shadow stack for each call. At the time of return, we ﬁrst
compare the return address on the main stack with the orig-
inal address on the shadow stack, and if they match, return
to the translated address on the shadow stack.
For calls, the translated return address is simply the ad-
dress of the instruction following the call instruction. How-
ever, RAstores push code pointers on the stack, so there is
no way to avoid address translation for them. Rather than
eagerly performing address translation at the RAstore, we
simply push a null value as the translated address. At a
return instruction, if the translated address has a null value,
we perform address translation at that point.