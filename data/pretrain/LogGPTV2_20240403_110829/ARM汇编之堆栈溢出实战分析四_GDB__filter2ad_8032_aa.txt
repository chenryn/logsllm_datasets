# ARM汇编之堆栈溢出实战分析四(GDB)
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 引言
这是最后一个实例stack6的分析实战过程，中间跳过了两个例子，他们的解决思路在前面每个例子的尾部EXP的构造、实现中已经得到了体现，就不再写一些重复的内容，今天主要带来的是几个新技巧：
**ret2zp（ret2libc+ROP）** ，通过这两中技术来绕过栈保护机制
## 文件预分析
**1.`file stack6`**，恩，二进制可执行文件,ARM架构,符号表未移除  
 _stack6: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically
linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 2.6.32,
BuildID[sha1]=272f2356191b2176339c44f8376ec3407280a879, not stripped_
**2.`objdump -d
./stack6`**,下面是反汇编结果。这里main函数主要只有一个调用getpath函数的操作。下面主要介绍getpath函数的代码逻辑。
1)在`104e4: e1a0400e mov r4, lr`地址的地方将当前这个getpath栈帧的返回地址给了r4。然后`1050c: e1a03004
mov r3, r4`又把返回地址赋值给了r3  
2)分析下面的片段代码可以知道，`and r3, r3,
#-1090519040`将所有0xbf开头的地址都修改成了0xbf000000，然后跟0xbf000000对比，如果相等就分支跳转到地址为0x10538地方继续执行，否则就退出。  
3)栈地址的开头都是`0xbf`，可以使用命令`info proc map`查看当前运行进程的内存映射
       10518:    e20334bf     and    r3, r3, #-1090519040    ; 0xbf000000
       1051c:    e35304bf     cmp    r3, #-1090519040    ; 0xbf000000
       10520:    1a000004     bne    10538 
`info proc map`查看结果，内存映射可读属性，顺便可以查看地址
    gef> i proc map
    process 3303
    Mapped address spaces:
        Start Addr   End Addr       Size     Offset objfile
           0x10000    0x11000     0x1000        0x0 /home/pi/Desktop/ARM-challenges/stack6
           0x20000    0x21000     0x1000        0x0 /home/pi/Desktop/ARM-challenges/stack6
        0xb6e74000 0xb6f9f000   0x12b000        0x0 /lib/arm-linux-gnueabihf/libc-2.19.so
        0xb6f9f000 0xb6faf000    0x10000   0x12b000 /lib/arm-linux-gnueabihf/libc-2.19.so
        0xb6faf000 0xb6fb1000     0x2000   0x12b000 /lib/arm-linux-gnueabihf/libc-2.19.so
        0xb6fb1000 0xb6fb2000     0x1000   0x12d000 /lib/arm-linux-gnueabihf/libc-2.19.so
        0xb6fb2000 0xb6fb5000     0x3000        0x0 
        0xb6fcc000 0xb6fec000    0x20000        0x0 /lib/arm-linux-gnueabihf/ld-2.19.so
        0xb6ff8000 0xb6ffb000     0x3000        0x0 
        0xb6ffb000 0xb6ffc000     0x1000    0x1f000 /lib/arm-linux-gnueabihf/ld-2.19.so
        0xb6ffc000 0xb6ffd000     0x1000    0x20000 /lib/arm-linux-gnueabihf/ld-2.19.so
        0xb6ffd000 0xb6fff000     0x2000        0x0 
        0xb6fff000 0xb7000000     0x1000        0x0 [sigpage]
        0xbefdf000 0xbf000000    0x21000        0x0 [stack]
        0xffff0000 0xffff1000     0x1000        0x0 [vectors]
4)根据上面的三个点我们可以知道，它对栈地址进行一定的保护机制，让gets不能直接执行将栈地址溢出覆盖到返回地址，所以引出了几种解决技术：第一个就是它只是限制`bf`开头的栈地址，我们不跳到这个地址就行了，我们尝试再次执行一次`1054c:
e8bd8810 pop {r4, fp, pc}`，将我们shellcode的首地址让pc成功接收就行
    000104d8 :
       104d8:    e92d4810     push    {r4, fp, lr}
       104dc:    e28db008     add    fp, sp, #8
       104e0:    e24dd04c     sub    sp, sp, #76    ; 0x4c
       104e4:    e1a0400e     mov    r4, lr
       104e8:    e59f0060     ldr    r0, [pc, #96]    ; 10550 
       104ec:    ebffff9a     bl    1035c 
       104f0:    e59f305c     ldr    r3, [pc, #92]    ; 10554 
       104f4:    e5933000     ldr    r3, [r3]
       104f8:    e1a00003     mov    r0, r3
       104fc:    ebffff9c     bl    10374 
       10500:    e24b3050     sub    r3, fp, #80    ; 0x50
       10504:    e1a00003     mov    r0, r3
       10508:    ebffff96     bl    10368 
       1050c:    e1a03004     mov    r3, r4
       10510:    e50b3010     str    r3, [fp, #-16]
       10514:    e51b3010     ldr    r3, [fp, #-16]
       10518:    e20334bf     and    r3, r3, #-1090519040    ; 0xbf000000
       1051c:    e35304bf     cmp    r3, #-1090519040    ; 0xbf000000
       10520:    1a000004     bne    10538 
       10524:    e59f002c     ldr    r0, [pc, #44]    ; 10558 
       10528:    e51b1010     ldr    r1, [fp, #-16]
       1052c:    ebffff8a     bl    1035c 
       10530:    e3a00001     mov    r0, #1
       10534:    ebffff91     bl    10380 
       10538:    e24b3050     sub    r3, fp, #80    ; 0x50
       1053c:    e59f0018     ldr    r0, [pc, #24]    ; 1055c 
       10540:    e1a01003     mov    r1, r3
       10544:    ebffff84     bl    1035c 
       10548:    e24bd008     sub    sp, fp, #8
       1054c:    e8bd8810     pop    {r4, fp, pc}
       10550:    000105f8     .word    0x000105f8
       10554:    0002075c     .word    0x0002075c
       10558:    0001060c     .word    0x0001060c
       1055c:    00010618     .word    0x00010618
    00010560 :
       10560:    e92d4800     push    {fp, lr}
       10564:    e28db004     add    fp, sp, #4
       10568:    e24dd008     sub    sp, sp, #8
       1056c:    e50b0008     str    r0, [fp, #-8]
       10570:    e50b100c     str    r1, [fp, #-12]
       10574:    ebffffd7     bl    104d8 
       10578:    e1a00003     mov    r0, r3
       1057c:    e24bd004     sub    sp, fp, #4
       10580:    e8bd8800     pop    {fp, pc}