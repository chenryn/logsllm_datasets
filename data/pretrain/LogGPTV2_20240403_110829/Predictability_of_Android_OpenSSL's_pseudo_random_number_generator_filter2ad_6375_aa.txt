title:Predictability of Android OpenSSL's pseudo random number generator
author:Soo Hyeon Kim and
Daewan Han and
Dong Hoon Lee
Predictability of Android OpenSSL’s Pseudo Random
Number Generator
The Attached Institute of ETRI
The Attached Institute of ETRI
Soo Hyeon Kim
(cid:3)
P.O. Box 1 Yuseong
Daejeon, South Korea
PI:EMAIL
Daewan Han
P.O. Box 1 Yuseong
Daejeon, South Korea
PI:EMAIL
Dong Hoon Lee
Graduate School of
Information Security
Korea University, South Korea
PI:EMAIL
ABSTRACT
OpenSSL is the most widely used library for SSL/TLS on the
Android platform. The security of OpenSSL depends greatly
on the unpredictability of its Pseudo Random Number Gen-
erator (PRNG). In this paper, we reveal the vulnerability of
the OpenSSL PRNG on the Android. We ﬁrst analyze the
architecture of the OpenSSL speciﬁc to Android, and the
overall operation process of the PRNG from initialization
until the session key is generated. Owing to the nature of
Android, the Dalvik Virtual Machine in Zygote initializes
the states of OpenSSL PRNG early upon booting, and SSL
applications copy the PRNG states of Zygote when they
start. Therefore, the applications that use OpenSSL gen-
erate random data from the same initial states, which is a
potential problem that may seriously aﬀect the security of
Android applications. Next, we investigate the possibility
of recovering the initial states of the OpenSSL PRNG. To
do so, we should predict the nine external entropy sources
of the PRNG. However, we show that these sources can be
obtained in practice if the device is ﬁxed. For example, the
complexity of the attack was O(232+t) in our smartphone,
where t is the bit complexity for estimating the system boot
time. In our experiments, we were able to restore the PRNG
states in 74 out of 100 cases. Assuming that we knew the
boot time, i.e., t = 0, the average time required to restore
was 35 min on a PC with four cores (eight threads). Finally,
we show that it is possible to recover the PreMasterSecret
of the ﬁrst SSL session with O(258) computations using the
restored PRNG states, if the application is implemented by
utilizing org.webkit package and a key exchange scheme is
RSA. It shows that the vulnerability of OpenSSL PRNG can
be a real threat to the security of Android.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection; C.2.2 [Computer-Communication
(cid:3)
This author is in the process of Korea University doctorate.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516706.
Networks]: Network Protocols—Applications; E.3 [Data]:
Data Encryption—Standards
Keywords
SSL/TLS; OpenSSL; Android; Pseudo Random Number Gen-
erator; Entropy
1.
INTRODUCTION
With the great evolution of wireless Internet, smartphones
and tablets have become popular communication devices.
While various mobile operating systems are currently avail-
able, as of the second quarter of 2013, Android has domi-
nated 79.3% of the smartphone market [5]. Because many
Android applications transfer sensitive data over the Inter-
net, their security is important which is an issue that has
attracted signiﬁcant attention.
SSL/TLS is one of the most important and well-known
cryptographic protocols for secure communication. It is used
by a variety of applications such as Web browsers, e-mail,
and mobile commerce. The security of SSL depends greatly
on the unpredictability of the Pseudo Random Number Gen-
erator (PRNG), because its outputs are used for generating
session keys. Several SSL applications have been weakened
owing to the lack of entropy of the PRNG [8, 17]. Therefore,
it is important to investigate the security of PRNG in An-
droid embedded devices. SSL is typically implemented us-
ing open libraries. In particular, OpenSSL [6] is widely used
for Android. Our study therefore focuses on the OpenSSL
PRNG on Android.
First, we studied the Android OpenSSL architecture and
tracked the overall operation process of its PRNG from ini-
tialization up to the generation of session key. This study
was conducted based on an analysis of the source codes,
and an experiment using an Android test board. As a re-
sult, we found that the OpenSSL PRNG is initialized by the
Zygote process upon the system boot, and that each appli-
cation initializes its own OpenSSL PRNG state by copying
the last state of Zygote. In other words, every SSL appli-
cation generates random data from the same initial state.
If an attacker can recover the state of the OpenSSL PRNG
from any application, he can predict the important values,
such as the encryption keys of the other applications.
Second, we intensively examined the entropy of external
sources injected into the OpenSSL PRNG in order to es-
timate the complexity of recovering the initial states. The
unpredictability of the OpenSSL PRNG is highly dependent
on the data read from the Android kernel PRNG (/dev/
urandom) at the system boot. However, we found that the
659Android kernel PRNG cannot be supplied with suﬃcient ex-
ternal entropy until /dev/urandom is input into the OpenSSL
PRNG. This vulnerability is regarded as the Android version
of the boot-time entropy hole of the Linux PRNG [17]. We
can therefore predict /dev/urandom upon booting without
much complexity. The other sources can be predicted from
ClientHello packets and the system information of the de-
vice. Roughly speaking, we claim that the initial states of
an Android OpenSSL PRNG can be recovered practically.
The exact attack complexity and strategy are described in
Section 4.
To verify our discovery, we conducted experiments on An-
droid smartphones following our attack strategy. We used
two phones of the same model: one as a target and the other
as a simulator. We acquired the information of the target
phone needed for the attack in advance based on the anal-
ysis of the simulator phone. We then recovered the initial
states of the target phone from the pre-acquired information
and a ClientHello packet. The details of this method and
its results are described in Section 5.
Finally, we analyzed that the vulnerability of the OpenSSL
PRNG can aﬀect the practical security of the Android de-
vice. When a PRNG generates random data for the PreMas-
terSecret (PMS), it uses the uninitialized memory values for
another external entropy sources. In Section 6, we describe
how these memory values can be predicted, and how the PMS
can be obtained from SSL packets.
In summary, the contributions of this paper are as follows.
(cid:15) We discovered that the OpenSSL PRNG of all Android
applications generate random data from the same ini-
tial states and that these states can be restored in prac-
tice. For example, the complexity was O(232+t) in our
phone, where t is the bit complexity for estimating the
boot time of the phone. This vulnerability is caused
by the Dalvik feature of the Android architecture, the
boot-time entropy hole of the kernel PRNG, and the
insuﬃcient external entropy of the OpenSSL PRNG.
(cid:15) We conﬁrmed our discovery experimentally using smart-
phones. We were able to restore the initial OpenSSL
PRNG states of applications in 74 out of 100 cases.
Assuming that we knew the boot time, that is t = 0,
the average time to restore the state was 35 min on a
single PC with four cores (eight threads).
(cid:15) We showed that it is possible to recover the PMS of the
ﬁrst SSL session with the restored OpenSSL PRNG
states and O(258) computations, if SSL is implemented
using the org.webkit package and the key exchange
scheme is RSA. The representative application aﬀected
is the default Web browser.
Since the vulnerability we discovered is derived from the
original structure of Android and the OpenSSL PRNG, it
aﬀects every Android application using OpenSSL. Further
studies on methods for allocating memory addresses such
as Address Space Layout Randomization (ASLR) may re-
duce the complexity or extend the aﬀected applications in
PMS recovery attacks. We therefore recommend that ade-
quate countermeasures should be adopted immediately, and
suggest some possible candidates in Section 7.
From this point, we refer to the Android kernel PRNG
that originated from Linux PRNG as LPRNG, and the An-
droid OpenSSL PRNG as APRNG.
Figure 1: The SSL Handshake protocol
2. BACKGROUND
2.1 SSL/TLS
SSL/TLS is composed of two protocols: a handshake pro-
tocol and a record protocol. The handshake protocol nego-
tiates security parameters, and authenticates the server and
the client. The record protocol provides the compression
and encryption of the application data. Herein, we brieﬂy
introduce the handshake protocol for further understanding
of this paper. The steps involved in the protocol are shown
in Figure 1.
1. The client sends a ClientHello message containing the
following attributes: a list of supported ciphersuites, a
session ID, and a 28-byte random nonce.
2. The server responds with a ServerHello message that
includes a chosen ciphersuite and a nonce. Then, the
server sends its identiﬁcation in the form of a certiﬁ-
cate list. Depending on the negotiated ciphersuite, a
ServerKeyExchange message may also be sent, which
contains the information to generate a PMS. Finally,
the server sends a ServerHelloDone message that in-
dicates the end of the negotiations.
3. The client uses a certiﬁcate to authenticate the server.
If it secceeds, the client generates the PMS and sends
a ClientKeyExchange message that contains the data
needed by the server to calculate the PMS. Next, it
sends a ChangeCipherSpec message in order to inform
the server that future messages will be encrypted us-
ing the negotiated session key. Finally,
it sends a
Finished message containing the MAC of all previ-
ously exchanged messages in the handshake protocol.
4. In response, the server sends a ChangeCipherSpec mes-
sage and its Finished message. Then, the Handshake
protocol is ﬁnished and a secure communication chan-
nel is established.
660Figure 2: The structure of LPRNG
2.2 LPRNG
LPRNG is commonly used for generating random data
needed in many secure services for a Linux kernel and ap-
plications. We brieﬂy introduce the structure of the latest
version of LPRNG according to [19].
It comprises three entropy pools: input_pool, blocking_
pool, and nonblocking_pool. Figure 2 shows the over-
all structure of LPRNG. Each entropy pool has its own
entropy_counter, which is decremented when its output
is extracted from the pool, and incremented when new en-
tropy is added. External entropy sources are mixed only in
input_pool, which transfers its entropy to blocking_pool
and nonblocking_pool. The external entropy is designed
to be supplied from system interrupts, the disk I/O, and
user inputs such as a keyboard or mouse, but some of them
may not used depending on the platform. LPRNG pro-
vides /dev/random and /dev/urandom, which are device in-
terfaces for reading random data. /dev/random reads from
blocking_pool, and returns random bytes only when suﬃ-
cient entropy has been collected. /dev/urandom reads from
nonblocking_pool, and returns random bytes regardless of
the amount of entropy generated.
2.3 Related Work
Ever since its introduction decades ago, many researchers
have been scrutinizing the security of SSL/TLS. As a result,
various weaknesses of the protocol have been revealed and
ﬁxed [10, 12, 13, 14, 18, 20, 21, 22]. Herein, we introduce a
few results that are most closely related to our research.
In 2008, Bello [8] observed that the PRNG of Debian
OpenSSL was predictable owing to an implementation bug.
Yilek et al.
[25] reported on the aftermath of this vulner-
ability. They predicted that the eﬀect of the vulnerabil-
ity on clients was limited because most of the popular Web
browsers at the time did not use OpenSSL. Nowadays, mo-
bile devices are becoming major tools for the Internet, and
OpenSSL is mostly used on these devices. Thus, if any vul-
nerability exists in OpenSSL, the clients will be aﬀected to
the same extent as the servers. Our discovery described in
this paper is an example of such vulnerability.
Figure 3: The architecture of Android OpenSSL
Heninger et al.
[17] analyzed the vulnerability of weak
public key pairs in network devices. They performed large-
scale scans of TLS certiﬁcates and SSH host keys. After
analyzing the scanned data, they discovered that there were
many vulnerable RSA and DSA keys of network devices, and
one of the reasons for this vulnerability was due to insuﬃ-
cient entropy of the LPRNG upon system booting. In our