spec:
  type: NodePort
  selector:
    app: mysql
  ports:
   - port: 3306
     targetPort: 3306
     nodePort: 30006
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: devops
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: StatefulSet
metadata:
  name: mysql
  namespace: devops
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql-svc"
  template:
    metadata:
      labels:
        app: mysql # has to match .spec.selector.matchLabels
    spec:
      containers:
      - image: core.harbor.domain/mogublog/mysql:latest
        imagePullPolicy: IfNotPresent
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: "123456"   # mysql初始化密码
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: managed-nfs-storage    # 这边必须和storageClass一致
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: managed-nfs-storage 
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "managed-nfs-storage" # 名字为我们上面创建的StorageClass的名字
      resources:
        requests:
          storage: 5Gi
[root@k8s-master1 mysql]# kubectl apply -f mysql-dev.yaml
[root@k8s-master1 mysql]# kubectl get po -n devops |grep mysql
mysql-0                                     1/1     Running   0          31s
[root@k8s-master1 mysql]# kubectl get svc -n devops |grep mysql
mysql-headless              ClusterIP   None                    3306/TCP            34s
mysql-svc                   NodePort    10.102.7.204            3306:30006/TCP      34s
4.测试登陆连接数据库
远程连接登陆MySQL数据库
192.168.229.4
30006
root  123456
```
![image-20220303004135617](%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.assets/image-20220303004135617.png)
```shell
5.创建数据库nacos_config,导入数据库表
进入mysql-pod
# mysql -uroot -p"123456"
mysql> CREATE DATABASE nacos_config CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
mysql> use nacos_config;
mysql> source /root/nacos-mysql.sql   # 导入nacos数据库
mysql> show tables;
+-------------------------+
| Tables_in_nacos_devtest |
+-------------------------+
| config_info             |
| config_info_aggr        |
| config_info_beta        |
| config_info_tag         |
| config_tags_relation    |
| group_capacity          |
| his_config_info         |
| permissions             |
| roles                   |
| tenant_capacity         |
| tenant_info             |
| users                   |
+-------------------------+
```
### 5.部署sts-nacos单节点服务
```shell
1.导入镜像上传镜像至harbor仓库
[root@k8s-master1 nacos]# docker load -i nacos-server-latest.tar 
[root@k8s-master1 nacos]# docker tag registry.cn-shenzhen.aliyuncs.com/mogublog/nacos-server:latest  core.harbor.domain/mogublog/nacos-server:latest
[root@k8s-master1 nacos]# docker push core.harbor.domain/mogublog/nacos-server:latest
[root@k8s-master1 nacos]# cat nacos-dev.yaml 
---
apiVersion: v1
kind: Service
metadata:
  name: nacos
  namespace: devops
  labels:
    app: nacos
spec:
  type: NodePort
  ports:
    - port: 8848
      name: server
      targetPort: 8848
      nodePort: 30018
    - port: 7848
      name: rpc
      targetPort: 7848
      nodePort: 30019
  selector:
    app: nacos
---
apiVersion: v1
kind: Service
metadata:
  name: nacos-headless
  namespace: devops
  labels:
    app: nacos
spec:
  ports:
    - port: 8848
      name: server
      targetPort: 8848
    - port: 7848
      name: rpc
      targetPort: 7848
  clusterIP: None
  selector:
    app: nacos
---
# 链接mysql数据库
apiVersion: v1
kind: ConfigMap
metadata:
  name: nacos-cm
  namespace: devops
data:
  mysql.db.name: "nacos_config"
  mysql.port: "3306"
  mysql.user: "root"
  mysql.password: "123456"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nacos
  namespace: devops
spec:
  serviceName: nacos-headless
  replicas: 1
  template:
    metadata:
      labels:
        app: nacos
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - nacos
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: nacos
          imagePullPolicy: IfNotPresent
          image: core.harbor.domain/mogublog/nacos-server:latest
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
          ports:
            - containerPort: 8848
              name: client-port
            - containerPort: 7848
              name: rpc
          env:
            - name: NACOS_REPLICAS
              value: "1"
            - name: MYSQL_SERVICE_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: nacos-cm
                  key: mysql.db.name
            - name: MYSQL_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: nacos-cm
                  key: mysql.port
            - name: MYSQL_SERVICE_USER
              valueFrom:
                configMapKeyRef:
                  name: nacos-cm
                  key: mysql.user
            - name: MYSQL_SERVICE_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: nacos-cm
                  key: mysql.password
            - name: NACOS_SERVER_PORT
              value: "8848"
            - name: NACOS_APPLICATION_PORT
              value: "8848"
            - name: PREFER_HOST_MODE
              value: "hostname"
            - name: TZ
              value: Asia/Shanghai
            - name: MODE
              value: standalone
          volumeMounts:
            - name: datadir
              mountPath: /home/nacos/data
            - name: logdir
              mountPath: /home/nacos/logs
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
          volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: 3Gi
    - metadata:
        name: logdir
        annotations:
          volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
      spec:
        accessModes: [ "ReadWriteMany" ]
        resources:
          requests:
            storage: 3Gi
  selector:
    matchLabels:
      app: nacos
[root@k8s-master1 nacos]# kubectl apply -f nacos-dev.yaml 
[root@k8s-master1 nacos]# kubectl get po,svc -n devops |grep nacos
pod/nacos-0                                     1/1     Running   0          4m22s
service/nacos                       NodePort    10.109.70.135           8848:30018/TCP,7848:30019/TCP   4m22s
service/nacos-headless              ClusterIP   None                    8848/TCP,7848/TCP               4m22s
浏览器访问
http://192.168.229.3:30018/nacos
```
![image-20220303135516446](%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.assets/image-20220303135516446.png)
创建nacos命名空间
![image-20220303145524293](%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.assets/image-20220303145524293.png)
![image-20220303145655984](%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.assets/image-20220303145655984.png)
手动导入nacos配置
![image-20220303160235177](%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.assets/image-20220303160235177.png)
### 6.部署sts-redis单节点服务
参考文档：[(4条消息) k8s部署redis statefulset应用_学亮编程手记-CSDN博客_k8s部署redis](https://zhangxueliang.blog.csdn.net/article/details/118576012?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~HighlightScore-8.queryctrv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~HighlightScore-8.queryctrv2&utm_relevant_index=14)
```shell
1.上传镜像
[root@k8s-master1 redis]# docker tag busybox:latest  core.harbor.domain/mogublog/busybox:latest
[root@k8s-master1 redis]# docker push core.harbor.domain/mogublog/busybox:latest
[root@k8s-master1 redis]# docker tag redis:5.0.5-alpine    core.harbor.domain/mogublog/redis:5.0.5-alpine
[root@k8s-master1 redis]# docker push core.harbor.domain/mogublog/redis:5.0.5-alpine
[root@k8s-master1 redis]# cat redis-dev.yaml 
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-conf
  namespace: devops
data:
  redis.conf: |
        bind 0.0.0.0
        port 6379
        requirepass 123456
        pidfile .pid
        appendonly yes
        cluster-config-file nodes-6379.conf
        pidfile /data/middleware-data/redis/log/redis-6379.pid
        cluster-config-file /data/middleware-data/redis/conf/redis.conf
        dir /data/middleware-data/redis/data/
        logfile "/data/middleware-data/redis/log/redis-6379.log"
        cluster-node-timeout 5000
        protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: devops
spec:
  replicas: 1
  serviceName: redis
  selector:
    matchLabels:
      name: redis
  template:
    metadata:
      labels:
        name: redis
    spec:
      initContainers:
      - name: init-redis
        image: busybox:latest
        command: ['sh', '-c', 'mkdir -p /data/middleware-data/redis/log/;mkdir -p /data/middleware-data/redis/conf/;mkdir -p /data/middleware-data/redis/data/']
        volumeMounts:
        - name: data
          mountPath: /data/middleware-data/redis/
      containers:
      - name: redis
        image: redis:5.0.5-alpine
        #image: docker.io/redis:5.0.5-alpine
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - "exec redis-server /data/middleware-data/redis/conf/redis.conf"
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        volumeMounts:
        - name: redis-config
          mountPath: /data/middleware-data/redis/conf/
        - name: data
          mountPath: /data/middleware-data/redis/
      volumes:
      - name: redis-config
        configMap:
          name: redis-conf
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "managed-nfs-storage" # 名字为我们上面创建的StorageClass的名字
      resources:
        requests:
          storage: 3Gi
---
# 内部访问的无头服务
apiVersion: v1
kind: Service
metadata:
  labels:
    name: redis
  name: redis-service
  namespace: devops
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
  clusterIP: None
---
kind: Service
apiVersion: v1