Informally, the correctness of the protocol follows from Theo-
rem 3 and 6. The protocol produces a garbled Bloom ﬁlter that
encodes C ∩ S, then by querying it the client can obtain the cor-
rect intersection except for a negligible probability. To see why the
protocol is secure, notice that the only messages being sent in the
protocol are the messages in the OT protocol. The client’s privacy
is protected because the server learns no information about BFC
in the OT execution. The server’s privacy is protected because the
client receives only GBF π
C∩S from the server and it contains only
information about elements in C ∩ S.
The reader may have noticed that the OT protocol can also be
used to AND two Bloom ﬁlters in a similar way and create an inter-
section Bloom ﬁlter BFC∩S on the client side. Then do we really
need the garbled Bloom ﬁlter? Can the server just encode its set
into a Bloom ﬁlter and run the protocol? The quick answer is we
do need the garbled Bloom ﬁlter. BFC∩S leaks information about
the server’s set because it contains more 1 bits than the Bloom ﬁlter
built from scratch using C ∩ S. The expected number of additional
1 bits is (tS −t∩)(tC −t∩)
, where tS, tC, t∩ are the number of 1 bits
in BFS, BFC and the the Bloom ﬁlter built from scratch using
C ∩ S respectively [37]. The additional knowledge the client gets
is the additional 1 bits in BFC∩S.
m−t∩
The protocol makes a single call to OT m
λ , so the efﬁciency de-
pends largely on the efﬁciency of the underlying OT protocol. If
we use the semi-honest OT extension protocol from [26] and the
Naor-Pinkas OT [34], then:
Computational complexity: To build BFC or GBFS, each party
needs k · n hash operations. Then the server needs λ public key op-
erations and the client need 2λ public key operations for the Naor-
Pinkas OT, and both parties need m = kn log2 e ≈ 1.44kn hash
operations for the OT extension.
Memory complexity: The client needs to keep a copy of the Bloom
ﬁlter and a copy of the intersection Garbled Bloom ﬁlter which
in total need at most (λ + 1)m bits. This can be optimized to
(λ/2 + 1)m bits because the client can throw away the string re-
ceived when BFC[i] = 0 and leave GBF π
C∩S[i] = N U LL. The
server needs to store the garbled Bloom ﬁlter that is λ · m bits.
Communication complexity: The main data sent in the protocol
is a bit matrix required by the OT extension and the strings sent
by the server in the OT extension. In total 2λ · m bits. All other
communication costs are much less signiﬁcant and can be ignored.
A quick asymptotic costs comparison of Huang’s, De Cristo-
faro’s and our basic protocol is shown in Table 1.
4.4 Security Analysis
Now we sketch the security proof of the basic protocol. The ba-
sic protocol is secure in the semi-honest model. The main theorem
is stated below:
THEOREM 7. Let C, S be two sets from a predeﬁned universe,
f∩ be the set intersection function deﬁned as:
f∩(C, S) = (fC (C, S), fS(C, S)) = (C ∩ S, Λ).
PROOF. (sketch) If the OT m
snd that is guaranteed to exist. SimS obtains SimOT
λ is secure then the simulators for
the sender and receiver are guaranteed to exist, we can use them as
subroutines when constructing our simulators.
Server’s view We start from the case in which the server is cor-
rupted. We construct a simulator SimS that receives the server’s
private input and output and generates the view of the server in the
protocol. Given S, the simulator SimS uniformly chooses its ran-
dom coins rs and generates the garbled Bloom ﬁlter GBFS that
encodes its set S. Then SimS invokes the simulator of the OT
sender SimOT
snd’s
view for the OT protocol. Finally SimS outputs the simulated view:
(S, rs, SimOT
snd(GBFS, Λ)). We then need to show that the view is
indistinguishable from a view in an execution of π∩. A view of the
real protocol execution contains the input S, the random coins and
the messages in the OT protocol. In the simulated view, the input
set S is the same as in the view of a real execution, the outcome of
internal random coins rs is uniformly random thus the distribution
is the same as in a real execution. As the OT protocol is secure,
then the distribution of the view produced by SimOT
snd(GBFS, Λ)
should be indistinguishable from the view in a real execution of
the OT protocol. Thus we conclude the simulated view is indistin-
guishable from a real view.
Client’s view We construct a simulator SimC that is given the
client’s private input C and the output C ∩ S. SimC chooses its
random coins rc. It then generates the Bloom ﬁlter BFC to en-
code its set and the garbled Bloom ﬁlter GBFC∩S from scratch
It then invokes the simulator of the OT re-
using Algorithm 1.
ceiver SimOT
rec with BFC and GBFC∩S. SimC obtains the view
for the OT protocol. Finally SimC outputs the simulated view:
(C, rc, GBFC∩S, SimOT
rec (BFC, GBFC∩S)). The view of a real
protocol execution contains the input set C, the random coins, the
garbled Bloom ﬁlter GBF π
C∩S, and the messages in the OT proto-
col. In the simulated view, the input set C and rc should be indis-
tinguishable from the counter parts in the real view. The garbled
Bloom ﬁlter GBFC∩S is indistinguishable from GBF π
C∩S as we
have shown in Theorem 4 and 6. The rest parts in the views are the
simulated OT messages and the OT messages in the real execution.
As the OT protocol is secure, then they should be indistinguishable.
Thus we conclude the simulated view is indistinguishable from a
real view.
Combine the above, we conclude that:
{SimS (S, fS (C, S)}C,S
{SimC (C, fC (C, S))}C,S
and ﬁnish our proof.
c
≡ {viewπ
c
≡ {viewπ
S(C, S)}C,S
C (C, S)}C,S
5. THE ENHANCED PROTOCOL
In this section, we present a fully secure PSI protocol whose
security holds in the presence of malicious parties. The protocol is
shown in Figure 3. The security model and proof can be found in
the full version [19].
In the basic protocol, the interaction between the two parties is
essentially an oblivious transfer. At the ﬁrst glance, it seems that
we can easily obtain a fully secure protocol by replacing the semi-
honest OT protocol with one that is secure against malicious par-
ties. However, this is not enough. A fully secure OT protocol can
prevent malicious behaviors such as changing input during the pro-
tocol execution but it cannot prevent a malicious client from mount-
ing a full universe attack.
795Server’s input: Set S
Client’s input: Set C
Auxiliary input: the security parameter λ , parameters for BF and GBF n, k = λ, m = 2kn, H = {h0, . . . , hk−1}, a secure block cipher E.
1. The client generates a Bloom ﬁlter BFC . The client then generates m λ-bit random strings, say r0, ...rm−1. The client sends the random strings
to the server.
2. The server generates the garbled Bloom ﬁlter GBFS . The server generates a random key sk for the block cipher E. For 0 ≤ i ≤ m − 1, the
server computes ci = E(sk, ri||GBFS[i]). The server also uses a (m/2, m)-secret sharing scheme to split sk into m shares (t0, ..., tm−1).
3. The server and the client engage in an OT protocol that is secure against malicious parties. The client uses BFC as the selection string and
the server uses as input two sets of strings ci and ti (0 ≤ i ≤ m − 1). As a result of the protocol, if BFC [i] = 1, the client receives ci; if
BFC [i] = 0,the client receives ti.
4. The client recovers sk from the shares it received in the OT. The client creates a garbled Bloom ﬁlter GBFC∩S of size m as follows. For
r
← {0, 1}λ; if BFC [i] = 1, the client decrypts ci and gets di = E−1(sk, ci), checks
0 ≤ i ≤ m − 1 if BFC [i] = 0 then GBFC∩S[i]
whether the ﬁrst λ-bit equals ri that is sent in step 1. If yes then skip the ﬁrst λ bits in di and copy the second λ bits to GBFC∩S [i]. Otherwise
output ⊥ and terminate. Finally, the client queries GBFC∩S with its own set C and outputs C ∩ S.
Figure 3: The Enhanced PSI protocol
In a full universe attack, a malicious client encodes the full uni-
verse of all possible elements in its Bloom ﬁlter and uses it in the
PSI protocol to learn the server’s entire set. A Bloom ﬁlter can eas-
ily represent the full universe by setting all the bits to 1. This is a
special feature of Bloom ﬁlters and it causes a problem when we
try to construct a simulator for the client in the malicious model.
Namely, when the adversary uses the all-one Bloom ﬁlter, the sim-
ulator needs to enumerate all elements in the universe and send
them to the trusted party in the ideal process. Without making any
assumptions, the universe is potentially too large and a polynomial
time algorithm may fail to enumerate all elements.
To prevent the full universe attack, we add a step to make sure
that the client’s Bloom ﬁlter is not all-one. More speciﬁcally, the
server uses a symmetric key block cipher to encrypt strings in its
garbled Bloom ﬁlter before transferring them to the client. It forces
the client to behave honestly by splitting the key into m shares us-
ing a (m/2, m)-secret sharing scheme. The client uses the bit array
in its Bloom ﬁlter as the selection string to receive the intersection
garbled Bloom ﬁlter and the shares of the key. If the bit in the se-
lection string is 0, the client receives a share of the key; if the bit is
1, the client receives an encrypted string in GBFS . The intuition is
that if the client cheats by using an all-one Bloom ﬁlter, it will not
be able to gather enough shares to recover the key, and thus will not
be able to decrypt the encrypted garbled Bloom ﬁlter. In the proto-
col we set m = 2kn in order to make sure that the client’s Bloom
ﬁlter has at least m/2 0 bits to receive enough shares to recover
the key. Since the client has at most n elements and each element
needs to be hashed k times, then the number of 1 bits in BFC will
never exceed kn = m/2, consequently the number of 0 bits will
always be at least m/2. Although in this setting m is not optimal,
the overhead is acceptable given the optimal number of m is about
1.44kn.
The added step will not affect the client’s privacy, but may affect
the correctness of the protocol if a malicious server sends wrong
shares of the key or uses a different key to encrypt its garbled
Bloom ﬁlter. The client cannot detect it because the key is ran-
dom and the strings in the garbled Bloom ﬁlter look random. To
prevent this malicious behavior, we also require the client to send
m λ-bit random strings (r0, ..., rm−1) to the server before the OT.
For each GBFS[i], the server encrypts ri||GBFS [i] (|| means con-
catenation) and sends the ciphertext in the OT. After the transfer,
the client can recover the key and decrypt the received ciphertexts.
If the server is honest, then the client can correctly decrypt using
the key it recovered and ri should present in the decrypted mes-
80
128
192
256
Ours
SHA-1, NIST P-192
curve
SHA-1 (ﬁlter), SHA-
256 (OT), NIST P-256
curve
SHA-1 (ﬁlter), SHA-
384 (OT), NIST P-384
curve
SHA-1 (ﬁlter), SHA-
512 (OT), NIST P-521
curve
De Cristofaro’s
RSA 1024, SHA-1
RSA 3072, SHA-1
Huang’s
1024-bit p, 160-bit q,
SHA-1
3072-bit p, 256-bit q,
SHA-1
RSA 7680, SHA-1
7680-bit p, 384-bit q,
SHA-256
RSA 15360, SHA-1
15360-bit p, 512-bit q,
SHA-256
Table 2: Security parameters and settings
sage. For each garbled Bloom ﬁlter string the client received, the
probability of the server getting away with cheating is 2−λ.
Efﬁciency In [26] a fully secure version of the OT extension pro-
tocol is given. It uses the cut-and-choose approach to ensure a ma-
licious party can cheat with at most 2−Ω(λ) probability. The ma-
jor overhead of the fully secure protocol is introduced by the non-
optimal m and cut-and-choose, which increase the communication
and computation complexity of the semi-honest one by a factor of
1.4λ. Overhead introduced by other parts of our protocol is small.
The additional computational overhead in our protocol includes:
the server needs to perform m encryptions and to use the threshold
secret sharing scheme to split the key, the client needs to perform
m/2 decryptions, to recover the key. The additional communica-
tion overhead in our protocol includes: m · λ bits for sending the
random strings of in step 1.
6.
IMPLEMENTATION AND EVALUATION
6.1 Implementation
We have implemented a prototype of the basic protocol in C.
The source code (and its Java port) is released online1.
It uses
OpenSSL (1.0.1e) for the cryptographic operations. We currently
use keyed SHA-1 to build/query Bloom ﬁlters and garbled Bloom
ﬁlters2. Namely each hi(x) is instantiated as sha1(si||x) mod m,
where si is a unique salt. We implement the semi-honest OT ex-
tension protocol [26] on top of the Naor-Pinkas OT protocol [34].
1http://personal.cis.strath.ac.uk/changyu.dong/PSI/PSI.html
2Cryptographically strong hash functions are not necessary here.
Later we will change to more efﬁcient hash functions e.g. Mur-
murHash [2] that has been used by Apache Hadoop and Cassandra
in their Bloom ﬁlter implementation.
7961800
1600
1400
1200
1000
800
600
400
200
)
c
e
S
(
e
m
T
i
0
256
192
128
80
1,024
1,048,576
262,144
65,536
16,384
4,096
Set Size
Security Level
(a) Performance: the pipelined mode
(b) Running time of each step in the pipelined mode
350
300
250
200
150
100
50
)
c
e
S
(
e