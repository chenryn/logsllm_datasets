52
Table 1: Enclave response time t, with proﬁling breakdown. All times are in milliseconds. We executed 500
experimental runs, and report the statistics including the average (mean), proportion (%), maximum (tmax),
minimum (tmin), and standard deviation (σt). Note that Total is the end-to-end response time as deﬁned in
Enclave Response Time. Times may not sum to this total due to minor unproﬁled overhead.
and its maximum throughput (with full block utilization) is
roughly 7 tx/sec. We know of no measurement study of the
throughput bound of the Ethereum peer-to-peer network.
Recent work [19] indicates that Bitcoin cannot scale beyond
26 tx/sec without a protocol redesign. Thus, with few hosts
TC can easily meet the data feed demands of even future
decentralized blockchains.
Gas Costs. Currently 1 gas costs 5 × 10−8 Ether, so at
the exchange rate of $15 per Ether, $1 buys 1.3 million gas.
Here we provide costs for our implementation components.
The callback-independent portion of Deliver costs about
35,000 gas (2.6¢), so this is the value of $Gmin. We set
$Gmax = 3,100,000 gas ($2.33), as this is approximately
Ethereum’s maximum GASLIMIT. The cost for executing Re-
quest is approximately 120,000 gas (9¢) of ﬁxed cost, plus
2500 gas (0.19¢) for every 32 bytes of request parameters.
The cost to execute Cancel is 62500 gas (4.7¢) including
the gas cost $Gcncl and the refund $G∅ paid to TC should
Deliver be called after Cancel.
The total callback-independent cost of acquiring a data-
gram from TC (i.e., the cost of the datagram, not the appli-
cation) ranges from 11.9¢ (CashSettledPut) to 12.9¢ (Steam-
Trade)4. The variation results from diﬀering parameter lengths.
Component-Compromise Resilience. For the CashSet-
tledPut application, we implemented and evaluated two modes
of majority voting (as in Section 6.2):
• 2-out-of-3 majority voting within the enclave, providing
robustness against data-source compromise. In our exper-
iments the enclave performed simple sequential scraping
of current stock prices from three diﬀerent data sources:
Bloomberg, Google Finance and Yahoo Finance. The en-
clave response time is roughly 1743 (109) ms in this case
(c.f. 1058 (88), 423 (34) and 262 (12) ms for each respec-
tive data source). There is no change in gas cost, as voting
is done inside the SGX enclave. In the future, we will in-
vestigate parallelization of SGX’s thread mechanism, with
careful consideration of the security implications.
• 2-out-of-3 majority voting within the requester contract,
which provides robustness against SGX compromise. We
ran three instances of SGX enclaves, all scraping the same
data source. In this scenario the gas cost would increase by
a factor of 3 plus an additional 5.85¢. So CashSettledPut
would cost 35.6¢ for Deliver without Cancel. The extra
5.85¢ is the cost to store votes until a winner is known.
Oﬄine Measurements. Recall that an enclave requires
4This cost is for 1 item. Each additional item costs 0.19¢.
a one-time setup operation that involves attestation gener-
ation. Setting up the TC Enclave takes 49.5 (7.2) ms and
attestation generation takes 61.9 (10.7) ms, including 7.65
(0.97) ms for the report, and 54.9 (10.3) ms for the quote.
Recall also that since clock() yields only relative time in
SGX, TC’s absolute clock is calibrated through an exter-
nally furnished wall-clock timestamp. A user can verify the
correctness of the Enclave absolute clock by requesting a
digitally signed timestamp. This procedure is, of course,
accurate only to within its end-to-end latency. Our experi-
ments show that the time between Relay transmission of a
clock calibration request to the enclave and receipt of a re-
sponse is 11.4 (1.9) ms of which 10.5 (1.9) ms is to sign the
timestamp. To this must be added the wide-area network
roundtrip latency, rarely more than a few hundred millisec-
onds.
9. RELATED WORK
Virtual Notary [6, 26] is an early online data attestation
service that veriﬁes and digitally signs any of a range of
user-requested “factoids” (web page contents, stock prices,
etc.) potentially suitable for smart contracts. It predates
and does not at present interface with Ethereum.
Several data feeds are deployed today for smart contract
systems such as Ethereum. Examples include PriceFeed [3]
and Oraclize.it [7]. The latter achieves distributed trust by
using a second service called TLSnotary [5], which digitally
signs TLS session data. As a result, unlike TC which can
ﬂexibly tailor datagrams, Oraclize.it must serve data ver-
batim from a web session or API call; verbose sources thus
mean superﬂuous data and inﬂated gas costs. Additionally,
these services ultimately rely on the reputations of their
(small) providers to ensure data authenticity and cannot
support private or custom datagrams. Alternative systems
such as SchellingCoin [13] and Augur [2] rely on prediction
markets to decentralize trust, creating a heavy reliance on
human input and severely constraining their scope and data
types.
Despite an active developer community, research results
on smart contracts are limited. Work includes oﬀ-chain con-
tract execution for conﬁdentiality [27], and, more tangen-
tially, exploration of e.g., randomness sources in [11]. The
only research involving data feeds to date explores criminal
applications [25].
SGX is similarly in its infancy. While a Windows SDK [23]
and programming manual [21] have just been released, a
number of pre-release papers have already explored SGX,
e.g., [8, 28, 30, 32, 38]. Researchers have demonstrated ap-
280plications including enclave execution of legacy (non-SGX)
code [10] and use of SGX in a distributed setting for map-
reduce computations [32]. Several works have exposed short-
comings of the security model for SGX [18,33,34], including
side-channel attacks against enclave state.
10. FUTURE WORK
We plan to develop TC after its initial deployment to in-
corporate a number of additional features. We discuss a few
of those features here.
Freeloading Protection. There are concerns in the Ethereum
community about “parasite contracts” that forward or re-
sell datagrams from fee-based data feeds [36]. As a coun-
termeasure, we plan to deploy the following mechanism in
TC inspired by designated veriﬁer proofs [24]. The set of n
users U = {U1, . . . , Un} of a requesting contract generate an
(n, n)-secret-shared key pair (skU , pkU ). They submit their
n individual shares to the TC Enclave (e.g., as ciphertexts
under pkTC sent to CTC ).
TC now can sign datagrams using skU . Each user Ui
can be sure individually that a datagram produced by TC
is valid, since she did not collude in its creation. Poten-
tial parasitic users, however, cannot determine whether the
datagram was produced by CTC or by U, and thus whether
or not it is valid. Such a source-equivocal datagram renders
parasite contracts less trustworthy and thus less attractive.
Revocation Support. There are two forms of revocation
relevant to TC. First, the certiﬁcates of data sources may
be revoked. Since TC already uses HTTPS, it could easily
use the Online Certiﬁcate Status Protocol (OCSP) to check
TLS certiﬁcates. Second, an SGX host could become com-
promised, prompting revocation of its EPID signatures by
Intel. The Intel Attestation Service (IAS) will reportedly
disseminate such revocations. Conveniently, clients already
use the IAS when checking the attestation σatt, so revoca-
tion checking will require no modiﬁcation to TC.
Hedging Against SGX Compromise. We discussed in
Section 6.2 how TC can support majority voting across SGX
hosts and data sources. Design enhancements to TC could
reduce associated latency and gas costs. For SGX voting,
we plan to investigate a scheme in which SGX-enabled TC
hosts agree on a datagram value X via Byzantine consensus.
The hosts may then use a threshold digital signature scheme
to sign the datagram response from WTC , and each partici-
pating host can monitor the blockchain to ensure delivery.
Updating TC’s Code. As with any software, we may
discover ﬂaws in TC or wish to add new functionality after
initial deployment. With TC as described above, however,
updating progencl would cause the Enclave to lose access to
skTC and thus be unable to respond to requests in CTC . The
TC operators could set up a new contract C(cid:48)
TC referencing
new keys, but this would be expensive and burdensome for
TC’s operators and users. While arbitrary code changes
would be insecure, we could create a template for user con-
tracts that includes a means to approve upgrades. We plan
to investigate this and other mechanisms.
Generalized Custom Datagrams and Within-Enclave
Smart-Contract Execution. In our SteamTrade example
contract we demonstrated a custom datagram that scrapes a
user’s online account using her credentials. A more generic
approach would allow users to supply their own general-
purpose code to TC and data-source-enriched emulation of
private contracts as in Hawk [27], but with considerably
less computational overhead. Placing such large requests on
the blockchain would be prohibitively expensive, but code
could easily be loaded into the TC enclave oﬀ-chain. Of
course, deploying arbitrary user code raises many security
and conﬁdentiality concerns which TC would need to ad-
dress. TC oﬀers a basic framework, however, within which
to provide conﬁdential, integrity-protected smart-contract
code execution oﬀ-chain with trustworthy integration into
on-chain smart-contract code.
11. CONCLUSION
We have introduced Town Crier (TC), an authenticated
data feed for smart contracts speciﬁcally designed to support
Ethereum. Use of Intel’s new SGX trusted hardware allows
TC to serve datagrams with a high degree of trustworthiness.
We deﬁned gas sustainability, a critical availability property
of Ethereum services, and provided techniques for shrinking
the size of a hybrid TCB spanning the blockchain and an
SGX. We proved in a formal model that TC serves only data
from authentic sources, and showed that TC is gas sustain-
able and minimizes cost to honest users should the code be-
have maliciously. In experiments involving end-to-end use of
the system with the Ethereum blockchain, we demonstrated
TC’s practicality, cost eﬀectiveness, and ﬂexibility for three
example applications. We believe that TC oﬀers a power-
ful, practical means to address the lack of trustworthy data
feeds hampering Ethereum evolution today and that it will
support a rich range of applications. Pending deployment of
the Intel Attestation Service (IAS), we will make a version
of TC freely available as a public service.
Acknowledgements
This work is funded in part by NSF grants CNS-1314857,
CNS-1330599, CNS-1453634, CNS-1518765, CNS-1514261,
a Packard Fellowship, a Sloan Fellowship, Google Faculty
Research Awards, and a VMWare Research Award. Our
thanks also to Andrew Miller and Gun Sirer for their very
helpful insights and comments on this work.
12. REFERENCES
[1] http://coinmarketcap.com/currencies/ethereum.
[2] Augur. http://www.augur.net/.
[3] PriceFeed smart contract. Referenced Feb. 2016 at
http://feed.ether.camp/.
[4] Steam online gaming platform.
http://store.steampowered.com/.
[5] TLSnotary – a mechanism for independently audited
https sessions. https://tlsnotary.org/TLSNotary.pdf,
10 Sept. 2014.
[6] Cornell researchers unveil a virtual notary. Slashdot,
20 June 2013.
[7] Oraclize: “The provably honest oracle service”.
www.oraclize.it, Referenced Feb. 2016.
[8] I. Anati, S. Gueron, and S. Johnson. Innovative
technology for CPU based attestation and sealing. In
Proceedings of the 2nd International Workshop on
Hardware and Architectural Support for Security and
Privacy, 2013.
281[9] ARM Limited. mbedTLS (formerly known as
[26] A. Kelkar, J. Bernard, S. Joshi, S. Premkumar, and
PolarSSL). https://tls.mbed.org/.
[10] A. Baumann, M. Peinado, and G. Hunt. Shielding
Applications from an Untrusted Cloud with Haven. In
OSDI, 2014.
[11] J. Bonneau, J. Clark, and S. Goldfeder. On bitcoin as
a public randomness source.
https://eprint.iacr.org/2015/1015.pdf, 2015.
[12] E. Brickell and J. Li. Enhanced Privacy ID from
Bilinear Pairing. IACR Cryptology ePrint Archive,
2009:95, 2009.
[13] V. Buterin. Schellingcoin: A minimal-trust universal
data feed. https://blog.ethereum.org/2014/03/28/
schellingcoin-a-minimal-trust-universal-data-feed/.
[14] V. Buterin. Ethereum: A next-generation smart
contract and decentralized application platform. https:
//github.com/ethereum/wiki/wiki/White-Paper,
2014.
[15] R. Canetti. Universally composable security: A new
paradigm for cryptographic protocols. In FOCS, 2001.
[16] R. Canetti, Y. Dodis, R. Pass, and S. Walﬁsh.
Universally composable security with global setup. In
Theory of Cryptography, pages 61–85. Springer, 2007.
[17] R. Canetti and T. Rabin. Universal composition with
joint state. In CRYPTO, 2003.
[18] V. Costan and S. Devadas. Intel sgx explained.
Cryptology ePrint Archive, Report 2016/086, 2016.
http://eprint.iacr.org/.
[19] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels,
A. Kosba, A. Miller, P. Saxena, E. Shi, E. G. Sirer,
D. Song, and R. Wattenhofer. On scaling decentralized
blockchains (a position paper). In Bitcoin Workshop,
2016.
[20] G. Greenspan. Why many smart contract use cases
are simply impossible. http://www.coindesk.com/
three-smart-contract-misconceptions/.
[21] Intel Corporation. Intel
Software Guard Extensions
Programming Reference, 329298-002us edition, 2014.
Software Guard Extensions
[22] Intel Corporation. Intel
®
®
®
Evaluation SDK User’s Guide for Windows* OS.
https://software.intel.com/sites/products/
sgx-sdk-users-guide-windows, 2015.
[23] Intel Corporation. Intel
Software Guard Extensions
SDK. https://software.intel.com/en-us/sgx-sdk, 2015.
[24] M. Jakobsson, K. Sako, and R. Impagliazzo.
Designated veriﬁer proofs and their applications. In
Advances in Cryptology – EUROCRYPT ’96, pages
143–154. Springer, 2001.
[25] A. Juels, A. Kosba, and E. Shi. The Ring of Gyges:
Investigating the future of criminal smart contracts.
Online manuscript, 2015.
E. G. Sirer. Virtual Notary.
http://virtual-notary.org/, 2016.
[27] A. Kosba, A. Miller, E. Shi, Z. Wen, and
C. Papamanthou. Hawk: The blockchain model of
cryptography and privacy-preserving smart contracts.
In IEEE Symposium on Security and Privacy, 2016.
[28] F. McKeen, I. Alexandrovich, A. Berenzon, C. V.
Rozas, H. Shaﬁ, V. Shanbhogue, and U. R.
Savagaonkar. Innovative instructions and software
model for isolated execution. In Proceedings of the 2nd
International Workshop on Hardware and
Architectural Support for Security and Privacy, 2013.
[29] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash
system. 2008.
[30] V. Phegade and J. Del Cuvillo. Using innovative
instructions to create trustworthy software solutions.
In Proceedings of the 2nd International Workshop on
Hardware and Architectural Support for Security and
Privacy, pages 1–1, New York, New York, USA, 2013.
ACM Press.
[31] X. Ruan. Platform Embedded Security Technology
Revealed: Safeguarding the Future of Computing with
Intel Embedded Security and Management Engine.
Apress, 2014.
[32] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis,
M. Peinado, G. Mainar-Ruiz, and M. Russinovich.
VC3: Trustworthy data analytics in the cloud. In
IEEE S& P, 2015.
[33] E. Shi. Trusted hardware: Life, the composable
university, and everything. Talk at the DIMACS
Workshop on Cryptography and Big Data, 2015.
[34] E. Shi, F. Zhang, R. Pass, S. Devadas, D. Song, and
C. Liu. Trusted hardware: Life, the composable
universe, and everything. Manuscript, 2015.
[35] N. Szabo. Smart contracts.
http://szabo.best.vwh.net/smart.contracts.html, 1994.
[36] K. Torpey. The conceptual godfather of augur thinks
the project will fail. CoinGecko, 5 Aug. 2015.
[37] G. Wood. Ethereum: A secure decentralised
generalised transaction ledger. Ethereum Project
Yellow Paper, 2014.
[38] Y. Xu, W. Cui, and M. Peinado. Controlled-channel
attacks: Deterministic side channels for untrusted
operating systems. In Security and Privacy (SP), 2015
IEEE Symposium on, pages 640–656, May 2015.
[39] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and
E. Shi. Town crier: An authenticated data feed for
smart contracts. Cryptology ePrint Archive, Report
2016/168, 2016. http://eprint.iacr.org/2016/168.
282