title:Leveraging USB to Establish Host Identity Using Commodity Devices
author:Adam Bates and
Ryan Leonard and
Hannah Pruse and
Daniel Lowd and
Kevin R. B. Butler
Leveraging USB to Establish Host Identity Using
Commodity Devices
Adam Bates, Ryan Leonard, Hannah Pruse, Daniel Lowd, and Kevin R. B. Butler
Department of Computer and Information Science
University of Oregon, Eugene, OR
{amb, ryan, hpruse, lowd, butler}@cs.uoregon.edu
Abstract—Determining a computer’s identity is a challenge
of critical importance to users wishing to ensure that they are
interacting with the correct system; it is also extremely valuable
to forensics investigators. However, even hosts that contain trusted
computing hardware to establish identity can be defeated by
relay and impersonation attacks. In this paper, we consider how
to leverage the virtually ubiquitous USB interface to uniquely
identify computers based on the characteristics of their hardware,
ﬁrmware, and software stacks. We collect USB data on a corpus
of over 250 machines with a variety of hardware and software
conﬁgurations, and through machine learning classiﬁcation tech-
niques we demonstrate that, given a period of observation on the
order of tenths of a second, we can differentiate hosts based on
a variety of attributes such as operating system, manufacturer,
and model with upwards of 90% accuracy. Over longer periods
of observation on the order of minutes, we demonstrate the
ability to distinguish between hosts that are seemingly identical;
using Random Forest classiﬁcation and statistical analysis, we
generate ﬁngerprints that can be used to uniquely and consistently
identify 70% of a ﬁeld of 30 machines that share identical OS
and hardware speciﬁcations. Additionally, we show that we can
detect the presence of a hypervisor on a computer with 100%
accuracy and that our results are resistant to concept drift, a
spooﬁng attack in which malicious hosts provide fraudulent USB
messages, and relaying of commands from other machines. Our
techniques are thus generally employable in an easy-to-use and
low-cost fashion.
I.
INTRODUCTION
Determining the identity of a computer is a necessary
precondition for trusting it. However, being able to verify that
a machine is actually what it presents itself as is a surpris-
ingly challenging problem. Consider a desktop computer in
a corporate ofﬁce. For that computer’s user, it would seem
natural to assume that observing physical indicators about the
machine, such as seeing it is still there, it is the expected make
and model, and even that it has the correct serial number on
it, should be sufﬁcient to have conﬁdence that the machine
is the user’s own and is responding to the user’s commands.
However, even if the computer is physically present, there is
little preventing that machine from silently relaying commands
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:20)(cid:25)
to another computer that is in turn providing responses in
place of the machine being used. Such an attack against
trusted hardware was proposed by Parno [1], who termed it
the “cuckoo attack” after the birds that lay their eggs in the
nests of other species.
More generally, evading identiﬁcation through relay or
wormhole attacks has been demonstrated in wireless net-
works [2], with RFIDs [3], and even with mobile devices
using near-ﬁeld communication [4]. Solutions to the unique
identiﬁcation problem have run the gamut from displaying
visual indicators on machines [5] to establishing uniqueness
in processor chipsets through physically unclonable functions
(PUFs) [6], to relying on trusted hardware such as the Trusted
Platform Module (TPM) [7] containing a unique private key.
However, as Parno showed, even trusted hardware has the
potential to be subverted. Additionally, solutions such as PUFs
and TPMs do not address the vast set of legacy systems in
place that do not have these devices deployed.
In this paper, we propose that the USB port found on
virtually every computer and many embedded devices can be
used as a means of determining identity. The combination
of software variation among USB stacks, differences in USB
host controllers, and variations in manufacture of the bus,
chipsets, and other hardware portions allow us to be able to
ﬁngerprint machines based on the timing of USB messages
they send to a device connecting to them. Consequently,
we call our technique USB Fingerprinting, and in this work
we demonstrate its practicality and efﬁcacy for a variety of
applications. Using machine learning classiﬁcation techniques,
we demonstrate that, through observing the enumeration phase
of the USB protocol, we can differentiate hosts based on
attributes such as operating system, manufacturer, and model,
and in many cases develop a classiﬁcation model that uniquely
identiﬁes host machines. Our machine identiﬁcation trials show
that USB Fingerprinting, at best, can build a set of models that
consistently identiﬁes 70% of a ﬁeld of 30 seemingly identical
machines. However, even these results are strong enough to
serve as a reference point in a larger forensic scheme.
Previously, USB forensics has required manual collection
of data via an expensive USB analyzer [8], or a the design of
a custom embedded device [9]. In contrast, we have developed
an automated data collection and protocol analyzer application
for a commodity Android smartphone. We conﬁrm that our
platform provides equivalent results to USB analyzers, and
additionally that our techniques are applicable to even low-
cost embedded devices such as Gumstix [10].
The ability to perform USB ﬁngerprinting was postulated
in a previous workshop publication [8], but this work suffered
from a small data corpus and classiﬁcation techniques that
failed to establish even basic information about a host’s iden-
tity, such as machine model. Other works that have considered
USB information focused on the protocol as a vector for
attack [9], [11]. Crucially, these previous works, and more
generally, most other ﬁngerprinting proposals (e.g., [12], [13],
[14]) have made the assumption of a benign environment in
which the ﬁngerprint target’s input is essentially trusted and
no countermeasures are taken in case the host is responding
maliciously. For example, Eckersly’s proposal for website
identiﬁcation [13] tests against existing browser anonymization
plug-ins, but the ﬁngerprint scheme is still ultimately built on
trusted input from the target. By contrast, we demonstrate that
our approach is robust against a number of active attacks,
such as malicious inputs, making it potentially viable as
a ﬁngerprinting mechanism in malicious environments. We
also demonstrate resistance to concept drift1 in our approach
by examining data measured three months after the original
measurements were taken.
USB Fingerprinting identiﬁes devices via a physical con-
nection, rather than relying on wireless [15] or visual in-
dicators [16]. While remote attestation is often desirable,
reliance on networked environments is also a limitation. For
example, network ﬁngerprinting is not an option for non-
networked embedded devices or “sneaker nets”, which have
recently gained notoriety for having been targeted by the
Stuxnet virus [17]. Physical connectivity also prevents spooﬁng
and anonymization attacks to which networking ﬁngerprinting
techniques are vulnerable [18], [14], [19].
This paper makes the following contributions:
•
A methodology for feature extraction of USB trace
data: We examine USB enumerations, handshakes
representing milliseconds of communication between
master and slave devices. Applying this insight, we
develop a feature extraction methodology that we
apply to tens of thousands of traces. We conduct
a university-wide survey of USB stack behavior,
presenting a dataset of over 30,000 traces of USB
operations from 256 different machines of various
makes, models, and operating systems. We quantify
the information gain of the resultant feature vector
across a variety of class labels representing different
host machine attributes.
Design and evaluation of USB-based machine clas-
siﬁcation techniques: We use USB data to differ-
entiate between different manufacturer models with
97% accuracy, between operating systems with 100%
accuracy, and between OS versions with an accuracy
of 94%. Even more remarkably, we employ statistical
techniques that allow us to iteratively reﬁne results
for individual machines, yielding a ﬁngerprint that
can uniquely identify 70% of a ﬁeld of 30 identically
speciﬁed machines. We analyze our feature vectors
and machine learning models in order to discover
methods of further optimization. We also show that
•
1Concept Drift [20] is a machine learning problem in which statistical
properties (e.g., accuracy) of a classiﬁcation model degrade over time.
2
Host
Host
OS
USB Driver
HC Driver
USB System
manages pipes
Host
Controller
USB Bus Interface
SIE
USB
Wire
Fig. 1: Overview of a host USB Stack.
•
our techniques apply to USB-equipped embedded de-
vices, and can be used to swiftly detect the presence
of virtualization. We consider the efﬁcacy of our
approach against an active adversary, and discover that
our scheme is resistant to IP-based relay attacks, and
spooﬁng attacks that would prove successful against
previous USB ﬁngerprinting techniques [8], [11], [9].
Development of collection and analysis tools for
commodity deployment: While USB analyzers can
be used to get ﬁne-grained protocol information, they
suffer from being bulky, expensive, and uncommon.
To make USB Fingerprinting broadly adoptable, we
develop and release smartphone applications for the
Android operating system that can be used to ef-
fectively and automatically perform the collection
and analysis of USB data. Both the applications and
dataset are to be released, with continual updates as
our corpus grows. To our knowledge, this is the largest
compilation of such data ever to have been made
publically available.
The rest of the paper is structured as follows: Section
2 provides an overview of USB operation and the speciﬁc
messages that we collect, Section 3 describes our methodology
for collecting USB trace data, and Section 4 describes our
classiﬁcation techniques and results. Section 5 describes the
applicability of USB Fingerprinting to other contexts, such
as detecting virtualized environments, ﬁngerprinting devices
that are not computers, using multiple collection devices, and
issues relating to concept drift. Section 7 describes how USB
Fingerprinting can be widely deployed with our developed
Android application, explores how we can defend against
fraudulent and relaying hosts, and discusses future directions.
Section 8 provides related work and Section 9 concludes.
II. USB PROTOCOL
A. Overview of Operation
USB is a standard that deﬁnes a software protocol,
ﬁrmware protocol, and a set of hardware used in communi-
cation between a host and a device across a serial bus [21].
Since USB is a master/slave protocol, the host initiates all
interactions. As shown in Figure 1, USB stacks vary from
Device
Host
GetDescriptor (Device)
Setup Transaction
Data
Out/Status Transaction
SetAddress (121)
Setup Transaction
In/Status Transaction
Fig. 2: An example USB data ﬂow. Control transfers (dotted
lines) are comprised by a set of transactions (solid lines).
host to host, and are made up of a host controller, a controller
driver, a USB driver, and host software. Many machines today
support USB, including personal computers, servers, tablets,
routers, and embedded systems. We focus on the USB 2.0
protocol, since while the USB 3.0 “SuperSpeed” protocol has
been codiﬁed, it has not been as widely deployed.
In order for a USB device to be used with a given host, it
must go through a setup procedure consisting of three steps.
First, is the bus setup, during which a set of standard electrical
signals is relayed between the host and device’s respective
serial interface engines (SIE). This step indicates to the host
that a device is connected; the two parties then handshake
and negotiate parameters such as the communication speed
of the device. The second step is the enumeration phase,
whereby the host queries the device to determine information
such as the device’s type (e.g., mass storage, human interface
device), manufacturer and model, and the functionality it
supports, among other parameters. Finally, further interactions
are passed from the host’s client software through the standard
system call
ioctl()) to the
device’s high-level USB functions (e.g., providing an interface
to internal storage, relaying video from a webcam).
interface (e.g., read(), write(),
B. Enumeration
In this work, we analyze the enumeration phase of a
USB interaction to make inferences about a host’s USB stack.
Enumeration is a good candidate for analysis, as extensive
interaction with the host system is not required to force the
host to enumerate a device. Thus, it is possible to trigger
USB enumerations on any physically accessible machine, even
when lacking login credentials. Additionally, the enumeration
phase is well deﬁned in the USB 2.0 speciﬁcation [21],
making it easy to interpret. While speciﬁc message content
and timing will vary depending on the host’s USB stack and
the connecting peripheral, the presence and purpose of the
enumeration phase is host and device agnostic.
The process of enumeration is a host-driven operation
that consists of a three-layered protocol. At the top layer are
control transfers, USB data ﬂows that offer lossless delivery,
that exchange conﬁguration information between the host and
the device endpoint. An example of a control
transfer is
3
GetDescriptor(String Manufacturer), which in-
forms the host of the device’s manufacturer. At the middle
layer, transactions offer a logical abstraction for bundles of
packets. A notable transaction is the setup transaction, which
describes in detail what the following transactions will be;
once the content of the setup transaction is known, the content
of subsequent messages is well deﬁned. Note that interrupt
requests (IRQ) on a device must be signaled at the end of each
transaction, to inform the device’s software to queue a future
transaction. At the bottom layer there are USB packets, which
transmit the actual data. Each control transfer is formed by two
or more transactions, and each transaction is composed of two
or more packets. A sample composition of USB enumeration is
portrayed in Figure 2: the control transfers GetDescriptor
and SetAddress appear in the ﬁgure, and are composed of