**Author: Hcamael@Knownsec 404 Team**  
**Chinese Version:**
Recently, when I was studying IoT, due to the lack of devices, simulating
running firmware would often be short of `/dev/xxx`, so I began to wonder if I
could write a driver myself to make the firmware run. No matter how hard it is
and whether it can achieve my original intention or not, it pays off a lot if
you learn how to develop Linux driver.
### Introduction
The series I wrote is mainly about practice, which doesn't talk much about
theory. I learn how to develop the driver from the book _Linux Device Drivers_
, and there is the code for the examples explained in this book on the GitHub
[[1]](https://github.com/jesstess/ldd4 "\[1\]").
As for the basic concept, Linux system is divided into kernel mode and user
mode. The hardware device can only be accessed in the kernel mode, and the
driver can be regarded as an API provided in the kernel mode to let the code
of the user mode access the hardware device.
With the basic concepts in mind, I have come up with a series of problems,
which inspire me to learn the development of driver.
  1. All code learning starts with Hello World, so how to write a Hello World program?
  2. How does the driver generate device files under /dev?
  3. How does the driver access the actual hardware?
  4. How do I get system-driven code? Or can it reverse the driver without code? Where are the binaries that store the drivers? In the future, there may be opportunities to try to study the drive security.
### Everything Starts from Hello World
My Hello World code is as follows
[[2]](https://raw.githubusercontent.com/Hcamael/Linux_Driver_Study/master/hello.c
"\[2\]"):
    #include 
    #include 
    MODULE_LICENSE("Dual BSD/GPL");
    MODULE_AUTHOR("Hcamal");
    int hello_init(void)
    {
        printk(KERN_INFO "Hello World\n");
        return 0;
    }
    void hello_exit(void)
    {
        printk(KERN_INFO "Goodbye World\n");
    }
    module_init(hello_init);
    module_exit(hello_exit);
The Linux driver is developed by means of C Language, which is different form
the normal one we use. What we often use is Libc library, which doesn’t exist
in the kernel. While the driver is a program running in the kernel, we use the
library functions in the kernel.
For example, `printk` is analogous to `printf` in Libc, an output function
defined in the kernel. But I think it's more like the logger function in
Python, because the output of `printk` is printed in the kernel's log, which
can be viewed via `dmesg` command.
There is only one entry point and one exit point in the driver code. Loading
the driver into the kernel will execute the function defined by the
`module_init` function, which in the above code is the `hello_init` function.
When the driver is unloaded from the kernel, the function defined by the
`module_exit` function is called, which in the above code is the `hello_exit`
function.
The code above makes it clear that when the driver is loaded, it prints `Hello
World` and when the driver is unloaded, it prints `Goodbye World`.
PS: `MODULE_LICENSE` and `MODULE_AUTHOR` are not very important. I'm not a
professional development driver, so needn’t pay attention to them.
PSS: There should add a newline for the output of `printk`, otherwise the
buffer will not be flushed.
#### Compile the Driver
The driver needs to be compiled by the make command, and the `Makefile` is
shown below:
    ifneq ($(KERNELRELEASE),)
        obj-m := hello.o
    else
        KERN_DIR ?= /usr/src/linux-headers-$(shell uname -r)/
        PWD := $(shell pwd)
    default:
        $(MAKE) -C $(KERN_DIR) M=$(PWD) modules
    endif
    clean:
        rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions
In general, the source code of the kernel exists in the `/usr/src/linux-headers-$(shell uname -r)/` directory, such as:
    $ uname -r
    4.4.0-135-generic
    /usr/src/linux-headers-4.4.0-135/  --> 该内核源码目录
    /usr/src/linux-headers-4.4.0-135-generic/    --> 该内核编译好的源码目录
And what we need is the compiled source directory, which is `/usr/src/linux-headers-4.4.0-135-generic/`.
The header files of the driver code need to be searched from this directory.
The parameter `M=$(PWD)` indicates that the output of the driver compilation
is in the current directory.
Finally, through the command `obj-m := hello.o`, which means to compile
`hello.o` into `hello.ko`, and the ko file is the kernel module file.
#### Load the Driver into the Kernel
Some system commands that need to be used:
`Lsmod`: View the kernel module that is currently loaded.
`Insmod`: Loads the kernel module and requires root permissions.
`Rmmod`: Remove the module.
For example:
    # insmod hello.ko        // Load the hello.ko module into the kernel
    # rmmod hello          // Remove the hello module from the kernel
The old kernel is using the above method to load and remove the kernel, but
the new version of the Linux kernel adds verification of the module. The
current actual situation is as follows:
    # insmod hello.ko
    insmod: ERROR: could not insert module hello.ko: Required key not available
From a security perspective, the current kernel assumes that the module is
untrustworthy and needs to be signed with a trusted certificate to load the
module.
Two solutions:
  1. Enter the BIOS and turn off the Secure Boot of UEFI.
  2. Add a self-signed certificate to the kernel and use it to sign the driver module (You can refer to [[3]](https://jin-yang.github.io/post/kernel-modules.html "\[3\]")).
#### View the Results
![
](https://images.seebug.org/content/images/2019/01/aba5c16b-6a1e-46fe-8cc7-7de03bd1aa97.png-w331s)
### Add Device Files under /dev
Once again, we firstly provide the code, and then explain the example code
[[4]](https://raw.githubusercontent.com/Hcamael/Linux_Driver_Study/master/scull.c
"\[4\]").
    #include 
    #include 
    #include    /* printk() */
    #include      /* kmalloc() */
    #include        /* everything... */
    #include     /* error codes */
    #include     /* size_t */
    #include     /* O_ACCMODE */
    #include 
    #include     /* copy_*_user */
    MODULE_LICENSE("Dual BSD/GPL");
    MODULE_AUTHOR("Hcamael");
    int scull_major =   0;
    int scull_minor =   0;
    int scull_nr_devs = 4;
    int scull_quantum = 4000;
    int scull_qset = 1000;
    struct scull_qset {
        void **data;
        struct scull_qset *next;
    };
    struct scull_dev {
        struct scull_qset *data;  /* Pointer to first quantum set. */
        int quantum;              /* The current quantum size. */
        int qset;                 /* The current array size. */
        unsigned long size;       /* Amount of data stored here. */
        unsigned int access_key;  /* Used by sculluid and scullpriv. */
        struct mutex mutex;       /* Mutual exclusion semaphore. */
        struct cdev cdev;     /* Char device structure. */
    };
    struct scull_dev *scull_devices;    /* allocated in scull_init_module */
    /*
     * Follow the list.
     */
    struct scull_qset *scull_follow(struct scull_dev *dev, int n)
    {
        struct scull_qset *qs = dev->data;
            /* Allocate the first qset explicitly if need be. */
        if (! qs) {
            qs = dev->data = kmalloc(sizeof(struct scull_qset), GFP_KERNEL);
            if (qs == NULL)
                return NULL;
            memset(qs, 0, sizeof(struct scull_qset));
        }
        /* Then follow the list. */
        while (n--) {
            if (!qs->next) {
                qs->next = kmalloc(sizeof(struct scull_qset), GFP_KERNEL);
                if (qs->next == NULL)
                    return NULL;
                memset(qs->next, 0, sizeof(struct scull_qset));
            }
            qs = qs->next;
            continue;
        }
        return qs;
    }
    /*
     * Data management: read and write.
     */
    ssize_t scull_read(struct file *filp, char __user *buf, size_t count,
                    loff_t *f_pos)
    {
        struct scull_dev *dev = filp->private_data;
        struct scull_qset *dptr; /* the first listitem */
        int quantum = dev->quantum, qset = dev->qset;
        int itemsize = quantum * qset; /* how many bytes in the listitem */
        int item, s_pos, q_pos, rest;
        ssize_t retval = 0;
        if (mutex_lock_interruptible(&dev->mutex))
            return -ERESTARTSYS;
        if (*f_pos >= dev->size)
            goto out;
        if (*f_pos + count > dev->size)
            count = dev->size - *f_pos;
        /* Find listitem, qset index, and offset in the quantum */
        item = (long)*f_pos / itemsize;
        rest = (long)*f_pos % itemsize;
        s_pos = rest / quantum; q_pos = rest % quantum;
        /* follow the list up to the right position (defined elsewhere) */
        dptr = scull_follow(dev, item);
        if (dptr == NULL || !dptr->data || ! dptr->data[s_pos])
            goto out; /* don't fill holes */
        /* read only up to the end of this quantum */
        if (count > quantum - q_pos)
            count = quantum - q_pos;
        if (raw_copy_to_user(buf, dptr->data[s_pos] + q_pos, count)) {
            retval = -EFAULT;
            goto out;
        }
        *f_pos += count;
        retval = count;
      out:
        mutex_unlock(&dev->mutex);
        return retval;
    }
    ssize_t scull_write(struct file *filp, const char __user *buf, size_t count,
                    loff_t *f_pos)
    {
        struct scull_dev *dev = filp->private_data;
        struct scull_qset *dptr;
        int quantum = dev->quantum, qset = dev->qset;
        int itemsize = quantum * qset;
        int item, s_pos, q_pos, rest;
        ssize_t retval = -ENOMEM; /* Value used in "goto out" statements. */
        if (mutex_lock_interruptible(&dev->mutex))
            return -ERESTARTSYS;
        /* Find the list item, qset index, and offset in the quantum. */
        item = (long)*f_pos / itemsize;
        rest = (long)*f_pos % itemsize;
        s_pos = rest / quantum;
        q_pos = rest % quantum;
        /* Follow the list up to the right position. */
        dptr = scull_follow(dev, item);
        if (dptr == NULL)
            goto out;
        if (!dptr->data) {
            dptr->data = kmalloc(qset * sizeof(char *), GFP_KERNEL);
            if (!dptr->data)
                goto out;
            memset(dptr->data, 0, qset * sizeof(char *));
        }
        if (!dptr->data[s_pos]) {
            dptr->data[s_pos] = kmalloc(quantum, GFP_KERNEL);
            if (!dptr->data[s_pos])
                goto out;
        }
        /* Write only up to the end of this quantum. */
        if (count > quantum - q_pos)
            count = quantum - q_pos;
        if (raw_copy_from_user(dptr->data[s_pos]+q_pos, buf, count)) {
            retval = -EFAULT;
            goto out;
        }
        *f_pos += count;
        retval = count;
            /* Update the size. */
        if (dev->size size = *f_pos;
      out:
        mutex_unlock(&dev->mutex);
        return retval;
    }
    /* Beginning of the scull device implementation. */
    /*
     * Empty out the scull device; must be called with the device
     * mutex held.