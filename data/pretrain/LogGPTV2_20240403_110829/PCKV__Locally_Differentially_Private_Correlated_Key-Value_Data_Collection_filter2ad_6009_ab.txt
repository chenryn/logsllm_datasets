Objectives and Challenges. Our goal is to estimate fre-
quency and mean with high accuracy (i.e., small Mean Square
Error) under the required privacy constraint (i.e., satisfying
ε-LDP). However, the task is not trivial for key-value data
due to the following challenges: (1) Considering each user
can possess multiple key-value pairs (the number of pairs can
be different for users), if each user uploads multiple pairs,
then each pair needs to consume budget, leading to a smaller
budget and larger noise in each pair. On the other hand, if
simply sampling an index j from the domain and uploading
the key-value pair regarding the j-th key (which is used in
PrivKVM [25]), we cannot make full use of the original pairs.
Therefore, an elaborately designed sampling protocol is nec-
essary in order to estimate the frequency and mean with high
accuracy. (2) Due to the correlation between key and value
in a key-value pair, the perturbation of key and value should
be correlated. If a user reports a key that does not exist in her
local data, she has to generate a fake value to guarantee the
indistinguishability; however, how to generate the fake value
without any prior knowledge and how to eliminate the inﬂu-
ence of fake values on the mean estimation are challenging
tasks. (3) Considering the key and value are perturbed in a cor-
related manner, the overall perturbation mechanism may not
leak as much information as two independent perturbations
do (by sequential composition). Therefore, precisely quanti-
fying the actually consumed privacy budget can improve the
privacy-utility tradeoff of the overall key-value perturbation.
4.2 PrivKVM
To the best of our knowledge, PrivKVM [25] is the only pub-
lished work on key-value data collection in the LDP setting
(note that another existing work [20] is a preprint). It utilizes
one iteration for frequency estimation and multiple iterations
to approximately approach the unbiased mean estimation. We
brieﬂy describe it as follows. Assume the total privacy budget
is ε, and the number of iterations is c. In the ﬁrst iteration,
each user randomly samples an index j from the key domain
K with uniform distribution (note that j does not contain
any private information). If the user processes key k = j with
value v, then she perturbs the key-value pair (cid:8)1,v(cid:9); if not, the
user perturbs the key-value pair (cid:8)0, ˜v(cid:9), where ˜v is initialized as
0 in the ﬁrst iteration. In both cases, the input is perturbed with
key-budget ε
2c. Then, each user uploads
the index j and one perturbed key-value pair (cid:8)0,·(cid:9) or (cid:8)1,·(cid:9) to
the server and the server can compute the estimated frequency
fk and mean mk (k ∈ K ) after collecting the perturbed data
from all users, where the counts of output values will be cor-
rected before estimation when outliers occur. In the remaining
iterations, each user perturbs her data with a similar way but
˜v = mk (the estimated mean of the previous round) and the
budget for key perturbation is 0. Then, the server updates
the mean mk in the current iteration. By multiple rounds of
interaction between users and the server, the mean estimation
is approximately unbiased, and the sequential composition
guarantees LDP with privacy budget ε
2
2 and value-budget ε
· c = ε.
+ ε
2c
970    29th USENIX Security Symposium
USENIX Association
Set Up
① Privacy Budget Allocation 
and Perturbation 
Probability Computation
(cid:2035): the total privacy budget 
PCKV-UE:  (cid:2035)(cid:1372)(cid:4668)(cid:2035)(cid:2869)(cid:481)(cid:2035)(cid:2870)(cid:4669)(cid:1372)(cid:4668)(cid:1853)(cid:481)(cid:1854)(cid:481)(cid:1868)}
PCKV-GRR:  (cid:2035)(cid:1372) (cid:2035)(cid:2869)(cid:481)(cid:2035)(cid:2870) (cid:1372)(cid:4668)(cid:1853)(cid:481)(cid:1868)}
(cid:2035)(cid:2869): budget for key perturbation
(cid:2035)(cid:2870): budget for value perturbation
(cid:1853)(cid:481)(cid:1854)(cid:481)(cid:1868): perturbation probabilities
User-Side
② Sampling
③ Perturbation
(cid:1845)(cid:1372)(cid:1876)(cid:3404)(cid:1766)(cid:1863)(cid:481)(cid:1874)(cid:1767)
PCKV-UE:  (cid:1876)(cid:1372)(cid:155)(cid:155)(cid:4666)(cid:152)(cid:135)(cid:133)(cid:150)(cid:145)(cid:148)(cid:4667)
PCKV-GRR(cid:483)(cid:3)(cid:1876)(cid:1372)(cid:1877)(cid:1314)(cid:3404) (cid:1863)(cid:4593)(cid:481)(cid:1874)(cid:4593)
(cid:1845): the set of key-value pairs
(cid:1876): the sampled key-value pair
(cid:155) or (cid:1877)(cid:1314): the output of each user
Server-Side
④ Aggregation
PCKV-UE: (cid:155)(cid:4670)(cid:1863)(cid:4671)(cid:1372) (cid:1866)(cid:2869)(cid:481)(cid:1866)(cid:2870)
PCKV-GRR: (cid:1877)(cid:1314)(cid:1372) (cid:1866)(cid:2869)(cid:481)(cid:1866)(cid:2870)
(cid:1866)(cid:2869)(cid:481)(cid:1866)(cid:2870) (cid:1372)(cid:4668)(cid:4632)(cid:1858)(cid:3038)(cid:481)(cid:3549)(cid:1865)(cid:3038)(cid:4669)
(cid:155)(cid:4670)(cid:1863)(cid:4671)(cid:1488)(cid:4668)(cid:883)(cid:481)(cid:3398)(cid:883)(cid:481)(cid:882)(cid:4669)
(cid:1866)(cid:2869): supporting number of 1
(cid:1866)(cid:2870): supporting number of -1
⑤ Estimation
Figure 2: The overview of our PCKV framework.
There are three limitations of PrivKVM.
(1) To achieve approximate unbiasedness, PrivKVM needs
to run multiple rounds. This requires all users online during
all rounds, which is impractical in many application scenarios.
Also, the multiple iterations only guarantee the convergence
of expectation of mean estimation (i.e., the bias theoretically
approaches zero when c → ∞), but the variance of mean esti-
mation will be very large for a large c because the budget ε
2c
(for value perturbation in each round) is very small. Note that
the estimation error depends on both bias and variance.
(2) The sampling protocol in PrivKVM may not work well
for a large domain. When the domain size d = |K | is very
large (such as millions) and each user only has a relatively
small number of key-value pairs (such as less than 10), uni-
formly sampling an index from the large key domain K makes
users rarely upload the information of the keys that they pos-
sess, resulting in a large variance of frequency and mean
estimations. Also, when the number of users n is not very
large compared with domain size (such as n  0 is a given total privacy budget for composed
key-value perturbation. According to (3), both ε1 and ε2 are
less or equal to ε. If ε1 = ε, we have ε2 = 0. If ε2 = ε, we have
ε1 (cid:2) ε− ln[2/(1 + e
−ε)] = ln[(eε + 1)/2]. Therefore, ε1 and
ε2 can be allocated by (with respect to a variable θ)
ε1 = lnθ,
ε2 = ln
1