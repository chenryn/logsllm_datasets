23
24
25
kwHour = computeUsage(kwMinute, size, rate);
kwHour = 0;
if ( isHoliday () ) {
//DDI
//DDI
// III
//DDI
} else {
}
...
}
}
...
enum period normalRate = Normal;
kwHour = computeUsage(kwMinute, size, normalRate);//DDI|CFDI
// DII |CFDI
//DDI|CFDI
3.1 Segregation of input data/control-flow
dependent instructions
Our protection requires identifying all values that are tainted (from
any input sources) with nondeterministic data (data-dependent) as
well as branches whose execution relies on such data (control-flow
dependent). As discussed in Section 2.2, the problem of nondeter-
ministic behavior identification essentially is a reachability problem
in graphs. Therefore, we base our segregation technique on the call-
sensitive user-input dependency detection technique [41]. Because
a detailed discussion of the analysis is out of the scope of this work,
in the following we abstractly discuss the high-level idea only and
refer to the original publication [41] for details.
The first step is to construct dependency graphs [21] for a given
program. Nodes are program instructions and edges indicate data
and control-flow dependencies among them. That is, assignments
yield data dependency edges while calls and branches yield control
1We contacted the authors on May 4, 2017 asking for a copy of their code, but we have
not yet received a reply.
42ACSAC’18, December 2018, San Juan, Puerto Rico, USA
M. Ahmadvand et al.
flow edges. The location where functions are called (call site) to-
gether with the arguments that are actually passed to them affect
the input dependency of their instructions. To adequately propagate
call-site dependencies, a strongly connected component analysis is
run on the program call graph. Then, multiple dependence graphs
are constructed for each strongly connected component. These
graphs are then analyzed (in a reverse topological order) to prop-
agate dependencies, starting from functions that are called at the
bottom of the call graph. The outcome of the analysis indicates data
and control-flow dependencies. In Listing 1, comments indicate the
input dependency of instructions: III, DII, DDI and CFDI denote
input-independent (both data and control flow), data-independent,
data-dependent, and control-flow dependent instructions, respec-
tively. III instructions can directly be protected using OH, e.g., the
right-hand operands of the assignments at lines 3 and 17 in our
sample program (Listing 1). Clearly, hashing memory references of
both DDI and CFDI yields different hashes for different inputs.
3.2 Short Range Oblivious Hashing (SROH)
To enhance the explicit protection of OH, we propose a novel Short
Range Oblivious Hashing (SROH) mechanism to cover nondetermin-
istic control flows by OH. As seen above, hashing both DDIs and
CFDIs may lead to inconsistent hash values. The incorporation of
data-dependent variables into hashes yields unverifiable hashes.
Similarly, covering instructions in input-dependent branches by
OH may lead to two types of inconsistent hashes for different non-
deterministic values: i) the expected hash cannot be precomputed
because nondeterministic values lead to the execution of differ-
ent branches, and ii) the expected hash cannot be computed as a
result of taking some branches for an indefinite number of times
depending on nondeterministic values.
To cope with these issues, we propose the SROH technique com-
prised of a path-specific set of hash variables and a tailored verifi-
cation. Our technique can protect DIIs residing in nondeterministic
branches. Moreover, it captures a holistic control flow integrity by
reflecting the evaluation results of nondeterministic branches in
its hashes. The idea is to realize OH using distinct hash variables
for every ordered sequence of basic blocks (OSBB) that are strictly
executed in the identified order, in every execution. That is, for a
given block in the sequence, all the preceding blocks are necessarily
executed before reaching the block. Another requirement is that
hashes, in such sequences, are verified in one of the blocks within
the sequence—conveniently, the last block. Of course, some blocks
may appear in multiple sequences. Such blocks in the intersection of
multiple sequences contain multiple hashes, and thus verifications.
The SROH technique effectively addresses the two aforemen-
tioned issues with hashing input dependent branches because -
i) hashes are computed in the scope of identified sequences and,
therefore, not taking a branch does not affect the expected hashes,
and ii) the verification of hashes takes place within the identified
sequences, and thus the number of times a branch is taken does
not corrupt hashes.
We use two strategies for loops—input-dependent and input-
independent, depending on whether a loop (condition) is input-
dependent. Our SROH technique consists of four steps.
Step i. OSBB discovery. Dominator tree relationships [34] can be
utilized to identify sequences of basic blocks that have the desired
property, i.e., immediate dominance, from a control flow graph
(CFG). We construct OSBBs at the granularity of functions; however,
the same idea can be applied at the program module level.
Input-independent loops, the looping condition of which does
not rely on any nondeterministic input, do not require any specific
action. Input-dependent loops, however, need to be handled differ-
ently. Since the number of iterations of an input-dependent loop
is determined by (nondeterministic) inputs, hashing loop-variant
instructions—the value changes of which are propagated to other
loop iterations—leads to inconsistent hashes. We ensure hash con-
sistencies for such loops by abstracting their (indefinite) number
of iterations. That is, we only consider their (loop) bodies; and,
subsequently, loop condition, iteration and end blocks are excluded
from OSBB computations. Moreover, we require every OSBB to end
immediately before an input-dependent loop begins.
As an example, we apply the discovery technique on the compu-
teUsage function of our sample program, whose CFG representation
is depicted in Figure 1a. Figure 1b illustrates the identified OSBBs,
namely P0: Entry, P1: If → Peak, P2: If → Else.if.OffPeak, P3: If →
Else.if.OffPeak → OffPeak, and P4: If → If.End. Nodes indicate pro-
gram basic blocks while edges capture the order in which those
blocks are executed. Since OSBBs for input-dependent loops start
from the beginning of loops, in Figure 1b the Entry block is treated
as a standalone OSBB, and hence not as a part of the loop sequences.
Step ii. Distinct hash variables. Next, we create a distinct hash
variable for every identified OSBB in its first block. These hash
variables are used to protect the instructions residing in the basic
blocks of a particular OSBB, which we refer to as available hash
variables in the block. In our computeUsage example (Figure 1b),
we identify five paths and therefore create five hash variables, h0,
h1, h2, h3, h4. These hash variables are further mapped to the
basic blocks to clearly indicate the available variables in each block.
Some blocks (e.g., If and Else.if.OffPeak blocks in Figure 1b) are in
common between different sequences and thus can have multiple
available hash variables, one per each sequence that pass through
them. In such blocks, SROH can randomly utilize a random subset
of available variables, or all of them.
Step iii. Hash verifications. In this step, all the DII|CFDIs are
protected by hash variables that correspond to their OSBB. That is,
DDIs as well as loop-variant instructions within input-dependent
loops are skipped. In the case of input-independent loops, loop
variants can also be covered as long as they are data-independent.
Furthermore, to reflect the control flow of the program into avail-
able hashes of each block, we incorporate the evaluation result of
branching conditions.
After incorporating instructions into hashes, we need to ensure
that OSBB-specific hashes match expected values. However, the
verification of hashes with instructions that were not previously
executed results in false alarms. For example, in Figure 1b verifying
h1 in the If.End block will raise a false alarm if the Peak block is
not executed before. Hence, each block can only verify those hash
variables that are available in it. Figure 1c demonstrates the OSBB-
specific hashing and verifications for the computeUsage function.
43Practical Integrity Protection with Oblivious Hashing
ACSAC’18, December 2018, San Juan, Puerto Rico, USA
(a) computeUsage’s CFG representation
(b) computeUsage’s paths
(c) computeUsage’s short range hashes &
verifications
Figure 1: Applying SROH to the computeUsage function of the sample electricity meter program
Step iv. Precomputing expected values. All expected hashes
(e0, e1, e2, e3 and e4) have to be precomputed and adjusted in pro-
tected programs before shipping them. One way to achieve this is
by triggering the protected branches, for instance using targeted
symbolic execution [35] in a monitor mode to capture the expected
values. Alternatively, we can precompute OSBB hashes by slicing
and further emulating instructions that are involved in the hash
computation of each OSBB. A standalone emulation of paths is pos-
sible as no DDIs are protected in paths. We use the emulation-based
approach as it performs faster than symbolic execution.
In the appendix, we present a full utilization of SROH together
with OH on the electricity meter program for which SROH increases
the instruction coverage of OH from 13% (2 instructions) to 66% (10
instructions).
3.3 Data-Dependent Instructions (DDIs)
For a resilient protection scheme, in addition to protecting III (by
OH) and DII|CFDI (by SROH), we need to also protect DDIs. For
instance, in our electricity meter example in Listing 1, line 11 indi-
cates an unprotected DDI that computes the actual usage. Similarly,
the isHoliday function plays an important role in the usage com-
putation by enforcing the holiday tariff. These program segments
can be seen as sensitive operations in our smart meter program
that are, nonetheless, left unprotected because of their dependency
on nondeterministic data, e.g., system time and data provided by
the meter’s sensors.
Our evaluation in Section 5 confirms that such instructions con-
stitute a high percentage of program instructions. Hence, failing
to protect them enables perpetrators to violate system integrity
despite the added (partial) protection.
We hence propose to use a complementary protection technique
for those instructions that OH/SROH cannot protect. Unlike OH,
such an integrity protection technique must be unaffected by nonde-
terministic input. We refer to this layer of protection as data depen-
dent protector (DDP). Since SC protection monitors program code,
not the execution, it is not affected by any input data. Therefore,
we can use it to build the DDP layer. Applying the DDP protection
to our sample program enables us to cover both the isHoliday
function and the DDIs in the computeUsage function.
We base our DDP on self-checksumming protections similar
to those discussed in [5, 11]. Our DDP is comprised of protection
guards, ideal hash functions, a response mechanism, and a hardening
method:
Protection guards. Code hashes are computed by a set of over-
lapping guards, each of which is dedicated to a consecutive set of
DDIs. These guards are seeded with offset and size of those instruc-
tions of the program in memory. Hash functions are then utilized to
hash the machine code bytes residing between offset and offset+size
into an accumulator variable.
Ideal hash functions. The hash function itself need not have
properties of a cryptographic hash function, e.g. collision-resistance
is not as important in this context. Instead, it is crucial that the
utilized hash function is stealthy and fast. A stealthy hash function
must have a covert computation routine as well as low entropy out-
comes. Since the expected hashes have to be incorporated into the
binary, using cryptographic hash functions entails incorporating
high entropy expected values. Linear time attacks can find such val-
ues and potentially their guards as well [14]. Therefore, we resort
to a simple XOR hash function.
Response mechanism. In case of mismatches, a covert re-
sponse mechanism is triggered by the respective guard. Based on
the nature of a protected program, this response may vary from
performance degradation, temporally delayed termination or a sig-
nal to a command & control server [11, 16, 18]. In some cases, no
Else.if.OffPeakTFOffPeakrating=0.5Peakrating=2.0IfTFLoop.condi < sizeTFLoop.endret usageLoop.endret usageLoop.inci++Loop.inci++If.Endusage += kwMinute[i]*ratingIf.Endusage += kwMinute[i]*ratingEntryusage=0Entryusage=0rate=1.0Else.if.OffPeakh2,h3Peakh1Ifh1,h2,h3,h4OffPeakh3If.Endh4P1P2P3P3P4Entryh0Entryh0P0P1P2P3P3If.Endverify(h4, e4)If.Endverify(h4, e4)Else.if.OffPeakhash(h2,rate!=Peak)verify(h2, e2)Else.if.OffPeakhash(h2,rate!=Peak)verify(h2, e2)P4Peakhash(h1,rate==Peak)hash(h1,rating)verify(h1,e1)Peakhash(h1,rate==Peak)hash(h1,rating)verify(h1,e1)OffPeakhash(h3,rate==OffPeak)hash(h3,rating)verify(h3, e3)OffPeakhash(h3,rate==OffPeak)hash(h3,rating)verify(h3, e3)Ifh1,h2,h3,h4=randomTokenshash(h4, rating)Ifh1,h2,h3,h4=randomTokenshash(h4, rating)P0Entryh0=randomTokenhash(h0,usage)verify(h0,e0)Entryh0=randomTokenhash(h0,usage)verify(h0,e0)44ACSAC’18, December 2018, San Juan, Puerto Rico, USA
M. Ahmadvand et al.
intrusive response whatsoever is desired; instead an evidence of
violation of integrity shall be maintained for postmortem analy-
ses. In our scheme, we leave the response routine itself completely
configurable/customizable to meet different program requirements.
Hardening method. As a hardening measure, we craft a net-
work of interconnected guards; i.e., there are guards that protect
other guards, possibly in a cyclic manner [5]. Under the assump-
tion that guards are diversified, i.e., do not syntactically resemble
each other too much, in order to counter pattern matching attacks,
one factor in measuring the difficulty of tampering with guarded
segments is the number of guards that need to be defeated by at-
tackers. This is known as the connectivity of a protection network
[11]. Higher connectivities increase the resilience, but harm per-
formance (more checks takes more time). In our protection, we let
users define their desired connectivity via a parameter.
3.4 Intertwined protection
For additional resilience, we intertwine the DDP layer with the OH
layer. A direct consequence of interleaving the two is an added
resilience against tampering attacks on self-checksumming guards.
In Section 5.5, we discuss the security enhancements in detail.
The idea is to have OH/SROH protect SC guards, which can also
be seen as the implicit protection of nondeterministic segments
by OH. The protection incorporates all (invariant) attributes of
guards (i.e. offset, size, and expected hash) into OH/SROH hashes,
possibly with the exception of the DDP’s computed hashes, if one
desires to mitigate taint-based attacks, see Section 5.5.1. This works
because self-checksumming guards do not depend on inputs: they
compute hashes over certain process memory blocks and compare
them with expected values, which remain unchanged, independent
of the program inputs. Listing 2 illustrates this layered protection.
For simplicity’s sake, in our example we demonstrate the response
mechanism as a function call (i.e. response()). This is rather easy
for attackers to detect and subsequently disable such calls. In reality
a set of covert and diversified response routines shall be utilized.
Listing 2: Interleaving SC guards with OH protection.
1
2
3
4
5
6
7
8
9
10
...
OH_hash(OH_hash_var, offset);
OH_hash(OH_hash_var, size);
OH_hash(OH_hash_var, SC_expected_hash);
SC_computed_hash = SC_hash(offset, size ) ;
if (SC_computed_hash!=SC_expected_hash){
response () ; //tampering detected
}
...
OH_assert(OH_hash_var, OH_expected_hash)
It is worth noting that SC guards that reside in input-dependent
branches in principle cannot be covered by OH. However, because
of our SROH extension, OH can protect control-flow dependent
branches, and thus all the SC guards.
4 IMPLEMENTATION
We implemented the entire protection tool chain for LLVM 6.0, aim-
ing for a cross-platform protection. Our entire tool-chain is publicly
available at https://github.com/tum-i22/sip-oblivious-hashing. In
this section, we briefly discuss some highlights of our prototype.
4.1 Protection process
The process takes as input the program that we wish to protect.
To limit the scope of the protection application, a set of sensitive
functions can be specified in the configuration, for instance, to
induce less performance overhead. If such functions are provided
to the protection tool, all protections (OH, SROH, SC) are applied
to them only, with the exception of some additional functions that
are picked by SC to satisfy the desired connectivity level (see Sec-
tion 4.5). Additionally, users can provide their desired response
routine to the tool chain. This could be easily extended to supply a
set of diversified and covert response routines.
Next, the program is analyzed to identify data and control-flow
dependencies. This information is required in all subsequent steps.
The program is then subjected to the SC pass, where a set of inter-
connected SC guards is created to protect DDIs.
An OH transformation pass then protects the SC guards and the
application’s IIIs. The former accomplishes part of intertwining OH
and SC. That is, SC guards residing in input independent segments
get protected by OH. SROH further extends the OH coverage by
protecting DII|CFDIs. It effectively covers the remaining SC guards
and thus completes the process of intertwining OH and SC.
The SC-Post-Patching process then adjusts SC guards accord-
ingly (see Section 4.5). Finally, the OH-Post-Patching process runs
the binary and makes the final adjustments by fixing expected
hashes in the OH and SROH guards (see Section 4.3). The outcome
of the process is a protected binary in which its DDIs and IIIs as
well as the newly created SC code is protected.
4.2 Input dependency detection
Our analysis pass, besides identifying input dependencies, distin-
guishes between data and control flow dependencies. This is neces-
sary for the implementation of OH, SROH, and even SC.
The analyzer relies on function definitions to identify sources
of input dependencies. This is problematic as many functions may
come with no definitions, e.g., call sites of external functions. In
such cases, the analyzer makes conservative assumptions, i.e. marks
instructions as input-dependent if it cannot prove otherwise. The
same holds true for the converse situation, if a local function is
passed as a callback argument to an external function. In this case,
we miss the external caller’s input dependency information.
To cope with these limitations, users can fine tune these assump-
tions in configuration files. Such files primarily contain information
about the input dependency of external functions and call-back ar-
guments. Users will have to create them once, but may use them
repeatedly for different programs that are based on the same pro-
tected code base.
4.3 Oblivious hashing (OH)
Our OH prototype has a parametrized number of hash variables
which are then randomly used throughout the program. We also
implemented two different hash functions (XOR and CRC32) to be
randomly utilized, which can easily be extended.