		pvs # display information
		vgs # display information
		lvextend vgbook/lvbook1 -L +144M
		lvs # display information
        ```
1. Asghar Ghori - Exercise 14-4: Rename, Reduce, Extend, and Remove Logical Volumes
	* Rename *lvol0* to *lvbook2*. Decrease the size of *lvbook2* to 50MB using the *lvreduce* command and then add 32MB with the *lvresize* command. Remove both logical volumes. Display the summary for the volume groups, logical volumes, and physical volumes:
	    ```shell
		lvrename vgbook/lvol0 vgbook/lvbook2
		lvreduce vgbook/lvbook2 -L 50M
		lvextend vgbook/lvbook2 -L +32M
		lvremove vgbook/lvbook1
		lvremove vgbook/lvbook2
		pvs # display information
		vgs # display information
		lvs # display information
        ```
1. Asghar Ghori - Exercise 14-5: Reduce and Remove a Volume Group
	* Reduce *vgbook* by removing the *sdd1* and *sdd2* physical volumes from it, then remove the volume group. Confirm the deletion of the volume group and the logical volumes at the end:
	    ```shell
		vgreduce vgbook /dev/sdd1 /dev/sdd2
		vgremove vgbook
		vgs # confirm removals
		pvs # can be used to show output of vgreduce
        ```
1. Asghar Ghori - Exercise 14-5: Reduce and Remove a Volume Group
	* Reduce *vgbook* by removing the *sdd1* and *sdd2* physical volumes from it, then remove the volume group. Confirm the deletion of the volume group and the logical volumes at the end:
	    ```shell
		vgreduce vgbook /dev/sdd1 /dev/sdd2
		vgremove vgbook
		vgs # confirm removals
		pvs # can be used to show output of vgreduce
        ```
1. Asghar Ghori - Exercise 14-6: Uninitialise Physical Volumes
	* Uninitialise all three physical volumes - *sdd1*, *sdd2*, and *sdb* - by deleting the LVM structural information from them. Use the *pvs* command for confirmation. Remove the partitions from the *sdd* disk and verify that all disks are now in their original raw state:
	    ```shell
		pvremove /dev/sdd1 /dev/sdd2 /dev/sdb
		pvs
		parted /dev/sdd
		# enter print to view partitions
		# enter rm 1
		# enter rm 2
        ```
1. Asghar Ghori - Exercise 14-7: Install Software and Activate Stratis
	* Install the Stratis software packages, start the Stratis service, and mark it for autostart on subsequent system reboots:
	    ```shell
		dnf install stratis-cli -y
		systemctl start stratisd.service & systemctl enable stratisd.service
        ```
1. Asghar Ghori - Exercise 14-8: Create and Confirm a Pool and File System
	* Create a Stratis pool and a file system in it. Display information about the pool, file system, and device used:
	    ```shell
		stratis pool create mypool /dev/sdd
		stratis pool list # confirm stratis pool created
		stratis filesystem create mypool myfs
		stratis filesystem list # confirm filesystem created, get device path
		mkdir /myfs1
		mount /stratis/mypool/myfs /myfs1
        ```
1. Asghar Ghori - Exercise 14-9: Expand and Rename a Pool and File System
	* Expand the Stratis pool *mypool* using the *sdd* disk. Rename the pool and the file system it contains:
	    ```shell
		stratis pool add-data mypool /dev/sdd
		stratis pool rename mypool mynewpool
		stratis pool list # confirm changes
        ```
1. Asghar Ghori - Exercise 14-10: Destroy a File System and Pool
	* Destroy the Stratis file system and the pool that was created, expanded, and renamed in the above exercises. Verify the deletion with appropriate commands:
	    ```shell
		umount /bookfs1
		stratis filesystem destroy mynewpool myfs
		stratis filesystem list # confirm deletion
		stratis pool destroy mynewpool
		stratis pool list # confirm deletion
        ```
1. Asghar Ghori - Exercise 15-1: Create and Mount Ext4, VFAT, and XFS File Systems in Partitions
	* Create 2x100MB partitions on the `/dev/sdb` disk, initialise them separately with the Ext4 and VFAT file system types, define them for persistence using their UUIDs, create mount points called `/ext4fs` and `/vfatfs1`, attach them to the directory structure, and verify their availability and usage. Use the disk `/dev/sdc` and repeat the above procedure to establish an XFS file system in it and mount it on `/xfsfs1`:
	    ```shell
		parted /dev/sdb
		# enter mklabel 
		# enter msdos 
		# enter mkpart 
		# enter primary
		# enter ext4
		# enter start as 0
		# enter end as 100MB
		# enter print to verify
		parted /dev/sdb mkpart primary 101MB 201MB
		# file system entered during partition created is different
		lsblk # verify partitions
		mkfs.ext4 /dev/sdb1
		mkfs.vfat /dev/sdb2
		parted /dev/sdc
		# enter mklabel 
		# enter msdos 
		# enter mkpart
		# enter primary
		# enter xfs
		# enter start as 0
		# enter end as 100MB
		mkfs.xfs /dev/sdc1
		mkdir /ext4fs /vfatfs1 /xfsfs1
		lsblk -f # get UUID for each file system
		vi /etc/fstab
		# add entries using UUIDs with defaults and file system name
		df -hT # view file systems and mount points
        ```
1. Asghar Ghori - Exercise 15-2: Create and Mount XFS File System in VDO Volume
	* Create a VDO volume called *vdo1* of logical size 16GB on the *sdc* disk (actual size 4GB). Initialise the volume with the XFS file system type, define it for persistence using its device files, create a mount point called `/xfsvdo1`, attach it to the directory structure, and verify its availability and usage:
	    ```shell
		wipefs -a /dev/sdc
		vdo create --device /dev/sdc --vdoLogicalSize 16G --name vdo1 --vdoSlabSize 128
		vdo list # list the vdo
		lsblk /dev/sdc # show information about disk
		mkdir /xfsvdo1
		vdo status # get vdo path
		mkfs.xfs /dev/mapper/vdo1
		vi /etc/fstab
		# copy example from man vdo create
		mount -a
		df -hT # view file systems and mount points
        ```
1. Asghar Ghori - Exercise 15-3: Create and Mount Ext4 and XFS File Systems in LVM Logical Volumes
	* Create a volume group called *vgfs* comprised of a 160MB physical volume created in a partition on the `/dev/sdd` disk. The PE size for the volume group should be set at 16MB. Create 2 logical volumes called *ext4vol* and *xfsvol* of sizes 80MB each and initialise them with the Ext4 and XFS file system types. Ensure that both file systems are persistently defined using their logical volume device filenames. Create mount points */ext4fs2* and */xfsfs2*, mount the file systems, and verify their availability and usage:
	    ```shell
		vgcreate vgfs /dev/sdd --physicalextentsize 16MB
		lvcreate vgfs --name ext4vol -L 80MB
		lvcreate vgfs --name xfsvol -L 80MB
		mkfs.ext4 /dev/vgfs/ext4vol
		mkfs.xfs /dev/vgfs/xfsvol
		blkid # copy UUID for /dev/mapper/vgfs-ext4vol and /dev/mapper/vgfs-xfsvol
		vi /etc/fstab
		# add lines with copied UUID
		mount -a
		df -hT # confirm added
        ```
1. Asghar Ghori - Exercise 15-4: Resize Ext4 and XFS File Systems in LVM Logical Volumes
	* Grow the size of the *vgfs* volume group that was created above by adding the whole *sdc* disk to it. Extend the *ext4vol* logical volume along with the file system it contains by 40MB using 2 separate commands. Extend the *xfsvol* logical volume along with the file system it contains by 40MB using a single command:
	    ```shell
		vdo remove --name vdo1 # need to use this disk
		vgextend vgfs /dev/sdc
		lvextend -L +80 /dev/vgfs/ext4vol
		fsadm resize /dev/vgfs/ext4vol
		lvextend -L +80 /dev/vgfs/xfsvol
		fsadm resize /dev/vgfs/xfsvol
		lvresize -r -L +40 /dev/vgfs/xfsvol # -r resizes file system
		lvs # confirm resizing
        ```
1. Asghar Ghori - Exercise 15-5: Create, Mount, and Expand XFS File System in Stratis Volume
	* Create a Stratis pool called *strpool* and a file system *strfs2* by reusing the 1GB *sdc* disk. Display information about the pool, file system, and device used. Expand the pool to include another 1GB disk *sdh* and confirm:
	    ```shell
		stratis pool create strpool /dev/sdc
		stratis filesystem create strpool strfs2
		stratis pool list # view created stratis pool
		stratis filesystem list # view created filesystem
		stratis pool add-data strpool /dev/sdd
		stratis blockdev list strpool # list block devices in pool
		mkdir /strfs2
		lsblk /stratis/strpool/strfs2 -o UUID
		vi /etc/fstab
		# add line
		# UUID=2913810d-baed-4544-aced-a6a2c21191fe /strfs2 xfs x-systemd.requires=stratisd.service 0 0
        ```
1. Asghar Ghori - Exercise 15-6: Create and Activate Swap in Partition and Logical Volume
	* Create 1 swap area in a new 40MB partition called *sdc3* using the *mkswap* command. Create another swap area in a 140MB logical volume called *swapvol* in *vgfs*. Add their entries to the `/etc/fstab` file for persistence. Use the UUID and priority 1 for the partition swap and the device file and priority 2 for the logical volume swap. Activate them and use appropriate tools to validate the activation:
	    ```shell
		parted /dev/sdc
		# enter mklabel msdos
		# enter mkpart primary 0 40
		parted /dev/sdd
		# enter mklabel msdos
		# enter mkpart primary 0 140
		mkswap -L sdc3 /dev/sdc 40
		vgcreate vgfs /dev/sdd1
		lvcreate vgfs --name swapvol -L 132
		mkswap swapvol /dev/sdd1
		mkswap /dev/vgfs/swapvol
		lsblk -f # get UUID
		vi /etc/fstab
		# add 2 lines, e.g. first line
		# UUID=WzDb5Y-QMtj-fYeo-iW0f-sj8I-ShRu-EWRIcp swap swap pri=2 0 0
		mount -a
        ```
1. Asghar Ghori - Exercise 16-1: Export Share on NFS Server
	* Create a directory called `/common` and export it to *server1* in read/write mode. Ensure that NFS traffic is allowed through the firewall. Confirm the export:
	    ```shell
		dnf install nfs-utils -y
		mkdir /common
		firewall-cmd --permanent --add-service=nfs
		firewall-cmd --reload
		systemctl start nfs-server.service & systemctl enable nfs-server.service
		echo "/nfs *(rw)" >> /etc/exports
		exportfs -av
        ```
1. Asghar Ghori - Exercise 16-2: Mount Share on NFS Client
	* Mount the `/common` share exported above. Create a mount point called `/local`, mount the remote share manually, and confirm the mount. Add the remote share to the file system table for persistence. Remount the share and confirm the mount. Create a test file in the mount point and confirm the file creation on the NFS server:
	    ```shell
		dnf install cifs-utils -y
		mkdir /local
		chmod 755 local
		mount 10.0.2.15:/common /local
		vi /etc/fstab
		# add line
		# 10.0.2.15:/common /local nfs _netdev 0 0
		mount -a
		touch /local/test # confirm that it appears on server in common
        ```
1. Asghar Ghori - Exercise 16-3: Access NFS Share Using Direct Map
	* Configure a direct map to automount the NFS share `/common` that is available from *server2*. Install the relevant software, create a local mount point `/autodir`, and set up AutoFS maps to support the automatic mounting. Note that `/common` is already mounted on the `/local` mount point on *server1* via *fstab*. Ensure there is no conflict in configuration or functionality between the 2:
	    ```shell
		dnf install autofs -y
		mkdir /autodir
		vi /etc/auto.master
		# add line
		#/- /etc/auto.master.d/auto.dir
		vi /etc/auto.master.d/auto.dir
		# add line
		#/autodir 172.25.1.4:/common
		systemctl restart autofs
        ```
1. Asghar Ghori - Exercise 16-4: Access NFS Share Using Indirect Map
	* Configure an indirect map to automount the NFS share `/common` that is available from *server2*. Install the relevant software and set up AutoFS maps to support the automatic mounting. Observe that the specified mount point "autoindir" is created automatically under `/misc`. Note that `/common` is already mounted on the `/local` mount point on *server1* via *fstab*. Ensure there is no conflict in configuration or functionality between the 2:
	    ```shell
		dnf install autofs -y
		grep /misc /etc/auto.master # confirm entry is there
		vi /etc/auto.misc
		# add line
		#autoindir 172.25.1.4:/common
		systemctl restart autofs
        ```
1. Asghar Ghori - Exercise 16-5: Automount User Home Directories Using Indirect Map
	* On *server1* (NFS server), create a user account called *user30* with UID 3000. Add the `/home` directory to the list of NFS shares so that it becomes available for remote mount. On *server2* (NFS client), create a user account called *user30* with UID 3000, base directory `/nfshome`, and no user home directory. Create an umbrella mount point called `/nfshome` for mounting the user home directory from the NFS server. Install the relevent software and establish an indirect map to automount the remote home directory of *user30* under `/nfshome`. Observe that the home directory of *user30* is automounted under `/nfshome` when you sign in as *user30*:
	    ```shell
		# on server 1 (NFS server)
		useradd -u 3000 user30
		echo password1 | passwd --stdin user30
		vi /etc/exports
		# add line
		#/home *(rw)
		exportfs -avr
		# on server 2 (NFS client)
		dnf install autofs -y		
		useradd user30 -u 3000 -Mb /nfshome
		echo password1 | passwd --stdin user30
		mkdir /nfshome
		vi /etc/auto.master
		# add line
		#/nfshome /etc/auto.master.d/auto.home
		vi /etc/auto.master.d/auto.home
		# add line
		#* -rw &:/home&
		systemctl enable autofs.service & systemctl start autofs.service
		sudo su - user30
		# confirm home directory is mounted
        ```
1. Asghar Ghori - Exercise 17.1: Change System Hostname
	* Change the hostnames of *server1* to *server10.example.com* and *server2* to *server20.example.com* by editing a file and restarting the corresponding service daemon and using a command respectively:
	    ```shell
		# on server 1
		vi /etc/hostname
		# change line to server10.example.com
		systemctl restart systemd-hostnamed
		# on server 2
		hostnamectl set-hostname server20.example.com
        ```
1. Asghar Ghori - Exercise 17.2: Add Network Devices to server10 and server20
	* Add one network interface to *server10* and one to *server20* using VirtualBox:
	    ```shell
		# A NAT Network has already been created and attached to both servers in VirtualBox to allow them to have seperate IP addresses (note that the MAC addressed had to be changed)
		# Add a second Internal Network adapter named intnet to each server
		nmcli conn show # observe enp0s8 added as a connection
        ```
1. Asghar Ghori - Exercise 17.3: Configure New Network Connection Manually
	* Create a connection profile for the new network interface on *server10* using a text editing tool. Assign the IP 172.10.10.110/24 with gateway 172.10.10.1 and set it to autoactivate at system reboots. Deactivate and reactive this interface at the command prompt:
	    ```shell
		vi /etc/sysconfig/network-scripts/ifcfg-enp0s8
		# add contents of file
		#TYPE=Ethernet
		#BOOTPROTO=static
		#IPV4_FAILURE_FATAL=no
		#IPV6INIT=no
		#NAME=enp0s8
		#DEVICE=enp0s8
		#ONBOOT=yes
		#IPADDR=172.10.10.110
		#PREFIX=24
		#GATEWAY=172.10.10.1
		ifdown enp0s8
		ifup enp0s8
		ip a # verify activation
        ```
1. Asghar Ghori - Exercise 17.4: Configure New Network Connection Using nmcli
	* Create a connection profile using the *nmcli* command for the new network interface enp0s8 that was added to *server20*. Assign the IP 172.10.10.120/24 with gateway 172.10.10.1, and set it to autoactivate at system reboot. Deactivate and reactivate this interface at the command prompt:
	    ```shell
		nmcli dev status # show devices with enp0s8 disconnected
		nmcli con add type Ethernet ifname enp0s8 con-name enp0s8 ip4 172.10.10.120/24 gw4 172.10.10.1
		nmcli conn show # verify connection added
		nmcli con down enp0s8
		nmcli con up enp0s8
		ip a # confirm ip address is as specified
        ```
1. Asghar Ghori - Exercise 17.5: Update Hosts Table and Test Connectivity
	* Update the `/etc/hosts` file on both *server10* and *server20*. Add the IP addresses assigned to both connections and map them to hostnames *server10*, *server10s8*, *server20*, and *server20s8* appropriately. Test connectivity from *server10* to *server20* to and from *server10s8* to *server20s8* using their IP addresses and then their hostnames:
	    ```shell
		## on server20
		vi /etc/hosts
		# add lines
		#172.10.10.120 server20.example.com server20
		#172.10.10.120 server20s8.example.com server20s8
		#192.168.0.110 server10.example.com server10
		#192.168.0.110 server10s8.example.com server10s8
		## on server10
		vi /etc/hosts
		# add lines
		#172.10.10.120 server20.example.com server20
		#172.10.10.120 server20s8.example.com server20s8
		#192.168.0.110 server10.example.com server10
		#192.168.0.110 server10s8.example.com server10s8
		ping server10 # confirm host name resolves
        ```
1. Asghar Ghori - Exercise 18.1: Configure NTP Client
	* Install the Chrony software package and activate the service without making any changes to the default configuration. Validate the binding and operation:
	    ```shell
		dnf install chrony -y
		vi /etc/chrony.conf # view default configuration
		systemctl start chronyd.service & systemctl enable chronyd.service
		chronyc sources # view time sources
		chronyc tracking # view clock performance
        ```
1. Asghar Ghori - Exercise 19.1: Access RHEL System from Another RHEL System
	* Issue the *ssh* command as *user1* on *server10* to log in to *server20*. Run appropriate commands on *server20* for validation. Log off and return to the originating system:
	    ```shell
		# on server 10
		ssh user1@server20