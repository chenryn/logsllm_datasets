To demonstrate ATRA, we implemented two ATRA
rootkits. Each rootkit relocates the target kernel data struc-
tures (system call table, LKM linked list) before manipulat-
ing them. Description of these two rootkits are presented in
Appendix A.1.
6. EVALUATION
We evaluate the correctness and performance impact of
the ATRA implementation for the x86 Linux system. The
real world rootkits such as adore-ng [26] manipulate various
kernel objects such as system call table, LKM linked list,
etc. By applying ATRA, we have shown that such important
kernel objects can fall as a victim to the ATRA attack. After
a successful ATRA, we veriﬁed that the system call table
and LKM linked list are now relocated to a non-monitored
physical memory area, and then we modiﬁed these relocated
data structures to launch system call table hooking attack
and LKM hiding attack. These two attacks were successfully
performed while ATRA was in eﬀect system-wide.
Since ATRA only manipulates the host states, not mod-
ifying any state on external monitors, the implementation
speciﬁcs of the external monitors will have no bearing with
the applicability of the attack. Any external monitors
that inspect host memory via physical address for integrity-
Figure 3: Screen capture of the ATRA-veriﬁcation
tool: ATRA Veri program takes the virtual address
of KObj as input and relocates KObj using ATRA.
The numbers in each column corresponds to the
physical address of PGD (obtained from CR3), PTE
and KObj respectively. Note that we manually in-
serted the ATRA rootkit into kernel at Time 5, and
removed it at Time 8. During Time 5 - 8 sec, the
entire system accessed the kernel object at physical
address 0x34C16000 which is a relocated copy of the
original KObj.
check are subject to ATRA. Although no implementations
of hardware-based monitors are publicly available for test-
ing, one can determine ATRA applicability by checking if
the external monitor design employs ATRA defense or not.
To conﬁrm that ATRA has indeed relocated the entire
chain of PGD, PTE and target kernel object (KObj), we
made a simple veriﬁcation tool (called ATRA Veri) that
takes a virtual address as input and enumerates the physical
address of each paging component. The infected ATRA Veri
process repeatedly enters kernel mode and retrieves CR3
register value and calculates the physical address of PGD,
PTE, and KObj. Using this tool, we have listed the phys-
ical addresses of aforementioned kernel data structures and
compared them before and after ATRA rootkit insertion.
We conﬁrmed that the relocation attack was successfully
applied upon loading the ATRA rootkit into the kernel. Fig-
ure 3 shows the screenshot of ATRA Veri veriﬁcation result
where the ATRA attack was launched at Time 5 and re-
moved at Time 8.
For evaluating the performance impact of ATRA on the
system, we launched ATRA system-widely against the sys-
tem call table and ran Unixbench 4.1 [21]. Unixbench per-
forms a variety of system operations such as process cre-
ation, system calls, and so forth. We ran 3 trials, which
took around 2 hours.
Figure 5 shows that the performance of the execl and the
system call has degraded. We believe that the additional
ATRA code that was planted into the interrupt handler was
the main cause for the degradation. However, even though
the additional code aﬀects both the execl and the system
call, the execl shows relatively higher performance degrada-
tion. We suspect that this is due to the initial page alloca-
tions made by ATRA. If the ATRA code is invoked for the
ﬁrst time after a process is created, the code executes the
ATRAin effectFigure 4: STREAM benchmark result: The memory
bandwidth has been decreased after ATRA is in ef-
fect. However, if we launch ATRA without ﬂushing
the TLB (although the attack may not be eﬀective),
the performance degradation becomes negligible.
initial routine, which allocates new pages to be used as the
landing site for the relocation.
Since the execl (wrapper function for execve system call)
is generally the ﬁrst function invoked by a newly created
process, (thus causing the initial page allocation) the execl
function takes all the performance hit induced from the ini-
tial page allocation. However, in system call benchmark, the
getpid system call is used for performance measure. Since
the getpid system call will always be invoked after the execl,
the initial overhead of the ATRA code will not be reﬂected
in the system call benchmark. This explains the diﬀerence
between the execl and system call benchmark result.
Other than the UnixBench performance experiment, we
also ran the STREAM [20] benchmark to measure the mem-
ory I/O performance since ATRA is expected to incur addi-
tional TLB ﬂushing. Flushing the TLB is known to incur a
signiﬁcant performance overhead since it requires page table
walking instead of referencing the TLB cache. Note that the
TLB ﬂush induced by context switching does not ﬂush the
kernel mappings from TLB as the page global bit in the page
table entry is set. Thus, the address translation mappings
for kernel regions are rarely ﬂushed on a special occasion
(i.e., TLB is full). However, it is necessary for ATRA to im-
mediately invalidate the TLB entries for the kernel regions,
making the MMU to reference the modiﬁed mapping. Fig-
ure 4 shows the STREAM benchmark results where about 3
to 4% of performance overhead were observed when ATRA is
in eﬀect. However, ATRA without TLB ﬂushing feature (al-
though the attack becomes ineﬀective) showed nearly iden-
tical performance as the case without ATRA. This result
indicates that the TLB ﬂushing is the major cause for the
memory I/O degradation.
The UnixBench and STREAM has shown that ATRA in-
curs additional performance overhead regarding process cre-
ation, interrupt handling and memory I/O. Nonetheless, we
believe the slight diﬀerence of the system performance shown
from the experiments is not a noticeable amount of change
from the system administrator’s view. Moreover, it would
be diﬃcult for the external monitor to measure the precise
overall performance of the host system.
Figure 5: UnixBench score results before/after
ATRA. The score unit for File Copy and Pipe
Throughput is KB/s, and the rest is Loops Per Sec-
ond (L/s). Note that the scores have been normal-
ized by UnixBench baselines. The most noticeable
diﬀerences between two results are the performance
degradation of Execl Throughput and the System Call
Overhead (Since the unit is L/s, the actual meaning
of this category is system call throughput.) The
degradation results can be explained by the addi-
tional ATRA code inside the interrupt handler.
The benchmarks performed also served as an evaluation
for the correct implementation of ATRA against victimized
kernel object. The most anticipated error is improper set-
ting of page table entry. Attacker should consider various
possibilities which would create the segmentation fault while
modifying the page table entry. However, the benchmark
test proved the implementation caused no such errors.
Note that even if the ATRA implementation is correct,
additional error could occur if the attacker naively launch
ATRA for dynamic KObj against partial set of victim pro-
cesses. This is because the content of shared dynamic kernel
data structure could become inconsistent between two pro-
cesses. Depending on the situation, this inconsistency might
cause an unexpected error. This is rather a general synchro-
nization issue as we often experience from multithreaded
programming which the programmer (in this case, the at-
tacker) should carefully consider.
7. DISCUSSION
Inter-Context Register Modiﬁcation via INT 0x80
or SYSENTER: The Intel Pentium 2 processor has intro-
duced a faster system call invoking instruction referred to as
SYSENTER. When the SYSENTER instruction is issued,
the CS, EIP, SS, ESP registers are automatically loaded
with the values saved in the corresponding Model Speciﬁc
Registers (MSR). System call invocation using SYSENTER
bypasses the interrupt service routine in traditional invoca-
tions for better performance. The address of the SYSEN-
TER handler is stored in the SYSENTER EIP MSR ﬁeld
of the MSR register. The SYSENTER handler can also
be relocated in a similar fashion by modifying the SYSEN-
TER EIP MSR ﬁeld. In both cases – whether it is a INT
0x80 system call or a SYSENTER system call – our reloca-
tion attack would be feasible.
05001000150020002500CopyScaleAddTriadMB/sBeforeAfterAfter(w/o TLB flush)0100200300400500600700800900ExeclThroughputFile Copy 1024PipeThroughputProcessCreationSystem CallOverheadBeforeAfteris accessed. However, the ATRA eﬀect will be restored again
when the process enters into kernel mode next time.
To verify the likelihood of such occurrence, we tested
Register-bound ATRA on preemptive Linux kernel and mea-
sured the number of such occurrence by repeatedly checking
if the relocated kernel object was accessed or not. In our
experiment where the victim process accessed the kernel ob-
ject over billion times, no such case occurred — the original
kernel object was never accessed. Therefore, we believe that
the natural likelihood of this scenario is extremely low, al-
though it is possible in theory.
8. RELATED WORK
The existing independent-processor-based kernel integrity
monitors rely on an assumption that relocation attacks on
their monitored kernel components are extremely diﬃcult.
Copilot [7] monitors a ﬁxed range of physical memory ad-
dress. The range is calculated by adding the ﬁxed linear
oﬀset to the kernel symbols generated at compile time. The
underlying assumption in this scheme is that the linear map-
ping between the virtual and physical addresses is intact.
Vigilare [8] adapts the same method to identify the regions
to be monitored, and the corresponding physical address
range will be monitored throughout its operation. The au-
thors explained that relocating a large portion of kernel code
would generate an abnormal traﬃc in the host system bus.
The LLM [11] introduced a secure kernel integrity moni-
toring scheme which can be utilized for multi-core system.
Their system is composed of a dedicated core and isolated
memory for kernel integrity monitoring. They also sketched
the possibility of memory shadowing attack to evade their
monitoring system because the dedicated core was not able
to access the context of the other core. They claimed that
such hypothetical attack can be detected by heuristics such
as identifying the free pages with kernel data structure.
A few hardware-based external monitors [7, 8, 11] have
brieﬂy mentioned potential ATRA-like attacks and sketched
some heuristic methods for mitigation. The heuristics, how-
ever, might also be evaded or only covered the speciﬁc kernel
data structure. For example, the heuristic that detects un-
usual copying of large portions of kernel code objects [8], can
be circumvented by copying a small snippets of the kernel
memory at a time. Furthermore, the heuristic, which iden-
tify duplicated kernel data structures in freed pages [11],
cannot be applied to the dynamic kernel data structures be-
cause the legitimate kernel data structures as well as dupli-
cated ones also remain in raw physical memory, which may
cause numerous false alarms.
These existing works,
Unlike the hardware-based external monitors,
including MGuard [10] and KI-
Mon [9] that did not mention about the relocation attack at
all, are vulnerable to the ATRA attack since their external
processors are not equipped for monitoring CPU registers.
in the
hardware-assisted approaches such as Hypercheck [17] that
uses SMM (System Management Mode) to run monitor code
can be readily architectured to monitor the host’s CPU reg-
isters since the SMM handler code for monitors shares the
same processor with the monitored host. However, sharing
the same processor entails a context-switching overhead be-
tween mode changes and imposes performance overhead on
the host’s normal operations. Each time the monitor code
runs, the normal operation running on the same processor
must yield and wait until the monitor code completes its
Figure 6: Transient eﬀect of CR3-ATRA. The
ATRA eﬀect set by CR3-ATRA persists while the
victimized process is in kernel mode until the pro-
cess is scheduled out due to context switching. Note
that when the victim process is scheduled back, the
CR3 register will be restored with the saved-CR3
value in memory, which is the original value that
has not been modiﬁed by CR3-ATRA.
Transient CR3-ATRA: Launching this attack modiﬁes
the CR3 register of the process directly, however, the register
value saved in memory remains unchanged. Therefore, the
eﬀectiveness of CR3-ATRA becomes transient. The ATRA
eﬀect caused by CR3-ATRA persists while the victimized
process is in kernel mode until the process is scheduled out.
This is because when the victim process is scheduled back,
the CR3 register will be restored with the previously saved
one in memory. Figure 6 describes this transient eﬀect of
CR3-ATRA from the perspective of time and CR3 value.
Kernel Threads: Kernel threads, such as kthreadd or
ksoftirqd, diﬀer from conventional Linux processes; The ker-
nel threads always run in kernel mode, so they do not need to
invoke interrupt handler for accessing kernel objects. There-
fore, the current methods of CR3-ATRA cannot be applied
against kernel threads.
While the current implementation of CR3-ATRA leaves
out the kernel threads, it would be possible to apply ATRA
to kernel threads by injecting CR3-modifying code via other
interrupt handlers (e.g., timer).
It should be noted that
the majority of processes are user-space ones, including the
likely targets of rootkits such as ps, ls, and bash.
Register-bound ATRA in Preemptive Kernel: The
transient eﬀect of Register-bound ATRA begins each time
a process enters kernel mode, and the eﬀect ends when the
global TLB entry is ﬂushed. If the kernel is non-preemptive,
this transient eﬀect guarantees the ATRA-aﬀected process
to access the relocated kernel object. However, if the kernel
is preemptive, on a rare occasion, the transient eﬀect might
vanish before the target kernel object is accessed.
For example, consider the following scenario: Suppose
the global TLB entry is ﬂushed then a process enters kernel
mode and invokes Register-bound ATRA code that updates
the CR3 with the physical address of the relocated PGD. Im-
mediately after this, the process is preempted and scheduled
out by timer interrupt. When the process is scheduled back,