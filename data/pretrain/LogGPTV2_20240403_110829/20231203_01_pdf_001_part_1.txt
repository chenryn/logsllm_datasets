# DuckDB: In-Process Analytical Database System

## About Me
**Mark Raasveldt**
- CTO of DuckDB Labs
- Previously at CWI, Database Architectures

## What is DuckDB?
- **DuckDB**: An in-process OLAP (Online Analytical Processing) DBMS.
- **"The SQLite for Analytics"**: A free and open-source (MIT license) database system.
- Website: [duckdb.org](https://duckdb.org)

## System Overview
### CMU Talk 2020
- **Single-File Storage**: Data is stored in a single file with a header, metadata, and column data.
- **Parser**: Handles the parsing of SQL queries.
- **MVCC (Multi-Version Concurrency Control)**: Ensures transactional consistency.
- **Vectorized Processing**: Optimizes query execution by processing data in batches.

### Vectorized Processing
- **Custom Vector Format**: Designed for efficient execution, similar to Arrow but optimized for performance.
- **Vectors as the Core**: Vectors are the primary data structure used throughout the engine.
- **Co-designed with Velox Team**: Collaboration to enhance vectorized processing.

### Vector Types
- **Flat Vector**: Uncompressed array of data.
- **Constant Vector**: All rows have the same value.
- **Dictionary Vector**: Map of indexes to dictionary values.
- **Sequence Vector**: Base and increment values.

### Physical and Logical Representation
- **Physical Representation**: How data is stored in memory.
- **Logical Representation**: How data is interpreted and processed.
- **Unified Format**: Converts vectors to a unified format without data copying or movement.

### String Storage
- **Umbra Format**: Strings are stored in a 16-byte format.
- **Inline Short Strings**: Strings up to 12 bytes are inlined.
- **Long Strings**: Stored with a prefix and pointer.
- **Fast Comparison**: Early-out comparison for performance.

### Nested Types
- **Structs and Lists**: Important for analytics.
- **Efficient Storage**: Nested types are stored recursively using vectors.
- **Structs**: Store child vectors and a validity mask.
- **Lists**: Stored as a combination of offsets/lengths and a child vector.

### Query Execution
#### Pull-Based Model
- **Initial Implementation**: DuckDB started as a pull-based system.
- **Vector Volcano**: Each operator implements `GetChunk` method.
- **Simplified Hash Join Example**:
  ```cpp
  void HashJoin::GetChunk(DataChunk &result) {
      if (!build_finished) {
          while(right_child->GetChunk(child_chunk)) {
              BuildHashTable(child_chunk);
          }
          build_finished = true;
      }
      left_child->GetChunk(child_chunk);
      ProbeHashTable(child_chunk, result);
  }
  ```

- **Single-Threaded Execution**: Straightforward.
- **Multi-Threaded Execution**: Challenging, especially for operations like `CURRENT_TIMESTAMP`.

#### Parallelism Model
- **AWS Instances**: Up to 192 cores, offering significant speed-up potential.
- **Exchange Operator**: Splits the plan into multiple partitions for independent execution.
- **Challenges**: Plan explosion, load imbalance, and added materialization costs.

#### Morsel-Driven Parallelism
- **Parallelism-Aware Operators**: Individual operators handle parallelism.
- **Adaptive Data Distribution**: Input data is distributed adaptively.
- **Non-Baked Parallelism**: Parallelism is not hardcoded into the plan.
- **Reference**: [Morsel-Driven Parallelism: A NUMA-Aware Query Evaluation Framework for the Many-Core Age](https://www.vldb.org/pvldb/vol7/p345-leis.pdf) by Viktor Leis et al.

#### Pipelines
- **Example Pipeline**:
  - **Pipeline 1 (HT Build)**: Builds the hash table.
  - **Pipeline 2 (HT Probe + Aggregate)**: Probes the hash table and performs aggregation.

#### Push-Based Execution
- **Switch to Push-Based Model**: Separate interfaces for source, sink, and operator.
- **Parallelism-Aware Source and Sink**: Enhanced for multi-threaded execution.

This overview provides a comprehensive look at DuckDB, its architecture, and key features. For more detailed information, visit [duckdb.org](https://duckdb.org).