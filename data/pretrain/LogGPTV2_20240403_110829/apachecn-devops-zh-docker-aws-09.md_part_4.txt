在前面的示例中，`DatabasePassword=my-super-secret-password`行已被删除，`ApplicationImageTag`参数的值已被更新，引用了在新更新的 Docker 映像上标记的提交哈希。
# 向其他资源透露机密
您已经更新了您的 ECS 任务定义，这样您的应用容器现在将从 AWS 机密管理器中提取机密，并将它们作为环境变量注入。这对 Docker 映像来说很好，因为您可以完全控制映像的行为，并且可以添加诸如入口点脚本等功能来适当地注入机密。对于依赖于这些机密的其他资源，您没有这样的能力——例如，您的栈中的`ApplicationDatabase`资源定义了一个 RDS 实例，在编写本文时，它不包括对 AWS 机密管理器的本机支持。
这个问题的一个解决方案是创建一个云信息定制资源，其工作是查询 AWS 机密管理器服务并返回与给定机密相关联的机密值。因为自定义资源可以附加数据属性，所以您可以在其他资源中引用这些属性，从而提供一种简单的机制，将您的机密注入到任何不支持 AWS 机密管理器的云信息资源中。如果您对这种方法的安全性感到疑惑，cloud information 自定义资源响应规范([https://docs . AWS . Amazon . com/AWSCloudFormation/latest/user guide/crpg-ref-responses . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref-responses.html))包含一个名为`NoEcho`的属性，它指示 cloud information 不要通过控制台或在日志信息中公开数据属性。通过设置此属性，您可以通过查询云信息应用编程接口或查看云信息日志来确保您的机密不会被无意中暴露。
# 创建机密管理器λ函数
下面的示例演示了向云信息栈中添加一个 Lambda 函数资源，该资源查询 AWS 机密管理器服务，并在机密值内的密钥/值对中给定目标机密名称和目标密钥的情况下返回机密值:
```
...
...
Resources:
  SecretsManager:
 Type: AWS::Lambda::Function
 DependsOn:
 - SecretsManagerLogGroup
 Properties:
 FunctionName: !Sub ${AWS::StackName}-secretsManager
 Description: !Sub ${AWS::StackName} Secrets Manager
 Handler: index.handler
 MemorySize: 128
 Runtime: python3.6
 Timeout: 300
 Role: !Sub ${SecretsManagerRole.Arn}
 Code:
 ZipFile: |
 import cfnresponse, json, sys, os
 import boto3
 client = boto3.client('secretsmanager')
 def handler(event, context):
            sys.stdout = sys.__stdout__
 try:
 print("Received event %s" % event)
 if event['RequestType'] == 'Delete':
 cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
 return
 secret = client.get_secret_value(
 SecretId=event['ResourceProperties']['SecretId'],
 )
 credentials = json.loads(secret['SecretString'])
              # Suppress logging output to ensure credential values are kept secure
              with open(os.devnull, "w") as devnull:
                sys.stdout = devnull
                cfnresponse.send(
                  event, 
                  context, 
                  cfnresponse.SUCCESS,
                  credentials, # This dictionary will be exposed to CloudFormation resources
                  secret['VersionId'], # Physical ID of the custom resource
                  noEcho=True
                )
 except Exception as e:
 print("A failure occurred with exception %s" % e)
 cfnresponse.send(event, context, cfnresponse.FAILED, {})
 SecretsManagerRole:
 Type: AWS::IAM::Role
 Properties:
 AssumeRolePolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Effect: Allow
 Principal:
 Service: lambda.amazonaws.com
 Action:
 - sts:AssumeRole
 Policies:
 - PolicyName: SecretsManagerPermissions
 PolicyDocument:
 Version: "2012-10-17"
 Statement:
 - Sid: GetSecrets
 Effect: Allow
 Action:
 - secretsmanager:GetSecretValue
 Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:todobackend/*
            - Sid: DecryptSecrets
              Effect: Allow
              Action:
 - kms:Decrypt
 Resource: !ImportValue secrets-key
- Sid: ManageLambdaLogs
 Effect: Allow
 Action:
 - logs:CreateLogStream
 - logs:PutLogEvents
 Resource: !Sub ${SecretsManagerLogGroup.Arn}
```
```
SecretsManagerLogGroup:
 Type: AWS::Logs::LogGroup
 Properties:
 LogGroupName: !Sub /aws/lambda/${AWS::StackName}-secretsManager
 RetentionInDays: 7...
  ...
```
Adding a Secrets Manager CloudFormation Custom Resource Function
前面示例的配置与您在第 8 章中创建`EcsTaskRunner`自定义资源函数时执行的配置非常相似。在这里，您创建了一个带有相关联的`SecretsManagerRole` IAM 角色的`SecretsManager` Lambda 函数，该角色授予从 AWS 机密管理器中检索和解密机密的能力，其方式类似于之前创建的`ApplicationTaskRole`，同时还有一个`SecretsManagerLogGroup`资源来从 Lambda 函数中收集日志。
该函数代码比 ECS 任务运行器代码更简单，并且期望将名为`SecretId`的单个属性传递给自定义资源，该自定义资源指定机密的标识或名称。该函数从 AWS 机密管理器获取机密，然后使用`json.loads`方法将机密密钥/值对作为 JSON 对象加载到名为`credentials`的变量中。然后，该函数将`credentials`变量返回到 CloudFormation，这意味着每个凭据都可以被栈中的其他资源访问。请注意，您使用`with`语句来确保通过将`sys.stdout`属性设置为`/dev/null`来抑制通过`cfnresponse.send`方法打印的响应数据，因为响应数据包含您不想以明文形式公开的机密值。这种方法确实需要一些小心，您需要将`sys.stdout`属性恢复到其在`handler`方法开始时的默认状态(由`sys.__stdout__`属性表示)，因为您的 Lambda 函数运行时可能会在多次调用中被缓存。
The custom resource function code could be extended to also provision secrets into AWS Secrets Manager. For example, you could take as an input the KMS encrypted value of a intended secret value or even generate a random secret value, and then provision and expose this credential to other resources.
# 创建机密自定义资源
现在您已经为您的自定义资源准备好了一个 Lambda 函数，您可以创建实际的自定义资源，该资源将提供对存储在 AWS 机密管理器中的机密的访问。以下示例演示如何为您在本章前面创建的**证书/凭证**机密添加自定义资源，然后从您的`ApplicationDatabase`资源访问该资源:
```
...
...
Resources:
  Secrets:
 Type: AWS::CloudFormation::CustomResource
 Properties:
 ServiceToken: !Sub ${SecretsManager.Arn}
 SecretId: todobackend/credentials
  SecretsManager:
    Type: AWS::Lambda::FunctionResources:
  ...
  ...
  ApplicationDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: MySQL
      EngineVersion: 5.7
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 10
      StorageType: gp2
      MasterUsername: todobackend
 MasterUserPassword: !Sub ${Secrets.MYSQL_PASSWORD} ...
  ...
```
Adding a Secrets Manager Custom Resource
在前面的示例中，您创建了一个名为`Secrets`的自定义资源，该资源通过`ServiceToken`属性引用`SecretsManager`函数，然后通过`SecretId`属性传递要检索的凭据的名称。现有`ApplicationDatabase`资源上的`MasterUserPassword`属性随后被更新，以引用可通过`Secrets`资源访问的`MYSQL_PASSWORD`密钥，该密钥返回存储在**todo back/credentials**机密中的正确密码值。
# 向 AWS 部署机密
此时，您已经准备好将您的更改部署到您的云信息栈中，这可以使用我们在过去几章中使用的`aws cloudformation deploy`命令来完成:
```
> aws cloudformation deploy --template-file stack.yml \
 --stack-name todobackend --parameter-overrides $(cat dev.cfg) \
 --capabilities CAPABILITY_NAMED_IAM
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
```
Deploying CloudFormation stack changes
该部署将影响以下资源:
*   将首先创建支持自定义资源的资源，以及对正在应用的 ECS 任务定义的更改。
*   将创建名为`Secrets`的自定义资源，一旦创建，它将向其他云信息资源公开**的键/值对和/或凭证**的机密。
*   将更新`ApplicationDatabase`资源，其中`MasterPassword`属性基于**todo back/credentials**机密中的`MYSQL_PASSWORD`变量的值进行更新。
*   给定对关联的`MigrateTaskDefinition`的更改后，`MigrateTask`自定义资源将被更新，并运行一个新任务，该任务使用更新后的 todo backnd 映像中的入口点脚本将**todo backnd/credentials**机密中的每个键/值对导出到环境中，其中包括访问应用数据库所需的`MYSQL_PASSWORD`变量。
*   给定相关联的`ApplicationTaskDefinition`的改变，资源`ApplicationService`将被更新，并且类似于`MigrateTask`，每个应用实例现在将在启动时注入与**相关联的环境变量来建立/证明**机密。该更新将触发`ApplicationService`的滚动部署，这将使新版本的应用投入使用，然后在不导致任何中断的情况下耗尽并删除旧版本的应用。
假设部署成功，您应该能够验证您的应用是否仍在成功运行，并且您可以列出、添加和删除待办事项。
您还应该验证您的`SecretsManagerFunction`资源没有记录机密的明文值——下面的屏幕截图显示了该函数的日志输出，您可以看到它确实抑制了发送回 CloudFormation 的成功响应的记录:
![](img/25145a22-a7df-45d4-bf25-3c5f3a9aa41b.png)
Viewing Log Output from the Secrets Manager Function
# 摘要
机密管理对于 Docker 应用的短暂性来说是一个挑战，在这种情况下，将凭据存储在配置文件中的预配置长时间运行的服务器的概念不再是一个选项，直接将密码作为外部配置的环境变量注入被认为是一种糟糕的安全做法。这需要一个机密管理解决方案，您的应用可以从安全的凭据存储中动态获取机密，在本章中，您使用 AWS 机密管理器和 KMS 服务成功实现了这样一个解决方案。
您学习了如何创建 KMS 密钥，该密钥用于加密和解密机密信息，并由 AWS 机密管理器用于确保其存储的机密的隐私和机密性。接下来，您将被介绍给 AWS 机密管理器，并学习如何使用 AWS 控制台和 AWS 命令行界面创建机密。您学习了如何在机密中存储多个密钥/值对，并了解了删除保护等功能，其中 AWS 机密管理器允许您将以前删除的机密还原长达 30 天。
有了示例应用的凭据存储，您学习了如何在容器中使用入口点脚本在容器启动时动态获取和注入机密值，使用简单的 bash 脚本结合 AWS CLI 将一个或多个机密值作为变量注入到内部容器环境中。尽管这种方法被认为不如您的应用直接获取机密安全，但它确实具有优势，可以应用于任何支持环境变量进行配置的应用，使其成为一种更通用的解决方案。
在为应用发布更新的 Docker 映像后，您更新了 ECS 任务定义，以注入每个容器应该检索的机密的名称，然后创建了一个简单的自定义资源，该资源能够将您的机密公开给其他类型的 AWS 资源，这些资源本身不支持 AWS 机密管理器，也没有容器入口点脚本等机制来检索机密。您已确保此自定义资源的配置不会通过日志或其他形式的操作事件泄露您的凭据，并更新了您的应用数据库资源，以便通过此自定义资源检索应用的数据库密码。
有了机密管理解决方案，您已经解决了前几章中的一个核心安全问题，在下一章中，您将了解如何解决应用的另一个安全问题，即能够独立隔离网络访问，并在每个容器或 ECS 任务定义的基础上应用网络访问规则。
# 问题
1.  对/错:KMS 服务要求您提供自己的私钥信息。
2.  KMS 的哪项功能允许您为密钥指定逻辑名称，而不是基于 UUID 的密钥标识符？
3.  您希望避免手动配置在多个云信息栈中使用的 KMS 密钥的 ARN。假设您在单独的云信息栈中定义了 KMS 键，您可以使用什么云信息功能来解决这个问题？
4.  对/错:当您从 AWS 机密管理器中删除机密时，您永远无法恢复该机密。
5.  在入口点脚本中，您通常会使用哪些工具从 AWS 机密管理器中检索机密，并将机密中的密钥/值对转换为适合导出到容器环境的密钥/值对？
6.  您在容器入口点脚本中收到一个错误，表明您没有足够的权限访问机密。您检查 IAM 角色，并确认它具有允许机密的单一权限`secretsmanager:GetSecretValue`。要解决此问题，您还需要授予什么权限？
7.  在处理不应作为明文值公开的敏感数据时，应该设置哪个 CloudFormation 自定义资源属性？
8.  您在访问 AWS 资源的容器入口点脚本中收到一个错误“您必须配置一个区域”。应该向容器中添加什么环境变量？
# 进一步阅读
有关本章主题的更多信息，您可以查看以下链接:
*   云信息 KMS 关键资源参考:[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/AWS-Resource-kms-Key . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-key.html)
*   cloud information KMS 别名资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-kms-Alias . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-alias.html)
*   AWS KMS 开发者指南:[https://docs . AWS . Amazon . com/kms/latest/Developer Guide/overview . html](https://docs.aws.amazon.com/kms/latest/developerguide/overview.html)
*   KMS 参考:https://docs . AWS . Amazon . com/CLI/latest/Reference/kms/index . html
*   AWS 机密管理器用户指南:[https://docs . AWS . Amazon . com/Secrets Manager/latest/User Guide/intro . html](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html)
*   AWS CLI 机密管理器参考:[https://docs . AWS . Amazon . com/CLI/latest/Reference/Secrets Manager/index . html](https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/index.html)
*   AWS Python SDK Secrets Manager 参考:[http://boto 3 . read the docs . io/en/latest/Reference/services/Secrets Manager . html](http://boto3.readthedocs.io/en/latest/reference/services/secretsmanager.html)
*   cloud information Exports:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/using-cfn-stack-Exports . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html)
*   关于 Docker 机密管理的一般性讨论:https://github . com/Moby/Moby/issues/13490