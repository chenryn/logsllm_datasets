Remaining URLs
Accuracy
1460B
5,844
1,523
11
9
20
512B
5,844
1,494
11
6
8
128B
5,844
1,783
6
8
12
4,281
4,035
98.4% 98.8% 99.2%
4,325
quently occurred ranges (0, 0.1) and (0.4, 0.55), which correspond
to packet-based IAT and ﬂight-based IAT, respectively. The com-
plementary CDF of normalized IAT including I1 where I norm′
=
Ij/P8
a=1 Ia for 1 ≤ j ≤ 8 is shown in Figure 3(b). In most cases
I1 is much larger, due to the extra delay caused by the server OS /
applications, explaining the need for discarding I1 in Algorithm 1.
Also in Figure 3(b), curves of I3 and I6 depict the typical increase
in congestion window size at the beginning of slow start i.e., from
2 MSS to 3 MSS (instead of 4 MSS due to delayed ACKs [6]).
5.2 Rate Tracking Graph
j
We ﬁrst validate whether under high retransmission rate, RTGs
of most ﬂows exhibit positive correlation coefﬁcients. Our testbed
downloaded each URL described previously. During the ﬁle down-
load, the testbed dropped packets at loss rate of 5%, 10%, and
15% respectively, and also generated RTG for the downloading
trace. Such approach only introduces random losses not conges-
tion losses. However, all known TCP implementations do not dis-
tinguish them (both are triggered by duplicated ACKs or timeout)4.
Next we show results for the loss rate of 10%. For other loss rates,
qualitatively similar observations are made.
We successfully downloaded 4,462 out of 5,844 URLs. For each
downloading trace, four tracking window sizes of 50KB, 100KB,
4We created a 1Mbps bottleneck link to increase congestion losses.
In that case, well behaved ﬂows also exhibit strong positive corre-
lation coefﬁcients when both congestion and random losses exist.
82F
D
C
1
0.8
0.6
0.4
0.2
0
−1
winsize = 50KB
winsize = 100KB
winsize = 200KB
winsize = 400KB
−0.5
0
Correlation Coefficient
0.5
1
x 109
2.4646
2.4646
2.4646
r
e
b
m
u
N
q
e
S
2.4646
DATA Packet
ACK Packet
1.9
2
Time (sec)
2.1
Figure 4: Distribution of correlation coefﬁcients of RTGs
Figure 6: Irregular retransmission detected by RTG
Table 4: Validation of the ﬂow clock extraction algorithm
Application
Web/FTP bulk transfer
Interactive Web session
SSH
Remote Desktop
VoIP (Skype)
Multimedia streaming
Gaming
Flow Clocks
RTT
RTT / NoClk
NonRTT / NoClk
RTT / NoClk
NonRTT / NoClk
RTT / NonRTT
NonRTT / NoClk
Errors
0 / 20
1 / 20
0 / 20
0 / 20
1 / 20
0 / 20
0 / 20
truth with extracted ﬂow clocks. We collected 10 ﬂows for each ap-
plication type. By measuring the RTT using ping and examining
the frequency spectrum and packet sequence diagram, it is easy to
determine the dominating ﬂow clock and its origin. Similar to the
algorithm described in §4.3, we declare the existence of ﬂow clock
by observing at least two human-observable harmonic frequencies
among 2f0, 3f0, 4f0, where f0 is the human-observable fundamen-
tal frequency6. We declare that our algorithm correctly extracts the
ﬂow clock if the difference between human judgment (choosing the
local maximum) and algorithm output is less than 10%. We declare
that the clock is originated from transport layer if the difference be-
tween ﬂow clock and RTT is less than 10%. The whole experiment
was conducted twice at one author’s department (optical ﬁber con-
nection for campus network) and home (broadband cable connec-
tion). The validation results are reported in Table 4, from which we
select eight representative cases illustrated in Figures 7(a) to (h).
For each plot in Figure 7, the bullets on spikes denote candidate
peaks (after clustering) as described in §4.3 step (iv); the arrows
point to the extracted ﬂow clocks (fundamental frequencies); and
two horizontal lines indicate µ0 and µ0 + 3σ0 (explained in §4.3
step (iv)).
For Web/FTP bulk transfer, we collected ﬂows downloading or
uploading ﬁles larger than 1MB with RTT varying from 20ms (Fig-
ure 7(a)) to 400ms (Figure 7(b)). Clocks of all ﬂows clearly cor-
respond to RTT. For interactive Web sessions such as GMail, RTT-
based clocks in both directions are blurred by user’s interaction at
varying degrees (Figure 7(c)). For SSH ﬂows7, we observed intense
amplitude at 62.5Hz (16ms) from client to server (Figure 7(d))
since IATs of most packets are multiples of the fundamental fre-
quency at 16ms regardless of RTT. As shown in Figure 7(e), Skype
ﬂows from caller to callee exhibit dominant frequency character-
istics at 50Hz (other peaks in Figure 7(e) are not fundamental fre-
quencies), while we did not observe such behavior for reverse ﬂows
(callee to caller, Figure 7(f)). Such small non-RTT based clocks
6We admit that such an approach introduces subjective elements;
however, in most cases, such determination by human is trivial.
7We use SSH Secure Shell version 3.2.9 on Windows XP SP3 as
client; we tried both Solaris 10 and Linux 2.6.20 as server.
Figure 5:
(a) A normal Rate Tracking Graph (window size
W = 50KB, correlation coefﬁcient=0.88) (b) An abnormal
Rate Tracking Graph (window size W = 100KB, correlation
coefﬁcient=-0.04)
200KB and 400KB are used, generating 17,848 RTGs. Figure 4
plots the distribution of correlation coefﬁcients for each window
size, clearly indicating that in most cases, the sender slows down
the rate when retransmissions increase. Correlation coefﬁcients for
any pair of tracking window sizes (Wx, Wy) are positively corre-
lated between (0.75, 0.92). After entropy-based cutting, the aver-
age entropy only slightly increases from 6.06 to 6.11 (0.8%), be-
cause it is unlikely that large gaps occur in these HTTP download
traces. However, for our seven passive collected datasets, the aver-
age entropy increases by 5% to 9%.
We examine the maximum of correlation coefﬁcients for four
window sizes to discover irregular retransmissions. All ﬂows have
max{CC50,CC100,CC200,CC400 > 0.3} except for one with
CC50 = 0.09, CC100 = 0.08, CC200 = −0.04, and CC400 =
−0.27 (CCW denotes RTG’s correlation coefﬁcient for tracking
window size W ) as shown in Figure 5(b), which provides a con-
trast for a typical RTG with high positive correlation coefﬁcient
illustrated in Figure 5(a). From the sequence diagram of the ir-
regular ﬂow shown in Figure 6, we observe that in fast retrans-
mission, instead of retransmitting the lost packet (indicated by the
duplicated ACK), the server retransmits all packets from the lost
packet to the current packet with the maximum sequence number.
This can be caused by problematic TCP implementation. In fact,
the OS ﬁngerprinted by Nmap [2] looks very strange (“HP 9100c
Digital Sender multifunction printer” with conﬁ-
dence of 93%)5.
5.3 Flow Clock Extraction
To evaluate the ﬂow clock extraction algorithm (§4.3), we cap-
ture ﬂows of different applications (listed in Table 4) where the
ﬂow clocks and their origins are known, then compare the ground
5We use Nmap 4.85 with -O -host-timeout 600000.
83Figure 7: Frequency spectrum and ﬂow clocks for different applications
may be caused by software clocks of the user application or OS.
For multimedia ﬂows, as examples shown in Figures 7(g)(h), their
clocks can either be RTT-based (e.g., PPLive) or application-based
(e.g., Winamp Radio).
We investigated the origin of the 16ms-clock for SSH ﬂows. By
hooking the socket send() API and WM_KEYDOWN message (a
keyboard event) in SSHClient.exe using Detours [1] (a binary
interception tool for Windows functions), we observe that both
events happen at a granularity of 16ms, indicating that the clock
is caused by the timing granularity of keyboard scanning event in
Windows XP.
Clearly, Figure 7 only lists several possible but not all ﬂow clock
conﬁgurations. Flow clocks are affected by multiple factors includ-
ing link speed, packet loss rate, RTT, applications and user interac-
tion. In §6.3, we present characterizations of ﬂow clocks observed
in our datasets.
6. ANALYSIS OF LONG-LIVED FLOWS
In this section, we apply methodologies introduced in §4 on our
datasets and present the results. We only examine long-lived ﬂows
deﬁned to be with duration of more than 30 sec and size larger
than 1MB (The numbers of such ﬂows are shown in the ﬁrst row
in Table 6). There are several reasons that we focus on long-lived
ﬂows. First, they contribute to considerable trafﬁc volume, as for
each dataset, the long-lived ﬂows accounts for at most 0.16% of all
ﬂows, but contributes at least 55% of trafﬁc volume; second, long-
lived ﬂows provide enough information as required by our statisti-
cal approaches; third, the reduction of the number of ﬂows signif-
icantly saves analysis time without losing the global view on the
datasets. §6.1, §6.2 and §6.3 discuss the results for ICW inference,
irregular retransmission and ﬂow clocks, respectively.
6.1 Initial Congestion Window Size
All our passively collected datasets exhibit IAT distributions very
similar to those of active probing datasets as shown in Figures 3(a)(b).
So we choose the same parameters k = 8 and θ = 0.2.
84Table 5: Distributions of Initial Congestion Window
7
1-2
3
4
5
6
Table 6: Distribution of different types of irregular retransmis-
sion
Long-lived
High Retran
Non-irregular
Irregular
Non-Conform
Sender Limit
Partial Overlap
Gaps/Rate Chg
Unknown
BS3
BS4 VPN DSL
33K
1672
692
821
778
43
928
49
BU
31K
977
BS1
29K
1009
BS2
29K 29K 26K 4.1K
908
16
Breakdown of ﬂows with high retransmission rate
15
1
Breakdown of ﬂows with irregular retransmission
0
1
0
0
0
20
25
5
2
9
16
17
5
2
9
19
18
5
4
10
12
20
3
3
5