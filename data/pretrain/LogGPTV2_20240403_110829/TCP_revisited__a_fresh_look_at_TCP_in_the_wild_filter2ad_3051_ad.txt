### 剩余URLs

| 数据大小 | 总数 | 成功下载数 | 未知1 | 未知2 | 未知3 |
| --- | --- | --- | --- | --- | --- |
| 1460B | 5,844 | 1,523 | 11 | 9 | 20 |
| 512B | 5,844 | 1,494 | 11 | 6 | 8 |
| 128B | 5,844 | 1,783 | 6 | 8 | 12 |

### 准确性
- 4,281: 98.4%
- 4,325: 98.8%
- 4,035: 99.2%

### 间隔时间 (IAT) 分析
频繁出现的范围是 (0, 0.1) 和 (0.4, 0.55)，分别对应基于包的 IAT 和基于飞行的 IAT。图 3(b) 显示了归一化 IAT 的互补累积分布函数（包括 I1，其中 \( I_{\text{norm}}' = \frac{I_j}{\sum_{a=1}^8 I_a} \) 对于 1 ≤ j ≤ 8）。在大多数情况下，由于服务器操作系统/应用程序引起的额外延迟，I1 会显著较大，因此在算法 1 中需要丢弃 I1。此外，在图 3(b) 中，I3 和 I6 曲线描绘了慢启动阶段拥塞窗口大小的典型增加，从 2 MSS 到 3 MSS（由于延迟 ACK [6] 而不是 4 MSS）。

### 速率跟踪图 (RTG)
我们首先验证在高重传率下，大多数流的 RTG 是否表现出正相关系数。我们的测试平台下载了之前描述的每个 URL，并在文件下载过程中以 5%、10% 和 15% 的丢包率分别丢弃数据包，并生成相应的 RTG。这种方法仅引入随机丢包，而不是拥塞丢包。然而，所有已知的 TCP 实现无法区分它们（两者都是由重复 ACK 或超时触发的 [4]）。接下来我们展示 10% 丢包率下的结果，其他丢包率的结果也具有类似的观察结果。

我们成功下载了 5,844 个 URL 中的 4,462 个。对于每个下载跟踪，使用四个跟踪窗口大小：50KB、100KB、200KB 和 400KB，生成了 17,848 个 RTG。图 4 绘制了每个窗口大小的相关系数分布，清楚地表明在大多数情况下，当重传增加时，发送方会降低传输速率。任何两个跟踪窗口大小 (Wx, Wy) 之间的相关系数为正相关，范围在 (0.75, 0.92) 之间。经过熵基切割后，平均熵从 6.06 略微增加到 6.11（0.8%），因为在这些 HTTP 下载跟踪中不太可能出现大的间隙。然而，对于我们的七个被动收集的数据集，平均熵增加了 5% 到 9%。

我们检查四种窗口大小的最大相关系数，以发现不规则的重传。除了一个流（CC50 = 0.09, CC100 = 0.08, CC200 = -0.04, CC400 = -0.27）外，所有流都有 max{CC50, CC100, CC200, CC400 > 0.3}。图 5(b) 展示了一个典型的具有高正相关系数的 RTG，与图 5(a) 形成对比。从不规则流的序列图（图 6）中可以看出，在快速重传过程中，服务器重新传输从丢失的包到当前最大序列号的所有包，而不是只重新传输丢失的包。这可能是由有问题的 TCP 实现引起的。实际上，通过 Nmap [2] 指纹识别的操作系统看起来非常奇怪（“HP 9100c Digital Sender 多功能打印机”，置信度 93%）[5]。

### 流钟提取
为了评估流钟提取算法（§4.3），我们捕获了不同应用（表 4 列出）的流，其中流钟及其来源已知，然后将地面实况与提取的流钟进行比较。我们在一位作者的部门（校园网络光纤连接）和家中（宽带电缆连接）进行了两次实验。验证结果如表 4 所示，从中选择了八个代表性案例，如图 7(a) 至 (h) 所示。对于每个图 7 中的图表，尖峰上的子弹表示候选峰值（聚类后），箭头指向提取的流钟（基本频率），两条水平线表示 µ0 和 µ0 + 3σ0（见 §4.3 步骤 (iv)）。

对于 Web/FTP 大批量传输，我们收集了 RTT 从 20ms（图 7(a)）到 400ms（图 7(b)）的大于 1MB 文件的下载或上传流。所有流的钟都明显对应于 RTT。对于交互式 Web 会话（如 GMail），RTT 基础的钟在两个方向上都被用户的交互不同程度地模糊（图 7(c)）。对于 SSH 流 [7]，我们观察到从客户端到服务器的方向上有强烈的 62.5Hz（16ms）振幅，因为大多数数据包的 IAT 是 16ms 基本频率的倍数，而与 RTT 无关（图 7(d)）。如图 7(e) 所示，Skype 流从呼叫者到被叫者表现出 50Hz 的主要频率特性（图 7(e) 中的其他峰值不是基本频率），而在反向流（被叫者到呼叫者，图 7(f)）中未观察到这种行为。这种小的非 RTT 基础的钟可能由用户应用程序或操作系统的软件钟引起。对于多媒体流，如图 7(g)(h) 所示，它们的钟可以是 RTT 基础的（例如 PPLive）或应用基础的（例如 Winamp Radio）。

我们调查了 SSH 流的 16ms 钟的起源。通过使用 Detours [1]（一种 Windows 函数的二进制拦截工具）钩住 SSHClient.exe 中的 socket send() API 和 WM_KEYDOWN 消息（键盘事件），我们观察到这两种事件都以 16ms 的粒度发生，表明该钟是由 Windows XP 中的键盘扫描事件的时间粒度引起的。

显然，图 7 只列出了几种可能但不是所有的流钟配置。流钟受到多个因素的影响，包括链路速度、丢包率、RTT、应用程序和用户交互。在 §6.3 中，我们将展示在我们的数据集中观察到的流钟特征。

### 长寿命流分析
在本节中，我们将 §4 中介绍的方法应用于我们的数据集并呈现结果。我们只检查定义为持续时间超过 30 秒且大小大于 1MB 的长寿命流（表 6 的第一行显示了此类流的数量）。我们关注长寿命流有几个原因：首先，它们贡献了大量的流量体积；其次，长寿命流提供了足够的信息以满足我们的统计方法的要求；第三，减少流的数量可以显著节省分析时间而不失去对数据集的整体视图。§6.1、§6.2 和 §6.3 分别讨论 ICW 推断、不规则重传和流钟的结果。

### 初始拥塞窗口大小
我们所有被动收集的数据集的 IAT 分布与主动探测数据集非常相似，如图 3(a)(b) 所示。因此，我们选择相同的参数 k = 8 和 θ = 0.2。

### 不同类型不规则重传的分布
| 类型 | BS3 | BS4 VPN DSL | BU | BS1 | BS2 |
| --- | --- | --- | --- | --- | --- |
| 长寿命 | 33K | 31K | 29K | 29K | 29K 26K 4.1K |
| 高重传 | 1672 | 977 | 1009 | 1009 | 908 |
| 非不规则 | 692 | 16 | 16 | 16 | 16 |
| 不规则 | 821 | 16 | 16 | 16 | 16 |
| 非一致 | 778 | 16 | 16 | 16 | 16 |
| 发送限制 | 43 | 16 | 16 | 16 | 16 |
| 部分重叠 | 928 | 16 | 16 | 16 | 16 |
| 间隙/速率变化 | 49 | 16 | 16 | 16 | 16 |
| 未知 | 49 | 16 | 16 | 16 | 16 |

### 不同类型的初始拥塞窗口分布
| 窗口大小 | 分布 |
| --- | --- |
| 1-2 | 7 |
| 3 | 15 |
| 4 | 1 |
| 5 | 0 |
| 6 | 0 |
| 7 | 20 |

### 高重传率流的分解
- 高重传: 15
- 非不规则: 1
- 不规则: 0
- 非一致: 0
- 发送限制: 0
- 部分重叠: 25
- 间隙/速率变化: 5
- 未知: 2

### 不规则重传流的分解
- 高重传: 1
- 非不规则: 0
- 不规则: 2
- 非一致: 9
- 发送限制: 16
- 部分重叠: 17
- 间隙/速率变化: 5
- 未知: 3

希望这些优化后的文本更加清晰、连贯和专业。如果有进一步的问题或需要更多细节，请告诉我！