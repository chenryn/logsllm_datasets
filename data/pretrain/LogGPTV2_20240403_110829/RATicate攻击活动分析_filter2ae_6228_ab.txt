  * 所有初始Loader都只有一个输出函数，并由NSIS安装包调用
  * 初始Loader从加密数据中读取数据，以解密加载Loader 2的shellcode。
  * 所有样本的Loader 2从加密数据中提取并解密shellcode 3。
  * Shellcode 3负责解密最终payload并将其注入到远程进程中，在所有分析的样本之间都是相同的。
但是，我们分析的每个NSIS安装包释放了不同的恶意软件
。我们认为这出于两种可能的情况：恶意NSIS软件包是暗网论坛上出售的通用打包程序；或者该组织成员使用自行编写的Loader于每次攻击活动中部署不同的payload。
尽管在暗网论坛上有很多打包程序在出售，但我们认为不太可能是这种情况，因为如果是不同组织的成员使用相同的通用打包程序，那么`junk
file`应该会随payload变化而变化。因此，我们以攻击活动来自同一组织的假说继续进行调查。
虽然已有掌握的证据，但我们无法证明此组织对所有的攻击活动都负责，但是我们至少可以从相同的打包策略及组件中，找到一种将所有的攻击活动联系起来的方法。我们进行了进一步的分析，以寻找其确定的联系，我们将视线转向提供这些攻击活动的感染链。
我们发现在2019年12月8日至12月13日期间的恶意电子邮件活动中，一组NSIS安装程序投递了相同的`junk
file`。（在发现其他的NSIS安装程序之后，我们将这一波攻击活动称为Campaign
3）在我们观察到的攻击活动中，目标似乎都是关键基础设施提供商（或与关键基础设施相关的业务）。我们使用VirusTotal分析了观察到的攻击，并收集了有关其他受害者的开源信息：
上图展示了经分析后的NSIS安装包感染链。它揭示出用于感染受害者的两种常见模式：
在图表上叠加以上两种方式，可以看出其都用于同一目标企业。其他目标企业也可能采用相同的方法：
我们能够从VT中检索与此活动相关的一些电子邮件。通过这些电子邮件，我们能够确定一些攻击活动的目标：
Campaign 3中的一封电子邮件，以“banking confirmation”作为诱饵：
我们在VirusTotal中发现许多电子邮件没有显示收件人的地址，或者收件人地址填充了发件人字段中的地址。在这种情况下，我们分析了电子邮件标题，因为标题包含与电子邮件相关的许多信息，例如原始收件人：
在对NSIS安装包分析的过程中，我们发现与原始样本具有相同`junk
file`的样本里，确定了至少5个不同的恶意软件家族用作最终payload，它们均是窃密木马或RAT：
  * ForeIT/Lokibot
  * BetaBot
  * Formbook
  * AgentTesla
  * Netwire
然后，我们分析了用于这些payload的C2，检查它们之间是否存在联系，并检查其是否将窃取到的数据发送到相同或相似的服务器。
以下是此次活动中一些确定的恶意软件家族及其C2：
每种类型的恶意软件都共享相同的C＆C。在某些情况下，甚至不同的家族——例如Lokibot和Betabot也都共享相同的C＆C。
## 0x06 更多的攻击活动
按照这种模式寻找其他NSIS安装包——它们会在相同日期范围内丢弃相同`junk
file`——我们发现了在2019年11月16日至2020年1月8日之间发生的5次不同的攻击活动。虽然这些活动中的每一个安装包都与我们的第一个样本不同，但是其行为与Campaign
3中观察到的行为相同（或至少相似）：
####  0x06.1 CAMPAIGN 1 (NOVEMBER 16-20, 2019)
此次活动中所有NSIS安装包释放的`junk file`：
此次活动中的部分payload：
这是我们从VirusTotal收集到的与Campaign 1相关的电子邮件：
下图展示了Campaign 1中的相互关系和感染链（基于VT上可用的数据）
####  0x06.2 Campaign 2 (November 25, 2019 to November 26, 2019)
此次活动中所有NSIS安装包释放的`junk file`：
此次活动中的部分payload：
我们找不到与此次活动有关的电子邮件，因此无法分析其预期目标。下图展示了相似payload之间的关系：
####  0x06.3 CAMPAIGN 4 (DECEMBER 20, 2019 TO DECEMBER 31, 2019)
此次活动中所有NSIS安装包释放的`junk file`：
此次活动中的部分payload：
收集到的与之相关的电子邮件：
####  0x06.4 CAMPAIGN 5 (JANUARY 3, 2020 TO JANUARY 8, 2020)
此次活动中所有NSIS安装包释放的`junk file`：
此次活动中的部分payload：
收集到的与之相关的电子邮件：
下图展示了Campaign 5中的相互关系和感染链（基于VT上可用的数据）:
## 0x07 对攻击活动策划者进行分析
分析所有发现的攻击活动，我们发现其C＆C经常出现重复，如下表所示：
我们还发现，每次攻击活动的某些不同payload（大多数是Betabot，Lokibot，AgentTesla和Formbook）使用相同的C＆C。这表明，同一参与者/组织正在管理这些恶意软件活动背后的Web服务器。
攻击活动时间表也有明显的聚集——但它们之间从来没有任何重叠，这表明它们是由相同的策划者连续进行的（包括我们将在下一次报告中介绍的第六次攻击活动）：
在这些攻击活动中，不仅在同一次活动中跨不同payload共享C2，另外一些C2还在多次不同活动中共享，这也表明是同一参与者/组织策划了所有活动。
下表显示了各次活动之间的一些有趣的联系：
## 0x08 目标和动机
根据RATicate使用到的payload，很明显，该组织开展的活动旨在获得对目标公司内计算机的访问控制权。从这些活动中收集到的电子邮件确定其目标包括：
  * 某罗马尼亚的电气设备制造商；
  * 某科威特建筑服务和工程公司；
  * 某韩国互联网公司；
  * 某韩国投资公司；
  * 某英国建筑供应商；
  * 某韩国医学新闻刊物；
  * 某韩国电信和电缆制造商；
  * 某瑞士出版设备制造商；
  * 某日本的快递和运输公司。
我们发现其目标至少在两次攻击活动中重叠：Campaign
1和2都针对电气设备制造商。在多个Campaign中可能会有更多共同的目标（我们仅通过查看VirusTotal的公开可用数据，而未分析非公开数据）。而且，许多（但并非不是全部）已针对的公司与关键基础架构有关。
我们已经检测到另外一个使用这些NSIS安装包的近期活动（1月13日至16日）。但是，随着我们深入分析该组织，我们发现其进行了其他的攻击活动——并且我们相信自1月份以来，该组织已开始使用其他Loader和打包程序。
其中一次活动是我们在三月份检测到的，此次活动使用COVID-19来诱使受害者打开payload。最新检测到的样本随各种VB编写的Loader一并投递——其中包括[Proofpoint于2019年12月发现](https://www.proofpoint.com/us/threat-insight/post/guloader-popular-new-vb6-downloader-abuses-cloud-services)的Guloader。
我们认为这些攻击活动是由同一组织进行的，其原因如下：
  * 其电子邮件的目标客户与之前Campaign相同。
  * 部分检测到的payload是Betabot和Lokibot，它们于先前观察到的活动中出现。
  * Betabot的C＆C与之前Campaign中所发现的相似——它与Campaign 3中的Betabot使用相同的域名( **stngpetty [.] ga** )，并且使用类似的路径(`/~zadmin/{NAME1}/{NAME2}/logout.php`)：
根据他们现有的行为，我们不确定RATicate是专注于间谍活动还是仅仅充当其他组织的恶意软件提供商。有可能他们仅仅是向目标公司投递了恶意软件，以向其他组织的提供付费访问权限，或者他们是将InfoStealer与RAT用作更大的恶意软件分发工作的一部分。我们将继续分析新的攻击活动，以对其动机有更深入的了解。
## 0x09 “反沙盒”
在对第一个RATicate样本进行分析的过程中，我们发现安装包删除的Shellcode
3使用了许多有趣的技术来阻碍分析人员分析其API调用，并且使用了许多反调试技巧来进一步阻碍分析。但是我们在这些样本中也发现了一个奇怪的行为：如果以SHA256值作为文件名之后执行样本，程序将崩溃：
这种行为可以被视为一种反沙盒技巧。由于沙盒通常以样本哈希值作为文件名运行样本，帮该技术可以避免在沙盒环境中执行payload。但是在本例中，该行为实际上是由于代码错误所致。
在执行Shellcode 3期间发生错误：
Shellcode
3使用一种已知技术——通过在PEB中搜索LDR_DATA_TABLE_ENTRY来获取已加载模块的地址（例如库或可执行文件本身）。LDR结构中的信息包括已加载模块的名称和地址。程序代码会根据所需函数名称的哈希值来检查此结构，从而提供一种方式来动态解析要调用函数的地址。
该功能是在代码的
`get_dll_base_addres_from_ldr_by_hash(dll_hash)`函数中实现的，而崩溃正是在此函数中发生的。该函数遍历LDR结构，计算所加载模块名称的HASH，并检查其是否匹配作为参数传递的HASH。
该函数将`ldr_data_table->
BaseDllName.Buffer`的内容存入`vulnerable_buffer`中，以便将ANSI字符串转换为UNICODE字符串。
但是，由于`vulnerable_buffer`大小仅为104，并且其存储了Unicode字符串，这意味着其实际大小上仅为52个ANSI字符。所以，如果文件名的长度为53个或更多字符，则将发生缓冲区溢出。要使该程序崩溃，只需为样本提供57个字符的文件名（如`this_is_57_length_filename_in_order_to_do_a_crash_PoC.exe`）即可。
经过分析，我们确认这是代码错误，而不是反沙盒技术。
## 0x10 IOC
与RATicate攻击活动相关的HASH可以在SophosLabs的[GitHub](https://github.com/sophoslabs/IoCs/blob/master/malware-Raticate)中找到。