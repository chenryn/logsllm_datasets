Using these test suites, we applied the procedure described in §3
to learn a CCFG policy for these five vulnerable programs, and au-
tomatically in-lined an enforcement of that policy approximated as
a bit hash table. No source code was used in any of the experiments.
Control-flow trimming these programs with these test suites
has the effect of removing all the listed vulnerabilities. For exam-
ple, Shellshock-exploiting environment variable definitions push
bash’s control-flow to an obscure portion of the parser logic that is
trimmed by the learned CCFG policy, and that the in-lined guard
code therefore rejects. Similar policy rejections occur when at-
tempting to trigger the vulnerabilities in the other binaries. This
demonstrates that control-flow trimming can effectively remove
zero-days if the vulnerability is unique to a semantic feature that
remains unexercised by unit testing.
Table 7: False positive ratios (%). Zero threshold means no pruning (most conservative) (§3.2).
Program
proftpd
vsftpd
pure-ftpd
exim
ImageMagic
convert
gcc
epiphany
uzbl
Samples t*
10
0.48
100
0.37
0.00
500
0.38
10
100
0.23
0.00
500
10
0.41
0.28
100
0.00
500
0.25
10
100
0.53
0.00
200
0.64
10
100
0.54
0.00
200
0.00
10
100
0.00
0.00
200
0.93
10
0.81
100
500
0.33
0.00
1000
10
0.92
0.83
100
500
0.65
0.45
1000
Context Anomalies
t=0.00 t=0.25 t=t*
3.04
1.75
0.43
0.05
0.00
0.00
1.60
2.45
0.33
0.14
0.00
0.00
2.23
1.43
0.00
0.04
0.00
0.00
1.88
2.72
0.58
0.00
0.00
0.00
0.04
0.21
0.09
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
10.91
0.08
10.76
2.94
0.01
0.00
0.00
2.16
0.12
0.03
2.09
0.01
0.57
0.46
0.02
2.37
0.17
0.00
2.16
0.07
0.00
1.96
0.00
0.00
1.12
0.01
0.00
0.10
0.07
0.00
0.00
0.00
0.00
0.22
0.20
0.01
0.00
0.25
0.04
0.01
0.03
Origin Anomalies
t=0.00 t=0.25 t=t*
4.51
2.81
1.68
0.37
0.00
0.00
1.80
3.74
0.91
0.22
0.00
0.00
3.61
2.83
0.00
0.15
0.00
0.00
4.81
5.12
1.36
0.00
0.00
0.00
0.91
1.51
0.17
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
19.60
0.57
15.50
12.14
0.08
0.00
0.00
18.90
0.81
0.75
17.36
0.17
9.08
7.94
0.33
3.95
1.02
0.00
3.23
0.17
0.00
3.14
0.00
0.00
4.06
0.01
0.00
1.23
0.10
0.00
0.00
0.00
0.00
1.29
1.14
0.09
0.00
1.30
0.96
0.34
0.52
1.50
0.00
1.50
0.00
1.00
0.00
1.50
0.00
Trace Anomalies
t=0.00 t=0.25 t=t*
45.00 30.00 25.00
3.00
1.00
0.00
0.00
35.00 25.00 25.00
2.00
1.50
0.00
0.00
25.00 25.00 10.00
1.50
2.50
0.00
0.00
35.00 15.00 20.00
7.50
0.00
0.00
0.00
20.00 15.00 10.00
2.50
0.00
1.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
85.00 40.00
6.50
40.00 10.00
8.70
0.40
0.30
0.00
0.00
0.00
90.00 40.00 30.00
2.50
50.50
10.70
0.60
4.30
0.35
3.50
0.90
0.85
Reachable
Code (%)
47.31
47.81
47.85
51.11
51.47
51.47
49.89
50.03
50.05
10.31
10.63
10.65
5.27
5.53
5.55
7.66
7.66
7.66
23.41
23.73
24.01
24.01
30.81
30.83
30.91
30.91
Unit-tested features of the test programs all remain functional
after CCFG learning and enforcement. Section 5.3 evaluates the
accuracy more precisely by measuring false positive rates under a
variety of conditions.
5.2.2 Gadget Analysis. Although control-flow trimming is primar-
ily envisioned as a semantic feature removal method and not a
gadget removal method, gadget chains are nevertheless one ex-
ample of a class of unwanted semantic features that control-flow
trimming might remove. To study the effect of control-flow trim-
ming on gadget reachability, we used ROPgadget [67] to find all
gadgets in the rewritten test binaries. Since our threat model pes-
simistically assumes attackers have unrestricted write-access to the
stack and heap, our gadget reachability analysis assumes that the
attacker can cause any of these gadget addresses to flow as input to
any indirect branch or return instruction in the original program.
Our defense substitutes all such instructions with guarded-branches
and replaces unreachable instructions with int3; thus, in order to
circumvent (i.e., jump over) the guards to reach a hijackable instruc-
tion, the attacker must first supply at least one malicious gadget
address that the guards accept, in order to initiate the chain.
To evaluate whether this is possible, for each program we col-
lected all contexts of length k − 1 observed during training and
testing, appended each discovered gadget address to each, and
computed the hashes of the resulting length-k contexts. We then
examined whether the hash table that approximates the CCFG pol-
icy contains a 0 or 1 for each hash value. In all cases, the hash table