### Overview of Techniques for Exploiting GDI Objects

1. **Using Extended Bitmap as a Manager:**
   - The extended `Bitmap` object can be utilized as a manager to overwrite the `pvScan0` member of an adjacent `Bitmap` object, with the second one serving as the worker.

2. **Overwriting Palette Object:**
   - The extended `Bitmap` object can also be used as a manager to overwrite the `*pFirstColor` member of an adjacent `Palette` object (XEPALOBJ), and use the `Palette` as the worker.

3. **Full New Palette Object Technique:**
   - This technique involves using the extended `Bitmap` object to overwrite the `cEntries` member of an adjacent `Palette` object, gaining relative memory read/write capabilities. The modified `Palette` object is then used as the manager to control the `*pFirstColor` member of a second `Palette`, which serves as the worker.

I chose the third option to demonstrate the new technique. To achieve this, it is necessary to perform kernel Pool Feng Shui, as detailed below.

### Kernel Pool Feng Shui

- **Initial Allocations:**
  - Allocate 2000 bitmaps of size 0xFE8 bytes. This size is chosen because the vulnerable object has a size of 0x10 + 0x8 (POOL_HEADER).
  - Calculation: 0x1000 - 0x18 = 0xFE8

- **Allocating Palettes:**
  - Allocate 500 palettes, each with the following settings:
    - `palNumEntries = 0x1E3`
    - `palVersion = 0x0300`
  - For allocations larger than 0x98, the tag is `Gh08`; otherwise, it is `Gla18`.

- **Finding the Manager Bitmap:**
  - Iterate through the allocated bitmaps to find the one that overlaps with the `cEntries` member of the adjacent `Palette` object.
  - Once found, set the `cEntries` member to 0xFFFFFFFF, located at offset 0x6B8 of the bitmap bits.

- **Finding the Manager Palette:**
  - Use the extended `Palette` object as the manager by setting the `*pFirstColor` member of the next `Palette` object to the address of a fixed `Bitmap` object's pool header.
  - Calculate the address and set it using `SetPaletteEntries`.

- **Identifying the Worker Palette:**
  - Loop through the allocated palettes to find the one with the least significant byte of the `POOL_HEADER` equal to 0x35. Save its handle as the worker palette.

### Arbitrary Memory Read/Write

- **Fixing the Clobbered Bitmap Header:**
  - Define a configuration structure and functions to set addresses and write/read data.
  - Use the arbitrary memory read/write capabilities to fix the clobbered `Bitmap` object header.

### Stealing the Token (32-bit)

- **Getting the SYSTEM Process EPROCESS:**
  - Obtain the kernel pointer to the `_EPROCESS` structure of a SYSTEM process.
  - Copy and replace the `SecurityToken` of the current process with the SYSTEM token.

- **Executing as SYSTEM:**
  - With the SYSTEM-level token, the current process will continue execution as SYSTEM.
  - Call `cmd.exe` to drop into a SYSTEM shell.

### References

1. POOL_TYPES: [MSDN](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559707(v=vs.85).aspx)
2. Tarjei Mandt â€“ Kernel Pool: [Slideshare](https://www.slideshare.net/hackitoergosum/hes2011-tarjei-mandt-kernel-pool-exploitation-on-windows-7)
3. Windows Kernel Exploitation: [Keen Team](http://www.slideshare.net/PeterHlavaty/windows-kernel-exploitation-this-time-font-hunt-you-down-in-4-bytes)
4. Abusing GDI object for ring0 exploit primitives Reloaded: [Core Security](https://www.coresecurity.com/blog/ms16-039-windows-10-64-bits-integer-overflow-exploitation-by-using-gdi-objects2)
5. MSDN SURFOBJ: [MSDN](https://msdn.microsoft.com/en-us/library/ee489862.aspx)
6. ReactOS x86 SURFOBJ: [ReactOS](https://www.reactos.org/wiki/Techwiki:Win32k/SURFACE)
7. Abusing GDI for ring0 exploit primitives: [Core Security](https://www.coresecurity.com/blog/abusing-gdi-for-ring0-exploit-primitives)
8. ReactOS x86 Palette object: [ReactOS](https://www.reactos.org/wiki/Techwiki:Win32k/PALETTE)
9. GDIOBjDump: [GitHub](https://github.com/CoreSecurity/GDIObjDump)
10. 360Vulcan team Win32k Dark Composition: [Slideshare](https://www.slideshare.net/CanSecWest/csw2017-peng-qiushefangzhong-win32k-darkcompositionfinnalfinnalrmmark)
11. UlongMult: [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/bb776657(v=vs.85).aspx)
12. Using Paths Example: [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/dd145181(v=vs.85).aspx)
13. Device Context Types: [MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/dd183560(v=vs.85).aspx)
14. Nicolas Economou blog post: [Core Security](https://www.coresecurity.com/blog/ms16-039-windows-10-64-bits-integer-overflow-exploitation-by-using-gdi-objects)
15. Diego Juarez Abusing GDI Objects for ring0 Exploit Primitives: [Core Security](https://www.coresecurity.com/blog/abusing-gdi-for-ring0-exploit-primitives)