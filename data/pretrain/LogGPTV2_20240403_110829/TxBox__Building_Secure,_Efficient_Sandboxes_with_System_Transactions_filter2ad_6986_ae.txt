sockfd = socket(..)
CHECK TX POLICY VIOLATION
NONTRANSACTIONAL sendto(sockfd,..)
close(sockfd)
close(fd)
..
CHECK TX POLICY VIOLATION
TX END
To measure the performance implications of multiple
invocations of the policy decision engine on network-I/O-
intensive workloads, we sandbox wget in TXBOX and use it
to download different large ﬁles from the Internet. TXBOX
is conﬁgured to execute the following system calls non-
transactionally: sendto, recvfrom, connect, send, recv,
ioctl, read (from a socket) and write (to a socket). Even
though ioctl does not perform any external I/O, it cannot
be executed inside a transaction with the version of TxOS
we are using in our prototype implementation of TXBOX.
This is not a fundamental limitation; in the latest version of
TxOS, ioctl codes are whitelisted on a case-by-case basis.
After opening a socket, wget reads a chunk of data from
the socket and writes it to the target ﬁle. This is the worst-
case setting for TXBOX. The results are in Figure 4. In all
tests, wget runs on a laptop with an Intel Core Duo 2.00
GHz CPU and 2 GB RAM. System time (i.e., time in the
kernel) for wget increases by 30-40% when running inside
TXBOX and the overall download time increases by 1-40%.
Overhead for trusted applications. Because TXBOX
isolates transactional applications from non-transactional
applications,
the latter incur a performance overhead to
check for conﬂicts with transactions. When system trans-
actions are used for sandboxing, the overhead for trusted,
non-sandboxed applications is modest. The average non-
transactional overhead is 44% at the scale of a single system
call on TXBOX, using the same microbenchmark described
in [48]. In the context of a larger application, however, these
overheads are amortized across other work. For instance,
compiling a non-transactional Linux kernel in TXBOX incurs
an overhead of less than 2% compared to unmodiﬁed Linux.
B. Functionality
Figure 4. Overhead of TXBOX for different sizes of ﬁles retrieved by
wget (time spent in user-land is minuscule and not visible in the graph).
 900
 800
 700
 600
 500
 400
 300
 200
 100
)
s
d
n
o
c
e
s
i
l
l
i
m
n
i
(
e
m
i
i
t
g
n
n
n
u
R
g
e
p
m
F
F
 0
 0
Linux
TxBox
 1000
 2000
 3000
 4000
 5000
 6000
FFmpeg Input file size (in KB)
Figure 5.
WREGEX *I:1234* and Linux (lines overlap).
FFmpeg’s running time in TXBOX with policy BLACKLIST
install in /usr/local and compile using make. Next,
we ran “make install” in a sandbox with the BLACK-
LIST WREGEX *I:164564* policy where 164564 is the
inode number of the directory /usr/local/bin. “make
install” actually copies ﬁles to multiple directories, such
as /usr/local/share, /usr/local/bin, etc. Our
policy only designated /usr/local/bin as the protected
directory, so we were testing the ability of TXBOX to
correctly roll back all of the sandboxed process’s effects
on the system, not just those on the forbidden directory.
Execution of “make install” resulted in a violation and
TXBOX correctly rolled back its effects on all directories,
restoring the entire usr/local to its original state.
Creating ﬁles in a protected directory. We downloaded
the source code of the vim editor and conﬁgured it
to
Malicious MIME handler in a browser. We created a
‘tarhandler’ which reads the sample ﬁle from the pro-
340
 12000
 10000
Linux
TxBox
)
B
K
n
i
(
e
g
a
s
u
y
r
o
m
e
m
g
e
p
m
F
F
 8000
 6000
 4000
 2000
 0
 0
 1000
 2000
 3000
 4000
 5000
 6000
FFmpeg input file size (in KB)
Figure 6. FFmpeg’s memory usage in TXBOX with policy BLACKLIST
WREGEX *I:1234* and Linux. The increased memory usage is due to
maintaining the transactional workset.
tected directory /home/secret and writes out its contents
into /tmp/foo. We registered ‘tarhandler’ with the lynx
browser for MIME type ’application/x-tar’ and installed the
BLACKLIST WREGEX *I:183145* policy, where 183145
is the inode number of /home/secret. The browser
correctly executed in the sandbox with full functionality,
but after ‘tarhandler’ read from the forbidden directory, all
changes to /tmp/foo were rolled back.
Multimedia converter. To simulate the effect of a malicious
multimedia converter trying to write to unrelated ﬁles in a
user’s home directory, we conﬁgured ffmpeg, a popular open-
source codec, to create output ﬁles in the /home/user1/
directory. We created a sandbox with the BLACKLIST
WREGEX *I:181064* policy, where 181064 is the inode
number of /home/user1. When ffmpeg tried to write to a
ﬁle named ’output.avi’ in /home/user1, TXBOX detected
a policy violation and reverted all changes made by ffmpeg to
output.avi. Performance overhead of sandboxing FFm-
peg is shown in Figs. 5 and 6, where memory overhead is
computed as the difference between the total cached memory
before each execution and the total cached memory before
committing the transaction.
JavaScript engine. To evaluate TXBOX on a complex appli-
cation, we use the Google V8 benchmark (version 2) [28] on
the SpiderMonkey JavaScript engine (version 1.8.0) running
inside TXBOX. JavaScript engines are designed to ensure
that an untrusted script has access only to limited system re-
sources (ﬁles, system calls) needed for its correct operation.
They are, however, fairly complex programs and can suffer
from vulnerabilities (e.g., buffer overﬂows) which may be
exploited for arbitrary code execution [39, 61]. Executing the
engine inside a transaction can help ensure that all system
accesses by untrusted JavaScript are conﬁned even if the
engine is buggy. Furthermore, additional policies can be
enforced. For example, to prevent any script from contacting
341
Table VI
GOOGLE V8 JAVASCRIPT BENCHMARK SCORES FOR THE
SPIDERMONKEY ENGINE. THE POLICY IS WHITELIST WREGEX
(S:1:X.Y.Z.W)*. HIGHER SCORES MEAN BETTER PERFORMANCE, i.e.,
LESS EXECUTION TIME. AVERAGES ARE CALCULATED USING
GEOMETRIC MEAN AS SUGGESTED IN THE BENCHMARK.
Test
Richards
Deltablue
Raytrace
EarlyBoyer
Avg. score (GM)
w/o TXBOX with TXBOX
25.6
30.2
53.2
83.4
44
25.2
29.9
51.9
83.1
43.2
known malicious domains or to enforce the same-origin
policy from outside the potentially buggy JavaScript engine,
the administrator can install a blacklist or whitelist policy
on the destinations of network connections.
The results of executing SpiderMonkey inside TXBOX are
in Table VI. These tests were performed on a laptop with
an Intel Core Duo 2.00 GHz CPU and 2 GB RAM. In all
tests, the overhead of TXBOX is negligible (less than 5%).
On-access anti-virus scanning and parallelization of se-
curity checks. Anti-virus scanners are among the most com-
mon tools used to prevent spreading of malicious programs.
They primarily use signature matching to detect viruses. The
scanner maintains a database of signatures for known viruses
and searches for matching patterns in programs and ﬁles.
An anti-virus scanner can be activated manually by the
user who requests to scan a speciﬁc ﬁle or directory. The al-
ternative is transparent, on-access activation when a program
is executed or a document is opened. This often imposes a
signiﬁcant performance penalty because the program cannot
start executing until the scan is ﬁnished.
TXBOX makes computationally intensive on-access anti-
virus scanning practical by speculatively executing untrusted
applications and loading suspicious documents inside a
sandbox, while performing a concurrent scan. Many virus
detection methods, including string matching, ﬁltering, and
algorithmic scanning, can be executed in a parallel thread
(more sophisticated methods may require access to transac-
tional state—see Section VII). If the suspicious application’s
interactions with the system cause no conﬂicts with other
processes and the scanner thread does not ﬁnd any problems,
then the transaction is committed and the application can
continue from the point where scanning ﬁnished.
We carried out several experiments to demonstrate how
parallelizing security checks improves performance (our
approach is substantially different
from Nightingale et
al. [40]—see Section III). For gzip and PostMark, control is
passed to the policy manager whenever a ﬁle is opened. The
manager then runs the ClamAV anti-virus scanner on this
ﬁle. In standard Linux with Dazuko, the manager blocks the
program until the scan is ﬁnished. In TXBOX, the manager
Table VII
PERFORMANCE OF GZIP WITH CLAMAV ANTI-VIRUS ON-ACCESS
SCANNING OF FILES WHENEVER THEY ARE OPENED. TIMES SHOWN
ARE AVERAGES OF WALL-CLOCK TIMES OVER 100 RUNS.
Input ﬁle size
4MB
0.14s
400MB
3.720s
0.203s 1.45× 3.718s 0.99×
Dazuko
TXBOX
lets the program continue inside the sandbox while the anti-
virus scan is being performed.
Performance for gzip is shown in Table VII. When the
amount of data handled by gzip is small (4 MB),
the
overhead of the transactional mechanism dominates. As
the amount of data increases, the transactional overhead is
compensated by performance gains from parallelization.
Dazuko
TxBox
c
e
s
/
s
n
o
i
t
c
a
s
n
a
r
t
-
S
F
k
r
a
m
t
s
o
P
 3200
 3000
 2800
 2600
 2400
 2200
 2000