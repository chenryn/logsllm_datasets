(cid:1), where qs denotes the number
PRFmsg, InSecpq-prf(cid:0)PRFmsg; ξ , qs
Proof. The difference in success probability of any adversary
A playing the two games must be bounded by the PRF insecurity of
of signing queries made by A. Otherwise, we can construct an
oracle machine MA which uses A to break the PRF security of
PRFmsg. For this MA just replaces all calls to PRFmsg by calls to the
oracle given in the PRF game and outputs 1 whenever A succeeds.
If the oracle implements PRFmsg for a random key, this is identical
to GAME.1. If PRFmsg is a random function, this is identical to
□
GAME.2.
(cid:12)(cid:12)(cid:12)SuccGAME.3 (A) − SuccGAME.2 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-itsr(cid:0)Hmsg; ξ , qs
Claim 20.
Claim 21.
(cid:1) .
Proof. The only source for a difference in success probability
between these two games are the success cases which got excluded
in GAME.3. These success cases are exactly the cases where A
breaks the itsr security of Hmsg. Hence, we can build a reduction
MA which uses A to break itsr and it will succeed exactly with
the difference in success probabilities between these two games.
The reduction MA makes use of the itsr challenge function fam-
ily to instantiate a SPHINCS+ key pair. Then, for every signature
query Mi by A, it uses its oracle O to obtain Ki , G(Ki , Mi) in-
stead of computing this itself. Otherwise, signatures are computed
using the regular SPHINCS+ algorithms. Note that here we are
using the itsr notation; in SPHINCS+ the function key K is called
the randomizer and denoted R. The resulting signatures follow
the correct distribution as the function keys K are uniformly ran-
dom in both cases and the signatures are otherwise computed ex-
actly the same as in GAME.2. When A outputs a forgery (M, SIG),
MA extracts the function key K from SIG and outputs (K, M).
The reduction MA makes one oracle query per signature query
by A, so at most qs oracle queries in total. By construction we
and
□
(cid:16)MA(cid:17)
got(cid:12)(cid:12)SuccGAME.3 (A) − SuccGAME.2 (A)(cid:12)(cid:12) = SuccitsrH,qs
(cid:12)(cid:12)(cid:12)SuccGAME.4 (A) − SuccGAME.3 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-sm-tcr (Th; ξ , q2) .
so the claim follows.
Claim 22.
(cid:17)
(cid:16)d−1
Proof. Similar to above, the only source for a difference in suc-
cess probability between these two games are the success cases
which got excluded in GAME.4. All these success cases are cases
where A breaks the sm-tcr security of Th. Hence, we can build a
reduction MA that breaks sm-tcr of Th. The reduction MA builds
the whole SPHINCS+ structure of a key pair (the key pair plus the
whole hypertree including all FORS and WOTS key pairs) during set-
up using the sm-tcr oracle for Th and stores all computed values.
Thereby it defines all inputs to Th as targets. In total, MA makes
+ 2hk(2t − 1)  1, then SPP ,Tj(x) = 1 and A
succeeds. Hence x′ is a preimage of FP ,Tj(x), so x′
= x with condi-
tional probability exactly 1
i as x is information theoretically hidden
from A within a set of i elements. Hence b = 1 = SPP ,Tj(x) with
conditional probability exactly i−1
If the event Fi occurs for i > 1, then SPP ,Tj(x) = 1 and A
fails. Failure means that MA
sm-dspr outputs b = 1 = SPP ,Tj(x). So
MA
= x. Hence b = 0 = SPP ,Tj(x).
To summarize, succ = s1 +
i si +
. Then we get Advsm-dspr
sm-dspr advantage. Define triv as we did before, in the definition
of Advsm-dspr
=
max {0, succ − triv}.
The analysis of triv is the same as the analysis of succ above,
except that we compare SPP ,Tj(x) to 1 instead of comparing it to b.
We have 1 = SPP ,Tj(x) exactly for the events Si and Fi with i > 1.
(cid:16)MA
i >1 i−1
sm-dspr is correct.
(cid:17)
(cid:16)MA
Hence triv =
i >1 si +
(cid:16)MA
Advsm-dspr
i >1 fi.
sm-dspr
sm-dspr
(cid:17)
(cid:17)
F,q3
F,q3
.
i
sm-dspr
F,q3
i >1 fi. Subtract to see that
= max {0, succ − triv}
≥ succ − triv = s1 −
(cid:17)
(cid:16)MA
i >1
1
i
si .
sm-tcr success probability. By definition MA
sm-tcr outputs (j, x′).
The sm-tcr success probability Succsm-tcr
is the prob-
sm-tcr
Th,q3
ability that x′ is a second preimage of x under FP ,Tj , i.e., that
FP ,Tj(x′) = FP ,Tj(x) while x′ (cid:44) x.
Assume that event Si occurs with i > 1. Then x′ is a preimage
of FP ,Tj(x). Furthermore, A did not learn x from a previous query,
so x is not known to A except via FP ,Tj(x). There are i preimages,
so x′
sm-tcr
succeeds with conditional probability i−1
= x with conditional probability exactly 1
.
To summarize, Succsm-tcr
Th,q3
sm-tcr
Combining the probabilities. We conclude:
(cid:16)MA
(cid:17)
si + 3
+ 3Succsm-tcr
Th,q3
i − 1
i
i >1
i
(cid:17) ≥
(cid:16)MA
i . Hence MA
i >1 i−1
(cid:17)
i si.

3i − 4
sm-tcr
si = s1 +
si
i >1
i
si = SuccGAME.4 (A) .
(cid:16)MA
≥ s1 −

≥ s1 +
i >1
i >1
sm-dspr
1
i
Advsm-dspr
F,q3
□
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2146