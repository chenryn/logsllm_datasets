The current implementation of `cputicks` on ARM platforms suffers from low precision, which negatively impacts the block profiler and tracer. A more precise and robust implementation can be found in the `cycleclock.h` file from the gperftools project, available at: [http://gperftools.googlecode.com/svn/trunk/src/base/cycleclock.h](http://gperftools.googlecode.com/svn/trunk/src/base/cycleclock.h).

Specifically, for ARM architectures, the `cycleclock.h` file includes a refined `cputicks` implementation that leverages performance monitoring counters (PMCs) to achieve higher precision. Here is the relevant code snippet:

```cpp
#elif defined(ARMV3)
#if defined(ARMV6)  // V6 is the earliest architecture that has a standard cyclecount
    uint32_t pmccntr;
    uint32_t pmuseren;
    uint32_t pmcntenset;

    // Read the user mode perf monitor counter access permissions.
    asm volatile("mrc p15, 0, %0, c9, c14, 0" : "=r"(pmuseren));
    if (pmuseren & 1) {  // Allows reading perfmon counters for user mode code.
        asm volatile("mrc p15, 0, %0, c9, c12, 1" : "=r"(pmcntenset));
        if (pmcntenset & 0x80000000ul) {  // Is it counting?
            asm volatile("mrc p15, 0, %0, c9, c13, 0" : "=r"(pmccntr));
            // The counter is set up to count every 64th cycle
            return static_cast<uint64_t>(pmccntr) * 64;  // Should optimize to << 6
        }
    }
#endif
```

This implementation checks for the necessary permissions and ensures that the performance monitor counter is active before reading its value. It then scales the counter value to account for the fact that it counts every 64th cycle.

Additionally, the `cycleclock.h` file provides an implementation for Power processors, making it a versatile solution for multiple architectures.

It is recommended to switch to this implementation to improve the precision of `cputicks` and enhance the performance of the block profiler and tracer.