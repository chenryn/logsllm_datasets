title:Preventing and Detecting State Inference Attacks on Android
author:Andrea Possemato and
Dario Nisi and
Yanick Fratantonio
Preventing and Detecting
State Inference Attacks on Android
Andrea Possemato
IDEMIA and EURECOM
PI:EMAIL
Dario Nisi
EURECOM
PI:EMAIL
Yanick Fratantonio
EURECOM and Cisco Talos
PI:EMAIL
Abstract—In  the  realm  of  the  Android  ecosystem,  one  relevant 
threat is posed by phishing attacks. Phishing attacks are particularly 
problematic for mobile platforms because they do not provide enough 
information for a user to reliably distinguish a legitimate app from a 
malicious app spoofing the UI of the legitimate one. A key factor that 
determines the success rate of a phishing attack is proper timing: The 
user is more prone to provide sensitive data (such as her passwords) if 
the malicious spoofed UI appears when the victim expects to interact 
with the target app. On Android, malware determines the right timing 
by mounting so-called state inference attacks, which can be used, for 
example,  to  infer  the  exact  moment  that  the  user  started  a  target 
app and thus expects to interact with it. Even though Android app 
sandbox  is  designed  to  prevent  these  attacks,  they  are  still  possible 
by abusing vulnerable APIs that leak such sensitive information: the 
usual scenario is a malicious app that “polls” these vulnerable APIs, 
infers when a target app is about to be used by the user, and makes the 
spoofed UI appear on top of the screen at the right time. All previous 
bugs of this kind have been fixed in the latest version of Android.
This  paper  presents  two  main  research  contributions  related  to 
preventing and detecting state inference attacks. First, we discuss the 
design and implementation of a new vulnerability detection system, 
which specifically aims at identifying new vulnerabilities that can be 
used to mount state inference attacks. Our approach relies on both 
static and dynamic analysis techniques and it identified 18 previously 
unknown bugs (leading to 6 CVE) in the latest versions of Android. 
Second,  we  present  a  new  on-device  analysis  system  able  to  detect 
exploitation attempts of vulnerable resources and APIs. This system 
is based on the key hypothesis that mere “polling behaviors” can be 
used as a strong signal of a potential attack, independently of other 
factors  (that  previous  works  rely  on).  We performed  an  empirical 
analysis over a corpus of benign and malicious apps, and we find that 
this  hypothesis  is  indeed  correct.  This  approach  has  the  advantage 
of  being  able  to  detect  exploitation  attempts  even  when  the  abused 
API is not known to be vulnerable in advance. We implemented this 
system as an Android framework modification, and we show it incurs 
a negligible overhead.
I.
INTRODUCTION
One of the key security features of Android is the application 
sandbox.  This  mechanism  aims  at  enforcing  a  strong  security 
boundary between different apps and protects sensitive information. 
One  of  such  sensitive  information  is  the  “state”  a  given  app  is 
currently in. With “state,” we refer to, for example, whether an app 
is currently in the background, in the foreground, or is transitioning
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25 February 2021, Virtual 
ISBN 1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24479
www.ndss-symposium.org
between these states. Attacks aiming at determining the state of
another app are called state inference attacks, which are particularly
relevant in the context of phishing attacks. Phishing attacks
consist of luring an unsuspecting user into revealing her sensitive
information (e.g., credentials) to a malicious app that mimics the
UI of the legitimate one, a technique we refer to as UI Spoofing.
The peculiar problem of mobile platforms is that the user cannot
understand whether she is inserting her credentials into a legitimate
app or into a malicious app spoofing its UI. State inference attacks
play a key role in this context since, if the malicious app can infer,
for example, that the user is about to use a specific app, it can show
the spoofed UI at the right time, and hijack the legitimate app’s flow.
In the context of Android security, malicious apps are able to
leak this state-related information by exploiting vulnerable APIs
or resources (e.g., /proc file system). For example, a vulnerable
API, when invoked with specific arguments, may return data that can
be used to infer whether another app was just started. These attacks
have been known for several years, and previous works have shown
that several APIs and resources do leak sensitive information [6], [4].
Given the security implications of these vulnerabilities, Google has
restricted access to the /proc file-system (eradicating potential
bugs at its root) and fixed all APIs known to be vulnerable [18].
However, as for many forms of bugs, this is an arms race and there
can potentially be many more vulnerable APIs still undisclosed.
As the first contribution of this paper, we design, implement,
and evaluate a new analysis framework to automatically pinpoint
Android APIs that may disclose state-related information about
other apps or the operating system itself. The main idea is to first
systematically enumerate the attack surface in terms of which APIs
could be potentially abused, to then repeatedly invoke each API (with
appropriate arguments) while changing the surrounding context (e.g.,
another app is started), and finally, to monitor how the returned
values change (if they do) depending on such context. We note
that we are not the first ones to propose this research direction. A
recent work that tackles a similar problem is SCAnDroid [27], which
attempts to employ a technique similar to ours. Our paper shows that
while SCAnDroid’s direction is indeed promising, there are several
conceptual and technical challenges that were overlooked, leading
to undetected vulnerabilities. One of the main problems we uncover
is that previous works have mischaracterized the attack surface avail-
able to a malicious app, leading to many APIs to not be even selected
as candidates for analysis in the first place: our analysis shows that
it considered only ∼44% of the attack surface. One other open
challenge is how each of these APIs should be analyzed to uncover
potential problems, and previous works oversimplified this step as
well. As the last example, we found that even the task of determining
whether the return value of an API contains sensitive information can
be challenging, and we find that this is another venue for mistakes.
Our paper systematizes these challenges, discusses how we
address them, and shows that each of these overlooked challenges
is the direct cause of false negatives of the closest related work,
SCAnDroid (see Section VI-F for a detailed comparison). We tested
the effectiveness of our framework on Android 8.1, 9.0, and 10,
unveiling 18 previously unknown bugs. All the vulnerabilities
were reported to Google and several of these have been already
acknowledged and fixed.
While we believe that our framework is a good first step to auto-
matically detect this category of bugs, we acknowledge that identify-
ing and removing all vulnerable APIs is not always possible. Thus, as
a second contribution of this paper, we design and implement an on-
device monitoring system to detect state inference attacks when they
occur. This system builds on two observations: 1) all existing state
inference attacks implement a polling behavior, thus making it per-se
a good candidate for detection; 2) the second observation, which, to
the best of our knowledge, has not been explored before, is based on
the following key hypothesis: benign apps rarely rely on polling and,
when they do, the nature of their behaviors is different than those
of malicious apps. In other words, if benign apps do not commonly
employ polling, the mere detection of these behaviors could be then
used as a strong signal for flagging an app as suspicious.
To verify the validity of our hypothesis, we performed an
empirical study over all known families of malware exploiting
vulnerabilities to perform phishing attacks, as well as on a set of
more than 10,000 popular benign applications. The results of this
experiment show that, as expected, all malicious samples implement
some form of polling when mounting state inference attacks. For
what concerns the benign apps, our study unveils a surprising insight:
there are several benign apps that also perform polling; However,
more in-depth experiments show that these behaviors are of different
natures, and it is easy to distinguish between them and their mali-
cious counterparts. We thus show that polling itself can be leveraged
as a strong signal to detect state inference attacks. We implemented
this system as a modification to the Android framework, and our
experiments show that this system would incur a negligible overhead.
We note that using “polling detection” as a mean to
identify malicious apps is not novel per-se: a previous work,
LeaveMeAlone [38], has explored this aspect. However, we
show how this related work is not suitable when tasked to detect
phishing attacks on modern versions of Android. We offer a detailed
comparison in Section IX-E. We thus believe that our work discusses
a new interesting point in the design space of detection approaches.
In summary, this paper makes the following contributions:
• We systematize and pinpoint open challenges to tackle the
automatic detection of APIs vulnerable to state inference
attacks. Among these, we show that the attack surface is
bigger than what previously thought.
• We implement an automatic framework to unveil
vulnerable APIs leading to state inference attacks. We
tested its efficacy on Android 8.1, 9.0, and 10, identifying
18 new vulnerable APIs (and 6 CVE were assigned).
• We hypothesize that the mere polling can be used as a
strong signal to identify in-progress state inference attacks.
To validate our hypothesis, we performed an empirical
study on both malware and benign applications, and
Fig. 1: Anatomy of a phishing attack.
we show it is indeed possible to reliably and efficiently
pinpoint attacks. This can be the basis for an on-device
detection system that does not have the limitations affecting
previous works.
In the spirit of open science, we will release all the source code
developed for this paper and the relevant datasets.
II. PHISHING ATTACKS ON ANDROID
This section provides the technical background about phishing
attack and how a malicious application can successfully mount it.
It then discusses a systematic survey on all known classes of state
inference vulnerabilities, their role in the context of phishing attacks,
and which of these classes are still problematic on Android.
A. Phishing
One common task of Android malware is “phishing.” With this
term, we refer to malicious applications trying to steal user’s sensitive
information (e.g., credentials). Phishing attacks are particularly prob-
lematic for mobile platforms because they do not provide enough
information for a user to reliably distinguish a legitimate app from
a malicious app spoofing its UI. To make the attack more effective,
malware relies on the ability to mount state inference attacks, useful
to monitor when the user is about to interact with a target app.
Inferring the right time is important, as it allows a malicious app
to ask for user’s credentials exactly when the user expects to insert
them. We note that these techniques are not only known and studied
in the academic world [12], [6], [23], [26], [27], but they are used by
real-world malware [15], [28], [32], [21], [17], [20], [29], [16], [31].
B. Anatomy of a Phishing Attack
Figure 1 depicts the various phases of a phishing attack. We start
from a scenario where the user ( 1 ) wants to interact with a sensitive
app (e.g., PayPal). Meanwhile, in the background, the attacker ( 2 )
repeatedly invokes the once-vulnerable API getRunningTasks
API to determine which app is in foreground. Before the victim clicks
on the PayPal icon, the attacker could determine that the foreground
app is the “Home Launcher.” However, by repeatedly invoking this
API and checking its return value, the attacker could mount a state
inference attack and infer the exact moment the user clicks on the
PayPal icon: the attacker would in fact notice the transition from the
Home Launcher to the PayPal app. At this point, the attacker knows
2
while (1) {ActivityManager am = (ActivityManager) Context.getSystemService(ACTIVITY_SERVICE);List apps = am.getRunningTasks(1);String app = apps.get(0).topActivity.getPackageName();if (app.equalsIgnoreCase(TARGET_APP)) {   // Perform the attack}}123this is the best time to hijack the PayPal activity with a spoofed one
which looks the same as the original ( 3 ). A successful attack will
leave the user completely unsuspecting since the victim initiated
the interaction with the target app herself, she would not find an
authentication request from that particular target app unexpected.
C. Characterizing State Inference Attacks
Previous research identified many venues to mount state
inference attacks [12], [6], [23], [26], [27]. With the goal of better
characterizing this threat and to better understand the state-of-the-art
of Android state inference attacks, we analyzed all the different
vulnerabilities exploited by malware and discovered during the
years [12], [6], [23], [26], [27], [15], [28], [32], [21], [17], [20],
[29], [16], [31]. All existing vulnerabilities can be grouped into two
conceptual categories:
Filesystem layer. The first category relates to the filesystem layer.
The root cause of these vulnerabilities resides in the presence of
sensitive information obtainable by reading files accessible by
any unprivileged app. From the technical standpoint, all known
vulnerabilities are caused by unrestricted access to procfs, via
the /proc directory. For example, one of the first vulnerabilities
relied on accessing /proc/$PID/cmdline, which contains
the name of the program run by a process with a given $PID.
By continuously monitoring the content of this directory, the
attacker could identify the creation of new processes (by monitoring
sub-directories of /proc), and infer the app started by the user
(by reading the cmdline file).
Many similar vulnerabilities were discovered, but they all had
the same root cause: unprivileged apps had access to procfs.
Thus, to patch these vulnerabilities, from Android 7.0 the access
to almost the entire /proc directory is forbidden. We believe this
solution eradicates this category of vulnerabilities at its root.
Android System Services layer. The second category of
vulnerabilities relates to Android System Services. Services are a
fundamental sub-system in the Android Framework. They allow
apps to interact with “lower” operating system and hardware
components, such as GPS, network, etc. Since this operation
normally requires interaction with privileged components, services
are offered by a process called system_server, which runs as
the privileged system user. This process is in charge of handling
almost all the core services and provides a bridge between the
functionality requested by the app and the service implementing it.
We note that all API-related vulnerabilities identified by previous
works relate to APIs exposed by services. Even though Google
has fixed all known vulnerabilities, the complexity of the services
infrastructure makes it significantly more challenging to identify
a single root cause that led to all existing vulnerabilities. Moreover,
we show how there are several previously overlooked challenges
and subtleties that make the automatic vulnerability discovery
process more difficult than what previously thought, and that this
is the direct cause for false negatives in recent related works [27].
An example of a permission automatically granted is the
INTERNET permission: at installation time, the system grants this
permission to the application and no user interaction is required.
Instead,
that
examples of permissions
require user
interactions to be granted are ACCESS_COARSE_LOCATION or
PACKAGE_USAGE_STATS. Note that, in Android, this interaction
may be implemented is two ways.
The first type of interaction relies on runtime prompt and it
is used to grant the permissions labeled as dangerous, like the
ACCESS_COARSE_LOCATION permission. By interacting with
this prompt, the user can decide whether to grant or deny the
permission to the app.
The second type of interaction, which does not rely on prompts,
is reserved for privileged permissions. These permissions might be
labeled as signature, system, signatureOrSystem, privileged, develop-
ment, appop, or retailDemo. An example of this category of permis-
sion are the PACKAGE_USAGE_STATS, SYSTEM_ALERT_-
WINDOW, and BIND_NOTIFICATION_LISTENER_SER-
VICE permissions. For example,
the PACKAGE_USAGE_-
STATS permission is used to mainly protect the UsageStatsMan-
ager service [13]. With that being said, Android offers a mechanism
for third-party apps to obtain sensitive information accessible only
via these permissions, even without technically being granted such
permissions. The way it works is that a third-party application can
ask the user of the device to grant the permission through the System
Settings app, which updates some internal settings. The sensitive
system services that do have the signature permissions then check
such settings to determine whether a requesting app is entitled to
have access to such sensitive permission-protected information. We
also note that not only is it possible to access information protected
by these signature-level permissions, but that many real-world apps
(both benign and malicious) currently use them [20], [35], [5]. Thus,
since third-party applications may require some of these permissions,
we believe it is appropriate to consider them within our threat model.
We also assume the malicious app cannot obtain the
BIND_ACCESSIBILITY_SERVICE permission (a11y): this
permission alone allows an attacker to fully monitor all UI
events [12], making mounting phishing attacks trivial. Finally, we
do not consider the scenario where a malicious app can gain root
privileges: once again, these powerful attackers can easily steal
sensitive information without mounting phishing attacks.
IV. EXPLORING THE ATTACK SURFACE:
SYSTEM SERVICES
This paper aims at developing an automated approach to identify
vulnerable APIs that could be used to mount state inference attacks.