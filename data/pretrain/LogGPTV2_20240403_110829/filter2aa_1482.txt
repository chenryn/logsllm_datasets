THE$ACHILLES'$HEEL$OF$CFI
关于 CFI
0 1
CFI 是什么
2005年微软研究院联合学术界提出的一项漏洞利用缓解技术
用于防御利用内存破坏漏洞来获得软件行为控制权的外部攻击
确保程序执行时的控制流转移符合事先确定的控制流图
关于 CFI
0 2
CFI 的实现
Clang CFI
Microsoft Control Flow Guard
Intel Control-Flow Enforcement Technology
Microsoft eXtended Flow Guard
Clang CFI
0 3
Clang CFI 如何工作
-fsanitize=cfi-cast-strict: Enables strict cast checks.
-fsanitize=cfi-derived-cast: Base-to-derived cast to the wrong dynamic type.
-fsanitize=cfi-unrelated-cast: Cast from void* or another unrelated type to the wrong dynamic type.
-fsanitize=cfi-nvcall: Non-virtual call via an object whose vptr is of the wrong dynamic type.
-fsanitize=cfi-vcall: Virtual call via an object whose vptr is of the wrong dynamic type.
-fsanitize=cfi-icall: Indirect call of a function with wrong dynamic type.
-fsanitize=cfi-mfcall: Indirect call via a member function pointer with wrong dynamic type
Clang CFI
0 4
Clang CFI 如何工作
Clang CFI
0 5
Clang CFI 如何工作
Clang CFI
0 6
Clang CFI 的问题
适用的场合受限
缺少对 Backward-Edge 的保护
Microsoft Control Flow Guard
0 7
CFG 如何工作
Microsoft Control Flow Guard
0 8
CFG 的问题
CFG 是一个粗粒度的 CFI 实现
已知多种针对 CFG 的绕过技术
缺少对 Backward-Edge 的保护
Intel Control-Flow Enforcement Technology
0 9
CET 如何工作
Intel Control-Flow Enforcement Technology
1 0
CET 的问题
依赖特定的硬件
IBT 也是一个粗粒度的 CFI 实现
多数针对 CFG 的绕过技术也适用于 IBT
Microsoft eXtended Flow Guard
1 1
XFG 如何工作
Microsoft eXtended Flow Guard
1 2
XFG 如何工作
Microsoft eXtended Flow Guard
1 3
如何绕过 XFG？
控制流图中 fan-in fan-out 的数量会显著影响 CFI 的有效性
Variable Arguments
Generic Function Object
JavaScript Function
1 4
function f() {
alert("This is a JavaScript Function.");
}
var o = f;
o();
JavaScript Function
1 5
Js::ScriptFunction
ScriptFunction
ScriptFunctionBase
JavascriptFunction
DynamicObject
RecyclableObject
FinalizableObject
IRecyclerVisitedObject
VFT*? vftable;
Type? *? type;
Var*? auxSlots;
ArrayObject *?objectArray;?
ConstructorCache*?constructorCache;
FunctionInfo*?functionInfo;
FrameDisplay*?environment;?
ActivationObjectEx *?cachedScopeObj;
bool?hasInlineCaches;
JavaScript Function
1 6
如何调用
template  void OP_ProfiledCallI(const unaligned OpLayoutDynamicProfile* playout) {
OP_ProfileCallCommon(playout, OP_CallGetFunc(GetRegAllowStackVar(playout->Function)), Js::CallFlags_None, playout->profileId); 
}
template  Var InterpreterStackFrame::GetRegAllowStackVar(RegSlotType localRegisterID) const {
Var value = m_localSlots[localRegisterID];
ValidateRegValue(value, true);
return value;
}
RecyclableObject * InterpreterStackFrame::OP_CallGetFunc(Var target) {
return JavascriptOperators::GetCallableObjectOrThrow(target, GetScriptContext());
}
JavaScript Function
1 7
如何调用
template  void InterpreterStackFrame::OP_ProfileCallCommon(const unaligned T * playout, RecyclableObject* function
, unsigned flags, ProfileId profileId, InlineCacheIndex inlineCacheIndex, const Js::AuxArray *spreadIndices) {
FunctionBody* functionBody = this->m_functionBody;
DynamicProfileInfo * dynamicProfileInfo= functionBody->GetDynamicProfileInfo();
FunctionInfo* functionInfo = function->GetTypeId() == TypeIds_Function ?
JavascriptFunction::FromVar(function)->GetFunctionInfo() : nullptr;
bool isConstructorCall= (CallFlags_New & flags) == CallFlags_New;
dynamicProfileInfo->RecordCallSiteInfo(functionBody, profileId, functionInfo, functionInfo? 
static_cast(function) : nullptr, playout->ArgCount, isConstructorCall, inlineCacheIndex);
OP_CallCommon(playout, function, flags, spreadIndices);
if (playout->Return != Js::Constants::NoRegister) {
dynamicProfileInfo->RecordReturnTypeOnCallSiteInfo(functionBody, profileId, GetReg((RegSlot)playout->Return));
}
}
JavaScript Function
1 8
如何调用
void InterpreterStackFrame::OP_CallCommon(const unaligned T * playout, RecyclableObject* function, unsigned flags
, const Js::AuxArray *spreadIndices){
...
flags |= CallFlags_NotUsed;
Arguments args(CallInfo((CallFlags)flags, argCount), m_outParams);
AssertMsg(static_cast(args.Info.Flags) == flags, "Flags don't fit into the CallInfo field?");
argCount= args.GetArgCountWithExtraArgs();
if (spreadIndices != nullptr) {
JavascriptFunction::CallSpreadFunction(function, args, spreadIndices);
} else {
JavascriptFunction::CallFunction(function, function->GetEntryPoint(), args);
}
...
}
JavaScript Function
1 9
如何调用
JavaScript Function
2 0
如何调用
JavascriptMethod RecyclableObject::GetEntryPoint() const {
return this->GetType()->GetEntryPoint();
}
inline Type * GetType() const {
return type; 
}
JavascriptMethod GetEntryPoint() const {
return entryPoint; 
}
ProxyEntryPointInfo*?entryPointInfo;
DynamicTypeHandler *?typeHandler;
bool?isLocked;
bool?isShared;
bool?hasNoEnumerableProperties;
bool?isCachedForChangePrototype;
JavaScript Function
2 1
Js::ScriptFunctionType
ScriptFunctionType
DynamicType
Type
TypeId typeId;
TypeFlagMask flags;
JavascriptLibrary*? javascriptLibrary;
RecyclableObject*? prototype;
JavascriptMethod entryPoint;
TypePropertyCache*? propertyCache;
JavaScript Function
2 2
Js::ScriptFunction
JavaScript Function
2 3
Js::ScriptFunctionType
JavaScript Function
2 4
NativeCodeGenerator::CheckCodeGenThunk
NativeCodeGenerator::CheckCodeGenThunk
JavaScript Function
2 5
Js::ScriptFunctionType
DOM Function
2 6
window.alert("This is a DOM Function.");
DOM Function
2 7
Js::JavascriptExternalFunction
内容
JavascriptExternalFunction
RuntimeFunction
JavascriptFunction
DynamicObject
RecyclableObject
FinalizableObject
IRecyclerVisitedObject
VFT*? vftable;
Type? *? type;
Var*? auxSlots;
ArrayObject *?objectArray;?
ConstructorCache*?constructorCache;
FunctionInfo*?functionInfo;
Var?functionNameId;
UINT64?flags;
Var?signature;
void?*?callbackState;
ExternalMethod nativeMethod;?…
DOM Function
2 8
Js::JavascriptExternalFunction
DOM Function
2 9
Js::Type
DOM Function
3 0
Js::JavascriptExternalFunction::ExternalFunctionThunk
DOM Function
3 1
Js::JavascriptExternalFunction::ExternalFunctionThunk
DOM Getter/Setter Function
3 2
var s = document.createElement("script");
s.async = true;
DOM Getter/Setter Function
3 3
DOM Object
DOM Getter/Setter Function
3 4
Type
DOM Getter/Setter Function
3 5
Prototype
DOM Getter/Setter Function
3 6
Functions
DOM Getter/Setter Function
3 7
Setter Function
如何利用
3 8
DiagnosticsResources
如何利用
3 9
alwaysRefreshFromServer 属性
如何利用
4 0
CFastDOM::CDiagnosticsResources::Profiler_Set_alwaysRefreshFromServer
如何利用
4 1
CFastDOM::CDiagnosticsResources::Trampoline_Set_alwaysRefreshFromServer
如何利用
4 2
CDiagnosticNetworkPatch::SetAlwaysRefreshFromServer
如何利用
4 3
SetRelocPtr
总结
4 4
CFI 是一项有效的漏洞利用缓解措施
目前的 CFI实现都只是某种程度上的近似
完整实现的 CFI 依然不能解决所有问题
M        A        N        O        E        U        V        R        E
感谢观看！
KCon 汇聚黑客的智慧