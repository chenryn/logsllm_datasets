title:XFA: Faster Signature Matching with Extended Automata
author:Randy Smith and
Cristian Estan and
Somesh Jha
2008 IEEE Symposium on Security and Privacy
XFA: Faster Signature Matching With Extended Automata
Randy Smith
Cristian Estan
Somesh Jha
University of Wisconsin–Madison
{smithr,estan,jha}@cs.wisc.edu
Abstract
Automata-based representations and related algorithms
have been applied to address several problems in in-
formation security, and often the automata had to be
augmented with additional information. For example,
extended ﬁnite-state automata (EFSA) augment ﬁnite-
state automata (FSA) with variables to track dependen-
cies between arguments of system calls. In this paper,
we introduce extended ﬁnite automata (XFAs) which
augment FSAs with ﬁnite scratch memory and instruc-
tions to manipulate this memory. Our primary motiva-
tion for introducing XFAs is signature matching in Net-
work Intrusion Detection Systems (NIDS). Representing
NIDS signatures as deterministic ﬁnite-state automata
(DFAs) results in very fast signature matching but for
several classes of signatures DFAs can blowup in space.
Using nondeterministic ﬁnite-state automata (NFA) to
represent NIDS signatures results in a succinct repre-
sentation but at the expense of higher time complex-
ity for signature matching. In other words, DFAs are
time-efﬁcient but space-inefﬁcient, and NFAs are space-
efﬁcient but time-inefﬁcient. In our experiments we have
noticed that for a large class of NIDS signatures XFAs
have time complexity similar to DFAs and space com-
plexity similar to NFAs. For our test set, XFAs use
10 times less memory than a DFA-based solution, yet
achieve 20 times higher matching speeds.
1. Introduction
Automata-based representations have found sev-
eral applications in information security.
In some of
these applications automata are augmented with addi-
tional information. For example, extended ﬁnite state
automata (EFSA) augment ﬁnite-state automata (FSA)
with uninterpreted variables and are very useful for cap-
turing dependencies between system calls [23]. A sim-
ilar representation is used in STATL [8] to track de-
pendencies between events. In this paper our primary
goal is to improve the time and space efﬁciency of sig-
nature matching in network intrusion detection systems
(NIDS).1 To achieve our goal we introduce extended ﬁ-
nite automata (XFAs) which augment traditional FSAs
with a ﬁnite scratch memory used to remember various
types of information relevant to the progress of signa-
ture matching. Since an XFA is an FSA augmented with
ﬁnite scratch memory, it still recognizes a regular lan-
guage, albeit more efﬁciently than an FSA. We demon-
strate that representing signatures in NIDS as XFAs sig-
niﬁcantly improves time and space efﬁciency of signa-
ture matching. We also present algorithms for manip-
ulating XFAs, such as constructing XFAs from regular
expressions and combining XFAs.
In the past signatures in NIDS were simply key-
words, which resulted in extremely efﬁcient signature-
matching algorithms. The Aho-Corasick algorithm [1],
for example, ﬁnds all keywords in an input in time linear
in the input size. Because of the increasing complexity
of attacks and evasion techniques [19], NIDS signatures
have also become complex. Therefore, current tech-
niques for generating different types of signatures, such
as vulnerability [4, 31] or session [21, 26] signatures,
generate signatures that use the full power of regular
expressions. Representing NIDS signatures as deter-
ministic ﬁnite-state automata (DFAs) results in a time-
efﬁcient signature-matching algorithm (each byte of the
input can be processed in O(1) time), but for certain reg-
ular expressions DFAs blow up in space. Nondetermin-
istic ﬁnite-state automata (NFAs) are succinct represen-
tations for regular expressions, but the time complexity
of the signature-matching algorithm increases, i.e., each
byte of the input can take O(m) time to process, where
m is the number of states in the NFA. Therefore, DFAs
are time-efﬁcient but space-inefﬁcient, and NFAs are
space-efﬁcient but time-inefﬁcient. If signatures are rep-
1A NIDS that uses misuse detection matches incoming network
trafﬁc against a set of signatures. This functionality of a NIDS is
called signature matching.
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.14
187
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
resented as XFAs, the scratch memory has to be updated
while processing some input bytes. However, since the
scratch memory is very small it can be updated very ef-
ﬁciently (especially if it is cached). Moreover, for many
signatures XFAs are also a very succinct representation.
For a large class of NIDS signatures XFAs have time
complexity similar to DFAs and space complexity simi-
lar to or better than NFAs. The larger the scratch mem-
ory we can use, the smaller the space complexity of the
required automaton (but the time complexity of the ope-
rations for updating the scratch memory may increase).
Recall that XFAs augment traditional FSAs with a
small scratch memory which is used to remember vari-
ous types of auxiliary information. We will explain the
intuition behind XFAs with a short example. Consider
n signatures si (1 ≤ i ≤ n) where si =.*ki.*k
(cid:2)
i (ki and
(cid:2)
i are keywords or strings). Note that si matches an in-
k
put if and only if it contains a keyword ki followed by
(cid:2)
i. DFA Di for signature si is linear in the size of the
k
(cid:2)
regular expression .*ki.*k
i. However, if the keywords
are distinct, the DFA for the combination of the signa-
tures {s1,··· ,sn} is exponential in n. The reason for
this state-space blowup is that for each i (1 ≤ i ≤ n) the
DFA has to “remember” if it has detected the keyword
ki in the input processed so far. The XFA for the set of
signatures {s1,··· ,sn} maintains a scratch memory of n
bits (b1,··· ,bn), where bit bi remembers whether it has
seen the keyword ki or not. The space complexity of
the XFA is linear in n and the time complexity is O(n)
because the bits have to be potentially updated after pro-
cessing each input symbol, but this worst case happens
only if n of the keywords overlap in speciﬁc ways. For
the actual signatures we evaluated, the time complex-
ity for XFAs is much closer to DFAs. Further, the XFA
for an individual signature si is not much smaller than
the corresponding DFA, but the combined XFA for the
entire signature set is much smaller than the combined
DFA. The reason is not that we use a special combina-
tion procedure, but that the “shape” of the automata the
XFAs are built on does not lead to blowup. We discuss
this example in detail in Section 3.1.
This paper makes the following contributions:
• We introduce XFAs, which augment an FSA with a
small scratch memory to alleviate the state-space ex-
plosion problem characteristic to DFAs recognizing
NIDS signature sets (see Section 3).
• We provide a general procedure for building XFAs
from regular expressions that handles complex ex-
pressions used in modern NIDS (see Section 4).
• We perform a case study that builds XFAs for a real
signature set, and we demonstrate that the matching
performance and memory usage of XFAs is better
than that of solutions based on DFAs which must
resort to multiple automata to ﬁt into memory (see
Section 5). Even with a memory budget 10× larger
than that used for XFAs, DFA-based solutions re-
quire 67 automata and have throughput 20× lower.
2. Related work
String matching was important for early network in-
trusion detection systems as their signatures consisted
of simple strings. The Aho-Corasick [1] algorithm
builds a concise automaton (linear in the total size of
the strings) that recognizes multiple such signatures in
a single pass. Other software [3, 6, 9] and hardware so-
lutions [15, 27, 29] to the string matching problem have
also been proposed. However, evasion [11, 19, 24], mu-
tation [13], and other attack techniques [22] require sig-
natures that cover large classes of attacks but still make
ﬁne enough distinctions to eliminate false matches.
Signature languages have thus evolved from simple
exploit-based signatures to richer session [21, 26, 32]
and vulnerability-based [4, 31] signatures. These com-
plex signatures can no longer be expressed as strings,
and regular expressions are used instead.
NFAs can compactly represent multiple signatures but
may require large amounts of matching time, since the
matching operation needs to explore multiple paths in
the automaton to determine whether the input matches
any signatures. In software, this is usually performed
via backtracking (which opens the NFA up to serious
algorithmic complexity attacks [7]) or by maintaining
and updating a “frontier” of states, both of which can be
computationally expensive. However, hardware solu-
tions can parallelize the processing required and achieve
high speeds. Sidhu and Prasanna [25] provide an NFA
architecture that updates the set of states during match-
ing efﬁciently in hardware. Further work [5, 28] has
improved on their proposal, but for software implemen-
tations the processing cost remains signiﬁcant.
DFAs can be efﬁciently implemented in software, al-
though the resulting state-space explosion often exceeds
available memory. Sommer and Paxson [26] propose
on-the-ﬂy determinization for matching multiple signa-
tures, which keeps a cache of recently visited states and
computes transitions to new states as necessary during
inspection. This approach can be subverted by an ad-
versary who can repeatedly invoke the expensive deter-
minization operations. Yu et al. [33] propose combin-
ing signatures into multiple DFAs instead of one DFA,
using simple heuristics to determine which signatures
should be grouped together. The procedure does re-
duce the total memory footprint, but for complex sig-
188
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
nature sets the number of resulting DFAs can be large.
The cost of this approach is increased inspection time,
since payloads must now be scanned by multiple DFAs.
The D2FA technique [14] performs edge compression
to reduce the memory footprint of individual states. It
stores only the difference between transitions in simi-
lar states, and in some sense, extends the string-based
Aho-Corasick algorithm to DFAs. The technique does
not address state space explosion and thus is orthogonal
to our technique which focuses on reducing the number
of states required. The two techniques could be com-
bined to obtain further reductions in memory usage.
Preﬁlter-based solutions such as those used by Snort
[20] can achieve good average-case performance. The
pre-ﬁlter performs string matching on subparts of a sig-
nature, invoking the matching procedure for the full reg-
ular expression only when a subpart has been matched.
Our preliminary results show that this approach is vul-
nerable to algorithmic complexity attacks. By sending
trafﬁc crafted to defeat Snort’s pre-ﬁlter and to cause ex-
pensive regular expression processing, an attacker can
slow it down by as much as a factor of 5000.
Other extensions to automata have been proposed in
the context of information security. Extended Finite
State Automata (EFSA) extend traditional automata to
assign and examine values of a ﬁnite set of variables.
Sekar and Uppuluri [23] use EFSAs to monitor a se-
quence of system calls. Extensions, such as EFSA,
fundamentally broaden the language recognized by the
ﬁnite-state automata, e.g., EFSAs correspond to regular
expression for events (REEs). On the other hand, XFAs
can be viewed as an optimization of a regular DFA, but
XFAs do not enhance the class of languages that can be
recognized. It will be interesting to consider XFA-type
optimizations to EFSAs.
Eckmann et al. [8] describe a language STATL,
which can be thought of as ﬁnite-state automata with
transitions annotated with actions that an attacker can
take. The motivation for STATL was to describe attack
scenarios rather than improve the efﬁciency of signature
matching. Automata augmented with various objects,
such as timed automata [2] and hybrid automata [12],
have also been investigated in the veriﬁcation commu-
nity. For example, hybrid automata, which combine dis-
crete transition graphs with continuous dynamical sys-
tems, are mathematical models for digital systems that
interact with analog environments. As with EFSAs,
these automata (which are usually inﬁnite-state) funda-
mentally enhance the languages they recognize.
Space-time or time-memory tradeoff is a technique
where the memory use can be reduced at the cost of
slower program execution, or vice versa, the computa-
tion time can be reduced at the cost of increased mem-
ory use.
In complexity theory researchers investigate
whether addition of a restriction on the space inhibits
one from solving problems in certain complexity class
within speciﬁc time bounds. For example, time-space
tradeoff lower bounds for SAT were investigated by
Fortnow [10]. Time-space tradeoffs have also been ex-
plored in the context of attacks [16, 17]. We are not
aware of existing work on time-space tradeoffs in the
context of signature matching for NIDS.
3. Technical overview
We begin with a discussion of simple signatures
illustrating how XFAs need much fewer states than
DFAs, followed by an overview of the steps for compil-
ing realistic signatures to XFAs suitable for NIDS use.
3.1. Reducing state space with XFAs
(cid:2)
2
(cid:2)
1
(cid:2)
i, where all Si and S
Recognizing a signature set with n signatures of the
(cid:2)
form .*Si.*S
i are distinct strings,
leads to state space blowup with DFAs. Figure 1 shows
an example for the case where n = 2, S1 =ab, S
=cd,
S2 =ef, and S
=gh. In the general case, for each of
the n signatures, the combined DFA must “remember”
whether it already found the ﬁrst string in the input so
that it “knows” whether to accept if it sees the second
string. For example, in Figure 1 the DFA is in state PV
when neither ab nor ef has been observed. Similarly,
it is in state RV when ab but not ef is seen, state PX
when ef but not ab is seen, and state RX when both ab
and ef have been seen. In general, to remember n inde-
pendent bits of information, the DFA needs at least 2n
distinct states. An analysis of the generalized example
shows that if the strings are of length l, then the actual
number of states used by the combined DFA is O(nl2n).
Figure 2 shows the same signatures as in Figure 1
when DFAs are replaced with XFAs. In this ﬁgure, the
XFAs for .*ab.*cd and *ef.*gh each use a single
bit of scratch memory that is manipulated by instruc-
tions attached to speciﬁc edges (depicted in the ﬁgure
as callout boxes). During matching, these instructions
are “executed” each time the corresponding transition is
(cid:2)
i, as
followed. For each signature of the form .*Si.*S
(cid:2)
long as Si does not overlap with S
i, we can build XFAs
like those in Figure 2 that uses a single bit of scratch
memory.2 This bit explicitly encodes whether Si has
appeared in the input so far, and the shape of the un-
derlying automaton is very similar to that of the com-
(cid:2)
i independently.
bined DFA recognizing .*Si and .*S
2If Si and S
(cid:2)
i overlap it is still possible to build an XFA recognizing
the signature, but it will use more than one bit.
189
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
[^a]
[^c]
a
P
b
Q
c
R
d
S
T
accept(sig1)
+
[^ae]
b
QV
[^ag]
b
QX
a
a
accept(sig2)
[^e]
[^g]
=
accept(sig2)
V
e
W
f
X
g
Y
h
Z
PV
e
PW
f
PX
g
PY
h
PZ
[^ce]
d
SV
TV
c
accept(sig1)
[^cg]
d
SX
TX
c
accept(sig1)
accept(sig2)
RV
e
RW
f
RX