                        {
                            getinfo.GetAllUsers();
                        }
                        else if (_pass)
                        {
                            Ldapconn.SET_LDAP_USER_PASS();
                            dns_name = basicInfo.GetDomainDNS();
                            Console.WriteLine("===========Domain DNS===========");
                            Console.WriteLine(dns_name);
                            getinfo.GetAllUsers();
                        }
                    }
                    if (_GetGroups)
                    {
                        if (!_pass)
                        {
                            getinfo.GetAllGroups();
                        }
                        else if (_pass)
                        {
                            Ldapconn.SET_LDAP_USER_PASS();
                            dns_name = basicInfo.GetDomainDNS();
                            Console.WriteLine("===========Domain DNS===========");
                            Console.WriteLine(dns_name);
                            getinfo.GetAllGroups();
                        }
                    }
                    if (_policy)
                    {
                        if (!_pass)
                        {
                            getinfo.GetPassPolicy();
                        }else if (_pass)
                        {
                            Ldapconn.SET_LDAP_USER_PASS();
                            dns_name = basicInfo.GetDomainDNS();
                            Console.WriteLine("===========Domain DNS===========");
                            Console.WriteLine(dns_name);
                            getinfo.GetPassPolicy();
                        }
                    }
                    if (_AdminSDHolder)
                    {
                        if (!_pass)
                        {
                            _adminsdholder.EnumUsersAndGroups_AdminSDHolder();
                        }
                        else if (_pass)
                        {
                            Ldapconn.SET_LDAP_USER_PASS();
                            dns_name = basicInfo.GetDomainDNS();
                            Console.WriteLine("===========Domain DNS===========");
                            Console.WriteLine(dns_name);
                            _adminsdholder.EnumUsersAndGroups_AdminSDHolder();
                        }
                    }
                }
                catch
                {
                    Console.WriteLine("error!");
                }
            }
        }
    }
## 2.3 Ldapcoon.cs
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.DirectoryServices;
    namespace LdaopDemo
    {
        public class Ldapconn
        {
            public static DirectoryEntry coon = null;
            public static DirectorySearcher search = null;
            public static string url = "";
            public static string user = "";
            public static string pass = "";
            //域内
            public static DirectoryEntry ldap_coon_nopass(DirectoryEntry ldap_coon)
            {
                ldap_coon = new DirectoryEntry();
                return ldap_coon;
            }
            public static DirectorySearcher ldap_search_nopass(DirectorySearcher ldap_search)
            {
                ldap_search = new DirectorySearcher(coon);
                return ldap_search;
            }
            public static DirectoryEntry Get_coon_nopass()
            {
                coon = ldap_coon_nopass(coon);
                return coon;
            }
            public static DirectorySearcher Get_search_nopass()
            {
                search = ldap_search_nopass(search);
                return search;
            }
            //域外
            public static void SET_LDAP_USER_PASS()
            {
                Console.Write("Domain IP:");
                url = Console.ReadLine();
                url = "LDAP://" + url;
                Console.Write("user:");
                user = Console.ReadLine();
                Console.Write("pass:");
                pass = Console.ReadLine();
                //url = "LDAP://192.168.11.16";
                //user = "hack";
                //pass = "test123..";
                String path = "CN=AdminSDHolder,CN=System,DC=redteam,DC=local";
            }
            public static DirectoryEntry ldap_coon(DirectoryEntry ldap_coon)
            {
                ldap_coon = new DirectoryEntry(url, user, pass);
                return ldap_coon;
            }
            public static DirectorySearcher ldap_search(DirectorySearcher ldap_search)
            {
                ldap_search = new DirectorySearcher(coon);
                return ldap_search;
            }
            public static DirectoryEntry Get_coon()
            {
                coon = ldap_coon(coon);
                return coon;
            }
            public static DirectorySearcher Get_search()
            {
                search = ldap_search(search);
                return search;
            }
        }
    }
## 2.4 basicInfo.cs
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.DirectoryServices;
    namespace LdaopDemo.BasicInfo
    {
        class basicInfo
        {
            public static DirectoryEntry coon = null;
            public static DirectorySearcher search = null;
            public static String Domain_DNS_Name = "";
            public static void LDAP_COON()
            {
                if (Ldapconn.url == "")
                {
                    try
                    {
                        coon = Ldapconn.Get_coon_nopass();
                        search = Ldapconn.Get_search_nopass();
                    }
                    catch
                    {
                        Console.Write("coon error");
                    }
                }
                else
                {
                    try
                    {
                        coon = Ldapconn.Get_coon();
                        search = Ldapconn.Get_search();
                    }
                    catch
                    {
                        Console.Write("coon error");
                    }
                }
            }
            public static String GetDomainDNS()
            {
                LDAP_COON();
                search.Filter = "(&(objectClass=domainDNS))";
                foreach (SearchResult r in search.FindAll())
                {
                    string domainDNS_Name = "";
                    try
                    {
                        domainDNS_Name = r.Properties["distinguishedName"][0].ToString();
                        Domain_DNS_Name = domainDNS_Name;
                    }
                    catch
                    {
                        Console.WriteLine("error");
                        Domain_DNS_Name = "error";
                    }
                }
                return Domain_DNS_Name;
            }
            public void GetComputers()
            {
                LDAP_COON();
                //查询域内机器
                search.Filter = "(&(objectclass=computer))";
                Console.WriteLine("===========All Computers===========");
                foreach (SearchResult r in search.FindAll())
                {
                    string computername = "";
                    try
                    {
                        computername = r.Properties["dnshostname"][0].ToString();
                        Console.WriteLine(computername);
                    }
                    catch
                    {
                        Console.WriteLine("error");
                    }
                }
            }
            public void GetAllUsers()
            {
                LDAP_COON();
                //查询域内用户
                search.Filter = "(&(objectClass=user)(objectCategory=person))";
                Console.WriteLine("===========All Users===========");
                foreach (SearchResult r in search.FindAll())
                {
                    string users = "";
                    try
                    {
                        users = r.Properties["name"][0].ToString();
                        Console.WriteLine(users);
                    }
                    catch
                    {
                        Console.WriteLine("error");
                    }
                }
            }
            public void GetAllGroups()
            {
                LDAP_COON();
                //获取域内所有组：
                search.Filter = "(&(objectCategory=group))";
                Console.WriteLine("===========All Groups===========");
                foreach (SearchResult r in search.FindAll())
                {
                    string groups = "";
                    string groupdescription = "";
                    try
                    {
                        groups = r.Properties["cn"][0].ToString();
                        groupdescription = r.Properties["description"][0].ToString();
                        Console.WriteLine("Group: " + groups);
                        Console.WriteLine("Description: " + groupdescription + "\r\n");
                    }
                    catch
                    {
                        Console.WriteLine("error");
                    }
                }
                //密码策略
                /*
                lockoutDuration  锁定持续时间
                lockoutThreshold 多少次锁定
                maxPwdAge        最大修改密码时间
                minPwdAge        最小修改密码时间
                minPwdLength     最小密码长度
                 */
            }
            public void GetPassPolicy()
            {
                LDAP_COON();
                Console.WriteLine("===========Pass Policy===========");
                SearchResult r = search.FindOne();
                long maxDays = 0;
                long minDays = 0;
                Int64 maxPwdAge = 0;
                Int64 minPwdAge = 0;
                string minPwdLength = "";
                string lockoutThreshold = "";
                Int64 lockoutDuration = 0;
                long lockTime = 0;
                try
                {
                    maxPwdAge = (Int64)r.Properties["maxPwdAge"][0];
                    maxDays = maxPwdAge / -864000000000;
                    minPwdAge = (Int64)r.Properties["minPwdAge"][0];
                    minDays = minPwdAge / -864000000000;
                    minPwdLength = r.Properties["minPwdLength"][0].ToString();
                    lockoutThreshold = r.Properties["lockoutThreshold"][0].ToString();
                    lockoutDuration = (Int64)r.Properties["lockoutDuration"][0];
                    lockTime = lockoutDuration / -864000000000; 
                    Console.WriteLine("minPwdAge:" + minDays);
                    Console.WriteLine("maxPwdAge:" + maxDays);
                    Console.WriteLine("minPwdLength:" + minPwdLength);
                    Console.WriteLine("lockoutThreshold:" + lockoutThreshold);
                    Console.WriteLine("lockoutDuration:" + lockTime);
                }
                catch
                {
                    Console.WriteLine("error");
                }
            }
        }
    }
## 2.5 AdminSDHolder.cs
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.DirectoryServices;
    using System.Security.AccessControl;
    using System.Security.Principal;
    using LdaopDemo.BasicInfo;
    using System.Text.RegularExpressions;
    namespace LdaopDemo.backdoor
    {
        class AdminSDHolder
        {
            public static DirectoryEntry coon = null;
            public static DirectorySearcher search = null;
            public static string Dns_First_Name = "";
            public static void LDAP_COON()
            {
                if (Ldapconn.url == "")
                {
                    try
                    {
                        coon = Ldapconn.Get_coon_nopass();
                        search = Ldapconn.Get_search_nopass();
                    }
                    catch
                    {
                        Console.Write("coon error");
                    }
                }
                else
                {
                    try
                    {
                        coon = Ldapconn.Get_coon();
                        search = Ldapconn.Get_search();
                    }
                    catch
                    {
                        Console.Write("coon error");
                    }
                }
            }
            public static String Get_Dns_First_Name()
            {
                LDAP_COON();
                search.Filter = "(&(objectClass=domainDNS))";
                foreach (SearchResult r in search.FindAll())
                {
                    string domainDC_Name = "";
                    try
                    {
                        domainDC_Name = r.Properties["dc"][0].ToString();
                        Dns_First_Name = domainDC_Name;
                    }
                    catch
                    {
                        Console.WriteLine("error");
                        Dns_First_Name = "error";
                    }
                }
                return Dns_First_Name;
            }
            //sid to username
            public string SidToUserName(string sid)
            {
                LDAP_COON();
                if(Ldapconn.url == "")
                {
                    string url = "LDAP://";
                    DirectoryEntry coon = new DirectoryEntry(url);
                    DirectorySearcher search = new DirectorySearcher(coon);
                    search.Filter = "(&(objectClass=user)(objectCategory=person))";
                    foreach (SearchResult r in search.FindAll())
                    {
                        string users = "";
                        try
                        {
                            users = r.Properties["name"][0].ToString();
                            return users;
                        }
                        catch
                        {
                            Console.WriteLine("error");
                        }
                    }
                }
                else
                {
                    string url = Ldapconn.url+"/";
                    string username = "hack";
                    string password = "test123..";
                    //Console.WriteLine(url);
                    DirectoryEntry coon = new DirectoryEntry(url, username, password);
                    DirectorySearcher search = new DirectorySearcher(coon);
                    search.Filter = "(&(objectClass=user)(objectCategory=person))";
                    foreach (SearchResult r in search.FindAll())
                    {
                        string users = "";
                        try
                        {
                            users = r.Properties["name"][0].ToString();
                            return users;
                        }
                        catch
                        {
                            Console.WriteLine("error");
                        }
                    }
                }
                return "error";
            }
            public void EnumUsersAndGroups_AdminSDHolder()
            {
                LDAP_COON();
                //person
                search.Filter = "(&(objectcategory=person)(admincount=1))";
                Console.WriteLine("===========AdminSDHolder Users===========");
                foreach (SearchResult r in search.FindAll())
                {
                    string users = "";
                    try
                    {
                        users = r.Properties["name"][0].ToString();
                        Console.WriteLine(users);
                    }
                    catch
                    {
                        Console.WriteLine("error");
                    }
                }
                //group
                search.Filter = "(&(objectcategory=group)(admincount=1))";
                Console.WriteLine("===========AdminSDHolder Groups===========");
                foreach (SearchResult r in search.FindAll())
                {
                    string groups = "";
                    try
                    {
                        groups = r.Properties["name"][0].ToString();
                        Console.WriteLine(groups);
                    }
                    catch
                    {
                        Console.WriteLine("error");
                    }
                }
                //acl
                Console.WriteLine("===========AdminSDHolder ACL===========");
                string dns_name = basicInfo.GetDomainDNS();//DC=redteam,DC=local
                String AdminSDHolder_path = "/CN=AdminSDHolder,CN=System," + dns_name;
                String AdminSDHoler_Acl = "";
                if (Ldapconn.url == "")
                {
                    string dc_name = Get_Dns_First_Name();
                    AdminSDHolder_path = "LDAP://" + dc_name + ":389" + AdminSDHolder_path;    //LDAP://redteam:389/CN=AdminSDHolder,CN=System,DC=redteam,DC=local
                }
                else
                {
                    AdminSDHolder_path = Ldapconn.url + AdminSDHolder_path;
                }
                // //Ldapconn.url == "LDAP://name:389"
                //Console.WriteLine(AdminSDHolder_path);
                coon.Path = AdminSDHolder_path;
                ActiveDirectorySecurity sec = coon.ObjectSecurity;
                AuthorizationRuleCollection rules = null;
                rules = sec.GetAccessRules(true, true, typeof(NTAccount));
               Console.WriteLine("===========GenericAll===========");
                foreach (ActiveDirectoryAccessRule rule in rules)
                {
                    if (rule.ActiveDirectoryRights.ToString().Equals("GenericAll"))
                    {
                        string acl = rule.IdentityReference.Value;
                        if (acl.Contains("-"))
                        {
                            //Console.WriteLine(acl);
                            string user_name = SidToUserName(acl);
                            Console.WriteLine(user_name);
                        }
                        else
                        {
                            Console.WriteLine(acl);
                        }
                    }
                }
            }
        }
    }