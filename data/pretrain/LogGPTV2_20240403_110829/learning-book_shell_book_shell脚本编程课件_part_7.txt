return 0
无错误返回
return 1-255
有错误返回
5.4环境函数
类拟于环境变量，也可以定义环境函数，使子进程也可使用父进程定义的函数
定义环境函数：
---
## Page 53
export -f function_name
declare -xf function_name
查看环境函数：
export-f
declare -xf
5.5函数参数
函数可以接受参数：
·在函数体中当中，可使用$1，$2，..调用这些参数；还可以使用$@，$*，$#等特殊变量
5.6函数变量
变量作用域：
·普通变量：只在当前shell进程有效，为执行脚本会启动专用子shell进程；因此，本地变量的作用
范围是当前shell脚本程序文件，包括脚本中的函数
·环境变量：当前shell和子shell有效
·本地变量：函数的生命周期：函数结束时变量被自动销毁
注意：
·如果函数中定义了普通变量，且名称和局部变量相同，则使用本地变量
·由于普通变量和局部变量会冲突，建议在函数中只使用本地变量
在函数中定义本地变量的方法
1oca1 NAME=VALUE
5.7函数递归
函数递归：函数直接或间接调用自身，注意递归层数，可能会陷入死循环
递归示例：
阶乘是基斯顿-卡曼于1808年发明的运算符号，是数学术语，一个正整数的阶乘（factorial）是所有小
于及等于该数的正整数的积，并且有0的阶乘为1，自然数n的阶乘写作n！
n!=1×2×3×...xn
阶乘亦可以递归方式定义：0!=1，n!=（n-1)xn
nl=n(n-1)(n-2)...1
n(n-1)! = n(n-1)(n-2)!
范例： fact.sh
---
## Page 54
#! /bin/bash
fact(){
if [ $1 -eq 0 -o $1 -eq 1 ]; then
echo 1
else
echo $[$1*$(fact $[$1-1])]
fi
fact $1
fork炸弹是一种恶意程序，它的内部是一个不断在fork进程的无限循环，实质是一个简单的递归程
序。由于程序是递归的，如果没有任何限制，这会导致这个简单的程序迅速耗尽系统里面的所有资源
参考:https://en.wikipedia.org/wiki/Fork bomb
函数实现
: O{ :|:& };:
bomb() {bosmb | bomb & }; bomb
脚本实现
cat Bomb . sh
#1/bin/bash
-/$01-/$0&
练习
1.编写函数，实现OS的版本判断
2.编写函数，实现取出当前系统etho的IP地址
3.编写函数，实现打印绿色OK和红色FAILED
4.编写函数，实现判断是否无位置参数，如无参数，提示错误
5.编写函数，实现两个数字做为参数，返回最大值
6.编写服务脚本/root/bin/testsrv.sh，完成如下要求
(1)脚本可接受参数：start, stop,restart, status
（2）如果参数非此四者之一，提示使用格式后报错退出
(3) 如是start:则创建/var/lock/subsys/SCRIPT_NAME, 并显示*启动成功”
考虑：如果事先已经启动过一次，该如何处理？
(4)如是stop:则删除/var/lock/subsys/SCRIPT_NAME,并显示停止完成*
考虑：如果事先已然停止过了，该如何处理？
(5)如是restart，则先stop,再start
考虑：如果本来没有start，如何处理？
(6) 如是status, 则如果/var/lock/subsys/SCRIPT_NAME文件存在 , 则显示*SCRIPT_NAME is
running.." , 如果/var/lock/subsys/SCRIPT_NAME文件不存在 , 则显示"SCRIPT_NAME is
stopped..*
（7）在所有模式下禁止启动该服务，可用chkconfig和service命令管理
说明：SCRIPT_NAME为当前脚本名
7. 编写脚本/root/bin/copycmd.sh
（1)提示用户输入一个可执行命令名称
（2）获取此命令所依赖到的所有库文件列表
(3)复制命令至某目标目录（例如/mnt/sysroot)下的对应路径下
---
## Page 55
如 : /bin/bash ==> /mnt/sysroot/bin/bash
/usr/bin/passwd ==> /mnt/sysroot/usr/bin/passwd
（4)复制此命令依赖到的所有库文件至目标目录下的对应路径下：如：/lib64/ld-linux-x86-
64.so.2 ==> /mnt/sysroot/lib64/ld-linux-x86-64.so.2
（5）每次复制完成一个命令后，不要退出，而是提示用户键入新的要复制的命令，并重复完成上述
功能；直到用户输入quit退出
8.斐波那契数列又称黄金分割数列，因数学家列昂纳多-斐波那契以免子繁殖为例子而引入，故又称
为免子数列”，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、…，斐波纳契数列
（） （-)+）=（）=）  =（） ：
求n阶斐波那契数列
9.汉诺塔（又称河内塔）问题是源于印度一个古老传说。大梵天创造世界的时候做了三根金刚石柱
子，在一根柱子上从下往上按照大小顺序擦着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开
始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一
次只能移动一个圆盘，利用函数，实现N片盘的汉诺塔的移动步骤
6其它脚本相关工具
6.1信号捕捉trap
人的高薪职业
trap触发指令信号
进程收到系统发出的指定信号后，将执行自定义指令，而不会执行原操作
trap"信号
忽略信号的操作
trap信号
恢复原信号的操作
trap -p
列出自定义信号操作
trap finish EXIT
当脚本退出时，执行finish函数
范例：
#!/bin/bash
trap*echo "press ctrl+c"'int quit
trap -p
for((1=0;1 expect "hi" { send "You said hi\n" } "hehe" { send "Hehe yourself\n"
}"bye” { send “Good bye\n" }
hehe
Hehe yourse1f
uasno auan,uas }auau.uu pes nopuas } u.aadxa  expect "hi" { send
,u, [asunoauah,puas ]_auay.u\Lu pes no 
} "bye” { send “Good bye\n" }
hi
You said hi
expect1.4>
匹配hi,hello,bye任意字符串时，执行相应输出。等
等同如下
expect {
"hi" { send "You said hi\n"}
{\Lasunok auah, puas ] auay..
"bye" { send
Good bye\n"]
范例1：
!/usr/bin/expect
spawn scp /etc/fstab 10.0.0.7:/data
expect{
"yes/no” { send "yes\n";exp_continue }
"password" { send "magedu\n" }
expect eof
范例2：
!/usr/bin/expect
spawn ssh 10.0.0.7
expect {
"yes/no" { send "yes\n";exp_continue }
"password" { send
{_u\npabew,
interact
范例3：expect变量
---
## Page 59
#!/usr/bin/expect
set ip 10.0.0.7
set user root
set password magedu
set timeout 10
spawn ssh $user@$ip
expect{
"yes/no" { send "yes\n";exp_continue }
"password" { send "$password\n" }
上
interact
范例4：expect位置参数
!/usr/bin/expect
set ip [1index Sargv 0]
set user [lindex $argv 1]
set password [lindex $argv 2]
spawn ssh $usen@$ip
expect{
"yes/no" { send "yes\n";exp_continue }
"password" { send "$password\n" }
interact
#. /ssh3.exp 192.168.8.10 root magedu
范例5：expect执行多个命令
哥教
!/usr/bin/expect
set ip [1index Sargv 0]
set user [lindex $argv 1]
set password [lindex $argv 2]
set timeout 10
spawn ssh $user@$ip
expect {
"yes/no" { send "yes\n";exp_continue }
u\puomsseds.. puas  3puomssed,
u\eyeu ppeuasn puas } #[.oadxa
{_u\euey uspas-- pmssed|npabew ouoa puas } #[ oadxa
send “exit\n"
expect eof
#./ssh4.exp 10.0.0.7 root magedu
范例6：shell脚本调用expect
#1/bin/bash
ip=$1
user=S2
E$=puoMssed
expect <<EOF
set timeout 20
spawn ssh $user@$ip
expect {
'yes/no" { send "yes\n";exp_continue }
---
## Page 60
u^puomsseds。 puas 3,puomssed,
u`auau ppeuasn puas } .#[.soadxa
{_u\auau uspis--pmssed|npabew ouoapuas } #[oadxa
{u\xapuas }#adxa
expect eof
EOF
#./ssh5.sh 192.168.8.10 root magedu
范例7：shell脚本利用循环调用expect在CentOS和Ubuntu上批量创建用户
#!/bin/bash
中
#Author:
wangxiaochun
#QQ:
29308620
#Date:
2020-01-06
#FileName:
expect6.sh
PURL:
http://www.magedu.com
#Description:
The test script
#Copyright (C):
2020 All rights reserved
NET=10.0.0
user=root
password=magedu
哥教育
for ID in 6 7 111;do
ip=$NET.$ID
expect <<EOF
set timeout 20
T
spawn ssh $user@$ip
expect {
"yes/no" { send "yes\n";exp_continue }
"password" { send "$password\n"}
上
{u\4sa ppeuasn, puas } # ioadxa
expect "#" { send "exit\n" }
expect eof
EOF
done
7数组
7.1数组介绍
变量：存储单个元素的内存空间
数组：存储多个元素的连续的内存空间，相当于多个变量的集合
数组名和索引
·索引的编号从0开始，属于数值索引
·索引可支持使用自定义的格式，而不仅是数值格式，即为关联索引，bash4.0版本之后开始支持
·bash的数组支持稀疏格式（索引引不连续）
---
## Page 61
7.2声明数组
*普通最组可以不事先产明，直接使用
declare -a ARRAY_NAME
关联数组必须先产明，再使用
declare -A ARRAY_NAME
注意：两者不可相互转换
7.3数组赋值
数组元素的赋值
（1）一次只赋值一个元素
ARRAY_NAME[INDEX]=VALUE
范例：
weekdays [0]="Sunday"
weekdays [4]="Thursday"
(2)一次赋值全部元素
ARRAY_NAME=C"VAL1"
"VAL2"
"VAL3′
范例：
马哥教育
title=("ceo" "coo
num=({0. .10})
IT人的高薪职业学院
alpha=({a. g})
file=( *,sh )
(3）只赋值特定元素
ARRAY_NAME=([0]="VAL1" [3]="VAL2".. - )
（4）交互式数组值对赋值
read -a ARRAY
范例：
[root@centos8~]#declare -A course
[root@centos8 ~]#declare -a course
-bash: declare: course: cannot convert associative to indexed array