(cid:1)
The ﬁrst row denoted by (cid:3)(cid:2) (cid:4) represents the perfor-
mance of the base case using the unmodiﬁed name server
(from the used version of BIND) installed on one of the
Zurich machines. Other than this base case, three different
groups of machines are considered: the (cid:5)(cid:2) (cid:4) row, corre-
sponds to the four identical machines on the local-area net-
work in Zurich. The next two rows with a group of four
replicas each correspond to a setup with two machines in
Zurich, one in New York and another one in San Jose. The
rows with seven servers include all servers.
The column marked “Read” shows the time taken by a
read request to be returned to the client; recall that this in-
volves the request to be sent over atomic broadcast (except
for the base case (cid:3)(cid:2) (cid:4) with the unmodiﬁed named). Re-
sults for read operations are shown only for the cases where
no server is corrupted since a simulated corrupted server
would not have an inﬂuence on the result. The case (cid:5)(cid:2) (cid:4)
on the LAN represents the time taken by the atomic broad-
cast protocol itself since the link latencies are negligible. In
the other cases, the time taken for a read can mostly be at-
tributed to the latencies of the network links connecting the
servers.
The other columns show the time taken by write re-
quests, in particular for adding a record to the database and
deleting a record from it. For both operations, measure-
ments are given for each one of the three threshold sig-
nature protocols discussed in Section 3: the unoptimized
protocol (denoted by BASIC), the optimistic protocol OPT-
PROOF with correctness proofs, and the optimistic protocol
OPTTE with trial and error.
In nsupdate, each add or delete request to an authori-
tative server is preceded by a read request. Thus, the data
shown here includes the time taken for the read in addi-
tion to the subsequent add or delete operation. The numbers
show that an add request takes almost twice as much time
to process as a delete request in all cases. This is because
the time is dominated by the computation of the threshold
signatures and because named sequentially computes four
new SIG records with signatures for an add request and two
for a delete request.
5.3. Discussion
The results show that read operations take anywhere
from around 50 milliseconds on the LAN to several hun-
dred milliseconds, when remote machines on the Internet
are involved. Write operations take from one to more than
20 seconds, depending on the topology, the scheme used,
and the attacker’s behavior.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:50 UTC from IEEE Xplore.  Restrictions apply. 
Read
0.003
0.05
0.37
0.44
(cid:1) (cid:2)
(cid:2)(cid:1) (cid:3)
(cid:4)(cid:1) (cid:3)
(cid:4)(cid:1) (cid:3)
(cid:4)(cid:1) (cid:2)
(cid:5)(cid:1) (cid:3)
(cid:5)(cid:1) (cid:2)
(cid:5)(cid:1) (cid:6)
Add
Delete
BASIC OPTPROOF OPTTE
BASIC OPTPROOF OPTTE
7.09
6.36
9.29
21.73
24.57
21.21
0.047
1.72
3.09
6.48
3.06
4.20
15.79
1.53
3.01
3.10
2.30
3.46
4.01
3.80
3.10
5.04
10.09
10.85
10.55
0.022
0.96
1.78
3.99
1.74
2.73
8.32
0.92
1.80
1.90
1.83
2.03
2.27
Table 2. Experimental results with times taken by every operation in seconds.
Comparing the threshold signature protocols (BASIC,
OPTPROOF, and OPTTE), we observe that the BASIC vari-
ant performs poorly even when there are no corrupted
servers. The BASIC signature protocol spends most of the
time for threshold signature generation and veriﬁcation.
The fact that with the BASIC signature protocol, the
(cid:4)(cid:1) (cid:3) setup with all machines on the LAN is slower than
(cid:4)(cid:1) (cid:3) with the machines distributed over the Internet can be
attributed to the compute-bound nature of the algorithm and
the unequal processing power of the involved machines; the
four machines on the LAN are very slow compared to the
ones in Austin and San Jose.
We observe that the optimized signature protocols de-
crease the time taken by write requests by a factor of four
to six, to around 3 seconds for an add and 1–2 seconds for
a delete operation over the Internet (in the (cid:4)(cid:1) (cid:3) and (cid:5)(cid:1) (cid:3)
cases). An interesting feature apparent from these results
is that the performance of the OPTPROOF protocol deteri-
orates much faster with an increasing number of corrupted
servers than that of the OPTTE protocol; in particular, con-
sider the (cid:5)(cid:1) (cid:6) case, where OPTPROOF takes almost as long
as BASIC, but OPTTE is still a factor of 4–5 faster.
Table 3 shows a breakdown of the time taken to compute
one threshold signature in the (cid:4)(cid:1) (cid:3) case on the LAN using
the BASIC protocol (recall that the threshold signature pro-
tocol is executed four times for add requests and twice for
deletes). More than 96% of the time is spent for share gener-
ation and share veriﬁcation, of which most can be attributed
to generating and verifying the correctness proofs. Assem-
bling and verifying the signature is negligible in compari-
son.
These results show that our secure replicated name ser-
vice adds a small delay to read requests and services write
requests in a reasonable time. Write requests take more time
because they involve threshold signature computations, but
updates are typically much less frequent than reads.
6. Conclusions
Our replicated name service provides fault tolerance and
security guarantees to secure DNS against an attacker that
compromises a fraction of name servers in a zone, while
supporting dynamic updates. Since the approach requires
 (cid:3) (cid:7) servers for tolerating the corruption of  servers,
small organizations running only two or three replicas to-
day would need to deploy additional servers in order to ben-
eﬁt from our replication technique.
The results show that such a system can be used in prac-
tice. In particular, for highly critical parts of the DNS, like
root servers or other servers near the root, our service can
provide increased security. Although dynamic updates have
high latency in our current implementation, one should re-
member that they are not a frequent operation compared to
reads and, moreover, occur less often when one gets closer
to the root of the name space.
References
[1] S. Ahmed, A Scalable Byzantine Fault Tolerant Secure Do-
main Name System. Master’s thesis, MIT, Jan. 2001.
[2] R. Arends, R. Austein, M. Larson, D. Massey, and
S. Rose, “Dns security introduction and requirements,”
draft-ietf-dnsext-dnssec-intro-09.txt,
Feb. 2004.
[3] D.
Atkins
of
and
the
ysis
draft-ietf-dnsext-dns-threats-03.txt,
June 2003.
domain
name
R.
Austein,
“Threat
anal-
system,”
[4] C. Cachin, K. Kursawe, F. Petzold, and V. Shoup, “Secure
and efﬁcient asynchronous broadcast protocols (extended ab-
stract),” in Advances in Cryptology: CRYPTO 2001, (J. Kil-
ian, ed.), pp. 524–541, Springer, 2001.
[5] C. Cachin, K. Kursawe, and V. Shoup, “Random oracles
in Constantinople: Practical asynchronous Byzantine agree-
ment using cryptography,” in Proc. 19th ACM Symposium on
Principles of Distributed Computing (PODC), pp. 123–132,
2000.
[6] C. Cachin and J. A. Poritz, “Secure intrusion-tolerant repli-
cation on the Internet,” in Proc. Intl. Conference on Depend-
able Systems and Networks (DSN-2002), pp. 167–176, June
2002.
[7] M. Castro and B. Liskov, “Practical Byzantine fault toler-
ance and proactive recovery,” ACM Trans. Computer Sys-
tems, vol. 20, pp. 398–461, Nov. 2002.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:50 UTC from IEEE Xplore.  Restrictions apply. 
absolute [s]
relative [%]
generate share
verify share
assemble sig.
(cid:0)(cid:0)(cid:1)(cid:2)
(cid:6)(cid:7)(cid:0)(cid:8)
(cid:0)(cid:0)(cid:3)(cid:1)
(cid:6)(cid:3)(cid:0)(cid:2)
(cid:0)(cid:0)(cid:0)(cid:4)
(cid:5)(cid:0)(cid:0)
verify sig.
(cid:0)(cid:0)(cid:0)(cid:0)(cid:5)
(cid:0)(cid:0)(cid:2)
Table 3. Breakdown of the time taken in the BASIC threshold signature protocol (message delays are
negligible because the experiment was performed on the local setup).
[8] Y. Desmedt, “Threshold cryptography,” European Transac-
tions on Telecommunications, vol. 5, no. 4, pp. 449–457,
1994.
[9] D. E. Eastlake, “Domain name system security extensions,”
RFC 2535, March 1999.
[10] R. Elz and R. Bush, “Clariﬁcations to the DNS speciﬁca-
tion,” RFC 2181, July 1997.
[11] V. Hadzilacos and S. Toueg, “Fault-tolerant broadcasts and
related problems,” in Distributed Systems, (S. J. Mullender,
ed.), New York: ACM Press & Addison-Wesley, 1993. Ex-
panded version appears as Technical Report TR94-1425, De-
partment of Computer Science, Cornell University, Ithaca
NY, 1994.
[12] K. Kursawe and V. Shoup, “Optimistic asynchronous atomic
broadcast,” Cryptology ePrint Archive, Report 2001/022,
March 2001. http://eprint.iacr.org/.
[13] P. Mockapetris, “Domain names - concepts and facilities,”
RFC 1034, Nov. 1987.
[14] M. K. Reiter and K. P. Birman, “How to securely replicate
services,” ACM Transactions on Programming Languages
and Systems, vol. 16, pp. 986–1009, May 1994.
[15] F. B. Schneider, “Implementing fault-tolerant services us-
ing the state machine approach: A tutorial,” ACM Comput-
ing Surveys, vol. 22, pp. 299–319, Dec. 1990.
[16] V. Shoup, “Practical threshold signatures,” in Advances in
Cryptology: EUROCRYPT 2000, (B. Preneel, ed.), pp. 207–
220, Springer, 2000.
[17] P. Vixie, S. Thomson, Y. Rekhter, and J. Bound, “Dynamic
updates in the domain name system,” RFC 2136, March
1999.
[18] X. Wang, Y. Huang, Y. Desmedt, and D. Rine, “Enabling se-
cure on-line DNS dynamic update,” in Proc. 16th Annual
Computer Security Applications Conference (ACSAC’00),
2000.
[19] T. Wu, M. Malkin, and D. Boneh, “Building intrusion-
tolerant applications,” in Proc. 8th USENIX Security Sym-
posium, pp. 79–91, 1999.
[20] L. Zhou, F. B. Schneider, and R. van Renesse, “COCA: A se-
cure distributed online certiﬁcation authority,” ACM Trans.
Computer Systems, vol. 20, no. 4, pp. 329–368, 2002.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:49:50 UTC from IEEE Xplore.  Restrictions apply.