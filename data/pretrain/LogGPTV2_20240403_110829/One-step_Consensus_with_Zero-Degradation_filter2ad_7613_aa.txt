title:One-step Consensus with Zero-Degradation
author:Dan Dobre and
Neeraj Suri
One-step Consensus with Zero-Degradation
Dan Dobre and Neeraj Suri
Department of Computer Science, Technische Universit¨at Darmstadt
{dan,suri}@informatik.tu-darmstadt.de
Abstract
In the asynchronous distributed system model, consensus
is obtained in one communication step if all processes pro-
pose the same value. Assuming f  e. Thus, the degree of resilience is given by
n > max{2f, 2e + f}. Maximizing e leads to f < (cid:2)n/3(cid:3),
while maximizing f leads to e ≤ (cid:2)n/4(cid:3).
Recently, Lamport has presented Fast Paxos [15], an ex-
tension to the classic Paxos [13] consensus protocol, that
meets all lower bounds on time-complexity and resilience.
Fast Paxos switches between achieving consensus in two or
three message delays depending on how many processes are
working. If n − f processes are working, then Fast Paxos
achieves consensus in three message delays. If n − e pro-
cesses are working and there are no concurrent proposals,
then Fast Paxos obtains consensus in two message delays.
3 System Model and Deﬁnitions
We assume a crash-stop asynchronous distributed sys-
tem model [5] consisting of a set Π = {p1, ..., pn} of n pro-
cesses of which up to f < n may fail by crashing. A process
behaves correctly, i.e., it executes the algorithm assigned to
it until it possibly crashes. A process that never crashes is
correct, otherwise it is faulty. Message transmission delays
and relative processing speeds are unbounded. The absence
of timing assumptions makes the distributed system asyn-
chronous [16]. Processes communicate and synchronize by
sending and receiving messages over reliable channels. A
reliable channel does not lose, duplicate or (undetectably)
corrupt messages. Given two correct processes p and q, if p
sends a message m to q then q eventually receives m.
3.1 The Consensus Problem
In the consensus problem, a set of processes have to
agree unanimously on a value that is one of the values pro-
posed by some process from the set. Formally, consensus is
deﬁned by two safety properties (Validity and Agreement)
and one liveness property (Termination) [5]:
Validity: If a process decides v, then some process has
proposed v.
Agreement: No two processes decide differently.
Termination: Every correct process decides.
Asynchrony and crashes create a context in which con-
sensus has no deterministic solution [10]. Various ap-
proaches have been proposed to circumvent this impos-
sibility result.
In practice, distributed systems are syn-
chronous most of the time so that models such as partial
synchrony [8], the timed asynchronous model [7] and unre-
liable failure detectors [5] describe real systems more accu-
rately than the asynchronous model.
3.2 Failure Detectors
Instead of dealing with low level details about synchrony
and associated timing assumptions, failure detectors [5] are
deﬁned in terms of properties, allowing a clean separation
from the implementation. We assume that the system is
equipped with an appropriate distributed failure detector,
consisting of one failure detector module installed at each
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:34 UTC from IEEE Xplore.  Restrictions apply. 
process. The consensus protocols presented in this paper
use the Ω and 3P failure detectors respectively. Both even-
tually provide consistent and correct information about the
state of processes, i.e., crashed or not crashed. While 3P
tracks the state of every process, Ω eventually outputs a sin-
gle correct leader process. Ω is strictly weaker than 3P and
it is the weakest failure detector to solve consensus [4, 6].
3P is deﬁned in terms of the following two properties:
3 Strong Completeness: Eventually, every crashed pro-
cess is suspected by every correct process.
3 Strong Accuracy: Eventually, no correct process is
suspected by any correct process.
Ω is deﬁned in terms of the eventual leadership property:
Eventual Leader: Eventually, Ω outputs the same correct
process forever.
3.3 The Atomic Broadcast Problem
In the atomic broadcast problem processes have to agree
on an unique sequence of messages. Formally, the atomic
broadcast problem is deﬁned in terms of two primitives a-
broadcast(m) and a-deliver(m), where m is some messsage.
When a process p executes a-broadcast(m) (respectively a-
deliver(m)), we say that p a-broadcasts m (respectively p a-
delivers m). We assume that every message m is uniquely
identiﬁed and carries the identity of its sender. In this con-
text, the atomic broadcast problem is deﬁned by two live-
ness properties (Validity and Agreement) and two safety
properties (Integrity and Total Order) [5]:
Validity: If a correct process a-broadcasts a message m,
then it eventually a-delivers m.
Agreement: If a process a-delivers message m, then all
correct processes eventually a-deliver m.
Integrity: For any message m, every process a-delivers m
at most once, and only if m was previously a-broadcast.
(cid:1) after
(cid:1) only after it a-
Total Order: If some process a-delivers message m
message m, then a process a-delivers m
delivers m.
3.4 Spontaneous Order
As pointed out by Pedone and Schiper in [19], messages
broadcast in LANs are likely to be delivered totally ordered.
This phenomenon can be attributed to the short delay be-
tween the broadcast of a message and the subsequent de-
livery. Consequently, if two distinct processes broadcast m
(cid:1) respectively, then it is very likely that m is deliv-
and m
(cid:1) or viceversa. The authors
ered by all processes before m
of [19] propose a new oracle called Weak Atomic Broadcast
(WAB) that captures the property of spontaneus total order.
A WAB is deﬁned by the primitives w-broadcast(k,m) and
w-deliver(k,m), where k ∈ N is the k-th w-broadcast in-
stance and m is a message. When a process p executes w-
broadcast(k, m), we say that p w-broadcasts m in instance
k. When a process p executes w-deliver(k, m) we say that
p w-delivers m that was w-broadcast in instance k. Intu-
itively, if WAB is invoked inﬁnitely often, it gives the same
output to every process inﬁnitely often. Formally, a WAB
oracle satisﬁes the following properties:
Validity: If a correct process invokes w-broadcast(k, m),
then all correct processes eventually get the output w-
deliver(k, m).
Uniform Integrity: For every pair (k,m), w-deliver(k,m)
is output at most once and only if some process invoked
w-broadcast(k,m)
Spontaneous Order: If w-broadcast(j,∗) is called an inﬁ-
nite number of instances j then there are inﬁnite k such
that the ﬁrst message w-delivered in instance k is the
same for every process that w-delivers messages in k.
4 Lower Bound Proof
In this section we prove a lower bound on consensus
time-complexity. We show that every one-step leader-based
protocol has a run in which some process needs at least three
communication steps to decide. In other words it is impossi-
ble to devise a leader-based consensus protocol that is one-
step and zero-degrading. In order to develop an intuition for
the impossibility result, we ﬁrst describe Brasileiro’s one-
step consensus [2] and how we would have to combine it
with a leader-based protocol to achieve zero-degradation.
In the ﬁrst round of Brasileiro’s one-step consensus, ev-
ery process broadcasts its proposal and subsequently waits
for a message from n − f processes. A process p decides
v iff it receives n − f equal values v. Hence if a process
p decides v, then every process q necessarily receives v at
least n − 2f times. To ensure agreement, it is sufﬁcient to
require that v is a majority among the values received by q.
If there are less than n− f equal proposals, then the ﬁrst
round is wasted. To eliminate this overhead, one straight-
forward approach is to combine it with the ﬁrst round of
a leader-based protocol. Here, consensus is obtained in
two communication steps if every correct process picks the
leader value in the ﬁrst round. Hence, in the combined pro-
tocol we have to ensure that if no process decides in the
ﬁrst round, then every correct process picks the leader value.
However, this is only possible if there are less than n − 2f
equal proposals. Otherwise, it might happen that some pro-
cess receives a majority value v and consequently picks v in
order to ensure agreement while some other process picks
the leader value vl and v (cid:6)= vl. Hence, two distinct values
are proposed in the second round and consequently some
process might not decide before the third round.
Deﬁnition 1 (one-step) Assuming f < n/3, a consensus
protocol is one-step iff it reaches consensus in one commu-
nication step in every run in which all proposals are equal.
Deﬁnition 2 (stable run) A run of a consensus algorithm
is stable iff the failure detector makes no mistakes and its
output does not change during that run.
The stability of the failure detector can be attributed to
the fact that nearly all runs are synchronous and crashes are
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:34 UTC from IEEE Xplore.  Restrictions apply. 
initial. Even if the failure detector needs to pass through a
temporary stabilization period (e.g. after a failure), in most
runs it will exhibit a stable and accurate behaviour.
In a
stable run, Ω outputs the same correct process from the be-
ginning of the run, while 3P suspects exactly the processes
that have crashed initially.
Deﬁnition 3 (zero-degradation) A consensus algorithm A
is zero-degrading iff A reaches consensus in two communi-
cation steps in every stable run.
Theorem 1 (Lower Bound) Assuming that n/4 ≤ f <
n/3, every one-step consensus algorithm A based on Ω has
a stable run in which some process decides after three com-
munication steps or more.
Preliminary notes (see Figure 1): We prove the theorem