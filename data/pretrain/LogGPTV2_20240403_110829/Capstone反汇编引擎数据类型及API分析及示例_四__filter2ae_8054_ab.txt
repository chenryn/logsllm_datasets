            address = 0x1000;
            code = platforms[i].code;
            size = platforms[i].size;
            while (cs_disasm_iter(handle, &code, &size, &address, insn)) {
                int n;
                printf("0x%" PRIx64 ":\t%s\t\t%s",
                    insn->address, insn->mnemonic, insn->op_str);
                printf("            instruction:  %s", cs_insn_name(handle, insn->id));   //输出该行的操作指令
                cout groups数组。
handle: cs_open()返回的句柄  
insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构  
group_id: 要检查此指令是否属于的指令类型。  
return: 如果该指令确实属于给定的指令类型，则为true，否则为false。
代码实现  
示例(判断是否属于跳转指令)：
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
    };
    static void print_string_hex(unsigned char* str, size_t len)
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c address, insn->mnemonic, insn->op_str);
                cout regs_read数组。
insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构  
reg_id: 标注想要检查的这个指令是否使用了它。  
return: 如果该指令确实隐式使用了给定寄存器，则为true，否则为false。
代码实现  
示例同API cs_disasm_iter
### cs_reg_write
`bool CAPSTONE_API cs_reg_write(csh handle, const cs_insn *insn, unsigned int
reg_id);`
检查反汇编指令是否隐式修改了特定寄存器。
注意:此API仅在启用detail选项时有效(默认为关闭)  
在“diet”模式下，此API没有用，因为引擎不更新insn->regs_read数组。
insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构  
reg_id: 标注想要检查的这个指令是否修改了它。  
return: 如果该指令确实隐式修改了给定寄存器，则为true，否则为false。
代码实现  
示例同API cs_disasm_iter
### cs_op_count
`int CAPSTONE_API cs_op_count(csh handle, const cs_insn *insn, unsigned int
op_type);`
计算给定类型的操作数的数量。  
注意：只有当detail选项为ON时这个API可用 (默认OFF).
handle: cs_open()返回的句柄  
insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构  
op_type: 要找到的操作数类型。  
return: 指令insn中给定类型op_type的操作数的数量，返回-1表示查找失败。
代码实现
    int CAPSTONE_API cs_op_count(csh ud, const cs_insn *insn, unsigned int op_type)
    {
        struct cs_struct *handle;
        unsigned int count = 0, i;
        if (!ud)
            return -1;
        handle = (struct cs_struct *)(uintptr_t)ud;
        if (!handle->detail) {
            handle->errnum = CS_ERR_DETAIL;
            return -1;
        }
        if (!insn->id) {
            handle->errnum = CS_ERR_SKIPDATA;
            return -1;
        }
        if (!insn->detail) {
            handle->errnum = CS_ERR_DETAIL;
            return -1;
        }
        handle->errnum = CS_ERR_OK;
        switch (handle->arch) {
            default:
                handle->errnum = CS_ERR_HANDLE;
                return -1;
            case CS_ARCH_ARM:
                for (i = 0; i detail->arm.op_count; i++)
                    if (insn->detail->arm.operands[i].type == (arm_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_ARM64:
                for (i = 0; i detail->arm64.op_count; i++)
                    if (insn->detail->arm64.operands[i].type == (arm64_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_X86:
                for (i = 0; i detail->x86.op_count; i++)
                    if (insn->detail->x86.operands[i].type == (x86_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_MIPS:
                for (i = 0; i detail->mips.op_count; i++)
                    if (insn->detail->mips.operands[i].type == (mips_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_PPC:
                for (i = 0; i detail->ppc.op_count; i++)
                    if (insn->detail->ppc.operands[i].type == (ppc_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_SPARC:
                for (i = 0; i detail->sparc.op_count; i++)
                    if (insn->detail->sparc.operands[i].type == (sparc_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_SYSZ:
                for (i = 0; i detail->sysz.op_count; i++)
                    if (insn->detail->sysz.operands[i].type == (sysz_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_XCORE:
                for (i = 0; i detail->xcore.op_count; i++)
                    if (insn->detail->xcore.operands[i].type == (xcore_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_M68K:
                for (i = 0; i detail->m68k.op_count; i++)
                    if (insn->detail->m68k.operands[i].type == (m68k_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_TMS320C64X:
                for (i = 0; i detail->tms320c64x.op_count; i++)
                    if (insn->detail->tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_M680X:
                for (i = 0; i detail->m680x.op_count; i++)
                    if (insn->detail->m680x.operands[i].type == (m680x_op_type)op_type)
                        count++;
                break;
            case CS_ARCH_EVM:
    #if 0
                for (i = 0; i detail->evm.op_count; i++)
                    if (insn->detail->evm.operands[i].type == (evm_op_type)op_type)
                        count++;
    #endif
                break;
        }
        return count;
    }
拿x86指令操作码类型举例
    typedef enum x86_op_type {
        X86_OP_INVALID = 0, ///
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
    };
    static void print_string_hex(unsigned char* str, size_t len)
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c address, insn->mnemonic, insn->op_str);
                cout .operands[]`数组中的位置, 使用返回的位置访问操作数。  
注意：只有当detail选项为ON时这个API可用 (默认OFF).
handle: cs_open()返回的句柄  
insn: 从cs_disasm()或cs_disasm_iter()接收的反汇编指令结构  
op_type: 要找到的操作数类型。  
position: 要查找的操作数的位置。范围一定在`[1, cs_op_count(handle, insn, op_type)]`内  
return: 指令insn的`.operands[]`数组中给定类型op_type的操作数的索引，失败时返回-1。
代码实现
    int CAPSTONE_API cs_op_index(csh ud, const cs_insn *insn, unsigned int op_type,
            unsigned int post)
    {
        struct cs_struct *handle;
        unsigned int count = 0, i;
        if (!ud)
            return -1;
        handle = (struct cs_struct *)(uintptr_t)ud;
        if (!handle->detail) {
            handle->errnum = CS_ERR_DETAIL;
            return -1;
        }
        if (!insn->id) {
            handle->errnum = CS_ERR_SKIPDATA;