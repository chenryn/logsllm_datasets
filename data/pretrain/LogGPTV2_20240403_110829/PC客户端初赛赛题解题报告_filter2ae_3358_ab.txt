      v45 = 0;
      LOBYTE(lpMem) = 0;
      gl_init_str(&lpMem, "texture2", 8u);
      v109 = 1;
      v11 = &lpMem;
      if ( v46 >= 0x10 )
        v11 = lpMem;
      v12 = glGetUniformLocation(v8, v11, 1);
      glUniform1i(v12);
      v109 = -1;
      sub_407420(&lpMem);
      if ( !sub_419650((int)window) )
      {
        _libm_sse2_tan_precise();
        v41 = 0;
        *(float *)&v43 = 1.0 / (float)0.3926990926265717;
        v62 = 1.0 / (float)((float)0.3926990926265717 * 1.3333334);
        do
        {
          flt_465FBC = glfwGetTime();
          if ( sub_419920((int)window, 256) == 1 )
            sub_419370((int)window, 1);
          glClearColor(1045220557, 1050253722, 1050253722, 1065353216);
          glClear(16640);
          glActiveTexture(33984);
          glBindTexture(3553, v61);
          glActiveTexture(33985);
          glBindTexture(3553, v60);
          glUseProgram(v8);
          sub_409640(&v41);
          v47 = v62;
          v48 = v43;
          v50 = 0xBF800000;
          v49 = 0xBF80419A;
          v51 = 0xBE4D0148;
          v46 = 15;
          v45 = 0;
          LOBYTE(lpMem) = 0;
          gl_init_str(&lpMem, "projection", 0xAu);
          v109 = 2;
          v13 = &lpMem;
          if ( v46 >= 0x10 )
            v13 = lpMem;
          v14 = glGetUniformLocation(v8, v13, 1);
          glUniformMatrix4fv(v14);
          v109 = -1;
          if ( v46 >= 0x10 )
          {
            v15 = (char *)lpMem;
            if ( v46 + 1 >= 0x1000 )
            {
              if ( (unsigned __int8)lpMem & 0x1F
                || (v16 = *((_DWORD *)lpMem - 1), v16 >= (unsigned int)lpMem)
                || (v15 = (char *)lpMem - v16, (char *)lpMem - v16  0x23 )
              {
    LABEL_53:
                _invalid_parameter_noinfo_noreturn(v15);
              }
              v15 = (char *)*((_DWORD *)lpMem - 1);
            }
            j_j___free_base(v15);
          }
          v35 = *(float *)&dword_464CC4 + *(float *)&qword_464CAC;
          v36 = *(float *)&dword_464CC8 + *((float *)&qword_464CAC + 1);
          v37 = *(float *)&dword_464CCC + *(float *)&dword_464CB4;
          sub_4092A0(&v35);
          v46 = 15;
          v45 = 0;
          LOBYTE(lpMem) = 0;
          gl_init_str(&lpMem, "view", 4u);
          v109 = 3;
          v17 = &lpMem;
          if ( v46 >= 0x10 )
            v17 = lpMem;
          v18 = glGetUniformLocation(v8, v17, 1);
          glUniformMatrix4fv(v18);
          v109 = -1;
          if ( v46 >= 0x10 )
          {
            v15 = (char *)lpMem;
            if ( v46 + 1 >= 0x1000 )
            {
              if ( (unsigned __int8)lpMem & 0x1F )
                goto LABEL_53;
              v19 = *((_DWORD *)lpMem - 1);
              if ( v19 >= (unsigned int)lpMem )
                goto LABEL_53;
              v15 = (char *)lpMem - v19;
              if ( (char *)lpMem - v19  0x23 )
                goto LABEL_53;
              v15 = (char *)*((_DWORD *)lpMem - 1);
            }
            j_j___free_base(v15);
          }
          v46 = 15;
          v45 = 0;
          LOBYTE(lpMem) = 0;
          glBindVertexArray(v63);
          v20 = 0;
          v21 = dword_46601C;
          if ( (dword_466020 - (signed int)dword_46601C) >> 2 )
          {
            v32 = 0x3F800000;
            v33 = 0x3E99999A;
            v34 = 0x3F000000;
            do
            {
              v22 = v21[v20 + 1];
              v23 = v21[v20 + 2];
              v56 = v21[v20];
              v57 = v22;
              v58 = v23;
              sub_407F30(&v52);
              v25 = (__int128 *)sub_4086F0(v24, (__m128 *)&v31, (float *)&v56);
              v52 = *v25;
              v53 = v25[1];
              v54 = v25[2];
              v55 = v25[3];
              v26 = (__int128 *)sub_408850(&v32);
              v40 = 15;
              v39 = 0;
              LOBYTE(v38) = 0;
              v52 = *v26;
              v53 = v26[1];
              v54 = v26[2];
              v55 = v26[3];
              gl_init_str(&v38, "model", 5u);
              v109 = 4;
              v27 = &v38;
              if ( v40 >= 0x10 )
                v27 = v38;
              v28 = glGetUniformLocation(v8, v27, 1);
              glUniformMatrix4fv(v28);
              v109 = -1;
              if ( v40 >= 0x10 )
              {
                v15 = (char *)v38;
                if ( v40 + 1 >= 0x1000 )
                {
                  if ( (unsigned __int8)v38 & 0x1F )
                    goto LABEL_53;
                  v29 = *((_DWORD *)v38 - 1);
                  if ( v29 >= (unsigned int)v38 )
                    goto LABEL_53;
                  v15 = (char *)v38 - v29;
                  if ( (char *)v38 - v29  0x23 )
                    goto LABEL_53;
                  v15 = (char *)*((_DWORD *)v38 - 1);
                }
                j_j___free_base(v15);
              }
              v40 = 15;
              v39 = 0;
              LOBYTE(v38) = 0;
              glDrawArrays(4, 0, 36);
              v20 += 3;
              v21 = dword_46601C;
            }
            while ( v20 > 2 );
          }
          sub_418D80((int)window);
          sub_419310();
        }
        while ( !sub_419650((int)window) );
      }
      glDeleteVertexArrays(1, &v63);
      glDeleteBuffers(1, &v59);
      glfwTerminate();
      return 0;
    }
其中，游戏使用sub_407120监听鼠标移动事件：
    float __usercall sub_407120@(int a1, double a2, double a3)
    {
      int v3; // xmm3_4
      int v4; // xmm4_4
      float v5; // xmm0_4
      float v6; // xmm2_4
      float v7; // xmm1_4
      float v8; // xmm2_4
      float v9; // xmm2_4
      float v10; // xmm1_4
      int v11; // xmm0_4
      int v12; // xmm0_4
      float v13; // xmm1_4
      signed int v14; // xmm0_4
      float v15; // ST0C_4
      float v16; // ST10_4
      float v17; // ST08_4
      double v18; // xmm0_8
      __m128 v19; // xmm1
      __m128 v20; // xmm2
      __m128 v21; // xmm0
      float result; // eax
      float v23; // [esp+0h] [ebp-1Ch]
      if ( byte_464C90 )
      {
        *(float *)&v3 = a2;
        byte_464C90 = 0;
        *(float *)&v4 = a3;
        v5 = *(float *)&v3;
        dword_464C98 = v3;
        v6 = *(float *)&v4;
        dword_464C9C = v4;
        dword_466018 = v3;
        dword_46602C = v4;
      }
      else
      {
        v3 = dword_464C98;
        v4 = dword_464C9C;
        v5 = *(float *)&dword_466018;
        v6 = *(float *)&dword_46602C;
      }
      v7 = (float)((float)(a2 - v5) * 0.1) + *(float *)&dword_465FF0;
      v8 = v6 - a3;
      v9 = (float)(v8 * 0.1) + *(float *)&dword_466028;
      if ( (v7 >= 70.0 || v7 = -110.0 && v9 = -30.0 )
      {
        v10 = *(float *)&v4 - a3;
        *(float *)&v11 = a2;
        dword_464C98 = v11;
        *(float *)&v12 = a3;
        v13 = (float)(v10 * 0.1) + *(float *)&dword_465FB8;
        dword_464C9C = v12;
        v14 = 1118961664;
        v23 = (float)((float)(a2 - *(float *)&v3) * 0.1) + *(float *)&dword_464C94;
        *(float *)&dword_464C94 = (float)((float)(a2 - *(float *)&v3) * 0.1) + *(float *)&dword_464C94;
        dword_465FB8 = LODWORD(v13);
        if ( v13 > 89.0 || (v14 = -1028521984, v13 = 70.0 || v7 = -110.0 && v9 = -30.0 )
此外，通过分析代码，不难发现dword_464CC4、dword_464CC8、qword_464CAC这三个全局变量就代表了view矩阵中的视角所在的坐标位置。
## 解题
### 视角限制
通过ida的keypatch插件，可以很轻松的将该处逻辑限制去掉，使其无论如何都jmp到视角移动代码处即可
### 坐标移动
我们已经知道可以通过修改上述的三个全局变量进行坐标移动，为了看清箭头所指区域，我们需要移动到一个合适的位置和视角，但我们并不知道哪里才是合适的位置，所以我制作了一个游戏作弊程序，方便我们人工的找到这个位置，这个任务使用Cheat
Engine来完成最合适不过了，这样节省了很多编写作弊程序代码的时间，附件给出了我制作的ct作弊脚本。我注册了w、a、s、d、q、e六个热键分别控制x、y、z方向上的坐标移动。
## flag
最终我找到了如下坐标，能够较为清楚的看清箭头所指区域，即flag:dogod