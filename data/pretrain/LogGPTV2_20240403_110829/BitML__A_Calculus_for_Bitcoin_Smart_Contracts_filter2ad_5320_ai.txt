(1) if λs = (Ai , j), then Rs αj−−→, where Λs
(2) otherwise, Rs λs−−→.
We now characterise the runs obtained under an adversary with
strategy Σs
taking as input the outputs of the participant strate-
gies. This notion, called conformance, also involves a randomness
source, fed as input to the strategies.
Definition 12 (Symbolic conformance). Let Σs be a set of sym-
bolic strategies, comprising those of honest participants A1, . . . , Ak
and of the adversary, and let r be a randomness source. We say that
a symbolic run Rs conforms to (Σs, r ) when one of the following
conditions hold:
(1) Rs = Γ | 0, with Γ initial;
(2)
˙Rs α−→ Rs, where ˙Rs conforms to (Σs, r ), and, given Λs
i
(strip( ˙Rs ), rAi ) for all i ∈ 1..k and ⃗Λs∗ = strip(Λs1 · · · Λs
k ),
Σs
Ai
Adv (strip( ˙Rs ), rAdv , ⃗Λs∗ ) then λs = α, or λs = (Ai , j)
if λs = Σs
for α = αj and Λs
i
If Σs does not comprise the adversary strategy, we say that Rs
conforms to (Σs, r ) when there exists some strategy Σs
such that
⋄
Rs conforms to (ΣsΣs
= α1 · · · αm.
Adv
=
Adv , r ).
A.4 Supplementary material for Section 6
Key pairs. We associate each A with two key pairs: These key
pairs are generated through rA, if A ∈ Hon. We write KA (rA ),
ˆKA (rA ) for the key pairs generated using the first 2η bits of rA.
For the participants not in Hon, denoted with B1, . . . , Bk, we write
KBi (rAdv ), ˆKBi (rAdv ) for the key pairs generated from rAdv . Given
any key pair K, we denote with Kp its public part, and with Ks its
private part.
Security parameter. Our model uses PPTIME algorithms w.r.t.
a security parameter η ∈ N. We extend the randomness source
also to O, assuming rO ∈ {0, 1}ω to be defined. For simplicity, we
assume that all communications (except those involving O) are
(reliable) broadcasts. The security parameter η is such that: (i) H (m)
comprises η random bits. (ii) the i-th key pair is generated using
the i-th 2η bits from rAdv.
Definition 13 (Computational runs). Let r be a randomness
source. A computational run Rc is a finite sequence of computa-
tional labels, beginning with a prefix Rc0 such as:
T0 · · · Ai → ∗ : (K
· · · Bj → ∗ : (K
(rAi ), ˆK
p
Ai
(rAdv ), ˆK
p
Bj
(rAi )) · · ·
(rAdv )) · · ·
p
Ai
p
Bj
(∀Ai ∈ Hon)
(∀Bj (cid:60) Hon)
where T0 is a coinbase transaction, and for each participant P (hon-
est or dishonest), there exists an output of T0 redeemable with the
private key ˆKs
. We say that the run Rc0 is initial. We denote with
P
⋄
δRc the sum of all the delays in Rc.
) represent a broadcast of Pi’s
p
Pi
The labels Pi → ∗ : (K
public keys (of both kinds) to all participants.
Definition 14 (Stripping of computational runs). For each
computational run Rc and participant A ∈ Part ∪ {Adv}, we define
, ˆK
p
Pi
19
stripA (Rc ) as the computational run obtained from Rc by replacing
each label λc with stripA (λc ), defined as follows:
stripA (λc ) =
if λc = B → O : m, with B (cid:44) A
if λc = O → B : m, with B (cid:44) A
otherwise
⋄
ϵ
ϵ
λc
Borrowing from [16], we write B ▷ (T, t ) when (T, t ) consistently
updates B.
Definition 15 (Blockchain of a computational run). For each
Rc, we define the blockchain BRc inductively as follows:
if λc = T
otherwise
BRc (T, δRc )
BT0 = (T0, 0)
BRc λc =
BRc
⋄
Definition 16 (Computational participant strategies). The com-
putational strategy of a participant A ∈ Hon is a PPTIME algorithm
A (Rc∗ , rA ), taking as input a (A-stripped) computational run Rc∗
Σc
and a random sequence rA. The output is a finite set Λc of compu-
tational labels, such that if λc ∈ Λc, then one of the following items
holds:
(1) λc = A → ∗ : m or λc = A → O : m , for some m;
(2) λc = T, where BRc∗ ▷ (T, δRc∗ ), where in Rc∗ we can find (in
this order): (i) all the inputs of T; (ii) a message B → ∗ : T,
for some B; (iii) for each witness w in T, a message B → ∗ : w,
for some B.
(3) λc = δ.
{T ∈ Λc
We further require that participant strategies are persistent: i.e.,
if Λc = Σc
A (Rc∗ , rA ), then for all λc such that BRc∗ λc is consistent,
A (Rc∗λc , rA ) includes the computational labels:
Σc
| BRc∗ λc ▷ (T, δRc∗ λc )} ∪
(cid:8)A → ∗ : m ∈ Λc (cid:12)(cid:12) (A → ∗ : m) (cid:44) λc(cid:9) ∪
(cid:8)A → O : m ∈ Λc (cid:12)(cid:12) (A → O : m) (cid:44) λc(cid:9)
⋄
Persistency ensures that, if A at a certain point wants to perform
some λc (sending m or putting T on the blockchain), she cannot
change her mind in the future, until λc is performed. Condition (2)
requires that, before being able to append T, one has to make both T
and its witnesses public. This models the fact that, before T actually
appears on the blockchain, it has to be broadcast on the Bitcoin
network, potentially enabling an adversary to know T beforehand.
Definition 17 (Computational adversary strategies). A com-
putational adversary strategy is a PPTIME algorithm Σc
taking as input a (Adv-stripped) computational run Rc∗, a random
sequence rAdv, and a list ⃗Λc of sequences of moves of each Ai ∈
Hon = {A1, . . . , Ak}. The output is a single computational label λc
such that if Σc
Adv (Rc∗ , rAdv , ⃗Λc ) = λc, one of the following holds:
(1) λc = A → ∗ : m or λc = Adv → O : m, for some m, A;
(2) λc = T, where BRc∗ ▷ (T, δRc∗ ), where in Rc∗ we can find (in
this order): (i) all the inputs of T; (ii) a message B → ∗ : T,
for some B; (iii) for each witness w in T, a message B → ∗ : w,
for some B.
⋄
(3) λc = δ, where ∀i ≤ k :(cid:16)
= ∅ or ∃δi ∈ Λc
: δi ≥ δ
(cid:17).
Λc
i
i
Adv (Rc∗ , rAdv , ⃗Λc ),
Note that (1) allows Adv to impersonate any A, to use either A’s
messages in Λc, or self-produced ones. The other cases allow Adv to
(consistently) extend the blockchain, and to delay (if all the honest
participants agree).
Given a set of strategies Σc for all the honest participants and
for the adversary, and a randomness source r, we now define which
runs Rc can result from making everyone interact. Such runs are
said to conform to (Σc, r ).
Definition 18 (Computational conformance). Let Σc be a set of
computational strategies, including those of the honest participants
A1, . . . , Ak and of the adversary, and let r be a randomness source.
We say that a computational run Rc pre-conforms to (Σc, r ) if one
of the following conditions holds:
k
=
, Λc
i
(1) Rc is initial;
(2) Rc = ˙Rc λc, where ˙Rc pre-conforms to (Σc, r ), and λc =
(3) Rc = ˙Rc (Adv → O : m)(O → Adv : hm ), where ˙Rc pre-conforms
Adv (stripAdv ( ˙Rc ), rAdv , ⃗Λc ), where ⃗Λc = Λc1 · · · Λc
Σc
(stripAi ( ˙Rc ), rAi ), O not occurring in ⃗Λc, λc.
Σc
Ai
to (Σc, r ), and Σc
where ⃗Λc = Λc1 · · · Λc
k
does not occur in ⃗Λc.
Adv (stripAdv ( ˙Rc ), rAdv , ⃗Λc ) = Adv → O : m,
(stripAi ( ˙Rc ), rAi ), and O
: hm ), where ˙Rc pre-
(stripAi ( ˙Rc ), rAi ), and (Aj →
conforms to (Σc, r ), Λc
i
O : m) is the first occurrence of a query to the oracle in
Λc1 · · · Λc
= Σc
Ai
(4) Rc = ˙Rc (Aj → O : m)(O → Aj
= Σc
Ai
, Λc
i
.
k
conforming to (Σc, r ).
Further, in both Items 3 and 4, given n the number of distinct
queries to O in Rc, we require that if m was already requested, then
hm is its reply in ˙Rc; otherwise, hm is the portion of rO of length η
starting from nη.
We say that Rc conforms to (Σc, r ) if Rc is a prefix of a run pre-
⋄
Above, in Items 3 and 4 we handle the queries to O, modelling
the hash functionality as in the random oracle model. We let queries
have higher priority than other actions.
Lemma 5. Let Σc be a set of computational strategies for the honest
participants and for the adversary, and let r be a randomness source.
There exist exactly one maximal run Rc which conforms to (Σc, r ).
A.5 Supplementary material for Section 7
We compile a contract advertisement {G}C into a sequence of stan-
dard Bitcoin transactionsOur compiler relies on the following pa-
rameters, which depend on G and C:
ipants (e.g., part(x ) = A if A:? v @ x in G);
• PartG is the set of all participants occurring in G;
• part maps deposit names in G to the corresponding partic-
• txout maps deposit names in G to the corresponding Bit-
• val maps deposit names in G to the value contained in the
• sechash maps secret names in G to the corresponding com-
deposit (e.g., val(x ) = v if A:? v @ x in G);
coin transaction output (T, o);
mitted hashes.
Further, we assume that participants generate the following key
pairs, and exchange their public parts:
20
C =(cid:80)
• K(A), for each A ∈ PartG;
• K(D , A), for each subterm D of C, and each A ∈ PartG.
For a set of participants P = {A1, . . . , An}, we denote with
K(D , P ) the set of key pairs {K(D , A1), . . . , K(D , An )}.
Definition 19 (BitML compiler). The function Badv (·) from con-
tract advertisements to sequences of Bitcoin transactions is defined
⋄
by the rules in Figure 7.
The function Badv produces all the transactions for {G}C. In
particular, Tinit will be the first to be put on the blockchain, rep-
resenting the stipulation of C. Function BC assigns to a contract
i Di a transaction TC , which can be redeemed only by using
the keys of the subterms Di of C. The functions BD and Bout handle
the possible actions of each D. The action split is handled by Bpar.
We provide more intuition through an example.
Example 2. We compile the timed commitment {G}TC of Section 2,
where G = A:! v @ x | A:secret a | B:! 0 @ y, and C = D1 + D2,
with D1 = reveal a . withdraw A and D2 = after t : withdraw B.
Assume that: A ∈ Hon, txout(x ) = (TA , 0) for some TA whose
output 0 has value v and is redeemable by A, sechash(a ) = ha ,
val(x ) = v. Similarly, for B: txout(y) = (TB , 0), and val(y ) = 0.
The compiler produces Badv ({G}C ) = TinitT1T2, where:
T1 = BD (D1, D1, Tinit, 0, v, {A, B}, 0)
= BC (withdraw A, D1, Tinit, 0, v, ∅, {A, B}, 0)
= T′BD (withdraw A, withdraw A, T′
, 0, v, {A, B}, 0) = T′T′
A
T2 = BD (D2, D2, Tinit, 0, v, {A, B}, 0)
= BD (withdraw B, D2, Tinit, 0, v, {A, B}, t ) = T′
The obtained transactions are in Figure 8, where:
B
e1 = Bout (D1)
= versigK(D1,{A,B}) (ςAςB ) ∧ H(b ) = ha ∧ |b | ≥ η
e2 = Bout (D2) = versigK(D2,{A,B}) (ςAςB )
e′ = Bout (withdraw A ) = versigK(withdraw A ,{A,B}) (ςAςB )
For the sake of readability we do not use distinct variables for dif-
ferent signatures of the same participant. The participants start by
generating the transactions off chain, and exchanging the signa-
tures shown in Figure 8. Doing this, A commits to her secret, whose
hash ha occurs in the output script Tinit .out. After that, both A and
B sign Tinit, and put it on the ledger, stipulating the contract. The
transaction Tinit can be redeemed either by T′ or by T′
. In the first
case, T′ has to add to her witness a value a such that H (a ) = ha and
|a| ≥ η. After that, A can redeem her deposit (now in T′) by putting
T′
on the blockchain. In the second case, Tinit can be redeemed by
T′
: however, this transaction can be put on the blockchain only
after t, because of the timelock in T′
⋄
A
B
B