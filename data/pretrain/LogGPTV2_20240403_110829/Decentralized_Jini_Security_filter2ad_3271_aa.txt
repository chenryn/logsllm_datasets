# Decentralized Jini Security
**Authors:** Pasi Eronen and Pekka Nikander  
**Affiliation:** Helsinki University of Technology  
**Emails:** pasi.eronen@hut.fi, pekka.nikander@hut.fi

## Abstract
Jini technology offers a promising approach to addressing the fundamental challenges in distributed computing. Applications built using Jini principles can adapt to highly dynamic network environments. However, current Jini technology and underlying Java security solutions do not adequately address the security issues that arise in large-scale deployments. Existing solutions either rely on specific communication protocols, compromising Jini's protocol independence, or depend on centralized security servers, which negate the ad hoc nature of Jini.

In this paper, we present our research results that form the foundation for a fully decentralized and comprehensive Jini security architecture. We describe an experimental implementation that separates Java 2 access permissions for Jini clients, service proxies, and services, while enabling natural delegation of Java 2 permissions between Jini-enabled devices. Our solution seamlessly integrates with the Java 2 security model, allowing all Jini benefits to be utilized securely.

## 1. Introduction
Distributed computing fundamentally differs from centralized computing, with key differences including latency, memory access, partial failures, and concurrency. Security is another critical difference, as distributed systems require cryptography, whereas centralized systems may not. Many approaches to distributed computing attempt to mask these issues, but Jini aims to provide tools and methods to effectively address them, enabling software to survive in distributed environments.

These differences are particularly evident in future ad hoc networks and loosely coupled systems, which are inherently decentralized. In such systems, there are no centralized services, and all network services are configured and created on the fly. While the underlying security mechanisms remain similar to those in centralized systems, the trust and infrastructure assumptions change, necessitating different solutions.

This paper presents a fully decentralized network security architecture for Jini, along with a prototype implementation. The architecture builds on our previous work in trust management and distributed Jini security. It integrates with the Java 2 security model, augmenting and utilizing the security services provided by the Java 2 security architecture and the Java Socket Security Extension (JSSE). Future work will focus on integrating our extensions with the Java Authentication and Authorization Service (JAAS) and the RMI Security Extension. Our solution is fully compatible with Jini, does not require centralized security services, and clearly distinguishes between the access rights of client applications and service proxies, providing a means to delegate Java 2 security permissions.

The rest of the paper is organized as follows: Section 1.1 introduces decentralized trust management, and Section 1.2 provides an overview of the Jini architecture. Section 2 outlines the security requirements and design aspects for Jini. Section 3 discusses our design choices and the architecture of our solution. Section 4 describes the implementation, including performance measurements. Section 5 reviews related work, and Section 6 evaluates our approach. Finally, Section 7 presents our conclusions.

### 1.1 Decentralized Trust Management
Traditionally, security has been based on identity authentication and locally stored access control lists (ACLs), even in distributed systems. However, this approach has several drawbacks, such as the difficulty of protecting operations needed for managing ACLs remotely. Blaze et al. argue that identity-based public-key systems combined with ACLs are inadequate for distributed and programmable system-security problems.

An alternative solution, known as trust management, uses a set of unified mechanisms to specify both security policies and credentials. Trust management typically involves signed statements (certificates) about what principals (users) are allowed to do, rather than traditional name certificates. Examples of trust management systems include PolicyMaker, KeyNote, KeyNote2, and SPKI, with its applications like TeSSA.

### 1.2 Introduction to Jini
Jini provides a set of basic building blocks for distributed applications, including distributed events, transactions, leases, and downloadable proxies. These components do not hide the unreliability of networks and encourage the development of more fault-tolerant applications.

The core of Jini is the lookup service, a directory where service providers register and clients search for services. When a service registers, it receives a lease with an expiration date. If the service does not renew the lease, the registration is automatically removed. The lookup service is similar to other service location protocols like Salutation, SLP, and UPnP, but it is protocol-independent, relying on dynamic Java class loading instead of a specific communication protocol.

Communication in Jini goes through proxies, which are local objects implementing well-known interfaces. Proxies can be simple RMI stubs or implement part of the functionality themselves. Some services do not require network communication, in which case the proxy alone implements the service. This flexibility allows proxies to communicate with legacy devices and resource-constrained embedded devices, though clients must have their own Java virtual machines.

### 1.3 Proxies and Security
Protocol independence introduces new security challenges. Jini relies on standard Java security facilities to protect the client JVM from malicious proxy code, but these are insufficient. Since all communication goes through downloaded proxy objects, traditional security methods often need adaptation. For example, TLS supports client and server authentication using X.509 certificates, but this does not help determine if a proxy is trustworthy. A trust management system supporting delegation could elegantly address this problem.

## 2. Requirements for Jini Security
When discussing Jini security, we must first define the required security functionality. This depends on the use case and the involved trust relationships. We focus on client-server interactions through proxies, leaving the security aspects of distributed events, leases, and transactions for future work.

We have identified the following requirements:
- **Principal Authentication:** Clients should verify they are communicating with the correct service and proxy, and services should verify the client's identity.
- **Secure Principal Attributes:** Human-readable names and attributes like security levels and ownership are required for authentication.
- **Service Access Control:** Services should allow or deny operations based on principal authentication, capabilities, and other circumstances.
- **Protection from Applications:** Untrusted applications running in the client JVM should not access services with the user's privileges.
- **Protection from Proxies:** Downloaded proxy code needs controlled permissions, and some proxies may require more permissions than others.

On a lower level, message confidentiality, integrity, replay prevention, and perfect forward secrecy are also desirable. These are widely known and not further discussed here.

### 2.1 Other Design Aspects
The above requirements leave room for various design choices. These choices will affect the applicability of the solution. Key design aspects include:
- **Centralization:** Does the architecture rely on centralized servers or authorities? Centralized security can simplify administration in large networks but is unsuitable for mobile ad hoc networks.
- **Trusted Components:** Does the system rely on the security of the lookup service or other online security servers?
- **Protocol Independence:** Is the solution tied to a specific transport protocol? Fixed protocols can be implemented using trusted code, simplifying the security situation.
- **Service Access Control Model:** How flexible and fine-grained is the access control mechanism? What kinds of policies can it support?

These design aspects will be further explored in the next section, along with the reasons behind our choices.