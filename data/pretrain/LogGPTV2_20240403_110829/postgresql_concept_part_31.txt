tionfuncname()isnotfound.
Description
UsingCREATELANGUAGE,aPostgresusercanregisteranewlanguagewithPostgres. Sub-
sequently,functions andtriggerprocedurescanbe definedin this newlanguage. The usermust
havethePostgressuperuserprivilegetoregisteranewlanguage.
290 APPENDIXD. REFERENCEMANUAL
WritingPL handlers
The call handler for a procedural language must be written in a compiler language such as C
andregisteredwithPostgresasafunction takingnoargumentsandreturningtheopaquetype,a
placeholder for unspecifiedor undefinedtypes. This prevents the callhandler from being called
directlyasafunctionfromqueries.
However,argumentsmustbesuppliedontheactualcallwhenaPLfunctionortriggerprocedure
inthelanguageofferedbythehandleristobeexecuted.
• When calledfrom the trigger manager, the only argument is the object ID from the proce-
dure’spg_procentry. Allotherinformationfrom thetriggermanagerisfoundintheglobal
CurrentTriggerDatapointer.
• Whencalledfromthefunctionmanager,theargumentsaretheobjectIDoftheprocedure’s
pg_proc entry, the number of arguments given to the PL function, the arguments in a
FmgrValues structure, and a pointer to a boolean where the function tells the caller if the
returnvalueistheSQLNULLvalue.
It’suptothecallhandlertofetchthepg_procentryandtoanalyzetheargumentandreturntypes
of the called procedure. The AS clause from the CREATE FUNCTION of the procedure will
be found in the prosrc attribute of the pg_proc table entry. This may be the source text in the
procedurallanguageitself(likeforPL/Tcl),apathnametoafile,oranythingelsethattellsthecall
handlerwhattodoindetail.
Notes
UseCREATEFUNCTIONtocreateafunction.
UseDROPLANGUAGEtodropprocedurallanguages.
Refertothetablepg_languageforfurtherinformation:
Table "pg_language"
Attribute | Type | Modifier
---------------+---------+----------
lanname | name |
lanispl | boolean |
lanpltrusted | boolean |
lanplcallfoid | oid |
lancompiler | text |
lanname | lanispl | lanpltrusted | lanplcallfoid | lancompiler
----------+---------+--------------+---------------+-------------
internal | f | f | 0 | n/a
D.17. CREATELANGUAGE 291
C | f | f | 0 | /bin/cc
sql | f | f | 0 | postgres
SincethecallhandlerforaprocedurallanguagemustberegisteredwithPostgresintheClanguage,
itinheritsallthecapabilitiesandrestrictionsofCfunctions.
At present, the definitionsfor a procedurallanguagecannot be changedonce they havebeen
created.
Usage
ThisisatemplateforaPLhandlerwritteninC:
#include "executor/spi.h"
#include "commands/trigger.h"
#include "utils/elog.h"
#include "fmgr.h" /* for FmgrValues struct */
#include "access/heapam.h"
#include "utils/syscache.h"
#include "catalog/pg_proc.h"
#include "catalog/pg_type.h"
Datum
plsample_call_handler(
Oid prooid,
int pronargs,
FmgrValues *proargs,
bool *isNull)
{
Datum retval;
TriggerData *trigdata;
if (CurrentTriggerData == NULL) {
/*
* Called as a function
*/
retval = ...
} else {
/*
* Called as a trigger procedure
*/
trigdata = CurrentTriggerData;
CurrentTriggerData = NULL;
retval = ...
292 APPENDIXD. REFERENCEMANUAL
}
*isNull = false;
return retval;
}
Only a few thousand lines of code have to be added instead of the dots to complete the PL call
handler. SeeCREATEFUNCTIONforinformationonhowtocompileitintoaloadablemodule.
Thefollowingcommandsthenregisterthesampleprocedurallanguage:
CREATE FUNCTION plsample_call_handler () RETURNS opaque
AS ’/usr/local/pgsql/lib/plsample.so’
LANGUAGE ’C’;
CREATE PROCEDURAL LANGUAGE ’plsample’
HANDLER plsample_call_handler
LANCOMPILER ’PL/Sample’;
Compatibility
SQL92
CREATELANGUAGEisaPostgresextension. ThereisnoCREATELANGUAGEstatement
inSQL92.
D.18 CREATE OPERATOR
Name
CREATEOPERATOR—Definesanewuseroperator
CREATEOPERATORname(
PROCEDURE=func_name
[,LEFTARG=type1]
[,RIGHTARG=type2]
[,COMMUTATOR=com_op]
[,NEGATOR=neg_op]
[,RESTRICT=res_proc]
[,JOIN=join_proc]
[,HASHES]
[,SORT1=left_sort_op]
[,SORT2=right_sort_op])
D.18. CREATEOPERATOR 293
Inputs
name Theoperatortobedefined. Seebelowforallowablecharacters.
func_name Thefunctionusedtoimplementthisoperator.
type1 Thetypeoftheleft-handargumentoftheoperator,ifany. Thisoptionwouldbeomittedfor
aleft-unaryoperator.
type2 Thetypeoftheright-handargumentof theoperator, ifany. Thisoption wouldbeomitted
foraright-unaryoperator.
com_op Thecommutatorofthisoperator.
neg_op Thenegatorofthisoperator.
res_proc Therestrictionselectivityestimatorfunctionforthisoperator.
join_proc Thejoinselectivityestimatorfunctionforthisoperator.
HASHES Indicatesthisoperatorcansupportahashjoin.
left_sort_op Ifthisoperatorcansupportamergejoin, theoperatorthatsortstheleft-handdata
typeofthisoperator.
right_sort_op If this operator can support a merge join, the operator that sorts the right-hand
datatypeofthisoperator.
Outputs
CREATE Messagereturnediftheoperatorissuccessfullycreated.
Description
CREATEOPERATORdefinesanewoperator,name. Theuserwhodefinesanoperatorbecomes
itsowner.
TheoperatornameisasequenceofuptoNAMEDATALEN-1(31bydefault)charactersfrom
thefollowinglist:
+ - * /  = ˜ ! @ # % ˆ & | ‘ ? $ :
Thereareafewrestrictionsonyourchoiceofname:
• "$" and ":" cannot be defined as single-character operators, although they can be part of a
multi-characteroperatorname.
294 APPENDIXD. REFERENCEMANUAL
• "–"and"/*"cannotappearanywhereinanoperatorname,sincetheywillbetakenasthestart
ofacomment.
• Amulti-characteroperatornamecannotendin "+"or "-", unlessthenamealsocontainsat
leastoneofthesecharacters:
˜ ! @ # % ˆ & | ‘ ? $ :
Forexample,@-isanallowedoperatorname,but*-isnot. ThisrestrictionallowsPostgres
toparseSQL-compliantquerieswithoutrequiringspacesbetweentokens.
Note: When workingwith non-SQL-standardoperator names, you will usuallyneedto separate
adjacentoperators with spacesto avoid ambiguity. For example, if you havedefinedaleft-unary
operatornamed"@",youcannotwriteX*@Y;youmustwriteX*@YtoensurethatPostgresreads
itastwooperatornamesnotone.
Theoperator"!="ismappedto"<>"oninput,sothesetwonamesarealwaysequivalent.
AtleastoneofLEFTARGandRIGHTARGmustbedefined. Forbinaryoperators,bothshould
be defined. For right unary operators, only LEFTARG should be defined, while for left unary
operatorsonlyRIGHTARGshouldbedefined.
The func_name procedure must have been previously defined using CREATE FUNCTION
andmustbedefinedtoacceptthecorrectnumberofarguments(eitheroneortwo)oftheindicated
types.
The commutator operator should be identifiedif one exists, so thatPostgres canreversethe
orderoftheoperandsifitwishes. Forexample,theoperatorarea-less-than,>>. Hence, thequeryoptimizercouldfreely
convert:
box ’((0,0), (1,1))’ >>> MYBOXES.description
to
MYBOXES.description <<< box ’((0,0), (1,1))’.
Thisallowstheexecutioncodetoalwaysusethelatterrepresentationandsimplifiesthequery
optimizersomewhat.
Similarly,ifthereisanegatoroperatorthenitshouldbeidentified. Supposethatanoperator,
area-equal, ===, exists, as well as an area not equal, !==. The negator link allows the query
optimizertosimplify
NOT MYBOXES.description === box ’((0,0), (1,1))’
to
MYBOXES.description !== box ’((0,0), (1,1))’.
Ifacommutatoroperatornameissupplied,Postgressearchesforitinthecatalog. Ifitisfound
anditdoesnotyethaveacommutatoritself,thenthecommutator’sentryisupdatedtohavethe
newly createdoperator as its commutator. This applies to the negator, as well. This is to allow
thedefinitionof twooperatorsthatarethe commutators orthenegatorsofeachother. Thefirst
operator should be definedwithout a commutator or negator (as appropriate). When the second
D.18. CREATEOPERATOR 295
operator is defined, name the first as the commutator or negator. The first will be updated as a
sideeffect. (AsofPostgres6.5,italsoworkstojusthavebothoperatorsrefertoeachother.)
The HASHES, SORT1, and SORT2 options are present to support the query optimizer in
performing joins. Postgres can always evaluate a join (i.e., processing a clause with two tuple
variablesseparatedbyanoperatorthatreturnsaboolean)byiterativesubstitution[WONG76]. In
addition, Postgres can use a hash-join algorithm along the lines of [SHAP86]; however, it must
know whether this strategy is applicable. The current hash-join algorithm is only correct for
operatorsthatrepresentequalitytests;furthermore,equalityofthedatatypemustmeanbitwise
equalityoftherepresentationofthetype. (Forexample,adatatypethatcontainsunusedbitsthat
don’tmatterforequalitytestscouldnotbehashjoined.) TheHASHESflagindicatestothequery
optimizerthatahashjoinmaysafelybeusedwiththisoperator.
Similarly,thetwosortoperatorsindicatetothequeryoptimizerwhethermerge-sortisausable
joinstrategyandwhichoperatorsshouldbeusedtosortthetwooperandclasses. Sortoperators
shouldonlybeprovidedfor anequalityoperator, andtheyshouldrefertoless-thanoperatorsfor
theleftandrightsidedatatypesrespectively.
If other join strategiesare found to be practical, Postgres will changethe optimizer and run-
time system to use them and will require additional specification when an operator is defined.
Fortunately, the research community invents new join strategies infrequently, and the added
generalityofuser-definedjoinstrategieswasnotfelttobeworththecomplexityinvolved.
The RESTRICT and JOIN options assist the query optimizer in estimating result sizes. If a
clauseoftheform: MYBOXES.description <<< box ’((0,0), (1,1))’
ispresentinthequalification,thenPostgresmayhavetoestimatethefractionoftheinstances
inMYBOXESthatsatisfytheclause. Thefunctionres_procmustbearegisteredfunction(meaning
itisalreadydefinedusingCREATE FUNCTION)whichacceptsargumentsof thecorrectdata
typesandreturnsafloatingpointnumber. Thequeryoptimizersimplycallsthisfunction,passing
theparameter((0,0),(1,1))andmultipliestheresultbytherelationsizetogettheexpectednumber
ofinstances.
Similarly,whentheoperandsoftheoperatorbothcontaininstancevariables,thequeryoptimizer
must estimate the size of the resulting join. The function join_proc will return another floating
pointnumberwhichwillbemultipliedbythecardinalitiesofthetwoclassesinvolvedtocompute
theexpectedresultsize.
Thedifferencebetweenthefunction
my_procedure_1 (MYBOXES.description, box ’((0,0), (1,1))’)
andtheoperator
MYBOXES.description === box ’((0,0), (1,1))’
isthatPostgresattemptsto optimizeoperatorsandcandecideto useanindexto restrictthe
search space when operators are involved. However, there is no attempt to optimize functions,
andthey are performed by brute force. Moreover, functions can have any number of arguments
whileoperatorsarerestrictedtooneortwo.
296 APPENDIXD. REFERENCEMANUAL
Notes
RefertothechapteronoperatorsinthePostgreSQLUser’sGuideforfurtherinformation. Referto
DROPOPERATORtodeleteuser-definedoperatorsfromadatabase.
Usage
Thefollowingcommanddefinesanewoperator,area-equality,fortheBOXdatatype:
CREATE OPERATOR === (
LEFTARG = box,
RIGHTARG = box,
PROCEDURE = area_equal_procedure,
COMMUTATOR = ===,
NEGATOR = !==,
RESTRICT = area_restriction_procedure,
JOIN = area_join_procedure,
HASHES, SORT1 = <<< ,
SORT2 = <<<
);
Compatibility
SQL92
CREATEOPERATORisaPostgresextension. ThereisnoCREATEOPERATORstatement
inSQL92.
D.19 CREATE RULE
Name
CREATERULE—Definesanewrule
CREATERULEnameASONevent
TOobject
[WHEREcondition]
DO[INSTEAD][action|NOTHING]
Inputs
name Thenameofaruletocreate.
event Eventisoneofselect,update,deleteorinsert.
D.19. CREATERULE 297
object Objectiseithertableortable.column.
condition Any SQL WHERE clause, new or old, can appear instead of an instance variable
wheneveraninstancevariableispermissibleinSQL.
action Any SQL statement, new or old, canappearinsteadof an instancevariablewheneveran
instancevariableispermissibleinSQL.
Outputs
CREATE Messagereturnediftheruleissuccessfullycreated.
Description
The Postgres rule system allows one to define an alternate action to be performed on inserts,
updates,ordeletionsfromdatabasetablesorclasses. Currently,rulesareusedtoimplementtable
views.
Thesemanticsofaruleisthatatthetimeanindividualinstanceisaccessed,inserted,updated,
ordeleted,thereisanoldinstance(forselects,updatesanddeletes)andanewinstance(forinserts
and updates). If the event specifiedin the ON clause and the condition specifiedin the WHERE
clausearetruefortheoldinstance,theactionpartoftheruleisexecuted. First,however,values
from fieldsin the old instanceand/orthe newinstancearesubstitutedfor old.attribute-name and
new.attribute-name.
Theactionpartoftheruleexecuteswiththesamecommandandtransactionidentifierasthe
usercommandthatcausedactivation.
Notes
AcautionaboutSQL rulesisinorder. Ifthesameclassnameorinstancevariableappearsinthe
event, condition andaction partsof arule, theyareall considereddifferenttuplevariables. More
accurately, new and old are the only tuple variables that are shared between these clauses. For
example,thefollowingtworuleshavethesamesemantics:
ON UPDATE TO emp.salary
WHERE emp.name = "Joe" DO
UPDATE emp SET ...
WHERE ...
ON UPDATE TO emp-1.salary
WHERE emp-2.name = "Joe" DO
UPDATE emp-3 SET ...
WHERE ...
298 APPENDIXD. REFERENCEMANUAL
EachrulecanhavetheoptionaltagINSTEAD.Withoutthistag,actionwillbeperformedinaddition
totheusercommandwhentheeventintheconditionpartoftheruleoccurs. Alternately,theaction
partwillbedoneinsteadoftheusercommand. Inthislattercase,theactioncanbethekeyword
NOTHING.
Itisveryimportanttonotetoavoidcircularrules. Forexample,thougheachofthefollowing
two rule definitionsare acceptedby Postgres, the selectcommand will causePostgres to report
anerrorbecausethequerycycledtoomanytimes:
Exampleofacircularrewriterulecombination.
CREATE RULE bad_rule_combination_1 AS
ON SELECT TO emp DO INSTEAD
SELECT TO toyemp;
CREATE RULE bad_rule_combination_2 AS
ON SELECT TO toyemp DO INSTEAD
SELECT TO emp;
ThisattempttoselectfromEMPwillcausePostgrestoissueanerrorbecausethequeriescycled
toomanytimes:
SELECT * FROM emp;
You must haverule definition accessto a class in order to definea ruleon it. Use GRANT and
REVOKEtochangepermissions.
TheobjectinaSQLrulecannotbeanarrayreferenceandcannothaveparameters.