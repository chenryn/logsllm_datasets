ArrayBuffer 的 jsObject 指向 jsc 的 Int8Array，也就是保存 ArrayBuffer 内容的地方。在新版的 WebKit
里 VectorPtr 指针被 PAC 加上了保护，用来防止伪造指针来获取内存读写的利用技术。这便是 PAC-cage。
我们的目的是用 ArrayBuffer 的二进制数据被 Objective-C 当作对象来处理，不会修改 VectorPtr。而 Objective-C
也不管 jsc 里的 PAC 签名。因此只需要用逻辑 and 运算简单地移除掉高位即可得到一个 fakeobj 的指针。把这个指针作为 UAF 的之后伪造的
NSArray 的唯一元素即可。
* * *
## 构造 Double Free
SLOP 技术有一个关键 gadget 就是调用 dealloc 方法。Project Zero 在实现 iMessage
攻击的时候利用了一个条件，即数据序列化之后创建出来的对象会隐式调用 dealloc 方法。
在前面一系列步骤之后，我们伪造了一个SKStoreReviewViewController 对象，并在 0x358 偏移处放了一个 bootstrap 用的
NSInvocation。既然第二篇文章说到，Use-After-Free 的核心问题在于 dealloc 可以被 js 调用，那么是不是再调用一次
dealloc 就行了？
并没有这么简单。
之所以 dealloc 能被 js 访问，是 SUScriptObject 在实现 isSelectorExcludedFromWebScript:
方法时返回了 NO。不过 SKStoreReviewViewController 并不是 SUScriptObject 的子类，最后会执行到
+[NSObject isSelectorExcludedFromWebScript:]，而默认的实现是一律 YES 拒绝。
要让伪造的对象再调用一次 dealloc，我们需要找到一个满足如下条件的类：
  * SUScriptObject 的子类
  * 提供一个 setter 方法，可以将其他对象赋值到这个类的属性上
  * 在 dealloc 时递归释放成员属性
SUScriptSegmentedControlItem 便满足需求。
首先用 js 分配该对象到变量 A：
    iTunes.makeSegmentedControl().createSegment()
然后调用 setUserInfo_ 将对象 B 关联上去。调用对象 B 的 dealloc 释放后占位，准备好 SLOP 所需的数据结构。这时候调用 A 的
dealloc，就会递归调用到 B 的 dealloc 方法。
    const deallocator = iTunes.makeSegmentedControl();const seg = deallocator.createSegment(); // for double freeiTunes.log(`dangling pointer: ${addrof(x)}`);window.x = x; // avoid GCseg.setUserInfo_(x);x.dealloc(); // first free// ... exploit the UAFseg.dealloc(); // double free to kickstart the chain
* * *
## 调用任意 C 函数
到这一步已经可以串联多个 Objective-C 方法，实现相当多功能了。
Project Zero 的 iMessage 攻击演示用到了两个特殊的 gadget，可以配合起来调用任意被导出的 C 函数。
-[CNFileServices dlsym::]
-[NSInvocation invokeUsingIMP:]
第一个正如它的名字，等价于 dlsym。在 PAC 环境下，dlsym 返回的函数指针使用进程内共享的 IA key 和 0
作为上下文来签名，通常用作将函数指针当作 callback 的场景。
而另一个则是 NSInvocation 的私有用法，可以自定义 IMP 指针，也就是函数指针，实现参数可控的函数调用。这个方法利用到的 IMP 正是使用
IA key 和 0 context 签名。
两个方法结合起来，就可以调用任意能被 dlsym 找到的函数。
但是 saelo 留下了一个问题没有解决。NSInvocation 要求函数的第一个参数，也就是 self 指针不能为
nil（0）。在接下来的漏洞利用中，我们需要以 0 为参数调用一些函数。
这个缺陷可以用 CoreFoundation 里的回调函数解决。
例如这个：
void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void
*context);
第二个参数的 applier 是一个 IA key 和 0 context 签名过的函数指针。CFSetApplyFunction 将遍历 CFSet
所有的元素，将元素和 context 作为参数传给 applier。
这样便可以通过如下代码（对应的 SLOP 链）绕过限制：
    void *fake[2] = {(__bridge void *)NSClassFromString(@"__NSSingleObjectSetI"), NULL};CFSetApplyFunction((void *)&fake[0], (void*)exit, (void*)0x41414141);
首先创建一个只有一个元素的 __NSSingleObjectSetI，元素指针就是 0（applier 的第一个参数）。接下来调用
CFSetApplyFunction，加上 void *context 一共可以完全控制两个参数。
另外我没有实测过一个想法，由于 arm64 使用通用寄存器传递参数，如果上层的 CFSetApplyFunction
没有污染后续的寄存器，那么有可能还可以控制更多的参数。
反正之后的利用链条两个参数够用了。
* * *
## 绕过 APRR 载入任意 shellcode
JavaScriptCore 用到了 APRR 来动态切换 JIT
代码页的权限。对于一个线程而言，页面的属性要么可写要么可执行；而不同线程（编译线程、执行线程）看到的内存页属性可以是不一样的。
虽然浏览器的 just-in-time
允许加载动态的机器码，漏洞利用程序在获得内存读写之后却没办法简单将代码写入。写入代码必须调用特殊的指令切换内存属性，复制代码之后再恢复权限为可执行。而
PAC 又将代码重用攻击（ROP）阻断了，使攻击者不能简单复用浏览器已有的指令。
在 APRR 和 PAC 的协作下，很难单纯用内存读写载入任意代码。而绕过技术更是见光死，修一个少一个。不得不说 Apple
使用私有的硬件极大提高了漏洞利用的门槛。
当然凡事无绝对，以下介绍一个已被修复的绕过。
具体来说，WebKit 在生成即时编译的机器码会用到一个总是内联的 performJITMemcpy 函数。这个函数内部流程大致如下：
    pthread_jit_write_protect_np(0); // set writablememcpy(jit_function, code, size); // write shellcodepthread_jit_write_protect_np(1); // set executable
pthread_jit_write_protect_np 本该被展开成为 内联汇编指令。但是 iOS 14.3 之前犯了一个低级错误，在
libpthread 里把这个函数设置成了公开导出。这样结合前文的 SLOP 技术，我们直接构造以上三个函数调用，就可以轻而易举地绕过
APRR，写入任意的机器码。
* * *
## 又一个 PAC 绕过：CVE-2021-1769
这一步在漏洞利用中不是必要的，有些炫技的成分。
前面的步骤中实现了任意 shellcode 的写入，还差最后一步 pc control，把控制流重定向到 shellcode 上。
可以使用经典的做法，利用 JIT 生成一个足够大的函数体，用上面的 APRR 绕过覆盖函数的机器码。最后在 js 里调用该函数时就会执行被修改过的
shellcode。
在这里使用了另一种思路。可以看到 SLOP 本身就可以实现复杂的功能，即使不写 shellcode 也能完成很多效果。我的想法是找到一些未被 PAC
保护的间接跳转指令，由某个函数从已知的内存地址中读取一个指针，然后不加验证地跳转过去。只要使用 SLOP
将指针修改掉，再调用这个具有间接跳转的函数，就可以控制 PC 运行 shellcode。
通过 IDA Pro 对整个 dyld_shared_cache 搜索，找到了这个 Swift 的运行库函数：
其中第二条 ldr 指令读取的就是一个 GOT 表项目，也就是没有 PAC 保护的函数指针。接下来函数走到 jn( _:_ :)，再继续看汇编指令：
最后一行 br x1 即是跳转到函数的第二个参数，也就是前文 ldr 读取出来的指针。
以上函数位于 /usr/lib/swift/libswiftDarwin.dylib，默认没有被 iTunes Store 链接到，可以用 SLOP 调用
dlopen 加载之。接着修改 _jn_ptr@PAGE 的值为shellcode 的地址，然后直接调用 dlsym 出来的_
$s6Darwin2jnySdSi_SdtF 函数即可。
这个 PAC 绕过在 iOS 14.4 修复，通过升级编译工具链移除了所有无保护的 GOT 指针。
* * *
最终 shellcode 执行结果如下：
第一篇文章里提到了，这个 App 非常特殊，可能是目前 shellcode 能在 iOS 上获取的最高权限。所有基于 App
能实现的越狱都可以无缝串联到这里。iTunes Store 还通过 entitlement 加入了例如摄像头、通讯录、Apple Wallet、Apple
ID 等敏感信息等访问权限，直接调用对应的 API 即可。
本研究大量参考了 Samuel Groß 的 iMessage hack 和 JITSploitation
系列文章，强烈推荐阅读，也在此表示感谢。可以看到阅读历史漏洞利用的报告对展开新的研究具有极大的推动作用。
* * *