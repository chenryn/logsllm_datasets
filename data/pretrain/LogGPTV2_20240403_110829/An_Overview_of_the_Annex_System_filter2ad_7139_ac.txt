### 3.4 Network Awareness

Annex devices can be uniquely identified by their globally unique 64-bit host part and their current network family. This allows any device to be addressed using its address tuple, regardless of the value of the BrickLn field, which indicates the device’s current point of attachment to the network. Specifically, the /64 part of any Annex family's network must act as the home network for that family. Thus, any device can be contacted at its home address by zeroizing the BrickLn fields in the address tuple.

If a correspondent node or intermediate router has more accurate information about the device's current location (i.e., it has a BrickLn stored in its binding update tables), it can use this information to facilitate more direct routing.

#### Address Tuple and IPv6 Header Construction

The concept of "uttering an address tuple" refers to a special form of IPv6 header construction where source and destination addresses are stored twice within the IPv6 header. The first source/destination pair corresponds to the addresses found in a normal IPv6 header and should initially contain the sending device’s care-of address and the recipient’s care-of address if known, or the home address (where BrickLn is zeroized) if not. Unlike traditional [H]MIPv6, these addresses can be modified by intermediate routers.

The second source/destination pair is stored in an IPv6 Destination Option extension header and contains the sending device’s home address and the recipient’s home address. These addresses are immutable but can be compressed. Since home networks are always located where Brick fields are zero, and the DeviceID on a foreign network is almost always the same as on the home network, the storage requirements for the second set of addresses can be significantly reduced. In Annex networks, these storage requirements are actually less than those incurred by standard [H]MIPv6 [10].

When the packet is delivered to the destination device, the main IPv6 header’s source/destination pair is replaced with the copies in the extension header and passed up to higher-level processing as though the communication occurred directly between the two devices' home addresses. If IPSec authentication is used, the Authentication Header must be created and verified using the same sets of predictably mutable source/destination address pairs in the main header and extension header. Additionally, when ICMP status messages are generated in response to an uttered packet (e.g., for IPv6 path MTU discovery), the response must be routed back to the home source address stored in the packet’s extension header.

#### Routing and Mobility

In contrast to normal HMIPv6, which requires encapsulation in a new tunnel for each level of Mobility Access Point (MAP), Annex MIPv6 routing allows the source/destination pair in the main IPv6 header to be modified at will by intermediate Annex-MAPs. This simplicity, achieved by avoiding the need to process extension headers/tunnel packets at every MAP, enables Annex-MAP routers to employ specialized hardware for very fast rerouting of Annex MIPv6 packets according to information stored in the MAPs' binding caches.

Avoiding the use of preconfigured tunnels between MAPs means the routing topology can be dynamically altered to improve performance, robustness, security, and other network characteristics. This network awareness is particularly important in military contexts, where threats against communications networks can change rapidly.

#### Hierarchical IPv6 Annex-MAP Functionality

In addition to utilizing hierarchical IPv6 Annex-MAP functionality, Annex devices can directly address other devices within a given MAP’s sub-tree without involving the destination device’s home agent. A source device simply needs to utter a message addressed to the unique host part of another device and a specified MAP. If the target device is actively managed by that MAP (either directly or indirectly via some hierarchy), the message will be routed appropriately, as all MAPs know how to route towards devices beneath them in the MAP hierarchy if they are bound.

If the target device is not managed by the specified MAP, an Annex-augmented MAP may decide, based on policy and/or other information in the message’s IPv6 header, to report failure or zeroize (or broadcast on) one or more BrickLn fields and forward the packet to broaden the search space for the destination device.

This augmented MAP functionality provides Annex with more robustness and power than standard HMIPv6. It enables efficient packet routing within the Annex domain and allows Annex devices to contact other devices if they are reachable, even if their home agents are unavailable. This is particularly useful in battlefield situations where local network connectivity is maintained, but the connection to remote network elements is severed.

Enhanced topology awareness and mobile routing are not the only capabilities provided by network awareness in the Annex system. Other functionalities include classification-based routing, traffic priority and preemption, and location-based services. More information and examples of how Annex IPv6 extensions can support intelligent routing decisions can be found in [10].

### 4. The Annex Ensemble

The Annex Ensemble, shown in Figure 2, provides a reference platform for experimentation and development based on the Annex security and network architectures described in the previous sections. It comprises a range of devices for secure communication and data processing, designed to provide the Annex user with a trusted, personal platform for applications such as classified audio/video conferencing and data processing. When used together, these devices form a personal area network, connecting the warfighter to the GIG in a NCW environment.

All Ensemble components are personalized for the particular individual to whom they are issued. At the time of manufacture, each device is provided with a unique identity that distinguishes it from every other device within the Annex network. Devices are never reissued and are designed to be disposable, meaning that a particular individual will be issued with many different devices over the course of their service, many of which will be replacements for previously issued devices.

With the exception of the COTS iPAQ, the design and implementation of hardware and software for all elements of the Ensemble were conducted entirely in-house. Consequently, everything except the iPAQ is considered “trusted.” While none of these components have been accredited to be secure yet, the Ensemble has allowed us to validate the basic ideas that underpin the Annex system through rapid prototyping and experimentation. It has facilitated the incremental rollout of Annex functionality, beginning with the end devices and moving towards the core network.

For example, the Secure Multi-function Card, which forms the Trusted Computing Base (TCB) of many of our first-generation devices, provides a reference implementation of the Annex Capability Kernel. By coupling this TCB with various COTS software and hardware components, we have constructed several functional Annex devices, including MiniSec and Brick prototypes. The MiniSec is an example of a typical Annex end-user device, while Bricks are designed to form a core part of the Annex network infrastructure.

Our first-generation Ensemble devices implement a number of prototype services, including secure telephony, video conferencing, network control, credential exchange, and identity management. Some of these services rely on multiple cooperating Ensemble devices. For example, the MiniSec and Button operate in tandem to facilitate secure telephony, but including the Badge also enables support for video calls. We now describe each Ensemble component in more detail.

#### 4.1 MiniSec

The MiniSec is a personal communication and data processing device that provides its user with secure access to Annex resources and applications. Our first-generation MiniSec device consists of a COTS Hewlett Packard iPAQ handheld computer augmented by a TCB in the form of the Secure Multi-function Card (described in the following section). The TCB is composed of custom hardware and software, implementing the Annex security architecture as described in Section 2. The TCB software includes the Annex Capability Kernel and application-specific objects. This software handles all sensitive data, while the iPAQ, a potentially hostile environment, merely provides convenient network transport and GUI facilities for non-sensitive data or data that has already been encrypted by the TCB.

Although our first-generation MiniSec device lacks MLS GUI facilities for showing sensitive information, we have developed a second-generation “MiniSec 2” device with full MLS display capabilities, which we hope to publish more details about soon. MiniSecs are connected into the wider Annex network using Mobile IPv6 over an 802.11i protected wireless LAN as described in Section 3.

Network transport and user interface software on the iPAQ interact with the object system on the TCB through a user-space library and kernel driver. This allows software on the iPAQ to perform method invocations on (and receive callbacks from) trusted objects on the TCB. Method invocations are made using regular (albeit weakly permissive) capabilities that have been passed from the TCB to the iPAQ. Callbacks are delivered via a special trusted object that provides an interface mirroring callback requirements. Ideally, the untrusted software on the iPAQ would not need to hold any capabilities at all, but it is required to support the user interface component of our first-generation prototypes. Ultimately, however, we aim to implement user interface components with trusted software running on trusted hardware so that even weak capabilities do not need to be exported beyond the TCB.

We have prototyped a secure mobile telephony system based on the MiniSec platform, which allows a user to establish and manage any number of Multi Level Secure point-to-point or conference calls. Each distinct call or conference operates at a single, designated security level at any one point in time, although that level may be dynamically adjusted by the call’s initiator. Any participants not cleared to a dynamically selected security level will be automatically put on hold until the conversation returns to their security level or below. Any user is free, however, to dynamically switch between any of the calls they are involved in or to create a new call, although only one call may be selected to be active at any one point in time. All call signaling and (unencrypted) audio data is managed by trusted hardware and software objects on the TCB, while the iPAQ simply transports TCB-encrypted data streams (using RTP over IPv6) and provides a convenient, although untrusted, user interface. Critical security information, such as the classification level of the current call, is displayed by several trusted LEDs on the TCB, limiting security breaches of the untrusted software running on the iPAQ to Denial of Service (DoS) attacks and traffic analysis.

In our current implementation, the untrusted nature of our GUI makes it theoretically possible for the untrusted software to misdirect a call to an unintended recipient. However, the trusted software still guarantees that both parties are appropriately cleared to talk to each other at the chosen security level. We are working on another trusted output mechanism (via the Badge, which will be described shortly) that will display the remote party’s identity and credentials to solve this problem more rigorously.

#### 4.2 Secure Multi-function Card

Our Secure Multi-function Card (SMC) is a reconfigurable PCMCIA card that provides the trusted hardware platform for our TCB. It includes an ISO7810-compliant interface to the SMC card’s host computer, a 32-bit ARM microcontroller for running the Annex Capability Kernel and trusted objects, a number of I/O facilities and other hardware resources, and a large Xilinx FPGA. The I/O and other hardware facilities include two Bluetooth devices, a SIM-card reader, a USB-host port, a Freescale MPC180 security coprocessor for accelerating Elliptic Curve Cryptography (ECC) key-agreement calculations, and several trusted push buttons and LED outputs. The FPGA is interposed between all of the other components and mediates all data flows between them, under the direction of highly-trusted hardware abstraction objects running within the Annex Capability Kernel.

The FPGA can be reconfigured to suit different application requirements but is currently geared towards the encryption, decryption, routing, and mixing of audio data to support our secure mobile telephony application. To this end, the SMC provides a number of data channels, either input or output, that terminate on the PCMCIA host, or in one special case, at a Bluetooth channel to the Button (which is described in the following section). Each of these channels is routed through a block-based, key-agile AES engine operating in CFB mode that encrypts data leaving the TCB and decrypts data entering it. Encrypted audio data sent to the PCMCIA host can then be transmitted to TCBs on other MiniSecs. Decrypted audio data can either be re-encrypted and sent to the Button for immediate playback or directed through a PCM mixing block in the case of a conference call. Channel routing is performed according to a switching matrix within the FPGA, which is in turn controlled by highly-trusted objects running within the Annex Capability Kernel.

#### 4.3 Button

The Button is a wearable accessory that clips onto a shirt collar and provides a secure hands-free audio I/O device for the Annex Ensemble. In its current incarnation, it provides 4 hours of talk time and significantly longer standby time. It captures audio in 64-kbps µ-law format using a sensitive electret microphone and outputs audio via a built-in speaker or headphone attachment. A dedicated acoustic echo-cancelling chip allows the Button to operate in full-duplex speakerphone mode. The Button also incorporates a tri-color LED that conveys MLS status to the user and a push button for user action signaling, such as accepting or rejecting incoming calls.

Each Button is designated for use with a particular SMC card by Bluetooth pairing. The Button’s I/O audio channels are connected, via the Bluetooth link, to I/O channels on the SMC so that audio recording and playback can be controlled and routed by trusted objects in the TCB. A Class 2 Bluetooth v1.2 link is used, which has a range of about 10 meters and minimizes radio frequency interference between the Bluetooth and 802.11b devices on the MiniSec. Communication over the link is carried by a custom RFCOMM-based protocol, with all data encrypted by an FPGA-based 256-bit AES engine. Finite lifetime Key Material for the crypto engine is supplied by the SMC over a physical link once a day, for example, during recharging.