vices, for example where disposable units are used or where
security policies dictate that a device must only ever be used
on a particular, designated network.
3.4 Network Awareness
Because Annex devices can be uniquely distinguished
by their globally unique 64 bit host part and their current
family, any device can be addressed by uttering its  tuple, regardless of the value of
the BrickLn ﬁeld(s), which represents the device’s current
point of attachment to the network. In particular, however,
the /64 part of any Annex family’s
network is required to act as the home network for that fam-
ily. Hence, any device can be contacted at its home address
by zeroising the BrickLn ﬁelds in the tuple described above.
If a correspondent node or intermediate router has a better
idea about the current location of a device, however (i.e. it
has any BrickLn stored in its binding update tables) it can
utter the tuple with that information to facilitate more direct
routing.
Uttering an address tuple describes our special form
of IPv6 header construction, where source and desti-
nation addresses are each stored twice within the IPv6
header. The ﬁrst source/destination pair corresponds to the
source/destination pair found in a normal IPv6 header, and
should (initially) contain the sending device’s care-of ad-
dress and the recipient’s care-of address if it is known, or
home address (i.e. where BrickLn is zeroised) if it is not.
Unlike traditional [H]MIPv6, these addresses are mutable
by intermediate routers. The second source/destination pair
should be stored in an IPv6 Destination Option extension
header, and should contain the sending device’s home ad-
dress and the recipient’s home address. These addresses
are immutable but are also, therefore, amenable to com-
pression. Since home networks are always located where
Brick ﬁelds are zero and because the DeviceID on a foreign
network will almost always be the same as on the home
network, the storage requirements for the second set of ad-
dresses can almost be eliminated; in Annex networks these
storage requirements will actually be less than those of in-
curred by standard [H]MIPv6 [10]. When the packet is
ﬁnally delivered to the destination device, the main IPv6
header’s source/destination pair will be replaced with the
copies in the extension header and passed up to higher level
processing as though the communication occurred directly
between the two device’s home addresses. If IPSec authen-
tication is being used, care must be taken to ensure that the
Authentication Header is created and veriﬁed with the same
sets of predictably mutable source/destination address pairs
in the main header and extension header. In addition, where
ICMP status messages are generated in response to an ut-
tered packet (eg for IPv6 path MTU discovery), care must
be taken to route that response back to the home source ad-
dress stored in the packet’s extension header.
Whereas normal HMIPv6 must encapsulate such com-
munication in a new tunnel for every level of Mobility
Access Point (MAP), Annex MIPv6 routing allows the
source/address pair in the main IPv6 header to be modi-
ﬁed at will by intermediate Annex-MAPs. The simplicity
afforded by avoiding the need to process extension head-
ers/tunnel packets at every MAP will allow Annex-MAP
routers to employ specialised hardware to perform very
fast rerouting of Annex MIPv6 packets according to infor-
mation stored in the MAPs binding caches.
In addition,
avoiding the use of preconﬁgured tunnels between MAPs
means the routing topology may be dynamically altered
to improve performance, robustness, security and/or other
network characteristics. Such network awareness is very
important in the military context, where directed threats
against a communications network can change rapidly.
In addition to utilising hierarchical IPv6 Annex-MAP
functionality, Annex devices can directly address other de-
vices within a given MAP’s sub-tree without involving the
destination device’s home agent: a source device need sim-
ply utter a message addressed to the unique host part of
another device and a speciﬁed MAP. If the uttered device
is being actively managed by that MAP (either directly or
indirectly via some hierarchy) the message will be routed
appropriately, as all MAPs know how to route towards de-
vices beneath them in the MAP hierarchy if they are bound.
Alternatively, if it is not, an Annex-augmented MAP may
decide, depending on policy and/or other information con-
tained in the message’s IPv6 header, to report failure or pos-
sibly zeroise (or broadcast on) one or more BrickLn ﬁelds
and forward the packet on to broaden the search space for
the destination device.
This augmented MAP functionality described above will
provide Annex with more robustness and power than stan-
dard HMIPv6. Firstly, it provides a mechanism for packets
to be very efﬁciently routed within the Annex domain. Sec-
ondly, it will give Annex devices the ability to contact other
devices if they are reachable, whether their home agents are
available or not, which is useful in a battleﬁeld situation
where local network connectivity has been maintained but
the connection to remote network elements has been sev-
ered.
Enhanced topology awareness and mobile routing is not
the only capability provided by network awareness in the
Annex system. Other functionality includes classiﬁcation-
based routing, trafﬁc priority and preemption and location-
based services. More information and examples of how
Annex IPv6 extensions can support intelligent routing de-
cisions can be found elsewhere [10].
4 The Annex Ensemble
The Annex Ensemble, shown in Figure 2 and described
further below, provides a reference platform for experimen-
tation and development based on the Annex security and
network architectures described in the previous sections. It
comprises a range of devices for secure communication and
data processing, designed to provide the Annex user with a
trusted, personal platform for applications such as classiﬁed
audio/video conferencing and data processing. When used
together, these devices form a personal area network, which
connects the war ﬁghter to the GIG in a NCW environment.
All Ensemble components are personalised for the par-
ticular individual to whom they are issued. At the time of
manufacture, each device is provided with a unique identity
that distinguishes it from every other device within the An-
nex network. Devices are never reissued and are designed
to be disposable, in the sense that it is expected that a par-
ticular individual will be issued with many different devices
over the course of their service, many of which will be re-
placements for previously issued devices.
With the exception of the COTS iPAQ, the design and
implementation of hardware and software for all elements
of the Ensemble was conducted entirely in-house. Conse-
(a)
(b)
4.1 MiniSec
(c)
(d)
(e)
Figure 2. The ﬁrst generation Annex Ensem-
ble devices are:
(a) MiniSec, which incor-
porates a (b) Secure Multi-function Card; (c)
Button; (d) Badge; and (e) Codestick.
quently, everything except the iPAQ is considered “trusted”.
This is not to say that any of these components have been
accredited to be secure yet – much work remains ahead
of us down that path – but the Ensemble has allowed us
to validate the basic ideas that underpin the Annex system
through a process of rapid prototyping and experimentation.
It has facilitated the incremental roll-out of Annex function-
ality, beginning with the end devices and moving towards
the core network. For example, the Secure Multi-function
Card which forms the Trusted Computing Base (TCB) of
many of our ﬁrst generation devices provides a reference
implementation of the Annex Capability Kernel. By cou-
pling this TCB with various COTS software and hardware
components, we have been able to construct a number of
functional Annex devices, including MiniSec and Brick pro-
totypes. The MiniSec is an example of a typical Annex end
user device, while Bricks are designed to form a core part
of the Annex network infrastructure.
Our ﬁrst generation Ensemble devices implement a num-
ber of prototype services, including secure telephony, video
conferencing, network control, credential exchange and
identity management. Some of these services rely on mul-
tiple cooperating Ensemble devices.
the
MiniSec and Button operate in tandem to facilitate secure
telephony, but including the Badge also enables support for
video calls. We now describe each Ensemble component in
more detail.
For example,
The MiniSec is a personal communication and data pro-
cessing device that provides its user with secure access
to Annex resources and applications. Our ﬁrst generation
MiniSec device consists of a COTS Hewlett Packard iPAQ
hand-held computer augmented by a TCB in the form of
the Secure Multi-function Card (described in the following
section). The TCB is composed of custom hardware and
software, implementing the Annex security architecture as
described in Section 2. The TCB software includes the An-
nex Capability Kernel and application-speciﬁc objects. This
software handles all sensitive data while the iPAQ, a po-
tentially hostile environment, merely provides convenient
network transport and GUI facilities for non-sensitive data
or data that has already been encrypted by the TCB. Al-
though our ﬁrst generation MiniSec device therefore lacks
MLS GUI facilities for showing sensitive information, we
have already developed a second generation “MiniSec 2”
device with full MLS display capabilities, which we hope
to publish more details about soon. MiniSecs are connected
into the wider Annex network using Mobile IPv6 over an
802.11i protected wireless LAN as described in Section 3.
Network transport and user interface software on the
iPAQ interacts with the object system on the TCB through
a user-space library and kernel driver. This allows software
on the iPAQ to perform method invocations on (and receive
callbacks from) trusted objects on the TCB. Method invoca-
tions are made using regular (albeit weakly permissive) ca-
pabilities that have been passed from the TCB to the iPAQ.
Callbacks are delivered via a special trusted object that pro-
vides an interface mirroring callback requirements. Ideally
the untrusted software on the iPAQ would not need to hold
any capabilities at all, but it is required to support the user
interface component of our ﬁrst generation prototypes. Ul-
timately, however, we aim to implement user interface com-
ponents with trusted software running on trusted hardware
so that even weak capabilities do not need to be exported
beyond the TCB.
We have prototyped a secure mobile telephony system
based on the MiniSec platform, which allows a user to
establish and manage any number of Multi Level Secure
point-to-point or conference calls. Each distinct call or con-
ference operates at a single, designated security level at any
one point in time, although that level may be dynamically
adjusted by the call’s initiator. Any participants not cleared
to a dynamically selected security level will be automati-
cally put on hold until the conversation returns to their se-
curity level or below. Any user is free, however, to dynami-
cally switch between any of the calls that they are involved
in, or to create a new call, although only one call may be
selected to be active at any one point in time. All call sig-
nalling and (unencrypted) audio data is managed by trusted
hardware and software objects on the TCB, while the iPAQ
simply transports TCB-encrypted data streams (using RTP
over IPv6) and provides a convenient, although untrusted,
user interface. Critical security information such as the clas-
siﬁcation level of the current call is displayed by several
trusted LEDs on the TCB, however, so security breaches
of the the untrusted software running on the iPAQ are lim-
ited to Denial of Service (DoS) attacks and trafﬁc analysis.
In our current implementation the untrusted nature of our
GUI also makes it theoretically possible for the untrusted
software to misdirect a call to an unintended recipient. The
scope of this attack is greatly diminished by the trusted soft-
ware, however, which still guarantees that both parties are
appropriately cleared to talk to each other at the chosen se-
curity level. In addition we are working on another trusted
output mechanism (via the Badge, which will be described
shortly) that will display the remote party’s identity and cre-
dentials to solve this problem more rigorously.
4.2 Secure Multi-function Card
Our Secure Multi-function Card (SMC) is a reconﬁg-
urable PCMCIA card that provides the trusted hardware
platform for our TCB. It includes an ISO7810-compliant
interface to the SMC card’s host computer, a 32 bit ARM
micro-controller for running the Annex Capability Kernel
and trusted objects, a number of I/O facilities and other
hardware resources, and a large Xilinx FPGA. The I/O and
other hardware facilities include two Bluetooth devices, a
SIM-card reader, a USB-host port, a Freescale MPC180
security coprocessor for accelerating Elliptic Curve Cryp-
tography (ECC) key-agreement calculations, and several
trusted push buttons and LED outputs. The FPGA is in-
terposed between all of the other components and its job is
to mediate all data ﬂows between them, under the direction
of a number of highly-trusted hardware abstraction objects
running within the Annex Capability Kernel.
The FPGA can be reconﬁgured to suit different appli-
cation requirements, but it is currently geared towards the
encryption, decryption, routing and mixing of audio data to
support our secure mobile telephony application. To this
end the SMC provides a number of data channels, either
input or output, that terminate on the PCMCIA host, or in
one special case at a Bluetooth channel to the Button (which
is described in the following section). Each of these chan-
nels are routed through a block-based, key-agile AES en-
gine operating in CFB mode that encrypts data leaving the
TCB and decrypts data entering it. Encrypted audio data
sent to the PCMCIA host can then be transmitted to TCBs
on other MiniSecs. Decrypted audio data can either be re-
encrypted and sent to the Button for immediate playback, or
ﬁrst directed through a PCM mixing block in the case of a
conference call. Channel routing is performed according to
a switching matrix within the FPGA, which is in turn con-
trolled by highly-trusted objects running within the Annex
Capability Kernel.
4.3 Button
The Button is a wearable accessory that clips on to a shirt
collar and provides a secure hands-free audio I/O device
for the Annex Ensemble. In its current incarnation it pro-
vides 4 hours of talk time and signiﬁcantly longer standby
time.
It captures audio in 64-kbps µ-law format using a
sensitive electret microphone and outputs audio via a built-
in speaker or headphone attachment. A dedicated acoustic
echo cancelling chip allows the Button to operate in full-
duplex speaker phone mode. The Button also incorporates
a tri-colour LED that conveys MLS status to the user, and a
push button for user action signalling, for example to accept
or reject incoming calls.
Each Button is designated for use with a particular SMC
card by Bluetooth pairing. The Button’s I/O audio channels
are connected, via the Bluetooth link, to I/O channels on
the SMC so that audio recording and playback can be con-
trolled and routed by trusted objects in the TCB. A Class 2
Bluetooth v1.2 link is used, which has a range of about 10
metres and minimises radio frequency interference between
the Bluetooth and 802.11b devices on the MiniSec. Com-
munication over the link is carried by a custom RFCOMM-
based protocol, with all data encrypted by a FPGA-based
256 bit AES engine. Finite life time Key Material for the
crypto engine is supplied by the SMC over a physical link
once a day, for example during recharging.