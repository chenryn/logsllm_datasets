###  3）在VMWare Workstations，VMWare
Fusion以及Parallels虚拟化环境下，通过Linux的dd命令将镜像文件写入虚拟磁盘来运行OpenWrt
在Linux系统上用dd命令直接写OpenWrt这种方法是在网上找到的，后来在VMWare，Parallels虚拟化环境上都进行了测试，验证成功，确实可行。但是，用起来比前面的方法略显笨拙。不过，对于Parallels虚拟化环境而言，这是目前我验证成功的唯一方法，当然不排除大神们还有别的方法。如果非要在基于x86架构的MacOS上用Parallels跑OpenWrt虚拟机的话，创建磁盘的时候尽量不要启用虚拟磁盘“Trim”选项。
这种方法大致上是这样的：先创建一个Linux虚拟机，CentOS或者Debian什么的都可以，怎么简单、方便就怎么来。然后，创建一个OpenWrt的虚拟机，假设虚拟磁盘还是命名为openwrt.vmdk或者openwrt.hdd。然后，将虚拟磁盘加入到已经创建好的Linux虚拟机中，并启动Linux虚拟机。在验证新的磁盘加载成功后，用下面的命令将下载并解压后的raw格式的openwrt*.img镜像文件写入到新加载的磁盘中。
`#查看磁盘，验证磁盘加载成功`  
`#lsblk`  
`#dd if=openwrt.img of=/dev/sdb`
关闭Linux虚拟机，最好将刚刚添加的磁盘一并移除（但是不要删除），切换到OpenWrt虚拟机，直接开机就OK了。
###  4） 基于qemu运行OpenWrt的initramfs文件系统（RAM镜像文件）
在这种运行模式下，我们通过qemu运行OpenWrt的内存文件系统，而且这个系统是只读的，用户的所有修改操作只能保存在内存中（不会写入硬盘），那么一旦系统重新启动，所有的修改全部丢失。这种模式虽然不能保存修改，但是运行最为简单、方便，做一些简单的实验感受一下OpenWrt还是可以的。通过以下命令可以运行OpenWrt的initramfs系统：
`qemu-system-aarch64 -M virt -m 1024m -kernel
openwrt-21.02.0-armvirt-64-Image-initramfs -no-reboot -nographic -nic user
-nic user -cpu cortex-a53 -smp 4`
###  5） 基于qemu运行OpenWrt并指定可读写文件系统
通过qemu运行OpenWrt时，可以指定运行哪一个内核文件，而且可以指定存储系统对应的文件，比如下面这个命令：
`qemu-system-aarch64 -M virt -m 1024m -kernel openwrt-21.02.0-armvirt-64-Image
-drive file=openwrt-21.02.0-armvirt-64-rootfs-ext4.img,format=raw,if=virtio
-no-reboot -nographic -nic user -nic user -cpu cortex-a53 -smp 4 -append
root=/dev/vda`
###  6）关于Parallels运行OpenWrt
按照前面在VMWare上运行OpenWrt的思路，我分别尝试了转化虚拟磁盘和使用dd命令直接写磁盘。测试的结果是，Parallels无法识别qemu-img转换后的parallels格式虚拟磁盘，但是通过dd命令方式可以将raw格式的镜像文件成功写入parallels虚拟磁盘并且正常运行OpenWrt系统。
后来查阅了qemu官方资料中关于qemu-img的介绍，发现qemu-img当前版本只能读取Parallels虚拟机的虚拟磁盘文件，但是无法创建Parallels虚拟磁盘格式的文件，所以第一种方法最终会失败。
再者，由于OpenWrt不支持Apple M1处理器，也就没有提供针对Apple
M1的镜像文件下载，因此无法在基于M1处理器的MacOS上通过Parallels运行OpenWrt。而且，下载openwrt编译源代码也不行，官方没有提供对M1处理器的支持。
后来，打算尝试直接用Parallels运行armvirt格式的镜像文件（也自己编译过），也都失败了。我仔细看了看OpenWrt官网关于armvirt版本的描述，“virt
is a platform which doesn’t correspond to any real hardware and is designed
for use in virtual machines”，那么跑不起来也在情理之中。刚刚才开始IoT操作系统，对于固件的知识了解不多，若有不当，还望不吝赐教
^_^
## 0x03：OpenWrt配置OpenSSH
OpenWrt自身支持OpenSSH协议，不过采用的是针对嵌入式应用环境的Dropbear版本，与PC和Server端的OpenSSH有些差别。不过，OpenWrt提供了比较多样化的配置方法，用起来还是挺趁手的。
###  1） 基于UCI的OpenWrt配置
通过uci命令可以查看Dropbear的配置文件：
设置dropbear，允许其开启密码验证，并运行root用户登录：
其中，有三点需要注意：
1.通过uci完成dropbear（包括其他后台deamon进程）设置后，需要通过commit提交并保存结果，eg： #uci commit
dropbear。
2.如果配置依然无法生效，可以考虑reload或者restart一下后台进程。
3.如果你使用的是OpenWrt默认密码，即空密码，那么你将无法连接OpenSSH，这是dropbear默认的规则，即“不允许空密码登录”。
默认情况下，dropbear监听任意地址的22端口，这样我们就可以通过配置的WAN口连接OpenSSH。当然，事先最好查看防火墙配置规则中关于WAN口的规则，通常情况下WAN是拒绝连入请求的。
将wan对应的INPUT规则修改为ACCEPT，即允许从wan口访问OpenSSH服务，这样就可以继续愉快的玩dropbear。
###  2） 基于Web界面配置Dropbear
正常情况下，当配置的虚拟网卡正常启用，可以通过LAN网卡对应的网址访问OpenWrt所提供的Web服务，即Luci，那么一切就很简单了，网上教材特别多，我也不好意思继续瞎比比。总的来说，我个人非常喜欢Luci的界面，清晰，简洁，清新，没有那些花里胡哨的东西，让人很愉快。
点击“System —> Administration”就可以设置root账户密码。
点击“Network —> Firewall”可以修改防火墙规则，比如添加一个允许从WAN连入22端口。
###  3）最笨但最直接的配置方法——修改配置文件
除了上面两种优雅的办法，还可以直接修改配置文件，虽然显得很简单粗暴，但是好使。OpenWrt中很多的配置文件都存储在/etc/config目录下，比如。。。
下面就是dropbear的配置文件，congfig关键字，加上配置文件声明dropbear，每一个配置选项都是用option关键字作为前导，后面便是字段名称和一对单引号括起来的字段值，相比较于那些庞大的PC端的Linux系统而言，这样的配置简直太有爱了
^_^
下面是防火墙的配置文件：
## 0x04、总结
OpenWrt的模拟环境还是比较好搭建的，Windows平台下利用VMWare和qemu都能很容易的搞定，对于新手而言上手也比较容易。有了这个虚拟化的平台，后期就可以进行一系列的研究了，写插件，复现漏洞，DIY一个自己的“Packet
Squirrel”等等。。。
## 0x05、引用
1、 OpenWrt十年. .  
2、 uBus(OpenWrt Micro Bus Architecture).
.