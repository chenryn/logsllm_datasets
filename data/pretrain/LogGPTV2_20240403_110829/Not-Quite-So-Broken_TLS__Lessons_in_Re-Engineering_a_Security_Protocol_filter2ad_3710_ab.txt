while the two endpoints establish an encrypted commu-
nication channel. This channel should be immune from
eavesdropping, tampering and message forgery.
There have been three standardised versions of TLS,
1.0, 1.1 and 1.2, while the last SSL (version 3) is still in
wide usage. A key feature of TLS is algorithmic agility:
it allows the two endpoints to negotiate the key exchange
method, symmetric cipher and the message authentica-
tion mode upon connecting. This triple is called a cipher
suite, and there are around 160 cipher suites standard-
ised and widely supported. Together with a number of
standardised extensions to the protocol that can be nego-
tiated, this creates a large possible space of session pa-
rameters. This large variation in conﬁguration options is
a marked characteristic of TLS, signiﬁcantly contribut-
ing to the complexity of its state machine.
Only a handful implementations of TLS are in wide
use. The three major free or open-source implementa-
tions are OpenSSL, GnuTLS and Mozilla’s NSS. Mi-
crosoft supplies SChannel with their operating systems,
USENIX Association  
24th USENIX Security Symposium  225
3
while Apple supplies Secure Transport with theirs, and
Oracle Java runtime comes bundled with JSSE.
Structurally, TLS is a two-layered protocol. The outer
layer preserves message boundaries and provides fram-
ing.
It encapsulates one of ﬁve sub-protocols: hand-
shake, change cipher spec, alert, application data or
heartbeat. Both layers can contain fragmentation.
A TLS session is initiated by the client, which uses
the handshake protocol to signal the highest protocol ver-
sion, possible extensions, and a set of ciphersuites it sup-
ports. The server picks the highest protocol version it
shares with the client and a mutually supported cipher-
suite, or fails the handshake. The ciphersuite determines
whether the server authenticates itself, and depending on
the server conﬁguration it requests the client to authenti-
cate itself. After the security parameters for the authenti-
cated encryption scheme are negotiated, the Change Ci-
pher Spec message activates these, and the last hand-
shake message authenticates the handshake. Either party
can renegotiate the session over the established channel
by initiating another handshake.
The handshake sub-protocol contains a complex state
machine, which must be successfully traversed at least
once. Handshake messages are independent of other sub-
protocols, but some other sub-protocols are dependent of
a successful handshake. For instance, it is not possible to
exchange application data before a session is established,
and it is impossible to affect the use of negotiated session
parameters while the negotiation is still in progress.
Server and client authentication is performed by
means of X.509 certiﬁcates. Usually path validation is
used: after one party presents a sequence of certiﬁcates
called the certiﬁcate chain, the other party needs to ver-
ify that a) each certiﬁcate in the chain is signed by the
next certiﬁcate; b) the last certiﬁcate is signed by one
of the trust anchors independent of connection; and c)
that the ﬁrst party owns the private key associated with
the ﬁrst certiﬁcate in the chain by transferring a signed
message containing session-speciﬁc data. For correct au-
thentication, the authenticating party also needs to verify
general semantic well-formedness of the involved certiﬁ-
cates, and be able to deal with three version of X.509 and
a number of extensions.
X.509 certiﬁcates are described through ASN.1, a no-
tation for describing the abstract syntax of data, and en-
coded using Distinguished Encoding Rules (DER), one
of the several standard encodings ASN.1 deﬁnes. A par-
ticular description in the ASN.1 language coupled with
a choice of encoding deﬁnes both the shape the the data-
structures and their wire-level encoding. ASN.1 provides
a rich language for describing structure, with a number
of primitive elements, like INTEGER and BIT STRING,
and combining constructs, like SEQUENCE (a record of
sub-grammars) and CHOICE (a node joining alternative
grammars). The ASN.1 formalism can be used with a
compiler that derives parsing and serialisation code for
the target language, but TLS implementations more typi-
cally contain custom parsing code for dealing with X.509
certiﬁcates. As X.509 exercises much of ASN.1, this
parsing layer is non-trivial and signiﬁcantly adds to the
implementation complexity.
3 Vulnerability Analysis
In the past 13 months (January 2014 to January 2015),
54 CVE security advisories have been published for 6
widely used TLS implementations (see Table 1): 22 for
OpenSSL, 6 for GnuTLS, 7 for NSS, 2 for SChannel, 2
for Secure Transport, 5 for JSSE, and 10 related to errors
in their usage in the client software (excluding vulnera-
bilities related to DTLS – TLS over UDP).
These vulnerabilities have a wide range of causes. We
classify them into broad families below, identifying root
causes for each and discussing how nqsb-TLS avoids
ﬂaws of each kind.
General memory safety violations Most of these bugs,
15 in total, are memory safety issues: out-of-bounds
reads, out-of-bounds writes and NULL pointer derefer-
ences. A large group has only been demonstrated to
crash the hosting process, ending in denial-of-service,
but some lead to disclosure of sensitive information.
A now-notorious example of this class of bugs is
Heartbleed in OpenSSL (CVE-2014-0160). Upon re-
ceiving a heartbeat record, a TLS endpoint should re-
spond by sending back the payload of the record. The
record contains the payload and its length. In Heartbleed,
the TLS implementation did not check if the length of
the received heartbeat matched the length encoded in the
record, and responded by sending back as many bytes
as were requested on the record level. This resulted in
an out-of-bounds read, which lets a malicious client dis-
cover parts of server’s memory. In April 2014, Cloud-
ﬂare posed a challenge of exploiting this bug to compro-
mise the private RSA key, which has been accomplished
by at least four independent researchers.
nqsb-TLS avoids this class of issues entirely by the
choice of a programming language with automated mem-
ory management and memory safety guarantees:
in
OCaml, array bounds are always checked and it is not
possible to access raw memory; and our pure functional
programming style rules out reuse of mutable buffers.
Certiﬁcate parsing TLS implementations need to parse
ASN.1, primarily for decoding X.509 certiﬁcates. While
ASN.1 is a large and fairly complex standard, for the pur-
poses of TLS, it is sufﬁcient to implement one of its en-
codings (DER), and only some of the primitives. Some
TLS implementations contain an ad-hoc ASN.1 parser,
226  24th USENIX Security Symposium 
USENIX Association
4
Product
OpenSSL
GnuTLS
NSS
SChannel
Secure Transport
JSSE
Applications
Protocol-level
Issue source
State machine
Certiﬁcate parsing
Certiﬁcate validation
Shared mutable state
Timing side-channel
CVE ID
2013-4353, 2015-0206, 2014-[3567, 3512, 3569, 3508, 3470, 0198, 0160] Memory management
2015-0205, 2015-0204, 2014-3572, 2014-0224, 2014-3568, 2014-3511
2014-8275
2014-2234
2014-3509, 2010-5298
2014-0076
2014-3570
2014-8564, 2014-3465, 2014-3466
2014-1959, 2014-0092, 2009-5138
2014-1544
2013-1740
2014-1490
2014-1569, 2014-1568
2014-1492
2014-1491
2014-6321
2014-1266
2014-6593, 2014-0626
2014-0625
2014-0411
2014-2734
2014-3694, 2014-0139, 2014-2522, 2014-8151, 2014-1263
2013-7373, 2014-0016, 2014-0017, 2013-7295
2014-1771, 2014-1295, 2014-6457
2014-3566
Shared mutable state
Certiﬁcate parsing
Certiﬁcate validation
DH param validation
Memory management
Memory exhaustion
Timing side-channel
Memory management
Certiﬁcate validation
Memory management
Certiﬁcate validation
Memory management
RNG seeding
Triple handshake
POODLE
Wrong sqrt
State machine
State machine
State machine
Table 1: Vulnerabilities in TLS implementations in 2014.
combining the core ASN.1 parsing task with the deﬁni-
tions of ASN.1 grammars, and this code operates as a
part of certiﬁcate validation.
Unsurprisingly, ASN.1 parsing is a recurrent source of
vulnerabilities in TLS and related software, dating back
at least to 2004 (MS04-007, a remote code execution vul-
nerability), and 3 vulnerabilities in 2014 (CVEs 2014-
8275, 2014-1568 and 2014-1569). Two examples are
CVE-2015-1182, the use of uninitialised memory during
parsing in PolarSSL, which could lead to remote code
execution, and CVE-2014-1568, a case of insufﬁciently
selective parsing in NSS, which allowed the attacker to
construct a fake signed certiﬁcate from a large space of
byte sequences interpreted as the same certiﬁcate.
This class of errors is due to ambiguity in the speciﬁ-
cation, and ad-hoc parsers in most TLS implementations.
nqsb-TLS avoids this class of issues entirely by separat-
ing parsing from the grammar description (§4.4).
Certiﬁcate validation Closely related to ASN.1 pars-
ing is certiﬁcate validation. X.509 certiﬁcates are nested
data structures standardised in three versions and with
various optional extensions, so validation involves pars-
ing, traversing, and extracting information from complex
compound data. This opens up the potential for errors
both in the control-ﬂow logic of this task and in the in-
terpretation of certiﬁcates (multiple GnuTLS vulnerabil-
ities are related to lax interpretation of the structures).
In 2014, there were 5 issues related to certiﬁcate val-
idation. A prominent example in the control-ﬂow logic
is GnuTLS (CVE-2014-0092), where a misplaced goto
statement lead to certiﬁcate validation being skipped if
any intermediate certiﬁcate was of X.509 version 1.
Many implementations interleave the complicated
X.509 certiﬁcate validation with parsing the ASN.1
grammar, leading to a complex control ﬂow with sub-
tle call chains. This illustrates another way in which the
choice of programming language and style can lead to
errors: the normal C idiom for error handling uses goto
and negative return values, while in nqsb-TLS we return
errors explicitly as values and have to handle all possi-
ble variants. OCaml’s typechecker and pattern-match ex-
haustiveness checker ensures this at compile time (§4.3).
State machine errors TLS consists of several sub-
protocols that are multiplexed at the record level: (i) the
handshake that initially establishes the secure connection
and subsequently renegotiates it; (ii) alerts that signal
out-of-band conditions; (iii) cipher spec activation notiﬁ-
cations; (iv) heartbeats; and (v) application data. The ma-
jority of the TLS protocol speciﬁcation covers the hand-
shake state machine. The path to a successful negotia-
tion is determined during the handshake and depends on
the ciphersuite, protocol version, negotiated options, and
USENIX Association  
24th USENIX Security Symposium  227
5
conﬁguration, such as client authentication. Errors in the
handshake logic often lead to a security breach, allowing
attackers to perform active man-in-the-middle (MITM)
insertion, or to passively gain knowledge over the nego-
tiated security parameters.
There were 10 vulnerabilities in this class. Some led
to denial-of-service conditions caused (for example) by
NULL-pointer dereferences on receipt of an unexpected
message, while others lead to a breakdown of the TLS
security guarantees. An extensive study of problems in
TLS state machine implementations has been done in the
literature [2, 11].
A prominent example is Apple’s “goto fail” (CVE-
2014-1266), caused by a repetition of a goto state-
ment targeting the cleanup block of the procedure re-
sponsible for verifying the digital signature of the
ServerKeyExchange message. This caused the proce-
dure to skip the subsequent logic and return the value
registered in the output variable. As this variable was
initialised to “success”, the signature was never veriﬁed.
Another typical example is the CCS Injection in
OpenSSL (CVE-2014-0224).
ChangeCipherSpec is
the message signalling that the just negotiated security
parameters are activated. In the TLS state machine, it is
legal only as the penultimate message in the handshake
sequence. However, both OpenSSL (CVE-2014-0224)
and JSSE (CVE-2014-6593) allowed a CCS message be-
fore the actual key exchange took place, which activated
predictable initial security parameters. A MITM attacker
can exploit this by sending a CCS during handshake,
causing two parties to establish a deterministic session
key and defeating encryption.
Some of these errors are due to missing preconditions
of state machine transitions in the speciﬁcation. In nqsb-
TLS, our code structure (§4.1) makes the need to con-
sider each of these clear. We encode the state machine
explicitly, while state transitions default to failure.
Protocol bugs In 2014, two separate issues in the pro-
tocol itself were described: POODLE and triple hand-
shakes. POODLE is an attack on SSL version 3, which
does not specify the value of padding bytes in CBC
mode. Triple handshake [3] is a MITM attack where one
negotiates sessions with the same security parameters
and resumes. We do not claim to prevent nor solve those
protocol bugs in nqsb-TLS, we mitigate triple handshake
by resuming sessions only if the extended master se-
cret [4] was used. Furthermore, we focus on a modern
subset of the protocol, not including SSL version 3, so
neither attack is applicable.