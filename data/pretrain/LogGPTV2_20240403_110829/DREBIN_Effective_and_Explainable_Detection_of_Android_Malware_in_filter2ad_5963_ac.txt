ular, we consider the methods Kirin [? ], RPC [? ] and
the approach by Peng et al. [? ], where we implement
the latter using support vector machines instead of a ba-
sic Naive Bayes classier. The results of this experiments
are shown in Figure 3 as ROC curve, that is, the detec-
tion of malware (true-positive rate) is plotted against the
number of false alarms (false-positive rate) for different
thresholds of the detection methods.
Figure 3: Detection performance of DREBIN and the re-
lated detection approaches.
DREBIN signiﬁcantly outperforms the other ap-
proaches and detects 93% of the malware samples at
a false-positive rate of 1%, corresponding to one false
alarm when installing 100 applications. The other ap-
proaches attain only a detection rate between 10%–50%
at this false-positive rate. As Kirin and RPC both con-
sider only a subset of the requested permissions, they
have obvious limitations in detecting malicious applica-
tions. Even the method by Peng et al. which considers all
Id
A
B
C
D
E
F
G
H
I
J
Family
FakeInstaller
DroidKungFu
Plankton
Opfake
GingerMaster
BaseBridge
Iconosys
Kmin
FakeDoc
Geinimi
#
925
667
625
613
339
330
152
147
132
92
Id
K
L
M LinuxLotoor
N
GoldDream
O MobileTx
FakeRun
P
SendPay
Q
Gappusin
R
Imlog
S
T
SMSreg
#
Family
Adrd
91
DroidDream 81
70
69
69
61
59
58
43
41
Table 1: Top 20 malware families in our dataset and the
number of their occurrences (#). The family names are
derived from the labels of the Kaspersky AV scanner.
(c) Top malware families in our dataset.
(a) Detection performance as ROC curve.
(b) Detection per malware family.
Fig. 4: Detection performance of DREBIN and related approaches.
families is much larger than of other families the detection
result mainly depends on these families. To address this prob-
lem one can use the same number of samples for each family.
However, this leads to a distribution that signiﬁcantly differs
from reality. Instead we evaluate the detection performance for
each of the 20 largest malware families separately. The family
names and the number of samples for each family can be found
in Table 4(c) and the detection performance of DREBIN for
each family is illustrated in Figure 4(b).
DREBIN is able to reliably detect all families with an
average accuracy of 93% at a false-positive rate of 1%. In
particular, all families show a detection rate of more than 90%,
where three of them can be identiﬁed perfectly (H, O, P). There
is only one malware family which cannot be reliably detected
by DREBIN. This family is Gappusin (R) and we examine its
low performance in the next section. It should be pointed out
that there seems to be no dependency between the size of a
malware family and its detection rate as long as the number of
samples is sufﬁciently high and allows the SVM to generalize
its features.
4) Detection of unknown malware families: DREBIN uses
known malware for learning its detection model. It is thus
important to assess how many samples of a family need to
be known to reliably detect this family. To study this issue,
we conduct two additional experiments where we limit the
number of samples for a particular family in the training set.
In the ﬁrst experiment we provide no samples of the family,
corresponding to a totally unknown malware strain. In the
second experiment, we put 10 randomly chosen samples of the
family back into the training set, thus simulating the starting
spread of a new family.
The results of the two experiments are shown in Figure 5,
where the detection rate is shown for 0 and 10 available
samples in the training set for each family. If no samples are
available for learning, it is difﬁcult for DREBIN to detect a
family, as no discriminative patterns can be discovered by
the SVM. However, only very few samples are necessary
to generalize the behavior of most malware families. With
only 10 samples in the training set, the average detection
performance increases by more than 25 percent. Three families
can even be detected perfectly in this setting. The reason
In summary, DREBIN provides an effective detection of An-
droid malware and outperforms related detection approaches
as well as several anti-virus scanners. While DREBIN can not
spot unknown malware from the very start, only few samples
of each family are required for achieving a reliable detection.
An overview of the top 20 malware families in our
dataset is provided in Table 1 including several families
that are currently actively distributed in application mar-
kets. Note that only the top 20 families are shown and
our dataset contain 1,227 further malicious samples.
C. Explanations
3.2 Detection Performance
In our ﬁrst experiment, we evaluate the detection perfor-
mance of DREBIN and related static approaches.
Apart from its detection performance a strength of DREBIN
lies in its ability to explain the obtained results. This allows us
to check whether the extracted features which contribute to the
detection ﬁt to common malware characteristics. In this section
6
we ﬁrst take a look at four popular malware families and
analyze how features with high weights allow conclusions to
be drawn about their behavior. We then inspect false positives
and false negatives of DREBIN in detail.
1) Explanation for malware families: To study the expla-
nations provided by DREBIN we consider four well-known
malware families, namely FakeInstaller, GoldDream [23], Gin-
gerMaster [22] and DroidKungFu [24]. For each sample of
these families we determine the features with the highest
7
Malware family
Top 5 features
FakeInstaller
DroidKungFu
GoldDream
GingerMaster
Feature s
sendSMS
SEND_SMS
android.hardware.telephony
sendTextMessage
READ_PHONE_STATE
SIG_STR
system/bin/su
BATTERY_CHANGED_ACTION
READ_PHONE_STATE
getSubscriberId
sendSMS
lebar.gicp.net
DELETE_PACKAGES
android.provider.Telephony.SMS_RECEIVED
getSubscriberId
USER_PRESENT
getSubscriberId
READ_PHONE_STATE
system/bin/su
HttpPost
Feature set
S7 Suspicious API Call
S2 Requested permissions
S1 Hardware components
S5 Restricted API calls
S2 Requested permissions
S4 Filtered intents
S7 Suspicious API calls
S4 Filtered intents
S2 Requested permissions
S7 Suspicious API calls
S7 Suspicious API calls
S8 Network addresses
S2 Requested permission
S4 Filtered intents
S7 Suspicious API calls
S4 Filtered intents
S7 Suspicious API calls
S2 Requested permissions
S7 Suspicious API calls
S7 Suspicious API calls
Weight ws
1.12
0.84
0.57
0.52
0.50
2.02
1.30
1.26
0.54
0.49
1.07
0.93
0.58
0.56
0.53
0.67
0.64
0.55
0.44
0.38
TABLE III: Top features for the malware families FakeInstaller, DroidKungFu, GoldDream and GingerMaster.
contribution to the classiﬁcation decision and average the
results over all members of a family. The resulting top ﬁve
features for each malware family are shown in Table III. For
clarity we presents the exact features rather then the explaining
sentences introduced in Section II-D.
•
•
•
FakeInstaller is currently the most widespread mal-
ware. The members of this family hide their ma-
licious code inside repackaged versions of popular
applications. During the installation process the mal-
ware sends expensive SMS messages to premium
services owned by the malware authors. Even on
the ﬁrst sight, three of the extracted features indi-
cate that the malware uses SMS functionality, where
android.hardware.telephony is implicitly added
to the manifest ﬁle as soon as an application requests
permissions to use SMS functionality.
DroidKungFu tries to exploit several vulnerabilities in
earlier Android versions to gain root access and steal
sensitive data from the device. Its intention to gain root
access is reﬂected by the feature system/bin/su.
The invocation of getSubscriberId() indicates
that the malware tries to access sensitive data. The two
intents BATTERY_CHANGED_ACTION and SIG_STR are
ﬁltered by a broadcast receiver component which is
part of many DroidKungFu samples. Both intents are
used as a trigger to start a malicious service in the
background as soon as a certain event occurs, for
instance a low battery status.
GoldDream is a Trojan which monitors an infected
device, collects sensitive data and records infor-
mation from received SMS messages. The feature
Telephony.SMS_RECEIVED directly hints us to the
reading of SMS messages. After the malware has
collected sufﬁcient data, it sends the data to an external
•
server, whose hostname is second ranked in the feature
list. Furthermore, the malware is able to install and
delete packages as well as to send SMS messages,
which is also reﬂected in the extracted features.
GingerMaster is also a Trojan application which is
often bundled with benign applications and tries to
gain root access, steals sensitive data and sends it to
a remote server. Similar to the DroidKungFu family
the malware starts its malicious service as soon as
it receives a BOOT_COMPLETED or USER_PRESENT
intent. Again a signiﬁcant part of this behavior can
be reconstructed just by looking at the top features.
To study the contribution of the different feature sets to the
detection of malware in general, we extract the top 5 features
for all of the malware families in our dataset. The results are
presented in Table IV. Although the requested permissions
occur in the top features of all families, it is evident that
this feature set alone is not sufﬁcient to ensure a reliable
detection. In particular, each feature set occurs at least once
in the table which clearly indicates that all sets are necessary
for the detection of Android malware.
2) False and missing detections: We ﬁnally examine be-
nign applications which are wrongly classiﬁed as malware by
DREBIN. Similar to malicious applications, most of these sam-
ples use SMS functionality and access sensitive data, which
is reﬂected in high weights of the corresponding features.
Moreover, these samples often show only very little benign
behavior and thus trigger false alarms. Fortunately, the ability
of DREBIN to output explainable results can help the user to
decide whether a suspicious looking functionality is indeed
malicious or needed for the intented purpose of the application.
A similar situation occurs when DREBIN classiﬁes samples of
the Gappusin family [19] as benign. Although it is in many
cases possible to extract features which match the description
8
Feature sets
B
C
E
F
G
A
X
Malware families
I
K
J
L M N
O
P
Q
R
S
T
S1 Hardware components
S2 Requested permissions X X X X X X X X X X X X X X X X X X X X
S3 App components
S4 Filtered intents
S5 Restricted API calls
S6 Used permissions
S7 Suspicious API calls
S8 Network addresses
X X X X X X X X X
X X X
X
X
X X X
X X X X
X
X X
X X
X X
X X
X
X
X
X
X
X
X
X
D
X
X
X
H
X
X
TABLE IV: Contribution of the feature sets to the detection of malware families.
of the Gappusin family—amongst others the hostname of
the external server—there are too few malicious features to
identify the samples as malware. Gappusin mainly acts as a
downloader for further malicious applications and thus does
not exhibit common malicious functionality, such as theft of
sensitive data.
D. Run-time Performance
Core 2 Duo with 4GB RAM) DREBIN achieves a remarkable
analysis performance of 750 ms per application, which enables
scanning 100,000 applications in less than a day.
it
is still
While the computing power of mobile devices is rapidly
increasing,