# 配置IDEA
## JSP
![image-20230306154621154](../../.gitbook/assets/image-20230306154621154.png)
配置lib目录
![image-20230306155101263](../../.gitbook/assets/image-20230306155101263.png)
## mybatis+springboot
使用MyBatis和Spring Boot的示例代码的典型目录结构
```css
├── src
│   ├── main
│   │   ├── java
│   │   │   └── com
│   │   │       └── example
│   │   │           ├── controller
│   │   │           │   └── UserController.java
│   │   │           ├── mapper
│   │   │           │   └── UserMapper.java
│   │   │           ├── model
│   │   │           │   └── User.java
│   │   │           ├── service
│   │   │           │   └── UserService.java
│   │   │           └── MyApplication.java
│   │   └── resources
│   │       ├── mapper
│   │       │   └── UserMapper.xml
│   │       └── application.properties
│   └── test
│       └── java
│           └── com
│               └── example
│                   └── service
│                       └── UserServiceTest.java
└── pom.xml
```
创建一个maven项目，名字是example。
![image-20230306165339713](../../.gitbook/assets/image-20230306165339713-168268412432829.png)
首先，您需要在pom.xml中添加以下依赖项：
```
    4.0.0
    com.example
    mybatis-spring-boot-demo
    1.0.0
        org.springframework.boot
        spring-boot-starter-parent
        2.6.3
        11
        3.5.8
        8.0.27
            org.springframework.boot
            spring-boot-starter-web
            org.mybatis.spring.boot
            mybatis-spring-boot-starter
            2.3.0
            mysql
            mysql-connector-java
            ${mysql.connector.version}
            org.mybatis.spring.boot
            mybatis-spring-boot-starter
            2.1.4
            org.mybatis
            mybatis
            3.5.6
            org.mybatis
            mybatis-spring
            2.0.6
                org.springframework.boot
                spring-boot-maven-plugin
                org.apache.maven.plugins
                maven-compiler-plugin
                3.8.1
                    1.8
                    1.8
```
MyApplication.java
```
package com.example;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
@MapperScan("com.example.mapper")
public class MyApplication {
    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}
```
application.properties
```
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.32.130:3306/test?characterEncoding=utf8&useSSL=true
spring.datasource.username=root
spring.datasource.password=123456
mybatis.type-aliases-package=com.example.model
mybatis.mapper-locations=classpath:mapper/*.xml
```
UserController.java
```
package com.example.controller;
import com.example.model.User;
import com.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
@RestController
public class UserController {
    @Autowired
    private UserService userService;
    @GetMapping(value = "/users/{id}", produces = "application/json")
    public ResponseEntity getUser(@PathVariable String id) {
        User user = userService.findById(id);
        return ResponseEntity.ok(user);
    }
}
```
User.java
```
package com.example.model;
public class User {
    private Long id;
    private String name;
    private Integer age;
    public User() {
        // empty constructor required by some frameworks
    }
    public User(Long id, String name, Integer age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public Integer getAge() {
        return age;
    }
    public void setAge(Integer age) {
        this.age = age;
    }
}
```
UserService.java
```
package com.example.service;
import com.example.mapper.UserMapper;
import com.example.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class UserService {
    @Autowired
    private UserMapper userMapper;
    public User findById(String id) {
        return userMapper.findById(id);
    }
}
```
UserMapper.java
```java
package com.example.mapper;
import com.example.model.User;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
@Mapper
public interface UserMapper {
    @Select("SELECT * FROM users WHERE id = '${id}'")
    User findById(@Param("id") String id);
}
```
------
或者写成xml文件（src/main/resources/mapper/UserMapper.xml）
```xml
        SELECT * FROM users WHERE id = #{id}
```
去掉原来的select语句
```java
@Mapper
public interface UserMapper {
    User findById(@Param("id") Long id);
}
```
------
修复代码：将`$`修改为`#`
------
order by修复
```
  SELECT * FROM users
    ORDER BY ${orderBy}
```
in 修复
```java
public class ListToStringTypeHandler extends BaseTypeHandler> {
    @Override
    public void setNonNullParameter(PreparedStatement ps, int i, List parameter, JdbcType jdbcType)
            throws SQLException {
        ps.setString(i, StringUtils.join(parameter, ","));
    }
    @Override
    public List getNullableResult(ResultSet rs, String columnName) throws SQLException {
        return null;
    }
    @Override
    public List getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
        return null;
    }
    @Override
    public List getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
        return null;
    }
}
```
```xml
  SELECT * FROM users
  WHERE id IN (#{ids, typeHandler=com.example.type.ListToStringTypeHandler})
```
------
```
  SELECT * FROM users WHERE id IN
    #{id}
```
```
@Autowired
private UserMapper userMapper;
public List findUsersByIds(List ids) {
  return userMapper.findUsersByIds(ids);
}
```
like修复
```xml
  SELECT * FROM users
  WHERE name LIKE CONCAT('%', #{name}, '%')
```