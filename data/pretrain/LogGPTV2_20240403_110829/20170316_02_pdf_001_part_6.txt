decNumberFromUInt32(number, u)
This function is used to convert an unsigned 32-bit binary integer to a decNumber. The arguments are:
number (decNumber *) Pointer to the structure that will received the converted integer. This
must have space for the digits needed to represent the value of u, which may need up to
ten digits.
u (uint32_t) The integer to be converted.
Returns number. No error is possible from this function.
decNumberGetBCD(number, bcd)
This function is used to convert the coefficient of a decNumber to Binary Coded Decimal, one digit
(value 0–9) per byte. The arguments are:
number (decNumber *) Pointer to the structure containing the coefficient to be converted.
bcd (uint8_t *) Pointer to the byte array which will receive the converted coefficient; the
most significant digit of the coefficient will be placed in bcd[0]. The first number-
>digits elements of bcd will have their values set; no other elements are affected.
Returns bcd. No error is possible from this function.
decNumberIsCanonical(number)
This function is used to test whether the encoding of a decNumber is canonical.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) always, because decNumbers always have canonical encodings (the function is
provided for compatibility with the IEEE 754 operation isCanonical). This function may be
implemented as a macro; no error is possible.
decNumberIsFinite(number)
This function is used to test whether a number is finite.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is finite, or 0 (false) otherwise (that is, it is an infinity or a NaN). This
function may be implemented as a macro; no error is possible.
decNumberIsInfinite(number)
This function is used to test whether a number is infinite.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is infinite, or 0 (false) otherwise (that is, it is a finite number or a NaN).
This function may be implemented as a macro; no error is possible.
Version 3.68 Module descriptions 43
decNumberIsNaN(number)
This function is used to test whether a number is a NaN (quiet or signaling).
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is a NaN, or 0 (false) otherwise. This function may be implemented as a
macro; no error is possible.
decNumberIsNegative(number)
This function is used to test whether a number is negative (either minus zero, less than zero, or a NaN
with a sign of 1). Note that in the decFloats packages, this is called (for example) decQuadIsSigned, and
decQuadIsNegative does not include zeros or NaNs.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is negative, or 0 (false) otherwise. This function may be implemented as
a macro; no error is possible.
decNumberIsNormal(number)
This function is used to test whether a number is normal (that is, finite, non-zero, and not subnormal).
The arguments are:
number (decNumber *) Pointer to the structure whose value is to be tested.
context (decContext *) Pointer to the context (the value of emin is used to determine if a finite
number is normal or subnormal).
Returns 1 (true) if the number is normal, or 0 (false) otherwise. This function may be implemented as
a macro; no error is possible.
decNumberIsQNaN(number)
This function is used to test whether a number is a Quiet NaN.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is a Quiet NaN, or 0 (false) otherwise. This function may be
implemented as a macro; no error is possible.
decNumberIsSNaN(number)
This function is used to test whether a number is a Signaling NaN.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is a Signaling NaN, or 0 (false) otherwise. This function may be
44 Module descriptions Version 3.68
implemented as a macro; no error is possible.
decNumberIsSpecial(number)
This function is used to test whether a number has a special value (Infinity or NaN); it is the inversion
of decNumberIsFinite (see page 43).
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is special, or 0 (false) otherwise. This function may be implemented as a
macro; no error is possible.
decNumberIsSubnormal(number)
This function is used to test whether a number is subnormal (that is, finite, non-zero, and magnitude
less than 10emin).
The arguments are:
number (decNumber *) Pointer to the structure whose value is to be tested.
context (decContext *) Pointer to the context (the value of emin is used to determine if a finite
number is normal or subnormal).
Returns 1 (true) if the number is subnormal, or 0 (false) otherwise. This function may be implemented
as a macro; no error is possible.
decNumberIsZero(number)
This function is used to test whether a number is a zero (either positive or negative).
The argument is:
number (decNumber *) Pointer to the structure whose value is to be tested.
Returns 1 (true) if the number is zero, or 0 (false) otherwise. This function may be implemented as a
macro; no error is possible.
decNumberRadix()
This function returns the radix (number base) used by the decNumber package. This always returns
10. This function may be implemented as a macro; no error is possible.
decNumberReduce(number, rhs, context)
This function has the same effect as decNumberPlus except that the final result is set to its simplest
(shortest) form without changing its value. That is, a non-zero number which has any trailing zeros in
the coefficient has those zeros removed by dividing the coefficient by the appropriate power of ten and
adjusting the exponent accordingly, and a zero has its exponent set to 0.
The decNumberTrim function (see page 46) can be used to remove only fractional trailing zeros.
This function was previously called decNumberNormalize (and is still available under that name for
compatibility).
Version 3.68 Module descriptions 45
decNumberSetBCD(number, bcd, n)
This function is used to set the coefficient of a decNumber from a Binary Coded Decimal array which
has one digit (value 0–9) per byte. The arguments are:
number (decNumber *) Pointer to the structure whose coefficient is to be set.
bcd (uint8_t *) Pointer to the byte array which provides the coefficient; the most
significant digit of the coefficient is at bcd[0] and the least significant is at bcd[n-1].
n (uint32_t *) Count of the BCD digits to be converted.
number must have space for at least n digits. If number is a NaN, or is Infinite, or is to become a zero, n
must be 1 and bcd[0] must be zero.
Returns number. No error is possible from this function.
decNumberToInt32(number, context)
This function is used to convert a decNumber to a signed (two’s complement) 32-bit binary integer.
The arguments are:
number (decNumber *) Pointer to the structure that will have its value converted.
context (decContext *) Pointer to the context (used only for reporting an error).
The DEC_Invalid_operation condition is raised if number does not have an exponent of 0, or if it
is a NaN or Infinity, or if it is out-of-range (cannot be represented). In this case the result is 0. Note
that a -0 is not out of range (it is numerically equal to zero and will be converted without raising the
condition).
Returns the signed integer (int32_t).
decNumberToUInt32(number, context)
This function is used to convert a decNumber to an unsigned 32-bit binary integer. The arguments are:
number (decNumber *) Pointer to the structure that will have its value converted.
context (decContext *) Pointer to the context (used only for reporting an error).
The DEC_Invalid_operation condition is raised if number does not have an exponent of 0, or if it
is a NaN or Infinity, or if it is out-of-range (cannot be represented). In this case the result is 0. Note
that a -0 is not out of range (but all values less than zero are).
Returns the unsigned integer (uint32_t).
decNumberTrim(number)
This function is used to remove insignificant trailing zeros from a number, uncoditionally. That is, if
the number has any fractional trailing zeros they are removed by dividing the coefficient by the
appropriate power of ten and adjusting the exponent accordingly. The decNumberReduce function (see
page 45) can be used to remove all trailing zeros.
The argument is:
number (decNumber *) Pointer to the structure whose value is to be trimmed.
46 Module descriptions Version 3.68
Returns number. No error is possible from this function.
decNumberVersion()
This function returns a pointer (char *) to a human-readable description of the version of the
decNumber package being run. The string pointed to will have at most 16 characters and will be a
constant, and will comprise two words (the name and a decimal number identifying the version)
separated by a blank. For example:
decNumber 3.40
No error is possible from this function.
decNumberZero(number)
This function is used to set the value of a decNumber structure to zero.
The argument is:
number (decNumber *) Pointer to the structure to be set to 0. It must have space for one digit.
Returns number. No error is possible from this function.
Version 3.68 Module descriptions 47
decimal32, decimal64, and decimal128 modules
The decimal32, decimal64, and decimal128 modules define the data structures and conversion
functions for the IEEE 754 decimal-encoded compressed decimal formats which are 32, 64, or 128
bits (4, 8, or 16 bytes) long, respectively. These provide up to 7, 16, or 34 digits of decimal precision
in a compact and machine-independent form. Details of the formats are available at:
http://speleotrove.com/decimal/decbits.html
These modules provide the interface between the compressed numbers and the decNumber internal
format (and also provide string conversions). The decFloats modules (see page 52) provide arithmetic
and other functions which work on data in the same formats directly. Example 7 and Example 8 in the
User’s Guide (see page 19) show how to work with data in the formats with or without using the
decNumber module.
Apart from the different lengths and ranges of the numbers, these three modules are identical, so this
section just describes the decimal64 module. The definitions and functions for the other two formats
are the same, except for the obvious name and value changes.
In this implementation each format is represented as an array of unsigned bytes. There is therefore just
one field in the decimal64 structure:
bytes The bytes field represents the eight bytes of a decimal64 number, using Densely Packed
Decimal encoding for the coefficient.13
The storage of a number in the bytes array is assumed to follow the byte ordering (“endianness”) of
the computing platform (if big-endian, then bytes[0] contains the sign bit of the format). The code
in these modules requires that the DECLITEND tuning parameter (see page 70) be set to match the
endianness of the platform.
Note that the equivalent structures in the decFloats modules are identical except for their names. It is
therefore safe to cast pointers between them if they are the same size (for example between decimal64
and decDouble). This means that these modules can be used as proxies between the decNumber
module and the decFloats modules.
The decimal64 module includes private functions for coding and decoding Densely Packed Decimal
data; these functions are shared by the other compressed format modules. Hence, when using any of
these three then decimal64.c must be compiled too.
Definitions
The decimal64.h header file defines the decimal64 data structure described above. It includes the
decNumber.h header file, to simplify use, and (if not already defined) it sets the DECNUMDIGITS
constant to 16, so that any declared decNumber will be the right size to contain any decimal64
number.
If more than one of the three decimal format header files are used in a program, they must be included
in decreasing order of size so that the largest value of DECNUMDIGITS will be used.
The decimal64.h header file also contains:
• Constants defining aspects of decimal64 numbers, including the maximum precision, the
minimum and maximum (adjusted) exponent supported, the bias applied to the exponent, the
13 See http://speleotrove.com/decimal/DPDecimal.html for a summary of Densely Packed
Decimal encoding.
48 Module descriptions Version 3.68
length of the number in bytes, and the maximum number of characters in the string form of the
number (including terminator)
• Definitions of the public functions in the decimal64 module.
The decimal64 module also contains the shared routines for compressing and expanding Densely
Packed Decimal data, and uses the decDPD.h header file. The latter contains look-up tables which
are used for encoding and decoding Densely Packed Decimal data (only three of of the tables in the
header file are used). These tables are automatically generated and should not need altering.
Functions
The decimal64.c source file contains the public functions defined in the header file. These
comprise conversions to and from strings and decNumbers, and some utilities.
When a decContext structure is used to report errors, the same rules are followed as for other modules.
That is, a trap may be raised, etc.
decimal64FromString(decimal64, string, context)
This function is used to convert a character string to decimal64 format. It implements the to-number
conversion in the arithmetic specification (that is, it accepts subnormal numbers, NaNs, and infinities,
and it preserves the sign and exponent of 0). If necessary, the value will be rounded to fit.
The arguments are:
decimal64 (decimal64 *) Pointer to the structure to be set from the character string.
string (char *) Pointer to the input character string. This must be a valid numeric string, as
defined in the specification. The string will not be altered.
context (decContext *) Pointer to the context structure which controls the conversion, as for
the decNumberFromString function (see page 33) except that the precision and exponent
range are fixed for each format (the values of emax, emin, and digits are ignored).
Returns decimal64.
Possible errors are DEC_Conversion_syntax (the string does not have the syntax of a number),
DEC_Overflow (the adjusted exponent of the number is positive and is greater than emax for the
format), or DEC_Underflow (the adjusted exponent of the number is negative and is less than emin for
the format and the conversion is not exact). If one of these conditions is set, the decimal64 structure
will have the value NaN, ±Infinity or the largest possible finite number, or a finite (possibly
subnormal) number respectively, with the same sign as the converted number after overflow or
underflow.
decimal64ToString(decimal64, string)
This function is used to convert a decimal64 number to a character string, using scientific notation if
an exponent is needed (that is, there will be just one digit before any decimal point). It implements the
to-scientific-string conversion in the arithmetic specification.
The arguments are:
decimal64 (decimal64 *) Pointer to the structure to be converted to a string.
Version 3.68 Module descriptions 49
string (char *) Pointer to the character string buffer which will receive the converted number.
It must be at least DECIMAL64_String (24) characters long.
Returns string; no error is possible from this function.
decimal64ToEngString(decimal64, string)
This function is used to convert a decimal64 number to a character string, using engineering notation
(where the exponent will be a multiple of three, and there may be up to three digits before any decimal
point) if an exponent is needed. It implements the to-engineering-string conversion in the arithmetic
specification.
The arguments and result are the same as for the decimal64ToString function, and similarly no error is
possible from this function.
decimal64FromNumber(decimal64, number, context)
This function is used to convert a decNumber to decimal64 format.
The arguments are:
decimal64 (decimal64 *) Pointer to the structure to be set from the decNumber. This may
receive a numeric value (including subnormal values and -0) or a special value.
number (decNumber *) Pointer to the input structure. The decNumber structure will not be
altered.
context (decContext *) Pointer to a context structure whose status field is used to report any
error and whose other fields are used to control rounding, etc., as required.
Returns decimal64.
The possible errors are as for the decimal64FromString function (see page 49), except that
DEC_Conversion_syntax is not possible.
decimal64ToNumber(decimal64, number)
This function is used to convert a decimal64 number to decNumber form in preparation for arithmetic
or other operations.
The arguments are:
decimal64 (decimal64 *) Pointer to the structure to be converted to a decNumber. The decimal64
structure will not be altered.
number (decNumber *) Pointer to the result structure. It must have space for 16 digits of
precision.
Returns number; no error is possible from this function.
decimal64Canonical(decimal64, source)
This function is used to ensure that a decimal64 number is encoded with the canonical form. That is,
all declets use the preferred 1000 encodings and an infinity has a coefficient of zero.
50 Module descriptions Version 3.68
The arguments are:
decimal64 (decimal64 *) Pointer to the structure to receive a copy of source, with canonical
encoding.
source (decimal64 *) Pointer to the structure to be converted to a canonical encoding.
Returns decimal64; no error is possible from this function.
decimal64IsCanonical(decimal64)