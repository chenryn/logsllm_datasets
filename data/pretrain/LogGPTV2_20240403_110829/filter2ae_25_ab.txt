在`Hex View`窗口中快速浏览固件时，发现了一些有规律的内容，如下。其中，存在一些连续的内容(以4字节为单位)，其最后2个字节均相同，对应到`IDA
View`窗口中，分别为指向代码片段的地址和指向字符串的地址。由于此时加载地址不正确，故看到的字符串引用比较奇怪。
> 当然，文件中还存在一些其他的规律，比如以8字节为单位，以16字节为单位等等。
![
](https://images.seebug.org/content/images/2021/06/1de98af1-b4cb-4095-be16-88b9a22c2387.png-w331s)
根据上述规律可以从固件文件中提取出所有的固定地址，一方面可以缩小加载地址所在的范围，另一方面可以利用这些固定地址去判断尝试的加载地址是否正确。[Magpie](https://www.anquanke.com/post/id/198276)根据代码片段地址引用处是否是函数的序言指令来判断加载地址是否正确，由于函数的序言指令需要考虑多种情况，这里采用另一种简单的方式：根据字符串交叉引用是否正确来进行判断。
针对该`eCos`固件，确定其加载地址的方法如下：
(1)
以4字节为单位，判断邻近内容的低/高2字节是否相同，提取固件中所有符合规律的固定地址。考虑到大小端差异，在实际比较时以2字节为单位，判断相邻浅蓝色框(或红色框)内的内容是否相同。
![
](https://images.seebug.org/content/images/2021/06/59c7d6aa-9ee7-40b8-95ec-a7d7e22f3f8e.png-w331s)
(2)
提取出所有的固定地址后，先筛掉不合法的地址，然后对剩下的地址进行排序，排序后的结果中的第一个地址为加载地址的上限。同时，排序后的结果中前半部分为指向代码片段的地址，后半部分为指向字符串的地址。从中选择一个地址，将指向字符串的地址和指向代码的地址分开。之后，随机从字符串地址列表中选取一定数量的地址，作为后续判断的依据。
> 模糊的正确，只需要保证分到字符串地址列表中的地址均正确即可，因此可以尽量从列表后半部分取，至于是否有字符串引用地址分到了代码片段引用地址列表中不重要。
(3)
在确定的加载地址范围内逐步进行尝试，同时针对每个尝试的加载地址，判断之前选取的每个字符串引用地址指向的字符串是否”正确”，并记录下正确的个数。对应字符串地址”命中”最多的那个加载地址，很有可能就是正确的加载地址。
>
> 判断字符串引用地址是否正确，可根据该地址是否指向完整字符串的开头判断，即对应地址处的前一个字节是否为`'\x00'`。当然，也存在一些字符串引用地址指向某个完整字符串的中间(“字符串复用”)，但大部分的地址还是指向完整字符串的开头。
根据上述思路，推测出了该`eCos`固件的加载地址为`0x80040000`。通过分析部分函数逻辑和字符串交叉引用，验证该加载地址是正确的。另外，采用该方法对另外几个`eCos`固件(包括其他厂商的)进行分析，也可以得出正确的加载地址，说明该方法是可行的。当然，该方法还存在可以改进或优化的地方，不过目前暂时够用了。
     python find_ecos_load_addr.py
     ...
    [+] Top 10 string hit count ...
     load_base: 0x80040000, str_hit_count: 19
     load_base: 0x80019a30, str_hit_count: 11
     load_base: 0x800225a0, str_hit_count: 11
     load_base: 0x80041cd0, str_hit_count: 11
     load_base: 0x800442d0, str_hit_count: 11
     load_base: 0x80019680, str_hit_count: 10
     load_base: 0x80019940, str_hit_count: 10
     load_base: 0x80019af0, str_hit_count: 10
     load_base: 0x80026090, str_hit_count: 10
     load_base: 0x80008b90, str_hit_count: 9
    [+] Possible load_base: 0x80040000
### binwalk magic添加
设置正确的加载地址后，在对文件进行分析时，在文件头部发现与`VSR table`初始化相关的代码，如下。
    .text:80040118                 li      $gp, 0x809A1140
    .text:80040120                 li      $a0, 0x8099B7D0
    .text:80040128                 move    $sp, $a0
    .text:8004012C                 li      $v0, loc_80040224
    .text:80040134                 li      $v1, 0x80000200
    .text:8004013C                 sw      $v0, 4($v1)
    .text:80040140                 sw      $v0, 8($v1)
    .text:80040144                 sw      $v0, 0xC($v1)
    .text:80040148                 sw      $v0, 0x10($v1)
    .text:8004014C                 sw      $v0, 0x14($v1)
    .text:80040150                 sw      $v0, 0x18($v1)
    .text:80040154                 sw      $v0, 0x1C($v1)
    .text:80040158                 sw      $v0, 0x20($v1)
    .text:8004015C                 sw      $v0, 0x24($v1)
    # ...
参考文章[ecos vector.S
分析II](https://blog.csdn.net/qq_20405005/article/details/77971929)中对`eCos`异常中断的初始化及处理的介绍，对照上述代码可知，`0x80000200`为`hal_vsr_table`的地址，而`0x80040224`则为`__default_exception_vsr`的地址。根据前面推测出的加载地址`0x80040000`，猜测该地址与`__default_exception_vsr`有关，即根据`__default_exception_vsr`的地址，考虑地址对齐，可以推测出对应的加载地址。
    # mips cpu 产生exception/interrupt后，cpu 会跳到特定的几个地址上,
    # BEV=0时，一般的在0x80000180,当然还有些其他地址，详细的要去看mips书籍
    # 这里有这样的代码
    FUNC_START(other_vector)
        mfc0    k0,cause            # K0 = exception cause
        nop
        andi    k0,k0,0x7F          # isolate exception code
        la      k1,hal_vsr_table    # address of VSR table
        add     k1,k1,k0            # offset of VSR entry
        lw      k1,0(k1)            # k1 = pointer to VSR
        jr      k1              # go there
        nop                     # (delay slot)
    FUNC_END(other_vector)
    # 从cause 里取出exception ExcCode,然后到hal_vsr_table 取相应的处理vsr, hal_vsr_table的内容是由 hal_mon_init 填充的
        .macro  hal_mon_init
        la      a0,__default_interrupt_vsr
        la      a1,__default_exception_vsr  #  利用`binwalk`对另外几个`eCos`固件(包括其他厂商的)进行分析，也可以输出相关的信息，推测出对应的加载地址。
    binwalk RGS200-12P.bin 
    DECIMAL       HEXADECIMAL     DESCRIPTION
    --------------------------------------------------------------------------------    0             0x0             eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
    128           0x80            eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
    300           0x12C           eCos vector table initialization handler, architecture: MIPSEL, default exception vector table base address: 0x80040224, hal_vsr_table base address: 0x80000200
     ...
### 其他
#### 自动分析
使用`IDA`加载该固件并设置正确的架构、加载地址等参数后，默认情况下`IDA`不会自动进行分析。相比而言，`Ghidra`则可以自动进行分析，成功识别出函数并建立字符串的交叉引用。因此，一种方式是对照`Ghidra`分析的结果，在`IDA`中进行部分手动`Make
Code` (当然，也可以直接使用`Ghidra` … )；另一种方式是写一个简单的`eCos loader`插件，然后`IDA`就可以自动进行分析了。
#### 函数名恢复
该单一大文件中不存在导入表及导出表，故无法区分哪些是常见的系统函数，比如`memcpy()`,
`strcpy()`等。但也有其好处，在代码中存在很多函数名/日志等信息，根据这些信息可以很容易地对函数名进行恢复。
![
](https://images.seebug.org/content/images/2021/06/e6f00196-9d23-4c96-909c-6e9480725b92.png-w331s)
#### 函数调用约定
对于`MIPS32`架构的程序，常见的函数调用约定遵循`O32
ABI`，即`$a0-$a3`寄存器用于函数参数传递，多余的参数通过栈进行传递，返回值保存在`$v0-$v1`寄存器中。而该`eCos`固件则遵循[N32
ABI](https://en.wikipedia.org/wiki/MIPS_architecture#Calling_conventions)，最大的不同在于`$a0-$a7`寄存器用于函数参数传递(对应`O32
ABI`中的`$a0-$a3`, `$t0-$t3`)。
![
](https://images.seebug.org/content/images/2021/06/d43a1850-17bc-4515-bd64-13cf643fdf5a.png-w331s)
`IDA`中支持更改处理器选项中的`ABI`模式，但仅修改该参数似乎不起作用。默认情况下`"Compiler"`是`"Unknown"`，将其修改为`"GNU
C++"`，同时修改`ABI`为`n32`，之后反编译代码中函数参数的显示就正常了。
![
](https://images.seebug.org/content/images/2021/06/3ea80cf1-699e-41e2-8dc2-90ccc0b80b84.png-w331s)
### 小结
本文通过对`Zyxel`某设备`eCos`固件进行分析，寻找固件中引用的固定地址，给出了推测固件加载地址的思路，根据该思路成功得到了固件的加载地址。同时，通过对文件进行分析，在文件中发现了与`VSR
table`初始化相关的代码，根据该代码可以反推出固件的加载地址，并在`binwalk`中添加对应的`eCos magic`来自动匹配该模式。
> 脚本见
> [find_ecos_load_addr.py](https://gist.github.com/cq674350529/74e5b6d31780882c54c80302172ad753)
### 相关链接
  * [ecos vector.S 分析II: exception/interrupt](https://blog.csdn.net/qq_20405005/article/details/77971929)
  * [Starting Embedded Reverse Engineering: FreeRTOS, libopencm3 on STM32F103C8T6](https://blog.3or.de/starting-embedded-reverse-engineering-freertos-libopencm3-on-stm32f103c8t6.html)
  * [Magpie: ARM固件基址定位工具开发](https://www.anquanke.com/post/id/198276)
  * [limkopi.me: Analysing SJ4000’s firmware](https://limkopi.me/analysing-sj4000s-firmware/)
  * [MIPS calling conventions](https://en.wikipedia.org/wiki/MIPS_architecture#Calling_conventions)
* * *