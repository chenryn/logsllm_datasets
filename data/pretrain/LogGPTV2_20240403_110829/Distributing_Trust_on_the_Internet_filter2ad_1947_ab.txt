### No Assumption About Time

When no assumptions about time are made, the coverage of timing assumptions appears significantly broader. This means that such an approach has the potential to be justified in a wider range of real-world environments. For our applications, which focus on the security of trusted services, the resulting lack of timeliness seems acceptable.

A variation of the asynchronous model assumes probabilistic behavior of communication links [5, 251], where the probability that a link is permanently broken decreases over time. However, this involves a timing assumption, making it essentially a probabilistic synchronous model (perhaps it should also be named as such). It suffers from all the problems mentioned earlier. The model investigated by Moser and Melliar-Smith [25] additionally assumes a fairness property and a partial order imposed by the underlying communication system, but such assumptions are difficult to justify on the Internet.

### Promising Alternatives

A promising alternative to time-free models is to rely on a minimal, trusted time service provided by a specialized subsystem, as proposed by Verissimo, Casimiro, and Fetzer [35]. However, this approach is so recent that its implications for secure state machine replication in a Byzantine environment are not yet fully understood. Additionally, the question of how to implement such a "timely computing base" on the Internet remains open.

### Static Server Set

Distributing a trusted service among a static set of servers leverages the trust in the availability and integrity of each individual server to the entire system. This set remains fixed throughout the system's lifetime, even in the face of observable corruptions. The reason is that all existing threshold-cryptographic protocols are based on fixed parameters (e.g., \( n \) and \( t \)) that must be known when key shares are generated.

A corrupted server cannot be easily resurrected because the intruder may have seen all its cryptographic secrets. Unless specialized "proactive" protocols [9] are used to refresh all key shares periodically, the only way to clean up a server is to redistribute fresh keys. However, dynamic groups and proactively secure cryptosystems in asynchronous networks are still an open area of research (see Section 6).

The alternative is to remove apparently faulty servers from the system. This is the paradigm of view-based group communication systems in the crash-failure model (see the survey in [28]). These systems offer resilience against crash failures by eliminating non-responding servers from the current view and proceeding without them to the next view. Resurrected servers may rejoin in later views.

The Rampart toolkit [30] is the only group communication system that uses views and tolerates arbitrary failures. However, since it relies on a membership protocol to dynamically agree on the group's composition, it is vulnerable to an attacker who can delay honest servers just long enough for corrupted servers to hold the majority in the group. Given that maintaining security and integrity is the primary application of our protocols for trusted services, we cannot tolerate such attacks and use a static group instead (but see Section 6 for further discussion).

### Related Work

The use of cryptographic methods for maintaining consistent state in a distributed system has a long history, originating with the seminal work of Pease, Shostak, and Lamport [26].

Reiter and Birman [31] (abbreviated RB94 henceforth) introduced secure state machine replication in a Byzantine environment and a broadcast protocol based on threshold cryptography that maintains causality among requests. Similar to our architecture, it uses a static set of servers who share the keys of a threshold signature scheme and a threshold cryptosystem. Thus, clients need only know the single public key of the service, not those of individual servers.

To obtain a fully robust system for an asynchronous model with malicious faults, RB94 must be complemented with robust threshold cryptography and secure atomic broadcast protocols, which were not known at that time. Our work builds on this and attempts to close this gap.

Subsequent work by Reiter on Rampart [30] shares our focus on distributing trusted services but assumes a different model: it implements atomic broadcast on top of a group membership protocol that dynamically removes apparently faulty servers from the set.

The broadcast protocols of Malkhi, Merritt, and Rodeh [22] work with a static group in a model similar to ours but implement only reliable broadcast and do not guarantee a total order, which is necessary for maintaining consistent state.

Castro and Liskov [11] (called CL99 below) present a practical algorithm for distributed service replication that is very fast if no failures occur. It requires no explicit timeout values but assumes that message transmission delays do not grow faster than some predetermined function for an indefinite duration. Since the CL99 protocol is deterministic, it can be blocked by a Byzantine adversary (violating liveness), but it will maintain safety under all circumstances. In contrast, our approach satisfies both conditions because it is based on probabilistic agreement.

The Fleet architecture of Malkhi and Reiter [24] supports loose coordination in large-scale distributed systems and shares some properties of our model. It works in a Byzantine environment and uses quorum systems and threshold cryptography for implementing a randomized agreement protocol (in the form of "consensus objects"). However, the servers do not directly communicate with each other for maintaining distributed state and merely help clients carry out fault-tolerant protocols. Close coordination of all servers is not a primary goal of Fleet. Implementing distributed state machine replication on top of Fleet is possible in principle but needs additional steps.

The Total family of algorithms for total ordering by Moser and Melliar-Smith [25] implements atomic broadcast in a Byzantine environment, but only assuming a benign network scheduler with specific probabilistic fairness guarantees. Although this may be realistic in highly connected environments with separate physical connections between all machines, it seems inappropriate for arbitrary Internet settings.

SecureRing [20] and the very recent work of Doudou, Garbinato, and Guerraoui [14] (abbreviated as DGGOO) are two examples of atomic broadcast protocols that rely on failure detectors in the Byzantine model. They encapsulate all time-dependent aspects and obvious misbehavior of a party in the abstract notion of a failure detector and permit clean, deterministic protocols (see also [1]). However, most implementations of failure detectors will use timeouts and actually suffer from some of the problems mentioned above. It also seems that Byzantine failure detectors are not yet well enough understood to allow for precise definitions.

A comparison of systems for secure state machine replication is shown in Figure 1. The cryptographic model with randomized Byzantine agreement seems both practically and theoretically attractive, although it appears to have been somewhat overlooked in the past. (The fact that randomized agreement protocols have non-terminating runs does not matter because their probability is negligible; moreover, if a protocol involves any cryptography, and the practical protocols mentioned above do so, a negligible probability of failure remains anyway.) Remarkably, during the two decades since the question of maintaining "interactive consistency" was first formulated [26], no secure system in our asynchronous model has been designed until now.

### References

- **RB94 [31]**: Asynchronous model, static servers, Byzantine agreement.
- **Rampart [30]**: Asynchronous model, dynamic servers, no Byzantine agreement.
- **Total alg. [25]**: Asynchronous model, static servers, no Byzantine agreement.
- **CL99 [11]**: Asynchronous model, static servers, no Byzantine agreement.
- **Fleet [24]**: Asynchronous model, static servers, no state machine replication.
- **SecureRing [20]**: Asynchronous model, static servers, "Byzantine" failure detector.
- **DGGOO [14]**: Asynchronous model, static servers, "Byzantine" failure detector.
- **This Paper**: Asynchronous model, static servers, Byzantine agreement, general adversaries.

All systems achieve optimal resilience \( n > 3t \).

### Byzantine Agreement

Byzantine agreement requires all parties to agree on a binary value proposed by an honest party. The protocol by Cachin et al. [8] follows the basic structure of all randomized solutions (e.g., [3]) and terminates within an expected constant number of asynchronous rounds. It achieves the optimal resilience \( n > 3t \) by using a robust threshold coin-tossing protocol, whose security is based on the Diffie-Hellman problem. It requires a trusted dealer for setup but can process an arbitrary number of independent agreements afterward.

Another primitive is multi-valued Byzantine agreement, which provides agreement on values from larger domains. Multi-valued agreement requires a non-trivial extension of binary agreement. The difficulty in multi-valued Byzantine agreement is ensuring the "validity" of the resulting value, which may come from a domain with no a priori fixed size. Our approach to this is a new, "external" validity condition, using a global predicate with which every honest party can determine the validity of a proposed value. The protocol guarantees that the system may only decide on a value acceptable to honest parties, ruling out agreement protocols that decide on a value no party proposed. Our implementation of multi-valued Byzantine agreement uses only a constant expected number of rounds.

### Basic Broadcast Protocol

A basic broadcast protocol in a distributed system with failures is reliable broadcast, which provides a way for a party to send a message to all other parties. Its specification requires that all honest parties deliver the same set of messages, and this set includes all messages broadcast by honest parties. However, it makes no assumptions if the sender of a message is corrupted and does not guarantee anything about the order in which messages are delivered. The reliable broadcast protocol in our architecture is an optimized variant of the elegant protocol by Bracha and Toueg [5]. We also use a variation called consistent broadcast, which is advantageous in certain situations. It guarantees the uniqueness of the delivered message (thus the name consistent broadcast) but relaxes the requirement that all honest parties actually deliver the message—a party may still learn about the existence of the message by other means and ask for it. A similar protocol was used by Reiter [29].

An atomic broadcast guarantees a total order on messages such that honest parties deliver all messages in the correct order.