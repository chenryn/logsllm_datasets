appearance are potentially false, how can we identify the device?
We assert that the most reliable source of information of a de-
vice’s identity is the end user’s expectation of the device’s func-
tionality. The purposes of most USB interfaces are intuitive, espe-
cially in an environment where all users are computer literate and
have been instructed on security procedures. We propose that the
simplest means of enforcing least privilege on USB devices is to
ask the users what they expect their device to do, having the user
serve as a veriﬁer for the claims that the device makes during enu-
meration. This veriﬁcation concept is visualized in Figure 3. When
a device ﬁrst connects to the host, the user is notiﬁed of the con-
nection through a graphical dialog box on the host. The dialog
prompts the user to select the features (i.e., interfaces) that they
wish to enable on the device. Note that, since the host is trusted,
this constitutes a trusted path from the host controller to the user.
The user’s settings are stored in a policy database, with each record
being a tuple . The subject ID
includes Manufacture, Product, Serial Number, etc.1
On subsequent connections, one of three scenarios may occur:
1 The record format and subject ID are simpliﬁed here for better
illustration.
Objects (Interfaces)USB MediatorHost ControllerHID DriverDevice IdentiﬁerPORT 1PolicyEnginePolicyStorage DriverAudio DriverPORT 2Subjects (Devices)User ExpectationsPolicyUSB MediatorStorage DriverIf correct, load driver…USBHoneypotVMIf incorrect, redirectdevice to honeypot…Device Claims1. The device’s claim is consistent with the prior connection.
2. The device makes a different claim that matches an entry in
the device database.
3. The device makes a different claim that does not match an
entry in the device database.
In Scenarios (1) and (2), the user will be presented with an entry
from the database and asked whether the information is correct. In
Case (1), the user conﬁrms that the information is correct, and enu-
meration is permitted to continue for the authorized interfaces. In
Case (2), the user reports that the information is incorrect, and the
device is ﬂagged as potentially malicious. In Case (3), the user is
presented with the initial device registration dialog again. However,
since the user knows that the device has already been registered, he
or she can report the anomaly and the device will be ﬂagged as
potentially malicious.
Given the above description, readers may ﬁnd themselves un-
derstandably wary of the burden that our system places on the end
user. However, given the capabilities of our attacker, and the lack
of a core root of trust for measuring USB ﬁrmware, we assert that
our solution is the only option for deterministically authenticating
devices, which is a prerequisite to defending against BadUSB. In
Section 4, we present the technical details of the GoodUSB graph-
ical interface, which makes use of visual cues to dramatically sim-
plify the process of administration for normal users with limited
technical background.
3.4 Proﬁling Malicious USB Devices
Once a device has been ﬂagged as potentially malicious, what
actions can we take? Unfortunately, it is not possible to block the
device from further interactions with the system. On subsequent
connections, the device can make different claims about its identity,
so we have no means of blacklisting it. We determined the most
valuable action that our system could take is to redirect the device
to a virtualized honeypot, allowing the device to be observed while
simultaneously protecting the host.
Within the virtual honeypot, the actions taken by the device can
be proﬁled, which could prove valuable in the ensuing forensic in-
vestigation. The honeypot’s interactions with other system compo-
nents is shown in Figure 3. We identify the following types of infor-
mation as valuable to an investigator: device information after enu-
meration, device drivers loaded for the device, and all communica-
tion at the USB layer, including all keystrokes and all IP packets
sent/received over the network. This information could potentially
be passed to high-level forensic tools for detailed inspection and
an intrusion detection system (IDS) which would provide a means
of remediation in the event that a device is incorrectly ﬂagged as
malicious.
4. GOODUSB IMPLEMENTATION
In this section, we present GoodUSB, our fully-implemented se-
curity architecture for the Linux USB stack. While our BadUSB
defense is general enough to apply to any operating system, we
have implemented GoodUSB for Ubuntu 14.04 LTS (kernel ver-
sion 3.13.11). The full architecture of GoodUSB, shown in Figure
4, introduces four components. First, a user space daemon handles
the graphical interface and policy management, and also includes
the logic for the USB mediator. A second user space component,
a KVM honeypot, proﬁles potentially malicious USB devices. In
kernel space, we introduce a device class identiﬁer, as well as a
limited USB HID driver that secures human interface devices by
restraining them to particular kinds of keystrokes. The kernel hub
Figure 4: The GoodUSB architecture. Components that are intro-
duced by GoodUSB are colored orange and bordered by dashed
lines. The kernel hub thread is also modiﬁed to interoperate with
our system components.
thread is minimally modiﬁed to interoperate with the components
of the GoodUSB architecture.
4.1 User Space Daemon
Most of GoodUSB’s functions are handled by a user space dae-
mon (a.k.a. gud). Shown in Figure 4, gud includes three subsys-
tems: a policy engine that implements the USB mediator logic, a
graphical interface that features a security picture recognition sys-
tem, and a device database that associates a device’s claimed iden-
tity and functionality with the user’s expectation of the device. To
allow gud to interact with the rest of the USB stack, we use the new
netlink socket created in the kernel hub thread (a.k.a. khub),
which communicates with gud to perform USB device detection,
enumeration and driver matching/loading. The subsystems of gud
are detailed below.
Policy Engine. The policy engine is responsible for determining
whether the requested interfaces of a newly connected USB de-
vice match the user’s expectation of device functionality, and sub-
sequently enforcing that expectation. It notiﬁes the kernel space
components to block the loading of particular interfaces, or to redi-
rect the device to a honeypot when it is potentially malicious.
To increase the users’ experience, the policy engine maintains
a mapping between low-level interface types and a high-level sum-
mary of common USB devices. Some example mappings are shown
below:2
USB_DEV_STORAGE=>
USB_DEV_CELLPHONE=>
USB_DEV_HEADSET=>
USB_DEV_CHARGER=>
USB_CLASS_MASS_STORAGE
USB_CLASS_CSCID
USB_CLASS_VENDOR_SPEC
USB_CLASS_MASS_STORAGE
USB_CLASS_VENDOR_SPEC
USB_CLASS_AUDIO
USB_CLASS_HID (LIMITED)
USB_CLASS_VENDOR_SPEC
{0}
Reading the above mappings, the policy states that storage devices
can only register the following interfaces: MASS_STORAGE (for
ﬂash drives), CSCID (for smart cards) and/or VENDOR_SPEC in-
terfaces. Storage devices cannot register the HID interface, pre-
venting the most widely recognized form of BadUSB attacks. In
addition to the AUDIO interface, certain USB headsets sometimes
2There are 17 mappings in total. Only 4 are presented here.
GoodUSB Daemon(gud)Policy EngineKernel Hub ThreadHost Ctrl 0User SpaceKernel SpaceVirtIONetlinkKernel Virtual MachineHost Ctrl 1Host Ctrl 2PORT1PORT2PORT8PORT7PORT6PORT3PORT4PORT5USB Interface  DriversLimited HID Graphical InterfaceDevice DatabaseDevice Class IdentiﬁerHost Ctrl PassthroughUSB Honeypot(HoneyUSB)QEMU KVMUSB MonitorUSB Proﬁlerto select a security image to associate with the device, as shown in
Figure 5c. Security images are widely used as an anti-phishing
mechanism by banking websites [21].
In GoodUSB, the secu-
rity image component is introduced to simplify device administra-
tion, and also provides a visual cue for the presence of a poten-
tial BadUSB attack. Recall that BadUSB devices can spoof any
message in their device descriptors; an adversary who is aware of
our GoodUSB defense may therefore attempt to masquerade as a
known device that has the desired interface, e.g., the HID interface.
When GoodUSB recognizes a device, it is either a legitimate oc-
currence or evidence of an attack. The dialog box for recognized
devices is shown in Figure 5b. Here, the option for selecting a de-
vice type has been removed. The user can verify the device through
either reading the descriptive text or checking that the presented se-
curity image is correctly associated with the device. If the presented
information is incorrect, the device is ﬂagged as potentially mali-
cious and is redirected to the USB honeypot. Otherwise the user
approves the device and driver loading continues.
Device Database. Once gud obtains user expectations and a secu-
rity picture is selected, this information is recorded alongside the
output of the Device Class Identiﬁer in a database. The database is
implemented as a binary ﬁle, and is synchronized with kernel space
whenever a new USB device is plugged in. When the machine is
rebooted, gud re-transmits the device database to kernel space via
the netlink socket, making sure that previously classiﬁed devices
will be recognized on subsequent connections. If needed, users can
also clear the database in gud, which provides a clean base in the
kernel space as well, once the machine is restarted.
4.2 USB Honeypot
In the event of a potential attack, administrators will undertake
forensic investigation to determine the nature of the attack and
identify likely culprits. To observe the activities of potentially mali-
cious devices, GoodUSB features a honeypot virtual machine mech-
anism. While honeypots for malicious USB devices have been
previously proposed by Poeplau and Gassen [32], we realized that
these systems are actually incapable of observing the BadUSB at-
tack vector. The reason is that their system emulates a device, as
opposed to a host, and attempts to catch host-based malware as it
infects the device. BadUSB is not a host-to-device attack, but rather
a device-to-host attack. In BadUSB, once the host is compromised,
the adversary will have to rely on other attack vectors to extend
their presence in the devices, as it is very difﬁcult (if not impossi-
ble) to infect the ﬁrmware of USB devices simply by having them
connect to an infected host. Therefore, it is necessary to design a
new USB honeypot framework that is suited to observing BadUSB.
Our system, HoneyUSB, is a QEMU-KVM virtualized Linux
machine containing multiple device proﬁling services. HoneyUSB
supports two modes of device observation/proﬁling.
In the ﬁrst,
HoneyUSB reserves an entire USB controller device on the host,
and the host controller device (HCD) is hoisted directly into KVM
using pass-through technology. The advantage of this proﬁling
mode is that the potentially infected device never operates directly
within the host OS, and is effectively physically separated from
the host machine. Using this proﬁling mode is helpful when out-
of-band knowledge has been used to ﬂag a device as potentially
malicious, e.g., it was found lying in the company parking lot. In
a second mode, gud automatically redirects devices to HoneyUSB
after the user ﬂags them as potentially malicious.
The honeypot VM, which also runs Ubuntu Linux, is precon-
ﬁgured as follows. We enabled usbmon in the VM’s kernel [42],
which acts as a general USB layer monitor, capturing all the USB
packets transmitted by the device. In the user space, we created a
a: Device registration screen
b: Recognized device notiﬁcation
c: Security picture screen
Figure 5: Screenshots from GoodUSB user interface.
require the HID interface for volume control. GoodUSB introduces
a limited HID interface that restricts the permissible keystrokes of
non-keyboard USB devices, which prevents malicious HID devices
from taking control of the system. Another interesting example is a
CHARGER device, which does not contain any interfaces. As a mat-
ter of fact, these chargers should never be detected as USB devices,
because the charging procedure does not need to involve any USB
layer communication. Through enforcing this permission mapping,
GoodUSB is able to defend against BadUSB attacks. Note that
vendor speciﬁc interfaces are allowed in most devices. This is a
tradeoff between security and usability, as devices that require a
vendor speciﬁc driver are likely to break if denied this interface.
We discuss this limitation in Section 6.
Based on GoodUSB’s conﬁguration, the policy engine can oper-
ate in either basic or advanced modes. In basic mode, the graphical
interface features high-level device summaries, as shown in Figure
5a, and the user selects a single option that maps to low-level in-
terfaces. In advanced mode, the graphical interface instead shows
the low-level interfaces, and allows the user to make multiple selec-
tions. The advanced mode allows the user to exercise ﬁner control
over device functionalities, and also supports devices that require
uncommon interface sets.
Graphical Interface. When a USB device connects to the host,
the policy engine loads one of several dialog boxes depending on
whether the device is recognized from a previous session. If a de-
vice is not recognized, GoodUSB prompts the user with the device
registration box shown in Figure 5a. 3 The text ﬁeld at the top of
the box allows the user to conﬁrm that the device’s claimed iden-
tity (i.e., Manufacturer and Product) match the device that was just
plugged into the host. The remainder of the box provides a set of
device descriptions for the user to select. Each device description
maps to a set of permissible interfaces.
Immediately after the device registration screen, the user is asked
3A user study of the prompt’s effectiveness is out of the scope of
the paper.
USB proﬁling application, usbpro, which aggregates device in-
formation from sysfs, lsusb, usb-devices and device ac-
tivities from usbmon and tcpdump. Moreover, a new udev rule
with high priority is associated with usbpro, guaranteeing that
usbpro is loaded prior to device enumeration. Thus, the report
generated by usbpro is an exhaustive description of the device’s
reported information as well as the actions taken by its associ-
ated drivers. Excerpts of a report for a HID device generated by
usbpro can be found in the evaluation section.
HoneyUSB also contains an instrumented version of the GIO
Virtual Filesystem (gvfs), the user-space driver used by USB-
enabled cellphones such as Android. We have extended gvfs to
collect ﬁle-level data provenance, constituting a detailed descrip-
tion of the read and write operations performed by the device. Cur-
rently, ﬁle-level provenance has been added into the MTP backend
to support Android, which means usbpro is able to record all the
ﬁle-based I/O operations happened in the Android phone operated
in MTP mode.
4.3 Device Class Identiﬁer
The Device Class Identiﬁer is a kernel space component that
summarizes the claims made by the device during enumeration.
This summary contains both the device descriptor ﬁelds that are
presented to the user in Figure 5, and all the descriptors transmitted
by the device during enumeration, plus the current active conﬁgura-
tion. This includes the device information and requested interfaces
in the active conﬁguration, and also other conﬁguration supported
but not used by the device. A SHA1 digest is then computed based
on the summary 4.
The digest is used as a device identiﬁer in both the gud device
database, allowing gud to recognize devices that were previously
registered, and the kernel device database, keeping it synchronized
with the former. After the USB enumeration, the kernel knows all
the interfaces requested by the device, as well as the SHA1 digest.
If the digest does not match a prior entry from the kernel device
database, the kernel notiﬁes gud to present the device registration
screen to the user (Fig. 5a). The user’s response is transmitted to
the kernel by gud before the requested interface drivers are loaded.
After receiving instructions from gud, the kernel ﬁrst creates an en-
try for the newly registered device in its device database, if the de-
vice is to be enabled. The permitted drivers are then loaded, while
other requested drivers are ignored, thus ensuring that the device
cannot interact with the system in ways that were not expected by
the user.
When there is a match in the kernel device database, meaning
this device is recognized as a known one, the kernel notiﬁes gud
and asks for permission to enable this device (Fig. 5b). The re-
quested drivers are not loaded until after the user has approved the
device. If the user disapproves the device, the kernel disallows any
interfaces requested by the device by not loading any drivers and
gud helps redirect the device into the USB honeypot.
4.4 Limited HID Driver
The GoodUSB architecture is designed primarily to enforce least
privilege on USB device at the granularity of device drivers. Un-
fortunately, devices that have been approved for a particular inter-
face are free to operate with the full capabilities of the associated
driver. In Section 3.2, we mentioned that this is particularly trou-
bling for the the Human Interface Device (HID) interface, which
4We assume that the digest could be forged in our threat model
and we allow that happen in GoodUSB. Therefore, there is no need
to pursue the best secure hashing function and SHA1 is usually
optimized for better performance in the kernel.
usbpro HID analyzer started:
===========================