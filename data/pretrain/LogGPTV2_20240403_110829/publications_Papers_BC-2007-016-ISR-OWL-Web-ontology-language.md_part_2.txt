in the same way that not every RDF document is a legal OWL DL document, although
every legal OWL DL document is a legal RDF document. This sublanguage supports
those users who want the maximum expressiveness without losing computational
completeness and decidability.
6 OWL - Web Ontology Language
OWL Lite is syntactically the simplest sublanguage. It is intended to be used in
situations where only a simple class hierarchy and constraints are needed. This
sublanguage supports those users primarily needing a simple classification hierarchy
and constraint features.
Note that every OWL Lite ontology or conclusion is a legal OWL DL ontology or
conclusion, but not the inverse, and so on for OWL DL and OWL Full, as showed in the
following figure:
OWL OWL OWL
Lite DL Full
FIGURE 3- OWL SUBLANGUAGES
The choice between OWL Lite and OWL DL may be based upon whether the simple
constructs of OWL Lite are sufficient or not. The choice between OWL DL and OWL
Full may be based upon whether it is important to be able to carry out automated
reasoning on the ontology or whether it is important to be able to use highly expressive
and powerful modeling facilities.
OWL syntax
In this section we describe the syntax of OWL. We illustrate step-by-step how to
build an ontology using OWL. We also explain how to define the heather of ontology,
its classes, properties and relationships. After reading this section the reader should be
able to recognize an ontology written in OWL and identify some of its components.
Header
The first element in an OWL document is an rtf:RDF element which specifies a set
of XML namespace’s declarations that provide a means to unambiguously interpret
identifiers and make the rest of the ontology presentation much more readable. For
example,
A namespace is composed by: reserved XML attribute xmlns, a prefix that identify
the namespace and the value.
OWL 7
Information version
After the namespace declaration, an OWL document specifies a collection of
assertions that are grouped under an owl:ontology element and offers details about the
ontology:
• owl:versionInfo – provides information about the current ontology.
• owl:priorVersion – indicates an earlier version of the current one.
• owl:backwardCompatibleWith – contains a reference to an ontology that is a prior
version of the containing ontology that is backward compatible with it.
• owl:incompatibleWith – indicates that the containing ontology is not backward
compatible with the referenced ontology.
• owl:imports – only this assertion has a formal meaning to the ontology and
represents a set of other ontologies that are considered to be part of the current
ontology. Note that owl:imports is a transitive property because if ontology A
imports ontology B, and ontology B imports ontology C, then ontology A also
imports ontology C.
The following is a simple example:
...
 University Ontology 
 v.1 2006-9-05 
 University Ontology 
...
Class element
Classes are a collection of individuals, a way of describing part of the world. They
are defined in an OWL document with the owl:Class element. For example, the class
“Teacher” can be define as follows,
Note that the rdf:ID element defines the name of the class. If we want to make
reference to a class we use the rdf:resource element. An OWL ontology can represent
the hierarchy between classes using the element owl:subClassOf. For example, the class
“Teacher” is a subclass of “Person”.
Between the two classes it is possible to establish relations using
owl:equivalentClass and owl:disjoinWith elements. The assertion owl:equivalentClass
when applied to two classes A and B, represents that class A has the same individuals as
8 OWL - Web Ontology Language
class B. For example, the class “faculty” is equivalent to the “academicStaffMember”
class:
The owl:disjoinWith element applied on two classes A and B suggest that class A
and B disjoin, i.e., if an instance is member of class A it cannot be an instance of class
B. For example, a “Full Professor” cannot be an “Associate Professor” at the same time.
Complex class
Another way to create classes in OWL is to combine simple classes using Boolean
operators (union, intersection, and complement) and create complex classes. The
members of the class are completely specified by the Boolean operators. The
owl:unionOf element applied on classes A and B creates a new class that contains all
members from class A and B. For example, the combination of the class “staff
members” and the class “student” create the new class “peopleAtUni”, as shown below,
The owl:intersectionOf element creates a new class from the two classes A and B
which has elements that were both in class A and class B, which follows as,
The individuals of the new class created in this example are those individuals that are
members of both the classes “faculty” and the anonymous class created by the
restriction on the property “belongTo”.
The owl:complement element selects all individuals from the domain that do not
belong to a certain class,
OWL 9
In this example, the class “course” has as its members all individuals that do not
belong to the” staffMember” class.
Property
Properties let us describe a kind of relationship between members of classes. In an
OWL document two types of properties are distinguished:
• Object properties which relate objects to other objects, i.e. instances of a class
with instances of another class. In the next example the object property
“isTaughtBy” relates the class “course” with the class “academicsStaffMember”.
This means that a “course” “isTaughtBy” an instance of the
“academicStaffMember” class.
• Datatype property which relates objects to data type values. OWL does not
have predefined data types, but it allows one to use the XML Schema data types. In
following example, the year in which a tourist was born is specified using the
“http://www.w3.org/2001/XLMSchema#nonNegativeInteger” data type from the
XML Shema.
Note that both kinds of properties can use the rdfs:domain and rdfs:range element to
restrict the relation.
Property restrictions
More elaborate boundaries can be made by applying restrictions to a property, this
results in the subclasses of individuals that satisfy that condition. There are two kinds of
restrictions: values constraints and cardinality constraints. Examples of values
constraints include owl:allValuesFrom, owl:someValuesFrom, and owl:hasValues.
10 OWL - Web Ontology Language
owl:allValuesFrom: Defines the set of individuals, for which all the values of the
restricted property are instance of a certain class:
In this example, the individuals that are members of the class “firstYearCourse” are
all the courses that have the property “isTaughtBy” assigned to a “professor”
owl:someValuesFrom: Defines the set of individuals that have at least one relation
with an instance of a certain class, for example:
owl:hasValues: Defines a set of individuals for which the value of the restricted
property is equal to a certain instance. For example the individuals of the class
“mathCourse” can be characterized as those that are taught by the professor “949352”:
Cardinality constraints point out how many times the property can be used on an
instance. Examples include owl:maxCardinality, owl:minCardinality, and
owl:cardinality.
owl:maxCardinality: Defines the set of individuals that have at the most N distinct