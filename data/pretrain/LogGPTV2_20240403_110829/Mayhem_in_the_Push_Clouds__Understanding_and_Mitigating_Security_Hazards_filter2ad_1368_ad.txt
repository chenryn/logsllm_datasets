18
535
10,000,000+
10,000,000+
50,000,000+
5,000,000+
leaked contents
messages
chat messages
comment
direct messages
follow, comment
chat messages
invitation, messages
comment, plus - encoded by base64
alert messages : minimum balance, incoming/outgoing wire transfer, payment,
debit card transaction, ATM withdrawal, external transfer, direct/online/ATM de-
posit, notify hold, overdraft protection, etcetera.
alert messages : available balance, debit card/ATM deduction, low balance thresh-
old, money transfer, online bill payment, personal information update, irregular
debit card activity, etcetera.
send money, buy something, receive money, get a request for money
comments, like
watched items end alert(item name, price, bidding information), winning bid,
shipment, messages
messages from family, check-in info, help request, invitation, home address, loca-
tion of family members
Table 3: Examples of Vulnerable Apps
Category num Vulnerability(Section)
GCM/UA 56
GCM/UA 56
mpCloud
3
3
mpCloud
ADM
4
vulnerable apps
GCM cloud-device link(3.1)
56(100%)
GCM C2DM/GCM code template(4.2) 10(18%)
mpCloud cloud-device link(3.2)
3(100)%
3(100)%
mpCloud on-device link(4.3)
ADM on-device link(4.3)
4(100)%
Table 2: Summary of Security Weakness
were conﬁrmed to be exposed to the unauthorized app through the
vulnerabilities we found. This step just serves the purpose of ex-
tracting their content from the app. We also ran our attack app dur-
ing its registration, trying to ﬁnd out whether it includes the vulner-
able C2DM/GCM code template. Among them, 10 apps turned out
to use the template, whose registration intents were intercepted by
our apps. The rest are all vulnerable to the exploit on their cloud-
device link (Section 3.1) or other threats. The security weaknesses
of those apps are summarized in Table 2.
Consequences. We further manually analyzed the logs of those
apps to understand the type of the information the adversary can
learn (through binding the victim’s registration ID to the attack de-
vice) or fake (through pushing falsiﬁed messages). It turned out
that among those apps, only Sina Weibo encrypts messages with a
symmetric key hard-coded in its app, which is very unsafe given
that all its apps share the same key, and others simply use plaintext
(sometimes, with the Base64 encoding). From the logs, we were
able to monitor the chats from Facebook Messenger, posts from
Google plus, etc. Also, apps in the FINANCIAL category leaks
alert messages including sensitive personal ﬁnancial data such as
the user’s minimum/current balance, debit card usage, payment,
wire transfer activity etc. All alert messages are in plaintext with
the exact amount, receiver, last four digits of account and credit
card number and others. Moreover, Find My Phone, an app for lo-
cating and tracking phones of family members, exposes the exact
home address of every member in the victim’s family. Also leaked
out from the app are help requests and other private messages. All
together, 28 extremely popular apps were conﬁrmed to expose sen-
sitive user data and most of them also allow the adversary to inject
security-critical information. More details of some examples are
provided in Table 3. The situations with other apps are less clear,
due to the challenges in fully understanding their semantics and
triggering all their operations related to push messaging. Never-
theless, the preliminary ﬁndings already point to the seriousness of
the problems we found. In the absence of proper protection, those
push-messaging services, including the most leading ones, are not
up to the task of safeguarding app users’ sensitive information.
6. PROTECTING CLOUD MESSAGING
Our ﬁndings point to the pervasiveness of security-critical ﬂaws
in push-messaging services, which are very likely to be just a tip
of the iceberg. Given the complexity of these services and their
diversity, app developers often end up with little conﬁdence in the
safety of their communication with their customers across different
cloud platforms (GCM, ADM, etc.). To improve this situation, we
developed Secomp (secure cloud-based message pushing), a simple
mechanism that establishes end-to-end protection across different
push-messaging channels.
In this section, we describe our design
and implementation of the technique, and also our evaluation study.
6.1 End-to-End Protection
The design of Secomp is based upon the observation that apps in-
volving security-critical operations or sensitive data (e.g., the Face-
book app, Chase Mobile app, etc.) almost always need to authenti-
cate themselves or their users to their servers, which typically goes
through HTTPS, allowing the user to log into her account using
password or other credentials. So, the idea here is to leverage this
existing secure channel (HTTPS) and authentication mechanism
(e.g., password-based login) to establish a secret key between the
app and its server, which is later used to protect the conﬁdentiality
and integrity of push-messaging communication with an authenti-
cated encryption scheme.
Figure 4 elaborates how Secomp works, where DIRECTCHANNEL
can be an HTTPS connection an app uses to log its user into the
app server and get the secret key K, KVERIFY can be the devel-
oper’s public veriﬁcation key embedded within the app, and the
ENCAuth scheme used for “in-band” communication (through the
push cloud) can be AES in Galois/Counter Mode. This simple pro-
tection mechanism was implemented in our research into a pair of
SDKs that the developer can incorporate into her server-side code
and app, respectively. Whenever the app user is authenticated (us-
ing her password or a single-sign-on scheme) to the server through
an out-of-band HTTPS connection (a direct connection between
the app and its server, which is already there for login), the server
immediately generates K and sends it to the user through the con-
nection. For all the messages exchanged through the push cloud, K
is always used together with ENCAuth to let the app and the server
9851. Preliminaries:
– Let (KEYGEN, ENCAuth, DECAuth) be an authenticated
encryption scheme, such that ENCAuth and DECAuth guar-
antees both conﬁdentiality and integrity.
– Let (KEYGEN(cid:48), SIGN, VERIFY) be an unforgeable digital
signature scheme.
– The push message channel PUSHCHANNEL between the
app server and the app through push messaging service is
unprotected as shown in this paper.
– The direct communication channel DIRECTCHANNEL be-
tween the app and the app-server is authenticated and en-
crypted.
2. SECOMP.KEYGEN:
• App server generates a key K using KEYGEN algorithm.
• App server generates a signing key KSIGN and the corre-
sponding veriﬁcation key KVERIFY using KEYGEN(cid:48). (This
operation is done once for all users).
3. SECOMP.SHAREKEY:
• App server sends the app speciﬁc key K and a global
signature veriﬁcation key KVERIFY to the app using
DIRECTCHANNEL.
4. SECOMP.REGISTERAPP:
GCM and receivers a registration ID RegID.
• App registers itself with a push-messaging service such as
• App sends this registration ID RegID to the app server
• App server records the tuple (app’s identity, RegID, K).
using DIRECTCHANNEL.
5. SECOMP.PUSHMESSAGE (message), where message is the
push message that needs to be send to the app:
• App server encrypts the message with key K using
ENCAuth and obtains ENCAuth
• App server sends ENCAuth
(message) to the app using
(message).
K
K
PUSHCHANNEL.
6. message ← SECOMP.RECEIVE:
• App receives the ciphertext ENCAuth
• App decrypts the message using K to obtain message =
(message).
K
DECAuth
(ENCAuth
(message)).
K
K
7. SECOMP.BROADCAST (message):
get the signature SIGNKSIGN (message).
• App-server signs the message message using key KSIGN to
• App-server now broadcasts the message as before but in-
cludes the signature SIGNKSIGN (message) with the mes-
sage.
8. SECOMP.BROADCASTRECEIVE:
• App receives these message message and a signature
• App
tion
VERIFYKVERIFY (SIGNKSIGN (message)).
SIGNKSIGN (message).
the
KVERIFY
signature
using
veriﬁca-
algorithm
with
VERIFY
veriﬁes
key
Figure 4: SECOMP Operations
authenticate each other and protect the content of their messages
from other parties. Here are more details about the approach.
Secure channel establishment. Step 3 and 4 in Figure 4 show how
to set up an end-to-end secure push-messaging channel. The user
runs the app, which builds an HTTPS connection to let the user log
into the app server with her password or a third party single-sign-
on (SSO) scheme (e.g., a token from Facebook to get the user’s
identity). The server then sends back a secret key (embedded in the
cookie it set to the app) through the connection for follow-up au-
thentication and data encryption. After that, the app registers itself
with a push-messaging service (e.g., GCM) and delivers the regis-
tration ID to the server using an authenticated encryption channel.
In our research, we implemented a set of APIs within the SDKs
that wrap the GCM SDKs (Google Play Service) to support a con-
venient integration of those check-in operations into both an app
and its server-side code. Particularly for the existing apps using
GCM, their developers only need to use the wrapped SDKs and
slightly adjust the way they invoke the GCM APIs to activate the
Secomp protection. Later we discuss other design options to help
integrate our SDKs (Section 7). Speciﬁcally, in our implemen-
tation, once an app completes its login, the server runs the API
checkin to generate the key, log it together with the app’s iden-
tity, store the key within the HTTPS cookie and send it to the app
by setting the cookie through HTTPS. The app keeps the key in its
local storage (with the user’s session ID), which is utilized by other
APIs for encrypting or decrypting messages and checking their in-
tegrity. After the app delivers to the server its registration ID, the
server records the ID together with the app’s identity and key.
Secure communication. Using the secret key, the app and its
server encrypts their messages to protect their communication. In
our implementation, we adopted AES in Galois/Counter Mode, a
known secure and efﬁcient authenticated encryption scheme, for
this purpose. Whenever the app or the server receives a message
from the other party, it decrypts the message and veriﬁes its in-
tegrity. Step 5 and 6 in Figure 4 describe the operations. Within
our SDKs, such a message is created by secureMessage and
parsed/decrypted/veriﬁed by onReceiveMessage.
Sometimes, the app server needs to broadcast messages to all
apps. Such messages are typically public but their integrity and
authenticity still need to be protected. Using the secret key here is
no longer efﬁcient, due to the need of generating a large number of
authentication tags, one for each app. What we did in our research
is simply turning to a public-key scheme, as described in Step 7 and
8 in Figure 4. The server signs the message using a secret signing
key and each app checks the message with a public veriﬁcation key,
which either comes from the certiﬁcate embedded within the app or
from the server during the establishment of the secret key.
Security analysis. The security of Secomp can be directly estab-
lished upon its underlying security primitives. Speciﬁcally, the key
K is shared between the app server and the app through an authenti-
cated and encrypted channel DIRECTCHANNEL that is established
for login authentication purposes. All unicast messages sent to the
app through PUSHCHANNEL are encrypted with K using an au-
thenticated encryption scheme (KEYGEN, ENCAuth, DECAuth). Now,
the messages sent by the adversary knowing the registration ID
RegID would be detected and discarded, as he does not have the
key K. We do not guarantee privacy for broadcast messages, so
we only make sure that the adversary is not able to compromise
the integrity of broadcast messages protected by the unforgeable
digital signature scheme. Under this scheme, the attacker may still
reorder messages or send invalid messages to squander the recip-
ient’s resources. These threats, however, can be easily addressed.
986Speciﬁcally, the app server can add a sequence number to specify
an order for messages. Also, once invalid messages are found, the
app can talk to the server through DIRECTCHANNEL, which can
then contact the cloud provider to investigate the problem. In Sec-
tion 6.3, we further show that this simple scheme defeats all the
attacks we discovered.
6.2 Misbinding Detection
Although the secure channel established between the app and its
app server protects the conﬁdentiality and integrity of their com-
munication, its availability can be hard to guarantee. The problem
here is the threat of the misbinding attack, which can be caused
by exploiting the vulnerable on-device link or cloud-device link.
Such an attack could block the right app from getting its messages
(Section 3.1 and Section 4.2). To detect it, we built into Secomp a
probing mechanism, which works as follows:
• First, the app server sets a new challenge ﬁeld on a message, gen-
erates a random number N, encrypts it together with the message
using the app’s secret key and pushes this message to the app.
• The app receiving the message is supposed to decrypt it and sends
back to the server an encrypted version of N + 1 .
• Then, the app server veriﬁes the response and reports to the push-
messaging service if the result is incorrect.
The whole idea of this probing mechanism is to help the server
ﬁnd out whether the app can still get the message pushed to it. A
problem is that the adversary can act as a MitM (Section 4.2), pass-
ing the challenges received by his device to the malicious app on
the victim’s target device, which in term injects the message to the
target app for generating the correct response. The catch here is
that the adversary needs to know exactly when to forward the mes-
sage. Otherwise, he either has to do this all the time, sending every
message to the target device, or gets caught when he stops doing
that. Therefore, our strategy is to generate a challenge at a random
moment: each time when a message to be pushed to an app, its
server ﬂips a random coin, with a certain probability (which can be
tuned by the developer) to set the challenge ﬁeld, asking the app to
come up with a response. Since this ﬁeld is within the encrypted
content, the adversary cannot determine when to forward the mes-
sage. As a result, he cannot effectively prevent the legitimate user
from getting her messages without being detected.
6.3 Evaluation
To understand how Secomp performs in practice, we built a GCM-
subscribing app and its app server to integrate the Secomp SDKs.
This app’s login operations has been taken care of by the Google
SSO. Incorporating our SDKs turned out to be rather straightfor-
ward: all we did is just invoking onReceiveMessage when the
app receives the message from GCM, and secureMessage to