### Task T

13. When `timer_i` expires:
14.
15.
16.R1. `progress_ki` := PROGRESS(k, i);
17. if (`progress_ki` == LAST(k, i)) then
18.
19.R1.
20.
21.
22.
23.
24.
25.
26.
27.
28. else if (k ∈ `candidates_i`) then
29. else if (stop(k, i)) then
30. `candidates_i` := `candidates_i` - {k}
31. end if
32. end for;
33. set `timer_i` to max{SUSPICIONS(i, k) - 1} for all k
34. SUSPICIONS(i, k) := SUSPICIONS(i, k) + 1;
35. `candidates_i` := `candidates_i` - {k}

**Figure 3. All variables are 1WMR and bounded (code for pi)**

The same reasoning as in the proof of Theorem 2 shows that each shared variable `SUSPICIONS(j, k)`, where j, k ≤ n, is bounded. Combined with the fact that the variables `PROGRESS(j, k)` and `LAST(j, k)` are boolean, we obtain the following theorem.

**Theorem 6.** All the variables used in the algorithm described in Figure 3 are bounded.

**Theorem 7.** Let \( p^* \) be the process elected as the eventual common leader, and \( p_i \), where \( i \neq * \), any correct process. There is a time after which the only variables that may be written are `PROGRESS(*, i)` (written by \( p^* \)) and `LAST(*, i)` (written by \( p_i \)).

**Proof:**
- The proof that the variables `PROGRESS(j, k)`, where j ≤ n, are infinitely often written, and the proof that there is a time after which the variables `STOP(j)`, where j ≤ n, and the variables `SUSPICIONS(j, k)`, where j, k ≤ n, are no longer written, is the same as in Theorem 3.
- After \( p^* \) has been elected, no process \( p_x \), where \( x \neq * \), executes the body of the while loop of task T. Therefore, there is a time after which `PROGRESS(x, j)`, where x, j ≤ n and \( x \neq * \), are no longer written.
- Consider any variable `LAST(x, y)`, where \( x \neq * \). As, after \( p^* \) has been elected, no correct process \( p_x \), where \( x \neq * \), updates `PROGRESS(x, y)` (at line 08.R2), it follows that there is a time after which `LAST(x, y) = PROGRESS(x, y)` remains forever true for all x, y ≤ n and \( x \neq * \). Consequently, after a finite time, the test of line 17.R1 is always false for \( p_x \), where \( x \neq * \), and `LAST(x, y)` is no longer written.

**Theorem 8.** The algorithm described in Figure 3 is optimal with respect to the number of processes that have to write the shared memory.

### Conclusion

This paper addresses the problem of electing an eventual leader in an asynchronous shared memory system. It makes three main contributions:

1. **Assumption AWB:** The first contribution is the statement of an assumption (a property denoted AWB) that allows electing a leader in shared memory asynchronous systems that satisfy this assumption. This assumption requires that after some time (1) there is a process whose write accesses to some shared variables are timely, and (2) the other processes have asymptotically well-behaved timers. The notion of an asymptotically well-behaved timer is weaker than the usual notion of a timer where the timer durations must monotonically increase when the values to which they are set increase. This means that AWB is a particularly weak assumption.

2. **Algorithms for Leader Election:** The second contribution is the design of two algorithms that elect an eventual leader in any asynchronous shared memory system that satisfies the assumption AWB. These algorithms are independent of t (the maximum number of processes allowed to crash) and are based only on one-writer/multi-readers atomic shared variables. The first algorithm guarantees that (1) there is a (finite) time after which a single process writes forever the shared memory, and (2) all but one shared variables have a bounded domain. The second algorithm uses (1) a bounded memory but (2) requires that each process forever writes the shared memory.

3. **Optimality and Trade-offs:** The third contribution shows that the trade-off (bounded/unbounded memory vs. number of processes that have to write) is inherent to the leader election problem in asynchronous shared memory systems equipped with AWB. It follows that both algorithms are optimal, the first with respect to the number of processes that have to forever write the shared memory, and the second with respect to the boundedness of the memory.

Several questions remain open. One concerns the first algorithm: Is it possible to design a leader algorithm in which there is a time after which the eventual leader is not required to read the shared memory? Another question is whether the second algorithm is optimal with respect to the size of the control information (bit arrays) it uses to have a bounded memory implementation.

### References

[1] Aguilera M.K., Delporte-Gallet C., Fauconnier H., and Toueg S., Communication-Efficient Leader Election and Consensus with Limited Link Synchrony. Proc. 23rd PODC, pp. 328-337, 2004.
[2] Boichat R., Dutta P., Frølund S., and Guerraoui R., Deconstructing Paxos. ACM Sigact News, Distributed Computing Column, 34(1):47-67, 2003.
[3] Chandra T. and Toueg S., Unreliable Failure Detectors for Resilient Distributed Systems. Journal of the ACM, 43(2):225-267, 1996.
[4] Chandra T., Hadzilacos V., and Toueg S., The Weakest Failure Detector for Solving Consensus. Journal of the ACM, 43(4):685-722, 1996.
[5] Dwork C., Lynch N., and Stockmeyer L., Consensus in the Presence of Partial Synchrony. Journal of the ACM, 35(2):288-323, 1988.
[6] Fernández A., Jiménez E., and Raynal M., Electing an Eventual Leader in an Asynchronous Shared Memory System. Tech Report #1821, 18 pages, Université de Rennes, France, November 2006.
[7] Fischer M.J., Lynch N., and Paterson M.S., Impossibility of Distributed Consensus with One Faulty Process. Journal of the ACM, 32(2):374-382, 1985.
[8] Gafni E. and Lamport L., Disk Paxos. Distributed Computing, 16(1):1-20, 2003.
[9] Gibson G.A. et al., A Cost-effective High-bandwidth Storage Architecture. Proc. 8th Int’l Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’98), ACM Press, pp. 92-103, 1998.
[10] Guerraoui R., Kapalka M., and Kouznetsov P., The Weakest Failure Detectors to Boost Obstruction-Freedom. Proc. 20th Symposium on Distributed Computing (DISC’06), Springer-Verlag LNCS #4167, pp. 376-390, 2006.
[11] Guerraoui R. and Raynal M., The Information Structure of Indulgent Consensus. IEEE Transactions on Computers, 53(4):453-466, 2004.
[12] Guerraoui R. and Raynal M., The Alpha of Asynchronous Consensus. The Computer Journal, To appear, 2007.
[13] Guerraoui R. and Raynal M., A Leader Election Protocol for Eventually Synchronous Shared Memory Systems. 4th Int’l IEEE Workshop on Software Technologies for Future Embedded and Ubiquitous Systems (SEUS’06), IEEE Computer Society Press, pp. 75-80, 2006.
[14] Hélary J.-M., Hurfin M., Mostefaoui A., Raynal M., and Tronel F., Computing Global Functions in Asynchronous Distributed Systems with Perfect Failure Detectors. IEEE TPDS, 11(9):897-909, 2000.
[15] Herlihy M.P., Luchangco V., and Moir M., Obstruction-free Synchronization: Double-ended Queues as an Example. Proc. 23rd IEEE Int’l Conference on Distributed Computing Systems (ICDCS’03), pp. 522-529, 2003.
[16] Herlihy M.P., Luchangco V., Moir M., and Scherer III W.N., Software Transactional Memory for Dynamic Sized Data Structures. Proc. 21st ACM Symposium on Principles of Distributed Computing (PODC’03), pp. 92-101, 2003.
[17] Herlihy M.P. and Wing J.M, Linearizability: a Correctness Condition for Concurrent Objects. ACM Transactions on Progr. Languages and Systems, 12(3):463-492, 1990.
[18] Lamport L., The Part-Time Parliament. ACM Transactions on Computer Systems, 16(2):133-169, 1998.
[19] Larrea M., Fernández A., and Arévalo S., Optimal Implementation of the Weakest Failure Detector for Solving Consensus. Proc. 19th Symposium on Resilient Distributed Systems (SRDS’00), pp. 52-60, 2000.
[20] Lo W.-K. and Hadzilacos V., Using Failure Detectors to Solve Consensus in Asynchronous Shared Memory Systems. Proc. 8th Int’l Workshop on Distributed Computing (WDAG’94), Springer Verlag LNCS #857, pp. 280-295, 1994.
[21] Malkhi D., Oprea F., and Zhou L., Ω Meets Paxos: Leader Election and Stability without Eventual Timely Links. Proc. 19th Int’l Symposium on DIStributed Computing (DISC’05), Springer Verlag LNCS #3724, pp. 199-213, 2005.
[22] Mostefaoui A., Mourgaya E., and Raynal M., Asynchronous Implementation of Failure Detectors. Proc. Int’l IEEE Conference on Dependable Systems and Networks (DSN’03), IEEE Computer Society Press, pp. 351-360, 2003.
[23] Mostefaoui A. and Raynal M., Leader-Based Consensus. Parallel Processing Letters, 11(1):95-107, 2001.
[24] Mostéfaoui A., Raynal M., and Travers C., Crash Resilient Time-Free Eventual Leadership. Proc. 23rd IEEE Symposium on Reliable Distributed Systems, pp. 208-218, 2004.
[25] Mostéfaoui A., Raynal M., and Travers C., Time-Free and Timeliness Assumptions can be Combined to Get Eventual Leadership. IEEE Transactions on Parallel and Distributed Systems, 17(7):656-666, 2006.
[26] Powell D., Failure Mode Assumptions and Assumption Coverage. Proc. of the 22nd Int’l Symposium on Fault-Tolerant Computing (FTCS-22), pp. 386-395, 1992.
[27] Raynal M., A Short Introduction to Failure Detectors for Asynchronous Distributed Systems. ACM SIGACT News, Distributed Computing Column, 36(1):53-70, 2005.