can use to identify other malicious extensions. We start with a total
number of 152,341 extensions, based on our crawling of comments
and ratings. Then, as described in Section 4.1, we focus on 2,256
extensions that have at least 50 comments, in order to be able to use
statistical techniques for discovering rating anomalies.
The Anomalize package flagged a total of 1,386 extensions which
had at least one anomaly in the time-series of their ratings. This
number further decreases to 1,247 extensions by taking into account
only the negative anomalies, meaning anomalies that are associated
with sudden drops in the user ratings and not positive anomalies,
as positive anomalies can appear when an extension is improved.
Positive anomalies resulting from fake reviews are interesting, but
outside the scope of this paper.
Afterwards, given the process of keyword extraction described in
Section 4.1.2, we check for the specific comments that appeared as
negative anomalies and included one or more keywords associated
with low trustworthiness. In this way, we flag 850 extensions and
search our database for the version history of these extensions before
and after the anomalous rating. We define a two-month window of
time from the timestamp of the comment and include all versions
that happened in this period (i.e. our system accounts for multiple
updates during that time). We were able to recover the necessary
versions for 550 extensions.
As a final step we choose the most popular extensions and proceed
to manually analyze their changes from the version before the anoma-
lous negative rating, to the one after it. Given the size of extensions
Category
Productivity
Search Tools
Developer Tools
Accesibility
Fun
Shopping
Photos
Social & Communication
Malicious Extensions
31
14
5
3
3
2
1
1
Table 7: Categories of malicious Extensions still in the webstore
and the minification of JavaScript code, manually analyzing code
diffs is a time intensive process. We therefore limited ourselves to an-
alyzing 200 extensions, a process which took us approximately two
months of manual analysis. At the end of this process, we identified
45 malicious behavior. We can see the categories these 45 extensions
are distributed in Table 5, where ad replacement and intrusive ad
injection are the top two categories, followed by the compromise of
the search engine. These extensions are the seed extensions for the
API-based clustering, whose results we describe in the next section.
5.2 Malicious Clusters Overview
The results of clustering the updates corresponding to malicious
extensions with other extensions are shown in Table 6. In total, we
run the clustering algorithm in 922,684 extensions which resulted in
7,419 clusters. While the number of clusters is large, we only focus
on a small subset of those clusters, the clusters that have at least one
identifiedmaliciousextension,accordingtoourUserFeedbackstages
extracted seeds. We detected 143 malicious extensions which we
verified to exhibit malicious behavior, ranging from the sudden addi-
tion of unknown third-party scripts to shady monetization attempts.
These143extensionsbelongto21differentclustersofwhich,18come
from the initial clusters (round 1) created with the malicious seed
extensions from our User Feedback step, while the remaining 3 clus-
ters come as a result of a second clustering stage (round 2), using the
initial malicious clusters as extension seeds. The second clustering
stage happens when an extension from an already malicious cluster
is present in other clusters, being clustered based on a different file of
the extension. The round 1 malicious clusters contained 133 unique
extensions while the subsequent malicious clusters in round 2 con-
tained 10 extensions, totaling 143 discovered malicious extensions.
Of these 143 extensions, approximately 43% of them are currently
online(64),whiletherestofthem(79)havebeentakendownfromthe
webstore, further supporting that our analysis indeed discovers ma-
licious extensions. We extract analytical data for the extensions that
are still online, finding that they are installed by a total of 2,458,881
Figure 6: The average days a malicious version remained online
1[2-7][8-15][16-30][31-60][61-120][121+]Days Online051015202530No. malicious ExtensionsDays Online on average:                  99Cluster Category
Same Author
Third-party Tools
Background Scripts
jQuery
Tools Setup
Content Scripts
Perc.(%) Cluster Category Perc.(%)
8%
6%
4%
2%
2%
Popup Scripts
Search Form
Analytics
Newtab Scripts
Other
22%
16%
14%
10%
10%
8%
Table 8: Top 10 categories of the clusters without a seed extension
users and have attracted a total of 1,574 comments. The average
malicious extension is installed by 36,915 users and has received
an average of 32 comments. Given the webstore’s official extension
categories, Table 7 shows the categories of these extensions, finding
that the “Productivity” and “Search Tools” categories contain the
most abused extensions, identified via our system.
For the remainder of clusters (i.e. those that did not have any ma-
licious extension seed included in them), we did an analysis based on
the type of code that was added that can be seen in Table 8. This clus-
tering is the result of similar code constructs in the code of browser
extensions, without signs of malicious behavior. The majority of the
formed clusters correspond to extensions having the same author,
extensions adding third-party libraries to extend their functionality
(e.g. Mindsparkglobal, OneSignal, and TinyMCE), clusters of exten-
sions adding jQuery to their code, and generic bundle code that is
available on the web to kickstart the development of extensions.
5.3 Further Cluster Analysis
5.3.1 Average Days Online. To understand how malicious exten-
sions update and whether they update differently from benign exten-
sions, we use our historical dataset to identify how long the malicious
versions stays online before they are updated with benign ones (e.g.
afterthedeveloperwasinformedabouttheinfection).Figure6shows
that even though the average malicious extension stays online for
99 days, the distribution exhibits a bimodal behavior. That is, if the
extension is not taken offline within the first week, it can survive for
multiple months before it is taken down.
5.3.2 Malicious Descriptions. Even though the category that a ma-
licious extension belongs to (Table 7) provides some high-level in-
sights as to the functionality that each extension promises users, it
lacks details since many different types of extensions are part of the
“Productivity” and “Search Tools” categories.
To obtain a more precise view of the features of these extensions,
we collected their descriptions from our historical dataset and per-
formed a Term Frequency - Inverse Document Frequency (TF-IDF)
analysis, comparing the words in these descriptions to the words
available in the rest of the extensions. Table 9 shows the ten words
with the highest TF-IDF scores, i.e., the ten words that are signifi-
cantly more likely to be encountered in the descriptions of a mali-
cious extension, compared to the descriptions of benign extensions.
There we can see that these extensions are related to developer tasks
Ranking Word
1
2
3
4
5
calendar
estimates
keywords
javascript
animation
0.47
0.46
0.40
0.39
0.38
6
7
8
9
10
Score Ranking Word
programming
conversion
onboarding
submission
controlling
Score
0.35
0.30
0.29
0.28
0.27
Table 9: Top ten TF-IDF words in descriptions of malicious extensions
// Script injection via substrings
var config_fragment =
'';
var range = document.createRange();
range.setStart(document.body, 0);
document.body
.appendChild(range.createContextualFragment(config_fragment));
Listing 1: Script injection via String Manipulation
// Script injection via aws, previous code emitted for space
function(){
if (window._mtz_injected) return true;
window._mtz_injected = 1;
var s = document.createElement('script');
// code injection
s.src = '//s3.amazonaws.com/jscache/72d07657ba1ad678d2.js';
document.body.appendChild(s);
})();|chrome|tabs|executeScript|onUpdated"
Listing 2: Injection from Amazon Cloud (AWS)
(e.g. “javascript,” “animation,” “programming”), productivity (e.g.
“calendar” and “estimates”), and marketing (e.g. “conversion” and
“onboarding”).Table12andTable13(availableintheAppendix)show
additional extension-description words with high TF-IDF scores as
well as the overall categories of these malicious-extension-specific
words. Lastly, it is worthwhile to note that, on average, the descrip-
tion of malicious extensions was double that of benign extensions
(i.e. 14 lines of text on the Chrome store vs. 7 lines of text).
5.4 Malicious Clusters Categories
We can split the 21 clusters that our system detected into categories
based on the malicious behavior they exhibit. The overall results for
the cluster categories are available in Table 10.
5.4.1 Adware. The abuse category with the largest number of clus-
ters is adware, with eight clusters and 52 malicious extensions. Ex-
tensions in the adware category inject third-party scripts that either
display intrusive popup ads, or replace the advertisements on vis-
ited websites. Listing 1 shows an obfuscated injection where the
developer of the malicious extension breaks the script into multiple
substrings, presumably to hinder manual analysis and evade existing
detection systems. Listing 2 shows a different technique where the
extension hosts the injected script on AWS, most likely to benefit
from the trust associated with the domain.
The next category (four clusters, 28 extensions) is also related to
adwarewhere extensionswith adware behavior,request permissions
that are not necessary for their stated functionality. For example, an
extension with background-color-changing functionality, does not
need API access to geolocation, web requests, cookie, and permis-
sions to use notifications. However, we find extensions with exactly
this type of behavior, asking for unnecessary permissions enabling
them to track and monetize the collected user data.
5.4.2 History Tracking. We detected four clusters with 30 malicious
extensions, utilizing history tracking. Even though Google analytics
scripts were used, which are not malicious in and of themselves,
the way they were incorporated in these extensions leads to clear
leakage of private data. Specifically, the discovered extensions were
collecting the following features: history of the user, clicks on a
Malicious Behavior Category
Adware
No.
Clusters
No.
Permissions & Adware
User History Tracking
Extensions
52
28
30
16
17
143
Table 10: Malicious Cluster categories from JavaScript clustering
Tab & Search Engine Takeover
8
4
4
3
2
21
Vendors Tracking
Total
search prompt, search bar enabled/disabled, news feed, user iden-
tifiers, and browser type. History tracking is one of the ways to earn
revenue from an extension, gathering a user’s browsing session data
by recording browsing history and sending it to servers controlled
by the developer. In Listing 3, section (A) we can see initially how
a Google-defined advertisement looks in the code and on the next
part of the code we can see how advertisements are being used to
track users, like user id, given by the browser and being collected by
the extension. How this is actually achieved can be seen in Listing 3,
sections (B) & (C) where using XmlHttpRequest the extension sends
a request with the data stored locally, in the (B) section extension
sends the ID and the action taken by the user via generating the
http string, while on section (C) it directly sends the data from local-
Storage. Finally, in the last section (D) in the Listing we can see the
extension accessing the user history and storing it locally.
5.4.3 New Tab & Search Engine Takeover. When an extension takes
over newly-opened tabs (an example is shown in Listing 4, section
(A)) or change the user’s search engine without consent, we classify
that extension as malware. This is particularly true when an exten-
sion changes logos on search pages and adds its own affiliate links.
We detect three clusters with this behavior containing 16 extensions.
Two examples of search-engine takeover can be seen in Listing 4.
The code shown in Listing 4, section B, silently changes the search
engine to Searchgist by selectively injecting their engine-changing
script (chrome.js), when the user visits URLs of popular search
engines. The second example (Listing 4, section C) defines a list of
search engines, with searchkska.xyz website set as first option while
pretending to be Bing. In some cases (four extensions from these clus-
ters), the extensionstake over newly-created tabs and search engines.
5.4.4 Vendor Tracking. Other than Google analytics, there are mul-
tiple other tracking agencies when they are being misused. We found
two clusters of third-party tracking and 17 malicious extension in
those clusters. These third parties include Alibaba, Wish, Gearbest,
Amazon, Banggood analytics, edatasales website tracking and ecosia
URLs tracking. Examples of all those categories can be seen in List-
ing 5 (in the Appendix). This code tracks the products the user is
watching in those websites, the frequency the user visits these sites
and the types of website categories the user typically browses. This
type of user-preferences data, once collected, can later be monetized
by selling them to ad companies. In total, the two Tracking categories
combined have six malicious clusters and 47 extensions.
5.5 Case Studies
In this section we present some case studies showcasing a wide range
of extension abuse and their detection in a malice-agnostic way.
// (A) ga tracking
var _gaq = _gaq || [];
_gaq.push(["
_setAccount", "UA-42433700-1"]), _gaq.push(["_trackPageview"]),
function() {
var a = document.createElement("script");
a.type = "text/javascript",
a.async = !0, a.src = "https://ssl.google-analytics.com/ga.js";
var b = document.getElementsByTagName("script")[0];
b.parentNode.insertBefore(a, b) }(),
// (B) xhr to Google analytics
function() {
gManager.getUid(function (uid) {
var
q = '?v=1' + '&tid=' + AnalyticsId + cid + '&ads=ext' + '&t=event
' + '&ec=' + category + '&ea=' + action + '&el=' + (label || '');
q += '&z=' + generateGuid();
var request = new XMLHHttpRequest();
request.open
('GET', 'https://www.google-analytics.com/collect' + q, true);
request.send(); }
// (C) xhr dictionary style
xhr.open("GET", localStorage['prodUrl'] + scriptVerPath, false);
// (D) History Tracking
chrome.runtime.sendMessage({
message: 'getHistory'
}, null);
chrome.runtime.onMessage.addListener(
function(request, sender, sendResponse) {
if (request.dataHistory) {
var dataHistory = request.dataHistory; });
Listing 3: History Tracking using Analytics
5.5.1 Listed-Unlisted Cluster. An interesting result from our clus-
tering approach is a cluster containing ten extensions, five of which
are unlisted in the Chrome extension store. Unlisted extensions are
extensions which users cannot find by searching, but require a spe-
cific link that will lead to their installation [8]. By analyzing these
extensions, we concluded that they work in concert and likely be-
long to the same actor. These extensions attempt to exfiltrate user
data and convince the user to install additional extensions. They are
installed by a total of 400K users, some of whom left reviews inquir-
ing about how these extensions were installed on their browsers.
The formation of this cluster exemplifies the power of our proposed
system which can group seemingly independent extensions into
campaigns and help with attack attribution.
5.5.2 Multilingual Cluster. Both benign and malicious extensions
can provide content that is tailored to different geographical regions,
through the use of region-specific extensions that use different lan-
guages. In our case, one malicious, multilingual cluster is the “Search