我们将应用于您的自定义 ECS 容器实例映像的最后一组自定义是创建第一次运行脚本，该脚本将负责在实例创建时执行 ECS 容器实例的运行时配置，方法是执行以下任务:
*   配置 ECS 集群成员资格
*   配置 HTTP 代理支持
*   配置云监视日志代理
*   启动所需服务
*   执行健康检查
要调配第一次运行的脚本，您需要在 Packer 模板中定义一个文件调配器任务，如下所示:
```
{
  "variables": {...},
  "builders": [...],
  "provisioners": [
    {
      "type": "shell",
      "script": "scripts/storage.sh"
    },
    {
      "type": "shell",
      "script": "scripts/time.sh",
      "environment_vars": [
        "TIMEZONE={{user `timezone`}}"
      ]
    },
    {
      "type": "shell",
      "script": "scripts/cloudinit.sh"
    },
    {
      "type": "shell",
      "inline": [
        "sudo yum -y -x docker\\* -x ecs\\* update",
        "sudo yum -y install aws-cfn-bootstrap awslogs jq"
      ] 
    },
    {
      "type": "shell",
      "script": "scripts/cleanup.sh"
    },
    {
 "type": "file",
 "source": "files/firstrun.sh",
 "destination": "/home/ec2-user/firstrun.sh"
 }
  ],
  "post-processors": [...]
}
```
Adding a file provisioner
请注意，置备程序类型配置为`file`，并指定了需要位于`files/firstrun.sh`的本地源文件。`destination`参数定义了第一个运行脚本在 AMI 中的位置。请注意，文件供应器任务以`ec2-user`用户的身份复制文件，因此它对该脚本可以复制到哪里具有有限的权限。
# 配置 ECS 集群成员资格
现在，您可以在 Packer 模板引用的文件/firstrun.sh 位置创建第一次运行脚本。在开始配置此文件之前，一定要记住，第一次运行的脚本设计为在从您的自定义机器映像创建的实例的初始引导时运行，因此在配置将要执行的各种命令时，您必须考虑这一点。
我们将首先创建并配置 ECS 代理，以加入 ECS 容器实例打算加入的 ECS 集群，如下例所示:
```
#!/usr/bin/env bash
set -e
# Configure ECS Agent
echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
```
Configuring ECS cluster membership
回到[第 5 章](05.html)、*使用 ECR* 发布 Docker 映像，您看到了 ECS 集群向导如何使用相同的方法配置 ECS 容器实例，尽管一个不同之处是脚本期望在环境中配置名为`ECS_CLUSTER`的环境变量，如`${ECS_CLUSTER}`表达式所指定的。不是硬编码 ECS 集群名称，这会使第一次运行的脚本非常不灵活，这里的想法是应用于给定实例的配置用正确的集群名称定义`ECS_CLUSTER`环境变量，这意味着脚本是可重用的，并且可以用任何给定的 ECS 集群进行配置。
# 配置 HTTP 代理支持
一个常见的安全最佳实践是将您的 ECS 容器实例放在私有子网中，这意味着它们位于没有默认互联网路由的子网中。这种方法使攻击者更难危害您的系统，即使他们危害了您的系统，也提供了一种手段来限制他们可以传输回互联网的信息。
根据您的应用的性质，您通常会要求您的 ECS 容器实例能够连接到互联网，并且使用 HTTP 代理提供了一种有效的机制，通过第 7 层应用层检查功能以受控的方式提供这种访问。
无论您的应用的性质如何，理解 ECS 容器实例出于以下目的需要互联网连接是很重要的:
*   ECS 代理与 ECS 的控制平面和管理平面通信
*   Docker 引擎与 ECR 和其他存储库的通信，用于下载 Docker 映像
*   CloudWatch 日志代理与 CloudWatch 日志服务的通信
*   云信息助手-与云信息服务的脚本通信
尽管配置完整的端到端代理解决方案超出了本书的范围，但了解如何自定义 ECS 容器实例以使用 HTTP 代理还是很有用的，如以下示例所示:
```
#!/usr/bin/env bash
set -e
# Configure ECS Agent
echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
# Set HTTP Proxy URL if provided
if [ -n $PROXY_URL ]
then
 echo export HTTPS_PROXY=$PROXY_URL >> /etc/sysconfig/docker
 echo HTTPS_PROXY=$PROXY_URL >> /etc/ecs/ecs.config
 echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config
 echo HTTP_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
 echo HTTPS_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
 echo NO_PROXY=169.254.169.254 >> /etc/awslogs/proxy.conf
fi
```
Configuring HTTP proxy support
在前面的示例中，脚本检查名为`PROXY_URL`的非空环境变量的存在，如果存在，则继续为 ECS 容器实例的各个组件配置代理设置:
*   Docker 引擎:通过`/etc/sysconfig/docker`配置
*   ECS 代理:通过`/etc/ecs/ecs.config`配置
*   云观察日志代理:通过`/etc/awslogs/proxy.conf`配置
请注意，在某些情况下，您需要配置`NO_PROXY`设置，该设置禁用以下 IP 地址的代理通信:
*   `169.254.169.254`:这是一个特殊的本地地址，用于与 EC2 元数据服务通信，以获取实例元数据，如 EC2 实例角色凭据。
*   `169.254.170.2`:这是一个特殊的本地地址，用于获取 ECS 任务凭证。
# 配置云监视日志代理
您将在第一次运行的脚本中执行的下一个配置任务是配置 CloudWatch 日志代理。在 ECS 容器实例上，CloudWatch 日志代理负责收集系统日志，如操作系统、Docker 和 ECS 代理日志。
Note that this agent is NOT required to implement CloudWatch logs support for your Docker containers - this is already implemented within the Docker Engine via the `awslogs` logging driver.
配置 CloudWatch 日志代理需要您执行以下配置任务:
*   **配置正确的 AWS 区域**:对于这个任务，您将注入一个名为`AWS_DEFAULT_REGION`的环境变量的值，并将其写入`/etc/awslogs/awscli.conf`文件。
*   **定义 CloudWatch 日志代理将登录到的各种日志组和日志流设置**:对于此任务，您将为 ECS 容器实例定义一组推荐的日志组，在[https://docs . AWS . Amazon . com/AmazonECS/latest/developer guide/using _ CloudWatch _ logs . html # configure _ cwl _ agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_cloudwatch_logs.html#configure_cwl_agent)中有描述
以下示例演示了所需的配置:
```
#!/usr/bin/env bash
set -e
# Configure ECS Agent
echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
# Set HTTP Proxy URL if provided
if [ -n $PROXY_URL ]
then
  echo export HTTPS_PROXY=$PROXY_URL >> /etc/sysconfig/docker
  echo HTTPS_PROXY=$PROXY_URL >> /etc/ecs/ecs.config
  echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config
  echo HTTP_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
  echo HTTPS_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
  echo NO_PROXY=169.254.169.254 >> /etc/awslogs/proxy.conf
fi
# Write AWS Logs region
sudo tee /etc/awslogs/awscli.conf  /dev/null
[plugins]
cwlogs = cwlogs
[default]
region = ${AWS_DEFAULT_REGION}
EOF
# Write AWS Logs config
sudo tee /etc/awslogs/awslogs.conf  /dev/null
[general]
state_file = /var/lib/awslogs/agent-state 
[/var/log/dmesg]
file = /var/log/dmesg
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/dmesg
log_stream_name = {instance_id} 
[/var/log/messages]
file = /var/log/messages
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/messages
log_stream_name = {instance_id}
datetime_format = %b %d %H:%M:%S 
[/var/log/docker]
file = /var/log/docker
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/docker
log_stream_name = {instance_id}
datetime_format = %Y-%m-%dT%H:%M:%S.%f 
[/var/log/ecs/ecs-init.log]
file = /var/log/ecs/ecs-init.log*
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/ecs-init
log_stream_name = {instance_id}
datetime_format = %Y-%m-%dT%H:%M:%SZ
time_zone = UTC 
[/var/log/ecs/ecs-agent.log]
file = /var/log/ecs/ecs-agent.log*
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/ecs-agent
log_stream_name = {instance_id}
datetime_format = %Y-%m-%dT%H:%M:%SZ
time_zone = UTC
[/var/log/ecs/audit.log]
file = /var/log/ecs/audit.log*
log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/audit.log
log_stream_name = {instance_id}
datetime_format = %Y-%m-%dT%H:%M:%SZ
time_zone = UTC
EOF
```
Configuring the CloudWatch logs agent
您可以看到，第一次运行的脚本在每个定义的日志组的`log_group_name`参数中包含了对环境变量的引用，这有助于确保您的 AWS 帐户中唯一的日志组命名:
*   `STACK_NAME`:云信息栈的名称
*   `AUTOSCALING_GROUP`:自动缩放组的名称
同样，这些环境变量必须在实例创建时注入到第一次运行的脚本中，因此在我们将学习如何做到这一点的未来章节中请记住这一点。
在前面的例子中需要注意的另一点是每个`log_stream_name`参数的值——这被设置为一个名为`{instance_id}`的特殊变量，CloudWatch 日志代理将使用该实例的 EC2 实例标识自动配置该变量。
最终结果是，您将获得每种日志类型的几个日志组，这些日志组的范围是给定的 CloudFormation 栈和 EC2 自动扩展组的上下文，在每个日志组中，将为每个 ECS 容器实例创建一个日志流，如下图所示:
![](img/a199eec7-ad83-4e86-bd90-ac0febe0df2f.png)
CloudWatch logs group configuration for ECS container instances
# 启动所需服务
回想一下前面的例子，您添加了一个清理脚本作为映像构建过程的一部分，它禁止 Docker Engine 服务在启动时启动。这种方法允许您在启动 Docker 引擎之前执行所需的初始化任务，在第一次运行脚本的这一点上，我们已经准备好启动 Docker 引擎和其他重要的系统服务:
```
#!/usr/bin/env bash