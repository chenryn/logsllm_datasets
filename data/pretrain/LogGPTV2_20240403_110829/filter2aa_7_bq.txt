  (lambda (i) (incf n i)))
^“下面是一些Lisp方言生成累加器函数的写法：
Scheme:
(define (foo n)
  (lambda (i) (set! n (+ n i)) n))
Goo: (df foo (n) (op incf n _)))
Arc: (def foo (n) [++ n _])”
  Ruby的写法几乎完全相同：
def foo (n)
  lambda {|i| n += i } end
  Perl 5的写法则是：
sub foo {
  my ($n) = @_;
  sub {$n += shift}
}
  这比Lisp和Ruby的版本有更多的语法元素，因为在Perl语言中必须手工提取参数。
  Smalltalk的写法比Lisp和Ruby的稍微长一点：
foo: n
  |s|
  s := n.
  ^[:i| s := s+i. ]
  因为在Smalltalk中，词法变量（lexical variable）^是有效的，但是你无法给一个参数赋值，因此不得不设置了一个新变量，接受累加后的值。
^“词法变量，指的是变量的作用域由代码结构决定，不取决于运行时的调用顺序。也就是说，作用域在代码文本的词法分析阶段就决定了，而不在代码执行时决定。注意将这个概念与“局部变量”的概念相区分。——译者注”
  JavaScript的写法也比Lisp和Ruby稍微长一点，因为JavaScript依然区分语句和表达式，所以需要明确指定return语句来返回一个值：
function foo(n) {
  return function (i) {
    return n += i } }
  （实事求是地说，Perl也保留了语句和表达式的区别，但是使用了常规的Perl方式处理，因此可以省略return。）
  如果想把Lisp/Ruby/Perl/Smalltalk/JavaScript的版本改成Python，你会遇到一些限制。因为Pythcn并不完全支持词法变量，你不得不创造一种数据结构来接受n的值。而且尽管Python确实支持函数数据类型，但是没有一种字面量的表示方式（literal representation）可以生成函数（除非函数体只有一个表达式），所以你需要创造一个命名函数，把它返回。最后的写法如下：
def foo(n):
  s = [n]