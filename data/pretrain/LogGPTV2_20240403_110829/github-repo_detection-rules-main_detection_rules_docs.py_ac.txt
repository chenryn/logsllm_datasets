    @staticmethod
    def parse_release(release_version: str) -> (str, str, str):
        """Parse the release version into a string, base name, and prebuilt rule base."""
        release_version = Version.parse(release_version)
        short_release_version = [str(n) for n in release_version[:3]]
        release_version_str = '.'.join(short_release_version)
        base_name = "-".join(short_release_version)
        prebuilt_rule_base = f'prebuilt-rule-{base_name}'
        return release_version_str, base_name, prebuilt_rule_base
    def get_rule_changes(self):
        """Compare the rules from the new_package against rules in the historical_package."""
        rule_changes = defaultdict(list)
        rule_changes["new"], rule_changes["updated"], rule_changes["deprecated"] = [], [], []
        historical_rule_ids = set(self.historical_package.keys())
        # Identify new and updated rules
        for rule in self.new_package.rules:
            rule_to_api_format = rule.contents.to_api_format()
            latest_version = rule_to_api_format["version"]
            rule_id = f'{rule.id}_{latest_version}'
            if rule_id not in historical_rule_ids and latest_version == 1:
                rule_changes['new'].append(rule)
            elif rule_id not in historical_rule_ids:
                rule_changes['updated'].append(rule)
        # Identify deprecated rules
        # if rule is in the historical but not in the current package, its deprecated
        deprecated_rule_ids = []
        for _, content in self.historical_package.items():
            rule_id = content["attributes"]["rule_id"]
            if rule_id in self.new_package.deprecated_rules.id_map.keys():
                deprecated_rule_ids.append(rule_id)
        deprecated_rule_ids = list(set(deprecated_rule_ids))
        for rule_id in deprecated_rule_ids:
            rule_changes['deprecated'].append(self.new_package.deprecated_rules.id_map[rule_id])
        return dict(rule_changes)
    def generate_current_rule_summary(self):
        """Generate a summary of all available current rules in the latest package."""
        slug = f'prebuilt-rules-{self.base_name}-all-available-summary.mdx'
        summary = self.package_directory / slug
        title = f'Latest rules for Stack Version ^{self.release_version_str}'
        summary_header = textwrap.dedent(f"""
        ---
        id: {slug}
        slug: /security-rules/{slug}
        title: {title}
        date: {datetime.today().strftime('%Y-%d-%m')}
        tags: ["rules", "security", "detection-rules"]
        ---
        ## {title}
        This section lists all available rules supporting latest package version {self.release_version_str}
            and greater of the Fleet integration *Prebuilt Security Detection Rules*.
        | Rule | Description | Tags | Version
        |---|---|---|---|
        """).lstrip()
        rule_entries = []
        for rule in self.new_package.rules:
            title_name = name_to_title(rule.name)
            to_api_format = rule.contents.to_api_format()
            tags = ", ".join(to_api_format["tags"])
            rule_entries.append(f'| [{title_name}](rules/{self.prebuilt_rule_base}-{name_to_title(rule.name)}.mdx) | '
                                f'{to_api_format["description"]} | {tags} | '
                                f'{to_api_format["version"]}')
        rule_entries = sorted(rule_entries)
        rule_entries = '\n'.join(rule_entries)
        summary.write_text(summary_header + rule_entries)
    def generate_update_summary(self):
        """Generate a summary of all rule updates based on the latest package."""
        slug = f'prebuilt-rules-{self.base_name}-update-summary.mdx'
        summary = self.package_directory / slug
        title = "Current Available Rules"
        summary_header = textwrap.dedent(f"""
        ---
        id: {slug}
        slug: /security-rules/{slug}
        title: {title}
        date: {datetime.today().strftime('%Y-%d-%m')}
        tags: ["rules", "security", "detection-rules"]
        ---
        ## {title}
        This section lists all updates associated with version {self.release_version_str}
            of the Fleet integration *Prebuilt Security Detection Rules*.
        | Rule | Description | Status | Version
        |---|---|---|---|
        """).lstrip()
        rule_entries = []
        new_rule_id_list = [rule.id for rule in self.rule_changes["new"]]
        updated_rule_id_list = [rule.id for rule in self.rule_changes["updated"]]
        for rule in self.included_rules:
            title_name = name_to_title(rule.name)
            status = 'new' if rule.id in new_rule_id_list else 'update' if rule.id in updated_rule_id_list \
                else 'deprecated'
            to_api_format = rule.contents.to_api_format()
            rule_entries.append(f'| [{title_name}](rules/{self.prebuilt_rule_base}-{name_to_title(rule.name)}.mdx) | '
                                f'{to_api_format["description"]} | {status} | '
                                f'{to_api_format["version"]}')
        rule_entries = sorted(rule_entries)
        rule_entries = '\n'.join(rule_entries)
        summary.write_text(summary_header + rule_entries)
    def generate_rule_details(self):
        """Generate a markdown file for each rule."""
        rules_dir = self.package_directory / "rules"
        rules_dir.mkdir(exist_ok=True)
        for rule in self.new_package.rules:
            slug = f'{self.prebuilt_rule_base}-{name_to_title(rule.name)}.mdx'
            rule_detail = IntegrationRuleDetailMDX(rule.id, rule.contents.to_api_format(), {}, self.base_name)
            rule_path = rules_dir / slug
            tags = ', '.join(f"\"{tag}\"" for tag in rule.contents.data.tags)
            frontmatter = textwrap.dedent(f"""
            ---
            id: {slug}
            slug: /security-rules/{slug}
            title: {rule.name}
            date: {datetime.today().strftime('%Y-%d-%m')}
            tags: [{tags}]
            ---
            """).lstrip()
            rule_path.write_text(frontmatter + rule_detail.generate())
    def generate_downloadable_updates_summary(self):
        """Generate a summary of all the downloadable updates."""
        docs_url = 'https://www.elastic.co/guide/en/security/current/rules-ui-management.html#download-prebuilt-rules'
        slug = 'prebuilt-rules-downloadable-packages-summary.mdx'
        title = "Downloadable rule updates"
        summary = self.package_directory / slug
        today = datetime.today().strftime('%d %b %Y')
        package_list = DownloadableUpdates.load_updates()
        ref = f"./prebuilt-rules-{self.base_name}-update-summary.mdx"
        # Add a new entry
        new_entry = UpdateEntry(
            update_version=self.release_version_str,
            date=today,
            new_rules=len(self.rule_changes["new"]),
            updated_rules=len(self.rule_changes["updated"]),
            note=self.note,
            url=ref
        )
        package_list.add_entry(new_entry, self.overwrite)
        # Write the updated Package object back to the JSON file
        package_list.save_updates()
        # generate the summary
        summary_header = textwrap.dedent(f"""
        ---
        id: {slug}
        slug: /security-rules/{slug}
        title: {title}
        date: {datetime.today().strftime('%Y-%d-%m')}
        tags: ["rules", "security", "detection-rules"]
        ---
        ## {title}
        This section lists all updates to prebuilt detection rules, made available
            with the Prebuilt Security Detection Rules integration in Fleet.
        To download the latest updates, follow the instructions in [download-prebuilt-rules]({docs_url})
        |Update version |Date | New rules | Updated rules | Notes
        |---|---|---|---|---|
        """).lstrip()
        entries = []
        for entry in sorted(package_list.packages, key=lambda entry: Version.parse(entry.update_version), reverse=True):
            entries.append(f'| [{entry.update_version}]({entry.url}) | {today} |'
                           f' {entry.new_rules} | {entry.updated_rules} | {entry.note}| ')
        entries = '\n'.join(entries)
        summary.write_text(summary_header + entries)
    def generate(self) -> Path:
        """Generate the updates."""
        # generate all the rules as markdown files
        self.generate_rule_details()
        # generate the rule summary of changes within a package
        self.generate_update_summary()
        # generate the package summary that lists all downloadable packages
        self.generate_downloadable_updates_summary()
        # generate the overview that lists all current available rules
        self.generate_current_rule_summary()
        return self.package_directory
class IntegrationRuleDetailMDX:
    """Generates a rule detail page in Markdown."""
    def __init__(self, rule_id: str, rule: dict, changelog: Dict[str, dict], package_str: str):
        """Initialize with rule ID, rule details, changelog, and package string.
        >>> rule_file = "/path/to/rule.toml"
        >>> rule = RuleCollection().load_file(Path(rule_file))
        >>> rule_detail = IntegrationRuleDetailMDX(rule.id, rule.contents.to_api_format(), {}, "test")
        >>> rule_detail.generate()
        """
        self.rule_id = rule_id
        self.rule = rule
        self.changelog = changelog
        self.package = package_str
        self.rule_title = f'prebuilt-rule-{self.package}-{name_to_title(self.rule["name"])}'
        # set some defaults
        self.rule.setdefault('max_signals', 100)
        self.rule.setdefault('interval', '5m')
    def generate(self) -> str:
        """Generate the rule detail page in Markdown."""
        page = [
            MDX.title(1, self.rule["name"]),
            '',
            self.rule['description'],
            '',
            self.metadata_str(),
            ''
        ]
        if 'note' in self.rule:
            page.extend([self.guide_str(), ''])
        if 'query' in self.rule:
            page.extend([self.query_str(), ''])
        if 'threat' in self.rule:
            page.extend([self.threat_mapping_str(), ''])
        return '\n'.join(page)
    def metadata_str(self) -> str:
        """Generate the metadata section for the rule detail page."""
        date_math_doc = "https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#date-math"
        loopback_doc = "https://www.elastic.co/guide/en/security/current/rules-ui-create.html#rule-schedule"
        fields = {
            'type': 'Rule type',
            'index': 'Rule indices',
            'severity': 'Severity',
            'risk_score': 'Risk score',
            'interval': 'Runs every',
            'from': 'Searches indices from',
            'max_signals': 'Maximum alerts per execution',
            'references': 'References',
            'tags': 'Tags',
            'version': 'Version',
            'author': 'Rule authors',
            'license': 'Rule license'
        }
        values = []
        for field, friendly_name in fields.items():
            value = self.rule.get(field) or self.changelog.get(field)
            if isinstance(value, list):
                str_value = MDX.bulleted_list(value)
            else:
                str_value = str(value)
            if field == 'from':
                str_value += f' ([Date Math format]({date_math_doc}), [Additional look-back time]({loopback_doc}))'
            values.append(MDX.bold_kv(friendly_name, str_value))
        return '\n\n'.join(values)
    def guide_str(self) -> str:
        """Generate the investigation guide section for the rule detail page."""
        return f'{MDX.title(2, "Investigation guide")}\n\n{MDX.code(self.rule["note"], "markdown")}'
    def query_str(self) -> str:
        """Generate the rule query section for the rule detail page."""
        return f'{MDX.title(2, "Rule query")}\n\n{MDX.code(self.rule["query"], "sql")}'
    def threat_mapping_str(self) -> str:
        """Generate the threat mapping section for the rule detail page."""
        values = [MDX.bold_kv('Framework', 'MITRE ATT&CK^TM^')]
        for entry in self.rule['threat']:
            tactic = entry['tactic']
            entry_values = [
                MDX.bulleted(MDX.bold('Tactic:')),
                MDX.bulleted(f'Name: {tactic["name"]}', depth=2),
                MDX.bulleted(f'ID: {tactic["id"]}', depth=2),
                MDX.bulleted(f'Reference URL: {tactic["reference"]}', depth=2)
            ]
            techniques = entry.get('technique', [])
            for technique in techniques:
                entry_values.extend([
                    MDX.bulleted('Technique:'),
                    MDX.bulleted(f'Name: {technique["name"]}', depth=3),
                    MDX.bulleted(f'ID: {technique["id"]}', depth=3),
                    MDX.bulleted(f'Reference URL: {technique["reference"]}', depth=3)
                ])
                subtechniques = technique.get('subtechnique', [])
                for subtechnique in subtechniques:
                    entry_values.extend([
                        MDX.bulleted('Sub-technique:'),
                        MDX.bulleted(f'Name: {subtechnique["name"]}', depth=3),
                        MDX.bulleted(f'ID: {subtechnique["id"]}', depth=3),
                        MDX.bulleted(f'Reference URL: {subtechnique["reference"]}', depth=4)
                    ])
            values.extend(entry_values)
        return '\n'.join(values)