作者：[启明星辰ADLab](https://mp.weixin.qq.com/s/UXK8-ZN7mSUI3mPq2SC6Og "启明星辰ADLab")
### 1 概述
随着区块链、以太坊技术的兴起和不断成熟，安全问题也随之而来，今年智能合约漏洞已经让多个区块链项目价值瞬间归零。智能合约的开发语言、设计模式、运行机制都与传统应用有较大差异，它既有传统的安全风险(如整数溢出等)，又有独特的新型风险(如私有变量不“私有”和特殊类型变量覆盖等)。研发人员如果不能深刻理解这些核心原理，则很容易编写出存在漏洞的智能合约；恶意合约也可以通过这种方法留下隐蔽漏洞，欺骗合约投资人并暗地里收割。本文以WCTF2018的一道智能合约漏洞赛题[1]为例，从solidity语言特性出发，深度解读以太坊智能合约漏洞原理和攻击利用。
### 2 漏洞合约分析
该合约是一个银行类合约，用户可以存入eth到该合约，并在存入到期之后取出。原题对该合约描述如下：
该合约中存在漏洞，攻击者利用漏洞可以盗取合约中的所有余额。漏洞涉及到整数溢出、变量覆盖以及由变量覆盖导致的变量相互影响。
合约源码如下：
要提取合约的全部合约余额，confiscate 函数是关键，但该函数调用成功必须满足：
  * msg.sender == owner
  * secret == _secret
  * now >= balances[account].deposit_term + 1 years
攻击者可以通过合约存储访问、整数溢出和变量覆盖来依次构造上述条件。
#### 2.1 solidity全局变量存储
在BelluminarBank合约中，一共有4个全局变量，分别是balances、head、owner、secrete。它们的默认访问属性是private，看上去只有合约自己能够访问这些变量。事实上，合约的所有变量数据都是公开存储在链上的区块中，任何人都可以通过访问存储数据来获得这些变量的值[2]。在solidity语言中，全局变量都存储在storage中，根据solidity的变量存储规则，定长的变量在storage中是顺序存储的，数组变量在storage中其索引位置存放的是其数组长度（参见[3]）。该合约storage中的变量存储布局如下：
对于在公链部署的合约，可通过以太坊web3接口`web3.eth.getStorageAt(co ntractAddress,
index)`获取某个合约指定storage索引的数据。
因此，secrete并不是一个不可获取的私有数据，攻击者只需要访问该合约storage中的数据就可以构造confiscate 函数的`secret ==
_secret`条件。
#### 2.2 solidity全局变量覆盖
BelluminarBank合约中的confiscate函数要求调用者必须是合约拥有者才可以进行余额提取操作，看上去攻击者是无法提取的。然而，由于solidity语言的局部变量存储特性，导致本合约的owner变量可以被修改，覆盖问题出现在
invest 函数中。
首先来看solidity局部变量覆盖全局storage的问题。solidity语言的变量存储有一个特性，即数组、映射、结构体类型的局部变量默认是引用合约的storage
[4]，而全局变量默认存储在storage中。因此，如果这些局部变量未被初始化，则它们将直接指向storage，修改这些变量就是在修改全局变量。
以如下的简单合约test为例，函数test1中定义了一个局部结构体变量x，但是没有对其进行初始化。根据solidity的变量存储规则，这时候x是存储在storage中的，而且是从索引0开始，那么对其成员变量x,y赋值之后，刚好覆盖了全局变量a和b。有兴趣可以在
remix 中在线对本合约进行调试。
    pragma solidity 0.4.24;
    contract test {
        struct aa{
            uint x;
            uint y;
        }
        uint public a = 4;
        uint public b = 6;
        function test1() returns (uint){
            aa x;
            x.x = 9;
            x.y = 7;
        }
    }
在invest函数的else分支中，使用了一个局部结构变量investment。该局部变量在当前执行分支中并没有被初始化，默认指向合约的storage。执行中对该变量的成员赋值就会直接覆盖全局变量，覆盖关系为：
同时，在变量覆盖之前必须满足如下条件，即存款期限是最末一个存款记录的期限后一年：`deposit_term >=
balances[balances.length - 1].deposit_term + 1
years`。由于deposit_term是用户提供的，轻松就可以满足。
所以，通过精心构造invest函数的参数就可以覆盖stroage中的sender，从而改变该合约的拥有者为攻击者，突破confiscate
函数的msg.sender == owner限制。
#### 2.3 整数溢出
在BelluminarBank合约源码的confiscate函数还有另外一个如下的时间限制，即必须在存款满一年后才能提取，`now >=
balances[account].deposit_term + 1 years`。
上一节用于全局变量覆盖的存款操作使得balances中最末一个存储记录的期限已经是1年后，即攻击者至少在2年后才能调用confiscate函数进行提款。与此同时，deposit_term在赋值给局部变量的时候会把全局变量head覆盖为超大的数，这也使得后续的`for
(uint256 i = head; i = balances[balances.length - 1].deposit_term + 1 years`。
仔细分析可发现，如果`balances[balances.length - 1].deposit_term+ 1
years`恰好等于0，则上述的条件恒为真。显然，`balances[balances.length -1].deposit_term`只要取值为`(uint256_max – 1 years +
1)`，就会导致相加后的值为`uint256_max+1`。这个结果会超过uint256的表达空间，产生溢出导致最后的值为0。
因此，攻击者先做第一次存款，把balances最后一项的`deposit_term`设置为特殊值；然后做第二次存款，`deposit_term`传入0值，就能触发整数溢出，绕过变量覆盖条件限制并修改head为0值。
#### 2.4 “变量纠缠”的副作用
在全局变量覆盖中，很容易产生“变量纠缠”现象，从而触发一些容易被忽视的副作用。这里以一个简单合约test为例，函数testArray中依然存在结构体局部变量a覆盖全局变量x的情况。但由于x是数组变量，其直接索引的storage存储位置仅存储其数组长度，也就是a.x只会覆盖x的数据长度，而a.y将覆盖变量num。
在testArray函数中，赋值操作a.x =
5时，因为x.length与变量a.x处于同一存储位置，赋值后数组x的长度变成了5。接下来，赋值a.y，并将变量a加入到数组x。所以变量a实际上加入到了数组x索引为5的位置。如果调试testArray函数执行，会发现在函数执行完毕之后，x[5].x
= 6, x[5].y = 7。
这是为什么呢？明明代码中赋值写的是 a.x = 5，a.y =
7。这就是全局变量x和局部变量a形成了“纠缠”，首先是局部变量a修改导致全局变量x改变，然后是全局变量x修改导致了局部变量修改，最后把修改后的局部变量又存储到修改后的全局变量。这里即是，赋值操作a.x
= 5时，把数组x的长度变成了5; 接下来x.push操作，实际上是先将该数组x的长度加1，此时a.x = 6; 最后再把a.x = 6,
a.y=7加入到x[5]。所以，存入数据的x就是新数组的长度6。
    pragma solidity 0.4.24;
    contract test {
        struct aa{
            uint x;
            uint y;
        }
        aa [] x;
        uint public num = 4;
        function testArray() returns (uint){
            aa a;