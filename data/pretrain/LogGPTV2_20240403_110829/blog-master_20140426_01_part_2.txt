--------+----------------+-------+----------+--------+-------------  
 public | tbl_cost_align | table | postgres | 219 MB |   
(1 row)  
digoal=# \di+ tbl_cost_align_id   
                                  List of relations  
 Schema |       Name        | Type  |  Owner   |     Table      | Size  | Description   
--------+-------------------+-------+----------+----------------+-------+-------------  
 public | tbl_cost_align_id | index | postgres | tbl_cost_align | 64 MB |   
(1 row)  
```  
把random_page_cost校准为10, 这个在一般的硬件环境中都适用.  
```  
digoal=# set random_page_cost=10;  
SET  
```  
默认选择了全表扫描  
```  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                            QUERY PLAN                                                               
-----------------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on public.tbl_cost_align  (cost=0.00..65538.00 rows=2996963 width=45) (actual time=0.050..1477.028 rows=2997015 loops=1)  
   Output: id, info, crt_time  
   Filter: (tbl_cost_align.id > 2000000)  
   Rows Removed by Filter: 2985  
   Buffers: shared hit=28038  
 Total runtime: 2011.742 ms  
(6 rows)  
```  
关闭全表扫描后, 选择了bitmap scan  
```  
digoal=# set enable_seqscan=off;  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                                     QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------------------  
----------------  
 Bitmap Heap Scan on public.tbl_cost_align  (cost=105426.89..170926.93 rows=2996963 width=45) (actual time=1221.104..2911.889 rows=2  
997015 loops=1)  
   Output: id, info, crt_time  
   Recheck Cond: (tbl_cost_align.id > 2000000)  
   Rows Removed by Index Recheck: 2105  
   Buffers: shared hit=36229  
   ->  Bitmap Index Scan on tbl_cost_align_id  (cost=0.00..104677.65 rows=2996963 width=0) (actual time=1214.865..1214.865 rows=2997  
015 loops=1)  
         Index Cond: (tbl_cost_align.id > 2000000)  
         Buffers: shared hit=8191  
 Total runtime: 3585.699 ms  
(9 rows)  
```  
关闭bitmap scan后选择了index scan, index scan的cost远远大于评估到的bitmap scan. 因为我们使用了正确的成本因子.  
```  
digoal=# set enable_bitmapscan=off;  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                                           QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------------------------------  
----------------------------  
 Index Scan using tbl_cost_align_id on public.tbl_cost_align  (cost=0.43..16601388.04 rows=2996963 width=45) (actual time=0.064..566  
2.361 rows=2997015 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 2000000)  
   Buffers: shared hit=3005084  
 Total runtime: 6173.067 ms  
(5 rows)  
```  
当错误的设置了random_page_cost=1=seq_page_cost时, 执行计划会有所改变(改变出现在effective_cache_size大于表和索引的大小时).  
```  
the wrong plan cost occur when i set random_page_cost to 1, and effective_cache_size big then index size and table size in this case.  
```  
重新进入psql, 所有因子重回默认值.  
```  
digoal=# set random_page_cost=1;  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                            QUERY PLAN                                                               
-----------------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on public.tbl_cost_align  (cost=0.00..65538.00 rows=2996963 width=45) (actual time=0.040..1692.712 rows=2997015 loops=1)  
   Output: id, info, crt_time  
   Filter: (tbl_cost_align.id > 2000000)  
   Rows Removed by Filter: 2985  
   Buffers: shared hit=28038  
 Total runtime: 2249.313 ms  
(6 rows)  
```  
目前看来还正确  
```  
digoal=# set enable_seqscan=off;  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                                    QUERY PLAN                                                        
------------------------------------------------------------------------------------------------------------------------------------  
--------------  
 Bitmap Heap Scan on public.tbl_cost_align  (cost=31446.89..96946.93 rows=2996963 width=45) (actual time=1224.445..2454.797 rows=299  
7015 loops=1)  
   Output: id, info, crt_time  
   Recheck Cond: (tbl_cost_align.id > 2000000)  
   Rows Removed by Index Recheck: 2105  
   Buffers: shared hit=36229  
   ->  Bitmap Index Scan on tbl_cost_align_id  (cost=0.00..30697.65 rows=2996963 width=0) (actual time=1220.404..1220.404 rows=29970  
15 loops=1)  
         Index Cond: (tbl_cost_align.id > 2000000)  
         Buffers: shared hit=8191  
 Total runtime: 2955.816 ms  
(9 rows)  
```  
当effective_cache_size还是小于表和索引时, 执行计划依旧正确  
```  
digoal=# set effective_cache_size='280MB';  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                                   QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------------------  
-------------  
 Bitmap Heap Scan on public.tbl_cost_align  (cost=31446.89..96946.93 rows=2996963 width=45) (actual time=963.845..2060.463 rows=2997  
015 loops=1)  
   Output: id, info, crt_time  
   Recheck Cond: (tbl_cost_align.id > 2000000)  
   Rows Removed by Index Recheck: 2105  
   Buffers: shared hit=36229  
   ->  Bitmap Index Scan on tbl_cost_align_id  (cost=0.00..30697.65 rows=2996963 width=0) (actual time=959.673..959.673 rows=2997015  
 loops=1)  
         Index Cond: (tbl_cost_align.id > 2000000)  
         Buffers: shared hit=8191  
 Total runtime: 2515.649 ms  
(9 rows)  
```  
当effective_cache_size大于表和索引的大小时, index scan的成本低于bitmap scan的成本了.  
```  
When effective_cache_size large then table and index's size. then use index scan first than bitmap scan.  
```  
```  
digoal=# set effective_cache_size='283MB';  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                                         QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------------------------------  
-------------------------  
 Index Scan using tbl_cost_align_id on public.tbl_cost_align  (cost=0.43..92030.24 rows=2996963 width=45) (actual time=0.045..5238.3  
61 rows=2997015 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 2000000)  
   Buffers: shared hit=3005084  
 Total runtime: 5689.583 ms  
(5 rows)  
```  
如果这个时候再把random_page_cost调回正常值10, 则执行计划回归正常.  
```  
digoal=# set random_page_cost=10;  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                                    QUERY PLAN                                                        
------------------------------------------------------------------------------------------------------------------------------------  
---------------  
 Bitmap Heap Scan on public.tbl_cost_align  (cost=105426.89..170926.93 rows=2996963 width=45) (actual time=918.225..2195.414 rows=29  
97015 loops=1)  
   Output: id, info, crt_time  
   Recheck Cond: (tbl_cost_align.id > 2000000)  
   Rows Removed by Index Recheck: 2105  
   Buffers: shared hit=36229  
   ->  Bitmap Index Scan on tbl_cost_align_id  (cost=0.00..104677.65 rows=2996963 width=0) (actual time=913.935..913.935 rows=299701  
5 loops=1)  
         Index Cond: (tbl_cost_align.id > 2000000)  
         Buffers: shared hit=8191  
 Total runtime: 2698.429 ms  
(9 rows)  
digoal=# set enable_seqscan=on;  
SET  
digoal=# explain (analyze,costs,buffers,timing,verbose) select * from tbl_cost_align where id>2000000;  
                                                            QUERY PLAN                                                               
-----------------------------------------------------------------------------------------------------------------------------------  
 Seq Scan on public.tbl_cost_align  (cost=0.00..65538.00 rows=2996963 width=45) (actual time=0.020..1522.791 rows=2997015 loops=1)  
   Output: id, info, crt_time  
   Filter: (tbl_cost_align.id > 2000000)  
   Rows Removed by Filter: 2985  
   Buffers: shared hit=28038  
 Total runtime: 2104.057 ms  
(6 rows)  
```  
本例说明了成本因子的重要性. 千万不能随意设置, 即使完全内存命中, random_page_cost也应该大于seq_page_cost.  
我在前一篇BLOG中测试了这样的场景, 完全内存命中的场景可以设置 random_page_cost=1.6; seq_page_cost=1;  
[《优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp》](../201311/20131126_03.md)    
B-TREE扫描，对于线性相关性不好的列，会放大HEAP SCAN 的IO消耗，使用bitmap可以解决。  
线性相关性的知识如下  
[《PostgreSQL 计算 任意类型 字段之间的线性相关性》](../201604/20160403_01.md)    
[《PostgreSQL 统计信息之 - 逻辑与物理存储的线性相关性》](../201502/20150228_01.md)    
## 小结
1\. 当字段的存储与值线性相关性差时，使用index scan会导致大量的HEAP SCAN IO放大。  
2\. bitmap index scan巧妙的解决了放大的问题，bitmap index scan对index item按照ctid(heap行号)排序后再取数据，避免了单个HEAP PAGE的重复IO。  
3\. 使用cluster对heap数据按索引顺序进行重排，也可以解决HEAP SCAN IO放大的问题。  
## 参考  
1\. http://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL  
2\. [《优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp》](../201311/20131126_03.md)    
3\. src/backend/optimizer/path/costsize.c  
```  
cost_index function :   
        /*  
         * Now interpolate based on estimated index order correlation to get total  
         * disk I/O cost for main table accesses.  
         */  
        csquared = indexCorrelation * indexCorrelation;  
        run_cost += max_IO_cost + csquared * (min_IO_cost - max_IO_cost);  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")