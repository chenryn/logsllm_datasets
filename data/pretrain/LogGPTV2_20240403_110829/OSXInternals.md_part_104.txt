recorder_args[i].type_mask, // type
(vm_address_t)zone,
NULL, // reader
my_vm_range_recorder); // recorder
}
exit(0);
}
$ gcc -Wall -o malloc_enumerate malloc_enumerate.c
$ ./malloc_enumerate 8192
Allocated pointers
address bytes
0x300000 32
0x300020 48
0x300050 64
0x300090 48
0x3000c0 48
0x3000f0 48
0x1800000 1024
0x1800400 8192
Regions containing pointers
address bytes
0x300000 1048576
0x1800000 8388608
Internal regions
address bytes
0x400000 20480
0x300000 1048576
0x2000000 32768
0x1800000 8388608
8.15.7. Displaying Scalable Zone Statistics
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 101 of 135
The program shown in Figure 840 retrieves and displays statistics on the various types of malloc regions.
In particular, you can use this program to see how the allocator classifies an allocation request as tiny,
small, large, or huge based on the request's size.
Figure 840. Displaying scalable-zone statistics
// scalable_zone_statistics.c
#include 
#include 
#include 
#include 
#include 
#include "nomalloc_printf.h"
#define PROGNAME "scalable_zone_statistics"
enum { TINY_REGION, SMALL_REGION, LARGE_REGION, HUGE_REGION };
extern boolean_t scalable_zone_statistics(malloc_zone_t *,
malloc_statistics_t *, unsigned);
void
print_statistics(const char *label, malloc_statistics_t *stats)
{
nomalloc_printf("%8s%16u%16lu%16lu", label, stats->blocks_in_use,
stats->size_in_use, stats->max_size_in_use);
if (stats->size_allocated != -1)
nomalloc_printf("%16lu\n", stats->size_allocated);
else
printf("%16s\n", "-");
}
int
main(int argc, char **argv)
{
void *ptr = NULL;
unsigned long long size;
malloc_statistics_t stats;
malloc_zone_t *zone;
if (!(zone = malloc_default_zone()))
exit(1);
if (argc == 2) {
if ((size = strtoull(argv[1], NULL, 10)) == ULLONG_MAX) {
fprintf(stderr, "invalid allocation size (%s)\n", argv[1]);
exit(1);
}
if ((ptr = malloc((size_t)size)) == NULL) {
perror("malloc");
exit(1);
}
}
nomalloc_printf("%8s%16s%16s%16s%16s\n", "Region", "Blocks in use",
"Size in use", "Max size in use", "Size allocated");
scalable_zone_statistics(zone, &stats, TINY_REGION);
print_statistics("tiny", &stats);
scalable_zone_statistics(zone, &stats, SMALL_REGION);
print_statistics("small", &stats);
scalable_zone_statistics(zone, &stats, LARGE_REGION);
stats.size_allocated = -1;
print_statistics("large", &stats);
scalable_zone_statistics(zone, &stats, HUGE_REGION);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 102 of 135
stats.size_allocated = -1;
print_statistics("huge", &stats);
if (ptr)
free(ptr);
exit(0);
}
$ gcc -Wall -o scalable_zone_statistics scalable_zone_statistics.c
$ ./scalable_zone_statistics 496
Region Blocks in use Size in use Max size in use Size allocated
tiny 7 784 21264 1069056
small 1 0 33792 8421376
large 0 0 0 -
huge 0 0 0 -
$ ./scalable_zone_statistics 497
Region Blocks in use Size in use Max size in use Size allocated
tiny 6 288 20768 1069056
small 2 512 34304 8421376
large 0 0 0 -
huge 0 0 0 -
$ ./scalable_zone_statistics 15360
Region Blocks in use Size in use Max size in use Size allocated
tiny 6 288 20768 1069056
small 2 512 34304 8421376
large 1 16384 16384 -
huge 0 0 0 -
$ ./scalable_zone_statistics 16777216
Region Blocks in use Size in use Max size in use Size allocated
tiny 7 304 20784 1069056
small 1 0 33792 8421376
large 0 0 0 -
huge 1 16777216 16777216 -
8.15.8. Logging Malloc Operations
The malloc implementation supports logging of malloc operations to help in the analysis of memory-
related bugs. The MallocStackLogging environment variable can be set to cause the allocator to
remember the function call stack at the time of each allocation. A variantthe
MallocStackLoggingNoCompact environment variablecauses all allocations to be logged, regardless of
their sizes or lifetimes. Mac OS X provides several tools for memory-related debugging, for example,
heap, leaks, malloc_history, and MallocDebug.app.[23]
[23] MallocDebug.app is part of the Apple Developer Tools package.
The malloc layer allows a custom malloc logger to be installed by setting the malloc_logger global
function pointer. In fact, setting the aforementioned environment variables results in this pointer being set
to an internal logger function. Figure 841 shows a program that implements its own malloc logging
through this mechanism.
Figure 841. Logging malloc operations
// malloc_log.c
#include 
#include 
#include 
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 103 of 135
#include "nomalloc_printf.h"
// defined in Libc/gen/malloc.c
#define MALLOC_LOG_TYPE_ALLOCATE 2
#define MALLOC_LOG_TYPE_DEALLOCATE 4
#define MALLOC_LOG_TYPE_HAS_ZONE 8
#define MALLOC_LOG_TYPE_CLEARED 64
#define MALLOC_OP_MALLOC (MALLOC_LOG_TYPE_ALLOCATE|MALLOC_LOG_TYPE_HAS_ZONE)
#define MALLOC_OP_CALLOC (MALLOC_OP_MALLOC|MALLOC_LOG_TYPE_CLEARED)
#define MALLOC_OP_REALLOC (MALLOC_OP_MALLOC|MALLOC_LOG_TYPE_DEALLOCATE)
#define MALLOC_OP_FREE (MALLOC_LOG_TYPE_DEALLOCATE|MALLOC_LOG_TYPE_HAS_ZONE)
typedef void (malloc_logger_t)(unsigned, unsigned, unsigned, unsigned, unsigned,
unsigned);
// declared in the Libc malloc implementation
extern malloc_logger_t *malloc_logger;
void
print_malloc_record(unsigned type, unsigned arg1, unsigned arg2, unsigned arg3,
unsigned result, unsigned num_hot_frames_to_skip)
{
switch (type) {
case MALLOC_OP_MALLOC: // malloc() or valloc()
case MALLOC_OP_CALLOC:
nomalloc_printf("%s : zone=%p, size=%u, pointer=%p\n",
(type == MALLOC_OP_MALLOC) ? "malloc" : "calloc",
arg1, arg2, result);
break;
case MALLOC_OP_REALLOC:
nomalloc_printf("realloc: zone=%p, size=%u, old pointer=%p, "
"new pointer=%p\n", arg1, arg3, arg2, result);
break;
case MALLOC_OP_FREE:
nomalloc_printf("free : zone=%p, pointer=%p\n", arg1, arg2);
break;
}
}
void
do_some_allocations(void)
{
void *m, *m_new, *c, *v, *m_z;
malloc_zone_t *zone;
m = malloc(1024);
m_new = realloc(m, 8192);
v = valloc(1024);
c = calloc(4, 1024);
free(m_new);
free(c);
free(v);
zone = malloc_create_zone(16384, 0);
m_z = malloc_zone_malloc(zone, 4096);
malloc_zone_free(zone, m_z);
malloc_destroy_zone(zone);
}
int
main(void)
{
malloc_logger = print_malloc_record;
do_some_allocations();
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 104 of 135
return 0;
}
$ gcc -Wall -o malloc_log malloc_log.c
$ ./malloc_log
malloc : zone=0x1800000, size=1024, pointer=0x1800400
realloc: zone=0x1800000, size=8192, old pointer=0x1800400, new pointer=0x1800800
malloc : zone=0x1800000, size=1024, pointer=0x6000
calloc : zone=0x1800000, size=4096, pointer=0x1802a00
free : zone=0x1800000, pointer=0x1800800
free : zone=0x1800000, pointer=0x1802a00
free : zone=0x1800000, pointer=0x6000
malloc : zone=0x2800000, size=4096, pointer=0x2800400
free : zone=0x2800000, pointer=0x2800400
8.15.9. Intercepting the Malloc Layer
Since the malloc layer calls the allocator functions through function pointers, we can easily intercept
invocations of these functionssay, for debugging or for experimenting with an alternate allocator.
Specifically, we can retrieve a pointer to the default zone by calling malloc_default_zone(). We can
then save the original function pointers from the malloc_zone_t structure and insert pointers to our own
functions in the structure. Thereafter, we can call the original functions from our functions or provide an
alternate allocator implementation altogether. Figure 842 shows an example of using such interception.
Figure 842. Intercepting the malloc layer
// malloc_intercept.c
#include 
#include 
#include 
#include "nomalloc_printf.h"
void *(*system_malloc)(malloc_zone_t *zone, size_t size);
void (*system_free)(malloc_zone_t *zone, void *ptr);
void *
my_malloc(malloc_zone_t *zone, size_t size)
{
void *ptr = system_malloc(zone, size);
nomalloc_printf("%p = malloc(zone=%p, size=%lu)\n", ptr, zone, size);
return ptr;
}
void
my_free(malloc_zone_t *zone, void *ptr)
{
nomalloc_printf("free(zone=%p, ptr=%p)\n", zone, ptr);
system_free(zone, ptr);
}
void
setup_intercept(void)
{
malloc_zone_t *zone = malloc_default_zone();
system_malloc = zone->malloc;
system_free = zone->free;
// ignoring atomicity/caching
zone->malloc = my_malloc;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 105 of 135
zone->free = my_free;
}
int
main(void)
{
setup_intercept();
free(malloc(1234));
return 0;
}
$ gcc -Wall -o malloc_intercept malloc_intercept.c
$ ./malloc_intercept
0x1800400 = malloc(zone=0x1800000, size=1234)
free(zone=0x1800000, ptr=0x1800400)
8.16. Memory Allocation in the Kernel
Figure 843 shows an overview of kernel-level memory allocation functions in Mac OS X. The numerical
labels are rough indicators of how low-level that group of functions is. For example, page-level allocation,
which is labeled with the lowest number, is the lowest-level allocation mechanism, since it allocates
memory directly from the list of free pages in the Mach VM subsystem.
Figure 843. An overview of memory allocation in the Mac OS X kernel
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 106 of 135
Figure 844 shows an overview of kernel-level memory deallocation functions.
Figure 844. An overview of memory deallocation in the Mac OS X kernel
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 107 of 135
8.16.1. Page-Level Allocation
Page-level allocation is performed in the kernel by vm_page_alloc() [osfmk/vm/vm_resident.c]. This
function requires a VM object and an offset as arguments. It then attempts to allocate a page associated
with the VM object/offset pair. The VM object can be the kernel VM object (kernel_object), or it can
be a newly allocated VM object.
vm_page_alloc() first calls vm_page_grab() [osfmk/vm/vm_resident.c] to remove a page from the
free list. If the free list is too small, vm_page_grab() fails, returning a VM_PAGE_NULL. However, if the
requesting thread is a VM-privileged thread, vm_page_grab() consumes a page from the reserved pool. If
there are no reserved pages available, vm_page_grab() waits for a page to become available.
If vm_page_grab() returns a valid page, vm_page_alloc() calls vm_page_insert()
[osfmk/vm/vm_resident.c] to insert the page into the hash table that maps VM object/offset pairs to
pagesthat is, the virtual-to-physical (VP) table. The VM object's resident page count is also incremented.
kernel_memory_allocate() [osfmk/vm/vm_kern.c] is the master entry point for allocating kernel
memory in that most but not all pathways to memory allocation go through this function.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 108 of 135
kern_return_t
kernel_memory_allocate(
vm_map_t map, // the VM map to allocate into
vm_offset_t *addrp, // pointer to start of new memory
vm_size_t size, // size to allocate (rounded up to a page size multiple)
vm_offset_t mask, // mask specifying a particular alignment
int flags);// KMA_HERE, KMA_NOPAGEWAIT, KMA_KOBJECT
The flag bits are used as follows:
 If KMA_HERE is set, the address pointer contains the base address to use; otherwise, the caller doesn't