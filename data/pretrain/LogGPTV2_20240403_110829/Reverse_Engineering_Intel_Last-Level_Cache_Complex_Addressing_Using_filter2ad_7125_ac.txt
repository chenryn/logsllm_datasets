⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
4 cores
2 cores o0
o0
o1
o0
o1 ⊕
o2 ⊕ ⊕ ⊕ ⊕
⊕ ⊕
8 cores
⊕ ⊕
⊕ ⊕
⊕ ⊕ ⊕
⊕ ⊕
⊕ ⊕
⊕
⊕
⊕
⊕ ⊕
⊕
⊕
⊕ ⊕
⊕ ⊕ ⊕ ⊕ ⊕
⊕ ⊕ ⊕ ⊕ ⊕ ⊕
⊕
⊕
⊕ ⊕
⊕ ⊕ ⊕ ⊕ ⊕ ⊕
⊕
⊕
⊕ ⊕ ⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕
⊕ ⊕
To evaluate the algorithm, we retrieved the function for all models from
conﬁg 1 to conﬁg 8 of Table 2, results are summarized in Table 3. The functions
are given for the machine that has the most memory, to cover as many bits as
possible. We remark that the functions, for a given number of cores, are identical
among all processors, for all ranges of products and micro-architectures. Using
the above mentioned algorithm, we obtained those functions quickly (from a
few seconds to ﬁve minutes in the worst cases). We also remark that we have
in total 3 functions o0, o1 and o2 for all processors, and that the functions used
only depends on the number of cores, regardless of the micro-architecture or the
product range. While in retrospective this seems to be the most straightforward
solution to be adopted by Intel, this was far from evident at the beginning of
our investigations. Now that the functions are known, an attacker can use them
to perform his attacks without any reverse engineering.
58
C. Maurice et al.
5 Using the Function to Build a Covert Channel
To verify empirically the correctness of the function, we build a covert channel.
This covert channel uses similar principles to the one of Maurice et al. [22]. It is
based on the fact that the LLC is inclusive, i.e., when a line is evicted from the
LLC, it is also evicted from the L1 and L2. With this property, a program on
any core can evict a line from the private cache of another core. This property
can then be used by two programs to communicate. The work in [22] bypasses
the complex addressing issue by evicting the whole LLC. However, the LLC
typically stores a few megabytes, and thus the sender needs to access a buﬀer
that is the size of (or bigger than) the LLC to evict it entirely. Having the
complex addressing function, the sender targets a set in a slice, and thus evicts
a cache line with much fewer accesses. For example, in the case of a 12-way
associative LLC, assuming a pseudo-LRU replacement policy, the sender needs
approximately 12 accesses to evict the whole set.
In this covert channel, the sender creates a set of physical addresses that
map to the same set, using the function and the translation from virtual to
physical addresses. It repeatedly accesses these addresses to send a ‘1’, and does
nothing to send a ‘0’. The receiver has a set of physical addresses that map to
the same LLC set as the sender’s. When the sender sends a ‘1’, it evicts the data
of the receiver from the LLC, and thus from its private L1 cache. The receiver
consequently observes a slow access to its set.
)
s
e
l
c
y
c
(
y
c
n
e
t
a
l
s
s
e
c
c
A
 1400
 1200
 1000
 800
 600
 400
 200
 0
 94350
 94400
 94450
 94500
 94550
Local time (microseconds)
Fig. 3. Receiving interleaved ‘0’s and ‘1’s to test the raw bitrate of the covert channel.
We conduct an experiment on conﬁg 1 to estimate the bitrate of this covert
channel, in which the sender transmits interleaved ‘0’s and ‘1’s. Figure 3 illus-
trates the measurements performed by the receiver. According to the measure-
ments, 29 bits can be transmitted over a period of 130 microseconds, leading to
a bitrate of approximately 223 kbps.
Reverse Engineering Intel Last-Level Cache Complex Addressing
59
6 Discussion
6.1 Dealing with Unknown Physical Addresses
The translation from virtual to physical addresses is unknown to the attacker
in most practical setups, like in virtualized or sandboxed environments. We now
describe a possible extension to the covert channel described in Sect. 5 to avoid
using this address translation.
Similarly to the work of Liu et al. [20] and Irazoqui et al. [14], the sender
and the receiver both use huge pages. The cache index bits are thus the same for
virtual and physical addresses. Using the function only on the bits in the oﬀset
of the huge page, the sender is able to create a set of addresses that map to the
same set, in the same slice. As some bits of the physical address are unknown,
he does not know the precise slice. However, he does know that these addresses
are part of a single set, in a single slice.
The receiver now performs the same operation. The receiver has only the
knowledge of the index set to target, but he does not know in which of the n
slices. He thus creates n sets of addresses, each one being in a diﬀerent slice.
He then continuously accesses each of these sets. The receiver will only receive
transmitted bits in a single set: from now on, he can target a single set. The
sender and the receiver are eﬀectively accessing the same LLC set in the same
slice.
6.2 Other Applications
Reverse engineering the complex addressing function is orthogonal to performing
cache attacks. Indeed, knowing the correct addressing function can help any ﬁne-
grained attack on the LLC. Cache attacks rely on the attacker evicting data from
a cache level. This can be done by the clflush instruction. However, it requires
shared memory in a covert or side channel scenario, and it is not available in
all environments. We thus focus on building attacks without this instruction.
To perform an attack on the LLC, the attacker needs to create an eviction set,
and to subsequently access the data to evict the lines that are currently cached.
There are two methods to ﬁnd an eviction set: a dynamic approach based on
a timing attack that does not require the function, and a static approach that
uses the function to compute addresses that belong to an eviction set. Building
a static eviction set has the advantage of being faster than building a dynamic
one. Indeed, the function is already known, whereas the dynamic set has to be
computed for each execution. Moreover, Gruss et al. [6] showed that dynamically
computing a set to achieve an optimal eviction is a slow operation.
Hund et al. [8] defeated KASLR using the static approach. Similarly, Irazoqui
et al. [14] used a static approach on a Nehalem CPU that does not use complex
addressing. Yet, their attack requires understanding the slice selection, and thus
having the complex addressing function for more recent CPUs. Concurrently
to this work, Gruss et al. [6] used the complex addressing function to build
a proof-of-concept of the rowhammer attack without the clflush instruction.
60
C. Maurice et al.
Rowhammer is not a typical cache attack, since it exploits a bug on the DRAM
to ﬂip bits. However, the bug is triggered by frequent accesses to the DRAM,
i.e., non-cached accesses. The original exploits used the clflush instruction,
that is not available in e.g., Javascript. An attack that seeks to avoid using the
clflush instruction thus also needs to compute an eviction set.
6.3 Comparison to Previously Retrieved Functions
We observe that the functions we obtained diﬀer from the ones obtained by
Hund et al. [8], and Seaborn [29]. In particular, Hund et al. found that the
functions only use the tag bits (bits b17 to b31). We argue that their method
does not infer the presence of the bits used to compute the set (bits b6 to b16).
Indeed, as they searched for colliding addresses, they obtained addresses that
belong to the same slice and the same set. As in this case the set is directly
mapped to the bits b6 to b16, addresses that collide have the same values for
these bits. Therefore, if the function that computes the slice uses the bits b6 to
b16, the method of [8] is not able to retrieve them. On the contrary, our method
retrieves the slices regardless of the sets, leading to a complete function.
We also observe that the function we retrieved for 2 cores is the same as
the one retrieved in [29], albeit a more complete one. However, the function we
retrieve for 4 cores does not use the same bits as the one retrieved in [8]. We argue
that we do have access to the ground truth (i.e., the slices accessed), whereas
they rely on indirect measurements. Several correct functions can however be
retrieved, as the slices can be labeled diﬀerently from one work to another.
Hund et al. function
Our function
s
s
e
c
c
a
o
t
s
e
l
c
y
c
f
o
r
e
b
m
u
N
s
s
e
r
d
d
a
e
c
n
e
r
e
f
e
r
e
h
t
300
200
100