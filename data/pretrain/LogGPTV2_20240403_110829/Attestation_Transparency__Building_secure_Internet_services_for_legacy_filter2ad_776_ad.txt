### Self-Published with Legal Obligations

The software developer provides their source code to a publisher. The publisher then compiles the code into a binary, signs it, and hands it over to the service provider. The publisher also commits, often through a clause in their terms and conditions, that the enclaves they sign will exhibit certain specified properties.

### Enterprise-Local Audit

An enterprise may maintain a set of policies for the secure services it runs internally. They can have an internal audit team to vet service updates. This approach allows the enterprise to benefit from protection against insider attacks while maintaining local control.

### 5.4 Incremental Deployment — Clients

We present an incremental deployment strategy for Attestation Transparency (AT) that makes it immediately useful for today's clients while enhancing security guarantees for future clients.

#### Current Clients

Initially, clients without Certificate Transparency (CT) support will still benefit from the CT/AT ecosystem, as independent entities can monitor published certificates and statements. However, these clients are not protected against targeted attacks. For example, even if the CT logs include a valid certificate for a domain, a client without CT support might be presented with a valid certificate that does not appear in the logs, leaving the client unaware of the discrepancy.

#### Clients Supporting Certificate Transparency

Once clients support Certificate Transparency, which is already in progress, they will also gain most of the benefits of Attestation Transparency. If a service subscribes to our secure service paradigm and promises to publish in both the AT and CT logs, a client can verify the Signed Certificate Timestamps during connection setup to ensure the server has published its attestation, if it has one. However, users still need to rely on manual verification or word-of-mouth to determine whether a particular service at a specific domain is indeed a secure service.

#### Clients Supporting Attestation Transparency

A client that can check attested statements will be able to confirm to the user that they are connected to a secure service.

#### Clients Supporting Remote Attestation

Clients supporting remote attestation receive even stronger guarantees than those supporting only Certificate Transparency. With remote attestation, a client can verify that the server they are connected to is running inside a secure enclave. This is particularly useful if a server's TLS private key is inadvertently leaked. A third party could run a modified service with the leaked TLS private key, impersonating the secure service under the previous three mechanisms. However, with remote attestation, this third party would not be able to produce a correct attestation if the service were modified.

### 6. Evaluation

Since Intel SGX was not yet available at the time of writing, we performed our evaluation using CloudProxy [25], which provides an abstraction over security primitives similar to those provided by Intel SGX. Our current implementation uses Linux with a hardware root-of-trust based on the Trusted Platform Module (TPM) interface. This implementation has a larger Trusted Computing Base (TCB) than pure SGX, including the bootloader, the CloudProxy hypervisor, and the entire OS kernel.

We conducted two case studies to evaluate developer effort and performance loss:

1. **Secure Web Server Implementation**: To assess the difficulty of programming with our secure service paradigm, we implemented a secure web server "from scratch."
2. **Existing Web Application Stack**: We adapted an existing web application stack to our secure service model to measure the performance loss incurred. The original CloudProxy technical report [25] includes further performance measurements.

We expect slightly better performance on CloudProxy than on real SGX hardware due to the lack of runtime memory encryption overhead. All tests were performed on an Intel NUC 5i5MYHE with an Intel Core i5-5300 processor, 8GB RAM, and a Samsung 850 EVO SSD, running Ubuntu 15.04 with a Linux 4.0.7 kernel.

#### 6.1 File Hosting Service

We implemented the secure service interface in Rust [31], a memory-safe and type-safe language. The interface library is designed to be modular, allowing easy swapping of different components (e.g., OpenSSL for another TLS library or CloudProxy bindings for an SGX runtime).

On top of this, we developed an HTTPS server that runs a simple file storage service. Users can log in with a username and password, upload files encrypted with a key derived from their password, and later retrieve these files. The web server is self-contained, including all HTML, JavaScript, CSS, and images served to the user.

- **Code Metrics**:
  - Web server: 425 SLOC of Rust, 168 SLOC of HTML/JavaScript/CSS
  - Interface library: 983 SLOC of Rust, 262 SLOC of Rust, 1154 SLOC of C/C++
  - CloudProxy bindings: 17000 SLOC of C/C++ for statically linked dependencies
  - Statically linked dependencies: 59000 SLOC of Rust, 18000 lines in unused Windows API bindings, 5000 lines in an unused HTTP/2 implementation

#### 6.2 Web Forum

To demonstrate the feasibility of running large and complex Internet services, we adapted an existing web server stack (Apache, PHP, SQLite, and phpBB) to fit our secure service architecture using CloudProxy and Linux OS features. Insecure filesystem, networking, and IPC are provided by the OS, while secure storage and attestation are provided by a small set of binaries that access the CloudProxy interface. Secure networking is provided by Apache's mod_ssl, and the keying interface is provided by OpenSSL. Database encryption is provided by SQLCipher [41], an enhanced version of SQLite that encrypts on-disk files using AES. The database encryption key is stored in sealed storage.

To make the web stack measurable, all files (binaries, system libraries, web content, etc.) are bundled into a single bootstrap binary. The bootstrap binary creates a new root filesystem namespace, isolating the process’s view of the filesystem from the rest of the system, and fills it with the bundled files. It then starts an initialization script that sets up the keys and launches the Apache web server. The bundle is about 76MB.

We measured the performance of three related web forum setups:
- **Plain**: Vanilla Apache, PHP, SQLite, and phpBB installation.
- **Encrypted**: Swaps out SQLite for SQLCipher.
- **Encrypted+CloudProxy**: Runs the aforementioned bundled measured web stack.

For each setup, we loaded a small real forum dataset with 21 users, 94 topics, and about 1300 initial posts. We then ran a set of workers that accessed the forum over HTTPS simultaneously. Each user had their own worker, and each worker performed the following procedure: login, navigate to the appropriate topic listing, visit the topic, go to the last page, go to the reply screen, and post a reply. Each topic was visited 6 times in total. We measured the aggregate time it took to complete each topic-posting procedure from login to post, performing the entire test procedure 3 times, resulting in 3 * 6 * 94 = 1692 measurements per setup.

- **Performance Metrics**:
  - Plain: Average processing time = 1.671s (σ = 0.693)
  - Encrypted: Average processing time = 1.731s (σ = 0.633)
  - Encrypted+CloudProxy: Average processing time = 1.738s (σ = 0.646)

The encrypted and encrypted+CloudProxy setups are about 4% slower than the plain version, with no significant difference between them (Two-sample Kolmogorov-Smirnov test, p > 0.73). The Cumulative Distribution Functions (CDFs) in Figure 5 show that all requests in the encrypted setups are slightly slower than in the plain version, with no significant difference between the encrypted and encrypted+CloudProxy setups.

### 7. Discussion

#### 7.1 Possible Applications

- **Browser-Based Cryptographic Systems**: One argument against in-browser cryptography using JavaScript is its poor auditability. With Attestation Transparency-supported secure services, a user can be assured that the server will send the same script every time, enhancing browser-based crypto security.
- **Bootstrapping Secure Web Applications**: Production updates can be frequent. Instead of including an entire website within the secure enclave, a small core web page at a well-known URL can load further web content, ensuring security functionality while allowing frequent updates to untrusted parts.
- **Encrypted Email Storage Server**: An email provider could run their SMTP/IMAP stack as two separate secure services, providing secure encrypted email storage and protecting against insider threats.

#### 7.2 Limitations and Open Research Questions

- **Availability**: Denial of service and data destruction are valid attack vectors that need to be addressed.
- **Data Freshness**: Secure enclaves do not keep persistent state, making them vulnerable to rollback attacks. Solutions like Memoir [28] can be applied.
- **User Interface Security**: More research is needed to provide secure and trustworthy user interfaces on the web.
- **Security Reliance**: The system's security relies on the integrity of the secure enclave. Even with safe languages like Rust, there is no guarantee against compiler bugs or developer errors. Formal methods could provide further guarantees.
- **SGX Limitations**: While SGX theoretically provides good isolation, it may have practical security flaws.