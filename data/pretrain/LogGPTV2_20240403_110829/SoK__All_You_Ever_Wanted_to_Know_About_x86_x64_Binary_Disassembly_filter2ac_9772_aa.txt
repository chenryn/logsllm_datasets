# SoK: All You Ever Wanted to Know About x86/x64 Binary Disassembly But Were Afraid to Ask

**Authors:**
- Chengbin Pang
- Ruotong Yu
- Yaohui Chen
- Eric Koskinen
- Georgios Portokalidis
- Bing Mao
- Jun Xu

**Affiliations:**
- *Stevens Institute of Technology*: Chengbin Pang, Ruotong Yu, Eric Koskinen, Georgios Portokalidis, Jun Xu
- *Facebook Inc.*: Yaohui Chen
- *Nanjing University*: Bing Mao, Chengbin Pang (PhD student, visiting scholar at Stevens Institute of Technology)

**Abstract:**
Binary code disassembly is a challenging but essential task for enhancing the security of binary software. Over the past few decades, numerous tools and frameworks have been developed and made available to researchers and security professionals. These tools employ various strategies, each with its own strengths and weaknesses. The lack of a systematic approach has hindered new research and made it difficult to choose the right tool. In this paper, we systematically analyze nine popular, open-source disassembly tools through a combination of manual code inspection and comprehensive experimental evaluation using 3,788 binaries. Our study provides a detailed description and classification of disassembly strategies into algorithms and heuristics. We measure the impact of individual algorithms on the performance of each tool and find that while all tools use principled algorithms, they heavily rely on heuristics to increase code coverage. Different heuristics lead to varying trade-offs between coverage and correctness, resulting in tools with distinct strengths and weaknesses. We believe these findings will help users select the appropriate tool and assist researchers in improving binary disassembly.

## I. Introduction

Disassembling binary programs is crucial for reverse engineering and software security. It is a core component in various tasks such as malware analysis, code-similarity measurement, vulnerability discovery, security retrofitting, and patching. However, accurately disassembling a binary is challenging due to the loss of information during compilation and the complexity of constructs used to efficiently implement language features.

In the past decade, significant advancements have been made in binary disassembly, providing researchers and developers with a variety of tools and frameworks, both open-source and commercial. These tools have significantly reduced the burden on researchers aiming to develop advanced binary analysis techniques. The diversity of options encapsulates a broad range of underlying strategies, which can be categorized into two types:

- **Algorithms:** Typically produce results with some correctness guarantees, leveraging knowledge from the binary, machine, and/or ABI.
- **Heuristics:** Based on common patterns and often do not offer assurances of correctness.

Each tool adopts a different set of strategies, with technical details not always fully documented or publicized. This has created a knowledge gap that hinders users and researchers. To address this, we need to answer the following questions:

1. What are the algorithms and heuristics used in existing disassembly tools, and how do they interact?
2. What is the coverage and accuracy of heuristic methods compared to algorithmic ones? Are there trade-offs?
3. What errors do existing disassembly tools make, and what are the underlying causes?

To answer these questions, this paper presents a systematic analysis of binary disassembly through the study of nine popular open-source tools (see Table I). Unlike previous research, we conduct both qualitative and quantitative studies to understand the tools and their individual components. Our qualitative study involves manually inspecting source code to present the most recent and exact strategies. The quantitative study evaluates the tools on a corpus of 3,788 benchmark binaries, consisting of utilities, client/server programs, and popular libraries on both Linux and Windows systems. We built an analysis framework based on LLVM, GCC, the Gold Linker, and Visual Studio to automatically collect the ground truth. Our evaluation measures different disassembly phases to quantify the effectiveness of the strategies employed.

By systematically dissecting and evaluating the tools, we made several observations:
1. Mainstream tools incorporate heuristics in nearly every phase of disassembly to achieve better coverage. Without heuristics, the tools cannot provide practical utility in many tasks.
2. Heuristics often lead to errors, particularly when encountering complex constructs. Previous works may have overestimated the reliability of heuristics.
3. Tools may share the same group of algorithms and heuristics but organize and combine them differently, leading to varying accuracy-coverage trade-offs.
4. Tools have different strengths across different tasks. For example, commercial tools excel at recovering instructions, while open-source tools are better at identifying cross-references.

**Contributions:**
- A thorough systematization of binary disassembly from the perspective of algorithms and heuristics.
- Development of a compiler-based framework for automated end-to-end collection of ground truth for binary disassembly.
- The most comprehensive evaluation of open-source disassembly tools, revealing the prevalence and shortcomings of heuristics.
- New insights into binary-disassembly strategies and tools, facilitating future research and driving improvements in existing tools.

## II. Scope of Systematization

### A. Functionality

Binary disassembly can involve different tasks based on the context of use. This work focuses on tasks related to binary-software security. Table II classifies popular security works and summarizes the information each class needs to recover from binary code. Our study concentrates on the disassembly aspects required for these tasks:

- **Disassembly:** Recovering assembly instructions from a binary.
- **Symbolization:** Determining cross-references (xrefs) in the binary.
- **Function Entry Identification:** Locating function entry points.
- **CFG Reconstruction:** Rebuilding the control flow graph (CFG) of a binary program.

### B. Targeted Binaries

We focus on binaries with the following properties:
1. Produced with mainstream compilers and linkers.
2. May include hand-written assembly.
3. Not obfuscated.
4. Stripped of symbols.
5. X86/X64 architecture.
6. Run on Linux or Windows operating systems.

### C. Targeted Tools

Our systematization is based on the study of disassembly tools. We selected tools based on the following criteria:
1. Designated for disassembly or have an independent module for disassembly.
2. Can perform automated disassembly without user interaction.
3. Open-source, allowing us to study their implemented strategies.
4. Have unique strategies not fully covered by other tools.
5. Can run our targeted binaries for quantitative evaluation.

We selected nine tools, listed in Table I. We also considered JakStab, RetDec, and BinCat but excluded them due to specific limitations.

**Table I: The group of open-source tools that our study covers and representative works that use those tools.**

| Tool (Version) | Source (Release Date) | Public Use |
|----------------|-----------------------|------------|
| PSI (1.0)      | Website [63] (Sep 2014)| [50, 88, 111] |
| UROBOROS (0.11)| Github [93] (Nov. 2016)| [103] |
| DYNINST (9.3.2)| Github [79] (April 2017)| [7, 18, 69, 73, 96] |
| OBJDUMP (2.30) | GNU [47] (Jan. 2018)   | [21, 103, 111] |
| GHIDRA (9.0.4) | Github [75] (May 2019) | [24, 45, 91] |
| MCSEMA (2.0.0) | Github [13] (Jun. 2019)| [22, 41, 44] |
| ANGR (8.19.7.25)| Github [8] (Oct. 2019)| [20, 71, 81, 98, 112] |
| BAP (2.1.0)    | Github [26] (Mar. 2020)| [10, 16, 64] |
| RADARE2 (4.4.0)| Github [89] (April 2020)| [4, 31, 52, 58] |

**Table II: Popular solutions of binary security and the information the solutions need from binary disassembly.**

| Category | Solutions & Required Information |
|----------|----------------------------------|
| Vulnerability Finding | [25, 34, 97] - Inst, CFG, Func, Xrefs |
| Control Flow Integrity | [37, 80, 100, 108, 109, 111] - Inst, CFG, Func |
| Code Layout Randomization | [19, 38, 51, 72, 85, 87, 99] - Inst, CFG, Func, Xrefs |
| Execute-only Code | [28, 53, 60, 104] - Inst, CFG |
| Legacy-code Patching | [61, 65, 78, 106, 109] - Inst, CFG, Func, Xrefs |
| Code Similarity Measurement | [11, 101, 102, 103] - Inst, CFG, Func |
| Software Fault Isolation | [14, 17, 40, 42, 55, 57, 82] - Inst, CFG, Func |
| Software De-bloating | [15, 29, 30, 43, 62, 70, 83] - Inst, CFG, Func |

**Table III: The specifics of existing algorithms (numbered with rings like ) and heuristics (numbered with discs like ).**

| Alg. | Algorithms & Heuristics | Goals |
|------|-------------------------|-------|
|     | [Algorithm 1]           | [Goal 1] |
|     | [Heuristic 1]           | [Goal 1] |
| ...  | ...                     | ...   |

(Note: The actual content for Table III should be filled in with specific algorithms and heuristics.)

This systematic analysis aims to provide a clear and comprehensive understanding of the current state of x86/x64 binary disassembly, helping both practitioners and researchers to make informed decisions and drive further advancements in the field.