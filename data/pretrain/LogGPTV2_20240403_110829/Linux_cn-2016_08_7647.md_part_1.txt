---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 5341
date: '2016-08-04 16:05:00'
editorchoice: false
excerpt: 虽然 Git 确实是被许多重要软件选作版本控制工具，但是并不是仅能用于这些重要软件；它也能管理你购物清单（如果它们对你来说很重要的话，当然可以了！）、你的配置文件、周报或日记、项目进展日志、甚至源代码！
fromurl: https://opensource.com/life/16/7/creating-your-first-git-repository
id: 7647
islctt: true
largepic: /data/attachment/album/201608/04/160452lyu00ee0ze1u5l3n.jpg
permalink: /article-7647-1.html
pic: /data/attachment/album/201608/04/160452lyu00ee0ze1u5l3n.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 7641
- displayorder: 0
  raid: 7677
reviewer: ''
selector: ''
summary: 虽然 Git 确实是被许多重要软件选作版本控制工具，但是并不是仅能用于这些重要软件；它也能管理你购物清单（如果它们对你来说很重要的话，当然可以了！）、你的配置文件、周报或日记、项目进展日志、甚至源代码！
tags:
- Git
thumb: false
title: Git 系列（三）：建立你的第一个 Git 仓库
titlepic: true
translator: vim-kakali
updated: '2016-08-04 16:05:00'
---
现在是时候学习怎样创建你自己的 Git 仓库了，还有怎样增加文件和完成提交。
在本系列[前面的文章](/article-7641-1.html)中，你已经学习了怎样作为一个最终用户与 Git 进行交互；你就像一个漫无目的的流浪者一样偶然发现了一个开源项目网站，克隆了仓库，然后你就可以继续钻研它了。你知道了和 Git 进行交互并不像你想的那样困难，或许你只是需要被说服现在去使用 Git 完成你的工作罢了。
虽然 Git 确实是被许多重要软件选作版本控制工具，但是并不是仅能用于这些重要软件；它也能管理你购物清单（如果它们对你来说很重要的话，当然可以了！）、你的配置文件、周报或日记、项目进展日志、甚至源代码！
使用 Git 是很有必要的，毕竟，你肯定有过因为一个备份文件不能够辨认出版本信息而抓狂的时候。
![](/data/attachment/album/201608/04/160452lyu00ee0ze1u5l3n.jpg)
Git 无法帮助你，除非你开始使用它，而现在就是开始学习和使用它的最好时机。或者，用 Git 的话来说，“没有其他的 `push` 能像 `origin HEAD` 一样有帮助了”（千里之行始于足下的意思）。我保证，你很快就会理解这一点的。
### 类比于录音
我们经常用名词“快照”来指代计算机上的镜像，因为很多人都能够对插满了不同时光的照片的相册充满了感受。这很有用，不过，我认为 Git 更像是进行一场录音。
也许你不太熟悉传统的录音棚卡座式录音机，它包括几个部件：一个可以正转或反转的转轴、保存声音波形的磁带，可以通过拾音头在磁带上记录声音波形，或者检测到磁带上的声音波形并播放给听众。
除了往前播放磁带，你也可以把磁带倒回到之前的部分，或快进跳过后面的部分。
想象一下上世纪 70 年代乐队录制磁带的情形。你可以想象到他们一遍遍地练习歌曲，直到所有部分都非常完美，然后记录到音轨上。起初，你会录下鼓声，然后是低音，再然后是吉他声，最后是主唱。每次你录音时，录音棚工作人员都会把磁带倒带，然后进入循环模式，这样它就会播放你之前录制的部分。比如说如果你正在录制低音，你就会在背景音乐里听到鼓声，就像你自己在击鼓一样，然后吉他手在录制时会听到鼓声、低音（和牛铃声）等等。在每个循环中，你都会录制一部分，在接下来的循环中，工作人员就会按下录音按钮将其合并记录到磁带中。
你也可以拷贝或换下整个磁带，如果你要对你的作品重新混音的话。
现在我希望对于上述的上世纪 70 年代的录音工作的描述足够生动，这样我们就可以把 Git 的工作想象成一个录音工作了。
### 新建一个 Git 仓库
首先得为我们的虚拟的录音机买一些磁带。用 Git 的话说，这些磁带就是*仓库*；它是完成所有工作的基础，也就是说这里是存放 Git 文件的地方（即 Git 工作区）。
任何目录都可以成为一个 Git 仓库，但是让我们从一个新目录开始。这需要下面三个命令：
* 创建目录（如果你喜欢的话，你可以在你的图形化的文件管理器里面完成。）
* 在终端里切换到目录。
* 将其初始化成一个 Git 管理的目录。
也就是运行如下代码：
```
$ mkdir ~/jupiter  # 创建目录
$ cd ~/jupiter     # 进入目录
$ git init .       # 初始化你的新 Git 工作区
```
在这个例子中，文件夹 jupiter 是一个空的但是合法的 Git 仓库。
有了仓库接下来的事情就可以按部就班进行了。你可以克隆该仓库，你可以在一个历史点前后来回穿梭（前提是你有一个历史点），创建交替的时间线，以及做 Git 能做的其它任何事情。
在 Git 仓库里面工作和在任何目录里面工作都是一样的，可以在仓库中新建文件、复制文件、保存文件。你可以像平常一样做各种事情；Git 并不复杂，除非你把它想复杂了。
在本地的 Git 仓库中，一个文件可以有以下这三种状态：
*  未跟踪文件   （    Untracked    ） ：你在仓库里新建了一个文件，但是你没有把文件加入到 Git 的管理之中。
*  已跟踪文件   （    Tracked    ） ：已经加入到 Git 管理的文件。
*  暂存区文件   （    Staged    ） ：被修改了的已跟踪文件，并加入到 Git 的提交队列中。
任何你新加入到 Git 仓库中的文件都是未跟踪文件。这些文件保存在你的电脑硬盘上，但是你没有告诉 Git 这是需要管理的文件，用我们的录音机来类比，就是录音机还没打开；乐队就开始在录音棚里忙碌了，但是录音机并没有准备录音。
不用担心，Git 会在出现这种情况时告诉你：
```
$ echo "hello world" > foo
$ git status
On branch master
Untracked files:
(use "git add ..." to include in what will be committed)    
    foo    
nothing added but untracked files present (use "git add" to track)
```
你看到了，Git 会提醒你怎样把文件加入到提交任务中。