if i ∈ S then (ski, pki) ← KGS (1n) ﬁ
Experiment ExpPred
Π,A(n)
foreach i ∈ I do
1 :
2 :
3 :
4 : endforeach
5 : pks ← {(i, pki) | i ∈ I }
6 : ANewSession(·),Send(·,·),Corrupt(·),RevealKey(·)(1n
7 :
8 :
Figure 2: Generic security experiment for predicate
Pred, capturing in dependence of Pred the notions of
Match security and all versions of key conﬁrmation.
, pks)
b ← Pred // evaluate predicate Pred on execution state
return b
authentication resp. Match security or to achieve explicit key
authentication when linked with key secrecy.6
As a ﬁnal
technical remark, key conﬁrmation can only
be expected for sessions that communicate with a distinct,
uncorrupted party, as we cannot reason about an adversarially
controlled session deriving certain values or holding the same
key. This is reﬂected in both the deﬁnitions of full and almost-
full key conﬁrmation by demanding that (cid:2).pid /∈ Corr ∪ {∗}.
Def inition 3.1 (Full key conﬁrmation predicate): The pred-
icate FullConf(L,L(cid:3)) that deﬁnes full key conﬁrmation is the
following:
[(cid:2).status = accept ∧ (cid:2).pid /∈ Corr ∪ {∗}]
∀(cid:2) ∈ L ::
=⇒ [∃(cid:2)(cid:3) ∈ L(cid:3) :: ((cid:2)(cid:3).status = accept
∧ Partners((cid:2), (cid:2)(cid:3)) ∧ samekey((cid:2), (cid:2)(cid:3)))].
Note that Partners((cid:2), (cid:2)(cid:3)) ensures that l (cid:7)= l(cid:3).
A protocol offers full key conﬁrmation if no efﬁcient
adversary can make the predicate false, except with negligible
probability.
Def inition 3.2 (Full key conﬁrmation): A key exchange
protocol Π provides full (L,L(cid:3))-key conﬁrmation if for any
PPT adversary A there exists a negligible function negl (n)
such that
(cid:2)
(cid:3)
Π,A(n) = 1
Pr
ExpPred
≤ negl(n)
in Figure 2 with the
for the generic security experiment
predicate set to Pred = FullConf(L,L(cid:3)).
Note that the notion above implicitly captures the time-
critical aspect that some other session already holds the same
key at the point in time when a party accepts. Whereas the
predicate FullConf is evaluated on the ﬁnal execution state,
thus not allowing to distinguish between sessions (cid:2) for which
the paired session (cid:2)(cid:3) existed before or only after session (cid:2)
accepted, the quantiﬁcation over all adversaries A rules out
the case that there has not been such a session (cid:2)(cid:3) before. That
is, assume that (any of the possibly multiple paired sessions)
6Consulting once more the “Handbook of Applied Cryptography” [27],
the authors there also treat the properties separately, and deﬁne explicit key
authentication as the combination of key conﬁrmation with (implicit) key
authentication (where the latter comprises authenticity and key secrecy).
457457
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)(cid:3) only accepted after (cid:2) in an execution of some adversary
A. Then one can imagine a pruned version of the adversary
which stops immediately after (cid:2) has accepted, say, simply by
picking a random stop point in the execution. If A triggers
the event that any paired session (cid:2)(cid:3) existed only afterwards
with non-negligible probability, then the pruned version of A
would break full key conﬁrmation as above.
B. Almost-Full Key Conﬁrmation
We now turn to the guarantees that key conﬁrmation can
offer to the party that sends the last message in a protocol,
and which therefore has no guarantee that its intended partner
accepts (since the adversary may simply drop the message).
A FALSE START. To understand the subtleties involved in
designing a deﬁnition for this case, we ﬁrst explore a possible
notion which, although intuitively appealing, has important
shortcomings.
Intuitively, the best guarantee for the party that sends the
last message (and accepts) is that there is some other session
which, if it eventually accepts, will have accepted the same
key. This intuition is captured by the following formula:
∀(cid:2) ∈ L ::
[(cid:2).status = accept ∧ (cid:2).pid /∈ Corr ∪ {∗}] =⇒
[∃(cid:2)(cid:3) ∈ L(cid:3) :: ((cid:2)(cid:3).status = accept =⇒ samekey((cid:2), (cid:2)(cid:3)))] .
It turns out that this notion is too weak. The problem is that
the predicate is satisﬁed whenever there is some session (cid:2)(cid:3) that
has not accepted. To understand why this is the case, consider
the negation of the above predicate (which an adversary that
attempts to break the property must ensure it evaluates to true).
∃(cid:2) ∈ L :: (cid:2).status = accept ∧ (cid:2).pid /∈ Corr ∪ {∗}
∧
(cid:4)
(cid:2)(cid:3).status = accept ∧ samekey((cid:2), (cid:2)(cid:3))
∀(cid:2)(cid:3) ∈ L(cid:3) ::
(cid:5)(cid:3)
(cid:2)
.
Note that to make the predicate true, the adversary has to
ensure that all sessions accept and as soon as a single session
(cid:2)(cid:3) rejects, the formula cannot be satisﬁed anymore and the
adversary loses. This is clearly too restrictive since at least for
sessions unrelated to (cid:2), the adversary should not be required
to make them accept. To ﬁx the deﬁnition, we have to take
additional information into account to characterize sessions
that will compute the same key as (cid:2).
THE RIGHT DEFINITION. We deﬁne the notion of almost-
full key conﬁrmation based on sessions which are waiting
to receive the ﬁnal message. Note that these are sessions
which still lack some information to express the full session
identiﬁers and thus revert to key-conﬁrmation identiﬁers for
a weaker type of partnering. Almost-full key conﬁrmation
then ensures that the identiﬁed session holding the same key-
conﬁrmation identiﬁer indeed accepts with the same key (if
it eventually accepts at all). This essentially captures the
previous, fallen short intuition of having another session that,
if it eventually accepts, derives the same key, but restricts this
requirement to sessions agreeing on the same key-conﬁrmation
identiﬁer.
Def inition 3.3 (Almost-full key conﬁrmation predicate):
The predicate AlmostConf(L,L(cid:3)) that deﬁnes almost-full key
conﬁrmation is the following:
∀(cid:2) ∈ L ::
[∃(cid:2)(cid:3) ∈ L(cid:3) :: ((cid:2).kcid = (cid:2)(cid:3).kcid
[(cid:2).status = accept ∧ (cid:2).pid /∈ Corr ∪ {∗}] =⇒
∧ ((cid:2)(cid:3).status = accept =⇒ samekey((cid:2), (cid:2)(cid:3))))].
KEY-CONFIRMATION IDENTIFIER BINDING. So far, key-
conﬁrmation identiﬁers, on which the deﬁnition of the almost-
full key conﬁrmation predicate are based upon, are not bound
to the actual session identiﬁers or to keys. In order to give them
practical meaning, we need to establish links to the notion of
partnering as well as the derived keys.
First, it is natural to require that whenever two sessions
are partnered, they in particular agree on the key-conﬁrmation
identiﬁer.7 More importantly, key-conﬁrmation identiﬁers are
supposed to capture the idea that, whenever two sessions
accept and hold the same key-conﬁrmation identiﬁer, they also
derive the same key. We formalize these concepts by deﬁning
the predicate KCIDbind which returns true if and only if all
of the following conditions holds.
1) For all sessions (cid:2), (cid:2)(cid:3) with Partners((cid:2), (cid:2)(cid:3)) = true, it holds
that (cid:2).kcid = (cid:2)(cid:3).kcid, i.e., partnered sessions agree on the
same key-conﬁrmation identiﬁer.
2) For all sessions (cid:2), (cid:2)(cid:3) with (cid:2).kcid = (cid:2)(cid:3).kcid and (cid:2).status =
(cid:2)(cid:3).status = accept, it holds that samekey((cid:2), (cid:2)(cid:3)) = true,
i.e., sessions with the same key-conﬁrmation identiﬁer,
upon acceptance, will derive the same key.
Def inition 3.4 (Key-conﬁrmation identiﬁer binding): A
key exchange protocol Π provides key-conﬁrmation identiﬁer
binding if for any PPT adversary A there exists a negligible
function negl(n) such that
(cid:2)
(cid:3)
Π,A(n) = 1
Pr
ExpPred
≤ negl(n)
in Figure 2 with the
for the generic security experiment
predicate set to Pred = KCIDbind.
DEFINING ALMOST-FULL KEY CONFIRMATION. We are now
ready to deﬁne almost-full key conﬁrmation.
Def inition 3.5 (Almost-full key conﬁrmation): A key ex-
change protocol Π provides almost-full (L,L(cid:3))-key conﬁrma-
tion if it satisﬁes key-conﬁrmation identiﬁer binding and for
any PPT adversary A there exists a negligible function negl(n)
such that
(cid:2)
(cid:3)
Π,A(n) = 1
Pr
ExpPred
≤ negl(n)
in Figure 2 with the
for the generic security experiment
predicate set to Pred = AlmostConf(L,L(cid:3)).
To elaborate why this formalization of almost-full key
let us ﬁrst again
conﬁrmation captures the right property,
7We note that, beyond this connection, we do not require any particular
properties (e.g., concerning authentication) from session identiﬁers in the
context of key conﬁrmation. These aspects are modularly captured within
Match security and the deﬁnition of (implicit) authentication.
458458
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
consider the negation of the predicate AlmostConf (i.e., the
formula the adversary needs to make evaluate to true):
∃(cid:2) ∈ L :: (cid:2).status = accept ∧ (cid:2).pid /∈ Corr ∪ {∗}
∧ [∀(cid:2)(cid:3) ∈ L(cid:3) :: (cid:2).kcid (cid:7)= (cid:2)(cid:3).kcid
∨ ((cid:2)(cid:3).status = accept ∧ samekey((cid:2), (cid:2)(cid:3)))].
First of all note that the part (cid:2).kcid (cid:7)= (cid:2)(cid:3).kcid formalizes
that a protocol cannot choose to have unique key-conﬁrmation
identiﬁers per session, e.g., by setting the identiﬁer to some
local random value. This is so as this would trivially mean
that for any session (cid:2) ∈ L that an adversary initiates, all
other sessions (cid:2)(cid:3) ∈ L(cid:3) have non-matching key-conﬁrmation
identiﬁers, so the adversary immediately wins.
When a protocol instead lets every session (cid:2) ∈ L accept
with a kcid that matches the one of some session (cid:2)(cid:3) ∈ L(cid:3), this
allows the adversary to focus on such matching sessions. In
contrast to the initial false-start formalization, the adversary
can in particular let sessions reject that do not hold the same
key-conﬁrmation identiﬁer as (cid:2).
Finally, a trivial way to achieve almost-full key conﬁrmation
is for a protocol to set kcid to the same (e.g., empty) value
for every session. Note that key-conﬁrmation identiﬁer binding
then in turn requires that every session accepts with the same
key. Although this rightly appears to be unreasonable (as it
contradicts key secrecy), it is consistent from the perspective of
key conﬁrmation: If every session derives the same key, every
session is trivially assured that, if there is another accepting
session, it will hold the same key.
CHOOSING A KEY-CONFIRMATION IDENTIFIER. A natural
question arising from the deﬁnition of almost-full key con-
ﬁrmation is how to set the key-conﬁrmation identiﬁers for a
speciﬁc protocol. As for the regular session identiﬁers and
their use within the freshness condition for deﬁning key
secrecy, there is an interplay between the security notion (key
secrecy resp. almost-full key conﬁrmation) and the soundness
requirements for the identiﬁers (Match security resp. key-
conﬁrmation identiﬁer binding).
On the one hand, to achieve almost-full key conﬁrmation,
a protocol has to couple up any accepting session (in L)
with a session (in L(cid:3)) holding the same key-conﬁrmation
identiﬁer kcid. As already discussed, this in particular prevents
using a unique kcid value per session. On the other hand,
choosing the same key-conﬁrmation identiﬁer (e.g., an empty
kcid) for every session, by key-conﬁrmation identiﬁer binding,
implies that every session must derive the same key. As this in
particular contradicts key secrecy, it is also not a viable option
for any reasonable key exchange protocol.
Therefore a protocol needs to balance out the choice for
setting key-conﬁrmation identiﬁers between these two ex-
tremes. From a practical point of view, the key-conﬁrmation
identiﬁer would intuitively comprise as much of the session
identiﬁer such that, together with the last protocol message,
it fully determines the derived key. In some cases, even the
actual key might already be computable (and hence serve as
a “trivial” key-conﬁrmation identiﬁer) before the last message
is received. The generic transformation based on an additional
exchange of MACs given in Section V is such an example.
In many practical protocols (that intuitively achieve almost-
full key conﬁrmation), however,
the last message(s) will
substantially contribute to the key and, hence, only partial
information is available when setting (and hence captured in)
the key-conﬁrmation identiﬁer. This is, for example, the case
in TLS 1.3 (cf. Section IV for our detailed analysis), where
the key is derived from a hash over all messages, including
the client’s last messages CCRT and CCV. Therefore, when the
client in TLS 1.3 accepts, the server does not know these
messages yet and cannot have set kcid based on the key.
Instead, we need to leverage the already exchanged part of
the session identiﬁer as key-conﬁrmation identiﬁer, which then
ﬁxes a unique key together with the client’s last messages. This
motivates why we chose to capture “agreement on the same
key up to receipt of the last message” using a generic identiﬁer
string rather than relying on a particular protocol value or a
partial communication transcript.
C. Relationship
(cid:2)(cid:3).kcid) and
accept =⇒ samekey((cid:2), (cid:2)(cid:3))).
We now take a look at the relationship between full and
almost-full key conﬁrmation and see why the former implies
the latter (given key-conﬁrmation identiﬁer binding).
Theorem 3.6: Let Π be key exchange protocol that provides
full (L,L(cid:3))-key conﬁrmation as well as key-conﬁrmation
identiﬁer binding. Then Π also provides almost-full (L,L(cid:3))-
key conﬁrmation.
Proof: We need to show that, for any session (cid:2) ∈ L
that accepts ((cid:2).status = accept) with a distinct, uncorrupted
partner ((cid:2).pid /∈ Corr ∪ {∗}), there exists a session (cid:2)(cid:3) ∈ L(cid:3)
which
(a) shares the same key-conﬁrmation identiﬁer ((cid:2).kcid =
(b) on acceptance derives the same key ((cid:2)(cid:3).status =
First, observe that by full (L,L(cid:3))-key conﬁrmation, for
any such session (cid:2) ∈ L there exists a session (cid:2)(cid:3) ∈ L(cid:3)
that accepted ((cid:2)(cid:3).status = accept),
is partnered with (cid:2)
(Partners((cid:2), (cid:2)(cid:3))), and holds the same key (samekey((cid:2), (cid:2)(cid:3))).
Due to key-conﬁrmation identiﬁer binding, (cid:2)(cid:3) then also shares
the same key-conﬁrmation identiﬁer (i.e., (cid:2).kcid = (cid:2)(cid:3).kcid),
satisfying (a). Furthermore (again by key-conﬁrmation iden-
tiﬁer binding), when (cid:2)(cid:3) accepts, we have additionally that
(cid:2).status = (cid:2)(cid:3).status = accept, and so samekey((cid:2), (cid:2)(cid:3)) holds,
satisfying (b).
MATCH SECURITY VS. KEY CONFIRMATION. On a more
distant relation, let us note that Match security and key conﬁr-
mation (both full and almost-full) are independent notions (i.e.,
a protocol can provide either one without providing the other
one). On the one hand, setting sid = kcid to be a unique string
per session trivially lets the protocol satisfy Match security,
but renders full and almost-full key conﬁrmation unachievable.
On the other hand, having all sessions use the same (arbitrary)
identiﬁers sid and kcid and derive the same key key trivially
459459
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
satisﬁes full and almost-full key conﬁrmation, but violates
Match security (due to more than two sessions being partnered
with each other).
Match security thus rather constitutes a counterpart to the
freshness conditions used for key secrecy than being related
to key conﬁrmation.
D. Conﬁrmation guarantees for unauthenticated peers
Informal deﬁnitions of key conﬁrmation usually demand
that another, even possibly unidentiﬁed party holds the same
key (e.g.,
the “Handbook of Applied Cryptography” [27,
Deﬁnition 12.7]). Note that our notions of full and almost-full
key conﬁrmation originally guarantee that for sessions which
communicate with an identiﬁed (and uncorrupted) partner
((cid:2).pid /∈ Corr∪{∗}) there is another session which (eventually)
holds the same key.
The extension of our notions to unauthenticated peers turn
out to hold trivially by correctness(-like) properties. For this,
ﬁrst note that key conﬁrmation guarantees for sessions with
unauthenticated peers can only be provided if the actual
communication partner is indeed honest. This is so since no
conﬁrmation model can ensure that an adversarially-controlled
session derives a session key at some point.
In the case of full key conﬁrmation, any extension to
unauthenticated peers (i.e., dropping the prerequisite (cid:2).pid /∈
Corr ∪ {∗} for the session (cid:2) in question) would hence need