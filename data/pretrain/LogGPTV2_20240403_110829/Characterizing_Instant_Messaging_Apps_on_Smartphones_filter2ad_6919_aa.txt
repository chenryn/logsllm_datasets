title:Characterizing Instant Messaging Apps on Smartphones
author:Li Zhang and
Chao Xu and
Parth H. Pathak and
Prasant Mohapatra
Characterizing Instant Messaging
Apps on Smartphones
Li Zhang(B), Chao Xu, Parth H. Pathak, and Prasant Mohapatra
University of California, Davis, CA 95616, USA
{jxzhang,chaoxu,phpathak,pmohapatra}@ucdavis.edu
Abstract. Proliferation of smart devices has fueled the popularity of
using mobile instant messaging (IM) apps at a rapid pace. While the
IM apps on smartphones have become increasingly popular, there has
only been a little research on understanding the characteristics of these
apps. Because most of the IM apps use proprietary protocols, it is chal-
lenging to analyze their internal operations. In this work, we present
a comprehensive characterization of mobile IM apps using experiments
on LTE cellular network. We decompose the operations of an IM app
into multiple independent states which allows us to systematically study
them. We characterize the energy and bandwidth eﬃciency of each of the
states and provide numerous insights. Our analysis reveals that typing
notiﬁcation feature of the IM apps is a major contributor to the energy
consumption. We also ﬁnd that the bandwidth eﬃciency of current IM
apps are alarmingly poor compared to other applications such as email
and web surﬁng. These, along with other ﬁndings, provided in this work
can help improve the energy and network performance of IM apps.
1 Introduction
Recent years have witnessed a fast growing trend of using the new generation
of mobile instant message (IM) applications such as WhatsApp, WeChat and
Line on the smartphones. WhatsApp, for example, is ranked as the third all-
time-popular Android apps in Google’s Android app store [1] with a total of 590
million users in 193 diﬀerent countries [5]. According to [2], the mobile IM apps
have overtaken the Short Message Service (SMS) operated by cellular network
carriers, with 19 billion messages sent per day compared with 17.6 billion SMS
messages.
While the adoption of mobile IM apps are rapidly increasing, very little
research has been done in characterizing them. This is because there are numer-
ous challenges in characterizing the IM apps. First, compared to other types of
mobile apps studied in [6,10,15,17], the IM apps involves much more user inter-
action such as typing, reading and user notiﬁcations. This makes the automated
characterization extremely diﬃcult. The new set of features (e.g. typing and read
notiﬁcations) oﬀered by the IM apps are much more complex compared to the
traditional SMS services. Also, there is a lack of transparency in the application
layer protocols used by the popular IM apps. Most of the current IM apps either
implement their own protocol or modify existing standard such as XMPP to
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 83–95, 2015.
DOI: 10.1007/978-3-319-15509-8 7
84
L. Zhang et al.
customize them. This makes it even more diﬃcult to understand the underlying
operations of the apps.
In this work, we present a comprehensive characterization of the popular IM
apps for smartphones using experiments on LTE cellular network. We address
the challenges listed above by dissecting the operations of IM apps into many
diﬀerent states and then evaluate the energy and the network eﬃciency of each
of them. Some of the main insights provided by our study are as follows:
– We ﬁnd that sending and receiving typing notiﬁcations are major contributors
to the total energy consumption when the IM app is running in the foreground.
Many IM apps use frequent periodic typing notiﬁcation messages which result
in very poor energy eﬃciency.
– Today’s IM apps have extremely low bandwidth eﬃciency (average amount
of traﬃc per one character of user message). This is true even when the app
is running in the foreground and has minimal requirement of maintaining
the “online presence”. This shows that while XMPP-like IM protocols oﬀer
eﬃcient ways of maintaining “online presence”, the current IM apps show
poor network eﬃciency when running in the foreground.
– Because users spend signiﬁcant amount of time on IM apps compared to
other types of apps, simply switching to darker graphical interface can yield
surprising energy beneﬁts.
– When the IM apps are running in background, the method used to no-
tify the user about incoming message has a signiﬁcant impact on the energy
consumption.
The rest of paper is organized as follows. We describe the experimental setup
and the data collection in Sect. 2. The foreground and the background charac-
terization results are presented in Sects. 3 and 4 respectively. Then we discuss
the related works in Sect. 5. Section 6 concludes the paper.
2 Data Collection and Methodology
In this section, we ﬁrst provide the details of data collection for diﬀerent IM apps.
We represent the operations of an IM app using a state transition diagram. For
each of the states, we will test 5 most popular IM apps, and proﬁle the energy
consumption and the network traﬃc generated.
2.1 State Transitions in IM App Usage
As shown in Fig. 1, the operations of an IM app can be divided into 6 distinct
states. When the users are in a conversation, the IM app runs in the foreground,
occupying the entire screen. When the users are using another app or when
the screen is turned oﬀ, the IM app runs in the background but still keeps
maintaining connections with its remote servers.
Foreground: When the IM app is in the foreground, the user is considered to
be “in conversation”. There are two “in conversation” states.
Characterizing Instant Messaging Apps on Smartphones
85
- In Conversation Sending (ICS): The ICS state is deﬁned as the period
from when the user starts her typing of the message to the time when the read
notiﬁcation is received. In this state, there are 4 functions: type, send typing
notiﬁcation, send message and receive read notiﬁcation.
- In Conversation Reading (ICR): The ICR state is from receiving the
typing notiﬁcation to sending the read notiﬁcation. This state has 3 functions:
receive typing notiﬁcation, receive and display message, send read notiﬁcation.
Background: There are four background states.
- Background Idle with Screen On (BION): BION is a state that the IM
app is running in the background while neither occupying the screen nor getting
any incoming message. This state has only 1 function: keep maintaining the
on-line presence with the server.
- Background Receive with Screen On (BRON): The BRON state is from
the time when message starts to arrive to the time when its notice is displayed
to the user. This state has 2 functions: receive message and display notice. This
state ends before the user takes any action for the received message, therefore
the IM app will not send out a read notiﬁcation.
- Background Idle with Screen Oﬀ (BIOFF): The BIOFF state is the
period when the IM app is idly listening in the background and the screen is
oﬀ. Similar to BION state, the BIOFF state also has only 1 function: keep
maintaining the on-line presence.
- Background Receive with Screen Oﬀ (BROFF): This state starts when
the message arrives and the screen is oﬀ. This state ends once the user is notiﬁed
by some form of notiﬁcation either using sound, vibration or screen turn-on.
Fig. 1. The state transition diagram of an IM app usage
86
L. Zhang et al.
Table 1. List of selected IM apps; Number of users data from [5]
Mobile Users Covered Countries Originated From Icon
China
USA
USA
Japan
Israel
Apps
WeChat
WhatsApp
Facebook
Messenger
600 million
590 million
∼ 200
∼ 100
300 million
Unknown
Line
Viber
300 million
200 million
193
193
2.2 Experiment Settings
We select the top 5 mobile IM apps in terms of the number of users by the end
of 2013. The names and the statistics of the selected apps are listed in Table 1.
Our experimental setup consists of a Samsung Nexus S smartphone (running
Android 4.1.2), a Macbook Air, a Dell Latitude E5430 laptop and a Monsoon
Power Monitor. We install tcpdump on the phone to capture the network traﬃc.
The Macbook Air is used as the phone’s SSH console. The Monsoon Power
Monitor is employed to measure the power consumption of the smartphone, and
the Dell laptop serves as the power monitor console. The sampling frequency of
the power monitor is set to 5 KHz.
We conducted all the experiments on AT&T’s cellular network data con-
nection. We also turn oﬀ the WiFi and Bluetooth radios and ﬁx the volume,
brightness, vibration and keystroke feedback settings to avoid any unintended
impact on measured energy. To turn oﬀ any additional background services on
Android, we limit the number of background processes to one and use “Advanced
Task Killer Pro” app to kill any additional running processes.
2.3 Methodology and Metrics
To get a comprehensive view of the characteristics of the selected IM apps, we
test all the 6 states of the apps, by using a set of the most commonly used
IM messaging literacy among college students [7]. In [7], the authors listed the
taxonomy of the IM conversation topics. For example, the 5 most popular conver-
sation topics are: emotional support, ﬁctional people, video games, computers
and shared interests. We picked one conversation in each kind of the popular
topics from the typical examples concluded in [7] and created a database of
70 messages. The length of the messages varies from 4 characters to as many
as 125 characters, where the characters may include letters, punctuation marks
and metadiscursive markers. To reduce the eﬀect of randomness, the typing of
each message in each run of the experiments is repeated 20 times to calculate
an average value. We repeat the experiments for two diﬀerent users to eliminate
any user-speciﬁc typing characteristics.
The performance of the IM apps in the state with sending/receiving activities
are mainly evaluated by two metrics: (i) Energy eﬃciency: energy consumption
Characterizing Instant Messaging Apps on Smartphones
87
per character sent/received (Joule/character) and (ii) Bandwidth eﬃciency: the
amount of network traﬃc generated per character sent/received (byte/character).
In the idle listening states, since there are no user intended messages, we will use
the average energy consumption per hour (J) and the average network traﬃc per
hour (KByte) as the evaluation metrics.
3 In Conversation Sending/Receiving (ICS/ICR)
We conducted a total of 12,600 runs of experiments by manually typing, and
collected 2.4 GB of energy and network traﬃc traces. From the network traces,
we observed that all the 5 selected IM apps are built on the client/server
architecture, where the message sender and the message receiver communicate
indirectly through a certain number of servers. Although following the same
architecture, the application layer protocols used by each app are quite diﬀer-
ent. By linking the server port number with the registry of Internet Assigned
Numbers Authority (IANA) [8], we found that WeChat, WhatsApp, FB Mes-
senger, Line and Viber use commplex-main, XMPP, HTTPS, SSL and Virtual
Reality Modeling Language (VRML) [14] respectively.
As shown in Fig. 2, the ICS state can be divided into two phases: (1) typing
the message & sending typing notiﬁcation, and (2) sending the message & receiv-
ing the read notiﬁcation. Correspondingly, the ICR state is also consisted of two
phases: (1) receiving the typing notiﬁcation, and (2) receiving the message &
sending the read notiﬁcation. Since the typing of a long message needs consid-
erable amount of time, we can observe a time gap between the ﬁrst and the
second phase of the ICR state. During the time gap, the radio will be tuned to
the paging channel (PCH) state to save energy.
Fig. 2. Examples of energy traces of in conversation states (WhatsApp)
3.1 Energy Characterization
The energy consumption of “in conversation” states can be attributed to two
factors: (1) the Graphical User Interface (GUI) and (2) user operations such as
typing or sending messages etc.
88
L. Zhang et al.
GUI. The average values of the energy consumption of the GUIs of the IM
apps are shown in Fig. 3(a). It is observed that the GUIs of the ICR states
always consume more energy than the GUIs of the ICS states (36.3 % more
on an average). This is because the conversation windows of the IM apps are
usually in brighter colors, while the default keyboard background of Android is
in darker color. In the ICR state, the conversation window usually occupies the
entire screen; while in the ICS state, the dark keyboard will occupy about half
of the screen which reduces the overall energy consumption. Therefore the GUIs
of ICR state will consume more energy than the GUIs of ICS state.
Since the energy consumption of the display is highly dependent on the hard-
ware, there is only a little that can be done from the app development perspec-
tive. We observe that Line and Viber (refer Fig. 3(a)) consumes much less energy
in ICR and ICS states simply due to the fact that their GUIs use darker colors.
Because users spend a large amount of time on the IM apps (very high user res-
idence time [17]), it is advisable to incorporate such modiﬁcations. We observe
that the GUI consumption of each app in each state is more or less constant
(coeﬃcients of variance laying in the range of (0.0053, 0.0228)), hence we deduct
the GUI energy from the energy measurements shown in the rest of this paper.
Fig. 3. The factors of energy consumption
ICS and ICR User Operations. The characteristics of the energy consump-
tion related to user operations are shown in Fig. 3(b) and (c). In the ICS state, we
can see the typing message and sending typing notiﬁcation time phase consumes
much (308 % on average) more energy than the energy consumed by sending the
message and receiving the read notiﬁcation. However, on the receiving side, the
diﬀerence of the energy consumed by the user operations in the two time phases
is relatively small (40 % on average).
Energy for Typing: We ﬁrst turn oﬀ the radio and simply measure the energy of
typing. We observe that over 60.2 % of the energy cost is attributed to typing in
the ICS state.
Energy for Typing Notiﬁcations: We observe that sending the typing notiﬁca-
tion in ICS state consumes as much energy as sending the actual message and
receiving the read notiﬁcations combined. In the ICR state, receiving typing
notiﬁcation consumes as much as 37 % (average for all 5 apps) of state’s total
Characterizing Instant Messaging Apps on Smartphones
89
energy consumption. The high energy consumption is due to the fact that how-
ever small the typing notiﬁcation message is, it requires the radio interface to be
turned on. This shows that sending and receiving typing notiﬁcations is a major
factor of energy consumption (often comparable to sending and/or receiving the
actual message). This means signiﬁcant amount of energy can be saved by sim-
ply turning oﬀ the typing notiﬁcations. This also calls for a more energy eﬃcient
solution for enabling typing notiﬁcations.
Energy for Read Notiﬁcations: Because the sending and receiving read notiﬁca-
tion is submerged in receiving and sending message respectively, it is diﬃcult to
isolate the energy consumption of the read notiﬁcation. However, we expect the
energy consumption of the read notiﬁcation to be much lesser than that of typ-
ing notiﬁcation. This is because the read notiﬁcation is only sent once while the
typing notiﬁcation involves many messages (continuously based on when user
starts and stops typing until the message send button is pressed). Also, because
sending/receiving read notiﬁcation is mostly submerged with receiving/sending
the message, no separate radio wake up is necessary, further reducing its energy
overhead.
Energy Eﬃciency. We now present the results about per character energy
consumption as deﬁned in Sect. 2.3. To understand this, we compare the energy
consumption for many short messages to fewer long messages. The size of the
complete message is chosen to 120 characters which is divided into substrings,
each of which is sent individually. As shown in Fig. 4, we consider 1 to 6 as
possible number of substrings. When number of substrings is 1, it means that
the entire 120 character message is sent at once. On the other hand, when the
number of substrings is 6, a total of 6 messages are sent separately each of
which is of 20 characters. Figure 4 shows energy consumption per character when
diﬀerent number of substrings are sent.
As shown in Fig. 4(a), the energy spent on sending each character increases
as the length of the substrings decreases. This is mainly caused by the overhead
of sending typing notiﬁcations because an IM app needs to tune its radio to ded-