1b46a:   89 45 e0         mov    %eax,-0x20(%ebp)
1b46d:   8b 45 ec         mov    -0x14(%ebp),%eax
1b470:   8b 40 04         mov    0x4(%eax),%eax
1b473:   89 44 24 04      mov    %eax,0x4(%esp)
1b477:   8b 45 e0         mov    -0x20(%ebp),%eax
1b47a:   89 04 24         mov    %eax,(%esp)
1b47d:   e8 4e d2 ff ff   call   186d0 
1b482:   85 c0            test   %eax,%eax
1b484:   75 07            jne    1b48d 
Figure 5: Code snippet of the targeted vsftpd program.
the jne to je (at 0x8051800). For the combined A2–3 attack and
attack A4, the generality of these two spooﬁng attacks facilitate
replacing the old /etc/shadow with an attacker-controlled ﬁle
to bypass the password check. By directly applying these SYSVMI
attacks to INSTVMIa, we successfully logged into the system.
For the ﬁne-grained tampering available via INSTVMIb, we tam-
per with the instruction code at 0x8051800 (for A5), tamper with
the instruction operand at 0x80517ee (test eax, eax for A6), and
function argument of strcmp at 0x80517e2 (changing the eax to
ebx for A7). This is just one of many available attack vectors. For
example, we could have tampered with the EFLAGS at 0x8051800
(A6), and tampered with the argument at 0x80517e6 (e.g., changing
the ebx to eax for A7).
vsftpd. We attacked an ftp daemon from vsftpd-3.0.0 to test
whether we are able to break its authentication. The disassembly
fragment in Fig. 5 shows that it has an authentication pattern similar
to that of sshd. Using SYSVMI A1 and INSTVMIb A5, we change
the opcode of jne to je at 0x1b484. The syscall A2–3 and IO
tampering A4 attacks succeed with the same conﬁguration as used
in the login and sshd attacks.
For other INSTVMI attacks, we again observed many available at-
tack options. For example, corrupting the operand of test eax, eax
at 0x1b482 (A6), or the EFLAGS register at 0x1b484, or the ar-
gument of vsf_sysutil_strcmp (A7), all result in successful
compromises.
telnetd. Application telnetd (in netkit-telnet-0.17)
internally uses the login process to perform the authentication.
As such, all the attack methods in login are successful against
telnetd without modiﬁcation.
Summary. From these experiments, we conﬁrm that attack methods
A2–4 in SYSVMI are all transparent to these victim programs. Each
attack works against all the victims without requiring the attacker to
extend or customize the implementation in any way. Other attacks,
including A1 and A5–7 (in INSTVMI), require analysis of the victim
binary code to conﬁgure which PC, instruction operand or opcode,
or function calls to corrupt.
(cid:3)
(cid:282)
(cid:286)
(cid:286)
(cid:393)
(cid:400)
(cid:3)
(cid:367)
(cid:367)
(cid:437)
(cid:296)
(cid:3)
(cid:296)
(cid:381)
(cid:1081)
(cid:3)
(cid:51)(cid:79)(cid:68)(cid:76)(cid:81)
(cid:59)(cid:72)(cid:81)(cid:16)(cid:54)(cid:60)(cid:54)(cid:57)(cid:48)(cid:44) (cid:52)(cid:72)(cid:80)(cid:88)(cid:16)(cid:44)(cid:49)(cid:54)(cid:55)(cid:57)(cid:48)(cid:44)(cid:68)
(cid:52)(cid:72)(cid:80)(cid:88)(cid:16)(cid:44)(cid:49)(cid:54)(cid:55)(cid:57)(cid:48)(cid:44)(cid:69)
(cid:20)(cid:19)(cid:19)
(cid:27)(cid:19)
(cid:25)(cid:19)
(cid:23)(cid:19)
(cid:21)(cid:19)
(cid:19)
(cid:46)(cid:69)(cid:88)(cid:76)(cid:79)(cid:71)
(cid:36)(cid:83)(cid:68)(cid:70)(cid:75)(cid:72)
(cid:48)(cid:72)(cid:80)(cid:70)(cid:68)(cid:70)(cid:75)(cid:72)(cid:71)
(cid:37)(cid:93)(cid:76)(cid:83)(cid:21)
Figure 6: Macro-benchmark Evaluation of the Performance
Overhead of Our VMI.
5.2 Performance Overhead
Tables 1–3 show that each attack (A1–7) has a very small im-
plementation, which is only triggered at certain speciﬁc execution
contexts. The majority of the performance overhead stems from
the instrumentation of our context-aware, reactive VMI. To evaluate
this overhead, we used standard system benchmarking programs to
measure the runtime overhead at both the macro and micro level.
Macro Benchmarks. We used kbuild (which is CPU and disk in-
tensive), ApacheBench-2.2.15 [2] (which is network I/O intensive),
memcached-1.4.5 [30] (which is memory and I/O intensive), and
bzip2 (which is CPU and disk intensive) to quantify the performance
slowdown at a macro level.
For kbuild, we build a compact kernel by running the command
“make allnoconfig”, and record the time spent on the compi-
lation of Linux kernel 2.6.32. For ApacheBench, we test the Apache
server throughput with over 10,000 requests of a 4K-byte ﬁle in a
Apache server. For memchached, we use a remote client to issue
1,000 write and read requests to a memchaed server. For bzip2,
we decompress the ofﬁcial Linux 2.6.32 kernel source tarball and
record the processing time.
We normalized the performance overhead of these benchmarks
to each of our VMI implementations. The performance overhead is
presented in Fig. 6. When there is more user level code computation,
our system has a small overhead (as shown in kbuild and bzip2 case).
For ApacheBench, because of the syscall overhead we introduced
in SYSVMI, the network response time decreases. For memcached,
both the Xen and QEMU implementations have less overhead
because this benchmark is memory intensive. For our instruction-
level VMI, as expected, it has huge performance overhead for all
the benchmarks, since we instrumented each instruction execution.
Micro-benchmarks. To evaluate the primitive level performance
slowdown, we use the standard micro-benchmark LMBench suites
to estimate the VMI’s impact on various OS operations. In particular,
we focus on the overhead that instrumentation introduces to context
switches, page faults, memory-related operations (such as memory
map), and IO-related operations (such as TCP and disk ﬁles).
The results are presented in Fig. 7. Recall that for Xen, we
use page faults to intercept syscalls, which leads to VMExits and
VMEntries to resume the execution of the VM. This introduces
some overhead, which is why the overheads for TCP/UDP and
Mmap are high. Bcopy does not use syscalls, so it runs as fast
as the original. Regular (non-introduced) page faults do not incur
any measurable slowdown. Since QEMU already emulates each
instruction, QEMU-INSTVMIa requires signiﬁcantly less overhead
235
(cid:51)(cid:79)(cid:68)(cid:76)(cid:81)
(cid:59)(cid:72)(cid:81)(cid:16)(cid:54)(cid:60)(cid:54)(cid:57)(cid:48)(cid:44)
(cid:52)(cid:72)(cid:80)(cid:88)(cid:16)(cid:44)(cid:49)(cid:54)(cid:55)(cid:57)(cid:48)(cid:44)(cid:68)
(cid:52)(cid:72)(cid:80)(cid:88)(cid:16)(cid:44)(cid:49)(cid:54)(cid:55)(cid:57)(cid:48)(cid:44)(cid:69)
(cid:3)
(cid:282)
(cid:286)
(cid:286)
(cid:393)
(cid:400)
(cid:3)
(cid:367)
(cid:367)
(cid:437)
(cid:296)
(cid:3)
(cid:296)
(cid:381)
(cid:1081)
(cid:3)
(cid:1005)(cid:1004)(cid:1004)
(cid:1012)(cid:1004)
(cid:1010)(cid:1004)
(cid:1008)(cid:1004)
(cid:1006)(cid:1004)
(cid:1004)
Figure 7: Micro-benchmark Evaluation of the Performance Overhead of Our VMI.
to capture each syscall; the only overhead comes from our syscall
attack code. That is why QEMU-INSTVMIa compares favorably
to Xen-SYSVMI. For QEMU-INSTVMIb, since each instruction is
monitored to determine the execution context, it has signiﬁcantly
worse performance.
Summary. From the performance overhead evaluation, we con-
clude that the slowdown at the process level is light if we use
the SYSVMI attack. Therefore, a malicious cloud provider could
possibly deploy this attack online (as a backdoor to access victim
jobs, for instance). Even though instruction level INSTVMI has
larger overhead, we believe attackers still have incentives to use it
for such tasks as ofﬂine analysis, considering the huge beneﬁts they
might glean from successful attacks.
5.3 More Case Studies
We have demonstrated in the previous sections that we can suc-
cessfully compromise Linux authentication programs. In this sec-
tion, we demonstrate how only small changes to our attack code suf-
ﬁces to compromise Windows authentication. Speciﬁcally, we report
two case studies: (1) tampering with a Windows winlogon.exe
authentication, and (2) tampering with serial number validation in
a Windows program. To avoid any copyright issues, we did not
perform any reverse engineering of Windows winlogon.exe,
and we targeted a generic serial checker binary program for demon-
stration purposes.
Tampering with winlogon.exe. Since legal concerns dissuade
us from inspecting the binary code of winlogon.exe, we just use
our high level knowledge of this program and employ our transparent
SYSVMI attack. More speciﬁcally, we have a general understanding
that winlogon.exe accesses the Windows password ﬁle sam
(just as login accesses /etc/shadow). By intercepting the
Windows ﬁle open system call, we can detect this ﬁle access. Win-
dows loads sam automatically during system booting (this load is
not requested by winlogon.exe), but this does not impair the
attack. We use syscall tampering (A3) to inspect all ﬁle-loads. Once
we detect that sam is loaded, we spoof the OS with a ﬁle we own.
As such, when winlogon.exe checks the password in sam, we
successfully log into the system.
To test whether our attack is feasible when the target disk is
encrypted, we then installed a FDE system conﬁgured without pre-
boot authentication in a Windows XP (SP2) VM. Next, we run the
VM images in our malicious VMM. Unsurprisingly, encryption did
not impede the attack; we successfully logged into the virtualized
Windows XP VM using A3.
 ...
 40115d:   f3 66 a7         repz cmpsw %es:(%edi),%ds:(%esi)
 401160:   49               dec    %ecx
 401161:   79 13            jns    0x401176
 401163:   6a 00            push   $0x0
 401165:   68 31 21 40 00   push   $0x402131 ;"Congratulations !!!"
 40116a:   68 9a 21 40 00   push   $0x40219a ;
 40116f:   6a 00            push   $0x0      ;hWnd
 401171:   e8 4a 04 00 00   call   0x4015c0  ;MessageBoxA
 401176:   61               popa
 401177:   c3               ret
 ...
Figure 8: Binary Code Snippet of Unpacked crackme.exe.
Tampering with crackme.exe. For this experiment, we ac-
quired a binary program crackme.exe1 from crackmes.de. Fig-
ure 8 shows a partial disassembly (after UPX unpacking).
The program asks users to enter a serial number, and displays
a “congratulations!!!” message window if the number entered is
correct. Our goal is to make the binary code show this message.
The traditional attack strategy is to break the serial computation
algorithm and write a key generator algorithm. However, our VMI
facilitates the much easier alternative of patching the instruction
code. In particular, the boxed jns0x401176 instruction in Fig. 8
at memory address 0x401161 decides whether the entered serial
number is correct. To bypass this check, we can either change the
machine code 79 13 (jns 0x401176) to 78 13 (js 0x401176), or
90 90 (NOP them). Both approaches are successful.
Summary. The ﬁrst case study demonstrates that with no reverse
engineering and just some general knowledge of the victim program,
our VMI can be employed to successfully compromise Windows
authentication protections. With a very small amount of reverse
engineering, we are able to also bypass a software piracy check.
6. DISCUSSIONS AND IMPLICATIONS
Our experiments indicate that semantic gap-bridging technologies,
as exhibited by our VMI attack, have signiﬁcantly eased the burden
of implementing low-resource attacks against software authentica-
tion protections. With only superﬁcial reverse engineering effort
and some simple conﬁguration steps, a context-aware, reactive
VMI quickly and easily compromises both Linux and Windows
authenticators. These results challenge several outdated assumptions
and conventional wisdoms about low-resource attacker capabilities.
1MD5 checksum: 8f59900d9a5e4fa4ab21115d38e82954
236
First, our VMI attack challenges the trust that application pro-
grammers usually have in the underlying hardware. In general,
application programmers tend to assume that once a program is
compiled, its binary code will consistently behave in accordance
with the hardware speciﬁcations. However, with the introduction of
a virtualizaiton-layer [15], such trust is misplaced. Because VMMs
virtualize all of a system’s hardware resources to the OS (includ-
ing the instructions for emulation-based virtualization), attackers
can now easily monitor, intercept, and tamper with any of these
“hardware” resources.
Second, our results show that safely outsourcing VM images to
clouds requires complete trust in cloud providers. Encrypting the
VM images (e.g., via FDE [18, 32]) does not prevent a malicious
cloud provider from using VMI to bypass the authentication and
gain decrypted access to the image’s contents. While pre-boot
authentication is a possible defense, it is technically challenging to
deploy pre-boot authentication in a remote cloud environment, since
pre-boot passwords cannot typically be entered remotely. Moreover,