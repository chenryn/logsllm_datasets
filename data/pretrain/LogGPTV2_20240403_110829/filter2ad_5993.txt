title:A covert channel construction in a virtualized environment
author:Jidong Xiao and
Zhang Xu and
Hai Huang and
Haining Wang
POSTER: A Covert Channel Construction in a Virtualized
Environment
Jidong Xiao
The College of William and
Mary, Williamsburg, VA
PI:EMAIL
Hai Huang
IBM T.J.Watson Research
Center, Hawthorne, NY
PI:EMAIL
ABSTRACT
Memory deduplication has been widely used in various com-
modity hypervisors. However, while this technique improves
memory eﬃciency, it has an impact on system security. In
particular, memory deduplication is usually implemented us-
ing a variant of copy-on-write techniques, for which, writing
to a shared page would incur a longer access time than those
non-shared. By exploiting this artifact, we demonstrate a
new covert channel can be built in a virtualized environ-
ment.
Categories and Subject Descriptors
D.4.6 [OPERATING SYSTEMS]: Security and Protec-
tion
Keywords
Covert Channel, Virtualization, Memory Deduplication
1.
INTRODUCTION
Memory deduplication is a technique used in various com-
mercial and open source hypervisors,
including VMWare
ESX, Xen, and Linux KVM. The key idea is, if multiple
memory pages have the same content, then the hypervisor
only needs to keep one copy, and such pages are called dedu-
plicated pages. And later, if one of the deduplicated pages
is modiﬁed, a copy-on-write (COW) technique is used. In
other words, the page will be copied, and the write operation
will take eﬀect on the copied page. This allows a signiﬁcant
amount of memory space to be saved when there are many
identical pages.
However, this technique can also expose unexpected secu-
rity vulnerabilities. Due to the extra copy operation, a write
to a deduplicated page and a normal page (non-deduplicated
page) incur diﬀerent access times [2, 3]. In this poster, by
exploiting this artifact of memory deduplication, we demon-
strate how to create a covert channel in a virtualized en-
vironment. The major contribution of this work is brieﬂy
summarized as follows.
Copyright is held by the author/owner(s).
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
ACM 978-1-4503-1651-4/12/10.
Zhang Xu
The College of William and
Mary, Williamsburg, VA
PI:EMAIL
Haining Wang
The College of William and
Mary, Williamsburg, VA
PI:EMAIL
We develop a reliable covert channel to transfer informa-
tion between two virtual machines. We validate the feasi-
bility and eﬀectiveness of this covert channel for informa-
tion leakage through a series of experiments. We run our
experiments on top of Linux/KVM with Kernel Samepage
Merging (KSM) implemented as a loadable kernel module1.
Our experimental results show that the new covert channel
can reach nearly 100% accuracy, and even in a system under
high computation and memory pressure, it can still achieve
a reasonable transfer rate.
2. COVERT CHANNEL CONSTRUCTION
A covert channel allows two isolated entities to communi-
cate with each other. It consists of a sender and a receiver.
Typically, in a cloud environment, both entities are virtual
machines running on the same physical machine. The sender
(of information) is generally the victim of an attack, and we
assume that the sender has been compromised by the at-
tacker, therefore, it is under the attacker’s control. To by-
pass traditional monitoring techniques and remain hidden
as long as possible, the sender encodes the information the
attacker is interested in and injects “signals” onto a covert
channel. The receiver is a virtual machine launched by the
attacker to be a co-resident with the sender VM. The re-
ceiver will probe the covert channel and decode the “signals”.
In this way, the information on the victim machine can be
leaked while minimizing the chance of the attacker being dis-
closed. Existing works have exploited various shared hard-
ware resources to build a covert channel in virtualization
environments, such as L2 cache [4]. However, the existing
techniques are not robust against environment noises.
Figure 1 illustrates the framework of our covert chan-
nel. In the ﬁrst step, the sender and receiver load a certain
amount of memory with identical content. This can be eas-
ily done by having both the sender and receiver opening and
reading the same ﬁle. Next, the sender encodes the infor-
mation, e.g., writing to certain pages so that the contents of
these pages are diﬀerent from those launched by the receiver.
Once the pages are modiﬁed, the sender and receiver sleep
and wait for the system to merge these pages. Finally, the
receiver should write to all memory pages used by the covert
channel and record the write access time. The copy-on-write
mechanism makes writing to shared pages cost more time
than those that are not. Thus, the receiver can easily iden-
1040Figure 1: Covert Channel Overview
tify those modiﬁed pages. With the knowledge of which
pages are modiﬁed, the receiver can decode the information.
This is basically how the sender and receiver communicate
via the memory deduplication covert channel.
The encoding mechanism is further detailed as follows.
Since we can detect memory deduplication at the granu-
larity of a page, we make each page represent one bit of
information. At the sender side, an unmodiﬁed page indi-
cates a 0 and a modiﬁed page denotes a 1. For instance,
as illustrated in Figure 1, if we want to transmit 001011
through the covert channel, after the sender and receiver
both read six identical pages, the sender should modify the
3rd, 5th, and 6th pages. After sleeping for a period of time,
the receiver will write to these six pages and record access
time. Since pages 1, 2, and 4 remain unchanged, the mem-
ory deduplication mechanism should have merged them with
their counterparts. On the other hand, pages 3, 5, and 6
have been modiﬁed by the sender, and hence they are not
deduplicated. Thus, the receiver takes much more time (ac-
cording to our observation, at least six times more) to write
to pages 1, 2, and 4 than to pages 3, 5, and 6. At the receiver
side, a long access time indicates a 0 and a short access time
denotes a 1. Therefore, in our example the receiver can infer
that the sender is sending 001011.
3. EXPERIMENTAL EVALUATION
The experiments are conducted on an Intel Xeon 3.07GHz,
Quad-Core processor with 4GB memory. Each Guest is as-
signed 1GB memory. The host OS is Linux(2.6.37) with
Kernel Samepage Merging (KSM) implemented as a load-
able kernel module.
We ﬁrst validate the feasibility of the memory deduplica-
tion based covert channel. We boot two virtual machines on
the same hypervisor. One virtual machine is selected as the
sender and the other is set as the receiver. We load a ﬁle
of size 1088KB (i.e., 272 4KB pages) into memory. In order
to ensure the reliability of deduplication, we set the sleeping
time to 250 seconds. We set up four sets of experiments.
In each experiment, the sender modiﬁes diﬀerent pages to
transfer diﬀerent messages to the receiver, and we record
all the write access time to these 272 pages at the receiver
side to verify whether the information has been correctly
delivered.
Figure 2 shows the experimental results. In the ﬁrst ex-
periment, the sender wants to send a 272-bit data beginning
Figure 2: Information Transferring in Covert Chan-
nel
with 00111 as the ﬁrst 5 bits followed by all 0s. Between
the sender and receiver, if a modiﬁed page denotes a 1 and
an unmodiﬁed page denotes a 0, the sender would need to
modify the 3rd, 4th, and 5th pages to encode such data. For
the other three experiments, the sender modiﬁes pages 260,
261, and 262 in the second experiment, pages 205, 206, and
207 in the third experiment, and pages 69, 70, and 71 in the
last experiment. From Figure 2, we can see although diﬀer-
ent experiments demonstrate diﬀerent write access spikes,
the sender-modiﬁed pages always incur much less write ac-
cess time. This is because once the sender modiﬁes a page,
the page will become a non-deduplicated page, and hence
less time is required for the following write access issued by
the receiver. We also observe that, the time of writing to
a deduplicated page is always at least 6 times longer than
writing to a non-deduplicated page. This strong signal-to-
noise ratio implies that the covert channel can be reliably
established.
Next we evaluate the channel’s bit rate and robustness to
see whether it is practical. The bit rate (R) is determined by
the time needed to complete one transmission (T), and the
volume (V) of information that can be delivered in one trans-
mission: R=V/T. Moreover, since the transmission time is
dominated by the sleeping time (i.e., the transmission time
is almost equivalent to the sleeping time), we can use the
sleeping time as the time required to complete one trans-
mission without losing much accuracy. In this set of exper-
iments, we also set up two virtual machines as the sender
and the receiver, respectively. In each round, the sender and
the receiver load a ﬁle with a certain size into memory to
build the channel. We gradually increase the sleeping time
until it reaches a threshold such that the information can
be transferred through the covert channel without any er-
rors. We call such a threshold stable sleeping time. Then,
we gradually increase the size of the loaded ﬁle and record
the change of the stable sleeping time. After obtaining the
stable sleeping time for each diﬀerent memory size, we can
calculate the bit rate using the formula of R=V/T.
File11234110100Modify Page (Encoding)Test Write Time (Decoding)SenderReceiverHostShared PagesLoad File into MemoryLoad File into MemoryWait for System to Merge0501001502002503000102030Write Access Time(microsecond)050100150200250300010203005010015020025030001020300501001502002503000102030Page1041Figure 3: The relationship between memory size and
bit rate. The stable sleeping time is also marked.
Figure 4: The relationship between computation
workload and bit rate. The stable sleeping time is
also marked.
Figure 3 illustrates the dynamics of achieved bit rate with
the change of memory size, in which the stable sleeping time
in each case is also marked. When the memory size in-
creases from 1MB to 100MB, we can easily observe that the
bit rate signiﬁcantly increases but the stable sleeping time
only modestly increases. When the memory size is 1MB,
or 256 4K pages,
it takes our channel 205s to complete
the transmission. The bit rate under this case is merely
256b/205s=1.24bps. However, when the ﬁle size reaches
100MB, namely 25,600 pages, the covert channel only takes
around 280s to complete the transmission.
In this way,
the bit rate can surge to above 90bps. This means that
we should select relatively large memory size for the covert
channel construction. Unfortunately, using too much mem-
ory might easily expose our covert channel. Thus, a memory
size in the range of 80MB to 100MB can be a good choice.
The performance of the covert channel is also dependent
upon the system workload. Given a certain memory size, we
run a set of experiments to study how the bit rate changes
when the system workload increases.
In the experiments,
we ﬁrst boot two virtual machines as the sender and re-
ceiver, then we gradually increase the system workload by
launching more virtual machines and running computational
benchmarks on virtual machines.
Figure 4 illustrates the dynamics of the bit rate under
diﬀerent system workloads, which can be divided into six
cases. For the ﬁrst ﬁve cases, the size of the leveraged mem-
ory is ﬁxed at 10MB. Initially, only two virtual machines
are launched and they collude with each other to construct
In this ﬁrst case, the stable sleeping
the covert channel.
time is 145s and the bit rate is 17.66bps.
In the second
case, we boot another two virtual machines (we call them
the irrelevant VMs) with the same conﬁguration and keep
them idle. Now the stable sleeping time is increased to 180s
and thus the bit rate is reduced to 14.44bps. To further
increase system workload, in the third case, we run CPU
intensive benchmark Cuadro [1] on the two irrelevant VMs.
Again, the bit rate drops to 11.64bps. Then we also run the
benchmark on the sender, i.e. the victim VM. This fourth
scenario is close to a real world one: the victim machine
and other co-resident machines are busy running services
while the attacker-controlled receiver can keep idle. Such
a system conﬁguration in the fourth case yields the stable
sleeping time of 225s with the bit rate of 11.38bps. In the
ﬁfth case, when we also run the benchmark on the receiver,
the bit rate drops a little again to 11.13bps.
Overall, from Figure 4, we can see that the performance
of the covert channel is not severely inﬂuenced by system
workload. When the system workload increases, the bit
rate only drops slightly. Moreover, in the experiments of
the sixth case, all the virtual machines are busy running
benchmarks and we leverage 100MB memory to construct
the covert channel. Since the stable sleeping time is no more
than 320s, we can still achieve a bit rate above 80bps. This
indicates that even in a close-to-real-world scenario where
multiple users run diﬀerent services on diﬀerent VMs above
a single physical machine, our covert channel is still able to
transfer information in a decent rate. According to the anal-
ysis of
[4], a real world L2 cache channel can only achieve
a bit rate around 11bps with some errors. Thus, it is clear
that our memory deduplication covert channels outperform
L2 cache covert channels.
4. CONCLUSION
Memory deduplication is originally designed for improving
performance, however, it can also be exploited for security
purposes. In this poster, we have demonstrated that, by ex-
ploiting one artifact of memory deduplication, attackers can
build a reliable covert channel in a virtualized environment.
5. REFERENCES
[1] Cuadro cpu benchmark.
http://sourceforge.net/projects/cuadrocpubenchm.
[2] K. Suzaki, K. Iijima, T. Yagi, and C. Artho. Software
side channel attack on memory deduplication. SOSP
POSTER, 2011.
[3] K. Suzaki, K. Lijima, T. Yagi, and C. Artho. Memory
deduplication as a threat to the guest OS. European
Workshop on System Security, 2011.
[4] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen,
and R. Schlichting. An exploration of L2 cache covert
channels in virtualized environments. In Cloud
computing security workshop, pages 29–40. ACM, 2011.
0204060801000102030405060708090100Memory Size(MB)Bit Rate (b/s)205s230s280s260s230s220s275s205s2 Idle4 Idle2Idle 2Busy   1Idle 3Busy 4 Busy        4Busy, 100MB size0102030405060708090System WorkloadBit Rate (b/s)145s180s220s225s320s230s1042