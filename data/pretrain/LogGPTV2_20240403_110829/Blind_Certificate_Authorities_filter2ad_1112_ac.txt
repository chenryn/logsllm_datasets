The TLS record is described in Figure 3. We need
to design a protocol that allows two parties to jointly
compute such a TLS record, where the client provides
the TLS session keys and part of the message, and the
proxy provides the injected message. We Ô¨Årst introduce
two sub-protocols called 2P-HMAC and 2P-CBC, and
design SCI-TLS based on the two protocols. In a nutshell,
2P-HMAC boils down to submitting two partial tags, one
from the client to the proxy and one from the proxy to
the client, and its overhead is minor. In 2P-CBC, the
client computes the AES ciphertexts of M p
t locally,
and the parties engage in a secure protocol for computing
AES on the blocks of M‚àó
(where the proxy inputs the
blocks of M‚àó
and the client inputs the key, i.e., we realize
an oblivious PRF). We fully specify the protocols and
then analyze the security of SCI-TLS. We remark that
we do not formalize the ideal counterparts of 2P-HMAC
and 2P-CBC, and we analyze the security of SCI-TLS
protocol as a whole. We divide the protocol into these
subprotocols just for expositional clarity.
t , M s
t (cid:3)M‚àó(cid:3)M s
Assume the client Cl holds keys Khmac and Kaes as
well as an injection template preÔ¨Åx M p
t and sufÔ¨Åx M s
t .
A proxy holds the injected message M‚àó
. We will show
how they can jointly compute HMAC with the Ô¨Årst key
over M p
t and CBC mode with the second key
over the same composed message. We denote the HMAC
chunk size by d (in bits), and assume CBC mode uses
a blockcipher whose block size in bits we denote by n.
Looking ahead, we will require that M p
each
have length a multiple of d (after headers are prepended)
during the HMAC computation and n during CBC.
2P-HMAC. Recall that HMAC is a pseudorandom func-
tion (PRF) constructed on top of a hash function that we
denote H. We assume that H is a Merkle-DamgÀöard based
t and M‚àó
hash function, which aligns with the hashes used in TLS.3
We take advantage of the fact that one can outsource
computation of HMAC over portions of messages without
revealing other parts of the message or the key.
Let f : {0, 1}v√ó{0, 1}d ‚Üí {0, 1}v be the compression
function underlying H. It accepts messages of length d
bits and a string called the chaining variable of length v
bits. It outputs a v-bit value. For any string S ‚àà {0, 1}v
and string M = M1, . . . , Mm where each Mi
is d
bits long, we let f +(S, M ) be deÔ¨Åned recursively by
Si = f (Si‚àí1, Mi) for i = 1 to m and S0 = S. Finally
f +(S, M ) = Sm. For the hash functions of interest one
appends to a message M a padding string PadH|M| so
that M(cid:3)PadH|M| is a multiple of d bits. For SHA-256 for
example PadH(cid:2) = 10r(cid:3)(cid:5)(cid:2)(cid:6)64 where the last part is a 64-
bit encoding of (cid:2) and r is deÔ¨Åned to produce enough zeros
to make (cid:2) + r + 65 a multiple of d. Finally the full hash
is deÔ¨Åned as H(M ) = f +(IV, M(cid:3)PadH|M|).
HMAC on a key K and message M is built using H
as follows:
HMAC(K, M ) = H((K ‚äï opad) (cid:3) H((K ‚äï ipad)(cid:3)M ))
where ipad and opad are the inner and outer padding
constants each of length d bits [38]. In our usage |K|< d,
so one Ô¨Årst pads it with zero bits to get a d-bit string
before applying the pad constants. To perform a joint
computation
the
parties follow the protocol detailed in Protocol 3.
We
by
2P-HMAC((Khmac, M p
of HMAC(Khmac, M p
t (cid:3)M‚àó(cid:3)M s
t )
execution
t , M s
t ), M‚àó).
protocol
of
this
denote
an
t ), M‚àó)
t , M s
t = (M1, . . . , M(cid:2)),
t = (M(cid:2)+k+1, . . . , Mm). The proxy holds M‚àó =
2P-HMAC((Khmac, M p
Protocol 3:
Input: The client holds Khmac, M p
and M s
(M(cid:2)+1, . . . , M(cid:2)+k) where each Mi ‚àà {0, 1}d.
The protocol:
(1) The client computes s0 = f (IV, Khmac ‚äï ipad), and
for every i = 1, . . . , (cid:2), it computes si = f (si‚àí1, Mi).
Send s(cid:2) to the proxy.
(2) The proxy computes si = f (si‚àí1, Mi) for i = (cid:2) +
1, . . . , (cid:2) + k. Send s(cid:2)+k to the client.
(3) The client proceeds si = f (si‚àí1, Mi) for all i =
(cid:2) + k + 1, . . . , m, and then s‚àó = f (sm, PadH|M|) =
H((Khmac ‚äï opad)||M ).
Output: The client outputs T = H((Khmac ‚äï opad)(cid:4)s‚àó).
2P-CBC. We now turn to how to jointly compute a CBC
t (cid:3)M‚àó(cid:3)M s
encryption over M p
t . Since we are working now
t = (P1, . . . , Pq), M‚àó =
with n-bit strings, we let M p
(Pq+1, . . . , Pq+r), and M s
t = (Pq+r+1, . . . , Pt), where
each Pi is an n-bit block.
The CBC mode on message M = (P1, . . . , Pt) is
deÔ¨Åned by choosing a random n-bit C0 = IV and
3Our protocol here will not work with SHA-3 whose
compression function is not secure (e.g, Keccak, who uses a
sponge construction [7]). This is related to so-called mid-game
attacks [14].
(cid:18)(cid:17)(cid:19)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
(Ci‚àí1, Pi) for every i =
computing Ci = AESKaes
1, . . . , t, and outputting C0, . . . , Ct. If Pt is not a multiple
of n, then some PadC|M| is added to the message to
ensure that M is a multiple of n bits in length. Our
2P-CBC protocol is described in Protocol 4. In order to
compute the ciphertexts, the two parties use a general-
purpose MPC protocol to compute AESKaes
i ) where
the client inputs Kaes, the proxy inputs some block P (cid:3)
i ,
and receives ciphertext Ci. We denote this functionality
as FAES.
(P (cid:3)
t , M s
t ), M‚àó) (in the FAES-
t = (P1, . . . , Pq),
t = (Pq+r+1, . . . , Pt), the proxy holds M‚àó =
Protocol 4: 2P-CBC((Kaes, M p
hybrid model)
Input: The client holds Kaes, messages M p
and M s
(Pq+1, . . . , Pq+r), where each Pi ‚àà {0, 1}n.
The protocol:
(1) The client sets C0 = IV , and computes Ci =
AESKaes (Ci‚àí1 ‚äï Pi) for every i = 1, . . . , q. It sends
C0, . . . , Cq to the proxy.
(2) For i = q + 1, . . . , q + r, the client and the proxy
FAES-functionality for computing AESKaes (Ci‚àí1 ‚äï Pi),
where the client inputs the key and the proxy inputs the
message. The proxy receives as outputs Cq+1, . . . , Cq+r,
and sends Cq+r to the client.
(3) The client proceeds to compute Ci = AESKaes (Ci‚àí1 ‚äï
Mi) for every i = q + r + 1, . . . , t and sends all the
ciphertext to the proxy.
Output: The proxy outputs C0, . . . , Ct.
We assume that |M‚àó| (cid:2) 2n (i.e., r (cid:2) 2). If r = 1, the
proxy cannot send Cp+1 back to the client because the
client can easily recover M‚àó
based on her knowledge of
Cp and Kaes. In this case, we can alternatively require that
t |= 0; that is, |M‚àó| is the last block of the plaintext.
|M s
The SCI protocol. We are now in a position to describe
our solution for SCI with TLS where the proxy wants
to inject a message at some designated point into the
stream of encrypted client-to-server message data. Let
Q1, . . . , Q‚àó
u, . . . , Qv be the sequence of TLS plaintext
fragments sent from the client to the server in sepa-
rate record layer encryptions, with Q‚àó
u representing the
fragment within which the proxy will inject its private
message M‚àó
.
Recall that HMAC-SHA256 works on blocks of size
d = 512 bits (64 bytes) and AES is on blocks of size
n = 128 bits. Moreover, we recall that SQN and HDR (of
total length 40 + 64 = 104 bits) should be added to the
message when computing the HMAC, whereas these are
not included when encrypting with CBC (see Figure 3).
We consider the simpler case in which |M‚àó| = 256
|M‚àó| = 2n, as in Protocol 4). We let
|= 232
|= 408 and |M p2
, M p2
t = (M p1
t
t
t = (M s1
, M s2
t ) where
t
t = 104 bits. The client
bits (i.e.,
t ) where |M p1
M p
bits. Moreover, we let M s
| = 24 bits and M s2
|M s1
t
t

SQN + HDR + M p1
t




t + M‚àó + M s1
M p2
	

t
M s2
t


M p
t

M‚àó
M s
t + T

Fig. 4: An example of injecting a 256-bit M‚àó. The messages with
dots are input by the proxy, and the other (portions of) messages are
provided by the client. The numbers are message sizes in bits.
sends M p2
and M s1
to the proxy4. As such, the blocks
t
t ) and (M p2
(SQN, HDR, M p1
t ) are each
t | = |(M p1
t )| and |M‚àó|are
multiplies of d and |M p
t
each multiples of n. See Figure 4.
, M‚àó, M s1
, M p2
t
t
u the client constructs
SCI-TLS proceeds by having the proxy act as a
the TLS handshake between
TCP-layer proxy for
the client and the server and for the Ô¨Årst u ‚àí 1 TLS
record layer fragments. Let the client-to-server session
keys be Khmac for HMAC and Kaes for AES. To
send Q‚àó
the message preÔ¨Åx
SQN(cid:3)HDR(cid:3)M p1
. Then the client and the proxy
execute 2P-HMAC((Khmac, SQN(cid:3)HDR(cid:3)M p1
t ),
t (cid:3)M‚àó(cid:3)M s1
M p2
t ) to compute the HMAC tag T . Next,
to
they
jointly compute the record layer ciphertext if |M‚àó| is
greater than 128 bits (16 bytes).
execute 2P-CBC((Kaes, M p
t (cid:3)T ), M‚àó)
t , M s
, M s2
t
t
A special case is when the proxy wants to inject less
than 256 bits. The minimal amount that our approach
allows is 152 bits. This case somewhat corresponds to the
r = 1 setting in Protocol 4, for which, as we mentioned
before, the proxy cannot send back the ciphertext to
t |= 0, as we
the client. We can handle this case if |M s
elaborate on in the full version of this paper.
We model the internal function f of the hash function
H as a random oracle, and AES as an ideal cipher, and
prove the following Theorem in Appendix C1:
Theorem 5. The above protocol is a secure channel
injection protocol for TLS with AES-CBC and HMAC-
SHA-256 (i.e., satisÔ¨Åes DeÔ¨Ånition 2), assuming that f is
a random oracle and AES is an ideal cipher.
AES-GCM. In Appendix B we demonstrate how to
implement an efÔ¨Åcient secure computation protocol
for AES-GCM. In CBC mode with HMAC, we had a
minor overhead for jointly computing the authentication
tag and the expensive part was the joint computation
of ciphertexts corresponding to M‚àó