### Optimized Text

#### Overview
The TLS record structure is illustrated in Figure 3. Our goal is to design a protocol that allows two parties, a client and a proxy, to jointly compute a TLS record. The client provides the TLS session keys and part of the message, while the proxy injects an additional message. We introduce two sub-protocols, 2P-HMAC and 2P-CBC, and use them to design SCI-TLS. 

2P-HMAC involves both parties submitting partial tags, with minimal overhead. In 2P-CBC, the client locally computes AES ciphertexts for parts of the message, and the parties engage in a secure protocol to compute AES on the blocks of the injected message. We will fully specify these protocols and analyze the security of SCI-TLS. For clarity, we divide the protocol into sub-protocols, though we do not formalize their ideal counterparts.

#### Assumptions
- The client (Cl) holds the HMAC key \( K_{\text{hmac}} \), the AES key \( K_{\text{aes}} \), an injection template prefix \( M_p^t \), and a suffix \( M_s^t \).
- The proxy holds the injected message \( M^* \).

We will show how they can jointly compute HMAC over \( M_p^t \) and CBC encryption over the composed message \( M_p^t \parallel M^* \parallel M_s^t \). We denote the HMAC chunk size by \( d \) (in bits) and the block size of the block cipher used in CBC mode by \( n \) (in bits). Both \( M_p^t \) and \( M^* \) should have lengths that are multiples of \( d \) during HMAC computation and \( n \) during CBC encryption.

#### 2P-HMAC
HMAC is a pseudorandom function (PRF) built on top of a hash function \( H \). We assume \( H \) is a Merkle-Damg√•rd based hash function, consistent with those used in TLS. HMAC on a key \( K \) and message \( M \) is defined as:
\[ \text{HMAC}(K, M) = H((K \oplus \text{opad}) \parallel H((K \oplus \text{ipad}) \parallel M)) \]
where \( \text{ipad} \) and \( \text{opad} \) are inner and outer padding constants, each of length \( d \) bits.

To perform a joint computation, the parties follow the protocol detailed below:

**Protocol 3: 2P-HMAC**

**Input:**
- Client: \( K_{\text{hmac}}, M_p^t, M_s^t \)
- Proxy: \( M^* \)

**Steps:**
1. The client computes \( s_0 = f(\text{IV}, K_{\text{hmac}} \oplus \text{ipad}) \) and for every \( i = 1, \ldots, \ell \), it computes \( s_i = f(s_{i-1}, M_i) \). It sends \( s_\ell \) to the proxy.
2. The proxy computes \( s_i = f(s_{i-1}, M_i) \) for \( i = \ell + 1, \ldots, \ell + k \) and sends \( s_{\ell + k} \) to the client.
3. The client computes \( s_i = f(s_{i-1}, M_i) \) for \( i = \ell + k + 1, \ldots, m \) and then \( s^* = f(s_m, \text{Pad}_H|M|) \). Finally, it outputs \( T = H((K_{\text{hmac}} \oplus \text{opad}) \parallel s^*) \).

#### 2P-CBC
For CBC encryption, we consider the message \( M_p^t \parallel M^* \parallel M_s^t \) divided into \( n \)-bit blocks. The CBC mode on message \( M = (P_1, \ldots, P_t) \) is defined by choosing a random \( n \)-bit initial vector \( C_0 = \text{IV} \) and computing \( C_i = \text{AES}_{K_{\text{aes}}}(C_{i-1} \oplus P_i) \) for \( i = 1, \ldots, t \), outputting \( C_0, \ldots, C_t \).

**Protocol 4: 2P-CBC**

**Input:**
- Client: \( K_{\text{aes}}, M_p^t, M_s^t \)
- Proxy: \( M^* \)

**Steps:**
1. The client sets \( C_0 = \text{IV} \) and computes \( C_i = \text{AES}_{K_{\text{aes}}}(C_{i-1} \oplus P_i) \) for \( i = 1, \ldots, q \). It sends \( C_0, \ldots, C_q \) to the proxy.
2. For \( i = q + 1, \ldots, q + r \), the client and proxy use a general-purpose MPC protocol to compute \( \text{AES}_{K_{\text{aes}}}(C_{i-1} \oplus P_i) \), where the client inputs \( K_{\text{aes}} \) and the proxy inputs \( P_i \). The proxy receives \( C_{q+1}, \ldots, C_{q+r} \) and sends \( C_{q+r} \) to the client.
3. The client computes \( C_i = \text{AES}_{K_{\text{aes}}}(C_{i-1} \oplus P_i) \) for \( i = q + r + 1, \ldots, t \) and sends all the ciphertexts to the proxy.

**Output:**
- Proxy: \( C_0, \ldots, C_t \)

#### SCI-TLS Protocol
In the context of TLS, the proxy acts as a TCP-layer proxy for the first \( u-1 \) TLS record layer fragments. The client and proxy jointly compute the HMAC tag \( T \) and the CBC ciphertext for the injected message \( M^* \).

**Example: Injecting a 256-bit \( M^* \)**
- \( |M_p^t| = 232 \) bits, \( |M_s^t| = 408 \) bits.
- \( M_p^t = (M_p^1, M_p^2) \) and \( M_s^t = (M_s^1, M_s^2) \) with appropriate sizes.
- The client sends \( M_p^2 \) and \( M_s^1 \) to the proxy.

The client and proxy execute 2P-HMAC and 2P-CBC to compute the HMAC tag and the CBC ciphertext, respectively.

**Security Analysis**
We model the internal function \( f \) of the hash function \( H \) as a random oracle and AES as an ideal cipher. We prove the following theorem in Appendix C1:

**Theorem 5:**
The above protocol is a secure channel injection protocol for TLS with AES-CBC and HMAC-SHA-256, assuming \( f \) is a random oracle and AES is an ideal cipher.

**AES-GCM**
In Appendix B, we demonstrate an efficient secure computation protocol for AES-GCM. In CBC mode with HMAC, the overhead is minor for jointly computing the authentication tag, but the joint computation of ciphertexts for \( M^* \) is more expensive.