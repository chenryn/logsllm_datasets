supports serializing variable-length data using ﬁnalizers. A
ﬁnalizer takes as input an array, with the precondition that
the array contains a placeholder for the length of the data
followed by the serialization of the data itself. The ﬁnalizer
computes and writes the length in the placeholder, providing
an appropriate postcondition.
However, ﬁnalizers are not suitable for DER as they require
placeholders for serialization of the lengths. In the DER TLV
format, the size of the length encoding depends on the value
of length itself. Hence, determining the size of the placehold-
ers for lengths requires making a pass over the message to
compute its length before serializing the message itself. Since
every DER encoding is TLV, this means making multiple
passes on the sub-messages in a naïve implementation. One
could optimize this to one pass by computing a length struc-
ture isomorphic to the message, but this requires changing the
serializer type in LowParse to pass this additional argument—
a suboptimal choice for ﬁxed-length formats and a pervasive
change to the LowParse library.
Thus, to support variable-length data in ASN.1 DER, we
extend LowParse with low-level backward serializers. Back-
ward serializers provide an elegant solution to the problem.
Instead of serializing messages forward from the beginning of
the array, backward serializers serialize messages backward
from the end of the array. They return the number of bytes
serialized, which can then be serialized by the caller at the
beginning of the serialized message. This allows us to build
generic TLV serializers, without explicitly requiring length
computations. The type of the backward serializers is:
type serializer32_backwards #t #k (#p:parser t k) (s:serializer p) =
x:t →b:array pbyte →pos:u32 →Stack u32 (requires λh →
live h b ∧ Seq.length (serialize s x) ≤ v pos ≤ length b)
(ensures λh0 len h1 →modiﬁes b h0 h1 ∧ as_seq h1 b ==
replace (as_seq h0 b) (v (pos − len)) (v len) (serialize s x))
USENIX Association
30th USENIX Security Symposium    1099
The pos argument to the backward serializers is the ending
position in the array. The postcondition establishes that the
contents of the array between [pos − len, pos) are the serial-
ized bytes (functionally correct w.r.t. the forward speciﬁcation
serializer s). Since we do not change the parser and serializer
speciﬁcations, our low-level backward serializers enjoy the
same security properties as before.
Using backward serializers, we implement a generic TLV
serializer as follows:
let serializer32_tlv_backwards s32 x tag b pos =
let l_value = s32 x b pos in (∗ serialize value ∗)
let l_length = (∗ serialize length ∗)
serialize32_len_backwards l_value b (pos − l_value) in
let l_tag = (∗ serialize tag ∗)
serialize32_tag_backwards tag b (pos − l_value − l_length) in
l_value + l_length + l_tag (∗ return number of bytes written ∗)
We also extend LowParse with combinators for backward seri-
alization. For example, the serialize32_nondep_then_backwards
combinator takes as input two backward serializers s1 and s2,
and invokes s2 followed by s1.
ASN.1 serializers. We program parser and serializer spec-
iﬁcations, and low-level backward serializers for the DER
encoding of the ASN.1 fragment needed to implement L0.
The parser and serializer speciﬁcations are proven secure, and
the low-level serializers are proven memory safe and func-
tionally correct w.r.t. the speciﬁcation, all in the (extended)
LowParse framework.
Our implementation supports ASN.1 lengths in the
range [0, 232), and all ASN.1 tags. For ASN.1 prim-
itive types, it supports: BOOLEAN, NULL, non-negative
INTEGER, OCTET_STRING, PRINTABLE_STRING, IA5_STRING,
BIT_STRING, OBJECT_IDENTIFIER (OID), and speciﬁc values
for GENERALIZED_TIME and UTC_TIME (used in the X.509 va-
lidity ﬁeld). For structured types, it supports SEQUENCE, as
well as empty and singleton SET. We support implicit and
explicit tagging over both primitive and structured types.
For the supported ASN.1 primitive types, we ﬁrst deﬁne
their Low(cid:63) representations:
let datatype_of_asn1_type (a:asn1_type) = match a with
| BOOLEAN →bool
| OCTET_STRING →(len: u32 {len < 232 − 6} ∗ array pbyte len)
| BIT_STRING →bit_string_t
| OID →oid_t
... (∗ deﬁnition for other ASN.1 primitive types ∗)
The Low(cid:63) representation for OCTET_STRING is a dependent
pair of a length len∈[0, 232−6) and an array of (public) bytes
of length len. The invariant on len ensures that the length of
the corresponding TLV message is less than 232. Invariants on
other types are more involved; e.g., the Low(cid:63) representation
for BIT_STRING may contain unused bits that must be zero.
Then, we deﬁne the parser and serializer speciﬁcations, and
the low-level serializer implementation on these representa-
tion types to match their DER encoding. For example, the
ASN.1 BOOLEAN values TRUE and FALSE are serialized as
8-bit unsigned integers 0xFFuy and 0x00uy respectively. The
parser speciﬁcation for the BOOLEAN type is:
val parse_asn1_boolean
let parse_asn1_boolean = parse_u8
: parser (datatype_of_asn1_type BOOLEAN) boolean_meta
`parse_ﬁlter` (λ b →b = 0xFFuy || b = 0x00uy) `parse_synth`
(λ b →match b with | 0xFFuy →true | 0x00uy →false)
Here, a `f` b is inﬁx notation for f a b, and parse_u8, parse_ﬁlter,
and parse_synth are LowParse combinators [49]. For each
type, we also build its TLV serializer using the generic TLV
serializer sketched above.
X.509 serializers. We follow a similar methodology
for X.509 structures needed for L0 [58]. For example,
the X.509 standard [24] deﬁnes AlgorithmIdentiﬁer and
SubjectPublicKeyInfo as:
AlgorithmIdentiﬁer ::= SEQUENCE {
algorithm OBJECT IDENTIFIER,
parameters ANY DEFINED BY algorithm OPTIONAL }
SubjectPublicKeyInfo ::= SEQUENCE {
algorithm AlgorithmIdentiﬁer,
subjectPublicKey BIT STRING }
The parameters ﬁeld of AlgorithmIdentiﬁer is algorithm-speciﬁc.
For Ed25519 [32], for example, the algorithm should be the
OID id−Ed25519 and the parameters ﬁeld should be absent.
The subjectPublicKey ﬁeld in SubjectPublicKeyInfo for Ed25519
must be a 33-byte bit string where the leading byte is set
to zero; this leading byte speciﬁes the unused bits in the
last byte. We deﬁne the corresponding types and serializer
speciﬁcations as follows:
type the_oid oid = o:oid{o == oid} (∗ Singleton OID type ∗)
type alg_identiﬁer_payload_t = the_oid OID_ED25519
let serialize_alg_identiﬁer_payload = (∗ Spec serializer ∗)
let serialize_alg_identiﬁer = (∗ SEQUENCE tagging ∗)
serialize_the_oid OID_ED25519
serialize_envelope_sequence serialize_alg_identiﬁer_payload
type bit_string_with_len_and_unused l n =
b:bit_string_t{length b == l ∧ unused b == n}
type subject_public_key_info_payload_t = {
algorithm : envelope SEQUENCE alg_identiﬁer_payload_t;
subject_public_key : bit_string_with_len_and_unused 33ul 0ul }
let serialize_subject_public_key_info_payload =
serialize_alg_identiﬁer `serialize_nondep_then`
serialize_bit_string_with_len_and_unused 33ul 0ul
let serialize_subject_public_key_info = serialize_envelope_sequence
serialize_subject_public_key_info_payload
Following this scheme, we deﬁne parsers and serializers
of all the X.509 structures required for DeviceID CSR and
AliasKey certiﬁcate in accordance with the DICE certiﬁcate
standard [58].
X.509 extension for L0. The DICE certiﬁcate standard [58]
deﬁnes an X.509 extension for L0. The extension describes
1100    30th USENIX Security Symposium
USENIX Association
how the device identity, consisting of the DeviceIDpub and
FWID, should be embedded inside the AliasKey certiﬁcate.
TCG−DICE−FWID ::== SEQUENCE {
TCG−DICE−fwid OBJECT IDENTIFIER,
SEQUENCE CompositeDeviceID }
CompositeDeviceID ::== SEQUENCE {
version INTEGER,
SEQUENCE SubjectPublicKeyInfo,
SEQUENCE FWID }
FWID ::== SEQUENCE {
hashAlg OBJECT IDENTIFIER,
fwid OCTET STRING }
Similar to SubjectPublicKeyInfo, we deﬁne parser and serial-
izer speciﬁcation as well as low-level serializer implementa-
tion for this extension.
5.3 L0 Implementation
The F(cid:63) type for the core L0 function is shown in Fig-
ure 6. The function l0_core takes as input (a) CDI and
FWID, (b) HKDF labels to be used in the derivation of
the DeviceID key pair and AliasKey pair, (c) the DeviceID
CSR and AliasKey certiﬁcate details (such as the version,
serial number, etc.), and (d) arrays for writing DeviceIDpub,
AliasKeypub, AliasKeypriv, DeviceID CSR, and AliasKey cer-
tiﬁcate. Because the DICE speciﬁcation does not specify what
exactly constitutes a FWID measurement, we take FWID as
an input. The implementation can easily be adapted to support
speciﬁc measurement functions computed inside l0_core.
The precondition requires that all the arrays are live and
pairwise disjoint, and that the length of the CSR and certiﬁ-
cate arrays equals the size of the (serialized) certiﬁcate and
CSR, respectively; we provide auxiliary functions to com-
pute the exact size for the certiﬁcate and CSR. Currently, we
enforce the length requirement as a precondition, but other
implementations, such as runtime checks, are possible.
The function has the Stack effect, ensuring that it does not
perform any heap allocations. Its postcondition ensures that
the function only modiﬁes the contents of the DeviceIDpub,
AliasKey pair, CSR, and certiﬁcate arrays, in accordance with
their functional speciﬁcations. Below we show the functional
speciﬁcation for AliasKey certiﬁcate, which speciﬁes the con-
tents of the ak_crt_arr in terms of the speciﬁcation-level serial-
izer for the AliasKey certiﬁcate. The speciﬁcation functions
for key derivation (e.g. dk_spec below) integrate with the key
derivation speciﬁcations from HACL(cid:63).
let ak_crt_post cdi fwid dk_label ak_label ak_crt ak_crt_arr h0 h1 =
ak_crt_spec cdi fwid dk_pub dk_priv ak_label ak_crt h0 in
let dk_pub, dk_priv = dk_spec cdi fwid dk_label h0 in
let ak_crt =
(∗ Functional correctness for the AliasKey certiﬁcate array ∗)
as_seq h1 ak_crt_arr == serializer_ak_crt `serialize` ak_crt
The implementation of l0_core derives the DeviceID and
AliasKey using the HKDF and Ed25519 libraries from
val l0_core (cdi:array sbyte 32) (fwid:array pbyte 32)
(dk_label_len:u32) (dk_label:array pbyte (v dk_label_len))
(ak_label_len:u32) (ak_label:array pbyte (v ak_label_len))
(dk_csr:csr_t) (ak_crt:crt_t) (dk_pub: array pbyte 32)
(ak_pub:array pbyte 32) (ak_priv:array sbyte 32)
(dk_csr_len:u32) (dk_csr_arr:array pbyte (v csr_len))
(ak_crt_len:u32) (ak_crt_arr:array pbyte (v crt_len)) : Stack unit
(requires λh →... ∧ (∗ liveness and disjointness of arrays ∗)
(∗ label lengths are valid HKDF lengths ∗)
is_hkdf_label dk_label_len ∧ is_hkdf_label ak_label_len ∧
(∗ the CSR and certiﬁcate arrays have the required lengths ∗)
dk_csr_pre dk_csr dk_csr_len ∧ ak_crt_pre ak_crt ak_crt_len)
(ensures λh0 () h1 →modiﬁes
[dk_pub; ak_pub; ak_priv; dk_csr_arr; ak_crt_arr] h0 h1 ∧
(∗ Functional spec for the DeviceID public key ∗)
dk_post cdi dk_label dk_pub h0 h1 ∧
(∗ Functional spec for the AliasKey pair ∗)
ak_post cdi fwid ak_label ak_pub ak_priv h0 h1 ∧
(∗ Functional spec for the DeviceID CSR ∗)
dk_csr_post cdi dk_label dk_csr dk_csr_arr h0 h1 ∧
(∗ Functional spec for the AliasKey certiﬁcate ∗)
ak_crt_post cdi fwid dk_label ak_label ak_crt ak_crt_arr h0 h1)
Figure 6: Signature of the core L0 function. Identiﬁers with
preﬁx ak_ and dk_ refer to AliasKey and DeviceID resp.
HACL(cid:63). The implementation then creates a DeviceIDpub
CSR Low(cid:63) value signed using the DeviceIDpriv and serial-
izes it into the dk_csr_arr using its low-level serializer. Fi-
nally, it creates the AliasKey certiﬁcate value, signed using
the DeviceIDpriv, and serializes it in ak_crt_arr. In all these
cases, it is proved that the serialized bytes match their func-
tional speciﬁcations.
Declassiﬁcation of public data. The low-level implementa-
tions in the HACL(cid:63) library operate exclusively on secret bytes;
e.g., the public key pair derivation function returns even the
public key in an array of secret bytes. Because secret and pub-
lic bytes are different types, type-safety in F(cid:63) does not allow
copying public keys in secret byte arrays directly into the (pub-
lic) output arrays. Thus, we need to explicitly declassify three
public keys and two signatures: DeviceIDpub, AliasKeypub,
the digest of the DeviceIDpub as the authority key identiﬁer
used in the AliasKey certiﬁcate extension, DeviceIDpub CSR
signature, and AliasKey certiﬁcate signature. We model de-
classiﬁcation using a trusted function as follows:
let declassify_spec len (s:lseq sbytes len) : lseq pbytes len = ...
val declassify (len:u32) (src:array sbyte len) (dst:array pbyte len)
: Stack unit
(requires λh →live h src ∧ live h dst ∧ disjoint [src; dst])
(ensures λh0 () h1 →modiﬁes dst h0 h1 ∧
as_seq h1 dst == declassify_spec (as_seq h0 src))
The extracted DICE(cid:63) L0 code is linked against a native im-
plementation of the declassiﬁcation function, which can use
either memcpy or a veriﬁed memcpy extracted from Low(cid:63).
USENIX Association
30th USENIX Security Symposium    1101
In general, such declassiﬁcations need to be manually au-
dited to ensure that only the intended data is declassiﬁed.
However, in our case, precise functional speciﬁcation of all
the output arrays ensures that the veriﬁcation will fail if incor-
rect data is declassiﬁed. Since our code does not use the heap
and explicitly clears the stack, all outputs are via argument
arrays whose contents are precisely speciﬁed in the postcondi-
tions. For example, the dk_post speciﬁcation used in l0_core’s
postcondition (in Figure 6) explicitly states that the contents
of the array dk_pub are same as declassifying the output of the
function derive_dk_pub_spec:
let dk_post (cdi:array sbyte 32) (dk_label: array pbyte)
(dk_pub:array pbyte 32) (h0 h1:mem) =
as_seq h1 dk_pub
== declassify_spec 32 (derive_dk_pub_spec cdi dk_label)
Thus, a bug in declassiﬁcation, e.g. declassifying the private
key instead of public key, would result in a veriﬁcation failure
for this postcondition.
6 DICE(cid:63) Implementation
Table 1 shows the lines of code (LOC) for DICE(cid:63). The DICE
engine implementation in DICE(cid:63) consists of 533 lines of
(commented) F(cid:63) code, including the speciﬁcations, imple-
mentations, and proofs, which extract to 205 lines of C code.
DICE(cid:63) L0 implementation consists of 24,241 lines of F(cid:63) code,
16,564 of those implementing the ASN.1/X.509 library. The
L0 implementation extracts to 5,051 lines of C.
Table 1 also shows the veriﬁcation times for DICE(cid:63). The
measurements are taken on an HP Z840 workstation with
Intel R(cid:13) Xeon R(cid:13) CPU E5-2699 v4 (2.20GHz) and 64GB RAM.
The time measurements are with parallelism provided by
modular veriﬁcation, verifying L0 sequentially takes 26m2s.