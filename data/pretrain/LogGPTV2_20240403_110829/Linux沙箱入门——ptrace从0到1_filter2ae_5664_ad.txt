        unsigned long    r15;
        unsigned long    r14;
        unsigned long    r13;
        unsigned long    r12;
        unsigned long    bp;
        unsigned long    bx;
        unsigned long    r11;
        unsigned long    r10;
        unsigned long    r9;
        unsigned long    r8;
        unsigned long    ax;
        unsigned long    cx;
        unsigned long    dx;
        unsigned long    si;
        unsigned long    di;
        unsigned long    orig_ax;
        unsigned long    ip;
        unsigned long    cs;
        unsigned long    flags;
        unsigned long    sp;
        unsigned long    ss;
        unsigned long    fs_base;
        unsigned long    gs_base;
        unsigned long    ds;
        unsigned long    es;
        unsigned long    fs;
        unsigned long    gs;
    };*/
        /* int 0x80, int 3 */
        char code[] = {0xcd,0x80,0xcc,0}; //定义字符数组，存的是将要插入的机器码
        char backup[4]; //定义接收原内存机器码的字符数组，这里应该和code[]字符数量相对应
        traced_process = atoi(argv[1]); //这里把传入的pid转换成int类型
        /*attack指定pid进程，traced_process*/
        ptrace(PTRACE_ATTACH, traced_process,NULL, NULL);//跟踪pid进程
        wait(NULL); //等待系统通知
        ptrace(PTRACE_GETREGS, traced_process, NULL, &regs);/*获取目标进程的所有寄存器值，存入regs结构体变量中，为以后恢复原rip,以及各个寄存器的值做准备*/
        printf("eip=%lld\n",regs.rip);
        getdata(traced_process, regs.rip, backup, 3);/* 将rip指向地址中的机器码备份到backup中*/
        putdata(traced_process, regs.rip, code, 3); /* 将int 0x80, int 3指令的机器码写入rip指向内存地址中，int 0x80长度为2，int3长度为1*/
        x
        /* 让目标进程继续执行并执行我们插入的int 0x80，int 3指令 */
        ptrace(PTRACE_CONT, traced_process, NULL, NULL);
        wait(NULL);//等待系统通知
        printf("This process is attacked by 0xAXSDD! Press  to continue!");
        getchar();//捕获一个输入
        putdata(traced_process, regs.rip, backup, 3); /*将backup原指令机器码恢复到原rip指向的地址中*/
        ptrace(PTRACE_SETREGS, traced_process, NULL, &regs); /* 让rip指向的内存地址恢复到原本指向的地址，让目标进程继续执行，恢复rip指针 */
        ptrace(PTRACE_DETACH, traced_process, NULL, NULL);/* 结束跟踪*/
        return 0;
    }
源码编译如果使用32位编译，相应rip改成eip，64位编译则不需要改。
测试用例，用个简单的c语言程序（32位编译）:
    #include
    #include 
    int main()
    {    
        printf("pid=%d\n",getpid());
        for(int num=0;num
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    const int long_size = sizeof(long);
    /*通过PTRACE_POKEDATA向内存写内容*/
    void putdata(pid_t child, long addr, char *str, int len)
    {   
        char *code;
        int i, j;
        union u{
                long val;
                char chars[long_size];
         }data;
        i = 0;
        j = len / long_size;
        code = str;
        while(i  to continue!");
        ptrace(PTRACE_DETACH, traced_process,NULL, NULL);//结束跟踪
        return 0;
    }
这里没有恢复到原先执行状态，因为我们直接getshell，不需要再返回到原程序中了。
运行效果截图
## 绕过简单的ptrace
上面谈论到ptrace在隐藏的过程中的攻防博弈，并没有说如何绕过ptrace，接下来我们讲如何绕过ptrace一些手段。
###  1.通过gdb修改eax（64位rax）中的返回值来绕过ptrace
理论依据：像这样的代码
    #include 
    #include 
    int main()
    {
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) ==-1 )//这里就直接先执行了ptrace(PTRACE_TRACEME, 0, 0, 0)，表示此程序已经被追踪
        {
            printf("don't trace me！\n");
            return 1;
        }
        printf("no one trace me！\n");
        return 0;
    }
我这里编译为64位
通过函数的返回值是否为-1来判断，是否正在被调试，如果我们直接修改ptrace的返回值，就可以绕过判断，ptrace函数执行之后的返回值将会保存在rax寄存器中，所以我们只需要在ptrace函数那里下断点，然后等ptrace函数结束后，利用set
$rax=0指令来设置rax的值，那么就会绕过判断，就能继续调试程序。
演示：
直接sudo gdb hellword3进行gdb调试
然后输入：
    catch syscall ptrace
然后c继续执行，第一次暂停是发生在刚开始调用ptrace，然后继续n，n，直到返回到主函数，比较rax的值时候，注意，我们必须得在ptrace执行完成之后，返回到主函数时才更改rax的值
可以看到正常ptrace运行完之后，rax中的值为-1（32位为eax）
输入命令：
    set $rax=0
然后继续运行，成功绕过ptrace反调试
###  2.直接通过Binary Ninja查找ptrace调用然后nop替换
直接通过搜索文本，然后找到调用ptrace的地方
直接选中这一行，然后右键，patch然后直接换成nop，就欧克了，然后另存！
###  3.使用LD_PRELOAD来劫持ptrace函数的调用
这里只针对那些动态链接共享库的程序，局限性很大，通过创键本地自定义的伪造库，使用LD_PRELOAD来劫持ptrace调用库为我们自定义的伪造库，这样就起到了狸猫换太子的效果！
用的命令，共享库文件代码
    long ptrace(int request, int pid, int addr, int data)
    {
         return 0;
    }
编译成共享库文件，然后LD_PRELOAD劫持
    gcc ptrace.c -o ptrace.so -fPIC -shared -ldl -D_GNU_SOURCE
    export LD_PRELOAD="/home/hacker/Reverse_debugging/ptrace/ptracE.SO"
其他绕过反调试手法具体程序具体分析，以一变应万变！
完结完结！！！撒花撒花