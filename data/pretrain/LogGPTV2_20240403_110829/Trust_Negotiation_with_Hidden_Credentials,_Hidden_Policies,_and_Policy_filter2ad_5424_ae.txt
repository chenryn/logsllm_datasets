tiation schemes differs from the one in our scheme. In exist-
ing trust negotiation schemes, a resource (e.g., a service, a
credential, or a policy) is revealed and delivered to the other
party, when the policy for the source has been satisﬁed. In
our framework, neither the credentials nor the policies are
revealed to the other party, even when the policies for the re-
source and the credentials are satisﬁed. Furthermore, all of
the intermediate results of the negotiation remain unknown
to each participant. Thus, our scheme offers better privacy
protection than the existing schemes.
Recent work on using cryptographic protocols for trust
negotiation includes hidden credentials [17, 6, 14], secret
handshakes [2], oblivious signature based envelope [20],
oblivious attribute certiﬁcates [18, 19], and policy-based
cryptography [1]. In these protocols, Alice has some pri-
vate credentials (or attribute values), Bob has a policy (that
may or may not be private), Alice and/or Bob want to de-
termines whether Alice’s credentials satisfy Bob’s policy.
While these protocols are useful in general and can be in-
tegrated into trust negotiation systems as valuable building
blocks, none of the protocols address the SCALP problem,
i.e., Alice’s credentials are not protected by any of her poli-
cies in those protocols. Therefore, our work is substantially
different from this other work.
Our problem is closely related to Secure Function Eval-
uation (SFE) [31, 16, 15].
In SFE, Alice has an input
x, Bob has an input y, Alice and Bob want to compute
f (x, y), where f is public to both of them. Elegant gen-
eral constructions have been developed to solve any SFE
problems [31, 16, 8]. Our paper uses two-party SFE tech-
niques, however, it is not a routine usage of these tech-
niques because (1) we had to ﬁrst propose a suitable overall
strategy for the negotiation (i.e., what “overall global func-
tion” to compute in the ﬁrst place); and (2) in the standard
SFE problems, neither party’s inputs are certiﬁed, but in our
problem, some of the inputs are veriﬁed off-line by a third
party (recall that Alice and Bob input their credentials is-
sued by the CA instead of directly providing their attributes
to the protocol), and verifying the credentials using the gen-
eral solutions to SFE is expensive.
10 Conclusion
In this paper, we gave an efﬁcient protocol for Alice and
Bob to negotiate trust, such that Alice does not learn Bob’s
credentials and policies, and Bob does not learn Alice’s cre-
dentials and policies. The only information they learn is
whether the trust between them can be established, or in
other words, whether Alice is eligible for Bob’s service or
resource. Our work is a substantial extension of the state-of-
the-art in privacy-preserving trust negotiations. The details
of our work contain technical results of independent inter-
est, such as the secure protocol for an equality test for array
elements.
References
[1] W. Bagga and R. Molva. Policy-based cryptography and
applications. In Proceedings of the 9th International Con-
ference on Financial Cryptography and Data Security, Feb.
2005.
[2] D. Balfanz, G. Durfee, N. Shankar, D. Smetters, J. Staddon,
and H.-C. Wong. Secret handshakes from pairing-based key
agreements.
In Proceedings of the IEEE Symposium and
Security and Privacy, pages 180–196, May 2003.
[3] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust
management. In Proceedings of the 1996 IEEE Symposium
on Security and Privacy, pages 164–173. IEEE Computer
Society Press, May 1996.
[4] P. Bonatti and P. Samarati. Regulating service access and
information release on the web. In Proceedings of the 7th
ACM Conference on Computer and Communications Secu-
rity (CCS-7), pages 134–143. ACM Press, Nov. 2000.
[5] D. Boneh and M. Franklin. Identity-Based Encryption from
the Weil Pairing.
In Proceedings of Crypto 2001, volume
2139 of Lecture Notes in Computer Science, pages 213–229.
Springer, 2001.
[6] R. Bradshaw, J. Holt, and K. Seamons. Concealing com-
plex policies with hidden credentials. In Proceedings of 11th
ACM Conference on Computer and Communications Secu-
rity, Oct. 2004.
[7] R. Canetti. Security and composition of multiparty crypto-
graphic protocols. Journal of Cryptology, 13(1):143–202,
2000.
[8] R. Canetti, Y. Ishai, R. Kumar, M. K. Reiter, R. Rubinfeld,
and R. N. Wright. Selective private function evaluation with
applications to private statistics. In Proceedings of the twen-
tieth annual ACM symposium on Principles of distributed
computing, pages 293–304. ACM Press, 2001.
[9] C. Cocks. An identity based encryption scheme based on
quadratic residues. In 8th IMA International Conference on
Cryptography and Coding, volume 2260, pages 360–363.
Springer, Dec. 2001.
[10] I. Damg˚ard and M. Jurik. A generalisation, a simpliﬁcation
and some applications of paillier’s probabilistic public-key
system. In PKC ’01: Proceedings of the 4th International
Workshop on Practice and Theory in Public Key Cryptogra-
phy, pages 119–136. Springer, 2001.
[11] I. Damg˚ard and M. Jurik. A length-ﬂexible threshold cryp-
tosystem with applications. In Proceedings of the 8th Aus-
tralasian Conference on Information Security and Privacy,
volume 2727 of Lecture Notes in Computer Science, pages
350–364. Springer, 2003.
[12] C. Ellison, B. Frantz, B. Lampson, R. Rivest, B. Thomas,
IETF RFC 2693,
and T. Ylonen. SPKI certiﬁcate theory.
Sept. 1999.
[13] M. J. Freedman, K. Nissim, and B. Pinkas. Efﬁcient private
matching and set intersection. In Advances in Cryptology:
EUROCRYPT ’04, volume 3027 of Lecture Notes in Com-
puter Science, pages 1–19. Springer, 2004.
[14] K. B. Frikken, M. J. Atallah, and J. Li. Hidden access control
policies with hidden credentials. In Proceedings of the 3rd
ACM Workshop on Privacy in the Electronic Society, Oct.
2004.
[15] O. Goldreich. The Foundations of Cryptography — Volume
2. Cambridge University Press, May 2004.
[16] O. Goldreich, S. Micali, and A. Wigderson. How to play
any mental game. In Proceedings of the nineteenth annual
ACM conference on Theory of computing, pages 218–229,
May 1987.
[17] J. E. Holt, R. W. Bradshaw, K. E. Seamons, and H. Orman.
Hidden credentials. In Proceedings of the 2nd ACM Work-
shop on Privacy in the Electronic Society, Oct. 2003.
[18] J. Li and N. Li. OACerts: Oblivious attribute certiﬁcates. In
Proceedings of the 3rd Conference on Applied Cryptogra-
phy and Network Security (ACNS), volume 3531 of Lecture
Notes in Computer Science. Springer, June 2005.
[19] J. Li and N. Li. Policy-hiding access control in open envi-
ronment. In Proceedings of the 24nd ACM Symposium on
Principles of Distributed Computing (PODC). ACM Press,
July 2005.
[20] N. Li, W. Du, and D. Boneh. Oblivious signature-based en-
velope.
In Proceedings of the 22nd ACM Symposium on
Principles of Distributed Computing (PODC). ACM Press,
July 2003.
[21] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a
role-based trust management framework. In Proceedings of
the 2002 IEEE Symposium on Security and Privacy, pages
114–130. IEEE Computer Society Press, May 2002.
[22] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay
– secure two-party computation system.
In Proceedings
of the 13th USENIX Security Symposium, pages 287–302.
USENIX, 2004.
[23] T. Okamoto, S. Uchiyama, and E. Fujisaki. Epoc: Efﬁcient
probabilistic public-key encryption. In IEEE P1363: Proto-
cols from other families of public-key algorithms, Nov. 1998.
[24] P. Paillier. Public-key cryptosystems based on composite
degree residuosity classes. In Advances in Cryptology: EU-
ROCRYPT ’99, volume 1592 of Lecture Notes in Computer
Science, pages 223–238. Springer, 1999.
[25] K. E. Seamons, M. Winslett, and T. Yu. Limiting the disclo-
sure of access control policies during automated trust nego-
tiation. In Proceedings of the Symposium on Network and
Distributed System Security (NDSS’01), February 2001.
[26] A. Shamir.
Identity-based cryptosystems and signature
schemes. In Advances in Cryptology: CRYPTO ’84, volume
196 of Lecture Notes in Computer Science, pages 47–53.
Springer, 1984.
[27] L. G. Valiant. Universal circuits (preliminary report).
In
STOC ’76: Proceedings of the eighth annual ACM sympo-
sium on Theory of computing, pages 196–203, New York,
NY, USA, 1976. ACM Press.
[28] W. H. Winsborough and N. Li. Towards practical automated
trust negotiation. In Proceedings of the Third International
Workshop on Policies for Distributed Systems and Networks
(Policy 2002), pages 92–103. IEEE Computer Society Press,
June 2002.
[29] W. H. Winsborough and N. Li. Safety in automated trust
negotiation. In Proceedings of the IEEE Symposium on Se-
curity and Privacy, pages 147–160, May 2004.
[30] W. H. Winsborough, K. E. Seamons, and V. E. Jones. Auto-
mated trust negotiation. In DARPA Information Survivability
Conference and Exposition, volume I, pages 88–102. IEEE
Press, Jan. 2000.
[31] A. C. Yao. How to generate and exchange secrets. In Pro-
ceedings of the 27th IEEE Symposium on Foundations of
Computer Science, pages 162–167. IEEE Computer Society
Press, 1986.
[32] T. Yu, X. Ma, and M. Winslett. Prunes: An efﬁcient and
complete strategy for trust negotiation over the internet. In
Proceedings of the 7th ACM Conference on Computer and
Communications Security (CCS-7), pages 210–219. ACM
Press, Nov. 2000.
[33] T. Yu and M. Winslett. Uniﬁed scheme for resource protec-
tion in automated trust negotiation. In Proceedings of IEEE
Symposium on Security and Privacy, pages 110–122. IEEE
Computer Society Press, May 2003.
[34] T. Yu, M. Winslett, and K. E. Seamons. Interoperable strate-
gies in automated trust negotiation. In Proceedings of the 8th
ACM Conference on Computer and Communications Secu-
rity (CCS-8), pages 146–155. ACM Press, Nov. 2001.
A The Eager Strategy
In this appendix we review the eager strategy [30]. Re-
call that the goal of the eager strategy is to compute a cre-
dential disclosure sequence that contains the requested ser-
vice. In the eager strategy, each negotiator iteratively ex-
ecutes the pseudo-code in Figure 8. The negotiation suc-
ceeds if s appears in the output (i.e., s ∈ M), and it fails
if the size of the credential disclosure sequence does not in-
crement after one round of execution (i.e., M = ∅). Note
that any negotiation using the eager strategy takes at most
min(nS, nC ) rounds, where nS and nC are the sizes of CS
and CC, respectively. The following is an example of trust
negotiation using the eager strategy.
The Eager Strategy(D, C, P, s)
D = {c1, . . . , ck}: the credential disclosure sequence.
C: the local credentials of this party.
P: the local policies of this party.
s: the service to which access was originally requested.
Output:
M: the set of new released credentials.
Pre-condition:
s has not been disclosed.
Procedure:
M = ∅;
For each credential c ∈ C
let c’s policy be pc : c ← φc;
if φc(D) = 1, then M = M ∪ {c};
M = M − D;
return M.
Figure 8. Pseudocode for the Eager Strategy
Example 2 Suppose the client and server have the follow-
ing policies:
Client
pc1 : c1 ← s1
pc2 : c2 ← s2 ∧ s3
pc3 : c3 ← s1 ∨ s2
pc4 : c4 ← true
Server
ps : s ← c5 ∨ (c2 ∧ c4)
ps1 : s1 ← c4
ps2 : s2 ← c1
ps3 : s3 ← true
where s denotes the server’s service, {s, s1, s2, s3} denote
the set of server’s credentials, {c1, c2, c3, c4} denotes the
set of the client’s credentials. Using the eager strategy,
the client begins by revealing credential c4, as the policy
second half of the values, the function Wi∈S1 ai ∧
Wi∈S2 ai.
function for c4 is true (thus it is trivially satisﬁed). The
server then discloses s3 (which can be revealed freely) and
s1 (which requires the earlier receipt of c4). The exchange
of credentials continues as the ﬁnal disclosure sequence is
{c4, s1, s3, c1, c3, s2, c2, s}. Note that all policies for dis-
closed credentials have been satisﬁed.
B Protocol for Blinded Policy Evaluation
Figure 9 describes how to achieve blinded policy evalua-
tion, which is a natural extension of Yao’s circuit simulation
protocol [31].
1. Alice constructs a circuit C that computes her
policy (several “useful circuits” are described be-
low) that uses the ri values as inputs and that has
an output wire with two encodings: t1 for true
and t0 for false. She sends the encodings of the
circuit’s gates to Bob (note that he already has in-
put encodings).
2. Bob evaluates the circuit and learns the encoding
for the output wire.
Figure 9. Blinded Policy Evaluation Protocol
The protocol for Blinded Policy Evaluation uses a cir-
cuit to evaluate the policy. This reveals the topology of the
circuit to the evaluator (which reveals some information to
the evaluator). However, one can build a topology that cov-
ers a large class of functions; this can be achieved in sev-
eral ways including: (1) building a topology that can handle
many useful functions, (2) using a universal circuit [27], and
(3) using a single n-ary gate for arbitrary functionality (this
latter option requires exponential communication). There
are several interesting circuit topologies with size linear in
the number of inputs to the circuit, including:
1. It is easy to construct an oblivious comparison circuit
(i.e., one that can compute =, 6=, >, <, ≥, and ≤ with-
out revealing which comparison is done) with size pro-
portional to the number of bits in the values.
2. A binary tree of oblivious gates
(with inputs
a1, . . . , an) can be used to compute many useful func-
tions (without revealing which function is being com-
puted) including:
i=1 ai, Wn
i=1 ai, etc.
(a) Vn
(b) For any subset of the values S, Vi∈S ai,Wi∈S ai,
i=1 ai, Ln
Li∈S ai, etc.
(c) Other functions like: for a subset S1 of the ﬁrst
half of the values and another subset S2 of the