# Title: ProcHarvester: Fully Automated Analysis of Procfs Side-Channel Leaks on Android

## Authors:
Raphael Spreitzer, Felix Kirchengast, Daniel Gruss, and Stefan Mangard  
Graz University of Technology

## Abstract
The procfs (process information file system) has been identified as a significant source of side-channel information leaks on mobile devices. Starting with Android M (Android 6), access to the procfs has been increasingly restricted to mitigate these attacks. However, recent studies have shown that even if process-specific information is restricted within the procfs, global statistics can still be exploited. Current techniques for identifying procfs information leaks require substantial manual effort, making a comprehensive analysis impractical.

We introduce ProcHarvester, a systematic and fully automated technique to assess procfs information leaks. ProcHarvester automatically triggers events of interest and uses machine learning to identify procfs information leaks. We demonstrate the effectiveness of ProcHarvester by identifying information leaks that allow inferring app starts from a set of 100 apps with 96% accuracy on Android N (Android 7). This outperforms the most accurate app inference attack by approximately 10 percentage points. Additionally, we show how ProcHarvester can profile other events such as website launches and keyboard gestures, and we identify the first procfs side channels on Android O (Android 8). ProcHarvester advances the investigation of procfs information leaks and will help reduce the attack surface of side-channel attacks.

## CCS Concepts
- Security and privacy → Mobile platform security

## Keywords
- Android, automatic analysis, procfs, side-channel analysis

## ACM Reference Format
Raphael Spreitzer, Felix Kirchengast, Daniel Gruss, and Stefan Mangard. 2018. ProcHarvester: Fully Automated Analysis of Procfs Side-Channel Leaks on Android. In ASIA CCS '18: 2018 ACM Asia Conference on Computer and Communications Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3196494.3196510

## 1. Introduction
Side-channel attacks exploit information leaks in computing platforms to gain sensitive information about users and their devices. On mobile devices, these attacks have gained significant attention, with various methods suggested to extract secret keys, bypass security mechanisms, and infer user behavior. The procfs, a virtual file system mounted under /proc/, has been identified as a rich source of information leaks. For example, procfs information has been used to infer inter-keystroke timings, keyboard input, unlock patterns, user identities, diseases, location, visited websites, and user interfaces.

A fundamental weakness of the procfs is the availability of process-specific information, which has led to continuous restrictions since Android M (Android 6). Despite these restrictions, newer attacks exploit global procfs information. For instance, Simon et al. [24] inferred swipe input on soft-keyboards using interrupt information and context switches, while Diao et al. [12] inferred unlock patterns and running applications via interrupt statistics. As of Android O (Android 8), access to global interrupt statistics has also been removed, illustrating the ongoing arms race between OS designers and attackers.

To address this, we introduce ProcHarvester, a tool that automatically profiles procfs information for events of interest. ProcHarvester finds correlations between events and procfs information, demonstrating its applicability by identifying new and existing information leaks. As a proof of concept, we analyze app inference attacks, where ProcHarvester launches applications and samples procfs resources, outputting a list of exploitable files and properties. Our results outperform existing app inference attacks, allowing us to infer app starts from a set of 100 apps with 96% accuracy on Android 7, an improvement of about 10 percentage points over the most accurate attack so far [12].

## 2. Background and Related Work
### 2.1 The Linux procfs
The procfs is a virtual file system mounted under /proc/ on Linux-based operating systems, including Android. It provides information about processes, such as shared memory, network traffic statistics, and global information like interrupt statistics. Since Android 4.3, SELinux has further restricted access to procfs entries, and starting with Android M (Android 6), third-party apps are restricted to accessing only /proc/ entries of other untrusted apps. In Android N (Android 7), the procfs is mounted with hidepid=2, and in Android O (Android 8), access to global interrupt statistics is also restricted.

### 2.2 Related Work
Side-channel attacks on mobile devices exploit shared resources such as sensors and microarchitectural components to infer sensitive information. Keylogging and unlock pattern attacks, inference of user information, and application and activity inference are some examples. Recent attacks, such as those by Zhang and Wang [35], Simon et al. [24], and Diao et al. [12], have exploited procfs interfaces to infer keystrokes, swipe input, and unlock patterns, respectively. Other works, such as Jana and Shmatikov [14] and Zhou et al. [38], have used procfs to infer visited websites and diseases. Chen et al. [7] and Yan et al. [34] have proposed UI inference attacks based on shared memory and power consumption.

## 3. The ProcHarvester Framework
ProcHarvester enables a systematic analysis of information leaks by automatically profiling procfs behavior for events of interest. The framework consists of an Android app and a Desktop Suite. The Android app logs procfs information, while the Desktop Suite controls the app and analyzes the data using machine learning.

### 3.1 ProcHarvester Android App
The Android app runs as an IntentService and samples the procfs at a frequency of 200 Hz. Events can be triggered programmatically or by a human, and the app identifies publicly readable files based on file permissions. During the exploration phase, the app identifies possible information leaks and focuses on resources that change with a sufficiently high frequency. In the profiling phase, time series of candidate side channels are logged while events are triggered.

### 3.2 ProcHarvester Desktop Suite
The Desktop Suite includes a tool to send ADB commands and an analysis tool. It triggers events, transfers data, and analyzes the gathered information using the scikit-learn machine learning framework. The analysis uses dynamic time warping (DTW) to compare time series and identify information leaks. The suite can operate in single-resource mode, evaluating one resource at a time, or in multi-resource mode, combining multiple resources for higher accuracy.

## 4. Application Inference
To demonstrate the applicability of ProcHarvester, we analyze the procfs during app starts. The learned information allows us to perform application inference attacks from an unprivileged app by monitoring the identified procfs resources. Currently executed apps should be kept secret to prevent targeted attacks, but ProcHarvester can infer app starts with high accuracy, outperforming existing attacks.

## 5. Conclusion
ProcHarvester is a fully automated technique to find procfs leaks, even on hardened Android systems. It identifies exploitable side-channel leaks on Android N (Android 7) and the new Android O (Android 8). By demonstrating the generic methodology of ProcHarvester, we reveal new attack surfaces within the procfs and outperform state-of-the-art attacks. This work contributes to the reduction of the attack surface of procfs side-channel attacks and highlights the need for continued research in this area.