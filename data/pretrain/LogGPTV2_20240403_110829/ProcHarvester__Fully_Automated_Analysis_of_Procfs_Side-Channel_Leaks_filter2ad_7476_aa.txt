title:ProcHarvester: Fully Automated Analysis of Procfs Side-Channel Leaks
on Android
author:Raphael Spreitzer and
Felix Kirchengast and
Daniel Gruss and
Stefan Mangard
ProcHarvester: Fully Automated Analysis of Procfs Side-Channel
Leaks on Android
Raphael Spreitzer, Felix Kirchengast, Daniel Gruss, and Stefan Mangard
Graz University of Technology
ABSTRACT
The procfs has been identified as a viable source of side-channel
information leaks on mobile devices. Starting with Android M (An-
droid 6), access to the procfs has been continuously restricted in
order to cope with these attacks. Yet, more recent papers demon-
strated that even if access to process-specific information is re-
stricted within the procfs, global statistics can still be exploited.
However, with state-of-the-art techniques, the search for procfs
information leaks requires a significant amount of manual work.
This makes an exhaustive analysis of existing and newly introduced
procfs resources in terms of information leaks impractical.
We introduce ProcHarvester, a systematic and fully automated
technique to assess procfs information leaks. ProcHarvester au-
tomatically triggers events of interest and later on applies machine
learning techniques to identify procfs information leaks. We demon-
strate the power of ProcHarvester by identifying information
leaks to infer app starts from a set of 100 apps with an accuracy of
96% on Android N (Android 7). Thereby, we outperform the most
accurate app inference attack by about 10 percentage points. We
also demonstrate the ease of applicability of ProcHarvester by
showing how to profile other events such as website launches as
well as keyboard gestures, and we identify the first procfs side
channels on Android O (Android 8). ProcHarvester advances
investigations of procfs information leaks to the next level and will
hopefully help to reduce the attack surface of side-channel attacks.
CCS CONCEPTS
• Security and privacy → Mobile platform security;
KEYWORDS
Android; automatic analysis; procfs; side-channel analysis
ACM Reference Format:
Raphael Spreitzer, Felix Kirchengast, Daniel Gruss, and Stefan Mangard.
2018. ProcHarvester: Fully Automated Analysis of Procfs Side-Channel
Leaks on Android. In ASIA CCS ’18: 2018 ACM Asia Conference on Computer
and Communications Security, June 4–8, 2018, Incheon, Republic of Korea.
ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3196494.3196510
1 INTRODUCTION
Side-channel attacks exploit information leaks of computing plat-
forms in order to learn sensitive information about users as well
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in ASIA CCS ’18:
2018 ACM Asia Conference on Computer and Communications Security, June 4–8, 2018,
Incheon, Republic of Korea, https://doi.org/10.1145/3196494.3196510.
as their computing devices and the processed data. Especially side-
channel attacks on mobile devices have gained particular attention
and manifold attack possibilities have been suggested to extract
secret keys from cryptographic implementations, to bypass security
mechanisms, to infer keyboard input and user behavior, etc. Exist-
ing attacks range from, for example, sensor-based keyloggers [5,
6, 16, 22, 25], via micro-architectural attacks [15, 26, 29, 30, 37],
to attacks exploiting information leaks from the virtual file sys-
tem mounted under /proc/ (procfs) [14, 18, 24, 34]. Especially the
procfs has been identified as an apparently unlimited source of
information leaks. For example, procfs information has been used
to infer inter-keystroke timings [35], keyboard input [24], unlock
patterns [12], user identities and diseases [38], a user’s location [18],
visited websites [14, 27], and user interfaces [7, 12, 34].
A fundamental weakness of the procfs is the availability of
process-specific information, e.g., in /proc/uid_stat//*,
and /proc//*. As the majority of procfs side-channel attacks
exploit per-process information, access to procfs resources has been
continuously restricted since Android M (Android 6). Although
these restrictions mitigate attacks that exploit process-specific in-
formation (/proc//*), newer attacks exploit global procfs
information that is still available. For instance, Simon et al. [24]
inferred swipe input on soft-keyboards by exploiting interrupt infor-
mation (/proc/interrupts) and the number of context switches
(/proc/stat). Diao et al. [12] inferred unlock patterns and running
applications (apps) via interrupt statistics. As of Android O (An-
droid 8) access to global interrupt statistics has also been removed.
This trend illustrates the arms race between OS designers aiming
to reduce the attack surface and attackers aiming to find new infor-
mation leaks. Furthermore, as claimed in many of these papers, the
identified information leaks represent just the tip of the iceberg and
more information leaks are yet to be discovered. Therefore, we aim
for a systematic analysis of procfs information leaks. We introduce
ProcHarvester,1 a tool that automatically profiles procfs informa-
tion for events of interest. More specifically, ProcHarvester finds
correlations between events of interest and procfs information.
We demonstrate the applicability of ProcHarvester by auto-
matically identifying new as well as existing information leaks. As
a proof of concept, we analyze app inference attacks. ProcHar-
vester automatically launches applications of interest and simulta-
neously samples procfs resources. In this setting, ProcHarvester
outputs a list of procfs files and properties that can be exploited in
side-channel attacks to infer app launches. We compare our results
to existing app inference attacks and show that the side channels
found by ProcHarvester outperform existing attacks. The identi-
fied information leaks allow to infer app starts from a set of 100 apps
with an accuracy of 96% on Android 7, which increases the most
1We responsibly disclosed our findings to Google. The ProcHarvester framework is
available at: https://github.com/IAIK/ProcHarvester.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
R. Spreitzer, F. Kirchengast, D. Gruss, and S. Mangard
accurate attack so far [12] by about 10 percentage points. Besides,
we demonstrate how ProcHarvester can be used to systematically
search for information leaks that allow to infer visited websites, as
well as keyboard gestures on soft-keyboards. These examples are by
no means exhaustive, but illustrate the power of ProcHarvester.
Contributions. Our contributions are as follows:
(1) We introduce ProcHarvester, a fully automated technique
to find procfs leaks, even on already hardened Android sys-
tems, and identify exploitable side-channel leaks on Android
N (Android 7) as well as the new Android O (Android 8).
(2) We demonstrate the generic methodology of ProcHarvester
by automatically detecting procfs information leaks that allow
to infer sensitive events such as app starts, website launches,
and soft-keyboard gestures.
(3) We reveal new attack surfaces within the procfs that allow to
precisely infer application launches and thereby outperform
the most accurate state-of-the-art attacks.
Outline. In Section 2, we discuss the procfs and related work. In
Section 3, we discuss the principle of automatically profiling the
procfs with ProcHarvester. In Section 4, we demonstrate how
to profile the procfs for information leaks that allow to infer app
starts and we evaluate the identified procfs leaks. In Section 5
and Section 6, we show how to use ProcHarvester to profile
website launches and keyboard gestures. In Section 7, we discuss
countermeasures, how ProcHarvester helps to reduce the attack
surface of procfs side-channel attacks as well as limitations and the
performance of our framework. Finally, we conclude in Section 8.
2 BACKGROUND AND RELATED WORK
2.1 The Linux procfs
The process information file system (procfs) is a virtual file system
mounted under /proc/ on Linux-based operating systems, includ-
ing Android. As the name suggests, it provides information about
processes running on the system. For example, information about
shared memory is available via /proc//statm for a given
process ID (), and network traffic statistics are available via
/proc/uid_stat//[tcp_rcv|tcp_snd] for a given user ID
(). Since Android apps are assigned a user ID (uid) during
the installation, and a process ID (pid) identifies an executed pro-
cess, these resources provide per-application information. Besides
per-application information, the procfs also provides global infor-
mation which is considered innocuous, e.g., statistical information
about processed interrupts on the system via /proc/interrupts.
In addition to the procfs, Linux-based operating systems provide in-
formation about the hardware and the device via the sysfs (/sys/).
procfs Restrictions. Since Android 4.3, SELinux [4] further re-
stricts apps by means of mandatory access control (MAC), which
allows more fine-grained access control policies than discretionary
access control (DAC). In general, third-party apps are associated
with the label untrusted_app, and system apps are associated with
the label system_app. Since Android M (Android 6),2 apps running
as untrusted_app have been restricted to access only /proc/ en-
tries of other apps running with label untrusted_app. Starting with
Android N (Android 7)3 the procfs is mounted with hidepid=2, i.e.,
processes cannot access /proc//* for a pid other than their
own. In Android O (Android 8) the procfs is restricted even further,
e.g., /proc/interrupts is not available anymore.
2.2 Related Work
Side-channel attacks on mobile devices exploit shared resources,
e.g., sensors [5, 6, 19, 22, 25, 33] or microarchitectural compo-
nents [15, 26, 29, 30, 37], to infer sensitive information such as
keystrokes and keyboard input as well as cryptographic keys. Other
well-known attacks include the exploitation of sensor information
to infer a user’s location and traveling patterns [13, 21], to finger-
print devices [9–11, 39], and to eavesdrop conversations [17]. As
the set of information leaks on mobile devices is quite diverse, we
refer to [28] for a survey of side-channel attacks on mobile devices.
In this work, we focus on the exploitation of procfs interfaces.
We discuss side-channel attacks that exploit procfs interfaces below.
Keylogging and Unlock Pattern Attacks. Zhang and Wang [35]
published one of the first papers exploiting the procfs. They ob-
served that the stack pointer (ESP) in /proc//stat allows to
monitor inter-keystroke timings. Simon et al. [24] inferred swipe
input on soft-keyboards running on Android ≥ 4.4 by exploiting
global interrupt statistics available via /proc/interrupts. Further-
more, Diao et al. [12] presented an attack to infer unlock patterns
by also exploiting touchscreen interrupt statistics on Android 5.1.1.
Inference of User Information. Jana and Shmatikov [14] ex-
ploited the memory footprint (/proc//statm) and the num-
ber of context switches (/proc//status) of the browser to in-
fer visited websites. Zhou et al. [38] inferred diseases by monitoring
traffic statistics (/proc/uid_stat//[tcp_rcv|tcp_snd]) of
applications, and Spreitzer et al. [27] inferred visited websites based
on the traffic statistics of the browser.
Michalevsky et al. [18] observed that the power consumption
(/sys/class/power_supply/battery/*) correlates with the cel-
lular signal strength, which allows to infer a user’s location.
Application and Activity Inference. Chen et al. [7] proposed
a user interface (UI) inference attack that exploits the size of the
shared memory of specific apps (/proc//statm). Since shared
memory is used for the communication between an app and the
process that updates the frame buffer, the size of the shared memory
indicates activity transitions. Subsequently, they rely on the CPU
utilization time (/proc//stat), the size of transmitted net-
work packets (/proc/uid_stat//tcp_snd), and destination
IP addresses (proc/net/tcp6) to infer the activity. They relied on
Android 4.2 and considered 7 different apps. Similarly, Yan et al. [34]
inferred apps and activities by exploiting the power consumption
(/sys/class/power_supply/battery/*). They were able to dis-
tinguish 3 different apps as well as 3 activities within the Amazon
app on Android 4.4. Recently, Diao et al. [12] exploited the interrupt
counter of the display sub-system (MDSS) (/proc/interrupts) to
infer running apps. They collected training data for 100 apps and
randomly selected 10 apps for their attack. For these 10 apps they
report a success rate of 87% on Android 5.1.
2android-review.googlesource.com/#/c/105337/.
3android-review.googlesource.com/#/c/181345/.
ProcHarvester
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Table 1: Devices used for the practical experiments.
Device
One Plus 3T
Sony Xperia Z5
Emulator (Nexus 5X) Android 8.0 (Developer preview)
Operating system
Android 7.1.1 (LineageOS)
Android 7.0 (Stock ROM)
Figure 1: Basic design and work flow of ProcHarvester.
As discussed in Section 2.1, access to /proc// and /sys/
has been restricted in Android 7.4 Therefore, more recent attacks [12,
24] exploit global procfs information, e.g., /proc/interrupts, but
Android 8 also restricts access to global interrupt information.
2.3 Test Devices
For the practical experiments, we rely on the Android devices as
shown in Table 1. We explicitly focus on Android 7 as it already
restricts many of the previously exploited information leaks and in-
vestigations on Android 7 are quite scarce. Furthermore, we provide
first insights about side-channel leaks on the new Android 8.
3 THE PROCHARVESTER FRAMEWORK
ProcHarvester enables a systematic analysis of information leaks
by automatically profiling procfs behavior for events of interest.
Considering the attacks discussed above, ProcHarvester triggers
specific events—e.g., app starts, website launches, keystrokes, etc.—
and scans the procfs for information leaks that allow to infer the
corresponding events later on.
Template Attacks. Our approach is based on template attacks,
where templates for events of interest are modeled. Later, one ob-
serves the leaking information and infers the events by means of
these templates. The appealing benefit of this methodology is that
information leaks can be analyzed without background knowledge
of the underlying effects. Thus, this approach is perfectly suitable
for an automatic analysis of procfs leaks.
Based on template attacks, ProcHarvester finds correlations
between triggered events and procfs information, which can be
exploited for side-channel attacks. Figure 1 depicts the design of
ProcHarvester consisting of an Android app (H) and a Desktop
Suite. The Android app systematically logs procfs information. The
Desktop Suite consists of a tool to control the Android app as well
as the device via the Android Debug Bridge (ADB) [2], e.g., to
trigger events of interest, and a machine learning framework (ML)
to analyze the gathered data in terms of information leaks.
4code.google.com/p/android/issues/detail?id=208085.
ProcHarvester works in four phases: exploration phase, pro-
filing phase, analysis phase, and attack phase. The work flow of
ProcHarvester is as follows.
(1) Trigger Event: The Desktop Suite triggers events via the ADB
connection. Besides triggering events via ADB capabilities, the
framework can trigger events by other means as well, e.g., via
the MonkeyRunner [3], programmatically via the Android app
(H) itself, and events can also be triggered by a human being.
(2) Log: The Android app (H) identifies potential information leaks
from procfs resources in the exploration phase. Irrespective of
the actual approach to trigger events, the Android application
continuously monitors and logs the procfs resources in the
subsequent profiling phase, i.e., while events are triggered.
(3) Fetch Data: After the events have been triggered, the log files
are fetched to the Desktop Suite for the subsequent analysis.
(4) Analysis: In the analysis phase, the gathered time series are
analyzed for possible correlations in order to identify informa-
tion leaks that allow to infer the triggered events. The output is
a list of resources that can be exploited in side-channel attacks,
i.e., in the attack phase, to infer the triggered events.
3.1 ProcHarvester Android App
ProcHarvester runs as an IntentService in the background and
samples the procfs. Experiments on our test devices revealed a sam-
pling frequency of 200 Hz for logging about 20 procfs resources at
the same time. For a systematic and possibly exhaustive analysis of
procfs leaks, resources can be logged during subsequent executions.
Triggering Events. Events can be triggered within the ProcHar-
vester Android app directly—either programmatically or by a hu-
man being—or via the ADB shell. Naturally, when programmatically
triggering events within the Android app, dedicated permissions
might be required during the analysis phase, but no permissions
are required for the exploitation of the identified procfs leaks.
The Android app implements the CommandReceiveActivity to
handle various Intents, which are used to execute commands via the
ADB shell. More specifically, commands and optional arguments
can be passed to this activity via Extra Data supported by the Intent.
Identification of Target Resources. As we are interested in pub-
licly readable files within the procfs, we identify such files based on
file permissions. Files that seem to be publicly readable due to the
DAC mechanism, but are further restricted due to the MAC mecha-
nism (cf. SELinux since Android 4.3) are filtered out in the profiling
phase, as they cannot be accessed by zero-permission apps.
Exploration. Before the profiling starts, the exploration phase au-
tomatically identifies possible information leaks in the targeted
procfs files. The app parses numerical values in the correspond-
ing files and keeps track of the line indices and column indices.
During this exploration phase we also trigger events of interest to
induce possible information leaks. A resource is considered in the
subsequent profiling phase if it changes with a sufficiently high
frequency, depending on a configurable threshold. The threshold
represents an optimization parameter and restricts the search space
to information leaks that are non-static. For an exploration phase of
6.5 seconds, we fixed the threshold to 10, i.e., we focus on resources
that change with a frequency of more than 10
6.5 ≈ 1.5 Hz. Hence, we
follow a more conservative approach than existing (manual) attacks,
HDesktopSuiteML>_(1)Triggerevent(2)Log(3)Fetchdata(4)AnalysisASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
R. Spreitzer, F. Kirchengast, D. Gruss, and S. Mangard
Figure 2: Strategy in single-resource mode.
which consider sampling frequencies of 10–1000 Hz [12, 18, 38], i.e.,
resources that change more frequently. Nevertheless, the threshold
could also be set to 1, resulting in a more expensive profiling phase.
Profiling. After the exploration phase, the profiling phase starts. In
this phase, time series of previously identified candidate side chan-
nels (based on the line indices and column indices) are logged to
separate files while events of interest are triggered simultaneously.
3.2 ProcHarvester Desktop Suite
The Desktop Suite consists of two parts: A tool to send ADB com-
mands and an analysis tool. This allows to automatically trigger
events of interest on the device—in case the events are not trig-
gered directly on the smartphone—and also to transfer the gathered
information to the Desktop Suite for the subsequent analysis.
Triggering Events and Sending ADB Commands. Currently,
ProcHarvester supports triggering app launches, website launches,
and tap and swipe actions. However, ProcHarvester can easily
be extended to be applicable to other events as well. Besides trig-
gering events on the device, commands allow to start and stop the
logging service, and to communicate the corresponding label of
the event to the ProcHarvester Android app in order to label the
gathered data for the analysis. All events of interest are triggered
in a randomized order to simulate a more realistic usage scenario.
Machine Learning Methodology. The Desktop Suite also ana-
lyzes the gathered information for information leaks. Therefore, it
relies on the machine learning framework scikit-learn [23]. In a pre-
processing step, we normalize time series by subtracting the mean.
Afterwards, we rely on dynamic time warping (DTW)5 to identify
similarities between gathered time series of procfs resources for the
triggered events. Given two time series X = (x1, . . . ,xn ) and Y =
(y1, . . . ,ym ) of (possibly) different lengths, DTW compares these
two time series by finding a warping path with minimal distance.
For classification purposes, a time series X is matched against other
time series Yi to find a class i, such that i = argmin DTW(X ,Yi ).
We implicitly assume that two time series originate from the same
target label (class) if they yield a low distance to each other based
on DTW. The appealing benefit of DTW is that possibly misaligned
time series can be compared (cf. [20]) without background knowl-
edge about information leaks and without human interaction.
Although supervised classifiers based on features manually iden-
tified by an expert would probably yield even better results than our
approach, we focus on a fully automated technique that does not
require any human interaction. Hence, we also investigated the use
5https://github.com/honeyext/cdtw.
Figure 3: Strategy in multi-resource mode.
of automatic feature extraction, by using tsfresh [8], in order to train
common supervised learning algorithms such as KNN classifiers
and multi-class SVMs. However, we found the accuracy of informa-
tion leaks identified through DTW to be significantly higher than
with supervised learning algorithms based on automatic feature ex-
traction. This shows that common supervised learning algorithms
cannot easily be adapted for a fully automated approach.
Analysis Modes. The analysis tool can be used in two modes,
namely single-resource mode and multi-resource mode.
(1) In single-resource mode, we evaluate the accuracy of inferring
events based on a single resource at a time. Figure 2 depicts
the basic principle. The following k-nearest-neighbor approach
is used to classify time series. We determine the top k labels
(Li) of the k events in the training data with the smallest DTW
distances to the time series to be classified, where the training
data consists of multiple time series for each event of interest
and procfs resource. Based on this list of k labels, the majority
of the reported labels is used to predict the most likely one (Pi).
(2) In multi-resource mode, multiple resources are evaluated simul-
taneously and the results of all resources are combined by a
majority voting to evaluate the overall performance of a specific
combination of information leaks. Figure 3 depicts this strategy.
The top k labels of each single resource are collected in a list (Li)
and the majority of the reported labels for all these resources
then determines (predicts) the event. Without prior knowledge
on the exploited information and considering possibly noisy
side channels, majority voting allows us to combine multiple
resources and to determine the most likely event. Hence, the
multi-resource mode automatically evaluates possible attacks
that exploit multiple resources at the same time.
In an actual attack one might extract more specialized features
from the identified information leaks, which might lead to even
higher accuracies. We, however, focus on a general approach to
identify information leaks automatically and do not rely on special-
ized features in order to launch fully-fledged attacks. Nevertheless,
the generic approach of DTW allows us to automatically identify
information leaks and to launch sophisticated generic side-channel
attacks based on the identified information leaks.
Summary of Methodology. An important advantage of ProcHar-
vester is that a thorough understanding of the actual information
leak is not necessary to detect it. Our proposed methodology iden-
tifies information leaks in a fully automated fashion as we establish
Trainingdata(timeseries)Resource1Resource2···ResourcenDTWDTWDTWDTWL1={}L2={}...Ln={}P1P2...PnTrainingdata(timeseries)Resource1Resource2···ResourcenDTWDTWDTWDTWL1={}L2={}...Ln={}MajorityvotingPProcHarvester
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
Figure 4: Information leaks (nr_mapped, pgfault, and kgsl3do) for Gmail and Youtube.
templates—for events of interest—which are then used to identify in-
formation leaks. Due to this automatic approach, ProcHarvester
allows to quickly analyze possible attacks on different Android
versions, e.g., AOSP as well as vendor-specific ones. In this work,
we focus on events of interest that are already known, i.e., already
known attacks, to demonstrate the power of ProcHarvester.
4 APPLICATION INFERENCE
To demonstrate the applicability of ProcHarvester, we analyze
the procfs during app starts. The learned information allows us to
perform application inference attacks from an unprivileged app by
monitoring the automatically identified procfs resources.
Problem Description. Currently executed apps should be kept
secret as this information enables targeted attacks, e.g., phishing
attacks [7] that steal login credentials. Thus, Android prevents
third-party apps from learning currently executed applications. Up
to Android L (Android 5), the GET_TASKS permission allowed to ob-
tain running apps via ActivityManager.getRunningTasks() and
ActivityManager.getRecentTasks(). In Android L (Android 5),
GET_TASKS has been replaced with the permission REAL_GET_TASKS,