simulator and improve overall simulation accuracy.
There are several architectural modiﬁcations that can im-
prove Shadow’s run-time performance. The most signif-
icant improvement will enhance Shadow’s ability to run
in parallel environments, leading to faster experiments and
better utilization of hardware resources. Shadow is open-
source software that is available for download and includes
useful tools for generating and running experiments. We
feel Shadow is invaluable for understanding and evaluating
Tor, hope that it will be useful to others in their research,
and hope it will make a lasting impact on the community.
Acknowledgments. We thank John Geddes for assistance
with Shadow plug-ins; Eric Chan-Tin, Denis Foo Kune,
and Max Schuchard for discussions about Shadow’s design;
Chris Wacek for usability feedback; Roger Dingledine for
insightful analysis of results; and Yongdae Kim, Nick Math-
ewson, and Paul Syverson for wisdom and encouragement.
This research was supported by NFS grant CNS-0917154,
ONR, and DARPA.
References
[1] A. Acquisti, R. Dingledine, and P. Syverson. On the eco-
In Proceedings of the 7th Inter-
nomics of anonymity.
national Conference on Financial Cryptography (FC’03),
2003.
[2] M. AlSabah, K. Bauer, I. Goldberg, D. Grunwald, D. Mc-
Coy, S. Savage, and G. Voelker. DefenestraTor: Throw-
In Proceedings of the 11th In-
ing out Windows in Tor.
ternational Symposium on Privacy Enhancing Technologies
(PETS’11), 2011.
[3] K. Bauer, D. McCoy, D. Grunwald, T. Kohno, and D. Sicker.
Low-resource routing attacks against Tor. In Proceedings of
the 6th ACM Workshop on Privacy in the Electronic Society
(WPES’07), pages 11–20, 2007.
[4] K. Bauer, M. Sherr, D. McCoy, and D. Grunwald. Experi-
mentor: A testbed for safe and realistic tor experimentation.
In the 4th Workshop on Cyber Security Experimentation and
Test (CSET’11), 2011.
[5] T. Benzel, R. Braden, D. Kim, C. Neuman, A. Joseph,
K. Sklower, R. Ostrenga, and S. Schwab. Design, deploy-
In Proceedings of
ment, and use of the DETER testbed.
the DETER Community Workshop on Cyber Security Exper-
imentation and Test, 2007.
[6] S. Chakravarty, A. Stavrou, and A. Keromytis. Trafﬁc analy-
sis against low-latency anonymity networks using available
In Computer Security – ESORICS,
bandwidth estimation.
pages 249–267, 2010.
[7] B. Chun, D. Culler, T. Roscoe, A. Bavier, L. Peterson,
M. Wawrzoniak, and M. Bowman. Planetlab: an overlay
testbed for broad-coverage services. SIGCOMM Computer
Communication Review, 33:3–12, 2003.
[8] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
second-generation onion router. In Proceedings of the 13th
USENIX Security Symposium, 2004.
[9] N. Evans, R. Dingledine, and C. Grothoff. A practical con-
gestion attack on Tor using long paths. In Proceedings of the
18th USENIX Security Symposium, pages 33–50, 2009.
[10] D. Foo Kune, T. Malchow, J. Tyra, N. Hopper, and Y. Kim.
The Distributed Virtual Network for High Fidelity Large
Scale Peer to Peer Network Simulation. Technical Report
10-029, University of Minnesota, 2010.
[11] D. M. Goldschlag, M. G. Reed, and P. F. Syverson. Hiding
Routing Information. In Proceedings of Information Hiding
Workshop (IH’96), pages 137–150, 1996.
[12] F. Hernandez-Campos, K. Jeffay, and F. Smith. Track-
In The 11th
ing the evolution of web trafﬁc: 1995-2003.
IEEE/ACM International Symposium on Modeling, Analy-
sis, and Simulation of Computer Telecommunications Sys-
tems (MASCOTS’03), pages 16–25, 2003.
[13] N. Hopper, E. Vasserman, and E. Chan-Tin. How much
anonymity does network latency leak? ACM Transactions
on Information and System Security (TISSEC’10), 13(2):1–
28, 2010.
[14] The Iperf bandwidth measurement tool. http://iperf.
sourceforge.net/.
[15] R. Jansen, N. Hopper, and Y. Kim. Recruiting new Tor re-
lays with BRAIDS. In Proceedings of the 17th ACM Confer-
ence on Computer and Communications Security (CCS’10),
pages 319–328, 2010.
[16] C. Kiddle. Scalable network emulation. PhD thesis, Univer-
sity of Calgary, 2004.
[17] The Libevent event notiﬁcation library, version 2.0. http:
//monkey.org/˜provos/libevent/.
[18] S. Lin, A. Pan, Z. Zhang, R. Guo, and Z. Guo. Wids: an in-
tegrated toolkit for distributed system development. In Pro-
ceedings of the 10th conference on Hot Topics in Operating
Systems (HOTOS’05), 2005.
[19] J. D. Little
and S. C. Graves.
Little’s Law.
web.mit.edu/sgraves/www/papers/Little’
s%20Law-Published.pdf, 2008.
2011.
Accessed July,
[20] K. Loesing. Measuring the Tor network: Evaluation of client
requests to directories. Technical report, Tor Project, 2009.
[21] The MaxMind GeoIP Lite country database. http://
www.maxmind.com/app/geolitecountry.
[22] D. Mccoy, K. Bauer, D. Grunwald, T. Kohno, and D. Sicker.
Shining light in dark places: Understanding the Tor net-
In Proceedings of the 8th International Symposium
work.
on Privacy Enhancing Technologies (PETS’08), pages 63–
76, 2008.
[23] J. McLachlan and N. Hopper. On the risks of serving when-
ever you surf: vulnerabilities in Tor’s blocking resistance de-
sign. In Proceedings of the 8th ACM Workshop on Privacy
in the Electronic Society (WPES’09), pages 31–40, 2009.
[24] S. Murdoch and G. Danezis. Low-cost trafﬁc analysis of
In IEEE Symposium on Security and Privacy, pages
Tor.
183–195, 2005.
[25] S. Murdoch and R. Watson. Metrics for security and perfor-
In Proceedings
mance in low-latency anonymity systems.
of the 8th International Symposium on Privacy Enhancing
Technologies (PETS’08), pages 115–132, 2008.
[26] S. Naicken, A. Basu, B. Livingston, S. Rodhetbhai, and
I. Wakeman. Towards yet another peer-to-peer simulator. In
Proceedings of the 4th International Working Conference on
Performance Modelling and Evaluation of Heterogeneous
Networks (HET-NETs’06), 2006.
[27] S. Naicken, B. Livingston, A. Basu, S. Rodhetbhai, I. Wake-
man, and D. Chalmers. The state of peer-to-peer simulators
and simulations. SIGCOMM Computer Communication Re-
view, 37(2):95–98, 2007.
[28] T.-W. J. Ngan, R. Dingledine, and D. S. Wallach. Building
incentives into Tor. In The Proceedings of Financial Cryp-
tography (FC’10), 2010.
[29] The ns-2 Network Simulator. http://www.isi.edu/
nsnam/ns/.
[30] The ns-3 Network Simulator.
http://www.nsnam.
org/.
[31] The OpenSSL cryptographic library.
http://www.
openssl.org/.
[32] L. Overlier and P. Syverson. Locating hidden servers.
In
IEEE Symposium on Security and Privacy, 2006.
[33] G. OGorman and S. Blott. Large scale simulation of Tor:
In Proceedings of
Modelling a Global Passive Adversary.
the 12th Conference on Advances in Computer Science –
ASIAN, pages 48–54, 2007.
[34] J. Postel. User Datagram Protocol. RFC 768, http://
www.ietf.org/rfc/rfc768.txt, August 1980.
[35] J. Postel.
Transmission Control Protocol.
RFC 793,
http://www.ietf.org/rfc/rfc793.txt,
September 1981.
[36] J. Reardon and I. Goldberg.
Improving Tor using a TCP-
over-DTLS tunnel. In Proceedings of the 18th USENIX Se-
curity Symposium, 2009.
[37] M. Reed, P. Syverson, and D. Goldschlag. Anonymous con-
nections and onion routing. IEEE Journal on Selected Areas
in Communications, 16(4):482–494, 1998.
[38] Shadow Development Repositories. http://github.
com/shadow/.
[39] Shadow Resources. http://shadow.cs.umn.edu/.
[40] R. Snader and N. Borisov. A tune-up for Tor: Improving
security and performance in the Tor network. In Proceed-
ings of the 16th Network and Distributed Security Sympo-
sium (NDSS’08), 2008.
[41] Scalable Simulation Framework, SSFNet.
http:
//www.cc.gatech.edu/computing/compass/
pdns/index.html.
[42] C. Tang and I. Goldberg. An improved algorithm for Tor
In Proceedings of the 17th ACM Con-
circuit scheduling.
ference on Computer and Communications Security, pages
329–339, 2010.
[43] Including
network
docu-
https://gitweb.torproject.org/
extra-info
statistics
ments.
torspec.git/blob_plain?f=proposals/
166-statistics-extra-info-docs.txt.
in
[44] The TorFlow measurement tools. https://gitweb.
torproject.org/torflow.git/.
[45] The Tor Metrics Portal.
http://metrics.
torproject.org/.
[46] A. Vahdat, K. Yocum, K. Walsh, P. Mahadevan, D. Kosti´c,
J. Chase, and D. Becker. Scalability and accuracy in a large-
scale network emulator. SIGOPS Operating Systems Re-
view, 36(SI):271–284, 2002.
[47] C. Viecco. UDP-OR: A fair onion transport design. In Pro-
ceedings of Hot Topics in Privacy Enhancing Technologies
(HOTPETS’08), 2008.
Appendices
A Core Simulation Engine
Shadow is a fork of the Distributed Virtual Network
(DVN) Simulator [10]. DVN is a discrete event, multi-
process, scalable UDP-based network simulator written in
C that can simulate hundreds of thousands of nodes in a
single experiment. DVN takes a unique approach to simu-
lation by running UDP-based user applications as modules
loaded at run-time. Among DVN’s core components are the
per-process event schedulers, a process synchronization al-
gorithm, and a module subsystem. We describe the main
components but note that Foo Kune et al. [10] provide de-
tails in much greater resolution.
Discrete-event Scheduler. DVN implements a conserva-
tive, distributed scheduling algorithm (see Figure 8) that
utilizes message queues to transfer events between work-
ers. The scheduling algorithm consists of three phases: im-
porting events initiated from remote nodes, synchronizing
worker processes, and executing local node events. Dur-
ing the import phase, workers process incoming messages
containing events and store them in a custom local event
priority queue. After all messages are imported, workers
send synchronization messages (discussed below) to other
workers and ﬁnally process local events in non-decreasing
order. Incoming messages are buffered while processing lo-
cal events and handled during the next import phase.
Multi-process Synchronization. Messages between the
master and workers enable global time synchronization
throughout the simulation. Synchronized time is vital to
ensure events are executed in the correct order since a con-
servative scheduling algorithm can not revert events. By
exchanging messages, each process tracks the local time of
all other processes. A barrier is computed by taking the
minimum local time of each process and adding the min-
imum network latency between any two network nodes in
the simulation. The barrier represents the earliest possible
time that an event from one process may affect another pro-
cess. Each process may execute events in its local event
queue as long as the event execution time is earlier than the
barrier. This is called the safe execution window: any event
in this window may be safely executed without compromis-
ing the order of events (i.e. time will never jump backwards
to execute a past event). Barriers are dynamically updated
as new synchronization messages update local times. Fu-
ture events are allowed to execute as the barrier progresses
through time. This synchronization approach allows the dis-
tribution of events to multiple processes.
Module Subsystem. DVN contains a subsystem for dy-
namically loading modules. Modules, pieces of code that
are run by nodes, are generally created by porting applica-
Figure 8: Main loop and conservative multi-process synchroniza-
tion using dynamic barriers. Safe execution windows are calcu-
lated using the minimum local worker time plus the minimum sim-
ulated latency between nodes. The barrier is dynamically pushed
as local times advance.
tion code to use DVN network calls and implementing spe-
cial functions required by DVN. The special functions allow
modules to receive event callback notiﬁcations from DVN.
Although each module may be run by several nodes, mod-
ule libraries are only loaded into memory once. In order to
support multiple nodes running the same module, DVN re-
quires each module to register all variable application state.
Using the registered memory addresses, DVN may properly
load variables before passing execution control to the mod-
ule, and unload and save variables after regaining control.
B Circuit Scheduler Performance
In Section 6, we showed results for web client respon-
siveness and overall performance for both web and bulk
clients with different circuit schedulers under different net-
work loads. In Figure 9 we show that responsiveness for
bulk clients follow the same pattern as previously shown
in Figure 7. (The results were obtained from the same ex-
periments described in Section 6.) Although time to ﬁrst
byte is less important for bulk clients, the results support
our conclusion that the EWMA circuit scheduling algorithm
reduces performance both under lighter loads and when the
half-life is not set correctly. Figure 10 shows performance
under an extremely lightly loaded network of 475 web and
25 bulk clients. The results support our claims in Section 6
that choice of circuit scheduler is insigniﬁcant for client per-
formance when the load on the network is too light.
(a)
(b)
(c)
Figure 9: Responsiveness for bulk clients under a varying network load of 950 web clients and (a) 25 bulk clients, (b) 50 bulk clients, and
(c) 100 bulk clients. As in Figure 7, the network is less responsive under lighter loads when using the EWMA circuit scheduler.
(a)
(b)
Figure 10: Network performance under an extremely light load of 475 web and 25 bulk clients. When the network load is too light, the
circuit scheduling algorithm has an insigniﬁcant impact on performance.
(c)
(d)
02468101214BulkTimetoFirstByte(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma9002468101214BulkTimetoFirstByte(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma9002468101214BulkTimetoFirstByte(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma9002468101214WebTimetoFirstByte(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma9002468101214BulkTimetoFirstByte(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma90051015202530WebDownloadTime(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma90050100150200BulkDownloadTime(s)0.00.20.40.60.81.0CumulativeFractionvanillaewma3ewma30ewma90