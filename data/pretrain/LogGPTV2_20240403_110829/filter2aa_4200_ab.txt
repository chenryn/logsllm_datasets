void (__fastcall __noreturn *off_210AF8)() = &opcode_89; // weak
void (__fastcall __noreturn *off_210B10)() = &opcode_11; // weak
void (__fastcall __noreturn *off_210B28)() = &opcode_73; // weak
void (__fastcall __noreturn *off_210B40)() = &opcode_68; // weak
void (__fastcall __noreturn *off_210B58)() = &opcode_0; // weak
void (__fastcall __noreturn *off_210B70)() = &opcode_54; // weak
void (__fastcall __noreturn *off_210B88)() = &opcode_9; // weak
void (__fastcall __noreturn *off_210BA0)() = &opcode_44; // weak
void (__fastcall __noreturn *off_210BB8)() = &opcode_56; // weak
void (__fastcall __noreturn *off_210BD0)() = &opcode_64; // weak
void (__fastcall __noreturn *off_210BE8)() = &opcode_15; // weak
void (__fastcall __noreturn *off_210C00)() = &opcode_36; // weak
void (__fastcall __noreturn *off_210C18)() = &opcode_10; // weak
void (__fastcall __noreturn *off_210C30)() = &opcode_16; // weak
void (__fastcall __noreturn *off_210C48)() = &opcode_107; // weak
void (__fastcall __noreturn *off_210C60)() = &opcode_42; // weak
void (__fastcall __noreturn *off_210C78)() = &opcode_2; // weak
void (__fastcall __noreturn *off_210C90)() = &opcode_45; // weak
void (__fastcall __noreturn *off_210CA8)() = &opcode_18; // weak
void (__fastcall __noreturn *off_210CC0)() = &opcode_63; // weak
void (__fastcall __noreturn *off_210CD8)() = &opcode_53; // weak
void (__fastcall __noreturn *off_210CF0)() = &opcode_101; // weak
void (__fastcall __noreturn *off_210D08)() = &opcode_119; // weak
void (__fastcall __noreturn *off_210D20)() = &opcode_98; // weak
void (__fastcall __noreturn *off_210D38)() = &opcode_49; // weak
void (__fastcall __noreturn *off_210D50)() = &opcode_77; // weak
void (__fastcall __noreturn *off_210D68)() = &opcode_59; // weak
void (__fastcall __noreturn *off_210D80)() = &opcode_22; // weak
void (__fastcall __noreturn *off_210D98)() = &opcode_78; // weak
void (__fastcall __noreturn *off_210DB0)() = &opcode_84; // weak
void (__fastcall __noreturn *off_210DC8)() = &opcode_34; // weak
void (__fastcall __noreturn *off_210DE0)() = &opcode_33; // weak
void (__fastcall __noreturn *off_210DF8)() = &opcode_93; // weak
void (__fastcall __noreturn *off_210E10)() = &opcode_112; // weak
void (__fastcall __noreturn *hunky_off_210E28)() = &opcode_70; // weak
void (__fastcall __noreturn *off_210E40)() = &opcode_8; // weak
void (__fastcall __noreturn *off_210E58)() = &opcode_90; // weak
void (__fastcall __noreturn *off_210E70)() = &opcode_26; // weak
void (__fastcall __noreturn *off_210E88)() = &opcode_109; // weak
void (__fastcall __noreturn *off_210EA0)() = &opcode_28; // weak
void (__fastcall __noreturn *off_210EB8)() = &opcode_3; // weak
void (__fastcall __noreturn *off_210ED0)() = &opcode_117; // weak
void (__fastcall __noreturn *off_210EE8)() = &opcode_108; // weak
void (__fastcall __noreturn *off_210F00)() = &opcode_14; // weak
void (__fastcall __noreturn *off_210F18)() = &opcode_55; // weak
void (__fastcall __noreturn *off_210F30)() = &opcode_30; // weak
void (__fastcall __noreturn *off_210F48)() = &opcode_35; // weak
void (__fastcall __noreturn *off_210F60)() = &opcode_123; // weak
void (__fastcall __noreturn *off_210F78)() = &opcode_6; // weak
void (__fastcall __noreturn *off_210F90)() = &opcode_114; // weak
void (__fastcall __noreturn *off_210FA8)() = &opcode_122; // weak
void (__fastcall __noreturn *off_210FC0)() = &opcode_104; // weak
void (__fastcall __noreturn *off_210FD8)() = &opcode_17; // weak
void (__fastcall __noreturn *off_210FF0)() = &opcode_113; // weak
void (__fastcall __noreturn *off_211008)() = &opcode_43; // weak
void (__fastcall __noreturn *off_211020)() = &opcode_80; // weak
void (__fastcall __noreturn *off_211038)() = &opcode_103; // weak
void (__fastcall __noreturn *off_211050)() = &opcode_27; // weak
void (__fastcall __noreturn *off_211068)() = &opcode_50; // weak
void (__fastcall __noreturn *off_211080)() = &opcode_19; // weak
void (__fastcall __noreturn *off_211098)() = &opcode_5; // weak
void (__fastcall __noreturn *off_2110B0)() = &opcode_76; // weak
void (__fastcall __noreturn *off_2110C8)() = &opcode_87; // weak
void (__fastcall __noreturn *off_2110E0)() = &opcode_118; // weak
__int64 (__fastcall *vtable_base_off_2110F8)() = &sub_5812; // weak
_UNKNOWN unk_211120; // weak
void *off_212008 = &off_212008; // weak
int *the_constants = &unk_212020;
_UNKNOWN unk_213170; // weak
char byte_213180; // weak
char pass_16_buf[1];
char some_shitty_16[16];
int xxx_0; // weak
int xxx_1; // weak
int xxx_2; // weak
int xxx_3; // weak
int helper_0; // weak
int helper_1; // weak
__int64 exception_table[123];
char our_password[49]; // idb
_UNKNOWN unk_213631; // weak
// extern _UNKNOWN __cxa_finalize; weak
//----- (0000000000004600) ----------------------------------------------------
__int64 (**init_proc())(void)
{
  __int64 (**result)(void); // rax
  result = &_gmon_start__;
  if ( &_gmon_start__ )
    result = (__int64 (**)(void))_gmon_start__();
  return result;
}
// 2136F0: using guessed type __int64 _gmon_start__(void);
//----- (0000000000004620) ----------------------------------------------------
void sub_4620()
{
  JUMPOUT(&dword_0);
}
// 0: using guessed type int dword_0;
//----- (0000000000004720) ----------------------------------------------------
#error "4726: positive sp value has been found (funcsize=3)"
//----- (0000000000004750) ----------------------------------------------------
__int64 (**sub_4750())(void)
{
  __int64 (**result)(void); // rax
  result = (__int64 (**)(void))&unk_213170;
  if ( &unk_213170 != &unk_213170 )
  {
    result = &ITM_deregisterTMCloneTable;
    if ( &ITM_deregisterTMCloneTable )
      result = (__int64 (**)(void))ITM_deregisterTMCloneTable();
  }
  return result;
}
// 2136E8: using guessed type __int64 ITM_deregisterTMCloneTable(void);
//----- (0000000000004790) ----------------------------------------------------
__int64 sub_4790()
{
  return 0LL;
}
//----- (00000000000047E0) ----------------------------------------------------
__int64 (**sub_47E0())(void)
{
  __int64 (**result)(void); // rax
  if ( !byte_213180 )
  {
    if ( &__cxa_finalize )
      _cxa_finalize(off_212008);
    result = sub_4750();
    byte_213180 = 1;
  }
  return result;
}
// 4710: using guessed type __int64 __fastcall _cxa_finalize(_QWORD);
// 212008: using guessed type void *off_212008;
// 213180: using guessed type char byte_213180;
//----- (0000000000004820) ----------------------------------------------------
__int64 sub_4820()
{
  return sub_4790();
}
//----- (000000000000482A) ----------------------------------------------------
_QWORD *run_funkies()
{
  _QWORD *v0; // rbx
  _QWORD *v1; // rbx
  _QWORD *v2; // rbx
  _QWORD *v3; // rbx
  _QWORD *v4; // rbx
  _QWORD *v5; // rbx
  _QWORD *v6; // rbx
  _QWORD *v7; // rbx
  _QWORD *v8; // rbx
  _QWORD *v9; // rbx
  _QWORD *v10; // rbx
  _QWORD *v11; // rbx
  _QWORD *v12; // rbx
  _QWORD *v13; // rbx
  _QWORD *v14; // rbx
  _QWORD *v15; // rbx
  _QWORD *v16; // rbx
  _QWORD *v17; // rbx
  _QWORD *v18; // rbx
  _QWORD *v19; // rbx
  _QWORD *v20; // rbx
  _QWORD *v21; // rbx
  _QWORD *v22; // rbx
  _QWORD *v23; // rbx
  _QWORD *v24; // rbx
  _QWORD *v25; // rbx
  _QWORD *v26; // rbx
  _QWORD *v27; // rbx
  _QWORD *v28; // rbx
  _QWORD *v29; // rbx
  _QWORD *v30; // rbx
  _QWORD *v31; // rbx
  _QWORD *v32; // rbx
  _QWORD *v33; // rbx
  _QWORD *v34; // rbx
  _QWORD *v35; // rbx
  _QWORD *v36; // rbx
  _QWORD *v37; // rbx
  _QWORD *v38; // rbx
  _QWORD *v39; // rbx
  _QWORD *v40; // rbx
  _QWORD *v41; // rbx
  _QWORD *v42; // rbx
  _QWORD *v43; // rbx
  _QWORD *v44; // rbx
  _QWORD *v45; // rbx
  _QWORD *v46; // rbx
  _QWORD *v47; // rbx
  _QWORD *v48; // rbx
  _QWORD *v49; // rbx
  _QWORD *v50; // rbx
  _QWORD *v51; // rbx
  _QWORD *v52; // rbx
  _QWORD *v53; // rbx
  _QWORD *v54; // rbx
  _QWORD *v55; // rbx
  _QWORD *v56; // rbx
  _QWORD *v57; // rbx
  _QWORD *v58; // rbx
  _QWORD *v59; // rbx
  _QWORD *v60; // rbx
  _QWORD *v61; // rbx
  _QWORD *v62; // rbx
  _QWORD *v63; // rbx
  _QWORD *v64; // rbx
  _QWORD *v65; // rbx
  _QWORD *v66; // rbx
  _QWORD *v67; // rbx
  _QWORD *v68; // rbx
  _QWORD *v69; // rbx
  _QWORD *v70; // rbx
  _QWORD *v71; // rbx
  _QWORD *v72; // rbx
  _QWORD *v73; // rbx
  _QWORD *v74; // rbx
  _QWORD *v75; // rbx
  _QWORD *v76; // rbx
  _QWORD *v77; // rbx
  _QWORD *v78; // rbx
  _QWORD *v79; // rbx
  _QWORD *v80; // rbx
  _QWORD *v81; // rbx
  _QWORD *v82; // rbx
  _QWORD *v83; // rbx
  _QWORD *v84; // rbx
  _QWORD *v85; // rbx
  _QWORD *v86; // rbx
  _QWORD *v87; // rbx
  _QWORD *v88; // rbx
  _QWORD *v89; // rbx
  _QWORD *v90; // rbx
  _QWORD *v91; // rbx
  _QWORD *v92; // rbx
  _QWORD *v93; // rbx
  _QWORD *v94; // rbx
  _QWORD *v95; // rbx
  _QWORD *v96; // rbx
  _QWORD *v97; // rbx
  _QWORD *v98; // rbx
  _QWORD *v99; // rbx
  _QWORD *v100; // rbx
  _QWORD *v101; // rbx
  _QWORD *v102; // rbx
  _QWORD *v103; // rbx
  _QWORD *v104; // rbx
  _QWORD *v105; // rbx
  _QWORD *v106; // rbx
  _QWORD *v107; // rbx
  _QWORD *v108; // rbx
  _QWORD *v109; // rbx
  _QWORD *v110; // rbx
  _QWORD *v111; // rbx
  _QWORD *v112; // rbx
  _QWORD *v113; // rbx
  _QWORD *v114; // rbx
  _QWORD *v115; // rbx
  _QWORD *v116; // rbx
  _QWORD *v117; // rbx
  _QWORD *v118; // rbx
  _QWORD *v119; // rbx
  _QWORD *v120; // rbx
  _QWORD *v121; // rbx
  _QWORD *v122; // rbx
  _QWORD *result; // rax
  v0 = (_QWORD *)operator new(8uLL);
  funky_0(v0);
  exception_table[70] = (__int64)v0;
  v1 = (_QWORD *)operator new(8uLL);
  funky_1(v1);
  exception_table[14] = (__int64)v1;
  v2 = (_QWORD *)operator new(8uLL);
  sub_AD40(v2);
  exception_table[120] = (__int64)v2;
  v3 = (_QWORD *)operator new(8uLL);
  sub_AD6A(v3);
  exception_table[26] = (__int64)v3;
  v4 = (_QWORD *)operator new(8uLL);
  sub_AD94(v4);
  exception_table[56] = (__int64)v4;
  v5 = (_QWORD *)operator new(8uLL);
  sub_ADBE(v5);
  exception_table[18] = (__int64)v5;
  v6 = (_QWORD *)operator new(8uLL);
  sub_ADE8(v6);
  exception_table[103] = (__int64)v6;
  v7 = (_QWORD *)operator new(8uLL);
  sub_AE12(v7);
  exception_table[61] = (__int64)v7;
  v8 = (_QWORD *)operator new(8uLL);
  sub_AE3C(v8);
  exception_table[89] = (__int64)v8;
  v9 = (_QWORD *)operator new(8uLL);
  sub_AE66(v9);
  exception_table[86] = (__int64)v9;
  v10 = (_QWORD *)operator new(8uLL);
  sub_AE90(v10);
  exception_table[60] = (__int64)v10;
  v11 = (_QWORD *)operator new(8uLL);
  sub_AEBA(v11);
  exception_table[16] = (__int64)v11;
  v12 = (_QWORD *)operator new(8uLL);
  sub_AEE4(v12);
  exception_table[79] = (__int64)v12;
  v13 = (_QWORD *)operator new(8uLL);
  sub_AF0E(v13);
  exception_table[72] = (__int64)v13;
  v14 = (_QWORD *)operator new(8uLL);
  sub_AF38(v14);
  exception_table[82] = (__int64)v14;
  v15 = (_QWORD *)operator new(8uLL);
  sub_AF62(v15);
  exception_table[100] = (__int64)v15;
  v16 = (_QWORD *)operator new(8uLL);
  sub_AF8C(v16);
  exception_table[101] = (__int64)v16;
  v17 = (_QWORD *)operator new(8uLL);
  sub_AFB6(v17);
  exception_table[119] = (__int64)v17;
  v18 = (_QWORD *)operator new(8uLL);
  sub_AFE0(v18);
  exception_table[23] = (__int64)v18;
  v19 = (_QWORD *)operator new(8uLL);
  sub_B00A(v19);
  exception_table[68] = (__int64)v19;
  v20 = (_QWORD *)operator new(8uLL);
  sub_B034(v20);
  exception_table[78] = (__int64)v20;
  v21 = (_QWORD *)operator new(8uLL);
  sub_B05E(v21);
  exception_table[76] = (__int64)v21;
  v22 = (_QWORD *)operator new(8uLL);
  sub_B088(v22);
  exception_table[102] = (__int64)v22;
  v23 = (_QWORD *)operator new(8uLL);
  sub_B0B2(v23);
  exception_table[6] = (__int64)v23;
  v24 = (_QWORD *)operator new(8uLL);
  sub_B0DC(v24);
  exception_table[123] = (__int64)v24;
  v25 = (_QWORD *)operator new(8uLL);
  sub_B106(v25);
  exception_table[22] = (__int64)v25;
  v26 = (_QWORD *)operator new(8uLL);
  sub_B130(v26);
  exception_table[8] = (__int64)v26;