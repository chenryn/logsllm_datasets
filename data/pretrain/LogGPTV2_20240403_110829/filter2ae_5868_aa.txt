**作者：[cq674350529](https://cq674350529.github.io/2021/03/19/Netgear-R6400v2-%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/
"cq674350529")  
本文首发于信安之路，原文链接：**
### 漏洞简介
2020年6月，`ZDI`发布了一个关于`Netgear
R6700`型号设备上堆溢出漏洞的[安全公告](https://www.zerodayinitiative.com/advisories/ZDI-20-709/)，随后又发布了一篇关于该漏洞的[博客](https://www.zerodayinitiative.com/blog/2020/6/24/zdi-20-709-heap-overflow-in-the-netgear-nighthawk-r6700-router)，其中对该漏洞进行了详细分析，并给出了完整的漏洞利用代码。该漏洞存在于对应设备的`httpd`组件中，在处理配置文件上传请求时，由于对请求内容的处理不当，在后续申请内存空间时存在整数溢出问题，从而造成堆溢出问题。攻击者利用这一漏洞可以在目标设备上实现代码执行，且无需认证。
此前，关于`IoT`设备上公开的带完整漏洞利用的堆溢出漏洞比较少(好像公开的堆溢出漏洞就不多…)，正好手边有一个`R6400v2`型号的设备，因此打算分析一下该漏洞，了解漏洞利用的思路，并尝试基于`R6400v2`型号设备实现漏洞利用。
### 漏洞分析
根据`Netgear`官方的[安全公告](https://kb.netgear.com/000061982/Security-Advisory-for-Multiple-Vulnerabilities-on-Some-Routers-Mobile-Routers-Modems-Gateways-and-Extenders)，针对`R6400v2`型号设备，版本`v1.0.4.84`及其之前版本受该漏洞影响，在之后的版本中修复了该漏洞，因此选择`v1.0.4.84`版本来对该漏洞进行分析。
`ZDI`的[博客](https://www.zerodayinitiative.com/blog/2020/6/24/zdi-20-709-heap-overflow-in-the-netgear-nighthawk-r6700-router)中已经对该漏洞进行了分析，故这里简单说明下。该漏洞存在于`httpd`组件的`http_d()`函数中，在处理配置文件上传请求时(接口为`"/backup.cgi"`)，在`(1)`处会调用`recv()`读取数据，第一次读取完数据后，程序流程会到达`(2)`处，对请求头中的部分字段进行判断。之后会再次调用`recv()`读取数据，之后程序流程会到达`(3)`处。之后在`(4)`处计算请求头中`"Content-Length"`字段对应的值，基于该值，在`(5)`处计算实际的文件内容长度。在`(6)`处会根据计算得到的文件内容大小申请内存空间，在`(7)`处调用`memcpy()`进行拷贝。
存在该漏洞的原因在于，在计算请求头中`"Content-Length"`字段对应的值时，通过调用`stristr(s1, "Content-Length:
")`来定位其位置，当在请求`url`中包含`"Content-Length:
"`时，可使得计算的值错误，从而影响后续申请的堆块大小。通过伪造合适的`"Content-Length:
xxx"`，可造成后续在调用`memcpy()`时出现堆溢出。该漏洞的发现者`d4rkn3ss`给出的请求`url`为`"/cgi-bin/genie.cgi?backup.cgiContent-Length: 4156559"`。
> 同样，由于在`R6400v2`设备上存在`nginx`代理，`nginx`会保证请求头中的`Content-> Length`对应的值与请求体的内容长度相等，故无法通过直接伪造原始请求头中的`Content-Length`触发。
    int http_d(int a1)
    {
      // ...
      if ( v248.s_addr ) {
        // ...
        while ( 1 ) {
          while ( 1 ) {
            while ( 1 ) {
              while ( 1 ) {
                do
                {
                  // ...
                  if ( (((unsigned int)v223[0].__fds_bits[(unsigned int)dword_F253F4 >> 5] >> (dword_F253F4 & 0x1F)) & 1) != 0
                    || (v92 = dword_1994EC) != 0 )
                  {
                    var_recv_len = my_read(dword_F253F4, &recv_buf, 0x400u); // (1) recv(), 请求过长的话会被调用多次
                    // ...
                  }
                  v152 = v198;
                  goto LABEL_395;
                }
                while ( var_recv_len == -2 );
                if ( v150 )
                  break;
                v144 = var_recv_len + var_offset;
                if ( (int)(var_recv_len + var_offset) >= 0x10000 )
                {
                  // ...
                }
                else
                {
                  memcpy(&s1[var_offset], &recv_buf, var_recv_len);     // (2)
                  s1[v144] = 0;
                  if ( stristr(s1, "Content-Disposition:") && stristr(s1, "Content-Length: ") && stristr(s1, "upgrade_check.cgi")
                    && (stristr(s1, "Content-Type: application/octet-stream") || stristr(s1, "MSIE 10"))
                    || stristr(s1, "Content-Disposition:") && stristr(s1, "Content-Length: ") && stristr(s1, "backup.cgi")
                    || stristr(s1, "Content-Disposition:") && stristr(s1, "Content-Length: ")&& stristr(s1, "genierestore.cgi") )
                  {
                    // ...
                    goto LABEL_356;
                  }
                  // ...
    LABEL_356:
                    v150 = 1; goto LABEL_357;
                  }
                  // ...
                }
                //...
            }
            // ...
            v107 = stristr(s1, "name=\"mtenRestoreCfg\"");      // (3)
            if ( v107 && (v108 = stristr(v107, "\r\n\r\n")) != 0 )
            {
              v109 = v108 + 4;                      // 指向文件内容
              v102 = v108 + 4 - (_DWORD)s1;         // post请求部分除文件内容之外其他部分的长度
              v110 = stristr(s1, "Content-Length: ");// 没有考虑其位置,可以在url中伪造,进而造成后续出现堆溢出
              if ( !v110 )
                goto LABEL_286;
              v111 = v110 + 15;
              v112 = stristr(v110 + 16, "\r\n") - (v110 + 16);
              v105 = 0;
              for ( i = 0; i  0x20017 )                 // post data部分的长度
              {
                v105 = stristr(s1, "\r\n\r\n") + v105 + 4 - v109;// (5) 计算文件内容的长度, 由于v105是伪造的, 故计算得到的结果会有问题
                goto LABEL_287;
              }
              // ...
            }