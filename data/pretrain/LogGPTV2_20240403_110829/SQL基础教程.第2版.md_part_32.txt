000B | 名古屋 | 0002 | 打孔器 | 500
000B | 名古屋 | 0003 | 运动T恤 | 4000
000B | 名古屋 | 0004 | 菜刀 | 3000
000B | 名古屋 | 0007 | 擦菜板 | 880
000C | 大阪 | 0006 | 叉子 | 500
000C | 大阪 | 0007 | 擦菜板 | 880
000C | 大阪 | 0003 | 运动T恤 | 4000
000C | 大阪 | 0004 | 菜刀 | 3000
000D | 福冈 | 0001 | T恤衫 | 1000
| | 0005 | 高压锅 | 6800
| | 0008 | 圆珠笔 | 100
内联结时并不存在
●外联结要点① ——选取出单张表中全部的信息
与内联结的结果相比，不同点显而易见，那就是结果的行数不一样。
内联结的结果中有13条记录，而外联结的结果中有15条记录，增加的2
条记录到底是什么呢？
● 242 第7章 集合运算
这正是外联结的关键点。多出的2条记录是高压锅和圆珠笔，这2条
记录在ShopProduct表中并不存在，也就是说，这2种商品在任何商
店中都没有销售。由于内联结只能选取出同时存在于两张表中的数据，因
此只在Product表中存在的2种商品并没有出现在结果之中。
相反，对于外联结来说，只要数据存在于某一张表当中，就能够读取
出来。在实际的业务中，例如想要生成固定行数的单据时，就需要使用外
联结。如果使用内联结的话，根据SELECT语句执行时商店库存状况的
不同，结果的行数也会发生改变，生成的单据的版式也会受到影响，而使
用外联结能够得到固定行数的结果。
虽说如此，那些表中不存在的信息我们还是无法得到，结果中高压锅
和圆珠笔的商店编号和商店名称都是NULL（具体信息大家都不知道，真
是无可奈何）。外联结名称的由来也跟NULL有关，即“结果中包含原表
中不存在（在原表之外）的信息”。相反，只包含表内信息的联结也就被
称为内联结了。
●外联结要点② ——每张表都是主表吗？
外联结还有一点非常重要，那就是要把哪张表作为主表。最终的结果
中会包含主表内所有的数据。指定主表的关键字是LEFT和RIGHT。顾
KEYWORD 名思义，使用LEFT时FROM子句中写在左侧的表是主表，使用RIGHT
●LEFT关键字
时右侧的表是主表。代码清单7-11中使用了RIGHT，因此，右侧的表，
●RIGHT关键字
也就是Product表是主表。
我们还可以像代码清单7-12这样进行改写，意思完全相同。
代码清单7-12 改写后外联结的结果完全相同
SQL Server DB2 PostgreSQL MySQL
SELECT SP.shop_id, SP.shop_name, SP.product_id, P.product_name, 
P.sale_price
FROM Product AS P LEFT OUTER JOIN ShopProduct AS SP ①
ON SP.product_id = P.product_id;
表示下一行接续本行，只是由于版面所限而换行。
特定的SQL
在Oracle中执行代码清单7-12时，请将①的部分变为“FROM ShopProduct
SP LEFT OUTER JOIN Product P”（删除掉FROM子句中的AS）。
7-2 联结（以列为单位对表进行联结） 243 ●
大家可能会犹豫到底应该使用LEFT还是RIGHT，其实它们的功能
没有任何区别，使用哪一个都可以。通常使用LEFT的情况会多一些，但
也并没有非使用这个不可的理由，使用RIGHT也没有问题。
法则7-6
外联结中使用LEFT、RIGHT来指定主表。使用二者所得到的结果完全相同。
3张以上的表的联结
通常联结只涉及2张表，但有时也会出现必须同时联结3张以上的表
的情况。原则上联结表的数量并没有限制，下面就让我们来看一下3张表
的联结吧。
首先我们创建一张用来管理库存商品的表（表7-5）。假设商品都保存
在P001和P002这2个仓库之中。
表7-5 InventoryProduct（库存商品）表
inventory_id product_id inventory_quantity
（仓库编号） （商品编号） （库存数量）
P001 0001 0
P001 0002 120
P001 0003 200
P001 0004 3
P001 0005 0
P001 0006 99
P001 0007 999
P001 0008 200
P002 0001 10
P002 0002 25
P002 0003 34
P002 0004 19
P002 0005 99
P002 0006 0
P002 0007 0
P002 0008 18
● 244 第7章 集合运算
创建该表及插入数据的SQL语句请参考代码清单7-13。
代码清单7-13 创建InventoryProduct表并向其中插入数据
-- DDL：创建表
CREATE TABLE InventoryProduct
( inventory_id CHAR(4) NOT NULL,
product_id CHAR(4) NOT NULL,
inventory_quantity INTEGER NOT NULL,
PRIMARY KEY (inventory_id, product_id));
SQL Server PostgreSQL
-- DML：插入数据
BEGIN TRANSACTION; ①
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0001', 0);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0002', 120);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0003', 200);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0004', 3);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0005', 0);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0006', 99);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0007', 999);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P001', '0008', 200);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0001', 10);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0002', 25);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0003', 34);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0004', 19);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0005', 99);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0006', 0);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0007', 0);
INSERT INTO InventoryProduct (inventory_id, product_id, inventory_quantity) 
VALUES ('P002', '0008', 18);
COMMIT;
表示下一行接续本行，只是由于版面所限而换行。
7-2 联结（以列为单位对表进行联结） 245 ●
特定的SQL
不同的DBMS的事务处理的语法也不尽相同。代码清单7-13中的DML语句在
MySQL中执行时，需要将①部分更改为“START TRANSACTION;”，在Oracle和DB2
中执行时，无需用到①的部分（请删除）。
详细内容请大家参考4-4节中的“创建事务”。
下面我们从上表中取出保存在P001仓库中的商品数量，并将该列添
加到代码清单7-11所得到的结果中。联结方式为内联结（外联结的使用方
法完全相同），联结键为商品编号（product_id）（代码清单7-14）。
代码清单7-14 对3张表进行内联结
SQL Server DB2 PostgreSQL MySQL
SELECT SP.shop_id, SP.shop_name, SP.product_id, P.product_name, 
P.sale_price, IP.inventory_quantity
FROM ShopProduct AS SP INNER JOIN Product AS P ①
ON SP.product_id = P.product_id
INNER JOIN InventoryProduct AS IP ②
ON SP.product_id = IP.product_id
WHERE IP.inventory_id = 'P001';
表示下一行接续本行，只是由于版面所限而换行。
特定的SQL
在Oracle中执行代码清单7-14时，请将①的部分变为“FROM ShopProduct SP
INNER JOIN Product P”，将②的部分变为“INNER JOIN InventoryProduct
IP”（删除掉FROM子句中的AS）。
执行结果
shop_id | shop_name | product_id | product_name | sale_price | inventory_quantity
---------+-----------+-----------+------------+----------+---------------
000A | 东京 | 0002 | 打孔器 | 500 | 120
000A | 东京 | 0003 | 运动T恤 | 4000 | 200
000A | 东京 | 0001 | T恤衫 | 1000 | 0
000B | 名古屋 | 0007 | 擦菜板 | 880 | 999
000B | 名古屋 | 0002 | 打孔器 | 500 | 120
000B | 名古屋 | 0003 | 运动T恤 | 4000 | 200
000B | 名古屋 | 0004 | 菜刀 | 3000 | 3
000B | 名古屋 | 0006 | 叉子 | 500 | 99
000C | 大阪 | 0007 | 擦菜板 | 880 | 999
000C | 大阪 | 0006 | 叉子 | 500 | 99
000C | 大阪 | 0003 | 运动T恤 | 4000 | 200
000C | 大阪 | 0004 | 菜刀 | 3000 | 3
000D | 福冈 | 0001 | T恤衫 | 1000 | 0
在代码清单7-11内联结的FROM子句中，再次使用INNER JOIN
● 246 第7章 集合运算
将InventoryProduct表也添加了进来。
FROM ShopProduct AS SP INNER JOIN Product AS P
ON SP.product_id = P.product_id
INNER JOIN InventoryProduct AS IP
ON SP.product_id = IP.product_id
通过ON子句指定联结条件的方式也没有发生改变，使用等号将作为
联结条件的Product表和ShopProduct表中的商品编号（product_
id）联结起来。由于Product表和ShopProduct表已经进行了联结，
因此这里无需再对Product表和InventoryProduct表进行联结了
（虽然也可以进行联结，但结果并不会发生改变）。
即使想要把联结的表增加到4张、5张……使用INNER JOIN进行
添加的方式也是完全相同的。
交叉联结——
CROSS JOIN
KEYWORD 接下来和大家一起学习第3种联结方式——交叉联结（CROSS JOIN）。
●交叉联结（CROSS JOIN）
其实这种联结在实际业务中并不会使用（笔者使用这种联结的次数也屈指
可数），那为什么还要在这里进行介绍呢？这是因为交叉联结是所有联结
运算的基础。
交叉联结本身非常简单，但是其结果有点麻烦。下面我们就试着将
Product表和ShopProduct表进行交叉联结（代码清单7-15）。
代码清单7-15 将两张表进行交叉联结
SQL Server DB2 PostgreSQL MySQL
SELECT SP.shop_id, SP.shop_name, SP.product_id, P.product_name
FROM ShopProduct AS SP CROSS JOIN Product AS P; ①
特定的SQL
在Oracle中执行代码清单7-15时，请将①的部分变为“FROM ShopProduct
SP CROSS JOIN Product P；”（删除掉FROM子句中的AS）。
7-2 联结（以列为单位对表进行联结） 247 ●
执行结果
shop_id | shop_name | product_id | product_name
---------+----------+----------+-------------
000A | 东京 | 0001 | T恤衫
000A | 东京 | 0002 | T恤衫
000A | 东京 | 0003 | T恤衫
000B | 名古屋 | 0002 | T恤衫
000B | 名古屋 | 0003 | T恤衫
000B | 名古屋 | 0004 | T恤衫
000B | 名古屋 | 0006 | T恤衫
000B | 名古屋 | 0007 | T恤衫
000C | 大阪 | 0003 | T恤衫
000C | 大阪 | 0004 | T恤衫
000C | 大阪 | 0006 | T恤衫
000C | 大阪 | 0007 | T恤衫
000D | 福冈 | 0001 | T恤衫
000A | 东京 | 0001 | 打孔器
000A | 东京 | 0002 | 打孔器
000A | 东京 | 0003 | 打孔器
000B | 名古屋 | 0002 | 打孔器
000B | 名古屋 | 0003 | 打孔器
000B | 名古屋 | 0004 | 打孔器
000B | 名古屋 | 0006 | 打孔器
000B | 名古屋 | 0007 | 打孔器
000C | 大阪 | 0003 | 打孔器
000C | 大阪 | 0004 | 打孔器
000C | 大阪 | 0006 | 打孔器
000C | 大阪 | 0007 | 打孔器
000D | 福冈 | 0001 | 打孔器
000A | 东京 | 0001 | 运动T恤
000A | 东京 | 0002 | 运动T恤
000A | 东京 | 0003 | 运动T恤
000B | 名古屋 | 0002 | 运动T恤
000B | 名古屋 | 0003 | 运动T恤
000B | 名古屋 | 0004 | 运动T恤
000B | 名古屋 | 0006 | 运动T恤
000B | 名古屋 | 0007 | 运动T恤
000C | 大阪 | 0003 | 运动T恤
000C | 大阪 | 0004 | 运动T恤
000C | 大阪 | 0006 | 运动T恤
000C | 大阪 | 0007 | 运动T恤
000D | 福冈 | 0001 | 运动T恤
000A | 东京 | 0001 | 菜刀
000A | 东京 | 0002 | 菜刀
000A | 东京 | 0003 | 菜刀
000B | 名古屋 | 0002 | 菜刀
000B | 名古屋 | 0003 | 菜刀
000B | 名古屋 | 0004 | 菜刀
000B | 名古屋 | 0006 | 菜刀
000B | 名古屋 | 0007 | 菜刀
000C | 大阪 | 0003 | 菜刀
000C | 大阪 | 0004 | 菜刀
000C | 大阪 | 0006 | 菜刀
000C | 大阪 | 0007 | 菜刀
000D | 福冈 | 0001 | 菜刀
● 248 第7章 集合运算
000A | 东京 | 0001 | 高压锅
000A | 东京 | 0002 | 高压锅
000A | 东京 | 0003 | 高压锅
000B | 名古屋 | 0002 | 高压锅
000B | 名古屋 | 0003 | 高压锅
000B | 名古屋 | 0004 | 高压锅