DEFCON 2007
David Hulton 
Chairman, ToorCon
Security R&D, Pico Computing, Inc.
Researcher, The OpenCiphers Project
Faster PwninG  Assured: 
New Adventures with 
FPGAs
DEFCON 2007
2007 © The OpenCiphers Project
Overview
 FPGAs – Quick Intro
 New Cracking Tools! (Since ShmooCon)
 BTCrack – Bluetooth Authentication
 WinZipCrack – WinZip AES Encryption
 New to 2007! (Since Last Defcon)
 VileFault – Mac OS-X FileVault
 jc-aircrack – WEP (FMS)
 Works in Progress
 Conclusions
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Quick Intro
 Chip with a ton of general purpose logic
 ANDs, ORs, XORs
 FlipFlops (Registers)
 BlockRAM (Cache)
 DSP48’s (ALUs)
 DCMs (Clock Multipliers)
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
 IOBs (448)
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
 IOBs
 Slices (10,752)
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
 IOBs
 Slices
 DCMs (8)
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
 IOBs
 Slices
 DCMs
 BlockRAMs (72)
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
 IOBs
 Slices
 DCMs
 BlockRAMs
 DSP48s (48)
DEFCON 2007
2007 © The OpenCiphers Project
FPGAs
 Virtex-4 LX25
 IOBs
 Slices
 DCMs
 BlockRAMs
 DSP48s
 Programmable Routing Matrix
   (~18 layers)
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
 Pairing bluetooth devices is similar to wifi 
authentication
 Why not crack the bluetooth PIN?
 Uses a modified version of SAFER+
 SAFER+ inherently runs much faster in 
hardware
 Attack originally explained and published by 
Yaniv Shaked and Avishai Wool
 Thierry Zoller originally demonstrated his 
implementation at hack.lu
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
 How it works
 Capture a bluetooth authentication
(sorry, requires an expensive protocol analyzer)
 This is what you'll see
Master
in_rand
m_comb_key
m_au_rand
m_sres
Slave
master sends a random nonce
s_comb_key
sides create key based on the pin
master sends random number 
s_res
slave hashes with E1 and replies
s_au_rand
slave sends random number
master hashes with E1 and replies
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
 Just try a PIN and if the hashes match the 
capture, it is correct
 Extremely small keyspace since most devices just 
use numeric PINs (1016)
 My implementation is command line and should 
work on all systems with or without FPGA(s)
DEFCON 2007
2007 © The OpenCiphers Project
 FPGA Implementation
 Requires implementations of E21, E22, and E1 which 
all rely on SAFER+
 Uses 16-stage pipeline version of SAFER+ which feeds 
back into itsself after each stage
 To explain, here's some psuedocode
Bluetooth PIN Cracking
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
for(pin = 0; ; pin++) {
Kinit = E22(pin, s_bd_addr, in_rand);
// determine initialization key
m_comb_key ^= Kinit;
// decrypt comb_keys
s_comb_key ^= Kinit;
m_lk = E21(m_comb_key, m_bd_addr);
// determine link key
s_lk = E21(s_comb_key, s_bd_addr);
lk = m_lk ^ s_lk;
m_sres_t = E1(lk, s_au_rand, m_bd_addr);
// verify authentication
s_sres_t = E1(lk, m_au_rand, s_bd_addr);
if(m_sres_t == m_sres && s_sres_t == s_sres)
found! 
}
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
for(pin = 0; ; pin++) {
Kinit = E22(pin, s_bd_addr, in_rand);
// determine initialization key
m_comb_key ^= Kinit;
// decrypt comb_keys
s_comb_key ^= Kinit;
m_lk = E21(m_comb_key, m_bd_addr);
// determine link key
s_lk = E21(s_comb_key, s_bd_addr);
lk = m_lk ^ s_lk;
m_sres_t = E1(lk, s_au_rand, m_bd_addr);
// verify authentication
s_sres_t = E1(lk, m_au_rand, s_bd_addr);
if(m_sres_t == m_sres && s_sres_t == s_sres)
found! 
}
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
16 PINs
16 PINs
E22
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Output loops back and SAFER+ now does
E21 for the Master
16 clock cycles later
E21
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Then does the second E21 for the Slave
and combines the keys to create the link key
16 clock cycles later
E21
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Then the first part of E1 for the Slave
16 clock cycles later
E1
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Then the second part of E1 for the Slave
16 clock cycles later
E1
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Then the first part of E1 for the Master
16 clock cycles later
E1
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Then the second part of E1 for the Master
16 clock cycles later
E1
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
PIN Gen
SAFER+
Then checks all of the sres values to see if any match
while the process starts over
16 clock cycles later
E22
Compare
SRES
Stop
N
Y
DEFCON 2007
2007 © The OpenCiphers Project
Bluetooth PIN Cracking
 If the cracker stops the computer reads back 
the last generated PIN from the pin generator to 
determine what the valid PIN was
 The last generated PIN – 16 should be the 
cracked PIN
 I built a commandline version
 Thierry Zoller integrated support into BTCrack
 I added some hollywood FX !
DEFCON 2007
2007 © The OpenCiphers Project
Performance Comparison
PC
btpincrack
3.6GHz P4      ~40,000/sec
BTCrack
3.6GHz P4      ~100,000/sec
0.24 secs to crack 4 digit
42 min to crack 8 digit
FPGA
btpincrack
LX25
~7,000,000/sec
15 Cluster
~105,000,000/sec
LX50
~10,000,000/sec
0.001 secs to crack 4 digit
10 secs to crack 8 digit
Demo
DEFCON 2007
2007 © The OpenCiphers Project
WinZip AES Encryption
 Somewhat proprietary standard
 No open source code available (until now!)
 Format
 Uses the standard ZIP format
 Adds a new compression type (99)
 Uses PBKDF2 (1000 iterations) for key derivation
 Individual files can be encrypted inside the ZIP file
 Supports 128/192/256-bit key lengths
 Uses a 16-bit verification value to verify passwords
 Otherwise you verify by using the checksum
 Uses a salt (sorry, can't do a dictionary attack!)
DEFCON 2007
2007 © The OpenCiphers Project
WinZip AES Encryption
 Cracking algorithm
 Scan through ZIP file until you find the encrypted file
 Get the 16-bit password verification value
 Hash a password with PBKDF2 and see if the 
verification value matches
 No – Try next password
 Yes – Decrypt file and see if checksum matches
 No – Try next password
 Yes – Password found!
DEFCON 2007
2007 © The OpenCiphers Project
WinZip AES Encryption
 Uses the same PBKDF2 core as the WPA and 
FileVault cracking code
 Requires extra iterations for longer key lengths
 Tool takes a ZIP file, encrypted file name, and 
dictionary file as input
DEFCON 2007
2007 © The OpenCiphers Project
Performance Comparison
PC
winzipcrack
800MHz P3
~100/sec
3.6GHz P4   
~180/sec
AMD Opteron
~200/sec
2.16GHz IntelDuo  ~200/sec
FPGA
winzipcrack
LX25
~2,000/sec
LX50
~6,000/sec
15 Cluster       ~30,000/sec
Demo
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 “FileVault secures your home directory by 
encrypting its entire contents using the 
Advanced Encryption Standard with 128-
bit keys. This high-performance algorithm 
automatically encrypts and decrypts in 
real time, so you don’t even know it’s 
happening.”
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 We wanted to know what was happening
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 Stores the home directory in a DMG file
 DMG is mounted when you login
 hdi framework handles everything
 Blocks get encrypted in 4kByte “chunks” AES-
128, CBC mode
 Keys are encrypted (“wrapped”) in header of 
disk image
 Wrapping of keys done using 3DES-EDE
 Two different header formats (v1, v2)
 Version 2 header: support for asymmetrically 
(RSA) encrypted header
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 Apple's FileVault
 Uses PBKDF2 for the password hashing
 Modified version of the WPA attack can be used 
to attack FileVault
 Just modified the WPA core to 1000 iterations 
instead of 4096
 Worked with Jacob Appelbaum & Ralf-Philip 
Weinmann to reverse engineer the FileVault 
format and encryption
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 Login password used to derive key for 
unwrapping
 PBKDF2 (PKCS#5 v2.0), 1000 iterations
 Crypto parts implemented in CDSA/CSSM
 DiskImages has own AES implementation, 
pulls in SHA-1 from OpenSSL dylib
 “Apple custom” key wrapping loosely 
according to RFC 2630 in Apple's CDSA 
provider (open source)
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 vfdecrypt (Ralf Philip-Weinmann & Jacob Appelbaum)
 Will use the same method with a correct password to 
decrypt the DMG file and output an unencrypted DMG 
file
 Result can be mounted on any system without a 
password
 vfcrack (me!)
 Unwrap the header
 Use header to run PBKDF2 with possible passphrases
 Use PBKDF2 hash to try and decrypt the AES key, if it 
doesn't work, try next passphrase
 With the AES key decrypt the beginning of the DMG file 
and verify the first sector is correct (only needed with 
v2)
DEFCON 2007
2007 © The OpenCiphers Project
VileFault
 Other attacks
 Swap
 The key can get paged to disk (whoops!)
 Encrypted swap isn't enabled by default
 Hibernation
 You can extract the FileVault key from a hibernation file
 Ring-0 code can find the key in memory
 Weakest Link
 The password used for the FileVault image is the same as 
your login password
 Salted SHA-1 is much faster to crack than PBKDF2 (1 
iteration vs 1000)
 The RSA key is easier to crack than PBKDF2
DEFCON 2007
2007 © The OpenCiphers Project
Performance Comparison
PC
vfcrack
800MHz P3
~100/sec
3.6GHz P4   
~180/sec
AMD Opteron
~200/sec
2.16GHz IntelDuo  ~200/sec
FPGA
vfcrack
LX25
~2,000/sec
LX50
~6,000/sec
15 Cluster       ~30,000/sec
Demo
DEFCON 2007
2007 © The OpenCiphers Project
jc-aircrack
 Johnny Cache added FPGA support to jc-aircrack
 Uses all of the standard aircrack statistical methods
 Helps with smaller capture files
 You can offload brute forcing the lower key byte 
possibilities to the FPGA
 Uses a new common FPGA WEP cracking library
 Performance
 Performance will vary depending on capture file
 Should typically get about 30x speed increase when 
brute forcing
Demo
DEFCON 2007
2007 © The OpenCiphers Project
Works in Progress
 GSM A5/1
 Real working open-source implementation
 We can capture GSM packets
 We can break A5/1 (using a few different methods)
 Check out our talk at the CCCamp
DEFCON 2007
2007 © The OpenCiphers Project
Conclusion
 Get an FPGA and start cracking!
 Make use if your hardware to break crypto
 <64-bit just doesn't cut it anymore
 Choose bad passwords (please!)
DEFCON 2007
2007 © The OpenCiphers Project
Hardware Used
 Pico E-12
 Compact Flash
 64 MB Flash
 128 MB SDRAM
 Gigabit Ethernet
 Optional 450MHz PowerPC 405
DEFCON 2007
2007 © The OpenCiphers Project
Hardware Used
 Pico E-12 Super Cluster
 15 - E-12’s
 2 - 2.8GHz Pentium 4’s
 2 - 120GB HDD
 2 - DVD-RW
 550 Watt Power Supply
DEFCON 2007
2007 © The OpenCiphers Project
Future Hardware
 Pico E-16
 ExpressCard 34
 Works in MacBook Pros
 2.5Gbps full-duplex
 Virtex-5 LX50 (~2x faster)
 32MB SRAM
 External ExpressCard Chip
 Made for Crypto Cracking
 More affordable
DEFCON 2007
2007 © The OpenCiphers Project
Thanks
 Johny Cache (airbase/jc-wepcrack/jc-aircrack)
 Jacob Appelbaum & Ralf-Philip Weinmann 
(FileVault)
 Thierry Zoller & Eric Sesterhenn (BTCrack)
 Viewers like you
DEFCON 2007
2007 © The OpenCiphers Project
Questions?
 David Hulton
 PI:EMAIL
 http://openciphers.sf.net
 http://www.picocomputing.com
 http://www.toorcon.org
 http://www.802.11mercenary.net