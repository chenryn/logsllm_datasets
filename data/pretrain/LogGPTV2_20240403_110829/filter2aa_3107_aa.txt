SSCTF Writeup by Nu1L 
(本报告包含了 SSCTF 所有的题目，包括比赛时为做出来的题目) 
逆向部分（Reverse） 
Re100 
这题很简单，首先判断用户名是否等于 secl-007 
然后调用动态链接库中的 getpl 函数验证 password，由于在函数中没有对 password 做处理，
因此可以忽略中间的 DES 加密，输入 39 个字符或者修改寄存器的值，在最后判断的时候下
断，动态调试下就能得到 flag 
flag 为 oty3eaP$g986iwhw32j%OJ)g0o7J.CG: 
Re200 
拿到程序打开运行，输入任意字符串后，发现一段 Bad Apple 的 MV... 动画结束后有验
证过程。 
首先查壳，发现是加过 UPX 壳的。upx -d 脱掉之后开始分析程序： 
发现在 402800 处是播放动画的代码，但其中有几条关键的 ResumeThread，于是 nop 掉动画
部分代码： 
接下来根据 ResumeThread 处的代码找到了创建线程的位置： 
继续分析这些线程，发现了验证 Flag 的位置，根据线程运行顺序可以反向写出解密代码： 
脚本： 
#!/usr/bin/env python2 
# -*- coding:utf-8 -*- 
import hashlib 
import numpy as np 
def u8(x): 
    return np.uint8(x) 
''' 
  hash[0] = -3; 
    hash[2] = -3; 
      hash[1] = -59; 
        hash[3] = -25; 
          hash[5] = -25; 
            hash[4] = -59; 
              hash[6] = -57; 
                hash[8] = -57; 
                  hash[7] = -27; 
                    hash[10] = -27; 
                      hash[9] = -35; 
                        hash[11] = -35; 
                          hash[12] = 0; 
''' 
md5res = 'FBC4A31E4E17D829CA2242B2F893481B'.lower() 
#print md5res 
d = [253,197,253,231,197,231,199,229,199,221,229,221] 
#d = [u8(c) for c in data] 
#print d 
for x in range(256): 
    p = ''.join([chr(c^x) for c in d]) 
    md5 = hashlib.new('md5') 
    for c in p: 
if ord(c) == 0: break 
md5.update(c) 
    if md5.hexdigest() == md5res: print x 
# key1 = 181 
v0 = (181 - 1)^2 
print v0 
# v0 = 182 
byte_404048 
= 
[0x57,0x78,0x7d,0x3e,0x4a,0x4c,0x5c,0x35,0x2a,0x23,0x50,0x7f,0x57,0x7
8,0x55,0x64,0x4b,0x42,0x25,0x35,0x22,0x66,0x48] 
for x2 in range(256): 
xored = [c^x2 for c in byte_404048] 
sum = 0 
for c in xored: 
if c == 0: break 
sum ^= c 
if sum == 182: 
print x2 
print '-------' 
# 152 
for x3 in range(256): 
if ((x3^0x5a)+(x3^0x42)) == 152: print x3 
print '------' 
d3 = [0xF5, 0xD0, 0xDF, 0xDC, 0x99, 0xD8, 0xD5, 0xCE, 0xD8, 0xC0, 0xCA, 
0x99, 0xD4, 0xD8, 0xD2, 0xDC, 0xCA, 0x99, 0xCC, 0xCA, 0x99, 0xDB, 0xD5, 
0xD8, 0xDA, 0xD2, 0x99, 0xD8, 0xD7, 0xDD, 0x99, 0xDB,  
0xD5, 0xCC, 0xDC, 0x95, 0xD8, 0xD7, 0xDD, 0x99, 0xCD, 0xD1, 0xD6, 0xCA, 
0xDC, 0x99, 0xCE, 0xD1,  
0xDC, 0xCB, 0xDC, 0x99, 0xCD, 0xD1, 0xDC, 0x99, 0xCE, 0xD6, 0xCC, 0xD7, 
0xDD, 0x99, 0xD1, 0xD8,  
0xDD, 0x99, 0xDB, 0xDC, 0xDC, 0xD7, 0x99, 0xCD, 0xD1, 0xDC, 0x99, 0xCA, 
0xCD, 0xCB, 0xD6, 0xD7,  
0xDE, 0xDC, 0xCA, 0xCD, 0x99, 0xCE, 0xD0, 0xD5, 0xD5, 0x99, 0xDB, 0xDC, 
0xDA, 0xD6, 0xD4, 0xDC,  
0x99, 0xD8, 0x99, 0xC9, 0xD5, 0xD8, 0xDA, 0xDC, 0x99, 0xCE, 0xD1, 0xDC, 
0xCB, 0xDC, 0x99, 0xCE,  
0xDC] 
valid = [] 
for x4 in range(256): 
d3_xored = [x4^c for c in d3] 
xor_sum = 0 
for c in d3_xored: 
if c == 0: break 
xor_sum ^= c 
if (xor_sum^0x5a)+(xor_sum^0x42) == 152: valid.append(x4) 
v = [c^0xC6 for c in valid] 
n2 = [0x88, 0xEC, 0xFC, 0x9E, 0xB9, 0xFC, 0xB3, 0xAE, 0xFC, 0x92, 0xB3, 
0xA8, 0xFC, 0x88, 0xB3, 0xFC,  
0x9E, 0xB9, 0xF0, 0x88, 0xB4, 0xBD, 0xA8, 0xFC, 0xB5, 0xAF, 0xFC, 0x88, 
0xB4, 0xB9, 0xFC, 0x8D,  
0xA9, 0xB9, 0xAF, 0xA8, 0xB5, 0xB3, 0xB2] 
v13_valid = [] 
for v13 in range(256): 
n2_xored = [v13^c for c in n2] 
n2xor_sum = 0 
for c in n2_xored: 
if c == 0: break 
n2xor_sum ^= c 
if n2xor_sum in v: v13_valid.append(v13) 
print v13_valid 
sums = [] 
for c in v13_valid: 
s3 = c ^ 0x6f 
s2 = c ^ 0x18 
s1 = c ^ 0x77 
s0 = c ^ 0x66 
if ((s0 + s1 + s2 + s3) & 0xFF) == 0xDC: 
sums.append([s0,s1,s2,s3]) 
ff = [] 
l = [0x63, 0x36, 0x37, 0x38, 0x64, 0x36, 0x67, 0x36, 0x34, 0x33, 0x30, 
0x37, 0x67, 0x66, 0x34, 0x67, 
0x60, 0x62, 0x32, 0x36, 0x33, 0x34, 0x37, 0x33, 0x67, 0x65, 0x33, 0x35, 
0x62, 0x35, 0x60, 0x39] 
for sum in sums: 
print sum 
f = [0]*32 
for i in range(4): 
s = sum[i] 
for j in range(8): 
if s & 1: f[i*8+7-j] = 1 
s >>= 1 
print f 
k = [] 
for i in range(32): 
k.append(l[i]^f[i]) 
print ''.join([chr(c) for c in k])  
''' 
l = [0x63, 0x36, 0x37, 0x38, 0x64, 0x36, 0x67, 0x36, 0x34, 0x33, 0x30, 
0x37, 0x67, 0x66, 0x34, 0x67,  
0x60, 0x62, 0x32, 0x36, 0x33, 0x34, 0x37, 0x33, 0x67, 0x65, 0x33, 0x35, 
0x62, 0x35, 0x60, 0x39] 
for i in range(32): 
l[i] ^= ff[i] 
flag = ''.join([chr(c) for c in l]) 
print flag 
flag = 'c678d6g65216fg5f`b263473fd24c4a8' 
sum0 = 0 
sum1 = 0 
sum2 = 0 
sum3 = 0 
for i in range(8): 
sum0 = sum0 * 2 + (ord(flag[i])^l[i]) 
sum1 = sum1 * 2 + (ord(flag[8+i])^l[8+i]) 
sum2 = sum2 * 2 + (ord(flag[16+i])^l[16+i]) 
sum3 = sum3 * 2 + (ord(flag[24+i])^l[24+i]) 
print sum0&0xff,sum1&0xff,sum2&0xff,sum3&0xff 
''' 
发现答案有多解，经过尝试发现 Flag 为：b669e6f65317ff5fac263573fe24b5a8 
Re300 
典型坑人题，真实的验证按钮是隐藏的。 
首先拖入 IDA 分析，发现是 MFC 写程序。于是直接上 xspy 进行分析。 
发现有两个 OnCommand 处理例程，而且 id 不相同。 
由于习惯静态分析，于是直接上 PE Explorer 
发现 id=03ec 这个按钮是存在的。 
于是直接使用 ViewWizard 修改控件属性 
捕获窗口，右键 定位到窗口列表，展开，右键捕获隐藏的按钮，点显示即可强制令其显示。 
之后就显示了 
当然，其实真正的罪魁祸首是在 0x004015D0 
调用了0x41276E这个库函数，其中调用ShowWindow将真实按钮的显示状态改成了SW_HIDE 
于是之后点击这个真正的验证按钮，就来到了 0x401FE0 这里 
然后进入验证函数 0x401F80 
在 GetBody 函数中，会首先判断输入的格式为 SSCTF{32 位}，并将前后的 SSCTF{和}去掉，保
留中间的不封。 
然后在 GetHash 部分中，会对输入进行变换 
首先寻找’0’的所在位置， 
接着按照这些已经计算出来的值进行变换，对大小写字母、数字分别处理 
发现变换后的值和所在位置无关，仅和长度和’0’所在的位置有关，所以直接复制到 vs 中输
出对应的变换。 
之后在 FinalVerify 中会进行判断和输出结果。不过出题人好狠，一个可见字符串都不给，还
用这么常见的加密手段，害的我这边数字公司一只都在拦截。。。 
继续将 hexrays 的内容拷贝到 vs 中解密，得到分别是”Pls Try ag@in!”，” Y0u G0t 1t!” 和 
“b5h760h64R867618bBwB48BrW92H4w5r” 
通过上步生成的表进行查表，得到原始内容为 f5b760b64D867618fFeF48FdE92B4e5d 
因此正确输入为 SSCTF{f5b760b64D867618fFeF48FdE92B4e5d} 
Flag 为 f5b760b64D867618fFeF48FdE92B4e5d 
附上本题脚本： 
// re300.cpp : 定义控制台应用程序的入口点。 
// 
#include "stdafx.h" 
#include "windows.h" 
#include "atlstr.h" 
int _tmain(int argc, _TCHAR* argv[]) 
{ 
char v6[12]; // [sp+8h] [bp-4Ch]@1 
char Text[15]; // [sp+14h] [bp-40h]@1 
char target[33]; // [sp+24h] [bp-30h]@1 
target[4] = 7; 
target[7] = 7; 
target[11] = 7; 
target[13] = 7; 
target[2] = 89; 
target[17] = 115; 
target[19] = 115; 
target[22] = 115; 
target[6] = 89; 
target[23] = 67; 
target[31] = 67; 
target[0] = 83; 
target[1] = 4; 
target[3] = 6; 
target[5] = 1; 
target[8] = 5; 
target[9] = 99; 
target[10] = 9; 
target[12] = 6; 
target[14] = 0; 
target[15] = 9; 
target[16] = 83; 
target[18] = 70; 
target[20] = 5; 
target[21] = 9; 
target[24] = 102; 
target[25] = 8; 
target[26] = 3; 
target[27] = 121; 
target[28] = 5; 
target[29] = 70; 
target[30] = 4; 
target[32] = 0; 
v6[6] = 100; 
v6[9] = 100; 
Text[3] = 100; 
Text[7] = 100; 
v6[0] = 73; 
v6[1] = 32; 
v6[2] = 101; 
v6[3] = 48; 
v6[4] = 87; 
v6[5] = 32; 
v6[7] = 48; 
v6[8] = 33; 
v6[10] = 49; 
v6[11] = 0; 
Text[0] = 20; 
Text[1] = 40; 
Text[2] = 55; 
Text[4] = 16; 
Text[5] = 54; 
Text[6] = 61; 
Text[8] = 37; 
Text[9] = 35; 