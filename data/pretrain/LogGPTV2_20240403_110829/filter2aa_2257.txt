# Dumart Fuzzer：让黑盒Fuzz更智能

## 作者
陈振宇  
个人安全研究员

## 背景
- 内存类漏洞在软件中占很大比例。
- Fuzzing仍然是发现内存类漏洞的重要手段。
- 对于有源代码的项目，现有的fuzzing工具已经非常成熟。
- 对于无源代码的项目（通常称为黑盒fuzz），存在许多缺点。这类fuzzing往往效率低下，缺乏路径反馈，且难以获取状态机信息。

### 黑盒Fuzz的挑战
- **状态机**：需要掌握所有CPU和内存的状态，包括指针、虚函数表等。
- **dlopen**：用于动态加载库文件。
- **QEMU/Unicorn**：模拟器虽然可以提供一定的帮助，但效率较低。
- **缺乏路径反馈**：没有路径反馈的fuzzing通常被称为“dumb fuzz”。
- **缺少地址消毒器**：如AddressSanitizer (ASAN)等工具，在黑盒fuzz中无法使用。

### 状态机的重要性
- 在大型软件中，对象间的关系错综复杂，需要满足特定条件才能运行。
- 即使有源码，设置合适的上下文进行fuzz也是一件复杂的工作。

### 如何实现简单的黑盒Fuzz
1. **核心思想**：
   - 不断运行某段代码，并对输入参数进行变异。
   - 准备好代码运行所需的上下文环境，即状态机。

2. **提高效率的方法**：
   - 利用现有的测试环境中的状态机。
   - 通过进程注入技术（如`ptrace`）直接在目标进程中注入fuzzing代码，从而获得状态机并提升效率。

### 注入原理
- 使用`ptrace`向目标进程写入二进制代码。
- 该代码调用`__libc_dlopen_mode`将目标库加载到进程空间中。
- 恢复原进程的上下文，继续执行。

### 为什么不在原进程中进行Fuzz
- 嵌入式系统可能因看门狗机制导致非漏洞重启。
- 需要启动新线程来执行fuzz任务，效率较低。
- 全局变量访问的问题。

### 快照与恢复
- **AFL**的`fork server`模式会不断生成新的进程实例。
- `persistent mode`减少`fork`开销，假设每次运行都是无状态的。
- **Dumart Fuzzer**模仿`persistent mode`保存快照以供恢复。

### 崩溃检测
- 当内存类漏洞发生时，程序通常会收到`SIGSEGV`信号。
- 注册信号处理程序接管`SIGSEGV`，并检查RIP寄存器是否唯一，以识别独特的崩溃情况。

### 路径反馈
- **路径反馈**使得fuzzing能够深入探索代码路径，发现更多潜在问题。
- 通过IDA脚本记录被测对象的所有基本块地址，并在这些地址处设置断点。
- 触发新代码块的输入作为种子保存，并恢复原始指令继续执行。

### ASAN支持
- **ASAN**是一种内存漏洞检测技术，在溢出或UAF漏洞发生时立即触发崩溃。
- 黑盒fuzz中，需要实现一个具有ASAN功能的堆，替换原有的`libc`堆。
- 通过GOT表覆盖实现堆函数的替换。

### 上溢与下溢检测
- 通过页属性设置，检测内存越界访问。
- 为每个分配的内存块准备两个相邻页面，其中一个不可读写，用于越界检测。

### UAF与双重释放检测
- **UAF**：运行一次被测片段后重新初始化堆，确保不会重用已释放的内存块。
- **双重释放**：每个内存块有一个管理结构，记录其状态（已分配/已释放）。

### 内存泄漏检测
- 在单次代码片段运行过程中，不真正释放内存，而是设置页属性为不可读写。
- 运行完成后，检查`malloc`和`free`的数量是否一致。

### Fuzzer框架
- **Dumart Fuzzer**包含多个组件：语料库、变异器、fuzzer引擎、目标程序、崩溃检测器、二进制补丁器以及GOT钩子。
- 动态patch插入断点，新路径发现则添加到语料库中。

### 工具比较
| 工具         | 路径反馈 | ASAN支持 | 效率 | 状态机获取 | 其他               |
|--------------|----------|---------|------|------------|--------------------|
| AFL-QEMU     | Edge     | QASAN   | 中   | 困难       |                    |
| AFL-Unicorn  | Edge     | 不支持  | 中   | 困难       |                    |
| Peach        | 不支持   | 不支持  | 低   | 困难       |                    |
| Dumb Fuzz    | 不支持   | 不支持  | 低   | 容易       |                    |
| Frida-Fuzzer | Edge     | 不支持  | 高   | 容易       |                    |
| Dumart Fuzzer| Block    | 支持    | 很高 | 容易       | 需要root权限的真实设备 |

### 未来工作
- 实现Edge反馈机制，参考AFL的做法。
- 支持更多架构，如ARM。
- 加入字典功能增强变异效果。

---

本文档详细介绍了如何通过改进传统的黑盒fuzz方法，使其更加高效和智能。希望这些内容能为您的研究提供有价值的参考。