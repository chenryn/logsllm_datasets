        :   替换阵列中的设备
        [`check`{.literal}]{.term}
        :   查找阵列的不一致
        [`repair`{.literal}]{.term}
        :   查找并修复不一致
        :::
    -   `raid_mismatch_count`{.literal} 字段显示在 `check`{.literal}
        操作中出现的差异数。
    -   `Cpy%Sync`{.literal} 字段显示 `sync`{.literal} 操作的进度。
    -   `lv_attr`{.literal} 字段提供额外指示。这个字段中的第 9
        位显示逻辑卷的健康状况，它支持以下指示：
        ::: itemizedlist
        -   `m`{.literal} （mismatches）表示 RAID
            逻辑卷存在差异。这个字符在 scrubbing 操作侦测到部分 RAID
            不一致时就会显示。
        -   `r`{.literal} （refresh）表示 RAID
            阵列中的某个设备有故障，且内核将其认为失败，即使 LVM
            可以读取该设备标签，且认为该设备正常运行。刷新逻辑卷通知内核该设备现在可用
            ; 如果您怀疑设备失败，则替换该设备。
        :::
    :::
:::
::: itemizedlist
**其它资源**
-   详情请查看 `lvchange(8)`{.literal} 和 `lvmraid(7)`{.literal} man
    page。
:::
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-raid-takeover-configure-manage-raid}转换 RAID 级别（RAID 接管） {.title}
:::
LVM 支持 Raid [*takeover（接管）*]{.emphasis}，这意味着将 RAID
逻辑卷从一个 RAID 级别转换成另一个 RAID 级别（比如把 RAID 5 转换到 RAID
6）。更改 RAID
级别通常是为了增加或降低设备故障或恢复逻辑卷的弹性。您可以使用
`lvconvert`{.literal} 进行 RAID 接管。有关 RAID 接管以及使用
`lvconvert`{.literal} 转换 RAID 逻辑卷的示例，请参考
`lvmraid`{.literal}(7)手册页。
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-raid-reshape-configure-manage-raid}更改 RAID 卷的属性（RAID reshape） {.title}
:::
RAID [*reshape*]{.emphasis} 意味着更改 RAID 逻辑卷的属性，但保持相同的
RAID 级别。您可以修改的一些属性包括 RAID 布局、条状大小和条带数目。有关
RAID reshape 以及使用 `lvconvert`{.literal} 命令 reshape RAID
逻辑卷的示例，请参考 `lvmraid`{.literal}(7)手册页。
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-controlling-raid-io-configure-manage-raid}在 RAID1 逻辑卷中控制 I/O 操作 {.title}
:::
您可以使用 `lvchange`{.literal} 命令中的 `--writemostly`{.literal} 和
`--writebehind`{.literal} 参数控制 RAID1 逻辑卷中的设备的 I/O
操作。使用这些参数的格式如下。
::: itemizedlist
-   `--[raid]writemostly PhysicalVolume[:{t|y|n}]`{.literal}
    将 RAID1 逻辑卷中的设备标记为
    `write-mostly`{.literal}。除非需要，避免对这些驱动器的所有读取。设置此参数会使驱动器中的
    I/O 操作数量保持最小。默认情况下，为逻辑卷中指定的物理卷将
    `write-mostly`{.literal} 属性设为 yes。可以通过在物理卷中附加
    `:n`{.literal} 或通过指定 `:t`{.literal} 来切换值来删除
    `write-mostly`{.literal} 标记。在单个命令中可指定多次
    `--writemostly`{.literal}
    参数，从而可以一次为逻辑卷中的所有物理卷切换写属性。
-   `--[raid]writebehind IOCount`{.literal}
    指定标记为 `write-mostly`{.literal} 的 RAID1
    逻辑卷中设备允许的最大未处理写入数。超过这个值后，写入就变为同步行为，在阵列指示写操作完成前，所有的写操作都需要已完成。将值设为零可清除首选项，并允许系统任意选择数值。
:::
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-changing-raid-regionsize-configure-manage-raid}在 RAID 逻辑卷中更改区域大小 {.title}
:::
当您创建 RAID 逻辑卷时，逻辑卷的区域大小将是
`/etc/lvm/lvm.conf`{.literal} 文件中的 `raid_region_size`{.literal}
参数的值。您可以使用 `-R`{.literal} 命令的 `lvcreate`{.literal}
选项覆盖默认值。
创建 RAID 逻辑卷后，您可以使用 `-R`{.literal} 命令的
`lvconvert`{.literal} 选项更改卷的区域大小。下面的例子将逻辑卷
`vg/raidlv`{.literal} 的区域大小改为 4096K。必须同步 RAID
卷以便更改区域大小。
``` literallayout
# lvconvert -R 4096K vg/raid1
Do you really want to change the region_size 512.00 KiB of LV vg/raid1 to 4.00 MiB? [y/n]: y
  Changed region size on RAID LV vg/raid1 to 4.00 MiB.
```
:::
:::
[]{#assembly_snapshot-volumes-configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_snapshot-volumes-configuring-and-managing-logical-volumes.html#assembly_snapshot-volumes-configuring-and-managing-logical-volumes}第 11 章 快照逻辑卷 {.title}
:::
LVM 快照功能提供在特定时间创建设备的虚拟镜像且不会造成服务中断的功能。
::: section
::: titlepage
# []{#assembly_snapshot-volumes-configuring-and-managing-logical-volumes.html#con_snapshot_volumes_snapshot-volumes}快照卷 {.title}
:::
LVM
快照功能提供在特定时间创建设备的虚拟镜像且不会造成服务中断的功能。在提取快照后，当对原始设备进行修改时，快照功能会生成有变化的数据区域的副本，以便重建该设备的状态。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
LVM 支持精简配置的快照。
:::
因为快照只复制创建快照后修改的数据区域，快照功能需要的存储空间较小。例如，对于很少更新的原始卷，原始容量的
3-5% 就足以进行快照维护。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
文件系统的快照副本是虚拟副本，不是文件系统的实际介质备份。快照不能替代备份。
:::
预留用来存储原始卷更改的空间的大小取决于快照的大小。例如：如果您要创建快照，且要完全覆盖原始卷，则快照必须至少与原始卷大小方可保存更改。您需要根据预期的更改程度调整快照大小。例如，一个多数用于读取卷的简时间存在的快照（如
`/usr`{.literal}）的空间会比上时间存在的，与大量写入操作的卷的快照（如
`/home`{.literal}）要小。
如果快照已满，则快照就会变得无效，因为它无法跟踪原始卷中的更改。您应该定期监控快照的大小。快照可以完全重新定义大小，因此如果您有存储容量，则可以增大快照卷以避免丢失快照。另外，如果您发现快照卷超过您的需要，您可以减小卷的大小来为其它逻辑卷最大限度腾出空间。
当您创建快照文件系统时，仍可对原始系统有完全的读和写访问。如果更改了快照中的块，则会标记那个块，永远不会从原始卷中复制该块。
快照有几个用途：
::: itemizedlist
-   最典型的是。当您需要在逻辑卷中执行备份而不停止持续更新数据的 Live
    系统时会提取快照。
-   您可以在快照文件系统中执行 `fsck`{.literal}
    命令检查文件系统的完整性，并决定原始文件系统是否需要修复。
-   因为快照是可读/写的，您可以根据产品数据测试应用程序，方法是提取一个快照并根据快照运行测试，从而不会影响真实数据。
-   您可以为 Red Hat Virtualization 创建 LVM 卷。LVM
    快照可用来创建虚拟客体镜像的快照。这些快照可方便修改现有客户虚拟机或者使用最小附加存储创建新客户虚拟机。
:::
您可以使用 `lvconvert`{.literal} 的 `--merge`{.literal}
选项将快照合并到原始卷中。这个功能的一个作用是在您丢失数据或者文件或者需要将系统恢复到之前的状态时执行系统恢复。合并快照卷后，得到的逻辑卷将具有原始卷的名称、副号码和
UUID 并删除合并的快照。
:::
::: section
::: titlepage
# []{#assembly_snapshot-volumes-configuring-and-managing-logical-volumes.html#proc_creating-snapshot-volumes-snapshot-volumes}创建快照卷 {.title}
:::
使用 `lvcreate`{.literal} 命令的 `-s`{.literal}
参数创建快照卷。快照卷是可写的。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
不支持集群中跨节点的 LVM
快照。您不能在共享卷组中创建快照卷。然而，如果您需要在共享逻辑卷中创建一致的数据备份，您可以单独激活该卷，然后创建快照。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
RAID 逻辑卷支持快照。
:::
LVM
不允许创建大于原始卷大小的快照卷，以及卷所需的元数据。如果您指定大于这个卷的快照卷，则系统会创建一个只根据原始卷大小所需的快照卷。
默认情况下，在正常激活命令中会跳过快照卷。
下面的步骤创建了名为 `origin`{.literal} 的原始逻辑卷以及名为
`snap`{.literal} 的原始卷的快照卷。
::: orderedlist
1.  从卷组 `VG`{.literal} 创建名为 `origin`{.literal} 的逻辑卷。
    ``` literallayout
    # lvcreate -L 1G -n origin VG
      Logical volume "origin" created.
    ```
2.  创建 `/dev/VG/origin`{.literal} 逻辑卷的快照，大小为 100 MB，名为
    `snap`{.literal}。如果原始逻辑卷包含一个文件系统，您可以在任意目录中挂载快照逻辑卷，以便访问文件系统的内容，并在不断更新原始文件系统时进行备份。
    ``` literallayout
    # lvcreate --size 100M --snapshot --name snap /dev/VG/origin
      Logical volume "snap" created.
    ```
3.  显示逻辑卷
    `/dev/VG/origin`{.literal}的状态，显示所有快照逻辑卷及其状态（活跃或者不活跃）。
    ``` literallayout
    # lvdisplay /dev/VG/origin
      --- Logical volume ---
      LV Path                /dev/VG/origin
      LV Name                origin
      VG Name                VG
      LV UUID                EsFoBp-CB9H-Epl5-pUO4-Yevi-EdFS-xtFnaF
      LV Write Access        read/write
      LV Creation host, time host-083.virt.lab.msp.redhat.com, 2019-04-11 14:45:06 -0500
      LV snapshot status     source of
                             snap [active]
      LV Status              available
      # open                 0
      LV Size                1.00 GiB
      Current LE             256
      Segments               1
      Allocation             inherit
      Read ahead sectors     auto
      - currently set to     8192
      Block device           253:6
    ```
4.  默认情况下， `lvs`{.literal}
    命令显示原始卷以及正在使用的快照卷的比例。以下示例显示了创建快照卷后
    `lvs`{.literal} 命令的默认输出，其显示中包含组成逻辑卷的设备。
:::
``` literallayout
# lvs -a -o +devices
  LV              VG            Attr       LSize   Pool   Origin Data%  Meta%  Move Log Cpy%Sync Convert Devices
  origin          VG            owi-a-s---   1.00g                                                       /dev/sde1(0)
  snap            VG            swi-a-s--- 100.00m        origin 0.00                                    /dev/sde1(256)
```
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
因为快照在原始卷有变化时会增大，所以通常使用 `lvs`{.literal}
命令监控快照卷的比例以确定它没有被填满是很重要的。使用了 100%
的快照会完全丢失，因为对原始卷中未更改的部分的写入无法在不破坏快照的情况下无法成功。
:::
当快照已满时，除了快照本身无效外，所有在那个快照设备中挂载的文件系统都会被强制卸载，这避免了访问挂载点时出现的文件系统错误。另外，您可以在
`lvm.conf`{.literal} 文件中指定
`snapshot_autoextend_threshold`{.literal}
选项。这个选项允许在剩余的快照空间低于您设定的阈值时自动扩展快照。这个功能要求卷组中还有未被分配的空间。
LVM
不允许创建大于原始卷大小的快照卷，以及卷所需的元数据。同样，快照的自动扩展不会将快照卷的大小增加到超过计算的快照所需的最大值。一旦快照增长到足够大来覆盖原始数据后，便不会再监控它是否发生了自动扩展。
有关设置 `snapshot_autoextend_threshold`{.literal} 和
`snapshot_autoextend_percent`{.literal} 的详情请参考
`/etc/lvm/lvm.conf`{.literal} 文件本身。
:::
::: section
::: titlepage
# []{#assembly_snapshot-volumes-configuring-and-managing-logical-volumes.html#proc_merging-snapshot-volumes-snapshot-volumes}合并快照卷 {.title}
:::
您可以使用 `lvconvert`{.literal} 的 `--merge`{.literal}
选项将快照合并到原始卷中。如果原始卷和快照卷都没有打开，则合并将立即开始。否则会在激活原始卷或快照卷并全部处于关闭状态时第一次执行合并。将快照合并到无法关闭的原始卷（如
root
文件系统）的过程中会延迟到下一次原始卷被激活时。当合并开始后，得到的逻辑卷将具有原始卷的名称、副号码和
UUID。在合并过程中，对原始卷的读取和写入将会被指向要合并的快照。当合并完成后，会删除合并的快照。
以下命令将快照卷 `vg00/lvol1_snap`{.literal} 合并到原始卷中。