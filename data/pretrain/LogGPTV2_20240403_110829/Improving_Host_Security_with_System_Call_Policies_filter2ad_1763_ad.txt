e
t
s
y
S
0
0
e
s
o
c
l
l
t
n
c
f
k
s
a
m
c
o
r
p
g
s
i
d
a
e
r
n
e
p
o
p
a
m
m
e
g
a
s
u
r
t
e
g
n
o
i
t
c
a
g
s
i
t
a
t
s
t
a
t
s
f
s
s
e
c
c
a
k
e
e
s
l
4
t
i
a
w
y
a
d
f
o
e
m
i
t
t
e
g
i
d
g
u
t
e
s
s
i
e
t
i
r
w
d
p
i
t
e
g
n
r
u
t
e
r
g
s
i
t
i
x
e
k
r
o
f
System calls
Figure 10: Histogram of system call frequency for com-
pilation benchmark. The performance impact of applica-
tion conﬁnement depends mostly on the number of sys-
tem calls that require a policy decision by the user space
daemon. The histogram shows that the most frequent
system calls can be handled by the in-kernel policy.
Normal
in sec
Benchmark
10.44 ± 0.09
Compile
0.84 ± 0.03
Crawler
Gzip-4.9M 8.55 ± 0.01
in sec
Systrace
13.71 ± 0.09
0.88 ± 0.03
8.57 ± 0.02
Increase
in percent
31 ± 1.4
4.8 ± 5.2
0.2 ± 0.3
Figure 11: Overview of diﬀerent macrobenchmarks com-
paring the execution time of an unmonitored run with the
execution time running under Systrace. The compilation
benchmark incurs the highest performance penality. On
the other hand, it is very complex, consisting of more than
forty applications and still shows acceptable performance.
Running the other benchmarks with Systrace incurs only
small performance penalties.
ﬁlesystem are also prominent.
A direct comparison between the execution times
is shown in Figure 11. Under Systrace, we notice
an increase in running time by 31% ± 1.4%. The
number of executed system calls increases to approx-
imately 726, 000 because ﬁlename normalization re-
quires the getcwd function, which causes frequent calls
to lstat and fstat. Running the same benchmark un-
der NetBSD 1.6I shows a signiﬁcantly smaller increase
in system calls because it implements a getcwd system
call.
A second macrobenchmark measures the runtime of
a web crawler that downloads ﬁles from a local web
server. The crawler retrieves approximately one hun-
dred forty ﬁles with an average throughput of two
megabytes per second. For this macrobenchmark,
268
12th USENIX Security Symposium 
USENIX Association
the running time under Systrace increases only by
4.8% ± 5.2%; see Figure 11.
The additional cost of Systrace, although noticeable
is not prohibitive, especially for interactive applications
like web browsers, in which there is no observable per-
formance decrease for the end user.
8 Future Work
This work opens up many avenues for future re-
search. Systrace may be used for quality assurance
by injecting random faults into a running application.
This allows us to introduce error conditions that are
not normally triggered and to observe if the applica-
tion recovers correctly from them. For example, we
may simulate resource starvation such as a full ﬁlesys-
tem or out-of-memory conditions. Using argument re-
placement, it is possible to change the way an appli-
cation interacts with the operating system. By chang-
ing ﬁlename arguments, it is possible to present a vir-
tual ﬁlesystem layout to the application. We may also
rewrite the addresses an application attempts to access
on the network. This allows us to redirect network traf-
ﬁc to diﬀerent hosts or to application-level ﬁrewalls.
9 Conclusion
This paper presented a new approach for applica-
tion conﬁnement that supports automatic and inter-
active policy generation, auditing, intrusion detection
and privilege elevation and applies to both system ser-
vices and user applications. We argued that system call
interception is a ﬂexible and appropriate mechanism
for intrusion prevention. Our hybrid implementation
enables fail-safe operation while maintaining low per-
formance overhead and good portability. This paper
addressed important issues not addressed by previous
research. The translation of system call arguments into
human-readable strings allows us to design a simple
policy language.
It also enables our system to gen-
erate ﬁne grained policies both automatically and in-
teractively. The resulting policies restrict applications
without breaking their functionality.
Privilege elevation in conjunction with application
conﬁnement allows us to reduce signiﬁcantly the priv-
ileges required by system services. Using privilege ele-
vation, we assign ﬁne-grained privileges to applications
without requiring the root user.
Instead of retaining
root privileges throughout an application’s lifetime, an
application may run without special privileges and re-
ceive elevated privileges as determined by policy.
Our security analysis discussed how we overcome
problems common to system call interception tools and
how our design allows for further functionality such as
intrusion detection and prevention.
We analyzed the performance of Systrace and
showed that additional performance overhead is ac-
ceptable and often not observable by the user of a sand-
boxed application.
10 Acknowledgments
I would like to thank Peter Honeyman, Terrence
Kelly, Chuck Lever, Ken MacInnis, Joe McClain, Perry
Metzger and Jose Nazario for careful reviews.
I also
thank Marius Eriksen, Angelos Keromytis, Patrick Mc-
Daniel, Perry Metzger, Dug Song and Markus Watts
for helpful discussions on this topic.
References
[1] Anurag Acharya and Mandar Raje. MAPbox: Us-
ing Parameterized Behavior Classes to Conﬁne Appli-
cations.
In Proceedings of the 9th USENIX Security
Symposium, August 2000. 2, 4, 9
[2] Albert Alexandrov, Paul Kmiec, and Klaus Schauser.
Consh: Conﬁned Execution Environment for Internet
Computations, 1998. 2
[3] Lee Badger, Daniel F. Sterne, David L. Sherman, Ken-
neth M. Walker, and Sheila A. Haghighat. A Domain
and Type Enforcement UNIX Prototype. In Proceed-
ings of the 5th USENIX Security Symposium, pages
127–140, June 1995. 2
[4] Steven M. Bellovin. Computer Security - An End
State? Communications of the ACM, 44(3), March
2001. 1
[5] Matt Bishop. How to write a setuid program. ;login;,
12(1):5–11, 1987. 1, 3
[6] Matt Blaze, Joan Feigenbaum, John Ioannidis, and
Angelos Keromytis. The KeyNote trust-management
system version 2. RFC 2704, September 1999. 4
[7] Matt Blaze, Joan Feigenbaum, and Jack Lacy. De-
centralized Trust Management. In Proceedings of the
1996 IEEE Symposium on Security and Privacy, pages
164–173, May 1996. 4
[8] CERT. OpenBSD contains buﬀer overﬂow in “select”
call. Vulnerability Note VU#259787, August 2002.
http://www.kb.cert.org/vuls/id/259787. 1
[9] Silvio Cesare. FreeBSD Security Advisory FreeBSD-
SA-02:38.signed-error. http://archives.neohapsis.
com/archives/freebsd/2002-08/0094.html, August
2002. 10
USENIX Association
12th USENIX Security Symposium 
269
[10] Suresh N. Chari and Pau-Chen Cheng. BlueBox: A
Policy-driven, Host-Based Intrusion Detection System.
In Proceedings of the ISOC Symposium on Network
and Distributed System Security, Feburary 2002. 2
[11] Hao Chen, David Wagner, and Drew Dean. Setuid
Demystiﬁed. In Proceedings of the 11th Usenix Security
Symposium, August 2002. 1
[12] William R. Cheswick and Steven M. Bellovin. Fire-
walls and Internet Security Repelling the Willy Hacker.
Addison-Wesley Publishing Company, 1994. 1
[13] M. Coleman. Subterfogue: A Framework for Oberserv-
http:
ing and Playing with Reality of Software.
//subterfugue.org/. 2
[14] Pawl J. Dawidek. Cerb: System Firewall Mechanism.
http://cerber.sourceforge.net/. 2
[15] G. Fernandez and L. Allen. Extending the UNIX Pro-
tection Model with Access Control Lists. In Proceed-
ings of the Summer 1988 USENIX Conference, pages
119–132, 1988. 1, 2
[16] Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji,
and Thomas A. Longstaﬀ. A Sense of Self for Unix
Processes. In Proceedings of the 1996 IEEE Symposium
on Research in Security and Privacy, pages 120–128,
1996. 2, 5
[17] Przemyslaw Frasunek. ntpd ≤ 4.0.99k remote buﬀer
overﬂow. Bugtraq, April 2001. CVE-2001-0414. 6
[18] Tal Garﬁnkel. Traps and Pitfalls: Practical Problems
in System Call Interposition Based Security Tools. In
Proceedings of the ISOC Symposium on Network and
Distributed System Security, 2003. 2, 8
[19] Douglas P. Ghormley, Steven H. Rodrigues, David
Petrou, and Thomas E. Anderson. SLIC: An Ex-
tensibility System for Commodity Operating Systems.
In Proceedings of the USENIX 1998 Annual Technical
Conference, pages 39–52, June 1998. 3
[20] Ian Goldberg, David Wagner, Randi Thomas, and
Eric A. Brewer. A Secure Environment for Untrusted
Helper Applications. In Proceedings of the 6th Usenix
Security Symposium, July 1996. 1, 2, 4
[21] Steven A. Hofmeyr, Stephanie Forrest, and Anil So-
mayaji. Intrusion Detection Using Sequences of Sys-
tem Calls. Journal of Computer Security, 6(3):151–
180, 1998. 1, 2, 5, 9
[22] J. Howard, M. Kazar, S. Menees, D. Nichols,
M. Satyanarayanan, R. Sidebotham, and M. West.
Scale and Performance in a Distributed File System.
ACM Transactions on Computer Systems, 6(1):51–81,
February 1988. 12
[23] Sotiris Ioannidis, Steven M. Bellovin, and Jonathan M.
Smith. Sub-Operating Systems: A New Approach to
Application Security. In Proceedings of the SIGOPS
European Workshop, September 2002. 2
[24] K. Jain and R. Sekar. User-Level Infrastructure for
System Call Interposition: A Platform for Intrustion
In Proceedings of the
Detection and Conﬁnement.
ISOC Symposium on Network and Distributed System
Security, February 2000. 1, 2, 4
[25] Calvin Ko, George Fink, and Karl Levitt. Auto-
mated detection of vulnerabilities in privileged pro-
grams by execution monitoring. In Proceedings of the
10th Annual Computer Security Applications Confer-
ence, pages 134–144, December 1994. 3
[26] Henry M. Levy. Capability-Based Computer Systems.
Digital Press, 1984. http://www.cs.washington.edu/
homes/levy/capabook/. 2
[27] Vern Paxson. Bro: A System for Detecting Network
In Proceedings of the 7th
Intruders in Real-Time.
USENIX Security Symposium, January 1998. 1
[28] David S. Peterson, Matt Bishop, and Raju Pandey. A
Flexible Containment Mechanism for Executing Un-
trusted Code. In Proceedings of the 11th USENIX Se-
curity Symposium, pages 207–225, August 2002. 2
[29] Niels Provos. OpenBSD Security Advisory: Select
Boundary Condition. http://monkey.org/openbsd/
archive/misc/0208/msg00482.html, August 2002. 10
[30] Niels Provos. Preventing Privilege Escalation. Techni-
cal Report CITI 02-2, University of Michigan, August
2002. 1, 11
[31] Thomas Ptacek and Timothy Newsham.
Insertion,
Evasion, and Denial of Service: Eluding Network In-
trusion Detection. Secure Networks Whitepaper, Au-
gust 1998. 1
[32] Jerome H. Saltzer. Protection and the Control of In-
formation in Multics. Communications of the ACM,
17(7):388–402, July 1974. 1, 2
[33] Jerome H. Saltzer and Michael D. Schroeder. The Pro-
tection of Information in Computer Systems. In Pro-
ceedings of the IEEE 69, number 9, pages 1278–1308,
September 1975. 6
[34] Ray Spencer, Stephen Smalley, Peter Loscocco, Mike
Hibler, David Andersen, and Jay Lepreau. The Flask
Security Architecture: System Support for Diverse Se-
curity Policies. In Proceedings of the 8th Usenix Se-
curity Symposium, pages 123–139, August 1999.
2,
8
[35] David Wagner and Drew Dean.
Intrusion Detection
via Static Analysis. In Proceedings of the IEEE Sym-
posium on Security and Privacy, May 2001. 3, 9
[36] David Wagner and Paolo Soto. Mimicry Attacks on
Host-Based Intrusion Detection Systems. In Proceed-
ings of the 9th ACM Conference on Computer and
Communications Security, November 2002.
1, 3, 5,
9
[37] David A. Wagner. Janus: an Approach for Conﬁne-
ment of Untrusted Applications. Technical Report
CSD-99-1056, 12, 1999. 2, 8
270
12th USENIX Security Symposium 
USENIX Association
[38] Kenneth M. Walker, Daniel F. Sterne, M. Lee Badger,
Michael J. Petkac, David L. Shermann, and Karen A.
Oostendorp. Conﬁning Root Programs with Domain
and Type Enforcement (DTE). In Proceedings of the
6th Usenix Security Symposium, July 1996. 2
[39] Andreas Wespi, Marc Dacier, and Herv´e Debar. An
Intrusion-Detection System Based on the Teiresias
Pattern-Discovery Algorithm.
In Proceedings of the
EICAR, 1999. 3
USENIX Association
12th USENIX Security Symposium 
271