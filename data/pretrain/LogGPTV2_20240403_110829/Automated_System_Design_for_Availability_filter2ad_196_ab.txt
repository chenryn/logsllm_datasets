Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
\\ Units - s:seconds, m:minutes, h:hours, d:days
\\ COMPONENTS DESCRIPTION
component=machineA cost([inactive,active])=[2400 2640]
failure=hard mtbf=650d mttr= detect_time=2m
failure=soft mtbf=75d mttr=0 detect_time=0
\\ RESOURCES DESCRIPTION
resource=rA reconfig_time=0
component=machineA depend=null startup=30s
component=linux depend=machineA startup=2m
component=webserver depend=linux startup=30s
component=machineB cost([inactive,active])=[85000 93500]
resource=rB reconfig_time=0
failure=hard mtbf=1300d mttr= detect_time=2m
failure=soft mtbf=150d mttr=0 detect_time=0
component=linux cost=0
failure=soft mtbf=60d mttr=0 detect_time=0
component=unix cost([inactive,active])=[0 200]
failure=soft mtbf=60d mttr=0 detect_time=0
component=webserver cost=0
failure=soft mtbf=60d mttr=0 detect_time=0
component=appserverA cost([inactive,active])=[0 1700]
failure=soft mtbf=60d mttr=0 detect_time=0
component=appserverB cost([inactive,active])=[0 2000]
failure=soft mtbf=60d mttr=0 detect_time=0
component=database cost([inactive,active])=[0 20000]
failure=soft mtbf=60d mttr=0 detect_time=0
component=mpi cost=0 loss_window=
failure=soft mtbf=60d mttr=0 detect_time=0
\\AVAILABILITY MECHANISMS
mechanism=maintenanceA
param=level range=[bronze,silver,gold,platinum]
cost(level)= [380 580 760 1500]
mttr(level)=[38h 15h 8h 6h]
mechanism=maintenanceB
param=level range=[bronze,silver,gold,platinum]
cost(level)=[10100 12600 15800 25300]
mttr(level)=[38h 15h 8h 6h]
mechanism=checkpoint
param=storage_location range=[central,peer]
param=checkpoint_interval range=[1m-24h;*1.05]
cost=0
loss_window=checkpoint_interval
component=machineB depend=null startup=60s
component=unix depend=machineA startup=4m
component=webserver depend=linux startup=30s
resource=rC reconfig_time=0
component=machineA depend=null startup=30s
component=linux depend=machineA startup=2m
component=appserverA depend=linux startup=2m
resource=rD reconfig_time=0
component=machineA depend=null startup=30s
component=linux depend=machineA startup=2m
component=appserverB depend=linux startup=30s
resource=rE reconfig_time=0
component=machineB depend=null startup=60s
component=unix depend=machineB startup=4m
component=appserverA depend=unix startup=2m
resource=rF reconfig_time=0
component=machineB depend=null startup=60s
component=unix depend=machineA startup=4m
component=appserverB depend=unix startup=30s
resource=rG reconfig_time=0
component=machineB depend=null startup=60s
component=unix depend=machineA startup=4m
component=database depend=unix startup=30s
resource=rH reconfig_time=0
component=machineA depend=null startup=30s
component=linux depend=machineA startup=2m
component=mpi depend=linux startup=2s
resource=rI reconfig_time=0
component=machineB depend=null startup=60s
component=unix depend=machineB startup=4m
component=mpi depend=unix startup=2s
Figure 3. Infrastructure speciﬁcation example
(e.g. MTBF, MTTR, etc.),
thus changing the availabil-
ity characteristics of the system. An example of an avail-
ability mechanism is a maintenance contract with a con-
ﬁgurable level which determines the response time of
repair staff. Another example is a checkpoint-restart mech-
anism that periodically saves the state of an application to
stable storage to limit the loss window. A mechanism is spec-
iﬁed by deﬁning a list of conﬁguration parameters, each
with a deﬁned range of possible settings, and a list of at-
tributes whose values are affected by the mechanism and
its conﬁguration parameter settings. For example, in the se-
lection of a maintenance contract, the level of the mainte-
nance service (e.g. bronze, silver, gold, platinum, etc.) can
be deﬁned as a parameter whose value is used to deter-
mine the repair times (mttr) of components. Each availability
mechanism also has a cost attribute which indicates the an-
nual cost of using the mechanism. The cost can be a function
of the mechanism’s parameter settings (e.g., cost can in-
crease with the level of maintenance contract).
Availability mechanisms can affect
the attributes of
more than one failure mode or component type (e.g., an
application-transparent checkpointing mechanism could be
applied to both scientiﬁc applications and databases). There-
fore, we chose to separate the availability mechanism de-
scription from the component speciﬁcation and allow mech-
anisms to be applied and conﬁgured independently for each
component at design time.
3.1.3. Resources A resource type is deﬁned as a combina-
tion of components that can be allocated as a unit to a service.
Attributes of a resource include the startup times of each of its
components, and the dependencies among components. Com-
ponent dependencies indicate both the order in which com-
ponents of a resource must be started, as well as which com-
ponents are affected by a failure of another component. For
example, an operating system can only be started after the
hardware is started, and a hardware failure causes the operat-
ing system to fail as well. Finally, a resource has an attribute
giving the reconﬁguration time incurred upon failover to a
spare resource of this type. Reconﬁguration time includes,
for example, time to reconﬁgure load balancers and to trans-
fer needed data to the spare resource instance.
3.2. Service Model
The service model describes a service as a set of tiers,
where each tier is a cluster of resource instances. Example
service model descriptions are shown in Figs. 4 and 5. For
each tier, the service model deﬁnes a list of possible resource
types that can be used to support that tier. For each of these
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
resource options, the service model must capture the result-
ing model of parallelism for the tier for analysis of the perfor-
mance and availability behavior of the tier and the overall ser-
vice. Thus for each resource option for each tier, the service
model deﬁnes the freedom in setting and varying the num-
ber of active resources, the impact of the failure of a single
resource instance, and the performance characteristics of the
tier if the resource is selected for a design. The attribute nAc-
tive speciﬁes the set of possible number of active resources.
This allows specifying, for example, that a scientiﬁc applica-
tion requires the number of resources to be a power of 2, or
that a non-parallel application requires exactly one resource.
The attribute sizing determines whether during the lifetime of
a service the number of resource instances can be changed
(dynamic) or not (static). An example of static sizing is a sci-
entiﬁc application that partitions the data across the nodes at
initialization time and cannot support subsequent data redis-
tribution. An example of dynamic sizing is a web tier where
the number of web servers can change arbitrarily. A failure
scope attribute deﬁnes whether failure of a single resource in-
stance affects the operation of the whole tier or whether the
impact is limited to the failed resource instance. Finally, the
performance associated with a resource option is speciﬁed in
service-speciﬁc units of work per units of time and is typi-
cally deﬁned as a function of the number of active resources.
Although availability mechanisms are part of the infras-
tructure model, their performance impact depends on charac-
teristics of the speciﬁc service. Therefore, we currently deﬁne
performance impact of availability mechanisms as service at-
tributes associated with each resource alternative of the tier
affected by the mechanism2. In the future, we plan to specify
parameterized performance functions as part of the infrastruc-
ture model rather than the service model, in order to simplify
the task of specifying services. Services would only have to
specify parameters for the performance functions.
Finally, for applications of ﬁnite duration for which the
service requirement is the expected time to complete the job,
the service model has an attribute which speciﬁes the job size
in application-speciﬁc units (e.g., the number of frames in a
rendering application).
4. Searching the Design Space
Aved searches the design space speciﬁed by the infras-
tructure and service model to identify the optimal design that
meets service requirements. This optimal design speciﬁes, for
each tier, values for: 1) the type of resource selected for the
tier, 2) the number of active resources, 3) the number of spare
resources, 4) the operational mode of each component in the
spare resources, and 5) each parameter of availability mecha-
nisms. We describe the algorithm used to search the design
2 Currently, mechanisms affecting more than one tier cannot be modeled.
application=ecommerce
tier=web
resource=rA sizing=dynamic failurescope=resource
nActive=[1-1000,+1] performance(nActive)=perfA.dat
resource=rB sizing=dynamic failurescope=resource
nActive=[1-1000,+1] performance(nActive)=perfB.dat
tier=application
resource=rC sizing=dynamic failurescope=resource
nActive=[1-1000,+1] performance(nActive)=perfC.dat
resource=rD sizing=dynamic failurescope=resource
nActive=[1-1000,+1] performance(nActive)=perfD.dat
resource=rE sizing=dynamic failurescope=resource
nActive=[1-1000,+1] performance(nActive)=perfE.dat
resource=rF sizing=dynamic failurescope=resource
nActive=[1-1000,+1] performance(nActive)=perfF.dat
tier=database
resource=rG sizing=static failurescope=resource
nActive=[1] performance=10000
Figure 4. Service model example: e-commerce
application=scientific jobsize=10000
tier=computation
resource=rH sizing=static failurescope=tier
nActive=[1-1000,+1] performance(nActive)=perfH.dat
mechanism=checkpoint mperformance(storage_location,
checkpoint_interval,nActive)=mperfH.dat
resource=rI sizing=static failurescope=tier
nActive=[1-1000,+1] performance(nActive)=perfI.dat
mechanism=checkpoint mperformance(storage_location,
checkpoint_interval,nActive)=mperfI.dat
Figure 5. Service model example: scientiﬁc
space ﬁrst in Section 4.1 and then describe how each de-
sign generated in the design space search is evaluated in Sec-
tion 4.2.
4.1. Search Algorithm
The design space search algorithm ﬁrst examines each tier
in isolation and determines the optimal design for each tier as-
suming the other tiers do not experience failures. If the overall
design combining these individually optimal designs satisﬁes
the high level requirements, this is the optimal design. If not,
the search continues by reﬁning the design of each tier un-
til the optimal multi-tier design is identiﬁed. To reﬁne the de-
sign of a tier, Aved computes the best “next” design by mak-
ing the requirements for that tier incrementally more aggres-
sive.
The design space search for each tier considers all possi-
ble choices of resource types for that tier to ﬁnd the best solu-
tion for each possible resource type. For each resource type,
Aved ﬁrst evaluates designs using the minimum number of re-
sources required to meet the performance requirement in the
absence of any failures. The number of resources is succes-
sively incremented in subsequent search steps. For each se-
lected number of resources, all possible combinations of the
number of active resources, the number of spare resources,
the operation mode of spare resources, and values for the pa-
rameters of availability mechanisms are considered and eval-
uated. For each design, Aved evaluates both its cost and avail-
ability until a design that satisﬁes the service requirements is
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:53 UTC from IEEE Xplore.  Restrictions apply. 
found. Once such a solution is found, subsequent designs are
evaluated for cost ﬁrst (which is simple and fast) and higher
cost designs are rejected without evaluating their availability.
If a feasible solution is not found and the availability metric
starts to degrade when the number of resources is increased,
no feasible solution exists and the search stops. The search
ends successfully when increasing the number of resources
generates only designs with costs higher than the current so-
lution.
4.2. Design Evaluation
The evaluation of designs generated by the design search
process has two parts: evaluation of cost and evaluation of
availability. The cost of a design is simply calculated as the
sum of the cost of all components at their selected opera-
tional mode (active or inactive) and the cost of the availabil-
ity mechanisms for the selected values of their parameters.
To evaluate availability, Aved generates an availability
model for the design. Multiple tiers in a design are modeled
as an association in series, where the whole design is consid-
ered up only when each tier is up. The availability model for
each tier speciﬁes the following parameters:
1. n, the number of active resources.
2. m, the minimum number of active resources required for
the tier to be considered up. This is equal to n when siz-
ing is declared as static or failure scope is declared as
tier for the resource used in this tier. Otherwise, this
value is computed using the performance requirement
combined with the performance model of the service as-
sociated with the resource used in this tier.
3. s, the number of spare resources. Spare resources can
be used to replace failed resources if the number of ac-
tive resources drops below the minimum m, but incur-
ring downtime during the failover.
4. M T BFi, the MTBF of each failure mode i that is pos-
sible for each component that is included in the resource
used in this tier. The MTBFs are the same as deﬁned in
the design space model.
5. M T T Ri, the MTTR for the repair of each failure mode
i that is possible for each component that is included in
the resource used in this tier. The MTTR is computed as
the sum of the failure detection time, the component re-
pair time for that failure mode, and the startup times of
the components affected by the failure.
6. F ailoverT imei, the failover time for each failure mode
i that is possible for each component that is included in
the resource used in this tier. The failover time is com-
puted as the sum of the failure detection time, the re-
conﬁguration time, and the startup latencies of compo-
nents that are in inactive operational mode in the spare
resource.
When generating an availability model, Aved only considers
failover for failure modes in which MTTR is greater than the
failover time. While this is the common case for permanent
hardware failure, it may not be the case for software and hard-
ware glitches that can be ﬁxed by just restarting the compo-
nent with a corresponding repair time equal to zero.
This availability model can be evaluated using a traditional
availability evaluation engine, such as Avanto [4], Mobius[2],
and Sharpe[12] to compute the expected annual downtime of
the design. Aved currently generates representations of this
availability model that can be used with Avanto [4] and our
own simpliﬁed Markov Model (this can be easily translated to
work with other engines). These availability evaluations as-
sume failures are independent but their distributions depend
on the assumptions of the speciﬁc availability evaluation en-
gine (e.g., exponential interarrival for the Markov model).
For applications with a speciﬁc job size (e.g., scientiﬁc ap-
plications), Aved must also estimate the expected job comple-
tion time. The job completion time is derived analytically us-
ing the average annual downtime estimate from the availabil-
ity engine. For this analysis, we assume failure modes are in-
dependent with the time between failures and the time to re-
pair components being exponentially distributed. If the appli-
cation has a loss window lw (which is the maximum amount
of work that can be lost due to a single failure event), we de-
ﬁne Tlw (Tlw ≥ lw) as the mean computation time necessary
to execute an lw amount of useful work. Based on the as-
sumption of exponential distributions, Tlw can be computed
as:
Tlw = mtbf
Pf