antees noninterference [12, 13, 19]. Speciﬁcally, if a test
succeeds, which indicates the output of the ﬂow should be
trusted, then indeed that output is not inﬂuenced by any un-
trusted code, in the standard sense of noninterference [19].
1.4 Organization
The remainder of this paper is organized as follows: Sec-
tion 2 deﬁnes the syntax and semantics of the language. In
Section 3, we prove that a program passing the new IBAC
permission test is noninterferent in a novel sense. More-
over, we connect that notion to an ordinary notion of non-
interference by considering a program that ends by testing
the permissions on its trusted outputs. Section 4 revisits
the running examples of Sections 1.1 and 1.2, and shows
that IBAC properly enforces the information-ﬂow policies
extracted from the access-control policies on those exam-
ples. Furthermore, Section 4 demonstrates the applicability
of IBAC to large-scale application code. Section 5 discusses
possible implementations of IBAC. Section 6 presents re-
lated work, and Section 7 concludes this paper.
2 Language
The advantage of IBAC is that it avoids the need for an
explicit information-ﬂow policy speciﬁcation or code anno-
tations: the information-ﬂow policy itself is automatically
To formalize the model, we choose a language similar
to that of Fournet and Gordon [18], but with the addition
of mutable variables and dynamically allocated mutable
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007T
: : = int | bool | {f : T}ref
Types
Declarations K : : = var x : T
Programs
Commands
Expressions E
M : : = {K ;}∗ in R[C ]
C
let p(x : T ) = R[C ]
: : = x : = E | x .f : = E |
x : = ref{f = E} |
p(E) | C ; C | if E then C else C |
grant R in C |
test R then C else C |
test R for E
E ⊕ E | x | x .f | null
: : = true | false | n |
primitives; pointer to record with ﬁelds f
global variable
procedure with static permissions
main program with body R[C ] in context of decls.
assignment to variable and ﬁeld
allocate and initialize variable of record type
procedure call; command sequence; conditional
assert dynamic permissions
check and branch on stack permissions
check value permissions
boolean and integer literals
binary operators; variable; ﬁeld access; null
Figure 5. Language Syntax
records to more closely model conventional object-oriented
(OO) languages. For simplicity, subclassing and dynamic
dispatch are omitted, and we use explicitly declared proce-
dures, rather than untyped λ terms, in order to treat muta-
ble variables and objects while avoiding semantic compli-
cations.
Another feature we adopt from Fournet and Gordon’s
language is that the static assignment of permissions to code
is modeled using framed expressions of the form R[C ],
where C is ordinary code and the frame, R, is a set of per-
missions. Values stored in variables and object ﬁelds have
the form R[v], where v is a primitive value (an integer, a
boolean, a pointer, or null); here, R reﬂects the fact that v
can be trusted at level at most R. Unlike Fournet and Gor-
don, we do not need the framing operation that applies a
frame to λ abstractions within an expression, because we
do not use λ abstractions (and hence do not need nested
frames).
In Java, permissions carry nontrivial structure and an im-
plication ordering. For example, the FilePermission
to write all ﬁles implies the FilePermission to write
ﬁle a.txt. On this, we follow Fournet and Gordon and use
a simple concrete representation: instead of reasoning about
sets of Java permissions, we assume there is a ﬁxed universe
of atomic permissions and work with atomic-permission
sets. Thus, AllPermission is a set, All, likely to be in-
ﬁnite, which contains for example the FilePermission
to read a.txt. One could as well work with an arbitrary
lattice; our formulation makes the connection with stack in-
spection slightly more transparent, and allows us to use the
intuitive union and intersection operators.
2.1 Syntax
Figure 5 gives the syntax of our language. Typing rules
are straightforward and omitted. In a program K in R[C ],
the frame R represents the static permissions assigned to the
main program, which for practical purposes will be All, as in
the Sun Microsystems reference implementation of the Java
Virtual Machine (JVM) embedded in the Java 2 platform
and in the Microsoft implementation of the JVM embedded
in Internet Explorer V4.0 [43].
Security-sensitive events are security-sensitive opera-
tions, such as System.exit, that take no parameters
and have no receiver. Framing values may not be sufﬁ-
cient to prevent untrusted code from triggering the exe-
cution of a security-sensitive event. Therefore, IBAC in-
cludes the ordinary stack-inspection mechanism. Our for-
mulation uses the eager semantics [18, 44, 43]: A com-
mand C1 is executed in the context of a set D of dynamic
permissions, which represent the permissions for which a
stack inspection would be successful; D is inspected by
the command test R then C1 else C2, which mod-
els checkPermission in Java and Demand in CLR, to-
gether with exception handling.
To model ordinary stack inspection, the body of every
procedure is framed with a set of permissions. Speciﬁcally,
in a procedure declaration, p(x : T ) = R[C ], the frame R
represents the set of the static permissions granted to pro-
cedure p. In practice, R is the set of permissions that the
current access-control policy assigns to the class in which p
is implemented. Multiple arguments for a procedure can be
encoded using records.
The novel command, test R for E , tests whether the
frame on the value of E contains R. If so, there is no effect
on the state; if not, the command aborts. Note that there is
not an else-branch to model exception handling. Indeed, if
the outcome of the test could be determined, frames would
serve as a new storage channel (just as the dynamic permis-
sions do in HBAC [5]). It could be interesting to investigate
frames on frames to allow and track such ﬂows, but in this
paper we simply prevent them.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 20072.2 Semantics
The semantics involves framed values. A value is either
a reference, an integer or boolean literal, or null. (Note that
a record is not a value and is not framed; this provides a
proper treatment of shared mutable objects [6].) A store s
maps each global variable to a framed value R[v]. In ad-
dition, it maps the special program-counter variable pc to a
set of permissions. Thus, s(pc) is like a label on the pro-
gram counter. A state is a pair (s, h), where s is a store and
h a heap; the latter is a ﬁnite partial function from refer-
ences to records (that is, mapping pointers to labeled tuples
of framed values).
Our semantics is designed to resemble that of Fournet
and Gordon; it uses an eager semantics for stack inspection,
thereby avoiding the need for an explicit run-time stack.
However, it differs in several ways. We add the heap and
store to model mutable variables, framed values to track in-
formation ﬂow, and a variable pc to track information ﬂow
via the program counter.
We write (K in R[C ], s, h) ⇓ (s(cid:2), h(cid:2)) to express that
a program K in R[C ], executed from initial state (s, h),
terminates in state (s(cid:2), h(cid:2)). (Our security conditions pertain
to terminating computations only.)
This relation is deﬁned in terms of a relation on com-
mands: we write
(C , s, h) ⇓S
D (s(cid:2), h(cid:2))
to express that command C terminates in state (s(cid:2), h(cid:2)) when
executed from initial state (s, h) under static permissions S
and dynamic permissions D—where D is invariably a sub-
set of S . In fact, ⇓S
D depends on the procedure declarations
in K , but we elide K for brevity since it is ﬁxed.
The semantics of a complete program is deﬁned as fol-
lows:2
(C , s0, h) ⇓R
R (s(cid:2), h(cid:2))
s0 = [s | pc (cid:3)→ R]
(K in R[C ], s, h) ⇓ (s(cid:2), h(cid:2))
The relation (C , s0, h) ⇓R
where, as observed, R is typically All.
D (s(cid:2), h(cid:2)) is deﬁned by induc-
tion3 on ⇓ and cases on C , but ﬁrst we give the semantics
of expressions. The relation (E , s, h) ⇓S
D R[v] means that,
in state (s, h), expression E evaluates, under static permis-
sions S and dynamic permissions D, to framed value R[v].
The intention, which will be conﬁrmed by Theorem 3.4, is
that R records the inﬂuences on v—which are only by data
2The notation [s | x (cid:2)→ . . .] indicates an update of variable x in store
s, where x is either a global variable or the program-counter variable, pc.
Similarly, the notation [h | o.f (cid:2)→ . . .] indicates an update of ﬁeld f for
the record of reference o in the heap.
D for
all S and all D ⊆ S . This is needed because the rules for procedure call
and grant change the static and dynamic permissions.
3To be precise, our rules inductively deﬁne a family of relations ⇓S
ﬂow, since we omit conditionals at the level of expressions.
Relation ⇓S
D is deﬁned inductively by the following rules:4
(true, s, h) ⇓S
(false, s, h) ⇓S
D S[false]
D S[true]
(n, s, h) ⇓S
D S[n]
(E2, s, h) ⇓S
D R2[v2]
(E1, s, h) ⇓S
D R1[v1]
(E1 ⊕ E2, s, h) ⇓S
D R1 ∩ R2[v1 ⊕ v2]
s(x) = R[v]
(x , s, h) ⇓S
D S ∩ R[v]
(x , s, h) ⇓S
D R[o]
(x .f , s, h) ⇓S
hof = R(cid:2)[v]
D R ∩ R(cid:2)[v]
Next, we specify two unusual operations for the se-
mantics of commands. We assume given two functions,
write oracle and taint, such that:
• For any C , s, h, write oracle(C , s, h) is a pair
(V , F ), where V is a set of variables and F a set of
locations. Each location is of the form (o, f ), where o
is a reference and f a ﬁeld name.
• For any R, V , F , s, h, taint(R, V , F , s, h) is a state
(s(cid:2), h(cid:2)) such that s(cid:2)(pc) =s (pc). Moreover, the do-
mains of h and h(cid:2)
are the same.
Furthermore, these operations satisfy the following condi-
tions:
represents
• write oracle(C , s, h)
If
⇓S
C in (s, h).
write oracle(C , s, h) = (V , F ),
set of variables updated from s to s(cid:2)
of locations updated from h to h(cid:2)
(C , s, h)
.
the writes
D
of
(s(cid:2), h(cid:2)) and
then V is the
and F is the set
• taint changes the state only by shrinking frames. That
is, if taint(R, V , F , s, h) = (s(cid:2), h(cid:2)), s(x) =P [v],
and s(cid:2)(x) = P(cid:2)[v(cid:2)], then P ⊇ P(cid:2)
, and
similarly for record ﬁelds.
and v = v(cid:2)
• taint imposes R on (V , F ). That is, for any x in V ,
, and
if s(x) =P [v] and s(cid:2)(x) = P(cid:2)[v(cid:2)] then R ⊇ P(cid:2)
similarly for record ﬁelds.
For programs using only variables, write oracle can be
overapproximated by simple static analysis that tracks as-
signment targets. To take the heap into account, techniques
from program analysis and veriﬁcation (where this is known
as a “modiﬁes clause”) can be used; see, for example, [2]
and references therein. A dynamic oracle can be given
4In the rules, parse R1 ∩ R2[v ] as (R1 ∩ R2)[v ]. For ﬁeld access, note
that ho is the record at reference o and thus hof is the value of its ﬁeld f .
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:51 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007p(x : T ) = R[C ]
(E , s, h) ⇓S
D P[v]
(C , [s | x (cid:3)→ s(pc) ∩ S ∩ P[v]], h) ⇓R
D∩R (s(cid:2), h(cid:2))
(p(E), s, h) ⇓S
D (s(cid:2), h(cid:2))
R ⊆ D
(C1, s, h) ⇓S
D (s(cid:2), h(cid:2))
(test R then C1 else C2, s, h) ⇓S
R ⊆ P
D (s, h)
(E , s, h) ⇓S
(test R for E , s, h) ⇓S
D P[v]
D (s(cid:2), h(cid:2))
R (cid:8)⊆ D
(C2, s, h) ⇓S
D (s(cid:2), h(cid:2))
(test R then C1 else C2, s, h) ⇓S
D (s(cid:2), h(cid:2))
(C , s, h) ⇓S
D∪(R∩S ) (s(cid:2), h(cid:2))
(grant R in C , s, h) ⇓S
D (s(cid:2), h(cid:2))
D (s(cid:2), h(cid:2))
(C1, s, h) ⇓S
D (s1, h1)
(C1; C2, s, h) ⇓S
(C2, s1, h1) ⇓S
D (s(cid:2), h(cid:2))
s0 = [s | pc (cid:3)→ s(pc) ∩ R]
D ([s(cid:2) | pc (cid:3)→ s(pc)], h(cid:2))
(E , s, h) ⇓S
D R[false]
(V , F ) =write oracle(C1, s, h)
(if E then C1 else C2, s, h) ⇓S
(C2, s0, h) ⇓S
D (s2, h2)
(s(cid:2), h(cid:2)) = taint(s0(pc), V , F , s2, h2)
(x , s, h) ⇓S
(x .f : = E , s, h) ⇓S
(E , s, h) ⇓S
D R[o]
D (s, [h | o.f (cid:3)→ s(pc) ∩ S ∩ R ∩ R(cid:2)[v]])
D R(cid:2)[v]
(x : = ref{f = E}, s, h) ⇓S
D ([s | x (cid:3)→ s(pc) ∩ S[o]], [h | o.f (cid:3)→ s(pc) ∩ S ∩ R[v]])
(E , s, h) ⇓S
D R[v]
o (cid:8)∈ dom(h)
Figure 6. Command Semantics
by simulating the command for some bounded number of
steps. The most precise taint function changes (s, h) to
(s(cid:2), h(cid:2)) by intersecting R with the frames of the values in
the variables and locations in V and F , respectively.
Finally, we can give the semantics of commands. For
assignments, the rule is as follows:
(E , s, h) ⇓S
D ([s | x (cid:3)→ s(pc) ∩ S ∩ R[v]], h)
(x : = E , s, h) ⇓S
D R[v]
Expression E evaluates to some framed value R[v]; the
store is updated using the frame s(pc) ∩ S ∩ R to take into
account both the control dependence recorded in pc and the
static permissions of the code performing the assignment.
It is well known that control dependence allows infor-
mation to ﬂow via the absence of an assignment. This is
tracked in the semantics of conditional, which is deﬁned as
follows:
(E , s, h) ⇓S
s0 = [s | pc (cid:3)→ s(pc) ∩ R]
(C1, s0, h) ⇓S
(V , F ) = write oracle(C2, s, h)
(s(cid:2), h(cid:2)) = taint(s0(pc), V , F , s1, h1)
D R[true]
D (s1, h1)
(if E then C1 else C2, s, h) ⇓S
D ([s(cid:2) | pc (cid:3)→ s(pc)], h(cid:2))