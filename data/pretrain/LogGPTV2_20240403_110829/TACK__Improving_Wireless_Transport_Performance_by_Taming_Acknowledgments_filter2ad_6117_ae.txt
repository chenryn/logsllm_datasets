as shown in Figure 8(b), TACK has the same frequency as
TCP’s delayed ACK (denoted by TCP (L=2)) over 802.11b
wireless links with a small 𝑅𝑇 𝑇𝑚𝑖𝑛 (10 ms). However, for
the 802.11ac links, the frequency of TACK has dropped two
orders of magnitude when 𝑅𝑇 𝑇𝑚𝑖𝑛 = 10 ms and three orders
of magnitude when 𝑅𝑇 𝑇𝑚𝑖𝑛 = 80 ms. Note that Figures 8(a)
and 9(a) also reveal that goodput increase is insensitive to the
latency between endpoints. This is because TACK’s frequency
is already quite low, reducing ACK frequency by hundreds
of Hz only slightly impact goodput.
license, we currently only implement TCP-TACK in the user space
instead of the kernel space. TCP-TACK evaluations in this paper are
all conducted under this commercial implementation.
SpatialstreamsLinkModulation typeCoding rateGuard interval ChannelwidthPHY capacityUDPbaseline(cid:300)802.11b802.11g802.11n802.11ac--22CCK64-QAM64-QAM256-QAM-3/45/65/6--400ns400ns22MHz20MHz40MHz80MHZ11 Mbps54 Mbps300 Mbps866.7 Mbps7 Mbps26 Mbps210 Mbps590 Mbps802.11b802.11g802.11n802.11ac01000020000300004000050000Reduced ACK Freq.(Hz) Δf=ftcp−ftackRTT=10msRTT=80msRTT=200msRTTminTACK(L=2)TCP(L=2)TACK(L=2)10 ms2942477729480 ms24777294200 ms24777294802.11b802.11acTCP(L=2)50502020400SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Tong Li et al.
(a) Goodput improvement
(b) Ideal goodput trend
Figure 9: (a) Links with faster PHY rate enlarge
goodput improvement. (b) TACK approaches the
transport upper bound with a minimized ACK fre-
quency (RTT=80 ms, 802.11n).
(a) TCP-TACK vs. TCP BBR
(b) Actual goodput trend
Figure 10: (a) TCP-TACK obtains 20% ∼ 28.1%
of goodput improvement. (b) Prior ACK thinning
mechanisms disturb the TCP transport performance
(RTT=80 ms, 802.11n).
6.3 Performance in WLAN scenarios
Before diving into protocol performance, we first answer the
question of how close TACK can get to transport upper
bound. We use the UDP-based tool [29] specified in S3.2
to estimate the ideal goodput of different ACK thinning
techniques. For example, “TCP (L=8)” considers the case
of byte-counting ACK that send an ACK every 8 full-sized
packets. Our simulator keeps sending 1518-byte packets from
the sender over the 802.11n links, and the receiver counts 8
received packets, and then sends one 64-byte packet as an
ACK. “UDP Baseline” acts as the transport upper bound as
its goodput is not disturbed by ACKs (see Figure 7). “PHY
Capacity” is the raw bit rate at the PHY layer.
It is well-known that the transport will be disturbed when
the number of ACKs is excessively reduced. Thus, sending
fewer ACKs has a “negative effect” on the transport perfor-
mance. However, in wireless scenarios sending fewer ACKs
also has a “positive effect” on the transport performance due
to the reduced contentions. To better estimate this “positive
effect”, we assume that there is no “negative effect” ideally.
As a result, “Ideal Goodput” refers to the ideal situation that
the transport will not be disturbed by reducing the number
of ACKs. “Actual Goodput” refers to the real situation that
the transport is impacted by both the “negative effect” and
the “positive effect” when reducing the number of ACKs.
Figure 9(a) shows that the goodput gain is enlarged over
a faster wireless link. Figure 9(b) demonstrates that TACK’s
ideal goodput approaches the transport upper bound with a
Figure 11: Wireless projection with Miracast.
minimized ACK frequency. Note that the gap between UDP
baseline and PHY capacity is caused by non-ACK factors
such as high medium acquisition overhead for data packet-
s. Generating large A-MPDUs (Aggregated MAC Protocol
Data Units [12]) may serve the purpose of reducing this gap.
However, this is outside the scope of this paper.
We then compare the actual goodput of TCP-TACK flows
and TCP BBR flows over the IEEE 802.11b/g/n/ac wire-
less links. A Wi-Fi host (Intel Wireless-AC 8260, 2 × 2) is
connected to another wired host with a wireless router (TL-
WDR7500) forwarding. All devices are in a public room with
over 10 additional APs and over 100 wireless users at peak
time. Ping test shows that the RTT varies between 4 to
200 ms and slight burst losses exist. Single-flow tests are
repeatedly conducted over all hours of the days in a full week.
Figure 10(a) shows that TCP-TACK obtains 20% ∼ 28.1%
of average goodput improvement over TCP BBR. Our data
traces also show that TCP-TACK sends much less number of
ACKs than TCP BBR (e.g., over the 802.11g wireless links,
𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝑑𝑎𝑡𝑎 𝑝𝑎𝑐𝑘𝑒𝑡𝑠 of TCP-TACK approximates 1.9%, and
which of TCP BBR approximates 50%), significantly reducing
the contentions on wireless links.
𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝐴𝐶𝐾𝑠
We also investigate the difference between the actual and
the ideal goodput of TCP BBR with prior ACK thinning
mechanisms. We introduce data packet impairments (𝜌 =
0.1%) by adding a network emulator connected between
the endpoints. Figure 10(b) shows that legacy TCP’s actual
trend of goodput improvements does not match the ideal
trend (as illustrated in Figure 9(b)). We believe it is because
TCP’s control algorithms such as loss recovery, round-trip
timing, and send rate control are disturbed by reducing ACK
frequency. In contrast, TCP-TACK’s actual performance
approaches the ideal goodput improvement. This validates
the TACK-based protocol design. We have also tested the
Wi-Fi Direct [5] links, the results of which remain similar.
6.4 Deployment experience: Miracast
TCP-TACK is deployed in the commercial products, such
as Huawei Mate20 Series Smartphone (Android 9) [43] and
Honor Smart TV [44], providing optimized high resolution
wireless projection using Miracast. Miracast [4] allows user-
s to wirelessly share multimedia, including high-resolution
pictures and HD video content between Wi-Fi devices. A
predecessor (Android 8) of Huawei’s product adopts RTP
on top of UDP as the transport protocol, while the current
commercial products have modified Miracast so as to enable
the TCP-based transmissions, i.e., TCP CUBIC, TCP BBR,
and TCP-TACK.
The smartphone screen can be projected to a nearby TV,
wherein the distance is usually less than 10 meters between
the two devices. Data traces are collected from both the
802.11b802.11g802.11n802.11ac050100150Improved Goodput (Mbps)Goodputtack−GoodputtcpRTT=10msRTT=80msRTT=200msTCPL=1TCPL=2TCPL=4TCPL=8TCPL=16TACKL=204080120160200240280320Goodput (Mbps)Ideal GoodputUDP BaselinePHY Capacity802.11b802.11g802.11n802.11ac030200400500600Goodput (Mbps)652419198155556434TCP-TACKTCP BBRTCPL=1TCPL=2TCPL=4TCPL=8TCPL=16TACKL=204080120160200240280320Goodput (Mbps)Actual GoodputUDP BaselineRTP+UDPMetrics0TCP CUBICMacroblocking (times/30min)TCP-TACK030 ~ 583 ~ 105 ~ 605 ~ 1550 ~ 90TCP BBRRebuffering (%)TACK: Improving Wireless Transport Performance by Taming Acknowledgments
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Figure 12: Hybrid topology of WLAN and WAN.
Figure 13: Performance over combined links of
WLAN and WAN.
smartphones and TVs during A/B testing. Figure 11 sum-
marizes the trace-based performance results. We found that
TCP-TACK’s video rebuffering ratio [25] is significantly re-
duced as compared with the legacy TCP or RTP based
projections. Also TCP-TACK’s macroblocking artifacts are
less as compared with the RTP transport. The application-
level benefit of TCP-TACK can be attributed to goodput
improvement because of reduced ACK overhead and effective
loss recovery. These experiences demonstrate TACK’s signif-
icant advantages for high-throughput and reliable wireless
transport.
6.5 Performance over combined links of
WLAN and WAN
TACK also works on the hybrid connections over both wired
and wireless links. Figure 12 illustrates the topology. A wire-
less client (Intel Wireless-AC 8260, 2 × 2) connects a wireless
router (TL-WDR7500) within a distance of 10 meters. Band-
width of WLAN is configured by setting different 802.11
standards on the wireless router. For example, the policy of
“802.11g only” provides a 54 Mbps bandwidth for the WLAN.
A hardware network emulator is deployed to provide pack-
et impairments and transport latency between the wireless
router and a wired server. For example, setting the latency of
100 ms on both ingress and egress ports of network emulator
provides a 200 ms RTT for the WAN. Packet loss rate on the
data path (𝜌) and on the ACK path (𝜌′) can also be set on
the ingress port and egress port, respectively.
Figure 13 shows the results when bandwidth of WLAN
is the bottleneck. Case 1 and Case 2 consider the cases
where a wireless client communicates with a domestic server.
Case 3 and Case 4 consider the cases where a wireless client
communicate with a cross-country server. All cases demon-
strate TCP-TACK’s advantage over legacy TCP on goodput.
This can be attributed to two reasons: (1) Significant ACK
frequency reduction improves WLAN bandwidth utilization,
and (2) TCP-TACK’s advancements in loss recovery, round-
trip timing and send rate control assure robust transmission
over the long-delay and lossy links of WAN.
Note that the number of ACKs of TCP-TACK in Case
1 is nearly 10 times of that in Case 3, this is because the
RTT on the WAN link has increased to 10 times in Case 3.
According to Equation (3), the higher RTT results in the
Figure 14: Violin-plots of performance ranking (200-
day public data traces from [63]).
lower TACK frequency even though the data throughput is
substantially higher. In addition, the number of ACKs in
Case 4 is nearly 20 K larger than that in Case 3, this is
because TCP-TACK adds more ACKs on the return path
when losses occur, in which the additional ACKs are almost
loss-event-driven IACKs.
6.6 Experience over real-world WAN links
Although the TACK-based protocols are designed for WLAN
scenarios, we tried evaluating the performance in WAN sce-
narios. Specifically, we have integrated TCP-TACK into the
Pantheon [59] and run long-term tests in different workloads
(single flow, or cross traffic). The Pantheon is a global-scale
community evaluation platform for academic research on
TCP variants. Measurement nodes are on wired networks
and in cloud datacenters across nine countries such as the US-
A, the UK, Japan and Australia. Links between endpoints are
with varying bandwidth and latency, and are non-dedicated,
i.e., there exists wild cross traffic over the Internet.
We investigate the overall performance of TCP-TACK
as well as a curated collection of 10 working implementa-
tions of high-speed protocol variants: TCP Vegas [16], TCP
CUBIC, TCP BBR [17], QUIC CUBIC (proto-quic [37]),
PCC-Allegro [26], PCC-Vivace [27], Indigo [33], Copa [10],
Verus [76], and Sprout [74]. All schemes are using their rec-
ommended parameters [62].
𝑂𝑊 𝐷95𝑡ℎ
For quantitative analysis, we summarize the performance
of each scheme using a version of Kleinrock’s power met-
ric [49] as the utility function 𝑙𝑜𝑔( 𝑇 ℎ𝑟𝑜𝑢𝑔ℎ𝑝𝑢𝑡𝑎𝑣𝑔
), where
𝑇 ℎ𝑟𝑜𝑢𝑔ℎ𝑝𝑢𝑡𝑎𝑣𝑔 denotes the mean throughput, and 𝑂𝑊 𝐷95𝑡ℎ
denotes the mean 95th percentile one-way delay (with clock
synchronization [59]). Figure 14 illustrates the ranking of
each scheme in tests during 200 days [63]. For each test, the
highest-power scheme has the smallest ranking value accord-
ing to the utility metric. Figure 14 reveals that TCP-TACK
achieves acceptable performance in the WAN scenarios5. It
is explained that the proposed TACK-based protocol design
overcomes the hurdles for reducing the ACK frequency. Note
that due to less contention between data packets and ACKs
in WAN, TACK achieves less performance gain in WAN than
that in WLAN.
5Note that QUIC CUBIC performs badly as it uses a very old version
which has already been deprecated [37].
Wireless clientServerWireless routerWLANWANbw=100Mbps/500MbpsRTT=20ms/200ms54Mbps/300MbpsNetwork emulatorGoodput(Mbps)WLANWANTCP BBRTCP-TACK(ρ, ρ(cid:255))(%)bw(Mbps)RTT(ms)bw(Mbps)(0, 0)(1, 1)(0, 0)(1, 1)123454543003002020200200100100500500CaseData pkt(#)ACK(#)Goodput(Mbps)Data pkt(#)ACK(#)17.1616.90159.50156.39190896175434165747617671971042988452388254589736120.2118.44190.22185.73222561213161206721222046472435626068247422407TCP VegasTCP-TACKTCP CUBICIndigoPCC-VivaceCopaTCP BBRPCC-AllegroQUIC CUBICVerusSprout1357911Ranking (smaller is better)SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Tong Li et al.
Our experience over real-world WAN links serves as a vali-
dation of the cooperation between TACK and receiver-based
transport paradigm. However, we believe more substantial
measurements are needed in the future, to answer the question
of how TACK-based protocols behave on various real-world
traffic patterns in WAN scenarios.
7 DISCUSSION, LIMITATIONS, AND
FUTURE WORK
Buffer requirement. Sending fewer ACKs increases bottle-
neck buffer requirement. Ideally, buffer requirement is decided
by the minimum send window (𝑊𝑚𝑖𝑛), i.e., 𝑊𝑚𝑖𝑛 − 𝑏𝑑𝑝. Giv-
𝛽−1 · 𝑏𝑑𝑝, 𝛽 ≥ 2. By default,
en by [50], we have 𝑊𝑚𝑖𝑛 = 𝛽
TCP-TACK (𝛽 = 4) requires a bottleneck buffer of 0.33
𝑏𝑑𝑝. However, in practice, buffer requirement might be en-
larged when the send rate control does not behave properly
under network dynamics. Pacing can help alleviate the prob-
lems associated with increased buffer requirements [2, 50].
Our experiment results in WAN scenarios (Figure 14) reveal
that TCP-TACK’s buffer requirement (based on OWD esti-
mate) can be bounded in practice. However, more substantial
measurements are needed for a deep dive into the buffer
requirement of TACK-based protocols in the future.
Handling reordering. Load balancing usually splits traffic
across multiple paths at a fine granularity [48]. By handling
the prevalent small degree of reordering on the transport
layer [52], we help network layer to achieve fine partition
granularity by enabling the load balancer to consider less
about reordering avoidance in traffic engineering. Thus, we
define the IACK delay as an allowance for settling time ([14]
and [21] recommend 𝑅𝑇 𝑇 𝑚𝑖𝑛
) before marking a packet lost.
In general, the IACK delay depends on the service’s tolerance
of retransmission redundancy. It can be adjusted dynamical-
ly according to whether unnecessary retransmissions occur,
which we leave as the further work.
4
Congestion controller. TACK impacts the implementation
of congestion controllers. For example, to work with TACK,
it is required to change sender-based control to receiver-based
control. This paper adopted a TACK-based congestion con-
troller co-designing BBR in a receiver-based way. Figure 15
shows that the co-designed BBR has the similar TCP friend-
liness to the standard BBR. In other words, as an ACK