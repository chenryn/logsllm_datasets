2、 要离开并丢弃更改，使用 `:q!`。这个命令也将允许你离开上面描述过的帮助菜单，并返回到命令模式中的当前文件。
3、 剪切 N 行：在命令模式中键入 `Ndd`。
4、 复制 M 行：在命令模式中键入 `Myy`。
5、 粘贴先前剪贴或复制过的行：在命令模式中按 `P`键。
6、 要插入另一个文件的内容到当前文件：
```
:r filename
```
例如，插入 `/etc/fstab` 的内容，可以这样做：
[在 vi 编辑器中插入文件的内容](http://www.tecmint.com/wp-content/uploads/2015/03/Insert-Content-vi-Editor.png)
*在 vi 编辑器中插入文件的内容*
7、 插入一个命令的输出到当前文档：
```
:r! command
```
例如，要在光标所在的当前位置后面插入日期和时间：
![在 vi 编辑器中插入时间和日期](/data/attachment/album/201509/15/231446qns4zsysfv77tssf.png)
*在 vi 编辑器中插入时间和日期*
在另一篇我写的文章中，([LFCS 系列（二）](http://www.tecmint.com/vi-editor-usage/))，我更加详细地解释了在 vim 中可用的键盘快捷键和功能。或许你可以参考那个教程来查看如何使用这个强大的文本编辑器的更深入的例子。
### 使用 grep 和正则表达式来分析文本
到现在为止，你已经学习了如何使用 nano 或 vim 创建和编辑文件。打个比方说，假如你成为了一个文本编辑器忍者 – 那又怎样呢？ 在其他事情上，你也需要知道如何在文本中搜索正则表达式。
正则表达式（也称为 "regex" 或 "regexp"） 是一种识别一个特定文本字符串或模式的方式，使得一个程序可以将这个模式和任意的文本字符串相比较。尽管利用 grep 来使用正则表达式值得用一整篇文章来描述，这里就让我们复习一些基本的知识：
**1、 最简单的正则表达式是一个由数字和字母构成的字符串（例如，单词 "svm"） ，或者两个（在使用两个字符串时，你可以使用 `|`(或) 操作符）：**
```
# grep -Ei 'svm|vmx' /proc/cpuinfo
```
上面命令的输出结果中若有这两个字符串之一的出现，则标志着你的处理器支持虚拟化:
![正则表达式示例](/data/attachment/album/201509/15/231447xf5wkowee5ecwsew.png)
*正则表达式示例*
**2、 第二种正则表达式是一个范围列表，由方括号包裹。**
例如， `c[aeiou]t` 匹配字符串 cat、cet、cit、cot 和 cut，而 `[a-z]` 和 `[0-9]` 则相应地匹配小写字母或十进制数字。假如你想重复正则表达式 X 次，在正则表达式的后面立即输入 `{X}`即可。
例如，让我们从 `/etc/fstab` 中析出存储设备的 UUID：
```
# grep -Ei '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}' -o /etc/fstab
```
![在 Linux 中从一个文件中析出字符串](/data/attachment/album/201509/15/231448zutw1oqegs11u6uw.png)
*从一个文件中析出字符串*
方括号中的第一个表达式 `[0-9a-f]` 被用来表示小写的十六进制字符，`{8}`是一个量词，暗示前面匹配的字符串应该重复的次数（在一个 UUID 中的开头序列是一个 8 个字符长的十六进制字符串）。
在圆括号中，量词 `{4}`和连字符暗示下一个序列是一个 4 个字符长的十六进制字符串，接着的量词 `({3})`表示前面的表达式要重复 3 次。
最后，在 UUID 中的最后一个 12 个字符长的十六进制字符串可以由 `[0-9a-f]{12}` 取得， `-o` 选项表示只打印出在 `/etc/fstab`中匹配行中的匹配的(非空)部分。
**3、 POSIX 字符类**
| 字符类 | 匹配 … |
| --- | --- |
| `[:alnum:]` | 任意字母或数字 [a-zA-Z0-9] |
| `[:alpha:]` | 任意字母 [a-zA-Z] |
| `[:blank:]` | 空格或制表符 |
| `[:cntrl:]` | 任意控制字符 (ASCII 码的 0 至 32) |
| `[:digit:]` | 任意数字 [0-9] |
| `[:graph:]` | 任意可见字符 |
| `[:lower:]` | 任意小写字母 [a-z] |
| `[:print:]` | 任意非控制字符 |
| `[:space:]` | 任意空格 |
| `[:punct:]` | 任意标点字符 |
| `[:upper:]` | 任意大写字母 [A-Z] |
| `[:xdigit:]` | 任意十六进制数字 [0-9a-fA-F] |
| `[:word:]` | 任意字母，数字和下划线 [a-zA-Z0-9\_] |
例如，我们可能会对查找已添加到我们系统中给真实用户的 UID 和 GID（参考“[RHCSA 系列（二）: 如何进行文件和目录管理](/article-6155-1.html)”来回忆起这些知识）感兴趣。那么，我们将在 `/etc/passwd` 文件中查找 4 个字符长的序列：
```
# grep -Ei [[:digit:]]{4} /etc/passwd
```
![在文件中查找一个字符串](/data/attachment/album/201509/15/231449tvx4ixv54xtw17g7.png)
*在文件中查找一个字符串*
上面的示例可能不是真实世界中使用正则表达式的最好案例，但它清晰地启发了我们如何使用 POSIX 字符类来使用 grep 分析文本。
### 总结
在这篇文章中，我们已经提供了一些技巧来最大地利用针对命令行用户的两个文本编辑器 nano 和 vim，这两个工具都有相关的扩展文档可供阅读，你可以分别查询它们的官方网站(链接在下面给出)以及使用“[RHCSA 系列（一）: 回顾基础命令及系统文档](/article-6133-1-rel.html)”中给出的建议。
#### 参考文件链接
* 
* 
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[FSSlc](https://github.com/FSSlc) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出