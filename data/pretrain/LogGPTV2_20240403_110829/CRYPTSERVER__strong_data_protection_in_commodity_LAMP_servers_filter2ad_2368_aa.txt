title:CRYPTSERVER: strong data protection in commodity LAMP servers
author:Zhaofeng Chen and
Xinshu Dong and
Prateek Saxena and
Zhenkai Liang
POSTER—CryptServer: Strong Data Protection in
Commodity LAMP Servers
Zhaofeng Chen
∗
Institute of Computer Science and Technology
Peking University
PI:EMAIL
Xinshu Dong, Prateek Saxena,
Zhenkai Liang
Department of Computer Science
National University of Singapore
{xdong,prateeks,liangzk}@comp.nus.edu.sg
ABSTRACT
Modern web applications store sensitive data on their servers.
Such data is prone to theft resulting from exploits against
vulnerabilities in the server software stacks. In this work, we
propose a new architecture for web servers, called Crypt-
Server, in which we pre-determine and ﬁx a small amount
of application code that can compute over sensitive data. By
encrypting sensitive data before making it available to the
rest of untrusted application code, CryptServer provides
strong defense against all malicious code that an attacker
may run in the server software stack. As a step towards
making this approach practical, we develop an assistance
tool to identify the portion of server-side logic that requires
computation over sensitive data. Our preliminary results
show that the size of such logic is small in six popular web
applications we study. To the extent of our evaluation, con-
verting these applications to a CryptServer architecture
requires modest developer eﬀort.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
Web security, server security, data protection
1.
INTRODUCTION
Web servers are prone to a large variety of attacks at the
application layer — SQL injection, server misconﬁguration,
data-to-code attacks, OS command injection, and so on [11].
These attacks can be used to exﬁltrate ﬁnancially sensitive
or user’s private data. A recent study shows that 54% of
data breaches involved compromised servers [10].
Several research works have started investigating mech-
anisms to protect sensitive data on web servers, such as
∗Research done when visiting National University of Singa-
pore
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512525.
applying encryption scheme to databases [3, 6] or by parti-
tioning web application code into diﬀerent trust levels [4, 5].
However, these techniques do not protect the sensitive data
comprehensively throughout its processing lifetime in the
web application code, and trust a large TCB.
Our Solution. In this work, we fortify web servers with
a new second line of defense to secure sensitive data on
commodity cloud-hosted LAMP servers. Conceptually, our
solution protects sensitive data by encrypting the sensitive
data and splitting the PHP engine logic into two strands of
computation logic: sensitive and non-sensitive. Only cer-
tain trusted functions that compute on sensitive data in the
PHP engine are executed in the sensitive strand. We call
such functions Pieces of Sensitive Logic (PSLs). We isloate
the PSLs in an isolated exectuion enviroment (trusted VM)
to provide rich computations on the encrypted data. All of
the rest of web application logic only has access to sensi-
tive data in encrypted form. With this new architecture,
which we call CryptServer, we signiﬁcantly reduce sensi-
tive data’s direct exposure to untrusted code on commodity
cloud-hosted server stacks.
To migrate existing web applications to this new architec-
ture, we take a two-phase approach to help the adoption: an
analysis phase and an instrumentation phase. In the anal-
ysis phase, we automatically identify PSLs in the PHP ap-
plication using an assistance tool we have built. When web
developers run this tool with their application test harness,
it tracks the ﬂow of sensitive data, and automatically iden-
tiﬁes functions that compute on the sensitive data.
Once all the PSLs for the application are identiﬁed, we
manually instrument the original PHP application to invoke
the corresponding PSL functionality running in an isolated
environment (e.g.
in a VM, a PAL [1], or a hypapp [9]).
CryptServer enforces that all data input and output from
PSLs are cryptographically sealed, i.e., protected with au-
thenticated encryption. All data exchanged between the
transformed PSLs and the non-PSLs is encrypted using au-
thenticated encryption. Thus, the vulnerable web server,
even if compromised, can only observe the encrypted ﬂows
of sensitive data.
Our main empirical ﬁnding is that PSL logic for the real-
world applications we test is small. It consists of only 30K
lines of C code of the PHP interpreter logic that runs in the
trusted isolated environment.
In contrast, previous works
that partition servers, such as CLAMP [5] and SilverLine [7],
have reported either much lareger TCB [5] or do not per-
mit any computation on sensitive data [7]. Our evaluation
1457reports that CryptServer is expressive enough to support
real-world ﬂows of sensitive data without directly leaking
information about sensitive data through explicit channels.
We also ﬁnd that the developer eﬀort to migrate existing
applications to this new architecture is on the order of a few
hours, with the help of our assistance tool.
In summary, to our knowledge, CryptServer is the ﬁrst
to propose an architecture that enables signiﬁcant TCB re-
duction in web server stacks with authenticated encryption;
our analysis tool and preliminary results verify its applica-
bility to existing web applications. CryptServer comple-
ments server platforms with encrypted databases [6].
Figure 1: Architecture of CryptServer
2. CryptServer ARCHITECTURE
Figure 1 shows the CryptServer architecture.
In our
setting, the web server stack is built on top of a trusted
hypervisor. The entire web server stack in the server VM is
not trusted and is assumed to be vulnerable.
CryptServer Proxy. Our target is to secure both the
conﬁdentiality and integrity of sensitive data with authen-
ticated encryption. In our approach, a lightweight Crypt-
Server Proxy is introduced to encrypt sensitive data based
on developer annotations before the data ﬂows into the PHP
application server VM. Similar to CLAMP [5], we have an
HTTPS front end that authenticates the users, and performs
key management and access control. On receiving each re-
quest from the client, the proxy authenticates the user and
invokes the underlying hypercalls to encrypt sensitive data
in annotated HTTP request ﬁelds with the per-user secret
key accordingly. Then the encrypted data is delivered to
the untrusted server VM. An alternative approach is that
the client (e.g. user browser) helps encrypt the sensitive
data instead of the proxy.
Untrusted PHP Server VM. When the encrypted sensi-
tive data ﬂows into the vulnerable server, the pre-compiled
PHP opcodes (see details in Section 3) start execution in
the PHP engine. Only parts of the opcode functions handle
the sensitive data. We treat a function as PSL if and only if
it receives sensitive data as arguments, and returns a value.
To enable PSLs to operate on the encrypted sensitive data,
we manually instrument the PSLs to make remote call to a
trusted VM for computation on encrypted data.
Trusted VM. We isolate PSLs into a separate trusted VM
(DOM0 in Xen Hypervisor [2]) that provides a Sensitive Op-
eration Service (SOS) component to facilitate access to the
sensitive data. When a sensitive operation is requested from
the PHP server VM, the SOS ﬁrst decrypts the sensitive data
and checks the data integrity. If the check passes, the SOS
component calls the requesting PSL to compute on the de-
crypted data. Finally, the SOS component encrypts the re-
turn value with authenticated encryption scheme and sends
it back to the PHP server VM.
If all arguments in the request are encrypted, an attacker
cannot tamper with them without failing the integrity check
by the SOS component. However, there are cases where both
sensitive (encrypted) and non-sensitive (unencrypted) data
appear in the argument list. For example, PHP applica-
tions frequently search for special characters in user input
strings. In this case, the input string is sensitive while the
special character set is a constant and non-sensitive variable.
An attacker can manipulate the constant argument value to
obtain information on the sensitive data. We prevent such
information leakage channels by applying the analysis as we
detail in Section 3 to identify constant values that ﬂow into
function arguments, and encrypt them to prevent tampering
from malicious code.
Summary. In the CryptServer architecture, any sensi-
tive data ﬂowing into the vulnerable server is encrypted.
For ease of implementation, we are currently not encrypt-
ing boolean return values. This could leak certain control
ﬂow information to attackers. However, by design, PSLs do
not allow attackers to control the argument values, as they
take encrypted sensitive values and pre-encrypted constant
and static variables as arguments. This achieves reduced in-
distinguishability [8]. In addition, as we show in Section 4,