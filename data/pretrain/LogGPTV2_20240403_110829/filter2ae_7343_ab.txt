**NVD条目。** 对于每个CVE ID还解析NVD条目的JSON版本，其中包含结构化数据字段，例如易受攻击的软件名称及其版本。
总共获得78,296个NVD条目。
**数据提取和预处理。** 对于结构化报告，直接按照固定格式解析易受攻击的软件名称和版本信息。
对于非结构化漏洞报告和CVE摘要，使用NLTK工具包提取文本信息，删除所有Web链接，并对句子进行标记化。
请注意没有从非结构化文本中删除任何停用词或符号，因为它们通常是软件名称和版本的一部分。
### 四、模型评估
使用内存损坏漏洞报告及其CVE摘要(3，448个CVE ID)的数据对NER和RE模型进行评估。
**1）NER模型。** 给定一个文档，NER模型会提取漏洞软件名称和漏洞版本。
提取过程首先在单词级别，然后具有SN或SV标签的连续单词将被分组为软件名称或软件版本。
在单词级别提取中使用三个评估指标：（1）精确度表示相关对象在提取的实体上的比例; （2）召率回代表在相关对象总数中提取的相关对象的比例;
（3）总体准确度代表所有预测的正确预测的分数。 分别计算软件名称提取和版本提取的精度和召回率。
以8：1：1的比例切分数据集，用于训练，验证和测试。 这里预训练的单词嵌入的维度是300， 为了对齐输入序列，只考虑每个句子的前200个单词。
根据经验，观察到绝大多数句子短于200个单词， 除了单字级嵌入权重W（使用FastText方法）之外，NER模型中的所有层都被联合训练。
默认批量大小为50，轮次数为20。采用一种改进的随机梯度下降方法ADAM作为优化器，可以自适应地调整学习速度减少收敛时间，也采用丢弃法（dropout）来防止过拟合。
通过随机分割数据集进行10次重复实验，下表中显示了平均精度，召回率和准确度。即使不使用名录（即字典），NER模型也非常准确。
可以提取漏洞软件名称和版本，精度为0.978，召回率为0.991。 此外，名录字典证明软件名称提取的性能是可预期的。 应用名录后，整体精度高达0.9969。
这种高精度的NER是理想的，因为任何错误都可能传播到后来的RE模型。
**2）RE模型。** 首先检查RE模型本身的性能，然后通过组合NER和RE来评估端到端性能。
与之前类似，将数据集与8：1：1的比例分开进行训练，验证和测试。
在这里将预训练的单词嵌入的维度设置为50。位置嵌入的维度为10。默认批量大小为80，轮次数为200，将 _双向图层_ 的数量设置为2
。与NER模型一样，RE模型也使用预训练的单词嵌入权重W。位置嵌入权重（即Ws和Wv）随机初始化并与模型中的其他参数一起训练。
首先进行实验以单独评估RE模型。 更具体地说，假设已经正确提取了命名对象，只使用RE测试“配对”过程。 这假设早期的NER模型具有完美的性能。
如下表所示RE模型也非常准确。 该模型的精度为0.9955，召回率为0.9825
其次评估端到端性能，并使用NER的输出作为RE模型的输入。 这样，NER的错误可能会影响RE的性能。
如上表所示，准确度从0.9916降至0.9704（没有名录）和0.9764（使用名录）。
退化主要发生在精确度上。进一步的检查表明，NER模型错误地提取了一些非软件名称的对象，这些对象成为RE的错误输入并损害了分类精度。
此外，在NER和RE组合后，名录的好处也出现了，将精度从0.9248提高到0.9411（不会损害召回率）。
结果证实模型能够准确地从非结构化文本中提取漏洞软件名称和相应的版本。
### 五、不一致性测评及结果
**匹配软件名称。** 给定CVE ID，首先匹配NVD数据库中列出的漏洞软件名称和非结构化文本中列出的漏软件名称。 更具体地说，让C =
{（N1，V1），（N2，V2），...，（Nn，Vn）}是从NVD中提取的漏软件名称 - 版本对，并且C‘= {（N1， V
‘1），（N2，V‘2），...，（Nm，V‘ m）}是从外部文本中提取的名称版本对。 在数据集中，大约20％的CVE
ID与多个软件名称相关联。本文只关注NVD和外部端口之间匹配的软件名称，本文匹配方法可以灵活地处理相同软件名称略微不同的格式。如果匹配词的数量高于或等于不匹配的单词数，就认为两个名称是匹配的。例如，“Microsoft
Internet Explorer”和“Internet Explorer”匹配，因为匹配的单词比不匹配的单词更多。
**版本一致性测评。** 给定软件名称N1，寻求测评报告版本V1和V’1的一致性。 检查两种类型的匹配。首先严格匹配即V1和V’1彼此完全匹配（V1 =
V’1）。 其次，松散匹配意味着一个版本是另一个版本的超集（V1⊆V’1或V1⊇V’1）。 请注意，松散匹配的案例包含严格匹配的案例。
除了松散匹配之外，它意味着V1和V’1每个都包含一些不被另一个报告的漏洞版本（即冲突的信息）。
在所有78296个CVE ID中，总共提取18764个唯一的漏洞软件名称。这些漏洞软件名称对应于CVE摘要中的154569个软件名称-版本对、外部漏洞报告中的235350个名称-版本对以及NVD数据库中的165822个名称-版本对。在NVD和其他源之间匹配软件名称后，剩下389476要检查一致性。
在名称-版本对程度上，发现305，037对严格匹配(78.32%)。这意味着来自NVD的名称版本对中约有22%与外部信息源不匹配。如果在松散匹配条件下，发现361，005对松散配对(93.49%)。
将匹配的结果聚合到报表程度，虽然松散匹配率仍较高(90.05%)，但严格匹配率明显降低。只有59.82%的漏洞报告/CVE摘要严格匹配NVD条目。这是因为严格匹配的报告要求所有提取的版本都与NVD的版本相匹配。
下图显示了NVD条目与5个信息网站和CVE网站之间的匹配率。CVE具有较高的匹配率（约70%的严格匹配率）。考虑到NVD据称与CVE反馈同步，这并不奇怪。更有趣的是，发现漏洞数据库与NVD的匹配率更高。通过进一步研究了NVD条目的发布日期以及其他网站上相应的报告，发现大部分（95.8%）的漏洞数据库报告是在创建NVD条目之后发布的。然而，81%的漏洞数据库报告比其他4个网站的报告发布得更早，这可能有助于引起NVD团队的注意，以便进行更新。
下图显示了松散匹配对中声明漏洞版本范围过高或过低的NVD条目的百分比。此分析中不包括“严格匹配”对，并不惊讶地发现NVD条目声明漏洞版本范围过高。考虑到NVD应该搜索不同的源以使条目保持最新，因此NVD条目覆盖更多易受攻击的版本是合理的。即使把5个网站和CVE的易受攻击版本联合起来，NVD仍然覆盖着更多的版本。
下图显示了NVD和其他6个信息源（CVE和5个报告网站）之间的一致性水平随着时间的推移而下降。严格匹配率随时间有一定波动，但仍呈下降趋势。对两个匹配率进行线性回归，发现两者都有负斜率（分别为-0.0015和-0.0056）。结果表明，在过去20年中，总体一致性随着时间的推移而下降。然而，如果仔细观察近三年（2016年至2018年），一致性水平开始上升，这是一个好迹象。
当比较CVE和5个外部网站之间的一致性时，下图显示了不同的趋势。CVE与外部站点的一致性水平相对稳定，略有上升趋势。对两个匹配率进行线性回归，这两个匹配率均返回正斜率（分别为0.0006和0.0028）。这表明CVE网站在总结漏洞版本方面做得更好。
最后，通过分析与外部报告发布时间相关的NVD条目创建/更新时间来推断不一致的原因。更具体地说，NVD为每个CVE
ID维护一个“更改历史记录”，这允许提取条目创建时间以及添加/删除新软件版本的时间。然后可以将其与5个网站上相应报告的发布时间进行比较。为此随机选择了5000个CVE
ID，其在NVD中的易受攻击版本与5个网站中的版本不一致。
本文发现66.3%的NVD条目自第一次创建以来从未更新过。这包括5.8%的NVD条目，这些条目是在5个网站中的任何一个发布报告之前创建的。例如，对于CVE-2006-6516，NVD声称KDPICS1.16在2006年是存在漏洞的。2010年以后，SecurityFocus报告称，1.11版和1.16版都是存在漏洞的。直到今天，NVD才添加新版本1.11。对于NVD条目中更大的部分（60.5%），它们是在至少一个外部报告可用时创建的。一个例子是CVE-2016-6855，因为漏洞数据库声称Eye
of Gnome 3.10.2在2016年8月存在漏洞。一个月后，创建了不包括3.10.2版本的NVD条目。自那时以来，没有进行任何更新。
对于剩下的33.7%的NVD条目，它们在条目创建后至少漏洞版本进行了一次更新。对此比较了5个网站上外部报告的最新更新时间和发布时间，发现所有的NVD条目在一些外部报告发布时间之后都进行了最新的更新。总的来说这些结果表明，NVD团队没有有效地包括来自外部报告的漏洞版本，尽管这些报告在条目创建/更新时已经可用。结果反过来反映了自动监控不同在线源和提取漏洞版本以进行更主动的版本测试和条目更新的需要。
本文得出的结果意味着系统管理员或安全分析师不能简单地依赖NVD/CVE信息来确定受影响软件的漏洞版本。
至少，浏览外部漏洞报告有助于更好地覆盖潜在的漏洞版本。深入的案例研究证实，NVD/CVE数据库和第三方报告要么错过了真正漏洞软件版本，要么错误地包含了非漏洞版本。
错误的信息可能会使漏洞软件无法打补丁，或者增加安全分析师的手动工作以进行风险评估。 社区正日益需要系统地纠正漏洞报告中不准确的声明。