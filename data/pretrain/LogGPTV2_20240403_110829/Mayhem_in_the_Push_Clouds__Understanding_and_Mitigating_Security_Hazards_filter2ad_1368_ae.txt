prepare and send out an upstream message. On the server side, the
API checkin was used to generate the secret key and send it to
the app, store_regid for handling the registration ID from the
app and secure_message for preparing a message before hand-
ing it over to the connection server. Here we report an evaluation
of its effectiveness in defending against the attacks through GCM
and its performance impact.
Effectiveness. We ran the app against all the GCM-related attacks
in Section 3 and Section 4. Even though the adversary was still able
to hijack the app’s registration ID to bind it to the attack device or
use it to inject messages to the apps, due to the underlying GCM
vulnerabilities, our app was found to effectively fend off all those
attacks. Speciﬁcally, all the messages that came from the adversary
was easily identiﬁed through the authenticated encryption scheme
and then dropped by onReceiveMessage. Also, through the
random probing, the app server immediately identiﬁed the attack
based on exploiting the GCM authentication problem (Section 3.1),
since the adversary in this case could not come up with the right
response by himself and was not able to play the MitM to let our
app do that. More complicated here is the misbinding attack using
PendingIntent (Section 4.2), in which the adversary had the
capability to talk to the target app and could therefore relay the
challenge from the server to the target. However, the adversary had
to keep on doing that to avoid getting caught: once he stopped,
our app server quickly found out the problem after pushing a few
messages, as observed in our experiment.
baseline
Secomp
delay
send message mean/sd(ms)
2.88 / 10.33
6.63 / 11.05
3.75 / 4.28
receive message delay mean/sd(ms)
0 / 0
3.63 / 4.87
3.63 / 4.87
Table 4: Performance of Secomp (test 200 times). Note that in
the case of the baseline, the receiving method delivers a message
instantly; for Secomp, a very small overhead is introduced for
decrypting the message, checking its integrity and restore the
data
Performance. We further measured the performance of the app
by comparing it with a baseline, a version using unprotected GCM
SDKs. Our evaluation focused on the delay caused by receiving
and sending messages: for the registration process, it is identical
to what happens to the baseline, since our current design com-
bines key exchange with cookie setting and therefore does not in-
cur any extra cost. As we can see from Figure 4, the overheads
caused by sending and receiving messages are low (within 10 ms
per message), which was completely caused by AES (in the Ga-
lois/Counter Mode) encryption and decryption (with a message size
of 256 bytes). In Appendix A, we present our measurement of this
cost over messages of different sizes.
7. DISCUSSION
We report our security analysis on push-messaging services in
the paper, which reveals critical security weaknesses inside the
most popular services (e.g., GCM, ADM, etc.), enabling an unau-
thorized party to lock out the legitimate user of a device, wipe out
her data, silently install/uninstall any apps and steal her sensitive
messages. Given the complexity of such services, we believe that
what we found is nothing more than a tip of the iceberg. Speciﬁ-
cally, we only inspected the cloud-device link and on-device link,
and have not yet looked into the interactions between connection
servers and the developer’s app server, and the way that the app
server directly talks to the developers’ apps. Even for the “links”
we studied, our research is still incomprehensive, missing some
important services such as Apple Push Notiﬁcation Service. More
effort is certainly needed to dig deeper on this subject to better un-
derstand the security risks in push messaging services and mobile
clouds in general.
On the defense side, our current design and implementation of
Secomp is still preliminary. Particularly, we built our SDKs as a
wrapper of the GCM SDKs, making it convenient for the devel-
opers to retroﬁt them into their apps: all they need to do is just a
small adjustment of the APIs the apps call to activate the new pro-
tection. On the other hand, this treatment makes our tool kit less
general, requiring a new implementation for a different service. We
are debating on other options, including a design that allows the de-
987veloper to build into her app no matter what kind of push-message
service it subscribes.
8. RELATED WORK
Mobile cloud security. Cloud computing has been used to pro-
tect mobile devices, including malware scanning [28] and dynamic
analysis of apps [29]. On the other hand, the platform is also abused
by the adversary, who uses push-messaging services as a command
and control channel for botnets [5, 35]. However, little has been
done to understand the weaknesses in protecting the services pro-
vided by existing mobile clouds and the consequences once they
have been exploited, not to mention any concrete effort to enhance
the protection of mobile cloud services, push messaging in partic-
ular, toward which we made the ﬁrst step in our research.
Security implications of Android IPC. Extensive studies have
been done on the security of Android Inter-Process Communication
(IPC), including the intent broadcasting and service invocation with
regard to an action. Examples include the prior work that identiﬁes
the security risks in the IPC channel [21, 24, 32, 23], the permission
re-delegation problems [25], and the data leak and pollution issues
in content providers [36, 33]. Although the security ﬂaws we dis-
covered on the on-device link are often related to the known IPC
vulnerabilities (e.g, intent broadcast), which enables our attack app
to intercept messages of a cloud-mobile service, oftentimes, such
an exposure itself does not directly reveal sensitive user informa-
tion.
Instead, we studied how to use the capability it discloses,
the PendingIntent object, to collect conﬁdential user data and
inject security-critical commands to the victim’s apps. Up to our
knowledge, this is the ﬁrst attempt to utilize the object for attack-
ing real systems. Also importantly, our work demonstrates the seri-
ous security risk that comes with the common practice of using the
PendingIntent to provide the origin of an IPC request, which
can easily lead to other vulnerabilities.
Also, techniques have been developed to mitigate the security
problems in Android IPC, ﬁnding the vulnerabilities through a static
analysis [21, 27, 26] or a dynamic analysis [22, 20]. These tech-
niques can help detect some vulnerable IPC usages, which we show
in our study still widely exist in popular apps and mobile-cloud ser-
vices. However, we are not aware of any prior effort to secure the
end-to-end communication between an app and its server across the
underlying mobile cloud service, which can have those known vul-
nerabilities and the new ones found in our research, and is beyond
the control of app developers who need to use it.
Authentication in web applications. The problems in web appli-
cations’ authentication mechanisms have been extensively studied
recently [19, 30, 17]. For example, prior research reveals serious
logic ﬂaws in popular single-sign-on systems [31]. New techniques
for mitigating the security threats related to those ﬂaws and other
authentication problems have also be developed [18, 34]. Our re-
search made the ﬁrst step in understanding the authentication is-
sues in mobile clouds, particularly the push-messaging services
they provide, which has not been done before. A unique feature
of those services is that they authenticate their apps without the
user’s intervention (e.g., entering her credentials), which makes the
authentication process more difﬁcult to analyze.
9. CONCLUSION
In this paper, we present the ﬁrst security analysis on popular
push-messaging services. Our research shows that these services
are highly error-prone, allowing unauthorized parties to bind a tar-
get app’s registration to an attack device or inject arbitrary mes-
sages to the app, both locally and remotely. As a result, the adver-
sary can intercept sensitive user messages (Facebook posts, Skype
messages, bank account balance, etc.) or even command Android
service apps to stealthily install/uninstall any apps on the target de-
vice, lock out its legitimate user or wipe out her data. The prob-
lems were found to affect many popular apps, such as Facebook,
Google Plus, Skype and PayPal/Chase apps, bringing in serious se-
curity threats to billions of Android users. Fundamentally, they
come from questionable practices in developing those services, in-
cluding weak server-side authentication and access control, and the
insecure use of the IPC channels and PendingIntent. To mit-
igate those threats and help app developers protect their commu-
nication over those services, we designed and implemented a new
technique that establishes an end-to-end secure channel on top of
existing push-messaging services.
Given the critical role played by push-messaging services in the
mobile ecosystem and their complexity, we expect that more effort
will be made to further the understanding of their security implica-
tions, and improve our technique to safeguard such channels.
10. ACKNOWLEDGMENTS
We thank Manoj Prabhakaran for useful discussion about the
cryptographic solution. The project is supported in part by Na-
tional Science Foundation CNS-1017782, 1117106, 1223477 and
1223495. Authors from Peking University are supported in part
by National Development and Reform Commission (NDRC) under
Project “Guidelines for protecting personal information”.
11. REFERENCES
[1] adb logcat. http://developer.android.com/
tools/help/logcat.html.
[2] Android Device Manager. https:
//www.google.com/android/devicemanager.
[3] Android Security Acknowledgements.
https://source.android.com/devices/tech/
security/acknowledgements.html.
[4] Baksmali. https://code.google.com/p/smali/.
[5] Cybercriminals use Google Cloud Messaging to control
malware on Android devices. http://www.pcworld.
com/article/2046642/cybercriminals-use-
google-cloud-messaging-service-to-
control-malware-on-android-devices.html.
[6] Dex2jar. http://code.google.com/p/dex2jar/.
[7] Google Cloud Messaging for Android.
http://developer.android.com/google/gcm/
index.html.
[8] Google I/O 2013.
http://www.zdnet.com/io-2013-more-than-
half-of-apps-in-google-play-now-use-
cloud-messaging-7000015511/.
[9] JD-GUI. http://jd.benow.ca/.
[10] Kindle Fire’s market share.
http://www.geekwire.com/2013/kindle-
fire-scorching-android-tablet-market-33-
share/.
[11] Mallory. https:
//intrepidusgroup.com/insight/mallory/.
[12] mitmproxy. http://mitmproxy.org/.
[13] Sina. http://www.sina.com.cn/.
[14] Sina Weibo. https://play.google.com/store/
apps/details?id=com.sina.weibo.
988[15] Supporting materials. https:
//sites.google.com/site/cloudmsging/.
[16] UrbanAirship. http://urbanairship.com/.
[17] A. Armando, R. Carbone, L. Compagna, J. Cuéllar,
G. Pellegrino, and A. Sorniotti. An authentication ﬂaw in
browser-based single sign-on protocols: Impact and
remediations. Computers & Security, 33:41–58, 2013.
[18] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena,
J. Sun, Y. Liu, and J. S. Dong. Authscan: Automatic
extraction of web authentication protocols from
implementations. In Network and Distributed System
Security Symposium, 2013.
[19] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering
concrete attacks on website authorization by formal analysis.
In Computer Security Foundations Symposium (CSF), 2012
IEEE 25th, pages 247–262. IEEE, 2012.
[20] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry. Towards taming privilege-escalation attacks
on android. In 19th Annual Network & Distributed System
Security Symposium (NDSS), volume 17, pages 18–25, 2012.
[21] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in android. In
Proceedings of the 9th international conference on Mobile
systems, applications, and services, pages 239–252. ACM,
2011.
[22] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
Quire: Lightweight provenance for smart phone operating
systems. In USENIX Security Symposium, 2011.
[23] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study
of android application security. In USENIX Security
Symposium, 2011.
[24] W. Enck, M. Ongtang, P. D. McDaniel, et al. Understanding
android security. IEEE Security & Privacy, 7(1):50–57,
2009.
[25] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission re-delegation: Attacks and defenses. In USENIX
Security Symposium, 2011.
[26] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic
detection of capability leaks in stock android smartphones. In
Proceedings of the 19th Annual Symposium on Network and
Distributed System Security, 2012.
[27] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: statically
vetting android apps for component hijacking vulnerabilities.
In Proceedings of the 2012 ACM conference on Computer
and communications security, pages 229–240. ACM, 2012.
[28] J. Oberheide, K. Veeraraghavan, E. Cooke, J. Flinn, and
F. Jahanian. Virtualized in-cloud security services for mobile
devices. In Proceedings of the First Workshop on
Virtualization in Mobile Computing, pages 31–35. ACM,
2008.
[29] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos.
Paranoid android: versatile protection for smartphones. In
Proceedings of the 26th Annual Computer Security
Applications Conference, pages 347–356. ACM, 2010.
[30] S.-T. Sun and K. Beznosov. The devil is in the
(implementation) details: an empirical analysis of oauth sso
systems. In Proceedings of the 2012 ACM conference on
Computer and communications security, pages 378–390.
ACM, 2012.
[31] R. Wang, S. Chen, and X. Wang. Signing me onto your
accounts through facebook and google: A trafﬁc-guided
security study of commercially deployed single-sign-on web
services. In Security and Privacy (SP), 2012 IEEE
Symposium on, pages 365–379. IEEE, 2012.
[32] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized
origin crossing on mobile platforms: Threats and mitigation.
In Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security, pages 635–646.
ACM, 2013.
[33] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact
of vendor customizations on android security. In Proceedings
of the 2013 ACM SIGSAC conference on Computer &
communications security, pages 623–634. ACM, 2013.
[34] L. Xing, Y. Chen, X. Wang, and S. Chen. Integuard: Toward
automatic protection of third-party web service integrations.
In 20th Annual Network and Distributed System Security
Symposium, NDSS, pages 24–27, 2013.
[35] S. Zhao, P. P. Lee, J. Lui, X. Guan, X. Ma, and J. Tao.
Cloud-based push-styled mobile botnets: a case study of
exploiting the cloud to device messaging service. In
Proceedings of the 28th Annual Computer Security
Applications Conference, pages 119–128. ACM, 2012.
[36] Y. Zhou and X. Jiang. Detecting passive content leaks and
pollution in android applications. In Proceedings of the 20th
Annual Symposium on Network and Distributed System
Security, 2013.
APPENDIX
A. COST OF PERFORMING ENCRYPTION
ON MOBILE DEVICE
Because mobile device has limited battery and computation power,
we further measure the cost of doing encryption and decryption on
a mobile device. Figure 5 shows the cost of performing encryption
and decryption on a mobile device. For each message length, we
test 1024 times and calculate the mean value. As we can see, for a
message of 4096 bytes (maximum message size allowed by GCM),
it takes less than 10ms using AES in Galois/Counter Mode
on Nexus 7 with Quad-core 1.5 GHz Krait CPU.
Figure 5: Average cost of performing encryption and decryp-
tion on mobile device.
01234567891005121024153620482560307235844096Time (ms)Message Length (byte)AES Galois/Counter Mode Encryption/Decryption cost on Nexus 7encryptiondecryption989