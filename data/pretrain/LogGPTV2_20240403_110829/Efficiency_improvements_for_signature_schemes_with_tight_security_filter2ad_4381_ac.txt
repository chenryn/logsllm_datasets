computes A
B
, m) = c.
)-DDH group with |G| = q
such that exponentiation in G takes time texp. Then the
above signature scheme is (t, qh, qs, ε)-secure (in the random
oracle model), where:
t ≤ t
ε ≥ ε
(cid:4) − 2.4(qs + 1)texp
(cid:4)
+ qsqhq
. The stated result follows.
Proof. Assume we have an algorithm F, running in time
at most t and making at most qh hash queries and at most
qh signing queries, which forges a new message/signature
pair with probability at least ε. We use F to construct
an algorithm D running in time t
which solves the DDH
problem with probability ε
Algorithm D is given as input a tuple (g, h, y1, y2); its goal
is to determine whether this represents a “random tuple” or
a “DDH tuple”. To this end, it sets P K = (g, h, y1, y2) and
runs F on input P K. Algorithm D simulates the signing
oracle and the random oracle for F as follows:
Hash queries.
In response to a query H(P K, A, B, m),
algorithm D ﬁrst determines whether the output of H on this
input has been previously set (either directly by a previous
hash query, or as part of a signature query). If so, D returns
the previously-assigned value. Otherwise, D responds with
a value chosen uniformly at random from Zq.
If F asks for a signature on message
Signing queries.
m, then D attempts — in the standard way — to simu-
late a proof that (g, h, y1, y2) is a DDH tuple. Thus, D
(cid:4)
(cid:4)
−c
1
−˜c
1
−c
2 .
chooses random c, s ∈ Zq and computes A = gsy
and
B = hsy
If H had previously been queried on input
(P K, A, B, m) then D aborts (with output 0); otherwise, D
sets H(P K, A, B, m) = c and outputs the signature (c, s)
and ˜B = h˜sy
At some point, F outputs its forgery ( ˜m, ˜σ = (˜c, ˜s)), where
we assume that ˜σ was not previously the response to a query
−˜c
SignSK( ˜m). Letting ˜A = g ˜sy
2 , we also as-
sume that F has previously queried H(P K, ˜A, ˜B, ˜m). Now,
if H(P K, ˜A, ˜B, ˜m) = c (i.e., VrfyP K ( ˜m, ˜σ) = 1) then D out-
puts 1; otherwise, D outputs 0.
We now analyze the probability that D outputs 1.
If
(g, h, y1, y2) is a Diﬃe-Hellman tuple, then D provides a per-
fect simulation for F except for the possibility of an abort.
An abort can occur during D’s simulation of any of the sign-
ing queries; in the simulation of any particular signing query,
it is not hard to see that the probability of abort is at most
qh/|G |. Thus the overall probability that D aborts is at most
qsqh/|G |. This means that F outputs a forgery (and hence
D outputs 1) with probability at least ε − qsqh/q.
On the other hand, if (g, h, y1, y2) is a random tuple then
with probability 1 − 1/q it is not a Diﬃe-Hellman tuple. In
this case, for any query H(P K, A, B, m) made by F there
is at most one possible value of c for which there exists an s
satisfying A = gsy
(this is easy to see by
looking at the two linear equations over Zq in the exponent).
Thus, F outputs a forgery (and hence D outputs 1) with
probability at most q
and B = hsy
−1 + qhq
−1.
−c
2
−c
1
Putting everything together, we see that
|Pr[x, y ← Zq : D(g, gx, gy, gxy) = 1]
− Pr[x, y, z ← Zq : D(g, gx, gy, gz) = 1]|
≥ ε − qsqhq
≥ ε
.
(cid:4)
−1 − q
−1
(1 + qh)
The running time of D includes the running time of F and is
otherwise dominated by the two multi-exponentiations that
are performed for each query to the signing oracle plus those
done in verifying the output of F. Assuming (as in [18])
that a two-exponent multi-exponentiation takes time 1.2texp
gives the result of the theorem.
Remark. This technique of using the Fiat-Shamir heuris-
tic to provide a proof rather than a proof of knowledge can
be used more generally to achieve a tight security reduction
based on a decisional problem rather than a non-tight secu-
rity reduction based on a computational problem. As one ex-
ample, the Fiat-Shamir signature scheme [16] includes values
{yi} in the public key and the signer proves knowledge of the
square roots of these values. Using the “forking lemma” of
Pointcheval and Stern [24], we may thus obtain a non-tight
security reduction for this scheme based on the hardness of
computing square roots modulo N (which is equivalent to
the hardness of factoring N ). On the other hand, by hav-
ing the signer prove that the {yi} are all quadratic residues
(without necessarily proving knowledge of their square roots),
we may obtain a tight security reduction based on the hard-
ness of deciding quadratic residuosity.
3.2 Discussion
Our signature scheme is more eﬃcient than the scheme
analyzed by Goh and Jarecki when working over the same
group G . Signing in our scheme requires 2 exponentiations
which may be pre-computed “oﬀ-line” before the message to
be signed is known; this may be compared to the 3 exponen-
tiations required in the Goh-Jarecki scheme (one of which
must be computed after the message is known). Veriﬁcation
in both schemes requires 2 multi-exponentiations. Our sig-
nature scheme vastly outperforms the Goh-Jarecki scheme
in terms of signature length: signatures in our scheme are
2|q| bits, compared to |p| + 2|q| + 111 bits in [18] (in prac-
tice, |p| ≈ 1000 while |q| ≈ 160). Finally, an oft-neglected
aspect of cryptographic protocols is their ease of implemen-
tation; here, too, we believe our scheme oﬀers practical ad-
vantages. The Goh-Jarecki scheme requires two indepen-
dent hash functions, one of which has G as its range; this
seems more diﬃcult to implement correctly than a single
hash function mapping onto Zq.
Interestingly, we also obtain a tighter security reduction
than Goh and Jarecki: assuming texp is 100 times larger than
the time to evaluate H and letting t = qh = 260, qs = 230,
and |q| ≥ 160, we obtain the (essentially) optimal:
(cid:4) ≈ t, ε
(cid:4) ≈ ε,
t
whereas Goh-Jarecki [18] obtain a (small) 28 decrease in se-
curity. Thus, our reduction carries no decrease in security,
and our signature scheme is as hard to break as the underly-
ing DDH problem is to solve. Of course, the security of our
scheme is based on the (potentially) easier DDH problem
rather than the CDH problem. Still, given current tech-
niques the DDH problem is as hard as the CDH problem
(and both are as hard as the discrete logarithm problem)
for a number of widely-used groups [4].
4. AVOIDING THE RANDOM SALT IN PSS
We begin with an informal recap of previous work on
FDH, PSS, and probabilistic FDH (PFDH); PFDH was in-
troduced by Coron [12] as a “simpliﬁed” version of PSS
which highlights the key features of PSS while being slightly
less eﬃcient in general (yet, the “PFDH methodology” was
adopted by Goh and Jarecki to improve the security of their
scheme [18]). Throughout, we let H denote a random oracle
mapping strings to the appropriate range.
FDH was originally deﬁned [1] for an arbitrary trapdoor
permutation. Key generation simply generates a trapdoor
permutation f as the public key, and the secret key is the
−1.
associated trapdoor allowing eﬃcient computation of f
−1(H(m));
To sign message m, the signer outputs σ = f
veriﬁcation is done in the obvious way. Bellare and Rog-
away showed that if f cannot be inverted with probability
(cid:4)
better than ε
, then forgery with probability better than
ε ≈ (qh + qs)ε
(cid:4)
is impossible. In their proof, the simulator
“guesses” the index i of the hash query which results in a
forgery; the simulator then sets the output of the ith hash
query H(mi) to be y (where y is the value to be inverted).
The output of all other hash queries H(mj) is set to f (xj)
for random xj.
In this way, the simulator can answer all
signing queries except those for message mi; furthermore, if
the forger outputs a signature on mi, the simulator obtains
the desired inverse. However, having to guess the index i
(from among all (qs + qh) queries to H) results in a substan-
tial loss of security.
Subsequently, Coron [11] improved the exact security of
FDH for the speciﬁc case when RSA is the underlying trap-
door permutation by using random self-reducibility proper-
ties of RSA (but see footnote 1). Here, to invert a given
value y the simulator answers hash query H(mi), for all i,
(cid:4)
i (with probability ρ) and with xe
with f (xi) = xe
i y (with
probability 1 − ρ); note that the simulator can answer sign-
ing queries related to hash queries of the ﬁrst type, while
forgeries related to hash queries of the second type allow
computation of the desired inverse. By appropriately choos-
ing ρ, the tighter security bound ε ≈ qsε
can be obtained.
Interestingly, this proof technique was generalized by Dodis
and Reyzin [13] who showed that whenever the trapdoor
permutation f is induced by a claw-free permutation (i.e.,
f arises from a pair of claw-free permutations (f, g)), then
FDH achieves security ε ≈ qsε
. In their proof, the simu-
lator answers hash queries with f (xi) (with probability ρ)
and with g(xi) (with probability 1 − ρ); as before, the sim-
ulator can answer signing queries related to hash queries of
the ﬁrst type, while forgeries related to hash queries of the
second type yield a “claw”, as desired.
(cid:4)
In FDH, each message has a unique signature. Thus, in
the security proofs for FDH, for each message m the simu-
lator either can produce a signature of m (in which case a
forged signature on m does not “help”) or cannot produce
a signature of m (in which case a forged signature on m
breaks the underlying assumption, but a signing request for
m requires the simulator to abort). This motivated the de-
sign of PSS [3] and PFDH3 [12] in which each message has
multiple valid signatures. We discuss PFDH, but the ideas
apply to PSS as well. In PFDH, key generation is done as
before; to sign m, the signer chooses random “salt” r and
−1(H(r(cid:19)m))(cid:20). Veriﬁcation is done in the obvi-
outputs (cid:18)r, f
ous way. If f is induced by claw-free permutation (f, g) then,
in the proof of security [12, 13], the simulator can answer all
hash queries with g(xi) and thus any forgery (giving a value
−1(g(xi))) yields a “claw”; still, the simulator can sign any
f
message m as long as it picks a random salt r such that
H(r(cid:19)m) was not previously queried (because it can then set
H(r(cid:19)m) = f (xi) and output the signature (cid:18)r, xi(cid:20)).
This gives a perfect simulation unless, in answering a sign-
ing query for message m, the simulator chooses r such that
H(r(cid:19)m) was previously queried. But setting |r| long enough
ensures that this occurs with small probability. Bellare and
Rogaway [3] showed that having |r| ≥ 2 log2 qh + log2 ε
is
suﬃcient to obtain a tight security proof; Coron [12] im-
proved this to |r| ≥ log2 qs. Note that reducing the length
of r reduces the amount of randomness required and also
results in a shorter signature.
4.1 Tight Security with No Random Salt
(cid:4)
All previous work requires some random salt in order to
achieve a tight security proof. Here, we show a very simple
modiﬁcation with a tight security reduction which avoids the
random salt altogether. In order to avoid the diﬃculties that
arise in the proof of security for FDH (and to circumvent the
fact [12, Theorem 5] that tight reductions are impossible
for FDH-like schemes in which each message has a unique
signature), our scheme has the property that each message
has two possible signatures; in particular, our scheme may
be viewed as PFDH with |r| = 1. However, in contrast
to PFDH where a random valid signature is chosen by the
signer each time a message is signed, in our scheme only one
valid signature (for a given message) is ever produced by
the signer. Somewhat surprisingly, this is enough to obtain
a tight security reduction!
3As noted above, PFDH simpliﬁes PSS yet distills the in-
teresting features of the security proof.
We now more carefully describe our scheme and give a full
proof of security. As in [13], our schemes assume a trapdoor
permutation f induced by a claw-free permutation (f, g).
In the description, H is a random oracle mapping arbitrary-
length strings to the appropriate range.
Gen runs cf-Gen to obtain (f, g) and trapdoor information
td. The public key is P K = f and the secret key is td.
SignSK(m) (where m ∈ {0, 1}∗
) ﬁrst checks to see whether
m has been signed before (below, we show a simple way to
avoid maintaining state); if it has, the previously-generated
signature is output. Otherwise, the signer chooses a random
bit b and outputs σ = f
−1(H(b(cid:19)m)).
VrfyP K(m, σ) accepts if and only if either f (σ)
or f (σ)
= H(1(cid:19)m).
?
?
= H(0(cid:19)m)
Eﬃciency improvements. Before giving the proof of se-
curity, we note some immediate enhancements of the scheme
above. First of all, to avoid having the veriﬁer compute both
H(0(cid:19)m) and H(1(cid:19)m), the signer can include the bit b along