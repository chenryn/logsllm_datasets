---
author: Christoph Burgdorf
category: 软件开发
comments_data:
- date: '2014-10-20 12:33:01'
  message: 用起来感觉很危险
  postip: 103.3.189.154
  username: 微博评论
- date: '2014-10-20 14:33:00'
  message: 这就是传说中的“变基”。
  postip: 68.180.228.107
  username: 微博评论
- date: '2014-10-20 16:33:00'
  message: '变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 61.153.2.246
  username: 微博评论
- date: '2014-10-20 16:33:00'
  message: '长大的标志不是学会做rebase，而是学会不做rebase。//@Linux中国: 变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 61.153.2.246
  username: 微博评论
- date: '2014-10-20 17:03:00'
  message: '基佬们快来学 //@时趣张首华: //@Linux中国: 变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 180.166.199.210
  username: 微博评论
- date: '2014-10-20 17:03:00'
  message: '@我的印象笔记  //@Linux中国:变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 180.166.199.210
  username: 微博评论
- date: '2014-10-20 17:03:00'
  message: '为什么不从f2出一个新branch，diff f3 修改以后合并到主分支呢？rebase本身就不是推荐使用的东西。而且这货把Repo搞反了。//@Linux中国:
    变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 180.166.199.210
  username: 微博评论
- date: '2014-10-20 17:03:00'
  message: '[挖鼻屎]//@米粽粽: 基佬们快来学 //@时趣张首华: //@Linux中国: 变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 180.166.199.210
  username: 微博评论
- date: '2014-10-20 17:03:00'
  message: git高级技能--变基
  postip: 180.166.199.210
  username: 微博评论
- date: '2014-10-20 22:33:00'
  message: '@群英汇蒋鑫 帮忙给看看？是这样么？//@小和平鸽: 为什么不从f2出一个新branch，diff f3 修改以后合并到主分支呢？rebase本身就不是推荐使用的东西。而且这货把Repo搞反了。//@Linux中国:
    变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 123.115.166.22
  username: 微博评论
- date: '2014-10-20 22:33:00'
  message: '另辟途径不愿变基啊右右右。//@Linux中国:@群英汇蒋鑫 帮忙给看看？是这样么？//@小和平鸽: 为什么不从f2出一个新branch，diff
    f3 修改以后合并到主分支呢？rebase本身就不是推荐使用的东西。而且这货把Repo搞反了。//@Linux中国: 变基神器。。//@陈伟琪在肇庆: 这就是传说中的“变基”。'
  postip: 123.115.166.22
  username: 微博评论
- date: '2014-10-20 23:03:00'
  message: rebase在多team合作开发是是很有用的。abc team都要修改某git下的东西，但abc team都不应该直接merge master分支，而是建立自己的分支，然后定期提交commit。当需要提交之前从主枝rebase别的team的改动，把冲突解决在自己branch上。
  postip: 110.177.39.79
  username: 微博评论
- date: '2014-10-21 13:03:01'
  message: '很好的文章啊，这正是交互式变基大显身手的地方，试试就知道哪个方便了。 //@Linux中国: @群英汇蒋鑫 帮忙给看看？是这样么？//@小和平鸽:
    为什么不从f2出一个新branch，diff f3 修改以后合并到主分支呢？rebase本身就不是推荐使用的东西。而且这货把Repo搞反了。'
  postip: 58.22.135.91
  username: 微博评论
count:
  commentnum: 13
  favtimes: 4
  likes: 0
  sharetimes: 15
  viewnum: 25226
date: '2014-10-20 12:04:00'
editorchoice: false
excerpt: 想象一下你正在开发一个激进的新功能。这将是很灿烂的但它需要一段时间。您这几天也许是几个星期一直在做这个。  你的功能分支已经超前master有6个提交了。你是一个优秀的开发人员并做了有意义的语义提交。但有一件事情：你开始慢慢意识到，这个疯狂的东西仍需要更多的时间才能真的做好准备被合并回主分支。
  m1-m2-m3-m4 (master) \ f1-f2-f3-f4-f5-f6(feature)  你也知道的是，一些地方实际上是交叉不大的新功能。它们可以更早地合并到主分支。不幸的是，你想将部分合并到主分支的内容存在于你六个提交中的某个地方。更糟糕的是，它也包
fromurl: https://www.codementor.io/git-tutorial/git-rebase-split-old-commit-master
id: 4046
islctt: true
largepic: /data/attachment/album/201410/20/120426xxp4qkbxm5vqylk4.jpg
permalink: /article-4046-1.html
pic: /data/attachment/album/201410/20/120426xxp4qkbxm5vqylk4.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 想象一下你正在开发一个激进的新功能。这将是很灿烂的但它需要一段时间。您这几天也许是几个星期一直在做这个。  你的功能分支已经超前master有6个提交了。你是一个优秀的开发人员并做了有意义的语义提交。但有一件事情：你开始慢慢意识到，这个疯狂的东西仍需要更多的时间才能真的做好准备被合并回主分支。
  m1-m2-m3-m4 (master) \ f1-f2-f3-f4-f5-f6(feature)  你也知道的是，一些地方实际上是交叉不大的新功能。它们可以更早地合并到主分支。不幸的是，你想将部分合并到主分支的内容存在于你六个提交中的某个地方。更糟糕的是，它也包
tags:
- git
- git rebase
thumb: false
title: Git Rebase教程： 用Git Rebase让时光倒流
titlepic: false
translator: geekpi
updated: '2014-10-20 12:04:00'
---
想象一下你正在开发一个激进的新功能。这将是很灿烂的但它需要一段时间。您这几天也许是几个星期一直在做这个。
![](/data/attachment/album/201410/20/120426xxp4qkbxm5vqylk4.jpg)
你的功能分支已经超前master有6个提交了。你是一个优秀的开发人员并做了有意义的语义提交。但有一件事情：你开始慢慢意识到，这个疯狂的东西仍需要更多的时间才能真的做好准备被合并回主分支。
```
m1-m2-m3-m4 (master)
     \ 
      f1-f2-f3-f4-f5-f6(feature)
```
你也知道的是，一些地方实际上是交叉不大的新功能。它们可以更早地合并到主分支。不幸的是，你想将部分合并到主分支的内容存在于你六个提交中的某个地方。更糟糕的是，它也包含了依赖于你的功能分支的之前的提交。有人可能会说，你应该在第一处地方做两次提交，但没有人是完美的。
```
m1-m2-m3-m4 (master)
     \ 
      f1-f2-f3-f4-f5-f6(feature)
             ^
             |
        mixed commit
```
在你准备提交的时间，你没有预见到，你可能要逐步把该功能合并入主分支。哎呀！你不会想到这件事会有这么久。
你需要的是一种方法可以回溯历史，把它并分成两次提交，这样就可以把代码都安全地分离出来，并可以移植到master分支。
用图说话，就是我们需要这样。
```
m1-m2-m3-m4 (master)
     \ 
      f1-f2-f3a-f3b-f4-f5-f6(feature)
```
在将工作分成两个提交后，我们就可以cherry-pick出前面的部分到主分支了。