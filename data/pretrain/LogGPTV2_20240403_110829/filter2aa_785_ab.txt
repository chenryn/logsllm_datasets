### ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
### ROOTKITS: RING 0
### DEFCON 2018 - USA

---

**Malicious Driver Rootkits: Ring 0**

---

**Infection Mechanisms and Detection Evasion**

- **Infection at Lower Layers:**
  - Infections are more efficient when they occur at the bottom of the device stack, such as targeting SCSI miniport drivers instead of file system drivers.
  - Modern monitoring tools typically detect suspicious activities at higher layers, making lower-layer infections harder to detect.

- **Intercepting Disk Requests:**
  - Malware can easily intercept read/write operations from the hard disk by manipulating the `MajorFunction` array (e.g., `IRP_MJ_DEVICE_CONTROL` and `IRP_INTERNAL_CONTROL`) in the `DRIVER_OBJECT` structure.

- **Self-Protection Techniques:**
  - Rootkits protect themselves from removal by modifying routines like `IRP_MJ_DEVICE_CONTROL` and hooking requests to the disk (e.g., `IOCTL_ATA_*` and `IOCTL_SCSI_*`).
  - Hooking the `DriverUnload()` routine prevents the rootkit from being unloaded.
  - These techniques must avoid critical areas protected by Kernel Patch Guard (KPP). One method to identify these areas is using the `!analyze â€“show 109` command in a kernel debugger.

- **Advanced Local Procedure Call (APLC):**
  - Malware often uses APLC for communication between user-mode code and kernel drivers, rather than just IOCTL commands.
  - APLC has been used since Windows Vista, for example, in communication between `lsass.exe` and the Security Reference Monitor (SRM).
  - Malware typically does not target specific drivers for injection but randomly selects one by parsing structures like `_KLDR_DATA_TABLE_ENTRY`.

- **Filesystem Driver Hooking:**
  - Hooking filesystem driver access is a common technique:
    - `IoCreateFile()` gets a handle to the filesystem.
    - `ObReferenceObjectByHandle()` gets a pointer to the `FILE_OBJECT` represented by the handle.
    - `IoCreateDevice()` creates a `DEVICE_OBJECT` for use by a driver.
    - `IoGetRelatedDeviceObject()` gets a pointer to the `DEVICE_OBJECT`.
    - `IoAttachDeviceToDeviceStack()` attaches a new device object to the existing `DEVICE_OBJECT`.

- **Antivirus and Malware Interception:**
  - Antiviruses often hook functions like `ZwCreate()` to intercept all open requests sent to devices. Malware can do the same or implement their own versions.
  - After infecting a system with kernel drivers, malware may force a system reboot using `ZwRaiseHardError()` with the `OptionShutdownSystem` parameter set to 5.
  - Malware can also use `IoRegisterShutdownNotification()` to register the driver to receive an `IRP_MJ_SHUTDOWN` notification, ensuring the malicious driver is restored on the next boot.

- **Memory Allocation and Marking:**
  - Malware allocates memory (usually RWX, though NonPagePoolNX on Windows 8+) and marks pages using `ExAllocatePoolWithTag()` and related functions. This can be detected through memory analysis.

- **Asynchronous Procedure Calls (APCs):**
  - APCs (both user and kernel mode) are executed in the thread context. Normal APCs execute at `PASSIVE_LEVEL`, while special ones run at `APC_LEVEL`.
  - APC injection allows a program to execute code in a specific thread by attaching to an APC queue and preempting the thread in an alertable state to run malicious code (e.g., `QueueUserAPC()`, `KeInitializeAPC()`, and `KeInsertQueueAPC()`).

---

### ADVANCED MALWARES AND ROOTKITS RING -2

- **MBR and VBR Rootkits:**
  - MBR rootkits (e.g., Petya, TLD4, Omasco, Mebromi) and VBR rootkits (e.g., Rovnix, Gapz) alter the bootstrap code, partition table, and BIOS Parameter Block (BPB).
  - UEFI rootkits replace EFI boot loaders and sometimes install custom firmware executables (EFI DXE).
  - Modern malware alters the BPB in the VBR, which describes the filesystem volume.

- **Disk Design Overview:**
  - The disk design includes MBR, VBR, IPL, and NTFS.
  - The MBR locates the active partition and reads the first sector.
  - The VBR contains boot code for loading the OS loader.
  - The IPL (Initial Program Loader) has 15 sectors containing bootstrap code for parsing the NTFS and locating the OS boot loader.

- **Bypassing Kernel-Mode Code Signing (KCS):**
  - MBR and VBR modifications bypass KCS.
  - Disabling KCS by booting in Test Mode requires disabling Secure Boot and rebooting.
  - Altering MBR and VBR is lethal as BIOS reads the MBR and executes the code there.
  - Finding flaws in firmware is not trivial and requires disabling Secure Boot.

- **Boot Process and Malware Injection:**
  - The boot process involves BIOS, MBR, EFI, VBR, Bootmgr, and various system files.
  - Malicious boot managers can patch modules and load malicious drivers.
  - Subverting the integrity check of `winload.exe` allows injecting malicious code into the kernel.
  - `winload.exe` roles include enabling protected mode, checking module integrity, loading DLLs (including `ci.dll` for Code Integrity), and loading drivers and registry data.

- **Hidden Filesystems and Key Program Hooking:**
  - Advanced rootkits store and read their configuration and payloads in encrypted hidden filesystems (e.g., FAT32) using modified symmetric algorithms (AES, RC4).
  - Hooking key programs like NTLDR and BOOTMGR helps malware stay active during the transition from real to protected mode.

- **System Management Mode (SMM):**
  - SMM is a protected environment from the OS and hypervisors.
  - SMM executable code is copied into SMRAM and locked during initialization.
  - Switching to SMM requires triggering a System Management Interrupt (SMI), saving the current content into SMRAM, and executing the SMI handler code.
  - An SMI can be generated from a driver (ring 0) by writing to the APMC I/O port or using an I/O instruction to restart the CPU.
  - Execution resumes with the `RSM` instruction.

- **Malware Types and Targets:**
  - MBR, VBR, loader, and OS-level malwares.
  - SPI flash and SMM-based malwares.
  - UEFI/BIOS malwares that exploit Flash Write Protection and Kernel Code Signing Policies.

---

**Contact Information:**
- Alexandre Borges
- Malware and Security Researcher
- DEFCON 2018 - USA

---

This optimized version aims to provide a clear, coherent, and professional presentation of the information.