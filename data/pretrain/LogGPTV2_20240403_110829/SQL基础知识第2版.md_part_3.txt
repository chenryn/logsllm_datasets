市（也是重复的值）：
实例
SELECT 城市 FROM Customers
UNION ALL
SELECT 城市 FROM Suppliers
结果：
14.7 带有 WHERE 的UNION ALL
以下 SQL 语句使用 UNIONALL 从"Customers"和 "Suppliers" 表中选择所有上海
市的城市（也是重复数值）：
实例
SELECT 城市, 省份 FROM Customers
WHERE 省份='上海市'
UNION ALL
SELECT 城市, 省份 FROM Suppliers
WHERE 省份='上海市'
结果：
14.8 带有WHERE的UNION
以下SQL语句从“客户”和“供应商”中选择所有不同的上海城市（只有不同的值）：
SELECT 城市, 省份 FROM Customers
WHERE 省份='上海市'
UNION
SELECT 城市, 省份 FROM Suppliers
WHERE 省份='上海市'
结果：
14.9 另一个UNION示例
以下SQL语句列出了所有客户和供应商所在的城市和省份：
SELECT '客户姓名' As Type,城市, 省份
FROM Customers
UNION
SELECT '供应商名称',城市, 省份
FROM Suppliers;
结果：
14.10 批注
UNION 就是将多段功能类似的 SQL 连接起来，并且可以去掉重复的行，有
DISTINCT的功能。UNION ALL则只是单纯的将多段类似SQL连接起来而且。他
们的好处是可以将复杂 SQL 按不同的功能或作用拆分成一小段 SQL 进行拼接，可
以有效提高查询效率。
第十五章 SELECT INTO 和 INSERT INTO 的用法
15.1 SELECT INTO 作用
SELECT INTO 语句从一个表中复制数据，然后将数据插入到另一个新表中。
15.2 SELECT INTO 语法
我们可以把所有的列都复制到新表中：
SELECT *
INTO newtable [IN externaldb]
FROM table1;
或者只复制希望的列插入到新表中：
SELECT column_name(s)
INTO newtable [IN externaldb]
FROM table1;
提示：将使用SELECT语句中定义的列名和类型创建新表。您可以使用 AS子句
来应用一个新名称。
示例数据库
我们使用"Customers"表来作示例
15.3 SELECT INTO 实例
创建 Customers 的备份复件：
SELECT * INTO CustomersBackup2018 FROM Customers;
可以得到一个和Customers表结构及数据一模一样的表CustomersBackup2018
下面我们来复制表到另一个数据库AdventureWorks中，结果与Customers表中
的一样。
SELECT * INTO AdventureWorks.dbo.CustomersBackup2018 FROM Customers;
如 下 就 是 AdventureWorks 数 据 库 中 刚 复 制 过 来 的 表
CustomersBackup2018
只复制一些列插入到新表中：
SELECT 姓名, 地址INTO CustomersBackup2018_1 FROM Customers;
CustomersBackup2018_1表中的结果：
只复制广东省的客户插入到新表中：
SELECT * INTO CustomersBackup2018_2 FROM Customers WHERE 省份='广东省';
CustomersBackup2018_2中的数据如下：
复制多个表中的数据插入到新表中：
SELECT c.姓名, o.订单ID
INTO CustomersOrderBackup2018
FROM Customers c
LEFT JOIN Orders o
ON c.客户ID=o.客户ID;
CustomersOrderBackup2018 表中的数据如下：
提示：SELECT INTO 语句可以用于在另一种模式下创建一个新的空表，即只有表结
构，没有数据。只需添加WHERE子句，使查询返回时没有数据：
SELECT *
INTO newtable
FROM table1
WHERE 1=0;
15.4 INSERT INTO SELECT 作用
INSERT INTO SELECT 语句从表中复制数据，并将数据插入现有的表中。目标表中
的任何现有行都不会受到影响。
15.5 INSERT INTO SELECT 语法
我们可以将所有列从一个表中复制到另一个已经存在的表中：
INSERT INTO table2
SELECT * FROM table1;
或者我们可以把想要的列复制到另一个现有的表中：
INSERT INTO table2
(column_name(s))
SELECT column_name(s)
FROM table1;
示例数据库
以下是"Customers"表中的数据：
选自 "Suppliers" 表的数据：
15.6 INSERT INTO SELECT 实例
把 "Suppliers" 一栏复制到 "Customers" 一栏：
INSERT INTO Customers (姓名, 省份)
SELECT 供应商名称, 省份 FROM Suppliers;
结果如下：
只将上海供应商的副本插入 "Customers" ：
实例
INSERT INTO Customers (姓名, 省份)
SELECT 供应商名称, 省份 FROM Suppliers
WHERE 省份='上海市';
结果如下：
15.7 批注
SELECT INTO 用来复制表和表结构是非常方便的，特别是在进行表之间计算时，可
以将部分数据先插入到一个临时表中，计算完成再删除该临时表。INSERT INTO
SELECT 则是插入语句的另外的一种写法，可以直接将查询的结果插入到需要的表
中，从而省去逐条手工插入数据的过程。
第十六章 CREATE 的用法
16.1 CREATE作用
通过使用CREATE 语句，可以轻松地创建数据库、表、索引等。
16.2 CREATE DATABASE语句
CREATE DATABASE语句用于创建数据库
语法
CREATE DATABASE database_name
我们想创建一个SQL_Road的数据库
示例
CREATE DATABASE SQL_Road
结果
16.3 CREATE TABLE 语句
CREATE TABLE 语句用于创建表。
语法
CREATE TABLE table_name(
column_name1 data_type(size),
column_name2 data_type(size),
column_name3 data_type(size),
....
);
示例
我们想创建一个客户表Customers
CREATE TABLE Customers(
客户ID INT IDENTITY(1,1) NOT NULL,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL
) ;
结果
16.4 CREATE INDEX语句
CREATE INDEX 语句用于创建索引
在表上创建一个普通可以重复数据的索引
语法
CREATE INDEX index_name
ON table_name(column_name)
示例
我们在表Customers上创建一个城市列的索引
CREATE INDEX index_city ON Customers(城市)
结果
在表上创建一个唯一(数据不重复)的索引，只需添加UNIQUE关键字即可
语法
CREATE UNIQUE INDEX index_name
ON table_name(column_name)
示例
我们在表Customers的客户ID上创建一个UNIQUE索引
CREATE UNIQUE INDEX index_cusid ON Customers(客户ID)
结果
在表上创建一个普通的联合索引
语法
CREATE INDEX index_name
ON table_name(column_name1,column_name2)
示例
我们想在表 Customers 中创建一个城市和省份的联合索引，并对身份进行倒序排
列(如果不注明排序规则，默认是升序排列)
CREATE INDEX index_city_province
ON Customers(城市,省份 DESC)
结果
16.5 批注
CREATE是一个数据定义语言(DDL)，主要用来定义各种对象(数据库，表，索引，
视图等)
第十七章 ALTER TABLE 的用法
17.1 ALTER TABLE 作用
ALTER TABLE 语句用于在已有的表中添加、修改或删除列。当我们新建了一个表之
后，想对其进行修改，可以使用它。
示例数据库表
将"Customers"表用作示例
17.2 添加列语法
使用 ALTER TABLE 在现有的数据表中添加新列的基本语法如下：
ALTER TABLE table_name
ADD column_name datatype;
给"Customers"表增加一列"年龄"，可以这样写：
ALTER TABLE Customers ADD 年龄 INT;
我们再查看Customers表就在末尾增加一列"年龄"
由于我们没有设定值，"年龄"列默认都是NULL值(空值)
17.3 删除列语法
使用 ALTER TABLE 在现有的数据表中删除列的基本语法如下：
ALTER TABLE table_name
DROP COLUMN column_name;
我们再将上面"Customers"刚增加的"年龄"列给删除
ALTER TABLE Customers DROP COLUMN 年龄;
执行完后就将"年龄"列给删除了。
17.4 修改列类型语法
使用 ALTER TABLE 更改现有的数据表中列的数据类型的基本语法如下：
ALTER TABLE table_name
ALTER COLUMN column_name datatype;
我们将"Customers"表的"邮编"由CHAR类型改成INT类型
ALTER TABLE Customers ALTER COLUMN 邮编 INT;
17.5 添加NOT NULL约束语法
使用 ALTER TABLE 给某列添加 NOT NULL 约束 的基本语法如下：
ALTER TABLE table_name
ALTER COLUMN column_name datatype NOT NULL;
我们可以将"Customers"表中的"省份"由NULL约束改成NOT NULL约束
ALTER TABLE Customers ALTER COLUMN 省份 VARCHAR(20) NOT NULL;
结果如下：
17.6 添加唯一约束语法
使用 ALTER TABLE 给数据表添加 唯一约束 的基本语法如下：
ALTER TABLE table_name
ADD CONSTRAINT MyUniqueConstraint
UNIQUE(column1, column2...);
我们可以给"Customers"表中的"姓名"添加唯一约束
ALTER TABLE Customers ADD CONSTRAINT idx_姓名 UNIQUE(姓名);
结果如下：
17.7 添加CHECK约束语法
使用 ALTER TABLE 给数据表添加 CHECK 约束 的基本语法如下：
ALTER TABLE table_name
ADD CONSTRAINT MyUniqueConstraint
CHECK (CONDITION);
我们可以给"Customers"表中的"客户ID"添加CHECK约束，必须大于0
ALTER TABLE Customers ADD CONSTRAINT con_客户ID CHECK (客户ID>0);
结果如下：
17.8 添加主键约束语法
使用 ALTER TABLE 给数据表添加 主键约束 的基本语法如下：
ALTER TABLE table_name
ADD CONSTRAINT MyPrimaryKey
PRIMARY KEY (column1, column2...);
我们可以给"Customers"表中的"客户ID"添加主键约束，必须大于0
ALTER TABLE Customers ADD CONSTRAINT pri_客户ID PRIMARY KEY(客户ID);
结果如下：
17.9 删除约束语法
使用 ALTER TABLE 从数据表中 删除约束 的基本语法如下：
ALTER TABLE table_name
DROP CONSTRAINT MyUniqueConstraint;
我们将刚才建的CHECK约束删除掉
ALTER TABLE Customers DROP CONSTRAINT con_客户ID ;
我们可以看到直接的约束被删除了。
其他类型的约束同样可以用此语法进行删除。
如果你在使用 MySQL，代码应当如下：
ALTER TABLE table_name
DROP INDEX MyUniqueConstraint;
17.10 批注
ALTER TABLE可以对表进行各种更改操作，是我们修改表结构主要关键词，修改语
法因不同的数据库平台略有差别。在使用的时候一定要看清是哪个数据库平台，以
防混淆。
第十八章 VIEW 视图的用法
18.1 视图的定义
视图是可视化的表。
本章讲解如何创建、更新和删除视图。
18.2 CREATE VIEW 语句
在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。
视图包含行和列，就像真正的表一样。视图中的字段是一个或多个数据库中真实表
中的字段。
您可以添加 SQL 函数，在哪里添加，并将语句连接到视图，或者您可以呈现数据，
就像数据来自单个表一样。
18.3 CREATE VIEW 语法
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition
注释：视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL
语句重新构建数据。
18.4 CREATE VIEW 实例
我们以表Customers为例
"Customer_GD"(广东客户列表)视图从"Customers"表中列出了所有广东省的客户。
这个视图使用下面的 SQL 创建：
CREATE VIEW Customer_GD AS
SELECT * FROM Customers WHERE 省份='广东省'
我们可以像这样查询上面这个视图：
SELECT * FROM Customer_GD
查看一下视图中的结果：
下面的我们以"Products"表为示例
我们选取 "Products" 表中所有价格高于平均价格的产品：
CREATE VIEW [Products_Above_Average_Price] AS
SELECT 名称,价格 FROM Products
WHERE 价格>(SELECT AVG(价格) FROM Products)
我们可以像这样查询上面这个视图：
SELECT * FROM [Products_Above_Average_Price]
结果如下：
我们也可以向视图添加条件。现在，我们仅仅需要查看 "大米" 类的价格：
SELECT * FROM [Products_Above_Average_Price]
WHERE 名称='大米'
这样就只显示大米的价格了
18.5 更新视图
您可以使用下面的语法来更新视图：
CREATE OR REPLACE VIEW 语法
ALTER VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition
现在，我们希望向 "Products_Above_Average_Price" 视图添加 "规格" 列。我们
将通过下列 SQL 更新视图：
ALTER VIEW [Products_Above_Average_Price] AS
SELECT 名称,价格,规格 FROM Products
WHERE 价格>(SELECT AVG(价格) FROM Products)
我们重新查询该视图：
SELECT * FROM [Products_Above_Average_Price]
结果如下：
18.6删除视图
可以通过 DROP VIEW 命令来删除视图。
DROP VIEW 语法
DROP VIEW view_name
例如我们要删除刚才新建的视图"Products_Above_Average_Price"
DROP VIEW [Products_Above_Average_Price]
重新查询视图后就会显示该视图无效
证明视图已经不存在了。
18.7 批注
视图是数据库中一个比较重要的组成部分，在隔离实体表的前提下还可以让用户查
询到需要的数据，可以起到保护底层数据的作用。同时针对不同的人群，视图也可
以起到简化用户对数据的理解。
第十九章 NULL 的用法
NULL 空值代表丢失的未知数据。
默认情况下，表列可以保存 NULL 值。