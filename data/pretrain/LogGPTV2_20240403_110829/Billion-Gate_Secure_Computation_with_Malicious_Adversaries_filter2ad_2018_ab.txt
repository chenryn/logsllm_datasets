when building circuits.
As a ﬁrst sign that our compiler advances the state
of the art, we observe that it automatically generates a
smaller boolean circuit for the AES cipher than the hand-
optimized circuit reported by Pinkas et al. [30]. AES
plays an important role in secure computation, and obliv-
ious AES evaluation can be used as a building block in
cryptographic protocols. Not only is it one of the most
popular building blocks in cryptography and real life se-
curity, it is often used as a benchmark in secure com-
putation. With the textbook algorithm, the well-known
Fairplay compiler can generate an AES circuit that has
15,316 non-XOR gates. Pinkas et al. were able to de-
velop an optimized AES circuit that has 11,286 non-
XOR gates. By applying an efﬁcient S-box circuit [3]
and using our compiler, we were able to construct an
AES circuit that has 9,100 non-XOR gates. As a result,
our AES circuit only needs 59% and 81% of the commu-
nication needed by the other two, respectively.
Most importantly, with our system and the scalable
compiler, we are able to run experiments on circuits with
sizes in the range of billions of gates. To the best of
our knowledge, secure computation with such large cir-
cuits has never been run in the malicious model before.
These circuits include 256-bit RSA (266,150,119 gates)
and 4095x4095-bit edit distance (5,901,194,475). As the
circuit size grows, resource management becomes cru-
cial. A circuit of billions of gates can easily result in
several GB of data stored in memory or sent over the
network. Special care is required to handle these difﬁ-
culties.
Paper Organization The organization of this paper is
as follows. A variety of security decisions and optimiza-
tion techniques will be covered in Section 3 and Sec-
tion 4, respectively. Then, our system, including a com-
piler, will be introduced in Section 5. Finally, the experi-
mental results are presented in Section 6 followed by the
conclusion and future work in Section 7.
3 Techniques Regarding Security
The Yao protocol, while efﬁcient, assumes honest behav-
ior from both parties. To achieve security in the mali-
cious model, it is necessary to enforce honest behavior.
The cut-and-choose technique is one of the most efﬁcient
methods in the literature and is used in our system. Its
main idea is for the generator to prepare multiple copies
of the garbled circuit with independent randomness, and
the evaluator picks a random fraction of the received cir-
cuits, whose randomness is then revealed. If any of the
chosen circuits (called check circuits) is not consistent
with the revealed randomness, the evaluator aborts; oth-
erwise, she evaluates the remaining circuits (called eval-
uation circuits) and takes the majority of the outputs, one
from each evaluation circuit, as the ﬁnal output.
The intuition is that to pass the check, a malicious gen-
erator can only sneak in a few faulty circuits, and the
inﬂuence of these (supposedly minority) faulty circuits
will be eliminated by the majority operation at the end.
On the other hand, if a malicious generator wants to ma-
nipulate the ﬁnal output, she needs to construct faulty
majority among evaluation circuits, but then the chance
that none of the faulty circuits is checked will be negli-
gible. So with the help of the cut-and-choose method,
a malicious generator either constructs many faulty cir-
cuits and gets caught with high probability, or constructs
merely a few and has no inﬂuence on the ﬁnal output.
However, the cut-and-choose technique is not a cure-
all. Several subtle attacks have been reported and would
be a problem if not properly handled. These attacks in-
clude the generator’s input inconsistency attack, the se-
lective failure attack, and the generator’s output authen-
ticity attack, which are discussed in the following sec-
tions. Note that in this section, n denotes the input size
and s denotes the number of copies of the circuit.
Generator’s Input Consistency Recall that in the cut-
and-choose step, multiple copies of a circuit are con-
structed and then evaluated. A malicious generator
is therefore capable of providing altered inputs to dif-
ferent evaluation circuits.
It has been shown that for
some functions,
there are simple ways for the gen-
erator to extract information about the evaluator’s in-
put [23].
For example, suppose both parties agree
to compute the inner-product of their input,
that is,
f ([a2,a1,a0], [b2,b1,b0]) (cid:55)→ a2b2 + a1b1 + a0b0 where ai
and bi is the generator’s and evaluator’s i-th input bit,
respectively. Instead of providing [a2,a1,a0] to all eval-
uation circuits, the generator could send [1,0,0], [0,1,0],
and [0,0,1] to different copies of the evaluation circuits.
After the majority operation from the cut-and-choose
technique, the generator learns major(b2,b1,b0), the ma-
jority bit in the evaluator’s input, which is not what the
evaluator agreed to reveal in the ﬁrst place.
There exist several approaches to deter this attack.
Mohassel and Franklin [27] proposed the equality-
checker that needs O(ns2) commitments to be computed
and exchanged. Lindell and Pinkas [23] developed an
approach that also requires O(ns2) commitments. Later,
Lindell and Pinkas [24] proposed a pseudorandom syn-
thesizer that relies on efﬁcient zero-knowledge proofs
for speciﬁc hardness assumptions and requires O(ns)
group operations.
shelat and Shen [32] suggested the
use of malleable claw-free collections, which also uses
O(ns) group operations, but they showed that witness-
indistinguishability sufﬁces, which is more efﬁcient than
zero-knowledge proofs by a constant factor.
In our system, we incorporate the malleable claw-free
collection approach because of its efﬁciency. Although
the commitment-based approaches can be implemented
using lightweight primitives such as collision-resistant
hash functions, they incur high communication overhead
for the extra complexity factor s, that is, the number of
copies of the circuit. On the other hand, the group-based
approach could be more computationally intensive, but
this discrepancy is compensated again due to the param-
eter s.1 Hence, with similar computation cost, group-
based approaches enjoy lower communication overhead.
Selective Failure A more subtle attack is selective fail-
ure [19, 27]. A malicious generator could use inconsis-
tent keys to construct the garbled gate and OT so that
the evaluator’s input can be inferred from whether or not
the protocol completes. In particular, a cheating genera-
tor could assign (K0,K1) to an input wire in the garbled
circuit while using (K0,K∗
1 ) instead in the corresponding
OT, where K1 (cid:54)= K∗
1 . As a result, if the evaluator’s input
is 0, she learns K0 from OT and completes the evalu-
ation without complaints; otherwise, she learns K∗
1 and
gets stuck during the evaluation. If the protocol expects
the evaluator to share the result with the generator at the
end, the generator learns whether or not the evaluation
failed, and therefore, the evaluator’s input is leaked.
Lindell and Pinkas [23] proposed the random input re-
placement approach that involves replacing each of the
evaluator’s input bits with an XOR of s additional in-
put bits, so that whether the evaluator aborts due to a se-
lective failure attack is almost independent (up to a bias
of 21−s) of her actual input value. Both Kiraz [18] and
shelat and Shen [32] suggested a solution that exploits
committing OTs so that the generator commits to her in-
put for the OT, and the correctness of the OTs can later
be checked by opening the commitments during the cut-
and-choose. Lindell and Pinkas [24] also proposed a so-
lution to this problem using cut-and-choose OT, which
combines the OT and the cut-and-choose steps into one
protocol to avoid this attack.
Our system is based on the random input replacement
approach due to its scalability. It is a fact that the com-
mitting OT or the cut-and-choose OT does not alter the
circuit while the random input replacement approach in-
ﬂates the circuit by O(sn) additional gates. However,
it has been shown that max(4n,8s) additional gates suf-
ﬁce [30]. Moreover, both the committing OT and the cut-
1To give concrete numbers, with an Intel Core i5 processor and
4GB DDR3 memory, a SHA-256 operation (from OpenSSL) requires
1,746 cycles, while a group operation (160-bit elliptic curve from the
PBC library with preprocessing) needs 322,332 cycles.
It is worth-
mentioning that s is at least 256 in order to achieve security level 2−80.
The gap between a symmetric operation and an asymmetric one be-
comes even smaller when modern libraries such as RELIC are used
instead of PBC.
and-choose OT require O(ns) group operations, while
the random input replacement approach needs only O(s)
group operations. Furthermore, we observe that the ran-
dom input replacement approach is in fact compatible
with the OT extension technique. Therefore, we were
able to build our system which has the group operation
complexity independent of the evaluator’s input size, and
as a result, our system is particularly attractive when han-
dling a circuit with a large evaluator input.
Generator’s Output Authenticity
It is not uncommon
that both the generator and evaluator receive outputs
from a secure computation, that is, the goal function is
f (x,y) = ( f1, f2), where the generator with input x gets
output f1, and the evaluator with input y gets f2.2
In
this case, the security requires that both the input and
output are hidden from each other. In the semi-honest
setting, the straightforward solution is to let the gener-
ator choose a random number c as an extra input, con-
vert f (x,y) = ( f1, f2) into a new function f ∗((x,c),y) =
(λ , ( f1⊕c, f2)), run the original Yao protocol for f ∗, and
instruct the evaluator to pass the encrypted output f1 ⊕ c
back to the generator, who can then retrieve her real out-
put f1 with the secret input c chosen in the ﬁrst place.
However, the situation gets complicated when either of
the participants could potentially be malicious. In partic-
ular, a malicious evaluator might claim an arbitrary value
to be the generator’s output coming from the circuit eval-
uation. Note that the two-output protocols we consider
are not fair since the evaluator always learns her own out-
put and may refuse to send the generator’s output. How-
ever, they can satisfy the notion that the evaluator cannot
trick the generator into accepting arbitrary output.
Many approaches have been proposed to ensure the
generator’s output authenticity. Lindell and Pinkas [23]
proposed a solution similar to the aforementioned so-
lution in the semi-honest setting, where the goal func-
tion is modiﬁed to compute f1 ⊕ c and its MAC so that
the generator can verify the authenticity of her output.
This approach incurs a cost of adding O(n2) gates to
the circuit. Kiraz [18] presented a two-party computa-
tion protocol in which a zero knowledge proof of size
O(s) is conducted at the end. shelat and Shen [32] sug-
gested a signature-based solution which, similar to Ki-
raz’s, adds n gates to the circuit, and requires a proof of
size O(s + n) at the end. However, they observed that
witness-indistinguishable proofs are sufﬁcient.
Lindell and Pinkas’ approach, albeit straightforward,
might introduce greater communication overhead than
the description function itself. We therefore employ the
approach that takes the advantages of the remaining two
solutions. In particular, we implement Kiraz’s approach
2Here f1 and f2 are short for f1(x,y) and f2(x,y) for simplicity.
(smaller proof size), but only a witness-indistinguishable
proof is performed (weaker security property).
4 Techniques Regarding Performance
Yao’s garbled circuit technique has been studied for
decades. It has drawn signiﬁcant attention for its sim-
plicity, constant round complexity, and computational ef-
ﬁciency (since circuit evaluation only requires fast sym-
metric operations). The fact that it incurs high communi-
cation overhead has provoked interest that has led to the
development of fruitful results.
In this section, we will ﬁrst brieﬂy present the Yao
garbled circuit, and then discuss the optimization tech-
niques that greatly reduce the communication cost while
maintaining the security. These techniques include free-
XOR, garbled row reduction, random seed checking, and
large circuit pre-processing. In addition to these original
ideas, practical concerns involving large circuits and par-
allelization will be addressed.
4.1 Baseline Yao’s Garbled Circuit
Given a circuit that consists of 2-fan-in boolean gates,
the generator constructs a garbled version as follows: for
each wire w, the generator picks a random permutation
bit πw ∈ {0,1} and two random keys w0,w1 ∈ {0,1}k−1.
Let W0 = w0||πw and W1 = w1||(πw ⊕ 1), which are as-
sociated with bit value 0 and 1 of wire w, respectively.
Next, for gate g ∈ { f| f : {0,1}×{0,1} (cid:55)→ {0,1}} that
has input wire x with (X0,X1,πx), input wire y with
(Y0,Y1,πy), and output wire z with (Z0,Z1,πz), the gar-
bled truth table for g has four entries:
GT Tg
Enc(X0⊕πx||Y0⊕πy, Zg(0⊕πx,0⊕πy))
Enc(X0⊕πx||Y1⊕πy, Zg(0⊕πx,1⊕πy))
Enc(X1⊕πx||Y0⊕πy, Zg(1⊕πx,0⊕πy))
Enc(X1⊕πx||Y1⊕πy, Zg(1⊕πx,1⊕πy)).
Enc(K,m) denotes the encryption of message m under
key K. Here the encryption key is a concatenation of two
labels, and each label is a random key concatenated with
Intuitively, πx and πy permute the
its permutation bit.
entries in GT Tg so that for ix,iy ∈ {0,1}, the (2ix + iy)-th
entry represents the input pair (ix⊕πx,iy⊕πy) for gate g,
in which case the label associated with the output value
g(ix ⊕ πx,iy ⊕ πy) could be retrieved. More speciﬁcally,
to evaluate the garbled gate GT Tg, suppose X||bx and
Y||by are the retrieved labels for input wire x and wire
y, respectively, the evaluator will use X||bx||Y||by to de-
crypt the (2bx + by)-th entry in GT Tg and retrieve label
Z||bz, which is then used to evaluate the gates at the next
level. The introduction of the permutation bit helps to
identify the correct entry in GT Tg, and thus, only one,
rather than all, of the four entries will be decrypted.
4.2 Free-XOR
Kolesnikov and Schneider [20] proposed the free-XOR
technique that aims for removing the communication
cost and decreasing the computation cost for XOR gates.
The idea is that the generator ﬁrst randomly picks a
global key R, where R = r||1 and r ∈ {0,1}k−1. This
global key has to be hidden from the evaluator. Then
for each wire w, instead of picking both W0 and W1 at
random, only one is randomly chosen from {0,1}k, and
the other is determined by Wb = W1⊕b ⊕ R. Note that
πw remains the rightmost bit of W0. For an XOR gate
having input wire x with (X0,X0 ⊕ R,πx), input wire y
with (Y0,Y0 ⊕ R,πy), and output wire z, the generator lets
Z0 = X0 ⊕Y0 and Z1 = Z0 ⊕ R. Observe that
X0 ⊕Y1 = X1 ⊕Y0 = X0 ⊕Y0 ⊕ R = Z0 ⊕ R = Z1
X1 ⊕Y1 = X0 ⊕ R⊕Y0 ⊕ R = X0 ⊕Y0 = Z0.
This means that while evaluating an XOR gate, XORing
the labels for the two input wires will directly retrieve
the label for the output wire. So no garbled truth table