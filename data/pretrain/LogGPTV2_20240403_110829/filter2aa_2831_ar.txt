### Custom Method for Initializing COM Objects

`InitCOM` is a custom method we developed to initialize all COM objects. It calls `CoInitialize` to initialize the COM library.

#### Creating and Managing COM Objects
- **CCallBack Object Creation**: `InitCOM` creates an instance of the `CCallBack` object using `CComObject::CreateInstance`. This object remains in existence throughout the client's lifetime and is an ATL COM object.
- **ISimpleCallback Interface Instantiation**: `InitCOM` instantiates an `ISimpleCallback` interface on the server application using `CoCreateInstance()`. The server is automatically started, and the `CSimpleCallback` object is created. This object persists until the client releases it.
- **Passing CCallBack Pointer**: `InitCOM` passes a pointer to the `CCallBack` object to the serverâ€™s `Advise` method.

#### Advise Method
- **Interface Copy and Locking**: The `Advise` method makes a copy of the `ICallBack` interface and calls `AddRef` to lock the object. It then creates a cookie and returns control to the client.
- **Releasing CCallBack Object**: `InitCallback()` releases the `CCallBack` object created with `CreateInstance`.

### Interaction Between Client and Server

1. **User Action - "NOW" Button**:
   - The user presses the "NOW" button, triggering the `OnButton1` method.
   - The client program calls the `Now` method on the server.
   - The `Now` method immediately calls the `Awake` method on the client using the saved `ICallBack` interface received in `Advise`.
   - The `Awake` method displays a message box. The user presses OK to clear the box, and the `Awake` method completes.
   - The call to `Awake` returns, and the `Now` method completes.
   - The `OnButton1` method completes.

2. **User Action - "CANCEL" Button**:
   - The user presses the "CANCEL" button, closing the main dialog.
   - The main application calls `ExitInstance`.
   - `ExitInstance` calls `UnAdvise`, passing in the cookie.
   - `UnAdvise` releases the `ICallBack` interface and returns.
   - The reference count of the `CCallBack` object goes to 0, and ATL automatically shuts down and deletes the `CCallBack` object.
   - The client calls `Release` on the `ISimpleCallback` interface on the server.
   - The reference count to `CSimpleCallback` goes to 0, and the server shuts down.
   - `ExitInstance` calls `CoUninitialize`, and the client application closes.

### Multi-Threaded Server

To demonstrate a more realistic use case, we will add a worker thread to the COM server. This allows the server to perform lengthy processing without blocking the client.

#### Interaction Flow
- **User Action - "LATER" Button**:
  - The user presses the "LATER" button, and the client calls the `Later` method on the `ISimpleCallback` interface.
  - The `Later` method starts a worker thread and returns immediately.
  - The `Later` method finishes, and the client dialog waits for the next command.
  - After several seconds, the worker thread finishes processing and calls the `Now` method on itself using the `ISimpleCallback` interface.
  - The `Now` method calls the `Awake` method on the client application.
  - The `Awake` method displays a message box and returns when the user presses OK.
  - The worker thread completes and shuts itself down.
  - The server waits for its next call.

### Starting the Worker Thread

#### Code Implementation
```cpp
STDMETHODIMP CSimpleCallback::Later(long lSeconds)
{
    HRESULT hr;
    CWinThread *pt = NULL; // ID of created thread
    IStream *pStream; // OLE Stream interface
    ISimpleCallback *pSimple = NULL; // Copy of this interface

    // Query ourselves
    hr = QueryInterface(IID_ISimpleCallback, (void**)&pSimple);
    if (!SUCCEEDED(hr)) return hr;

    // Marshal an interface pointer in the stream
    hr = CoMarshalInterThreadInterfaceInStream(IID_ISimpleCallback, pSimple, &pStream);
    if (!SUCCEEDED(hr)) return hr;

    // Create a processing thread object
    CWorkerThread *pObj = new CWorkerThread();

    // Set object variables
    pObj->m_pStream = pStream;
    pObj->m_lWait = lSeconds;

    // Create and start a thread to do some processing
    pt = AfxBeginThread(CWorkerThread::StartProc, pObj);
    if (pt == NULL) hr = E_FAIL;

    // Release our reference to the interface
    pSimple->Release();

    // Return to the calling client
    return hr;
}
```

#### Marshaling the Interface Between Threads
- **Marshaling Interface**: We use `CoMarshalInterThreadInterfaceInStream` to marshal the `ISimpleCallback` interface between threads.
- **Creating and Starting the Thread**: We create a `CWorkerThread` object and set its member variables. We then start the thread using `AfxBeginThread`.

#### Worker Thread Class
```cpp
class CWorkerThread : public CWinThread
{
public:
    // Thread start function. Must be static.
    static UINT StartProc(LPVOID pParam);

    // Pointer to stream interface used in marshaling
    IStream *m_pStream;

    // Number of seconds to wait
    long m_lWait;
};
```

#### Implementing the Worker Thread
```cpp
UINT CWorkerThread::StartProc(LPVOID pParam)
{
    HRESULT hr;

    // Get the object pointer we passed in to AfxBeginThread
    CWorkerThread *pThis = (CWorkerThread*)pParam;

    // Pointer to parent COM object
    ISimpleCallback *pSimple;

    // Initialize apartment model for this thread
    hr = CoInitialize(0);

    // Get marshaled interface from stream
    hr = CoGetInterfaceAndReleaseStream(pThis->m_pStream, IID_ISimpleCallback, (void**)&pSimple);

    // Simulate processing with a sleep
    Sleep(pThis->m_lWait * 1000);

    // Signal client that processing is done
    hr = pSimple->Now(pThis->m_lWait);

    // Shutdown COM on this thread
    CoUninitialize();

    // Delete CWorkerThread object
    delete pThis;

    // ThreadProcs usually return 0
    return 0;
}
```

### Summary

- **Standardization and Flexibility**: Connection points offer a standardized technique and a set of interfaces for two-way communication. They are flexible and can handle multiple clients or servers.
- **Threading and Marshaling**: Implementing callbacks and connection points requires a basic understanding of threading models and marshaling.
- **Real-World Applications**: While the example provided is for educational purposes, real-world applications often benefit from multi-threading and proper marshaling to ensure smooth and efficient communication between client and server.

### Connection Points

Connection points are a specialized form of callback interfaces, providing a standardized and flexible way to implement two-way communication in COM. They are particularly useful in scenarios where multiple clients or servers need to communicate.

- **Classes and Interfaces**:
  - **IConnectionPointContainerImpl**: An ATL class to manage a collection of connection points. The client uses this interface to find the necessary connection point.

By using connection points, developers can build more robust and maintainable COM-based applications.