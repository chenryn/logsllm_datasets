is a custom method we wrote to ini-
tialize all COM objects. CoInitialize is 
called to initialize COM.
InitCOM creates a CCallBack object 
using CComObject::CreateInstance. 
This object will remain in existence 
during the lifetime of the client. It is 
an ATL COM object.
InitCOM() instantiates an ISimpleCall-
back interface on the server applica-
tion by using CoCreateInstance().
The server will be automatically 
started, and the CSimpleCallback 
object is created. This object will 
remain until the client releases it.
 InitCOM() passes a pointer to a CCall-
Back object to the server’s Advise() 
method
 .
The Advise method makes a copy of 
the ICallBack interface. It calls AddRef 
to lock the object. It creates a cookie 
and returns control to the client.
 InitCallback() releases the CCallBack 
object created with CreateInstance.
202    Chapter 12 •
Callback Interfaces 
...
...
 The user presses the “NOW” button, 
calling OnButton1. The client program 
calls Now() on the server
The Now method immediately calls 
Awake on the client. It uses the saved 
ICallBack interface it received in 
Advise.
 Awake displays a message box. The 
user presses OK to clear the box. 
Awake completes.
 The call to Awake returns. The Now 
method completes.
 The call to OnButton1 method com-
pletes.
...
...
The user presses the “CANCEL” but-
ton. The main dialog closes and is 
destroyed. The main application calls 
ExitInstance.
ExitInstance calls UnAdvise, passing in 
the cookie.
 UnAdvise releases the ICallBack inter-
face and returns.
 The CCallBack objects reference 
count goes to 0. ATL automatically 
shuts down and deletes the CCallBack 
object.
The client calls Release on the ISimple-
Callback interface on the server.
CLIENT DIALOG 
COM SERVER 
A Multi-Threaded Server
203
Additonal Information and Updates: http://www.iftech.com/dcom
 In the preceding example, we built a client and server
application. These two applications work together to demon-
strate all the basic points of a bi-directional callback interface.
Although informative, this isn’t a realistic example of how call-
backs are used.
The whole point of this exercise was to demonstrate how a
COM server can notify a client program that asynchronous
events occur. Unfortunately, when the client calls the Now()
method everything is blocked until it completes. We can solve
this problem with multi-threading.
A Multi-Threaded Server
Now that everything works, we’re going to add a worker thread
to the COM server. This worker thread allows the server to
accomplish lengthy processing without locking the client. When
the client application calls the COM server, it will kick-off a pro-
cessing thread and return immediately. This thread will run for
awhile, then notify the client that it’s finished. 
Here’s the interaction: 
The reference count to CSimpleCall-
back goes to 0. The server shuts 
down.
 ExitInstance calls CoUninitialize. The 
client application closes.
Table 12.1
Interaction between client and server when using a callback
CLIENT DIALOG 
COM SERVER 
204    Chapter 12 •
Callback Interfaces 
If you’ve done much multi-threaded programming, you
know what you’re in for. Creating a worker threads in Win32 is
quite easy - doing it right is not! Multi-threaded programming
can cause problems in thousands of ways that you never imag-
ined. Nevertheless, multi-threading provides some tremendous
benefits. 
If you’re an experienced multi-threaded programmer, much
of the following material is obvious. I’ve described some of the
basics of threading for the benefit of those readers who need
some review. The only thing unique about this code is the inter-
thread marshaling used to pass a COM pointer.
CLIENT DIALOG 
COM SERVER
 User presses “LATER” button. Client 
calls the Later() method on the ISim-
pleCallback interface.
Later method starts a worker thread. It 
returns as soon as the thread starts.
 The Later method finishes. The client 
dialog waits for the next command.
 Several seconds elapse...
The worker thread finishes process-
ing. It calls the Now() method on itself 
(using the ISimpleCallback interface.)
The Now() method calls the Awake() 
method on the client application.
 Awake displays a message box. It 
returns when the user presses OK.
 The worker thread completes, and 
shuts itself down.
The server waits for it’s next call.
Table 12.2
Multithreaded interaction with a callback
Starting the Worker Thread
205
Additonal Information and Updates: http://www.iftech.com/dcom
Starting the Worker Thread
The Later() method is going to launch a worker thread, then
return to caller. We’re going to use AfxBeginThread to start the
worker thread, and pass it a C++ object. This C++ object will
start COM, do some processing, and call a method back on the
main thread. Later() is called directly by the client, after the call-
back is registered. Here’s the code:  
STDMETHODIMP CSimpleCallback::Later(long lSeconds)
{
HRESULT hr;
CWinThread *pt = NULL;// ID of created thread
IStream *pStream;// OLE Stream interface
ISimpleCallback *pSimple = NULL ;// Copy of this
  // interface 
// Query ourselves
hr = QueryInterface( IID_ISimpleCallback,
 (void**)&pSimple);
if (!SUCCEEDED(hr)) return hr;
 // Marshall an interface pointer in the stream
hr = CoMarshalInterThreadInterfaceInStream( 
IID_ISimpleCallback,
pSimple,
&pStream );
if (!SUCCEEDED(hr)) return hr;
 // Create a processing thread object
CWorkerThread *pObj = new CWorkerThread();
 // Set object variables
pObj->m_pStream = pStream;
pObj->m_lWait = lSeconds;
 // Create and start a thread to do 
// some processing. Pass in a 
// pointer to the thread object.
206    Chapter 12 •
Callback Interfaces 
pt = AfxBeginThread( CWorkerThread::StartProc, pObj 
);
if (pt == NULL) hr = E_FAIL;
 // Release our reference to the interface. 
pSimple->Release();
 // Return to the calling client
return hr;
}
The first thing we’re going to do is get an interface pointer
to our ISimpleCallback object. We’ll use QueryInterface to get a
pointer to the interface. This interface pointer is going to get
passed to the worker thread so it can communicate back to us.
ISimpleCallback *pSimple = NULL ;
 // Query ourselves
hr = QueryInterface( IID_ISimpleCallback,
 (void**)&pSimple);
Marshaling the Interface Between Threads
When we start the worker thread, we’re immediately going to
have some tricky threading issues. This is an apartment-threaded
server, so the COM object and its worker thread are going to be
running in different apartments (i.e. threads). 
One of the rules of COM is that interfaces must be mar-
shaled when used between threads. This means we can’t just use
a pointer to the COM interface, we’ve got to set up marshaling
code. This is something we haven’t done yet. Fortunately, there’s
a simple way to marshal interfaces. We’ll use the CoMarshalInter-
ThreadInterfaceInStream method. 
hr = CoMarshalInterThreadInterfaceInStream( 
IID_ISimpleCallback,
pSimple,
&pStream );
Starting the Worker Thread: Part 2
207
Additonal Information and Updates: http://www.iftech.com/dcom
 We’re using IStream for inter-thread marshaling. The
IStream interface will be used to pass a COM pointer between
the main server thread, and our worker thread. IStream is one of
those ubiquitous OLE interfaces that you often see used in COM
code. The receiving end of this call will be CoGetInterfaceAn-
dReleaseStream, which will be called on the worker thread.
The end result of this process is an IStream object, that is
used to marshal the ISimpleCallback interface. Later on, we’re
going give a pointer to the IStream to our worker thread object.
If you want more information on streams, see any of the numer-
ous OLE books and articles.
Starting the Worker Thread: Part 2
First we’re going to instantiate our worker thread object. We’ll
show the definition of CWorkerThread in the next section. The
CWorkerThread class has two member variables. The IStream
pointer stores the IStream we created with CoMarshalInter-
ThreadInterface-InStream.
 The m_lWait member is used to set the timeout period of
the worker thread. The worker thread will basically sleep this
amount of time before it notifies the client that it’s finished.
 CWorkerThread *pObj = new CWorkerThread();
// Set object variables
pObj->m_pStream = pStream;
pObj->m_lWait = lSeconds;
 // Create and start a thread to do 
// some processing. Pass in a 
// pointer to the thread object.
pt = AfxBeginThread( CWorkerThread::StartProc, pObj 
);
if (pt == NULL) hr = E_FAIL;
208    Chapter 12 •
Callback Interfaces 
One of the standard ways to start a thread in MFC is AfxBe-
ginThread. We’ll pass it a pointer to a static ThreadProc, and a
pointer to our worker thread object. 
The main routine of a worker thread is called a “Thread-
Proc”. A ThreadProc is analogous to the “main” function of a “C”
program, or the “WinMain” of a Windows application. This is the
starting address of the newly created thread. We’ll name our
ThreadProc “StartProc”. Notice that the ThreadProc is a static
member of the CWorkerThread class. Being static is a require-
ment - AfxBeginThread will be given the address of this method. 
AfxBeginThread starts a worker thread, and transfers control
to the ThreadProc. AfxBeginThread always passes in a single
parameter to the worker thread, a pointer. In this case, we’re
going to give the worker thread a pointer to our CWorkerThread
object. Let’s look at the definition of that object.
A Simple Worker Thread Class
We’re going to define a class that encapsulates the threading
behavior we need. This class is going to run as a worker thread,
which means it doesn’t have a window or a message loop. This
class will do its processing, then exit. 
class CWorkerThread  : public CwinThread
{
public:
// Thread start function. Must be static.
static UINT StartProc( LPVOID pParam );
// pointer to stream interface used in marshaling 
pointer
IStream *m_pStream;
// number of seconds to wait
long m_lWait;
};
As you can see, this is a simple class definition. We’re going
to put all the thread’s processing logic into the one and only
Starting the Worker Thread: Part 2
209
Additonal Information and Updates: http://www.iftech.com/dcom
method - the ThreadProc. For more sophisticated processing,
you’ll need a more sophisticated thread class.
Implementing the Worker Thread 
The worker thread only has a single method. This method will
do all the required calculations, then send a message back to the
client when it’s done. Here’s the one and only worker thread
method:
UINT CWorkerThread::StartProc( LPVOID pParam)
{
HRESULT hr;
 // Get the object pointer 
//we passed in to AfxBeginThread.
CWorkerThread *pThis = (CWorkerThread*)pParam;
 // Pointer to parent COM object
ISimpleCallback *pSimple;
 // init apartment model for this thread
hr = CoInitialize(0);
 // Get marshaled interface from stream
hr = CoGetInterfaceAndReleaseStream( 
pThis->m_pStream,
IID_ISimpleCallback,
(void**)&pSimple);
 // DO SOME REAL PROCESSING HERE!
// Spoof processing with a sleep
Sleep( pThis->m_lWait * 1000);
 // Signal client that processing is done. 
hr = pSimple->Now( pThis->m_lWait );
// Note: This pointer will be 
// marshaled from this worker thread 
// back to the main server thread. 
210    Chapter 12 •
Callback Interfaces 
// The actual Now() method
// gets called from the main server thread.
 // Shutdown com on this thread
CoUninitialize();
 // Delete CWorkerThread object
delete pThis;
// ThreadProcs usually return 0
return 0;
}
The first thing the thread does is extract a pointer from the
startup parameter. Remember, this is a static method, and it
doesn’t have a “this” pointer. To work around this, we’ve passed
in a pointer to a CWorkerThread object that was previously
instantiated (on the other thread.) This gives a working context.
// Get the object pointer we passed 
// in to AfxBeginThread.
CWorkerThread *pThis = (CWorkerThread*)pParam;
Next, we need to extract information from that object. The
first thing we’re going to use is the IStream interface that will
marshal our callback COM interface. CoGetInterfaceAndReleas-
eStream does exactly what its name implies: it extracts the ISim-
pleCallback interface from the stream, and cleans up the stream.
The end result of this call is a usable ISimpleCallback interface
pointer.
hr = CoInitialize(0);
 // Get marshaled interface from stream
hr = CoGetInterfaceAndReleaseStream( 
pThis->m_pStream,
IID_ISimpleCallback,
(void**)&pSimple);
 The COM interface ISimpleCallback is safely marshaled
between threads. We can call its methods without fear of thread-
ing problems.
Summary
211
Additonal Information and Updates: http://www.iftech.com/dcom
Now, we get to the actual processing step of the worker
thread. Because this is an example program, there isn’t any real
processing. To simulate a time consuming operation, we’re going
to waste some time with a Sleep.
Sleep( pThis->m_lWait * 1000);
Once this wait is finished, the worker thread is ready to kill
itself. Before we exit, however, we need to tell the client pro-
gram we’re finished. This is done by calling the familiar Now()
method.
 hr = pSimple->Now( pThis->m_lWait );
The ISimpleCallback interface was marshaled to the original
thread, so it will be executed on the server’s original thread. We
need to do this, because that main thread owns the client’s ICall-
Back interface. If we tried to call the Awake method directly, bad
things might happen. Instead of dealing with Awake directly,
we’re letting the Now() method handle it on the original server
object.
All Good Threads Eventually Die
What remains is just cleanup code. We close COM, delete the
worker thread object and exit the thread. At this point we’ve fin-
ished implementing our worker thread. 
CoUninitialize();
delete pThis;
return 0;
Summary
Normally, COM interfaces are one-directional and synchronous.
More sophisticated programs are going to have to move beyond
this model. If you’re going to use COM to establish two-way
communication between client and server, you’re going to have
212    Chapter 12 •
Callback Interfaces 
to deal with callbacks. The other alternative, Connection Points,
is really just a specialization of callbacks.
Implementing callbacks may seem unnecessarily compli-
cated - and it probably is. To effectively implement callbacks,
you have to have a basic understanding of threading models and
marshaling. Most of us are interested in building applications,
not the minutia of marshaling. 
T
H
I
R
T
E
E
N
13
Connection Points    
In the previous chapter, we built a client and server program that
demonstrated bi-directional, or callback, interfaces. Connection
points are really just a special type of callback interface. Actually,
for many applications, callbacks are the preferred type of bi-
directional interface. 
What makes connection points special is the fact that they
offer a standardized technique and a set of interfaces for two-
way communications. Connection points aren’t so much a single
entity as they are a set of interlocking interfaces. 
The main advantages of connection points over callbacks
are standardization and flexibility. In the OLE world, many types
of objects expect an implementation of connection points. An
example of this is IQuickActivate interface, which requires
IPropertyNotifySink as a sink interface. These objects need to
communicate back to their clients.
If you skipped the chapter on callbacks, consider going back and reading it. Most of the background on con-
nection points is covered in the callback chapter.
214    Chapter 13 •
Connection Points 
Connection points offer flexibility in their implementation. A
server can have numerous client (sinks) attached, or a single cli-
ent can have numerous servers. Connection points work well
with either configuration. If your server design needs this flexi-
bility, connection points may be a good choice.
Here’s a list of connection point classes and interfaces we’ll
be using in the example.
Figure 13–1
Configuration of a server and client using connection points
Interface or class
Where
Description
IConnectionPointContainerImpl Server
ATL class to manage a collection 
of connection points. The client 
will use this interface to find the 
connection point it needs.