ing an opening for C0, the simulator opens C(cid:48)
1 to ˆm and ˆmB,
which sustain the veriﬁer checks as deﬁned in Section 4.5.
The binding property of the commitment scheme asserts that
(ν,η) is used for the blinding. The aforementioned conver-
sation between the prover and veriﬁer is indistinguishable
from the real conversation. By checking the function ψ(·),
and as the service provider is honest-but-curious, the user is
assured that the service provider evaluated ψ(·) and is not us-
ing her as a decryption oracle. If the user deems the function
inadmissible, she aborts.
Integrity
5.2
Proposition 5.2. Consider a series of messages {msgi} cer-
tiﬁed by the data source with a digital signature scheme σ(·)
that uses a cryptographic hash function H(·) with nonces. As-
sume that the parameters of the CKKS (N,q,χenc,χkey,χerr)
and BDOP (β,k,n,q,N) schemes have been conﬁgured to
ensure post-quantum security, that the ZKB++ protocol exe-
cution of C achieves soundness κ, that the blinding function
Bν,η is hiding, and that the cryptographic commitment Com(·)
is hiding and binding. Then, our solution achieves integrity as
deﬁned in Section 2.3, as it ensures with soundness κ that the
output ˆm is the result of the computation on the user’s data.
Proof. Let us consider a cheating user with post-quantum
capabilities as deﬁned in Section 2.2. She wants to cheat the
service provider in obtaining from the public function ψ(·) a
result that is not consistent with the certiﬁed data. The public
function evaluated by the service provider is ψ(·) and returns
ˆm on the series {msgi} of data signed by the data source
with the signature scheme σ(·). We interchangeably denote
by ψ(·) the public function in the plaintext and ciphertext
domains. By Lemma A.1, the ciphertext ccctttψ can be decrypted
correctly using the secret key ssskkk. As stated in [55] adapted
to [29], the binding property of the commitments used during
the MPC-in-the-head guarantees that the proof P contains
the information required to reconstruct the state of players e
and e + 1. Given three accepting transcripts (i.e., one for each
challenge), the veriﬁer can traverse the decomposition of the
circuit from the outputs to the inputs, check every gate and
reconstruct the input. By surjectivity of the ZKB++ decom-
position function, the veriﬁer can reconstruct x(cid:48) s.t. Φ(x(cid:48)) = y
proving the 3-special soundness property (see proof of Propo-
sition A.1 in [55]). The completeness property of the ZKCE
evaluation follows directly from the construction of the (2,3)-
decomposition of the circuit. Thus, from a correct execution
of τ iterations of the protocol (parameterized by the security
parameter κ), a user attempting to cheat the ZKB++ execu-
tion will get caught by the service provider with probability
at least 1−2−κ. Hence, a malicious but rational user can only
cheat by tampering with the data before they are input to the
2118    30th USENIX Security Symposium
USENIX Association
circuit, i.e., the input messages or the encryption parameters.
As the user is rational, she samples proper noise for the BDOP
commitment; otherwise, she would lose either privacy or util-
ity: not sampling noise uniformly from S k
β would lead to a
privacy leakage; conversely, sampling noises in Rq with norm
bigger than β or with a degree above the threshold deﬁned
by the scheme would lead to an improperly formatted com-
mitment, and thus, a potential loss in utility, as the service
provider would reject it. By the collision-resistance property
of the hash function, it is computationally infeasible for the
user to ﬁnd a collision and thus a tampered message yielding
the same hash. By property A.3, the bound proof is correct
and offers special soundness: the service provider will detect
a cheating user that samples malicious noises to distort the
encryption, with probability at least 1− 2κ. Note that in the
case of an abort, the protocol is simply re-executed. Finally,
during the release protocol, the integrity of the computation’s
output ˆm is protected by the hiding property of commitment
C0, the hiding property of the blinding function (seen as a one-
time-pad shift cipher in Zq which achieves perfect secrecy
of ν·x, i.e., it is impossible for the user to ﬁnd ν and blind
another result as ˆmB), and the binding property of C1 [55].
Therefore, in CRISP users can only cheat with probability at
most 2−κ.
6 Evaluation
We evaluate CRISP on the three use cases discussed in
Section 1, namely smart metering, disease susceptibility,
and location-based activity tracking, using public real-world
datasets. We detail the instantiation and parameterization of
our proposed solution, then illustrate its overall performance
per use case, in terms of both overhead and utility. As previ-
ously mentioned, CRISP enables to ofﬂoad the data and to
conduct multiple operations on it. For simplicity, we present
only one operation per dataset.
6.1
We detail how the various blocks of our construction are
implemented and conﬁgured.
Implementation. We implement the various blocks of
CRISP on top of different libraries. The homomorphic com-
putations are implemented using the Lattigo library [43]. The
commitment and encryption blocks of the circuit are imple-
mented using CKKS from [89] by employing a ZKB++ ap-
proach. The circuit’s Boolean part (i.e., the hash and conver-
sion blocks) is implemented on top of the SHA-256 MPC-
in-the-head circuit of [55]. All the experiments are executed
on a modest Manjaro 4.19 virtual machine with an i5-8279U
processor running at 2,4 GHz with 8 GB RAM.
CKKS & BDOP. For CKKS, we use a Gaussian noise dis-
tribution of standard deviation 3.2, ternary keys with i.i.d.
coefﬁcients in {0,±1}N, and we choose q and N depending
on the computation and precision required for each use case,
such that the achieved bit security is always at least 128 bits.
Implementation Details
|pi|=|c| + 2κ + log2 3+
2
3
Each ciphertext encrypts a vector ddd consisting of the data
points {xi} in the series of messages {msgi}. Our three use
cases need only computations over real numbers, hence we
extend the real vector to a complex vector with null imaginary
part. Similarly, the BDOP parameters for the commitment to
the encryption noises are use case dependent. In principle, we
choose the smallest parameters n and k to ensure a 128-bit
security (n=1, k=5) and β is chosen according to N and q.
ZKB++. We set the security parameter κ to 128, which cor-
responds to 219 iterations of the ZKB++ protocol. We also
consider seeds of size 128 bits and a commitment size of
|c|=256 bits using SHA-256 as in [29]. Overall, considering
the full circuit, the proof size per ZKB++ protocol iteration
|pi| is calculated as
(|ddd| +|Com| +|Enc| +|ttt|) + bhash + bA2B,
with |ddd| being the bit size of the secret inputs, |Com| the
bit size of the commitment parameters, |Enc| the bit size of
the encryption parameters, bhash the number of multiplica-
tive gates in the SHA-256 circuit, bA2B the number of AND
gates in the conversion block, and |ttt| the bit size of the addi-
tional information required to reconstruct the data source’s
message but not needed for the service provider’s computa-
tion (e.g., user identiﬁer, nonce, timestamps, etc.). We note
that according to the NIST speciﬁcation [81], SHA-256 op-
erates by hashing data blocks of 447 bits. If the size of the
user’s input data exceeds this, it is split into chunks on which
the SHA-256 digest is evaluated iteratively, taking as initial
state the output of the previous chunk (see [81]). We adapt
the SHA-256 Boolean circuit described in [55], which uses
22,272 multiplication gates per hash block, to the setting of
ZKB++ [29]. The Boolean part of the circuit is focused on the
|xxx| least signiﬁcant bits of the arithmetic sharing of ddd which is
concatenated locally with a Boolean secret sharing of the ad-
ditional information (nonce, uid, etc.). In our implementation,
the user needs 182 ms to run the Boolean part of the circuit
associated with generating a hash from a 32-bits shared input
xxx. The veriﬁer needs 73 ms to verify this part of the circuit.
Release Protocol. We use SHA-256 as a commitment scheme
Com(·) and a linear blinding operation Bν,η(·) in Zq.
Evaluation Metrics. We evaluate the performance of our so-
lution on different use cases with varying complexity in terms
of computation (i.e., execution time) and communication (i.e.,
proof size) overhead. The proof P is detailed as the proof for
the ZKCE, as well as the BDOP bound proof. We also report
the optimal ZKCE proof size per datapoint: i.e., if the cipher-
texts are fully packed. To cover a wide range of applications
we evaluate various types of operations on the protected data
such as additions, weighted sums, as well as a polynomial
approximation of the non-linear Euclidean distance computa-
tion. As CKKS enables approximate arithmetic, we measure
the accuracy of our solution by using the relative error. Given
the true output of a computation m and the (approximate)
USENIX Association
30th USENIX Security Symposium    2119
(a) Smart Metering
(b) Disease Susceptibility
(c) Location-based Activity Tracking
(Addition)
(Weighted Sum)
(Euclidean Distance)
Figure 4: Histogram and boxplot of the relative error for the three use cases. The boxes shown on top of each ﬁgure represent the
interquartile range (IQ) and the median, the whiskers are quartiles ±1.5·IQ, and the dots are outliers.
value ˆm computed with CRISP, the relative error ε is deﬁned
as ε= m− ˆm
m .
6.2 Smart Metering
We consider a smart meter that monitors the household’s elec-
tricity consumption and signs data points containing a fresh
nonce, the household identiﬁer, the timestamp, and its con-
sumption. The energy authority is interested in estimating the
total household consumption (i.e., the sum over the consump-
tion data points) over a speciﬁed time period I (e.g., a month
or a year) for billing purposes
generate the proof for one ciphertext, containing 1,024 phh
measurements (i.e., 21 days worth of data), the user requires
tprove=3.3 min, and its veriﬁcation at the service provider’s
side is executed in tver=1.4 min. The estimated ZKCE proof
size for each ciphertext of 1,024 elements is 643.4 MB,
whereas the bound proof is 7.05 MB. For fully packed ci-
phertexts (1,024 datapoints), CRISP’s proof generation and
veriﬁcation respectively take 195 ms and 80 ms per datapoint,
with a communication of 628 KB. Finally, Figure 4a displays
the accuracy results for the smart metering use case. We ob-
serve that our solution achieves an average absolute relative
error of 5.1·10−5 with a standard deviation of 7.2·10−5, i.e.,
it provides very good accuracy for energy consumption com-
putations. We remark that more than 75% of the households
have an error less than ±2.5·10−4.
6.3 Disease Susceptibility
We assume a medical center that sequences a patient’s genome
and certiﬁes batches of single nucleotide polymorphisms
(SNPs) that are associated with a particular disease ∂. A pri-
vacy conscious direct-to-consumer service is interested in
estimating the user’s susceptibility to that disease by calculat-
ing the following normalized weighted sum
m∂ = ∑
i∈S∂
ωi · ddd[i],
where S∂ is the set of SNPs associated with ∂ and ωi are their
corresponding weights. The vector ddd comprises of values in
{0,1,2} indicating the presence of a SNP in 0, 1, or both
chromosomes, which can be represented by two bits. This use
case illustrates the need for ﬂexibility in the service provider’s
computations, since it may be required to evaluate several dis-
eases on the same input data at different times. Moreover,
it accentuates the need for resistance against quantum ad-
versaries, since genomic data is both immutable and highly
sensitive over generations.
Dataset & Experiment Setup. We employ the 1,000
Genomes public dataset [1], that contains the genomic se-
quences of a few thousands of individuals from various popu-
lations. We randomly sample 145 individuals and extract 869
msm = ∑
i∈I
ddd[i],
where ddd is the vector of the household consumption per half
hour. As our solution ofﬂoads the encrypted data to the service
provider, additional computations, e.g., statistics about the
household’s consumption, are possible without requiring a
new proof; this improves ﬂexibility for the service provider.
Dataset & Experiment Setup. We use the publicly available
and pre-processed UKPN dataset [90] that contains the per
half hour (phh) consumption of thousands of households in
London between November 2011 and February 2014. Each
entry in the dataset comprises a household identiﬁer, a times-
tamp, and its consumption phh. For our experiment, we ran-
domly sample a subset of 1,035 households and estimate
their total energy consumption over the time span of the
dataset with our solution. We set the parameters as follows:
We use a modulus of logq=45 bits and a precision of 25
bits, which imposes a maximum of 210 slots for the input
vectors (logN=11). Hence, each household’s consumption
phh is encoded with multiple vectors dddk to cover the time
span of the dataset. To evaluate its proof size, we assume
that the messages obtained from the smart meter include a
16-bit household id, a 128-bit nonce, a 32-bit timestamp, and
a 16-bit consumption entry.
Results. The average time for encryption of a vector of 1,024
datapoints at the user side is tenc=70 ms, and the decryption
requires tdec=0.7 ms. The mean time for the energy com-
putation at the service provider side is tcomp=130 ms. To
2120    30th USENIX Security Symposium
USENIX Association
Use Case
Table 1: Evaluation summary of CRISP (reported timings are the averages over 50 runs ± their standard deviation).
tver (s)
82± 5
13± 2
210± 10
tcomp (ms)
130± 30
22± 5
180± 30
Computation Mean Absolute
Relative Error
tprove (s)
200± 10
26± 4
470± 40
tenc (ms)
70± 10
60± 10
980± 70
tdec (ms)
0.7± 0.3
2.7± 0.8
7± 2
5.1· 10−5
2.2· 10−5
1.5· 10−2
Smart Metering
Disease Susceptibility
Location-Based Activity
Tracking
Sum
Weighted Sum