pendently by every server, takes as input the correspond-
ing IT-PIR query and outputs a share. Recover takes as
inputs all shares output by all m servers, and outputs the
plaintext block. We give the construction in Algorithm 1.
Seed homomorphic PRG (SH-PRG). A seed homo-
morphic PRG, G, is a pseudo-random generator over al-
gebraic group with the additional property that if given
952  25th USENIX Security Symposium 
USENIX Association
8
Algorithm 2: OblivSel with seed-homomorphic PRG
1 (σ ,r) ← Gen(k, pos)
• setr = (r1,··· ,rm) ← IT− PIR.Query(q, L, pos);
• set σ = (σ1,··· ,σm), s.t., (σ1,··· ,σm−1)
block ← Select(σ ,r, DB) // Every peer Pi
σm = k− ∑m−1
i=1 σi;
$
• compute Esharei ← IT− PIR.Compute(ri, DB);
• set Dsharei = Esharei − G(σi);
←− Sm−1, and
// Initiator
• compute Δ = ∑m
i=1 Dsharei;
G(s1) and G(s2), then G(s1 ⊕ s2) can be computed efﬁ-
ciently. That is, if the seeds are in a group (S,⊕), and
outputs in (G,⊗), then for any s1,s2 ∈ S, G(s1 ⊕ s2) =
G(s1)⊗ G(s2). We refer to [60] for more details.
Decryption / Re-encryption using SH-PRG. Lever-
aging the property of SH-PRG, we explain the
encryption, decryption and re-encryption of a block
in our protocol.
Every block in the tree is en-
crypted as Enc(k1, block) =block + G(k1).
The
decryption of the block can be then represented as
block = Dec(k1, Enc(k1, block)) = block + G(k1)− G(k1)
a
re-encrypting
For
different key k2,
en-
crypted block with a new secret key of the form
k1 − k2
Dec(k1 − k2, Enc(k1, block))
= block + G(k1)− G(k1 − k2) =block + G(k2)
=
Enc(k2, block).
encrypted
tracker decrypts
block with
the
the
such
that,
the
4.2.4 OblivSel Instantiation
In the following, we present an instantiation of OblivSel.
We consider a set of L encrypted blocks. Each block
blocki is a vector of elements in a ﬁnite group G of order
q. For every block, the key is generated at random from
Zq. The tracker has to keep an association between the
block key and its position. An algorithmic description is
given in Algorithm 2.
The tracker runs the Gen algorithm, which takes as
inputs the secret key k with which the block is en-
crypted and the block’s position pos, and outputs a se-
cret shared value of the key, σ, as well as the IT-PIR
queries,r. Every peer Pi holds a copy of the L encrypted
blocks and receives a share of the key, σi, as well as its
corresponding query, ri. Next, every peer runs locally
an IT− PIR.Compute on the encrypted blocks and out-
puts a share, Esharei. After getting the encrypted share
Esharei, each peer subtracts the evaluation of the SH-
PRG G on σi from Esharei (Esharei − G(σi)) to get the
decrypted share Dshare. Finally, initiator outputs the
sum of all the Dsharei’s received from the m peers to
get the desired decrypted block. As long as there is one
non-colluding peer among the m peers and G is a secure
PRG, the scheme is position hiding.
Highly Parallelizable. Notice that, in Algorithm 2, each
of the m peers performs scalar multiplications propor-
tional to the number of encrypted input blocks. The
encrypted blocks can be further distributed to different
peers such that each peer performs constant number of
scalar multiplications. Given the availability of enough
peers in the network, OblivSel is extremely parallelizable
and therefore provides a constant time computation.
OblivSel as a building block. OblivSel protocol can
be used as a building block in our second and main
OBLIVP2P-1. For fetching a block, an invocation of
OblivSel is sufﬁcient as it obliviously selects the re-
quested block and returns it in plaintext to the initia-
tor. Additional steps such as re-encrypting the block and
adding it to stash are required to complete the fetch op-
eration. The details of these steps are in Section 4.3.
However, the eviction operation in ORAM poses an
additional challenge. Conceptually, an eviction consists
of block sorting, where the tracker re-orders the blocks
in the path (and the stash). Fortunately, our protocol can
perform eviction by several invocation of OblivSel prim-
itive. Given the new position for each block, the P2P
network can be instructed to invoke OblivSel recursively
to output the new sorted path. The encryption of blocks
has to be refreshed, but this is handled within OblivSel
protocol itself when refreshing the key, using seed ho-
momorphic PRG. We defer the concrete details of per-
forming oblivious eviction to Section 4.3.
4.3 OBLIVP2P-1: Complete Design
In a P2P protocol for a content sharing system the tracker
is responsible for managing the sharing of resources
among the peers in the network. To keep a consistent
global view on the network, the tracker keeps some state
information that we formally deﬁne below:
Deﬁnition 4.4. P2P network’s state consists of: (1) num-
ber of possible network connections per peer, and (2) a
lookup associating a resource to a (set of) peer identiﬁer.
The tracker can store more information in the state de-
pending on the P2P protocol instantiating the network.
We start ﬁrst by formalizing a P2P protocol.
Deﬁnition 4.5. A P2P protocol
four
a
(Setup, Upload, Fetch, Sync)
T , and a set of peers, (P1,··· ,Pn), such that:
is a tuple of
algorithms P2P =
tracker,
interactive)
involving
(possibly
• s ← Setup(s,{pid}): run by the tracker T , takes as
inputs a state s and a (possibly empty) set of peers
identiﬁers {pid}, and outputs an updated state s.
USENIX Association  
25th USENIX Security Symposium  953
9
Scheme
OBLIVP2P-0
OBLIVP2P-1
Tracker
bandwidth
(bits)
O(logN · B)
O(cid:31)log3 N(cid:30)
Network
bandwidth (#
blocks)
O(1)
O( logN
N )
Tracker #
encryption
O(logN · E)
−
Network
computational
overhead
−
O( log 4N
N · E )
Network
Storage
overhead
O(1)
O(burst)
Tracker storage
# blocks
O(logN)
−
Table 2: Comparison of OBLIVP2P instantiation per access. B the block size, N the number of blocks in the network, E the overhead of a block
encryption, E a multiplication in elliptic curve group, burst the number of versions
• (cid:31)out, (A1,··· ,Am), s(cid:30)
←
Upload(cid:31)(ﬁd, ﬁle), (A1,··· , Am), s(cid:30):
is an in-
teractive protocol between an initiator peer, a
(possibly randomly selected) set of m ≥ 0 peers,
and a tracker T . The initiator peer has as input a
ﬁle identiﬁer ﬁd, and the ﬁle ﬁle, the peers’ input
is memory array Ai each, while for the tracker its
state s. The initiator’s output is out ∈ {⊥, ﬁle},
the peers output each a modiﬁed local memory Ai,
while the tracker outputs an updated state s.
• (ﬁle,⊥, s) ← Fetch(cid:31)ﬁd, (A1,··· , Am), s(cid:30): is an in-
teractive protocol between an initiator peer, a (pos-
sibly randomly selected) set of m ≥ 0 peers, and a
tracker T . The initiator peer has as input a ﬁle
identiﬁer ﬁd, the peers’ input is a memory array Ai
each, while for the tracker its state s. The initia-
tor outputs the retrieved ﬁle ﬁle, each peer gets ⊥,
while the tracker outputs an updated state s.
• (cid:31)(A1,··· ,Am), s(cid:30) ← Sync(cid:31)(A1,··· , Am), s(cid:30): is an
interactive protocol between the tracker and a (pos-
sibly randomly selected) set of m ≥ 0 peers. The
peers’ input is a memory array Ai each, while for
the tracker its state s. The peers output each a (pos-
sibly) modiﬁed memory array Ai, while the tracker
outputs an updated state s.
Note that a modiﬁcation of a ﬁle already stored in the
network is always considered as uploading a new ﬁle.
Setup Algorithm. In a P2P network, different peers have
different storage capacities and hence we differentiate
between the number of blocks, NB, and the number of
physical peers NP. For this, we fragment the conceptual
ORAM tree into smaller chunks where every peer physi-
cally handles a number of buckets depending on its local
available storage. In addition, to keep a consistent global
view on the network, the tracker keeps some state infor-
mation. In OBLIVP2P-1, the state is composed of differ-
ent meta-information that are independent of the block
size: FileMap, PosMap, TagMap, NetMap, KeyMap,
and StashMap. Table 1 gives more details about the
metadata. The state also contains a counter recording the
last eviction step, and ∼ B
logq points sampled randomly
from a q-order elliptic curve group G to be used for DDH
seed homomorphic PRG, where B is the block size. The
number of points in the generator needs to be equal to
those in the data block. These points are publicly known
Algorithm 3: Fetch(ﬁd, s): OBLIVP2P-1 fetch operation
Input: ﬁle id ﬁd, and state s
Output: ﬁle {block}, and updated state s
// Initiator requests tracker for a file
1 {adr} ←FileMap (ﬁd);
for adr in {adr} do
(tag, pos) ←(cid:31)TagMap(adr), PosMap(adr)(cid:30);
k ← KeyMap(adr);
compute (σ ,r) := OblivSel.Gen(k, pos);
set A =(cid:31)stash, P(tag,1),··· , P(tag,L)(cid:30);
// Initiator retrieves the block
compute block := OblivSel.Select(σ ,r, A);
// Re-encryption with a new secret
compute k
compute (σ ,r) := OblivSel.Gen(k, pos);
append Δ := OblivSel.Select(σ ,r, A) to the stash, and update state
s;
←− Zq;
$
2
3
4
5
6
7
8
9
10
11 end
to all peers in the network. The tracker randomly dis-
tributes the stash among the peers and records this infor-
mation in the StashList.
Fetch Algorithm. The Fetch process is triggered when
a peer requests a particular ﬁle. The tracker determines
the block tag and position from its state for all the blocks
composing the ﬁle. The m peers, the tracker, and the
initiator runs OblivSel protocol such that the initiator re-
trieves the desired block. The OblivSel is invoked a sec-
ond time to add a new layer to the retrieved block and
send it to the peer who will hold the stash. The tracker
updates its state, in particular, update KeyMap with the
new key, update the PosMap with the exact position of
the block in the network (in the stash), and TagMap with
the new uniformly sampled tag. We provide an algorith-
mic description of the Fetch process in Algorithm 3.
Sync Algorithm. The Sync in OBLIVP2P-1 consists
of: (1) updating the state of the network, but also, (2)
evicting the stash. The tracker determines the path to be
evicted, tag = ν mod 2L and then fetches the position of
all blocks in the stash and the path, P(tag). The tracker
then generates, based on the least common ancestor al-
gorithm (LCA), a permutation π that maps every block
in A =(cid:31)stash, P(ν mod 2L,1),··· , P(ν mod 2L,L)(cid:30) to
its new position in A, a new array that will replace the
evicted path and the stash. The block A[π(i)] will be
mapped obliviously to A[i], for all i ∈ [|stash| + z · L].
The oblivious mapping between A and A is performed
by invoking OblivSel between the tracker, the peers in
954  25th USENIX Security Symposium 
USENIX Association
10
Algorithm 4: Sync(s): OBLIVP2P-1 sync operation
Input: tracker state s
// Fetch necessary parameters