den Credential Retrieval appears not to have been formally
deﬁned before.
Nevertheless, there exists an extensive body of literature
on closely related notions, some general such as MPC, OT,
PIR, EKS, PAKE, and some speciﬁc such as the Ford-Kaliski
server-assisted distributed password protocol [26] or Chaum’s
and Boldyreva’s unique blind signature schemes [21, 9], that
approximate, realize, or subsume the HCR functionality.
We shall attempt to give a brief survey of the most ger-
mane notions.
MPC: Multi-Party Computation.
Like many multi-party cryptographic protocols, HCR may
arguably be viewed as a special kind of Multi-Party Com-
putation (MPC). General MPC is a very general tool which
allows two or more parties to compute a public function
while keeping their respective inputs secret. We mention
that MPC ﬁnds its roots in Yao’s “scrambled circuits” [46];
alternative constructions were later proposed, most notably
from OT [30, 37].
Where the characterization of HCR as mere MPC fails,
though, is in the existing MPC protocols’ diﬃculty to have
the parties reuse their secret inputs, which is essential in
HCR due to the need to keep the plaintext hidden from
the storage server. For practical use, successful HCR con-
structions would also have to be orders of magnitude more
eﬃcient that general MPC, even without regard for the pre-
ceding restriction.
230OT: Oblivious Transfer.
More adequately perhaps, HCR may also be viewed as a
special kind of Oblivious Transfer (OT). The notion of OT
was ﬁrst invented in the quantum world by Brassard and
Cr´epeau (see [6]) and then realized in the classical model
by Rabin [44] and further developed in [24, 16] among many
others. More precisely, OT N
M is a special case of MPC with a
sender and a receiver, where the sender holds N secret mes-
sages (either bits or strings) and the receiver holds M secret
indices between 1 and N . The protocol allows the receiver to
obtain the messages designated by its indices, “obliviously”,
i.e., without the sender learning anything about the indices,
or the recipient about the remaining messages. It is known
from [30, 37] that MPC can be constructed from OT 4
1; it is
thus a powerful primitive. Security deﬁnitions and more re-
ﬁned constructions of OT were subsequently proposed over
the years, from [2] to [40, 41, 35, 32] using classic algebraic
methods, and more recently [18, 31] using bilinear pairings
(see [7, 27]).
Where HCR diverges from OT is that the natural realiza-
tion of HCR from it would require an OT N
1 protocol with an
impractically large value N equal to the size of the password
space: one unique string for each possible password, set up
by the client.
PIR: Private Information Retrieval.
A third notion that is related to HCR is that of Private
Information Retrieval (PIR). In short, PIR is a relaxation of
OT that only cares about the privacy of the recipient [22],
whose queries should remain secret from the sender. An ex-
tensive body of research has focused on making PIR eﬃcient
for large databases [17, 39], and to add functionalities such
as keyword search [38] and private write operations [11].
Notwithstanding the similarities, the notion of PIR fails to
provide a suitable HCR for the same reason as OT N
1 above,
namely, arising from the need to represent the password-to-
plaintext map as an explicit database on the server side, of
size linear in the admissible password space.
EKS: Encrypted Keyword Search.
Of particular relevance is the notion of Encrypted Key-
word Search (EKS), which is a specialized modiﬁcation of
PIR. An EKS scheme is a client-server private retrieval pro-
tocol that involves an encrypted corpus of data on the server
side, remotely searchable by the client against pre-programmed
keywords using encrypted queries. Public-key EKS can be
constructed from, and is known to imply, identity-based en-
cryption with certain anonymity properties [10, 1, 14].
Though HCR is even closer in spirit to EKS than it is to
PIR or OT, this EKS notion still fails to provide an eﬃcient
HCR realization for the same reasons as before: the need
for the client ﬁrst to commit to a manageably sized pass-
word space, and then set up the server with one encrypted
searchable string per password.
PAKE: Password-Authenticated Key Exchange.
In a diﬀerent way, HCR also draws comparisons to Password-
Authenticated Key Exchange (PAKE). First proposed by
Bellovin and Merritt [4] under the name Encrypted Key Ex-
change (EKE), PAKE allows two parties sharing a short
password to establish an authenticated secure channel across
an adversarially controlled medium. “Augmented” (APAKE)
extensions of the same [5] further allow the client to keep the
password secret from the server, which is only given a one-
way function thereof. This is in order to reduce the risk of
password exposure in case of server compromise, in anticipa-
tion of people’s tendencies to reuse (variations of) the same
password in more than one context. Many further exten-
sions have been proposed over the years, concerning, e.g.,
deﬁnitions [3, 15], analysis [8, 20], and PAKE [36, 28, 19]
and APAKE [33, 29] constructions.
Asymmetric APAKE protocols in particular have much in
common with the HCR notion we propose, though they dif-
fer in at least one important point: explicit authentication.
Since the main purpose of (A)PAKE protocols is to provide
mutual authentication, clearly they must indicate to the par-
ties whether the authentication succeeded or not. Alas, as
we already discussed earlier in connection with Strategy D,
any such feature can be subverted into an explicit oﬄine
password test for the server, and is thus undesirable per the
HCR threat model.
Server-Assisted Password Generation.
In 2000, Ford and Kaliski proposed a server-assisted pass-
word generation protocol, whereby a user wishing to au-
thenticate with a group of servers from a password, would
ﬁrst use the password to retrieve from each server a share of
some authentication key, obliviously, and then combine all
the shares to obtain the full key.
It is not the only similarity to HCR: the single-server Ford-
Kaliski protocol directly realizes HCR with an appropriate
redeﬁnition of the players. Indeed, one of the stated goal of
the Ford-Kaliski protocol is to deprive any incomplete coali-
tion of servers the ability to perform an oﬄine dictionary
attack against the user password, much as HCR does with
respect to the storage server.
The main conceptual diﬀerence is that Ford-Kaliski spec-
iﬁes the password-based reconstitution of a zero-redundancy
random key for authentication within the same pool of servers,
whereas HCR seeks the password-based retrieval of an ar-
bitrary low-redundancy plaintext from a single server for
unspeciﬁed purposed with an unspeciﬁed third party.
Unique Blind Signatures.
In 1982, Chaum proposed the notion of blind signature
protocols [21], whereby signatures can be made blindly on
committed messages, and later unblinded by the original re-
questor then subsequently veriﬁed by anyone, without the
help of the signer. The original construction from [21] was
based on RSA, and was in fact a unique blind signature,
meaning that the signature is entirely determined by the
signing key and the unblinded message. In 2003, Boldyreva
proposed a very eﬃcient construction of a unique blind sig-
nature [9], based on the bilinear pairings. Both construc-
tions can be proven secure in the random-oracle model from
suitable complexity assumptions.
The connection with our concern is that unique blind sig-
nature protocols can easily be transformed into HCR pro-
tocols, in the random-oracle model, by letting the message
be the password, and the hash of the signature be the en-
cryption key for the plaintext of the credentials to be stored.
Unique blind signatures are in fact strictly more powerful,
since they come with a public veriﬁcation function that has
no counterpart in HCR.
Coming full circle, one of the Ford-Kaliski protocol in-
stantiations was described in [26] as a direct application of
231Chaum’s blind signature, whereas the other instantiation is
a close cousin of Boldyreva’s signature (by comparison, the
Ford-Kaliski construction seems to take a shortcut, which
may aﬀect its security reducibility to the same assumption).
“Entropic” Encryption.
Earlier we saw that low-redundancy messages such as keys
are the main type of applications targeted by HCR. For com-
pleteness, we mention the closely related notion of encryp-
tion for high-entropy messages.
For the same reason that it may be diﬃcult to recognize
the correct plaintext in an guessing attack against HCR,
it can be shown that encrypting high-entropy messages is
generally easier than arbitrary messages if the encryption
key is short, because it is the total entropy of the key and
message that a potential attacker will have to overcome.
See for example [45], [23], and the references therein. Of
course, those notions hearken all the way back to the ideas of
Shannon, whose one-time pad represents a bright spot all the
way on one side of the message-vs.-key-entropy spectrum.
Although HCR operates on a similar principle, the main
diﬀerence is that in HCR we care about protecting the pass-
word as much (or perhaps even more) than the plaintext
itself (since the same password may protect more than one
plaintext). To take an extreme example, a good HCR scheme
should maintain its composure even if the plaintext is the
empty string (surely a zero-entropy message, but also a zero-
redundancy one at the same time), whereas most notions of
encryptions trivially break down in this situation.
Halting Passwords.
For completeness, we mention some recent progress in
stand-alone password-based encryption, provided by the Halt-
ing Key Derivation Functions (HKDF) from [13]. There, the
author shows that security gains can be achieved for short
passwords by using a very expensive password-to-key deriva-
tion function, and whose expense parameter is furthermore
cryptographically hidden from view. Such parameter is cho-
sen by the encryptor on a case-by-case basis, and need not
be remembered.
One might think that HKDFs would be useful in our con-
text to make redundant plaintexts much more diﬃcult to
recognize than they would normally be, e.g., by applying
the HKDF to the plaintext before setting up the HCR us-
ing the same password. However, their feature of halting
only on the correct password is technically a liability in our
context, as it could be exploited by an insider adversary to
provide oﬄine password validation (albeit a very and unpre-
dictably expensive one), which is something we try to avoid
with HCR.
Practical Security Systems.
We conclude this tour by mentioning a number of sys-
tem architectures that seek to leverage a weak password
into strong and/or reusable credentials, principally for single
sign-on applications on the internet.
Some of them [43, 25] rely on external servers with varying
trust requirements, perhaps requiring the user to carry a list
of one-time tokens that are translated into usable passwords
by a proxy web-site [42].
Other approaches [34] seek to confuse the attacker by giv-
ing the appearance of many valid decryption passwords, by
making the true plaintext hard to recognize.
2. DEFINITIONS
We now give a precise deﬁnition of the HCR primitive,
and formalize the security requirements.
2.1 Abstract Primitive
tities: a preparer P, a querier Q, and a server S.
The Hidden Credential Retrieval model involves three en-
The ﬁrst two entities (P and Q) embody the user dur-
ing the preparation and the retrieval phases of the protocol,
i.e., they embody the same person but at diﬀerent times
along the life of the protocol, to capture the possibility of a
“memory loss” incurred by the user.
The third entity (S) embodies the remote storage facility,
which has unrestricted amounts of persistent memory, and
is of course distinct from the user.
HCR then consists of the following two protocols:
Store : (cid:104)P[Pwd, Msg],S[/◦](cid:105) (cid:55)→ (cid:104)Ctx, Ctx(cid:105)
done once initially, over a secure channel
The Store protocol involves the user acting as preparer
P and the selected storage server S;
its purpose is
to set up the parties’ long-term secrets, especially the
server’s.
To bootstrap our storage and retrieval protocol, the
client must have selected a server with which to do
business, and must be able to communicate securely
with it for the initial setup: we model this the usual
way by requiring an authentic private channel for this
storage phase only.
• The preparer P takes as two private inputs: a
memorable password Pwd and a plaintext creden-
tial Msg.
• The server S takes no private input, denoted here
by the null symbol /◦.
At the end of the exchange, S (and possibly P) will
have acquired a randomized private credential cipher-
text Ctx.
Note: Ctx is intended for S alone. P can learn it too,
but nobody else should. The point of requiring authen-
ticated private communications in the storage phase is
so that P can limit the disclosure of Ctx to the server S
it trusts to act as an insider. By deﬁnition, the knowl-
edge of Ctx is what will separate an “insider” from an
“outsider”.
Retrieve : (cid:104)Q[Pwd(cid:48)],S[Ctx(cid:48)](cid:105) (cid:55)→ (cid:104)Msg(cid:48), /◦(cid:105)
can be repeated, over adversarial channels
The Retrieve protocol is an exchange between the user
acting as querier Q and the server S. It may be con-
ducted any number of times, and make no presumption
about the security of communication, or the parties’
identities.
• The querier Q takes one private input: a password
Pwd(cid:48).
Ctx(cid:48).
• The server S takes one private input: a ciphertext
Upon completion of the exchange, S has learned /◦, or
nothing at all; whereas Q has obtained a plaintext Msg(cid:48)
232that is a deterministic function of both parties’ inputs.
Msg(cid:48) must satisfy the following condition w.r.t. the
inputs used by P and S in the previous Store protocol:
(Pwd
(cid:48)
= Pwd) ∧ (Ctx
(cid:48)
= Ctx) ⇒ (Msg
(cid:48)
= Msg) .
We stress that neither S nor Q learns from this proto-
col whether Q retrieved the correct Msg.
2.2 Informal Threat Model
Before we formally deﬁne the security requirements of
Hidden Credential Retrieval, it is useful to enumerate infor-
mally all the possible threats one by one, to better motivate
the model. The security goals we seek to defeat the various
threats are as follows.
1. Total security against passive eavesdroppers: Passive
observers that do not participate in the protocol should
gain no computational advantage in recovering Ctx much
less Msg or Pwd from observing arbitrarily many proto-
col execution transcripts between the two honest play-
ers Q and S.
2. Online security against active outsiders: An external
attacker that takes an active part in the protocol, e.g.,
by impersonating Q or S, or by modifying messages
between Q and S, should not be able to learn anything
other than whether a particular password guess Pwd(cid:48)
is correct or not (with at most one guess tested per
protocol execution).
3. Oﬄine security against insiders: The server S, though
entrusted with the ciphertext Ctx, should not be able
to recover the corresponding plaintext Msg more ef-
ﬁciently than by conducting a brute-force oﬄine dic-
tionary attack against the encryption password Pwd.
This must hold even though S may be involved in arbi-
trarily many protocol executions with the user Q who
knows the correct password.
4. Absence of any spurious induced validity test: The re-
trieval protocol itself must not be subvertible into pro-