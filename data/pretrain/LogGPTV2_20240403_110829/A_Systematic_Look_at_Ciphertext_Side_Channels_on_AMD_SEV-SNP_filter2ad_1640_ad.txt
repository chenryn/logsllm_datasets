0
Pair
A
D
A
D
B
C
B
C
Recovering k from ciphertext pairs. Recall that, at the end
of each loop iteration, pbit stores the i-th bit of the nonce k.
The attacker thus can recover k if they can infer the value of
pbit in each iteration. We use gPA0 to denote the guest
physical address of the stack page where pbit is stored,
and gPA1 for the address of BN_is_bit_set(). Similar
to the attack in Section IV-A, the attacker uses the page fault
controlled channel in combination with the retired instructions
performance counter for locating the pages.
The attacker records the ciphertext of gPA0 when he
intercepts the NPF of BN_is_bit_set() (gPA1), which
corresponds to the state after the previous loop iteration (i.e.,
pbit still has its old value). As shown in Table I, in the ith
iteration, the attacker can observe one of four possible pbit
and kbit pairs. We use the letters A to D to denote the four
possible ciphertexts. At the end of the i-th iteration, pbit and
kbit are updated according to ki (0 or 1). Thus, when the
attacker intercepts the NPF of gPA1 in the i + 1-th iteration,
there are 8 possible observation cases.
They then analyze the ciphertext of gPA0 to (1) locate
the offset of the 16-byte block where pbit is in and to (2)
infer the value of pbit for this iteration. For (1), the attacker
can easily identify the offset because they should observe the
four different ciphertext randomly but repeatedly at a certain
offset, which reveals the ciphertext changes of the pair (pbit,
kbit). For (2), the attacker can infer the value of pbit
by analyzing two subsequent ciphertext of (pbit, kbit) as
shown in Table I. The attacker applies the following algorithm
to recover the pbit sequence: In the ﬁrst iteration, both kbit
and pbit are initialized to 1, thus producing ciphertext D.
The attacker then ﬁnds an n-th iteration that has the same
ciphertext as the following n + 1-th iteration. Then (pbit,
kbit) for the n-th and n + 1-th iterations must either be A
or C. If the next n + x-th iteration with a different ciphertext
produces a ciphertext other than D, then the ciphertext for nth
and n + 1th iterations must be C. Otherwise, the ciphertext
represents A. After identifying A, C, and D, the remaining
ciphertext represents B.
1) Attack Steps:
 Locate the two target physical addresses. The attacker
ﬁrst needs to locate the guest physical addresses of the target
stack page gPA0 and the target function page gPA1 . We use
the same methods as in Section IV-A to locate the pages.
 Intercept the for loop. The attacker iteratively clears the
P bit in the NPT to interrupt the execution of the for loop.
Speciﬁcally, the attacker clears the P bit of gPA0 when a NPF
of gPA1 is intercepted and clears the P bit of gPA1 when a
NPF of gPA0 is intercepted later. The attacker thus tracks the
internal execution states of the for loop.
 Record the ciphertext of gPA0. Given the structure of
the loop, there are 5 NPFs for both gPA0 and gPA1 for one
iteration. Thus, for a 256-bit nonce k, the attacker needs to
intercept 256 * 5 = 1280 NPFs for both gPA0 and gPA1.
In each iteration, the ﬁrst NPF for gPA0 is triggered when
BN_is_bit_set ﬁnishes execution and the program tries
to touch the stack page where (pbit and kbit) is in. At this
execution point, both kbit and the pbit are not yet updated.
The attacker records the ciphertext of the whole stack page
since the offset of pbit and kbit change slightly between
different runs of the algorithms.
 Infer the value of k. After all 256 iterations of the for
loop, the attacker determines the offset and recovers the nonce
k using the strategy we introduced in Section V-A.
2) Evaluation: The test platform was the same as described
in Section IV-D. Instead of targeting the secp384r1 curve,
we picked a different curve secp256k1, which is widely
used in Bitcoin, to show that the attack works for different
curves. The victim VM computes an ECDSA signature by call-
ing ECDSA_do_sign in the OpenSSL library. We repeated
the attack 50 times. In 92% of the attempts, we could recover
the nonce k with 100% accuracy. After identifying the target
functions, which we only needed to do once, the average time
used to conduct the attack is 1.23 seconds with a standard
deviation of 1.01 seconds.
B. Breaking Constant-time EdDSA via collision attack
In the previous attack case studies we have used the dic-
tionary attack primitive by guessing and recording plaintext-
ciphertext mappings. We now show how the attacker can break
constant-time EdDSA by monitoring the collision of the secret
dependent value’s ciphertext. While the attack would also be
applicable to the constant time swaps used by the ECDSA
variant described above, we show how the collision attack
can work on the constant time EdDSA implementation of
OpenSSH with the ed25519 curve. As this implementation
processes the secret in a batched manner, it is less susceptible
to the dictionary attack previously applied to the ECDSA
implementations.
The EdDSA signature algorithm [9] works similar to
ECDSA, with the most noticeable difference being the deter-
ministic nonce generation to prevent attacks based on ﬂawed
random number generators. The algorithm works as follows:
1) Provide a valid EdDSA parameter set (CURVE, G, n, c,
l, H) with 2c·l = |CURVE|, where G is the elliptic curve
base point of prime order l and thus l · G = 0. H is a
cryptographic hash function with 2b output bits.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:55:46 UTC from IEEE Xplore.  Restrictions apply. 
8344
1 void ge25519_scalarmult_base(ge25519_p3 *r, const
1 static void cmov_aff(ge25519_aff *r, const
sc25519 *k) {
signed char b[85];
int i;
ge25519_aff t;
sc25519_window3(b,k);
choose_t((ge25519_aff *)r, 0, b[0]);
fe25519_setone(&r->z);
fe25519_mul(&r->t, &r->x, &r->y);
for(i=1;ix, &p->x, b);
fe25519_cmov(&r->y, &p->y, b);
2
3
4 }
5
6 static void choose_t(ge25519_aff *t, unsigned long
long pos, signed char b) {
fe25519 v;
int i = 0;
*t = ge25519_base_multiples_affine[5*pos+0];
cmov_aff(t, &ge25519_base_multiples_affine[5*pos
+1],equal(b,1) | equal(b,-1));
cmov_aff(t, &ge25519_base_multiples_affine[5*pos
+2],equal(b,2) | equal(b,-2));
cmov_aff(t, &ge25519_base_multiples_affine[5*pos
+3],equal(b,3) | equal(b,-3));
cmov_aff(t, &ge25519_base_multiples_affine[5*pos
+4],equal(b,-4));
fe25519_neg(&v, &t->x);
fe25519_cmov(&t->x, &v, negative(b));
7
8
9
10
11
12
13
14
15
16 }
Listing 3: Swap and lookup table access functions.
cmov_aff without knowing the plaintext for the ciphertext.
The information whether the ciphertext value has changed or
not allows us to directly infer b.
After leaking the value of b, the attacker can invert the
operations applied in sc25519_window3 (Listing 2) to
recover the secret scalar k. Knowing k and the corresponding
signature (R, s) allows to recover ds, which is sufﬁcient to
create arbitrary valid signatures. Knowing ds is not equal
to knowing the secret key dA, as the latter is still required
to compute the nonce k according to step 3. However, only
a party knowing the private key dA can detect this subtle
difference.
1) Attack Steps:
 Trigger the OpenSSH server. The attacker opens an SSH
connection with the server, and explicitly requests the usage of
the EdDSA key. EdDSA is enabled in the default conﬁguration
under Ubuntu.
 Locate the target physical addresses. The attacker uses
the page fault controlled channel and the performance counter
technique from Section Section IV-A) to infer the physical
addresses of the choose_t and fe25519_cmov functions.
 Intercept execution before and after the constant
time swap operation. The attacker then uses the page fault
controlled channel to intercept the execution of the VM by
unsetting the P bit of the targeted pages in the NPT.
 Take snapshots of the buffer t. The attacker obtains
the physical address of the buffer t by tracking the write
access pattern during the execution of the constant time swap
operation using the NPF side channel. The attacker then steps
the loop using the page fault controlled channel and takes
snapshots of the buffer t in each iteration.
 Recover the secret scalar t. Using the snapshots of
the buffer t before and after each call to fe25519_cmov
in choose_t (note that cmov_aff wraps this func-
tion),
the attacker can immediately deduce the value of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:55:46 UTC from IEEE Xplore.  Restrictions apply. 
9345
b. After knowing the value of b, the attacker inverts the
windowing and sign transformation operations applied in
sc25519_window3(b,s) to obtain the secret scalar k.
The attacker uses the ﬁrst parameter R of the signature that
the server sends in step  to validate the value of k, and
extracts the signing secret ds from the second parameter S of
the signature using k.
2) Evaluation: We ran the end-to-end attack 500 times.
In 86% of the attacks, we could fully recover the signing
secret with 100% accuracy. Of the failed attack runs, only
7 where due to errors in detecting the correct code pages. The
remaining errors are most likely misdetections of the memory
location of the buffer t. The average runtime of the attack
was 7.9 seconds with 2.2 seconds standard deviation.
VI. COUNTERMEASURES
There are two categories of countermeasures against the
attacks presented in this paper: First, the underlying issue may
be addressed at the architectural level, which would likely be
the most reliable approach. Otherwise, the identiﬁed problems
can be also tackled at
the software level, with a certain
performance overhead. We discuss both hardware/architecture-
based and software-based countermeasures, and point out
methods for hardening existing software against the attacks
presented in this paper.
A. Architectural Countermeasures
There are two possible hardware approaches for closing the
ciphertext side channels. However, both approaches introduce
high overhead.
First, one may change the encryption mode of SEV to
use probabilistic encryption: a random nonce or incremental
counter is included in the encryption and is updated on
each memory write, effectively randomizing the resulting
ciphertexts on each write. However, probabilistic memory
encryption requires additional memory for storing the nonces.
For example, Intel SGX combines AES-based probabilistic
encryption with MACs to achieve conﬁdentiality, integrity and
replay protection. In SGX, data is encrypted in a tweaked
counter mode, where the nonce depends on both the physical
address of the encrypted memory block and a 56 bit counter
value, to ensure replay protection [16]. The counter values are
kept in the integrity tree, together with the MAC tags that
ensure integrity protection. Only the head nodes of the tree
are stored on-chip, while the remaining integrity tree remains
in memory and needs to be checked on each memory access,
resulting in a signiﬁcant memory and latency overhead.
A second approach is preventing the attacker from reading
the VM’s physical memory: On a software/ﬁrmware layer,
this could be achieved by using a similar RMP mechanics
as in SEV-SNP (Section II-A), which already prevents write
accesses through an additional RMP check. However, this
would introduce a certain overhead when applied to all read
operations due to the more frequent read access and the extra
RMP lookup. For example, for a single read access inside the
VM, a series of RMP checks are needed, including four checks
for the 4-level GPT and one check for the data page. For each
GPT level, four additional RMP checks are needed for the
4-level NPT. In addition, on-chip access control may still be
susceptible to the off-chip attacks described in Section II-C.
B. Software-based Countermeasures
While hardware-based countermeasures would be prefer-
able due to stronger security guarantees, their feasibility and
practicality demand further validation. Thus, in the following
sections, we describe general methods for mitigating the
vulnerabilities on a software level. There is no single software-
based method that is perfectly suited for all scenarios, as kernel
structures, stack, and heap are all vulnerable. Thus, we present
how applications can mitigate ciphertext side channels in three
different ways, building on the assumption, that register values
are immune to the ciphertext side channel. However, as shown
in Section IV, this is not the case, as the kernel stores the