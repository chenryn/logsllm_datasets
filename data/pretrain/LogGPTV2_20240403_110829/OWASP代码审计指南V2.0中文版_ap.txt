按动词筛选 
当 IIS 拒绝基于此功能的请求时，记录的错误代码是 404.6。这对应于 UrlScan 中的使
用 UseAllowVerbs, AllowVerbs, 和 DenyVerbs 选项。 
如果您希望应用程序只使用特定类型的动词，那么首先需要将 allowUnlisted 设置为
“false”，然后设置您希望允许的动词(参见示例) 
153 
基于网址序列的过滤 
此功能定义了一个序列列表，当请求中包含列表元素时，IIS 可以拒绝它。当 IIS 拒绝
此功能的请求时，记录的错误代码是 404.5。这对应于 UrlScan 中的 DenyUrlSequences
功能。这是一个非常强大的特性。这避免了给定的字符序列被 IIS 处理: 
过滤掉隐藏的线段 
如果您希望 IIS 提供二进制目录中的内容，而不是二进制目录，您可以应用此配置。 
154 
密码保护和敏感信息 
web.config 文件可能在连接字符串中包含敏感信息，如数据库密码、邮件服务器用户
名等。 
需要加密的部分有: 
⚫ 
本标签包含自定义应用程序设置。 
⚫ 
此部分包含连接字符串。 
⚫ 
此部分可以包含模拟凭据。 
⚫ 
本标签包含进程外会话状态提供程序的连接字符串。 
此部分中包含的密码和用户名应该加密。ASP.NET 允许您使用
aspnet _ regiis 功能对这些信息进行加密。该实用程序位于已安装的.NET 框架下
的%windows%\Microsoft.. NET\Framework\v2.0.50727 文件夹中。 
155 
您可以使用以下命令指定需要加密的部分: 
aspnet_regiis -pef sectiontobeencryoted 
加密网站中的 Web.config 文件 
尽管加密部分是可能的，但并非所有部分都可以加密，特别是在运行用户代码之前要读
取的内容。以下部分无法加密: 
•  
•  
•  
•  
•  
•  
•  
•  
•  
•  
机器级 RSA 密钥容器或用户级密钥容器 
当文件被移动到其他服务器时，使用机器级 RSA 密钥加密单个文件有其缺点。在这种
情况下，强烈建议使用用户级的 RSA 密钥容器。RSAprotectedconfigurationprovider 支
持用于密钥存储的机器级和用户级密钥容器。 
156 
RSA 机器密钥容器存储在以下文件夹中: 
\Documents 
and 
Settings\All 
Users\Application 
Data\Microsoft\Crypto\RSA\MachineKeys  
用户密钥容器 
当需要保护的应用程序位于共享宿主环境中，并且敏感数据的保护不能被其他应用程序
访问时，强烈建议使用用户密钥容器。 
在这种情况下，每个应用程序都应该有一个单独的标识。RSA 用户级密钥容器存储在
以下文件夹中: 
\Documents 
and 
Settings\{UserName}\Application 
Data\Microsoft\Crypto\RSA 
IIS 配置 
根据配置的 IIS 版本，必须要修改它的一些设置，这些设置可以增强服务器的安全性。 
信任级别 
信任级别是授予宿主环境中应用程序的一组代码访问安全权限。这些是使用策略文件定
义的。根据必须配置的信任级别，可以授予完全、高、中、低或最低级别。ASP.NET 主机
157 
不会对以完全信任级别运行的应用程序应用任何附加策略。 
示例: 
锁定信任级别 
在.NET framework 中， web.config 文件可以锁定应用程序，防止其更改信任级别。
该文件位于: 
C:\Windows\Microsoft.NET\Framework\{version}\CONFIG 
以下示例显示了如何锁定两个不同的应用程序配置信任级别(MSDN，2013) 
示例： 
158 
参考 
⚫ 
Yakushev Ruslan，2008 年“IIS 7.0 请求过滤和网址重写”，见
http://www.iis.net/learn/ 
⚫ 
extensions/url-rewrite-module/iis-request-filtering-and-url-rewriting  (最后一
次访问是在 2013 年 7 月 14 日) 
⚫ 
OWASP，2009“双重编码”在
https://www.owasp.org/index.php/Double_Encoding(最后一次更改是在 2013 年
7 月 14 日 
⚫ 
IIS 团队，2007 年“使用请求过滤”，可在
http://www.iis.net/learn/manage/configuring-security/use-request-filtering (最
后一次访问是在 2013 年 7 月 14 日) 
⚫ 
阿吉拉尔·卡洛斯(Aguilar Carlos)，2006 年“IIS 7 中的新配置系统”，可查阅
http://blogs.msdn.com/b/carlosag/archive/2006/04/25/iis7configurationsyste
m.aspx (最后一次访问是在 2013 年 7 月 14 日) 
⚫ 
2013 年，MSDN，如何:锁定
http://msdn.microsoft.com/en-us/library/ms178693.aspx 
159 
3.5.10 应用程序签名 
在构建过程中，质量保证或开发人员会将代码发布为可执行格式。通常这由一个 exe
或和一个或几个 DLL 组成。在构建/发布过程中，需要决定是否签署代码。 
在你的代码上签名被微软称为创建“强名称”。如果您使用 Visual Studio 创建一个项
目并使用微软的“运行代码分析”，如果代码没有强命名，您很可能会遇到微软的设计错误： 
“Warning 1 CA2210 : Microsoft.Design : Sign ‘xxx.exe’ with a strong name 
key.”。 
代码审计需要知道是否使用了强命名，强命名有什么好处？可以预防什么类型的攻击？
理解这两个问题有助于解释为什么要用强命名。 
强名称是一种使用程序集的文本名称、版本号、区域性信息、公钥和数字签名对程序集
标识进行签名的方法。(索利斯，2012 年) 
⚫ 
强命名保证了该程序集的唯一名称。 
⚫ 
强名称保护程序集的版本沿袭。强名称可以确保没有人能够生成程序集的后续版本。用
户可以确定他们正在加载的程序集的版本来自创建应用程序所用版本的同一发布者。 
如果您要使用全局程序集缓存(GAC)，以上两点非常重要。 
强名称提供强大的完整性审计并防止欺骗。通过.NET Framework 安全审计保证程序集
的内容在生成后没有被更改。 
但是，请注意，强名称本身并不意味着类似于数字签名和支持证书所提供的信任级别。
如果您使用 GAC 程序集，请记住每次加载程序集时都不会验证程序集，因为 GAC 按设计
160 
是一个锁定的、仅供管理员使用的存储。 
强名称无法阻止的是恶意用户完全剥离强名称签名、修改程序集或使用恶意用户的密钥
对其进行重新签名。 
代码审计人员需要了解如何保护和管理强名私钥。如果你认为强有力的名字签名非常适
合你的组织，保护私钥就是严峻的考验。 
如何使用强命名签名工具 
为了创建强名称程序集，您需要遵循一组工具和步骤 
使用 Visual Studio 
为了使用 Visual Studio 创建强命名程序集，必须有一个公钥/私钥对。也可以在 Visual 
Studio 中创建该密钥对。 
在 Visual Studio 2005 中，C#、Visual Basic 和 Visual J#集成开发环境(IDEs)允许您
生成密钥对和签名程序集，而无需使用 Sn.exe(强名称工具)创建密钥对。 
这些集成开发环境在项目设计器中有一个签名选项卡。. 在 Visual Studio 2005 中，
使用 AssemblyKeyFileAttribute 来标识密钥文件的方法已经过时。 
下图说明了编译器完成的过程 
图: C#强命名 
161 
使用强名称工具 
签名工具是一个命令行工具，用于对文件进行数字签名、验证文件中的签名或给文件加
上时间戳。微软视窗 NT、视窗 Me、视窗 98 或视窗 95 不支持签名工具。 
如果您没有使用“Visual Studio 命令提示符”(开始> > Microsoft Visual Studio 
2010 > > Visual Studio 工具> > Visual Studio 命令提示符(2010))，您可以在% program 
files % \ Microsoft SDks \ Windows \v7.0a\bin\sn.exe 找到 sn.exe。 
以下命令创建一个新的随机密钥对，并将其存储在 keyPair.snk 中。 
sn -k keyPair.snk 
以下命令将 keyPair.snk 中的密钥存储在容器 MyContainer 的强名称 CSP 中。 
sn -i keyPair.snk MyContainer 
以下命令从 keyPair.snk 中提取公钥，并将其存储在 publicKey.snk 中。 
162 