### 按动词筛选

当 IIS 基于此功能拒绝请求时，记录的错误代码是 404.6。这对应于 UrlScan 中的 `UseAllowVerbs`、`AllowVerbs` 和 `DenyVerbs` 选项。如果您希望应用程序仅使用特定类型的动词，首先需要将 `allowUnlisted` 设置为 `false`，然后设置您希望允许的动词（参见示例）。

### 基于网址序列的过滤

此功能定义了一个序列列表，当请求中包含这些列表元素时，IIS 可以拒绝该请求。当 IIS 拒绝此类请求时，记录的错误代码是 404.5。这对应于 UrlScan 中的 `DenyUrlSequences` 功能。这是一个非常强大的特性，可以防止给定的字符序列被 IIS 处理。

### 过滤掉隐藏的线段

如果您希望 IIS 提供二进制目录中的内容而不是整个二进制目录，您可以应用此配置。

### 密码保护和敏感信息

`web.config` 文件可能包含连接字符串中的敏感信息，如数据库密码、邮件服务器用户名等。需要加密的部分包括：

- `<appSettings>` 标签，包含自定义应用程序设置。
- `<connectionStrings>` 部分，包含连接字符串。
- `<identity>` 标签，可以包含模拟凭据。
- `<sessionState>` 标签，包含进程外会话状态提供程序的连接字符串。

这些部分中的密码和用户名应该进行加密。ASP.NET 允许您使用 `aspnet_regiis` 工具对这些信息进行加密。该工具位于已安装的 .NET 框架下的 `%windir%\Microsoft.NET\Framework\v2.0.50727` 文件夹中。

您可以使用以下命令指定需要加密的部分：
```sh
aspnet_regiis -pef sectiontobeencrypted
```

### 加密网站中的 Web.config 文件

尽管可以加密某些部分，但并非所有部分都可以加密，特别是在运行用户代码之前要读取的内容。以下部分无法加密：
- 机器级 RSA 密钥容器或用户级密钥容器

当文件被移动到其他服务器时，使用机器级 RSA 密钥加密单个文件有其缺点。在这种情况下，强烈建议使用用户级的 RSA 密钥容器。`RSAProtectedConfigurationProvider` 支持用于密钥存储的机器级和用户级密钥容器。

#### RSA 机器密钥容器
存储在以下文件夹中：
```
\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys
```

#### 用户密钥容器
当需要保护的应用程序位于共享宿主环境中，并且敏感数据的保护不能被其他应用程序访问时，强烈建议使用用户密钥容器。在这种情况下，每个应用程序都应该有一个单独的标识。RSA 用户级密钥容器存储在以下文件夹中：
```
\Documents and Settings\{UserName}\Application Data\Microsoft\Crypto\RSA
```

### IIS 配置

根据配置的 IIS 版本，必须修改一些设置以增强服务器的安全性。

#### 信任级别
信任级别是授予宿主环境中应用程序的一组代码访问安全权限。这些是通过策略文件定义的。根据必须配置的信任级别，可以授予完全、高、中、低或最低级别。ASP.NET 主机不会对以完全信任级别运行的应用程序应用任何附加策略。

**示例:**
锁定信任级别
在 .NET Framework 中，`web.config` 文件可以锁定应用程序，防止其更改信任级别。该文件位于：
```
C:\Windows\Microsoft.NET\Framework\{version}\CONFIG
```

以下示例显示了如何锁定两个不同的应用程序配置信任级别 (MSDN, 2013)。

### 参考
- Yakushev Ruslan, 2008 年 "IIS 7.0 请求过滤和网址重写"，见 [http://www.iis.net/learn/extensions/url-rewrite-module/iis-request-filtering-and-url-rewriting](http://www.iis.net/learn/extensions/url-rewrite-module/iis-request-filtering-and-url-rewriting) (最后一次访问是在 2013 年 7 月 14 日)
- OWASP, 2009 "双重编码" 在 [https://www.owasp.org/index.php/Double_Encoding](https://www.owasp.org/index.php/Double_Encoding) (最后一次更改是在 2013 年 7 月 14 日)
- IIS 团队, 2007 年 "使用请求过滤"，可在 [http://www.iis.net/learn/manage/configuring-security/use-request-filtering](http://www.iis.net/learn/manage/configuring-security/use-request-filtering) (最后一次访问是在 2013 年 7 月 14 日)
- Aguilar Carlos, 2006 年 "IIS 7 中的新配置系统"，可查阅 [http://blogs.msdn.com/b/carlosag/archive/2006/04/25/iis7configurationsystem.aspx](http://blogs.msdn.com/b/carlosag/archive/2006/04/25/iis7configurationsystem.aspx) (最后一次访问是在 2013 年 7 月 14 日)
- MSDN, 2013 年 "如何:锁定" [http://msdn.microsoft.com/en-us/library/ms178693.aspx](http://msdn.microsoft.com/en-us/library/ms178693.aspx)

### 应用程序签名

在构建过程中，质量保证或开发人员会将代码发布为可执行格式。通常由一个 `.exe` 或几个 `.dll` 组成。在构建/发布过程中，需要决定是否签署代码。在您的代码上签名被称为创建“强名称”。如果您使用 Visual Studio 创建一个项目并使用微软的“运行代码分析”，如果代码没有强命名，您很可能会遇到设计错误警告：“Warning 1 CA2210 : Microsoft.Design : Sign ‘xxx.exe’ with a strong name key”。

#### 为什么使用强名称？
- **唯一性**：强名称保证了程序集的唯一名称。
- **版本控制**：强名称保护程序集的版本沿袭，确保没有人能够生成程序集的后续版本。
- **完整性**：强名称提供强大的完整性审计并防止欺骗，确保程序集的内容在生成后未被更改。

#### 注意事项
强名称本身并不意味着类似于数字签名和支持证书所提供的信任级别。如果您使用 GAC 程序集，请记住每次加载程序集时都不会验证程序集，因为 GAC 按设计是一个锁定的、仅供管理员使用的存储。强名称无法阻止恶意用户剥离强名称签名、修改程序集或使用恶意用户的密钥重新签名。

#### 如何使用强命名签名工具
为了创建强名称程序集，您需要遵循一组工具和步骤。

**使用 Visual Studio**
- 在 Visual Studio 2005 中，C#、Visual Basic 和 Visual J# 集成开发环境 (IDEs) 允许您生成密钥对和签名程序集，而无需使用 Sn.exe (强名称工具) 创建密钥对。
- 这些 IDE 在项目设计器中有一个签名选项卡。在 Visual Studio 2005 中，使用 `AssemblyKeyFileAttribute` 来标识密钥文件的方法已经过时。

**使用强名称工具**
- 签名工具是一个命令行工具，用于对文件进行数字签名、验证文件中的签名或给文件加上时间戳。
- 如果您没有使用“Visual Studio 命令提示符” (开始 > Microsoft Visual Studio 2010 > Visual Studio 工具 > Visual Studio 命令提示符 (2010))，您可以在 `%programfiles%\Microsoft SDKs\Windows\v7.0A\bin\sn.exe` 找到 `sn.exe`。

以下命令创建一个新的随机密钥对，并将其存储在 `keyPair.snk` 中：
```sh
sn -k keyPair.snk
```

以下命令将 `keyPair.snk` 中的密钥存储在容器 `MyContainer` 的强名称 CSP 中：
```sh
sn -i keyPair.snk MyContainer
```

以下命令从 `keyPair.snk` 中提取公钥，并将其存储在 `publicKey.snk` 中：
```sh
sn -p keyPair.snk publicKey.snk
```