at least 3 f + 1 replicas.
To avoid shared-fate scenarios due to power outages
or communication blockades, the participating platforms
would ideally have independent or redundant power sup-
ply, battery backup, networking and OS maintenance.
4.3 System Initialization
Our system is agnostic to the way the n assisting SGX
platforms are chosen. Here we explain an example ap-
proach based on a trusted ofﬂine authority. Such group
assignment is practical when all assisting platforms be-
long to a single administrative domain (e.g., multiple
servers in the same data center). We call the trusted au-
thority that selects the assisting nodes the group owner.
The group owner can be a fully ofﬂine entity to reduce its
attack surface. To establish a protection group, the group
owner selects n platforms.
In this section, we assume that the operating systems
on these platforms are trusted at the time of system ini-
tialization (e.g., freshly installed OS). Note that although
SGX supports remote attestation, this assumption is re-
quired, if the group needs to be established among pre-
deﬁned platforms. The SGX attestation is anonymous
(or pseudonymous) and therefore it does not identify the
attested platform. If the application scenario allows that
the protection group can be established among any SGX
platforms, then system initialization is possible without
initially trusted operating systems using remote attesta-
tion. We discuss such group setup alternatives in Sec-
tion 4.7.
During its ﬁrst execution, the RE on each platform
generates an asymmetric key pair SKRE /PKRE, and ex-
ports the public key. The public keys are delivered to the
group owner securely, and the owner issues a certiﬁcate
by signing all group member keys. The group certiﬁcate
can be veriﬁed by the RE on each selected platform by
hard-coding the public key of the group owner to the RE
implementation.
Figure 4: The ASE state update protocol.
The RE is started a second time with the certiﬁed list
of public keys and a secret initialization key as input pa-
rameters. The purpose of this secret key for initialization
is to indicate a legitimate group establishment operation
and to prevent a later, parallel group creation by compro-
mised operating systems on the same certiﬁed platforms
(see Section 5). The initialization key is hard coded to
the RE implementation in hashed format and the RE ver-
iﬁes the correctness of the provided key by hashing it.
Without the correct key, the RE aborts initialization. The
RE saves the list of certiﬁed public keys PKREi to a group
conﬁguration table and runs an authenticated key agree-
ment protocol to establish pair-wise session keys kREi
with all REs, and adds them to the group conﬁguration
table. Finally, the RE creates a monotonic counter (MC),
sets it to zero, and seals its state.
When an ASE wants to use the ROTE system for the
ﬁrst time, it performs local attestation on the RE. The
code measurement of the RE can be hard-coded to the
ASE implementation or provisioned by the ASE devel-
oper. The ASE runs an authenticated key establishment
protocol with the RE. The RE adds the established shared
key kASEi to a local ASE counter table together with a lo-
cally unique enclave identiﬁer idASEi and adds the same
key to its own state. The used state structures are shown
in Figure 3.
4.4 ASE State Update Protocol
When an ASE is ready to update its state (e.g., a ﬁ-
nancial application has received a new transaction and
is ready to process it and update the maintained account
balances), it starts the state update protocol shown in Fig-
ure 4. This protocol can be seen as a customized version
of the Echo broadcast [15], as discussed in Section 8.
The communication between the enclaves is encrypted
and authenticated using the shared session keys in all of
our protocols. We add nonces and end point identiﬁers
USENIX Association
26th USENIX Security Symposium    1295
ASE persistent state (sealed)app. specific data: dshared key: kASEiRE persistent state (sealed)signing key: SKRE/PKRElocal ASE counter table:idASE1, kASE1, CounterASE1...group configuration table:PKRE1, kRE1...own counter: MCPKRE1, signed(MCRE1)...group counter table:RE runtime memory (not sealed)CounterASEiASEA1ASEA1Rollback EnclaveBRollback EnclaveBEchoBRollback EnclaveiRollback Enclaveisigned (MCA)...updateGroupCounterTable()EchoiRESPONSE413Rollback EnclaveARollback EnclaveAincrementASEA1Counter();updateLocalASECounterTable();increaseMC();2signed (MCA)5verify final ACKs();acceptNewState();store&seal();8ACKacceptNewState();store&seal();REQUESTLOCAL ENTITYEXTERNAL ENTITYverify Echoesreturned EchoB check returned Echoi forvalididity returned Echoi final ACKBfinal ACKi679to each message to prevent message replay. The protocol
proceeds as follows:
(1) The ASE triggers a counter increment using the RE.
(2) The RE increments a counter for the ASE, increases
its own MC, and signs the MC using SKRE. The counter
is signed to preserve its integrity in the case of compro-
mised assisting REs.
(3) The RE sends the signed counter to all REs in the
protection group.
(4) Upon receiving the signed MC, each RE updates its
group counter table. The table is kept in the runtime
memory, and not sealed after every update, to avoid end-
less propagation.
(5) The REs that received the counter send an echo mes-
sage that contains the received signed MC. The REs also
save the echo in runtime memory for later comparison.
(6) After receiving a quorum q = u + f + 1 = n+ f +1
echos, the RE returns the echos to their senders.4 The
second round of communication is needed to prevent at-
tacks based on RE restarts during the update protocol.
(7) Upon receiving back the echo, each RE ﬁnds the
self-sent echo in its memory and checks if the MC value
from it matches the one in the group counter table and
the one received from the target RE. If this is the case,
the RE replies with a ﬁnal ACK message.
(8) After receiving q ﬁnal ACKs, the RE seals its own
state together with the MC value to the disk.
(9) The RE returns the incremented ASE counter value.
The ASE can now safely perform the state update (e.g.,
update account balance), save the counter value to its
runtime memory for later comparison, and seal its state
with the counter.
2
4.5 RE Restart Protocol
Figure 5 shows the protocol that the RE runs after a
restart. The goal of the protocol is to allow the RE to join
the existing protection group, retrieve its counter value
and the MC values of the other nodes.
At restart the RE loses all previously established ses-
sion keys and has to establish new session keys. In order
to preserve our security guarantees, the target RE waits
until it establishes new session keys with all other REs re-
siding in the protection group. All assisting REs update
their group conﬁguration tables accordingly. The session
key refresh mechanism prevents nodes from communi-
cating with multiple RE instances on one platform (see
Section 5). Another condition for successfully joining
4It might seem that waiting for more than q responses, and therefore
allowing more than q nodes to complete the protocol, would increase
system robustness. However, the quorum is designed such that writing
the latest counter to more than q nodes does not help the system to
proceed in case of node unavailability or restarts (see Section 5).
Figure 5: The RE restart protocol.
the protection group is that sufﬁciently many nodes re-
turn non-zero counter values (step 6 below). This check
prevents simultaneously restarted REs from establishing
a second, parallel protection group. This guarantee can
be maintained when at most u nodes restart simultane-
ously. The protocol proceeds as follows:
(1) Session key establishment with other nodes and up-
date of the group conﬁguration table.
(2) The RE queries the OS for the sealed state.
(3) The RE unseals the state (if received) and extracts
the MC.
(4) The RE sends a request to all other REs in the pro-
tection group to retrieve its MC.
(5) The assisting REs check their group counter table. If
the MC is found, the enclaves reply with the signed MC.
Additionally, the complete table of other signed MCs that
the responding node has in its memory is sent to the tar-
get RE.
(6) When the RE receives q responses from the group
(recall that q = u + f + 1 and q ≥ n/2), it selects the
maximum value and veriﬁes the signature. We select the
maximum value because some REs might have an old
counter value or they may have purposefully sent one.
The target RE veriﬁes signatures and compares all the
group counter table entries with received values for other
nodes. For each assisting RE, the target RE picks the
highest MC and updates its own group counter table with
the value. The RE also veriﬁes that at least f + 1 of the
received counter values are not zero to prevent creation
of the parallel network.
If the obtained counter value
matches the one in the unsealed data, the unsealed state
can be accepted.
(7) The RE stores and seals the updated state. The RE
will also save the counter value to its runtime memory.
The RE now has an updated group counter table that
reﬂects the latest counters for each node in the group.
1296    26th USENIX Security Symposium
USENIX Association
Rollback EnclaveARollback EnclaveARollback EnclaveBRollback EnclaveBgetMC()signed MC(REA), signed MC(all)Operating systemOperating systemrequestLocalState()OfferSeal(REA,seal)unsealState(); extract MCRollback EnclaveiRollback Enclavei...getMC()...checkGroupCounterTable()signed MC(REA), signed MC(all)compare MC from sealed statewith max(MC)REQUESTRESPONSE72345LOCAL ENTITYEXTERNAL ENTITYverify final ACKs(); acceptNewState();store&seal(); continueOperation();6Session key(s) establishment1ration. When a group update is needed, the group owner
issues an updated list that will be processed and sealed
by the RE. This approach does not require the entry of
the secret initialization key such as in ﬁrst group estab-
lishment. However, the adversary should not be able to
revert the group to its previous conﬁguration (e.g., one
including compromised nodes) by re-playing the previ-
ous group conﬁguration. Since group updates are typ-
ically infrequent, they can be protected using SGX or
TPM counters.
At system initialization, the RE creates a monotonic
counter using SGX counter service or on a local TPM.
If this is done using TPM, establishing a shared secret
with the TPM (see session authorization in [23]) is nec-
essary. The group owner includes a version number to
every issued group conﬁguration. When the RE pro-
cesses the signed list, it increments the SGX or TPM
counter to match the group version, and includes the ver-
sion number in the sealed data. For every group update,
the RE increments either of these counters. When the
RE is restarted, it veriﬁes that the version number in the
unsealed group conﬁguration matches the counter. The
NVRAM memory in TPMs is expected to support ap-
proximately 100K write cycles, while with SGX coun-
ters support approximately 1M cycles, sufﬁcient for most
group management needs. For example, if group updates
are issued once a week, the NVRAM would last 2000
years using TPMs and 20000 year using SGX counters.
Group setup with attestation. In Section 4.3 we de-
scribed group setup for pre-deﬁned platforms. The draw-
back of this approach is that it requires trusted operat-
ing systems at initialization. If the application scenario
allows group establishment among any SGX platforms,
similar trust assumption is not needed. The group owner
can attest n + 1 group members using the attestation
mode that returns a pseudonym for each attested plat-
form, establish secure channels to all group members,
and distribute keys that group members use to authenti-
cate each other. Because each platform reports a different
pseudonym, this process guarantees that the protection
group consists of n + 1 separate platforms in contrast to
multiple instances on one compromised CPU.
5 Security Analysis
Our system is designed to provide the following secu-
rity property: an ASE cannot be rolled back to a previ-
ous state. In Section 5.1 we ﬁrst show that given a se-
cure storage functionality, as deﬁned in Section 3, an RE
can verify that its state is the latest. After that, in Sec-
tion 5.2, we show that the participating REs realize the
secure counter storage as a distributed system. Finally,
by putting these two together, we show that ASEs cannot
be rolled back if the RE cannot be rolled back.
Our system achieves a security guarantee that we call
Figure 6: The ASE start/read protocol.
4.6 ASE Start/Read Protocol
When an ASE needs to verify the freshness of its
state, it performs the protocol shown in Figure 6. This
is needed to verify the freshness of unsealed state after
an ASE restart or when an ASE replies to a client request
asking its current state (e.g., account balance). The ASE
must verify that another ASE instance does not have a
newer state. The protocol proceeds as follows:
(1) The ASE queries the OS for the sealed data.
(2) The ASE unseals the state (if received) and obtains
a counter value from it.
(3) The ASE issues a request to the local RE to retrieve
its latest ASE counter value.
(4) To verify the freshness of its runtime state, the RE
performs the steps 4-6 from the RE Restart protocol, to
obtain the latest MC from the network. This is needed
to prevent forking attacks with multiple RE instances. If
the obtained MC does not match the MC residing in the
memory, the state of the RE is not the latest, so, the RE
must abort and be restarted. This is an indication that an-
other instance of the same RE was running and updated
the state in the meantime. If the values match, the current
data is fresh and the RE can continue normal operation.
(5) If all veriﬁcation checks are successful, the RE re-
turns a value from the local ASE counter table.
(6) The ASE compares the received counter value to the
one obtained from the sealed data.
If the counters match, ASE loads the previously sealed
state or completes a security-critical client request.
4.7 Group Management
Group updates. The group owner issues a signed
list of public parts of the public-private key pairs gener-
ated by each Rollback Enclave that deﬁne the protection
group. Assume that later one or more processors in the
group are found compromised or need replacement. The
group owner should be able to update the previously es-
tablished group (i.e., exclude or add new nodes) without
interrupting the system operation.
During system initialization, the RE veriﬁes the signed
list of group member keys and seals the group conﬁgu-
USENIX Association
26th USENIX Security Symposium    1297
ASEA1ASEA1Rollback EnclaveARollback EnclaveAgetASEA1Counter()CounterASEA1Operating systemOperating systemrequestLocalState()unsealState(); retrieveASEcounter()compare counter from the unsealed statewith counter received from REAREQUESTRESPONSE12356Rollback EnclaveiRollback Enclavei...LOCAL ENTITYEXTERNAL ENTITYOfferSeal(ASEA1,seal)checkLocalASECounterTable()RE restart protocolSTEPS 4-64moves to State 2 for verifying freshness if a Read() re-
quest is received, while the Write() request moves exe-
cution to State 8.
Sealing. When the RE needs to seal data for local per-
sistent storage, it proceeds to State 8. The RE increments
the MC, and performs the WriteCounter() operation to
the secure storage in State 9. The RE continues to State
10 if the operation succeeds, otherwise it halts (Halt-1).
In State 10, the RE seals data (s ← Seal(data)) of its
current state along with the counter value. OS conﬁrma-
tion moves the enclave to normal operation in State 7.
If sealing fails, the node can try again (Halt-1). If that
does not help, the node loses its latest state and becomes
unavailable, and a group update is needed (Halt-2).
Unsealing. When the RE needs to unseal data (re-
cover its state), the RE proceeds from State 7 to State
3. The adversary can offer the correct sealed data
(OfferSeal(latest ≡ s)) which moves the execution to
State 4. Unsealing is successful and the counter value
in the seal matches the MC value in the runtime mem-
ory, bringing the RE back to State 7. The adversary
can offer a previously sealed state (OfferSeal(previous))
which moves the execution to State 6. Unsealing is suc-
cessful, but counter values do not match and the RE halts
(Halt-1 or Halt-2).5 Finally, the adversary can offer any
other data (OfferSeal(arbitrary)) which moves the RE
to State 5 where unsealing fails and RE halts (Halt-1 or
Halt-2).
Forking. If a new instance of the RE is started, the
execution for it moves to State 1 following First start.
Other instances remain in their original states.
If for
every Write() and Read() operation a counter is incre-
mented or respectively retrieved from the secure counter
storage to verify freshness, no rollback is possible. When
the RE needs to read its runtime state (e.g., to complete a
client request), the RE proceeds from State 7 to State 2.
The RE reads the MC from the secure counter storage (if
this fails, Halt-1) and compares the value to the one re-
siding in its memory. This check is needed to guarantee
that another instance of the same enclave does not have
a newer state. If comparison succeeds, RE has the lat-
est internal memory state and proceeds back to State 7.
If the comparison fails (retrieved MC is higher), the RE
moves to State 3 to obtain the latest seal (see above).
Restart. After an RE restart, the execution proceeds
to State 2. If the ReadCounter() operation returns a non-
empty value, the RE proceeds to State 3, otherwise to
State 7, from where we follow the same steps as above.
If the counter read operation fails, RE enters Halt-1.
If in any of these states the RE is terminated or
restarted, its execution continues from State 1. Deleting
5If the OS provides an incorrect sealed data, most likely it is faulty
an needs to be ﬁxed. From some OS errors it may be possible to recover
by simply trying again.