OK
Figure 4.03: The final Video Downloader script dialogi;ues.
FALSE
52
Chapter 4
Export YT comments x
1
© YTDL-Best Quality
YTDL-Maximum 720p
YTDLP-Best Quality
YTDLP-Maximum 720p
Export YT Comments
Export Subtitles 
Export YT Playlist
Export YT Info
—title "Video Downloader" —radiolist 
TRUE "$optl" FALSE "$opt2" FALSE "$opt3" FALSE "$opt4"
Enter Video ID 
...
The following page displays the entire final video download script included in your files, and a complete 
explanation of each step after that page. Upon launch, you -will see the menu in Figure 4.03 (left). If choosing 
die new comments option, you will then see the Video ID entry option within Figure 4.03 (right). Notice that 
this dialogue asks ONLY for the video ID and not the entire URL. This allows the script to output a file titled 
similar to IxvAya9uwwU-comments.txt.
—no- 
to
#!/usr/bin/env bash 
optl="YTDL-Best Quality" 
opt2="YTDL-Maximum 72Op" 
opt3="YTDLP-Best Quality" 
opt4="YTDLP-Maximum 720p" 
opt5="Export YT Comments" 
opt6="Export Subtitles" 
opt7="Export YT Playlist" 
opt8="Export YT Info" 
timestamp=$(date +%Y-%m-%d:%H:%M) 
videodownloadmenu=$(zenity —list 
column "" —column "" 
 .  
"$opt5" FALSE "$opt6" FALSE "$opt7" FALSE "$opt8" —height=400 —width=3*00) 
case $videodownloadmenu in 
Soptl ) 
url=$(zenity —entry —title "Best Quality" —text "Enter target URL") 
youtube-dl "$url" -o -/Videos/Youtube-DL/"$timestamp% (title) s . % (ext) s" -i • 
subs | zenity —progress —pulsate —no-cancel —auto-close --title="Video 
Downloader" —text="Video being saved to -/Videos/Youtube-DL/" 
nautilus -/Videos/ 
exit;; 
$opt2 ) 
url=$ (zenity —entry —title "Maximum 720p" —text "Enter target URL") 
youtube-dl "$url" -o -/Videos/Youtube-DL/"$timestamp% (title) s . % (ext) s" -i - 
'bestvideo[height
-> °J U e.DL^ 5url-subtitles.txt" | zenity —progress —pulsate —no-cancel 
~/vidpn^/vSe “’ci^le=”Playlist Exporter" —text="Playlist being saved to 
-/Videos/Youtube-DL/"
nautilus -/Videos/
exit;;
$opt7 )
vttZ!l(Z—7~e2tJ;y —title "Export YT Playlist" —text "Enter Playlist ID")
nr“”pJ-ay|lst "https://www.youtube.com/playlist?list=$url" > -/Videos/Youtube- 
ririfi="PiP 1st.txt" | zenity —progress —pulsate —no-cancel —auto-close — 
t*xPorter" text="Playlist being saved to -/Videos/Youtube-DL/"
nautilus -/videos/
exit;;
$opt8 )
vttool12-11^? ~”®ntry —title "Export YT Info" —text "Enter Video ID")
Y - 
nttps://www.youtube.com/watch?v=$url" > ~/Videos/Youtube-DL/"Surl-
. .tx zenity progress —pulsate —no-cancel —auto-close —title="Info
n»Pr:?er 
being saved to -/Videos/Youtube-DL/"
nautilus -/Videos/
exit;; esac
case Svideodownloadmenu in: The case statement is used to simplify things when you 
multiple different choices. It is likely overkill for our scripts, but no harm in tidiness.
—list —title "Video Downloader" —radiolist column " 
_„C°^cv
"$optl" FALSE "$opt2" FALSE "$opt3" FALSE "$opt4" FALSE "$opt5 FALSE p«- 
FALSE "$opt7" FALSE "$opt8") : This creates a menu which displays the eight options, visible in 
Figure 4.03. The "True" command selects a default option while "False commands are unse ecto
nautilus '•/Videos /: This opens the Videos folder to display the evidence.
• exit; ;esac: This instructs the script to exit after completion and closes the "case”.
Fragmented Videos
video. You should see numerous connections, similar to the following.
54 Chapter 4
fl b3u7d4z4.ssl.hwcdn.net
Q b3u7d4z4.ssl.hwcdn.net 
fl b3u7d4z4.ssl.hwcdn.net 
Q b3u7d4z4.ssl.hwcdn.net 
fl b3u7d4z4.ssl.hwcdn.net
fl b3u7d4z4.ssl.hwcdn.net 
fl b3u7d4z4.ssl.hwcdn.net
5f659062b70e4f67111a7d1f_Layer_4.key
5f659062b70e4f67111a7d1f_Layer_5.m3u8
5f659062b70e4f67111a7d1f_Layer_5.key
5f659062b70e4f67111a7d1f_Layer_5_00001.ts
6f659062b70e4f67111a7d1f_Layer_5.key
5f659062b70e4f67111a7d1f._Layer_5_00002.ts
5f659062b70e4f67111a7d1f_Layer_5.key
dotplayer.js:11 (xhr) 
dotplayer.js:11 (xhr) 
dotplayer.js:11 (xhr) 
dotplayer.Js:11 (xhr) 
dotplayer.js:11 (xhr) 
dotplayer.js:11 (xhr) 
dotplayer.js:11 (xhr)
This final script offers the following features within your Linux VM without the need to open Terminal or enter 
any commands. The Desktop shortcut explained earlier would execute this script from your Applications menu.
• 
Download a video, entire playlist, or channel in the best possible resolution with YouTube-DL.
• 
Download a video, entire playlist, or channel in the best resolution up to 720p with YouTube-DL
• 
Download a video, entire playlist, or channel in the best possible resolution with yt-dlp.
• 
Download a video, entire playlist, or channel in the best resolution up to 720p with yt-dlp.
• 
Export all comments from any YouTube page.
• 
Export all subtides from any YouTube page.
• 
Export all videos from a playlist to a text file.
• 
Export all text information from any YouTube page to a text file.
—o ~/Videos/Youtube-DL/"$timestamp% (title) s.% (ext) s": This finishes the command to 
output the evidence and tide the file based on timestamp and actual video name.
The ".ts" files are small video fragments which are being streamed to your browser. This target video URL 
contains hundreds of these files. Instead of targeting the video fragments, we want the "m3u8" file which acts 
as a playlist for all of the video pieces. An example is displayed above in the second row. Right-click on this 
option; highlight "Copy"; and select "Copy URL". Paste this URL into your video download tool. I prefer the 
yt-dlp option. In this example, my URL is as follows.
It is very common for websites to present embedded videos which consist of hundreds of small pieces of 
streaming video frames. These files load seamlessly while viewing a video, but this delivery method can make 
the download process difficult. Some sites do this to prevent copying of proprietary content, while others 
eliminate unnecessary download of large single files if the video is stopped before the end. While YouTube-DL 
and yt-dlp are great programs, they are not perfect. Submitting a URL which contains a fragmented video is 
likely to fail. Therefore, we need to understand a manual way to approach this issue. Consider the following 
example. There is an embedded video at https://www.axs.tv/channel/movember/video/billy-gibbons-l/. 
Submitting this URL to the tools results in an error because they cannot properly detect the video.
I zenity —progress —pulsate —no-cancel —auto-close —title="Video 
Downloader" —text="Video being saved": This presents a dialogue while the video is 
downloading which closes upon completion.
Before playing the video, right-click within your Firefox or Chrome browser and select "Inspect". Click the 
Network1 tab within the new window at the bottom of your browser, then click the play button within the
Blocked Downloads
"live pd" "s01e56" "watch"
https://123watchmovies.co/episode/live-pd-season-l-episode-56/
https://tl 3.gomoplayer.com/vxokfnh4w6alavf4ercyvnw4q6xevr24ybj4eyfwtedjogbrwjuewms52v2a/v.mp4
Referer https://gomoplayer.com/
Linux /Xpplications
55
cd -/Downloads
yt-dlp https://tl3.gomoplayer.Com/vxokfnh4w6alavf4ercyvnw4q6xevr24ybj4ey 
fwtedjogbrwjupgfk52v2a/v.mp4 —referer https://gomoplayer.com/
https://b3u7d4z4.ssl.hwcdn.net/files/company/5e98clf8bb2eel52dfU229b2/assets/videos/5f659062b70e4f6
711 Ia7dlf/vod/5f659062b70e4f671Ha7dlfL.Layer_5.m3u8
The first page of results loaded a video player but encountered an error when the stream was attempted. 
Basically, the video file no longer existed so it could not be streamed within the browser. I finally found the 
following website which would play a video stream of the target episode.
1 submitted this new URL to the video download tool, but the result was a small empty video file without any 
content. This is because the target website includes a strict policy which prevents download of content from any 
source besides an approved URL. While this site is allowed to stream the video, I would be blocked if I tried to 
stream it on my own site. Therefore, our video download attempt appears to be an unauthorized source. This is 
becoming more common. 1 clicked on the "v.mp4" file within the Inspector menu in my browser and looked 
for the "Referer" field. It appeared as follows.
Since you are providing a playlist of these video fragments to the download tool, the software can identify the 
list of videos and reconstruct them into a single video file. The previous URL resulted in a one-hour single video 
in MP4 format without any sign of spilt files. I rely on this technique weekly. It works for 99% of streaming 
videos, but I occasionally find a difficult target. I can usually bypass most download restrictions with the next 
technique.
This instruction tells the target website that gomoplayer.com is referring its own content into its embedded 
player software and the video should be allowed to play on this site. We now know the required referer and can 
emulate this within our own computer. The following command was entered into Terminal.
I could watch the video, but submitting this URL to our script resulted in an "unable to download webpage" 
error. The Firefox plugin previously explained could not detect the actual video stream URL because this site 
embeds the video within a custom player which intentionally makes the download process difficult I right- 
clicked the page while the video was streaming; selected the "Inspector" option; clicked the "Network" tab; and 
sorted the results by "Transferred" size. I immediately saw the following file tided "v.mp4" streaming through 
the browser and becoming a large file.
Some services generate much effort toward prevention of video downloads from their sites. If the previous 
download tactics resulted in errors, you may have encountered a blocked file or stream. In most scenarios, you 
can bypass this with a modified "referer". Consider the following example and modify for your own usage. In 
2021,1 was contacted by a former colleague who had a unique request. He was trying to download an old episode 
of the television show "Live PD" as part of an investigation. The episode originally aired in 2016 and pirated 
copies on torrent sites had all disappeared. It was the 56th episode of the first season and he had exhausted his 
search. The following query on Google displayed several sites which claimed to possess the video.
56 Chapter 4
This changes our working director}' to the Downloads folder; launches the yt-dlp software; provides the direct 
URL of the target video; and informs the service that the original referer is the same option as required (even 
though this is not true). After executing this command, the 750mb video file downloaded to my computer. I 
have successfully used this technique within many investigations. The next time your download is blocked, 
consider replicating this process with the data present within your own investigation.
YouTube-DL vs yt-dlp
At the time of this writing, YouTube was throttling video download speed to all video download utilities. They 
included code within their systems which would detect video download; throttle the speed to less than 50 kbps; 
and cause frustration to those trying to archive content A five-minute video might require over an hour to 
download through YouTube-DL. Fortunately, yt-dlp updated their software to bypass this restriction. The same 
video download completed in a few seconds through their software. This is why I insist on access to both 
options. By the time you read this, the results may be reversed. Today, I always choose the yt-dlp options, but 
tomorrow could change my preference. Make sure you are comfortable with all options, and be sure to document 
the tool used in your final report.
IMPORTANT: I realize this is getting quite technical, and we are very’ early7 in the book. None of the steps in 
this chapter are required to complete the tutorials within the rest of the book. However, having your Linux VM 
customized and ready to go will be beneficial. In the previous example, yrou created a utility7 which will download 
videos from the internet. Once y7ou see how this works and understand the benefits, y7ou may7 not want to settle 
for the various web-based options presented later. For convenience, let’s go ahead and configure all of the 
custom scripts presented within this book. The following Terminal commands download, extract, 
relocate, and configure every Linux script, icon, and shortcut presented throughout this entire book.
• 
cd -/Desktop
• sudo apt install -y curl
• curl -u osint9:bookl43wt -0
https: /1 inteltechniques. com/osintbook9/vm-f iles. zip
• unzip vm-files.zip -d -/Desktop/
• mkdir -/Documents/scripts
• mkdir -/Documents/icons
• cd -/Desktop/vm-files/scripts
• cp * -/Documents/scripts
• cd -/Desktop/vm-files/icons
• 
cp * -/Documents/icons
• 
cd -/Desktop/vm-files/shortcuts
• 
sudo cp * /usr/share/applications/
• 
cd -/Desktop
• 
rm vm-files.zip
• 
rm -rf vm-files
ou s ou now possess shortcuts and scripts for all of the techniques we are discussing, but the education is 
ar om over. Let s conduct an additional example of creating your own execution script from the beginning, 
ext, we will tackle various video utilities. In the following chapter, we will issue a couple of commands and sit 
ack while this entire chapter is automated. From now on, 1 will abbreviate the steps.
I present an important warning before we begin installing numerous applications via Terminal. Some will fail to 
install completely on the first attempt. This is often due to a broken or missing dependency7 which is required 
by7 the application. Sometimes, repeating the steps solves the issue, while other scenarios require us to wait until 
the program is updated by7 the developer. There is no harm in repeating the steps presented here if y7ou run into 
complications. You will see many Pip errors or warnings displayed while you install apps. These are 
version conflicts and will be discussed later, and typically do not impact the functions of the program.
Video Utilities
folder alongside the original.
Linux Applications
57
Play a video:
ffplay evidence.mpg
This command simply plays the video inside a new window at full resolution.
First, let's take a look at the manual commands which achieve the desired goals of each option. Assume that you 
possess a video tided evidence.mpg on your Desktop. After changing to your Desktop director}’ within Terminal 
(cd ~/Desktop), the following commands would be used.
The utilities in this section execute the previously installed tool FFmpeg. This powerful Terminal utility can 
manipulate videos to assist with investigations. We will create scripts which will provide the following services.
• 
Play a video: This option will force FFmpeg to attempt to play any video file with multiple video 