### Figure 4.03: The Final Video Downloader Script Dialogues

#### Overview
The following section provides a comprehensive final video download script, along with a detailed explanation of each step. Upon launching the script, you will see the menu displayed in Figure 4.03 (left). If you choose the new comments option, you will then be prompted to enter the Video ID, as shown in Figure 4.03 (right). Note that the dialogue only requests the video ID, not the full URL. This allows the script to generate a file named similarly to `IxvAya9uwwU-comments.txt`.

#### Script Explanation

```bash
#!/usr/bin/env bash

# Define options
opt1="YTDL-Best Quality"
opt2="YTDL-Maximum 720p"
opt3="YTDLP-Best Quality"
opt4="YTDLP-Maximum 720p"
opt5="Export YT Comments"
opt6="Export Subtitles"
opt7="Export YT Playlist"
opt8="Export YT Info"

# Get current timestamp
timestamp=$(date +%Y-%m-%d:%H:%M)

# Create the video download menu
videodownloadmenu=$(zenity --list \
    --title "Video Downloader" \
    --radiolist \
    --column "Select" --column "Option" \
    "$opt1" FALSE "$opt2" FALSE "$opt3" FALSE "$opt4" FALSE \
    "$opt5" FALSE "$opt6" FALSE "$opt7" FALSE "$opt8" \
    --height=400 --width=300)

# Case statement to handle user selection
case $videodownloadmenu in
    $opt1)
        url=$(zenity --entry --title "Best Quality" --text "Enter target URL")
        youtube-dl "$url" -o "~/Videos/Youtube-DL/$timestamp_%(title)s.%(ext)s" -i
        zenity --progress --pulsate --no-cancel --auto-close --title="Video Downloader" --text="Video being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt2)
        url=$(zenity --entry --title "Maximum 720p" --text "Enter target URL")
        youtube-dl "$url" -o "~/Videos/Youtube-DL/$timestamp_%(title)s.%(ext)s" -f 'bestvideo[height<=720]+bestaudio/best[height<=720]'
        zenity --progress --pulsate --no-cancel --auto-close --title="Video Downloader" --text="Video being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt3)
        url=$(zenity --entry --title "YTDLP Best Quality" --text "Enter target URL")
        yt-dlp "$url" -o "~/Videos/Youtube-DL/$timestamp_%(title)s.%(ext)s" -i
        zenity --progress --pulsate --no-cancel --auto-close --title="Video Downloader" --text="Video being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt4)
        url=$(zenity --entry --title "YTDLP Maximum 720p" --text "Enter target URL")
        yt-dlp "$url" -o "~/Videos/Youtube-DL/$timestamp_%(title)s.%(ext)s" -f 'bestvideo[height<=720]+bestaudio/best[height<=720]'
        zenity --progress --pulsate --no-cancel --auto-close --title="Video Downloader" --text="Video being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt5)
        videoid=$(zenity --entry --title "Export YT Comments" --text "Enter Video ID")
        yt-dlp --write-comments "https://www.youtube.com/watch?v=$videoid" -o "~/Videos/Youtube-DL/$videoid-comments.txt"
        zenity --progress --pulsate --no-cancel --auto-close --title="Comments Exporter" --text="Comments being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt6)
        videoid=$(zenity --entry --title "Export Subtitles" --text "Enter Video ID")
        yt-dlp --write-sub --sub-lang en "https://www.youtube.com/watch?v=$videoid" -o "~/Videos/Youtube-DL/$videoid-subtitles.vtt"
        zenity --progress --pulsate --no-cancel --auto-close --title="Subtitles Exporter" --text="Subtitles being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt7)
        playlistid=$(zenity --entry --title "Export YT Playlist" --text "Enter Playlist ID")
        yt-dlp --get-id --flat-playlist "https://www.youtube.com/playlist?list=$playlistid" > "~/Videos/Youtube-DL/$playlistid-playlist.txt"
        zenity --progress --pulsate --no-cancel --auto-close --title="Playlist Exporter" --text="Playlist being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
    $opt8)
        videoid=$(zenity --entry --title "Export YT Info" --text "Enter Video ID")
        yt-dlp --get-description "https://www.youtube.com/watch?v=$videoid" > "~/Videos/Youtube-DL/$videoid-info.txt"
        zenity --progress --pulsate --no-cancel --auto-close --title="Info Exporter" --text="Info being saved to ~/Videos/Youtube-DL/"
        nautilus ~/Videos/
        exit;;
esac
```

#### Features
This script offers the following features within your Linux VM without needing to open the Terminal or enter any commands. A desktop shortcut can be created to execute this script from your Applications menu:
- Download a video, entire playlist, or channel in the best possible resolution using YouTube-DL.
- Download a video, entire playlist, or channel in the best resolution up to 720p using YouTube-DL.
- Download a video, entire playlist, or channel in the best possible resolution using yt-dlp.
- Download a video, entire playlist, or channel in the best resolution up to 720p using yt-dlp.
- Export all comments from any YouTube page.
- Export all subtitles from any YouTube page.
- Export all videos from a playlist to a text file.
- Export all text information from any YouTube page to a text file.

#### Handling Fragmented Videos
Some websites present embedded videos consisting of hundreds of small pieces of streaming video frames. These files load seamlessly while viewing a video, but this delivery method can make the download process difficult. Some sites do this to prevent copying of proprietary content, while others eliminate unnecessary downloads if the video is stopped before the end. While YouTube-DL and yt-dlp are powerful tools, they may fail when dealing with fragmented videos. 

To manually approach this issue, consider the following example:
- There is an embedded video at `https://www.axs.tv/channel/movember/video/billy-gibbons-l/`.
- Right-click within your Firefox or Chrome browser and select "Inspect".
- Click the "Network" tab and play the video.
- Look for the `.m3u8` file, which acts as a playlist for all the video pieces.
- Right-click on the `.m3u8` file, highlight "Copy," and select "Copy URL."
- Paste this URL into your video download tool, such as yt-dlp.

#### Blocked Downloads
Some services generate significant effort to prevent video downloads from their sites. If you encounter errors, you may need to use a modified "referer." For example, to download an old episode of "Live PD," follow these steps:
- Use the URL `https://tl3.gomoplayer.com/vxokfnh4w6alavf4ercyvnw4q6xevr24ybj4eyfwtedjogbrwjupgfk52v2a/v.mp4`.
- Add the referer `--referer https://gomoplayer.com/` to the command.
- Execute the command in the Terminal: 
  ```bash
  cd ~/Downloads
  yt-dlp https://tl3.gomoplayer.com/vxokfnh4w6alavf4ercyvnw4q6xevr24ybj4eyfwtedjogbrwjupgfk52v2a/v.mp4 --referer https://gomoplayer.com/
  ```

#### YouTube-DL vs. yt-dlp
At the time of writing, YouTube was throttling video download speeds to less than 50 kbps for all video download utilities. yt-dlp updated their software to bypass this restriction, allowing faster downloads. It is recommended to have both options available, as preferences may change over time.

#### Important Notes
- This chapter is quite technical, but the steps are not required to complete the tutorials in the rest of the book.
- Customizing your Linux VM with these scripts will be beneficial.
- The following Terminal commands will download, extract, relocate, and configure every Linux script, icon, and shortcut presented in this book:
  ```bash
  cd ~/Desktop
  sudo apt install -y curl
  curl -u osint9:book143wt -O https://inteltechniques.com/osintbook9/vm-files.zip
  unzip vm-files.zip -d ~/Desktop/
  mkdir ~/Documents/scripts
  mkdir ~/Documents/icons
  cd ~/Desktop/vm-files/scripts
  cp * ~/Documents/scripts
  cd ~/Desktop/vm-files/icons
  cp * ~/Documents/icons
  cd ~/Desktop/vm-files/shortcuts
  sudo cp * /usr/share/applications/
  cd ~/Desktop
  rm vm-files.zip
  rm -rf vm-files
  ```

#### Video Utilities
The utilities in this section use FFmpeg, a powerful Terminal utility for manipulating videos. We will create scripts to provide the following services:
- Play a video: This option will force FFmpeg to play any video file with multiple video tracks.

Example:
```bash
ffplay evidence.mpg
```
This command plays the video in a new window at full resolution.

By following these steps, you will have a fully functional and customized video download and manipulation environment in your Linux VM.