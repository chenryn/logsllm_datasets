单击按钮的中间，会看到事件被路由。第一个调用的处理程序是OnTappedButton，其
后是OnTappedGrid：
    OnTappedButton TextBlock
    OnTappedGrid TextBlock
同样有趣的是，事件源不是按钮，而是TextBlock。原因在于，这个按钮使用
TextBlock设置样式，来包含按钮的文本。如果单击按钮内的其他位置，还可以看到Grid
或ContentPresenter是原始事件源。Grid和ContentPresenter是创建按钮的其他控件。
在单击按钮之前，选中复选框CheckStopRouting，可以看到事件不再路由，因为事件
参数的Handled属性设置为true：
    OnTappedButton TextBlock
在事件的MSDN文档内，可以在文档的备注部分看到事件类型是否路由。在Universal
Windows应用程序中，tapped、drag和drop、key 
up和key 
down、pointer、focus、
manipulation事件是路由事件。
29.4.2 WPF的冒泡和隧道
在WPF中，支持路由的事件比Windows 
Universal应用程序支持的更多。除了沿着控
件层次结构向上冒泡的概念之外，WPF还支持隧道。隧道事件与冒泡的方向相反——从
外部进入内部控件。事件要么是冒泡事件，要么是隧道事件，要么是直接事件。
事件经常成对定义。PreviewMouseMove是一个隧道事件，从外面进入里面。首先是
外部控件接收事件，之后内部控件接收它。MouseMove事件跟在PreviewMouseMove事件
之后，它是一个冒泡事件，从内部向外部冒泡。
为了演示隧道和冒泡，下面的XAML代码包含一个网格和一个按钮，它分配了
MouseMove和PreviewMouseMove事件。MouseMove事件发生的次数很多，所以显示鼠标
移动信息的TextBlock放在一个ScrollViewer控件中，以根据需要显示滚动条。使用复选框
控件，可以停止隧道和冒泡（代码文件RoutedEventsWPF / MainWindow.xaml）：
        Stop Preview
        Stop Bubbling
        Ignore Grid Move
        Clean Status
        Move
在后台代码文件中，ShowStatus方法访问RoutedEventArgs，显示事件信息。与
Universal 
Windows应用程序不同，RoutedEventArgs类型不仅包含事件的原始来源，而且
包含用Source属性访问的源。这个方法显示了源的类型和名称（代码文件
RoutedEventsWPF / MainWindow.xaml.cs）：
    private void ShowStatus(string status, RoutedEventArgs e)
    {
      textStatus.Text += $"{status} source: {e.Source.GetType().Name}, " +
        $"{(e.Source as FrameworkElement)? .Name}, " +
        $"original source: {e.OriginalSource.GetType().Name}";
      textStatus.Text += "\r\n";
    }
因为MouseMove事件太多，所以处理程序实现为忽略它们，只考虑选中
CheckIgnoreGridMove复选框时的button1源。
    private bool IsButton1Source(RoutedEventArgs e) =>
      (e.Source as FrameworkElement).Name == nameof(button1);
    private void OnButtonMouseMove(object sender, MouseEventArgs e)
    {
      ShowStatus(nameof(OnButtonMouseMove), e);
      e.Handled = CheckStopBubbling.IsChecked == true;
    }
    private void OnGridMouseMove(object sender, MouseEventArgs e)
    {
      if (CheckIgnoreGridMove.IsChecked == true && ! IsButton1Source(e) return;
      ShowStatus(nameof(OnGridMouseMove), e);
      e.Handled = CheckStopBubbling.IsChecked == true;
    }
    private void OnGridPreviewMouseMove(object sender, MouseEventArgs e)
    {
      if (CheckIgnoreGridMove.IsChecked == true && ! IsButton1Source(e) return:
      ShowStatus(nameof(OnGridPreviewMouseMove), e);
      e.Handled = CheckStopPreview.IsChecked == true;
    }
    private void OnButtonPreviewMouseMove(object sender, MouseEventArgs e)
    {
      ShowStatus(nameof(OnButtonPreviewMouseMove), e);
      e.Handled = CheckStopPreview.IsChecked == true;
    }
    private void OnCleanStatus(object sender, RoutedEventArgs e)
    {
      textStatus.Text = string.Empty;
    }
运行应用程序，在按钮控件上移动，会看到如下事件处理程序：
    OnGridPreviewMouseMove source: Button button1, original source: Border
    OnButtonPreviewMouseMove source: Button button1, original source: Border
    OnButtonMouseMove source: Button button1, original source: Border
    OnGridMouseMove source: Button button1, original source: Border
如果选择阻止冒泡，按钮的处理程序OnButtonMouseMove就最后一个调用。这类似于
前面的冒泡和Universal Windows应用程序：
    OnGridPreviewMouseMove source: Button button1, original source: Border
    OnButtonPreviewMouseMove source: Button button1, original source: Border
    OnButtonMouseMove source: Button button1, original source: Border
使用隧道事件处理程序停止路由操作时，也不发生冒泡。这是隧道的一个重要特征。
如果已经在隧道事件处理程序中把Handled属性设置为true，冒泡事件也不会发生：
    OnGridPreviewMouseMove source: Button button1, original source: Border
29.4.3 用WPF实现自定义路由事件
为了在定制类中定义冒泡和隧道事件，把MyDependencyObject改为支持在值变化时
触发事件。为了支持冒泡和隧道事件，类必须派生自UIElement，而不是
DependencyObject，因为这个类为事件定义了AddHandler和RemoveHandler方法。
为了支持MyDependencyObject的调用者接收值改变的信息，类定义了ValueChanged事
件。该事件用显式的add和remove处理程序声明，其中调用的是基类的AddHandler和
RemoveHandler方法。这些方法需要一个RoutedEvent类型和委托作为参数。路由事件
ValueChangedEvent的声明非常类似于依赖属性。它声明为静态成员，通过调用
EventManager.RegisterRoutedEvent方法注册。这个方法需要事件的名称、路由策略（可以
是Bubble、Tunnel或Direct）、处理程序的类型和拥有者类的类型。EventManager类还允
许注册的静态事件，获得注册事件的信息（代码文件
DependencyObjectWPF/MyDependencyObject.cs）：
    using System;
    using System.Windows;
    namespace Wrox.ProCSharp.XAML
    {
      class MyDependencyObject: UIElement
      {
        public int Value
        {
        get { return (int)GetValue(ValueProperty); }
        set { SetValue(ValueProperty, value); }
        }
        public static readonly DependencyProperty ValueProperty =
          DependencyProperty.Register(nameof(Value), typeof(int),
            typeof(MyDependencyObject),
            new PropertyMetadata(0, OnValueChanged
, CoerceValue));
        // etc.
        private static void OnValueChanged(DependencyObject d,
                                    DependencyPropertyChangedEventArgs e)
        {
        MyDependencyObject control = (MyDependencyObject)d;
        var e1 = new RoutedPropertyChangedEventArgs((int)e.OldValue,
            (int)e.NewValue, ValueChangedEvent);
        control.OnValueChanged(e1);
        }
        public static readonly RoutedEvent ValueChangedEvent =
          EventManager.RegisterRoutedEvent(nameof(ValueChanged), RoutingStrategy.
Bubble,
            typeof(RoutedPropertyChangedEventHandler),
                  typeof(MyDependencyObject));
        public event RoutedPropertyChangedEventHandler ValueChanged
        {
        add
        {
          AddHandler(ValueChangedEvent, value);
        }
        remove
        {
          RemoveHandler(ValueChangedEvent, value);
        }
        }
        protected virtual void OnValueChanged(RoutedPropertyChangedEventArgs
 args)
        {
        RaiseEvent(args);
        }
      }
    }
现在，这可以通过与冒泡功能同样的方式使用，以前它用于按钮的MouseMove事
件。
29.5 附加属性
依赖属性是可用于特定类型的属性。而通过附加属性，可以为其他类型定义属性。一
些容器控件为其子控件定义了附加属性；例如，如果使用DockPanel控件，就可以为其子
控件使用Dock属性。Grid控件定义了Row和Column属性。
下面的代码片段说明了附加属性在XAML中的情况。Button类没有Dock属性，但它是
从DockPanel控件附加的。
附加属性的定义与依赖属性非常类似，如下面的示例所示。定义附加属性的类必须派
生自基类DependencyObject，并定义一个普通的属性，其中get和set访问器访问基类的
GetValue（）和SetValue（）方法。这些都是类似之处。接着不调用DependencyProperty类
的Register（）方法，而是调用RegisterAttached（）方法。RegisterAttached（）方法注册
一个附加属性，现在它可用于每个元素（代码文件
AttachedPropertyDemo[WPF/UWP]/MyAttachedPropertyProvider.cs）。
    public class MyAttachedPropertyProvider: DependencyObject
    {
      public string MySample
      {
        get { return (string)GetValue(MySampleProperty); }
        set { SetValue(MySampleProperty, value); }
      }
      public static readonly DependencyProperty MySampleProperty =
        DependencyProperty.RegisterAttached(nameof(MySample), typeof(string),
            typeof(MyAttachedPropertyProvider), new PropertyMetadata(string.Empty
));
      public static void SetMySample(UIElement element, string value) =>
        element.SetValue(MySampleProperty, value);
      public static int GetMyProperty(UIElement element) =>
        (string)element.GetValue(MySampleProperty);
    }
  注意： 似乎DockPanel.Dock属性只能添加到DockPanel控件中的元素。实际
上，附加属性可以添加到任何元素上。但无法使用这个属性值。DockPanel控件能够识
别这个属性，并从其子元素中读取它，以安排其子元素。
在XAML代码中，附加属性现在可以附加到任何元素上。第二个Button控件button2为
自身附加了属性MyAttachedPropertyProvider.MySample，其值指定为42（代码文件
AttachedPropertyDemo [WPF|UWP]/Main[Window|Page].xaml）。
在代码隐藏中执行相同的操作时，必须调用MyAttachedPropertyProvider类的静态方法
SetMy-Property（）。不能扩展Button类，使其包含某个属性。SetProperty（）方法获取一
个应由该属性及其值扩展的UIElement实例。在如下的代码片段中，把该属性附加到
button1中，其值设置为sample 
value（代码文件
AttachedPropertyDemoWPF/MainPage.xaml.cs）。
    public MainPage()
    {
      InitializeComponent();
      MyAttachedPropertyProvider.SetMySample(button1, "sample value");
      // etc.
    }
为了读取分配给元素的附加属性，可以使用VisualTreeHelper迭代层次结构中的每个
元素，并试图读取其附加属性。VisualTreeHelper用于在运行期间读取元素的可见树。
GetChildrenCount方法返回子元素的数量。为了访问子元素，GetChild方法传递一个索
引，返回元素。只有当元素的类型是FrameworkElement（或派生于它），且用Func参数传
递的谓词返回true时，该方法的实现代码才返回元素。
    private IEnumerable GetChildren(FrameworkElement element,
        Func pred)
    {
      int childrenCount = VisualTreeHelper.GetChildrenCount(rootElement);
      for (int i = 0; i 
        MyAttachedPropertyProvider.GetMySample(e) ! = string.Empty))
      {
        list1.Items.Add(
        $"{item.Name}: {MyAttachedPropertyProvider.GetMySample(item)
}");
      }
    }
运行应用程序（WPF或UWP应用程序）时，会看到列表框中的两个按钮控件与下述
值：
    button1: sample value
    button2: 42
直到现在，附加属性的示例代码都与WPF和Universal 
Windows应用程序相同，只是
使用了WPF的MainWindow控件而不是MainPage。然而，WPF的另一个选项是遍历元素。
WPF和Universal Windows应用程序可以使用VisualTreeHelper迭代可见树，其中包含在运
行期间创建的所有元素，包括模板和样式。在WPF中，还可以使用LogicalTreeHelper。这
个辅助类迭代元素的逻辑树。逻辑树与设计时使用的树是一样的。这棵树也可以显示在
Visual Studio的文档大纲中（见图29-1）。
图29-1
使用LogicalTreeHelper，迭代子元素的方法可以修改如下所示。LogicalTreeHelper类
提供了一个GetChildren方法，它不需要确定子元素的个数，就可以使用for循环迭代它们
（代码文件AttachedPropertyDemoWPF / MainWindow.xaml.cs）：
    public MainWindow()
    {