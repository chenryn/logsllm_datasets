### Fault Injection and Driver Failures

**Figure 8: Number of driver failures per fault type.**
- **Total faults injected:** 3,200,000
- **Total failures caused:** 24,883

Next, we analyzed the nature and frequency of unauthorized access attempts and correlated these results with the classification in Figure 3. Although MINIX 3 has many sanity checks in the system libraries linked into the driver, our focus was on the logs from the kernel and driver manager, as their checks cannot be bypassed. Below, we report on an experiment with the RTL8139 driver, which conducted 100,000 SWIFI trials, each injecting one RANDOM fault.

**Driver Manager Failures:**
- **Total detected failures:** 5,887
  - **Internal panics (63.5%):** 3,738
  - **Crashes due to exceptions (31.8%):** 1,870
  - **Kills due to missing heartbeats (4.7%):** 279

However, not all error conditions were immediately fatal. The number of unauthorized access attempts logged by the kernel could be up to three orders of magnitude higher, as shown in Figure 9. For example, we found 1,754,886 unauthorized DEVIO calls attempting to access device registers that do not belong to the RTL8139 PCI card. Code inspection confirmed that the driver repeatedly retried failed operations before giving up with an internal panic or causing an exception due to subsequent fault injections.

**Classification of Violations:**
- **CPU exceptions (Class I)**
- **Invalid memory grants and MMU exceptions (Class II)**
- **Unauthorized device I/O (Class III)**
- **Unauthorized IPC and kernel calls (Class IV)**

While not all subclasses are represented in Figure 9, the logs showed that our isolation techniques were effective across all subclasses.

**Figure 9: Top five unauthorized access attempts by the RTL8139 PCI driver for a test run with 100,000 randomly injected faults.**

| Unauthorized Access Type | Count | Percentage |
|--------------------------|-------|------------|
| Unauthorized device I/O   | 1,754,886 | 81.2%      |
| Unauthorized kernel call  | 322,005   | 14.9%      |
| Unauthorized IPC call     | 66,375    | 3.1%       |
| Invalid memory grant      | 17,008    | 0.8%       |
| CPU or MMU exception     | 1,780     | 0.1%       |
| **Total violations**      | 2,162,054 | 100.0%     |

### Availability under Faults

We also measured how many faults it takes to disrupt the driver and how many more are needed for a crash. Disruption means that the driver can no longer successfully handle network I/O requests but has not yet failed in a way detectable by the driver manager. Injected faults do not always cause an error, as they might not be on the executed path. As described in Section 6.3, a connection to a remote server was used to keep the driver busy and check for availability after each trial.

**Figure 10: Number of faults needed to disrupt and crash the NE2000 ISA driver, based on 100,000 randomly injected faults.**
- **Disruptions after 1 fault:** 664
- **Crashes after 1 fault:** 136
- **Maximum faults before a crash:** 2,484
- **Average faults to fail:** 7
- **Average faults to crash:** 10

### Problems Encountered

As mentioned, we took a pragmatic approach toward dependability and went through several design iterations before arriving at the final system. Figure 11 summarizes some of the problems encountered (and subsequently fixed) during the SWIFI testing of MINIX 3.

**Figure 11: Bugs found during SWIFI testing of MINIX 3.**
- **Scheduling queues (bug in scheduler)**
- **Undetected process manager hang (bug in IPC subsystem)**
- **Infinite loop in load update (inconsistent scheduling)**
- **Kernel stuck in infinite loop (uninitialized struct priv)**
- **Network driver silent mode (bad restart parameters)**
- **Driver reprogrammed RTL8139 hardware’s PCI device ID**
- **Wrong IOMMU setting (legitimate DMA read failure)**
- **System-wide starvation (excessive kernel debug messages)**
- **Isolation policy allowed arbitrary memory copies (corrupted network server)**
- **Driver request to perform SENDREC with nonblocking flag (bug in IPC subsystem)**
- **IPC call to SENDREC with target ANY (kept pending indefinitely)**
- **Illegal IPC destination (ANY) for NOTIFY call (kernel panic)**
- **Driver manager's priority set too low (infinite loop not detected)**
- **Kernel panic due to exception (uninitialized struct priv)**
- **Disk controller corruption (wrong IOMMU setting)**

### Lessons Learned

Our experiments provided several insights:
- **Fault injection** proved very helpful in finding programming bugs.
- **Hard-to-trigger bugs** only appeared after several design iterations and millions of fault injections.
- **Policy definition** is a challenging problem. At one point, the driver’s policy accidentally granted access to a kernel call, causing memory corruption.
- **Availability of individual services** cannot be guaranteed due to hardware limitations.
- **Hardware issues** caused some tests to be abandoned, such as the Realtek RTL8029 PCI card causing the entire system to freeze.

In summary, the results show that fault isolation and failure resilience indeed help to survive bugs and enable on-the-fly recovery. While we used MINIX 3, many of our ideas are generally applicable and may improve the dependability of other systems.

### Summary & Conclusion

This paper investigates the privileged operations that low-level device drivers need to perform and how, unless properly restricted, they can be root causes of fault propagation. We demonstrated how MINIX 3 systematically restricts drivers according to the principle of least authority to limit damage from bugs. Fault isolation is achieved through a combination of structural constraints, fine-grained per-driver isolation policies, and runtime memory granting. We believe that many of these techniques are generally applicable and can be ported to other systems.

We took an empirical approach to dependability, iteratively refining our isolation techniques using software-implemented fault-injection (SWIFI) testing. We targeted four different Ethernet driver configurations using both programmed I/O and DMA. Despite certain hardware limitations, the resulting design withstood 100% of 3,400,000 randomly injected faults, which were representative of typical programming errors. The targeted drivers repeatedly failed, but the rest of the OS was never affected.

### Acknowledgments

This work was supported by the Netherlands Organization for Scientific Research (NWO) under grant 612-060-420.

### References

[References listed as in the original text]