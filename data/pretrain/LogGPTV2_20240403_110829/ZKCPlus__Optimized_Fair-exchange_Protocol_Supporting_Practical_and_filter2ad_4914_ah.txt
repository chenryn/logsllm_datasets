lz = 
⟨lz, rz⟩ = 
i∈[m]
zi · li,
i∈[m]
rz = 
⟨li, ri⟩ + 
+ 
i∈[m]
k∈[1–m,m–1]\0
According to the Schwartz-Zippel lemma, apart from negligible
error 2m
|Fp|, the equation
⟨lz, rz⟩ = t
(50)
i∈[m]⟨li, ri⟩ = t. So a sum of inner products reduces
k∈[1–m,m–1]\0
tk · zk
to a single inner product; then the protocol in Figure 8 applies.
B.3 When some vectors are public
A slightly different case is that of some of the vectors, e.g. {ri} are
holds only if
public.
{Li ∈ G}i∈[m],
t ∈ Fp, {ri ∈ Fn
{li ∈ Fn
p}i∈[m],
{𝜄i ∈ Fp}i∈[m]

∧
p}i∈[m];
i∈[m]
Check(pp, Li, li, 𝜄i) = 1
i∈[m]⟨li, ri⟩ = t
(51)
 .
Omitting the operations related to commitments R and Ri in
Figure 8, Figure 9, it is not difficult to construct an argument for
relation (51).
B.4 Recursive reduction
The reduction in Section B.2 involves computing and committing
the cross terms tk for k ∈ [1 – m, m – 1]\0, which corresponds to
O(m2n) multiplications in Fp and 2m scalar multiplications in G.
The cost becomes substantial when m is large. In this section we
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3017describe a recursive protocol, which accomplishes the same task
of reducing a sum of inner products into one single inner product,
but with way less computational cost.
Public input: commitments {Li, Ri}i∈[m], T
P’s private input: {li, ri ∈ Fn
While m > 1 : m ← m/2
P : t+ = 
t– = 
p}i∈[m], t ∈ Fp, blinders {𝜄i, 𝜌i}i∈[m], 𝜏 ∈ Fp
⟨li, ri+m⟩,
i∈m
i∈m
(T +, 𝜏+) ← Commit(pp, t+),
⟨li+m, ri⟩,
(T –, 𝜏–) ← Commit(pp, t–).
P → V : T +, T –.
V → P : u.
P : for i ∈ [m]
li ← u · li + u–1 · li+m,
t ← t + u2 · t+ + u–1 · t–,
𝜄i ← u · 𝜄i + u–1 · 𝜄i+m,
𝜏 ← 𝜏 + u2 · 𝜏+ + u–1 · 𝜏–.
ri ← u–1 · ri + u · ri+m,
𝜌i ← u · 𝜌i + u–1 · 𝜌i+m,
Li ← u · Li + u–1 · Li+m,
T ← T + u2 · T + + u–2 · T –.
Ri ← u–1 · Ri + u · Ri+m,
P & V : for i ∈ [m]
Public input: commitments L1, R1, T
P’s private input: l1, r1 ∈ Fn
p, t ∈ Fp, blinders 𝜄1, 𝜌1, 𝜏 ∈ Fp
Figure 10: Recursive argument for sum of inner products
The protocol takes log m rounds, where in each round on V’s
challenger u, P halves the number of vectors from m into m′ = m/2
by
that
i∈[m′]
l′
i = u · li + u–1 · li+m′,
⟨li, ri⟩ + u2 · 
r′
i = u–1 · ri + uk · ri+m′,
⟨li, ri+d′⟩ + u–2 · 
⟨l′
i, r′
i∈[m′]
i∈[m′]
⟨li, ri⟩ + u2 · t+ + u–2 · t–.
i⟩ = 
= 
i∈[m]
i∈[m]
Summarizing all log m rounds, we have
(52)
⟨li+d′, ri⟩
(53)
(54)
where zi is the i-th element vector of z with a binary counting
structure
m
i=1
m
i=1
l =
zi · li,
r =
z–1
i
· ri,
z =
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
⟨li, ri⟩ + 
u1 . . . ulog m
u–1
1 . . . ulog m
...
u–1
1 . . . u–1
log m
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172) ,
k + 
k · t+
u2
k∈[log m]
k∈[log m]
and their inner product
⟨l, r⟩ = 
i∈[m]
According to the Schwartz-Zippel lemma, except for negligible
error 4·log m
|Fp|
, the equation
⟨l, r⟩ = t + 
holds only if t =
k∈[log m]
i∈[m]⟨li, ri⟩.
k + 
k∈[log m]
k · t+
u2
u–2 · t–
k
(57)
This recursive reduction involves computing and committing
k for k ∈ [log m], costing O(mn) multiplications in Fp and
t+
k and t–
2 log m scalar multiplications in G, a significant boost as compared
to that of Section B.2.
C Composition properties of CP-NIZK arguments
C.1 Conjunction of relations with shared inputs
With a computationally binding commitment scheme Com and
CP-NIZK arguments ΠCom
which respectively attest-
ing relations R0(s0, u, aux0) = 1 and R1(s1, u, aux1) = 1, with the
common input u committed as c, one can build a CP-NIZK argu-
ment ΠCom∧
for conjunction R∧ s.t. R∧(s0, s1, u, aux0, aux1) = 1 iff
R0(s0, u, aux0) = 1 ∧ R1(s1, u, aux1) = 1:
• KeyGen(1𝜆) → 𝜎: outputs 𝜎 = (𝜎0, 𝜎1), where
and ΠCom
0
1
𝜎0 ← ΠCom
𝜎1 ← ΠCom
0
1
.KeyGen(1𝜆),
.KeyGen(1𝜆);
• Prove(𝜎, s0, s1, c, u, aux0, aux1) → 𝜋: outputs 𝜋 = (𝜋0, 𝜋1) where
𝜋0 ← ΠCom
𝜋1 ← ΠCom
0
1
.Prove(𝜎, (s0, c), (u, aux0)),
.Prove(𝜎, (s1, c), (u, aux1));
• Verify(𝜎, s0, s1, c, 𝜋) → b: outputs b = b0 ∧ b1 where
0
b0 ← ΠCom
b1 ← ΠCom
1
The completeness of ΠCom∧
0
.Verify(𝜎, (s0, c), 𝜋0),
.Verify(𝜎, (s1, c), 𝜋1);
follows directly from the completenesse
. For knowledge soundness, if the proof 𝜋 verifies,
, which invokes the
and outputs witnesses
of ΠCom
one can construct an extractor Ext for ΠCom∧
extractor Ext0 and Ext1 for ΠCom
(u0, aux0) and (u1, aux1) s.t. except for negligible error,
and ΠCom
and ΠCom
Com.Check(pp, c, u0, r0) = 1 ∧ R0(s0, u0, aux0) = 1
∧ Com.Check(pp, c, u1, r1) = 1 ∧ R1(s1, u1, aux1) = 1.
1
0
1
Moreover, except for negligible possibility the identity u0 = u1
should hold, otherwise it breaks the binding property of Com. As
for zero-knowledge, one can simulate the proof 𝜋 by combining the
simulated proofs 𝜋0 and 𝜋1 from the respective simulators for ΠCom
and ΠCom
C.2 Disjunction of relations with shared inputs
For relation R(s, u) define ˆR(s, u, t) s.t.
0
1
.
(cid:40)
(55)
ˆR(s, u, t) = 1 iff
R(s, u) = 1 ∧ t = 0,
R(s, u) = 0 ∧ t ≠ 0.
(58)
u–2 · t–
k .
(56)
With this definition, the disjunction of relations is converted into
conjunctions. Specifically, for R0(s0, u) and R1(s1, u) with shared
inputs u, relation R∨ is defined as R∨(s0, s1, u) = 1 iff R0(s0, u) =
1 ∨ R1(s1, u) = 1, which is equivalent to
ˆR0(s0, u, t0) = 1 ∧ ˆR1(s1, u, t1) = 1 ∧ t0 · t1 = 0.
(59)
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3018C.3 Sequential composition of functions
Define relations Rg and Rh associated with functions g and h as
Rg(z, x, w) = 1 iff ∃ (x, w) s.t. g(x, w) = z,
Rh(s, z, y) = 1 iff ∃ (z, y) s.t. h(z, y) = s.
(60)
ture
Let f be the composition of g and h s.t. f (x, y, w) = h(g(x, w), y).
Then the relation associated with f , namely∃ (x, y, w) s.t f (x, y, w) =
s, can be reduced to conjunction of Rg and Rh
Rg(z, x, w) = 1 ∧ Rh(s, z, y) = 1.
(61)
D Proof for Theorem 3.1
Theorem 3.1 states that the argument in Figure 2 has perfect com-
pleteness, computational witness-extended emulation and PHVZK
under the discrete logarithm relation assumption.
Perfect completeness is straightforward.
To prove computational witness-extended emulation, we con-
struct an efficient extractor Ext, which runs P with n different y,
m different w, 2 different uk for k ∈ [0, log m] and 3 different e, in
total n × m × 2 × log 2m × 3 valid proof transcripts. For simplicity,
we denote K = [1 – 2m, 2m – 1]\0.
Choose 2 transcripts for e ∈ {e(1), e(2)} and fixed w, y, {uk}. From
the transmitted l′, Ext can extract ld, 𝜄d s.t. Ld = ⟨ld, G⟩ + 𝜄d · H. If
for any other set of challenges Ext extracts different ld, 𝜄d then it
yields a non-trivial discrete logarithm relation among (H, G) w.r.t.
commitment Ld. With ld fixed, Ext can extract l, 𝜄 from transmitted
l′, 𝜄′ by l = l′–e·ld, 𝜄 = 𝜄′–e·𝜄d. In case of Check(pp, L′, l′, 𝜄′) = 1, it
must hold that ⟨l, G⟩+𝜄·H = L′–e·Ld = L, otherwise it yields a non-
trivial discrete relation among (H, G) with respect to L. Similarly,
Ext can extract r, 𝜌 from transmitted r′, 𝜌′ s.t. ⟨r, G⟩ + 𝜌 · H = R′ –
e· Rd = R. For inner product, in case of Check(pp, T ′, ⟨l′, r′⟩, 𝜏′) = 1,
by 3 transcripts with different e ∈ {e(1), e(2), e(3)}, Ext can extract 𝜏
from transmitted 𝜎 s.t.
.
k
k=0
(62)
k · T +
u2
⟨l, r⟩ · U + 𝜏 · H =
k · T –
k + u–2
Choose 2 transcripts with different u0 ∈ {u(1)
0 , u(2)
0 } but same
uk for k ∈ [1, log m]. Correspondingly there are l ∈ {l(1), l(2)}, r ∈
{r(1), r(2)}, and 𝜏 ∈ {𝜏(1), 𝜏(2)}. Ext is able to compute from l ∈ {l(1), l(2)}
two vectors l1, l2 s.t. l = u0 · l1 + u–1
· l2. Similarly, Ext recovers
0
r1, r2 s.t. r = u0 · r1 + u–1
· r2. Moreover, their inner products must
0
satisfy the equation
⟨l, r⟩ =
0 · ⟨l1, r2⟩ + ⟨l2, r1⟩.
⟨li, ri⟩ + u2
2
(63)
Run the process recursively, in the k-th round picking two different
uk, after log m more rounds, Ext will be able to construct {li}i∈[2m]
and {ri}i∈[2m] s.t.
log m
(cid:16)
(cid:17)
⟨l, r⟩ =
⟨li, ri⟩ +
⟨li, ri+2k⟩ + u–2
k · 2k
i=1
⟨li+2k, ri⟩(cid:170)(cid:174)(cid:172) .
(64)
2m
i=1
Equations (62) and (64) imply that
i=1
log m
k=0
k · 2k
(cid:169)(cid:173)(cid:171)u2
2m
i=1
i=1
⟨li, ri⟩ = 0.
To prove PSHVZK, we construct an efficient simulator Sim that
(65)
produces a distribution of transcripts
k , T –
tr = ({Vj}j∈[m], w, y, {T +