### Performance Results of lmbench 3 Measurements (in Microseconds)

| Metric | Base | Enforcing | Overhead (%) | SELinux (%) |
|--------|------|-----------|--------------|-------------|
| File Write Bandwidth | 0.6492 | 0.6492 | 0 | 28 |
| Page Fault | 0.8483 | 1.0017 | 18 | 27 |
| UDP Latency | 0.7726 | 0.8981 | 16 | 12 |
| TCP Latency | 2.8257 | 2.8682 | 1.5 | 19 |
| RPC/UDP Latency | 1.0139 | 1.0182 | 0.4 | 1 |
| RPC/TCP Latency | 3.7906 | 4.0608 | 7 | 3 |
| TCP/IP Connection Cost | 21.7686 | 21.8458 | 0.3 | 10 |
| Base (MB/sec) | 37.8027 | 37.9795 | 0.5 | 15 |
| 1.2346 | 1.2346 | 0 | 9 |
| 2.3954 | 2.4079 | 0.5 | 18 |
| 0.3994 | 0.3872 | -3 | 9 |
| 6.4345 | 6.2065 | -3 | 9 |
| 1310.19 MB/sec | 1292.54 MB/sec | 7 | 9 |
| 8.2 | 8.9418 | 9 | 9 |
| 1472.10 MB/sec | 1457.57 MB/sec | 9 | 9 |
| 116.5581 | 120.3478 | 3 | 3 |
| 484.3333 | 500.1818 | 3 | 3 |
| 1413.25 | 1444.25 | 2 | 2 |
| 16997 KB/sec | 16854 KB/sec | 0.8 | 2 |
| 1.3288 | 1.3502 | 2 | 2 |
| 14.4036 | 14.6798 | 2 | 2 |
| 17.1356 | 18.3555 | 7 | 1 |
| 24.6433 | 24.8790 | 1 | 9 |
| 29.7117 | 32.4626 | 9 | 1 |
| 64.5465 | 64.8352 | 1 | 9 |

### Comparison with Other Security Mechanisms

**SELinux:**
- **Approach:** SELinux uses a MAC (Mandatory Access Control) model where MAC information is independent from DAC (Discretionary Access Control). Each file must be labeled, and the file system must support additional labeling.
- **Challenges:** Labeling files is labor-intensive and error-prone. New software installations require policy updates to assign appropriate labels. Policies are complex and difficult to understand due to multiple levels of indirection.
- **Comparison with UMIP:** UMIP utilizes existing DAC information, requires less configuration, and has simpler policies.

**AppArmor:**
- **Approach:** AppArmor confines applications by creating security profiles that identify all capabilities and files a program can access. It uses file paths to identify programs and files in the security profiles.
- **Policy Design:** Programs without a policy are not confined, violating the fail-safe defaults principle. AppArmor does not maintain integrity levels for processes or files, limiting its ability to track contamination.
- **Comparison with UMIP:** UMIP follows the fail-safe default principle and specifies exceptions for programs. It also tracks file contamination, allowing more granular control over system administration through high-integrity channels.

**Securelevel:**
- **Approach:** Securelevel in *BSD kernels restricts certain tasks when set to a positive value. Only the init process can lower the securelevel.
- **Weaknesses:** Effective only if all files used in the boot process are protected. System maintenance becomes difficult as it requires taking the system down to single-user mode to modify configuration files.
- **Comparison with UMIP:** UMIP enables system administration through high-integrity channels and tracks file contamination, ensuring high integrity during booting.

**CW-Lite:**
- **Approach:** CW-Lite explicitly analyzes source code to identify and filter low-integrity inputs before they flow into high-integrity objects.
- **Complementary to UMIP:** While UMIP treats programs as black boxes, CW-Lite provides a way to verify and justify trust in programs by analyzing their source code.

### Conclusions

We have identified six design principles for usable access control mechanisms and introduced the UMIP model, a simple and practical MAC model for host integrity protection. UMIP defends against attacks targeting network server and client programs, supports existing applications and system administration practices, and has a simple policy configuration interface. We have reported the experiences and evaluation results of our implementation under Linux and plan to continue testing and improving the code, releasing it to the open-source community in the near future. We also plan to develop tools to help system administrators analyze UMIP configurations and identify potential attack vectors.

### Acknowledgements

This work is supported by NSF CNS-0448204 and sponsors of CERIAS. We thank Xuxian Jiang for helpful discussions and suggestions on evaluating the UMIP implementation under Linux. We also thank the anonymous reviewers and shepherd of our paper, as well as Trent Jaeger for valuable comments that have greatly improved the paper.

### References

[1] Apparmor application security for Linux. http://www.novell.com/linux/security/apparmor/.
[2] L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. A domain and type enforcement UNIX prototype. In Proc. USENIX Security Symposium, June 1995.
[3] L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. Practical domain and type enforcement for UNIX. In Proc. IEEE Symposium on Security and Privacy, pages 66–77, May 1995.
[4] K. J. Biba. Integrity considerations for secure computer systems. Technical Report MTR-3153, MITRE, April 1977.
[5] D. Brumley and D. Song. PrivTrans: Automatically partitioning programs for privilege separation. In Proceedings of the USENIX Security Symposium, August 2004.
[6] H. Chen, D. Dean, and D. Wagner. Setuid demystified. In Proc. USENIX Security Symposium, pages 171–190, Aug. 2002.
[7] D. D. Clark and D. R. Wilson. A comparison of commercial and military computer security policies. In Proceedings of the 1987 IEEE Symposium on Security and Privacy, pages 184–194. IEEE Computer Society Press, May 1987.
[8] C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle, and V. D. Gligor. Subdomain: Parsimonious server security. In Proceedings of the 14th Conference on Systems Administration (LISA 2000), pages 355–368, Dec. 2000.
[9] DOD. Trusted Computer System Evaluation Criteria. Department of Defense 5200.28-STD, Dec. 1985.
[10] T. Fraser. LOMAC: Low water-mark integrity protection for COTS environments. In 2000 IEEE Symposium on Security and Privacy, May 2000.
[11] Frequently Asked Questions for FreeBSD 4.X, 5.X, and 6.X. http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/.
[12] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure environment for untrusted helper applications: Confining the wily hacker. In Proc. USENIX Security Symposium, pages 1–13, June 1996.