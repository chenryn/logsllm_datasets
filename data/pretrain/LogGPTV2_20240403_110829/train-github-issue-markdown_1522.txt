If you have a folder containing 100 files and only one or two of them have not been modified, identifying the unchanged files can be challenging. While Git provides a clear view of the changed files, it does not directly highlight the unchanged ones in a file explorer.

Here are a few methods to help you find the unchanged files:

1. **Use Git Commands:**
   - You can use the `git status` command to list all the modified files. Then, you can compare this list with the total list of files in the directory to identify the unchanged ones.
   - For example, you can run:
     ```sh
     git status --porcelain | grep ' M ' | cut -c4-
     ```
     This command will list all the modified files. You can then use a script or manual comparison to find the unchanged files.

2. **Use a Script:**
   - Write a simple script to compare the list of all files in the directory with the list of modified files from Git.
   - Here is an example in Bash:
     ```sh
     # List all files in the directory
     all_files=$(find . -type f)

     # List all modified files
     modified_files=$(git status --porcelain | grep ' M ' | cut -c4-)

     # Find unchanged files
     unchanged_files=$(comm -23 <(echo "$all_files" | sort) <(echo "$modified_files" | sort))

     echo "Unchanged files:"
     echo "$unchanged_files"
     ```

3. **Use a File Explorer with Version Control Integration:**
   - Some file explorers and code editors, like Atom, Visual Studio Code, or IntelliJ IDEA, integrate with Git and can visually highlight modified files. If your current file explorer does not support this, consider using one that does.
   - In these editors, you can usually configure the file tree to show different colors for modified, added, and unchanged files, making it easier to spot the unchanged ones.

By using these methods, you can efficiently identify the unchanged files in your directory. If you prefer a more visual approach, switching to a file explorer or code editor with Git integration might be the most convenient solution.

Thank you!