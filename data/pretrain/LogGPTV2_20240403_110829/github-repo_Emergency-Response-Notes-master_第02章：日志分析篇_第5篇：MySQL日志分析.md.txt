## 第5篇：MySQL日志分析

数据库安全是信息安全中的一个重要组成部分。常见的数据库攻击手段包括使用弱口令、SQL注入、权限提升以及窃取备份等。通过对数据库日志进行细致的分析，不仅可以发现潜在的安全威胁，还能够帮助我们重现攻击场景并追踪到攻击源。

### 0x01 MySQL日志分析概述

**General Query Log** 记录了所有成功连接至服务器及其后执行的所有查询操作。这使得该日志成为监控系统状态及调查异常活动时不可或缺的一部分。

- **查看当前的日志配置:**
  ```sql
  SHOW VARIABLES LIKE '%general%';
  ```
- **启用日志记录功能:**
  ```sql
  SET GLOBAL general_log = 'ON';
  ```
- **指定日志文件保存位置:**
  ```sql
  SET GLOBAL general_log_file = '/var/lib/mysql/mysql.log';
  ```

例如，当用户访问 `/test.php?id=1` 时，生成的日志条目如下所示：
```
190604 14:46:14  14 Connect    root@localhost on 
           14 Init DB    test
           14 Query    SELECT * FROM admin WHERE id = 1
           14 Quit
```
这些信息可以按照以下方式进行解读：

- **时间戳 (Time)**: 指示事件发生的具体日期与时间。
- **线程ID (Id)**: 对应于 `SHOW PROCESSLIST` 输出中显示的线程编号。
- **命令类型 (Command)**: 描述了发生的动作种类（如“Connect”代表建立新连接）。
- **参数 (Argument)**: 提供了关于该命令更详细的上下文信息。

### 0x02 登录尝试的监控

为了更好地理解如何通过日志来识别合法与非法登录尝试，我们可以观察下面这个例子：

假设有一系列针对两个用户的密码猜测尝试（共8组）。如果其中一个组合成功，则相应的日志条目将类似于：
```
190601 22:03:20  100 Connect	root@192.168.204.1 on 
       100 Query	set autocommit=0
       100 Quit
```

而失败的登录尝试则会留下类似这样的痕迹：
```
102 Connect	mysql@192.168.204.1 on 
102 Connect	Access denied for user 'mysql'@'192.168.204.1' (using password: YES)
```

利用简单的Shell脚本可以帮助我们快速统计出特定时间段内频繁出现的IP地址或用户名：
```bash
# 统计最常出现的尝试登录但被拒绝的IP地址
grep "Access denied" mysql.log | cut -d "'" -f4 | uniq -c | sort -nr

# 查看哪些账户名曾被用于暴力破解
grep "Access denied" mysql.log | cut -d "'" -f2 | uniq -c | sort -nr
```

此外，在审查日志时还需特别注意那些可能表明存在恶意活动的关键字，比如涉及删除表(`DROP TABLE`)、锁定表(`LOCK TABLES`)、读写文件(`LOAD_FILE`, `INTO OUTFILE`)的操作指令。

### 0x03 SQL注入后的迹象检测

在遭遇SQL注入攻击之后，攻击者可能会留下某些证据，例如创建临时表或自定义函数。以下是识别此类行为的一些步骤：

1. **查找可疑的新建文件**: 检查Web根目录下是否存在任何非预期的PHP脚本或其他类型的可执行文件。
2. **检查UDF提权和MOF提权的迹象**: 查看MySQL插件目录(`mysql\lib\plugin`)和Windows MOF存储路径(`C:\Windows\System32\wbem\mof\`)是否有新增内容。
3. **验证是否存有未授权的函数定义**:
   ```sql
   SELECT * FROM mysql.func;
   ```

结合以上方法，并辅以对Web访问日志的深入研究，便能有效地定位并响应潜在的安全问题。