www.TopSage.com
---
## Page 300
并用已保存的基类的槽信息来生成你想要的WITH-SLOTS形式，如下所示：
define-binary-class的类描述符和基类列表，并用它们来计算所有新类的槽列表：
因为所需的信息只有在展开式被编译以后才可用。反之，你应当使用下面的函数，它接受传递给
基类定义的槽的名字的WITH-SLOTS形式。不过，你不能在生成展开式的时候使用a11-slots，
之后再去修改其槽列表。
定义的槽。让该函数返回列表的复本是个好主意，因为你不希望其他代码在二进制类已经被定义
一旦定义了这些函数，你就可以改变define-binary-class来保存当前被定义类的信息，
现在你可以定义三个助手函数来访问这些信息。第一个函数简单地返回由一个二进制类直接
(defun new-class-all-slots (slots superclasses)
当你在计算define-binary-class形式的展开式时，你想要生成包含所有由新类及其全部
最后，你可以定义一个函数，其返回包含所有直接定义和继承得到的槽名称的列表。
(defun all-slots (name)
(defuninherited-slots (name)
下一个函数返回从其他二进制类中继承的槽。
(defun direct-slots (name)
(eval-when(:compile-toplevel:load-toplevel :execute)
(nconc (direct-slots name)(inherited-slots name)))
(copy-list(get name'slots)))
(with-gensyms (objectvar streamvar)
(nconc (mapcan #'all-slots superclasses) (mapcar #'first slots)))
(setf
(progn
(defmethod write-object progn ((,objectvar,name),streamvar)
(defmethodread-objectprogn((,objectvar
(defclass ,name ,superclasses
nconc(inherited-slots super)))
nconc (direct-slots super)
(get
,(mapcar #'slot->defclass-slot slots))
(with-slots
(setf
(setf
,@(mapcar
,@(mapcar#'(lambda（x)(slot->read-valuexstreamvar))slots)))
,name
(get
(get
,name
'slots)
-class-all-slots slots superclasses)
'superclasses)
'slots)
(mapcar
www.TopSage.com
(slot->write-value xstreamvar))slots))))))
#'firstslots))
',superclasses))
,name)
24.10跟踪继承的槽）
,streamvar)
,objectvar
,objectvar
---
## Page 301
class里，它接受读方法作为一个参数并将其插入到自己的展开式里。
都是相同的，你可以将它们的共同点分离出来放在一个助手宏define-generic-binary-
个看起来像下面这样的read-value方法：
binary-class的展开式那样的write-object方法，但它没有read-object方法，而是含有一
类型的ID3帧的二进制类上，那么你可以定义一个带有标记的二进制类id3－frame，如下所示：
接受对应于由带有标记的类定义的槽名称的起始参数。如果：dispatch形式总是求值到该标记类
对象传给read-object，从而由该对象实际所属的类来决定如何读取结构的其余部分。
MAKE-INSTANCE生成该类的一个实例，同时将已经读取的值作为起始参数来传递，接着再将该
道如何读取结构开始部分的值并使用这些值来决定哪个子类将被实例化。然后它用
有标记”的结构的类了。读取带有标记的结构的策略是定义一个特化的read-value方法，它知
24.11带有标记的结构
的子类的名字上，那么这个要求可以直接满足。
带有标记的类定义的槽名称被绑定到从文件中所读取到的值的上下文中被求值。它返回的类必须
的define-binary-class，该选项指定一个求值到某二进制类名的形式。:dispatch形式在由
284
这个新的宏define-tagged-binary-class看起来像是带有附加的一个:dispatch选项
由于define-tagged-binary-class和define-binary-class的展开式除了读方法以外
define-tagged-binary-class 的展开式将含有一个DEFcLAss和一个就像define-
一旦可以定义二进制类来扩展其他二进制类，你就可以定义一个新的宏来定义那些表示“带
(defmacro define-generic-binary-class (name (&rest superclasses) slots read-method)
(defmethod read-value ((type (eql
(define-tagged-binary-class id3-frame ()
(with-gensyms (objectvar streamvar)
(:dispatch (find-frame-class id)))
(size u3))
({id
(progn
{let（{object
object)）)
第 24章
(read-object object stream)
,read-method
(defclass ,name ,superclasses 
(eval-when
(size (read-value 'u3 stream)))
,(mapcar #'slot->defclass-slot slots))
(iso-8859-1-string :length 3))
(setf
(setf
(get ′,name 'superclasses) ',superclasses))
实践：解析二进制文件
(get
(:compile-toplevel :load-toplevel :execute)
(make-instance (find-frame-class id) :id id :size size)))
,name
www.TopSage.com
slots)
‘id3-frame)) stream &key)
---
## Page 302
加圆满。目前，define-binary-class依赖于以特殊方式定义的read-value和write-value
二进制类所使用的基本类型。
决定保持现状,指定该库的用户必须编写适当的read-value和write-value方法来支持他们的
单了，但你仍然不得不手工编写用于基本数据类型的read-value和write-value方法。你可以
24.12
class，当其完全展开时可以生成和之前的版本相同的代码：
一个对define-generic-binary-class的调用了。下面是一个新版本的define-binary-
不过，除了针对如何编写合适的read-value/write-value对写些文档以外，你还可以提
 尽管define-binary-class和define-tagged-binary-class令复合结构的定义变得简
而下面是define-tagged-binary-class的定义以及它所用到的两个新的助手函数：
(defmacro define-binary-class (name (&rest superclasses) slots)
现在你可以同时定义define-binary-class和define-tagged-binary-class来展开成
(defun slot->keyword-arg (spec)
(defun slot->binding (spec sStream)
(defmacro define-tagged-binary-class (name (&rest superclasses) slots &rest options)
(let
(destructuring-bind (name (type &rest args)) (normalize-slot-spec spec)
(with-gensyms (objectvar streamvar)
基本二进制类型
(((sb1' s1′ a': -a) u')
`(define-generic-binary-class .
(defmethod read-value ((,typevar (eql ',name))
(name
(defmethod read-object progn ((,objectvar ,name) ,streamvar)
(defmethod write-object progn ((,objectvar ,name) ,streamvar)
(declare (ignorable ,streamvar))
(with-slots 
(declare (ignorable
(let ((,objectvar
,@(mapcar 
,objectvar))))))
(read-object ,objectvar ,streamvar)
(first
,@(mapcan #'slot->keyword-arg slots))))
,@(or (cdr (assoc :dispatch options))
(make-instance
:#:(lambda (x) (slot->read-value x streamvar)) slots))))))
(((ads
,streamvar))
www.TopSage.com
-all-slots slots superclasses)
,superclasses ,slots 
24.12
,Streamvar &key)
,slots
基本二进制类型
,objectvar
285
---
## Page 303
用模板中了。
REST部分。
签：reader和:writer来解出 spec中的元素，再用DEFTRUCTURING-BIND来取出每个元素的
那么在宏里，参数spec将是一个含有读写器定义的列表。随后你可以通过Assoc使用标
中就可以了。如果你像下面这样定义了define-binary-type的参数列表：·
例中，共有4个部分的本质信息：类型名iso-8859-1；应当被read-value和write-value方法
使用CODE-CHAR和CHAR-CODE来将字节和字符相互转化了。
串。如以往一样，假设你的Lisp使用的原生字符集是ISO-8859-1或它的一个超集，这样你就可以
的值，而不是由define-binary-class定义的类的实例的值。
的代码做任何改变。
class的实现，那么你可以改变你的基本类型定义宏来满足新的需求而无需对使用二进制格式库
下面是一个含有这四部分信息的表达式：
的宏，你可以将那些细节隐藏在你所控制的抽象层面上。如果你以后决定改变define-binarY-
方法，但这只是一种实现细节。通过定义一个对基本类型生成read-value和write-value方法
从这里开始，剩下的问题只是将解出来的值插入到read-value和write-value方法的反引
和以往一样，你的目标是编写一个宏，你可以仅表达必要的用来生成所需代码的信息。在本
286
① 使用Assoc来解出spec的：reader和:WRITER元素，可以使define-binary-type的用户以任何顺序包含这
.. (oads Apoq (sbre asars) aweu) ad-teuta-autrap oxoeusap)
现在你只需要一个宏来接受上面的形式，再将两个DEFMATHOD的形式一起封装到一个PROGN
 举一个简单的例子，考虑一个用在id3-tag类中的类型，一个以ISO-8859-1编码的定长字符
(defmacro define-binary-type (name (&rest args) &body spec)
(define-binary-type iso-8859-1-string (length)
define-binary-type形式的可读性，那么你就总是可以使用它们来解出正确的数据来。
再用{rest（second spec))来解出写人器。不过，只要你要求使用:reader和:writer关键字来改进
些元素。如果你要求：reader元素必须总是第一个，那么你可以使用（rest（firstspec)）来解出读取器，
(with-gensyms (type)
{:writer
{:reader
(dotimes
(let
(progn
(write-byte (char-code (char string i)) out))))
string))
(dotimes (i length)
第24章实践：解析二进制文件
((((u aq-pea1) re-apo) ( buas eu) a) 
((string
(out string)
(make-string length)))
www.TopSage.com
',name)) ,in &key ,@args)
---
## Page 304
分
它将展开成下面的代码：
define-binary-type，你可以像下面这样定义u1：
对构成的长形式，另一个是用已有类型来定义新二进制类型的短形式。使用一个短形式的
果证明，改变define-binary-type来支持两个形式是很容易的，一-个是由:reader和:writer
类型的槽，那么如果可以将其定义成一个代表同样类型的新类型（比如说u1）就会很方便了。结
型说明符来指定一个表示单字节无符号整数的槽。但假如一个特定的二进制格式指定了许多这样
定一次读写多少个字节。使用这个类型，你可以用(unsigned-integer:bytes 1)的一个类
型，或者你也可以将读写n字节无符号整数的通用算法分离成助手函数。
两个、三个和四个字节的无符号整数。你当然可以用define-binary-type来逐个定义每个类
际格式时，成为相当有用的工具了。
目前，应该只需要一个小的改进，就可以让它在你开始使用这个库来处理诸如ID3标签这样的实
又含有另外的反引用模板，它生成插人到外层模板的方法定义。