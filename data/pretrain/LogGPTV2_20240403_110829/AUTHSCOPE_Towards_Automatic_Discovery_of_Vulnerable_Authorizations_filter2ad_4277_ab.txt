### Belonging to a Particular User

If the server has checked UID 21690 with Alice’s token and 21691 with Bob’s token, the substitution attack would not have succeeded.

**Note:** We do not disclose the specific name of this app because the vulnerability identified in the server of W has not been patched as of the time of writing.

### Session D2: Vulnerable Mobile Apps
**CCS'17, October 30-November 3, 2017, Dallas, TX, USA**

#### GET /api/v1//users/21690/notifications?in_app_token=e67315b35aa38d4ac8cac3cd9c7f88ae7f576d373f HTTP/1.1
- **Host:** api.*****.com
- **Connection:** close

**Response:**
- **HTTP/1.1 200 OK**
- **Cache-Control:** max-age=0, private, must-revalidate
- **Content-Type:** application/json
- **ETag:** W/"5319d96924bb6d0a761b5f13b248919c"
- **Server:** nginx/1.6.2
- **X-Request-Id:** 5775d45e-cc3b-4665-8bc6-c2c7a2c9180d
- **X-Runtime:** 0.027840
- **Content-Length:** 191
- **Connection:** Close

```json
[{
    "id": 433222,
    "sender": null,
    "dog": null,
    "notification_type": 15,
    "notification_text": "Welcome to *****.",
    "object_id": 21690,
    "is_seen": true,
    "is_read": true,
    "created_at": "2017-01-28T23:54:59.831Z"
}]
```

**(a) Alice’s first request and response message after login**

#### GET /api/v1//users/21691/notifications?in_app_token=fb153b7d8c0a0c6ac841d7bfbd9446de627c642858 HTTP/1.1
- **Host:** api.*****.com
- **Connection:** close

**Response:**
- **HTTP/1.1 200 OK**
- **Cache-Control:** max-age=0, private, must-revalidate
- **Content-Type:** application/json
- **ETag:** W/"6ee365b32e7f3e145d5c74778ea243cd"
- **Server:** nginx/1.6.2
- **X-Request-Id:** 4970cafb-9438-4a70-96e0-ca2f789f0d5d
- **X-Runtime:** 0.022889
- **Content-Length:** 192
- **Connection:** Close

```json
[{
    "id": 433227,
    "sender": null,
    "dog": null,
    "notification_type": 15,
    "notification_text": "Welcome to *****.",
    "object_id": 21691,
    "is_seen": true,
    "is_read": false,
    "created_at": "2017-01-28T23:56:40.533Z"
}]
```

**(b) Bob’s first request and response message after login**

**Figure 2: Sample Request and Response Messages of our Running Example. The server name has been anonymized with *****.**

### Goal of AuthScope
The goal of our AuthScope is to automatically and systematically identify vulnerable servers by performing request message field inference and substitution.

### 3.2 Challenges and Key Insights

From the running example, several challenges arise in achieving our goal:

- **Obtaining Post-Authentication Messages:**
  - Since we focus on identifying vulnerable authorization implementations post-authentication, we must execute the app to reach the state that generates post-authentication request messages.
  - This requires a registered legitimate user of the testing service and obtaining a legal post-authentication message.
  - Manual registration for each service is not scalable, so we need techniques to drive the app execution to trigger legitimate post-authentication messages (e.g., as shown in Figure 2).

- **Recognizing Protocol Fields of Interest:**
  - With traced legitimate request and response messages, we must identify fields of interest.
  - For instance, in Figure 2, we need to recognize fields like `in_app_token` and those without field names (e.g., UIDs in the URL path).
  - Unlike traditional HTTP requests, we must systematically recognize all protocol fields, including hidden ones used in URLs such as REST APIs.

- **Identifying Vulnerability:**
  - After obtaining post-authentication messages and recognizing protocol fields, we need to systematically substitute these fields in the request messages to observe the server's response.
  - Deciding whether a server is vulnerable based on the response message is another challenge.

### Key Insights

- **No Randomness of the UID:**
  - If the server does not enforce consistency checks between the UID and the corresponding user token, it can make the UID sufficiently random, making it difficult for an attacker to predict and thus defeating the substitution attack.

- **Executing the App with Single-Sign-On:**
  - Manually registering a user account for each tested mobile app is tedious.
  - Many mobile apps support social login (e.g., Facebook login), which allows automatic login and generation of post-authentication messages.
  - Limitation: Apps that do not use social login cannot be tested automatically.

- **Recognizing Protocol Fields with Differential Traffic Analysis:**
  - With just one request and response message pair, recognizing fields of interest is challenging.
  - Using two legitimate users and their message pairs, we can easily identify fields of interest by aligning the messages and looking for differences, as done in AutoForge [47].

- **Substituting Fields with Small Euclidean Distance:**
  - Cryptographically generated token fields are too random to guess, so we should substitute fields with small Euclidean distances (e.g., UIDs with values 21690 and 21691).
  - This requires converting numbers and strings to computable forms to measure Euclidean distance.

- **Labeling Server Responses with Differential Traffic Analysis:**
  - After substituting fields of interest, we need to determine if the substitution proves the existence of a vulnerable authorization.
  - If substituting Alice’s UID with Bob’s results in a response containing Bob’s private message, the server is vulnerable.
  - Differential traffic analysis can identify and filter out message-specific information like timestamps, as demonstrated in AutoForge [47].

### 3.3 System Overview

**Figure 4: An Overview of AuthScope**

AuthScope consists of three key components:
1. **Post-Authentication Message Generation:**
   - Drives app execution to trigger legitimate post-authentication request messages.
2. **Protocol Field Recognition and Substitution:**
   - Recognizes protocol fields in request messages and mutates fields of interest.
3. **Response Message Labeling:**
   - Labels response messages and decides if the server is vulnerable to access control violations.

These components run on the client side, either in a mobile device or a man-in-the-middle network proxy.

**Scope and Assumptions:**
- Focus on mobile apps using HTTP/HTTPS protocols.
- Apps using Facebook login for automatic triggering of post-authentication messages.
- Vulnerabilities include no security token, no randomness when referring resources, and no access control enforcement with tokens.
- Out-of-scope vulnerabilities include unchanging tokens, token randomness, plaintext transmission, and weak authentication.

**Handling HTTPS Traffic:**
- By controlling the smartphone and man-in-the-middle proxy, we install a root certificate to observe HTTPS traffic in plaintext, a common method in many systems.

### 4. Detailed Design

In this section, we present the detailed design of the three key components of AuthScope, based on their execution order.

#### 4.1 Post-Authentication Message Generation

Unlike other mobile app dynamic analyses, we need to allow the app to enter a post-authentication state. This involves:
- Registering a legal user in the remote service.
- Executing the app with the registered user and logging in successfully.

**User Registration:**
- The registration interface can be complex, requiring specific formats and constraints.
- Symbolic execution may not collect all constraints, and CAPTCHAs and email verifications add complexity.

**Social Login:**
- Many mobile apps use social login (e.g., Facebook), simplifying the process.
- Social login interfaces are usually straightforward to trigger, avoiding the need for symbolic execution.

**Targeted App Activity Explorer:**
- Inspired by prior works, we parse UI elements and use a depth-first search (DFS) algorithm to explore app activities.
- In Android, activities and views are uniquely identified to avoid redundant exploration.

**View Identification:**
- Activities are managed in a stack, and views are identified using a vector of attributes to ensure unique identification.

This approach ensures efficient and systematic exploration of app activities, enabling the generation of post-authentication messages for further analysis.