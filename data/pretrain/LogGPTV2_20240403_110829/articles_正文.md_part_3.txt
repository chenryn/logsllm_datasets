## 2.4 日志管理中存在的问题
1\. 存在海量数据信息孤岛
目前，很多企业的日志仍然散落在各种设备上，运维人员在使用日志时需要多方查询，极其不便。日志中的价值得不到有效挖掘，运维效率极低，而且不能满足《网络安全法》对日志管理的要求。
2\. 日志应用方式原始
很多企业运维人员还在通过多终端方式连接服务器，在目录中通过grep、vi、awk等命令方式定位问题。如果运行Windows系统中的服务就会更加困难，需要打开第三方软件进行排障。开发人员也面临同样的问题，不过开发人员只在项目上线时才关注这些问题。最终，所有的难题都留给了运维人员。一次故障定位过程通常要花费10～30分钟，甚至更久。
日志只在系统出现问题的时候才会被关注，如果缺乏有效的手段去监控日志，也就无法第一时间发现日志中存在的问题。
3\. 存在操作风险与信息泄露
金融行业常见的隐私信息，如身份证号码、存款账号、证券账号、保单号、手机号等信息经常在往来日志报文中传输。日志权限管理不善导致客户信息泄露频发。用户登录操作风险得不到有效规避。
4\. 信息缺失
当业务系统出现异常时，运维人员往往第一时间去查看日志，有时会发现日志没有打印完整，原因是开发人员认为打印日志消耗I/O性能，会导致磁盘效率低，常常只打印错误日志。很多业务日志及安全设备日志都没有按照等级保护要求开启日志级别。很多运维人员也不清楚需要开启哪种日志级别来满足日常应用。
5\. 日志价值未被充分挖掘
很多企业没有认识到日志的重要性，为了节约成本，有时仅采购一台功能简单的工控机作为日志集中存储的设备。有些设备本身造价很低、稳定性差，经常会因为单机故障导致日志数据无法恢复，结果出现审计时无数据可用的情况。
日志中包含往返报文和交易的详细信息，对日志特征结合时间维度进行关联分析就可以轻易获得用户画像、用户行为、业务系统特征，这些可以作为安全运营的数据支撑，也是精益管理的重要数据支撑。
## 2.5 日志管理的好处
日志中包含设备运行状态、安全事件、用户行为等信息，管理员通过认真分析日志数据，可以了解目前企业所面临的网络威胁、业务健康度、设备性能与工作效率等情况。做好日志管理可以大大提高企业安全运营与精益管理的水平，如图2-2所示。
![](media/image3.tiff){width="3.9616666666666664in" height="1.915in"}
图2-2 精益管理
1\. 简单资源管理
在早期设备量较少时，可以通过ping命令进行设备探活检测。ping命令采用ICMP协议，通过返回的信息可以知道目前某网段设备存活数量，前提是被检测的主机或防火墙支持ping命令。
ping命令执行效果如图2-3所示。
![](media/image4.png){width="5.258603455818022in"
height="2.1545450568678914in"}
图2-3 ping命令执行效果
端口探活可以使用Telnet命令。批量探活可以使用脚本或专业扫描工具。当发现本应在线的设备不在线时，应及时发出通知或告警。
2\. 防火墙策略优化
防火墙策略配置以最小化为原则，即除非允许，否则全部禁止。在日常工作中经常需要根据业务需求变更网络策略，有时管理员并未考虑开放策略的风险，导致规则冗余或开放风险敞口过大，而管理员自己却不知道。通过防火墙会话日志可以清晰地看到日志的源地址、目的地址、端口等信息。只要对一段时间内防火墙放过的端口和IP地址进行分析，就可以知道哪些端口和IP地址不应该被放过，并反向找到策略进行修改。
3\. 回溯取证
日志目前可以作为电子证据使用。当企业内部系统被入侵或信息泄露时，可以通过对日志的分析找到问题源头，除网络设备、堡垒机、主机和应用系统日志外，还可以结合门禁、闸机等安保系统日志进行关联分析，以发现用户异常行为。
4\. 微服务调用链跟踪
如今应用的用户量、交易量呈爆发式增长，导致后台服务经常不堪重负。经过多年迭代，服务架构已从单体架构发展成分布式微服务架构。其发展历程如图2-4所示。
![](media/image4.tiff){width="4.725in" height="2.4983333333333335in"}
图2-4 服务架构发展历程
微服务的优点非常多，但也有缺点，即系统太过复杂，给后台开发和运维带来了巨大的挑战。主要问题如下：
（1）故障定位难：一次请求往往涉及多个服务，这些服务很可能是由不同的团队负责的。一旦出现问题，只显示异常，而不显示异常出现在哪个服务上，需要进入每个服务去查找问题，导致处理效率非常低。
（2）链路梳理难：开发人员新加入团队，接手一个微服务组件，完全不知道自己负责的内容属于哪个环节，也不清楚上下游依赖哪些服务关系，需要将之前的开发文档完整地看一遍，逐行进行代码分析。文档缺失对交接人来说就是一个巨大的灾难。
（3）性能分析难：一个应用依赖于后台的多个服务，如果中间某个接口耗时异常，开发人员就要逐个分析各依赖接口的耗时情况。
业内在解决上述问题时通常采用分布式链路跟踪系统（Distributed Tracing
System）。2010年，Google发表了关于Dapper的论文，Dapper是生产环境下的分布式链路跟踪系统。之后，各大互联网公司纷纷参考Dapper的思想推出分布式链路跟踪系统。目前较流行的分布式链路跟踪系统有Zipkin、Pinpoint、SkyWalking等。与此同时，需要对现有业务系统进行改造，特别是日志系统。改造后的调用链跟踪效果如图2-5所示。
![](media/image5.png){width="8.934606299212598in"
height="4.395566491688539in"}![](media/image6.png){width="6.056492782152231in"
height="4.395566491688539in"}
图2-5 调用链跟踪效果
有了调用链跟踪数据，自动生成业务图谱就水到渠成了，如图2-6所示。
![](media/image7.png){width="4.101170166229221in"
height="2.5521128608923886in"}
图2-6 业务图谱
5\. 统一日志输出规范
目前很多企业的关键业务系统是由多个厂商提供的，有些厂商并未采用标准日志打印格式，导致通过日志排除故障或打印日志效率低下。统一日志输出规范有如下好处：
（1）磁盘利用率更高。
（2）可以解决业务链跟踪问题，让交易链路清晰可见。
（3）可以快速关联跨系统交易，辅助进行快速故障定位。
（4）人员流动过程中的交接成本更低。
## 2.6 日志归档
根据网络安全等级保护要求，日志需要留储6个月以上，个别行业如证券业的部分数据需要永久留存。因此，需要根据不同数据特性和要求对日志数据进行区别化管理，同时要考量数据时间价值评估及存储成本。日志归档应满足以下要求：
（1）可对日志设置冷、热数据索引。
（2）可通过不同标签进行归档日志的生命周期管理。
（3）归档日志应具备压缩功能。
（4）归档日志应支持快速找回及恢复。
（5）归档日志应支持多路径存储。
（6）可自动删除超期归档日志。
第3章 日志管理与分析系统
>  日志管理与分析系统的基本功能
>
>  日志管理与分析系统技术选型
>
>  小结
运维人员在工作中经常遇到以下情况：
（1）日志太多，太过分散，查看起来不方便。
（2）程序采用分布式系统，出现问题的日志不知道在哪台机器上，需要登录每台机器使用命令查看。
（3）如果想要统计某个字段的数据，需要登录每台机器统计一遍，然后将所有数据相加求和。
（4）很难对日志数据进行多维度的关联分析。
（5）因为数据分散在不同的地方，所以做统计性告警比较困难。
（6）运维人员直接登录生产机器查看日志，容易发生误操作，风险较高。
（7）生产磁盘较小，但日志较多且需要保存的时间较长。
上述情况往往是没有将日志集中存放而造成的，解决方案就是把所有日志集中存放、统一管理，这就需要日志管理与分析系统。本章将简单介绍日志管理与分析系统的基本功能，后续章节将对其中的部分功能及实现原理进行详细介绍。
## 3.1 日志管理与分析系统的基本功能
### 3.1.1 日志采集
日志采集一般有两种模式：日志推送和日志拉取。
在生产环境中，一般采用日志推送模式，即在日志产生端部署一个Agent（日志采集代理程序），由Agent发送数据。这种做法的好处是能够最大限度地控制采集过程。例如，当网络带宽比较小时，为了防止日志传输占用生产环境的大量带宽，可以对日志采集进行限速处理；如果需要节省流量，还可以通过Agent进行压缩发送，一次性发送更多的数据等。
日志拉取模式在生产环境中很少采用。前文提到的发送过程中各种额外的限制操作很难在拉取模式下实现。此外，以下两类棘手问题在拉取模式下也很难找到有效的解决方案。
（1）深层次目录下的大量小文件。
（2）日志轮转问题。
### 3.1.2 数据清洗
日志数据本质上是字符串，字符串通常需要经过预处理才能从中分析出有用结果。数据清洗就是将字符串按照一定的规则处理成结构化数据的过程，这样能使后面的数据分析更加容易。
数据清洗不只是数据修剪，有时也需要增加额外的数据来进行标识。例如，可以在数据清洗过程中增加所在的主机环境、主机负责人、业务系统等数据，为后续的精细化分析做准备。
### 3.1.3 日志存储
对日志数据进行清洗之后，下一步就是日志存储，即将日志按照一定的规则进行存储，以便在搜索时能够非常迅速地给出结果。日志存储需要选择存储引擎。常见的开源技术方案有HBase和Elasticsearch。
HBase是基于RowKey的列簇存储引擎，自身不支持二级索引，查询和聚合均基于RowKey，所以在无法使用RowKey的情况下会变为全表扫描，导致效率降低。HBase组件较多，存储大量数据时可以考虑使用HBase，但其响应速度非常慢。
Elasticsearch是基于Apache
Lucene的分布式文档存储、文本查询引擎，其采用了倒排索引、FST（Finite
State
Transducers）等设计思想，维护起来也比较方便。目前市场上最常见的日志分析开源方案ELK中的"E"就是指Elasticsearch。它可以通过分片的方式进行线性横向扩展，也支持大量数据存储。
### 3.1.4 日志告警
日志告警是日志管理与分析系统的重要功能之一，可以帮助运维人员监控数据。日志告警是指按预设计划周期性执行搜索语句，当监控数据结果满足触发条件时，就通过指定的告警方式及时通知运维人员。通用的告警方式是电子邮件，也有Syslog和HTTP转发、微信、短信等其他方式，可根据需要灵活选择。监控所需信息一般包括常规信息、告警类型、告警阈值和告警方式。
### 3.1.5 日志分析
经过数据清洗、日志存储流程，可以将非结构化数据存储为结构化数据。接下来，需要将这些结构化数据取出来进行分析。
例如，通过日志分析可以获取网站每类页面的PV（PageView，页面访问量）值、独立IP数（去重之后的IP数量）；稍微复杂一些的，可以计算得出用户所检索的关键词排行榜、用户停留时间最长的页面等；更复杂的分析还有构建广告点击模型、分析用户行为特征等。此外，还可以分析某个故障是应用程序问题还是主机或网络问题导致的。
### 3.1.6 日志可视化
在数据分析要求不高的情况下，输出一个类似Excel文件的数据表格即可。但是，随着技术进步及数据分析要求日益增加，BI报表应运而生。BI（Business
Intelligence）即商业智能，它是一个完整的解决方案，可以有效地集成企业现有数据，快速准确地生成报表，为企业决策提供依据。
日志可视化的目标类似于BI报表，即根据存储的数据（不仅仅是日志数据）进行关联绘图，实现实时多维分析、分析化建模等。这样做的好处是如果有问题，运维人员可以及时发现；如果没有问题，则无须持续关注。
### 3.1.7 日志智能分析
日志智能分析是指将机器学习和人工智能算法应用到日志分析中，常见的有KPI（Key
Performance
Indicator）异常检测、大数据智能分析、收敛和抑制告警、大数据智能预测故障、基于数据挖掘的故障诊断、应用性能预测及优化、智能安全态势感知、运维知识库智能检索回复，以及计算、存储、网络容量的预测等。KPI异常检测中的KPI指的是关键性能指标，一般包括服务KPI和机器KPI，服务KPI如网页响应时间、网页访问量、连接错误数量等，机器KPI如CPU利用率、内存利用率等。KPI存储形式为按时间排列的数列，也就是时间序列。
### 3.1.8 用户与权限管理
在一个日志管理与分析系统中，不同类型的数据往往由不同部门的不同人员进行管理，非本部门的人是无权查看数据的，甚至某些脱敏的数据连本部门初级人员也无权查看，这就需要鉴权这一必不可少的功能来支持。
用户ID常用邮箱或电话号码进行唯一匹配。权限一般分为数据权限和功能权限。数据权限是指对某类数据的操作权限，数据类型可以是日志数据，也可以是脱敏及检索等相关操作得到的结果。功能权限是指系统某项功能的使用权限，如能否创建告警等。为了便于管理，通常将多个权限的集合建立为角色，将人员分成不同用户组，并将角色和用户组进行关联。
### 3.1.9 系统管理
系统管理是日志管理与分析系统的重要功能之一。
思考下面这些场景：
（1）因为数据量很大，所以需要很多节点来运行系统。
（2）需要对系统所使用的资源进行监控。
（3）因为节点多，所以需要统一启停服务的功能。
（4）系统中程序太多，需要根据不同的程序、节点进行配置管理。
（5）系统出现Bug，需要进行修复。
（6）系统需要增加一个新功能。
遇到以上场景时，如果一台一台地登录主机来启停服务、修改配置、上传补丁包、更新系统，节点少时还可以，节点多了之后就会产生很大的工作量，而且这种工作完全依赖个人经验，稍有不慎就会造成系统宕机事故。
在这种情况下，如果有一个后台管理程序，专门负责日志管理与分析系统自身的运行与维护，上述所有操作都可在此后台管理程序上执行，那么对运维人员而言将是很大的解放。
## 3.2 日志管理与分析系统技术选型
### 3.2.1 日志分析的基本工具
Linux和UNIX操作系统内建了一些简单而强大的工具，可用来对日志进行分析。但是，这些工具无法对各种复杂的数据进行关联分析，而且遇到大批量数据时，其分析效率极低。
1\. grep