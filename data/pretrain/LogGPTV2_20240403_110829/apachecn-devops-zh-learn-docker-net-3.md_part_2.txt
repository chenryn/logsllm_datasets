 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0
 RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
#root@c1:/# ping -c 1 -q c2
PING c2.weave.local (10.160.0.1) 56(84) bytes of data.
--- c2.weave.local ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.317/1.317/1.317/0.000 ms
```
同样，在`$HOST2`启动的容器中，会生成以下输出:
```
#root@c2:/# ping -c 1 -q c1
PING c1.weave.local (10.128.0.3) 56(84) bytes of data.
--- c1.weave.local ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.658/1.658/1.658/0.000 ms
```
于是我们有了它——位于不同主机上的两个容器愉快地相互交谈。
# 打开虚拟开关
Docker 默认使用 Linux 桥`docker0`。然而，在某些情况下，可能需要**Open vsswitch**(**OVS**)来代替 Linux 桥。一个 Linux 桥只能处理 1024 个端口——这限制了 Docker 的可扩展性，因为我们只能创建 1024 个容器，每个容器都有一个网络接口。
## 单主机 OVS
我们现在将在单个主机上安装 OVS，创建两个容器，并将它们连接到 OVS 桥。
使用此命令安装 OVS:
```
# sudo apt-get install openvswitch-switch
```
使用以下工具安装`ovs-docker`实用程序:
```
# cd /usr/bin
# wget https://raw.githubusercontent.com/openvswitch/ovs/master/utilities/ovs-docker
# chmod a+rwx ovs-docker
```
下图显示了单主机 OVS:
![Single host OVS](img/00021.jpeg)
### 建造 OVS 大桥
在这里，我们将添加一个新的 OVS 桥并配置，这样我们就可以将容器连接到不同的网络上，如下所示:
```
# ovs-vsctl add-br ovs-br1
# ifconfig ovs-br1 173.16.1.1 netmask 255.255.255.0 up
```
使用以下步骤将端口从 OVS 桥添加到 Docker 容器:
1.  创建两个 Ubuntu Docker 容器:
    ```
    # docker run -I -t --name container1 ubuntu /bin/bash
    # docekr run -I -t --name container2 ubuntu /bin/bash
    ```
2.  将容器连接到 OVS 大桥:
    ```
    # ovs-docker add-port ovs-br1 eth1 container1 --ipaddress=173.16.1.2/24
    # ovs-docker add-port ovs-br1 eth1 container2 --ipaddress=173.16.1.3/24
    ```
3.  Test the connection between the two containers connected via an OVS bridge using the `ping` command. First, find out their IP addresses:
    ```
    # docker exec container1 ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:ac:10:11:02
     inet addr:172.16.17.2  Bcast:0.0.0.0  Mask:255.255.255.0
     inet6 addr: fe80::42:acff:fe10:1102/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1472  Metric:1
     RX packets:36 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:4956 (4.9 KB)  TX bytes:648 (648.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    # docker exec container2 ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:ac:10:11:03
     inet addr:172.16.17.3  Bcast:0.0.0.0  Mask:255.255.255.0
     inet6 addr: fe80::42:acff:fe10:1103/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1472  Metric:1
     RX packets:27 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:4201 (4.2 KB)  TX bytes:648 (648.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
    现在知道了`container1`和`container2`的 IP 地址，我们可以 ping 通它们:
    ```
    # docker exec container2 ping 172.16.17.2
    PING 172.16.17.2 (172.16.17.2) 56(84) bytes of data.
    64 bytes from 172.16.17.2: icmp_seq=1 ttl=64 time=0.257 ms
    64 bytes from 172.16.17.2: icmp_seq=2 ttl=64 time=0.048 ms
    64 bytes from 172.16.17.2: icmp_seq=3 ttl=64 time=0.052 ms
    # docker exec container1 ping 172.16.17.2
    PING 172.16.17.2 (172.16.17.2) 56(84) bytes of data.
    64 bytes from 172.16.17.2: icmp_seq=1 ttl=64 time=0.060 ms
    64 bytes from 172.16.17.2: icmp_seq=2 ttl=64 time=0.035 ms
    64 bytes from 172.16.17.2: icmp_seq=3 ttl=64 time=0.031 ms
    ```
## 多宿主 OVS
让我们看看如何使用 OVS 连接多个主机上的 Docker 容器。
让我们考虑如下图所示的设置，它包含两台主机，**主机 1** 和**主机 2** ，运行 Ubuntu 14.04:
![Multiple host OVS](img/00022.jpeg)
在两台主机上安装 Docker 并打开 vSwitch:
```
# wget -qO- https://get.docker.com/ | sh
# sudo apt-get install openvswitch-switch
```
安装`ovs-docker`实用程序:
```
# cd /usr/bin
# wget https://raw.githubusercontent.com/openvswitch/ovs/master/utilities/ovs-docker
# chmod a+rwx ovs-docker
```
默认情况下，Docker 选择一个随机网络来运行其容器。它创建一个网桥`docker0`，并为其分配一个 IP 地址(`172.17.42.1`)。因此，**主机 1** 和**主机 2** `docker0`的网桥 IP 地址是相同的，因此两台主机中的容器很难通信。为了克服这一点，让我们为网络分配静态 IP 地址，即`192.168.10.0/24`。
让我们看看如何更改默认的 Docker 子网。
在主机 1 上执行以下命令:
```
# service docker stop
# ip link set dev docker0 down
# ip addr del 172.17.42.1/16 dev docker0
# ip addr add 192.168.10.1/24 dev docker0
# ip link set dev docker0 up
# ip addr show docker0
# service docker start
```
添加`br0` OVS 大桥:
```
# ovs-vsctl add-br br0
```
创建到另一台主机的通道并将其连接到:
```
# add-port br0 gre0 -- set interface gre0 type=gre options:remote_ip=30.30.30.8
```
将`br0`桥添加到`docker0`桥:
```
# brctl addif docker0 br0
```
在主机 2 上执行以下命令:
```
# service docker stop
# iptables -t nat -F POSTROUTING
# ip link set dev docker0 down
# ip addr del 172.17.42.1/16 dev docker0
# ip addr add 192.168.10.2/24 dev docker0
# ip link set dev docker0 up
# ip addr show docker0
# service docker start
```
添加`br0` OVS 大桥:
```
# ip link set br0 up
# ovs-vsctl add-br br0
```
创建到另一台主机的隧道，并将其连接到:
```
# br0 bridge ovs-vsctl add-port br0 gre0 -- set interface gre0 type=gre options:remote_ip=30.30.30.7
```