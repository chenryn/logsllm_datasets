### Configure LKCD and Prepare the System for the Next Crash

#### Process Overview
1. **Document Configuration**: Ensure all necessary system configurations are documented.
2. **Boot Linux**: Start the Linux operating system.
3. **Save System Memory to Swap Disk**: In the event of a crash, the system memory is saved to a temporary disk location (dump device).
4. **Auto-Reboot**: The system is automatically rebooted, either by a crash handler or a watchdog hardware monitor. The saved memory image is then moved to the dump directory.
5. **Continue Experiments**: The process continues with the injection of the next error.

**Figure 3: Automated Process of Injecting Errors**
- An error is injected through the kernel injection module when the target instruction is executed.
- In case of a crash:
  1. The system memory is copied to a temporary disk location (dump device).
  2. Linux is booted by the crash handler or a watchdog hardware monitor, and the memory image is moved to the dump directory.
  3. The experiments continue with the injection of the next error.
- The system reboots after each error injection if the target instruction is activated. If the target instruction is not activated, the experiment proceeds without rebooting.

### Crash Handler
The core component of the Linux injector is the crash handler, which invokes the crash dump function of LKCD to save the kernel image at the time of a crash. Embedding the crash handler in strategic locations in the kernel allows for the collection of crucial information to differentiate between various types of crashes and hangs, such as kernel panic, divide by zero error, overflow, bounds check, invalid opcode, coprocessor segment overrun, segment not present, stack exception, general protection fault, and page fault.

### Error Model
The error model assumed in this study involves errors that affect the correct execution of an instruction by the processor. These errors can originate from the disk, network, bus, memory, or cache. Single-bit errors are injected to impact the instructions of the target kernel functions. Previous research indicates that most (90-99%) device-level transients can be modeled as logic-level, single-bit errors. Four attributes characterize each error injected:
- **Trigger (When?)**: An error is injected when a target instruction in a given kernel function is reached, invoked by executing a user-level workload (benchmark) program.
- **Location (Where?)**: Error locations are pre-selected based on the profiling of kernel functions, focusing on the most frequently used kernel functions to achieve a high error activation rate.
- **Type (What?)**: One single-bit error per byte of an instruction binary is injected.
- **Duration (How Long?)**: An injected error persists throughout the execution time of the benchmark program.

### Outcomes, Measures, and Experiment Setup
Outcomes from error injection experiments are classified according to the categories in Table 3.

**Crash Latency**
- **Definition**: The interval between the time an error is injected and the time the error manifests (system crashes).
- **Measurement**: The current value of the performance counter is recorded at the end of the error injection routine and subtracted from the value at the time of error manifestation (recorded by the crash handler). Additional measurements are conducted to account for the switching time between routines.

**Error Propagation**
- Errors injected and activated in one kernel subsystem may propagate to another, causing the system to crash. Analyzing error propagation patterns is valuable as the kernel is divided into several interacting modules.

**Summary of Experiment Setup**
- **Table 2: Experimental Setup Summary**
  - **Hardware Platform**: Linux OS
  - **Supporting Tools**: LKCD, Crash Dump, Kernel Profiling
  - **Kernel Version**: 2.4.18
  - **System Configuration**: Intel Pentium 4, 2.6 GHz, 1 GB RAM
  - **Benchmark Programs**: Various user-level workloads

### Outcome Categories
- **Activated**: The corrupted instruction is executed.
- **Not Manifested**: The corrupted instruction is executed but does not cause a visible abnormal impact on the system.
- **Fail Silence Violation**: The operating system or application erroneously detects the presence of an error or allows incorrect data/response to propagate.
- **Crash**: The operating system stops working, e.g., bad trap or system panic.
- **Hang**: System resources are exhausted, resulting in a non-operational system, e.g., deadlock.
- **Other Failures**: Unable to handle kernel NULL pointer dereference, page request, out of memory, general protection fault, kernel panic, invalid opcode, divide error, init3, bounds, invalid TSS, overflow.

### Experimental Results
This section presents results from error injection experiments on selected kernel functions while running benchmark programs. Three types of error injection campaigns are conducted:

- **Campaign A**: Random injections to non-branch instructions.
- **Campaign B**: Conditional branch instructions only are targeted.
- **Campaign C**: Impact of reversing the logic of conditional branch instructions.

**Table 4: Definition of Fault Injection Campaigns**
- **Campaign Name**: Target Instructions, Target Bit
- **A – Any Random Error**: All non-branch instructions, random bit in each byte.
- **B – Random Branch Error**: All conditional branch instructions, random bit in each byte.
- **C – Valid but Incorrect Branch**: All conditional branch instructions, bit that reverses the condition.

**Statistics on Error Activation and Failure Distributions**
- **Figure 4**: Summarizes the results of the three error injection campaigns, providing statistics on outcome categories and overall error distributions.
- **Major Findings**:
  - A significant percentage (35-65%) of injected errors are not activated, i.e., the corrupted instruction is not executed.
  - The number of functions injected varies across campaigns, ensuring sufficient data for valid statistical analysis.

For detailed tables and figures, refer to the original document.