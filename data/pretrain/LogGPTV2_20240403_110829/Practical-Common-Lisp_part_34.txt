路径名如何表示文件名
个
149
---
## Page 167
所有其他组件都与变量input-file中的路径名相同：
他参数指定的任何组件的值。例如，下面的表达式创建了一个带有.html扩展名的路径名，同时
数:defaults来构造一个新路径名。你可以为该参数提供一个路径名描述符，它将提供没有被其
那么它在一些实现里将是正确的而在其他实现里则不是。
而其他一些实现则将它保存在主机组件中。如果你将代码写成这样
异。例如，前面已经提到过，某些基于Windows的Lisp实现会将驱动器字母保存在设备组件中，
/Users/。
/home/peter/foo.txt对于Mac OS X来说就不是一个好的文件名，因为在那里/home/被称为
以保护你免于使用不可移植的文件名语法，文件名也可能以其他方式不可移植。例如，文件名
字参数并返回一个路径名，任何提供了的组件都被填入其中而其余的为NIL。
14.8构造新路径名
成一个本地目录名，而FILE-NAMESTRING则组合名字和类型组件。?
FILE-NAMESTRING返回一个部分名字字符串。DIRECTORY-NAMESTRING将目录组件的元素组合
其接受一个路径名描述符并返回一个名字字符串。其他两个函数DIRECTORY-NAMESTRING和
数据在操作系统之间不一定可移植。
许你打印并且读回含有路径名对象的S-表达式，但由于其语法取决于名字字符串解析算法，这些
150
②主机组件可能不是默认为NIL，但如果不是的话，它将是一个不透明的由实现定义的值。
①由FILE-NAMESTRING返回的名字在支持版本的文件系统上也含有版本组件。
与其用手工生成路径名，不如基于一个已有的路径名使用MAKE-PATHNAME的关键字参
不过，如果你希望程序是可移植的，你不会想要完全用手工生成路径名：就算路径名抽象可
为了将一个路径名转化回一个名字字符串，例如，为了呈现给用户，你可以使用函数NAMESTRING,
和许多其他内置对象一样，路径名也有其自身的读取语法：#p后接一个双引号字符串。这允
(make-pathname :type "html" :defaults input-file)
(make-pathname :device "c" :directory '(:absolute "foo" "bar") :name "baz")
你可以使用MAKE-PATHNAME函数来构造任意路径名。它对每个路径名组件都接受一个关键
(make-pathname
(file-namestring #p"/foo/bar/baz.txt")
(namestring #p"/foo/bar/baz.txt")
(pathname "/foo/bar/baz.txt") → #p"/foo/bar/baz.txt" 
:type "txt") → #p"/foo/bar/baz.txt"
:directory
第14章文件和文件I/O
'(:absolute "foo" "bar")
www.TopSage.com
foo/bar/baz.txt")
→ "baz.txt"
→ "/foo/bar/baz.txt"
---
## Page 168
不同根目录中的路径名。
NAMESTRING，这很有用。
指定的组件非常相似。不过，MERGE-PATHNAMES会特别对待目录组件：如果第一个组件名的目
的目录组件。例如，假设有一个诸如#p"foo/bar.html"的相对路径名，你想将它与一个诸如
是否可能会有任何目录组件。例如：
是健壮的，无论文件名是否带有驱动器字母或是它被保存在路径名的哪个组件上。
文件。例如，假设有一个只有名称和类型的路径名：
录。这样：
路径名中的任何NIL组件，这和MAKE-PATHNAME使用来自：defaultS参数的组件来填充任何未
况下，MAKE-PATHNAME将无法处理。相反，你需要的是MERGE-PATHNAMES。
#p"/www/html/"这样的绝对路径名组合起来得到#p"/www/html/foo/bar.html"。在这种情
MERGE-PATHNAMES接受两个路径名并合并它们，用来自第二个路径名的对应值填充第一个
①对于完全最大化的可移植性，你真的应该写成这样：
MERGE-PATHNAMES也被用来实际访问文件系统中标准函数内部用于填充不完全的路径名的
但有时你会想要通过合并两个路径名的目录组件来组合两个路径名，其中至少一个带有相对
不过，这会创建出一种整个目录组件是相对目录backups/的路径名，而不管input-file
 假设input-file中的值是一个用户提供的名字，这一代码对于操作系统和实现的区别来说
随后可以组合ENOUGH-NAMESTRING和MERGE-PATHNAMES来创建一个表达相同名字但却在
(enough-namestring #p"/www/html/foo/bar.html" #p"/www/") → "html/foo/bar.html" 
为了反转这一过程以便获得一个相对于特定根目录的文件名，你可以使用函数ENOUGH-
第二个路径名也可以是相对的，在这种情况下得到的路径名也将是相对的：
(merge-pathnames #p"foo/bar.html" #p"/www/html/") →> #p"/www/html/foo/bar.html"
你可以使用相同的技术来创建一个带有不同目录组件的路径名：
(merge-pathnames 
(merge-pathnames #p"foo/bar.html" #p"html/") → #p"html/foo/bar.html"
号。在没有文件版本的实现上，：version参数会被忽略。如果你比较在意可移植性，最好加上它。
这可能不是正确的行为一
没有：version参数的话，在一个带有内置版本支持的文件系统上，输出的路径名将继承来自输人文件的版本号，
 #p"/www-backups/") → #p"/www-backups/html/foo/bar/baz.html'
(enough-namestring #p"/www/html/foo/bar/baz.html" #p"/www/")
"x'z/saa#  (ax'z/1/oo/ d# 901:
:type
"html"
www.TopSage.com
ion
:newest :defaults input-file)
14.8构造新路径名
---
## Page 169
文件。
的函数，它将一个路径名转化成目录形式。使用该函数，你可以放心地在用户给出的目录里保存
组件中。在下一章我将讨论的路径名可移植库中，你将编写一个称为pathname-as-αirectory
来传递，那么最后你将把文件保存成/home/foo.txt而不是你想要的/home/peter/foo.txt,
参数，像这样
存文件的目录而他们输入了"/home/peter"。如果你将该值作为MARE-PATHNAME的:defaults
不能依赖于用户提供的名字字符串必须是以一种或另一种形式。例如，假设提示用户输入一个保
加小心。当前所有实现都创建文件形式的路径名，除非名字字符串以一个路径分隔符结尾。但你
是一个目录，那么下面两个路径名都可以命名它：
form）将名字中的所有元素都放在目录组件中，而留下名称和类型组件为NIL。如果/foo/bar/
将名字字符串中的最后一个元素放在名称和类型组件中。另一种表示方法，目录形式（directory
路径名表示方法。
和Windows却将目录视为另一种类型的文件。这样，在这些系统里，每一个目录都有两种不同的
14.9
home/peter/"，那么将得到下面的结果：
PATHNAME-DEFAULTS*的值进行合并。例如，如果*DEFAULT-PATHNAME-DEFAULTS*是#p"/
带有适当的值。如果只有一个参数被调用，MERGE-PATHNAMES将把该参数与*DEFAULT-
定，通常是一个路径名，其目录组件表示Lisp启动时所在的目录，如果需要，主机和设备组件也
*DEFAULT-PATHNAME-DEFAULTS*中的值来获得缺失组件的值。该变量的初始值由具体实现决
将路径名转化成一个实际文件名之前被填充进去。Common Lisp将通过合并给定路径名与变量
152
一种表示方法，我将它称为文件形式（fle form），将目录当成像其他任何文件一样来对待，
(make-pathname :name "foo" :type "txt" :defaults user-supplied-name)
用MAKE-PATHNAME创建路径名时，你可以控制得到的形式，但需要在处理名字字符串时多
当处理命名目录的路径名时，你需要注意一点。路径名将目录和名称组件区分开，但Unix
如果想用这个路径名作为OPEN的一个参数，那么缺失的组件（诸如目录）就必须在Lisp可以
(make-pat hname
(merge-pathnames #p"foo.txt") → #p"/home/peter/foo.txt"
"ax'ooyad# ← ("ax： ad<: "oo aweu: aweuuaed-ayeu) 
(make-pathname 
:name "foo" :type "txt" :defaults (pathname-as-directory user-supplied-name))
目录名的两种表示方法
第14章文件和文件IO
:directory
！(.req： aweu: (aoog. antosqe:):
www.TopSage.com
file form
---
## Page 170
回文件上次被写入的时间，表示形式是自从格林尼治标准时间（GMT）1900年1月1日午夜起的
录的最后一级子目录将不会被创建。
这使得它易于内联使用。
现之间的区别却使得它难以可移植地使用。在下一章里，你将定义一个list-directory函数来
它不但可以测试目录是否存在，还可以告诉你一个给定的名字究竟是文件名还是目录名。
规文件或目录而存在。在下一章里，你将把PROBE-FILE包装在一个新函数file-exists-p中，
否存在。同样，CommonLisp也不支持用一种可移植的方式来测试一个给定文件是否作为一个正
PROBE-FILE将返回该文件的真实名称（truename），一个进行了诸如解析符号链接这类文件系统
文件系统中，你可以使用函数PROBE-FILE。如果由路径名描述符命名的文件存在，那么
来消除那些不可移植因素中的一部分。
并且指出其中哪些是在实现之间存在不可移植性的。在下一章里，你将开发一个路径名可移植库
统上的，从而给实现者们留下了充分的余地。
苦的地方：因为语言标准并没有指定那些与文件系统交互的函数是如何映射到任何特定的文件系
谁拥有它、它在何时被最后修改以及它的长度。这就是由路径名抽象所带来的通用性开始造成痛
是否存在，列出一个目录的内容，删除和重命名文件，创建目录以及获取一个文件的信息，诸如
14.10与文件系统交互
保目录组件中的所有元素存在并且是目录，如果必要的话它会创建它们。它返回被传递的路径名，
除所命名的文件，当其成功时返回真。否则它产生一个FILE-ERROR报错。
消除这些区别。
层面转换的路径名。否则它返回NIL。不过，并非所有实现都支持使用该函数来测试一个目录是
DELETE-FILE和RENAME-FILE的功能恰如其名。DELETE-FILE接受一个路径名描述符并删
为了测试一个对应于某个路径名描述符（路径名、名字字符串或文件流）的文件是否存在于
函数FILE-WRITE-DATE和FILE-AUTHOR都接受一个路径名描述符。FILE-WRITE-DATE返
类似地，用于列出文件系统中文件的标准函数DIRECTORY对于简单的情形工作得很好，但实
①更多关于错误处理的内容请参见第19章。
这就是说，多数与文件系统进行交互的函数仍然是相当直接的。我将在这里讨论标准函数
注意如果你传给ENSURE-DIRECTORIES-EXIST一个目录名，它应该是目录形式的，否则目
你可以使用函数ENSURE-DIRECTORIES-EXIST来创建目录。它接受一个路径名描述符并确
通常，与文件系统的多数交互可能是用OPEN打开文件来读写。你偶尔也需要测试一个文件
(with-open-file(out(ensure-directories-exist name):direction:output)
www.TopSage.com
---
## Page 171
中数据应被读取的区域，然后返回一个可被传递到任何诸如READ-CHAR、READ-LINE或READ这
MAKE-STRING-INPUT-STREAM和MAKE-STRING-OUTPUT-STREAM来创建STRING-STREAM.
函数。例如，你可以使用STRING-STREAM从一个字符串中读取或写入数据，你可以使用函数
14.11
回的一个值。
杂。当你需要在一个文本数据的文件中做跳转时，最可靠的方法就是只为两参数版本的
件中的字节偏移量。尽管如此，因为字符编码因素的存在，对于字符流来说事情变得有一点儿复
处，而一个整数将使流的位置移动到文件中指定的位置上。对于二进制流来说，这个位置就是文
是关键字：start、：end或者非负的整数。两个关键字可以将流的位置设置到文件的开始或结尾
和位置描述符）来调用该函数时，它将该流的位置设置到所描述的位置上。这个位置描述符必须
它时，该函数返回文件中的当前位置，即已经被读取或写入该流的元素的数量。当以两个参数（流
一行为，因此为了得到可预测的结果，获得一个文件长度的最佳方式是使用一个二进制流。?
的，甚至当FILE-LENGTH被传递了一个字符流时情况也是如此。不过，标准并没有强制要求这
信息（除了实际读取整个文件来测量它以外）只有以字节为单位的长度，这也是多数实现所返回
型意义下的长度。尽管如此，由于在当今大多数操作系统上关于一个文件的长度唯一可以得到的
接受一个流而不是一个路径名作为参数。在理论上，这允许FILE-LENGTH返回在该流的元素类
秒数，而FILE-AUTHOR在Unix和Windows上返回该文件的拥有者。
MAKE-STRING-INPUT-STREAM接受一个字符串以及可选的开始和结尾指示符来鉴定字符串
154
② 就算在你没有使用多字节字符编码时，一个文件中字节和字符的数量也可能是不同的。因为字符流也会将平台相
① 对于需要访问特定操作系统或文件系统上其他文件属性的应用来说，第三方库提供了对底层C系统调用的绑定。
 除了文件流以外，Common Lisp还支持其他类型的流，它们也可被用于各种读、写和打印I/O
为了知道一个文件的长度，你可以使用函数FILE-LENGTH。出于历史原因，FILE-LENGTH
一个同样接受打开的文件流作为参数的相关函数是FILE-POSITION。当只用一个流来调用
(with-open-file (in filename :element-type :(unsigned-byte 8))
(with-open-file (in filename)
或者可能是如下更高效的代码：
(with-open-file (in filename)
于字节的数量。如果你真想知道文件中字符的数量，你不得不亲自数一下并书写类似下面这样的代码：
关的行结束符转化成单一的#\Newline字符，在Windows上（其中使用CRLF作为行结束符），字符的数量通常小
上的简单API，该库应当可以运行在POSIX操作系统的多数CommonLisp上。
(file-length in))
(((9605 61as-y4) 15s)) a)
(loop while (read-char in nil) count t))
其他 I/O 类型
第14章文件和文件IO
while (plusp read) sum read))}
(read-sequence
www.TopSage.com
scratch in)
---
## Page 172
方的一个副本。
之外，ECHO-STREAM本质上以相同的方式工作。这样，ECHO-STREAM中的输出流将含有会话双
写入将把数据发送到底层的输出流上。除了所有从底层输入流中读取的数据也被回显到输出流中
输出流，并返回一个适当类型的可同时用于输入和输出函数的流。
的构造函数MAKE-TWO-WAY-STREAM和MAKE-ECHO-STREAM都接受两个参数，一个输入流和一个
的输人流作为参数。
可以使用函数MAKE-CONCATENATED-STREAM来构造CONCATENATED-STREAM，其接受任何数量
是一个输入流，它从一组输入流中接收其输入，在每个流的结尾处它从一个流移动到另一个。你
些流是它的构造函数MAKE-BROADCAST-STREAM的参数。?与之相反的，CONCATENATED-STREAM
在一起。BROADCAST-STREAM是一个输出流，它将向其写入的任何数据发送到一组输出流上，这
GET-OUTPUT-STREAM-STRING返回的值。
上，然后执行它的主体。在所有主体形式都被执行以后，WITH-OUTPUT-TO-STRING返回由
例如，与其使用LET形式并带有显式的UNWIND-PROTECT，你可以这样来写。