title:Beyond Pattern Matching: A Concurrency Model for Stateful Deep Packet
Inspection
author:Lorenzo De Carli and
Robin Sommer and
Somesh Jha
Beyond Pattern Matching: A Concurrency Model
for Stateful Deep Packet Inspection
Lorenzo De Carli
Dept. of Computer Sciences
Univ. of Wisconsin, Madison
PI:EMAIL
Robin Sommer
ICSI / LBNL
Berkeley, CA, USA
PI:EMAIL
Somesh Jha
Dept. of Computer Sciences
Univ. of Wisconsin, Madison
PI:EMAIL
ABSTRACT
The ever-increasing sophistication in network attacks, combined
with larger and larger volumes of trafﬁc, presents a dual challenge
to network intrusion detection systems (IDSs). On one hand, to take
advantage of modern multi-core processing platforms IDSs need to
support scalability, by distributing trafﬁc analysis across a large
number of processing units. On the other hand, such scalability
must not come at the cost of decreased effectiveness in attack detec-
tion. In this paper, we present a novel domain-speciﬁc concurrency
model that addresses this challenge by introducing the notion of
detection scope: a unit for partitioning network trafﬁc such that the
trafﬁc contained in each resulting "slice" is independent for detec-
tion purposes. The notion of scope enables IDSs to automatically
distribute trafﬁc processing, while ensuring that information neces-
sary to detect intrusions remains available to detector instances.We
show that for a large class of detection algorithms, scope can be au-
tomatically inferred via program analysis; and we present schedul-
ing algorithms that ensure safe, scope-aware processing of network
events. We evaluate our technique on a set of IDS analyses, show-
ing that our approach can indeed exploit the concurrency inherent
in network trafﬁc to provide signiﬁcant throughput improvements.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—Network monitoring; D.1.3 [Programming Techniques]:
Concurrent Programming—Parallel programming
Keywords
NIDS, Flexible intrusion detection, Scalable trafﬁc analysis
1.
INTRODUCTION
Effective network intrusion detection is becoming increasingly
difﬁcult. With the proliferation of connected devices and web-
based services, network bandwidths keep soaring, putting strin-
gent performance requirements on detectors that must sift in real-
time through large data volumes. Moreover, the nature of network
intrusion itself is evolving, driven by an emerging underground
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660361.
economy and the rise of resourceful, nation-level adversaries (“Ad-
vanced Persistent Threats” [18]). As attack strategies are shifting
from conceptually simple byte-level exploits to sophisticated, tai-
lored attacks operating deep inside the application layer, intrusion
detection systems (IDSs) need to adapt to remain effective and rele-
vant. In order to scale to larger volumes of trafﬁc, they must support
concurrency to take advantage of modern multi-core architectures.
Yet, at the same time, the increased complexity of attack strategies
requires ﬂexibility, as no one-size-ﬁts-all approach to detection will
prove effective against the modern arsenal of attack tools.
Unfortunately, there exists a fundamental tension between these
two objectives. Simple, static detection strategies bring predictable
data ﬂows and inter-thread communication, which allow to “hard-
code” efﬁcient parallelism into the IDS design. An example is sig-
nature matching: As signatures are commonly expressed on a per-
ﬂow basis, an IDS performing this operation can simply process
each connection independently. Yet, signature-based detection re-
mains limited in expressiveness, and can often be thwarted with
minor changes in the attack strategy—consider the fragility of the
early signatures for the Heartbleed bug [8], or the use of binary ob-
fuscation to make malware undetectable [7]. Avoiding such limita-
tions requires more complex strategies, including stateful protocol
analysis and correlation of events across multiple ﬂows. That com-
plexity, however, turns parallelization into a much harder problem.
The current state of mainstream IDSs reﬂects this tension. Suri-
cata [11] and Snort [10] support multi-threaded processing (the lat-
ter through a variety of different proposals, e.g., [43, 45, 48]), but
they remain limited to classic per-ﬂow signature matching. Other
related efforts in the literature [28, 44] rely on specialized hardware
and/or similarly hardcoded detection algorithms. To our knowl-
edge, Bro [6] represents the only IDS that offers complete ﬂexibil-
ity by design; it expresses detectors in a Turing-complete scripting
language. However, Bro remains single-threaded to this day.
Our work presents a step towards making intrusion detection
both parallel and ﬂexible. We propose a general concurrency model
for network trafﬁc analysis that can guide IDS architectures to-
wards parallel performance, independent from the underlying de-
tection strategy. To detach our model from the speciﬁcs of a de-
tector, we focus on generic data-level parallelism, as opposed to
process-level parallelism (e.g., pipelining) as that remains heav-
ily implementation-dependent. We observe that network trafﬁc is
in fact inherently parallel: typical 10 GE upstream links routinely
carry 100,000s of active ﬂows that reﬂect the communication of
mostly unrelated endpoints.
In other words, analyzing network
trafﬁc constitutes an almost “embarrassingly parallel” task [37].
However, while ﬂows generally proceed independently, most of
them also share a close semantic relationship with some of the other
ones—which an IDS must account for. Consider the activity that
Figure 1: Simple portscan detector
is part of the same user’s browsing session, or trafﬁc generated by
an attacker slowly scanning a target network for reconnaissance.
The latter may resemble a series of innocent requests, without any
recognizable ﬁngerprint, and the attack would manifest itself only
to a detector that maintains connection statistics for each possible
source over a long period of time. An IDS, hence, needs to sift
through a large number of ﬂows, mostly unrelated, while correlat-
ing the minuscule fraction that reveals the malicious activity.
We structure the remainder of the paper as follows: §2 develops
our concurrency model and the notion of scope; §3 discusses how
to generalize this notion to complex detection strategies. §4 dis-
cusses how to infer scope from IDS programs via static analysis,
and §5 formally deﬁnes a scope-aware event scheduler. §6 presents
experimental results, §7 discusses limitations of our approach, §8
presents related work, and §9 concludes the paper.
2.
IDS CONCURRENCY MODEL
Modern hardware architectures offer plenty of parallelism to ad-
dress scalability concerns [5, 9]. Unfortunately, current mainstream
IDSs either do not take advantage of these parallel platforms, or in
doing so restrict their capability to simple, hard-coded detection
strategies, thus limiting ﬂexibility.
Part of the problem is the lack of a clear deﬁnition of which
detection strategies a parallel IDS should support, and what should
be its concurrency model.
In our work, we approach this issue
by (i) inferring a domain-speciﬁc but ﬂexible model of how IDSs
process trafﬁc, and (ii) leveraging this model to deﬁne a practical
IDS concurrency model.
2.1 Reference IDS
Before discussing a concurrency model, it is important to deﬁne
the structure and capabilities of our IDS. For the purpose of our
work we use an abstract IDS model based on Bro, whose ﬂexible
structure ﬁts our goal of constraining analyses as little as possible.
The ﬁrst idea we mutuate from Bro is a clear architectural separa-
tion between ﬁxed, low-level packet processing tasks (“mechanism”)—
such as checksum veriﬁcation, stream reconstruction, protocol pars-
ing etc.—and the detection task proper (“policy”). Speciﬁcally, the
lower layer generates a stream of pre-digested events for the higher
layer to analyze.1
In order to achieve a fully parallel IDS, both
layers—low-level trafﬁc processing and high-level analysis—must
be parallelized. There is a signiﬁcant body of work showing that
low-level trafﬁc processing can be efﬁciently parallelized at con-
nection granularity. Relevant approaches include the NIDS clus-
ter [40], novel IDS proposals such as Kargus [40] and Midea [44],
and various efforts to parallelize Snort [43, 45, 48]. Taken to-
gether, these results enable us to conclude that low-level trafﬁc
processing—as well as intra-connection detection—can be efﬁciently
parallelized at connection granularity, scales well in practice, and
1Events can represent occurrences at all layers of the protocol
stack, thus not limiting detectors to a speciﬁc level of abstraction.
For devising a general concurrency model, we start from the ob-
servation that packet processing is by nature event-driven, with
events representing semantic units of protocol activity (e.g., the
establishment of a new session, or, at higher-level, an HTTP re-
quest). Events typically trigger a simple computation that often
accesses, and potentially modiﬁes, persistent data structures track-
ing the analysis’ current state. We ﬁnd this abstraction sufﬁciently
generic to encompass the semantics of all popular IDS applica-
tions. We then formalize the concepts of processing scope and
state: scope represents a unit for partitioning network trafﬁc such
that processing of each slice remains independent from the others,
and hence may proceed in parallel with them; and state refers to the
aggregate information that associates with computations operating
at a scope’s granularity. Consider a simple scan detector, counting
connection attempts by source: it operates with a scope of “source
IP address”, and its state comprises the table that maps addresses to
counter values. As each counter depends solely on the activity of
the associated source address, we can “slice” both computation and
state at the scope-level (i.e., IP addresses) to parallelize the detector
without further inter-thread communication.
From the perspective of this model, signature-based IDSs tend
to have a single program-wide scope (e.g., ﬂows in Suricata) and
hence enable deploying a speciﬁc hard-coded slicing strategy (e.g.,
per-ﬂow load-balancing). Once we allow for more complex anal-
ysis paradigms, on the other hand, it becomes impossible to iden-
tify just a single scope and thus optimize the implementation ac-
cordingly. For example, in Bro every analysis script may structure
its processing differently, and hence require a separate scope. Our
work identiﬁes all relevant scopes statically at compile-time by us-
ing a novel application of program slicing (§4). We then use the
information to drive a dynamic thread scheduler at run-time.
To demonstrate our approach we implement it inside a generic
IDS middle-layer platform that provides a set of domain-speciﬁc
programming constructs for expressing arbitrary network analysis
tasks. We ﬁnd this approach effective in achieving scalability (§6).
(b) void run_IDS() {   while ( p = read_packet() ) {     if ( p.SYN )       count_connections(p);   } } void count_connections(packet p) {   if (++counts[p.src] > THRESH)     report_host(p.src); } handler count_connections(connectionEvent c) {   lock_element(counts[c.src])   v = ++counts[c.src];   unlock_element(counts[c.src])   if ( v > THRESH )     report_host(c.src); } (a) handler count_connections(connectionEvent c) {   if (++counts[c.src] > THRESH)     report_host(c.src); } (c) void run_IDS() {   i = 0;   while ( p = read_packet() ) {     if ( p.SYN ) {       event c = new connectionEvent(p);       send_event(threads[i], c);       i = (i+1) % N; }}} void run_IDS() {   while ( p = read_packet() ) {     if ( p.SYN ) {       event c = new connectionEvent(p);       send_event(threads[c.src % N], c);     }   } } IDS LOGIC DETECTOR SINGLE-THREADED IDS CONCURRENT IDS (LOCK-BASED) CONCURRENT IDS (SCOPE-BASED) Figure 2: High-level IDS architecture
does not represent the main challenge for a distributed IDS. There-
fore we focus on parallelization of high-level, inter-connection events.
In this context, our IDS allows users to deﬁne detection strategies
as event handlers expressed in a Turing-complete domain-speciﬁc
language. This approach encompasses the semantics of virtually all
popular IDS platforms, enabling our concurrency model to retain
generality. For the purpose of this paper, we express analyses using
a C-like syntax with a few IDS-speciﬁc primitives and data types
(see Figures 1, 8).
2.2 Event-based Concurrency
A natural approach to parallelization is to distribute events to an
array of IDS threads. The difﬁculty here is that high-level intrusion
attempts (and related behaviors) are typically ﬁngerprinted by mul-
tiple correlated events. For example, consider the simple portscan
detector in Figure 1(a). The upper half of the ﬁgure describes the
event-generating logic (“IDS logic”), while the lower half describes
the detection algorithm. Albeit admittedly contrived, this program
adheres to our IDS model and works by correlating multiple con-
secutive events (connection attempts from a given host).
A strawman parallel version may look like the program in Fig-
ure 1(b). This implementation works by generating one event for
each new connection; events are fed to a pool of N identical threads
in round-robin for processing. This example illustrates a funda-
mental issue: most detectors—even very simple ones—maintain
a certain amount of state that is progressively updated as events
are processed. The main problem of our strawman implementation
is that events assigned to different threads are not independent—
different threads may end up processing events related to the same
source. Therefore, access to the state of the detector must be medi-
ated by locks (“lock_element()” in the example) to avoid data races.
Similar to conventional approaches for general-purpose programs,
the parallel behavior is hardcoded in the script, and data races are
avoided by using costly synchronization primitives. Moreover, the
program in Figure 1(b) will in general route multiple events from
the same source to different threads. This causes each thread to
perform a sequence of accesses with little or no memory locality; if
the amount of state kept by the detector is signiﬁcant, continuously
retrieving and updating unrelated pieces of state can severely ham-
per performance. Finally, this approach does not preserve ordering
of events. While this is irrelevant for our example, many real-world
IDS analyses (e.g., ones that correlate a sequence of malicious ac-
tions) are in fact sensitive to re-ordering.
A key insight about IDS analyses [30, 37] is that, even when no
particular constraints are imposed, they tend to naturally structure
themselves around independent units of processing—such as ﬂows,
hosts, subnets etc.—and to access little or no state outside their
unit of processing. For example, code that examines the content of
a particular ﬂow rarely requires access to information about other
ﬂows; and our example scan detector has no need for correlating
counters between sources. In other words, partitioning events by
unit of processing also partitions the detector state in independent
subsets. In the rest of this paper we refer to a unit of processing
and its related state as the scope of the detector. Also, we refer to
a concrete instantiation of a scope as a context (e.g., if the scope is
“connection”, a context is a concrete instantiation of the 5-tuple).
Our concurrency model requires a scope to be associated with
each analysis. Said scope deﬁnes a contract between an analysis
and the underlying IDS runtime, where the analysis “promises” to
only access state within its scope. In exchange the runtime provides
the following guarantee: all network events within the same context