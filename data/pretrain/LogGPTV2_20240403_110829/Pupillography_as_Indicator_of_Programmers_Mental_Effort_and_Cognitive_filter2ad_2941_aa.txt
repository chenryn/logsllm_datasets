title:Pupillography as Indicator of Programmers' Mental Effort and Cognitive
Overload
author:Ricardo Couceiro and
Gonçalo Duarte and
João Durães and
João Castelhano and
Catarina Duarte and
C&apos;esar A. D. Teixeira and
Miguel Castelo-Branco and
Paulo Carvalho and
Henrique Madeira
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Pupillography as indicator of programmers’ mental 
effort and cognitive overload 
Ricardo Couceiro  
CISUC, University of Coimbra 
ICNAS, University of Coimbra 
Coimbra, Portugal 
PI:EMAIL 
João Castelhano 
Coimbra, Portugal 
PI:EMAIL 
Miguel Castelo Branco 
Coimbra, Portugal 
PI:EMAIL 
ICNAS/CIBIT, University of Coimbra 
Gonçalo Duarte  
CISUC, University of Coimbra 
Coimbra, Portugal 
PI:EMAIL 
Catarina Duarte 
ICNAS, University of Coimbra 
Coimbra, Portugal 
PI:EMAIL 
Paulo de Carvalho 
CISUC, University of Coimbra 
Coimbra, Portugal 
PI:EMAIL 
João Durães 
CISUC, Polytechnic Institute of Coimbra 
CISUC, University of Coimbra 
Coimbra, Portugal 
PI:EMAIL 
Cesar Teixeira 
Coimbra, Portugal 
PI:EMAIL 
Henrique Madeira 
CISUC, University of Coimbra 
Coimbra, Portugal 
PI:EMAIL 
idea 
Abstract—Our  research  explores  a  recent  paradigm  called 
Biofeedback  Augmented  Software  Engineering  (BASE)  that 
introduces  a  strong  new  element  in  the  software  development 
process:  the  programmers’  biofeedback.  In  this  Practical 
Experience  Report  we  present  the  results  of  an  experiment  to 
evaluate  the  possibility  of  using  pupillography  to  gather 
biofeedback  from  the  programmers.  The 
is  to  use 
pupillography to get meta information about the programmers’ 
cognitive  and  emotional  states  (stress,  attention,  mental  effort 
level, cognitive overload,...) during code development to identify 
conditions  that  may  precipitate  programmers  making  bugs  or 
bugs escaping human attention, and tag the corresponding code 
locations  in  the  software  under  development  to  provide  online 
warnings  to the  programmer  or identify code snippets  that  will 
need more intensive testing. The experiments evaluate the use of 
pupillography  as  cognitive  load  predictor,  compare  the  results 
with the mental effort  perceived by  programmers  using  NASA-
TLX,  and  discuss  different  possibilities 
the  use  of 
pupillography as biofeedback sensor in real software development 
scenarios. 
for 
Keywords—  software  faults,  pupillography,  programmers’ 
biofeedback, mental effort, cognitive overload, human error. 
I. INTRODUCTION  
Software  development  is  (still)  a  human  intensive  task.  
Although  there  are  examples  of  automatic  generation  of 
executable code from high-level specifications (however, faults 
may  lie  in  the  specification  as  well),  most  of  the  software 
produced today results from an intensive human made process. 
And humans may fail while doing abstract and complex tasks 
such  as  requirement  elicitation,  functional  specification, 
software architecture design, and in particular code development 
and  testing.  Decades  of  advances  in  software  engineering 
methods have mitigated the problem of residual software faults 
(bugs), but the reality is that even when software is developed 
using  highly  demanding  and  mature  software  development 
processes, the deployed code  still has  a quite high density of 
bugs,  ranging  from  2  to  5  bugs  per  KLoC  [1,  2],  while  the 
“industry  average  is  about  15  to  50  errors  per  1000  lines  of 
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00069
638
delivered  code”  [3].  Knowing  the  current  trend  for  the 
overinflated size of software (e.g., the first version of Linux had 
17 KLoCs while the current version has more the 20 millions of 
LoC, a modern high end car has 100 millions of LoC, etc), we 
may say that bugs are there to stay, if not claiming that things 
are getting worse.  
to 
(according 
Field  studies  characterizing  in  detail  real  bugs  found  in 
deployed software are quite rare in the literature. But the few 
available  studies  show  an  impressive  similarity  of  bug  types 
classification 
the  Orthogonal  Defect 
Classification),    even  when  software  products  use  different 
software  development  methodologies,  different  programming 
languages and resulted from different technical cultures [4,5]. 
This  suggests  that  software  developers  tend  to  err  in  similar 
ways and originate a limited set of bug types. This observation 
concurs with recent cognitive taxonomy on human error causes 
for software defects [6, 7], which show that a relatively small 
number of cognitive human error modes can be traced as the 
primary cause of software defects [6]. 
If bugs have a causal link with a limited number of error-
prone  contexts  in  software  development,  as  suggested  by 
previous studies [4, 5, 6, 7], it should be possible to detect such 
error  prone  scenarios  and  use  such  information  to  improve 
software quality. This is precisely the idea of the Biofeedback 
Augmented  Software  Engineering  (BASE)  approach,  which 
introduces a strong new element in the software development 
process: the  programmers’  biofeedback  captured  by  wearable 
and  non-intrusive  sensors  that  monitor  Autonomic  Nervous 
System (ANS) physiologic manifestations. The goal is to detect 
signals  that  can  be  linked  to  error  prone  scenarios  related  to 
programmers’ cognitive and emotional states (stress, attention, 
mental  effort  level,  cognitive  overload,...),  as  established  by 
cognitive human error modes [6].  
This  paper  presents  experimental  results  evaluating  the 
possibility  of  using  pupillography  (i.e.,  the  rapid  changes  of 
pupil size) as an indicator of programmers’ mental effort and 
cognitive overload, which is related to some prevalent cognitive 
human error modes. The big advantage of pupillography is that 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:12:53 UTC from IEEE Xplore.  Restrictions apply. 
it  is  a  non-intrusive  method  that  is  fully  compatible  with 
traditional software development environments. Thus, it can be 
quickly adopted as one of the sensors for concrete Biofeedback 
Augmented  Software  Engineering 
implementations.  The 
experimental results show a clear mapping between the mental 
effort  measured  using  pupillography  and  both  the  software 
complexity  metrics  of the different code excerpts used  in the 
experiments and the subjective mental effort perceived by the 
programmers using NASA-TLX (Task Load Index)1. 
The next section presents the background of our research and 
related  work,  Section  III  describes  the  elements  of  the 
experiment and protocol, Section IV presents the methodology 
used in the data analysis, Section V presents and discusses the 
results,  Section  VI  discusses  future  work  and  utilization 
perspectives and Section VII concludes the paper. 
II. BACKGROUND AND RELATED WORK 
The emerging research area of software fault defense based 
on cognitive human error models and mechanisms has gained 
ground in recent years. It is rooted in human error theories and 
models  [8]  and  generally  adapts  human  error  models  and 
taxonomies  to  software  development  process  [6,  7],  with  the 
goal of defining defensive strategies or to improve specific steps 
such as requirements elicitation [9]. 
A  different  research  path  that  has  also  emerged  in  recent 
years  is  the  study  of  the  human  brain  mechanisms  behind 
software code comprehension using neuroscience approaches, 
particularly using heavy equipment such as functional magnetic 
resonance  imaging  (fMRI),  near  field  infrared  spectroscopy 
(fNIRS), and electroencephalography (EEG). In [10], working 
memory,  attention,  and 
language  processing  have  been 
identified as brain regions involved in code comprehension and 
in  the  identification  of  syntax  errors.  Another  study  [11] 
compared  code  and  natural-language  text  comprehension  to 
identify the brain mechanisms involved in each activity and [12] 
studied the mental execution of source code by programmers. 
Software bugs have been studied for the very first time in a 
recent  neuroscience  study  [13] 
that  reported  a  causal 
connectivity brain pattern associated to the “eureka” moment of 
bug intuition. This study also identified the distinct role for the 
insula in software bug monitoring and detection, as the insula 
activity  levels  were  critically  related  to  the  quality  of  bug 
detection,  showing  that  the  activity  in  this  salience  network 
region evoked by bug suspicion was predictive of bug detection 
accuracy. This was the first time a brain signal could be related 
with software skills on bug detection [13]. 
Obviously, brain signals predicting accurate bug detection,  
such as identified in [13], were obtained using fMRI scanners 
and  cannot  be  used 
in  practical  software  development 
environments. But these findings show a possible pathway for 
future establishment of reliable connections between software 
errors  at  the  fundamental  brain  level  and  physiological 
responses driven by the autonomic nervous system (ANS) that 
can  be  monitored  by  low  intrusive  sensors  compatible  with 
programmers’ code development  activities. 
In fact, there are many commercial wearable devices that can 
monitor  ANS  driven  response  such  as  heart  rate  variability 
(HRV), breathing rhythm and electrodermal activity (EDA), eye 
tracking  with  pupillography,  and  even  wearable  versions  of 
electroencephalography (EEG). However, physiological sensors 
are  very  sensitive  to  many  other  causes  of  physical  body 
response, 
totally  unrelated  to  the  software  development 
activities, and should be used with care as a single source of 
programmers’ biofeedback, at least while possible connections 
with deep brain mechanisms such as the ones reported in [13] 
are not available to be used as filter to remove ANS response not 
related to human errors 
A  very  recent  study  has  shown  that  HRV can  be  used as 
indicator of programmers’ mental effort and cognitive load [14]. 
HRV was also proposed to predict code quality and help guiding 
the testing effort [15]. Although HRV can be captured by low 
intrusive  sensors, pupillography  seems  to  be even  better  as it 
does not require any physical contact with the programmer or 
any change in the programming environment. This is exactly the 
target of our study, to evaluate whether pupillography can be 
used as indicator of programmers’ mental effort and cognitive 
load. 
The pupil is the opening in the center of the iris, a pigmented 
structure  that  contains  two  antagonistic  muscle  groups:  the 
sphincter  and  the  dilator  muscles  [16].  Receiving  input  from 
both parasympathetic and sympathetic components of the ANS, 
these  two  muscles  group  have  an  extensive  control  over  the 
pupil size (diameter), reflecting a dynamic equilibrium of the 
opposing  sympathetic  and  parasympathetic  activations  of  the 
ANS.  The  parasympathetic  excitation  (and/or  sympathetic 
inhibition) results in the dilation of the pupil, while sympathetic 
excitation (and/or parasympathetic inhibition) has the opposite 
effect, i.e. the constriction of the pupil [17].  
The  study  of  the  relationship  between  the  pupil  activity, 
attentional  effort  and  cognitive  processing  started  almost  6 
decades  ago  with  the  works  from  Hess  and  Polt  [18]  and 