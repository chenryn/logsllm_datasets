### 8.3 Basic Nets, Trace Languages, and Event Structures

Strand spaces can be easily transformed into event structures, as demonstrated in Section 8.1, which provides an event structure for each \(!\)-parallel process. However, without any restrictions, we can relate the net semantics to traditional independence models such as event structures and Mazurkiewicz trace languages. The key step in this construction is the elimination of persistent conditions from the net \( \text{Net}(p) \) of a closed process term \( p \), starting from an initial marking \( \text{Init}(p) \cup s \cup t \), to produce a basic net.

It is well-known how to "unfold" a basic net into a Mazurkiewicz trace language and an event structure. Assume that \( \text{Net}(p) \) has input events \( \text{In} \) and output events \( \text{Out} \). Then, we have the following theorem:

**Theorem 8.5.** There exists a basic net \( N \) with events
\[ E = \text{Out} \cup \{(*, e) \mid e \in \text{In} \text{ and } oe \subseteq t\} \cup \{(e_1, e) \mid e \in \text{In}, e_1 \in \text{Out}, \text{ and } oe = eo_1\} \]
such that the map \( \sigma : E \to \text{Out} \cup \text{In} \) leaves events in \( \text{Out} \) unchanged and projects pairs \( (*, e) \) and \( (e_1, e) \) to the component \( e \):

1. If \( N \) has a run with events \( e_1, \ldots, e_k \), then there is a run with events \( \sigma(e_1), \ldots, \sigma(e_k) \) in \( \text{Net}(p) \) from the initial marking \( \text{Init}(p) \cup s \cup t \).
2. If \( \text{Net}(p) \) has a run \( e_1, \ldots, e_k \) from the initial marking \( \text{Init}(p) \cup s \cup t \), then \( N \) has a run \( e'_1, \ldots, e'_k \) where \( e_1, \ldots, e_k = \sigma(e'_1), \ldots, \sigma(e'_k) \).

The construction used to obtain \( N \) is an example of eliminating colors from a colored net, as described in [14]. First, colors are introduced to the persistent conditions and input events of \( \text{Net}(p) \) to distinguish different ways they can occur, and then these colors are eliminated by splitting the conditions and events according to their colors. The result is a basic net. Its runs form a Mazurkiewicz trace language from which we can derive an event structure, as detailed in [15].

### 9. Concluding Remarks

The role of the SPL language is to support and relate different semantics useful in the analysis of security protocols, as demonstrated by several examples. Future goals include relating SPL to a probabilistic semantics, moving away from the perfect cryptography assumption, and studying what equivalences and compositional reasoning fit with the intensional event-based methods discussed here. We hope our work contributes to a more high-level analysis of security protocols. To this end, we see the net semantics of SPL as providing a potentially useful, concrete model theory for logics for security protocols. The net runs serve as histories on which to interpret security properties, perhaps expressed in the style of BAN logic. Additionally, Petri nets form models of linear logic [5], which seems close to the linear logic for security protocols based on multiset rewriting [2]. As suggested by an anonymous referee, the expressiveness of SPL could be useful in characterizing natural classes of protocols with decidable security properties.

### Acknowledgements

We are grateful to Stewart Lee and an anonymous referee for their suggestions and encouragement. GW thanks Martín Abadi for a timely overview of approaches to security protocols during their visit to Microsoft Research, Cambridge.

### 10. References

[1] M. Abadi and A. Gordon. A calculus for cryptographic protocols: The Spi calculus. In 4th ACM CCS, 1997.
[2] I. Cervesato, N. A. Durgin, M. Kanovich, and A. Scedrov. Interpreting strands in linear logic. In FMCS'00, 2000.
[3] I. Cervesato, N. A. Durgin, P. D. Lincoln, J. C. Mitchell, and A. Scedrov. Relating strands and multiset rewriting for security protocol analysis. In 13th IEEE CSFW, 2000.
[4] D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Trans. on Inf. Theory, 2(29), 1983.
[5] U. Engberg and G. Winskel. Linear logic on Petri nets. In REX, a decade of concurrency, 1993, volume 803 of LNCS, 1994.
[6] G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In TACAS'96, volume 1055 of LNCS, 1996.
[7] R. Milner. Communicating and mobile systems: The π-calculus. Cambridge University Press, 1999.
[8] U. Montanari and F. Rossi. Contextual nets. Acta Informatica, (32), 1995.
[9] L. C. Paulson. Proving security protocols correct. In LICS, 14th Symp., July 1999.
[10] A. M. Pitts and I. Stark. Observable properties of higher order functions that dynamically create local names, or: What's new? In MFCS 18th Int. Symp., volume 711 of LNCS, 1993.
[11] R. L. Rivest, A. Shamir, and L. Adleman. A method for obtaining digital signatures and public-key cryptosystems. Comm. of the ACM, 21(2), 1978.
[12] J. Thayer, J. Herzog, and J. Guttman. Strand spaces: Why is a security protocol correct? In 1998 IEEE Symposium on Security and Privacy.
[13] G. Winskel. Event structures. In Advanced Course on Petri nets, volume 255 of LNCS, 1986.
[14] G. Winskel. Petri nets, algebras, morphisms, and compositionality. Inf. & Comput., 72, 1987.
[15] G. Winskel and M. Nielsen. Models for concurrency. In Handbook of Logic in Comp. Sci., volume 4, 1995.

### Appendix A: Petri Nets

#### A.1 General Petri Nets

A general Petri net (place-transition system) consists of:
- A set of conditions (or places), \( P \),
- A set of events (or transitions), \( T \),
- A precondition map \( \text{pre} \), which assigns to each \( t \in T \) a multiset \( \text{pre}(t) \) over \( P \),
- A postcondition map \( \text{post} \), which assigns to each \( t \in T \) an ∞-multiset \( \text{post}(t) \) over \( P \),
- A capacity function \( \text{Cap} \), which is an ∞-multiset over \( P \), assigning a nonnegative number or ∞ to each condition \( p \), bounding the multiplicity to which the condition can hold; a capacity of ∞ means the capacity is unbounded.

A state of a Petri net is a marking, an ∞-multiset \( M \) over \( P \) bounded by the capacity function, i.e., \( M \leq \text{Cap} \). A marking captures a notion of distributed, global state.

**Token Game for General Nets:**
Markings can change as events occur, precisely how being expressed by the transitions \( M \xrightarrow{t} M' \). For markings \( M \) and \( M' \) and \( t \in T \), define
\[ M \xrightarrow{t} M' \iff \text{pre}(t) \leq M \text{ and } M' = M - \text{pre}(t) + \text{post}(t). \]

An event \( t \) is said to have concession (or be enabled) at a marking \( M \) if its occurrence leads to a marking, i.e., if \( \text{pre}(t) \leq M \) and \( M - \text{pre}(t) + \text{post}(t) \leq \text{Cap} \).

There is a widely-used graphical notation for nets in which events are represented by squares, conditions by circles, and the pre- and postcondition maps by directed arcs carrying numbers or ∞ as weights. A marking is represented by the presence of tokens on a condition, the number of tokens representing the multiplicity to which the condition holds. When an event with concession occurs, tokens are removed from its preconditions and put on its postconditions with multiplicities according to the pre- and postcondition maps.

#### A.2 Basic Nets

We instantiate the definition of general Petri nets to an important case where all the multisets have multiplicities either 0 or 1, and so can be regarded as sets. In particular, we take the capacity function to assign 1 to every condition, so that markings become simply subsets of conditions.

A basic Petri net consists of:
- A set of conditions, \( B \),
- A set of events, \( E \),
- Two maps: a precondition map \( \text{pre} : E \to \text{Pow}(B) \), and a postcondition map \( \text{post} : E \to \text{Pow}(B) \). We write \( \text{pre}(e) \) for the preconditions and \( \text{post}(e) \) for the postconditions of \( e \in E \), and require \( \text{pre}(e) \cup \text{post}(e) \neq \emptyset \).

Now a marking consists of a subset of conditions, specifying those conditions which hold.

**Token Game for Basic Nets:**
For markings \( M, M' \subseteq B \) and event \( e \in E \), define
\[ M \xrightarrow{e} M' \iff \text{pre}(e) \subseteq M \text{ and } (M \setminus \text{pre}(e)) \cap \text{post}(e) = \emptyset \text{ and } M' = (M \setminus \text{pre}(e)) \cup \text{post}(e). \]

Property (1) expresses that the event \( e \) has concession at the marking \( M \). Property (2) expresses in terms of sets the marking that results from the occurrence of an event. An occurrence of the event ends the holding of its preconditions and begins the holding of its postconditions. (It is possible for a condition to be both a precondition and a postcondition of the same event, in which case the event is imagined to end the precondition before immediately restarting it.)

There is contact at a marking \( M \) when for some event \( e \),
\[ \text{pre}(e) \subseteq M \text{ and } (M \setminus \text{pre}(e)) \cap \text{post}(e) \neq \emptyset. \]

The occurrence of an event is blocked through conditions, which it should begin, already holding. Blocking through contact is consistent with the understanding that the occurrence of an event should end the holding of its preconditions and begin the holding of its postconditions; if the postconditions already hold and are not also preconditions of the event, then they cannot begin to hold on the occurrence of the event. Avoiding contact ensures the freshness of names in the semantics of name creation.

Basic nets are important because they are related to many other models of concurrent computation, particularly Mazurkiewicz trace languages (languages subject to trace equivalence determined by the independence of actions) and event structures (sets of events with extra relations of causality and conflict) - see [15].

#### A.3 Nets with Persistent Conditions

Sometimes, we need conditions that, once established, continue to hold and can be used repeatedly. If we use net events to represent rules found in inductive definitions, we need conditions that persist.

Persistent conditions can be understood as an abbreviation for conditions within general nets that, once they hold, do so with infinite multiplicity. Consequently, any number of events can use them as preconditions without their ever ceasing to hold. Such conditions, having unbounded capacity, can be postconditions of several events without there being conflict.

To be more precise, we modify the definition of a basic net by allowing certain conditions to be persistent. A net with persistent conditions will still consist of events and conditions related by pre- and postcondition maps, which to an event will assign a set of preconditions and a set of postconditions. Among the conditions, there are the persistent conditions forming a subset \( P \). A marking of a net with persistent conditions will be simply a subset of conditions, some of which may be persistent. Nets with persistent conditions have arisen independently several times and have been studied, for example, in contextual nets [8].

A net with persistent conditions can be understood on its own terms or as standing for a general net with the same sets of conditions and events. The general net’s capacity function will be either 1 or ∞ on a condition, being ∞ precisely on the persistent conditions. When \( p \) is persistent, \( p \in \text{pre}(e) \) is interpreted in the general net as arc weight \( (\text{pre}(e))_p = \infty \), and \( p \in \text{post}(e) \) as \( (\text{post}(e))_p = 1 \). A marking of a net with persistent conditions will correspond to a marking in the general Petri net in which those persistent conditions that hold do so with infinite multiplicity. Graphically, we will distinguish persistent conditions by drawing them as double circles: ❢❤

**Token Game with Persistent Conditions:**
The token game is modified to account for the subset of conditions \( P \) being persistent. Let \( M \) and \( M' \) be markings (i.e., subsets of conditions), and \( e \) an event. Define
\[ M \xrightarrow{e} M' \iff \text{pre}(e) \subseteq M \text{ and } (M \setminus (\text{pre}(e) \cup P)) \cap \text{post}(e) = \emptyset \text{ and } M' = (M \setminus \text{pre}(e)) \cup \text{post}(e) \cup (M \cap P). \]

### Appendix B: The Events of NSL

We classify the events \( \text{Ev}(\text{NSL}) \) of the NSL protocol:

**Initiator Events:**
- Init(A, B)
- out new m{m, A}P ub(B)
- in{m, y, B}P ub(A).out{y}P ub(B)
- in{m, n, B}P ub(A)
- out{n}P ub(B)

**Responder Events:**
- out new y{m, y, B}
- in{m, A}P ub(B)