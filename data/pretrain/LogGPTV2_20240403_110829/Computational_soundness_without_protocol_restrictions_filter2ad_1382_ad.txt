• A family (cipher N )N∈{0,1}∗ of sets of bitstrings. (Ini-
tially all empty.)
FC answers to the same queries as the real challenger, but
implements them diﬀerently:
• R := getekch(N ) or R := getdkch(N ) or R :=
evalch(C, R1, . . . , Rn) or R := encch(N, R1): Set
reg R := “getekch(N )” or reg R := “getdkch(N )”
or reg R := “evalch(C, R1, . . . , Rn)” or reg R :=
“encch(N, R1)”, respectively.
• decch(N, c): If c ∈ cipher N , return forbidden. Other-
wise, query deccs(c) from CSN and return its response.
• oraclech(x): Return O(x).
• revealch(R1): Compute m ← FCRetrieve(R1).
(FCRetrieve is deﬁned below in Deﬁnition 5.) Return
m.
Definition 5
(Retrieve function of FC). The re-
trieve function FCRetrieve has access to the registers reg R
and the ciphertext simulators CSN of FC.
It additionally
stores a family (plainN )N∈{0,1}∗ of lists between invocations
(all plainN are initially empty lists). FCRetrieve takes an
argument R (with reg R 6= ⊥) and is recursively deﬁned as
follows:
• If reg R is a bitstring, return reg R.
• If reg R = “getekch(N )”: Query CSN with getekcs().
Store the answer in reg R. Return reg R.
• If reg R = “evalch(C, R1, . . . , Rn)”: Compute mi
FCRetrieve(Ri) for i = 1, . . . , n. Compute m′
C(m1, . . . , mn). Set reg R := m′. Return m′.
:=
:=
• If reg R = “encch(N, R1)” and there was no getdkcs()-
query to CSN yet: Compute l := FCLen(R1). (FCLen
is deﬁned in Deﬁnition 7 below.) Query CSN with
fakeenccs(R, l). Denote the answer with c.
Set
reg R := c. Append (R 7→ R1) to the list plainN . Ap-
pend c to cipher N . Return c.
• If reg R = “encch(N, R1)” and there was a getdkcs()-
query to CSN : Compute m := FCRetrieve(R1).
Query CSN with enccs(R, m). Denote the answer with
c. Set reg R := c. Append (R 7→ R1) to plainN . Ap-
pend c to cipher N . Return c.
• If reg R = “getdkch(N )”: Query CSN with getdkcs().
Store the answer in reg R.
this was the ﬁrst
getdkcs(N )-query for that value of N , do the following
If
705for each (R′ 7→ R′
in the list):
1) ∈ plain N (in the order they occur
– Invoke m := FCRetrieve(R′
– Send the query programcs(R′, m) to CSN .
1).
Finally, return reg R.
The retrieve function uses the auxiliary function FCLen
that computes what length a bitstring associated with a
register should have. This function only makes sense if we
require the encryption scheme to be length regular, i.e., the
length of the output of the encryption scheme depends only
on the lengths of its inputs.
Definition 6
(Length regular encryption scheme).
An encryption scheme (K, E, D) is length-regular if there
are functions ℓek , ℓdk , ℓc such that for all η ∈  and all
m ∈ {0, 1}∗ and for (ek , dk ) ← K(1η) and c ← E(ek , m)
we have |ek | = ℓek (η) and |dk | = ℓdk (η) and |c| = ℓc(η, |m|)
with probability 1.
Definition 7
(Length function of FC). The
length function FCLen has (read-only) access to the registers
reg R of FC. FCLen takes an argument R (with reg R 6= ⊥)
and is recursively deﬁned as follows:
• If reg R is a bitstring, return |reg R|.
• If reg R = “evalch(C, R1, . . . , Rn)”: Return the length
of the output of the circuit C. (Note that the length
of the output of a Boolean circuit is independent of its
arguments.)
• If reg R = “getekch(N )” or reg R = “getdkcs(N )”: Let
ℓek and ℓdk be as in Deﬁnition 6. Return ℓek (η) or
ℓdk (η), respectively.
• If reg R = “encch(N, R1)”: Let ℓc be as in Deﬁnition 6.
Return ℓc(η, FCLen(R1)).
We are now ﬁnally ready to deﬁne PROG-KDM security:
Definition 8
(PROG-KDM security). A
length-
regular encryption scheme (K, E, D) (relative to an oracle
O) is PROG-KDM secure iﬀ there exists a ciphertext simu-
lator CS such that for all polynomial-time oracle machines
A,7 Pr[ARC(1η) = 1] − Pr[AFC(1η) = 1] is negligible in η.
Here RC is the real challenger for (K, E, D) and O and FC
is the fake challenger for CS and O. Notice that A does not
directly query O.
which does not use the real challenger any more, but di-
rectly accesses the ciphertext simulator (in the same way
as the fake challenger would). Sim 5 is then indistinguish-
able from Sim 2, but, since the fake challenger performed all
computations on when needed, Sim 2 now also performs all
computations only when actually needed. This has the eﬀect
that in the end, we can show that the bitstring mbad rep-
resents a contradiction because it guesses values that were
never accessed.
[35] shows that PROG-KDM security can be achieved us-
ing a standard construction, namely hybrid encryption us-
ing any CCA2-secure key encapsulation mechanism, a block
cipher (modeled as an ideal cipher) in CBC-mode, and
encrypt-then-MAC with an arbitrary one-time MAC.
We have now removed the restriction that a protocol may
not send its decryption keys. (And in one go, we also enabled
key-cycles because PROG-KDM covers that case, too.) It
remains to remove the restriction that we cannot use de-
cryption keys received from the adversary,
The need for PROG-KDM security. The question that
arises in this context is whether we actually need such a
strong notion as PROG-KDM in this context. Obviously,
IND-CCA2 security alone is not suﬃcient, there are schemes
that are IND-CCA2 secure and break down in the presence
of key-cycles.8 But what about, e.g., KDM-CCA2 [18] that
covers key dependent messages and active attacks?
To illustrate the necessity of a notion stronger than KDM-
CCA2, consider the following example: Assume a protocol
in which we want to share a secret s with n parties in such a
way that n/2 parties are needed to recover the secret s. We
do this by distributing n decryption keys to the n parties,
and by producing a number of nested encryptions such that
n/2 − 1 of the decryption keys are not suﬃcient to recover
s. More precisely, we use the following protocol:9
• The dealer D chooses a nonce s and n key pairs
(ek i, dk i).
• D chooses additional key pairs (ek i,j , dk i,j) for i =
0, . . . , n/2 and j = 0, . . . , n.
• D
ei,j
computes
←
Enc(ek j , (Enc(ek i−1,0, dk i,j ), . . . , Enc(ek i−1,j−1, dk i,j)))
for all i = 1, . . . , n/2, j = 1, . . . , n, and publishes
all ei,j, dk 0,j .
(dk i,j can then be computed if dk j
is known and at least i keys from dk 1, . . . , dk j are
known.)
If we assume that the computational implementation of
ek , dk , enc, dec is a PROG-KDM secure encryption scheme,
we can make the proof sketched in Section 4 go through even
if the protocol may reveal its decryption keys: The simulator
Sim 2 uses the real challenger to produce the output of β. He
does this by computing all of β(t) inside the real challenger
(using queries such as R := evalch(C, . . . )). Then Sim 4 uses
the fake challenger instead. By PROG-KDM security, Sim 2
and Sim 4 are indistinguishable. But Sim 4 still provides all
values needed in the computation early (because the real
challenger needs them early). But we can then deﬁne Sim 5
7Here we consider A polynomial-time if it runs a polynomial
number of steps in η, and the number of steps performed
by RC or FC is also polynomially-bounded. This additional
requirement is necessary since for an encryption scheme with
multiplicative overhead (say, length-doubling), a sequence of
queries Ri := encch(N, Ri−1) of polynomial length will lead
to the computation of an exponential-length ciphertext.
• D computes ej ← Enc(ek n/2,j , s) for j = 1, . . . , n, and
publishes all ej.
(s can then be computed if dk n/2,j is known for some j.
Thus, s can be computed if n/2 of the dk j are known.)
• The adversary may choose n/2 − 1 indices j ∈
{1, . . . , n}, and D sends dk j for each of the selected j.
• The adversary wins if he guesses the secret nonce s.
It is easy to see that given n/2 keys dk j , one can recover
s. But in a reasonable symbolic model (e.g., the one from
8Take,
e.g., an IND-CCA2 secure encryption scheme
(KeyGen, Enc, Dec) and modify it such that Enc(ek , dk ) :=
dk if ek and dk are a valid key pair, and let Dec(dk , dk ) :=
dk . It is easy to see that the modiﬁed scheme is still IND-
CCA2 secure, but the key cycle Enc(ek , dk ) reveals the de-
cryption key.
9A simpler protocol would be
:=
Enc(dk i1 , . . . Enc(dk in/2 , s) . . . ) for each set I = {i1, . . . , in/2
of size n/2. But that protocol would need to send an expo-
nential number of ciphertexts I.
to publish eI
706Section 2), the adversary cannot win.10 So a computational
soundness result without restrictions on sending and en-
crypting decryption keys would imply that the protocol is
secure in the computational setting. Hence any security no-
tion that allows us to derive the computational soundness
result must also be suﬃcient to show that the protocol is
secure in a computational setting. (Notice that situations
similar to the one in this protocol could occur, e.g., if we
enforce some complex authorization policy by a suitable set
of nested encryptions.)
But it seems that IND-CCA2 or KDM-CCA2 security
does not allow us to prove the security of this protocol. In a
proof using one of these notions, one typically ﬁrst deﬁnes a
game G1 which models an execution of the protocol. Then
one deﬁnes a modiﬁed game G2 in which some of the ci-
phertexts are replaced by encryptions of 0. Then one uses
IND-CCA2 or KDM-CCA2 to show that G1 and G2 are
indistinguishable. Finally, one uses that in game G2, the
secret s is never accessed, because we have replaced all oc-
currences of s by 0.
If we would know in advance which
keys dk j the adversary requests, this proof would indeed go
through. However, the selection of the dk j by the adver-
sary can be done adaptively, even depending on the values
of the ei,j . (E.g., the adversary could produce a hash of all
protocol messages and use the bits in the hash value to de-
cide which keys to reveal.) Hence, when encrypting, we do
not know yet which ciphertexts will be opened. Since there
are an exponential number of possibilities, we cannot guess.
There seems to be no other way of choosing which cipher-
texts should be 0-encryptions. Because of this, IND-CCA2
and KDM-CCA2 seem unapplicable for this protocol.11
Also notions such as IND-SO-CPA and SIM-SO-CPA
which are designed for situations with selective opening of
ciphertexts (cf. [17]) do not seem to match this protocol.
Possibly extensions of these notions might cover this case,
but it is not clear what these extensions should look like (in
particular if we extend the protocol such that some of the
ei,j may depend on other ei,j , e.g., by including the latter
in some of the plaintexts of the former).
So, it seems that the only known security notion for en-
cryption schemes that can show the security of the above
protocol is PROG-KDM. Thus it is not surprising that we
need to use PROG-KDM security in our proof.
5.2 Receiving decryption keys
The second restriction we face in the proof sketched in
Section 4 is that a protocol is not allowed to receive decryp-
tion keys. This is due to the way the simulator Sim parses
a bitstring into a term (using the function τ ): When receiv-
ing a ciphertext c for which the decryption key d is known,
Sim computes τ (c) := enc(ek (N e), τ (m), N c) where m is
the plaintext of c and e the corresponding encryption key.
If d is not known (because c was produced by the adver-
sary with respect to a key that the protocol did not pick),
10Proof sketch: Fix a set I ⊆ {dk 1, . . . , dk n}. Let S :=
{ej , ei,j, dk 0,j } ∪ I. By induction over i, we have that S ⊢
dk i,j implies |I ∩ {dk 1, . . . , dk j}| ≥ i. If S ⊢ s there is a j
with S ⊢ dk n/2,j , and hence |I| ≥ |I ∩{dk 1, . . . , dk j}| ≥ n/2.
So S ⊢ s only if |I| ≥ n/2, i.e., the adversary can only
recover s by requesting at least n/2 keys.
11Of course, this is no proof that these notions are indeed
insuﬃcient. But it shows that at least natural proof ap-
proaches fail. We expect that an impossibility result relative
to some oracle can be proven but we have not done so.
Sim computes τ (c) := garbageEnc(ek (N e), N c). Notice that
in the latter case we are cheating: even though c may be
a valid ciphertext (just with respect to an encryption key
whose decryption key we do not know), we declare it to be
an invalid ciphertext. But the fact that we will never use
the decryption key saves us: we will never be caught in a
lie. The situation is diﬀerent if we receive decryption keys
from the adversary. Then the adversary might ﬁrst send
c which we parse to garbageEnc(ek (N e), N c). Then later
he sends us the corresponding decryption key d which we
parse to dk (N e). But then in the computational execution,
decrypting c using d works, while in the hybrid execution,
decrypting garbageEnc(ek (N e), N c) necessarily fails.
So if we allow the protocol to receive decryption keys,
we need to change the simulator so that it parses τ (c) :=
enc(ek (N e), t, N c) when receiving a valid ciphertext c, even
if the he cannot decrypt c. But then, how should the simu-
lator compute the term t? And for that matter, how should
the simulator know that c is valid? (It might be invalid, and
then should be parsed as garbageEnc(ek (N e), N c).)
A solution for this problem has been proposed in the ﬁrst
revision of [5] (not contained in later versions!) but has not
been applied there. The idea is to allow the simulator to
partially parse terms (lazy simulator). That is, we allow
the simulator to output terms that contain variables, and