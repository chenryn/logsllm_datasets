### GDB Command Reference and Usage Guide

#### Remote Memory Operations
- **`show remote memory-read-packet-size`**: Displays the maximum number of bytes per memory read packet.
- **`show remote memory-write-packet-size`**: Displays the maximum number of bytes per memory write packet.
- **`show remote noack-packet`**: Shows the current use of the `QStartNoAckMode` (noack) packet in the remote protocol.
- **`show remote osdata-packet`**: Shows the current use of the `qXfer:osdata:read` (osdata) packet in the remote protocol.
- **`show remote p-packet`**: Shows the current use of the `p` (fetch-register) packet in the remote protocol.
- **`show remote pass-signals-packet`**: Shows the current use of the `QPassSignals` (pass-signals) packet in the remote protocol.
- **`show remote query-attached-packet`**: Shows the current use of the `qAttached` (query-attached) packet in the remote protocol.
- **`show remote read-aux-vector-packet`**: Shows the current use of the `qXfer:auxv:read` (read-aux-vector) packet in the remote protocol.
- **`show remote read-siginfo-object-packet`**: Shows the current use of the `qXfer:siginfo:read` (read-siginfo-object) packet in the remote protocol.
- **`show remote read-spu-object-packet`**: Shows the current use of the `qXfer:spu:read` (read-spu-object) packet in the remote protocol.
- **`show remote read-watchpoint-packet`**: Shows the current use of the `Z3` (read-watchpoint) packet in the remote protocol.
- **`show remote reverse-continue-packet`**: Shows the current use of the `bc` (reverse-continue) packet in the remote protocol.
- **`show remote reverse-step-packet`**: Shows the current use of the `bs` (reverse-step) packet in the remote protocol.
- **`show remote run-packet`**: Shows the current use of the `vRun` (run) packet in the remote protocol.
- **`show remote search-memory-packet`**: Shows the current use of the `qSearch:memory` (search-memory) packet in the remote protocol.
- **`show remote set-register-packet`**: Shows the current use of the `P` (set-register) packet in the remote protocol.
- **`show remote software-breakpoint-packet`**: Shows the current use of the `Z0` (software-breakpoint) packet in the remote protocol.
- **`show remote supported-packets-packet`**: Shows the current use of the `qSupported` (supported-packets) packet in the remote protocol.
- **`show remote symbol-lookup-packet`**: Shows the current use of the `qSymbol` (symbol-lookup) packet in the remote protocol.
- **`show remote system-call-allowed`**: Indicates whether the `system(3)` call is allowed for the target.
- **`show remote target-features-packet`**: Shows the current use of the `qXfer:features:read` (target-features) packet in the remote protocol.
- **`show remote verbose-resume-packet`**: Shows the current use of the `vCont` (verbose-resume) packet in the remote protocol.
- **`show remote write-siginfo-object-packet`**: Shows the current use of the `qXfer:siginfo:write` (write-siginfo-object) packet in the remote protocol.
- **`show remote write-spu-object-packet`**: Shows the current use of the `qXfer:spu:write` (write-spu-object) packet in the remote protocol.
- **`show remote write-watchpoint-packet`**: Shows the current use of the `Z2` (write-watchpoint) packet in the remote protocol.
- **`show remoteaddresssize`**: Displays the maximum size of the address (in bits) in a memory packet.
- **`show remotebaud`**: Displays the baud rate for remote serial I/O.
- **`show remotebreak`**: Indicates whether to send a break if interrupted.
- **`show remotecache`**: Shows cache usage for remote targets.
- **`show remoteflow`**: Shows the use of hardware flow control for remote serial I/O.
- **`show remotelogbase`**: Displays the numerical base for remote session logging.
- **`show remotelogfile`**: Displays the filename for remote session recording.
- **`show remotetimeout`**: Displays the timeout limit to wait for the target to respond.
- **`show remotewritesize`**: Displays the maximum number of bytes per memory write packet (deprecated).

#### General GDB Commands
- **`show schedule-multiple`**: Displays the mode for resuming threads of all processes.
- **`show scheduler-locking`**: Displays the mode for locking the scheduler during execution.
- **`show serial`**: Displays the default serial/parallel port configuration.
- **`show solib-absolute-prefix`**: Displays the current system root.
- **`show solib-search-path`**: Displays the search path for loading non-absolute shared library symbol files.
- **`show stack-cache`**: Displays cache usage for stack access.
- **`show step-mode`**: Displays the mode of the step operation.
- **`show stop-on-solib-events`**: Displays stopping for shared library events.
- **`show struct-convention`**: Displays the convention for returning small structs.
- **`show substitute-path`**: Usage: `show substitute-path [FROM]`.
- **`show symbol-reloading`**: Displays dynamic symbol table reloading multiple times in one run.
- **`show sysroot`**: Displays the current system root.
- **`show target-async`**: Displays whether GDB controls the inferior in asynchronous mode.
- **`show target-charset`**: Displays the target character set.
- **`show target-wide-charset`**: Displays the target wide character set.
- **`show tcp`**: Displays TCP protocol-specific variables.
- **`show tcp auto-retry`**: Displays auto-retry on socket connect.
- **`show tcp connect-timeout`**: Displays the timeout limit for socket connection.
- **`show tdesc`**: Displays target description-specific variables.
- **`show tdesc filename`**: Displays the file to read for an XML target description.
- **`show trace-commands`**: Displays the state of GDB CLI command tracing.
- **`show trust-readonly-sections`**: Displays the mode for reading from readonly sections.
- **`show tui`**: Displays TUI configuration variables.
- **`show tui active-border-mode`**: Displays the attribute mode to use for the active TUI window border.
- **`show tui border-kind`**: Displays the kind of border for TUI windows.
- **`show tui border-mode`**: Displays the attribute mode to use for the TUI window borders.
- **`show unwind-on-terminating-exception`**: Displays unwinding of the stack if `std::terminate()` is called while in a call dummy.
- **`show unwindonsignal`**: Displays unwinding of the stack if a signal is received while in a call dummy.
- **`show user`**: Displays definitions of user-defined commands.
- **`show values`**: Displays elements of value history around item number IDX (or last ten).
- **`show verbose`**: Displays verbosity.
- **`show version`**: Displays the version of GDB.
- **`show warranty`**: Displays various kinds of warranty you do not have.
- **`show watchdog`**: Displays the watchdog timer.
- **`show width`**: Displays the number of characters GDB thinks are in a line.
- **`show write`**: Displays writing into executable and core files.

#### Support Commands
- **`apropos`**: Searches for commands matching a REGEXP.
- **`define`**: Defines a new command name.
- **`document`**: Documents a user-defined command.
- **`dont-repeat`**: Prevents this command from being repeated.
- **`down-silently`**: Same as the `down` command, but without output.
- **`echo`**: Prints a constant string.
- **`help`**: Prints a list of commands.
- **`if`**: Executes nested commands once if the conditional expression is non-zero.
- **`interpreter-exec`**: Executes a command in an interpreter.
- **`make`**: Runs the `make` program using the rest of the line as arguments.
- **`overlay`**: Commands for debugging overlays.
  - **`overlay auto`**: Enables automatic overlay debugging.
  - **`overlay list-overlays`**: Lists mappings of overlay sections.
  - **`overlay load-target`**: Reads the overlay mapping state from the target.
  - **`overlay manual`**: Enables overlay debugging.
  - **`overlay map-overlay`**: Asserts that an overlay section is mapped.
  - **`overlay off`**: Disables overlay debugging.
  - **`overlay unmap-overlay`**: Asserts that an overlay section is unmapped.
- **`quit`**: Exits GDB.
- **`require`**: Prefix command for requiring features.
  - **`require command`**: Demand-loads a command by name.
  - **`require function`**: Demand-loads a function by name.
- **`shell`**: Executes the rest of the line as a shell command.
- **`source`**: Reads commands from a file named FILE.
- **`up-silently`**: Same as the `up` command, but without output.
- **`while`**: Executes nested commands while the conditional expression is non-zero.

#### Tracepoints
- **`actions`**: Specifies the actions to be taken at a tracepoint.
- **`collect`**: Specifies one or more data items to be collected at a tracepoint.
- **`end`**: Ends a list of commands or actions.
- **`passcount`**: Sets the passcount for a tracepoint.
- **`save-tracepoints`**: Saves current tracepoint definitions as a script.
- **`tdump`**: Prints everything collected at the current tracepoint.
- **`tfind`**: Selects a trace frame.
  - **`tfind end`**: Synonym for 'none'.
  - **`tfind line`**: Selects a trace frame by source line.
  - **`tfind none`**: De-selects any trace frame and resumes 'live' debugging.
  - **`tfind outside`**: Selects a trace frame whose PC is outside the given range.
  - **`tfind pc`**: Selects a trace frame by PC.
  - **`tfind range`**: Selects a trace frame whose PC is in the given range.
  - **`tfind start`**: Selects the first trace frame in the trace buffer.
  - **`tfind tracepoint`**: Selects a trace frame by tracepoint number.
- **`tstart`**: Starts trace data collection.
- **`tstatus`**: Displays the status of the current trace data collection.
- **`tstop`**: Stops trace data collection.
- **`while-stepping`**: Specifies single-stepping behavior at a tracepoint.

#### User-Defined Commands
- **`function`**: Placeholder command for showing help on convenience functions.
- **`unset`**: Complement to certain "set" commands.
  - **`unset environment`**: Cancels environment variable VAR for the program.
  - **`unset exec-wrapper`**: Disables use of an execution wrapper.
  - **`unset substitute-path`**: Usage: `unset substitute-path [FROM]`.
  - **`unset tdesc`**: Unsets target description specific variables.
  - **`unset tdesc filename`**: Unsets the file to read for an XML target description.

### Example: Analyzing a Core Dump with GDB

1. **Locate the Directory**:
   - Find the directory where the core file is generated.

2. **List the Core Files**:
   - Use the `ls -ltr` command in the directory to find the latest generated core file.

3. **Load the Core File**:
   - To load the core file, use the following command:
     ```sh
     gdb binary path/to/corefile
     ```
   - This will load the core file into GDB.

4. **Get Information**:
   - Use the `bt` command to get a backtrace.
   - For a detailed backtrace, use `bt full`.
   - To print the values of variables, use `print variable-name` or `p variable-name`.

5. **Get Help**:
   - Use the `help` option or `apropos search-topic` to get help on GDB commands.

6. **Navigate Frames**:
   - Use `frame frame-number` to go to the desired frame number.
   - Use `up n` and `down n` commands to select frames `n` frames up and down, respectively.

7. **Exit GDB**:
   - Use `quit` or `q` to exit GDB.

### Detailed Steps for Debugging a Core Dump

1. **Binary and Core Dump**:
   - You need a binary (with debugging symbols included) that is identical to the one that generated the core dump file.
   - Run GDB with the binary and core dump file:
     ```sh
     gdb path/to/the/binary path/to/the/core/dump/file
     ```

2. **Backtrace**:
   - When GDB starts, use `bt` to get a stack trace from the time of the crash.
   - In the backtrace, each function invocation is given a number.

3. **Select a Frame**:
   - Use `frame number` (replace `number` with the corresponding number in the stack trace) to select a particular stack frame.

4. **Inspect Code and Variables**:
   - Use `list` to see the code around the selected function.
   - Use `info locals` to see the local variables.
   - Use `print var_name` (replace `var_name` with a variable name) to see its value.

5. **Additional Help**:
   - Type `help` within GDB to get a prompt that lists additional commands.

### Example Commands
```sh
gdb path/to/the/binary path/to/the/core/dump/file
bt
bt full
frame number
list
info locals
print var_name
help
```

For more information and examples, refer to the [Stack Overflow discussion on core dump file analysis](https://stackoverflow.com/questions/5115613/core-dump-file-analysis).

### Additional Resources
- **[PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")**
  - Your wishes will be conveyed to PG kernel hackers and database vendors to help improve the quality and functionality of the database. Excellent suggestions may be rewarded with limited-edition PG merchandise, books, and more. [Click here to make a wish.](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")

- **[9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")**

- **[PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")**

- **[德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")**
  - ![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")

- **[PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")**

- **[购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")**

- **[About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")**