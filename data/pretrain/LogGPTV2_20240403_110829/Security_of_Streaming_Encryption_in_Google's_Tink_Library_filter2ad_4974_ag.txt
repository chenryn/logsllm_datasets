21
Based on our analysis, we recommend that Tink’s streaming encryption follows SE3 instead of
SE1 to resist randomness failure. Moreover, if one has a header to authenticate, one should treat it
as a segmented AD, instead of feeding it to the key-derivation function KD. This also allows one to
instantiate KD via AES, and thus improve both code complexity and efficiency. Finally, one should
use a 256-bit master key to avoid key-collision attacks, but internally, one can still use AES-128 for
both KD (via the DESX1 paradigm) and GCM (by deriving a 128-bit subkey).
Acknowledgement
We thank CCS reviewers for useful feedback, especially for the information that a major application
of Tink’s streaming encryption is to encrypt large files, which requires random-access decryption.
Viet Tung Hoang was supported in part by NSF grants CICI-1738912 and CRII-1755539. Yaobin
Shen was supported in part by National Key Research and Development Program of China (No.
2019YFB2101601) and China Scholarship Council (No. 201806230107). Part of this work was done
while Yaobin Shen was visiting Florida State University.
References
1. M. Bellare and R. Impagliazzo. A tool for obtaining tighter security analyses of pseudorandom function based
constructions, with applications to PRP to PRF conversion. Cryptology ePrint Archive, Report 1999/024, 1999.
http://eprint.iacr.org/1999/024.
2. M. Bellare, T. Krovetz, and P. Rogaway. Luby-Rackoff backwards: Increasing security by making block ciphers
non-invertible. In K. Nyberg, editor, EUROCRYPT’98, volume 1403 of LNCS, pages 266–280. Springer, Heidel-
berg, May / June 1998.
3. M. Bellare and P. Rogaway. The security of triple encryption and a framework for code-based game-playing
proofs. In S. Vaudenay, editor, EUROCRYPT 2006, volume 4004 of LNCS, pages 409–426. Springer, Heidelberg,
May / June 2006.
4. M. Bellare and B. Tackmann. The multi-user security of authenticated encryption: AES-GCM in TLS 1.3. In
M. Robshaw and J. Katz, editors, CRYPTO 2016, Part I, volume 9814 of LNCS, pages 247–276. Springer,
Heidelberg, Aug. 2016.
5. E. Biham. How to decrypt or even substitute DES-encrypted messages in 228 steps. Information Processing
6. P. Bose, V. T. Hoang, and S. Tessaro. Revisiting AES-GCM-SIV: Multi-user security, faster key derivation, and
Letters, 84(3):117–124, 2002.
better bounds. In EUROCRYPT 2018, 2018.
7. P. Bose, V. T. Hoang, and S. Tessaro. Revisiting AES-GCM-SIV: Multi-user security, faster key derivation, and
better bounds. In J. B. Nielsen and V. Rijmen, editors, EUROCRYPT 2018, Part I, volume 10820 of LNCS,
pages 468–499. Springer, Heidelberg, Apr. / May 2018.
8. S. Chen and J. P. Steinberger. Tight security bounds for key-alternating ciphers. In P. Q. Nguyen and E. Oswald,
editors, EUROCRYPT 2014, volume 8441 of LNCS, pages 327–350. Springer, Heidelberg, May 2014.
9. B. Cogliati. Tweaking a block cipher: multi-user beyond-birthday-bound security in the standard model. Designs,
Codes and Cryptography, 86(12):2747–2763, 2018.
10. W. Dai, V. T. Hoang, and S. Tessaro. Information-theoretic indistinguishability via the Chi-Squared method. In
CRYPTO 2017, 2017.
11. L. Dorrendorf, Z. Gutterman, and B. Pinkas. Cryptanalysis of the windows random number generator.
In
P. Ning, S. De Capitani di Vimercati, and P. F. Syverson, editors, ACM CCS 2007, pages 476–485. ACM Press,
Oct. 2007.
12. Google. Tink library, 2020. https://github.com/google/tink.
13. S. Gueron and Y. Lindell. Better bounds for block cipher modes of operation via nonce-based key derivation. In
B. M. Thuraisingham, D. Evans, T. Malkin, and D. Xu, editors, ACM CCS 2017, pages 1019–1036. ACM Press,
Oct. / Nov. 2017.
22
14. N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman. Mining your ps and qs: Detection of widespread
weak keys in network devices. In T. Kohno, editor, USENIX Security 2012, pages 205–220. USENIX Association,
Aug. 2012.
15. V. T. Hoang, R. Reyhanitabar, P. Rogaway, and D. Vizár. Online authenticated-encryption and its nonce-reuse
misuse-resistance. In R. Gennaro and M. J. B. Robshaw, editors, CRYPTO 2015, Part I, volume 9215 of LNCS,
pages 493–517. Springer, Heidelberg, Aug. 2015.
16. V. T. Hoang and S. Tessaro. Key-alternating ciphers and key-length extension: Exact bounds and multi-user
security. In M. Robshaw and J. Katz, editors, CRYPTO 2016, Part I, volume 9814 of LNCS, pages 3–32. Springer,
Heidelberg, Aug. 2016.
17. V. T. Hoang and S. Tessaro. The multi-user security of double encryption. In J. Coron and J. B. Nielsen, editors,
EUROCRYPT 2017, Part II, volume 10211 of LNCS, pages 381–411. Springer, Heidelberg, Apr. / May 2017.
18. V. T. Hoang, S. Tessaro, and A. Thiruvengadam. The multi-user security of GCM, revisited: Tight bounds for
nonce randomization. In CCS 2018, 2018.
19. A. Jha and M. Nandi. Tight security of cascaded lrw2. Journal of Cryptology, pages 1–46, 2020.
20. J. Kilian and P. Rogaway. How to protect DES against exhaustive key search. In N. Koblitz, editor, CRYPTO’96,
volume 1109 of LNCS, pages 252–267. Springer, Heidelberg, Aug. 1996.
21. T. Krovetz and P. Rogaway. The software performance of authenticated-encryption modes. In A. Joux, editor,
FSE 2011, volume 6733 of LNCS, pages 306–327. Springer, Heidelberg, Feb. 2011.
22. A. K. Lenstra, J. P. Hughes, M. Augier, J. W. Bos, T. Kleinjung, and C. Wachter. Public keys. In R. Safavi-Naini
and R. Canetti, editors, CRYPTO 2012, volume 7417 of LNCS, pages 626–642. Springer, Heidelberg, Aug. 2012.
23. S. Lucks. The sum of PRPs is a secure PRF. In B. Preneel, editor, EUROCRYPT 2000, volume 1807 of LNCS,
pages 470–484. Springer, Heidelberg, May 2000.
24. D. A. McGrew and J. Viega. The security and performance of the Galois/counter mode (GCM) of operation. In
A. Canteaut and K. Viswanathan, editors, INDOCRYPT 2004, volume 3348 of LNCS, pages 343–355. Springer,
Heidelberg, Dec. 2004.
25. R. Motwani and P. Raghavan. Randomized algorithms. Cambridge University Press, 1995.
26. N. Mouha and A. Luykx. Multi-key security: The Even-Mansour construction revisited.
In R. Gennaro and
M. J. B. Robshaw, editors, CRYPTO 2015, Part I, volume 9215 of LNCS, pages 209–223. Springer, Heidelberg,
Aug. 2015.
27. J. Patarin. The “coefficients H” technique (invited talk). In R. M. Avanzi, L. Keliher, and F. Sica, editors, SAC
2008, volume 5381 of LNCS, pages 328–345. Springer, Heidelberg, Aug. 2009.
28. J. Patarin. Introduction to mirror theory: Analysis of systems of linear equalities and linear non equalities for
cryptography. Cryptology ePrint Archive, Report 2010/287, 2010. http://eprint.iacr.org/2010/287.
29. P. Rogaway, M. Bellare, J. Black, and T. Krovetz. OCB: A block-cipher mode of operation for efficient authen-
ticated encryption. In M. K. Reiter and P. Samarati, editors, ACM CCS 2001, pages 196–205. ACM Press, Nov.
2001.
A nOAE Does Not Imply nOAE2
In this section, we will show a canonical online AE scheme 𝛱* that is nOAE-secure, but trivially
broken under the nOAE2 notion. In particular, 𝛱 is a variant of the STREAM construction;
its procedures ℰ.last and 𝒟.last are modified to preserve the nOAE security, but damage the
nOAE2 security. The code is given in Fig. 13. The change here is that in ℰ.last, in addition to
the ciphertext segment 𝐶0 ← E𝐾(⟨𝑁, 𝑖, 1⟩, 𝐴, 𝑀), we will release an additional ciphertext segment
𝐶1 ← E𝐾(⟨𝑁, 𝑖 + 1, 0⟩, 𝐴, 𝑀). Procedure 𝒟.last will attempt to decrypt both 𝐶0 and 𝐶1, and if
both ciphertexts are valid then it returns the decrypted message of 𝐶0.
Releasing 𝐶1 does no harm to nOAE security. Indeed, as 𝐶1 can only be decrypted properly under
nonce ⟨𝑁, 𝑖 + 1, 0⟩, the adversary can only use it in a decryption query Dec(𝑢, 𝑁, 𝐴, 𝐶, 𝑎) with
𝐶[𝑖+1] = 𝐶1, where 𝑢 is the user of the corresponding encryption query. But since decryption is in
order, the adversary will never pass the decryption of 𝐶[𝑖], as it does not know any valid ciphertext
segment under nonce ⟨𝑁, 𝑖, 0⟩ for user 𝑢.
23
procedure ℰ.init(𝐾, 𝑁)
return (𝐾, 𝑁, 1)
procedure ℰ.next(𝑆, 𝐴, 𝑀)
(𝐾, 𝑁, 𝑖) ← 𝑆; 𝑆 ← (𝐾, 𝑁, 𝑖 + 1)
𝐶 ← E𝐾(⟨𝑁, 𝑖, 0⟩, 𝐴, 𝑀)
return (𝐶, 𝑆)
procedure ℰ.last(𝑆, 𝐴, 𝑀)
(𝐾, 𝑁, 𝑖) ← 𝑆
𝐶0 ← E𝐾(⟨𝑁, 𝑖, 1⟩, 𝐴, 𝑀)
𝐶1 ← E𝐾(⟨𝑁, 𝑖 + 1, 0⟩, 𝐴, 𝑀)
return (𝐶0, 𝐶1)
procedure 𝒟.init(𝐾, 𝑁)
return (𝐾, 𝑁, 1)
procedure 𝒟.next(𝑆, 𝐴, 𝐶)
(𝐾, 𝑁, 𝑖) ← 𝑆; 𝑆 ← (𝐾, 𝑁, 𝑖 + 1)
𝑀 ← D𝐾(⟨𝑁, 𝑖, 0⟩, 𝐴, 𝐶)
return (𝑀, 𝑆)
procedure 𝒟.last(𝑆, 𝐴, 𝐶)
(𝐾, 𝑁, 𝑖) ← 𝑆; (𝐶0, 𝐶1) ← 𝐶
𝑀 ← D𝐾(⟨𝑁, 𝑖 + 1, 0⟩, 𝐴, 𝐶1)
if 𝑀 = ⊥ then return ⊥
else return D𝐾(⟨𝑁, 𝑖, 1⟩, 𝐴, 𝐶0)
Fig. 13: A variant 𝛱* of the STREAM construction that is nOAE-secure, but trivially broken
under nOAE2. It is built on top of a conventional AE scheme 𝛱 = (K, E, D).
In contrast, it is trivial to break the nOAE2 security of 𝛱*. The adversary first calls ℰ.init(1, 𝑁),
for an arbitrary nonce 𝑁, to get an index 𝑗. It then calls ℰ.last(1, 𝑗, 𝐴, 𝑀) for an arbitrary
AD 𝐴 and message 𝑀 to get a ciphertext segment (𝐶0, 𝐶1). Finally, it makes a decryption query
Dec(1, 𝑁, 𝐴, 𝐶,ℐ, 0), with 𝐴 = (𝐴, 𝐴) and 𝐶 = (𝐶1, 𝐶1), and ℐ = (2), meaning that it only asks
for a decryption of the second ciphertext segment. The adversary then outputs 1 if the decryption
oracle returns true, and outputs 0 otherwise. Note that in the real world, the first segment of 𝐶 is
invalid but it never gets checked, and the second segment of 𝐶 is decrypted properly. Hence the
adversary wins with advantage 1.
B Key-Collision Attacks
In this section we show how to use Biham’s key-collision attack on DES [5] to break the (multi-user)
PRF and AE security.
B.1 PRF Attack
Let 𝐹 : {0, 1}𝑘 × ℳ → {0, 1}𝑛 be a keyed function. Let 𝑟 be an arbitrary integer such that
𝑟 ≥ ⌈(𝑘 + 2)/𝑛⌉. Let 𝑝, 𝑞 ≥ 1 be integers such that 𝑝𝑞 ≤ 2𝑘.
The attack. Adversary 𝒜 first picks arbitrary distinct messages 𝑀1, . . . , 𝑀𝑟 ∈ ℳ and then
queries 𝐶𝑖,1 ← Eval(𝑖, 𝑀1), . . . , 𝐶𝑖,𝑟 ← Eval(𝑖, 𝑀𝑟) for every 𝑖 = 1, . . . , 𝑞. It then picks arbitrary
distinct keys 𝐾1, . . . , 𝐾𝑝 ∈ {0, 1}𝑘, and computes 𝐶*
𝑗,𝑟 ← 𝐹(𝐾𝑗, 𝑀𝑟) for
every 𝑗 = 1, . . . , 𝑝. If there are 𝑖 ≤ 𝑞 and 𝑗 ≤ 𝑝 such that 𝐶𝑖,ℓ = 𝐶*
𝑗,ℓ for every ℓ = 1, . . . , 𝑟 then the
adversary outputs 1, otherwise the adversary outputs 0.
Real world’s analysis. In the real world, if there is an adversarial key 𝐾𝑗 that coincides with
the key of user 𝑖 then the adversary will output 1. Since the user keys are chosen uniformly at
random, this happens with probability
𝑗,1 ← 𝐹(𝐾𝑗, 𝑀1), . . . , 𝐶*
1 −(︁1 − 𝑝
)︁𝑞
.
2𝑘
To simplify this bound, we need the following technical result from [17].
24
Lemma 4.
[17] Let 𝑞 ≥ 1 be an integer and 0 < 𝑎 ≤ 1/𝑞. Then
(1 − 𝑎)𝑞 ≤ 1 − 𝑞𝑎/2 .
𝑝𝑞
2𝑘+1 .
Using Lemma 4 with 𝑎 = 𝑝/2𝑘 indicates that in the real world, the chance that the adversary
outputs 1 is at least
Ideal world’s analysis. Assume that there are no two keys 𝐾𝑖 and 𝐾𝑗 such that (𝐶*
𝑖,𝑟) =
(𝐶*
𝑗,𝑟). For real PRF constructions, this assumption is very likely to hold for an appro-
priately large 𝑟. In the ideal world, the oracle answers are independent, truly random strings, and
thus the chance that the adversary outputs 1 is at most
𝑗,1, . . . , 𝐶*