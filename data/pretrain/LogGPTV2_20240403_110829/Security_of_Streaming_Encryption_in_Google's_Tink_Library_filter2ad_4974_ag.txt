### Recommendations for Tink's Streaming Encryption

Based on our analysis, we recommend that Tink’s streaming encryption follow the SE3 standard rather than SE1 to mitigate randomness failures. Additionally, if a header needs to be authenticated, it should be treated as a segmented Additional Data (AD) rather than being fed into the key-derivation function (KD). This approach also allows for the use of AES in the instantiation of KD, thereby enhancing both code complexity and efficiency. Furthermore, a 256-bit master key should be used to prevent key-collision attacks, although internally, AES-128 can still be employed for both KD (via the DESX1 paradigm) and GCM (by deriving a 128-bit subkey).

### Acknowledgements

We are grateful to the CCS reviewers for their valuable feedback, particularly for highlighting that a major application of Tink’s streaming encryption is the encryption of large files, which necessitates random-access decryption. Viet Tung Hoang was supported in part by NSF grants CICI-1738912 and CRII-1755539. Yaobin Shen received partial support from the National Key Research and Development Program of China (No. 2019YFB2101601) and the China Scholarship Council (No. 201806230107). A portion of this work was conducted while Yaobin Shen was visiting Florida State University.

### References

1. M. Bellare and R. Impagliazzo. A tool for obtaining tighter security analyses of pseudorandom function-based constructions, with applications to PRP to PRF conversion. *Cryptology ePrint Archive*, Report 1999/024, 1999. [http://eprint.iacr.org/1999/024](http://eprint.iacr.org/1999/024)
2. M. Bellare, T. Krovetz, and P. Rogaway. Luby-Rackoff backwards: Increasing security by making block ciphers non-invertible. In K. Nyberg, editor, *EUROCRYPT’98*, volume 1403 of LNCS, pages 266–280. Springer, Heidelberg, May/June 1998.
3. M. Bellare and P. Rogaway. The security of triple encryption and a framework for code-based game-playing proofs. In S. Vaudenay, editor, *EUROCRYPT 2006*, volume 4004 of LNCS, pages 409–426. Springer, Heidelberg, May/June 2006.
4. M. Bellare and B. Tackmann. The multi-user security of authenticated encryption: AES-GCM in TLS 1.3. In M. Robshaw and J. Katz, editors, *CRYPTO 2016, Part I*, volume 9814 of LNCS, pages 247–276. Springer, Heidelberg, August 2016.
5. E. Biham. How to decrypt or even substitute DES-encrypted messages in 2^28 steps. *Information Processing Letters*, 84(3):117–124, 2002.
6. P. Bose, V. T. Hoang, and S. Tessaro. Revisiting AES-GCM-SIV: Multi-user security, faster key derivation, and better bounds. In *EUROCRYPT 2018*, 2018.
7. P. Bose, V. T. Hoang, and S. Tessaro. Revisiting AES-GCM-SIV: Multi-user security, faster key derivation, and better bounds. In J. B. Nielsen and V. Rijmen, editors, *EUROCRYPT 2018, Part I*, volume 10820 of LNCS, pages 468–499. Springer, Heidelberg, April/May 2018.
8. S. Chen and J. P. Steinberger. Tight security bounds for key-alternating ciphers. In P. Q. Nguyen and E. Oswald, editors, *EUROCRYPT 2014*, volume 8441 of LNCS, pages 327–350. Springer, Heidelberg, May 2014.
9. B. Cogliati. Tweaking a block cipher: multi-user beyond-birthday-bound security in the standard model. *Designs, Codes and Cryptography*, 86(12):2747–2763, 2018.
10. W. Dai, V. T. Hoang, and S. Tessaro. Information-theoretic indistinguishability via the Chi-Squared method. In *CRYPTO 2017*, 2017.
11. L. Dorrendorf, Z. Gutterman, and B. Pinkas. Cryptanalysis of the Windows random number generator. In P. Ning, S. De Capitani di Vimercati, and P. F. Syverson, editors, *ACM CCS 2007*, pages 476–485. ACM Press, October 2007.
12. Google. Tink library, 2020. [https://github.com/google/tink](https://github.com/google/tink)
13. S. Gueron and Y. Lindell. Better bounds for block cipher modes of operation via nonce-based key derivation. In B. M. Thuraisingham, D. Evans, T. Malkin, and D. Xu, editors, *ACM CCS 2017*, pages 1019–1036. ACM Press, October/November 2017.
14. N. Heninger, Z. Durumeric, E. Wustrow, and J. A. Halderman. Mining your ps and qs: Detection of widespread weak keys in network devices. In T. Kohno, editor, *USENIX Security 2012*, pages 205–220. USENIX Association, August 2012.
15. V. T. Hoang, R. Reyhanitabar, P. Rogaway, and D. Vizár. Online authenticated-encryption and its nonce-reuse misuse-resistance. In R. Gennaro and M. J. B. Robshaw, editors, *CRYPTO 2015, Part I*, volume 9215 of LNCS, pages 493–517. Springer, Heidelberg, August 2015.
16. V. T. Hoang and S. Tessaro. Key-alternating ciphers and key-length extension: Exact bounds and multi-user security. In M. Robshaw and J. Katz, editors, *CRYPTO 2016, Part I*, volume 9814 of LNCS, pages 3–32. Springer, Heidelberg, August 2016.
17. V. T. Hoang and S. Tessaro. The multi-user security of double encryption. In J. Coron and J. B. Nielsen, editors, *EUROCRYPT 2017, Part II*, volume 10211 of LNCS, pages 381–411. Springer, Heidelberg, April/May 2017.
18. V. T. Hoang, S. Tessaro, and A. Thiruvengadam. The multi-user security of GCM, revisited: Tight bounds for nonce randomization. In *CCS 2018*, 2018.
19. A. Jha and M. Nandi. Tight security of cascaded LRW2. *Journal of Cryptology*, pages 1–46, 2020.
20. J. Kilian and P. Rogaway. How to protect DES against exhaustive key search. In N. Koblitz, editor, *CRYPTO’96*, volume 1109 of LNCS, pages 252–267. Springer, Heidelberg, August 1996.
21. T. Krovetz and P. Rogaway. The software performance of authenticated-encryption modes. In A. Joux, editor, *FSE 2011*, volume 6733 of LNCS, pages 306–327. Springer, Heidelberg, February 2011.
22. A. K. Lenstra, J. P. Hughes, M. Augier, J. W. Bos, T. Kleinjung, and C. Wachter. Public keys. In R. Safavi-Naini and R. Canetti, editors, *CRYPTO 2012*, volume 7417 of LNCS, pages 626–642. Springer, Heidelberg, August 2012.
23. S. Lucks. The sum of PRPs is a secure PRF. In B. Preneel, editor, *EUROCRYPT 2000*, volume 1807 of LNCS, pages 470–484. Springer, Heidelberg, May 2000.
24. D. A. McGrew and J. Viega. The security and performance of the Galois/counter mode (GCM) of operation. In A. Canteaut and K. Viswanathan, editors, *INDOCRYPT 2004*, volume 3348 of LNCS, pages 343–355. Springer, Heidelberg, December 2004.
25. R. Motwani and P. Raghavan. *Randomized Algorithms*. Cambridge University Press, 1995.
26. N. Mouha and A. Luykx. Multi-key security: The Even-Mansour construction revisited. In R. Gennaro and M. J. B. Robshaw, editors, *CRYPTO 2015, Part I*, volume 9215 of LNCS, pages 209–223. Springer, Heidelberg, August 2015.
27. J. Patarin. The “coefficients H” technique (invited talk). In R. M. Avanzi, L. Keliher, and F. Sica, editors, *SAC 2008*, volume 5381 of LNCS, pages 328–345. Springer, Heidelberg, August 2009.
28. J. Patarin. Introduction to mirror theory: Analysis of systems of linear equalities and linear non-equalities for cryptography. *Cryptology ePrint Archive*, Report 2010/287, 2010. [http://eprint.iacr.org/2010/287](http://eprint.iacr.org/2010/287)
29. P. Rogaway, M. Bellare, J. Black, and T. Krovetz. OCB: A block-cipher mode of operation for efficient authenticated encryption. In M. K. Reiter and P. Samarati, editors, *ACM CCS 2001*, pages 196–205. ACM Press, November 2001.

### nOAE Does Not Imply nOAE2

In this section, we present a canonical online Authenticated Encryption (AE) scheme \(\Pi^*\) that is nOAE-secure but trivially broken under the nOAE2 notion. Specifically, \(\Pi^*\) is a variant of the STREAM construction; its procedures \(\mathcal{E}.last\) and \(\mathcal{D}.last\) are modified to preserve nOAE security but compromise nOAE2 security. The code is provided in Figure 13. The modification involves, in \(\mathcal{E}.last\), releasing an additional ciphertext segment \(C_1 \leftarrow E_K(\langle N, i+1, 0 \rangle, A, M)\) along with the original ciphertext segment \(C_0 \leftarrow E_K(\langle N, i, 1 \rangle, A, M)\). The decryption procedure \(\mathcal{D}.last\) attempts to decrypt both \(C_0\) and \(C_1\), and if both are valid, it returns the decrypted message of \(C_0\).

Releasing \(C_1\) does not affect nOAE security. Since \(C_1\) can only be decrypted properly under nonce \(\langle N, i+1, 0 \rangle\), an adversary can only use it in a decryption query \(Dec(u, N, A, C, a)\) with \(C[i+1] = C_1\), where \(u\) is the user of the corresponding encryption query. However, since decryption is in order, the adversary will never pass the decryption of \(C[i]\) because it does not know any valid ciphertext segment under nonce \(\langle N, i, 0 \rangle\) for user \(u\).

**Figure 13: A variant \(\Pi^*\) of the STREAM construction that is nOAE-secure but trivially broken under nOAE2. It is built on top of a conventional AE scheme \(\Pi = (K, E, D)\).**

```plaintext
procedure \(\mathcal{E}.init(K, N)\)
    return \((K, N, 1)\)

procedure \(\mathcal{E}.next(S, A, M)\)
    \((K, N, i) \leftarrow S\); \(S \leftarrow (K, N, i + 1)\)
    \(C \leftarrow E_K(\langle N, i, 0 \rangle, A, M)\)
    return \((C, S)\)

procedure \(\mathcal{E}.last(S, A, M)\)
    \((K, N, i) \leftarrow S\)
    \(C_0 \leftarrow E_K(\langle N, i, 1 \rangle, A, M)\)
    \(C_1 \leftarrow E_K(\langle N, i + 1, 0 \rangle, A, M)\)
    return \((C_0, C_1)\)

procedure \(\mathcal{D}.init(K, N)\)
    return \((K, N, 1)\)

procedure \(\mathcal{D}.next(S, A, C)\)
    \((K, N, i) \leftarrow S\); \(S \leftarrow (K, N, i + 1)\)
    \(M \leftarrow D_K(\langle N, i, 0 \rangle, A, C)\)
    return \((M, S)\)

procedure \(\mathcal{D}.last(S, A, C)\)
    \((K, N, i) \leftarrow S\); \((C_0, C_1) \leftarrow C\)
    \(M \leftarrow D_K(\langle N, i + 1, 0 \rangle, A, C_1)\)
    if \(M = \bot\) then return \(\bot\)
    else return \(D_K(\langle N, i, 1 \rangle, A, C_0)\)
```

In contrast, it is straightforward to break the nOAE2 security of \(\Pi^*\). The adversary first calls \(\mathcal{E}.init(1, N)\) for an arbitrary nonce \(N\) to get an index \(j\). It then calls \(\mathcal{E}.last(1, j, A, M)\) for an arbitrary AD \(A\) and message \(M\) to obtain a ciphertext segment \((C_0, C_1)\). Finally, it makes a decryption query \(Dec(1, N, A, C, I, 0)\), with \(A = (A, A)\) and \(C = (C_1, C_1)\), and \(I = (2)\), meaning it only asks for a decryption of the second ciphertext segment. The adversary outputs 1 if the decryption oracle returns true, and outputs 0 otherwise. In the real world, the first segment of \(C\) is invalid but never checked, and the second segment of \(C\) is decrypted correctly. Hence, the adversary wins with an advantage of 1.

### Key-Collision Attacks

In this section, we demonstrate how to use Biham’s key-collision attack on DES [5] to break the (multi-user) PRF and AE security.

#### B.1 PRF Attack

Let \(F : \{0, 1\}^k \times \mathcal{M} \to \{0, 1\}^n\) be a keyed function. Let \(r\) be an arbitrary integer such that \(r \geq \lceil (k + 2)/n \rceil\). Let \(p, q \geq 1\) be integers such that \(pq \leq 2^k\).

**The Attack:**
Adversary \(\mathcal{A}\) first picks arbitrary distinct messages \(M_1, \ldots, M_r \in \mathcal{M}\) and queries \(C_{i,1} \leftarrow Eval(i, M_1), \ldots, C_{i,r} \leftarrow Eval(i, M_r)\) for every \(i = 1, \ldots, q\). It then picks arbitrary distinct keys \(K_1, \ldots, K_p \in \{0, 1\}^k\) and computes \(C^*_{j,1} \leftarrow F(K_j, M_1), \ldots, C^*_{j,r} \leftarrow F(K_j, M_r)\) for every \(j = 1, \ldots, p\). If there exist \(i \leq q\) and \(j \leq p\) such that \(C_{i,\ell} = C^*_{j,\ell}\) for every \(\ell = 1, \ldots, r\), the adversary outputs 1; otherwise, it outputs 0.

**Real World Analysis:**
In the real world, if there is an adversarial key \(K_j\) that coincides with the key of user \(i\), the adversary will output 1. Since the user keys are chosen uniformly at random, this happens with probability \(1 - \left(1 - \frac{p}{2^k}\right)^q\).

To simplify this bound, we use the following technical result from [17]:

**Lemma 4:**
[17] Let \(q \geq 1\) be an integer and \(0 < a \leq 1/q\). Then \((1 - a)^q \leq 1 - qa/2\).

Using Lemma 4 with \(a = \frac{p}{2^k}\) indicates that in the real world, the chance that the adversary outputs 1 is at least \(\frac{pq}{2^{k+1}}\).

**Ideal World Analysis:**
Assume there are no two keys \(K_i\) and \(K_j\) such that \((C^*_{i,1}, \ldots, C^*_{i,r}) = (C^*_{j,1}, \ldots, C^*_{j,r})\). For real PRF constructions, this assumption is very likely to hold for an appropriately large \(r\). In the ideal world, the oracle answers are independent, truly random strings, and thus the chance that the adversary outputs 1 is at most \(\frac{pq}{2^{nr}}\).