title:High-Throughput Semi-Honest Secure Three-Party Computation with an
Honest Majority
author:Toshinori Araki and
Jun Furukawa and
Yehuda Lindell and
Ariel Nof and
Kazuma Ohara
High-Throughput Semi-Honest Secure Three-Party
Computation with an Honest Majority
Toshinori Araki
NEC Corporation, Japan
PI:EMAIL
Jun Furukawa
NEC Corporation, Japan
PI:EMAIL
Bar-Ilan University, Israel
Yehuda Lindell∗
PI:EMAIL
Ariel Nof∗
Bar-Ilan University, Israel
PI:EMAIL
ABSTRACT
In this paper, we describe a new information-theoretic proto-
col (and a computationally-secure variant) for secure three-
party computation with an honest majority. The proto-
col has very minimal computation and communication; for
Boolean circuits, each party sends only a single bit for every
AND gate (and nothing is sent for XOR gates). Our protocol
is (simulation-based) secure in the presence of semi-honest
adversaries, and achieves privacy in the client/server model
in the presence of malicious adversaries.
On a cluster of three 20-core servers with a 10Gbps con-
nection, the implementation of our protocol carries out over
1.3 million AES computations per second, which involves
processing over 7 billion gates per second. In addition, we
developed a Kerberos extension that replaces the ticket-
granting-ticket encryption on the Key Distribution Center
(KDC) in MIT-Kerberos with our protocol, using keys/ pass-
words that are shared between the servers. This enables the
use of Kerberos while protecting passwords. Our implemen-
tation is able to support a login storm of over 35,000 logins
per second, which suﬃces even for very large organizations.
Our work demonstrates that high-throughput secure com-
putation is possible on standard hardware.
INTRODUCTION
1.
1.1 Background
In the setting of secure computation, a set of parties with
private inputs wish to compute a joint function of their
inputs, without revealing anything but the output. Pro-
tocols for secure computation guarantee privacy (meaning
∗
Supported by the European Research Council under the ERC con-
solidators grant agreement n. 615172 (HIPS) and by the BIU Center
for Research in Applied Cryptography and Cyber Security in conjunc-
tion with the Israel National Cyber Bureau in the Prime Minister’s
Oﬃce.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978331
Kazuma Ohara
NEC Corporation, Japan
PI:EMAIL
that the protocol reveals nothing but the output), correct-
ness (meaning that the correct function is computed), and
more. These security guarantees are to be provided in the
presence of adversarial behavior. There are two classic ad-
versary models that are typically considered: semi-honest
(where the adversary follows the protocol speciﬁcation but
may try to learn more than allowed from the protocol tran-
script) and malicious (where the adversary can run any arbi-
trary polynomial-time attack strategy). In the information-
theoretic model, security is obtained unconditionally and
even in the presence of computationally unbounded adver-
saries. In contrast, in the computational model, security is
obtained in the presence of polynomial-time adversaries and
relies on cryptographic hardness assumptions.
Despite its stringent requirements, it has been shown that
any polynomial-time functionality can be securely computed
with computational security [25, 12, 3] and with information-
theoretic security [2, 8]. These results hold both for semi-
honest and malicious adversaries, but an honest majority
must be assumed in order to obtain information-theoretic se-
curity even for semi-honest adversaries. There are two main
approaches to secure computation protocols: the secret- shar-
ing approach (followed by [2, 8, 12]) works by having the
parties interact for every gate of the circuit, whereas the
garbled-circuit approach (followed by [25, 3]) works by hav-
ing the parties construct an encrypted version of the circuit
which can be computed at once. Both approaches have im-
portance and have settings where they perform better than
the other. On the one hand, the garbled-circuit approach
yields protocols with a constant number of rounds. Thus,
in high-latency networks, they far outperform secret-sharing
based protocols which have a number of rounds linear in the
depth of the circuit being computed. On the other hand,
protocols based on secret-sharing typically have low band-
width and send small messages per gate, in contrast to gar-
bled circuits that are large and costly in bandwidth. This
limits the potential throughput of protocols following the
garbled-circuit approach, even when run in very low-latency
networks. Note that information-theoretic protocols typi-
cally rely on simple operations making them fast (but no
constant-round protocol for this setting is known to exist
and this is conjectured to be hard if not impossible [14]).
Another question determining the type of protocol to use
is whether or not high throughput or low latency is the goal.
If low latency is needed (and the circuit being computed is
deep), then constant-round protocols like [25] outperform
secret-sharing based protocols, even on very fast networks.
805However, these same protocols fail to achieve high though-
put due to the large bandwidth incurred.
Due to this situation, it is important to develop protocols
for low and high latency networks, with better response time
and/or throughput.
1.2 Our Results
In this paper, we focus on the question of achieving se-
cure computation with very high throughput on a fast net-
work (without utilizing special-purpose hardware beyond
the widespread Intel AES-NI and AVX instruction sets).
The challenge in achieving this is both on the computational
and network levels. Speciﬁcally, a protocol achieving very
high throughput would need to both be very simple compu-
tationally and also utilize very little bandwidth. Achieving
both of these tasks is challenging. The BGW protocol [2]
for semi-honest adversaries requires each party to send 3
ﬁeld elements to each other party per multiplication gate,
whereas the Sharemind protocol [4, 5, 27] (in its latest op-
timized version [16]) requires each party to send 5 elements
per multiplication gate, and further reduces the number of
ﬁeld multiplications. For Boolean circuits and 3 parties, this
translates to sending just 12 bits per AND gate in BGW and
sending just 10 bits per gate in Sharemind.
A new protocol. We describe a new three-party proto-
col that is both extremely simple and has seemingly optimal
bandwidth. Our protocol is suitable for arithmetic circuits
over any ﬁeld or over the ring modulo 2n. Addition gates
require local addition only, and multiplication gates require
that each party send just a single ﬁeld/ring element to one
other party. In the Boolean case, this means that each party
transmits a single bit only per AND gate.1 Furthermore,
the computation in our protocol is extraordinarily simple:
in the case of Boolean circuits, each party carries out a sin-
gle XOR operation per XOR gate, and 2 AND and 3 XOR
operations per AND gate. Since all operations are merely
XOR and AND, this also lends itself to parallelization on
standard computers (in particular, XOR and AND over 128
bit registers can be carried out in the same time as for a
single bit using Intel intrinsics).
Security. We prove that our protocol is secure in the
presence of semi-honest adversaries with at most one cor-
rupted party, under the standard simulation-based deﬁni-
tions. The basis of our protocol is information theoretic
(and in fact perfectly secure). However, we save on commu-
nication by generating correlated randomness computation-
ally, and therefore our overall protocol is computationally
secure. (This combination enables us to achieve simple op-
erations and save on additional bandwidth.) In addition to
the above, we also consider a client/server model where any
number of clients send shares of their inputs to 3 servers that
carry out the computation for the clients and return the
results to them (without learning anything). This model
makes sense for “outsources secure computation services”
and indeed is the business model of Cybernetica. We show
that in this model, our protocol actually achieves privacy in
the presence of malicious adversaries, meaning that a single
malicious server cannot learn anything about the input or
output. (We stress that this notion is strictly weaker than
simulation-based security in the presence of malicious ad-
1
This is “seemingly” optimal in terms of bandwidth, but this has not
been proven and seems hard to do so; see [14].
versaries, and in particular, does not guarantee correctness.
Nevertheless, it does guarantee that privacy is not breached
even if one of the servers behaves maliciously.)
Number of parties. As in Sharemind [4, 5], our proto-
col is speciﬁcally designed for 3 parties with at most one
corrupted. This is unlike BGW [2] that works for any num-
ber of parties with an honest majority. An important open
question left by this paper is the design of a protocol with
comparable complexity that works for any number of par-
ties. This seems to be very challenging, based on attempts
that we have made to extend our protocol.
Experimental results. We implemented our new pro-
tocol for Boolean circuits in C++ and using standard op-
timizations. In order to take advantage of the very simple
operations required in our protocol, we used Intel intrinsics
in order to carry out many executions in parallel. This is
described in detail in Section 5.1. We ran our experiments
on a cluster of three nodes, each with two 10-core Intel Xeon
(E5-2650 v3) processors and 128GB RAM, connected via a
10Gbps Ethernet. (We remark that little RAM was utilized
and thus this is not a parameter of importance here.) We
carried out two main experiments, both based on securely
computing the AES circuit on shared keys.
First, we computed AES in counter mode, with the aim
of obtaining maximal throughput. Using the full power of
the cluster (all cores), we computed over 1.3 million AES
operations per second. Furthermore, utilizing a single core
we achieved 100,000 AES operations per second, and utiliz-
ing 10 cores we achieved amost 1 million AES operations
per second. As we will show below in Section 1.3, this way
outperforms all previous protocols of this type.
Second, we wished to demonstrate that this type of proto-
col can be incorporated into a real system. We chose to in-
tegrate our protocol into a Kerberos KDC in order to carry
out Ticket-Granting-Ticket encryption without any single
server holding the encryption key (whether it be a server’s
key or user’s hashed password). Such an architecture pro-
tects against administrators stealing passwords, or an at-
tacker who breaches the network being able to steal all users’
passwords. (We stress that in Kerberos, the raw password
is never used so once the hashed password is stolen the at-
tacker can impersonate the user.) We obtained a latency of
110ms on the server and 232ms on the client (over a LAN)
for the entire Kerberos login (excluding database lookup).
Given that this is for the purpose of user authentication,
this is well within the acceptable range. In addition, we are
able to support a login storm of over 35,000 user authen-
tications per second, which is suﬃcient even for very large
organizations.
Our results demonstrate that secure computation can be
used to solve large-scale problems in practice (at least, for
the cases that semi-honest security or privacy for a malicious
adversary suﬃces).
1.3 Related Work
We compare our results with previously reported results
on secure AES computation for 3 parties with an honest
majority and semi-honest adversaries; see Table 1.
We stress that this table gives only very partial informa-
tion since diﬀerent hardware was used for each; we provide
it to show the progress made and where we ﬁt into it. How-
ever, fortunately, the setup used by us is almost the same
as that of the latest Sharemind results in [22] (using op-
806timized code that was completely rewritten), and we now
provide an in-depth comparison to it. The benchmarking
in [22] was carried out between three computers with two 8-
core Intel Xeon (E5-2640 v3) processors and 128GB RAM,
connnected via a 10Gbps Ethernet (this conﬁguration is de-
scribed in [16] and by personal communication is that used
in [22]), which is almost identical to our conﬁguration de-
scribed above. The number that we provide in Table 1 for
this work is when utilizing 16 cores, and thus this is an
almost identical conﬁguration as Sharemind [22] (with 20
cores we achieve 1,324,117 AES operations per second). Ob-
serve that our latency (response time) is 70% of [23] and we
achieve a throughput that is 14 times faster than [22] (and
so over an order of magnitude improvement). In fact, using
a single core and a 1Gbps connection, we achieve approxi-
mately 100,000 AES operations per second (and latency of
only 129ms); thus we can outperform the best Sharemind
results on a very basic setup.
Year
2010
2012
2013