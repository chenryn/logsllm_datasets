updates are sparse, and some devices have been compromised.
3.3 Using Location in Authentication
By obtaining a set of locations where the user may be, we enable
pre-authorized locations to issue binary, “yes” or “no” type queries
about whether the user can be present at the registered location.
The reason for such queries is to avoid leaking the location of the
user unnecessarily. If the user has just presented a security token
at a location (e.g., a credit card), responding “yes” would conﬁrm
that the user is at the location, without leaking any additional in-
formation. If the response is “no”, the service gains no additional
information. A single third party with many pre-registered loca-
tions could attempt to maliciously narrow down the area where a
user may be, by issuing multiple queries. However, such entities
can be easily singled out and submitted to throttling or blocked en-
tirely. As a result, location can be made part of a security decision
without actually divulging the exact coordinates of the user.
Responses can be generated using a variety of policies. For ex-
ample, we may want to simply check that there are no strong indi-
cators placing the user at a different location, essentially, looking
for paradoxes (the user cannot be in two places at once). Alterna-
tively, we may actually require evidence that the user is actually
at a particular location. In this paper, we adopt and evaluate the
ﬁrst strategy. Particularly, we respond negatively, only if there is an
Avatar that cannot be at the querying location and its conﬁdence is
over a rejection threshold. Different services may require different
thresholds, as not all actions have the same gravity. For example,
the wrong person entering the gym is not as a serious problem as a
fraudster withdrawing a large sum from a bank account.
3.4 An Example
We illustrate our approach through the example shown in Fig. 2.
At 8:00 AM, the user is at home with all of his devices, including
a tablet, a smartphone, sensors in his shoes, and his smartwatch,
getting ready to walk to work. His WiFi access point also conﬁrms
that all of his devices are at home. He leaves home without his
tablet and, at 8:15 AM, he stops at a coffee shop to buy a cup of
coffee using his credit card. At this point, there are two Avatars.
The ﬁrst, is associated with the user’s tablet. Since it is only a
single device and it is idle, the conﬁdence for that Avatar is low.
However, because the tablet is powered on, it still sends regular
Figure 1: “Things” owned by users and third-parties that can
observe them. By collecting reports containing location infor-
mation and proximity between things we can estimate user lo-
cation.
users. These hints that can be signiﬁcantly strengthened, when in-
dividual users can be authenticated. For example, both iOS and
Android support multiple users, and certain BMW vehicles also
support driver proﬁles.
Certain devices, like many wearables, do not feature GPS. How-
ever, they are able to connect to other devices through a wireless
protocol, like Bluetooth, WiFi, etc. Such devices provide a differ-
ent type of hint regarding the location of the user; because they
are usually personal devices and the connection protocols have a
limited range, being able to connect, or even just establishing the
presence, of one indicates that the user is nearby. For example,
paired Bluetooth devices can establish each other’s presence, while
the Bluetooth Low Energy (BLE) protocol enables the same with-
out pairing. If we can establish the location of a single device in
such a cluster, we are able to “ground” it and locate the user. Sim-
ilarly, it is sufﬁcient that a single device in a cluster is able to con-
nect, directly or indirectly, to the Internet to make this information
available to other parties.
Moreover, many IoT devices are not only able to sense each other
but also the user. Smartphones and tablets provide PIN-based or
even biometric-based authentication, ﬁtness wearables can estab-
lish user movement and heart rate, while smart in-body health de-
vices, such as insulin pumps, are always on the user. Thus, they can
also help us detect when they are actually used by the user instead
of being idle.
Hints on the location of a user are be also provided by third par-
ties that observe one of the objects that the user owns. Observations
are not limited to devices; tokens, like credit cards and passwords,
are also “things” that can be observed. For instance, the bank ob-
serves that the user has used a debit card at an ATM or POS, and an
employer notices that the user entered his credentials at a keypad-
protected ofﬁce door.
An example of devices and tokens owned by users and third par-
ties that can observe them is depicted in Fig. 1. Collecting informa-
tion from user-owned devices and third-parties provides us with the
locations of his things. We assume that the data are collected under
the purview of the user, for example, by a service hosted on the
cloud with the user retaining ownership and control of the data. Of
course, estimating the location of a user’s things does not mandate
that the user is necessarily with them, which raises the question:
“How conﬁdent are we that the user is actually with a set of his
things?”, which is described in Sec. 5.
Figure 2: Example scenario, where a user walks from his home
to the ofﬁce, stopping for a coffee.
reports, allowing us to limit the range of that Avatar around the
house. The second Avatar is at the coffee shop, where an activity
report from the user’s bank has placed his credit card, and where
the smartphone reported itself and the rest of the user’s devices.
Finally, the user arrives at the ofﬁce at 8:35 AM. He swipes his
badge to enter, at which point the ofﬁce queries the service. The
moment the query is made, there are still two Avatars, one at home
and one on the street very close to the ofﬁce location. Notice that
the credit card previously used at the coffee shop lingers with the
Avatar it was associated with when it was used. Our goal is to both
identify that the Avatar located at home corresponds to idle devices
and, as such, we are less conﬁdent it corresponds to the real user,
as well as be more conﬁdent that the moving Avatar corresponds to
the actual user. This way we can respond correctly to the query.
4.
Icelus ARCHITECTURE
We realize the approach presented in Sec. 3 with the Icelus sys-
tem. Its architecture, which we present here, can incorporate the
majority of IoT-devices that could be of use. Icelus organizes IoT
devices into a hierarchy, where more powerful interconnected de-
vices collect data from smaller devices, as depicted in Fig. 3. In
turn, those devices send the information to a hub, which hosts the
Icelus service.
4.1 The Icelus Hub
The brain of the system is a hub collecting information from var-
ious sources. We assume that the Hub is under the control of the
user, so the data collected are never seen by third parties. We envi-
sion that it is hosted either in the cloud [42] or in a smart-home hub
device [30]. Hosting in the cloud provides us with all of its bene-
ﬁts and risks. We assume that the cloud provider is not malicious,
however, it may be curious or compromised. In Sec. 6, we present
a privacy-preserving extension that can alleviate such risks. Other
approaches, such information-ﬂow tracking [45] and SGX [54] are
also applicable.
4.2 User-Owned Devices
Based on their intrinsic characteristics and communication capa-
bilities, we classify the devices that can be part of Icelus into the
classes described below:
• Trinkets are devices that can connect to the Internet directly
(e.g., over WiFi, LAN, or 3G) or indirectly (e.g., by tethering
through Bluetooth with a device that is connected). Such devices
include smartphones, smartwatches, and even Internet-connected
Figure 3: Architecture overview.
cars [14]. To join the system, Trinkets need to ﬁrst register
with the Hub, during which the two exchange their public keys.
Thereafter, the Trinket uses its secret key to digitally sign all the
information it reports and the Hub’s public key to encrypt trans-
mitted information.
• Fragments are similar to Trinkets, but cannot directly connect
to the Internet. They are, however, able to connect to a Trinket
directly (e.g., over Bluetooth). Such devices may include wrist
wearables like a Fitbit, other smart wearables like shoes, and
could even be in-body devices. A multitude of devices in the
IoT are Fragments. Based on whether it is possible to load addi-
tional client software on them, they are more like Trinkets, in the
sense that they can register with the Hub and sign their data, even
though they still rely on a Trinket to relay their data to the Hub.
If public-key cryptography cannot be supported, a shared secret
key can be established with the Hub to use more lightweight data
signing algorithms. On the other hand, other Fragments devices
will rely on Trinkets for most operations. In the most restricted
case, a Trinket may only be able to report that a Fragment is in
the vicinity (e.g., BLE tags [4]).
• Tokens are devices that cannot actively connect to anything in-
cluding things such as smartcards, magnetic identiﬁcation cards
(commonly referred to as swipe cards), RFID tags, etc. Tokens
are passive and can only be observed through another device,
commonly some short of a reader.
4.3 Beacons
Beacons are third-party devices, or even entire systems, able to
report information about the whereabouts of a user or one of his
devices. Reports can be generated after the user interacts with a
Beacon or when it observes one of the user’s devices. For example,
the user interacts with a Beacon when entering valid authentication
credentials at a physical terminal or when using a credit card at a
POS. While, a Beacon observes the user’s smartphone, when it au-
thenticates with a wireless hotspot. In both cases, the location of
Beacons is known. Services associated with Beacons must regis-
ter with the Hub to be able to push observation information to it.
However, it is also possible to extract information already available
in other channels. For example, many banks transmit credit card
usage reports through SMS or email, which can be used to locate
Tokens like credit cards.
8:00AM8:15AM8:35AMCan the user be in front of the oce building?TrinketTrinketFragmentFragmentFragment4.4 Avatars
An Avatar is a digital estimate of a user’s location in the physical
world. Each Trinket reporting geolocation information attempts to
generate an Avatar at its location and attaches to it along with all
its slave Fragments, so even the ones that are not with the user will
create their own. Any devices in the same vicinity will be joined
under one Avatar. We deﬁne the same vicinity to be as a circle
with a center on the previous Avatar location coordinates with a
radius equal to 8 meters which is the worst case [61] accuracy of
standard commercial GPS systems. When a Token appears, due to
an observation from another device or a beacon, it is linked to the
Avatar at the location of the report. Because Tokens appear only
momentarily when they are used, they linger with the Avatar they
are connected to, until a new report about them is received. Tokens
appearing away from existing Avatars, create a new Avatar at the
location where they were observed.
The Conﬁdence Score of an Avatar represents the conﬁdence
of our system that it corresponds to the actual user. Our approach
can support a variety of algorithms for calculating it. In Sec. 5, we
present one such algorithm.
4.5 Servicing Location Queries - Sites
The entities that may query the system about whether it is possi-
ble for the user to be physically present at a location are referred to
as Sites. A Site can be part of Icelus itself, because it is property of
the user (e.g., the Trinkets corresponding to the user’s home front
door or car), or a third-party, such as the user’s bank or employer.
Sites need to be authorized by the user and registered with the Hub,
before being allowed to issue queries, by supplying the locations
they wish to place queries for.
The Hub listens for queries from Sites, which semantically fol-
low the format: “Can the user be at location L?” When a query
is received, it asks Trinkets to report with fresh data. The system
can then wait for a bounded amount of time, collecting new reports
and updating its model of possible user locations. Note that the
model is continuously maintained independently of whether any
requests have been made, by having devices report periodically or
opportunistically. As a result, Icelus can always issue a response
in a bounded amount of time, the only thing that changes is the
freshness of the model used to make a decision, which could be
milliseconds or few-minutes old.
The Hub then examines if an Avatar with conﬁdence score higher,
than the rejection threshold conﬁgured for the Site, exists in a loca-
tion other than L. The threshold can also be a global setting. Our
design is ﬂexible; other factors can be introduced when respond-
ing to queries and a variety of policies can be implemented. For
instance, instead of immediately responding negatively, Icelus can
prompt users and ask them to authenticate on their devices that have
such capabilities.
5. AVATAR CONFIDENCE SCORE
An Avatar is a in reality a set of collocated devices in an area of a
given radius, and the Conﬁdence Score of each Avatar is a quantity
representing the probability that the user is physically “near” that
set of devices.
In this section, we present an algorithm for calculating this like-
lihood, however, our design is not inherently bound with the pre-
sented Conﬁdence formula. Given its deﬁnition, an Avatars Conﬁ-
dence intuitively should be directly correlated with the number of
devices in a given area where higher number (of co-located devices)
should be positively correlated with a higher conﬁdence score and
a higher probability thus that a user is also present.
While our model is based on this intuition, we will see that there
are additional factors in play, that signiﬁcantly seem to affect the
likelihood a user is present, other than simply the number of de-
vices. The most prominent of which is user actions, that decisively
identify idle or forgotten devices with devices that are in his pres-
ence. User Activities is a feature Icelus exploits and plays a central
role to our Conﬁdence calculation mechanism.
5.1 Device Credit
We call “Device Credit”, the likelihood a user is co-located with
a device at a given time and place.
In statistical terms, we are
deﬁning a probability where: given that a device sends a report
to Icelus, a user is also physically in the vicinity of that device.
More formally expressed, we are deﬁning “Device Credit” to be
the probability given by the following Bayesian formula:
P (D | U ) × P (U )
P (D)
P (U | D) =
Where,
is the intended user.
(1)
• P (U | D) Is what we are looking for, given that a device report
is received by Icelus, what is the likelihood the user is collocated.
• P (D | U ) Formally, it is the probability that given a “sighting”
of the user at any time, what is the expected probability he also
has the device with him. In simpler terms: the probability the
user is “carrying” the device.
• P (U ) The probability that if someone is operating the device it
• P (D) How frequently the device is used and thus it is active and