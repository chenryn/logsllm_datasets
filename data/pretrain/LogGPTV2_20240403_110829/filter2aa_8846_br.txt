更好的权衡决定。
55
安全架构 SA1
将主动安全指导的想法引入到软件设计过程中
措施
A. 维护推荐的软件框架列表
在整个组织内贯穿软件项目，确定正在使用的常用第
三方软件库和框架。一般来说，这种需要不是对于依赖软
件组件的详尽搜索，而是为了获得最常用的高级别组件。
根据第三方组件的核心特点，从部件列表将这些组件
分为不同的功能组。此外，注意到跨越项目团队的每个组
件的普遍使用情况， 以权衡第三方代码的信赖度。使用此
加权列表作为指导，创建一个组件清单，以宣传作为开发
组织的推荐组件。
对于推荐列表中包含的内容，有几个决定因素。虽然
列表可以不进行专门研究就可创建列表，但是我们建议，
调查每个事件的历史、跟踪记录漏洞响应、对组织而言功
能的适当性、第三方组件使用的复杂性等等。
这份列表应由高级开发人员和架构师创建，但还应包
括经理和安全审计员的介入。创建后，这个满足功能分组
的推荐组件列表应当向开发组织进行宣传。最终目标是为
项目团队提供为人熟知的默认资源。
B. 将安全原则明确运用到设计中
在设计过程中，项目团队的技术人员应当使用一个简
短的安全指导原则列表，作为系统详细设计的核对表。通
常情况下，安全原则包括深度防御、最薄弱环节的保护、
安全功能的简单设计、安全故障、安全性和实用性的平衡、
最低权限的使用、模糊安全的避免等。
特别是在边缘界面，设计团队应当考虑整个系统范围
中的每一项原则，并确定可添加在每个这样的界面上的特
点，以加强安全性。一般来说，这些应该受到限制，使其
只需在功能要求常规实现成本之外做出少量额外工作，其
他较大的工作量应在未来发布中提及并规划。
这个过程应该在安全意识培训后，由每个项目团队执
行，这有助于和更加安全、精明的工作人员进行合作，以
作出设计决定。
结果
✦专门防止意外的依
赖性和选择一次性实
现；
✦利益相关者意识到
因选择的文档和框架
而增加的项目风险；
✦为将安全机制积极
得应用到设计中，而在
开发过程中建立协议。
额外成功指标
✦>80％的开发人员在
过去1年里大概了解了
软件框架建议；
✦>50％的项目设计了
安全原则的自我报告
应用。
额外成本
✦对软件框架建议的
建立、维护和了解；
✦项目对安全原则的
持续分析和应用。
额外人员
✦架构师（2－4天/年）
✦开发人员（2－4天/
年）
✦安全审计员（2－4
天/年）
✦经理（2天/年）
相关等级
✦教育与指导－1
 56
安全架构 SA2
将软件设计过程引导向已知安全服务和默认安全设计
措施
A. 明确并促进安全服务和基础设施
组织应当确定与安全功能相关的共享基础设施或服
务。这通常包括：单点登录服务、企业目录系统、访问控
制或有权限的服务、身份验证系统。通过收集和评估可重
复使用的系统，建立这种资源的清单，并根据系统履行的
安全机制将它们分类。这也有助于考虑为什么一个开发团
队想要整合这种资源，比如：使用共享资源的好处。
如果每个类别中存在多种资源，一个组织应该在该类
别中选择并规范化一个或多个类别的共享服务。由于未来
软件的开发将依赖于这些选择的服务，每项服务都应该进
行彻底地审计，以确保理解了安全态势的底线。对于每个
选定的服务，应由开发团队建立设计指导，以了解如何与
系统集成。这种指导在集成后，应当向开发团队提供培训、
指导、指导方针和标准。
这样做的好处包括：促进已知的安全系统、简化项目
设计团队的安全指导、为围绕使用共享安全服务的应用程
序建立保证并明确方向。
B. 明确来自架构的安全设计模式
就常用架构类型而言，组织中的每个软件项目都应该
被归类。常见的类别包括：客户服务器应用程序、嵌入式
系统、桌面应用程序、面向Web的应用程序、Web服务平
台、事务处理中间件系统、主机应用程序等。根据组织的
专业性，可能需要根据开发语言、处理器架构、甚至部署
的时间安排，做出更详细的分类。
对于普通的软件架构类型，可衍生出一系列代表执行
安全功能可靠方法的常用设计模式，并应用到组织软件项
目的每个设计之中。这些安全设计模式代表可研究或购买
的通用设计元素，如果这些自定义的模式根据你的组织要
求更加具体，它通常会更有效。示例模式包括：单点登录
子系统、跨层代表模型、加强的界面设计、职能分离授权
模型、集中化的日志模式等。
由架构师、高级开发人员和其他技术利益相关者，在
设计阶段确定适用的和适当的身份验证工作模式。
结果
✦将资产详细地映射
到用户角色，以鼓励在
设计时更好的区分；
✦为提供安全保证和
功能，而可重复使用的
设计模块；
✦使用已建立的安全
设计技术，以增加对软
件项目的信心。
额外成功指标
✦>80％的项目在过去
6个月里更新了访问权
限矩阵；
✦>80％的项目团队在
过去6个月里大概了解
了应用程序的安全模
式。
额外成本
✦扩充或者许可应用
程序安全模；。
✦持续维护项目的访
问权限矩阵。
额外人员
✦架构师（2－4天/年）
✦开发人员（1－2天/
年）
✦经理（1－2天/年）
✦业务拥有者（1天/
年）
✦安全审计员（1－2
天/年）
相关等级
✦教育与指导－1
57
安全架构 SA3
正式控制软件设计过程并验证安全部件的使用
措施
A. 建立正式的参照架构和平台
当与共享的安全服务集成、并使用每种架构具体的安
全模式后，项目团队应选择一组执行这些功能的代码集，
以作为一个共享代码库的基础。这些共享的基本代码最初
可作为每个项目都需使用的一组普遍推荐库集合，它可以
随着时间的推移，发展成为一个或多个软件架构，以代表
项目团队建立他们自己软件的参考平台。参考平台的示例
包括： Web应用程序视图控制器架构、支持事务处理的
后端系统库文件、Web服务平台框架、客户端服务器应用
程序框架、中间件的可插拔业务逻辑框架等。
另一种建立初始参考平台的方法是在生命周期的早期
选择一个特定的项目，并让安全人员使用该生命周期，以
一个通用的方式建立安全功能，以便从项目中提取该功能
并利用到该组织的其他项目中。
不管采用什么样的建立方式，参照平台在审计和与安
全相关的审核的速度方面有优势，并可以提高开发效率，
降低维护费用。
架构师、高级开发人员和其他技术利益相关者应参与
设计和建立参照平台。创建后，必须有一个团队对其进行
持续的维护和更新。
B. 验证框架、模式和平台的使用
在项目的例行审计中，需要对项目工件进行额外分析，
以衡量推荐框架、设计模式、共享的安全服务以及引用参
考平台的使用情况。虽然在例行审计中进行，这一活动的
目的是尽可能多地从项目团队中收集反馈信息，以衡量他
们各自积极的安全工作。
总体而言，在项目团队中验证几个因素是很重要的。
确定非推荐框架的使用，以确定在推荐框架与该组织的功
能需求之间是否存在差异。检查未使用或不正确使用的设
计模式和引用参考平台模块，以确定是否需要更新。另外，
随着组织的发展，项目团队希望看到在引用参考平台上执
行更多不同的功能。
这项分析由任何具有安全常识的技术人员执行。而收
集的度量标准，则由经理和利益相关者从每个项目分析整