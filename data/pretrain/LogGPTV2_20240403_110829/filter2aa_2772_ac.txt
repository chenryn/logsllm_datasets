# Common Object File Format

**Document Version: SPRAAO8 – April 2009**

**Submit Documentation Feedback**

## Symbol Table Structure and Content

### Overview
The symbol table in the Common Object File Format (COFF) is a critical component that contains information about all symbols used in the object file. The order of symbols in the symbol table is significant, as they appear in the sequence shown in Figure 4.

### Symbol Types
- **Defined Global Symbols**
- **Undefined Global Symbols**
- **Static Variables**

### Symbol Table Organization
The symbol table entries are organized in a specific order:
1. Defined global symbols
2. Undefined global symbols
3. Static variables

### Importance of Symbol Order
The order of symbols in the symbol table is crucial for proper linking and debugging. They appear in the sequence as shown in Figure 4.

### Static Variables
Static variables refer to symbols defined in C/C++ with the `static` storage class outside any function. If multiple modules use symbols with the same name, making them static confines their scope to the module that defines them, thus eliminating multiple-definition conflicts.

### Symbol Table Entry Contents
Each symbol entry in the symbol table contains the following fields:
- **Name (or an offset into the string table)**
- **Type**
- **Value**
- **Section it was defined in**
- **Storage class**

For MSP430 and TMS470, additional fields include:
- **Basic type (integer, character, etc.)**
- **Derived type (array, structure, etc.)**
- **Dimensions**
- **Line number of the source code that defined the symbol**

### Section Names
Section names are also defined in the symbol table.

### Symbol Table Entry Format
All symbol entries, regardless of class and type, have the same format in the symbol table. Each symbol table entry contains 18 bytes of information, as detailed in Table 16. Some symbols may also have an 18-byte auxiliary entry, as listed in Table 17.

#### Table 16: Symbol Table Entry Contents
| Byte Number | Type       | Description                                                                 |
|-------------|------------|-----------------------------------------------------------------------------|
| 0-7         | Char       | Contains either an 8-character symbol name padded with nulls, or a pointer into the string table if the name is longer than eight characters. |
| 8-11        | Long (1)   | Symbol value; storage class dependent. For C6000, the type is integer.       |
| 12-13       | Short      | Section number of the symbol.                                               |
| 14-15       | Unsigned short | Reserved.                                                                   |
| 16          | Char       | Storage class of the symbol.                                                |
| 17          | Char       | Number of auxiliary entries (always 0 or 1).                                |

### Special Symbols
Special symbols generated by the compiler, assembler, and linker are included in the symbol table. These symbols contain ordinary symbol table information and an auxiliary entry. Table 17 lists these special symbols.

#### Table 17: Special Symbols in the Symbol Table
| Symbol  | Description                                          |
|---------|------------------------------------------------------|
| .text   | Address of the .text section                          |
| .data   | Address of the .data section                          |
| .bss    | Address of the .bss section                           |
| etext   | Next available address after the end of the .text output section |
| edata   | Next available address after the end of the .data output section |
| end     | Next available address after the end of the .bss output section |

### Symbol Name Format
The first eight bytes of a symbol table entry (bytes 0-7) indicate the symbol's name:
- If the symbol name is eight characters or less, it is stored directly in bytes 0-7.
- If the symbol name is greater than eight characters, bytes 0-3 contain 0, and bytes 4-7 are an offset into the string table.

### String Table
The string table stores symbols with names longer than eight characters. The field in the symbol table entry that would normally contain the symbol's name points to the symbol's name in the string table. The string table contiguously stores names, delimited by a null byte. The first four bytes of the table contain the table size in bytes.

#### Example: String Table Entries
Figure 5 shows a string table containing two symbol names, "Adaptive-Filter" and "Fourier-Transform". The index in the string table is 4 for "Adaptive-Filter" and 20 for "Fourier-Transform".

### Storage Classes
Byte 16 of the symbol table entry indicates the storage class of the symbol. Storage classes refer to the method in which the C/C++ compiler accesses a symbol. Table 18 lists valid storage classes.

#### Table 18: Symbol Storage Classes
| Mnemonic  | Value | Storage Class                                     |
|-----------|-------|---------------------------------------------------|
| C_NULL    | 0     | No storage class                                  |
| C_AUTO    | 1     | Reserved                                          |
| C_EXT     | 2     | External definition                               |
| C_STAT    | 3     | Static                                            |
| C_EXTREF  | 5     | External reference                                |
| C_LABEL   | 6     | Label                                             |
| C_ULABEL  | 7     | Undefined label                                   |
| C_USTATIC | 14    | Undefined static                                  |
| C_ENTAG   | 15    | Reserved                                          |
| C_MOE     | 16    | Reserved                                          |
| C_REGPARM | 17    | Reserved                                          |
| C_FIELD   | 18    | Reserved                                          |
| C_UEXT(1) | 19    | Tentative external definition                     |
| C_STATLAB(1) | 20 | Static load time label                            |
| C_EXTLAB(1) | 21 | External load time label                          |
| C_VARARG(1)(2) | 27 | Last declared parameter of a function with a variable number of arguments |
| C_BLOCK   | 100   | Reserved                                          |
| C_FCN     | 101   | Reserved                                          |
| C_EOS     | 102   | Reserved                                          |
| C_FILE    | 103   | Reserved                                          |
| C_LINE    | 104   | Used only by utility programs                     |

### Symbol Values
Bytes 8-11 of a symbol table entry indicate the symbol's value. The C_EXT, C_STAT, and C_LABEL storage classes hold relocatable addresses. The value of a relocatable symbol is its virtual address, which changes when the link step relocates a section.

### Section Numbers
Bytes 12-13 of a symbol table entry contain a number indicating the section in which the symbol was defined. Table 19 lists these numbers and the indicated sections.

#### Table 19: Section Numbers
| Mnemonic  | Section Number | Description                                        |
|-----------|----------------|----------------------------------------------------|
| None      | -2             | Reserved                                           |
| N_ABS     | -1             | Absolute symbol                                    |
| N_UNDEF   | 0              | Undefined external symbol                          |
| None(1)   | 1              | .text section (typical)                            |
| None(1)   | 2              | .data section (typical)                            |
| None(1)   | 3              | .bss section (typical)                             |
| None(1)   | 4-32767        | Section number of a named section, in the order encountered |

### Auxiliary Entries
Each symbol table entry can have one or no auxiliary entry. An auxiliary symbol table entry contains the same number of bytes as a symbol table entry (18). Table 20 illustrates the format of auxiliary table entries.

#### Table 20: Auxiliary Table Entry Format
| Byte Number | Type       | Description                                       |
|-------------|------------|---------------------------------------------------|
| 0-3         | Long (1)   | Section length                                    |
| 4-5         | Unsigned short | Number of relocation entries                      |
| 6-7         | Unsigned short | Number of line number entries                     |
| 8-17        | Not used   | Zero filled                                       |

### Important Notice
Texas Instruments Incorporated and its subsidiaries (TI) reserve the right to make corrections, modifications, enhancements, improvements, and other changes to its products and services at any time and to discontinue any product or service without notice. Customers should obtain the latest relevant information before placing orders and should verify that such information is current and complete. All products are sold subject to TI’s terms and conditions of sale supplied at the time of order acknowledgment.

TI warrants performance of its hardware products to the specifications applicable at the time of sale in accordance with TI’s standard warranty. Testing and other quality control techniques are used to the extent TI deems necessary to support this warranty. Except where mandated by government requirements, testing of all parameters of each product is not necessarily performed.

TI assumes no liability for applications assistance or customer product design. Customers are responsible for their products and applications using TI components. To minimize the risks associated with customer products and applications, customers should provide adequate design and operating safeguards.

TI does not warrant or represent that any license, either express or implied, is granted under any TI patent right, copyright, mask work right, or other TI intellectual property right relating to any combination, machine, or process in which TI products or services are used. Information published by TI regarding third-party products or services does not constitute a license from TI to use such products or services or a warranty or endorsement thereof. Use of such information may require a license from a third party under the patents or other intellectual property of the third party, or a license from TI under the patents or other intellectual property of TI.

Reproduction of TI information in TI data books or data sheets is permissible only if reproduction is without alteration and is accompanied by all associated warranties, conditions, limitations, and notices. Reproduction of this information with alteration is an unfair and deceptive business practice. TI is not responsible or liable for such altered documentation. Information of third parties may be subject to additional restrictions.

Resale of TI products or services with statements different from or beyond the parameters stated by TI for that product or service voids all express and any implied warranties for the associated TI product or service and is an unfair and deceptive business practice. TI is not responsible or liable for any such statements.

TI products are not authorized for use in safety-critical applications (such as life support) where a failure of the TI product would reasonably be expected to cause severe personal injury or death, unless officers of the parties have executed an agreement specifically governing such use. Buyers represent that they have all necessary expertise in the safety and regulatory ramifications of their applications, and acknowledge and agree that they are solely responsible for all legal, regulatory, and safety-related requirements concerning their products and any use of TI products in such safety-critical applications, notwithstanding any applications-related information or support that may be provided by TI. Further, Buyers must fully indemnify TI and its representatives against any damages arising out of the use of TI products in such safety-critical applications.

TI products are neither designed nor intended for use in military/aerospace applications or environments unless the TI products are specifically designated by TI as military-grade or "enhanced plastic." Only products designated by TI as military-grade meet military specifications. Buyers acknowledge and agree that any such use of TI products which TI has not designated as military-grade is solely at the Buyer's risk, and that they are solely responsible for compliance with all legal and regulatory requirements in connection with such use.

TI products are neither designed nor intended for use in automotive applications or environments unless the specific TI products are designated by TI as compliant with ISO/TS 16949 requirements. Buyers acknowledge and agree that, if they use any non-designated products in automotive applications, TI will not be responsible for any failure to meet such requirements.

### Additional Resources
For more information on Texas Instruments products and application solutions, visit the following URLs:
- **Products**: [amplifier.ti.com](http://amplifier.ti.com), [dataconverter.ti.com](http://dataconverter.ti.com), [dsp.ti.com](http://dsp.ti.com), [interface.ti.com](http://interface.ti.com), [logic.ti.com](http://logic.ti.com), [microcontroller.ti.com](http://microcontroller.ti.com), [power.ti.com](http://power.ti.com)
- **Applications**: [www.ti.com/audio](http://www.ti.com/audio), [www.ti.com/automotive](http://www.ti.com/automotive), [www.ti.com/broadband](http://www.ti.com/broadband), [www.ti.com/digitalcontrol](http://www.ti.com/digitalcontrol), [www.ti.com/medical](http://www.ti.com/medical), [www.ti.com/military](http://www.ti.com/military), [www.ti.com/opticalnetwork](http://www.ti.com/opticalnetwork), [www.ti.com/security](http://www.ti.com/security), [www.ti.com/telephony](http://www.ti.com/telephony), [www.ti-rfid.com](http://www.ti-rfid.com), [www.ti.com/video](http://www.ti.com/video), [www.ti.com/wireless](http://www.ti.com/wireless)

**Mailing Address**: Texas Instruments, Post Office Box 655303, Dallas, Texas 75265

**Copyright © 2009, Texas Instruments Incorporated**