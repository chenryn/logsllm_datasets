class Example
{
    public static void MyOtherMethod(int parameter) { ... }
    public static void Main()
    {
        Hour lunch = new Hour(12);
        Example.MyOtherMethod(lunch); // implicit Hour to int
conversion
    }
}
If the conversion operator had been declared with explicit, the preceding
example would not have compiled because an explicit conversion operator
requires a cast.
Click here to view code image
Example.MyOtherMethod((int)lunch); // explicit Hour to int conversion
When should you declare a conversion operator as explicit or implicit? If
a conversion is always safe, does not run the risk of losing information, and
cannot throw an exception, it can be defined as an implicit conversion.
Otherwise, it should be declared as an explicit conversion. Converting from
an Hour to an int is always safe—every Hour has a corresponding int value—
so it makes sense for it to be implicit. An operator that converts a string to an
Hour should be explicit because not all strings represent valid Hours. (The
string “7” is fine, but how would you convert the string “Hello, World” to an
Hour?)
Creating symmetric operators, revisited
Conversion operators provide you with an alternative way to resolve the
problem of providing symmetric operators. For example, instead of providing
three versions of operator+ (Hour + Hour, Hour + int, and int + Hour) for
the Hour structure, as shown earlier, you can provide a single version of
operator+ (that takes two Hour parameters) and an implicit int to Hour
conversion, like this:
Click here to view code image
struct Hour
Download from finelybook PI:EMAIL
756
{
    public Hour(int initialValue) => this.value = initialValue;
    public static Hour operator +(Hour lhs, Hour rhs) => new
Hour(lhs.value + rhs.value);
    public static implicit operator Hour (int from) => new Hour
(from);
    ...
    private int value;
}
If you add an Hour to an int (in either order), the C# compiler
automatically converts the int to an Hour and then calls operator+ with two
Hour arguments, as demonstrated here:
Click here to view code image
void Example(Hour a, int b)
{
    Hour eg1 = a + b; // b converted to an Hour
    Hour eg2 = b + a; // b converted to an Hour
}
Writing conversion operators
In the final exercise of this chapter, you will add conversion operators to the
Complex class. You will start by writing a pair of conversion operators that
convert between the int type and the Complex type. Converting an int to a
Complex object is always a safe process and never loses information (because
an int is really just a complex number without an imaginary element). You
will implement this as an implicit conversion operator. However, the
converse is not true—to convert a Complex object into an int, you have to
discard the imaginary element. Thus, you will implement this conversion
operator as explicit.
Implement the conversion operators
1. Return to Visual Studio 2017 and display the Complex.cs file in the
Code and Text Editor window. Add the constructor shown in bold in the
code that follows to the Complex class, immediately after the existing
constructor and before the ToString method. This new constructor takes
a single int parameter, which it uses to initialize the Real property. The
Download from finelybook PI:EMAIL
757
Imaginary property is set to 0.
Click here to view code image
class Complex
{
    ...
    public Complex(int real)
    {
        this.Real = real;
        this.Imaginary = 0;
    }
    ...
}
2. Add the following implicit conversion operator shown in bold to the
Complex class.
Click here to view code image
class Complex
{
    ...
    public static implicit operator Complex(int from) => new
Complex(from);
    ...
}
This operator converts from an int to a Complex object by returning a
new instance of the Complex class built using the constructor you
created in the previous step.
3. Add the following explicit conversion operator shown in bold to the
Complex class.
Click here to view code image
class Complex
{
    ...
    public static explicit operator int(Complex from) =>
from.Real;
    ...
}
This operator takes a Complex object and returns the value of the Real
property. This conversion discards the imaginary element of the
complex number.
Download from finelybook PI:EMAIL
758
4. Display the Program.cs file in the Code and Text Editor window. Add
the following code shown in bold to the end of the doWork method:
Click here to view code image
static void doWork()
{
    ...
    Console.WriteLine($"Current value of temp is ");
    if (temp == 2)
    {
        Console.WriteLine("Comparison after conversion: temp ==
2");
    }
    else
    {
       Console.WriteLine("Comparison after conversion: temp !=
2");
    }
    temp += 2;
    Console.WriteLine($"Value after adding 2: temp = ");
}
These statements test the implicit operator that converts an int to a
Complex object. The if statement compares a Complex object to an int.
The compiler generates code that converts the int into a Complex object
first and then invokes the == operator of the Complex class. The
statement that adds 2 to the temp variable converts the int value 2 into a
Complex object and then uses the + operator of the Complex class.
5. Add the following statements shown in bold to end of the doWork
method:
Click here to view code image
static void doWork()
{
    ...
    int tempInt = temp;
    Console.WriteLine($"Int value after conversion: tempInt ==
");
}
The first statement attempts to assign a Complex object to an int
variable.
Download from finelybook PI:EMAIL
759
6. On the Build menu, click Rebuild Solution.
The solution fails to build, and the compiler reports the following error
in the Error List window:
Click here to view code image
Cannot implicitly convert type
'ComplexNumbers.Complex' to 'int'. An explicit
conversion exists (are you missing a cast?)
The operator that converts from a Complex object to an int is an explicit
conversion operator, so you must specify a cast.
7. Modify the statement that attempts to store a Complex value in an int
variable to use a cast,  like this:
int tempInt = (int)temp;
8. On the Debug menu, click Start Without Debugging. Verify that the
solution now builds and that the final four messages displayed look like
this:
Click here to view code image
Current value of temp is (2 + 0i)
Comparison after conversion: temp == 2
Value after adding 2: temp = (4 + 0i)
Int value after conversion: tempInt == 4
9. Close the application, and return to Visual Studio 2017.
Summary
In this chapter, you learned how to overload operators and provide
functionality specific to a class or structure. You implemented a number of
common arithmetic operators, and you also created operators with which you
can compare instances of a class. Finally, you learned how to create implicit
and explicit conversion operators.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 23, “Improving throughput by using
tasks.”
Download from finelybook PI:EMAIL
760
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Implement
an
operator
Write the keywords public and static, followed by the return
type, followed by the operator keyword, followed by the
operator symbol being declared, followed by the appropriate
parameters between parentheses. Implement the logic for the
operator in the body of the method. For example:
Click here to view code image
class Complex
{
    ...
    public static bool operator==(Complex lhs, Complex
rhs)
    {
        ...  // Implement logic for == operator
    }
    ...
}
Define a
conversion
operator
Write the keywords public and static, followed by the keyword
implicit or explicit, followed by the operator keyword,
followed by the type to which the data is being converted,
followed by the type from which the data is being converted as
a single parameter between parentheses. For example:
Click here to view code image
class Complex
{
    ...
    public static implicit operator Complex(int from)
    {
        ...  // code to convert from an int
    }
    ...
}
Download from finelybook PI:EMAIL
761
PART IV
Building Universal Windows
Platform applications with C#
So far, you have gained a thorough grounding in the syntax and semantics of
the C# language. It’s now time to examine how you can use this knowledge
to take advantage of the features that Windows 10 provides for building
applications that run unchanged on devices ranging from a desktop PC to a
smartphone. You can construct applications that run in different
environments by using the Universal Windows Platform (UWP) application
framework. UWP applications can detect and adapt to the hardware on which
they execute. They can receive input through a touch-sensitive screen or by
using voice commands, and a UWP app can be designed to be aware of the
location and orientation of the device on which it is running. You can also
build cloud-connected applications; these are applications that are not tied to
a specific computer but can follow users when they sign in on another device.
In short, Visual Studio provides the tools for developing highly mobile,
highly graphical, highly connected applications that can run almost
anywhere.
Part IV introduces you to the requirements of building UWP applications.
You will see examples of the asynchronous model of programming
developed as part of the .NET Framework. You will also learn how to
integrate voice activation into your application and how to build a UWP
application that connects to the cloud to retrieve and present complex
information in a natural and easily navigab le style.
Download from finelybook PI:EMAIL
762
CHAPTER 23
Improving throughput by using
tasks
After completing the chapter, you will be able to:
Describe the benefits of implementing parallel operations in an
application.
Use the Task class to create and run parallel operations in an
application.
Use the Parallel class to parallelize some common programming
constructs.
Cancel long-running tasks and handle exceptions raised by parallel
operations.
In the bulk of the preceding chapters in this book, you’ve learned how to use
C# to write programs that run in a single-threaded manner. By single-
threaded, I mean that at any one point in time, a program has been executing
a single instruction. This might not always be the most efficient approach for
an application to take. If you have the appropriate processing resources
available, some applications might run more quickly if you divide them into
parallel paths of execution that can run concurrently. This chapter is
concerned with improving throughput in your applications by maximizing the
use of available processing power. Specifically, in this chapter, you will learn
how to use Task objects to apply effective multitasking to computationally
intensive applications.
Download from finelybook PI:EMAIL
763
Why perform multitasking by using parallel
processing?
There are two primary reasons why you might want to perform multitasking
in an application:
To improve responsiveness A long-running operation may involve
tasks that do not require processor time. Common examples include
I/O-bound operations such as reading from or writing to a local disk or
sending and receiving data across a network. In both of these cases, it
does not make sense to have a program burn CPU cycles waiting for
the operation to complete when the program could be doing something
more useful instead (such as responding to user input). Most users of
mobile devices take this form of responsiveness for granted and don’t
expect their tablet to simply halt while it is sending and receiving
email, for example. Chapter 24, “Improving response time by
performing asynchronous operations,” discusses these features in more
detail.
To improve scalability If an operation is CPU bound, you can
improve scalability by making efficient use of the processing resources
available and using these resources to reduce the time required to
execute the operation. A developer can determine which operations
include tasks that can be performed in parallel and arrange for these
elements to be run concurrently. As more computing resources are
added, more instances of these tasks can be run in parallel. Until
relatively recently, this model was suitable only for scientific and
engineering systems that either had multiple CPUs or were able to
spread the processing across different computers networked together.
However, most modern computing devices now contain powerful
CPUs that are capable of supporting true multitasking, and many
operating systems provide primitives that enable you to parallelize
tasks quite easily.
The rise of the multicore processor
At the turn of the century, the cost of a decent personal computer was in the
range of $800 to $1,500. Today, a decent personal computer still costs about
Download from finelybook PI:EMAIL
764
the same, even after 17 years of price inflation. The specification of a typical
computer these days is likely to include a processor running at a speed of
between 2 GHz and 3 GHz, over 1,000 GB of hard disk storage (possibly
using solid-state technology, for speed), 8 GB of RAM, high-speed and high-
resolution graphics, fast network interfaces, and a rewritable DVD drive.
Seventeen years ago, the processor speed for a typical machine was between
500 MHz and 1 GHz, 80 GB was a large hard disk, Windows ran quite
happily with 256 MB or less of RAM, and rewritable CD drives cost well
over $100. (Rewritable DVD drives were rare and extremely expensive.) This
is the joy of technological progress: ever faster and more powerful hardware
at cheaper and cheaper prices.
This is not a new trend. In 1965, Gordon E. Moore, co-founder of Intel,
wrote a paper titled “Cramming More Components onto Integrated Circuits,”
which discussed how the increasing miniaturization of components enabled
more transistors to be embedded on a silicon chip, and how the falling costs
of production as the technology became more accessible would lead
economics to dictate squeezing as many as 65,000 components onto a single
chip by 1975. Moore’s observations lead to the dictum frequently referred to
as Moore’s Law, which states that the number of transistors that can be
placed inexpensively on an integrated circuit will increase exponentially,
doubling approximately every two years. (Actually, Gordon Moore was
initially more optimistic than this, postulating that the volume of transistors
was likely to double every year, but he later modified his calculations.) The
ability to pack transistors together led to the ability to pass data between them
more quickly. This meant we could expect to see chip manufacturers produce
faster and more powerful microprocessors at an almost unrelenting pace,
enabling software developers to write ever more complicated software that
would run more quickly.
Moore’s Law concerning the miniaturization of electronic components
still holds, even half a century later. However, physics has started to
intervene. A limit occurs when it is not possible to transmit signals between
transistors on a single chip any faster, no matter how small or densely packed
they are. To a software developer, the most noticeable result of this limitation
is that processors have stopped getting faster. Ten years ago, a fast processor
ran at 3 GHz. Today, a fast processor still runs at 3 GHz.
The limit to the speed at which processors can transmit data between
Download from finelybook PI:EMAIL
765
components has caused chip companies to look at alternative mechanisms for
increasing the amount of work a processor can do. The result is that most
modern processors now have two or more processor cores. Effectively, chip
manufacturers have put multiple processors on the same chip and added the
necessary logic to enable them to communicate and coordinate with one
another. Quad-core (four cores) and eight-core processors are now common.
Chips with 16, 32, and 64 cores are available, and the price of dual-core and
quad-core processors is now sufficiently low that they are an expected
element in laptops, tablets, and smart cell phones. So, although processors
have stopped speeding up, you can now expect to get more of them on a
single chip.
What does this mean to a developer writing C# applications?
In the days before multicore processors, you could speed up a single-
threaded application simply by running it on a faster processor. With
multicore processors, this is no longer the case. A single-threaded application
will run at the same speed on a single-core, dual-core, or quad-core processor
that all have the same clock frequency. The difference is that on a dual-core
processor, as far as your application is concerned, one of the processor cores
will be sitting around idle, and on a quad-core processor, three of the cores
will be simply ticking away, waiting for work. To make the best use of
multicore processors, you need to write your applications to take advantage
of multitasking.
Implementing multitasking by using the Microsoft
.NET Framework
Multitasking is the ability to do more than one thing at the same time. It is
one of those concepts that is easy to describe but until recently has been
difficult to implement.
In the optimal scenario, an application running on a multicore processor
performs as many concurrent tasks as there are processor cores available,
keeping each of the cores busy. However, you need to consider many issues
to implement concurrency, including the following:
How can you divide an application into a set of concurrent operations?
Download from finelybook PI:EMAIL
766
How can you arrange for a set of operations to execute concurrently, on
multiple processors?
How can you ensure that you attempt to perform only as many
concurrent operations as there are processors available?
If an operation is blocked (such as while waiting for I/O to complete),
how can you detect this and arrange for the processor to run a different
operation rather than sit idle?
How can you determine when one or more concurrent operations have
completed?
To an application developer, the first question is a matter of application
design. The remaining questions depend on the programmatic infrastructure.
Microsoft provides the Task class and a collection of associated types in the
System.Threading.Tasks namespace to help address these issues.
Important The point about application design is fundamental. If an
application is not designed with multitasking in mind, then it doesn’t
matter how many processor cores you throw at it, it will not run any
faster than it would on a single-core machine.
Tasks, threads, and the ThreadPool
The Task class is an abstraction of a concurrent operation. You create a Task
object to run a block of code. You can instantiate multiple Task objects and
start them running in parallel if sufficient processors or processor cores are
available.
Note From now on, I will use the term processor to refer to either a
single-core processor or a single processor core on a multicore
processor.
Download from finelybook PI:EMAIL
767
Internally, the Windows Runtime (WinRT) implements tasks and
schedules them for execution by using Thread objects and the ThreadPool
class. Multithreading and thread pools have been available with the .NET
Framework since version 1.0, and if you are building traditional desktop
applications, you can use the Thread class in the System.Threading
namespace directly in your code. However, the Thread class is not available
for Universal Windows Platform (UWP) apps; instead, you use the Task
class.
The Task class provides a powerful abstraction for threading with which
you can easily distinguish between the degree of parallelization in an
application (the tasks) and the units of parallelization (the threads). On a
single-processor computer, these items are usually the same. However, on a
computer with multiple processors or with a multicore processor, they are
different. If you design a program based directly on threads, you will find that
your application might not scale very well; the program will use the number