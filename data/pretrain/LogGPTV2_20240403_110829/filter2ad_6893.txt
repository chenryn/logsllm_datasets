# Privacy-Preserving Logarithmic-Time Search on Encrypted Data in Cloud

**Author: Yanbin Lu  
University of California, Irvine  
(NDSS’11, Feb 6)**

## Cloud Database Environment
- **Database Transfer:**
  - **Database Owner**: Transfers the database to the cloud.
  - **User**: Accesses the database via the cloud.

## Privacy Requirements
- **Cloud Server**:
  - Must not learn any information about the database.
  - Must not learn any information about the user's query.
- **Database Owner**:
  - Can exercise access control over user queries.
- **Example**:
  - **Owner**: Patient
  - **Database**: Heartbeat rate
  - **Cloud Server**: Amazon RDS
  - **User**: Cardiologist

## Privacy-Preserving Solution
- **Encrypted Database**:
  - The database is encrypted and stored in the cloud.
  - The user generates a search token using a decryption key.
  - The cloud server performs the search and returns the results.
  - The user decrypts the results.

## Requirements
- **Sublinear Search**:
  - Linear search is impractical for large datasets.
- **Query Result Integrity**:
  - Prevents the cloud server from cheating the user.
- **Provable Database Update**:
  - Ensures the cloud server does not cheat the database owner.

## Related Work
- **Order-Preserving Encryption (OPE)**:
  - Deterministic and not IND-CPA secure.
  - Fixed domain distribution.
  - Bellare et al. [Crypto’07]: Only supports equality search.
- **Predicate Encryption**:
  - Useful for privacy-preserving cloud databases.
  - Typically has linear complexity.

## Predicate Encryption
- **Setup(1^k)**: Outputs a secret key SK.
- **Encrypt(SK, I, m)**: Encrypts message m under attributes I with key SK.
- **Key-Extraction(SK, g)**: Outputs key kg.
- **Decrypt(kg, CI)**: Decrypts if g(I) = 1.

## Building Blocks
- **Range Predicate Encryption (RPE)**:
  - Ciphertext associated with point t.
  - Decryption key associated with range Q.
  - Decryption works if t ∈ Q.
- **Inner-Product Predicate Encryption (IPE)**:
  - Ciphertext associated with vector v.
  - Decryption key associated with vector x.
  - Decryption works if v · x = 0.

## Strawman RPE Built from IPE
- **Encrypt(t)**: Create vector x where xi = 1 if i = t and xi = 0 otherwise. Run IPE encryption.
- **Extract(Q)**: Create vector y where yi = 1 if i ∈ Q and yi = 0 otherwise. Run IPE key extraction.
- **Decrypt(et, kQ)**: Run IPE decryption.

## Efficient Range Representation
- Any range can be covered by 2 · (log T − 1) nodes.
- Point path intersects with range representation.

## Efficient Range Predicate Encryption
- **Encrypting Point t**:
  - \( P(X) = \sum_{i=0}^{\log T} \alpha_i X^i \)
  - \( A = (\alpha_0, \ldots, \alpha_{\log T}) \)
- **Key Extraction for Range Q**:
  - \( K_x = (x_0, \ldots, x_{\log T}), \forall x \in MCS(Q) \)
- **Observation**:
  - \( A \cdot K_x = \alpha_0 \cdot x_0 + \alpha_1 \cdot x_1 + \cdots + \alpha_{\log T} \cdot x_{\log T} = P(x) \)

## Logarithmic-Time Search
- **Encrypt Each Node of B-Tree**:
  - One RPE for the search token.
  - One RPE for the real message.
- **Search Token Extraction**:
  - Two rounds: one for the left range and one for the right range.
- **Example**:
  - Domain size: [0-100]
  - Query range: [10-20]
  - Left range: [0-9], Right range: [21-100]

## Query Authentication
- **Authenticated Data Structure**:
  - Encrypted B-tree.
  - Authenticated root.
- **Query Result Verification**:
  - Verifies left and right boundaries of the query range.
  - Ensures verification without leaking records out of range.
- **Provable Data Update**:
  - Owner verifies the change path.
  - Reconstructs and authenticates the root.

## Performance
- **Total Search Time**:
  - Details on the performance metrics will be provided.

## Thank You!

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of your original text.