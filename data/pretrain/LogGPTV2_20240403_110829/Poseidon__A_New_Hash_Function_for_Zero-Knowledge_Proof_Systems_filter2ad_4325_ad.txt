any concrete applications of our hash functions, we would
still consider it an important cryptanalytic result.
526    30th USENIX Security Symposium
USENIX Association
5.3 Summary of Attacks
Here we list the main points of our cryptanalysis results. The
number of rounds R = RP + RF we can break depends on
the security level M and the number of S-boxes t, which we
specify for each concrete hash function instance in the next
section.
Before going on, we point out that for all attacks that are in
common to the ones proposed for the cipher HadesMiMC
[31], here we limit ourselves to report the main idea and re-
sult. For all other cases (namely, higher-order differentials,
zero-sum partitions, Gröbner basis attacks, and preimage at-
tacks), we present here more details. In any case, all details
are provided in [30, Appendix].
We highlight that the following cryptanalysis is not equiva-
lent to the one presented for the block cipher HADESMiMC.
Indeed, the scenarios are different (in one case the goal is to
guarantee the impossibility to ﬁnd the secret key, while here
there is no secret key material and the goal is to guarantee that
the internal permutation looks like a pseudo-random permuta-
tion). This means that certain attacks that we consider here
are not valid in the case of a block cipher and vice-versa. Just
to give some examples, the rebound attack [44,48] holds only
in the context studied here, while a MitM scenario (crucial in
the case of an SPN cipher) does not work in the context of
a sponge function, since the attacker does not know the full
output. More details are given in the following.
Proposition 5.1 (Informal). The following number of rounds
for x5-POSEIDON-128 over Fp with ≈ 256-bit p protects
against statistical and algebraic attacks:
RF = 6,
R = RF + RP = 56 +(cid:100)log5(t)(cid:101).
Proof. We substitute α = 5,M = 128 and log2(p) = 255 to
Equations (2),(3),(5) and see that no one is satisﬁed, i.e., the
attacks do not work.
Proposition 5.2 (Informal). The following number of rounds
for x5-POSEIDON-80 over Fp with ≈ 256-bit p protects
against statistical and algebraic attacks:
RF = 6,
R = RF + RP = 35 +(cid:100)log5(t)(cid:101).
Proposition 5.3 (Informal). The following number of rounds
for x5-POSEIDON-256 over Fp with ≈ 256-bit p protects
against statistical and algebraic attacks:
RF = 6,
R = RF + RP = 111 +(cid:100)log5(t)(cid:101).
5.4 Security Margin
Given the minimum number of rounds necessary to provide
security against all attacks known in the literature, we arbi-
trarily decided to add
(1) two more rounds with full S-box layers, and
(2) 7.5% more rounds with partial S-box layers,
i.e., +2 RF and +7.5% RP. The resulting number of rounds
for our primary instances is given in Table 2.
5.5 Attack details
All the attacks below are applied to the internal permutation
POSEIDONπ. The sponge framework dictates that all the at-
tacks on the hash function with complexity below 2c/2 must
result from attacks on the permutation. Thus we show that no
such attack on the permutation should exist.
5.5.1 Statistical Attacks
Differential/Linear Distinguishers. As shown in the ap-
pendix, at least 6 rounds with full S-box layers are necessary
to provide security against the statistical attacks we consider.
In more detail, for
(cid:40)
6
10
RF <
if M ≤ ((cid:98)log2 p(cid:99)− C )· (t + 1)
otherwise
(2)
linear [47] and differential [16, 17] attacks may be possible,
where C = 2 for S(x) = 1/x and C = log2(α− 1) for S(x) =
xα (where remember that α is an odd integer number), e.g.,
C = 1 for S(x) = x3 and C = 2 for S(x) = x5.
Before going on, we highlight that we exploit only rounds
with full S-box layers in order to prevent statistical attacks
(as done in [31]). As explained in [42], under the assumption
made for the linear layer in Section 2.3, it is possible to exploit
both the rounds with partial and full S-box layers in order
to guarantee security against some statistical attacks, like
differential and linear attacks. Our decision to consider only
rounds with full S-box layers has been made since a similar
condition on the rounds with full S-box layers (e.g., RF ≥ 6)
is necessary for the security against some algebraic attacks
(e.g., Gröbner basis attacks – see in the following) and in
order to provide simple security arguments for all statistical
attacks (including e.g. the rebound one).
(Invariant) Subspace Trails. We emphasize that
the
choice of the matrix that deﬁnes the linear layer, made in
Section 2.3, prevents the existence of subspaces S that gener-
ate inﬁnitely long subspace trails, namely a ﬁnite collection of
subspaces {S0, . . . ,Sr−1} s.t. each coset of Si is mapped into
a coset of Si+1 with probability 1 (where the index is taken
modulo r) an arbitrary number of times. This allows to ﬁx the
weakness of the previous version of POSEIDON.
USENIX Association
30th USENIX Security Symposium    527
Other Attacks. Finally, we brieﬂy mention that the same
number of rounds given before for the case of differen-
tial/linear attacks guarantees security against other attacks
as truncated differentials [43], impossible differentials [15],
rebound attacks [44, 48], and so on. More details are given
in [30, Appendix].
5.5.2 Algebraic Attacks
In order to estimate the security against algebraic attacks, we
evaluate the degree of the reduced-round permutations and
their inverses. Roughly speaking, our results can be summa-
rized as follows, where n (cid:39) log2(p).
Interpolation Attack. The interpolation attack [39] de-
pends on the number of different monomials in the inter-
polation polynomial, where (an upper/lower bound of) the
number of different monomials can be estimated given the de-
gree of the function. The idea of such an attack is to construct
an interpolation polynomial that describes the function. If the
number of unknown monomials is sufﬁciently large, then this
cannot be done faster than via a brute-force attack.
For a security level of M bits, the number of rounds that can
be attacked is
• for S(x) = xα:
R ≤ (cid:100)logα(2)· min{M,log2(p)}(cid:101) +(cid:100)logα t(cid:101)
(3)
• for S(x) = 1/x:
(cid:98)RF log2(t)(cid:99)+RP ≤(cid:100)log2(t)(cid:101)+(cid:100)0.5·min{M,log2(p)}(cid:101)
(4)
In general, the number of unknown monomials does not de-
crease when increasing the number of rounds. Hence, a higher
number of rounds likely leads to a higher (or equal) security
against this attack. We also consider various approaches of
the attack (such as the MitM one) in [30, Appendix C.2.1].
Gröbner Basis Attack.
In a Gröbner basis attack [24], one
tries to solve a system of non-linear equations that describe
the function. The cost of such an attack depends on the degree
of the equations, but also on the number of equations and
on the number of variables. Since there are several ways for
describing the studied permutation, there are several ways to
set up such a system of equations and so the attack. Here, we
focus on two extreme cases:
1. In the ﬁrst case, the attacker derives equations, one for
each word, for the entire r-round permutation. Assuming
S(x) = xα (analogous for the others), we show that the
attack complexity is about α2t (see below), therefore for
a security level of M bits the attack works at most on
logα 2min{n/2,M/2} rounds.
2. In the second case, since a partial S-box layer is used,
it may be more efﬁcient to consider degree-α equations
for single S-boxes. In this case, more rounds can be
necessary to guarantee security against this attack.
In both cases, it is possible to make use of the existence of
the subspace S (r) deﬁned as in Eq. (1) in order to improve the
attack. As shown in [14], such a subspace can be exploited in
order to replace some non-linear equations of the system that
we are trying to solve with linear equations. Indeed, given
a text in a coset of the subspace S (r), the output of such a
text after r rounds with partial S-box layers is simply the
result of an afﬁne map applied to the input (i.e., no S-box is
involved). As explained in detail in [30, Appendix C.2.2], this
issue can easily be ﬁxed both by a careful choice of the matrix
that deﬁnes the linear layer (see Section 2.3 for details) and,
if necessary, by adjusting the number of rounds with partial
S-box layers.
With optimistic (for the adversary) complexity of the Gaussian
elimination, we obtain for each S-box two attacks which are
faster than 2M if either condition is satisﬁed:
• if S(x) = xα:
• if S(x) = 1/x:
(cid:111)
R ≤ t − 1 + min
t+1
(cid:111)
,
(cid:110) M
(cid:110) logα(2)·M
3 , log2(p)
2
R ≤ logα(2)· min
(cid:98)RF log2(t)(cid:99) + RP ≤ (cid:100)0.5· min{M,log2(p)}(cid:101) +(cid:100)log2(t)(cid:101)
(cid:98)RF log2(t)(cid:99) + RP ≤ t − 1 +(cid:100)log2(t)(cid:101)+
(cid:7) ,(cid:100)0.5· log2(p)(cid:101)(cid:9)
+min(cid:8)(cid:6) M
, logα(2)·log2(p)
2
t+1
(5)
(6)
Higher-Order Differential Attack. Working over F2nt ≡
Fn·t
2 , the higher-order differential attack [43] depends on the al-
gebraic degree of the polynomial function that deﬁnes the per-
mutation, where the algebraic degree δ of a function f (x) = xd
of degree d over F2n is deﬁned as δ = hw(d) (where hw(·)
δ,(cid:76)
is the Hamming weight). The idea of such an attack is based
on the property that given a function f (·) of algebraic degree
x∈V ⊕φ f (x) = 0 if the dimension of the subspace V sat-
isﬁes dim(V ) ≥ δ + 1. If the algebraic degree is sufﬁciently
high, the attack does not work.
At ﬁrst thought, one may think that this attack does not apply
(or is much less powerful) in Ft
p (due to the fact that the only
subspaces of Fp are {0} and Fp itself). Recently, it has been
shown in [14] how to set up an higher-order differential over
p. Given f over Fp of degree d ≤ p − 2, ∑x∈Fp f (x) = 0.
Ft
528    30th USENIX Security Symposium
USENIX Association
Since this result is related to the degree of the polynomial
that describes the permutation, we claim that the number of
rounds necessary to provide security against the interpolation
attack provides security against this attack as well.
(We Do Not Care About) Zero-Sum Partitions. Another
property that can be demonstrated for some inner primitive
in a hash function (with a relatively low degree) is based
on the zero-sum partition. This direction has been investi-
gated e.g. in [18] for two SHA-3 candidates, Luffa and KEC-
CAK. More generally, a zero-sum structure for a function f (·)
is deﬁned as a set Z of inputs zi that sum to zero, and for
which the corresponding outputs f (zi) also sum to zero, i.e.,
∑i zi = ∑i f (zi) = 0. For an iterated function, the existence
of zero sums is usually due to the particular structure of the
round function or to a low degree. Since it is expected that a
randomly chosen function does not have many zero sums, the
existence of several such sets can be seen as a distinguishing
property of the internal function.
Deﬁnition 5.5 (Zero-Sum Partition [18]). Let P be a permu-
q for a prime q ≥ 2. A zero-sum partition for P
tation over Ft
of size K < t is a collection of K disjoint sets {X1, . . . ,XK}
with the following properties:
• Xi ⊂ Ft for each i = 1, . . . ,k and(cid:83)k
i=1 Xi = Ft,
• ∀i = 1, . . . ,K : the set Xi satisﬁes the zero-sum property
∑x∈Xi x = ∑x∈Xi P(x) = 0.
Here we explicitly state that we do not make claims about
the security of POSEIDONπ against zero-sum partitions. This
choice is motivated by the gap present in the literature be-
tween the number of rounds of the internal permutation that
can be covered by a zero-sum partition and by the number of
rounds in the corresponding sponge hash function that can be
broken e.g. via a preimage or a collision attack. As a concrete
example, consider the case of KECCAK: While 24 rounds
of KECCAK- f can be distinguished from a random permuta-
tion using a zero-sum partition [18] (that is, full KECCAK- f ),
preimage/collision attacks on KECCAK can only be set up for
up to 6 rounds of KECCAK- f [36]. This hints that zero-sum
partitions should be largely ignored for practical applications.
For completeness, we mention that a zero-sum partition on
(a previous version of) reduced-round POSEIDONπ has been
proposed in [14]. Such a property can cover up to RF = 6
rounds (i.e., 2 rounds at the beginning and 4 rounds at the
end) by exploiting the inside-out approach and by choosing
a subspace of texts after the ﬁrst R f rounds with full S-box
layers and before the RP rounds with partial S-box layers.
Since the number of rounds of this new version is not smaller
than the number of rounds of the previous one, and since
RF ≥ 8 (see Section 5.4), it seems that a zero-sum partition
cannot be set up for full POSEIDONπ.
6 POSEIDON in Zero-Knowledge Proof Sys-
tems
Our hash functions have been designed to be friendly to zero-
knowledge applications. Speciﬁcally, we aim to minimize the
proof generation time, the proof size, and the veriﬁcation time
(when it varies). Before presenting concrete results, we give a
small overview of ZK proof systems to date.
6.1 State of the Art
Let P be a circuit over some ﬁnite ﬁeld F where gates are
some (low-degree) polynomials over F with I and O being
input and output variables, respectively: P (I) = O. The com-
putational integrity problem consists of proving that some
given O0 is the result of the execution of P over some I0:
P (I0) = O0. It is not difﬁcult to show that any limited-time
program on a modern CPU can be converted to such a cir-
cuit [10], and making the proof zero-knowledge is often pos-
sible with little overhead.
The seminal PCP series of papers states that for any pro-
gram P it is possible to construct a proof of computational
integrity, which can be veriﬁed in time sublinear in the size
of P . However, for a long time the prover algorithms were so
inefﬁcient that this result remained merely theoretical. Only
recently, proof systems where the prover costs are polynomial
in |P| were constructed, but they required a trusted setup: a
veriﬁer or someone else (not the prover) must process the
circuit with some secret s and output a reference string S,
used both by the prover and the veriﬁer. In this setting, the
prover’s work can even be made linear in |P|, and the veriﬁer’s
costs are constant. These systems were called SNARKs for
proof succinctness. The ﬁrst generation of SNARKs, known
as Pinocchio and Groth16 [35, 49], require a separate trusted
setup for each circuit. The next generation, which includes
Sonic [46], PLONK [27], and Marlin [23], can use one ref-
erence string of size d for all circuits with at most d gates,
thus simplifying the setup and its reuse. Later on, proof sys-
tems without trusted setups appeared, of which we consider
Bulletproofs [19], STARKs [9], and RedShift [41] the most
interesting, though all of them come with deﬁciencies: Bul-
letproofs have linear veriﬁer times (but rather short proofs),
STARKs work with iterative programs, and RedShift has large
proofs (up to 1 MB for millions of gates).
Current benchmarks demonstrate that programs with mil-
lions of gates can be processed within a few seconds with
the fastest proof systems, which solves the computational in-
tegrity problem for some practical programs. Among them,
privacy-preserving cryptocurrencies, mixers, and private vot-
ing are prominent examples. In short, such applications work
as follows:
USENIX Association
30th USENIX Security Symposium    529
1. Various users add publicly hashes of some secret and
public values to some set V , which is implemented as a
Merkle tree. Hashes can be currency transaction digests,
public keys, or other credentials.
2. Only those who know a secret behind some hash are
declared eligible for an action (e.g., to vote or to spend
money).
3. A user who wants to perform the action proves that they
know a tree leaf L and a secret K such that L is both the
hash of K and a leaf in V . If the proof passes, the user is
allowed to perform an action (e.g., to vote). If an action
must be done only once, a deterministic hash of the secret
and leaf position can be computed and published.
This paradigm is behind the cryptocurrency Zcash and
Ethereum mixers.
The bottleneck of such a system is usually the proof creation
time, which took 42 seconds in the early version of Zcash,
and sometimes the veriﬁer’s time. Both are determined by the
size of the circuit that describes a Merkle proof and are thus