### 5.4 Interpretation of Results

Double-fetch bugs are a fundamental problem in kernel development, affecting popular operating systems such as Windows, Linux, Android, and FreeBSD. These issues have a long history, with one identified bug (CVE-2016-6480) existing for over ten years.

Double-fetches are prevalent and sometimes inevitable in kernels. Our analysis categorized three typical double-fetch scenarios, with 63% of these occurring in drivers, indicating that drivers are particularly susceptible. Four out of the five newly identified bugs fall into the size-checking category, suggesting that variable-length message processing is a critical area for double-fetch bug vetting.

In the Linux kernel, double-fetch bugs are more complex than in Windows due to the separation of fetches from their uses by transfer functions, making it challenging to distinguish between benign and vulnerable double-fetches. A previous dynamic approach failed to identify any double-fetch bugs in Linux, whereas our static approach successfully detected several, highlighting the effectiveness of our method.

Our approach requires manual inspection, but this does not need to be repeated for the entire kernel; future analyses can focus on changed files. Developing a fully automated static analysis with high accuracy would have been significantly more time-consuming than our current approach, which includes running the analysis on different kernels and manually investigating the results. Prior to our work, the specific situations where double-fetch bugs occur in the Linux kernel were unknown, which was essential knowledge for designing a more precise static analysis. With our refined approach, only 53 potential double-fetch bugs needed to be examined, rather than all 90 double-fetch situations. Thus, while manual analysis is necessary, it is highly beneficial.

### Prevention and Mitigation

All four size-checking bugs were patched using the Compare Data method, but this does not completely eliminate the double-fetches, as the patched situations still abort the client program by returning an error. Even benign double-fetch situations can become harmful easily. For example, one bug (CVE-2016-5728) was introduced by a code update from a benign double-fetch situation. However, most potential cases remain unfixed as they are currently not vulnerable.

Even if a double-fetch is benign, it can be considered a performance issue because one of the fetches (invocations of the transfer functions) is redundant.

### 5.5 Limitations

Our analysis focused on identifying double-fetches in Linux using a pattern-based source code analysis. This approach, however, cannot detect double-fetches at a lower level, such as in preprocessed or compiled code. Double-fetch bugs can also occur in macros. In one case [24], a macro fetched a pointer twice: first to test for NULL and then to use it. If the pointer changes between the two fetches, a null-pointer crash may result.

A double-fetch bug can also be introduced through compiler optimization, appearing in the compiled binary but not in the source code. Wilhelm [37] recently discovered such a compiler-generated double-fetch bug in the Xen Hypervisor, where pointers to shared memory regions were not labeled as volatile, allowing the compiler to turn a single memory access into multiple accesses at the binary level.

### 6 Related Work

Previous research on double-fetch analysis has primarily focused on dynamic approaches, while we proposed a static analysis method. In addition to the already discussed Bochspwn [14, 13], there are other related studies.

Wilhelm [37] used a similar approach to Bochspwn to analyze memory access patterns in para-virtualized devices' backend components. His analysis identified 39 potential double-fetch issues and discovered three novel security vulnerabilities in security-critical backend components. One of these vulnerabilities did not exist in the source code but was introduced through compiler optimization (see Section 5.5).

Double-fetch race conditions are similar to Time-Of-Check to Time-Of-Use (TOCTOU) race conditions, which arise from changes occurring between checking a condition and using the check's result. TOCTOU data inconsistencies often result from improper synchronization of concurrent accesses to shared objects like files [2], sockets [36], and memory locations [39]. Numerous approaches [5, 9, 18, 4, 27] have been proposed to address these issues, but no general, secure method exists for applications to access file systems without race conditions.

Watson [36] focused on exploiting wrapper concurrency vulnerabilities from system call interposition, leading to security issues such as privilege escalation and audit bypass. He identified relevant resources accessed concurrently across a trust boundary and demonstrated exploit techniques. Watson also categorized Time-Of-Audit to Time-Of-Use and Time-Of-Replacement to Time-Of-Use issues, but his focus was on system call interposition rather than the kernel, and he did not provide details on how he found these vulnerabilities.

Yang et al. [39] cataloged 46 different types of concurrency attacks, noting that the risk of concurrency attacks is proportional to the duration of the vulnerability window. They found that previous TOCTOU detection and prevention techniques are too specific and cannot address general concurrency attacks.

Coccinelle [17], the program matching and transformation engine we used, was initially targeted for collateral evolution in Linux drivers but is now widely used for finding and fixing bugs in systems code. Nicolas et al. [26, 25] studied all versions of Linux released between 2003 and 2011, ten years after Chou et al. [7] conducted the first thorough study on faults in Linux. Nicolas et al. found that the kinds of faults identified ten years ago were still relevant and present in both new and existing files. They also noted a decline in the rate of these faults in the driver directory, supporting Chou et al.'s findings.

### 7 Conclusion

This work provides the first (to the best of our knowledge) static analysis of double-fetches in the Linux kernel. It is the first approach capable of detecting double-fetch vulnerabilities in the complete kernel, including all drivers and hardware architectures, which was impossible with dynamic approaches. Based on our pattern-based static analysis, we categorized three typical scenarios where double-fetches are likely to occur. We also provided recommended solutions specific to the typical double-fetch scenarios found in our study to prevent these bugs and vulnerabilities. One solution can automatically patch double-fetch bugs, specifically those in the size-checking scenario.

Whereas a known dynamic analysis of the Linux, FreeBSD, and OpenBSD kernels found no double-fetch bugs, our static analysis discovered six real double-fetch bugs, five of which were previously unknown, and three of which are exploitable vulnerabilities. All reported bugs have been confirmed and fixed by the maintainers. Our approach has been adopted by the Coccinelle team and is currently being integrated into the Linux kernel patch vetting process.

### Acknowledgments

The authors would like to sincerely thank all the reviewers for their time and expertise on this paper. Your insightful comments have helped us improve this work. This work is partially supported by the National Key Research and Development Program of China (2016YFB0200401), the program for New Century Excellent Talents in University, the National Science Foundation (NSF) China (61402492, 61402486, 61379146, 61472437), and the laboratory pre-research fund (9140C810106150C81001).

### References

[References listed as in the original document]

---

This revised version aims to enhance clarity, coherence, and professionalism, ensuring the text is well-structured and easy to follow.