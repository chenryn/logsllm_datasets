### Chapter 21: A Web Application Hacker’s Methodology

#### 5.3.5 Custom-Generated Session IDs
If the session ID appears to be custom-generated, use the "bit flipper" payload source in Burp Intruder to sequentially modify each bit in the session token. Use a string in the response to determine if modifying the token has not resulted in an invalid session and whether the session belongs to a different user.

#### 5.4 Check for Insecure Transmission of Tokens
**5.4.1 Walkthrough and Logging**
- Navigate through the application as usual, starting with unauthenticated content at the start URL, proceeding through the login process, and then using all the application's functionality.
- Note every instance where a new session token is issued and which parts of your communications use HTTP and which use HTTPS.
- Use the logging function of your intercepting proxy to record this information.

**5.4.2 Secure Flag for HTTP Cookies**
- If HTTP cookies are used to transmit session tokens, verify that the secure flag is set, preventing them from being transmitted over HTTP connections.

**5.4.3 Token Transmission Over HTTP**
- Determine if session tokens are ever transmitted over an HTTP connection during normal use. If so, they are vulnerable to interception.

**5.4.4 Mixed Content and Token Issuance**
- For applications that use HTTP for unauthenticated areas and switch to HTTPS for authenticated areas, verify if a new token is issued when switching to HTTPS or if the token issued during the HTTP stage remains active.
- If a token issued during the HTTP stage remains active, it is vulnerable to interception.

**5.4.5 Links to HTTP URLs in HTTPS Areas**
- If the HTTPS area contains links to HTTP URLs, follow these links and verify if the session token is submitted.
- Determine if the token continues to be valid or is immediately terminated by the server.

#### 5.5 Check for Disclosure of Tokens in Logs
**5.5.1 Review Logging and Monitoring Functions**
- If your application mapping identified any logging, monitoring, or diagnostic functionality, review these functions to determine if any session tokens are disclosed.
- Confirm who is authorized to access these functions. If they are intended for administrators only, check for other vulnerabilities that could allow lower-privileged users to access them.

**5.5.2 Tokens in URLs**
- Identify instances where session tokens are transmitted within the URL.
- Even if tokens are generally transmitted securely, developers may have used the URL in specific cases, potentially transmitting tokens in the Referer header when users follow off-site links.
- Check for functionality that allows you to inject arbitrary off-site links into pages viewed by other users.

**5.5.3 Gathering and Testing Tokens**
- If you find a way to gather valid session tokens issued to other users, test each token to determine if it belongs to an administrative user (e.g., by attempting to access a privileged function).

#### 5.6 Check Mapping of Tokens to Sessions
**5.6.1 Concurrent Sessions**
- Log in to the application twice using the same user account from different browser processes or computers.
- Determine if both sessions remain active concurrently. If they do, the application supports concurrent sessions, enabling an attacker to use compromised credentials without detection.

**5.6.2 Token Reuse on Login**
- Log in and log out several times using the same user account from different browser processes or computers.
- Determine if a new session token is issued each time or if the same token is reused.
- If the same token is reused, the application is not employing proper session tokens and is vulnerable to concurrent logins and improper session timeout enforcement.

**5.6.3 Token Structure and Manipulation**
- If tokens appear to have structure and meaning, attempt to separate components that identify the user from those that are inscrutable.
- Modify user-related components to refer to other known users and verify if the application accepts the modified token and allows you to masquerade as that user.

#### 5.7 Test Session Termination
**5.7.1 Server-Side Session Expiration**
- Focus on the server's handling of sessions and tokens rather than client-side events.
- Log in to obtain a valid session token, wait without using it, and then submit a request for a protected page.
- Use trial and error to determine the session expiration timeout or if the token remains valid days after the last request. Automate this task using Burp Intruder.

**5.7.2 Logout Functionality**
- Check if a logout function exists and if it effectively invalidates the user’s session on the server.
- After logging out, attempt to reuse the old token and request a protected page.
- Use Burp Repeater to send specific requests from the proxy history to see if the application responds differently after logging out.

#### 5.8 Check for Session Fixation
**5.8.1 Unauthenticated Users and Session Tokens**
- If the application issues session tokens to unauthenticated users, obtain a token and perform a login.
- If the application does not issue a fresh token after a successful login, it is vulnerable to session fixation.

**5.8.2 Authenticated Users and Session Tokens**
- Even if the application does not issue session tokens to unauthenticated users, obtain a token by logging in and return to the login page.
- Submit another login as a different user using the same token. If the application does not issue a fresh token, it is vulnerable to session fixation.

**5.8.3 Token Format and Invention**
- Identify the format of session tokens and modify your token to a validly formed invented value.
- Attempt to log in with the invented token. If the application allows an authenticated session with an invented token, it is vulnerable to session fixation.

**5.8.4 Sensitive Data and Session Fixation**
- If the application processes sensitive user information and allows it to be displayed after submission, perform the previous tests in relation to pages displaying sensitive data.
- If a token set during anonymous usage can later be used to retrieve sensitive user information, the application is vulnerable to session fixation.

#### 5.9 Check for CSRF
**5.9.1 CSRF Vulnerability**
- If the application relies solely on HTTP cookies for session tokens, it may be vulnerable to cross-site request forgery attacks.

**5.9.2 Key Requests and Parameters**
- Review the application’s key functionality and identify specific requests used to perform sensitive actions.
- If an attacker can fully determine the parameters for these requests, the application is likely vulnerable.

**5.9.3 HTML Page for CSRF Attack**
- Create an HTML page that issues the desired request without user interaction.
- For GET requests, use an `<img>` tag with the `src` parameter set to the vulnerable URL.
- For POST requests, create a form with hidden fields for relevant parameters and use JavaScript to autosubmit the form.
- Load the HTML page in the same browser while logged in to the application and verify if the desired action is carried out.

**5.9.4 Additional Tokens and UI Redress Attacks**
- Test the robustness of additional tokens used to prevent CSRF attacks.
- Test for UI redress attacks to defeat anti-CSRF defenses.

#### 5.10 Check Cookie Scope
**5.10.1 Set-Cookie Headers**
- Review the relevant Set-Cookie headers and check for domain or path attributes controlling the scope of the cookies.

**5.10.2 Liberalized Cookie Scope**
- If the application liberalizes its cookies’ scope to a parent domain or directory, it may be vulnerable to attacks via other web applications hosted within the parent domain or directory.

**5.10.3 Subdomain Exposure**
- If the application sets its cookies’ domain scope to its own domain name or does not specify a domain attribute, it may still be exposed to attacks via subdomains.

**5.10.4 Path Segregation**
- Determine any reliance on path segregation, such as `/site/main` and `/site/demo`, which can be subverted in the event of a cross-site scripting attack.

**5.10.5 Domain and Path Analysis**
- Identify all possible domain names and paths that will receive the cookies issued by the application.
- Establish if other web applications are accessible via these domain names or paths that you can leverage to capture the cookies.

#### 6 Test Access Controls
**6.1 Understand the Access Control Requirements**
- Based on the core functionality, understand the requirements for vertical and horizontal segregation.
- Review application mapping results to identify areas of functionality and data resources that are targets for privilege escalation attacks.
- Obtain multiple accounts with different privileges to perform effective testing.

**6.2 Test with Multiple Accounts**
- Use a powerful account to locate all the functionality it can access and then use a less-privileged account to attempt to access the same functionality.
- Use Burp to browse the application’s content within one user context and compare site maps to identify high-privileged requests accessible to lower-privileged users.
- Perform equivalent tests for horizontal privilege segregation by attempting to access data belonging to another user at the same privilege level.

**6.3 Test with Limited Access**
- If you do not have access to accounts at different privilege levels, testing for broken access controls is more challenging.
- Use low-privileged accounts to identify URLs for privileged functions and decompile compiled clients to extract references to server-side functionality.
- Try to guess or discover identifiers associated with other users’ data and mount automated attacks to harvest interesting data.

**6.4 Test for Insecure Access Control Methods**
- Look for parameters like `edit=false` or `access=read` and modify them to interfere with the application’s access control logic.
- Test for access control based on the HTTP Referer header by performing privileged actions with a missing or modified Referer header.
- Test for insecure container-managed access control to URLs by making a request using the HEAD method.

#### 7 Test for Input-Based Vulnerabilities
- Fuzz all request parameters with a set of attack strings to probe the application for input-based vulnerabilities such as XSS, SQL injection, OS command injection, path traversal, script inclusion, and file inclusion.