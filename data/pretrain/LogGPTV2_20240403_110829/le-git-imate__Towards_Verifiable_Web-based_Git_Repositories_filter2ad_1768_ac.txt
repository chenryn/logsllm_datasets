on data retrieved from the GitHub API or on data retrieved from the web UI.
Hidden HTML tags. A web UI-based mechanism to sign the user’s commits may rely on the infor-
mation displayed on the merge commit webpage to capture the user’s perception of the operation. For
example, the head commits of the branches being merged may be extracted based on a syntactic check
416
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
that looks for HTML tags with speciﬁc identiﬁers in the webpage source code. Yet, the server may serve
two HTML tags with the same identiﬁer, one of which has the correct commit value and will be rendered
in the user’s browser, and the other one referring to an incorrect commit that will not be displayed (i.e., it
is a hidden HTML tag). The signing mechanism will not know which of the two tags should be used, and
may end up merging and signing the incorrect commit – while providing the user with the perception
that the correct commit has been merged.
Malicious scripts. The webpage served by the server in a ﬁle edit operation for a regular commit may
contain a malicious JavaScript script that changes the ﬁle content unbeknownst to the user (e.g., silently
removes a line of code). As a result, the user may unknowingly commit an incorrect version of the ﬁle.
5.
le-git-imate: Adding veriﬁability to web-based git repositories
In this section, we present le-git-imate, our defense to address misbehavior by an untrustworthy server.
The fundamental reason behind these attacks is that the server is fully trusted to compute correctly the
Git repository objects. Git’s standard commit signature mechanism provides a solution to this problem
by having the client compute a digital signature over the commit object and include this signature in the
commit object that it creates.
We adopt a similar strategy and present ﬁrst a solution based on a lightweight design, namely to embed
a veriﬁcation record in the commit object, even when the client does not generate the commit object. We
then present an improved solution, our main design, in which the user is able to generate Git standard
commit signatures in the browser and therefore can sign web UI commits.
5.1. Design goals
We identify a set of design goals that should be satisﬁed by any solution that seeks to add veriﬁability
to web-based Git repositories:
(1) The solution should embed enough information into the commit object so that anyone can ver-
ify that the server’s actions faithfully follow the user’s requested actions. More speciﬁcally, the
solution should offer the same (or similar) security guarantees as do regular Git signed commits.
(2) For ease of adoption and to ensure that it can be used immediately, the solution should not require
server-side changes.
(3) The solution should not require the user to leave the browser. This will minimize the impact on the
user’s current experience with using GitHub.
(4) The solution should preserve as much as possible the current workﬂows used in GitHub: to per-
form a commit operation, the user prepares the commit and then pushes one button to commit. In
particular, the solution should preserve the ease of use of GitHub’s web UI and must not increase
the complexity of performing a commit, as this may hurt usability.
(5) The solution must be efﬁcient and must not burden the user unnecessarily. In particular, the solution
should not add signiﬁcant delay, as this will degrade the user experience and it may hurt usability.
(6) The solution should not break existing workﬂows for Git CLI clients: Regular signed commits can
still be performed and veriﬁed by Git CLI clients.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
417
5.2. A Strawman solution
A simple solution can mitigate one of the attacks described in Section 4.2.1, the basic attack against
merge operations. By default, Git uses the recursive strategy with no options for merging branches. The
tree and blob objects corresponding to the merge commit object are computed using a deterministic
algorithm based on the tree and blob objects of the parents of the merge commit object.
As a result, the correctness of the merge operations performed by the Git server can be veriﬁed. After a
user clones/pulls a Git repository, the user parses the branch of interest, and computes the expected out-
come of all merge operations based on the parents of the merge commit objects. The user then compares
this expected outcome with the merge operation performed by the server.
This solution is insufﬁcient because it can only mitigate the simplest attack against a merge commit
operation – only when the recursive merge strategy with no options is used, and the server includes an
incorrect list of blob objects in the merge commit object by adding/deleting/modifying project ﬁles. In
particular, this solution cannot handle any of the other attacks we presented, including attacks against
regular commits, against merge commits based on incorrect parents or incorrect merge strategy, against
squash and merge operations, or web UI-based attacks. Instead, we need a solution that provides a com-
prehensive defense against all these attacks. In addition, we need to address design and implementation
challenges related to the aforementioned design goals.
5.3.
le-git-imate design
We propose two designs for le-git-imate. The lightweight design computes a veriﬁcation record on
the client side and embeds it into the commit object created by the server. The main design gives the
user the ability to sign the web UI commits, i.e. the user creates standard Git signed commits. Both
designs use information from GitHub’s commit webpage as it is rendered in the user’s browser, and thus
capture what the user expects to be included in the commit object. Subsequently, anyone who clones
the repository can check whether the server tampered with the commit objects by traversing the object
tree and validating the veriﬁcation record or the commit signatures. We compare the two designs later in
Section 7.4.
5.3.1. Lightweight design
To achieve design goal #1, we are faced with two challenges. First, the user cannot compute the same
exact commit object computed by the server, because a commit object contains a ﬁeld, timestamp, that
is non-deterministic in nature, as it is the exact time when the object was created by the server. The
lightweight design takes advantage that, at the moment when the commit object is being created by the
server, most of the ﬁelds in the commit object are deterministic and can be computed independently by
the user. Second, we need to ﬁnd a way to embed the veriﬁcation record created by the user in the commit
object that is created by the server. We add veriﬁability to the Git repository by leveraging the fact that
GitHub (as well as any other web-based Git hosting service) allows the user to supply the commit
message for the commit object. The user creates the veriﬁcation record and embeds the veriﬁcation
record into the commit message of the commit object. The veriﬁcation record contains information that
can later be used to attest whether the server performed correctly each of the actions requested by the
user through the web UI. By including the veriﬁcation record in the commit message, our solution also
meets design goal #2 – no changes are needed on the server.
We include the deterministic ﬁelds of the commit object into the veriﬁcation record, as shown in
Fig. 8. For merge commit objects, we also include the merge commit strategy chosen by the user. All
418
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
[]
[]
Fig. 8. The format of the signed veriﬁcation record, used in our lightweight design. Fields in between square brackets ([ ]) are
included only for merge commit objects (merge strategy and hash of 2nd parent commit).
commit 
tree 
parent 
[]
author   
committer   
Fig. 9. The format of the signed commit object, used in our main design. Fields in between square brackets ([ ]) are included
only for merge commit objects (hash of 2nd parent commit).
these ﬁelds, except the “tree hash”, are extracted from the GitHub page where the user performs the
commit. The “tree hash” ﬁeld is computed independently by the user (as described in Section 5.4.2).
The user may describe her commit by providing a message in the GitHub commit webpage. However,
our solution overwrites the user’s message with the veriﬁcation record. To preserve the original user’s
message, we include it in the veriﬁcation record as the “original commit message” ﬁeld.
5.3.2. Main design
The main challenge that prevents the lightweight design from computing a standard Git commit sig-
nature for web UI commits is that the commit timestamp is determined by the server and, thus, is not
known by the user when it initiates the commit via the web UI. To address this issue, our main design
creates the commit objects on the user side and pushes them to the server. The user chooses the commit
timestamp and creates a standard signed commit object by computing a signature over all the ﬁelds of a
commit, as shown in Fig. 9.
When computing the signed commit object on the client side, our main design is faced with the
challenge to meet design goal #3: creating a signed commit object without requiring the user to leave
the browser. We pioneer the ability to create a standard GPG-signed Git commit object in the browser by
re-implementing the functionality of the git commit and git send-pack commands exclusively
in the browser. That allows the user to create a signed commit object locally and push it to the server (as
described in Section 5.4.3). The commit signature can later be used to attest whether the server tampered
with the web UI commits. By creating a signed commit in the browser, our solution also satisﬁes design
goal #2.
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
419
PROCEDURE: Verify_Commits
Input: RepositoryName
Output: success/fail
1: commits ← Get_Commits(RepositoryName)
2: for (each commit in commits) do
3:
4:
5:
6:
7:
8:
9:
10: return success
// Check if the commit is signed
if Validate_Signed_Commit(commit) == false then
commit_msg ← Extract_Commit_Msg(commit)
verif_record ← Extract_Verif_Record(commit_msg)
// Validate the veriﬁcation record
if Validate_Verif_Record(verif_record) == false then
return fail
Just like in the lightweight design, all the ﬁelds of a commit, except the “tree hash” and the commit
timestamp, are extracted from the GitHub page. The “tree hash” ﬁeld is computed independently by the
user (as described in Section 5.4.2). As explained later in Section 6, both designs of le-git-imate provide
automated and manual checks to mitigate web UI attacks that attempt to confuse the user by displaying
incorrect information on the commit webpage.
5.3.3. Veriﬁcation procedure
When a developer retrieves the repository for the ﬁrst time (e.g., git clone or git checkout),
or when she pulls changes from the repository (e.g., git pull), she will check the validity of the
retrieved commits as follows:
• for the lightweight design: execute the Verify_Commits procedure. We implemented this veriﬁca-
tion procedure as a new Git command. Alternatively, it can be implemented as a client-side Git
hook executed after a git clone or after a git pull command;
• for the main design: run the standard git verify-commit command.
Based on this veriﬁcation strategy, le-git-imate achieves design goal #6.
Verify Commits Procedure. The developer expects each commit to have either a valid standard com-
mit signature (line 4) or a valid veriﬁcation record (line 8). If there is at least one commit that does
not meet either one of these conditions, the veriﬁcation fails, since the developer cannot get strong
guarantees about that commit. The function that validates a veriﬁcation record (Validate_Verif_Record,
line 8) returns success only if the following two conditions are true: (a) the veriﬁcation record contains
a valid digital signature over the veriﬁcation record; (b) the information recorded in the veriﬁcation
record matches the information in the commit object. Speciﬁcally, we check that the following ﬁelds
match: commit size, tree hash, ﬁrst parent commit hash, author name, author email, committer name,
and committer email. For merge commit objects, we also check the merge commit strategy and hashes
of additional commit parents.
5.4.
le-git-imate implementation
With the aim of meeting design goals #2, #3 and #4, we implemented our solution as a client-side
Chrome browser extension [31]. After preparing the commit, instead of using GitHub’s “commit” button
to commit the change, the user activates the extension via a “pageAction” button that is active only when
420
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
visiting GitHub. The extension is intended to help the user create a veriﬁcation record (for the lightweight
design) or a standard signed commit (for the main design). To do so, our extension parses the GitHub web
UI, obtains the relevant information regarding the current head of the repository (for regular commits)
or a pull-request (for merge commits and squash-and-merge), and computes the “tree hash” of the new
commit. Then, the following steps take place depending on which design is implemented:
• for the lightweight design:
∗ compute the signed veriﬁcation record;
∗ include the signed veriﬁcation record into the GitHub commit message, and push the commit to
the server;
• for the main design:
∗ compute the signed commit object;
∗ push the commit object to the server.
In the following, we ﬁrst give an overview of the implementation of each design. Then, we outline
computing the “tree hash” ﬁeld, which is a core component of both designs. We then describe creating a
signed commit object in the browser, as the main improvement in the main design over the lightweight
design. Finally, we present the key management component of le-git-imate.
5.4.1. Implementation overview
The extension consists of two JavaScript scripts that communicate with each other via the browser’s
messaging API as follows:
(1) The content script [32] runs in the user’s browser and can read and modify the content of the
GitHub webpages using the standard DOM APIs. The content script collects information about the
commit operation from the GitHub commit webpage and passes this information to the background
script.
(2) The background script [33] cannot access the content of GitHub webpages, but computes the “tree
hash” (as described in Section 5.4.2). This script then performs automatic and manual checks to
prevent web UI-based attacks (as described in Section 6). In short, the automatic checks ensure