with programmable data planes,” in Proc. of ANCS, 2018.
[7] A. C. Lapolli, J. A. Marques, and L. P. Gaspary, “Ofﬂoading real-
time ddos attack detection toprogrammable data planes,” in Proc.
IFIP/IEEE IM, 2019.
[8] “Arbor Networks APS Series.” https://www.arbornetworks.
com/ddos-protection-products/arbor-aps.
[9] “Cisco Guard XT 5650 Series.” https://goo.gl/DoFRBk.
[10] S. K. Fayaz, Y. Tobioka, V. Sekar, and M. Bailey, “Bohatei: Flexible
and elastic ddos defense,” in USENIX Security, 2015.
[11] “Arbor Networks TMS Series.” https://www.arbornetworks.
com/ddos-protection-products/arbor-tms.
https://barefootnetworks.com/
[12] “Barefoot
Toﬁno.”
products/brief-tofino/.
[13] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford,
C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese, and D. Walker,
“P4: Programming protocol-independent packet processors,” SIG-
COMM Comput. Commun. Rev., 2014.
[14] G. Li, M. Zhang, C. Liu, X. Kong, A. Chen, G. Gu, and H. Duan,
“Nethcf: Enabling line-rate and adaptive spoofed ip trafﬁc ﬁltering,”
in Proc. of IEEE ICNP, 2019.
[15] C. Estan and G. Varghese, “New directions in trafﬁc measurement
and accounting,” in Proc. of ACM SIGCOMM, 2002.
[16] “Cisco
ios
netﬂow.”
https://www.cisco.com/c/en/us/
products/ios-nx-os-software/ios-netflow/index.
html.
[17] M. Wang, B. Li, and Z. Li, “sﬂow: Towards resource-efﬁcient and
agile service federation in service overlay networks.,” in ICDCS,
pp. 628–635, IEEE Computer Society, 2004.
[18] “DDoS Breach Costs Rise to over $2M for Enterprises.” https:
//goo.gl/o13QxD, Kaspersky Lab, 2018.
[19] V. Braverman and R. Ostrovsky, “Zero-one frequency laws,” in Proc.
of STOC, 2010.
[20] Z. Liu, A. Manousis, G. Vorsanger, V. Sekar, and V. Braverman, “One
sketch to rule them all: Rethinking network ﬂow monitoring with
univmon,” in Proc. of ACM SIGCOMM, 2016.
[21] C. Fachkha, E. Bou-Harb, and M. Debbabi, “Fingerprinting internet
dns ampliﬁcation ddos activities.,” CoRR, vol. abs/1310.4216, 2013.
[22] J. Jung, B. Krishnamurthy, and M. Rabinovich, “Flash crowds and
denial of service attacks: Characterization and implications for cdns
and web sites,” in Proc. of WWW, 2002.
[23] G. Kambourakis, T. Moschos, D. Geneiatakis, and S. Gritzalis, “A fair
solution to dns ampliﬁcation attacks,” in Proc. WDFIA, 2007.
[24] A. Lakhina, M. Crovella, and C. Diot, “Mining anomalies using trafﬁc
feature distributions,” in In Proc. of ACM SIGCOMM, 2005.
[25] W. Lee and D. Xiang, “Information-theoretic measures for anomaly
detection,” in Proc. of IEEE S&P, 2001.
[26] H. Wang, D. Zhang, and K. G. Shin, “Detecting syn ﬂooding attacks,”
in In Proc. of INFOCOM, 2002.
[27] M. Yu, L. Jose, and R. Miao, “Software deﬁned trafﬁc measurement
with opensketch,” in Proc. of USENIX NSDI, 2013.
[28] “Intentional SYN Drop for mitigation against SYN ﬂooding attacks.”
https://bit.ly/33S5eGf, 2018.
[29] A. Broder, M. Mitzenmacher, and A. B. I. M. Mitzenmacher, “Net-
work applications of bloom ﬁlters: A survey,” in Internet Mathematics,
2002.
[30] G. Cormode and S. Muthukrishnan, “An Improved Data Stream Sum-
mary: The Count-min Sketch and Its Applications,” J. Algorithms,
2005.
[31] M. Charikar, K. Chen, and M. Farach-Colton, “Finding frequent items
in data streams,” ICALP, 2002.
[32] F. Bonomi, M. Mitzenmacher, R. Panigrahy, S. Singh, and G. Varghese,
“An improved construction for counting bloom ﬁlters,” in European
Symposium on Algorithms, pp. 684–695, Springer, 2006.
[33] M. Tirmazi, R. Ben Basat, J. Gao, and M. Yu, “Cheetah: Accelerating
database queries with switch pruning,” in Proc. of ACM SIGMOD,
2020.
[34] “Arbor Networks APS Datasheet.” https://www.netscout.com/
sites/default/files/2018-04/DS_APS_EN.pdf, 2018.
[35] “NSFOCUS
Anti-DDoS
System
Datasheet.”
https:
//nsfocusglobal.com/wp-content/uploads/2018/05/
Anti-DDoS-Solution.pdf, 2018.
[36] “Stop DDoS Attacks before They Disrupt the Customer Experience.”
https://intel.ly/2N9hexa, 2020.
[37] “Where at&t keeps an all-seeing eye on its ginormous data-
https://fortune.com/2016/04/30/
shuttling
att-gnoc-global-data-network-operations-center/,
AT&T, 2016.
network.”
[38] “Edge-Core Networks - WEDGE100BF-65X-O-AC-F-US QSFP
100g.” https://bit.ly/2HiZFW0.
[39] R. Miao, H. Zeng, C. Kim, J. Lee, and M. Yu, “Silkroad: Making
stateful layer-4 load balancing fast and cheap using switching asics,”
in Proc. of ACM SIGCOMM, 2017.
[40] P. Bosshart, G. Gibb, H.-S. Kim, G. Varghese, N. McKeown, M. Iz-
zard, F. Mujica, and M. Horowitz, “Forwarding metamorphosis: Fast
programmable match-action processing in hardware for sdn,” in Proc.
of ACM SIGCOMM, 2013.
[41] J. M. Smith and M. Schuchard, “Routing around congestion: Defeat-
ing ddos attacks and adverse network conditions via reactive BGP
routing,” in Proc. of IEEE Symposium on Security and Privacy, 2018.
[42] S. Ramanathan, J. Mirkovic, M. Yu, and Y. Zhang, “Senss against
volumetric ddos attacks,” in Proc. of ACSAC, 2018.
[43] “P4 Behavior Model version 2.” https://github.com/p4lang/
behavioral-model, 2018.
[44] D. Brauckhoff, B. Tellenbach, A. Wagner, M. May, and A. Lakhina,
“Impact of packet sampling on anomaly detection metrics,” in Proc. of
ACM IMC, 2006.
[45] A. Ramachandran, S. Seetharaman, N. Feamster, and V. Vazirani,
“Fast monitoring of trafﬁc subpopulations,” in Proc. of IMC, 2008.
[46] M. S. Kang, S. B. Lee, and V. D. Gligor, “The crossﬁre attack,” in
Proc. pf IEEE symposium on security and privacy, 2013.
[47] “Multi-function Platform for Cloud Networking.” https://bit.
ly/2JhJQB6, Arista, 2018.
[48] “EX9200-Flexibility and scalability for business agility and growth.”
https://juni.pr/2JnC1tY, Juniper, 2018.
[49] “Google Cloud using P4Runtime to build smart networks.” https:
//bit.ly/2Q7zG6B, Google, 2018.
[50] G. Antichi, T. Benson, N. Foster, F. M. V. Ramos, and J. Sherry,
“Programmable Network Data Planes (Dagstuhl Seminar 19141),”
Dagstuhl Reports, 2019.
[51] G. Nychis, V. Sekar, D. G. Andersen, H. Kim, and H. Zhang, “An
empirical evaluation of entropy-based trafﬁc anomaly detection,” in
3844    30th USENIX Security Symposium
USENIX Association
Proc. of ACM IMC, 2008.
[52] P. Flajolet, ric Fusy, O. Gandouet, and et al., “Hyperloglog: The analy-
sis of a near-optimal cardinality estimation algorithm,” in Proc. AOFA,
2007.
[53] B. Krishnamurthy, S. Sen, Y. Zhang, and Y. Chen, “Sketch-based
change detection: Methods, evaluation, and applications,” in Proc. of
ACM IMC, 2003.
[54] V. Braverman, R. Krauthgamer, and L. F. Yang, “Universal streaming
of subset norms,” CoRR, vol. abs/1812.00241, 2018.
[55] V. Braverman, R. Ostrovsky, and A. Roytman, “Zero-one laws for slid-
ing windows and universal sketches,” in Proc. of APPROX/RANDOM,
2015.
[56] R. Schweller, A. Gupta, E. Parsons, and Y. Chen, “Reversible sketches
for efﬁcient and accurate change detection over network data streams,”
in Proc. of ACM ICM, 2004.
[57] V. Sivaraman, S. Narayana, O. Rottenstreich, S. Muthukrishnan, and
J. Rexford, “Heavy-hitter detection entirely in the data plane,” in Proc.
ACM SOSR, 2017.
[58] Z. Bar-Yossef, T. S. Jayram, R. Kumar, D. Sivakumar, and L. Trevisan,
“Counting distinct elements in a data stream,” in Proc. of RANDOM,
2002.
[59] P. Flajolet, É. Fusy, O. Gandouet, and et al., “Hyperloglog: The analy-
sis of a near-optimal cardinality estimation algorithm,” in In Proc. of
AOFA, 2007.
[60] A. Lall, V. Sekar, M. Ogihara, J. Xu, and H. Zhang, “Data streaming
algorithms for estimating entropy of network trafﬁc,” in Proc. of
SIGMETRICS/PERFORMANCE, 2006.
[61] A. Chakrabarti, G. Cormode, and A. Mcgregor, “A near-optimal algo-
rithm for estimating the entropy of a stream,” ACM Trans. Algorithms,
2010.
[62] P. Clifford and I. Cosma, “A simple sketching algorithm for entropy
estimation over streaming data,” in Proc. of AISTATS, 2013.
[63] Y. M. P. Pa, S. Suzuki, K. Yoshioka, T. Matsumoto, T. Kasama, and
C. Rossow, “Iotpot: Analysing the rise of iot compromises,” in Proc.
of USENIX WOOT, 2015.
[64] M. Yang, J. Zhang, A. Gadre, Z. Liu, S. Kumar, and V. Sekar, “Joltik:
enabling energy-efﬁcient" future-proof" analytics on low-power wide-
area networks,” in Proc. of ACM MobiCom, 2020.
[65] Q. Xiao, Z. Tang, and S. Chen, “Universal online sketch for tracking
heavy hitters and estimating moments of data streams,” in Proc. of
IEEE INFOCOM, 2020.
[66] Z. Liu, S. Zhou, O. Rottenstreich, V. Braverman, and J. Rex-
ford, “Memory-efﬁcient performance monitoring on programmable
switches with lean algorithms,” in Proc. of SIAM APoCS, 2020.
[67] X. Jin, X. Li, H. Zhang, R. Soulé, J. Lee, N. Foster, C. Kim, and
I. Stoica, “Netcache: Balancing key-value stores with fast in-network
caching,” in Proc. ACM SOSP, 2017.
[68] Z. Liu, Z. Bai, Z. Liu, X. Li, C. Kim, V. Braverman, X. Jin, and
I. Stoica, “Distcache: Provable load balancing for large-scale storage
systems with distributed caching,” in Proc. of USENIX FAST, 2019.
[69] A. Zuquete, “Improving the functionality of syn cookies,” in Proc.
IFIP TC6/TC11, 2002.
[70] “Transmission Control Protocol, DARPA Internet Program Pro-
tocol Speciﬁcation.” https://tools.ietf.org/html/rfc793,
DARPA, 1981.
[71] “The internet topology zoo.” http://www.topology-zoo.org/.
[72] “Barefoot P4 Studio.” https://www.barefootnetworks.com/
products/brief-p4-studio/.
[73] “Jaqen Prototype Repo.” https://github.com/Froot-NetSys/
Jaqen, 2021.
[74] “Apache Thrift.” https://thrift.apache.org/.
[75] “Data plane developer kit (dpdk).” https://software.intel.
com/en-us/networking/dpdk.
[76] “The CAIDA UCSD Anonymized Internet Traces 2018.”
http://www.caida.org/data/passive/passive_2018_
dataset.xml.
[77] “Capture Traces from Mid-Atlantic CCDC 2012.” http://www.
netresec.com/?page=MACCDC.
[78] “DARPA Scalable Network Monitoring (SNM) Program Traf-
ﬁc, Traces taken 2009-11-05 to 2009-11-05.” https://www.
impactcybertrust.org/dataset_view?idDataset=742.
[79] P. Emmerich, S. Gallenmüller, D. Raumer, F. Wohlfart, and G. Carle,
“Moongen: A scriptable high-speed packet generator,” in Proc. of IMC,
2015.
[80] “Google Public DNS.” https://developers.google.com/
speed/public-dns/.
[81] “Memcached.” https://memcached.org.
[82] “Ping ﬂood (icmp ﬂood).” https://www.imperva.com/learn/
application-security/ping-icmp-flood/.
[83] “BIND 9 Open Source DNS Server.” https://www.isc.org/
downloads/bind/.
[84] “Intel vtune ampliﬁer.” https://software.intel.com/en-us/
intel-vtune-amplifier-xe.
[85] “Quagga routing suite.” https://www.quagga.net/.
[86] “Mininet.” http://mininet.org/.
[87] J. Mirkovic and P. Reiher, “A taxonomy of ddos attack and ddos
defense mechanisms,” SIGCOMM Comput. Commun. Rev., 2004.
[88] C. Douligeris and A. Mitrokotsa, “Ddos attacks and defense mecha-
nisms: Classiﬁcation and state-of-the-art,” Comput. Netw., 2004.
[89] S. T. Zargar, J. Joshi, and D. Tipper, “A survey of defense mechanisms
against distributed denial of service (ddos) ﬂooding attacks.,” IEEE
Communications Surveys and Tutorials, 2013.
[90] “Fighting DDoS with Distributed Defense.” https://bit.ly/
2JGIkYG, 2016.
[91] C. Pham-Quoc, B. Nguyen, and T. N. Thinh, “Fpga-based multicore
architecture for integrating multiple ddos defense mechanisms,” ACM
SIGARCH Computer Architecture News, 2017.
[92] N. Hoque, H. Kashyap, and D. Bhattacharyya, “Real-time ddos attack
detection using fpga,” Comput. Commun., 2017.
[93] Y. Chen and K. Hwang, “Collaborative detection and ﬁltering of shrew
ddos attacks using spectral analysis,” J. Parallel Distrib. Comput.,
2006.
[94] H. Chen, Y. Chen, and D. H. Summerville, “A survey on the applica-
tion of fpgas for network infrastructure security,” IEEE Communica-
tions Surveys and Tutorials, 2010.
[95] R. K. Thomas, B. L. Mark, T. Johnson, and J. Croall, “Netbouncer:
Client-legitimacy-based high-performance ddos ﬁltering,” in Proc. of
DARPA DISCEX-III, 2003.
fragments
[96] “Device, system and method for analysis of
in
train.” https://patents.google.com/patent/
a fragment
US20080127342, US Patent, 2007.
[97] R. Harrison, Q. Cai, A. Gupta, and J. Rexford, “Network-wide heavy
hitter detection with commodity switches,” in Proc. of SOSR, 2018.
[98] C. Kim, A. Sivaraman, N. Katta, A. Bas, A. Dixit, and L. J. Wobker,
“In-band network telemetry via programmable dataplanes,” in Deme
session of ACM SIGCOMM, 2015.
[99] S. Narayana, A. Sivaraman, V. Nathan, P. Goyal, V. Arun, M. Alizadeh,
V. Jeyakumar, and C. Kim, “Language-directed hardware design for
network performance monitoring,” in Proc. of ACM SIGCOMM, 2017.
[100] Z. Liu, R. Ben-Basat, G. Einziger, Y. Kassner, V. Braverman, R. Fried-
man, and V. Sekar, “Nitrosketch: Robust and general sketch-based
monitoring in software switches,” in Proc. of ACM SIGCOMM, 2019.
[101] A. Gupta, R. Harrison, M. Canini, N. Feamster, J. Rexford, and
W. Willinger, “Sonata: Query-driven streaming network telemetry,” in
Proc. of ACM SIGCOMM, 2018.
USENIX Association
30th USENIX Security Symposium    3845
Figure 16: State-of-the-art volumetric attacks and their mitigation strategies in Jaqen.
3846    30th USENIX Security Symposium
USENIX Association
ProtocolAttackDescriptionJaqen Mitigation FunctionsSYN floodAttackers send a large volume of fabricated SYN packets to exhuast victim servers' connection poolsBlock/AllowList(), ActionAndTest(drop,syn) HeaderHashAndTest(synproxy)ACK floodAttackers send forged ACK packets from diverse sources to the victim serversBlockList(), UnmatchAndAction(syn-ack,drop)Elephant flowsAttackers send large TCP flows to exhaust victim's network bandwithBlock/AllowList()RST/FIN FloodAttackers send fake RST or FIN packets to flood the victims and interrupt legitimate connectionsRateLimit()/BlockList() UnmatchAndAction(rst,drop)DNS flood (TCP)Attackers generate a high rate of DNS requests from different sources to exhaust DNS service.RateLimit() UnmatchAndAction(dns,drop)DNS amplificationAttackers launch forged DNS requests (with victim srcIPs) to public DNS resolvers; the replied traffic of an amplified volume will be directed to the victimRateLimit()/BlockList() UnmatchAndAction(dns,drop)UDP floodAttackers send a large volume of UDP packets from diverse sources to exhuast victim's bandwidth  RateLimit()/BlockList()NTP amplifactionAttackers launch forged NTP requests (with victim srcIPs) to public NTP servers; the replied traffic of an amplified volume will be directed to the victimRateLimit()/BlockList() UnmatchAndAction(ntp,drop)SNMP amplifcationAttackers launch forged SNMP requests (with victim srcIPs) to SNMP servers; the replied traffic of an amplified volume will be directed to the victimRateLimit()/BlockList() UnmatchAndAction(snmp,drop)SSDP amplifactionAttackers forge the discovery requests with victim srcIPs to plug-and-play devices; the replied traffic of an amplified volume will be directed to the victimRateLimit()/BlockList() UnmatchAndAction(ssdp,drop)Memcached amplificationAttackers discover open Memcached servers and send spoofed cache requests (with victim srcIPs) to flood the victim RateLimit()/BlockList() UnmatchAndAction(memcached,drop)QUIC amplifactionAttackers send spoofed "hello" messages to QUIC servers; the replied traffic of large volumes will be directed to the victimBlock/AllowList() UnmatchAndAction(quic,drop)DNS spoofingAttackers send corrupt DNS records to volunerable DNS resolvers and poision the DNS cacheKVStore(ip,record,65k)ICMP floodAttackers send a large volume of fabricated ICP echo requests from diverse sourcesRateLimit()/BlockList()Smurf attackA large number of spoofed ICMP echo requests with the intended victim srcIPs are broadcast to the network using an IP broadcast addressBlock/AllowList()     RateLimit()ARPARP poisoningAttackers send corrupt ARP mappings to a (local) network to cause denial of service or MITMKVStore(ip,mac,10k)HTTP Get/Post floodAttackers send a large volume of HTTP Get and Post requests to flood a target HTTP serverBlockList()/RateLimit()SIP register floodAttackers try to send a high volume of SIP REGISTER or INVITE packets to SIP serversBlockList()/RateLimit()SlowlorisAttackers launch a large number of small volume connections to exhaust victim server's connection poolBlock/AllowList()     RateLimit()HTTP slow postAttackers send many HTTP Post requests with message body in a slow rate to let the victim server time-outBlock/AllowList()     RateLimit()TCPUDPICMPApplication layer