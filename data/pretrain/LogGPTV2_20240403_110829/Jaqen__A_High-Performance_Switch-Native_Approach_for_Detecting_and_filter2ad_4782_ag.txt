Certainly! Below is the optimized and reorganized version of your text, which includes a clearer structure and improved readability. I've also fixed some formatting issues and ensured that all references are properly cited.

---

### References

1. [1] A. C. Lapolli, J. A. Marques, and L. P. Gaspary, "Offloading real-time DDoS attack detection to programmable data planes," in *Proc. IFIP/IEEE IM*, 2019.
2. [2] S. K. Fayaz, Y. Tobioka, V. Sekar, and M. Bailey, "Bohatei: Flexible and elastic DDoS defense," in *USENIX Security*, 2015.
3. [3] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford, C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese, and D. Walker, "P4: Programming protocol-independent packet processors," *SIGCOMM Comput. Commun. Rev.*, 2014.
4. [4] G. Li, M. Zhang, C. Liu, X. Kong, A. Chen, G. Gu, and H. Duan, "Nethcf: Enabling line-rate and adaptive spoofed IP traffic filtering," in *Proc. of IEEE ICNP*, 2019.
5. [5] C. Estan and G. Varghese, "New directions in traffic measurement and accounting," in *Proc. of ACM SIGCOMM*, 2002.
6. [6] M. Wang, B. Li, and Z. Li, "sFlow: Towards resource-efficient and agile service federation in service overlay networks," in *ICDCS*, pp. 628–635, IEEE Computer Society, 2004.
7. [7] V. Braverman and R. Ostrovsky, "Zero-one frequency laws," in *Proc. of STOC*, 2010.
8. [8] Z. Liu, A. Manousis, G. Vorsanger, V. Sekar, and V. Braverman, "One sketch to rule them all: Rethinking network flow monitoring with univmon," in *Proc. of ACM SIGCOMM*, 2016.
9. [9] C. Fachkha, E. Bou-Harb, and M. Debbabi, "Fingerprinting internet DNS amplification DDoS activities," *CoRR*, vol. abs/1310.4216, 2013.
10. [10] J. Jung, B. Krishnamurthy, and M. Rabinovich, "Flash crowds and denial of service attacks: Characterization and implications for CDNs and web sites," in *Proc. of WWW*, 2002.
11. [11] G. Kambourakis, T. Moschos, D. Geneiatakis, and S. Gritzalis, "A fair solution to DNS amplification attacks," in *Proc. WDFIA*, 2007.
12. [12] A. Lakhina, M. Crovella, and C. Diot, "Mining anomalies using traffic feature distributions," in *In Proc. of ACM SIGCOMM*, 2005.
13. [13] W. Lee and D. Xiang, "Information-theoretic measures for anomaly detection," in *Proc. of IEEE S&P*, 2001.
14. [14] H. Wang, D. Zhang, and K. G. Shin, "Detecting SYN flooding attacks," in *In Proc. of INFOCOM*, 2002.
15. [15] M. Yu, L. Jose, and R. Miao, "Software-defined traffic measurement with OpenSketch," in *Proc. of USENIX NSDI*, 2013.
16. [16] A. Broder, M. Mitzenmacher, and A. B. I. M. Mitzenmacher, "Network applications of Bloom filters: A survey," *Internet Mathematics*, 2002.
17. [17] G. Cormode and S. Muthukrishnan, "An Improved Data Stream Summary: The Count-min Sketch and Its Applications," *J. Algorithms*, 2005.
18. [18] M. Charikar, K. Chen, and M. Farach-Colton, "Finding frequent items in data streams," *ICALP*, 2002.
19. [19] F. Bonomi, M. Mitzenmacher, R. Panigrahy, S. Singh, and G. Varghese, "An improved construction for counting Bloom filters," in *European Symposium on Algorithms*, pp. 684–695, Springer, 2006.
20. [20] M. Tirmazi, R. Ben Basat, J. Gao, and M. Yu, "Cheetah: Accelerating database queries with switch pruning," in *Proc. of ACM SIGMOD*, 2020.
21. [21] R. Miao, H. Zeng, C. Kim, J. Lee, and M. Yu, "Silkroad: Making stateful layer-4 load balancing fast and cheap using switching ASICs," in *Proc. of ACM SIGCOMM*, 2017.
22. [22] P. Bosshart, G. Gibb, H.-S. Kim, G. Varghese, N. McKeown, M. Izzard, F. Mujica, and M. Horowitz, "Forwarding metamorphosis: Fast programmable match-action processing in hardware for SDN," in *Proc. of ACM SIGCOMM*, 2013.
23. [23] J. M. Smith and M. Schuchard, "Routing around congestion: Defeating DDoS attacks and adverse network conditions via reactive BGP routing," in *Proc. of IEEE Symposium on Security and Privacy*, 2018.
24. [24] S. Ramanathan, J. Mirkovic, M. Yu, and Y. Zhang, "SENSS against volumetric DDoS attacks," in *Proc. of ACSAC*, 2018.
25. [25] D. Brauckhoff, B. Tellenbach, A. Wagner, M. May, and A. Lakhina, "Impact of packet sampling on anomaly detection metrics," in *Proc. of ACM IMC*, 2006.
26. [26] A. Ramachandran, S. Seetharaman, N. Feamster, and V. Vazirani, "Fast monitoring of traffic subpopulations," in *Proc. of IMC*, 2008.
27. [27] M. S. Kang, S. B. Lee, and V. D. Gligor, "The crossfire attack," in *Proc. of IEEE Symposium on Security and Privacy*, 2013.
28. [28] G. Antichi, T. Benson, N. Foster, F. M. V. Ramos, and J. Sherry, "Programmable Network Data Planes (Dagstuhl Seminar 19141)," *Dagstuhl Reports*, 2019.
29. [29] G. Nychis, V. Sekar, D. G. Andersen, H. Kim, and H. Zhang, "An empirical evaluation of entropy-based traffic anomaly detection," in *Proc. of ACM IMC*, 2008.
30. [30] P. Flajolet, É. Fusy, O. Gandouet, and et al., "HyperLogLog: The analysis of a near-optimal cardinality estimation algorithm," in *In Proc. of AOFA*, 2007.
31. [31] B. Krishnamurthy, S. Sen, Y. Zhang, and Y. Chen, "Sketch-based change detection: Methods, evaluation, and applications," in *Proc. of ACM IMC*, 2003.
32. [32] V. Braverman, R. Krauthgamer, and L. F. Yang, "Universal streaming of subset norms," *CoRR*, vol. abs/1812.00241, 2018.
33. [33] V. Braverman, R. Ostrovsky, and A. Roytman, "Zero-one laws for sliding windows and universal sketches," in *Proc. of APPROX/RANDOM*, 2015.
34. [34] R. Schweller, A. Gupta, E. Parsons, and Y. Chen, "Reversible sketches for efficient and accurate change detection over network data streams," in *Proc. of ACM ICM*, 2004.
35. [35] V. Sivaraman, S. Narayana, O. Rottenstreich, S. Muthukrishnan, and J. Rexford, "Heavy-hitter detection entirely in the data plane," in *Proc. ACM SOSR*, 2017.
36. [36] Z. Bar-Yossef, T. S. Jayram, R. Kumar, D. Sivakumar, and L. Trevisan, "Counting distinct elements in a data stream," in *Proc. of RANDOM*, 2002.
37. [37] A. Lall, V. Sekar, M. Ogihara, J. Xu, and H. Zhang, "Data streaming algorithms for estimating entropy of network traffic," in *Proc. of SIGMETRICS/PERFORMANCE*, 2006.
38. [38] A. Chakrabarti, G. Cormode, and A. McGregor, "A near-optimal algorithm for estimating the entropy of a stream," *ACM Trans. Algorithms*, 2010.
39. [39] P. Clifford and I. Cosma, "A simple sketching algorithm for entropy estimation over streaming data," in *Proc. of AISTATS*, 2013.
40. [40] Y. M. P. Pa, S. Suzuki, K. Yoshioka, T. Matsumoto, T. Kasama, and C. Rossow, "IoTPot: Analysing the rise of IoT compromises," in *Proc. of USENIX WOOT*, 2015.
41. [41] M. Yang, J. Zhang, A. Gadre, Z. Liu, S. Kumar, and V. Sekar, "Joltik: Enabling energy-efficient 'future-proof' analytics on low-power wide-area networks," in *Proc. of ACM MobiCom*, 2020.
42. [42] Q. Xiao, Z. Tang, and S. Chen, "Universal online sketch for tracking heavy hitters and estimating moments of data streams," in *Proc. of IEEE INFOCOM*, 2020.
43. [43] Z. Liu, S. Zhou, O. Rottenstreich, V. Braverman, and J. Rexford, "Memory-efficient performance monitoring on programmable switches with lean algorithms," in *Proc. of SIAM APoCS*, 2020.
44. [44] X. Jin, X. Li, H. Zhang, R. Soulé, J. Lee, N. Foster, C. Kim, and I. Stoica, "NetCache: Balancing key-value stores with fast in-network caching," in *Proc. ACM SOSP*, 2017.
45. [45] Z. Liu, Z. Bai, Z. Liu, X. Li, C. Kim, V. Braverman, X. Jin, and I. Stoica, "DistCache: Provable load balancing for large-scale storage systems with distributed caching," in *Proc. of USENIX FAST*, 2019.
46. [46] A. Zuquete, "Improving the functionality of SYN cookies," in *Proc. IFIP TC6/TC11*, 2002.
47. [47] "Transmission Control Protocol, DARPA Internet Program Protocol Specification." *RFC 793*, DARPA, 1981.
48. [48] "The Internet Topology Zoo." <http://www.topology-zoo.org/>.
49. [49] "Barefoot P4 Studio." <https://www.barefootnetworks.com/products/brief-p4-studio/>.
50. [50] "Jaqen Prototype Repo." <https://github.com/Froot-NetSys/Jaqen>, 2021.
51. [51] "Apache Thrift." <https://thrift.apache.org/>.
52. [52] "Data Plane Developer Kit (DPDK)." <https://software.intel.com/en-us/networking/dpdk>.
53. [53] "The CAIDA UCSD Anonymized Internet Traces 2018." <http://www.caida.org/data/passive/passive_2018_dataset.xml>.
54. [54] "Capture Traces from Mid-Atlantic CCDC 2012." <http://www.netresec.com/?page=MACCDC>.
55. [55] "DARPA Scalable Network Monitoring (SNM) Program Traffic, Traces taken 2009-11-05 to 2009-11-05." <https://www.impactcybertrust.org/dataset_view?idDataset=742>.
56. [56] P. Emmerich, S. Gallenmüller, D. Raumer, F. Wohlfart, and G. Carle, "MoonGen: A scriptable high-speed packet generator," in *Proc. of IMC*, 2015.
57. [57] "Google Public DNS." <https://developers.google.com/speed/public-dns/>.
58. [58] "Memcached." <https://memcached.org>.
59. [59] "Ping flood (ICMP flood)." <https://www.imperva.com/learn/application-security/ping-icmp-flood/>.
60. [60] "BIND 9 Open Source DNS Server." <https://www.isc.org/downloads/bind/>.
61. [61] "Intel VTune Amplifier." <https://software.intel.com/en-us/intel-vtune-amplifier-xe>.
62. [62] "Quagga Routing Suite." <https://www.quagga.net/>.
63. [63] "Mininet." <http://mininet.org/>.
64. [64] J. Mirkovic and P. Reiher, "A taxonomy of DDoS attack and DDoS defense mechanisms," *SIGCOMM Comput. Commun. Rev.*, 2004.
65. [65] C. Douligeris and A. Mitrokotsa, "DDoS attacks and defense mechanisms: Classification and state-of-the-art," *Comput. Netw.*, 2004.
66. [66] S. T. Zargar, J. Joshi, and D. Tipper, "A survey of defense mechanisms against distributed denial of service (DDoS) flooding attacks," *IEEE Communications Surveys and Tutorials*, 2013.
67. [67] "Fighting DDoS with Distributed Defense." <https://bit.ly/2JGIkYG>, 2016.
68. [68] C. Pham-Quoc, B. Nguyen, and T. N. Thinh, "FPGA-based multicore architecture for integrating multiple DDoS defense mechanisms," *ACM SIGARCH Computer Architecture News*, 2017.
69. [69] N. Hoque, H. Kashyap, and D. Bhattacharyya, "Real-time DDoS attack detection using FPGA," *Comput. Commun.*, 2017.
70. [70] Y. Chen and K. Hwang, "Collaborative detection and filtering of Shrew DDoS attacks using spectral analysis," *J. Parallel Distrib. Comput.*, 2006.
71. [71] H. Chen, Y. Chen, and D. H. Summerville, "A survey on the application of FPGAs for network infrastructure security," *IEEE Communications Surveys and Tutorials*, 2010.
72. [72] R. K. Thomas, B. L. Mark, T. Johnson, and J. Croall, "NetBouncer: Client-legitimacy-based high-performance DDoS filtering," in *Proc. of DARPA DISCEX-III*, 2003.
73. [73] "Device, system and method for analysis of a fragment in train." *US Patent US20080127342*, 2007.
74. [74] R. Harrison, Q. Cai, A. Gupta, and J. Rexford, "Network-wide heavy hitter detection with commodity switches," in *Proc. of SOSR*, 2018.
75. [75] C. Kim, A. Sivaraman, N. Katta, A. Bas, A. Dixit, and L. J. Wobker, "In-band network telemetry via programmable dataplanes," in *Demo session of ACM SIGCOMM*, 2015.
76. [76] S. Narayana, A. Sivaraman, V. Nathan, P. Goyal, V. Arun, M. Alizadeh, V. Jeyakumar, and C. Kim, "Language-directed hardware design for network performance monitoring," in *Proc. of ACM SIGCOMM*, 2017.
77. [77] Z. Liu, R. Ben-Basat, G. Einziger, Y. Kassner, V. Braverman, R. Friedman, and V. Sekar, "NitroSketch: Robust and general sketch-based monitoring in software switches," in *Proc. of ACM SIGCOMM*, 2019.
78. [78] A. Gupta, R. Harrison, M. Canini, N. Feamster, J. Rexford, and W. Willinger, "Sonata: Query-driven streaming network telemetry," in *Proc. of ACM SIGCOMM*, 2018.

### Figure 16: State-of-the-Art Volumetric Attacks and Their Mitigation Strategies in Jaqen

| **Protocol** | **Attack Description** | **Jaqen Mitigation Functions** |
|--------------|------------------------|--------------------------------|
| TCP          | **SYN Flood**: Attackers send a large volume of fabricated SYN packets to exhaust victim servers' connection pools. | `Block/AllowList()`, `ActionAndTest(drop, syn)`, `HeaderHashAndTest(synproxy)` |
| TCP          | **ACK Flood**: Attackers send forged ACK packets from diverse sources to the victim servers. | `BlockList()`, `UnmatchAndAction(syn-ack, drop)` |
| TCP          | **Elephant Flows**: Attackers send large TCP flows to exhaust the victim's network bandwidth. | `Block/AllowList()` |
| TCP          | **RST/FIN Flood**: Attackers send fake RST or FIN packets to flood the victims and interrupt legitimate connections. | `RateLimit()`, `BlockList()`, `UnmatchAndAction(rst, drop)` |
| UDP          | **UDP Flood**: Attackers send a large volume of UDP packets from diverse sources to exhaust the victim's bandwidth. | `RateLimit()`, `BlockList()` |
| DNS (TCP)    | **DNS Flood (TCP)**: Attackers generate a high rate of DNS requests from different sources to exhaust DNS services. | `RateLimit()`, `UnmatchAndAction(dns, drop)` |
| DNS (UDP)    | **DNS Amplification**: Attackers launch forged DNS requests (with victim source IPs) to public DNS resolvers; the replied traffic of an amplified volume will be directed to the victim. | `RateLimit()`, `BlockList()`, `UnmatchAndAction(dns, drop)` |
| NTP (UDP)    | **NTP Amplification**: Attackers launch forged NTP requests (with victim source IPs) to public NTP servers; the replied traffic of an amplified volume will be directed to the victim. | `RateLimit()`, `BlockList()`, `UnmatchAndAction(ntp, drop)` |
| SNMP (UDP)   | **SNMP Amplification**: Attackers launch forged SNMP requests (with victim source IPs) to SNMP servers; the replied traffic of an amplified volume will be directed to the victim. | `RateLimit()`, `BlockList()`, `UnmatchAndAction(snmp, drop)` |
| SSDP (UDP)   | **SSDP Amplification**: Attackers forge discovery requests with victim source IPs to plug-and-play devices; the replied traffic of an amplified volume will be directed to the victim. | `RateLimit()`, `BlockList()`, `UnmatchAndAction(ssdp, drop)` |
| Memcached (UDP) | **Memcached Amplification**: Attackers discover open Memcached servers and send spoofed cache requests (with victim source IPs) to flood the victim. | `RateLimit()`, `BlockList()`, `UnmatchAndAction(memcached, drop)` |
| QUIC (UDP)   | **QUIC Amplification**: Attackers send spoofed "hello" messages to QUIC servers; the replied traffic of large volumes will be directed to the victim. | `Block/AllowList()`, `UnmatchAndAction(quic, drop)` |
| DNS (UDP)    | **DNS Spoofing**: Attackers send corrupt DNS records to vulnerable DNS resolvers and poison the DNS cache. | `KVStore(ip, record, 65k)` |
| ICMP         | **ICMP Flood**: Attackers send a large volume of fabricated ICMP echo requests from diverse sources. | `RateLimit()`, `BlockList()` |
| ICMP         | **Smurf Attack**: A large number of spoofed ICMP echo requests with the intended victim source IPs are broadcast to the network using an IP broadcast address. | `Block/AllowList()`, `RateLimit()` |
| ARP          | **ARP Poisoning**: Attackers send corrupt ARP mappings to a (local) network to cause denial of service or MITM. | `KVStore(ip, mac, 10k)` |
| HTTP (TCP)   | **HTTP GET/POST Flood**: Attackers send a large volume of HTTP GET and POST requests to flood a target HTTP server. | `BlockList()`, `RateLimit()` |
| SIP (TCP/UDP)| **SIP Register Flood**: Attackers try to send a high volume of SIP REGISTER or INVITE packets to SIP servers. | `BlockList()`, `RateLimit()` |
| HTTP (TCP)   | **Slowloris**: Attackers launch a large number of small-volume connections to exhaust the victim server's connection pool. | `Block/AllowList()`, `RateLimit()` |
| HTTP (TCP)   | **HTTP Slow Post**: Attackers send many HTTP POST requests with message body in a slow rate to let the victim server time out. | `Block/AllowList()`, `RateLimit()` |

---

This should provide a more organized and professional presentation of your references and the figure.