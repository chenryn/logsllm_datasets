            {
                uint32_t plainLeft0 = leftHalf(plain0[c]);
                uint32_t plainRight0 = rightHalf(plain0[c]);
                uint32_t cipherLeft0 = leftHalf(cipher0[c]);
                uint32_t cipherRight0 = rightHalf(cipher0[c]);
                uint32_t tempy0 = fBox(cipherLeft0 ^ guessK0) ^ cipherRight0;
                if (guessK4 == 0)
                {
                    guessK4 = cipherLeft0 ^ plainLeft0;
                    guessK5 = tempy0 ^ cipherLeft0 ^ plainRight0;
                }
                else if (((cipherLeft0 ^ plainLeft0) != guessK4) || ((tempy0 ^ cipherLeft0 ^ plainRight0) != guessK5))
                {
                    guessK4 = 0;
                    guessK5 = 0;
                    break;
                }
            }
            if (guessK4 != 0)
            {
                crackedSubkey0 = guessK0;
                crackedSubkey4 = guessK4;
                crackedSubkey5 = guessK5;
                endTime = time(NULL);
                printf("found subkeys : 0x%08lx  0x%08lx  0x%08lxn", guessK0, guessK4, guessK5);
                printf("  Time to crack round #1 = %i secondsn", (endTime - startTime));
                //break;
            }
        }
        printf("nn");
        printf("0x%08lx - ", crackedSubkey0); if (crackedSubkey0 == subkey[0]) printf("Subkey 0 : GOOD!n"); else printf("Subkey 0 : BADn");
        printf("0x%08lx - ", crackedSubkey1); if (crackedSubkey1 == subkey[1]) printf("Subkey 1 : GOOD!n"); else printf("Subkey 1 : BADn");
        printf("0x%08lx - ", crackedSubkey2); if (crackedSubkey2 == subkey[2]) printf("Subkey 2 : GOOD!n"); else printf("Subkey 2 : BADn");
        printf("0x%08lx - ", crackedSubkey3); if (crackedSubkey3 == subkey[3]) printf("Subkey 3 : GOOD!n"); else printf("Subkey 3 : BADn");
        printf("0x%08lx - ", crackedSubkey4); if (crackedSubkey4 == subkey[4]) printf("Subkey 4 : GOOD!n"); else printf("Subkey 4 : BADn");
        printf("0x%08lx - ", crackedSubkey5); if (crackedSubkey5 == subkey[5]) printf("Subkey 5 : GOOD!n"); else printf("Subkey 5 : BADn");
        printf("n");
        unsigned long fullEndTime = time(NULL);
        printf("Total crack time = %i secondsn", (fullEndTime - fullStartTime));
        printf("FINISHEDn");
        system("pause");
        return 0;
    }
子密钥有多解，但是影响不大，可以忽略
然后在题目文件上直接写解密函数
    import os,random,sys,string
    from hashlib import sha256
    import SocketServer
    import signal
    FLAG=""
    SZ = 8
    def gbox(a,b,mode):
        x = (a+b+mode)%256
        return ((x>6))&0xff
    def fbox(plain):
        t0 = (plain[2] ^ plain[3])
        y1 = gbox(plain[0] ^ plain[1], t0, 1)
        y0 = gbox(plain[0], y1, 0)
        y2 = gbox(t0, y1, 0)
        y3 = gbox(plain[3], y2, 1)
        return [y3, y2, y1, y0]
    def doxor(l1,l2):
        #print l1,l2
        return map(lambda x: x[0]^x[1], zip(l1,l2))
    def encrypt_block(pt, ks):
        kss = ['08ad5f9c','1f05ad85','3a9907f0','00d13ef9','6e20bbb2','c86367d0']
        ks = [map(ord,i.decode("hex")) for i in kss]
        l = doxor(pt[:4], ks[4])
        r = doxor(doxor(pt[4:], ks[5]), l)
        for i in range(4):
            l, r = doxor(r, fbox(doxor(l,ks[i]))), l
        l, r = r, doxor(l,r)
        return l+r
    def decrypt_block(pt, ks):
        ksss = ['08ad5f9c','1f05ad85','3a9907f0','00d13ef9','6e20bbb2','c86367d0']
        kss = [map(ord,i.decode("hex")) for i in ksss]
        ks = [i[::-1] for i in kss]
        #print ks
        #print pt
        l = pt[:4]
        r = pt[4:]
        #print l,r
        r, l = l, doxor(l,r)
        for i in range(3,-1,-1):
            l, r = r, doxor(l, fbox(doxor(r,ks[i])))
        r = doxor(doxor(r, ks[5]), l)
        l = doxor(l, ks[4])
        return l+r
    def encrypt(pt, k):
        #print pt
        ct = ''
        for i in range(0, len(pt), SZ):
            res = encrypt_block(map(ord, pt[i:i+SZ]), k)
            ct += ''.join(map(chr,res))
        return ct.encode('hex')
    def decrypt(pt, k):
        #print pt
        ct = ''
        for i in range(0, len(pt), SZ):
            res = decrypt_block(map(ord, pt[i:i+SZ]), k)
            ct += ''.join(map(chr,res))
        print ct
        return ct.encode('hex')
    def doout(x):
        tmp = ''.join(map(chr, x))
        return tmp.encode('hex')
    def genkeys():
        subkeys=[]
        for x in xrange(6):
            subkeys.append(map(ord,os.urandom(4)))
        return subkeys
    class Task(SocketServer.BaseRequestHandler):
        def proof_of_work(self):
            random.seed(os.urandom(8))
            proof = ''.join([random.choice(string.ascii_letters+string.digits) for _ in xrange(20)])
            digest = sha256(proof).hexdigest()
            self.request.send("sha256(XXXX+%s) == %sn" % (proof[4:],digest))
            self.request.send('Give me XXXX:')
            x = self.request.recv(10)
            x = x.strip()
            if len(x) != 4 or sha256(x+proof[4:]).hexdigest() != digest: 
                return False
            return True
        def recvhex(self, sz):
            try:
                r = sz
                res = ''
                while r>0:
                    res += self.request.recv(r)
                    if res.endswith('n'):
                        r = 0
                    else:
                        r = sz - len(res)
                res = res.strip()
                res = res.decode('hex')
            except:
                res = ''
            return res
        def dosend(self, msg):
            try:
                self.request.sendall(msg)
            except:
                pass
        def handle(self):
            #if not self.proof_of_work():
            #    return
            key = genkeys()
            print key
            for i in xrange(50):
                self.dosend("plaintext(hex): ")
                pt = self.recvhex(21)
                if pt=='':
                    break
                ct = encrypt(pt, key)
                self.dosend("%sn" % ct.encode('hex'))
            cflag = encrypt(FLAG, key)
            self.dosend("and your flag:n")
            self.dosend("%sn" % cflag.encode('hex'))
            self.request.close()
    class ForkedServer(SocketServer.ForkingTCPServer, SocketServer.TCPServer):
        pass
    print decrypt('6f342d1097841c6dd0f342d64a30add678e4b6d16be2497e5520df87b81d1f50'.decode('hex'),0)
    #if __name__ == "__main__":
        #HOST, PORT = '0.0.0.0', 10001
        #print HOST
        #print PORT
        #server = ForkedServer((HOST, PORT), Task)
        #server.allow_reuse_address = True
        #server.serve_forever()
运行得到flag：`Dozerctf{****************}`
## RE
###  貌似有一些不对
直接运行失败，放入ida搜字符串
发现有一个换表base64，表也给了
然后再栅栏一下得到flag
###  dozer_vm_plus
这道题应该非预期了，发现可以逐字节爆破，如果输入正确，回显会多一个行，所以爆破脚本
    from pwn import *
    from string import *
    table =printable
    FLAG='DozerCtf{'
    lenth=11
    for i in range(50):
        for j in printable:
            flag=FLAG+j
            sh=process('./mac')
            sh.recv()
            sh.sendline(flag)
            ans = sh.recvuntil("FLAG!").split("n")
            if len(ans) > lenth:
                Flag+=j
                lenth+=1
                print FLAG
                break
            #sh.interactive()
补一个`}`就行了。
###  easy_maze
先用UPXUnPacKer脱个壳
然后ida打开，找到地图
根据引用找到关键函数，然后手工走一波
SSSSDDDWWWDDSSSSSAAAASSDDDDSSSDDWWWWDDDSSSSD
发现不行，换键了，大概这样
W: 上下颠倒  
A： 左移一位  
S：上下颠倒 左右颠倒  
D：右移一位
写脚本