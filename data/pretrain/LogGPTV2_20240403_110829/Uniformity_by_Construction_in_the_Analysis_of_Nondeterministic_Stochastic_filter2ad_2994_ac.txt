interpreted as CTMDP CM = (SI , Words, R, s0) where
R := {(s, A, R)|R(s(cid:2)) =
i=1 λi iff ∃u ∈ SM , λi ∈
R≥0 such that s A−→ u ∧ u
Property preservation. Given a path σ in M we know that
in CTMDP CM that corresponds to σ due
there exists a path σ(cid:2)
to the transformation. On the other hand, for each path σ in
CM there exists a set of paths in M that corresponds to σ. For
a given σ in M let Ψ(σ) denote the corresponding path in CM
and, for given σ in CM let Φ(σ) be the set of corresponding
paths in M. We extend this notation to sets of paths.
Theorem 1 Given IMC M = (SM, Act,−→, (cid:1)(cid:1)(cid:2), s0)
and CTMDP CM
= (SC, Words, R, s0)
as
re-
each sched-
sult of
the
uler D in M there exists a scheduler D(cid:2)
in CM
for all measurable sets A of paths (in M)
such that
(2) For each scheduler D in CM there exists a scheduler D(cid:2)
M such that for all measurable sets A of paths (in CM)
D (A) = PrCM
D(cid:1) (Ψ(A)) .
transformation.
(1) For
PrM
in
PrCM
D (A) = PrM
D(cid:1)(Φ(A)) .
Note that this theorem does not require uniformity. The proof
of this theorem uses the path measures induced by a sched-
uler in the original system (uIMC or uCTMDP) to construct
the scheduler in the goal system (uCTMDP or uIMC). For (1)
it can be shown that there exists a set of paths Λ in M for each
path σ in CM such that Λ comprises all paths (of M) that share
the same trace information as σ and the same stochastic behav-
ior. Assume that D is the scheduler in M and D(cid:2)
denotes the
scheduler we intend to construct for CM. Now, D(cid:2)(σ)(s, a, R)
is then deﬁned as the sum over D(σ(cid:2))(σ(cid:2)(cid:2)) for all σ(cid:2) ∈ Λ and
that correspond to (s, a, R) (in CM). Each of the sum-
σ(cid:2)(cid:2)
mands has to be weighted by the probability of its occurrence
in M. To show (2) we need to reconstruct scheduler D(cid:2)
in
M from scheduler D in CM. This is the more difﬁcult case.
For a σ in M there is not necessarily a path σ(cid:2)
in CM that
corresponds to σ, because last(σ) may end in an interactive
state without Markov predecessors. Thus, for the construction
of D(cid:2)
we have to take preﬁxes of σ into account for which a
corresponding path in CM exists. For details we refer to [16].
4.2 Timed reachability in uCTMDPs
In this section we brieﬂy recall the algorithm for timed
reachability analysis in uCTMDPs [2]. Note, that the slight
variant considered here (in which we allow for nondeterminis-
tic choices among the same action a ∈ L) implies only a slight
change in the algorithm given in [2] where we have to range
over all emanating transitions (instead of all actions) of a given
state s.
For a uCTMDP C with uniform rate E we aim to calcu-
late the maximal probability to reach a given set of states B
within t time units from a particular state s in C w.r.t. all
schedulers D according to Deﬁnition 2. We denote this by
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Algorithm 1 (c.f. [2]) Computing sup
PrC
D(s,
≤t(cid:3) B)
D
k := k(ε, E, t); ∀s ∈ S : qk+1 := 0;
for all i = k, k − 1, . . . ,1 do
for all s ∈ S\B do m := -1;
for all (s, a, R) ∈ R(s) do
m := max{m, ψ(i) · PrR(s, B) +
(cid:1)
s(cid:1)∈S
PrR(s, s(cid:1)) ·
qi+1(s(cid:1))};
qi(s) = m;
for all s ∈ S do
for all s ∈ B do qi(s) :=ψ (i) + qi+1(s);
if s /∈ B then q(s) := q1(s); else q(s) := 1;
return q;
D(s,
≤t(cid:3) B), where PrC
supD PrC
probability measure on C. PrC
thus we have to map the timed reachability probability s,
to the set of all inﬁnite paths in which it is fulﬁlled.
D is the scheduler dependent
D is deﬁned on inﬁnite paths, and
≤t(cid:3) B
In [2] the problem of approximating this probability is
tackled.
It it is shown that it is sufﬁcient to consider non-
randomized step-dependent schedulers D : S × {0, . . . , k} (cid:12)→
≤t(cid:3)
L and that in order to derive the maximal value of PrC
B), the transitions to be selected by a scheduler D can be com-
puted by a greedy backward strategy up to a speciﬁc depth k
which can be precomputed on the basis of E, t and the accu-
(cid:1)∞
racy ε of the approximation. In particular, k is the smallest
n=k+1 ψ(n) ≤ ε. Note, that this is the right
index such that
truncation point as deﬁned in [9].
D(s,
(cid:1)k
n=i ψ(n) · PrRi
Algorithm 1 shows the pseudo-code of the timed reachabil-
ity algorithm. For i = k the transition that has to be scheduled
is chosen such that the one-step probability to reach B is max-
imized. Since this is the kth step in evolution of the CTMDP,
this probability is weighted with the Poisson probability for
realizing k steps within t time units (ψ(i)). In [2] it is shown
(s, B) · PrRi+1(s, B) · ··· ·
that qi(s) =
(cid:1)k
PrRn
(s, B) has to be computed such that it is optimal under
n=i ψ(n) · PrR∗(s, B) · PrRi+1(s, B) · ··· · PrRn
(s, B).
all
Where Rj is the rate function that belongs to the transition se-
lected by scheduler D0 at step j and R∗ ranges over all rate
functions that could be selected at step i. Scheduler D0 is
the scheduler that is constructed to maximize the reachability
probability.
ity to reach a state s ∈ B within time t.
The algorithm returns for each state the maximal probabil-
We have implemented Algorithm 1 in JAVA and integrated
it into the ETMCC model checker [17]. The transition relation
is stored as sparse matrices storing action and rate information
separately. This means that we partitioned the state space in in-
teractive and Markov states (as for strictly alternating IMCs).
The Markov states are in one-to-one correspondence to the rate
functions of the CTMDP transitions. The implementation is
prototypical and so far we have not put efforts in implement-
ing more advanced techniques, e. g., more efﬁcient state space
representations of the CTMDP. However, the performance of
this prototypical implementation is quite promising as can be
seen in the next paragraph.
1
2
...
N
left
backbone
right
switch
switch
1
2
...
fail
500 h
4000 h
5000 h
N
repair
0.5 h
4 h
8 h
Workstation
Switch
Backbone
Figure 1. FTWC with mean fail and repair times.
5 Fault-tolerant work station cluster
We are now in the position to construct a model of the fault-
tolerant workstation cluster (FTWC) example. This example
has ﬁrst been studied in [13], and is also one of the PRISM
benchmarks. Remarkably, these studies treated the model as
a CTMC, which is not easy to justify, as we will argue below.
The general design of the workstation cluster is depicted on
the top of Figure 1. The overall system consists of two sub-
clusters which are connected via a backbone. There are N
workstations in each sub-cluster which are connected together
in a star topology with a switch as central node that addition-
ally provides the interface to the backbone.
Each of the components in the fault-tolerant workstation
cluster can break down (fail) and then needs to be repaired be-
fore becoming available again. The mean time to failure and
the mean repair time for each component in isolation are de-
picted on the bottom of Figure 1. They correspond to mean
durations of exponential distributions.
There is a single repairunit for the entire cluster, not de-
picted in Figure 1, which is only capable of repairing one failed
component at a time. Essentially, this means that when multi-
ple components are failed, they must be handled in sequence,
and there is a decision to be taken which of the failed com-
ponents the repairunit is assigned ﬁrst (or next). Notably, this
nondeterminism which is inherent in the speciﬁcation has been
ignored in the original model [13] and subsequent work. It has
been approximated by using a very fast, but probabilistic de-
cision, encoded via the use of very high rates (of exponential
distributions) assigned to the decisive transitions. These high
rates are absent in the original problem statement where the
repairunit is assigned nondeterministically.
Labeled transition systems. We now construct a uIMC
modeling the behavior of the FTWC example. We do so in a
compositional manner. There are six basic ingredients, namely
the workstations (left and right), the switches (left and right),
the backbone and the repairunit. Their behavior is modeled as
simple LTSs. In Figure 2 we depict two different LTSs, where
a white circle is used to represent the initial state of the respec-
tive LTS. The LTS of the repairunit (RU) is shown on the left
hand side, where we depicted for sake of readability only two
transitions. In fact, there are ﬁve parallel transitions emanating
the initial state labeled with, e. g., g wsL, and ﬁve transitions
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ending in the initial state labeled with, e. g., r wsL. The LTSs
for workstations (WS), switches (SW) and the backbone (BA)
are very similar in nature, their general structure is given on
the right hand side of the ﬁgure. Each of them can fail and
has to grab the repairunit afterwards. Only when the repairunit
is assigned to that particular component, a repair can be per-
formed. Once the component is repaired, the repairunit will
be released and can be assigned to another failed component.
For a particular component, e. g., the left workstations, the ac-
tions g and r in Figure 2 have to be replaced by the according
actions, e. g., by g wsL and r wsL, respectively (this is an in-
stance of process algebraic relabelling).
Time constraints. For each of the components, except for
the repairunit, the occurence of fail and repair is governed by
delays. These delays have to be incorporated in the model by
composition.
We exemplify the construction of time constraints and the
incorporation of these time constraints into the LTS for the
(left) workstations as follows: The LTS of a workstation
is shown rightmost in Figure 2. The belonging time con-
straints are depicted on the left hand side of Figure 3. They
are obtained by applying El(cid:2)( 0.002
0.002 , fail, r wsL) and
2 , repair, g wsL), respectively. The elapse oper-
El(
ator preserves uniformity and thus these time constraints are
uIMCs.
2
On the right hand side of Figure 3 we have depicted the IMC
describing the timed behavior of a (left) workstation. This
IMC is obtained by fully interleaving the time constraints and
subsequently synchronizing with WS on synchronization set
{fail, repair, g wsL, r wsL}. Parallel composition of uIMCs
preserves uniformity and thus the resulting IMCs are uniform,
too.
System model. The FTWC is composed out of the compo-
nents for the workstations, switches, the backbone and the re-
pairunit. First, the workstations, switches and the backbone
are constructed as exempliﬁed above and, after hiding actions
fail,repair they are composed in parallel (with empty synchro-
nization set).
The resulting uIMCs are then minimized, and composed
with the repairunit on the synchronization alphabet {g i,r i},
for i ∈ {wsL,wsR,swL,swR,bb}, which yields the overall
system description of the FTWC (modulo another hiding and
minimization step) as an IMC, which, by construction, is still
uniform.
RU
g i
WS, SW, BA
fail
r i
i ∈ {wsL, wsR, swL, swR, bb}
r
g
repair
Figure 2. LTSs for the FTWC.
TIME CONSTRAINTS
2
0.002
g wsL
WS WITH TIMING
2.002 2.002
2
0.002
fail
0.002
r
w
s
L
fail
r
e
p
a
i
r
2
L
s
w
r
repair
2
g
w
s
L
0.002
2
2.002
2.002
0.002
compositional
Figure 3. Time constraints and Workstation.
construction of
Technicalities. The
the
FTWC has been carried out using the CADP toolbox [5], and
here especially the SVL scripting language and the BCG MIN
tool. For N = 14 we obtained an intermediate state space
with 5 · 106 states and 6 · 107 transitions. This model then re-
duces to a uIMC with 6 · 104 states and 5 · 105 transitions. For
N = 16 we were not able to construct the FTWC in a compo-
sitional way. The intermediate state space generation stopped
with an incomplete system description that already took 2 GB
of hard disk memory.
Larger models were generated with PRISM [18]. PRISM
generates a CTMC of the FTWC example in which the non-
determinism is replaced by uniform probability distributions
using a ﬁxed large rate Γ. In order to retain the original non-
determinism, we replaced this particular Γ by an interactive
transition and applied afterwards the transformation. We made
sure that for N ≤ 14 equivalent models were obtained via
CADP and PRISM – up to uniformity.
Results.
In this section we report on the results and statistics
we obtained when analyzing the FTWC. We focus on the per-
formance of the transformation and of the analysis algorithm.
As in [13] we say that our system operates in premium qual-
ity when there are at least N workstations operational. These
workstations have to be connected to each other via operational
switches. When the number of operational workstations in one
sub-cluster is below N the premium quality can be ensured by
an operational backbone under the condition that there are N
operational workstations in total. We are interested in the fol-
lowing property: “What is the worst case probability to hit a
state in which premium service is not guaranteed within t time
units?” for which we report results and statistics.
In Table 1 we have collected different statistics of the trans-
formation and reachability analysis for different N. Columns
2-6 display the number of states, number of transitions and the
memory usage of the CTMDP representation of the FTWC.