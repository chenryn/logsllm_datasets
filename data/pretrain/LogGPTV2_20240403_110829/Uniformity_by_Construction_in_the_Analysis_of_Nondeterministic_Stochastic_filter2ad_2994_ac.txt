### Interpretation and Transformation of CTMDP

We interpret the Continuous-Time Markov Decision Process (CTMDP) as \( CM = (S, \text{Words}, R, s_0) \), where:
- \( S \) is the set of states.
- \(\text{Words}\) is the set of actions.
- \( R \) is the transition relation defined as \( R := \{(s, A, R) \mid R(s') = \sum_{i=1} \lambda_i \text{ if } \exists u \in S, \lambda_i \in \mathbb{R}_{\geq 0} \text{ such that } s \xrightarrow{A} u \text{ and } u \} \).
- \( s_0 \) is the initial state.

### Property Preservation

Given a path \(\sigma\) in the Interactive Markov Chain (IMC) \(M\), there exists a corresponding path \(\sigma'\) in the CTMDP \(CM\) due to the transformation. Conversely, for each path \(\sigma\) in \(CM\), there exists a set of paths in \(M\) that correspond to \(\sigma\). For a given \(\sigma\) in \(M\), let \(\Psi(\sigma)\) denote the corresponding path in \(CM\), and for a given \(\sigma\) in \(CM\), let \(\Phi(\sigma)\) be the set of corresponding paths in \(M\). This notation extends to sets of paths.

### Theorem 1: Scheduler Transformation

Given an IMC \( M = (S_M, \text{Act}, \xrightarrow{}, \mu, s_0) \) and a CTMDP \( CM = (S_C, \text{Words}, R, s_0) \):

1. **From IMC to CTMDP:**
   - For each scheduler \( D \) in \( M \), there exists a scheduler \( D' \) in \( CM \) such that for all measurable sets \( A \) of paths (in \( M \)):
     \[
     \Pr_M^D(A) = \Pr_{CM}^{D'}(\Psi(A))
     \]

2. **From CTMDP to IMC:**
   - For each scheduler \( D \) in \( CM \), there exists a scheduler \( D' \) in \( M \) such that for all measurable sets \( A \) of paths (in \( CM \)):
     \[
     \Pr_{CM}^D(A) = \Pr_M^{D'}(\Phi(A))
     \]

**Note:** This theorem does not require uniformity. The proof uses the path measures induced by a scheduler in the original system (IMC or CTMDP) to construct the scheduler in the goal system (CTMDP or IMC).

### Proof Sketch

For (1), it can be shown that for each path \(\sigma\) in \(CM\), there exists a set of paths \(\Lambda\) in \(M\) such that \(\Lambda\) comprises all paths in \(M\) that share the same trace information and stochastic behavior as \(\sigma\). If \(D\) is the scheduler in \(M\) and \(D'\) is the scheduler we intend to construct for \(CM\), then \(D'(\sigma)(s, a, R)\) is defined as the sum over \(D(\sigma')(s', a', R')\) for all \(\sigma' \in \Lambda\) that correspond to \((s, a, R)\) in \(CM\). Each term in the sum is weighted by the probability of its occurrence in \(M\).

For (2), we need to reconstruct the scheduler \(D'\) in \(M\) from the scheduler \(D\) in \(CM\). This is more challenging because for a path \(\sigma\) in \(M\), there may not be a corresponding path \(\sigma'\) in \(CM\) if \(\sigma\) ends in an interactive state without Markov predecessors. Thus, for the construction of \(D'\), we must consider prefixes of \(\sigma\) for which a corresponding path in \(CM\) exists. For details, see [16].

### Timed Reachability in uCTMDPs

In this section, we briefly recall the algorithm for timed reachability analysis in Uniform Continuous-Time Markov Decision Processes (uCTMDPs) [2]. The slight variant considered here (allowing nondeterministic choices among the same action \(a \in L\)) implies only a minor change in the algorithm given in [2], where we range over all emanating transitions instead of all actions of a given state \(s\).

For a uCTMDP \(C\) with uniform rate \(E\), we aim to calculate the maximal probability to reach a given set of states \(B\) within \(t\) time units from a particular state \(s\) in \(C\) with respect to all schedulers \(D\). We denote this by:

\[
\sup_D \Pr_C^D(s \models \Diamond_{\leq t} B)
\]

### Algorithm 1: Computing Timed Reachability

```plaintext
Algorithm 1 (c.f. [2]) Computing sup_D Pr_C^D(s, ≤t B)

1. k := k(ε, E, t); ∀s ∈ S : qk+1 := 0;
2. for all i = k, k − 1, . . . ,1 do
3.   for all s ∈ S\B do m := -1;
4.   for all (s, a, R) ∈ R(s) do
5.     m := max{m, ψ(i) · PrR(s, B) + 
6.                ∑_{s'∈S} PrR(s, s') · qi+1(s')};
7.   qi(s) = m;
8. for all s ∈ S do
9.   for all s ∈ B do qi(s) := ψ(i) + qi+1(s);
10.  if s /∈ B then q(s) := q1(s); else q(s) := 1;
11. return q;
```

In [2], it is shown that it is sufficient to consider non-randomized step-dependent schedulers \(D : S \times \{0, \ldots, k\} \to L\) and that the maximal value of \(\Pr_C^D(s \models \Diamond_{\leq t} B)\) can be computed using a greedy backward strategy up to a specific depth \(k\), which can be precomputed based on \(E\), \(t\), and the accuracy \(\epsilon\) of the approximation. Specifically, \(k\) is the smallest index such that \(\sum_{n=k+1}^\infty \psi(n) \leq \epsilon\).

### Implementation and Performance

We have implemented Algorithm 1 in Java and integrated it into the ETMCC model checker [17]. The transition relation is stored as sparse matrices, storing action and rate information separately. The state space is partitioned into interactive and Markov states. The implementation is prototypical, and we have not yet implemented advanced techniques. However, the performance of this prototypical implementation is promising.

### Fault-Tolerant Workstation Cluster (FTWC)

We now construct a model of the fault-tolerant workstation cluster (FTWC) example, first studied in [13] and also a PRISM benchmark. The general design of the FTWC is depicted in Figure 1. The system consists of two sub-clusters connected via a backbone, with \(N\) workstations in each sub-cluster connected in a star topology with a switch as the central node.

Each component can fail and needs to be repaired. The mean times to failure and repair are depicted in Figure 1. There is a single repair unit for the entire cluster, capable of repairing one failed component at a time. Nondeterminism in the repair assignment has been ignored in previous models, approximated by very high rates.

### Model Construction

We construct a uIMC model of the FTWC in a compositional manner, considering six basic components: workstations, switches, the backbone, and the repair unit. Their behavior is modeled as simple labeled transition systems (LTSs). Figure 2 depicts the LTSs, and Figure 3 shows the time constraints and the interleaved IMC for a workstation.

### System Model

The FTWC is composed of the components for workstations, switches, the backbone, and the repair unit. The workstations, switches, and the backbone are constructed as exemplified, and after hiding actions, they are composed in parallel. The resulting uIMCs are minimized and composed with the repair unit, yielding the overall system description as a uniform IMC.

### Technicalities

The FTWC model has been constructed using the CADP toolbox [5], specifically the SVL scripting language and the BCG MIN tool. For \(N = 14\), we obtained an intermediate state space with 5 million states and 60 million transitions, reducing to a uIMC with 60 thousand states and 500 thousand transitions. For \(N = 16\), the intermediate state space generation was incomplete and took 2 GB of hard disk memory.

Larger models were generated with PRISM [18], which generates a CTMC of the FTWC example, replacing nondeterminism with uniform probability distributions. We ensured that for \(N \leq 14\), equivalent models were obtained via CADP and PRISM.

### Results

We report on the results and statistics of analyzing the FTWC, focusing on the performance of the transformation and the analysis algorithm. We define premium quality as having at least \(N\) operational workstations connected via operational switches. We are interested in the worst-case probability to hit a state in which premium service is not guaranteed within \(t\) time units. Table 1 collects different statistics of the transformation and reachability analysis for different \(N\).

### Conclusion

This document provides a detailed and coherent explanation of the transformation and analysis of the FTWC model, ensuring clarity and professionalism.