ICSD
f-3
ACC 0.7757 0.6597 0.8161 0.8064 0.6904 0.8494 0.9118
0.8002 0.6914 0.8372 0.8278 0.7208 0.8675 0.9190
F1
4.5 Evaluation of Parameter Sensitivity,
Scalability, and Stability
In this set of experiments, based on the dataset described in Sec-
tion 4.1, we first conduct the sensitivity analysis of how different
choices of parameters (i.e., walks per node r, walk length l, vector
dimension d, and neighborhood size w) will affect the performance
of ICSD in insecure code snippet detection. From the results shown
in Figure 7(a) and 7(b), we can observe that the balance between
computational cost (number of walks per node r and walk length l
in x-axis) and efficacy (F1 in y-axis) can be achieved when r = 10
and l = 60 for insecure code snippet detection. We also examine
how vector dimension (d) and neighborhood size (w) affect the per-
formance. As shown in Figure 7(c), we can see that the performance
tends to be stable once d reaches around 300; similarly, from Figure
7(d) we can find that the performance inclines to be stable when
w increases to around 8. Overall, ICSD is not strictly sensitive to
these parameters, and is able to reach high performance under a
cost-effective parameter choice.
ICSD: An Automatic System for Insecure Code Snippet Detection
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 8: Scalability evaluation.
Figure 7: Parameter sensitivity evaluation.
Figure 9: Stability evaluation.
We then further evaluate the scalability of ICSD which can be
parallelized for optimization. We run the experiments using the
default parameters with different number of threads (i.e., 1, 4, 8,
12, 16), each of which utilizes one CPU core. Figure 8(a) shows
the speed-up of ICSD deploying multiple threads over the single-
threaded case, which reveals that the model achieves acceptable
sub-linear speed-ups as the line is close to the optimal line; while
Figure 8(b) shows that the performance remains stable when using
multiple threads for model updating. Overall, the proposed system
are efficient and scalable for large-scale HIN with large numbers
of nodes. For stability evaluation, Figure 9 shows the receiver
operating characteristic (ROC) curves of ICSD based on the 10-fold
cross validations; it achieves an average 0.9094 TP rate (TPR) at the
0.0851 FP rate (FPR) for insecure code snippet detection.
4.6 Case Studies
To better understand and gain deeper insights into the security-
related risks of modern social coding platform of Stack Overflow,
in this section, based on our developed system ICSD, we further
analyze the detected insecure code snippets in Stack Overflow.
Table 5 shows different types of security risks or vulnerabilities
that could result from the detected insecure code snippets.
From Table 5, we can observe that the most prevalent insecure
code infiltration for Android apps in Stack Overflow is Android
Manifest configuration (28.73%), which would pose serious threats
to Android apps, since Manifest retains all the components, se-
curity mechanisms, and structure information for an app [8, 9].
Such detected insecure code snippets related to Android Manifest
configuration vulnerabilities include violation of least permission
request, the component features being configured as exported, and
data backup and debuggable setting being turned on, etc. For ex-
ample, as shown in Figure 10.(a), many unnecessary permissions
are requested in the detected insecure code snippet, which could be
exploited by cyberattackers to perform the attacks on Android apps.
Actually, this code snippet was provided by an inexperienced user
answering a Facebook problematic login question; but it was also
copied-pasted by other users in their answer threads responding to
different posted questions. From Table 5, we can also observe that
data security is another kind of prevalent insecure code infiltration
(23.05%). After further analysis, the vulnerabilities of data security
mainly focus on plaintext transmission, shared preferences, open
file outputs, and external storage being set to readable/writable.
The example of such kind of insecure code snippet is shown in Fig-
ure 10.(b), which uses cleartext username and password for FTP au-
thentication instead of Secure File Transfer Protocol (SFTP), where
password sniffing attacks could be performed to collect username
and password that would cause sensitive information leakage.
Table 5: Types of security risks of detected insecure codes
Types of security risks
# Detected Codes Percentage
Android Manifest configuration
WebView component
Data security
File directory traversal
Implicit intents
Security checking
2,601
271
2,087
1,413
851
1,831
28.73%
02.99%
23.05%
15.60%
09.40%
20.22%
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Y. Ye et al.
the insecure code snippets in Stack Overflow, we propose to utilize
not only the code content, but also various kinds of relationships
among users, badges, questions, answers, and code snippets. Based
on the extracted relation features, the code snippets are depicted
by a structured HIN.
HIN is used to model different types of entities and relations [37],
which has been intensively deployed to various applications, such
as scientific publication network analysis [39, 41], social network
analysis [15, 16], and malware detection [14, 23]. To reduce the
high computation and space cost in network mining, many efficient
network embedding methods have been proposed, including ho-
mogeneous network representationn learning (e.g., DeepWalk [34],
node2vec [19], PTE [42], and LINE [43]) and HIN representation
learning (e.g., ESim [36], metapath2vec [13] and HIN2vec [18]).
Unfortunately, these methods cannot be directly employed in our
application, which is to exploit social coding properties in addition
to code content for automatic detection of insecure code snippets.
To tackle this challenge, in this paper, we propose a novel learning
model named snippet2vec for node (i.e., code snippet) representa-
tion learning in HIN where both the HIN structures and semantics
are maximally preserved; after that, a multi-view fusion classifier
is constructed for insecure code snippet detection.
6 CONCLUSION
To address the imminent code security issue in modern social cod-
ing platforms, in this paper, we bring an important new insight
to exploit social coding properties in addition to code content for
automatic detection of insecure code snippets in Stack Overflow.
To depict the code snippets, we not only analyze the code con-
tent, but also utilize various kinds of relations among users, badges,
questions, answers, code snippets and keywords in Stack Over-
flow. To model the rich semantic relationships, we first introduce a
structured HIN for representation and then use meta-path based ap-
proach to incorporate higher-level semantics to build up relatedness
over code snippets. Later, we propose a novel network embedding
model named snippet2vec for representation learning in the HIN
where both the HIN structures and semantics are maximally pre-
served. After that, a multi-view fusion classifier is built for insecure
code snippet detection. The experimental results based on the data
collections from Stack Overflow demonstrate that the developed
system ICSD integrating our proposed method outperforms alterna-
tive approaches in insecure code snippet detection. The proposed
method and developed system can also be easily expanded to code
security analysis in other social coding platforms, such as GitHub
and Stack Exchange.
ACKNOWLEDGEMENT
The authors would also like to thank the anti-malware experts of
Tencent Security Lab for the helpful discussion and data annotation.
This work is partially supported by the U.S. National Science Foun-
dation under grants CNS-1618629, CNS-1814825 and OAC-1839909,
NIJ 2018-75-CX-0032, WV Higher Education Policy Commission
Grant (HEPC.dsr.18.5), and WVU Research and Scholarship Ad-
vancement Grant (R-844).
Figure 10: Insecure code snippets related to (a) Android Man-
ifest configuration and (b) FTP data security.
The study based on the detected insecure code snippets in Stack
Overflow using our developed system ICSD demonstrates that
knowledge gained from social coding platform data mining can
facilitate the understanding and thus help enhance its code security
in modern software programming ecosystem.
5 RELATED WORK
There have been many works on knowledge discovery from Stack
Overflow data [2, 5, 7, 11, 26–29, 44, 45] - from gamification mo-
tivation for voluntary contributions [7], discussion interest trend
[27, 28], patterns of questions/answers [44] and project-specific
language differences [26], to developer interaction [2], dynamics of
the participation [5], repair patterns from extracted code samples
[29] and interplay between platform activities and development
process [45]. However, most of these works have focused in Stack
Overflow semantics and user’s behavior but rarely addressed the
issue of code security analysis. The only exceptions appear to be [1]
and [17] which both exploited Android app codes as a case study
to evaluate the security of information source in Stack Overflow.
Though those research results are promising, [1] only performed
empirical studies while [17] merely analyzed the code snippet it-
self without considering any relationship to other Stack Overflow
data (i.e., without utilizing the social coding properties in this plat-
form). Different from the existing works, in this paper, to detect
ICSD: An Automatic System for Insecure Code Snippet Detection
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
(2012), 14–17.
REFERENCES
[1] Yasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L. Mazurek,
and Christian Stransky. 2016. You Get Where You’re Looking For The Impact
of Information Sources on Code Security. In IEEE Symposium on Security and
Privacy (SP). 289–305.
[2] Tanveer Ahmed and Abhishek Srivastava. 2017. Understanding and evaluating
the behavior of technical users. A study of developer interaction at StackOverflow.
Hum. Cent. Comput. Inf. Sci. 7, 8 (2017).
[3] AttackFlow. 2017. Watch Out For Insecure StackOverflow Answers. In https://
www.attackflow.com/Blog/StackOverflow.
[4] Léon Bottou. 1991. Stochastic gradient learning in neural networks. Proceedings
of Neuro-Nımes 91, EC2 (1991).
[5] Fabio Calefato, Filippo Lanubile, and Nicole Novielli. 2018. How to ask for tech-
nical help? Evidence-based guidelines for writing questions on Stack Overflow.
Information and Software Technology 94 (2018), 186–207.
[6] Andrea Capiluppi, Alexander Serebrenik, and Leif Singer. 2013. Assessing tech-
nical candidates on the social web. In IEEE Software. 45–51.
[7] Huseyin Cavusoglu, Zhuolun Li, and Ke-Wei Huang. 2015. Can Gamification
Motivate Voluntary Contributions? The Case of StackOverflow Q&A Community.
In Proceedings of the 18th ACM conference companion on computer supported
cooperative work & social computing. 171–174.
[8] Lingwei Chen, Shifu Hou, and Yanfang Ye. 2017. SecureDroid: Enhancing Security
of Machine Learning-based Detection against Adversarial Android Malware At-
tacks. In Proceedings of the 33rd Annual Computer Security Applications Conference
(ACSAC). 362–372.
[9] Lingwei Chen, Shifu Hou, Yanfang Ye, and Shouhuai Xu. 2018. DroidEye: Fortify-
ing Security of Learning-based Classifier against Adversarial Android Malware
Attacks. In IEEE/ACM International Conference on Advances in Social Networks
Analysis and Mining (ASONAM).
[10] John Coogle, Jeet Gajjar, and Chase Greco. 2017. StackInTheFlow: StackOverflow
Search Engine. In VCU Capstone Design Expo Posters.
[11] Daniel Czyczyn-Egird and Rafal Wojszczyk. 2016. Determining the Popularity of
Design Patterns Used by Programmers Based on the Analysis of Questions and
Answers on Stackoverflow.com Social Network. In Communications in Computer
and Information Science (CCIS). 421–433.
[12] S. Deterding. 2012. Gamification: designing for motivation. Interactions 19, 4
[13] Yuxiao Dong, Nitesh V Chawla, and Ananthram Swami. 2017. metapath2vec:
Scalable representation learning for heterogeneous networks. In Proceedings of
the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data
Mining (KDD’2017). 135–144.
[14] Yujie Fan, Shifu Hou, Yiming Zhang, Yanfang Ye, and Melih Abdulhayoglu. 2018.
Gotcha-Sly Malware! Scorpion: A Metagraph2vec Based Malware Detection
System. In Proceedings of the 24th ACM SIGKDD International Conference on
Knowledge Discovery & Data Mining (KDD). ACM, 253–262.
[15] Yujie Fan, Yiming Zhang, Yanfang Ye, and Xin Li. 2018. Automatic Opioid User
Detection from Twitter: Transductive Ensemble Built on Different Meta-graph
Based Similarities over Heterogeneous Information Network.. In IJCAI. 3357–
3363.
[16] Yujie Fan, Yiming Zhang, Yanfang Ye, Xin Li, and Wanhong Zheng. 2017. Social
Media for Opioid Addiction Epidemiology: Automatic Detection of Opioid Addicts
from Twitter and Case Studies. In CIKM. ACM, 1259–1267.
[17] Felix Fischer, Konstantin Bottinger, Huang Xiao, Christian Stransky, Yasemin
Acar, Michael Backes, and Sascha Fahl. 2017. Stack Overflow Considered Harm-
ful? The Impact of Copy and Paste on Android Application Security. In IEEE
Symposium on Security and Privacy (SP). 121–136.
[18] Tao-Yang Fu, Wang-Chien Lee, and Zhen Lei. 2017. HIN2Vec: Explore Meta-
paths in Heterogeneous Information Networks for Representation Learning.
In Proceedings of the 2017 ACM on Conference on Information and Knowledge
Management (CIKM). 1797–1806.
[19] Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable feature learning for
networks. In Proceedings of the 22nd ACM SIGKDD international conference on
Knowledge discovery and data mining. ACM, 855–864.
[20] Peter D Hoff, Adrian E Raftery, and Mark S Handcock. 2002. Latent space
approaches to social network analysis. J. Amer. Statist. Assoc. 97, 460 (2002),
1090–1098.
[21] Shifu Hou, Aaron Saas, Lifei Chen, and Yanfang Ye. 2016. Deep4MalDroid: A Deep
Learning Framework for Android Malware Detection Based on Linux Kernel
System Call Graphs. In WIW ’16.
[22] Shifu Hou, Aaron Saas, Yanfang Ye, and Lifei Chen. 2016. DroidDelver: An
Android Malware Detection System Using Deep Belief Network Based on API
Call Blocks. In International Conference on Web-Age Information Management
(WAIM). 54–66.
[23] Shifu Hou, Yanfang Ye, Yangqiu Song, and Melih Abdulhayoglu. 2017. Hin-
droid: An intelligent android malware detection system based on structured
heterogeneous information network. In Proceedings of the 23rd ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining (KDD’2017).
sites#traffic.
ACM, 1507–1515.
[24] IDC. 2018. International Data Corporation (IDC). In http://www.idc.com.
[25] Ilse CF Ipsen and Carl D Meyer. 1995. The angle between complementary
subspaces. Amer. Math. Monthly (1995), 904–911.
[26] David Kavaler, Sasha Sirovica, Vincent Hellendoorn, Raul Aranovich, and
Vladimir Filkov. 2017. Perceived Language Complexity in GitHub Issue Dis-
cussions and Their Effect on Issue Resolution. In ASE. 72–83.
[27] Roy Ka-Wei Lee and David Lo. 2017. GitHub and Stack Overflow: Analyzing
developer interests across multiple social collaborative platforms. In International
Conference on Social Informatics. Springer, 245–256.
[28] Mario Linares-Vasquez, Gabriele Bavota, Massimiliano Di Penta, and Rocco
Oliveto. 2014. How Do API Changes Trigger Stack Overflow Discussions? A
Study on the Android SDK. In ICPC. 83–94.
[29] Xuliang Liu and Hao Zhong. 2018. Mining StackOverflow for Program Repair. In
IEEE 25th International Conference on Software Analysis, Evolution and Reengi-
neering (SANER). 118–129.
[30] Lucintel. 2017. Growth Opportunities in the Global Software Market. In http://
www.lucintel.com/software-market-2017.aspx.
[31] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Efficient estima-
tion of word representations in vector space. In arXiv preprint arXiv:1301.3781.
[32] Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. 2013.
Distributed representations of words and phrases and their compositionality. In
NIPS. 3111–3119.
[33] Stack Overflow. 2018. Stack Overflow. In https://stackoverflow.com/.
[34] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. DeepWalk: Online Learn-
ing of Social Representations. In Proceedings of the 20th ACM SIGKDD interna-
tional conference on Knowledge discovery and data mining (KDD). 701–710.
[35] Sebastian Poeplau, Yanick Fratantonio, Antonio Bianchi, Christopher Kruegel,
and Giovanni Vigna. 2014. Execute This! Analyzing Unsafe and Malicious Dy-
namic Code Loading in Android Applications. In NDSS. 23–26.
[36] Jingbo Shang, Meng Qu, Jialu Liu, Lance M. Kaplan, Jiawei Han, and Jian Peng.
2016. Meta-Path Guided Embedding for Similarity Search in Large-Scale Hetero-
geneous Information Networks. In arXiv:1610.09769.
[37] Chuan Shi, Yitong Li, Jiawei Zhang, Yizhou Sun, and S Yu Philip. 2017. A survey
of heterogeneous information network analysis. IEEE Transactions on Knowledge
and Data Engineering 29, 1 (2017), 17–37.
[38] StackExchange. 2018. StackExchange Statistics. In https://stackexchange.com/
[39] Yizhou Sun, Rick Barber, Manish Gupta, Charu C Aggarwal, and Jiawei Han. 2011.
Co-author relationship prediction in heterogeneous bibliographic networks. In
International Conference on Advances in Social Networks Analysis and Mining
(ASONAM). IEEE, 121–128.
[40] Yizhou Sun and Jiawei Han. 2012. Mining heterogeneous information networks:
principles and methodologies. Synthesis Lectures on Data Mining and Knowledge
Discovery (SLDMKD) 3, 2 (2012), 1–159.
[41] Yizhou Sun, Jiawei Han, Xifeng Yan, Philip S Yu, and Tianyi Wu. 2011. Pathsim:
Meta path-based top-k similarity search in heterogeneous information networks.
Proceedings of the VLDB Endowment (PVLDB) 4, 11 (2011), 992–1003.
[42] Jian Tang, Meng Qu, and Qiaozhu Mei. 2015. PTE: Predictive Text Embedding
through Large-scale Heterogeneous Text Networks. In Proceedings of the 21th
ACM SIGKDD International Conference on Knowledge Discovery and Data Mining
(KDD). 1165–1174.
[43] Jian Tang, Meng Qu, Mingzhe Wang, Ming Zhang, Jun Yan, and Qiaozhu Mei.
2015. Line: Large-scale information network embedding. In WWW ’15 Proceedings
of the 24th International Conference on World Wide Web. 1067–1077.
[44] Christoph Treude, Ohad Barzilay, and Margaret-Anne Storey. 2011. How do pro-
grammers ask and answer questions on the web?: Nier track. In 33rd International
Conference on Software Engineering (ICSE). 804–807.
[45] Bogdan Vasilescu, Vladimir Filkov, and Alexander Serebrenik. 2013. StackOver-
flow and GitHub: Associations Between Software Development and Crowd-
sourced Knowledge. In International Conference on Social Computing (SocialCom).
188–195.
[46] Shuicheng Yan, Dong Xu, Benyu Zhang, Hong-Jiang Zhang, Qiang Yang, and
Stephen Lin. 2007. Graph embedding and extensions: A general framework for
dimensionality reduction.
IEEE transactions on pattern analysis and machine
intelligence (TPAMI) 29, 1 (2007), 40–51.
[47] Yanfang Ye, Tao Li, Donald Adjeroh, and S Sitharama Iyengar. 2017. A survey
on malware detection using data mining techniques. ACM Computing Surveys
(CSUR) 50, 3 (2017), 41.
[48] Huan Zhao, Quanming Yao, Jianda Li, Yangqiu Song, and Dik Lun Lee. 2017. Meta-
graph based recommendation fusion over heterogeneous information networks.
In Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining (KDD’2017). 635–644.
[49] Guido Zuccon, Leif A Azzopardi, and CJ Van Rijsbergen. 2009. Semantic spaces:
Measuring the distance between different subspaces. In International Symposium
on Quantum Interaction. Springer, 225–236.