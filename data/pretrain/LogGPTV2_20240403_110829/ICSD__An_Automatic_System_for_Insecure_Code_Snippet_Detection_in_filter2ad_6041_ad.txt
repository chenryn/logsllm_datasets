### ICSD: An Automatic System for Insecure Code Snippet Detection

#### 4.5 Evaluation of Parameter Sensitivity, Scalability, and Stability

In this section, we evaluate the sensitivity of the parameters, scalability, and stability of the ICSD system using the dataset described in Section 4.1.

**Parameter Sensitivity Analysis:**

We first conduct a sensitivity analysis to determine how different choices of parameters (i.e., walks per node \( r \), walk length \( l \), vector dimension \( d \), and neighborhood size \( w \)) affect the performance of ICSD in detecting insecure code snippets. The results are shown in Figures 7(a) and 7(b). From these figures, we observe that a balance between computational cost (number of walks per node \( r \) and walk length \( l \) on the x-axis) and efficacy (F1 score on the y-axis) can be achieved with \( r = 10 \) and \( l = 60 \).

Next, we examine the impact of vector dimension \( d \) and neighborhood size \( w \) on performance. As shown in Figure 7(c), the performance tends to stabilize when \( d \) reaches around 300. Similarly, from Figure 7(d), we find that the performance stabilizes as \( w \) increases to around 8. Overall, ICSD is not highly sensitive to these parameters and can achieve high performance with cost-effective parameter choices.

**Scalability Evaluation:**

To evaluate the scalability of ICSD, we run experiments using the default parameters with different numbers of threads (i.e., 1, 4, 8, 12, 16), each utilizing one CPU core. Figure 8(a) shows the speed-up of ICSD when deploying multiple threads compared to the single-threaded case. The model achieves acceptable sub-linear speed-ups, as indicated by the line being close to the optimal line. Figure 8(b) demonstrates that the performance remains stable when using multiple threads for model updating. These results indicate that the proposed system is efficient and scalable for large-scale heterogeneous information networks (HINs) with a large number of nodes.

**Stability Evaluation:**

For stability evaluation, we use the receiver operating characteristic (ROC) curves of ICSD based on 10-fold cross-validation. As shown in Figure 9, ICSD achieves an average true positive rate (TPR) of 0.9094 at a false positive rate (FPR) of 0.0851 for insecure code snippet detection.

#### 4.6 Case Studies

To gain deeper insights into the security-related risks in modern social coding platforms like Stack Overflow, we analyze the detected insecure code snippets using our developed system, ICSD.

**Types of Security Risks:**

Table 5 summarizes the types of security risks or vulnerabilities that could result from the detected insecure code snippets. The most prevalent type is Android Manifest configuration (28.73%), which poses serious threats to Android apps because the Manifest retains all components, security mechanisms, and structure information [8, 9]. Examples of such vulnerabilities include violations of least permission requests, components being configured as exported, and data backup and debuggable settings being turned on. For instance, Figure 10(a) shows a code snippet where many unnecessary permissions are requested, which could be exploited by cyberattackers.

Another prevalent type of insecurity is data security (23.05%). Further analysis reveals that data security vulnerabilities mainly involve plaintext transmission, shared preferences, open file outputs, and external storage being set to readable/writable. An example of such a code snippet is shown in Figure 10(b), where cleartext username and password are used for FTP authentication instead of Secure File Transfer Protocol (SFTP), making it susceptible to password sniffing attacks.

| Types of Security Risks | # Detected Codes | Percentage |
|------------------------|------------------|------------|
| Android Manifest configuration | 2,601 | 28.73% |
| WebView component | 271 | 2.99% |
| Data security | 2,087 | 23.05% |
| File directory traversal | 1,413 | 15.60% |
| Implicit intents | 851 | 9.40% |
| Security checking | 1,831 | 20.22% |

**Conclusion:**

The study based on the detected insecure code snippets in Stack Overflow using our developed system ICSD demonstrates that knowledge gained from social coding platform data mining can facilitate the understanding and thus help enhance code security in modern software programming ecosystems.

#### 5 Related Work

There have been numerous studies on knowledge discovery from Stack Overflow data, focusing on various aspects such as gamification motivation, discussion interest trends, and developer interaction. However, few have addressed the issue of code security analysis. Notable exceptions include [1] and [17], which analyzed Android app codes but did not consider the relationships within the Stack Overflow data. Our work differs by integrating both code content and social coding properties for automatic detection of insecure code snippets.

#### 6 Conclusion

In this paper, we address the imminent code security issue in modern social coding platforms by proposing a novel approach that leverages social coding properties in addition to code content for automatic detection of insecure code snippets in Stack Overflow. We introduce a structured HIN for representation and a meta-path-based approach to incorporate higher-level semantics. We then propose a new network embedding model, snippet2vec, for representation learning in the HIN, followed by a multi-view fusion classifier for insecure code snippet detection. Experimental results demonstrate that our developed system, ICSD, outperforms alternative approaches. This method and system can also be extended to other social coding platforms like GitHub and Stack Exchange.

#### Acknowledgements

The authors would like to thank the anti-malware experts at Tencent Security Lab for their helpful discussions and data annotation. This work is partially supported by the U.S. National Science Foundation under grants CNS-1618629, CNS-1814825, and OAC-1839909, NIJ 2018-75-CX-0032, WV Higher Education Policy Commission Grant (HEPC.dsr.18.5), and WVU Research and Scholarship Advancement Grant (R-844).

#### References

[References listed as provided in the original text]

---

This optimized version aims to make the text more clear, coherent, and professional, while maintaining the original content and structure.