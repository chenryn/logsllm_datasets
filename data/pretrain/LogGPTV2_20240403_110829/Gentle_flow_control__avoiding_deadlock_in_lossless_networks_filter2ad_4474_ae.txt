paths may greatly deteriorate the network performance.
Queue management. It has been proved that by arranging mul-
tiple independent priority queues in each switch and increasing
packet priority hop by hop, deadlock can be fully eliminated [6,
20, 35]. The basic idea is to guarantee no CBD exists in the same
priority class, and similar queue management strategy [40] is also
employed in InfiniBand. However, the number of required priority
queues increases with the network scale. These solutions face great
challenge in scalability since commodity switches can only support
several priorities.
Tagger [25] shares the same principle and further leverages the
structure feature of topologies. It increases a packet’s priority only
when the routing rule is risky of generating CBD. So it can decrease
the number of required priority queues. However, when the number
of priorities is not enough, Tagger will directly drop corresponding
packets, which damages the lossless property.
Deadlock recovery. Deadlock recovery solutions [2, 3, 36, 38, 48,
52] mainly contain two components: (1) Interacting status infor-
mation between switches to heuristically discover the occurrence
of deadlock. (2) Dropping or temporarily rerouting some packets
involved in CBD to recover deadlock. SPIN recently proposes the
idea of synchronously draining packets on the CBD to recover
from deadlock faster [48]. However, recovery solutions all work
reactively, thus cannot solve the root cause of deadlock and cannot
prevent its reappearance.
9 CONCLUSION
This paper understands and solves the network deadlock from a
brand-new perspective: avoiding hold and wait condition. We pro-
pose GFC to control the sending rate at a fine granularity. Therefore
the sending and draining rates could match well without triggering
hold and wait and further no deadlock. We theoretically demon-
strate that our design can completely avoid deadlock, and then elab-
orate how to implement GFC on the basis of mainstream lossless
networks with moderate modifications. Both testbed experiments
and packet-level simulations are conducted to evaluate the perfor-
mance. Results confirm that GFC can effectively avoid deadlock
with negligible side-effects.
ACKNOWLEDGMENTS
The authors gratefully acknowledge the shepherd Kai Chen and the
anonymous reviewers for their constructive comments. This work
is supported in part by the National Key Research and Development
Program of China (No.2018YFB1700103), and by National Natural
Science Foundation of China (NSFC) under Grant 61872208.
REFERENCES
[1] Mohammad Al-Fares, Alexander Loukissas, and Amin Vahdat. 2008. A Scalable,
Commodity Data Center Network Architecture. In Proceedings of the ACM SIG-
COMM 2008 Conference on Data Communication (SIGCOMM ’08). ACM, New
York, NY, USA, 63–74.
[2] K. V. Anjan and Timothy Mark Pinkston. 1995. An Efficient, Fully Adaptive
Deadlock Recovery Scheme: DISHA. In Proceedings of the 22Nd Annual Interna-
tional Symposium on Computer Architecture (ISCA ’95). ACM, New York, NY, USA,
201–210.
86
Gentle Flow Control: Avoiding Deadlock in Lossless Networks
SIGCOMM ’19, August 19–23, 2019, Beijing, China
[3] K. V. Anjan, Timothy Mark Pinkston, and José Duato. 1996. Generalized theory
for deadlock-free adaptive wormhole routing and its application to DISHA con-
current. In Proceedings of International Conference on Parallel Processing (ICPP
’96). 815–821.
[4] InfiniBand Trade Association. 2015. InfiniBand architecture specification: release
1.3. (2015). https://www.infinibandta.org/ibta-specifications-download/
[5] Arsany Basta, Andreas Blenk, Szymon Dudycz, Arne Ludwig, Stefan Schmid,
Stefan Schmid, Szymon Dudycz, Andreas Blenk, Arne Ludwig, and Arsany Basta.
2018. Efficient loop-free rerouting of multiple SDN flows. IEEE/ACM Transactions
on Networking (TON) 26, 2 (2018), 948–961.
[6] Dimitri P Bertsekas, Robert G Gallager, and Pierre Humblet. 1992. Data networks.
Vol. 2. Prentice-Hall International New Jersey.
[7] Jacek Blazewicz, Daniel P. Bovet, Jerzy Brzezinski, Giorgio Gambosi, and Maurizio
Talamo. 1994. Optimal centralized algorithms for store-and-forward deadlock
avoidance. IEEE Trans. Comput. 43, 11 (1994), 1333–1338.
http://www.ieee802.org/3/an/public/sep04/ungerboeck_2_0904.pdf
[8] BroadCom. 2004. 10GBASE-T Coding and Modulation: 128-DSQ + LDPC. (2004).
[9] Adrian M. Caulfield and Steven Swanson. 2013. QuickSAN: A Storage Area
Network for Fast, Distributed, Solid State Disks. In Proceedings of the 40th Annual
International Symposium on Computer Architecture (ISCA ’13). ACM, New York,
NY, USA, 464–474.
Priority Flow Control: Build Reliable Layer 2 Infrastruc-
https://www.cisco.com/c/en/us/products/collateral/switches/
ture.
nexus-7000-series-switches/white_paper_c11-542809.pdf
[10] Cisco. 2015.
(2015).
[11] Cisco. 2016. Cisco Nexus 3000 Series Switches. (2016). https://www.cisco.com/c/
en/us/products/switches/nexus-3000-series-switches/index.html
[12] Cisco. 2019. rate-limit-interface. (2019). https://www.oreilly.com/library/view/
cisco-ios-in/0596008694/re712.html
[13] William J. Dally and Hiromichi Aoki. 1993. Deadlock-free adaptive routing in
multicomputer networks using virtual channels. IEEE Transactions on Parallel
and Distributed Systems 4, 4 (1993), 466–475.
[14] William J. Dally and Charles L. Seitz. 1988. Deadlock-free message routing in
multiprocessor interconnection networks. (1988).
[15] Jens Domke, Torsten Hoefler, and Wolfgang E Nagel. 2011. Deadlock-free oblivi-
ous routing for arbitrary topologies. In 2011 IEEE International Parallel Distributed
Processing Symposium (IPDPS ’11). 616–627.
[16] Jose Duato. 1993. A new theory of deadlock-free adaptive routing in wormhole
networks.
IEEE Transactions on Parallel and Distributed Systems 4, 12 (1993),
1320–1331.
[17] Jose Duato and Timothy Mark Pinkston. 2001. A general theory for deadlock-free
adaptive routing using a mixed set of resources. IEEE Transactions on Parallel
and Distributed Systems 12, 12 (2001), 1219–1235.
[18] Jose Flich, Tor Skeie, Andres Mejia, Olav Lysne, Pedro Lopez, Antonio Robles,
Jose Duato, Michihiro Koibuchi, Tomas Rokicki, and Jose Carlos Sancho. 2012.
A survey and evaluation of topology-agnostic deterministic routing algorithms.
IEEE Transactions on Parallel and Distributed Systems 23, 3 (2012), 405–425.
[19] Marina Garcia, Enrique Vallejo, Ramon Beivide, Miguel Odriozola, Cristobal
Camarero, Mateo Valero, Jesús Labarta, and Cyriel Minkenberg. 2012. On-the-fly
adaptive routing in high-radix hierarchical networks. In 2012 41st International
Conference on Parallel Processing (ICPP ’12). IEEE, 279–288.
[20] Mario Gerla and Leonard Kleinrock. 1980. Flow control: A comparative survey.
IEEE Transactions on Communications 28, 4 (1980), 553–574.
[21] Christopher J. Glass and Lionel M. Ni. 1992. The Turn Model for Adaptive
Routing. In Proceedings of the 19th Annual International Symposium on Computer
Architecture (ISCA ’92). ACM, New York, NY, USA, 278–287.
[22] Chuanxiong Guo, Haitao Wu, Zhong Deng, Gaurav Soni, Jianxi Ye, Jitu Padhye,
and Marina Lipshteyn. 2016. RDMA over Commodity Ethernet at Scale. In
Proceedings of the 2016 ACM SIGCOMM Conference (SIGCOMM ’16). ACM, New
York, NY, USA, 202–215.
Managing, monitoring and troubleshooting large
http://ces-nanog64.blogspot.com/2015/06/
[23] Peter Hoose. 2015.
scale networks.
monitoring-managing-and-troubleshooting.html
[24] Shuihai Hu, Yibo Zhu, Peng Cheng, Chuanxiong Guo, Kun Tan, Jitendra Padhye,
and Kai Chen. 2016. Deadlocks in Datacenter Networks: Why Do They Form,
and How to Avoid Them. In Proceedings of the 15th ACM Workshop on Hot Topics
in Networks (HotNets ’16). ACM, New York, NY, USA, 92–98.
[25] Shuihai Hu, Yibo Zhu, Peng Cheng, Chuanxiong Guo, Kun Tan, Jitendra Padhye,
and Kai Chen. 2017. Tagger: Practical PFC Deadlock Prevention in Data Center
Networks. In Proceedings of the 13th International Conference on Emerging Net-
working EXperiments and Technologies (CoNEXT ’17). ACM, New York, NY, USA,
451–463.
[26] IEEE. 2010. 802.1Qau - Congestion Notification. (2010). https://1.ieee802.org/
(2015).
[27] IEEE. 2010. IEEE802.1 Qbb. (2010). https://1.ieee802.org/dcb/802-1qbb/
[28] IEEE. 2013. Data Center Bridging Task Group. (2013). http://www.ieee802.org/1/
dcb/802-1qau/
pages/dcbridges.html
[29] INCITS. 2019. T11 Home Page. (2019). http://www.t11.org/index.html
[30] Intel. 2019. DPDK. (2019). http://dpdk.org/
white_papers
[31] Intel. 2019. Test-pipeline. (2019). https://github.com/DPDK/dpdk/tree/master/
app/test-pipeline
(2019).
[32] Xin Jin, Hongqiang Harry Liu, Rohan Gandhi, Srikanth Kandula, Ratul Mahajan,
Ming Zhang, Jennifer Rexford, and Roger Wattenhofer. 2014. Dynamic Scheduling
of Network Updates. In Proceedings of the 2014 ACM Conference on SIGCOMM
(SIGCOMM ’14). ACM, New York, NY, USA, 539–550.
https://www.juniper.
net/documentation/en_US/junos/topics/reference/configuration-statement/
bandwidth-limit-edit-firewall-policer.html
Bandwidth-limit (Policer).
[33] Juniper. 2019.
[34] Juniper. 2019. Class of Service Feature Guide for EX Series Switches (Except
EX4600 and EX9200 Switches). (2019). https://www.juniper.net/documentation/
en_US/junos/information-products/pathway-pages/ex-series/cos-ex-series.
html
[35] Mark Karol, S. Jamaloddin Golestani, and David Lee. 2003. Prevention of dead-
locks and livelocks in lossless backpressured packet networks. IEEE/ACM Trans-
actions on Networking 11, 6 (2003), 923–934.
[36] Pedro Lopez, Juan Miguel Martínez, and Jose Duato. 1998. A very efficient
distributed deadlock detection mechanism for wormhole networks. In Proceedings
1998 Fourth International Symposium on High-Performance Computer Architecture.
57–66.
(2016). https:
[37] David Maltz. 2016. Keeping Cloud-Scale Networks Healthy.
//video.mtgsf.com/video/4f277939-73f5-4ce8-aba1-3da70ec19345
[38] Juan Miguel Martínez, Pedro Lopez, José Duato, and Timothy Mark Pinkston.
1997. Software-based deadlock recovery technique for true fully adaptive routing
in wormhole networks. In Proceedings of the 1997 International Conference on
Parallel Processing (ICPP ’97). 182–189.
4th Generation Server & Storage Adapter Architec-
ture.
(2019). http://www.mellanox.com/related-docs/prod_architecture/PB_
ConnectX_Architecture_Brochure.pdf
[39] Mellanox. 2019.
[40] Mellanox. 2019. InfiniBand White paper. (2019). http://www.mellanox.com/page/
[41] Mellanox. 2019. Interconnect Your Future. (2019). https://www.mellanox.com/
related-docs/solutions/hpc/TOP500-January-2019.pdf
[42] Radhika Mittal, Vinh The Lam, Nandita Dukkipati, Emily Blem, Hassan Wassel,
Monia Ghobadi, Amin Vahdat, Yaogong Wang, David Wetherall, and David Zats.
2015. TIMELY: RTT-based Congestion Control for the Datacenter. In Proceedings
of the 2015 ACM Conference on Special Interest Group on Data Communication
(SIGCOMM ’15). ACM, New York, NY, USA, 537–550.
[43] Radhika Mittal, Alexander Shpiner, Aurojit Panda, Eitan Zahavi, Arvind Krishna-
murthy, Sylvia Ratnasamy, and Scott Shenker. 2018. Revisiting Network Support
for RDMA. In Proceedings of the 2018 Conference of the ACM Special Interest Group
on Data Communication (SIGCOMM ’18). ACM, New York, NY, USA, 313–326.
[44] Radhika Niranjan Mysore, Andreas Pamboris, Nathan Farrington, Nelson Huang,
Pardis Miri, Sivasankar Radhakrishnan, Vikram Subramanya, and Amin Vahdat.
2009. PortLand: A Scalable Fault-tolerant Layer 2 Data Center Network Fabric.
In Proceedings of the ACM SIGCOMM 2009 Conference on Data Communication
(SIGCOMM ’09). ACM, New York, NY, USA, 39–50.
[45] OMNET++. 2019. OMNET++ homepage. (2019). https://www.omnetpp.org/
[46] Valentin Puente, Ramón Beivide, José A Gregorio, JM Prellezo, Jose Duato, and
Cruz Izu. 1999. Adaptive bubble router: a design to improve performance in
torus networks. In Proceedings of the 1999 International Conference on Parallel
Processing (ICPP ’99). 58–67.
[47] Sivasankar Radhakrishnan, Yilong Geng, Vimalkumar Jeyakumar, Abdul Kabbani,
George Porter, and Amin Vahdat. 2014. SENIC: Scalable NIC for End-Host
Rate Limiting. In 11th USENIX Symposium on Networked Systems Design and
Implementation (NSDI ’14). 475–488.
[48] Aniruddh Ramrakhyani, Paul V. Gratz, and Tushar Krishna. 2018. Synchronized
progress in interconnection networks (spin): A new theory for deadlock freedom.
In 2018 ACM/IEEE 45th Annual International Symposium on Computer Architecture
(ISCA ’13). IEEE, 699–711.
[49] Sven-Arne Reinemo, Tor Skeie, and Manoj K Wadekar. 2010. Ethernet for high-
performance data centers: On the new IEEE datacenter bridging standards. IEEE
Micro 30, 4 (2010), 42–51.
[50] Jose Carlos Sancho, Antonio Robles, and Jose Duato. 2004. An effective method-
ology to improve the performance of the up*/down* routing algorithm. IEEE
Transactions on Parallel and Distributed Systems 15, 8 (2004), 740–754.
[51] Michael D. Schroeder, Andrew D. Birrell, Michael Burrows, Hal Murray, Roger M.
Needham, Thomas L. Rodeheffer, Edwin H. Satterthwaite, and Charles P. Thacker.
1991. Autonet: A high-speed, self-configuring local area network using point-
to-point links.
IEEE Journal on Selected Areas in Communications 9, 8 (1991),
1318–1335.
[52] Alex Shpiner, Eitan Zahavi, Vladimir Zdornov, Tal Anker, and Matty Kadosh.
2016. Unlocking Credit Loop Deadlocks. In Proceedings of the 15th ACM Workshop
on Hot Topics in Networks (HotNets ’16). ACM, New York, NY, USA, 85–91.
[53] Abraham Silberschatz, Peter Baer Galvin, and Greg Gagne. 2014. Operating
system concepts essentials. John Wiley & Sons, Inc.
87
SIGCOMM ’19, August 19–23, 2019, Beijing, China
Kun Qian, Wenxue Cheng, Tong Zhang, Fengyuan Ren
[54] Tor Skeie, Olav Lysne, and Ingebjørg Theiss. 2002. Layered Shortest Path (LASH)
Routing in Irregular System Area Networks. In Proceedings of the 16th Interna-
tional Parallel and Distributed Processing Symposium (IPDPS ’02). IEEE Computer
Society, 194.
[55] Brent Stephens and Alan L. Cox. 2016. Deadlock-free local fast failover for
arbitrary data center networks. In IEEE INFOCOM 2016 - The 35th Annual IEEE
International Conference on Computer Communications (INFOCOM ’16). IEEE,
1–9.
[56] Brent Stephens, Alan L. Cox, Ankit Singla, John Carter, Colin Dixon, and Wesley
Felter. 2014. Practical DCB for improved data center networks. In IEEE INFOCOM
2014 - IEEE Conference on Computer Communications (INFOCOM ’14). IEEE, 1824–
1832.
[57] Erico Vanini, Rong Pan, Mohammad Alizadeh, Parvin Taheri, and Tom Edsall.
2017. Let It Flow: Resilient Asymmetric Load Balancing with Flowlet Switching.
In 14th USENIX Symposium on Networked Systems Design and Implementation
(NSDI ’17). USENIX Association, Boston, MA, 407–420.
[58] Jie Wu. 2003. A fault-tolerant and deadlock-free routing protocol in 2D meshes
based on odd-even turn model. IEEE Trans. Comput. 52, 9 (2003), 1154–1169.
[59] Yibo Zhu, Haggai Eran, Daniel Firestone, Chuanxiong Guo, Marina Lipshteyn,
Yehonatan Liron, Jitendra Padhye, Shachar Raindel, Mohamad Haj Yahia, and
Ming Zhang. 2015. Congestion Control for Large-Scale RDMA Deployments.
In Proceedings of the 2015 ACM Conference on Special Interest Group on Data
Communication (SIGCOMM ’15). ACM, New York, NY, USA, 523–536.
[60] Yibo Zhu, Nanxi Kang, Jiaxin Cao, Albert Greenberg, Guohan Lu, Ratul Mahajan,
Dave Maltz, Lihua Yuan, Ming Zhang, Ben Y. Zhao, and Haitao Zheng. 2015.
Packet-Level Telemetry in Large Datacenter Networks. In Proceedings of the 2015
ACM Conference on Special Interest Group on Data Communication (SIGCOMM
’15). ACM, New York, NY, USA, 479–491.
Appendices are supporting material that has not been peer re-
viewed.
A PROOF OF THEOREM 4.1
The straightforward idea to eliminating hold and wait is work-
ing out the worst case of queue length q(t) and ensuring it never
exceeds Bm (i.e., qmax  Rd(t)).
In congestion situation, q(t) will achieves its maximum qmax only
when the input rate Ri(t) continuously decreases to the draining
rate Rd(t). Considering the general buffer evolution depicted in
Figure 21. Supposing qmax is approached at tb, we focus on the
continuous increase of q(t) starting from ta and ending at tb. The
starting instant ta is selected according to the following criteria:
(1) During (ta, tb), q(t) increases monotonically, (2) q(ta) = B0 or
q(ta − δ) ≥ q(ta), here δ → 0+. We consider the time sequence
{tk = kτ + t0|k ∈ [0, n]}, where ta ≤ t0 < ta + τ and tn = tb, in
this process. Accordingly, we have
 q(t0) ≥ B0
q(tn−1) = Bm − Rd
q(tn) = qmax
C (Bm − B0)
(7)
And for any instant t ∈ [tk , tk +1] (k = 1,· · · , n − 1),
Bm − q(tk−1)
Bm − B0 C
Ri(t) ≤ Ri(tk) = Rt(tk−1) =
Then the queue increase can be represent as
Bm − B0 Cτ −
q(tk +1) − q(tk) ≤ Bm − q(tk−1)
kτ
∫ (k +1)τ
Rd(t)dt