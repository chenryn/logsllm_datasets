to aggregate edge data into vertices. Alice, Bob re-
ceive:
[V ] = [{V11 ..V1i}, ...,{Vn1 ..Vn j}],
[W ] = [{W11 ..W1i}, ...,{Wn1 ..Wn j}], and [β], where
V is the vector of gathered vertices, and W ≡ βV is
V’s MAC.
Charlotte, David receive MAC key β.
Note: Gather leaks the noisy degree of the vertices,
however, this leakage preserves differential privacy.
3. Oblivious Apply The players call Fapply to compute
the function of interest on the vertex data. Alice and
Bob use input ([V ], [W ], [β]) while Charlotte, David
each provide β. Four players receive updated values
of shares of vertices [{V (1)
n j }].
11
4. Oblivious Scatter This step is done locally without
any interaction with other parties, and each party
uses ([{V (1)
n j }]) to update the
11
edges and receive [E(2)].
Each group sends [E(2)] to Frerand and receives
[E(3)] before entering the next round of computa-
tion (Step 1).
}, ...,{V (1)
n1
..V (1)
1i
}, ...,{V (1)
n1
..V (1)
..V (1)
1i
..V (1)
Output: Secret shares of the edge values (e.g. user and
item proﬁles)
Figure 9: Πsgas: Four-party protocol in the hybrid-world for
securely applying the graph parallel model of computation.
the neighboring vertices. Additionally, the Shuﬄe operation
mixes the dummy edges in with the real ones, which hides
the exact degree of each vertex.
Theorem 4 The Oblivious Shuﬄe protocol Πshuﬄe (Figure
11 securely realizes the ideal functionality Fshuﬄe (Figure
10) with abort, under a single malicious corruption.
Proof Theorem 4. The Oblivious Shuﬄe protocol: To prove
2496    29th USENIX Security Symposium
USENIX Association
Fshuﬄe
Inputs:P1, P2: [E] (s.t. [E]1 + [E]2 = E).
P3, P4: [E] (s.t. [E]3 + [E]4 = E).
Functionality:
• Verify that [E]1 + [E]2 = [E]3 + [E]4. If the check
fails, send abort to all parties.
• Sample a random permutation π. Shufﬂe the shares
[E]3 and [E]4, according to π: [E(1)]3 ← π([E]3),
[E(1)]4 ← π([E]4)
Outputs: P1, P3 receive [E(1)]3.
P2, P4 receive [E(1)]4.
Figure 10: Oblivious Shuﬄe Ideal Functionality
the security of our Oblivious Shuﬄe, we provide a simulation
for P1 and P3. The simulations for other parties are identical.
First, a simulation for P1:
• S receives P1’s input [E]1 from the distinguisher and
places it in the input tape of P1.
the output from Fcoin. S then observes the message that
P1 sends to FMAC: if P1 does not send the intended mes-
the partial transcript. Else, S submits P1’s input [E]1 to
the ideal functionality Fshuﬄe and receives [E(1)].
• (cid:101)α: S samples a random(cid:101)α and hands it to P1 to simulate
sages ((cid:101)α, [E]1), S submits abort to Fshuﬄe, and outputs
• [(cid:101)E(1)], [(cid:101)M(1)]: S samples random ring elements as shares
[(cid:101)M(1)], hands [(cid:101)E(1)] (where [(cid:101)E(1)] ≡ [E1]) and [(cid:101)M(1)] to
• (cid:101)b: S observes the messages that P1 sends to FcheckZero. If
P1 modiﬁes his shares [Z], S hands(cid:101)b = false to P1 as the
Else, S hands(cid:101)b = true to P1 and outputs whatever P1
P1 to simulate the messages [E(1)], [M(1)] P1 receives
from FMAC. S computes [Z] himself to mirror P1’s action.
output of FCheckZero, outputs the partial view, and aborts.
outputs.
Claim 1 For the simulator S corrupting party P1 as described
above, and interacting with the functionality Fshuﬄe,
(cid:8)HYBRIDπshuﬄe,A(z) (E,κ)(cid:9)
(cid:8)IDEALFshuﬄe,S(z)(E,κ)(cid:9)
z∈{0,1}∗,κ∈N
c≡
Case 0: If the adversary behaves honestly, the joint distri-
butions in the hybrid and ideal executions are:
(cid:8)HYBRIDπshuﬄe,A(z) (E,κ)(cid:9)
(cid:8)IDEALFshuﬄe,S(z)(E,κ)(cid:9)
z∈{0,1}∗,κ∈N =
{α, [E(1)], [M(1)],b = true,o1,o2,o3,o4}
z∈{0,1}∗,κ∈N =
{(cid:101)α, [(cid:101)E(1)], [(cid:101)M(1)],(cid:101)b = true,(cid:101)o1,(cid:101)o2,(cid:101)o3,(cid:101)o4}
Figure 11: Oblivious Shuﬄe Real-World Protocol
The messages [α], [(cid:101)α], [M(1)], [(cid:101)M(1)], [E(1)] and [(cid:101)E(1)] are
[α], [(cid:101)α], [M(1)], [(cid:101)M(1)] are independent of the output, and the
all uniformly and independently distributed. Furthermore,
output distributions are identical. Thus, the joint distributions
between both worlds are identical.
Case 1: If P1 deviates from the protocol in Step 2 by pro-
viding the incorrect α or incorrect shares [E]1 to FMAC, abort
occurs in both worlds, and the joint distributions, {α,⊥} and
{(cid:101)α,⊥}, are identically distributed.
ing the wrong shares [Z] to FcheckZero, S hands(cid:101)b = false to P1
Case 2: If P1 deviates from the protocol in Step 4 by provid-
in the ideal world and aborts. In the hybrid world, FCheckZero
outputs b = false and all parties abort. It is clear that the joint
distributions in both worlds are identical.
In conclusion, the joint distributions between the two
Now, a simulation for P3:
P3. S observes the message that P3 sends to FMAC: if
P3 modiﬁes [E]3 before sending it to the functionality,
S aborts and outputs the partial view. Else, S samples
• [(cid:101)M]: S receives [E]3 and places it in the input tape of
random ring elements as shares [(cid:101)M]3 and hands them to
• (cid:101)π: S queries the ideal functionality with P3’s input, [E]3,
P3 to simulate the output P3 receives from FMAC in the
hybrid world.
z∈{0,1}∗,κ∈N
worlds are identical.
USENIX Association
29th USENIX Security Symposium    2497
1Shuffle	MAC	ComputationBobAliceShuffle	EdgesDavidShuffle	MAC	VerificationAliceBobDavidCharlotteOblivious	ShuffleCharlotteDavidCharlotteTrue/FalseTrue/Falseand obtains the output [E(1)]3. S computes(cid:101)π such that
[E(1)]3 ← π([E]3), then agrees on the permutation(cid:101)π with
[(cid:101)π((cid:101)m)] to mirror P3’s action.
• (cid:101)b: S observes the messages that P3 sends to P1 in Step 3.
P3 in Step 3 (playing the part of P4). S computes [m(1)]←
If P3 sends [E(cid:48)(1)]3 = [E(1)]3 +D or [m(cid:48)(1)] = [m(1)]3 +D(cid:48)
where D (cid:54)= 0 mod 2k,D(cid:48) (cid:54)= 0 mod 2k+s, S aborts and
outputs the partial view. Else, S outputs whatever P3
outputs.
Claim 2 For the simulator S corrupting party P3 as described
above, and interacting with the functionality Fshuﬄe,
(cid:8)HYBRIDπshuﬄe,A(z) (E,κ)(cid:9)
(cid:8)IDEALFshuﬄe,S(z)(E,κ)(cid:9)
z∈{0,1}∗,κ∈N
c≡
z∈{0,1}∗,κ∈N
butions in the hybrid and ideal execution is:
z∈{0,1}∗,κ∈N =
Case 0: If P3 follows the protocol honestly, the joint distri-
{[M],π,b,o1,o2,o3,o4}
(cid:8)HYBRIDπshuﬄe,A(z) (E,κ)(cid:9)
(cid:8)IDEALFshuﬄe,S(z)(E,κ)(cid:9)
{[(cid:101)M],(cid:101)π,(cid:101)b,(cid:101)o1,(cid:101)o2,(cid:101)o3,(cid:101)o4}
The messages [M], [(cid:101)M] and π,(cid:101)π are all distributed uni-
z∈{0,1}∗,κ∈N =
formly at random, and independently from the remainder
of the view, including the joint distribution over the output
shares. The output distribution is identical in both worlds as
well. Thus, the joint distributions between both worlds are
identical.
Case 1: If P3 deviates from the protocol in Step 2 by sending
the wrong shares of [E], abort happens in both worlds, and the
joint distributions in both worlds are both {⊥} and identical.
Case 2: S observes what P3 sends to P1 in Step 3. If he does
not send the intended messages: P3 sends [E(cid:48)(1)] = [E(1) +
D] or [M(cid:48)(1)] = [M(1) + D(cid:48)] where D (cid:54)= 0 mod 2k,D(cid:48) (cid:54)= 0
mod 2k+s, S abort in the ideal execution. The joint distribu-
tion in the ideal world is {[(cid:101)M],(cid:101)π,(cid:101)b = false,⊥}. In the hybrid
world, there is a small chance that P1 and P2 do not abort.
This happens if P3 chooses the additive terms D and D(cid:48) such
that αD + D(cid:48) = 0 mod 2k+s. The probability that this hap-
pens is at most 2−s as shown in Section 3.1. So, with prob-
ability 1− 2−s, the joint distribution in the hybrid world is
{[M], [π],b = false,⊥}. Thus, the joint distributions in both
worlds are statistically close.
In conclusion, the joint distributions in both worlds are
statistically close.
4.2.2 Four-Party Oblivious Gather
Gather operation aggregates the data from neighboring edges
to each vertex. The data will be stored at the vertices for
further computation handled by Apply operation.
Fgather
Inputs:P1, P2: [E] (s.t. [E]1 + [E]2 = E).
P3, P4: [E] (s.t. [E]3 + [E]4 = E).
Functionality:
• Sample a random MAC key β.
• Wait for shares [E] from all parties. Verify that [E]1 +
[E]2 = [E]3 +[E]4. If the veriﬁcation fails, send abort
to all parties. Else, reconstruct E.
• For all vertices v ∈ V , set v ← /0.
• For each edge e ∈ E do:
For v ∈ V s.t. v.id = lid: v.Append(e.rdata)
• Compute W ← βV .
Outputs: P1, P2
[{W11 ..W1i}, ...,{Wn1 ..Wn j}], [β]. P3, P4 receive β.
receive [{V11 ..V1i}, ...,{Vn1 ..Vn j}]
,
Figure 12: Oblivious Gather Ideal Functionality
Theorem 5 The Oblivious Gather protocol (Figure 13) se-
curely realizes the ideal functionality Fgather (Figure 12) with
abort, under a single malicious corruption.
4.2.3 Four-Party Oblivious Apply
Apply computes the main functionality of the framework on
the input data. In the Gather operation, the data is aggregated
into vertices, therefore Apply runs the computation on the
vertex data.
Theorem 6 The oblivious Apply protocol Πapply (Figure 15)
securely realizes the ideal functionality Fapply (Figure 14)
with abort, under a single malicious corruption.
4.2.4 Four-Party Oblivious Scatter
During the Scatter operation, the updated data in the vertices
are pushed back to their corresponding edges in the graph,
replacing the old values stored in the edges. This step is done
locally by each party, P1 and P2, with no interaction between
them. Therefore, this step is secure. After updating the edges,
the shares are re-randomized to break the correlation between
the edges (edges with the same left (or right) id are updated
with the same shares during scattering phase. If any of the
parties cheats and modiﬁes the data before scattering to the
edges, it will be detected in the following phase, which is the
Shuﬄe operation of the next round.
2498    29th USENIX Security Symposium
USENIX Association
Πapply
Inputs: P1, P2: [{V11 ..V1i}, ...,{Vn1 ..Vn j}],
[{W11 ..W1i}, ...,{Wn1 ..Wn j}], [β].
P3, P4: β.
Protocol:
1. Setting up the circuit Four parties agree on a circuit,
Cv, for each vertex. P1, P2 initialize the input wires
with shares [{V11 ..V1i}, ...,{Vn1 ..Vn j}].
2. Secure Share-Mask Conversion Four parties call
F[x]→mx, converting the input wires’ additive shares
to masked values.
• P1, P2 use input(cid:0)[{V11 ..V1i}, ...,{Vn1 ..Vn j}] ,
[{W11 ..W1i}, ...,{Wn1 ..Wn j}], [β] ).
P3, P4 use input β.
• For each vertex, P1, P2 receive (mV ,λ(cid:48)
P3, P4 receive (m(cid:48)
V ,λV , [λ(cid:48)
V ]).
V , [λV ]).
3. Apply Functionality
For v ∈ [{V11 ..V1i}, ...,{Vn1 ..Vn j}]:
Four parties execute Feval (Figure 5), to obtain
the masked values of the updated vertex data.
4. Secure Mask-Share Conversion Each party locally
converts their masked values to additive shares.
• P1 and P2 computes [V ] ← (V + λV )− [λV ],
V )− [λ(cid:48)
• P3 and P4 computes [V ] ← (V + λ(cid:48)
V ].
n j }].
..V (1)
}, ...,{V (1)
n1
Output: All parties output:[{V (1)
11
..V (1)
1i
Figure 15: Protocol for securely computing Apply.
vertex degrees. It then generates an equal length array of in-
teger noise values, each independently sampled from some
appropriate distribution. 5 The functionality perturbs the ver-
tex degrees by adding the two arrays, and returns the result
to the simulator. Mazloom and Gordon describe a particular
distribution that is easy to sample inside a secure computa-
tion, and prove that it provides differential privacy. We use
the same one in our experiments.
Theorem 7 ( [16]) The randomized algorithm L is (ε,δ)-
approximate differentially private.
Theorem 8 The protocol Πsgas (Figure 9) securely computes
the ideal functionality Fsgas (Figure 8) with L leakage in the
(Fshuﬄe,Fgather,Fapply,Fscatter)-hybrid model with abort, un-
der a single malicious corruption.
5
Implementation and Evaluation
implemented our
four-party secure
computation
We
framework in C++. The source code is available at
5In addition to proving that the noise distribution provides privacy, we
also require that all the noise values are positive, except with probability δ.
Figure 13: Oblivious Gather Real-World Protocol
Fapply
[{V11 ..V1i}, ...,{Vn1 ..Vn j}],
P1,
P2:
Inputs:
[{W11 ..W1i}, ...,{Wn1 ..Wn j}], [β].
Functionality:
P3, P4: β.
• Verify that β[V ] = [W ]. If the veriﬁcation fails, send