title:Efficient MPC via Program Analysis: A Framework for Efficient
Optimal Mixing
author:Muhammad Ishaq and
Ana L. Milanova and
Vassilis Zikas
Eﬃcient MPC via Program Analysis: A Framework for Eﬃcient
Optimal Mixing(cid:63)
Muhammad Ishaq1(cid:63)(cid:63), Ana L. Milanova2 (cid:63) (cid:63) (cid:63), and Vassilis Zikas1†
1 University of Edinburgh, Edinburgh, Scotland
{m.ishaq, vassilis.zikas}@inf.ed.ac.uk
2 Rensselaer Polytechnic Institute (RPI), Troy, New York
PI:EMAIL
Abstract Multi-party computation (MPC) protocols have been extensively optimized in an eﬀort to
bring this technology to practice, which has already started bearing fruits. The choice of which MPC
protocol to use depends on the computation we are trying to perform. Protocol mixing is an eﬀective
black-box —with respect to the MPC protocols—approach to optimize performance. Despite, however,
considerable progress in the recent years existing works are heuristic and either give no guarantee
or require an exponential (brute-force) search to ﬁnd the optimal assignment, a problem which was
conjectured to be NP hard.
We provide a theoretically founded approach to optimal (MPC) protocol assignment, i.e., optimal
mixing, and prove that under mild and natural assumptions, the problem is tractable both in theory
and in practice for computing best two-out-of-three combinations. Concretely, for the case of two
protocols, we utilize program analysis techniques—which we tailor to MPC—to deﬁne a new integer
program, which we term the Optimal Protocol Assignment (in short, OPA) problem whose solution
is the optimal (mixed) protocol assignment for these two protocols. Most importantly, we prove that
the solution to the linear program corresponding to the relaxation of OPA is integral, and hence is
also a solution to OPA. Since linear programming can be eﬃciently solved, this yields the ﬁrst eﬃcient
protocol mixer. We showcase the quality of our OPA solver by applying it to standard benchmarks from
the mixing literature. Our OPA solver can be applied on any two-out-of-three protocol combinations
to obtain a best two-out-of-three protocol assignment.
Keywords: protocol mixing, linear programming, multiparty computation, program analysis, cryp-
tography
1 Introduction
Multi-party computation (in short, MPC) allows M parties p1, . . . , pM to perform any given computation
on their private inputs in a secure manner. Informally, security means that the protocol should correctly
compute the speciﬁed output (correctness) and it should not leak any information about the inputs, other
than what can be deduced from this output (privacy).
From the onset of MPC [Yao82; GMW87; BGW88; CCD88], there have been two approaches to MPC
protocol design: (1) the so-called garbled-circuit-based approach, also referred to as Yao’s protocol [Yao82],
and (2) the approach following the secret-sharing-based (aka gate-by-gate evaluation) paradigm. The lat-
ter was introduced by Goldreich, Micali and Wigderson (and is therefore often referred to as the GMW
approach) [GMW87]; GMW works with boolean circuits and was extended by Ben-Or, Goldwasser, and
Wigderson in [BGW88]—the so-called BGW protocol—to compute arithmetic circuits over ﬁnite ﬁelds.
The above approaches have inherent quantitative diﬀerences. First, the round complexity of gate-by-gate
evaluation is linear to the (multiplicative) depth of the circuit, whereas Yao’s approach yields constant-round
(cid:63) This is full version of the work[IMZ19] that appeared in ACM CCS’19. (Last Update: July 12, 2019)
(cid:63)(cid:63) This work was done in part while the author was at RPI.
(cid:63) (cid:63) (cid:63) This work was done while the author was supported in part by NSF awards 1319384 and 1814898.
† This work was done in part while the author was visiting UCLA and supported in part by DARPA and SPAWAR
under contract N66001-15-C-4065 and by a SICSA Cyber Nexus Research Exchanges grant.
protocols; furthermore, unlike Yao’s protocol most of the costly computation and communication in GMW
can be outsourced to an oﬄine (pre-computation) phase which is independent of the inputs. Thus, GMW
(assuming preprocessing) is often more eﬃcient over a wide area network (WAN) where communication can
be the bottleneck3 and garbled-citcuit-based approaches, which inherently needs to communicate a lot of
information, is faster assuming fast networks.
Furthermore, all the above protocols have communication and/or computation proportional to the size
of the circuit they aim to compute. For example, as demonstrated in [DSZ15], it is much faster to use
garbled-circuits on the standard Boolean circuit for comparison, than using GMW on a state-of-the-art
representations of comparison as an arithmetic circuit. On the other hand, performing multiplication (of
bounded precisions ﬂoats or bounded size integers) is much faster by means of GMW for an appropriately
large ﬁeld—it is eﬀectively computing a single-gate circuit—than by means of Yao’s protocol applied on the
state-of-the-art Boolean circuit for ﬁeld multiplication.
The above demonstrates that there is no ”one size ﬁt all” solution to optimal MPC. In order to decide
what protocol to use, one would need to take into account both the target computation, and the parameters
of the network. This might be feasible for simple computations, e.g., only comparisons or only multiplications,
but it becomes challenging when we are aiming to perform a complicated computation, whose circuit is not
even a-priori known. To cope with this, the idea of mixed (or hybrid) protocols has been proposed [KSS13;
Hen+10; BLW08; SKM11; Cho+13]. These are protocols that evaluate diﬀerent parts of the computation by
means of diﬀerent protocols, e.g., part of the computation is performed using garbled circuits, and another
part is performed using GMW.
Deciding which part of the computation should be computed using which protocol is a challenging task.
One of the reasons is that one needs to come up with an appropriate cost model, that estimates the costs
for computing each part of the speciﬁcation with each of the candidates. Such costs were recently calculated
in [DSZ15] for hybrid protocols combining a garbled-circuits-based protocol, with two versions of GMW,
one for computing arithmetic circuits over arithmetic ﬁelds of characteristic 2 and size k, i.e., Zk
2, and one
for computing Boolean circuits (i.e., arithmetic circuits over Z2). Concretely, they devised benchmarks that
estimate for diﬀerent useful computations, which protocol is fastest in diﬀerent scenarios.
One would hope that such a cost allocation would already reduce the problem to a simple optimization
problem: try to split the computation in modules from a predeﬁned set, and then compute the optimal
allocation of protocols depending on the cost of each module. Unfortunately this intuition is overly simplistic
as discussed below.
First, one needs to take into account the need to stitch diﬀerent modules together in a way that does
not reveal information. In order to do so the protocol needs to allow each sub-protocol to pass its (output)
state to the next sub-protocol. This can be done by computing and outputting a secret sharing of the state
that is then given as input to the next module. Albeit, diﬀerent protocols handle diﬀerent types of sharing,
e.g., in GMW the shares are ﬁeld elements, whereas in Yao’s protocol one needs the inputs to be Boolean.
This means that in order for a GMW computed module to pass state to a Yao module it needs to convert
its sharing to a Boolean sharing. Such a conversion would typically involve (secure) bit-decomposition of
Zk
2 elements which is an expensive operation. Hence, in order to decide whether it is worth switching from
GMW to garbled-circuits, one needs to take into account the cost of converting the associated shares.
Second, such conversion costs need to be incorporated in addition to the cost of module computation.
A model incorporating such costs into an optimization problem was introduced in [SK11; KSS14], where
the authors also speciﬁed an Integer Program (IP) computing the optimal solution. Due to the diﬃculty
of solving Integer Programming in general, this lead to a conjecture that the problem of optimal protocol
assignment is NP-hard. The conjecture was adopted by follow-up works [Pat+16; Cha+17; B¨us+18] and
gave rise to heuristic approaches.
3 This is demonstrated in existing benchmarks [DSZ15; B¨us+18] (including ours) which are run for the semi-honest
setting and do not account for the cost of synchrony, e.g., timeouts, hence the eﬀect of the increased round
complexity in GMW is minimized.
2
1.1 Our Results
In this work we show that the problem of optimal (MPC) protocol mixing is tractable (eﬃciently solvable) for
for the case of combinations of two multi-party protocols. In a nutshell, starting from non-annotated source-
code, we employ a combination of program analysis and combinatorial optimization techniques to devise
an integer program, which we term the optimal protocol-assignment problem (OPA). OPA yields a provably
optimal mixing—up to parallelisation/scheduling and compiler optimizations (see §4 for details)—and, as
we prove, accepts a polynomial-time solver.
(cid:1) applications.
2
We remark that our current approach does not directly extend to the case of three protocols (see Remark 3
for details). Thus the question of whether or not OPA can be eﬃciently solved in the three-protocol case
remains open. However, since the optimal two-protocol combination can be found in polynomial time, we
can use our solver to compute best two-out-of-c protocols combinations for a constant c, by applying it to
all possibles pairs of the c protocols, and picking the pair (and the corresponding solution) that minimizes
the objective function across all(cid:0)c
To demonstrate the quality of our OPA solver, we apply it to compute protocol assignments for known
benchmarks from ABY [DSZ15] and HyCC [B¨us+18], for which code has been released namely Modular
Exponentiation, Biometric Matching and Private Set Intersection, Convolutional Neural Networks (CNNs)
of MiniONN [Liu+17] and Crytonets [Gil+16], k-means clustering algorithm, DB Merge and DBJoin as
well as new ones we introduce, namely Greatest Common Divisor (GCD) and Histogram. We remark that
works [DSZ15; B¨us+18] directly compute optimal assignment for three protocols (this is done by manual
assignment in [DSZ15], and exhaustive search in [B¨us+18]). However, with the exception of Modular Expo-
nentiation in the LAN setting, all resulting optimal assignments use one protocol or a mixing of only two
protocols. This state of practice indicates that our solver can be used to compute optimal assignments for
three protocols.
More concretely, our contributions can be summarized as follows:
As our main result, we prove that the Optimal Protocol Assignment (OPA) problem for two protocols
is, in fact, tractable. To this direction, we put forth a framework combining methods from program analysis
and MPC, and establishing a common language between the two disciplines. This framework allows us to
formally specify the OPA and describe all the relevant parameters of an integer program (IP), such that given
MPC code, it computes the optimal assignment of the two given protocols (and their share conversions).
We use our model to show that the linear-programming (LP) relaxation of our IP has an integral solution,
and therefore OPA is polynomial-time solvable.4 In addition to oﬀering the language for stating and proving
our results, we set forth problems for the programming languages/compilers community, that can lead to
improvement in MPC compilers.
The running time of our OPA solver is polynomial on the size of its input (i.e., the MPC code). To provide
a more practical implementation, we propose MPC-source as an abstraction of MPC code. MPC-source is a
representation of the original MPC code which enables static analysis, while it is substantially more compact
than standard linearized MPC code—i.e., the straight-line version of MPC code. In particular, MPC source
has signiﬁcantly fewer variables and statements than linearized MPC, thereby reducing the search space
for the optimal protocol combination. We show how to apply OPA on MPC-source, and prove that under
natural assumptions on the optimal assignment computed by IP Linear(S), an OPA solutions for MPC-source
is optimal for the linearized MPC. We note in passing that although making the treatment more involved,
devising such a faster and more scalable solver is useful for deriving a practical solution to the problem.
Notwithstanding, our entire treatment can be applied on linearized MPC code as well.
Finally, to demonstrate the practicality of our solver, we provide a toolchain that takes high-level unan-
notated source—Java source code in our case—, translates it to MPC-source, and outputs optimal protocol
assignments. We compare our solver with publicly available benchmarks from [DSZ15; B¨us+18]. We remark
that the concrete assignment from [DSZ15; B¨us+18] is known for only a subset of the related benchmarks;
for all those we conﬁrm (for 2-out-of-3 protocols) the same assignment. For the remainder, we provide the
4 Unlike integer programming which is known to be NP-hard,
linear programming is solvable in polynomial
time [Kar84; Kha80].
3
ﬁrst publicly released assignments, and compare our resulting protocol combinations with the ones reported
in [DSZ15; B¨us+18]. Our solver is available on GitHub (https://github.com/ishaq/OPA).
We believe that our work opens possibilities for future work. Program synthesis, program analysis of MPC-
source, e.g., program equivalence and parallelization, as well as integration of OPA into MPC compilers, are
some of the possibilities. Throughout this paper, we pose conjectures and outline future directions.
1.2 Comparison to Related Work
A number of works have demonstrated the advantages of mixed protocols [KSS13; Hen+10; BLW08; SKM11;
Cho+13]. The ABY framework [DSZ15] by Demmler et.al. provided easy to use framework for writing
mixed-protocol 2-party computations. Mohassel and Rindal [MR18] improved it into ABY3 and extended it
to 3 parties. However, all these works require the programmer to manually choose protocol assignment. In
contrast, our tool yields automatic solution to optimal protocol assignment in polynomial time. We note,
however, that previous works compute an optimal assignment among all three protocols whereas our tool
can, so far, handle only two protocols. In fact, our analysis does not directly extend to three protocols. Thus,
the question of whether or not OPA for three or more protocol is NP-hard remains open.
Yet, by using our tool three times, once with each pair of the three protocols from [DSZ15], and keeping
the overall optimal solution we obtain a tool for ﬁnding, in polynomial time, the best two-out-of-three
protocol combination. Interestingly, for the overwhelming majority of existing benchmarks this extension
yields assignments consistent to the original exhaustive search method—the reason is that the existing
assignment among three protocols for these benchmarks ends up using at most two of them. This allows us
to handle arbitrary long code for which exhaustive search might be infeasible.
The work by Kerschbaum et.al. [KSS14] was the ﬁrst to discuss the problem of automatic protocol
selection. They require the source program to be expressed in straight-line three-address representation
and formulate a 0-1 integer program for the two-protocol case. The integer program computes the optimal
assignment. Since 0-1 integer programming is NP-hard, this lead to the conjecture that the optimal protocol
assignment problem is NP hard. In fact, Kerschbaum et.al. [KSS14] proposes the ﬁrst heuristics for solving the
above problem. We note that despite some similarities, e.g., some common inequalities, of the IP from [KSS14]
to the one underlying our OPA problem, we were unable to ﬁnd a way to prove that the LP relaxation of
their IP has an integral solution. Instead, here we provide our new IP which leverages our model to allow us
to prove existence of an eﬃcient solver.
EzPC [Cha+17] is a recent work that takes a high-level imperative language as input and compiles it
to mixed-protocols ABY source code. It is also based on heuristics. Moreover its heuristics do not take into
account dependencies between diﬀerent parts of the code (i.e., they only rely on local information) and
are, therefore, too weak. For example, they state that their compiler never compiles a multiplication into a
Boolean/Yao representation. On a high bandwidth network with low latency (typical case of 10Gbps LAN),
it is actually ineﬃcient to do so if the number of multiplications is small and un-amortized.
Most recently, a mixed protocol compiler, called HyCC [B¨us+18], was introduced that uses a combination
of exhaustive search and heuristics to optimize and automate mixing. The unit of optimization in HyCC is
a module, which can be as little as one instruction but the sheer number of choices for exhaustive search or
heuristics make it prohibitive to have such ﬁne granularity. In contrast, we provide provably optimal mixing
conditioned on a ﬁxed schedule and access to the SSA-representation of the input program.
2 Preliminaries
We review the basic notions from the related MPC literature and establish some necessary terminology and
notation. Our work combines and extends techniques from cryptography, in particular MPC, with program
analysis, and combinatorial optimization. Since this might require a combination of expertise, in Appendix B
we review basic program analysis concepts that are useful for evaluating our results.
We will consider the optimal protocol assignment (OPA) problem for deriving hybrid (i.e., mixed) pro-
tocols against semi-honest, aka passive, adversaries—who follow their protocol instructions but attempt to
4
acquire more information than the speciﬁed output by analyzing their (joint) view of the computation. We
note in passing that although, consistent with existing literature, our experiments are for semi-honest two-
party protocols only, our theory, and in particular our feasibility result for solving OPA, directly applies to
malicious and or multi-party protocols.
In our experiments we focus on protocols that combine the same three types of semi-honest MPC protocols
as in [DSZ15] as it will allow us to use the primitive-MPC cost estimators introduced there. In the following
we give the high level description of these protocols and the associated sharing, and refer to [DSZ15] for
a detailed description of the optimization thereof. We stress that our program analysis technique can be
applied to any version of these protocols (with or without such optimizations.)
Secret Sharing A t-out-of-n secret sharing scheme allows a dealer (or a protocol) to share a value s among
n parties, such that the shares of any t − 1 parties leak no information on s, but the shares of any t parties
uniquely deﬁne s. In this work we focus on two-party computation—although our theory applies to the
three-party case along the lines of [MR18]. More concretely, a value is shared among the two parties {p1, p2}
if every party pi holds a share (cid:104)s(cid:105)i such that there exist a reconstruction algorithm which given both (cid:104)s(cid:105)1
and (cid:104)s(cid:105)2 outputs s, but each (cid:104)s(cid:105)i by itself contains no information on s. We will denote the vector of shares
by (cid:104)s(cid:105) = ((cid:104)s(cid:105)1,(cid:104)s(cid:105)2) and refer to it as a sharing of s.
The MPC modules: The three (types of) MPC protocols, also referred to as MPC modules, that will be
considered here (and their associated secret sharing schemes) are as follows (cf. [DSZ15] for more details on