工程师必须部署大量的collectors，以实现全面的"进入和出口覆盖"(ingress and egress coverage)(C.
Mazzariello, 2010)。取而代之的常见的做法是，通常的做法是在低带宽的"出口点"(egress
points)实现IDPS或透明代理，以实现显式的的"whitelisting"和"blocking"功能。
在AWS中，"基于主机的流量转发"(Host-based traffic
forwarding)存在问题，因为带宽限制与实例类型相关联，而与附加到它们上的网络接口无关(Amazon Web Services, 2019)。
  * 所以，在AWS中“基于主机的流量转发”通常很消耗资源，例如
    * 方案1 克隆和转发流量到IDS收集器。这所消耗的带宽，取决于实例满足其预期业务需求的可用容量。虽然其他人已经详细介绍了使用基于主机的流量转发使用Snort和Zeek (Reese, 2018)，但对成本敏感且高度可扩展的云workloads通常不会提供一个额外的"应用程序处理实例"(application-handling instances) 仅用于维护"基于转发的IDS解决方案"的网络容量。
    * 方案2 HIDS解决方案。 与方案1类似的是，HIDS解决方案在云环境中也受到资源限制，可能导致高计算利用率和packet loss(P. K. Shelke, 2012).
#### 3.6.2. AWS WAF
AWS提供了名为AWS WAF的web应用程序防火墙(web application firewall,
WAF)，其操作类似于基于嵌入式设备的WAF解决方案。实现者必须使用AWS的CDN **CloudFront** 来启用AWS
WAF。与专业的WAF设备不同，AWS
WAF具有相对较少的内置规则来检测对应用程序的OWASP威胁，即用于SQL注入和XSS的"签名"(signatures,注:可以理解为匹配payload的规则)。然而，WAF管理员可以配置字符串和正则表达式匹配条件来检测和阻止SSRF，其他安全工程师已经证明了这一点(Sripati,
2019)。
一般来说，依靠像CDN这样的高度分布式系统 来为"内容审查"(content
inspection)提供扩展点来检测SSRF活动是昂贵的，因为进入壁垒对所有企业或所有公开暴露的wrokloads来说可能都是不经济的(Modi,
2017)。但是，在已经使用CloudFront CDN的AWS上的workloads中，使用AWS WAF的ACL来匹配IMS的link-local地址169.254.169.254，可能是一个有意义的"分层防御控制"(layered defensive control)。因为AWS
WAF是在HTTP传输层上操作的，所以这个地址可能不太容易出现二进制数据(比如图像文件)中的误报。
#### 3.6.3. Comparing EC2 IP addresses at AssumeRole with Credential Use
> 官方资料：什么是 AWS CloudTrail？
>  
>  
>     # AWS CloudTrail 是一项 AWS 服务，可帮助对您的 AWS 账户进行监管、合规性检查、操作审核和风险审核。用户、角色或 AWS
> 服务执行的操作将记录为 CloudTrail 中的事件。事件包括在 AWS 管理控制台、AWS Command Line Interface 和 AWS
> 开发工具包和 API 中执行的操作。
>     # 在您创建 AWS 账户时，将对账户启用 CloudTrail。当您的 AWS 账户中发生活动时，该活动将记录在 CloudTrail
> 事件中。您可以通过转到事件历史记录来轻松查看 CloudTrail 控制台中的最新事件。要持续记录 AWS 账户中的活动和事件，请创建跟踪。
>     # 您的 AWS 账户活动的"可见性"是安全和运营最佳实践的重要方面。您可以使用 CloudTrail 来查看、搜索、下载、归档、分析和响应您的
> AWS 基础设施中的账户活动。您可以确定谁或哪个组件对哪些资源执行了哪些操作、事件发生的时间以及其他细节，来帮助您分析和响应 AWS 账户中的活动。
>     # 您可将 CloudTrail 集成到使用 API 的应用程序、为您的组织自动创建跟踪、检查创建的跟踪的状态，以及控制用户查看
> CloudTrail 事件的方式。
AWS中，由于EC2实例在启动时就会承担其关联的IAM角色，则“内部AWS EC2服务对 AssumeRole(承担角色) 的调用”这个过程是AWS
CloudTrail中的一条"已记录事件"(logged event)。
**因为IMS至少每6个小时为每个实例生成唯一的临时访问密钥，所以，当一个EC2实例承担一个IAM角色时，CloudTrail可以记录到该EC2实例的IP地址，并将这些IP地址与CloudTrail中记录的其他API调用相关联。**  
该检测技术提供了观察能力：能够观察到在"生成临时凭证的实例"之外发生的"临时凭证使用"情况，这可能指明了"SSRF攻击成功地提供了未经授权的访问"(Bengtston,
2018)。
  * 译者注：这种检测技术所关联的数据来源是 **AWS CloudTrail记录到的日志** 中的信息
    * 1.当一个EC2实例承担一个IAM角色时的IP地址
    * 2.CloudTrail中的其他API调用信息
  * 但是 攻击者能够躲避上述的这种 **"记录访问凭证的生成、并随时间关联其使用情况"** 的检测技术
    * 因为能够访问IMS以获取凭证的攻击者，他很可能就在同一个实例中去访问AWS API(Fernandez, 2019)。这样的话访问AWS API的IP就是实例的IP，看不出IP的异常。
  * 并且 这种检测技术需要获取CloudTrail logs中的信息，这在实际环境中的实施、操作都很复杂。
    * 理由1 在利用多个"地区"(regions)实现的弹性的环境中，获取CloudTrail logs中的信息比较困难。(Amazon Web Services,2019)。而CloudTrail Logs 和 AWS Security Token Service(能够创建临时凭证) 都可以在地区内、或者全球范围内 运行。
    * 理由2 像AWS Elastic Kubernetes Service (EKS)之类的"托管式容器化服务"(managed containerized service)产品，它们的趋势是在单个EC2实例上"复用"(multiplex)和"轮换"(rotate)多个容器、多个IP地址，但每个实例都只具有唯一的IAM角色。那么使用该方法去关联可疑的SSRF活动时，将面临重大挑战。
      * 译者注：这种检测方法的精确程度最多只能到实例级别 - 比如根据CloudTrail记录到的日志发现有异常，一个云实例只有唯一的IAM角色，找到了单个云实例A，但上面有多个容器，怎么确定是哪个容器有异常呢？
      * 译者注：这种检测方法具有误报率 - 比如单个云实例B，有容器1和容器2(有各自的IP)，那么容器调用云实例B的AWS API时，则很可能被误报。
## 4\. Recommendations and Implications
建议和启示。
### 4.1. Recommendations for Practice
实践建议。
#### 4.1.1. Configuration Best Practices
配置最佳实践。
  * Amazon Web Services的管理员应该熟悉并遵循已发布的最佳实践
    * 1.AWS Well-Architected Framework文档。具体来说，管理员应启用VPC Flow Logs和Amazon GuardDuty，以检测SSRF后造成的"环境外部的IMS凭证使用尝试"。
    * 2.存在多种持续监控工具，如工具`Cloud Conformity`和`Prowler`，分别用于衡量AWS账户是否符合`AWS Well-Architected Framework` 和`Center for Internet Security(CIS) Amazon Web Services Foundations Benchmark`( "CIS AWS基础基准")
    * 3.安全团队应部署检测工具，以监控这些控制在AWS账户中的实现情况。 特别是对于那些依赖人工管理而不是高度自动化的环境，一些变更可能会带来差异和潜在的安全性配置错误。
除非EC2实例需要访问AWS API，否则管理员不能将IAM角色附加到实例上。必要时，当将"IAM策略语句"(IAM policy
statements)attach到用于该目的的角色时，IAM策略的"作者"(authors)应该使用"最小权限方法"(least-privileges
methodology)仔细地构造语句。"作者"(authors)还应该利用可以限制"服务访问"(service access)的"IAM策略条件"(IAM
policy
conditions)，这样一来在该环境之外，由IMS发出的、被攻击者通过SSRF攻击得到的"临时访问凭证"的价值变得很有限。与所有的技术管控一样，知识丰富的团队应该定期审查IAM角色使用和"IAM策略语句"(IAM
policy statements)。
作为一条"分层管控"(layered
control)，基于主机的管控(如iptables之类)会记录日志并阻止对IMS的访问，除非这些访问来自于已知的那些进程(这些进程具有合法需求, 即具有
读取云实例的元数据、获取临时访问凭据以代表实例访问其他AWS services的合法需求)。  
As a layered control, host-based controls like iptables that log and prevent
access to the IMS except when originating from processes that have a known,
legitimate need to read instance metadata or obtain temporary access
credentials to act on behalf of an instance to access other AWS services.
此外，考虑到VPC Traffic
Mirroring现在允许已有的入侵检测工具监视、告警可疑的流量，安全工程师应该审查已开发的Zeek或Suricata规则(它们是作为本研究的一部分而开发的规则)，以便将它们包含到Amazon
Web Services的IDS部署中，特别是服务于"外部流量"(external traffic,即和外部交互的流量)的那些AWS实例中。
在本研究中评估了的这些检测机制中，只发现了以下2种检测机制，能够在IMS凭据被盗用之前检测到SSRF，也就是在“凭据用于尝试未经授权的云环境访问或修改”之前就可以检测到。
  * 2种检测机制 能够在IMS凭据被盗用之前检测到SSRF
    * 1.the host-based packet filter iptables 
    * 2.VPC Traffic Mirroring using Zeek or Suricata
虽然这两种方法都是有效的，但是VPC Traffic Mirroring的优势在于它能够对所有AWS EC2资源提供"检测覆盖"(detective
coverage)，包括了虚拟设备(AWS帐户持有人无法直接对其进行交互式登录、或管理员级的配置权限的虚拟设备)。
#### 4.1.2. Effectiveness of Layered Detection Techniques
鉴于启用VPC Flow
Logs和GuardDuty的成本相对较低，尽管本研究发现的检测功能仅限于SSRF攻击之后的活动，但强烈建议在AWS云上具有敏感数据的企业，应该启用该服务并密切监控它，至少应该关注"结果类型"(finding
type)为`UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration`的结果。
但是，由于"SSRF攻击后的活动"(post-SSRF exploit activity)发生的时间点
可能在SSRF攻击成功的那个时间点之后很多，因此使用iptables和auditd来监视主机上的活动，是 **扩展检测能力**
以识别SSRF攻击尝试的合乎逻辑的下一步。  
根据法规要求或行业合规性标准，具有敏感数据的环境通常需要具有"集中式日志记录设施"(centralized logging
facilities)，并且通过使用自动化部署iptables来记录、告警来自于(业务)服务器的那些本不需要访问IMS的尝试（检测依赖的数据源是"集中式日志记录设施"），管理员可以在他们能直接控制的那些服务器里尽早地发现SSRF攻击，即管理员获得了额外的、不重复的
**"可见性"** 。  
使用iptables，管理员除了可以受益于"分层检测"(layered detection)，还可以配置"预防式的管控措施"(preventative
control)。
VPC Traffic
Mirror和传统的IDS解决方案需要额外的成本和专业知识才能捕获、存储、分析"发现结果"(findings)，并根据"发现结果"采取行动。但是，在云环境中，资源投资不是唯一的因素，因为IDS必须能够接收未加密的"网络数据包"(network
packets)，或具有对它们进行解密的能力。  
通常，云配置最佳实践要求尽可能对"静态数据"(data at rest)和"传输中的数据"(data in
transit)都启用加密。特别是对于利用"云提供商证书颁发机构"(cloud provider certificate
authorities)提供的自动证书颁发的环境，这可能会带来问题，因为在使用完全托管的提供商CA解决方案时，私钥通常不可用。为了获得VPC Traffic
Mirroring的优势，企业必须考虑"TLS
termination"(注:应该是指TLS解密、TLS卸载)在云负载均衡器上的利弊，并在其之后的网络接口上镜像未加密的流量。一些公司可能具有法律或合规性要求，从而限制了他们采用此检测层的能力。面对这样的利弊折衷时，如果他们在其环境中已经部署了“黑盒(black
box)”虚拟设备，则应考虑对管控措施进行弥补、补充。
#### 4.1.3. Challenges Regarding the Evolution of the SSRF Techniques
考虑SSRF技术演进带来的挑战。
因为针对AWS EC2 IMS的SSRF请求是指向一个静态IP地址，所以在HTTP请求中检测link-local的IP地址(例如169.254.169.254)、或直接检测path如`iam/security-credentials`，都很容易输入到IDS或WAF签名(signature,可理解为规则)中。  
应该注意到攻击者的对抗，"过滤器绕过技术"(Filter bypass
techniques)可以使用"不同进制"来混淆URL，即用十进制、八进制和十六进制混合表示一个IP，如`169.0xfe.0251.254 等价于
169.254.169.254`。
（译者注：已总结至 [notes - SSRF
绕过技巧](https://github.com/1135/notes/blob/master/web_vul_SSRF.md#%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7)，`IP地址的不同形式
- 进制转换`）。