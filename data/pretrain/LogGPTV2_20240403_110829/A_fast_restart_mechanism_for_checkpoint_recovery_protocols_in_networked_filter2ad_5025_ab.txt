PTE. While such TLB invalidation introduces some
overhead
the
micro-architecture, the overhead is generally several
orders of magnitude smaller than the reduction of
restart latency at the macro-system level. Clearing the
access bits of the PTEs could disturb the kernel page
replacement, but in Linux, page replacement is based
on a separate PG_REFERENCE bit of each physical
frame. So to guarantee the original
replacement
algorithm,
corresponding
PG_REFERENCE bit when it clears an access bit
which has been previously set.
FREM turns
perspective
from
the
the
on
of
In addition, a DMA (Direct Memory Access)
operation also bypasses the CPU, thereby causing false
negatives. We suggest instrumenting the corresponding
device driver to set the access bits of PTEs whenever a
DMA transfer is initiated. In the current design, we
adopt a simple strategy which includes all the mapped
DMA pages in the touch set. Typically the amount is
much smaller than the entire process address space on
the x86 platforms.
4.1.2. Page swapping. Page swapping, which clears
the PTE access bits, may also cause false negatives in
the identification of the touch set. Hence, FREM must
track the access bits upon page swapping. To solve the
problem, we instrument the Linux kernel swap thread
kswapd to ensure that whenever a page swap occurs
the access bits of the
during the tracking window,
PTEs are first scanned by FREM before they are
cleared by the kernel.
1-4244-2398-9/08/$20.00 ©2008 IEEE
220
DSN 2008: Li &Lan
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:19:10 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
4.1.3. Dynamic memory management. Dynamic
memory allocation and deallocation operations change
the process address space. Without a careful analysis,
they may cause identification errors. As shown in
Figure 2, we identify three types of pitfalls stemming
from dynamic memory usage.
~
~btl"l.iIr·-
~
(I)
(I)
(I)
"U
QI
(')(l) al-lillllllllL----
. .
~d
Cl.
~ b
(I)
~c
QI
~ a...........__L--__.---I111.....--+
time
t 1
t 1 +t.,
t 2
t 3
(c)
time
I pages saved in the
checkpoint image
~ pages newly allocated
~ in the tracking window
Figure 2. Pitfalls in the identification of the touch set
caused by dynamic memory management
In Figure 2(a), at time t} the memory region r (the
region of [a,b])
is saved on stable storage as the
checkpoint image. At time tl, a deallocation operation
shrinks r to [a, c] and releases all the pages in (c, b].
When FREM scans for the touch set at time (t} + tw)
(the end of the tracking window), a false negative error
may occur - the pages in (c,b] accessed during time (tj,
t2) are lost.
In Figure 2(b), the memory region r is checkpointed
at time t}. At time t2 an allocation operation extends r
to [a,c]. At the scan time (t} + tw), the pages in (b,c]
accessed during time (tl, t}+tw) should not be counted
in the touch set; otherwise a false positive error is
introduced. Recall that the touch set is defined as the
intersection of the process address space saved in the
checkpoint
image and its working set during the
tracking window. Although the pages in (b,c] were
accessed during time (t), t}+tw ), they are not part of the
checkpoint image, indicating they do not need to be
retrieved during the restart phase.
In Figure 2(c), the memory region r is checkpointed
at time t}. At time t}, a deallocation operation shrinks r
to [a,c]. Then later at time t3, an allocation operation
extends it to [a,d]. The question is whether we should
scan the pages in (c, b] or not? The answer is two-fold.
At time t2 just before their deallocation, the pages in
(c,b] should be tracked because they are part of the
checkpoint image; otherwise a false negative error is
introduced. At time (t} + tw), the pages in the same
range (c,b] are actually newly allocated and should not
be counted in the touch set; otherwise a false positive
error is introduced.
The above analysis indicates that the touch set is
always a subset of the checkpoint
image, which
monotonically decreases during the tracking window.
Based on this key observation, we develop a simple yet
effective algorithm to track the touch set: upon the
completion of a checkpoint, the address information of
the pages saved in the checkpoint image is stored by
FREM (denoted as the candidate pages); whenever a
memory deallocation takes place, FREM checks the
intersection between the candidate pages and the pages
to be released for the identification of the touch set;
after that, FREM updates the candidate pages by
excluding the intersection. The algorithm can eliminate
the potential false positives and false negatives as
illustrated in Figure 2. Figure 3 summarizes our
algorithm to identify the touch set.
Dumping the checkpoint image {
Step 1. Invoke BLCR to save the checkpoint image;
Step 2. Record the pages saved in the checkpoint image
as the candidate pages;
Step 3. Initialize the touch set descriptor;
Step 4. Invalidate the TLB entries ifnecessary;
}
Tracking the touch set {
Upon each memory deallocation {
Step 1. Check the intersection between the pages to be
released and the candidate pages;
Step 2. Identify the accessed pages (in the intersection)
as part of the touch set;
Step 3. Update the candidate pages by excluding the
intersection;
}
Upon each page swap {
Step 1. Check the intersection between the pages to be
traversed and the candidate pages;
Step 2. Identify the accessed pages (in the intersection)
as part of the touch set;
}
Upon the completion of tracking {
Step 1. Check the intersection between the current
memory region and the candidate pages;
Step 2. Identify the accessed pages (in the intersection)
Step 3. Store the touch set descriptor, along with the
as part ofthe touch set;
checkpoint image;
}
}
Figure 3. The touch set identification algorithm
In our implementation, to ensure the efficiency of
the search and insertion operations, we use a double
linked list and a red-black tree to store the touch set
descriptor and the candidate pages respectively. In
addition, to monitor memory space deallocation, the
Linux kernel function do_munmap is instrumented.
1-4244-2398-9/08/$20.00 ©2008 IEEE
221
DSN 2008: Li & Lan
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:19:10 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
The modified kernel only impacts the target process
within the tracking window,
thereby minimizing its
disturbance to other processes in the system.
4.2. Estimation of Tracking Window
The tracking window size tw is equally important in
the FREM design and is dynamically determined at the
beginning of the post-checkpoint tracking. How to set
an optimal window size is challenging. A small
window size reduces the time duration of overlapping
computation and image retrieval during recovery and
also incurs numerous remote page faults. On the other
hand, a large window size leads to a large touch set,
thereby increasing recovery latency and also increasing
the risk of failures. An ideal tw should yield a perfect
touch set such that the resumed process first accesses a
page not in the touch set just as the transmission of the
remaining checkpoint image finishes, e.g., the time t6
in Figure 1.
image size W at
tw to the retrieval
In our current design, a heuristic method is adopted
to estimate the window size: once we know the
the completion of a
checkpoint
checkpoint, we set
time of the
checkpoint image (denoted as retrieval(W)). It can be
simply calculated as the sum of the disk I/O and
network transfer time:
retrieval(W) = W;{lisk BW + ~etwork BW + network latency
Here, the parameters like latency and bandwidth can be
obtained according to the hardware specifications or
through benchmark tools. Note that retrieval(W) is a
conservative estimate and can be used as an upper
bound.
time
should be less as the disk I/O may be overlapped with
the network transfer. The rationale is to ensure the
availability of the entire checkpoint image before the
process completes its execution on the touch set. It is
possible to set tw to a smaller value. Currently we did
not do this and leave it as future work.
image retrieval
In practice,
the actual
Further, the tracking window size can be set to zero
so as to disable FREM under two conditions:
• When W is smaller than a pre-defined threshold TH,
tw is set to zero. For the applications with small
memory footprints, FREM is not used. The value of
TH can be set by system administrators or users
based on their tolerable restart latency.
• If retrieval(W) is larger than the checkpoint interval,
we also set tw to zero. Based on our experience, this
violation is rare in practice since the retrieval time
retrieval(W) is usually much less than the checkpoint
interval.
4.3. Partial Image Loading
To enable the process restoration on the touch set,
FREM coordinates its partial image loading with the
Linux demand paging mechanism:
• Once the touch set is retrieved, FREM restores the
structure of the process address
space via the
memmap function call, and then loads in the touch
set. Afterward the process is restarted and another
kernel thread is forked to simultaneously retrieve the
remaining image to the destination machine.
if yes,
• During the overlapped execution, FREM provides
special page fault handling for
the process by
implementing the no_page callback function as a
memory map driver. (1) If a page fault address
belongs to the touch set (this is possible due to
dynamic memory allocation), the default page fault
handling is used. (2) If a page fault address falls out
of the touch set, FREM first checks whether the
requested data is already available in the local image
the requested page will be loaded
file;
on-demand; otherwise a remote page fault occurs. A
simple strategy is employed to deal with remote
page faults in our current design, which stops the
application until the requested page is retrieved. Due
to the conservative estimation of the tracking
window size, the probability of remote page faults is
rare. As soon as the entire checkpoint
image is
available and loaded, FREM unhooks this driver
from the memory management subsystem to restore
its
sophisticated
mechanism like on-demand remote data retrieval
will be investigated in our future work.
operations. A more
normal
5. Experiments
To evaluate FREM, we have implemented a
prototype system with the BLCR checkpointing tool
[6] in Linux 2.6.22 systems. Our testbed consists of
two x86 machines, one used as the source machine and
the other as the destination machine. Each machine is
equipped with a 2.8GHz Pentium 4 processor, 512KB
cache, 1 GB RAM and an 80GB 7200RPM Maxtor
disk. Two network configurations at
the National
Center for Supercomputing Applications (NCSA) are
(1 ) FAST, which denotes a fast Myrinet2000
tested:
network deployed in the NCSA Mercury cluster and (2)
SLOW, which represents a relatively slow Ethernet
connection deployed between the Mercury
and
Tungsten clusters [12]. Table 1 lists the measured data
retrieval parameters.
1-4244-2398-9/08/$20.00 ©2008 IEEE
222
DSN 2008: Li &Lan
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:19:10 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Table 1. Parameters of image retrieval cost
Disk
Net\vork
Net\vork
latency
200ms
70ms
SLOW
FAST
Net\vork.
bandwidth
7MB/s
32:MB/s
bandwidth
7MB/s
7MB/s
experiments
[21]. Since FREM targets
The benchmark suite SPEC CPU2006 is tested in
our
the
applications with large memory consumptions, we
choose the applications whose memory footprints are
greater than 150 MB. Among these applications, we
randomly select twelve applications and present their
results in the following.
5.1. Application Restart Latency
In this set of experiments, we compare application
restart
latencies by using the regular BLCR and
FREM-enhanced BLCR. Table 2 lists our measured
results,
including application checkpoint image size,
size of the touch sets, and restart latencies using BLCR
and FREM. As we can see from the table, for most
applications, the touch sets are substantially smaller
than the checkpoint images. The use of FREM can
significantly reduce application restart
latency. The
achieved by using FREM is very
performance
promising:
the average reductions on restart latency
are 72.43% and 61.96% in the FAST and SLOW
networks, respectively.
Table 2. Restart latency (RL) by using BLCR
and FREM with SPEC CPU2006 applications.
The parenthesized numbers in the last two
columns are relative improvements (in
percentage) achieved by FREM.
Application W Toueh set size
RL with
RL with FREM (s)
(input set)
(MB)
(MB)
BLCR(s)
FAST SLOW FAST SLOW
FAST
SLOW
1: astar (1)
2: bzip2 (5)
3: bzip2 (6)
4: dealII
280
847
609
239
5: gamcss (1) 629
6: gce (4)
7: gce (6)
8: Ibm
9:mcf
10: perl (1)
311
TIl
409
839
171
11: soplc:x (2) 490
12: wrf
685
34
45
64
12
5
48
216
402
394
31
186
37
44
152
244
28
9
82
211
402
827
50
191
346
49.4
80.1
6.0 (87.88%) 12.6 (84.26%)
161.3
254.1 8.6 (94.64%) 45.6 (82.04%)
109.3
176.0 11.S (89.4~.Io) 70.S (S9.970/0)
31.0
57.2
1.6 (94.80% ) 6.8 (88.13%)
112.0
180.9 0.8 (99.28%) 2.6 (98.57%)
53.4
87.6 11.6 (78.20%) 23.0 (73.75%)
136.7 221.2 38.2 (72.05%) 60.6 (72.62%)
73.6
118.5
72.3 (l.SOO.lo) 116.3 (1.800/0)
ISl.O 242.8 70.9 (SJ.03%) 239.S (1.370/0)
24.7
89.3
43.5
4.4 (82.16%) 12.8 (70.66%)
142.9 33.9 (6205%) 55.7 (61.06%)
117.8
192.9 54.5 (53.78%) 97.9 (49.25%)
respectively,
Figures 4 and 5 show,
the raw
improvement and the relative improvement on restart
latency achieved by FREM over BLCR. As we can see
from Figure 4, the reduction ranges from a couple of
seconds to a couple of hundred seconds. The highest
reduction is 152.6 seconds in the FAST network and
208.5 seconds in the SLOW network. According to
Figure 5, except for applications 8 and 9, the relative
is more than 53.78% in the SLOW
improvement
network and more than 49.25% in the FAST network.
The trivial improvements on applications 8 and 9 are
attributed to their low temporal data locality. For
instance, for application 8, its touch set is 402 MB,
which is very close to the checkpoint image of 409 MB;
for application 9, the improvement achieved by FREM
drops
sharply when the network performance is
changed from FAST to SLOW. This is also caused by
the rapid growth of the touch set when the network
performance is low. However, we shall point out that
even in a slow network, the raw restart latency is still
reduced by at least a couple of seconds.
Raw Improvement on Restart Latency by Using FREM
250 ,...----------,..--....,.----------,
200 ~-----II--------I. SLOW1 - - - - - - -1
c
:8
u-6
Q::U;-g§ 150
~ ! 100 ~--I!l!II---==__-~-_._..__---------l
II FAST
Q)
Q) U
~
~
Q)
Q::
50 r--.t-ftII
f------I
----Hlt-------E__~
o
2
3
4
5
6
7
8
9
10 11
12
Application 10
Figure 4. Raw improvement on restart latency
by using FREM over BLCR
Percentage Improvement by Using FREM
100%
80%
Q)
~ 60%
1:
Q)t 40%
a.
20%
0%
-
-
-
-
-
2
3
4
lID FA'll ,I
• SLOW
-
8
9
10
11
12
5
6
7