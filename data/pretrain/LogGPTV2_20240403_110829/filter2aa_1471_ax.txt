### Runtime Usage
- **Disables Reparsing Situations**: This flag disables any kind of reparsing, such as symbolic links, NTFS reparse points, and registry key redirection. If a reparse situation is encountered, it returns `STATUS_REPARSE_POINT_ENCOUNTERED`. This is a security measure to mitigate certain types of path redirection attacks.

### Default Security Quota
- **Default 2 KB Quota**: Specifies that the object’s security descriptor uses the default 2 KB quota.

### Single Handle Entry
- **Single Entry in Handle Information Subheader**: Indicates that the handle information subheader contains only a single entry and not a database.

### New Object
- **Created but Not Inserted**: Specifies that the object has been created but has not yet been inserted into the object namespace.

### Deleted Inline
- **Inline Deletion**: Indicates that the object is being deleted inline through a call to `ObDereferenceObject(Ex)`, rather than through the deferred deletion worker thread.

### Note on Object Creation
When an object is created through an API in the Windows subsystem (e.g., `CreateEvent` or `CreateFile`), the caller does not specify any object attributes. The subsystem DLL handles this behind the scenes. As a result, all named objects created through Win32 go into the `BaseNamedObjects` directory, either the global or per-session instance, because this is the root object directory specified by `Kernelbase.dll` in the object attributes structure. More details on `BaseNamedObjects` and its relation to the per-session namespace are provided later in this chapter.

### Object Body and Type
Each object has an object body with a format and content unique to its type. All objects of the same type share the same object body format. By creating an object type and providing services for it, an executive component can control the manipulation of data in all object bodies of that type. The object header has a static and well-known size, allowing the Object Manager to easily locate the object header by subtracting the header size from the object pointer. To access the subheaders, the Object Manager subtracts another well-known value from the object header pointer. The extended information subheader is used to find the pointer to the object footer.

### Standardized Structures and Generic Services
The standardized object header, footer, and subheader structures enable the Object Manager to provide a set of generic services that can operate on the attributes stored in any object header and can be used on objects of any type. Some of these generic services are available to Windows applications through the Windows subsystem. These services are listed in Table 8-21.

#### Table 8-21: Generic Object Services
| Service         | Purpose                                                                 |
|-----------------|-------------------------------------------------------------------------|
| Close           | Closes a handle to an object, if allowed.                               |
| Duplicate       | Shares an object by duplicating a handle and giving it to another process. |
| Inheritance     | If a handle is marked as inheritable, and a child process is spawned with handle inheritance enabled, this behaves like duplication for those handles. |
| Make Permanent/Temporary | Changes the retention of an object.                                      |
| Query Object    | Gets information about an object’s standard attributes and other details managed at the Object Manager level. |
| Query Security  | Gets an object’s security descriptor.                                    |
| Set Security    | Changes the protection on an object.                                     |
| Wait for a Single Object | Associates a wait block with one object, which can then synchronize a thread’s execution or be associated with an I/O completion port through a wait completion packet. |
| Signal an Object and Wait for Another | Signals the object, performing wake semantics on the dispatcher object backing it, and then waits on another object. The wake/wait operation is done atomically from the scheduler’s perspective. |
| Wait for Multiple Objects | Associates a wait block with one or more objects, up to a limit (64), which can then synchronize a thread’s execution or be associated with an I/O completion port through a wait completion packet. |

While not all object types implement all these services, they typically implement at least create, open, and basic management services. For example, the I/O system implements a create file service for file objects, and the process manager implements a create process service for process objects. Some objects may not directly expose such services and could be internally created as a result of some user operation. For instance, opening a WMI Data Block from user mode creates a `WmiGuid` object, but no handle is exposed to the application for close or query services.

### Type Objects
Object headers contain data common to all objects but can have different values for each instance. However, objects also contain data that remains constant for all objects of a particular type. For example, you can select from a set of access rights specific to a type of object when opening a handle to objects of that type. The executive supplies terminate and suspend access for thread objects and read, write, append, and delete access for file objects.

To conserve memory, the Object Manager stores these static, object-type-specific attributes once when creating a new object type, using a type object to record this data. If the object-tracking debug flag is set, a type object also links together all objects of the same type, allowing the Object Manager to find and enumerate them, if necessary. This functionality leverages the creator information subheader.

### Experiment: Viewing Object Headers and Type Objects
You can examine the process object type data structure in the kernel debugger by first identifying a process object with the `dx @$cursession.Processes` debugger data model command:

```plaintext
lkd> dx -r0 &@$cursession.Processes[4].KernelObject
&@$cursession.Processes[4].KernelObject: 0xffff898f0327d300 [Type: _EPROCESS *]
```

Then, execute the `!object` command with the process object address as the argument:

```plaintext
lkd> !object 0xffff898f0327d300
Object: ffff898f0327d300  Type: (ffff898f032954e0) Process
    ObjectHeader: ffff898f0327d2d0 (new version)
    HandleCount: 6  PointerCount: 215645
```

On 32-bit Windows, the object header starts 0x18 (24 decimal) bytes prior to the start of the object body, and on 64-bit Windows, it starts 0x30 (48 decimal) bytes prior. You can view the object header with this command:

```plaintext
lkd> dx (nt!_OBJECT_HEADER*)0xffff898f0327d2d0
(nt!_OBJECT_HEADER*)0xffff898f0327d2d0: 0xffff898f0327d2d0 [Type: _OBJECT_HEADER *]
    [+0x000] PointerCount: 214943 [Type: __int64]
    [+0x008] HandleCount: 6 [Type: __int64]
    ...
```

Now, look at the object type data structure by copying the pointer shown earlier:

```plaintext
lkd> dx (nt!_OBJECT_TYPE*)0xffff898f032954e0
(nt!_OBJECT_TYPE*)0xffff898f032954e0: 0xffff898f032954e0 [Type: _OBJECT_TYPE *]
    [+0x000] TypeList: [Type: _LIST_ENTRY]
    [+0x010] Name: "Process" [Type: _UNICODE_STRING]
    ...
```

The output shows that the object type structure includes the name of the object type, tracks the total number of active objects of that type, and tracks the peak number of handles and objects of that type. The `CallbackList` keeps track of any Object Manager filtering callbacks associated with this object type. The `TypeInfo` field stores the data structure that keeps attributes, flags, and settings common to all objects of the object type, as well as pointers to the object type’s custom methods:

```plaintext
lkd> dx ((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo
((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo: [Type: _OBJECT_TYPE_INITIALIZER]
    [+0x000] Length: 0x78 [Type: unsigned short]
    [+0x002] ObjectTypeFlags: 0xca [Type: unsigned short]
    ...
```

Type objects cannot be manipulated from user mode because the Object Manager provides no services for them. However, some of the attributes they define are visible through certain native services and Windows API routines. The information stored in the type initializers is described in Table 8-22.

#### Table 8-22: Type Initializer Fields
| Attribute      | Purpose                                                                 |
|----------------|-------------------------------------------------------------------------|
| Type Name      | The name for objects of this type (e.g., Process, Event, ALPC Port).    |
| Pool Type      | The type of pool (e.g., NonPagedPoolNx) used for allocating memory.     |
| ...            | ...                                                                     |