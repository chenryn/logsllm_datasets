# Java Security: A Ten-Year Retrospective

**Author:** Li Gong  
**Affiliation:** Mozilla Online Ltd, Beijing, China  
**Email:** [PI:EMAIL]  
**Conference:** 2009 Annual Computer Security Applications Conference  
**DOI:** 10.1109/ACSAC.2009.44

## Abstract
The first edition of Java, both the language and the platform, was released in 1995 with an all-or-nothing security access model. In mid-1997, I published a paper in IEEE Micro that outlined a vision for the future of Java security, which included a fine-grained access control model, a cryptographic architecture, and several other security mechanisms. The first implementation of these features was officially released in late 1998 as part of JDK 1.2. Over the past ten years, the original vision for Java security has largely been realized, and the overall architecture has been adopted by both the enterprise and mobile Java platforms. This paper reflects on the technical and non-technical lessons learned during the design and implementation of the Java security architecture and its subsequent real-world deployment.

**Keywords:** Java, security, least privilege, access control, safe programming, mobile code

## I. An Unexpected Journey
In May 1995, Sun Microsystems introduced Java, a language and software platform that was poised to revolutionize the programming world. Initially designed for set-top boxes, Java debuted in the form of the HotJava browser running on PCs and was soon integrated into the Netscape browser, making it accessible to millions of web creators and users. Java was marketed as object-oriented, cross-platform, and secure, earning it the title of the most buzzword-complete technology.

However, labeling any system as secure is imprecise and often invites scrutiny from security researchers. Soon after its release, security vulnerabilities began to surface, discovered by a range of individuals from independent hackers to specialized research institutions, with a notable group at Princeton University led by Ed Felten. Given the public attention on Netscape and the browser's role in deploying and utilizing Java, security breaches were headline news in major publications like the New York Times and the Wall Street Journal.

When Microsoft licensed Java and incorporated it into the Internet Explorer browser, the competition to deliver the most secure browser became a significant battleground in the browser wars. This period was marked by frequent security hole discoveries, hurried patching, and behind-the-scenes efforts to manage the situation. Sun Microsystems was an active participant, and I found myself on numerous industry panels alongside Jim Roskind from Netscape and Barbara Fox from Microsoft, engaging in lively debates.

Shortly after Java's release, a scholarly debate on runtime security (a term primarily focused on Java but also applicable to any mobile code) raged on the ACM Risks Forum, moderated by Peter G. Neumann, my esteemed colleague at SRI International. We decided to bring the major players together for a one-day meeting at SRI on May 3, 1996. Participants included James Gosling from Sun, Taher ElGamal from Netscape, and researchers like Mike Schroeder, Butler Lampson, and David Presotto. The meeting concluded with a shared belief that a collaborative effort could solve the security challenges.

On August 12, 1996, I joined the JavaSoft division of Sun as the Java security architect, tasked with building the security team and defining what Java security should be. This was a unique opportunity to apply research in practice, given Java's commitment to security as a design goal. Despite the uncertainties, I took the plunge.

## II. Evolution of Java Security
Java was released through the Java Development Kit (JDK), which includes the Java Runtime Environment (JRE) with the Java Virtual Machine (JVM) and all Java APIs and libraries. The initial release, JDK 1.0, had a binary security model: applications loaded from the local disk ran as trusted code with full access, while applets loaded over the network ran as untrusted code with limited capabilities. This model was often called the sandbox model.

JDK 1.1 introduced code signing, allowing digitally signed applets to be treated as trusted applications with full system access. When I joined in mid-August 1996, JDK 1.1 was scheduled for release at the end of that month, but it was delayed. Design work for JDK 1.2 started in late 1996 and was completed in December 1998, introducing the fine-grained access control model, which remains largely unchanged today.

JDK 1.2, renamed Java 2, saw the introduction of the Java Cryptography Architecture (JCA), enabling cryptographic service providers to plug in custom implementations. The Java Secure Socket Extension (JSSE) was implemented to support SSL/TLS, and a full package for handling digital certificates was developed. Additionally, the Java Authentication and Authorization Services (JAAS) framework was outlined to introduce more sophisticated security policy management.

The first public discussion of Java security directions was a talk I gave at IEEE COMPCON in February 1997, later expanded and published in IEEE Micro. The first published paper on the JDK 1.2 security architecture was presented at a USENIX symposium in Monterey at the end of 1997. My book, "Inside Java 2 Platform Security," was completed in time for release at JavaOne in June 1999, with a second edition in 2003.

## III. Criteria for a Good Foundation
During the development of JDK 1.2, we faced the fundamental question of what security features to build into the platform. The criteria for determining the right platform security included:

1. **Usability:** The platform must be easy to use for building small- and large-scale systems and applications.
2. **Simplicity:** The platform cannot be too complex to analyze for critical properties.
3. **Adequacy:** The platform must contain all essential features and building blocks for supporting higher-level security requirements.
4. **Adaptability:** The platform must evolve with ease, following demand and market reality.

These attributes guided our decisions. For example, I included the `SignedObject` and `SealedObject` classes to mimic authenticated and encrypted data packets, and the `GuardedObject` class to encapsulate access conditions more elegantly than directly calling the `SecurityManager`.

At the same time, I was cautious about over-prescription, ensuring that the JDK remained extensible and adaptable. Once an API was included, it would be difficult to remove due to backward compatibility requirements.

## IV. Itâ€™s Not All Technical
The most fundamental question during the design phase of the JDK 1.2 security architecture was the direction of Java. Although Java had the potential to be a general programming platform, its early success was most visible through its integration into the Netscape browser. We debated whether to design Java security to support general applications or to focus on its role as a browser component.

The Netscape team pushed for features they deemed important for a browser, even modifying the JRE's security implementation and designing their own extensions. They wanted us to adopt their model, which included a call-back feature where the user would be prompted to allow or disallow actions. This design, similar to recent Windows Vista features, was not suitable for a general programming platform, especially for server applications.

In conclusion, the journey of Java security over the past ten years has been marked by both technical and non-technical challenges. The original vision has largely been realized, and the lessons learned continue to shape the evolution of Java security.