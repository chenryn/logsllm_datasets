### Evaluation of QoE Measurement Accuracy and Overhead

In this section, we first evaluate the accuracy and overhead of QoE Doctor, and then use it to systematically and quantitatively study various factors that may impact our three QoE metrics. The factors considered in this paper include:
1. **Network Type and Quality**: WiFi, 3G, and LTE cellular networks.
2. **App Design and Configuration**: Factors related to the application's design and settings.
3. **Carrier Mechanisms**: Specifically, carrier rate limiting mechanisms for throttling.

These factors are identified based on our experiences with the apps and practical problems from real user experiences, as observed by the authors at T-Mobile. Our experiment goals are summarized in Table 2. In this section, two carriers, denoted as C1 and C2, are involved in our experiments.

### 7.1 Tool Accuracy and Overhead

This section reports the evaluation results of the accuracy and overhead of QoE Doctor. Table 3 summarizes these results, along with the IP packet to RLC PDU mapping performance reported in §5.4.2.

#### QoE Measurement Accuracy
- **Mobile Data Consumption**: This metric is calculated precisely from data in the transport/network layer.
- **Network Energy Consumption**: Calculated directly from RRC/RLC layer information using established models [22, 48].
- **User-Perceived Latency**: UI data changes in the UI layout tree may not precisely correspond to screen changes due to UI drawing delays (Fig. 4). We evaluated the measurement accuracy by recording a video of the screen at 60 frames per second for each user-perceived latency test. Each experiment was repeated 30 times. The average time difference \( t_d \) between \( t_{\text{screen}} \) and the measurement result from QoE Doctor is under 40 milliseconds. The ratio of \( t_d \) to \( t_{\text{screen}} \) for each metric is shown in Fig. 6. The latency measurement error is less than 4%.

#### QoE Measurement Overhead
- **CPU Overhead**: We used DDMS [3] to compare the CPU time when manually inputting the target user behavior with the CPU time when using QoE Doctor. The most compute-intensive operation, parsing the UI tree (Fig. 4), was run on the most computation-intensive app operation: uploading a Facebook post. This test was repeated 30 times, and the average worst-case CPU computation overhead introduced by QoE Doctor is 6.18%.

### 7.2 Facebook: Post Uploading Time Breakdown Analysis

In this section, we focus on the action of uploading a post to Facebook, leveraging our multi-layer analysis to break down the roles of the device and the network in the user-perceived latency.

#### Experiment Setup
- **Device and App**: Experiments were run on Facebook version 5.0.0.26.31 on a Samsung Galaxy S3 device with Android 4.3.
- **Actions**: Using QoE Doctor, we posted status, check-in, and 2 photos every 2 seconds for C1 3G and C1 LTE networks. Each action was repeated 50 times.

#### Findings
1. **Finding 1: Network Delay Not Always Critical**:
   - **Breakdown**: We broke down the device and network latency according to the steps of uploading a post (Fig. 4). The TCP flows responsible for the post uploading were identified, and the network latency was calculated as the timestamp difference between the earliest and latest packet of this flow.
   - **Results**: Fig. 7 shows the breakdown results. Surprisingly, the network delay contributes little to the check-in and status uploading latency. The corresponding TCP ACK packets for both actions are outside the QoE window, indicating that the Facebook app pushes a local copy of status and check-in posts directly onto the news feed list, removing the network delay from the critical path. For posting 2 photos, the network latency always falls inside the QoE window, suggesting it is on the critical path.

2. **Finding 2: 3G RLC Transmission Delay**:
   - **Breakdown**: For 2 photo uploading, the network latency has more than 65% share in the end-to-end latency. We further broke down the network latency into four metrics: IP-to-RLC delay (\( t_1 \)), RLC transmission delay (\( t_2 \)), the first-hop OTA delay (\( t_3 \)), and other delay (\( t_4 \)) (Fig. 9).
   - **Results**: Fig. 8 shows the breakdown results. The RLC transmission delay in C1 3G is significantly greater than that in C1 LTE. On average, there are 270 IP packets transmitted within the QoE window, corresponding to 10553 RLC PDUs for C1 3G and 4132 RLC PDUs for C1 LTE. The 2.55× additional number of RLC PDUs implies significant RLC PDU header processing overhead, which could be the reason for the higher RLC transmission delay in C1 3G.

### 7.3 Facebook: Background Traffic Data Consumption and Energy Analysis

To ensure users can get interesting content from their social network at any time, the Facebook app keeps communicating with the server even when it is not in the foreground. We explore how much mobile data and energy are consumed by these background network events and how users can reduce costs and battery power usage while still getting timely updates.

#### Experiment Setup
- **Devices**: Two devices, a Samsung Galaxy S3 (device A) and a Samsung Galaxy S4 (device B), both with Android 4.3.
- **Configuration**: Accounts on device A and B were configured to be mutual and exclusive friends. Device A posted statuses, causing device B to receive these updates. Device B received a notification for every news feed post from device A.
- **Data Collection**: Only the data collection functionality of QoE Doctor controller was used on device B. We analyzed TCP flows that talk to Facebook DNS domain names and used QxDM RRC state machine logs for energy consumption.

#### Finding
- **Finding 3: Non-Time-Sensitive Background Traffic**:
  - **Impact**: To see how uploading frequency impacts mobile data and energy consumption, we set the uploading frequency on device B to be every 10 minutes, 30 minutes, 1 hour, and no uploading. The experiment ran for 16 hours.
  - **Results**: Fig. 10 and Fig. 11 show the results. For uploading every 10 minutes, 30 minutes, and 1 hour, data and energy consumptions are strictly proportional to the upload frequency of device A. However, when device A’s only friend, device B, posts nothing, device B still consumes non-negligible amounts of data and energy, indicating that non-time-sensitive background traffic adds significant overhead to users' daily mobile data and energy consumption.