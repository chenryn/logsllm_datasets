    byte total;
    total = value1 + value2;
    WriteLine(total);
在试图编译这些代码行时，会得到一条错误消息：
    Cannot implicitly convert type 'int' to 'byte'
问题是，我们把两个byte型数据加在一起时，应返回int型结果，而不是另一个byte数
据。这是因为byte包含的数据只能为8位，所以把两个byte型数据加在一起，很容易得到不
能存储在单个byte型数据中的值。如果要把结果存储在一个byte变量中，就必须把它转换
回byte类型。C#支持两种转换方式：隐式转换和显式转换。
1．隐式转换
只要能保证值不会发生任何变化，类型转换就可以自动（隐式）进行。这就是前面代
码失败的原因：试图从int转换为byte，而可能丢失了3个字节的数据。编译器不允许这么
做，除非我们明确告诉它这就是我们希望的结果！如果在long类型变量而非byte类型变量
中存储结果，就不会有问题了：
    byte value1 = 10;
    byte value2 = 23;
    long total;            // this will compile fine
    total = value1 + value2;
    WriteLine(total);
程序可以顺利编译，而没有任何错误，这是因为long类型变量包含的数据字节比byte
类型多，所以没有丢失数据的危险。在这些情况下，编译器会很顺利地转换，我们也不需
要显式提出要求。
表8-4列出了C#支持的隐式类型转换。
表8-4
源类型
目标类型
sbyte
short、int、long、float、double、decimal、BigInteger
byte
short、ushort、int、uint、long、ulong、float、double、
decimal、BigInteger
short
int、long、float、double、decimal、BigInteger
ushort
int、uint、long、ulong、float、double、decimal、BigInteger
int
long、float、double、decimal、BigInteger
uint
long、ulong、float、double、decimal、BigInteger
long、ulong
float、double、decimal、BigInteger
float
double、BigInteger
char
ushort、int、uint、long、ulong、float、double、decimal、
BigInteger
注意，只能从较小的整数类型隐式地转换为较大的整数类型，而不能从较大的整数类
型隐式地转换为较小的整数类型。也可以在整数和浮点数之间转换；然而，其规则略有不
同。尽管可以在相同大小的类型之间转换，如int/uint转换为float, 
long/ulong转换为
double，但是也可以从long/ulong转换回float。这样做可能会丢失4个字节的数据，但这仅
表示得到的float值比使用double得到的值精度低；编译器认为这是一种可以接受的错误，
因为值的数量级不会受到影响。还可以将无符号的变量分配给有符号的变量，只要无符号
变量值的大小在有符号变量的范围之内即可。
在隐式地转换值类型时，对于可空类型需要考虑其他因素：
● 可空类型隐式地转换为其他可空类型，应遵循表8-4中非可空类型的转换规则。即
int？隐式地转换为long?、float?、double？和decimal?。
● 非可空类型隐式地转换为可空类型也遵循表8-5中的转换规则，即int隐式地转换为
long?、float?、double？和decimal?。
● 可空类型不能隐式地转换为非可空类型，此时必须进行显式转换，如下一节所述。
这是因为可空类型的值可以是null，但非可空类型不能表示这个值。
2．显式转换
有许多场合不能隐式地转换类型，否则编译器会报告错误。下面是不能进行隐式转换
的一些场合：
● int转换为short——会丢失数据。
● int转换为uint——会丢失数据。
● uint转换为int——会丢失数据。
● float转换为int——会丢失小数点后面的所有数据。
● 任何数字类型转换为char——会丢失数据。
● 
decimal转换为任何数字类型——因为decimal类型的内部结构不同于整数和浮点
数。
● int？转换为int——可空类型的值可以是null。
但是，可以使用类型强制转换（cast）显式地执行这些转换。在把一种类型强制转换
为另一种类型时，有意地迫使编译器进行转换。类型强制转换的一般语法如下：
    long val = 30000;
    int i = (int)val;  // A valid cast. The maximum int is 2147483647
这表示，把强制转换的目标类型名放在要转换值之前的圆括号中。对于熟悉C的程序
员，这是类型强制转换的典型语法。对于熟悉C++类型强制转换关键字（如static_cast）的
程序员，这些关键字在C#中不存在，必须使用C风格的旧语法。
这种类型强制转换是一种比较危险的操作，即使在从long转换为int这样简单的类型强
制转换过程中，如果原来long的值比int的最大值还大，就会出现问题：
    long val = 3000000000;
    int i = (int)val;       // An invalid cast. The maximum int is 2147483647
在本例中，不会报告错误，但也得不到期望的结果。如果运行上面的代码，并将输出
结果存储在i中，则其值为：
    -1294967296
最好假定显式类型强制转换不会给出希望的结果。如前所述，C#提供了一个checked
运算符，使用它可以测试操作是否会导致算术溢出。使用checked运算符可以检查类型强
制转换是否安全，如果不安全，就要迫使运行库抛出一个溢出异常：
    long val = 3000000000;
    int i = checked((int)val);
记住，所有的显式类型强制转换都可能不安全，在应用程序中应包含代码来处理可能
失败的类型强制转换。第14章将使用try和catch语句引入结构化异常处理。
使用类型强制转换可以把大多数基本数据类型从一种类型转换为另一种类型。例如，
下面的代码给price加上0.5，再把结果强制转换为int：
    double price = 25.30;
    int approximatePrice = (int)(price + 0.5);
这会把价格四舍五入为最接近的美元数。但在这个转换过程中，小数点后面的所有数
据都会丢失。因此，如果要使用这个修改过的价格进行更多的计算，最好不要使用这种转
换；如果要输出全部计算或部分计算的近似值，且不希望由于小数点后面的多位数据而麻
烦用户，这种转换就很合适。
下面的例子说明了把无符号整数转换为char时会发生的情况：
    ushort c = 43;
    char symbol = (char)c;
    WriteLine(symbol);
输出结果是ASCII码为43的字符，即“+”符号。可以尝试数字类型（包括char）之间的
任何转换，这种转换是可行的，例如，把decimal转换为char，或把char转换为decimal。
值类型之间的转换并不仅限于孤立的变量。还可以把类型为double的数组元素转换为
类型为int的结构成员变量：
    struct ItemDetails
    {
      public string Description;
      public int ApproxPrice;
    }
    //..
    double[] Prices = { 25.30, 26.20, 27.40, 30.00 };
    ItemDetails id;
    id.Description = "Hello there.";
    id.ApproxPrice = (int)(Prices[0] + 0.5);
要把一个可空类型转换为非可空类型，或转换为另一个可空类型，并且其中可能会丢
失数据，就必须使用显式的类型强制转换。甚至在底层基本类型相同的元素之间进行转换
时，也要使用显式的类型强制转换，例如，int？转换为int，或float？转换为float。这是因
为可空类型的值可以是null，而非可空类型不能表示这个值。只要可以在两种等价的非可
空类型之间进行显式的类型强制转换，对应可空类型之间显式的类型强制转换就可以进
行。但如果从可空类型强制转换为非可空类型，且变量的值是null，就会抛出
InvalidOperationException异常。例如：
    int? a = null;
    int b = (int)a;    // Will throw exception
谨慎地使用显式的类型强制转换，就可以把简单值类型的任何实例转换为几乎任何其
他类型。但在进行显式的类型转换时有一些限制，就值类型来说，只能在数字、char类型
和enum类型之间转换。不能直接把布尔型强制转换为其他类型，也不能把其他类型转换
为布尔型。
如果需要在数字和字符串之间转换，就可以使用.NET类库中提供的一些方法。Object
类实现了一个ToString（）方法，该方法在所有的.NET预定义类型中都进行了重写，并返
回对象的字符串表示：
    int i = 10;
    string s = i.ToString();
同样，如果需要分析一个字符串，以检索一个数字或布尔值，就可以使用所有预定义
值类型都支持的Parse（）方法：
    string s = "100";
    int i = int.Parse(s);
    WriteLine(i + 50);  // Add 50 to prove it is really an int
注意，如果不能转换字符串（例如，要把字符串Hello转换为一个整数）, Parse（）方
法就会通过抛出一个异常注册一个错误。第14章将介绍异常。
8.3.2 装箱和拆箱
第2章介绍了所有类型，包括简单的预定义类型（如int和char）和复杂类型（如从
object类型中派生的类和结构）。这意味着可以像处理对象那样处理字面值：
    string s = 10.ToString();
但是，C#数据类型可以分为在栈上分配内存的值类型和在托管堆上分配内存的引用
类型。如果int不过是栈上一个4字节的值，该如何在它上面调用方法？
C#的实现方式是通过一个有点魔术性的方式，即装箱（boxing）。装箱和拆箱
（unboxing）可以把值类型转换为引用类型，并把引用类型转换回值类型。这些操作包含
在8.6节中，因为它们是基本的操作，即把值强制转换为object类型。装箱用于描述把一个
值类型转换为引用类型。运行库会为堆上的对象创建一个临时的引用类型“箱子”。
该转换可以隐式地进行，如上面的例子所述。还可以显式地进行转换：
    int myIntNumber = 20;
    object myObject = myIntNumber;
拆箱用于描述相反的过程，其中以前装箱的值类型强制转换回值类型。这里使用术
语“强制转换”，是因为这种转换是显式进行的。其语法类似于前面的显式类型转换：
    int myIntNumber = 20;
    object myObject = myIntNumber;       // Box the int
    int mySecondNumber = (int)myObject;  // Unbox it back into an int
只能对以前装箱的变量进行拆箱。当myObject不是装箱的int类型时，如果执行最后一
行代码，就会在运行期间抛出一个运行时异常。
这里有一个警告：在拆箱时必须非常小心，确保得到的值变量有足够的空间存储拆箱
的值中的所有字节。例如，C#的int类型只有32位，所以把long值（64位）拆箱为int时，
会导致抛出一个InvalidCastException异常：
    long myLongNumber = 333333423;
    object myObject = (object)myLongNumber;
    int myIntNumber = (int)myObject;
8.4 比较对象的相等性
在讨论了运算符并简要介绍了相等运算符后，就应考虑在处理类和结构的实例
时，“相等”意味着什么。理解对象相等的机制对逻辑表达式的编程非常重要，另外对实现
运算符重载和类型强制转换也非常重要，本章后面将讨论运算符重载。
对象相等的机制有所不同，这取决于比较的是引用类型（类的实例）还是值类型（基
本数据类型、结构或枚举的实例）。下面分别介绍引用类型和值类型的相等性。
8.4.1 比较引用类型的相等性
System.Object定义了3个不同的方法来比较对象的相等性：ReferenceEquals（）和两
个版本的Equals（）。再加上比较运算符（==），实际上有4种比较相等性的方法。这些
方法有一些细微的区别，下面就介绍它们。
1. ReferenceEquals（）方法
ReferenceEquals（）是一个静态方法，其测试两个引用是否指向类的同一个实例，特
别是两个引用是否包含内存中的相同地址。作为静态方法，它不能重写，所以
System.Object的实现代码保持不变。如果提供的两个引用指向同一个对象实例，则
ReferenceEquals（）总是返回true；否则就返回false。但是，它认为null等于null：
    SomeClass x, y;
    x = new SomeClass();
    y = new SomeClass();
    bool B1 = ReferenceEquals(null, null);    // returns true
    bool B2 = ReferenceEquals(null, x);        // returns false
    bool B3 = ReferenceEquals(x, y);          // returns false because x and y
                                              // point to different objects
2. Equals（）虚方法
Equals（）虚版本的System.Object实现代码也可以比较引用。但因为这是虚方法，所
以可以在自己的类中重写它，从而按值来比较对象。特别是如果希望类的实例用作字典中
的键，就需要重写这个方法，以比较相关值。否则，根据重写Object.GetHashCode（）的
方式，包含对象的字典类要么不工作，要么工作的效率非常低。在重写Equals（）方法时
要注意，重写的代码不应抛出异常。同理，这是因为如果抛出异常，字典类就会出问题，
一些在内部调用这个方法的.NET基类也可能出问题。
3．静态的Equals（）方法
Equals（）的静态版本与其虚实例版本的作用相同，其区别是静态版本带有两个参
数，并对它们进行相等性比较。这个方法可以处理两个对象中有一个是null的情况；因
此，如果一个对象可能是null，这个方法就可以抛出异常，提供额外的保护。静态重载版
本首先要检查传递给它的引用是否为null。如果它们都是null，就返回true（因为null与null
相等）。如果只有一个引用是null，它就返回false。如果两个引用实际上引用了某个对
象，它就调用Equals（）的虚实例版本。这表示在重写Equals（）的实例版本时，其效果
相当于也重写了静态版本。
4．比较运算符（==）
最好将比较运算符看作严格的值比较和严格的引用比较之间的中间选项。在大多数情
况下，下面的代码表示正在比较引用：
    bool b = (x == y);  // x, y object references
但是，如果把一些类看作值，其含义就会比较直观，这是可以接受的方法。在这些情
况下，最好重写比较运算符，以执行值的比较。后面将讨论运算符的重载，但一个明显例
子是System.String类，Microsoft重写了这个运算符，以比较字符串的内容，而不是比较它
们的引用。
8.4.2 比较值类型的相等性
在比较值类型的相等性时，采用与引用类型相同的规则：ReferenceEquals（）用于比
较引用，Equals（）用于比较值，比较运算符可以看作一个中间项。但最大的区别是值类
型需要装箱，才能把它们转换为引用，进而才能对它们执行方法。另外，Microsoft已经在
System.ValueType类中重载了实例方法Equals（），以便对值类型进行合适的相等性测
试。如果调用sA.Equals（sB），其中sA和sB是某个结构的实例，则根据sA和sB是否在其
所有的字段中包含相同的值而返回true或false。另一方面，在默认情况下，不能对自己的
结构重载“==”运算符。在表达式中使用（sA == sB）会导致一个编译错误，除非在代码中
为存在问题的结构提供了“==”的重载版本。
另外，ReferenceEquals（）在应用于值类型时总是返回false，因为为了调用这个方
法，值类型需要装箱到对象中。即使编写下面的代码：
    bool b = ReferenceEquals(v, v);  // v is a variable of some value type
也会返回false，因为在转换每个参数时，v都会被单独装箱，这意味着会得到不同的引
用。出于上述原因，调用ReferenceEquals（）来比较值类型实际上没有什么意义，所以不
能调用它。
尽管System.ValueType提供的Equals（）默认重写版本肯定足以应付绝大多数自定义
的结构，但仍可以针对自己的结构再次重写它，以提高性能。另外，如果值类型包含作为
字段的引用类型，就需要重写Equals（），以便为这些字段提供合适的语义，因为
Equals（）的默认重写版本仅比较它们的地址。
8.5 运算符重载
本节将介绍为类或结构定义的另一种类型的成员：运算符重载。C++开发人员应很熟
悉运算符重载。但是，因为这对于Java和Visual Basic开发人员来说是全新的概念，所以这
里要解释一下。C++开发人员可以直接跳到主要的运算符重载示例上。
运算符重载的关键是在对象上不能总是只调用方法或属性，有时还需要做一些其他工
作，例如对数值进行相加、相乘或逻辑操作（如比较对象）等。假定已经定义了一个表示
数学矩阵的类。在数学领域中，矩阵可以相加和相乘，就像数字一样。所以可以编写下面
的代码：
    Matrix a, b, c;
    // assume a, b and c have been initialized
    Matrix d = c ＊ (a + b);
通过重载运算符，就可以告诉编译器，“+”和“*”对Matrix对象执行什么操作，以便编
写类似于上面的代码。如果用不支持运算符重载的语言编写代码，就必须定义一个方法，
以执行这些操作。结果肯定不太直观，可能如下所示：
    Matrix d = c.Multiply(a.Add(b));
学习到现在可以知道，像“+”和“*”这样的运算符只能用于预定义的数据类型，原因很
简单：编译器知道所有常见的运算符对于这些数据类型的含义。例如，它知道如何把两个
long数据加起来，或者如何对两个double数据执行相除操作，并且可以生成合适的中间语
言代码。但在定义自己的类或结构时，必须告诉编译器：什么方法可以调用，每个实例存
储了什么字段等所有信息。同样，如果要对自定义的类使用运算符，就必须告诉编译器相
关的运算符在这个类的上下文中的含义。此时就要定义运算符的重载。
要强调的另一个问题是重载不仅仅限于算术运算符。还需要考虑比较运算符==、、! =、>=和<=。例如，考虑语句if（a==b）。对于类，这条语句在默认状态下会比较引
用a和b。检测这两个引用是否指向内存中的同一个地址，而不是检测两个实例实际上是否
包含相同的数据。对于string类，这种行为就会重写，于是比较字符串实际上就是比较每
个字符串的内容。可以对自己的类进行这样的操作。对于结构，“==”运算符在默认状态
下不做任何工作。试图比较两个结构，看看它们是否相等，就会产生一个编译错误，除非
显式地重载了“==”，告诉编译器如何进行比较。
在许多情况下，重载运算符用于生成可读性更高、更直观的代码，包括：
● 在数学领域中，几乎包括所有的数学对象：坐标、矢量、矩阵、张量和函数等。如
果编写一个程序执行某些数学或物理建模，就几乎肯定会用类表示这些对象。
● 图形程序在计算屏幕上的位置时，也使用与数学或坐标相关的对象。
● 表示大量金钱的类（例如，在财务程序中）。
● 字处理或文本分析程序也有表示语句、子句等方面的类，可以使用运算符合并语句
（这是字符串连接的一种比较复杂的版本）。
但是，也有许多类型与运算符重载并不相关。不恰当地使用运算符重载，会使使用类
型的代码更难理解。例如，把两个DateTime对象相乘，在概念上没有任何意义。
8.5.1 运算符的工作方式
为了理解运算符是如何重载的，考虑一下在编译器遇到运算符时会发生什么情况就很
有用。用加法运算符（+）作为例子，假定编译器处理下面的代码：
    int myInteger = 3;
    uint myUnsignedInt = 2;
    double myDouble = 4.0;
    long myLong = myInteger + myUnsignedInt;
    double myOtherDouble = myDouble + myInteger;
考虑当编译器遇到下面这行代码时会发生什么情况：
    long myLong = myInteger + myUnsignedInt;
编译器知道它需要把两个整数加起来，并把结果赋予一个long型变量。调用一个方法
把数字加在一起时，表达式myInteger + myUnsignedInt是一种非常直观和方便的语法。该
方法接受两个参数myInteger和myUnsignedInt，并返回它们的和。所以编译器完成的任务
与任何方法调用一样——它会根据参数类型查找最匹配的“+”运算符重载，这里是带两个
整数参数的“+”运算符重载。与一般的重载方法一样，预定义的返回类型不会因为编译器