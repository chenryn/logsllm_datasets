segment of the account, and whether the eth.getCode function returns any data.
Although the code segment of a smart contract can be null, in that case, it is no
---
## Page 635
8.2 Examples of Smart Contract Topics in Ethereum
623
different from a personal account except that it cannot send transactions, and we can
ignore such meaningless accounts.
pg o, a Supne q ueqo aeaud s uo senoo e pug ueo am *nsan e sy
of all transactions (when the “to" field is empty, it means contract creation), and then
filter all contracts created by the organizer by setting the from field. In this challenge,
the miner field of the first few blocks the miner’s account that packaged the block)
represents the organizer's account.
By checking all transactions, we can only find one contract address, but there are
actually three contracts. That is beacuase, individual accounts can create smart
contracts, and smart contracts can also create smart contracts.
For the details of opcode, please refer to the official yellow paper.
https://github.com/yuange1024/ethereum_yellowpaper
To better explain the knowledge involved in the challenge, here is a reference source
code to explain the challenge.
https:/github.com/Hcamael/ethre_source/blob/master/hctf2018.sol
A contract can be created in a contract at the Solidity level with “new
HCTF2018User )” and opcode uses the CREATE instruction to create the contract.
The addressofthe smart contract created in the contract is calculated inthe same way
as above.
It is recommended to use a disassembler to reverse the opcode. In the meantime,
the reader can use Remix for debugging to make the reverse process less difficult.
Start geth with the following parameters to enable RPC.
0°0*o*0 xppeodx-- od.x-- a+a uTewopsxooodx--
Select “Web3 Provider" in “Environment”" of the “Deploy & run transactions" tab
of Remix, and fll in the address of RPC. Then, fill in the “Debugger" tab with the
transaction to be debugged, and you can start debugging. The debugger tracks the
CREATE instruction to the debugger, and the retum value is the address of the
created contract.
The following is an explanation of the structure of some opcodes compiled by
Remix under normal circumstances. There are two types of opcode compiled by
Remix: CREATE opcode and RUNTIME opcode. The data field in the transaction
that creates the contract is CREATE opcode, which is structured as a constructor +
returning RUNTIME opcode. Generally, there is an EVM (Ethernet Virtual
Machine) built into the Ethernet program to execute the opcodes. How do we get
the value from the eth.getCode function? First, it look for the contract creation
transaction for the specified contract, then execute the CREATE Opcode in the
data field of the transaction, and the return value is what eth.getCode gets. This
content is called the RUNTIME opcode and has its own data structure.
First, the compiler performs a SHA3 hash calculation for each public function,
taking the first 4 bytes of the hash value, such as.
---
## Page 636
624
8  Smart Contracts
function win_money (} public (-.... - )
>>> sha3 keccak_256 (b*win_money () ") . hexdigest (1 [:8]
function addContract (uint [] _data) public ( ----- )
'031c62e3'
>>> sha3 keccak_256 (b"addContract (uint256 []) *) .hexdigest () [: 8]
17090240d'
Since uint/int is an alias for uint256/int256, uint/int is converted to uint256/int256
for hash calculation. The calculated hash value of each function is compared to the
first 4 bytes of the incoming argument to determine which function is being called.
As a result, the normal RUNTIME opcode begins with a fixed structure with the
following pseudocode.
def main () :
if CALLDATASIZE >= 4 :
data = CALLDATA[ : 4]
if data == 0x6b59084d:
{1 [459
else :
jump fa11back
fallback:
function (1 {) or raise
Functions without a function name, such as “function O ()", which can be seen in
smart contracts, are called fallback functions and are called when the data field in the
transaction invoking the smart contract is empty or the first 4 bytes don’t match any
of the function's hash values.
After determining which function to call, there are two more fixed structures:
when the payable keyword does not exist in the declaration of the function, it means
that the contract does not accept transfer, so in the opcode, it is necessary to judge
whether the *value field of this transaction is O. If it is not O, an exception is thrown
and the transaction is rolled back (the transaction sender gets a full refund); if the
payable keyword exists, there is no such judgment structure. After the payable
keyword is checked, it is the section that accepts the parameter. If the parameters
do not exist, it jumps directly to the next code block, and if it exists, it gets the
parameters according to their types and locations.
Parameters exist in the data field of the transaction, after the 4-byte function hash
value, starting from the 5th byte, 32 bytes aligned, in order. But the arrays are
special, which stores the offset and length in order and then geing the parameter
values. The structure of the arrays is as follows.
} 6xeAexxe qonxs
uint offset;
uint length;
---
## Page 637
8.2 Examples of Smart Contract Topics in Etheresum
625
Next, we introduce data storage: the EVM has only code segments, the stack, and
storage; the stack temporarily stores data, and its life cycle is from the start of the
code segment to the end of the segment; while storage is used to store data
persistently which is similar to a computer's hard drive.
We can get the storage data of the corresponding contract through the console
function.
> eth.getStorageAt (contract address, offset)
The most important thing is the calculation of the offset. Normal fixed-length
variables such as uint256, address, uint8 are listed in the order in which they are
defined, with the first fixed-length variable defined with an offset of O, the second
with an offset of 1, and so on. Complex in-length variables, such as mapping is as
follows:
mapping (address => uint) a;
offset = sha3 (key .zjust (64, "o#) + s1ot .rjust (64, *o*))
Offsets are determined by the keys and the order in which the variables are
defined, which ensures that the stored offsets are unique and the values between
two different mapping variables do not intersect.
While arrays use another kind of storage structure.
uint[] b;
offset = sha3 (s1ot .zjust (64, "o")) + index
The data structure of arrays is vulnerable in that it only guarantees the uniqueness
of the storage start offset. Index is of type uint256, which can cause variable
overwriting problems if the length is not restricted. However, in the newer versions
of the compiler, the data in the array slot offset storage (Storage[slot]) represents the
length of the array, and the index is checked against the length when the array is
accessed, thus avoiding the problem of variable overwriting.
Note that not all function calls are required to send a transaction, generally only
when modifying the storage value or other operations that affect the blockchain
(such as creating a contract). Others, such as functions that get the storage value, can
be called directly from EVM.
function test1 (1 constant public returns (address){
return owner ;
# call test1
> eth.ca11 ({to: "contract address", data: "0x6b59084d"})
• 0×0000000000000000000000000000000000000
0000000000000000000000000*
---
## Page 638
626
8 Smart Contract
Now we back to our ethre challenge. The next step in this challenge is to find out
the other two contracts and then reverse them. As you can see from the source code,
they are not particularly complex contracts.
Other smart contracts can be called in a smart contract, but it has a special
meaning when the address of the smart contract is 1 to 8, which is called Precompile
in the official documentation, and this challenge performs RSA cryptography with
call(4) and call(5):
m(modn)
The final solution to this challenge is to store a given value at a particular location, let
the server get the value at the given location, compare it with the expected result, and
then return the flag if successful.
With the smart contract source code available, this challenge is a very easy
challenge. The origin challenge examines the participant's ability to reverse the
smart contract opcode.
8.3 Summary
In the current CTF competition, smart contract challenges cannot be made very
difficult, and the general category is as follows.
The first type of challenge is those with Solidity source code, which are of limited
difficulty. The complexity increases with the amount of code, which at most
increases the time spent on the challenge instead of increasing the difficulty.
The second type is source-less reverse opcode challenges, which are similar to
regular binary reverse challenges, and the difficulty of these challenges can be
increased by using handwriting opcode and adding obfuscation. Besides, most of
the challenges are related to the latest blockchain news and vulnerabilities.
Because of the blockchain's P2P architecture, anyone on the blockchain is a
client, and except for the private key of a person's account, which is secret, all
other information is public and transparent, which leads to the situation that when a
participant solves a challenge, other contestants can observe the transaction history
of the solution, which greatly decreases the difficulty of solving the challenge. How
to make it impossible for a participant who did not solve the challenge to reproduce
the solution through the transaction records is something that organizers need to be
aware of. Similarly, there is no way to hide data on the blockchain, private variables
can be obtained directly from eth.getStorage. Private functions can be obtained
through reversing opcode. These are the difficulties of develop smart contract
challenges in CTF.
---
## Page 639
Chapter9
Misc
Misc (Miscellaneous) generally refers to challenges in CTF that cannot be classified
as Web, PWN, Crypto, or Reverse. Of course, additional classifications exist in a few
CTF competitions, but Misc is a hodgepodge of all sorts of challenges. Although the
types of Misc challenges are vast and the scope of investigation extremely broad, we
- os d srone ale o uo Supudo won ssep Apeoq ues
lenges can be divided into the following categories.
1. to involve the participants
This is the case with the check-in challenges that are common in all CTFs. This type
of challenge does not test a lot of knowledge of the participants, but rather is more
entertaining, to make the participants participate and feel the fun of CTF. Typical
examples are check-in challenges (e.g., response some keywords to a specific
WeChat public account) or games where you can get flags by playing through the
levels.
2. examine knowledge that is often used in the security field but does not belong to
traditional classifications
Although Web, PWN, and other types of challenges usually account for a larger
 ns ea on qu e s s adsaqo u sa  u uodod
content security, security operations, network programming, etc., and challenges in
these directions offen appear in Misc. These types of challenges are the most
frequent in Misc, and the representative types are traffic packet analysis, compressed
archive analysis, image/audio/video steganography, memory or hard disk forensics,
and programming challenges, etc.
3. examine the ability to think outside the box
This type of challenge is the so-called “brain teaser", which is mainly based on
encoding and decoding, providing participants with a text that has been encoded and
transformed several times, and then asking them to guess the algorithm used and the
order of the transformations to finally solve the plain-text flag. The participants have
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
627
Nu1L Team, Handbook for CTFers,
htps:/doi.org/10.1007/978-981-19-0336-6_9
---
## Page 640
628
9 Misc
had to rely on their own experience and conjecture to solve a challenge, and it’s a test
not only for the participants but also for the challenge author.
4. examine the breadth and depth of the participants° knowledge.
This type of challenge is close to the traditional Hacker spirit which finding
something different in the common things. They often start with files, programs,
or devices that are commonly used in everyday life, such as Word documents, shell
scripts, or smart IC cards, and look for a deeper understanding of these common
things, such as restoring a MySQL database as much as possible from an incomplete
Seue o xoes usg/uo aaosa usao  ussq aty 
data from smart cards. Sometimes these challenges involve some computer science
or engineering expertise, such as digital signal processing, digital circuits, etc. These
challenges are often the most difficult ones in the Misc category, but the knowledge
and experience gained from solving them are also the most valuable.
5. examine the ability to learn quickly
These challenges are similar to the previous ones, but the technical knowledge tested
is less general, even no one would normally use them. For example, one challenge in
the 2018 Plaid CTF examines a programming language called APL, which is a very
old, obscure, and difficult programming language that requires the use of many
special symbols when programming. However, if the participant can understand the
logic of the given APL code, the ffag can be easily solved. This kind of challenge
requires a high level of information acquisition and absorption ability, so keep in
mind that search engines are your best companions when solving these challenges.
Although there are many different types of Misc challenges, it is one of the most
accessible CTF challenge types for beginners, examines the basics of each area, and
is an excellent material for developing an interest in information security technology.
Due to space limitations, this chapter will cover some of the most representative of
these types of challenges, namely steganography, packet analysis, and forensics.
9.1Steganography
9.1.1FileConcentration
Most files have a fixed file structure, and comon image fomats such as PNG, JPG,
etc. are composed of a specific set of data blocks.
For example, a PNG ile consists of four standard data blocks  IHDR (Image
Header Data Block), PLTE (Palette Data Block), IDAT (Image Data Block), and
IEND (Image End Data Block)  and several auxiliary data blocks. Each data block
consists of four parts: Length, Chunk Type Code, Chunk Data, and CRC (Cyclic
Redundancy Check Code).
A PNG file always starts with a fixed sequence of bytes (89 50 4E 47 0D 0A 1A
OA), and we can generally identify the file as a PNG file based on this. The Image
---
## Page 641
9.1 Steganograpby
629
A
Fig, 9.1 Open image use Photos
Fig, 9.2 PNG image header
1E00h:4E 44AE 426082
CBx*.....IE
ND8B'
Fig, 9.3 PNG image footer
1DP0h:E7 BF CA D7 F2 27 FA 18 40 A1 00 00 00 00 49 45
1800h1
4 44 AE 42 60 82 00 4845 4C 4C 4F20 57 47 52
C.ExO.0.81....IE
1810h:4C 44
LD
Fig, 9.4  Ad anything to the end of the file
End Data Block IEND is used to mark the end of the PNG file. the length of the
IEND data block is always 00 00 00 00 and the chunk type code is always 49 45 4E
44, so the CRC is fixed to AE 42 60 82. therefore, a typical PNG file starts with a
fixed sequence of bytes 00 00 00 00 49 45 4E 44 AE 42 60 82. The following content
will be ignored by most image viewing software, so you can add additional content
after the IEND data block without affecting the image viewing, and the added
content will not be detected under normal circumstances.
se °sonoud, samaia aie smopum Susn  uado pue aae DNd e poas
shown in Fig. 9.1. Open the PNG image with a binary editor and observe the header
and footer, as shown in Figs. 9.2 and 9.3.
You can add anything you want to the end of the file (see Fig. 9.4), such as adding
the character *HELLO WORLD" directly to the end of the file. Still open the file
with *Photos" (see Fig. 9.5), and find that there is no change from before the changes
(see Fig. 9.1), the “HELLO WORLD" just added will not change the appearance of
the picture.
Not only the characters, but we can even add entire other files to the image
mtA oe aq u sosueqo ue Saas 1nom
---
## Page 642
630
9Misc
Fig, 9.5 Open image use Photos
1D80h:08 22 FC 00 10 44 F8 01 20 88 F0 03 40 8C FF FC
1DF0h:E7 BF CA D7 F2 27 FA 18 40 A1 00 00 00 00 49 45
.*..De.o.eeyu
1500h:
4E 44AE 42 60 82 504B0304 140000000800
CEx'0.8:....IE
-pONqg,±V...mv..
NDBB*,PK........
Fig, 9.6 The binary content of a ZIP file attached to the end of a PNG image
To separate the files attached to an image, you can determine the type of file
rq  u podu uogeou pe y o e uoo q e a o pqoee
Some common file header and file end will be introduced in the following list.
• JPEG (jpg): File header, FF D8 FF; End of the file, FF D9.
•PNG (png): file header, 89 50 4E 47; End of file, AE 42 60 82.
GIF (gif): file header, 47 49 46 38; End of file, 00 3B.
▪ZIP Archive (zip): file header, 50 4B 03 04; End of file, 50 4B.
•RAR Archive (rar), file header: 52 61 72 21.
•Wave (wav): file header, 57 41 56 45.
AVI (avi): file header, 41 56 49 20.
•MPEG (mpg): file header, 00 00 01 BA.
* MPEG (mpg): fle header, 00 00 01 B3.
▪Quicktime (mov): file header, 6D 6F 6F 76.
Binwalk is often used in CTF to extract other files from an image. Binwalk is an
open-source firmware analysis tool that can identify or extract various types of files
that appear in firmware based on some of their characteristics. Binwalk is often used
in CTF to extract other files from one file, such as the binary content of a ZIP file
attached to the end of a PNG image, see Fig. 9.6.
Binwalk can automatically analyze multiple files contained in a file and extract
them, see Fig. 9.7.
---
## Page 643
9.1Steganograpby
631
DESCRSPT10N
,1eest v2.0 to
ed size: 5
Fig, 9.7 Use binwalk extract image
APP1 Marke
S55s
APPI DutsSixe
45786966 9090
79492.A3009000000/4d4d00Ca000
[ Ilada(Litle adia) /T Ileade(lBi hndas)
XxxXxx
LLLLLILL
IFD0 (mzin imegx)
Liak to IID1
XXXx.
XXXX.
EsifSubED
Esd ofLirk
XXXx.
Dala ares of Exi SeHFD
XXXX.
APPI Dte
Deedrey
00000000
Esd ofLirk
XXx.
Datx sres of Ietaoperabliy IFD
xXXXx.
Diedey
00
Makzrmote IFD
End ofLik
xXXx.
xXXx.
Dietdiey
00000000
Esd ofLisk
XXXX.
Daa sresof IFDI
FFDXXXXX..XXXFD9
Fig, 9.8 EXIF information
9.1.2 EXIF
EXIF (Exchangeable Image File Format) can be used to record property information
and capture data for digital photos and can be attached to JPEG, TIFF, RIFF, etc.
files to add content about the information captured by the digital camera, thumbnails,
os Sussaod se po uoou tosin sos so
Select a sample image (in JPEG format) that comes with Windows, and view its
properties by right-clicking on it, where information such as author, shooting date,
copyright, etc. is stored.
---
## Page 644
632
9Misc
:40100
0o0oh:
TD8B000104A46494600010201006090.JP1..
0020h:
00600000EFBE000E41646F6265006400
00000001
TFB100PE4578696600004D4D
."..gl..Adobe.d.