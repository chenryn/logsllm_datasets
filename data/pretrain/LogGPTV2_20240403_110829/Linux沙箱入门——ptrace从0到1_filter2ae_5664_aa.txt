# Linux沙箱入门——ptrace从0到1
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言：
本文是在linux系统角度下，对ptrace反调试进行底层分析，使我们更清楚的看到一些底层原理的实现，更好的理解在逆向工程中的一些突破口，病毒怎么实现代码注入，本文还将列出一些常见的攻防手段，分析其原理，让我们一同见证见证茅与盾激情对决！
## 什么是ptrace？
如果了解过逆向工程的小伙伴，肯定对这个ptrace不陌生，因为这是反调试技术中的基础入门手段，虽然现在诸如代码虚拟化之类的其他防逆向技术已经很成熟了，但是ptrace仍然是一些商业软件产品中使用，也是我们入门反调试所必须的基础技术！
ptrace在linux 反调试技术中的地位就如同nc在安全界的地位，瑞士军刀啊!
ptrace使用场景：
  1. 编写动态分析工具，如gdb,strace
  2. 反追踪，一个进程只能被一个进程追踪( _注：一个进程能同时追踪多个进程_ )，若此进程已被追踪，其他基于ptrace的追踪器将无法再追踪此进程，更进一步可以实现子母进程双线执行动态解密代码等更高级的反分析技术
  3. 代码注入，往其他进程里注入代码。
  4. 不退出进程，进行在线升级。
###  简介：
Ptrace 可以让父进程控制子进程运行，并可以检查和改变子进程的核心image的功能（Peek and poke
在系统编程中是很知名的叫法，指的是直接读写内存内容）。ptrace主要跟踪的是进程运行时的状态，直到收到一个终止信号结束进程，这里的信号如果是我们给程序设置的断点，则进程被中止，并且通知其父进程，在进程中止的状态下，进程的内存空间可以被读写。当然父进程还可以使子进程继续执行，并选择是否忽略引起中止的信号，ptrace可以让一个进程监视和控制另一个进程的执行,并且修改被监视进程的内存、寄存器等,主要应用于断点调试和系统调用跟踪，strace和gdb工具就是基于ptrace编写的！
ptrace()其实是linux的一种系统调用，所以当我们用gdb进行attach其他进程的时候，需要root权限。
###  基本原理：
在Linux系统中，进程状态除了我们所熟知的TASK_RUNNING，TASK_INTERRUPTIBLE，TASK_STOPPED等，还有一个TASK_TRACED，而TASK_TRACED将调试程序断点成为可能。
  1. **R (TASK_RUNNING)，可执行状态。**
  2. **S (TASK_INTERRUPTIBLE)，可中断的睡眠状态。**
  3. **D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态。**
  4. **T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态。**
当使用了ptrace跟踪后，所有发送给被跟踪的子进程的信号(除了SIGKILL)，都会被转发给父进程，而子进程则会被阻塞，这时子进程的状态就会被系统标注为TASK_TRACED，而父进程收到信号后，就可以对停止下来的子进程进行检查和修改，然后让子进程继续运行。
####  那么什么是进程信号？
一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的事件，信号是多种多样的，并且一个信号对应一个事件，这样才能做到当进程收到一个信号后，知道到底是一个什么事件，应该如何处理（但是要保证必须识别这个信号），个人理解信号就是操作系统跟进程沟通的一个有特殊含义的语句吧
我们可以直接通过kill -l 来查看信息的种类
一共62种，其中1~31是非可靠信号，34~64是可靠信号(非可靠信号是早期Unix系统中的信号，后来又添加了可靠信号方便用户自定义信号，这二者之间具体的区别在下文中会提到)
####  ptrace函数的定义
    #include        
    long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data);
一共有四个参数：
  * `request`: 表示要执行的操作类型。//反调试会用到`PT_DENY_ATTACH`，调试会用到`PTRACE_ATTACH`
  * `pid`: 要操作的目标进程ID
  * `addr`: 要监控的目标内存地址
  * `data`: 保存读取出或者要写入的数据详情请参看man手册
####  ptrace函数的内核实现：
ptrace的内核实现在`kernel/ptrace.c`文件中，直接看内核接口是SYSCALL_DEFINE4(ptrace, long,
request, long, pid, unsigned long, addr, unsigned long, data)，代码如下：
    SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr,unsigned long, data)
    {
            struct task_struct *child;
            long ret;
            if (request == PTRACE_TRACEME)
            {
                ret = ptrace_traceme();
                if (!ret)
                    arch_ptrace_attach(current);
                    goto out;
            }
            child = ptrace_get_task_struct(pid);
            if (IS_ERR(child))
            {
                ret = PTR_ERR(child);
                goto out;
            }
            if (request == PTRACE_ATTACH || request == PTRACE_SEIZE) {
                ret = ptrace_attach(child, request, addr, data);
                /*
                 * Some architectures need to do book-keeping after
                 * a ptrace attach.
                 */
                if (!ret)
                    arch_ptrace_attach(child);
                goto out_put_task_struct;
            }
            ret = ptrace_check_attach(child, request == PTRACE_KILL ||request == PTRACE_INTERRUPT);
            if (ret 
> 假设用name表示系统调用的名称，那么系统调用号与系统调用响应函数的关系是：以系统调用号`_NR_name`作为下标，可找出系统调用表`sys_call_table`(见`arch/i386/kernel/entry.S`)中对应表项的内容，它正好是该系统调用的响应函数`sys_name`的入口地址。
`execl()`函数对应的系统调用为`__NR_execve`，系统调用值为59。
我们来仔细看看库函数execve调用链：
####  ptrace调试示例：
    #include/*引入wait函数的头文件*/
    #include/* 对寄存器的常量值进行定义，如Eax，EBX....... */
    #include/*gdb调试专用文件，里面有定义好的各种数据类型*/
    #include/*引入prtace头文件*/
    #include/*引入fork函数的头文件*/
    #include /* SYS_write */
    #include
    int main() {
        pid_t child;/*定义子进程变量*/
        long orig_rax;//定义rax寄存器的值的变量
        int status;/*定义进程状态变量*/
        int iscalling = 0;/*判断是否正在被调用*/
        struct user_regs_struct regs;/*定义寄存器结构体数据类型*/
        child = fork();/*利用fork函数创建子进程*/
        if(child == 0) 
        {
            ptrace(PTRACE_TRACEME, 0, 0);//发送信号给父进程表示已做好准备被跟踪（调试）
            execl("/bin/ls", "ls", "-l", "-h", NULL);/*执行命令ls -l -h,注意，这里函数参数必须要要以NULL结尾来终止参数列表*/
        }
        else
        {
            while(1)
            {
                wait(&status);//等待子进程发来信号或者子进程退出
                if(WIFEXITED(status))//WIFEXITED函数(宏)用来检查子进程是被ptrace暂停的还是准备退出
                {
                    break;
                }
                orig_rax = ptrace(PTRACE_PEEKUSER, child, 8 * ORIG_RAX, 0);//获取rax值从而判断将要执行的系统调用号
                if(orig_rax == SYS_write)//如果系统调用是write
                {    
                    ptrace(PTRACE_GETREGS, child, 0, &regs);
                    if(!iscalling)
                    {
                        iscalling = 1;
                        printf("SYS_write call with %lld, %lld, %lld\n",regs.rdi, regs.rsi, regs.rdx);//打印出系统调用write的各个参数内容
                    }
                    else
                    {
                        printf("SYS_write call return %lld\n", regs.rax);//打印出系统调用write函数结果的返回值
                        iscalling = 0;
                    }
                }
                ptrace(PTRACE_SYSCALL, child, 0, 0);//PTRACE_SYSCALL,其作用是使内核在子进程进入和退出系统调用时都将其暂停
                //得到处于本次调用之后下次调用之前的状态
            }
        }
        return 0;
    }
运行结果如下：
在这个简单的c程序中，我们跟踪了excel()函数的执行状态，并把打印出相应执行中的一些寄存器的值，返回值等，当然这只是ptrace的部分功能，ptrace能做到的事情还有更多，比如还能修改内存，修改寄存器的值，插入字节码实现下断点的功能。
###  2.反调试
我们直接通过攻防来学习ptrace反调试的应用
####  1.直接使用ptrace函数：