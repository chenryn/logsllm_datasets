[github]
client="3dd44b969709c518603c"
secret="4ee261abdb431bdc5e96b19cc3c498403853632a"
# orgs=[]
# open=false
```
![Configuring Github Drone](/data/attachment/album/201604/17/083246eqoauwqoemeeinut.png)
### 6. 配置 SMTP 服务器
如果我们想让 drone 使用 email 发送通知，那么我们需要在 SMTP 配置里面设置我们的 SMTP 服务器。如果我们已经有了一个 SMTP 服务，那就只需要简单的使用它的配置文件就行了，但是因为我们没有一个 SMTP 服务器，我们需要安装一个 MTA 比如 Postfix，然后在 drone 配置文件里配置好 SMTP。
#### Ubuntu
在 ubuntu 里使用下面的 apt 命令安装 postfix。
```
# apt-get install postfix
```
#### CentOS
在 CentOS 里使用下面的 yum 命令安装 postfix。
```
# yum install postfix
```
安装好之后，我们需要编辑我们的 postfix 配置文件。
```
# nano /etc/postfix/main.cf
```
然后我们要把 myhostname 的值替换为我们自己的 FQDN，比如 drone.linoxide.com。
```
myhostname = drone.linoxide.com
```
现在开始配置 drone 配置文件里的 SMTP 部分。
```
# nano /etc/drone/drone.toml
```
找到`[smtp]` 部分补充上下面的内容。
```
[smtp]
host = "drone.linoxide.com"
port = "587"
from = "PI:EMAIL"
user = "root"
pass = "password"
```
![Configuring SMTP Drone](/data/attachment/album/201604/17/083246piirni6676p1ippr.png)
注意：这里的 **user** 和 **pass** 参数强烈推荐一定要改成某个具体用户的配置。
### 7. 配置 Worker
如我们所知的 drone 利用了 docker 完成构建、测试任务，我们需要把 docker 配置为 drone 的 worker。要完成这些需要修改 drone 配置文件里的`[worker]` 部分。
```
# nano /etc/drone/drone.toml
```
然后取消底下几行的注释并且补充上下面的内容。
```
[worker]
nodes=[
"unix:///var/run/docker.sock",
"unix:///var/run/docker.sock"
]
```
这里我们只设置了两个节点，这意味着上面的配置文件只能同时执行2 个构建操作。要提高并发性可以增大节点的值。
```
[worker]
nodes=[
"unix:///var/run/docker.sock",
"unix:///var/run/docker.sock",
"unix:///var/run/docker.sock",
"unix:///var/run/docker.sock"
]
```
使用上面的配置文件 drone 被配置为使用本地的 docker 守护程序可以同时构建4个任务。
### 8. 重启 Drone
最后，当所有的安装和配置都准备好之后，我们现在要在本地的 linux 机器上启动 drone 服务器。
#### Ubuntu
因为 ubuntu 14.04 使用了 sysvinit 作为默认的初始化系统，所以只需要简单执行下面的 service 命令就可以启动 drone 了。
```
# service drone restart
```
要让 drone 在系统启动时也自动运行，需要运行下面的命令。
```
# update-rc.d drone defaults
```
#### CentOS
因为 CentOS 7使用 systemd 作为初始化系统，所以只需要运行下面的 systemd 命令就可以重启 drone。
```
# systemctl restart drone
```
要让 drone 自动运行只需要运行下面的命令。
```
# systemctl enable drone
```
### 9. 添加防火墙例外规则
众所周知 drone 默认使用了80 端口而我们又没有修改它，所以我们需要配置防火墙程序允许80 端口（http）开放并允许其他机器可以通过网络连接。
#### Ubuntu 14.04
iptables 是最流行的防火墙程序，并且 ubuntu 默认安装了它。我们需要修改 iptable 以暴露端口80，这样我们才能让 drone 的 web 界面在网络上被大家访问。
```
# iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
# /etc/init.d/iptables save
```
#### CentOS 7
因为 CentOS 7 默认安装了 systemd，它使用 firewalld 作为防火墙程序。为了在 firewalld 上打开80端口（http 服务），我们需要执行下面的命令。
```
# firewall-cmd --permanent --add-service=http
success
# firewall-cmd --reload
success
```
### 10. 访问 web 界面
现在我们将在我们最喜欢的浏览器上通过 web 界面打开 drone。要完成这些我们要把浏览器指向运行 drone 的服务器。因为 drone 默认使用80 端口而我们有没有修改过，所以我们只需要在浏览器里根据我们的配置输入`http://ip-address/` 或 `http://drone.linoxide.com` 就行了。在我们正确的完成了上述操作后，我们就可以看到登录界面了。
![Login Github Drone](/data/attachment/album/201604/17/083246snkpvi67kxvxk8il.png)
因为在上面的步骤里配置了 Github，我们现在只需要简单的选择 github 然后进入应用授权步骤，这些完成后我们就可以进入工作台了。
![Drone Dashboard](/data/attachment/album/201604/17/083247h9unlpl55zl99pu1.png)
这里它会同步我们在 github 上的代码库，然后询问我们要在 drone 上构建那个代码库。
![Activate Repository](/data/attachment/album/201604/17/083247kawasxc5qqwhz3a5.png)
这一步完成后，它会询问我们在代码库里添加`.drone.yml` 文件的新名称，并且在这个文件里定义构建的过程和配置项，比如使用那个 docker 镜像，执行那些命令和脚本来编译，等等。
我们按照下面的内容来配置我们的`.drone.yml`。
```
image: python
script:
 - python helloworld.py
 - echo "Build has been completed."
```
这一步完成后我们就可以使用 drone 应用里的 YAML 格式的配置文件来构建我们的应用了。所有对代码库的提交和改变此时都会同步到这个仓库。一旦提交完成了，drone 就会自动开始构建。
![Building Application Drone](/data/attachment/album/201604/17/083248drz8o8005ht1oa85.png)
所有操作都完成后，我们就能在终端看到构建的结果了。
![Build Success Drone](/data/attachment/album/201604/17/083248gug4esx0rbworp32.png)
### 总结
在本文中我们学习了如何安装一个可以工作的使用 drone 的持续集成平台。如果我们愿意我们甚至可以从 drone.io 官方提供的服务开始工作。我们可以根据自己的需求从免费的服务或者收费服务开始。它通过漂亮的 web 界面和强大的功能改变了持续集成的世界。它可以集成很多第三方应用和部署平台。如果你有任何问题、建议可以直接反馈给我们，谢谢。
---
via: 
作者：[Arun Pyasi](http://linoxide.com/author/arunp/) 译者：[ezio](https://github.com/oska874) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出