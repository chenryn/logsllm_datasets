allocator reduces ASLR entropy, this is irrelevant as our MVX
security guarantees are stronger, and not ASLR-dependent.
VI. LIMITATIONS
following limitations:
At the time of writing, our MvArmor prototype has the
• MvArmor’s custom allocator is subject to Dune’s restric-
tions on the maximum per-process virtual memory size,
which currently requires relaxing the size restrictions
on inter-slab padding (and thus security) in memory-
intensive applications.
• While MvArmor can protect generic heap objects,
it
cannot decouple intra-struct buffers or chunks managed
by custom memory allocators within each object without
source-level information, a limitation fundamental to all
the binary-level heap hardening solutions [51].
2https://github.com/gburd/libumem
437
• While MvArmor’s MVX library supports threading sim-
ilar to recent MVX solutions [22], it cannot currently
run multi-threaded applications. Extending our current
MvArmor prototype to support arbitrary multi-threaded
applications faces two challenges: (i) supporting thread
safety in Dune (currently thread-unsafe), and, when be-
nign data races are present (i.e., threads synchronizing
without syscalls such as futex), (ii) preserving correct
MVX semantics with a more strict form of DMT.
VII. EVALUATION
We evaluated MvArmor on a workstation with an Intel i7-
3770 quadcore CPU clocked at 3.4 GHz and 16 GB of RAM.
We disabled hyperthreading to eliminate (large) ﬂuctuations in
our test results. We ran all our experiments on a Debian 8.0
system, running a Linux kernel 3.2 (x86 64).
For our evaluation, we considered a number of popular
server programs, which are heavily exposed to remote attacks
(and thus would greatly beneﬁt from the security guaran-
tees provided by MvArmor) and have also been extensively
benchmarked in prior work. In particular, we selected nginx
(v0.8.54),
lighttpd (v1.4.28), bind (v9.9.3), and beanstalkd
(v1.10) for our experiments. We benchmarked bind, a popular
name server, using the queryperf benchmark issuing 500,000
requests with 20 (default) threads. We benchmarked nginx
and lighttpd, both high-performance web servers, using the
wrk benchmark issuing 10 seconds worth of requests for a
4 KB page over 10 concurrent connections. We benchmarked
beanstalkd, a work queue, with the beanstalkd benchmark
issuing 100,000 push operations per worker over 10 concurrent
connections and 256 bytes of data. To directly compare against
Varan [22] (by far the fastest, but not security-oriented, state-
of-the-art MVX solution), we adopted the same benchmark
conﬁgurations (wrk and beanstalkd) considered in [22]—only
increasing the number of push operations in the beanstalkd
benchmark by a factor of 10 to ensure a sufﬁcient benchmark
duration (i.e., 10-20 seconds).
We also evaluated MvArmor on microbenchmarks and on
the SPEC CPU2006 benchmark suite, focusing our experi-
ments on the CINT2006 benchmarks to reﬂect the conﬁgu-
ration considered in [22] and provide comparative results. We
ran all our experiments 11 times and report the median (with
small standard deviation across runs). We report results for
our default MvArmor conﬁguration using a 10-element ring
buffer (allowing the leader to execute 10 syscalls ahead of
followers), but we observed similar results when moderately
increasing/decreasing the ring buffer size. Unless otherwise
noted, our experiments use the variant generation strategy from
Sec. V: the leader uses the default (randomized) allocator,
whereas each follower uses the modiﬁed libumem allocator.
A. Server Performance
To evaluate MvArmor’s performance on our server pro-
grams, we ﬁrst attempted to reproduce the over-the-network
conﬁguration described in [22], placing the client on a dedi-
cated machine on the same rack as the server machine, with
the 2 machines connected by a 1 Gbit/s ethernet link. In our
setup, this conﬁguration was insufﬁcient to effectively saturate
the server, reporting only marginal performance impact across
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:38:26 UTC from IEEE Xplore.  Restrictions apply. 
)
d
e
z
i
l
a
m
r
o
n
(
d
a
e
h
r
e
v
o
e
m
i
t
-
n
u
R
4
3
2
1
1 2 3 4
2
2
.
2
9
3
.
1
1
4
.
1
4
.
1
3
3
.
2
9
7
.
1
6
6
.
1
7
.
1
6
2
.
3
9
2
.
2
4
6
.
1
4
1
.
1
6
1
.
1
6
1
.
1
3
3
.
1
4
.
1
2
4
.
1
6
4
.
1
9
4
.
1
1
5
.
1
nginx
lighttpd
bind
beanstalkd
geomean
)
d
e
z
i
l
a
m
r
o
n
(
d
a
e
h
r
e
v
o
e
m
i
t
-
n
u
R
4
3
2
1
1 2 3 4
9
2
.
2
2
4
.
1
5
4
.
1
4
.
1
4
4
.
2
3
9
.
1
4
8
.
1
1
7
.
1
5
3
.
3
7
3
.
2
8
6
.
1
2
1
.
1
4
1
.
1
5
1
.
1
3
5
.
1
5
5
.
1
6
3
.
1
6
4
.
1
9
4
.
1
8
3
.
1
nginx
lighttpd
bind
beanstalkd
geomean
Fig. 4. Overhead using the Code execution security policy for increasing
number of variants.
Fig. 6.
increasing number of variants.
Overhead using the Information disclosure security policy for
)
d
e
z
i
l
a
m
r
o
n
(
d
a
e
h
r
e
v
o
e
m
i
t
-
n
u
R
4
3
2
1
1 2 3 4
1
3
.
2
6
.
2
7
1
.
2
1
0
.
2
7
4
.
1
8
4
.
1
9
3
.
1
7
6
.
1
2
8
.
3
8
4
.
2
6
6
.
1
3
1
.
1
4
1
.
1
5
1
.
1
3
7
.
1
8
.
1
5
3
.
1
1
6
.
1
5
5
.
1
7
3
.