### Optimized Text

**Allocator and ASLR Entropy:**
The allocator reduces ASLR entropy, but this is not a concern for MvArmor. Our security guarantees are robust and do not rely on ASLR.

**VI. Limitations:**
Our MvArmor prototype, as of the current development stage, has the following limitations:

- **Virtual Memory Size Restrictions:**
  MvArmor's custom allocator is subject to Dune's constraints on the maximum per-process virtual memory size. This currently necessitates relaxing the size restrictions on inter-slab padding, which may compromise security in memory-intensive applications.

- **Intra-Struct Buffer Decoupling:**
  MvArmor can protect generic heap objects but cannot decouple intra-struct buffers or chunks managed by custom memory allocators within each object without source-level information. This limitation is inherent to all binary-level heap hardening solutions [51].

- **Threading Support:**
  Although MvArmor’s MVX library supports threading similar to recent MVX solutions [22], it currently does not support multi-threaded applications. Extending our prototype to handle arbitrary multi-threaded applications faces two main challenges:
  1. Ensuring thread safety in Dune (which is currently thread-unsafe).
  2. Preserving correct MVX semantics with a more stringent form of DMT when benign data races are present (e.g., threads synchronizing without syscalls such as futex).

**VII. Evaluation:**

We evaluated MvArmor on a workstation equipped with an Intel i7-3770 quad-core CPU clocked at 3.4 GHz and 16 GB of RAM. Hyperthreading was disabled to minimize fluctuations in test results. All experiments were conducted on a Debian 8.0 system running a Linux kernel 3.2 (x86_64).

For our evaluation, we selected several popular server programs that are frequently exposed to remote attacks and have been extensively benchmarked in prior research. These include nginx (v0.8.54), lighttpd (v1.4.28), bind (v9.9.3), and beanstalkd (v1.10). 

- **bind:**
  We used the queryperf benchmark to issue 500,000 requests with 20 (default) threads.
  
- **nginx and lighttpd:**
  Both high-performance web servers were benchmarked using the wrk tool, issuing 10 seconds worth of requests for a 4 KB page over 10 concurrent connections.
  
- **beanstalkd:**
  The work queue was benchmarked using the beanstalkd benchmark, issuing 100,000 push operations per worker over 10 concurrent connections with 256 bytes of data. To compare directly with Varan [22] (the fastest, though not security-oriented, state-of-the-art MVX solution), we adopted the same benchmark configurations (wrk and beanstalkd) as in [22], increasing the number of push operations in the beanstalkd benchmark by a factor of 10 to ensure a sufficient benchmark duration (10-20 seconds).

We also evaluated MvArmor on microbenchmarks and the SPEC CPU2006 benchmark suite, focusing on the CINT2006 benchmarks to align with the configuration in [22] and provide comparative results. Each experiment was run 11 times, and the median (with a small standard deviation across runs) is reported. Results are presented for our default MvArmor configuration using a 10-element ring buffer, allowing the leader to execute 10 syscalls ahead of followers. Similar results were observed with moderate changes in the ring buffer size. Unless otherwise noted, our experiments use the variant generation strategy from Section V: the leader uses the default (randomized) allocator, while each follower uses the modified libumem allocator.

**A. Server Performance:**

To evaluate MvArmor’s performance on our server programs, we attempted to replicate the over-the-network configuration described in [22]. The client was placed on a dedicated machine in the same rack as the server, connected by a 1 Gbit/s Ethernet link. In our setup, this configuration was insufficient to effectively saturate the server, resulting in only marginal performance impact across different configurations.

**Fig. 4. Overhead using the Code Execution Security Policy for Increasing Number of Variants.**

**Fig. 6. Overhead using the Information Disclosure Security Policy for Increasing Number of Variants.**

[Graphs and tables are included here, showing the overhead for different numbers of variants and security policies.]

---

This optimized version maintains the technical details while improving clarity, coherence, and professional presentation.