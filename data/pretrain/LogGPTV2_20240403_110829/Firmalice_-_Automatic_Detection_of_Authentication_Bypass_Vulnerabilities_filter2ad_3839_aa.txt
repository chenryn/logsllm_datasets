title:Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities
in Binary Firmware
author:Yan Shoshitaishvili and
Ruoyu Wang and
Christophe Hauser and
Christopher Kruegel and
Giovanni Vigna
Firmalice - Automatic Detection of Authentication
Bypass Vulnerabilities in Binary Firmware
Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, Giovanni Vigna
UC Santa Barbara
{yans,ﬁsh,christophe,chris,vigna}@cs.ucsb.edu
is present
to the devices
Abstract—Embedded devices have become ubiquitous, and
they are used in a range of privacy-sensitive and security-critical
applications. Most of these devices run proprietary software,
and little documentation is available about the software’s inner
workings. In some cases, the cost of the hardware and protection
themselves
mechanisms might make access
infeasible. Analyzing the software that
in such
environments is challenging, but necessary, if the risks associated
with software bugs and vulnerabilities must be avoided. As a
matter of fact, recent studies revealed the presence of backdoors
in a number of embedded devices available on the market. In
this paper, we present Firmalice, a binary analysis framework to
support the analysis of ﬁrmware running on embedded devices.
Firmalice builds on top of a symbolic execution engine, and
techniques, such as program slicing, to increase its scalability.
Furthermore, Firmalice utilizes a novel model of authentication
bypass ﬂaws, based on the attacker’s ability to determine the
required inputs to perform privileged operations. We evaluated
Firmalice on the ﬁrmware of
three commercially-available
devices, and were able to detect authentication bypass backdoors
in two of them. Additionally, Firmalice was able to determine that
the backdoor in the third ﬁrmware sample was not exploitable by
an attacker without knowledge of a set of unprivileged credentials.
I.
INTRODUCTION
Over the last few years, as the world has moved closer
to realizing the idea of the Internet of Things, an increasing
amount of the things with which we interact every day have
been replaced with embedded devices. These include previ-
ously non-electronic devices, such as locks1, lightswitches2,
and utility meters (such as electric meters and water meters)3,
as well as increasingly more complex and ubiquitous devices,
such as network routers and printers. These embedded devices
are present in almost every modern home, and their use is
steadily increasing. A study conducted in 2011 noted that
almost two thirds of US households have a wireless router,
and the number was slated to steadily increase [22]. The
same report noted that, in South Korea, Wi-Fi penetration had
1For example, the Kwikset Kevo smart lock.
2Most popularly, Belkin’s WeMO line.
3Such as the ION, a smart meter manufactured by Schneider Electric.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named
author (for reproduction of an entire paper only), and the author’s employer
if the paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23294
reached 80%. The numbers are similar for other classes of
devices: it has been predicted that the market penetration of
smart meters will hit 75% by 2016, and close to 100% by 2020.
These examples are far from inclusive, as other devices
are becoming increasingly intelligent as well. Modern printers
and cameras include complex social media functionality,
“smart” televisions are increasingly including Internet-based
entertainment options, and even previously-simple devices
such as watches and glasses are being augmented with
complex embedded components.
The increasingly-complex systems that drive these devices
have one thing in common: they must all communicate to carry
out their intended functionality. Smart TVs communicate with
(and accept communication from) online media services, smart
locks allow themselves to be unlocked by phones or keypads,
digital cameras contact social media services, and smart meters
communicate with the user’s utility company. Such communi-
cation, along with other functionalities of the device, is handled
by software (termed “ﬁrmware”) embedded in the device.
Because these devices often receive privacy-sensitive infor-
mation from their sensors (such as what a user is watching,
or how much electricity they are using), or carry out a safety-
critical function (such as actuators that lock the front door),
errors in the devices’ ﬁrmware, whether present due to an
accidental mistake or purposeful malice, can have serious and
varying implications in both the digital and physical world. For
example, while a compromised smart meter might allow an
attacker to determine a victim’s daily routine or otherwise in-
vade their privacy based on their energy usage, a compromised
smart lock can permit unauthorized entry into a victim’s home
(or, in a corporate setting, a compromised badge access veriﬁer
can allow entry into extremely critical physical areas of an or-
ganization). In fact, this is not just a theoretical concern: there
have already been examples of “smart-home” invasions [18].
Firmware is susceptible to a wide range of software
errors. These include memory corruption ﬂaws, command
injection vulnerabilities, and application logic ﬂaws. Memory
corruption vulnerabilities in ﬁrmware have received some
attention [12], [33], while other vulnerabilities have, as of
yet, been relatively unexplored in the context of ﬁrmware.
One common error seen in ﬁrmware is a logic ﬂaw
called an authentication bypass or, less formally, a backdoor.
An authentication bypass occurs when an error
in the
authentication routine of a device allows a user to perform
actions for which they would otherwise need to know a set of
credentials. In other cases, backdoors are deliberately inserted
by the manufacturer to get access to deployed devices for
Authentication bypass vulnerabilities are not
maintenance and upgrade. As an example, an authentication
bypass vulnerability on a smart meter can allow an attacker to
view and, depending on the functionality of the smart meter,
modify the recorded energy usage of a victim without having
to know the proper username and password, which, is generally
kept secret by the utility company. Similarly, in the case of a
smart lock, an authentication bypass could allow an attacker to
unlock a victim’s front door without knowing their passcode.
just a
theoretical problem:
recently publicized vulnerabilities in
embedded devices describe authentication bypass ﬂaws
present in several devices’ ﬁrmware [15], [16], and a recent
study has suggested that up to 80% of consumer wireless
routers are vulnerable to known vulnerabilities [31]. In fact, an
authentication bypass in Linksys routers was used by attackers
to create a botnet out of 300,000 routers in February 2014 [6].
Detecting authentication bypasses in ﬁrmware is challeng-
ing for several reasons. To begin with, the devices in question
are usually proprietary, and, therefore, the source code of the
ﬁrmware is not available. While this is a problem common
to analyzing binary software in general, ﬁrmware takes it
one step further: ﬁrmware often takes the form of a single
binary image that runs directly on the hardware of the device,
without an underlying operating system4. Because of this, OS
and library abstractions do not exist in some cases, and are
non-standard or undocumented in others, and it is frequently
unknown how to properly initialize the runtime environment
of the ﬁrmware sample (or, even, at what offset to load the
binary and at what address to begin execution). We term such
ﬁrmware as “binary blob” ﬁrmware. These blobs can be very
large and, therefore, any analysis tool must be able to handle
such complex ﬁrmware. Additionally, embedded devices
frequently require their ﬁrmware to be cryptographically
signed by the manufacturer, making modiﬁcation of
the
ﬁrmware on the device for analysis purposes infeasible.
These challenges make existing approaches infeasible for
identifying logic ﬂaws in ﬁrmware. Systems that are based on
the instrumentation and execution monitoring of ﬁrmware on a
real device [26], [33] would not be able to operate in this space,
because they require access to and modiﬁcation of the device in
order to run custom software. In turn, this is made difﬁcult by
the closed nature (including the aforementioned cryptographic
veriﬁcation of ﬁrmware images) and the hardware disparity
(any sort of on-device instrumentation would represent a per-
device development effort) of embedded devices. Additionally,
existing ﬁrmware analysis systems that take a purely symbolic
approach (and, thus, do not require analyses to be run on the
device itself) [12] would not be able to scale their analysis
to complex ﬁrmware samples, like those used by printers and
smart meters. Moreover, they require source code, which is
typically not available for proprietary ﬁrmware. As a result of
these challenges, most detections of authentication bypasses
in ﬁrmware are done manually. This is problematic for two
reasons. First, manual analysis is impractical given the raw
number of different embedded devices on the market. Second,
even when manual analysis is performed, the complexity of
ﬁrmware code can introduce errors in the analysis.
4The operating system is self-contained in the binary, and we cannot rely
on a-priori knowledge or known interfaces to such systems.
2
of
To
the
address
existing
shortcomings
analysis
approaches, we developed a system, called Firmalice,
that automates most of the process of searching ﬁrmware
binaries for the presence of logic ﬂaws. To the best of our
knowledge, Firmalice is the ﬁrst ﬁrmware analysis system
working at the binary level, in a scalable manner, and with
no requirement to instrument code on the original device.
We applied Firmalice to the detection of authentication
bypass ﬂaws, as seen in several recent, high-proﬁle disclosures
of ﬁrmware backdoors. To allow Firmalice to reason about
such ﬂaws, we created a novel model of authentication bypass
vulnerabilities, based around the concept of an attacker’s
ability to determine the input necessary to execute privileged
operations of the device. Intuitively, if an attacker can derive
the necessary input for driving a ﬁrmware to perform a
privileged operation simply by analyzing the ﬁrmware, the
authentication mechanism is either ﬂawed or bypassable.
Additionally, this model allows us to reason about complicated
backdoors, such as cases when a backdoor password is secretly
disclosed to the user by the ﬁrmware itself, as we consider
such information determinable by an attacker.
Because the deﬁnition of a privileged operation (i.e., an op-
eration that requires preliminary authencation) varies between
devices, Firmalice requires the speciﬁcation of a security
policy for each ﬁrmware sample, to locate such operations.
Our system receives a ﬁrmware sample and the speciﬁcation
of its security policy, and then loads the ﬁrmware sample,
translates its binary code into an intermediate representation,
and performs a static full-program control and data ﬂow
analysis, followed by symbolic execution of ﬁrmware slices,
to detect the presence of any violations of the security policy.
three real-world
ﬁrmware samples: a network printer, a smart meter, and
a CCTV camera. These devices demonstrate Firmalice’s
ability to analyze diverse hardware platforms, encompassing
both ARM and PPC, among other supported architectures.
Additionally, these samples represent both bare-metal binary
blobs and user-space programs, and their backdoors are
triggered in several different ways.
We evaluated our approach against
To summarize, we make the following contributions:
• We develop a model
and
to describe,
in an architecture-
independent
implementation-independent way,
authentication bypass vulnerabilities in ﬁrmware binaries.
This model is considerably more general than existing
techniques, and it is focused around the concept of input
determinism. The model allows us to reason about, and
detect, complicated backdoors,
including intentionally-
inserted authentication, bugs in authentication code, and
missing authentication routines, without being dependent
on implementation details of the ﬁrmware itself.
• We implement a tool
that utilizes advanced program
analysis techniques to analyze binary code in complex
ﬁrmware of diverse hardware platforms, and automate
much of
identifying occurrences of
authentication bypass vulnerabilities. This tool uses novel
techniques to improve the scalability of the analysis.
the process of
tool on three real-world ﬁrmware
samples, detailing our experiments and successfully
detecting
vulnerabilities,
authentication
bypass
• We evaluate our
demonstrating that manual analysis is not sufﬁcient
for authentication bypass detection.
increased prominence of
II. AUTHENTICATION BYPASS VULNERABILITIES
The
embedded consumer
electronics have given rise to a new challenge in access control.
Speciﬁcally, many embedded devices contain privileged
operations that should only be accessible by authorized users.
One example of this is the case of networked CCTV cameras:
it is obvious that only an authenticated user should be able
to view the recorded video and change recording settings. To
protect these privileged operations, these devices generally
include some form of user veriﬁcation. This veriﬁcation (i.e.,
only an authorized user can access privileged functionality)
almost always takes the form of an authentication of the user’s
credentials before the privileged functionality is executed.
The veriﬁcation can be avoided by means of an authen-
tication bypass attack. Authentication bypass vulnerabilities,
commonly termed “backdoors,” allow an attacker to perform
privileged operations in ﬁrmware without having knowledge
of the valid credentials of an authorized user.
The backdoors that we have analyzed tend to assume one
of several forms, which we will detail here, before describing
how we designed Firmalice to detect the presence of these
vulnerabilities.
Intentionally hardcoded credentials. The most
common
type of authentication bypass is the presence of hardcoded
authentication credentials in the authentication routine
of an embedded device. Most commonly, this takes the
form of a hardcoded string against which the password
is compared (e.g., using strcmp()). If the comparison
succeeds, access is granted to the attacker. There have
been many recent high-proﬁle cases of such backdoors.
We discuss one such case, a backdoor in the web interface
of a networked CCTV camera [14], in Section IX-B.
In some cases,
the credentials might not be directly
hardcoded in this manner, but still predictable. One
example is a popular model of
that
calculates a “factory access” password by hashing its
publicly-known model number [25].
smart meter,
Intentionally hidden authentication interface.
Alternatively, an authentication bypass can take the form
of a hidden (or undocumented) authentication interface.
Such interfaces grant access to privileged operations
without the need for an attacker to authenticate. Hidden
authentication interfaces have been featured in some
recent vulnerabilities [16], [2], and we describe one such
case, affecting a popular model of network printer.
Unintended bugs. Sometimes, unintended bugs compromise
the integrity of
the authentication routine, or allow
its bypass
command
injection: some routers allow unauthenticated users to
test connectivity by providing a web interface to the ping
binary, and incorrect handling of user input frequently
results in command injections.
completely. One
example
is
By analyzing known authentication bypass vulnerabilities
in ﬁrmware samples, we identiﬁed that a lack of secrecy, or,
inversely, the determinism of the input necessary to perform a
privileged operation, lies at the core of each one. That is, the
3
authentication bypass exists either because the required input
(most importantly, the credentials) was insufﬁciently secret to
begin with (i.e., a comparison with a hardcoded string embed-
ded in the binary), because the secrecy was compromised dur-
ing communication (for example, by leaking information that
could be used to derive a password), or because there was no
authentication to begin with (such as the case of an administra-
tive interface, listening, sans authentication, on a secret port).
To reason about these vulnerabilities, we created a model
based on the concept of input determinism. Our model is a gen-
eralization of this class of vulnerability, leveraging the observa-
tion that input determinism is a common theme in authentica-
tion bypass vulnerabilities. Our authentication bypass model
speciﬁes that all paths leading from an entry point into the
ﬁrmware (e.g., a network connection or a keyboard input han-
dler) to a privileged operation (e.g., a command handler that
performs some sensitive action) must validate some input that
the attacker cannot derive from the ﬁrmware image itself or
from prior communication with the device. In other words, we
report an authentication bypass vulnerability when an attacker
can craft (a possible sequence of) inputs that lead the ﬁrmware
execution to a privileged operation. Whenever the attacker is
able to extract such input from the analysis of the ﬁrmware
itself, he has found an authentication bypass vulnerability.
This model
to an extent, what
is considerably more general
than existing
approaches: it is not important how the actual authentication
code is implemented, or,
the actual
vulnerability is; the analysis needs only to reason about the
attacker’s ability to determine the input. Note that our model
does not require any knowledge of a speciﬁc authentication
function. In fact, as an interesting special case, our system
reports an authentication bypass for all instances where the
authentication function is entirely missing.
Unlike classical memory corruption vulnerabilities, such as
buffer overﬂows, logic vulnerabilities such as authentication
bypasses require a semantic understanding of
the actual
device in question. Speciﬁcally, the deﬁnition of a privileged