 Sort Key: j1.id
 -> Seq Scan on j1 (cost=0.00..25.38 rows=6 width=36)
 Filter: (info = 'no'::text)
 -> Sort (cost=85.43..88.50 rows=1230 width=36)
 Sort Key: j2.id
 -> Seq Scan on j2 (cost=0.00..22.30 rows=1230 width=36)
 (9 rows)
EXPLAIN 成本计算举例
 成本计算相关的参数和系统表或视图
 表或视图
 pg_stats
 pg_class -- 用到relpages和reltuples
 参数
 seq_page_cost -- 全表扫描的单个数据块的代价因子
 random_page_cost -- 索引扫描的单个数据块的代价因子
 cpu_tuple_cost -- 处理每条记录的CPU开销代价因子
 cpu_index_tuple_cost -- 索引扫描时每个索引条目的CPU开销代价因子
 cpu_operator_cost -- 操作符或函数的开销代价因子
 effective_cache_size -- 预知的可用缓存
EXPLAIN 成本计算举例
 全表扫描的成本计算
 digoal=# explain select * from f;
 QUERY PLAN
 -----------------------------------------------------------
 Seq Scan on f (cost=0.00..12999.00 rows=640000 width=49)
 (1 row)
 Cost是怎么得来的? 全表扫描的成本计算只需要用到pg_class.
 digoal=# select relpages,reltuples from pg_class where relname='f';
 relpages | reltuples
 ----------+-----------
 6599 | 640000
 (1 row)
EXPLAIN 成本计算举例
 digoal=# show seq_page_cost;
 seq_page_cost
 ---------------
 1
 (1 row)
 digoal=# show cpu_tuple_cost;
 cpu_tuple_cost
 ----------------
 0.01
 (1 row)
 COST值 :
 digoal=# select 6599*1+640000*0.01;
 ?column?
 ----------
 12999.00
 (1 row)
EXPLAIN 成本计算举例
 从柱状图评估行数的例子
 EXPLAIN SELECT * FROM tenk1 WHERE unique1  Bitmap Index Scan on tenk1_unique1 (cost=0.00..23.80 rows=1007 width=0)
 Index Cond: (unique1  Bitmap Index Scan on tenk1_unique1 (cost=0.00..23.80 rows=1007 width=0)
 Index Cond: (unique1  Seq Scan on public.n2 (cost=0.00..72.00 rows=25 width=36) (actual time=0.010..0.010 rows=1 loops=1) -- 评估25行, 实际1行
 Output: n2.id, n2.info
 Filter: (n2.id = 1)
 Buffers: shared hit=1
 -> Seq Scan on public.n1 (cost=0.00..14.50 rows=10 width=9) (actual time=0.027..0.160 rows=10 loops=1) -- 评估需要循环25次, 实际循环1
次
 Output: n1.id, n1.info
 Filter: (n1.id = 1)
 Rows Removed by Filter: 990
 Buffers: shared hit=2
 Total runtime: 0.214 ms
 (13 rows)
EXPLAIN 成本计算举例
 digoal=# truncate n1;
 TRUNCATE TABLE
 digoal=# truncate n2;
 TRUNCATE TABLE
 digoal=# insert into n1 select generate_series(1,10),'test';
 INSERT 0 10
 digoal=# insert into n2 select generate_series(1,100000),'test';
 INSERT 0 100000
 digoal=# analyze n1;
 ANALYZE
 digoal=# analyze n2;
 ANALYZE
 digoal=# create index idx_n1 on n1(id);
 CREATE INDEX
 digoal=# create index idx_n2 on n2(id);
 CREATE INDEX
EXPLAIN 成本计算举例
 digoal=# set enable_sort=off;
 SET
 digoal=# explain (analyze,verbose,buffers,timing,costs) select * from n1,n2 where n1.id=n2.id;
 QUERY PLAN
 ---------------------------------------------------------------------------------------------------------------------------------
 Merge Join (cost=0.43..3.88 rows=10 width=18) (actual time=0.043..0.059 rows=10 loops=1) -- 总成本小于合并连接相加的成本. 因为只有10
条记录匹配, 其中10万条记录的表也不需要全面扫描.
 Output: n1.id, n1.info, n2.id, n2.info
 Merge Cond: (n1.id = n2.id)
 Buffers: shared hit=5
 -> Index Scan using idx_n1 on public.n1 (cost=0.14..3.29 rows=10 width=9) (actual time=0.005..0.008 rows=10 loops=1)
 Output: n1.id, n1.info
 Buffers: shared hit=2
 -> Index Scan using idx_n2 on public.n2 (cost=0.29..1705.29 rows=100000 width=9) (actual time=0.030..0.034 rows=11 loops=1)
 Output: n2.id, n2.info