(IP) and Transport layer (port) addresses. These address
details are commonly used by firewalls to decide whether
a packet should be allowed between hosts.  They may
restrict access based on the IP address and/or port
number of either the source or destination host.  Captur-
ing this connectivity-limiting firewall behavior at both the
Network and Transport layers is therefore critical in
analyzing network security.
In [8], connectivity was represented with a simple
Boolean matrix, which is sufficient to characterize firewall
restrictions based solely on IP address.  Transport layer
connectivity requires a more complex representation.  One
possible method is to simply add dimensions to the
connectivity matrix for the UDP and TCP port numbers.
This may work from an analytical point of view, but it
would drastically increase the size of the model to
account for the 65,536 port numbers associated with each
transport protocol.  An easy way to reduce this is to track
only the ports on a network that are actually in use.
Symbolic labels can be created for each of these in-use
ports and the total number of labels would dictate the size
of the matrix.  While this would greatly reduce the size of
the connectivity matrix, it does not address an important
requirement of the security analysis problem.
From a security analysis perspective, raw connectivity is
not the only pre-condition necessary for an attack to
succeed.  A vulnerability must also exist in the application
that supports the network service.  Such a vulnerability is
usually specific to the particular application.  For example,
Microsoft's Internet Information Server (IIS) web server is
susceptible to different attacks than the Apache web
server [1, 6].  It is much more important to track the
specific application details associated with the service
than it is to track the port number on which the service
runs.  Therefore, we name Transport layer connectivity
variables after the application that supports the network
service (e.g., TRANS_APACHE_1_3_21).  Such names
can easily be extended to include patch level and other
information required to delineate between different
exploits' pre-conditions.  By avoiding port numbers, this
approach also eliminates complications associated with
running services on non-standard ports.  Web servers,
for example, often run on ports other than 80.  A port-
based approach would require a table to map port
numbers to application details.  Instead, we collapse the
required connectivity information into a single, appropri-
ately named variable as shown in Figure 5.
TRANS_IIS_4_0
Other 
Preconditions
IIS_4_0_exploit 
Figure 5 - Example Transport Layer Exploit
Figure 6 shows a small but typical network where a
firewall policy limits Transport layer connectivity to some
public services.  Specifically, external hosts (represented
by Smithers) are allowed to connect to internal hosts on
ports 80 and 8080 (which would allow Smithers to
communicate with the Apache and IIS servers located on
Homer), but connections to all other ports (including
Sendmail on Marge) are blocked.  Homer and Marge, on
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
the other hand, are permitted to any port on Smithers.
Smithers 
Firewall 
Src       SPort    Dst       DPort     Action 
Smithers  Any      Any       80,8080   Allow 
Any       Any      Smithers  Any       Allow 
Any       Any      Any       Any       Deny 
Marge 
25  Sendmail 
Homer 
IIS 
80 
8080  Apache 
X 
Indicates service
running on TCP port x
Figure 6 - Example Network with Connectivity-
Limiting Firewall
As discussed earlier, the actual port numbers are irrel-
evant for TVA analysis.  Rather, the ability of an attacker
to launch an exploit is based on whether Transport layer
connectivity exists to the service applications them-
selves.  An attacker with access to Smithers, for example,
might use exploits against Homer that require TRANS_IIS
or TRANS_APACHE connectivity, but couldn't directly
launch exploits against Marge's Sendmail service because
the firewall blocks access to it. Homer, though, enjoys
unrestricted access to Marge.  If the attacker on Smithers
could first gain control of Homer by exploiting one of the
directly accessible services, Marge would be indirectly
reachable.  Figure 7 shows a possible exploit path from
Smithers to Marge, where an IIS exploit first yields the
ability to execute programs on Homer.  This increase in
access level, combined with Homer's Transport layer
connectivity to Marge, then allows the attacker to apply a
Sendmail exploit against Marge.  One of TVA's core
capabilities is it's ability to shift the locus of attack in this
way, just as a real attacker would, to work around
connectivity limiting facilities such as firewall policies.
TRANS_IIS_4_0
Other 
Preconditions 
TRANS_SENDMAIL_8_10_2  
LINK_ARP  
IIS_exploit  
ACCESS_EXEC  
Sendmail_exploit 
Other 
Preconditions 
Smithers 
Homer  
Marge 
Figure 7 - Example Exploit Path
In addition to a symbolic label for each service on the
network, the special symbol TRANS_UNUSED is
included as a standard entry in the Transport layer
definitions.  This symbol refers to the collection of all
ports on a system that are not currently being used by a
listening service. Capturing this condition is needed to
model a class of exploit called port forwarding, and results
when connectivity-limiting devices permit connections to
services that aren't actually running on the destination
host.  For example, Smithers can send packets to port
8080 on Marge even though a service isn't actually
running on that port.
5.  Modeling Application Layer Security
The first three layers of the TCP/IP reference model do
not address all connectivity-related security issues.  For
example, an attacker might be able to connect with a
Transport layer service, but might have to authenticate
with a password to actually exploit it.  TVA uses a
separate Application layer to address these types of
issues.
Some services such as telnet establish trust relationships
based on password authentication.  TVA represents this
with an Application layer connection, e.g.,
APP_PW_AUTH.  The sample telnet exploit shown in
Figure 8 includes both the TRANS_TELNET and
APP_PW_AUTH connections required to exploit it.  Note
that TVA includes the normal operation of services such
as telnet in its exploit database, and applies them just as a
real attacker would if he had successfully acquired a
user's password.
TRANS_TELNET 
APP_PW_AUTH 
TELNET_exploit 
Figure 8 - Example Telnet Exploit
Some services such as the Berkeley `R' commands can be
configured to trust hosts based on their IP addresses.
Although an IP address is a Network layer field, the
application itself applies it from its own configuration
files, so such trust relationships are best represented at
this layer.  Figure 9 shows how TVA models the rcp
command, where APP_RHOSTS represents the trust
relationship configured in the system or user's rhosts file.
TRANS_RSH 
APP_RHOSTS 
RCP_exploit 
Figure 9 - Example Berkeley rcp Command
Exploit
So far, we've presented several layers of connectivity, as
they pertain to security, in the context of individual
exploits.  The real power of TVA, though, is its ability to
chain exploits together into multi-step attack paths.  The
next section presents an example that highlights this
capability.
6.  An Example
To illustrate the ideas developed in this paper, we present
a small network similar to the example in Section 4.  Figure
10 is deceptively simple in terms of the number of hosts
on the network, but offers an exploit path that might not
be obvious to many administrators.  The firewall policy is
restrictive, allowing only Secure Shell (port 22) and IIS
(port 80) traffic from the attack machine (i.e., inbound).
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Secure Shell is allowed to both Maude and Ned, though
you'll note it isn't actually running on Maude.  Inbound
IIS traffic is restricted to Maude, and inbound FTP traffic
isn't permitted at all.  Outbound traffic to the attack
machine is unrestricted.
attack 
Firewall 
Src       SPort    Dst       DPort     Action 
attack    Any      Any       22        Allow 
attack    Any      Maude     80        Allow 
Any       Any      attack    Any       Allow 
Any       Any      Any       Any       Deny 
Maude 
IIS (TCP/80) 
Ned 
FTP (TCP/21) 
SSH (TCP/22) 
Figure 10 - Final Example
A simplified TVA connectivity matrix for this configura-
tion is shown in Table 1.  The keyword 'ANY' indicates
the source host can connect to any service on the
destination, and is only used to make the matrix more
readable.  An actual TVA model would list all connections,
but for simplification we only record those to and from
machines Maude and Ned.
Destination
attack
Maude
Ned
attack
ANY
Source
Maude
ANY
TRANS_IIS
TRANS_UNUSED TRANS_SSH
TRANS_FTP
TRANS_SSH
ANY
Ned
ANY
TRANS_IIS
TRANS_UNUSED
ANY
Table 1 - Example Connectivity Matrix
Now suppose TVA is configured with the exploits shown
in Figure 11.  The input arrows represent pre-conditions
that must exist on the attacking machine to trigger the
exploit, and the output arrows signify post-conditions
that apply to the victim machine.  For example, the FTP
exploit shown in (b) requires Transport layer connectivity
to an FTP service and the ability to execute programs on
the attacking machine as pre-conditions, and yields the
ability to execute programs on the victim machine as a
post-condition. Besides the ACCESS_EXEC post-
condition already mentioned, we included another
condition that isn't related to connectivity in exploits (c)
and (d).  The PGM_PORT-FWD condition indicates that a
port-forwarding program is installed on the machine.
These conditions hint at other elements required in a full
TVA model, and are included here to illustrate how exploit
post-conditions can satisfy the pre-conditions of other
exploits.
TRANS_IIS 
ACCESS_EXEC  
TRANS_RSH 
APP_RHOSTS  
ACCESS_EXEC  
IIS_exploit 
(a) 
rcp_exploit 
(c) 
ACCESS_EXEC 
TRANS_FTP  
ACCESS_EXEC 
FTP_exploit 
ACCESS_EXEC 
(b) 
TRANS_UNUSED  
PGM_PORT-FWD  
ACCESS_EXEC 
PORT - FWD_exploit
TRANS_FTP 
PGM_PORT- FWD 
(d) 
Figure 11 - Example Exploits
We set our attack goal as obtaining execute access on
Ned.  Assuming the attacker starts with the ability to
execute programs on her own machine, the reader might
compare the connectivity matrix and exploits to construct
the exploit path shown in Figure 12, which realizes the
goal even though the firewall blocks access from the
attack machine to Ned.  The attacker has TRANS_IIS
connectivity to Maude, so she can execute the IIS exploit
(a), which yields execute access on Maude.  The new
execute access enables her to copy a port forwarding
program from the attack machine using RCP_exploit (c).
Although we don't show it in the diagram, an rcp client is
required to actually execute RCP_exploit.  An rcp client is
included in the default Windows NT installation, on
which the IIS web server runs.  Note that all the pre-
conditions for (c) apply to Maude because the locus of
attack has transferred there.  Maude is exploiting its
TRANS_RSH and APP_RHOSTS connectivity to hack
the attack machine and download a program!  Of course,
it's the attacker that really drives the process, and she
must set up her machine to allow the connections.  The
PGM_PORT-FWD download, combined with connectivity
to an unused port, then triggers the port forward exploit
(c), which in turn yields TRANS_FTP connectivity to
Ned.  Finally, the attacker takes advantage of the indirect
access to Ned to execute the FTP exploit (b), which gives
her the ability to execute programs on Ned.  The goal has
been realized.
TRANS_IIS 
ACCESS_EXEC 
IIS_exploit  
TRANS_UNUSED 
ACCESS_EXEC 
PORT-FWD_exploit
RCP_exploit 
PGM_PORT-FWD 
APP_RHOSTS 
TRANS_RSH 
TRANS_FTP 
FTP_exploit 
ACCESS_EXEC 
attack 
Maude 
Ned 
Figure 12 - Exploit Path
Manually constructing this exploit path is fairly trivial,
but the complexity of a more realistic network with
hundreds of machines and thousands of exploits is
daunting.  Fortunately, TVA automates the process so the
problem becomes one of designing a network model with
the flexibility to address all types of vulnerabilities and
exploits.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
7.  Conclusion
The work presented in this paper substantially improves
the ability for this analysis model to represent real-world
networks.  This is important because it allows the model
to more closely represent the type of network connectiv-
ity issues that directly affect network security.  These
new enhancements were carefully designed to minimize
their state-space requirements.  In the small example
networks that have been encoded so far, state-space
issues are not much of a concern.  However, when
representing larger networks, the size of the state-space
becomes a concern.  By limiting the impact of the connec-
tivity enhancements, larger networks are able to fit within
the constraints of the current analysis tool.
Acknowledgements
The authors are grateful to several people for assistance
with the creation of this paper.  We would like to specifi-
cally thank Dr. Paul Ammann for his encouragement,
Chuck Hutchinson for sharing his good ideas, and Dr.
Sushil Jajodia and the GMU Center For Secure Informa-
tion Systems for supporting the research.
REFERENCES
[1] Apache Web Server information and software on the
web at www.apache.org.
[2] B. Beizer, "Software Testing Techniques, 2nd edition,"
Thomson Computer Press, 1990.
[3] J. Birch, E. Clark, K. McMillan, D. Dill, and L.J. Hwang,
Symbolic Model Checking: 1020 States and Beyond,
Proceedings of the ACM/SIGDA International Workshop
in Formal Methods in VLSI Design, January, 1991.
[4] Coleson, Jay, An Elementary Introduction to Sendmail,
The SANS Institute, 2000.  http://www.sans.org/
infosecFAQ/unix/intro_sendmail.htm
[5] Computer Oracle and Password System (COPS)
information and software on the web at ftp.cert.org/pub/
tools/cops.
[6] Internet Information Server information on the web at
www.microsoft.com/iis.
[7] Internet Security Systems, System Scanner informa-
tion on the web at www.iss.net.
[8] Ronald W Ritchey and Paul Ammann, Using Model
Checking To Analyze Network Security, 2000 IEEE
Symposium on Security and Privacy, May 2000.
[9] Oleg Sheyner, Somesh Jha, and Jeannette M. Wing,
Automated Generation and Analysis of Attack Graphs,
Proceedings of the IEEE Symposium on Security and
Privacy, Oakland, CA, May 2002.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE