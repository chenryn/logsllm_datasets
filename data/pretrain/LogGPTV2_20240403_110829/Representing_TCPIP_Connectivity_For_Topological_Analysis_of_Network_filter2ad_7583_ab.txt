### IP and Transport Layer Addresses in Network Security

IP and Transport layer (port) addresses are commonly used by firewalls to determine whether a packet should be allowed between hosts. Firewalls may restrict access based on the IP address and/or port number of either the source or destination host. Capturing this connectivity-limiting behavior at both the Network and Transport layers is critical for analyzing network security.

In [8], connectivity was represented with a simple Boolean matrix, which is sufficient for characterizing firewall restrictions based solely on IP addresses. However, representing Transport layer connectivity requires a more complex approach. One possible method is to add dimensions to the connectivity matrix for UDP and TCP port numbers. While this approach is analytically sound, it would drastically increase the size of the model to account for the 65,536 port numbers associated with each transport protocol. A more practical solution is to track only the ports that are actually in use, creating symbolic labels for these ports. This reduces the size of the connectivity matrix but does not fully address the security analysis problem.

### Security Analysis and Application-Specific Vulnerabilities

From a security analysis perspective, raw connectivity is not the only pre-condition necessary for an attack to succeed. A vulnerability must also exist in the application supporting the network service. Such vulnerabilities are usually specific to the particular application. For example, Microsoft's Internet Information Server (IIS) web server is susceptible to different attacks than the Apache web server [1, 6]. It is more important to track the specific application details associated with the service rather than the port number on which the service runs. Therefore, we name Transport layer connectivity variables after the application that supports the network service (e.g., TRANS_APACHE_1_3_21). This approach can be extended to include patch levels and other information required to delineate between different exploits' pre-conditions. By avoiding port numbers, this method also eliminates complications associated with running services on non-standard ports.

### Example Network with Connectivity-Limiting Firewall

Figure 6 shows a small but typical network where a firewall policy limits Transport layer connectivity to some public services. Specifically, external hosts (represented by Smithers) are allowed to connect to internal hosts on ports 80 and 8080, allowing communication with the Apache and IIS servers located on Homer. Connections to all other ports, including Sendmail on Marge, are blocked. Conversely, Homer and Marge are permitted to connect to any port on Smithers.

```plaintext
Smithers 
Firewall 
Src       SPort    Dst       DPort     Action 
Smithers  Any      Any       80,8080   Allow 
Any       Any      Smithers  Any       Allow 
Any       Any      Any       Any       Deny 

Marge 
25  Sendmail 
Homer 
IIS 
80 
8080  Apache 
X 
Indicates service
running on TCP port x
```

### Exploit Path and TVA Capabilities

As discussed earlier, the actual port numbers are irrelevant for TVA (Threat Vector Analysis) because the ability of an attacker to launch an exploit depends on the existence of Transport layer connectivity to the service applications themselves. An attacker with access to Smithers might use exploits against Homer that require TRANS_IIS or TRANS_APACHE connectivity, but cannot directly launch exploits against Marge's Sendmail service due to the firewall. However, if the attacker gains control of Homer by exploiting one of the directly accessible services, Marge becomes indirectly reachable. Figure 7 illustrates a possible exploit path from Smithers to Marge, where an IIS exploit first yields the ability to execute programs on Homer, and then the attacker uses Homer's Transport layer connectivity to Marge to apply a Sendmail exploit.

```plaintext
TRANS_IIS_4_0
Other 
Preconditions 
TRANS_SENDMAIL_8_10_2  
LINK_ARP  
IIS_exploit  
ACCESS_EXEC  
Sendmail_exploit 
Other 
Preconditions 
Smithers 
Homer  
Marge 
```

### Modeling Application Layer Security

The first three layers of the TCP/IP reference model do not address all connectivity-related security issues. For example, an attacker might be able to connect with a Transport layer service but need to authenticate with a password to exploit it. TVA uses a separate Application layer to address these types of issues. Services such as telnet establish trust relationships based on password authentication, represented in TVA as an Application layer connection (e.g., APP_PW_AUTH). The sample telnet exploit shown in Figure 8 includes both the TRANS_TELNET and APP_PW_AUTH connections required to exploit it.

```plaintext
TRANS_TELNET 
APP_PW_AUTH 
TELNET_exploit 
```

Some services, like the Berkeley 'R' commands, can be configured to trust hosts based on their IP addresses. Although an IP address is a Network layer field, the application applies it from its own configuration files, so such trust relationships are best represented at the Application layer. Figure 9 shows how TVA models the rcp command, where APP_RHOSTS represents the trust relationship configured in the system or user's rhosts file.

```plaintext
TRANS_RSH 
APP_RHOSTS 
RCP_exploit 
```

### Chaining Exploits into Multi-Step Attack Paths

TVA's real power lies in its ability to chain exploits together into multi-step attack paths. The next section presents an example that highlights this capability.

### Example Network and Exploit Path

To illustrate the concepts developed in this paper, we present a small network similar to the example in Section 4. Figure 10 shows a network with a restrictive firewall policy, allowing only Secure Shell (port 22) and IIS (port 80) traffic from the attack machine (inbound). Secure Shell is allowed to both Maude and Ned, though it isn't actually running on Maude. Inbound IIS traffic is restricted to Maude, and inbound FTP traffic is not permitted at all. Outbound traffic to the attack machine is unrestricted.

```plaintext
attack 
Firewall 
Src       SPort    Dst       DPort     Action 
attack    Any      Any       22        Allow 
attack    Any      Maude     80        Allow 
Any       Any      attack    Any       Allow 
Any       Any      Any       Any       Deny 

Maude 
IIS (TCP/80) 
Ned 
FTP (TCP/21) 
SSH (TCP/22) 
```

A simplified TVA connectivity matrix for this configuration is shown in Table 1. The keyword 'ANY' indicates that the source host can connect to any service on the destination, making the matrix more readable.

| Destination | attack | Maude | Ned |
|-------------|--------|-------|-----|
| **attack**  | ANY    | -     | -   |
| **Maude**   | ANY    | TRANS_IIS | TRANS_UNUSED, TRANS_SSH |
| **Ned**     | ANY    | TRANS_IIS | TRANS_UNUSED |

Now suppose TVA is configured with the exploits shown in Figure 11. The input arrows represent pre-conditions that must exist on the attacking machine to trigger the exploit, and the output arrows signify post-conditions that apply to the victim machine. For example, the FTP exploit requires Transport layer connectivity to an FTP service and the ability to execute programs on the attacking machine as pre-conditions, and yields the ability to execute programs on the victim machine as a post-condition.

```plaintext
TRANS_IIS 
ACCESS_EXEC  
TRANS_RSH 
APP_RHOSTS  
ACCESS_EXEC  
IIS_exploit 
(a) 
rcp_exploit 
(c) 
ACCESS_EXEC 
TRANS_FTP  
ACCESS_EXEC 
FTP_exploit 
ACCESS_EXEC 
(b) 
TRANS_UNUSED  
PGM_PORT-FWD  
ACCESS_EXEC 
PORT - FWD_exploit
TRANS_FTP 
PGM_PORT- FWD 
(d) 
```

We set our attack goal as obtaining execute access on Ned. Assuming the attacker starts with the ability to execute programs on her own machine, the reader can compare the connectivity matrix and exploits to construct the exploit path shown in Figure 12, which realizes the goal even though the firewall blocks access from the attack machine to Ned. The attacker has TRANS_IIS connectivity to Maude, so she can execute the IIS exploit (a), which yields execute access on Maude. The new execute access enables her to copy a port forwarding program from the attack machine using RCP_exploit (c). The PGM_PORT-FWD download, combined with connectivity to an unused port, triggers the port forward exploit (c), yielding TRANS_FTP connectivity to Ned. Finally, the attacker takes advantage of the indirect access to Ned to execute the FTP exploit (b), giving her the ability to execute programs on Ned.

```plaintext
TRANS_IIS 
ACCESS_EXEC 
IIS_exploit  
TRANS_UNUSED 
ACCESS_EXEC 
PORT-FWD_exploit
RCP_exploit 
PGM_PORT-FWD 
APP_RHOSTS 
TRANS_RSH 
TRANS_FTP 
FTP_exploit 
ACCESS_EXEC 
attack 
Maude 
Ned 
```

### Conclusion

The work presented in this paper significantly improves the ability of the analysis model to represent real-world networks, allowing it to more closely reflect the type of network connectivity issues that directly affect network security. These enhancements were designed to minimize state-space requirements, enabling the representation of larger networks within the constraints of the current analysis tool.

### Acknowledgements

The authors are grateful to several people for assistance with the creation of this paper. We would like to specifically thank Dr. Paul Ammann for his encouragement, Chuck Hutchinson for sharing his good ideas, and Dr. Sushil Jajodia and the GMU Center for Secure Information Systems for supporting the research.

### References

[1] Apache Web Server information and software on the web at www.apache.org.
[2] B. Beizer, "Software Testing Techniques, 2nd edition," Thomson Computer Press, 1990.
[3] J. Birch, E. Clark, K. McMillan, D. Dill, and L.J. Hwang, Symbolic Model Checking: 1020 States and Beyond, Proceedings of the ACM/SIGDA International Workshop in Formal Methods in VLSI Design, January, 1991.
[4] Coleson, Jay, An Elementary Introduction to Sendmail, The SANS Institute, 2000. http://www.sans.org/infosecFAQ/unix/intro_sendmail.htm
[5] Computer Oracle and Password System (COPS) information and software on the web at ftp.cert.org/pub/tools/cops.
[6] Internet Information Server information on the web at www.microsoft.com/iis.
[7] Internet Security Systems, System Scanner information on the web at www.iss.net.
[8] Ronald W Ritchey and Paul Ammann, Using Model Checking To Analyze Network Security, 2000 IEEE Symposium on Security and Privacy, May 2000.
[9] Oleg Sheyner, Somesh Jha, and Jeannette M. Wing, Automated Generation and Analysis of Attack Graphs, Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2002.