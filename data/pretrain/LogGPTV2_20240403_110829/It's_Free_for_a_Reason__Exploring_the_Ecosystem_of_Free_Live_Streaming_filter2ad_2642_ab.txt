the video player with fake close buttons. This technique can
deceive a user to naively click on the fake button, potentially
exposing her to malware-laden websites. In Section IV, we
analyze several types of abuse and show the kind of deceptions
and infections a user can experience while using FLIS services.
Additionally, FLIS parties are repeatedly reported for copy-
right infringements. As the owners of the broadcasting rights,
sports organizations and TV channels hold exclusive rights
on any broadcast of their games online. Law enforcement
agencies can detect and block any domain or IP address that
is involved in the broadcast of illegal sport streams based on
their respective territorial jurisdiction [12], [16], [43], hence
making it difﬁcult to continue the lucrative FLIS business.
Therefore, hiding behind third-parties and using a location with
a ﬂexible, or non-existent, jurisdiction are the usual practices
of the FLIS parties. Moreover, the FLIS parties often take
advantage of certain territorial laws by claiming that they
are not involved in direct copyright infringements [28], [47].
Aggregators claim to only index links to the live sport streams,
and channel providers argue that they only appear as a media
server providers that transmit streams of an unrelated third
party. In Section IV, we analyze the hosting preferences of
the FLIS parties, their concealment of ownership, and the
copyright removal requests submitted against them.
III. DATA GATHERING AND IDENTIFICATION
In this section, we ﬁrst describe how we identiﬁed the
aggregator domains by leveraging search engines and explain
the different phases of our data collection. We then present
our methodology for identifying channel providers by analyz-
ing the network trafﬁc of live streams obtained through the
crawling of numerous FLIS video pages.
A. Gathering Aggregator Domains
As a starting point to discover aggregator webpages, we
searched for the string “free live sport streaming” in Google.
From the search results, we manually identiﬁed 500 aggregator
pages that index links to watch live sport streams for free.
To increase the coverage of our analysis and ﬁnd new
aggregator webpages, we opt for a guided search approach, i.e.,
3
Classiﬁcation. Overall, submitting the extracted queries to
Google yielded nearly 500,000 URLs. To quickly ﬁlter the
non-aggregator pages, we designed and employed a novel
classiﬁer to automatically identify pages that are likely to be
FLIS aggregator webpages. We ﬁrst trained a model (using the
known aggregator pages) by extracting several representative
features, some of which take advantage of the inherent nature
of the FLIS services. We provide details on the extracted
features and classiﬁer in Section V. Once the model is trained,
we use it to identify aggregator webpages by crawling the
URLs that were acquired from the search engine results. For
each crawled webpage, the engineered features are extracted
and passed to the trained model for classiﬁcation, which
outputs a score indicating the URL’s relevance to the FLIS
aggregator page. If the score is greater than a given threshold,
the model labels the URL as an aggregator page. In order to
gather accurate data with high conﬁdence, we set a threshold
value that results in an outcome false positive rate of nearly
10−3 with a detection rate of more than 90%.
Veriﬁcation. To verify the results of the classiﬁcation phase,
we manually checked several hundred labeled URLs. These
URLs are randomly selected from the discarded pages as well
as from the pages that were labeled as aggregator webpages.
Through this process we aim to limit the false positives as
much as possible for our subsequent analysis.
Limitations. Our data collection methodology that leverages
the infrastructure of search engines has two main limitations.
First, it is possible that search engines may not index FLIS
webpages that violate copyrights laws. Second, the effective-
ness of ﬁnding new aggregator webpages is dependent on the
quantity and diversity of the known pages that we used to
generate queries for the search engines. This can be improved
by considering a larger and more diverse collection of aggre-
gator pages. Additionally, we can analyze other sources to ﬁnd
new aggregator domains, like social media and public fora for
FLIS. However, we found that these sources are rare, usually
outdated, and only provide links to a selection of famous free
live streaming webpages.
B. Identifying Channel Providers
In order to investigate the channel providers that maintain
the media servers for free live streaming, we ﬁrst sampled
the 1,000 most popular aggregator domains (according to
the Alexa ranking) from a set of veriﬁed aggregator pages.
We then crawled each sampled domain and extracted the
streaming URLs indexed on the page by interpreting the 
elements. Accordingly, we ﬁltered any URL that belongs to an
advertisement network. Afterwards, we crawled the remaining
URLs by sandboxing the instances of our crawler, each in a
separate Linux Network Namespace. This sandboxing allows
us to capture the network trafﬁc of live media streams from an
individual webpage, while crawling multiple pages in parallel.
At the same time, we instructed our crawler to interpret every
loaded  or  in the page recursively4, store
their HTML, source URLs, and their location and size on the
webpage.
Detecting live streams. Once the crawling process is ﬁnished,
we inspected the network trace of every crawled webpage to
4We use the Selenium’s ChromeDriver with args --disable-web-security to
disable the Same Origin Policy while crawling the webpages.
Figure 2: Guided search approach to ﬁnd aggregator domains.
an approach “guided” by the knowledge of known aggregator
webpages (seeds) to ﬁnd new ones. We chose this approach as
it has been proven effective in the context of ﬁnding unknown
malicious webpages [29], [39] and because it leverages the
infrastructure of search engines (such as Google) that have
indexed a great part of the web.
Figure 2 shows the work-ﬂow of our approach. We use the
500 manually veriﬁed aggregator pages as seeds and visit each
page using a crawler based on Selenium3, a testing framework
for web applications, while storing the HTML of every loaded
 and  element, acquiring all images in
the page, logging network trafﬁc, and taking a screenshot of
the webpage. In a next step, we leverage the Google search
engine to ﬁnd pages that contain similar attributes as the known
aggregator pages. To do this, we use the crawled data of the
seed pages to extract search queries that, when submitted to
Google, return URLs that are likely to be aggregator pages.
However, not all URLs returned from Google will necessarily
belong to aggregator pages. Thus, as a next logical step, we
crawled each URL returned by the search engine and employed
a novel classiﬁer to ﬁlter the non-FLIS aggregator pages in
an automated fashion. However, this ﬁltering is not perfectly
accurate, and still requires manual veriﬁcation of the webpages
to eradicate any classiﬁcation errors. Therefore, as a ﬁnal step,
we manually checked several hundred classiﬁed aggregator
pages and separated the veriﬁed pages for our subsequent
analysis. We now provide details on the different phases of
our data gathering approach.
Query generation. This phase aims to extract relevant queries
from the crawled data of seeds to search for new aggregator
pages. To do this, we extracted terms from the known aggre-
gator pages that are highly indicative of FLIS services, and
can be used as subsequent search engine queries to ﬁnd URLs
of pages that are likely to be FLIS aggregator webpages. The
problem here lies in the fact that aggregator pages, in general,
hardly contain any text except for the links for live streaming.
As a result, it is not always possible to extract strings from
the main body of an aggregator page. Therefore, we focus
on interpreting the  elements, located in 
container of HTML, that provide structured information about
the page in speciﬁed tags. We noticed that almost every
seed page includes a  element named keywords
that contains terms highly relevant to the FLIS aggregator
pages. For instance, some of the interesting keyword terms
we observed in the seed aggregator pages were: ﬁrstrow,
myp2p, rojadirecta, atdhe, and ilemi. All these terms are highly
indicative of FLIS aggregator pages and proved to be effective
queries for discovering a wide variety of unknown aggregator
pages. To this end, we extracted the keyword strings from the
500 seed pages and submitted them as queries to Google. The
results returned by Google were stored for further analysis.
3https://code.google.com/p/selenium/
4
 AggregatorwebpageMachine LearningClassificationVerification WWWCrawlingQuery GenerationSearch Engine(Invoke) "connect"
(Transaction ID) 1.0
(Object1) {
app:"live", flashVer: "LNX 16,0,0,296",
swfUrl: "http://popeoftheplayers.eu/atdedead.swf",
tcUrl: "rtmp://rtmp.popeoftheplayers.eu:1935/live",
fpad: false, capabilities: 9947.75,
audioCodecs: 3191, videoCodecs: 252,
videoFunction: 1 ,
pageUrl: "http://popeoftheplayers.eu/crichd.php?
id=35&width=600&height=450",
objectEncoding: 3.0}
Figure 3: An example RTMP connect message used to identify
the channel provider popeoftheplayers.eu.
ﬁnd channel providers transmitting live media streams. Inspect-
ing network trafﬁc to ﬁnd channel providers (or embedded
players for media streaming) is much more precise than in-
specting Flash embedded objects,  and 
elements. This is because Flash embedding is frequently used
for other purposes than video, such as small applications,
games, and audio. Similarly, the identiﬁcation of live streams
via the use of speciﬁc iframes and scripts would require us to
compile a whitelist of non-malicious resources.
By focusing on network traces, we can inspect
streams. We
transmitting these
to capture the protocol keywords present
the
network trace of every crawled webpage by crafting a
set of network signatures
for various media streaming
protocols and their variants, e.g, RTMP [5], HLS [1],
and RTSP [6]. Our goal
is to identify the presence of
media trafﬁc after the page load, and to ﬁnd the channel
provider
crafted these
signatures
in
the media streaming protocol messages (e.g., connect
in RTMP [5]) [22], [40], [41]. In addition, we also built
signatures to detect the MIME types speciﬁc to the streaming
protocols that are based on HTTP (e.g., Content-Type:
application/vnd.apple.mpegurl corresponds
to
HLS protocol). We then applied these custom-built signatures
to all TCP and UDP connections in a network trace of
the crawled page regardless of ports used. This allows
us to analyze media streams that are transmitted using
standard protocols on non-standard ports or streams that are
encapsulated in plain-text protocols (e.g., RTMP tunneled
in HTTP etc.). We found that both of these practices are
common in the investigated FLIS services.
Interpreting media sources. Once the network signature
matches, we try to automatically extract a source of the
media server to identify the channel provider facilitating the
FLIS. We found that the majority (85.7%) of media streams
identiﬁed by our signatures were broadcasted using unen-
crypted variants of RTMP. In this case, we search for an
RTMP connect message that is used to establish a network
connection between the client (i.e., Flash player) and the media
server. Figure 3 shows such a message sent to the channel
provider popeoftheplayers.eu. This message contains, among
other parameters, swfUrl: the URL of the Flash player,
tCurl: the URL of the media server, and pageUrl: the
URL of the page in which the Flash player was rendered.
Note that the pageUrl in RTMP connect messages is the
source URL of  that embeds a Flash player on the
page.
The other media streams that our signatures identiﬁed were
broadcasted using HLS (8.1%) and encrypted RTMP (6.2%)
5
Aggregators
Channel Providers
Seeds
SE URLs
URLs classiﬁed
Unique domains
500
513,324
23,549
5,685
Inspected domains
URLs visited
Streams found
Channel providers
1,000
859,126
52,469
309
Table I: Summary of dataset gathered and analyzed.
Figure 4: Distribution of FLIS aggregator websites in the Alexa
top 1 million websites.
from the media servers managed by just two different channel
providers. In these cases, we use the HTTP Host header and
source IP to identify the channel provider.
Dataset summary. We now provide a summary of the dataset
gathered and analyzed in our study. The ﬁgures are summa-
rized in Table I. We used 500 manually inspected aggregator
pages to generate search engine queries, and subjected 513,234
URLs for classiﬁcation of aggregator domains. We detected
more than 23,000 aggregator URLs which correspond to more
than 5,000 aggregator domains. We manually veriﬁed all the
aggregator domains and performed more than 850,000 visits
on the selected top 1,000 aggregator domains, analyzing more
than 1 Terabyte of trafﬁc. Our network signatures identiﬁed
52,469 media streams broadcasted from the infrastructure of
only 309 channel providers. The modest proportion of streams
identiﬁed is due to the fact that our crawler visited the URLs
indexed on the aggregator pages and not all of these URLs
correspond to pages that were broadcasting live streams when
being visited by our crawler.
IV. ANALYSIS OF FLIS SERVICES
In this section, we analyze several aspects and practices of
FLIS services. We start by inspecting the gathered dataset and
provide insights about the ownership and hosting preferences
of the FLIS parties. Next, we use Google Transparency Report
to measure copyright removal requests submitted against FLIS
parties. Furthermore, we design various methodologies to
inspect and report: possible trademark abuse in FLIS domains;
substandard, unavoidable, and deceptive advertisement set-
ups; unexplored threats to FLIS users, such as unknown
malware, fraudulent money grabbing scams, malicious browser
extensions; and link hijacking threats.
A. Operational Insights
FLIS popularity. From the collected 5,685 aggregator do-
mains, 50.74% were part of Alexa’s top 1 million websites
ranking. Figure 4 shows the distribution of the collected
aggregator domains across the ranks of Alexa. As we can see
0200K400K600K800K1000K04008001200Alexa RankingAggregator sitesHosting
Company
privatelayer.com Switzerland
Belize
koddos.com
Netherlands
ecatel.net
Canada
ovh.ca
portlane.com
Sweden
Hosting
#
Country Number CP
14
11
10