 count    
--------  
 100010  
(1 row)  
Time: 772.746 ms  
```  
### 使用窗口函数  
```  
select c1,c2,c3,c4 from  
(  
select c1,c2,c3,c4,row_number() over (partition by c1) as rn from   
  (select c1,c2,c3,c4,row_number() over (partition by c1,c2) as rn from tbl where c3=1) t  
where t.rn=1   
) t  
where rn (select c1 from tmp)   -- 下一个品牌  
        order by c3,c1 limit 1          -- 采用类似SKIP INDEX SCAN  
    ) t_max  
    where tbl.c3=1        -- 符合条件  
    and tbl.c1=(select c1 from tmp)     -- 商家ID等于上一次计算得到的下一个品牌  
    order by tbl.c3,tbl.c1,tbl.c2   
    ) t1  
    order by random() limit 10     -- 每个品牌最多返回10个商品, 排序必须与distinct on子句一样  
  )  
  union all  
  (  
    -- 递归查询  
    select * from (  
    select tbl.*, -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from   
    (select t_max_c1 from skip limit 1) s,  -- 得到上次计算的这次递归查询的品牌  
    LATERAL (select c1 from tbl   
             where c3=1                    -- 计算符合条件的  
	     and c1 > s.t_max_c1          -- 下一个品牌  
	     order by c3,c1 limit 1   
	    ) t_max,    
    LATERAL (select distinct on (tbl.c3,tbl.c1,tbl.c2) * from tbl         -- 当前计算品牌的10个商品  
             where tbl.c3=1   
	     and tbl.c1=s.t_max_c1     -- 当前品牌由上次的worker table. t_max_c1得到  
	     and tbl.* is not null   
	     order by tbl.c3,tbl.c1,tbl.c2  -- 每个品牌10个商品, 排序必须与distinct on子句一样  
	    ) tbl   
    ) t2  
    order by random() limit 10  
  )  
)  
select * from skip  
union all  
-- 符合条件的最后一个品牌  
select * from (  
select tbl.*, t.* as t_max_c1 from   
  (select c1 from tbl where c3=1 order by c3,c1 desc limit 1) t,  
  LATERAL ( select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.* from tbl   
    where  
    c3=1  
    and c1=t.c1  
    order by tbl.c3,tbl.c1,tbl.c2   
) tbl  
order by random() limit 10) as t3  
;  
```  
```  
select count(*) from   
(  
with recursive   
-- 符合条件的第一个品牌  
tmp as (select c1 from tbl where c3=1 order by c3,c1 limit 1),  
skip as (  
  (  
    -- 初始查询, 同时计算并输出下一个品牌ID  
    select * from (  
    select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.*,   -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from tbl ,   
    (select c1 from tbl   
        where c3=1           -- 计算符合条件的  
        and c1 > (select c1 from tmp)   -- 下一个品牌  
        order by c3,c1 limit 1          -- 采用类似SKIP INDEX SCAN  
    ) t_max  
    where tbl.c3=1        -- 符合条件  
    and tbl.c1=(select c1 from tmp)     -- 商家ID等于上一次计算得到的下一个品牌  
    order by tbl.c3,tbl.c1,tbl.c2   
    ) t1  
    order by random() limit 10     -- 每个品牌最多返回10个商品, 排序必须与distinct on子句一样  
  )  
  union all  
  (  
    -- 递归查询  
    select * from (  
    select tbl.*, -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from   
    (select t_max_c1 from skip limit 1) s,  -- 得到上次计算的这次递归查询的品牌  
    LATERAL (select c1 from tbl   
             where c3=1                    -- 计算符合条件的  
	     and c1 > s.t_max_c1          -- 下一个品牌  
	     order by c3,c1 limit 1   
	    ) t_max,    
    LATERAL (select distinct on (tbl.c3,tbl.c1,tbl.c2) * from tbl         -- 当前计算品牌的10个商品  
             where tbl.c3=1   
	     and tbl.c1=s.t_max_c1     -- 当前品牌由上次的worker table. t_max_c1得到  
	     and tbl.* is not null   
	     order by tbl.c3,tbl.c1,tbl.c2  -- 每个品牌10个商品, 排序必须与distinct on子句一样  
	    ) tbl   
    ) t2  
    order by random() limit 10  
  )  
)  
select * from skip  
union all  
-- 符合条件的最后一个品牌  
select * from (  
select tbl.*, t.* as t_max_c1 from   
  (select c1 from tbl where c3=1 order by c3,c1 desc limit 1) t,  
  LATERAL ( select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.* from tbl   
    where  
    c3=1  
    and c1=t.c1  
    order by tbl.c3,tbl.c1,tbl.c2   
) tbl  
order by random() limit 10) as t3  
) t;  
```  
```  
 count    
--------  
 100010  
(1 row)  
Time: 4758.684 ms (00:04.759)  
```  
每个循环比非随机排序增加了0.5毫秒左右。循环1万次基本上就差不多5秒了。  
```  
                                                                                                      QUERY PLAN                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=7041.09..7041.10 rows=1 width=8) (actual time=5911.323..5911.323 rows=1 loops=1)  
   Output: count(*)  
   Buffers: shared hit=5074419  
   ->  Append  (cost=6450.62..7039.59 rows=120 width=24) (actual time=0.656..5899.867 rows=100010 loops=1)  
         Buffers: shared hit=5074419  
         CTE tmp  
           ->  Limit  (cost=0.44..0.48 rows=1 width=8) (actual time=0.040..0.040 rows=1 loops=1)  
                 Output: tbl_2.c1, tbl_2.c3  
                 Buffers: shared hit=4  
                 ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_2  (cost=0.44..180668.28 rows=5048333 width=8) (actual time=0.039..0.039 rows=1 loops=1)  
                       Output: tbl_2.c1, tbl_2.c3  
                       Index Cond: (tbl_2.c3 = 1)  
                       Heap Fetches: 1  
                       Buffers: shared hit=4  
         CTE skip  
           ->  Recursive Union  (cost=587.38..6450.14 rows=110 width=24) (actual time=0.654..5846.618 rows=100000 loops=1)  
                 Buffers: shared hit=5074144  
                 ->  Subquery Scan on "*SELECT* 1"  (cost=587.38..587.51 rows=10 width=24) (actual time=0.653..0.668 rows=10 loops=1)  
                       Output: "*SELECT* 1".c1, "*SELECT* 1".c2, "*SELECT* 1".c3, "*SELECT* 1".c4, "*SELECT* 1".t_max_c1  
                       Buffers: shared hit=285  
                       ->  Limit  (cost=587.38..587.41 rows=10 width=32) (actual time=0.652..0.665 rows=10 loops=1)  
                             Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.t_max_c1, (random())  
                             Buffers: shared hit=285  
                             相比非随机排序，这里还增加了显示的排序  
			     ->  Sort  (cost=587.38..588.64 rows=504 width=32) (actual time=0.651..0.652 rows=10 loops=1)  
                                   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.t_max_c1, (random())  
                                   Sort Key: (random())  
                                   Sort Method: top-N heapsort  Memory: 26kB  
                                   Buffers: shared hit=285  
                                   ->  Subquery Scan on t1  (cost=0.92..576.49 rows=504 width=32) (actual time=0.076..0.622 rows=97 loops=1)  
                                         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.t_max_c1, random()  
                                         Buffers: shared hit=285  
                                         相比非随机排序，这里需要扫描整个品牌的索引TREE，所以耗时更多  
					 ->  Unique  (cost=0.92..570.19 rows=504 width=24) (actual time=0.074..0.598 rows=97 loops=1)  
                                               Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4, t_max.c1  
                                               Buffers: shared hit=285  
                                               InitPlan 2 (returns $2)  
                                                 ->  CTE Scan on tmp  (cost=0.00..0.02 rows=1 width=4) (actual time=0.043..0.043 rows=1 loops=1)  
                                                       Output: tmp.c1  
                                                       Buffers: shared hit=4  
                                               ->  Nested Loop  (cost=0.90..568.91 rows=504 width=24) (actual time=0.073..0.552 rows=274 loops=1)  
                                                     Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4, t_max.c1  
                                                     Buffers: shared hit=285  
                                                     ->  Index Scan using idx_tbl_1 on public.tbl tbl_3  (cost=0.44..562.07 rows=504 width=20) (actual time=0.058..0.380 rows=274 loops=1)  
                                                           Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4  
                                                           Index Cond: ((tbl_3.c3 = 1) AND (tbl_3.c1 = $2))  
                                                           Buffers: shared hit=281  
                                                     ->  Materialize  (cost=0.46..0.55 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=274)  
                                                           Output: t_max.c1  
                                                           Buffers: shared hit=4  
                                                           ->  Subquery Scan on t_max  (cost=0.46..0.54 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=1)  
                                                                 Output: t_max.c1  
                                                                 Buffers: shared hit=4  
                                                                 ->  Limit  (cost=0.46..0.53 rows=1 width=8) (actual time=0.012..0.012 rows=1 loops=1)  
                                                                       Output: tbl_4.c1, tbl_4.c3  
                                                                       Buffers: shared hit=4  
                                                                       InitPlan 3 (returns $3)  
                                                                         ->  CTE Scan on tmp tmp_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)  
                                                                               Output: tmp_1.c1  
                                                                       ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_4  (cost=0.44..122423.77 rows=1682778 width=8) (actual time=0.012..0.012 rows=1 loops=1)  
                                                                             Output: tbl_4.c1, tbl_4.c3  
                                                                             Index Cond: ((tbl_4.c3 = 1) AND (tbl_4.c1 > $3))  
                                                                             Heap Fetches: 1  
                                                                             Buffers: shared hit=4  