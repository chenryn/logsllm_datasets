played using already-existing vertices, whereas the suffix tree adds
2https://globalcptc.org/
3https://www.nationalccdc.org/
Table 1: Summary of experimental datasets.
# alerts
# teams
Duration (hrs)
Victim hosts known?
Competition type
CPTC-2018 CPTC-2017 CCDC-2018
330,270
43,611
1,052,281
Unknown
25
No
6
9
Yes
9
11
No
Pen. testing
Pen. testing
Blue teaming
Figure 1: An alert-driven attack graph of data exfiltration
over remoteware-cl (IDs are state identifiers, capturing con-
text). Three attacker teams exploit it: Teams 1 and 5 exploit
it twice, where subsequent attempts are shorter than the pre-
vious ones. There are three ways of exploiting the objective,
based on the actions that lead up to it, as determined by the
S-PDFA. Sinks are states that are too infrequent for the S-
PDFA. Edge labels show time progression in seconds.
duplicate vertices, making the graph bigger. This analysis raises
the question: when is learning (i.e., making generalizations) a good
idea, and when does simply showing raw data suffice?
Lastly, we validate the completeness of the AGs by matching
them against the teams’ self-reported claims. We found that most
of the AGs supported at least one of the claims. In fact, the AGs
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2421provide significantly more detail into attacker strategies than the
steps described by the teams. Some claims did not have correspond-
ing attack paths, which could indicate that those actions did not
trigger any alerts. Further investigation is required to understand
what causes such missing paths. We also conducted an informal
user-study with two senior security researchers regarding the cor-
rectness and usability of the AGs, whose responses suggest SAGE
is a promising technique for getting insights from intrusion data.
3 PRELIMINARY RESULTS
Alert triaging. SAGE compresses thousands of intrusion alerts
into a handful of alert-driven attack graphs. For CPTC-2018, SAGE
compresses over 330k alerts into 93 AGs; for CPTC-2017, SAGE com-
presses ∼43k into 169 AGs; and for CCDC-2018, SAGE compresses
∼1052k alerts into 139 AGs. Instead of investigating thousands of
alerts, analysts can triage alerts based on a few AGs of interest.
Behavior dynamics. The AGs capture the strategies used by the
participating teams, producing directly relevant insights for SOC
analysts. Figure 1 shows an AG with five attack paths, conducted by
three attacker teams. T1 and T5 conduct two attempts, where each
subsequent attempt is shorter than the previous one. In fact, the AGs
reveal that attackers follow shorter paths to re-exploit an objective
in 84.5% of the cases. The S-PDFA is critical in identifying various
ways of obtaining the same objective. In this case, it discovers that
there are three ways to reach the objective, based on significant
differences in the paths that lead up to it.
Strategy comparison. The AGs provide an intuitive layout to
compare attacker strategies for discovering strategic similarities,
scripted (simultaneous) attacks, and fingerprintable paths. For ex-
ample, T5 and T8 share a significant portion of a strategy, as seen
in Figure 1. In case of a scripted attack on multiple victims, their
AGs appear identical, including the time progression information.
A simple graph edit distance is enough to automate the detection of
such identical AGs. Lastly, because some of the objectives are only
exploited by a single attacker, these paths can uniquely fingerprint
attackers. SAGE finds 29 such fingerprintable paths in CPTC-2018
that can be used for attacker re-identification.
4 ROADMAP OF THE NEXT STEPS
Learning from infrequent data is a difficult problem, which is further
exacerbated by the unavailability of labeled data. SAGE leverages
explainable sequence learning to compress thousands of alerts into
a few objective-oriented attack graphs (AG). We lay the roadmap
for what we believe are interesting next steps.
The completeness of the AGs cannot easily be determined due
to the lack of ground truth. Further investigation is required to
understand why a certain path could be missing, and whether this
information can be used to improve faulty IDS signatures. More-
over, the current method for episode sequence construction does
not show distributed attacks in the same AG. Although chang-
ing the granularity of the sequence construction is a simple fix,
it produces considerably larger AGs. Thus, a trade-off is required
between sequence granularity and AG size. Additionally, a more
rigorous validation study is required to measure the correctness
of the AGs and to understand which design decisions enable the
analysts to reach correct conclusions. It is also currently unclear
how to empirically measure interpretability and the usefulness of
an AG. Further research is required into the design of a metric to
measure AG quality. Finally, the impact of adversarial attacks on
the resulting AGs is yet to be established.
Attack graph querying and prioritization is an important direc-
tion for future work since it will enable analysts to reach the most
interesting attack paths quicker. Further, a big open question for
SAGE is its handling of on-going attacks: If the AGs can be gener-
ated in real-time, evolving attacks can be monitored and highlighted.
The AGs can potentially even be used to predict next attack steps,
thus enabling proactive defense and dynamic risk assessment.
5 CONCLUSION
SAGE4 is utilized to generate alert-driven attack graphs (AG) for two
additional open-source alert datasets. We analyze the AGs produced
using alternative modeling approaches to show the effectiveness of
the S-PDFA. We demonstrate how these AGs can provide insights
into past attacks and intelligence for future attacks. Finally, we lay
the roadmap for further research into alert-driven AGs.
& Sons.
[5] Kerem Kaynar. 2016. A taxonomy for attack graph generation and usage in
[7] Stephen Moskal and Shanchieh Jay Yang. 2020. Framework to Describe Intentions
REFERENCES
[1] Faeiz M Alserhani. 2016. Alert correlation and aggregation techniques for reduc-
tion of security alerts and detection of multistage attack. International Journal of
Advanced Studies in Computers, Science and Engineering (2016).
[2] Michael Lyle Artz. 2002. Netspa: A network security planning architecture. Ph.D.
Dissertation. Massachusetts Institute of Technology.
[3] Thomas Cover and Joy Thomas. 1991. Elements of information theory. John Wiley
[4] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen, Kangkook Jee,
Zhichun Li, and Adam Bates. 2019. Nodoze: Combatting threat alert fatigue with
automated provenance triage. In NDSS.
network security. Journal of Information Security and Applications (2016).
[6] Qin Lin, Sridha Adepu, Sicco Verwer, and Aditya Mathur. 2018. TABOR: A
graphical model-based approach for anomaly detection in industrial control
systems. In Asia-CCS.
of a Cyber Attack Action. arXiv preprint arXiv:2002.07838 (2020).
[8] Nuthan Munaiah, Akond Rahman, Justin Pelletier, Laurie Williams, and Andrew
Meneely. 2019. Characterizing Attacker Behavior in a Cybersecurity Penetration
Testing Competition. In ESEM. IEEE.
[9] Azqa Nadeem, Christian Hammerschmidt, Carlos H Gañán, and Sicco Verwer.
2021. Beyond Labeling: Using Clustering to Build Network Behavioral Profiles
of Malware Families. Malware Analysis Using Artificial Intelligence and Deep
Learning (2021).
[10] Azqa Nadeem, Sicco Verwer, and Shanchieh Jay Yang. 2021. SAGE: Intrusion
Alert-driven Attack Graph Extractor. In 2021 IEEE Symposium on Visualization
for Cyber Security (VizSec). IEEE.
[11] Julio Navarro, Véronique Legrand, Aline Deruyver, and Pierre Parrend. 2018.
OMMA: open architecture for Operator-guided Monitoring of Multi-step Attacks.
EURASIP Journal on Information Security (2018).
[12] Julio Navarro, Véronique Legrand, Sofiane Lagraa, Jérôme François, Abdelkader
Lahmadi, Giulia De Santis, Olivier Festor, Nadira Lammari, Fayçal Hamdi, Aline
Deruyver, et al. 2017. Huma: A multi-layer framework for threat analysis in a
heterogeneous log environment. In FPS. Springer.
[13] Steven Noel, Matthew Elder, Sushil Jajodia, Pramod Kalapa, Scott O’Hare, and
Kenneth Prole. 2009. Advances in topological vulnerability analysis. In CATCH.
[14] Xinming Ou, Sudhakar Govindavajhala, and Andrew W Appel. 2005. MulVAL: A
Logic-based Network Security Analyzer. In USENIX security symposium.
[15] Reza Sadoddin and Ali Ghorbani. 2006. Alert correlation survey: framework and
techniques. In International conference on privacy, security and trust: bridge the
gap between PST technologies and business services.
[16] Saeed Salah, Gabriel Maciá-Fernández, and JesúS E DíAz-Verdejo. 2013. A model-
based survey of alert correlation techniques. Computer Networks (2013).
4https://github.com/tudelft-cda-lab/SAGE
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2422