点击钥匙按钮，输入keystore路径以及keystore密码、key的别名
key的密码，即可进行签名操作，如图24-11所示。
Sign/ExportAPK
Keystore
Browse
KeystorePassword
Keykey1
KeyPassword
Cancel
Sign
图24-11APKStudio签名
---
## Page 860
CTF特训营：技术详解、解题方法与
24.2.5使用Android Killer/jadx/APK Studi..
860/1144
APKStudio签名底层使用的是jarsigner工具，jarsigner工具也是
开发APK时使用的默认签名工具，但是使用jarsigner对重打包的APK
文件进行签名时，失败率却是比较高的，因此使用APKStudio对重打
包的APK文件进行签名往往会不成功，这里还是推荐使用24.2.1节的
签名方法。
本节介绍了三款逆向分析平台，总的来说，AndroidKiller功能最
为强大、最为齐全，缺点就是只支持Windows平台；jadx非常“酷
炫”，但是只能用来查看反编译的Java代码；APKStudio编译非常麻
烦，虽然集成了反编译BakSmali和重打包功能，但是用户体验并不好。
如何选择，需要各位读者自己判断
下一节将介绍大名鼎鼎的逆向分析平台JEB，该平台也是功能最
为强大、笔者最为喜欢的Android逆向分析平台。
---
## Page 861
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析861/1144
24.2.6使用JEB进行静态分析
JEB全称JEBDecompiler，由PNFSoftware公司开发，是一款闭
源商业软件，支持对APK、DEX、Jar文件的反编译。JEB目前有两个
版本，JEB1和JEB2。JEB1是最为经典的版本，目前已经停止对其的
开发与维护；JEB2仍在开发过程中，功能也在不断完善，其动态调
试等功能还是很值得期待的。JEB2售价不罪，商业版是每人每月150
美元；企业版是每月300美元，可供四人同时使用。有兴趣的读者可
以去JEB2的官网（https://www.pnfsoftware.com/）查看。
JEB在反编译DEX文件的过程中参考了Apktool等工具，但是其与
Apktool原版并不完全相同。同时，JEB在反编译DEX时生成Java文件
的行为也与jd-gui、FemFlower等工具的结果不同，其反编译生成的
并不是标准的Java文件，其中包含了"label、goto”等非Java语句
使用这个Java文件进行重打包是肯定会失败的，有时也会使语句晦涩
难懂，但是大部分情况下并不会影响理解。
EB最出色同时也是最吸引笔者的一项功能就是其交叉引用功
能，换句话说，你可以随便为类、方法、变量等改名字。这个功能也
---
## Page 862
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
862/1144
是JEB能够打败其他反编译工具的关键，其交叉引用功能非常方便
对某个成员改名后，该成员在其他类里的引用也会相应地改名，成为
反混淆过程中的利器。
介绍到此为止，下面我们赶紧来体验一下。在笔者编写初稿时
JEB2还不是很稳定，JEB1还是首选，但是到截稿时，JEB2已经非常
成熟了，基本包含了JEB1的所有功能，因此本节我们以JEB2为例进
行讲解。笔者使用的是JEB2正式版，其自带中文，用户体验还是比
较友好的。
JEB的结构如图24-12所示。
Application
Decompilation
Binary Code
JEB
Resources & Assets
Document
StructuredData
---
## Page 863
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
863/1144
图24-12JEB
启动完毕的界面如图24-13所示，可以看到在没有打开APK的情
况下，已经有很多标签页显示出来了。
图24-13JEB布局
将APK文件拖入JEB中的“工程浏览器”下，或者使用“打开
操作打开APK文件，就可以直接开始反编译了，如图24-14所示。左
边是文件树状图和类的树状图，右边默认显示的是BakSmali汇编代
码。
选中相应的类，按下“TAB”按钮，JEB会切换到“反编译的
---
## Page 864
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
864/1144
Java”一栏中，将反编译后的Java代码显示出来，如图24-15所示。
在“反编译的Java”一栏中直接双击目标类，也会将反编译后的Java
代码直接显示出来。
class ptit 
图24-14JEB反编译Smali
---
## Page 865
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
865/1144
2p.c
图24-15JEB反编译Java
我们重点来看一下“反编译的Java”一栏中有什么重要的功能。
左键点击代码中的某个方法名，再右击一下，会显示提示菜单，
此处比较重要的是“交叉引用”“备注”和“转换”三个功能，后面
的字母代表该功能的快捷键，如图24-16所示。
---
## Page 866
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
866/1144
工程2
9口
1op/easyjava.apt
 Mar
pubLic static void
e #2 (v2)
解析
Q
b.a.oont
备注
重命名
N
交叉引用
X
转换
日
atst
intve=
v1=I
新建包
移动到包
类型级
H
sfib.a.
重载
O
定义数
+rf:
Y
Soieet Typ
T
Lse
A
goto la
编字特半
CHA
CXT
v1-Integ
定义代码
TXC
C
编城代码
定义程序
日1
编程序
CXP
编栈权架
CNK
口
Deconpiling at Landroid/
Peconpiling at Lcom/a/es
未定义
320
图24-16
JEB右键
交叉引用功能可用于查看该方法在其他哪个地方被使用，如图
24-17所示。
---
## Page 867
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
867/1144
工程2
9口
口
.Pcom.
Ma
public static void a()
e #2 (v2)
b.a.oont
int ve =b.a-g
et(e).intValue[);
交义引用
24
v1-Integer.valueof(-1);
口
Deconpilingat Landroid/arch/a/a/b;
Peconpiting at Lcon/a/easyjava/b;
图24-17JEB交叉引用
注释功能类似于IDA的注释功能，添加注释后会在该行语句的末
尾添加注释，以方便查看，如图24-18所示。
---
## Page 868
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
868/1144
器江
口
#2 (v2)
int ve=b
注
(arg5));
G
Lse
gotelabe2
er.valueof(-1);
口
Deconpilingat Landroid/arch/a/a/b
Deconpiting at Lcon/a/easyjava/b;
220
图24-18JEB添加注释
改变进制常数，也就是进制转换功能，是笔者最喜欢的功能之一。
JEB的进制转换功能可以使整数在十进制、十六进制和八进制之间互
相转换。不要小看这个进制转换功能，在反编译的过程中，该功能能
够节约大量的时间，尤其是在转换进制查看资源引|用时会特别方便。
下面我们来看一下JEB的其他功能。
双击Manifest文件可以对Manifest.xml文件进行预览，在这里，我
---
## Page 869
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
869/1144
们能够看到解密之后的Manifest.xml文件，如图24-19所示。
资源文件提供了对res目录的预览功能，我们需要点击左侧的
Resources文件进入，该文件是查找Java代码中对id的引l用过程中必
不可少的功能。通过图24-20可以看到，public.xml中对id的表示都是
十六进制，此时就是我们的整数进制转换功能登场的时候了。
资源栏会显示对APK文件中assets目录的预览，并且能够以十六
进制的形式显示文件，非常方便。
以上就是对使用JEB进行静态分析的基本介绍了，关于使用JEB2
进行动态调试的相关内容，将在24.3节中详细介绍
---
## Page 870
CTF特训营：技术详解、解题方法与
24.2.6使用JEB进行静态分析
870/1144
图24-19JEB查看Manifest.xml
图24-20JEB查看资源文件
---
## Page 871
CTF特训营：技术详解、解题方法与
24.2.7其他的静态分析软件871/1144
24.2.7其他的静态分析软件
在静态分析领域，除了上述几款笔者经常用到的软件之外，还有
一些软件的知名度也非常高。
知名的恶意软件分析工具包Androguard也是在静态分析过程中经
常会用到的工具。Androguard是开源软件，可以从地址https:/l
github.com/androguard/androguard下载，其包含多个小工具，主要用
于对APK进行各个方面的分析。例如androapkinfo.py可以用来查看
APK文件的信息，androaxml.py可以用来解密APK包中的
AndroidManifest.xml文件，androdd.py可以用来生成APK文件中每个
类的方法的调用流程图，androdif.py可以用来比较两个APk文件的差
异，androgexf.py可以用来生成APK的GEXF格式的图形文件。目前
Androguard的开发进度比较快，上层框架经常修改，因此这里不再详
细介绍，有兴趣的小伙伴可以参看其官方文档。
逆同工真IDAPro也是支持对DEX文件的静态分析的，只要将
APK文件拖入IDAPro中，在弹出的窗口中选择class.dex，IDAPro就
会自动识别出DEX的文件格式，并且对其进行反编译，如图24-21所
---
## Page 872
CTF特训营：技术详解、解题方法与
24.2.7其他的静态分析软件
872/1144
示。更多关于IDAPro的内容可参阅网上相关信息
H
X口
Lorary function
DetaRegr
0
snits):0x5
oett-et
01
int
saitsji Ga
Lleit_eW_5+581
nit_w_2
图24-21IDAPro反编译Dex
---
## Page 873
CTF特训营：技术详解、解题方法与
24.3动态调试
873/1144
24.3动态调试
本节将介绍Dalvik层的动态调试方法。相比静态调试，动态调试
更简单，它通过对关键代码的插桩、打断、Hook等方式，直接跳过
复杂的分析流程，可一步得到最终结果，使用非常方便。本节将介绍
两种调试方法一—log调试和smali动态调试，以及两个知名Hook框架
Xposed和frida。
---
## Page 874
CTF特训营：技术详解、解题方法与
24.3.1使用log调试
874/1144
24.3.1使用log调试
log调试是一种最简单也是最常见的调试方法，通过修改反编译
后的BakSmali汇编代码，加入自定义的语句，可以实现打印信息、修
改执行流程、篡改返回值等功能。不过，这里需要注意的是，log调
试需要对APK进行重打包，因此并不适用于使用了完整性校验、签名
校验等保护技术的APK。在选择log调试的时候，首先要仔细研究代
码，根据是否存在类似的反篡改措施来判断是否使用log调试。
进入正题，Android开发框架提供了多个log静态方法，都位于
android.util.Log类中，比较常见的方法如下：
Log.v（Stringtag,Stringmsg)
Log.d(String tag,String msg)
Log.i(String tag,String msg)
Log.w(Stringtag,Stringmsg);
Log.e(Stringtag,Stringmsg)。
需要注意的是，这些方法都具有两个参数，因此我们在插入log
---
## Page 875
CTF特训营：技术详解、解题方法与
24.3.1使用log调试
875/1144
调试代码时，不仅需要传入打印的字符串变量，还需要另一个变量来
保存tag参数的字符串。因此在实际操作中，为了尽量减少代码的修
改，可以从上下文中选取一个不再使用的局部变量，用来存储tag字
符串。
下面来看一个实例，假设我们在分析过程中发现了关键的跳转代
码，其中v0表示我们的输入，V1表示自标字符串，如果输入与自标字
符串相等，则跳转至得到flag的流程，如果输入与目标字符串不相等
则跳转至没有得到flag的流程。因此，根据动态调试的理念，如果我
们能够直接得到v1的值，就可以直接得到flag了：
move-resultvo
if-eqz v0, :cond_0
此时，我们需要插入代码打印出v1的内容。log打印需要两个参
数，一个是v1（已经确定了），还需要再找一个局部变量来存储tag的
内容。这里包含两个思路：一个是可以将log方法的两个参数都写为
V1，这样可以减少对其他局部变量的影响，缺点是缺少标识，使得
og打印的信息容易被其他logcat信息淹没；另一个思路就是找一个不
再使用的变量，或者即将被赋予新值的变量，来承担起tag的作用
---
## Page 876
CTF特训营：技术详解、解题方法与
24.3.1使用log调试
876/1144
如果实在找不到闲置的局部变量，又不想使用第一个思路，则可以修
改你要打印语句所在的方法的声明，将局部变量数量加一，但是笔者
并不推荐这种做法，因为该做法可能会产生不可预知的后果。
好的，假设现在我们找到了闲置的局部变量v2，只要按照