(1) 建立连接——接受一个客户端连接，或者如果不希望与这个客户端建立连接，就
将其关闭。
120 ｜ 第5章
(2)接收请求——从网络中读取一条HTTP请求报文。
(3)处理请求——对请求报文进行解释，并采取行动。
(4)访问资源——访问报文中指定的资源。
(5)构建响应——创建带有正确首部的HTTP响应报文。
(6)发送响应——将响应回送给客户端。
(7)记录事务处理过程——将与已完成事务有关的内容记录在一个日志文件中。 113
用户空间
HTTP服务器软件进程
（3）处理请求
（5）构建响应
（2）接收请求 （4）访问资源
（7）记录事
务处理过程
TCP/IP
网络协
议栈
（1）建立连接
网络接口 对象存储
（6）发送响应
客户端 操作系统
图5-3 基本Web服务器请求的步骤 114
接下来的7个小节重点说明了Web服务器是怎样实现这些基本任务的。
5.4 第一步——接受客户端连接
如果客户端已经打开了一条到服务器的持久连接，可以使用那条连接来发送它的
请求。否则，客户端需要打开一条新的到服务器的连接（回顾第4章，复习一下
HTTP的连接管理技术）。
5.4.1 处理新连接
客户端请求一条到Web服务器的TCP连接时，Web服务器会建立连接，判断连接
的另一端是哪个客户端，从TCP连接中将IP地址解析出来。1一旦新连接建立起来
Web服务器 ｜ 121
并被接受，服务器就会将新连接添加到其现存Web服务器连接列表中，做好监视连
接上数据传输的准备。
Web服务器可以随意拒绝或立即关闭任意一条连接。有些Web服务器会因为客户
端IP地址或主机名是未认证的，或者因为它是已知的恶意客户端而关闭连接。Web
服务器也可以使用其他识别技术。
5.4.2 客户端主机名识别
可以用“反向DNS”对大部分Web服务器进行配置，以便将客户端IP地址转换成
客户端主机名。Web服务器可以将客户端主机名用于详细的访问控制和日志记录。
但要注意的是，主机名查找可能会花费很长时间，这样会降低Web事务处理的速
度。很多大容量Web服务器要么会禁止主机名解析，要么只允许对特定内容进行
解析。
可以用配置指令HostnameLookups启用Apache的主机查找功能。比如，例5-2中
的Apache配置指令就只打开了HTML和CGI资源的主机名解析功能。
例5-2 配置Apache，为HTML和CGI资源查找主机名
HostnameLookups off
HostnameLookups on
5.4.3 通过ident确定客户端用户
有些Web服务器还支持IETF的ident协议。服务器可以通过ident协议找到发起
115 HTTP连接的用户名。这些信息对Web服务器的日志记录特别有用——流行的通用
日志格式（Common Log Format）的第二个字段中就包含了每条HTTP请求的ident
用户名。2
如果客户端支持ident协议，就在TCP端口113上监听ident请求。图5-4说明了
ident协议是如何工作的。在图5-4a中，客户端打开了一条HTTP连接。然后，服
务器打开自己到客户端ident服务器端口（113）的连接，发送一条简单的请求，询
问与（由客户端和服务器端口号指定的）新连接相对应的用户名，并从客户端解析
出包含用户名的响应。
注1： 不同的操作系统在对TCP连接进行操作时会使用不同的接口和数据结构。在Unix环境下，TCP连接
是由一个套接字表示的，可以用getpeername调用从套接字中获取客户端的IP地址。
注2： 这个通用日志格式的ident字段被称为“rfc931”，这是根据定义ident协议的过时RFC版本（更新过
的ident规范记录在RFC1413中）命名的。
122 ｜ 第5章
（a）Mary建立了一条新的HTTP连接
端口4236 HTTP connection 端口80
（c）服务器发送请求
4236,80
（b）服务器建立ident连接
Mary 端口80Web服务器
ident connection
端口113
4236,80:USERID:UNIX:mary
（d）客户端返回ident响应
图5-4 使用ident协议来确定HTTP的客户端用户名
ident在组织内部可以很好地工作，但出于多种原因，在公共因特网上并不能很好地
工作，原因包括：
• 很多客户端PC没有运行ident识别协议守护进程软件；
• ident协议会使HTTP事务处理产生严重的时延；
• 很多防火墙不允许ident流量进入；
• ident协议不安全，容易被伪造；
• ident协议也不支持虚拟IP地址；
• 暴露客户端的用户名还涉及隐私问题。
可以通过Apache的IdentityCheck on指令告知Apache Web服务器使用ident查找
功能。如果没有ident信息可用，Apache会用连字符（-）来填充ident日志字段。
由于没有ident信息可用，在使用通用日志格式的日志文件中，第二个字段通常都
是连字符。
5.5 第二步——接收请求报文
连接上有数据到达时，Web服务器会从网络连接中读取数据，并将请求报文中的内
容解析出来（参见图5-5）。 116
解析请求报文时，Web服务器会：
• 解析请求行，查找请求方法、指定的资源标识符（URI）以及版本号，3各项之
间由一个空格分隔，并以一个回车换行（CRLF）序列作为行的结束；4
注3： HTTP的初始版本HTTP/0.9并不支持版本号。有些Web服务器也支持没有版本号的情况，会将报文
作为HTTP/0.9请求进行解析。
注4： 很多客户端会错误地将LF作为行结束的终止符发送，所以很多Web服务器都支持将LF或CRLF作
为行结束序列使用。
Web服务器 ｜ 123
• 读取以CRLF结尾的报文首部；
• 检测到以CRLF结尾的、标识首部结束的空行（如果有的话）；
• 如果有的话（长度由Content-Length首部指定），读取请求主体。
从网络中读取的请求报文
GET /specials/saw-blade.gif HTTP/1.0CRLF
Accept: image/gifCRLF
Host: www.j
因特网
LF CR LF CR moc.erawdrah-se o
客户端 服务器
图5-5 从连接中读取请求报文
解析请求报文时，Web服务器会不定期地从网络上接收输入数据。网络连接可能随
时都会出现延迟。Web服务器需要从网络中读取数据，将部分报文数据临时存储在
内存中，直到收到足以进行解析的数据并理解其意义为止。
5.5.1 报文的内部表示法
有些Web服务器还会用便于进行报文操作的内部数据结构来存储请求报文。比如，
数据结构中可能包含有指向请求报文中各个片段的指针及其长度，这样就可以将这些
首部存放在一个快速查询表中，以便快速访问特定首部的具体值了（参见图5-6）。
请求报文
GET /specials/saw-blade.gif HTTP/1.0CRLF
Accept: image/gifCRLF
Host: www.joes-hardware.comCRLF
CRLF
解析
请求报文解析后的编码
method: 1 specials/saw-blade.gif
version: 1.0
uri: www.joes-hardware.com
header count: 2
headers:
image/gif
body: -
name: Host value:
name: Acceptvalue:
图5-6 将请求报文解析为便捷的内部表示形式
124 ｜ 第5章
5.5.2 连接的输入/输出处理结构
高性能的Web服务器能够同时支持数千条连接。这些连接使得服务器可以与世界各
地的客户端进行通信，每个客户端都向服务器打开了一条或多条连接。某些连接可
能在快速地向Web服务器发送请求，而其他一些连接则可能在慢慢发送，或者不经 117
常发送请求，还有一些可能是空闲的，安静地等待着将来可能出现的动作。
因为请求可能会在任意时刻到达，所以Web服务器会不停地观察有无新的Web请
求。不同的Web服务器结构会以不同的方式为请求服务，如图5-7所示。
• 单线程Web服务器（参见图5-7a）
单线程的Web服务器一次只处理一个请求，直到其完成为止。一个事务处理结
束之后，才去处理下一条连接。这种结构易于实现，但在处理过程中，所有其他
连接都会被忽略。这样会造成严重的性能问题，只适用于低负荷的服务器，以及
type-o-serve这样的诊断工具。
• 多进程及多线程Web服务器（参见图5-7b）
多进程和多线程Web服务器用多个进程，或更高效的线程同时对请求进行处理。5
可以根据需要创建，或者预先创建一些线程/进程。6有些服务器会为每条连接
分配一个线程/进程，但当服务器同时要处理成百、上千，甚至数以万计的连接
时，需要的进程或线程数量可能会消耗太多的内存或系统资源。因此，很多多线 118
程Web服务器都会对线程/进程的最大数量进行限制。
• 复用I/O的服务器（参见图5-7c）
为了支持大量的连接，很多Web服务器都采用了复用结构。在复用结构中，要
同时监视所有连接上的活动。当连接的状态发生变化时（比如，有数据可用，或
出现错误时），就对那条连接进行少量的处理；处理结束之后，将连接返回到开
放连接列表中，等待下一次状态变化。只有在有事情可做时才会对连接进行处
理；在空闲连接上等待的时候并不会绑定线程和进程。
• 复用的多线程Web服务器（参见图5-7d）
有些系统会将多线程和复用功能结合在一起，以利用计算机平台上的多个CPU。
多个线程（通常是一个物理处理器）中的每一个都在观察打开的连接（或打开的
连接中的一个子集），并对每条连接执行少量的任务。
注5： 进程是一个独立的程序控制流，有自己的变量集。线程是一种更快、更高效的进程版本。单个程序可
以通过线程和进程同时处理多件事情。为了便于解释，我们将线程和进程当作是可以互换的概念。但
由于性能的不同，很多高性能服务器既是多进程的，又是多线程的。
注6： 会预先创建一些线程的系统被称为“工作池”系统，因为池中会有一组线程在等待工作。
Web服务器 ｜ 125
连接列表
连接
线程/进程
（a）单线程I/O结构 （b）多线程I/O结构
连接
复用器
（c）复用的I/O结构 （d）复用的多线程I/O结构
119 图5-7 Web服务器输入/输出结构
5.6 第三步——处理请求
一旦Web服务器收到了请求，就可以根据方法、资源、首部和可选的主体部分来对
请求进行处理了。
有些方法（比如POST）要求请求报文中必须带有实体主体部分的数据。其他一
些方法（比如OPTIONS）允许有请求的主体部分，也允许没有。少数方法（比如
GET）禁止在请求报文中包含实体的主体数据。
这里我们并不对请求的具体处理方式进行讨论，因为本书其余大多数章节都在讨论
这个问题。
5.7 第四步——对资源的映射及访问
Web服务器是资源服务器。它们负责发送预先创建好的内容，比如HTML页面或
JPEG图片，以及运行在服务器上的资源生成程序所产生的动态内容。
126 ｜ 第5章
在Web服务器将内容传送给客户端之前，要将请求报文中的URI映射为Web服务
器上适当的内容或内容生成器，以识别出内容的源头。
5.7.1 docroot
Web服务器支持各种不同类型的资源映射，但最简单的资源映射形式就是用请求
URI作为名字来访问Web服务器文件系统中的文件。通常，Web服务器的文件系
统中会有一个特殊的文件夹专门用于存放Web内容。这个文件夹被称为文档的根目
录（document root，或docroot）。Web服务器从请求报文中获取URI，并将其附加
在文档根目录的后面。
在图5-8中，有一条对/specials/saw-blade.gif的请求到达。这个例子中Web服务器
的文档根目录为/usr/local/httpd/files。Web服务器会返回文件/usr/local/httpd/files/
specials/saw-blade.gif。
/usr/local/httpd/files
请求报文 因特网
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com