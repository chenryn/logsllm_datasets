title:Hawkeye: Towards a Desired Directed Grey-box Fuzzer
author:Hongxu Chen and
Yinxing Xue and
Yuekang Li and
Bihuan Chen and
Xiaofei Xie and
Xiuheng Wu and
Yang Liu
Hongxu Chen
Singapore, Singapore
PI:EMAIL
Bihuan Chen
Fudan University
Shanghai, China
PI:EMAIL
Yinxing Xue∗
of China, Hefei, China
PI:EMAIL
Xiaofei Xie
Singapore, Singapore
PI:EMAIL
Yuekang Li
Singapore, Singapore
PI:EMAIL
Xiuheng Wu
Singapore, Singapore
PI:EMAIL
Hawkeye: Towards a Desired Directed Grey-box Fuzzer
Nanyang Technological University
University of Science and Technology
Nanyang Technological University
Nanyang Technological University
Nanyang Technological University
Yang Liu
Nanyang Technological University
Singapore, Singapore
PI:EMAIL
ABSTRACT
Grey-box fuzzing is a practically effective approach to test real-
world programs. However, most existing grey-box fuzzers lack
directedness, i.e. the capability of executing towards user-specified
target sites in the program. To emphasize existing challenges in
directed fuzzing, we propose Hawkeye to feature four desired prop-
erties of directed grey-box fuzzers. Owing to a novel static analysis
on the program under test and the target sites, Hawkeye precisely
collects the information such as the call graph, function and basic
block level distances to the targets. During fuzzing, Hawkeye eval-
uates exercised seeds based on both static information and the
execution traces to generate the dynamic metrics, which are then
used for seed prioritization, power scheduling and adaptive mutating.
These strategies help Hawkeye to achieve better directedness and
gravitate towards the target sites. We implemented Hawkeye as a
fuzzing framework and evaluated it on various real-world programs
under different scenarios. The experimental results showed that
Hawkeye can reach the target sites and reproduce the crashes much
faster than state-of-the-art grey-box fuzzers such as AFL and AFLGo.
Specially, Hawkeye can reduce the time to exposure for certain vul-
nerabilities from about 3.5 hours to 0.5 hour. By now, Hawkeye has
detected more than 41 previously unknown crashes in projects such
as Oniguruma, MJS with the target sites provided by vulnerability
prediction tools; all these crashes are confirmed and 15 of them
have been assigned CVE IDs.
CCS CONCEPTS
• Security and privacy → Vulnerability scanners;
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243849
KEYWORDS
Fuzz Testing; Static Analysis
ACM Reference Format:
Hongxu Chen, Yinxing Xue, Yuekang Li, Bihuan Chen, Xiaofei Xie, Xiuheng
Wu, and Yang Liu. 2018. Hawkeye: Towards a Desired Directed Grey-box
Fuzzer. In 2018 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3243734.3243849
1 INTRODUCTION
Security testing is one of the most effective vulnerability detec-
tion techniques for modern software. Among the security testing
techniques, fuzzing [30], or fuzz testing, is regarded as the most
effective and scalable, which provides various inputs to the program
under test (PUT) and monitors for abnormal behaviors (e.g., stack
or buffer overflow, invalid read/write, assertion failures, or memory
leaks) [13]. Since the proposal, fuzzing has gained the popularity in
industry and academia, and evolved into different types of fuzzers
for different testing scenarios. Fuzzers can be classified as black-box,
white-box or grey-box [10], according to their awareness of the
internal structure of the PUT. Recently, grey-box fuzzers have been
widely-used and proven to be effective [7]. Specificaly, AFL [48]
and its derivations [6, 7, 12, 15, 24, 43] receive plenty of attentions.
In general, the existing grey-boxing fuzzers (GFs) aim to cover
as many program states as possible within a limited time budget.
However, there exist several testing scenarios in which only partic-
ular program states are concerned and required to be sufficiently
tested. For example, if MJS [39](a JavaScript engine for embedded
devices) has a vulnerability discovered on MSP432 ARM platform,
similar vulnerabilities may occur in the corresponding code for the
other platforms. In such a situation, the fuzzer should be directed
to reproduce the bug at these locations. Another case is, when a
bug is patched, the programmers need to check whether the patch
completely fixes the bug. This requires the fuzzer to focus its efforts
on those patched code. In both scenarios, the fuzzer is required
to be directed to reach certain user specified locations in the PUT.
For clarity, we name such locations as target sites. Following the
definition in [6], we name the fuzzers that can fulfil the directed
fuzzing task as directed fuzzers.
As the state-of-the-art directed grey-box fuzzer (DGF for short),
AFLGo [6] casts the reachability of target sites as an optimization
problem and adopts a meta-heuristic to promote the test seeds with
shorter distances. Here, the distance is calculated according to the
average weight of basic blocks on the input seed’s execution trace
to the target basic block(s), where the weight is determined by the
edges in the call graph and control flow graphs of the program,
and the meta-heuristic is simulated annealing [22]. Based on these,
AFLGo solves the power scheduling problem for directed fuzzing
— how many new inputs (termed “energy” in AFLGo) should be
generated from the current test seed. To summarize, represented
by AFLGo, DGF achieves the goal of reaching the target sites by
combing both static analysis and dynamic analysis.
A pure dynamic execution can only get the feedback based on
the traces it has already covered without any awareness about the
predefined target sites. Thus, static analysis is required to extract
the necessary information for guiding the execution towards the
target sites for DGFs. The most widely used approach is to calculate
the distance (or weight) to the target sites for the components (e.g.,
basic blocks, functions) of the PUT, so that when executed, DGFs can
judge the affinity between current seed and the target sites from the
components in the execution traces. The major challenge is that the
distance needs to be effectively calculated without compromising
certain desired features. Particularly, it should help to retain the seed
diversity [4]. For example, the existing seed distance calculation
algorithm used in AFLGo always favors shortest path that leads
to the targets (see § 2.1), which may starve inputs that could be
more easily mutated to reach the target site and further trigger
crashes. The author of libFuzzer [26] argues that not taking into
account all possible traces may fail to expose the bugs hidden deeply
in longer paths [37]. This derives the first desired property P1.
Another challenge is that the static analysis should provide precise
information with acceptable overheads. This is because that coarse
static analyses will not benefit the dynamic fuzzing much, while
heavyweight static analyses themselves may take considerable time
before the dynamic fuzzing starts. This challenge derives the second
desired property P2. Hence, the first problem is to have a proper
static analysis which can collect necessary information for DGF.
After extracting the information with static analysis, there are
several challenges in dynamic analysis — how to dynamically ad-
just different strategies for the purpose of reaching the target sites
as fast as possible. The first challenge is how to properly allocate
energy to the inputs with different distances and how to priori-
tize the inputs closer to the targets. This derives the third desired
property P3. The second challenge is how to adaptively change the
mutation strategies, since GFs may possess various mutation oper-
ators at both coarse-grained (e.g., bulk deletion) and fine-grained
(e.g., bitwise flip) levels. This derives the fourth desired property
P4. Hence, the second problem is to make proper adjustments for
the dynamic strategies used in DGF.
To emphasize the two aforementioned problems, an ideal DGF
is expected to hold the following desired properties (§2.2):
P1 The DGF should have a robust distance-based mechanism that
can guide the directed fuzzing by considering all traces to the
targets and avoiding the bias to certain traces.
P2 The DGF should strike a balance between overheads and utilities
P3 The DGF should prioritize and schedule the seeds to reach target
in static analysis.
sites rapidly.
P4 The DGF should adopt an adaptive mutation strategy when the
seeds cover different program states.
In this paper, we propose our solutions to achieve the four desired
properties for DGF. For P1, we propose to apply the static analysis
results to augment the adjacent-function distance (§4.2); and the
function level distance and basic block level distance should be
calculated based on the augmented adjacent-function distance to
simulate the affinities between functions (§4.3). Meanwhile, during
fuzzing, we calculate basic block trace distance and covered function
similarity of the execution trace to that of the target functions (§4.4)
by integrating the static analysis results with the runtime execution
information. For P2, we propose to apply the analysis based on call
graph (CG) and control flow graph (CFG), i.e., the function level
reachability analysis, the points-to analysis for function pointers
(indirect calls), and the basic block metrics (§4.1). For P3, we propose
to combine the basic block trace distance and covered function
similarity for solving the power scheduling problem (§4.4) and the
seed priorization problem (§4.6). For P4, we propose to apply an
adaptive mutation strategy according to the reachability analysis
and covered function similarity (§4.5).
By taking these properties into account, we implemented our
DGF, Hawkeye, and conducted a thorough evaluation with various
real-world programs. The experimental results show that in most
cases, Hawkeye outperforms the state-of-the-art grey-box fuzzers
in terms of the time to reach the target sites and the time to expose
the crashes. Particularly, Hawkeye can expose certain crashes up
to 7 times faster than the state-of-the-art AFLGo, reducing the time
to exposure from 3.5 hours to 0.5 hours.
In practice, Hawkeye has been successfully discovering crashes
with the suspicious target sites reported by other vulnerability
detection tools and successfully found more than 41 previously
unknown crashes in projects Oniguruma [23], MJS[39], etc. All
these vulnerabilities have been confirmed and fixed; among them,
15 vulnerabilities have been assigned unique CVE IDs.
The main contributions of this paper are summarized as follows:
(1) We analyzed the challenges in directed grey-box fuzzing and
summarized the four desired properties for DGFs.
(2) We provided a measure of power function that can guide the
fuzzer towards the target sites effectively.
(3) We proposed a novel approach to boost the convergence speed
to the target sites by utilizing power scheduling, adaptive mu-
tation and seed prioritization.
(4) We implemented a novel fuzzing framework that organically
combines these ideas and thoroughly evaluated our results in
both crash reproduction and target site covering.
2 DESIRED PROPERTIES OF DGF
In this section, we first show an example to illustrate the difficulties
in DGF. Based on the observations from the example, we then
Functions in a Crashing Trace
main
...
_bfd_dwarf2_find_nearest_line
comp_unit_find_line
comp_unit_maybe_decode_line_info
decode_line_info
concat_filename
...
Functions in a Normal Trace
main
...
_bfd_dwarf2_find_nearest_line
scan_unit_for_symbols
concat_filename
...
File & Line
nm.c :1794
...
dwarf2.c :4798
dwarf2.c :3686
dwarf2.c :3651
dwarf2.c :2265
dwarf2.c :1601
...
...
...
File & Line
nm.c :1794
dwarf2.c :4798
dwarf2.c :3211
dwarf2.c :1601
Symbol
M
...
a
b
c
d
T
Z
Symbol
M
...
a
e
T
Z
Figure 1: Two execution traces related to CVE-2017-15939: M
is the main function, T is the target function, Z is the exit.
propose four desired properties for an ideal DGF. Finally, we review
the state-of-the-art DGF, namely AFLGo [6], with respect to these
four desired properties.
2.1 Motivating Example
Fig. 1 shows two execution traces related to CVE-2017-15939 [36],
which is a NULL pointer dereference bug caused by an incomplete
fix in CVE-2017-15023 [35]. This vulnerability is difficult for the ex-
isting GFs to discover. For instance, AFL [48] fails to detect this
vulnerability within 24 hours in all the 10 different runs we con-
ducted. This bug is triggered in nm from GNU binutils. In function
concat_filename, a NULL pointer is assigned and used without
checking, which triggers the segmentation fault. From a patch test-
ing perspective, we would like to target concat_filename (subse-
quently, we will denote this as T ) and guide the fuzzing to reproduce
the crashing trace (i.e., ⟨a, b, c, d,T , Z⟩ in Fig. 2).
For simplicity, in Fig. 2, we illustrate only three representative
traces for the CVE-2017-15939 by omitting 1) the overlapping func-
tions before a and 2) the other traces that do not pass the target
function T . The difficulty in discovering this CVE for the general
GFs (e.g., AFL) arises from the fact that the target function T is
deeply hidden in the crashing trace. As shown in Fig. 2, the call
chain of ⟨a, e,T , Z⟩ is shorter than ⟨a, b, c, d,T , Z⟩.
Since most of the GFs (such as AFL, LibFuzzer, etc.) are supposed
to be coverage oriented, and do not care specially about the targets,
they may not put most of their efforts in generating test seeds that
reach function T and testing the function throughly. For DGFs,
although there suppose to be some efforts to guide the fuzzing
procedure to favor some traces leading to T and focus more on
these traces, they may frequently miss all the traces. For example,
if AFLGo detects that two traces can reach the target sites, it will
highly likely favors the trace with shorter path: the distance be-
tween the seed to the target is determined by the average distance
of the components (basic blocks or functions) in the execution trace
to the targets, where the components’ distance to the target sites
are essentially determined by the number of edges between the
components to the targets. This mechanism causes AFLGo to give
more energy to the trace ⟨a, e,T , Z⟩ since it reaches the target T and
the induced trace distance is smaller than ⟨a, b, c, d,T , Z⟩; on the
Figure 2: The fuzzing scenario modeled from Fig. 1:
⟨a, b, c, d,T , Z⟩ is a crashing trace passing T , ⟨a, e,T , Z⟩ is a nor-
mal trace passing T , and ⟨a, e, f , Z⟩ is a trace not passing T .
other hand, less attention is put on ⟨a, b, c, d,T , Z⟩, which however
causes the crash under some circumstances. Worse still, other traces
like ⟨a, e, f , Z⟩ may be mistakenly assigned with more energy. As
a result, AFLGo was also not able to reproduce the crash within 24
hours in any of the 10 runs we conducted.
The challenges of the existing DGF roots in the following aspects:
1) the target functions may appear in several places in PUT, and
multiple different traces may lead to the target. 2) since the call
graph majorly affects the calculation of the trace distance (the