what the problem is. Inspecting the source code closer reveals that certificate pinning code is implemented. If
the need arose to assess some aspect of the underlying Twitter web API, you could go about it in various ways.
The first option that comes to mind is patching the certificate pinning functions out of the code using the
techniques explained in the previous section. However, this task can be tough. This is where runtime
manipulation tools work wonderfully. A Cydia Substrate extension written by iSEC Partners, named Android
SSL TrustKiller, is available that nullifies SSL checks at application runtime. It does all of this absolutely
transparently using the method-hooking API from Cydia Substrate. You can download it from
https://github.com/iSECPartners/Android-SSL-TrustKiller. After you install this application and then click
Restart System (Soft) in the Cydia Substrate application, the system reboots and when it starts again all SSL
worries are over. Figure 7.19 shows the Twitter application proxying through Burp.
Figure 7.19 Burp is able to proxy Twitter API traffic after loading Android SSL TrustKiller
Running logcat while starting the Twitter application reveals that it was SSL Trust Killer that made it possible
to proxy it. You can see the output here:
I/SSLTrusKiller(13955): getTrustManagers() override
I/SSLTrusKiller(13955): Hooking init in javax.net.ssl.SSLContext
I/SSLTrusKiller(13955): init() override in javax.net.ssl.SSLContext
I/SSLTrusKiller(13955): getTrustManagers() override
I/SSLTrusKiller(13955): getTrustManagers() override
I/SSLTrusKiller(13955): init() override in javax.net.ssl.SSLContext
I/SSLTrusKiller(13955): init() override in javax.net.ssl.SSLContext
I/SSLTrusKiller(13955): isSecure() called(org.apache.http.conn.ssl.SSLSocketFactory)
For extensive documentation on creating such an extension for Cydia Substrate, see
http://www.cydiasubstrate.com/.
Use Case: Root Detection
Now look at exactly the same example as shown in the “Patching Applications” section previously. The Root
Checker application checks whether your device is rooted and displays this status to the screen. We previously
disassembled the application and manually patched out these checks. However, you can also achieve this using a
runtime manipulation tool such as Cydia Substrate.
An extension named RootCloak Plus on the Play Store (see https://play .google.com/store/apps/details?
id=com.devadvance.rootcloakplus&hl=en) uses Cydia Substrate to perform exactly this task. It provides a user
interface where you can select which applications should not be able to see that the device is rooted by patching
checks for commonly known indications of root. If you add the Root Checker application to the list of
applications that root should be hidden from, RootCloak Plus does its job and Root Checker reports “Sorry! The
device does not have proper root access.”
The output of logcat also reveals that RootCloak was doing its job:
I/RootCloakPlus(16529): 4 Blacklisted app: com.joeykrim.rootcheck
I/RootCloakPlus(16529): 9 Blacklisted app: com.joeykrim.rootcheck
...
I/RootCloakPlus(16529): 14 Blacklisted app: com.joeykrim.rootcheck
Use Case: Runtime Monitoring
When assessing large applications, viewing what is going on under the hood of an application at runtime is
sometimes useful. A Cydia Substrate extension named Introspy (by iSEC Partners) allows you to do exactly this.
You can configure it to watch a number of important aspects of an application, such as any keys going into
encryption functions, or what is being sent in intents to other application components. Introspy provides an
easy configuration application that allows you to select the list of watched actions and the applications to watch.
Figure 7.20 shows the configuration application of Introspy.
Figure 7.20 The configuration available in Introspy
Each action discovered by Introspy will then be logged in logcat. A simple example of opening the Sieve
application and performing some actions reveals the following output in logcat:
I/Introspy(23334): ### IPC ### com.mwr.example.sieve - android.content.
ContextWrapper->startService()
I/Introspy(23334): -> Intent { cmp=com.mwr.example.sieve/.AuthService }
W/Introspy(23334): ### FS ### com.mwr.example.sieve - java.io.FileOutput
Stream->FileOutputStream()
W/Introspy(23334): -> !!! Read/write on sdcard: [/storage/emulated/0/And
roid/data/com.mwr.example.sieve/files/Backup (2014-07-31 22-13-39.54).xm
l]
I/Introspy(23334): ### SSL ### com.mwr.example.sieve - javax.net.ssl.SSL
Context->init()
I/Introspy(23334): Use of a custom Trust Manager, the app may do cert.
pinning OR validate any cert
You can download Introspy from https://github.com/iSECPartners/Introspy-Android.
Summary
In this chapter, each aspect of assessing an Android application was covered. It was shown that Android
applications can contain many types of vulnerabilities. In addition to containing vulnerabilities that are typical
of client-side code, Android applications can also exhibit a lot of problems that are unique to the platform. These
problems arise from incorrect application configurations or coding mistakes. Each aspect of an application can
be fine-combed by someone wishing to find vulnerabilities. This can be done using mature tools presented in
this chapter and using this chapter as a general assessment methodology.
Chapter 8 will allow you to apply the knowledge learnt in this chapter at a larger scale and perform assessments
on pre-installed applications on a device. Chapter 8 will also delve into leveraging vulnerabilities to gain access
to a device like a malicious hacker would.
CHAPTER 8
Identifying and Exploiting Android Implementation Issues
With everything that you know about how Android applications can be assessed, it's time to explore how an
attacker can use vulnerabilities in Android applications to gain access to Android devices. This chapter covers
finding vulnerabilities in pre-installed applications on devices and exploiting them to gain access. Imparting this
knowledge may come across as immoral to some, but a distinct gap in knowledge exists in this field. Attacking
phones and tablets is a valid part of security testing that should be treated no differently than testing other
technologies. The more you know about how to compromise such devices, the better chance you have to secure
them. First, this chapter looks at ways to find vulnerabilities in devices.
Reviewing Pre-Installed Applications
Think of the Android OS as a set of applications working together to provide functionality for the user. Each
installed application has its own attack surface that can be explored. To understand the risks of each installed
application, you would have to reverse engineer them separately and use all techniques covered in Chapter 7.
However, there are surely more focused ways to find vulnerabilities that allow the compromise of a device
without reviewing each application. The aim of this section is not to find vulnerabilities that provide root access
when exploited. Too much emphasis is placed on gaining root access to a device. Often root access is not
required to infiltrate user data. Rather, root access is just one way of achieving this. Giving a malicious
application installed on a compromised device a large set of permissions will facilitate interesting post-
exploitation tasks on a device without needing additional privileged access. Exploiting applications with
powerful contexts on a device is a priority for a bug hunter in order to maximize return on the time investment.
Finding these applications is explored next.
Finding Powerful Applications
Some applications on a device have a much higher degree of power over the OS than others. This power could
come through the permissions granted to them or the Linux user that they run as. A good example of a powerful
permission that can only be granted to pre-installed applications is INSTALL_PACKAGES. It has a protection level of
signature|system and is defined by the android package. An application that holds this permission has the
power to install a new package on the device. This means that it would be able to install a new package that
requests an arbitrary set of permissions. Exploiting an application that holds this permission could allow an
attacker to install a new package, perhaps a Trojan.
To find an application that holds INSTALL_PACKAGES in drozer, you can use the app.package.list module with
custom permission search filters. Running this module on an emulator running Android 4.4 KitKat is shown
here:
dz> run app.package.list -p android.permission.INSTALL_PACKAGES
com.android.packageinstaller (Package installer)
com.android.shell (Shell)
Running this same module on a Samsung Galaxy S4 running KitKat reveals the following packages holding this
permission:
dz> run app.package.list -p android.permission.INSTALL_PACKAGES
com.sec.kidsplat.installer (Kids Mode)
com.sec.android.app.samsungapps (Samsung Apps)
com.android.vending (Google Play Store)
com.sec.everglades (Samsung Hub)
com.android.shell (Shell)
com.samsung.android.app.assistantmenu (Assistant menu)
com.vodafone.vodafone360updates (Vodafone Updates)
com.sec.knox.containeragent (KnoxMigrationAgent)
com.sec.everglades.update (SamsungHub Updater)
com.sec.android.omc (OM Customize)
com.android.packageinstaller (Package installer)
com.sec.enterprise.knox.cloudmdm.smdms (New enrolment)
com.samsung.android.app.watchmanagerstub
(com.samsung.android.app.watchmanagerstub)
com.sec.android.preloadinstaller (Application installer)
com.osp.app.signin (Samsung account)
com.sec.android.app.DataCreate (Automation Test)
com.sec.knox.knoxsetupwizardclient (KNOX SetupWizardClient)
com.sec.android.Kies (USB settings)
Notice how many applications on an actual device use this dangerous permission.
A pre-installed application can request a sharedUserId of android.uid.system in its manifest. This effectively
sets its application UID to 1000 (system), which is a privileged context on a device. An application running as
the system user is able to install new applications, access any application's data directory, and manipulate the
device in many other ways. Essentially, the system user is only a single privilege level away from root. You can
find applications that use the system UID from drozer using the app.package.list module with a filter for UID
1000. Doing so on the KitKat emulator looks like this:
dz> run app.package.list -u 1000
com.android.inputdevices (Input Devices)
android (Android System)
com.android.settings (Settings)
com.android.keychain (Key Chain)
com.android.location.fused (Fused Location)
com.android.providers.settings (Settings Storage)
Performing this same command on a Samsung Galaxy S4 running KitKat reveals the following:
dz> run app.package.list -u 1000
com.sec.android.app.bluetoothtest (BluetoothTest)
com.sec.factory (DeviceTest)
com.sec.enterprise.mdm.services.sysscope (Enterprise SysScope Service)
com.sec.factory.camera (Camera Test)
com.samsung.pickuptutorial (PickupTutorial)
com.sec.setdefaultlauncher (SetDefaultLauncher)
com.android.settings (Settings)
com.samsung.android.app.gestureservice (GestureService)
com.sec.allsharecastplayer (Screen Mirroring)
com.wssyncmldm (Software update)
com.sec.android.app.FileShareClient (Wi-Fi Direct)
com.android.providers.settings (Settings Storage)
com.sec.android.fwupgrade (AllShare Cast Dongle S/W Update)
com.sec.android.service.sm (SecurityManagerService)
com.sec.bcservice (com.sec.bcservice)
com.sec.android.app.popupuireceiver (PopupuiReceiver)
com.android.inputdevices (Input Devices)
com.sec.android.app.FileShareServer (Wi-Fi Direct share)
com.sec.android.app.sysscope (SysScope)
android (Android System)
com.mobeam.barcodeService (Beaming Service)
com.sec.android.app.servicemodeapp (Service mode)
com.sec.android.app.mt (Mobile tracker)
com.android.keychain (Key Chain)
com.sec.android.app.nfctest (NFC Test)
com.qualcomm.cabl (Content Adaptive Backlight Settings)
com.sec.usbsettings (USBSettings)
com.samsung.android.app.assistantmenu (Assistant menu)
com.sec.android.app.wfdbroker (com.sec.android.app.wfdbroker)
com.coolots.chaton (ChatON Voice & Video Chat)
com.sec.android.app.parser (Factory Mode)
com.sec.android.inputmethod (Samsung keyboard)
com.dsi.ant.server (ANT HAL Service)
com.samsung.SMT (Samsung text-to-speech engine)
com.sec.knox.containeragent (KnoxMigrationAgent)
com.sec.android.easysettings (Easy settings)
com.samsung.android.app.filterinstaller (Filter Installer)
com.sec.android.omc (OM Customize)
com.sec.android.app.SecSetupWizard (Samsung SetupWizard)
com.sec.enterprise.mdm.services.simpin (Enterprise Sim Pin Service)
com.sec.android.providers.security (Security Storage)
com.sec.android.app.factorykeystring (DeviceKeystring)
com.sec.android.app.hwmoduletest (HwModuleTest)
com.sec.automation (TetheringAutomation)
com.sec.app.RilErrorNotifier (RilNotifier)
com.sec.pcw.device (Remote Controls)
com.samsung.helphub (Help)
com.sec.android.app.wlantest (WlanTest)
com.android.location.fused (Fused Location)
com.wssnps (wssyncmlnps)
com.sec.modem.settings (SilentLogging)
com.policydm (??Security policy updates)
com.sec.tcpdumpservice (TcpdumpService)
com.sec.knox.bridge (KNOX)
com.sec.android.preloadinstaller (Application installer)
com.samsung.android.providers.context (Context Service)
com.samsung.android.mdm (MDMApp)
com.qualcomm.location (LocationServices)
com.qualcomm.snapdragon.digitalpen (DigitalPenSDK)
com.samsung.android.MtpApplication (MTP application)
com.sec.android.app.personalization (Perso)
com.samsung.android.app.colorblind (Colour adjustment)
com.sec.knox.knoxsetupwizardclient (KNOX SetupWizardClient)
com.sec.dsm.system (DSMLawmo)
com.sec.android.Kies (USB settings)
com.sec.knox.seandroid (Knox Notification Manager)
A staggering 66 applications run as the system UID. Performing this test on any device where a manufacturer
has added a substantial set of its own applications will yield similar results. If any application running as the
system user contains a vulnerability, the security of the device would be severely crippled. Running applications
as the system user not only contradicts the “one application equals one user” model but also affords most
applications more power than they need. Generally only applications that need to be able to make significant
changes not directly supported by standard permissions or filesystem capabilities should be granted this access.
This section presented two examples of ways that applications can be considered powerful. However, the
concept of power is relative to the task you are trying to achieve. If your goal is to steal data from an application
and exploiting something on a device allows access to this data, this may also be seen as powerful. Searching for
powerful applications is only one way to prioritize the review of applications. Another way could be to check all
application certificates and prioritize the review of applications that are not made by Google. This is using the
assumption that third-party applications are of lower code quality than Google applications. There could also be
multiple other ways to prioritize the review of applications and this comes down to which approach you think
will yield the best results on the particular device.
Finding Remote Attack Vectors
This section explores some ways to remotely compromise an Android device by exploiting an application. This
section does not discuss the use of malware downloaded and installed by the user as an attack vector because
this is fairly obvious. When you consider computer systems in general, multiple attack vectors can allow you to
gain access to a system remotely. However, these vulnerabilities can be classed into two high-level categories:
server-side exploitation and client-side exploitation.
Server-side exploitation is when someone gains access to a computer through a listening service on that host,
which can mean anything from a web server to an auxiliary piece of software that listens on a port. The point
here is that an attacker can initiate the connection with the listening service.
Client-side exploitation is exploiting a piece of software installed on a host, which generally requires a degree of
user interaction. Browsers, document readers, and email clients are vulnerable to this type of attack. Android
devices contain many installed applications that could be vulnerable to this attack vector.
Browsers and Document Readers
Most client-side exploitation occurs through vulnerabilities in web browsers or document readers. These
attacks, which have been around for years, do not seem to be decreasing for the following reasons:
Browsers and document readers both have complex parsers that are normally implemented in native code.
They are both used in everyday computing.
They both contain dynamic scripting environments inside them.
Professional bug hunters build software fuzzers that target popular web browsers and document readers to find
exploitable vulnerabilities in them, and Android applications are not an exception.
Some Android devices come with document readers and other authoring applications installed by default. These
can be found by observation or by looking for relevant activity intent filters for common document types. For
instance, on a Samsung device the following application is available by default to read PDF documents:
dz> run app.activity.forintent --action android.intent.action.VIEW
--mimetype application/pdf
Package: com.infraware.polarisviewer5
com.infraware.polarisoffice5.OfficeLauncherActivity
dz> run app.package.info -a com.infraware.polarisviewer5
Package: com.infraware.polarisviewer5
Application Label: POLARIS Office Viewer 5
Process Name: com.infraware.polarisviewer5
...
The app.activity.forintent module in drozer was used to find all activities that have an intent filter for the
MIME-type application/pdf. You can find applications that handle other file types in a similar fashion.
After you have discovered all browsers and document readers on a device, you can start trying to finding
vulnerabilities in them. Often the parsers for these types of applications are written in native code for speed
optimization. This means that you would need to understand how to fuzz or reverse engineer native code to find
vulnerabilities, and these topics are outside the scope of this book. Any other application that uses native code
that takes untrusted input from a remote source would be classed in the same attack vector.
BROWSABLE Activities
Activities declared in the manifest can have an intent filter that allows it to be invoked from a web browser. This
is done by specifying a category of android .intent.category.BROWSABLE. This intent filter is normally used by
applications to allow users to open appropriate content inside an installed application rather than in the
browser. App stores installed on the device use this functionality to automatically invoke the store from a web