        {
            // 
            if (lpToken)
            {
                CStackBuffer buffer2;
                // http://xxxx>
                LPWSTR lpHttpUrl = lpToken + 1;
                size_t length = wcslen(lpHttpUrl);
                if (!buffer2.resize(2*length + 2))
                {
                    buffer2.release();
                    return 0x8007000E;
                }
                // 将 URL 规范化后存入 buffer2
                // length = wcslen(lpHttpUrl) + 1
                // eax = 0
                int res = ScCanonicalizePrefixedURL(
                    lpHttpUrl, buffer2.get(), &length);
                if (!res)
                {
                    length = buffer1.getFakeSize() >> 3;
                    res = pMethUtil->ScStoragePathFromUrl(
                        buffer2.get(), buffer1.get(), &length);
                    if (res == 1)
                    {
                        if (buffer1.resize(length))
                        {
                            res = pMethUtil->ScStoragePathFromUrl(
                                buffer2.get(), buffer1.get(), &length);
                        }
                    }
                }
            }
            // ......
        }
        // ......
    }
可以看出这里的关键函数为 `CMethUtil::ScStoragePathFromUrl`，该函数会将请求转发给
`ScStoragePathFromUrl`，后者简化后的伪代码如下所示：
    typedef struct _HSE_UNICODE_URL_MAPEX_INFO {
        WCHAR lpszPath[MAX_PATH];
        DWORD dwFlags;        // The physical path that the virtual root maps to
        DWORD cchMatchingPath;// Number of characters in the physical path
        DWORD cchMatchingURL; // Number of characters in the URL
        DWORD dwReserved1;
        DWORD dwReserved2;
    } HSE_UNICODE_URL_MAPEX_INFO, * LPHSE_UNICODE_URL_MAPEX_INFO;
    int ScStoragePathFromUrl(
        const struct IEcb *iecb, 
        const wchar_t *buffer2, 
        wchar_t *buffer1, 
        unsigned int *length, 
        struct CVRoot **a5)
    {
        wchar_t *Str = buffer2;
        // 检查是否为 https://locahost:80/path http://localhost/path
        // 返回 /path>
        int result = iecb->ScStripAndCheckHttpPrefix(&Str);
        if (result ScReqMapUrlToPathEx(Str, &mapinfo);
        int v36 = result;
        if (result CchGetVirtualRootW(&Str1);
        if (n == mapinfo.cchMatchingURL)
        {
            if (!n || Str[n-1] && !_wcsnicmp(Str1, Str, n))
            {
                goto LABEL_14;
            }
        }
        else if (n + 1 == mapinfo.cchMatchingURL)
        {
            if (Str[n] == '/' || Str[n] == 0)
            {
                --mapinfo.cchMatchingURL;
                goto LABEL_14;
            }
        }
        v36 = 0x1507F7;
    LABEL_14:
        if (v36 == 0x1507F7 && a5)      // a5 == 0
        {
            // ......
        }
        // 0x12
        int v16 = mapinfo.cchMatchingPath;
        if (mapinfo.cchMatchingPath)
        {
            // v17 = L"t\aaaaaaaAAA...."
            wchar_t *v17 = ((char*)&mapinfo - 2) + 2*v16;
            if (*v17 == '\\')
            {
                // ......
            }
            else if (!*v17)
            {
                // ......
            }
        }
        // v7 = wcslen(/path>)
        int v18 = v16 - mapinfo.cchMatchingURL + v7 + 1;
        int v19 = *length > 2);
            qmemcpy(
                buffer1, 
                mapinfo.lpszPath, 
                4 * v24);
            LOBYTE(v24) = 2*mapinfo.cchMatchingPath;
            qmemcpy(
                &buffer1[2 * v24],
                (char*)mapinfo.lpszPath + 4 * v24,
                v24 & 3);
            qmemcpy(
                &buffer1[mapinfo.cchMatchingPath],
                &Str[mapinfo.cchMatchingURL],
                2 * (v7 - mapinfo.cchMatchingURL) + 2);
            for (wchar_t *p = &buffer1[mapinfo.cchMatchingPath]; *p; p += 2)
            {
                if (*p == '/') *p = '\\';
            }
            *length = mapinfo.cchMatchingPath - mapinfo.cchMatchingURL + v7 + 1;
            result = v36;
        }
        return result;
    }
函数 `HrCheckIfHeader` 会调用 `ScStoragePathFromUrl` 两次，在第一次调用
`ScStoragePathFromUrl` 时，会执行如下的关键代码：
    {
        wchar_t *Str = buffer2;
        // 返回 /path>
        int result = iecb->ScStripAndCheckHttpPrefix(&Str);
        int v7 = wcslen(Str);
        HSE_UNICODE_URL_MAPEX_INFO mapinfo;
        result = iecb->ScReqMapUrlToPathEx(Str, &mapinfo);
        // 0x12   L"c:\inetpub\wwwroot"
        int v16 = mapinfo.cchMatchingPath;
        //  v18 = 0x12 - 0 + wcslen('/path>') + 1 = 0x12 + 10249 + 1 = 0x281c
        int v18 = v16 - mapinfo.cchMatchingURL + v7 + 1;
        int v19 = *length > 3;
显然有 `0x82 < 0x281c`，所以函数 `ScStoragePathFromUrl` 将 `*length` 填充为 `0x281c` 并返回