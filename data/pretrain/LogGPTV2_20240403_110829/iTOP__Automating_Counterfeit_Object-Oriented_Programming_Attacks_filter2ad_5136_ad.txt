after a gadget has been simulated (line 6), constraints are added to
: list of gadget types in the order they should be called in
Algorithm 1: Extend gadget chain (rec_chain)
chain
candidates: mapping of gadget types to candidate gadgets
state
: prog. state just before the virt. func. dispatch
Result: a chain of compatible gadgets
gadget ← pop first element of chain
targets ← candidates.lookup(gadget)
for function ∈ targets do
state: call function
state: simulate until return to dispatcher gadget
state: add gadget constaints
if state is feasible then
state: simulate until callsite is reached again
if chain = ∅ then
return function
1 begin
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
else
tmp ← rec_chain(rest_of_chain, candidates, state)
if tmp (cid:44) ∅ then
return function + tmp
return ∅
the simulation as described in the constraints column of Table 1
(line 7). If, at any point, the simulation state becomes unsatisfiable,
the simulation backtracks and tries a different gadget candidate.
Further, in case iTOP discovers no satisfiable chain which can
be built, it backtracks and generates a different chain. If, however,
the simulation state is still satisfiable after all gadgets have been
called, a compatible exploit has been discovered and a payload is
generated. Note that during simulation, iTOP generates a set of
memory constraints CM for the buffer.
Generating the Attack Payload. The steps to find a valid gadget
chain are as follows. After the simulation phase, a valid chain is
found; next a payload can be generated. Since payload generation
depends on details such as attack type (e.g., COOP requires addi-
tional logic for object overlapping) and payload specifics (loops
and conditionals require additional logic), the precise approach can
9
SHELL(); EXECUTE(system, &binsh);SHELL(); SHELL(); _r1 = LOADVAL( &binsh );EXECUTE( system, _r1 );_r1 = LOADVAL( system );EXECUTE(system, &binsh);_r1 = LOAD();ASSERT _r1 == &binsh;_r1 = LOAD();MANIPULATE( _r1 );ASSERT _r1 == &binsh;EXECUTE(system, &binsh);EXECUTE(system, _r1);EXECUTE(system, _r1);_r1 = LOAD();ASSERT _r1 == &binsh;_r1 = LOAD();MANIPULATE( _r1 );ASSERT _r1 == &binsh;ESL PayloadGenerated ChainsESL LibrariesESL Alternativesdiffer depending on the payload, but the overall approach stays the
same. For example, iTOP leverages the set of constraints CM as well
as the combination of gadgets in the valid chain to generate a mem-
ory layout for the target buffer that will lead to the execution flow
as defined in the ESL definition. Thus, when implementing a new
attack type using ESL’s Python-based API, the payload generation
logic can be modified to target the new attack.
The valid memory layout (i.e., list of object layouts Obj) is then
saved into a file for further usage by the analyst. Optionally, iTOP
can continue the search to discover more payloads. The total num-
ber of payloads found can help in evaluating the quality of a defense
mechanism, and alternative payloads could help in circumventing
blocklists and pattern-based defense systems.
6 EVALUATION
In this section, we address the following research questions (RQs).
• RQ1: How can iTOP be used to construct control-flow hijack-
• RQ2: How much protection do static CFI policies offer after
• RQ3: How much attack surface reduction is needed to ef-
fectively protect from control-flow hijacking attacks? (Sec-
tion 6.3)
• RQ4: How vulnerable are programs with no CFI protection
deployment? (Section 6.2)
ing attacks? (Section 6.1)
in-place to control-flow hijacking attacks? (Section 6.4)
Target Programs. For our detailed evaluation, we focus on NodeJS
(v. 8.9.1, C/C++ code, compiled as library) [37]. For our broader eval-
uation, we target Nginx [35] (v. 1.13.7, C code), Apache Httpd [4] (v.
2.2.24, C code), LibTorrent [14] (v. 1.1.0, C code), Redis [41] (v. 2.6.14,
C code), Firefox [13] (v. 36.0a1, C/C++ code) and Chrome [18] (v.33
C/C++ code).
Table 3: The CFI policies used in this work do not impose
any runtime write constrains and are context-insensitive.
CFI Policy
IFCC/MCFI
Safe IFCC/MCFI
ShrinkWrap/IVT [23]
VTV
VTint
Marx/VCI
[7, 47]
[52]
[12, 39]
Solutions Description
[36, 47]
[36, 47]
function parameter source types
function parameter safe source types
strict program sub-hierarchy
program sub-hierarchy
all program virtual tables
impose the virtual table hierarchy
Experimental Setup. The evaluations were performed on a sys-
tem with Intel i5-2500k CPU (3.30 GHz), 16 GB RAM, and running
the Linux Mint 18.3 operating system. The CFI policies used in
these experiments are presented in Table 3. Note that the created
exploits were executed by enabling a CFI policy, which consist in
removing the calltargets that would be not available after such a
CFI defense is deployed. Lastly, all programs were compiled with
Clang/LLVM -O2 compiler optimization flag.
Gadget Search Timeout. Note that we used a timeout of 6 hours
(1/4 of a day) in our gadget search algorithm. Once this time limit
was reached the search was terminated. While exploit generation
is a 1-time process and from a practical point of view, an approach
that requires even multiple days of computation could still be use-
ful (since manually generating a complex exploit for a real-world
CFI-hardened binary can also take a significant amount of time). In
this work, we opted to keep a common and plausible timeout level
for comparison purposes, which can be extended in future work.
Table 4: The ESL payloads. Each payload produces chains
containing N statements. Symbol meaning: ✓: payload con-
tains loop/conditional statements, ✗= not available gadget.
Add values from two registers
Payload Description
Load argument register with constants
regset
Read value from address to register
memrd
memwrt Write value from register to address
regadd
printf Write to stdout
Spawn a shell
shell
Cause an infinite loop
iloop
Conditionally write to address
cond
Loop with exit conditions
for
Spawn a shell only if value at address
cshell
Print all integers from 0 - 100
count
Call mprotect with user controlled args
mprt
Read an environment variable
env
Loops
N
1-2
✗
1
✗
1
✗
3
✗
1-5
✗
1-5
✗
1
✓
2
✗
4-6
✓
3-11 ✗
5-8
✓
1-9
✗
1-5
✗
cond
✗
✗
✗
✗
✗
✗
✗
✓
✓
✓
✓
✗
✗
To understand ESL’s 13 attack primitives, we use Table 4, which
depicts the 13 ESL payload scenarios for which different payloads
were generated. We developed these 13 primitives by studying re-
lated work and by investigating the most used and useful minimal
set of program primitiveness needed in order to be able to express
all kinds of program behaviors. The goal of ESL primitives was to
include payloads which: (1) demonstrate basic features of iTOP, (2)
have complex control flow, and (3) are realistic payloads usable for
real-world attacks.
6.1 Case Study: NodeJS
In this section, we analyze iTOP’s payload building capabilities on
NodeJS. We chose NodeJS because it is a popular, widely used ap-
plication containing both C and C++ code that is frequently used
as a library in other applications. We focus on three representative
payloads to demonstrate the core features of iTOP: spawning a shell,
controlling argument registers, and finally conditionally writing a
value into memory. We then combine these payloads to a complex
payload to manipulate the control flow.
Table 5: Performance results for payload generation.
Payload Time Chains Payloads
shell
iloop
cond
10:53
02:29
21:56
10+
10+
10+
31
1
1
To highlight the results obtained for different payloads when us-
ing NodeJS, we use Table 5 which shows the time needed to perform
the analysis, number of chains and number of payloads generated.
Time indicates the time needed to generate the first payload in
minutes and seconds (mm:ss) format, Chains: number of candidate
chains, Payloads: number of different payloads (capped at 10). We
recorded two demo videos: (1)5 spawning a system shell with no CFI
5Video: spawning a system shell with no CFI policy used: https://tinyurl.com/yyvxncqj
10
policy in-place, and (2)6 spawning a system shell based on NodeJS
under the VTint CFI policy in-place. These demonstrate iTOP’s
attack building capabilities with and without CFI protection active.
6.2 Assessing CFI Policies against NodeJs
In this section, we show under which CFI policies iTOP is still able
to generate exploits. Note that static CFI policies can considerably
reduce the attack surface of a binary, significantly complicating at-
tack generation. Using callsite/calltarget mappings, we can evaluate
which CFI policies are effective attack deterrents.
Table 6: Payload generation under six CFI policies.
d
a
a
y l o
P
regset
memrd
memwrt
regadd
printf
shell
iloop
cond
for
cshell
count
mprt
env
F I
C
C
C
C - s a f e
C
V
M a r x
T i n t
V
T
V
o
N
I F
I F
S W
✓ 00:11:50 ✓ 00:34:36 ✓ 00:40:22 ✓ 00:29:31 ✓ 02:51:19 ✓ 03:35:42 ✓ 04:24:22
✗ ✓ 02:44:18 ✓ 02:31:07
✓ 00:41:22 ✓ 01:11:21 ✓ 01:22:04
✗
✗ ✓ 01:10:08 ✓ 02:12:03 ✓ 01:07:05
✓ 00:03:47 ✓ 00:37:52 ✓ 00:41:12
✓ 00:20:24 ✓ 00:40:12 ✓ 00:43:44 ✓ 00:05:18
✗
✓ 00:11:32 ✓ 01:35:56 ✓ 01:46:12 ✓ 00:31:29 ✓ 00:37:10 ✓ 00:46:12 ✓ 01:06:04
✓ 00:10:53 ✓ 01:45:54 ✓ 02:00:11 ✓ 00:30:10 ✓ 02:21:44
✗
✗
✓ 00:02:29 ✓ 00:37:43 ✓ 00:41:48 ✓ 00:01:35
✗ ✓ 00:43:47
✗
✗ ✓ 03:25:39 ✓ 02:49:04 ✓ 05:43:14
✓ 00:21:56
✗ ✓ 04:25:04 ✓ 03:03:10 ✓ 04:45:27
✓ 00:33:30
(cid:28)
(cid:28)
✗ ✓ 00:54:19 ✓ 00:48:44 ✓ 00:53:41
✓ 00:43:14
(cid:28)
(cid:28)
✗ ✓ 02:12:05 ✓ 03:23:11
✓ 00:27:47 ✓ 00:55:23
✗
(cid:28)
✓ 00:37:00 ✓ 00:57:32 ✓ 01:25:23
✗ ✓ 01:15:35 ✓ 00:55:23
✓ 00:11:20 ✓ 01:30:25 ✓ 01:44:35 ✓ 00:33:47 ✓ 01:32:28 ✓ 01:49:27 ✓ 02:55:23
✗
✗
✗
✗
(cid:28)
To highlight the capabilities of iTOP w.r.t. payload generation un-
der fine-grained CFI policies, we employ Table 6 which depicts the
payload generation results for NodeJS by running iTOP with each of
the 6 CFI defenses. We used the payloads presented in Table 4 with
different CFI policies in-place. SW: ShrinkWrap, ✓ denotes one or
more payloads were successfully generated, while a ✗ indicates
that no valid payload was found. Behind the ✓ symbol the total
time needed for the generation of the payload is given (hh:mm:ss
format). The reasons for failure:(cid:28)= timeout; or ✗ = required gadget
is not available. We observed that there is an overlap of gadgets
that are usable depending on the used defense. In the future, we
want to investigate if these gadgets exhibit specific characteristics