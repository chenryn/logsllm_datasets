title:Emilia: Catching Iago in Legacy Code
author:Rongzhen Cui and
Lianying Zhao and
David Lie
Emilia: Catching Iago in Legacy Code
Rongzhen Cui
University of Toronto
PI:EMAIL
Lianying Zhao
Carleton University
PI:EMAIL
David Lie
University of Toronto
PI:EMAIL
Abstract—There has been interest in mechanisms that enable
the secure use of legacy code to implement trusted code in
a Trusted Execution Environment (TEE), such as Intel SGX.
However, because legacy code generally assumes the presence of
an operating system, this naturally raises the spectre of Iago
attacks on the legacy code. We observe that not all legacy code
is vulnerable to Iago attacks and that legacy code must use
return values from system calls in an unsafe way to have Iago
vulnerabilities.
Based on this observation, we develop Emilia, which automat-
ically detects Iago vulnerabilities in legacy applications by fuzzing
applications using system call return values. We use Emilia to
discover 51 Iago vulnerabilities in 17 applications, and ﬁnd that
Iago vulnerabilities are widespread and common. We conduct an
in-depth analysis of the vulnerabilities we found and conclude
that while common, the majority (82.4%) can be mitigated with
simple, stateless checks in the system call forwarding layer, while
the rest are best ﬁxed by ﬁnding and patching them in the legacy
code. Finally, we study and evaluate different trade-offs in the
design of Emilia.
I.
INTRODUCTION
(TCB) of
To protect security-sensitive code from the large trusted
commodity systems, many
computing base
hardware-based [15], [10], [1] and hypervisor-based [6], [5],
[38] trusted execution environments (TEEs) have been pro-
posed. User-level TEEs, such as SGX, isolate “trusted” appli-
cations from the large, legacy TCB of commodity systems,
which includes the OS, drivers as well as all privileged
applications on a system. In general, there are two ways these
trusted applications can be implemented—they can either be
implemented from scratch, or one can port a legacy application
that runs on a normal OS into the TEE. While the former
is more secure, it also requires more effort. In contrast, the
latter requires less effort, but faces a signiﬁcant drawback—
legacy code assumes the presence of an operating system (OS),
but the TEE isolates the trusted application from the OS. To
service system calls (abbreviated to syscall hereinafter) to the
OS, legacy applications running in TEEs may use an OS-
forwarding layer (OFL) that intercepts syscalls made by the
legacy application and forwards them to an untrusted OS run-
ning outside the TEE. Unfortunately, while the TEE provides
isolation for the application’s runtime state and memory, this
syscall interface still represents a signiﬁcant attack surface for
the trusted application.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24328
www.ndss-symposium.org
Legacy code inherently trusts the OS that it makes syscalls
to. However, if the legacy code is inside a TEE, and the
commodity OS is outside the TEE, this makes the commodity
OS untrusted, which raises the possibility of the OS executing
an Iago attack. An Iago attack is one where the untrusted OS
abuses the trust the legacy application places in the syscall
interface to return maliciously crafted syscall return values.
Such attacks were ﬁrst identiﬁed in [5] and [32], and then
eventually named Iago attacks in [4]. While most legacy code
implicitly trusts the OS, this does not automatically mean that
all legacy code is vulnerable to Iago attacks—for code to be
vulnerable, it must a) neglect to sanitize the return values of
a syscall and b) use the return values in an unsafe way. Thus,
for legacy code to be vulnerable to an Iago attack, it must have
an Iago vulnerability that meets these two criteria.
Many trusted applications use a custom OFL to enable
legacy code to run in TEEs such as SGX by forwarding
syscalls to the untrusted OS, as exempliﬁed by TaLoS [26],
SGX SQLite [31] and Intel-SGX-SSL [17]. In addition, legacy
code can also be ported to work with general-purpose TEE-
secured containers with OFL, e.g., TensorSCONE [24] inte-
grates TensorFlow with SCONE [2] (Intel SGX) to enable
secure execution of machine learning computations, or TEE-
secured language interpreters like ScriptShield [43]. A number
of OFLs try to mitigate Iago vulnerabilities by performing
syscall return value sanitization, as exempliﬁed by Panoply[35]
and Glamdring[28], or by narrowing the syscall interface as
proposed in Graphene-SGX[40] and SCONE[2]. However,
such sanitization is often ad-hoc and may be incomplete,
leaving applications still vulnerable to Iago attacks.
In this paper, we 1) attempt to measure the base rate of Iago
vulnerabilities in a wide range of legacy code; and 2) analyze
how well a sample of current OFLs can shield legacy code
from Iago vulnerabilities. To do this, we design and implement
Emilia1, a syscall fuzzer that ﬁnds Iago vulnerabilities in
legacy code. Compared to regular syscall fuzzers, Emilia
fuzzes applications from the syscall interface, by replacing
legitimate OS syscall return values with fuzz values, designed
to ﬁnd and trigger Iago vulnerabilities. Previous work [13]
has used binary-level symbolic execution and taint-tracking
to detect unsafe information ﬂows from syscalls to sensitive
uses, but their approach suffers from path explosion, whereas
fuzzing does not. We run Emilia on 17 popular applications
and ﬁnd a total of 51 Iago vulnerabilities, which we categorize
into 5 basic types. We also found two Iago vulnerabilities in
Google’s Asylo [9] system, an OFL that has been specially de-
signed to protect applications against Iago vulnerabilities. Both
1Emilia was the wife of Iago who eventually reveals Iago’s treachery in
Shakespeare’s tragedy, Othello.
vulnerabilities have been conﬁrmed and ﬁxed by the Asylo
team. Our main result is that Iago vulnerabilities are wide-
spread—nearly every application we examined had at least
one vulnerability. Moreover, we ﬁnd that many vulnerabilities
are stateless, which should be possible for OFLs to mitigate
efﬁciently, but a number of current OFLs and SGX applications
actually only partially mitigate these vulnerabilities or do not
mitigate them at all.
In summary, this paper makes the following contributions:
vulnerabilities by fuzzing syscall return values.
• We present Emilia, a tool that ﬁnds and detects Iago
• We use Emilia to measure the frequency of the Iago
vulnerabilities in real-world applications, and have iden-
tiﬁed a total of 51 vulnerabilities involving memory
corruption in 17 popular legacy applications and glibc.
We ﬁnd that while Iago vulnerabilities are widespread,
the vast majority are easily-mitigatable Local or Static
vulnerabilities.
• We perform an analysis of 6 OFLs and SGX applications
and ﬁnd that the majority neglect to mitigate some or all
Iago vulnerabilities. Only one, Graphene-SGX, catches
all Local and Stateful Iago vulnerabilities. While Emilia
is intended to fuzz unmodiﬁed legacy applications, we
ported it to fuzz Google Asylo [9] and discovered two
Iago vulnerabilities which have been reported and ﬁxed.
• We identify some of the underlying causes of the Iago
vulnerabilities by characterizing the syscall return values.
Our analytics sheds some light on how legacy applications
can be better ported to the OFL’s protection.
We begin by providing background and describing our Iago
vulnerability model in Section II. We then describe the design
and implementation of our Iago fuzzer, Emilia in Section III,
followed by an analysis of the Iago vulnerabilities found in a
corpus of legacy applications in Section IV, where we catego-
rize the vulnerabilities into Static, Local, Stateful, External and
Channel. We analyze the security and Iago mitigation ability
of current OFLs in Section V and then evaluate the different
Emilia fuzzing strategies in Section VI. Finally, we discuss
limitations, related work and conclude in Sections VII, VIII
and IX.
II. BACKGROUND AND VULNERABILITY MODEL
For legacy applications running in a TEE with an OFL, the
syscall interface represents the attack surface for a malicious
OS. A malicious OS kernel can cause unexpected and undesir-
able application behavior by generating unexpected or illegal
inputs to applications. Applications generally interact with the
OS kernel via the syscall interface. A benign OS adheres to
a well-known set of behavior when generating responses for
sysalls, which may be speciﬁed in documentation such as that
found in a syscall’s “man pages”. However, in this work, we
model a malicious OS that is free to arbitrarily deviate from the
speciﬁcation and return any values it wishes in its responses.
The possibility of syscall manipulation by a malicious OS
was identiﬁed by Ports and Garﬁnkel in their Overshadow
system [32]. However, it was not until the analysis performed
by Checkoway and Shacham that
attacks were
[4]. Their proposed Iago
formally named Iago attacks
these
attacks consisted of only scalar syscall return values, and
two attacks were identiﬁed in their work: one caused
replay attacks on Apache servers with mod ssl, due to
the syscall getpid being used in part for randomness;
and the other one even achieved arbitrary code execution
because malloc (wrapped in glibc) could be tricked
to modify arbitrary memory by malicious return values of
brk and mmap. However, a malicious OS is free to return
both corrupted scalar and buffer values. For example, in the
syscall getsockopt(int sockfd, int level, int
optname, void *optval, socklen_t *optlen)
the OS may ﬁll optval with arbitrary values. We do note
that in general, the contents of such buffers are copied from
the OS’ address space into SGX enclave memory by the OFL,
which will only copy as much data as it has allocated space
for. Thus, while a malicious OS can return a longer buffer,
the entire buffer may not necessarily be passed to the trusted
application depending on the implementation of the OFL.
For example, in the getsockopt syscall, a proper OFL
will only copy at most the number of bytes speciﬁed by the
application in the optlen argument. We exclude arguments
that could be set by a malicious party outside of the OS from
the Iago attack surface. For example, the value returned in
the buf argument of the read(int fd, void *buf,
size_t count) syscall could have been set by a malicious
attacker with access to the ﬁle being read from. We restrict
Iago attacks to only modify values that are exclusively under
the control of the OS.
Iago attacks require an exploitable Iago vulnerability to be
successful. We deﬁne an Iago vulnerability in an application
as a section of code in the application that uses a syscall
return value in an unsafe way, which leads to unexpected or
undesirable behavior in the application. These vulnerabilities
occur because legacy applications inherently trust the OS and
thus do not perform validation on the syscall values returned
by the OS.
In this paper, we focus on Iago vulnerabilities that can
result in pointer corruption. While malicious syscall return
values can be used in a variety of unsafe ways, e.g., the
return value of getpid can be used as an entropy source,
or the time provided by the untrusted OS can be relied on
as timestamps to generate system logs, the most egregious
misuse of untrusted data is when it can result in code or data
pointer corruption [37]. Data pointer corruption can lead to
memory safety errors, which can lead to information leakage or
further memory corruption. Code pointer corruption can result
in arbitrary code execution. For certain pointer corruptions,
the attacker may be unable to retrieve the information directly,
but there are possibilities that the illegally accessed data can be
revealed to the attacker through other channels. For example,
a buffer containing data from out-of-bounds memory read may
be later written to a ﬁle, network socket or side-channel.
III. DESIGN AND IMPLEMENTATION OF EMILIA
A. Objective
Since Iago vulnerabilities result from the misuse or im-
proper handling of syscall-returned results, Emilia’s objective
is to trigger as many syscalls and as much code that executes
after a syscall as possible to search for vulnerabilities. When
2
1
2
3
4
5
/* after fuzzing the return value of fstat with
value other than 0, new write() syscall will
be triggered */
if (0 != fstat(fd, &st)) { // 0 for success
log_error_write("..."); // invoke write()
...
}
Listing 1: An example of a new syscall invocation introduced
by fuzzing
searching this code, we must take two aspects into account:
1) Static code locations. Naturally, we wish to ﬁnd and execute
as many syscall invocations as possible. 2) Context. Even the
same static location may be executed under different contexts
(i.e. different local/global variables values), which may lead
to different arguments being passed to the syscall, as well as
different code paths after the syscall.
to ﬁnd vulnerabilities,
While Emilia is technically a fuzzer, as it dynamically
generates test cases in an effort
it
differs from standard fuzzers in two key aspects. First, standard
fuzzers generally aim to maximize path coverage by fuzzing
program inputs. In contrast, Emilia aims to maximize syscall
coverage, which is to maximize both the number of static
syscall invocations and the contexts under which they are
executed by fuzzing syscall return values.
It is possible to increase syscall coverage by only mu-
tating syscall return values and not program inputs. To see
why, consider Listing 1, which is taken from Lighttpd [23].
If Emilia injects a non-zero return value for fstat, then
log_error_write in the error handling path will be in-
voked and will subsequently invoke the write syscall, which
does not occur in the vanilla execution of the program (i.e.,
the execution with no fuzzed return values). From this we see
that fuzzing some syscall return values may cause new syscall
invocations, which subsequently can also be iteratively fuzzed
(and which may go on to cause more syscall invocations).
Although mutating both program inputs and syscall return
values is required to ﬁnd as many Iago vulnerabilities as
possible, our current implementation of Emilia focuses only on
the latter—trying to maximize syscall coverage while covering
only a single path—Emilia does not fuzz inputs, only syscall
return values. We envision that Emilia can be combined with
standard application fuzzers in a straightforward way—each
input that triggers a new path can be given to Emilia as a
starting point for achieving syscall coverage. We leave the
exploration of this for future work.
The other key difference compared to standard fuzzers is
that as opposed to generating and invoking an application with
the fuzz inputs, Emilia responds to syscall invocations from
the application with fuzz return values. As a result, Emilia is
necessarily passive, i.e., the fuzzer can only respond to syscalls
that the application has made, because the goal is to fuzz the
application from the point of view of a malicious kernel. This
is the reverse of kernel fuzzers [19], [30], which attempt to fuzz
the kernel from the point of view of a malicious application.
Emilia bears some similarity with network protocol fuzzing [8]
in that it sends fuzz inputs inside responses to requests.
Measuring syscall coverage: Since Emilia’s objective is to
attain syscall coverage, we ﬁrst deﬁne here, how we intend to
measure syscall coverage. Simply counting static invocation
of syscalls is insufﬁcient as it doesn’t take into account the
path or context leading up to and following the syscall—
syscalls are often located in libraries (such as libc and whose
functions may have many incoming and outgoing code paths).
Moreover, since Iago vulnerabilities are necessarily a result of
unsafe syscall result handling after the syscall invocation, it
is important that our measurement take into account different
code paths after a syscall invocation.
To effectively identify all execution paths leading to and
following from syscalls, one way is to directly collect the
application’s control ﬂow (e.g., conditional/unconditional di-
rect/indirect branches). One can envision employing applica-
tion tracing, using efﬁcient hardware such as Intel Processor
Trace (PT) [16], which collects such information that can be
later retrieved in the form of data packets. An alternative
that does not require specialized hardware is to instrument
the application. However, because many applications invoke
syscalls via libraries, this would necessitate instrumenting not
only the application but all libraries as well.
In light of these drawbacks for hardware-tracing or instru-
mentation, we observe that a proxy for the path after a syscall
is the path leading up to a syscall, which can be approximated
by the call path (i.e., functions in the call stack) leading up
to the syscall—if two syscall invocations have different call
paths, they must necessarily have different code paths both
before and after the syscall, owing to the different caller and
callees that must exist if the call paths are different. Moreover,
the call stack, which gives us the call path, is easily accessible
from the OFL without needing to instrument the application
or special tracing hardware. Thus, we formally deﬁne a syscall
invocation in Emilia as a tuple of syscall name (i.e., read,
write) and its call stack at the point the syscall is invoked,
and measure syscall coverage as the number of unique syscall
invocations that are executed.
B. Design of Emilia
An overview of Emilia’s architecture is shown in Figure 1.
Emilia consists of Interceptor, Controller and Value Extractor,
with the application’s source code, binary and optionally a
client binary as inputs. Core dumps generated from crashes
are the output.
Figure 1: Components and workﬂow of Emilia
Interceptor: Rather than replacing the kernel, Emilia in-
tercepts system calls made between the application being
fuzzed and a standard OS kernel. Interception is performed
3
using an interceptor adapted from strace [36] to capture and
handle the syscalls made by the application. We use strace to
intercept syscalls instead of a libc wrapper to intercept libc
calls to enable Emilia to also detect Iago vulnerabilities in
libc implementations. Isolation techniques such as Graphene-
SGX [40] and SCONE [2] place the C library inside the trusted
world, and in many cases, this code is ported from a legacy
C library to maximize compatibility and minimize engineering
effort.
When a syscall is trapped, the interceptor will replace
values in the return ﬁelds/buffers in the application’s address
space and registers (e.g., $rax) with fuzz values and continue
execution. In the case of buffers (i.e., pointer arguments passed
to the syscall), the interceptor determines the buffer size either
based on its type or from other arguments. For example,
int getsockopt(int sockfd, int level, int
optname,void *optval, socklen_t *optlen)
has three return ﬁelds: the return value (ret), optval and
optlen. The sizes of ret and optlen are sizeof(int)
and sizeof(socklen_t). For optval,
the maximum
length is given by the original optlen passed to the syscall.
By ﬁlling the buffer with the known max length, strace
would not directly overﬂow the buffer during writeback if
the application properly allocates the pointer and provides a
correct length argument. The interceptor would also calculate
a hash of stack trace for each syscall encountered to help
identify them for syscall coverage. The stack trace is produced
by libunwind embedded in strace.
Controller: The entire fuzzing process is coordinated by a
python script, which invokes and feeds the other components
with instructions. We deﬁne one iteration as the cycle from
when the controller starts the application for fuzzing to when
it crashes due to fuzzing or terminates normally.
The role of the controller is threefold: 1) Target selec-
tion. The controller regulates the fuzzing loop and selects
the syscalls to be fuzzed, called targets, for the interceptor.
The return values of syscalls that are not targets are passed
on without modiﬁcation. 2) Satisfying external conditions.
Sometimes, the application may have external dependencies
for continuous execution. In particular, if the application is a
server, the interceptor will send a signal to the controller when
the accept syscall (a syscall indicating the server is ready to
handle client connections, which could be accept, select,
epoll_wait, etc.) is reached. Upon receipt of the signal,
the controller will launch the corresponding client to connect
to the server application so that fuzzing can continue. 3) Core
dump analysis. If a core dump is produced after the application
crashes, the controller would also brieﬂy analyze them for
deduplication and ﬁlter out the ones that are not caused by
memory corruptions (e.g., assertion error).
Value extractor: The fuzz values used by Emilia can also
affect syscall coverage. Similar to the approach by Shastry
et al. [34], we also perform a coarse-grained static analysis
on the application’s source code to generate values that may
help increase syscall coverage, which is done by the value
extractor. The value extractor extracts constant values against