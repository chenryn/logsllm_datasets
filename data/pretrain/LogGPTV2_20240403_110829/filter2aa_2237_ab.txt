### PAC Script for Selective URL Blocking

A PAC (Proxy Auto-Config) script can selectively block URLs based on specific criteria. Here is an example:

```javascript
dnsResolve(escapedUrl);
if (url.indexOf('authtoken') > 0) return 'nosuchproxy';
return 'DIRECT';
```

### Active Attacks: Prerendering Pages

**Objective:** Load a full webpage in the background and hide it from the user.

**Traditional Method:** Hidden iframes were commonly used, but many major sites now disallow framing with `X-Frame-Options`.

**Prerendering:** This technique "gives a hint to the browser to render the specified page in the background, speeding up page load if the user navigates to it." It is supported by Chrome and Edge. (Source: [caniuse.com/link-rel-prerender](http://caniuse.com/link-rel-prerender))

### Example: Loading Sensitive URLs

**Scenario:** A known URL fetches other, sensitive URLs. For instance, Facebook and Google photos are publicly accessible via CDNs without requiring cookies. If you know the correct HTTPS URLs, you can access them directly.

**Example URLs:**
- Facebook: `https://scontent-lhr3-1.xx.fbcdn.net/v/t1.00/p206x206/10703974_10152242502538_3345235623697056133_n.jpg?oh=15e8923d456d6748e644f1ca&oe=9CF5DA2A`
- Google: `https://lh3.googleusercontent.com/x5gjakl6gC_av3fs3fa_y6cX-h367fsdaSFyFU5yE-yTW-Qp9Fe=w250-h250-p-k-nu`

### Deanonymization Demonstration

**Summary:**
- Force the user to request URLs containing identifying information.
- Use JavaScript injection or captive portals.
- Combine 302 redirects and prerendering.
- Use identifiers to discover further public information (e.g., username, full name, employment).

### PAC Command and Control Loop

**Components:**
- **Injected JavaScript:** Encodes commands into hostnames ending with `.e`.
- **PAC Script:** Decodes and evaluates `.e` commands, encodes the result as `.r` hostname, and leaks all URLs by default.
- **API Calls:** To selectively block and leak specific URLs.
  - `addUrlBlock(url_regex)`
  - `addUrlLeak(url_regex)`
  - `clearRegexes()`

### DNS Encoding

**Constraints:**
- DNS hostnames: Max 63 characters per segment, max 253 characters total, only A-z, 0-9, _, - characters allowed.
- **Base 36 Encoding:** Split long data into multiple hostnames, decode and reassemble on the attacker's DNS server.

### OAuth

**Definition:** An open protocol for secure authorization in web, mobile, and desktop applications. (Source: [oauth.com](https://oauth.com))

**Usage:**
- Underlies many single sign-on (SSO) systems.
- Most implementations allow exchanging tokens via URL parameters and 302 redirects.

**Demonstration:**
- Actively attempt to log in to sites that use OAuth authentication.
- Detect successful logins.
- Leak the tokens to the attacker.
- Block the victim's browser request.
- Replay the request to gain full control over the victim's account.

### Google First-Party SSO

**Example:**
- `google.com` automatically logs you into other Google domains (e.g., `google.co.uk`, `blogger.com`, `youtube.com`).
- **URL Example:**
  - `https://accounts.google.com/ServiceLogin?passive=true&continue=https://www.google.co.uk/`
  - `https://accounts.google.co.uk/accounts/SetSID?ssdc=1&sidt=&continue=https://www.google.co.uk`

**Attack:**
- Steal the URL via DNS.
- Gain an authenticated session on `google.co.uk`.

### Google Drive

**Details:**
- `drive.google.com` and `googleusercontent.com` cannot share cookies.
- Auth tokens are passed via URL.
- **Steps:**
  - Load `drive.google.com` on the victim's side via prerender.
  - Find document IDs from image thumbnails.
  - Inject `https://drive.google.com/uc?id=&export=download` into the victim's browser.
  - Intercept the redirect to `googleusercontent.com` with the auth token.
  - Replay captured URLs on the attacker's side to download documents.

### Google Account Demonstration

**Accessible Data:**
- Uploaded Photos
- Gmail email summaries
- Calendar Agenda
- Reminders
- Contact details
- Full Location history

### Facebook Demonstration

**Status:**
- Facebook broke the implicit authorization between Facebook and Microsoft OAuth.
- Users with Outlook email addresses could reset their Facebook password without additional credentials.

### VPN Considerations

**Protection:**
- VPNS allow data to travel safely over hostile networks via an encrypted tunnel to a trusted endpoint.
- Should protect on public Wi-Fi.

**Malicious Gateway vs. VPN:**
- Attacker cannot sniff HTTPS URLs.
- Attacker cannot intercept HTTP traffic.

**PAC Leak vs. VPN:**
- Attacker can sniff HTTPS URLs.
- Attacker can intercept HTTP traffic.

**Toxic Proxy vs. VPN:**
- Traffic is tunneled between the machine and the VPN endpoint.
- Traffic is then tunneled through the WPAD proxy.
- Finally, it reaches its destination.

**Affected Software:**
- OpenVPN: No mitigation through server configuration.
- PrivateInternetAccess: Released a fix to disable WPAD.
- Cisco AnyConnect: Can be mitigated through server proxy configuration.

**Unaffected Software:**
- Windows built-in L2TP/PPTP: WPAD disabled by default.

### Mitigations

1. Turn off WPAD.
2. Configure an explicit URL for your PAC script and serve it over HTTPS or from a local file.

### Vendor Fixes

**Reported Issues:**
- Context reported PAC issues to vendors on March 3, 2016.
- OS X, iOS, and Apple TV: Patched in May (CVE-2016-1801).
- Google Chrome: Patched in July (CVE-2016-5134).
- Android: Patched in July (CVE-2016-3763).
- Mozilla: Patch pending.
- Microsoft: Patch pending.

### Summary

- A network-based attacker can inject PAC scripts into browsers.
- PAC scripts can leak all HTTPS URLs via DNS to an attacker.
- We demonstrated how to deanonymize users, steal OAuth tokens, and access private data.
- A VPN may not protect against a malicious proxy.

### Questions

Now, go turn off WPAD!

@noxrnet @pdjstone