PAC script can do selective blocking of URLs: 
dnsResolve(escapedUrl);  
if (url.indexOf('authtoken') > 0) return 'nosuchproxy';  
return 'DIRECT'; 
Active Attacks - prerender(er)-ing pages 
We want to load a full webpage, but hide it from the user 
Traditionally hidden iframes were great for this: 
but, most big sites disallow framing with X-Frame-Options 
Prerender “gives a hint to the browser to render the specified page in 
the background, speeding up page load if the user navigates to it.” 
http://caniuse.com/link-rel-prerender 
Supported by Chrome and Edge 
Active Attacks - prerender(er)-ing pages 
Load a known URL that fetches other, sensitive URLs 
All your Facebook and Google photos are publically accessible 
Served from CDNs, no cookies required  
If you know the right HTTPS URLs: 
https://scontent-lhr3-1.xx.fbcdn.net/v/t1.00/p206x206/10703974_10152242502 
538_3345235623697056133_n.jpg?oh=15e8923d456d6748e644f1ca&oe=9CF5DA2A 
https://lh3.googleusercontent.com/x5gjakl6gC_av3fs3fa_y6cX-h367fsdaSF 
yFU5yE-yTW-Qp9Fe=w250-h250-p-k-nu 
Deanonymization demonstration 
Deanonymization Summary 
Force the user to request URLs with identifying information 
– Javascript injected into page or via captive portal 
– A combination of 302 redirects and prerender 
Use identifiers to discover further public information 
– Username from ID 
– Full name from Username 
– Employment from ID 
– Etc. 
PAC Command and Control Loop 
Injected 
Javascript 
PAC 
DNS 
HTTP 
Server 
Encoded 
Commands 
Encoded Responses 
Encoded Leaked URLs 
Decoded 
Data 
Attack Instructions 
PAC DNS Encoding 
URLs can be very long, contain special chars 
DNS hostnames:  
– Max 63 chars per segment 
– Max 253 chars total 
– A-z 0-9 _ - chars only 
Base 36 encoding 
Split long data into multiple hostnames 
Decode & reassemble on attacker’s DNS server 
Malicious PAC API 
Malicious webpage encodes JS commands into hostnames ending .e 
PAC script: 
– decodes & evals .e commands 
– encodes eval result as .r hostname 
– leaks all URLs by default 
API calls to selectively block and leak only some URLs 
– addUrlBlock(url_regex) 
– addUrlLeak(url_regex) 
– clearRegexes() 
OAuth 
An open protocol to allow secure authorization in a simple and 
standard method from web, mobile and desktop applications 
(oauth.com) 
OAuth 2.0 underlies many single sign-on (SSO) systems including: 
OAuth is flexible but most implementations allow exchanging tokens 
in URL parameters via 302 redirects 
OAuth demonstration 
OAuth Summary 
Actively attempt to log in to many sites that allow OAuth 
authentication 
1. Detect successful logins 
2. Leaking the tokens to the attacker  
3. Block the victim browser request 
Attacker can then replay the request to gain full control over the 
victim account 
How far can we take this? 
Google first-party SSO  
google.com will automatically log you into other Google domains, 
e.g. google.co.uk, blogger.com, youtube.com etc.. 
https://accounts.google.com/ServiceLogin? 
passive=true&continue=https://www.google.co.uk/ 
https://accounts.google.co.uk/accounts/SetSID?ssdc=1& 
sidt=&continue=https://www.google.co.uk 
Attacker steals this URL via DNS 
Now has authenticated session on google.co.uk 
302 
Google Drive 
htdrive.google.com and googleusercontent.com cannot share cookies 
Auth tokens are passed via URL – so we can see them 
Load drive.google.com on victim side via prerender 
Find document IDs from image thumbnails 
Inject https://drive.google.com/uc?id=&export=download  
into victim browser and intercept redirect to googleusercontent.com 
with auth token 
Replay captured URLs on attacker side 
Attacker downloads documents 
Google Account demonstration 
Google Account Summary 
Once on regional Google we can get: 
– Uploaded Photos 
– Gmail email summaries 
– Calendar Agenda 
– Get and set Reminders 
– Contact details 
– Full Location history 
screenshots 
Facebook demonstration :-( 
Facebook Summary 
Facebook broke it :-( 
– Not in a security way, it’s just broke 
There WAS an implicit authorisation between Facebook and Microsoft 
OAuth  
– This allowed users with Outlook email addresses to reset their 
Facebook password without providing any further credentials 
So what? I use a VPN! 
VPNs allow data to travel safely over hostile networks via an 
encrypted tunnel to a trusted endpoint  
Should protect you on public Wifi  
Malicious Gateway vs VPN 
1. 
 2. 
 Attacker cannot sniff HTTPS URLs 
 Attacker cannot intercept HTTP traffic 
 Attacker cannot sniff HTTPS URLs 
 Attacker cannot intercept HTTP traffic 
PAC Leak vs VPN 
1. 
2. 
 4. 
3. 
Internet PAC Leak vs VPN 
1. 
2. 
3. 
 4. 
 Attacker can sniff HTTPS URLs 
 Attacker cannot intercept HTTP traffic 
 Attacker can sniff HTTPS URLs 
 Attacker can intercept HTTP traffic 
Toxic Proxy vs VPN 
1. 
2. 
3. 
4. 
5. 
VPN bypass 
Many VPN clients do not clear proxy settings obtained via WPAD  
Traffic is tunnelled between your machine and VPN endpoint 
Traffic is then tunnelled through WPAD proxy 
And then onto its destination 
VPN bypass – affected software 
OpenVPN 
– No mitigation through server configuration 
PrivateInteretAccess 
– Based on OpenVPN 
– Released a fix to their Windows client to disable WPAD 
Cisco AnyConnect 
– Can be mitigated through server proxy configuration 
VPN bypass – unaffected software  
Windows built-in L2TP/PPTP 
– WPAD disabled on these connections by default 
Rejected  
vulnerability  
name #3: 
VPN-emy of  
the State 
So what? I don’t use Windows! 
So what? I don’t use Windows! 
 The design specification of PAC and WPAD are so bad that 
multiple vendors independently implemented the same issues 
into various different products 
 Chrome and Internet Explorer vulnerable by default on 
Windows 
 Firefox, Android, OS X, iOS, Linux vulnerable, but only if 
explicitly configured with PAC (probably not that common) 
 Windows is the only OS with WPAD turned on by default 
Mitigations 
1. Turn off WPAD 
2. No seriously, turn off WPAD 
3. If you still need PAC: 
– turn off WPAD 
– configure an explicit URL for 
your PAC script 
– and serve it over HTTPS  
(or from a local file) 
Mitigations – VPN / WPAD Bypass 
1. Turn off WPAD 
 VPN is safe from WPAD bypass if: 
– WPAD is disabled, or 
– VPN environment requires an HTTP proxy to reach 
Internet, or 
– VPN server pushes explicit proxy config to client 
The Good News, Vendor Fixes 
Context reported PAC issue to vendors on 3rd March 2016 
OS X, iOS (and Apple TV!) – Patched in May (CVE-2016-1801) 
Google Chrome – Patched in July (CVE-2016-5134) 
–
https://bugs.chromium.org/p/chromium/issues/detail?id=593759 
Android – patched – Patched in July (CVE-2016-3763) 
–
https://code.google.com/p/android/issues/detail?id=203176 
Mozilla – Patch pending 
–
https://bugzilla.mozilla.org/show_bug.cgi?id=1255474 
Microsoft – Patch pending 
A bad year for PAC 
We’re not the first to spot this issue (but were the first to report it!) 
Crippling HTTPS with Unholy PAC -  Amit Klein, Itzhak Kotler,  
(Black Hat USA 2016) 
Bas Venis (@BugRoast) reported the PAC leak to Google and Firefox 
(May 2016) 
Attacking Browser Extensions - Nicolas Golubovic (May 2016) 
– http://nicolas.golubovic.net/thesis/master.pdf (page 50) 
WPAD: User Manual (Russian) - Maxim Andreev (June 2015) 
– https://habrahabr.ru/company/mailru/blog/259521/ 
Can Web Proxy Autodiscovery leak HTTPS URLs?  (May 2015) 
– http://security.stackexchange.com/questions/87499/can-web-
proxy-autodiscovery-leak-https-urls 
Why did no-one spot this earlier? 
1994 – SSL invented by Netscape 
1996 – PAC invented by Netscape 
1999 – WPAD invented by Microsoft (and others) 
2009 – sslstrip and other HTTPS problems 
2010… – HSTS implemented by browsers 
              Google, Facebook, Wikipedia + many others 
              go HTTPS by default 
2016 – PAC HTTPS leak is reported and fixed 
PAC 
HTTPS 
leak 
VPN 
bypass 
worse things to 
worry about 
Summary 
 A network based attacker can inject PAC script into browsers 
 PAC scripts can leak all HTTPS URLs via DNS to an attacker 
 We showed how to deanonymize users, steal OAuth tokens 
and access photos, location data and documents and other 
private data 
 A VPN won’t necessarily protect you against a malicious proxy 
Questions 
Now, go turn of WPAD! 
@noxrnet 
@pdjstone