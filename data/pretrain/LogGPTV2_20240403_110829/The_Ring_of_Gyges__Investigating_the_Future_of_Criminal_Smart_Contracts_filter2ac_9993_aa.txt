title:The Ring of Gyges: Investigating the Future of Criminal Smart Contracts
author:Ari Juels and
Ahmed E. Kosba and
Elaine Shi
The Ring of Gyges: Investigating the Future of Criminal Smart Contracts
Ari Juels
Cornell Tech (Jacobs)
Ahmed Kosba
Univ. of Maryland
Elaine Shi
Cornell Univ.
The Ring of Gyges is a mythical magical artifact men-
tioned by the philosopher Plato in Book 2 of his Repub-
lic. It granted its owner the power to become invisible at
will. —Wikipedia, “Ring of Gyges”
“[On wearing the ring,] no man would keep his hands
off what was not his own when he could safely take what
he liked out of the market, or go into houses and lie with
anyone at his pleasure, or kill or release from prison
whom he would... ” —Plato, The Republic, Book 2
(2.360b) (trans. Benjamin Jowett)
Abstract
Thanks to their anonymity (pseudonymity) and elimina-
tion of trusted intermediaries, cryptocurrencies such as
Bitcoin have created or stimulated growth in many busi-
nesses and communities. Unfortunately, some of these
are criminal, e.g., money laundering, illicit marketplaces,
and ransomware.
Next-generation cryptocurrencies such as Ethereum
will
include rich scripting languages in support of
smart contracts, programs that autonomously interme-
diate transactions. In this paper, we explore the risk of
smart contracts fueling new criminal ecosystems. Specif-
ically, we show how what we call criminal smart con-
tracts (CSCs) can facilitate leakage of conﬁdential in-
formation, theft of cryptographic keys, and various real-
world crimes (murder, arson, terrorism).
We show that CSCs for leakage of secrets (`a la Wik-
ileaks) are efﬁciently realizable in existing scripting lan-
guages such as that in Ethereum. We show that CSCs
for theft of cryptographic keys can be achieved using
primitives, such as Succinct Non-interactive ARguments
of Knowledge (SNARKs), that are already expressible
in these languages and for which efﬁcient supporting
language extensions are anticipated. We show simi-
larly that authenticated data feeds, an emerging feature
of smart contract systems, can facilitate CSCs for real-
world crimes (e.g., property crimes).
Our results highlight the urgency of creating policy
and technical safeguards against CSCs in order to real-
ize the promise of smart contracts for beneﬁcial goals.
1
Introduction
Cryptocurrencies such as Bitcoin remove the need for
trusted third parties from basic monetary transactions
and offer anonymous (more accurately, pseudonymous)
transactions between individuals. While attractive for
many applications,
these features have a dark side.
Bitcoin has stimulated the growth of ransomware [6],
money laundering [40], and illicit commerce, as exem-
pliﬁed by the notorious Silk Road [32].
New cryptocurrencies such as Ethereum (as well
as systems such as Counterparty [48] and SmartCon-
tract [1]) offer even richer functionality than Bitcoin.
They support smart contracts, a generic term denot-
ing programs written in Turing-complete cryptocurrency
scripting languages. In a fully distributed system such as
Ethereum, smart contracts enable general fair exchange
(atomic swaps) without a trusted third party, and thus can
effectively guarantee payment for successfully delivered
data or services. Given the ﬂexibility of such smart con-
tract systems, it is to be expected that they will stimulate
not just new beneﬁcial services, but new forms of crime.
We refer to smart contracts that facilitate crimes in dis-
tributed smart contract systems as criminal smart con-
tracts (CSCs). An example of a CSC is a smart contract
for (private-)key theft. Such a CSC might pay a reward
for (conﬁdential) delivery of an target key sk, such as a
certiﬁcate authority’s private digital signature key.
We explore the following key questions in this paper.
Could CSCs enable a wider range of signiﬁcant new
crimes than earlier cryptocurrencies (Bitcoin)? How
practical will such new crimes be? And What key ad-
vantages do CSCs provide to criminals compared with
conventional online systems? Exploring these questions
1
is essential to identifying threats and devising counter-
measures.
1.1 CSC challenges
Would-be criminals face two basic challenges in the con-
struction of CSCs. First, it is not immediately obvious
whether a CSC is at all feasible for a given crime, such as
key theft. This is because it is challenging to ensure that
a CSC achieves a key property in this paper that we call
commission-fair, meaning informally that its execution
guarantees both commission of a crime and commensu-
rate payment for the perpetrator of the crime or neither.
(We formally deﬁne commission-fairness for individual
CSCs in the paper.) Fair exchange is necessary to ensure
commission-fairness, but not sufﬁcient: We show how
CSC constructions implementing fair exchange still al-
low a party to a CSC to cheat. Correct construction of
CSCs can thus be quite delicate.
Second, even if a CSC can in principle be constructed,
given the limited opcodes in existing smart contract sys-
tems (such as Ethereum), it is not immediately clear that
the CSC can be made practical. By this we mean that the
CSC can be executed without unduly burdensome com-
putational effort, which in some smart contract systems
(e.g., Ethereum) would also mean unacceptably high ex-
ecution fees levied against the CSC.
The following example illustrates these challenges.
Example 1a (Key compromise contract) Contractor C
posts a request for theft and delivery of the signing key
skV of a victim certiﬁcate authority (CA) CertoMart. C
offers a reward $reward to a perpetrator P for (conﬁden-
tially) delivering the CertoMart private key skV to C.
To ensure fair exchange of the key and reward in Bit-
coin, C and P would need to use a trusted third party or
communicate directly, raising the risks of being cheated
or discovered by law enforcement. They could vet one
another using a reputation system, but such systems are
often inﬁltrated by law enforcement authorities [57]. In
contrast, a decentralized smart contract can achieve self-
enforcing fair exchange. For key theft, this is possible
using the CSC Key-Theft in the following example:
Example 1b (Key compromise CSC) C generates a
private / public key pair (skC, pkC) and initializes
Key-Theft with public keys pkC and pkV (the CertoMart
public key). Key-Theft awaits input from a claimed per-
petrator P of a pair (ct,π), where π is a zero-knowledge
proof that ct = encpkC [skV ] is well-formed. Key-Theft
then veriﬁes π and upon success sends a reward of
$reward to P. The contractor C can then download and
decrypt ct to obtain the compromised key skV.
2
Key-Theft implements a fair exchange between C and
P, paying a reward to P if and only if P delivers a valid
key (as proven by π), eliminating the need for a trusted
third party. But it is not commission-fair, as it does not
ensure that skvict actually has value. The CertoMart can
neutralize the contract by preemptively revoking its own
certiﬁcate and then itself claiming C’s reward $reward!
As noted, a major thrust of this paper is showing how,
for CSCs such as Key-Theft, criminals will be able to
bypass such problems and still construct commission-
fair CSCs.
(For key compromise, it is necessary to
enable contract cancellation should a key be revoked.)
Additionally, we show that these CSCs can be efﬁ-
ciently realized using existing cryptocurrency tools or
features currently envisioned for cryptocurrencies (e.g.,
zk-SNARKS [20]).
1.2 This paper
We show that it is or will be possible in smart contract
systems to construct commission-fair CSCs for three
types of crime:
1. Leakage / sale of secret documents;
2. Theft of private keys; and
3. “Calling-card” crimes, a broad class of physical-
world crimes (murder, arson, etc.)
The fact that CSCs are possible in principle is not surpris-
ing. Previously, however, it was not clear how practical
or extensively applicable CSCs might be. As our con-
structions for commission-fair CSCs show, constructing
CSCs is not as straightforward as it might seem, but new
cryptographic techniques and new approaches to smart
contract design can render them feasible and even prac-
tical. Furthermore, criminals will undoubtedly devise
CSCs beyond what this paper and the community in gen-
eral are able to anticipate.
Our work therefore shows how imperative it is for
the community to consider the construction of defenses
against CSCs. Criminal activity committed under the
guise of anonymity has posed a major impediment to
adoption for Bitcoin. Yet there has been little discus-
sion of criminal contracts in public forums on cryptocur-
rency [14] and the launch of Ethereum took place in July
2015. It is only by recognizing CSCs early in their lifecy-
cle that the community can develop timely countermea-
sures to them, and see the promise of distributed smart
contract systems fully realized.
While our focus is on preventing evil, happily the tech-
niques we propose can also be used to create beneﬁcial
contracts. We explore both techniques for structuring
CSCs and the use of cutting-edge cryptographic tools,
e.g., Succinct Non-interactive ARguments of Knowledge
(SNARKs), in CSCs. Like the design of beneﬁcial smart
contracts, CSC construction requires a careful combina-
tion of cryptography with commission-fair design [35].
In summary, our contributions are:
• Criminal smart contracts: We initiate the study of
CSCs as enabled by Turing-complete scripting lan-
guages in next-generation cryptocurrencies. We ex-
plore CSCs for three different types of crimes: leak-
age of secrets in Section 4 (e.g., pre-release Holly-
wood ﬁlms), key compromise / theft (of, e.g., a CA
signing key) in Section 5, and “calling-card” crimes,
such as assassination,
that use data sources called
“authenticated data feeds” (described below) in Sec-
tion 6. We explore the challenges involved in crafting
such criminal contracts and demonstrate (anticipate)
new techniques to resist neutralization and achieve
commission-fairness.
We emphasize that because commission-fairness
means informally that contracting parties obtain their
“expected” utility, an application-speciﬁc metric,
commission-fairness must be deﬁned in a way speciﬁc
to a given CSC. We thus formally specify commission-
fairness for each of our CSC constructions in the rele-
vant paper appendices.
• Proof of concept: To demonstrate that even sophisti-
cated CSC are realistic, we report (in their respective
sections) on implementation of the CSCs we explore.
Our CSC for leakage of secrets is efﬁciently realizable
today in existing smart contract languages (e.g., that
of Ethereum). Those for key theft and “calling-card”
crimes rely respectively for efﬁciency and realizability
on features currently envisioned by the cryptocurrency
community.
• Countermeasures: We brieﬂy discuss in Section 7
some possible approaches to designing smart contract
systems with countermeasures against CSCs. While
this discussion is preliminary, a key contribution of our
work is to show the need for such countermeasures and
stimulate exploration of their implementation in smart
contract systems such as Ethereum.
We also brieﬂy discuss in Appendix B how maturing
technologies, such as hardware roots of trust (e.g., In-
tel SGX [43]) and program obfuscation can enrich the
space of possible CSCs—as they can, of course, beneﬁ-
cial smart contracts.
2 Background and Related Work
Emerging decentralized cryptocurrencies [55, 63] rely
on a novel blockchain technology where miners reach
consensus not only about data, but also about computa-
tion. Loosely speaking, the Bitcoin blockchain (i.e., min-
ers) verify transactions and store a global ledger, which
may be modeled as a piece of public memory whose
integrity relies on correct execution of the underlying
3
Figure 1: Schematic of a decentralized cryptocur-
rency system with smart contracts, as illustrated by
Delmolino et al. [35]. A smart contract’s state is stored
on the public blockchain. A smart contract program is
executed by a network of miners who reach consensus
on the outcome of the execution, and update the con-
tract’s state on the blockchain accordingly. Users can
send money or data to a contract; or receive money or
data from a contract.
distributed consensus protocol. Bitcoin supports a lim-
ited range of programmable logic to be executed by the
blockchain.
Its scripting language is restrictive, how-
ever, and difﬁcult to use, as demonstrated by previous
efforts at building smart contract-like applications atop
Bitcoin [21, 15, 7, 56, 49].
When the computation performed by the blockchain
(i.e., miners) is generalized to arbitrary Turing-complete
logic, we obtain a more powerful, general-purpose smart
contract system. The ﬁrst embodiment of such a decen-
tralized smart contract system is the recently launched
Ethereum [63].
Informally, a smart contract in such a
system may be thought of as an autonomously execut-
ing piece of code whose inputs and outputs can include
money.
(We give more formalism below.) Hobbyists
and companies are already building atop or forking off
Ethereum to develop various smart contract applications
such as security and derivatives trading [48], prediction
markets [5], supply chain provenance [11], and crowd
fund raising [2].
Figure 1 shows the high-level architecture of a smart
contract system instantiated over a decentralized cryp-
tocurrency such as Bitcoin or Ethereum. When the
underlying consensus protocol employed the cryptocur-
rency is secure, a majority of the miners (as measured by
computational resources) are assumed to correctly exe-
cute the contract’s programmable logic.
Gas. Realistic instantiations of decentralized smart con-
tract systems rely on gas to protect miners against denial-
of-service attacks (e.g., running an unbounded contract).
ContractsMined BlockMinersBlock # iBlock # i+ 1Block # i+ 2TimeBlockchain……CodeStorageDataUsersMoneyGas is a form of transaction fee that is, roughly speaking,
proportional to the runtime of a contract.
In this paper, although we do not explicitly express
gas in our smart contract notation, we attempt to factor
program logic away from the contract as an optimization
when possible, to keep gas and thus transactional fees
low. For example, some of the contracts we propose in-
volve program logic executed on the user side, with no
loss in security.
2.1 Smart contracts: the good and bad
Decentralized smart contracts have many beneﬁcial uses,
including the realization of a rich variety of new ﬁnan-
cial instruments. As Bitcoin does for transactions, in a
decentralized smart contract system, the consensus sys-
tem enforces autonomous execution of contracts; no one
entity or small set of entities can interfere with the execu-
tion of a contract. As contracts are self-enforcing, they
eliminate the need for trusted intermediaries or reputa-
tion systems to reduce transactional risk. Decentralized
smart contracts offer these advantages over traditional
cryptocurrencies such as Bitcoin:
• Fair exchange between mutually distrustful parties
with rich contract rules expressible in a programmable
logic. This feature prevents parties from cheating
by aborting an exchange protocol, yet removes the
need for physical rendezvous and (potentially cheat-
ing) third-party intermediaries.
• Minimized interaction between parties, reducing op-
portunities for unwanted monitoring and tracking.
• Enriched transactions with external state by allowing
as input authenticated data feeds (attestations) pro-
vided by brokers on physical and other events outside
the smart-contract system, e.g., stock tickers, weather
reports, etc. These are in their infancy in Ethereum,
but their availability is growing.
Unfortunately, for all of their beneﬁt, these properties
have a dark side, potentially facilitating crime because:
• Fair exchange enables transactions between mutually
distrustful criminal parties, eliminating the need for
today’s fragile reputation systems and/or potentially
cheating or law-enforcement-inﬁltrated third-party in-
termediaries [57, 41].