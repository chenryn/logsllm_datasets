how   are   you   supposed   to   know   the   possible   security   failures   companies   can   impose   
when   using   it  ?   You   need   to   have   deep   knowledge   on   a   wide   range   of   technologies.    
In   addition   to   this   you   also   need   deep   knowledge   of   web   application   vulnerabilities.   The   
vast   majority   of   a   company's   public   facing   assets   are   going   to   be   web   apps   so   it's   vital   
that   you   know   at   the   very   least   the   OWASP   top   10.    The   more   vulnerabilities   you   know   
how   to   exploit   the   better   chances   you   have   of   finding   one.  
This   book   will   go   over   the   basics   of   the   exploitation   phase.   Note   I   won't   be   teaching   you   
how   to   use   tools,   for   the   most   part   everything   we   do   will   be   done   manually   so   you   can   
get   a   deep   understanding   of   the   process.   Once   you   know   how   things   work   at   a   deep   
level   you   will   want   to   replace   some   of   your   manual   process   with   tools   and   automation.  
Basic  Hacking  Known  Vulnerabilities  
Introduction  
One   of   the   first   things   you   learn   in   hacker   school   is   how   to   identify   and   exploit   known   
vulnerabilities.   This   may   seem   like   a   relatively   simple   step   but   you   would   be   surprised   at   
the   number   of   people   who   completely   skip   this   phase   of   the   exploitation   cycle.  
As   shown   above   we   start   off   by   visiting   the   target   application,   next   we   attempt   to   
determine   what   software   it  is   running.   Once   we   find   out   what   software   and   version   the   
endpoint   is   running   we   search   on   Google   and   other   resources   to   see   if  it  has   
vulnerabilities   or   CVEs.   After   that   we   proceed   to   search   for   the   exploit   code   and   finally   
we   run   the   exploit   code   against   the   target.  
Another   version   of   this   technique   focuses   on   1-days.   In   this   cycle   we   start   off   by   looking   
at   our   threat   feeds   such   as   exploitdb   and   twitter.   Here   we   are   looking   for   new   exploits   
and   CVEs   that   have   just   dropped,   these   are   known   as   1-days.   When   going   down   this   
path   time   is   the   most   important   aspect,   when   a   new   exploit   is   dropped   in   the   wild   you   
need   to   start   exploiting   your   targets   before   they   have   a   chance   to   patch.   Once   you   hear  
about   a   new   exploit   you   will   need   to   quickly   find   a   POC   for   it  and   start   mass   scanning   all  
of   your   targets   for   that   vulnerability.  
As   you   can   see   both   of   these   methodologies   are   very   similar.   With  the   first   one   we   find   
a   target   and   see   if  it  has   any   known   vulnerabilities   and   if  it  does   we   try   to   exploit   them.   
In   the   second   methodology   we   are   looking   for   newly   released   exploits.   When   a   new   
exploit   is   dropped   we   immediately   start   scanning   and   exploiting   everything   before   the   
defenders   have   a   chance   to   patch.  
Identifying  technologies  
Introduction  
When   attempting   to   exploit   a   target   with   a   known   vulnerability   you   could   just   launch   your   
exploit   at   every   target   and   hope   for   the   best   or   you   can   do   things   a   little   smarter.  
Identifying   the   target   technology   stack   will   help   you   find   the   exploits   impacting   that   
stack.   Not   knowing   this   information   will   leave   you   blind   and   you   will   have   to   take   random   
guesses   at   which   exploits   might   work.  
Wappalyzer  
If   you're   attempting   to   discover   the   technologies   running   on   a   website   the   best   place   to   
start   is   wappalyzer.   An   alternative   to   wappalyzer   is   “ https://builtwith.com/ ”   but   I   personally   
like   wappalyzer   better.  
I   personally   like   to    use   the   wappalyzer   browser   plugin   as   it  makes   it  easy   to   determine   
an   endpoints   tech   stack   when   browsing   their   website.   As   you   can   see   in   the   image   
above   this   website   is   running   “Ruby   on   Rails”,   “Jquery   3.5.0”,   “Backbone.js   1.4.0”,   and   a   
few   other   things.   Note   that   if  you   use   a   command   line   tool   you   can   scan   multiple   
websites   at   once,   this   is   nice   if  you're   trying   to   scan   hundreds   or   thousands   of   sites   at   
once.  
Powered  By  
Wappalyzer   is   great   but   it  won’t   identify   everything.   Wappalyzer   works   off   of   regexes   so   
if  it  doesn't   have   a   specific   technologies   regex   in   its  database   it  won't   be   able   to   identify   
it.  
As   shown   above,   the   wappalyzer   came   back   mostly   blank.   However,   if  you   look   at   the   
footer   at   the   bottom   of   the   page   you   see   the   words    “Powered  by  Gila  CMS” .   We   can   
conclude   that   this   site   is   running   Gila   CMS   but   if  we   were   only   looking   at   wappalyzer   we   
would   have   missed   this.  
Summary  
You   need   to   know   the   technology   stack   your   target   is   running   so   you   can   find   
associated   exploits.   There   are   a   few   ways   to   determine   the   technologies   an   endpoint   is   
running   but   I   almost   always   use   wappalyzer.   If   you   can’t   determine   this   information   with   
wappalyzer   there   are   other   techniques   to   find   an   endpoints   technology   stack.  
Identifying  the  vulnerabilities  
Introduction  
You   know   what   software   your   target   is   running   but   how   do   you   determine   what   
vulnerabilities   it  has?   The   whole   point   of   learning   a   target   technology   stack   is   so   you   
can   use   this   information   to   find   associated   vulnerabilities.  
Google  
When   I'm   looking   to   see   what   vulnerabilities   a   technology   has   the   first   place   I   go   is   
Google.   Actually,   Google   is   the   first   place   I   go   when   I   have   a   question   about   anything   as   
it's   the   best   resource   out   there.   Try   typing   the   following   search   queries   into   Google:  
●
      vulnerabilities  
●
      exploits  
There   is   all   kinds   of   stuff   here!   I   see   SQL   injection   exploits,   LFI   exploits,   and   much   
more.   I   recommend   you   click   on   the   first   couple   links   to   see   what   interesting   
vulnerabilities   there   are.   You'd   be   surprised   at   the   things   you   will   find   buried   in   a   blog   
post   10   links   down   the   page.  
ExploitDB  
Another   place   I   like   to   search   is   ExploitDB.   ExploitDB   is   a   tool   used   to   search   and   
download   exploit   code.   This   is   by   far   one   of   my   favorite   resources   to   use   when   
searching   for   vulnerabilities   related   to   a   technology   stack.  
●
https://www.exploit-db.com/  
You   can   use   the   website   to   search   for   things   but   I   typically   use   the   command   line   tool   
called   searchsploit.   You   can   download   this   tool   from  Github   as   shown   below:  
●
https://github.com/offensive-security/exploitdb  
●
./searchsploit   “name   of   technology”  
Normally   once   we   find   out   the   vulnerabilities   a   target   is   vulnerable   to   we   have   to   search   
for   the   exploit   code   but   we   can   skip   this   step   since   ExploitDB   provides   us   with   the   proof   
of   concept(POC)   code   as   well.  
CVE  
According   to   Google,   the   Common   Vulnerabilities   and   Exposures(CVE)   system   provides   
a   reference-method   for   publicly   known   information-security   vulnerabilities   and   
exposures.   If   you're   looking   to   find   what   CVEs   a   technology   stack   has,   there   is   no   better   
place   to   search   than   NIST.  
●
https://nvd.nist.gov/vuln/search  
Searching   for   “Gila   CMS”   gives   us   17   CVEs,   the   newer   the   CVE   the   better   as   there   is   a   
better   chance   the   target   hasn't   patched   their   systems   yet.   Note   that   just   because   you   
find   a   CVE   doesn't   mean   you   can   exploit   it.   To   exploit   a   CVE   you   need   the   proof   of   
concept(POC)   exploit   code,   without   that   you're   stuck.  
Summary  
Locating   the   vulnerabilities   impacting   a   technology   stack   is   relatively   easy.   All   you   really   
have   to   do   is   search   for   them.   Between   Google,   ExploitDB,   and   NIST   you   should   be   
able   to   find   everything   you're   looking   for.   
Finding  the  POC  
Introduction  
You   have   identified   that   the   target   application   contains   vulnerabilities   but   to   exploit   them   
you   need   the   proof   of   concept   (POC)   exploit   code.   If   you   don't   have   the   exploit   code   
your   only   other   option   is   to   make   it  yourself.   However,   this   is   beyond   the   scope   of   this   
book.  
Github  
One   of   the   best   places   to   find   exploit   code   is   Github.   GitHub    is   an   American   
multinational   corporation   that   provides   hosting   for   software   development   and   version   
control   using   Git.   It   offers   the   distributed   version   control   and   source   code   management   
functionality   of   Git,   plus   its  own   features.   Developers   love   Github   and   hackers   do   as   
well.  
You   can   easily   search   for   a   CVE   on   Github   as   shown   in   the   above   image.   If   there   is   a   
POC   you   will   most   likely   find   it  on   here.   However,   BE   AWARE   OF   FAKE   POCs    as   
these   exploits   are   not   vetted   and   come   from  untrusted   third   parties.  
ExploitDB  
I   already   mentioned   ExploitDB   earlier   so   im   not   going   to   talk   about   it  again   but   this   is   a   
great   resource   for   finding   POCs.  
●
https://www.exploit-db.com/  
Summary  
9   times   out   of   10   you   are   going   to   find   the   exploit   code   you're   looking   for   on   Github   or   
on   ExploitDB.   If   you   can’t   find   it  in   one   of   those   locations   it  probably   doesn't   exist   and   
you   will   have   to   create   your   own   POC.   However,   don’t   be   afraid   to   search   for   resources.   
Sometimes   the   POC   code   can   be   buried   deep   in   a   blog   post   on   the   5th   page   of   Google.  
Exploitation  
Once   you   have   a   working   POC   you   are   ready   to   test   it  against   your   target.   I   always   
recommend   setting   up   a   vulnerable   machine   to   test   the   exploit   against   first   so   you   know   
what   to   expect   from  a   real   target.   Once   you're   ready   just   run   the   exploit   on   your   target   
and   review   the   results   to   see   if  they   are   vulnerable   or   not.  
Conclusion  
Exploiting   known   vulnerabilities   is   one   of   the   oldest   tricks   in   the   book.   That   being   said   
it’s  still   one   of   the   best   methodologies   to   use   for   quick   easy   wins.   There   are   really   only   
three   steps   when   using   this   approach.   First   determine   your   targets   techstack,   search   for   
any   vulnerabilities   in   that   tech   stack,   and   finally   run   the   exploits.  
Basic  Hacking  CMS  
Introduction  
Content   management   systems(CMS)   such   as   wordpress,drupal,and   joomla   make   up   
the   vast   majority   of   the   internet.   According   to   a   survey   performed   by   W3Techs   62%   of   
the   internet   is   run   on   a   CMS   and   39.1%   percent   of   the   internet   is   run   on   wordpress.   As   
an   attacker   this   means   the   vast   majority   of   the   sites   you   are   going   to   be   going   up   
against   will   be   run   by   a   CMS.   
Wordpress 
As   of   right   now   over   a   quarter   (25%)   of   the   internet   is   built   using   WordPress.   This   is   
useful   to   know   because   that   means   a   single   exploit   has   the   potential   to   impact   a   large   
portion   of   your   target’s  assets.   There   are   in   fact   hundreds   of   exploits   and   
misconfigurations   impacting   WordPress   and   its  associated   plugins.   One   common   tool   to   
scan   for   these   vulnerabilities   is   wpscan:  
●
https://github.com/wpscanteam/wpscan  
The   only   thing   that’s  annoying   about   this   tool   is   that   it's   written   in   ruby,   I   prefer   tools   
written   in   python   or   Golang.   During   the   fingerprinting   phase   you   should've   discovered   
the   technologies   running   on   your   target's   assets   so   it  should   be   easy   to   search   for   sites   
running   WordPress.   Once   you   find   a   site   scan   it  with   wpscan   as   shown   below:   
●
wpscan   --URL      
The   vast   majority   of   the   sites   you   scan   are   going   to   be   patched.   This   is   because   most   of   
these   WordPress   sites   are   managed   by   third   party   vendors   who   perform   automatic   
updates.   However,   you   will   run   into   vulnerable   plugins   quite   frequently   but   many   of   
these   exploits   require   credentials   to   exploit.   Another   thing   I   find   all   the   time   is   directly   
listing   on   the   uploads   folder.   Always   make   sure   to   check:  
●
“/wp-   content/uploads/”  
You   can   often   find   sensitive   information   such   as   user   emails,   passwords,   paid   digital   
products,   and   much   more.  
Drupal  
Drupal   is   the   third   most   popular   CMS   yet   I   seem   to   run   into   Drupal   sites   more   than   
Joomla.   If   you   find   a   Drupal   site   you   want   to   use   droopescan   to   scan   it.   This   scanner   
also   has   the   ability   to   scan   additional   CMSs   as   well:  
●
https://github.com/droope/droopescan  
●
python3   droopescan   scan   Drupal   -u      -t   32  
Joomla  
WordPress   is   by   far   the   most   popular   CMS   with   over   60%   of   the   market   share.   Joomla   
comes   in   second   so   you   can   expect   to   run   into   this   CMS   as   well.   Unlike   WordPress   
sites   who   seem   to   be   fairly   locked   down   Joomla   is   a   mess.   If   you   want   to   scan   for   
vulnerabilities   the   most   popular   tool   is   Joomscan:  
●
https://github.com/rezasp/joomscan  
●
perl   joomscan.pl   -u     
Adobe  AEM  
If   you   ever   run   into   the   Adobe   AEM   CMS   you're   about   to   find   a   whole   bunch   of   
vulnerabilities.   99%   of   the   time   this   is   an   instant   win!   This   CMS   is   riddled   with   public   
vulnerabilities   and   I’m   100%   positive   there   are   hundreds   more   zero   days.   Seriously   this   
is   one   of   the   worst   CMSs   I   have   ever   seen.   If   you   want   to   scan   an   AEM   application   for   
vulnerabilities   use   the   tool   aemhacker:  
●
https://github.com/0ang3el/aem-hacker  
●
python   aem_hacker.py   -u      --host     
Note   that   in   order   to   test   for   the   SSRF   vulnerabilities   you   need   to   have   a   public   IP   that   
the   target   server   can   connect   back   to.  
Other  
There   are   hundreds   of   different   CMSs   so   it  wouldn't   be   practical   for   me   to   mention   every   
single   one   of   them.   The   vast   majority   of   sites   are   going   to   be   running   WordPress,   
Joomla,   and   Drupal   but   you   still   might   run   into   other   CMSs.  
If   you   come   across   a   CMS   you   haven't   seen   before   the   first   step   is   to   go   to   exploit   db   
and   see   if  it  has   any   known   CVEs:  