The first stage, ***base_task***, defines what to do.\
The second stage, ***task_chain***, contains a list of base tasks to run sequentially.\
The third stage consists of the ***chain_execution_config*** and defines *if*, *when*, and *how often* a chain should be executed.
Additionally, to provide the base tasks with parameters and influence their behavior, each entry in a task chain can be accompanied by an ***execution parameter***.
### 3.1. Base task
In **pg_timetable**, the most basic building block is a ***base task***. Currently, there are three different kinds of task:
| Base task kind   | Task kind type | Example                                                                                                                                                             |
| :--------------- | :------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| SQL snippet      | `SQL`          | Starting a cleanup, refreshing a materialized view or processing data.                                                                                              |
| External program | `PROGRAM`        | Anything that can be called as an external binary, including shells, e.g. `bash`, `pwsh`, etc. |                                                                                                                  |
| Internal Task    | `BUILTIN`      | A prebuilt functionality included in **pg_timetable**. These include: SleepLogSendMailDownload |
A new base task can be created by inserting a new entry into `timetable.base_task`.
Excerpt of timetable.base_task
| Column   | Type                  | Definition                                                              |
| :------- | :-------------------- | :---------------------------------------------------------------------- |
| `name`   | `text`                | The name of the base task.                                              |
| `kind`   | `timetable.task_kind` | The type of the base task. Can be `SQL`(default), `PROGRAM` or `BUILTIN`. |
| `script` | `text`                | Contains either a SQL script or a command string which will be executed.|
### 3.2. Task chain
The next building block is a ***chain***, which simply represents a list of tasks. An example would be:
- Download files from a server
- Import files
- Run aggregations
- Commit the transaction
- Remove the files from disk
All tasks of the chain in **pg_timetable** are executed within one transaction. However, please, pay attention there is no opportunity to rollback `PROGRAM` and `BUILTIN` tasks.
Excerpt of timetable.task_chain
| Column                | Type      | Definition                                                                        |
| :-------------------- | :-------- | :-------------------------------------------------------------------------------- |
| `parent_id`           | `bigint`  | The ID of the previous chain task.  Set this to `NULL` if it is the first base task in the chain.|
| `task_id`             | `bigint`  | The ID of the **base task**.                                                      |
| `run_uid`             | `text`    | The role as which the chain should be executed as.                                |
| `database_connection` | `integer` | The ID of the `timetable.database_connection` that should be used.                |
| `ignore_error`        | `boolean` | Specify if the chain should resume after encountering an error (default: `false`).|
If the chain has been configured with `ignore_error` set to `true` (the default value is `false`), the worker process will report a success on execution *even if the task within the chain fails*.
#### 3.2.1. Chain execution configuration
Once a chain has been created, it has to be scheduled. For this, **pg_timetable** builds upon the standard **cron**-string, all the while adding multiple configuration options.
Excerpt of timetable.chain_execution_config
| Column                        | Type             | Definition  |
| :---------------------------  | :--------------- | :---------- |
| `chain_id`                    | `bigint`         | The id of the task chain. |
| `chain_name`                  | `text`           | The name of the chain. |
| `run_at`                      | `timetable.cron` | To achieve the `cron` equivalent of \*, set the value to `NULL`. |
| `max_instances`               | `integer`        | The amount of instances that this chain may have running at the same time. |
| `live`                        | `boolean`        | Control if the chain may be executed once it reaches its schedule. |
| `self_destruct`               | `boolean`        | Self destruct the chain. |
| `exclusive_execution`         | `boolean`        | Specifies whether the chain should be executed exclusively while all other chains are paused. |
| `excluded_execution_configs`  | `integer[]`      | TODO |
| `client_name`                 | `text`           | Specifies which client should execute the chain. Set this to `NULL` to allow any client. |
#### 3.2.2. Chain execution parameters
As mentioned above, base tasks are simple skeletons (e.g. *send email*, *vacuum*, etc.).
In most cases, they have to be brought to live by passing parameters to the execution.
Excerpt of timetable.chain_execution_parameters
| Column                   | Type    | Definition                                       |
| :----------------------- | :------ | :----------------------------------------------- |
| `chain_execution_config` | `bigint`  | The ID of the chain execution configuration.     |
| `chain_id`               | `bigint`  | The ID of the chain.                             |
| `order_id`               | `integer` | The order of the parameter.                      |
| `value`                  | `jsonb`   | A `string` JSON array containing the parameters. |
### 3.3 Example usages
A variety of examples can be found in the `/samples` directory.
### 3.4 Example functions
Create a Job with the `timetable.job_add` function. With this function you can add a new one step chain with a cron-syntax.
| Parameter                   | Type    | Definition                                       | Default |
| :----------------------- | :------ | :----------------------------------------------- |:---------|
| `task_name`     | `text`  | The name of the Task ||
| `task_function` | `text`  | The function which will be executed. ||
| `client_name`   | `text`  | Specifies which client should execute the chain. Set this to `NULL` to allow any client. |NULL|
| `task_type`     | `text`  | Type of the function `SQL`,`PROGRAM` and `BUILTIN` |SQL|
| `run_at`        | `timetable.cron`  | Time schedule in сron syntax. `NULL` stands for `'* * * * *'`     |NULL|
| `max_instances` | `integer` | The amount of instances that this chain may have running at the same time. |NULL|
| `live`          | `boolean` | Control if the chain may be executed once it reaches its schedule. |FALSE|
| `self_destruct` | `boolean` | Self destruct the chain. |FALSE|
### 3.5 Usage
Run "MyJob" at 00:05 in August.
```SELECT timetable.job_add('MyJob', 'SELECT public.my_func()' , NULL, 'SQL', '5 0 * 8 *', live := TRUE);```
Run "MyJob" at minute 23 past every 2nd hour from 0 through 20.
```SELECT timetable.job_add('MyJob', 'SELECT public.my_func()' , NULL, 'SQL', '23 0-20/2 * * *', live := TRUE);```
## 4. Database logging and transactions
The entire activity of **pg_timetable** is logged in database tables (`timetable.log` and `timetable.execution_log`). Since there is no need to parse files when accessing log data, the representation through an UI can be easily achieved.
Furthermore, this behavior allows a remote host to access the log in a straightforward manner, simplifying large and/or distributed applications.
>Note: Logs are written in a separate transaction, in case the chain fails.
## 5. Runtime information
In order to examine the activity of **pg_timetable**, the table `timetable.run_status` can be queried. It contains information about active jobs and their current parameters.
## 6. Schema diagram
![Schema diagram](timetable_schema.png?raw=true "Schema diagram")
## 7. Contributing
If you want to contribute to **pg_timetable** and help make it better, feel free to open an [issue][issue] or even consider submitting a [pull request][PR].
[issue]: https://github.com/cybertec-postgresql/pg_timetable/issues
[PR]: https://github.com/cybertec-postgresql/pg_timetable/pulls
## 8. Support
For professional support, please contact [Cybertec][cybertec].
[cybertec]: https://www.cybertec-postgresql.com/
## 9. Authors
[Pavlo Golub](https://github.com/pashagolub) and [Hans-Jürgen Schönig](https://github.com/postgresql007).
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")