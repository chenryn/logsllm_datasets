if the latter does not hold then unlinkability most likely fails
to hold.
Lemma 2: Let Π=(k, nI , nR,I,R) be a protocol that sat-
If the ﬁrst conditional that occurs in R is safe, then condition
isﬁes condition (i) of well-authentication, and frame opacity.
(ii) of well-authentication holds.
Proof. Consider an execution where two agents a and a′ are
associated and a′ has performed a τthen. If this test corresponds
to a safe conditional, there is nothing to prove. Otherwise,
we shall prove that a is only associated to a′. Thanks to our
hypothesis, a has performed at least one input even if it is
an initiator. Let m be that input message. We know that it is
equal (modulo E) to the previous output of a′, and want to
show that it cannot be equal to any output of another agent.
Let (cid:10) be the label of the previous output of a′. By deﬁnition
of a protocol, that output label cannot correspond to a public
message in the honest trace. Thus the idealization of the output
message associated to (cid:10) in the honest trace contains at least
one hole. By condition (2) of frame opacity, the same holds
for the idealization of m. Therefore, if m had been outputted
twice, it would have lead to two different messages in the
idealized frames, violating frame opacity.
◻
We consider the Hash-Lock protocol as described in [34].
This is an RFID protocol that has been designed to achieve
privacy even if no formal proof is given. The protocol relies on
a hash function, and can be informally described as follows.
Reader → Tag ∶
Tag → Reader ∶ nT , h(nR, nT , k)
nR
This protocol falls into our generic class of 2-party protocols,
and frame opacity and well-authentication can be automat-
ically established in less than 1 second. We can therefore
conclude that the protocol preserves unlinkability.
C. LAK protocol
We present an RFID protocol ﬁrst introduced in [35], and
we refer to the description given in [2]. To avoid traceability
attacks, the main idea is to ask the tag to generate a nonce
and to use it to send a different message at each session. We
suppose that initially, each tag has his own key k and the
reader maintains a database containing those keys.
The protocol is informally described below (h models an
hash function). In the original version (see e.g. [2]), in case
of a successful execution, both parties update the key k with
h(k) (they always store the two last keys). Our framework
does not allow one to model protocol that rely on a mutable
state. Therefore, we consider here a version where the key is
not updated at the end of a successful execution allowing the
key k to be reuse from one session to another.
Reader → Tag ∶
Tag → Reader ∶
Reader → Tag ∶
r1
r2, h(r1⊕ r2⊕ k)
h(h(r1⊕ r2⊕ k)⊕ k⊕ r1)
Actually, this protocol suffers from an authentication attack.
The protocol does not allow the reader to authenticate the
tag. This attack can be informally described as follows (and
already exists on the original version of this protocol). By
using algebraic properties of ⊕, an attacker can impersonate
575575
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
a tag by injecting previously eavesdropped messages. Below,
I(A) means that the attacker plays the role A.
I(Reader) → Tag ∶
r2, h(r1⊕ r2⊕ k)
Tag → Reader ∶
Reader → Tag ∶
I(Tag) → Reader ∶
2, h(r0⊕ r1⊕ k)
1)
h(h(r0⊕ r1⊕ k)⊕ k⊕ r′
Reader → Tag ∶
1⊕ r1⊕ r2, thus h(r1⊕ r2⊕ k)=E h(r′
2 = r′
1⊕ rI
2⊕ k).
where rI
r′
1
rI
r1
Due to this,
the protocol does not satisfy our well-
authentication requirement. Indeed,
the reader can end a
session with a tag whereas the tag has not really participated
to this session. In other words, the reader passes a test (which
does not correspond to a safe conditional) with success, and
therefore performs a τthen action whereas it has not interact
honestly with a tag.
Actually, this trace can be turned into an attack against
the unlinkability property. Indeed, by continuing the previous
trace, the reader can send a new request to the tag generating
a fresh nonce r′′
to this new request choosing his nonce r′′
r′′
the reader talking to the same tag, cannot be mimicked in the
single session scenario, and corresponds to an attack trace.
1 . The attacker I(Tag) can again answer
1 ⊕ r1 ⊕ r2. This execution, involving two sessions of
2 accordingly, i.e.
2 = r′′
More importantly, this scenario can be seen as a traceability
attack on the original version of the protocol (the stateful
version) leading to a practical attack. The attacker will ﬁrst
start a session with the targeted tag by sending it a nonce r0
and storing its answer. Then, later on, he will interact with the
reader as described in the second part of the attack scenario.
Two situations may occur: either the interaction is successful
meaning that the targeted tag has not been used since its last
interaction with the attacker; or the interaction fails meaning
that the key has been updated on the reader’s side, and thus
the targeted tag has performed a session with the reader since
its last interaction with the attacker. This attack shows that the
reader may be the source of leaks exploited by the attacker
to trace a tag. This is why we advocate for the strong notion
of unlinkability we used, taking into account the reader and
considering it as important as the tag.
We may note that the same protocol was declared untrace-
able in [2] due to the fact that they have in mind a weaker
notion of unlinkability.
To avoid the algebraic attack due to the properties of the
xor operator, we may replace this operator using the pairing
operator. The resulting protocol
that
falls into our class, and for which frame opacity and well-
authentication can be established using UKano, again in less
than 1 second. Therefore, Theorem 1 allows us to conclude
that it preserves unlinkability.
is a 2-party protocol
D. BAC protocol and some others
An e-passport is a paper passport with an RFID chip that
stores the critical information printed on the passport. The
International Civil Aviation Organization (ICAO) standard [36]
)
)
The BAC protocol using Alice & Bob notation between Tag
(i.e. passport) and Reader is depicted above. A process
Tag → Reader ∶ nT
({nR, nT , kR}kE
Reader → Tag ∶ {nR, nT , kR}kE , mackM
({nT , nR, kT}kE
Tag → Reader ∶ {nT , nR, kT}kE , mackM
modeling Tag more precisely is deﬁned below, where m =
enc(⟨nT ,⟨π1(dec(xE, kE)), kT⟩⟩, kE).
T(kE, kM) = νnT .νkT .out(cT , nT).in(cT , x).
let xE = π1(x), xM = π2(x), ztest = eq(xM , mac(xE, kM)) in
= eq(nT , π1(π2(dec(xE, kE)))) in
out(cT ,⟨m, mac(m, kM)⟩)
else out(errorNonce)
let z′
test
else out(errorMac)
We consider the signature given in Example 1 augmented
with a function symbol mac of arity 2. This is a public
constructor whose purpose is to model message authentication
code, taking as arguments the message to authenticate and the
mac key. There is no rewriting rule and no equation regarding
this symbol. We also assume public constants to model error
messages. The UK version of the protocol does not distinguish
the two cases of failure, i.e. errorMac and errorNonce are the
same constant, whereas the French version does.
Fig. 6. Description of the BAC protocol
speciﬁes several protocols through which this information
can be accessed. Before executing the Basic Access Control
(BAC) protocol, the reader optically scans a weak secret from
which it derives two keys kE and kM that are then shared
between the passport and the reader. Then, the BAC protocol
establishes a key seed from which two sessions keys are
derived. The session keys are then used to prevent skimming
and eavesdropping on the subsequent communication with the
e-passport.
In [8], two variants of the BAC protocol are described and
analyzed w.r.t. the unlinkability property as formally stated
in this paper. We refer below to these two variants as the
French version and the UK version. The UK version is claimed
unlinkable (with no formal proof) whereas an attack is reported
on the French version. To explain the difference between the
two versions, we give a description of the passport’s role in
Figure 6. The relevant point is the fact that, in case of failure,
the French version sends a different error message indicating
whether the failure occurs due to a problem when checking the
mac, or when checking the nonce. This allows the attacker to
exploit this conditional to learn if the mac key of a Tag is the
one used in a given message ⟨m, mac(m, k)⟩. Using this, he
can very easily trace a tag T by ﬁrst eavesdropping an honest
interaction between the tag T and a reader.
The UK version of the BAC protocol is a 2-party protocol
576576
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:24 UTC from IEEE Xplore.  Restrictions apply. 
according to our deﬁnition1. Note that since the two error
messages are actually identical, we can merge the two let
instructions, and therefore satisfy our deﬁnition of being
a responder role. Then, we established frame opacity and
well-authentication using UKano. It took less than 1 minute.
Therefore, Theorem 1 allows us to conclude that unlinkability
is indeed satisﬁed.
Regarding the French version of this protocol, it happens
that
the passport’s role is neither an initiator role, nor a
responder role according to our formal deﬁnition. Indeed, our
deﬁnition of a role, and therefore of a 2-party protocol does not
allow to model two sequences of tests that will output different
error messages in case of failure. As illustrated by the attack
on the French version of the BAC protocol, imposing this
syntactic condition is actually a good design principle w.r.t.
unlinkability.
Once the BAC protocol has been successfully executed, the
reader gains access to the information stored in the RFID tag
through the Passive and Active Authentication protocols (PA
and AA). They are respectively used to prove authenticity of
the stored information and prevent cloning attacks, and may be
executed in any order. A formal description of these protocols
is available in [37]. These two protocols also fall into our
class and our conditions can be checked automatically both
for unlinkability and anonymity properties. We can also use
our technique to analyze directly the three protocols together
(i.e. the UK version of the BAC together with the PA and
AA protocols in any order). We thus prove unlinkability and
anonymity w.r.t. all private data stored in the RFID chip (name,
picture, etc.). UKano concludes within 7 minutes to establish
both well-authentication and frame opacity.
E. PACE protocol
The Password Authenticated Connection Establishment pro-
tocol [38] (PACE) has been proposed by the German Federal
Ofﬁce for Information Security (BSI) to replace the BAC
protocol. It has been studied in the literature [29], [39], [40] but
to the best of our knowledge, no formal proofs about privacy
have been given. Similarly to BAC, the purpose of PACE is
to establish a secure channel based on an optically-scanned
key k. The protocol comprises four main steps (see Figure 7):
● The tag randomly chooses a random number sT , encrypts
it with the shared key k and sends the encrypted random
number to the reader (message 1).
● Both the tag and the reader perform a Difﬁe-Hellman
exchange (messages 2 & 3), and derive G from sT and
gnRnT .
● The tag and the reader perform a Difﬁe-Hellman ex-
change based on the parameter G computed at the previ-
ous step (messages 5 & 6).
● The tag and the reader derive a session key k′ which are
conﬁrmed by exchanging and checking the authentication
tokens (messages 8 & 9).
1.
3.
4.
gnR
gnT
Tag → Reader ∶ {sT}k
2. Reader → Tag ∶
Tag → Reader ∶
Both parties compute G= gen(sT , gnRnT).
5. Reader → Tag ∶
Tag → Reader ∶ Gn′
7. Both parties compute k′ = Gn′
8. Reader → Tag ∶
mac(Gn′
Tag → Reader ∶ mac(Gn′
T , k′)
R , k′)
Gn′
Rn′
T
6.
9.
R
T
Fig. 7. PACE in Alice & Bob notation
A description in Alice & Bob notation is given in Figure 7.
Moreover, at step 6, the reader will not accept as input a
message which is equal to the previous message that it has
just sent.