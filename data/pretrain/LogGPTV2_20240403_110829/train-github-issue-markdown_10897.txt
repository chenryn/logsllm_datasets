I'm not sure if this is an issue or whether there is an expected performance
problem with forwarding functions with varargs (or something else). As
suggested in a discourse thread I'm submitting it here as an issue.
The following code run as a script with `-O3`
    using InteractiveUtils
    function foo(f::F, m::Int64, args...) where F<:Function
      for i in 1:m
        z = f(args...)
      end
      return true
    end
    function g(x::Float64, y::Float64)
      return rand() < 0.5, 1
    end
    function bar(f::F, m::Int64, x::Float64, y::Float64) where F<:Function
      for i in 1:m
        z = f(x, y)
      end
      return true
    end
    versioninfo()
    @btime foo(g, 1000, 1.0, 2.0)
    @btime bar(g, 1000, 1.0, 2.0)
gives as output
    Julia Version 1.0.0
    Commit 5d4eaca0c9 (2018-08-08 20:58 UTC)
    Platform Info:
      OS: macOS (x86_64-apple-darwin14.5.0)
      CPU: Intel(R) Core(TM) i7-4650U CPU @ 1.70GHz
      WORD_SIZE: 64
      LIBM: libopenlibm
      LLVM: libLLVM-6.0.0 (ORCJIT, haswell)
    Environment:
      JULIA_NUM_THREADS = 4
      38.486 μs (1000 allocations: 31.25 KiB)
      1.260 μs (0 allocations: 0 bytes
This suggests there could be an issue with forwarding arguments with varargs.
Changing many things in isolation eliminates the allocations, e.g. if
  1. `g` returns `rand() < 0.5`
  2. `g` returns `x < y, 1`