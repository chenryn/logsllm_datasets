(m1, . . . , m(cid:3)) outputs (c1, . . . , cn), where ci =
(m1, . . . , m(cid:3)) =
(cid:2)
i
(cid:2)
i
2
Error resilience of ECCd. The MVerECC algorithm in ECCd
needs at least one correct MAC block in order to verify the integrity
of the decoded message. This implies that, even if the minimum
distance of the underlying code is d = n − (cid:4) + 1, the construction
is resilient to at most E − 1 erasures, and (cid:11) E−1
(cid:12) errors, for E =
min(d, s).
2
LEMMA 3. If RS-UHF is constructed from a (n, (cid:4), n− (cid:4) + 1)-
Reed-Solomon code and g is a PRF family, then the IP-ECC code
ECCd deﬁned above has the following advantage:
Advuf-ecc
ECCd
(cid:3)
(q1, q2, t) ≤ 2
Advuf-mac
UMAC (q1, q2, t)
(cid:4)
.
Aggregating MACs for IP-ECC codes. The techniques we de-
veloped in Section 5.3 for aggregating MACs, i.e., for composite
MAC veriﬁcation, apply in a natural way to IP-ECC codes. Con-
sider the linear combination of IP-ECC codewords (cid:7)c1, . . . , (cid:7)cv as
a composite codeword (cid:7)c =
i=1 αi(cid:7)ci. Implicit in (cid:7)c are compos-
ite MACs, i.e., linear combinations of MACs from the individual,
contributing codewords. So we can apply MVerECC directly to (cid:7)c,
thereby verifying the correctness of (cid:7)c1, . . . , (cid:7)cv.
(cid:2)
v
Systematic IP-ECC codes.
In a systematic code, codewords
are formed by appending parity blocks to messages. The Reed-
Solomon codes obtained through polynomial evaluation are, in gen-
eral, not systematic. However, it is possible to offer a different view
of R-S encoding that is, in fact, systematic. The codebook for an R-
S code speciﬁed by (cid:7)a = (a1, . . . , an) consists of all polynomials of
degree (cid:4) − 1 evaluated on {ai}n
i=1: CRS = {(f (a1), . . . , f (an))|
deg(f ) ≤ (cid:4) − 1}. A systematic code is one in which a message
is mapped to a codeword whose ﬁrst (cid:4) symbols match the message
193(given a message (cid:7)m = (m1, . . . , m(cid:3)), a unique polynomial f of
degree (cid:4) − 1 for which f (ai) = mi, i = [1, (cid:4)] can be determined).
The IP-ECC construction can be adapted for systematic Reed-
Solomon codes as follows: we encode a message under a sys-
tematic code, and then apply the PRF only to the parity blocks.
Our results in Lemma 3 still hold for this systematic encoding for
s = n − (cid:4). We employ this systematic code that can recover from
n − (cid:4) − 1 erasures and (cid:11) n−(cid:3)−1
5.5 Adversarial codes
(cid:12) errors in our HAIL protocol.
2
Adversarial codes [6, 23] are keyed codes resistant to a large
fraction of adversarial corruptions (within classical error-correcting
bounds) against a computationally bounded adversary. BJO [6]
deﬁne adversarial codes formally and give the ﬁrst practical sys-
tematic construction based on cryptographically protected, striped
Reed-Solomon codes. We omit the formal deﬁnition of adversarial
codes, but intuitively, an adversary has advantage γ for a secret-key
adversarial code if she is able to output a pair of codewords at small
Hamming distance that decode to different messages. We refer the
reader to [6] for full details of deﬁnition. A related notion is that
of computational codes, codes that achieve higher error resilience
than classical error-correcting codes by exploiting computationally
bounded channels [18, 26].
In the BJO construction, the ﬁle is permuted ﬁrst with a secret
key and then divided into stripes. Parity blocks are computed for
each stripe and appended to the unmodiﬁed ﬁle. To hide stripe
boundaries, parity blocks are encrypted and permuted with another
secret key. The encoding of the ﬁle consists of the original ﬁle
followed by the permuted and encrypted parity blocks, and is sys-
tematic. The same construction (without rigorous formalization,
though) has been proposed independently by Curtmola et al. [10].
We employ this construction for the server code in HAIL.
6. HAIL: PROTOCOL SPECIFICATION
Using the technical building blocks deﬁned in Section 5, in this
section we give full details on the HAIL protocol.
6.1 Key Generation
Let (cid:4) be the number of primary servers, and n the total number
of servers. The client generates the following sets of keys:
j}n
- Dispersal-code keys: These are n−(cid:4) pairs of keys {κj , κ
(cid:2)
j=(cid:3)+1,
for the UHF and PRF in the UMAC construction given in Section
5.2, respectively;
- Server-code keys: These are n keys (one per server) for the
server code described in Section 5.5; and
- Challenge keys: These are keys used to generate challenges and
to seed inputs to the aggregation code for responses. They can be
generated from a master key that the client stores locally.
6.2 Encoding Files
The encoding of ﬁles in HAIL has been depicted in Figure 1.
We aim at obtaining a distributed, systematic encoding Fd of a ﬁle
F . First, we partition F into (cid:4) distinct segments F (1), . . . , F ((cid:3))
and distribute these segments across the primary servers S1, . . . , S(cid:3)
respectively. Each segment can be viewed as a set of blocks (or
symbols) with values in a ﬁeld I (in our implementation we use
I = GF [2128]). This distributed cleartext representation of the ﬁle
remains untouched by our subsequent encoding steps.
We then encode each segment F (j) under the server code (imple-
mented with the adversarial erasure code construction of BJO [6]
described in Section 5.5) to protect against small corruption at each
server. The effect of the server code is to extend the “columns”
of Fd by adding parity blocks. Next, we apply the dispersal code
ECCd (as deﬁned in Section 5.4) to create the parity blocks that re-
side on the secondary servers S(cid:3)+1, . . . , Sn. It extends the “rows”
of Fd across the full set of n servers. To embed the dispersal code in
a full-blown IP-ECC, we also add PRF values on the parity blocks
for each row. Viewed another way, we “encrypt” columns (cid:4) + 1
through n, thereby turning them into cryptographic MAC values.
Finally, to allow the client to conﬁrm when it has successfully
downloaded F , we compute and store on the server a MAC over F .
The steps of encode are detailed below:
1. [File partitioning] Partition the ﬁle into (cid:4) segments and store
segment F (j) on Sj, for j = [1, (cid:4)]. Denote by mF = |F|/(cid:4) the
number of blocks in each segment. We have obtained a (mF , (cid:4))
matrix {Fij}i=[1,mF ],j=[1,(cid:3)] containing the original ﬁle blocks.
2. [Server code application] Encode each ﬁle segment F (j) un-
der the systematic server code with symbols in I (viewed as an era-
sure code), and obtain a segment of m blocks at each server (where
blocks mF + 1, . . . , m are parity blocks for the server code).
If we denote by Fd = {F d
3. [Dispersal code application] Apply the systematic dispersal
code ECCd as deﬁned in Section 5.4 to the rows of the encoded
matrix from step 2. We determine thus segments F ((cid:3)+1), . . . , F (n).
ij}i=[1,m],j=[1,n] the encoded rep-
ij = Fij ∈ I
resentation of F at the end of this step, then F d
(i.e., block i in F (j)), for i = [1, mF ], j = [1, (cid:4)]. F d
ij for i =
[mF + 1, m], j = [1, (cid:4)] are the parity blocks under the server
code. The columns (cid:4) + 1, . . . , n are obtained through the appli-
cation of the ECCd construction to columns 1, . . . , (cid:4) as follows:
(cid:2)
ij = RS-UHFκj (Fi1 . . . Fi(cid:3)) + gκ
(τij ), for i = [1, m], j =
F d
j
[(cid:4) + 1, n]. τij is a position index that depends on the ﬁle handle,
block index i and server index j, e.g., hash of the ﬁle name, i and
j. RS-UHF is the universal hash function construction based on
Reed-Solomon codes given in Section 5.1.
4. [Whole-ﬁle MAC computation] Lastly, a cryptographic MAC
of the ﬁle (and its handle) is computed and stored with the ﬁle.
ij}m
0 = {F d
i=1.
The initial share at time 0 for each server Sj is F
(j)
6.3 Decoding Files
For decoding the encoded matrix, there are two cases to consider:
- If the dispersal code is an error-correcting code, then up to
(cid:12) errors can be corrected in each row. This choice imposes
(Otherwise, the adversary
(cid:11) n−(cid:3)−1
the requirement that b ≤ (cid:11) n−(cid:3)−1
could corrupt all rows in an epoch, obliterating F ).
(cid:12).
2
2
In this case, decoding of the matrix proceeds ﬁrst on rows, and
then on columns. In the ﬁrst step, each row of the matrix is decoded
and the corresponding message is checked for integrity using the
MACs embedded in the parity blocks. If a row can not be correctly
decoded (i.e., the number of corruptions exceeds the error correc-
tion capability of the dispersal code) or if none of the MACs in the
parity blocks of a row veriﬁes, then we mark all blocks in that row
as erasures. In the second step, the server code implemented with
an erasure code is used to recover the row erasures from the ﬁrst
step.
- If the dispersal code is an erasure code, the protocol tolerates
up to b ≤ n − (cid:4) − 1 failures per epoch. In this case, we could
employ an error-correcting server code. Decoding proceeds ﬁrst
on columns, to recover from small corruptions within each server.
Then, the rows of the matrix are corrected with the dispersal erasure
code.
A mechanism for determining the positions of errors in a row is
needed. We can ﬁnd erroneous blocks using the embedded MACs
194on the parity blocks, as long as at least one of the MACs in the par-
ity blocks is valid. This approach requires brute force: We consider
in turn each MAC block to be valid, try all sets of (cid:4) blocks in the
codeword (among the n − 1 remaining blocks), until we ﬁnd a de-
coding for which the MAC block is valid. The brute force approach
can recover from n − (cid:4) − 1 erasures.
Using an erasure code instead of an error-correcting code for
ECCd requires fewer secondary servers. The required brute-force
(cid:6)
decoding, though, is asymptotically inefﬁcient, since (n− (cid:4))
n−1
(cid:3)
combinations of blocks have to be examined. In the rest of the pa-
per, we assume that the dispersal code is an error-correcting code.
Nonetheless, we can construct protocols for erasure dispersal codes.
(cid:5)
6.4 The Challenge-Response Protocol
In the HAIL challenge-response protocol, the client veriﬁes the
correctness of a random subset of rows D = i1, . . . , iv in the en-
coded matrix. The client’s challenge consists of a seed κc from
which each server derives set D, as well as a value u ∈ I.
Each server Sj returns a linear combination of the blocks in the
row positions of D, denoted by Rj. To aggregate server responses,
we use an aggregation code ECCa with message size v, imple-
mented also with a Reed-Solomon code. Rj is computed as the
uth symbol in ECCa across the selected rows. The responses of all
servers (R1, . . . , Rn) then represent a linear combination of rows
i1, . . . , iv with coefﬁcients αi = ui−1, i = [1, v].
Intuitively here, because all servers operate over the same subset
of rows D, the sequence R = (R1, . . . , Rn) is itself a codeword
in the dispersal code—with aggregate PRF pads “layered” onto
the responses R(cid:3)+1, . . . , Rn of the parity servers. Thanks to our
IP-ECC dispersal code and our techniques of aggregating several
MACs into a composite MAC (described in Section 5.3), the client
can check the validity of the combined response R, by decoding
to a message (cid:7)m and checking that at least one of the (composite)
responses Rj of the secondary servers is a valid (composite) MAC
on (cid:7)m. Having done so, the client can then check the validity of
each individual response Rj: Rj is a valid response for a primary
server if it matches the j-th symbol in (cid:7)m; for a secondary server,
Rj is a valid response if it is a valid MAC on (cid:7)m.
The challenge-response protocol is described below:
1. The client sends a challenge κc to all servers.
2. Upon receiving challenge κc, server Sj derives set D =
{i1, . . . , iv}, as well as a value u ∈ I. The response of server
Sj is Rj = RS-UHFu(F d
i1j, . . . , F d
iv j).
3. The client calls the linear composite MVerECC algorithm of
the dispersal code (as described in Section 5.4) on (R1, . . . , Rn).
If the algorithm outputs ( (cid:7)m, 0) or (⊥, 0), then veriﬁcation of the
response fails and verify(κ, j,{κc, Ri}n
algorithm. Algorithm verify(κ, j, {κc, Ri}n
4. Otherwise, let ( (cid:7)m, 1) be the output of the composite MVerECC
- mj = Rj, for j ∈ [1, (cid:4)]; or
- Rj is a valid composite MAC on (cid:7)m under UMAC with keys
j ) and coefﬁcients {αi}v
(cid:2)
(κj , κ
i=1, for j ∈ [(cid:4) + 1, n].
i=1) returns 0 for all j.
i=1) returns 1 if:
As an optimization, the client can ﬁrst check that the responses
(R1, . . . , Rn) are valid without involving the algorithm MVerECC
of the dispersal code. To do so, the client computes the valid code-
word of the ﬁrst (cid:4) positions (R1, . . . , R(cid:3)) from the vector of re-
sponses. If at least one parity block in this codeword matches the
received response, the client has found the correct message with-
out involving the expensive decoding algorithm of Reed-Solomon
codes used in MVerECC. In this case, the client could skip step 3,
and proceed directly to step 4 in the above algorithm.
As in Section 6.3, a brute force approach to the decoding step in
MVerECC could be applied if the dispersal code is an erasure code,
instead of an error-correcting code.
6.5 Redistribution of Shares
HAIL runs for a number of epochs T . In each epoch the client
issues nq challenges to all servers and veriﬁes their responses. The
client monitors all servers in each epoch, and if the fraction of cor-
rupted challenges in at least one server exceeds a threshold q, the
redistribute algorithm is called.
In the redistribute algorithm, the client downloads the ﬁle shares
of all servers, and applies the decoding algorithm described above.
Once the client decodes the original ﬁle, she can reconstruct the
shares of the corrupted servers as in the original encoding algo-
rithm. The new shares are redistributed to the corrupted servers at
the beginning of the next time interval t+1 (after the corruption has
been removed through a reboot or alternative mechanism). Shares
for the servers that have correct shares remain unchanged for time
t + 1. We leave the design of more efﬁcient redistribute algorithms
for future work.
7. SECURITY ANALYSIS
We deﬁne the HAIL system to be available if the experiment
from Figure 2 outputs 0; otherwise we say that the HAIL system
is unavailable. HAIL becomes unavailable if the ﬁle can not be
recovered either when a redistribute is called or at the end of the
experiment. In this section, we give bounds for HAIL availability
and show how to choose parameters in HAIL for given availability
targets. Full proofs are deferred to the full version of the paper [5].
There are several factors that contribute to HAIL availability.
First is the redundancy embedded in each server through the server
code; it enables recovery from a c fraction of corruption at each
server. Second is the frequency with which the client challenges
each server in an epoch; this determines the probability of detect-
ing a corruption level greater than c at each server. Third, the
redundancy embedded in the dispersal code enables ﬁle recovery
even if a certain threshold of servers are corrupted.
Challenge frequency. In HAIL, nq challenges are issued by the
client in an epoch. A redistribute operation is triggered if at least
one of the servers replies incorrectly to more than a q-fraction of
challenges. Recall that at least n − b servers have a correct code
base in a time interval, but might have corruptions in their storage
system. We refer to these corruptions as residual—they were “left
behind” by A. We are interested in detecting servers whose residual
corruptions exceed the correction level c tolerated by the server
code.