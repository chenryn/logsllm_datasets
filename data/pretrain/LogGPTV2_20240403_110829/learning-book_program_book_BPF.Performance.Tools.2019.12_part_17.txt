Summarizes event argument dlistributions
See the BCC repository for full and updated lists of tool options and capabilities. A selection of
the most important capabilities are summarized here.
4.5
funccount
funccount(8)? counts events, especially function calls, and can answer questions such as:
• Is this kernel- or user-level function being called?
 What is the rate of this function call, per second?
For efficiency, funccount(8) maintains the event count in kernel context by using a BPF map, and
it only reports the total to user space. While this greatly reduces the overhead of funccount(8)
compared to dump and post-process tools, high-frequency events can still cause significant
overhead because of their frequency. For example, memory allocations (malloc(), free() can
occur millions of times per second, and using funccount(8) to trace them can cost CPU overhead
exceeding 30%. See Chapter 18 for more on typical frequencies and overhead.
The following sections demonstrate funccount(8) and explain its the syntax and capabilities.
4.5.1 funccount Examples
1. Is the tcp_cdrop0 kernel function ever called?
funcoount tep_drop
Tracing 1 functlons for *tcp_dxop"...
H1t Ctr1-C to end.
FUNC
COUNT
tcp_drop
3
De tach.ing-..
2 Origin: I developed the first version on 12-Jul-2014 using Prace to count kemel function calls and a BCC version of
this on 9-Sep-2015. Sasha Goidshtein aded other event types to the BCC version on 18-0ct.2016: user function calls
(uprobes), tracepoints, and USDT
---
## Page 132
4.5 funccount
6
Answer: yes. This invocation simply traces the tcp_drop0 kernel function until Ctrl-C is typed.
While tracing, it was called three times,
2. What is the most frequent kernel VFS function?
funccount *vfs_*
Tracing 55 functions for *vfs_**... Hit Ctrl-C to end.
^C
FUBIC
COUTT
vfs_renane
1
vfa_readlink
2
vfs_lock_file
vfs_statfs
3
vfs_fsync_range
3
vfs_un.link
5
vfs_statx
189
P"xaA
229
vfs_open
345
353
353
vfs_xritev
1776
pesx"s
EE5S
vfs_xrite
6938
De tach.ing -..
This command uses a shell-like wildcard to match all kernel functions beginning with * vfs_°. The
most frequent kernel function while tracing was vfs_write(), with 6938 calls.
3. What is the rate of the user-level pthread_mutex_lock() function per second?
 funccount -1 1 c:pthread_mutex_1ock
Tracing 1 functions for *cipthread_mutex_lock*... Hit Ctrl-C to end.
FUIC
COUNT
pthread_nutex_lock
1849
FUNC
00377
pthread_nutex_lock
1761
FUIC
cOUTT
pthread_nutex_lock
2057
FUNC
COUNT
pthread_nutex_lock
2261
[.--]
---
## Page 133
96
Chapter 4 BCC
The rate is variable, but it appears to be around 2000 calls per second. This is instrumenting a
function from the libc library, and it is doing so system-wide: the output shows the rate across all
processes,
4. What is the most frequent string function call from libc, system-wide?
funccount 'c:str*'
Tzacing 59 functions foz *e:atx**,., Bit Ctrl-C to end.
FUNC
COUNT
st.rndup
strerror_r
5
strerror
5
strtof32x_1
OSE
strtou1
587
strto11
724
strtok_r
2839
strdup
5788
De tach.ing- ..
While tracing, it was strdup() with 5788 calls.
5. What is the most frequent syscall?
funccount *t:syscalls: sys_enter_*
Tracing 316 functions for "t:syscalls:sys_enter_**
. Hit Ctel-C to end.
FUHIC
COUVT
syscalla:sya_enter_creat
1
[...]
syscalls:sys_enter_read
6582
syscalls:sys_enter_vrite
7442
syscalls:sys_entex_nprotect
7460
syscalls:sys_enter_gettid
7589
syscalla:aya_entex_ioct1
10984
[[od"zouas.s:etTes
14980
Drmsoeaxequess:sttess
27113
syscalls:sys_enter_futex
42929
De tach.ing...
This could be answered using different event sources. In this case, I used tracepoints from the
syscalls system and simply matched all the syscall entry tracepoints (*sys_enter_*°). The most
frequent syscall while tracing was futex(), with a count of 42,929 calls.
---
## Page 134
4.5 funccount
6
4.5.2 funccount Syntax
The arguments to funccount(8) are options to change behavior and a string to describe the events
to instrument:
funccount [optlons] eventnane
The syntax for eventname is:
 name or p: name: Instrument the kernel function called nume()
·1ib: name or p: 1ib: name: Instrument the user-level function called name() in the
 ieq
* path: name: Instrument the user-level function called name() in the file at pμath
t: system: name: Instrument the tracepoint called sysferm:marme
*u: Iib: name: Instrument the USDT probe in library Jib called nmme
*: A wildcard to match any string (globbing). The r option allows regular expressions to be
used instead.
This syntax is somewhat inspired by Ftrace. funccount(8) uses kprobes and uprobes when
instrumenting kernel- and user-level functions.
4.5.3 funccount One-Liners
Count VFS kermel calls:
funccount 'vfs_**
Count TCP kernel calls:
Eunccount 'tcp_**
Count TCP send calls per second:
funccount -i 1 *tcp_send**
Show the rate of block I/O events per secondl:
Eunccount =i 1 *t:block:**
Show the rate of new processes per secondl:
funccount -i 1 t:sched:sched_process_fork
Show the rate of libc getaddrinfo() (name resolution) per second:
funccount -i 1 cigetaddrinfo
Count all *os.** calls in libgoc
unccount 'go1os, **
---
## Page 135
98
Chapter 4 BCC
4.5.4
funccount Usage
There is more to funccount(8) than shown so far, as summarized by the usage message:
+funceount -h
usage:  funccount[h]  [-p  PID] [1  INTERVAL] [d DURATIo8]  [T] [=]  [D]
pattern
Count functions, tracepoints, and UsDT probes
positional argunents1
pattern
search expression for events
optional azguments:
-h, --help
shov th.is help nessage and exit
-p PID,
--p1d PI0
trace thia PID only
-i INTERVAL, --interval INTERVAL
sunazy Interval, seconds
-d DURATIOM, --duration DURAT10N
total duzration of trace, seconds
-T, --timestanp
inclvde tinestarp on output
, --regexp
use regular expresslons. Default ig "** wlldcards
-, --debug
only-
print BPF pzogzan before starting (fox debugging
purposes)
exanples1
/funccount vfs_*
# count kernel fns atarting with *vfs"
/funccount -r *^vfs,**
sane as above, using regular expressions
/funccount -Tl 5 *vfs_**
output evezy 5 seconds, vith tinestanps
/funccount -d 10 *vfs_*
trace for 10 seconds only
-/funceount -p 18s *vfa_**
 count vfs calls for PID 18l only
[. . - ]
The interval option () allows funccount one-liners to become, in a way, mini performance
thousands of events available and filtered, if desiredl, to a target process ID using p.
tools, showing the rate of custom events per second. Custom metrics can then be created from the
---
## Page 136
4.6  stackcount
66
4.6
6stackcount
stackcount(8)? counts the stack traces that led to an event. As with funccount(8), an event may
be a kernel- or user-level function, tracepoint, or USDT probe. stackcount(8) can answer these 
questions:
• Why is this event called? What is the code path?
 What are all the different code paths that call this event, and what are their frequencies?
For efficiency, stackcount(8) performs this summary entirely in kernel context, using a special
BPF map for stack traces. User space reads stack IDs and counts and then fetches the stack
u °(g)unooung qm sy sno Suupd pue uopelsuen joquis rog dew ddg auq uong saoen
overhead depends on the rate of the event that is instrumented, and it should be sightly higher as
stackcount(8) does more work for each event: walking and recording the stack trace.
4.6.1stackcount Example
I noticed using funccount(8) that on an idle system, I seemed to have a high rate of ktime_get()
kernel function callsmore than Soo0 per second. These calls fetch the time, but why does my
idlle system need to fetch the time so frequently?
This example uses stackcount(8) to identify the code paths that led to ktime_get():
+ stackcount ktime_get
Tracing l functlons for *ktine_get"... Hit Ctx1-C to end.
[...]
ktine_get
nvse_queue_q
_blk_nq_try_issue_direct1y
blk_nq_tzy_lasve_directly
blk_mq_nake_request
1senbexexes"otasueb
dhcrypt_xri te
kthread
ret_fron_fork
52
[.--]
3 Origin: I developed it on 12-Jar-2016 for kprobes only, and Sssha Goidshtein added other event types on 09-Ju-2016:
uprobes and tracepoints. Previously, I frequently used kprobe -s from my Ftrace perftools to print per-event stacks, but
the output wss often too verbose and I wanted inhernel frequency counts instead, which led to stackcount(8). I also
asked Tom Zanussi for stadk counts using Prace hist triggers, and he did ad i.
---
## Page 137
100
Chapter 4 BCC
ktine_get
do_id1e
xos-dnxes"ndo
start_secondary
secondary_startup_64
1077
Detach.ing-.
The output was hundreds of pages long and contained more than 1000 stack traces. Only
two have been included here. Each stack trace is printed with one line per function and
then the occurrence count. For example, the first stack trace shows the code path through
dmcrypt_write(), blk_mq_make_request(), and nvme_queue_sq0. I would guess (without
having read the code) that it is storing an I/O start time for later use with prioritization.
That path from ktime_get() occurred 52 times while tracing. The most frequent stack that
called ktime_get( was from the CPU idle path.
The P option includes the process name and PID with the stack trace:
[...]
ktime_ge t
do_idle
cpu_startup_entxy
start_secondary
secondary_startup_64
sxappez/2 [0]
207
This shows that PID 0 with process name *swapper/2° was calling ktime_get() via do_idle(),
further confirming that this is the idle thread. This P option produces more output, as stack
traces that were previously grouped are now split between each separate PID.
4.6.2stackcount Flame Graphs
Sometimes you willfind only one or a few stack traces printed for an event, which can easily
be browsed in the stackcount(8) output. For cases like the example with ktime_get(), where the
suder8 auue) ndno at azensja o4 pasn aq ueo sqder8 atueg *Suo saled jo spaspuntq s μndμno
are introduced in Chapter 2.) The original flame graph software [37] inputs stacks in folded
---
## Page 138
4.6  stackcount
101
format, with one line per stack trace, frames (function names) delimited by semicolons, and a
space and a count at the end. stackcount(8) can generate this format with f.
The following example traces ktime_get() for 10 seconds (D 10), with per-proc
cess stacks (P), and
generates a flame graph:
unt01.txt
1586
3425 387661
out.stack
n.t01. txt
$ cd FlaneGraph
-/flasegraph.p1
ountol.txt
out.stacko
nt01.8vg
The wc(1) tool was used here to show that there were 1586 lines of outputrepresenting this
many unique stack and process name combinations. Figure 4-3 shows a screenshot of the
resulting SVG file.
Figure 4-3 stackcount(8) ktime_get() fliame graph
The flame graph shows that most of the ktime_get() calls were from the eight idlle threadsone
for each CPU on this system, as shown by the similar towers. Other sources are visible as the
narrow towers on the far left.
4.6.3stackcountBroken StackTraces
Stack traces, and the many problems with getting them to work in practice, are discussed in
Chapters 2, 12, and 18. Broken stack walking and missing symbols are commonplace.
---
## Page 139
102
2Chapter 4 BCC
As an example, the earlier stack trace shows tick_nohz_idle_enter() calling ktime_get(). However,
this doesn’t appear in the source code. What does appear is a call to tick_nohz_start_idlle(), which
has the source (kernel/time/tick-sched.c):
static void tick_nohz_start_idle(atzuct tick_sched *ts)
ts=>1dle_entryt.ine = kt.ime_get () :
ts=>idle_active = 1
sched_clock_1dle_sleep_event (1 
This is the kind of small function that compilers like to inline, which in this case results in a stack
where the parent function calls ktime_get() directly. The tick_nohz_start_idle symbol is not in
/proc/kallsyms (for this system), further suggesting that it has been inlined.
4.6.4 stackcount Syntax
The arguments to stackcount(8) define the event to instrument:
stackcount[optlons] eventnane
The syntax for eventname is the same as for funccount(8):
 name or p: name: Instrument the kernel function called marme0)
1ib: name or p : 1ib: name: Instrument the user-level function called name() in the
library lib
* path: name: Instrument the user-level function called name) in the file at pμutih
t: system: name: Instrument the tracepoint called system:zame
·u: Iib: name: Instrument the USDT probe in library Jib called name
*: A wildcard to match any string (globbing). The r option allows regexps
4.6.5 stackcount One-Liners
Count stack traces that created block I/O:
stackcount t:block:block_rq_insezt
Count stack traces that led to sending IP packets:
stackcount lp_output
Count stack traces that led to sending IP packets, with the responsible PID:
stackcount -P 1p_output
---
## Page 140
4.6  stackcount
103
Count stack traces that led to the thread blocking and moving off-CPU:
stackcount t:ached:sched_sxitch
Count stack traces that led to the readi() syscall:
4.6.6 stackcount Usage
There is more to stackcount(8) than shown so far, as summarized by the usage message:
 stackcount -h
usage:  stackcount [h][-p PID] [i INTERVAL] [D DURATION] [-T] [-] [s]
[6ngep-- [z [p]  [n- 【n1  [x-]  []
pattern
positionalargunents1
pattern
search expression for events
optional azgusents:
h,
 --help
shov this help nessage and exit
β PID,
 --pid PID
trace thia PID only
1 INTERVAL,
--interval INTERVAL