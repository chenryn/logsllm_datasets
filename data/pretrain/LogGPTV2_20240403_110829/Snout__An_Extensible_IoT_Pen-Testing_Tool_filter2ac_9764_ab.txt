packages:
GNU Radio flowgraphs [6], such as IEEE 802.11 and 802.15.4
transceivers [3, 5] and RF metadata parsers like RFTap [18],
which can be controlled directly from within Snout.
scapy-radio, which adds GNU Radio compatibility to the packet
manipulation library scapy [1, 19] and can be used as an ab-
straction layer for packet transcoding.
Special-purpose SDR software, such as Xianjun Jiao’s BTLE
toolkit [10], which can provide general-purpose controllers
and input/output interfaces to low-level processes.
2.1 Software Architecture
Snout is built with extensibility towards the large range of available
IoT protocols in mind. Its command-line interface (CLI) dynamically
assembles protocol and use case-specific information from the user
and the underlying data models. It then orchestrates low-level
software that interfaces with the SDR hardware. By design, Snout
can interact with any type of child process. This design facilitates
extension and integration of other existing or custom-built modules
without imposing strict API requirements.
2.2 Usage and Functionality
Snout provides a flexible and interactive framework for transmitting
and receiving packets across different wireless protocols, making
it simple to start a scan or a transmission through its adaptable
command line. The CLI follows the syntax:
snout [OPTIONS] PROTO COMMAND [ARGS]..., where
OPTIONS are optional program modifiers such as output for-
mat, program verbosity, or Wireshark result export.
PROTO is the wireless protocol (e.g., zigbee, btle, etc.).
COMMAND is the command to be performed, such as scan
or transmit.
ARGS represent further command-specific arguments, such
as timeouts or input files.
If a command requires specific arguments the user did not pro-
vide, the CLI dynamically prompts the user for all necessary inputs
until these arguments are resolved. To facilitate command replay,
Snout prints out a fully parameterized command at the end of each
execution, which can be copied or reused in automated experi-
mental setups or shell scripts. The --help flag provides further
information on how to use the Snout CLI.
PosterCCS ’19, November 11–15, 2019, London, United Kingdom25304 PRIOR WORK
Nmap [12] and SeeSec [15] scan for IP-based networks vulnerabil-
ities, with limited access to OSI Layer 2. Nmap and Snout share
features such as device discovery as well as detection of protocol,
device firmware, and vendor version. Both tools also have the abil-
ity to generate arbitrary traffic to a device and perform response
analysis. However, Nmap only applies to wired Ethernet and wire-
less 802.11-based IoT devices, excluding lower complexity radio
protocols (e.g. Zigbee, ZWave, M-Bus, Bluetooth etc.) which con-
nect IoT endpoints/devices such as sensors and actuators. Snout,
on the other hand, is built on a SDR stack that fully includes the
physical layer (Layer 1) and the MAC layer (Layer 2), while still
providing access higher Layers. This allows it to fingerprint device
vendors or protocol versions (e.g., CVE-2016-5058) through lower
level attributes such as signal quality or sampling frequency offset.
The proprietary RadioInspector software [17] can monitor radio
spectrum and detect devices with multiple communication stan-
dards such as IEEE 802.15.4 (Zigbee, ISA100.11a, WirelessHART,
MiWi) or Bluetooth. It runs on different hardware platforms includ-
ing software defined radios or spectrum analyzers. The main appli-
cation of RadioInspector is in Technical Surveillance CounterMea-
sure (TSCM), including searching for clandestine radio frequency
sources, such as spy audio or video bugs. Snout shares similarities
with RadioInspector with respect to Zigbee and Bluetooth device
discovery, but is built on a fully open-source technology stack.
RFDump [11] is a software architecture for monitoring multi-
technology wireless networks. Similar to RadioInspector, RFDump
supports real-time classification of multiple wireless technologies
on the USRP platform. RFDump is an early approach to the field
of device identification that predates the rise of IoT and does not
seem to have been further developed or maintained.
Z3Sec [14] is an open-source penetration testing framework
that focuses on Zigbee-certified devices that implement either the
Zigbee Light Link (ZLL) or the Zigbee 3.0 standard. Although Z3Sec
is primarily for using these exploits, we have ported over the code
necessary to scan for ZLL devices from this tool into Snout.
Universal Radio Hacker (URH) [16] is a tool that mainly investi-
gates unknown radio protocols. It shares features with Snout such as
device discovery, version detection and fuzzing and is modular and
extensible to various wireless technologies. However, its primary
focus lies in the identification and demodulation of initially un-
known signals, while Snout focuses on network asset management
and security assessment of devices running known IoT protocols.
TumbleRF [20] is a fuzzing framework for RF and physical layer
protocol analysis. It leverages the fact that chipsets behave differ-
ently when subjected to malformed preamble and sync word of
Zigbee packets, which enables fingerprinting or tracking of certain
device types. Zigdiggity [8] is a Zigbee hacking toolkit intended
for Raspberry Pi and RaspBee radio. Its features include passive
device discovery, network discovery, finding and unlocking locks
and other attacks. In contrast to these tools, Snout is designed on a
modular SDR-based hardware and software platform.
5 SUMMARY AND FUTURE DIRECTION
We presented Snout, a versatile open-source toolkit for penetration
testing and non-IP IoT network mapping. Snout provides informa-
tion gathering and device enumeration utilities for a variety of IoT
protocols, including Zigbee, Bluetooth, and Wi-Fi. Snout also im-
proves accessibility of SDR-based software for wireless connected
asset management and pen-testing. We plan to augment Snout with
a graphical user interface and to integrate additional IoT protocols,
including Z-Wave and LoRa. Finally, we plan to expand Snout’s
transmission capabilities, including active scanning and fuzzing, to
other IoT protocols beside Zigbee. An initial preview release of the
Snout CLI will soon be available on its website [2].
6 ACKNOWLEDGMENTS
The authors thank Byoungsul Lee, Christina Chimienti, Mohammed
Uddin, Seung Hee Lee, and Spencer Liu for their 2018-2019 Senior
Design Team project “IoT Nmap” at Boston University, which served
as an early prototype of Snout. This research was supported in part
by NSF grant CNS-1409053.
REFERENCES
[1] Bastille Research. 2016. scapy-radio. https://github.com/BastilleResearch/scapy-
radio
[2] Johannes K Becker and John Mikulskis. 2019. Snout.tools. https://snout.tools/
[3] Bastian Bloessl, Christoph Leitner, Falko Dressler, and Christoph Sommer. 2013.
A GNU Radio-based IEEE 802.15.4 Testbed. In 12. GI/ITG KuVS Fachgespräch
Drahtlose Sensornetze (FGSN 2013). Cottbus, Germany, 37–40.
[4] Bastian Bloessl, Michele Segata, Christoph Sommer, and Falko Dressler. 2017. IoT
Goes Nuclear: Creating a ZigBee Chain Reaction. IEEE Symposium on Security
and Privacy (SP) (May 2017), 195–212. https://doi.org/10.1109/SP.2017.14
[5] Bastian Bloessl, Michele Segata, Christoph Sommer, and Falko Dressler. 2018.
Performance Assessment of IEEE 802.11p with an Open Source SDR-based Pro-
totype.
IEEE Transactions on Mobile Computing 17, 5 (May 2018), 1162–1175.
https://doi.org/10.1109/TMC.2017.2751474
[6] Eric Blossom. 2004. GNU Radio: Tools for Exploring the Radio Frequency Spec-
trum. Linux J. 2004, 122 (June 2004), 4–. http://dl.acm.org/citation.cfm?id=
993247.993251
[7] Martin Braun and Seth Hitefield. 2019. PyBOMBS. https://github.com/gnuradio/
pybombs/
[8] Bishop Fox. 2019. ZigDiggity. https://github.com/BishopFox/zigdiggity
[9] Ira Ray Jenkins, Rebecca Shapiro, Sergey Bratus, Ryan Speers, and Travis Good-
speed. 2014. Fingerprinting IEEE 802.15.4 Devices with Commodity Radios. Tech-
nical Report TR2014-746. Dartmouth College, Computer Science, Hanover, NH.
http://www.cs.dartmouth.edu/reports/TR2014-746-rev2.pdf
[10] Xianjun Jiao. 2019. BTLE. https://github.com/JiaoXianjun/BTLE
[11] Kaushik Lakshminarayanan, Samir Sapra, Srinivasan Seshan, and Peter Steenkiste.
2009. RFDump: an architecture for monitoring the wireless ether. In Proceed-
ings of the 5th international conference on Emerging networking experiments and
technologies. ACM, 253–264.
[12] Gordon Lyon. 2019. Nmap: the Network Mapper. https://nmap.org/
[13] Jeremy Martin, Douglas Alpuche, Kristina Bodeman, Lamont Brown, Ellis Fenske,
Lucas Foppe, Travis Mayberry, Erik C. Rye, Brandon Sipes, and Sam Teplov. 2019.
Handoff All Your Privacy: A Review of Apple’s Bluetooth Low Energy Continuity
Protocol.
[14] Philipp Morgner, Stephan Mattejat, Zinaida Benenson, Christian MÃĳller, and
Frederik Armknecht. 2017. Insecure to the touch. Proceedings of the 10th ACM
Conference on Security and Privacy in Wireless and Mobile Networks - WiSec 17
(Jul 2017). https://doi.org/10.1145/3098243.3098254
[15] Ruth Ogunnaike. 2017. SeeSec - IoT Vulnerablity Scanner . https://github.com/
ruthogunnnaike/SeeSec---IoT-Vulnerablity-Scanner
[16] Johannes Pohl and Andreas Noack. 2018. Universal Radio Hacker: A Suite for
Analyzing and Attacking Stateful Wireless Protocols. In 12th USENIX Workshop
on Offensive Technologies (WOOT 18). USENIX Association, Baltimore, MD. https:
//www.usenix.org/conference/woot18/presentation/pohl
[17] RadioInspector. 2019. New Generation of Professional TSCM software. https:
//www.radioinspector.com/
[18] RFtap: rftap.protocol@gmail.com. 2016. RFtap. https://rftap.github.io
[19] SecDev. 2006. scapy. https://github.com/secdev/scapy
[20] River Loop Security. 2018. TumbleRF. https://github.com/riverloopsec/tumblerf
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2531