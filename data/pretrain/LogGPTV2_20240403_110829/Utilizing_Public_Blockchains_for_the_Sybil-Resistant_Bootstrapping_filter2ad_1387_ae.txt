cess only a few recent full blocks to derive their state by searching
for AnonBoot-related OP_RETURN transactions. The required num-
ber of blocks to process depends on the pulse length Lp, the validity
period of single peer advertisements, and the maximum lifespan
of bootstrapped anonymity networks. Even if bootstrapped ser-
vices remain active indefinitely (cf. Section 5.2), new users can still
start synchronizing from only recent blocks and afterward discover
older services from the remaining blocks in the background. After
this initial synchronization, participants actively monitor the host
blockchain for new AnonBoot messages. This overhead is negligible
for Bitcoin as new blocks are only mined every ten minutes [48].
This potentially slow block creation interval, however, intro-
duces unavoidable delays for the bootstrapping of new anonymity
services as services are only created once a pulse’s spawn block has
been mined (cf. Figure 5). For instance, a pulse length of Lp = 12
blocks and a negotiation phase of LN = 3 blocks on top of Bitcoin
means that privacy peers have at most 30 min to solve their PoW
puzzle, but in the worst case users have to wait up to 2 h until their
requested anonymity service starts bootstrapping. Regardless, our
relevant use cases of shuffling networks and cryptotumblers are
suffices to bootstrap a service. The scalability then only depends
on the upper-layer protocol used and is independent of AnonBoot.
Finally, we briefly consider the costs inflicted by fees when pri-
vacy peers and users publish their OP_RETURN transactions to lever-
age Bitcoin’s consensus properties. Albeit fluctuating, the current
(March 8, 2020) recommended fee is 6 satoshi per byte (1 satoshi
=10−8 BTC) [17], and Bitcoin’s market price is around 9067 USD [9].
Hence, a peer advertisement currently costs an operator 0.17 USD,
which AnonBoot can amortize through larger pulse lengths while
keeping the negotiation phase, e.g., of multiple days.
Takeaway. Overall, our analysis shows that AnonBoot can boot-
strap over 100 services from a peer repository of size 1000, serving
potentially thousands of users, and can scale well beyond this size
with only a small impact on Bitcoin as its host blockchain.
8 RELATED WORK
The bootstrapping problem and Sybil attacks are inherent for dis-
tributed protocols. In 2007, Knoll et al. [21] surveyed different ap-
proaches to finding entry points for established peer-to-peer net-
works. Among other approaches, the authors proposed to bootstrap
nodes through a distributed host system such as IRC [21]. Orthog-
onally, Levine et al. [25] reviewed approaches to mitigate Sybil
attacks. From this taxonomy, only resource testing and recurring
costs and fees are applicable to fully decentralized systems without
further assumptions. Recurring costs, namely periodic PoW-based
refreshments of eligibility, are a familiar building block in the field
of blockchain sharding [22, 27, 53], where responsibilities to verify
the proposed transactions are distributed among full nodes over
time to improve scalability. AnonBoot adapts this Sybil-resistant
building block in the form of peer advertisements to implement
the novel application that is securely bootstrapping distributed
anonymity services. In line with Knoll et al. [21], we publish these
periodic advertisements through a public blockchain as AnonBoot’s
host system and trust anchor. This choice allows us to massively
reduce the coordination complexity in AnonBoot since blockchains
already offer a distributed means to reach a consensus of state.
Recently, Lee et al. [24] proposed that the user’s ISP could pro-
vide privacy services, such as address hiding or VPN tunneling.
This work is orthogonal to our approach as we bootstrap services
without relying on a dedicated central operator. Namely, AnonBoot
can also help users to increase their privacy against the ISP itself.
As one of its applications, AnonBoot realizes a decentralized
directory service for anonymity networks such as Tor. Similar con-
tributions were made by other works, e.g., NISAN [36] or Shad-
owWalker [33]. However, while both proposals prevent adversarial
bias, they do not feature AnonBoot’s protection against Sybil at-
tacks. Furthermore, these approaches do not address the challenges
of heterogeneous privacy peers, such as Tor nodes with differ-
ent exit policies. AnonBoot introduces the capabilities in its peer
advertisements specifically to overcome this shortcoming. While
approaches to realize sticky data policies on how to handle user pri-
vacy [37] are related to our specification of peer capabilities, even
highly compressed policies such as provided by CPPL [19] may
exceed our space limitations, especially when relying on Bitcoin’s
OP_RETURN transactions to operate AnonBoot. Although CPPL may
facilitate simple peer capabilities, more complex instances, such as
Tor relay descriptors, require manual capability abstractions.
Figure 8: AnonBoot scales to thousands of messages per
pulse with only small impact on Bitcoin as its exemplary
host blockchain even for constrained per-block capacities.
latency-tolerant and sometimes even deliberately stretch their oper-
ation over time to further increase the level of achieved privacy [55].
If more timely service utilization is required, users can consider
services valid for longer periods, thereby reducing the impact of
the inflicted one-time overhead. In this case, users have to trade
off delays against security as longer validity periods devalue the
protection offered by periodic PoW puzzles.
Contrarily, local peer selection only depends on individual user
decisions and thus only relies on knowing a recent valid state of the
peer repository, i.e., full synchronization up to the most recent pulse
is desirable but not required. Namely, users can instantly sample
privacy peers based on their current state, and thus AnonBoot
preserves the low-latency requirement of anonymity networks.
Takeaway. We conclude that AnonBoot (a) has low synchroniza-
tion overhead, (b) introduces feasible latencies for bootstrapping
anonymity services, and (c) supports instant local peer selection.
7.2 Small Blockchain Footprint and Low Costs
We now show that AnonBoot realizes lightweight service discov-
ery (G2) by assessing its impact on the host blockchain. We measure
the blockchain footprint of AnonBoot using Bitcoin’s regression
test mode. As we discussed in Section 4.2, the per-block capac-
ity c helps to trade off how much transaction bandwidth AnonBoot
consumes and the duration LN of the negotiation phase.
In Figure 8, we illustrate how the minimal required LN grows
depending on the number of used AnonBoot messages and the ca-
pacity c. On average, an OP_RETURN transaction for one peer adver-
tisement or user request has a size of 307 B and a weight of 901 WU
(weight units). Since the introduction of Segregated Witnesses, the
notation of block weight (limit 4 million WU) superseded the old
measure of the block size (limit 1 MB) [8]. For our measurements,
we fill Bitcoin blocks while respecting the allowed capacity c. Our
results reveal that AnonBoot easily scales to large peer repositories
and user bases with only a small footprint on Bitcoin. When using a
per-block capacity of only 10 %, AnonBoot can support up to 10 000
messages during a negotiation phase with LN = 23.
Peer repositories of size 1000, which are already sufficiently
secure as we demonstrated in Section 6.2, have an only negligible
impact on Bitcoin: For a small capacity of only 5 % to account for
Bitcoin’s low overall transaction throughput the negotiation phase
still concludes after LN = 5 blocks with space for up to 109 user
requests. We expect only a few user requests as a single request
01k2k3k4k5k6k7k8k9k10kMessages per Pulse [#]05101520253035404550Blocks Required [#]Blockchain Footprint of AnonBootPer-Block Capacity5%10%25%50%100%9 CONCLUSION
We introduced AnonBoot, a blockchain-based medium to securely
bootstrap distributed anonymity services via already established
public blockchains, such as Bitcoin, as a trust anchor. All AnonBoot
peers communicate with each other through on-chain transactions,
and, thereby, they are able to derive the same local view on Anon-
Boot’s state by simply monitoring the host blockchain. Our design
allows for discovering peers to create Tor circuits as well as to boot-
strap shuffling networks and distributed cryptocurrency tumblers
on demand. AnonBoot achieves its resilience against adversaries
by two core mechanics: First, Sybil attacks are thwarted by forc-
ing peers to periodically refresh their membership in a repository
of peers who are eligible to provide anonymity services while in-
cluding a memory-bound, and thus fair, proof of work. Second, an
adversary who joins this peer repository cannot bias the peer elec-
tion for new anonymity services since this peer election is based
on user inputs as well as future blocks from the host blockchain.
The evaluation of our Bitcoin-based prototypic implementation
of AnonBoot shows that public blockchains constitute a well-suited
foundation for bootstrapping distributed systems: AnonBoot can
easily maintain a peer repository consisting of 1000 peers on top of
Bitcoin, managing services for potentially thousands of users. These
results show that AnonBoot can operate on top of most blockchains,
even if they have limited capabilities to store application-level data.
In the future, AnonBoot’s utility can be further increased by
identifying novel use cases apart from anonymity services. Anon-
Boot lends itself to bootstrapping any distributed service, e.g., to
distribute trust in other domains via secure multiparty computation.
ACKNOWLEDGMENTS
This work has been funded by the German Federal Ministry of
Education and Research (BMBF) under funding reference numbers
16DHLQ013 and Z31 BMBF Digital Campus. The funding under
reference number Z31 BMBF Digital Campus has been provided
by the German Academic Exchange Service (DAAD). The responsi-
bility for the content of this publication lies with the authors. The
authors thank Jöran Wiechert for his support with the prototype.
REFERENCES
[1] Giuseppe Ateniese et al. 2017. Redactable Blockchain âĂŞ or âĂŞ Rewriting
History in Bitcoin and Friends. In Proc. IEEE EuroS&P.
cessed: 03/10/2020.
[2] Badbitcoin.org. 2014. The Definitive Bitcoin and Cryptocurrency Fraud List. Ac-
An analysis of Bitcoin
[3] Massimo Bartoletti and Livio Pompianu. 2017.
[4] Michael Ben-Or et al. 1988. Completeness Theorems for Non-cryptographic
OP_RETURN metadata. In Proc. IFCA FC Bitcoin Workshop.
Fault-tolerant Distributed Computation. In Proc. ACM STOC.
Work Based on the Generalized Birthday Problem. Ledger 2.
[5] Alex Biryukov and Dmitry Khovratovich. 2017. Equihash: Asymmetric Proof-of-
[6] Bitcoin Wiki. 2010. Script. bitcoin.it, accessed 03/10/2020.
[7] Bitcoin Wiki. 2015. Mining Hardware Comparison. bitcoin.it, accessed: 03/10/2020.
[8] Bitcoin Wiki. 2017. Segregated Witness. bitcoin.it, accessed: 03/10/2020.
[9] Blockchain.com. 2011. BTC to USD: Bitcoin to US Dollar Market Price. blockchain.
[10] Joseph Bonneau et al. 2015. On Bitcoin as a public randomness source. IACR
[11] Joseph Bonneau et al. 2014. Mixcoin: Anonymity for Bitcoin with Accountable
com/charts/market-price, accessed 03/10/2020.
[12] Sambuddho Chakravarty et al. 2011. Detecting Traffic Snooping in Tor Using
Cryptology ePrint Archive 2015.
Mixes. In Proc. IFCA FC.
Decoys. In Proc. RAID.
Pseudonyms. Comm. ACM 24, 2.
Protocol. In Proc. IEEE S&P.
03/10/2020.
torproject/torspec, accessed: 03/10/2020.
[15] Roger Dingledine and Nick Mathewson. 2006. Tor Path Specification. github.com/
[16] Roger Dingledine et al. 2004. Tor: The Second-Generation Onion Router.
[17] Earn.com. 2013. Bitcoin Fees for Transactions. bitcoinfees.earn.com, accessed:
[18] Matthew Green and Ian Miers. 2017. Bolt: Anonymous Payment Channels for
[22] Eleftherios Kokoris-Kogias et al. 2018. OmniLedger: A Secure, Scale-Out, Decen-
[23] Susan Landau. 2013. Making Sense from Snowden: What’s Significant in the
[19] Martin Henze et al. 2016. CPPL: Compact Privacy Policy Language. In Proc. ACM
[20] Martin Henze et al. 2014. A Trust Point-based Security Architecture for Sensor
[21] Mirko Knoll et al. 2007. Decentralized Bootstrapping in Pervasive Applications.
Decentralized Currencies. In Proc. ACM CCS.
WPES.
Data in the Cloud. Springer.
In Proc. IEEE PerComW.
tralized Ledger via Sharding. In Proc. IEEE S&P.
NSA Surveillance Revelations. IEEE Security & Privacy 11, 4.
SIGCOMM Computer Communication Review 48, 5.
Report. University of Massachusetts Amherst.
[24] Taeho Lee et al. 2018. Bootstrapping Privacy Services in Today’s Internet. ACM
[25] Brian Neil Levine et al. 2006. A Survey of Solutions to the Sybil Attack. Technical
[26] Isis Lovecruft et al. 2017. Tor Guard Specification. github.com/torproject/torspec,
[27] Loi Luu et al. 2016. A Secure Sharding Protocol For Open Blockchains. In Proc.
[28] Roman Matzutt et al. 2018. A Quantitative Analysis of the Impact of Arbitrary
accessed: 03/10/2020.
ACM CCS.
Blockchain Content on Bitcoin. In Proc. IFCA FC.
IFIP Networking.
bitcointalk.org, accessed: 03/10/2020.
[29] Roman Matzutt et al. 2020. How to Securely Prune Bitcoin’s Blockchain. In Proc.
[30] G. Maxwell. 2013. CoinJoin. https://bitcointalk.org/index.php?topic=279249.
[31] Sarah Meiklejohn and Rebekah Mercer. 2018. MÃűbius: Trustless Tumbling for
[32] Sarah Meiklejohn et al. 2013. A Fistful of Bitcoins: Characterizing Payments
Transaction Privacy. PoPETs.
Among Men with No Names. In Proc. ACM IMC.
Communication Using Redundant Structured Topologies. In Proc. ACM CCS.
[33] Prateek Mittal and Nikita Borisov. 2009. ShadowWalker: Peer-to-Peer Anonymous
[34] Satoshi Nakamoto. 2008. Bitcoin: A Peer-to-Peer Electronic Cash System.
[35] Micha Ober et al. 2013. Structure and Anonymity of the Bitcoin Transaction
[37] Siani Pearson and Marco Casassa Mont. 2011. Sticky Policies: An Approach for
[36] Andriy Panchenko et al. 2009. NISAN: Network Information Service for Anony-
Graph. Future Internet 5, 2.
mization Networks. In Proc. ACM CCS.
Managing Privacy across Multiple Parties. Computer 44, 9, 60–68.
System.
Bitcoin. In Proc. ESORICS.
Upgrade. cryptobriefing.com, accessed: 03/10/2020.
[38] Fergal Reid and Martin Harrigan. 2013. An Analysis of Anonymity in the Bitcoin
[39] Tim Ruffing et al. 2014. CoinShuffle: Practical Decentralized Coin Mixing for
[40] Andrey Shevchenko. 2019. Monero Penalizes GPU and ASIC Mining with RandomX
[41] tevador. 2018. RandomX. github.com/tevador/RandomX, accessed: 03/10/2020.
[42] The Ethereum Foundation. 2015. Ethash. github.com/ethereum/wiki, accessed:
[43] The Tor Project. 2007. Tor Directory Protocol, Version 3. github.com/torproject/
[44] The Tor Project. 2009. Tor Metrics – Relay Search (flag: Authority). metrics.
[45] The Tor Project. 2014. Reporting Bad Relays.
trac.torproject.org, accessed:
[46] The Tor Project. 2019. Tor Protocol Specification. github.com/torproject/torspec,
[47] John Tromp. 2015. Cuckoo Cycle: A Memory Bound Graph-Theoretic Proof-of-
torproject.org, accessed: 03/10/2020.
torspec, accessed: 03/10/2020.
accessed: 03/10/2020.
Work. In Proc. IFCA FC.
[48] Florian Tschorsch and Björn Scheuermann. 2016. Bitcoin and Beyond: A Technical
Survey on Decentralized Digital Currencies. IEEE Commun. Surveys Tuts. 18, 3.
[49] Marie Vasek and Tyler Moore. 2015. There’s No Free Lunch, Even Using Bitcoin:
Tracking the Popularity and Profits of Virtual Currency Scams. In Proc. IFCA FC.
[50] Philipp Winter et al. 2014. Spoiled Onions: Exposing Malicious Tor Exit Relays.
PoPETs.
Ledger.
[51] Gavin Wood. 2014. Ethereum: A Secure Decentralised Generalised Transaction
[52] Addy Yeow. 2013. 730-day Charts. bitnodes.earn.com, accessed: 03/10/2020.
[53] Mahdi Zamani et al. 2018. RapidChain: Scaling Blockchain via Full Sharding. In
03/10/2020.
03/10/2020.
[13] David Chaum. 1981. Untraceable Electronic Mail, Return Addresses, and Digital
[54] Jan Henrik Ziegeldorf et al. 2015. CoinParty: Secure Multi-Party Mixing of
[14] George Danezis et al. 2003. Mixminion: Design of a Type III Anonymous Remailer
[55] Jan Henrik Ziegeldorf et al. 2018. Secure and Anonymous Decentralized Bitcoin
Proc. ACM CCS.
Bitcoins. In Proc. ACM CODASPY.
Mixing. Future Gener. Comput. Syst. 80.