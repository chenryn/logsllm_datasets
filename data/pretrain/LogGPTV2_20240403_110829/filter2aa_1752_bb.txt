。
sigaddset() 将 signo  set 给的集 sigdelset() 将 signo  set 给
的集。时 0时 -1 errno
设 EINVAL signo 效的。
 signo  set 的集 sigismember()  1
0时 -1。 errno 设 EINVA signo 效。
9.5.1 更多的信号集函数
上的 POSIX 的以何的 Unix 
。 Linux 提的
#define _GNU_SOURCE
#define 
int sigisemptyset (sigset_t *set);
– 316 –
 9 
int sigorset (sigset_t *dest, sigset_t *left,
sigset_t *right);
int sigandset (sigset_t *dest, sigset_t *left,
sigset_t *right);
 set 给的集空的 sigisemptyset()  1 0。
sigorset() 将集 left  right 的（进或给 dest。 sigandset() 将
集 left  right 的（进给 dest。时 0时
-1将 errno 设 EINVAL。
的 POSIX 的程
们。
9.6 阻塞信号
我们处理程异步的。我们
能处理程内调的们的。
的程处理程程时
程的间（自处理程
的时我们我们时
们。我们。何的处理
们。进程以进程的进程
的。 POSIX  Linux 实理进程的
#include 
int sigprocmask (int how,
const sigset_t *set,
sigset_t *oldset);
sigprocmask() 的 how 的以
SIG SETMASK 调进程的 set。
SIG BLOCK
set 的调进程的。
 set 的集（进或。
SIG UNBLOCK set 的调进程的。
 set 集（进的集（进
– 317 –
 9 
。将的的。
 oldset 空的将 oldset 设的集。
 set 空的 how然设
oldset 的。给 set 空的方
。
调 0。时 -1 errno 设 EINVAL示 how 
效的或设 EFAULT示 set 或 oldset 效。
 SIGKILL 或 SIGSTOP 的。 sigprocmask() 的何将
的。
9.6.1 获取待处理信号
内的时。我们处理
。处理时内给进程处理。
POSIX 处理集的
#include 
int sigpending (sigset_t *set);
的调 sigpending() 将 set 设处理的集 0。
时调 -1将 errno 设 EFAULT set 效。
9.6.2 等待信号集
 POSIX 的进程时的
出进程或进程处理的
#include 
int sigsuspend (const sigset_t *set);
进程 sigsuspend() 。处
理 sigsuspend() 处理程 -1 将 errno 设 EINTR。
 set 效 errno 设 EFAULT。
程间的时
sigsuspend()。进程 sigprocmask() 集将的
存 oldset 。出进程调 sigsuspend()将 oldset 给 set。
– 318 –
 9 
9.7 高级信号管理
我们的 signal() 的。 C 的
对的操作能小的设提
的理的。作 POSIX  sigaction() 调
提更的理能。处理程时以
的以时操作
进程的
#include 
int sigaction (int signo,
const struct sigaction *act,
struct sigaction *oldact);
调  sigaction()     signo  示 的   的   signo  以   
SIGKILL  SIGSTOP 的何。 act 空的调将
的 act 的。 oldact 空的调存
（或的 act 空的给的。
sigaction 的。文件    以
式
struct sigaction {
void (*sa_handler)(int);
/* 处理程或操作 */
void (*sa_sigaction)(int, siginfo_t *, void *);
sigset_t sa_mask;
/* 的 */
int sa_flags;
/*  */
void (*sa_restorer)(void); /* 时
 POSIX  */
}
sa handler 时的操作。对 signal() 能
SIG DFL示操作能 SIG IGN示内或
处理的。 signal() 的处理程相同的原
– 319 –
 9 
void my_handler (int signo);
 sa flags  SA SIGINFO将 sa sigaction  sa handle 
示处理。的原同
void my_handler (int signo, siginfo_t *si, void
*ucontext);
作的 siginfo t 作
ucontext t （ void 作。。 siginfo t
给处理程提的我们。
（能的 Unix  sa handler 
sa sigaction 能给同时。
sa mask 提处理程时的集。程
处理程间的提的。处理的
的将 sa flags 设 SA NODEFER 。以 SIGKILL 或
SIGSTIO调 sa mask 的们。
sa flag 零或更 signo 示的的。我们
 SA SIGINFO  SA NODEFER  sa flags 的以
SA NOCLDSTOP  signo  SIGCHLD示子进程或
时提。
SA NOCLDWAIT  signo  SIGCHLD以自子进程子进程
时进程进程（能
子进程调 wait()。对子进程进程 wait() 的
。
SA NOMASK
时 POSIX  SA NODEFER
（。 SA NODEFER 
的能。
SA ONESHOT
时 POSIX  SA NODEFER
（文。 SA NODEFER 
的能。
SA ONSTACK
示的调给的处理
程 sigaltstack() 提的。提
– 320 –
 9 
的的的
提。的的然们
小程的 pthreads 程的程
处理程时能出。我们
进步 sigaltstack()。
SA RESTART
以的调以 BSD 新。
SA RESETHAND 示性式。处理程给
设操作。
sa restorer 时的 Linux 。 POSIX 的
。存。
时 sigaction()  0。时调 -1将 errno 设以
EFAULT act 或 oldact 效。
EINVAL signo 效的 SIGKILL 或 SIGSTOP。
9.7.1 siginfo t 结构
siginfo t   的
typedef struct siginfo_t {
int si_signo;
/*  */
int si_errno;
/* errno  */
int si_code;
/*  */
pid_t si_pid;
/* 进程的PID */
uid_t si_uid;
/* 进程的真实UID */
int si_status;
/* 出或 */
clock_t si_utime;
/* 时间 */
clock_t si_stime;
/* 时间 */
sigval_t si_value; /*  */
int si_int;
/* POSIX.1b  */
void *si_ptr;
/* POSIX.1b  */
void *si_addr;
/* 的内存 */
int si_band;
/* 件 */
– 321 –
 9 
int si_fd;
/* 文件 */
};
给处理程的（ sa sigaction 
 sa sighandler。 Unix 
的实 IPC（进程间的方。能们
sigaction()  SA SIGINFO 时然 signal()。 siginfo t 我
们方上的能。
的进程的以及
的原。以对的
si signo 的。的处理程提（
的。
si errno 零示的。对的
效。
si code
进程以及（自 kill()出。我们
能的。对的效。
si pid
对 SIGCHLD示进程的 PID。
si uid
对 SIGCHLD示进程自的 UID。
si status 对 SIGCHLD示进程的出。
si utime 对 SIGCHLD示进程的时间。
si stime 对 SIGCHLD示进程的时间。
si value si int  si ptr 的。
si int
对 sigqueue() 的（的的
以作。
si ptr
对 sigqueue() 的（的的
以 void 作。
si addr
对 SIGBUS SIGFPE SIGILL SIGSEGV  SIGTRAP void 
的。对 SIGSEGV内
存的（ NULL。
si band
对 SIGPOLL示 si fd 出的文件的。
si fd
对 SIGPOLL示操作的文件的。
– 322 –
 9 
si value si int  si ptr 相对的进程以们给
进程何。以们或
的（进程空间的。
的的。
POSIX 对效的。的处理相
的时。 SIGPOLL 时 si fd 。
9.7.2 si code 的精彩世界
si code 的原。对的
何的。对内的的原。
以的 si code 对何效的。们何 / 
。
SI ASYNCIO 异步 I/O （。
SI KERNEL
内。
SI MESGQ
 POSIX 的（的
内。
SI QUEUE
 sigqueue() （。
SI TIMER
 POSIX 时超时（。
SI TKILL
 tkill() 或 tgkill() 。调程的
的内。
SI SIGIO
 SIGIO 。
SI USER
 kill() 或 raise() 。
以的 si code 对 SIGBUS 效。们件的
BUS ADRALN 进程对（间对对的。
BUS ADRERR 进程效的理。
BUS OBJERR
进程的件。
对 SIGCHLD以的示子进程给进程时的
CLD CONTINUED 子进程。
CLD DUMPED
子进程。
CLD EXITED
子进程 exit() 。
– 323 –
 9 
CLD KILLED
子进程。
CLD STOPPED
子进程。
CLD TRAPPED
子进程进。
以的对 SIGFPE 效。们的
FPE FLTDIV
进程以 0 的。
FPE FLTOVF 进程出的。
FPE FLTINV
进程效的。
FPE FLTRES
进程或效的。
FPE FLTSUB 进程超出的。
FPE FLTUND 进程的。
FPE INTDIV
进程以 0 的。
FPE INTOVF 进程出的。
FPE FLTDIV
进程以 0 的。
FPE FLTOVF 进程出的。
FPE FLTINV
进程效的。
FPE FLTRES
进程或效的。
FPE FLTSUB 进程超出的。
FPE FLTUND 进程的。
FPE INTDIV
进程以 0 的。
FPE INTOVF 进程出的。
以 si code 对 SIGILL 效。们的性
ILL ILLADR 进程进的式。
ILL ILLOPC
进程的操作。
ILL ILLOPN 进程的操作。
ILL PRVOPC 进程操作。
ILL PRVREG 进程存上。
ILL ILLTRP
进程进的。
对的 si addr 操作的。
对 SIGPOLL以的的 I/O 件
– 324 –
 9 
POLL ERR  I/O 。
POLL HUP 设备或。
POLL IN
文件读。
POLL MSG 。
POLL OUT 文件能写。
POLL PRI
文件读的。
以的对 SIGSEGV 效存的
SEGV ACCERR 进程以效的方式效的内存进程
内存的。
SEGV MAPERR 进程效的内存。
对 si addr 操作的。
对 SIGTRAP si code 进的
TRAP BRKPT 进程进。
TRAP TRACE 进程进。
 si code 。
9.8 发送带附加信息的信号
我们的以 SA SIGINFO 的处理程
 siginfo t 。 si value 的以
。
 POSIX 的 sigqueue() 进程的
#include 
int sigqueue (pid_t pid,
int signo,
const union sigval value);
sigqueue()  kill() 的方式。时 signo 示的
 pid 的进程或进程的 0。的给
的 void 的
– 325 –
 9 
union sigval {
int sival_int;
void *sival_ptr;
};
时调 -1将 errno 设以
EINVAL  signo 的效。
EPERM 调进程的给何的进程。的
 kill() 的（的。
ESRCH
 pid 的进程或进程存或进程进程。
9.8.1 例子
子给 pid  1722 的进程的 SIGUSR2 
 404
sigval value;
int ret;
value.sival_int = 404;
ret = sigqueue (1722, SIGUSR2, value);
if (ret)
perror (”sigqueue”);
 1722 进程 SA SIGINFO 处理程处理 SIGUSR2 signo 
设 SIGUSR2 si->si int 设 404 si->si code 设 SI QUEUE。
9.9 结论
 Unix 程的。们时的内间
的能原的进程间。程程
件的。
然我们们。内（
进程的操作的方式。 Unix（Linux 
进程理 / 子进程的方式。我们们。
的理写出的的处理程
– 326 –
 9 
。能的处理程 9-2 出的（以
们的。
       的     程    然   signal()  kill() 
  sigaction()  sigqueue()   理  。     小    的  
SA SIGINFO 的处理程时的性。
我喜（我文件的的
实上 Linux 内的们的
Linux 的实以的（。
– 327 –
 10 
时间
第 10 章
时间
时间操作程。内
时间
墙上时间（或真实时间)
真实世的实时间墙上的时间。进程
以及件时间时墙上时间。
进程时间
即进程的时间空间的时间内进程
上的时间。进程对程进时 (
操作时)。 Linux 的进程时墙上时间
操作的进程时间能墙上时间。进程相
时周 I/O（。
单调时间
时间性的。 Linux 内的操作
的时间（的时间。墙上时间能 (
以进设或调校时间), 
性。时间方的
的时间示方。单调时间的性以时间
性性时间的。
单调时间相对时间墙上时间对绝对时间更理
。
时间方以以式
相对时间
相对时间（时的子 5