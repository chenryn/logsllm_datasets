### 信号集操作函数

- `sigaddset()` 将指定的信号 `signo` 添加到信号集 `set` 中。
- `sigdelset()` 从信号集 `set` 中删除指定的信号 `signo`。如果 `signo` 无效，这两个函数将返回 -1 并设置 `errno` 为 `EINVAL`。

`sigismember()` 检查信号 `signo` 是否在信号集 `set` 中。如果存在，则返回 1；如果不存在，则返回 0；如果 `signo` 无效，则返回 -1 并设置 `errno` 为 `EINVAL`。

#### 更多的信号集函数

以下是一些额外的 POSIX 和 Unix 系统提供的信号集操作函数：

```c
#define _GNU_SOURCE
#include <signal.h>

int sigisemptyset(sigset_t *set);
int sigorset(sigset_t *dest, const sigset_t *left, const sigset_t *right);
int sigandset(sigset_t *dest, const sigset_t *left, const sigset_t *right);
```

- `sigisemptyset()` 检查信号集 `set` 是否为空。如果是空集，则返回 1；否则返回 0。
- `sigorset()` 计算两个信号集 `left` 和 `right` 的并集，并将结果存储在 `dest` 中。
- `sigandset()` 计算两个信号集 `left` 和 `right` 的交集，并将结果存储在 `dest` 中。

如果这些函数执行失败，它们将返回 -1 并设置 `errno` 为 `EINVAL`。

### 阻塞信号

处理异步信号时，我们可能需要在进程内部临时阻塞某些信号。POSIX 和 Linux 提供了 `sigprocmask()` 函数来实现这一点：

```c
#include <signal.h>

int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
```

- `how` 参数可以是 `SIG_SETMASK`、`SIG_BLOCK` 或 `SIG_UNBLOCK`。
  - `SIG_SETMASK`：将进程的信号掩码设置为 `set`。
  - `SIG_BLOCK`：将 `set` 中的信号添加到当前的信号掩码中。
  - `SIG_UNBLOCK`：从当前的信号掩码中移除 `set` 中的信号。

如果 `oldset` 不为空，它将被设置为之前的信号掩码。如果 `set` 为空且 `how` 为 `SIG_SETMASK`，则 `oldset` 将被设置为当前的信号掩码。如果 `set` 为空且 `how` 为 `SIG_BLOCK` 或 `SIG_UNBLOCK`，则 `oldset` 将被设置为当前的信号掩码。

如果 `sigprocmask()` 执行成功，返回 0；否则返回 -1 并设置 `errno` 为 `EINVAL`（表示 `how` 无效）或 `EFAULT`（表示 `set` 或 `oldset` 无效）。需要注意的是，`SIGKILL` 和 `SIGSTOP` 不能被阻塞。

### 获取待处理信号

为了获取当前进程中待处理的信号，可以使用 `sigpending()` 函数：

```c
#include <signal.h>

int sigpending(sigset_t *set);
```

该函数将待处理的信号集存储在 `set` 中。如果执行成功，返回 0；否则返回 -1 并设置 `errno` 为 `EFAULT`（表示 `set` 无效）。

### 等待信号集

POSIX 提供了 `sigsuspend()` 函数，使进程暂停执行，直到接收到一个信号：

```c
#include <signal.h>

int sigsuspend(const sigset_t *set);
```

该函数会替换进程的信号掩码为 `set`，然后挂起进程，直到接收到一个信号。如果接收到信号并且信号处理函数返回，`sigsuspend()` 将返回 -1 并设置 `errno` 为 `EINTR`。如果 `set` 无效，则返回 -1 并设置 `errno` 为 `EFAULT`。

### 高级信号管理

C 标准库中的 `signal()` 函数提供了基本的信号处理功能，但其功能有限。POSIX 提供了更强大的 `sigaction()` 函数来管理信号处理：

```c
#include <signal.h>

int sigaction(int signo, const struct sigaction *act, struct sigaction *oldact);
```

- `signo` 是要处理的信号编号。
- `act` 是新的信号处理动作结构体。
- `oldact` 如果不为空，将保存旧的信号处理动作。

`sigaction` 结构体定义如下：

```c
struct sigaction {
    void (*sa_handler)(int);          // 信号处理函数
    void (*sa_sigaction)(int, siginfo_t *, void *); // 带附加信息的信号处理函数
    sigset_t sa_mask;                 // 在信号处理期间阻塞的信号集
    int sa_flags;                     // 信号处理标志
    void (*sa_restorer)(void);        // 保留字段
};
```

- `sa_handler` 是传统的信号处理函数。
- `sa_sigaction` 是带附加信息的信号处理函数。
- `sa_mask` 是在信号处理期间阻塞的信号集。
- `sa_flags` 包含信号处理的标志，例如 `SA_SIGINFO` 表示使用 `sa_sigaction` 处理函数。

如果 `sigaction()` 执行成功，返回 0；否则返回 -1 并设置 `errno` 为 `EFAULT`（表示 `act` 或 `oldact` 无效）或 `EINVAL`（表示 `signo` 无效或 `SIGKILL` 和 `SIGSTOP` 无法被捕获）。

### `siginfo_t` 结构

`siginfo_t` 结构体提供了关于信号的详细信息：

```c
typedef struct siginfo_t {
    int si_signo;         // 信号编号
    int si_errno;         // 错误号
    int si_code;          // 信号产生的原因
    pid_t si_pid;         // 发送信号的进程 ID
    uid_t si_uid;         // 发送信号的进程的真实用户 ID
    int si_status;        // 子进程退出状态
    clock_t si_utime;     // 用户时间
    clock_t si_stime;     // 系统时间
    union sigval si_value; // 附加值
    int si_int;           // 整数值
    void *si_ptr;         // 指针值
    void *si_addr;        // 内存地址
    int si_band;          // 文件描述符上的事件
    int si_fd;            // 文件描述符
} siginfo_t;
```

- `si_signo`：信号编号。
- `si_errno`：错误号（通常为 0）。
- `si_code`：信号产生的原因。
- `si_pid`：发送信号的进程 ID。
- `si_uid`：发送信号的进程的真实用户 ID。
- `si_status`：子进程退出状态。
- `si_utime` 和 `si_stime`：用户时间和系统时间。
- `si_value`：附加值，可以是整数或指针。
- `si_addr`：内存地址。
- `si_band`：文件描述符上的事件。
- `si_fd`：文件描述符。

### 发送带附加信息的信号

POSIX 提供了 `sigqueue()` 函数来发送带有附加信息的信号：

```c
#include <signal.h>

int sigqueue(pid_t pid, int signo, const union sigval value);
```

- `pid` 是接收信号的进程 ID。
- `signo` 是信号编号。
- `value` 是附加信息，可以是整数或指针。

如果 `sigqueue()` 执行成功，返回 0；否则返回 -1 并设置 `errno` 为 `EINVAL`（表示 `signo` 无效）、`EPERM`（表示权限不足）或 `ESRCH`（表示目标进程不存在或已终止）。

### 示例

以下是一个示例，演示如何向进程 ID 为 1722 的进程发送带有附加信息的 `SIGUSR2` 信号：

```c
union sigval value;
int ret;

value.sival_int = 404;
ret = sigqueue(1722, SIGUSR2, value);

if (ret) {
    perror("sigqueue");
}
```

在这个示例中，如果进程 ID 为 1722 的进程设置了 `SA_SIGINFO` 信号处理函数，那么在处理 `SIGUSR2` 信号时，`si->si_int` 将被设置为 404，`si->si_code` 将被设置为 `SI_QUEUE`。

### 结论

Unix 和 Linux 提供了丰富的信号处理机制，包括基本的信号处理函数和高级的信号管理函数。通过合理使用这些函数，我们可以编写出更加健壮和灵活的程序。希望本文能够帮助你更好地理解和使用这些信号处理机制。