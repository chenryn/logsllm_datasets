4.
IMPORTS AND FUNCTIONS MATTER
As discussed in Section 3.3, we found that several compo-
nents related to scripting rank among the most vulnerable
components. How does a concept like scripting manifest it-
self in the components’ code?
Our central assumption in this work is that what a compo-
nent does is characterized by its imports and function calls.
A class that implements some form of content—anything
that can be in a document’s content model—will use func-
tions declared in nsIContent.h and will therefore need to
import it; a class that implements some part of the Docu-
ment Object Model (DOM) will likely use functions from—
and hence import—nsDOMError.h. And components associ-
ated with scripting are characterized by the functions from
and the import of nsIScriptGlobalObject.h.
In a strictly layered software system, a component that
is located at layer k would import only from components at
layer k +1; its imports would pinpoint the layer at which the
component resides. In more typical object-oriented systems,
components will not be organized in layers; still, its imports
will include those components whose services it uses and
those interfaces that it implements.
If an interface or component is speciﬁed in an insecure
way, or speciﬁed in a manner that is diﬃcult to use securely,
then we would expect many components that use or im-
plement that interface or component to be vulnerable. In
other words, we assume that it is a component’s domain, as
given by the services it uses and implements, that determine
whether a component is likely to be vulnerable or not.
How do imports and function calls correlate with vulner-
abilities? For this, we ﬁrst need a clear understanding of
what constitutes an import or a function call and what it
means for a set of imports or function calls to be correlated
with vulnerability.
In the following discussion, we use the term “feature” to
refer to both imports and function calls.
4.1 Imports
In C and C++, a component’s imports are those ﬁles
that it references through #include preprocessor directives.
These directives are handled by the preprocessor and come
in three ﬂavors:
#include  This variant is used to import standard
system headers.
#include "name" This variant is used to import header ﬁles
within the current project.
#include NAME In this variant, NAME is treated as a prepro-
cessor symbol. When it is ﬁnally expanded, it must
resolve to one of the two forms mentioned above.
The exact computation of imports for C and C++ is dif-
ﬁcult because the semantics of the ﬁrst two variants are
implementation-dependent, usually inﬂuenced by compile-
time switches and macro values. That means that it is not
possible to determine exactly what is imported without a
working build environment. We therefore adopted the fol-
lowing heuristics:
• We treat every occurrence of #include as an import,
even though it may not be encountered in speciﬁc
compile-time conﬁgurations—for example because of
conditional compilation. The reason is that we want
to obtain all possible import relations, not just the
ones that are speciﬁc to a particular platform.
• We assume that identically-named includes refer to
the same ﬁle, even though preprocessor directives may
cause them to refer to diﬀerent ﬁles. It turns out that
this does not happen in Mozilla.
• Implementing the computed include would require a
full preprocessor pass over the source ﬁle. This in turn
would require us to have a fully compilable (or at least
preprocessable) version of the project. Fortunately,
this use of the include directive is very rare (Mozilla
does not use it even once), so we chose to ignore it.
#ifdef XP_OS2
if (DosCreatePipe(&pipefd[0], &pipefd[1], 4096) != 0) {
#else
if (pipe(pipefd) == -1) {
#endif
fprintf(stderr, "cannot create pipe: %d\n", errno);
exit(1);
}
Figure 5: Extract from nsprpub/pr/tests/sigpipe.c,
lines 85ﬀ. Parsing C and C++ is generally only pos-
sible after preprocessing: attempting to parse these
lines without preprocessing results in a syntax error.
4.2 Function Calls
In C and C++, a function call is an expression that could
cause the control ﬂow to be transferred to a function when
it is executed.3 A function call is characterized by the name
of the function and a parenthesized list of arguments.
Statically extracting function calls from unpreprocessed
C or C++ source code is diﬃcult. Dynamic parsing with
type information would require compilable source code and
even a full static parsing is blighted by syntax errors caused
by some preprocessor statements; see Figure 5. As a con-
sequence, we simply treat all occurrences of identiﬁer (. . . )
and identiﬁer (. . . ) as function calls.
Keywords are excluded so that if or while statements are
not erroneously classiﬁed as function calls. Also, to match
only function calls and not function deﬁnitions, these pat-
terns must not be followed by an opening curly bracket. But
even with these restrictions, there are many other constructs
which match these patterns, such as constructors, macros,
forward declarations, member function declarations, initial-
ization lists, and C++ functional-style type casts.
Some of these, like constructors and macros, are very simi-
lar to function calls and hence are actually desired. The false
classiﬁcations of forward declarations, member function dec-
larations, initialization lists, and type casts do not seem to
aﬀect our results.
In contrast to these undesirable positive classiﬁcations,
there are also function calls that are not caught by our
heuristic, such as function calls using function pointers or
overloaded operators. A simple parser without preprocess-
ing will generally not be able to do type checking, and will
therefore not be able to correctly classify such calls. How-
ever, we believe that this is a rather uncommon practice in
C++, especially in bigger projects such as Mozilla because
such dynamic calls are more eﬀectively employed through
virtual functions. Hence, we ignore this category of call.
4.3 Mapping Vulnerabilities to Features
In order to ﬁnd out which feature combinations are most
correlated with vulnerabilities, we use frequent pattern min-
ing [1, 18]. The result of frequent pattern mining is a list of
feature sequences that frequently occur in vulnerable com-
ponents. To judge whether these features are signiﬁcant, we
apply the following criteria:
Minimum Support. For imports, the pattern must ap-
pear in at least 3% of all vulnerable components. (In
other words, it needs a minimum support count of 3%
3This cautious phrasing is necessary because of the possibil-
ity of inlining.
P (V |I) V ∧ I !V ∧ I Includes
1.00
13
nsIContent.h · nsIInterfaceRequestorUtils
· nsContentUtils.h
nsIScriptGlobalObject.h · nsDOMCID.h
nsIEventListenerManager.h · nsIPresShell.h
nsISupportsPrimitives.h · nsContentUtils.h
nsReadableUtils.h · nsIPrivateDOMEvent.h
nsIScriptGlobalObject.h · nsDOMError.h
nsCOMPtr · nsEventDispatcher.h
nsReadableUtils.h · nsGUIEvent.h
nsIScriptSecurityManager.h · nsIContent.h
· nsContentUtils.h
nsWidgetsCID.h · nsContentUtils.h
0
1.00
1.00
1.00
1.00
1.00
0.97
0.97
0.96
0.95
14
19
13
19
15
34
29
22
18
0
0
0
0
0
1
1
1
1
Table 2: Include patterns most associated with vul-
nerability. The column labeled “Includes” contains
the include pattern; the column labeled P (V |I) con-
tains the conditional probability that a component
is vulnerable (V ) if it includes the pattern (I). The
columns labeled V ∧ I and !V ∧ I give the absolute
numbers of components that are vulnerable and in-
clude the set, and of components that are not vul-
nerable, but still include the set.
of 424, or 13). For function calls, this threshold is
raised to 10%, or 42.
Signiﬁcance. We only want to include patterns that are
more meaningful than their sub-patterns. For this,
we test whether the entire pattern is more speciﬁc for
vulnerabilities than its sub-patterns. Let I be a set
of features that has passed the minimum-support test.
Then for each proper subset J ⊂ I, we look at all
ﬁles that feature I and at all ﬁles that feature I − J.
We then classify those ﬁles into vulnerable and neu-
tral ﬁles and then use the resulting contingency table
to compute whether additionally featuring J signiﬁ-
cantly increases the chance of vulnerability. We reject
all patterns where we cannot reject the corresponding
hypothesis at the 1% level. (In other words, it must
be highly unlikely that featuring J in addition to I − J
is independent from vulnerability.)4
For patterns that survive these tests, the probability of
it occurring in a vulnerable component is much higher than
for its subsets. This is the case even though the conditional
probability of having a vulnerability when including these
particular includes may be small.
4.4 Features in Mozilla
Again, we applied the above techniques to the Mozilla
base. In Mozilla, Vulture found 79,494 import relations of
the form “component x imports import y”, and 9,481 dis-
tinct imports. Finding imports is very fast: a simple Perl
script goes through the 13,111 C/C++ ﬁles in about thirty
seconds. We also found 324,822 function call relations of
the form “component x calls function y”, and 93,265 dis-
tinct function names. Finding function calls is not as fast
as ﬁnding imports: the script needs about 8 minutes to go
through the entire Mozilla codebase.
4For this, we use χ2 tests if the entries in the corresponding
contingency table are all at least 5, and Fischer exact tests
if at least one entry is 4 or less.
Frequent pattern mining, followed by weeding out insignif-
icant patterns yields 576 include patterns and 2,470 function
call patterns. The top ten include patterns are shown in Ta-
ble 2. Going through all 576 include patterns additionally
reveals that some includes occur often in patterns, but not
alone. For example, nsIDocument.h appears in 45 patterns,
but never appears alone. Components that often appear
together with nsIDocument.h come from directories lay-
out/base or content/base/public, just like nsIDocument
itself. Similar observations hold for function call patterns.
Table 2 reveals that implementing or using nsIContent.h
together with nsIInterfaceRequestorUtils and nsContent-
Utils.h correlated with vulnerability in the past. Typ-
ical components that imports these are nsJSEnvironment
or nsHTMLContentSink. The ﬁrst is again concerned with
JavaScript, which we already know to be risky. The second
has had a problems with a crash involving DHTML that ap-
parently caused memory corruption that could have led to
arbitrary code execution (MFSA 2006-64).
Looking at Table 2, we see that of the 35 components im-
porting nsIScriptSecurityManager.h, nsIContent.h, and
nsContentUtils.h, 34 are vulnerable, while only one is not.
This may mean one of two things: either the component
is invulnerable or the vulnerability just has not been found
yet. At the present time, we are unable to tell which is true.
However, the component in question is nsObjectLoading-
Content. It is a base class that implements a content loading
interface and that can be used by content nodes that provide
functionality for loading content such as images or applets.
It certainly cannot be ruled out that the component has an
unknown vulnerability.
5. PREDICTING VULNERABILITIES
FROM FEATURES
In order to predict vulnerabilities from features, we need a
data structure that captures all of the important information
about components and features (such as which component
has which features) and vulnerabilities (such as which com-
ponent has how many vulnerabilities), but abstracts away
information that we consider unimportant (such as the com-
ponent’s name). In Figure 6, we describe our choice: if there
are m components and n features, we write each component
as a n-vector of features: xk = (xk1, . . . , xkn), where for
1 ≤ k ≤ m and 1 ≤ j ≤ n,
(
xkj =
1 if component i features feature j,
0 otherwise.
We combine all components into X = (x1, . . . , xm)t, the
project’s feature matrix. Entities that cannot contain in-
cludes or function calls, such as makeﬁles, are ignored.
In addition to the feature matrix, we also have the vul-
nerability vector v = (v1, . . . , vm), where vj is the number
of vulnerability reports associated with component j.
Now assume that we get a new component, xm+1. Our
question, “How vulnerable is component m + 1?” is now
equivalent to asking for the rank of vm+1 among the values
of v, given xm+1; and “Is component m + 1 vulnerable?” is
now equivalent to asking whether vm+1 > 0.
As we have seen in the preceding sections, features are
correlated with vulnerabilities. How can we use this infor-
mation to answer the above questions? Both questions can
Vulnerability vector v
.
"
h
e
m
a
r
F
k
c
a
t
S
s
n
"
"
h
.
l
i
t
u
"
.
>
h
o
d
t
s
h
e
ﬁ
/
s
y
s
<
"
h
.
t
c
e
n
n
o
C
P
X
I
s
n
"
"
h
.
l
p
m
i
l
s
s
"
.
"
h
M
O
D
a
v
a
J
I
s
n
"
.
"
h
e
e
r
t
b
"
.
"
h
p
m
v
j
"
.
"
h
v
n
E
n
k
r
o
"
i
nsCOMArray
nsIDocument.h
nspr_md.h
nsDOMClassInfo
EmbedGtkTools
MozillaControl.cpp
0
1
0
10
0
0
1 0 0 0 1 0 0 0 1 0
0 0 1 0 0 0 1 0 1 1
0 1 1 0 0 0 0 0 1 0
0 0 1 0 0
0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 1 0 1 0 0 0 0 0 0
1
Row vector x3
nsDOMClassInfo has had 10
vulnerability-related bug reports
nsDOMClassInfo imports
"nsiXPConnect.h"
Import matrix X
Figure 6: The feature matrix X and the vulnerabil-