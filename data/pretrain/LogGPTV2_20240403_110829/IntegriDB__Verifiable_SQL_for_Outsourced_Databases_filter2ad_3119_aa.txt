title:IntegriDB: Verifiable SQL for Outsourced Databases
author:Yupeng Zhang and
Jonathan Katz and
Charalampos Papamanthou
IntegriDB: Veriﬁable SQL for Outsourced Databases
Yupeng Zhang
ECE Dept. & UMIACS
University of Maryland
PI:EMAIL
Jonathan Katz
CS Dept. & UMIACS
University of Maryland
PI:EMAIL
Charalampos Papamanthou
ECE Dept. & UMIACS
University of Maryland
PI:EMAIL
ABSTRACT
This paper presents INTEGRIDB, a system allowing a data owner to
outsource storage of a database to an untrusted server, and then en-
able anyone to perform veriﬁable SQL queries over that database.
Our system handles a rich subset of SQL queries, including multi-
dimensional range queries, JOIN, SUM, MAX/MIN, COUNT, and
AVG, as well as (limited) nestings of such queries. Even for tables
with 105 entries, INTEGRIDB has small proofs (a few KB) that
depend only logarithmically on the size of the database, low veriﬁ-
cation time (tens of milliseconds), and feasible server computation
(under a minute). Efﬁcient updates are also supported.
We prove security of INTEGRIDB based on known cryptographic
assumptions, and demonstrate its practicality and expressiveness
via performance measurements and veriﬁable processing of SQL
queries from the TPC-H and TPC-C benchmarks.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]:
Security and Protection
Keywords
Veriﬁable Computation; Authenticated Data Structures
1.
INTRODUCTION
With the advent of cloud computing, there has been signiﬁcant
interest in techniques for ensuring correctness of computations per-
formed by an untrusted server on behalf of a client. An authenti-
cated data structure [23, 42] (ADS) allows a data owner to out-
source storage of data to a server, who can then veriﬁably answer
queries posed by multiple clients on that data. (Also related is work
on veriﬁable computation; see Section 1.1 for further discussion.)
Of particular importance is the expressiveness of an ADS; namely,
the class of queries it can support.
In this work we are interested in designing an ADS and an as-
sociated system that supports native SQL queries over a relational
database. Such a system would be suitable for integration into the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813711.
most prevalent applications running in the cloud today, and could
be offered as a software layer on top of any SQL implementation.
Toward this end we design, build, and evaluate INTEGRIDB, a
system that efﬁciently supports veriﬁability of a rich subset of SQL
queries. Speciﬁc advantages of INTEGRIDB include:
1. INTEGRIDB is expressive. It can support multidimensional
range queries, JOIN, SUM, MAX/MIN, COUNT, and AVG, as
well as (limited) nestings of such queries. As an illustration
of its expressiveness, we show that INTEGRIDB can support
12 out of the 22 SQL queries in the TPC-H benchmark, and
support 94% of the queries in the TPC-C benchmark.
2. INTEGRIDB is efﬁcient. Even for tables with hundreds of
thousands of entries, INTEGRIDB is able to achieve small
proofs (a few KB), low veriﬁcation time (tens of millisec-
onds), and feasible server computation (under a minute). In
fact, the proof size and veriﬁcation time in INTEGRIDB are
independent of the size of the stored tables (up to logarithmic
factors).
INTEGRIDB also supports efﬁcient updates (i.e.,
INSERT and DELETE).
3. INTEGRIDB is scalable, and we have executed it on database
tables with up to 6 million rows.
4. INTEGRIDB can be proven secure based on known crypto-
graphic assumptions.
INTEGRIDB outperforms state-of-the-art veriﬁable database sys-
tems in terms of its expressiveness, performance, and scalability.
We provide a comparison to prior work next.
1.1 Comparison to Prior Work
Relevant prior work which could be used to construct an ADS
handling some subset of SQL queries can be classiﬁed into two cat-
egories: generic approaches and speciﬁc approaches. We discuss
these in turn. (See also Table 1.)
Generic approaches. A veriﬁable database supporting any desired
SQL query (of bounded size) could be derived in principle using
general-purpose techniques for veriﬁable computation [16, 5, 7, 17,
8], or one of the systems that have been built to apply these tech-
niques [40, 39, 38, 2, 10, 43, 4, 3, 14]. To apply this approach,
the data owner would ﬁrst compile its database into a program (ex-
pressed either as a boolean/arithmetic circuit, or in the RAM-model
of computation) that takes as input a query and returns the corre-
sponding result. This, however, will not necessarily yield a prac-
tical protocol. Circuit-based techniques will be inefﬁcient since
the size of a circuit for the program just described will be at least
as large as the database itself; moreover, using a circuit-based ap-
proach will not allow efﬁcient updates. RAM-based systems will
Table 1: Comparing the expressiveness of INTEGRIDB with prior work. A  is placed only if a given scheme supports a given query
with proofs whose size is independent of the table size (up to logarithmic factors). Note that although generic systems are as expressive as
INTEGRIDB, they are less efﬁcient in practice (see Section 7). Below, FUNC can be any of {SUM, MAX/MIN, COUNT, AVG}.
reference
JOIN multidimensional JOIN on multidimensional
range queries
range queries
INTEGRIDB
RAM-based [10, 2, 4, 3]
circuit-based [38], [4, libsnark], [14]
tree [44] or signature [32]-based
multirange-based [33]















FUNC on
intermediate results
polylog
updates










partly address these issues; however, as we show in Section 7.3,
their performance will still be worse than that of INTEGRIDB.
Speciﬁc approaches. Prior work has also explored custom-built
veriﬁable database systems. (INTEGRIDB is in this category.) We
can roughly categorize existing approaches as being either tree-
based (using Merkle trees [24] as a main component) or signature-
based (where the server stores values pre-signed by the data owner).
Most tree-based approaches [15, 31, 20, 41, 35, 44, 45, 21,
22, 46] support single-dimensional range queries, but not multi-
dimensional range queries. Signature-based approaches (e.g., [26,
27, 28, 30, 12, 32, 19]) also only support single-dimensional range
queries; moreover, they do not support efﬁcient updates. Martel
et al. [23] present a scheme supporting multidimensional range
queries, but with costs exponential in the number of dimensions.
Papadopoulos et al. [33] recently showed a scheme explicitly de-
signed for multidimensional range queries; however, their scheme
does not support efﬁcient updates.
None of the schemes mentioned above support short proofs for
JOIN queries. Speciﬁcally, schemes supporting JOIN queries [30,
20, 44, 32, 32] rely on the idea of Pang et al. [30], which requires
one column to be returned to the client who must then issue a range
query (on the other column) for every element in the returned col-
umn. Thus, the proof size and veriﬁcation time are, in the worst
case, linear in the size of the smallest column involved in the query.
In addition, and in contrast to INTEGRIDB, none of the above
schemes support short proofs for functions (such as SUM, MAX/MIN,
or COUNT) applied on intermediate results (such as summing the
values of a column that is the output of a JOIN). Instead, these
schemes would require returning the intermediate result back to the
client who would then compute the function locally.
Trusted hardware. Bajaj et al. [1] propose a scheme for veriﬁable
SQL that relies on trusted hardware. INTEGRIDB does not make
any assumption about trusted hardware.
2. PRELIMINARIES
We let λ denote the security parameter, negl be a negligible func-
tion, and PPT stand for “probabilistic polynomial time.” We use
˜O(f (n)) for O(f (n) · polylog(f (n))), and let [n] = {1, . . . , n}.
2.1 Authenticated Data Structures
We deﬁne the abstract notion of an authenticated data structure
(ADS) [23, 42], which allows a data owner to outsource data to a
server that can then be queried by clients with assurance about the
correctness of the result. Particular ADSs are distinguished by the
class of queries Q and type of updates U (if any) they support. By
way of notation, we denote the (true) result of applying query Q to
data D by R = Q(D), and denote the result of applying an update
operation upd to data D by D(cid:48) = upd(D).
We consider three types of parties: a data owner, a server, and
a client (which may be the data owner itself). To outsource storage
of data D to the server using an ADS for some class of queries Q,
the data owner ﬁrst runs an initialization algorithm that outputs a
secret sk and a public key pk, followed by a setup algorithm that
takes sk and D and outputs a digest δ and an authenticated version
of the data ˜D. It gives ˜D to the server and publishes δ and pk. Any
client can issue a query Q ∈ Q to the server; in return, the server
uses ˜D and pk to compute a response R along with a proof π. The
client can verify correctness of the response R using δ, π and pk.
Security ensures that if the client accepts, then R is equal to Q(D)
(except with negligible probability).
We will be interested in dynamic ADSs that also support up-
dates. When the data owner wishes to update the data D stored at
the server, it interacts with the server; assuming the server behaves
correctly, the result is a new value ˜D(cid:48) stored by the server as well as
a new digest δ(cid:48). (If the server behaves dishonestly, the data owner
will realize this and reject.) We assume clients are always able to
obtain a fresh copy of the most recent value of the digest; if not,
freshness of the results cannot be guaranteed.
Formally, a dynamic ADS for query class Q and updates U con-
sists of efﬁcient algorithms Init, Setup, Prove, Verify, UpdateO,
and UpdateS that work as follows:
1. Algorithm Init takes as input 1λ, and outputs a secret key sk
and a public key pk. The public key is implicitly provided to
all algorithms below.
2. Algorithm Setup takes as input data D and the secret key sk,
and outputs a digest δ and authentication information ˜D.
3. Algorithm Prove takes as input ˜D, δ, and Q ∈ Q. It returns
a result R and a proof π.
4. Algorithm Verify takes as input digest δ, query Q ∈ Q, re-
sult R, and proof π. It outputs 0 or 1.
5. UpdateO and UpdateS are interactive algorithms run by the
data owner and server, respectively. UpdateO takes as in-
put the secret key sk, a digest δ, and an update upd ∈ U,
while UpdateS takes as input ˜D. After completing their in-
teraction, UpdateO outputs a digest δ(cid:48) along with a bit indi-
cating acceptance or rejection. (Rejection implies δ(cid:48) = δ.)
UpdateS outputs ˜D(cid:48).
For an ADS to be non-trivial, the sizes of δ and π should be much
smaller than the size of D.
Correctness of an ADS is deﬁned in the natural way and is omit-
ted. The deﬁnition of security is also intuitive, though the formal-
ism is a bit cumbersome. Consider the following experiment based
on an ADS speciﬁed by the algorithms above and an attacker A,
and parameterized by security parameter λ:
Step 1: Run (sk, pk) ← Init(1λ) and give pk to A, who outputs
a database D. Then (δ, ˜D) ← Setup(D, sk) is computed,
and A is given δ, ˜D. Values sk, δ, D are stored as state of the
experiment.
Step 2: A can run either of the following two procedures polyno-
mially many times:
• Query:
• Update:
– A outputs (Q, R, π) with Q ∈ Q, after which b =
– Event attack occurs if b = 1 but R (cid:54)= Q(D).
Verify(δ, Q, R, π) is computed.
– A outputs upd ∈ U, and then interacts (playing the
role of the server) with UpdateO(sk, δ, upd) until
that algorithm halts with output (δ(cid:48), b). The digest δ(cid:48)
is given to A.
– Set δ := δ(cid:48). Also, if b = 1 set D := upd(D).
(Recall that δ, D are stored as part of the state of the
experiment.)
DEFINITION 1. An ADS is secure if for all PPT adversaries A,
the probability that attack occurs in the above is negligible.
2.2 SQL queries Supported by IntegriDB
We brieﬂy describe the SQL queries that INTEGRIDB supports.
Every SQL database consists of a collection of SQL tables, which
are two-dimensional matrices. As we explain each query, we give
an example using a database containing two tables, Table A:
row_ID student_ID age GPA First_name
1
2
3
4
10747
10715
10721
10781
22
24
23
21
3.5
3.3
3.7
3.0
Bob
Alice
David
Cathy
and Table B:
row_ID student_ID Year_enrolled
1
2
3
4
10715
10791
10747
10771
2010
2012
2011
2013
1. JOIN: A join query is used to combine rows from two or more
tables, based on common values in speciﬁed columns. E.g., the
query “SELECT A.student_ID, A.age, A.GPA, B.Year_Enrolled
FROM A JOIN B ON A.student_ID = B.student_ID” returns:
student_ID A.age A.GPA B.Year_Enrolled
10747
10715