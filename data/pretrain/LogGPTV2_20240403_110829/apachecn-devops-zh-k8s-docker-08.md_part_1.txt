# 八、RBAC 策略与审计
认证只是管理集群中访问的第一步。一旦授予对群集的访问权限，根据帐户是用于自动系统还是用户，限制帐户可以做什么就很重要。授权对资源的访问是防止意外问题和不良行为者滥用集群的重要部分。
在本章中，我们将详细介绍 Kubernetes 如何通过其**基于角色的访问控制** ( **RBAC** )模型授权访问。本章的第一部分将深入探讨 Kubernetes 斯 RBAC 是如何配置的，有哪些选项可用，并将理论转化为实际例子。调试和排除 RBAC 策略的故障将是下半部分的重点。
在本章中，我们将涵盖以下主题:
*   RBAC 简介
*   将企业身份映射到 Kubernetes 以授权访问资源
*   命名空间多租户
*   不可动摇的审计
*   使用`audit2rbac`调试策略
# 技术要求
本章有以下技术要求:
*   运行配置来自 [*第 7 章*](07.html#_idTextAnchor203)*的 KinD 集群，将认证集成到您的集群中*
*   从 [*第 6 章*](06.html#_idTextAnchor174)*服务、负载平衡和外部域名系统*访问 SAML2 实验室
您可以在以下 GitHub 存储库中访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# RBAC 简介
在我们进入 RBAC 之前，让我们快速了解一下 Kubernetes 和访问控制的历史。
在 Kubernetes 1.6 之前，访问控制基于**基于属性的访问控制** ( **ABAC** )。顾名思义，ABAC 通过比较规则和属性来提供访问，而不是通过角色来提供访问。分配的属性可以分配给任何类型的数据，包括用户属性、对象、环境、位置等。
过去，要为 ABAC 配置 Kubernetes 集群，必须在 API 服务器上设置两个值:
*   `--authorization-policy-file`
*   `--authorization-mode=ABAC`
`authorization-policy-file`是 API 服务器上的本地文件。因为它是每个应用编程接口服务器上的本地文件，所以对文件的任何更改都需要对主机的特权访问，并且需要您重新启动应用编程接口服务器。可以想象，更新 ABAC 策略的过程变得很困难，任何即时的更改都需要在重新启动 API 服务器时短暂中断。
从 Kubernetes 1.6 开始， **RBAC** 成为授权访问资源的首选方法。与 **ABAC** 不同， **RBAC** 使用 Kubernetes 原生对象，更新无需重启 API 服务器即可反映。 **RBAC** 也兼容不同的认证方式。从这里开始，我们将重点关注如何制定 RBAC 策略并将其应用于您的集群。
# 什么是角色？
在 Kubernetes 中，角色是一种将权限绑定到一个可以描述和配置的对象中的方式。角色有规则，规则是资源和动词的集合。向后看，我们有以下几点:
*   **动词**:在一个 API 上可以采取的动作，比如读(`get`)、写(`create`、`update`、`patch`、`delete`)或者列表观看。
*   **资源**:要应用动词的 API 的名称，如`services`、`endpoints`等。也可以列出特定的子资源。可以对特定资源进行命名，以提供对对象的非常特定的权限。
角色没有说谁可以在资源上执行动词——这是由`RoleBindings`和`ClusterRoleBindings`处理的。我们将在*角色绑定和集群角色绑定*部分了解更多信息。
重要说明
“角色”一词可以有多种含义，RBAC 经常在其他语境中使用。在企业世界中，术语“角色”通常与业务角色相关联，用于将权利传递给该角色，而不是特定的人。例如，企业可以向所有应付账款员工分配签发支票的能力，而不是为应付账款部门的每个成员创建签发支票的特定权限的特定分配。当有人在角色之间移动时，他们会失去旧角色的权限，而获得新角色的权限。在从应付账款转移到应收账款的情况下，用户将失去支付能力并获得接受支付的能力。通过将权限绑定到角色，而不是个人，权限的更改会随着角色的更改而自动发生，而不必手动切换每个用户的权限。这是 RBAC 这个词更“经典”的用法。
将构建规则的每个资源由以下内容标识:
*   `apiGroups`:资源所属组的列表
*   `resources`:资源(以及潜在的子资源)的对象类型的名称
*   `resourceNames`:应用此规则的特定对象的可选列表
每个规则*必须*有一个**API group**和**资源**的列表。**资源名称**可选。
重要说明
如果您发现自己授权从命名空间中访问该命名空间中的特定对象，那么是时候重新考虑您的授权策略了。Kubernetes 的租户边界是命名空间。除了非常具体的原因之外，在 RBAC 角色中命名特定的 Kubernetes 对象是一种反模式，应该避免。当特定对象由 RBAC 角色命名时，考虑分解它们所在的命名空间来创建单独的命名空间。
一旦在规则中标识了资源，就可以指定谓词。动词是可以在资源上采取的动作，提供对 Kubernetes 中对象的访问。
如果想要访问的对象应该是`all`，则不需要添加每个动词；相反，通配符可用于识别所有**动词**、**资源**或 **apiGroups** 。
## 确定角色
Kubernetes 授权页面([https://Kubernetes . io/docs/reference/access-authn-authz/RBAC/](https://kubernetes.io/docs/reference/access-authn-authz/rbac/))使用以下角色作为示例，允许某人获取 pod 及其日志的详细信息:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-and-pod-logs-reader
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list"]
```
向后工作以确定这个角色是如何定义的，我们将从`resources`开始，因为它是最容易找到的方面。Kubernetes 中的所有对象都由 URL 表示。如果您想获取默认命名空间中所有关于 pod 的信息，您可以调用`/api/v1/namespaces/default/pods` URL，如果您想获取特定 pod 的日志，您可以调用`/api/v1/namespaces/default/pods/mypod/log` URL。
URL 模式将适用于所有命名空间范围的对象。`pods`和`pods/log`一样排到`resources`。当试图确定您想要授权哪些资源时，请使用位于[https://kubernetes.io/docs/reference/#api-reference](https://kubernetes.io/docs/reference/#api-reference)的 Kubernetes 斯 API 文档中的`api-reference`文档。
如果您试图访问对象名称之后的附加路径组件(如状态和登录 pods)，则需要明确授权。授权 pods 不会立即授权日志或状态。
基于对`resources`的 URL 映射的使用，你的下一个想法可能是`verbs`将是 HTTP 动词。事实并非如此。Kubernetes 语中没有`GET`动词。动词由应用编程接口服务器中对象的模式定义。好消息是 HTTP 动词和 RBAC 动词之间有一个静态映射。看这个网址，注意在`PodSecurityPolicies`和模拟的 HTTP 动词上面有动词。这是因为 **RBAC** 模型不仅仅用于授权特定的 API，还用于授权谁可以模拟用户以及如何分配`PodSecurityPolicy`对象。本章的重点将是标准的 HTTP 动词映射。
最后要识别的成分是`apiGroups`。这是 URL 模型的另一个不一致的地方。`pods`是“核心”集团的一部分，但`apiGroups`名单只是一个空字符串(`""`)。这些是旧的 API，是最初的 Kubernetes 的一部分。大多数其他应用编程接口将在一个应用编程接口组中，该组将是其网址的一部分。您可以通过查看您要授权的对象的应用编程接口文档来找到该组。
至少可以说，RBAC 模型中的不一致会使调试变得困难。本章的最后一个实验将完成调试过程，并消除定义规则时的许多猜测。
既然我们已经定义了角色的内容以及如何定义特定的权限，那么需要注意的是，角色可以应用于名称空间和集群级别。
## 角色与集群角色
RBAC 规则的范围可以是特定的名称空间或整个集群。以我们前面的为例，如果我们将其定义为集群角色而不是角色，并删除命名空间，我们将拥有一个角色，该角色授权某人获取集群中所有单元的详细信息和日志。这个新角色也可以在单独的名称空间中使用，以将权限分配给特定名称空间中的 pods:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-pod-and-pod-logs-reader
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list"]
```
该权限是在集群中全局应用还是在特定命名空间的范围内应用，取决于它如何绑定到它所应用的主题。这将在*角色绑定和集群角色绑定*一节中介绍。
除了在集群中应用一组规则之外，集群角色还用于将规则应用于未映射到命名空间的资源，例如 PersistentVolume 和 StorageClass 对象。
在了解了角色的定义之后，让我们来了解针对特定目的设计角色的不同方式。在接下来的部分中，我们将研究定义角色的不同模式及其在集群中的应用。
## 负面角色
最常见的授权请求之一是“我能写一个角色让我做除了 xyz 以外的所有事情吗？”。在 RBAC，答案是*否*。RBAC 要求要么允许每种资源，要么列举具体的资源和动词。这在 RBAC 有两个原因:
*   **通过简单性获得更好的安全性**:能够执行一个规则，该规则规定*除了这个*之外的每个机密都需要比 RBAC 提供的复杂得多的评估引擎。发动机越复杂，测试和验证就越困难，也越容易损坏。更简单的引擎只是更容易编码和保持安全。
*   **意外后果**:随着集群的增长和新功能的增加，允许某人做除 xyz 之外的所有事情*为意外问题打开了大门。*
关于第一点，构建具有这种能力的引擎很难构建和维护。这也让规则变得更加难以跟踪。要表达这种类型的规则，您不仅需要有授权规则，还需要有这些规则的顺序。例如，要说*我想允许除了这个机密*之外的一切，你首先需要一个规则说*允许一切*，然后一个规则说*否认这个机密*。如果你切换规则说*否认这个机密*，那么*允许一切*，第一个规则将被覆盖。您可以为不同的规则分配优先级，但这现在使它变得更加复杂。
有多种方法可以实现这种模式，要么使用自定义授权网络钩子，要么使用控制器动态生成 RBAC `Role`对象。这两者都应该被认为是安全反模式，因此不在本章讨论。
第二点涉及意想不到的后果。越来越流行的是支持基础设施的供应，而不是 Kubernetes 使用的操作员模式，即定制控制器寻找**定制资源定义** ( **CRD** )的新实例来供应基础设施，如数据库。亚马逊网络服务为此发布了一个运营商([https://github.com/aws/aws-controllers-k8s](https://github.com/aws/aws-controllers-k8s))。这些操作者在他们自己的名称空间中运行，并为他们的云提供管理凭证，以寻找他们的对象的新实例来调配资源。如果您有一个允许“除了……”之外的一切的安全模型，那么一旦部署，群集中的任何人都可以调配有实际成本并且会造成安全漏洞的云资源。从安全角度来说，枚举您的资源是了解什么在运行以及谁有权访问的重要部分。
Kubernetes 集群的趋势是通过定制资源 API 提供对集群外部基础设施的更多控制。您可以调配任何资源，从虚拟机到其他节点，再到任何类型的应用编程接口驱动的云基础架构。除了 RBAC 之外，你还可以使用其他工具来降低某些人创建他们不应该创建的资源的风险，但这些应该是次要措施。
## 聚合集群角色
集群角色会很快变得令人困惑，并且很难维护。最好将它们分成更小的集群角色，可以根据需要进行组合。以 admin ClusterRole 为例，它是设计用来让某人在特定的名称空间内做任何事情。当我们查看管理集群角色时，它列举了几乎所有的资源。您可能认为有人编写了这个 ClusterRole，这样它就可以包含所有这些资源，但是这将非常低效，当新的资源类型被添加到 Kubernetes 时会发生什么？管理集群角色是一个聚合集群角色。看一看`ClusterRole`:
```
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: admin
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: 'true'
rules:
.
.
.
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-admin: 'true'
```
关键是`aggregationRule`段。本节告诉 Kubernetes 合并所有集群角色的规则，其中`rbac.authorization.k8s.io/aggregate-to-admin`标签为真。创建新 CRD 时，如果不添加包含此标签的新集群角色，管理员将无法创建该 CRD 的实例。要允许名称空间管理员用户创建新的`myapi` / `superwidget`对象的实例，请创建新的`ClusterRole`:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aggregate-superwidget-admin
  labels:
    # Add these permissions to the "admin" default role.
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
- apiGroups: ["myapi"]
  resources: ["superwidgets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
```
下次查看管理集群角色时，它将包括`myapi` / `superwidgets`。您也可以直接引用该集群角色来获得更具体的权限。
## 角色绑定和集群角色绑定
一旦定义了权限，就需要将它分配给某个东西来启用它。“某物”可以是用户、群组或服务帐户。这些选项被称为主题。与角色和集群角色一样，角色绑定将角色或集群角色绑定到特定的命名空间，集群角色绑定将在集群中应用集群角色。绑定可以有许多主体，但只能引用一个角色或集群角色。要将本章前面创建的`pod-and-pod-logs-reader`角色分配给默认命名空间中名为`mysa`的服务帐户，名为`podreader`的用户或任何拥有`podreaders`组的人，请创建一个`RoleBinding`:
```
apiVersion: rbac.authorization.k8s.io/v1