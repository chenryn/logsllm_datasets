[0.009993 user 0.049968 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/0 [2/2] messages rcvd/sent
0/0 [2/6] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 0 read, 0 written, buffer hit rate = 0.00%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
PLANNER STATISTICS
system usage stats:
0.009974 elapsed 0.009988 user −1.999985 system sec
[0.019982 user 0.049955 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/0 [2/2] messages rcvd/sent
0/0 [2/6] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 5 read, 0 written, buffer hit rate = 96.69%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
EXECUTOR STATISTICS
system usage stats:
0.040004 elapsed 0.039982 user 0.000013 system sec
[0.059964 user 0.049970 sys total]
0/0 [0/1] filesystem blocks in/out
0/0 [0/0] page faults/reclaims, 0 [0] swaps
0 [0] signals rcvd, 0/2 [2/4] messages rcvd/sent
2/2 [4/8] voluntary/involuntary context switches
postgres usage stats:
Shared blocks: 2 read, 0 written, buffer hit rate = 83.33%
Local blocks: 0 read, 0 written, buffer hit rate = 0.00%
Direct blocks: 0 read, 0 written
22/61
Optimizer
◮ Scan Methods
◮ Join Methods
◮ Join Order
23/61
Scan Methods
◮ Sequential Scan
◮ Index Scan
◮ Bitmap Scan
24/61
Sequential Scan
Heap
D D D D D D D D D D D D
A A A A A A A A A A A A
T T T T T T T T T T T T
A A A A A A A A A A A A
8K
25/61
Btree Index Scan
Index
Heap
D D D D D D D D D D D D
A A A A A A A A A A A A
T T T T T T T T T T T T
A A A A A A A A A A A A
26/61
Bitmap Scan
Index 1 Index 2 Combined Table
col1 = ’A’col2 = ’NS’ Index
0 0 0 ’A’ AND ’NS’
1 1 1
& =
0 1 0
1 0 0
27/61
Join Methods
◮ Nested Loop
◮ WithInnerSequentialScan
◮ WithInnerIndex Scan
◮ Hash Join
◮ Merge Join
28/61
Nested Loop Join with
Inner Sequential Scan
Outer Inner
aag aai
aay aag
aar aas
aai aar
aay
aaa
aag
No Setup Required
Used For Small Tables
29/61
Nested Loop Join with
Inner Index Scan
Outer Inner
aag aai
aay aag
aar aas
aai aar
aay
aaa
Index Lookup
aag
No Setup Required
Index Must Already Exist
30/61
Hash Join
Outer Inner
aay aak aas
aag
aak aam aay aar
aar
Hashed
aao aaw
Must fit in Main Memory
31/61
Merge Join
Outer Inner
aaa aaa
aab aab
Sorted
aac aab
Sorted
aad aac
aae
aaf
aaf
Ideal for Large Tables
An Index Can Be Used to Eliminate the Sort
32/61
Three-Table Join Query
SELECT part.price
FROM customer, salesorder, part
WHERE customer.customer_id = salesorder.customer_id AND
salesorder.part = part.part_id
33/61
Three-Table Join, Pass 1, Part 1
(2 3 ): rows=575 width=76
path list:
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
Nestloop rows=575 cost=0.00..1178.70
SeqScan(2) rows=575 cost=0.00..13.75
IdxScan(3) rows=126 cost=0.00..2.01
Nestloop rows=575 cost=0.00..1210.28
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(3) rows=126 cost=0.00..2.01
cheapest startup path:
Nestloop rows=575 cost=0.00..1178.70
SeqScan(2) rows=575 cost=0.00..13.75
IdxScan(3) rows=126 cost=0.00..2.01
cheapest total path:
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
34/61
Three-Table Join, Pass 1, Part 2
(1 2 ): rows=575 width=76
path list:
HashJoin rows=575 cost=3.00..40.75
clauses=(salesorder.customer_id = customer.customer_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(1) rows=80 cost=0.00..2.80
MergeJoin rows=575 cost=0.00..64.39
clauses=(salesorder.customer_id = customer.customer_id)
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest startup path:
MergeJoin rows=575 cost=0.00..64.39
clauses=(salesorder.customer_id = customer.customer_id)
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest total path:
HashJoin rows=575 cost=3.00..40.75
clauses=(salesorder.customer_id = customer.customer_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(1) rows=80 cost=0.00..2.80
35/61
Three-Table Join, Pass 2, Part 1
(2 3 1 ): rows=575 width=112
path list:
HashJoin rows=575 cost=6.58..68.90
clauses=(salesorder.customer_id = customer.customer_id)
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
SeqScan(1) rows=80 cost=0.00..2.80
HashJoin rows=575 cost=3.57..92.54
clauses=(salesorder.part_id = part.part_id)
MergeJoin rows=575 cost=0.00..64.39
clauses=(salesorder.customer_id = customer.customer_id)
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
SeqScan(3) rows=126 cost=0.00..3.26
HashJoin rows=575 cost=3.00..1205.70
clauses=(salesorder.customer_id = customer.customer_id)
Nestloop rows=575 cost=0.00..1178.70
SeqScan(2) rows=575 cost=0.00..13.75
IdxScan(3) rows=126 cost=0.00..2.01
SeqScan(1) rows=80 cost=0.00..2.80
36/61
Three-Table Join, Pass 2, Part 2
MergeJoin rows=575 cost=0.00..1229.35
clauses=(salesorder.customer_id = customer.customer_id)
Nestloop rows=575 cost=0.00..1210.28
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(3) rows=126 cost=0.00..2.01
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest startup path:
MergeJoin rows=575 cost=0.00..1229.35
clauses=(salesorder.customer_id = customer.customer_id)
Nestloop rows=575 cost=0.00..1210.28
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(3) rows=126 cost=0.00..2.01
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest total path:
HashJoin rows=575 cost=6.58..68.90
clauses=(salesorder.customer_id = customer.customer_id)
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
SeqScan(1) rows=80 cost=0.00..2.80
37/61
Result Returned
test=> SELECT firstname
test−> FROM friend
test−> WHERE age = 33;
1: firstname (typeid = 1042, len = −1, typmod = 19, byval = f)
−−−−
1: firstname = "Sandy" (typeid = 1042, len = −1, typmod = 19, byval = f)
−−−−
firstname
−−−−−−−−−−−−−−−−−
Sandy
(1 row)
38/61
VACUUM ANALYZE
test=>VACUUMANALYZE VERBOSEcustomer;
INFO: vacuuming"pg_catalog.pg_depend"
INFO: index "pg_depend_depender_index"now contains3616row versionsin 19 pages
DETAIL: 0 indexpages havebeen deleted,0 arecurrentlyreusable.
CPU0.00s/0.00usec elapsed0.00 sec.
INFO: index "pg_depend_reference_index"now contains3616row versionsin 23pages
DETAIL: 0 indexpages havebeen deleted,0 arecurrentlyreusable.
CPU0.00s/0.00usec elapsed0.00 sec.
INFO: "pg_depend":found0 removable,3616 nonremovablerow versionsin 25 pages
DETAIL: 0 deadrow versionscannotbe removedyet.