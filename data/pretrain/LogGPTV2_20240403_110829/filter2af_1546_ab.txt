            json.NewEncoder(w).Encode(Response{Status: "Save Error"})
        } else {
            var cookie, err = r.Cookie("Token")
            if err == nil {
                var token = cookie.Value
                if verifyToken(token, createpost.Hash) || (createpost.Hash == CONFIG.admin_hash){
                    bucket := CONFIG.admin_bucket
                    data := createpost.Raw
                    if createpost.Hash != CONFIG.admin_hash {
                        id , _ := uuid.NewV4()
                        bucket = id.String()
                        data = string(markdown.ToHTML([]byte(sanitize(data)), nil, nil))
                    } else {
                        data = string(markdown.ToHTML([]byte(data), nil, nil))
                    }
                    postid := save_post(bucket, data)
                    log.Println("Saved post to", postid)
                    json.NewEncoder(w).Encode(Response{Status: "success", Bucket: bucket, PostId: postid})
                } else {
                    log.Println("Verification failed for ", createpost.Hash, token)
                    json.NewEncoder(w).Encode(Response{Status: "Token not verified"})
                }
            } else {
                json.NewEncoder(w).Encode(Response{Status: "Invalid body."})
            }
        }
    }
    func flag(w http.ResponseWriter, r *http.Request) {
        var cookie, err = r.Cookie("Token")
        res := Preview{Error: "", Data: "'"}
        if err == nil {
            if cookie.Value == CONFIG.admin_token {
                res.Data = template.HTML(CONFIG.admin_token)
            } else {
                res.Data = template.HTML("You are not admin.")
            }
        }
        previewTmpl.Execute(w, res)    
    }
    func debug(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json")
            type Response struct {
                Admin_bucket string
                VAL_A int
                VAL_B int
            }
        json.NewEncoder(w).Encode(Response{Admin_bucket: CONFIG.admin_bucket, VAL_A: CONFIG.a, VAL_B: CONFIG.c})
    }
    func clear_database() {
        for range time.Tick(time.Second * 1 * 60 * 30) {
            stmt, _ := db.Prepare("DELETE FROM posts")
            stmt.Exec()
            log.Println("Cleared database.")
        }
    }
    func handleRequests() {
        route := mux.NewRouter().StrictSlash(true)
        go clear_database()
        fs := http.FileServer(http.Dir("./static/"))
        route.PathPrefix("/static/").Handler(http.StripPrefix("/static/", fs))
        route.HandleFunc("/", indexHandler)
        route.HandleFunc("/demo",  previewHandler).Methods("GET")
        route.HandleFunc("/api/flag", flag).Methods("GET")
        route.HandleFunc("/api/filter", filterHandler).Methods("POST")
        route.HandleFunc("/api/create", createHandler).Methods("POST")
        route.HandleFunc("/{bucketid}/{postid}", previewHandler).Methods("GET")
        route.HandleFunc("/_debug",  debug).Methods("GET")
        loggedRouter := handlers.LoggingHandler(os.Stdout, route)
        srv := &http.Server{
            Addr: "0.0.0.0" + os.Getenv("PORT"),
            WriteTimeout: time.Second * 15,
            ReadTimeout:  time.Second * 15,
            IdleTimeout:  time.Second * 60,
            Handler:      loggedRouter,
        }
        if err := srv.ListenAndServe(); err != nil {
            log.Println(err)
        }
    }
    func checkErr(err error) {
        if err != nil {
            panic(err)
        }
    }
    func main() {
        db, _ = sql.Open("sqlite3", "./database.db")
        stmt, _ := db.Prepare("CREATE TABLE IF NOT EXISTS posts (postid, bucket, note)")
        stmt.Exec()
        stmt, _ = db.Prepare("DELETE FROM posts")
        stmt.Exec()
        a, _ := strconv.Atoi(os.Getenv("VAL_A"))
        c, _ := strconv.Atoi(os.Getenv("VAL_B"))
        CONFIG = Config{
            admin_bucket: os.Getenv("ADMIN_BUCKET"),
            admin_token: os.Getenv("FLAG"),
            secret: os.Getenv("SECRET"),
            admin_hash: getadminhash(), 
            modulus: 99999999999,
            seed: rand.Intn(9e15) + 1e15, 
            a: a, 
            c: c,
        }
        fmt.Println("App running on http://localhost", os.Getenv("PORT"))
        handleRequests()
    }
####  解题思路
markdown界面可能可以构造xss，通过postmessage的漏洞我们能够获取hash值，还有一个bot界面可以访问任意网页，而我们需要的是token。所以我们构造一个存储型xss利用CSRF获取flag。
现在问题是如何生成xss
    if createpost.Hash != CONFIG.admin_hash {
    ​    id , _ := uuid.NewV4()
    ​    bucket = id.String()
    ​    data = string(markdown.ToHTML([]byte(sanitize(data)), nil, nil))
    } else {
    ​    data = string(markdown.ToHTML([]byte(data), nil, nil))
    }
由代码可知，当我们的hash值是admin的值时，markdown语句直接插入。
所以我们自己构造一个网页，让bot访问从而得到hash。再利用hash写入存储型xss，最后得到token获取flag
####  实践
构建页面实现小窗口访问demo
虽然在这里我们会接收到hash，但是并不会在前端显示，所以我们要将包中数据显示在我们可以看到的地方。将上面的代码完善
将接收到的hash当作参数和网址当作图片链接。我们查看图片链接就可以知道hash
然后注入xss
最后利用CSRF获取flag
###  总结
hash通过postmessage漏洞获取，xss注入后，实现CSRF得到flag
这道题环境搭建不完全，bot没有，解题过程借鉴了[MD Notes – CTFs
(zeyu2001.com)](https://ctf.zeyu2001.com/2021/inctf-2021/md-notes)
## Json Analyser
###  环境搭建
唯一问题 npm install 不能执行
再dockerfile中增加npm config set strict-ssl false解决
###  做题
有两个js文件,但是源码并不完全
####  script.js
    $("form").on("change", ".file-upload-field", function(){ 
        $(this).parent(".file-upload-wrapper").attr("data-text",         $(this).val().replace(/.*(\/|\\)/, '') );
    });
####  get_role.js
    function get_roles(){
        const role=document.getElementById("role").value
        fetch('http://127.0.0.1:5555/verify_roles?role='+role).then(response=>
            response.text()
        ).then(data =>{
            document.getElementById("output").innerHTML=data;
        })
    }
对功能进行操作，发现上传文件需要pin，目前还是没有思路，打开waf.py查看源码
####  waf.py
    from flask import Flask, request
    from flask_cors import CORS
    import ujson
    import json
    import re
    import os
    os.environ['subscription_code'] = '[REDACTED]'
    app=Flask(__name__)
    cors = CORS(app)
    CORS(app)
    cors = CORS(app, resources={
        r"/verify_roles": {
           "origins": "*"
        }
    })
    @app.route('/verify_roles',methods=['GET','POST'])
    def verify_roles():
        no_hecking=None
        role=request.args.get('role')
        if "superuser" in role:
            role=role.replace("superuser",'')
        if " " in role:
            return "n0 H3ck1ng"
        if len(role)>30:
            return "invalid role"
        data='"name":"user","role":"{0}"'.format(role)
        no_hecking=re.search(r'"role":"(.*?)"',data).group(1)
        if(no_hecking)==None:
            return "bad data :("
        if no_hecking == "superuser":
            return "n0 H3ck1ng"
        data='{'+data+'}'
        try:
            user_data=ujson.loads(data)
        except:
            return "bad format" 
        role=user_data['role']
        user=user_data['name']
        if (user == "admin" and role == "superuser"):
            return os.getenv('subscription_code')
        else:
            return "no subscription for you"
    if __name__=='__main__':
        app.run(host='0.0.0.0',port=5555)
role=role.replace(“superuser”,’’)
替换superuser为空
if “ “ in role:  
return “n0 H3ck1ng”
不能有空格
role {
                    if (error) {
                        console.error(error);
                        return;
                    }
                    console.log("Copied Successfully!");
                });
                return res.sendFile(__dirname+'/static/error.html')
            }
            var output='\n';
            if(config['name']){
                output=output+'Package name is:'+config['name']+'\n\n';