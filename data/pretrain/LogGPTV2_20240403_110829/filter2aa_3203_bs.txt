### Network Replication Strategy

To address the relatively slow network link between Sydney and Seattle, the servers that receive push replication use pull replication among themselves. This method ensures that replication occurs during periods of low network activity, such as late at night.

### Configuring Database Replication

To add a replication partner for a WINS server and configure the replication options, follow these steps:

1. **Open the WINS Snap-in:**
   - Launch the WINS snap-in and navigate to the appropriate server in the tree.

2. **Add a New Replication Partner:**
   - Right-click on "Replication Partners" and select "New Replication Partner."
   - Enter the name or IPv4 address of the WINS server you want to add as a replication partner.

3. **Configure Replication Settings:**
   - In the details pane, double-click the newly added server.
   - In the "ServerName Properties" dialog box, go to the "Advanced" tab.
   - Set the replication partner type and the pull and push replication settings as needed, then click "OK."

**Figure 12-9:** The Advanced tab for the properties of a WINS replication partner.

### Scheduling Replication

Replication can be configured to occur at the following times:
- **During WINS Server Service Start-Up:**
  - By default, the WINS Server service performs pull replication each time it starts. You can also configure it to perform push replication.
- **At a Configured Time or Interval:**
  - For example, every five hours (pull trigger).
- **When a WINS Server Reaches a Configured Threshold:**
  - For the number of registrations and changes to the WINS database (push trigger). When this threshold is reached, the server notifies all its pull partners, which then request the new entries.
- **Manually Initiate Replication:**
  - Using the WINS snap-in: Right-click the "Replication Partners" node and select "Replicate now." Alternatively, right-click a specific partner and choose either "Start push replication" or "Start pull replication."
  - Using the `netsh wins server init replicate` command.

### Automatic Replication Partners

If your IPv4 network supports multicast forwarding and routing, you can configure the WINS Server service to automatically discover other WINS servers by sending autoconfiguration messages to the multicast IPv4 address `224.0.1.24`. By default, this multicasting occurs every 40 minutes. Discovered WINS servers are automatically set as push and pull replication partners, with pull replication scheduled every two hours.

**Note:** If your IPv4 network does not support multicast forwarding and routing, the WINS server will only find other WINS servers on its local subnet. For more information, see Appendix A, "IP Multicast."

**Enabling Automatic Replication:**
- Select the "Enable Automatic Partner Configuration" check box on the "Advanced" tab for the properties of the "Replication Partners" node in the WINS snap-in.
- Configure the interval for checking new partners and the TTL for multicast packets, which determines how far the packets can travel before being discarded by routers.

### WINS Proxy

A WINS proxy is a WINS client computer configured to act on behalf of non-WINS clients, helping to resolve NetBIOS name queries. WINS proxies are useful in subnets containing NetBIOS broadcast-only (B-node) clients, though they are typically not needed in most Windows-based networks.

#### How WINS Proxies Work

- **Unique Name Registration:**
  - When a non-WINS client attempts to register a unique name, the WINS proxy checks the name against its configured WINS server. If the name exists, the proxy sends a negative Name Registration Response message to the non-WINS client.
- **NetBIOS Name Release:**
  - When a non-WINS client releases a NetBIOS name, the WINS proxy deletes the name from its NetBIOS name cache.
- **Broadcast Name Query:**
  - When a non-WINS client sends a broadcast name query, the WINS proxy attempts to resolve the name using its NetBIOS name cache or by querying its WINS server.

**Figure 12-10:** How a WINS proxy resolves a NetBIOS name for a non-WINS client.

#### Steps for Resolving a NetBIOS Name

1. **Host B broadcasts a NetBIOS Name Query Request message.**
2. **Host A (WINS proxy) receives the message and checks its NetBIOS name cache.**
3. **If Host A has a matching entry, it returns the IPv4 address to Host B. Otherwise, it queries its WINS server.**
4. **If the WINS server can resolve the name, it sends a positive response to Host A.**
5. **Host A updates its cache and sends the response to Host B.**

#### Configuring a WINS Proxy

To enable a Windows computer as a WINS proxy:
- Set the `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\NetBT\Parameters\EnableProxy` registry value to `1` (REG_DWORD).
- Restart the TCP/IP NetBIOS Helper service.

**Note:** Incorrectly editing the registry can severely damage your system. Always back up valuable data before making changes.

For fault tolerance, use two WINS proxies for each subnet containing non-WINS clients.

### Chapter Summary

- **WINS Overview:**
  - WINS is the Windows implementation of a NetBIOS name server, providing a database for dynamic mappings of NetBIOS names to IPv4 addresses.
  - WINS clients register and renew their NetBIOS names with the WINS server, and send queries for name resolution.
  - WINS supports static mappings for non-WINS clients and database replication with other WINS servers.

- **Replication Types:**
  - **Pull Partner:** Requests updated WINS database entries from push partners.
  - **Push Partner:** Notifies pull partners when updated entries are available.

- **WINS Proxy:**
  - Acts on behalf of non-WINS clients to help detect duplicate names and resolve NetBIOS name queries.

### Chapter Glossary

- **DNS (Domain Name System):** A hierarchical, distributed database that maps domain names to IP addresses.
- **DNS Client Resolver Cache:** A RAM-based table containing Hosts file entries and recent DNS query results.
- **Host Name:** The DNS name of a host or interface.
- **Lmhosts File:** A local text file mapping NetBIOS names to IP addresses.
- **NBNS (NetBIOS Name Server):** A server that stores NetBIOS name-to-IP address mappings.
- **NetBIOS Name Cache:** A dynamically maintained table storing recently resolved NetBIOS names.
- **NetBIOS Node Type:** Designation of how NetBIOS nodes resolve names.
- **NetBIOS (Network Basic Input/Output System):** A standard API and protocol for session management and data transport.
- **Pull Partner:** Requests replication from a push partner.
- **Push Partner:** Notifies pull partners of available updates.
- **Static Mapping:** Manually created entries in the WINS database for non-WINS clients.
- **TTL (Time-to-Live):** The duration a NetBIOS name is stored on a WINS server.
- **WINS (Windows Internet Name Service):** Microsoft's implementation of a NetBIOS name server.
- **WINS Client:** Supports NetBIOS name operations using a WINS server.
- **WINS Proxy:** A WINS client configured to act on behalf of non-WINS clients.
- **WINS Server:** A computer running the WINS Server service.

### Chapter 13 â€“ Internet Protocol Security and Packet Filtering

#### Abstract

This chapter covers the support for Internet Protocol security (IPsec) and IP packet filtering in Microsoft Windows operating systems. IPsec provides cryptographic protection for IP packet payloads, while packet filtering specifies which types of packets are received or dropped. Understanding these technologies is crucial for configuring network security and troubleshooting connectivity issues.

#### Chapter Objectives

After completing this chapter, you will be able to:
- Describe the roles of IPsec and packet filtering in protecting network nodes.
- Define IPsec and its uses to block, permit, or protect IP traffic.
- Define packet filtering and its uses to block or permit IP traffic.
- List and describe the security properties of IPsec-protected traffic.
- Explain the functions of the Authentication Header, Encapsulating Security Payload, and Internet Key Exchange IPsec protocols.
- Distinguish between transport mode and tunnel mode.
- Describe the purposes of main mode and quick mode IPsec negotiations.
- Define an IPsec policy in terms of its general settings and rules.
- List and describe the configuration elements of an IPsec rule.
- Describe Windows Firewall and its role in protecting against malicious users and programs.
- Describe Internet Connection Firewall.
- Explain TCP/IP filtering and its configuration.
- Describe the basic IPv6 firewall, IPv6 Internet Connection Firewall, and Windows Firewall for IPv6 packet filtering.

#### IPsec and Packet Filtering Overview

The Internet was designed for open communication, but today's environment requires robust security measures. Computers must protect themselves from malicious users and programs. Both public and private networks need to ensure that sensitive data is cryptographically protected. Windows Vista, Windows XP, Windows Server 2008, and Windows Server 2003 include the following technologies:

- **IPsec:** A framework of open standards for ensuring private, protected communications over IP networks through cryptographic services.
- **Packet Filtering:** The ability to configure interfaces to accept or discard incoming traffic based on criteria such as TCP and UDP ports, source and destination IP addresses, and whether the traffic was requested by the receiving computer.

This chapter will detail these technologies and their support in Windows operating systems.

#### IPsec

The original TCP/IP standards did not include protection for IP packets, making them vulnerable to unauthorized access and modification. IPsec is the long-term solution for protected IP-based networking, providing a key defense against both internal and external attacks. It balances ease of deployment with strong security and aims to:

1. **Protect IP Packets:**
   - Ensure that data transmitted across a network is secure, even if passwords are used to access network resources.