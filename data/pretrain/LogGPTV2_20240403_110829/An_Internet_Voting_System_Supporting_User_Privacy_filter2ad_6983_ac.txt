key for the election using a distributed key generation
protocol.
An authority i logs in, reads h j (the public keys) for
all authorities j ∈ Authsstage1, and the authority threshold
t. The authority creates a polynomial Pi(x) ∈ Zq[x], and
publishes the value Eh j(r j, Pi( j)) for each j ∈ Authsstage1,
where r j ∈R Zq. This serves as a form of encryption
of authority j’s index evaluated in authority i’s poly-
nomial. Finally, he publishes Gi,‘ for ‘ = 0, . . . , t − 1.
Let Authsstage2 ⊆ Authsstage1 be the set of authorities that
have completed this step. If |Authsstage2| < t0, the server
terminates the procedure.
Private key generation. Each authority j ∈ Authsstage2
to the bulletin board server and reads
connects
Eh j(r j, Pi( j)) for all i ∈ Authsstage2. Note that authority
j can decrypt all of these values, as they were encrypted
with his public key. Thus, he retrieves x j (his private
key) from his private memory. He decrypts these val-
ues, computes their sum, and stores the result in private
memory. At this point, authority j has the sum of the
evaluations of his index in every other authority’s poly-
nomial. Let Authsstage3 ⊆ Authsstage2 be the set of author-
ities that have completed this step. If |Authsstage3| < t0,
the server terminates the procedure.
Public key publication. The bulletin board server pub-
i∈Authsstage2 Gi,0. Note that h is the
sum of all of the authorities’ polynomials evaluated at 0.
This value h serves as the public key of the procedure,
which voters will use when they encrypt their ballots.
Voting. Now, the election may begin. A voting timer
is set which will expire when the election duration is
reached. Each voter i downloads the public key h from
the bulletin board, as well as p, q, g, and f . The voter
is permitted to vote between Kmin and Kmax candidates,
where 0 ≤ Kmin ≤ Kmax ≤ L, and L is the total num-
ber of candidates. The voter thus forms a ciphertext for
each candidate, encrypting 1 if the voter votes for that
candidate, and 0 otherwise. The encrypted vote is there-
fore a vector of ciphertexts, one for each candidate, each
lishes the value h = Q
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Figure 2. The stages of an Adder election procedure. Note that the Gatekeeper is involved in
every transaction that requires user authentication.
f ζ+ζ0
, hr+r0
one of the format Vi = (gri , hri f ζi), where ζi ∈ {0, 1}
and ri ∈R Zq. Observe that the encryption satisﬁes
the homomorphic property: (gr, hr f ζ) ⊕ (gr0
) =
(gr+r0
). Along with the encrypted vote, the
voter computes a proof of ballot validity Pi which is a
non-interactive zero-knowledge proof that the encrypted
vote is properly formed, meaning the voter has voted for
the correct number of candidates, and that each cipher-
text is the encryption of either 0 or a 1. Finally, the pair
(Vi, Pi) is posted on the bulletin board.
, hr0
f ζ0
The bulletin board server then veriﬁes the proof. If
the proof is valid, and the voter has not already voted,
it posts the vote and proof on the bulletin board. Other-
wise, it discards the vote and proof and returns an error.
Result tabulation. When duration of the election has
expired, or when an administrator manually ends the
election, result tabulation occurs. The bulletin board
contains received a vote Vi from each voter i. The en-
crypted sum of the votes is computed by the bulletin
board server combining the votes as
mM
V =
Vi,
where ⊕ is the homomorphic operation on votes, and V
is a vector of ciphertexts encrypting the total number of
i=0
votes for each candidate. This combined sum is then
posted on the bulletin board.
Authority decryption. Now, each authority logs in
again, downloads the encrypted result of the election,
and submits his partial decryption. These partial decryp-
tions are posted on the bulletin board.
Result decryption. Once each authority has submit-
ted his partial decryption, the bulletin board server com-
bines the partial decryptions and decrypts the result.
Result publication. The end result is ﬁnally published
on the bulletin board. The election is over, and no more
logins are accepted. Anyone can now view the ﬁnal re-
sult.
3. Electronic voting concerns
After the major controversies with electronic voting,
several scientists came out rather harshly against elec-
tronic voting, and this is understandable given the ﬂaws
in current voting systems. More recently, however, re-
searchers have begun to take a more serious look at cryp-
tographic voting systems and their feasibility, even go-
ing so far as to express optimism about electronic voting
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
1.Procedurecreation:Administrator:Voter:Authority:BulletinBoardpostpublickeygetprivatekey:proceduredata:publickey:allpublickeys:encryptedauthIDs:encryptedvalues:createpolynomial:generatecryptovalues:combineencryptions:combinevalues:publickey:vote+proof:verifyproof:combineallvotes:computeandpostresult:encryptedtotal:partialdecryption10.Resultpublication9.Resultdecryption6.Voting5.Publickeypublication7.Resulttabulation4.Privatekeygeneration8.Authoritydecryption3.Polynomialgeneration2.AuthoritypublickeygenerationProceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006[27]. In this section, we describe how A addresses
common concerns in electronic voting.
3.2. Ballot privacy
3.1. User authentication
A performs user authentication by employing a
Kerberos-like system called the gatekeeper. Actions that
can be performed by users include: creating procedures,
deleting procedures, voting, authority actions, and re-
setting procedures. The gatekeeper keeps a private ta-
ble of user credentials, as well as a private signing key.
When a user wishes to perform an action in the A
system, he authenticates himself (either by password or
public-key authentication where it makes sense and al-
ready exists (e.g., the military) to the gatekeeper. The
gatekeeper then ensures that the user is eligible to per-
form the requested action, and if so, generates a signed
ticket that authorizes the user. The ticket is then pre-
sented to the bulletin board server, which veriﬁes the
gatekeeper’s signature, and allows the user to perform
the requested action. In the implementation this transfer
from the gatekeeper server to the bulletin board server is
essentially transparent from the user’s point of view.
As a result of this authentication system, A
achieves a realization of the bulletin board as an entity
that holds no secrets, but solely enforces constraints on
the posting of messages and ensures the integrity of the
election audit trail. Secret data is separated into the gate-
keeper component of the system. The bulletin board,
which holds all data relevant to the election, is thus in
complete public view. Furthermore, it is possible to have
several gatekeepers, each responsible for authenticating
one segment of users, or as a measure of redundancy in
case of failure. At the same time the database of the
bulletin board server can also be replicated.
To enter users into the system, the administrator pro-
vides the gatekeeper with a list of names and email ad-
dresses. The system can then randomly generate pass-
words and email the users their respective credentials.
Additionally, printed letters can be produced, if admin-
istrators would like to notify users by mail.
If voter
anonymity is desired, voter identiﬁers can be assigned
randomly by the gatekeeper and the system can use those
instead of any identifying information (pseudonymity).
The identity of the voter can be authenticated, but cannot
be known without collusion between the bulletin board
server and the gatekeeper. Random user identiﬁers may
be assigned independently of the bulletin board server,
so that even if the votes are one day compromised, the
identity of the user cannot be learned or proved directly
from the bulletin board data.
In most elections, it is crucial that the privacy of each
voter is maintained. It should not be possible for anyone
to determine how each voter voted. This is in conﬂict
with the goal of universal veriﬁability, since determin-
ing that each voter voted correctly and tallying the votes
both require access to the votes themselves. To address
this problem, A corrects these problems by employ-
ing homomorphic encryption techniques. An encryp-
tion function E is homomorphic if, given E(x1),E(x2),
where x1 and x2 are plaintexts, it is possible to compute
E(x1 + x2). That is, there is an operation ⊕ such that
E(x1) ⊕ E(x2) = E(x1 + x2). Given a homomorphic en-
cryption function, it is possible to add a sequence of en-
crypted votes without being able to read the votes them-
selves. Thus, once all of the votes are cast, independent
third parties can perform the summation themselves.
3.3. Universal veriﬁability
The A system is designed to be universally veri-
ﬁable. All data present on the bulletin board are publicly
viewable. The bulletin board server runs with a special
read-only account designated for auditors. The free and
open source veriﬁcation suite that accompanies the sys-
tem performs the following tasks:
1. Tallying of the encrypted ballots. Since homomor-
phic encryption is used, there is no need to possess
a private key to add the votes. All that is required
are the encrypted ballots themselves. The veriﬁ-
cation suite repeats the server-executed encrypted
ballot aggregation.
2. Veriﬁcation of all proofs. Proofs of ballot validity
are checked for each voter.
3. Decryption of the ﬁnal tally. Once all of the au-
thorities have ﬁnished submitting their partial de-
cryptions, the veriﬁcation suite recomputes the La-
grange coeﬃcients and decrypts the ﬁnal sum.
4. Veriﬁcation of the hash chain. In order to enforce
the integrity of the bulletin board and causality of
events, we employ a hash chain. A hash of the
database is computed at the start of an election, and
stored in the database. At frequent intervals (say,
every ﬁve minutes), a new hash is computed, incor-
porating the previous hash. If anyone is to tamper
with the database, it must be done between hash
snapshots, since each successive hash guarantees
the integrity of every snapshot that has occurred
before it. The hash chain is veriﬁable since each
ballot in the database is accompanied by a time-
stamp. The entire history of the database can then
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006be reconstructed, and the hash chain can be com-
puted and compared with the published value.
3.4. Voter veriﬁability
Voter veriﬁability is a common concern in elec-
tronic voting systems. Many direct recording electronic
(DRE) systems use a voter-veriﬁable paper audit trail
(VVPAT). Before the vote is counted in the machine,
a paper conﬁrmation containing the voter’s ballot is
printed and displayed to the voter. If the voter agrees
with the print-out, he indicates this to the machine, and
the paper ballot is dropped into a tamper-proof box. If
the voter disagrees with the print-out, the paper ballot
is discarded, and the voter can re-vote. The goal of a
VVPAT is to ensure that there exists a paper record of
every vote that is counted by the electronic machines.
Furthermore, each item in the paper trail has been cer-
tiﬁed by the voter who cast it. If the electronic tally is
disputed, it is thus possible to perform a manual recount
of the votes by inspecting the paper trail.
The focus of the A system is on providing a
strong cryptographic solution to electronic voting. As
such, we feel that voter veriﬁability remains an orthog-
onal concern. If A is used in a controlled setting,
at a designated polling place, it is an easy matter to add
a VVPAT component. However, it must be noted that
VVPAT makes no sense in the context of remote Internet
voting. Since voting is performed on the voter’s com-
puter, it is not possible for an authentic paper trail to be
maintained. It thus remains the decision of the organiza-
tion conducting the election whether or not a VVPAT is a