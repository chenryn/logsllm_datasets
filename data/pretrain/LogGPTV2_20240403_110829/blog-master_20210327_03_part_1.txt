## PostgreSQL hint pg_hint_plan 的详细用法      
### 作者                
digoal                
### 日期                
2021-03-27                
### 标签                
PostgreSQL , hint      
----                
## 背景        
https://github.com/ossc-db/pg_hint_plan    
选择和PostgreSQL版本对应的branch  
## 支持哪些hint    
https://github.com/ossc-db/pg_hint_plan/blob/PG13/pg_hint_plan.c  
hint的使用格式  
```  
#define BLOCK_COMMENT_START		"/*"  
#define BLOCK_COMMENT_END		"*/"  
#define HINT_COMMENT_KEYWORD	"+"  
#define HINT_START				BLOCK_COMMENT_START HINT_COMMENT_KEYWORD  
#define HINT_END				BLOCK_COMMENT_END  
```  
hint 关键字  
```  
/* hint keywords */  
#define HINT_SEQSCAN			"SeqScan"  
#define HINT_INDEXSCAN			"IndexScan"  
#define HINT_INDEXSCANREGEXP	"IndexScanRegexp"  使用正则表示要用哪些索引, 居然没有不使用哪些索引, 也许未来会支持  
#define HINT_BITMAPSCAN			"BitmapScan"  
#define HINT_BITMAPSCANREGEXP	"BitmapScanRegexp"  使用正则表示要用哪些索引, 居然没有不使用哪些索引, 也许未来会支持  
#define HINT_TIDSCAN			"TidScan"  
#define HINT_NOSEQSCAN			"NoSeqScan"  
#define HINT_NOINDEXSCAN		"NoIndexScan"  
#define HINT_NOBITMAPSCAN		"NoBitmapScan"  
#define HINT_NOTIDSCAN			"NoTidScan"  
#define HINT_INDEXONLYSCAN		"IndexOnlyScan"  
#define HINT_INDEXONLYSCANREGEXP	"IndexOnlyScanRegexp"   使用正则表示要用哪些索引, 居然没有不使用哪些索引, 也许未来会支持  
#define HINT_NOINDEXONLYSCAN	"NoIndexOnlyScan"  
#define HINT_PARALLEL			"Parallel"    
#define HINT_NESTLOOP			"NestLoop"  JOIN方法  
#define HINT_MERGEJOIN			"MergeJoin"  JOIN方法  
#define HINT_HASHJOIN			"HashJoin"  JOIN方法  
#define HINT_NONESTLOOP			"NoNestLoop"    
#define HINT_NOMERGEJOIN		"NoMergeJoin"    
#define HINT_NOHASHJOIN			"NoHashJoin"    
#define HINT_LEADING			"Leading"  JOIN的驱动顺序  
#define HINT_SET				"Set"   设置参数  
#define HINT_ROWS				"Rows"  设置评估为多少行  
```  
## 用法  
这里有所有hint关键字的例子, 为了方便识别hint模块是否已使用, 明确用了哪些hint, 可以开启一些日志开关  
```  
SET client_min_messages TO log;  
\set SHOW_CONTEXT always  
\set VERBOSITY verbose  
LOAD 'pg_hint_plan';  
SET pg_hint_plan.debug_print TO on;  
/*+ hint内容 */ SQL ;   
```  
https://github.com/ossc-db/pg_hint_plan/blob/PG13/expected/pg_hint_plan.out  
```  
SET search_path TO public;  
SET client_min_messages TO log;  
\set SHOW_CONTEXT always  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.val = t2.val;  
           QUERY PLAN             
--------------------------------  
 Hash Join  
   Hash Cond: (t2.val = t1.val)  
   ->  Seq Scan on t2  
   ->  Hash  
         ->  Seq Scan on t1  
(5 rows)  
LOAD 'pg_hint_plan';  
SET pg_hint_plan.debug_print TO on;  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.val = t2.val;  
           QUERY PLAN             
--------------------------------  
 Hash Join  
   Hash Cond: (t2.val = t1.val)  
   ->  Seq Scan on t2  
   ->  Hash  
         ->  Seq Scan on t1  
(5 rows)  
/*+ Test (t1 t2) */  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
INFO:  pg_hint_plan: hint syntax error at or near "Test (t1 t2) "  
DETAIL:  Unrecognized hint keyword "Test".  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
SET pg_hint_plan.enable_hint TO off;  
/*+ Test (t1 t2) */  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
SET pg_hint_plan.enable_hint TO on;  
/*Set(enable_indexscan off)*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
--+Set(enable_indexscan off)  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
/*+Set(enable_indexscan off) /* nest comment */ */  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
INFO:  pg_hint_plan: hint syntax error at or near "/* nest comment */ */  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;"  
DETAIL:  Nested block comments are not supported.  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
/*+Set(enable_indexscan off)*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(enable_indexscan off)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN            
------------------------------  
 Hash Join  
   Hash Cond: (t1.id = t2.id)  
   ->  Seq Scan on t1  
   ->  Hash  
         ->  Seq Scan on t2  
(5 rows)  
EXPLAIN (COSTS false) /*+Set(enable_indexscan off)*/  
 SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(enable_indexscan off)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN            
------------------------------  
 Hash Join  
   Hash Cond: (t1.id = t2.id)  
   ->  Seq Scan on t1  
   ->  Hash  
         ->  Seq Scan on t2  
(5 rows)  
/*+ Set(enable_indexscan off) Set(enable_hashjoin off) */  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(enable_hashjoin off)  
Set(enable_indexscan off)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN             
-------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Sort  
         Sort Key: t1.id  
         ->  Seq Scan on t1  
   ->  Sort  
         Sort Key: t2.id  
         ->  Seq Scan on t2  
(8 rows)  
/*+ 	 Set 	 ( 	 enable_indexscan 	 off 	 ) 	 */  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(enable_indexscan off)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN            
------------------------------  
 Hash Join  
   Hash Cond: (t1.id = t2.id)  
   ->  Seq Scan on t1  
   ->  Hash  
         ->  Seq Scan on t2  
(5 rows)  
/*+ 	   
	 	Set 	   
	 	( 	   
	 	enable_indexscan 	   
	 	off 	   
	 	) 	   
	 	*/	 	  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(enable_indexscan off)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN            
------------------------------  
 Hash Join  
   Hash Cond: (t1.id = t2.id)  
   ->  Seq Scan on t1  
   ->  Hash  
         ->  Seq Scan on t2  
(5 rows)  
/*+ Set(enable_indexscan off)Set(enable_nestloop off)Set(enable_mergejoin off)	 	  
	 	Set(enable_seqscan off)  
	 	*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(enable_indexscan off)  
Set(enable_mergejoin off)  
Set(enable_nestloop off)  
Set(enable_seqscan off)  
not used hint:  
duplication hint:  
error hint:  
                 QUERY PLAN                   
--------------------------------------------  
 Hash Join  
   Hash Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Hash  
         ->  Index Scan using t2_pkey on t2  
(5 rows)  
/*+Set(work_mem "1M")*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
INFO:  invalid value for parameter "work_mem": "1M"  
HINT:  Valid units for this parameter are "B", "kB", "MB", "GB", and "TB".  
LOG:  pg_hint_plan:  
used hint:  
not used hint:  
duplication hint:  
error hint:  
Set(work_mem 1M)  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
/*+Set(work_mem "1MB")*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
LOG:  pg_hint_plan:  
used hint:  
Set(work_mem 1MB)  
not used hint:  
duplication hint:  
error hint:  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
/*+Set(work_mem TO "1MB")*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
INFO:  pg_hint_plan: hint syntax error at or near "Set(work_mem TO "1MB")"  
DETAIL:  Set hint requires name and value of GUC parameter.  
LOG:  pg_hint_plan:  
used hint:  
not used hint:  
duplication hint:  
error hint:  
Set(work_mem TO 1MB)  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  