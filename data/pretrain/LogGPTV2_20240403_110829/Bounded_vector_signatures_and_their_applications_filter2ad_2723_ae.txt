is essentially a root of the hash of the context, with the
components of the vector determining the depth of the root.
B will embed his Strong RSA instance into the hash value
so that a forgery by A will be helpful to him to solve his
problem.
Notice that at the end of the initialization phase, B guesses
which type of forger he is facing. The reason that we con-
sider these two types separately is that the shrink unforge-
ability deﬁnition treats these two situations diﬀerently. In-
deed, our construction prohibits an adversary who obtains
partial signatures from less than t signing oracles to gener-
ate a full signature on any vector-context pair, regardless of
A’s queries. In this case, a forgery on any vector would be
considered a valid forgery. On the other hand, if the forger
obtains partial signatures from t or more signing oracles on
c∗, then he is legitimately capable of producing full signa-
tures on pairs (v, c∗) with each component of v equal or
greater than the tth smallest among each component of the
vectors he queried on c∗.
In this case, only a forgery on
a vector in which at least one component is less than the
tth smallest queried in that dimension is considered a valid
forgery by A.
A.1
Interacting with Type 1 Forger
The basic strategy of B is to embed the Strong RSA in-
stance into the hash value of c∗ in a way that will enable him
to solve his Strong RSA problem if A does output a forgery
on a pair (v, c∗). The hash and signing oracles operate as
follows in this scenario.
Hash Oracle H(c) (Type 1) :
1. If c = c∗: B returns H(c) = y and records (c,H(c)) to
answer future queries.
2. If c (cid:54)= c∗:
(a) If c was previously queried, return H(c).
H(c) = r2·Qd
(b) Otherwise, B selects a random r $← Z∗
N , returns
k mod N , and records (c, r,H(c)).
The extra squaring on the exponent is to make sure
the hash value is in the QRN group.
k=1 e
ˆv+1
Signing Oraclei(v, c) (Type 1) :
1. If c = c∗:
2. If c (cid:54)= c∗:
i
Qd
$← {0, . . . ,(cid:98)N/4(cid:99) − 1} and returns
(a) Regardless of whether this oracle is KEYLESS or
KEYED, if no signature query on c∗ has been made
to this oracle, B picks a new secret signing key
sk(cid:48)
σi = H(c)(n!)sk(cid:48)
It stores the
newly generated secret key for signing future queries
(v, c∗).
(b) If there has been a signature query on c∗ made
to this oracle, B uses the previously selected new
secret signing key sk(cid:48)
σi = H(c)(n!)sk(cid:48)
k=1 e
i to return
v[k]
k mod N .
v[k]
k mod N .
Qd
k=1 e
i
i
k=1 e
Qd
computes the intended full signature
(a) If this oracle is KEYED, B returns
v[k]
k mod N .
σi = H(c)(n!)sk i
(b) If this oracle is KEYLESS, B makes use of a well
formed full signature and t − 1 secret signing keys
to interpolate the proper signature share to return
by using the technique described in [38] :
i. B ﬁnds the entry (c, r) in the hash table. He
σ = r2·Qd
v[k]
k mod N on (v, c). It is easy to
Q
ii. B then computes modiﬁed Lagrange coeﬃcients
Q
j(cid:48)(cid:54)=j (i−ij(cid:48) )
j(cid:48)(cid:54)=j (ij−ij(cid:48) ) for each signing key
(n!)λij = (n!)
Q
sk ij , j = 1, . . . , t − 1, to which he has access
Q
j(cid:48) (i−ij(cid:48) )
j(cid:48) (0−ij(cid:48) ) .
and (n!)λ0 = (n!)
Qd
iii. Finally, B returns σi =
j=1 H(c)(n!)λij
σ(n!)λ0·Qt−1
verify the validity of this signature.
v[k]
k mod N as
k=1 e
k=1 e
sk ij
the partial signature for (v, c).
The major diﬃculty in dealing with a Type 1 forger is
that B does not know in advance which signing oracles A
If A asks for a sig-
is going to query for the context c∗.
nature on a pair (v, c∗) to a KEYLESS oracle, then B will
not be able to answer it using the keys sk i1 , . . . , sk it−1 . Our
strategy is to let B dynamically select a new set of t − 1
random secret signing keys for the oracles that A queries
for the guessed context c∗. B can then use the t − 1 new
signing keys to answer partial signatures for the oracle even
if it was a KEYLESS oracle. Although this strategy seems to
have solved the problem, there is a caveat. Since we changed
the signing key of some oracles when answering signature re-
quests on c∗, it could happen that one KEYED oracle used
its original signing key to return signature queries on other
contexts, but used the new signing key to sign on c∗. Thus,
the distribution of the simulation will diﬀer in this respect
from the real protocol. However, as we will show in Lemma 1
from Section A.3, the distributions are indistinguishable un-
der a variant of the DDH assumption in the group QRN .
In the end, A outputs a forgery σ(cid:48) on the pair (v(cid:48), c(cid:48)).
Suppose B made the correct guess on context c(cid:48) (i.e., c(cid:48) =
k
k=1 e
ˆv−v(cid:48)[k]+1
k=1 eˆv−v(cid:48)[k]+1
σ(cid:48)Qd
to beQd
c∗). If the forgery is a valid signature, then we should have
= H(c(cid:48)) = y. It is easy to see that B has
solved his Strong RSA problem by choosing x to be σ(cid:48) and e
. Now, we bound the probability that
B is able to solve the Strong RSA problem when facing a
Type 1 forger. We use AT ype1 to denote the event that A is
a Type 1 forger, and E1 to represent the event that a Type
1 forger successfully outputs a forgery under our simulated
view.
k
Pr
hB wins | AT ype1i
hB wins | AT ype1 ∧ E1
i · Pr [ E1 ]
In our simulation, PrˆB wins | AT ype1 ∧ E1
· Pr [ E1 ]
= Pr
1
qh
=
(1)
˜ is contin-
gent upon B’s ability to guess the context within which to
embed the Strong RSA problem instance, which occurs with
probability at least 1
, where qh is the total number of hash
qh
queries made during the simulation. Pr [ E1 ] is aﬀected by
the advantage of AT ype1 in distinguishing the simulated and
real distributions from Lemma 1. We show in Section A.3
that
Pr [ E1 ] ≥ AdvSU-CMA
(AT ype1) − (t − 1) · AdvDDH(D) (2)
where D is a DDH adversary taking the same time (asymp-
totically) as B. By substituting this into (1), we get the
bound of the probability that B solves the Strong RSA in-
stance with a Type 1 forger:
BVS
hB wins | AT ype1i
(3)
BVS
· (AdvSU-CMA
Pr
≥ 1
qh
Interacting with Type 2 Forger
(AT ype1) − (t − 1) · AdvDDH(D))
A.2
In this scenario, B still makes a guess at the hash query
h∗ containing the context c∗ that forger A is going to forge
on as before. However, B also guesses a dimension k∗ $←
{1, . . . , d} within which the adversary A will violate shrink
unforgeability, and a value v∗ $← {1, . . . , ˆv} which the forgery
in that dimension will be less than. B will embed his Strong
RSA instance into the hash value of c∗ in a way that limits
his ability to answer signature queries on values less than
v∗ in dimension k∗ on c∗, but ensures that he would be
able to make use of forgeries in that dimension to solve his
Strong RSA problem. No such limitation exists for other
components of the signed vectors. The hash and signing
oracles operate as follows.
Hash Oracle H(c) (Type 2) :
1. If c = c∗:
Q
(a) B embeds the strong RSA instance into the re-
sponse. He returns H(c) = ye
ˆv+1
k mod
N and records (c,H(c)) to answer future queries.
Note that by setting the hash value c in this way,
whenever A makes a signing query on a pair (v, c(cid:48))
such that c(cid:48) = c, B is able to answer it only if
v[k∗] ≥ v∗.
ˆv−v∗+1
k∗
k(cid:54)=k∗ e
2. If c (cid:54)= c∗:
(a) If c was previously queried, B returns H(c).
(b) Otherwise, B selects a random r $← Z∗
N , returns
k=1 e
ˆv+1
k
, and records (c, r,H(c)).
H(c) = r2·Qd
Signing Oraclei(v, c) (Type 2) :
1. If this oracle is KEYED, B returns
v[k]
k mod N .
σi = H(c)(n!)sk i
Qd
k=1 e
2. If this oracle is KEYLESS and v[k∗] < v∗, then B aborts
since it is unable to provide the appropriate signature.
3. If this oracle is KEYLESS and v[k∗] ≥ v∗, B makes use
of a well formed full signature and t − 1 secret sign-
ing keys to interpolate the proper signature share to
return.
It uses exactly the same interpolation tech-
nique described in the signing oracle speciﬁcation of a
KEYLESS oracle for Type 1 forger.
Assuming that B does not abort, A will output a forgery
σ(cid:48) on the vector-context pair (v(cid:48), c(cid:48)) such that at least one
component in v(cid:48) is less than vc(cid:48)
t [k], which was deﬁned in
Deﬁnition 1 from Section 2. The adversary B checks that
Verify(pk , σ(cid:48), (v(cid:48), c(cid:48))) = 1, that c(cid:48) = c∗, and that v(cid:48)[k∗] <
v∗. In other words, B has made the correct guesses on the
context c∗ and the dimension k∗ of the forgery, and the
output value on dimension k∗ is less than v∗. If any of these
checks fail, B aborts.
If A has produced a valid forgery, then the veriﬁcation
condition should hold:
ˆv−v(cid:48)[k]+1
(cid:48)Qd
k=1 e
k
σ
= H(c
(cid:48)
) = ye
ˆv−v∗+1
k∗
Q
k(cid:54)=k∗ e
ˆv+1
k
k
k
k
(cid:48)e
k∗
k∗
= y
Rearranging both sides gives us:
Q
k(cid:54)=k∗ ev(cid:48)[k]
v(cid:48)[k]
k(cid:54)=k∗ e
+ βQ
,Q
k(cid:54)=k∗ ev(cid:48)[k]
v∗−v(cid:48)[k∗]
k∗
σ
Since gcd(ev∗−v(cid:48)[k∗]
) = 1, B can then use the
extended Euclidean algorithm to compute α, β such that
αev∗−v(cid:48)[k∗]
= 1. The Strong RSA problem
is then solved by setting x = yα · σ(cid:48)β and e = ev∗−v(cid:48)[k∗]
The probability of our constructed Strong RSA adversary