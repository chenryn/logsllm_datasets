## 0x00 Environment
  1. Download OSR Loader 3.0：[OSROnline](http://www.osronline.com/OsrDown.cfm/osrloaderv30.zip?name=osrloaderv30.zip&id=157)
  2. Download HEVD Source Code & HEVD_3.0：[Github](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver/releases/tag/v3.00)
搭建Windbg+VMware双机调试环境可参阅[配置WinDbg,调试操作系统(双机调试)](https://d1nn3r.github.io/2019/02/23/windbgConnectVM/)一文，笔者最终使用环境如下：
  * 物理机OS：Windows 10 20H2 x64
  * 物理机WinDbg：10.0.17134.1
  * 虚拟机OS：Windows 7 SP1 x86
  * VMware：VMware Workstation 15 Pro
  * Visual Studio 2019
## 0x01 Foundation Knowledge
关于编写驱动程序微软提供[示例](https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver)偏简单，故笔者从Github上找到另一[示例](https://gist.github.com/hasherezade/ee1a1914dfa2920c77e82fd52717a8fb)。如何安装WDK，创建项目及添加源文件不再赘述，可参阅[微软示例](https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver)。驱动程序中源文件代码如下：
    // Sample "Hello World" driver
    // creates a HelloDev, that expects one IOCTL
    #include 
    #define HELLO_DRV_IOCTL CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)   //#define CTL_CODE(DeviceType, Function, Method, Access) (  ((DeviceType) 
    /// IRP Not Implemented Handler
    /// 
    /// The pointer to DEVICE_OBJECT
    /// The pointer to IRP
    /// NTSTATUS
    NTSTATUS IrpNotImplementedHandler(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp) {
        Irp->IoStatus.Information = 0;
        Irp->IoStatus.Status = STATUS_NOT_SUPPORTED;
        UNREFERENCED_PARAMETER(DeviceObject);
        PAGED_CODE();
        // Complete the request
        IoCompleteRequest(Irp, IO_NO_INCREMENT);
        return STATUS_NOT_SUPPORTED;
    }
    /// 
    /// IRP Create Close Handler
    /// 
    /// The pointer to DEVICE_OBJECT
    /// The pointer to IRP
    /// NTSTATUS
    NTSTATUS IrpCreateCloseHandler(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp) {
        Irp->IoStatus.Information = 0;
        Irp->IoStatus.Status = STATUS_SUCCESS;
        UNREFERENCED_PARAMETER(DeviceObject);
        PAGED_CODE();
        // Complete the request
        IoCompleteRequest(Irp, IO_NO_INCREMENT);
        return STATUS_SUCCESS;
    }
    /// 
    /// IRP Unload Handler
    /// 
    /// The pointer to DEVICE_OBJECT
    /// NTSTATUS
    VOID IrpUnloadHandler(IN PDRIVER_OBJECT DriverObject) {
        UNICODE_STRING DosDeviceName = { 0 };
        PAGED_CODE();
        RtlInitUnicodeString(&DosDeviceName, DOS_DEV_NAME);
        // Delete the symbolic link
        IoDeleteSymbolicLink(&DosDeviceName);
        // Delete the device
        IoDeleteDevice(DriverObject->DeviceObject);
        DbgPrint("[!] Hello Driver Unloaded\n");
    }
    /// 
    /// IRP Device IoCtl Handler
    /// 
    /// The pointer to DEVICE_OBJECT
    /// The pointer to IRP
    /// NTSTATUS
    NTSTATUS IrpDeviceIoCtlHandler(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp) {
        ULONG IoControlCode = 0;
        PIO_STACK_LOCATION IrpSp = NULL;
        NTSTATUS Status = STATUS_NOT_SUPPORTED;
        UNREFERENCED_PARAMETER(DeviceObject);
        PAGED_CODE();
        IrpSp = IoGetCurrentIrpStackLocation(Irp);
        IoControlCode = IrpSp->Parameters.DeviceIoControl.IoControlCode;
        if (IrpSp) {
            switch (IoControlCode) {
            case HELLO_DRV_IOCTL:
                DbgPrint("[] Hello from the Driver!\n");
                break;
            default:
                DbgPrint("[-] Invalid IOCTL Code: 0x%X\n", IoControlCode);
                Status = STATUS_INVALID_DEVICE_REQUEST;
                break;
            }
        }
        Irp->IoStatus.Status = Status;
        Irp->IoStatus.Information = 0;
        // Complete the request
        IoCompleteRequest(Irp, IO_NO_INCREMENT);
        return Status;
    }
    NTSTATUS DriverEntry(IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegistryPath) {
        UINT32 i = 0;
        PDEVICE_OBJECT DeviceObject = NULL;
        NTSTATUS Status = STATUS_UNSUCCESSFUL;
        UNICODE_STRING DeviceName, DosDeviceName = { 0 };
        UNREFERENCED_PARAMETER(RegistryPath);
        PAGED_CODE();
        RtlInitUnicodeString(&DeviceName, DEV_NAME);
        RtlInitUnicodeString(&DosDeviceName, DOS_DEV_NAME);
        DbgPrint("[*] In DriverEntry\n");
        // Create the device
        Status = IoCreateDevice(DriverObject,
            0,
            &DeviceName,
            FILE_DEVICE_UNKNOWN,
            FILE_DEVICE_SECURE_OPEN,
            FALSE,
            &DeviceObject);
        if (!NT_SUCCESS(Status)) {
            if (DeviceObject) {
                // Delete the device
                IoDeleteDevice(DeviceObject);
            }
            DbgPrint("[-] Error Initializing HelloDriver\n");
            return Status;
        }
        // Assign the IRP handlers
        for (i = 0; i MajorFunction[i] = IrpNotImplementedHandler;
    #pragma warning(pop)
        }
        // Assign the IRP handlers for Create, Close and Device Control
        DriverObject->MajorFunction[IRP_MJ_CREATE] = IrpCreateCloseHandler;
        DriverObject->MajorFunction[IRP_MJ_CLOSE] = IrpCreateCloseHandler;
        DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceIoCtlHandler;
        // Assign the driver Unload routine
        DriverObject->DriverUnload = IrpUnloadHandler;
        // Set the flags
        DeviceObject->Flags |= DO_DIRECT_IO;
        DeviceObject->Flags &= ~DO_DEVICE_INITIALIZING;
        // Create the symbolic link
        Status = IoCreateSymbolicLink(&DosDeviceName, &DeviceName);
        // Show the banner
        DbgPrint("[!] HelloDriver Loaded\n");
        return Status;
    }
禁用Spectre缓解：
修改目标系统版本及平台：
生成后将所有文件复制进虚拟机。尽管微软推荐使用[PnPUtil](https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/pnputil)进行驱动安装，但其于Win7系统下提供功能极少：
故笔者采用OSRLoader进行驱动安装及启用：
WinDbg中查看，加载成功：
之后编译主程序，其负责向驱动程序发出请求：
    // Sample app that talks with the HelloDev (Hello World driver)
    #include 
    #include 
    #define HELLO_DRV_IOCTL CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
    const char kDevName[] = "\\\\.\\HelloDev";
    HANDLE open_device(const char* device_name)
    {
        HANDLE device = CreateFileA(device_name,
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL
        );
        return device;
    }
    void close_device(HANDLE device)
    {
        CloseHandle(device);
    }
    BOOL send_ioctl(HANDLE device, DWORD ioctl_code)
    {
        //prepare input buffer:
        DWORD bufSize = 0x4;
        BYTE* inBuffer = (BYTE*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, bufSize);
        //fill the buffer with some content:
        RtlFillMemory(inBuffer, bufSize, 'A');
        DWORD size_returned = 0;
        BOOL is_ok = DeviceIoControl(device,
            ioctl_code,
            inBuffer,
            bufSize,
            NULL, //outBuffer -> None
            0, //outBuffer size -> 0
            &size_returned,
            NULL
        );
        //release the input bufffer:
        HeapFree(GetProcessHeap(), 0, (LPVOID)inBuffer);
        return is_ok;
    }
    int main()
    {
        HANDLE dev = open_device(kDevName);
        if (dev == INVALID_HANDLE_VALUE) {
            printf("Failed!\n");
            system("pause");
            return -1;
        }
        send_ioctl(dev, HELLO_DRV_IOCTL);
        close_device(dev);
        system("pause");
        return 0;
    }
编译完成后复制进虚拟机。WinDbg执行`ed nt!Kd_Default_Mask
8`命令，如此一来便可查看`DbgPrint`函数输出结果。执行虚拟机中主程序：
下面于WinDbg中查看由主程序`DeviceIoControl`函数执行到驱动程序`IrpDeviceIoCtlHandler`函数经过哪些函数。首先于驱动程序`IrpDeviceIoCtlHandler`函数处设断，虚拟机中执行主程序，成功断下后`kb`命令输出结果：
    00 9998dafc 83e7f593 88593e20 885a5738 885a5738 KMDFHelloWorld!IrpDeviceIoCtlHandler
    01 9998db14 8407399f 866b0430 885a5738 885a57a8 nt!IofCallDriver+0x63
    02 9998db34 84076b71 88593e20 866b0430 00000000 nt!IopSynchronousServiceTail+0x1f8
    03 9998dbd0 840bd3f4 88593e20 885a5738 00000000 nt!IopXxxControlFile+0x6aa
    04 9998dc04 83e861ea 00000020 00000000 00000000 nt!NtDeviceIoControlFile+0x2a
    05 9998dc04 770a70b4 00000020 00000000 00000000 nt!KiFastCallEntry+0x12a
    06 0013f9a8 770a5864 752f989d 00000020 00000000 ntdll!KiFastSystemCallRet
    07 0013f9ac 752f989d 00000020 00000000 00000000 ntdll!ZwDeviceIoControlFile+0xc
    08 0013fa0c 75e1a671 00000020 00222003 001a2630 KernelBase!DeviceIoControl+0xf6
    09 0013fa38 00d21929 00000020 00222003 001a2630 kernel32!DeviceIoControlImplementation+0x80
其中0x00d21929地址对应主程序中`cmp esi, esp`(`call ds:__imp__DeviceIoControl@32`下一条指令)：
其传递给`KernelBase!DeviceIoControl`第二个参数0x00222003即驱动程序`IrpDeviceIoCtlHandler`函数中switch判断的`IoControlCode`：
## 0x02 HEVD—Stack Overflow
首先查看HEVD源码，其源码位于`HackSysExtremeVulnerableDriver-3.00\Driver\HEVD`目录下。HackSysExtremeVulnerableDriver.c文件与上述部分驱动程序示例结构类似，不再另行赘述。本节对其BufferOverflowStack.c文件：
    #include "BufferOverflowStack.h"
    #ifdef ALLOC_PRAGMA
    #pragma alloc_text(PAGE, TriggerBufferOverflowStack)
    #pragma alloc_text(PAGE, BufferOverflowStackIoctlHandler)
    #endif // ALLOC_PRAGMA
    /// 
    /// Trigger the buffer overflow in Stack Vulnerability
    /// 
    /// The pointer to user mode buffer
    /// Size of the user mode buffer
    /// NTSTATUS
    __declspec(safebuffers)
    NTSTATUS
    TriggerBufferOverflowStack(
        _In_ PVOID UserBuffer,
        _In_ SIZE_T Size
    )
    {
        NTSTATUS Status = STATUS_SUCCESS;
        ULONG KernelBuffer[BUFFER_SIZE] = { 0 };
        PAGED_CODE();
        __try
        {
            //
            // Verify if the buffer resides in user mode
            //
            ProbeForRead(UserBuffer, sizeof(KernelBuffer), (ULONG)__alignof(UCHAR));
            DbgPrint("[+] UserBuffer: 0x%p\n", UserBuffer);
            DbgPrint("[+] UserBuffer Size: 0x%X\n", Size);
            DbgPrint("[+] KernelBuffer: 0x%p\n", &KernelBuffer);
            DbgPrint("[+] KernelBuffer Size: 0x%X\n", sizeof(KernelBuffer));
    #ifdef SECURE
            //
            // Secure Note: This is secure because the developer is passing a size
            // equal to size of KernelBuffer to RtlCopyMemory()/memcpy(). Hence,
            // there will be no overflow
            //
            RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, sizeof(KernelBuffer));
    #else
            DbgPrint("[+] Triggering Buffer Overflow in Stack\n");
            //
            // Vulnerability Note: This is a vanilla Stack based Overflow vulnerability
            // because the developer is passing the user supplied size directly to
            // RtlCopyMemory()/memcpy() without validating if the size is greater or
            // equal to the size of KernelBuffer
            //
            RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size);