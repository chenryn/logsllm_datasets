段表以后就是一个个的段的实际内容了，我们在分析ELF文件的过程中已经分析过代
码段、数据段和BSS段的内容及它们的存储方式，COFF中这儿个段的内容与ELF中儿乎
一样，我们在这里也不详细介绍了。在这里我们准备介绍两个ELF文件中不存在的段，这
两个段就是“drectve”段和“debugSS”段。
5.3
链接指示信息
SECTION HEADER #1
.drectve name
0 physical address
18 size of raw data
0 virtual address
DC file pointer to raw data (000000Dc to 000000F3)
0 file pointer to line numbers
0 file pointer to relocation table
0 number of relocations
0 number of 1ine numbers
100A00 flags
Info
1 byte align
Remove
RAW DATA #1
00000000: 20 20 20 2F 44 45 46 41 55 4C 54 4C 49 42 3A 22
/DBPAULTLIB: *
00000010: 4C 49 42 43 4D 54 22 20
LIBCMT*
Linker Directives
/DEFAULTLIB: *LIBCMT*
“.drectve段”实际上是“Directive”的缩写，它的内容是编译器传递给链接器的指令
程序员的自我修养一链接、装载与库
---
## Page 163
140
第5章Windows PE/COFF
（Directive），即编译器希望告诉链接器应该怎样链接这个目标文件，段名后面就是段的属
性，包括地址、长度、位置等我们这些在分析ELF时已经很熟知的属性，最后一个属性是
标志位“flags”，即 IMAGE_SECTION_HEADERS 里面的 Characteristics 成员。“.drectve”
段的标志位为“0x100A00"，它是表5-2中的标志位的组合。
表5-2
标志位
定义
意义
0x00100000
IMAGE_SCN_ALIGN_1BYTES
1个字节对齐，相当于不对齐
0x00000800
IMAGE_SCN_LNK_REMOVE
最终链接成映像文件时据弃该段
0x00000200
IMAGE_SCN_LNK_INFO
该段包含的是注释或其他信息
“dumpbin”已经为我们打印出了标志位的三个组合属性：Info、Remove、1byte align。
即该段是信息段，并非程序数据：该段可以在最后链接成可执行文件的时候被抛弃：该段在
文件中的对齐方式是1个字节对齐。
输出信息中紧随其后的是该段在文件中的原始数据（RAWDATA#1，用十六进制显示
的原始数据及相应的ASCll字符）。“dumpbin”知道该段是个“drectve”段，并且对段的内
容进行了解析，解析结果为一个"/DEFAULTLIB:‘LIBCMT'"的链接指令（Linker Directives），
实际上它就是“cl”编译器希望传给“link”链接器的参数。这个参数表示编译器希望告诉
链接器，该目标文件须要LIBCMT这个默认库。LIBCMT的全称是（LibraryCMultithreaded），
它表示VC的静态链接的多线程C库，对应的文件在VC安装目录下的lib/libcmt.lib，我们
“SimpleSection.obj”时，链接器看到输入文件中有这个段，就会将“/DEFAULT：‘LIBCMT'”
参数添加到链接参数中，即将libcmt.lib加入链接输入文件中。
意
5.4调试信息
含的是符号（Symbol）相关的调试信息段：°.debugSP"表示包含预编译头文件（Precompiled
在“SimpleSectionobj”中，我们只看到了“debugSS”段，也就是只有调试时的相关信息。
我们可以从该段的文本信息中看到目标文件的原始路径，编译器信息等。调试信息段的具体
格式被定义在PE格式文件标准中，我们在这里就不详细展开了。调试段相关信息在
“SimpleSection.txt”中的内容如下：
程序员的自我修养一链接、装载与库
---
## Page 164
5.5大家都有符号表
141
SECTION HEADER #2
.debug$S name
0 physical address
0 virtual address
86 size of raw data
F4 file pointer to raw data (000000F4 to 00000179)
0 file pointer to relocation table
0 file pointer to line numbers
0 number of relocations
42100040 f1ag8
0 number of 1ine numbers
Initialized Data
Discardable
1 byte align
Read 0nly
RAW DATA #2
0S ￥E  &E 00 00 00 00 00 60 00 9 00 00 00 20 :00000000
....F.......?C：\
00 09 69 2S 55 2 02 24 59 9L 04 19 99 0P 35 59 102000000
00000010: 57 6P 72 6B 69 68 67 5C 62 6F 6F 6B 5C 63 6F 64
Working\book\cod
e\Chapter 2\Sinp
00000030: 6C 65 53 65 63 74 69 6F 6B 73 5C 53 69 6D 70 6C
1eSections\Sinp1
00000040: 65 53 65 63 74 69 6F 6E 2E 6F 62 6A 38 00 13 10
00000050: 00 22 00 00 07 00 0E 00 00 00 27 C6 0E 00 00 00
eSection.obj8...
62 25 82 02 94 99 49 04 49 24 69 69 9 12 93 62 :09000000
................
00000070: 20 4F 70 74 69 6D 69 7A 69 6E 67 20 43 6P 6D 70
'?IMicrosoft (R)
Optimizing Comp
5.5
大家都有符号表
“SimpleSection.txt”的最后部分是COFF 符号表（Symbol table），COFF文件的符号
表包含的内容儿乎跟ELF文件的符号表一样，主要就是符号名、符号的类型、所在的位置。
我们把“SimpleSection.txt”关于符号表的输出摘录如下：
COPF SYKBOL TABLE
000 006DC627 ABS
notype
Static
PI:EMAIL
002 00000000 SECT1
001 00000001 ABS
notype
notype
Static
Static
1 efeat.00
18,relocs
0, #linenums
1
.drectve
004 00000000 SECT2
Section length
0.
checksum
Static
.debug$S
0
Section length
notype
86, lrelocs
0, #1inenums
1
006 00000004 UNDEF
1_global_uninit_var
0,
checksum
0
007 00000000 SBCT3
notype
notype
External
C, #relocs
Static
0, #linenums
,data
Section length
0,
1_globa1_init_var
checksum AC5AB941
009 00000000 SECT3
notype
Externa1
00B 00000008 S8CT3
00A 00000004
SECT3
notype
Static
Static
1$SG594
notype
(*main'::′2'::static_var)
1?static_var8?1??main98989
00C 00000000 SECT4 notype
Static
1.text
0OE 00000000 SECT4
Section length
4E, #relocs
5, #linenums
0,
checksun
CC61DB94
0OF 00000000 UNDEF
notype ()
Externa1
1_printf
1_func1
010 00000020 SECT4
notype ()
notype
(}
External
External
1_ma1n
程序员的自我修养——链接、装载与库
---
## Page 165
142
第5章WindowsPE/COFF
011 00000000 SECT5 notype
Section length
4, #relocs
0,#linenumg 0, checksum
I.bss
013 0o0o0000 SECT5 notype
Static
1?static_var207177main899e9
0
(2xe"oTaes':,2.==,ureu,)
在输出结果的最左列是符号的编号，也是符号在符号表中的下标。接着是符号的大小，
即符号所表示的对象所占用的空间。第三列是符号所在的位置，ABS（Absolute）表示符号
是个绝对值，即一个常量，它不存在于任何段中：SECT1（Section#1）表示符号所表示的
对象定义在本COFF文件的第一个段中，即本例中的“.drectve”段：UNDEF（Undefined）
表示符号是未定义的，即这个符号被定义在其他目标文件。第四列是符号类型，可以看到对
于C语言的符号，COF只区分了两种，一种是变量和其他符号，类行为motype，另外一种
是函数，类型为notype（，这个符号类型值可以用于其他一些需要强符号类型的语言或系
统中，可以给链接器更多的信息来识别符号的类型。第五列是符号的可见范围，Static表示
符号是局部变量，只有目标文件内部是可见的：Extermal表示符号是全局变量，可以被其他
目标文件引用。最后一列是符号名，对于不需要修饰的符号名，“dumpbin”直接输出原始的
符号名：对于那些经过修饰的符号名，它会把修饰前和修饰后的名字都打印出来，后面括号
里面的就是未修饰的符号名。
从符号表的dump输出信息中，我们可以看到”_global_init_varabal"这个符号位于Section
#3，即“data”段，它的长度是4个字节，可见范围是全局。另外还有一个为$SG574的符
号，其实它表示的是程序中的那个“%d”字符串常量。因为程序中要引用到这个字符串
常量，而该字符串常量又没有名字，所以编译器自动为它生成了一个名字，并且作为符号放
在符号表里面，可以看到这个符号对外部是不可见的。可以看到，ELF文件中并没有为字符
串常量自动生成的符号，另外所有的段名都是一个符号，“dumpbin”如果碰到某个符号是一
个段的段名，那么它还会解析该符号所表示的段的基本属性，每个段名符号后面紧跟着一行
就是段的基本属性，分别是段长度、重定位数、行号数和校验和。
5.6Windows下的ELF—PE
PE文件是基于COFF的扩展，它比COFF文件多了儿个结构。最主要的变化有两个：
第一个是文件最开始的部分不是COFF文件头，面是DOSMZ可执行文件格式的文件头和
桩代码（DOS MZFile Header and Stub）：第二个变化是原来的COFF 文件头中的
“IMAGE_FILE_HEADER”部分扩展成了PE文件文件头结构“IMAGE_NT_HEADERS”，
这个结构包括了原来的“Image Header”及新增的PE扩展头部结构（PEOptional Header）。
PE文件的结构如图5-2所示。
DOS下的可执行文件的扩展名与Windows下的可执行文件扩展名一样，都是“exe”，
但是DOS下的可执行文件格式是“MZ”格式（因为这个格式比较古老，我们在这里并不打
程序员的自我修养一链接、装载与库
---
## Page 166
5.6 Windows 下B9 ELF——PE
143
Image DOS Header IMAGE_DOS_HEADER
Image DOS Stub
PE Fie Header IMAGE_NT_HEADERS
Image Header IMAGE_FILE_HEADER 
MAGE_OPTIONAL_HEADER32
ImageOptonal Header
Section Table MAGE_SECTION_HEADER{ J