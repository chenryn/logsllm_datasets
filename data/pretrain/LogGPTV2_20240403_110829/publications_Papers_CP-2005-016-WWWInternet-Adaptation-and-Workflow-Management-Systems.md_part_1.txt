Cardoso, J. and A. Sheth, "Adaptation and Workflow Management Systems", International Conference WWW/Internet 2005, Lisbon,
Portugal, 19-22 October 2005. pp.356-364, ISBN: 972-8924-02-X
ADAPTATION AND WORKFLOW MANAGEMENT
SYSTEMS
Jorge Cardoso
Departamento de Matemática e Engenharias
Universidade da Madeira
9050-078 Funchal – Portugal
PI:EMAIL
Amit Sheth
LSDIS Lab, Department of Computer Science
University of Georgia
Athens, GA 30602 – USA
PI:EMAIL
ABSTRACT
Today, companies – large and small – can select Workflow Management Systems (WfMSs) to support their business
processes. When processes are critical, it is fundamental that WfMS infrastructures continue to provide pre-established
service levels to users in the face of disruptions. Adaptation ad-dresses precisely this issue. Current architectures do not
incorporate adequate solutions that enhance WfMSs’ adaptation. In this paper we present a set of comprehensive
techniques to be used in the development of WfMSs to increase their level of adaptation. We discuss how workflow
adaptation can be triggered, which adaptation strategies can be applied, and why dynamic changes are in-dispensable to
carry out adaptation. We not only target adaptation from a functional perspective, but also from an operational
perspective. For the strategies presented, we describe their implementation to the METEOR WfMS.
KEYWORDS
Workflow Management Systems, Adaptation, Quality of Service.
1. INTRODUCTION
Workflow Management Systems (WfMSs), an innovative development of the last decade, represent a
fundamental technological infrastructure that efficiently manages business processes. Organizations currently
use WfMSs to manage a broad range of distinct applications, such as insurance claims, bank loans,
administrative procedures, and healthcare processes. Applications can be more oriented to support or enhance
existing processes, to increase competitive advantage, to reduce costs, and also to manage critical
infrastructure systems. In many cases, the applications managed by WfMSs are of vital significance to the
organizations that govern them. The disruption of services provided by WfMSs could easily incapacitate the
completion of the running process. For example, it is not advisable for an insurance company to delay a
customer’s insurance claims processing due to a WfMS failure. It is also not accept-able to delay a patient’s
treatment due to a WfMS malfunction.
In reaction to disruptions, adaptive procedures must be undertaken to ensure that the workflow systems
continue to meet expected operational requirements. The adaptation research area copes with the disruptions
that critical systems face. It has gained the interest of an increasing number of people because our society is
becoming more and more dependent on computer systems.
This paper presents a multidimensional solution composed of a set of strategies which, when applied to a
WfMS, increases its degree of adaptation. We consider not only functional adaptation, but also operational
adaptation. While functional adaptation is triggered when a workflow component ceases its activity,
operational adaptation occurs when tasks and workflows do not complete their realization in accordance with
initial quality of service (QoS) requirements. The ideas and strategies presented are applied to workflow
systems, but they can be implemented for other distributed systems.
The set of strategies presented in this paper is closely linked to the METEOR WfMS, since this system
has been used as a prototype. Thus, section 2 briefly de-scribes the METEOR system and its current
implementation status as a prototypical example of today’s advanced WfMSs. In section 3 we present the
conceptual architecture of METEOR. Our architecture functionally divides the modules that compose a
WfMS. This division results in a separation of concepts that allows a clearer vision of both the components
that form the WfMS and the areas that need to be considered when implementing adaptation strategies.
Section 4 shows adaptation and how adaptive methods can be applied to WfMSs. Related work is discussed
in section 5, and section 6 presents our conclusions.
2. THE METEOR WORKFLOW MANAGEMENT SYSTEM
At the LSDIS Lab (Department of Computer Science, University of Georgia, USA) and in collaboration with
industry and government R&D (Naval Research Laboratories, USA), and application partners (Medical
College of Georgia, University of Georgia, USA), we have developed the METEOR workflow management
model and system. METEOR’s architecture includes design, monitor, workflow repository, and enactment
services. METEOR has adopted semantics and Web services to face the new challenges of the semantic Web.
The METEOR-S (METEOR for Semantic Web services) [1] project is being developed in collaboration with
IBM TJ Watson re-search center. METEOR-S is focused on the usage of semantics for the complete lifecycle
of semantic Web processes, which represent complex interactions between semantic Web services.
METEOR-S project targets research on four important areas of the lifecycle of semantic Web processes [2],
namely, annotation, discovery, composition, and orchestration. For each of the research stages in the lifecycle
a framework, infrastructure or environment has been developed and implemented.
The enactment service ORBWork has been developed to address specific needs of organizations.
ORBWork [3] is a CORBA [4] based system oriented to support mis-sion-critical enterprise applications
requiring high scalability and robustness. It is fully distributed, scalable, and includes multilevel security
mechanisms [5]. It supports interoperability standards such as JFLOW [6] and SWAP [7]. With recently
added modules, it also includes an interface that allows for the realization of dynamic changes at the instance
level, an exception-handling mechanism that is part of the adaptation module, and support for QoS-based
adaptation and analysis. In this paper we will address the issues associated with these modules.
3. METEOR’S ARCHITECTURE
The adaptation of systems is a complex issue. This is even more so in distributed systems because of the
existence of underlying infrastructures that are not frequently encountered in more traditional centralized
systems. The adoption of adaptation strategies has a critical impact on early decisions in system
development; it is both cost-effective and efficient to conduct adaptation analyses at the architecture level,
before substantial resources have been committed to development (Bass, Clements, & Kazman, 1998).
Therefore, the first step is to conduct an analysis in order to obtain a clear and accurate understanding of
WfMSs’ architecture.
We extend Worah and Sheth’s (1997) classification of WfMSs’ architecture with the addition of the
schema layer. Therefore, we view workflow systems as having a four-tier layered architecture (Cardoso, Luo,
Miller, Sheth, & Kochut, 2001): instance level, schema level, workflow level, and infrastructure level. Each
level corresponds to a functional division of the WfMS, and each has a precise and specific mission (Fig. 1).
WfMS
D Error event
Dynamic Corrective actions
BB
Change Corrective recommendations
7)
AA NN11 EE NN22 FF
CC DD
Instance Level
Workflow schema
5)
Human Involvement
2)
1) Schema Level
4) 4)
WfMS components A 3) Adaptation Mechanisms
6)
Workflow Level B
Exception Handling
2)
Quality of Service C
CORBA server, Communications,
OS, Hardware, etc.
Other Strategies …
Infrastructure Level
Fig. 1. Adaptation architecture for WfMSs
To better understand the purpose of each architectural level, we briefly describe them.
• Infrastructure Level. The infrastructure level includes all the elements that compose the underlying
WfMS infrastructure. It includes CORBA servers, databases, operating systems, communication
protocols, hardware, etc.
• Workflow level. At the workflow level, we find the modules that compose a workflow management
system. The modules typically include the enactment engine, the monitor, and the repository.
• Schema Level. As the name suggests, the schema level includes workflow schema definitions. A
workflow schema is a business process representation that can be interpreted by a WfMS. Workflow
schemas are generally stored in a repository and are subsequently used by the WfMS.
• Instance Level. At the instance level, we find issues that are closely related to workflow instances or
application executions. In this level, adaptation may occur when the design of a workflow schema
does not anticipate a possible error related to the execution of workflow tasks.
4. ADAPTATION AND WORKFLOW MANAGEMENT SYSTEMS
As Charles Darwin noted, “it is not the strongest species that survive, or the most intelligent, but the one most
responsive to change.” It is also desirable for a workflow management system to be adaptable. Adaptive
mechanisms dynamically change active workflow instances. This permits WfMSs to be able to adapt
themselves to a range of different business and organization settings, and also to a changing context (Han,
Sheth, & Bussler, 1998). This requirement is a direct consequence of the highly changeable environment in
which business processes normally operate.
Fig 1 presents our overall WfMS adaptation architecture. This architecture includes: the WfMS and the
functional levels (the instance, schema, workflow, and infrastructure levels) at which specific types of events
can occur; the detection and forwarding of events between levels (represented by 2); and event handling
(represented by 1, 3, 4, 5, 6, 7).
A typical scenario that requires adaptation is described as follows. When an event is generated at any
functional level, it is the responsibility of the level where the event occurred to restore its own consistency.
Depending on the type of event, it may not be possible for the level to self-adapt. This is because additional
knowledge may be needed to assess the event which is simply not available to the level. In such a case, the
event is forwarded (1) to the workflow level. Upon receiving the report of an event, the workflow level will
try to find a local solution to the problem. The workflow level is a good candidate for deriving a solution
since it is the central point that coordinates the instance and schema levels. If a solution is found locally
(described in section 4.1 and indicated in Fig. 1 with the letter ‘A’), then a set of adaptive actions are applied
(2, 7). On the other hand, if the workflow level cannot find a solution, the event is forwarded (3) to the
adaptation module.
The adaptation module is a specialized service that incorporates knowledge and various algorithms to
derive solutions for specific problems. When the adaptation module receives an event, it tries to derive a
valid solution. Depending on its implementation, the adaptation module can rely on several distinct methods
to obtain a solution. In section 4.2 we describe two adaptation methods – one to deal with workflow
exceptions and the other one to manage QoS requirements (indicated in Fig. 1 with the letters ‘B’ and ‘C’,
respectively). If a solution cannot be found or if only a partial solution is created, then this information is
forwarded (4) to another module which waits for human involvement. During the procedure described, at any
point when a valid solution is derived it is sent (5, 6) to the workflow level, which applies corrective actions.
If corrective actions are necessary at the instance level, it is necessary to use the dynamic change (described
in section 4.3 and indicated in Fig. 1 with the letter ‘D’), interface (7) to guarantee that the changes are
applied in a consistent manner.
4.1 Triggering Adaptation
Adaptation strategies can be hard-coded into the workflow system. In this case, they are called built-in. The
advantage of using such strategies is that the user does not have to set up or configure any mechanism in
order for the workflow system to handle events. The disadvantage is that there is no flexibility for a user to
customize the system.
In METEOR, events are represented by exceptions. When an event is identified in a component, an
exception is generated. METEOR’s system architecture is composed of several components that form the
component hierarchy depicted in Fig 2.a; this includes the WfMS, the task scheduler, the task manager, and
task realization.
Each component is said to be competent to handle an event if it has a handler associated with it. Having a
handler for an event indicates that the component has the knowledge and techniques to derive a solution for
the problem. For that reason, the component hierarchy shown in Fig 2.b induces a competence hierarchy
(Kochut, Sheth, & Miller, 1999).
The strategy used to deal with events is called the competence-driven exception handling strategy. It
works in the following way. In the case that an event occurs, it is first made available to the workflow
component in which the flow of control resides. If this component is competent to handle the event, i.e. if it
has at least one handler for the given event type, it deals with the event. On the other hand, if the component
does not have the competence for the event, the event is passed on to the next higher level in the competence
hierarchy.
WWWooorrrkkkffflllooowww mmmaaannnaaagggeeerrr
TTTaaassskkk sssccchhheeeddduuullleeerrr
Workflow Management System
TTTaaassskkk mmmaaannnaaagggeeerrr
eeeeccccnnnneeeetttteeeeppppmmmmooooCCCC
Task Scheduler
TTTaaassskkk rrreeeaaallliiizzzaaatttiiiooonnn (((nnneeetttwwwooorrrkkk))) PPPrrrooopppaaagggaaatttiiinnnggg ttthhheee sssslllleeeevvvveeeellll
Task Manager eeevvveeennnttt
Task Realization
TT11
TTTaaassskkk mmmaaannnaaagggeeerrr
TTTaaassskkk rrreeeaaallliiizzzaaatttiiiooonnn EEvveenntt
a) b)
Fig. 2. METEOR model competence hierarchy
Since the events form a hierarchy, a given task may have more than one suitable handler. In this case, the
most specific handler is used. The workflow runtime system has default handlers for all workflow-related
events. In other words, the workflow manager is competent to handle any event, whether system or
application-defined. The handlers invoke an adaptation mechanism whenever necessary and wherever
possible. If an event is detected while a task manager is attempting to run a task realization (for example, a
computer program), the task manager itself may be competent to handle the event with one of its internal
handlers. Such handlers typically involve retrying the task realization a number of times, before throwing the
event to a higher-level component.
4.2 Adaptation Strategies
In this section we present two runtime time strategies which increase the adaptation of workflow systems:
exception handling and Quality of Service (QoS) management. To illustrate the use of adaptation, we
describe two adaptable systems that work in conjunction with the METEOR system. The first system deals
with exceptions – a well-defined class of events that may occur during the realization of a workflow instance.
The second system is responsible for adapting workflow instances when their Quality of Service (QoS)
reaches threshold values. While the first system handles functional errors, the second one deals with
operational errors.
4.2.1 Adaptation and Exception Handling
The need for modeling exceptions in workflow systems has been widely recognized (Casati, 1998). An
exception refers to abnormal events not modeled by the underlying workflow management system, deviations
between what we plan and what actually happens (Luo, 2000).
The architecture developed (Luo, 2000) and implemented in the METEOR system includes a
sophisticated exception-handling mechanism. During a workflow schema execution, if an exception occurs is
propagated to the case-based reasoning (CBR) exception handling module, the CBR system is used to derive
an acceptable exception handler (Luo, Sheth, Miller, & Kochut, 1998). The system has the ability to adapt