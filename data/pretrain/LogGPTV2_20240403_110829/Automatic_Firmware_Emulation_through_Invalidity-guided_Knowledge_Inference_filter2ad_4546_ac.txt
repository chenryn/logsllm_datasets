device will not boot. Such an example is shown in Listing 4.
1 rf_read_buf (& buf , len );
2 if ( strncmp (( const char *) &buf , " OK \r\n" , 4) )
3
while (1) ;
Code Listing 4: Code snippet of RF conﬁguration.
In this MCU, the RF function is implemented on top of the
UART interface. Speciﬁcally, the data input channel of UART
is used as the control channel of the RF conﬁguration. When
the RF module has been properly initialized, the same UART
data channel is re-purposed for RF communication. In the
code snippet, the function rf_read_buf() reads four bytes
from the UART data register. The result must match the string
literal “OK\r\n” to conform to the RF control protocol. The T2
caching rule cannot distinguish the four read operations to the
UART data register, since their execution contexts are exactly
the same. When the caching rule is upgraded to T3, instead
of caching a single reading, each cache entry is associated
with an array of readings. In the example, when µEmu ﬁnds
the path to pass the strncmp check at line 2, four symbols
obtained from rf_read_buf() are solved together to obtain
the “OK\r\n” string literal and the results are stored in the
cache entry. Therefore, the T3 caching rule is encoded as
T3_addr_pc_null_{v1,v2,...}.
In the ﬁrmware dynamic analysis phase, the values in the
array are replayed in order, so that the execution will follow
the same ﬂow. Therefore, it is the most speciﬁc to ﬁrmware
but is able to capture arbitrary ﬁrmware behaviors.
Based on our evaluation, the T3 caching rule is rarely ac-
tivated. When it is activated, most likely the corresponding
register is used for receiving external data, as explained in the
aforementioned example. Therefore, in the ﬁrmware dynamic
analysis phase, we treat registers of type T3 as one kind of
fuzzing input points, after replaying all the cached readings
in the array.
Invalid Execution State Detection
4.3
As mentioned before, µEmu learns appropriate cache val-
ues through invalidity-guided exploration. It is based on the
assumption that during normal execution, a properly pro-
grammed ﬁrmware should never run into any invalid states.
If an invalid state is detected, one or more of previously
cached values in the KB should be wrong. In this section,
we deﬁne invalid states and the rationales behind them. In
addition, we also detail how the InvalidStateDetection
plugin identiﬁes invalid states. If an invalid state is de-
tected by the InvalidStateDetection plugin, it notiﬁes the
KnowledgeExtraction plugin.
Inﬁnite Loop. Typically, if the ﬁrmware execution encounters
an unrecoverable error, it will halt itself by running a simple
inﬁnite loop. If an inﬁnite loop is detected, there should be a
wrongly cached peripheral reading.
The plugin keeps records of the control ﬂow for each exe-
cution path. If it observes repeated cycles in the control ﬂow,
a loop is detected. To further conﬁrm an inﬁnite loop, the
plugin also makes sure that the processor registers are the
same in each loop. If a register contains symbolic values,
µEmu solves them to concrete ones and makes the compari-
son. µEmu only monitors inﬁnite loops that occurred within
the last few translation blocks. This number is denoted as
BB#_INV1 and the default value is 30 based on our empirical
study. BB#_INV1 cannot be too large for two reasons. First,
monitoring a long control ﬂow history is time-consuming.
Second, it could mistakenly recognize the main logic of the
ﬁrmware as invalid, because the main logic of the ﬁrmware
is indeed implemented in an inﬁnite main loop. Fortunately,
the length of the repetend in the main loop is often much
larger than that in an invalid inﬁnite loop. Setting BB#_INV1
to 30 effectively separates them. In addition, inﬁnite loop
detection is only activated when there are at least one symbol
involved in the context. The idle thread, which is typically
implemented as an inﬁnite loop in MCU OSs, never triggers
a positive inﬁnite loop detection.
2014    30th USENIX Security Symposium
USENIX Association
Long Loop. It is also common that the ﬁrmware waits for a
certain value in a peripheral register. This value indicates that
the peripheral has ﬁnished certain operations. This kind of
wait operation is often accompanied by a timeout mechanism,
as exempliﬁed in Listing 1. If µEmu does not cache a correct
value for this register, there will be a long loop, taking tens of
seconds to complete.
To identify a long loop, the InvalidStateDetection
uses the same strategy to detect loops as is done in inﬁnite
loop. It also counts the number of repeated cycles. If it exceeds
an adjustable value, the plugin conﬁrms a long loop. The ad-
justable value is denoted as BB#_INV2 and we set it as 2,000
by default based on our empirical study. Long loop detection
is only activated when there is at least one symbol involved
in the context. Therefore, Libc functions such as memcpy and
memset never trigger a positive long loop detection.
Invalid Memory Access. Invalid memory regions are those
not mapped in the address space. Mapped regions include
ROM, RAM, system regions and external peripheral regions.
All other are ummapped. If the ﬁrmware accesses an un-
mapped memory address, two reasons are possible. First, the
ﬁrmware itself is buggy and would encounter a memory error
even on the real device. We consider it unlikely to happen
and we did not observe this in all the tested samples. Second,
µEmu might learn a wrong response for the peripheral read
operation. The InvalidStateDetection plugin will report
an invalid state if this happens.
User-deﬁned Invalid Program Points. Finally, if an analyst
has obtained some prior knowledge about the ﬁrmware via
static analysis or µEmu itself, we provide an interface allow-
ing him to manually conﬁgure additional invalid points. This
mechanism is useful since analysts have the option to ﬁne-
tune the extracted knowledge about the ﬁrmware, boosting
emulation efﬁciency. For example, an execution point that
should never be executed (e.g., failed assertion) can be explic-
itly speciﬁed by the analysts.
Invalidity-guided KB Extraction
4.4
In this section, we depict the proposed knowledge base ex-
traction algorithm for automatic peripheral modeling.
Branch Target Selection and Switch Algorithm. The algo-
rithm, shown in Algorithm 1 and denoted as KB_Learn(),
is based on DFS. It takes a basic block and the current KB
(empty for ﬁrst round) as inputs, and then symbolically exe-
cutes from there. The initial input to the algorithm is the entry
point of the ﬁrmware, which is typically the reset handler. The
output is the updated KB after this round of learning.
The algorithm starts from a given branch target. The
ﬁrmware would then read a register of an unknown peripheral.
µEmu assigns a symbol to it and continues execution until
a branch is met. The algorithm gets the symbol responsible
for the branch target and then updates the KB using the al-
gorithm listed in Algorithm 2, which we explain later. The
return KB;
end
if current state is invalid then
targets[] ← execute_BB(selected_target);
if meet termination condition then
Algorithm 1: Algorithm for automatic KB extraction,
denoted as KB_Learn().
:KB
Input
:selected_target
Input
Output :KB
1 symbol ← get_symbol();
2 KB_Update(KB, symbol);
3 do
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20 while true;
21 selected_target ← unexplored.pop();
22 KB_Learn(selected_target);
selected_target ← next_BB(selected_target);
selected_target ← favorable_target(targets);
other_target ← non_favorable_target(targets);
unexplored.push(other_target);
symbol ← get_symbol();
KB_Update(KB, symbol);
break;
end
if sizeof(targets) == 1 then
else
end
// switch execution state
main body is a while loop to step over basic blocks. After
ﬁnishing each basic block, it checks if the current execution
state meets the termination conditions (explained later). If
so, the algorithm returns the current KB. If no termination
condition is met, it then checks if the current execution state is
valid or not based on the conditions mentioned in Section 4.3.
If the state is valid, it judges if a branch is reached. If a branch
is not reached, the next basic block is selected to continue
the while loop. If a branch is reached, the algorithm selects
a favorable target according to the existing KB and sets it as
the next branch target. The non-favorable target is pushed
back to a stack for future exploration. Then, the algorithm
gets the symbols responsible for the favorable branch target
and updates the KB. The only condition to break the while
loop is that an invalid execution state is detected in line 8. If
this happens, the next branch target is popped from the stack,
and the algorithm recursively executes from there.
KB Update Algorithm. Next, we explain the knowledge
base update algorithm shown in Algorithm 2, denoted as
KB_Update(). It takes the current KB and a symbol as inputs.
First, the symbolic execution engine solves a concrete value
for the symbol that could lead the execution to the current
branch target. The returned concrete value is used to construct
USENIX Association
30th USENIX Security Symposium    2015
Algorithm 2: Algorithm for updating the knowledge
base, denoted as KB_Update()
Input :KB
Input :symbol
1 new_entry ← solver(symbol);
2 if new_entry conﬂicts with KB then
// upgrade caching rules
if type(symbol) == T0 then
3
4
5
6
7
8
9
10
11 else
12
13 end
else if type(symbol) == T1 then
type(symbol) ← T1;
type(symbol) ← T2;
type(symbol) ← T3;
else if type(symbol) == T2 then
end
replace the conﬂicting entry with new_entry;
KB ← KB | new_entry;
a new cache entry. If the new entry does not conﬂict with the
current KB, it is inserted to the KB. Otherwise, the caching
rule of the corresponding symbol is upgraded. Speciﬁcally,
T0 is upgraded to T1; T1 is upgraded to T2 and so forth.
Termination Condition. Real-world ﬁrmware typically runs
in an inﬁnite loop to respond to external events, therefore
would never exit. Therefore a round of knowledge extraction
could last forever. In our prototype, we monitor the lastly
executed 30,000 basic blocks and make sure that no new basic
blocks are reached. If this happens, this round of knowledge
extraction terminates. Note the number of monitored basic
blocks is an empirical value and can be adjusted by changing
BB#_Term.
Reinforced Learning. To emulate a ﬁrmware image, µEmu
starts execution from the entry point following KB_Learn().
The ﬁrst round usually takes a long time since the KB has not
been set up. As more cache entries are being built, accesses
to peripheral registers lead to more cache hits. However, one-
shot knowledge extraction cannot guarantee full coverage of
all peripherals, especially considering that many hard-to-reach
code regions are only executed when speciﬁc events happen.
If we ﬁnd that the current KB does not include cache entries
for certain registers or the context hash/PC cannot be matched,
µEmu needs to conduct another round of knowledge extraction
phase to learn additional peripheral behaviors. We call it
reinforced learning. In a real ﬁrmware emulation, multiple
rounds are needed when new peripherals are discovered by
new test-cases.
4.5
The interrupt is important for peripheral to interact with the
external world. Without interrupts, many ﬁrmware behaviors
cannot be triggered.
Interrupt Handling
Interrupt Delivery
4.5.1
Although QEMU has implemented a virtual interrupt con-
troller (i.e., NVIC) for ARM Cortex-M MCUs, which could
be used to dispatch and respond to interrupts, this function is
largely limited to implementing system peripherals such as
SYSTICK, because QEMU does not know when to ﬁre inter-
rupts for custom-made peripherals. First, to ﬁnd out which
interrupt is activated, the InterruptControl plugin checks
the NVIC Interrupt Set Enable Register (ISER). Then, for
deterministic replay of interrupt sequences, our prototype fol-
lows a similar interrupt ﬁring strategy as P2IM. The plugin
delivers activated interrupts (via setting the corresponding
bit of the NVIC Interrupt Status Pending Register (ISPR)) in
a round-robin fashion at a ﬁxed interval deﬁned by the user.
As empirical values, in our evaluation, we set the interval
to be once every 2,000 basic blocks during the knowledge
extraction phrase and once every 1,000 basic blocks during
the analysis phase.
4.5.2 Caching Strategy for Interrupts
Using the caching strategy explained in Section 4.2, we found
that the code coverage inside the interrupt handler is severely
limited. It turned out our algorithm over-approximates the
paths. Normally, the interrupt handler of a peripheral often
executes different paths based on the values of the control
register and status register. All these paths are valid from
the viewpoint of our invalidity checking mechanism. Unfor-
tunately, with the cache mechanism, only one path can be
executed. An example is shown in Listing 5, in which the
UART driver decides to invoke the receive or transmit func-
tion based on the value of the status register isrflags and
control register crlflags. When these registers have cache
entries in the KB, the emulated path would be ﬁxed.
UART_Receive_IT ( huart );
return ;
uint32_t isrflags = READ_REG ( huart -> SR );
uint32_t cr1flags = READ_REG ( huart -> CR1 );
/* UART in Receiver mode */
if ((( isrflag & USART_SR_RXNE ) != RESET )
&& (( crlflag & USART_CR1_RXNEIE ) != RESET )){
1 void UART_IRQHandler ( UART_Handle * huart ) {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }
UART_Transmit_IT ( huart );
return ;
}
/* UART in Transmitter mode */
if ((( isrflag & USART_SR_TXE ) != RESET )
&& (( crlflag & USART_CR1_TXEIE ) != RESET )) {
}
...
Code Listing 5: Code snippet of the UART interrupt handler
in the STM32 HAL library.
To solve this problem, µEmu tries to execute different paths
in an interrupt handler. Speciﬁcally, µEmu monitors the execu-
tion context. If the interrupt context is detected, the symbolic
execution engine tries to explore all the possible paths. The
readings for a peripheral register that lead to all valid execu-
tion states are collectively stored in the corresponding cache
2016    30th USENIX Security Symposium
USENIX Association
entry. In the ﬁrmware dynamic analysis phase, the values
in each entry are randomly selected. As such, paths in an
interrupt handler will be randomly executed.
However, it usually takes multiple tries before triggering
the intended interrupt event. We rely on an observation to in-
crease the accuracy of interrupt event prediction. Speciﬁcally,
in peripherals, the status registers are often dependent on the
control registers and thus can be ignored in condition state-
ments. Moreover, control registers are typically recognized
as T0, so we can accurately infer their values by referring to
the most recent written values. Therefore, µEmu looks for pe-
ripheral registers of type T0 at ﬁrst. If it is found, µEmu uses
the most recently written value to it to calculate the branch
target, regardless of whether other registers are also involved
in the condition statement. If it is not found, µEmu randomly
selects all possible values of type T1 and T2 to drive the exe-
cution. This optimization helps µEmu accurately handle many
common peripherals such as UART and I2C.
4.6 Fuzzer Integration
The FuzzerHelper plugin is used to accommodate AFL so
that it can be bridged to µEmu. Also, it automatically ﬁnds
fuzzing input points to feed data to the tested tasks.
AFL Accommodation. Although AFL already supports
fuzzing binaries running QEMU, it is limited to fuzzing user-
space binaries. As such, we only use AFL for test-case gen-
eration and leave the rest to FuzzerHelper, including the
coverage instrumentation, fork sever, and crash/hang detec-
tion. This also allows us to readily replace AFL for alternative
fuzzing tools with minimal re-engineering effort. We imple-
mented the same path coverage algorithm with the AFL. Con-
cretely, the code coverage information is collected by tracking
the translation block transitions. Then, we share the bitmap of
code coverage information with AFL via shared memory. For
the fork sever, we consider the moment the ﬁrmware reads the
ﬁrst byte of test-case as the fork point. We used the existing
interface forkAndConcretize in S2E to take a snapshot of
the whole execution state when the execution reaches the fork
point for the ﬁrst time. We choose the default fork point as the
program point at which the ﬁrmware reads a data register for