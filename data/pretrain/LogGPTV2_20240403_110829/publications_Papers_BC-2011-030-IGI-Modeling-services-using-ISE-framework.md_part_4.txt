language GRL RDL (Rule Description Language). requirements have to be fulfilled: First, the stati-
GRL operates on directed, attributed graphs, cal interfaces of both services have to match and
whose data structures are defined by the respec- second, the dynamic interfaces have to match, i.e.,
tive application. Nodes and edges of the graph can the communication pattern has to match.
be attributed by arbitrary Java objects. Its basic
building blocks are predicates (tests) and produc- BPEL Generation
tions (rewrite rules). Rewrite rules are specified
textually Complex attribute tests and transforma- To determine all possible combinations of services,
tions can be performed by calling Java methods the first step was to discover all candidate services
from inside RDL programs. RDL programs are using process graph pattern matching. Next, these
compiled, optimized using heuristics, and then combinations were checked in the verification step
executed on a virtual machine. Hence, GRL pro- and all incorrect combinations were discarded.
vides highly efficient graph matching. The rule Finally, for each valid combination, an executable
description language RDL is nondeterministic. BPEL process is generated, which orchestrates
The service descriptions are used as work the constituent services.
graphs and the goal specifications are translated In order to deploy a process on a process ex-
into query expressions in the language GRL-RDL. ecution engine, several additional files are needed
To match the pattern with services, it is required beside the main BPEL file describing the process.
that each service comes with a fully-specified Figure 10 shows how business, technical, and
PASS description. Applying graph algorithms deployment concerns are separated and how the
leads to candidate lists for each specified pattern different description files are interrelated.
or goal.
141
Modeling Services Using ISE Framework
Figure 10. Separation of concerns in BPEL processes
The generation of BPEL starts from the subject variables used to uniquely identify a pro-
interaction diagram as shown in Figure 9(a). In cess instance is defined in correlation sets.
the previous processing steps, a list of candidate • Properties and PropertyAliases define
services has been generated for each subject in mappings from the properties in variables
the diagram. If existing services are used, then to the properties in service-specific mes-
the corresponding WSDL files, which describe sages. They allow to describe which prop-
the technical interface, already exist. Alterna- erties of different message types are equiv-
tively, if a subject has a fully specified PASS alent, despite their different names.
graph, then an executable BPEL process together • PartnerLinks describe the possible in-
with a WSDL interface description can be auto- teractions between every interacting pair
matically generated for the subject. This involves of services and defines their roles in the
the following parts: interaction.
• PartnerLinkTypes map from roles to port
• Process: To generate the main flow of the types and thereby define the message types
process, the elements of the PASS descrip- exchanged during the interaction between
tion are processed according to the control partners.
flow and corresponding BPEL elements
are generated. Our generator supports ActiveBPEL and
• Variables hold the state information as- Apache ODE as output formats. While the BPEL
sociated with each instance of a process. and WSDL parts are standardized and (in prin-
Because the generator generates code to ciple) portable, the different engines require some
orchestrate existing services with given proprietary supplemental files, which concern
WSDL files, it has to generate message deployment aspects:
mediation code translating web service re-
quests and replies to the types of the pro- • Deployment Descriptor (for Apache ODE):
cess instance variables as well. The deployment descriptor defines which
• Correlations are needed during asynchro- services a process provides and which ser-
nous interactions with services. When the vices a process uses. This is done by link-
process invokes a service and later re- ing the PartnerLinkType tags defined in
ceives the reply, it must be able to identify the WSDL of the process to the Service
the correct process instance to which the tags defined in the WSDL files of the cor-
incoming message belongs. The set of key responding services. This simple deploy-
142
Modeling Services Using ISE Framework
ment descriptor only points to the services This is mostly regarded as price discrimination
of the first valid composition. in the business literature (Lehmann & Buxmann,
• Process Deployment Descriptor (for 2009), where the determination of price can be
ActiveBPEL): Similar to above, this file based on relevant information such as user’s lo-
defines which services a process provides cation, service agreement, usage data, temporary
and which services it uses, but in a differ- discounts, surcharges, etc., which we regard as
ent format. This simple deployment de- context in this work. In such a setting, different
scriptor only points to the services of the price values can show up by the emergence of
first valid composition. dynamic context data. Therefore, it becomes a
• Catalog (for ActiveBPEL): The catalog challenging issue to obtain a consistent service
file lists all references to the WSDL files description – e.g. to specify what is the price of
used by the process. a service – with the incorporation of this context
• Endpoints File (for Theseus/TEXO): The data.
endpoints file lists the service candidates Figure 11 illustrates our approach for interpret-
for all valid service compositions. When ing context information within semantic service
the process is deployed on a suitable pro- description. All collected information conforms to
cess engine, this information can be used a service ontology which is explained in Section
to bind or replace services at runtime. “Service Ontology”. Semantic IoS-based service
description includes static service information
Semantic Context Modeling (e.g. service name, provider, parameters, etc.) as
and Service Descriptions well as viewpoints that are defined at design time
to incorporate different perceptions of service
Another important extension of ISE is its support based on possible contexts. At runtime, emerg-
to annotate services semantically with the incor- ing context information is interpreted by these
poration of context information emerging from viewpoints to incorporate specific views during
service environment. Services need to operate in runtime procedures – e.g. service discovery, agree-
a knowledge-intensive environment that, in turn, ment, or execution.
affects the service provisioning and procurement
process. The information captured from the envi- Service Ontology
ronment is also known as context. The techniques
that enable the exploitation of contextual informa- In order to capture both service descriptions and
tion in services are generally known as “context context information semantically, we rely on the
handling” techniques, while the use of context to service ontology which was previously introduced
provide relevant information and/or services to in detail in (Oberle, Bhatti, Brockmans, Niemann,
the user, where relevancy depends on the users & Janiesch, 2009). It provides a consistent and
task, is known as “context-awareness”. Context holistic way of capturing information by defining
handling is of vital importance for developers and different aspects of a service and service related
service architects since it provides dynamic service concepts as well as any relevant information that
behaviour, content adaptation and simplicity in emerges as context.
service usage. Figure 12 presents an excerpt of service ontol-
Let us consider service price as an example. ogy for the purposes of this chapter (see (Oberle,
Due to the dependency on many context dimen- Bhatti, Brockmans, Niemann, & Janiesch, 2009)
sions, it is hard to determine a fixed price for a for a detailed description). The concepts in the
service, especially at the time of service design. upper part are based on the DOLCE founda-
143
Modeling Services Using ISE Framework
Figure 11. Overview of viewpoints and interpretation of context information
tional ontology (Oltramari, Gangemi, Guarino, & ontological point of view, there is no distinction
Masolo, 2002) providing us with a generic set of between the axioms describing services and con-
concepts and relations as well as ontology design text, in the course of service offering, context
patterns. Based on this upper part, several concepts information dynamically emerges from various
are introduced to prescribe service information sources and is incorporated into KB as depicted
common to every service (e.g., service description, in Figure 11. For example, information about
provider or parameters such as quality of service). service consumers’ profile, or service contracts
This allows to capture service descriptions as a of a consumer for particular services can all be
set of axioms within a knowledge-base (KB). For obtained from, e.g., Service Management Platform
example, the MDH service in our scenario has the (see Figure 6) and be represented as axioms
following ontological (assertion) axioms based on similar to the following:
the concepts and relations in the service ontology:
ServiceConsumer(#BusU ),
A
ServiceDescription(#MDH), hasAddress(#BusU ;#Germany)
A
hasParam(#MDH;#MDH ), hasSLA(#BusU ;#SLA ),
Price A 1
provides(#CompA;#MDH) serviceType(#SLA ;#Premium)
1
Similarly, context information is captured as The central notion about using a service ontol-
axioms based on the ontology. Although, from an ogy to maintain all this information is to address
Figure 12. An excerpt of service ontology
144
Modeling Services Using ISE Framework
the information integration challenge that emerges SLA Management of
from the existence of several components in the Composite Services
design and offering of IoS-services. However,
dynamic context information in the KB may result ISE supports composite service providers when
in different interpretations of a service descrip- creating service compositions using existing
tion that requires the introduction of viewpoints services from the TEXO service marketplace.
as elaborated in the followings. This is achieved by the functionality provided by
the process modeling tools as shown in Figure 6.
Viewpoints and Rules Atomic services are composed to collaboratively
achieve tasks of higher complexity. The execution
According to the context information collected of atomic and composite services is regulated by
in the KB based on the service ontology, we can service level agreement (SLA). SLAs regulate
determine the subparts of service description, the tasks of the service, required and provided
e.g. service price, tax rates, discounts etc., by resources (i.e. what the service requires to execute
using ontology-based rules. However, since all and what it provides as result), different quality
these information is managed in one KB for our of service (QoS) and legal aspects, and start and
service management platform, we need to create end times of a service.
different viewpoints for different users in order to We developed an approach to support compos-
provide individualized values based on context. ite service providers to manage interdependencies
For example, to associate the German tax value between services in service compositions which
for the business units in Germany, the following they are offering. The approach is based on the
rule was defined for the MDH service: assumption that information regarding dependen-
cies between services is implicitly contained in
C1: ServiceConsumer(?c) ˄ hasAddress the composite service process description and the
(?c,#Germany) ˄ consume(?c,#MDH) SLAs negotiated between the composite service
provider, atomic service providers, and the service
˄ hasParam(#MDH, ?p) ˄ Price(?p) → consumer. We will now outline the approach and its
hasPart(?p,#GermanTax) integration into the ISE Workbench and illustrate
its use based on the MDH scenario.
Similar rules can also be specified to associate
further contextual information with the service Dependency Management Approach
descriptions such as offering discounts for SLA
violations or different price values for standard
In order to manage the dependencies in service
and premium contracts. What is crucial in our
compositions, we developed an approach which
approach is that every rule is associated with a
captures dependencies between services in a
viewpoint identifier (e.g. C1) that parameterizes
dependency model. The model contains infor-
the result of a rule into different viewpoints.
mation about the different services involved in
Context modeler utilizes a reasoning mechanism
a service composition, the SLAs negotiated for
defined in (Baader, Knechtel, & Penaloza, 2009)
the atomic services, the service composition,
at the backend to generate different, e.g., pricing
and a detailed description of the different de-
schemes for the same service.
pendencies between the dependant that depends
on one or more antecedents (Winkler & Schill,
2009). This model is created at design time by a
semi-automatic approach. At runtime it is used to
145
Modeling Services Using ISE Framework
Table 2. Service dependencies of the MDH sce- Figure 13. Architecture for SLA dependency
nario management
Antecedent Dependency Dependant
Backup Data finish-to-start Replace Hardware
Replace Hard- finish-to-start Restore Data
ware
support the composite service provider to handle
the dependencies.
The lifecycle associated with dependency
model consists of four phases. During the creation
placement due to availability problems of the
and re computation phase the dependency model
hardware. The request is evaluated based on the
is created based on the composite service process
dependency model and a conflict is detected with
description and SLA information. The created
the scheduled time for the service for restoring
dependency model can be extended manually
data. Thus, a new slot needs to be arranged for
with dependency information, which cannot be
restoring the data. During the retirement phase,
detected automatically. The model needs to be
the dependency model is discarded when is not
recalculated if conflicts are detected with respect
used or referenced.
to the dependencies, SLAs change, or the process
description is adapted. In the MDH scenario dif-
Architecture and Integration with ISE
ferent time dependencies are discovered (see Table
2). The Backup Data service needs to finish before
The functionality for the handling of dependencies
Replace Hardware can start. Replace Hardware
is provided by three main components, which are
needs to finish before Restore Data can start.
integrated into the ISE workbench (see Figure 13).
The validation phase is necessary to ensure
They implement the lifecycle presented above.
that the created dependency model is valid. It is
The Dependency Analysis component is used for
also necessary to validate the negotiated SLAs,
the semi-automatic dependency analysis at design
which can be supported by the dependency
time and the recomputation of the dependency
model. In the case that problems are detected the
model at runtime, i.e. the first phase of the lifecycle.
model needs to be re-computed. In our scenario
For the creation of the dependency model, the