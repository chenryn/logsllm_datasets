title:Mis-operation Resistant Searchable Homomorphic Encryption
author:Keita Emura and
Takuya Hayashi and
Noboru Kunihiro and
Jun Sakuma
Mis-operation Resistant Searchable Homomorphic
Encryption
Keita Emura
National Institute of
Information and
Takuya Hayashi
National Institute of
Information and
Communications Technology
Communications Technology
(NICT)
(NICT)
PI:EMAIL
PI:EMAIL
Noboru Kunihiro
The University of Tokyo
JST CREST
PI:EMAIL
Jun Sakuma
University of Tsukuba
JST CREST
RIKEN Center for AIP
PI:EMAIL
ABSTRACT
Let us consider a scenario that a data holder (e.g., a hospi-
tal) encrypts a data (e.g., a medical record) which relates a
keyword (e.g., a disease name), and sends its ciphertext to
a server. We here suppose not only the data but also the
keyword should be kept private. A receiver sends a query to
the server (e.g., average of body weights of cancer patients).
Then, the server performs the homomorphic operation to
the ciphertexts of the corresponding medical records, and
returns the resultant ciphertext. In this scenario, the server
should NOT be allowed to perform the homomorphic opera-
tion against ciphertexts associated with diﬀerent keywords.
If such a mis-operation happens, then medical records of
diﬀerent diseases are unexpectedly mixed. However, in the
conventional homomorphic encryption, there is no way to
prevent such an unexpected homomorphic operation, and
this fact may become visible after decrypting a ciphertext,
or as the most serious case it might be never detected.
To circumvent this problem, in this paper, we propose mis-
operation resistant homomorphic encryption, where even if
one performs the homomorphic operations against cipher-
texts associated with keywords ω′ and ω, where ω 6= ω′,
the evaluation algorithm detects this fact. Moreover, even if
one (intentionally or accidentally) performs the homomor-
phic operations against such ciphertexts, a ciphertext as-
sociated with a random keyword is generated, and the de-
cryption algorithm rejects it. So, the receiver can recognize
such a mis-operation happens in the evaluation phase. In
addition to mis-operation resistance, we additionally adopt
secure search functionality for keywords since it is desir-
able when one would like to delegate homomorphic oper-
ations to a third party. So, we call the proposed primitive
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053015
mis-operation resistant searchable homomorphic encryption
(MR-SHE).
We also give our implementation result of inner products
of encrypted vectors.
In the case when both vectors are
encrypted, the running time of the receiver is millisecond
order for relatively small-dimensional (e.g., 26) vectors. In
the case when one vector is encrypted, the running time
of the receiver is approximately 5 msec even for relatively
high-dimensional (e.g., 213) vectors.
Keywords
Homomorphic Encryption (HE); Searchable Encryption; Mis-
operation Resistance
1.
INTRODUCTION
1.1 Research Background
Let us consider a scenario that a data holder encrypts a
data and sends its ciphertext to a server. The server com-
putes some statistical values of data without decrypting ci-
phertexts, and sends the ciphertext of the ﬁnal statistical
value to a decryptor. The decryptor obtains the statisti-
cal value by decryption. This is a typical scenario of ho-
momorphic encryption (HE) such as the Paillier encryption
scheme [28]. Though the Paillier encryption supports ad-
ditive homomorphic operation only, after seminal works by
Gentry [20], several fully homomorphic encryption (FHE)
schemes have been proposed so far. Due to the progress of
(F)HE area, several applications of (F)HE also have been
proposed.
On the other hand, a security drawback of HE also has
been widely recognized so far. That is, anyone can freely
perform homomorphic operations inevitably, and this means
ciphertexts are malleable. Especially, a standard security
level of Public Key Encryption (PKE), which we call se-
curity against adaptive chosen-ciphertext attack (CCA), is
never achieved in HE. By changing the model of HE, Emura
et al. [15, 14] proposed a way to achieve the CCA secu-
rity and the homomorphic property simultaneously, where
it is CCA secure against an adversary who does not have
215the homomorphic operation key1 (and the decryption key
also), and simultaneously the homomorphic operation is al-
lowed to a user who has the homomorphic operation key.
This primitive is called keyed homomorphic public key en-
cryption (KH-PKE), and several constructions have been
proposed so far, e.g., KH-PKE with public veriﬁability [23,
27], keyed FHE [26], and keyed homomorphic identity-based
encryption (KH-IBE) [14].
1.2 Our Target: Mis-operation Resistant Search-
able Homomorphic Encryption
Though we can somewhat control who will be able to per-
form the homomorphic operation by employing KH-PKE,
there is room for argument on the controllability of the ho-
momorphic operation. For example, let us consider a sce-
nario that a data holder (e.g., a hospital) encrypts a data
(e.g., a medical record) which relates to a keyword (e.g., a
disease name), and sends its ciphertext to a server. We here
suppose not only the data but also the keyword should be
kept private. For example, when the keyword indicates rare
diseases, the keyword might cause identiﬁcation of the pa-
tient even if the records are encrypted. In case of genetic
diseases, it can leak familial relationships between records,
too. A receiver sends a query to the server (e.g., average
of body weights of cancer patients), in which the operation
contains conditioning by a keyword. Then, the server per-
forms the homomorphic operation only with the ciphertexts
of the medical records containing the keyword speciﬁed by
the query, and returns the ciphertext of the average of body
weights of them. In this scenario, the server should NOT
be allowed to perform the homomorphic operation against
ciphertexts related to diﬀerent keywords.
If such a mis-
operation happens, then medical records of diﬀerent diseases
are unexpectedly mixed. Of course, if all the programs that
will process the ciphertexts are determined in advance, we
do not have a strong motivation to consider such a mis-
operation of ciphertexts. However, from the standpoint of
data engineering, if ciphertexts are stored in a database and
repeatedly used for various purposes for a long time, man-
agement of the provenance of the ciphertexts is not an easy
task because of the security of the ciphertexts, particularly
in the outsourcing setting. Once data is encrypted, no one
except the secret key holder can conﬁrm the provenance of
the data anymore. However, in the conventional HE (and
KH-PKE also), there is no way to prevent such an unex-
pected homomorphic operation, and this fact may become
visible after decrypting a ciphertext, or as the most serious
case it might be never detected.
One may think that considering some tags of ciphertexts
is a reasonable solution since it could distinguish whether
homomorphic operations are allowed or not. However, if
keywords are directly regarded as tags, disease names be-
come known to the server. Therefore, providing a secure
keyword search functionality could be a solution.
1.3 Naive Approach and Its Limitations
1We do not use the word “evaluation key” in order to distin-
guish evaluation keys of FHE schemes which are contained
in public keys for homomorphic operations. As a remark,
though some FHE schemes, e.g., [9], require the evaluation
key, these schemes do not consider the CCA security against
one who does not have the evaluation key.
The most naive approach is to simply combine a cipher-
text of a searchable encryption scheme (public key encryp-
tion with keyword search (PEKS) [6]) and a ciphertext of
a public key HE scheme. However, as pointed out in [3, 5,
34, 11], this simple setting does not achieve an appropri-
ate security condition. For example, even if the public key
encryption scheme is CCA secure, the combined ciphertexts
are not secure against the CCA attack. In other words, since
ciphertexts of the HE scheme are still malleable or cipher-
texts of searchable encryption are replaced to ciphertexts
associated with a diﬀerent keyword by an adversary, the
server may perform homomorphic operations against them
even the server follows the protocol. Moreover, even if a
(lower-level trusted) server forcibly performs homomorphic
operations against ciphertexts with diﬀerent keywords, the
decryption algorithm should reject the result, and the re-
ceiver should be able to recognize such a mis-operation hap-
pens in the evaluation phase. So, regardless of trust level of
the server, such a mis-operation should be protected in the
scheme level, and this functionality is not supported in the
simple construction. For considering a CCA security in this
setting, PEKS/PKE has been proposed [3, 5, 34, 11]. How-
ever, since PEKS/PKE does not preserve the homomorphic
property of the underlying PKE scheme, PEKS/PKE is not
applicable for our usage.
For achieving the mis-operation resistance with preserv-
ing keyword privacy, one may think that it is enough to
employ a double encryption methodology, where prepare an
encryption and decryption key pair for each disease name,
and encrypt a ciphertext of a HE scheme by using an en-
cryption key associated with a disease when it is related to
the disease. Then, a server who has a decryption key of a
disease can perform homomorphic operations to ciphertexts
associated with the disease. However, many key pairs need
to be managed. Moreover, if a server has more than one key
pair, then still the server can perform homomorphic opera-
tions against ciphertexts associated with diﬀerent diseases,
and this fact is not detected.
Veriﬁable computation, e.g., [17, 4], might be a solution.
That is, if the receiver (client in the veriﬁable computation
context) can specify a function F that can exclude cipher-
texts associated with diﬀerent keywords, then the receiver
can recognize whether a mis-operation happens in the eval-
uation phase or not, by verifying whether the output is a
correct evaluation of F .
If the keyword is publicly avail-
able and the server can know it, it seems we can directly
employ veriﬁable computations. However, as mentioned be-
fore we here suppose not only the data but also the keyword
should be kept private. Thus, since secure searchability is
not supported, current veriﬁable computations are not di-
rectly applicable in our usage to the best of our knowledge.
Indistinguishability obfuscation (iO) [18] (or functional
encryption [8] also) might be applicable where, for exam-
ple, a plaintext space is partitioned into multiple spaces and
homomorphic operations are allowed if the corresponding
plaintexts belong to the same space. Though this could be
a solution, this is not an eﬃcient solution since the cur-
rent eﬃciency of iO is far from a practical use. Targeted
malleability [8], where homomorphic operations are allowed
with respect to a function F ∈ F, also seems to be a candi-
date to achieve the mis-operation resistance. However, the
evaluation algorithm adds a succinct non-interactive argu-
ment that proves a function F ∈ F is performed, and it
216Data holders
Server
Receiver
Mis-operation Resistance
-
-
The evaluation algorithm posts alert to homomorphic operations for ciphertexts associated with different keywords. 
Even if one intentionally or accidentally performs the homomorphic operations against such ciphertexts, 
the decryption algorithm rejects it, and the receiver can recognize a mis-operation happens in the evaluation phase. 
Figure 1: Framework of MR-SHE
seems non-trivial to instantiate an argument system for a
language that supports the mis-operation resistance.
Another candidate is KH-IBE [14] where a homomorphic
operation key is deﬁned for each identity, and the homo-
morphic operation is allowed against ciphertexts encrypted
by the same identity. Moreover, Abdalla et al. [2] show
that PEKS can be generically constructed by anonymous
identity-based encryption (anonymous IBE). Since the KH-
IBE scheme [14] is constructed by the Gentry IBE scheme [19]
and the Gentry IBE scheme is anonymous, the KH-IBE
scheme is also anonymous with a reasonable setting (See
Def 7.6 as a remark). So, one may expect that PEKS con-
structed from the Gentry-based KH-IBE scheme can work
well to achieve mis-operation resistance. However, the Ab-
dalla et al. construction cannot be used for our purpose.
Brieﬂy, in the Abdalla et al. construction, a random plain-
text (say R) is encrypted by a keyword as the identity, the
corresponding trapdoor is a decryption key of the keyword,
and a ciphertext of searchable encryption is this IBE cipher-
text and R. The test algorithm returns 1 if the decryption
result of the IBE ciphertext by using the trapdoor is R.
That is, the corresponding plaintext R is required for the
test capability, and is directly contained in the ciphertext.
This is meaningless in our usage, i.e., for searching disease
names in a secure way, medical records need to be revealed
to the server. Moreover, even if we can circumvent this
problem, the evaluation algorithm requires the correspond-
ing identity as input. That is, the corresponding keyword
is known to the server. So, we need to invent other way to
construct mis-operation resistant homomorphic encryption
with secure searchability.
1.4 Our Contribution
In this paper, we propose homomorphic encryption with
both mis-operation resistant and secure searchability, which
we call mis-operation resistant searchable homomorphic en-
cryption (MR-SHE). MR-SHE supports the following prop-
erties.
Conﬁdentiality: A keyword and data are encrypted si-
multaneously, and no information of the keyword and data
is revealed from the ciphertext, as in PEKS/PKE.
Secure Searchability: A secure keyword search is allowed,
as in PEKS.
Keyed Homomorphic Property: No one, except a user
who has a homomorphic operation key, can perform homo-
morphic operations, and CCA security is guaranteed, as in
KH-PKE.
Mis-operation Resistance: The evaluation algorithm posts
alert to homomorphic operations for ciphertexts associated
with diﬀerent keywords. Even if one intentionally or acci-
dentally performs the homomorphic operations against such
ciphertexts, the decryption algorithm rejects it, and the re-
ceiver can recognize a mis-operation happens in the evalua-
tion phase.
See Figure 1 for a brief description of MR-SHE. A receiver (a
researcher) setups a key pair (pk, sk), and a data holder (a
hospital) encrypts a medical record M and its disease name
ω by using the public key of the receiver pk, and sends its ci-
phertext to the server. No information of ω and M is leaked
from the ciphertext. For a disease name ω, the receiver
computes a trapdoor tω which can be used for searching
ciphertexts associated with ω, and also computes a homo-
morphic operation key hkω which can be used for performing
homomorphic operations over M to ciphertexts associated
with ω. The receiver secretly sends tω and hkω to a server.
The server searches ciphertexts associated with ω by using
tω, and performs homomorphic operations F to ciphertexts
associated with ω by using hkω.2 Finally, the server sends
a ciphertext of F (M ) to the receiver, and the receiver ob-
2Remark that our scheme inherits linear search complexity
of PEKS.
217tains F (M ) by decrypting the ciphertext using sk.3
It is
particularly worth noting that even if the server performs
homomorphic operations against ciphertexts related to ω′
by using hkω, where ω 6= ω′, the evaluation algorithm de-
tects this fact. Moreover, even if one forcibly performs the
homomorphic operations against such ciphertexts, a cipher-
text associated with a random keyword is generated, the
decryption algorithm rejects it, and the receiver can recog-
nize such a mis-operation happens in the evaluation phase.
Technically, we point out that homomorphic operation
keys can be trapdoors for searching whereas decryption keys
are trapdoors in the Abdalla et al. construction [2]. That