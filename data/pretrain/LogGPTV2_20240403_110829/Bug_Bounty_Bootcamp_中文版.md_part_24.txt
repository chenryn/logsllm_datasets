    Not shown: 992 closed ports
    PORT STATE SERVICE
    22/tcp open ssh
    25/tcp filtered smtp
    80/tcp open http
    135/tcp filtered msrpc
    139/tcp filtered netbios-ssn
    445/tcp filtered microsoft-ds
    9929/tcp open nping-echo
    31337/tcp open Elite
    Nmap done: 1 IP address (1 host up) scanned in 2.43 seconds
You might want to trim the irrelevant messages from the file so it looks
more like this:
你可能需要从文件中修剪不相关的消息，使其看起来更像这样：
    PORT STATE SERVICE
    22/tcp open ssh
    25/tcp filtered smtp
    80/tcp open http
    135/tcp filtered msrpc
    139/tcp filtered netbios-ssn
    445/tcp filtered microsoft-ds
    9929/tcp open nping-echo
    31337/tcp open Elite
Use this command to filter out the messages at the start and end of
Nmap's output and keep only the essential part of the report:
使用此命令过滤掉Nmap输出的开头和结尾的消息，只保留报告的关键部分：
    grep -E "^\S+\s+\S+\s+\S+$" DIRECTORY/nmap > DIRECTORY/nmap_cleaned
The `      -E     ` flag tells `      grep     ` you're using a regex. A
regex consists of two parts: constants and operators. *Constants* are
sets of strings, while *operators* are symbols that denote operations
over these strings. These two elements together make regex a powerful
tool of pattern matching. Here's a quick overview of regex operators
that represent characters:
-E标志告诉grep你正在使用正则表达式。正则表达式由常量和运算符两部分组成。常量是一组字符串，而运算符是表示对这些字符串进行操作的符号。这两个元素共同使正则表达式成为强大的模式匹配工具。以下是表示字符的正则表达式运算符的快速概述：
1.  `       \d      ` matches any digit.
2.  `       \w      ` matches any character.
3.  `       \s      ` matches any whitespace, and `       \S      `
    matches any non-whitespace.
4.  `       .      ` matches with any single character.
5.  `       \      ` escapes a special character.
6.  `       ^      ` matches the start of the string or line.
7.  `       $      ` matches the end of the string or line.
[ ]{#c05.xhtml#Page_90 .pagebreak title="90"} Several operators also
specify the number of characters to match:
一些运算符还指定要匹配的字符数：
1.  `       *      ` matches the preceding character zero or more times.
2.  `       +      ` matches the preceding character one or more times.
3.  `       {3}      ` matches the preceding character three times.
4.  `       {1, 3}      ` matches the preceding character one to three
    times.
5.  `       {1, }      ` matches the preceding character one or more
    times.
6.  `       [      ` `       abc      `{.variable} `       ]      `
    matches one of the characters within the brackets.
7.  `       [      ` `       a      `{.variable} `       -      `
    `       z      `{.variable} `       ]      ` matches one of the
    characters within the range of `       a      `{.variable} to
    `       z      `{.variable} .
8.  `       (      ` `       a      `{.variable} `       |      `
    `       b      `{.variable} `       |      `
    `       c      `{.variable} `       )      ` matches either
    `       a      `{.variable} or `       b      `{.variable} or
    `       c      `{.variable} .
Let's take another look at our regex expression here. Remember how
`      \s     ` matches any whitespace, and `      \S     ` matches any
non-whitespace? This means `      \s+     ` would match any whitespace
one or more characters long, and `      \S+     ` would match any
non-whitespace one or more characters long. This regex pattern specifies
that we should extract lines that contain three strings separated by two
whitespaces:
让我们再看一下我们的正则表达式。记得 \\s 匹配任何空格，而 \\S
匹配任何非空白字符吗？这意味着 \\s+ 将匹配任何一个或多个字符长的空格，而
\\S+
将匹配任何一个或多个字符长的非空白。此正则表达式模式指定我们应该提取包含由两个空格分隔的三个字符串的行：
    "^\S+\s+\S+\s+\S+$"
The filtered output will look like this:
筛选后的输出将如下所示：
    PORT STATE SERVICE
    22/tcp open ssh
    25/tcp filtered smtp
    80/tcp open http
    135/tcp filtered msrpc
    139/tcp filtered netbios-ssn
    445/tcp filtered microsoft-ds
    9929/tcp open nping-echo
    31337/tcp open Elite
To account for extra whitespaces that might be in the command output,
let's add two more optional spaces around our search string:
为了考虑命令输出中可能存在的额外空格，请在我们的搜索字符串周围再添加两个可选的空格：
    "^\s*\S+\s+\S+\s+\S+\s*$"
You can use many more advanced regex features to perform more
sophisticated matching. However, this simple set of operators serves
well for our purposes. For a complete guide to regex syntax, read
RexEgg's cheat sheet (
[https://www.rexegg.com/regex-quickstart.html](https://www.rexegg.com/regex-quickstart.html){.LinkURL}
).
你可以使用许多更高级的正则表达式功能来执行更复杂的匹配。但是，这个简单的操作符集对我们的目的非常有用。有关正则表达式语法的完整指南，请阅读RexEgg的备忘单（https://www.rexegg.com/regex-quickstart.html）。
### Building a Master Report {#c05.xhtml#h2-501546c05-0016}
What if you want to produce a master report from all three output files?
You need to parse the JSON file from crt.sh. You can do this with
`      jq     ` , a command line utility that processes JSON. If we
examine the JSON output file from crt.sh, we can see that we need to
extract the `      name_value     ` field of each certificate item to
extract domain names. This command does just that:
如果您想从所有三个输出文件中生成主报告怎么办？您需要解析crt.sh中的JSON文件。您可以使用jq，这是一种处理JSON的命令行实用程序。如果我们检查crt.sh的JSON输出文件，我们可以看到我们需要提取每个证书项目的name_value字段以提取域名。这个命令就是这样做的：
    $ jq -r ".[] | .name_value" $DOMAIN/crt
[ ]{#c05.xhtml#Page_91 .pagebreak title="91"} The `      -r     ` flag
tells `      jq     ` to write the output directly to standard output
rather than format it as JSON strings. The `      .[]     ` iterates
through the array within the JSON file, and `      .name_value     `
extracts the `      name_value     ` field of each item. Finally,
`      $DOMAIN/crt     ` is the input file to the `      jq     `
command. To learn more about how `      jq     ` works, read its manual
(
[https://stedolan.github.io/jq/manual/](https://stedolan.github.io/jq/manual/){.LinkURL}
).
-r标志告诉jq直接将输出写入标准输出，而不是将其格式化为JSON字符串。 .
\[\]遍历JSON文件中的数组，.name_value提取每个项目的name_value字段。最后，\$
DOMAIN /
crt是传递给jq命令的输入文件。要了解有关jq如何工作的更多信息，请阅读其手册（https://stedolan.github.io/jq/manual/）。
To combine all output files into a master report, write a script like
this:
将所有输出文件组合成主报告，请编写以下脚本：
将所有输出文件组合成主报告，编写类似于此的脚本：
    #!/bin/bash
    PATH_TO_DIRSEARCH="/Users/vickieli/tools/dirsearch"
    DOMAIN=$1
    DIRECTORY=${DOMAIN}_recon
    echo "Creating directory $DIRECTORY."
    mkdir $DIRECTORY
    nmap_scan()
    {
      nmap $DOMAIN > $DIRECTORY/nmap
      echo "The results of nmap scan are stored in $DIRECTORY/nmap."
    }
    dirsearch_scan()
    {
      $PATH_TO_DIRSEARCH/dirsearch.py -u $DOMAIN -e php --simple-report=$DIRECTORY/dirsearch
      echo "The results of dirsearch scan are stored in $DIRECTORY/dirsearch."
    }
    crt_scan()
    {
      curl "https://crt.sh/?q=$DOMAIN&output=json" -o $DIRECTORY/crt
      echo "The results of cert parsing is stored in $DIRECTORY/crt."
    }
    case $2 in
      nmap-only)
        nmap_scan
        ;;
      dirsearch-only)
        dirsearch_scan
        ;;
      crt-only)
        crt_scan
        ;;
      *)
        nmap_scan
        dirsearch_scan
        crt_scan
        ;;     
    esac
    echo "Generating recon report from output files..."
    TODAY=$(date)
    echo "This scan was created on $TODAY" > $DIRECTORY/report 1
    echo "Results for Nmap:" >> $DIRECTORY/report
    grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report 2
    echo "Results for Dirsearch:" >> $DIRECTORY/report
    cat $DIRECTORY/dirsearch >> $DIRECTORY/report 3
    echo "Results for crt.sh:" >> $DIRECTORY/report
    jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report 4
[ ]{#c05.xhtml#Page_92 .pagebreak title="92"} First, we create a new
file named *report* and write today's date into it [ 1 ]{.CodeAnnotation
aria-label="annotation1"} to keep track of when the report was
generated. We then append the results of the `      nmap     ` and
`      dirsearch     ` commands into the report file [ 2
]{.CodeAnnotation aria-label="annotation2"} . The `      cat     `
command prints the contents of a file to standard output, but we can
also use it to redirect the content of the file into another file [ 3
]{.CodeAnnotation aria-label="annotation3"} . Finally, we extract domain
names from the crt.sh report and append it to the end of the report file
[ 4 ]{.CodeAnnotation aria-label="annotation4"} .
首先，我们创建一个名为 report 的新文件，并将今天的日期写入其中
1，以跟踪报告生成的时间。然后，将 nmap 和 dirsearch
命令的结果追加到报告文件中 2。cat
命令可以将文件内容打印到标准输出，但我们也可以使用它将文件内容重定向到另一个文件
3。最后，我们从 crt.sh 报告中提取域名，并将其追加到报告文件的末尾 4。
### Scanning Multiple Domains {#c05.xhtml#h2-501546c05-0017}
What if we want to scan multiple domains at once? When reconning a
target, we might start with several of the organization's domain names.
For example, we know that Facebook owns both *facebook.com* and
*fbcdn.net* . But our current script allows us to scan only one domain
at a time. We need to write a tool that can scan multiple domains with a
single command, like this:
如果我们想要一次扫描多个域名怎么办？在对目标进行侦察时，我们可能会从组织的几个域名开始。例如，我们知道Facebook拥有facebook.com和fbcdn.net。但是我们当前的脚本只允许我们一次只扫描一个域名。我们需要编写一个工具，可以用一个命令扫描多个域名，就像这样：
    ./recon.sh facebook.com fbcdn.net nmap-only
When we scan multiple domains like this, we need a way to distinguish
which arguments specify the scan `      MODE     ` and which specify
target domains. As you've already seen from the tools I introduced, most
tools allow users to modify the behavior of a tool by using command line
*option* *s* or *flags* , such as `      -u     ` and
`      --simple-report     ` .
当我们像这样扫描多个域时，我们需要一种方法来区分哪些参数指定扫描模式，哪些参数指定目标域。正如我介绍的工具已经表明的那样，大多数工具允许用户使用命令行选项或标志（例如
-u 和\--简单报告）来修改工具的行为。
The `      getopts     ` tool parses options from the command line by
using single-character flags. Its syntax is as follows, where
`      OPTSTRING     `{.variable} specifies the option letters that
`      getopts     ` should recognize. For example, if it should
recognize the options `      -m     ` and `      -i     ` , you should
specify `      mi     ` . If you want an option to contain argument
values, the letter should be followed by a colon, like this:
`      m:i     ` . The `      NAME     `{.variable} argument specifies
the variable name that stores the option letter.
getopts工具使用单字母标志从命令行解析选项。它的语法如下，其中OPTSTRING指定getopts应该识别的选项字母。例如，如果它应该识别选项-m和-i，则应该指定mi。如果您希望选项包含参数值，则字母后面应跟冒号，如此m：i。NAME参数指定存储选项字母的变量名称。
    getopts OPTSTRING NAME
To implement our multiple-domain scan functionality, we can let users
use an `      -m     ` flag to specify the scan mode and assume that all
other arguments are domains. Here, we tell `      getopts     ` to
recognize an option if the option flag is `      -m     ` and that this
option should contain an input value. The `      getopts     ` tool also
automatically stores the value of any options into the
`      $OPTARG     ` variable. We can store that value into a variable
named `      MODE:     `