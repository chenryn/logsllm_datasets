        - redirect_uri：表示重定向 URI，必选项，且必须与第一步中的该参数值保持一致。
        - client_id：表示客户端 ID，必选项。
        上面 URL 中，`client_id` 参数和 `client_secret` 参数用来让 B 确认 A 的身份（`client_secret` 参数是保密的，因此只能在后端发请求），`grant_type` 参数的值是 `AUTHORIZATION_CODE`，表示采用的授权方式是授权码，`code` 参数是上一步拿到的授权码，`redirect_uri` 参数是令牌颁发后的回调网址。
    - 第四步
        B 网站收到请求以后，就会颁发令牌。具体做法是向 redirect_uri 指定的网址，发送一段 JSON 数据。
        ```
        {
        "access_token":"ACCESS_TOKEN",
        "token_type":"bearer",
        "expires_in":2592000,
        "refresh_token":"REFRESH_TOKEN",
        "scope":"read",
        "uid":100101,
        "info":{...}
        }
        ```
        包含以下参数：
        - access_token：表示访问令牌，必选项。
        - token_type：表示令牌类型，该值大小写不敏感，必选项，可以是 bearer 类型或 mac 类型。
        - expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。
        - refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。
        - scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。
        上面 JSON 数据中，`access_token` 字段就是令牌，A 网站在后端拿到了。
- 隐藏式/简化模式（implicit）: 允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）"隐藏式"（implicit）,结合移动应用或 Web App 使用.
    有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。
    - 第一步
        A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。
        ```
        https://b.com/oauth/authorize?
        response_type=token&
        client_id=CLIENT_ID&
        redirect_uri=CALLBACK_URL&
        scope=read
        ```
        包含以下参数：
        - response_type：表示授权类型，此处的值固定为 "token"，必选项。
        - client_id：表示客户端的 ID，必选项。
        - redirect_uri：表示重定向的 URI，可选项。
        - scope：表示权限范围，可选项。
        - state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
        上面 URL 中，`response_type` 参数为 token，表示要求直接返回令牌。
    - 第二步
        用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回 `redirect_uri` 参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。
        ```
        https://a.com/callback#token=ACCESS_TOKEN
        ```
        上面 URL 中，token 参数就是令牌，A 网站因此直接在前端拿到令牌。
        注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在"中间人攻击"的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。
        这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。
- 密码式（password）：如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为"密码式"（password），例如同个组织的内部或外部应用.
    - 第一步
        A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。
        ```
        https://oauth.b.com/token?
        grant_type=password&
        username=USERNAME&
        password=PASSWORD&
        client_id=CLIENT_ID
        ```
        包含以下参数：
        - grant_type：表示授权类型，此处的值固定为"password"，必选项。
        - username：表示用户名，必选项。
        - password：表示用户的密码，必选项。
        - scope：表示权限范围，可选项。
        上面 URL 中，`grant_type` 参数是授权方式，这里的 `password` 表示"密码式"，`username` 和 `password` 是 B 的用户名和密码。
    - 第二步
        B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。
        这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。
- 客户端凭证(client credentials) : 命令行下请求令牌,比如百度 API Store.
    - 第一步
        A 应用在命令行向 B 发出请求。
        ```
        https://oauth.b.com/token?
        grant_type=client_credentials&
        client_id=CLIENT_ID&
        client_secret=CLIENT_SECRET
        ```
        上面 URL 中，`grant_type` 参数等于 `client_credentials` 表示采用凭证式，`client_id` 和 `client_secret` 用来让 B 确认 A 的身份。
    第二步，B 网站验证通过以后，直接返回令牌。
    这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。
**令牌的使用**
A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。
此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个 `Authorization` 字段，令牌就放在这个字段里面。
```
curl -H "Authorization: Bearer ACCESS_TOKEN" \
"https://api.b.com"
```
上面命令中，`ACCESS_TOKEN` 就是拿到的令牌。
**更新令牌**
令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。
具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。
```
https://b.com/oauth/token?
  grant_type=refresh_token&
  client_id=CLIENT_ID&
  client_secret=CLIENT_SECRET&
  refresh_token=REFRESH_TOKEN
```
包含以下参数：
- granttype：表示使用的授权模式，此处的值固定为 "refreshtoken"，必选项。
- refresh_token：表示早前收到的更新令牌，必选项。
- scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。
上面 URL 中，`grant_type` 参数为 `refresh_token` 表示要求更新令牌，`client_id` 参数和 `client_secret` 参数用于确认身份，`refresh_token` 参数就是用于更新令牌的令牌。
B 网站验证通过以后，就会颁发新的令牌。
**令牌与密码的区别**
令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。
1. 令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。
2. 令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。
3. 令牌有权限范围（scope），比如只能访问A应用。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。
上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。
注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。