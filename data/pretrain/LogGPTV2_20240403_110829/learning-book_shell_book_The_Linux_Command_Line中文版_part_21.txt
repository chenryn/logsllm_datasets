## Page 164
[ne@linuxbox -]$ vils-output.txt
再一次看到我们的文件列表：
tota1 343700
ruxr-xr-x 1 root root
31316 2007-12-05 08:58 [
移动光标到第三行，然后输入以下ex命令：
r foo.txt
这个：r命令（是“read”的简称）把指定的文件插入到光标位置之前。现在屏幕应该看起来
像这样：
tota1 343700
31316 2007-12-05 08:58 [
The quick brown fox junped over the lazy dog. It vas coo1.
Line 2
Line 3
Line 4
Line 5
rvxr-xr-x 1 root root
111276 2008-01-31 13:36 a2p
13.9保存工作
像vi中的其它操作一样，有几种不同的方法来保存我们所修改的文件。我们已经研究了：w这
个ex命令，但还有几种方法，可能我们也觉得有帮助。
在命令模式下，输入ZZ就会保存并退出当前文件。同样地，ex命令：wq把：w和：q命令结
合到一起，来完成保存和退出任务。
163
---
## Page 165
这个：w命令也可以指定可选的文件名。这个的作用就如“SaveAs.”。例如，如果我们正在
编辑foo.txt文件，想要保存一个副本，叫做fool.txt，那么我们可以执行以下命令：
:α foo1.txt
注意：当上面的命令以一个新名字保存文件时，它并没有更改你正在编辑的文件的名字。如
果你继续编辑，你还是在编辑文件foo.txt，而不是fool.txt
13.10拓展阅读
即使把这章所学的内容都加起来，我们也只是学了vi和vim的一点儿皮毛而已。这里有一些
在线资料，可以帮助你进一步掌握vi°
·学习vi编辑器一一本来自于Wikipedia的Wikibook，是一本关于vi的简要指南，并介
绍了几个类似vi的程序，其中包括vim。它可以在以下链接中得到：
http://en.wikibooks.org/wiki/Vi
·TheVimBook一vim项目包括一本书，570页，（几乎）包含了vim的全部特性。你能
在下面链接中找到它：
·Wikipedia上关于Bill Joy（vi 创始人）的文章。
http://en.wikipedia.org/wiki/Bill_Joy
·Wikipedia上关于Bram Moolenaar（vim 作者）的文章：
http:/ /en.wikipedia.org/wiki/Bram_Moolenaa
·Wikipedia上关于开头作者提到的Chopsticks 钢琴曲的介绍：
·Youku 上视频一段 Chopsticks"(The Celebrated Chop Waltz) on Piano:
164
---
## Page 166
14”自定制shell提示符
在这一章中，我们将会看一下表面上看来很碎的细节一shell提示符。但这会揭示一些shell
和终端仿真器的内部工作方式。
和Linux内的许多程序一样，shell提示符是可高度配置的，虽然我们把它相当多地看作是
理所当然的，但是我们一旦学会了怎样控制它，shell提示符是一个相当有用的工具。
14.1解剖一个提示符
我们默认的提示符看起来像这样：
[ne@linuxbox -]$
注意它包含我们的用户名，主机名和当前工作目录，但是它又是怎样得到这些东西的呢？结
果证明非常简单。提示符是由一个环境变量定义的，叫做PS1（是“prompt stringone”的简
写）。我们可以通过echo命令来查看PS1的内容。
[ne@linuxbox -]$ echo $PS1
[ue\h\W] $
注意：如果你shell提示符的内容和上例不是一模一样，也不必担心。每个Linux发行版定
义的提示符稍微有点不同，其中一些相当异于寻常。
165
---
## Page 167
从输出结果中，我们看到那个PS1环境变量包含一些这样的字符，比方说中括号，α符号，
和美元符号，但是剩余部分就是个谜。我们中一些机敏的人会把这些看作是由反斜杠转义的特
殊字符，就像我们在第八章中看到的一样。这里是一部分字符列表，在提示符中shell会特殊
对待这些字符：
序列
显示值
la
以ASCII格式编码的铃声，当遇到这个转义序列时，计算机
会发出嚼噶的响声。
P\
以日，月，天格式来表示当前日期。例如.“MonMay 26.”
h
本地机的主机名，但不带末尾的域名。
\H
完整的主机名。
Li
运行在当前shell会话中的工作数。
1
当前终端设备名。
一个换行符。
一个回车符。
8
shell 程序名。
以 24小时制，hours:minutes:seconds 的格式表示当前时间.
\T
以12小时制表示当前时间。
1@
以12小时制，AM/PM格式来表示当前时间。
1A
以24 小时制，hoursminutes格式表示当前时间。
当前用户名。
v
shell程序的版本号。
V
Version and release numbers of the shell.
当前工作目录名。
W
当前工作目录名的最后部分。
当前命令的历史号。
#
当前shell会话中的命令数。
1$
这会显示一个"$”字符，除非你拥有超级用户权限。在那种
情况下，它会显示一个"#”字符。
标志着一系列一个或多个非打印字符的开始。这被用来嵌
入非打印的控制字符。这些字符以某种方式来操作终端仿真
器，比方说移动光标或者是更改文本颜色。
标志着非打印字符序列结束。
166
---
## Page 168
表14-1:Shell提示符中用到的转义字符
14.2试试一些可替代的提示符设计
参照这个特殊字符列表，我们可以更改提示符来看一下效果。首先，我们把原来提示符字符串
的内容备份一下，以备之后恢复原貌。为了完成备份，我们把已有的字符串复制到另一个shell
变量中，这个变量是我们自己创造的。
[ne@linuxbox -]$ ps1_o1d=*$PS1"
我们新创建了一个叫做psl_old的变量，并把变量PS1的值赋ps1_old。通过echo命令可
以证明我们的确复制了PS1的值。
[neglinuxbox -]$ echo $ps1_o1d
$[]
在终端会话中，我们能在任一时间复原提示符，只要简单地反向操作就可以了。
Ptosds,=TSd s[- xoqxnurteou]
现在，我们准备开始，让我们看看如果有一个空的字符申会发生什么：
[ne@linuxbox -]$ PS1=
如果我们没有给提示字符串赋值，那么我们什么也得不到。根本没有提示字符申！提示符仍
然在那里，但是什么也不显示，正如我们所要求的那样。我们将用一个最小的提示符来代替它：
PS1=*\$*
167
---
## Page 169
候，这个空格把美元符号和光标分离开。
在提示符中添加一个响铃：
$ PS1="\a\$ *
现在每次提示符显示的时候，我们应该能听到喘声。这会变得很烦人，但是它可能会很有
用，特别是当一个需要运行很长时间的命令执行完后，我们要得到通知。
下一步，让我们试着创建一个信息丰富的提示符，包含主机名和当天时间的信息。
$ PS1="\A \b 1$ “
17:33 linuxbox $
试试其他上表中列出的转义序列，看看你能否想出精彩的新提示符。
14.3添加颜色
大多数终端仿真器程序支持一定的非打印字符序列来控制，比方说字符属性（像颜色，黑体和
可怕的闪烁）和光标位置。我们会更深入地讨论光标位置，但首先我们要看一下字体颜色。
混乱的终端时代
回溯到终端连接到远端计算机的时代，有许多竞争的终端品牌，它们各自工作
不同。它们有着不同的键盘，以不同的方式来解释控制信息。Unix和类Unix的
系统有两个相当复杂的子系统来处理终端控制领域的混乱局面（称为termcap和
terminfo）。如果你查看一下终端仿真器最底层的属性设置，可能会找到一个关于终
端仿真器类型的设置。
为了努力使所有的终端都讲某种通用语言，美国国家标准委员会（ANSI）制定
了一套标准的字符序列集合来控制视频终端。原先DOS用户会记得ANSI.SYS文
件，这是一个用来使这些编码解释生效的文件。
字符颜色是由发送到终端仿真器的一个嵌入到了要显示的字符流中的ANSI转义编码来控
制的。这个控制编码不会“打印”到屏幕上，而是被终端解释为一个指令。正如我们在上表看
168
---
## Page 170
到的字符序列，这个“和序列被用来封装这些非打印字符。一个ANSI转义编码以一个八进
制033（这个编码是由退出按键产生的）开头，其后跟着一个可选的字符属性，在之后是一个
指令。例如，把文本颜色设为正常（attribute=0），黑色文本的编码如下：
\033[0;30±
这里是一个可用的文本颜色列表。注意这些颜色被分为两组，由应用程序粗体字符属性（1）
分化开来，这个属性可以描绘出“浅”色文本。
序列
文本颜色
序列
文本颜色
黑色
\033[1;30m
深灰色
红色
\033[1;31m
浅红色
绿色
\033[1;32m
浅绿色
棕色
\033[1;33m
黄色
蓝色
\033[1;34m
浅蓝色
粉红
\033[1;35m
浅粉色
青色
\033[1;36m
浅青色
浅灰色
\033[1;37m
白色
表14-2：用转义序列来设置文本颜色
让我们试着制作一个红色提示符。我们将在开头加入转义编码：
$ PS1=′\[\033[0;31m\]\$
$
我们的提示符生效了，但是注意我们在提示符之后输入的文本也是红色的。为了修改这个
问题，我们将添加另一个转义编码到这个提示符的末尾来告诉终端仿真器恢复到原来的颜色。
\u]c$\[
$
这看起来要好些！
169
---
## Page 171
也有可能要设置文本的背景颜色，使用下面列出的转义编码。这个背景颜色不支持黑体属
性。
033[0;40m
蓝色
033[1;44m
黑色
033[0;41m
红色
\033[1;45m
紫色
\033[0;42m
绿色
\033[1:46m
青色
^033[0;43m
棕色
\033[1;47m
浅灰色
表14-3:用转义序列来设置背景颜色
我们可以创建一个带有红色背景的提示符，只是对第一个转义编码做个简单的修改。
[]0$\[w0],=Sd$
$
试试这些颜色编码，看看你能定制出怎样的提示符！
注意：除了正常的（0)和黑体（1)字符属性之外，文本也可以具有下划线（4).闪烁（5).和
反向（7）属性。为了拥有好品味，然而，许多终端仿真器拒绝使用这个闪烁属性。
14.4
移动光标
转义编码也可以用来定位光标。这些编码被普遍地用来，每次当提示符出现的时候，会在屏幕
的不同位置比如说上面一个角落，显示一个时钟或者其它一些信息。这里是一系列用来定位光
标的转义编码：
转义编码
行动
H\
把光标移到第1行，第c列。
\033[nA
把光标向上移动n行。
\033[nB
把光标向下移动n行。
Ou]ego
把光标向前移动n个字符。
033[nD
把光标向后移动n个字符。
170
---
## Page 172
\033[2J
清空屏幕，把光标移到左上角（第零行，第零列）。
清空从光标位置到当前行末的内容。
存储当前光标位置。
n]eso
唤醒之前存储的光标位置。
表14-4:光标移动转义序列
使用上面的编码，我们将构建一个提示符，每次当这个提示符出现的时候，会在屏幕的上方
画出一个包含时钟（由黄色文本渲染）的红色长条。构建好的提示符的编码就是这串看起来令
人敬畏的字符串：
PS1= *\ [\033 [=\033 [0 ;0B\033 [0 ; 41α\033[K\033 [1; 33m\t\033 [0m\033 [u\]