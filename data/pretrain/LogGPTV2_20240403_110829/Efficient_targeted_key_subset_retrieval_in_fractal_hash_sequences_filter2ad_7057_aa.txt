title:Efficient targeted key subset retrieval in fractal hash sequences
author:Kelsey Cairns and
Thoshitha T. Gamage and
Carl Hauser
Efﬁcient Targeted Key Subset Retrieval in Fractal Hash
Sequences
Kelsey Cairns
∗
Washington State University
Pullman, WA, USA
PI:EMAIL
Thoshitha Gamage
Washington State University
PI:EMAIL
Pullman, WA, USA
Carl Hauser
Washington State University
PI:EMAIL
Pullman, WA, USA
ABSTRACT
This paper presents a new hash chain traversal strategy
which improves performance of hash chain based one-time
authentication schemes. This work is motivated by the need
for eﬃcient message authentication in low-latency multicast
systems. Proposed solutions such as TV-OTS rely on hash
chain generated values for keys, achieving reliable security
by using only a small subset of generated values from each
chain. However, protocols using hash chains are limited by
the rate at which a hash chain traversal is able to supply
keys. The new algorithm uses the same structure as Frac-
tal Hash Traversal, but eliminates redundant operations in-
curred when used with applications such as TV-OTS. Per-
formance is measured in terms of savings and is proportional
to the chain-distance between consecutively retrieved values.
For a distance of δ, we achieve Θ(δ log2(δ)) savings, which
is shown analytically and supported by empirical tests.
Categories and Subject Descriptors
F.2.2 [Analysis of Algorithms and Problem Complex-
ity]: Nonnumerical Algorithms and Problems—computations
on discrete structures
∗This research was funded in part by Department of Energy
Award Number DE-OE0000097 (TCIPG).
Disclaimer: This report was prepared as an account of
work sponsored by an agency of the United States Gov-
ernment. Neither the United States Government nor any
agency thereof, nor any of their employees, makes any war-
ranty, express or implied, or assumes any legal liability or
responsibility for the accuracy, completeness, or usefulness
of any information, apparatus, product, or process disclosed,
or represents that its use would not infringe privately owned
rights. Reference herein to any speciﬁc commercial prod-
uct, process, or service by trade name, trademark, man-
ufacturer, or otherwise does not necessarily constitute or
imply its endorsement, recommendation, or favoring by the
United States Government or any agency thereof. The views
and opinions of authors expressed herein do not necessarily
state or reﬂect those of the United States Government or
any agency thereof.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516739 .
Keywords
Key Management; Hash Chain; Traversal; Key Retrieval;
Data Authentication; Time Validation; One-Time Signature
1.
INTRODUCTION
A class of emerging applications — including those de-
signed to control critical infrastructure systems — requires
reliable message authentication in multicast environments.
For instance, applications related to the power grid rely on
several types of authenticated messages, some of which initi-
ate control actions. These control actions are responsible for
regulating physical characteristics that inﬂuence the power
ﬂows in the grid. A falsiﬁed signal is potentially very dan-
gerous as it could be part of an attack intended to damage
costly equipment or cause failure within the grid.
A general solution to the multicast authentication prob-
lem, one suitable for practically any multicast application,
has yet to be found. Existing protocols tend to support spe-
ciﬁc classes of applications, with characteristics that may
not be tolerable to others [3]. For low latency applications
such as power grid control, the questions about appropriate
multicast authentication protocols remain unsettled.
The long standing solution for multicast authentication,
RSA [19], has been shown unsuitable for low latency applica-
tions [6]. RSA relies on modular exponentiation, an expen-
sive operation which must be performed on a per-message
basis. Status messages in the power grid can be generated as
frequently as every 16 milliseconds, a rate that may quicken
in the future [1]. If signed using RSA, the signing rate may
actually lag behind the intended sending rate depending on
the capability of the signing devices. This disparity elimi-
nates RSA as a possible protocol for use in many high-rate
systems, leaving a niche to be ﬁlled.
One technique facilitating lower latency authentication is
one-time signatures. The most basic one-time signatures are
used as credentials which allow senders to authenticate their
identity to receivers. These schemes demonstrate the gen-
eral principle used in even sophisticated one-time signature
schemes: a public key is pre-shared between sender and re-
ceivers, and the sender authenticates itself by publishing a
secret which receivers associate with the public key [5, 12].
Usually, the receiver forms this association with a one-way
function of some kind, where the received secret acts as in-
put that reproduces the public key.
If deployed properly,
only the correct sender could know and publish the correct
secret.
This principle can be extended to verify not only the
sender, but also the message contents by having the sender
1273calculate the signature in such a way that receivers must
operate on both the received secret and message contents to
recreate the public key. This way, any modiﬁcation to the
message would cause the signature validation to fail. True to
their name, basic one-time signature schemes can only au-
thenticate one message for each public key. However, more
modern schemes expand on the one-time principle, allowing
multiple messages to be signed per public key [14, 15, 16, 17,
18]. The present challenge is to create a low-latency protocol
which increases this number until key distribution is infre-
quent enough to make the overhead of repeated distribution
tolerable.
The Time-Valid One-Time-Signature (TV-OTS) family of
protocols builds extended-lifetime protocols from one-time
signature schemes with limited lifetimes [21]. TV-OTS ap-
plies a novel key refreshing technique which extends the
overall lifetime of a wide range of one-time signature pro-
tocols. Over the running lifetime of the chosen protocol,
private keys are periodically refreshed in such a way that no
new public keys need to be distributed. If the key refresh
operations can be performed in a short, constant-bounded
time, TV-OTS with Hash of Random Subsets (HORS) [18]
reliably outperforms RSA in terms of signing and veriﬁca-
tion latency [7]. Beyond having the ability to generate and
verify signatures more quickly than RSA, TV-OTS incurs
no additional message delays and imposes no constraints on
the underlying network beyond loose time synchronization.
These properties indicate TV-OTS may be a promising pro-
tocol for use in low-latency systems.
Unfortunately, the only known time-eﬃcient way to man-
age keys for TV-OTS is to store all possible keys in memory.
However, storing all the keys necessary for TV-OTS would
be impractical for many devices. Spatially eﬃcient schemes,
such as Fractal Hash Sequence Representation and Traver-
sal (FHT) which is suggested for use with TV-OTS, do not
allow the constantly bounded retrieval time necessary to en-
sure low latency signing. The standard implementation of
TV-OTS uses HORS [18] as its chosen one-time signature.
This combination is made secure by retrieving keys at cer-
tain probabilities, but unfortunately, this scenario becomes
increasingly time-ineﬃcient as the security of TV-OTS is
increased.
The work presented in this paper aims to ﬁll the gap with
a key management scheme that is eﬃcient for all parameters
of TV-OTS. The purpose of this paper is to:
1. Present a new key management scheme — The new
key management scheme eliminates certain useless op-
erations that are performed by other schemes when
non-consecutive values are retrieved. The new scheme
uses the same structure as FHT, but the algorithm
used to output individual keys is new. The FHT al-
gorithm can only retrieve values consecutively. If non-
consecutive values are retrieved with FHT, the inter-
mediate values must be retrieved and discarded. This
process performs extra hash operations that do not
contribute to ﬁnding the desired value. The Targeting
Traversal method introduces targeted retrievals, which
retrieve non-consecutive values without performing un-
necessary work. Targeted transitions optimize retrieval
time for TV-OTS. Other schemes may beneﬁt as well,
for example TSV signing [14], which uses hash chains
similarly to TV-OTS.
Figure 1: TV-OTS’s multiple hash chains are shown
horizontally. A vertical slice corresponding to the
current time deﬁnes the current key pool. Darkened
circles represent the small subset of keys used in the
creation of a single signature.
2. Verify correctness — The correctness of targeted tran-
sitions is veriﬁed in relation to FHT. A formal proof is
given that each targeted retrieval yields a state equiva-
lent to multiple iterative retrievals performed by FHT.
Inductively, FHT and targeting are shown to yield the
same sequence of values for the same set of retrieval
requests on the same chain.
3. Demonstrate performance improvements — Theoreti-
cal analysis reveals a Θ(δ log2(δ)) bound on computa-
tional savings. Here, δ is the expected distance be-
tween successively retrieved values in the chain, and
is independent of the length of the chain. Experimen-
tal results support this hypothesis, showing improved
performance for TV-OTS. Furthermore, the savings
improve in conjunction with the parameters that make
TV-OTS more secure.
The remainder of this paper is organized as follows: Sec-
tion 2 oﬀers extended background, introducing the prob-
lems associated with TV-OTS and key management in de-
tail. Section 3 describes the new algorithms that lead to
more eﬃcient key management when used with TV-OTS. A
proof of correctness of the proposed algorithms is presented
in 4 followed by experimental results in Section 5. Sections 6
and 7 oﬀer future work and conclusions.
2. RELATED WORK
Two mechanisms are employed by TV-OTS which specif-
ically contribute to the low latency generation of reliable
signatures. First, the keys are generated by hash chains, a
mechanism ﬁrst proposed by Lamport for secure password
authentication [13]. When used for message authentication,
hash chains allow private keys to be refreshed without the
need to distribute new public keys. Secondly, signatures are
generated by HORS, using the keys retrieved from the hash
chains. This sections covers both signature generation and
hash chain management in detail.
2.1 Time-Valid One-Time-Signature
TV-OTS is able to run beyond the lifetime of its chosen
one-time signature scheme by periodically refreshing the pri-
vate keys used to generate signatures. New private keys are
1274supplied by hash chains which allows each used private key
to be used as a public key at a later time. This eliminates
the need to redistribute public keys with each private key
update.
Individual messages are signed and veriﬁed with
the HORS protocol [18]. At signature generation, HORS
chooses a very small subset from an available pool of hash
chain generated keys, where each key is associated with an
individual hash chain1. After t key refreshes, the currently
available key pool contains the tth value from each chain
in a set of hash chains, illustrated in Figure 1. To choose
the keys for each signature, the message contents are hashed
and split into multiple short bit strings by a publicly agreed
upon function. These bit strings are then reinterpreted as
integers within a given range. The allowable range of in-
tegers corresponds to the number of available keys in each
pool and consequently the number of chains. These integers
are used as indices to select keys which are appended to the
message as part of the signature. The TV-OTS signature
must also contain a time stamp, which allows receivers to
determine message freshness and which key pool was used
for message signing.
Veriﬁcation of TV-OTS signatures is the simple process
of verifying message freshness and the individual keys con-
tained in the signature. Receivers ﬁrst use the time stamp
of the received signature to determine that the message was
signed recently enough to be valid. After this, the receiver
follows the same steps as the sender to determine the index
for each key. Once these are computed, each received key
is checked to see if it belongs to the chain with the corre-
sponding index. This requires hashing the received key and
ensuring that a known value from the correct chain can be
recovered by the correct number of hashes. Incoming mes-
sages are considered valid only if this test passes for every
index computed by the receiver.
Signatures maintain their reliability by using, and thus
publicly exposing, only a relatively small portion of each
key pool. This minimizes the chance of an adversary inter-
cepting enough keys to forge the signature of a meaningful
message. While the threat grows with each sent message,
the key refresh interval is set to maintain a negligible prob-
ability of successful forgery [21]. One side eﬀect is that the
number of refresh intervals that pass between two signatures
requiring keys from the same chain is unpredictable. The
keys in between are not retrieved from the hash chains and
moreover, this distance between retrieved keys is unknown
ahead of time. Unfortunately, known hash chain manage-
ment schemes assume that every key will be retrieved. When
this is not the case, such schemes become ineﬃcient and
waste some calculation during each retrieval.
2.2 Hash Chains for One-Time Signatures
The hash chains structure works very well with the prin-
ciples behind one-time signatures, but hash chains can be
diﬃcult to manage in practice. The values contained in a
hash chain form an ordered list. Each value is calculated by
hashing the next value in the list with a chosen one-way hash
function. The entire chain can be derived from a distinct