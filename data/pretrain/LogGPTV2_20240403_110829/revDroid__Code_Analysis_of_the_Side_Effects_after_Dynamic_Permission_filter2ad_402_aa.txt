title:revDroid: Code Analysis of the Side Effects after Dynamic Permission
Revocation of Android Apps
author:Zheran Fang and
Weili Han and
Dong Li and
Zeqing Guo and
Danhao Guo and
Xiaoyang Sean Wang and
Zhiyun Qian and
Hao Chen
revDroid: Code Analysis of the Side Effects after Dynamic
Permission Revocation of Android Apps
Zheran Fang, Weili Han,
Dong Li, Zeqing Guo,
Danhao Guo,
Xiaoyang Sean Wang
Fudan University
PI:EMAIL
Zhiyun Qian
University of California,
PI:EMAIL
Riverside
Hao Chen
ShanghaiTech University
PI:EMAIL
ABSTRACT
Dynamic revocation of permissions of installed Android ap-
plications has been gaining popularity, because of the in-
creasing concern of security and privacy in the Android
platform. However, applications often crash or misbehave
when their permissions are revoked, rendering applications
completely unusable. Even though Google has oﬃcially in-
troduced the new permission mechanism in Android 6.0 to
explicitly support dynamic permission revocation, the issue
still exists.
In this paper, we conduct an empirical study
to understand the latest application practice post Android
6.0. Speciﬁcally, we design a practical tool, referred to as
revDroid, to help us to empirically analyze how often the un-
desirable side eﬀects, especially application crash, can occur
in oﬀ-the-shelf Android applications. From the analysis of
248 popular applications from Google Play Store, revDroid
ﬁnds out that 70% applications and 46% permission-relevant
calls do not appropriately catch exceptions caused by per-
mission revocation, while third-party libraries pay much more
attention to permission revocation. We also use revDroid to
analyze 132 recent malware samples. The result shows that
only 27% malwares and 36% permission-relevant API calls of
malwares fail to consider the permission revocation. In fact,
many of them perform specialized handling of permission
revocation to keep the core malicious logic running. Finally,
revDroid can be used to help developers uncover the unhan-
dled permission revocations during development time and
greatly improve the application quality.
Keywords
Android Security, Permission Over-claim, Permission Revo-
cation, revDroid
1.
INTRODUCTION
The security of Android devices heavily depends on the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897914
eﬀectiveness of the permission mechanism [5, 19, 20]. The
permission mechanism of Android is often considered a se-
vere design ﬂaw of the main-stream Android platform on
the current market, because users usually have to approve
all the permission requests during the application installa-
tion process. Speciﬁcally, the over-claim of permission is
a common issue in the ecosystem of Android applications.
Many reasons, including poor documentations [21], coarse-
grained permissions [9], even irresponsible developers [9], all
contribute to this issue. Unfortunately, users are basically
given the all-or-nothing model.
A practical solution is to revoke permissions separately
after an application is installed. Android 4.3 introduces an
experimental system service called AppOps [14], which can
help users to revoke a subset of permissions after applica-
tions are installed. This functionality of permission revoca-
tion has been provided oﬃcially in Android 6.0 [4]. For ap-
plications targeted at Android 6.0, an Android user does not
need to grant any permissions at install-time. The applica-
tion will request the permissions when it actually needs them
at run-time by showing a dialog to ask for the permission.
Users can also grant or revoke permissions after installa-
tion. Besides these, researchers proposed many frameworks
and mechanisms in the framework layer or the kernel layer
by allowing users to selectively grant permissions to an ap-
plication, e.g., Android Permission Extension (Apex) [31],
MockDroid [11] and AppFence [28].
However, after the permission revocation, applications would
typically crash if they are not written to support permission
revocation, resulting in undesirable user experience. This
issue could be more serious when the new platform of An-
droid 6.0 explicitly enables the dynamic permission revoca-
tion. Based on log analysis of application crash, the tool
Pyandrazzi [29] reports that around 5.8% applications crash
after a permission is removed (which we believe is a signiﬁ-
cant underestimate).
There are a few existing and practical methods to mitigate
the side eﬀects. Firstly, researchers attempt to forge the
data [11, 28, 39, 38] that the applications request. Secondly,
system status, e.g., enabling airplane mode, can be forged
when the applications access corresponding data or perform
corresponding operations [28]. Some of these optimization
methods are adopted in Android 6.0, but we ﬁnd that they
only eliminate application crashes for certain APIs.
We are curious about the real possibilities of application
crashes under Android 6.0. We ﬁnd that the real situation
is worse than previously believed, because Pyandrazzi only
747analyzed the log reported by logcat [3] when running the
applications dynamically, which suﬀers from coverage issues,
because many program paths which lead to the crash are not
run.
In this paper, we show that static code analysis can pro-
vide a much more accurate estimation.
The main contributions of this paper are as follows:
• To analyze the side eﬀects after dynamic permission
revocation of Android applications, we design a prac-
tical tool, referred to as revDroid, based on Soot [34]
and FlowDroid [7]. revDroid can automatically count
the reachable but unhandled SecurityException in
an Android application as the cause of side eﬀects of
permission revocation. revDroid counts an unhandled
permission-relevant invocation, if the invocation does
not belong to either one of the following types: i) the
invocation itself or ancestral call methods are wrapped
by a try and catch block which handles the Securi-
tyException; or ii) the invocation itself or ancestral
call methods are wrapped by a proactive permission
check block which calls permission check methods such
as checkPermission and checkSelfPermission.
• After using revDroid to successfully analyze 248 top
popular applications from Google Play Store, we are
surprised to ﬁnd that 70% applications and 46% permission-
relevant API calls fail to consider permission revoca-
tion. We did experiments to conﬁrm that the uncaught
SecurityException is bound to cause crash. When
we analyze the unhandled SecurityExceptions in four
categories of third-party libraries of Android applica-
tion, we ﬁnd that third-party libraries pay more at-
tention to correctly invoke permission relevant APIs.
These results show that the problem is much more se-
vere than previously concern [29]. This high rate of
unhandled SecurityException also implies that there
is still much work needed from application develop-
ers to meet the new requirement and a tool such as
revDroid can help signiﬁcantly to ease the transition.
• We also use revDroid to analyze 132 recent malware
samples from the M0Droid project [18] by Damshenas
et al. The result shows that 27% malwares and 36%
permission-relevant API calls of malwares fail to con-
sider the permission revocation, which is surprisingly
better compared to top regular applications. After
careful inspection, we believe that malware samples
in fact do deal with permission revocation in order to
keep as much malicious logic running as possible.
In summary, we believe the tool and analysis results are
valuable after Android 6.0 is released, as they can tell how
serious this issue of dynamic permission revocation is when
the developers migrate the state-of-the-art applications to
the new platform. The tool can also help developers and
markets identify unconforming applications.
The rest of this paper is organized as follows: Section 2
introduces the background knowledge and motivation of this
paper. Section 3 designs our code analysis framework. Sec-
tion 4 presents our analysis experiments and results. Sec-
tion 5 discusses the remaining issues. Section 6 introduces
the related work. Section 7 summarizes the paper and in-
troduces our future work.
2. BACKGROUND AND MOTIVATION
2.1 Over-claim of Permissions and Its Coun-
termeasures
Over-claim of permissions is very popular in the current
Android platform [19, 33], because developers and applica-
tion users might have conﬂict of interest [27]. Developers
tend to declare more permissions than necessary because
more permissions will make the development process eas-
ier, allow applications to access more private information
and perform more critical operations. However, application
users who tend to protect their privacy may not know what
the requested permissions mean [23]. Further, before An-
droid 6.0, users have no other choice but to approve all the
permission requests. The issue is made even more severe by
the coarse-grained permissions and insuﬃcient documenta-
tions [20].
The over-claim of permissions breaks the principle of least
privilege (PLP) [32]. This violation of PLP exposes users
to potential privacy leakage and ﬁnancial losses directly or
indirectly. For example, if a standalone game application
requests the SEND_SMS permission which could be unneces-
sary, the permission can be exploited to send premium rate
messages without users’ acknowledgment. As discovered by
Felt et al., about one-third of 940 applications analyzed were
over-privileged, and the most common unnecessary permis-
sions include ACCESS_NETWORK_STATE, READ_PHONE_STATE, AC-
CESS_WIFI_STATE,
and
CALL_PHONE [21]. Au et al. also identiﬁed that 543 out of
1,260 applications required at least one over-claimed permis-
sion [8]. In the new permission mechanism of Android 6.0,
28 permissions falling under PROTECTION_DANGEROUS are di-
vided into 9 permission groups according to their function-
alities, and permissions in the same permission group are
managed as a whole, which makes the permission granular-
ity much coarser [4]. This would lead to the issue of the
over-claim of permissions as well.
WRITE_EXTERNAL_STORAGE,
A major category of countermeasures to the issue is to
allow users to revoke over-claimed permissions at install-
time or run-time. Researchers have proposed several ways
to achieve this goal. For example, Android Permission Ex-
tension (Apex) [31] and Flex-P [30] augmented the Android
application installer to allow users to selectively grant or
revoke permissions, instead of granting or revoking permis-
sions all together. In addition, a permission editor was also
provided to allow users to grant more permissions or revoke
some of the granted permissions even after the application
has been installed. This approach required heavy modiﬁ-
cation to the Android operating system itself, but yielded
a ﬂexible solution [29]. In Android 6.0, Google introduced
a new permission mechanism, where users can deny per-
mission requests at run-time and still continue to use the
application [25].
2.2 Side Effects of Permission Revocation and
Fake Data Methods
Before Android 6.0, Google suggests that the dynamic
permission mechanism would be too much of a burden on
the user, so the Android documentation does not explicitly
instruct application developers to handle cases of permission
revocation [29], and even suggests that application develop-
ers not to worry about run-time failures caused by missing
permissions [5]. In almost all cases the revocation of permis-
748sions will result in a Java SecurityException being thrown
back to the application, although it is not guaranteed ev-
erywhere (for example, the sendBroadcast(Intent) method
checks permissions after the method call has returned and
no exception will be thrown even if there are permission
failures) [5]. Although some of the application developers
will handle the exceptions gracefully, most developers typ-
ically develop applications according to the stock Android
permission mechanism before Android 6.0 and assume that
all the permissions which his or her application requests are
granted when the application is running on users’ devices.
If the SecurityException is not handled, applications are
likely to malfunction, resulting in undesirable user experi-
ence, such as UI freezing, data corruption, or even complete
crash.
As evaluated by Kennedy et al., 39 (5.9%) of the 662 appli-
cations crashed due to permission revocation overall but not
all permissions were equal. Removing the READ_CONTACTS
and ACCESS_FINE_LOCATION permissions had the greatest
impact which caused 20 and 13 applications to crash re-
spectively, while removing the CAMERA, RECORD_AUDIO and
WRITE_SMS permissions respectively never caused crash [29].
To prevent SecurityException from being thrown, many
previous studies, such as MockDroid [11], AppFence [28] and
TISSA [39], leveraged the idea of fake data. That is, when
the user revokes a permission, the Android operating sys-
tem returns fake data to the application, instead of simply
denying the access. For example, the unique identiﬁers of
an Android device (IMEI or IMSI) can be substituted with
fake ones, and the geographic coordinate of a ﬁxed place
can replace that of the device’s real location. This method
attempted to protect the user’s privacy while maintaining
usability.
After Android 6.0 is released, although Google changes
the Android documentation to explicitly instruct applica-
tion developers to handle cases of permission revocation,
it will take application developers a lot of time and eﬀort
to manually examine and modify their applications to sup-
port the new permission mechanism. Moreover, even in the
new permission mechanism, if the user revokes a permis-
sion and the application tries to use a functionality that
requires that permission, the Android operating system will
also throw a SecurityException to the application for some
APIs, for example, the getDeviceId() method of the an-
droid.telephony.TelephonyManager class which is protected
by the READ_PHONE_STATE permission.
the application components. FlowDroid aims for an anal-
ysis with very high recall and precision [7].
2.4 Application Scenarios
Application developers and markets, e.g., Google, may
beneﬁt from tools and frameworks based on revDroid to pro-
vide better user experience when Android permissions are
revoked by the user. In this section, we envision a variety of
scenarios where revDroid could work.
2.4.1 Application Development
As described in Section 2.2, most application developers
are not accustomed to handling SecurityExceptions grace-
fully because the Android development documentation be-
fore Android 6.0 does not explicitly instruct application de-
velopers to handle cases of permission revocation and appli-
cation developers need time to learn the new documentation.
This issue can be mitigated by providing developers a de-
velopment tool based on the revDroid analysis framework.
During the application development process, application de-
velopers can conveniently ﬁnd out the cases where their code
does not handle permission revocation correctly and ﬁx the
issues instantly based on the analysis report of the revDroid
analysis framework. Moreover, this development tool can
be further improved as a plug-in installed right into devel-
opers’ development environment. In this way, programming
issues which may lead to application crash when permissions
are revoked can be ﬁxed before the application packages are
shipped to application markets and end users.
2.4.2 Application Distribution
Application markets such as Google Play Store typically
scan applications automatically when they are ﬁrst pub-
lished (e.g., Bouncer [26] scans for malicious applications).
They can piggyback the test to detect potential crashes
caused by permission revocation with the revDroid analysis
framework. Then, application markets can notify develop-
ers if any potential issue is found, and application develop-
ers can upload a revised version to application markets for
review. Thus application markets can guarantee that appli-
cations provided by them for downloading generally have a
higher quality and better user experience, especially when
they are running on devices allowing users to selectively
grant or revoke permissions of applications.
2.3 Soot and FlowDroid
3. ANALYSIS FRAMEWORK OF REVDROID
revDroid is designed and implemented based on Soot [34]
and FlowDroid [7]. Soot is an analysis and transformation
framework developed by McGill University, which supports
input formats including Java byte-code, Java source code
and Android byte-code. Soot can also produce transformed
code in output formats such as Java byte-code and An-
droid byte-code. Soot provides powerful analysis function-
alities including call graph construction, dead code elimi-