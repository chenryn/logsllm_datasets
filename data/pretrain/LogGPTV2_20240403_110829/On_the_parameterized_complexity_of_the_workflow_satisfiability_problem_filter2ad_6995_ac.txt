d
b
a
c
e
i
f
d
i
h
abc
e
g
h
f g
a | b | c | d | e | f | g | h | i | j
abc | d | e | f g | h | i | j
j
i
abcd
i
abcd
j
e
abcd | e | f gh | i | j
f gh
ef gh
abcd | ef gh | i | j
j
j
ef ghi
abcd
abcd | ef ghi | j
abcdef ghi
abcdef ghi | j
abcdef ghij
abcdef ghij
Figure 3: Building the blocks of an organizational
hierarchy from a management tree
Each management tree thus derived is associated with a
partition; the corresponding partition of U is written be-
low each tree in Figure 3, with a vertical bar indicating the
block boundaries. By construction, the collection of parti-
tions forms a canonical organizational hierarchy. The orga-
nizational hierarchy derived from the management tree in
Figure 3 is displayed in Figure 2. Note that the number
of levels in the organizational hierarchy is equal to 2p + 1,
where p is the number of edges in the longest directed path
in Gman.
Having constructed the organizational hierarchy, we may
now deﬁne constraints on step execution. We will use our
purchase order workﬂow from Figure 1 as an example and
the organizational hierarchy in Figure 2.
We could, for example, deﬁne the constraint (∼5, s1, s2).
In the absence of other constraints, this constraint means
that users from the set {a, b, c, d} or {e, f, g, h, i} (which we
might suppose represent two distinct departments within
the management structure) or user j could raise (step s1)
and approve (step s2) purchase orders, but an attempt by a
user from one department to approve an order raised by a
member of another department would violate the constraint.
We could deﬁne a second constraint ((cid:2)4, s1, s2), which
means that user i must perform one of s1 and s2 (and also
means that no user from{ a, b, c, d, j} can perform either s1
or s2 because there would no way to simultaneously satisfy
constraints (∼5, s1, s2) and ((cid:2)4, s1, s2)). If we assume that
junior members of the department (users e, f , g and h) are
not authorized to approve purchase orders, the collective ef-
fect of the two constraints above and the authorization pol-
icy is to require that (a) purchase orders are only approved
by managers, and (b) purchase orders are only raised by
junior members of staﬀ.
Pursuing the last point brieﬂy, it has long been recognized
that a limitation of role-based access control is the “feature”
that (senior) users assigned to the most powerful roles ac-
crue all the permissions of more junior roles (see [14], for
example). It is interesting to note that the constraints and
the method of constructing an organizational hierarchy de-
scribed above can be used to restrict the steps that senior
managers can perform.
In summary, we believe that our deﬁnition of organiza-
tional hierarchy provides an appropriate way of modeling
hierarchical management structures and supports the spec-
iﬁcation of constraints that provide greater ﬂexibility than
those in the literature [2, 5, 17]. Moreover, as we will see
in the next section, the complexity of WSP for these new
constraints remains ﬁxed-parameter tractable.
Finally, we note that there are several ways in which the
construction of an organizational hierarchy from a manage-
ment tree described above could be modiﬁed: for example,
each iteration might collapse a single sub-tree rather than
all sub-trees or each iteration might immediately collapse
the root node and all the leaf nodes into a single node. Each
construction will give rise to diﬀerent organizational hierar-
chies, some with more levels, some with fewer. These organi-
zational hierarchies each admit the speciﬁcation of diﬀerent
constraints. The study of such hierarchies and the utility
of the constraints that can be deﬁned over them will be the
subject of future work.
4. FPT ALGORITHMS FOR WSP
In this section, we prove a new bound for the ﬁxed parame-
terized complexity of WSP((cid:2)=, =). We also prove that WSP
remains ﬁxed-parameter tractable when we include con-
straints based on equivalence relations and organizational
hierarchies. In order to make the paper self-contained, we
ﬁrst provide a short overview of ﬁxed-parameter complexity
and state an important, recent result in this area.
4.1 Parameterized Complexity
A na¨ıve approach to solving WSP would consider every
possible assignment of users to steps in the workﬂow. There
are nk such assignments if there are n users and k steps,
so an algorithm of this form would have complexity O(cnk),
where c is the number of constraints. Moreover, Wang and
Li showed that WSP is NP-hard, by reducing Graph k-
Colorability to WSP((cid:2)=) [17, Lemma 3]. In short, WSP
is hard to solve in general. The importance of ﬁnding an
eﬃcient algorithm for solving WSP [5] led Wang and Li to
look at the problem from the perspective of parameterized
complexity [17].
Suppose we have an algorithm that solves an NP-hard
861problem in time O(f (k)nd), where n denotes the size of
the input to the problem, k is some (small) parameter of
the problem, f is some function in k only, and d is some
constant (independent of k and n). Then we say the al-
gorithm is a ﬁxed-parameter tractable (FPT) algorithm. If
a problem can be solved using an FPT algorithm then we
say that it is an FPT problem and that it belongs to the
class FPT. Wang and Li showed that WSP(=,(cid:2)=) is FPT:
speciﬁcally, they constructed an algorithm that runs in time
O(kk+1(k − 1)k2
n), where k is the number of steps in
the workﬂow and n is the size of the input to the prob-
lem [17, Theorem 8]; it follows that WSP(=,(cid:2)=) is FPT.
k−1
Wang and Li also proved that WSP is W[1]-hard in gen-
eral [17, Theorem 10]. By deﬁnition, FPT is a subset of W[1]
and a parameterized analog of Cook’s Theorem [8] as well
as the Exponential Time Hypothesis [9,11] strongly support
the widely held view that FPT is not equal to W[1]. One of
the main contributions of this paper is to extend the set of
special cases of WSP that are known to be FPT.
When the runtime O(f (k)nd) is replaced by the much
more powerful O(nf (k)), we obtain the class XP, where each
problem is polynomial-time solvable for any ﬁxed value of
k: There is an inﬁnite number of parameterized complexity
classes between FPT and XP (for each integer t ≥ 1, there
is a class W[t]) and they form the following tower: FPT ⊆
W[1] ⊆ W[2] ⊆ ··· ⊆ W[P] ⊆ XP. For formal deﬁnitions of
Henceforth, we often write (cid:2)O(T ) instead of O(T logd T ) for
classes W[t], see [8, 9], for example.
any constant d. That is, we use the notation (cid:2)O to suppress
polylogarithmic factors. This notation is often used in the
literature on algorithms – see, for example, [3, 12] – to avoid
cumbersome runtime bounds.
Our work on WSP makes use of the following result, due
to Bj¨orklund et al. [3], regarding the complexity of the Max
Weighted Partition problem.
Max Weighted Partition
Input: A setS of k elements and n functions φi,
i ∈ [n], from 2S to integers from the range
[−M, M ] (M ≥ 1).
Output: An n-partition (F1, . . . , Fn) of S that
(cid:3)n
i=1 φi(Fi).
maximizes
Theorem 1. Max Weighted Partition can be solved
in time (cid:2)O(2kn2M ).
4.2 A New Algorithm for WSP
iﬀ π(s) = π(s
(cid:3)
More formally,
We now introduce a new method for solving WSP. The
basic idea is to construct a valid plan by partitioning the set
of steps S into blocks of steps, each of which is allocated to
a single (authorized) user.
let π be a valid plan for a workﬂow
(S, U, (cid:2), A, C) and deﬁne an equivalence relation ∼π on S,
where s ∼π s
). We denote the set of equiv-
alence classes of ∼π by S/π and write [s]π to denote the
equivalence class containing s.
(cid:3)
Now it is easy to see that there are certain subsets S
of S for which there cannot exist a valid plan π such that
(cid:3) ∈ S/π. In particular, consider the constraint ((cid:2)=, s, s
(cid:3)
S
),
for example. Then, for any valid plan π, it must be the case
that [s]π (cid:2)= [s
]π. In other words, there does not exist a valid
plan π such that {s, s
(cid:3)} ∈S/π . We call such sets ineligible.
(cid:3)
(cid:3)
We solve WSP by computing a partition of S in which
each block of the partition is assigned to a diﬀerent user
and each user is authorized to perform all steps in the block
to which she is assigned. Our strategy for solving WSP,
then, is the following:
1. take the powerset of S and eliminate all subsets that
are ineligible;
2. for each remaining set F , identify which users are au-
thorized for all steps in F ;
3. construct a partition of S such that each block is allo-
cated to a user authorized for each step in that block
and no user is allocated to more than one block (we
can ﬁnd such a partition using Theorem 1).
The resulting partition and allocation of users to blocks in
that partition deﬁnes a valid plan.
Remark 1. Note that a constraint ((cid:2)=, S1, S2) is equiv-
alent5 to ((cid:2)=, S1, S2 \ S1) and that a constraint (=, S1, S2)
is always satisﬁed when S1 ∩ S2 (cid:2)= ∅. Thus, in the rest
of the paper we assume that, in constraints ((cid:2)=, S1, S2) and
(=, S1, S2), the sets S1 and S2 are disjoint.
It is easy to determine whether a set is ineligible when
the set of constraints only contains constraints of the form
((cid:2)=, S1, S2) or of the form (=, S1, S2), when S1 is a singleton.
In particular, we have the following simple result, illustrated
schematically in Figure 4.
(cid:3)
1, S
i, for some i ∈ {1, 2}.
(cid:3)
Proposition 1. Let (S, U, (cid:2), A, C) be a workﬂow and let
C contain constraints ((cid:2)=, S1, S2) and (=, S
(cid:3)
2), where S1
1 are singleton sets. Then F ⊆ S is ineligible if either
(cid:3)
and S
of the following conditions hold: (i) F ⊇ S1 ∪ S2; (ii) F ∩
1 ∪ S
(cid:3)
(cid:3)
(S
2) =S
Proof. Suppose (in order to obtain a contradiction) that
F ⊇ S1 ∪ S2 is eligible. Then, by deﬁnition, there must exist
a valid plan π such that F ∈ S/π, which, in turn, means that
a single user has been allocated to all steps in F by π. But
such an allocation violates constraint ((cid:2)=, S1, S2) and hence
the plan is not valid. A similar proof by contradiction can
be used to establish the second result.
F
S1
S2
(a) ((cid:2)=, S1, S2)
F
S1
S2
(b) (=, S1, S2)
F
S2
S1
(c) (=, S1, S2)
Figure 4: Ineligible sets F for constraints (ρ, S1, S2),
ρ ∈ {=,(cid:2)=}
5Equivalent in the sense that a plan π satisﬁes the former
constraint iﬀ it satisﬁes the latter.
862Example 1. Using the workﬂow in Figure 1, for exam-
ple, we ﬁnd that any subset of cardinality four or greater
is ineligible; and all subsets of cardinality three are ineligi-
ble, except for {s1, s3, s6}, {s2, s4, s5} and {s2, s5, s6}. We
also have that {s1} and {s3} are ineligible (because of the
binding-of-duty constraint on s1 and s3). Similarly any su-
perset of {s1} that does not contain s3 is ineligible and vice
versa.
If we were to ﬁnd that there existed a user u, authorized
for s1, s3 and s6, and a diﬀerent user v, authorized for s2,
s4 and s5, then we would know that this instance of WSP is
satisﬁable. Note the requirement that u and v be diﬀerent: if
they were the same then u would perform all steps, violating
all separation-of-duty constraints. Conversely, if we were to
ﬁnd that there is no user authorized for s1 and s3 then we
would know that the workﬂow is unsatisﬁable.
Suppose now that we replace the constraint (=, s1, s3) with
the constraint (=, s1,{s3, s5}), which has the eﬀect of requir-
ing that the same user that creates the order either signs or
countersigns the goods received note (but not both, given the
constraint ((cid:2)=, s3, s5)). Then {s1} is ineligible (as before)
but {s3} and {s1, s5} are no longer ineligible; any superset
of {s3, s5} is ineligible.
Theorem 2. WSP(=,(cid:2)=) can be solved in time (cid:2)O(2k(c +
n2)), where k is the number of steps, c is the number of
constraints and n is the number of users.
Proof. Consider an instance W = (S, U, (cid:2), A, C) of
WSP(=,(cid:2)=). We construct a binary matrix with n rows
(indexed by elements of U ) and 2k columns (indexed by el-