### 2.3 Discretionary Access Control Using References

Implementing discretionary access control (DAC) using references is straightforward. Since access permissions are not granted on a "subject/object" basis, user identities are used solely for authentication. The authentication process is treated as a separate concern and is represented by a unique `login(u)` operation. This method call sets the default reference bags for the calling process according to the user's identity `u`. This is functionally equivalent to the Unix model, where the authentication procedure sets the new process' user ID (UID) and group ID (GID). The `login` operation's success depends on correct authentication, not the execution context, so it has no reference requirements.

An Access Control List (ACL) is the set of user identities whose default reference bags include the required references to perform a given object method call. Modifying an ACL changes the user's default reference bags in the authentication component. If immediate effectiveness is required, this change can be broadcast to all processes. There is no direct equivalent of the Unix "object owner" concept, as "subjects" are not explicitly represented here, and thus there are no `chown` and `chgrp` operations. If needed, object ownership can be modeled using special ACLs: upon process initialization, a reference bag containing only references to objects owned by the process' identity can be created.

### 3. Application to Intrusion Detection

In this section, we present a proof-of-concept intrusion detection scheme for a generic Unix-like operating system. Our goal is to provide users and applications with a known environment and some form of backward compatibility.

As stated in the introduction, we focus on intrusions where an attacker aims to gain unauthorized privileges. Assuming the system implementation prevents any user from performing an operation without the required rights, attacks of interest involve complex sequences of steps that may involve more than one subject identity. Each step, by definition, does not violate the security policy. We term these "attacks by delegation."

We describe how a Unix-like security policy can be implemented using the proposed model and then discuss intrusion detection issues.

#### 3.1 A Model of a Unix-Like Operating Environment

A security policy within the Unix operating environment adheres to the following rules:
- Operations on objects are authorized according to discretionary access control.
- Subject identities require authentication. We make no assumptions about the authentication process itself.

For the system to be secure, it must also conform to a third rule, which current implementations often fail to meet:
- No Unix subject should be able to exploit a privilege that does not correspond to its identity.

The implementation follows the scheme described in Section 2.3. If we consider only the original Unix access control model, relying on "user," "group," and "other" permissions for read, write, and execute operations, we can simplify the definition by considering only these three classes of references. Each user identity is modeled by a reference bag containing the corresponding read, write, and execute references. Similarly, there are reference bags for each group and an additional "other" bag. The default reference bags for each process contain the bag corresponding to the process' UID, all reference bags for groups the user is a member of, and the "other" bag.

For example, consider the following file:
```
-rw-r--r-- 1 bob users 3275 mar 21 09:14 README
```
There exist references such as `Ruid:bob(README.openread)`, `Rgid:users(README.openread)`, and `Rother(README.openread)`, and a `Ruid:bob(README.openwrite)` reference.

This definition provides a coarse view of the system but remains functionally equivalent to the atomic model. It is suitable for a basic implementation because it reduces the number of references and reference bags while matching the default Unix semantics. However, it suffers from the same limitations as the Unix security policy. For instance, it is not possible to define a policy such as "files from /tmp should not be copied into /etc" using this scheme, although it can be easily defined by introducing additional reference bags.

Enforcing a security policy on root's actions is pointless if root's privileges are unrestricted. Thus, we consider only operations performed by regular users. In Unix, users can still perform operations outside their privileges using `sudo`. By analogy, the equivalent of the `/etc/sudoers` file can be implemented using specific reference bags. For example, editing `/etc/shadow` can be authorized by a bag `editshadow` that contains all references required to read and write this file.

#### 3.2 Detecting Intrusion Symptoms

Using the model defined in the previous section, the reference bags created by `login(u)` represent the operations the user `u` is authorized to perform. An attacker's goal is to execute operations not belonging to these bags. The security policy's purpose is to prevent such goals.

For example, if no reference bag `S` containing `RS(/etc/shadow.openread)` is created by `login(bob)`, then no consequence of `login(bob)` will involve a reference to open `/etc/shadow` for reading. Since the reference `RS(/etc/shadow.openread)` will flow to any consequence of `open(/etc/shadow, O_RDONLY)`, we can say that these two operations are not authorized to have a common consequence, which would indicate an attempt by `bob` to read `/etc/shadow`.

In its simplest form, the intrusion symptom detector can raise an alarm upon such an attempt. This provides a particular form of an access control system. Such an alarm indicates an operation violating the security policy and can be handled in different ways:
- The operation can be prohibited, as in the default Unix access control model.
- The operation can be purposely authorized to catch the attacker in an obvious offense.
- The intrusion attempt can be reported along with an execution log for forensic analysis.

Another option is an early warning approach: an alarm is raised as soon as an illegal combination of references appears. Such an alarm indicates an operation that cannot be executed and could be correlated with further actual policy violation alarms, providing valuable forensic information.

In any case, the security policy is expressed using reference bag definitions. Intrusions appear to violate this policy, but how an illegal operation is achieved is not considered, so there is no need for a known attack scenarios database or a learned authorized usage profile.

### 4. Experimental Implementation

This section describes a prototype implementation of the proposed approach on a Linux operating system. We show how real intrusion symptoms can be detected using two examples. A discussion of the strengths and weaknesses of this approach follows.

#### 4.1 Prototype

Our implementation currently performs non-runtime security policy checking by relying on execution logs, similar to most other intrusion detection systems. These logs represent system execution scenarios that can be replayed by a simulator. Our future goal is to replace the simulator with an in-core implementation, eliminating the need for logs and allowing runtime security policy enforcement.

The logs are generated by a specific Linux kernel module that hooks onto the kernel API and transmits a report to the system logger each time a system call is executed. This is similar to the `strace` utility but has a system-wide effect, with the following properties:
- Local process order of operations is respected.
- Local order of object access operations is respected.

Since Linux follows the Unix "everything is a file" paradigm, the set of system calls to observe is quite restricted:
- Process and thread creation/termination.
- User and/or group modification.
- Input/output descriptor handling.
- System V IPC access control.

Logs generated by this module are parsed by a reference propagation simulator. For each process that existed at the log beginning, a default set of reference bags is provided based on the process' identity and group membership, as described in Section 3.1. The simulator implements reference propagation rules that match information flow in a Unix system, i.e., references flowing from a cause to its effect:
- Opening a file for reading is a consequence of the last write to that file, so references flow from a write operation to the next read operation.
- By analogy and to conform with standard Unix semantics, the `accept` operation creates a reference to the newly created socket. This reference belongs to the same reference bag as the references used to execute the corresponding `connect` operation. Currently, only local socket connections are treated.

System V shared buffers apart, there are no memory buffer access semantics defined in Unix. The only reference we can define to handle them are simple memory pointers. The general rule is that reading from a memory buffer is causally dependent on writing to that buffer. To improve accuracy, we overload the `malloc` and `free` library calls so that memory buffer allocation is emulated through a `mmap` operation. The corresponding temporary file access can then be monitored.

We assume that authentication is performed through a `login` operation. To mimic the Unix model, we consider the `setuid` and `setgid` operations, whose effect is to construct reference bags according to the new user's identity. More precisely, the current user and group bags are replaced by new ones; the "other" bag is identical for all users and needs no change. References to objects tied to the program's execution (memory objects, pipes, etc.) are transferred to the new user bag to remain coherent with Unix semantics.

For authentication to be enforced, `setuid` and `setgid` are authorized only as a consequence of `login`. Specifically:
- `Ref[login(u)] = {Rsetuid:u(setuid.u)}`

A `setuid(u)` operation requires a `RSsetuid.u` reference. The `login` operation creates these references in the `setuid:u` bag, which never contains any other reference, isolating these references from other reference flows.

#### 4.2 Examples of Attack Detections

In this section, we describe two examples of attack classes that can be detected using our proposed approach. These are presented as a proof of concept, and a thorough evaluation of the approach and its practical performance will be the subject of a future publication.

**Race-conditions using symbolic links:**
As a simple example, we discuss the well-known "lpr" attack, which illustrates the use of symbolic links. Although this specific problem was solved, it was not addressed by updating the security policy but by modifying "lpr" to include specific, ad-hoc inode number checking. This "patch-and-pray" approach proved ineffective, as other attacks, such as the `/bin/mail` vulnerability, rely on the same principle. The "lpr" attack consists of the following steps:
1. Disconnect the printer.
2. `Ω1::lpr -s /home/bob/mydoc.ps`
3. `Ω2::rm /home/bob/mydoc.ps`
4. `Ω3::ln -s /etc/shadow /home/bob/mydoc.ps`
5. Reconnect the printer.
6. `Ω4::/etc/shadow` is printed by the lpr daemon.

In this example, the user exploits a side-effect of a standard, legitimate system feature (symbolic links) in a way that doesn't break any access control rules but leads to illegal behavior by allowing the user to print the contents of a file (`/etc/shadow`) even if they do not have read access permission.

It is important to note that the initial request to print `/home/user/mydoc.ps` could have been submitted by any user, even one allowed to read `/etc/shadow`. Moreover, nothing prevents the user from creating links to `/etc/shadow` as long as they are under the same access rules as the file they link to. So this attack involves no illegal operation in the access control sense.

However, the proposed model allows detecting `Ω4` as a security policy violation. We assume the `lpr` daemon is permitted to read `/etc/shadow`, i.e., `Ω4` will be executed using any reference bag `rs` where reading `/etc/shadow` is possible. Therefore, `Ω4` is not forbidden by itself. We also assume the user `bob` operates with reference bags that do not contain references to read `/etc/shadow`.

When creating the symbolic link, operation `Ω3` generated references to the symlink. By default, a symlink is considered writable, readable, and executable, depending on the type of the file it points to. Thus:
- `ref3 = Ref(Ωuid:bob(README.openread))`

This reference flow indicates a security policy violation, as `Ω4` should not be a consequence of `Ω3` if `bob` does not have the necessary permissions.