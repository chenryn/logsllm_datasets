在受限的UAC账户下运行时，安装程序会释放出`d3d9.dll`，并且在注册表的 _HKCUSoftwareMicrosoftWindowsRun_
路径中创建一个持久化键值。恶意软件将某个注册表键值设置为`C:Windowssystem32rundll32.exe
c:ProgramDataAuditAppd3d9.dll,
Control_Run`（键值名称从配置文件中读取）。在设置注册表之前，恶意软件会先截取屏幕，将截图置顶于其他所有窗口之上，持续若干秒。这表明开发者想在安装过程中隐藏系统提示的一些信息。
当使用命令2加载启动时，安装程序会将原始的 _explorer.exe_ 文件拷贝到当前运行的目录中，并将 _d3d9.dll_ 重命名为
_uxtheme.dll_ 。在这种情况下，恶意软件会从自己的启动位置加载原始的explorer.exe ，通过DLL旁路加载（side-loading）技术将执行权限移交给stage 4的恶意软件（下文会介绍），借此实现本地持久化目标。
最后，恶意软件会生成一个线程，利用该线程加载、重映射以及重定位stage 5的恶意软件。在UAC环境下，恶意软件的确没有必要执行stage
4攻击载荷。恶意软件会打开、读取并解密 _msvcr90.dll_ 文件，将代码执行控制权移交给 _RunDll_ 例程。
对于32位系统，恶意软件会尝试使用已公开的技术来绕过UAC（即启动 _printui.exe_ 进程，使用 _NtFilterToken_ 来操控令牌）。
**2、在管理员权限下的安装过程**
这种安装方法更加有趣一些，因为我们可以借此了解恶意软件如何在目标主机上实现隐蔽性的本地持久化目标。其实这种方法是渗透测试人员广泛使用的方法，但FinFisher实现了该方法的自动化及通用化。
恶意软件首先会枚举KnownDlls对象目录，扫描已缓存系统DLL的区段对象（section object）。接下来恶意软件会枚举 _%System%_
目录，查找某个带签名的原始Windows二进制程序（该程序会导入至少一个 _KnownDll_ 以及不在 _KnownDll_
目录中的某个库）。当恶意软件找到合适的`.exe`文件时，会将该文件拷贝到恶意软件的安装目录中（比如 _C:ProgramData_
）。此时恶意软件会从自己的资源区中提取并解密一个DLL（资源ID
101），再调用一个例程将代码段添加到目标模块中，这段代码伪造了一个与原始的系统DLL相同的导出表。在撰写本文时，释放器支持 _aepic.dll_ 、
_sspisrv.dll_ 、 _ftllib.dll_ 以及 _userenv.dll_
这些程序来承载FinFisher的恶意载荷。最后，恶意软件会创建一个新的Windows服务，其服务路径指向新目录中的那个`.exe`文件以及新创建的貌似无害的DLL。
利用这种方法，该服务会在系统启动时运行，从另一个目录执行原始的Windows可执行文件，可执行文件会在当前地址空间中自动加载并映射恶意DLL文件，而没有使用系统真正的库文件。这种方法属于DLL旁路加载（side-loading）的一种通用及变种组合。
图10. Windows Defender ATP时间线可以准确描绘出服务形式的DLL旁路加载技术（本例中使用的是`fltlib.dll`）
在之前我们曾见到过[其他攻击组织](https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/winnti-more-than-just-a-game-130410.pdf)（如LEAD）使用过名为“proxy-library（代理库）”的类似技术实现本地持久化，但专业程度并没有那么强，这种方法可以规避ASEP（auto-start extensibility
points）扫描器以及检查系统中是否存在以服务形式安装的恶意程序等安防软件（FinFisher所选择的服务在这些安全程序看来是经过签名的合法的Windows程序）。
恶意软件会使用 _OpenEventLog/ClearEventLog_ API清除系统事件日志，结束安装进程，调用 _StartService_
运行stage 4恶意软件。
图11. 借助DLL旁路加载技术运行的stage 4恶意软件会伪装合法程序的导出表以规避检测
## 七、Stage 4—劫持GDI函数实现注入的内存加载器
根据stage 4恶意软件的启动方式，可能会出现两种不同的情况：
1、在完整性较低的环境中（即受UAC限制），安装器会将stage 5恶意软件注入到先前启动的虚假 _explorer.exe_ 进程中，然后结束运行；
2、在完整性较高的环境中（具备管理员权限或者已绕过UAC），恶意代码会搜索内存中即插即用（Plug and Play）服务的宿主进程（通常为
_svchost.exe_ ），然后将自身注入到该进程中。
对于第二种场景，注入过程如下：
1、打开目标服务进程；
2、在服务进程的内存空间中分配并填充四块区域。其中一个内存块包含整个恶意软件DLL代码（但不包含PE头），另一个内存块用来复制基本的 _Ntdll_ 以及
_Kernel32_ 导入地址表，其他两个内存块包含一个异步过程调用（APC）例程的代码以及一段存根（stub）代码；
3、打开服务进程的服务线程，然后使用 _ZwQueueApcThread_ 原生API注入APC。
APC例程会在`svchost.exe`进程的上下文中创建一个线程，将stage 5恶意软件映射到`winlogon.exe`进程中并加以执行。
针对`winlogon.exe`进程的注入方法同样非常有趣也非常新颖。我们认为开发者之所以这么做，是为了规避常见的基于
_CreateRemoteThread_ 或者 _ZwQueueApcThread_ API的进程注入检测技术。
恶意软件会采用如下步骤实现进程注入：
1、检查系统主引导记录（MBR）中是否包含已感染标记（在 _0x2C_ 偏移处的8字节数据，值为 _0xD289C989C089_
），如果存在，则自动结束运行；
2、再次检查进程是否附加到某个调试器上（使用前文描述的技术）；
3、读取、解密以及映射stage 5恶意软件（位于前一阶段的 _msvcr90.dll_ 中）；
4、打开 _winlogon.exe_ 进程；
5、加载 _user32.dll_ 系统库，从进程环境块（PEB）中读取 _KernelCallbackTable_ 指针（注意：
_KernelCallbackTable_ 指针指向的是Win32内核子系统模块 _win32k.sys_
所使用的一个图形函数数组，是进入用户模式的回调函数）；
6、计算该指针与User32基地址的距离；
7、将stage 5 DLL载荷拷贝到`winlogon.exe`中；
8、在`winlogon.exe`进程中分配一段内存空间，然后拷贝前面提到过的那个APC例程；
9、读取并保存__fnDWORD内部User32例程的原始指针（位于 _KernelCallbackTable_ 偏移地址+ _0x10_
处），将该指针替换为APC存根例程的地址。
在劫持这个函数指针之后，当`winlogon.exe`执行任何图形调用（GDI）时，恶意代码就可以执行，无需使用容易被检测到的
_CreateRemoteThread_ 或者类似触发技术。恶意代码执行后也会仔细恢复原始的 _KernelCallbackTable_ 。
## 八、Stage 5—粉墨登场的最终加载器
Stage 5恶意软件的唯一功能是通过VM为最终的恶意软件载荷提供另一个混淆保护层，然后设置一个特殊的结构化异常处理例程，以 _Ntdll_ 中的
_Wow64PrepareForException_
身份注入。恶意软件需要使用这个特殊的异常处理例程来管理某些内存缓冲区保护以及特殊异常，这些机制可以用来实现更为隐蔽的执行。
当VM代码再次检查用户环境后，恶意软件将最终的未经混淆的载荷样本直接提取到`winlogon.exe`进程中并加以执行（也可能提取到`explorer.exe`进程中）。当恶意软件提取、解密攻击载荷并将载荷映射到进程内存中后，就会调用新的DLL入口点，然后再调用`RunDll`这个导出函数，后者完整实现了整个间谍程序。
## 九、Stage 6—有待分析的模块化间谍软件框架
在对FinFisher去混淆处理的过程中，我们可以了解这款恶意软件所使用的复杂的反分析技术，也可以利用这些情报来保护我们的客户，这正是我们的首要任务。未来我们需要进一步对其他间谍软件模块进行分析。
显然，这个程序的最终目标是窃取信息。恶意软件采用了模块化架构，这意味着该软件可以执行各种插件。相关插件存放在恶意软件的资源区中，同样经过相同的VM保护。比如，我们10月份分析的那个样本中包含一个能够窥探互联网连接的插件，该插件甚至可以转移某些SSL连接，从加密流量中窃取数据。
某些FinFisher变种还会包含一个[MBR
rootkit](http://artemonsecurity.blogspot.com/2017/01/finfisher-rootkit-analysis.html)，其具体目的仍不明确。很有可能这种变种针对的是类似Windows
7之类的老平台以及没有采用UEFI以及SecureBoot之类硬件保护机制的主机（Windows
10已具备这种保护机制）。详细分析这种代码已经超过了本文的讨论范围，可能需要另一篇专门的文章来分析。
## 十、如何防护FinFisher
在这个艰辛的分析过程中，我们尽可能详细地揭晓FinFisher所留下的谜题，这样就能确保我们的客户免受这款先进的恶意软件的侵袭。
[Windows 10 S](https://www.microsoft.com/en-us/windows/windows-10-s?ocid=cx-blog-mmpc)设备具备强大的代码完整性策略，不允许运行或加载未知的、未经签名的程序（因而可以阻止FinFisher
PE安装器的运行、阻止FinFisher所使用的本地持久化DLL），因此自然能够防护FinFisher或者其他安全威胁。在[Windows
10](https://www.microsoft.com/en-us/windows/get-windows-10?ocid=cx-blog-mmpc)上，我们可以使用[Windows Defender Application
Control](https://cloudblogs.microsoft.com/microsoftsecure/2017/10/23/introducing-windows-defender-application-control/)来配置类似的代码完整性策略。
[Office 365 Advanced Threat Protection](https://products.office.com/en-us/exchange/online-email-threat-protection?ocid=cx-blog-mmpc)可以阻止使用0day漏洞来传播恶意载荷（如FinFisher）的电子邮件[攻击活动](https://cloudblogs.microsoft.com/microsoftsecure/2017/11/21/office-365-advanced-threat-protection-defense-for-corporate-networks-against-recent-office-exploit-attacks/)。Office 365 ATP可以使用点击时（time-of-click）防护机制来阻止不安全的附件、恶意链接以及链接到文件的攻击行为。利用研究FinFisher所得到的情报，我们改进了Office 365
ATP，使其能够进一步防护FinFisher的反沙箱检测技术。
[Windows Defender Advanced Threat Protection](https://www.microsoft.com/en-us/windowsforbusiness/windows-atp?ocid=cx-blog-mmpc)中的通用检测、高级行为分析以及机器学习技术可以检测FinFisher在整个攻击链条中的恶意行为，向SecOps（安全管理）人员告警。Windows
Defender ATP同样集成了Windows防护栈，因此来自[Windows Defender
AV](https://www.microsoft.com/en-us/windows/windows-defender?ocid=cx-blog-mmpc)以及[Windows Defender Exploit
Guard](https://blogs.technet.microsoft.com/mmpc/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/)的防护功能也纳入了Windows Defender
ATP入口中，这样就能帮助SecOps人员实现集中化的安全管理，可以及时调查和响应网络中的恶意活动。
在本文中我们阐述了FinFisher所使用的多层保护机制、混淆机制以及反分析技术，希望能给研究这款恶意软件的其他分析人员提供一些帮助。我们认为整个行业的协作和信息共享非常重要，可以帮助客户免受这种复杂的恶意软件的影响。如果想进一步了解的话，我们推荐大家阅读如下这些参考资料：
  * [Devirtualizing FinSpy](http://linuxch.org/poc2012/Tora,%20Devirtualizing%20FinSpy.pdf) [PDF], Tora (2012)
  * [Finfisher rootkit analysis](http://artemonsecurity.blogspot.com/2017/01/finfisher-rootkit-analysis.html), Artem Baranov (2017)
  * [A Walk-Through Tutorial, with Code, on Statically Unpacking the FinSpy VM: Part One, x86 Deobfuscation](http://www.msreverseengineering.com/blog/2018/1/23/a-walk-through-tutorial-with-code-on-statically-unpacking-the-finspy-vm-part-one-x86-deobfuscation), Rolf Rolles (2018)
  * [FinSpy VM Part 2: VM Analysis and Bytecode Disassembly](http://www.msreverseengineering.com/blog/2018/1/31/finspy-vm-part-2-vm-analysis-and-bytecode-disassembly), Rolf Rolles (2018)
  * [ESET’s guide to deobfuscating and devirtualizing FinFisher](https://www.welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf) [PDF], Filip Kafka (2018)