Usually
Usually
alarm()
No
Usually
setsid()
socket()
pipe()
open()
. . .
No
Yes
Yes
Yes
Yes
Usually
Yes
Yes
Yes
Yes
Comments
Kills the process, which will cause problems for the intruder.
Puts the process to sleep, which would cause a problem for the intruder. Attacker
might be able to cause process to receive signal and wake up again (e.g., by sending
SIGURG with TCP out of band data), but this is application-dependent.
Linux-speci(cid:12)c. Hangs up the current terminal, which might be problematic for the
intruder. But it is very rarely used in applications, hence shouldn’t cause a problem.
Creates a new copy of the process. Since the IDS will probably clone itself to
monitor each separately, this is unlikely to cause any problems for the attacker.
(Similar comments apply to vfork() and to clone() on Linux.)
It does have the
Calling alarm(0) sets no new alarms, and will likely be safe.
side-e(cid:11)ect of cancelling any previous alarm, which might occasionally interfere with
normal application operation, but this should be rare.
Creates a new session for this process, if it is not already a session leader. Seems
unlikely to interfere with typical attack goals in practice.
Nullify by passing socket type parameter.
Nullify by passing NULL pointer parameter.
Nullify by passing NULL (cid:12)lename parameter.
. . .
Table 1: A few system calls and whether they can be used to build equivalent variants of a given malicious
sequence. The second column indicates whether the system call can be reliably turned into a \no-op" (i.e.,
nulli(cid:12)ed), and the third column indicates whether an attacker can intersperse this system call freely in a
given malicious sequence to obtain equivalent variants. For instance, exit() is not nulli(cid:12)able and kills the
process, hence it is not usable for generating equivalent variants of a malicious sequence. This table shows
all the system calls we know of that an attacker might not be able to nullify; the remaining system calls not
shown here are easily nulli(cid:12)ed.
expression de(cid:12)ned by
M def
= N (cid:3)M1N (cid:3)M2N (cid:3) (cid:1) (cid:1) (cid:1) N (cid:3)MnN (cid:3):
This matches the set of sequences obtained from M by in-
serting no-ops, and any sequence matching this regular ex-
pression will have the same e(cid:11)ect as M and hence will be
interchangeable with M . Moreover, this regular expression
may be expressed as a (cid:12)nite-state automaton by standard
methods [11, x2.8], and in this way we obtain a representa-
tion of the set M de(cid:12)ned earlier, as desired.
Extensions. If necessary, we could introduce further vari-
ability into the set of variants considered by considering
equivalent system calls. For instance, if a read() system
call appears in the malicious sequence M , we could also eas-
ily replace the read() with a mmap() system call if this helps
avoid detection. As another example, we can often collapse
multiple consecutive read() calls into a single read() call,
or multiple chdir() system calls into a single chdir(), and
so on.
All of these equivalences can also be modelled within our
(cid:12)nite-state framework. Assume we have a relation R on
(cid:6)(cid:3) (cid:2) (cid:6)(cid:3) obeying the following condition:
if X; X 0 2 (cid:6)(cid:3)
satisfy R(X; X 0), then we may assume that the sequence
X can be equivalently replaced by X 0 without altering the
resulting e(cid:11)ect on the system. Suppose moreover that this
relation can be expressed by a (cid:12)nite-state transducer, e.g., a
Mealy or Moore machine; equivalently, assume that R forms
a rational transduction. De(cid:12)ne
M def
= fX 0 2 (cid:6)(cid:3) : R(M; X 0) holdsg:
By a standard result in language theory [11, x11.2], we (cid:12)nd
that M is a regular language, and moreover we can easily
compute a representation of M as a (cid:12)nite-state automaton
given a (cid:12)nite-state representation of R.
Note also that this generalizes the strategy of inserting
no-ops. We can de(cid:12)ne a relation RN by RN (X; X 0) if X 0 is
obtained from X by inserting no-ops from the set N , and
it is not hard to see that the relation RN can be given by
a (cid:12)nite-state transduction. Hence the idea of introducing
no-ops can be seen as a special case of the general theory
based on rational transductions.
In summary, we see that the framework is fairly general,
and we can expect to model both the IDS and the set of
malicious sequences as (cid:12)nite-state automata.
5.
IMPLEMENTATION
We implemented these ideas as follows. First, we trained
the IDS and programmatically built the automaton A from
the resulting database of normal sequences of system calls.
The automaton M is formed as described above.
The next step is to form the composition of A and M
by taking the usual product construction. Our implementa-
tion tests for a non-empty intersection by constructing the
product automaton A (cid:2) M explicitly in memory [11, x3.2]
and performing a depth-(cid:12)rst search from the initial state to
see if any accepting state is reachable [11, x3.3]; if yes, then
we’ve found a stealthy malicious sequence, and if not, the
mimicry attack failed.
In essence, this is a simple way of
model-checking the system A against the property M.
We note that there are many ways to optimize this com-
putation by using ideas from the model-checking literature.
For instance, rather than explicitly computing the entire
product automaton in advance and storing it in memory, to
260reduce space we could perform the depth-(cid:12)rst search gen-
erating states lazily on the (cid:13)y. Also, we could use hash-
ing to keep a bit-vector of previously visited states to fur-
ther reduce memory consumption [9, 10].
If this is not
enough, we could even use techniques from symbolic model-
checking to represent the automata A and M using BDD’s
and then compute their product symbolically with standard
algorithms [16].
However, we have found that these fancy optimizations
seem unnecessary in practice. The simple approach seems
adequate for the cases we’ve looked at: in our experiments,
our algorithm runs in less than a second. This is not sur-
prising when one considers that, in our usage scenarios, the
automaton A typically has a few thousand states and M
contains a half dozen or so states, hence their composition
contains only a few tens of thousands of states and is easy
to compute with.
6. EMPIRICAL EXPERIENCE
In this section, we report on experimental evidence for
the power of mimicry attacks. We investigated a number
of host-based anomaly detection systems. Although many
papers have been written proposing various techniques, we
found only one working implementation with source code
that we could download and use in our tests: the pH (for
process homeostasis) system [21]. pH is a derivative of For-
rest, et al.’s early system, with the twist that pH responds
to attacks by slowing down the application in addition to
raising alarms for the system administrator. For each sys-
tem call, pH delays the response by 2m time units, where m
counts the number of mismatched length-6 subtraces in the
last 128 system calls. We used pH version 0.17 running on
a fresh Linux Redhat 5.0 installation with a version 2.2.19
kernel4. Our test host was disconnected from the network
for the duration of our experiments to avoid the possibility
of attacks from external sources corrupting the experiment.
We also selected an o(cid:11)-the-shelf exploit to see whether
it could be made stealthy using our techniques. We chose
one more or less at random, selecting an attack script called
autowux.c that exploits the \site exec" vulnerability in the
wuftpd FTP server. The autowux attack script exploits a
format string vulnerability, and it then calls setreuid(0,0),
escapes from any chroot protection, and execs /bin/sh using
the execve() system call. It turns out that this is a fairly
typical payload: the same shellcode can be found in many
other attack scripts that exploit other, unrelated vulnerabil-
ities5. We conjecture that the authors of the autowux script
just copied this shellcode from some previous source, rather
than developing new shellcode. Our version of Linux Red-
hat 5.0 runs wuftpd version wu-2.4.2-academ[BETA-15](1),
and we trained pH by running wuftpd on hundreds of large
4Since this work was done, version 0.18 of pH has been re-
leased. The new version uses a longer window of length 9,
which might improve security. We did not test whether this
change improves the resistance of pH to mimicry attacks.
5It is interesting and instructive to notice that such a
widespread attack payload includes provisions by default
to always attempt escaping from a chroot jail. The lesson
is that, if a weak protection measure becomes widespread
enough, eventually attackers will routinely incorporate
countermeasures into all their attacks. The implications for
intrusion detection systems that are susceptible to mimicry
attacks are troubling.
(cid:12)le downloads over a period of two days. We veri(cid:12)ed that
pH detects the unmodi(cid:12)ed exploit6.
Next, we attempted to modify the exploit to evade de-
tection. We parsed pH’s database of learned length-6 sub-
traces and built an automaton A recognizing exactly those
system call traces that never cause any mismatches. We did
not bother to re(cid:12)ne this representation to model the fact
that intruder can safely cause a few occasional mismatches
without causing problems (see Appendix A), as such a re-
(cid:12)nement turned out to be unnecessary. Also, we examined
the point in time where autowux mounts its bu(cid:11)er over(cid:13)ow
attack against the wuftpd server. We found that the window
of the last (cid:12)ve system calls executed by wuftpd is
(fstat(); mmap(); lseek(); close(); write())
when the exploit (cid:12)rst gains control. This determines the
initial state of A.
In addition, we reverse engineered the exploit script and
learned that it performs the following sequence of 15 system
calls:
setreuid(0,0); dup2(1,2); mkdir("sh"); chroot("sh");
9 (cid:2) chdir(".."); chroot("/"); execve("/bin/sh"):
We noticed that the nine consecutive chdir("..") calls can,
in this case, be collapsed into a single
chdir("../../../../../../../../../"):
As always, one can also freely introduce no-ops. With these
two simple observations, we built an automaton M recog-
nizing the regular expression
N (cid:3) setreuid() N (cid:3) dup2() N (cid:3) mkdir() N (cid:3) chroot() N (cid:3)
chdir() N (cid:3) chroot() N (cid:3) execve() N (cid:3):
Our program performs a depth-(cid:12)rst search in the product
automaton A (cid:2) M and informs us that A \ M = ;, hence
there is no stealthy trace matching the above regular expres-
sion.
Next, we modi(cid:12)ed the attack sequence slightly by hand
to repair this de(cid:12)ciency. After interactively invoking our
tool a few times, we discovered the reason why the original
pattern was infeasible: there is no path through the normal
database reaching dup2(), mkdir(), or execve(), hence no
attack that uses any of these system calls can completely
avoid mismatches. However, we note that these three system
calls can be readily dispensed with. There is no need to
create a new directory; an existing directory will do just as
well in escaping from the chroot jail, and as a side bene(cid:12)t
will leave fewer traces. Also, the dup2() and execve() are
needed only to spawn an interactive shell, yet an attacker
can still cause harm by simply hard-coding in the exploit
shellcode the actions he wants to take without ever spawning
a shell. We hypothesized that a typical harmful action an
attacker might want to perform is to add a backdoor root
account into the password (cid:12)le, hence we proposed that an
attacker might be just as happy to perform the following
6We took care to ensure that the IDS did not learn the ex-
ploit code as \normal" in the process. All of our subsequent
experiments were on a virgin database, trained from scratch
using the same procedure and completely untouched by any
attack.
261flock()
sigaction()
alarm()
fstat()
setreuid()
sigprocmask()
read() write() close() munmap() sigprocmask() wait4()
sigprocmask() sigaction() alarm() time() stat() read()
alarm()
getpid()
time() write() time() getpid() sigaction() socketcall()
sigaction() close() flock() getpid() lseek() read()
kill() lseek()
time()
stat() write() open() fstat() mmap() read() open()
fstat() mmap() read() close() munmap() brk() fcntl()
setregid() open() fcntl() chroot() chdir() setreuid()
lstat() lstat() lstat() lstat() open() fcntl() fstat()
lseek() getdents() fcntl() fstat() lseek() getdents()
close() write() time() open() fstat() mmap() read()
close() munmap() brk() fcntl() setregid() open() fcntl()
chroot() chdir() setreuid() lstat() lstat() lstat()
lstat() open() fcntl() brk() fstat() lseek() getdents()
lseek() getdents() time() stat() write() time() open()
getpid() sigaction() socketcall() sigaction() umask()
sigaction()
alarm()
getrlimit() pipe() fork() fcntl() fstat() mmap() lseek()
close() brk() time() getpid() sigaction() socketcall()
sigaction() chdir() sigaction() sigaction() write()
munmap() munmap() munmap() exit()
alarm()
time()
stat()
read()
Figure 1: A stealthy attack sequence found by our
tool. This exploit sequence, intended to be exe-
cuted after taking control of wuftpd through the \site
exec" format string vulnerability, is a modi(cid:12)cation
of a pre-existing sequence found in the autowux ex-
ploit. We have underlined the system calls from the
original attack sequence. Our tool takes the under-
lined system calls as input, and outputs the entire
sequence. The non-underlined system calls are in-
tended to be nulli(cid:12)ed: they play the role of \seman-
tic no-ops," and are present only to ensure that the
pH IDS does not detect our attack. The e(cid:11)ect of the
resulting stealthy exploit is to escape from a chroot
jail and add a backdoor root account to the system
password (cid:12)le.
variant on the original exploit sequence:
setreuid(0,0); chroot("pub");
chdir("../../../../../../../../../"); chroot("/");
open("/etc/passwd", O APPEND|O WRONLY);
write(fd, "toor:AAaaaaaaaaaaa:0:0::/:/bin/sh", 33);
close(fd); exit(0)
where fd represents the (cid:12)le descriptor returned by the open()
call (this value can be readily predicted). The modi(cid:12)ed at-
tack sequence becomes root, escapes from the chroot jail,
and appends a backdoor root account to the password (cid:12)le.
To check whether this modi(cid:12)ed attack sequence could be
executed stealthily, we built an automaton M recognizing
the regular expression
N (cid:3) setreuid() N (cid:3) chroot() N (cid:3) chdir() N (cid:3) chroot()
N (cid:3) open() N (cid:3) write() N (cid:3) close() N (cid:3) exit() N (cid:3):
We found a sequence that raises no alarms and matches this
pattern. See Fig. 1 for the stealthy sequence. Finding this
stealthy sequence took us only a few hours of interactive
exploration with our search program, once the software was
implemented.
We did not build a modi(cid:12)ed exploit script to implement
this attack. Instead, to independently verify the correctness
of the stealthy sequence, we separately ran this sequence
through stide7 and con(cid:12)rmed that it would be accepted