User: 如何使用GitHub Actions自动构建和部署Web应用程序，并在每次代码提交后自动运行测试并将应用程序部署到生产环境中。
Assistant: 1. 配置GitHub秘钥

在GitHub仓库的Settings中，选择Secrets，添加名为DEPLOY_KEY的秘钥，值为SSH Key（私钥）。

2. 配置部署步骤

在GitHub仓库中新建一个workflow，如下所示：

```yaml
name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js env
      uses: actions/setup-node@v2-beta
      with:
        node-version: '12.x'

    - name: Build App
      run: npm install && npm run build

    - name: Deploy App
      uses: easingthemes/ssh-deploy@v2.1.5
      env:
        SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
        ARGS: "-rltgoDzvO --delete"
      with:
        server: ${{ secrets.SERVER }}
        port: ${{ secrets.PORT }}
        username: ${{ secrets.USERNAME }}
        working-directory: ${{ secrets.DEPLOY_DIR }}
        local-folder: ./dist/
```

该workflow将在代码提交到master分支时触发，然后执行以下步骤：

- 检出代码
- 设置Node.js环境
- 构建Web应用程序
- 使用SSH部署Web应用程序

3. 配置部署位置

在GitHub仓库的Settings中，选择Secrets，添加名为DEPLOY_DIR、SERVER、PORT、USERNAME的秘钥，分别为部署目录、服务器地址、端口号、用户名。

4. 自动运行测试

在CI/CD workflow中添加测试步骤，可将测试结果显示在Pull Request中：

```yaml
name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js env
      uses: actions/setup-node@v2-beta
      with:
        node-version: '12.x'

    - name: Install Dependencies
      run: npm install

    - name: Run Tests
      run: npm run test
```

以上是使用GitHub Actions自动构建和部署Web应用程序的基本步骤，可以根据需要进行修改和优化。