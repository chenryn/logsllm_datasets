Line 24-26 show this technique. The RootVisor shares the
EPTP list page with the Guardian-VM, whose address is
written in a Guardian-VM private data page by the RootVi-
sor (Guardian_Info_Page). By default, most entries in the
EPTP list are zero except Entry 0 and 1, which point to the
Guest-EPT and the Guardian-EPT respectively. Before call-
ing the SubVisor function, the Guardian-VM clears Entry 0
and then writes the base address of the SubVisor-EPT into
Entry 2. When it returns from the SubVisor, the Guardian-
VM reversely clears Entry 2 and writes the base address of
Figure 7: The memory mappings for code pages and page
tables.
Figure 7 depicts the memory mapping of code pages. The
entry page and the exit page are the two Guardian-VM code
pages shared with the Guest-EPT and the SubVisor-EPT re-
spectively. The main page is a private code page of the
Guardian-VM. The page table pages used to translate the en-
try page are shared by the Guest-EPT and the Guardian-EPT.
However, the guest does not have the permission to modify
these page table pages, which are mapped as read-only in
the Guest-EPT. The page table pages used to translate the
exit page are similarly mapped into the Guardian-EPT and
the SubVisor-EPT. The base address of the Guardian-VM
page table is written into the Guardian_Info_Page and the
Guardian-VM installs this page table in the entry page, as
shown in Figure 6.
This technique effectively prevents the attacker from jump-
ing into the middle of the Guardian-VM. Suppose that there
is a malicious VM and it knows the base address of the
Guardian-VM page table, it has to create one malicious page
table which maps one code page containing at least a VM-
FUNC instruction. However, the VM is unable to conﬁgure
the malicious page table whose base address (GPA) is not
mapped in the Guest-EPT. Any access to that GPA wakes
1702    29th USENIX Security Symposium
USENIX Association
up the RootVisor. Therefore, a guest VM has to invoke the
Enter_GUARDIAN-VM function to enter its Guardian-VM
and the SubVisor can enter the Guardian-VM only via return-
ing to the CALL_HYPER_FUNC function.
4.5 Jump Table
CloudVisor-D guarantees that a guest VM invokes a lim-
ited range of functions speciﬁed in a ﬁxed list, which we call
the jump table. The jump table contains the functions in the
SubVisor (remote calls) and the local helper functions in the
Guardian-VM (local calls). Each entry in the jump table com-
prises a function pointer and information about its arguments,
such as the argument count and their value ranges. The table
is not mapped in the Guest-EPT or the SubVisor-EPT so that
neither the guest nor the SubVisor can modify it. To invoke
a remote call or local call, the guest should provide the in-
dex of the function it is calling and corresponding arguments.
When processing a guest request, the Guardian-VM veriﬁes
the function index and arguments that the guest provides. If
the index is out of jump table’s range or the number and the
value ranges of the arguments do not satisfy those recorded
in the jump table, it will reject this request. Otherwise, the
Guardian-VM calls a local helper function or redirects it to
call a SubVisor function.
5 Memory Virtualization in Non-root Mode
CloudVisor-D handles EPT violation in non-root mode
without
triggering any VM exit. To achieve this goal,
CloudVisor-D leverages the virtualization exception (VE)
and converts an EPT violation to a VE in the guest. The guest
then issues a remote call of the Guardian-VM to call the EPT
violation handler in the SubVisor, which also resides in non-
root mode.
When a VE happens, the guest’s VE handler is called. By
reading the VE information page, it gets the violation GPA
and exit qualiﬁcation. The exit qualiﬁcation is a technical
term used in the Intel manual [2], which describes informa-
tion about the access causing the exception, such as whether
the violation is caused by a data read or write. Then the han-
dler calls a remote call to invoke the EPT violation handler
of the SubVisor.
We design a secure guest EPT update mechanism to han-
dle the EPT violation securely in non-root mode: (1) The
Guardian-VM grants the write permission of the guest’s
shadow EPT to the SubVisor by modifying the SubVisor-
EPT; (2) The Guardian-VM switches to the SubVisor-EPT
and calls the SubVisor’s EPT violation handler; (3) The Sub-
Visor traverses the shadow EPT to handle this violation and
returns; (4) The Guardian-VM revokes the shadow EPT per-
mission from the SubVisor; (5) The Guardian-VM traverses
the shadow EPT to check the updates made by the SubVisor
and notiﬁes the RootVisor if anything abnormal is detected;
(6) The Guardian-VM applies the updates to the Guest-EPT.
Please note that all the above EPT modiﬁcations by the Sub-
Visor are made to the shadow guest EPT, which is not actu-
ally used by the guest VM. Only after being checked by the
Guardian-VM can these updates come into effect.
When checking the updates made by the SubVisor, the
Guardian-VM sees the EPT pages that are associated with
the violated address and omits other pages. This could boost
the checking procedure since there are at most four EPT
pages that are used to translate the violated address. The
Guardian-VM validates the page ownership when checking
the updates. For example, if the SubVisor tries to maps an-
other VM’s page to this VM, the Guardian-VM rejects these
updates and notiﬁes the RootVisor.
We do not invoke INVEPT here to ﬂush the corresponding
TLB entries after handling the EPT violation. This is reason-
able because we only consider the EPT violation situation,
where all TLB mappings that would be used to translate the
violated address are invalidated by the hardware before the
VE handler is called [2]. For instance, one read-only TLB
entry exists for one page and any write operation to the page
triggers one VE which ﬂushes the stale read-only TLB entry
before invoking the VE handler.
CloudVisor-D focuses on the EPT violation scenario
to
which increases privileges (e.g., change non-present
present or read-only to writable). It does not shoot down
other TLB entries in a multi-core VM to boost the VE han-
dling procedure. The stale TLB entries on other cores only
cause extra VEs if accessed by other cores. Furthermore, the
Guardian-VM optimizes the VE handling of the stale TLB
entries by directly returning to the guest VM without for-
warding the VE to the SubVisor.
Other EPT management operations: The SubVisor may
modify guest VM’s EPT for other management purposes,
such as memory deduplication and NUMA page migration.
These management operations are handled like CloudVisor,
which still trigger EPT violations and trap into the RootVisor.
Faking VE Attack: One guest VM may issue a fake VE by
intentionally making a remote call to invoke the SubVisor
EPT handling procedure. The fake VE lures the Guardian-
VM to map other VMs’ or the SubVisor’s pages into the at-
tacker’s EPT and make these pages accessible to the guest.
However, the Guardian-VM disallows such modiﬁcations to
the attacker’s EPT since it checks page ownership before
modifying any page mapping and will not grant one page to
the attacker if it belongs to other VMs or the SubVisor.
6
I/O Protection
It is critically important to protect the privacy and integrity
of the virtual disk of a guest virtual machine. The most
straightforward strategy is to encrypt the whole disk in the
guest kernel level, like LUKS [25]. However, the malicious
SubVisor can steal the encryption key, peek into or tamper
with the plaintext in memory. Further, it also mandates the
guest VM with the support of LUKS, which is not always
available. Therefore, CloudVisor-D provides the full virtual
disk encryption support efﬁciently and mostly-transparently
USENIX Association
29th USENIX Security Symposium    1703
Guest I/O Ring
Hyp I/O Ring
3
2
1
Front-end 
driver
Evt Channel
6
Helper
Funcs
VM
4
Guardian-VM
Non-root mode
Root mode
Back-end 
driver
Dom0
5
SubVisor
Figure 8: The PV disk I/O request handling process in
CloudVisor-D.
at the cloud level. To support para-virtualization I/O model
which is widely used in today’s cloud environment, we insert
two lines of code into the PV front-end driver in the guest
OS that call helper functions in Guardian-VM. These helper
functions encrypt (or decrypt) I/O data of the guest and up-
date (or verify) the hash values of the disk. CloudVisor-D
uses the AES-XTS algorithm in Intel AES-NI to encrypt
and decrypt disk data with a 128-bit AES key. The key is
generated by the tenant and encrypted by a platform pub-
lic key provided by CloudVisor-D. Then the user passes the
encrypted key to CloudVisor-D through the network. After-
wards, the key cipher-text is decrypted and maintained inside
the CloudVisor-D memory.
Overall Control Flow: Figure 8 is our solution for PV
I/O protection. When the front-end driver is initializing,
CloudVisor-D creates a SubVisor I/O ring for the back-end
driver in the SubVisor. The SubVisor I/O ring is editable
by the SubVisor, while the original one is inaccessible to
it. Suppose the front-end I/O driver is ready to issue an I/O
write request. Before it pushes the request into I/O ring, it
invokes the Guardian-VM’s sending helper function via a lo-
cal call, which allocates a new buffer and copies the data of
the request into the buffer (This copy is omitted for the read
request). Then the Guardian-VM encrypts all pages in the
copied buffer and updates corresponding hash values of re-
lated sectors. Finally, it writes the new buffer into the SubVi-
sor I/O ring and modiﬁes the SubVisor-EPT to change these
new buffer pages’ permission to writable. Next, the front-end
driver pushes the request to the ring and invokes a remote
call to send an event to the back-end driver under the help
of the Guardian-VM. When the front-end driver receives a
virtual completion interrupt from the back-end driver, it in-
vokes the receiving helper function via the other local call to
process the response and revoke the buffer permission from
the SubVisor-EPT. If it is a read request, the Guardian-VM
also copies data from the buffer into the guest OS request
pages, and decrypts the data in these pages.
Data Integrity: We compute a 256-bit SHA-256 hash value
for each disk sector and use the Merkle tree [48] to organize
the hash values of all disk sectors. This hash tree is stored in
a hash ﬁle and loaded into a shared memory of CloudVisor-
D by Xen management tool (xl) when we boot a guest VM.
Even though a compromised xl program may modify the
hash value of storage, CloudVisor-D can detect that situation
since the hash values are generated based on the decrypted
sector data which xl is unable to access without the AES key
passed by the user.
DMA Attack: An attacker may access sensitive memory or
even inject code into CloudVisor-D memory by leveraging
DMA operations. To defend against this attack, CloudVisor-
D controls IOMMU and makes protected memory regions
inaccessible to the SubVisor by manipulating the mapping
from device address to HPA. The IOMMU page table for
the storage device controlled by the SubVisor only contains
physical addresses that do not belong to any VMs. Each time
a new VM is booted, the RootVisor removes mappings re-
lated with this new VM from the IOMMU page table for
the device. Therefore, when the malicious SubVisor issues
a DMA request to write or read VM memories, an IOMMU
page fault triggers, which notiﬁes the RootVisor.
7 Security Analysis
7.1 CloudVisor-D as a Reference Monitor
CloudVisor-D is actually a reference monitor which me-
diates all communications between guest VMs and the Sub-
Visor. There are two necessary and sufﬁcient requirements
for a secure reference monitor, which are tamperproof and
complete mediation. In this section, we ﬁrst explain how
CloudVisor-D satisﬁes these two requirements.
Property 1 (tamperproof): The RootVisor is trusted
during its lifetime. The integrity of the RootVisor is guaran-
teed by the authenticated boot of TPM, by which users can at-
test whether the RootVisor is trusted. After booted, potential
attackers cannot modify the RootVisor’s code or data since
it has an isolated address space, which is inaccessible to the
SubVisor and VMs. The RootVisor also has the full privilege
of the hardware and prevents attackers from disabling key
hardware features like the virtualization feature.
Property 2 (tamperproof): Guardian-VMs are tamper-
proof during its lifetime. Based on Property 1, the trusted
RootVisor can securely load a trusted Guardian-VM when
booting a guest VM. The RootVisor also checks its integrity
when ﬁnishing the booting process. During run time, the
guest VM and the SubVisor do not have the privilege to
modify the memory and EPT of the Guardian-VM. There-
fore, a malicious VM or SubVisor is unable to touch any
sensitive memory states of a Guardian-VM directly. How-
ever, since Guardian-VMs accept inputs from untrusted VMs
and SubVisor, the Guardian-VM and the RootVisor must pro-
tect themselves from malicious inputs, which may exploit a
stack overﬂow vulnerability and then mount a ROP attack.
Memory bugs are unavoidable for software written in C/C++
languages. However, due to the small TCB of Guardian-
VM, it is relatively easy to verify that Guardian-VMs are
free of these memory vulnerabilities. Furthermore, we have
1704    29th USENIX Security Symposium
USENIX Association
used three static analysis tools (Facebook infer v0.15.0 [10],
CBMC v5.3 [36] and Cppcheck v1.72 [23]) to check the cur-
rent implementation of CloudVisor-D. Both Facebook infer
and Cppcheck found some instances of three types of bugs
(uninitialized variables, possibly null pointer dereferences,
and dead stores) while CBMC did not report any bugs. We
have ﬁxed all the reported bugs. However, none of these tools
could prove that the implementation of CloudVisor-D is bug-
free. We plan to use formal veriﬁcation methods to verify
CloudVisor-D or completely rewrite it by using high-level
and secure languages like Rust [46] in the future.
Property 3 (complete mediation): CloudVisor-D inter-
cepts all communications There are two types of paths that
a VM or the SubVisor can communicate with each other.
The ﬁrst is via the VM exits which are then forwarded by
the RootVisor, which is the traditional and slow path. The
other one is through the Guardian-VM. An attacker may try
to bypass Guardian-VMs by directly switching from a VM
to the SubVisor. This attack is prevented by controlling the
EPTP list entries and the isolated Guardian-VM page table.
Thus, the only way to enter the SubVisor in non-root mode
is through the Guardian-VM, which accepts a limited range
of functions recorded in the jump table. A VM may refuse to
call the interface provided by Guardian-VM. But it is in an
isolated EPT environment, which means this behavior only
results in its own execution failure, not affecting other VMs
or the SubVisor.
7.2 Defend VMs against an Untrsuted Hyper-
visor
Due to the tamperproof and complete mediation proper-
ties of CloudVisor-D, we ensure that a guest VM (or the Sub-
Visor) cannot tamper with CloudVisor-D nor bypass it, and
any communication path between VMs and the SubVisor is
mediated by CloudVisor-D. In this section, we explain how
CloudVisor-D protects guest VMs based on the secure refer-
ence monitor concepts.
Protecting CPU states for guest VMs The CPU regis-
ters of one VM can only be modiﬁed by the RootVisor or its
Guardian-VM. CloudVisor-D will clear unnecessary register
values when switching between VMs and the SubVisor. The
SubVisor cannot compromise the normal execution of guest
VMs since it is forbidden from directly changing the CR3,
RIP and RSP registers.
Protecting Memory states for guest VMs CloudVisor-
D prevents a malicious SubVisor (or a malicious guest VM)
from accessing the memory of any VMs by controlling the
EPTs to enforce the memory isolation. The SubVisor may try
to modify the guest’s EPT and maps the guest’s memory into
the SubVisor’s EPT when it handles EPT violations. This
can also be defeated since any modiﬁcation to the shadow
guest EPT made by the SubVisor is checked by the Guardian-
VM which prevents such dangerous mappings. The SubVisor
could attempt to leverage a DMA capable device to access
the VM memory and even compromise CloudVisor-D. This
is prevented by controlling IOMMU to make the protected
memory regions inaccessible for the SubVisor.
Protecting Disk I/O states for guest VMs CloudVisor-D
also guarantees the privacy and integrity of guest VMs’ disk
I/O data. The SubVisor is able to access the disk image ﬁle di-
rectly. But the image contains encrypted data, which is mean-
ingless if not decrypted. Furthermore, CloudVisor-D protects
the encryption key in its memory and registers, and the at-
tacker cannot steal the key to decrypt the I/O data. The Sub-
Visor may also modify the encrypted disk ﬁle, which could
be detected by CloudVisor-D by comparing the hash values.
8 Evaluation
This section evaluates CloudVisor-D’s overall perfor-
mance and scalability by answering the following questions:
complexity of
implementation
Q1: What
CloudVisor-D?
is
the
Q2: Does CloudVisor-D improve the performance of the
micro-architectural operations (e.g., hypercalls)?
Q3: How do real-world applications perform under
CloudVisor-D?
Q4: Does CloudVisor-D achieve good I/O performance?
Q5: How does CloudVisor-D perform when running mul-
tiple instances of guest VMs?
Q6: Can CloudVisor-D defend against malicious VMs or
SubVisor?