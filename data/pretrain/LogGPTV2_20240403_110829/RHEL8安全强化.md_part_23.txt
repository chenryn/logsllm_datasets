**其它资源**
-   `clevis-luks-unbind(1)`{.literal}、`cryptsetup(8)`{.literal} 和
    `luksmeta(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-automated-enrollment-of-luks-encrypted-volumes-using-kickstart_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}使用 Kickstart 配置 LUKS 加密卷的自动注册 {.title}
:::
按照此流程中的步骤配置使用 Clevis 注册 LUKS 加密卷的自动安装过程。
::: orderedlist
**流程**
1.  指示 Kickstart 对磁盘进行分区，以便使用临时密码为所有挂载点（除
    `/boot`{.literal} ）启用了 LUKS
    加密。注册过程的这一步中的密码是临时密码。
    ``` screen
    part /boot --fstype="xfs" --ondisk=vda --size=256
    part / --fstype="xfs" --ondisk=vda --grow --encrypted --passphrase=temppass
    ```
    请注意，兼容 OSPP 的系统需要更复杂的配置，例如：
    ``` screen
    part /boot --fstype="xfs" --ondisk=vda --size=256
    part / --fstype="xfs" --ondisk=vda --size=2048 --encrypted --passphrase=temppass
    part /var --fstype="xfs" --ondisk=vda --size=1024 --encrypted --passphrase=temppass
    part /tmp --fstype="xfs" --ondisk=vda --size=1024 --encrypted --passphrase=temppass
    part /home --fstype="xfs" --ondisk=vda --size=2048 --grow --encrypted --passphrase=temppass
    part /var/log --fstype="xfs" --ondisk=vda --size=1024 --encrypted --passphrase=temppass
    part /var/log/audit --fstype="xfs" --ondisk=vda --size=1024 --encrypted --passphrase=temppass
    ```
2.  通过在 `%packages`{.literal} 部分中列出它们来安装相关的 Clevis
    软件包：
    ``` screen
    %packages
    clevis-dracut
    clevis-luks
    clevis-systemd
    %end
    ```
3.  （可选）要确保您可以在需要时手动解锁加密的卷，请在删除临时密码短语前添加更强的密码短语。如需更多信息，请参阅
    [如何给现有 LUKS 设备添加密语、密钥或
    keyfile](https://access.redhat.com/solutions/230993){.link} 的文章。
4.  在 `%post`{.literal} 部分中调用 `clevis luks bind`{.literal}
    来执行绑定。之后，删除临时密码：
    ``` screen
    %post
    clevis luks bind -y -k - -d /dev/vda2 \
    tang '{"url":"http://tang.srv"}' 
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-automated-unlocking-of-a-luks-encrypted-removable-storage-device_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}配置 LUKS 加密的可移动存储设备的自动解锁 {.title}
:::
使用这个流程来设置 LUKS 加密的 USB 存储设备的自动解锁过程。
::: orderedlist
**流程**
1.  要自动解锁 LUKS 加密的可移动存储设备，如 USB 驱动器，请安装
    `clevis-udisks2`{.literal} 软件包：
    ``` screen
    # yum install clevis-udisks2
    ```
2.  重启系统，然后使用 `clevis luks bind`{.literal} 命令执行绑定步骤，如
    [配置 LUKS
    加密卷的手动注册](#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-manual-enrollment-of-volumes-using-clevis_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption "配置 LUKS 加密卷的手动注册"){.link}
    中所述，例如：
    ``` screen
    # clevis luks bind -d /dev/sdb1 tang '{"url":"http://tang.srv"}'
    ```
3.  现在，可以在 GNOME 桌面会话中自动解锁 LUKS 加密的可移动设备。绑定到
    Clevis 策略的设备也可以通过 `clevis luks unlock`{.literal}
    命令解锁：
    ``` screen
    # clevis luks unlock -d /dev/sdb1
    ```
:::
在使用 TPM 2.0 策略而不是 Tang 服务器时，您可以使用类似的流程。
::: itemizedlist
**其它资源**
-   `clevis-luks-unlockers(7)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#deploying-high-availability-nbde-systems_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}部署高可用性 NBDE 系统 {.title}
:::
Tang 提供两种构建高可用性部署的方法：
::: variablelist
[客户端冗余（推荐）]{.term}
:   客户端应配置成能够绑定到多个 Tang 服务器。在此设置中，每个 Tang
    服务器都有自己的密钥，客户端可以通过联系这些服务器的子集来进行解密。Clevis
    已通过其 `sss`{.literal}
    插件支持此工作流。红帽建议对高可用性部署使用这个方法。
[密钥共享]{.term}
:   出于冗余的目的，可以部署多个 Tang
    实例。要设置第二个或后续的实例，请安装 `tang`{.literal}
    软件包，并使用 `rsync`{.literal} ，通过 `SSH`{.literal}
    将密钥目录复制到新主机上。请注意，红帽不推荐此方法，因为共享密钥会增加密钥的风险，需要额外的自动化基础设施。
:::
::: section
::: titlepage
## []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#_high_available_nbde_using_shamirs_secret_sharing}使用 Shamir 的 Secret 共享的高可用性 NBDE {.title}
:::
Shamir 的 Secret 共享(SSS)是一种加密方案，可将Secret
分成多个独特的部分。要重建 secret，需要几个部分。数字称为阈值，SSS
也被称为阈值方案。
Clevis 提供 SSS
的实施。它创建一个密钥，并将其分为若干个片。每片都使用另一个 pin
进行加密，甚至包括递归 SSS。另外，您可以定义阈值 `t`{.literal}。如果
NBDE 部署至少解密了 `t`{.literal}
片，那么它将恢复加密密钥，并且解密过程会成功。当 Clevis
检测到比阈值中指定的部分少时，它会打印错误消息。
::: section
::: titlepage
### []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#_example_1_redundancy_with_two_tang_servers}示例 1：带有两个 Tang 服务器的冗余 {.title}
:::
当两个 Tang 服务器中至少有一个可用时，以下命令会解密 LUKS 加密设备：
``` screen
# clevis luks bind -d /dev/sda1 sss '{"t":1,"pins":{"tang":[{"url":"http://tang1.srv"},{"url":"http://tang2.srv"}]}}'
```
上一命令使用以下配置方案：
``` screen
{
    "t":1,
    "pins":{
        "tang":[
            {
                "url":"http://tang1.srv"
            },
            {
                "url":"http://tang2.srv"
            }
        ]
    }
}
```
在此配置中，SSS 阈值 `t`{.literal} 设置为 `1`{.literal}，如果列出的两个
`tang`{.literal} 服务器中至少有一台可用，则 `clevis luks bind`{.literal}
命令可以成功重建 secret。
:::
::: section
::: titlepage
### []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#_example_2_shared_secret_on_a_tang_server_and_a_tpm_device}示例 2：Tang 服务器和 TPM 设备上共享的 secret {.title}
:::
当 `tang`{.literal} 服务器和 `tpm2`{.literal}
设备都可用时，以下命令可成功解密 LUKS 加密设备：
``` screen
# clevis luks bind -d /dev/sda1 sss '{"t":2,"pins":{"tang":[{"url":"http://tang1.srv"}], "tpm2": {"pcr_ids":"0,7"}}}'
```
现在 SSS 阀值 \'t\' 设置为 \'2\' 的配置方案是：
``` screen
{
    "t":2,
    "pins":{
        "tang":[
            {
                "url":"http://tang1.srv"
            }
        ],
        "tpm2":{
            "pcr_ids":"0,7"
        }
    }
}
```
::: itemizedlist
**其它资源**
-   `Tang(8)`{.literal} （`高可用性`{.literal}
    部分）、`clevis(1)`{.literal} （ `Shamir 的 Secret 共享`{.literal}
    部分）和 `clevis-encrypt-sss(1)`{.literal} 手册页
:::
:::
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#deployment-of-virtual-machines-in-a-nbde-network_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}NBDE 网络中虚拟机的部署 {.title}
:::
`clevis luks bind`{.literal} 命令不会改变 LUKS
主密钥。这意味着，如果您创建了一个 LUKS
加密镜像以便在虚拟机或云环境中使用，则运行此镜像的所有实例都将共享主密钥。这极其不安全，应始终避免。
这不是 Clevis 的一个限制，而是 LUKS
的设计原则。如果您希望在云中有一个加密的根卷，则需要确保对云中的每个 Red
Hat Enterprise Linux 实例都执行了安装过程（通常使用
Kickstart）。如果没有共享 LUKS 主密钥，就无法共享镜像。
如果您要在虚拟化环境中部署自动解锁，红帽强烈建议您将 lorax 或
virt-install 等系统与 Kickstart 文件一起使用（请参阅 [使用 Kickstart
配置 LUKS
加密卷的自动注册](#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-automated-enrollment-of-luks-encrypted-volumes-using-kickstart_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption "使用 Kickstart 配置 LUKS 加密卷的自动注册"){.link}）或其他自动调配工具，以确保每个加密的虚拟机都有一个唯一的主密钥。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
虚拟机不支持使用 TPM 2.0 策略的自动解锁。
:::
::: itemizedlist
**其它资源**