Hi all,  
I want to **include trainable weights in loss function**. As I dont know how
to, I use a layer that contains weight only. This layer only output weights to
loss function.  
However, there are too many weights variables, I dont want to output all of
them for the whole batch. So I decide to select some of related weights
variables as an output.  
I will use input class info to select weights variables.  
For example. My layer has a kernel of size (10, 1024). Then if input is 0, it
outputs kernel[0, :]. If input is 1, kernel[1,:]
However, when I implement following model, the input always has a shape of (?,
1). ? is the undefined batch number. So, I use this line to select output for
these inputs.  
`proxy_of_class = self.kernel[x[:,0], :]`
But I always encounter this error:
      File "proxyModel.py", line 18, in call
        proxy_of_class = self.kernel[x[:,0], :]
    ValueError: Shapes must be equal rank, but are 1 and 0
            From merging shape 0 with other shapes. for 'proxy/strided_slice_1/stack_1' (op: 'Pack') with input shapes: [?], [].
**How can I solve this problem?**
Below is my code based on tensorflow1.6
    from __future__ import division
    import tensorflow as tf
    from tensorflow.python.keras.models import Model
    from tensorflow.python.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Layer
    class Proxy(Layer):
        def __init__(self,num_class=2, **kwargs):
            self.num_class = num_class
            super(Proxy, self).__init__(**kwargs)
        def build(self, input_shape):
            self.kernel = self.add_weight(name='kernel',
                                            shape=(self.num_class, 1024),
                                            initializer='uniform',
                                            trainable=True,
                                            constraint=None)
            super(Proxy, self).build(input_shape)
        def call(self, x, mask=None):
            proxy_of_class = self.kernel[x[:,0], :]
            return proxy_of_class
        def compute_output_shape(self, input_shape):
            return (input_shape[0], 1024)
    def build_model(image_size, n_classes):
        input1 = Input(shape=image_size) # for image encode
        flat = Flatten()(input1)
        dense = Dense(1024,activation='relu')(flat)
        input2 = Input(shape=(1,))       # for class index
        output = Proxy()(input2)
        model = Model(inputs=[input1, input2], outputs=[dense, output])
        model.summary()
        return model
    build_model((224,224,3),2)