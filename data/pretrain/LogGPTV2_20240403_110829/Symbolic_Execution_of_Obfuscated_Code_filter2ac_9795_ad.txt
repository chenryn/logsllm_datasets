the overall progress of analysis of a potentially malicious
code sample.
Overall, the results indicate that anti-symbolic obfusca-
tions can signiﬁcantly hinder multi-path exploration using
symbolic analysis.
Symbolic Code
5.1.2
We built versions of our synthetic programs to incorpo-
rate symbolic code into their logic. S2E did not detect the
symbolic code and so did not generate any inputs that would
cause diﬀerent symbolic code to be generated while our tool
was able to detect the symbolic codes and generate appro-
priate constraints thus generated inputs that would trigger
other execution paths in the synthetic programs.
5.2 Cost
Table 2 presents normalized data of the analysis time and
the number of path constraint queries submitted to the un-
derlying SMT solver by S2E and ConcoLynx (our tool).
Since we were not able to get any useful results out of Vine,
it is omitted from the costs table and only the performance
data for S2E is given. Our system post-processes an exe-
cution trace of the program to generate path constraints,
while S2E saves program states whenever it reaches a pos-
sible branch point in the program’s execution. In order to
be able to provide a fair comparison of the systems, the
numbers presented here are normalized with respect to un-
obfuscated programs for each tool. For the assiral program
obfuscated with Themida, we were not able to execute the
binary on our tracing facility: the program crashed while
generating the trace so we were unable to apply our tool
to this program. We chose 12 hours timeout for our toy
programs and 6 hours timeout for malicious codes.
The data in Table 2 lead to the following conclusions:
1. ConcoLynx is able to identify the branch points of the
obfuscated programs.
The total number of queries submitted to the con-
straint solver by our system is seen to go up for pro-
grams obfuscated using EXECryptor:
for these pro-
grams, we have manually veriﬁed that the obfusca-
tion tool inserts additional conditional code that uses
tainted values, for example the obfuscation tool inserts
additional code that checks the sign of the result of an
arithmetic operation where is not checked in the origi-
nal program, making the symbolic engine produce and
send more queries to SMT solver.
740Program
Orig.
ConcoLynx
S2E
(DFS)
S2E
(random)
simple-if
bin-search
bubble-sort
assiral
clibo
mydoom
netsky ae
simple-if
bin-search
bubble-sort
assiral
clibo
mydoom
netsky ae
simple-if
bin-search
bubble-sort
assiral
clibo
mydoom
netsky ae
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
Analysis time (normalized)
2002.1
VM
1.0
1.0
1.0
1.0
1.0
1.0
1.0
No. queries (normalized)
TH
CV
1.0
1.0
1.0
1.0
1.0
1.0
−
1.0
1.0
1.0
1.0
1.0
1.0
1.0
19
24.4
7.9
0.1
15.1
10.8
17.2
24.5
19
24.3
57.7
15.5
12.1
17.2
24.5
EC
35
13
14.5
11
17.6
8.6
8.6
52.8
26.7
155.6
12.2
14.7
23.2
22.1
53.2
26.6
155.5
12.25
14.7
23.7
22.2
17
62.5
52
37.2
35.6
31
181.5
3584
1.2
0
123
7
0
Timeout 12.6
CV
5.6
9.7
3.9
8.8
24.8
5.7
7.7
4.7
TH
112.7
339.3
152.7
−
10.8
55.9
27.5
VM
14.6
19.1
38.5
63.7
123.9
63.9
20.3
EC
1.9
6.6
12.9
3.5
3.3
24.6
3.6
8.5 Timeout Timeout
Timeout
0
30.7 Timeout Timeout
0
Timeout
2.3
0
3.5 Timeout Timeout
0
Timeout Timeout
5
0
4.2 Timeout
31
8.5
49.2
40.4 Timeout 14.8
14.8
239
96.5
3.9
74.6
Timeout
Timeout
74.4 Timeout Timeout
1.3 Timeout Timeout
3.9 Timeout Timeout
3.1 Timeout Timeout
2.5 Timeout
67.5
1.3
3.2
2.7
2.5
2.1
2.7
4.1
3.6
4.2
847
16.5
154.6
2
8.2
41.7
40.6
Key: CV: Code Virtualizer; EC: EXECryptor; VM: VMProtect; TH: Themida
Table 2: Cost analysis of ConcoLynx compared to S2E for obfuscated programs, numbers are normalized to
the cost of unobfuscated programs
The increase in analysis time for the obfuscated code
ranges from a low of about 2× for Code Virtualizer to a
maximum of about 340× for one Themida-obfuscated
program. This increase is due primarily to the larger
number of instructions executed by the obfuscated pro-
grams.
2. S2E is able to successfully analyze most of the pro-
grams obfuscated using Code Virtualizer (except for
a timeout on bin-search) and EXECryptor (except for
a failure on bin-search with the Random search strat-
egy). This result is encouraging. For VMProtect and
Themida, however, S2E failed or timed out on most of
the test programs.
Table 3 gives the actual amount of time of the analysis. In
Table 3, T0 is the time for each program to execute with-
out tracing, T1 shows the time that is needed to collect an
execution trace for each program and T2 and T3 show the
analysis time of conducting standard byte-level taint analy-
sis and bit-level taint analysis (see Section 4.1) respectively
on each execution trace. The last four columns in the ta-
ble show the overhead ratio for each of the above analyses:
T1/T0 is the overhead of recording the execution trace of a
program compared to the native execution time. This over-
head ranges from 1499× to 18203× with a geometric mean
of 5540× slowdown. T2/T0 and T3/T0 show how much over-
head diﬀerent taint analyses algorithms impose compared to
the run-time of the program. This overhead for byte-level
taint analysis ranges between 0.2× and 21× with geomet-
ric mean of 3.2× slowdown and for bit-level taint analysis
ranges from 2.6× to 191× with geometric mean of 26.1×
slowdown. Finally, T3/T2 refers to the overhead of bit-level
taint over byte-level taint analysis which ranges between 3×
to 15.7× with geometric mean of 8.06× slowdown.
The numbers shown in Table 3 suggest that although the
taint approach used in ConcoLynx is more expensive than
the standard byte-level taint approach, the overhead of trac-
ing a program is signiﬁcantly higher than the rest of the
analyses and so the increased overhead imposed by our taint
analysis is dominated by that of trace recording. Moreover,
the run-time of our approach, including the overhead of bit-
level taint analysis, is much better than the running-time of
other tools (S2E and Vine) when dealing with obfuscated
code which makes our approach more practical.
6. RELATED WORK
There is a considerable body of research on symbolic and
concolic execution: Schwartz et al. [33] give a survey. The
analysis of malicious and/or obfuscated code forms a signiﬁ-
cant application of this technology [1–3,13,27,35,47]. While
such techniques can be eﬀective when obfuscation is not an
issue (e.g., in environmentally triggered programs where the
trigger code uses unobfuscated conditional branches), they
fail in the face of obfuscations such as those discussed in this
paper. The general problems associated with such analy-
ses, e.g., path explosion or symbolic jumps, are known [33],
however most of the research literature do not address them
explicitly. This is especially problematic for applications of
symbolic and concolic analysis to malware code since these
programs are often heavily obfuscated to avoid detection
and/or hamper analysis. Furthermore, code obfuscation can
raise its own challenges for symbolic and concolic analysis,
e.g., the symbolic code problem, discussed earlier, which we
have not seen discussed elsewhere in the research literature.
741Time (milliseconds)
Overhead Ratio
Program
Native Exec. Tracing
Tainting
Time (T0)
V
C
C
E
H
T
M
V
simple-if
binary-search
bubble-sort
assiral
clibo
mydoom
netsky ae
simple-if
bin-search
bubble-sort
assiral
clibo
mydoom
netsky ae
simple-if
bin-search
bubble-sort
clibo
mydoom
netsky ae
simple-if
binary-search
bubble-sort
assiral
clibo
mydoom
netsky ae
Geometric Mean
16
16
16
15
15
16
15
15
16
16
16
16
16
16
453
469
406
125
422
423
15
16
16
32
47
32
31
(T1)
66,764
71,573
70,686
55,764
35,804
93,472
24,288
116,187
120,967
122,284
104,752
88,723
136,400
124,735
679,110
904,851
728,041
957,996
1,000,077
768,828
229,510
236,892
236,729