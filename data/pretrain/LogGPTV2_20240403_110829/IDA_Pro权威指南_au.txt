重新格式化之后，IDA 认识到，任何对分配给 var_18
 的24 个字节块的内存引用，都必须引用该结构体中的一个字段。如果 IDA 发现这样一个引用，它会尽一切努力，将这个内存引用与结构体变量中的一个已定义的字段关联起来。在这个特例中，反汇编代码清单会自动进行重新格式化，以合并结构体布局，如下所示：
.text:00401006                 mov     [ebp+var_18.field1], 10  
.text:0040100D                 mov     [ebp+var_18.field2], 20  
.text:00401013                 mov     [ebp+var_18.field3], 30  
.text:00401017                 mov     [ebp+var_18.field4], 40  
.text:0040101E                 fld     ds:dbl_40B128  
.text:00401024                 fstp    [ebp+var_18.field5]  
在反汇编代码清单中使用结构体表示法的好处在于，它从总体上提高了反汇编代码清单的可读性。在重新格式化后的窗口中使用字段名称，能够更加准确地反映源代码是如何操纵数据的。
将全局变量格式化成结构体的过程与格式化栈变量所使用的过程几乎完全相同。要进行格式化，选择要格式化的变量，或者表示结构体开头部分的地址，再使用 Edit ▶ Struct Var （ALT+Q）选择合适的结构体类型即可。作为针对未定义的全局数据（不是栈数据）的备选方案，你可以使用IDA 的上下文菜单选择要查看的结构体选项，并选择要应用于所选地址的可用结构体模板。
8.4 导入新的结构体
逐渐熟悉 IDA 的结构体创建和编辑功能后，你可能希望找到一种更加简单的操作方法。在创建新结构体方面，IDA 确实提供了一些捷径。IDA 能够解析C（而非 C++ ）数据声明，以及整个C 头文件，并自动为在这些声明或头文件中定义的结构体创建对应的 IDA 结构体。如果你碰巧拥有你正进行逆向工程的二进制文件的源代码，或者至少是头文件，那么，你就可以让IDA直接从源代码中提取出相关结构体，从而节省大量时间。
8.4.1 解析C结构体声明
使用View▶ Open Subviews▶ Local Types （查看▶打开子窗口▶本地类型）命令，可以打开Local Types 子窗口，其中列出了所有解析到当前数据库中的类型。对于新数据库，“Local Types ”窗口最初是空的，但是，该窗口能够通过INSERT 键或上下文菜单中的 Insert 选项解析新的类型。得到的类型输入对话框如图 8-11 所示。
图8-11 Local Types 输入对话框
解析新类型时发生的错误将在IDA 的输出窗口中显示。如果类型声明被成功解析，“Local Types”窗口将列出该类型及其相关声明，如图 8-12 所示。
图8-12 Local Types 窗口
请注意，IDA 解析器使用 4 字节的默认结构体成员对齐方式。如果你的结构体需要其他对齐方式，你可以包括该对齐方式，IDA 认可使用 pragma pack
 指令来指定所需的结构体成员对齐方式。
添加到Local Types（本地类型）窗口中的数据类型不会立即在 Structures（结构体）窗口中出现。有两种方法可以将本地类型声明添加到 Structures窗口中。最简单的方法是在相关本地类型上单击鼠标右键，并选择 Synchronize to idb。或者，由于每个新类型均被添加到标准结构体列表中，因而也可将新类型导入到 Structures窗口中，如 8.5节所述。
8.4.2 解析C头文件
要解析头文件，可以使用 File▶ Load File ▶ Parse C Header File （文件▶加载文件▶解析C 头文件）选择你想要解析的头文件。如果一切正常，IDA 会通知你 Compilation successful（编译完成）。如果解析器遇到任何问题，IDA 将会在输出窗口中显示错误消息。
IDA 会将所有被成功解析的结构体添加到当前数据库的标准结构体列表中（具体地说，是列表的末尾）。如果新结构体的名称与现有结构体的名称相同，IDA 会用新结构体布局覆盖原有结构体定义。除非你明确选择添加新的结构体，否则，新结构体不会出现在 Structures窗口中。我们将在8.5节讨论如何在 Structures窗口中添加标准结构体。
在解析C 头文件时，记住以下要点会有所帮助。
虽然内置解析器确实遵循 pack
 杂注，但它不需要和你的编译器一样，默认对结构体成员进行对齐。默认情况下，解析器会建立 4 字节对齐的结构体。
解析器理解 C 预处理器 include
 指令。为解析 include
 指令，解析器会搜索包含被解析文件的目录，以及 Options▶ Compiler（选项▶编译器）配置对话框中的任何Include 目录（包含）。
解析器只能理解 C 标准数据类型。但是，解析器还能够理解预处理器 define
 指令和C typedef
 语句。因此，如果解析器之前遇到过适当的typedef
 ，它将能够正确解析 unit32_t
 之类的类型。
如果你没有源代码，那么你会发现，使用文本编辑器以 C 表示法迅速定义一个结构体布局，并解析得到的头文件或把声明粘贴为一个新的本地类型，会比使用 IDA 烦琐的手动结构体定义工具更加方便。
只有当前数据库能够使用新创建的结构体。如果想要在其他数据库中使用新结构体，你必须重新创建该结构体。在本章后面讨论TIL 文件时，我们将讨论一些简化上述步骤的方法。
一般而言，要最大限度地提高成功解析一个头文件的几率，你需要使用标准C 数据类型，并尽可能地减少使用 include
 文件，从而最大程度地简化结构体定义。记住，在IDA 中创建结构体时，正确布局最为重要。正确的布局更多地取决于每个字段的正确大小和结构体的正确对齐，而不只是对每个字段都使用正确的类型。换句话说，如果你需要用 int
 替换所有的 unit32_t
 ，以正确解析一个文件，那么，就请立即这样做吧！
8.5 使用标准结构体
如前所述，IDA 能够识别大量与各种库和 API 函数有关的数据结构。最初创建一个数据库时，IDA 会尝试确定与二进制文件有关的编译器和平台，并加载适当的结构体模板。当 IDA 在反汇编代码清单中操纵结构体时，它会在 Structures窗口中添加相应的结构体定义。因此，Structures窗口中显示的是应用于当前二进制文件的已知结构体的子集。除了创建自定义结构体外，你还可以从IDA 的已知结构体列表中提取出其他标准结构体，并将其添加到 Structures窗口中。
要添加一个新结构体，首先，在Structures窗口中按下 INSERT 键。在图8-3的Create structure/ union对话框中，包含一个 Add standard structure（添加标准结构体）按钮。单击这个按钮，IDA将显示与当前编译器（在分析阶段检测出来）和文件格式有关的结构体主列表。这个结构体主列表中还包含通过解析 C 头文件添加到数据库中的结构体。选择结构体对话框如图8-13 所示，该对话框用于选择添加到 Structures窗口中的结构体。
图8-13 选择标准结构体
你可以利用搜索功能，根据部分文本匹配来定位结构体。该对话框还允许你进行前缀匹配。如果你知道某个结构体名称的前几个字符，只需输入这几个字符（它们将出现在对话框底部的状态栏上），列表窗口将跳转到第一个与这个前缀匹配的结构体。选择一个结构体，该结构体及任何嵌套结构体都将添加到 Structures窗口中。
下面举例说明如何使用标准结构体。假如你想要分析一个Windows PE二进制文件的文件头。默认情况下，在创建后，文件头不会立即加载到数据库中。但是，如果你在最初创建数据库时选择Manual load（手动加载）选项，就可以将文件头加载到数据库中。加载文件头可确保只有与这些头部有关的数据类型才出现在数据库中。多数情况下，文件头不会以任何形式被格式化，因为通常程序并不会直接引用它们自己的文件头。因此，分析器也没有必要对文件头应用结构体模板。
对一个PE 二进制文件进行一番研究后，你会发现，PE 文件的开头部分是一个名为IMAGE_DOS_HEADER
 的MS-DOS 头部结构体。另外，IMAGE_DOS_HEADER
 中的数据指向一个IMAGE_NE_HEADER
 结构体的位置。它详细说明了 PE二进制文件的内存布局。选择加载 PE头部，你将看到类似于下面的未格式化的反汇编代码清单。了解 PE文件结构的读者会发现，文件的前两个字节是我们熟悉的 MS-DOS 幻数MZ
 。
HEADER:00400000 __ImageBase     db  4Dh ; M  
HEADER:00400001                 db  5Ah ; Z  
HEADER:00400002                 db  90h ; É  
HEADER:00400003                 db    0  
HEADER:00400004                 db    3  
HEADER:00400005                 db    0  
HEADER:00400006                 db    0  
HEADER:00400007                 db    0  
HEADER:00400008                 db    4  
HEADER:00400009                 db    0  
HEADER:0040000A                 db    0  
HEADER:0040000B                 db    0  
HEADER:0040000C                 db 0FFh  
HEADER:0040000D                 db 0FFh  
HEADER:0040000E                 db    0  
HEADER:0040000F                 db    0
格式化这个文件时，你需要一些 PE文件参考文档帮助你了解每一种数据类型。通过使用结构体模板，IDA 可以将这些字节格式化成一个IMAGE_DOS_HEADER
 结构体，使这些数据更加有用。第一步是根据上面的详细说明，添加标准的IMAGE_DOS_HEADER
 结构体（你可以在打开IMAGE_NT_HEADER
 结构体的同时添加该结构体）。第二步是使用 Edit▶ Struct Var （ALT+Q），将从_ImageBase
 开始的字节转换成一个 IMAGE_DOS_HEADER
 结构体。这样，即得到下面的格式化代码：
HEADER:00400000 __ImageBase IMAGE_DOS_HEADER  5A4Dh, 90h, 3, 0, 4, 0, 0FFFFh, 0, 0B8h, \
HEADER:00400000                               0, 0, 0, 40h, 0, 0, 0, 0, 0, 80h  
HEADER:00400040 db 0Eh
如你所见，文件的前64 （0x40 ）个字节已被折叠成一个数据结构，其类型也在反汇编代码清单中注明。但是，除非你对这个特殊的结构体非常熟悉，否则，你仍然无法清楚了解其中每个字段的意义。不过，我们可以展开结构体，使操作更进一步。打开一个结构体的数据项时，IDA会使用结构体定义中对应的字段名称，对每个字段进行注释。使用数字键盘上的加号键可以打开折叠后的结构体。打开后的结构体如下所示：
HEADER:00400000 __ImageBase     dw 5A4Dh                ; e_magic  
HEADER:00400000                 dw 90h                  ; e_cblp  
HEADER:00400000                 dw 3                    ; e_cp  
HEADER:00400000                 dw 0                    ; e_crlc  
HEADER:00400000                 dw 4                    ; e_cparhdr  
HEADER:00400000                 dw 0                    ; e_minalloc  
HEADER:00400000                 dw 0FFFFh               ; e_maxalloc  
HEADER:00400000                 dw 0                    ; e_ss  
HEADER:00400000                 dw 0B8h                 ; e_sp  
HEADER:00400000                 dw 0                    ; e_csum  
HEADER:00400000                 dw 0                    ; e_ip  
HEADER:00400000                 dw 0                    ; e_cs  
HEADER:00400000                 dw 40h                  ; e_lfarlc  
HEADER:00400000                 dw 0                    ; e_ovno  
HEADER:00400000                 dw 4 dup(0)             ; e_res  
HEADER:00400000                 dw 0                    ; e_oemid  
HEADER:00400000                 dw 0                    ; e_oeminfo  
HEADER:00400000                 dw 0Ah dup(0)           ; e_res2  
HEADER:00400000              ➊  dd 80h                  ; e_lfanew  
HEADER:00400040                 db  0Eh
然而，IMAGE_DOS_HEADER
 的字段并没有特别有意义的名称，因此，我们在查阅 PE文件参考文献后才知道：➊处的e_lfanew
 字段表示文件偏移量，在该位置可找到IMAGE_NT_HEADER
 结构体。应用前面讨论的所有步骤，在地址 00400080
 （数据库中的第 0x80
 字节）处创建一个 IMAGE_NT_ HEADER
 结构体，将得到如下所示的格式化后的结构体（仅显示一部分代码）：
HEADER:00400080        dd 4550h                ; Signature  
HEADER:00400080        dw 14Ch                 ; FileHeader.Machine  
HEADER:00400080     ➊  dw 5                    ; FileHeader.NumberOfSections  
HEADER:00400080        dd 4789ADF1h            ; FileHeader.TimeDateStamp  
HEADER:00400080        dd 1400h                ; FileHeader.PointerToSymbolTable  
HEADER:00400080        dd 14Eh                 ; FileHeader.NumberOfSymbols  
HEADER:00400080        dw 0E0h                 ; FileHeader.SizeOfOptionalHeader  
HEADER:00400080        dw 307h                 ; FileHeader.Characteristics  
HEADER:00400080        dw 10Bh                 ; OptionalHeader.Magic  
HEADER:00400080        db 2                    ; OptionalHeader.MajorLinkerVersion  
HEADER:00400080        db 38h                  ; OptionalHeader.MinorLinkerVersion  
HEADER:00400080        dd 800h                 ; OptionalHeader.SizeOfCode  
HEADER:00400080        dd 800h                 ; OptionalHeader.SizeOfInitializedData  
HEADER:00400080        dd 200h                 ; OptionalHeader.SizeOfUninitializedData
HEADER:00400080        dd 1000h                ; OptionalHeader.AddressOfEntryPoint  
HEADER:00400080        dd 1000h                ; OptionalHeader.BaseOfCode  
HEADER:00400080        dd 2000h                ; OptionalHeader.BaseOfData  
HEADER:00400080      ➋ dd 400000h              ; OptionalHeader.ImageBase  
可见，这里的字段名称更有意义。我们立即发现，该文件由 5 个部分（➊）构成，应该是在虚拟地址 00400000
 （➋）被加载到内存中。使用数字键盘上的减号键，可以将打开状态的结构体恢复到折叠状态。
8.6 IDA TIL 文件
IDA 中的所有数据类型和函数原型信息都存储在 TIL 文件中。IDA 拥有存储在/til目录中的许多主要编译器和 API 的类型库信息。Types 窗口（View▶ Open subview▶ Type Libraries ）列出了当前加载的.til 文件，并可用于加载你想要使用的其他.til 文件。IDA 将根据在分析阶段发现的二进制文件属性，自动加载类型库。正常情况下，多数用户不需要直接处理.til 文件。
8.6.1 加载新的TIL文件
有时候，IDA 可能无法检测到用于构建某个二进制文件的特殊编译器，这可能是由于该二进制文件经过某种形式的模糊处理所致。这时，你可能需要在Types窗口中按下 INSERT 键，并选择你想要加载的.til文件。加载一个新的.til文件后，该文件包含的所有结构体定义都被添加到标准结构体列表中，其类型信息也被应用于二进制文件中的某些函数，这些函数可在新加载的.til 文件中找到匹配的原型。换句话说，一旦IDA 获知与某个函数有关的新信息，它就会自动应用这些新信息。
8.6.2 共享TIL文件
IDA 还利用.til 文件存储你在 Structures窗口中手动创建的或者通过解析 C 头文件获得的任何自定义结构体定义。这些结构体存储在一个与创建它们的数据库有关的专用.til 文件中。该文件的名称与其相关数据库的名称相同，扩展名为.til。例如，如果数据库名为 some_file.idb ，则相应的类型库文件则为 some_file.til。在正常情况下，你根本不会看到这个文件，除非你碰巧在 IDA中打开了上述数据库。前面我们提到过，.idb 文件实际上是一个归档文件（类似于.tar 文件），用于保存不使用的数据库组件。打开一个数据库时，其组件文件（.til 文件为其中之一）将被提取出来，成为 IDA 中的运行文件。
有关如何在数据库之间共享.til 文件的讨论，请访问 http://www.hex-rays.com/forum/viewtopic.php?f=6&t=986
1
 。有两种共享方法。第一种方法有些不太正规，即将.til 文件由打开的数据库复制到另一个目录中，然后再通过 Types 窗口，在任何其他数据库中打开这个.til 文件。第二种是一种正式的方法，即从一个数据库中提取出自定义类型信息，生成一段 IDC 脚本，用于在任何其他数据库中重建自定义结构体。使用 File▶ Produce File▶ Dump Type. into to IDC File （文件▶生成文件▶转储类型信息到IDC 文件）命令可生成该脚本。但是，与第一种方法不同的是，这种方法只能转储 Structures窗口中列出的结构体，但并不转储通过解析 C 头文件得到的结构体（而复制.til 文件却可以转储这类结构体）。
1. 这个链接只有已注册用户才能访问。
Hex-Rays 还提供一个名为 tilib
 的独立工具，用于在 IDA 以外创建.til 文件。注册用户可以通过Hex-Rays IDA 下载页面下载该实用工具的.zip 文件。要安装这个工具，只需要将.zip 文件解压到目录中即可。tilib
 实用工具可用于列举现有.til 文件的内容，或通过解析 C（而不是C++ ）头文件来创建新的.til 文件。下面的命令将列举 Visual Studio 6类型库的内容：
C:\Program Files\IdaPro>tilib -l til\pc\vc6win.til
创建新的.til 文件包括命名要解析的头文件及要创建的.til 文件。你可以使用命令行选项来指定其他包含文件目录或之前解析的.til 文件，以解析头文件中包含的任何依赖关系。下面的命令将创建一个包含 ch8_struct