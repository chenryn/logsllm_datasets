Keromytis. ret2dir: Rethinking kernel isolation. In USENIX Secu-
rity Symposium, pages 957–972, 2014.
[29] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee,
Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. Flip-
ping bits in memory without accessing them: An experimental study of
dram disturbance errors. In ACM SIGARCH Computer Architecture
News, volume 42, pages 361–372. IEEE Press, 2014.
[30] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike
Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael
Schwarz, and Yuval Yarom. Spectre attacks: Exploiting speculative
execution. ArXiv e-prints, January 2018.
[31] Steffen Kosinski, Fernando Latorre, Niranjan Cooray, Stanislav
Shwartsman, Ethan Kalifon, Varun Mohandru, Pedro Lopez, Tom
Aviram-Rosenfeld, Jaroslav Topp, Li-Gao Zei, et al. Store forwarding
for data caches, November 29 2016. US Patent 9,507,725.
[34] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice,
and Stefan Mangard. Armageddon: Cache attacks on mobile devices.
In 25th USENIX Security Symposium (USENIX Security 16), pages
549–564, Austin, TX, 2016. USENIX Association.
[35] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel
Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading ker-
nel memory from user space. In 27th USENIX Security Symposium
(USENIX Security 18), Baltimore, MD, 2018. USENIX Association.
[36] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee.
Last-level cache side-channel attacks are practical. In Proceedings
of the 2015 IEEE Symposium on Security and Privacy, SP ’15, pages
605–622, Washington, DC, USA, 2015. IEEE Computer Society.
[37] Errol L. Lloyd and Michael C. Loui. On the worst case performance of
buddy systems. Acta Informatica, 22(4):451–473, Oct 1985.
[38] Giorgi Maisuradze and Christian Rossow. ret2spec: Speculative ex-
ecution using return stack buffers. In Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security, pages
2109–2122. ACM, 2018.
[39] Intel 64 Architecture Memory Ordering White Paper. http://www.cs.
cmu.edu/~410-f10/doc/Intel_Reordering_318147.pdf, 2008.
Accessed: 2018-11-26.
[40] Ahmad Moghimi, Thomas Eisenbarth, and Berk Sunar. Memjam: A
false dependency attack against constant-time crypto implementations
in SGX. In Topics in Cryptology - CT-RSA 2018 - The Cryptographers’
Track at the RSA Conference 2018, San Francisco, CA, USA, April
16-20, 2018, Proceedings, pages 21–44, 2018.
[41] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. Cachezoom:
In Cryptographic
How sgx ampliﬁes the power of cache attacks.
Hardware and Embedded Systems – CHES 2017, pages 69–90. Springer,
2017.
[42] Yossef Oren, Vasileios P. Kemerlis, Simha Sethumadhavan, and An-
gelos D. Keromytis. The spy in the sandbox: Practical cache attacks
in javascript and their implications. In Proceedings of the 22Nd ACM
SIGSAC Conference on Computer and Communications Security, CCS
’15, pages 1406–1418, New York, NY, USA, 2015. ACM.
[43] Colin Percival. Cache missing for fun and proﬁt, 2005.
[44] Cesar Pereida García, Billy Bob Brumley, and Yuval Yarom. "make sure
dsa signing exponentiations really are constant-time". In Proceedings of
the 2016 ACM SIGSAC Conference on Computer and Communications
Security, CCS ’16, pages 1639–1650, New York, NY, USA, 2016. ACM.
[45] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and
Stefan Mangard. Drama: Exploiting dram addressing for cross-cpu
attacks. In USENIX Security Symposium, pages 565–581, 2016.
[46] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Man-
gard. Fantastic timers and where to ﬁnd them: high-resolution mi-
croarchitectural attacks in javascript. In International Conference on
Financial Cryptography and Data Security, pages 247–267. Springer,
2017.
[47] Mark Seaborn and Thomas Dullien. Exploiting the dram rowhammer
bug to gain kernel privileges. Black Hat, 15, 2015.
[48] Julian Stecklina and Thomas Prescher. Lazyfp: Leaking fpu reg-
arXiv preprint
ister state using microarchitectural side-channels.
arXiv:1806.07480, 2018.
[32] Evgeni Krimer, Guillermo Savransky, Idan Mondjak, and Jacob
Doweck. Counter-based memory disambiguation techniques for se-
lectively predicting load/store conﬂicts, October 1 2013. US Patent
8,549,263.
[49] Dean Sullivan, Orlando Arias, Travis Meade, and Yier Jin. Microar-
chitectural mineﬁelds: 4k-aliasing covert channel and multi-tenant de-
tection in iaas clouds. In Network and Distributed Systems Security
(NDSS) Symposium. The Internet Society, 2018.
USENIX Association
28th USENIX Security Symposium    635
[50] Andrei Tatar, Radhesh Krishnan, Elias Athanasopoulos, Cristiano Giuf-
frida, Herbert Bos, and Kaveh Razavi. Throwhammer: Rowhammer
attacks over the network and defenses. In 2018 USENIX Annual Tech-
nical Conference (USENIX ATC 18), Boston, MA, 2018. USENIX
Association.
[51] Dan Terpstra, Heike Jagode, Haihang You, and Jack Dongarra. Col-
lecting performance data with papi-c. In Tools for High Performance
Computing 2009, pages 157–173. Springer, 2010.
[52] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel Genkin, Baris
Kasikci, Frank Piessens, Mark Silberstein, Thomas F Wenisch, Yu-
val Yarom, and Raoul Strackx. Foreshadow: Extracting the keys to the
intel sgx kingdom with transient out-of-order execution. In Proceed-
ings of the 27th USENIX Security Symposium. USENIX Association,
2018.
[53] Jo Van Bulck, Frank Piessens, and Raoul Strackx. Sgx-step: A practical
attack framework for precise enclave execution control. In Proceed-
ings of the 2Nd Workshop on System Software for Trusted Execution,
SysTEX’17, pages 4:1–4:6, New York, NY, USA, 2017. ACM.
[54] Jo Van Bulck, Frank Piessens, and Raoul Strackx. Nemesis: Studying
microarchitectural timing leaks in rudimentary cpu interrupt logic. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security, pages 178–195. ACM, 2018.
[55] Victor Van Der Veen, Yanick Fratantonio, Martina Lindorfer, Daniel
Gruss, Clémentine Maurice, Giovanni Vigna, Herbert Bos, Kaveh
Razavi, and Cristiano Giuffrida. Drammer: Deterministic rowham-
mer attacks on mobile platforms. In Proceedings of the 2016 ACM
SIGSAC conference on computer and communications security, pages
1675–1689. ACM, 2016.
[56] Pepe Vila, Boris Köpf, and José Francisco Morales. Theory and practice
of ﬁnding eviction sets. arXiv preprint arXiv:1810.01497, 2018.
[57] WikiChip.
Ivy Bridge - Microarchitectures - Intel.
https:
//en.wikichip.org/wiki/intel/microarchitectures/ivy_
bridge_(client). Accessed: 2019-02-05.
[58] WikiChip. Kaby Lake - Microarchitectures - Intel. https://en.
wikichip.org/wiki/intel/microarchitectures/kaby_lake.
Accessed: 2019-02-05.
[59] WikiChip.
Skylake (client)
Intel.
https://en.wikichip.org/wiki/intel/microarchitectures/
skylake_(client). Accessed: 2019-02-05.
- Microarchitectures
-
[60] Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang, and Radu Teodorescu.
One bit ﬂips, one cloud ﬂops: Cross-vm row hammer attacks and privi-
lege escalation. In USENIX Security Symposium, pages 19–35, 2016.
[61] Yuval Yarom, Daniel Genkin, and Nadia Heninger. CacheBleed: a tim-
ing attack on OpenSSL constant-time RSA. Journal of Cryptographic
Engineering, 7(2):99–112, 2017.
[62] Bennet Yee, David Sehr, Gregory Dardyk, J Bradley Chen, Robert Muth,
Tavis Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar.
Native client: A sandbox for portable, untrusted x86 native code. In
Security and Privacy, 2009 30th IEEE Symposium on, pages 79–93.
IEEE, 2009.
[63] Tianwei Zhang, Yinqian Zhang, and Ruby B. Lee. Cloudradar: A real-
time side-channel attack detection system in clouds. In Research in
Attacks, Intrusions, and Defenses, pages 118–140. Springer, 2016.
10 Appendix
10.1 Tested Hardware Performance Counters
Counters
Correlation
UNHALTED_CORE_CYCLES
UNHALTED_REFERENCE_CYCLES
INSTRUCTION_RETIRED
INSTRUCTIONS_RETIRED
BRANCH_INSTRUCTIONS_RETIRED
MISPREDICTED_BRANCH_RETIRED
CYCLE_ACTIVITY:CYCLES_L2_PENDING
CYCLE_ACTIVITY:STALLS_LDM_PENDING
CYCLE_ACTIVITY:CYCLES_NO_EXECUTE
RESOURCE_STALLS:ROB
RESOURCE_STALLS:SB
RESOURCE_STALLS:RS
LD_BLOCKS_PARTIAL:ADDRESS_ALIAS
IDQ_UOPS_NOT_DELIVERED
IDQ:ALL_DSB_CYCLES_ANY_UOPS
ILD_STALL:IQ_FULL
ITLB_MISSES:MISS_CAUSES_A_WALK
TLB_FLUSH:STLB_THREAD
ICACHE:MISSES
ICACHE:IFETCH_STALL
L1D:REPLACEMENT
L2_DEMAND_RQSTS:WB_HIT
LONGEST_LAT_CACHE:MISS
CYCLE_ACTIVITY:CYCLES_L1D_PENDING
LOCK_CYCLES:CACHE_LOCK_DURATION
LOAD_HIT_PRE:SW_PF
LOAD_HIT_PRE:HW_PF
MACHINE_CLEARS:CYCLES
OFFCORE_REQUESTS_BUFFER:SQ_FULL
OFFCORE_REQUESTS:DEMAND_DATA_RD
0.3077
0.1527
0.2718
0.2827
0.3143
0.0872
-0.0234
0.9819
0.2317
0
-0.0506
-0.0044
-0.9511
-0.1455
0.0332
0.1021
0
0
0
0
0.3801
0.2436
0.0633
-0.0080
0
0
0
0
0
0.1765
Table 5: Counters proﬁled for correlation test
10.2 Row conﬂict Side Channel
The row conﬂict side channel retrieves the timing information
of the CPU while doing direct accesses (using clflush) from
the DRAM. A higher timing indicates that the two addresses
are mapped to the same bank in the DRAM because reading
an address from the same bank forces the row buffer to copy
the previous contents back to the original row and then load
the newly accessed data into the row buffer. Whereas, a low
timings indicates that two addresses are not in the same bank
(not sharing the same row buffer) and are loaded into separate
row buffers. Figure 15 shows a wide gap (around 100 cycles)
between row hits and row conﬂicts.
636    28th USENIX Security Symposium
USENIX Association
gets like high-end servers where restarting is impractical.
The observed behavior can be explained by the binary
buddy allocator which is responsible for the physical address
allocation in the Linux OS [15]. This type of allocator is
known to fragment memory signiﬁcantly under certain cir-
cumstances [37]. The Linux OS uses a SLAB/SLOB allocator
in order to circumvent the fragmentation problems. How-
ever, the allocator only serves the kernel directly. User space
memory therefore still suffers from the fragmentation that the
buddy allocator introduces. This also means that getting the
contiguous memory required for a double-sided Rowhammer
attack becomes more difﬁcult if the system under attack has
been active for a while.
Figure 16: Finding contiguous memory of 520 kB with in-
creasing memory utilization. The overlap between the red
and blue plot indicates the high accuracy of the contiguous
memory detection capability of SPOILER as veriﬁed by the
pagemap ﬁle.
Figure 17: Finding contiguous memory of 520 kB with de-
creasing memory utilization.
Figure 15: Timings for accessing the aliased virtual addresses
(random addresses where 20 LSB of the physical address
match). Row hits (orange/low timings) are clearly distinguish-
able from row conﬂicts (blue/high timings).
10.3 Memory Utilization and Contiguity
The probability of obtaining contiguous memory depends on
memory utilization of the system. We conduct an experiment
to examine the effect of memory utilization on availability
of contiguous memory. In this experiment, 1 GB memory
is allocated. During the experiment, the memory utilization
of the system is increased gradually from 20% to 90%. We
measure the probability of getting the contiguous memory
with two methods. The ﬁrst one is checking the physical frame
numbers from pagemap ﬁle to look for 520 kB of contiguous
memory. The second method is using SPOILER to ﬁnd the 520
kB of contiguous memory. This 520 kB is required to get three
consecutive rows within a bank for a DRAM conﬁguration
having 256 kB row offset and 8 kB row size.
Figure 16 and Figure 17 show that when the memory has
been fragmented after intense memory usage, it gets more
difﬁcult to allocate a contiguous chunk of memory. Even de-
creasing the memory usage does not help to get a contiguous
block of memory. Figure 17 depicts that after the memory
utilization has been decreased from 70% to 60% and so on,
there is not enough contiguous memory to mount a success-
ful double-sided Rowhammer attack. Until the machine is
restarted, the memory remains fragmented which makes a
double-sided Rowhammer attack difﬁcult, especially on tar-
USENIX Association
28th USENIX Security Symposium    637
2030405060708090System Memory Consumption (%)020406080100Contiguous Memory (%)520KB Contiguous Memory from pagemap File520KB Contiguous Memory from Leakage Peaks2030405060708090System Memory Consumption (%)0510152025Contiguous Memory (%)520KB Contiguous Memory from pagemap File520KB Contiguous Memory from Leakage Peaks