# Table 2: Empirical Test of Dynamic Intrusion Prevention Tools
| Attack Target | Missed (80%) | Halted (70%) | Prevented (20%) |
|---------------|--------------|--------------|-----------------|
| Attacks       | 16 (80%)     | 14 (70%)     | 4 (20%)         |
| Abnormal      | 1 (5%)       | 1 (5%)       | 3 (15%)         |

**Note:** The table above shows the results of an empirical test conducted on 20 different attack forms. "Prevented" indicates that the process execution was unharmed, while "Halted" means the attack was detected and the process terminated.

## Buffer Overflow Attack Forms

### Stack-Based Attacks
1. **Buffer overflow of a pointer on the stack:**
   - Return address
   - Base pointer
   - Function pointer as variable
   - Function pointer as function parameter
   - Longjmp buffer as variable
   - Longjmp buffer as function parameter

### Heap/BSS/Data-Based Attacks
1. **Buffer overflow of a pointer on the heap/BSS/data:**
   - Return address
   - Base pointer
   - Function pointer as variable
   - Function pointer as function parameter
   - Longjmp buffer as variable
   - Longjmp buffer as function parameter

**Note:** This study does not consider the likelihood or current popularity of specific attack forms. However, it is observed that most dynamic intrusion prevention tools focus on protecting the return address. Bulba and Kil3r did not provide real-life examples of their attack forms defeating StackGuard and Stack Shield. Additionally, the Immunix operating system (Linux hardened with StackGuard and other protections) placed second in the Defcon "Capture the Flag" competition, where nearly 100 crackers and security experts attempted to compromise the systems. This suggests that these tools are effective against many currently used attack forms, but their effectiveness may change as such protections become more widespread.

It is important to note that preventing or halting one form of buffer overflow does not necessarily prevent the same buffer from being exploited in another form. All attack forms were implemented on the Linux platform, and the source code is available at [http://www.ida.liu.se/˜johwi](http://www.ida.liu.se/˜johwi).

## Setup and Results
To conduct the test, the source code was compiled with StackGuard, Stack Shield, or ProPolice, or linked with Libsafe/Libverify. The overall results are shown in Table 2. A theoretical comparison was also made to investigate the potential of the ideas and concepts used in the tools, with the results presented in Table 3. For detailed test results, see Appendices A and B.

### Most Effective Tool
The most effective tool, ProPolice, could only prevent 50% of the attack forms. None of the tools prevented or halted buffer overflows on the heap/BSS/data targeting function pointers or longjmp buffers. This means that even a combination of all techniques would still miss 30% of the attack forms, which contrasts with the theoretical comparison. Stack Shield, as claimed by Vendicator, did not protect function pointers. Another discrepancy is the abnormal behavior of StackGuard and Stack Shield when faced with a fake stack frame in the BSS segment.

These results highlight the weaknesses in dynamic intrusion prevention discussed in Section 3.2, where the tools primarily aim to protect known attack targets. The return address has been a popular target, leading to the tools' effectiveness in this area. Notably, StackGuard halts attacks against the old base pointer, though this was not an explicit design goal.

Only ProPolice and Stack Shield offer true intrusion prevention, while the other tools function more as intrusion detection systems. However, the general behavior of all these tools is to terminate process execution during an attack.

## Table 3: Theoretical Comparison of Dynamic Intrusion Prevention Tools
| Development Tool                  | Attacks Prevented (0%) | Attacks Halted (30-50%) | Attacks Missed (50-80%) |
|-----------------------------------|------------------------|-------------------------|-------------------------|
| StackGuard Terminator Canary      | 0 (0%)                 | 4 (20%)                 | 16 (80%)                |
| StackGuard Random XOR Canary      | 0 (0%)                 | 6 (30%)                 | 14 (70%)                |
| Stack Shield Global Ret Stack      | 6 (30%)                | 7 (35%)                 | 7 (35%)                 |
| Stack Shield Range Ret Check       | 0 (0%)                 | 10 (50%)                | 10 (50%)                |
| Stack Shield Global & Range        | 6 (30%)                | 7 (35%)                 | 7 (35%)                 |
| ProPolice                         | 8 (40%)                | 3 (15%)                 | 9 (45%)                 |
| Libsafe and Libverify              | 0 (0%)                 | 6 (30%)                 | 14 (70%)                |

**Note:** "Prevented" means the process execution is unharmed, and "Halted" means the attack is detected but the process is terminated.

## Common Shortcomings

### 5.1 Denial of Service Attacks
Three out of four tools terminate execution upon detecting an attack, offering more intrusion detection than prevention. This can lead to Denial of Service (DoS) attacks, as terminating a web service process is a common security attack goal. While process termination is less severe, it remains a security issue.

### 5.2 Storage Protection
Canaries or separate return address stacks must be protected from attacks. If the canary template or the stored copy of the return address can be tampered with, the protection is compromised. Only StackGuard with the terminator canary offers this protection. Other tools lack this feature, and implementing such protection can significantly impact performance, up to 200 times [6].

### 5.3 Recompilation of Code
Compiler patches like StackGuard, Stack Shield, and ProPolice require recompilation of all code for protection. This is feasible for new products but challenging for running operating systems and legacy systems. Libsafe/Libverify provides a more convenient solution. The StackGuard and ProPolice teams have addressed this by offering protected versions of Linux and FreeBSD.

### 5.4 Limited Nesting Depth
When using a separate stack for return addresses, the nesting depth of the process is limited. Vendicator, the author of Stack Shield, discusses this issue but does not provide a solution.

## Related Work
Three other studies on defenses against buffer overflow attacks have been conducted:

1. **Crispin Cowan et al. (2000):** "Buffer Overflows: Attacks and Defenses for the Vulnerability of the Decade" [11]. They discuss several attack forms but leave out the old base pointer. Their analysis is broader, considering operating system patches, programming language choice, and code auditing, but lacks comparative testing. Only StackGuard and PointGuard are discussed.

2. **Istvan Simon (2001):** "A Comparative Analysis of Methods of Defense against Buffer Overflow Attacks" [32]. He discusses pros and cons of operating system patches, StackGuard, Libsafe, and similar solutions. The major drawback is the lack of categorization of buffer overflow attack forms and structured comparison of tool effectiveness. No testing was done.

3. **Pierre-Alain Fayolle and Vincent Glaume (2002):** "A Buffer Overflow Study, Attacks & Defenses" [17]. They compare Libsafe with a non-executable stack and an intrusion detection system. Tests were performed for two of the twenty attack forms, but no proper categorization was made.

## Conclusions
Several runtime techniques exist to stop buffer overflow attacks, but none can handle the diverse forms of attacks known today. At best, 40% of the attack forms were prevented, and another 10% were detected and halted, leaving 50% of the attacks unaddressed. Combining all techniques theoretically would still miss nearly a third of the attack forms. This is due to the general weakness of dynamic intrusion prevention, which focuses on known attack targets. Nevertheless, these tools and the ideas they are built on are effective against many security attacks that harm software users today.

## Acknowledgments
We are grateful to the readers who previewed and improved our paper, especially Crispin Cowan.

## References
[1] A. Baratloo, N. Singh, and T. Tsai. Libsafe: Protecting critical elements of stacks. White Paper, December 1999.
[2] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time defense against stack smashing attacks. In Proceedings of the 2000 USENIX Technical Conference, San Diego, California, USA, June 2000.
[...]
[36] J. Wilander. Security intrusions and intrusion prevention. Master’s thesis, Linköpings universitet, April 2002.

## Appendix A: Details of Empirical Test
### Attack Target
| Development Tool                  | Return Address | Old Base Pointer |
|-----------------------------------|----------------|------------------|
| StackGuard Terminator Canary      | Halted         | Halted           |
| StackGuard Random XOR Canary      | Halted         | Halted           |
| Stack Shield Global Ret Stack      | Halted         | Halted           |
| Stack Shield Range Ret Check       | Halted         | Halted           |
| Stack Shield Global & Range        | Halted         | Halted           |
| ProPolice                         | Halted         | Halted           |
| Libsafe and Libverify              | Halted         | Halted           |

For more details, see Appendix B.