0 (0%)
2 (10%)
4 (20%)
Attacks
missed
16 (80%)
14 (70%)
17 (85%)
14 (70%)
9 (45%)
15 (75%)
Abnormal
behavior
1 (5%)
1 (5%)
3 (15%)
0 (0%)
1 (5%)
1 (5%)
Table 2. Empirical test of dynamic intrusion prevention tools. 20 attack forms tested. “Prevented” means
that the process execution is unharmed. “Halted” means that the attack is detected but the process is
terminated.
3. Buffer overﬂow of a pointer on the stack and then
pointing at target:
(a) Return address
(b) Base pointer
(c) Function pointer as variable
(d) Function pointer as function parameter
(e) Longjmp buffer as variable
(f) Longjmp buffer as function parameter
4. Buffer overﬂow of a pointer on the heap/BSS/data
and then pointing at target:
(a) Return address
(b) Base pointer
(c) Function pointer as variable
(d) Function pointer as function parameter
(e) Longjmp buffer as variable
(f) Longjmp buffer as function parameter
Note that we do not consider differences in the likeli-
hood of certain attack forms being possible, nor current
statistics on which attack forms are most popular. How-
ever, we have observed that most of the dynamic intru-
sion prevention tools focus on the protection of the re-
turn address. Bulba and Kil3r did not present any real-
life examples of their attack forms that defeated Stack-
Guard and Stack Shield. Also the Immunix operating sys-
tem (Linux hardened with StackGuard and more) came in
second place at the Defcon “Capture the Flag” competi-
tion where nearly 100 crackers and security experts tried
to compromise the competing systems [12]. This implies
that the tools presented here are effective against many
of the currently used attack forms. The question is: will
this will change as soon as this kind of protection is wide
spread?
Also worth noting is that just because a attack form
is prevented or halted does not mean that the very same
buffer overﬂow can not be abused in another attack form.
All of these attack forms have been implemented on the
Linux platform and the source code is available from our
homepage: http://www.ida.liu.se/˜johwi.
To set up the test, the source code was compiled with
StackGuard, Stack Shield, or ProPolice, or linked with
Libsafe/Libverify. The overall results are shown in table
2. We also made a theoretical comparison to investigate
the potential of the ideas and concepts used in the tools.
The overall results of the theoretical analysis are shown in
table 3. For details of the tests see appendix A and B.
Most interesting in the overall test results is that the
most effective tool, namely ProPolice, is able to pre-
vent only 50% of the attack forms. Buffer overﬂows on
the heap/BSS/data targeting function pointers or longjmp
buffers are not prevented or halted by any of the tools,
which means that a combination of all techniques built
into one tool would still miss 30% of the attack forms.
This however does not comply with the result from the
theoretical comparison. Stack Shield was not able to pro-
tect function pointers as stated by Vendicator. Another dif-
ference is the abnormal behavior of StackGuard and Stack
Shield when confronted with a fake stack frame in the BSS
segment.
These poor results are all evidence of the weakness in
dynamic intrusion prevention discussed in section 3.2, the
tested tools all aim to protect known attack targets. The
return address has been a popular target and therefore all
tools are fairly effective in protecting it.
Worth noting is that StackGuard halts attacks against
the old base pointer although that was not mentioned as
an explicit design goal.
Only ProPolice and Stack Shield offer real intrusion
prevention—the other tools are more or less intrusion de-
tection systems. But still the general behavior of all these
tools is termination of process execution during attack.
Development Tool
StackGuard Terminator Canary
StackGuard Random XOR Canary
Stack Shield Global Ret Stack
Stack Shield Range Ret Check
Stack Shield Global & Range
ProPolice
Libsafe and Libverify
Attacks
prevented
0 (0%)
0 (0%)
6 (30%)
0 (0%)
6 (30%)
8 (40%)
0 (0%)
Attacks
halted
4 (20%)
6 (30%)
7 (35%)
10 (50%)
7 (35%)
3 (15%)
6 (30%)
Attacks
missed
16 (80%)
14 (70%)
7 (35%)
10 (50%)
7 (35%)
9 (45%)
14 (70%)
Table 3. Theoretical comparison of dynamic intrusion prevention tools. 20 attack forms used. “Prevented”
means that the process execution is unharmed. “Halted” means that the attack is detected but the process
is terminated.
5 Common Shortcomings
5.4 Limited Nesting Depth
There are several shortcomings worth discussing. We
have identiﬁed four generic problems worth highlighting,
especially when considering future research in this area.
5.1 Denial of Service Attacks
Since three out of four tools terminate execution upon
detecting an attack they actually offer more of intrusion
detection than intrusion prevention. More important is
that the vulnerabilities still allow for Denial of Service at-
tacks. Terminating a web service process is a common
goal in security attacks. Process termination results in a
much less serious attack but will still be a security issue.
5.2 Storage Protection
Canaries or separate return address stacks have to be
protected from attacks. If the canary template or the stored
copy of the return address can be tampered with, the pro-
tection is fooled. Only StackGuard with the terminator ca-
nary offers protection in this sense. The other tools have
no protection implemented and the performance penalty
of such protection can be very serious—up to 200 times
[6].
5.3 Recompilation of Code
The three compiler patches have the common short-
coming of demanding recompilation of all code to pro-
vide protection. For software vendors shipping new prod-
ucts this is a natural thing but for running operating sys-
tems and legacy systems this is a serious drawback. Lib-
safe/Libverify offers a much more convenient solution in
this sense. The StackGuard and ProPolice teams have ad-
dressed this issue by offering protected versions of Linux
and FreeBSD.
When keeping a separate stack with copies of return ad-
dresses, the nesting depth of the process is limited. Only
Vendicator, author of Stack Shield, discusses this issue but
offers no real solution to the problem.
6 Related Work
Three other studies of defenses against buffer overﬂow
attacks have been made.
In late 2000 Crispin Cowan et al published their paper
“Buffer Overﬂows: Attacks and Defenses for the Vulnera-
bility of the Decade” [11]. They implicitly discuss several
of our attack forms but leave out the old base pointer as an
attack target. Comparison of defenses is broader consider-
ing also operating system patches, choice of programming
language and code auditing but there is only a theoretical
analysis, no comparative testing is done. Also the only dy-
namic tools discussed are their own StackGuard and their
forthcoming PointGuard.
Only a month later Istvan Simon published his paper
“A Comparative Analysis of Methods of Defense against
Buffer Overﬂow Attacks” [32]. It discusses pros and cons
with operating system patches, StackGuard, Libsafe, and
similar solutions. The major drawback in his analysis is
the lack of categorization of buffer overﬂow attack forms
(only three of our attack forms are explicitly mentioned)
and any structured comparison of the tool’s effectiveness.
No testing is done.
In March 2002 Pierre-Alain Fayolle and Vincent
Glaume published their lengthy report “A Buffer Over-
ﬂow Study, Attacks & Defenses” [17]. They describe and
compare Libsafe with a non-executable stack and an intru-
sion detection system. Tests are performed for two of our
twenty attack forms. No proper categorization of buffer
overﬂow attack forms is made or used for testing.
7 Conclusions
There are several run-time techniques for stopping the
most common of security intrusion attack—the buffer
overﬂow. But we have shown that none of these can han-
dle the diverse forms of attacks known today.
In prac-
tice at best 40% of the attack forms were prevented and
another 10% detected and halted, leaving 50% of the at-
tacks still at large. Combining all the techniques in theory
would still leave us with nearly a third of the attack forms
missed. In our opinion this is due to the general weakness
of the dynamic intrusion prevention solution—the tools
all aim at protecting known attack targets, not all targets.
Nevertheless these tools and the ideas they are built on are
effective against many security attacks that harm software
users today.
8 Acknowledgments
We are grateful to the readers who have previewed and
improved our paper, especially Crispin Cowan.
References
[1] A. Baratloo, N. Singh, and T. Tsai.
tecting critical elements of stacks.
http://www.research.avayalabs.com/
project/libsafe/, December 1999.
Libsafe: Pro-
White Paper
[2] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time
defense against stack smashing attacks. In Proceedings of
the 2000 USENIX Technical Conference, San Diego, Cali-
fornia, USA, June 2000.
[3] L. M. Bowman. Companies on the hook for security.
http://news.com.com/2100-1023-821266.
html, January 2002.
[4] Bulba and Kil3r.
Bypassig StackGuard and Stack-
Shield. Phrack Magazine 56 http://www.phrack.
org/phrack/56/p56-0x05, May 2000.
[5] C. C. Center. Cert/cc statistics 1988-2001. http://
www.cert.org/stats/, February 2002.
[6] T. cker Chiueh and F.-H. Hsu. RAD: A compile-time so-
In Proceedings of the
lution to buffer overﬂow attacks.
21th International Conference on Distributed Computing
Systems (ICDCS), Phoenix, Arizona, USA, April 2001.
[7] M. Conover and w00w00 Security Team.
w00w00
http://www.w00w00.org/
on heap overﬂows.
files/articles/heaptut.txt, January 1999.
[8] C. Cowan. Personal communication, February 2002.
[9] C. Cowan, S. Beattie, R. Day, C. Pu, P. Wagle, and
E. Walthinsen. Protecting systems from stack smashing
attacks with StackGuard. Linux Expo http://www.
cse.ogi.edu/˜crispin/, May 1999.
[10] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beat-
tie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. Stack-
Guard: Automatic adaptive detection and prevention of
buffer-overﬂow attacks. In Proceedings of the 7th USENIX
Security Conference, pages 63–78, San Antonio, Texas,
January 1998.
[11] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole.
Buffer overﬂows: Attacks and defenses for the vulnerabil-
ity of the decade. In Proceedings of the DARPA Informa-
tion Survivability Conference and Expo (DISCEX), pages
119–129, Hilton Head, South Carolina, January 2000.
[12] W. Crispin Cowan. Nearly 100 hackers fail to crack wirex
immunix server, August 2002.
[13] S. Designer. Linux kernel patch from the openwall project.
http://www.openwall.com/linux/README.
[14] DilDog. The tao of Windows buffer overﬂow. http://
www.cultdeadcow.com/cDc_files/cDc-351/,
April 1998.
[15] H. Etoh. GCC extension for protecting applications
from stack-smashing attacks. http://www.trl.ibm.
com/projects/security/ssp/, June 2000.
[16] D. Evans and D. Larochelle.
extensible lightweight static analysis.
19(1):42–51, February 2002.
Improving security using
IEEE Software,
[17] P.-A. Fayolle and V. Glaume. A buffer overﬂow study,
http://www.enseirb.fr/
attacks & defenses.
˜glaume/indexen.html, March 2002.
[18] A. K. Ghosh, C. Howell, and J. A. Whittaker. Building
IEEE Software,
software securely from the ground up.
19(1):14–16, February 2002.
[19] F. Giasson.
in program execu-
http://www.decatomb.com/articles/
Memory layout
tion.
memorylayout.txt, October 2001.
[20] L. R. Halme and R. K. Bauer.
AINT misbe-
A taxonomy of anti-intrusion techniques.
having:
http://www.sans.org/newlook/resources/
IDFAQ/aint.htm, April 2000.
[21] T. Jim, G. Morrisett, D. Grossman, M. Hicks, J. Cheney,
and Y. Wang. Cyclone: A safe dialect of C. In Proceedings
of the USENIX Annual Technical Conference, Monterey,
CA, June 2002.
[22] R. Jones and P. Kelly. Backwards-compatible bounds
checking for arrays and pointers in C programs.
In
Proceedings of the Third International Workshop on Au-
tomatic Debugging AADEBUG’97, Linkoping, Sweden,
May 1997.
[23] D. Larochelle and D. Evans. Statically detecting likely
buffer overﬂow vulnerabilities. In Proceedings of the 2001
USENIX Security Symposium, Washington DC, USA, Au-
gust 2001.
[24] G. McGraw and J. Viega. An analysis of how buffer
IBM developerWorks: Security:
overﬂow attacks work.
Security
http://www-106.ibm.com/
developerworks/security/library/smash.
html?dwzon%e=security, March 2000.
articles
[25] M. S. Mike Frantzen. StackGhost: Hardware facilitated
stack protection. In Proceedings of the 10th USENIX Se-
curity Symposium, August 2001.
[26] G. Necula, S. McPeak, and W. Weimer. CCured: Type-
safe retroﬁtting of legacy code. In Proceedings of the 29th
Annual ACM Symposium on Principles of Programming
Languages, Portland, OR, January 2002.
[27] G. Necula, S. McPeak, and W. Weimer. Taming C point-
ers. In Proceedings of ACM Conference on Programming
Language Design and Implementation, June 2002.
[28] B. News.
Software security law call.
http:
//news.bbc.co.uk/hi/english/sci/tech/
newsid_1762000/1762261.stm, January 2002.
[29] A. One. Smashing the stack for fun and proﬁt. http:
//immunix.org/StackGuard/profit.html,
November 1996.
[30] C. Science and N. R. C. Telecommunications Board.
Cybersecurity today and tomorrow: Pay now or pay
later
report, National
Academies, USA, http://www.nap.edu/books/
0309083125/html/, January 2002.
(prepublication).
Technical
[31] R. W. Shirey. Request for comments: 2828, Internet
security glossary. http://www.faqs.org/rfcs/
rfc2828.html, May 2000.
[32] I. Simon.
A comparative
of
defense
ods
http://www.mcs.csuhayward.edu/˜simon/
security/boflo.html, January 2001.
against
analysis
of meth-
overﬂow attacks.
buffer
[33] Vendicator. Stack Shield technical info ﬁle v0.7. http:
//www.angelfire.com/sk/stackshield/, Jan-
uary 2001.
[34] D. Wagner and D. Dean. Intrusion detection via static anal-
ysis. In Proceedings of the IEEE Symposium on Security
and Privacy, pages 156–169, May 2001.
[35] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A ﬁrst
step towards automated detection of buffer overrun vulner-
abilities. In Proceedings of Network and Distributed Sys-
tem Security Symposium, pages 3–17, Catamaran Resort
Hotel, San Diego, California, February 2000.
[36] J. Wilander. Security intrusions and intrusion prevention.
Master’s thesis, Linkopings universitet, http://www.
ida.liu.se/˜johwi, April 2002.
A Details of Empirical Test
Attack Target
Development Tool
StackGuard Terminator Canary
Stack Shield Global Ret Stack
Stack Shield Range Ret Check
Stack Shield Global & Range
ProPolice
Libsafe and Libverify
Return
address
Halted
Old Base
Pointer