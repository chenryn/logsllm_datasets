this technique is important
because it allows attackers to create valid ciphertexts that
are trusted by the target. When a system assumes that a
meaningful meassage obtained from the decryption of some
ciphertext implies a trusted origin of it, the CBC-R technique
allows attackers to create arbitrary ciphertexts to abuse the
system.
1) CBC-R: The CBC mode is deﬁned as follows:
CBC Encryption:
C1 = CIP HK(P1 ⊕ IV );
Ci = CIP HK(Pi ⊕ Ci−1)
CBC Decryption:
P1 = CIP H−1
Pi = CIP H−1
K (C1) ⊕ IV ;
K (Ci) ⊕ Ci−1
for i=2,...,n.
for i=2,...,n.
CBC-R turns a CBC decryption oracle into a CBC encryp-
tion oracle. The process is simple. First, the attacker chooses
a random ciphertext block Ci. He then sends Ci
to the
decryption oracle O to get its intermediate plaintext. Since
Pi = O(Ci) ⊕ Ci−1
and the attacker can change Ci−1, he can make Pi equal to
any arbitrary value. Suppose he wants to make Pi equal to
some Px. Then, all he needs to do is to set
Ci−1 = Px ⊕ O(Ci).
But does this make Ci−1 decrypt to a garbled block Pi−1?
Yes, but the attacker can ﬁx Pi−1 by sending Ci−1 to the
decryption oracle to get its intermediate plaintext, and set
Ci−2 = Pi−1 ⊕ O(Ci−1).
Now, the attacker has two consecutive plaintext blocks Pi−1
and Pi of his choice, and a leading garbled block Pi−2 that
484484
Algorithm 1 CBC-R.
1) Choose a plaintext message P , pad the message,
and divide it into n blocks of b bytes denoted by
P1, P2, . . . , Pn.
2) Pick a few random bytes r1, r2, . . . , rb, and set Cn =
r1|r2| . . .|rb.
3) For i = n down to 1:
Ci−1 = Pi ⊕ O(Ci)
4) Set IV = C0.
5) Output IV and C =C1| . . .|Cn.
he can correct by inserting a new ciphertext block Ci−3.
By repeating this operation, he can efﬁciently encrypt a
complete message block by block, starting from the last one.
Since the ﬁrst block of the CBC ciphertext stream depends
on the IV, if the attacker can set the IV, then the decrypted
data will be exactly what he wants without any garbled
blocks. If the attacker doesn’t control the IV, then the ﬁrst
block is garbled. For an overview of this process, refer to
Algorithm 1.
2) CBC-R Without Controlling IV: We have shown that
CBC-R allows the attacker to encrypt any message. But,
if he cannot set the IV, then the ﬁrst plaintext block will be
random and meaningless. If the victim expects the decrypted
message to start with a standard header, and the attacker
doesn’t control the IV, then the victim will ignore the forged
message constructed by CBC-R. This is what happens with
the resource identiﬁers in ASP.NET, where the ﬁrst two
characters of the decrypted identiﬁers must be in the limited
set of deﬁned options. We have found two workarounds.
Using Captured Ciphertexts as Preﬁx: If the attacker cap-
tures a ciphertext whose plaintext is a valid message, then he
can prepend the ciphertext to his CBC-R encrypted message
Algorithm 2 Brute-forcing C1.
the
2) Use
and
so
1) Choose a plaintext message P , pad the message,
and divide it into n blocks of b bytes, denote them
P1, P2, . . . , Pn where P1 = Pheader|P ∗1 .
oracle
CBC-R
Cn, . . . , C2, C1
to Pgarbage|P2|P3| . . .|Pn.
r1|r2| . . .|rb.
if
C1|C2| . . .|Cn
Pheader|Pgarbage|P3|P4| . . .|Pn.
to step 3.
3) Pick a few random bytes r1, r2, . . . , rb, and set C1 =
to
If not, go back
that C1|C2| . . .|Cn
build
decrypts
decrypts
4) Test
to
5) Output C = C1|C2| . . .|Cn.
to get a valid header after decrypting:
Pvalid = CIP H−1
K (Cknown|IVCBC−R|CCBC−R).
While the resulting forged plaintext message will have a
valid header, it still has a garbled block at the position of
IVCBC−R. This broken block causes the victim to reject the
message, unless the attacker carefully chooses a preﬁx such
that the garbled block becomes part of some component that
doesn’t affect the semantics of the message.
Brute-Forcing C1: The attacker can also brute-force the ﬁrst
block C1. In CBC-R, the ﬁnal block Cn is a random block.
Each different Cn yields a different Cn−1, ..., C1 chain. In
other words, CBC-R can produce many different ciphertexts
that decrypt to the same plaintext block chain Pn, ..., P2. The
only difference is the ﬁrst plaintext block, which is computed
as follows:
P1 = CIP H−1
K (C1) ⊕ IV.
The attacker wants P1 to contain a valid header. In some
systems, this means that the ﬁrst few bytes of P1 must match
some magic numbers. There are also systems that accept a
message if the ﬁrst byte of P1 matches its size. If this is the
case, the attacker can try his luck by brute-forcing C1. One
way to do this is to change Cn, hence changing C1, until
a valid P1 is found. A faster technique is to use CBC-R
to build a chain Cn−1, ..., C2, then generate a random C1
until a valid P1 is found. For example, if the ﬁrst byte of P1
must match the message size, trying an average 256 different
C1 is enough to obtain a valid message. Or, if the ﬁrst two
bytes of P1 must match some magic numbers, then we need
on average 216 different C1 to get a valid message. For an
overview of this process, refer to Algorithm 2.
C. Using CBC-R to Attack ASP.NET
As noted in the description of the ScriptResource.axd
handler in Section II, if an attacker supplies a valid en-
crypted d parameter to the handler, he can abuse the ﬁle
retrieval functionality to download any ﬁle located inside the
485485
root directory of ASP.NET applications. Downloading the
web.config ﬁle is the best ﬁrst step for an attacker. This
ﬁle is present in most applications and contains important
secrets, including the keys necessary to forge authentication
tickets and database passwords.
In order to download ﬁles, the attacker has to craft a d
parameter that decrypts to a string with the following format
R#anything|||~/path/to/file
The ﬁrst two bytes can be one of these four values r#,
R#, q#, and Q#. This is a perfect application for CBC-
R. The attacker can use the method of Section III-B2
and Algorithm 2 to construct d with a three block mes-
sage so that
two blocks will be decrypted to
garbage|||~/path/to/file. He then brute-forces
the ﬁrst block until he gets one of the magic byte values.
the last
IV. FIRST ATTACK: CBC-R WITH PADDING ORACLES
As discussed in Section III-A1, there are many application
independent padding oracles in ASP.NET. Each of them can
be used together with CBC-R to construct the d parameter
as described in Section III-C. In this ﬁrst attack, we will use
the padding oracle in WebResource.axd.
A. Attack Implementation
has
the
to
padding
to ﬁgure
attacker
detect
out
information
can
a
reliable
First,
from the
way
WebResource.axd responses. He
easily
do
this because WebResource.axd will return a 500 HTTP
response if the padding is invalid and a 404 HTTP response
otherwise.
Second,
the attacker needs to build a block decryp-
tion algorithm similar to the one described by Vaude-
nay [13]. The attacker constructs a three-block message
= Cvalid|Crandom|Ctarget. Ctarget
is the block that he
wants to decrypt. Cvalid is a valid resource identiﬁer that is
easily found in ASP.NET applications. The attacker needs
Cvalid to ensure that
the decryption of his message is
correctly formatted as a resource identiﬁer, or ASP.NET
would return a 500 HTTP response even if the padding is
valid. The attacker changes Crandom until he gets a 404
HTTP response, which indicates that a valid padding has
been found. The attacker then uses Vaudenay’s last-byte-
decryption algorithm to decrypt the last byte of Ctarget.
After obtaining the last byte, the attacker changes Crandom
again, and uses Vaudenay’s block decryption algorithm to
obtain the rest of Ctarget.
Third, after the attacker has a reliable implementation of
the block decryption algorithm, he can use CBC-R with the
approach used in Algorithm 2 and Section III-C to build the
d parameter. See Algorithm 3 for a pseudo-implementation
of this attack.
Algorithm 3 Downloading ﬁles using CBC-R and the
padding oracle in WebResource.axd.
1) Pad the messsage |||~/path/to/file according
to the PKCS#5 padding scheme, and set the whole
result as the target P .
2) Divide P into n blocks of b bytes, denote them
P1, P2, . . . , Pn.
3) Use CBC-R to build Cn, . . . , C2, C1
so that
4) Pick a few random bytes r1, r2, . . . , rb, and set C0 =
C1|C2| . . .|Cn decrypts to Pgarbage|P1|P2| . . .|Pn.
r1|r2| . . .|rb.
it
5) Set
to
if
/path/to/file is downloaded. If no, go back to
step 4.
C0|C1|...|Cn,
d
ScriptResource.axd
send
see
and
to
=
6) Output d.
B. Attack Cost
As described in Algorithm 3, there are two independent steps
in a CBC-R attack against ASP.NET. The ﬁrst step is to
construct C1|C2|...|Cn, and the second step is to brute-force
C0. Although here we only perform a cost analysis for the
case where the attacker wants to download web.config,
the same method can be applied to other ﬁles.
Suppose the block size b is 16. The attacker needs just one
block for |||~/web.config (which is 15 bytes). For
each block, the attacker needs on average 128 ∗ b oracle
calls for the ﬁrst step. For the second step, since the ﬁrst two
bytes can be one of the four values r#, R#, q#, and Q#, the
attacker needs on average 214 HTTP requests to brute-force
the ﬁrst two bytes of C0. Since each oracle call is equal to
an HTTP request sent to the web server running ASP.NET,
the attack needs on average 214 + 128∗ b = 214 + 128∗ 16 =
18432 HTTP requests. In the next section, we describe a
faster attack that does not need a padding oracle.
V. FASTER ATTACK: CBC-R WITH T-BLOCK
DECRYPTION ORACLE
A. The T-block Decryption Oracle in ScriptResource.axd
Besides the padding oracle in WebResource.axd, we
found another application independent decryption oracle in
ScriptResource.axd. If the ﬁrst byte after decrypting
the d parameter is “T”, the handler will send all of the
decrypted data to the client. In order to trigger this decryp-
tion oracle, the attacker has to ﬁnd a T-block whose ﬁrst
byte after decryption is “T”. The T-block decryption oracle
is much faster than any padding oracle because it requires
only one HTTP request to decrypt several blocks.
There is one minor issue with this approach. Before sending
the decrypted data to the client, ScriptResource.axd
486486
Algorithm 4 Find a T-block.
1) Find a known ciphertext
in the target application,
denote its last two blocks as C1
known and C2
known.
2) Pick a few random bytes r1, r2, . . . , rb, and set T =
3) Set d = T|C1
r1|r2| . . .|rb.
to
ScriptResource.axd to see if the HTTP re-
sponse code is 200. If not, go back to step 3.
known, and send it
known|C2
4) Output T .
performs a character encoding conversion. The conversion
function is non-injective, so that the attacker cannot recover
all the bits of the output of the T-block oracle. Although we
tried reversing the framework to understand the conversion
function, it was not possible to avoid losing a signiﬁcant
number of bytes. In this sense, we consider the T-block
oracle to be a kind of “noisy oracle” with a high signal-
to-noise ratio. In the next section, we describe a solution to
this problem.
B. Attack Implementation
The attacker ﬁrst needs to ﬁnd a T-block whose ﬁrst byte
after decryption is “T”. The attacker generates a random
block and sends that block to ScriptResource.axd to
see if he gets an HTTP 200 response with HTML content in-
cluding the decrypted data. Since ScriptResource.axd
decrypts its input, the attacker needs to ensure that the
output is properly padded (or else he never gets a HTTP
200 response). The attacker can ensure a valid padding by
appending the last two blocks of any known ciphertext to
what he sends to ScriptResource.axd. Algorithm 4
describes this process.
After getting a T-block oracle, the next steps are to build the
CBC-R Cn, Cn−1, . . . , C1 chain and to ﬁnd C0 as described
in Section III-C. Since we lose some bytes in the output of
the T-block oracle, we need to ﬁgure out how to recover
them. What we describe in the next paragraph may not be the
best possible solution to this issue, but it is efﬁcient enough
for the purpose of using the T-block as part of CBC-R.
As described in Section V-A, some bits of the plaintext
are lost in the T-block oracle responses. The attacker needs
to decrypt complete blocks to be able to encrypt using
CBC-R. An efﬁcient decryption process also accelerates the
exhaustive search of the preﬁx required to download ﬁles.
The character conversion function causes two problems:
• Plaintext bytes with values larger than 0x7F are con-
verted to the Unicode replacement character which in
UTF-8 is encoded as the three bytes 0xEF 0xBF 0xBD.
• Some pairs of bytes are converted to a single Unicode
replacement character.
Algorithm 5 Downloading ﬁles using CBC-R and the T-
block Decryption Oracle in ScriptResource.axd.
1) Pad the messsage |||~/path/to/file according
to the PKCS#5 padding scheme, and set the whole
result as the target P .
2) Divide P into n blocks of b bytes, denote them
P1, P2, . . . , Pn.
3) Use Algorithm 4 to ﬁnd a T-block, denote it as T .
4) Use T to ﬁnd a C0 whose the ﬁrst two bytes after
decryption match one of the magic byte values.
5) Use CBC-R with T to build Cn, . . . , C2, C1 so that
C1|C2| . . .|Cn decrypts to Pgarbage|P1|P2| . . .|Pn.
6) output d = C0|C1| . . .|Cn.
The attacker can solve the ﬁrst problem by modifying a
ciphertext block to alter selected bits in the decryption of the
next block. To decrypt a block Ci, the attacker can send a
four-block message in a format of Cr|Ci| ˜Cr|Ci where Cr is
a random block and ˜Cr is the result of changing the highest
bit of all bytes in Cr (i.e., he can XOR each byte with 0x80).
The decryption process of the CBC mode ensures that if a