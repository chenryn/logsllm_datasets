1 1 1
f and f are the incoming and outgoing conditions of task t , respectively.
E C i
The condition f is called the event condition and the condition f is called
E C
the action condition.
Event-Action models can be constructed for any given task of a work-
flow. The model expresses that the Boolean value of the condition f is
E
propagated to f . For a particular task t, the value of the condition f is
C E
evaluated to true or false depending on the Boolean terms associates with
the incoming transitions for task t.
An EA model has a behavior with two distinct modes: when f is eval-
E
uated to true and when f is evaluated to false. In the first situation f
E C
can be evaluated to true or false according to the values of the outgoing
transitions; in the other case, f is always false. The behavior of an EA
C
model is described in table 1.
Only when the event expression f and the action expression f are 1,
E C
the model f E Ã f C is 1. In all the other cases the model has the value 0.
Event-Action models can be seen as logic gates. The gate is open when its
two composing elements, f and f , are 1. Otherwise, when f or f is 0,
E C E C
the gate is closed.
Example 6 As an example, let us consider task t illustrated in Figure
4
3. Task t has the following Event-Action model, t : a a Ãa a a 07,
4 4 03 04 05 06
• ⊕ ⊕
where f =a a and f = a a a . This model expresses that when
E 03 04 C 05 06 07
• ⊕ ⊕
both incomingtransitions of task t (a anda ) areenables (i.e., the Boolean
4 3 4
6
terms a and a are true) the Boolean condition f is evaluated to true. If
03 04 E
only one of the outgoing transitions of task t (i.e., a ,a or a ) become
4 5 6 7
enable (i.e., only one of the Boolean terms a ,a or a is true) the Boolean
05 06 07
condition f is evaluated to true. Consequently, the model f Ãf is true
C E C
if and only if both terms a and a are true and only one of the terms a ,a
03 04 05 06
or a is true.
07
Definition 6 We say that the EA model f Ãf is positive if its value
E C
is 1, otherwise we say that the model is negative.
A workflow starts its execution when transition a is enabled. The tran-
t
sition can be enabled explicitly by a user or implicitly by an external event.
Note that the outgoing conditions are enabled only after the incoming
conditions are enabled.
A workflow is started by enabling its entry point transition (a ). When
t
the workflow is correctly designed, it terminates by enabling the ending
transition (a ).
u
Definition 7 A simple EA model is an EA model f E Ã f C, where
f =a and f =a , for j,l , ,1,...,m , with j =l.
E 0j C 0l
∈ {t u } 6
Definition 8 A compound EA model is a nonsimple EA model f E Ã
f , i.e., f or f are boolean expressions with an and ( ), an or ( ), or an
C E C
• ⊗
exclusive-or ( ).
⊕
Example 7 In Figure 2, a 07 Ã a 08 is a simple EA model. The models
a Ãa a and a a Ãa are compound EA models.
01 03 04 02 05 06
• ⊕
Remark 1 The set of all elements i {1,...,n such that t i : f Ei Ã
∈ }
f ,t T isacompoundEAmodelisdenotedbyΓ, i.e., Γ = i 1,...,n
Ci i
∈ { ∈{ }
such that t : f Ãf is a compound EA model }.
i Ei Ci
Definition 9 Logical Workflow Representation. The logical representa-
tion of a workflow WG=(T,A) is a Boolean expression b = ∧(f Ãf Ci),
Ei
t i : f Ei Ã f Ci,t i T, for all i Γ, i.e., the conjunction of all compound
∈ ∈
EA models of WG.
Definition 10 A workflow WG is a contradiction if its logical workflow
representation b is a Boolean contradiction.
7
Definition 11 A materialized workflow instance of a workflow WG =
(T,A) is a workflow WG for which the Boolean terms a ,a A, have been
i 0j 0j 0
∈
set to true or false according to table 1.
Definition 12 A materialized workflow instance WG is true if its log-
i
ical workflow representation b is true and a materialized workflow instance
WG is false if its logical workflow representation b is false.
j
Definition 13 A materialized workflow instance WG of a workflow
j
WG = (T,A) logically terminates if transition a is enabled at some point
u
in time after transition a has been enabled.
t
Reaching the ending transition (a ) indicates the (logical) termination
u
ofprocessing; i.e. indicatesthatnofurther processing shouldproceed. Once
a is enabled, tasks of the workflow start their execution. The processing of
t
the workflow stops when one of the following cases occurs: (a) the workflow
finishes by enabling transition a , (b) the processing stops at some task
u
because of a workflow design problem. Note that when situation (b) holds,
it means that there exists a task t for which the respectively compound EA
model is negative. So both f and f are false, or f is true but f is false.
E C E C
Definition 14 A workflow WG = (T,A) logically terminates if all its
materialized workflow instances WG logically terminate.
j
Remark 2 A workflow for which all EA models are simple has the follow-
a a1 a2 an a
ing structure, t t t ...t t . The set of all
t 1 2 3 n 1 n u
t −→ −→ −→ − −→ −→ u
compound EA models is ∅ and therefore b does not exist. However, this
situation is not a problem, since this type of workflow always logically ter-
minates. In fact, this is a trivial case of logical workflow termination. Note
that all of its EA models are positive.
From now on, we will consider nontrivial situations, i.e., we consider
workflows with compound EA models. Our aim is to find necessary and
sufficient conditions for logical workflow termination.
Theorem 1 If a workflow WG is a contradiction then it does not logi-
cally terminates.
Proof 1 SupposethattheworkflowWGis acontradiction. Accordingto
Definition10 its logical workflowrepresentationb is aBoolean contradiction.
As b = ∧(f Ei Ã f Ci), t i : f Ei Ã f Ci, t i T, for all i Γ, then there exists
∈ ∈
i ∈Γ such that f Ãf is negative.
Ei Ci
8
tt
a 22 a
1 • • 3
a • a
•
tt • ⊕ tt
11 44
a • • a
2 4
tt
33
Figure 4: A workflow contradiction
Note that the execution of the workflow starts by enabling transition a ,
t
i.e. a is true.
0
Ont the other side, we still have the following equalities:
( a∧ n( dfb tE h= i eÃ f( af cfE tC1 i o) fÃ ) b∧ bf ( efC iE n1 n) g∧ Ã a( c∧ a o0 un(f ) t, rE aii d∈ iÃ cΓ ti\ of { nC 1 ,i ,) tn) h} e∧ . nB( of e nE a en ri onÃ fg ti hf n eC mn fo) i ln l= od wt i( h na e g0 tse cÃ ae sq eu sf aC mli1 t) uie s∧ s
t
occurs:
Ci( i1 s) na e0 tgaÃ tivef ;C (1 3i )s fn Ee nga Ãtiv ae 0; ( is2) nt eh ge ar te ivee .xists i ∈ Γ \{1,n } such that f Ei Ã
f
Case 1. Suppose that (1)uholds. As a is true then f must be false and
0 C1
so the workflow stops its execution in tatsk t . Therefore a is not enabled.
1
u
Case 2. Suppose that (2) holds. Then either both f and f are false or
Ei Ci
f is truebut f is false. Inbothsituations the workflowstops its execution
Ei Ci
in task t and consequently a is not enabled.
i
u
Case 3. Suppose that (3) holds. In this situation either both f and a
En 0
are false or f is true and a is false. In both situations a is false anud
En 0 0
therefore a is not enabled. u u
u
Conclusion, in any of the previous cases a is not enabled, which means
u
that the workflow does not logically terminates.
Example 8 The EA models of the workflow shown in figure 4 are: t :
1
a Ãa a 02,t : a Ãa 03,t : a Ãa 04,t : a a Ãa . Its logical workflow
0 01 2 01 3 02 4 03 04 0
retpresent• ation is b =(a Ãa a 02) (a a 04⊕ Ãa ). Iut can be easily proved
0 01 03 0
using table 1 that all mtaterializ• ed w∧ orkflo⊕ w instanuces are false. Therefore,
the workflow is a contradiction and does not logically terminate.
Theorem 2 A materialized workflow instance WG logically terminates
i
if its logical workflow representation b is true.
9
a
3
tt tt
a 1 • 22 ⊕ ⊕ 44 • a 7
a
4
a • a
tt • • tt
11 a 66
5
a 2 • tt ⊕ a 6 ⊕ tt • a 8
33 55
Figure 5: A workflow with a partial termination
Proof 2 As b = ∧(f Ei Ã f Ci), t i : f Ei Ã f Ci, t i T, for all i Γ, is
∈ ∈
true, then every f Ãf is true, for i ∈Γ. Consequently, for all i ∈Γ, f
Ei Ci Ei
and f are true. In particular a and a are true, which means that both a
Ci 0 0
and a are enabled. As the workfltow staruts its execution by enabling a , thent
u t
a is enabled in some point in time after a has been enabled. Therefore the
u t
workflow instance WG logically terminates.
i
Theorem 3 A materialized workflow instance WG does not logically
i
terminates if its logical workflow representation b is false.
Proof 3 The proof follows immediately from Theorem 1.
Theorem 4 If a workflow WG is not a contradiction and is not a tau-
tology then WG terminates for some, but not all, materialized workflow
instances WG . In this situation we say that the workflow partially termi-
i
nates.
Proof 4 If a workflow WG is not a contradiction then some materi-
alized workflow instances WG are true. Also, if a workflow WG is not a
t
tautology then some materialized workflow instances WG are false. There-
f
fore, according to theorems 2 and 3, the materialized workflow instances
WG , which are true, terminate and the materialized workflow instances
t
WG , which are false, do not terminate.
f
Example 9 The logical workflow representation of the workflow shown
in figure 5 is b =(a 0 Ãa 01 a 02) (a 01 Ãa 03 a 04) (a 02 Ãa 05 a 06) (a 03 a 05 Ã
t • ∧ ⊕ ∧ ⊕ ∧ ⊕
10
a 07) (a 04 a 06 Ã a 08) (a 07 a 08 Ã a 0 ). Consider the following mate-
riali∧ zed wo⊕ rkflow instan∧ ces: (• 1) a =utrue;a = true;a = true;a =
0 01 02 03
true;a = false;a = false;a = ttrue;a = true;a = true;a = true;
04 05 06 07 08 0
(2) a = true;a = true;a = true;a = false;a = true;a = turue;a =
0 01 02 03 04 05 06