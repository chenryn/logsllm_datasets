# 一、前言
本文为强网杯CTF区块链题目解析。现在的大赛越来越常见到区块链的题目的影子，相比传统的web题目，blockchain做出题目的队伍并不多，于是我将本次比赛的两道题目进行分析，并将做题过程记录在此，方便爱好者进行学习。
由于每一个题目需要分析与演示，我在这里将两道题目分为两篇文章，本文为第一题`Babybank`。
# 二、题目分析
拿到题目后我们只能看到如下内容：
`0xd630cb8c3bbfd38d1880b8256ee06d168ee3859c@ropsten，请使用自己队伍的token获取flag，否则flag无效`
并且给出不完整合约：
拿到合约我们能看到合约私有变量有余额`balance`、`level`。看到了`sendflag`时间以及`payforflag`函数，而此函数需要传入md5的队伍token以及base64加密后的邮箱，当调用此函数后，需要满足当前调用余额大于10000000000。很显然，这是一个非常大的数，且我们需要用一些漏洞来增加账户的余额。
已知条件就如此，之后我们需要查看合约地址的信息来发掘更多有用的条件。
我们访问该合约地址并没有发现题目源码，这无疑加大了合约分析的难度。不过现在的题目基本上都不会给出源码，大多题目还是需要依靠逆向进行，于是我们也将合约进行逆向。
得到如下代码：
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x80;
            if (msg.data.length  storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            var temp0 = memory[0x40:0x60];
            var temp1 = arg0;
            memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(msg.gas).value(temp1 * 0x5af3107a4000)(memory[temp0:temp0 + 0x00]);
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            var temp2 = keccak256(memory[0x00:0x40]);
            storage[temp2] = storage[temp2] - temp1;
        }
        function profit() {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x01;
        // 当level=1 跳出
            if (storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            if (msg.sender & 0xffff != 0xb1b1) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + 0x01;
            memory[0x20:0x40] = 0x01;
            var temp1 = keccak256(memory[0x00:0x40]);
            storage[temp1] = storage[temp1] + 0x01;
        }
        function func_02DC(var arg0, var arg1) {
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            if (0x02540be400 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x00;
            storage[keccak256(memory[0x00:0x40])] = 0x00;
            var temp0 = memory[0x40:0x60];
            var temp1 = address(address(this)).balance;
            var temp2;
            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);
            var var0 = !temp2;
            if (!var0) {
                var0 = 0x6335b7f9c4dff99c3a870eaf18b802774df3aba4e21b72549f3a03b6bc974c90;
                var temp3 = arg0;
                var var1 = temp3;
                var var2 = arg1;
                var temp4 = memory[0x40:0x60];
                var var3 = temp4;
                var var4 = var3;
                var var5 = var4 + 0x20;
                var temp5 = var5 + 0x20;
                memory[var4:var4 + 0x20] = temp5 - var4;
                memory[temp5:temp5 + 0x20] = memory[var1:var1 + 0x20];
                var var6 = temp5 + 0x20;
                var var8 = memory[var1:var1 + 0x20];
                var var7 = var1 + 0x20;
                var var9 = var8;
                var var10 = var6;
                var var11 = var7;
                var var12 = 0x00;
                if (var12 >= var9) {
                label_03BC:
                    var temp6 = var8;
                    var6 = temp6 + var6;
                    var7 = temp6 & 0x1f;
                    if (!var7) {
                        var temp7 = var6;
                        memory[var5:var5 + 0x20] = temp7 - var3;
                        var temp8 = var2;
                        memory[temp7:temp7 + 0x20] = memory[temp8:temp8 + 0x20];
                        var6 = temp7 + 0x20;
                        var7 = temp8 + 0x20;
                        var8 = memory[temp8:temp8 + 0x20];
                        var9 = var8;
                        var10 = var6;
                        var11 = var7;
                        var12 = 0x00;
                        if (var12 >= var9) {
                        label_041C:
                            var temp9 = var8;
                            var6 = temp9 + var6;
                            var7 = temp9 & 0x1f;
                            if (!var7) {
                                var temp10 = memory[0x40:0x60];
                                log(memory[temp10:temp10 + var6 - temp10], [stack[-8]]);
                                return;
                            } else {
                                var temp11 = var7;
                                var temp12 = var6 - temp11;
                                memory[temp12:temp12 + 0x20] = ~(0x0100 ** (0x20 - temp11) - 0x01) & memory[temp12:temp12 + 0x20];
                                var temp13 = memory[0x40:0x60];
                                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [stack[-8]]);
                                return;
                            }
                        } else {
                        label_040D:
                            var temp14 = var12;
                            memory[temp14 + var10:temp14 + var10 + 0x20] = memory[temp14 + var11:temp14 + var11 + 0x20];
                            var12 = temp14 + 0x20;
                            if (var12 >= var9) { goto label_041C; }
                            else { goto label_040D; }
                        }
                    } else {
                        var temp15 = var7;
                        var temp16 = var6 - temp15;
                        memory[temp16:temp16 + 0x20] = ~(0x0100 ** (0x20 - temp15) - 0x01) & memory[temp16:temp16 + 0x20];
                        var temp17 = temp16 + 0x20;
                        memory[var5:var5 + 0x20] = temp17 - var3;
                        var temp18 = var2;
                        memory[temp17:temp17 + 0x20] = memory[temp18:temp18 + 0x20];
                        var6 = temp17 + 0x20;
                        var8 = memory[temp18:temp18 + 0x20];
                        var7 = temp18 + 0x20;
                        var9 = var8;
                        var10 = var6;
                        var11 = var7;
                        var12 = 0x00;
                        if (var12 >= var9) { goto label_041C; }
                        else { goto label_040D; }
                    }
                } else {
                label_03AD:
                    var temp19 = var12;
                    memory[temp19 + var10:temp19 + var10 + 0x20] = memory[temp19 + var11:temp19 + var11 + 0x20];
                    var12 = temp19 + 0x20;
                    if (var12 >= var9) { goto label_03BC; }
                    else { goto label_03AD; }