# 【技术分享】Windows内核池喷射的乐趣

#### 译文声明
本文是翻译文章，原文来源：[theevilbit.blogspot.com](http://theevilbit.blogspot.com)。译文仅供参考，具体内容和含义以原文为准。
- 译者：**天鸽**
- 预估稿费：200 RMB
- 投稿方式：发送邮件至 [linwei#360.cn](mailto:linwei@360.cn)，或登录网页版在线投稿。

## 前言——Windows 内核池喷射
我计划写这一系列文章已经有一年了。我对这个主题进行了一些研究，但常常会忘记细节，并且没有系统地记录下来。我想探讨的是哪些对象可以用于内核池喷射，重点关注它们占用的空间大小、属性以及如何通过编写代码来动态选择合适的对象，以便在给定的池孔大小下实现溢出。

最近看到 [@steventseeley](https://twitter.com/steventseeley) 的一条推特后，我又对这个问题产生了兴趣，决定将我的研究整理成文，同时也满足自己的兴趣爱好。

微软提供了一个不错的内核对象列表，可以通过用户模式功能创建这些内核对象。尽管这个列表不是非常完整，但它是一个很好的起点：
- [内核对象列表](https://msdn.microsoft.com/library/windows/desktop/ms724485(v=vs.85).aspx)

另一个重要的资源是池标签（pool tag）列表，这对于调试时识别内存块非常有用：
- [池标签列表](https://blogs.technet.microsoft.com/yongrhee/2009/06/23/pool-tag-list/)

在这篇文章中，我将重点探讨 Mutex 对象。由于笔记不完整，我将详细说明如何找到并查看 Mutex 对象在内核池中的实际分配情况及其基本信息。

## 第一部分——环境配置及对象大小
在设置环境部分，我们不需要进行远程内核调试，本地内核调试就足够了，因为我们仅探索内核内存，目前无需设置任何断点。为此，我们需要在 Windows 中启用调试：

```sh
bcdedit -debug ON
```

重启机器后，启动 WinDBG 并进入内核调试模式，选择本地调试。建议使用以下命令加载符号：

```sh
.symfix
.reload
```

现在我们可以开始探索内核内存空间了。我将使用 Windows 7 SP1 x86 进行演示。

首先，如果我们希望获得更全面的对象列表，可以使用以下命令：

```sh
!object ObjectTypes
```

例如，输出如下：

```sh
lkd> !object ObjectTypes
Object: 8be05880  Type: (851466d8) Directory
    ObjectHeader: 8be05868 (new version)
    HandleCount: 0  PointerCount: 44
    Directory Object: 8be05ed0  Name: ObjectTypes
    Hash Address  Type                      Name
    ---- -------  ----                      ----
     00  851d6900 Type                      TpWorkerFactory
         851466d8 Type                      Directory
     01  8521a838 Type                      Mutant
         851cddb0 Type                      Thread
     03  857c7c40 Type                      FilterCommunicationPort
     04  8522a360 Type                      TmTx
     05  851d29c8 Type                      Controller
     06  8521d0b8 Type                      EtwRegistration
     07  851fe9c8 Type                      Profile
         8521a9c8 Type                      Event
         851467a0 Type                      Type
     09  8521cce0 Type                      Section
         8521a900 Type                      EventPair
         85146610 Type                      SymbolicLink
     10  851d69c8 Type                      Desktop
         851cdce8 Type                      UserApcReserve
     11  85221040 Type                      EtwConsumer
         8520e838 Type                      Timer
     12  8522a8f0 Type                      File
         851fe838 Type                      WindowStation
     14  860a6f78 Type                      PcwObject
     15  8521ceb0 Type                      TmEn
     16  851d2838 Type                      Driver
     18  8521db70 Type                      WmiGuid
         851fe900 Type                      KeyedEvent
     19  851d2900 Type                      Device
         851cd040 Type                      Token
     20  85214690 Type                      ALPC Port
         851cd568 Type                      DebugObject
     21  8522a9b8 Type                      IoCompletion
     22  851cde78 Type                      Process
     23  8521cf78 Type                      TmRm
     24  851d6838 Type                      Adapter
     26  852139a8 Type                      PowerRequest
         85218448 Type                      Key
     28  851cdf40 Type                      Job
     30  8521c940 Type                      Session
         8522a428 Type                      TmTm
     31  851cdc20 Type                      IoCompletionReserve
     32  8520e9c8 Type                      Callback
     33  85894328 Type                      FilterConnectionPort
     34  8520e900 Type                      Semaphore
```

这是可以在内核空间中分配的对象列表。我们可以通过更多细节来探索它们的重要属性。使用 `dt nt!_OBJECT_TYPE` 命令可以获取关于某个对象的更多信息，如句柄总数等。最重要的是 `_OBJECT_TYPE_INITIALIZER` 结构的偏移量，它提供了很多有用的信息。让我们看看它为 Mutant 对象提供了哪些信息：

```sh
lkd> dt nt!_OBJECT_TYPE 8521a838
   +0x000 TypeList         : _LIST_ENTRY [ 0x8521a838 - 0x8521a838 ]
   +0x008 Name             : _UNICODE_STRING "Mutant"
   +0x010 DefaultObject    : (null) 
   +0x014 Index            : 0xe ''
   +0x018 TotalNumberOfObjects : 0x15f
   +0x01c TotalNumberOfHandles : 0x167
   +0x020 HighWaterNumberOfObjects : 0xc4d7
   +0x024 HighWaterNumberOfHandles : 0xc4ed
   +0x028 TypeInfo         : _OBJECT_TYPE_INITIALIZER
   +0x078 TypeLock         : _EX_PUSH_LOCK
   +0x07c Key              : 0x6174754d
   +0x080 CallbackList     : _LIST_ENTRY [ 0x8521a8b8 - 0x8521a8b8 ]

lkd> dt nt!_OBJECT_TYPE_INITIALIZER 8521a838+28
   +0x000 Length           : 0x50
   +0x002 ObjectTypeFlags  : 0 ''
   +0x002 CaseInsensitive  : 0y0
   +0x002 UnnamedObjectsOnly : 0y0
   +0x002 UseDefaultObject : 0y0
   +0x002 SecurityRequired : 0y0
   +0x002 MaintainHandleCount : 0y0
   +0x002 MaintainTypeList : 0y0
   +0x002 SupportsObjectCallbacks : 0y0
   +0x002 CacheAligned     : 0y0
   +0x004 ObjectTypeCode   : 2
   +0x008 InvalidAttributes : 0x100
   +0x00c GenericMapping   : _GENERIC_MAPPING
   +0x01c ValidAccessMask  : 0x1f0001
   +0x020 RetainAccess     : 0
   +0x024 PoolType         : 0 ( NonPagedPool )
   +0x028 DefaultPagedPoolCharge : 0
   +0x02c DefaultNonPagedPoolCharge : 0x50
   +0x030 DumpProcedure    : (null) 
   +0x034 OpenProcedure    : (null) 
   +0x038 CloseProcedure   : (null) 
   +0x03c DeleteProcedure  : 0x82afe453     void  nt!ExpDeleteMutant+0
   +0x040 ParseProcedure   : (null) 
   +0x044 SecurityProcedure : 0x82ca2936     long  nt!SeDefaultObjectMethod+0
   +0x048 QueryNameProcedure : (null) 
   +0x04c OkayToCloseProcedure : (null)
```

这里告诉我们两个重要的信息：
1. 此对象被分配到的池类型 —— 在这里是非分页池（NonPagedPool）。
2. 功能偏移（这在实际漏洞利用中非常重要）。

接下来，我们将分配一个 Mutant 对象，并在内核池中找到它。我编写了一段简短的 Python 代码来实现这一点：

```python
from ctypes import *
from ctypes.wintypes import *

kernel32 = windll.kernel32

def alloc_not_named_mutex():
    hHandle = HANDLE(0)
    hHandle = kernel32.CreateMutexA(None, False, None)
    if hHandle == None:
        print("[-] Error while creating mutex")
    return hHandle

# 调用函数
mutex_handle = alloc_not_named_mutex()
print(f"Mutex handle: {mutex_handle}")
```

这段代码将创建一个未命名的互斥体，并返回其句柄。如果创建失败，将打印错误信息。