polynomials, setting
si(y) = F (xi, y) + αi · g(y) + βi · h(y) + γi,
where αi, βi ∈R [−u, u] and γi ∈R [−ur, ur]. Our attack can
be easily adapted to break this variant:
• In the ﬁrst stage, we recover the noise space but ignore
(cid:3)
the free term. That is, we recover two polynomials v, v
but instead of having (cid:6)g = a · (cid:6)v + b · (cid:6)v
(cid:3)
for some scalars
a, b, we would have (cid:6)g = a · (cid:6)v + b · (cid:6)v
+ c · (cid:9)1, 0, . . . , 0(cid:10)
(cid:3)
for some a, b, c (and similarly for h).
• Instead of the lattice from Eq. (2), we use the lattice
3
2
spanned by the rows of the following matrix:
(cid:3)
··· Δv(xn(cid:2) , xn(cid:2)−1)
··· Δv
(xn(cid:2) , xn(cid:2)−1)
···
···
. . .
···
0
0
...
p
77777775
66666664
Δv(x1, x0) Δv(x2, x1)
Δv
(x2, x1)
(x1, x1) Δv
(cid:3)
(cid:3)
p
0
...
0
0
p
...
0
1http://shoup.net/ntl
2http://perso.ens-lyon.fr/damien.stehle
(cid:3)
with Δv(xi, xj) = v(xi) − v(xj) and Δv
(xi, xj) =
(xi) − v(xj)
(cid:3)
v
Note that the values v(xi) − v(xi−1) are independent
of the free term of v (and similarly for v
), and that the
short vectors in this lattice correspond to the vectors
.
(cid:3)
(cid:3)
˜g = (cid:9)g(x0) − g(x1), . . . , g(xn(cid:2) ) − g(xn(cid:2)−1)(cid:10) and
˜h = (cid:9)h(x0) − h(x1), . . . , h(xn(cid:2) ) − h(xn(cid:2)−1)(cid:10) .
For this lattice, the two shortest vectors (that can
be obtained using lattice reduction) are ±˜g and ±˜h
themselves, which allow recovery of the polynomials
±g and ±h except for the free terms. The free terms
can then be approximated by any scalars that force
g(xi), h(xi) ∈ [0, r] for all the xi.
• The system of equations for the coeﬃcients of F now
includes the additional unknowns γi, and the degree
of the solution space would be six rather than three;
see Appendix A.2. (It is also possible to eliminate the
γi’s from the system and arrive at a system that has
only three degrees of freedom as before.) Solving this
system would not determine the free term of F , but
the free term of F can be approximated by any scalar
that makes F (xi, xj) close enough to si(xj) for all i, j.
3. THE MESSAGE AUTHENTICATION
SCHEMES OF ZHANG ET AL.
Zhang, Subramanian, and Wang [6] proposed schemes for
message authentication in sensor networks. They begin by
describing an initial scheme, called Scheme-I in their paper,
that allows a base station to authenticate a message for a set
of nodes. This scheme is information-theoretically secure as
long as a bounded number of messages are authenticated,
and a bounded number of nodes are compromised. We de-
scribe this scheme here.
Let p be a prime. The master secret key, stored by the
base station, is a bivariate polynomial F ∈ Zp[x, y] of degree
dn in x and degree dm in y. The secret key for a node i is
the univariate polynomial fi(·) def= F (i,·). The authentica-
tion tag for a message m ∈ F is the univariate polynomial
m(·) def= F (·, m). Node i can verify the tag f
(cid:3)
(cid:3)
f
m on a message
m by checking whether f
(cid:3)
m(i) ?= fi(m).
The master secret key can be recovered in its entirety if
either dn + 1 nodes are compromised, or if dm + 1 mes-
sages are authenticated by the base station. If no nodes are
compromised and at most dm messages are authenticated,
or if no messages have been authenticated and at most dn
nodes have been compromised, the scheme is information-
theoretically secure (with probability of forgery 1/p).
Zhang et al. present a series of extensions to this basic
scheme in their paper. Scheme-II, as above, enables the
base station to authenticate messages for the nodes (i.e.,
multicast), and Scheme-IV allows for authentication of mes-
sages between the nodes (i.e., many-to-many communica-
tion). Zhang et al. also propose a Scheme-III, but they
themselves show that it is not secure.
3.1 Scheme-II and How to Break it
To enhance the performance of Scheme-I, Zhang et al. sug-
gest to add noise in the free term of the various polynomials.
Speciﬁcally, ﬁx a noise parameter r  0, and after
an attacker can recover all the F
seeing dm + 1 authentication tags an attacker can recover
j
all the F
i ’s with i > 0. Compromising dn + 1 nodes and
seeing dm + 1 authentication tags thus allows the attacker
to recover all the coeﬃcients of F except for the free term.
The free term can then approximated by ﬁnding any element
of Zp for which the resulting polynomial F (x, y) gives node
keys and authentication tags whose free term is close to the
free term of the keys and tags already observed.
3.2 Scheme-IV and How to Break It
Scheme-III and Scheme-IV in [6] were designed to authen-
ticate many-to-many communication. These schemes extend
Scheme-I by using a tri-variate master polynomial whose
three variables correspond to senders, receivers, and mes-
sages. Namely, the master key of the underlying scheme is a
polynomial F (x, y, z). A node i is given two secret keys: the
bivariate polynomial F (i,·, ·) (to be used when it acts as a
sender), and the bivariate polynomial F (·, i, ·) (for when it
acts as a receiver). The tag for a message m sent by node i
is the univariate polynomial F (i,·, m); and a receiver j veri-
ﬁes this tag in the obvious way. Scheme-III is obtained from
this underlying scheme by adding noise to the free term,
but Zhang et al. observe that the resulting scheme is not
secure. Hence, in Scheme-IV they adopt the perturbation
polynomial technique from [7] as described next.
In Scheme-IV there are noise parameters u, r with u  0, the coeﬃcient of yjzk in aw depends
only on F 1 and not on the noise. Similarly, for k > 0 the co-
eﬃcient of xizk in the receiver polynomial bw(x, z) depends
only on F 1 and not on the noise. This means that once the
attacker compromises dx + 1 senders or dy + 1 receivers, it
can fully recover the polynomial F 1. Then, the only part of
the master secret key that the attacker is missing is F 2(x, y),
which is independent of the message variable z. This allows
easy forgery, as described next.
Given a tag tx∗,m(y) computed by a non-compromised
on a message m, the attacker (who knows F 1)
∗
sender x
can compute the polynomial
Δ(y) def= tx∗,m(y) − F 1(x
= F 2(x
, y) + αx∗ h(y) + βx∗ + ηm .
∗
, y, m)
∗
The attacker can now forge the tag of any message m
sent by the same x
, by setting
∗
˜tx∗,m(cid:2) (y) def= F 1(x
∗
∗
(cid:3)
, y, m
) + F 2(x
= F 1(x
∗
(cid:3)
, y, m
) + Δ(y)
, y) + αx∗h(y) + βx∗ + ηm∗
„
(cid:3)
as
«
.
6Note that this is exactly the tag that the sender x
would
have sent if it chose ηm(cid:2) = ηm∗ , which means that this is a
valid tag for m
and would therefore be accepted by all the
receivers.
(cid:3)
∗
Alternatively, the attacker can apply an attack similar to
the one from Section 2 (using the fact that g, h have “small
values” on all the identities) to recover also the remaining
master polynomial F 2(x, y), and thereafter it can forge mes-
sages for any sender. We omit the details.
4. THE STORAGE/RETRIEVAL SCHEMES
OF SUBRAMANIAN ET AL.
Subramanian, Yang, and Zhang [5] presented three sche-
mes for the management of encryption (and decryption)
keys, which can in turn be used for protecting sensitive in-
formation stored in sensor nodes. Below we consider the
third scheme from [5], which uses a variant of perturbation
polynomials. That scheme is quite involved and contains
many details that are not relevant to our attacks. Hence,
we ﬁrst present a simpliﬁed scheme and show how to attack
it (cf. Section 4.1), and then explain why the same attacks
apply to the full scheme of Subramanian et al.
Roughly speaking, Subramanian et al. assume a network
where nodes are initialized before deployment, and then de-
ployed to the ﬁeld where they operate unattended, collecting
information from their environment and then encrypting it
and storing it locally. The nodes are willing to send their
encrypted data to users who request it, but only users with
the appropriate keys can decrypt the information.
The lifetime of the system is partitioned in a series of
phases, and nodes update their keys from one phase to the
next. The goal of the third scheme from [5] is to be able
to provide a user with keys that can be used to decrypt the
data from all the nodes in phase i but not any other phase,
while minimizing the storage and communication require-
ments and maximizing the resilience to node compromise
and/or user compromise.
Underlying the third scheme from [5] is the following poly-
nomial-based solution: The master key is a bivariate polyno-
mial F ∈ F[x, y]. The secret key of node u is the polynomial
fu(·) = F (u,·), and the encryption key used by node u in
phase v is Ku,v = fu(v) = F (u, v). A user that needs the
keys for phase v is given the polynomial gv(·) = F (·, v) that
can be used to compute the keys for all the nodes at this
phase as gv(u) = F (u, v) = Ku,v.
The problem with this noise-free solution is resilience.
Speciﬁcally, Subramanian et al. identiﬁed the following three
attack scenarios:
• When a node u is compromised, the polynomial fu(·) is
recovered and the attacker can compute the key Ku,v
used by u in every phase v. Ideally, we would like the
encryption at the nodes to be forward secure so that
compromising node u at phase v will not allow the
attacker to decrypt the storage from any prior phases.
• If F has degree dx in x, then once the attacker com-
promise du + 1 nodes it can recover the entire master
polynomial.
• Similarly, if F has degree dy in y, then once a user is
given gv for dv + 1 diﬀerent phases it can recover the
entire master polynomial.
4.1 A Simple Scheme and How to Break It
To overcome the problems mentioned above, Subramanian
et al. proposed to add noise to the free terms of the relevant
polynomials. The system is again deﬁned over F = Zp for
some prime p, and we have a noise parameter r (cid:13) p. The
master key is a polynomial F (x, y) of degree dx in x and
degree dy in y; the secret key for node u is su(·) = F (u,·) +