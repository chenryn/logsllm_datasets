## 重新发现PostgreSQL之美 - 16 like '%西出函谷关%' 模糊查询  
### 作者                
digoal                
### 日期                
2021-06-07                
### 标签                
PostgreSQL , like , 索引 , 模糊查询            
----                 
## 背景      
视频回放: https://www.bilibili.com/video/BV1144y1z7MM/      
场景:        
1、电商    
商品、店铺、描述等. 搜索框 模糊查询    
2、企业ERP、社交APP、网站     
内容搜索框, 模糊查询    
挑战:      
传统数据库不支持模糊查询, 需要全表扫描, 性能极差, 少量并发查询极可能导致雪崩.   
通常的解决方案需要将数据同步到搜索引擎, 这种解决方案的弊端:       
- 研发、软硬件成本增加、      
- 系统问题增多(同步延迟问题、同步异常问题、同步一致性问题)、      
- 开发灵活性下降(无法同时过滤模糊查询条件与表的其他条件, 需要业务层交换数据)      
- 不支持同时过滤like与其他条件  
PG 解决方案:      
- 倒排索引GIN + btree_gin: 支持模糊查询+任意字段组合过滤.       
##### 202105/20210502_01.md   [《PostgreSQL 应用开发解决方案最佳实践系列课程 - 1. 中文分词与模糊查询》](../202105/20210502_01.md)    
##### 202009/20200913_01.md   [《[直播]在数据库中跑全文检索、模糊查询SQL会不会被开除?》](../202009/20200913_01.md)    
##### 202009/20200912_01.md   [《PostgreSQL 模糊查询、相似查询 (like '%xxx%') pg_bigm 比 pg_trgm 优势在哪?》](../202009/20200912_01.md)    
##### 202003/20200330_01.md   [《PostgreSQL 模糊查询增强插件pgroonga , pgbigm (含单字、双字、多字、多字节字符) - 支持JSON模糊查询等》](../202003/20200330_01.md)    
##### 202001/20200116_01.md   [《PostgreSQL+MySQL 联合解决方案 - 第12课视频 - 全文检索、中文分词、模糊查询、相似文本查询》](../202001/20200116_01.md)    
##### 201903/20190320_01.md   [《PostgreSQL 数组里面的元素，模糊搜索，模糊查询，like，前后百分号，正则查询，倒排索引》](../201903/20190320_01.md)    
##### 201805/20180502_01.md   [《PostgreSQL 模糊查询+大量重复值匹配 实践 - 分区索引 = any (array())》](../201805/20180502_01.md)    
##### 201801/20180118_03.md   [《PostgreSQL 模糊查询 与 正则匹配 性能差异与SQL优化建议》](../201801/20180118_03.md)    
##### 201712/20171205_02.md   [《用PostgreSQL 做实时高效 搜索引擎 - 全文检索、模糊查询、正则查询、相似查询、ADHOC查询》](../201712/20171205_02.md)    
##### 201711/20171107_13.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 12 - (OLTP) 字符串搜索 - 前后模糊查询》](../201711/20171107_13.md)    
##### 201711/20171107_10.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 9 - (OLTP) 字符串模糊查询 - 含索引实时写入》](../201711/20171107_10.md)    
##### 201710/20171020_01.md   [《多国语言字符串的加密、全文检索、模糊查询的支持》](../201710/20171020_01.md)    
##### 201710/20171016_04.md   [《Greenplum 模糊查询 实践》](../201710/20171016_04.md)    
##### 201704/20170426_01.md   [《PostgreSQL 模糊查询最佳实践 - (含单字、双字、多字模糊查询方法)》](../201704/20170426_01.md)    
##### 201701/20170106_04.md   [《PostgreSQL 全表 全字段 模糊查询的毫秒级高效实现 - 搜索引擎颤抖了》](../201701/20170106_04.md)    
##### 201612/20161231_01.md   [《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
##### 201605/20160506_02.md   [《中文模糊查询性能优化 by PostgreSQL trgm》](../201605/20160506_02.md)    
##### 201603/20160302_01.md   [《PostgreSQL 百亿数据 秒级响应 正则及模糊查询》](../201603/20160302_01.md)    
## 例子  
1、创建一个生成随机汉字字符串的函数  
```  
create or replace function gen_hanzi(int) returns text as $$                    
declare          
  res text;          
begin          
  if $1 >=1 then          
    select string_agg(chr(19968+(random()*20901)::int), '') into res from generate_series(1,$1);          
    return res;          
  end if;          
  return null;          
end;          
$$ language plpgsql strict;  
```  
```  
------------------------------------------        
 埳噪办甾讷昃碇玾陧箖燋邢贺浮媊踮菵暔谉橅        
 秋橑篯鴎拟倶敤麁鼋醠𫐖坙𫘥𫓩𫄹蘛婃坹娴儅        
 蔎緾铠爪鹏二悲膼朠麻㶉鋬桢窷违繇糭啯索籓        
 驰泅薬鐗愅撞窍浉渗蛁灎膝攚𪭢瞪拡擜詜隝缊        
 襳铺煃匶瀌惩荼黹樆惺箧搔羾憯墆锒硍蔓恧顤     
```  
2、创建测试表  
```  
create unlogged table tbl (  
	id serial8 primary key,  
	gid int,  
	c1 text,  
	c2 text,  
	c3 text,  
	ts timestamp  
);  
```  
3、写入200万记录  
```  
insert into tbl (gid,c1,c2,c3,ts)   
select random()*10000, gen_hanzi(16), gen_hanzi(32), gen_hanzi(128), clock_timestamp()   
from generate_series(1,1000000);  
insert into tbl (gid,c1,c2,c3,ts)   
select random()*10000, gen_hanzi(16)||'西出函谷关'||gen_hanzi(16), gen_hanzi(32), gen_hanzi(128), clock_timestamp()   
from generate_series(1,100);  
insert into tbl (gid,c1,c2,c3,ts)   
select random()*10000, gen_hanzi(16), gen_hanzi(32)||'西出函谷关'||gen_hanzi(16), gen_hanzi(128), clock_timestamp()   
from generate_series(1,100);  