When babel transforms ES6 module format into CommonJS format, the variable
names become mangled, e.g.
    import _ from 'underscore'
becomes
    var _underscore = require('./underscore')
    var _underscore2 = _interopRequireDefault(_underscore)
.. _underscore is only used once, and `_underscore2` is now the module (almost
- see below). This makes debugging difficult since the source maps at present
do not support symbol name mapping, and may not for some time: see
https://code.google.com/p/chromium/issues/detail?id=327092
The benefits of using ES6 module format go away pretty quickly when they come
at the consequence of effective debugging. While I guess you can sort of
"know" that they get transmogrified into "_variablename2", the gui tools in
the debugger don't work, and it just makes it harder to work with the code.
Probably related: every reference to a default import within the code now
refers to
    _underscore2["default"]
... I can't think why the symbol wouldn't be defined as the property
referenced inline up front, same as the original import statement, rather than
requiring all the references in code to be de-optimized this way.
I assume this all has to do with some implementation detail of the module
transformation process, and I imagine if it was easy not to do this, then it
wouldn't already :) But it would be a big help to fix it - it's kind of a
showstopper for switching to ES6 module format.