arrows denote ﬂow of money and brown arrows de-
note gas limits. The thickness of lines indicate the
quantity of resources. The $gclbk arrow is thin be-
cause $gclbk is limited to $f − $Gmin.
phertexts under pkTC . Private datagrams can thus enable
conﬁdentiality-preserving applications despite the public read-
ability of the blockchain. Custom datagrams, also supported
by TC, allow a contract to specify a particular web-scraping
target, potentially involving multiple interactions, and thus
greatly expand the range of possible relying contracts for
TC. We do not treat them in our security proofs, but give
examples of both datagram types in Section 8.1.
6.2 Enhanced Robustness via Replication
Our basic security model for TC assumes the ideal isola-
tion model for SGX described above as well as client trust
in data sources. Given various concerns about SGX secu-
rity [18,38] and the possible fallibility of data sources, we ex-
amine two important ways TC can support hedging. To pro-
tect against the compromise of a single SGX instance, con-
tracts may request datagrams from multiple SGX instances
and implement majority voting among the responses. This
hedge requires increased gas expenditure for additional re-
quests and storage of returned data. Similarly, TC can hedge
against the compromise of a data source by scraping mul-
tiple sources for the same data and selecting the majority
response. We demonstrate both of these mechanisms in our
example ﬁnancial derivative application in Section 8.2. (A
potential optimization is mentioned in Section 10.)
6.3 Implementation Details
We implemented a full version of the TC protocol in a
complete, end-to-end system using Intel SGX and Ethereum.
We defer discussion of implementation details and other
practical considerations to the appendix of the online ver-
sion [39].
7. SECURITY ANALYSIS
Proofs of theorems in this section appear in the appendix
of the online version [39].
Authenticity. Intuitively, authenticity means that an ad-
versary (including a corrupt user, Relay, or collusion thereof)
cannot convince CTC to accept a datagram that diﬀers from
the expected content obtained by crawling the speciﬁed url
at the speciﬁed time. In our formal deﬁnition, we assume
that the user and CTC behave honestly. Recall that the user
must verify upfront the attestation σatt that vouches for the
enclave’s public key pkTC.
Deﬁnition 2 (Authenticity of Data Feed). We say that
the TC protocol satisﬁes Authenticity of Data Feed if, for
any polynomial-time adversary A that can interact arbitrar-
ily with Fsgx, A cannot cause an honest veriﬁer to accept
(pkTC, σatt, params := (url, pkurl, T ), data, σ) where data is
not the contents of url with the public key pkurl at time
T (progencl.Resume(id, params) in our model). More for-
mally, for any probabilistic polynomial-time adversary A,
 (pkTC, σatt, id, params, data, σ) ← AFsgx (1λ) :
(cid:0)Σsgx.Verify(pksgx, σatt, (progencl, pkTC)) = 1(cid:1)∧
(Σ.Verify(pkTC, id, params, data) = 1)∧
data (cid:54)= progencl.Resume(id, params)
Pr
≤ negl(λ),
for security parameter λ.
Theorem 1 (Authenticity). Assume that Σsgx and Σ are
secure signature schemes. Then, the TC protocol achieves
authenticity of data feed under Deﬁnition 2.3
Fee Safety. Our protocol in Section 6 ensures that an hon-
est Town Crier will not run out of money and that an honest
requester will not pay excessive fees.
Theorem 2 (Gas Sustainability). Town Crier is $Gmax-gas
sustainable.
An honest user should only have to pay for computation
that is executed honestly on her behalf. If a valid datagram
is delivered, this is a constant value plus the cost of executing
callback. Otherwise the requester should be able to recover
the cost of executing Deliver. For Theorem 2 to hold, CTC
must retain a small fee on cancellation, but we allow the
user to recover all but this small constant amount. We now
formalize this intuition.
Theorem 3 (Fair Expenditure for Honest Requester). For
any params and callback, let $Greq and $F be the honestly-
chosen values of $greq and $f, respectively, when submitting
the request (params, callback, $f, $greq). For any such request
submitted by an honest user, one of the following holds:
• callback is invoked with a valid datagram matching the
request parameters params, and the requester spends at
most $Greq + $Gcncl + $F;
• The requester spends at most $Greq + $Gcncl + $G∅.
Other security concerns. In Section 6.2, we addressed
concerns about attacks outside the SGX isolation model em-
braced in the basic TC protocol. A threat we do not address
in TC is the risk of traﬃc analysis by a network adversary
or compromised Relay against conﬁdential applications (e.g.,
with private datagrams), although we brieﬂy discuss the is-
sue in Section 8.1. We also note that while TC assumes the
correctness of data sources, if a scraping failure occurs, TC
delivers an empty datagram, enabling relying contracts to
fail gracefully.
3Recall that we model SGX’s group signature as a regular
signature scheme under a manufacturer public key pksgx us-
ing the model in [34].
2788. EXPERIMENTS
We implemented three showcase applications which we
plan to launch together with TC. We provide a brief descrip-
tion of our applications followed by cost and performance
measurements. We refer the reader to the appendix of the
online version [39] for more details on the applications and
code samples.
8.1 Requesting Contracts
Financial Derivative (CashSettledPut). Financial deriva-
tives are among the most commonly cited smart contract
applications, and exemplify the need for a data feed on
ﬁnancial instruments. We implemented an example con-
tract CashSettledPut for a cash-settled put option. This is
an agreement for one party to buy an asset from the other
at an agreed upon price on or before a particular date. It
is “cash-settled” in that the sale is implicit, i.e., no asset
changes hands, only cash reﬂecting the asset’s value.
Flight Insurance (FlightIns). Flight insurance indemniﬁes
a purchaser should her ﬂight be delayed or canceled. We
have implemented a simple ﬂight insurance contract called
FlightIns. Our implementation showcases TC’s private-datagram
feature to address an obvious concern: customers may not
wish to reveal their travel plans publicly on the blockchain.
Roughly speaking, a customer submits to CTC a request
EncpkTC (req) encrypted under Town Crier enclave’s public
key pkTC . The enclave decrypts req and checks that it
is well-formed (e.g., submitted suﬃciently long before the
ﬂight time). The enclave will then fetch the ﬂight informa-
tion from a target website at a speciﬁed later time, and send
to CTC a datagram indicating whether the ﬂight is delayed
or canceled. Finally, to avoid leaking information through
timing (e.g., when the ﬂight information website is accessed
or datagram sent), random delays are introduced.
Steam Marketplace (SteamTrade). Authenticated data
feeds and smart contracts can enable fair exchange of dig-
ital goods between Internet users who do not have pre-
established trust. We have developed an example applica-
tion supporting fair trade of virtual items for Steam [4], an
online gaming platform that supports thousands of games
and maintains its own marketplace, where users can trade,
buy, and sell games and other virtual items. We imple-
mented a contract for the sale of games and items for Ether
that showcases TC’s support for custom datagrams through
the use of Steam’s access-controlled API. In our implemen-
tation, the seller sends EncpkTC (account credentials, req) to
CTC , such that the Enclave can log in as the seller and deter-
mine from the web-page whether the virtual item has been
shipped.
8.2 Measurements
We evaluated the performance of TC on a Dell Inspiron
13-7359 laptop with an Intel i7-6500U CPU and 8.00GB
memory, one of the few SGX-enabled systems commercially
available at the time of writing. We show that on this single
host—not even a server, but a consumer device—our imple-
mentation of TC can easily process transactions at the peak
global rate of Bitcoin, currently the most heavily loaded de-
centralized blockchain.
We report mean run times (with the standard deviation
in parenthesis) over 100 trials.
TCB Size. The trusted computing base (TCB) of Town
Crier includes the Enclave and TC Contract. The Enclave
consists of approximately 46.4k lines of C/C++ code, the
vast majority of which (42.7k lines) is the modiﬁed mbedTLS
library [9]. The source code of mbedTLS has been widely
deployed and tested, while the remainder of the Enclave
codebase is small enough to admit formal veriﬁcation. The
TC Contract is also compact; it consists of approximately
120 lines of Solidity code.
Enclave Response Time. We measured the enclave re-
sponse time for handling a TC request, deﬁned as the inter-
val between (1) the Relay sending a request to the enclave
and (2) the Relay receiving a response from the enclave.
Table 1 summarizes the total enclave response time as well
as its breakdown over 500 runs. For the three applications
we implemented, the enclave response time ranges from 180
ms to 599 ms. The response time is clearly dominated by
the web scraper time, i.e., the time it takes to fetch the re-
quested information from a website. Among the three appli-
cations evaluated, SteamTrade has the longest web scraper
time, as it interacts with the target website over multiple
roundtrips to fetch the desired datagram.
Transaction Throughput. We performed a sequence of
Linear Scaling
SteamTrade
FlightIns
CashSettledPut
60
40
20
)
c
e
s
/
x
t
(
t
u
p
h
g
u
o
r
h
T
0
0
5
10
15
20
Number of enclaves on a single machine
Figure 10: Throughput on a single SGX machine.
The x-axis is the number of concurrent enclaves and
the y-axis is the number of tx/sec. Dashed lines in-
dicate the ideal scaling for each application, and er-
ror bars, the standard deviation. We ran 20 rounds
of experiments (each round processing 1000 trans-
actions in parallel).
experiments measuring the transaction throughput while scal-
ing up the number of concurrently running enclaves on our
single SGX-enabled host from 1 to 20. 20 TC enclaves is the
maximum possible given the enclave memory constraints on
the speciﬁc machine model we used. Fig. 10 shows that, for
the three applications evaluated, a single SGX machine
can handle 15 to 65 tx/sec.
Several signiﬁcant data points show how eﬀectively TC
can serve the needs of today’s blockchains for authenticated
data: Ethereum currently handles under 1 tx/sec on av-
erage. Bitcoin today handles slightly more than 3 tx/sec,
279CashSettledPut
mean %
mean %
FlightIns
tmax
tmax
3.12
258
26.6
0.84
tmin
0.25
135
18.7
0.24
σt
0.31
18
1.52
0.08
0.6
87.2
11.2
0.2
0.24
95.4
4.0
0.08
2.94
600
25.3
0.67
tmin
0.17
418
18.9
0.20
σt
0.32
31
1.4
0.08
SteamTrade
tmax
3.25
765
24.8
0.65
tmin
0.36
489
18.8
0.24
σt
0.35
52
1.28
0.09
0.20
96.2
3.4
0.07
mean %
1.17
576
20.3
0.39
599
Ctx. switch
Web scraper
Sign
Serialization
Total
1.00
157
20.2
0.40
180
1.23
482
20.5
0.38
505
100
284
158
18
100
623
439
31
100
787
510