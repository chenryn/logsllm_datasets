### Arrows and Resource Flow
Arrows in the diagram represent the flow of money, with brown arrows specifically denoting gas limits. The thickness of the lines indicates the quantity of resources. The $gclbk arrow is thin because $gclbk is limited to $f − $Gmin.

### Confidentiality-Preserving Applications
Private datagrams under pkTC enable confidentiality-preserving applications despite the public readability of the blockchain. Custom datagrams, also supported by TC, allow a contract to specify a particular web-scraping target, potentially involving multiple interactions, thus greatly expanding the range of possible relying contracts for TC. Although we do not address these in our security proofs, examples of both datagram types are provided in Section 8.1.

### Enhanced Robustness via Replication
Our basic security model for TC assumes the ideal isolation model for SGX and client trust in data sources. Given concerns about SGX security [18,38] and the potential fallibility of data sources, we examine two important ways TC can support hedging:
- **SGX Instance Hedging:** Contracts can request datagrams from multiple SGX instances and implement majority voting among the responses. This requires increased gas expenditure for additional requests and storage of returned data.
- **Data Source Hedging:** TC can scrape multiple sources for the same data and select the majority response. Both mechanisms are demonstrated in our example financial derivative application in Section 8.2. (A potential optimization is mentioned in Section 10.)

### Implementation Details
We implemented a full version of the TC protocol in a complete, end-to-end system using Intel SGX and Ethereum. Detailed implementation and practical considerations are deferred to the appendix of the online version [39].

### Security Analysis
**Proofs of theorems in this section appear in the appendix of the online version [39].**

#### Authenticity
Intuitively, authenticity means that an adversary (including a corrupt user, Relay, or collusion thereof) cannot convince CTC to accept a datagram that differs from the expected content obtained by crawling the specified URL at the specified time. In our formal definition, we assume that the user and CTC behave honestly. Recall that the user must verify upfront the attestation σatt that vouches for the enclave’s public key pkTC.

**Definition 2 (Authenticity of Data Feed):** The TC protocol satisfies Authenticity of Data Feed if, for any polynomial-time adversary A that can interact arbitrarily with Fsgx, A cannot cause an honest verifier to accept (pkTC, σatt, params := (url, pkurl, T), data, σ) where data is not the contents of url with the public key pkurl at time T (progencl.Resume(id, params) in our model). Formally, for any probabilistic polynomial-time adversary A,
\[
\Pr\left[\Sigma_{\text{sgx}}.\text{Verify}(pk_{\text{sgx}}, \sigma_{\text{att}}, (\text{progencl}, pk_{\text{TC}})) = 1 \land \Sigma.\text{Verify}(pk_{\text{TC}}, id, params, data) = 1 \land data \neq \text{progencl}.\text{Resume}(id, params)\right] \leq \text{negl}(\lambda),
\]
for security parameter λ.

**Theorem 1 (Authenticity):** Assume that Σsgx and Σ are secure signature schemes. Then, the TC protocol achieves authenticity of data feed under Definition 2.

#### Fee Safety
Our protocol in Section 6 ensures that an honest Town Crier will not run out of money and that an honest requester will not pay excessive fees.

**Theorem 2 (Gas Sustainability):** Town Crier is $Gmax-gas sustainable.

An honest user should only have to pay for computation executed honestly on her behalf. If a valid datagram is delivered, this is a constant value plus the cost of executing the callback. Otherwise, the requester should be able to recover the cost of executing Deliver. For Theorem 2 to hold, CTC must retain a small fee on cancellation, but the user can recover all but this small constant amount. We now formalize this intuition.

**Theorem 3 (Fair Expenditure for Honest Requester):** For any params and callback, let $Greq and $F be the honestly-chosen values of $greq and $f, respectively, when submitting the request (params, callback, $f, $greq). For any such request submitted by an honest user, one of the following holds:
- **Valid Datagram:** Callback is invoked with a valid datagram matching the request parameters params, and the requester spends at most $Greq + $Gcncl + $F.
- **Invalid Datagram:** The requester spends at most $Greq + $Gcncl + $G∅.

**Other Security Concerns:**
In Section 6.2, we addressed concerns about attacks outside the SGX isolation model embraced in the basic TC protocol. A threat we do not address in TC is the risk of traffic analysis by a network adversary or compromised Relay against confidential applications (e.g., with private datagrams), although we briefly discuss the issue in Section 8.1. We also note that while TC assumes the correctness of data sources, if a scraping failure occurs, TC delivers an empty datagram, enabling relying contracts to fail gracefully.

### Experiments
We implemented three showcase applications which we plan to launch together with TC. We provide a brief description of our applications followed by cost and performance measurements. More details and code samples are available in the appendix of the online version [39].

#### Requesting Contracts
- **Financial Derivative (CashSettledPut):** Financial derivatives exemplify the need for a data feed on financial instruments. We implemented an example contract CashSettledPut for a cash-settled put option, an agreement for one party to buy an asset from the other at an agreed-upon price on or before a particular date.
- **Flight Insurance (FlightIns):** Flight insurance indemnifies a purchaser should their flight be delayed or canceled. Our implementation showcases TC’s private-datagram feature to address the concern of customers not wanting to reveal their travel plans publicly on the blockchain.
- **Steam Marketplace (SteamTrade):** Authenticated data feeds and smart contracts can enable fair exchange of digital goods between Internet users. We implemented a contract for the sale of games and items for Ether, showcasing TC’s support for custom datagrams through the use of Steam’s access-controlled API.

#### Measurements
We evaluated the performance of TC on a Dell Inspiron 13-7359 laptop with an Intel i7-6500U CPU and 8.00GB memory, one of the few SGX-enabled systems commercially available at the time of writing. Our implementation of TC can easily process transactions at the peak global rate of Bitcoin, currently the most heavily loaded decentralized blockchain.

**Mean Run Times (with standard deviation in parentheses) over 100 trials:**

- **TCB Size:** The trusted computing base (TCB) of Town Crier includes the Enclave and TC Contract. The Enclave consists of approximately 46.4k lines of C/C++ code, with 42.7k lines being the modified mbedTLS library [9]. The TC Contract consists of approximately 120 lines of Solidity code.
- **Enclave Response Time:** We measured the enclave response time for handling a TC request, defined as the interval between (1) the Relay sending a request to the enclave and (2) the Relay receiving a response from the enclave. Table 1 summarizes the total enclave response time and its breakdown over 500 runs.
- **Transaction Throughput:** We performed a sequence of experiments measuring the transaction throughput while scaling up the number of concurrently running enclaves on our single SGX-enabled host from 1 to 20. Figure 10 shows that, for the three applications evaluated, a single SGX machine can handle 15 to 65 tx/sec.

**Significant Data Points:**
- Ethereum currently handles under 1 tx/sec on average.
- Bitcoin today handles slightly more than 3 tx/sec.

**Table 1: Enclave Response Time Breakdown (in milliseconds)**
| Application | tmax | tmin | σt | Context Switch | Web Scraper | Sign | Serialization | Total |
|-------------|------|------|----|----------------|-------------|------|---------------|-------|
| CashSettledPut | 3.12 | 0.25 | 0.31 | 1.00 | 157 | 20.2 | 0.40 | 180 |
| FlightIns | 3.12 | 0.25 | 0.31 | 1.23 | 482 | 20.5 | 0.38 | 505 |
| SteamTrade | 3.25 | 0.36 | 0.35 | 1.17 | 576 | 20.3 | 0.39 | 599 |

**Figure 10: Throughput on a Single SGX Machine**
- X-axis: Number of concurrent enclaves
- Y-axis: Number of tx/sec
- Dashed lines: Ideal scaling for each application
- Error bars: Standard deviation
- 20 rounds of experiments (each round processing 1000 transactions in parallel)