-------    
 test1    
(1 row)    
```    
如果按INFO来分组的话, 取出出现频率最高的info, 实际上这个操作是没有任何意义的, 返回值就是所有记录的info的唯一值.    
```    
postgres=# select mode() within group (order by info) from test group by info;    
 mode      
-------    
 test1    
 test2    
 test3    
 test4    
(4 rows)    
```    
按id来分组, 取出组内出现频率最高的info值, 这个是有意义的.    
```    
postgres=# select mode() within group (order by info) from test group by id;    
 mode      
-------    
 test1    
 test1    
 test4    
(3 rows)    
```    
id=1 , 出现频率最高的info是test1. 出现2次.    
如下 :     
```    
postgres=# select id,info,count(*) from test group by id,info;    
 id | info  | count     
----+-------+-------    
  1 | test1 |     2    
  1 | test3 |     1    
  3 | test4 |     5    
  1 | test2 |     1    
  2 | test1 |     3    
(5 rows)    
```    
如果要返回mode()并返回频率次数. 可以使用row_number()窗口来实现. 如下.    
```    
postgres=# select id,info,cnt from (select id,info,cnt,row_number() over(partition by id order by cnt desc) as rn from (select id,info,count(*) cnt from test group by id,info) t) t where t.rn=1;    
 id | info  | cnt     
----+-------+-----    
  1 | test1 |   2    
  2 | test1 |   3    
  3 | test4 |   5    
(3 rows)    
```    
其他, mode的返回结果数据类型和order by后面的表达式一致.    
```    
postgres=# select mode() within group (order by id) from test;    
 mode     
------    
    3    
(1 row)    
postgres=# select mode() within group (order by id+1) from test;    
 mode     
------    
    4    
(1 row)    
```    
另外还有4个函数是和数据分布有关的, 需要指定从0到1的分布位置. 返回排序后, 在指定分布位置的值或表达式的值.    
```    
src/backend/utils/adt/orderedsetaggs.c    
        if (percentile  1 || isnan(percentile))    
                ereport(ERROR,    
                                (errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),    
                                 errmsg("percentile value %g is not between 0 and 1",    
                                                percentile)));    
```    
同时还需要注意区分连续分布和离散分布.    
```    
postgres=# create table test(id int, info text);    
CREATE TABLE    
postgres=# insert into test values (1,'test1');    
INSERT 0 1    
postgres=# insert into test values (2,'test2');    
INSERT 0 1    
postgres=# insert into test values (3,'test2');    
INSERT 0 1    
postgres=# insert into test values (4,'test2');    
INSERT 0 1    
postgres=# insert into test values (5,'test2');    
INSERT 0 1    
postgres=# insert into test values (6,'test2');    
INSERT 0 1    
postgres=# insert into test values (7,'test2');    
INSERT 0 1    
postgres=# insert into test values (8,'test3');    
INSERT 0 1    
postgres=# insert into test values (100,'test3');    
INSERT 0 1    
postgres=# insert into test values (1000,'test4');    
INSERT 0 1    
postgres=# select * from test;    
  id  | info      
------+-------    
    1 | test1    
    2 | test2    
    3 | test2    
    4 | test2    
    5 | test2    
    6 | test2    
    7 | test2    
    8 | test3    
  100 | test3    
 1000 | test4    
(10 rows)    
```    
取连续分布的中位数可以用percentile_cont(0.5)来获得.    
```    
postgres=# select percentile_cont(0.5) within group (order by id) from test;    
 percentile_cont     
-----------------    
             5.5    
(1 row)    
```    
这个5.5是怎么计算来的呢? 参考本文末尾 :     
```    
  If (CRN = FRN = RN) then the result is    
    (value of expression from row at RN)    
  Otherwise the result is    
    (CRN - RN) * (value of expression for row at FRN) +    
    (RN - FRN) * (value of expression for row at CRN)    
```    
解释 :     
N = 当前分组的行数 = 10    
RN = (1+传入参数*(N-1)) = (1+0.5*(10-1)) = 5.5    
CRN = ceiling(RN) = 6    
FRN = floor(RN) = 5    
value of expression for row at FRN : 当前分组内第FRN行的值 = 5    
value of expression for row at CRN : 当前分组内第CRN行的值 = 6    
所以最终中位数值 :     
```    
    (CRN - RN) * (value of expression for row at FRN) +    
    (RN - FRN) * (value of expression for row at CRN) =     
(6-5.5)*(5) + (5.5 - 5)*(6) = 5.5;    
```    
使用info分组 :     
```    
postgres=# select percentile_cont(0.5) within group (order by id),info from test group by info;    
 percentile_cont | info      
-----------------+-------    
               1 | test1    
             4.5 | test2    
              54 | test3    
            1000 | test4    
(4 rows)    
```    
验证这个值  4.5 | test2 :     
```    
    2 | test2    
    3 | test2    
    4 | test2    
    5 | test2    
    6 | test2    
    7 | test2    
```    
N = 当前分组的行数 = 6    
RN = (1+传入参数*(N-1)) = (1+0.5*(6-1)) = 3.5    
CRN = ceiling(RN) = 4    
FRN = floor(RN) = 3    
value of expression for row at FRN : 当前分组内第FRN行的值 = 4    
value of expression for row at CRN : 当前分组内第CRN行的值 = 5    
所以最终中位数值 :     
```    
    (CRN - RN) * (value of expression for row at FRN) +    
    (RN - FRN) * (value of expression for row at CRN) =     
(4-3.5)*(4) + (3.5 - 3)*(5) = 4.5;    
```    
当输入参数为数组时, 返回值也是数组, 如下 :     
```    
postgres=# select percentile_cont(array[0.5, 1]) within group (order by id) from test;    
 percentile_cont     
-----------------    
 {5.5,1000}    
(1 row)    
```    
接下来看一下稀疏分布 :     
返回行号大于等于指定百分比的值或表达式值.    
例如 :     
```    
postgres=# select id from test;    
  id      
------    
    1    
    2    
    3    
    4    
    5    
    6    
    7    
    8    
  100    
 1000    
(10 rows)    
```    
当前组一共10行, 取位置在0.5的.即行号>=0.5*10的第一行的值或表达式的值.    
```    
postgres=# select percentile_disc(0.5) within group (order by id) from test;    
 percentile_disc     
-----------------    
               5    
(1 row)    
postgres=# select percentile_disc(0.5) within group (order by id^2) from test;    
 percentile_disc     
-----------------    
              25    
(1 row)    
```    
输入0.11, 表示行号返回>=1.1的第一行的值.    
```    
postgres=# select percentile_disc(0.11) within group (order by id) from test;    
 percentile_disc     
-----------------    
               2    
(1 row)    
```    
再看个例子    
```    
postgres=# select id,info,count(*) over (partition by info) from test;    
  id  | info  | count     
------+-------+-------    
    1 | test1 |     1    
    2 | test2 |     6    
    3 | test2 |     6    
    4 | test2 |     6    
    5 | test2 |     6    
    6 | test2 |     6    
    7 | test2 |     6    
    8 | test3 |     2    
  100 | test3 |     2    
 1000 | test4 |     1    
(10 rows)    
```    
取分组的数据, 主要看test2 这个组一共有6行, 0.3*6=1.8, 所以它需要取第二行的数据.    
```    
postgres=# select info,percentile_disc(0.3) within group (order by id) from test group by info;    
 info  | percentile_disc     
-------+-----------------    
 test1 |               1    
 test2 |               3    
 test3 |               8    
 test4 |            1000    
(4 rows)    
```    
注意    
最终计算的是表达式的分布数, 而不是计算列值的分布数后再计算表达式.    
验证如下 :     
或者你可以看代码 :     
```    
postgres=# select percentile_cont(0.5) within group (order by id^2),info from test group by info;    
 percentile_cont | info      
-----------------+-------    
               1 | test1    
            20.5 | test2    
            5032 | test3    
         1000000 | test4    
(4 rows)    
postgres=# select percentile_cont(0.5) within group (order by id),info from test group by info;    
 percentile_cont | info      
-----------------+-------    
               1 | test1    
             4.5 | test2    
              54 | test3    
            1000 | test4    
(4 rows)    
postgres=# select 4.5^2;    
      ?column?           
---------------------    
 20.2500000000000000    
(1 row)    
postgres=# select 54^2;    
 ?column?     
----------    
     2916    
(1 row)    
```    
#### Hypothetical-Set聚合函数  
函数 | 返回类型 | 描述    
---|---|---     
rank()| bigint| rank of the current row with gaps; same as row_number of its first peer    
dense_rank()|   bigint| rank of the current row without gaps; this function counts peer groups    
percent_rank()| double precision|       relative rank of the current row: (rank - 1) / (total rows - 1)    
cume_dist()|    double precision|       relative rank of the current row: (number of rows preceding or peer with current row) / (total rows)    
the four ranking functions are defined so that they give the same answer for any two peer rows.    
rank 返回值在分组内的等级, 如果值有重复的话, 跳级处理.    
dense_rank 返回值在分组内的等级, 如果值有重复的话, 不跳级处理.    
percent_rank 返回 (rank - 1) / (total rows - 1), rank指当前rank值, rows指当前组的记录数    
cume_dist 返回(number of rows preceding or peer with current row) / (total rows), 即截至当前记录等级一共有多少行除以本组的总行数.    
看一个例子比较明白.    
```    
postgres=# select *,row_number() over(partition by info order by id),rank() over(partition by info order by id),dense_rank() over(partition by info order by id),percent_rank() over(partition by info order by id),cume_dist() over(partition by info order by id) from test;    
  id  | info  | row_number | rank | dense_rank | percent_rank |     cume_dist         
------+-------+------------+------+------------+--------------+-------------------    
    1 | test1 |          1 |    1 |          1 |            0 |                 1    
    2 | test2 |          1 |    1 |          1 |            0 | 0.444444444444444    
    2 | test2 |          2 |    1 |          1 |            0 | 0.444444444444444    