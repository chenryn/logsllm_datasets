注：本文是一篇翻译文章，原文链接：  
由于文章比较长，译者将其分为三部分，第一步分解释基础的知识点和背景；第二部讲解利用过程，第三部分结论及其他内容。
## 介绍
这个博客文章介绍了针对 SpiderMonkey JavaScript Shell 解释器和 Windows 10 RS5 64 位 Mozilla
Firefox 的三个漏洞的开发，从一个从未编写过浏览器漏洞利用的人的角度来写，也没有密切关注任何 JavaScript 引擎代码库。  
您可能已经注意到，在过去的一两年里，人们对利用浏览器产生了很大的兴趣。每个主要的 CTF
竞赛至少有一次浏览器挑战，每个月至少有一次或两次涉及浏览器利用。这就是为什么我认为我应该从内部分析一下 JavaScript
引擎的内容，然后写一个其中的利用。我选择了 Firefox 的 SpiderMonkey JavaScript 引擎和由
[itszn13](https://twitter.com/itszn13 "itszn13") 出的挑战题
[Blazefox](https://ctftime.org/task/6000 "Blazefox")。  
在这篇文章中，我介绍了我的发现和我在此挑战中编写的三个利用。最初，挑战是针对 Linux x64 环境，但我决定在 Windows x64
上利用它。现在你知道为什么有 3
种不同的利用了吗？三个不同的利用允许我一步一步地实现，而不是同时面对所有复杂的情况。这通常是我日常工作的方式，我只是做了一些小工作，慢慢迭代然后建立起来。  
以下是我如何组织这些事情的方法：
  * 第一件事，我写了一个名为 [sm.js](https://github.com/0vercl0k/windbg-scripts/tree/master/sm "sm.js") 的 WinDbg JavaScript 扩展，它让我可以看到 SpiderMonkey 中的一堆东西。熟悉对象在内存中组织的各种方式也是一种很好的练习。这不是必要操作，但在编写漏洞时它一定非常有用。
  * 第一个利用部分：basic.js，针对 JavaScript 解释器 js.exe 的一个非常具体的构建。它里面写满了硬编码的偏移，并且没有办法到我的系统以外的其他地方使用这个特定版本的 js.exe 。
  * 第二个利用部分，kaizen.js，是对 basic.js 的改进版。 它仍然以 JavaScript 解释器本身为目标，但这一次，它能动态地解决了一大堆东西。 它还使用 baseline JIT 让它生成 ROP gadgets。
  * 第三个利用部分，ifrit.js，最后用一点额外的操作定位Firefox浏览器。我们就不仅是利用 baseline 来生成一个或两个 ROP gadgets，而是将 JIT 编写到一个完整的 payload 中。不需要 ROP 链，直接扫描以查找 Windows API 地址或创建可写和可执行的内存区域。我们只需要将执行的 payload 放到 JIT 代码的位置。对于了解 SpiderMonkey 并且已经写过浏览器利用的人来说，这可能是一个不那么枯燥，且有趣的部分。 
在开始之前，对于那些不想阅读整个文章的人：我已经创建了一个[blazefox
GitHub](https://github.com/0vercl0k/blazefox "blazefox GitHub")存储库，您可以克隆所有材料。
在存储库中，还可以找到：
  * sm.js 这是上面提到的调试器扩展
  * 3个利用部分的源码
  * JavaScript shell 的64位调试版本，js-asserts 中的私有符号信息，以及 js-release 中的发布版本
  * 用来在脚本中构建你自己 payload 技术的脚本
  * 用于构建 js-release 的源代码，以便您可以在 [src/js](https://github.com/0vercl0k/blazefox/tree/master/src/js "src/js") 中的 WinDbg 中进行源代码级调试
  * 一个 64 位版本的 Firefox 二进制文件以及 [ff-bin.7z.001 ](https://github.com/0vercl0k/blazefox/blob/master/ff-bin.7z.001 "ff-bin.7z.001 ")和 [ff-bin.7z.002](https://github.com/0vercl0k/blazefox/blob/master/ff-bin.7z.002 "ff-bin.7z.002") 中 xul.dll 符号信息  
好，让我们开始吧。
## Setting it up 设置它
当然，必须设置一个调试环境。 我建议为此创建一个虚拟机，因为您将不得不安装一些您可能不想在您的个人计算机上安装的东西。  
首先，我们先拿到源码。Mozilla 使用 mercurial 进行开发，但它们也维护一个只读的 GIT
镜像。我建议只是克隆这个存储库，这样更快（存储库大约~420MB）：
    >git clone --depth 1 https://github.com/mozilla/gecko-dev.git
    Cloning into 'gecko-dev'...
    remote: Enumerating objects: 264314, done.
    remote: Counting objects: 100% (264314/264314), done.
    remote: Compressing objects: 100% (211568/211568), done.
    remote: Total 264314 (delta 79982), reused 140844 (delta 44268), pack-reused 0 receiving objects: 100% (264314/26431
    Receiving objects: 100% (264314/264314), 418.27 MiB | 981.00 KiB/s, done.
    Resolving deltas: 100% (79982/79982), done.
    Checking out files: 100% (261054/261054), done.
现在，我们只对创建 JavaScript Shell 的解释器感兴趣，这只是 SpiderMonkey 树的一部分。js.exe 是一个可以运行
JavaScript 代码的简单命令行程序。 编译速度要快得多，但更重要的是它更容易攻击和推理。我们已经准备好放弃代码，所以让我们首先关注一些细微的东西。  
在编译之前，抓取
[blaze.patch](https://github.com/0vercl0k/blazefox/blob/master/blaze.patch
"blaze.patch") 文件（暂时不需要理解）：
    diff -r ee6283795f41 js/src/builtin/Array.cpp
    --- a/js/src/builtin/Array.cpp  Sat Apr 07 00:55:15 2018 +0300
    +++ b/js/src/builtin/Array.cpp  Sun Apr 08 00:01:23 2018 +0000
    @@ -192,6 +192,20 @@
         return ToLength(cx, value, lengthp);
     }
    +static MOZ_ALWAYS_INLINE bool
    +BlazeSetLengthProperty(JSContext* cx, HandleObject obj, uint64_t length)
    +{
    +    if (obj->is()) {
    +        obj->as().setLengthInt32(length);
    +        obj->as().setCapacityInt32(length);
    +        obj->as().setInitializedLengthInt32(length);
    +        return true;
    +    }
    +    return false;
    +}
    +
    +
    +
     /*
      * Determine if the id represents an array index.
      *
    @@ -1578,6 +1592,23 @@
         return DenseElementResult::Success;
     }
    +bool js::array_blaze(JSContext* cx, unsigned argc, Value* vp)
    +{
    +    CallArgs args = CallArgsFromVp(argc, vp);
    +    RootedObject obj(cx, ToObject(cx, args.thisv()));
    +    if (!obj)
    +        return false;
    +
    +    if (!BlazeSetLengthProperty(cx, obj, 420))
    +        return false;
    +
    +    //uint64_t l = obj.as().setLength(cx, 420);
    +
    +    args.rval().setObject(*obj);
    +    return true;
    +}
    +
    +
     // ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce
     // 22.1.3.21 Array.prototype.reverse ( )
     bool
    @@ -3511,6 +3542,8 @@
         JS_FN("unshift",            array_unshift,      1,0),
         JS_FNINFO("splice",         array_splice,       &array_splice_info, 2,0),
    +    JS_FN("blaze",            array_blaze,      0,0),
    +
         /* Pythonic sequence methods. */
         JS_SELF_HOSTED_FN("concat",      "ArrayConcat",      1,0),
         JS_INLINABLE_FN("slice",    array_slice,        2,0, ArraySlice),
    diff -r ee6283795f41 js/src/builtin/Array.h
    --- a/js/src/builtin/Array.h    Sat Apr 07 00:55:15 2018 +0300
    +++ b/js/src/builtin/Array.h    Sun Apr 08 00:01:23 2018 +0000
    @@ -166,6 +166,9 @@
     array_reverse(JSContext* cx, unsigned argc, js::Value* vp);
     extern bool
    +array_blaze(JSContext* cx, unsigned argc, js::Value* vp);
    +
    +extern bool
     array_splice(JSContext* cx, unsigned argc, js::Value* vp);
     extern const JSJitInfo array_splice_info;
    diff -r ee6283795f41 js/src/vm/ArrayObject.h
    --- a/js/src/vm/ArrayObject.h   Sat Apr 07 00:55:15 2018 +0300
    +++ b/js/src/vm/ArrayObject.h   Sun Apr 08 00:01:23 2018 +0000
    @@ -60,6 +60,14 @@
             getElementsHeader()->length = length;
         }
    +    void setCapacityInt32(uint32_t length) {
    +        getElementsHeader()->capacity = length;
    +    }
    +
    +    void setInitializedLengthInt32(uint32_t length) {
    +        getElementsHeader()->initializedLength = length;
    +    }
    +
         // Make an array object with the specified initial state.
         static inline ArrayObject*
         createArray(JSContext* cx,
应用如下所示的补丁，只需仔细检查它是否已正确应用（不应该出现任何冲突）：
    >cd gecko-dev\js
    gecko-dev\js>git apply c:\work\codes\blazefox\blaze.patch
    gecko-dev\js>git diff
    diff --git a/js/src/builtin/Array.cpp b/js/src/builtin/Array.cpp
    index 1655adbf58..e2ee96dd5e 100644
    --- a/js/src/builtin/Array.cpp
    +++ b/js/src/builtin/Array.cpp
    @@ -202,6 +202,20 @@ GetLengthProperty(JSContext* cx, HandleObject obj, uint64_t* lengthp)
         return ToLength(cx, value, lengthp);
     }
    +static MOZ_ALWAYS_INLINE bool
    +BlazeSetLengthProperty(JSContext* cx, HandleObject obj, uint64_t length)
    +{
    +    if (obj->is()) {
    +        obj->as().setLengthInt32(length);
    +        obj->as().setCapacityInt32(length);
    +        obj->as().setInitializedLengthInt32(length);
    +        return true;
    +    }
    +    return false;
    +}
此时，您可以安装 [Mozilla-Build](https://wiki.mozilla.org/MozillaBuild "Mozilla-Build")，它是一个元安装程序，为您提供在 Mozilla 上进行开发所需的所有工具（工具链，各种脚本等）。在撰写本文时，最新的可用版本是版本
3.2，可在此处获得：[MozillaBuildSetup-3.2.exe](https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-3.2.exe
"MozillaBuildSetup-3.2.exe")
安装完成后，通过运行start-shell.bat批处理文件启动Mozilla shell。 转到js \
src文件夹中克隆的位置，然后键入以下内容以配置js.exe的x64调试版本：
    over@compiler /d/gecko-dev/js/src$ autoconf-2.13
    over@compiler /d/gecko-dev/js/src$ mkdir build.asserts
    over@compiler /d/gecko-dev/js/src$ cd build.asserts
    over@compiler /d/gecko-dev/js/src/build.asserts$ ../configure --host=x86_64-pc-mingw32 --target=x86_64-pc-mingw32 --enable-debug
用 mozmake 开始编译
    over@compiler /d/gecko-dev/js/src/build.asserts$ mozmake -j2
然后，你应该能够在一个目录中输入 ./js/src/js.exe,./mozglue/build/mozglue.dll 和
./config/external/nspr/pr/nspr4.dll 并且这里：
    over@compiler ~/mozilla-central/js/src/build.asserts/js/src
    $ js.exe --version
    JavaScript-C64.0a1
对于优化的构建，您可以通过这种方式调用 configure:
    over@compiler /d/gecko-dev/js/src/build.opt$ ../configure --host=x86_64-pc-mingw32 --target=x86_64-pc-mingw32 --disable-debug --enable-optimize
## SpiderMonkey
### 背景
SpiderMonkey 是 Mozilla 的 JavaScript 引擎的名称，它的源代码可以通过 [gecko-dev](https://github.com/mozilla/gecko-dev "gecko-dev") 存储库（在 js 目录下）在 Github
上获得。SpiderMonkey 在 Firefox 使用，更确切地说是由 Web 引擎 Gecko
使用。如果您喜欢它，您甚至可以将解释器嵌入到您自己的第三方应用程序中。 该项目相当大，这里有一些我粗略统计的数据：
  * ~3k 个类
  * ~576k 行代码
  * ~1.2k 个文件
  * ~48k 个函数  
正如您在下面的树形图视图中看到的那样（越大，线越多;蓝色越深，圈复杂度越高）js 引擎基本上分为六大部分：JIT编译器引擎名为 Baseline 和
[IonMonkey](https://wiki.mozilla.org/IonMonkey "IonMonkey")在 Jit 目录中，front-end
在 frontend 目录中，JavaScript virtual-machine 在 VM 目录中，一大堆内置函数在 builtin
目录中，垃圾回收器（garbage collector）在 gc 目录中，还有 WebAssembly 在 wasm 目录中。  
我现在看到的大部分内容都存在于vm，builtin和gc文件夹中。对我们来说另一件好事是，还有大量关于SpiderMoneky内部，和设计相关的公共文档等。  
以下是我发现有趣的一些链接（有些链接可能已过时，但此时我们只是挖掘我们可以找到的所有公开信息）如果您希望在进一步开发之前获得更多背景知识：
  * [SpiderMonkeys](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey "SpiderMonkeys")
  * [SpiderMonkey Internals](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals "SpiderMonkey Internals")