“GET /specials/saw-blade.gif HTTP/1.0”中，方法就是GET。
HTTP规范中定义了一组常用的请求方法。比如，GET方法负责从服务器获取一个
文档，POST方法会向服务器发送需要处理的数据，OPTIONS方法用于确定Web
服务器的一般功能，或者Web服务器处理特定资源的能力。
表3-1描述了7种这样的方法。注意，有些方法的请求报文中有主体，有些则是无
主体的请求。
表3-1 常用的HTTP方法
方 法 描 述 是否包含主体
GET 从服务器获取一份文档 否
HEAD 只从服务器获取文档的首部 否
POST 向服务器发送需要处理的数据 是
PUT 将请求的主体部分存储在服务器上 是
TRACE 对可能经过代理服务器传送到服务器上去的报文进行追踪 否
OPTIONS 决定可以在服务器上执行哪些方法 否
DELETE 从服务器上删除一份文档 否 48
并不是所有服务器都实现了表3-1列出的所有7种方法。而且，由于HTTP设计得
易于扩展，所以除了这些方法之外，其他服务器可能还会实现一些自己的请求方法。
这些附加的方法是对HTTP规范的扩展，因此被称为扩展方法。
4. 状态码
方法是用来告诉服务器做什么事情的，状态码则用来告诉客户端，发生了什么事情。
HTTP报文 ｜ 51
状态码位于响应的起始行中。比如，在行HTTP/1.0 200 OK中，状态码就是200。
客户端向一个HTTP服务器发送请求报文时，会发生很多事情。幸运的话，请求会
成功完成。但你不会总是那么幸运的。服务器可能会告诉你无法找到所请求的资源，
你没有访问资源的权限，或者资源被移到了其他地方。
状态码是在每条响应报文的起始行中返回的。会返回一个数字状态和一个可读的状
态。数字码便于程序进行差错处理，而原因短语则更便于人们理解。
可以通过三位数字代码对不同状态码进行分类。200到299之间的状态码表示成功。
300到399之间的代码表示资源已经被移走了。400到499之间的代码表示客户端
的请求出错了。500到599之间的代码表示服务器出错了。
表3-2列出了状态码的分类。
表3-2 状态码分类
整体范围 已定义范围 分 类
100～199 100～101 信息提示
200～299 200～206 成功
300～399 300～305 重定向
400～499 400～415 客户端错误
500～599 500～505 服务器错误
当前的HTTP版本只为每类状态定义了几个代码。随着协议的发展，HTTP规范中
会正式地定义更多的状态码。如果收到了不认识的状态码，可能是有人将其作为当
前协议的扩展定义的。可以根据其所处范围，将它作为那个类别中一个普通的成员
来处理。
比如，如果收到了状态码515（在表3-2所列5XX代码的已定义范围之外），就应该
49 认为这条响应指出了服务器的错误，这是5XX报文的通用类别。
表3-3列出了部分最常见的状态码。本章稍后会详细解释当前在用的所有HTTP状
态码。
表3-3 常见状态码
状 态 码 原因短语 含 义
200 OK 成功。请求的所有数据都在响应主体中
401 Unauthorized（未授权） 需要输入用户名和密码
404 Not Found（未找到） 服务器无法找到所请求URL对应的资源
52 ｜ 第3章
5. 原因短语
原因短语是响应起始行中的最后一个组件。它为状态码提供了文本形式的解释。比
如，在行HTTP/1.0 200 OK中，OK就是原因短语。
原因短语和状态码是成对出现的。原因短语是状态码的可读版本，应用程序开发者
将其传送给用户，用以说明在请求期间发生了什么情况。
HTTP规范并没有提供任何硬性规定，要求原因短语以何种形式出现。本章稍后列
出了状态码和一些建议使用的原因短语。
6. 版本号
版本号会以HTTP/x.y的形式出现在请求和响应报文的起始行中。为HTTP应用程序
提供了一种将自己所遵循的协议版本告知对方的方式。
使用版本号的目的是为使用HTTP的应用程序提供一种线索，以便互相了解对方的
能力和报文格式。在与使用HTTP 1.1的应用程序进行通信的HTTP 1.2应用程序应
该知道，它不能使用任何新的1.2特性，因为使用老版本协议的应用程序很可能无
法实现这些特性。
版本号说明了应用程序支持的最高HTTP版本。但HTTP/1.0应用程序在解释包含
HTTP/1.1的响应时，会认为这个响应是个1.1响应，而实际上这只是响应应用程序
所使用的协议等级，在这些情况下，版本号会在应用程序之间造成误解2。
注意，版本号不会被当作小数来处理。版本中的每个数字（比如HTTP/1.0中的1
和0）都会被当作一个单独的数字来处理。因此，在比较HTTP版本时，每个数字 50
都必须单独进行比较，以便确定哪个版本更高。比如，HTTP/2.22就比HTTP/2.3的
版本要高，因为22比3大。
3.2.3 首部
前一小节的重点是请求和响应报文的第一行（方法、状态码、原因短语和版本号）。
跟在起始行后面的就是零个、一个或多个HTTP首部字段（参见图3-5）。
HTTP首部字段向请求和响应报文中添加了一些附加信息。本质上来说，它们只是一
些名/值对的列表。比如，下面的首部行会向Content-Length首部字段赋值19：
Content-length：19
注2： http://httpd.apache.org/docs-2.0/misc/known_client_problems.html上有更多在Apache与客户端之间出现
此问题的案例。
HTTP报文 ｜ 53
1. 首部分类
HTTP规范定义了几种首部字段。应用程序也可以随意发明自己所用的首部。HTTP
首部可以分为以下几类。
• 通用首部
既可以出现在请求报文中，也可以出现在响应报文中。
• 请求首部
提供更多有关请求的信息。
• 响应首部
提供更多有关响应的信息。
• 实体首部
描述主体的长度和内容，或者资源自身。
• 扩展首部
规范中没有定义的新首部。
每个HTTP首部都有一种简单的语法：名字后面跟着冒号（：），然后跟上可选的空
格，再跟上字段值，最后是一个CRLF。表3-4列出了一些常见的首部实例。
表3-4 常见的首部实例
首部实例 描 述
Date:Tue,3Oct 1997 02:16:03 GMT 服务器产生响应的日期
Content-length:15040 实体的主体部分包含了15 040字节的数据
Content-type:image/gif 实体的主体部分是一个GIF图片
Accept: image/gif, image/jpeg, text/html 客户端可以接收GIF图片和JPEG图片以及HTML
2. 首部延续行
将长的首部行分为多行可以提高可读性，多出来的每行前面至少要有一个空格或制
51 表符（tab）。
例如：
HTTP/1.0 200 OK
Content-Type: image/gif
Content-Length: 8572
54 ｜ 第3章
Server: Test Server
Version 1.0
在这个例子中，响应报文里包含了一个Server首部，其值被划分成了多个延续行。
该首部的完整值为Test Server Version 1.0。
本章稍后将简要介绍所有的HTTP首部。附录C提供了所有首部更为详细的参考。
3.2.4 实体的主体部分
HTTP报文的第三部分是可选的实体主体部分。实体的主体是HTTP报文的负荷。
就是HTTP要传输的内容。
HTTP报文可以承载很多类型的数字数据：图片、视频、HTML文档、软件应用程
序、信用卡事务、电子邮件等。
3.2.5 版本0.9的报文
HTTP版本0.9是HTTP协议的早期版本。是当今HTTP所拥有的请求及响应报文
的鼻祖，但其协议要简单得多（参见图3-6）。
GET /specials/saw-blade.gif
没有版本号
客户端 www.joes-hardware.com
客户端 www.joes-hardware.com
图3-6 HTTP/0.9事务
HTTP/0.9报文也由请求和响应组成，但请求中只包含方法和请求URL，响应中只
包含实体。它没有版本信息（它是第一个，而且是当时唯一的版本），没有状态码或
原因短语，也没有首部。 52
HTTP报文 ｜ 55
但这种简单协议无法提供更多的灵活性，也无法实现本书中描述的大部分HTTP特
性和应用。这里对其进行简要的描述，是因为仍然有一些客户端、服务器和其他应
用程序在使用这个协议，应用程序的编写者应该清楚它的局限性。
3.3 方法
现在，我们对前面在表3-1中列出的一些基本HTTP方法进行更为深入的讨论。注
意，并不是每个服务器都实现了所有的方法。如果一台服务器要与HTTP 1.1兼容，
那么只要为其资源实现GET方法和HEAD方法就可以了。
即使服务器实现了所有这些方法，这些方法的使用很可能也是受限的。例如，支持
DELETE方法或PUT方法（本节稍后介绍）的服务器可能并不希望任何人都能够删
除或存储资源。这些限制通常都是在服务器的配置中进行设置的，因此会随着站点
和服务器的不同而有所不同。
3.3.1 安全方法
HTTP定义了一组被称为安全方法的方法。GET方法和HEAD方法都被认为是安全
的，这就意味着使用GET或HEAD方法的HTTP请求都不会产生什么动作。
不产生动作，在这里意味着HTTP请求不会在服务器上产生什么结果。例如，你在
Joe的五金商店购物时，点击了“提交购买”按钮。点击按钮时会提交一个带有信
用卡信息的POST请求（稍后讨论），那么在服务器上，就会为你执行一个动作。在
这种情况下，为购买行为支付信用卡就是所执行的动作。
安全方法并不一定是什么动作都不执行的（实际上，这是由Web开发者决定的）。
使用安全方法的目的就是当使用可能引发某一动作的不安全方法时，允许HTTP应
用程序开发者通知用户。在Joe的五金商店的例子中，你的Web浏览器可能会弹出
一条警告消息，说明你正在用不安全的方法发起请求，这样可能会在服务器上引发
一些事件（比如用你的信用卡支付费用）。
3.3.2 GET
GET是最常用的方法。通常用于请求服务器发送某个资源。HTTP/1.1要求服务器
实现此方法。图3-7显示了一个例子，在这个例子中，客户端用GET方法发起了一
53 次HTTP请求。
56 ｜ 第3章
请求报文
GET /seasonal/index-fall.html HTTP/1.1
Host: www.joes-hardware.com
Accept: *
响应报文
HTTP/1.1 200 OK
Content-Type: text/html
Context-Length: 617
客户端 www.joes-hardware.com
JoeÕs Special Offers 
...
图3-7 GET示例
3.3.3 HEAD
HEAD方法与GET方法的行为很类似，但服务器在响应中只返回首部。不会返回实
体的主体部分。这就允许客户端在未获取实际资源的情况下，对资源的首部进行检
查。使用HEAD，可以：
• 在不获取资源的情况下了解资源的情况（比如，判断其类型）；
• 通过查看响应中的状态码，看看某个对象是否存在；
• 通过查看首部，测试资源是否被修改了。
服务器开发者必须确保返回的首部与 GET 请求所返回的首部完全相同。遵循
HTTP/1.1规范，就必须实现HEAD方法。图3-8显示了实际的HEAD方法。
请求报文
HEAD /seasonal/index-fall.html HTTP/1.1
Host: www.joes-hardware.com
Accept: *
响应报文
HTTP/1.1 200 OK
Content-Type: text/html
客户端 Context-Length: 617 www.joes-hardware.com
没有实体的主体部分
图3-8 HEAD示例
3.3.4 PUT
与GET从服务器读取文档相反，PUT方法会向服务器写入文档。有些发布系统允
许用户创建Web页面，并用PUT直接将其安装到Web服务器上去（参见图3-9）。 54
HTTP报文 ｜ 57
请求报文
PUT /product-list.txt HTTP/1.1
Host: www.joes-hardware.com
Content-type: text/plain
Content-length: 34
Updated product list coming soon!
Joe 响应报文 www.joes-hardware.com 服务器更新/创建