### Performance Evaluation

We evaluated the performance of our system using a variety of benchmarks, including both I/O-intensive and CPU-intensive applications. We measured the performance of these applications on Hadoop and in isolation to eliminate the overhead-masking effects of disk I/O, network transfers, and Hadoop task spawning. Before presenting the results, we provide a brief description of each application.

#### Applications Overview

| Application  | LLOC | Input Size | Map Tasks |
|-------------|------|------------|-----------|
| WordCount   | 224  | 41 GB      | 665       |
| Pi          | 241  | 94 GB      | 1530      |
| Revenue     | 6098 | 1.4 MB     | 96        |
| KeySearch   | 103  | 10 GB      | 162       |
| UserUsage   | 88   | 8.8 MB     | 16        |
| IoVolumes   | 96   | 70 GB      | 256       |
| Options     | 125  | 1.4 MB     | 96        |

**Table 1: Applications used to evaluate VC3.**

- **UserUsage and IoVolumes:** Real-world applications that process resource usage information from a large compute/storage platform consisting of tens of thousands of servers. UserUsage counts the total process execution time per user, while IoVolumes is a join operation that filters out failed tasks and computes storage I/O statistics for successful tasks.
- **Options:** Simulates the price of European call options using Monte Carlo methods. The large LLOC count (see Table 1) is due to the inclusion of optimized mathematical functions.
- **WordCount:** Counts the occurrences of words in the input.
- **Pi:** A benchmark that statistically estimates the value of Pi.
- **Revenue:** Reads a synthetic log file of users visiting websites and accumulates the total ad revenue per IP.
- **KeySearch:** Conducts a known plaintext attack on a 16-byte message encrypted with RC4.

All experiments were conducted on workstations running Microsoft Windows Server 2012 R2 64-Bit, equipped with a 2.9 GHz Intel Core i5-4570 (Haswell) processor, 8 GB of RAM, and a 250 GB Samsung 840 Evo SSD. We used a cluster of 8 workstations connected via a Netgear GS108 1Gbps switch. All code was compiled with the Microsoft C++ compiler version 18.00.30501 for x64, optimizing for speed.

#### Experiment Configurations

We compiled our 7 applications in four configurations:

- **Baseline:** Runs the applications on plaintext data without following the job execution protocol. No performance penalty for enclave transitions (TLB flush, delay cycles, and stack swapping) is applied, and unnecessary data copying across non-existent enclave boundaries is avoided.
- **VC3:** Runs the same application on VC3 with encrypted mapper and reducer inputs and outputs. The sizes of the E− DLL range from 12 KB for KeySearch to 42 KB for Options (see Table 1); the generic E+ DLL has a size of 210 KB. The enclave memory size was set to 512 MB, and the cost of an enclave transition (including interrupts) was one TLB flush and 1,000 delay cycles. This version provides the base security guarantees of VC3.
- **VC3-W:** Uses the same configuration as VC3 but compiles applications to further guarantee region-write-integrity.
- **VC3-WR:** Uses the same configuration as VC3 but compiles applications to further guarantee region-read-write-integrity.

### Performance on Hadoop

We measured the execution times of the baseline and VC3 configurations in an unmodified Hadoop environment using the Hortonworks distribution of Hadoop 2 (HDP 2.1) for Windows with 8 worker nodes (one per workstation). We used the default configuration options for resource management and configured our jobs to use 8 reduce tasks, except for Pi, Options, and KeySearch, which conceptually use 1. Each job and configuration was run at least 10 times, and the execution time was measured. To facilitate comparisons, we normalized the running times with the average running time for each job using the baseline configuration.

**Figure 5** shows that VC3’s performance is similar to the baseline, with differences in performance well below the experimental variability for all jobs. The overhead of VC3 with its base security guarantees is negligible. When introducing write and read-write integrity checks, the performance overhead increases by an average of 4.5% and 8%, respectively. These increased overheads are a small price for the extra security guarantees. We believe these results demonstrate that VC3 can be used in practice to provide general-purpose secure cloud computation with good performance.

### Performance in Isolation

To better understand the performance impact of VC3 on individual map and reduce tasks, we ran the mappers and reducers in isolation, i.e., on a single machine without Hadoop. We repeated each experiment 10 times and normalized the results using the average of the baseline run. **Figure 6** plots the average ratios for the map tasks, along with the values of two standard deviations below and above the average. (The results for reduce tasks are similar and are omitted for brevity.)

On average, VC3’s overhead was 4.3% compared to the baseline, VC3-W’s was 15.3%, and VC3-WR’s was 24.5%. The overheads were negligible for the three compute-intensive jobs (KeySearch, Options, and Pi), as these jobs spend little time in copying and encryption/decryption operations and most of the time computing using plain-text data off the processor’s caches. For these jobs, the compiler effectively elided checks on safe memory accesses, making the overheads of VC3-W and VC3-WR also negligible.

The IoVolumes and UserUsage jobs were slower than the baseline in all configurations. The IoVolumes (UserUsage) job was 23.1% (6.1%), 41.4% (23.6%), and 63.4% (55.3%) slower in the VC3, VC3-W, and VC3-WR configurations, respectively. The overheads are higher in these cases because these applications are I/O-intensive, and the relative cost of encryption is higher. Revenue and WordCount are also I/O-intensive, but they implement a combine operation, which increases the computation performed at the mapper, thus reducing the relative cost of encryption. The combine operation performs a group-by of the key-value pairs generated by the map function and calls a combine function that performs a partial reduction at the mapper. This optimization reduces network traffic. Therefore, there is little performance difference between the baseline and VC3 for Revenue and WordCount. The write (read-write) integrity checks increased their running times by 18% (26%) and 22% (27%), respectively. The performance differences between VC3 and VC3-W/VC3-WR are due to the region self-integrity checks, which vary according to the compiler's ability to check if memory accesses are safe at compile-time.

### Effectiveness of Region Self-Integrity

We conducted fault-injection experiments to verify the effectiveness of the region self-integrity invariants. We wrote a tool that injects three types of faults in the source code of applications: writes to a random address outside the enclave, reads from a random address outside the enclave, and pointer dereferences that corrupt a return address inside the enclave. For each type of fault, we conducted 10 experiments per application. In all cases, the region self-integrity checks caught the invalid access and stopped the application.

### Related Work

Applications of SGX were first discussed in [27]. Haven [9] is a recently proposed SGX-based system for executing Windows applications in the cloud. Haven loads a given application together with a library OS variant of Windows 8 into an enclave. Haven makes a different trade-off between security and compatibility: it can run unmodified Windows binaries, but its TCB is larger than VC3’s by several orders of magnitude. Unlike VC3, Haven neither guarantees integrity for distributed computations nor provides our region self-integrity properties. Brenner et al. presented an approach to run Apache ZooKeeper in enclaves [14].

Several systems protect the confidentiality of data in the cloud. Fully homomorphic encryption and multiparty computation [21], [22] can achieve data confidentiality but are not efficient enough for general-purpose computation. CryptDB [50] and MrCrypt [61] use partial homomorphic encryption to run some computations on encrypted data; they neither protect the confidentiality of code nor guarantee data integrity or completeness of results. TrustedDB [7], Cipherbase [6], and Monomi [64] use different forms of trusted hardware to process database queries over encrypted data but do not protect the confidentiality and integrity of all code and data. Monomi splits the computation between a trusted client and an untrusted server and uses partial homomorphic encryption at the server. Mylar [51] is a platform for building Web applications that supports searches over encrypted data.

Several systems combine hardware-based isolation [37], [46], [59] with trusted system software [17], [28], [36], [38], [54], [58], [69], which is typically a trusted hypervisor. The Flicker [39] approach uses TXT [31] and avoids using a trusted hypervisor by time-partitioning the host machine between trusted and untrusted operation. Virtual Ghost [18] avoids using a trusted hypervisor and specialized hardware-based isolation mechanisms by instrumenting the kernel.

Some systems allow the user to verify the result of a computation without protecting the confidentiality of the data or the code [48]. Pantry [13] can be used to verify the integrity of MapReduce jobs implemented in a subset of C. Pantry incurs a high overhead. Hawblitzel et al. presented the concept of formally verified Ironclad Apps [26] running on partially trusted hardware. They report runtime overheads of up to two orders of magnitude.

Several security-enhanced MapReduce systems have been proposed. Airavat [52] defends against possibly malicious map function implementations using differential privacy. SecureMR [67] is an integrity enhancement for MapReduce that relies on redundant computations. Ko et al. published a hybrid security model for MapReduce where sensitive data is handled in a private cloud while non-sensitive processing is outsourced to a public cloud provider [33]. PRISM [12] is a privacy-preserving word search scheme for MapReduce that utilizes private information retrieval methods.

### Conclusions

We presented VC3, a novel approach for the verifiable and confidential execution of MapReduce jobs in untrusted cloud environments. Our approach provides strong security guarantees while relying on a small TCB rooted in hardware. We show that our approach is practical with an implementation that works transparently with Hadoop on Windows and achieves good performance. We believe that VC3 demonstrates that practical general-purpose secure cloud computation is achievable.

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity: Principles, Implementations, and Applications. In ACM Conference on Computer and Communications Security (CCS), 2005.
[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing Memory Error Exploits with WIT. In IEEE Symposium on Security and Privacy, 2008.
[3] I. Anati, S. Gueron, S. Johnson, and V. Scarlata. Innovative Technology for CPU Based Attestation and Sealing. In Workshop on Hardware and Architectural Support for Security and Privacy (HASP), 2013.
[4] Apache Software Foundation. Hadoop. http://wiki.apache.org/hadoop/, Accessed: 11/05/2014.
[5] Apache Software Foundation. HadoopStreaming. http://hadoop.apache.org/docs/r1.2.1/streaming.html, Accessed: 11/05/2014.
[6] A. Arasu, S. Blanas, K. Eguro, R. Kaushik, D. Kossmann, R. Ramamurthy, and R. Venkatesan. Orthogonal Security with Cipherbase. In Conference on Innovative Data Systems Research (CIDR), 2013.
[7] S. Bajaj and R. Sion. TrustedDB: A Trusted Hardware-Based Database with Privacy and Data Confidentiality. In IEEE Transactions on Knowledge and Data Engineering, volume 26, 2014.
[8] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the Art of Virtualization. In ACM Symposium on Operating Systems Principles (SOSP), 2003.
[9] A. Baumann, M. Peinado, and G. Hunt. Shielding Applications from an Untrusted Cloud with Haven. In USENIX Security Symposium, 2014.