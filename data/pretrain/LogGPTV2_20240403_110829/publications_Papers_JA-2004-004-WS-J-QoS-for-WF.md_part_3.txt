### Correspondence to QoS Functions

The initialization of task QoS metrics and the stochastic information indicating the probability of transitions being fired at runtime provide the necessary data for QoS computation in workflows. This section will delve into the QoS computation process.

### 6. Workflow QoS Computation

Once QoS estimates for tasks and transitions are determined, we can compute the overall workflow QoS. We describe a mathematical modeling technique that can be used to compute QoS metrics for a given workflow process.

#### 6.1 Mathematical Modeling

To compute QoS metrics for workflows based on task QoS metrics, we have developed the Stochastic Workflow Reduction (SWR) algorithm (Cardoso 2002). The SWR algorithm repeatedly applies a set of reduction rules to a workflow until only one atomic task remains (Kochut, Sheth et al. 1999). Each time a reduction rule is applied, the workflow structure changes. After several iterations, only one task will remain. When this state is reached, the remaining task contains the QoS metrics corresponding to the workflow under analysis.

Graph reduction rules have been successfully used to verify the correctness of workflows. Sadiq and Orlowska (1999) present an algorithm that employs a set of graph reduction rules to identify structural conflicts in workflows. The algorithm starts by removing all correct structures from the workflow graph iteratively. This reduction process eventually reduces a structurally correct workflow to an empty graph. If the workflow is not completely reduced, then structural conflicts exist.

In our approach, the set of reduction rules that can be applied to a given workflow corresponds to the set of inverse operations that can be used to construct a workflow. We have decided to only allow the construction of workflows based on a set of predefined construction systems, which protects users from designing invalid workflows. Invalid workflows contain design errors such as non-termination, deadlocks, and instance splitting (Aalst 1999).

Additional reduction rules can be developed, but we have chosen to present the reduction concept with six reduction rules for three reasons:
1. A vast majority of workflow systems support the implementation of these reduction rules (Aalst, Barros et al. 2000).
2. The reduction rules are simple, making it easy to understand the workflow reduction process.
3. These rules are supported by the METEOR workflow management system and form a basic set of rules that should be supported by any modern workflow system.

The algorithm uses a set of six distinct reduction rules: (1) sequential, (2) parallel, (3) conditional, (4) fault-tolerant, (5) loop, and (6) network.

##### Reduction of a Sequential System

Figure 3 illustrates how two sequential workflow tasks \( t_i \) and \( t_j \) can be reduced to a single task \( t_{ij} \). In this reduction, the incoming transitions of \( t_i \) and the outgoing transition of \( t_j \) are transferred to \( t_{ij} \).

This reduction can only be applied if the following two conditions are satisfied: 
- \( t_i \) is not a xor/and split.
- \( t_j \) is not a xor/and join.

These conditions prevent this reduction from being applied to parallel, conditional, and loop systems. To compute the QoS of the reduction, the following formulae are applied:
\[
T(t_{ij}) = T(t_i) + T(t_j)
\]
\[
C(t_{ij}) = C(t_i) + C(t_j)
\]
\[
R(t_{ij}) = R(t_i) * R(t_j)
\]

##### Reduction of a Parallel System

Figure 4 illustrates how a system of parallel tasks \( t_1, t_2, \ldots, t_n \), an and split task \( t_a \), and an and join task \( t_b \) can be reduced to a sequence of three tasks \( t_a, t_{1n}, t_b \). In this reduction, the incoming transitions of \( t_a \) and the outgoing transitions of \( t_b \) remain the same. The only outgoing transitions from \( t_a \) and the only incoming transitions from \( t_b \) are the ones shown in the figure below.

The QoS of tasks \( t_a \) and \( t_b \) remain unchanged. To compute the QoS of the reduction, the following formulae are applied:
\[
T(t_{1n}) = \max \{ T(t_i) \}_{i=1}^{n}
\]
\[
C(t_{1n}) = \sum_{i=1}^{n} C(t_i)
\]
\[
R(t_{1n}) = \prod_{i=1}^{n} R(t_i)
\]

##### Reduction of a Conditional System

Figure 5 illustrates how a system of conditional tasks \( t_1, t_2, \ldots, t_n \), a xor split (task \( t_a \)), and a xor join (task \( t_b \)) can be reduced to a sequence of three tasks \( t_a, t_{1n}, t_b \). Task \( t_a \) and task \( t_b \) do not have any other outgoing or incoming transitions, respectively, other than the ones shown in the figure. In this reduction, the incoming transitions of \( t_a \) and the outgoing transitions of \( t_b \) remain the same.

The QoS of tasks \( t_a \) and \( t_b \) remain unchanged. To compute the QoS of the reduction, the following formulae are applied:
\[
T(t_{1n}) = \sum_{i=1}^{n} p_{ai} * T(t_i)
\]
\[
C(t_{1n}) = \sum_{i=1}^{n} p_{ai} * C(t_i)
\]
\[
R(t_{1n}) = \sum_{i=1}^{n} p_{ai} * R(t_i)
\]

##### Reduction of a Loop System

Loop systems can be characterized by simple and dual loop systems. Figure 6 illustrates how a simple loop system can be reduced. A simple loop system in task \( t_i \) can be reduced to a task \( t_{li} \). In this reduction, \( p_i + \sum_{k=1}^{n} p_{ok} = 1 \).

Once the reduction is applied, the probabilities of the outgoing transitions of task \( t_{li} \) are changed to \( p_{lk} = \frac{p_{ok}}{1 - p_i} \), and \( \sum_{k=1}^{n} p_{lk} = 1 \). Since the loop is removed, we need to update the remaining outgoing transitions. Therefore, the probability of each outgoing transition needs to be divided by the probability of the loop not being followed (i.e., \( 1 - p_i \)).

To compute the QoS of the reduction, the following formulae are applied:
\[
T(t_{li}) = \frac{T(t_i)}{1 - p_i}
\]
\[
C(t_{li}) = \frac{C(t_i)}{1 - p_i}
\]
\[
R(t_{li}) = \frac{(1 - p_i) * R(t_i)}{1 - p_i * R(t_i)}
\]

Figure 7 illustrates how a dual loop system can be reduced. A dual loop system composed of two tasks \( t_i \) and \( t_j \) can be reduced to a single task \( t_{ij} \). In this reduction, \( p + \sum_{k=1}^{n} p_{ok} = 1 \). Once the reduction is applied, the probabilities of the outgoing transitions of task \( t_{ij} \) are changed to \( p_{lk} = \frac{p_{ok}}{1 - p_j} \), and \( \sum_{k=1}^{n} p_{lk} = 1 \).

To compute the QoS of the reduction, the following formulae are applied:
\[
T(t_{ij}) = \frac{T(t_i) + T(t_j) - (1 - p_j) * T(t_j)}{1 - p_j}
\]
\[
C(t_{ij}) = \frac{C(t_i) + C(t_j) - (1 - p_j) * C(t_j)}{1 - p_j}
\]
\[
R(t_{ij}) = \frac{(1 - p_j) * R(t_i)}{1 - p_j * R(t_i) * R(t_j)}
\]

##### Reduction of a Fault-Tolerant System

Figure 8 illustrates how a fault-tolerant system with tasks \( t_1, t_2, \ldots, t_n \), an and split (task \( t_a \)), and a xor join (task \( t_b \)) can be reduced to a sequence of three tasks \( t_a, t_{1n}, t_b \). The execution of a fault-tolerant system starts with the execution of task \( t_a \) and ends with the completion of task \( t_b \). Task \( t_b \) will be executed only if \( k \) tasks from the set \( \{t_1, t_2, \ldots, t_n\} \) are executed successfully.

In this reduction, the incoming transitions of \( t_a \) and the outgoing transitions of \( t_b \) remain the same. The idea of this reduction system is to allow several tasks \( \{t_1, t_2, \ldots, t_n\} \) to be executed in parallel, carrying out the same function but in a different way, until \( k \) tasks have completed their execution. For example, in genomics, several algorithms can be used to query genome databases given an initial probe. Let us assume that tasks \( t_1, t_2, \ldots, t_5 \) are executed in parallel, and each task executes a distinct algorithm. Using a fault-tolerant system, we can specify that the parallel execution of the tasks continues until two of them complete their execution. In this scenario, we consider that the answers of the first two queries to complete are sufficient for the process to continue.

The QoS of tasks \( t_a \) and \( t_b \) remain unchanged. To compute the QoS of the reduction, the following formulae are applied:

The function \( \text{Min}(s) \) selects the set of the \( k \) smallest numbers from the set \( s \), and the function \( g(x) \) is defined as follows:
\[
g(x) = 
\begin{cases} 
0, & \text{if } x < 0 \\
1, & \text{if } x \geq 0 
\end{cases}
\]

\[
T(t_{1n}) = \text{Min}(\{T(t_1), \ldots, T(t_n)\})
\]
\[
C(t_{1n}) = \sum_{i=1}^{n} C(t_i)
\]
\[
R(t_{1n}) = \sum_{j=1}^{n} \sum_{i_1=0}^{1} \cdots \sum_{i_n=0}^{1} g\left(\sum_{l=1}^{n} i_l - k\right) \cdot \left((1 - i_1) + (2i_1 - 1)R(t_1)\right) \cdots \left((1 - i_n) + (2i_n - 1)R(t_n)\right)
\]

The formula \( R(t_{1n}) \) is utilized to compute reliability and corresponds to the sum of all probabilistic states for which at least \( k \) tasks execute successfully. A fault-tolerant system with \( n \) tasks can generate \( 2^n \) distinct probabilistic states (the power set). The function \( R(t_{1n}) \) adds all the probabilistic states that lead to the successful execution of the fault-tolerant system (i.e., at least \( k \) tasks execute successfully).

In the formula \( R(t_{1n}) \), the summation over \( i_1, \ldots, i_n \) generates all possible probabilistic states. Each probabilistic state is represented with a binary sequence \( (i_1, \ldots, i_n) \).