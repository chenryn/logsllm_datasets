---
title: Pytest cases
date: 20201010
author: Lyz
---
[pytest-cases](https://smarie.github.io/python-pytest-cases/) is a pytest plugin
that allows you to *separate your test cases from your test functions*.
In addition, `pytest-cases` provides [several useful
goodies](https://smarie.github.io/python-pytest-cases/pytest_goodies/) to
empower `pytest`. In particular it improves the fixture mechanism to support
"fixture unions". This is a major change in the internal `pytest` engine,
unlocking many possibilities such as using fixture references as parameter
values in a test function.
# [Installing](https://smarie.github.io/python-pytest-cases/#installing)
```bash
pip install pytest_cases
```
!!! note ""
    Installing pytest-cases has effects on the order of `pytest` tests execution,
    even if you do not use its features. One positive side effect is that it fixed
    [pytest#5054](https://github.com/pytest-dev/pytest/issues/5054). But if you see
    less desirable ordering please [report
    it](https://github.com/smarie/python-pytest-cases/issues).
# [Why `pytest-cases`?](https://smarie.github.io/python-pytest-cases/#why-pytest-cases)
Let's consider the following `foo` function under test, located in `example.py`:
```python
def foo(a, b):
    return a + 1, b + 1
```
If we were using plain `pytest` to test it with various inputs, we would create
a `test_foo.py` file and use `@pytest.mark.parametrize`:
```python
import pytest
from example import foo
@pytest.mark.parametrize("a,b", [(1, 2), (-1, -2)])
def test_foo(a, b):
    # check that foo runs correctly and that the result is a tuple.
    assert isinstance(foo(a, b), tuple)
```
This is the fastest and most compact thing to do when you have a few number of
test cases, that do not require code to generate each test case.
Now imagine that instead of `(1, 2)` and `(-1, -2)` each of our test cases:
* Requires a few lines of code to be generated.
* Requires documentation to explain the other developers the intent of that
    precise test case.
* Requires external resources (data files on the filesystem, databases...),
    with a variable number of cases depending on what is available on the
    resource.
* Requires a readable `id`, such as
    `'uniformly_sampled_nonsorted_with_holes'` for the above example. Of course
    we *could* use
    [`pytest.param`](https://docs.pytest.org/en/stable/example/parametrize.html#set-marks-or-test-id-for-individual-parametrized-test)
    or
    [`ids=`](https://docs.pytest.org/en/stable/example/parametrize.html#different-options-for-test-ids)
    but that is "a pain to maintain" according to `pytest` doc. Such a design
    does not feel right as the id is detached from the case.
With standard `pytest` there is no particular pattern to simplify your life
here. Investigating a little bit, people usually end up trying to mix parameters
and fixtures and asking this kind of question:
[so1](https://stackoverflow.com/questions/50231627/python-pytest-unpack-fixture),
[so2](https://stackoverflow.com/questions/50482416/use-pytest-lazy-fixture-list-values-as-parameters-in-another-fixture).
But by design it is not possible to solve this problem using fixtures, because
`pytest` [does not handle "unions" of
fixtures](https://smarie.github.io/python-pytest-cases/unions_theory/).
There is also an example in `pytest` doc [with a `metafunc`
hook](https://docs.pytest.org/en/stable/example/parametrize.html#a-quick-port-of-testscenarios).
The issue with such workarounds is that you can do *anything*. And *anything* is
a bit too much: this does not provide any convention / "good practice" on how to
organize test cases, which is an open door to developing ad-hoc unreadable or
unmaintainable solutions.
`pytest_cases` was created to provide an answer to this precise situation. It
proposes a simple framework to separate test cases from test functions. The test
cases are typically located in a separate "companion" file:
* `test_foo.py` is your usual test file containing the test *functions* (named
    `test_`).
* `test_foo_cases.py` contains the test *cases*, that are also functions. Note: an
    alternate file naming style `cases_foo.py` is also available if you prefer
    it.
# [Basic usage](https://smarie.github.io/python-pytest-cases/#basic-usage)
## [Case functions](https://smarie.github.io/python-pytest-cases/#a-case-functions)
Let's create a `test_foo_cases.py` file. This file will contain *test cases
generator functions*, that we will call *case functions* for brevity. In these
functions, you will typically either parse some test data files, generate some
simulated test data, expected results, etc.
!!! note "File: test_foo_cases.py"
    ```python
    def case_two_positive_ints():
        """ Inputs are two positive integers """
        return 1, 2
    def case_two_negative_ints():
        """ Inputs are two negative integers """
        return -1, -2
    ```
Case functions can return anything that is considered useful to run the
associated test. You can use all classic pytest mechanism on case functions (id
customization, skip/fail marks, parametrization or fixtures injection).
## [Test functions](https://smarie.github.io/python-pytest-cases/#b-test-functions)
As usual we write our `pytest` test functions starting with `test_`, in
a `test_foo.py` file. The only difference is that we now decorate it with
`@parametrize_with_cases` instead of `@pytest.mark.parametrize` as we were doing
previously:
!!! note "File: test_foo.py"
    ```python
    from example import foo
    from pytest_cases import parametrize_with_cases
    @parametrize_with_cases("a,b")
    def test_foo(a, b):
        # check that foo runs correctly and that the result is a tuple.
        assert isinstance(foo(a, b), tuple)
    ```
Executing `pytest` will now run our test function once for every case function:
```bash
>>> pytest -s -v
============================= test session starts =============================
(...)
/tests/test_foo.py::test_foo[two_positive_ints] PASSED [ 50%]
/tests/test_foo.py::test_foo[two_negative_ints] PASSED [ 100%]
========================== 2 passed in 0.24 seconds ==========================
```
# Usage
## [Cases collection](https://smarie.github.io/python-pytest-cases/#a-cases-collection)
### [Alternate source(s)](https://smarie.github.io/python-pytest-cases/#alternate-sources)
It is not mandatory that case functions should be in a different file than the
test functions: both can be in the same file. For this you can use `cases='.'`
or `cases=THIS_MODULE` to refer to the module in which the test function is
located:
```python
from pytest_cases import parametrize_with_cases
def case_one_positive_int():
    return 1
def case_one_negative_int():
    return -1
@parametrize_with_cases("i", cases='.')
def test_with_this_module(i):
    assert i == int(i)
```
!!! warning ""
    Only the case functions defined BEFORE the test function in the module file
    will be taken into account.
`@parametrize_with_cases(cases=...)` also accepts explicit list of case
functions, classes containing case functions, and modules. See [API
Reference](https://smarie.github.io/python-pytest-cases/api_reference/#parametrize_with_cases)
for details. A typical way to organize cases is to use classes for example:
```python
from pytest_cases import parametrize_with_cases
class Foo:
    def case_a_positive_int(self):
        return 1
    def case_another_positive_int(self):
        return 2
@parametrize_with_cases("a", cases=Foo)
def test_foo(a):
    assert a > 0
```
Note that as for `pytest`, `self` is recreated for every test and therefore
should not be used to store any useful information.
### [Alternate prefix](https://smarie.github.io/python-pytest-cases/#alternate-prefix)
`case_` might not be your preferred prefix, especially if you wish to store in
the same module or class various kind of case data.  `@parametrize_with_cases`
offers a `prefix=...` argument to select an alternate prefix for your case
functions. That way, you can store in the same module or class case
functions as diverse as datasets (e.g. `data_`), user descriptions (e.g.
`user_`), algorithms or machine learning models (e.g. `model_` or `algo_`), etc.
```python
from pytest_cases import parametrize_with_cases, parametrize
def data_a():
    return 'a'
@parametrize("hello", [True, False])
def data_b(hello):
    return "hello" if hello else "world"
def case_c():
    return dict(name="hi i'm not used")
def user_bob():
    return "bob"
@parametrize_with_cases("data", cases='.', prefix="data_")
@parametrize_with_cases("user", cases='.', prefix="user_")
def test_with_data(data, user):
    assert data in ('a', "hello", "world")
    assert user == 'bob'
```
Yields
```
test_doc_filters_n_tags.py::test_with_data[bob-a]       PASSED [ 33%]
test_doc_filters_n_tags.py::test_with_data[bob-b-True]   PASSED [ 66%]
test_doc_filters_n_tags.py::test_with_data[bob-b-False]   PASSED [ 100%]
```
### [Filters and tags](https://smarie.github.io/python-pytest-cases/#filters-and-tags)
The easiest way to select only a subset of case functions in a module or
a class, is to specify a custom `prefix` instead of the default one (`'case_'`).
However sometimes more advanced filtering is required. In that case, you can
also rely on three additional mechanisms provided in `@parametrize_with_cases`:
* The `glob` argument can contain a glob-like pattern for case ids. This can
    become handy to separate for example good or bad cases, the latter returning
    an expected error type and/or message for use with `pytest.raises` or with
    our alternative
    [`assert_exception`](https://smarie.github.io/python-pytest-cases/pytest_goodies/#assert_exception).
    ```python
    from math import sqrt
    import pytest
    from pytest_cases import parametrize_with_cases
    def case_int_success():
        return 1
    def case_negative_int_failure():
        # note that we decide to return the expected type of failure to check it
        return -1, ValueError, "math domain error"
    @parametrize_with_cases("data", cases='.', glob="*success")
    def test_good_datasets(data):
        assert sqrt(data) > 0
    @parametrize_with_cases("data, err_type, err_msg", cases='.', glob="*failure")
    def test_bad_datasets(data, err_type, err_msg):
        with pytest.raises(err_type, match=err_msg):
            sqrt(data)
    ```
* The `has_tag` argument allows you to filter cases based on tags set on case
    functions using the `@case` decorator. See API reference of
    [`@case`](https://smarie.github.io/python-pytest-cases/api_reference/#case) and
    [`@parametrize_with_cases`](https://smarie.github.io/python-pytest-cases/api_reference/#parametrize_with_cases).
    ```python
    from pytest_cases import parametrize_with_cases, case
    class FooCases:
        def case_two_positive_ints(self):
            return 1, 2
        @case(tags='foo')
        def case_one_positive_int(self):
            return 1