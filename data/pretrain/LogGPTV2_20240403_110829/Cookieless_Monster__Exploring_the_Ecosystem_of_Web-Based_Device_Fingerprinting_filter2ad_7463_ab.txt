Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
Listing 1 Side-channel inference of the presence or absence
of a font
function get_text_dimensions(font){
Font Family String
Sans
Arial
Calibri
font_detection
font_detection
font_detection
Width x Height
519x84
452x83
416x83
h = document.getElementsByTagName("BODY")[0];
d = document.createElement("DIV");
s = document.createElement("SPAN");
Figure 1. The same string, rendered with different fonts, and its effects on
the string’s width and height, as reported by the Google Chrome browser
d.appendChild(s);
d.style.fontFamily = font;
s.style.fontFamily = font;
s.style.fontSize = "72px";
s.innerHTML = "font_detection";
h.appendChild(d);
textWidth = s.offsetWidth;
textHeight = s.offsetHeight;
h.removeChild(d);
return [textWidth, textHeight];
}
C. Detection of fonts
The system’s list of fonts can serve as part of a user’s
unique ﬁngerprint [12]. While a browser does not directly
provide that list, one can acquire it using either a browser
plugin that willingly provides this information or using a
side-channel that indirectly reveals the presence or absence
of any given font.
1) Plugin-based detection: ActionScript,
the scripting
language of Flash, provides APIs that include methods for
discovering the list of fonts installed on a running system.
While this traditionally was meant to be used as a way
of ensuring the correct appearance of text by the plugin,
it can also be used to ﬁngerprint the system. Two out of the
three studied companies were utilizing Flash as a way of
discovering which fonts were installed on a user’s computer.
Interestingly, only one of the companies was preserving the
order of the font-list, which points, most likely, to the fact
that the other is unaware that the order of fonts is stable
and machine-speciﬁc (and can thus be used as an extra
ﬁngerprinting feature).
2) Side-channel inference: The JavaScript code of one
of the three ﬁngerprinting companies included a fall-back
method for font-detection, in the cases where the Flash
plugin was unavailable. By analyzing that method, we dis-
covered that they were using a technique, similar to the CSS
history stealing technique [22], to identify the presence or
absence of any given font - see Listing 1.
More precisely, the code ﬁrst creates a  element.
Inside this element, the code then creates a  el-
ement with a predetermined text string and size, using
a provided font family. Using the offsetWidth and
544
offsetHeight methods of HTML elements, the script
discovers the layout width and height of the element. This
code is ﬁrst called with a “sans” parameter, the font typically
used by browsers as a fall-back, when another requested font
is unavailable on a user’s system. Once the height and text
for “sans” are discovered, another script goes over a pre-
deﬁned list of fonts, calling the get_text_dimensions
function for each one. For any given font, if the current
width or height values are different from the ones obtained
through the original “sans” measurement, this means that
the font does exist and was used to render the predeﬁned
text. The text and its size are always kept constant, so that
if its width or height change, this change will only be due
to the different font. Figure 1 shows three renderings of the
same text, with the same font-size but different font faces in
Google Chrome. In order to capitalize as much as possible
on small differences between fonts, the font-size is always
large, so that even the smallest of details in each individual
letter will add up to measurable total difference in the text’s
height and width. If the height and width are identical to the
original measurement, this means that the requested font did
not exist on the current system and thus, the browser has
selected the sans fall-back font. All of the above process,
happens in an invisible iframe created and controlled by the
ﬁngerprinting script and thus completely hidden from the
user.
Using this method, a ﬁngerprinting script can rapidly
discover, even for a long list of fonts, those that are present
on the operating system. The downside of this approach is
that less popular fonts may not be detected, and that the
font-order is no longer a ﬁngerprintable feature.
D. Detection of HTTP Proxies
One of the features that are the hardest to spoof for a client
is its IP address. Given the nature of the TCP protocol, a
host cannot pretend to be listening at an IP address from
which it cannot reliably send and receive packets. Thus,
to hide a user’s IP address, another networked machine (a
proxy) is typically employed that relays packets between the
user that wishes to remain hidden and a third-party. In the
context of browsers, the most common type of proxies are
HTTP proxies, through which users conﬁgure their browsers
to send all requests. In addition to manual conﬁguration,
browser plugins are also available that allow for a more
controlled use of remote proxies, such as the automatic
routing of different requests to different proxies based on
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
Fingerprinting 
server 
token 
 Proxy 
Server 
 http://www.example.com 
token 
token 
  JS 
SWF 
Figure 2. Fingerprinting libraries take advantage of Flash’s ability to ignore
browser-deﬁned HTTP proxies to detect the real IP address of a user
pattern matching of each request4, or the cycling of proxies
from a proxy list at user-deﬁned intervals5.
From the point of view of device identiﬁcation through
ﬁngerprinting, a speciﬁc IP address is an important feature.
Assuming the use of ﬁngerprinting for the detection of
fraudulent activities, the distinction between a user who is
situated in a speciﬁc country and one that pretends to be
situated in that country, is crucial. Thus, it is in the interest
of the ﬁngerprint provider to detect a user’s real IP address
or, at least, discover that the user is utilizing a proxy server.
When analyzing the ActionScript code embedded in the
SWF ﬁles of two of the three ﬁngerprinting companies,
we found evidence that the code was circumventing the
user-set proxies at the level of the browser, i.e., the loaded
Flash application was contacting a remote host directly,
disregarding any browser-set HTTP proxies. We veriﬁed this
behavior by employing both an HTTP proxy and a packet-
capturing application, and noticing that certain requests
were captured by the latter but were never received by the
former. In the code of both of the ﬁngerprinting companies,
certain long alphanumerical tokens were exchanged between
JavaScript and Flash and then used in their communication
to the server. While we do not have access to the server-
side code of the ﬁngerprinting providers, we assume that
the identiﬁers are used to correlate two possibly different IP
addresses. In essence, as shown in Figure 2, if a JavaScript-
originating request contains the same token as a Flash-
originating request from a different source IP address, the
server can be certain that the user is utilizing an HTTP proxy.
Flash’s ability to circumvent HTTP proxies is a somewhat
known issue among privacy-conscious users that has lead to
the disabling of Flash in anonymity-providing applications,
like TorButton [23]. Our analysis shows that it is actively
exploited to identify and bypass web proxies.
4FoxyProxy - http://getfoxyproxy.org/
5ProxySwitcher - http://www.proxyswitcher.com/
E. System-ﬁngerprinting plugins
Previous research on ﬁngerprinting a user’s browser fo-
cused on the use of popular browser plugins, such as Flash
and Java, and utilized as much of their API surface as
possible to obtain user-speciﬁc data [11], [12]. However,
while analyzing the plugin-detection code of the studied
ﬁngerprinting providers, we noticed that
two out of the
three were searching a user’s browser for the presence of
a special plugin, which, if detected, would be loaded and
then invoked. We were able to identify that the plugins
were essentially native ﬁngerprinting libraries, which are
distributed as CAB ﬁles for Internet Explorer and eventually
load as DLLs inside the browser. These plugins can reach
a user’s system, either by a user accepting their installation
through an ActiveX dialogue, or bundled with applications
that users download on their machines. DLLs are triggered
by JavaScript through ActiveX, but they run natively on the
user’s machine, and thus can gather as much information as
the Internet Explorer process.
We downloaded both plugins, wrapped each DLL into an
executable that simply hands-off control to the main routine
in the DLL and submitted both executables to Anubis [24], a
dynamic malware analysis platform that executes submitted
binaries in a controlled environment. We focused on the
Windows registry values that were read by the plugin, since
the registry is a rich environment for ﬁngerprinting. The
submitted ﬁngerprinting DLLs were reading a plethora of
system-speciﬁc values, such as the hard disk’s identiﬁer,
TCP/IP parameters, the computer’s name, Internet Explorer’s
product
the
Windows Digital Product Id and the installed system drivers
– entries marked with SFP in Table I.
the installation date of Windows,
identiﬁer,
All of these values combined provide a much stronger
ﬁngerprint than what JavaScript or Flash could ever con-
struct. It is also worthwhile mentioning that one of the two
plugins was misleadingly identifying itself as “Reputation-
Shield” when asking the user whether she wants to accept
its installation. Moreover, none of 44 antivirus engines of
VirusTotal [25] identiﬁed the two DLLs as malicious, even
though they clearly belong to the spyware category. Using
identiﬁers found within one DLL, we were also able to locate
a Patent Application for Iovation’s ﬁngerprinting plugin that
provides further information on the ﬁngerprinting process
and the gathered data [26].
F. Fingerprint Delivery Mechanism
In the ﬁngerprinting experiments of Mayer [11] and
Eckersley [12], there was a 1-to-1 relationship between the
page conducting the ﬁngerprinting and the backend storing
the results. For commercial ﬁngerprinting, however, there is
a N-to-1 relationship, since each company provides ﬁnger-
printing services to many websites (through the inclusion of
third-party scripts) and needs to obtain user ﬁngerprints from
each of these sites. Thus, the way that the ﬁngerprint and
545
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 
the information about it are delivered is inherently different
from the two aforementioned experiments.
the ﬁngerprint
Through our code analysis, we found two different sce-
narios of ﬁngerprinting. In the ﬁrst scenario,
the ﬁrst-
party site was not involved in the ﬁngerprinting process.
The ﬁngerprinting code was delivered by an advertising
syndicator, and the resulting ﬁngerprint was sent back to the
ﬁngerprinting company. This was most likely done to combat
click-fraud, and it is unclear whether the ﬁrst-party site is
even aware of the fact that its users are being ﬁngerprinted.
In the second scenario, where the ﬁrst-party website is
the one requesting the ﬁngerprint, we saw that two out of
the three companies were adding the ﬁnal ﬁngerprint of the
user into the DOM of the hosting page. For instance, www.
imvu.com is using BlueCava for device ﬁngerprinting
by including remote scripts hosted on BlueCava’s servers.
When BlueCava’s scripts combine all features into a single
ﬁngerprint,
is DES-encrypted (DES keys
generated on the ﬂy and then encrypted with a public key),
concatenated with the encrypted keys and ﬁnally converted
to Base64 encoding. The resulting string is added into the
DOM of www.imvu.com; more precisely, as a new hidden
input element in IMVU’s login form. In this way, when the
user submits her username and password, the ﬁngerprint is
also sent to IMVU’s web servers. Note, however, that IMVU
cannot decrypt the ﬁngerprint and must thus submit it back
to BlueCava, which will then reply with a “trustworthiness”
score and other device information. This architecture allows
BlueCava to hide the implementation details from its clients
and to correlate user proﬁles across its entire client-base.
Iovation’s ﬁngerprinting scripts operate in a similar manner.
Constrastingly, ThreatMetrix delivers information about
users in a different way. The including site, i.e., a customer
of ThreatMetrix, creates a session identiﬁer that it places
into a  element with a predeﬁned identiﬁer. Threat-
Metrix’s scripts, upon loading, read this session identiﬁer
and append it
to all requests towards the ThreatMetrix
servers. This means that the including site never gets access
to a user’s ﬁngerprint, but only information about the user
by querying ThreatMetrix for speciﬁc session identiﬁers.
G. Analysis Limitations
In the previous sections we analyzed the workings of the
ﬁngerprinting libraries of three popular commercial compa-
nies. The analysis was a mostly manual, time-consuming
process, where each piece of code was gradually deobfus-
cated until the purpose of all functions was clear. Given the
time required to fully reverse-engineer each library, we had
to limit ourselves to analyze the script of each ﬁngerprinting
company as it was seen through two different sites (that is,
two different clients of each company). However, we cannot
exclude the possibility of additional scripts that are present
on the companies’ web servers that would perform more
operations than the ones we encountered.
III. ADOPTION OF FINGERPRINTING
In Section II, we analyzed the workings of three com-
mercial ﬁngerprinting companies and focused on the differ-
ences of their implementations when compared to Panop-
ticlick [12]. In this section, we study the ﬁngerprinting
ecosystem, from the point of view of websites that leverage
ﬁngerprinting.
A. Adoption on the popular web
To quantify the use of web-based ﬁngerprinting on pop-
ular websites, we crawled up to 20 pages for each of the
Alexa top 10,000 sites, searching for script inclusions and
iframes originating from the domains that the three studied
companies utilize to serve their ﬁngerprinting code. To cate-
gorize the discovered domains, we made use of the publicly-
available domain categorization service of TrendMicro 6, a
popular anti-virus vendor.
Through this process, we discovered 40 sites (0.4% of
the Alexa top 10,000) utilizing ﬁngerprinting code from
the three commercial providers. The most popular site
making use of ﬁngerprinting is skype.com, while the two
most popular categories of sites are: “Pornography” (15%)
and “Personals/Dating” (12.5%). For pornographic sites, a
reasonable explanation is that ﬁngerprinting is used to detect
shared or stolen credentials of paying members, while for
dating sites to ensure that attackers do not create multiple
proﬁles for social-engineering purposes. Our ﬁndings show
that ﬁngerprinting is already part of some of the most
popular sites of the Internet, and thus the hundreds of
thousands of their visitors are ﬁngerprinted on a daily basis.
Note that the aforementioned adoption numbers are lower
bounds since our results do not include pages of the 10,000
sites that were not crawled, either because they were behind
a registration wall, or because they were not in the set of
20 URLs for each crawled website. Moreover, some popular
sites may be using their own ﬁngerprinting algorithms for
performing device identiﬁcation and not rely on the three
studied ﬁngerprinting companies.
B. Adoption by other sites
To discover less popular sites making use of ﬁnger-
printing, we used a list of 3,804 domains of sites that,
when analyzed by Wepawet [27], requested the previously
identiﬁed ﬁngerprinting scripts.
Each domain was
submitted to TrendMicro’s and
McAfee’s categorization services 7 which provided as output
the domain’s category and “safety” score. We used two
categorizing services in an effort to reduce, as much as
possible, the number of “untested” results, i.e., the number of
websites not analyzed and not categorized. By examining the
results, we extracted as many popular categories as possible
6TrendMicro - http://global.sitesafety.trendmicro.com/
7McAfee -http://mcafee.com/threat-intelligence/domain/
546
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:33 UTC from IEEE Xplore.  Restrictions apply. 


















!
"
#
$
%&'
Figure 3. The top 10 categories of websites utilizing ﬁngerprinting
and created aliases for names that were referring to the
same category, such as “News / Media” versus “General
News” and “Disease Vector” versus “Malicious Site”. If a
domain was characterized as “dangerous” by one, and “not
dangerous” by the other, we accepted the categorization
of the latter, so as to give the beneﬁt of the doubt
to
legitimate websites that could have been compromised, when
the former service categorized it.
Given the use of two domain-categorization services, a
small number of domains (7.9%) was assigned conﬂicting
categories, such as “Dating” versus “Adult/Mature” and
“Business/Economy” versus “Software/Hardware.” For these
domains, we accepted the characterization of McAfee, which
we observed to be more precise than TrendMicro’s for less
popular domains. Excluding 40.8% of domains which were
reported as “untested” by both services, the results of this
categorization are shown in Figure 3.
First, one can observe that eight out of the ten categories,
include sites which operate with user subscriptions, many of