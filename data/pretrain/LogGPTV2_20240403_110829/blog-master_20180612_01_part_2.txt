```  
6、耗时编程24毫秒  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers)   
select * from test   
where   
(  
  exists (select 1 from pg_class where oid::int = test.id)   
  or   
  exists (select 1 from pg_attribute where attrelid::int=test.id)  
)   
and c1 in ('1','2','3')  
and c2 between current_date-1 and current_date   
and c3 ~ 'abcdef';  
                                                                                                       QUERY PLAN                                                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.test  (cost=53.76..27798.16 rows=228 width=43) (actual time=24.287..24.287 rows=0 loops=1)  
   Output: test.id, test.c1, test.c2, test.c3  
   Recheck Cond: (test.c3 ~ 'abcdef'::text)  
   Rows Removed by Index Recheck: 6  
   Filter: ((test.c1 = ANY ('{1,2,3}'::text[])) AND (test.c2 = (CURRENT_DATE - 1)) AND ((alternatives: SubPlan 1 or hashed SubPlan 2) OR (alternatives: SubPlan 3 or hashed SubPlan 4)))  
   Rows Removed by Filter: 23  
   Heap Blocks: exact=29  
   Buffers: shared hit=226  
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..53.70 rows=1000 width=0) (actual time=21.517..21.517 rows=29 loops=1)  
         Index Cond: (test.c3 ~ 'abcdef'::text)  
         Buffers: shared hit=128  
   SubPlan 1  
     ->  Seq Scan on pg_catalog.pg_class  (cost=0.00..15.84 rows=1 width=0) (never executed)  
           Filter: ((pg_class.oid)::integer = test.id)  
   SubPlan 2  
     ->  Seq Scan on pg_catalog.pg_class pg_class_1  (cost=0.00..14.87 rows=387 width=4) (actual time=0.011..0.156 rows=387 loops=1)  
           Output: (pg_class_1.oid)::integer  
           Buffers: shared hit=11  
   SubPlan 3  
     ->  Index Only Scan using pg_attribute_relid_attnum_index on pg_catalog.pg_attribute  (cost=0.28..84.39 rows=8 width=0) (never executed)  
           Filter: ((pg_attribute.attrelid)::integer = test.id)  
           Heap Fetches: 0  
   SubPlan 4  
     ->  Index Only Scan using pg_attribute_relid_attnum_index on pg_catalog.pg_attribute pg_attribute_1  (cost=0.28..77.13 rows=2904 width=4) (actual time=0.028..1.099 rows=2938 loops=1)  
           Output: (pg_attribute_1.attrelid)::integer  
           Heap Fetches: 456  
           Buffers: shared hit=58  
 Planning time: 0.801 ms  
 Execution time: 24.403 ms  
(29 rows)  
Time: 26.052 ms  
```  
## 小结  
本文的SQL比较复杂，优化的思路和其他SQL差不多，只是本例可以理解BITMAP SCAN以及GIN索引的内部BITMAP SCAN在对较大数据进行合并时，可能引入的开销。  
切入点依旧是explain，找耗时段，找背后的原因，解决。  
1、什么时候使用GIN复合？  
当任意一个条件，选择性不好时，使用复合。  
什么时候使用GIN非复合？  
2、当有有一个条件，选择性很好时，把它单独拿出来，作为一个独立索引。比如本例的c3模糊查询字段，过滤性好，应该单独拿出来。  
其实就是说，选择性不好的列，不要放到索引里面，即使要放，也应该等PG出了分区索引后，将这种列作为分区索引的分区键。(多颗树)，或者使用partial index。  
[《PostgreSQL 黑科技 - 空间聚集存储, 内窥GIN, GiST, SP-GiST索引》](201709/20170905_01.md)    
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树 (GIN)》](../201702/20170205_01.md)    
[《PostgreSQL GIN索引实现原理》](../201702/20170204_01.md)    
[《PostgreSQL GIN multi-key search 优化》](../201702/20170203_01.md)    
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
[《PostgreSQL GIN索引limit慢的原因分析》](../201605/20160507_02.md)    
[《beyond b-tree (gin\gist索引讲解PDF)》](../201509/20150915_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")