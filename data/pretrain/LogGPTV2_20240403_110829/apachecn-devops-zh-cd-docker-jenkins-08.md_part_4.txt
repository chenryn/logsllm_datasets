Creating service app_calculator
```
Docker plans to simplify the syntax so that the `stack` word would not be needed, for example, `docker deploy --compose-file docker-compose.yml app`. At the time of writing, it's only available in the experimental version.
# 验证服务和容器
服务已经开始了。我们可以使用`docker service ls`命令检查它们是否正在运行:
```
$ docker service ls
ID            NAME            MODE        REPLICAS  IMAGE
5jbdzt9wolor  app_calculator  replicated  3/3       leszko/calculator:latest
zrr4pkh3n13f  app_redis       replicated  1/1       redis:latest
```
我们可以更仔细地查看这些服务，并检查它们部署在哪些 Docker 主机上:
```
$ docker service ps app_calculator
ID            NAME              IMAGE                     NODE  DESIRED STATE  CURRENT STATE 
jx0ipdxwdilm  app_calculator.1  leszko/calculator:latest  ubuntu-manager  Running    Running 57 seconds ago 
psweuemtb2wf  app_calculator.2  leszko/calculator:latest  ubuntu-worker1  Running    Running about a minute ago 
iuas0dmi7abn  app_calculator.3  leszko/calculator:latest  ubuntu-worker2  Running    Running 57 seconds ago 
$ docker service ps app_redis
ID            NAME         IMAGE         NODE            DESIRED STATE  CURRENT STATE 
8sg1ybbggx3l  app_redis.1  redis:latest  ubuntu-manager  Running  Running about a minute ago    
```
我们可以看到其中一个`calculator`容器和`redis`容器在`ubuntu-manager`机器上启动。另外两个`calculator`容器在`ubuntu-worker1`和`ubuntu-worker2`机器上运行。
请注意，我们明确指定了`calculator` web 服务应该发布的端口号。因此，我们能够通过管理器的 IP 地址`http://192.168.0.143:8881/sum?a=1&b=2`访问端点。该操作返回`3`结果，并将其缓存在 Redis 容器中。
# 移除栈
完成栈后，我们可以使用方便的`docker stack rm`命令删除所有内容:
```
$ docker stack rm app
Removing service app_calculator
Removing service app_redis
Removing network app_default
```
使用 Docker Stack 允许在 Docker Swarm 集群上运行 Docker 编写规范。请注意，我们使用了精确的`docker-compose.yml`格式，这是一个很大的好处，因为不需要为 Swarm 指定任何额外的东西。
这两种技术的合并给了我们在 Docker 上部署应用的真正力量，因为我们不需要考虑单个机器。我们只需要指定我们的(微)服务是如何相互依赖的，用 docker-compose.yml 格式表示，并让 docker 处理其他一切。物理机器可以被简单地视为一组资源。
# 替代集群管理系统
Docker Swarm 并不是唯一一个集群 Docker 容器的系统。尽管它是现成的，但安装第三方集群管理器可能有一些合理的理由。让我们来看看最受欢迎的选择。
# KubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetesKubernetes
Kubernetes 是一个开源的集群管理系统，最初由谷歌设计。即使它不是 Docker 原生的，集成也是顺利的，并且有许多额外的工具可以帮助这个过程；例如，**kompest**可以将`docker-compose.yml`文件翻译成 Kubernetes 配置文件。
让我们来看看 Kubernetes 的简化架构:
![](img/6ae7e3ed-c6d5-4034-bbb2-e34bae100556.png)
Kubernetes 类似于 Docker Swarm，因为它也有主节点和工作节点。此外，它引入了**容器**的概念，表示一起部署和调度的一组容器。大多数豆荚有几个容器组成一个服务。吊舱是根据不断变化的需求动态构建和移除的。
Kubernetes 相对年轻。其发展始于 2014 年；然而，它是基于谷歌的经验，这也是它成为市场上最受欢迎的集群管理系统之一的原因之一。迁移到 Kubernetes 的组织越来越多，如易贝、维基百科和皮尔森。
# 阿帕奇月
Apache Mesos 是一个开源的调度和集群系统，于 2009 年在加州大学伯克利分校启动，远在 Docker 出现之前。它在中央处理器、磁盘空间和内存上提供了一个抽象层。Mesos 的一大优势是它支持任何 Linux 应用，不一定是(Docker)容器。这就是为什么可以用成千上万台机器创建一个集群，并将其用于 Docker 容器和其他程序，例如基于 Hadoop 的计算。
让我们看看展示 Mesos 架构的图:
![](img/8debdc02-d7c6-4f97-948f-e6f51db3e6ef.png)
与其他集群系统类似，Apache Mesos 采用主从架构。它使用安装在每个节点上的节点代理进行通信，并提供两种类型的调度器，Chronos(用于 cron 风格的重复任务)和 Marathon(提供 REST API 来编排服务和容器)。
与其他集群系统相比，Apache Mesos 已经非常成熟，并且已经被大量组织采用，例如 Twitter、优步和 CERN。
# 比较特征
Kubernetes、Docker Swarm 和 Mesos 都是集群管理系统的不错选择。所有这些都是免费和开源的，并且都提供了重要的集群管理功能，例如负载平衡、服务发现、分布式存储、故障恢复、监控、秘密管理和滚动更新。它们都可以在持续交付过程中使用，没有巨大的差异。这是因为，在 Docker 化的基础架构中，它们都解决了同一个问题，即 Docker 容器的集群。然而，显然，这些系统并不完全相同。让我们看一下展示差异的表格:
|  | **DockerSwarm** | **立方〔t1〕** | **阿帕奇月份** |
| **Docker 支架** | 当地的 | 支持 Docker 作为容器中的容器类型之一 | Mesos 代理(从)可以配置为托管 Docker 容器 |
| **应用类型** | Docker 映像 | 容器化应用(Docker、rkt 和 hyper) | 任何可以在 Linux 上运行的应用(也包括容器) |
| **应用定义** | 组合配置 Docker | Pods 配置、副本集、复制控制器、服务和部署 | 树结构中形成的应用组 |
| **设置过程** | 非常简单 | 根据基础架构的不同，它可能需要运行一个命令或许多复杂的操作 | 相当复杂，它需要配置 Mesos、马拉松、Chronos、Zookeeper 和 Docker 支持 |
| API | Docker REST API | 休息应用编程接口 | Chronos/Marathon REST API |
| **用户界面** | Docker 控制台客户端、第三方 web 应用，如造船厂 | 控制台工具，本地网络用户界面(Kubernetes 仪表板) | Mesos、马拉松和 Chronos 的官方网络界面 |
| **云整合** | 需要手动安装 | 来自大多数提供商(Azure、AWS、谷歌云等)的云原生支持 | 大多数云提供商的支持 |
| **最大集群大小** | 1，000 个节点 | 1，000 个节点 | 5 万个节点 |
| **自动缩放** | 无法使用 | 根据观察到的 CPU 使用情况提供水平吊舱自动缩放 | 马拉松提供基于资源(CPU/内存)消耗、每秒请求数和队列长度的自动缩放 |
显然，除了 Docker Swarm、Kubernetes 和 Apache Mesos 之外，市场上还有其他可用的集群系统。然而，它们并不那么受欢迎，而且随着时间的推移，它们的使用会减少。
无论您选择哪种系统，您不仅可以将其用于试运行/生产环境，还可以扩展 Jenkins 代理。让我们来看看怎么做。
# 缩放 Jenkins
服务器集群的明显用例是登台和生产环境。使用时，为了增加环境容量，连接一台物理机就足够了。然而，在持续交付的背景下，我们可能还想通过在集群上运行 Jenkins 代理(从)节点来改进 Jenkins 基础设施。在这一节中，我们看一下实现这一目标的两种不同方法。
# 动态从属配置
我们在[第 3 章](03.html)、*配置 Jenkins*中看到了动态从机配置。有了 Docker Swarm，这个想法保持不变。当构建开始时，Jenkins 主服务器从 Jenkins 从 Docker 映像运行一个容器，并且在容器内部执行 Jenkinsfile 脚本。然而，Docker Swarm 使解决方案更加强大，因为我们不局限于单个 Docker 主机，而是可以提供真正的水平扩展。向群集添加新的 Docker 主机有效地扩展了 Jenkins 基础架构的容量。
At the time of writing, the Jenkins Docker plugin does not support Docker Swarm. One of the solutions is to use Kubernetes or Mesos as the cluster management system. Each of them has a dedicated Jenkins plugin: Kubernetes Plugin ([https://wiki.jenkins.io/display/JENKINS/Kubernetes+Plugin](https://wiki.jenkins.io/display/JENKINS/Kubernetes+Plugin)) and Mesos Plugin ([https://wiki.jenkins.io/display/JENKINS/Mesos+Plugin](https://wiki.jenkins.io/display/JENKINS/Mesos+Plugin)).
无论从机是如何配置的，我们总是通过安装适当的插件并将条目添加到管理 Jenkins|配置系统中的云部分来配置它们。
# Jenkins·斯旺
如果我们不想使用动态从配置，那么另一个聚集 Jenkins 从的解决方案是使用 Jenkins 群。我们在[第三章](03.html)、*配置 Jenkins*中描述了如何使用。在这里，我们添加了对 Docker Swarm 的描述。
首先，让我们看看如何使用从 swarm-client.jar 工具构建的 Docker 映像来运行 Jenkins Swarm 从机。在 Docker Hub 上可以找到其中的一些；我们可以使用 csan cez/Jenkins-swarm-slave 映像:
```
$ docker run csanchez/jenkins-swarm-slave:1.16 -master -username -password -name jenkins-swarm-slave-2
```
该命令的执行应与[第 3 章](03.html)、*配置 Jenkins*中的完全相同；它动态地向 Jenkins 主服务器添加一个从服务器。
然后，为了充分利用 Jenkins Swarm，我们可以在 Docker Swarm 集群上运行从属容器:
```
$ docker service create --replicas 5 --name jenkins-swarm-slave csanchez/jenkins-swarm-slave -master -disableSslVerification -username -password -name jenkins-swarm-slave
```
前面的命令启动集群上的五个从设备，并将它们连接到 Jenkins 主设备。请注意，通过执行 docker service scale 命令来水平缩放 Jenkins 是非常简单的。
# 动态从供应与 Jenkins 群的比较
动态从属配置和 Jenkins Swarm 都可以在集群上运行，从而形成下图所示的体系结构:
![](img/165c3a7a-c681-4d65-bb26-93517bf1e7e2.png)
Jenkins 从机在集群上运行，因此非常容易放大和缩小。如果我们需要更多的 Jenkins 资源，我们就会扩大 Jenkins 奴隶的规模。如果我们需要更多的集群资源，我们会向集群中添加更多的物理机。
这两种解决方案之间的区别在于，动态从属配置会在每次构建之前自动向集群添加一个 Jenkins 从属。这种方法的好处是，我们甚至不必考虑此刻应该运行多少个 Jenkins 从机，因为数量会自动适应管道构建的数量。这就是为什么在大多数情况下，动态从属配置是首选。然而，Jenkins·斯旺也有一些显著的好处:
*   **控制奴隶数量**:使用 Jenkins Swarm，我们明确决定此刻应该运行多少个 Jenkins 奴隶。
*   **有状态从机**:很多构建共享同一个 Jenkins 从机，这听起来可能是个缺点；然而，当一个构建需要从互联网上下载大量依赖库时，这就成为一个优势。在动态从配置的情况下，为了缓存依赖关系，我们需要设置一个共享卷。
*   **控制从机运行的位置**:使用 Jenkins Swarm，我们可以决定不在集群上运行从机，而是动态选择主机；例如，对于许多初创公司来说，当集群基础设施成本高昂时，可以在开始构建的开发人员的笔记本电脑上动态运行从机。
聚集 Jenkins 奴隶带来了很多好处，这是现代 Jenkins 建筑应该有的样子。这样，我们可以为持续交付流程提供基础架构的动态水平扩展。
# 练习
在本章中，我们已经详细介绍了 Docker Swarm 和集群过程。为了增强这方面的知识，我们推荐以下练习:
1.  设置由三个节点组成的集群集群:
2.  在群集上运行/扩展 hello world 服务:
3.  使用部署在 Swarm 集群上的从机扩展 Jenkins:
# 摘要
在本章中，我们看一下 Docker 环境的集群方法，这些方法可以设置完整的分段/生产/Jenkins 环境。这一章的要点如下:
*   集群是一种配置一组机器的方法，在许多方面，可以将其视为一个系统
*   Docker Swarm 是 Docker 的本地集群系统
*   可以使用内置的 Docker 命令动态配置 Docker Swarm 集群
*   可以使用 Docker 服务命令在集群上运行和缩放 docker 映像
*   Docker Stack 是一种在群集上运行 Docker 组合配置的方法
*   支持 Docker 的最流行的集群系统是 Docker Swarm、Kubernetes 和 Apache Mesos
*   Jenkins 代理可以使用动态从属配置或 Jenkins Swarm 插件在集群上运行
在下一章中，我们将描述持续交付流程的更高级方面，并介绍构建管道的最佳实践