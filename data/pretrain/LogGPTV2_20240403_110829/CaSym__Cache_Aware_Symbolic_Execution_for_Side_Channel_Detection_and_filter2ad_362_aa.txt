title:CaSym: Cache Aware Symbolic Execution for Side Channel Detection and
Mitigation
author:Robert Brotzman and
Shen Liu and
Danfeng Zhang and
Gang Tan and
Mahmut T. Kandemir
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
CaSym: Cache Aware Symbolic Execution for
Side Channel Detection and Mitigation
Robert Brotzman, Shen Liu, Danfeng Zhang, Gang Tan, Mahmut Kandemir
Department of Computer Science and Engineering
Pennsylvania State University
{rcb44, sxl463, zhang, gtan, kandemir}@cse.psu.edu
State College, PA
Abstract—Cache-based side channels are becoming an im-
portant attack vector through which secret information can
be leaked to malicious parties. Previous work on cache-based
side channel detection, however, suffers from the code coverage
problem or does not provide diagnostic information that is
crucial for applying mitigation techniques to vulnerable soft-
ware. We propose CaSym, a cache-aware symbolic execution
to identify and report precise information about where side
channels occur in an input program. Compared with existing
work, CaSym provides several unique features: (1) CaSym
enables veriﬁcation against various attack models and cache
models, (2) unlike many symbolic-execution systems for bug
ﬁnding, CaSym veriﬁes all program execution paths in a
sound way, (3) CaSym uses two novel abstract cache models
that provide good balance between analysis scalability and
precision, and (4) CaSym provides sufﬁcient information on
where and how to mitigate the identiﬁed side channels through
techniques including preloading and pinning. Evaluation on a
set of crypto and database benchmarks shows that CaSym
is effective at identifying and mitigating side channels, with
reasonable efﬁciency.
Keywords-side-channels; symbolic execution; cache
I. INTRODUCTION
Side-channel attacks exploit information gathered from
the physical implementation of computer systems to steal
sensitive data. Among all side channels, side channels re-
sulting from shared data/instruction cache have shown to
be extremely effective. The ﬁrst cache-based attacks on
crypto systems learn AES [1], [2] and RSA keys [3] by
analyzing the timing variance due to cache usage of the
victim, assuming the attacker shares the L1 cache with the
victim. More realistic attacks have recently emerged showing
the practicality of various timing attacks using the shared
CPU cache, including the last-level cache. For example, in
a multi-tenant cloud system, cache-based timing attacks are
shown to be a potential risk across VMs [4], [5], [6] and
across isolated applications in secure enclaves [7]; more
evidence is emerging showing practical timing attacks that
break crypto systems [8], [9], [10].
To counter cache-based side channels, developers of popu-
lar cipher implementations (e.g., RSA and AES in OpenSSL
and Libgcrypt) have been manually identifying side chan-
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:51)(cid:80)(cid:67)(cid:70)(cid:83)(cid:85)(cid:1)(cid:35)(cid:83)(cid:80)(cid:85)(cid:91)(cid:78)(cid:66)(cid:79)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:19)(cid:19)
(cid:22)(cid:17)(cid:22)
nels and patching their software with counter measures.1
However, the manual process often misses important side
channels, as evidenced by recent discoveries of new side
channels in crypto implementations [11]. Furthermore, the
highly-specialized patches by crypto developers are of little
help for non-experts to ﬁx side channels in other crypto
implementations and other security-sensitive applications.
Previous work has made good progress in automatic
detection of cache-based side channels. Example systems
include CacheAudit [12], [13] and CacheD [11]. While those
systems have successfully identiﬁed side channels in real-
world programs, they still face a couple of limitations.
First, although some of the work based on symbolic
execution (e.g., [11]) naturally offers counterexamples that
represent program executions that exhibit the identiﬁed side
channels, they only explore one or multiple dynamic exe-
cution paths and suffer from the problem of code coverage.
That is, they are unable to detect side channels in unexecuted
code, and side channels due to branches conditioned on
conﬁdential data. Some systems [12], [13] use abstract
interpretation, which covers all program paths. But they
do not show developers where the side channels are and
why they are side channels. More importantly, such missing
information could be used to construct mitigations that ﬁx
the identiﬁed side channels.
is important
Second, an adequate cache model
for
language-based analysis. To detect cache-based side chan-
nels, one approach is to directly check the existence or
absence of data in the cache via architecture-dependent
cache models (e.g., [12]). But the unpleasant consequence is
that the security guarantee offered by those systems becomes
architecture-dependent, and reasoning on concrete cache
models is typically costly. Other systems (e.g., [13], [11])
check that the entire trace of accessed memory addresses is
secret-independent, without using a concrete cache model.
However, doing so can be too conservative. For example,
AES implementations with preloading still exhibit key-
dependent memory accesses, but they are secure since all
1See Section 5 of [2] for a discussion of common counter measures used
in crypto implementations.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
key-dependent memory accesses will result in a cache hit
with preloading.
In this paper, we propose a novel framework, called
CaSym, for detecting and mitigating cache-based side chan-
nels. CaSym tackles the aforementioned limitations via the
following components.
• Cache-aware symbolic execution (Section V). CaSym
takes a program in a compiler IR (speciﬁcally, LLVM
IR) as input and performs symbolic execution to track
both program and cache states. The symbolic state
produced by CaSym’s symbolic execution is used to
construct a formula fed to an SMT solver. A satisfying
solution to the formula produces public values as well
as two sensitive values that demonstrate the existence
of a cache-based side channel: those values trigger two
program executions that result in different cache states.
Unlike previous work that uses symbolic execution
for detecting cache-based side channels [11], CaSym
overestimates all program paths and therefore does not
suffer from the code-coverage problem. CaSym soundly
translates loops into loop-free code before performing
symbolic execution (at the cost of some precision loss).
• Cache models (Section VI). For generality, CaSym takes
any cache model that deﬁnes two operations (initialize
and update) and an equality test. Besides the concrete
cache models (such as LRU) used in previous work,
CaSym also employs two novel cache models:
the
inﬁnite cache model and the age model. Unlike other
existing models, they hide implementation details and
provide good balance between precision and generality.
The inﬁnite cache model represents an optimistic view
of cache:
if there is a side channel under the this
model, then the side channel likely will exist in other
more realistic cache models. The age model represents
a pessimistic view of the cache:
if there is a side
channel under this model, then the side channel likely
will exist in some realistic cache models. Compared
with concrete cache models (e.g., LRU), the inﬁnite
cache model and the age model offer signiﬁcantly better
scalability and comparable precision.
• Localizing and ﬁxing side channels (Section VII). From
the counterexample (i.e., values that trigger two pro-
gram executions that result in different cache states),
CaSym utilizes the solver solution to localize the causes
of the identiﬁed side channels and reports the problem-
atic program points. From those problematic program
points, mitigation mechanisms, such as preloading and
pinning, can then be applied to eliminate those side
channels in a straightforward manner.
We have applied CaSym on a set of crypto benchmarks
using both symmetric and asymmetric ciphers as well as
database benchmarks (Section IX). The experiments con-
ﬁrmed that CaSym can identify known side channels in these
1
2
3
4
5
6
7
8
9
10
void Example() {
... // computing RK[0..3] from key
RK[4]=RK[0]ˆSbox[(RK[3] >> 8) & 0xFF];
res = res * res;
res = res % mod;
if(bit_set_at_i(key[0],i)) {
res = base * res;
res = res % mod;
}
}
Figure 1: Example program composed of snippets of real
code which demonstrate the two kinds of side channels.
benchmarks, report precise information about where the side
channels are and why they are side channels, as well as
verify that some benchmarks are side-channel free (based
on realistic attack and cache models). We also present new
vulnerabilities, which to the best of our knowledge have
not been found before in the glibc library code and the
PostgreSQL database.
II. BACKGROUND INFORMATION
A. Cache-based side channels
Side channels are information channels that were not
intended to convey information. These come in many forms,
such as timing, power consumption, network trafﬁc, etc. In
this paper, we consider cache-based side channels. Fig. 1
illustrates two kinds of cache-based side channels: secret-
dependent array accesses and secret-dependent branches2.
A secret-dependent array access occurs when the value
of the index into an array is dependent on secrets. In this
case, given two different secret values, different memory
addresses will be loaded, causing different data to be stored
into or evicted from cache. For example, line 3 in Fig. 1 is a
secret-dependent array access, since the index into Sbox is
part of the round key. The round key in AES can reveal the
decryption key. Such vulnerabilities have led to real cache-
based side channel attacks on AES (e.g., [14], [2], [15]).
A secret-dependent branch occurs when the outcome of
a branch condition depends on secrets. In this case, given
two different secret values, different branches can be taken,
causing different data to be stored into or evicted from
cache if branches have different memory access patterns.
For example, the branch condition at line 6 in Fig. 1 is
secret dependent since the outcome depends on the i-th bit
of key[0]. Only when the i-th bit is set, variables res,
base and mod are accessed. Such vulnerabilities have led to
real cache-based side channel attacks on RSA and ElGamal
(e.g., [9], [10]).
2Although the code is highly simpliﬁed, the code is composed of real
code from cipher implementations: lines 2 to 3 resembles a snippet of the
AES implementation in mbed TLS, and lines 6 to 10 resembles a snippet
of RSA implementation in Libgcrypt.
(cid:22)(cid:17)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
In summary, this paper targets cache-based side channels:
information leakage due to cache variants depending on
conﬁdential data. Informally, a program is free of cache-
based side channels, if secrets in a program do not inﬂuence
the cache state. We note that while much work has been done
on timing channels in general (e.g., recent work of [16],
[17], [18], [19]), most of them model execution time as a
function of the number of instructions being executed. Since
such a simpliﬁed timing model ignores the effect of cache
on timing, they do not detect cache-based side channels.
B. Threat model
We consider an attacker who shares the same hardware
platform with the victim, a common scenario in the era
of cloud computing. The attacker has no direct access to
the memory bus. Hence, he cannot directly observe the
memory access traces from CPU. However, we assume the
attacker can probe the shared data cache state, in order
to detect whether some victim’s data is in cache or not.
This model captures most cache-based side channel attacks
in the literature, such as an attacker who observes cache
accesses by measuring the latency of the victim program
(e.g., cache reuse attacks [20], [21], [22], [14] and evict-
and-time attack [2]), or the latency of the attacker’s program
(e.g., prime-and-probe attacks [2], [15], [21], [8], [10]).
Based on at which point of the victim’s program the
attacker may probe the shared cache, there are two kinds of
attackers (here, we follow the terminology used in [12]3):
• access-based: when an attacker can probe the cache
(i.e., determine if data are in cache or not) only upon
the termination of the victim program.
• trace-based: when an attacker can probe the cache after
each program point in the victim program.
III. RELATED WORK
We next discuss related work on identifying and mitigat-
ing cache-based side channels.
Detecting and mitigating cache-based side channels:
CacheAudit [12] and its extension [13] statically provide
an upper bound of cache-based information leakage in a
program. To do so, they abstract concrete cache states and,
on top of that, estimate all possible ﬁnal cache states using
abstract interpretation. While a sound estimation of leakage
bound is very useful for estimating the severeness of side
channels in a program, such a leakage bound provides little
insights on how to ﬁx the side channels.
Recent work of CacheD [11] takes a concrete program
execution trace as input and symbolizes secret values during
a symbolic execution to identify secret-dependent memory
accesses. Since all values except secrets are concrete in the
3The work [12] also considers a time-based attacker, who may only
observe the overall execution time of victim program. We do not consider
this model since it is weaker than cache-probing attacks we consider in this
paper.
(cid:22)(cid:17)(cid:24)
Moreover, we note that those analyses work on binary-
level code, while CaSym works on IR-level code. Low-
level details, such as memory allocation, could make a
binary-level analysis more accurate. For example, the work
by Doychev and K¨opf [13] shows that some optimization
level of gcc removes a side channel that shows up with
other levels. However, using low-level details also makes the
security guarantee compiler-dependent, which is undesirable
for crucial software such as cipher implementations.
Some work uses program transformation to equalize the
memory access pattern of secret-dependent branches, either
by padding those branches to follow similar memory access
patterns [23], [24] or rewriting those branches to be sequen-
tial programs [25], [26]. However, such mechanisms do not
handle secret-dependent array accesses, which are the root
cause of attacks on AES (e.g., [1], [2]).
Zhang et al. [27] propose a timing contract that enables
a software-hardware co-design for mitigating cache-based
side channels. Based on the contract, they show that full-
system security can be enforced by a sound type system
as well as contract-aware hardware. Their system requires
specialized hardware, while our analysis identiﬁes potential
side channels on commodity hardware.
analysis, CacheD is likely to be more precise than a static
program analysis (i.e., have fewer false positives). However,
CacheD explores only the same execution path as the input
dynamic trace. Hence, vulnerabilities in the unexplored code
or those that are due to secret-dependent branches cannot be
detected by CacheD.
Detecting other kinds of timing channels: Prior work
also uses static analysis to detect information leakage via
program execution time. However, they are largely orthog-
onal to this paper: their timing model ignores the effects of
cache, the root cause of cache-based side channel attacks.
For example, recent work [16], [17] applies symbolic
execution to synthesize concrete public inputs that
lead
to maximum leakage via timing channels. However, their
analyses do not model the effects of cache; execution time
is modeled as the number of instructions being executed.
Chen et al. [19] prove -bounded noninterference for a
program with regard to observable attributes such as execu-
tion time, memory usage, and response size. Blazer [18] has
a similar goal, but it uses a novel decomposition technique
to break a program up into partitions. However, these works
only handle side channels whose effects can be modeled as
a constant “cost” for each instruction. But an accurate mod-
eling of cache requires more expressive power in program
analysis.
OS- and architecture-level
techniques: To mitigate
cache-based side channels, one direction is to either physi-
cally or logically partition the data cache. At the OS level,
Raj et al. [28] statically partition the last level cache into
regions and allow VMs to use different regions by parti-
tioning physical memory pages accordingly. Shi et al. [29]
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
Fixed
Code
Clang
Source
Code
Localize & Fix 
Vulnerabilities
Satisﬁable
LLVM