由于SQL盲注漏洞非常耗时且需要向Web服务发送很多请求，因而要想利用该漏洞，就
需要采用自动的技术。第5章会详细讨论利用该漏洞的过程。
SQL盲注是一种很常见的漏润，但有时它非常细微，经验不丰富的攻击者可能会检测不到。
为更好地理解该问题，请看下面的例子。
Victim公司的站点上有一个showproduct.php页面。该页面接收名为id的参数，该参数可
唯一标识Web站点上的每一件商品。访客按下列方式请求页面：
http: //www.victim, com/showproduct -php?id1
http: //uww.victim, com/showproduct -php?id=2
http://ww.,victim, com/showproduct -php?id=3
http: //www,victim. com/showproduct -php?id=4
每个请求将显示顾客希望查看的商品的详细信息。目前这种实现方法没有任何问题。进一
步讲，Victim公司花费了一些精力来保护Web站点，它不向用户显示任何数据库错误。
测试该Web站点则会发现，应用在遇到潜在的错误时默认显示第一件商品。下列所有请
求均显示第—件商品(www.victim.com/showproduct.php?id1)：
http: //www,victim,com/showproduct .php7id=attacker
http:/ /www.victim, com/showproduct -php?id=attacker
http1 //www.victim. com/showproduct -php?id=
http: //ww.victim.com/showproduct -php7id=999999999 (non existent product)
http: / /www, victim., com/showproduct .php7id=-1
到目前为止，看得出Victim公司在实现该应用时确实考虑到了安全问题。但如果继续测试
就会发现，下面的请求会返回id为2的商品：
http: //www,victim. com/showproduct -php?id=31
http: / /www. victim. com/showproduct -php?id=42
http: //www.victim.com/showproduct .php?id=53
上述URL表明已将参数传递给SQL语句且按下列方式执行：
FROM products
WHERE idproduct=31
数据库计算减法的值并返回idproduct为2的商品。
您也可以使用加法执行该测试，但是您必须清楚互联网工程任务组(Intermet Engineering
TaskForce，IETF)曾在RFC2396(统一资源标识符(Uniform Resource Identifier，URI)：通用语法)
44
---
## Page 59
第2章SQL注入测试
中声称，加号（+）是URI的保留字，需要进行编码。可以用%2B代表加号的URL编码。
对于企图显示idproduct为6的商品的攻击示例，可使用下列URL来表示：
http: / /ww,victim.com/showproduct ,php?id=1$2B5(对 1d=1+5进行编码)
http://www.victim.com/showproduct.php?id=2$2B5(对 1d=2+4 进行编码)
http:/ /ww,victim.com/showproduct -php?id=3$2B5 (对 id=3+3 进行编码)
继续推理过程，现在可以在id值的后面插入条件，创建真假结来：
http://w,victim.com/showproduct .php?id=2 or 1=1
--返回第一件商品
http://vw,victim. com/showproduct ,php7id=2 or 1=2
--返回第二件商品
在第一个请求中，Web服务器返回idproduct为1的商品：对于第二个请求，返回idproduct
为2的商品。
在第一条语句中，or1=1让数据库返回所有商品。数据库检测该语句为异常，显示第一件
商品。
在第二条语句中，or1=2对结果没有影响，执行流程没有变化。
读者可能已经意识到，根据相同的原理可以对攻击做一些变化。例如，可以选择AND逻
辑运算符米替换OR。这样一米：
http://wnn, vict.im com/showproduct php7id=2 and 11
-返回第二件商品
http://ww,viotim.com/showproduct ,php?id=2 and 1=2
--返回第一件商品
不难发现，该攻击与上一攻击几乎完全相同，只不过条件为真时返回第二件商品，条件为
假时返回第一件商品。
需要注意的是，现在虽然可以操纵SQL查询，但却无法从中获取数据。此外，Web服务
器根据发送的条件回发不同的响应。我们据此可以确认SQL盲注的存在并开始着手自动地利
用漏润。
2.3确认SQL注入
上一节我们讨论了通过操纵用户数据输入并分析服务器响应来寻找SQL注入漏洞的技术。
识别出异常后，我们需要构造一条有效的SQL语句来确认SQL注入漏洞。
虽然可以使用一些技巧来帮助创建有效的SQL语句，但是需要意识到，每个应用都是不
同的，因而每个SQL注入点也都是唯一的。这意味着您始终要遵循一种经过良好训练且反复
实践过的操作过程。
识别漏润只是目标的一部分。最终目标是利用所测试应用中出现的漏洞。要实现该目标，
您需要构造一条有效的SQL请求，它会在远程数据库中执行且不会引发任何错误。本节将提
供从数据库错误过渡到有效的SQL语句所必需的信息。
45
---
## Page 60
SQL注入攻击与防御（第2版）
2.3.1区分数字和字符串
首先要清楚数据库包含不同的数据类型，它们都具有不同的表示方式，可以将它们分为两类：
·数字：不需要使用单引号来表示
·其他类型：使用单引号来表示
下面是使用带数字值的SQL语句的示例：
SELECT * FROM products WHERE value > 200
 -  A . 
不难发现，使用数字值的SQL语句不使用单引号。向数字字段注入SQL代码时需要考虑
到这一点，稍后会出现这种情况。
下面是使用带单引号值的SQL语句的示例：
从这些例子中不难发现，数字与字母的混合值要使用单引号括起来。数据库以这种方式来
表示数字与字母混合的数据。即使用单引号将数值括起来，大多数数据库也可以处理这种数值
类型，但这并不是常用的编程实践，开发人员通常把用引号括起来的数据视为非数值类型。测
试和利用SQL注入漏洞时，一般需要拥有WHERE子句后面所列条件中的一个或多个值的控
制权。正因为如此，注入易受攻击的字符串字段时，您需要考虑单引号的闭合。
可以使用单引号把数字值引起来，大多数数据库将把该值转换为它所代表的数值。但
Microsoft SQLServer是例外，在Microsoft SQLServer中重载了+操作符，可用+操作符来表示
字符串的连接操作。在具体的使用场合，Microsoft SQLServer数据库可以理解+操作符执行的
是两个数值相加，还是两个字符串的连接。例如，2+2的结果为22面非4。
从上面的例子中可以看到数据格式的不同表示方式。在不同的数据库中，date或timestamp
数据类型的表示方式并没有统一的规范，在各种数据库中可能存在较大的差异。为了避免这一
问题，绝大多数数据库厂商都允许使用格式掩码，比如DD-MM-YYYY。
2.3.2内联SQL注入
本节介绍一些内联SQL注入(Inline SQLInjection）的例子。内联注入是指向查询注入一些
SQL代码后，原来的查询仍然会全部执行。图2-10展示了内联SQL注入的示意图。
入
目
.米(的 SQL 语与)
入后的SQL语
图2-10内联注入的SQL代码
46
---
## Page 61
第2章SQL注入测试
1.字符串内联注入
下面通过一个说明这种攻击的例子来帮助读者完全理解它的工作过程。
Victim公司有一个身份验证表单，用于访问Web站点的管理部分。身份验证要求用户输
入有效的用户名和口令。用户在提交了用户名和口令后，应用程序将向数据库发送一个查询以
对用户进行验证。该查询具有下列格式：
FROM administrators
应用程序没有对收到的数据执行任何审查，因而我们可以完全控制发送给服务器的内容。
要知道，用户名和口令的数据输入会用两个单引号引起来，这不是我们能控制的。构思有
效的SQL语句时一定要牢记这一点。图2-11展示了由用户输入创建的SQL语句。
BieEdtyiewHgtoryBookmarksBbosbelp
全pw
Administration
Usemame
Send
Done
图2-11由用户输入创建的 SQL语句
图2-11还展示了可操纵的那部分SQL语句，
前面讲过，我们通过注入能够触发异常的输入以开始寻找漏洞的过程。对于这种情况，可
假设正在对一个字符串字段进行注入，因此需要保证注入了单引号。
在Username中输入一个单引号，单击Send后，返回下列错误：
Error: You have an error in your SQL syntax; check the manual that
near "' at line 1
该错误表明表单易受SQL注入攻击。上述输入最终构造的SQL语句如下所示：
SELECT *
FROM administrators
由于注入单引号后导致查询在语法上存在错误，因而数据库抛出一个错误，Web服务器将
该错误发送回客户端。
47
---
## Page 62
SQL注入攻击与防御（第2版）
注意：
理解并利用SQL注入漏润所涉及的主要技术包括：在心里重建开发人员在Web应用中编
写的代码以及设想远程SQL代码的内容，如果能想象出服务器正在执行的代码，就可以很明
确地知道在哪里终止单引号以及从哪里开始添加单引号。
识别出漏洞之后，接下来的目标是构思一条有效的SQL语句，该语句应能满足应用施加
的条件以便绕过(bypass)身份验证控制。
这里假设正在攻击一个字符申值，因为通常用字符串表示用户名且注入单引号会返回
“Unclosedquotation mark”（未闭合的引用标记）错误。因此，我们在usemame 字段中注入
“OR'T=1，口令保持为空。该输入生成的SQL语句如下所示：
SELECT *
FROM administrators
.. - pzoxssed cN .I.=.I. do ., - oweuxosn 3H3
利用该语句无法得到我们希望的结果。它不会为每个字段返回TRUE，因为逻辑运算符存
在优先级问题。AND比OR拥有更高的优先级，可以按下列方式重写SQL语句，这样会更容
SELECT *
FROM administrators
f(., - pxonssed GNV .I,=.T.） O (., = aueuzasn) 3H3HM
这并不是我们想做的事情，因为这样只会返回administrators表中那些口令为空的行。可通
过增加一个薪的OR条件（比如'OR1-1ORT'')来改变这种行为：
SELECT *
FROM administrators
(., = pxonssed aNT=,I.)HO(t=T) O(.. = 9weuzasn) 33HM
新的OR条件使该语句始终返回真，因此我们可以绕过身份验证过程。上一节中我们介绍
了如何通过终止SQL语句来解决该问题。但是您有时会发现，有些情况下终止SQL语句并不
可行，所以上述技术必不可少。
通过返回administrators 表中所有行（正如我们在上面这些例子中采用的做法）的办法，有时
无法绕过某些身份验证机制，它们可能只要求返回一行。对于这种情况，可以尝试诸如admin
AND1=1OR’=T′这样的注入内容，产生的SQL代码如下所示；
SELECT *
FROM administrators
f.. - pzonssed CNV .t,-,t. dO t-T ONY ,uTwpe, - oweuzosn 383HA
上述语句只返回usemame 等于admin 的记录行。请记住，这里需要增加两个条件，否则
AND password='会起作用。
我们还可以向password字段注入SQL内容，这在本例中操作起来很容易，考虑到该语句
的性质，只需注入一个为真的条件（如'ORT=7)来构造下列查询即可：
SELECT *
FROM adminlstrators
48
---
## Page 63
第2章SQL注入测试
WHERE username
* AND password = '* OR '1'='1';
该语句返回administrators表中所有的行，因面成功利用了漏洞。
表2-1给出了一个注入字符串的列表，可以使用它们来寻找和确认字符串字段是否存在内
联注入漏洞。
表2-1字符串内联注入的特征值
测试字符串
变
种
预期结果
触发错误。如果成功，数据库将返回一个错误
1′ or *11
1) or (1=1
永真条件。如果成功，将返回表中所有的行
value' or′l2
value') or (12
空条件。如果成功，将返回与原来的值相同的结果
Z=l, pue,1
1′) and (1'=2
永假条件。如果成功，将不返回表中任何行
SQLServer字符串连接。如果成功，将返回与永真条
1′ or ′ab’="a′+′b
1′) or ('ab’=′a’+′b
件相同的信息
1') or (aba b
MySQL字符串连接。如果成功，将返回与永真条件
1′or 'ab'′′b
相网的信息
1′ or ab'=a' II b
1') or (ab’a I b
Oracle字符串连接。如果成功，将返回与水真条件相
同的信息
本节介绍了基本的内联字符串注入。为了更清晰地说明注入攻击的结果，本节中所有的例
子都采用了SELECT查询语句。然而，理解对其他SQL查询语句进行SQL注入的效果也是很
重要的。