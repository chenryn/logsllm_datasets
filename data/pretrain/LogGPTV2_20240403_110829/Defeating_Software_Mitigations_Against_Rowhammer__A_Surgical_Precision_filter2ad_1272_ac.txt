ﬂips
0 → 1 1 → 0 Vuln.
Ampliﬁed
rows[%]
A1
A2
A3
A4
B1
D1
0.56
0.98
3.01
0.99
2.17
0.01
2.93
E1
1.10
E2 13.69
F1
2.63
G1 12.98
9.79
H1
0.49
4.50
C1
I1
J1
92
161
512
161
358
1
488
181
0
159
18
1
0
0
0
0
92
2
494
160
358
1
488
181
3108
142
2966
442
2447
1983
78
811
0
154
55
2
15
442
2293
1928
76
796
0.08
20.29
4.54
0.18
1.62
0.00
2.30
0.19
24.58
0.70
18.61
18.46
0.09
9.29
Double
0 → 1 1 → 0 Vuln.
rows[%]
Total
ﬂips
0 → 1 1 → 0
0
13
98.95
200468
4367 196107
Total
ﬂips
13
5404
5404
0
69.13
21542
21538
4
809
29
272
0
385
31
438
371
16.13
2926
1541
1385
1
0
0
0
0
28
99.58
256359
5577 250796
272
8.77
1504
1
1503
0
63.01
16489
1365
15124
385
12.14
2131
0
2131
31
99.77
202630
4175 198464
6273
4183
2090
74.56
24587
16320
8267
116
3803
3930
15
0
116
88.67
413796
5927 407906
1934
1869
62.95
15990
7851
2575
1355
59.31
16087
10608
8139
5479
2
13
99.29
130187
4781 125410
1741
1153
588
35.25
7185
4725
2460
Fig. 3. Eﬀect of address remapping strategies on Rowhammer eﬀectiveness
of bit ﬂips show up reliably in all runs, with minor variation between memory
setups.
Figure 3 shows the eﬀectiveness of newly discovered addressing information
such as on-DIMM remapping and rank mirroring on the number of discovered
bit ﬂips using diﬀerent set of vulnerable DIMMs. In particular, we see that both
rank mirroring and custom remapping are required for the best results. This
was, however not the case for all DIMMs, as can be seen in Table 1.
5.2 Comparison
We compare the eﬀectiveness in exploiting Rowhammer and ﬁnding bit ﬂips
of Hammertime’s profile with several state-of-the-art double-sided Rowham-
mer testing tools: Google Project Zero (GPZ) double-sided rowhammer [20], the
60
A. Tatar et al.
native rowhammer binary from the Rowhammer.js project [9], and the binary
provided by the Flip Feng Shui authors [19]. Each tool was tested on memory
from the A1 set (one of the most vulnerable DIMMs) under three setups:
Setup I: 15 min testing 4 GiB out of 8 GiB total; 1 channel, 1 DIMM,
Setup II: 30 min testing 8 GiB out of 16 GiB total; 2 channels; 1 DIMM/channel;
2 ranks/DIMM
2 ranks/DIMM
Setup III:
30 min testing
8 GiB out
of
16 GiB total;
1 channel;
2 DIMMs/channel; 2 ranks/DIMM
Information about memory geometry, in particular the number of DIMMs, was
conﬁgured for each tool using runtime ﬂags or compile-time constants, where
possible. Memory allocation was done using regular (non-huge, 4 KiB) pages for
GPZ test and Rowhammer.js, and using 2 MiB hugepages for Flip Feng Shui.
To make comparison with other tools easier, profile ran with two conﬁg-
urations: the ﬁrst, compatibility mode, allocated memory using regular pages,
and only used basic memory conﬁguration—no support for rank mirroring or
on-DIMM remapping. The second, optimized run uses hugepage allocation, as
well as taking into account rank mirroring and on-DIMM remapping.
Table 3 shows the results of the test runs. The middle section presents the
relevant Rowhammer parameters of each run, namely the number of reads and
knowledge of memory geometry. The “Rows tested” column shows the number of
rows as reported by each test tool. As we have seen in Sect. 2.3 however, diﬀerent
tools have diﬀerent deﬁnitions of what a “row” is. The “Addr pairs/row pair”
column highlights these diﬀerences, showing how many individual address pairs
the tool tries hammering for each individual row it tests. We also provide the
“MiB covered” column, which takes into consideration each tool’s deﬁnition of
a “row”, providing a common metric.
First, we notice great variation in testing speed (i.e. number of rows tested per
unit time) between diﬀerent tools and setups. This is indicative of the targeting
strategies used: the three tools all search over contiguous blocks, as presented in
Sect. 2.3, optionally with heuristics narrowing down the search space. The GPZ
test exhaustively tries all pages in these blocks, resulting in the slowest overall
performance of the set. Rowhammer.js native, on the other hand, uses some
information about the memory controller and geometry to select its targets,
leading to better search speeds and adapting well to diﬀerent memory setups.
Flip Feng Shui uses a pre-tuned timing side-channel to select potential targets.
Judging by the results, the hard-coded timing threshold it uses is tuned for dual-
channel memory: Setup II has much improved search rate, while Setups I and III
are virtually identical to the exhaustive search done by the GPZ test. In contrast
to all of these, Hammertime’s profile uses extremely precise targeting to make
every test count, leading to consistent performance that is orders of magnitude
better than that of other tools.
Secondly, we look at the eﬀectiveness with which tools induce bit ﬂips in
memory. Project Zero’s test failed to detect any bit ﬂips under all three setups,
Defeating Software Mitigations Against Rowhammer
61
Table 3. Comparison between Hammertime proﬁle and other Rowhammer test tools.
aAccurate row address computation which takes rank mirroring and on-DIMM remap-
ping into account.
bAddress pairs selected using a timing side-channel.
cAuto-calibrated for two 64ms refresh intervals.
suggesting that it has certain hard-coded assumptions about memory organiza-
tion which turn out to be wrong. Rowhammer.js native, on the other hand, suc-
cessfully detects ﬂips in both single-DIMM and dual-channel modes, while none
are reported for dual-DIMM. This is consistent with expectations, as the memory
addressing model used by this tool assumes dual-channel operation for multiple
DIMMs. Flip Feng Shui, unsurprisingly, produces bit ﬂips only when run under
conditions it has been tuned for, similarly to how its search speed varies. In keep-
ing with its superior search rate, profile also detects orders of magnitude more
bit ﬂips than the other tools. This is partly due to more rows being tested, but
also due to better sensitivity from knowing where to look—other tools manage
at most slightly above 1 ﬂip per row, while Hammertime consistently produces
between 7 and 9 ﬂips per row. Furthermore, in the last setup, none of the test-
ing tools could ﬁnd any bit ﬂips. This is particularly important because it shows
that DIMM setups that would be considered secure by state-of-the-art tools,
should now be considered vulnerable assuming precise geometry information for
Rowhammer attacks. These insights hint that Rowhammer-vulnerable memory
cells are much more prevalent than existing software tools would suggest.
5.3 Defenses
We examine the eﬀectiveness of published Rowhammer defenses using the new
insights we have gained about memory addressing.
First, we examine ANVIL [5], which monitors memory accesses and
selectively refreshes what it considers neighboring rows when it discovers
Rowhammer-like activity. To do so, we built and deployed the ANVIL kernel
62
A. Tatar et al.
Table 4. ANVIL evaluation
Defense
None
Bit ﬂips
A1 A3
7328 96
ANVIL (default)
4238 45
ANVIL (aggressive) 4211 45
Table 5. CATT evaluation
ID Rank
mirror
DIMM
remap
A1 ✓
A2 ✓
E1 ✗
F1 ✗
✓
✗
✓