ber of rounds covered by the best black-box distinguisher of
Section 5.4, whichever is higher.
The recommended variants are SPACE-(8, 300), (16, 128),
(24, 128) and (32, 128). In the white box, the security claim
is the key extraction security at the level of 128 bits and
(T /4, 128)-space hardness. In the black box, we claim the
classical security of a 128-bit block cipher with a 128-bit key.
Note that lower numbers of rounds can be used for most
variants if a more aggressive space hardness level is accept-
able to the user.
5.6 Implementation Issues
5.6.1 Implementation in the White Box
In a white-box implementation, F
′
na (x) is implemented by
table look-ups. This is by far the most expensive operation
and the performance of encryption/decryption can be esti-
mated by the number of table look-ups (TL) along with the
table sizes. Such a table consists of 2na entries of nb bits
each, and the table size is T = (2na × nb) bits.
Table 3 shows the performance and the table size for each
recommended variant, where L1-TL, L3-TL, RAM-TL and
HDD-TL denote table accesses to L1/L2 cache, L3 cache,
RAM and HDD, respectively. The sizes of tables in SPACE-
(8, 300), -(16, 128), -(24, 128) and -(32, 128) are suited for
L1/L2 cache (e.g. 32 KB to 256 KB), L3 cache (e.g. 8 MB),
RAM (e.g. a few GB) and HDD (e.g. more than 10 GB),
respectively. Assuming that one random access to the table
stored in L1/L2 cache, L3 cache, RAM and HDD takes 5, 30,
100 and 1000 cycles, the white-box performance of SPACE-
(8, 300), -(16, 128), -(24, 128) and -(32, 128) is roughly esti-
mated as 93, 240, 800 and 8000 cycles per byte, respectively.
For example, SPACE-(16, 128) and the broken white-box
AES by Chow et al. [14] has almost the same code size (suit-
able for L3 cache), but SPACE-(16, 128) is 23 times faster.
A comparison with ASASA constructions will be provided
in Section 5.6.3.
Implementation in the Black Box
5.6.2
In the black-box environment, a compact implementation
is possible for the key owner by decomposing the table for
′
F
na (x). Performance is then estimated by the number of
internal block cipher calls. For SPACE-(8, 300), -(16, 128),
-(24, 128) and -(32, 128), it is 300, 128, 128 and 128 calls,
respectively.
A wide range of implementations is thinkable under the
freedom of choice of the underlying block cipher for SPACE.
With a lightweight block cipher such as PRIDE [1] and
SIMON/SPECK [2] inside, implementations with very low
RAM and code size requirements are possible [18].
If AES-128 is chosen, the implementation can be speeded
up using the AES-NI instructions. For example, on Intel
Haswell, if SPACE is used in a parallel mode such as CTR,
one F-function call would require at most 16 clock cycles.
This yields performance estimates of at most 300, 128, 128
and 128 cycles per byte for SPACE-(8, 300), -(16, 128), -
(24, 128) and -(32, 128), respectively.
While the white-box implementation of SPACE-8 is faster
than its black-box implementation, black-box implementa-
tions of SPACE-(16, 128), -(24, 128) and -(32, 128) with AES-
NI are much faster than those of white-box implementations.
5.6.3 Tradeoff between Performance and Security
The performance of our constructions depends on the num-
ber of rounds R, which in turn is mostly determined by
the desired level of (M, Z)-space hardness. There is an ef-
ﬁcient tradeoﬀ between R and (M, Z)-space hardness. Ta-
ble 4 shows the comparison between SPACE and (broken)
ASASA at similar levels of space hardness, where the max-
imum space hardness stands for the complexity of the basic
compression attack of Section 5.3.2.
At the same level of space hardness, the white-box imple-
mentation of SPACE oﬀers exactly the same performance
as the ASASA constructions. By no means do those num-
bers (T /4, 128) and (T /35, 128) claim white-box security for
the SPACE and ASASA variants in question.
The performance and compressibility of the white-box im-
plementation of (AS)i do not change even if more layers
are added to improve the security. Hence, the ﬁgures for
ASASA-1, 2 and 3 in Table 4 remain valid for any (AS)i.
1065Table 4: Comparison of SPACE and ASASA at sim-
ilar space-hardness levels
Performance
T
Maximum
space hardness
64 L3-TL
SPACE-(16, 64)
918 KB
SPACE-(24, 64) 64 RAM-TL 218 MB
SPACE-(32, 25)
25 HDD-TL 51.5 GB
(T /4, 128)
(T /4, 128)
(T /35, 128)
ASASA-1 [4]
(T /4, 128)
ASASA-2 [4]
64 RAM-TL 384 MB
(T /4, 128)
ASASA-3 [4]
25 HDD-TL 20 GB
(T /35, 128)
ASASA-1 : S-layer consists of 8 × 16-bit
ASASA-2 : S-layer consists of 24-bit + 6 × 16-bit + 8-bit
ASASA-3 : S-layer consists of 4 × 28-bit + 16-bit
64 L3-TL
8 MB
On the other hand, in the black-box implementation of
(AS)i, the number of cycles increases linearly with the num-
ber of rounds. ASASA-1, -2 and -3 do not beneﬁt from
AES-NI unlike SPACE with AES-128. However, since the
S-boxes are 8- or 10-bit, optimizations for L1 cache are pos-
sible for all variants in the black-box environment.
5.7 Strong Space Hardness
Here we discuss an extension of the notion of space hard-
ness that we call strong space hardness:
Definition 4
(Strong (M, Z)-space hardness). An
implementation of a block cipher EK is (M, Z)-space hard if
it is infeasible to obtain a valid plaintext/ciphertext pair with
−Z given the code (table) of size less
probability higher than 2
than M .
The diﬀerence to the notion of space hardness is that the
attacker tries to ﬁnd any valid input/output pair now, not
merely a valid output for a given randomly drawn input.
Strong space hardness is relevant to message authentication
codes in the context of forgeries.
0
ℓ−1
ℓ−1
0, . . . , xr
, . . . , xr+ℓ+1
} and X r+ℓ+1 = {xr+ℓ+1
Let us try to come up with some compression attacks
against strong space hardness for SPACE. If each entry of
ℓ consecutive tables of F r, . . . F r+ℓ is chosen, states X r =
{xr
} are de-
termined. The number of start states consisting of ℓ con-
secutive tables is estimated as (2i)ℓ, where 2i is the num-
ber of known table entries. Thus, the probability of ﬁnd-
ing a valid pair with i ≤ 2na table entries is estimated as
(i/(2na ))R−ℓ×(2i)ℓ, and the time complexity is estimated as
(2i)ℓ. If i < 27.35, 214 and 230 for SPACE-(8, 300), SPACE-
(16, 128) and -(32, 128), the probability becomes less than
−128, where the code size is 2.45 KB, 230 KB and 12.9 GB,
2
respectively. For SPACE-(24, 128), six consecutive tables
are enough to determine states X r and X r+7. If i < 222.95,
−128, where the code size
the probability becomes less than 2
is 105 MB.
This evaluation is a straightforward approach to ﬁnd a
valid plaintext/ciphertext. More sophisticated attacks seem
possible. Thus, we explicitly do not make any security
claims with respect to strong space hardness for SPACE-
(8, 300), SPACE-(16, 128), -(24, 128) and -(32, 128), but the
above values can be considered as upper bounds on the level
of their strong (M, 128)-space hardness.
5.8 Other Constructions
There are other possible constructions suitable to attain
space hardness. For instance, the following design is think-
able, which combines AES in counter mode and the idea of
secret sharing among Nk instances of AES.
Let Si be
Nk⊕
Si =
j=0
AESKj (i||IV ),
where AESKj() denotes an encryption using AES-128 with
the 128-bit key Kj, i is a 64-bit variable and IV is a 64-
bit nonce. Given a 128-bit plaintext Pi, the encryption is
performed as Ci = Pi ⊕ Si, in the stream cipher fashion.
This simple construction achieves (16×Nk bytes, 128)-space
hardness due to fact that it is infeasible to compute Si with-
out the knowledge of all but few key bits. However, it re-
quires Nk AES calls for encrypting a 128-bit plaintext, which
makes its use impractical: For example, in order to achieve
(218 MB, 128)-space hardness, Nk = 13, 625, 000 AES calls
are required.
6. N-SPACE: VARIABLE SPACE
This section presents our second block cipher. It is called
N-SPACE and allows implementations with multiple vari-
able code sizes while keeping the cipher itself unchanged.
6.1 The Design
N-SPACE is an ℓ-line target-heavy generalized Feistel
network with N diﬀerent sizes of F-functions. It encrypts
an n-bit plaintext under N k-bit secret keys to an n-bit
ciphertext as shown in Fig. 7.
Let the n-bit state of round r be X r = {xr
},
ℓ−1
i ∈ {0, 1}n/ℓ. Each round updates the state as follows. If
xr
(r mod N ) = j:
1, . . . , xr
0, xr
(j+1)n/ℓ(X
′r) ⊕ (xr
j+1|| . . .||xr
ℓ−1)
)||xr
0.
′r||(
X r+1 = X
where X
′r = (xr
The instantiation of the cipher with n = 128, ℓ = 16, N =
4, and R rounds is called 4-SPACE-(R) whose round trans-
forms are speciﬁed as follows.
If (r mod N ) = 0:
X r+1 =
0) ⊕ (xr
1|| . . .||xr
ℓ−1)
F r
8 (xr
F r
0|| . . .||xr
j ).
(
1||(
2||(
3||(
24(xr
F r
F r
16(xr
ℓ−1)
0.
)||xr
)||xr
)||xr
)||xr
ℓ−1)
0.
0.
If (r mod N ) = 1:
X r+1 = xr
If (r mod N ) = 2:
X r+1 = xr
1||xr
If (r mod N ) = 3:
0||xr
1) ⊕ (xr
2|| . . .||xr
0||xr
1||xr
2) ⊕ (xr
3|| . . .||xr
0.
1||xr
2||xr
X r+1 = xr
32(xr
F r
The four F-functions F r
0|| . . .||xr
8 (x), F r
3) ⊕ (xr
16(x), F r
4|| . . .||xr
24(x), and F r
ℓ−1)
32(x)
depend on four 128-bit keys, K1, K2 and K3 and K4, respec-
tively. The F-functions of 4-SPACE are based on AES-128
na of SPACE in Section
exactly in the same way as the F r
5.1.
The particularity of 4-SPACE-(R) is that it uses four dif-
ferently sized F-functions F r
32(x).
In the white-box implementation, depending on user re-
quirements for the code size, we can choose which of the
24(x) and F r
16(x), F r
8 (x), F r
1066largest table that will dominate the overall table size. All
other tables are assumed to be available to the attacker in
full. The probability that a random input of the table is
among the known entries is i/(2m), where m is 8, 16, 24
and 32 for 4-SPACE-(R)-8, -16, -24 and -32, respectively.
Given any random plaintext or ciphertext, the correspond-
ing output after R rounds can be computed by using i table
entries with probability of (i/(2m))(R/4). This corresponds
to (i × (n − m) bits, (i/(2m))(R/4))-space hardness.
6.3 Security in the Black Box
−15 (= 2/216), 2
−22.4 (= 3/224) and 2
6.3.1 Differential Cryptanalysis
According to Theorem 1, we assume that the maximum
−7
diﬀerential probabilities of F8, F16, F24 and F32 to be 2
−30.4 (=
(= 2/28), 2
3/232), respectively. Our search for the minimum number of
diﬀerentially active F-functions with the above values of the
diﬀerential probabilities shows that the probability of any
diﬀerential characteristic is expected to become less than
−128 after 48 rounds.
2
6.3.2 Linear Cryptanalysis
Similarly to the evaluation for SPACE, we assume that
linear probabilities of F8, F16, F24 and F32 are upper-bounded
−28, respectively. Our search for
by 2
the minimum number of linearly active F-functions with the
above values of the linear probabilities yields that the prob-
ability of the best linear characteristic becomes less than
−128 after 16 rounds.
2
6.3.3
Any input bit nonlinearly aﬀects all state bits after 17
rounds. With the miss-in-the-middle approach, we have
not found any useful impossible diﬀerentials after about 34
rounds.