title:Improving secure server performance by re-balancing SSL/TLS handshakes
author:Claude Castelluccia and
Einar Mykletun and
Gene Tsudik
Improving Secure Server Performance by Re-balancing SSL/TLS Handshakes
Improving Secure Server Performance by Re-balancing SSL/TLS Handshakes
Claude Castelluccia
Zirst - 655 avenue de l’Europe
38334 Saint Ismier Cedex
INRIA
France
Einar Mykletun, Gene Tsudik
Computer Science
University of California, Irvine
Irvine, CA 92697-3425
USA
PI:EMAIL
{mykletun,gts}@ics.uci.edu
ABSTRACT
Much of today’s distributed computing takes place in a client
/server model. Despite advances in fault tolerance – in par-
ticular, replication and load distribution – server overload
remains to be a major problem. In the Web context, one
of the main overload factors is the direct consequence of ex-
pensive Public Key operations performed by servers as part
of each SSL handshake. Since most SSL-enabled servers
use RSA, the burden of performing many costly decryption
operations can be very detrimental to server performance.
This paper examines a promising technique for re-balancing
RSA-based client/server handshakes. This technique facil-
itates more favorable load distribution by requiring clients
to perform more work (as part of encryption) and servers to
perform commensurately less work, thus resulting in better
SSL throughput. Proposed techniques are based on careful
adaptation of variants of Server-Aided RSA originally
constructed by Matsumoto, et al.
[1]. Experimental re-
sults demonstrate that suggested methods (termed Client-
Aided RSA) can speed up processing of RSA private key
operations by a factor of between 11 to 19, depending on the
RSA key size. This represents a considerable improvement.
Furthermore, proposed techniques can be a useful compan-
ion tool for SSL Client Puzzles in defense against DoS and
DDoS attacks.
Keywords: Load-balancing, Server-Aided RSA, Denial-of-
Service, Server-Aided Secure Computation, Client Puzzles,
Hardware Accelerators
1.
INTRODUCTION
Much of today’s distributed computing takes place in a
client/server setting. Server overload, whether due to an
on-slaught of legitimate client requests or a Denial-of-Service
(DoS) attack, is common occurrence in modern client/server
environments, such as the Web. Typically, a server becomes
swamped under a ﬂood of simultaneous or closely spaced
requests, each requiring it to perform some costly computa-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’06, March 21–24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...$5.00.
tion, e.g., decrypt a key purportedly encrypted by a client.
Techniques for graceful service degradation have been stud-
ied in the past and implemented in real-world servers. Traf-
ﬁc management and congestion control literature oﬀers nu-
merous methods for mitigating traﬃc spikes in routers. Also,
advances in fault tolerance – in particular, replication and
load distribution – have been very beneﬁcial to Web servers.
However, DoS attacks are not thwarted by such measures
since their central goal is to deny service to legitimate clients.
Moreover, server overload can occur for reasons other than
hostile attacks, e.g., a large number of concurrent benign
client requests can still overwhelm a popular server. This
can result in server crashes or in denial-of-service to clients
who are literally left hanging or presented with a familiar
“server busy” message.
Scope of Paper: In this paper, we explore one possible ap-
proach to alleviating server load in the Web setting. Specif-
ically, we target SSL/TLS client-server handshakes and fo-
cus on altering the computational balance (and burden) be-
tween SSL clients and servers. This paper makes a con-
tribution by investigating so-called Server-Aided RSA (SA-
RSA) techniques as a way of reducing server overload1. SA-
RSA was originally proposed as a way to reduce load on
small devices (primarily smartcards) by farming out some
heavy-weight cryptographic computation to more powerful
servers – host computers equipped with smartcard readers.
We adapt SA-RSA to the SSL/TLS setting by re-assigning
the roles: SSL clients become “servers” in SA-RSA par-
lance and overloaded SSL servers become “weak clients”.
The resultant Client-Aided RSA (CA-RSA) turns out to be
very eﬀective, achieving private-key computation speed-ups
of between 11 and 19 times over plain RSA, for RSA mod-
uli varying between 1024 and 2048 bits, resulting in SSL
speed-ups of between 2.12 and 2.22, respectively.
From the outset, we note that there are alternative tech-
niques for speeding up, or reducing load on, SSL/TLS servers,
such as employing Elliptic Curve-based cryptosystems. How-
ever, we believe that, in the near future, the well-known
and time-tested RSA cryptosystem will continue to domi-
nate in SSL/TLS handshake protocol. Therefore, this pa-
per focuses on improving SSL/TLS performance assuming
the use of RSA. (Other relevant approaches and techniques,
e.g., cryptographic hardware accelerators, are discussed in
Section 5.)
1Contrary to “popular belief”, our proposed solution is not
subject to the meet-in-the-middle attack proposed in [2]

Client
SSL Server
rc, cipher-specs
client hello
−−−−−−−−−−−−−−−−−→
server hello
rs, cipherspecs
←−−−−−−−−−−−−−−−−
x ∈R {0, 1}48
k = f (x, rc, rs)
y = xe (mod n)
client key exchange
−−−−−−−−−−−−−−−−→
server ﬁnish
←−−−−−−−−−−−−−−−−
Figure 1: The SSL handshake
x = yd (mod n)
k = f (x, rc, rs)
Organization of Paper: The rest of the paper is orga-
nized as follows. Section 2 overviews SSL/TLS and mo-
tivates our work. Section 3 describes our SSL extension,
Client-Aided RSA, for speeding up performance of secure
servers and presents performance results. Section 4 extends
our protocol to protect against DoS attacks. Related work
is reviewed in section 5 and section 6 concludes the paper.
2. OVERVIEW OF SSL/TLS
This section describes the SSL/TLS handshake protocol
[3]. In the remainder of the paper, the term“SSL” is used
to refer to both SSL and TLS standards. SSL is the most
widely used protocol to ensure secure communication over
the Internet. It is typically employed by web servers to pro-
tect electronic transactions. SSL uses the RSA cryptosys-
tem during an initial client/server handshake to establish a
shared symmetric key for use during an SSL session2.
2.1 SSL Handshake Protocol Description
The simplest version of the SSL handshake (key-establishment)
protocol is shown in ﬁgure 1 and consists of two communi-
cation rounds that contain the following messages and com-
putations:
1. Client sends a “client hello” message to server. This
indicates that client wants to initialize a SSL/TLS ses-
sion and the message includes the cipher suites client
supports and a random nonce rc.
2. Server responds with a “server hello” message that
includes server’s public-key certiﬁcate and a random
nonce rs. It also speciﬁes server’s choice of cipher suite
from among client’s candidates.
3. Client chooses a secret random 48-byte3 pre-master
secret x and computes the shared master secret k by
inputting values x, rc, rs into hash function f . It then
2Diﬃe-Hellman is also supported, at least, according to SSL
speciﬁcations. However, neither Microsoft nor Netscape of-
fer browser support for non-RSA certiﬁcates [4].
3Actually, only 46 of the 48 bytes are random. The other 2
bytes contain the SSL version number.
encrypts x with the server’s RSA public key and at-
taches the ciphertext to a “client key exchange” mes-
sage that is sent to server.
4. Server decrypts the pre-master secret using its private
RSA key, and uses it to compute the shared master se-
cret as f (x, rc, rs). To conclude the handshake, server
sends a “server ﬁnished” message that includes a keyed
hash of all handshake messages.
The most computationally expensive step in the SSL hand-
shake protocol is the server’s RSA private-key decryption.
Critical web servers often employ expensive cryptographic
hardware to speed-up the decryption process, enabling them
to handle more simultaneous SSL handshake requests, and,
thereby, more SSL connections. Hardware accelerators and
other techniques for speeding up RSA decryptions are dis-
cussed in section 5.
2.2 Computational Imbalance
As noted above, the goal of the SSL/TLS handshake is
the establishment of a shared client-server key. The most
important component of this process is the client’s encryp-
tion of a (randomly selected) key under the server’s RSA
public key. The ciphertext is then transmitted to the server
which decrypts it and extracts the key. The core of the
over-exertion problem is the RSA decryption operation.
RSA is a mature, well-studied and nearly ubiquitous pub-
lic key encryption method [5]. However, many (perhaps
even most) implementations of RSA encryption are compu-
tationally lopsided: they use small public exponents, such
as: 3, 17, and 216 + 1. As a result, RSA encryption is
relatively cheap, requiring only a few modular multiplica-
tions, whereas, corresponding decryption is expensive as it
requires a full-blown exponentiation with the private expo-
nent (d). We note that decryption remains expensive even
if the well-known CRT (Chinese Remainder Theorem) tech-
nique is used to speed it up. This imbalanced arrangement
is clearly beneﬁcial for computationally challenged clients,
however, it is detrimental to server’s connection throughput
and general availability.
One possible solution to correct the imbalance is to select
the private exponent d to be small, thereby speeding up de-
cryption. However, choosing too small of a value leads to

RSA becoming insecure, as shown in [6]. Therefore the per-
formance improvement provided by this solution is limited.
A more drastic approach is to alter the underlying key
establishment protocol to have the server generate and en-
crypt the session key, thus shifting the decryption burden
to the client. Besides being a radical change, this would ne-
cessitate a client ﬁrst supplying an RSA public key to the
server.
If the client’s public key is uncertiﬁed, the server
would need to perform a public key encryption without ver-
ifying the supplied public key. This, once again, presents an
opportunity for DoS attacks. To require all clients’ public
keys to be certiﬁed is a major burden for clients. Moreover,
the server would need to verify a certiﬁcate chain for each
connection which is an expensive proposition.
However, the main problem with the above approach is
that the server would still need to be authenticated. Recall
that the key establishment in SSL/TLS serves a dual pur-
pose:
in addition to securely transporting a client-selected
key to the server, the protocol implicitly authenticates the
server. The latter would be lost if the server encrypts the
session key for the client; unless, of course, the server signs
something which brings us right back to the computational
imbalance issue.
3. CLIENT-AIDED RSA
The purpose of the above discussion is to motivate tech-
niques for re-balancing the lopsidedness of RSA decryption
and, as a result, speeding up decryption operations on the
server side. To do so, we focus on the well-known general
technique of Server-Aided Secret Computation (SASC) and
Server-Aided RSA (SA-RSA), in particular. The original
idea of Server-Aided RSA is due to Matsumoto, et al.
[1].
Its prime motivation is to oﬀ-load expensive RSA signature
computation from a weak device (such as a smartcard) to a
powerful-but-untrusted server, without exposing any infor-
mation about the device’s private exponent.
In this paper, we ﬂip SA-RSA around to obtain Client-
Aided RSA (CA-RSA). The main idea is to shift some
computational burden from the server to the clients. Specif-
ically, we want the clients to perform the bulk of the work in
RSA decryption, thereby allowing the server to accept and
process more incoming requests.
3.1 Protocol Description
We now describe the CA-RSA algorithm. We ﬁrst intro-
duce the basic version and then extend it to obtain CA-RSA.
3.1.1 Basic Version
We begin by representing the server’s private exponent as
d = f1d1 + f2d2 + ... + fkdk (mod φ(n)), where the fi’s and
di’s are random vector elements of c and |n| bits, respec-
tively.
The following process take place when a server wants to
oﬄoad the computation xd (mod n) to a client:
1. Server sends vector D = (d1, d2, ..., dk) to client.
2. Client computes vector Z = (z1, z2, ..., zk), where zi =
xdi (mod n), and sends it back to server.
3. Finally, server computes Qk
i=1 zfi
i = Qk
i=1 xfidi = xd