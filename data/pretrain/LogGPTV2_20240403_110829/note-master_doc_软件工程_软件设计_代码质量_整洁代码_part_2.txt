- 多余的注释/废话注释
编写代码时 着重于代码的表现力 而非加之以注释
```java
// bad 等待timeout个时间 然后关闭
void close(int timeout){
  wait(timeout);
  close();
}
```
- 误导性注释 代码与注释所说的不是一回事
- 循规蹈矩注释：每个方法变量都要javadoc
- 日志式注释记录每一次修改 在版本控制系统出现后意义不大
- 标记栏注释
```java
// 注意!!! ////////////
```
特别重要才使用 使用多的话 就会被淹没在大量斜杠中
- 括号后面的注释
对于大函数或许才有意义
```java
try{
  if (){
    while(){
    }//while
  } // if
}catch{
} // catch
```
- 作者与署名 同样 VCS可以工作的更好
- 注释掉的代码
- 包含着HTML标签的注释
- 携带非本地信息
```java
// 提交任务 每隔5分钟运行一次 这里的5分钟跟这个函数毫无关系
void submitTask();
```
- 信息过多 将一些RFC提案整个添加到注释里
## 格式
原始代码其代码风格和可读性仍会影响到其可维护性和可扩展性
### 垂直格式
短文件比常文静更易于理解
```java
// 紧密在一起的代码代表概念相关
DeliveryInfoDO deliveryInfoDO = new DeliveryInfoDO();
deliveryInfoDO.setBuilding(deliveryDTO.getBuilding());
deliveryInfoDO.setDetail(deliveryDTO.getDetail());
                                        // 使用空白行隔开 每个空白行都是一个线索
deliveryRepository.save(deliveryInfoDO);
if (deliveryDTO.getDefaultDelivery() != null && deliveryDTgetDefaultDelivery()) {
    consumerDeliveryRepository.resetDefaultDelivery(consumer.getUserId());
}
```
垂直距离：
关系密切的概念应相互靠近
- 本地变量声明尽可能靠近其使用位置
- 实体变量声明在类的顶部(Java)
- 有联系的函数放在一起 调用者尽可能在被调用者上面
### 横向格式
尽力保持代码行短小
使用空格分割相关性较弱的元素：
- 分割赋值操作符
```java
int[] data = new int[10];
```
- 分割函数参数
```java
deliveryService.updateDelivery(token, deliveryId, deliveryDTO);
```
使用缩进表现源文件的继承结构 缩进可以快速展现出当前的范围
## 对象和数据结构
过程式代码容易在不改动数据结构的情况下增加函数
面向对象则容易在不改动函数的情况下增加新类
迪米特法则：模块不应了解它所操作对象的内部情形
```java
// bad
String url = host.getContext().getServlet().getName();
```
避免在DTO中塞入逻辑 保持简单setget即可
## 错误处理
- 使用异常而非返回码
- 先写try-catch语句
try-catch定义了一个范围 使用TDD开发剩下的逻辑
- 使用不可控异常
可控异常违反了开闭原则 底层的修改会直接贯穿到高层
- 构造异常时 提供足够的环境说明 以便快速排错
- 根据调用者需要定义异常 也就说打包第三方 API
```java
try {
} catch(ThirdPartException e){
  throw new BusinessException(e);
}
```
- 使用特例模式来避免应付异常
```java
// bad
try {
  getEmployee().run();
} catch(NullPointerException e){
  ...
}
void getEmployee(){
  maybe return null;
}
// good
void getEmployee(){
  normal return new Employee();
  sometimes return new EmptyEmployee();
}
```
- 避免传递null
## 边界
整洁的边界应该避免我们的代码过多了解第三方代码中的信息
### 第三方包
封装第三方API来避免在系统中传递使用第三方接口
学习性测试：通过编写测试来学习第三方API
- 不仅可以学习API使用
- 同时测试也是更新第三方包时的保障
### 使用尚不存在的代码
通过适配器适配尚未实现的接口 来进行已知与未知的隔离
```java
// 未知
interface ThirdPartInterface{...}
// 未知与已知的交界处
interface ThirdPartAdapter extends ThirdPartInterface{...}
```
## 类
组织：
```java
public static int PORT = 8080;
private static String MAGIC_NUMBER = 0XCAFE_BABE;
private String instanceName;
protected String subName;
public void run(){...}
private void innerRun(){...}
```
尽可能进行封装 除非玩不得以 否则不要暴露
类应该短小：
判断类短小的标准使用职责数来衡量 而非代码行数
系统应该由许多短小的类而非少量巨大的类组成
类应只由少量实体变量组成 这些变量如果同时被越多的函数操作 就代表这个类内聚性越高
通过拆分函数以及函数相关的实体变量到其他类来将一个大类拆分为几个小类
方便修改的组织：
- 符合OCP
- 使用接口隔离修改
当采取诸如DIP等原则时 系统各个组件的耦合就已经非常低了 此时也方便测试
## 系统
### 分离系统的构造与使用
使用main组件：
![2020910143051](/assets/2020910143051.png)
使用工厂控制对象的创建
使用依赖注入容器来管理对象
### 测试驱动系统架构
代码层面与架构关注面分离开 避免侵入性代码
没有必要先做大设计
### 延迟决策
### 使用DSL
填平了领域与实现之间代码的壕沟
## 迭进
简单设计原则：
- 运行所有测试 会促使类短小且单一 符合SRP 同时测试越多 代码之间耦合越低 符合DIP
- 重构 测试消除了对修改代码的恐惧
- 不可重复
- 代码具有良好的表达力 使用好名称 标准命名法 良好的单元测试也能表达出某个类的作用
- 尽可能减少类和方法 似乎违反SRP 但是这条规则与SRP达到一个平衡
## 并发编程
并发解耦了目的与时机
一些问题：
- 并发一般只有在IO密集型的程序或者有多个处理器上的机器才有效率提升
- 并发系统的设计与单线程设计极不相同
- 正确的并发是很复杂的
### 防御原则
谨记数据封装 限制数据作用域 严格限制多个线程访问的共享数据
使用数据复本 有些情况下的并发可以只读 这个时候可以使用复制的方式避免共享
线程应尽可能独立 不与其他线程共享数据
### 执行模型
大部分并发问题都是下列模型的变种：
- 生产者-消费者 限定资源模型 有着固定数量的资源
- 读者-写者 读写问题
- 哲学家就餐问题 资源竞争问题
### 建议
不要在客户端调用一个对象的多个同步方法： 这可能造成多个线程下的数据不一致问题
解决：
- 客户端代码锁定
```java
synchronized(lock){
  obj.f1();
  obj.f1();
}
```
- 服务端锁定
```java
// AtomicInteger
public int incrementAndGet(){}
```
- 适配服务端 使用适配器模式
保持同步区域微小
尽早考虑关闭问题
### 测试
将偶然的失败看做线程问题
先确保单线程代码可工作
配置多线程代码在不同的配置环境下执行
在代码里插入试错代码：sleep yeild
- 手工
- aop
## 速查
### 注释
- 注释应只包含有关代码的技术信息 像修改时间 作者等没必要放入注释
- 对于过时 不正确的注释 这些注释很快就会消失 少写
- 少写废话注释 代码已经能表达的 没必要加注释
- 注释需要花时间写到最好
- 代码不要注释 直接删除
### 环境
系统构建与运行单元测试应只需一个指令
### 函数
- 参数越少越好
- 输出参数违反直觉 避免使用
- 标识参数应该被消灭
- 丢弃永不调用的方法
### 一般性问题
- 理想的源文件只包含一种编程语言
- 函数或者类的实现应该是其他程序员所期待的
- 对于测试需要追索每种边界条件
- 忽视安全警告相当危险
- 重复
  - 最明显的是重复代码
  - 较隐蔽的是相同的条件判断 if switch链条
  - 最隐蔽的是算法相似 但代码不同
- 建立合适的抽象层级
  - 抽象类来容纳较高层的概念 实现类容纳较低层
- 通常来说 父类对之类一无所知
- 隐藏数据 通过隐藏来达到限制信息 从而控制耦合度
- 删除不执行的死代码
- 垂直分隔
  - 本地变量应该定义在其首次使用的上面 私有函数应该定义在其首次使用的下面
- 概念前后不一致
- 毫无关系的东西不该耦合
- 类的方法应该只对它自己的变量及函数感兴趣 少去依赖外部类的变量函数
- 代码要充分展现作者意图
- 对于需要考虑动态行为的静态方法 可能有问题
- 使用临时变量存储计算过程 提供可读性
- 函数名称应表达其行为
- 要理解自己编写的算法
- 模块的依赖应该是物理依赖
- 使用多态取代if switch
- 遵循团队代码规范
- 用命名常量代替魔数
- 避免代码含糊不清
- 良好的结构优于良好的命名
- 对条件表达式进行命名
- 一个函数只做一件事
- 暴露函数调用的前后顺序
- 封装边界条件
- 函数应该只有一种抽象层级
- 配置数据放在高层
- 避免传递浏览 也就是最小知道原则
### Java
- 使用导入通配符避免过长的导入列表
- 不要通过继承的方式使用常量
### 名称
- 使用描述性的名称
- 名称应与抽象层级相符
- 使用标准命名法
- 名称无歧义
- 为较大的范围选用较长的名称
- 避免编码 前缀后缀
- 名称要说明副作用
### 测试
- 使用覆盖率测试覆盖大部分测试
- 注意边界条件
- 缺陷可能扎堆发生
- 测试要快