schema. Otherwise it is created in the current schema. The name of the new object type
body must match an existing object type specification in the same schema. The new
object type body name must not match any existing object type body in the same schema
unless the intent is to update the definition of an existing object type body, in which case
use CREATE OR REPLACE TYPE BODY.
Parameters
name
The name (optionally schema-qualified) of the object type for which a body is to
be created.
MEMBER
STATIC
Specify MEMBER if the subprogram operates on an object instance. Specify
STATIC if the subprogram operates independently of any particular object
instance.
proc_name
The name of the procedure to create.
SELF [ IN | IN OUT ] name
For a member method there is an implicit, built-in parameter named SELF whose
data type is that of the object type being defined. SELF refers to the object
instance that is currently invoking the method. SELF can be explicitly declared as
an IN or IN OUT parameter in the parameter list. If explicitly declared, SELF
must be the first parameter in the parameter list. If SELF is not explicitly declared,
its parameter mode defaults to IN OUT for member procedures and IN for
member functions.
argname
The name of an argument. The argument is referenced by this name within the
method body.
argtype
The data type(s) of the method‟s arguments. The argument types may be a base
data type or a user-defined type such as a nested table or an object type. A length
must not be specified for any base type - for example, specify VARCHAR2, not
VARCHAR2(10).
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 149
Database Compatibility for Oracle® Developers
Reference Guide
DEFAULT value
Supplies a default value for an input argument if one is not supplied in the method
call. DEFAULT may not be specified for arguments with modes IN OUT or OUT.
program_body
The pragma, declarations, and SPL statements that comprise the body of the
function or procedure. The pragma may be PRAGMA
AUTONOMOUS_TRANSACTION to set the function or procedure as an autonomous
transaction.
func_name
The name of the function to create.
rettype
The return data type, which may be any of the types listed for argtype. As for
argtype, a length must not be specified for rettype.
Examples
Create the object type body for object type emp_obj_typ given in the example for the
CREATE TYPE command.
CREATE OR REPLACE TYPE BODY emp_obj_typ AS
MEMBER PROCEDURE display_emp (SELF IN OUT emp_obj_typ)
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('Employee No : ' || empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || ename);
DBMS_OUTPUT.PUT_LINE('Street : ' || addr.street);
DBMS_OUTPUT.PUT_LINE('City/State/Zip: ' || addr.city || ', ' ||
addr.state || ' ' || LPAD(addr.zip,5,'0'));
END;
END;
Create the object type body for object type dept_obj_typ given in the example for the
CREATE TYPE command.
CREATE OR REPLACE TYPE BODY dept_obj_typ AS
STATIC FUNCTION get_dname (p_deptno IN NUMBER) RETURN VARCHAR2
IS
v_dname VARCHAR2(14);
BEGIN
CASE p_deptno
WHEN 10 THEN v_dname := 'ACCOUNING';
WHEN 20 THEN v_dname := 'RESEARCH';
WHEN 30 THEN v_dname := 'SALES';
WHEN 40 THEN v_dname := 'OPERATIONS';
ELSE v_dname := 'UNKNOWN';
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 150
Database Compatibility for Oracle® Developers
Reference Guide
END CASE;
RETURN v_dname;
END;
MEMBER PROCEDURE display_dept
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('Dept No : ' || SELF.deptno);
DBMS_OUTPUT.PUT_LINE('Dept Name : ' ||
dept_obj_typ.get_dname(SELF.deptno));
END;
END;
See Also
CREATE TYPE, DROP TYPE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 151
Database Compatibility for Oracle® Developers
Reference Guide
2.3.38 CREATE USER
Name
CREATE USER -- define a new database user account
Synopsis
CREATE USER name [IDENTIFIED BY password]
Description
CREATE USER adds a new user to an Advanced Server database cluster. You must be a
database superuser to use this command.
When the CREATE USER command is given, a schema will also be created with the same
name as the new user and owned by the new user. Objects with unqualified names
created by this user will be created in this schema.
Parameters
name
The name of the user.
password
The user‟s password. The password can be changed later using ALTER USER.
Notes
The maximum length allowed for the user name and password is 63 characters.
Examples
Create a user named, john.
CREATE USER john IDENTIFIED BY abc;
See Also
DROP USER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 152
Database Compatibility for Oracle® Developers
Reference Guide
2.3.39 CREATE USER|ROLE… PROFILE MANAGEMENT
CLAUSES
Name
CREATE USER|ROLE
Synopsis
CREATE USER|ROLE name [[WITH] option […]]
where option can be the following compatible clauses:
PROFILE profile_name
| ACCOUNT {LOCK|UNLOCK}
| PASSWORD EXPIRE [AT 'timestamp']
or option can be the following non-compatible clauses:
| LOCK TIME 'timestamp'
For information about the administrative clauses of the CREATE USER or CREATE ROLE
command that are supported by Advanced Server, please see the PostgreSQL core
documentation available at:
https://www.postgresql.org/docs/11/static/sql-commands.html
Description
CREATE ROLE|USER… PROFILE adds a new role with an associated profile to an
Advanced Server database cluster.
Roles created with the CREATE USER command are (by default) login roles. Roles
created with the CREATE ROLE command are (by default) not login roles. To create a
login account with the CREATE ROLE command, you must include the LOGIN keyword.
Only a database superuser can use the CREATE USER|ROLE clauses that enforce profile
management; these clauses enforce the following behaviors:
Include the PROFILE clause and a profile_name to associate a pre-defined
profile with a role, or to change which pre-defined profile is associated with a
user.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 153
Database Compatibility for Oracle® Developers
Reference Guide
Include the ACCOUNT clause and the LOCK or UNLOCK keyword to specify that the
user account should be placed in a locked or unlocked state.
Include the LOCK TIME 'timestamp' clause and a date/time value to lock the
role at the specified time, and unlock the role at the time indicated by the
PASSWORD_LOCK_TIME parameter of the profile assigned to this role. If LOCK
TIME is used with the ACCOUNT LOCK clause, the role can only be unlocked by a
database superuser with the ACCOUNT UNLOCK clause.
Include the PASSWORD EXPIRE clause with the optional AT 'timestamp'
keywords to specify a date/time when the password associated with the role will
expire. If you omit the AT 'timestamp' keywords, the password will expire
immediately.
Each login role may only have one profile. To discover the profile that is currently
associated with a login role, query the profile column of the DBA_USERS view.
Parameters
name
The name of the role.
profile_name
The name of the profile associated with the role.
timestamp
The date and time at which the clause will be enforced. When specifying a value
for timestamp, enclose the value in single-quotes.
Examples
The following example uses CREATE USER to create a login role named john who is
associated with the acctg_profile profile:
CREATE USER john PROFILE acctg_profile IDENTIFIED BY “1safepwd”;
john can log in to the server, using the password 1safepwd.
The following example uses CREATE ROLE to create a login role named john who is
associated with the acctg_profile profile:
CREATE ROLE john PROFILE acctg_profile LOGIN PASSWORD “1safepwd”;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 154
Database Compatibility for Oracle® Developers
Reference Guide
john can log in to the server, using the password 1safepwd.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 155
Database Compatibility for Oracle® Developers
Reference Guide
2.3.40 CREATE VIEW
Name
CREATE VIEW -- define a new view
Synopsis
CREATE [ OR REPLACE ] VIEW name [ ( column_name [, ...] ) ]
AS query
Description
CREATE VIEW defines a view of a query. The view is not physically materialized.
Instead, the query is run every time the view is referenced in a query.
CREATE OR REPLACE VIEW is similar, but if a view of the same name already exists, it
is replaced.
If a schema name is given (for example, CREATE VIEW myschema.myview ...) then the
view is created in the specified schema. Otherwise it is created in the current schema. The
view name must be distinct from the name of any other view, table, sequence, or index in
the same schema.
Parameters
name
The name (optionally schema-qualified) of a view to be created.
column_name
An optional list of names to be used for columns of the view. If not given, the
column names are deduced from the query.
query
A query (that is, a SELECT statement) which will provide the columns and rows
of the view.
Refer to SELECT for more information about valid queries.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 156
Database Compatibility for Oracle® Developers
Reference Guide
Notes
Currently, views are read only - the system will not allow an insert, update, or delete on a
view. You can get the effect of an updatable view by creating rules that rewrite inserts,
etc. on the view into appropriate actions on other tables.
Access to tables referenced in the view is determined by permissions of the view owner.
However, functions called in the view are treated the same as if they had been called
directly from the query using the view. Therefore the user of a view must have
permissions to call all functions used by the view.
Examples
Create a view consisting of all employees in department 30:
CREATE VIEW dept_30 AS SELECT * FROM emp WHERE deptno = 30;
See Also
DROP VIEW
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 157
Database Compatibility for Oracle® Developers
Reference Guide
2.3.41 DELETE
Name
DELETE -- delete rows of a table
Synopsis
DELETE [ optimizer_hint ] FROM table[@dblink ]
[ WHERE condition ]
[ RETURNING return_expression [, ...]
{ INTO { record | variable [, ...] }
| BULK COLLECT INTO collection [, ...] } ]
Description
DELETE deletes rows that satisfy the WHERE clause from the specified table. If the WHERE
clause is absent, the effect is to delete all rows in the table. The result is a valid, but
empty table.
Note: The TRUNCATE command provides a faster mechanism to remove all rows from a
table.
The RETURNING INTO { record | variable [, ...] } clause may only be
specified if the DELETE command is used within an SPL program. In addition the result
set of the DELETE command must not include more than one row, otherwise an exception
is thrown. If the result set is empty, then the contents of the target record or variables are
set to null.
The RETURNING BULK COLLECT INTO collection [, ...] clause may only be
specified if the DELETE command is used within an SPL program. If more than one
collection is specified as the target of the BULK COLLECT INTO clause, then each
collection must consist of a single, scalar field – i.e., collection must not be a
record. The result set of the DELETE command may contain none, one, or more rows.
return_expression evaluated for each row of the result set, becomes an element in
collection starting with the first element. Any existing rows in collection are
deleted. If the result set is empty, then collection will be empty.
You must have the DELETE privilege on the table to delete from it, as well as the SELECT
privilege for any table whose values are read in the condition.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 158
Database Compatibility for Oracle® Developers
Reference Guide
Parameters
optimizer_hint
Comment-embedded hints to the optimizer for selection of an execution plan.
table
The name (optionally schema-qualified) of an existing table.
dblink
Database link name identifying a remote database. See the CREATE DATABASE
LINK command for information on database links.
condition
A value expression that returns a value of type BOOLEAN that determines the rows
which are to be deleted.
return_expression
An expression that may include one or more columns from table. If a column
name from table is specified in return_expression, the value substituted for
the column when return_expression is evaluated is the value from the
deleted row.
record
A record whose field the evaluated return_expression is to be assigned. The
first return_expression is assigned to the first field in record, the second
return_expression is assigned to the second field in record, etc. The
number of fields in record must exactly match the number of expressions and
the fields must be type-compatible with their assigned expressions.
variable
A variable to which the evaluated return_expression is to be assigned. If
more than one return_expression and variable are specified, the first
return_expression is assigned to the first variable, the second
return_expression is assigned to the second variable, etc. The number of
variables specified following the INTO keyword must exactly match the number
of expressions following the RETURNING keyword and the variables must be
type-compatible with their assigned expressions.
collection
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 159
Database Compatibility for Oracle® Developers
Reference Guide
A collection in which an element is created from the evaluated
return_expression. There can be either a single collection which may be a
collection of a single field or a collection of a record type, or there may be more
than one collection in which case each collection must consist of a single field.
The number of return expressions must match in number and order the number of
fields in all specified collections. Each corresponding return_expression and
collection field must be type-compatible.
Examples
Delete all rows for employee 7900 from the jobhist table:
DELETE FROM jobhist WHERE empno = 7900;
Clear the table jobhist:
DELETE FROM jobhist;
See Also
TRUNCATE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 160
Database Compatibility for Oracle® Developers
Reference Guide
2.3.42 DROP DATABASE LINK
Name
DROP DATABASE LINK -- remove a database link
Synopsis
DROP [ PUBLIC ] DATABASE LINK name
Description
DROP DATABASE LINK drops existing database links. To execute this command you
must be a superuser or the owner of the database link.
Parameters
name
The name of a database link to be removed.
PUBLIC
Indicates that name is a public database link.
Examples
Remove the public database link named, oralink:
DROP PUBLIC DATABASE LINK oralink;
Remove the private database link named, edblink:
DROP DATABASE LINK edblink;
See Also
CREATE DATABASE LINK
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 161
Database Compatibility for Oracle® Developers
Reference Guide
2.3.43 DROP DIRECTORY
Name
DROP DIRECTORY -- remove a directory alias for a file system directory path
Synopsis
DROP DIRECTORY name
Description
DROP DIRECTORY drops an existing alias for a file system directory path that was
created with the CREATE DIRECTORY command. To execute this command you must be
a superuser.
When a directory alias is deleted, the corresponding physical file system directory is not
affected. The file system directory must be deleted using the appropriate operating
system commands.
Parameters
name
The name of a directory alias to be removed.
Examples
Remove the directory alias named empdir:
DROP DIRECTORY empdir;
See Also
CREATE DIRECTORY
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 162
Database Compatibility for Oracle® Developers
Reference Guide
2.3.44 DROP FUNCTION
Name
DROP FUNCTION -- remove a function
Synopsis
DROP FUNCTION [ IF EXISTS ] name
[ ([ [ argmode ] [ argname ] argtype ] [, ...]) ]
[ CASCADE | RESTRICT ]
Description
DROP FUNCTION removes the definition of an existing function. To execute this
command you must be a superuser or the owner of the function. All input (IN, IN OUT)
argument data types to the function must be specified if this is an overloaded function.
(This requirement is not compatible with Oracle databases. In Oracle, only the function
name is specified. Advanced Server allows overloading of function names, so the
function signature given by the input argument data types is required in the Advanced
Server DROP FUNCTION command of an overloaded function.)
Usage of IF EXISTS, CASCADE, or RESTRICT is not compatible with Oracle databases
and is used only by Advanced Server.
Parameters
IF EXISTS
Do not throw an error if the function does not exist. A notice is issued in this case.
name
The name (optionally schema-qualified) of an existing function.
argmode
The mode of an argument: IN, IN OUT, or OUT. If omitted, the default is IN. Note
that DROP FUNCTION does not actually pay any attention to OUT arguments, since