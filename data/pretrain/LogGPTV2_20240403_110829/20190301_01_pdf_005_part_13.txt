### 2.3.37 CREATE TYPE BODY

**Name**
CREATE TYPE BODY — Define the implementation of an object type.

**Synopsis**
```sql
CREATE [ OR REPLACE ] TYPE BODY name AS
[ MEMBER | STATIC ] PROCEDURE | FUNCTION proc_name ( [ SELF [ IN | IN OUT ] name, ] argname argtype [ DEFAULT value ], ... )
RETURN rettype IS
program_body
END;
```

**Description**
The `CREATE TYPE BODY` command defines the implementation (body) of an object type. If the `OR REPLACE` clause is used, it replaces the existing body if one already exists with the same name in the same schema.

- The new object type body must match an existing object type specification in the same schema.
- The new object type body name must be unique within the schema unless you are updating an existing object type body using `CREATE OR REPLACE TYPE BODY`.

**Parameters**

- **name**: The name (optionally schema-qualified) of the object type for which a body is to be created.
- **MEMBER | STATIC**: 
  - `MEMBER`: Specifies that the subprogram operates on an object instance.
  - `STATIC`: Specifies that the subprogram operates independently of any particular object instance.
- **proc_name**: The name of the procedure or function to create.
- **SELF [ IN | IN OUT ] name**: For a member method, there is an implicit parameter named `SELF` whose data type is that of the object type being defined. `SELF` refers to the object instance that is currently invoking the method. It can be explicitly declared as an `IN` or `IN OUT` parameter and must be the first parameter in the list. If not explicitly declared, its parameter mode defaults to `IN OUT` for member procedures and `IN` for member functions.
- **argname**: The name of an argument. The argument is referenced by this name within the method body.
- **argtype**: The data type(s) of the method's arguments. The argument types may be a base data type or a user-defined type such as a nested table or an object type. A length must not be specified for any base type (e.g., use `VARCHAR2`, not `VARCHAR2(10)`).
- **DEFAULT value**: Provides a default value for an input argument if one is not supplied in the method call. `DEFAULT` cannot be specified for arguments with modes `IN OUT` or `OUT`.
- **program_body**: The pragma, declarations, and SPL statements that comprise the body of the function or procedure. The pragma may be `PRAGMA AUTONOMOUS_TRANSACTION` to set the function or procedure as an autonomous transaction.
- **func_name**: The name of the function to create.
- **rettype**: The return data type, which may be any of the types listed for `argtype`. As for `argtype`, a length must not be specified for `rettype`.

**Examples**

1. Create the object type body for `emp_obj_typ`:
   ```sql
   CREATE OR REPLACE TYPE BODY emp_obj_typ AS
   MEMBER PROCEDURE display_emp (SELF IN OUT emp_obj_typ) IS
   BEGIN
       DBMS_OUTPUT.PUT_LINE('Employee No : ' || empno);
       DBMS_OUTPUT.PUT_LINE('Name : ' || ename);
       DBMS_OUTPUT.PUT_LINE('Street : ' || addr.street);
       DBMS_OUTPUT.PUT_LINE('City/State/Zip: ' || addr.city || ', ' || addr.state || ' ' || LPAD(addr.zip,5,'0'));
   END;
   END;
   ```

2. Create the object type body for `dept_obj_typ`:
   ```sql
   CREATE OR REPLACE TYPE BODY dept_obj_typ AS
   STATIC FUNCTION get_dname (p_deptno IN NUMBER) RETURN VARCHAR2 IS
   v_dname VARCHAR2(14);
   BEGIN
       CASE p_deptno
           WHEN 10 THEN v_dname := 'ACCOUNTING';
           WHEN 20 THEN v_dname := 'RESEARCH';
           WHEN 30 THEN v_dname := 'SALES';
           WHEN 40 THEN v_dname := 'OPERATIONS';
           ELSE v_dname := 'UNKNOWN';
       END CASE;
       RETURN v_dname;
   END;

   MEMBER PROCEDURE display_dept IS
   BEGIN
       DBMS_OUTPUT.PUT_LINE('Dept No : ' || SELF.deptno);
       DBMS_OUTPUT.PUT_LINE('Dept Name : ' || dept_obj_typ.get_dname(SELF.deptno));
   END;
   END;
   ```

**See Also**
- `CREATE TYPE`
- `DROP TYPE`

---

### 2.3.38 CREATE USER

**Name**
CREATE USER — Define a new database user account.

**Synopsis**
```sql
CREATE USER name [IDENTIFIED BY password]
```

**Description**
The `CREATE USER` command adds a new user to an Advanced Server database cluster. You must be a database superuser to use this command.

When the `CREATE USER` command is executed, a schema with the same name as the new user is also created, owned by the new user. Objects with unqualified names created by this user will be created in this schema.

**Parameters**

- **name**: The name of the user.
- **password**: The user's password. The password can be changed later using the `ALTER USER` command.

**Notes**
- The maximum length allowed for the user name and password is 63 characters.

**Examples**

- Create a user named `john`:
  ```sql
  CREATE USER john IDENTIFIED BY abc;
  ```

**See Also**
- `DROP USER`

---

### 2.3.39 CREATE USER|ROLE… PROFILE MANAGEMENT CLAUSES

**Name**
CREATE USER|ROLE

**Synopsis**
```sql
CREATE USER|ROLE name [[WITH] option […]]
```
where `option` can be:

- `PROFILE profile_name`
- `ACCOUNT {LOCK|UNLOCK}`
- `PASSWORD EXPIRE [AT 'timestamp']`
- `LOCK TIME 'timestamp'`

For information about the administrative clauses of the `CREATE USER` or `CREATE ROLE` command that are supported by Advanced Server, please see the PostgreSQL core documentation available at: [PostgreSQL Documentation](https://www.postgresql.org/docs/11/static/sql-commands.html)

**Description**
The `CREATE ROLE|USER… PROFILE` command adds a new role with an associated profile to an Advanced Server database cluster.

- Roles created with the `CREATE USER` command are (by default) login roles.
- Roles created with the `CREATE ROLE` command are (by default) not login roles. To create a login account with the `CREATE ROLE` command, you must include the `LOGIN` keyword.

Only a database superuser can use the `CREATE USER|ROLE` clauses that enforce profile management. These clauses enforce the following behaviors:

- **PROFILE profile_name**: Associates a pre-defined profile with a role or changes which pre-defined profile is associated with a user.
- **ACCOUNT {LOCK|UNLOCK}**: Specifies that the user account should be placed in a locked or unlocked state.
- **LOCK TIME 'timestamp'**: Locks the role at the specified time and unlocks the role at the time indicated by the `PASSWORD_LOCK_TIME` parameter of the profile assigned to this role. If `LOCK TIME` is used with the `ACCOUNT LOCK` clause, the role can only be unlocked by a database superuser with the `ACCOUNT UNLOCK` clause.
- **PASSWORD EXPIRE [AT 'timestamp']**: Specifies a date/time when the password associated with the role will expire. If you omit the `AT 'timestamp'` keywords, the password will expire immediately.

Each login role may only have one profile. To discover the profile that is currently associated with a login role, query the `profile` column of the `DBA_USERS` view.

**Parameters**

- **name**: The name of the role.
- **profile_name**: The name of the profile associated with the role.
- **timestamp**: The date and time at which the clause will be enforced. When specifying a value for `timestamp`, enclose the value in single-quotes.

**Examples**

- Create a login role named `john` who is associated with the `acctg_profile` profile:
  ```sql
  CREATE USER john PROFILE acctg_profile IDENTIFIED BY "1safepwd";
  ```

- Create a login role named `john` who is associated with the `acctg_profile` profile using `CREATE ROLE`:
  ```sql
  CREATE ROLE john PROFILE acctg_profile LOGIN PASSWORD "1safepwd";
  ```

**See Also**
- `DROP USER`

---

### 2.3.40 CREATE VIEW

**Name**
CREATE VIEW — Define a new view.

**Synopsis**
```sql
CREATE [ OR REPLACE ] VIEW name [ ( column_name [, ...] ) ]
AS query
```

**Description**
The `CREATE VIEW` command defines a view of a query. The view is not physically materialized; instead, the query is run every time the view is referenced in a query.

If the `OR REPLACE` clause is used, and a view with the same name already exists, it is replaced.

If a schema name is given (e.g., `CREATE VIEW myschema.myview ...`), the view is created in the specified schema. Otherwise, it is created in the current schema. The view name must be distinct from the name of any other view, table, sequence, or index in the same schema.

**Parameters**

- **name**: The name (optionally schema-qualified) of a view to be created.
- **column_name**: An optional list of names to be used for columns of the view. If not given, the column names are deduced from the query.
- **query**: A query (i.e., a `SELECT` statement) that provides the columns and rows of the view.

**Notes**
- Currently, views are read-only; the system will not allow `INSERT`, `UPDATE`, or `DELETE` operations on a view.
- Access to tables referenced in the view is determined by the permissions of the view owner. However, functions called in the view are treated the same as if they had been called directly from the query using the view. Therefore, the user of a view must have permissions to call all functions used by the view.

**Examples**

- Create a view consisting of all employees in department 30:
  ```sql
  CREATE VIEW dept_30 AS SELECT * FROM emp WHERE deptno = 30;
  ```

**See Also**
- `DROP VIEW`

---

### 2.3.41 DELETE

**Name**
DELETE — Delete rows of a table.

**Synopsis**
```sql
DELETE [ optimizer_hint ] FROM table[@dblink]
[ WHERE condition ]
[ RETURNING return_expression [, ...]
{ INTO { record | variable [, ...] }
| BULK COLLECT INTO collection [, ...] } ]
```

**Description**
The `DELETE` command deletes rows that satisfy the `WHERE` clause from the specified table. If the `WHERE` clause is absent, the effect is to delete all rows in the table, resulting in a valid but empty table.

Note: The `TRUNCATE` command provides a faster mechanism to remove all rows from a table.

- The `RETURNING INTO { record | variable [, ...] }` clause may only be specified if the `DELETE` command is used within an SPL program. The result set of the `DELETE` command must not include more than one row; otherwise, an exception is thrown. If the result set is empty, the contents of the target record or variables are set to null.
- The `RETURNING BULK COLLECT INTO collection [, ...]` clause may only be specified if the `DELETE` command is used within an SPL program. If more than one collection is specified as the target of the `BULK COLLECT INTO` clause, each collection must consist of a single, scalar field. The result set of the `DELETE` command may contain none, one, or more rows. Each `return_expression` evaluated for each row of the result set becomes an element in the collection starting with the first element. Any existing rows in the collection are deleted. If the result set is empty, the collection will be empty.

You must have the `DELETE` privilege on the table to delete from it, as well as the `SELECT` privilege for any table whose values are read in the condition.

**Parameters**

- **optimizer_hint**: Comment-embedded hints to the optimizer for selection of an execution plan.
- **table**: The name (optionally schema-qualified) of an existing table.
- **dblink**: Database link name identifying a remote database. See the `CREATE DATABASE LINK` command for information on database links.
- **condition**: A value expression that returns a value of type `BOOLEAN` that determines the rows which are to be deleted.
- **return_expression**: An expression that may include one or more columns from the table. If a column name from the table is specified in `return_expression`, the value substituted for the column when `return_expression` is evaluated is the value from the deleted row.
- **record**: A record whose fields the evaluated `return_expression` is to be assigned. The number of fields in the record must exactly match the number of expressions, and the fields must be type-compatible with their assigned expressions.
- **variable**: A variable to which the evaluated `return_expression` is to be assigned. If more than one `return_expression` and variable are specified, the first `return_expression` is assigned to the first variable, the second `return_expression` is assigned to the second variable, etc. The number of variables specified following the `INTO` keyword must exactly match the number of expressions following the `RETURNING` keyword, and the variables must be type-compatible with their assigned expressions.
- **collection**: A collection in which an element is created from the evaluated `return_expression`. There can be either a single collection which may be a collection of a single field or a collection of a record type, or there may be more than one collection in which case each collection must consist of a single field. The number of return expressions must match in number and order the number of fields in all specified collections. Each corresponding `return_expression` and collection field must be type-compatible.

**Examples**

- Delete all rows for employee 7900 from the `jobhist` table:
  ```sql
  DELETE FROM jobhist WHERE empno = 7900;
  ```

- Clear the `jobhist` table:
  ```sql
  DELETE FROM jobhist;
  ```

**See Also**
- `TRUNCATE`

---

### 2.3.42 DROP DATABASE LINK

**Name**
DROP DATABASE LINK — Remove a database link.

**Synopsis**
```sql
DROP [ PUBLIC ] DATABASE LINK name
```

**Description**
The `DROP DATABASE LINK` command removes existing database links. To execute this command, you must be a superuser or the owner of the database link.

**Parameters**

- **name**: The name of a database link to be removed.
- **PUBLIC**: Indicates that `name` is a public database link.

**Examples**

- Remove the public database link named `oralink`:
  ```sql
  DROP PUBLIC DATABASE LINK oralink;
  ```

- Remove the private database link named `edblink`:
  ```sql
  DROP DATABASE LINK edblink;
  ```

**See Also**
- `CREATE DATABASE LINK`

---

### 2.3.43 DROP DIRECTORY

**Name**
DROP DIRECTORY — Remove a directory alias for a file system directory path.

**Synopsis**
```sql
DROP DIRECTORY name
```

**Description**
The `DROP DIRECTORY` command removes an existing alias for a file system directory path that was created with the `CREATE DIRECTORY` command. To execute this command, you must be a superuser.

When a directory alias is deleted, the corresponding physical file system directory is not affected. The file system directory must be deleted using the appropriate operating system commands.

**Parameters**

- **name**: The name of a directory alias to be removed.

**Examples**

- Remove the directory alias named `empdir`:
  ```sql
  DROP DIRECTORY empdir;
  ```

**See Also**
- `CREATE DIRECTORY`

---

### 2.3.44 DROP FUNCTION

**Name**
DROP FUNCTION — Remove a function.

**Synopsis**
```sql
DROP FUNCTION [ IF EXISTS ] name
[ ([ [ argmode ] [ argname ] argtype ] [, ...]) ]
[ CASCADE | RESTRICT ]
```

**Description**
The `DROP FUNCTION` command removes the definition of an existing function. To execute this command, you must be a superuser or the owner of the function. All input (IN, IN OUT) argument data types to the function must be specified if this is an overloaded function.

- Usage of `IF EXISTS`, `CASCADE`, or `RESTRICT` is not compatible with Oracle databases and is used only by Advanced Server.

**Parameters**

- **IF EXISTS**: Do not throw an error if the function does not exist. A notice is issued in this case.
- **name**: The name (optionally schema-qualified) of an existing function.
- **argmode**: The mode of an argument: `IN`, `IN OUT`, or `OUT`. If omitted, the default is `IN`. Note that `DROP FUNCTION` does not actually pay any attention to `OUT` arguments, since they are not part of the function signature.
- **argname**: The name of an argument.
- **argtype**: The data type of the argument.
- **CASCADE**: Automatically drop objects that depend on the function (such as views or triggers).
- **RESTRICT**: Refuse to drop the function if any objects depend on it. This is the default behavior.

**Examples**

- Drop the function `my_function`:
  ```sql
  DROP FUNCTION my_function();
  ```

- Drop the function `my_function` with specific argument types:
  ```sql
  DROP FUNCTION my_function(integer, text);
  ```

- Drop the function `my_function` if it exists:
  ```sql
  DROP FUNCTION IF EXISTS my_function();
  ```

- Drop the function `my_function` and cascade dependent objects:
  ```sql
  DROP FUNCTION my_function() CASCADE;
  ```

**See Also**
- `CREATE FUNCTION`
- `ALTER FUNCTION`