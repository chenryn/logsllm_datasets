有用。为了方便进行此事，你可以定义一个变量，比如QUIET，来保存@符号，并且在
所要执行的命令中使用此变量：
ifndef VERBOSE
QUIET：=@
endif
...
target:
$（QuIET)echo Building target...
当需要查看安静模式修饰符所隐藏的命令时，只要在命令行上定义VERBOSE就行了：
$ make VERBOSE=1
echo Building target...
Building target...
延迟初始化
当简单变量被用来关联shell函数时，make会在它读进makefile的时候对所有的shell函
数调用进行求值的动作。如果简单变量中有许多这样的情况，或是需要进行成本昂贵的
计算，make的反应可能会变得很迟钝。要测量make的反应能力（responsiveness），可
以用一个不存在的工作目标来调用make，并对它做计时的动作：
---
## Page 211
改进make的效能
201
Stime make no-Buch-target
make:***No rule tomake target no-such-target.Stop
real0m0.058s
user0m0.062s
sys0m0.015s
这就是make执行任何命令（即使是不重要或错误的命令）时的基本开销。
因为递归变量会在它们被扩展的时候，重新对它们的右边部分进行求值的动作，所以一
个趋势就是将复杂的计算表示成简单变量。然而，这么做却会降低make对所有工作目
标的反应力。我们似乎需要使用另一种变量，这种变量的右边部分只会在变量首次被求
值而不是在这之前，进行求值的动作。
“快速方式：一次做好编译”一节中所提到的find-compilation-dirs函数，就需要
进行这样的初始化设定工作：
#S(call find-compilation-dirs,root-directory)
find-compilation-dirs =
S（patsubst&/,8,
S(sort
$(dir
$（shell $（FIND)S1-name**.java'))))
PACKAGE_DIRS :=S(cal1 find-compilation-dirs,S(SOURCE_DIR))
理想情况下，我们想要在每次执行的时候只进行一次的find操作，但是这只是在
PACKAGE_DIRS被实际使用的时候。这称为延迟初始化（lazyinitialization）。我们可
以使用eva1来建立此类变量，例如：
PACKAGE_DIRS = S(redefine-package-dirs) $(PACKAGE_DIRS)
redefine-package-dirs=\
$（eval PACKAGE_DIRS := $(cal1 find-compilation-dirs,S(SOURCE_DIR)))
基本的做法就是先将PACKAGE_DIRS定义成递归变量。当它被扩展的时候，会对成本昂
贵的函数（此处为find-compilation-dirs）进行求值的动作，并且将它重新定义为
简单变量。最后，该变量（现在是简单变量）的值会从原本的递归变量定义中被返回。
让我们再仔细地说明一遍：
1.当make读进这些变量时，make只会记录它们的右边部分，因为它们是递归变量。
2.当PACKAGE_DIRS变量首次被使用时，make会取出它的右边部分并且扩展第一个
变量redefine-package-dirs。
3.redefine-package-dirs的值只是一个eval函数调用。
---
## Page 212
202
第十章
4.eVa1的动作是将递归变量PACKAGE_DIRS重新定义为简单变量，这个简单变量
的值就是find-compilation-dirs所返回的目录列表。现在PACKAGE_DIRS可
以被初始化为这份目录列表。
5.redefine-package-dirs变量会被扩展成空字符串（因为eval会被扩展成空字
符串）。
6.
make会继续扩展PACKAGE_DIRS原本的右边部分。现在只剩下PACKAGE_DIRS变
量需要扩展。make会查询该变量的值，发现它是一个简单变量，然后返回它的值。
这段代码所用到的技巧是，make对递归变量的右边部分求值时将会从左至右。举例来
说，如果make决定在$（redefine-package-dirs）之前先对S（PACKAGE_DIRS）进
行求值的动作，这段代码就会失败。
以上的步骤可以重构成一个lazy-init函数：
#S(call lazy-init,variable-name,value)
define lazy-init
redefine-$1 = $s（eval $1 := $2)
endef
#PACKAGE_DIRS一份延后展开的目录列表
$(eval
$（ca11 lazy-init,PACKAGE_DIRS,\
$$(call find-compilation-dirs,$(SoURCE_DIRS）)))
并行式make
改进编译效能的另一种做法就是利用makefile解决问题时能够同时进行的本质。大部分
makefile所进行的许多工作很容易以并行的方式来完成，像是将C源文件编译成二进制
文件，或是使用二进制文件来建立程序库。此外，一个完善的makefile应该为并发进程
(concurrentprocess）的自动控制提供所有必要的信息。
例10-1展示了我们以jobs选项--jobs=2（或-j2）运行make来编译mp3_player
程序的过程。从图10-1中可以看到相应的UML顺序图（sequencediagram）。--jobs=2
选项用来告诉make尽可能同时更新两个工作目标。当make以并行的方式更新工作目
标时，它会依照命令的执行顺序送出这些命令，所以你会在输出中看到它们交替出现。
这会使得并行式make的输出较难阅读。让我们小心谨慎地查看此输出。
例10-1：当--jobs=2时make的输出
Smake-f../cho7-geparate-binaries/makefile --jobg=2
---
## Page 213
改进make的效能
203
2
flex-t../ch07-separate-binaries/1ib/db/scanner.1>1ib/db/scanner.c
3
gcc-I1ib-I../ch07-separate-binaries/lib-I../ch07-separate-binaries/include
-M../ch07-separate-binaries/app/player/play_mp3.c1\
sed*s,\(play_mp3\.o\）*:app/player/\1app/player/play_mp3.d:,'>
app/player/piay_mp3.d.tmp
mv-fy.tab.c 1ib/db/playlist.c
5
mv -fy.tab.h 1ib/db/playlist.h
6
gcc -I1ib-I../ch07-separate-binaries/1ib-I../ch07-separate-binaries/include
-M../cho7-separate-binaries/1ib/codec/codec.c1\
sed's,\(codec\.o\）*:,1ib/codec/\11ib/codec/codec.d：，'>1ib/codec/codec.d.tmp
7
pdud/xe/deduea/de
8
gcc-I1ib -I../ch07-separate-binaries/1ib-I../ch07-separate-binaries/include
-M1ib/db/playlist.c1\
sed‘s,\(playlist\.o\)*:,1ib/db/\11ib/db/play1ist.d:，>1ib/db/play1ist.d.tmp
6
mv-f1ib/codec/codec.d.tmp1ib/codec/codec.d
10
gcc-I1ib-I../ch07-separate-binaries/1ib-I../ch07-separate-binaries/include
-M../ch07-separate-binaries/lib/ui/ui.c1\
dupn/n/a1ib/db/scanner.d.tmp
13
n//adu//q-
14
15
gcc-I1ib-I../ch07-separate-binaries/lib-I../ch07-separate-
binaries/include-c-oapp/player/play_mp3.o../ch07-separate-
binaries/app/player/play_mp3.c
16
gcc-I1ib -I../ch07-separate-binaries/lib-I../ch07-separate-
binaries/include-c-o1ib/codec/codec.o../ch07-separate-
binaries/lib/codec/codec.c
17
gcc-Ilib-I../ch07-separate-binaries/lib-I../ch07-separate-
binaries/include-C-o1ib/db/playlist.o1ib/db/play1ist.c
18
gcc-I1ib-I../ch07-separate-binaries/lib-I../ch07-separate-
binaries/include-c-o1ib/db/scanner.o1ib/db/scanner.c
../cho7-separate-binaries/lib/db/scanner.1:In functionyylex:
../ch07-separate-binaries/1ib/db/scanner.1:9:warning:return makes
integer from pointer without a cast
19
gcc-I1ib-I../ch07-separate-binaries/lib-I../ch07-separate-
binaries/include-c -o1ib/ui/ui.o../ch07-separate-binaries/lib/ui/ui.c
20
ar rv 1ib/codec/libcodec.a 1ib/codec/codec.o
---
## Page 214
204
第十章
ar:creating 1ib/codec/libcodec.a
a-1ib/codec/codec.o
21
arrv1ib/db/1ibdb.a 1ib/db/playlist.o 1ib/db/scanner.o
ar:creating 1ib/db/libdb.a
a-1ib/db/playlist.o
a-1ib/db/scanner.o
22
ar rv1ib/ui/1ibui.a1ib/ui/ui.o
ar:creating lib/ui/libui.a
a-1ib/ui/ui.o
23
gcc
app/p1ayer/play_mp3.o1ib/codec/1ibcodec.a 1ib/db/1ibdb.a
lib/ui/libui.a
-oapp/player/play_mp3
Job1
Job2
2
4
8
-T
10
15
19
图10-1：当--jobs=2时make的运行过程
首先，make必须产生源文件和依存文件。有两个自动产生的源文件来自yacc和lex
的输出，也就是make所执行的命令1和命令2。命令3是为play_mp3.c产生的依存文
件，而且显然是在make为playlist.c或scanner.c完成依存文件（命令4、5、8、9、12、
14）之前就开始了。因此，这个make同时进行了三项工作，即使我们在命令行选项上
只要求它同时进行两项工作。
命令4和命令5这两个mv命令完成了命令1所开始的playlist.c源文件产生的动作。命
---
## Page 215
改进make的效能
205
令6开始了另一个依存文件的产生动作。每个脚本总是由单一make所运行，但是每个
工作目标和必要条件会形成一项独立的工作。因此，命令7，也就是依存文件产生脚本
的第二个命令，将会被之前执行命令3的make进程所执行。尽管命令6有可能被“执
行命令1、4、5（用来处理yacc的语法）的make完成工作之后立即衍生出来的make”
所执行，但是必须在命令8里的依存文件产生之前进行。
依存关系产生动作将会以如上的方式继续进行到命令14为止。所有依存文件都必须在
“make移往下-个处理阶段、重读makefile”之前完成产生的动作。这形成了一个自
然的同步点，让make能够自动遵循。
重新读进具备依存信息的makefile之后，make将会再次以并行的方式继续进行编译的
过程。这次make会选择在每个程序库建立之前先编译所有目标文件。这个次序是“非
决定性的”，也就是说，如果makefile再次被运行，它可能会在playlist.c被编译之前先
建立libcodec.a程序库，因为该程序库不需要codec.o以外的任何目标文件。因此，这个
例子所展示的只是许多执行顺序中的一个可能的执行顺序。
最后，你会看到链接程序的动作。对这个makefile来说，链接阶段也是一个自然的同步
点，而且总是最后进行。然而，如果你的目的不是产生一个程序，而是产生许多程序或
程序库，你最后所执行的命令将会不一样。
在多处理器的系统上同时执行多项工作是理所当然的，不过在单处理器的系统上同时执
行一项以上的工作也非常有用。这是因为磁盘的输入/输出有延迟的现象，而且大多数
的系统都会提供大量的高速缓存空间。举例来说，如果有一个进程，比如gcc，为了等
待磁盘的输入/输出而闲置一旁，可能是另一项工作（比如mv、Yacc或ar）的数据目
前放在内存中。这个时候最好先进行有数据可处理的工作。一般来说，让make在单处
理器的系统上同时执行两项工作，几乎会比执行一项工作还快，而且同时执行三或四项
工作比同时执行两项工作还快，这也不是什么不寻常的事。
使用--jobs选项的时候可以不用指定数字。如果是这样的话，make将会衍生出跟所
要更新的工作目标同样数目的工作来。这通常不是一个好主意，因为大量的工作通常会
让一个处理器陷人泥潭，这可能会让执行速度变得比执行单一工作的时候还慢。
管理多重工作的另一个方法就是以系统的负载平均数作为指针。负载平均数（load
average）就是以可运行的进程数目对某个时间周期（通常是1分钟、5分钟或15分钟）
求平均值。负载平均数会被表示成一个浮点数。--load-average（或-1）选项可用来
为make提供一个临界值，负载平均数超过此值之后便不再衍生新的工作。例如，下面
这个命令：
$make--load-average=3.5
---
## Page 216
206
第十章
就是用来告诉make，只有在负载平均数小于或等于3.5时才可以衍生新的工作。如果负
载平均数大于此值，make会一直等到平均数低于此值的时候或是完成了所有其他工作
之后，才会衍生新的工作。
编写以并行的方式运行的makefile时，注意必要条件的设置是否恰当甚至更为重要。如
先前所提到的，当--jobs的值为1时，必要条件列表的求值动作通常是由左至右；当
--jobs的值大于1时，这些必要条件的求值动作将会以并行的方式进行。因此，任何
以从左至右这样的默认求值顺序自动处理的依存关系，必须在你以并行的方式运行
makefile时明确地加以指定。
并行式make还会遇到共享中间文件的问题。举例来说，如果一个目录包含foo.y和bar.y，
以并行的方式运行yacc两次，可能会造成其中的一个要取得另一个的y.tab.c或y.tab.h
实例，或者它们都想要将之移往自已的.c或.h文件中。任何程序，如果它用来暂存信息
的临时文件使用的是固定的名称，都会让你面临类似的问题。
以shell的for循环进行递归式make也会对并行执行造成问题：
dir:
for d in $(SUBDIRS);
do
$（MAKE)--directory=SSd;