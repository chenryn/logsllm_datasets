### DMA直接存储器存取

在DMA技术出现之前，CPU与外设之间的数据传输主要通过程序传送方式和中断传送方式进行。这些方法依赖于CPU通过系统总线与其他部件连接并进行数据传输。

DMA技术的引入旨在解决批量数据输入/输出的问题。它允许外部设备不通过CPU而直接与系统内存交换数据。这样一来，数据传输的速度取决于存储器和外设的工作速度，而非CPU的处理能力。

### 死锁

**定义**：如果一个进程集合中的每个进程都在等待只能由该集合中其他进程引发的事件，则称该进程集合处于死锁状态。

**四个必要条件**：
1. 互斥条件
2. 占有和等待
3. 不可抢占
4. 环路等待

**处理策略**：
1. **鸵鸟算法**：假设死锁发生的概率很低，不予处理。
2. **检测与恢复**：
   - 使用深度优先搜索加回溯法查找环路。若所有节点均可访问，则认为是安全的。
   - 多资源类型的死锁检测（E+R+A矩阵）。
   - 恢复方法包括：
     - 抢占资源
     - 回滚操作
     - 终止进程
3. **死锁避免**：
   - 资源轨迹图：即使系统处于不安全状态也不一定发生死锁，但存在潜在风险。
   - 银行家算法：通过分配和回收资源来确保所有请求都能被满足。
4. **死锁预防**：破坏上述四个必要条件之一即可预防死锁：
   - **互斥条件**：尽量减少对非绝对必要资源的独占。
   - **占有和等待条件**：要求进程在开始执行前获取所需的所有资源，或在请求新资源时先释放已持有的资源。
   - **不可抢占条件**：当资源请求被拒绝时，应释放当前持有的资源。
   - **环形等待条件**：为资源编号，按序申请以避免循环等待。

### 两阶段锁

- **第一阶段**：尝试锁定所有所需资源。如果成功，则进入第二阶段；否则，释放所有已获取的锁并重新开始。
- **第二阶段**：完成任务后释放所有锁。

### 通信死锁与活锁

- **通信死锁**：通过超时机制中断死锁。
- **活锁**：进程间相互谦让导致无进展的情况。

### 饥饿

- **定义**：进程无限期地推迟执行，尽管未被阻塞。

# 操作系统

## 进程与线程

### 进程的创建
- 系统启动
- 当前运行的进程调用创建函数
- 用户请求创建
- 批处理作业初始化

### 进程的结束
- 完成任务
- 自愿终止
- 非自愿终止（如严重错误）
- 被其他进程终止

### 进程的状态
- 运行
- 就绪
- 阻塞

### 进程的内部结构
- 代码段
- 数据段
- 堆
- 栈
- PCB（进程控制块）

### 切换步骤
1. 保存PCB
2. 加载新的PCB
3. 刷新内存缓存
4. 更新地址映射

### 父进程与子进程
- 新创建的子进程几乎完全复制父进程的用户级虚拟地址空间，包括代码、数据段、堆、共享库及用户栈。
- 子进程获得父进程打开文件描述符的副本。
- 最大区别在于不同的PID；后续变化独立进行。

### 僵死进程
- 当子进程终止但未被父进程回收时，内核不会立即删除该进程，而是保持其终止状态，直至被回收。
- 若父进程提前终止，init进程将接管子进程的回收工作。

### fork和execve
- `fork` 创建子进程并返回两次（区分父子进程）。
- `execve` 在现有进程中加载并运行新程序，成功则不返回。

### 上下文
- 每个程序都运行在一个进程的上下文中，包含代码、数据、栈、寄存器等。
- 每个线程有自己的上下文，包括线程ID、栈、寄存器等。
- 同一进程内的线程共享剩余部分，如虚拟地址空间和打开文件。

### 线程的过程
- **创建**：使用 `pthread_create` 函数。
- **终止**：
  - 顶层例程返回时隐式终止。
  - 显式调用 `pthread_exit`。
  - 主线程调用 `pthread_exit` 会终止所有同级线程。
  - 其他线程调用 `exit` 会终止整个进程。
  - 通过 `pthread_cancel` 取消指定线程。
- **回收**：使用 `pthread_join` 等待线程终止。
- **分离**：使用 `pthread_detach` 分离线程，使其自动释放资源。

### 信号
- 小消息通知进程某类事件的发生。
- 待处理信号指发送但未被接收的信号。
- 同类型信号多次收到会被丢弃。

### 线程
- **目标**：提高并发性同时降低系统开销。
- **设计原则**：将调度单位与资源单位分离。
- **实现方案**：
  - **纯用户态**：自定义调度算法，但阻塞会影响所有线程。
  - **内核态**：利用池化技术提高效率。
- **轻量级进程 (LWP)**：共享大部分资源，具有独立的标识符和父子关系。
- **用户线程与内核线程**：
  1. **可移植性**：用户线程更优。
  2. **可扩展性**：用户线程更容易扩展。
  3. **性能**：内核线程支持多处理器，性能更高。
  4. **编程复杂度**：内核线程较简单。

### Linux的进程
- **详细内容**：涉及具体的Linux进程管理机制和技术细节。