Style”Flags。但是，服务器正在执行数据报语义，并且现在将要求正确设置Type 3Flags。在将”Negotiate Datagram
Style”Flags添加到Type 3消息之前，将其手动发送到服务器之前，可以使服务器使用修改后的令牌成功调用
AcceptSecurityContext。
这样可以成功进行身份验证；”篡改”Type 1消息有效地将服务器切换到数据报式身份验证，其中将观察并强制使用Type
3Flags。目前没有已知的实际用途，但是它确实演示了可以通过策略性地处理NTLM消息来观察到的一些有趣和意外的行为。
## 会话安全性-签名和盖章概念（Session Security – Signing & Sealing Concepts）
除了SSPI身份验证服务，还提供了消息完整性和机密性功能。这也由NTLM安全支持提供程序实现。”签名”由SSPI
MakeSignature函数执行，该函数将消息验证码（MAC）应用于消息（message）。收件人可以对此进行验证，并且可以强有力地确保消息在传输过程中没有被修改。签名是使用发送方和接收方已知的Key生成的；MAC只能由拥有Key的一方来验证（这反过来可以确保签名是由发送方创建的）。”Sealing”由SSPI
EncryptMessage执行功能。这会对消息应用加密，以防止传输中的第三方查看它（类似HTPPS）；NTLMSSP使用多种对称加密机制（使用相同的Key进行解密和加密）。
NTLM身份验证过程的同时会建立用于签名和Sealing的Key。除了验证客户端的身份外，身份验证握手还在客户端和服务器之间建立了一个上下文，其中包括在各方之间签名和Sealing消息所需的Key。我们将讨论这些Key的产生以及NTLMSSP用于签名和Sealing的机制。
在签名和盖章过程中采用了许多关键方案。我们将首先概述不同Type的Key和核心会话安全性概念。
###  The User Session Key
这是会话安全中使用的基本Key Type。有很多变体：
  * LM User Session Key
  * NTLM User Session Key
  * LMv2 User Session Key
  * NTLMv2 User Session Key
  * NTLM2 Session Response User Session Key
所使用的推导方法取决于Type 3消息中发送的响应。这些变体及其计算概述如下。
**LM User Session Key**
仅在提供LM响应时（即，对于Win9x客户端）使用。LM用户Session Key的得出如下：
  1. 16字节LM哈希（先前计算）被截断为8字节。
  2. 将其空填充为16个字节。该值是LM用户Session Key。
与LM哈希本身一样，此Key仅响应于用户更改密码而更改。还要注意，只有前7个密码字符输入了Key（请参阅LM响应的计算过程 ； LM用户Session
Key是LM哈希的前半部分）。此外，Key空间实际上要小得多，因为LM哈希本身基于大写密码。所有这些因素加在一起使得LM用户Session
Key非常难以抵抗攻击。
**NTLM User Session Key**
客户端发送NTLM响应时，将使用此变体。Key的计算非常简单：
  1. 获得NTLM哈希（Unicode大小写混合的密码的MD4摘要，先前已计算）。
  2. MD4消息摘要算法应用于NTLM哈希，结果为16字节。这是NTLM用户Session Key。
NTLM用户Session Key比LM用户Session
Key有了很大的改进。密码空间更大（区分大小写，而不是将密码转换为大写）；此外，所有密码字符都已输入到Key生成中。但是，它仍然仅在用户更改其密码时才更改。这使得离线攻击变得更加容易。
**LMv2 User Session Key**
发送LMv2响应（但不发送NTLMv2响应）时使用。派生此Key有点复杂，但并不十分复杂：
  1. 获得NTLMv2哈希（如先前计算的那样）。
  2. 获得LMv2client nonce（用于LMv2响应）。
  3. 来自Type 2消息的质询与client nonce串联在一起。使用NTLMv2哈希作为Key，将HMAC-MD5消息认证代码算法应用于此值，从而得到16字节的输出值。
  4. 再次使用NTLMv2哈希作为Key，将HMAC-MD5算法应用于该值。结果为16个字节的值是LMv2 User Session Key。
LMv2 User Session
Key相对于基于NTLMv1的Key提供了一些改进。它是从NTLMv2哈希派生而来的（它本身是从NTLM哈希派生的），它特定于用户名和域/服务器。此外，服务器质询和client
nonce都为Key计算提供输入。Key计算也可以简单地表示为LMv2响应的前16个字节的HMAC-MD5摘要（使用NTLMv2哈希作为Key）。
**NTLMv2 User Session Key**
发送NTLMv2响应时使用。该Key的计算与LMv2用户Session Key非常相似：
  1. 获得NTLMv2哈希（如先前计算的那样）。
  2. 获得NTLMv2”blob”（与NTLMv2响应中使用的一样）。
  3. 来自Type 2消息的challenge与Blob连接在一起作为待加密值。使用NTLMv2哈希作为Keykey，将HMAC-MD5消息认证代码算法应用于此值，从而得到16字节的输出值。
  4. 再次使用NTLMv2哈希作为Key，将HMAC-MD5算法应用于第三步的值。结果为16个字节的值是NTLMv2用户Session Key。
NTLMv2 User Session Key在密码上与LMv2 User Session
Key非常相似。可以说是NTLMv2响应的前16个字节的HMAC-MD5摘要（使用NTLMv2哈希作为关键字）。
**NTLM2 Session Response User Session Key**
当NTLMv1身份验证与NTLM2会话安全性一起使用时使用。该Key是从NTLM2会话响应信息中派生的，如下所示：
  1. 如前所述，将获得NTLM User Session Key。
  2. 获得session nonce（先前已讨论过，这是Type 2质询和NTLM2会话响应中的随机数的串联）。
  3. 使用NTLM User Session Key作为Key，将HMAC-MD5算法应用于session nonce。结果为16个字节的值是NTLM2会话响应用户Session Key。
NTLM2会话响应用户Session Key的显着之处在于它是在客户端和服务器之间而不是在域控制器上计算的。域控制器像以前一样导出NTLM用户Session
Key，并将其提供给服务器。如果已经与客户端Negotiate了NTLM2会话安全性，则服务器将使用NTLM用户Session
Key作为MACKey来获取session nonce的HMAC-MD5摘要。
**空用户Session Key（The Null User Session Key）**
当执行匿名身份验证时，将使用Null用户Session Key。这很简单；它只有16个空字节（”
0x000000000000000000000000000000000000 “）。
###  Lan Manager Session Key
Lan Manager Session Key是User Session Key的替代方法，用于在设置”Negotiate Lan Manager Key”
NTLM Flags时派生NTLM1签名和Sealing中的Key。Lan ManagerSession Key的计算如下：
  1. 16字节LM哈希（先前计算）被截断为8字节。
  2. 这将填充为14个字节，其值为”0xbdbdbdbdbdbdbd “。
  3. 该值分为两个7字节的一半。
  4. 这些值用于创建两个DESKey（每个7字节的一半为一个）。
  5. 这些Key中的每一个都用于对LM响应的前8个字节进行DES加密（导致两个8字节密文值）。
  6. 这两个密文值连接在一起形成一个16字节的值-Lan ManagerSession Key。
请注意，Lan ManagerSession
Key基于LM响应（而不是简单的LM哈希），这意味着它将响应于不同的服务器challenge而更改。与仅基于密码哈希的LM和NTLM用户Session
Key相比，这是一个优势。Lan ManagerSession Key会针对每个身份验证操作进行更改，而LM / NTLM用户Session
Key将保持不变，直到用户更改其密码为止。因此，Lan ManagerSession Key比LM用户Session
Key（两者具有相似的Key强度，但Lan ManagerSession Key可以防止重放攻击）要强得多。NTLM用户Session
Key具有完整的128位Key空间，但与LM用户Session Key一样，在每次身份验证时也不相同。
###  Key Exchange（密钥交换）
当设置”Negotiate Key Exchange”Flags时，客户端和服务器将会就”secondary”Key达成共识，该Key用于代替Session
Key进行签名和Sealing。这样做如下：
  1. 客户端选择一个随机的16字节Key（辅助Key，也就是py-ntlm中的exported_session_key）。
  2. Session Key（User Session Key或Lan Manager Session Key，取决于”Negotiate Lan ManagerKey”Flags的状态）用于RC4加密辅助Key。结果是一个16字节的密文值（注：也就是py-ntlm中的encrypted_random_session_key）。
  3. 此值在Type 3消息的”Session Key”字段中发送到服务器。
  4. 服务器接收Type 3消息并解密客户端发送的值（使用带有用户Session Key或Lan ManagerSession Key的RC4）。
  5. 结果值是恢复的辅助Key，并代替Session Key进行签名和Sealing。
此外，密钥交换过程巧妙地更改了NTLM2会话安全性中的签名协议（在后续部分中讨论）。
###  弱化Key（Key Weakening）
根据加密输出限制，用于签名和Sealing的Key已被弱化（”weakened”）（注：可能是由于加密性能原因）。Key强度由”Negotiate128”和”Negotiate56”Flags确定。使用的最终Key的强度是客户端和服务器都支持的最大强度。如果两个Flags都未设置，则使用默认的Key长度40位。NTLM1签名和Sealing支持40位和56位Key；NTLM2会话安全性支持40位，56位和不变的128位Key。
## NTLM1会话安全
NTLM1是”原始” NTLMSSP签名和Sealing方案，在未协商”Negotiate NTLM2
Key”Flags时使用。此方案中的Key派生由以下NTLM的Flags驱动：
Flag | 说明  
---|---  
Negotiate Lan Manager Key | 设置后，Lan Manager会话密钥将用作签名和密封密钥（而不是用户会话密钥）的基础。
如果未建立，则用户会话密钥将用于密钥派生。（When set, the Lan Manager Session Key is used as the
basis for the signing and sealing keys (rather than the User Session Key). If
not established, the User Session Key will be used for key derivation. ）  
Negotiate 56 | 表示支持56位密钥。 如果未协商，将使用40位密钥。 这仅适用于与“协商Lan Manager密钥”结合使用；
在NTLM1下，用户会话密钥不会减弱（因为它们已经很弱）。（Indicates support for 56-bit keys. If not
negotiated, 40-bit keys will be used. This is only applicable in combination
with “Negotiate Lan Manager Key”; User Session Keys are not weakened under
NTLM1 (as they are already weak).）  
Negotiate Key Exchange | 表示将执行密钥交换以协商用于签名和密封的辅助密钥。（Indicates that key exchange
will be performed to negotiate a secondary key for signing and sealing.）  
###  NTLM1Key派生
要产生或是派生NTLM1Key本质上是一个三步过程：
  1. Master key negotiation
  2. Key exchange
  3. Key weakening
**Master key negotiation**
第一步是Negotiate128位”Master Key”，从中将得出最终的签名和Sealing的Key。这是由NTLMFlags”Negotiate
Lan Manager Key”驱动的；如果设置，则Lan ManagerSession Key将用作Master
Key。否则，将使用适当的用户Session Key。
例如，考虑我们的示例用户，其密码为” SecREt01”。如果未设置”Negotiate Lan Manager”Key，并且在Type
3消息中提供了NTLM响应，则将选择NTLM用户Session Key作为Master
Key。这是通过获取NTLM哈希的MD4摘要（本身就是Unicode密码的MD4哈希）来计算的：
0x3f373ea8e4af954f14faa506f8eebdc4