it to recalculate the commitment under a nonce key of its
choice. Accounting for πA
s in either an initiator or responder
role, we have
In order to replace P Kb, and therefore get πA
Advauth
5 ≥ Advauth
4 − 1
2|r|−1 .
Game 6: We replace DHKey with a uniformly random
value (cid:94)DHKey = cP for c $← Fq where Fq is the ﬁnite ﬁeld
over which we deﬁne our elliptic curve E and P is a generator
for E. Suppose that the adversary can distinguish between
this and the previous game. Then we can construct a new
adversary, B1, solving the DDH problem, as from the previous
game hop we have that Difﬁe-Hellman shares aP = P Ka, and
bP = P Kb have been exchanged.
The challenger proceeds as before, but replaces the DHKey
with a uniformly random value (cid:94)DHKey = cP , which
is used for both partners. Algorithm B1 receives as input
(E, P, aP, bP, cP ) where aP = P Ka, bP = P Kb, and
cP = (cid:94)DHKey. The EC-DDH assumption therefore implies
Advauth
6 ≥ Advauth
5 − AdvEC-DDH
B1
(λ) .
We continue the proof by separating two sub-cases based
on the test session’s role: initiator (C1) or responder (C2):
Advauth
6 = Advauth,C1
6
+ Advauth,C2
6
.
Case 1: πA
s .role = initiator.
Game 7: This game is equivalent
to the previous
security experiment except we raise the event abort, end
the experiment, and output zero if the adversary succeeds in
forging the tag Eb or any of Nb, IOcapB, or B in the message
used to compute Eb.
challenger
We bound the abort condition by constructing the ad-
versary, B2, against
the SUF-CMA security of HMAC.
the MAC key to (cid:94)DHKey,
sets
The
and
B2 uses
the oracle MAC to compute tags. B2
calls
MAC(Nb(cid:107)Na(cid:107)ra(cid:107)IOcapB(cid:107)IOcapA(cid:107)B(cid:107)A), which returns the
this
tag Eb
at
the message-tag
point
pair (Nb(cid:107)Na(cid:107)ra(cid:107)IOcapB(cid:107)IOcapA(cid:107)B(cid:107)A, Eb) to A.
If A
in the protocol). B2
then gives
all public
and Na,i
(r, Nb,i,
are
is able to forge a new tag, call
such that
MAC.Vfy(Nb(cid:107)Na(cid:107)ra(cid:107)IOcapB(cid:107)IOcapA(cid:107)B(cid:107)A, Ewin) = 1, or
a new message, call it msgwin, by forging at least one of Nb,
IOcapB, and B, such that MAC.Vfy(msgwin, Eb) = 1, then B2
can win the SUF-CMA experiment with the winning message-
tag pair. Thus we have
it Ewin,
Advauth,C1
7
≥ Advauth,C1
6
− AdvSUF-CMA
HMAC,B2
(λ) .
Game 8: This game is equivalent
to the previous
security experiment except we raise the event abort, end
the experiment, and output zero if the adversary succeeds in
forging any of B’s nonces or B’s role, causing A to accept
maliciously.
From Game 7 we have that A does not succeed in forging
Nb. Thus if A succeeds in forging any nonce Nb,i or B’s role,
we use the success of A to construct a new adversary, B3,
against the second-preimage resistance of the hash function.
Per the sec-pre experiment, B3 is given the message-hash pair
(Nb,1(cid:107) . . .(cid:107)Nb,20(cid:107)roleb, Nb) by A (note that all Nb,i nonces
are public at this point in the protocol), where the nonces are as
t and Nb = H(Nb,1(cid:107) . . .(cid:107)Nb,20(cid:107)roleb). By our
sampled by πB
abort condition, A is able to forge at least one nonce N(cid:48)
b,20(cid:107)role
or B’s role. B3 uses the new sequence N(cid:48)
b,i
(cid:48)
as its guess at a second-preimage for Nb. By the success of A
b
(cid:48)
we have that H(N(cid:48)
b) = Nb. Thus we have
Advauth,C1
≥ Advauth,C1
b,1(cid:107) . . .(cid:107)N(cid:48)
b,1(cid:107) . . .(cid:107)N(cid:48)
b,20(cid:107)role
− Advsec-pre
H,B3
(λ) .
8
7
By Game 8, the adversary can only succeed in breaking
auth by forging a commitment value, Ca,i or Cb,i. However,
the correctness of HMAC ensures Ca,i or Cb,i against forgery
for all i since the messages and keys used to compute them are
ﬁxed from previous game hops. We therefore have matching
t .role telling us
sidu, πA
our session oracles are partnered via Deﬁnition III.4. Thus,
s .role (cid:54)= πB
s .pid = B, πB
t .pid = A, πA
Advauth,C1
8
= 0 .
Case 2: πA
similarly to Case 1.
s .role = responder. This case follows
Combining our previous probability statements for the two
sub-cases above we have:
Advauth ≤ 1
2|r|−1
2 · (AdvSUF-CMA
HMAC,B2
+ AdvEC-DDH
(λ)+
B1
(λ) + Advsec-pre
H,B3
(λ)) .
c) Advantage against key-ind: In this case we assume
that
4
that πA
s
remains fresh, we will abort
Game 5: We now bound Advkey-ind
j , are no longer UncUser-fresh. If πU
j
. Since we have
the
the requirement
experiment if A issues a StateReveal, KeyReveal, ShowUser,
s or the partnered user
or ControlUser queries such that πA
is also
session, πU
t , we abort if A issues a StateReveal(πB
partnered with πB
t )
query while πA
Suppose that A can correctly distinguish the provided key
as real or random. Then we can construct a new adversary,
B4, solving the EC-sym-ssPRF-ODH problem as follows. B4
s (cid:54)= accept.
17
receives as input (E, P, aP, bP ) where P is a generator of
our elliptic curve group, aP = P Ka, and bP = P Kb. B4
then issues the challenge query x = (Na(cid:107)Nb(cid:107)btlk(cid:107)A(cid:107)B)
s .role = initiator and x = (Nb(cid:107)Na(cid:107)btlk(cid:107)B(cid:107)A) oth-
(if πA
erwise) also using values as chosen by our test and part-
ner oracles. The challenger then randomly samples b and
sets LK ← HMAC(DHKey, Na(cid:107)Nb(cid:107)btlk(cid:107)A(cid:107)B) if b = 1
and LK $← {0, 1}λ otherwise. The challenger then returns
LKb to B4. The challenger also allots one-time access to
the left and right HMAC oracles for computation of Ea
and Eb. At this point, B4 can simulate all other ﬂows be-
tween our test session and partner session. If we have that
LKb = HMAC(DHKey, Na(cid:107)Nb(cid:107)btlk(cid:107)A(cid:107)B), then the view
of A when interacting with this game is identical to Game 4.
Similarly, the view of A when interacting with this game is
$← {0, 1}λ. Thus by the success of
identical to Game 5 if LKb
A in distinguishing Game 4 and Game 5, we have the success
of B4. With πA
s as either the initiator or responder, we have:
≥ Advkey-ind
Advkey-ind
− AdvEC-sym-ssPRF-ODH
(λ) .
HMAC,B4
4
5
Since the session key of our test oracle is now uniformly
random, we also conclude: Advkey-ind
= 0 .
5
We now combine all probability statements to arrive at our
ﬁnal security reduction:
AdvCYBORG−UncUser
PE-IG,A,ηp,ηs
(λ) ≤ (ηpηs)2 ·(cid:16) 1
B1
2µ +
400
2λ +
3
2|r| +
(λ) + 2 · (AdvSUF-CMA
AdvEC-DDH
HMAC,B2
+ Advsec-pre
(λ))+
H,B3
AdvEC-sym-ssPRF-ODH
HMAC,B4
(cid:17)
(λ)
.
(λ)
Per the Passkey Entry speciﬁcation, |r| = 20.
Theorem (VI.1). SHM Initiator-Generated Passkey Entry is
CYBORG-CompUser[x]-secure for
x ∈ {[ru], [ui] [ru, ui]} .
Proof: This proof follows from a triviality. In all three
of the above listed CYBORG-CompUser[x] security environ-
ments,
the adversary gains the capability to issue queries
that allow him to compromise a UtD channel(s) that is/are
not employed in Initiator-Generated Passkey Entry. Therefore,
these settings reduce to the CYBORG-UncUser setting, which
was proven secure in Theorem VI.1.
Lemma C.1. SHM Initiator-Generated Passkey Entry is not
CYBORG-CompUser[iu]-secure.
Proof: We proceed via counter-example. Let A be an
adversarial algorithm against
the CYBORG-CompUser[iu]
security of the Initiator-Generated Passkey Entry protocol.
A ﬁrst
s , (start, B)) query and a
t ))) query to initiate protocol par-
SendUser(πU
ticipants. A then issues a ShowUser(πA
s ) query and proceeds
with a MitM attack as follows:
issues a SendDevice(πA
j , (start, (πA
s , πB
• Phase 0 proceeds as normal.
• In Phase 1: A impersonates πA
s to πB
t .
18
• In Phase 2:
◦ A generates the passkey and sends it to the user.
◦ Since A issued a ShowUser(πA
s ) query, he may modify
the value r shown to the user. We denote this new
passkey re.
◦ The user forwards re to πB
t per the protocol speciﬁca-
tion.
• Phase 3 and 4 proceed according to the protocol, with A
impersonating πA
s .
t sets πB
t .δ = accept.
• πB
At the conclusion of the above attack we have that A is
PPT algorithm winning the CYBORG-CompUser[iu] security
experiment by breaking auth.
Lemma C.2. SHM Initiator-Generated Passkey Entry is not
CYBORG-CompUser[ur]-secure.
s ) query, A issues a ControlUser(πU
Proof: This proof runs similarly to the one described
in Lemma C.1 with a few changes. Instead of issuing a
j , B) query.
ShowUser(πA
This allows him to modify the passkey of r to re on input to
t .
πB
Theorem (VI.1). SHM Initiator-Generated Passkey Entry is not
CYBORG-CompUser[x]-secure for
[x] ∈{[iu], [ur], [iu, ru], [iu, ui], [iu, ur], [ru, ur], [ui, ur],
[iu, ru, ui], [iu, ru, ur], [iu, ui, ur], [ru, ui, ur],
[iu, ru, ui, ur]} .
Proof: By Lemmas C.1 and C.2 we have that Initiator-
Generated Passkey Entry is not CYBORG-CompUser[x] for
x ∈ {[iu], [ur]}. Therefore, we have that Initiator-Generated
Passkey Entry is not CYBORG-CompUser[x] secure for X ⊆
{iu, ru, ui, ur} where at least one of iu or ur is an element
of X, by applying Theorem B.2.
B. SHM Dual Passkey Entry Analysis
Theorem (VI.4). SHM Dual Passkey Entry is CYBORG-
CompUser[iu,ru,ui,ur]-secure under the EC-sym-ssPRF-ODH
and EC-DDH assumptions,
the sec-pre of H, and the
SUF-CMA security of HMAC.
Proof: The proof of Theorem VI.4 closely follows to that
of Theorem VI.1 but with the following alteration:
Advantage against auth.
Game 5. In this game we abort if A succeeds in forging the
DH public key P Kb. A may issue either a ShowUser(πB
t ) or
j , B) query to forge rb, so we cannot rely on
ControlUser(πU
its authenticity. However, A is unable to use a query to forge
ra and cannot learn its value due to our deﬁnition of the UtD
channel. To forge the device B’s public key then, A must guess
all 20 bits of the passkey ra to replace P Kb with a chosen
P Ke. Accounting for πA
s in either the initiator or responder
role, we have Advauth
4 − 2-(|r|−1).
5 ≥ Advauth