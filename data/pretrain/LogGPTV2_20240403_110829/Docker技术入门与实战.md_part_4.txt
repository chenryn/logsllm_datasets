串代表了各层的ID。下载过程中会获取并输出镜像的各层信息。
用户也可以选择从其他注册服务器的仓库下载。此时，需要在仓库名称前指定完整的仓
在列出信息中，可以看到几个字段信息：
$ sudo docker images
例如，
使用dockerimages命令可以列出本地主机上已有的镜像。
root@fe7fc4bd8fc9:/#
$sudo docker run -t-iubuntu/bin/bash
下载镜像到本地后，即可随时使用该镜像了，例如利用该镜像创建一
$ sudo docker pull dl.dockerpool,com:5000/ubuntu
读者还可以通过指定标签来下载特定版本的某一个镜像，例如14.04标签的镜像。
dl.dockerpool.com:5000/ubuntu
ubuntu
REPOSITORY
上面两条命令实际上都相当于$sudodocker pull registry.hub.docker.
$ sudodocker pullubuntu:14.04
下载过程中可以看出，镜像文件一般由若干层组成，行首的2185fd50e2ca这样的字
该命令实际上下载的就是ubuntu:latest镜像，目前最新的14.04版本的镜像。
查看镜像信息
511136ea3c5a:
5506de2b643b:
22093c35d77b:
3680052c0f5c:Downloadcomplete
e791be0477f2:Downloadcomplete
ccb62158e970:Down1oad comp1ete
，下面的命令列出了本地刚从官方下载的ubuntu：14.04镜像，以及从
Download complete
Download
Download complete
14.04
TAG
一种联合文件系统）中的重要概念，是实现增量保存与更新的
complete
latest
5506de2b643b
IMAGE ID
5506de2b643b
CREATED
1
weeks ago
1weeks ago
层（Layer）其实是AUFS
第3章镜像17
VIRTUAL SIZE
一个容器，在其中运
197.8MB
---
## Page 32
指向了同一个镜像文件，只是别名不同而已。标签在这里起到了引用或快捷方式的作用。
ubuntu:latest标签的镜像。
新的标签。例如添加一个新的ubuntu:latest镜像标签如下：
TAG信息来区分发行版本，包括10.04、12.04、12.10、13.04、14.04等标签。
18第一部分Docker入门
为了方便在后续工作中使用这个镜像，还可以使用dockertag命令为本地镜像添加
使用dockerinspect命令可以获取该镜像的详细信息。
细心的读者可能会注意到，这些不同标签的镜像的ID是完全一致的，说明它们实际上
$ sudo docker inspect 5506de2b643b
dl.dockerpool.com:5000/ubuntu latest
REPOSITORY
$ sudo docker images
再次使用dockerimages列出本地主机上镜像信息，
ubuntu
ubuntu
$sudo docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest
TAG信息用于标记来自同一个仓库的不同镜像。例如ubuntu仓库中有多个镜像，通过
其中镜像的ID信息十分重要，它唯一标识了镜像。
口镜像大小。
口创建时间。
口镜像的ID号（唯一）。
口镜像的标签信息，比如14.04。
口来自于哪个仓库，
"Config":{
"Architecture":"amd64",
"Entrypoint":null,
"Domainname":"",
"Cpuset":“"
"AttachStdout":false
"Attachstdin":false,
"Attachstderr":false
'ExposedPorts":null,
CpuShares":0,
"Cmd":[
"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
"/bin/bash"
，比如 ubuntu 仓库。
latest
14.04
TAG
5506de2b643b
IMAGE ID
5506de2b643b
5506de2b643b
CREATED
1weeks ago
1weeksago
1weeksago
可以看到多了一个
VIRTUAL SIZE
197.8MB
192.8MB
192.8MB
---
## Page 33
"Parent":"964692831e07f7362f5c3fedf0c4b81a622f2c6e3ec5f19d0eddff21afd64c12",
"Os":"linux",
"Id":"53bf7a53e8903fce40d24663901aac6211373a8d8b4effe08bc884e63e181805",
"DockerVersion":"1.2.0",
"Created":"2014-09-23T22:37:05.812213629z",
"ContainerConfig":
"Container":"f26bc14cc07412402bdab911b8a935fead0322649cf042cee8515c02ebdfa53a"，
"volumes":
"User":“"
"Tty":false,
"Stdinonce":
"PortSpecs":
"OpenStdin":
"OnBuild":[],
"NetworkDisabled": false,
"Memory":0,
"Image":"964692831e07f7362f5c3fedf0c4b81a622f2c6e3ec5f19d0eddff21afd64c12",
"Hostname":"065262ce3c91"
"Env":[
"Entrypoint":null,
"Domainname":
"Cpuset":"",
"CpuShares":
"Cmd":[
"AttachStdout":false
"AttachStdin":false,
"AttachStderr":false
"WorkingDir":
"Volumes":null,
"PortSpecs":
"OpenStdin":
"OnBuild":[],
"MemorySwap":0,
"Memory":0,
"Hostname":"065262ce3c91",
xposedPorts":null,
"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
"#（nop） CMD [/bin/bash]"
"-c",
"/bin/sh"
null,
false
false,
false
false
第3章
()
镜
像
·
---
## Page 34
automated资源则允许用户验证镜像的来源和内容。
的受欢迎程度）、是否官方创建、是否自动创建等。
方仓库中的镜像。用法为docker search TERM，支持的参数包括：
3.3
的ID。
时，可以使用-f参数来指定，例如，获取镜像的Architecture信息：
20第一部分Docker入门
默认的输出结果将按照星级评价进行排序。官方的镜像说明是官方项目组创建和维护的，
可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、星级（表示该镜像
例如，搜索带mysql关键字的镜像如下所示：
口-s，--stars=O指定仅显示评价为指定星级以上的镜像。
--no-trunc=false输出信息不截断显示。
--automated=false仅显示自动创建的镜像。
在指定镜像ID的时候，通常使用该ID的前若干个字符组成的可区分字串来替代完整
stenote/docker-lemp
dockerfile/mysql
orchardup/mysql
tutum/mysql
mysql
NAME
NAME
$sudo docker search mysql
amd64
$ sudo docker inspect-f ((".Architecture"}) 550
docker
anapsix/gitlab-ci
google/mysql
cutum/wordpress
cutum/lamp
搜寻镜像
"Size":0
inspect 命令返回的是一个 JSON 格式的消息，如果我们只要其中一项内容
LAMP image
MySQL Server image
MysQLisa widelyused,open-source relati...
DESCRIPTION
DESCRIPTION
MySQL5.6、PHP 5.5、Nginx、Memcache
STARS
STARS
OFFICIAL
OFFICIAL
AUTOMATED
AUTOMATED
10
26
74
213
#
[OK]
[OK]
[OK]
[OK]
[OK]
[OK]
---
## Page 35
使用镜像ID删除镜像
dockerrmi命令，
除该镜像。
5506de2b643b镜像）仍然存在：
bi为保险起见，再次查看本地的镜像，
个标签而已。
标签而已，并不影响镜像文件。因此上述操作相当于只是删除了镜像5506de2b643b的一
当同一个镜像拥有多个标签的时候，dockerrmi命令只是删除了该镜像多个标签中的指定
下命令：
[IMAGE..·]，其中IMAGE可以为标签或ID。
3.4
假设本地存在一
例如，要删除掉dl.dockerpool.com:5000/ubuntu:latest镜像，可以使用如
当使用dockerrmi 命令后面跟上镜像的 ID（也可以是ID 能进行区分的部分前缀串）
Deleted:
Deleted:
Deleted:
Deleted:
Deleted:
$ sudo docker rmi mysql:latest
但当镜像只剩下一个标签的时候就要小心了，此时再使用docker
ubuntu
$ sudo docker images
读者可能会担心，本地的ubuntu：latest镜像是否会受到此命令的影响。无需担心
Untagged:dl.dockerpool.com:5000/ubuntu:latest
$sudo docker rmi dl.dockerpool.com:5000/ubuntu
使用dockerrmi命令可以删除镜像，
Deleted:
Deleted:
ubuntu
REPOSITORY
使用镜像的标签删除镜像
leted:
leted:
删除镜像
：857e856e4481d59ee88a4cdedd9aaf855666bd494fa38506e6788361c0af4cda
：35bc8591e39be5089265a093e234d13a4b155a01d2ab9e8904eafa81664fb597
0a09ddcf99b7fd8fcb3525c41b54696038ecf13677f4459f1c98c742ffa60ab2
898883ccfcee705e440547e30e240cb025c12410d7c9e4d2bcb11973ba075975
37e4b3932afa186924a09eab332bc8ebec3aac8bac074314ed9a2d1e94547f50
228ecd435c8a29d25b77999036701a27f2d67874c915bb8eb9fb175b1f98aa60
4f513746df18b222a07bb8d76d4b6d29752ce5dcb69bfad0ce92e6c1449a3821
cf07a411bf0883bd632940e8108dac49c64456a47f7390507de5685bbd6daf85
4daeda4ad839a152a3b649672bd5135977d7f81866d3bc0e16d0af3f65cc8af6
9a09222edf600a03ea48bd23cfa363841e45a8715237e3a58cb0167f0e8bad54
可以看出它会删除这个镜像文件的所有AUFS层：
一个标签为mysql:latest的镜像，
latest
14.04
TAG
5506de2b643b
5506de2b643b
IMAGE ID
发现ubuntu：latest镜像（准确地说，是
命令格式为dockerrmiIMAGE
且没有额外的标签指向它，执行
CREATED
weeksago
第3章
rmi命令会彻底删
192.8MB
VIRTUAL SIZE
像21
---
## Page 36
e812617b41f6:
临时镜像，
些遗留问题。
时，会先尝试删除所有指向该镜像的标签，
22第一部分Docker入门
再次使用docker
Deleted:511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158
Deleted:2318d26665eff33e9f91c4c99036751afb40eb58f944a585372bec1407828ad3
此时再使用临时的ID来删除镜像，
ssudo docker rm e81
因此，正确的做法是，
$sudo docker images
笔者不推荐使用-f参数来强制删除一个存在容器依赖的镜像，
如果要想强行删除镜像，
Error response from daemon: Conflict,
试图删除该镜像，Docker会提示有容器正在运行，无法删除：
可以看到，后台存在一个退出状态的容器，是刚基于ubuntu：latest镜像创建的。
e812617b41f6
$sudo docker ps -a
使用dockerps-a命令可以看到本机上存在的所有容器：
s sudo docker run ubuntu echo 'hello! I am here!'
先利用ubuntu镜像创建一个简单的容器，输出一句话“hello！Iam here!"：
注意，当有该镜像创建的容器存在时，镜像文件默认是无法被删除的，例如：
Deleted:
Deleted:
Deleted:
core@localhost
e81
REPOSITORY
$sudo docker rmi-fubuntu
$sudodocker rmiubuntu
Exited (0) 12 seconds ago
CONTAINER ID
原来被强制删除的镜像换了新的ID继续存在系统中。
9bad880da3d219b10423804147d6982da1a7bb1e285777a4d746afca6215bebb
ebc34468f71dca9cb9937bf4c33062540bcacae148df8a70053bfd1acbecaa20
S
TAG
images查看本地的镜像列表，
IMAGE
ubuntu:latest
dockerrmi-f2318d26665ef
先删除依赖该镜像的所有容器，再来删除镜像。首先删除容器
可以使用-f参数：
COMMAND
silly_leakey
2318d26665ef
IMAGEID
此时会正常打印出删除的各层信息：
，然后删除该镜像文件本身。
"echo'hello!Iam
cannot delete 5506de2b643bbecausethe
CREATED
读者会发现一个标签为的
3months ago
CREATED
STATUS
，因为这样往往会造成一
h
PORTS
13 seconds ago
198.7MB
VIRTUAL SIZE
NAMES
---
## Page 37
commit命令来提交为一个新的镜像。提交时可以使用ID或名称来指定容器：
操作，例如创建一个test文件，之后退出：
CONTAINER[REPOSITORY[:TAG]]，主要选项包括：
基于已有镜像的容器创建
以详细介绍。
创建。