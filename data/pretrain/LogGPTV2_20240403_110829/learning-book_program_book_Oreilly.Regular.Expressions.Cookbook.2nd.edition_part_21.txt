Python
The match() function is very similar to the search() function described in the previous
recipe. The key difference is that match() evaluates the regular expression only at the
very begining of the subject string. If the regex does not match at the start of the string,
match() returns None right away. The search() function, however, will keep trying the
the end of the subject string.
regex at each successive position in the string until it either finds a match or reaches
The match to the end of your regular
expression. This way, the regular expression can only match a string either in its entirety
or not at all. If your regular expression uses altermation, as in , make
sure to group the altermation before adding the anchors:  to the string Do you like 13 or 42?, 13 should be returned.
144 | Chapter 3: Programming with RegularExpressions
---
## Page 161
Solution
C#
For quick one-off matches, you can use the static call:
string resultString = Regex.Match(subjectString, @*\d+*) .Value;
If the regex is provided by the end user, you should use the static call with full exception
handling:
string resultString = null;
try {
resultString = Regex,Match(subjectString, @°\d+") .Value;
}catch (ArgumentNullException ex){
// Cannot pass null as the regular expression or subject string
}catch (ArgumentException ex) {
// Syntax error in the regular expression
To use the same regex repeatedly, construct a Regex object:
(+p\a)xa3ag mau - [qoxa8ax xa8ag
ante*(8ugxssaqns)yewfqoxa8ax = Buxsnsax Suxs
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
string resultString = null;
}↓
(+p\@）xa8ag mau =[qoxa8ax xa3a
try{
resultString = regexObj.Match(subjectString) value;
}catch (ArgumentNullException ex){
// Cannot pass null as the subject string
{
}catch (ArgumentException ex) {
// Syntax error in the regular expression
VB.NET
For quick one-off matches, you can use the static call:
If the regex is provided by the end user, you should use the static call with full exception
handling:
Dim ResultString As String = Nothing
ResultString = Regex,Match(SubjectString, "\d+”) value
3.7 Retreve the Matched Text | 145
---
## Page 162
Catch ex As ArgunentNullException
Supaps 1oafqns 1o uotssadxa xetnsax au se Buguaon ssed youue,
Catch ex As ArgunentException
‘Syntax error in the regular expression
End Try
To use the same regex repeatedly, construct a Regex object:
Dim RegexObj As New Regex("\d+*)
Dim ResultString = Regex0bj .Match(SubjectString) .Value
If the regex is provided by the end user, you should use the Regex object with full
exception handling:
Dim ResultString As String = Nothing
Din RegexObj As New Regex(*\d+")
Ax1
ResultString = Regexobj .Ratch(SubjectString) Value
Catch ex As ArgumentNullException
End Try
“Cannot pass Nothing as the subject string
Catch ex As ArgunentException
End Try
‘Syntax error in the regular expression
Java
Create a Matcher to run the search and store the result:
String resultString = null;
Pattern regex = Pattern.compile("\\d+*);
1f (regexMatcher.find()){
resultString = regexMatcher group();
If the regex is provided by the end user, you should use full exception handling:
String resultString = null;
try{
Pattern regex = Pattern.compile("\\d+");
1f (regexMatcher.find()){
(x =xx 
resultString = regexMatcher -group();
} catch (PatternSyntaxException ex){
{
// Syntax error in the regular expression
146 | Chapter 3: Programming with RegularExpressions
---
## Page 163
JavaScript
var result = subject.match(/\d+/);
if (result){
result =result[o];
}else {
result - '';
PHP
if (preg_match(′/\d+/', $subject, $groups)) {
[0]sdnox8s =4Tnsaxs
}else {
$result = '';
Perl
1f ($subject =~ n/\d+/) {
$result = $8;
}else {
$result -*';
Python
For quick one-off matches, you can use the global function:
1f natchobj:
matchobj = re.search(*regex pattern*, subject)
result = matchobj -group()
else:
result - **
To use the same regex repeatedly, use a compiled object:
reobj = re.compile("regex pattern°)
matchobj = reobj -search(subject)
if match:
result = matchobj -group()
else:
result - **
Ruby
You can use the =α~ operator and its magic $8 variable:
if subject =~ /regex pattern/
else
result = $&
3.7 Retreve the Matched Text | 147
---
## Page 164
result =
end
Alternatively, you can call the match method on a Regexp object:
matchobj = /regex pattern/.match(subject)
if matchobj
result = matchobj[o]
else
result = *"
end
Discussion
Extracting thepart f alonger string thatfits the pattemisanotherprimejobforregular
expressions. All programming languages discussed in this book provide an easy way to
get the first regular expression match from a string, The function will atempt the reg-
ular expression at the start of the string and continue canning through the string until
the regular expression matches.
NET
The .NET Regex class does not have a member that returms the string matched by the
regular expression. But it does have a Match() method that returns an instance of the
atch class. This Match object has a property called value, which holds the text matched
by the regular expression. If the regular expression fails to match, it still returms a
Match object, but the Value property holds an empty string.
A total of five overloads allows you to call the Match() method in various ways. The
first parameter is always the string that holds the subject text in which you want the
regular expression to find a match. This parameter should not be null. Otherwise,
Match() will throw an ArgumentNullException.
If you want to use the regular expression only a few times, you can use a static call. The
second parameter is then the regular expression you want to use. You can pass regex
options as an optional third parameter. If your regular expression has a syntax error,
an ArgumentException will be thrown.
If you want to use the same regular expression on many strings, you can make your
code more efficient by constructing a Regex object first and then calling Match() on that
object. The first parameter with the subject string is then the only required parameter.
You can specify an optional second parameter to indicate the character index at which
the regular expression should begin to search. Essentially, the number you pass as the
second parameter is the number of characters at the start of your subject string that the
regular expression should ignore. This can be useful when you've already processed
the string up to a point and want to search the remainder of the string. If you specify
this number, it must be in the range from zero to the length of the subject string.
Otherwise, IsMatch() throws an ArgumentoutofRangeException.
148 | Chapter 3: Programming with RegularExpressions
---
## Page 165
If you specify the second parameter with the starting position, you can specify a third
parameter that indicates the length of the substring the regular expression is allowed
to search through. This number must be greater than or equal to zero and must not
exceed the length of the subject string (first parameter) minus the starting offset (second
parameter). For instance, regex0bj.Match(“123456", 3, 2) tries to find a match in
45*. If the third parameter is greater than the length of the subject string, Match()
throws an ArgumentoutofRangeException. If the third parameter is not greater than the
length of the subject string, but the sum of the second and third parameters is greater
than the length of the string, then another IndexOutofRangeException is thrown. If you
allow the userto specify starting and ending positions, either check them before calling
Match() or make sure to catch both out-of-range exceptions.
The staticoverloads donot allow for the parameters that specify which par of the string
the regular expression can search through.
Java
To get the part of a string matched by a regular expression, you need to create a
Natcher, as explained in Recipe 3.3. Then call the find() method on your matcher,
without any parameters. If find() returns true, call group() without any parameters to
retrieve the text matched by yourregular expression. If find() returms false, you should
not call group(), as all you'll get is an I1legalStateException.
Matcher ,find() takes one optional parameter with the starting position in the subject
string. You can use this to begin the search at a certain position in the string.
Specify zero to begin the match attempt at the start of the string. An IndexoutofBound
sException is thrown if you set the starting position to a negative number, or to a
number greater than the length of the subject string.
If you omit the parameter, find() starts at the character after the previous match found
by find(). If you’re calling find() for the first time after Pattern.matcher() or
Natcher .reset (),then find() begins searching at the start of the sring.
JavaScript
The string.match() method takes a regular expression as its only parameter. You can
pass the regular expression as a literal regex, a regular expression object, or as a string.
oqo dxa3ax Ateuoduan e saneaa> ()uoeu*Butxs fus t ssed nof j
When the match attempt fails, string.match() retums nul1. This allows you to differ-
entiate between a regex that finds no matches, and a regex that finds a zero-length
match. It does mean that you cannot directly display the result, as *null° or an error
about a null object may appear.
When the match attempt succeeds, string.match() returns an array with the details of
the match. Element zero in the array is a string that holds the text matched by the regular
expression.
3.7 Retreve the Matched Text | 149
---
## Page 166
Make sure that you do not add the /g flag to your regular expression. If you do,
string-match() behaves differently, as Recipe 3.10 explains.
PHP
The preg_match() function discussed in the previous rwo recipes takes an optional third
parameter to store the text matched by the regular expression and its capturing groups.
When preg_match() returms 1, the variable holds an array of strings. Element zero in
the array holds the overall regular expression match. The other elements are explained
in Recipe 3.9.
Perl
When the pattern-matching operator m// finds a match, it sets several special variables.
One of those is the $& variable, which holds the part of the string matched by the regular
expression. The other special variables are explained in later recipes.
Python
Recipe 3.5 explains the search() function. This time, we store the Matchobject instance
returmed by search () into a variable. To get the part of the string matched by the regular
expression, we call the group() method on the match object without any parameters.
Ruby
Recipe 3.8 explains the $α variable and the MatchData object. In a string context, this
object evaluates to the text matched by the regular expression. In an array context, this
object evaluates to an array with element number zero holding the overall regular ex-
pression match.
$& is a special read-only variable. It is an alias for $~[o], which holds a string with the
text matched by the regular expression.
See Also
Recipe 3.5 shows code to test whether a regex matches a subject string, without re-
trieving the actual match.
Recipe 3.8 shows code to determine the position and length of the match.
Recipe 3.9 shows code to get the text matched by a particular part (capruring group)
of a regex.
Recipe 3.10 shows code to get a list of allthe matches a regex can find in a string.
Recipe 3.11 shows code to iterate over all the marches a regex can find in a string.
---
## Page 167
3.8DeterminethePositionandLengthoftheMatch
Problem
Instead of extracting the substring matched by the regular expression, as shown in the
previous recipe, you want to determine the starting position and length of the match.
With this information, you can extract the match in your own code or apply whatever
xaa a q paupeu Buas leu3uo au jo 1aed su1 uo Aouey no Bussaoad
Solution
C#
For quick one-off matches, you can use the static call:
int matchstart, natchlength = -1;
Match matchResult = Regex.Match(subjectString, @"\d+*);
1f (matchResult.Success) {
matchstart = matchResult Index;
matchlength = matchResult.Length;
To use the same regex repeatedly, construct a Regex object:
int matchstart, natchlength = -1;
Regex regex0bj = new Regex(é*\d+");
Match matchResult = regexobj .Match(subjectString) Value;
1f (matchResult.Success){
matchstart = matchResult Index;
matchlength = matchResult.Length;
VB.NET
For quick one-off matches, you can use the static call:
Dim MatchStart = -1
Dim MatchLength = -1
Dim MatchResult = Regex.Match(SubjectString, "\d+")
If MatchResult.Success Then
MatchStart = MatchResult .Index
MatchLength = MatchResult.Length
End If
To use the same regex repeatedly, construct a Regex object:
Dim MatchStart = -1
Dim MatchLength = -1
Dim MatchResult = Regex.Match(SubjectString, “\d+")
Dim RegexObj As New Regex("\d+*)
3.8 Determine the Position and Length of the Match I 151
---
## Page 168