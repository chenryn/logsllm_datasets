any from {1,2,3,7,8,9,13}
prefixes P1 from {2}
prefixes P2 from {3}
P: common actions &
locations
Advertise to {4,5,6}
Do not advertise to {4}
Advertise to {4,5,6}
Advertise to {4,5,6}
Advertise to {I 0,11,12 }
Do not advertise to {5,6}
(c) Configuration after network evolution
Comm.
1: set of routes
A'
B'
any from {1,2,3,7,8,9,13}
prefixes P1 from {2}
prefixes P2 from {3}
P: common actions &
Locations
Advertise to
{4,5,6,10,11,12 }
Do not advertise to
{4,5,6}
(d) Simplified configuration after applying NetPiler
Figure 1. An example scenario on inter-domain routing and BOP
community. The italicized letters A through F represent BOP
communities. P1 and P2 are particular sets of destination prefixes.
The second column (i.e. the set of routes) represents instance sets,
whereas the third column (i.e. common actions & locations)
represents property sets.
disallowed by the default deny action. There is a
variety of community usages, and more details can be
found in [15].
1-4244-2398-9/08/$20.00 ©2008 IEEE
299
DSN 2008: Lee et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:36 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
4
3.1.2. Overview Example. In the scenario, we show
how a network configuration becomes convoluted as
communities are added and replaced ad hoc, and how
we reduce the complexity. To better illustrate the
routing policies in the network, we use the table as
shown in Fig. 1(b). Each row represents a routing
policy group implemented by a community. The letter
on the first column is the community that implements
the policy. The second and third columns represent
instance sets and the respective property sets. For
example, Community A implements the policy group,
"all routes from ASes {I ,2,3} are re-advertised to ASes
{4,5,6}." This group has three members in IA={any
prefixes from ASes 1,2,3} and is characterized by
PA={advertise to ASes 4,5,6}. P1 and P2 in community
B represent certain collections of prefixes from ASes 2
and 3, respectively. When there are multiple rules for
the same route,
the most specific rule precedes the
other rules. For example, regarding the advertisement
pattern to AS4, the second policy applies to prefixes P1
from AS2, whereas the first policy applies to the rest of
the routes from AS2. Thus, all routes from AS2 are
advertised to AS4 except the prefixes P1. The actual
implementation of the two policies is shown in Fig.
1(a). For simplicity, we omit the sessions with ASes
{3,6}. Route filter Z2 tags prefixes P1 with community
B. Therefore, the prefixes are filtered out by Z4 and are
not allowed into AS4.
Fig. 1(b) shows the initial configuration in the
scenario, and Fig. 1(c) shows the configuration after
the network went through changes. We show only the
two configurations in the evolution because of space
limitations.
• Initially, there are six neighboring networks, ASes
1 through 6. One community A is used to re-advertise
routes from ASes {1,2,3} to ASes {4,5,6}.
It is decided that IP prefix P1 from AS 2 and
prefix P2 from AS 3 are not re-advertised to AS 4.
Community B is set on the IP prefixes and matched by
a new outbound statement towards AS 4 to deny the IP
prefixes. This situation corresponds to Fig. l(b).
• The network establishes a peering relationship
with three new ASes {7,8,9 }. Community C is defined
to re-advertise routes from ASes {7,8,9} to ASes
{4,5,6}.
• There is a merger of networks, and the operators
decide to replace communities A and C with a new
community D. In the procedure, As and Cs remain in
the configuration in order to prevent any malfunction
while the migration is incomplete.
• Three new neighbors, ASes {10, 11,12} are added,
and a new community E is defined so that the three new
neighbors
{1,2,3,7,8,9}.
receive
routes
advertised
from ASes
• A new neighbor session to AS 13 is negotiated by
a new operator. Without being aware of community D,
the operator applies two old communities A and C.
Community E is also applied.
•
IP prefixes P1 and P2 from ASes 2 and 3,
respectively, are no longer re-advertised to ASes 5 and
6 by a new community F.
The configuration after the network extension (as
shown in Fig. 1(c)) is much more complex than its
initial form with two communities A and B. There are
six communities, each of which forms a certain routing
policy group. NetPiler can re-cluster the policies into
two distinct groups, and the result is shown in Fig. 1(d).
Each of these two groups can be implemented by a
single
simplified
configuration is functionally equivalent to the intended
policies. In other words, any route received from any
neighbor will take the same action at any location as in
Fig.l(c). As illustrated by the example, our aim is to
make the configuration more manageable by combining
similar groups, eliminating unused groups, and better
expressing the used groups.
community. Note
that
this
3.2.
Decomposition
Instance-Property
Model
and
An element
in a network configuration can be
described with a set of properties associated with it.
Our model captures such relationships between the
element's instances and its properties in order
to
identify groups of instances sharing common properties
and to simplify the configuration through grouping. We
call
this model an instance-property model. In the
model, a relation of an instance i having a property p is
represented by two vertices i and p having an edge
between them. In other words, our model is a bipartite
graph with partite sets I, the set of instances, and P, the
set of properties associated with the instances such that
instance i E I is adjacent
to a property pEP iff P
characterizes i. Fig. 2(a) shows an instance-property
model G with five instances and seven properties.
Instance i] has 4 properties {Ph P3, P4, P7} and thus is
incident with 4 edges that are joined with {Ph P3, P4,
P7}.
It is clear that an instance-property model can be
described by listing each relation (i,p) represented by
an edge. However, our goal
is not to separate each
single edge. We partition the edges into sets, such that
each set represents a distinct group of instances that
share certain properties as a unit. We call such a
partition a decomposition of the model. Grouping
1-4244-2398-9/08/$20.00 ©2008 IEEE
300
DSN 2008: Lee et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:36 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
5
decompositions, we look for the decomposition where
each group is manageable (i.e. an operator can reuse
the groups to specify new instances or to modify
existing instances with or without slight modification in
the group definitions, and the meaning of the groups is
consistent so that
is straightforward to grasp the
meaning of the groups.).
it
A manageable decomposition for one type of
element may not be manageable for another type of
element. Thus,
a manageable
decomposition requires domain knowledge about the
instance. In Section 4, we suggest one method to find a
manageable decomposition, especially for inter-domain
routing policies and the BGP community.
identification
of
(a)
(b)
3.3. Applications of NetPiler
Figure 2. A decomposition of an instance-property model G (as
shown in (a)) into complete bipartite subgraphs A, B, and C (as
shown in (b)).
IA is adjacent
similar objects and representing the objects by group
improve the manageability. We define a group as
follows. Group A is a nonempty set of properties PA
together with a set of instances IA={il i EIG , Pi = PAl.
Pi = {pi pEPG , (i,p)EE(G)}. G denotes the instance(cid:173)
property model and E(G) its edge set. Since in A, every
to every
instance in one partite set
property in the other partite set PA , a group is
to a complete bipartite graph. Thus,
equivalent
partitioning G into groups is the same as decomposing
G into complete bipartite subgraphs. Fig. 2(b) presents
a decomposition of G in Fig. 2(a) into 3 complete
bipartite graphs (groups), A, B, and C. If the instances
then A, B, and C can represent "routes
are routes,
advertised from ASes {I ,2,3,4,5 }", "routes received at
router Rl", and "routes received at router R2". Each
group may have different properties such as "advertise
to AS 6", "advertise to AS 7", and "prepend the AS n
times in the AS-PATH attribute when the routes are
advertised to AS 7". Note that i2 belongs to both A and
B. Such a membership is a single new group that
inherits the properties from A with the addition of the
properties from B. The decomposition of Gis function(cid:173)
preserving: we do not add or delete any edges in G, and
thus the intended behavior of the configuration does
not change although its specification does.
, B'
Note that there are many ways to decompose G into
groups. For example, G is also decomposable into three
, and C' with their I and P sets as
groups A'
follows: lA' ={i]}, PA' ={Ph P3, P4, P7}, IB ' ={ib i4},
PB ' ={Ph Pb P3, P4, P5, P7},
i5}, and
possible
Pe ' ={Ph
Ie' ={i3,
all
P6, P7}. Of
P3,
P4,
In this section, we investigate which aspect of a
network configuration can be simplified by NetPiler.
There are cases where grouping is explicitly used with
group ID. These cases include route tagging based on
routing policies, packet marking/grouping based on
QoS policies, and MPLS labeling based on destination
prefixes/packet treatments. ACLs (Access Control List)
in a network can also be grouped into distinct sets of
policies. Since all routinglQoS/ACL policies are based
on filters, which are essentially if-then-else chains, we
can use the same technique as shown in Section 4 to
identify instances and properties. The instance set I
could be a set of routes/packets, and the property set P
could be a set of actions on the routes/packets and
locations of the actions.
The routing policies and ACLs comprise a major
portion of the network configurations in the observed
networks (i.e. up to 70% of a configuration file), and
they are modified frequently, often within 10 days of
the previous changes [16]. In particular, the networks
rely heavily on BGP communities to tag routes and
control announcements. Therefore, we chose to present
the application of NetPiler in BGP communities. BGP
communities are particularly troublesome in large
carriers. There are hundreds of different communities,
and tens of these communities are used in each
command line. Network configuration using large
number of communities
to
understand, and prone to human errors. We observe
numerous errors related to BGP communities in the
networks that we study. We believe the application in
BGP communities would better illustrate the benefits of
our method.
tedious, difficult
is
We
are currently working on extending the
applications. For example, interface configurations can
be grouped into "external interface class", "interface
1-4244-2398-9/08/$20.00 ©2008 IEEE
301
DSN 2008: Lee et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:36 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
6
class facing neighbor N1", and "interface class facing
neighbor N2". Such description is possible in lUNOS
by using the group command [20].
and we assign a community to each routing policy so
that the community is used in its associated if-then(cid:173)
clauses.
4. Demonstration with Communities
4.2. Identifying Distinct Policies
4.1. Construction of Instance-Property Model
At a high level, we construct the instance-property
model for routing policies that are implemented by
communities. We then decompose the model
into
groups such that each group represents a distinct
routing policy as a unit and therefore is assigned to a
different community.
We identify an if-then-clause in a route filter as an
instance. If we think of a community in terms of a
group defined in Section 3.2,
the members of the
community (Le. the instances of the community) are the
routes tagged with the community. In a configuration,
the routes are represented by sets of conditions in one
or more route filters, possibly applied to different
neighbors, such that each set is matched as a unit. One
such set of conditions is equivalent to an if-then-clause.
In Fig.
that
represent instances of community A: i) all routes from
AS l, ii) prefixes P1 from AS2, and iii) the rest of the
prefixes from AS2.
there are three if-then-clauses
l(a),
the
Similarly to instances, we identify an if-then-clause
in a route filter as a property. In other words, each if(cid:173)
then-clause will become an instance as well as a
property. The properties of
community are
local/remote locations where the routes are matched.
These locations are associated with the actions that take
place on the routes. In a configuration, the local/remote
locations and the actions are represented by if-then(cid:173)
clauses that match the community. In Fig.
l(a), there
are two if-then-clauses that match community A, and
they are applied outbound to AS4 and AS5.
of
the
The
edges
instance-property model,
relationships between instances and properties, are
identified as follows. There is an edge between one if(cid:173)
then-clause i and another if-then-clause P if the routes
represented by i are matched by p via communities (i.e.
if the communities attached by i match the condition in
p). For example in Fig. 1(a), the routes received from
ASl have community A attached by the if-then-clause
add A". These routes match the if-then(cid:173)
"i f
clause in filter 25, "if A, permit". Therefore, the two
if-then-clauses are joined by an edge. For an edge (i,p),
routes matched by i flow through p and the actions
specified in p are taken on the routes. In the next
section, we identify distinct policy groups that are
represented by the dependencies among if-then-clauses,
any I