### 3.1.2. Overview Example

In this scenario, we demonstrate how a network configuration can become complex as communities are added and replaced ad hoc, and how we can reduce this complexity. To better illustrate the routing policies in the network, we use the table shown in Fig. 1(b). Each row represents a routing policy group implemented by a community. The first column contains the community that implements the policy, while the second and third columns represent instance sets and property sets, respectively.

For example, Community A implements the policy group: "all routes from ASes {1, 2, 3} are re-advertised to ASes {4, 5, 6}." This group has three members: IA = {any prefixes from ASes 1, 2, 3} and is characterized by PA = {advertise to ASes 4, 5, 6}. P1 and P2 in Community B represent specific collections of prefixes from ASes 2 and 3, respectively. When there are multiple rules for the same route, the most specific rule takes precedence over the others.

For instance, regarding the advertisement pattern to AS4, the second policy applies to prefixes P1 from AS2, while the first policy applies to the rest of the routes from AS2. Thus, all routes from AS2 are advertised to AS4 except for the prefixes P1. The actual implementation of these two policies is shown in Fig. 1(a). For simplicity, sessions with ASes {3, 6} are omitted. Route filter Z2 tags prefixes P1 with Community B, so these prefixes are filtered out by Z4 and not allowed into AS4.

Fig. 1(b) shows the initial configuration, and Fig. 1(c) shows the configuration after the network has undergone changes. We only show these two configurations due to space limitations.

- **Initial Configuration:**
  - There are six neighboring networks, ASes {1, 2, 3, 4, 5, 6}.
  - Community A is used to re-advertise routes from ASes {1, 2, 3} to ASes {4, 5, 6}.
  - It is decided that IP prefix P1 from AS2 and prefix P2 from AS3 are not re-advertised to AS4.
  - Community B is set on these IP prefixes and matched by a new outbound statement towards AS4 to deny the IP prefixes. This situation corresponds to Fig. 1(b).

- **Network Evolution:**
  - The network establishes a peering relationship with three new ASes {7, 8, 9}.
  - Community C is defined to re-advertise routes from ASes {7, 8, 9} to ASes {4, 5, 6}.
  - There is a merger of networks, and the operators decide to replace Communities A and C with a new Community D. During the migration, As and Cs remain in the configuration to prevent malfunctions.
  - Three new neighbors, ASes {10, 11, 12}, are added, and a new Community E is defined to advertise routes from ASes {1, 2, 3, 7, 8, 9} to these new neighbors.
  - A new neighbor session to AS13 is negotiated by a new operator who applies old Communities A and C, as well as Community E.
  - IP prefixes P1 and P2 from ASes 2 and 3, respectively, are no longer re-advertised to ASes 5 and 6 by a new Community F.

The configuration after the network extension (Fig. 1(c)) is much more complex than its initial form with two communities A and B. There are now six communities, each forming a certain routing policy group. NetPiler can re-cluster these policies into two distinct groups, as shown in Fig. 1(d). Each of these two groups can be implemented by a single community, and the simplified configuration is functionally equivalent to the intended policies. In other words, any route received from any neighbor will take the same action at any location as in Fig. 1(c). Our aim is to make the configuration more manageable by combining similar groups, eliminating unused groups, and better expressing the used groups.

### 3.2. Decomposition of Instance-Property Model

An element in a network configuration can be described with a set of properties associated with it. Our model captures the relationships between the element's instances and its properties to identify groups of instances sharing common properties and simplify the configuration through grouping. This model is called an instance-property model. In the model, the relation of an instance \( i \) having a property \( p \) is represented by two vertices \( i \) and \( p \) connected by an edge. Essentially, our model is a bipartite graph with partite sets \( I \) (the set of instances) and \( P \) (the set of properties associated with the instances), such that instance \( i \in I \) is adjacent to a property \( p \in P \) if and only if \( p \) characterizes \( i \). Fig. 2(a) shows an instance-property model \( G \) with five instances and seven properties. Instance \( i_1 \) has four properties \{P1, P3, P4, P7\} and is incident with four edges connected to \{P1, P3, P4, P7\}.

It is clear that an instance-property model can be described by listing each relation \((i, p)\) represented by an edge. However, our goal is not to separate each single edge but to partition the edges into sets, where each set represents a distinct group of instances that share certain properties as a unit. We call such a partition a decomposition of the model. Grouping decompositions, we look for the decomposition where each group is manageable, meaning an operator can reuse the groups to specify new instances or modify existing instances with or without slight modifications, and the meaning of the groups is consistent and straightforward to understand.

A manageable decomposition for one type of element may not be manageable for another type of element. Therefore, identifying a manageable decomposition requires domain knowledge about the instance. In Section 4, we suggest a method to find a manageable decomposition, especially for inter-domain routing policies and the BGP community.

### 3.3. Applications of NetPiler

In this section, we investigate which aspects of a network configuration can be simplified by NetPiler. There are cases where grouping is explicitly used with group IDs, such as route tagging based on routing policies, packet marking/grouping based on QoS policies, and MPLS labeling based on destination prefixes/packet treatments. Access Control Lists (ACLs) in a network can also be grouped into distinct sets of policies. Since all routing/QoS/ACL policies are based on filters, which are essentially if-then-else chains, we can use the same technique as shown in Section 4 to identify instances and properties. The instance set \( I \) could be a set of routes/packets, and the property set \( P \) could be a set of actions on the routes/packets and locations of the actions.

Routing policies and ACLs comprise a major portion of the network configurations in observed networks (up to 70% of a configuration file) and are frequently modified, often within 10 days of the previous changes [16]. In particular, networks rely heavily on BGP communities to tag routes and control announcements. Therefore, we chose to present the application of NetPiler in BGP communities. BGP communities are particularly troublesome in large carriers, with hundreds of different communities and tens of these communities used in each command line. Network configurations using a large number of communities are tedious, difficult to understand, and prone to human errors. We observe numerous errors related to BGP communities in the networks we study. We believe the application in BGP communities would better illustrate the benefits of our method.

We are currently working on extending the applications. For example, interface configurations can be grouped into "external interface class," "interface class facing neighbor N1," and "interface class facing neighbor N2." Such descriptions are possible in JUNOS by using the group command [20].

### 4. Demonstration with Communities

#### 4.1. Construction of Instance-Property Model

At a high level, we construct the instance-property model for routing policies implemented by communities. We then decompose the model into groups, where each group represents a distinct routing policy as a unit and is assigned to a different community.

We identify an if-then-clause in a route filter as an instance. If we think of a community in terms of a group defined in Section 3.2, the members of the community (i.e., the instances of the community) are the routes tagged with the community. In a configuration, the routes are represented by sets of conditions in one or more route filters, possibly applied to different neighbors, such that each set is matched as a unit. One such set of conditions is equivalent to an if-then-clause. In Fig. 1(a), there are three if-then-clauses that represent instances of Community A: i) all routes from AS1, ii) prefixes P1 from AS2, and iii) the rest of the prefixes from AS2.

Similarly, we identify an if-then-clause in a route filter as a property. In other words, each if-then-clause will become both an instance and a property. The properties of a community are the local/remote locations where the routes are matched, associated with the actions taken on the routes. In a configuration, the local/remote locations and the actions are represented by if-then-clauses that match the community. In Fig. 1(a), there are two if-then-clauses that match Community A, applied outbound to AS4 and AS5.

The edges in the instance-property model, representing relationships between instances and properties, are identified as follows: there is an edge between one if-then-clause \( i \) and another if-then-clause \( p \) if the routes represented by \( i \) are matched by \( p \) via communities (i.e., if the communities attached by \( i \) match the condition in \( p \)). For example, in Fig. 1(a), the routes received from AS1 have Community A attached by the if-then-clause "add A." These routes match the if-then-clause in filter 25, "if A, permit." Therefore, the two if-then-clauses are joined by an edge. For an edge \((i, p)\), routes matched by \( i \) flow through \( p \) and the actions specified in \( p \) are taken on the routes. In the next section, we identify distinct policy groups that are represented by the dependencies among if-then-clauses.