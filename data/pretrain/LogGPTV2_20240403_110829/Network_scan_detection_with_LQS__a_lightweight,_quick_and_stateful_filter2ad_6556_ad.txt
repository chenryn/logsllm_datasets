speciﬁc period of time. Although the local host will open
the required port, connection attempts from remote hosts to
this port will fail if the network ﬁrewall is blocking inbound
connections. Therefore, such failed connection attempts will
appear as scanning activity.
To overcome this limitation, an active detector could send
a TCP SYN packet (or empty UDP packet) directly to the
target port without going through the ﬁrewall to ﬁnd out
whether the port is open or closed. If the port is open, failed
connection attempts destined to this port must be ignored
(i.e., not added to the F C table).
4. ADVANTAGES OVER TRW
This section illustrates the advantages of LQS over the
TRW algorithm [9]. TRW classiﬁes remote hosts as either
benign, scanner, or pending according to the ratio of remote
host’s successful or unsuccessful connection attempts in the
inbound network traﬃc within a speciﬁed time frame. The
following metrics are compared for each algorithm.
Scan detection capability and the minimum num-
ber of connection attempts. While LQS can detect both
horizontal (i.e., probing multiple IP addresses for the same
port) and vertical scanning (i.e., probing a set of ports on the
same IP address), TRW is designed to detect only horizontal
scanning. For detecting a horizontal scanner, as a function
of the TRW default parameters, TRW requires at least four
consequent failed connection attempts initiated to four dis-
tinct local hosts within a given time window for a remote
host to be classiﬁed as a scanner. In LQS, only two failed
connection attempts initiated to two distinct local hosts are
necessary to classify a remote host as a scanner. However,
in case of vertical scanning, LQS requires ﬁve failed con-
nection attempts initiated to ﬁve distinct ports in the same
local host to classify a remote host as a scanner.
While the LQS algorithm will operate in a similar way to
TRW (in the default setting) for detecting horizontal scan-
ners when k is set to 4, ﬁrst-contact successful connection
attempts initiated by the scanners will not delay detection
in LQS as in TRW. The fast detection in LQS makes it po-
tentially suitable for fast post-detection responses.
False negative and false positive rates. In LQS, detect-
ing scanners after their second failed connection attempt sig-
niﬁcantly decreases the false negative rate; i.e., the number
of distinct IP addresses of scanners that were erroneously
missed by the algorithm. Only those scanners that probed
a single local host (and less than ﬁve distinct destination
ports in this host) within I3 time window will not be de-
tected by LQS. In comparison, as a function of the TRW
109
default parameters, TRW misses scanners that do not make
four consecutive failed connection attempts within a given
time window with no successful connection in between.
Given that hosts are usually conﬁgured using domain names
and not IP addresses, causes of failed connection attempts
from a benign remote host are often due to: (i) some of the
contacted network services are temporarily unavailable; (ii)
maintenance in the hosting servers; (iii) network failures;
or (iv) outdated DNS entries.
In LQS, failed connection
attempts to previously oﬀered services are not considered
as the OP S and CP S tables keep track of previously open
ports in the monitored network. Therefore, the high detec-
tion rate in LQS is not at the cost of high false positive rate
(the same can also be inferred from our empirical evaluation
on both datasets; see Section 5).
Suitability for worm detection. The TRW algorithm
must wait for each new connection attempt to check whether
it is successful or not. While a TCP connection status can be
determined as successful after the remote host completes the
3-way establishment handshake, determining that the con-
nection failed (in case of an unanswered connection due to a
closed port, a non-existing host, or a ﬁrewall rule) might re-
quire waiting for a TCP timeout (two minutes is the default
timeout value). For UDP, the fact that a local host responds
with a UDP datagram to a remote host who initiated the
exchange with a UDP packet indicates that the UDP port
is open, and thus the connection is successful. Otherwise, if
there is no UDP reply from the local host for a speciﬁc time
(two minutes is the default timeout value) the connection is
considered unsuccessful. Therefore, TRW is not designed to
detect scanning worms that attempt to quickly propagate
for which fast response is vital. Unlike the TRW algorithm,
LQS does not wait for the connection state to be known;
instead, it immediately assumes the connection is a failure
if the {destination IP address, destination port} pair is in
neither the OP S nor CP S tables.
Schechter et al. [21] proposed a hybrid approach that com-
bines a variation of TRW and a credit-based connection rate
limiting algorithm. The new variation detects fast scan-
ning worms that can generate thousands of connection at-
tempts (to ﬁnd vulnerable machines) before being caught
if only TRW is deployed for scan detection. Also, Jung et
al. [8] proposed combining TRW with a rate-based sequen-
tial hypothesis testing algorithm that identiﬁes if the rate
at which a host initiates connections to new destinations is
high. In addition to the drawback that limiting the rate at
which ﬁrst-contact connections can be initiated could block
some legitimate hosts, these approaches are unable to detect
stealthy worms.
Immunity to evasion and the ability to detect stealthy
scanners. Since TRW must wait for a connection state
to be known (two minutes is the default timeout value in
TCP/UDP as discussed above), a single remote host can
send thousands or millions of ﬁrst packets (e.g., SYN pack-
ets) in the ﬁrst two minutes to diﬀerent local hosts and re-
ceives responses from open ports in the target network before
being detected by TRW. If LQS is used, the remote host will
be caught from the second connection attempt (e.g., imme-
diately after sending the second SYN packet to a diﬀerent
local host).
Since TRW credits a remote host making successful con-
nections by reducing its likelihood ratio towards being clas-
siﬁed as benign, an adversary with knowledge of some avail-
able services in the target network can make successful con-
nections to these services, while scanning the network to
delay detection [10]. This feature in the TRW algorithm
aims to avoid ﬂagging a benign host that makes some failed
connection attempts as a scanner. However, in addition to
the possible evasion vulnerability, this feature is unnecessary
in LQS to reduce the false positive rate since LQS takes into
account various possible cases of benign failed connection at-
tempts (i.e., those that have a high probability of not being
a scan activity).
In the default setting, LQS is able to detect stealthy scan-
ners after only two failed connection attempts to two dis-
tinct local hosts, even if the same remote host made suc-
cessful connections before or between these failed attempts.
In contrast, with the default parameters, TRW requires four
consecutive failed connection attempts to classify a remote
as a scanner. Also, the default time windows used in LQS
to keep the state of the remote hosts are of longer duration
than those used in TRW.
TRW has a list of friendly remote hosts similar to LQS
non-malicious remote hosts table, CR. However, in TRW,
if a remote host is added to the friendly list, any further
connection attempts initiated by this remote to any local
host will not be examined by TRW. Therefore, if a local host
initiates a connection to a malicious remote host, the remote
can scan the network without being detected. In LQS, only
connection attempts to the same local host by the remote
are not examined for possible scan activity. Therefore, a
malicious remote that was previously contacted by a local
host will only be able to scan the same local host without
being detected.
Required Computing Time and Space In LQS, the
number of entries in the OP S and CP S tables is bounded
by the number of oﬀered network services (during I1 and
I2 time periods respectively) which is expected to occupy
an insigniﬁcant amount of RAM (for example, < 5k in both
the datasets studied; see Section 2.1). Both the LQS and
TRW algorithms keep an individual set for scanners and also
for non-malicious remotes that have been contacted by local
hosts. TRW keeps an additional set for benign remotes.
The most expensive operations (e.g., insert and lookup) in
LQS are those related to the F C table which contains remote
IP addresses having at least one failed connection attempt.
LQS keeps a list of up to k destination IP/port pairs a re-
mote host unsuccessfully attempted to contact where the list
is incremented only if the remote unsuccessfully contacts a
new pair. Each remote IP address (i.e., an entry in the ta-
ble) is linked to a set of unsuccessfully contacted local IP
addresses. Also, in this set, each contacted local host is
linked to a set of targeted destination ports by the remote.
Let L be the number of available local IP addresses and
R be the number of remote hosts contacting the monitored
network in a given time window. Also, let Rf ailed be a
subset of R for those remotes making at least one failed
connection attempt and Rsuccess be a subset of R for those
remotes making at least one successful connection. Assum-
ing that the used data structure needs 4 bytes to store one
IP address and 2 bytes to store the port number, the max-
imum required space for F C in LQS is when every remote
host in Rf ailed is vertically scanning a single local host:
Rf ailed((4 + 2) + (k − 1)(4 × 2)) = Rf ailed(8k − 2) bytes.
110
RB Classiﬁcation
RB count TRW LQS RB count TRW LQS
Dataset I
Dataset II
Benign
Likely Benign
Scanner
Likely Scanner
Unknown (one failed)
Unknown (others)
Total
317
5,086
375
206
826
221
7,031
0
0
346
69
0
1
416
0
0
367
111
0
2
480
1,308
2,351
304
464
23,109
1,386
28,922
0
0
94
6
0
5
105
0
0
272
308
0
3
583
Table 3: The distribution of the detected scanners by TRW and LQS among the categories of RB.
The table S requires at most 4Rf ailed bytes. Given that CR
contains only active local hosts initiating outbound connec-
tions and that its write-expiry interval is short (one hour by
default), the required space for CR is relatively small. For
the default value k = 2, the maximum required space for
LQS is approximately 18Rf ailed bytes. Therefore, the re-
quired RAM for LQS is bounded by a function which grows
linearly with the number of remote addresses contacting the
monitored network. The number of local IP addresses has
no eﬀect on the LQS RAM footprint (except the CR table).
In contrast, given that TRW requires that a remote host
makes at least j (4, with the default parameters) consec-
utive failed attempts to j local hosts to be classiﬁed as a
scanner (and likewise for benign hosts), the minimum re-
quired space for TRW is when the ﬁrst j connection at-
tempts for any given remote to unique local hosts are ei-
ther all successful or all unsuccessful, and when the remote
hosts in Rsuccess contact only one local host. TRW stores
{remote IP address, local IP address} pairs for both suc-
cessful and failed inbound connection attempts (8Rsuccess
bytes, and (8j)Rf ailed bytes), a table of scanners’ IP ad-
dresses (4Rf ailed bytes at most), a table of benign remotes
(for small space, but complex to compute precisely, the re-
quired space is omitted), a table of remotes’ IP addresses
that have been contacted by local hosts (similar to CR in
LQS, we omit the space required for this table), and a table
of likelihood ratios of remotes that contact the monitored
network (requiring (4 + 2)R bytes; assuming 2 bytes to store
the ratio). For j = 4, the minimum required space for TRW
is then: 36Rf ailed + 8Rsuccess + 6R bytes.
Therefore, the maximum required memory footprint for
LQS is smaller than the minimum required for TRW. Also,
in practice, a signiﬁcant percentage of remotes (including
benign and scanners) are expected to make both successful
and failed connection attempts, and thus L will have an ef-
fect on the required space by TRW. Notice that while TRW
must keep a state for each remote that initiates a connection
attempt (whether successful or failed) to the local network,
LQS keeps a state only for remotes that initiate failed con-
nection attempts.
Both algorithms must be called for each new connection
attempt. In LQS, the most expensive operation is the lookup
operation in the F C table. The processing time for such
lookup (and insertion operation if required) depends on the
data structure used and the number of entries. The ideal
data structure to lookup entries in LQS tables is a hash
table. The most expensive lookup in the TRW algorithm
is to determine if the destination IP address has previously
contacted the source IP address. In both algorithms, if hash
tables are used, the computational cost is constant for one
call of the algorithm and the number of calls is linear to the
number of inbound connections.
5. EMPIRICAL EVALUATION
We have implemented LQS in the Bro language (Bro 1.4
NIDS [1]) and used the TRW implementation of Bro. For
the purpose of comparison with LQS, the TRW algorithm
was conﬁgured to monitor remote hosts’ behaviour over a
one day time window (similar to LQS) rather than the 30
minutes default value. While this conﬁguration enables the
TRW algorithm to detect more stealthy scanners, it increases
the required memory footprint. The write-expiry interval in
TRW detected scanners list was removed to keep track of
all detected scanners by TRW over the entire dataset cap-
ture period. Using our reference baseline (see Section 2.2),
we measure the performance of both algorithms using the
following metrics:
1. True Positive Rate (i.e., detection rate): is the propor-
tion of the distinct IP addresses of scanners that are
correctly reported by the detector:
TP rate =
no. of true pos.
no. of true pos. + no. of false neg.
2. False Positive Rate:
is the proportion of the distinct
IP addresses of non-scanners that are erroneously re-
ported as scanners by the detector:
FP rate =