题目
Given an array of numbers nums, in which exactly two elements appear only once and al the
other elements appear exactly twice. Find the two elements that appear only once.
Example:
Input:
[1,2,1,3,2,5]
output: [3,5]
Note:
1. The order of the result is not important. So in the above example, [5, 3] is also correct.
2. Your algorithm should run in linear runtime complexity. Could you implement it using only
constant space complexity?
题目大意
给定一个整数数组nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。找出只出现一
次的那两个元素。
注意：
·结果输出的顺序并不重要，对于上面的例子，[5，3]也是正确答案。
·要求算法时间复杂度是线性的，并且不使用额外的辅助空间。
解题思路
·这一题是第136题的加强版。第136题里面只有一个数出现一次，其他数都出现2次。而这一次
有2个数字出现一次，其他数出现2次。
·解题思路还是利用异或，把出现2次的数先消除。最后我们要找的2个数肯定也是不同的，所以
---
## Page 399
最后2个数对一个数进行异或，答案肯定是不同的。那么我们找哪个数为参照物呢？可以随便
取，不如就取Isb最低位为1的数吧
·于是整个数组会被分为2部分，异或Isb为0的和异或Isb为1的，在这2部分中，用异或操作
把出现2次的数都消除，那么剩下的2个数分别就在这2部分中。
代码
package leetcode
func singleNumberIII(nums[]int)[]int{
diff := 0
for
-, num := range nums {
diff A= num
// Get its last set bit (lsb)
diff &=-diff
res := []int{0, 0} // this array stores the two numbers we will return
for _, num := range nums {
if (num & diff) == 0 { // the bit is not set
res[o] ∧= num
}else {// the bit is set
res[1]  ∧= num
return res
263.UglyNumber
题目
aqnu Ajn ue sl laqwnu uani e jauaum ypaup oi weoud e aj
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
Example 1:
Input: 6
output: true
Explanation: 6 = 2 × 3
Example 2:
---
## Page 400
Input: 8
Output: true
Explanation: 8 = 2 × 2 × 2
Example 3:
Input: 14
Output: false
Explanation: 14 is not ugly since it includes another prime factor 7.
Note:
● 1 is typically treated as an ugly number.
●Input is within the 32-bit signed integer range: [2^31, 2^31  1].
题目大意
判断一个数字是否是“丑陋数字”，“丑陋数字“的定义是一个正数，并且因子只包含2，3，5。
解题思路
依照题意要求做即可。
代码
package leetcode
func isugly(num int) bool{
for i := 2; i  0; i++ {
for num%i == 0 {
num /= i
return num ==
268.MissingNumber
题目
---
## Page 401
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is
missing from the array.
Example 1:
Input: [3,0,1]
Output: 2
Example 2:
Input: [9 ,6, 4 ,2,3 , 5 ,7 ,0, 1]
Output: 8
 Note:Your algorithm should run in linear runtime complexity. Could you implement it using only
constant extra space complexity?
题目大意
给定一个包含0，1，2,n中n个数的序列，找出0..n中没有出现在序列中的那个数。算法应该具有
线性时间复杂度。你能否仅使用额外常数空间来实现？
解题思路
·要求找出0，1，2，...，n中缺失的那个数。还是利用异或的性质，XAX=0。这里我们需要
构造一个X，用数组下标就可以了。数字下标是从[0，n-1]，数字是[0，n]，依次把数组里面
的数组进行异或，把结果和n再异或一次，中和掉出现的数字，剩下的那个数字就是之前没有出
现过的，缺失的数字。
代码
package leetcode
func missingNumber(nums []int) int {
xor, i:= 0, 0
for i = 0; i = n {
buckets [n]++
}else{
buckets [c]++
---
## Page 403
count :=0
for i := n; i >= 0; i-- {
count += buckets[i]
if count >= i{
return i
return 0
//解法二
func hIndexl(citations []int) int {
quickSortl64(citations, 0, 1en(citations)-1)
hIndex := 0
for i := len(citations) - 1; i >= 0; i--{
if citations[i] >= len(citations)-i {
hIndex++
}else{
break
return hIndex
275.H-lndexll
题目
Given an array of citations sorted in ascending order (each citation is a non-negative integer) of
a researcher, write a function to compute the researcher's h-indlex.
According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N
 papers have at least h citations each, and the other N  h papers have no more than h citations
each.*
Example:
Input: citations = [0,1,3,5,6]
output: 3
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each
of them had
received 0, 1, 3, 5, 6 citations respectively.
Since the researcher has 3 papers with at 1east 3 citations each
and the remaining
two with no more than 3 citations each, her h-index is 3.
---
## Page 404
Note:
If there are several possible values for h, the maximum one is taken as the h-indlex.
Follow up:
● This is a follow up problem to H-lndex, where citations is now guaranteed to be sorted in
ascending order.
● Could you solve it in logarithmic time complexity?
题目大意
给定一位研究者论文被引用次数的数组（被引用次数是非负整数），数组已经按照升序排列。编写一个
方法，计算出研究者的h指数。
h指数的定义：“h代表“高引l用次数”（highcitations），一名科研人员的h指数是指他（她）的（N篇
论文中）至多有h篇论文分别被引用了至少h次。（其余的N-h篇论文每篇被引用次数不多于h
次。）“
说明：
·如果h有多有种可能的值，h指数是其中最大的那个。
进阶：
·这是H指数的延伸题目，本题中的citations数组是保证有序的。
你可以优化你的算法到对数时间复杂度吗？
解题思路
·给出一个数组，代表该作者论文被引用次数，要求这个作者的h指数。h指数定义：“高引用次数”
（highcitations），一名科研人员的h指数是指他（她）的（N篇论文中）至多有h篇论文
分别被引用了至少h次。（其余的N-h篇论文每篇被引用次数不多于h次。）
·这一题要找出h指数，即要找到一个边界，在这个边界上为最多的h指数。可以用二分搜索来解
决这道题。当1en（citations）-mid>citations[mid]时，说明h指数的边界一定在右边，
因为最多1en（citations）-mid篇数比引l用数citations[mid]还要大。否则h指数的边界在
左边界，缩小边界以后继续二分。找到边界以后，最终求的是h指数，用1en（citations）-
low即是结果。
代码
package leetcode
func hIndex275(citations []int) int {
1ow, high := 0, len(citations)-1
for 1ow >1
if len(citations)-mid > citations [mid] {
---
## Page 405
1ow = mid + 1
}else{
high = mid - 1
return len(citations) - 1ow
283.MoveZeroes
题目
Given an array nums, write a function to move all O's to the end of it while maintaining the
relative order of the non-zero elements.
Example 1:
Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:
●You must do this in-place without making a copy of the array.
● Minimize the total number of operations.
题目大意
题目要求不能采用额外的辅助空间，将数组中0元素都移动到数组的末尾，并且维持所有非0元素的相
对位置。
解题思路
这一题可以只扫描数组一遍，不断的用1，标记0和非0的元素，然后相互交换，最终到达题目的目
的。与这一题相近的题目有第26题，第27题，第80题。
代码
package leetcode
func moveZeroes(nums []int) {
if 1en(nums) == 0 {
return
---
## Page 406
j := 0
for i:= 0;i>1, 0
---
## Page 408
for _, num := range nums {
if num mid {
high = mid
}else{
1ow = mid + 1
return 1ow
//解法三
func findDuplicate2(nums []int) int {
if 1en(nums)== 0 {
return 0
sort.Ints(nums)
diff := -1
for i:= 0;i= diff {
diff = nums [i]  - i - 1
}else{
return nums[i]
return 0
290.WordPattern
题目
Given a pattern and a string str, find if str follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a
non-empty word in str.
Example 1:
Input: pattern = “abba", str = "dog cat cat dog"
Output: true
Example 2:
---
## Page 409
us ie ie bop, = s *_eqqe, = uuaaied:ndu
Output: false
Example 3:
Input: pattern =
“aaaa", str = “dog cat cat dog'
Output: false
Example 4:
,6op 6op 6op 6op, = Jas *eqqe, = uua2aed :nduI
output: false
Note:
You may assume pattern contains only lowercase letters, and str contains lowercase letters
separated by a single space.
题目大意
给定一个模式串，判断字符串是否和给定的模式串，是一样的模式。
解题思路
这道题用2个map即可。1个map记录模式与字符串的匹配关系，另外一个map记录字符串和模式
的匹配关系。为什么需要记录双向的关系呢？因为Example4中，a对应了dog，这个时候b如果再对
应dog是错误的，所以这里需要从dog查询它是否已经和某个模式匹配过了。所以需要双向的关系。
代码
package leetcode
import "strings"
func wordpattern(pattern string, str string) bool{
strList := strings.Split(str, "")
patternByte := []byte(pattern)