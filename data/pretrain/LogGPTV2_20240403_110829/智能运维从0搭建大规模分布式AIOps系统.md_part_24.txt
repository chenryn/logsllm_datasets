[nginx]
carbon-cache 通过配置文件 storage-schemas.conf 来描述存储指标的保留频率。它将指标的
carbon-aggregator 捕获所有匹配 input_pattern 的指标，并在指定的 frequency 时间内通过指
storage-schemas.conf 中的每个规则都通过三个元素来指定。
需要注意的是，
carbon-cache 是 Graphite 的缓存进程。carbon-cache 接收多种协议。carbon-cache 将接收到
3.carbon-cache
目前，carbon-aggregator支持的聚合方法包括：sum、avg、min max、p50、p75、p80、p90、
carbon-aggregator是Graphite的聚合进程，数据在通过relay转发分片后，通过 carbon-aggregator
2.carbon-aggregator
O
）规则名称。
保留区：对于指标保留的时间和频率，可以指定多个组合。
匹配指标的正则表达式。
如果改变了 storage-schemas.conf 文件中定义的规则，那么对于已经在
第8章时序数据分析框架
133
---
## Page 161
Archive 0 info:
Meta data:
点数、尺寸大小等信息，如下所示。
两部分内容：元数据和指标数据。
并且将会保留最近720天的数据。保留区中的时间单位可以是如下几种情况：
存储指标数据，并且将会保留最近180天的数据；第三个保留区表示按天粒度存储指标数据，
表示按秒粒度存储指标数据，并且将会保留最近30分钟的数据；第二个保留区表示按分钟粒度
逗号分隔每个保留区。这里表示以 nginx.status 开头的指标会有三个保留区，其中第一个保留区
—week
retentions = 1s:30m,1m:180d,1d:720d
pattern=^nginx.status*
[nginx]
134
offset:52
xFilesFactor: 0
max retention:62208000
aggregation method: sum
-year
—day
—hour
-second
元数据部分描述了该指标文件有几个保留区，以及每个保留区的偏移值、时间粒度、数据
4. Whisper
minute
第二行：patterm 为匹配指标的正则表达式，它将匹配所有以 nginx.status 开头的指标。
第一行：nginx 为规则名称。
（1）Whisper 的数据存储
Whisper 是Graphite 中默认的时序数据库，与 RDD-Tool的存储方式类似。
比如我们定义了这样一个Nginx规则：
智能运维：从O搭建大规模分布式AIOps系统
用
---
## Page 162
9: 1518166675,
8:1518163074,
1:1518166667,
0:1518148666,
Archive0data:
和指标值。如下展示了第一个保留区中10秒的指标数据。
Archive 2 info:
Archive 1info:
。
.
size:8640
points: 720
seconds per point: 86400
offset:3132052
size: 3110400
retention: 15552000
points: 259200
seconds per point: 60
offset:21652
retention:62208000
size: 21600
retention: 1800
points: 1800
seconds per point: 1
1518164873,
1518164872,
1518157671,
1518163070,
1518166669,
1518164868,
指标数据部分按照保留区存储每个时间粒度下的指标值。每个保留区都分为两列：时间戳
3.按天存储，周期为720天。
2.按分钟存储，
1．按秒存储，周期为30 分钟。
这里定义了三个保留区，每个保留区的时间粒度和存储周期如下：
周期为180天。
T
一
2
一
2
第8章时序数据分析框架
135
---
## Page 163
看每个数据文件中的内容。
据，其余6个数据点都是空值，那么在第二个保留区聚合的数据点位上只会写入空值。
么在这10个数据点中至少要有5个数据点有有效数据才能聚合，如果只有4个数据点有有效数
面说第一个保留区向第二个保留区聚合时需要10个数据点，当设置xFilesFactor为0.5时，那
置一个有效数据点比例，只有当有效数据数量达到这个比例时，才对数据进行聚合。比如，”
storage-aggregation.conf中，有一个参数叫 xFilesFactor，可以通过这个参数给指定的指标数据设
据时，就会触发将这1440个数据值聚合写到第三个保留区的数据点位上。
60个数据点的数据，写入第二个保留区的第一个数据点位上。当第二个保留区写入1440个数
整除第一个保留区的时间粒度1s，得到 60 个数据点，那么Whisper 会聚合第一个保留区的前
存储的呢？
用相应的存储空间，当指标数据写满1800个数据点后，又会从头开始覆盖写入新的数据。
秒存储的，周期为 30 分钟，那么Whisper会事先在这个指标文件中创建1800个数据点，并占
136
Whisper 还通过有效数据点占比来提高数据的准确性。在 carbon-aggregator 的配置文件
按照上面的例子，还是分成三个保留区1、2、3。Whisper 用第二个保留区的时间粒度 60s
Whisper 支持的聚合函数有 min、max、sum、average、last。
上面介绍了 Whisper 的数据是如何存储的，那么按秒存储的数据如何变成按分钟或者按天
每个保留区数据点都会按照指定的时间周期被重复使用。比如，上例中第一个保留区是按
○性能差。
Whisper 在数据精度控制和时间粒度方面拥有良好的表现，但是它的缺点也很明显。
（3）Whisper的劣势
（2）Whisper 的数据聚合
Carbon默认分为两个保留区：60s存储180d和1d存储720d。
D
不支持灵活的多维组合分析。
在大量请求下IOPS占用高。
智能运维：从O搭建大规模分布式AlOps系统
指标文件一旦生成格式就固定下来了，不能更改。
一
---
## Page 164
install -m 0755 go-carbon /usr/local/bin/go-carbon
make
make submodules
cdgo-carbon/
git clone https://github.com/lomik/go-carbon.git
ln -s /opt/graphite/
#软链接到根目录
mount -t tmpfs -o noatime,size=80G,nr_inodes=0 tmpfs /opt/graphite
#挂载内存到文件系统中
线上服务器拥有128GB 的内存，可以使用80GB的内存作为文件系统来缓存热数据。
近一天的数据从内存中读取，一天以上的数据从 SSD上读取。下面介绍 Go版Carbon 的安装方
将一天以上的数据存储在 SSD 上。通过 Graphite-Web 按读取时间来路由所读取的数据目录，最
源的Go版Carbon来提高数据读写的性能。并且使用内存模式来存储最近一天的指标数据，而
8.2.2
能，以及灵活的函数调用，让我们不得不放弃 Graphite-Web 而投入Grafana 的怀抱。
化工具。相比较而言，开源的可视化工具Grafana 具有优美的外观、强大的图形展示和编辑功
据
图形页面呈现数据的走势。我们还可以通过 Graphite-Web 提供的 render API 接口来获取原始数
的瓶颈。
D
2．安装Carbon
首先将内存挂载到文件系统中。当然，需要预留一定的内存给系统的其他应用使用。比如
1．挂载内存
在写入量比较大的环境中，默认的Python 版 Carbon 的性能存在瓶颈，所以我们替换成开
但是Graphite-Web 的配置复杂，功能不完善，可视化的美观程度远远不及其他开源的可视
Graphite-Web 是Graphite 提供的前端组件，它可以可视化我们存储的指标数据，以直观的
5.
虽然可以通过 SSD、数据分片来优化性能，但是指标的灵活性和多维的组合分析依然是它
Graphite-Web
Graphite 在微博广告监控系统中的应用
第8章
时序数据分析框架
137
---
## Page 165
retentions = 1s:30m
#这里配置内存模式下的数据存储规则，这是一个热数据存储，因此要求时间粒度比较细，但是不要求存储很长时间
pattern =^nginx.status.*
[nginx]
buffer-size=0
#接收端和缓存之间的队列大小
enabled=true
#开启TCP模式
listen =":3003"
#配置Carbon的端口
workers = 8
#定义Whisper的工作线程数
#定义 carbon-aggregation 配置文件的位置
schemas-file = "/etc/carbon-mem-schemas"
#定义内存模式下的carbon-schemas配置文件的位置
#定义 whisper 在内存模式下的数据目录
[whisper]
max-cpu =8
#定义使用的CPU核数
metric-interval = "10s"
#定义 Carbon 内部性能指标的存储时间粒度
metric-endpoint = "local"
#定义Carbon内部性能指标的位置
#定义 Carbon 内部性能指标的监控数据存储路径
[tcp]
user = "graphite"
#配置运行Carbon服务的用户
common]
138
3．配置内存模式Carbon
（2）配置Carbon Schemas
（1）配置主配置文件
智能运维：从 O 搭建大规模分布式 AIOps 系统
---
## Page 166
我们开始寻找更适合的时序数据库来替换Graphite。
案之一。当然，Graphite 时序数据库在多维分析上的劣势、在集群方案上的缺陷等原因，也让
基于同样的业务需求背景，微博广告也开始尝试将 Druid 作为监控平台后端数据引擎的技术方
的实时查询和多维分析，Druid应运而生。
8.3.1
8.3
go-carbon --config /etc/carbon_ssd.conf --daemon
#启动硬盘模式Carbon
go-carbon --config /etc/carbon_mem.conf --daemon
#启动内存模式Carbon
#配置硬盘模式下的数据存储规则，这是一个持久化的数据存储，因此时间粒度相比内存而言要求更粗，时间更长
pattern =^nginx.status.*
aggregationMethod = sum
xFilesFactor =0.8
[nginx]
pattern =^nginx.status.*
[nginx]
Druid 诞生于MetaMarkets 公司，而互联网广告分析正是MetaMarkets 最重要的业务之一
Druid2是一个用于大数据实时查询与分析的分布式列式数据存储系统。为了应对海量数据
5．启动Carbon
OWhisper 的数据目录：在硬盘模式下，需要指定持久化在 SSD 中的 Whisper 数据目录
硬盘的配置文件和内存的配置文件相比，有以下两个地方不一样。
4.配置硬盘模式Carbon
（3）配置Carbon Aggregation
多维分析利器Druid
schemas-file配置文件：定义硬盘模式下的 schemas-file 配置文件的位置。配置如下：
什么是Druid
路径。
第8章时序数据分析框架
139
---
## Page 167
Druid架构示意图如图8-3所示。
8.3.2
140
Druid 是一个分布式系统，
1.Druid节点组成
O
C
〇支持部分嵌套数据结构的列式存储。
Druid 的特性如下：
询。实时节点将在一定时间内收集到的数据生成一个 Segment 数据文件，并将这个
实时节点：实时节点提供实时的索引服务，通过这些节点索引的数据可以立即用于查
容错分布式架构确保数据不丢失。
进行剪枝的分布式层级查询。
智能运维：从O搭建大规模分布式AIOps系统
Druid 架构
水平扩展。