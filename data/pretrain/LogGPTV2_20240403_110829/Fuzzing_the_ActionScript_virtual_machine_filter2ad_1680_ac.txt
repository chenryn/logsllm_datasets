on a PC (equipped with an Intel Core Q9400 with 4GB of
DDR3 RAM), to generate about ten thousand source code
ﬁles with distinct sub-rule initializations and transform them
to marked template ﬁles with lexical analysis. The mutation
phase is then given a week of computation time. Millions of
SWF ﬁles are produced and stored during this phase. Fi-
nally, all the SWF ﬁles are executed in the AVM.
To sequentially send test cases to the AVM via Adobe
462Flash ActiveX Control, a wrapper was constructed and em-
ployed. When bugs occur that result in non-severe memo-
ry leaks, the AVM may not crash directly or immediately.
Therefore, all test cases are sent by the wrapper in the same
process, which ampliﬁes memory leak eﬀects on the AVM by
accumulating multiple persistent memory leaks. This can ei-
ther directly cause or hasten AVM crashes. Each SWF ﬁle
is allowed at most one second of execution time before they
are freed from memory.
Since we lack the source code of the AVMs tested, we
resort to block coverage instead of line coverage to evaluate
our fuzzing performance. To record the block coverage, we
refer to the idea of PaiMei [24] and use PIDA to analyze the
Adobe Flash ActiveX Control by recording the start and
end addresses of each block inside. Basic block coverage is
the same as statement coverage, except that the unit of code
measured is each sequence of non-branching statements. A
block is a basic element of the disassembled code in IDA
Pro [8]. Once the start address is covered, all the assembled
code in this block will be executed.
The debugger we have built is based on Pydbg (a sub-
project of PaiMei), to record block coverages and memory
corruptions caused by the test cases. Once the wrapper
begins loading the test cases, the debugger is attached and
the breakpoints on basic blocks over Adobe Flash ActiveX
Control are set.
If any of the breakpoints are triggered,
it is removed from the list for the remainder of the test.
Subsequently, all the breakpoints that have been triggered
(to record the total block coverage) during the execution
phase are collected. If the AVM crashes due to some test
cases, the debugger will record the current crash information
and the test case ﬁle for further analysis.
There are two additional reasons for running the test cases
in a single process. First, setting breakpoints on the wrap-
per requires no more than a few minutes, but are only done
whenever the wrapper is restarted (e.g., such as due to crash-
related wrapper terminations). Running the test cases in a
single process instead of a new process for each test cas-
es saves time spent on setting breakpoints. Second, in a
multiple processes approach, it is possible to miss bugs that
are only triggered together by multiple test cases. The root
causes of these types of bugs are hard to locate in a multiple-
test case, multi-processes scenario.
All the experiments are done through three versions of
AVMs. Since many features of AS3 are not available until
Adobe Flash 10, our ﬁrst choice is version 10.0.45.2. This
is the very ﬁrst version of Adobe Flash 10. The second
version, version 10.2.152.32 is chosen from the period when
AVM’s vulnerabilities began to attract security engineers’
attention, around the time of CVE-2010-1297 [20]. The last
version is the newest version available during our tests, ver-
sion 11.3.300.265.
3.2 Comparison of code generation and mu-
tation methodology combinations
In total, there are four code generation and mutation
methodologies: breadth-ﬁrst or depth-ﬁrst methods for code
generation, single or multiple templates methods for runtime
class mutations. The ﬁrst two methodologies that govern
node-order expansions are given in Section 2.3.
The other methodologies regard to varying initial tem-
plates by choosing single or multiple templates during the
mutation phase. For the single template methodology, an
initialized selection of a single marked template ﬁle is used
for the mutation phase. For the multiple templates method-
ology, each batch of mutations is done on a candidate selec-
tion, chosen randomly from all available marked template
ﬁles. The multiple templates methodology is capable of
more initialization choices of sub-rule selections when com-
pared to the single template methodology. Four unique com-
binations of these methodologies are: breadth-ﬁrst&single
template (BS), breadth-ﬁrst&multiple templates (BM), depth-
ﬁrst&single template (DS) and depth-ﬁrst&multiple tem-
plates (DM).
Version 10.0.45.2
Blocks
BM
BS
DM
DS
15206
4635(30.48%)
3691(24.47%)
3477(22.87%)
2350(15.45%)
10.2.152.32
21819
4330(19.85%)
5152(23.61%)
4660(21.36%)
4353(19.95%)
11.3.300.265
34532
5909(17.11%)
5703(16.52%)
7549(21.86%)
4770(13.81%)
Table 1: Block coverages of diﬀerent combination-
s of methodologies. The amount of covered blocks
and the percentages of total blocks covered are tab-
ulated.
Each combination is allotted a week of computation time
for generation and mutations. The output of each is about
(cid:24) 800; 000 SWF ﬁles. Then, an additional one to two weeks
is required for execution, when the triggered breakpoints are
recorded to calculate block coverage (see table 1).
Figure 5: Block coverages under diﬀerent versions
of AVMs.
As seen from ﬁgure 5, the best combination in terms of
coverage is not obvious, while the worst is the DS combina-
tion. During the tests on version 10.2.152.32, some test cases
inside the BM combination have led to a memory bug of the
AVM. Subsequently, the AVM entered a self-protection state
that prevents further execution of a variety of SWF ﬁles.
This explains the sudden fall of the BM combination’s block
coverage. For version 11.3.300.265, the DM combination
has a greater increase in coverage as compared to the other
combinations and the former results. This is because BM
has randomly picked several marked template ﬁles contain-
ing more grammar structures than the other combinations.
In fact, the DM and BM combinations are the most rep-
resentative of ideal situations, where the diversity of initial
templates is maximized, combined with extensive runtime
class mutations. In reality, however, close approximations to
this ideal results in a very resource-intensive process. There-
fore, prior to fuzz testings, considerations should be made
01000200030004000500060007000800010.0.45.210.2.152.3211.3.300.265BMBSDMDS463regarding the amount of computational resources available
and choose methods accordingly.
These combinations are cross-compared in table 2. Each
item contains three parts: blocks in common that have been
covered during the tests and the proportion of these blocks
to the total blocks. For example, the DM and DS cross-
comparison under version 11.3.300.265 includes 4770 blocks
that both combinations covered. These 4770 blocks repre-
sent 100% of the DS combination’s coverage, and only 63.2%
of the DM combination’s coverage. This suggests that the D-
S combination is less useful for testing version 11.3.300.265,
as compared with the DM combination.
Version 10.0.45.2
BM,BS
DM,DS
BM,DM
BS,DS
3681
79.42%,99.73%
2329
66.98%,99.11%
3454
74.52%,99.34%
2322
62.91%,98.81%
10.2.152.32
4098
94.64%,79.54%
3770
80.90%,86.61%
3959
91.43%,84.96%
4350
84.43%,99.93%
11.3.300.265
5172
87.53%,90.69%
4770
63.19%,100.0%
5773
97.70%,76.47%
4769
83.62%,99.98%
Table 2: Cross-comparison between diﬀerent combi-
nations of methodologies.
Figure 6: Block coverage of Tamarin.
cases generated by ScriptGene are the same as in the ﬁrst
experiment. Triggered blocks are merged among the diﬀer-
ent combinations to give us a net total block coverage of
ScriptGene.
To summarize, when the testing situation involves limit-
ed computational resources and/or time, the DS combina-
tion is inappropriate. The multiple templates methodolo-
gies seems to be more satisfactory than the single template
methodologies. When the template methodology is ﬁxed,
the performance of the overall combination seems to depend
on whether breadth-ﬁrst or depth-ﬁrst algorithms performs
better on the particular AVM (e.g., the BM combination is
better than the DM combination for version 10.0.45.2, and
worse for version 11.3.300.265).
3.3 Comparisons between ScriptGene and Tamarin
The open source AVM implementation Tamarin contains
acceptance test cases [3], which can be seen as the oﬃcial
test suite of AVMs and is employed as instances of gram-
mar structures in the generation phase of ScriptGene. Block
coverage comparisons between the test cases of Tamarin and
ScriptGene should be a direct proof that ScriptGene is an
eﬀective approach to test AVMs. Normally, the test suite
Version 10.0.45.2
S
T
4667(30.69%)
2474(16.27%)
2408
51.60%,97.33%
S,T
10.2.152.32
5727(26.25%)
3351(15.36%)
3236
56.50%,96.57%
11.3.300.265
7697(22.29%)
3686(10.67%)
3622
47.06%,98.26%
Table 3: Block coverages and cross-comparison be-
tween ScriptGene (S) and Tamarin (T).
of Tamarin consists of AS source code and can only be built
as “.abc” ﬁles that are compatible with the Tamarin Virtual
Machine. However, thanks to Tamarin’s support, a solution
[10] has been created to compile SWF ﬁles with Tamarin-
AS source code under cygwin [5]. There are 603 SWF ﬁles
of Tamarin acceptance test cases. Using the same method
as in Section 3.2 the block coverages of Tamarin test suite
are recorded in the three versions of AVMs. The SWF test
Figure 7: Block coverage of ScriptGene.
From table 3, it is seen that ScriptGene can cover most
blocks (>96%) that are covered by Tamarin test cases in the
three versions of AVMs. Vivid squares in ﬁgure 6 and ﬁgure
7 are used to demonstrate block coverages. Red strips rep-
resent covered blocks and dark yellow represents untouched
blocks.
All the blocks are arranged according to their real memory
addresses and lengths. The base address of Flash ActiveX
DLL is 0x10000000, located at the bottom of the ﬁgures.
Blocks with higher addresses are closer to the top. The ﬁg-
ures look similar for the three versions tested. Therefore
only one version is shown here. Figures 6,7,8 are the test
results of version 10.0.45.2. The highest concentration of
blocks covered by the Tamarin test suite lies near the top
quarter of the memory space, which mainly deals with gram-
mar and interpretation of the AS code. Blocks in lower ad-
dresses are those dealing with the SWF format and external
resources of the operating system.
In ﬁgure 8, the blocks that was neither triggered by Tamarin
nor ScriptGene are excluded. Remaining blocks are covered
0x100027e20x1002daa10x1005a7e00x1008ac970x100c7b000x100fc6240x1011d9420x101339e90x1016e4bd0x101821b30x1019ad8d0x1020c3b00x1023e7430x1026a1a90x102b6bac0x100027e20x1002daa10x1005a7e00x1008ac970x100c7b000x100fc6240x1011d9420x101339e90x1016e4bd0x101821b30x1019ad8d0x1020c3b00x1023e7430x1026a1a90x102b6bac464variable is made to point to a string under such code gram-
mar, which leads to the AVM accessing unexpected memory.
The ability to ﬁnd this bug depends on the generation of
valid code that are suﬃciently grammatically-complex. As
an example of the process of how this type of code snippet
is generated, consider the following. First, the code gener-
ation phase outputs an AS code ﬁle containing a “for-loop”
structure. Second, lexical analysis replaces the identiﬁer
with markers. Finally, in the mutation phase, “ vardecla-
rationname ” will be replaced with “varX:vartype” (where
“X” is a number depending on the order of this pure vari-
able and “vartype” will be chosen randomly from runtime
class). “ varname ” will be replaced by a random pick from
the variable pool (for instance, “varX”).
3.4.2 Mutate with prototype
1: switch(actualmatch=string.match(pattern))
2: switch(_varname_=_varname_._funcall_(_varname_))
3: switch(
var3.constructor=var3.append(
flash.geom.Matrix3D.prototype.append
))
Member function append could cause memory corruption-
s when its parameter contains the prototype of this class.
During the code generation phase of ScriptGene, a “switch”
structure is built. Then, the identiﬁer is marked and re-
placed by member functions, properties and instances of
“ﬂash.geom.Matrix3D” during runtime class mutations. This
deﬁnitively supports the idea about bringing prototypes in-
to the source code ﬁles, in order to allow more interactions
between diﬀerent classes as mentioned in Section 2.5.2.
3.4.3 Running tests cases in a single process
Another bug is found due to the method used to run the
test cases. As mentioned before in Section 3.1, the wrapper
of Flash ActiveX control loads the test cases sequentially in
a single process.
In version 10.0.45.2, it was found that many access viola-
tions are triggered during the testing phase. Our debugger
records the ﬁles that have caused the access violations. At-
tempts to reproduce the corruptions by sending the recorded
test cases directly into the AVM results in no access viola-
tions. This implies that, some test cases prior to the record-
ed ones are probably also responsible for the access viola-
tions. Typically, this is around 2000-5000 test cases prior
to the recorded test case. After several attempts to repro-
duce the corruptions, it is found that only the quantity of
the test cases is important. If (cid:24)(30-50) test cases are load-
ed simultaneously with none being freed from memory, the
corruption will be reproduced, irrespective of the content in
the test cases.
Tests on version 11.3.300.265 found another bug similar
to the bug of version 10.0.45.2. However, for this version,
the required test cases increased to 40000-120000 to trigger
the corruption. Our attempts to reproduce and analyze the
bug with the same method used on version 10.0.45.2 was
not fruitful, since the newer AVM takes counter-measures
against unbounded memory allocations. When the AVM de-
tects that the following operations can potentially exhaust
the memory, it terminates the AVM immediately and pro-
duce a big exclamation mark in the Flash GUI. This pro-
tection mechanism complicates the simpliﬁcation and dis-
Figure 8: Cross-comparison between ScriptGene
and Tamarin.