上一篇介绍了libc2.23之前版本的劫持vtable以及FSOP的利用方法。如今vtable包含了如此多的函数，功能这么强大，没有保护的机制实在是有点说不过去。在大家都开始利用修改vtable指针进行控制程序流的时候，glibc在2.24以后加入了相应的检查机制，使得传统的修改vtable指针指向可控内存的方法失效。但道高一尺，魔高一丈，很快又出现了新的绕过方式。本篇文章主要介绍libc2.24以后的版本对于vtable的检查以及相应的绕过方式。
之前几篇文章的传送门：
  * [IO FILE之fopen详解](https://ray-cp.github.io/archivers/IO_FILE_fopen_analysis)
  * [IO FILE之fread详解](https://ray-cp.github.io/archivers/IO_FILE_fread_analysis)
  * [IO FILE之fwrite详解](https://ray-cp.github.io/archivers/IO_FILE_fwrite_analysis)
  * [IO FILE之fclose详解](https://ray-cp.github.io/archivers/IO_FILE_fclose_analysis)
  * [IO FILE之劫持vtable及FSOP](https://ray-cp.github.io/archivers/IO_FILE_vtable_hajack_and_fsop)
## vtable check机制分析
glibc 2.24引入了`vtable
check`，先体验一下它的检查，使用上篇文章中的东华杯的pwn450的exp，但将glibc改成2.24。（使用[pwn_debug](https://github.com/ray-cp/pwn_debug)的话，将exp里面的`debug('2.23')`改成`debug('2.24')`就可以了，或者使用local模式）。
在2.24的glibc中直接运行exp，可以看到报了如下的错误：  
可以看到第一句`memory corruption`的错误在2.23版本也是有的，第二句的错误`Fatal error: glibc detected an
invalid stdio handle`是新出现的，看起来似乎是对IO的句柄进行了检测导致错误。
glibc2.24的源码中搜索该字符串，定位在`_IO_vtable_check`函数中。根据函数名猜测应该是对vtable进行了检查，之前exp中是修改vtable指向了堆，可能是导致检查不过的原因。
下面进行动态调试进行确认，首先搞清楚在哪里下断。对vtable的检查应该是在vtable调用之前，FSOP触发的vtable函数`_IO_OVERFLOW`是在`_IO_flush_all_lockp`函数中进行调用的，因此将断点下在`_IO_flush_all_lockp`处。
开始跟踪程序，发现在执行`_IO_OVERFLOW`时，先执行到了`IO_validate_vtable`函数，然而看函数调用`_IO_OVERFLOW`时并没有明显的调用`IO_validate_vtable`函数的痕迹，猜测`_IO_OVERFLOW`宏的定义发生了变化。查看它的定义：
    #define _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)
再查看`JUMP1`的定义：
    #define JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)->FUNC) (THIS, X1)
最后再看`_IO_JUMPS_FUNC`的定义：
    # define _IO_JUMPS_FUNC(THIS) \
      (IO_validate_vtable                                                   \
       (*(struct _IO_jump_t **) ((void *) &_IO_JUMPS_FILE_plus (THIS)   \
                     + (THIS)->_vtable_offset)))
原来是在最终调用vtable的函数之前，内联进了`IO_validate_vtable`函数，跟进去该函数，源码如下，文件在`/libio/libioP.h`中：
    static inline const struct _IO_jump_t *
    IO_validate_vtable (const struct _IO_jump_t *vtable)
    {
      uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;
      const char *ptr = (const char *) vtable;
      uintptr_t offset = ptr - __start___libc_IO_vtables;
      if (__glibc_unlikely (offset >= section_length)) //检查vtable指针是否在glibc的vtable段中。
        /* The vtable pointer is not in the expected section.  Use the
           slow path, which will terminate the process if necessary.  */
        _IO_vtable_check ();
      return vtable;
    }
可以看到glibc中是有一段完整的内存存放着各个vtable，其中`__start___libc_IO_vtables`指向第一个vtable地址`_IO_helper_jumps`，而`__stop___libc_IO_vtables`指向最后一个vtable`_IO_str_chk_jumps`结束的地址：  
往常覆盖vtable到堆栈上的方式无法绕过此检查，会进入到`_IO_vtable_check`检查中，这就是开始报错的最终输出错误语句的函数了，跟进去，文件在`/libio/vtables.c`中：
    void attribute_hidden
    _IO_vtable_check (void)
    {
    #ifdef SHARED
      /* Honor the compatibility flag.  */
      void (*flag) (void) = atomic_load_relaxed (&IO_accept_foreign_vtables);
    #ifdef PTR_DEMANGLE
      PTR_DEMANGLE (flag);
    #endif
      if (flag == &_IO_vtable_check) //检查是否是外部重构的vtable
        return;
      /* In case this libc copy is in a non-default namespace, we always
         need to accept foreign vtables because there is always a
         possibility that FILE * objects are passed across the linking
         boundary.  */
      {
        Dl_info di;
        struct link_map *l;
        if (_dl_open_hook != NULL
            || (_dl_addr (_IO_vtable_check, &di, &l, NULL) != 0
                && l->l_ns != LM_ID_BASE)) //检查是否是动态链接库中的vtable
          return;
      }
    ...
      __libc_fatal ("Fatal error: glibc detected an invalid stdio handle\n");
    }
进入该函数意味着目前的vtable不是glibc中的vtable，因此`_IO_vtable_check`判断程序是否使用了外部合法的vtable（重构或是动态链接库中的vtable），如果不是则报错。
glibc2.24中vtable中的check机制可以小结为：
  1. 判断vtable的地址是否处于glibc中的vtable数组段，是的话，通过检查。
  2. 否则判断是否为外部的合法vtable（重构或是动态链接库中的vtable），是的话，通过检查。
  3. 否则报错，输出`Fatal error: glibc detected an invalid stdio handle`，程序退出。
所以最终的原因是：exp中的vtable是堆的地址，不在vtable数组中，且无法通过后续的检查，因此才会报错。
## 绕过vtable check
vtable check的机制已经搞清楚了，该如何绕过呢？
第一个想的是，是否还能将vtable覆盖成外部地址？根据vtable check的机制要想将vtable覆盖成外部地址且仍然通过检查，可以有两种方式：
  1. 使得`flag == &_IO_vtable_check`
  2. 使`_dl_open_hook!= NULL`
第一种方式不可控，因为flag的获取和比对是类似canary的方式，其对应的汇编代码如下：
    0x7fefca93d927      mov    rax, qword ptr [rip + 0x32bb2a] 
    0x7fefca93d92e     ror    rax, 0x11
    0x7fefca93d932     xor    rax, qword ptr fs:[0x30]
    0x7fefca93d93b     cmp    rax, rdi