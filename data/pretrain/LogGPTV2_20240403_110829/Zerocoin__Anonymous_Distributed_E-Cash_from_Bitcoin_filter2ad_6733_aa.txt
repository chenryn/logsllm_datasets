title:Zerocoin: Anonymous Distributed E-Cash from Bitcoin
author:Ian Miers and
Christina Garman and
Matthew Green and
Aviel D. Rubin
2013 IEEE Symposium on Security and Privacy
Zerocoin: Anonymous Distributed E-Cash from Bitcoin
Ian Miers, Christina Garman, Matthew Green, Aviel D. Rubin
The Johns Hopkins University Department of Computer Science, Baltimore, USA
{imiers, cgarman, mgreen, rubin}@cs.jhu.edu
Abstract—Bitcoin is the ﬁrst e-cash system to see widespread
adoption. While Bitcoin offers the potential for new types of
ﬁnancial interaction, it has signiﬁcant limitations regarding
privacy. Speciﬁcally, because the Bitcoin transaction log is
completely public, users’ privacy is protected only through the
use of pseudonyms. In this paper we propose Zerocoin, a crypto-
graphic extension to Bitcoin that augments the protocol to allow
for fully anonymous currency transactions. Our system uses
standard cryptographic assumptions and does not introduce
new trusted parties or otherwise change the security model of
Bitcoin. We detail Zerocoin’s cryptographic construction, its
integration into Bitcoin, and examine its performance both in
terms of computation and impact on the Bitcoin protocol.
I. INTRODUCTION
Digital currencies have a long academic pedigree. As of
yet, however, no system from the academic literature has
seen widespread use. Bitcoin, on the other hand, is a viable
digital currency with a market capitalization valued at more
than $100 million [1] and between $2 and $5 million USD
in transactions a day [2]. Unlike many proposed digital
currencies, Bitcoin is fully decentralized and requires no
central bank or authority. Instead, its security depends on a
distributed architecture and two assumptions: that a majority
of its nodes are honest and that a substantive proof-of-
work can deter Sybil attacks. As a consequence, Bitcoin
requires neither legal mechanisms to detect and punish double
spending nor trusted parties to be chosen, monitored, or
policed. This decentralized design is likely responsible for
Bitcoin’s success, but it comes at a price: all transactions
are public and conducted between cryptographically binding
pseudonyms.
While relatively few academic works have considered the
privacy implications of Bitcoin’s design [2, 3], the preliminary
results are not encouraging. In one example, researchers
were able to trace the spending of 25,000 bitcoins that were
allegedly stolen in 2011 [3, 4]. Although tracking stolen coins
may seem harmless, we note that similar techniques could
also be applied to trace sensitive transactions, thus violating
users’ privacy. Moreover, there is reason to believe that
sophisticated results from other domains (e.g., efforts to de-
anonymize social network data using network topology [5])
will soon be applied to the Bitcoin transaction graph.
Since all Bitcoin transactions are public, anonymous
transactions are necessary to avoid tracking by third parties
even if we do not wish to provide the absolute anonymity
typically associated with e-cash schemes. On top of such
transactions, one could build mechanisms to partially or
explicitly identify participants to authorized parties (e.g.,
law enforcement). However, to limit this information to
authorized parties, we must ﬁrst anonymize the underlying
public transactions.
The Bitcoin community generally acknowledges the
the
privacy weaknesses of the currency. Unfortunately,
available mitigations are quite limited. The most common
recommendation is to employ a laundry service which
exchanges different users’ bitcoins. Several of these are in
commercial operation today [6, 7]. These services, however,
have severe limitations: operators can steal funds, track coins,
or simply go out of business, taking users’ funds with them.
Perhaps in recognition of these risks, many services offer
short laundering periods, which lead to minimal transaction
volumes and hence to limited anonymity.
Our contribution. In this paper we describe Zerocoin, a
distributed e-cash system that uses cryptographic techniques
to break the link between individual Bitcoin transactions
without adding trusted parties. To do this, we ﬁrst deﬁne
the abstract functionality and security requirements of a new
primitive that we call a decentralized e-cash scheme. We next
propose a concrete instantiation and prove it secure under
standard cryptographic assumptions. Finally, we describe
the speciﬁc extensions required to integrate our protocol
into the Bitcoin system and evaluate the performance of a
prototype implementation derived from the original open-
source bitcoind client.
We are not the ﬁrst to propose e-cash techniques for
solving Bitcoin’s privacy problems. However, a common
problem with many e-cash protocols is that
they rely
fundamentally on a trusted currency issuer or “bank,” who
creates electronic “coins” using a blind signature scheme.
One solution (attempted unsuccessfully with Bitcoin [8])
is to simply appoint such a party. Alternatively, one can
distribute the responsibility among a quorum of nodes using
threshold cryptography. Unfortunately, both of these solutions
introduce points of failure and seem inconsistent with the
Bitcoin network model, which consists of many untrusted
nodes that routinely enter and exit the network. Moreover, the
problem of choosing long-term trusted parties, especially in
the legal and regulatory grey area Bitcoin operates in, seems
like a major impediment to adoption. Zerocoin eliminates
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.34
397
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
Block 1 Block 2
...
Block 1 Block 2
...
(a)
(b)
Block N
Block N
Block N
Block N
Figure 1: Two example block chains. Chain (a) illustrates a normal Bitcoin transaction history, with each transaction linked
to a preceding transaction. Chain (b) illustrates a Zerocoin chain. The linkage between mint and spend (dotted line) cannot
be determined from the block chain data.
Bitcoin
Zerocoin Mint
Zerocoin Spend
the need for such coin issuers by allowing individual Bitcoin
clients to generate their own coins — provided that they
have sufﬁcient classical bitcoins to do so.
Intuition behind our construction. To understand the intuition
behind Zerocoin, consider the following “pencil and paper”
protocol example. Imagine that all users share access to
a physical bulletin board. To mint a zerocoin of ﬁxed
denomination $1, a user Alice ﬁrst generates a random coin
serial number S, then commits to S using a secure digital
commitment scheme. The resulting commitment is a coin,
denoted C, which can only be opened by a random number
r to reveal the serial number S. Alice pins C to the public
bulletin board, along with $1 of physical currency. All users
will accept C provided it is correctly structured and carries
the correct sum of currency.
To redeem her coin C, Alice ﬁrst scans the bulletin board
to obtain the set of valid commitments (C1, . . . , CN ) that
have thus far been posted by all users in the system. She next
produces a non-interactive zero-knowledge proof π for the
following two statements: (1) she knows a C ∈ (C1, . . . , CN )
and (2) she knows a hidden value r such that the commitment
C opens to S. In full view of the others, Alice, using a
disguise to hide her identity,1 posts a “spend” transaction
containing (S, π). The remaining users verify the proof π
and check that S has not previously appeared in any other
spend transaction. If these conditions are met, the users allow
Alice to collect $1 from any location on the bulletin board;
otherwise they reject her transaction and prevent her from
collecting the currency.
This simple protocol achieves some important aims. First,
Alice’s minted coin cannot be linked to her retrieved funds:
in order to link the coin C to the the serial number S used
in her withdrawal, one must either know r or directly know
which coin Alice proved knowledge of, neither of which are
revealed by the proof. Thus, even if the original dollar bill
is recognizably tainted (e.g., it was used in a controversial
transaction), it cannot be linked to Alice’s new dollar bill.
At the same time, if the commitment and zero-knowledge
proof are secure, then Alice cannot double-spend any coin
without re-using the serial number S and thus being detected
by the network participants.
Of course, the above protocol is not workable: bulletin
boards are a poor place to store money and critical informa-
tion. Currency might be stolen or serial numbers removed
to allow double spends. More importantly, to conduct this
protocol over a network, Alice requires a distributed digital
backing currency.2
The ﬁrst and most basic contribution of our work is
to recognize that Bitcoin answers all of these concerns,
providing us with a backing currency, a bulletin board, and
a conditional currency redemption mechanism. Indeed, the
core of the Bitcoin protocol is the decentralized calculation
1Of course, in the real protocol Alice will emulate this by using an
anonymity network such as Tor [9].
2One could easily imagine a solution based on existing payment networks,
e.g., Visa or Paypal. However, this would introduce the need for trusted
parties or exchanges.
398
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
of a block chain which acts as a trusted, append-only
bulletin board that can both store information and process
ﬁnancial transactions. Alice can add her commitments and
escrow funds by placing them in the block chain while
being assured that strict protocol conditions (and not her
colleagues’ scruples) determine when her committed funds
may be accessed.
Of course, even when integrated with the Bitcoin block
chain, the protocol above has another practical challenge.
Speciﬁcally, it is difﬁcult to efﬁciently prove that a commit-
ment C is in the set (C1, . . . , CN ). The naive solution is to
prove the disjunction (C = C1) ∨ (C = C2) ∨ . . . ∨ (C =
CN ). Unfortunately such “OR proofs” have size O(N ),
which renders them impractical for all but small values of
N.
Our second contribution is to solve this problem, producing
a new construction with proofs that do not grow linearly as
N increases. Rather than specifying an expensive OR proof,
we employ a “public” one-way accumulator to reduce the
size of this proof. One-way accumulators [10, 11, 12, 13, 14],
ﬁrst proposed by Benaloh and de Mare [10], allow parties to
combine many elements into a constant-sized data structure,
while efﬁciently proving that one speciﬁc value is contained
within the set. In our construction, the Bitcoin network com-
putes an accumulator A over the commitments (C1, . . . , CN ),
along with the appropriate membership witnesses for each
item in the set. The spender need only prove knowledge of
one such witness. In practice, this can reduce the cost of the
spender’s proof to O(log N ) or even constant size.
Our application requires speciﬁc properties from the
accumulator. With no trusted parties, the accumulator and
its associated witnesses must be publicly computable and
veriﬁable (though we are willing to relax this requirement
to include a single, trusted setup phase in which parameters
are generated). Moreover, the accumulator must bind even
the computing party to the values in the set. Lastly, the
accumulator must support an efﬁcient non-interactive witness-
indistinguishable or zero-knowledge proof of set membership.
Fortunately such accumulators do exist. In our concrete
proposal of Section IV we use a construction based on the
Strong RSA accumulator of Camenisch and Lysyanskaya [12],
which is in turn based on an accumulator of Baric and
Pﬁtzmann [11] and Benaloh and de Mare [10].
Outline of this work. The rest of this paper proceeds as
follows. In Section II we provide a brief technical overview
of the Bitcoin protocol. In Section III we formally deﬁne
the notion of decentralized e-cash and provide correctness
and security requirements for such a system. In Section IV
we give a concrete realization of our scheme based on
standard cryptographic hardness assumptions including the
Discrete Logarithm problem and Strong RSA. Finally, in
Sections V, VI, and VII, we describe how we integrate our
e-cash construction into the Bitcoin protocol, discuss the
security and anonymity provided, and detail experimental
results showing that our solution is practical.
II. OVERVIEW OF BITCOIN
In this section we provide a short overview of the Bitcoin
protocol. For a more detailed explanation, we refer the reader
to the original speciﬁcation of Nakamoto [15] or to the
summary of Barber et al. [2].
The Bitcoin network. Bitcoin is a peer-to-peer network of
nodes that distribute and record transactions, and clients used
to interact with the network. The heart of Bitcoin is the
block chain, which serves as an append-only bulletin board
maintained in a distributed fashion by the Bitcoin peers.
The block chain consists of a series of blocks connected in
a hash chain.3 Every Bitcoin block memorializes a set of
transactions that are collected from the Bitcoin broadcast
network.
Bitcoin peers compete to determine which node will
generate the next canonical block. This competition requires
each node to solve a proof of work based on identifying
speciﬁc SHA-256 preimages, speciﬁcally a block B such
that SHA256(SHA256(B)) = (0(cid:2)||{0, 1}256−(cid:2)).4 The value
(cid:3) is selected by a periodic network vote to ensure that on
average a block is created every 10 minutes. When a peer
generates a valid solution, a process known as mining, it
broadcasts the new block to all nodes in the system. If the
block is valid (i.e., all transactions validate and a valid proof
of work links the block to the chain thus far), then the new
block is accepted as the head of the block chain. The process
then repeats.
Bitcoin provides two separate incentives to peers that mine
new blocks. First, successfully mining a new block (which
requires a non-trivial computational investment) entitles the
creator to a reward, currently set at 25 BTC.5 Second, nodes
who mine blocks are entitled to collect transaction fees from
every transaction they include. The fee paid by a given
transaction is determined by its author (though miners may
exclude transactions with insufﬁcient fees or prioritize high
fee transactions).
Bitcoin transactions. A Bitcoin transaction consists of a set
of outputs and inputs. Each output is described by the tuple
(a, V ) where a is the amount, denominated in Satoshi (one
bitcoin = 109 Satoshi), and V is a speciﬁcation of who is
authorized to spend that output. This speciﬁcation, denoted
scriptPubKey, is given in Bitcoin script, a stack-based non-
Turing-complete language similar to Forth. Transaction inputs
3For efﬁciency reasons, this chain is actually constructed using a hash
tree, but we use the simpler description for this overview.
4Each block includes a counter value that may be incremented until the
hash satisﬁes these requirements.
5The Bitcoin speciﬁcation holds that this reward should be reduced every
few years, eventually being eliminated altogether.
399
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
Input:
 Previous tx: 030b5937d9f4aaa1a3133b...
 Index: 0
 scriptSig: 0dcd253cdf8ea11cdc710e5e92af7647...
Output:
 Value: 5000000000
 scriptPubKey: OP_DUP OP_HASH160  
 a45f2757f94fd2337ebf7ddd018c11a21fb6c283
 OP_EQUALVERIFY OP_CHECKSIG
Figure 2: Example Bitcoin transaction. The output script
speciﬁes that the redeeming party provide a public key that
hashes to the given value and that the transaction be signed
with the corresponding private key.
are simply a reference to a previous transaction output,6
as well as a second script, scriptSig, with code and data
that when combined with scriptPubKey evaluates to true.
Coinbase transactions, which start off every block and pay
its creator, do not include a transaction input.
To send d bitcoins to Bob, Alice embeds the hash7 of
Bob’s ECDSA public key pk
b, the amount d, and some script
instructions in scriptPubKey as one output of a transaction
whose referenced inputs total at least d bitcoins (see Figure 2).
Since any excess input is paid as a transaction fee to the node
who includes it in a block, Alice typically adds a second
output paying the surplus change back to herself. Once the