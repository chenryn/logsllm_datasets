### OLED RES# 引脚
I2C 协议比 UART 等简单协议复杂得多，其主要优点之一是支持同一总线上的多个主设备和从设备。这增加了系统的复杂性，因为需要明确 MCU 应与哪个从设备通信，并且除了物理引脚外，还需了解从设备的逻辑地址。

幸运的是，nRF5 SDK 提供了一个 I2C 扫描器示例，通过尝试与每个可能的逻辑地址通信来检测响应。我对其进行了修改并运行，得到如下输出：
```bash
$ make
# ...
$ make flash
# ...
$ make log
# ...
TWI scanner
TWI device detected 0x3c
```
这表明显示屏已被正确识别，并使用了 I2C 总线。通过搜索发现，`0x3c` 是这类设备的通用地址。

接下来，我们尝试向显示屏发送一些像素数据。在 ssd1306 文档中，可以找到低层级的方法来发送数据到显示屏。该过程包括一系列配置命令，如设置屏幕方向、写入模式和大小等，然后将显示数据字节序列发送到图形显示数据 RAM (GDDRAM) 中。

为了正确配置，我参考了 Adafruit 的 ssd1306 库，并尝试枚举出相似的命令。这个过程中花费了很多时间，直到现在还有一些行为无法完全解析，但显示器已能正常显示数据。

#### 示例程序
- [示例程序](https://github.com/rbaron/fitless/tree/master/oled_test)

在这个设置中，显示屏被划分为 4 页，每页包含 96 行，每页高度为 8 像素。第一个字节的数据会垂直放置在第一列上，第二个字节占据第二行，依此类推。然而，实际观察到的行为有所不同：首先是奇数列被填充，然后是偶数列，最后才是循环过程。

### Arduino 之旅
在研究 Adafruit 的 ssd1306 库时，我希望能在 nRF51822 上“模拟”Arduino 特定的功能。事实上，已经有人实现了类似的项目 [arduino-nRF5](https://github.com/sandeepmistry/arduino-nRF5)，该项目不仅实现了 Arduino 核心库，还使用 nRF5 SDK 实现了更多的功能。

通过这个项目，我们可以在 Arduino IDE 中选择 nRF5 板，并利用现有的 Arduino 生态系统开发程序。我 fork 了这个项目，并添加了对我们手环板的支持。在 `Tools > Board` 菜单中可以选择 `ID115 Fitness Bracelet(nRF51822)`。

#### 使用 Adafruit 的 OLED 库
这意味着我们可以使用 [Adafruit 的 OLED 库](https://github.com/adafruit/Adafruit_SSD1306)。令人惊讶的是，OLED 也出现了“先奇数，后偶数”的渲染顺序。我 fork 了这个库，以便使用更高级别的抽象方法，例如绘制文本。

#### 传统 “Hello, World!”
- [示例代码](https://github.com/rbaron/fitless/tree/master/blinky/id115/s130/armgcc)

### 模拟 IO
除了数字 IO，nRF51822 还有 10 个用于读取模拟输入的引脚。这对于读取当前电量非常有用。当输入电压为 `0V` 时，读取值为 `0`；当输入电压为 `VCC` 时，读取值为 `1023`；中间电压对应相应的数值。

我定期输出模拟信号的值，并绘制出完整的信号结果。以下是一些引脚及其功能：

| nRF51822 引脚 | 描述 |
| --- | --- |
| P0.05 | 模拟输入 - 与电池充电相关 |
| P0.26 | 模拟输入 - 加速度传感器 |
| P0.03 | 模拟输入 - 加速度传感器（可能） |
| P0.04 | 模拟输入 - 加速度传感器（可能） |

#### 代码
- [示例代码](https://github.com/rbaron/fitless/tree/master/analog_input/AnalogInput)
- [原始数据和绘制脚本](https://github.com/rbaron/fitless/tree/master/analog_input/AnalogInput)

### 按钮
在最初的固件中，触控手环屏幕的指定位置可以点亮屏幕。这不是一个实体按钮，而是一个电容传感器。通过相同的方法找到数字输出，我发现了它与 MCU 的连接方式。

#### 代码
- [示例代码](https://github.com/rbaron/fitless/tree/master/button/Button)

### 低功耗蓝牙 (BLE)
nRF5 的蓝牙功能通过 SoftDevice 实现，这是一种预编译的二进制文件，包含在 BLE 堆栈中。SoftDevice 应独立于应用程序运行。不同版本的 SDK 和芯片对应不同的 SoftDevice 版本。

对于我的芯片（标有 “QFAAHO”，具有 256 KB 闪存和 16KB RAM），兼容的 SoftDevice 版本是 s130。我使用的 SDK 版本是 12.3，其中有一些使用 SoftDevice s130 的示例程序。

#### 示例程序
- [信标源码](https://github.com/rbaron/fitless/tree/master/ble_app_beacon)

### BLE + Arduino
一旦使用 nRF5 SDK 的 BLE 示例程序运行正常，并了解了 RAM 和晶振陷阱，我再次查看了 Arduino 的运行环境。[sandeepmistry/arduino-BLEPeripheral](https://github.com/sandeepmistry/arduino-BLEPeripheral) 项目提供了很好的抽象层，简化了 BLE 外围设备的设置。

#### 示例程序
- [快速上手的例子](https://github.com/rbaron/fitless/tree/master/ble_led)

### 下一步
经过几周的努力，我对这块板子有了深入的了解。现在，我很期待将其暂时收起来，留待以后进一步探索。