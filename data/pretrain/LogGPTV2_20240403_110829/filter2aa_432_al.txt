如下：
$tml minutes message-text &
第一个参数为时间数，第二个参数为显示的消息。
#include 
#include 
#define TRUE 1
#define FALSE 0
#define BELLS "\007\007\007"
int alarm_flag=FALSE;
/* SIGALRM 处理函数 */
setflag()
{
alarm_flag=TRUE;
}
main(int argc,char* argv[])
{
int nsecs;
int i;
if (argc
#include 
#include 
jmp_buf position;
main()
第四章  进程间通信
- 63 -
{
int goback();
…
…
/* 保存当前的堆栈环境 */
setjmp(position);
signal(SIGINT,goback);
domenu();
…
…
}
goback()
{
fprintf(stderr,”\nInterrupted\n”);
/* 跳转回被保存的断点 */
longjmp(position,1);
}
4.3  管道
简单的说，管道就是将一个程序的输出和另外一个程序的输入连接起来的单向通道。
它是 UNIX/Linux 系统的各种进程通信方法中，最古老而应用最为广泛的一种（特别是在 shell
中）。
#ls -l|more
在上面的例子中我们建立了这样的一个管道：获取 ls -l 的输出，再将其作为 more 命令的
输入。形象的说，就是数据沿着管道从管道的左边流到了管道的右边。
这个例子并不复杂，只要是对 Linux/UNIX 比较熟悉的人都曾经使用过类似的命令。
但是，在简单的命令底下，Linux/UNIX 内核究竟都做了些什么呢？
当进程创建一个管道的时候，系统内核同时为该进程设立了一对文件句柄（一个流），
一个用来从该管道获取数据（read），另一个则用来做向管道的输出（write）。
图 4-1 显示了进程和管道间的相互作用。
从图 4-1 中可以清楚的看出进程和管道是如何通过句柄进行数据交换的。进程通过句
柄 fd[0]向管道写入（write）数据，同时通过 fd[1]从管道读出（read）数据。到这里有人也
许会想起 UNIX 的文件处理。事实上，在 Linux 系统内核里，每个管道都是用一个 inode
节点来表示的。（当然，你是不会看到这个节点的，它只存在于系统的内核中。）理解了这
一点，我们就可以容易的掌握接下来要讲的管道的 I/O 处理了。
不过，到目前为止，我们所建立的管道模型还没有任何的实际意义。因为这个管道只
被用来同单个进程通信。建立一个同自己通信的管道有什么用处呢？为了解决这个问题，
- 64 -
Linux网络编程
我们在主进程中利用 fork()函数创建一个自身的自进程。大家也许还记得，fork()的子进程
自动继承了父进程打开的文件句柄。利用继承的句柄，就可以实现父/子间的通信了。这个
关系可以用图 4-2 来表示：
图 4-1  进程和管道间的相互作用
图 4-2  fork()函数调用后的管道
第四章  进程间通信
- 65 -
现在，父子两个进程同时拥有对同一个管道的读写句柄。因为管道必须是单向的（因
为它没有提供锁定的保护机制），所以我们必须决定数据的流动方向（从父到子，还是从子
到父？），然后在每个进程中关闭不需要的句柄。假设我们需要管道从子进程向父进程传送
数据，关闭了相应句柄后的管道可以用图 4-3 来表示。
图 4-3  关闭了相应句柄后的管道
这样，一个完整的管道就被建立了。下面我们就可以使用 read()和 write()函数来对它
进行读写操作了。关于这两个函数的具体使用在 UNIX 的文件函数中有介绍，读者可以自
行参阅相应的资料。
4.3.1  用 C 来建立、使用管道
以上我们介绍了管道的概念和它在 Linux 系统中的模型。下面，我们就将开始用 C 来
建立自己的管道。
1．Pipe()函数
在 C 程序中，我们使用系统函数 pipe()来建立管道。它只有一个参数：一个有两个成
员的整型数组，用于存放 pipe()函数新建立的管道句柄。其函数原型如下：
系统调用：
pipe();
函数声明：
int pipe( int fd[2] );
返回值：
0 on success
-1 on error: errno = EMFILE (no free descriptors)
                EMFILE (system file table is full)
                EFAULT (fd array is not valid)
注意:
fd[0] 用来从管道中读, fd[1]  用来向管道中写
- 66 -
Linux网络编程
数组中的第一个元素（fd[0]）是从管道中读出数据的句柄，第二个元素（fd[1]）是向
管道写入数据的句柄。也即是说，fd[1]的写入由 fd[0]读出。
在建立了管道之后，我们使用 fork()函数建立一个子线程：
#include 
#include 
#include 
main()
{                
int     fd[2];
pid_t   childpid;
pipe(fd);
if((childpid = fork()) == -1)
{
perror("fork");
exit(1);
}
⋯
⋯
}
接下来，我们假设需要管道中数据的流动是从子进程到父进程。这样父进程就需要关
闭（close()）写管道的句柄（fd[1]），而子进程需要关闭读管道的进程（fd[0]）。
注意：因为父子进程同时拥有读写句柄，为了避免不必要的麻烦，我们在程序中务必要记住关闭不
需要的句柄！
#include 
#include 
#include 
main()
{                
int     fd[2];
pid_t   childpid;
pipe(fd);
if((childpid = fork()) == -1)
{
perror(“fork”);
exit(1);
第四章  进程间通信
- 67 -
}
if(childpid == 0)
{
     /* 子进程关闭管道的读句柄 */
     close(fd[0]);
}
else
{
     /* 父进程关闭管道的写句柄 */
     close(fd[1]);
}                .
⋯ ⋯
⋯ ⋯
}
管道建立之后，我们就可以像操作普通文件一样对其进行操作：
#include 
#include 
#include 
int main(void)
{
int     fd[2], nbytes;
pid_t   childpid;
char    string[] = “Hello, world!\n”;
char    readbuffer[80];
pipe(fd);
if((childpid = fork()) == -1)
{
perror(“fork”);
exit(1);
}
if(childpid == 0)
{
    /* 子进程关闭管道的读句柄 */
close(fd[0]);
    /* 通过写句柄向管道写入信息 */
    write(fd[1], string, strlen(string));
_exit(0);
 }
- 68 -
Linux网络编程
else
{
/* 父进程关闭管道的写句柄 */
close(fd[1]);
/* 通过读句柄从管道读出信息 */
nbytes = read(fd[0], readbuffer, sizeof(readbuffer));
printf(“Received string: %s”, readbuffer);
}
return(0);
}
2．使用 dup()函数
有时候我们需要将子进程当中的管道的句柄定向到标准 I/O（stdin/stdout）上去。这样，
在子进程中使用 exec()函数调用外部程序时，这个外部程序就会将管道作为它的输入/输出。
这个过程可以用系统函数 dup()来实现。其函数原型如下：
系统调用：
dup();
函数声明：
int dup( int oldfd );
返回值：
new descriptor on success
-1 on error: errno = EBADF (oldfd is not a valid descriptor)
                EBADF (newfd is out of range)
                EMFILE (too many descriptors for the process)
注意:
旧句柄没有被关闭，新旧两个句柄可以互换使用
虽然原句柄和新句柄是可以互换使用的，但为了避免混淆，我们通常会将原句柄关闭
（close）。同时要注意，在 dup()函数中我们无法指定重定向的新句柄，系统将自动使用未