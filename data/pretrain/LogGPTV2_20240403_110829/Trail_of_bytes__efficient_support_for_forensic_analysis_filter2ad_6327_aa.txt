title:Trail of bytes: efficient support for forensic analysis
author:Srinivas Krishnan and
Kevin Z. Snow and
Fabian Monrose
Trail of Bytes: Efﬁcient Support for Forensic Analysis
Srinivas Krishnan
Kevin Snow
Fabian Monrose
Dept. of Computer Science
Dept. of Computer Science
Dept. of Computer Science
University of North Carolina at
University of North Carolina at
University of North Carolina at
Chapel Hill
Chapel Hill
Chapel Hill
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
For the most part, forensic analysis of computer systems
requires that one ﬁrst identify suspicious objects or events,
and then examine them in enough detail to form a hypoth-
esis as to their cause and eﬀect [34]. Sadly, while our ability
to gather vast amounts of data has improved signiﬁcantly
over the past two decades, it is all too often the case that
we tend to lack detailed information just when we need it the
most. Simply put, the current state of computer forensics
leaves much to be desired. In this paper, we attempt to im-
prove on the state of the art by providing a forensic platform
that transparently monitors and records data access events
within a virtualized environment using only the abstractions
exposed by the hypervisor. Our approach monitors accesses
to objects on disk and follows the causal chain of these ac-
cesses across processes, even after the objects are copied into
memory. Our forensic layer records these transactions in a
version-based audit log that allows for faithful, and eﬃcient,
reconstruction of the recorded events and the changes they
induced. To demonstrate the utility of our approach, we
provide an extensive empirical evaluation, including a real-
world case study demonstrating how our platform can be
used to reconstruct valuable information about the what,
when, and how, after a compromised has been detected.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Information ﬂow, in-
vasive software, security kernels; K.6.5 [Management of
Computing and Information Systems]: Unauthorized
access, logging and recovery
General Terms
Security, virtualization, experimentation
Keywords
Forensics, provenance, audit
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
1.
INTRODUCTION
Today, postmortem intrusion analysis is an all too fa-
miliar problem. Our devices are repeatedly compromised
while performing seemingly benign activities like browsing
the Web [32], interacting on social-networking websites, or
by malicious actors that use botnets as platforms for var-
ious nefarious activities [10]. Sometimes, the threats can
also arise from the inside (e.g., corporate espionage), and
often lead to substantial ﬁnancial losses. Underscoring each
of these security breaches is the need to reconstruct past
events to know what happened and to better understand
how a particular compromise may have occurred. Sadly, al-
though there has been signiﬁcant improvements in computer
systems over the last few decades; data forensics remains a
very tedious process; partly because the detailed informa-
tion we require to reliably reconstruct events is simply not
there, when we need it the most [9].
Loosely speaking, recent eﬀorts in data forensic research
have focused on tracking changes to ﬁle system objects by
using monitoring code resident in kernel space, or by making
changes to the application binary interface. However, with-
out proper isolation these approaches are subject to tamper-
ing and therefore can not provide strong guarantees with re-
spect to the integrity of the recorded events. Malicious users
can, for instance, inject code into either kernel or user space,
thereby undermining the integrity of the logs maintained by
the tracking mechanism. Virtualization [15] provides a po-
tential avenue for enabling the prerequisite isolation criteria
by providing a sandbox for operating system code and appli-
cations. For example, a hypervisor can mediate disk accesses
at the block level by presenting a virtual disk to the virtual
machine (VM). An obvious disadvantage, however, is that
this abstraction suﬀers from a “semantic gap” problem [3],
in which the mapping between ﬁle-system objects and disk
blocks are lost, thereby making it diﬃcult to track objects
beyond the disk layer.
In this paper, we propose an approach for monitoring ac-
cesses to data in a virtualized environment while bridging
the semantic gap issue. Speciﬁcally, we provide an approach
for monitoring accesses to data that originated from disk,
and capture subsequent accesses to that data in memory—
even across diﬀerent processes. Our approach achieves this
goal without any monitoring code resident in the virtual ma-
chine, and operates purely on the abstractions provided by
the hypervisor. Operating at this layer mandates that we
access the disk at the block layer, memory at the physical
frame layer and system calls at the instruction layer—all of
which oﬀer substantial engineering challenges of their own.
In that regard, our main contributions are in the design and
implementation of an accurate monitoring and reconstruc-
tion mechanism that collates and stores events collected at
diﬀerent levels of abstraction. We also provide a rich query
interface for mining the captured information. This provides
the forensic analyst with detailed information to aide them
in understanding what transpired after a compromise (be
it a suspicious transfer of data or modiﬁcation of ﬁles) has
been detected. We also provide an extensive empirical anal-
ysis of our platform, including a real world case study using
our framework.
The remainder of the paper is organized as follows. We
ﬁrst present some background and related work in Section 2.
Sections 3 and 4 describes our design and architecture, in-
cluding the various monitoring subsystems and the respec-
tive challenges in combining data from the various levels
of abstraction. In Section 5, we present a detailed empir-
ical evaluation of the runtime overheads and accuracy of
our logging and reconstruction techniques. To highlight the
strength of our approach even further, we present a case
study in Section 6 showing how the framework was used
to uncover interesting forensic evidence from a laptop that
had been connected to a public network for one week. We
discuss attacks on, and limitations of, our current design in
Section 7 and conclude in Section 8.
2. BACKGROUND AND RELATED WORK
Generally speaking, computer forensics attempts to an-
swer the question of who, what and how after a security
breach has occurred [34]. The ﬁdelity of the recorded infor-
mation used in such analyses is highly dependent on how the
data was collected in the ﬁrst place. Keeping this in mind,
the approaches explored in the literature to date can be
broadly classiﬁed as either client-based approaches (that use
application or kernel-based logging) or virtualization-based
approaches (that use hypervisor based logging). While client-
based approaches can provide semantic-rich information to
a security analyst, their ﬁdelity can be easily undermined as
the logging framework is usually resident within the same
system that it is monitoring. Hypervisor-based approaches,
on the other hand, are generally thought to lack the seman-
tic detail of client-based approaches, but can achieve greater
resistance to tampering as the logging mechanisms reside in
privileged sandboxes outside the monitored system.
Client-based Approaches.
File-system integrity and veriﬁcation has a long history,
with some early notable examples being the work of Spaﬀord
et al. on Tripwire [21] and Vincenzetti et al. on ATP [37];
both of which use integrity checks to verify system binaries
(e.g., /sbin/login). Extending this idea further, Taser [14]
detects unauthorized changes to the ﬁle-system and reverts
to a known good state once malfeasance is detected. Solitude
[16] extends this concept even further by using a copy-on-
write solution to selectively rollback ﬁles, thereby limiting
the amount of user data that would be lost by completely
reverting to the last known good state. These systems do
not record evidence on how an attack occurred and the data
that was compromised instead they are geared primarily at
eﬃcient restoration back to a known good state.
More germane to our goals are systems such as PASS [28]
and derivatives thereof (e.g., [29]) that provide data prove-
nance by maintaining meta-data in the guest via modiﬁca-
tions to the ﬁle-system. However, this requires extensive
guest modiﬁcations and shares the same problems of client-
based systems.
Virtualization-Based Approaches.
In order for virtualization-based approaches to work in
a data forensic framework, they need to ﬁrst overcome the
disconnect in semantic views at diﬀerent layers in an op-
erating system [3, 12].
In particular, Chen et al. [3] pro-
vides excellent insight into advantages and disadvantages of
implementing secure systems at the hypervisor layer. The
challenges are generally related to performance and the dif-
ference in abstractions between the hypervisor layer and the
guest virtual machine. While the issue of performance has
been addressed as hypervisor technologies mature, the “se-
mantic gap” still remains. Antfarm [19], Geiger [20] and
VMWatcher [18], have successfully bridged this gap for a
given layer of abstraction, but to the best of our knowl-
edge, no single work has tackled the problem of bridging
the gap for a set of interconnected layers of abstraction (i.e.,
spanning disk, memory and processes) while preserving the
causal chain of data movement.
Closely related in goals is the approach of King et al. [22]
which provides an event reconstruction approach for relat-
ing processes and ﬁles. BackTracker reconstructs events over
time by using a modiﬁed Linux kernel to log system calls and
relate those calls based on OS-level objects [23]. The se-
mantic gap issue is bridged by parsing the memory contents
of the virtual machine during the introspection time using
a EventLogger compiled with the virtual machine’s kernel
headers. This approach is fragile as any changes to the guest
kernel will undermine their approach [23, 22]. Similarly, in
their VM-based approach, it is not possible to monitor op-
erating systems that are closed-source. While BackTracker
made signiﬁcant strides in this area, we ﬁnd that relying
on just system calls to glean OS state is not enough for a
number of reasons. For instance, since it does not monitor
memory events, data movements (such as a process sending
a ﬁle over a network socket) can only be inferred as “poten-
tial” causal relationships; neither can it detect the exact ob-
ject that was sent over the network. To be fair, these were
not part of its stated goals. By contrast, the causal rela-
tionships we build attempts to capture access chains across
processes, all-the-while storing the exact content that was
accessed and/or modiﬁed.
Also relevant are the techniques used by Patagonix [27]
and XenAccess [31] that employ forms of memory inspection
for VM introspection. Patagonix’s goal is to detect changes
between binaries on disk and their image in memory. Xe-
nAcess is positioned as an extensible platform for VM mon-
itoring. Our goals and approach is diﬀerent in that we use
signals from diﬀerent layers of the VM (i.e., the system-call,
memory and storage layers) to correlate accesses to a mon-
itored object. Lastly, this work signiﬁcantly extends our
preliminary work [24].
3. DATA TRACKING
Our primary goal in this paper is to enable fast and ef-
ﬁcient recording of events involving a monitored data store
(e.g., a disk partition), at a granularity that allows a se-
curity analyst to quickly reconstruct detailed information
about accesses to objects at that location. Conceptually,
our approach is composed of two parts, namely an eﬃcient
monitoring and logging framework, and a rich query system
for supporting operations on the recorded data. To support
our goals, we monitor events to a collection of locations L
(i.e., memory, disk or network) and record read or write
operations on L. We denote these operations as O. Any
additional operations (e.g., create or delete) can be modeled
as a combination of these base operations. We tie these ac-
cesses to the corresponding causal entity that made them,
to ensure that a forensic analyst has meaningful semantic
information for their exploration [2].
The approach we take to capture these causal relation-
ships is based on an event-based model, where events are
deﬁned as accesses, O, on a location L caused by a some
entity, i.e., Ei(O, L) → ID. Loosely speaking, an entity is
modeled as the set of code pages resident in a process’ ad-
dress space during an event. The distinct set of code pages
belonging to that process is then mapped to a unique iden-
tiﬁer. This event-based model also allows us to automati-
cally record events that are causally related to each other,
and to chain the sequences of events as Sn
i Ei. Intuitively,
events are causally related based on the same data being
accessed from multiple locations; i.e., we consider E0(O, L)
to be causally related to E1(O′, L′) if the same data object
resides in L and L′.
Since the hypervisor views the internals of a virtual ma-
chine as a black box, a key challenge is in realizing this model
with minimal loss of semantic information. This challenge
stems from the fact that the monitoring subsystem gets dis-
joint views of operational semantics at diﬀerent levels of ab-
straction. For example, a read system call operates with pa-
rameters in virtual memory and the guest ﬁle system layer,
which then spawns kernel threads to translate the ﬁle system
parameters into blocks; leading to the request ﬁnally being
placed on the I/O queue. Without any code in the guest,
the challenge is in translating these requests and chaining
them together as a single event.
As we show later, one contribution of this work lies in our
ability to link together the various events captured within
the hypervisor. In what follows, we present our architecture
and the design choices we made in building a platform that
realizes the aforementioned model.
3.1 Architecture
The monitoring framework is built on top of Xen [1] with
hardware-virtualization [26]. At a high level, the Xen hy-
pervisor is composed of a privileged domain and a virtual
machine monitor (VMM). The privileged domain is used to
provide device support to the unprivileged guests via emu-
lated devices. The VMM, on the other hand, manages the
physical CPU and memory and provides the guest with a
virtualized view of the system resources. This allows the
monitoring framework to monitor—from the hypervisor—
speciﬁc events that occur in the virtual machine.
The framework is composed of three modules that monitor
disk, memory, and system calls (see Figure 1). The modules
are fully contained within the hypervisor with no code res-
ident in the virtual machine. The system is initiated by
monitoring accesses to a speciﬁc set of virtual machine disk
blocks on the virtual disk. The storage module monitors all
direct accesses to these blocks and their corresponding ob-
jects, while subsequent accesses to these objects are tracked
via the memory and system call modules. Speciﬁcally, the
memory module in conjunction with the system call module
allows the framework to monitor accesses to the object af-
ter it has been paged-in to memory, and also builds causal
relationships between accesses. The memory module is also
responsible for implementing the mapping function that al-
lows us to tie events to speciﬁc processes.
Guest OS (unmodiﬁed)
User Space
User
Apps
open(), read(),
write(), mmap(), etc.
Kernel Space
System Call Handler
Disk I/O
OS Task
Switching
SYSENTER
Event
Hooks
Trampoline
Shared 
I/O 
Ring
Modiﬁed
Memory
Modiﬁed
CR3
System Call 
Subsystem
Storage
Subsystem
Memory
Subsystem
Audit Log
Forensic Query Interface
Xen Hypervisor (modiﬁed)
Figure 1: Overall architecture of the forensic platform, depicting
the memory, storage and system call layers
As a result of our design, each of these modules have
to bridge the “semantic gap” prevalent at that layer of ab-
straction;
i.e., blocks to ﬁles, machine physical addresses
to guest virtual addresses, and instructions to system calls.