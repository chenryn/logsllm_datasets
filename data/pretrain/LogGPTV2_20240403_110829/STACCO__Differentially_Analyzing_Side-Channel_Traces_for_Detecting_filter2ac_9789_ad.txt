Particularly, the CBC padding oracle in GnuTLS v3.4.17 can
be constructed by monitoring the execution order of the func-
tion ciphertext_to_compressed() (see Listing 1) and the func-
tion _gnutls_auth_cipher_add_auth() (Listing 2). Specifically,
dummy_wait() is called in ciphertext_to_compressed() when
the padding or MAC is incorrect. This function was designed to
defeat the timing-based Lucky Thirteen attack [12] by introduc-
ing intentional delays. However, dummy_wait() checks if the er-
ror is caused by incorrect padding (line 3 of Listing 2), and calls
_gnutls_auth_cipher_add_auth() (line 8 and 12 of Listing 2) if
the padding is correct (and the MAC is incorrect). In this example,
the decryption oracle is introduced by the defense against timing
attacks, but the control flow of the additional delay is leaked to the
more powerful man-in-the-kernel attackers.
5 VULNERABILITY VALIDATION
To validate the detected sensitive control-flow vulnerabilities by
Stacco, in this section, we describe in details two types of oracle
attacks against SSL/TLS implementations in enclaves: CBC padding
oracle attacks and Bleichenbacher attacks.
Listing 1: Snippet of ciphertext_to_compressed().
...
ret =
_gnutls_auth_cipher_tag(&params->read.cipher_state,
tag, tag_size);
if (unlikely(ret  0) {
len = _gnutls_mac_block_size(params->mac);
if (len > 0) {
if ((pad + total) % len > len - 9 && total
% len size)
else
_gnutls_auth_cipher_add_auth
(&params->read.cipher_state,
plaintext->data, len);
_gnutls_auth_cipher_add_auth
(&params->read.cipher_state,
plaintext->data,
plaintext->size);
}
}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
bit 51 in our implementation) in the page table entries (PTE) is set.
This reserved bit in PTE is not already used by the Linux kernel, so
only the attack code could have triggered this type of faults. When
such page faults are intercepted, the page-fault handler resets the
reserved bit of the corresponding PTE to 0 so that future accesses
to the same page will be allowed (because otherwise the process
will hang due to frequent page faults); it also sets the reserved bit
of the last accessed page, tracked in a global variable in the kernel,
to 1 in order to capture future access of it. In sum, the kernel only
allows one executable page in the ELRANGE of the victim process
(that the attacker is interested in monitoring) to be accessible at a
time.
A data array, dubbed
Page Trace Recorder (PTR),
is added to the kernel space
for the page-fault handler
to record the list of vir-
tual pages that has been ac-
cessed by the enclave pro-
gram. Each time a page
fault triggered by the re-
served bit in PTEs occurs,
the faulting page is ap-
pended to the list, which
also increments a global
counter by one.
The attacks can be ini-
Figure 8: Overview of the at-
tack implementation.
tiated either from the userspace
or from the kernel. To facilitate the attacks, we implemented a set of
kernel interfaces, dubbed Paging Oracle Attack Program Interface
(POAPI), that can be triggered from both userspace and kernel space.
The interfaces are encapsulated as a kernel module, i.e., the POAPI
module in Figure 8. The interfaces are either used by a userspace
program, the attacker program in the figure, or by another kernel
module, the attack module in the figure. As either an attack pro-
gram or an attack module is needed in the two attacks we describe
shortly, they are labeled with asterisks to indicate only one of them
is needed in an attack.
To initiate the attack, the POAPI module is provided with the
name of the victim process, the virtual addresses of the EPC pages to
be monitored, and the specific page sequence (specified using page
indices rather than virtual addresses) to be monitored for oracle
construction. The sequence of pages is also called the template
sequence. POAPI locates the page tables of the victim process in the
kernel and sets the reserved bits of the PTEs to be 1 so that accesses
to these pages by the enclave code will be trapped into the kernel.
The template sequence is translated into the sequence of virtual
pages in this step, so it can be matched later with virtual page
sequences in PTR. POAPI provides two addition interfaces: First, a
Reset() call that will reset the PTR to empty. This functionality is
important in our oracle attacks as we need to repeatedly query the
oracles. Second, an Oracle() call that will return true or false: If
the template sequence matches the entire sequence in PTR, then
Oracle() returns true; otherwise it returns false.
5.2 CBC Padding Oracle Attacks
The oracle. We demonstrated the CBC padding oracle attack on
the implementation of TLS v1.2 in GnuTLS 3.4.17 (latest version
as of February 2017). Stacco suggests that this implementation
is vulnerable to page-level control-flow inference attacks. More
specifically, the correctness of the paddings can be revealed by the
execution order of two functions, ciphertext_to_compressed()
and _gnutls_auth_cipher_add_auth(). We found in our experi-
ments that by monitoring only the memory pages that contain these
two functions the adversary is able to construct a powerful oracle
for plaintext recovery. Therefore, our template sequence only con-
tains two memory pages. Note that ciphertext_to_compressed()
is large and spans two pages. We selected the second page to moni-
tor. This is instructed by the differential analysis tool already, so no
manual analysis is needed. By labelling the memory page contain-
ing ciphertext_to_compressed() as index 0 and that containing
_gnutls_auth_cipher_add_auth() as index 1, the template se-
quence is “1010101010”.
Detailed implementation. We run the victim library inside SGX
with help of Graphene-SGX [5]. Particularly, the victim GnuTLS li-
brary we attack is loaded as sgx.trusted_files into enclaves with
the victim server programs. However, GnuTLS does not support
Intel SGX: The initialization of the library will check the availability
of accelerated encryption instructions with the CPUID instruction—
an instruction not supported by SGX. Thus we modified the library
slightly by simply removing the check to allow it to run directly in
enclave (inside Graphene).
The padding oracle attack is implemented as a kernel module that
leverages the POAPI to query the padding oracle constructed from
the page-level control-flow inference attacks. The attack starts after
the SSL/TLS server in Graphene has been launched. The process
name, the virtual address of the two memory pages that contain the
two functions, and a template sequence “1010101010” are provided
through POAPI. If the encrypted message has a valid padding but
invalid MAC, Oracle() will find a match in the PTR and return
true. If both the padding and the MAC are invalid, a sequence of
“10101010” will be found in the PTR.
Following prior studies [12, 38], the padding oracle attack is per-
formed over multiple TLS sessions. This attack is practical when the
victim client can be triggered to repeatedly establish new TLS con-
nections with the victim server and send the same message in each
new connection. Particularly, the victim client first establishes a TLS
connection with the victim server using the SSL handshake protocol
and negotiates to use the TLS_RSA_WITH_AES_128_CBC_SHA cipher-
suite in TLS v1.2 (through a process that can be heavily influenced
by the man-in-the-kernel attacker). Then it sends an encrypted data
record to the server. The man-in-the-kernel attacker modifies the
ciphertext to prepare its query to the oracle. If the server receives
a data record with incorrect MAC or incorrect padding, it sends a
bad_record_mac alert to the client and shuts down the current TLS
session. When the client receives the alert, it immediately restarts a
new TLS connection to start a new query. The ciphertext will be dif-
ferent from the first time, as the symmetric key, i.e., AES key, used
to encrypt the data is different. The adversary will intercept the
message, again, and make modifications according to its adaptive
query strategies.
The attack kernel module we implemented for the CBC padding
oracle attacks, upon kernel module initialization, also registers a
Netfilter to intercept all the traffic sent to and from the server pro-
cess, by filtering traffic with specific port number. More specifically,
two hooks were registered with hooknum of NF_IP_LOCAL_IN and
NF_IP_LOCAL_OUT. With this functionality, the adversary is able
to examine each SSL/TLS packet and determine the packet type
by reading the first five bytes in the data segment of packets. Byte
1 indicates the content type. The adversary is interested in two
particular types: 0x15 and 0x17. 0x15 means the packet is an Alert
message and 0x17 means Application Data. Byte 2 and 3 are TLS
versions. Since we are attacking TLS 1.2, they should be 0x0303. The
last two bytes indicate the compressed plaintext length. If an Alert
message sent from the SSL/TLS server to the client is observed by
the kernel module, it means that the server has decrypted the mal-
formatted record and sent the client a bad_record_mac alert, the
adversary immediately checks the whether the corresponding plain-
text padding of the modified record is valid by calling Oracle().
Notice that when the Netfilter intercepts the packet and modifies
the ciphertext, all the checksums, such as IP and TCP checksums,
will fail when checked by the kernel. Thus, a special flag is added
to the modified packets and the kernel is modified to bypass all
packet integrity checks upon appearance of this flag.
Evaluation. The complexity of plaintext recovery with AES en-
cryption is at most 216 + 14 × 28 = 69, 120 queries. This is because
the last two bytes need to be enumerated together, but the rest of
the bytes can simply be decrypted one byte after another, leading
to a linear complexity in the size of the block. In our experiment to
decrypt one block with random data, the number of queries was
48388 and the execution time of the attack was 51m13s (less than
an hour).
Breaking mbedTLS-SGX. We also succeeded in carrying out the
CBC padding oracle attacks against an open-source SGX implemen-
tation of mbedTLS, mbedTLS-SGX [8], which can be loaded natively
in enclaves. Guided by Stacco, we chose two pages containing the
functions sha1_process_wrap() and mbedtls_sha1_process()
to monitor. The template sequence is “0101...10” (15 zeros and 14
ones). Incorrect-padding traces are “0101...010” (14 zeros and 13
ones) in all cases. In our experiment, the attack took 29 minutes
and 29 seconds with 25,717 queries to complete the decrypting of
one random AES block.
5.3 Bleichenbacher Attacks
The oracle. Our attack target was the implementation of TLS v1.2
in OpenSSL 1.0.2j (latest as of February 2017). Stacco identified
a vulnerability in the implementation: the control flows involv-
ing ERR_put_error() and RSA_padding_check_PKCS1_type_2()
may leak sensitive information regarding the correctness of the
formatting. We label the two memory pages that contain the two
functions, respectively, as page 0 and page 1. The template sequence
is “1010”. Therefore, if the page sequence in the PTR matches the
template, the Oracle() returns true. Otherwise, in which case the
sequence in the PTR is typically “10101010”, the oracle returns false.
Detailed implementation. We use Graphene-SGX to run unmod-
ified OpenSSL inside SGX enclaves. Unlike GnuTLS, OpenSSL does
not have enclave-illegal instructions and can be loaded and ran di-
rectly by an SSL/TLS server as sgx.trusted_files in the enclave
with Graphene. To complete the attack, we extended the open-
source tool, TLS-Attacker [66], and implemented an add-on module.
We chose TLS-Attacker because it enables us to easily replace the
ClientKeyExchange message with any message we would like the
oracle to test. We did not implement any additional kernel modules
besides POAPI, as the desired computation in kernel space is rather
inefficient. All the attack steps were accomplished in the userspace
with the support of POAPI for querying the oracle.
With an intercepted ClientKeyExchange message, the attacker
conducts the Bleichenbacher attack to decrypt it and extract the
PreMasterSecret. To do so, the attacker initializes the man-in-
the-kernel attacks through the POAPI module and provides the
server process name, the virtual addresses of the two target pages,
and the template sequence “1010”. Then the attacker establishes
a series of queries: Before sending each query, he initiates a new
TLS handshake with the victim server. Right before sending the
crafted ClientKeyExchange message, the attacker calls Reset()
to POAPI to reset the PTR. Then the crafted message is sent and
the attacker waits until receiving the Alert message from the server.
Then the attacker calls Oracle() to query the oracle, depending
on the return value, the next ciphertext is calculated. This process
continues until the plaintext of the ClientKeyExchange message
is recovered.
Evaluation. The numbers of queries that are needed to break
the ClientKeyExchange message encrypted with a 1024-bit RSA
key, a 2048-bit RSA key and a 4096-bit RSA key are shown in
Table 2. It can be seen that the numbers of queries for breaking
ClientKeyExchange encrypted with 1024-bit key and 2048-bit key
are similar, this is because the oracle strength is not linear in the size
of the keys. Breaking the 2048-bit key encrypted ClientKeyExchange
takes roughly half an hour. Once the PreMasterSecret is known,
the attacker can decrypt all the intercepted application data
packets and hijack the future communication if the session is still
Table 2: Performance of the Bleichenbacher attacks
against OpenSSL with different key size.
Num. of queries
Time to succeed
1024
19,346
28m20s
2048
19,368
33m24s
4096
57,286
1h31m39s
alive. We anticipate an optimization in the attacks will further speed
up the process, possibly making an online SSL/TLS hijacking attack
feasible.
6 COUNTERMEASURES
Countermeasures to the demonstrated attacks can be pursued in
three different layers:
Preventing control-flow inference attacks. Although Intel claims
side-channel attacks are outside the threat model of SGX [6], given
the severity of the demonstrated attacks (among the others [43, 63,
73]), we believe it is reasonable for Intel to start exploring solutions
to these side-channel attacks, particularly control-flow inference
attacks. Some academic research studies have already made some
progress towards this direction [27, 32, 62, 63]. However, all of these
prior work only considers some of the side-channel attack vectors.
But effective solutions require a complete understanding of the at-
tack surfaces. Due to the lack of systematic knowledge, none of the
prior solutions have successfully prevented control-flow inference
attacks on all levels (i.e., page-level, cache-level, and branch-level).
We believe a considerable amount of research in this direction is
warranted.