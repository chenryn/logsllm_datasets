seldom change once the website’s design has been ﬁnalized.
To promote usability and provide a consistent user experi-
ence, menus, navigation links, and buttons on the page are
placed at speciﬁc positions and use static images.
We take advantage of the dynamic characteristics of ban-
ners and the static nature of the rest of the UI elements on
a webpage to propose a trick banner detection feature based
on comparing multiple views of a single webpage. Specif-
ically, we ﬁrst take two screen captures of the same page
obtained through two separate requests to the web server.
We then visually compare them, extract the parts that have
changed between the requests, and mark those as potential
banner regions.
5.2 Classiﬁer
A binary classiﬁer is a function that takes as input a set
of features, such as the visual features described above, and
outputs a binary decision – in this case, trick banner or non-
trick banner. The machine learning literature oﬀers a wide
variety of binary classiﬁers [22]. In this paper, we choose to
use the popular random forest classiﬁer, and train it using
the method proposed by Breiman [7]. The details of our
training data collection methodology is explained in Sec-
tion 7. Note that although the random forest is used for all
experiments in this paper, we have observed that the results
are comparable using other state-of-the-art classiﬁers such
as the support vector machine.
6.
IMPLEMENTATION
We implemented the trick banner detection methodol-
ogy we have discussed above in a prototype system called
TrueClick, as a Firefox browser extension that uses exter-
nal image processing libraries.
In this section, we explain
the implementation-speciﬁc details of our system.
6.1 Overview
TrueClick is implemented as a browser extension that
runs on demand when the user visits a ﬁle sharing website
containing trick banners and clicks on a button to activate
the system. Once the analysis of the banner images is com-
plete, TrueClick can either mark the detected trick ban-
ners as such, or block them entirely. In this prototype imple-
mentation, we elected to visually obscure the trick banners
from the user.
An overview of the architecture of TrueClick is pre-
sented in Figure 4. When the user triggers the analysis
on a given web page, the Screen Grabber and Image Grab-
ber components ﬁrst take screenshots of the webpage and
cache all image ﬁles downloaded from the web server in an
image database, respectively. Then, the screenshots and
image database are input to the Image Extractor compo-
nent, which identiﬁes the banner regions on the screenshots,
and attempts to match them to the ﬁles in the database, as
previously explained in Section 4. Once all banner regions
are detected, they are sent to the Feature Extractor which
computes the ﬁve trick banner detection features on each
image. Finally, TrueClick runs the resulting feature vec-
tors through its classiﬁer and determines the regions on the
webpage where trick banners are displayed.
Note that during this process, all extracted images smaller
than 16 × 16 (i.e., the standard size for favicon ﬁles) are
discarded in order to speed up the detection process and
display more relevant warnings to the user since they are
most likely not banners.
In the following, we elaborate on the details of the Screen
Grabber and Image Grabber components.
6.2 Screen Grabber
The Screen Grabber component is primarily responsible
for taking a screenshot of the webpage as rendered by the
browser. In order to ensure that the resulting screen capture
is identical to what the user of the browser sees, TrueClick
copies every pixel displayed in Firefox’s main browsing win-
dow in a hidden HTML canvas internal to the browser, and
dumps the results into an image ﬁle.
This component is also tasked with providing the neces-
sary information for the Feature Extractor to identify the
visual diﬀerence in multiple views of the same webpage. To
this end, once TrueClick is activated, the Screen Grabber
issues an additional HTTP request for the displayed web-
page, renders it in a hidden browser window, and uses this
to take a second screenshot of the page with (potentially)
diﬀerent banners. Note that during this process, care must
be taken to ensure that the dimensions and display proper-
ties of the hidden window are identical to that of the original
window so that the two screenshots obtained match and the
subsequent comparison can be carried out accurately.
6.3
Image Grabber
The Image Grabber component identiﬁes the image ﬁles
referenced by the webpage, and builds a temporary image
database to be used by the Image Extractor to match frag-
mented banners against. However, simply parsing the DOM
tree of the webpage is not an eﬀective way of accomplish-
ing this task since many banners are displayed dynamically
after page load by JavaScript ad libraries. Similarly, even
(cid:23)(cid:25)(cid:20)
Screen Grabber
HTML
Image Grabber
Image Extractor
TRUECLICK
Color
Size
Placement Animation
Classifier
Multi-View
Feature Extractor
Figure 4: Overview of the architecture and various components of TrueClick.
Labeled
Banners
Learning Module
when the URLs to the image ﬁles can be detected, down-
loading the banners from those locations is not a reliable way
of obtaining the images, because the URLs provided by ad
delivery frameworks often rotate between diﬀerent banners
and serve diﬀerent image ﬁles with each request.
In order to address these problems, Image Grabber trans-
parently intercepts HTTP responses from web servers and
inspects the payload. Once it has been determined that the
data corresponds to an image ﬁle, it is copied and inserted
to the image database. This technique has the additional
beneﬁt of avoiding downloading the same image ﬁles a sec-
ond time, saving bandwidth and allowing for quick detection
of trick banners.
7. EVALUATION
In this section, we describe our experiments to measure
the accuracy and usability of our solution in identifying trick
banners in the wild. We evaluated the eﬀectiveness of our
classiﬁer on a data set of banners we collected, conducted a
user study to demonstrate that TrueClick is practical, and
ﬁnally, compared the detection eﬀectiveness to an existing
ad detection system, AdBlock Plus.
7.1 Data Collection
To train and evaluate our system, we collected trick ban-
ner samples and images of genuine download buttons from
popular ﬁle sharing websites, including one-click hosters, bit-
torrent sites, and online video streaming sites. Our training
data set consists of only English websites, while the evalu-
ation data set contains both English and non-English web-
sites. We chose to perform the data collection and labeling
procedure manually instead of crawling these websites, so
that we could use cues from the pages to determine whether
the collected samples are trick banners or not with high con-
ﬁdence and train our classiﬁer with an accurate data set.
We reached the actual ﬁle download pages by searching for
popular movies and computer programs at the ﬁle sharing
websites and services. In the banners we collected, we looked
for keywords that could be intended to trick users such as
Download, Watch, Now, Save, Play, Get it, andStore.
We note that such ﬁle sharing websites are not exclusively
used for illegal media trading, but are also often used to
e
t
a
r
e
v
i
t
i
s
o
p
e
u
r
T
0
.
1
8
.
0
6
0
.
4
0
.
2
.
0
0
0
.
0.37
0.12
0.06
0.02
0.01
0
0
0.72
0.93
0.97
1
0.0
0.2
0.4
0.6
0.8
1.0
False positive rate
Figure 5: ROC curve for a 10-fold cross validation
of TrueClick’s random forest classiﬁer.
distribute media to large audiences (e.g., software updates,
non-commercial documentaries). Hence, our aim is to pro-
tect users in general, even though some might be engaged in
illicit behavior when they are tricked by malicious banners.
To train and evaluate our classiﬁer, we used 165 trick ban-
ners and 94 images corresponding to genuine download links
for a total of 259 banner samples from 88 ﬁle sharing web-
sites. For the comparison with AdBlock Plus, we used a
disjoint set of 415 trick banners collected from 82 websites.
In total, we collected 674 banner samples from 170 ﬁle shar-
ing websites.
7.2 Evaluation of the Classiﬁer
To build a classiﬁer to distinguish between trick banners
and genuine download links, we used the R statistical ma-
chine learning environment and, speciﬁcally, the ipred pack-
age, to train a random forest classiﬁer from which the im-
portance of predictors were assessed.
Figure 5 displays a ROC curve for a 10-fold cross valida-
tion of the resulting random forest classiﬁer over our training
(cid:23)(cid:25)(cid:21)
Feature
x-position
y-position
Size
Color
Animation
Multiview
Importance (bits)
23.37
25.91
100.06
28.71
21.98
52.14
Table 1: Information gain for each feature.
set, using a cutoﬀ value of 0.1. An n-fold cross validation
partitions the entire data set into n equal-sized samples, or
folds, trains on n − 1 folds, and then validates the result-
ing model on the remaining fold. This process is repeated
for each fold. The ROC curve plots the true positive rate
against the false positive rate of the best-performing clas-
siﬁer as the discrimination threshold – i.e., the boundary
between the trick banner and genuine link classes – is varied
over [0, 1]. The value of the ROC curve lies in the guid-
ance it provides in selecting thresholds to bias towards true
positives at the expense of false positives, and vice versa.
The ROC curve shows that our classiﬁer achieves a 96.97%
true positive rate given a false positive rate of 3.03%, which
is lower than the critical false discovery rate threshold of
5%. In other words, 3.03% of trick banners were incorrectly
classiﬁed as correct banners. As shown in Table 1, the size
feature is the most eﬀective in distinguishing trick banners
from legitimate download links. The table is generated using
out-of-bag samples from the training data.
7.3 Effectiveness of Trick Banner Detection
We tested TrueClick’s usability and eﬀectiveness in guid-
ing users to identify and click on the genuine download links
on a ﬁle sharing website by conducting a user study, and
comparing its detection performance to AdBlock Plus.
User Study. We performed our user study on 40 under-
graduate and graduate computer science students. While we
did not explicitly evaluate the participants’ technical savvi-
ness, it is reasonable to expect them to be relatively expert
computer and Internet users.
We ﬁrst briefed all participants that they were going to
take part in a user study on identifying the genuine down-
load links on English-only ﬁle sharing websites, and then
instructed them to click on the link or button they thought
was legitimate on the webpages they were shown. Next,
we presented each participant with unmodiﬁed pages from
three diﬀerent ﬁle sharing websites for them to perform this
task on. In order to control for the fact that advertisement
banners change every time a page is requested, we did not
use the actual websites in our test, but instead created iden-
tical oﬄine replicas with a ﬁxed set of banners. Once the
participants completed the ﬁrst three tasks, we repeated the
experiment using the same three websites, but this time in
a browser window running TrueClick so that our system
could analyze the page content and mark detected trick ban-
ners as such. We observed each participant complete all six