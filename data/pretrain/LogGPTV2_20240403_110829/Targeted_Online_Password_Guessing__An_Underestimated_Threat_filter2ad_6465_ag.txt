# Basic Information of Matched English Datasets

| Dataset | Total Non-identical (%) |
|---------|------------------------|
| PII-Dodonew (161,510) | — |
| PII-Rootkit (69,330)  | 2,510 (85.11%) |
| PII-000webhost (2,950) | 96 |

**Table 13: Basic information of the matched English datasets**

- **Original Dataset**
  - 000webhost: 2,949
  - Yahoo: 214

## Experimental Design

To ensure our experiments are as realistic as possible, we adhere to the following rules for selecting training sets for a given test set (attacking scenario):

1. **Source Diversity**: The training and test sets never come from the same service.
2. **Language and Policy Consistency**: The training and test sets must be in the same language and follow the same password policy.
3. **Maximize Training Data**: The training set should be as large as possible.

Rule 1 helps prevent overfitting, while Rules 2 and 3 ensure the effectiveness of each algorithm. For fair comparison, all nine algorithms work on the same test set, and for the same type of algorithms (e.g., TarGuess-I and [20]), their training sets use the same personal information.

## Evaluation Results

The most critical resource in an online attack is the number of allowed guesses, as computational power and bandwidth are less significant. In each of our ten experiments, the training phase can be completed on a common PC in less than 65.3 seconds, and generating 1000 guesses per user takes less than 2.1 seconds. Therefore, we use the guess-number-graph to evaluate the effectiveness of our four probabilistic algorithms (TarGuess-I to IV) against five leading algorithms (PCFG [35], Markov [21], Trawling optimal [6], Personal-PCFG [20], and Das et al.’s cross-site algorithm [12]).

### Key Findings

- **Within 100 Guesses**:
  - **TarGuess-I** outperforms Personal-PCFG [20] by 11.17% to 509% (average 84%).
  - **TarGuess-II** outperforms Das et al.’s algorithm [12] by 8.12% to 300% (average 111.06%) when cracking non-identical password pairs.
  - **TarGuess-III and IV** achieve success rates of 73.09% against Chinese normal users and 31.61% against English security-savvy users.

- **As the Number of Guesses Increases**:
  - The superiorities of TarGuess-I to IV over their counterparts generally increase.

- **Cross-Site Algorithms**:
  - We focus on the efficiency of cross-site algorithms for non-identical password pairs, as this is their primary goal. Many PII attributes in English test sets (e.g., Rootkit and its matched lists) are missing, which would otherwise have improved our cracking results.

- **TarGuess-IV**:
  - This algorithm characterizes a powerful yet realistic attacker who can launch cross-site guessing by exploiting a victim’s one sister password and both type-1 and type-2 PII.
  - Within 10 guesses, TarGuess-IV achieves success rates of 45.49% to 85.33% (average 65.70%) against accounts of normal users at various web services.
  - Within 102 guesses, the success rates are 56.96% to 88.02% (average 73.08%).
  - Within 103 guesses, the success rates are 62.95% to 89.87% (average 77.32%).

- **Comparison with State-of-the-Art**:
  - To achieve similar high success rates, state-of-the-art trawling algorithms [21, 30] need 1013 guesses per user and take several days using high-performance computers.

- **Zipf Distribution**:
  - Password strength against both targeted and trawling guessing follows a Zipf distribution. The first few guesses are extremely effective, but the success rate decreases rapidly as the number of guesses increases.
  - For each of the eight real-world algorithms (excluding the trawling optimal one [6]), the ratio \( f_n \) of the number of successfully cracked accounts to the number of guesses per account \( n \) can be approximated by Zipf’s law: \( f_n = C \cdot n^s \), where \( s \) is generally between 0.15 and 0.30, and \( C \) is between 0.001 and 0.01, depending on the test set.

- **Diminishing Returns**:
  - The diminishing returns principle implies that an attacker will stop at some point as the gains do not outweigh the costs. There are three such points corresponding to different attacking strategies, but existing guidelines [16, 18] only consider the trawling point.

- **Xiaomi Cloud Passwords**:
  - When sister passwords are available, TarGuess-IV can reach a success rate of 77% against normal users with 100 guesses.
  - Even without sister passwords, TarGuess-I can still achieve about 20% success rates against normal users with just 100 guesses.
  - Further experiments on Xiaomi cloud passwords, which are MD5 hashed with salt, show that within 10 to 103 guesses, TarGuess-I outperforms Personal-PCFG [20] by 70.58% to 119%, and TarGuess-II outperforms Das et al.’s algorithm [12] by 73.66% to 405%. TarGuess-III and IV can gain success rates of 63.61% to 73.56%.

## Conclusion

We present the first systematic evaluation of the extent to which an online guessing attacker can gain advantages by exploiting various types of user personal information, including leaked passwords and common PII. Our study is grounded on a framework consisting of seven sound probabilistic models, each addressing a typical attacking scenario. Particularly, TarGuess-I to IV characterize the four most representative scenarios, and for the first time, the problem of modeling context-aware, semantic-enriched cross-site password guessing attacks has been well addressed.

Extensive experimental results show that TarGuess-I and II drastically outperform their foremost counterparts, and TarGuess-III and IV can achieve success rates as high as 73% with just 100 guesses against normal users and 32% against security-savvy users. Our results suggest that currently used security mechanisms are largely ineffective against targeted online guessing threats, and this threat has become much more damaging than expected. We believe that the new algorithms and knowledge of the effectiveness of targeted guessing models can provide valuable insights for both existing password practices and future password research.

## Acknowledgments

The authors are grateful to the anonymous reviewers for their constructive comments. Special thanks to Dinei Florêncio, Cormac Herley, Hugo Krawczyk, Haining Wang, Yue Li, Joseph Gardiner, Haibo Cheng, and Qianchen Gu for their insightful suggestions and invaluable help. Ping Wang is the corresponding author. This research was partially supported by the National Natural Science Foundation of China (NSFC) under Grants Nos. 61472016 and 61472083, and by the National Key Research and Development Plan under Grant No. 2016YFB0800600.

## References

[References remain the same as provided in the original text.]