throw new Exception("stack is empty");
33.
34.
35.
return minStack.peek();
---
## Page 297
36.}
37.
38. public static void main(String[] args) throws Exception {
39.
MinStack stack = new MinStack();
40.
stack.push(4);
41.
stack.push(9);
42.
stack.push(7);
43.
stack.push(3);
44.
stack.push(8);
45.
stack.push(5);
46.
System.out.println(stack.getMin());
47.
stack.pop();
48.
stack.pop();
49.
stack.pop();
50.
System.out.println(stack.getMin());
51.}
代码第1行输出的是3，因为当时的最小值是3。
代码第2行输出的是4，因为元素3出栈后，最小值是4。
好了，关于最小栈题目的解法就介绍
---
## Page 298
到这里，咱们下一节再见！
5.4
如何求出最大公约数
5.4.1一场求最大公约数的面试
小灰，你又来了？这次
就不用自我介绍了。
嘿嘿，好的
下面我来考查你一道算法题，数学里面
的最大公约数，知道吧？
---
## Page 299
这个我知道，小学就学过。
那么，看看下面这个算法题。
题目
写一段代码，求出两个整数的最大公约数，要尽量优化算法的性能。
哦，让我试试...
---
## Page 300
写出来啦！你看看。
小灰的代码如下：
1. public static int getGreatestCommonDivisor(int a, int b){
2.
int big = a>b ? a:b;
3.
int small = a1; i--){
8.
if(sma11%i==0 && big%i==0) {
9.
return i;
10.
}
11.
12.
return1;
13.}
14.
15. public static void main(String[] args) {
16.
System.out.println(getGreatestCommonDivisor(25, 5));
17.
System.out.println(getGreatestCommonDivisor(1oo, 8o));
---
## Page 301
18.
System.out.println(getGreatestCommonDivisor(27, 14));
19.}
小灰的思路十分简单。他使用暴力枚举的方法，从较小整数的一半开
始，试图找到一个合适的整数i，看看这个整数能否被a和b同时整除。
你这个方法虽然实现了所要求的功能，
但是效率不行啊。想想看，如果我传入的整数是10000和10001，
用你的方法就需要循环10000/2-1=4999次！
哎呀，这倒是个问题。
想不出更好的方法了....
---
## Page 302
呵呵，没关系，回家等通知去吧！
不会吧又
挂了·
5.4.2
解题思路
小灰，你刚刚去面试了？结果怎么
样？
---
## Page 303
大黄，怎么才能更高效地求出两
个整数的最大公约数呀？
小灰，你听说过辗转相除法吗？
辗....什么除法？
---
## Page 304
是辗转相除法！又叫作欧几里得算
法。
辗转相除法，又名欧几里得算法（Euclideanalgorithm），该算法的目
的是求出两个正整数的最大公约数。它是已知最古老的算法，其产生
时间可追溯至公元前300年前。
这条算法基于一个定理：两个正整数a和b（a>b），它们的最大公约数
等于a除以b的余数c和b之间的最大公约数。
例如10和25，25除以10商2余5，那么10和25的最大公约数，等同于10和
5的最大公约数。
有了这条定理，求最大公约数就变得简单了。我们可以使用递归的方法
把问题逐步简化。
首先，计算出a除以b的余数c，把问题转化成求b和c的最大公约数：然
后计算出b除以c的余数d，把问题转化成求c和d的最大公约数；再计算
出c除以d的余数e，把问题转化成求d和e的最大公约数.....
---
## Page 305
以此类推，逐渐把两个较大整数之间的运算简化成两个较小整数之间的
运算，直到两个数可以整除，或者其中一个数减小到1为止。
说了这么多理论不如直接写代码，小
灰，你按照辗转相除法的思路改改你的代码吧。
好的，让我试试！
辗转相除法的实现代码如下：
1. public static int getGreatestCommonDivisorV2(int a, int b)
{
2.
int big = a>b ? a:b;
3.
int small = ab），它们的最大公约数等于
a-b的差值c和较小数b的最大公约数。例如10和25，25减10的差是15，
那么10和25的最大公约数，等同于10和15的最大公约数。
由此，我们同样可以通过递归来简化问题。首先，计算出a和b的差值
c（假设a>b），把问题转化成求b和c的最大公约数；然后计算出c和b的
差值d（假设c>b），把问题转化成求b和d的最大公约数；再计算出b和d
的差值e（假设b>d），把问题转化成求d和e的最大公约数.....
以此类推，逐渐把两个较大整数之间的运算简化成两个较小整数之间的
运算，直到两个数可以相等为止，最大公约数就是最终相等的这两个数
的值。
OK，这就是更相减损术的思路，你
按照这个思路再写一段代码看看。
---
## Page 308
好的，让我试试！
更相减损术的实现代码如下：
1. public static int getGreatestCommonDivisorV3(int a, int b)
2.
if(a == b){
3.
return a;
4.
5.
int big = a>b ? a:b;
6.
int small=a>1,b>>1)。
当a为偶数，b为奇数时，gcd(a,b)=gcd(a/2,b)=gcd(a>>1,b)。
当a为奇数，b为偶数时，gcd(a,b)=gcd(a,b/2)=gcd(a,b>>1)。
当a和b均为奇数时，先利用更相减损术运算一次，gcd(a,b)
三
gcd(b,a-
b)，此时a-b必然是偶数，然后又可以继续进行移位运算。
例如计算10和25的最大公约数的步骤如下。
---
## Page 311
1.整数10通过移位，可以转换成求5和25的最大公约数。
2.利用更相减损术，计算出25-5=20，转换成求5和20的最大公约数。
3.整数20通过移位，可以转换成求5和10的最大公约数。
4.整数10通过移位，可以转换成求5和5的最大公约数。
5.利用更相减损术，因为两数相等，所以最大公约数是5。
这种方式在两数都比较小时，可能看不出计算次数的优势；当两数越大
时，计算次数的减少就会越明显。
说了这么多，来看看代码吧，这是最
终版本的代码。
1.public static int gcd(int a, int b){
2.
if(a == b){
3.
return a;
4.
5.
if((a&1)==0 && (b&1)==0){
6.
return gcd(a>>1, b>>1)>1,b);
9.
}else if((a&1)!=0 &&(b&1)==0){
10.
return gcd(a, b>>1);
---
## Page 312
11.
}else{
12.
int big = a>b ? a:b;
13.
int small = a19，所以19不是2的整数次幂。
如果目标整数的大小是n，则此方法的时间复杂度是O(logn)。
代码已经写好了，快来看看！
1. public static boolean isPowerof2(int num) {
2.
int temp = 1;
3.
while(temp<=num){
4.
if(temp == num){
---
## Page 317
5.
return true;
6.
7.
temp =temp*2;
8.
9.
return false;
10.}
11.
12.
public static void main(String[] args）{
13.
System.out.println(isPower0f2(32));
14.
System.out.println(isPower0f2(19));
15.}
OK，这样写实现了所要求的功能，你思
考一下该怎么来提高其性能呢？
哦，让我想想...
---
## Page 318
我想到了，可以把之前乘以2的操作
改成向左移位，移位的性能比乘法高得多。来看看改变之后的代码
吧。
1.public static boolean isPower0f2V2(int num) {
2.
int temp = 1;
3.
while(temp<=num){