else
);
);
(cid:3)
;
endif
(cid:2)
Update
(cid:6)
(cid:4)EncSK
EncSK
(cid:7)(cid:4)
(cid:3)
(cid:2), r1, pk0, pk1(cid:5), PK
(cid:5)
t, T,
If (t = T − 1) erase EncSK and return “no period left”;
Parse PK as (pk(cid:2), h);
Output ⊥ if h (cid:7)= H(pk0, pk1);
Set PK0 = (pk(cid:2), pk0) and PK1 = (pk(cid:2), pk1);
(cid:3)
If (t + 1 < T /2)
(cid:2), PK0
(cid:2) ← Update0
t, T /2, EncSK
EncSK
(cid:2)
;
else
If (t + 1 = T /2)
EncSK
EncSK
(cid:2) ← SKeygen1(λ, r1, T /2, pk(cid:2)
(cid:2) ← Update1
t − T /2, T /2, EncSK
); r1 ← 0;
(cid:2), PK1
(cid:2)
(cid:3)
;
else
endif
endif
4.1.2 Security
⊕
To prove the update security of FSS-UU
, we could sim-
ply show that a 2-party signature can be seen as a FSS-UU
with one period and separately prove that the sum composi-
tion of any two FSS-UU schemes (such as the one described
in [12] for instance) using the same second factor yields an-
other such scheme with more periods. However, in the proof
of update security (theorem 4.4) for the second composition,
we will use the details of the proof of the next theorem.
Moreover, we obtain a more eﬃcient (i.e. independent of T
in terms of probability) reduction by analyzing the security
of the whole iterated composition as we do here.
Theorem 4.1. If the underlying 2-party multi-signature
2MS is secure against chosen-message attacks in the regis-
tered public key model, the sum composition provides up-
date security. Namely, an update security adversary F im-
plies a chosen-message attacker B having identical advan-
tage AdvUS(F) over 2MS within comparable running time.
Proof. We show an algorithm B mounting a chosen-
message attack against of a 2-party multi-signature scheme
2MS = (PGMS, KgMS, SignMS, VerifyMS) in the registered pub-
lic key model by interacting with an adversary F against
. Algorithm B faces a chal-
the update security of FSS-UU
lenger C that hands her a public key ˜pk for 2MS.
At any time, B is allowed to register arbitrary public keys
⊕
⊕
pk and is then requested to reveal the matching private key
sk. She may also trigger a joint execution of the signing
protocol with C, the latter running the 2-party protocol on
behalf of the honest signer ˜pk while she plays the role of the
(registered) corrupt signer pk.
F’s input consists of a public key for the iterated sum com-
position over T periods. The latter is generated following
almost exactly the speciﬁcation of the scheme. Namely, B
recursively runs Keygen but deﬁnes pk(cid:2)
= (cp, ˜pk) using her
own challenge public key ˜pk instead of generating a key pair
( ˜sk, ˜pk) from a second factor DecK. In other words, at the
ﬁrst run of Keygen, B skips line 5 of algorithm Keygen and
deﬁnes pk(cid:2)
using her own input at line 6. Since DecK only
comes into play at the initial execution of Keygen, recursive
calls of the latter go through as in the real game. When-
ever B needs to create a new key pair (sk, pk) for the 2MS
scheme, she registers it in the game that she plays against
her own challenger C and discloses sk. The whole key gen-
eration entails the registration of log T key pairs for 2MS.
Eventually, the initial “encrypted” private key EncSK0 for
is obtained and given to F who starts
period 0 in FSS-UU
issuing queries.
Update queries: whenever F wants to move to the next
time period, B simply runs the update algorithm that does
not need the second factor DecK (which is unknown to B).
All “encrypted” private key elements that ever have to be
actually stored by a signer (that is, all keys but the private
key ˜sk that matches ˜pk and is presumably derived from the
second factor) are computable by B that can perfectly an-
swer update queries.
Signing queries: at any period t, F may query her chal-
lenger B to sign a message M . To answer such a request, B
triggers the recursive signing algorithm and follows its spec-
iﬁcation before the last step of the recursion (when T = 1).
Upon entering the latter stage, the “encrypted” private key
has the shape EncSK = (cid:4)sk, 0, pk, ε(cid:5) where (sk, pk) is a valid
key pair for 2MS and must have been registered to C by
construction. Since (sk, pk) was registered, B may query
her challenger C to obtain a multi-signature σ(cid:2)
on M w.r.t
public keys pk and ˜pk. The triple (σ(cid:2), pk, ε) is set as the re-
sult of the ﬁnal call in the recursion and allows completing
the signature generation.
Forgery: eventually, a successful adversary F is expected
to forge a valid signature σ(cid:2) = ((cid:4)σ(cid:2)(cid:2), pk(cid:2)
1(cid:5), t(cid:2)) on a mes-
sage M (cid:2) for a period t(cid:2) during which M (cid:2) was not the input
of a signing query. Then, B executes the recursive veri-
ﬁcation and key checking algorithms until reaching the ﬁ-
nal stage T = 1 where the “encrypted” key has the shape
EncSK = (cid:4)sk, 0, pk, ε(cid:5). Note that, unless a collision is found
on the hash chain ending with H(pk(cid:2)
1) (which is part
), the pair (sk, pk) must have
of the public key of FSS-UU
been registered by construction. Since F did not query M (cid:2)
for signature at period t(cid:2), B did not query C for obtaining
a 2-party multi-signature on the augmented message M (cid:2)||t(cid:2)
(recall that the signing algorithm appends the period num-
ber to the message at the initial recursion stage). It follows
that B wins against C by outputting M (cid:2)||t(cid:2) along with the
pair (sk, pk) and the 2-party signature embedded in the in-
ner part of σ(cid:2)(cid:2)
0, pk(cid:2)
0, pk(cid:2)
⊕
.
Theorem 4.2. If the 2MS scheme is secure against chosen-
message attacks, the FSS-UU
construction provides for-
⊕
⊕
ward security. Namely, for an instantiation of FSS-UU
over T periods, an adversary F reaching advantage AdvFS(F)
within running time t after qs and qu signing and update
queries implies a chosen-message attacker with advantage
AdvFS(F)/T over 2MS within time t(cid:2) ≤ t + qstMS
Sng + qutMS
Kg ,
where tMS
Kg respectively denote the time complexities
of signing and key generation algorithms in 2MS.
Sng and tMS
Proof. The result almost directly follows from the re-
sult of Malkin et al. for the sum composition (i.e. theorem
3 in [28]) since a FSS-UU scheme is nothing but a tradi-
tional forward-secure signature when the adversary gets to
know the second factor DecK as in the game of deﬁnition 1.
However, the construction combines 2-party multi-signature
schemes (instead of regular digital signatures) at the bottom
of the recursion. To be complete, we must prove that 2-
party multi-signatures indeed implement single-period FSS-
UU schemes at the last step of the signing algorithm.
An adversary F against the forward security of a FSS-
UU with one period is given the public key PK and the
second factor DecK but is not allowed to make a break-in
query. We thus consider a forger B against a 2MS scheme
that receives a public key pkMS from her challenger C. Her
goal is to use F to break the security of 2MS. At the be-
ginning of the game that she plays against C, she registers
the key pair ( ˜sk, ˜pk) ← KgMS(DecK) for a randomly cho-
sen second factor DecK. She then deﬁnes pk(cid:2)
= (cp, ˜pk)
(where cp are public parameters of 2MS obtained from C)
and starts F on input of a public key PK = (pk(cid:2), H(pkMS, ε))
and DecK. The “encrypted private key” is implicitly deﬁned
as EncSK = (cid:4)skMS, 0, pkMS, ε(cid:5) (but B does not know skMS).
Whenever F asks for a signature on a message M , B
queries her own challenger C to obtain a 2-party signature
σ(cid:2)
on M for signers pkMS and ˜pk. Note that she can run the
joint signing protocol on behalf of the latter since she knows
, she hands the signature (cid:4)σ(cid:2), pkMS, ε(cid:5)
˜sk. Having received σ(cid:2)
back to F.
After polynomially many queries, F outputs a forgery
(cid:4)σ(cid:2)(cid:2), pk(cid:2)MS, ε(cid:5) for a new message M (cid:2). Unless H is not
collision-resistant, we must have pk(cid:2)MS = pkMS and σ(cid:2)(cid:2)
must
be a valid multi-signature on M (cid:2) for public keys pkMS and
˜pk. It obviously follows that B succeeds whenever F does.
The result and claimed bounds directly derive from theo-
rem 3 in [28], which implies that the sum of two FSS schemes
with T periods yiels a FSS schemes with 2T stages.
We note that theorems 4.1 and 4.2 remain true if FSS-
⊕
is applied to a multi-signature scheme in the model of
UU
[7] where forgers are not required to register public keys that
they create for themselves or to prove the knowledge of their
private key. Any secure multi-signature in the model of [7]
is indeed also secure in the registered public key model.
⊕
However, considering the latter allows us to securely in-
stantiate FSS-UU
with Boldyreva’s short multi-signature
[9], that extends Boneh-Lynn-Shacahm signatures [11], or
the standard model scheme of Lu et al.
[27], which builds
on the Waters signature [36].
In the latter case, we obtain an interesting alternative to
[12] in the standard model. It indeed enjoys a security rest-
ing on the classical Diﬃe-Hellman assumption in bilinear
map groups instead of the related assumption used in [12],
the strength of which logarithmically depends on the num-
ber of periods (that only aﬀects the reduction cost here).
Veriﬁcation is also faster than in [12] since it entails two
bilinear map evaluations (instead of 3). The disadvantages
are the length of signatures, that contain log T hash values2,
and the slower key generation (which is linear in T ).
4.1.3 Efﬁciency Tradeoffs with Hybrid Schemes
The above sum composition admits several eﬃciency trade-
oﬀs if we combine it with appropriate concrete FSS-UU
schemes with more than one time period at the ﬁnal stage
of the iterated composition.
For instance, we can obtain signatures of sub-logarithmic
size at the expense of a logarithmic complexity for sign-
ing and verifying. This is possible using the following ex-
tension of the Abdalla-Reyzin number theoretic scheme [2].
The recursive key generation algorithm initially generates
a Blum integer N = pq (i.e. a product of large primes
p, q such that p = q = 3 mod 4) and discards its factoriza-
tion. It also chooses a second factor DecK R← Z
∗
N and sets
˜pk = DecK2(cid:2)(s+1)
= (N, ˜pk) where s = log T
and (cid:5) is a security parameter. We have to replace multi-
signatures at recursive ﬁnal steps with an instance of the
following FSS-UU scheme inspired from the one suggested
in section 6 of [12].
mod N and pk(cid:2)
Keygen((cid:5), r, s) : randomly choose S0
∗
N and compute
mod N . Set EncSK = (cid:4)S0, 0, U, ε(cid:5) and
R← Z
U = S2(cid:2)(s+1)
PK = (pk(cid:2), H(U, ε)).
0
CheckKey(t, s, EncSK, PK) : parse EncSK as (cid:4)St, 0, U, ε(cid:5). Re-
turn (cid:2) if U = S2(cid:2)(s+1−t)
t
mod N and ⊥ otherwise.
Update(t, s, EncSK, PK) : parse EncSK as (cid:4)St, 0, U, ε(cid:5). Set
St+1 = S2(cid:2)
t mod N and return (cid:4)St+1, 0, U, ε(cid:5).
Sign(t, s, EncSK, DecK, M, PK) : parse EncSK as (cid:4)St, 0, U, ε(cid:5)
and conduct the following steps.
1. Pick R R← Z
2. Compute ω = H(cid:2)
N and set Y ← R2(cid:2)(s+1−t)
∗
(Y, M ) ∈ {0, 1}(cid:5) using a random
mod N .
Verify(t, s, PK, M, σ) : parse σ as (cid:4)σ(cid:2)
= (ω, Z), U, ε(cid:5) and PK
as (pk(cid:2), H(U, ε)) where pk(cid:2)
1. Compute Y (cid:2) ← Z2(cid:2)(s+1−t) · ( ˜pk · U )
2. Return (cid:2) if ω = H(cid:2)
−ω mod N .
(Y (cid:2), M ) and ⊥ otherwise.
= (N, ˜pk).
Note that hashing the local index t along with the pair
(Y, M ) to generate the Fiat-Shamir-like challenge using H(cid:2)
is useless since the global period number was already ap-
pended to M at the ﬁrst recursive call to signing algorithm.
With s = log T , the above concrete scheme can be plugged
into the sum composition applied log T − log log T times
so as to obtain a hybrid concrete/generic scheme over T
periods with logarithmic complexity for signing and verify-
ing while signatures contain O(log T − log log T ) hash val-
ues. Signing and veriﬁcation algorithms can be accelerated
2To minimize signature sizes, long public keys of [27, 36]
should be included in the public key of the FSS-UU scheme.
In this case, the public key component to be included in
each signature only consists of one group element.
.
oracle H(cid:2)
3. Unblind the key as S(cid:2)
compute Z ← R · S(cid:2)ω