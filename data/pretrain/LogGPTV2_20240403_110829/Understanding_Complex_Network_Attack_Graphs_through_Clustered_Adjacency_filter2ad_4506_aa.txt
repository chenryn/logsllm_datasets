title:Understanding Complex Network Attack Graphs through Clustered Adjacency
Matrices
author:Steven Noel and
Sushil Jajodia
Understanding Complex Network Attack 
Graphs through Clustered Adjacency Matrices 
Steven Noel and Sushil Jajodia 
Center for Secure Information Systems, George Mason University 
{snoel, jajodia}@gmu.edu 
Abstract 
We  apply  adjacency  matrix  clustering  to  network 
attack  graphs  for  attack  correlation,  prediction,  and 
hypothesizing.    We  self-multiply  the  clustered  adjacency 
matrices to show attacker reachability across the network 
for  a  given  number  of  attack  steps,  culminating  in 
transitive  closure  for  attack  prediction  over  all  possible 
number  of  steps.    This  reachability  analysis  provides  a 
concise  summary  of  the  impact  of  network  configuration 
changes  on  the  attack  graph.    Using  our  framework,  we 
also place intrusion alarms in the context of vulnerability-
based  attack  graphs,  so  that  false  alarms  become 
apparent  and  missed  detections  can  be  inferred.    We 
introduce a graphical technique that shows multiple-step 
attacks  by  matching  rows  and  columns  of  the  clustered 
adjacency matrix.  This allows attack impact/responses to 
be  identified  and  prioritized  according  to  the  number  of 
attack steps to victim machines, and allows attack origins 
to  be  determined. 
  Our  techniques  have  quadratic 
complexity in the size of the attack graph. 
1.  Introduction 
recently 
The  utility  of  organizing  combinations  of  network 
attacks as  graphs is  well established.  Traditionally, such 
attack graphs have been formed manually by security red 
teams  (penetration  testers).    But  significant  progress  has 
been  made 
in  generating  attack  graphs 
automatically,  based  on  models  of  network  security 
conditions  and  attacker  exploits,  created  from  network 
scans,  vulnerability  databases,  etc.    By  representing 
dependencies  among  attacker  exploits 
than 
explicitly  enumerating  attack  states,  exponential  graph 
complexity can be avoided. 
rather 
In  the  current  state  of  practice,  it  is  thus  possible  to 
efficiently  compute  attack  graphs  for  realistic  networks.  
But the resulting  graphs can  still pose serious challenges 
for  human  comprehension.    This  is  compounded  by  the 
fact that attack graphs are usually communicated by literal 
drawings  of  graph  vertices  and  edges.    While  graph 
drawing  has been studied extensively, the problem is ill-
posed  in  the  sense  that  many  possibilities  exist  for  what 
constitutes a good graph drawing.   Also,  finding optimal 
placement  of  graph  vertices  according  to  many  of  the 
desired criteria is  NP-complete.  For the relatively dense 
attack graphs often found in practice (e.g., within a trusted 
internal  network),  graph  drawing  techniques  are  largely 
ineffective,  producing  overly  cluttered  drawings  for 
graphs of larger than moderate size. 
In  this  paper,  we  introduce  techniques  to  help  make 
complex  attack  graphs  more  understandable,  and  apply 
these  techniques  to  the  correlation,  prediction,  and 
hypothesis  of  attacks.    Our  approach  reveals  graph 
regularities,  making 
as 
bottlenecks  and  densely-connected  subgraphs  apparent.  
We extend an existing graph-clustering technique to show 
multi-step  reachability  across  the  network,  the  impact  of 
network  configuration  changes,  and  the  analysis  of 
intrusion  alarms  within 
the  context  of  network 
vulnerabilities. 
important 
features 
such 
Rather  than  relying  on  literal  drawings  of  attack 
graphs,  we  visualize  the  corresponding  attack  graph 
adjacency  matrix.    The  adjacency  matrix  represents  each 
graph edge with a single matrix element, as opposed to a 
drawn  line.    Graph  vertices,  rather  than  being  drawn 
explicitly,  are  implicitly  represented  as  matrix  rows  and 
columns.    The  adjacency  matrix  avoids  the  typical  edge 
clutter  of  drawn  graphs,  not  only  for  very  large  graphs, 
but also for smaller ones. 
is 
a 
The 
adjacency  matrix 
concise  graph 
representation,  but  alone  it  can  be  insufficient.    That  is, 
without the proper ordering of matrix rows and columns, 
the  underlying  attack  graph  structure  is  not  necessarily 
apparent.    We  therefore  apply  an  information-theoretic 
clustering technique [1] that reorders the adjacency matrix 
so 
that  blocks  of  similarly-connected  attack  graph 
elements  emerge.    The  clustering  technique  is  fully 
automatic,  parameter-free,  and  scales  linearly  with  graph 
size. 
Elements  of  the  attack  graph  adjacency  matrix 
represent  all  one-step  attacks.    We  extend  this  by 
computing  higher  powers  of  the  adjacency  matrix,  to 
represent  multiple-step  attacks.    That  is,  the  adjacency 
matrix of power k shows all attacker reachability within k 
steps  of  the  attack.    Further,  we  combine  multiple 
adjacency  matrix  powers  into  a  single  matrix  that  shows 
the minimum number of attack steps between each pair of 
attack  graph  elements.    Alternatively,  we  summarize 
reachability  over  all  number  of  steps,  e.g.,  transitive 
closure.    For  these  multi-step  adjacency  matrices,  we 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 Â© 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:28 UTC from IEEE Xplore.  Restrictions apply. 
retain  the  reordering  induced  by  clustering,  so  that 
patterns in the attack graph structure are still apparent. 
The  general  approach  of  clustering  attack  graph 
adjacency  matrices  (and  raising  them  to  higher  powers) 
provides  a  framework  for  correlating,  predicting,  and 
hypothesizing  about  network  attacks.    The  approach 
applies  to  general  attack  graphs,  regardless  of  what  the 
particular  graph  vertices  and  edges  represent.    For 
example, such attack graphs could have been formed from 
models  of  network  vulnerability,  or 
from  causal 
relationships  among  intrusion  detection  events.    Attack 
graph  vertices  could  also  represent  aggregated  sub-
graphs,  such  as  aggregation  by  machines  and  exploits 
between them.  Overall, the techniques we describe have 
quadratic  complexity  in  the  size  of  the  attack  graph,  for 
scalability to larger networks. 
the  patterns  of  attack  clear,  especially 
We  apply  our  general  approach  to  a  vulnerability-
based attack graph, in  which  the graph  vertices (network 
security  conditions  and  attacker  exploits)  have  been 
aggregated to machines and exploits between them.  This 
makes 
in 
comparison  to  the  corresponding  literally  drawn  graph.  
We  show  how  this  representation  can  provide  a  concise 
summary  of  changes  in  the  attack  graph  resulting  from 
changes  in  the  network  configuration,  e.g.,  for  what-if 
analysis  of  planned  network  changes  or  impact  of  real 
network changes. 
We  also  place  intrusion  alarms  in  the  context  of  a 
vulnerability-based  multi-step  attack  graph  reachability 
matrix.  In this way, false alarms become apparent  when 
they  occur  for  pairs  of  machines  not  reachable  by  the 
attacker,  based  on  the  network  configuration.    Also,  one 
infer  missed  detections  from  alarms  between 
can 
machines 
that  require  multiple  attack  steps  before 
compromise can occur. 
We  introduce  a  graphical  technique  for  predicting 
attack  steps  (forward  and  backward)  on  the  adjacency 
matrix.    Here,  we  project  to  the  main  diagonal  of  the 
matrix  to  match  rows  and  columns  between  each  attack 
step.  This technique allows one to step forward from an 
attack, so that the impact of  an attack can be determined 
and  candidate  attack  responses  can  be  identified.    Using 
this  technique  with  the  multi-step  reachability  matrix 
allows  candidate  attack  responses 
to  be  prioritized 
according to the number of steps required to reach victim 
machines.  Alternatively, one can step backward from an 
attack to predict its origin. 
In  the  next  section,  we  review  related  work  in  this 
area.  In Section 2, we describe our general approach for 
clustered  attack  graph  adjacency  matrices,  including 
raising them to higher powers for multi-step reachability.  
Section  4  applies  our  approach  in  a  number  of  ways  for 
network  attack  protection,  detection,  and  response.    In 
Section 5, we summarize our work and draw conclusions. 
2.  Related Work 
it  possible 
Recent advances in automatic attack graph generation 
[2][3][4][5][6][7][8][9]  have  made 
to 
efficiently  compute  attack  graphs  for  realistic  networks.  
These  approaches  avoid  the  state  explosion  problem  by 
representing  dependencies  among  state  transitions  (i.e., 
attacker  exploits),  rather  than  explicitly  enumerating 
states.    The  resulting  exploit  dependency  graphs  have 
quadratic  rather  than  exponential  complexity,  and  still 
contain  the  same  information  (implicitly)  as  explicitly 
enumerated state graphs. 
Still,  when  attack  graphs  are  generated  for  realistic 
networks,  using  comprehensive  sets  of  modeled  attacker 
exploits,  the  resulting  attack  graphs  can  be  very  large.  
Previous  approaches  generally  use  graph  drawing 
algorithms  [10],  in  which  vertices  and  edges  between 
them  are  drawn  according  to  particular  aesthetic  criteria.  
While  large  graphs  have  been  successfully  drawn,  these 
have  generally  been  relatively  sparsely  connected.    But 
network attack graphs can be both large and exhibit very 
dense connectivity.  For example, for only 200 machines, 
with each machine having 4 vulnerable services, within a 
trusted  internal  network  with  unrestricted  connectivity, 
the resulting fully-connected attack graph has (4x200)2 = 
640,000 edges. 
An approach has been proposed for managing attack 
graph  complexity  through  hierarchical  aggregation  [4], 
based on the formalism of clustered graphs [11].  The idea 
is  to  collapse  subsets  of  the  attack  graph  into  single 
aggregate  vertices,  and  allow  interactive  de-aggregation.  
A disadvantage of this approach is that lower-level details 
of  the  attack  graph  are  hidden  until  they  are  de-
aggregated, and the process of interactive de-aggregation 
is  potentially  tedious.    In  contrast,  in  our  approach,  all 
graph details are visible in a single view. 
Also,  a  critical  abstraction  for  the  hierarchical 
aggregation  approach  is  the  protection  domain,  i.e.,  a 
fully-connected subgraph (clique) of the attack graph.  To 
avoid  the  expensive  clique  detection  operation,  this 
approach  requires  prior  knowledge  of  which  sets  of 
machines  form  protection  domains,  and  in  practice  this 
knowledge  may  not  be  available.    In  our  approach, 
protection  domains  (or  even  approximation  of  them)  are 
formed automatically, without prior knowledge. 
Our approach applies information-theoretic clustering 
to the attack graph adjacency matrix [1].  This clustering 
rearranges  rows  and  columns  of  the  adjacency  matrix  to 
form  homogeneous  groups.    In  this  way,  patterns  of 
common  connectivity  within  the  attack  graph  are  clear, 
and  groups  (attack  graph  subsets)  can  be  considered  as 
single units.  This clustering technique is fully automatic, 
is free of parameters, and scales linearly with graph size. 
There have been approaches that view network traffic 
in the form of a matrix [12][13], where rows and columns 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 Â© 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:28 UTC from IEEE Xplore.  Restrictions apply. 
to 
employ 
  Also, 
clustering 
might  be  subnets,  IP  addresses,  ports,  etc.    But  these 
approaches  do  not 
find 
homogeneous groups within the visualized matrices as we 
do. 
they  generally  consider  attack  events 
independently  of  one  another,  as  opposed  to  looking  at 
sequences  of  events.    In  particular,  they  include  none  of 
the  multi-step  analyses  in  our  approach,  e.g.,  raising 
matrices  to  higher  powers  for  multi-step  reachability, 
tracing  multiple  attack  steps  by  projecting  to  the  main 
matrix diagonal, or predicting attack origin and impact. 
The  multi-step  reachability  matrix  in  our  approach 
corresponds  to  the  attack  graph  exploit  distances  in  [3], 
although  those  distances  are  computed  through  graph 
traversal  as  opposed 
to  our  matrix  multiplication.  
However, in the previous approach, exploit distances are 
not  clustered  or  visualized;  rather,  they  are  used  to 
correlate  intrusion  detection  alarms.    While  the  previous 
approach considers multiple steps to handle missing alerts 
and build attack scenarios, it does not predict attack origin 
and intent as in our approach. 
3.  General Approach 
In this section, we describe our general approach for 
applying  adjacency  matrices  to  network  attack  graphs.  
Sub-Section 3.1 describes how adjacency matrices can be 
created  for  various  types  of  attack  graphs.    In  Sub-
Section 3.2, we describe a matrix clustering algorithm that 
finds  homogenous  groups  in  the  attack  graph  adjacency 
matrix.  Sub-Section 3.3 then describes how the (possibly 
clustered)  attack  graph  adjacency  matrix  can  be 
transformed 
  Sub-
Section 3.4 then describes how detected intrusions can be 
placed in the context of attack graph reachability matrices 
for predicting attack origin and impact. 
to  represent  multi-step  attacks. 
3.1  Attack Graph Adjacency Matrix 
Our  approach  begins  with  the  creation  of  a  network 
attack  graph,  through  some  means,  based  on  some 
representation  of  network  attacks.    There  are  really  no 
particular  restrictions  on  the  exact  form  of  the  attack 
graph for our approach to apply.  For example, the graph 
could be based on hypothetical attacker exploits generated 
from  knowledge  of  vulnerabilities,  network  connectivity, 
etc., as in [2][6][7][8].  Or, the graph could be constructed 
from  causal  relationships  among  intrusion  detection 
system alarms, as in [5][9].  We can also handle intrusion 
alarms  placed  within  the  context  of  vulnerability-based 
attack graphs, as was done (implicitly) in [3]. 
It  was  pointed  out  in  [3]  that  attack  graphs  can  be 
created  with  specified  starting  and  goal  points  (to 
constrain the graph to regions of interest), or with starting 
and  goal  points  unspecified  (e.g.,  for  intrusion  alarm 
correlation).  In [4], it was pointed out that there are dual 
attack  graph  representations  in  which  either  network 
security conditions or attacker exploits could be the graph 
vertices,  with  the  other  being  the  graph  edges.    Also  in 
[4],  subgraphs  of  the  attack  graph  were  aggregated  to 
single  vertices.    Our  approach  handles  all  of  these 
situations. 
Consider a simple example in where there is a set of 
network  machines  having  no  connectivity  limitations 
among  them,  so  that  the  attack  graph  is  fully  connected.  
For such a set of 200 machines, with just one vulnerable 
network service on each machine (vertex), there are 2002 
= 40,000 exploits (edges) that must be displayed.  If such 
a graph were drawn with lines for edges, it would not be 
apparent from the resulting mass of lines that this indeed 
represents  a  fully  connected  attack  graph.    We  therefore 
employ an adjacency  matrix  visualization, in  which each 
attack  graph  edge  is  represented  by  a  matrix  element 
rather than by a drawn line.  In our example of 200 fully 
connected  machines  each  having  one  vulnerable  service, 
the attack graph adjacency matrix would simply be a 200-
square matrix of all ones. 
Formally,  for  n  vertices  in  the  attack  graph,  the 
adjacency  matrix A is an n Ã n matrix  where element ai,j 
of  A  indicates  the  presence  of  an  edge  from  vertex  i  to 
vertex  j.    In  attack  graphs,  it  is  possible  that  there  are 
multiple edges between a pair of vertices (mathematically, 
a multigraph), such as multiple conditions between a pair 
of  exploits  or  multiple  exploits  between  a  pair  of 
machines.  In such cases, we can either record the actual 
number of edges, or simply record the presence (0, 1) of 
at least one edge.  The adjacency matrix records only the 
presence of an edge, and not its semantics, which can be 
considered in follow-on analysis. 
As  a  data  structure,  an  alternative  to  adjacency 
matrices are adjacency lists.  For each vertex in the graph, 
the adjacency list keeps all other vertices to which it has 
an  edge.    Thus,  adjacency  lists  use  no  space  to  record 
edges  that  are  not  present.    There  are  tradeoffs  (in  both 
space  and  time)  between  adjacency  matrices  and  lists, 
depending  on  graph  sparseness  and 
the  particular 
operations  required.    Our  implementation  uses  Matlab 
sparse  matrices 
internal 
computations, 
adjacency  matrix 
the 
representation for visual displays. 
(adjacency 
reserving 
lists) 
for 
3.2  Adjacency Matrix Clustering 
The rows and columns of an adjacency matrix could 
be placed in any order,  without affecting the structure of 
the attack graph the matrix represents.  But orderings that 
capture 
in  graph  structure  are  clearly 
desirable.    In  particular,  we  seek  orderings  that  tend  to 
cluster  graph  vertices  (adjacency  matrix  rows  and 
columns)  by  common  edges  (non-zero  matrix  elements).  
This  would  allow  us  to  treat  such  clusters  of  common 
regularities 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 Â© 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:28 UTC from IEEE Xplore.  Restrictions apply. 
edges  as  a  single  unit  as  we  analyze  the  attack  graph 
(adjacency  matrix).    In  some  cases,  there  might  be 
network attributes that allow us to order adjacency matrix 
rows  and  columns  into  clusters  of  common  attack  graph 
edges.    For  example,  we  might  sort  machine  vertices 
according  to  IP  address,  so  that  machines  in  the  same 
subnet  appear  in  consecutive  rows  and  columns  of  the 
adjacency matrix.   Unrestricted connectivity within each 
subnet might then cause fully-connected (all ones) blocks 
of elements on the main diagonal. 
But in general, we cannot rely on a priori ordering of 
rows  and  columns  to  place  the  adjacency  matrix  into 
meaningful  clusters.    We  therefore  apply  a  particular 
matrix  clustering  algorithm  [1]  that  is  designed  to  form 
homogeneous rectangular blocks of matrix elements (row 
and column intersections).  Here, homogeneity means that 
within  a  block,  there  is  a  similar  pattern  of  attack  graph 
edges  (adjacency  matrix  elements).    This  clustering 
algorithm requires no user intervention, has no parameters 
that need tuning, and scales linearly with problem size. 
This algorithm  finds the  number of row and column 
clusters, along  with the assignment of rows and columns 
to  those  clusters,  such  that  the  clusters  form  regions  of 
high  and  low  densities.    Numbers  of  clusters  and  cluster 
assignments  provide  an  information-theoretic  measure  of 
cluster  optimality.    This  is  based  on  ideas  from  data 
compression, including the Minimum Description Length 
principle [14], in which regularity in the data can be used 
to compress it (describe it in fewer symbols).  Intuitively, 
one can say that the more we compress the data, the better 
we understand it, in the sense that we have better captured 
its regularities. 
3.3  Multi-Step Reachability 
The  adjacency  matrix  shows  the  presence  of  each 
edge  in  a  network  attack  graph.    Taken  directly,  the 
adjacency matrix shows every possible single-step attack.  
In  other  words,  the  adjacency  matrix  shows  attacker 
reachability within one attack step.  As we describe later, 
one  can  navigate  the  adjacency  matrix  by  iteratively 
matching  rows  and  columns  to  follow  multiple  attack 
steps.  But as an alternative, we raise the adjacency matrix 
to  higher  powers,  which  shows  multi-step  attacker 
reachability at a glance. 
For  a  square  (n  Ã  n)  adjacency  matrix  A  and  a 
positive integer p, then Ap is A raised to the power p, i.e., 
A  multiplied  by  itself  p  â  1  times.    Here,  matrix 
multiplication is in the usual sense, i.e., an element of A2 
is 
A2
(cid:7)
(cid:5)
(cid:6)
(cid:4)
=(cid:2)
(cid:3)
ij
(cid:1)