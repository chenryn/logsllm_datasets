# Non-Volatile Memory (NVM) Logging
## Presentation by Takashi HORIKAWA, Ph.D.
### Date: 2016.05.20

---

### 1. About the Speaker

**Name:**  
Takashi HORIKAWA, Ph.D.

**Research Interests:**  
- Performance evaluation of computer and communication systems
- Performance engineering of IT systems
- Focus on CPU scalability

**Selected Publications:**
- "Latch-free data structures for DBMS: design, implementation, and evaluation," SIGMOD '13
- "An Unexpected Scalability Bottleneck in a DBMS: A Hidden Pitfall in Implementing Mutual Exclusion," PDCS '11
- "An approach for scalability-bottleneck solution: identification and elimination of scalability bottlenecks in a DBMS," ICPE '11
- "A method for analysis and solution of scalability bottleneck in DBMS," SoICT '10

---

### 2. Contents
- Introduction
- Problems to be Solved
- Implementation
- Evaluation
- Technical Trends
- Conclusion

---

### 3. Introduction

#### Write-Ahead Logging (WAL)
- **Purpose:** Ensures transaction durability
- **Process:**
  - Worker processes handle transactions
  - XLog records are written to memory
  - Asynchronous or synchronous writes to storage

#### Synchronous vs. Asynchronous Commit
- **Synchronous Commit:**
  - Transaction is durable before client notification
  - Slower response time but ensures durability
- **Asynchronous Commit:**
  - Client is notified before the transaction is durable
  - Faster response time but no guarantee of durability

#### Performance Difference
- **Benchmark (PGBENCH):**
  - Asynchronous commit shows significantly better performance
  - Disk-drive cache settings affect performance

#### Fundamental Idea for NVM Logging
- Use non-volatile memory (NVM) to store XLog records
- Enables asynchronous writes with durability guarantees

#### Byte vs. Block Addressable NVM
- **Byte Addressable NVM:**
  - Accessed in units of bytes
  - Expected to be widely used
- **Block Addressable NVM:**
  - Accessed in blocks
  - Commonly used in current storage solutions

---

### 4. Problems to be Solved

- **Partial Writes:** Incomplete XLog records due to system crashes
- **Unreachable XLog Records:** Overwritten records due to concurrent writes
- **CPU Cache Effects:** Inconsistent data due to write-back policies

---

### 5. Implementation

#### Prototype Architecture
- **PostgreSQL 9.6devel:**
  - Modified shared buffer and WAL buffer
  - New kernel module for pseudo NVM

#### Preventing Partial Writes
- Reserve buffer area
- Write XLog record data and then length field

#### Preventing Unreachable XLog Records
- Wait control mechanism to ensure sequential writes

#### Write-Combined Mode
- Reduces cache effects by using write-through variations

#### GUC Parameter for NVM Logging
- `PRAM_FILE_NAME` enables NVM logging
- Configured in `postgresql.conf`

#### Accessing NVM at Recovery
- XLogReader accesses NVM for recovery

#### Wrap Around of WAL Buffer
- Logical and physical views of WAL buffer management

---

### 6. Evaluation

#### Experimental Setup
- **DB Server:**
  - CPU: E5-2650 v2 x 2 (16 cores)
  - Memory: 64GB
  - Storage: RAID0 SSDs and HDs
- **Client:**
  - CPU: E7420 x 4 (16 cores)
  - Memory: 8GB
- **Network:**
  - GB Ethernet

#### Performance
- **PGBENCH and DBT-2 Benchmarks:**
  - NVM logging shows performance improvement
  - Comparable to asynchronous commit, better than synchronous commit

#### Durability Test
- Fault injection test confirms durability
- Sync commit and NVM logging ensure durability, async commit does not

#### Write Amplification Reduction
- NVM logging reduces the number of writes, beneficial for SSD lifespan

---

### 7. Technical Trends

- **NVDIMM in DB Servers:**
  - Standardization efforts by JEDEC and SNIA
  - HP ProLiant XL230a Server supports NVDIMM
- **Programming Support for NVM:**
  - pmem.io library for Linux
  - Focus on persistent memory management

---

### 8. Conclusion

- **NVM is becoming mainstream:**
  - NVDIMM products available
  - Servers equipped with NVDIMM
- **Benefits of NVM Logging:**
  - Performance improvement
  - Durability assurance
  - Reduced write amplification

---

### 9. Future Work

- Integrate NVM logging into mainline PostgreSQL
- Adhere to NVM access standards (e.g., libpmem)
- Test with real NVM hardware

---

### 10. Thank You

Thank you for listening!

---