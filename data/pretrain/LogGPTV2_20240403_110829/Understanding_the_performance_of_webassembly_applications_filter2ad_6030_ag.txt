[55] Kai Lei, Yining Ma, and Zhi Tan. 2014. Performance comparison and evaluation
of web development technologies in php, python, and node. js. In 2014 IEEE 17th
international conference on computational science and engineering. IEEE, 661–668.
[56] Zhiming Liu, Nafees Qamar, and Jie Qian. 2013. A quantitative analysis of
the performance and scalability of de-identification tools for medical data. In
International Symposium on Foundations of Health Informatics Engineering and
Systems. Springer, 274–289.
[57] Goran Martinovic, Josip Balen, and Bojan Cukic. 2012. Performance Evaluation
of Recent Windows Operating Systems. J. UCS 18, 2 (2012), 218–263.
Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/Memory
[58] MDN. 2020. WebAssembly.Memory(). https://developer.mozilla.org/en-US/docs/
[59] MDN.
2021.
Number.MAX-SAFE-INTEGER -
JavaScript: MDN.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/
Global_Objects/Number/MAX_SAFE_INTEGER
[60] Tianhui Meng, Katinka Wolter, and Qiushi Wang. 2015. Security and performance
tradeoff analysis of mobile offloading systems under timing attacks. In European
Understanding the Performance of WebAssembly Applications
IMC ’21, November 2–4, 2021, Virtual Event, USA
[61] Microsoft. 2020. Download New Microsoft Edge Browser: Microsoft. https:
Workshop on Performance Engineering. Springer, 32–46.
//www.microsoft.com/en-us/edge
[62] Mnater. 2021. Mnater/Hyphenator. https://github.com/mnater/Hyphenator
[63] Mnater. 2021. Mnater/Hyphenator/Hyphenopoly-Loader.js. https://github.com/
mnater/Hyphenator/blob/master/Hyphenator_Loader.js
[64] Mnater. 2021. Mnater/Hyphenopoly. https://github.com/mnater/Hyphenopoly
https://
[65] Mnater. 2021. Mnater/Hyphenopoly/Hyphenopoly-Loader.js.
github.com/mnater/Hyphenopoly/blob/master/Hyphenopoly_Loader.js
[66] Mozilla. 2020. Firefox: Internet for people, not profit. https://www.mozilla.org/
en-US/
[67] Mozilla. 2020. WebAssembly Memory. https://developer.mozilla.org/en-US/
docs/Web/JavaScript/Reference/Global_objects/WebAssembly/Memory
[68] Mozilla. 2021. Geckoview. https://mozilla.github.io/geckoview/
[69] Mozilla. 2021. SpiderMonkey JavaScript/WebAssembly Engine.
https://
spidermonkey.dev/docs/
[70] Marius Musch, Christian Wressnegger, Martin Johns, and Konrad Rieck. 2019.
New Kid on the Web: A Study on the Prevalence of WebAssembly in the Wild. In
International Conference on Detection of Intrusions and Malware, and Vulnerability
Assessment. Springer, 23–42.
[71] Shravan Narayan, Craig Disselkoen, Daniel Moghimi, Sunjay Cauligi, Evan John-
son, Zhao Gang, Anjo Vahldiek-Oberwagner, Ravi Sahita, Hovav Shacham, Dean
Tullsen, and Deian Stefan. 2021. Swivel: Hardening WebAssembly against Spectre.
In 30th USENIX Security Symposium (USENIX Security 21). USENIX Association,
1433–1450. https://www.usenix.org/conference/usenixsecurity21/presentation/
narayan
[72] Shravan Narayan, Tal Garfinkel, Sorin Lerner, Hovav Shacham, and Deian Stefan.
2019. Gobi: WebAssembly as a practical path to library sandboxing. arXiv preprint
arXiv:1912.02285 (2019).
https:
//github.com/rustwasm/wasm-pack/issues/558
[73] Wasm pack contributors. 2019. Wasm Speed Are No Faster Than JS.
[74] Senthil Padmanabhan and Pranav Jha. 2020. WebAssembly at eBay: A Real-World
Use Case. https://tech.ebayinc.com/engineering/webassembly-at-ebay-a-real-
world-use-case/
[75] Louis-Noël Pouchet, U Bondugula, and T Yuki. 2016. PolyBench/C 4.2. Polyhedral
Benchmark Suite.
[76] Raghu Ramakrishnan and Arvinder Kaur. 2020. An empirical comparison of
predictive models for web page performance. Information and Software Technology
(2020), 106307.
[77] Alan Romano, Xinyue Liu, Yonghwi Kwon, and Weihang Wang. 2021. An Empiri-
cal Study of Bugs in WebAssembly Compilers. In 2021 36th IEEE/ACM International
Conference on Automated Software Engineering (ASE).
[78] Alan Romano and Weihang Wang. 2020. WASim: Understanding WebAssembly
Applications through Classification. In 2020 35th IEEE/ACM International Con-
ference on Automated Software Engineering (ASE). 1321–1325. https://doi.org/
10.1145/3324884.3415293
[79] Alan Romano and Weihang Wang. 2020. WasmView: Visual Testing for We-
bAssembly Applications. In Proceedings of the 42nd International Conference
on Software Engineering Companion (Seoul, South Korea) (ICSE’20 Compan-
ion). Association for Computing Machinery, New York, NY, USA, 4 pages.
https://doi.org/10.1145/3377812.3382155
[80] Alan Romano, Yunhui Zheng, and Weihang Wang. 2020. MinerRay: Semantics-
Aware Analysis for Ever-Evolving Cryptojacking Detection. In 2020 35th
IEEE/ACM International Conference on Automated Software Engineering (ASE).
1129–1140. https://doi.org/10.1145/3324884.3416580
[81] Prabhjot Sandhu, David Herrera, and Laurie Hendren. 2018. Sparse matrices on
the web: Characterizing the performance and optimal format selection of sparse
matrix-vector multiplication in JavaScript and WebAssembly. In Proceedings of
the 15th International Conference on Managed Languages & Runtimes. 1–13.
[82] Marija Selakovic and Michael Pradel. 2016. Performance issues and optimiza-
tions in JavaScript: an empirical study. In Proceedings of the 38th International
Conference on Software Engineering. 61–72.
[83] Yuliang Shi, Xudong Zhao, Shanqing Guo, Shijun Liu, and Lizhen Cui. 2016.
SRConfig: An Empirical Method of Interdependent Soft Configurations for Im-
proving Performance in n-Tier Application. In 2016 IEEE International Conference
on Services Computing (SCC). IEEE, 601–608.
[84] Daniel Smilkov, Nikhil Thorat, and Ann Yuan. 2020. Introducing the WebAssem-
bly backend for TensorFlow.js. https://blog.tensorflow.org/2020/03/introducing-
webassembly-backend-for-tensorflow-js.html
[85] The Clang Team. 2020. clang - the Clang C, C++, and Objective-C compiler
https://clang.llvm.org/docs/CommandGuide/
— Clang 11 documentation.
clang.html#cmdoption-o0
[86] Leaning Technologies. 2020. Cheerp | C/C++ to WebAssembly compiler. https:
//leaningtech.com/pages/cheerp.html
[87] Aaron Turner. 2018. WebAssembly Is Fast: A Real-World Benchmark of We-
bAssembly vs. ES6. https://medium.com/@torch2424/webassembly-is-fast-a-
real-world-benchmark-of-webassembly-vs-es6-d85a23f8e193
[88] Vladimir. 2018. WebAssembly vs. the world. Should you use WebAssembly?
https://blog.sqreen.com/webassembly-performance/
[89] W3C. 2021. Web Cryptography API. https://w3c.github.io/webcrypto/
[90] Evan Wallace. 2016. Evanw/thinscript: A low-level programming language
inspired by TypeScript. https://github.com/evanw/thinscript
[91] Conrad Watt, John Renner, Natalie Popescu, Sunjay Cauligi, and Deian Stefan.
2019. CT-Wasm: Type-Driven Secure Cryptography for the Web Ecosystem.
Proc. ACM Program. Lang. 3, POPL, Article 77 (Jan. 2019), 29 pages.
https:
//doi.org/10.1145/3290390
[92] Junjun Zheng, Hiroyuki Okamura, and Tadashi Dohi. 2016. Performance Eval-
uation of VM-based Intrusion Tolerant Systems with Poisson Arrivals. In 2016
Fourth International Symposium on Computing and Networking (CANDAR). IEEE,
181–187.
A EXPERIMENT PARAMETERS USED WITH
GOOGLE CHROME
Table 11: Google Chrome Parameters.
Section
Sec. 4.2
Sec. 4.3
Sec. 4.4
Figures/Tables Parameter
chrome.exe
Figure 5, 6
Table 2
–incognito
chrome.exe
Figure 9
Table 3, 4, 5, 6
–incognito
chrome.exe
Figure 10
Table 7
–incognito
Figure 10
Figure 10
Table 7
Table 7
chrome.exe
–js-flags="–no-opt"
–incognito
chrome.exe
–js-flags="–liftoff
–no-wasm-tier-up"
–incognito
chrome.exe –js-
flags="–no-liftoff
–no-wasm-tier-up"
–incognito
Sec. 4.5
Sec. 4.6
Figure 11, 12
Table 8
Table 9, 10, 11
chrome.exe
–incognito
chrome.exe
–incognito
Impact
Prevent the browser from
caching the benchmark.
Prevent the browser from
caching the benchmark.
Prevent the browser from
caching the benchmark.
By default (without extra
parameters), both LiftOff
and TurboFan compilers
are enabled.
"–no-opt" enables the
LiftOff compiler only for
JavaScript benchmarks.
"–liftoff
–no-wasm-tier-up" enables
the LiftOff compiler only
for WebAssembly
benchmarks.
"–no-liftoff
–no-wasm-tier-up" enables
the TurboFan compiler
only for WebAssembly
benchmarks.
Prevent the browser from
caching the benchmark.
Prevent the browser from
caching the benchmark.
Table 11 shows the parameters we used with Google Chrome in
each subsection of Sec. 4 and discuss their impacts on the results.
B STATISTICAL ANALYSIS OF COMPILER
OPTIMIZATION RESULTS
Fig. 11 shows the statistics of execution time, code size, and
memory usage of JS, WASM, and x86 with different optimization
levels on desktop Chrome. The x-axis represents the execution time,
code size, and memory usage results and the y-axis represents the
five-number summary of the result: the minimum, first quartile,
median, third quartile, and maximum.
In general, the execution time of JS, WASM, and x86 varies across
optimization levels. While the execution time medians of JS and
WASM across optimization levels are close to 1, the execution time
547
IMC ’21, November 2–4, 2021, Virtual Event, USA
Y. Yan et al.
C RESULTS OF BROWSERS AND PLATFORMS
Fig. 12 shows the execution time result of WebAssembly and
JavaScript on desktop/mobile Chrome, desktop/mobile Firefox, and
desktop/mobile Edge. Fig. 13 shows the memory usage result. The
statistics of these results are summarized in Table 8.
D OPERATIONS IN LONG.JS
Table 12: Long.js Number of Operations
Figure 11: Execution time (Time), code size (CS), and memory us-
age (Mem) of JS, WASM, and x86 with different optimization levels
on Chrome. Each box and its whiskers represent the five-number
summary of the result: the minimum, first quartile, median (shown
above each bar), third quartile, and maximum.
medians of x86 with O1/O2 and Oz/O2 are higher than 1 (1.29
with O1/O2 and 1.16 with Oz/O2). This result is in line with the
geometric means of x86 execution time with O1/O2 and Oz/O2 as
shown in Table 2 (1.36x and 1.22x, respectively). On the other hand,
the code size and memory usage has little variation and is close to
1x except for ‘x86 Code Size Ofast/O2’. According to Table 2, the
geometric mean of x86 code size with Ofast/O2 is 1.11x, which is
consistent with the result in Fig. 11.
Benchmark
Multiplication
Division
Remainder
JS/WASM ADD MUL DIV REM SHIFT AND OR Total
JS
510k
WASM
60k
JS
350k
WASM
60k
JS
550k
WASM
60k
0
0
160k
10k
20k
0
100k
10k
100k
0
110k
0
160k
0
80k
0
170k
0
0
0
0
0
0
10k
120k
30k
10k
30k
120k
30k
110k
0
0
0
110k
0
20k
20k
0
20k
20k
20k
To obtain the number of arithmetic operations in Long.js pro-
grams, we manually instrument both JavaScript and WebAssembly
programs’ arithmetic operations. Table 12 shows the result. Observe
that the JavaScript versions run more many more instructions than
the WebAssembly versions.
This is because these 64-bit operations involve fewer calcula-
tions in WebAssembly. Specifically, WebAssembly supports 64-bit
arithmetic operations by treating each 64-bit integer input as two
32-bit integers to perform the calculation, and merging the results
to a single 64-bit integer. By contrast, the Long.js library supports
64-bit integer arithmetic operations in JavaScript by splitting one
64-bit integer into four 16-bit integers to avoid overflow [23].
548
JS Time O1/O2JS Time Ofast/O2JS Time Oz/O2WASM Time O1/O2WASM Time Ofast/O2WASM Time Oz/O2x86 Time O1/O2x86 Time Ofast/O2x86 Time Oz/O2JS CS O1/O2JS CS Ofast/O2JS CS Oz/O2WASM CS O1/O2WASM CS Ofast/O2WASM CS Oz/O2x86 CS O1/O2x86 CS Ofast/O2x86 CS Oz/O2JS Mem O1/O2JS Mem Ofast/O2JS Mem Oz/O2WASM Mem O1/O2WASM Mem Ofast/O2WASM Mem Oz/O2Results0.51.01.52.02.5RatioCompiler Optimization Results StatisticsUnderstanding the Performance of WebAssembly Applications
IMC ’21, November 2–4, 2021, Virtual Event, USA
Figure 12: Execution time of WebAssembly and JavaScript on Chrome for desktop, Firefox for desktop, Edge for desktop, Chrome for mobile,
Firefox for mobile, and Edge for mobile. Each benchmark was tested with default input using the baseline compiler optimization (-O2).
Figure 13: Memory usage of WebAssembly and JavaScript on Chrome for desktop, Firefox for desktop, Edge for desktop, Chrome for mobile,
Firefox for mobile, and Edge for mobile.
549
CovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA0500Execution Time (ms)Execution Time - Desktop ChromeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA01000Execution Time - Mobile ChromeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA0500Execution Time (ms)Execution Time - Desktop FirefoxJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA01000Execution Time - Mobile FirefoxJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks0500Execution Time (ms)Execution Time - Desktop EdgeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks01000Execution Time - Mobile EdgeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA05000Memory (KB)Memory - Desktop ChromeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA05000Memory - Mobile ChromeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA05000Memory (KB)Memory - Desktop FirefoxJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHA05000Memory - Mobile FirefoxJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks05000Memory (KB)Memory - Desktop EdgeJSWASMCovarianceCorrelationGemmGemverGesummvSymmSyrkSyr2kTrmm2mm3mmAtaxBicgDoitgenMvtCholeskyDurbinGramschmidtLuLudcmpTrisolvDericheFloyd-warshallNussinovAdiFdtd-2dHeat-3dJacobi-1dJacobi-2dSeidel-2dADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHABenchmarks05000Memory - Mobile EdgeJSWASM