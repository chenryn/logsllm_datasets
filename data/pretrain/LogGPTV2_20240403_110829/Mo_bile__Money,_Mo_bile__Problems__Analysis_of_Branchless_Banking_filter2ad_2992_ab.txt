### 2. Security Testing and Reverse Engineering

For security reasons, Qualys does not test application endpoints on non-standard ports or without registered domain names. The test provides a comprehensive, non-invasive view of the configuration and capabilities of a server’s SSL/TLS implementation.

#### Phase 2: Reverse Engineering

To complete our holistic view of both the application protocols and the client/server SSL/TLS negotiation, we reverse-engineered each app in the second phase. For this step, we used the commercial interactive JEB Decompiler [4] to provide Java syntax for most classes. While we primarily used the decompiled output for analysis, we also reviewed the Dalvik assembly to identify vulnerabilities. Where we were able to obtain accounts for mobile money services, we confirmed each vulnerability with our accounts, ensuring that our actions did not negatively impact the service or other users.

Instead of starting by identifying interesting methods and classes, we began our analysis by following the application lifecycle as the Android framework does, starting with the `Application.onCreate()` method and moving on to the first Activity to execute. From there, we constructed the possible control paths a user can take from the beginning through account registration, login, and money transfer. This approach ensures that our findings are present in live code, leading to conservative claims about vulnerabilities. After tracing control paths through the Activity user interface code, we also analyzed other components that appeared to have sensitive functionality.

Our primary interest is in verifying the integrity of these financial applications. In the course of our analysis, we looked for security errors in the following actions:

- **Registration and Login**
- **User Authentication after Login**
- **Money Transfers**
- **Improper Authentication Procedures**
- **Message Confidentiality and Integrity Failures** (including misuse of cryptography)
- **Highly Sensitive Information Leakage** (including financial information or authentication credentials)
- **Practices that Discourage Good Security Hygiene**, such as permitting insecure passwords

We discuss our specific findings in Section 4.

### 3.3.1 Vulnerability Disclosure

As of the publication deadline of this paper, we have notified all services of the vulnerabilities. We also included basic details of accepted mitigating practices for each finding. In the course of our analysis, we found several vulnerabilities in what appears to be dead code. While we disclosed these findings to developers for completeness, we omit them from this paper.

#### Common Weakness Enumeration

The following table lists the weaknesses in mobile money applications, indexed to corresponding Common Weakness Enumeration (CWE) records. The CWE database is a comprehensive taxonomy of software vulnerabilities developed by MITRE [55] and provides a common language for software errors.

| CWE ID | Description |
|--------|-------------|
| CWE-295 | Improper Certificate Validation |
| CWE-330 | Use of Insufficiently Random Values |
| CWE-322 | Key Exchange without Entity Authentication |
| CWE-88 | Argument Injection or Modification |
| CWE-302 | Authentication Bypass by Assumed-Immutable Data |
| CWE-521 | Weak Password Requirements |
| CWE-522 | Insufficiently Protected Credentials |
| CWE-603 | Use of Client-Side Authentication |
| CWE-640 | Weak Password Recovery Mechanism for Forgotten Password |
| CWE-200 | Information Exposure |
| CWE-532 | Information Exposure Through Log Files |
| CWE-312 | Cleartext Storage of Sensitive Information |
| CWE-319 | Cleartext Transmission of Sensitive Information |

| Application | CWE-295 | CWE-330 | CWE-322 | CWE-88 | CWE-302 | CWE-521 | CWE-522 | CWE-603 | CWE-640 |
|------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| Airtel Money | X | X | X | X | X | X | X | X | X |
| mPAY | X | X | X | X | X | X | X | X | X |
| Oxigen Wallet | X | X | X | X | X | X | X | X | X |
| GCash | X | X | X | X | X | X | X | X | X |
| Zuum | X | X | X | X | X | X | X | X | X |
| MOM | X | X | X | X | X | X | X | X | X |
| mCoin | X | X | X | X | X | X | X | X | X |

Table 1: Weaknesses in Mobile Money Applications, indexed to corresponding Common Weakness Enumeration (CWE) records.

### 4. Results

This section details the results of analyzing the mobile money applications. Overall, we found 28 significant vulnerabilities across seven applications. Table 1 shows these vulnerabilities indexed by CWE and broad categories (apps are ordered by download count). All but one application (Zuum) presents at least one major vulnerability that harms the confidentiality of user financial information or the integrity of transactions, and most applications have difficulty with the proper use of cryptography in some form.

#### 4.1 Automated Analysis

Our results for SSL/TLS vulnerabilities should mirror the output of an SSL/TLS vulnerability scanner such as Mallodroid. Though two applications were unable to be analyzed by Mallodroid, it detects at least one critical vulnerability in over 50% of the applications it successfully completed.

Mallodroid produces a false positive when it detects an SSL/TLS vulnerability in Zuum, an application that, through manual analysis, we verified was correctly performing certificate validation. The Zuum application does contain disabled certificate validation routines, but these are correctly enclosed in logic that checks for development modes.

Conversely, in the case of MoneyOnMobile, Mallodroid produces a false negative. MoneyOnMobile contains no SSL/TLS vulnerability because it does not employ SSL/TLS. While this can be considered correct operation of Mallodroid, it also does not capture the severe information exposure vulnerability in the app.

Overall, we find that Mallodroid, an extremely popular analysis tool for Android apps, does not detect the correct use of SSL/TLS in an application. It produces an alert for the most secure app we analyzed and did not for the least. In both cases, manual analysis reveals stark differences between the Mallodroid results and the real security of an app. A comprehensive, correct analysis must include a review of the application’s validation and actual use of SSL/TLS sessions, as well as where these are used in the application (e.g., used for all sensitive communications). Additionally, it is critical to understand whether the remote server enforces secure protocol versions, ciphers, and hashing algorithms. Only a manual analysis provides this holistic view of the communication between application and server so that a complete security evaluation can be made.

#### 4.2 SSL/TLS

As discussed above, problems with SSL/TLS certificate validation represented the most common vulnerability we found among the apps we analyzed. Certificate validation methods inspect a received certificate to ensure that it matches the host in the URL, that it has a trust chain that terminates in a trusted certificate authority, and that it has not been revoked or expired. However, developers can disable this validation by creating a new class that implements the `X509TrustManager` interface using arbitrary validation methods, replacing the validation implemented in the parent library. In the applications that override the default code, the routines were empty; that is, they do nothing and do not throw exceptions on invalid certificates. This insecure practice was previously identified by Georgiev et al. [31] and is specifically targeted by Mallodroid.

Analyzing only the app does not provide complete visibility into the overall security state of an SSL/TLS session. Server misconfiguration can introduce additional vulnerabilities, even when the client application uses correctly implemented SSL/TLS. To account for this, we also ran the Qualys SSL Server Test [50] on each of the HTTPS endpoints we discovered while analyzing the apps. This service tests a number of properties of each server to identify configuration and implementation errors and provide a "grade" for the configuration. These results are presented in Table 2. Three of the endpoints we tested received failing scores due to insecure implementations of SSL/TLS. To underscore the severity of these misconfigurations, we have included the "Most Noteworthy Vulnerabilities" identified by Qualys.

| Product | Most Noteworthy Score | Vulnerabilities |
|---------|----------------------|-----------------|
| Airtel Money | A- | Weak signature algorithm (SHA1withRSA) |
| mPAY 1 | F- | SSL2 support, Insecure Client-Initiated Renegotiation |
| mPAY 2 | F- | Vulnerable to POODLE attack |
| Oxigen Wallet | F- | SSL2 support, MD5 cipher suite |
| Zuum | A- | Weak signature algorithm (SHA1withRSA) |
| GCash | C- | Vulnerable to POODLE attack |
| mCoin | N/A | Uses expired, localhost self-signed certificate |
| MoneyOnMobile | N/A | App does not use SSL/TLS |

Table 2: Qualys reports for domains associated with branchless banking apps. "Most Noteworthy Vulnerabilities" lists what Qualys considers to be the most dangerous elements of the server’s configuration. mPAY contacts two domains over SSL, both of which are separately tabulated below. Qualys would not scan mCoin because it connects to a specific IP address, not a domain.

Coupling the manual analysis with the Qualys results, we found that in one case, the disabled validation routines were required for the application to function correctly. The mCoin API server provides a certificate that is issued to "localhost" (an invalid hostname for an external service), is expired, and is self-signed (has no trust chain). No correct certificate validation routine would accept this certificate. Therefore, without this routine, the mCoin application would be unable to establish a connection to its server. Although Mallodroid detected the disabled validation routines, only our full analysis can detect the relationship between the app’s behavior and the server’s configuration.

The implications of poor validation practices are severe, especially in these critical financial applications. Adversaries can intercept this traffic and sniff cleartext personal or financial information. Furthermore, without additional message integrity checking inside these weak SSL/TLS sessions, a man-in-the-middle adversary is free to manipulate the messages.

#### 4.3 Non-Standard Cryptography

Despite the pervasive insecure implementations of SSL/TLS, the client/server protocols that these apps implement are similarly critical to their overall security. We found that four applications used their own custom cryptographic systems or had poor implementations of well-known systems in their protocols. Unfortunately, these practices are easily compromised and severely limit the integrity and privacy guarantees of the software, giving rise to the threat of forged transactions and loss of transaction privacy.

**MoneyOnMobile**: MoneyOnMobile does not use SSL/TLS. All API calls from the app use HTTP. In fact, we found only one use of cryptography in the application’s network calls. During the user registration process, the app first calls an encryption proxy web service, then sends the service’s response to a registration web service. The call to the encryption server includes both the user data and a fixed static key. A visualization of this protocol is shown in Figure 5.

The encryption server is accessed over the Internet via HTTP, exposing both the user and key data. Because this data is exposed during the initial call, its subsequent encryption and delivery to the registration service provides no security. We found no other uses of this or any other encryption in the MoneyOnMobile app; all other API calls are provided unobfuscated user data as input.

**Oxigen Wallet**: Like MoneyOnMobile, Oxigen Wallet does not use SSL/TLS. Oxigen Wallet’s registration messages are instead encrypted using the Blowfish algorithm, a strong block cipher. However, a long, random key is not generated for input into Blowfish. Instead, only 17 bits of the key are random. The remaining bits are filled by the mobile phone number, the date, and padding with 0s. The random bits are generated by the `Random` [34] random number generator. The standard Java documentation [44] explicitly warns in its documentation that `Random` is not sufficiently random for cryptographic key generation. As a result, any attacker can read, modify, or spoof messages. These messages contain demographic information including first and last name, email address, date of birth, and mobile phone number, which constitutes a privacy concern for Oxigen Wallet’s users.

After key generation, Oxigen Wallet transmits the key in plaintext along with the message to the server. In other words, every encrypted registration message includes the key in plaintext. Naturally, this voids every guarantee of the block cipher. In fact, any attacker who can listen to messages can decrypt and modify them with only a few lines of code.

The remainder of client-server interactions use an RSA public key to send messages to the server. To establish an RSA key for the server, Oxigen Wallet sends a simple HTTP request to receive an RSA key from the Oxigen Wallet server. This message is unauthenticated, which prevents the application from knowing that the received key is from Oxigen Wallet and not from an attacker. Thus, an attacker can pretend to be Oxigen Wallet and send an alternate key to the app. This would allow the attacker to read all messages sent by the client (including those containing passwords) and forward the messages to Oxigen Wallet (with or without modifications) if desired. This RSA man-in-the-middle attack is severe and puts all transactions by a user at risk. At the very least, this will allow an attacker to steal the password and other sensitive information.