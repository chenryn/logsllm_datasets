title:VERISMART: A Highly Precise Safety Verifier for Ethereum Smart
Contracts
author:Sunbeom So and
Myungho Lee and
Jisu Park and
Heejo Lee and
Hakjoo Oh
2020 IEEE Symposium on Security and Privacy
VERISMART: A Highly Precise Safety Veriﬁer for
Ethereum Smart Contracts
Sunbeom So, Myungho Lee, Jisu Park, Heejo Lee, Hakjoo Oh∗
Department of Computer Science and Engineering
Korea University
Abstract—We present VERISMART, a highly precise veriﬁer
for ensuring arithmetic safety of Ethereum smart contracts.
Writing safe smart contracts without unintended behavior is
critically important because smart contracts are immutable and
even a single ﬂaw can cause huge ﬁnancial damage. In particular,
ensuring that arithmetic operations are safe is one of the most
important and common security concerns of Ethereum smart
contracts nowadays. In response, several safety analyzers have
been proposed over the past few years, but state-of-the-art
is still unsatisfactory; no existing tools achieve high precision
and recall at the same time, inherently limited to producing
annoying false alarms or missing critical bugs. By contrast,
VERISMART aims for an uncompromising analyzer that performs
exhaustive veriﬁcation without compromising precision or scala-
bility, thereby greatly reducing the burden of manually checking
undiscovered or incorrectly-reported issues. To achieve this goal,
we present a new domain-speciﬁc algorithm for verifying smart
contracts, which is able to automatically discover and leverage
transaction invariants that are essential for precisely analyzing
smart contracts. Evaluation with real-world smart contracts
shows that VERISMART can detect all arithmetic bugs with a
negligible number of false alarms, far outperforming existing
analyzers.
I. INTRODUCTION
Safe smart contracts are indispensable for
trustworthy
blockchain ecosystems. Blockchain is widely recognized as
one of the most disruptive technologies and smart contracts lie
at the heart of this revolution (e.g., [1], [2]). Smart contracts
are computer programs that run on blockchains in order
to automatically fulﬁll agreed obligations between untrusted
parties without
intermediaries. Unfortunately, despite their
potential, smart contracts are more likely to be vulnerable than
traditional programs because of their unique characteristics
such as openness and immutability [3]. As a result, unsafe
smart contracts are prevalent and are increasingly becoming a
serious threat to the success of the blockchain technology. For
example, recent infamous attacks on the Ethereum blockchain
such as the DAO [4] and the Parity Wallet [5] attacks were
caused by unsafe smart contracts.
In this paper, we present VERISMART, a fully automated
safety analyzer for verifying Ethereum smart contracts with a
particular focus on arithmetic safety. We focus on detecting
arithmetic bugs such as integer over/underﬂows and division-
by-zeros because smart contracts typically involve lots of
arithmetic operations and they are major sources of security
∗Corresponding author: Hakjoo Oh, hakjoo PI:EMAIL
STATISTICS ON CVE-REPORTED SECURITY VULNERABILITIES OF
ETHEREUM SMART CONTRACTS (AS OF MAY. 31, 2019)
TABLE I
Arithmetic
Over/underﬂow Randomness Control Dependency
487 (95.7 %)
4 (0.8 %)
10 (1.9 %) 4 (0.8 %)
Access Unsafe Input Others Total
4 (0.8%) 509
Bad
vulnerabilities nowadays. For example, arithmetic over/un-
derﬂows account for 95.7% (487/509) of CVEs assigned to
Ethereum smart contracts, as shown in Table I. Even worse,
arithmetic bugs, once exploited, are likely to cause signiﬁcant
but unexpected ﬁnancial damage (e.g., the integer overﬂow
in the SmartMesh contract [6] explained in Section II). Our
goal is to detect all arithmetic bugs before deploying smart
contracts on the blockchain.
Unlike existing techniques, VERISMART aims to be a truly
practical tool by performing automatic, scalable, exhaustive,
yet highly precise veriﬁcation of smart contracts. Recent years
have seen an increased interest in automated tools for ana-
lyzing arithmetic safety of smart contracts [7], [8], [9], [10],
[11], [12]. However, existing tools are still unsatisfactory. A
major weakness of bug-ﬁnding approaches (e.g., [7], [9], [8],
[10]) is that they are likely to miss fatal bugs (i.e., resulting in
false negatives), because they do not consider all the possible
behaviors of the program. On the other hand, veriﬁcation
approaches (e.g., [11], [12]) are exhaustive and therefore miss
no vulnerabilities, but they typically do so at the expense of
precision (i.e., resulting in false positives). In practice, both
false negatives and positives burden developers with error-
prone and time-consuming process for manually verifying a
number of undiscovered issues or incorrectly reported alarms.
VERISMART aims to overcome these shortcomings of existing
approaches by being exhaustive yet precise.
To achieve this goal, we present a new veriﬁcation algorithm
for smart contracts. The key feature of the algorithm, which
departs signiﬁcantly from the existing analyzers for smart
contracts [7], [8], [9], [10], [11], [12], is to automatically
discover domain-speciﬁc invariants of smart contracts during
the veriﬁcation process. In particular, our algorithm automates
the discovery of transaction invariants, which are distinctive
properties of smart contracts that hold under arbitrary inter-
leaving of transactions and enable to analyze smart contracts
exhaustively without exploring all program paths separately. A
technical challenge is to efﬁciently discover precise invariants
© 2020, Sunbeom So. Under license to IEEE.
DOI 10.1109/SP40000.2020.00032
1678
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
from the huge search space. We propose an effective algorithm
tailored for typical smart contracts, which iteratively generates
and validates candidate invariants in a feedback loop akin
to the CEGIS (counter example-guided inductive synthesis)
framework [13], [14], [15]. Our algorithm is general and can
be used for analyzing a wide range of safety properties of
smart contracts besides arithmetic safety.
Experimental results show that our algorithm is much more
effective than existing techniques for analyzing Ethereum
smart contracts. We ﬁrst evaluated the effectiveness of
VERISMART by comparing it with four state-of-the-art bug-
ﬁnders: OSIRIS [7], OYENTE [9], MYTHRIL [8], and MAN-
TICORE [10]. An in-depth study on 60 contracts that have
CVE vulnerabilities shows that VERISMART detects all known
vulnerabilities with a negligible false positive rate (0.41%). By
contrast, existing bug-ﬁnders failed to detect a large amount
(> 29.3%) of known vulnerabilities with higher false positive
rates (> 5.4%). We also compared VERISMART with two
state-of-the-art veriﬁers, ZEUS [11] and SMTCHECKER [12].
The results show that VERISMART is signiﬁcantly more
precise than them thanks to its ability to discover transaction
invariants of smart contracts automatically.
Contributions: Our contributions are as follows:
• We present a new veriﬁcation algorithm for smart con-
tracts (Section III). This is the ﬁrst CEGIS-style algorithm
that leverages transaction invariants automatically during
the veriﬁcation process.
• We provide VERISMART, a practical implementation of
our algorithm that supports the full Solidity language,
the de facto standard programming language for writing
Ethereum smart contracts.
• We provide in-depth evaluation of VERISMART in com-
parison with six analyzers [7], [9], [8], [10], [11], [12].
All experimental results are reproducible as we make our
tool and data publicly available.1
II. MOTIVATING EXAMPLES
In this section, we illustrate central features of VERIS-
MART with examples. We use three real-world smart contracts
to highlight key aspects of VERISMART that differ from
existing analyzers.
Example 1: Figure 1 shows a simpliﬁed function from
the SmartMesh token contract (CVE-2018-10376). In April
2018, an attacker exploited a vulnerability in the function and
succeeded to create an extremely large amount of unauthorized
tokens (≈ 5·1057 USD). This vulnerability, named proxyOver-
ﬂow, was due to unexpected integer overﬂow.
The transferProxy function is responsible for trans-
from
ferring a designated amount of
a source address (from)
to a destination address (to)
while paying transaction fees (fee) to the message sender
(msg.sender). The core functionality is implemented at
lines 8–10, where the recipients’ balances (balance[to]
and balance[msg.sender]) are increased (lines 8 and
(value)
tokens
1http://prl.korea.ac.kr/verismart
1
2
3
4
5
6
7
8
9
10
11
function transferProxy (address from, address to, uint
value, uint fee) {
if (balance[from]  0);
require(balances[msg.sender] >= value * to.length);
balances[msg.sender] -= value * to.length;
for (uint i = 0; i  uint) public balance;
uint public totalSupply;
constructor () {
totalSupply = 10000;
balance[msg.sender] = 10000;
}
function transfer (address to, uint value) {
require (balance[msg.sender] >= value);
balance[msg.sender] -= value;
balance[to] += value; // Safe
}
function transferFrom (address from, address to, uint
value) {
require (balance[from] >= value);
balance[to] += value; // Safe
balance[from] -= value;
}
}
Fig. 3. Example contract simpliﬁed from CVE-2018-13326.
(cid:2)
• the sum of all account values is 10000, i.e.,
balance[i] = 10000,
(cid:3)
i
(1)
• and computing
i balance[i] does not cause over-
ﬂow.
By combining these two conditions and the preconditions
expressed in the require statements at lines 11 and 17, we
can conclude that, at lines 13 and 18, the maximum values
of both balance[to] and value are 10000, and thus the
expression balance[to]+value does not overﬂow in 256-
bit unsigned integer operations.
Since reasoning about the safety in this case is tricky, it
is likely for human auditors to make a wrong conclusion
that the contract is unsafe. This is in fact what happened in
the recent CVE report (CVE-2018-13326)2; the CVE report
incorrectly states that the two addition operations at lines 13
and 18 are vulnerable and thus the operations may overﬂow.
Unfortunately, existing safety analyzers do not help here. In
particular, veriﬁers, ZEUS [11] and SMTCHECKER [12], are
not precise enough to keep track of the implicit invariants such
as (1) and therefore cannot prove the safety at lines 13 and 18.
Bug-ﬁnders OSIRIS and OYENTE also produce false alarms.
MYTHRIL does not report any issues, but this does not mean
that it proved the absence of vulnerabilities.
By contrast, VERISMART is able to prove that the contract is
safe without any false alarms. Notably, VERISMART does so
by automatically inferring hidden invariants described above.
To our knowledge, VERISMART is the ﬁrst of its kind, which
discovers global invariants of smart contracts and leverages
them during the veriﬁcation process in a fully automated way.
III. VERISMART ALGORITHM
This section describes the veriﬁcation algorithm of VERIS-
MART. We formally present the algorithm in a general setting,
so it can be used for analyzing other safety properties as well
beyond our application to arithmetic safety.
2https://nvd.nist.gov/vuln/detail/CVE-2018-13326
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:38 UTC from IEEE Xplore.  Restrictions apply. 
1680
f ∈ F ::= x(y){S}
Language: For brevity, we focus on a core subset of
Solidity [17]. However, VERISMART supports the full Solidity
language as the extension is discussed in Section IV. Consider
the following subset of Solidity:
c ∈ C ::= G∗ F ∗,
a ∈ A ::= x := E | x[y] := E | assume(B) | assert(B)
s ∈ S ::= A | if B S1 S2 | while l E S | S1; S2
We assume a single contract c is given, which consists of
a sequence of global state variable declarations (G∗) and a
sequence of function deﬁnitions (F ∗), where G and F denote
the sets of global variables and functions in the contract,
respectively. We assume a constructor function f0 ∈ F exists
in c. Each function f is deﬁned by a function name (x),
argument (y), and a body statement (S). A statement S is
an atomic statement (A), a conditional statement, or a while
loop. An atomic statement a ∈ A is an assignment to a variable
(x := E), an assignment to an array element (x[y] := E), an
assume statement, or an assert statement. In our language, we
model mapping variables in Solidity as arrays. In our language,
assume differs from assert; while the former models the
require statements in Solidity and stops execution if the
condition evaluates to false, the latter does not affect program
semantics. E and B stand for conventional arithmetic and
boolean expressions, respectively, where we assume arith-
metic expressions produce 256-bit unsigned integers. In our
language, loops are annotated with labels (l), and the entry
and the exit of each function f are annotated with special
labels entry f and exit f , respectively. Let Label be the set
of all labels in the program. We assume each function f has
public (or external) visibility, meaning that all functions
in the contract can be called from the outside.
is
Goal: Our goal
to develop an algorithm that