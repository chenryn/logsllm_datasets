with simple data validation protocols for securing the well-
known link-state and distance-vector algorithms for build-
ing routing tables.
4.1 Achieving Integrity in the Setup for Link-
State Routing
Having discussed how to efﬁciently secure a broadcast
ﬂooding message, we observe that this approach can be
used for the setup of the link-state algorithm. This algo-
rithm is the basis of the well-known and highly-used OSPF
routing protocol. In this algorithm, we build at each router
in a network G a table, which indicates the distance to every
other router in G, together with an indication of which link
to follow out of x to traverse the shortest path to another
router. That is, we store Dx and Cx at a router x so that
Dx[y] is the distance to router y from x and Cx[y] is the
link to follow from x to traverse a shortest path from x to y.
These tables are built by a simple setup process, which
we can now make secure using the leap-frog or diverse key
distribution schemes described above. The setup begins by
having each router x poll each of its neighbors, y, to deter-
mine the state of the link from x to y. This determination
assigns a distance weight to the link from x to y, which
can be 0 or 1 if we are interested in simply if the link is
up or down, or it can be a numerical score of the current
bandwidth or latency of this link. In any case, after each
router x has determined the states of all its adjacent links, it
ﬂoods the network with a message that contains a vector of
all the distances it determined to its neighbors. Under our
protected scheme, we now perform this ﬂooding algorithm
using the leap-frog, chromatic leap-frog, or diverse key dis-
tribution methods. Once this computation completes cor-
rectly, we compute the vectors Dx and Cx for each router x
by a simple local application of the well-known Dijkstra’s
shortest path algorithm (e.g., see [5, 10]).
Thus, simply by utilizing a secure ﬂooding algorithm we
can secure the setup for the link-state routing algorithm. Se-
curing the setup for another well-known routing algorithm
takes a little more effort than this, however, as we explore
in the next section.
4.2 Achieving Integrity in the Setup for Distance-
Vector Routing
Another
important
routing setup algorithm is the
distance-vector algorithm, which is the basis of the well-
known RIP protocol. As with the link-state algorithm, the
setup for distance-vector algorithm creates for each router
x in G a vector, Dx, of distances from x to all other routers,
and a vector Cx, which indicates which link to follow from
x to traverse a shortest path to a given router. Rather than
compute these tables all at once, however, the distance vec-
tor algorithm produces them in a series of rounds.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
4.2.1 Reviewing the Distance-Vector Algorithm
Initially, each router sets Dx[y] equal to the weight, w(x, y),
of the link from x to y, if there is such a link. If there is no
such link, then x sets Dx[y] = +∞. In each round each
router x sends its distance vector to each of its neighbors.
Then each router x updates its tables by performing the fol-
lowing computation:
for each router y adjacent to x do
for each other router w do
if Dx[w] > w(x, y) + Dy[w] then
{It is faster to ﬁrst go to y on the way to w.}
Set Dx[w] = w(x, y) + Dy[w]
Set Cx[w] = y
end if
end for
end for
If we examine closely the computation that is performed
at a router x, it can be modeled as that of computing the
minimum of a collection of values that are sent to x from
adjacent routers (that is, the w(x, y) + Dy[w] values), plus
some comparisons, arithmetic, and assignments. Thus, to
secure the distance-vector algorithm, the essential computa-
tion is that of verifying that the router x has correctly com-
puted this minimum value. We shall use the leap-frog idea
to achieve this goal.
4.2.2 Securing the Setup for the Distance-Vector Algo-
rithm
Since the main algorithmic portion in testing the correctness
of a round of the distance-vector algorithm involves validat-
ing the computation of a minimum of a collection of values,
let us focus more speciﬁcally on this problem. Suppose,
then, that we have a node x that is adjacent to a collection
of nodes y0, y1, . . ., yd−1, and each node yi sends to x a
value ai. The task x is to perform is to compute
m =
min
i=0,1,...,d−1
{ai},
in a way that all the yi’s are assured that the computation
was done correctly. As in the previous sections, we will as-
sume that at most one router will be corrupted during the
computation (but we have to prevent and/or detect any fall-
out from this corruption). In this case, the router that we
consider as possibly corrupted is x itself. The neighbors of
x must be able therefore to verify every computation that
x is to perform. To aid in this veriﬁcation, we assume a
preprocessing step has shared a key k(x) with all d of the
neighbors of x, that is, the members of N (x), but is not
known by x.
The algorithm that x will use to compute m is the trivial
minimum-ﬁnding algorithm, where x iteratively computes
all the preﬁx minimum values
mj = min
i=0,...,j
{ai},
for j = 0, . . . , d − 1. Thus, the output from this algorithm
is simply m = md−1. The secure version of this algorithm
proceeds in four communication rounds:
1. Each router yi sends its value ai to x, as Ai =
(ai, h(ai||k(x)), for i = 0, 1, . . . , d − 1.
2. The router x computes the mi values and sends the
message (mi−1, mi, Ai−1 mod d, Ai+1 mod d) to each
yi. The validity of Ai−1 mod d and Ai+1 mod d) is
checked by each such yi using the secret key k(x).
Likewise, each yi checks that mi = min{mi−1, ai}.
3. If
the check succeeds, each router yi sends its
veriﬁcation of
this computation to x as Bi =
(“yes(cid:1)(cid:1), i, mi, h(“yes(cid:1)(cid:1)||mi||i||k(x))). (For added se-
curity yi can seed this otherwise short message with a
random number.)
4. The
x
sends
router
message
the
(Bi−1 mod d, Bi+1 mod d) to each yi.
Each such
yi checks the validity of these messages and that they
all indicated “yes” as their answer to the check on x’s
computation. This completes the computation.
topics of this paper prior to its acceptance in IEEE S&P,
and Radia Perlman, for helpful discussions post acceptance.
This research was supported in part by NSF grants CCR-
0225642, CCR-0311720, and CCR-0312760.
References
[1] R. Blom. An optimal class of symmetric key generation sys-
tems. In Advances in Cryptography: EUROCRYPT, volume
209 of Lecture Notes in Computer Science, pages 335–338,
1985.
[2] K. A. Bradley, S. Cheung, N. Puketza, B. Mukherjee, and
R. A. Olsson. Detecting disruptive routers: A distributed
network monitoring approach. In IEEE Symposium on Se-
curity and Privacy, pages 115–124, 1998.
[3] H. Chan, A. Perrig, and D. Song. Random key predistri-
bution schemes for sensor networks. In Proc. of the IEEE
Security and Privacy Symposim, pages 197–213, 2003.
[4] S. Cheung. An efﬁcient message authentication scheme for
link state routing. In 13th Annual Computer Security Appli-
cations Conference, pages 90–98, 1997.
[5] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms. MIT Press, Cambridge, MA,
2nd edition, 2001.
[6] W.
Dai.
ious
http://www.eskimo.com/∼weidai/benchmarks.html.
ciphers
hash
Speed
and
benchmarks
for
var-
functions.
In essence, the above algorithm is checking each step of
x’s iterative computation of the mi’s. But rather than do
this checking sequentially, which would take O(d) rounds,
we do this check in parallel, in O(1) rounds.
5 Conclusion
We have described two techniques—leap-frog packet
linking and diverse key distributions—for improving the in-
tegrity of network broadcasts and multicasts, and we have
given applications of these techniques to the setup algo-
rithms for the link-state and distance vector routing algo-
rithms.
During routing phases, these two techniques offer use-
ful tradeoffs. Leap-frog packet linking adds only two ad-
ditional values to the payload of a packet and can tolerate
no adjacent colluding malicious routers on a path. The di-
verse key distribution technique, on the other hand, adds
up to O(log n) values to the data payload, but can toler-
ate small colluding sets of malicious routers. Both of these
techniques, however, provide data integrity at low storage
and computational overhead per device.
Acknowledgments
We would like to thank Amitabha Bagchi, Luke Bao, and
Amitabh Chaudhary, for helpful discussions related to the
[7] W. Du, J. Deng, Y. S. Han, and P. K. Varshney. A pairwise
key pre-distribution scheme for wireless sensor networks. In
10th ACM Conf. on Computer and Communication Security
(CCS), pages 42–51, 2003.
[8] L. Eschenauer and V. Gligor. A key management scheme for
distributed sensor networks. In 9th ACM Conf. on Computer
and Communication Security (CCS), pages 41–47, 2002.
[9] J. A. Garay, J. Staddon, and A. Wool. Long-lived broadcast
In Advances in Cryptology – CRYPTO 2000,
encryption.
LNCS, pages 333–352. Springer-Verlag, 2000.
[10] M. T. Goodrich and R. Tamassia. Algorithm Design: Foun-
John Wiley &
dations, Analysis, and Internet Examples.
Sons, New York, NY, 2002.
[11] M. Guerrero-Zapata and N. Asokan. Securing ad hoc routing
protocols. In ACM Workshop on Wireless Security, pages 1–
10, 2002.
[12] R. C. Hauser, T. Przygienda, and G. Tsudik. Lowering se-
curity overhead in link state routing. Computer Networks,
31(8):885–894, 1999.
[13] Y.-C. Hu, A. Perrig, and D. B. Johnson. Efﬁcient security
mechanisms for routing protocols.
In Network and Dis-
tributed System Security Symposium (NDSS), pages 57–73,
2003.
[14] J. Hwang and Y. Kim.
Revisiting random key pre-
distribution schemes for wireless sensor networks.
In 2nd
ACM Workshop on Security in Ad Hoc and Sensor Networks,
pages 43–52, 2004.
[15] C. Kaufman, R. Perlman, and M. Speciner. Network Secu-
rity: Private Communication in a Public World. Prentice-
Hall, Englewood Cliffs, NJ, 1995.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
[34] S. Zhu, S. Xu, S. Setia, and S. Jajodia. Establishing pair-
wise keys for secure communication in ad hoc networks: A
probabilistic approach. In 11th IEEE International Confer-
ence on Network Protocols (ICNP), pages 326–335, 2003.
[35] S. Zhu, S. Xu, S. Setia, and S. Jajodia. LHAP: A lightweight
hop-by-hop authentication protocol of ad-hoc networks. In
23rd International Conference on Distributed Computing
Systems, page 749, 2003.
[16] S. Kent, C. Lynn, J. Mikkelson, and K. Seo. Secure boarder
gateway protocol (S-BGP) – real world performance and de-
ployment issues. In Symposium on Network and Distributed
Systems Security (NDSS ’00), pages 103–116, 2000.
[17] J. Konh, P. Zerfos, H. Luo, S. Lu, and L. Zhang. Providing
robust and ubiquitous security support for mobil ad-hoc net-
works. In 9th IEEE Int. Conf. on Network Protocols (ICNP),
pages 251–260, 2001.
[18] D. Liu and P. Ning. Establishing pairwise keys in distributed
sensor networks. In 10th ACM Conf. on Computer and Com-
munication Security (CCS), pages 52–61, 2003.
[19] R. Motwani and P. Raghavan. Randomized Algorithms.
Cambridge University Press, New York, NY, 1995.
[20] S. Murphy, M. Badger, and B. Wellington. RFC 2154: OSPF
with digital signatures, June 1997. Status: EXPERIMEN-
TAL.
[21] S. Murphy, O. Gudmundsson, R. Mundy, and B. Welling-
ton. Retroﬁtting security into internet infrastructure proto-
cols. In DARPA Information Survivability Conference and
Exposition (DISCEX), pages 3–17. IEEE Computer Society
Press, 2000.
[22] S. L. Murphy and M. R. Badger. Digital signature protection
of OSPF routing protocol. In 1996 Internet Society Symp.
on Network and Distributed System Security (NDSS), pages
93–102, 1996.
[23] P. Papadimitratos and Z. J. Haas. Secure link state routing
for mobile ad hoc networks. In Symp. on Applications and
the Internet Workshops, page 379, 2003.
[24] R. Perlman. Network Layer Protocol with Byzantine Agree-
ment. PhD thesis, The MIT Press, Oct. 1988. LCS TR-429.
Interconnections, Second Edition: Bridges,
Routers, Switches, and Internetworking Protocols. Addison-
Wesley, Reading, MA, USA, 2000.
[25] R. Perlman.
[26] R. L. Rivest. Mit 6.857 computer and network security class
notes. http://theory.lcs.mit.edu/∼rivest/notes/notes.pdf.
[27] K. Sanzgiri, B. Dahill, B. N. Levine, C. Shields, and E. M.
Belding-Royer. A secure routing protocol for ad hoc net-
works.
In 10th IEEE Int. Conf. on Network Protocols
(ICNP), pages 78–89, 2002.
[28] B. Schneier. Applied Cryptography: protocols, algorithms,
and source code in C. John Wiley and Sons, Inc., New York,
1994.
[29] B. R. Smith, S. Murthy, and J. Garcia-Luna-Aceves. Secur-
ing distance-vector routing protocols. In Symposium on Net-
work and Distributed Systems Security (NDSS ’97), 1997.
[30] D. R. Stinson, T. van Trung, and R. Wei. Secure frame-
proof codes, key distribution patterns, group testing algo-
rithms and related structures. Journal of Statistical Planning
and Inference, 86:595–617, 2000.
[31] B. Vetter, F.-Y. Wang, and S. F. Wu. An experimental study
of insider attacks for the OSPF routing protocol. In 5th IEEE
International Conference on Network Protocols, 1997.
[32] S. F. Wu, F.-Y. Wang, Y. F. Jou, and F. Gong. Intrusion de-
tection for link-state routing protocols. In IEEE Symposium
on Security and Privacy, 1997.
[33] K. Zhang. Efﬁcient protocols for signing routing messages.
In Symposium on Network and Distributed Systems Security
(NDSS ’98), San Diego, California, 1998. Internet Society.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE