### 4.1 Achieving Integrity in the Setup for Link-State Routing

After discussing how to efficiently secure a broadcast flooding message, we can apply this approach to the setup of the link-state routing algorithm. This algorithm is the foundation of the widely used OSPF (Open Shortest Path First) routing protocol. In the link-state algorithm, each router in a network \( G \) builds a table that indicates the distance to every other router in \( G \), along with the next hop to follow to traverse the shortest path to another router. Specifically, at each router \( x \), we store \( D_x \) and \( C_x \), where \( D_x[y] \) is the distance from \( x \) to \( y \), and \( C_x[y] \) is the link to follow from \( x \) to traverse the shortest path from \( x \) to \( y \).

These tables are constructed through a simple setup process, which can be made secure using the leap-frog or diverse key distribution schemes described earlier. The setup begins by having each router \( x \) poll its neighbors \( y \) to determine the state of the link from \( x \) to \( y \). This determination assigns a distance weight to the link, which can be binary (0 or 1) if we are only interested in whether the link is up or down, or it can be a numerical score reflecting the current bandwidth or latency of the link. After each router \( x \) has determined the states of all its adjacent links, it floods the network with a message containing a vector of all the distances it has determined to its neighbors.

Under our protected scheme, this flooding process is performed using the leap-frog, chromatic leap-frog, or diverse key distribution methods. Once the computation completes correctly, we compute the vectors \( D_x \) and \( C_x \) for each router \( x \) by applying Dijkstra's shortest path algorithm locally.

Thus, by utilizing a secure flooding algorithm, we can ensure the integrity of the setup for the link-state routing algorithm. Securing the setup for another well-known routing algorithm, such as the distance-vector algorithm, requires additional steps, as we will explore in the next section.

### 4.2 Achieving Integrity in the Setup for Distance-Vector Routing

Another important routing setup algorithm is the distance-vector algorithm, which is the basis of the well-known RIP (Routing Information Protocol). Similar to the link-state algorithm, the setup for the distance-vector algorithm creates for each router \( x \) in \( G \) a vector \( D_x \) of distances from \( x \) to all other routers, and a vector \( C_x \) indicating the next hop to follow from \( x \) to traverse the shortest path to a given router. However, unlike the link-state algorithm, the distance-vector algorithm produces these tables in a series of rounds.

#### 4.2.1 Reviewing the Distance-Vector Algorithm

Initially, each router \( x \) sets \( D_x[y] \) equal to the weight \( w(x, y) \) of the link from \( x \) to \( y \), if such a link exists. If there is no such link, then \( x \) sets \( D_x[y] = +\infty \). In each round, each router \( x \) sends its distance vector to each of its neighbors. Then, each router \( x \) updates its tables by performing the following computation:

```plaintext
for each router y adjacent to x do
    for each other router w do
        if D_x[w] > w(x, y) + D_y[w] then
            {It is faster to first go to y on the way to w.}
            Set D_x[w] = w(x, y) + D_y[w]
            Set C_x[w] = y
        end if
    end for
end for
```

The computation at each router \( x \) can be modeled as finding the minimum of a collection of values sent to \( x \) from adjacent routers, plus some comparisons, arithmetic, and assignments. To secure the distance-vector algorithm, the essential task is to verify that the router \( x \) has correctly computed this minimum value. We will use the leap-frog idea to achieve this goal.

#### 4.2.2 Securing the Setup for the Distance-Vector Algorithm

Since the main algorithmic portion in testing the correctness of a round of the distance-vector algorithm involves validating the computation of a minimum of a collection of values, let us focus more specifically on this problem. Suppose we have a node \( x \) that is adjacent to a collection of nodes \( y_0, y_1, \ldots, y_{d-1} \), and each node \( y_i \) sends to \( x \) a value \( a_i \). The task for \( x \) is to compute:

\[ m = \min_{i=0,1,\ldots,d-1} \{a_i\} \]

in a way that all the \( y_i \)'s are assured that the computation was done correctly. As in previous sections, we assume that at most one router will be corrupted during the computation. In this case, the router that we consider as possibly corrupted is \( x \) itself. The neighbors of \( x \) must therefore be able to verify every computation that \( x \) performs. To aid in this verification, we assume a preprocessing step has shared a key \( k(x) \) with all \( d \) neighbors of \( x \), but not with \( x \).

The algorithm that \( x \) will use to compute \( m \) is the trivial minimum-finding algorithm, where \( x \) iteratively computes the prefix minimum values:

\[ m_j = \min_{i=0,\ldots,j} \{a_i\} \]

for \( j = 0, \ldots, d-1 \). Thus, the output from this algorithm is simply \( m = m_{d-1} \). The secure version of this algorithm proceeds in four communication rounds:

1. Each router \( y_i \) sends its value \( a_i \) to \( x \) as \( A_i = (a_i, h(a_i || k(x))) \) for \( i = 0, 1, \ldots, d-1 \).
2. The router \( x \) computes the \( m_i \) values and sends the message \( (m_{i-1}, m_i, A_{i-1 \mod d}, A_{i+1 \mod d}) \) to each \( y_i \). The validity of \( A_{i-1 \mod d} \) and \( A_{i+1 \mod d} \) is checked by each \( y_i \) using the secret key \( k(x) \). Each \( y_i \) also checks that \( m_i = \min\{m_{i-1}, a_i\} \).
3. If the check succeeds, each router \( y_i \) sends its verification of this computation to \( x \) as \( B_i = (\text{"yes"}, i, m_i, h(\text{"yes"} || m_i || i || k(x))) \). For added security, \( y_i \) can seed this otherwise short message with a random number.
4. The router \( x \) sends the message \( (B_{i-1 \mod d}, B_{i+1 \mod d}) \) to each \( y_i \). Each \( y_i \) checks the validity of these messages and that they all indicated "yes" as their answer to the check on \( x \)'s computation. This completes the computation.

In essence, the above algorithm checks each step of \( x \)'s iterative computation of the \( m_i \)'s. Rather than doing this checking sequentially, which would take \( O(d) \) rounds, we perform this check in parallel, in \( O(1) \) rounds.

### 5 Conclusion

We have described two techniques—leap-frog packet linking and diverse key distributions—for improving the integrity of network broadcasts and multicasts. We have also provided applications of these techniques to the setup algorithms for the link-state and distance-vector routing algorithms.

During the routing phases, these two techniques offer useful tradeoffs. Leap-frog packet linking adds only two additional values to the payload of a packet and can tolerate no adjacent colluding malicious routers on a path. The diverse key distribution technique, on the other hand, adds up to \( O(\log n) \) values to the data payload but can tolerate small colluding sets of malicious routers. Both techniques provide data integrity at low storage and computational overhead per device.

### Acknowledgments

We would like to thank Amitabha Bagchi, Luke Bao, and Amitabh Chaudhary for helpful discussions related to the topics of this paper prior to its acceptance in IEEE S&P, and Radia Perlman for valuable discussions post-acceptance. This research was supported in part by NSF grants CCR-0225642, CCR-0311720, and CCR-0312760.

### References

[1] R. Blom. An optimal class of symmetric key generation systems. In Advances in Cryptography: EUROCRYPT, volume 209 of Lecture Notes in Computer Science, pages 335–338, 1985.

[2] K. A. Bradley, S. Cheung, N. Puketza, B. Mukherjee, and R. A. Olsson. Detecting disruptive routers: A distributed network monitoring approach. In IEEE Symposium on Security and Privacy, pages 115–124, 1998.

[3] H. Chan, A. Perrig, and D. Song. Random key predistribution schemes for sensor networks. In Proc. of the IEEE Security and Privacy Symposim, pages 197–213, 2003.

[4] S. Cheung. An efficient message authentication scheme for link state routing. In 13th Annual Computer Security Applications Conference, pages 90–98, 1997.

[5] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms. MIT Press, Cambridge, MA, 2nd edition, 2001.

[6] W. Dai. Speed and benchmarks for various ciphers and hash functions. http://www.eskimo.com/∼weidai/benchmarks.html.

[7] W. Du, J. Deng, Y. S. Han, and P. K. Varshney. A pairwise key pre-distribution scheme for wireless sensor networks. In 10th ACM Conf. on Computer and Communication Security (CCS), pages 42–51, 2003.

[8] L. Eschenauer and V. Gligor. A key management scheme for distributed sensor networks. In 9th ACM Conf. on Computer and Communication Security (CCS), pages 41–47, 2002.

[9] J. A. Garay, J. Staddon, and A. Wool. Long-lived broadcast encryption. In Advances in Cryptology – CRYPTO 2000, LNCS, pages 333–352. Springer-Verlag, 2000.

[10] M. T. Goodrich and R. Tamassia. Algorithm Design: Foundations, Analysis, and Internet Examples. John Wiley & Sons, New York, NY, 2002.

[11] M. Guerrero-Zapata and N. Asokan. Securing ad hoc routing protocols. In ACM Workshop on Wireless Security, pages 1–10, 2002.

[12] R. C. Hauser, T. Przygienda, and G. Tsudik. Lowering security overhead in link state routing. Computer Networks, 31(8):885–894, 1999.

[13] Y.-C. Hu, A. Perrig, and D. B. Johnson. Efficient security mechanisms for routing protocols. In Network and Distributed System Security Symposium (NDSS), pages 57–73, 2003.

[14] J. Hwang and Y. Kim. Revisiting random key pre-distribution schemes for wireless sensor networks. In 2nd ACM Workshop on Security in Ad Hoc and Sensor Networks, pages 43–52, 2004.

[15] C. Kaufman, R. Perlman, and M. Speciner. Network Security: Private Communication in a Public World. Prentice-Hall, Englewood Cliffs, NJ, 1995.

[16] S. Kent, C. Lynn, J. Mikkelson, and K. Seo. Secure boarder gateway protocol (S-BGP) – real world performance and deployment issues. In Symposium on Network and Distributed Systems Security (NDSS ’00), pages 103–116, 2000.

[17] J. Konh, P. Zerfos, H. Luo, S. Lu, and L. Zhang. Providing robust and ubiquitous security support for mobile ad-hoc networks. In 9th IEEE Int. Conf. on Network Protocols (ICNP), pages 251–260, 2001.

[18] D. Liu and P. Ning. Establishing pairwise keys in distributed sensor networks. In 10th ACM Conf. on Computer and Communication Security (CCS), pages 52–61, 2003.

[19] R. Motwani and P. Raghavan. Randomized Algorithms. Cambridge University Press, New York, NY, 1995.

[20] S. Murphy, M. Badger, and B. Wellington. RFC 2154: OSPF with digital signatures, June 1997. Status: EXPERIMENTAL.

[21] S. Murphy, O. Gudmundsson, R. Mundy, and B. Wellington. Retrofitting security into internet infrastructure protocols. In DARPA Information Survivability Conference and Exposition (DISCEX), pages 3–17. IEEE Computer Society Press, 2000.

[22] S. L. Murphy and M. R. Badger. Digital signature protection of OSPF routing protocol. In 1996 Internet Society Symp. on Network and Distributed System Security (NDSS), pages 93–102, 1996.

[23] P. Papadimitratos and Z. J. Haas. Secure link state routing for mobile ad hoc networks. In Symp. on Applications and the Internet Workshops, page 379, 2003.

[24] R. Perlman. Network Layer Protocol with Byzantine Agreement. PhD thesis, The MIT Press, Oct. 1988. LCS TR-429.

[25] R. Perlman. Interconnections, Second Edition: Bridges, Routers, Switches, and Internetworking Protocols. Addison-Wesley, Reading, MA, USA, 2000.

[26] R. L. Rivest. MIT 6.857 computer and network security class notes. http://theory.lcs.mit.edu/∼rivest/notes/notes.pdf.

[27] K. Sanzgiri, B. Dahill, B. N. Levine, C. Shields, and E. M. Belding-Royer. A secure routing protocol for ad hoc networks. In 10th IEEE Int. Conf. on Network Protocols (ICNP), pages 78–89, 2002.

[28] B. Schneier. Applied Cryptography: protocols, algorithms, and source code in C. John Wiley and Sons, Inc., New York, 1994.

[29] B. R. Smith, S. Murthy, and J. Garcia-Luna-Aceves. Securing distance-vector routing protocols. In Symposium on Network and Distributed Systems Security (NDSS ’97), 1997.

[30] D. R. Stinson, T. van Trung, and R. Wei. Secure frame-proof codes, key distribution patterns, group testing algorithms and related structures. Journal of Statistical Planning and Inference, 86:595–617, 2000.

[31] B. Vetter, F.-Y. Wang, and S. F. Wu. An experimental study of insider attacks for the OSPF routing protocol. In 5th IEEE International Conference on Network Protocols, 1997.

[32] S. F. Wu, F.-Y. Wang, Y. F. Jou, and F. Gong. Intrusion detection for link-state routing protocols. In IEEE Symposium on Security and Privacy, 1997.

[33] K. Zhang. Efficient protocols for signing routing messages. In Symposium on Network and Distributed Systems Security (NDSS ’98), San Diego, California, 1998. Internet Society.

[34] S. Zhu, S. Xu, S. Setia, and S. Jajodia. Establishing pairwise keys for secure communication in ad hoc networks: A probabilistic approach. In 11th IEEE International Conference on Network Protocols (ICNP), pages 326–335, 2003.

[35] S. Zhu, S. Xu, S. Setia, and S. Jajodia. LHAP: A lightweight hop-by-hop authentication protocol of ad-hoc networks. In 23rd International Conference on Distributed Computing Systems, page 749, 2003.

Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE