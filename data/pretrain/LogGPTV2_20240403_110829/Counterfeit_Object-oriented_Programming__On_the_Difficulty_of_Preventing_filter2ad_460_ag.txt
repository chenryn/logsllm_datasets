control: Overcoming control-ﬂow integrity.
Security and Privacy, 2014.
[26] E. G¨oktas¸, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Por-
tokalidis. Size does matter: Why using gadget-chain length to prevent
code-reuse attacks is hard. In USENIX Security Symposium, 2014.
[27] Y. Guillot and A. Gazet. Automatic binary deobfuscation. Journal in
Comp. Virology, 2010.
[28] R. Hund, C. Willems, and T. Holz. Practical timing side channel
In IEEE Symposium on Security
attacks against kernel space ASLR.
and Privacy, 2013.
[29] D. Jang, Z. Tatlock, and S. Lerner. SAFEDISPATCH: Securing C++
virtual calls from memory corruption attacks. In Symposium on Network
and Distributed System Security (NDSS), 2014.
[30] N. Joly. Advanced exploitation of Internet Explorer 10 / Windows
http://www.vupen.com/blog/
8
20130522.Advanced Exploitation of IE10 Windows8 Pwn2Own
2013.php, 2013.
overﬂow (Pwn2Own
2013).
[31] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song.
In USENIX Symposium on Operating Systems
Code-pointer integrity.
Design and Implementation (OSDI), 2014.
[32] M. Matz, J. Hubicka, A. Jaeger, and M. Mitchell. System V Application
Binary Interface: AMD64 architecture processor supplement. http://x86-
64.org/documentation/abi.pdf, 2013.
Data Execution
Prevention
//support.microsoft.com/kb/875352/EN-US/, 2006.
[33] Microsoft.
(DEP).
http:
[34] Microsoft Corp. Enhanced mitigation experience toolkit (EMET) 5.1.
http://technet.microsoft.com/en-us/security/jj653751, November 2014.
[35] Microsoft Developer Network. Argument passing and naming conven-
tions. http://msdn.microsoft.com/en-us/library/984x0h58.aspx.
[36] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. CETS:
Compiler enforced temporal safety for C. In International Symposium
on Memory Management, 2010.
[37] Nergal. The advanced return-into-lib(c) exploits: PaX case study. http:
//phrack.org/issues/58/4.html, 2001.
[38] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-Free:
Defeating return-oriented programming through gadget-less binaries. In
Anual Computer Security Applications Conference (ACSAC), 2010.
[39] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the
gadgets: Hindering return-oriented programming using in-place code
randomization. In IEEE Symposium on Security and Privacy, 2012.
760
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX
edi, edi
ebp
ebp, esp
ecx
ecx
esi
esi, ecx
eax, [esi+3ACh]
mov
push
mov
push
push
push
mov
lea
; -- inlined constructor of iterator --
mov
mov
; --
[ebp+iterator.end], eax
[ebp+iterator.current], eax
loop:
lea
call
test
jnz
mov
push
mov
mov
call
jmp
end:
pop
mov
pop
ret
ecx, [ebp+iterator]
SListBase::Iterator::Next()
al, al
end
eax, [ebp+iterator.current]
[esi+140h] ; push argument field
ecx, [eax+4] ; read object pointer from iterator
eax, [ecx]
[eax+4] ; call 2nd virtual function
loop
esi
esp, ebp
ebp
Listing A.1: Assembly code of ML-ARG-G in jscrip9.dll
version 10.0.9200.16521 used in exemplary Internet Explorer
10 32-bit exploit: a linked list of object pointers is traversed; a
virtual function with one argument is invoked on each object.
[40] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP
In USENIX Security
exploit mitigation using indirect branch tracing.
Symposium, 2013.
[41] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict protection for virtual
function calls in COTS C++ binaries. In Symposium on Network and
Distributed System Security (NDSS), 2015.
[42] M. Russinovich, D. A. Solomon, and A. Ionescu. Windows Internals,
Part 1. Microsoft Press, 6th edition, 2012.
[43] F. Schuster, T. Tendyck, J. Pewny, A. Maaß, M. Steegmanns, M. Contag,
and T. Holz. Evaluating the effectiveness of current anti-ROP defenses.
In Symposium on Research in Attacks, Intrusions and Defenses (RAID),
2014.
[44] J. Seibert, H. Okhravi, and E. S¨oderstr¨om. Information leaks without
memory disclosures: Remote side channel attacks on diversiﬁed code.
In Proceedings of ACM Conference on Computer and Communications
Security (CCS), 2014.
[45] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. Address-
Sanitizer: A fast address sanity checker. In USENIX Annual Technical
Conference, 2012.
[46] H. Shacham. The geometry of innocent ﬂesh on the bone: Return-
into-libc without function calls (on the x86). In Proceedings of ACM
Conference on Computer and Communications Security (CCS), 2007.
[47] R. Skowyra, K. Casteel, H. Okhravi, N. Zeldovich, and W. Streilein.
Systematic analysis of defenses against return-oriented programming.
In Symposium on Research in Attacks, Intrusions and Defenses (RAID),
2013.
[48] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-
R. Sadeghi. Just-in-time code reuse: On the effectiveness of ﬁne-grained
address space layout randomization.
In IEEE Symposium on Security
and Privacy, 2013.
[49] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-
R. Sadeghi. Just-in-time code reuse: On the effectiveness of ﬁne-grained
address space layout randomization.
In IEEE Symposium on Security
and Privacy, 2013.
[50] B. Stroustrup. The C++ Programming Language, 4th Edition. Addison-
Wesley, 4th edition, 2013.
[51] L. Szekeres, M. Payer, T. Wei, and D. Song. Sok: Eternal war in memory.
In IEEE Symposium on Security and Privacy, 2013.
[52] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,
´U. Erlingsson,
L. Lozano, and G. Pike. Enforcing forward-edge control-ﬂow integrity
in GCC & LLVM. In USENIX Security Symposium, 2014.
[53] M. Tran, M. Etheridge, T. Bletsch, X. Jiang, V. Freeh, and P. Ning. On
the expressiveness of return-into-libc attacks. In Symposium on Research
in Attacks, Intrusions and Defenses (RAID), 2011.
[54] M. Vishwath, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz.
In Symposium on Network and Dis-
Opaque control-ﬂow integrity.
tributed System Security (NDSS), 2015.
[55] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring:
Self-randomizing instruction addresses of legacy x86 binary code.
In
Proceedings of ACM Conference on Computer and Communications
Security (CCS), pages 157–168, 2012.
[56] Y. Xia, Y. Liu, H. Chen, and B. Zang. CFIMon: Detecting violation
In IEEE/IFIP
of control ﬂow integrity using performance counters.
Conference on Dependable Systems and Networks (DSN), 2012.
[57] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song. VTint:
Defending virtual function tables integrity. In Symposium on Network
and Distributed System Security (NDSS), 2015.
[58] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou. Practical control ﬂow integrity and randomization
for binary executables. In IEEE Symposium on Security and Privacy,
2013.
[59] M. Zhang and R. Sekar. Control ﬂow integrity for COTS binaries. In
USENIX Security Symposium, 2013.
[60] H. Zhou, X. Wu, W. Shi, J. Yuan, and B. Liang. HDROP: Detecting ROP
attacks using performance monitoring counters. In Information Security
Practice and Experience. Springer International Publishing, 2014.
761
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
Symbol name of vfgadget (mshtml.dll Win. 7 64-bit)
CExtendedTagNamespace::Passivate
CCircularPositionFormatFieldIterator::Next
XHDC::SetHighQualityScalingAllowed
CWigglyShape::OffsetShape
CStyleSheetArrayVarEnumerator::MoveNextInternal
CDataCache::InitData
CRectShape::OffsetShape
Ptls6::CLsBlockObject::Display
# in attack code
1, 9b
2, 5, 7, 9a, 10b
3
4
6
8
10a, 11b
11a, 12b
Vfgadget type
ML-G
LOAD-R64-G
ARITH-G
LOAD-R64-G
LOAD-R64-G
W-COND-G
ARITH-G
INV-G
Function
array-based main loop
load rdx from dereferenced ﬁeld
store rdx&1
load r9 from ﬁeld
load r8 from ﬁeld
write r8 to [rdx] if r9 is not zero
add [rdx] to ﬁeld
invoke ﬁeld as function pointer
TABLE A.I: Vfgadgets in mshtml.dll 10.0.9200.16521 used in exemplary Internet Explorer 10 64-bit exploit (§V-A); execution
splits into paths a and b after index 8.
Symbol name of vfgadget (mshtml.dll Win. 7 64-bit)
CExtendedTagNamespace::Passivate
CMarkupPageLayout::IsTopLayoutDirty
HtmlLayout::GridBoxTrackCollection::GetRangeTrackNumber
CAnimatedCacheEntryTyped::UpdateValue
# in attack code
1
2, 4
3
4
Vfgadget type
ML-G
LOAD-R64-G
ARITH-G
INV-G
Function
array-based main loop
load edx from ﬁeld
r8 = 2 · rdx
invoke ﬁeld from argument as
function pointer
TABLE A.II: Vfgadgets in mshtml.dll 10.0.9200.16521 used in exemplary Internet Explorer 10 64-bit exploit that only uses
vptrs pointing to the beginning of existing vtables (§V-A1)
Symbol name of vfgadget
jscript9!ThreadContext::
ResolveExternalWeakReferencedObjects
CDataTransfer::Proxy
CDCompSwapChainLayer::SetDesiredSize
CDCompSurfaceTargetSurface::GetOrigin
CDCompLayerManager::
SetAnimationCurveToken
HtmlLayout::SvgBoxBuilder::
PrepareBoxForDisplay
CDXTargetSurface::OnEndDraw
ieframe!Microsoft::WRL::
Callback::ComObject::Invoke
CMarkupPageLayout::AddLayoutTaskOwnerRef
Ptls6::CLsDnodeNonTextObject::
SetDurFmtCore
CDispRecalcContext::
OnBeforeDestroyInitialIntersectionEntry
# in attack code
1
Vfgadget type
ML-ARG-G
Function
linked list-based main loop
2
3
4
5
W-SA-G
R-G
ARITH-G and W-SA-G
R-G
write deref. ﬁeld to scratch area
load ﬁeld from scratch area
write summation of two ﬁelds to scratch area
load ﬁeld from scratch area
loop entry: 6, 11 W-G
7, 8
9
10
12
loop exit
MOVE-SP-G
INV-G
ARITH-G
W-COND-G
NOP
rewrite argument ﬁeld
move stack pointer up
invoke function pointer with 2 arguments
increment ﬁeld
conditionally write argument
linked list; resumes at loop entry or loop exit
nop; loops to self
to ﬁeld;
rewrites
TABLE A.III: Vfgadgets used in exemplary Internet Explorer 10 32-bit exploit (§V-B); vfgadgets taken from mshtml.dll (if
not marked differently), jscript9.dll, or ieframe.dll version 10.0.9200.16521.
Symbol name of vfgadget (libxul.so Linux 64-bit)
nsMultiplexInputStream::Close
mozilla::a11y::xpcAccessibleGeneric::˜xpcAccessibleGeneric
and
js::jit::MVariadicInstruction::getOperand
nsDisplayItemGenericGeometry::MoveBy
ProfileSaveEvent::AddSubProfile
1
2, 4
3
5
# in attack code
Vfgadget type
ML-G
LOAD-R64-G
Function
array-based main loop
load rsi from memory
ARITH-G
INV-G
add [rsi] to ﬁeld
invoke ﬁeld as function pointer
TABLE A.IV: Vfgadgets used in exemplary Firefox 36.0a1 64-bit exploit (§V-C)
762
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply.