ACM (Authorized Code Module, such as TXT’s SINIT) and
has fewer requirements for the measured program (called SLB
in SVM and MLE in TXT). Nevertheless,
they share the
security properties we need for Inuksuk so we refer to them
undistinguished as TXT/SVM hereinafter. When individual
terms are used, the discussion is speciﬁc to one.
Note that TXT/SVM has different positioning than Intel
SGX and can handle privileged instructions, e.g., device I/O
as needed by Inuksuk. They do not replace each other. TXT
is widely supported by many commercial-off-the-shelf Intel
CPUs,3 and SVM (SKINIT) is available in almost all modern
AMD CPUs.
TPM. Trusted Platform Module is a microchip, serving as the
SE for TEEs (usually TXT or SVM). Its volatile secure storage
includes PCRs (Platform Conﬁguration Registers) where the
run-time measurement can be stored and matched with. They
can not be directly accessed but only extended (i.e., replaced
347 CPUs released in 2018 as of Dec. 6 (ark.intel.com).
3
with the cryptographic hash value of its original value con-
catenated with the new measurement). Its non-volatile secure
storage is called NVRAM, which is accessible in the form of
index (a numeric identiﬁer). NVRAM indices can be allocated
and deallocated and there can be multiple of them.
Sealing. Short for cryptographic sealing, it is a special mode
of encryption, provided by TEEs/SE, where the key is tied
(in various ways) largely to the machine state, in the form
of measurement. Measurement is the chaining of the loaded
programs in sequence, e.g., concatenation of hashed values
in the SE. Any single bit of change in loaded programs will
cause a mismatch of measurement, making the reproduced key
different, and thus render the decryption (unsealing) to fail. In
this way, platform binding is achieved.
Flicker [42]. Before the introduction of Flicker, Intel TXT was
mostly applied with the pilot project tboot, which deals with
boot-time trusted execution (cf. OSLO [28] for AMD SVM).
The ability to switch between the regular OS environment
and the trusted execution was not available. Flicker enables
such transitions, e.g., interrupting and saving states for the OS,
initiating the TXT/SVM session, performing trusted operations
and resuming the OS. The trusted operations are encapsulated
in what is called a PAL (Piece of Application Logic) and thus
OS-agnostic. It satisﬁes what is needed in Inuksuk.
Self-Encrypting Drive. With the same interface and form
factor, regular hard drives or SSDs can be equipped with a
built-in crypto engine and certain enhancement to the con-
troller, thus providing on-device encryption and access control.
Such devices are called Self-Encrypting Drives (SEDs) [8].
Instead of more generic secure processing, functionalities are
mainly related to media access control and data encryption
(e.g., with the so-called Device Encryption Key). Most SEDs
offer ﬁne-grained protection, such as dividing media space
into ranges and splitting read/write accesses. In addition to
the standard ATA interface, Trusted Computing Group (TCG)
also has its open standard named Opal/Opal2 [69] for SEDs.
What Inuksuk needs is the ﬁne-grained programmable write
protection enforcement (data secrecy not as a goal).
III. THREAT MODEL AND ASSUMPTIONS
1) We assume that malware/ransomware can acquire the
highest software privileges on a system (e.g., root/ad-
min or even ring-0 on x86),
through any traditional
mechanisms (often used by rootkits), including: known
but unpatched vulnerabilities, zero-day vulnerabilities, and
social-engineering. Root-level access allows malware to
control devices (e.g., keyboard, network interface), GUI,
installation/removal of device drivers.
2) Before deployment of Inuksuk,
the user system is not
infected by any malware. We primarily protect preexisting
data at the time of malware/ransomware infection, and
provide best-effort protection thereafter for later added/up-
dated ﬁles until the malware/ransomware is detected (or a
ransom is demanded).
3) We do not detect/stop the execution of malware, or identify
its actions. Instead, we protect integrity of user data on a
protected partition and ensure data accessibility. If the OS
is completely corrupted or inoperable, the user can install
a new OS copy or boot from another media (e.g., USB)
to access her data.
4) In the speciﬁc case of ransomware, we deal with the most
common variants (i.e., cryptoviral extortion), and exclude
those that simply lock access to system resources without
using encryption (non-encrypting ransomware [52]) or
deletion, and those that threaten to publish information
stolen from the user (doxware or leakware [50]).
5) We assume all hardware (e.g.,
storage device), microcode/ﬁrmware
the CPU/chipset and
the
and other
architecture-shipped modules (e.g., TXT’s SINIT, see Sec-
tion II) are properly implemented by the manufactures,
and the user is motivated to choose a system with no
known ﬂaws. An example of such a ﬂaw is a series
of recently identiﬁed implementation bugs [43] in SED
ﬁrmware implementations that highly affect data secrecy
(refer to Section VI for details).
6) Attacks requiring physical access are excluded (e.g., no
evil-maid attacks). We only consider a computer system
potentially infected by malware/ransomware from the net-
work or a removable drive.
7) We assume that after infection, ransomware will act im-
mediately; i.e., it will ﬁnd target user ﬁles, encrypt them,
and then demand a ransom without much delay (e.g.,
few minutes/hours, cf. [24] vs. months). If the attacker
waits, he risks of losing control, e.g., through an OS/anti-
malware update. With every patched computer, the attacker
loses money, and thus cannot remain hidden for long. To
accumulate ﬁle updates, the attacker may wait for some
time (i.e., long enough to collect sufﬁcient content that the
user may care), before asking for the ransom. We term
such attacks as persistent ransomware, and discuss them
more in Section VI, item (d).
IV. DESIGN
We ﬁrst deﬁne our design goals for Inuksuk, then explore
available/possible choices with one or multiple TEEs placed at
different locations of the storage data ﬂow and their implica-
tions; we illustrate our generalized design and its workﬂow by
choosing readily available COTS options. We explain certain
technical challenges/choices in Section V. The discussion will
start with and be based on the stand-alone mode of Inuksuk.
The network-based mode, which follows, just shifts the stand-
alone complex of TXT/SVM, TPM and SED to a network
location. The terms ransomware and malware in our setting of
unauthorized data alteration can be interchangeably used.
A. Design goals
We list our goals, and brieﬂy sketch the key ideas to fulﬁll
such goals in Inuksuk.
a) Enforcement by device. Rootkit malware must not be
able to modify or delete protected ﬁles. We place them in a
write-protected mode (read-only) all the time in the user OS.
The write protection must not be bypassed or broken by rootkit
and thus it must be enforced by the storage device, where the
protected partition resides, instead of any software on the host.
Therefore, without the appropriate authentication key (a high-
entropy random value, e.g., 256-bit long), the partition cannot
be unlocked, even if the OS is compromised (malware gains
all software permissions).
4
b) TEE-aided write protection. To allow updates, lifting the
write protection is inevitable at a certain point in time, during
which protected ﬁles can be compromised by rootkit malware.
In Inuksuk, write operations to the protected partition only
occur inside a TEE. The authentication key is protected by, and
bound to, this TEE (inaccessible from outside). All changes
are treated as new versions (retaining historical versions) and
infrequent (batch) deletions are performed with user interaction
or through policies.
c) Minimal application interference. Applications (includ-
ing the user OS) should operate as is. As the original ﬁles
are untouched by Inuksuk and accessed the same way by
applications, normal application I/O is not hindered (even for
direct I/O as in disk utilities). File copies on the protected
partition are available as read-only, which should not concern
regular applications.
d) Minimal user involvement. User experience should not
be signiﬁcantly affected. A normal user experience is preserved
in Inuksuk with the separation of the original and protected
copies. To reduce system unavailability for the stand-alone
mode, the update/commit process should be scheduled during
idle hours, and all updates to the original copy are cached to
be committed as a new version periodically (e.g., every 8–12
hours). The user can also choose the network-based mode as
discussed in Section IV-F to avoid unavailability. The user is
involved only when ﬁles must be deleted (sometimes including
removal of old versions), and manually triggering Inuksuk (for
immediate commitment of cached ﬁles, when the important
ﬁles are just edited/added).
Non-goals. Inuksuk is designed to act more like a data vault
than a traditional backup system; e.g., we commit user data
a few times a day in batches, instead of syncing updates
instantly. Also, it adds another layer of protection to high-value
user data, complementing existing backup systems. Namely,
OS/application binaries should not reside on the protected
partitions; regular user data may already be backed up (e.g.,
to certain cloud storage). We provide robust data integrity
against advanced attacks at the expense of losing some data
due to ransomware attacks (e.g., user updates to a ﬁle during
the commit period). Also, data conﬁdentiality is currently
a non-goal (to facilitate unhindered operations of common
applications); i.e., the ransomware can read all protected user
data, and read/modify the OS/unprotected partitions. However,
conﬁdentiality and controlled read access can be easily sup-
ported; e.g., encrypting data under Inuksuk-protected keys, and
enabling password-based access control for read operations on
selected ﬁles.
B. Trusted ﬁle versioning
We treat all write operations to the original copy (consol-
idated in one commit) as adding new ﬁles to the protected
partition (automatically approved, similar to S4 [60]), which
poses no threat to existing ﬁles, leaving only solicited ﬁle
deletion (as opposed to version deletion) with user interven-
tion. Any committed update to an existing ﬁle creates a new
version, instead of overwriting the current version (the latest
one being under the original ﬁle name) so that historical
changes committed are all retained on the protected partition.
For space management, we leave it to the user to either clean
up in the mini ﬁle browser we developed (see Section V-E
for details), or conﬁgure an auto-deletion policy based on
aging (e.g., after 1–2 years) or version-limiting (e.g., maximum
100 versions). The eventual choice is largely determined by
the user’s budget and needs. Our simple versioning may not
impose a signiﬁcant burden on the storage space, considering:
a) We commit changes to the protected partition through
scheduled invocation of Inuksuk; users can explicitly trigger
the updater to commit important changes immediately, which
we believe would be infrequent. So the number of versions
that will be stored for a continuously updated ﬁle would still
be limited, e.g., 1–4 times a day. Auto-save in applications or
ﬁle access-time change do not trigger an update (it is only on
the original copy). b) Nowadays, disk storage is less costly
and user computers are usually over-provisioned. To improve
storage utilization, speciﬁcally for large ﬁles, more space-
efﬁcient versioning algorithms may be adopted (e.g., S4 [60]).
Also, refer to the ﬁle selection principles discussed below for
optimal scenarios.
User consent
is mandatory when ﬁles (as opposed to
versions) are to be deleted. File versions can optionally be
deleted manually by the user. We allow deletion operations in
the mini ﬁle browser within the trusted environment, where the
user is asked to select explicitly which ﬁle(s) to delete. User
consent is not needed in the case of auto-deletion of versions.
Direct ﬁle deletion in the protected partition outside the trusted
environment will be ignored;deletion of the original copy in the
unprotected partition will not be synchronized to the protected
partition. We also hide old versions from the user OS to help
usability. When a new version is committed, we rename the
previous copy by appending its timestamp with the ﬁle name,
and keep the new version with the original name.
Automatic stale version deletion. To relieve users from delet-
ing unnecessary old versions of the same ﬁle, Inuksuk can be
conﬁgured to automatically delete such versions after a certain
time (aging) or number of versions (version-limiting). The
retention duration should be long enough to hurt ransomware’s
business model. For example, if an attacker needs to wait more
than a year to monetize his ransomware, it might become
much less attractive than now. Defenders are likely to generate
reliable detection mechanisms (e.g., signatures) within the wait
period, and even be able to identify the attackers. Calculation
of the time duration (for aging) must be done appropriately,
if there is no trusted time source available within the TEE
(e.g., TXT/SVM). As rootkits can change system time, ﬁle
creation/update time as available from the user OS ﬁle system
cannot be trusted. A simple solution could be to use digitally
signed time value from an NTP service,4 where the signature
veriﬁcation is done within the TEE. The signed value can
be obtained through the user OS, and must be sent for each
ﬁle commit session. The trusted updater must store the last
accepted signed value along with NTP veriﬁcation keys, and
check the new timestamp to detect replay (the time value
should always be increasing).
File selection principles. Although technically we are not
restricted in terms of ﬁle types, to optimize the user’s budget
and needs, the user is recommended to follow a few principles:
4See Section 6.2.2 at http://www.ntp.org/ntpfaq/NTP-s-conﬁg-adv.htm. Al-
ternatively, time-stamping services, implemented by several CAs (following
RFC 3161), can also be used.
• Targeted. The user identiﬁes what she cannot afford to
lose (must pay ransom for). For example, an HD movie
of 5GB that can always be redownloaded should not be
selected for protection. However, we do consider such
valid needs (e.g., of a movie editor), where corresponding
high-capacity disk space is assumed affordable.
• Minimal. The user should reduce redundancy from the
selected ﬁles. For instance, a mobile app developer may