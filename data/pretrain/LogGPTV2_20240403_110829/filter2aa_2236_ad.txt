    current+=1
  if opcode[current]==0xa0:
    print 'assert(mem[1]==0x26F8D100) & current+=1'
    current+=1
  if opcode[current]==0x9:
    print 'mem[1]=0xffe8bc9a & current+=1'
    current+=1
  if opcode[current]==0x43:
    print 'mem[1]=mem[1]*mem[3] & current+=1'
    current+=1
  if opcode[current]==0x41:
    print 'mem[1]=mem[1]+mem[2] & current+=1'
    current+=1
  if opcode[current]==0xa4:
    print 'heap[0x%x]=mem[1] & current+=4'%(opcode[current+1])
    current+=4
  if opcode[current]==0x44:
    print 'mem[1]=mem[1]/mem[5] & current+=1'
    current+=1
  if opcode[current]==0x42:
    print 'mem[1]=mem[1]-mem[4] & current+=1'
    current+=1
  if opcode[current]==0xa1:
    print 'input your flag:0x21s  & current+=1'
    current+=1
  if opcode[current]==0xc1:
    print 'mem[1]=flag[0x%x] & current+=2'%(opcode[current+1])
    current+=2
  if opcode[current]==0xb1:
    print 'mem[9]=heap[0]& current+=1'
    current+=1
  if opcode[current]==0xc2:
    print 'assert(mem[1]==0x%x)& current+=5'%((opcode[current+3]>0x8)&0xff)/7+0x21
heap1=mem1
mem1=((0xffe8bc9a>>0x10)&0xff)^0xbb+0xff
heap2=mem1
mem1=((0xffe8bc9a>>0x18)&0xff)-0xa0+0x77
heap3=mem1
flag=[0]*0x20
flag0=0x10b^heap0
print chr(flag0&0xff)
flag[0]='G'
#mem1=flag1^heap1
flag[1]='A'
#mem1=flag2^heap3
flag[0x2]='C'
flag[0x3]='T'
flag[0x4]='F'
flag[0x5]='{'
flag[0x6]=chr(heap0^0x12f)
flag[0x7]=chr(heap2^0x165)
flag[0x8]=chr(heap0^0x12d)
flag[0x9]=chr(heap0^0x12f)
flag[0xa]=chr(heap2^0x139)
flag[0xb]=chr(heap2^0x10d)
flag[0xc]=chr(heap3^0xbb)
flag[0xd]=chr(heap1^0x8)
flag[0xe]=chr(heap2^0x10d)
Simulator
LC3http://highered.mheducation.com/sites/0072467509/student_view0/lc-3_simulat
or.html
flag[0xf]=chr(heap0^0x13f)
flag[0x10]=chr(heap2^0x13a)
flag[0x11]=chr(heap2^0x161)
flag[0x12]=chr(heap1^0x57)
flag[0x13]=chr(heap0^0x120)
flag[0x14]=chr(heap2^0x10d)
flag[0x15]=flag[0xf]
flag[0x16]=chr(heap2^0x13f)
flag[0x17]=chr(heap3^0xb5)
flag[0x18]=chr(heap0^0x113)
flag[0x19]=chr(heap3^0xa0)
flag[0x1a]=chr(heap0^0x121)
flag[0x1b]=chr(heap2^0x10d)
flag[0x1c]=chr(heap1^0xb)
flag[0x1d]=chr(heap2^0x139)
flag[0x1e]=chr(heap0^0x173)
flag[0x1f]=chr(heap1^0x46)
print flag
st=''
for i in flag:
  st+=i
print st
Memory:
x3000  1110000001111010  xE07A            LEA    R0, x307B       welcome
x3001  1111000000100010  xF022            TRAP   PUTS           
x3002  0010000001110111  x2077            LD     R0, x307A      
x3003  1111000000100001  xF021            TRAP   OUT            
x3004  1110000010010010  xE092            LEA    R0, x3097      
x3005  1111000000100010  xF022            TRAP   PUTS           
get_input: // 0x4000-0x4018
x3006  0010011011011110  x26DE            LD     R3, x30E5      
x3007  1111000000100000  xF020            TRAP   GETC           
x3008  1111000000100001  xF021            TRAP   OUT            
x3009  0010001011011010  x22DA            LD     R1, x30E4(input_ptr)      
x300A  0001001001000011  x1243            ADD    R1, R1, R3     
x300B  0111000001000000  x7040            STR    R0, R1, #0     
x300C  0001011011111111  x16FF            ADD    R3, R3, #-1    
x300D  0000100000000001  x0801            BRN    x300F          
x300E  0000111111111000  x0FF8            BRNZP  x3007         
x300F  1110100011101111  xE8EF            LEA    R4, x30FF      
x3010  0101010010100000  x54A0            AND    R2, R2, #0     
x3011  0001001010000100  x1284            ADD    R1, R2, R4     
x3012  0110001001000000  x6240            LDR    R1, R1, #0     
x3013  0101000000100000  x5020            AND    R0, R0, #0     
x3014  0010000001100010  x2062            LD     R0, x3077      0x11
x3015  1001000000111111  x903F            NOT    R0, R0         
x3016  0001000000100001  x1021            ADD    R0, R0, #1     
x3017  0001000001000000  x1040            ADD    R0, R1, R0     //=
x3018  0000010000001010  x040A            BRZ    x3023          
x3019  0010000001011110  x205E            LD     R0, x3078      0x013
x301A  1001000000111111  x903F            NOT    R0, R0         
x301B  0001000000100001  x1021            ADD    R0, R0, #1     
x301C  0001000001000000  x1040            ADD    R0, R1, R0     
x301D  0000010000010111  x0417            BRZ    x3035          
x301E  0010000001011010  x205A            LD     R0, x3079      x0014
x301F  1001000000111111  x903F            NOT    R0, R0         
x3020  0001000000100001  x1021            ADD    R0, R0, #1     
x3021  0001000001000000  x1040            ADD    R0, R1, R0     
x3022  0000010000100101  x0425            BRZ    x3048        
// opcode 0x11
R6 = opcode[ip+1]
R7 = input[opcode[ip+2]]
R0 = R6+R7
x3023  0001001010100001  x12A1            ADD    R1, R2, #1     
x3024  0001001100000001  x1301            ADD    R1, R4, R1     
x3025  0110001001000000  x6240            LDR    R1, R1, #0     
x3026  0001110001100000  x1C60            ADD    R6, R1, #0     
x3027  0001001010100010  x12A2            ADD    R1, R2, #2     
x3028  0001001100000001  x1301            ADD    R1, R4, R1     
x3029  0110001001000000  x6240            LDR    R1, R1, #0     
x302A  0010000010111001  x20B9            LD     R0, x30E4(input_ptr)      
x302B  0001000001100000  x1060            ADD    R0, R1, #0     
x302C  0110000000000000  x6000            LDR    R0, R0, #0     
x302D  0001111000100000  x1E20            ADD    R7, R0, #0     
x302E  0001101001100000  x1A60            ADD    R5, R1, #0     
x302F  0000111000101001  x0E29            BRNZP  x3059          
x3030  0010001010110011  x22B3            LD     R1, x30E4(input_ptr)      
x3031  0001001101000001  x1341            ADD    R1, R5, R1     
x3032  0111000001000000  x7040            STR    R0, R1, #0     
x3033  0001010010100011  x14A3            ADD    R2, R2, #3     
x3034  0000111111011100  x0FDC            BRNZP  x3011          
//opcode 0x13
R6 = input[opcode[ip+1]]
R7 = input[opcode[ip+2]]
input[opcode[ip+2]] = R6 ^ R7
x3035  0001001010100001  x12A1            ADD    R1, R2, #1     
x3036  0001001100000001  x1301            ADD    R1, R4, R1     
x3037  0110001001000000  x6240            LDR    R1, R1, #0     
x3038  0010000010101011  x20AB            LD     R0, x30E4(input_ptr)      
x3039  0001000000000001  x1001            ADD    R0, R0, R1     
x303A  0110110000000000  x6C00            LDR    R6, R0, #0     
x303B  0001001010100010  x12A2            ADD    R1, R2, #2     
x303C  0001001100000001  x1301            ADD    R1, R4, R1     
x303D  0110001001000000  x6240            LDR    R1, R1, #0     
x303E  0010000010100101  x20A5            LD     R0, x30E4(input_ptr)      
x303F  0001000000000001  x1001            ADD    R0, R0, R1     
x3040  0001101001100000  x1A60            ADD    R5, R1, #0     
x3041  0110111000000000  x6E00            LDR    R7, R0, #0     
x3042  0000111000011000  x0E18            BRNZP  x305B          
x3043  0010001010100000  x22A0            LD     R1, x30E4(input_ptr)      
x3044  0001001001000101  x1245            ADD    R1, R1, R5     
x3045  0111000001000000  x7040            STR    R0, R1, #0     
x3046  0001010010100011  x14A3            ADD    R2, R2, #3     
x3047  0000111111001001  x0FC9            BRNZP  x3011          
//opcode 0x14
R6 = opcode[ip+1]
R7 = 0x018 - opcode[ip+2]
input[R6] == x30E6[R7]
x3048  0001001010100001  x12A1            ADD    R1, R2, #1     
x3049  0001001100000001  x1301            ADD    R1, R4, R1     
x304A  0110001001000000  x6240            LDR    R1, R1, #0     
x304B  0001110001100000  x1C60            ADD    R6, R1, #0     
x304C  0001001010100010  x12A2            ADD    R1, R2, #2     
x304D  0001001100000001  x1301            ADD    R1, R4, R1     
x304E  0110001001000000  x6240            LDR    R1, R1, #0     
x304F  0010101010010101  x2A95            LD     R5, x30E5      //x0018
x3050  1001001001111111  x927F            NOT    R1, R1         
x3051  0001001001100001  x1261            ADD    R1, R1, #1     
x3052  0001101101000001  x1B41            ADD    R5, R5, R1     
x3053  0001111101100000  x1F60            ADD    R7, R5, #0     
x3054  0000111000001100  x0E0C            BRNZP  x3061          
x3055  0001101101100000  x1B60            ADD    R5, R5, #0     
x3056  0000010000010101  x0415            BRZ    x306C          success
x3057  0001010010100011  x14A3            ADD    R2, R2, #3     
x3058  0000111110111000  x0FB8            BRNZP  x3011          
x3059  0001000110000111  x1187            ADD    R0, R6, R7     
x305A  0000111111010101  x0FD5            BRNZP  x3030          
x305B  1001000110111111  x91BF            NOT    R0, R6         
x305C  0101000000000111  x5007            AND    R0, R0, R7     
x305D  1001001111111111  x93FF            NOT    R1, R7         
x305E  0101001110000001  x5381            AND    R1, R6, R1     
x305F  0001000001000000  x1040            ADD    R0, R1, R0     
x3060  0000111111100010  x0FE2            BRNZP  x3043     
x3061  0010000010000010  x2082            LD     R0, x30E4(input_ptr)      
x3062  0001000000000110  x1006            ADD    R0, R0, R6     
x3063  0110000000000000  x6000            LDR    R0, R0, #0     
x3064  1110001010000001  xE281            LEA    R1, x30E6      
x3065  0001001001000111  x1247            ADD    R1, R1, R7     
x3066  0110001001000000  x6240            LDR    R1, R1, #0     
x3067  1001001001111111  x927F            NOT    R1, R1         
x3068  0001001001100001  x1261            ADD    R1, R1, #1     
x3069  0001000000000001  x1001            ADD    R0, R0, R1     
x306A  0000010111101010  x05EA            BRZ    x3055          
x306B  0000111000000101  x0E05            BRNZP  x3071          wrong
success:
x306C  0010000000001101  x200D            LD     R0, x307A      
x306D  1111000000100001  xF021            TRAP   OUT            
x306E  1110000001000000  xE040            LEA    R0, x30AF      
x306F  1111000000100010  xF022            TRAP   PUTS           
x3070  0000111000000101  x0E05            BRNZP  x3076          
wrong:
x3071  0010000000001000  x2008            LD     R0, x307A      
x3072  1111000000100001  xF021            TRAP   OUT            
x3073  1110000001100101  xE065            LEA    R0, x30D9      
x3074  1111000000100010  xF022            TRAP   PUTS           
x3075  0000111000000000  x0E00            BRNZP  x3076          
x3076  1111000000100101  xF025            TRAP   HALT  
x3077  0000000000010001  x0011            NOP                   
x3078  0000000000010011  x0013            NOP                   
x3079  0000000000010100  x0014            NOP                   
x307A  0000000000001010  x000A            NOP
welcome: