3.1 Threat Model
We assume that site administrators have the ability to create and
control top-level URLs (static ﬁles or scripts) and that web browsers
will follow the instructions speciﬁed at these locations precisely.
In contrast, we do assume that the attacker controls arbitrary web
servers and some of the content on legitimate servers (but not their
policy ﬁles or their server software). Our goal is to prevent a web
browser from communicating with a malicious web server when a
legitimate web site is accessed, even if the content on that site or its
partners has been compromised.
These assumptions mean that we do not address situations where
an attacker compromises a web server to change policy ﬁles, com-
promises a web browser to circumvent policy checks, or performs
intruder-in-the-middle attacks to intercept and modify communi-
cations. Further, we do not address the problem of users visiting
malicious web sites directly, say as part of a phishing attack. While
these are all important types of attacks, by focusing on the prob-
lem of unapproved communication we can create a simple, practi-
cal solution that addresses the security concerns described in Sec-
tion 2. Mechanisms to address these other threats largely comple-
ment rather than overlap with the protections of SOMA (see Sec-
tion 6).
3.2 Manifest ﬁles
The ﬁrst part of SOMA we discuss is the manifest ﬁle, which
contains a list of domains from which the origin domain wishes
to allow included content. This idea is similar to the manifests
provided in Tahoma [7]. This manifest ﬁle is always stored in the
root directory and will have the name soma-manifest.
For example, the manifest ﬁle for maps.google.com would
be found at http://maps.google.com/soma-manifest
and might appear similar to Figure 1. If this ﬁle was set, the browser
would enforce that only content from those locations could be em-
bedded in a page coming from maps.google.com. Note that
each location deﬁnition includes protocol, domain and optionally
port (the default one for the protocol is used if none is speciﬁed),
so that origins are deﬁned the same way as in the current same ori-
gin policy.
http://maps.l.google.com
http://www.google.com
http://mt0.google.com
http://mt1.google.com
http://mt2.google.com
http://mt3.google.com
Figure 1: Sample manifest for maps.google.com
If the origin A has a manifest that contains B, we denote this
using AAB. This symbol is a visual way to indicate that A is
the origin (the outer cup) and B is a content provider web site for
that origin (the inner circle). Similarly, if A’s manifest does not
include C, we write ACC. If ACC then the browser will not
allow anything in the pages from A to contact the domain C, thus
code, images, iframes, or any other content will not be loaded from
C. Trust is not transitive (i.e. AAB and BAC does not imply
AAC).
By convention, it is not necessary to include the origin domain
itself in the manifest ﬁle as inclusions from the origin are assumed
to be allowed.
3.3 Approval ﬁles
The approval ﬁles provide the other side of the mutual approval
by allowing domains to indicate sites which are allowed to include
content from them. A SOMA approval ﬁle is similar in function
to Adobe Flash’s crossdomain.xml [1] but differs in that it is
not a single static ﬁle containing information about all approved
domains. Instead, it is a script that provides a YES/NO response
given a domain as input.
We use a script to prevent easy disclosure of the list of approved
to
domains, since such a list could be used by an attacker (e.g.
determine which sites could be used in a XSRF attack or to deter-
mine business relationships). Attackers may still generate such a
list by constantly querying soma-approval, but if they knew a
list of domains to guess, they could just as easily visit those do-
mains and see if they included any content from the target content
provider.
In addition, the smaller size of the approval responses
containing simple YES/NO answers may provide a modest perfor-
mance increase on the client side relative to the cost of loading
 ’YES’,
’C.net’ => ’YES’);
if (isset($site_policy[$_GET[’d’]])) {
print $site_policy[$_GET[’d’]];
} else {
print ’NO’;
}
?>
it images, text or JavaScript code. The web browser retrieves this
content and builds the page using it. It is important to note that it is
the web page (running in the web browser) and not the web server
that indicates the content, as scripts that are executed on the page
may request additional content.
Figure 2: Simple soma-approval script written in PHP
Web Server A
Web Server B
a complete list of approved sites (especially for highly connected
sites such as ad servers).
To indicate that A.com is allowed to load content from B.org,
B.org needs to provide a script in the web server root directory
with the ﬁlename soma-approval which returns YES when in-
voked through http://B.org/soma-approval?d=A.com.
Negative responses are indicated in a similar manner with the text
of NO. If a negative response is received, then the browser refuses
to load any content from B.org into a page from A.com. If no ﬁle
with the name soma-approval exists, then we assume a default
permissive behaviour, described in greater detail in Section 3.6.
To reject all approval requests, soma-approval need only be
a static ﬁle containing the string NO. Similarly,
a static
soma-approval with the word YES sufﬁces to approve all re-
quests.
An alternative proposal that avoids the need for a script involves
allowing soma-approval to be a directory containing ﬁles for
the allowed domains. Unfortunately, in order to handle our default
permissive behaviour, we would now require two requests: one to
see if the soma-approval directory exists and another to see if the
domain-speciﬁc ﬁle exists. Since most of the overhead of SOMA
lies in the network requests (as shown in Section 5), we believe the
better choice is to require a script.2
A sample soma-approval script, written in PHP, is shown in
Figure 2. This script uses an array to store policy information at the
top of the ﬁle then outputs the policy as requested, defaulting to NO
if no policy has been deﬁned. In this example, A.com and C.net are
the only approved domains.
The symbols used for denoting approval are similar to those used
for denoting inclusion in the manifest. If B approves of content
from its site being included into a page with origin A we show this
using BBA. Again, since B is the content provider it is connected
to the small inner circle, and the origin A is connected to the outer
cup. If B does not approve of another domain C, this is denoted
BDC. If BDC then the browser will refuse to allow the page
from C to contact B in any way. No scripts, images, iframes or
other content from B will be loaded for the web page at C. Similar
to manifests, trust is not transitive (i.e. ABB and BBC does not
imply ABC).
It is important to note that BBA is not the same as, nor does it
necessarily imply, that AAB. It is possible for one party to allow
the inclusion and the other to refuse. Content is only loaded if both
parties agree (i.e. (AAC) ∧ (CBA)).
Web Page
Web Browser
Web Server C
Web Server D
Figure 3: Inclusions allowed by the same origin policy
The additional constraints added by SOMA are illustrated in Fig-
ure 4. Rather than allowing all inclusions as requested by the web
page, the modiﬁed browser checks ﬁrst to see if both the page’s
web server and the external content’s web server approve of each
other. In Figure 4, web server A is the source of the web page to
be displayed. A has a manifest that indicates that it approves of
including content from both B and C (AAB and AAC). When
the browser is asked to include content from B in the page from A,
it makes a request to B to determine if BBA (B approves of A
incorporating its content). In the example, B approves and its con-
tent is included on the page (since (AAB) ∧ (BBA)). Also in
the example, C’s content is not included because CDA (C returns
NO in response to a request for soma-approval). D’s content is
not included because ACD (D is not listed in A’s manifest). C
returning CDA prevents pages from A accessing content from C
in any way (including embedding content or performing cross-site
request attacks). ACD prevents web pages from A interacting
with D in any way. Users following hyperlinks to other web sites
are not affected by SOMA.
In the example, A’s web pages are trying to use content without
C’s approval,3 or A’s web pages may be attempting a cross-site
request forgery against C.
In either case, the browser does not
allow the communication.
In the case of content inclusions from D, the page is trying to in-
clude content but the manifest for A does not include D. The con-
tent from D is thus not loaded and not included (the web browser
never checks to see if D would have granted approval or not). In
this fashion SOMA prevents information from being sent to or re-
ceived from an unapproved server.
3.4 Content inclusions
3.5 Process of approval
Figure 3 illustrates inclusions currently allowed within the same
origin policy. The web page itself indicates the content it needs, be
2It is possible to simulate the script functionality using ﬁles and
URL rewriting on the web server, but the conﬁguration required is
complex due to the need to handle absent ﬁles as NO responses.
The process the browser goes through when fetching content is
described in Figure 5. First, the web browser gets the page from
server A. In parallel, the browser retrieves the manifest ﬁle from
3Such inclusions may be considered stealing, either of the content
itself or of the bandwidth needed to load the content.
Manifest:
AAB,
AAC
BBA
Originating
Web Server
A
Web Browser
B
Remote 
Web Server
C
Web Server A
Web Server B
CDA
CDA
Web Page
Web Browser
Web Server C
DBA
ACD
Web Server D
Figure 4: Inclusions allowed within the SOMA policy
server A using the same protocol (i.e. if the page is served over
HTTPS, then the manifest will be retrieved over HTTPS). In this
example, the web page requires content from web server C, so
the browser ﬁrst checks to see if C is in A’s manifest. If ACC,
then the content is not loaded. This must be done ﬁrst and sepa-
rately to prevent unauthorized outbound communication. If AAC,
then the browser veriﬁes C’s reciprocal approval by checking the
soma-approval details on C (again using the same protocol
as the pending content request). If CDA then the browser again
refuses to load the content. If CBA then the browser gets any
necessary content from C and inserts it into the web page. In order
to protect against DNS rebinding attacks [15], the browser sends
the approval request (step 5) and subsequent content request (step
7) to the same server IP address.
If the request for soma-approval times out, the browser might
either retry, or alternately assume a NO response, the latter possibly
mitigating some denial of service attacks.
3.6 Compatibility with existing sites
In order to avoid breaking current web pages, SOMA defaults
to a permissive mode if the manifest or approval ﬁles do not ex-
ist. These defaults reﬂect current web page behaviour where all
inclusions are allowed.
1. If the soma-manifest ﬁle does not exist on the origin, all
inclusions are considered to be permitted by the origin site.
2. If the content provider has no soma-approval ﬁle, then
any site is allowed to include content from this provider. In
other words, the default soma-approval is YES if no ﬁle
exists.
Note that these checks are independent,
i.e.,
soma-manifest does
soma-approval ﬁle and vice-versa.
not
prevent
the
4. DESIGN EVALUATION
the lack of a
a
loading
of
1. Request page
2. Request manifest
(/soma-manifest)
3. Return page
4. Return manifest
(assume AAC is in
the manifest)
If A wants to include
content from C
5. Check
/soma-approval
(does CBA?)
6. Return YES or NO
(YES ⇒ CBA,
NO ⇒ CDA)
If CBA
7. Request content
8. Return content
Figure 5: The mutual approval procedure
or to receive stolen information, the list of potential attackers is nar-
rowed signiﬁcantly, either to insiders at the web site in question, or
to one of its approved partners. As we explain below, this change
provides substantial additional protection in practise.
One key factor making SOMA a feasible defence is that the costs
of implementation and operation are borne by those parties who
stand the most to beneﬁt and who are most suited to bear its costs.
It also helps those who wish more control over what sites embed
their content.
4.1.1 Recursive Script Inclusion
Script inclusion is only allowed from mutually approved do-
mains. This rule applies even if a script is included recursively
– the origin still needs to allow the inclusion and the script source
must approve of the origin. The use of the manifest to constrain all
inclusions means that attackers will no longer be able to store at-
tack code on external domains unless they are mutually approved.
Many current attacks rely on the ability to store code externally
[27], therefore SOMA will force attackers to use new attack strate-
gies. While restricting recursive script inclusion can potentially
break promiscuous third-party scripts, we see this promiscuity as
being inherently dangerous and worth limiting (see Section 2.1).
4.1 Security Beneﬁts
4.1.2 Unrestricted outbound communication
SOMA constrains JavaScript’s ability to communicate by limit-
ing it to mutually approved domains. Since many attacks rely upon
JavaScript’s ability to communicate with arbitrary domains, this
curtails many types of exploitive activity in web browsers. Whereas
currently any web server can be used to host malicious JavaScript
Outbound communication under SOMA is controlled so that (ex-
plicit) information can only ﬂow to and from mutually approved
partners. Thus, attackers who wish to get information from a page
now cannot have the browser send it to any arbitrary web server.
This change blocks many existing cookie-stealing and similar in-
formation theft attacks, forcing attackers to compromise an ap-
proved partner in order to get such information.
ever, without the cross-site component, the remaining attacks are