$ aws ec2 describe-availability-zones --region eu-central-1  
```
正如您在下面的截图中看到的，AWS 将在响应中给出区域列表:
![](img/8adb0ed2-a4a6-4261-8c30-4506a5fb7f78.png)
# 创建存储
我们的集群需要在某个地方存储它的状态。为此，Kops 使用亚马逊 S3 水桶。S3 存储桶是**亚马逊网络服务** ( **AWS** )对象存储服务、**简单存储解决方案** ( **S3** ) *中的逻辑存储单元。*存储桶用于存储对象，对象由数据和描述数据的元数据组成。要创建桶，执行以下`aws`命令:
```
$ aws s3api create-bucket \
--bucket my-cluster-store \
--region eu-central-1 \
--create-bucket-configuration LocationConstraint=eu-central-1  
```
正如您将在下面的截图中看到的，AWS 将向您返回关于商店位置的简明信息:
![](img/a7c9630d-aa8d-41c1-85f5-c4d65e753b50.png)
创建商店后，我们需要在创建集群时将其提供给`kops`。为此，我们需要将桶的名称导出到`KOPS_STATE_STORE`环境变量中，以便:
```
$ export KOPS_STATE_STORE=s3://my-cluster-store  
```
我们现在准备创建一个集群。
As you remember, we are going to use a gossip-based cluster instead of configured DNS, so the name must end with `k8s.local`.
# 创建集群
让我们首先将集群名导出到环境变量中。这将非常有用，因为我们将经常提到集群的名称。执行以下命令导出群集名称:
```
$ export NAME=my-rest-cluster.k8s.local  
```
`kops create cluster`是我们将要用来创建集群的命令。请注意，这不会影响我们的亚马逊 EC2 实例。该命令的结果将只是一个本地集群模板，我们可以在 AWS 上推出真实的物理更改之前查看和编辑该模板。
该命令的语法非常简单:
```
$ kops create cluster [options]  
```
这个命令有很多选项；你总能在[https://GitHub . com/kubernetes/kops/blob/master/docs/CLI/kops _ create _ cluster . MD](https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md)找到 GitHub 上的最新描述。让我们关注最重要的几个问题:
| **选项** | **描述** |
| `--master-count [number]` | 设置主节点的数量。默认情况下，每个主区域有一个主节点。 |
| `--master-size [string]` | 设置主控形状的实例大小，例如:`--master-size=t2.medium`。 |
| `--master-volume-size [number]` | 以千兆字节为单位设置主节点的实例卷大小。 |
| `--master-zones [zone1,zone2]` | 指定要在其中运行主机的 AWS 区域(这必须是奇数)。 |
| `--zones [zone1,zone2 ]` | 运行集群的区域，例如:`--zones eu-central-1a,eu-central-1b`。 |
| `--node-count [number]` | 设置节点数。 |
| `--node-size [string]` | 设置节点的实例大小，例如:`--node-size=t2.medium`。 |
| `--node-volume-size int32` | 为节点设置实例卷大小(以 GB 为单位)。 |
如果您想将群集设为私有(默认情况下是公共的)，您需要考虑另外使用这些选项:
| **选项** | **描述** |
| `--associate-public-ip [true&#124;false]` | 指定您是否希望您的群集分配公共 IP。 |
| `--topology [public&#124;private]` | 指定集群的内部网络拓扑，可以是`public`或`private`。 |
| `--bastion` | `--bastion`标志启用堡垒实例组。该选项仅适用于专用拓扑。它将为集群实例的 SSH 访问生成一个专用的 SSH 跳转主机。跳转主机提供了进入集群专用网络的入口点。它可以启动和停止，以启用或禁用来自互联网的入站 SSH 通信。 |
让我们现在使用以下命令创建集群:
```
$ kops create cluster --v=0 \
--cloud=aws --node-count 2 \
--master-size=t2.medium \
--master-zones=eu-central-1a \
--zones eu-central-1a,eu-central-1b  \
--name=${NAME} \
--node-size=t2.medium  
```
在响应中，`kops`将列出已创建的配置的所有详细信息，并建议您可以对新集群配置采取的一些后续步骤:
![](img/531ca29f-3e49-4242-b2ed-711f6fb9313c.png)
运行命令后，`kops`将配置您的`kubectl` Kubernetes 客户端指向您的新集群；这将是我们例子中的`my-rest-cluster.k8s.local`。
正如我们之前所说的，在这个阶段，只创建集群的模板，而不是集群本身。您仍然可以通过编辑集群来更改任何选项:
```
$ kops edit cluster my-rest-cluster.k8s.local  
```
这将打开您在 shell 中定义的默认编辑器，您可以在其中看到已经生成的集群模板。它将包含更多的设置，不仅仅是您在运行`cluster create`命令时指定的设置:
![](img/fded1084-f411-4291-8949-e87f9acf37df.png)
如果您对您的集群模板感到满意，那么是时候加速它来创建真正的基于云的资源了，例如网络和 EC2 实例。一旦基础设施准备就绪，`kops`将在 EC2 实例上安装 Kubernetes。开始吧。
# 启动集群
要启动集群并加速所有必要的 EC2 实例，您需要执行`update`命令。在`kops`手册中建议您应该在没有`--yes`开关的预览模式下首先进行。这不会加速任何 EC2 实例:
```
$ kops update cluster ${NAME}   
```
如果一切正常，使用`--yes`开关执行更新命令:
```
$ kops update cluster ${NAME} --yes  
```
![](img/e39c7434-4689-4d2c-93e9-8fa42c82293e.png)
您的群集正在启动，应该会在几分钟内准备好。如果您现在登录到 WAS 管理控制台，您将看到您的 EC2 实例正在启动，如下图所示:
![](img/dce6aef3-9ee7-4346-bfca-a1348465a008.png)
您还可以通过发出以下命令来检查整个集群状态:
```
$ kops validate cluster  
```
输出将包含有关群集节点数量和状态的信息，包括主节点:
![](img/33ee098d-49a8-4c73-b198-07e8e596f98e.png)
当然，由于`kubectl`现在被配置为作用于我们的 AWS 集群，我们可以使用`kubectl get nodes`命令列出节点，这与我们在[第 9 章](09.html)、*中使用库本内斯 API* 、使用`minikube`基础集群所做的完全相同。执行以下命令:
```
$ list nodes: kubectl get nodes --show-labels  
```
您将获得有关集群节点的名称和状态的信息:
![](img/0c363970-23f7-45cd-b51b-ecfbd9554a3a.png)
# 更新群集
`Kops`的行为类似于`kubectl`；在对集群进行任何更改之前，您可以在编辑器中编辑配置文件。`kops update`命令将应用配置更改，但不会修改运行的基础设施。要更新正在运行的集群，您需要执行`rolling-update`命令。以下操作将启动群集基础架构的更新或重新创建过程:
```
$ kops rolling-update cluster –yes
```
我们的新集群正在运行，但它是空的。让我们部署一些东西。
# 安装仪表板
让集群运行起来，最好部署一个仪表板，以查看您的服务、部署、pods 等的状态。仪表板默认包含在`minikube`集群中，但是在我们全新的亚马逊集群上，我们需要手动安装它。这是一个简单的过程。由于我们已经将`kubectl`配置为作用于远程集群，因此我们可以使用`kubernetes-dashboard.yaml`模板作为输入来执行以下`kubectl create`命令:
```
$ kubectl create -f \
https://rawgit.com/kubernetes/dashboard/master/src/deploy
kubernetes-dashboard.yaml  
```
下一步是代理网络流量，使用下面我们已经知道的`kubectl proxy`命令:
```
$ kubectl proxy 
```
就这样！一段时间后，仪表板将被部署，我们将能够使用本地主机地址访问它:
`http://localhost:8001/`，正如你在下面的截图中看到的，是我们已经在[第 9 章](09.html)*中看到的同一个仪表盘，使用 Kubernetes API* :
![](img/9679b00e-31ed-4cff-9b14-6c42becfb5d6.png)
从现在开始，您可以使用`kubectl`和仪表板来管理您的集群，就像我们之前在[第 9 章](09.html)、*中使用 Kubernetes API* 一样。所有`kubectl create`命令的工作方式与本地集群相同。然而，这一次，你的软件将走向云端。
如果您决定删除群集，请执行以下命令:
```
$ kops delete cluster -name=${NAME} --yes  
```
注意，如果你刚刚创建了集群模板，没有先执行`kops update cluster ${NAME} --yes`，也可以删除集群，如下图截图所示:
![](img/d550e226-a2bf-487d-b7c8-a24b7f430703.jpg)
如果已经在 Amazon 上创建了集群，删除集群的过程将花费更长的时间，因为需要首先关闭主节点和工作节点的所有 EC2 实例。
# 摘要
在这一章中，我们已经在真实的云中建立了一个集群，亚马逊 AWS。`Kops`是我们目前可用的管理 AWS 上 Kubernetes 的最佳工具之一。使用它，您可以轻松地在 AWS 上创建和管理集群。它可以是测试级或生产级集群；`kops`将使 it 的创建和管理变得轻而易举。