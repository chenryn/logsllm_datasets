I was trying to copy a `seaborn.matrix.ClusterGrid` object using
copy.deepcopy(object) but got this error:
    ---------------------------------------------------------------------------
    NotImplementedError                       Traceback (most recent call last)
     in 
    ----> 1 test3=copy.deepcopy(test)
    /usr/lib/python3.6/copy.py in deepcopy(x, memo, _nil)
        178                     y = x
        179                 else:
    --> 180                     y = _reconstruct(x, memo, *rv)
        181 
        182     # If is its own copy, don't memoize.
    /usr/lib/python3.6/copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)
        278     if state is not None:
        279         if deep:
    --> 280             state = deepcopy(state, memo)
        281         if hasattr(y, '__setstate__'):
        282             y.__setstate__(state)
    /usr/lib/python3.6/copy.py in deepcopy(x, memo, _nil)
        148     copier = _deepcopy_dispatch.get(cls)
        149     if copier:
    --> 150         y = copier(x, memo)
        151     else:
        152         try:
    /usr/lib/python3.6/copy.py in _deepcopy_dict(x, memo, deepcopy)
        238     memo[id(x)] = y
        239     for key, value in x.items():
    --> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)
        241     return y
        242 d[dict] = _deepcopy_dict
    /usr/lib/python3.6/copy.py in deepcopy(x, memo, _nil)
        178                     y = x
        179                 else:
    --> 180                     y = _reconstruct(x, memo, *rv)
        181 
        182     # If is its own copy, don't memoize.
    /usr/lib/python3.6/copy.py in _reconstruct(x, memo, func, args, state, listiter, dictiter, deepcopy)
        278     if state is not None:
        279         if deep:
    --> 280             state = deepcopy(state, memo)
        281         if hasattr(y, '__setstate__'):
        282             y.__setstate__(state)
    /usr/lib/python3.6/copy.py in deepcopy(x, memo, _nil)
        148     copier = _deepcopy_dispatch.get(cls)
        149     if copier:
    --> 150         y = copier(x, memo)
        151     else:
        152         try:
    /usr/lib/python3.6/copy.py in _deepcopy_dict(x, memo, deepcopy)
        238     memo[id(x)] = y
        239     for key, value in x.items():
    --> 240         y[deepcopy(key, memo)] = deepcopy(value, memo)
        241     return y
        242 d[dict] = _deepcopy_dict
    /usr/lib/python3.6/copy.py in deepcopy(x, memo, _nil)
        159             copier = getattr(x, "__deepcopy__", None)
        160             if copier:
    --> 161                 y = copier(memo)
        162             else:
        163                 reductor = dispatch_table.get(cls)
    /usr/local/lib/python3.6/dist-packages/matplotlib/transforms.py in __copy__(self, *args)
        120     def __copy__(self, *args):
        121         raise NotImplementedError(
    --> 122             "TransformNode instances can not be copied. "
        123             "Consider using frozen() instead.")
        124     __deepcopy__ = __copy__
    NotImplementedError: TransformNode instances can not be copied. Consider using frozen() instead.
Any ideas?
Or is there any other way to duplicate an object without copying by reference?
Thanks