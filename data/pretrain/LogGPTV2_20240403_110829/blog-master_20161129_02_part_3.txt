 EndForLoop:  
```
可以看到，每次循环迭代中都有一个分支语句 jge，因此在运行过程中将有 20 次分支判断。每次分支判断都将写入 BTB，但 BTB 是一个 ring buffer，16 个 slot 写满后便开始覆盖。假如迭代次数正好为 16，或者小于 16，则完整的循环将全部写入 BTB，比如循环迭代次数为 4 次，则 BTB 应该如下图所示：  
#### 图 4. BTB buffer  
![pic](20161129_02_pic_004.jpg)    
这个 buffer 完全精确地描述了整个循环迭代的分支判定情况，因此下次运行同一个循环时，处理器便可以做出完全正确的预测。但假如迭代次数为 20，则该 BTB 随着时间推移而不能完全准确地描述该循环的分支预测执行情况，处理器将做出错误的判断。  
我们将测试程序进行少许的修改，将迭代次数从 20 减少到 10，为了让逻辑不变，j++ 变成了 j+=2；  
#### 清单 5. 没有 BTB 失效的代码  
```
 #include    
 #include    
 void foo()   
 {   
  int i,j;   
  for(i=0; i< 10; i++)   
  j+=2;   
 }   
 int main(void)   
 {   
  int i;   
  for(i = 0; i< 100000000; i++)   
  foo();   
  return 0;   
 }  
```
此时再次用 perf stat 采样得到如下结果：  
```
 [lm@ovispoly perf]$ ./perf stat ./t3   
  Performance counter stats for './t3:   
 2784.004851 task-clock-msecs # 0.927 CPUs   
 90 context-switches # 0.000 M/sec   
 8 CPU-migrations # 0.000 M/sec   
 81 page-faults # 0.000 M/sec   
 33632545 cycles # 12.081 M/sec (scaled from 99.63%)   
 42996 instructions # 0.001 IPC (scaled from 99.71%)   
 1474321780 branches # 529.569 M/sec (scaled from 99.78%)   
 49733 branch-misses # 0.003 % (scaled from 99.35%)   
 7073107 cache-references # 2.541 M/sec (scaled from 99.42%)   
 47958540 cache-misses # 17.226 M/sec (scaled from 99.33%)   
  3.002673524 seconds time elapsed  
```
Branch-misses 减少了。  
本例只是为了演示 perf 对 PMU 的使用，本身并无意义，关于充分利用 processor 进行调优可以参考 Intel 公司出品的调优手册，其他的处理器可能有不同的方法，还希望读者明鉴。  
## 小结  
以上介绍的这些 perf 用法主要着眼点在于对于应用程序的性能统计分析，本文的第二部分将继续讲述 perf 的一些特殊用法，并偏重于内核本身的性能统计分析。  
调优是需要综合知识的工作，要不断地修炼自己。Perf 虽然是一把宝剑，但宝剑配英雄，只有武功高强的大侠才能随心所欲地使用它。以我的功力，也只能道听途说地讲述一些关于宝刀的事情。但若本文能引起您对宝刀的兴趣，那么也算是有一点儿作用了。  
## 参考资料  
2\.6\.34 源代码 tools 目录下的文档。  
Lwn 上的文章 Perfcounters added to the mainline以及 Scripting support for perf。  
http://lwn.net/Articles/339361/    
http://lwn.net/Articles/373842/    
Ingo Molnar 写的关于 sched perf的教材。    
http://lwn.net/Articles/353295/    
Arjan van de Ven ’ s 关于 timechart 的 blog。    
http://blog.fenrus.org/?p=5    
IBM Developerworks 网站上的文章 用 OProfile 彻底了解性能。   
http://www.ibm.com/developerworks/cn/linux/l-oprof/index.html    
Intel 公司的 Jeff Andrews 写的 Branch and Loop Reorganization to Prevent Mispredicts。  
http://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts/   
在 developerWorks Linux 专区 寻找为 Linux 开发人员（包括 Linux 新手入门）准备的更多参考资料，查阅我们 最受欢迎的文章和教程。  
http://www.ibm.com/developerworks/cn/linux/  
http://www.ibm.com/developerworks/cn/linux/newto/  
http://www.ibm.com/developerworks/cn/linux/best2009/index.html  
在 developerWorks 上查阅所有 Linux 技巧 和 Linux 教程。  
http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?search_by=Linux+%E6%8A%80%E5%B7%A7  
http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?type_by=%E6%95%99%E7%A8%8B  
随时关注 developerWorks 技术活动和网络广播。  
http://www.ibm.com/developerworks/cn/offers/techbriefings/  
http://www.ibm.com/developerworks/cn/swi/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")