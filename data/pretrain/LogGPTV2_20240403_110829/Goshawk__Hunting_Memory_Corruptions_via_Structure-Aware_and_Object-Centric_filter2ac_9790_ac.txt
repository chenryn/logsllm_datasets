corruption bug checker of CSA. Then, we use Z3 SMT solver
to eliminate some false warnings due to infeasible paths.
MOS Interface Implementation. To implement the MOS
interface, we overwrite the callback evalCall of CSA. The
callback evalCall is used to model each invoked function. By
overwriting the callback evalCall, the MOS interface skips
analyzing the MM function implementation, and models the
function memory management behaviors on the CSA engine
according to the MOS information. In detail, when evalcall
is invoked, the interface checks whether the callee function
has a MOS attached to it. If no MOS is found, the interface
returns back to CSA default analysis, steps into the callee
function body and continues its inter-procedural analysis.
Otherwise, the interface models the relevant memory objects
in three steps: (1) The interface parses the MOS to obtain the
detailed MM behavior information of the function and a list
of dynamically managed memory objects. (2) By retrieving
each memory object from the list, the interface utilizes the
CSA engine to explore the corresponding symbolic expression
that represents the memory object. If the memory object is
a member nested in a structure, the interface traverses the
structure definition and pinpoints the expression where the
memory object is declared. (3) The interface separately creates
a new symbol for the expression with allocator, retrieves the
symbol of the deallocator expression, and updates its status to
“released” for the expression with deallocator.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2102
Checker Design. We implement a MOS-enhanced checker to
detect use-after-free and double-free bug checker during the
analysis phase of CSA. It starts a path-sensitive and inter-
procedural analysis on each translation unit and selects the
first node of a call graph as the entry point. It then analyzes
each encountered callee function until all the call graphs of
the current translation unit have been checked. When CSA
encounters a callee function, the checker invokes the callback
evalCall to see whether the callee function has an attached
MOS; if this is the case, it interprets the MOS and creates or
updates relevant symbols. If a symbol with “released” status is
being updated to “released” status again, the checker reports
a double-free violation. The checker also monitors all de-
reference operations, and reports a use-after-free violation if a
symbol with “released” status is being de-referenced.
Infeasible Paths Elimination. CSA uses a range based
constraint solver [23], which maps constraint conditions to
symbolic binary comparison expressions without performing
logical or arithmetic calculations between unknown symbol
values. Thus it has high performance but introduces false
positives due to the imprecise constraint solving. Also, the
conditional allocation/deallocation inside MM functions may
introduce some false positives. To eliminate those false warn-
ings, GOSHAWK leverages CodeChecker [24], a static analysis
framework built on the LLVM/CSA toolchain and currently
integrated with the Z3 SMT solver, to cross check the feasi-
bility of each reported issue path. To be more specific, with the
violations reported by the default range based constraint solver,
GOSHAWK utilizes CodeChecker to collect the entire violation
paths (from an official allocator to the violation point) and re-
check the feasibility of those paths by using the Z3 solver.
Code Exploration Settings. To implement a cross-module
inter-procedural analysis, CSA inlines invoked functions from
different source files code with a Cross Translation Unit
(CTU) [25] analysis. Intuitively, to obtain a complete code
coverage, the analysis should explore as many functions/files
as possible. This is, however, infeasible in most cases since it
would inevitably encounter scalability issues [26]. To prevent a
specific analysis from consuming too much time and hardware
resources, CSA supports customized breadth and depth of its
code exploration. In particular, the following analysis param-
eters are directly related to the bug detection of GOSHAWK:
1) Maximum analysis depth (MAX-AD): starting from an entry
point function, the maximum number of explored (inlined)
functions during an inter-procedural analysis;
2) Maximum analysis breadth (MAX-AB): starting from an
entry point function, the maximum steps of execution on
the symbolic state graph during a symbolic execution based
path traversing.
3) CTU import
threshold (CTU-THR): when analyzing a
translation unit (i.e., a source file) the maximum number
of external translation units to import.
B. MM Function Validation
As it is time consuming and inaccurate to conduct code
analysis targeting an entire project, GOSHAWK only analyzes
the sub-routines of the MM function candidates. Before that,
we collected a list of generally and widely used MM functions
from the official documents of the operating system kernel and
libc. In total, 32 functions are added to the official MM func-
tion set (details are listed in the Appendix). Then GOSHAWK
executes three steps to validate MM function candidates:
1) Starting from the program codes, GOSHAWK leverages the
Clang [27] compiler and plugins to construct the whole
program call graph and generate control flow graphs for
each function.
2) Given a MM function candidate, GOSHAWK first records
the call-chains to each official MM function invocation
on the whole program call graph, and then records the
corresponding paths on control flow graphs.
3) With the recorded call-chains and paths, GOSHAWK con-
ducts backward program analysis to propagate the data
flows of official MM functions by up-walking the call-
chains and paths. Specifically, the data flow propagation is
achieved by checking the variables involved in statements
of BinaryOperator and VarDecl in Clang plugins, which
assign values to variables. If there exists a data flow passed
from outside of the MM function candidate, GOSHAWK
regards this function as a valid MM function.
To avoid scalability issues (e.g., numerous call-chains and
paths are recorded when starting from main function) and
precision issues (i.e, indirect call target resolution and pointer
address calculation on data flow propagation), we adopt a
conservative policy: (1) Do not resolve indirect call target
when constructing the whole program call graph. (2) Only
record the MM-relative call-chains, such as MM candidate->
MM candidate -> official MM function. (3) Do not propagate
the data flows involved in pointer address calculations.
C. Ambiguous MM Behaviors Modeling
For re-allocators which perform different memory allocation
and deallocation behaviors based on the concrete values of
their parameters at runtime, GOSHAWK simply considers them
as common allocators, since in MOS we do not distinguish a
re-allocator from an allocator. For functions that fetch or save
memory objects in a global link list, GOSHAWK currently does
not consider them as MM functions, although technically it is
feasible to track their data flows.
V. EVALUATION
We assessed GOSHAWK by mainly considering its effec-
tiveness in identifying MM functions and detecting memory
corruption bugs (in particular, use-after-free and double-free
bugs). The following research questions were answered:
• RQ1: Can GOSHAWK identify MM functions precisely and
extensively for different kinds of source code projects?
• RQ2: Is MOS-based detection able to find memory bugs
• RQ3: How does MOS help accelerate the data flow analysis
more effectively?
and the bug detection?
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2103
RESULTS OF CUSTOMIZED MEMORY MANAGEMENT FUNCTION IDENTIFICATION AND MEMORY BUG DETECTION IN POPULAR OPEN-SOURCE PROJECTS
TABLE I
Program
Version
Lines of
Code
Number of
Functions
Identified Allocators
Extended
Primitive
Identified Deallocators
Extended
Primitive
Linux
FreeBSD
OpenSSL
Redis
Azure
QcloudE
QcloudH
5.12-rc2
13.0.0
3.0.0
6.2.1
2021_Ref01
3.1.8
3.2.3
Total
-
20.1M
5.9M
456K
149K
661K
86K
79K
-
549K
99K
19K
3K
4.8K
759
638
-
2,916
482
93
51
126
21
20
3,709
1,805
273
15
9
7
1
1
2,111
1,812
393
134
28
58
26
25
2,476
4,266
853
193
41
177
21
21
5,572
Detected Bugs
UAF
32
9
1
1
0
2
2
47
DF
17
9
8
0
4
5
2
45
Confirmed
40
17
9
1
1
7
4
79
QcloudE refers to Qcloud IoT Explorer Device SDK and QcloudH refers to Qcloud IoT Hub Device SDK.
UAF: use-after-free bug; DF: double-free bug
Environment. The evaluations were conducted on a server
running Ubuntu 20.04 with an AMD Ryzen Threadripper
3990X, 192 GB RAM, and a GeForce GTX2080-Ti GPU card.
A. Overall Results
We applied GOSHAWK to seven well-known open source
projects of different code scales. Table I summarizes the
tested projects, and the identification and detection results for
each tested project. GOSHAWK successfully analyzed all their
source code and completed the use-after-free and double-free
bug detection in less than one day (details of analysis costs are
reported in Section V-F). In total, GOSHAWK identified more
than 10,000 MM functions, and detected 92 (47 use-after-
free, 45 double-free) bugs. All the found bugs have been
reported to the corresponding communities1. In the following,
we detail the results of our evaluation. We also provide the
raw analysis and detection results as supplementary materials
at https://goshawk.code-analysis.org.
B. Comparison with MallocChecker
To evaluate how identified MM functions and MOS enhance
current bug detection tools, we select the official memory
corruption bug checker of CSA, MallocChecker, and repeat our
bug detection experiments. MallocChecker does not consider
non-standard MM functions and straightforwardly tracks mem-
ory objects between standard MM functions (malloc, free,
kmalloc and kfree). We first applied MallocChecker to the
seven projects under the same code exploration settings (i.e.,
covering the same code range), and reviewed how many bugs
detected by GOSHAWK were also detected by it. As Table II
shows, MallocChecker only found 21 of the 92 bugs, and it did
not find any new bug that GOSHAWK could not find. For small
projects (OpenSSL, Redis and IoT SDKs) where the analysis
scope is less limited ((i.e., could cover more code paths),
MallocChecker still misses 14 out 25 bugs. For the larger
projects (Linux and FreeBSD kernels) where MallocChecker
could only explore a limited range of code, it detected only 7
out of 67 (16.4%) bugs.
COMPARISON WITH MALLOCCHECKER IN TERMS OF DETECTION
EFFECTIVENESS AND EFFICIENCY (IN MINUTES)
TABLE II
Goshawk
MalChk-S
Bugs
49
18
9
1
4
7
4
Time
328.91
20.84
3.51
1.03
0.22
0.10
0.07
Bugs
2
5
1
0
2
4
4
Time
367.72
19.73
3.66
0.78
0.26
0.11
0.08
MalChk-E
Bugs
Time
-
6
1
0
2
7
4
-
664.76
79.13
24.01
6.41
1.77
8.66
Linux
FreeBSD
OpenSSL
Redis
Azure
QcloudE
QcloudH
Presicion
63.4%
35.7%
MalChk-S : MallocChecker with AMD 3990x, 192G RAM.
MalChk-E : MallocChecker with Xeon 4126, 1T RAM.
20.6%
it
Intuitively,
is the limitation of code exploration that
hinders MallocChecker from discovering more bugs. To check
whether the used hardware (and the corresponding code ex-
ploration scope) limits the effectiveness of MallocChecker, we
repeated the experiments with a more powerful server (two
Intel Xeon 4216 processors, 64 cores, 1TB RAM), which
allowed the code exploration scope to extend from MAX-
AD=5, MAX-AB=225,000, CTU-THR=100 to MAX-AD=10,
MAX-AB=2,250,000, CTU-THR=20,000. As shown in Table II,
the analysis time increased significantly, but MallocChecker
only found four more bugs. More in detail, when analyzing
the Linux kernel, MallocChecker cannot scale at all; even for a
single source file, it consumed more than 15GB RAM and took
four hours to finish the analysis. This is certainly infeasible for
Linux kernel with more than 20,000 source files. In compari-
son, by covering the same (or less) amount of code, GOSHAWK
could detect bugs since it does not need to explore code
paths in MM functions and avoids the path explosion issue.
For instance, a bug related to the l2cap_sock_alloc_skb_cb2
custom allocator involves an 11-layer call chain to the final
allocation. In this case only the MOS-enhanced bug detection
could effectively handle it.
1Before our submission (December 2021), 79 out of 92 bugs have been
confirmed and the rest 13 bugs are under review.
2This function is declared in linux/net/buletooth/l2cap_sock.c
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2104
Another
interesting observation is
that even though
MallocChecker adopts a simpler bug detection model,
it
consumes more time than GOSHAWK when analyzing the
Linux kernel (367.72 vs 328.91 minutes) with the same code
exploration scope. This is because GOSHAWK avoids to redun-
dantly analyze those 13,868 MM functions. To quantitatively
measure how much analysis costs were saved, we checked all
intermediate analysis records and found that by using MOS,
GOSHAWK avoids 9,779,077 times of function analysis and
does not need to repeatedly explore 253,324,662 paths.
C. Effectiveness of MM Function Identification
GOSHAWK analyzed more than 27.3 million lines of code