# 区块链又3道题目分析（主过程）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## RCTF2020 roiscoin
题目给了源码
###  Resource
    pragma solidity ^0.4.23;
    contract FakeOwnerGame {
        event SendFlag(address _addr);
        uint randomNumber = 0;
        uint time = now;
        mapping (address => uint) public BalanceOf;
        mapping (address => uint) public WinCount;
        mapping (address => uint) public FailCount;
        bytes32[] public codex;
        address private owner;
        uint256 settlementBlockNumber;
        address guesser;
        uint8 guess;
        struct FailedLog {
            uint failtag;
            uint failtime;
            uint success_count;
            address origin;
            uint fail_count;
            bytes12 hash;
            address msgsender;
        }
        mapping(address => FailedLog[]) FailedLogs;
        constructor() {
            owner = msg.sender;
        }
        modifier onlyOwner() {
            require(msg.sender == owner);
            _;
        }
        function payforflag() onlyOwner {
            require(BalanceOf[msg.sender] >= 2000);
            emit SendFlag(msg.sender);
            selfdestruct(msg.sender);
        }
        function lockInGuess(uint8 n) public payable {
            require(guesser == 0);
            require(msg.value == 1 ether);
            guesser = msg.sender;
            guess = n;
            settlementBlockNumber = block.number + 1;
        }
        function settle() public {
            require(msg.sender == guesser);
            require(block.number > settlementBlockNumber);
            uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now)) % 2;
            if (guess == answer) {
                WinCount[msg.sender] += 1;
                BalanceOf[msg.sender] += 1000;
            } else {
                FailCount[msg.sender] += 1;
            }
            if (WinCount[msg.sender] == 2) {
                if (WinCount[msg.sender] + FailCount[msg.sender]  0);
            if(msg.value >= address(this).balance){
                owner = msg.sender;
            }
        }
        function revise(uint idx, bytes32 tmp) {
            codex[idx] = tmp;
        }
    }
给了源码可以说好分析的多。 查看payforflag的条件是balanceof[msg.sender]>=2000 还有就是调用者必须为owner.  
然后查看这里的balance 如何来加， 通过赌注，但是这里赌注的随机数无法预测但是只有0和1，还是可以爆破的。首先讲非预期。
###  非预期：
由于beOwner中的 address(this).balance在计算时算了msg.value。  
所以只要原合约的初始为0，那么我们转账>0就可以拿到BeOwner 然后在暴力猜数字2次成功就可以payforflag了。
###  预期:
我们可以看到在battle里面，如果猜错这里用了一个在这里定义的结构体。而结构体的内存这里没有声明使用memory而是使用了stroage
，这里便引起了变量覆盖。  
这里的failedlog未初始化造成了storage的任意写从而我们可以来覆写我们的codex的数组长度。
数组长度任意写之后，我们下一步就是想把owner写成我们自己。 数组任意写，对长度有一定要求，利用msg.owner覆盖了数组的高20字节。  
那么我们就考虑这个codex[] 他的长度codex.length在storage[5] 他的计算是从
keccak256(5)+var0 var0可控。 如果我们在这里 x=keccak256(5) 那么传入
2^256+6-x 我们就可以任意写storage[6] 也就是owner 。这一段如果不太理解最好是对着反汇编看。因为这里源代码反而没有那么直观。
PS：这里为什么+2^256，因为不能传入负数。
写完storage[6]后，只需要满足猜两次就够了。
他用的是未来随机数，不过他就需要猜对2次，就蒙就可以了。  
这里还是不放 exp，建议师傅们自己来尝试一下。并且RCTF的wp中也有完整的exp。大家都可以去学习。
## 华为鸿蒙场区块链
华为鸿蒙场的区块链，比赛在考试，现在来复现下，题目没有给出源码。但是已经找不到复现了。应该是pikachu师傅用他的docker出的。这里我自己部署了下原合约。然后重新逆向一次。  
经过逆向以及
###  Resource
    pragma solidity ^0.4.23;
    contract ContractGame {
        event SendFlag(address addr);
        mapping(address => bool) internal authPlayer;
        uint private blocknumber;
        uint private gameFunds;
        uint private cost;
        bool private gameStopped = false;
        address public owner;
        bytes4 private winningTicket;
        uint randomNumber = 0;
        mapping(address=>bool) private potentialWinner;
        mapping(address=>uint256) private rewards;
        mapping(address=>bytes4) private ticketNumbers;
        constructor() public payable {
            gameFunds = add(gameFunds, msg.value);
            cost = div(gameFunds, 10);
            owner = msg.sender;
            rewards[address(this)] = msg.value;
        }
        modifier auth() {
            require(authPlayer[msg.sender], "you are not authorized!");
            _;
        }
        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            require(c >= a, "SafeMath: addition overflow");
            return c;
        }
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            require(b  0);
            uint256 c = a / b;
            return c;
        }
        function BetGame(bool mark) external payable {
            require(msg.value == cost);
            require(gameFunds >= div(cost, 2));
            bytes32 entropy = blockhash(block.number-1);
            bytes1 coinFlip = entropy[10] & 1;
            if ((coinFlip == 1 && mark) || (coinFlip == 0 && !mark)) {
                gameFunds = sub(gameFunds, div(msg.value, 2));
                msg.sender.transfer(div(mul(msg.value, 3), 2));
            } else {
                gameFunds = add(gameFunds, msg.value);
            }
            if (address(this).balance==0) {
                winningTicket = bytes4(0);
                blocknumber = block.number + 1;
                gameStopped = false;
                potentialWinner[msg.sender] = true;
                rewards[msg.sender] += msg.value;
                ticketNumbers[msg.sender] = bytes4((msg.value - cost)/10**8);
            }
        }
        function closeGame() external auth {
            require(!gameStopped);
            require(blocknumber != 0);
            require(winningTicket == bytes4(0));
            require(block.number > blocknumber);
            require(msg.sender == owner || rewards[msg.sender] > 0);
            winningTicket = bytes4(blockhash(blocknumber));
            potentialWinner[msg.sender] = false;
            gameStopped = true;
        }
        function winGame() external auth {
            require(gameStopped);
            require(potentialWinner[msg.sender]);
            if(winningTicket == ticketNumbers[msg.sender]){
                emit SendFlag(msg.sender);
            }
            selfdestruct(msg.sender);
        }
        function AddAuth(address addr) external {
            authPlayer[addr] = true;
        }
        function() public payable auth{
            if(msg.value == 0) {
                this.closeGame();
            } else {
                this.winGame();
            }
        }
    }
题目不难，但是逻辑比较多，比较符合pikachu师傅出题的规律非常有学习代表性。首先是在functon中自写了4种运算规则，类似safemath库。
这里剩下可调用的函数采用了external auth等函数声明方法，经过查询也是public的
是可以被外部调用的。主要是可以大量减少在外部传入大数组时的合约交互的gas。
     function() public payable auth{
            if(msg.value == 0) {
                this.closeGame();
            } else {
                this.winGame();
            }
        }
这里是一个fallback是非常有应用价值的。  
后面几个函数也都来分析下。
    function winGame() external auth {
            require(gameStopped);
            require(potentialWinner[msg.sender]);
            if(winningTicket == ticketNumbers[msg.sender]){
                emit SendFlag(msg.sender);
            }
            selfdestruct(msg.sender);