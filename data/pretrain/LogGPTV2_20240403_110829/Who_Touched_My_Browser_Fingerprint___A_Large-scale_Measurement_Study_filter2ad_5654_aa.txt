title:Who Touched My Browser Fingerprint?: A Large-scale Measurement Study
and Classification of Fingerprint Dynamics
author:Song Li and
Yinzhi Cao
Who Touched My Browser Fingerprint?
A Large-scale Measurement Study and Classification of
Fingerprint Dynamics
Song Li
Johns Hopkins University
PI:EMAIL
Yinzhi Cao
Johns Hopkins University
PI:EMAIL
ABSTRACT
Browser fingerprints are dynamic, evolving with feature values
changed over time. Previous fingerprinting datasets are either small-
scale with only thousands of browser instances or without con-
sidering fingerprint dynamics. Thus, it remains unclear how an
evolution-aware fingerprinting tool behaves in a real-world setting,
e.g., on a website with millions of browser instances, let alone how
fingerprint dynamics implicate privacy and security.
In this paper, we perform the first, large-scale study of millions of
fingerprints to analyze fingerprint dynamics in a real-world website.
Our measurement study answers the question of how and why
fingerprints change over time by classifying fingerprint dynamics
into three categories based on their causes. We also observed several
insights from our measurement, e.g., we show that state-of-the-
art fingerprinting tool performs poorly in terms of F1-Score and
matching speed in this real-world setting.
ACM Reference Format:
Song Li and Yinzhi Cao. 2020. Who Touched My Browser Fingerprint? A
Large-scale Measurement Study and Classification of Fingerprint Dynamics.
In ACM Internet Measurement Conference (IMC ’20), October 27–November
29, 2020, Virtual Event, USA. ACM, New York, NY, USA, 16 pages. https:
//doi.org/10.1145/3419394.3423614
1 INTRODUCTION
Browser fingerprinting, an alternative to browser cookies when
being disabled or cleared, is that a website extracts a list of browser
features at the client side and then constructs an identifier, called
a fingerprint, based on these extracted features to identify or au-
thenticate the browser. Browser fingerprinting is first studied by
Eckerlsey [17] via his famous Panopticlick website [10] and now
widely adopted by many tracking companies and real-world Alexa
websites according to a recent study [18].
Prior works have measured browser fingerprints in the wild. On
one hand, large-scale studies, such as Gómez-Boix et al. [20], have
analyzed millions of browser fingerprints in the wild via collecting
fingerprints on a real-world website. However, there are two major
drawbacks. First, they only studied the effectiveness of fingerprints
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8138-3/20/10...$15.00
https://doi.org/10.1145/3419394.3423614
370
in differentiating and identifying browser instances but not how fin-
gerprints evolve over time—which are called fingerprint dynamics
in the paper. Second, prior works [20] adopt cookies as the ground
truth—which rely on an assumption that people clear cookies but
in a rare manner. This assumption is untrue as demonstrated in
our study: 32% of browser instances clear cookies—one major cause
is intelligent tracking prevention [6], which automatically deletes
tracking cookies after a certain period.
On the other hand, there exists small-scale datasets with only
thousands of fingerprints, such as Pugliese et al. [37] and the one
used in FP-Stalker [40], an evolution-aware fingerprinting tool that
links evolved fingerprints together. Those work usually adopt out-
of-band identifiers, e.g., one provided via a browser extension, to
recognize users. However, the requirement of out-of-band identi-
fiers restrict the study scale: It is difficulty to let millions of users
to install extensions for a measurement purpose.
In this paper, we perform the first large-scale measurement study
of millions of fingerprints on a real-world website to analyze finger-
print dynamics, i.e., how browser fingerprints change over time and
why they do so. Specifically, we implemented our version of finger-
printing tool and deployed it at a real-world European website vis-
ited regularly by its users, which collected a dataset with 7,246,618
fingerprints from 1,329,927 browser instances and 1,148,864 users.
Our representation of browser instance is via a new type of identi-
fier, called Browser ID, a combination of an anonymized username
using hash values and some stable browser features. On one hand,
Browser ID is much more stable as compared with cookies: The
false positive of Browser ID of representing browser instances is
estimated as 0.1% and the false negative rate as 0.3%; on the other
hand, Browser ID can differentiate multiple devices of the same
user: In our study, 14% users visit the deployment website using
more than one device.
Next, we measure fingerprint dynamics by calculating the dif-
ference between two consecutive fingerprints of the same browser
instance. The advantage of such diff operation over a simple fin-
gerprint pair representation is that if two browser instances with
different fingerprints (e.g., one instance with an additional font)
get the same update (e.g., from Chrome 56 to 57), the delta in-
formation will also be the same. We produce a dataset of 960,853
dynamics—Our analysis of the dataset shows that all the dynamics
can be classified into three major categories based on their causes:
(i) browser or OS updates, (ii) user actions and (iii) system envi-
ronment updates. Our further study of the dynamics dataset yields
four insights:
• Insight 1: Browser fingerprints, particularly the dynamics, reveal
privacy- or security-related information. The reason is that the
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
Song Li and Yinzhi Cao
cause of a piece of dynamics could contain privacy- or security-
related information. For example, we find that a certain emoji
update at a mobile Chrome browser can reveal the fact that
a Samsung browser is co-installed with the Chrome browser
because the Samsung update introduces a new emoji. Similarly,
for another example, the font list and the changes of fonts in
fingerprint dynamics can be used to infer whether Microsoft
Office is installed or even updated.
• Insight 2: The F1-score and matching speed of prior evolution-aware
fingerprint work degrade significantly in a large-scale setting. As
stated, prior work, particularly FP-Stalker [40], is evaluated us-
ing a relatively small dataset with thousands of users and fin-
gerprints to link evolved fingerprints. We find that the F1-score
of rule-based FP-Stalker degrades from 86.1% to 75.9% for top
ten candidates and the matching speed from around 100 ms
to 1 second if the number of fingerprints increases from 100K
to one million; the learning-based FP-Stalker cannot scale to a
large-scale dataset with more than 300K fingerprints (the scala-
bility issue of learning-based FP-Stalker is acknowledged in the
original paper).
• Insight 3: The dynamics of some browser features are correlated
although the features themselves are not. For example, we have
observed that the sample rate of audio card in Chrome may
change together with the GPU renderer. The reason is that al-
though some features are not directly related, the causes behind
the changes may be. Specifically, in the aforementioned example,
Chrome adopts DirectX to manage audio card on certain Win-
dows machines: An update of DirectX will influence both the
GPU renderer and the audio sample rate.
• Insight 4: The timing of some fingerprint dynamics are correlated
with real-world events, such as the release of browser or OS updates.
We believe that such an insight might be used to improve the
performance of existing works in linking fingerprints. For exam-
ple, if Firefox updates to a new version with an added web font, a
fingerprinting website can predict that all the fingerprints in the
database with the old Firefox version may change to the version,
i.e., with a updated user agent string and the newly-added web
font.
2 MEASUREMENT PLATFORM
In this section, we introduce our measurement platform used to
collect and generate two types of dataset: raw and dynamics. The
raw dataset contains all the fingerprints including anonymized
usernames, cookies, and IP addresses from the deployment websites;
the dynamics dataset is processed by grouping fingerprints into
browser instances and calculating the deltas.
2.1 Terminology Definition
In this part, we describe several terminologies that are used through-
out the paper for those readers who are unfamiliar with them.
• Browser Instance and Browser ID. A browser instance is a piece
of browser software installed on a certain operating system and
a hardware device. For example, a Google Chrome Browser on a
desktop is one browser instance and Microsoft Edge on the same
device is another. We assign each unique browser instance an ID
(called browser ID) and describe its makeup later in Section 2.3.1.
Figure 1: Architecture and deployment of our tool deployed
at an European website for eight months.
• User ID. A user ID is an identifier for distinguishing one user
from another, which is shared across different devices of the
same user. In this paper, we adopt a hash value of the username
as the user ID.
• Browser Fingerprint and Anonymous Set. A browser fingerprint
(or for short fingerprint) is a set of features, such as user agent
and font list, from a given browser instance. An anonymous
set, a term widely used in prior works [25], is a set of browser
instances with the same fingerprint. The smaller the anonymous
set size is, the better quality the browser fingerprint is.
• Fingerprint Dynamics. A piece of fingerprint dynamics repre-
sents the change of one browser instance’s fingerprint due to
various reasons, such as browser updates and user actions.
2.2 Raw Dataset Collection
In this part, we describe our methodology in collecting a raw dataset
with browser fingerprints, IP addresses and user IDs. We start from
describing our tool and then present the tool’s deployment.
Fingerprinting and Data Collection Tool. We implemented
2.2.1
an open-source fingerprinting and data collection tool at a reposi-
tory [5]. Our tool, as shown in Figure 1, has two main components:
one data collection client and one data storage server. The client has
a task manager that launches different tasks in parallel to collect a
variety of features as documented by different prior works [8, 16, 25].
Then, the data transfer module of the client will encode the col-
lected information and send it to the data storage server. Note that
the data transfer module will check whether the information is
already in the server’s database—if yes, the module will just send a
hash value to save the transmission overhead.
There are two properties of our tool that is worth mentioning.
First, our tool is fast, which finishes collecting all the information
within one second. Specifically, we divide data collection stages
into many modules and run them in parallel. Then, the data collec-
tion module compresses the information transmitted between the
client for efficiency consideration. Second, our tool utilizes only
one third-party JavaScript library, i.e., three.js. The reason is that
the website owner, citing their company policy, specifically asks us
to avoid using third-party libraries, such as jQuery. Their concern
is that the inclusion of third-party JavaScript library may introduce
371
!"#$%&’"()*+",-",."/#01"-2+2)3(-2+2/$"*24,0’"50+6’0(01",!0)0*+)%,01"*+",-",!0)0*),0(+4",*’%78$"9$2"()9%%62"*2(+)0$$0)2%(:872%**70)0;0+>"+?0+2@*4"0)8,"*70)0!0)0*@%$$"@)2%(*’%78$"9%%62">0(7$",!"#$%&:1"()*+),2(10(7$2(1*’%78$"*90(-0+*;,%(2B"Who Touched My Browser Fingerprint?
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
unknown or under-controlled vulnerabilities. After many rounds
of discussions, we mutually agree to keep the necessary one, i.e.,
three.js.
2.2.2 Tool Deployment. We deploy our tool at an European website
from July 2017 to July 2018 to collect browser fingerprints. Our
deployment can be divided into three stages and only the data
collected from December 2017 and July 2018 in the Deployment
Stage 3 is used in the study:
Deployment Stage 1: Deployment on Exit Webpage (two months).
In the first stage, we install our tool on the least important webpage
of our deployment website, i.e., the exit webpage that the user sees
after clicking the log-out button. During this stage, we encounter
and fix several bugs such as the use of old JavaScript features leading
to console errors.
Deployment Stage 2: Deployment on 30% of Webpages (two
months).
In the second stage, we start to install our tool on 30%
of webpages of our deployment website, including the login page
and several other content pages. During this stage, we find that
our server, deployed at Amazon, cannot handle the huge amount
of traffic introduced from our deployment website, and therefore
we have to increase both the memory and CPU capability of our
server.
Deployment Stage 3: Deployment on All Webpages (eight months).
In the last stage, we deploy our tool on all the webpages of our
target website—the data collected during this stage is used in this
study. The same as previous stage, we also increase our server
capability to accommodate more traffic. Note that due to technical
glitches, our data collection server was partially down during eight
days in the first month. We also make two hot patches during our
deployment: one on the 7th day to include the list of HTTP headers
and the other on the 29th day to fix an error of “Accept” header
collection in HTTP requests. That said, any fingerprint or statistics
involving these two features only reflect data collected after these
two days.
2.3 Dynamics Dataset Generation
In this part, we describe how to generate fingerprint dynamics from
the raw dataset. The generation of the dynamics dataset has two
steps. First, we represent each browser instance via browser ID
and then group fingerprints based on browser instances. Second,
we calculate the delta, using a diff operation, between each pair
of consecutive fingerprints of the same browser instance: Those
deltas are the dynamics dataset of our study.
2.3.1 Browser Instance Representation. We represent each browser
instance with a special identifier, called browser ID. The generation
of browser ID has two steps: (i) initial construction and (ii) process-
ing of special cases. First, we construct an initial browser ID based
on user ID and stable browser features, e.g., hardware-related ones
including CPU class, device and OS, number of CPU cores, browser
type and GPU information. Second, we link two browser IDs to-
gether if these two browser IDs belong to some exceptional cases
observed by cookie instances. For example, if a mobile browser
opens a webpage in the desktop mode, the observed browser type
changes from mobile to desktop—this is one special case for such
linking.
There are two things worth noting here. First, we adopt browser
ID over cookies and user IDs alone due to the following reasons.
We do not use cookies because a user may clear cookies and thus
multiple cookie instances may map to one browser ID. Over 30%
of browser instances in our dataset have cleared cookies at least
once. Furthermore, we do not use user ID alone because a user
may have multiple devices or use more than one browser to visit
our deployment website. Over 15% of users in our dataset have
used more than one browser for visits. Second, there are some
software features, such as the support of localStorage and cookie,
are also stable according to the cookie metrics but excluded from
the browser ID. The reason is that the changes of these features
are controlled by the users, thus being unpredictable. Furthermore,
because we use cookies to gauge stability, the stability of such
features may be influenced.
2.3.2 Diff Operation. In this part, we describe our diff operation
that calculates the delta between two fingerprints of the same
browser instance. Depending on the feature type, e.g., string, set
and images, there are three different operations.
First, we will parse a string feature into ordered subfields and
calculate the diff of each field. For example, the user agent is broken
down into many ordered subfields, such as browser name, ver-
sion, subversion, backslashes, parenthesis and even whitespaces.
Note that we requires that subfields to be ordered because some-
times the sequence may also change, e.g., from “gzip, deflate, br” to
“br, gzip, deflate”. Furthermore, whitespaces may also be added or
deleted, e.g., from “gzip,deflate” (no whitespace in Maxthon Browser
4.9.5.1000) to “gzip, deflate” (with whitespace in 5.1.3.2000).
Second, we represent a set feature just as a set and calculate
the diff via two subtraction operations to obtain added and deleted
elements. For example, the font list is obtained via querying each
font and forming a set. We will calculate two subset: one for added
fonts and the other for deleted fonts.
Third, we calculate the diff of two complex features, e.g., a canvas
image, as a pair of two hashes. Note that it is possible to compute the
pixel differences for such features. We did not adopt this approach
because such delta does not contain much information, i.e., the
change of the same pixel might not indicate the same update, and
the computation involves heavyweight operation, slowing down
the dataset generation.
False Negative and Positive Estimation. In this part of the
2.3.3
section, we estimate the false negative and positive rates of our
browser instance representation via browser ID. From a high level,
our estimation is based on the appearance of cookies within or
across different browser instances: Two browser instances with
the same cookies are falsely separated, being a false positive; One
browser instance with interleaved cookies should be separated into
two instances, being a false negative. Then, we use the distributions