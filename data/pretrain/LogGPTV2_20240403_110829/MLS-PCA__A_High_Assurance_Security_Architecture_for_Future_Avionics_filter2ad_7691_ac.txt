AAP  connection  by  “zeroizing”  the  session  key  for  the 
connection,  Ksession.3  Zeroizing  is  a  command  sent  from 
2 Added security can be achieved by applying a non-invertible function 
to Ksession to foil a rogue process impersonating an EPE from obtaining 
Ksession  and deducing the component keys. 
3 “Zeroize” does not mean setting a key of all zeros. It means replacing a 
key with a random value not known by any other EPE, thereby making 
encrypted text using the zeroized key undecipherable.
the  NSE  to  the  EPE  guarding  the  guilty  AAP.  Since  the 
NSE  and  EPE  are  trusted  processes  the  key  erase  action 
occurs  near  instantaneously  breaking  the  AAP  trusted 
connection.  The  AAP  cannot  thwart  the  zeroize  action 
because  it  is  not  a  party  to  the  private  infrastructure 
command between the NSE and EPE. Also, unlike zeroize 
of traditional encryption boxes, the zeroize command can 
be  acknowledged  and  states  synchronized  after  action 
taken by the EPE, which has a separate trusted connection 
with  the  NSE.  The  model  also  uses  zeroize  of  Kcoal  at  a 
specific  EPE  to  remove  a  subject  (i.e.,  AAP)  from  a 
coalition. 
5.6  Initialize and Bootstrap of MLS-PCA 
The NSE and the EPE is the Trusted Computing Base 
(TCB) for the MLS-PCA scheme. There are two possible 
implementation  configurations  for  the  MLS-PCA  model 
to  protect  the  TCB:  the  first  has  the  EPE  in  hardware; 
second,  has  the  EPE  as  a loadable software process. Our 
view  of  the  first  consideration  is  the  EPE  process  is  a 
hardware  subroutine  of  the  CPU  chip,  somewhat  like 
floating  point  hardware.  We  are  looking  at  the  proposed 
PCA  hardware  chips  for MIT’s Raw [21] and Stanford’s 
Smart  Memories  [22]  for  how  the  model  maps  into  the 
hardware. Generally speaking the hardware configuration 
is an easier initialization implementation because most of 
the initial parameters are “wired” into the hardware, e.g., 
network addresses, or process logic. The unique hardware 
initialization issues are a resource allocation consideration 
when  there  exist  lots  of  CPUs,  memory,  and  buses  on  a 
chip, i.e., a Raw chip has 16 CPUs; Smart Memories has 
64  CPUs.  The  software  EPE  initialization  issues  are 
classical security and integrity issues, the harder solution 
of the two configurations.  
5.6.1  Assumptions.    For  any  given  classified  avionics 
environment,  the  classified data  and  applications (AAPs) 
will be created and configured in a classified and trusted 
ground-based support system, a Mission Planning Center 
(MPC).    The  MPC  is  an  MLS  trusted  facility  that  plans 
the  mission,  assembles  the  avionics  mission  software 
AAPs  from  trusted  configuration  files,  and  defines  the 
mission configuration parameters (i.e., AAPs, NSE, EPEs, 
flight  plan,  radio  frequencies,  encryption  keys,  security 
levels of AAPs, weapons and fuel stores, and other items). 
The  mission  vehicle  information  systems  will  contain 
only  unclassified  data  when  “parked,”  be  it  an  aircraft, 
UAV, or ship. The mission configuration parameters will 
be  written  to  a  PMD  to  be  loaded  into  the  vehicle  just 
prior  to  the  mission.  The  PMD  will  be  encrypted  to 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
protect  the  pre-  and  post-mission  information stored on
the PMD.
There is a  well  known  problem  in  trusted  systems  we 
call the  “fixed  point  theorem.”  Encryption  keys  can  be 
wrapped  in  other  encryption  keys  for  protection during
transmission and storage outside of the crypto component.
However,  at  some  fixed point there  is  a  secret  clear  text 
key  pre-placed  to  permit the boot  process  to  unfold  in  a 
staged  and  protected  manner.  In  MLS-PCA the fixed
point is a physical “ignition key” inserted into the system,
and a pre-placed PKI private key in non-volatile memory
of  the  NSE  processor  board,  similar to the Trusted
Computing  Platform  Alliance  scheme  [23].  The ignition
key  is  used  to  begin  the  unwrapping  of  encrypted keys
using a physically protected token. To decrypt the PMD,
the ignition key will be carried to the vehicle by the pilot
(or  mission  commander  for  pilot  less vehicles) and
inserted  in  the  cockpit  prior  to  takeoff. The ignition key,
like the PMD, is created by the MPC. We anticipate NSA
as responsible  for  the  PMD  encryption/decryption  logic
and wiring of the ignition key reader and PMD.
their  net  addresses,  Adn  and  Ade), 
(i.e.,
their 
identifications  (Idn,  Ide),  and  the  PKI  private  key  and 
public  key  of  the  NSE  (Nv  and  Np,  respectively).  MPC 
will also build  a  table  of  permissions  and  classifications
for all AAPs,  the  Bell-LaPadula  access  matrix,  for  the 
mission. Lastly,  the  NSE  will  know  all  these  initial 
conditions  by  loading  the  access  matrix  from the PMD;
the EPEs  will  know  some  of  these  data  by  parameter
loading  by  MPC  or  NSE  for  each  EPE-AAP  pair  code 
loaded – Np, Adn, Ade, Idn.
5.6.2  EPE-NSE  Initialization  Protocol.  There  can  be  a 
priority of operation of the mission functions reflected in
the  order  of  AAP  initialization.  The  NSE  will  know  that 
priority.  For  an  AAP  to  run  it  must first be bound to an
EPE. Since both AAP  and  EPE  are  software  processes, 
they should  run  on  adjacent  processors.  Also,  there  is 
nothing unique about an EPE; any EPE can be bound to a 
unique  AAP.  The  NSE  reads  the  PMD  and  creates an
EPE, loading and/or assigning parameters to bind it to an 
AAP.  The  EPE  is  then  executed  while  the  NSE creates
E P E
E P E
E P E
M essage
M essage
M essage
N SE
N SE
N SE
(H ello, E r, A d e, C k)N p
(H ello, E r, A d e, C k)N p
(H ello, E r, A d e, C k)N p
N SE  R eply: (N s, Id n, Id e, C k)E r
N SE  R eply: (N s, Id n, Id e, C k)E r
N SE  R eply: (N s, Id n, Id e, C k)E r
E PE  A ck: (Id e, C k)N s
E PE  A ck: (Id e, C k)N s
E PE  A ck: (Id e, C k)N s
1
1
1
2
2
2
3
3
3
State Space
State Space
E PE
E PE
N SE
N SE
@ Start:    N p, E r, Id n, A d e, A d n
@ Start:    N p, E r, Id n, A d e, A d n
N v, Id n, A d n
N v, Id n, A d n
@  E nd 1: N p, E r, Id n, A d e, A d n
@  E nd 1: N p, E r, Id n, A d e, A d n
@  E nd 2: N p, E r, Id n, A d e, 
@  E nd 2: N p, E r, Id n, A d e, 
A d n,, Id e, N s
A d n,, Id e, N s
N v, Id n, A d n, N s,
N v, Id n, A d n, N s,
E r, A d e
E r, A d e
N v, Id n, A d n N s,
N v, Id n, A d n N s,
E r, A d e , Id e
E r, A d e , Id e
@  E nd 3: N p, E r, Id n, A d e, 
@  E nd 3: N p, E r, Id n, A d e, 
N v, Id n, A d n
N v, Id n, A d n
A d n , Id e, N s
A d n , Id e, N s
N s, E r, A d e , Id e
N s, E r, A d e , Id e
W here:
W here:
N p = N SE  P ublic K ey         N s =  N SE -E PE  Session K ey
N p = N SE  P ublic K ey         N s =  N SE -E PE  Session K ey
= E P E  R andom K ey    Id e = E PE  Id, Id n = N SE  Id
E r
= E P E  R andom K ey    Id e = E PE  Id, Id n = N SE  Id
E r
N v = N SE  P rivate K ey     A d e =  E PE  A ddress
N v = N SE  P rivate K ey     A d e =  E PE  A ddress
A d n = N SE A ddress
A d n = N SE A ddress
Figure 5.6: EPE Initialization Protocol 
Typically,  there  will  be  one  NSE  and  thousands  of
AAP-EPE pairs.  The  NSE  may  be  redundant  or 
distributed  for  reliability.  The  boot  logic  for  the  system
will  have  the  NSE  loaded  first,  followed by prioritized
EPE-AAP  pairs  loaded  from  the  PMD.  The  mission  will 
drive all the initialization parameters. MPC will determine
the  load  priorities,  locations  of  all  devices and processes
another EPE. The EPE’s first  action  is  to  generate  a 
random key (Er). Since all EPEs are identical, Er must be
based on some changing  system  variable  to  avoid
repeating  Er  among  different  EPE  invocations.    Its  next
action is to create and send a Hello message to the NSE,
giving  the  Hello  message  identification,  its  net address
(Ade),  random  key (Er),  and  an  integrity  checksum,  all 
wrapped  in  the  public  key  (Np) of the  NSE.  This  foils
unauthorized  reading  of  the  Hello  message by possible
Trojans  hidden  in  the  architecture.  The  NSE  saves  these
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
parameters and assigns the next priority AAP to this EPE
by  assigning  an  identity  (Ide)  to  the  EPE;  Ide  can  be  the 
identity of  the  bound  AAP.  It  includes  its  own  Idn  to
confirm  to  the  EPE  its  identity, gives a newly created
NSE-EPE session key (Ns) based on the security level of 
the  bound  AAP,  adds  an  integrity  checksum, and wraps
the whole message in the EPE’s Er. This provides critical
information securely to  the  EPE  to  whom  it  is  bound, 
including the session key  for  further  NSE  dialogs,  the
identity confirmation of the NSE, and an indication that a 
false NSE is not spoofing it. The last message by the EPE 
is  an  acknowledgement  to  synchronize  state  with  the
NSE.  This  complete  initialization sequence and state
space is shown graphically in Figure 5.6. 
6. Certification and Accreditation, C&A 
(EAL5-7)
With  the  demise  of  DOD  5200.28-STD  [3]  and  the
NIAP  practice  defined  only  through Common Criteria
(CC)  Evaluation  Assurance  Level  4  (EAL4), high
assurance
is  without  a  C&A  support
organization.  Only  a  DOD  user  agency  can  assume
responsibility,  and  only  for  its  application  [11,  15]. 
Because  MLS-PCA 
first
application, we have adopted the  CC  EAL7  C&A  as  the
driving security assurance  requirements,  particularly  the
formal specification and verification [4].
is  years  away  from its
Table 6.1: MLS-PCA Formal Spec Characteristics 
Feature
Quantity
Signatures (i.e., Domains)
Relations (i.e., State Variables) 
Operations  (i.e., Transforms)
Predicates  (i.e., Conditionals)
Facts  (i.e., Definitions)
Invariants  (i.e., Constraints)
63
64
39
38
28
18
6.1 Formal Specification 
The functional  model  for  MLS-PCA  is  described  in
Section 5. Early in the DARPA PCA program we studied
available  formal  language  systems  [24]  and  selected
MIT’s Alloy  for 
its  state  machine  expressiveness, 
available  tool  suite,  and  its  constraint  checking approach
to spec verification [25]. The MLS-PCA formal   spec  is 
now    complete  and  verified.  Its  salient  features are
summarized in  Table  6.1.  Details  of 
the  formal
specification  can  be  found  in  the companion paper,
“Using  Alloy  to  Formally Specify MLS-PCA Trusted
Security Architecture” [26]. 
6.2  MLS-PCA Verification
that  satisfy  all  spec 
The Alloy Constraint Checker does not prove a spec is
correct,  rather  it  assures  the  user  the  spec  is  consistent 
with its  assertions,  constraints  and  initial  values.  It 
logically checks the spec to show the existence of values
of  state  variables 
transforms,
constraints, and conditions. If there are no values of state
variables that meet these  conditions,  the  spec  is  “over 
constrained.” If there are contradictions among the states,
constraints,  and  values,  the  spec  is  “under  constrained.”
Finding  the  right  balance  between these  extremes  is  the 
art  of  writing  a  formal spec.  The  Alloy  Constraint 
Checker provides the  engineering  balance  to  verification
between no checking and formal proof. The tools are fast
and quite useable [27].
6.3  MLS-PCA Flaws Found by Verification 
One of the earliest flaws found by the Alloy Constraint
Checker we subsequently called “fate sharing” – death of 
an  EPE  and  its  bound  AAP.  Before repair,
the spec
allowed  an  AAP  process  to  die  and  be  replaced  by 
another. The Alloy Checker  found  a  case  where  a 
message destined for an old Secret AAP arrived and was
delivered  to  a  new  unclassified  AAP  now  bound  to the
EPE;  a  clear  violation  of  the no write-down constraint.
The repair was fate sharing of AAP-EPE. 
Another flaw found dealt with messages arriving out of
order. An NSE sends two messages to an EPE: rekey then
revoke a trusted connection. If the messages arrive out of 
order,  the  new  key  would  in effect re-establish the just
revoked connection. MLS-PCA  will  guarantee  messages
arrive  in  order  to  assure  state synchrony and prevent
replay attacks. 
The  last  example  arises  from the  distributed  nature  of 
the MLS-PCA model. Distributed systems have potential
state  synchrony  problems  due  to message delays. The