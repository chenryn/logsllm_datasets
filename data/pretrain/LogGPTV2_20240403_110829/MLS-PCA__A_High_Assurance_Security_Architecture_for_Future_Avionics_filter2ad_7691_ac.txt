### AAP Connection and Zeroization

The AAP connection can be terminated by "zeroizing" the session key (Ksession). Zeroization is a command issued from the NSE to the EPE that guards the guilty AAP. This process involves replacing the session key with a random value unknown to any other EPE, rendering the encrypted text undecipherable. 

To enhance security, a non-invertible function can be applied to Ksession. This prevents a rogue process impersonating an EPE from obtaining Ksession and deducing the component keys.

Since the NSE and EPE are trusted processes, the key erasure occurs almost instantaneously, breaking the AAP's trusted connection. The AAP cannot interfere with this zeroize action because it is not part of the private infrastructure command between the NSE and EPE. Unlike traditional encryption devices, the zeroize command in this model can be acknowledged, and states can be synchronized after the EPE takes action, which has a separate trusted connection with the NSE. Additionally, the model uses zeroization of Kcoal at a specific EPE to remove a subject (i.e., AAP) from a coalition.

### 5.6 Initialization and Bootstrap of MLS-PCA

The NSE and the EPE form the Trusted Computing Base (TCB) for the MLS-PCA scheme. There are two possible configurations for implementing the MLS-PCA model to protect the TCB:

1. **Hardware Configuration**: The EPE is implemented as a hardware subroutine of the CPU chip, similar to floating-point hardware. We are considering proposed PCA hardware chips from MIT’s Raw [21] and Stanford’s Smart Memories [22]. The hardware configuration simplifies initialization because most initial parameters are "wired" into the hardware, such as network addresses and process logic. Unique hardware initialization issues include resource allocation when there are multiple CPUs, memory, and buses on a chip (e.g., 16 CPUs for Raw and 64 CPUs for Smart Memories).

2. **Software Configuration**: The EPE is a loadable software process. This configuration faces classical security and integrity challenges, making it the more complex solution of the two.

#### 5.6.1 Assumptions

In a classified avionics environment, classified data and applications (AAPs) are created and configured in a classified and trusted ground-based support system, the Mission Planning Center (MPC). The MPC plans the mission, assembles the avionics mission software AAPs from trusted configuration files, and defines mission configuration parameters (e.g., AAPs, NSE, EPEs, flight plan, radio frequencies, encryption keys, security levels, weapons, and fuel stores).

When parked, the mission vehicle information systems contain only unclassified data. Mission configuration parameters are written to a PMD, which is loaded into the vehicle just before the mission. The PMD is encrypted to protect pre- and post-mission information.

A well-known issue in trusted systems, known as the "fixed point theorem," involves encryption keys being wrapped in other encryption keys for protection during transmission and storage outside the crypto component. In MLS-PCA, the fixed point is a physical "ignition key" inserted into the system and a pre-placed PKI private key in the NSE processor board's non-volatile memory, similar to the Trusted Computing Platform Alliance scheme [23].

The ignition key initiates the unwrapping of encrypted keys using a physically protected token. To decrypt the PMD, the ignition key is carried to the vehicle by the pilot (or mission commander for pilotless vehicles) and inserted in the cockpit before takeoff. The NSA is anticipated to be responsible for the PMD encryption/decryption logic and the wiring of the ignition key reader and PMD.

#### 5.6.2 EPE-NSE Initialization Protocol

The order of AAP initialization reflects the priority of mission functions. The NSE knows this priority. For an AAP to run, it must first be bound to an EPE. Both AAP and EPE are software processes and should run on adjacent processors. Any EPE can be bound to a unique AAP.

The NSE reads the PMD and creates an EPE, loading and assigning parameters to bind it to an AAP. The EPE generates a random key (Er), creates a Hello message, and sends it to the NSE. The Hello message includes its identification, net address (Ade), random key (Er), and an integrity checksum, all wrapped in the NSE's public key (Np). This prevents unauthorized reading by potential Trojans.

The NSE saves these parameters, assigns an identity (Ide) to the EPE, confirms its own identity (Idn), provides a newly created NSE-EPE session key (Ns), adds an integrity checksum, and wraps the message in Er. This ensures secure communication, including the session key for further NSE dialogs, identity confirmation, and protection against false NSEs. The EPE acknowledges the message to synchronize state with the NSE. The complete initialization sequence and state space are shown in Figure 5.6.

### 6. Certification and Accreditation (C&A)

With the demise of DOD 5200.28-STD [3] and the NIAP practice defined only through Common Criteria (CC) Evaluation Assurance Level 4 (EAL4), high assurance is without a C&A support organization. Only a DOD user agency can assume responsibility, and only for its application [11, 15]. Since MLS-PCA is years away from its first application, we have adopted CC EAL7 C&A as the driving security assurance requirements, particularly the formal specification and verification [4].

#### 6.1 Formal Specification

The functional model for MLS-PCA is described in Section 5. Early in the DARPA PCA program, we studied available formal language systems [24] and selected MIT’s Alloy for its state machine expressiveness, tool suite, and constraint checking approach to spec verification [25]. The MLS-PCA formal spec is now complete and verified. Its salient features are summarized in Table 6.1. Details of the formal specification can be found in the companion paper, “Using Alloy to Formally Specify MLS-PCA Trusted Security Architecture” [26].

#### 6.2 MLS-PCA Verification

The Alloy Constraint Checker does not prove a spec is correct but assures the user that the spec is consistent with its assertions, constraints, and initial values. It logically checks the spec to show the existence of values of state variables, transforms, constraints, and conditions. If no values of state variables meet these conditions, the spec is "over-constrained." If there are contradictions among the states, constraints, and values, the spec is "under-constrained." Finding the right balance between these extremes is the art of writing a formal spec. The Alloy Constraint Checker provides the engineering balance to verification between no checking and formal proof. The tools are fast and quite usable [27].

#### 6.3 MLS-PCA Flaws Found by Verification

One of the earliest flaws found by the Alloy Constraint Checker was "fate sharing" – the death of an EPE and its bound AAP. Before the repair, the spec allowed an AAP process to die and be replaced by another. The Alloy Checker found a case where a message destined for an old Secret AAP arrived and was delivered to a new unclassified AAP now bound to the EPE, violating the no write-down constraint. The repair was fate sharing of AAP-EPE.

Another flaw involved messages arriving out of order. An NSE sends two messages to an EPE: rekey and then revoke a trusted connection. If the messages arrive out of order, the new key would effectively re-establish the just-revoked connection. MLS-PCA guarantees messages arrive in order to ensure state synchrony and prevent replay attacks.

The last example arises from the distributed nature of the MLS-PCA model. Distributed systems have potential state synchrony problems due to message delays.