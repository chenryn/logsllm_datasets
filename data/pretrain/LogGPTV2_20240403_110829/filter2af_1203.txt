# 【技术分享】内核调试入门教程

##### 译文声明
本文为翻译文章，原文来源于[vvalien1.wordpress.com](http://vvalien1.wordpress.com)。译文仅供参考，具体内容及含义以原文为准。

**翻译：** [shan66](http://bobao.360.cn/member/contribute?uid=2522399780)

**预估稿费：260RMB（欢迎投稿！）**

**投稿方式：**
- 发送邮件至 [linwei#360.cn](mailto:linwei#360.cn)
- 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 前言
过去我一直认为内核调试不仅在环境搭建上困难重重，实际操作起来也相当复杂。然而，事实证明，它比我们想象中要简单得多。

## 所需软件
- **IDA Pro 6.8+**：我们将使用IDA作为调试器。
- **Visual Studio 2015 + Windows 10 SDK + WDK (Windows Driver Kit)**：这些工具对于编译工作非常有用。
- **WinDBG for Win7**：如果你打算在较旧的系统（如Win7 VM）上进行调试，并且遇到新版本Windbg无法正确显示寄存器的问题时，可以安装这个软件。
- **Symbols文件**：由于我的网速较慢，我选择从这里一次性下载所需的symbols文件，并将其安装到C:\Symbols目录下。符号文件有两种类型：Checked Build或Debug Build以及Retail Symbols。关于两者的区别，请参阅[这篇文章](http://stackoverflow.com/questions/5775893/)。

## 安装与配置
### 符号路径设置
在开始之前，需要先设置符号路径。确保你已经将C:\Symbols目录设置好。
```
_NT_SYMBOL_PATH = srv*C:\Symbols*http://msdl.microsoft.com/download/symbols
```

### 修改IDA配置
接下来，我们需要修改位于“C:\Program Files (x86)\IDA 6.8\cfg”中的ida.cfg文件。找到与DBGTOOLS相关的行并取消注释（注意：即使你要调试的是x64内核代码，也要使用x86路径！）。
- 对于Win7:
  ```
  DBGTOOLS = "C:\Program Files\Debugging Tools for Windows (x86)\";
  ```
- 对于Win8+:
  ```
  DBGTOOLS = "C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\";
  ```

### 系统测试
现在进行一个简单的测试来检查一切是否正常工作。我们将使用Windows 10 x64虚拟机进行测试，因为它相对容易设置。

#### 修改BCDEdit设置以启用网络调试
以管理员身份执行以下命令，并记录相关参数：
```
bcdedit.exe /debug on
bcdedit.exe /dbgsettings NET HOSTIP:192.168.1.101 PORT:50000
```

#### 加载WinDbg并连接到内核
启动WinDbg，选择File -> Kernel Debug (Ctrl + K)，输入相应的参数。通过暂停命令挂起虚拟机。

#### 加载驱动程序符号文件
加载所有已加载驱动程序的符号文件时，请注意区分内核模式和用户模式：
```
.reload /f
```

#### 切换到用户模式
```
.process /i [addy_of_user_proc]
g
.reload /f /user
```

#### 切换回内核模式
```
.process /i [addy_of_kernel_proc]
g
.reload /f
```

#### 检查IDA是否支持内核调试
确保Windbg已关闭后重新启动虚拟机。以管理员身份打开IDAx64，进入Debugger -> Attach -> Windbg Debugger选项。如果你没有正确设置dbgtools选项，则会收到连接错误消息。
- 对于Win8+:
  ```
  net:port=50000,key=YOUR.KEY.GOES.HERE
  ```
- 对于Win7:
  ```
  com:port=\.pipemypipe,pipe,reconnect
  ```

如果一切顺利，你会看到类似下面的消息，表明设置成功了！

## 接下来做什么？
你可以尝试许多不同的事情，但我建议首先阅读本系列的文章。此外，也可以参考以下资源：
- [Debug Universal Drivers – Step by Step Lab (Echo Kernel-Mode)](https://msdn.microsoft.com/en-us/library/windows/hardware/mt269367(v=vs.85).aspx)
- [Hackingz Ze Komputerz – Exploiting CAPCOM.SYS](https://www.youtube.com/watch?v=pJZjWXxUEl4)

当然，你也可以自己动手实践，从中学习更多知识。

## VirtualKD与Windows 7
虽然在Windows 7上进行内核调试较为容易，但该系统不支持网络连接，因此必须设置管道。这会导致速度变慢。为此，我们可以安装VirtualKD，尽管效果并不十分理想。假设你在Windows 10 x64上进行调试，目标是Windows 7（32位）系统。

### 免费的Microsoft VM
微软提供了一个免费的VM，实验结果表明其表现良好。我们使用的虚拟机镜像是IE11 on Win7，实际上是x86版本。下载并安装好虚拟机后，继续安装VirtualKD。

### 安装VirtualKD
虽然VirtualKD的安装程序存在一些问题，但我们可以通过Visual Studio编译自己的版本来解决这个问题。只需重新编译VirtualBoxIntegration目录下的代码即可。然后，可以从以下地址下载安装程序的其他部分：
- 替换下载的VirtualBoxIntegration.exe为你自己编译的那个。
- 安装程序的其余部分无需更改，按照说明完成安装即可。

启动虚拟机，以管理员身份运行vmmon64.exe，并保持其运行状态。选择调试器路径并单击“运行调试器”。

请注意，使用新版本的Windbg可能无法调试老版本的虚拟机。本文所用版本的下载地址为：
- 安装目录：`C:\Program Files\Debugging Tools for Windows (x86)`

### IDA与VirtualKD
现在，如果你加载IDA并为Windbg输入正确的路径，只需输入以下命令即可让IDA工作：
```
com:port=\.pipekd_IE11_-_Win7,pipe,reconnect
```

### IDA主题
#### 加载自定义主题
加载自定义主题很简单。首先准备一个主题文件，然后依次选择Options -> Colors -> Import导入即可。你可以根据个人喜好调整颜色，下载链接在此处。

#### 载入皮肤插件
将IDASkins.plX放入IDA安装目录下的plugins文件夹中：
- `C:\Program Files (x86)\IDA 6.8\plugins`

并将skin文件夹复制到IDA安装根目录下：
- `C:\Program Files (x86)\IDA 6.8`

#### 加载HexRaysCodeXplorer
HexRaysCodeXplorer能提高伪代码生成质量（F5）。下载地址如下：
- 下载HexRaysCodeXplorer.p64 / HexRaysCodeXplorer.plw，并将它们放入plugins文件夹：
  - `C:\Program Files (x86)\IDA 6.8\plugins`

### 结合使用Windbg和IDA
通常，调试工作分为静态分析和动态分析。IDA能够将二进制文件与符号文件进行比较并对函数命名，但在内核调试时却不能对参数命名。不过，通过联合使用Windbg和IDA，我们可以解决这个问题。为此，我们需要ret-sync插件，下载地址为：

#### 为Windbg编译.dll文件
你需要复制repo，并从以下位置将.sln加载到Visual Studio中：
- `ret-sync\ext_windbg\sync\sync.sln`

选择ReleaseWin32选项，右键点击解决方案并选择构建，将在Release文件夹中生成sync.dll文件。

#### 将插件/.dll安装到Windbg
将sync.dll复制到winext文件夹中：
- `C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\winext`
- 如果你使用的是旧版本，可以使用以下文件夹：
  - `C:\Program Files (x86)\Debugging Tools for Windows (x86)\winext`

#### 为IDA安装插件
将ext_ida文件夹从repo复制到IDA的plugins目录中：
- `C:\Program Files (x86)\IDA 6.8\plugins`

**警告**：如果你当前运行的是IDA 6.8，需要修改Python插件才能使其正常工作！从IDA 6.9开始，插件需要PyQt5，而IDA 6.8使用的是PySide，这就是为什么一些新脚本无法运行的原因。对此，我们只需执行以下操作即可：
- 删除以下文件：
  - `C:\Program Files (x86)\IDA 6.8\plugins\ext_ida\ext_idaSyncPlugin.py`
- 使用以下文件替换：
  - `C:\Program Files (x86)\IDA 6.8\plugins\ext_ida\compat_pysideSyncPlugin.py`

具体变更内容请参考此处。

#### 在IDA中打开驱动程序
以常规方式在IDA中加载驱动程序文件。

#### 加载ret-sync插件
通过File -> Script file菜单项，找到以下插件：
- `C:\Program Files (x86)\IDA 6.8\plugins\ext_ida\SyncPlugin.py`

加载后，你应该会在输出窗口中看到结果，端口随之改变，并弹出一个ret-sync窗口：
```
[*]  .load sync
kd> !sync
[sync] No argument found, using default host (127.0.0.1:9100)
[sync] sync success, sock 0x9c8
[sync] probing sync
[sync] sync is now enabled with host 127.0.0.1
#帮助信息 
!synchelp
```

加载IDA（连同驱动程序），然后以内核调试器方式加载Windbg，在目标驱动程序上设置断点。在IDA中加载Python脚本，当断点命中时，会启动一个“Windbg”窗口。即使你在Linux中使用IDA并在Wine中运行Windbg，这个插件也应该能够正常工作。

如果你加载IDA并将其作为内核调试器连接，也不会有问题，因为Windbg将被启动。因此，你可以将两个IDA实例连接在一起，处理你的二进制文件。

#### 修改脚本中的值以改变主题颜色
在脚本中，修改以下这一行的值就可以改变主题的颜色：
```python
COL_CURLINE = 0x800000
```

## 总结
本文介绍了如何搭建内核调试环境、修改主题以及一些非常有用的插件。最后讨论了如何结合使用Windbg和IDA的方法。希望对你有所帮助，祝你阅读愉快！