# Athena: A Framework for Scalable Anomaly Detection in Software-Defined Networks

## Authors
Seunghyeon Lee†, Jinwoo Kim†, Seungwon Shin†, Phillip Porras‡, and Vinod Yegneswaran‡  
†KAIST  
‡SRI International  
{seunghyeon, jinwoo.kim, claude}@kaist.ac.kr, and {porras, vinod}@csl.sri.com

## Abstract
Network-based anomaly detection is a well-researched area, with numerous algorithms developed to detect suspicious and anomalous activities at strategic points in a network. In this paper, we explore the integration of an anomaly detection development framework into existing software-defined network (SDN) infrastructures. This integration aims to support sophisticated anomaly detection services across the entire network data plane, not just at network egress boundaries. We introduce Athena, a new SDN-based software solution that provides a well-structured development interface and general-purpose functions for rapidly synthesizing a wide range of anomaly detection services and network monitoring functions with minimal programming effort. Athena is a fully distributed application hosting architecture, enabling a high degree of scalability. We discuss example use-case scenarios using Athena’s development libraries and evaluate system performance in terms of usability, scalability, and overhead in real-world environments.

## 1. Introduction
Tracking and responding to network traffic anomalies is a significant challenge faced by all network operators. Sudden and massive deviations in the volume and mix of data flowing through the network infrastructure, due to congestion, outages, network probes, and flooding attacks, are so frequent that few networks would fail to benefit from integrated network anomaly detection services. Even benign incidents, such as flash crowds, can threaten the ability of an enterprise to maintain reliable network operations.

Software-Defined Networking (SDN) offers the potential to explore new efficient strategies for instrumenting networks, integrating software detection services, and responding to anomalies. By leveraging the centralized control plane to track new flow requests and extract data plane statistics, one can analyze live network data flows without requiring the insertion of third-party devices. Recent research proposals illustrate the increasing exploration of SDN strategies to integrate network misuse and anomaly detection services.

However, several significant technical challenges remain. Most SDN-based threat monitoring proposals do not consider the issue of network-wide large-scale data extraction and management across a distributed data plane. Prior research has primarily focused on applications designed for specific suspicious or anomalous activity, employing focused subsets of features from SDNs rather than defining a feature framework for building SDN-enabled network anomaly detection services. Additionally, there is limited research on network features and anomaly detection algorithms for activities that cross the control and data plane boundaries.

We present Athena, a scalable framework for constructing network monitoring services in large SDN deployments and providing flexible third-party development of new detection models. Athena exports an API that provides a well-structured development environment for implementing a wide range of network anomaly detection applications across a large, physically distributed SDN control and data plane. The API offers developers an abstraction from complex data extraction services, reducing the programming effort required to implement and deploy new anomaly detection services. Unlike existing work, Athena includes a wide range of network features and detection algorithms, simplifying the design and deployment of general-purpose network data plane anomaly detection applications in large-scale SDN networks. Other than its requirement for OpenFlow support, the framework avoids the need for specialized hardware, minimizing the need to modify an SDN stack when introducing new anomaly detection services.

To address the issue of scalability across large distributed SDN deployments, Athena's network feature collection and data management framework employs a distributed database, a computing cluster, and a distributed controller. It collects and generates network features above the SDN controller instances in a distributed manner, and publishes the network features to a distributed database. To accelerate runtime detection model generation, Athena incorporates a machine learning (ML) library from which anomaly detection algorithms may be implemented and then deployed as jobs across Athena's computing cluster. Athena exports high-level APIs that allow operators to design and deploy anomaly detection applications with minimal programming effort, reducing the total computation time necessary to perform anomaly detection while increasing the scalability of data management services.

The key contributions of our paper include:
- Introduction of Athena as a new anomaly detection application development framework that leverages SDN functionality to explicitly support ML-based network anomaly detection.
- Presentation of a set of SDN-wide features that enable Athena to host a wide range of anomaly detection services, including the detection of anomalies directly within the SDN control and data planes.
- Presentation of eight core APIs, over 70 utility APIs, and 11 popular machine learning algorithms that facilitate the rapid development of new anomaly detection services.
- Presentation of a fully-distributed architecture enabling highly scalable network anomaly detection, evaluated on a large-scale dataset from a datacenter-like physical network environment.
- Demonstration of the generality of our framework by replicating detection algorithms from prior publications of SDN security services and developing a specialized SDN stack anomaly detector capable of detecting a novel anomaly referred to as the Network Application Effectiveness (NAE) problem.

We have released the Athena prototype implementation as an open-source project to support the SDN community and stimulate other academic research efforts.

## 2. Five Considerations in Designing Scalable SDN Anomaly Detection Services
The design and integration of network anomaly detection services in traditional networks have been well studied. We understand how to integrate hardware elements to extract network traffic features at strategic network points, apply a wide range of analytics to these features, and correlate relevant reports to affect a network’s security posture. However, SDNs offer a departure from these strategies by providing new methods for dynamic instantiation of monitoring services with a global view of the network topology that is continuously updated.

The design goals for the Athena anomaly detection framework for SDNs include:
1. Providing an extensive feature extraction infrastructure without hardware device integration.
2. Abstracting data acquisition and simplifying anomaly detection service implementation.
3. Simplifying large-scale deployment of monitoring services without modification to the SDN infrastructure itself.

This section discusses several key choices and considerations toward addressing these goals.

### 2.1 Centralized Management Perspective
We illustrate the two management design paradigms, legacy versus SDN, in Figure 1. While SDN supports centralized network-wide monitoring, developers are burdened with the requirement to implement a centralized controller that monitors and manages the network with a global network view. Each device may export a wide variety of network features (e.g., logs, statistics, and alerts), forcing the developer to perform post-processing to normalize network features using approaches like VAST [13].

### 2.2 Network Feature Quality and Accessibility
The selection and accessibility of legitimate network features for real-time monitoring is essential when designing any network monitoring framework, particularly those intended to facilitate off-the-shelf sharing of anomaly detection algorithms. Athena directly addresses these needs by providing normalized network-feature access and libraries from which a wide range of ML-based detection algorithms may be designed and deployed across large-scale distributed SDNs. Additionally, it provides dynamic threat mitigation APIs that can be launched in response to perceived threats to the SDN. We will leverage example use cases to address well-known anomaly detection problems and demonstrate the utility of the Athena framework by applying it to detect a novel SDN-specific anomaly (Section V).

### 2.3 Monitoring Networks with Highly Dynamic Topologies
Enterprise networks continue to become more complex, more virtual, and dynamic to meet an increasingly diverse set of operational requirements. Traditional security and network devices are often integrated at physically strategic points in the network, and it is the burden of the operator to manage and adjust their integration and configuration as the network topology changes. Since Athena is built into the SDN control layer, applications built over this framework can automatically extend monitoring and anomaly detection capabilities to dynamic network topologies.

### 2.4 Flexible Scale-up and Scale-out of the Anomaly Detection Framework
Large network environments imply increased event volumes, larger sets of distributed switches within the data plane, and complex network operating requirements that increase the complexity of both the control plane and hosted network applications. A key challenge for Athena is to introduce a network monitoring framework that will enable anomaly detection applications to scale in speed, offer distributed computation, and provide data management APIs that enable high-volume event processing. To date, several network monitoring projects have pursued scalability among their design requirements, but most focus on uncontrolled environments and do not provide explicit support for anomaly detection algorithms. In contrast, Athena is designed as a fully-distributed event collection and processing framework with scalable feature collection and management to support anomaly detection.

### 2.5 Coding Efficiency for Anomaly Detection Algorithm Development
While SDN controller APIs enable a wide range of network applications that have been implemented and shared, these APIs are largely insufficient to support network anomaly detection applications. The absence of a generalized network monitor development framework for SDNs contributes to slower progress in the design and deployment of SDN security applications. To overcome this issue, Athena exports high-level APIs that support the extraction of critical features, management of data streams, and detection of anomalous network behaviors.

## 3. Athena Design
Athena is a fully-distributed network anomaly detection framework, where an Athena instance is hosted above each distributed SDN controller, such as with ONOS instances deployed across a wide-area network. For example, Figure 2 illustrates three Athena instances that are distributed across three SDN controllers. Each Athena instance monitors the network behavior associated with its hosted network controllers and the data plane hosted by the controllers.

Conceptually, Athena incorporates the Feature Generator, which collects SDN control messages issued by the local control and data plane, generates network features, and publishes features to a distributed database (a DB cluster) for feature management. The Attack Detector detects potential network problems using the developer-defined detection algorithm. The Attack Reactor is responsible for mitigating detected threats by issuing mitigation actions to the data plane. Operators need not modify their existing SDN stack to host Athena, as its inputs are SDN control messages, along with small code stubs within the controller. We discuss the details of Athena’s architecture in Section III-A.

Above the framework, Athena provides a set of components that compose its user-friendly development environment. Athena exports a high-level API called the Athena NB API, which allows developers to create anomaly detection applications in a manner that is agnostic to the underlying SDN implementation. Athena offers an abstraction to the controller and data plane implementations and versions, enabling rapid prototyping and minimizing deployment costs.

Athena provides 8 core and 70 utility APIs, described in Table II. Developers implement anomaly detection tasks as Athena apps (shown in Figure 2), using the Athena Northbound API (NB API). These applications generate anomaly detection models, perform real-time detection, and implement live threat responses.

### 3.1 Athena System Design
Figure 3 illustrates the three major elements of the Athena framework: the southbound element, the distributed DB and computing clusters, and the northbound element. The southbound element monitors the network behaviors, including the control plane, extracts features from the SDN control messages, implements live detection algorithms, and invokes mitigation reactions. The northbound element exports high-level APIs to enable analysis applications to perform anomaly detection tasks, including network monitoring. The third major element is composed of a distributed database cluster that provides network-wide feature access and a computing cluster for running distributed parallel instances of Athena applications.

#### 3.1.1 The Athena Southbound (SB) Element
The Southbound element’s main purpose is to isolate control messages, extract features to drive the analysis algorithms, and mitigate detected problems. These tasks must be performed across several parallel controller instances and many physically distributed switches. Athena achieves this scale by employing SB instances that operate separately on each controller. Further, it uses distributed third-party applications to provide parallel data processing environments. Each instance is responsible for monitoring its associated controller and those switches that the controller directly manages, then provides detection algorithms and reaction strategies. The Athena SB element consists of four major sub-components:

- **SB Interface**: The main role of the SB Interface is to monitor selected SDN control messages issued by both the data plane and the control plane, and to deliver network management commands issued by the Attack Reactor (e.g., issuing flow rules) through the Athena Proxy. The proxy is a small code snippet instantiated at each controller instance. Athena leverages proxy-stubs that work like general network applications to avoid consistency issues that might arise from issuing control messages to the data plane without involving the controller. When the Athena Proxy issues flow rules to the data plane, the controller automatically updates its internal status according to the issued flow rules.

- **Feature Management Manager**: The Feature Manager provides a unified mechanism that applications use to retrieve and receive network features according to user-defined constraints. It receives feature requests from each application and translates them into queries that are issued to the Athena distributed database. It transfers requested data from the distributed database to the computing cluster managed by the Detector Manager, reducing data transmission overhead while transferring large-scale datasets. It maintains an event delivery table, which maintains a set of application constraints, that is triggered when incoming network features match the constraints. When processing real-time incoming features from the Athena SB, it forwards the features to both the Athena applications and the Detector Manager.

- **Detector Manager**: The Detector Manager provides a wide range of well-known ML algorithms to generate detection models, including a simple threshold-based detection algorithm. It also validates large-scale network features. It works with the Feature Manager to dynamically validate incoming network features and provides unified APIs that allow operators to perform detection tasks with transparency to the details of the algorithms. For example, when running a K-Means algorithm in the clustering category with the Decision Tree algorithm in the classification category, the operator will use the same APIs in Table II. The operator does not have to consider the characteristics of each ML type, as the Detector Manager automatically configures ML parameters according to the requests of ML types by operators (e.g., labeling features).

- **Reaction Manager**: The Reaction Manager provides mitigation strategies that allow the Athena applications and operators to enforce mitigation actions by issuing flow rules to the data plane. The applications enforce predefined courses-of-action to handle network problems, independently from the underlying network controller, by issuing requests to the SB Attack Reactor, which are automatically translated to flow rules.

- **Resource Manager**: The Resource Manager exports functions to manage resources related to feature collection. It dynamically adjusts the number of monitored network entities and generated network features, according to requests from Athena applications. This allows Athena applications to control monitoring fidelity based on dynamic network conditions.