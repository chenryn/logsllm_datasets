title:Athena: A Framework for Scalable Anomaly Detection in Software-Defined
Networks
author:Seunghyeon Lee and
Jinwoo Kim and
Seungwon Shin and
Phillip A. Porras and
Vinod Yegneswaran
Athena: A Framework for Scalable Anomaly
Detection in Software-Deﬁned Networks
Seunghyeon Lee†, Jinwoo Kim†, Seungwon Shin†, Phillip Porras‡, and Vinod Yegneswaran‡
†KAIST
‡SRI International
{seunghyeon, jinwoo.kim, claude}@kaist.ac.kr, and {porras, vinod}@csl.sri.com
Abstract—Network-based anomaly detection is a well-mined
area of research, with many projects that have produced algo-
rithms to detect suspicious and anomalous activities at strategic
points in a network. In this paper, we examine how to integrate an
anomaly detection development framework into existing software-
deﬁned network (SDN) infrastructures to support sophisticated
anomaly detection services across the entire network data plane,
not just at network egress boundaries. We present Athena as a
new SDN-based software solution that exports a well-structured
development interface and provides general purpose functions for
rapidly synthesizing a wide range of anomaly detection services
and network monitoring functions with minimal programming ef-
fort. Athena is a fully distributed application hosting architecture,
enabling a unique degree of scalability from prior SDN security
monitoring and analysis projects. We discuss example use-case
scenarios with Athena’s development
libraries, and evaluate
system performance with respect to usability, scalability, and
overhead in real world environments.
I.
INTRODUCTION
Tracking and responding to network trafﬁc anomalies is
an ubiquitous and signiﬁcant challenge faced by all network
operators [1]. Sudden and massive deviations in the volume
and mix of data ﬂowing through the network infrastructure,
due to congestion, outages, network probes, and ﬂooding
attacks, are so frequent that few networks would fail to beneﬁt
from integrated network anomaly detection services. Even
anomalies that arise from benignly-motivated incidents, such
as ﬂash crowds, may threaten the ability an enterprise to
maintain reliable network operations.
Software-Deﬁned Networking (SDN) offers the potential
to explore new efﬁcient strategies for instrumenting networks,
integrating software detection services, and responding to
anomalies that would otherwise impede network operations.
For example, by leveraging the centralized control plane to
track new ﬂow requests and extracting data plane statistics,
one can analyze live network data ﬂows without requiring the
insertion of third-party devices (e.g., a network monitoring
middlebox). Indeed, a survey of recent research proposals
illustrates the increasing exploration of SDN strategies to
integrate network misuse and anomaly detection services [2],
[3], [4], [5], [6], [7], [8], [9], [10].
However, while these proposals offer a diverse exploration
of SDN-based monitoring strategies, several signiﬁcant tech-
nical challenges remain. First, most SDN-based threat moni-
toring proposals that implement monitoring services as SDN
applications, do not consider the issue of network-wide large-
scale data extraction and management across a distributed data
plane, with many switches and controller instances. Second,
prior research has primarily focused on applications designed
for speciﬁc suspicious or anomalous activity. Prior SDN moni-
toring projects have employed focused subsets of features from
SDNs for tracking speciﬁc phenomena rather than deﬁning a
feature framework for building SDN-enabled network anomaly
detection services. Third, there is limited research on network
features and anomaly detection algorithms for activities that
cross the control and data plane boundaries.
We present a scalable framework, called Athena, for con-
structing network monitoring services in large-SDN deploy-
ments, and providing ﬂexible third-party development of new
detection models. Athena exports an API that provides a well-
structured development environment for implementing a wide
range network anomaly detection applications across a large
physically distributed SDN control and data plane. Athena’s
API offers developers an abstraction from a complex data
extraction service, reducing the programming effort required to
implement and deploy new anomaly detection services. In con-
trast to existing work, Athena includes a wide range of network
features and detection algorithms for use in simplifying the
design and deployment of general-purpose network data plane
anomaly detection applications in large-scale SDN networks.
In fact, other than its requirement for OpenFlow support, the
framework avoids the need for specialized hardware, thereby
dramatically minimizing the need to modify an SDN stack
when introducing new anomaly detection services.
To address the issue of scalability across large distributed
SDN deployments, Athena’s network feature collection and
data management framework employs a distributed database, a
computing cluster, and a distributed controller. It collects and
generates network features above the SDN controller instances
in a distributed manner, and publishes the network features
to a distributed database. To accelerate runtime detection
model generation, Athena incorporates a machine learning
(ML) library from which anomaly detection algorithms may
be implemented and then deployed as jobs across Athena’s
computing cluster. Athena exports high-level APIs that allow
operators to design and deploy anomaly detection applications
with a minimum of programming effort. This approach both re-
duces the total computation time necessary to perform anomaly
detection, while increasing the scalability of data management
services on which these algorithms are run.
The key contributions presented in our paper include the
following:
• Introduction of Athena as a new anomaly detection
application development framework that leverages SDN func-
tionality to explicitly support ML-based network anomaly
detection. Athena integrates without modiﬁcation into existing
SDN infrastructures.
• Presentation of a set of SDN-wide features that enable
Athena to host a wide range of anomaly detection services,
including the detection of anomalies directly within the SDN
control and data planes. Speciﬁcally, we considered eight
major operational functions performed by SDN networks,
and from each function extract relevant feature sets to drive
anomaly detection services.
• Presentation of eight core APIs, over 70 utility APIs, and
11 popular machine learning algorithms that facilitate the rapid
development of new anomaly detection services. Collectively,
these facilitate both batch and live mode anomaly detection,
while shielding Athena developers from the complexities of
distributed feature extraction, data management, and threat
response generation.
• Presentation of a fully-distributed architecture enabling
highly scalable network anomaly detection. We evaluate the
system on a large-scale dataset from a datacenter-like physical
network environment, and assess performance degradation by
evaluating the overhead when it is integrated into one of the
most visible open-source network operating systems (ONOS).
• Demonstration of the generality of our framework by
replicating detection algorithms from prior publications of
SDN security services (that had previously required the in-
tegration of specialized hardware) and development of a spe-
cialized SDN stack anomaly detector capable of detecting a
novel anomaly that we refer to as the Network Application
Effectiveness (NAE) problem.
We have released the Athena prototype implementation as
an open-source project to support the SDN community and
stimulate other academic research efforts1.
II. FIVE CONSIDERATIONS IN DESIGNING SCALABLE
SDN ANOMALY DETECTION SERVICES
The design and integration of network anomaly detection
services in traditional networks have been well studied [12].
We understand how to integrate hardware elements to extract
network trafﬁc features at strategic network points, how to
apply a wide range of analytics to these features, and how to
correlate relevant reports to effect a network’s security posture.
However, SDNs offer a departure from these strategies by pro-
viding new methods for dynamic instantiation of monitoring
services with a global view of the network topology that is
continuously updated.
The design goals for the Athena anomaly detection frame-
work for SDNs include the following: 1) provide for an exten-
sive feature extraction infrastructure without hardware device
integration, 2) abstract data acquisition and simply anomaly
detection service implementation, and 3) simplify large-scale
deployment of monitoring services without modiﬁcation to the
SDN infrastructure itself. This section discusses several key
choices and considerations toward addressing these goals.
1The source code is publicly available at SDNSecurity.org [11].
Fig. 1. An illustration of network anomaly detector (NAD) in a) traditional
networks and b) SDNs.
1) Centralized Management Perspective: We illustrate the
two management design paradigms, legacy versus SDN, in
Figure 1. While SDN‘s support centralized network-wide
monitoring, developers are burdened with the requirement to
implement a centralized controller that monitors and manages
the network with a global network view. Furthermore, each
device may export a wide menagerie of network features
(e.g.,
logs, statistics, and alerts) forcing the developer to
perform post-processing to normalize network features using
approaches like VAST [13].
2) Network Feature Quality and Accessibility: The se-
lection and accessibility of legitimate network features for
real-time monitoring is an essential task when designing any
network monitoring framework, particularly frameworks that
are intended to facilitate off-the-shelf sharing of anomaly
detection algorithms. Athena directly addresses these needs for
feature quality and accessibility, by providing (i) normalized
network-feature access and libraries from which a wide range
of ML-based detection algorithms may be designed and de-
ployed across large-scale distributed SDNs, and (ii) dynamic
threat mitigation APIs that can be launched in response to
perceived threats to the SDN. We will leverage example use
cases to address well-known anomaly detection problems, and
demonstrate the utility of the Athena framework by applying
it to detect a novel SDN-speciﬁc anomaly (Section V).
3) Monitoring Networks with Highly Dynamic Topologies:
Enterprise networks continue to become more complex, more
virtual, and dynamic to meet an increasingly diverse set of
operational requirements. Traditional security and network
devices are often integrated at physically strategic points in
the network, and it is the burden of the operator to manage
and adjust their integration and conﬁguration as the network
topology changes. Since Athena is built into the SDN control
layer, applications built over this framework can automatically
extend monitoring and anomaly detection capabilities to dy-
namic network topologies.
4) Flexible Scale-up and Scale-out of the Anomaly Detec-
tion Framework: Large network environments imply increased
event volumes, larger sets of distributed switches within the
data plane, and complex network operating requirements that
increase the complexity of both the control plane and the
hosted network applications. A key challenge for Athena is
to introduce a network monitoring framework that will enable
anomaly detection applications to scale in speed,
to offer
distributed computation, and to provide data management APIs
2
Firewall ManagerIDSManagerNetwork Manager #1Network Manager #nThird partiesCentralized Monitoring & Management Controller…Network Anomaly Detectora) NAD on traditional networksSDN Controller (Monitoring & Management)SDN Apps…Network Anomaly Detectorb) NAD on SDN networksthat enable high volume event processing. To date, several
network monitoring projects have pursued scalability among
their design requirements, such as [14], [15], [16], [17], [18],
[7], [3], [2], [19], [20], [5]. However, most of these efforts
(with the exception of [17]) focus on uncontrolled environ-
ments and none of them provide explicit support for anomaly
detection algorithms. In contrast, Athena is designed as a
fully-distributed event collection and processing framework
with scalable feature collection and management to support
anomaly detection.
5) Coding Efﬁciency for Anomaly Detection Algorithm
Development: While SDN controller APIs [21], [22], [23],
[24], [14] enable a wide range of network applications that
have been implemented and shared, these APIs are largely
insufﬁcient to support network anomaly detection applications.
This absence of a generalized network monitor development
framework for SDNs contributes to slower progress in the
design and deployment of SDN security applications. To over-
come this issue, Athena exports high-level APIs that support
the extraction of critical features, management of data streams,
and detection of anomalous network behaviors.
III. ATHENA DESIGN
Athena is a fully-distributed network anomaly detection
framework, in which an Athena instance is hosted above each
distributed SDN controller, such as with ONOS instances
deployed across a wide area network. For example, Figure 2
illustrates three Athena instances that are distributed across
three SDN controllers. Each Athena instance monitors the
network behavior that is associated with its hosted network
controllers and the data plane hosted by the controllers.
As shown in Figure 2, conceptually, Athena incorporates
the Feature Generator, which collects SDN control messages
issued by the local control and data plane, generates network
features, and publishes features to a distributed database (a
DB cluster) for feature management. The Attack Detector
detects potential network problems using the developer-deﬁned
detection algorithm. The Attack Reactor has responsibility for
mitigating detected threats by issuing mitigation actions to the
data plane. Operators need not modify their existing SDN stack
to host Athena, as its inputs are SDN control messages, along
with small code stubs within the controller. We discuss the
details of Athena’s architecture in Section III-A.
Above the framework, Athena provides the set of compo-
nents that compose its user-friendly development environment.
Athena exports a high-level API called as the Athena NB
API, which allows developers to create anomaly detection
applications in a manner that is agnostic to the underlying SDN
implementation. Athena offers an abstraction to the controller
and data plane implementations and versions, enabling rapid
prototyping and minimizing deployment costs.
Athena provides 8 core and 70 utility APIs, described in
Table II. Developers implement anomaly detection tasks as
Athena apps (shown in Figure 2), using the Athena Northbound
API (NB API). These applications generate anomaly detection
models, perform real-time detection, and implement live threat
responses.
Athena’s conceptual architecture; An illustration of the Athena
Fig. 2.
anomaly detection framework hosted over a wide-area SDN with distributed
controllers. Each controller hosts an instance of Athena that instantiates the
anomaly detection task per instance. These components can also integrate with
the third-party DB cluster and computing cluster. Athena applications perform
diverse anomaly detection tasks, and operators control the Athena applications
via a graphical user interface.
A. Athena System Design
Figure 3 illustrates the three major elements of the Athena
framework: the southbound element, the distributed DB and
computing clusters, and the northbound element. The south-
bound element monitors the network behaviors including
the control plane, extracts features from the SDN control
messages, implements live detection algorithms, and invokes
mitigation reaction. The northbound element exports high-
level APIs to enable analysis applications to perform anomaly
detection tasks, including network monitoring. The third major
element is composed of a distributed database cluster that pro-
vides network-wide feature access, and a computing cluster for
running distributed parallel instances of Athena applications.
1) The Athena Southbound (SB) Element: The Southbound
element’s main purpose is to isolate control messages, ex-
tract features to drive the analysis algorithms, and mitigate
detected problems. However, these tasks must be performed
across several parallel controller instances and many physically
distributed switches. Athena achieves this scale by employing
SB instances that operate separately on each controller. Further,
it uses distributed 3rd party applications to provide parallel
data processing environments. Each instance is responsible for
monitoring its associated controller and those switches that the
controller directly manages, then provides detection algorithms
and reaction strategies. The Athena SB element consists of four
major sub-components:
1A) SB Interface: The main role of the SB Interface is
to monitor (selected) SDN control messages issued by both
the data plane and the control plane, and to deliver network
management commands issued by the Attack Reactor (e.g.,
issuing ﬂow rules) through the Athena Proxy. The proxy is
a small code snippet instantiated at each controller instance.
Athena leverages proxy-stubs that work like general network
applications to avoid consistency issues that might arise from
issuing control messages to the data plane without involving
the controller. When the Athena Proxy issues ﬂow rules to
the data plane, the controller automatically updates its internal
status according to the issued ﬂow rules.
3
Control InformationSDN ControllerFeature GeneratorAttack DetectorAttack ReactorAthenaNetwork ManagementSDN ControllerFeature Generator Attack DetectorAttack ReactorAthenaDB ClusterComputing ClusterNetwork EventsSDN ControllerFeature GeneratorAttack DetectorAttack ReactorAthenaBig data analysisDetection modelgenerationUniﬁedmonitoringAthena ApplicationReal-time detectionAthena GUI/CLI Interface……ThreatresponseTABLE I.
AN ENUMERATION OF Athena FEATURE TYPES.
Category
Protocol-centric
Combination
Stateful
Description
Features derived from SDN control messages directly.
Combined features derived from Protocol-centric by pre-deﬁned formula.
Stateful features according to the network states.
Examples
Volume (Packet counts, byte counts)
Flow utilization (Packets / Duration)
Pair ﬂow ratio (Pair ﬂows / Total ﬂows)
implementation transparency. We describe below the ﬁve major
sub-components of the NB element.
2A) Feature Management Manager: The Feature Man-
ager provides a uniﬁed mechanism that applications use to
retrieve and receive network features according to user-deﬁned
constraints. It receives feature requests from each applica-
tion and translates them into queries that
issues to the
Athena distributed database. It transfers requested data from
the distributed database to the computing cluster managed by
the Detector Manager, reducing data transmission overhead
while transferring large-scale datasets. It maintains an event
delivery table, which maintains a set of application constraints,
that is triggered when incoming network features match the
constraints. When processing real-time incoming features from
the Athena SB, it forwards the features to both the Athena
applications and the Detector Manager.
it
2B) Detector Manager: The Detector Manager provides a
wide-range of well-known ML algorithms to generate detection
models including a simple threshold-based detection algorithm.
It also validates large-scale network features. It works with the
Feature Manager to dynamically validate incoming network
features and provides uniﬁed APIs that allow operators to
perform detection tasks with transparency to details of the
algorithms. For example, when running a K-Means algorithm
in the clustering category with the Decision Tree algorithm
in the classiﬁcation category, the operator will use the same
APIs in Table II. An operator does not have to consider the
characteristics of each ML type, since the Detector Manager
automatically conﬁgures ML parameters according to requests
of ML types by operators (e.g., labeling features).
2C) Reaction Manager: The Reaction Manager provides
mitigation strategies that allow the Athena applications and
operators to enforce mitigation actions by issuing ﬂow rules
to the data plane. The applications enforce pre-deﬁned course-
of-actions to handle network problems, independently from
the underlying network controller, by issuing requests to the
SB Attack Reactor, which are automatically translated to ﬂow
rules.
2D) Resource Manager: The Resource Manager exports
functions to manage resources related to feature collection. It
dynamically adjusts the number of monitored network entities
and generated network features, according to requests from
Athena applications. This allows Athena applications to control
monitoring ﬁdelity based on dynamic network conditions.