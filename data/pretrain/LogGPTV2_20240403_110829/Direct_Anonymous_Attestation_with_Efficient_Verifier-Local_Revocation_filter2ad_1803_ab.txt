controlled verifier-local revocation of the login credentials. How-
ever, in LASER, the platform needs to obtain ms login credentials
by running the LogCreGen protocol for ms number of times. In
this way, in LASER, most of the burden of the revocation check
procedure at the platform is shifted from the online login signa-
ture generation to the offline acquisition of login credentials. This
unique feature of LASER brings about two practical advantages.
Firstly, during the login signature generation protocol, the TPM
is not burdened with any computations related to the revocation
check procedure, and this results in a significant reduction in the
computational complexity of login signature generation. Secondly,
the length of the login signature generated by the platform and
communicated to the verifier is constant, and does not grow pro-
portionally with the length of the revocation list. These advantages
are especially important when a DAA scheme needs to be deployed
for the ASS with a large number of users.
Among the security properties (discussed in Appendix A), the un-
linkability is an important notion to consider in evaluating LASER
with respect to other DAA schemes. In the existing DAA schemes,
the login signatures generated by the platform satisfy the concept
of absolute unlinkability (i.e., the signatures are unlinkable by the
issuer and the verifier) [3]. Here, linking two signatures means that
they are proved to be generated by the same platform. In LASER,
the platform obtains each of the ms login credentials using zero-
knowledge proofs of knowledge in the LogCreGen protocol, and
hence any two login credentials cannot be linked by the issuer.
This means that two signatures generated using two different login
credentials cannot be linked by the issuer. However, since a login
credential contains the revocation token, all the signatures gener-
ated using one login credential can be linked by the issuer. In fact,
it is this linkability which enables verifier-local revocation. Note
that the verifier cannot link any two signatures which are either
generated using different login credentials or the same login cre-
dential. Hence, in addition to the concept of absolute unlinkability,
our design of LASER leads to the concept of unlinkability called
conditional unlinkability where the generated signatures remain un-
linkable by the verifier, but they may be linkable (when generated
using the same credential) or may not be linkable (when generated
using different login credentials) by the issuer [4]. In this paper, we
present the notion of adaptable unlinkability which implies that the
platform is able to adaptably select one of the two concepts of un-
linkability of its login signatures using the SelectLogCre algorithm
(see Appendix A). Our results exhibit that the notion of adaptable
unlinkability enables LASER to provide the needed privacy in a
flexible and practical manner.
2.2 Details of LASER
We assume that Z∗
p represents the set of integers modulo p. Also,
let there be a pair of multiplicative cyclic groups of prime order p,
(G1, G2), called a bilinear group pair, such that there exists a group
GT and a bilinear mapping function, e : G1 × G2 → GT . We utilize
the Type 3 pairing which means that G1 (cid:44) G2, and there does not
exist any computable isomorphism from G1 to G2 [18]. We also
assume a hash function Hz : {0, 1}∗ → Z∗
p which is considered as
a random oracle. The parameters for (G1, G2, e,Hz) are published.
(gpk, isk) ← Setup(1λ): This setup algorithm is run by the issuer
as follows.
(1) Select д1 ←$ G1 and д2 ←$ G2 such that д1 and д2 are the gen-
erators of G1 and G2, respectively.
(2) Select h1, h2, h3 ←$ G1, and γ ←$ Z∗
p.
γ
(3) Compute ω = д
(4) Output (gpk, isk).
(tsk, hdl, tpk, mcl) ← MemCreGen(gpk, isk, ms): This protocol
is performed among the TPM, the host and the issuer as follows.
(1) Upon the request of the host, the TPM generates tsk = f ,
stores it in its secure memory, and forwards the outputs hdl
and tpk = I = h
(2) The TPM and the host generate a registration-request signa-
ture σm on a nonce nm ←$ {0, 1}λ to present the signature
proof of knowledge (SPK) of tsk along with ms parameters
2 ; and set isk = γ, and gpk = (д1, h1, h2, h3, д2, ω).
f
1 , to the host.
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea569(cid:18)
(cid:19)
д1 · Uj · h
u′′
j
2
1
γ +vj .
Jj =
(cid:110)(f , u
u′
2, · · · , u′
1, u′
σm ← SPK
ms ←$ Z∗
p. The σm is given as
u′
′
′
′
1 · h
ms) : U1 = h
2, · · · , u
1
1, u
2 ,
u′
u′
1 · h
2 , · · · , Ums
1 · h
f
2
ms
= h
2
(3) The host sends (nm, σm) to the issuer.
(4) The issuer verifies the validity of signature σm. If the verification
fails, the issuer aborts; otherwise, the issuer proceeds as follows.
(a) For each j ∈ [1, ms], select u′′
p, and compute
(cid:111) (nm).
j , vj ←$ Z∗
U2 = h
(1)
f
f
1 , v1, · · · , Jms , u′′
(5) The host performs the following.
(b) Send (J1, u′′
(a) For each j ∈ [1, ms], compute uj = u′
ms , vms) to the host.
+ u′′
j , and set a
membership credential memCrej = (Jj , uj , vj). Note that
(Jj , uj , vj) is a BBS+ signature on f (see [1]).
(b) Output mcl = (memCre1, · · · , memCrems).
j
(ctl′, logCrej) ← LogCreGen(gpk, isk, ctl, tsk, hdl, tpk,
memCrej): This protocol is performed among the TPM, the host
and the issuer. Here, we assume that the credential token list is
p ,∀i ∈ [1, mtms]},
represented as ctl = {(Ki , yi) : Ki ∈ G1, yi ∈ Z∗
where mt represents the number of platforms in the network. This
protocol proceeds as follows.
(1) The host and the TPM generate a login credential-request sig-
nature σд on a nonce nд ←$ {0, 1}λ to present the SPK of tsk
(by using parameters Bд and Cд), uj, a parameter xj ←$ Z∗
p, and
a BBS+ signature (Jj , uj , vj) on f . The σд is given as
σд ← SPK {(f , uj , vj , xj) : Cд = B
f
д , Kj = д
1 · h
2 ) = e(д1 · h
uj
f
(2) The host sends (nд, σд) to the issuer.
(3) The issuer verifies: (1) whether the signature is honestly gener-
ated, and (2) whether the membership credential has not been
utilized previously to acquire a login credential. If both the
verification steps (as shown below) are successful, the issuer
proceeds; otherwise it aborts.
(a) Verify the validity of σд.
(b) For the entries corresponding to Ki in the list ctl, verify
that Kj (cid:60) ctl by utilizing a conventional search algorithm.
2 , д2)}(nд).
e(Jj , ω · д
vj
uj
1 , Lj = h
1 · h
xj
2 ,
(2)
f
(4) The issuer proceeds as follows.
p; and compute Aj =
1
(a) Select yj , zj ←$ Z∗
γ +zj .
(b) Append an entry of the tuple (Kj , yj) to the list ctl, and
output the updated list ctl′.
(c) Send (Aj , yj , zj) to the host.
Note that (Aj , yj , zj) is a BBS+ signature on (f , xj).
(5) The host outputs the login credential, logCrej = (Aj , xj , yj , zj).
д1 · Lj · h
yj
3
(logCrej, cul′) ← SelectLogCre(lcl, cul, csr): This login cre-
dential selection algorithm is performed by the host. To keep track
of the utilized credentials from lcl, each entry in the cul takes one
of the three values, i.e., culj ∈ {unUsed, absUsed, conUsed}, cor-
responding to the cases where logCrej has never been utilized, has
already been utilized to generate an absolutely unlinkable signature,
(cid:16)
(cid:17)
or has already been utilized to generate one or more conditionally
unlinkable signatures, respectively. It proceeds as follows.
(1) If csr = absUnlink, select j ∈ [1, ms] such that culj = unUsed,
and set culj = absUsed; otherwise, if csr = conUnlink, select
j ∈ [1, ms] such that culj = unUsed or culj = conUsed, and
set culj = conUsed.
(2) Select the login credential logCrej from lcl.
(3) Output logCrej, and the updated list cul′.
σs ← Sign(gpk, tsk, hdl, tpk, logCrej, M): This login signature
generation protocol is performed between the TPM and the host.
This protocol outputs a login signature σs which presents the SPK
of tsk (by using parameters Bs and Cs), a valid revocation token yj
(by using parameters Ds and Es), and a BBS+ signature (Aj , yj , zj)
on (f , xj). The σs is given as
σs ← SPK {(f , xj , yj , zj) : Cs = B
2 ) = e(д1 · h
e(Aj , ω · д
zj
yj
f
s , Es = D
s ,
1 · h
2 · h
3 , д2)}(M).
yj
f
xj
(3)
valid/invalid ← Verify(gpk, σs , M, tRL): This verification algo-
rithm checks the validity of the signature, and the revocation status
of the login credential. If the following verification steps are success-
ful, this algorithm outputs the value valid; otherwise it outputs the
value invalid. Here, we assume that the token-based revocation
p ,∀i ∈ [1, mr]}, where
list tRL is represented as tRL = {yi : yi ∈ Z∗
mr is the number of revoked login credentials.
(1) Verify the validity of the signature σs.
(2) For each yi ∈ tRL, compute Ei = D
yi
s , and verify that Ei (cid:44) Es.
tRL′ ← Revoke(gpk, ctl, σs , M, tRL): This signature-based revo-
cation algorithm is run by the issuer as follows.
(1) Verify that σs is an honestly generated signature, i.e.,
valid ← Verify(gpk, σs , M, tRL). If the verification fails, abort.
yi
(2) For each yi in the list ctl, compute Ei = D
s , and find the index
(3) Append yi to tRL, and output the updated tRL′. This revokes
i such that Ei = Es, where Ds and Es are obtained from σs.
the login credential utilized to generate the signature σs.
true/false ← Identify(gpk, σs , M, tsk∗): This algorithm verifies
if σs is generated using tsk∗ = f∗. This algorithm outputs the
value true if both the following verification steps are successful;
otherwise this algorithm outputs the value false.
(1) Verify that valid ← Verify(gpk, σs , M, ∅). Here, ∅ represents
an empty set.
(2) Compute C∗ = B
f∗
s , and verify that Cs = C∗.
3 ANALYTICAL EVALUATION
In this section, we analytically evaluate the computational complex-
ity and communication overhead of LASER, and compare LASER’s
performance with the ECC-based DAA scheme proposed by Ca-
menisch, Drijvers and Lehmann (CDL-EPID) [11]. We consider only
the computationally expensive operations—i.e., exponentiation in
G1 and bilinear mapping. We represent the number of exponentia-
tions in G1 and bilinear mappings by EG1 and BM , respectively. Let
the number of elements in G1 and Z∗
p communicated between the
entities be represented by LG1 and LZp, respectively.
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea570Table 1: Comparison of the number of the offline and online
computational operations in the DAA schemes.
offline
online
TPM
Host
Issuer
TPM
Host
Verifier
CDL-EPID
EG1