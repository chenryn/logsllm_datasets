title:DeDoS: Defusing DoS with Dispersion Oriented Software
author:Henri Maxime Demoulin and
Tavish Vaidya and
Isaac Pedisich and
Bob DiMaiolo and
Jingyu Qian and
Chirag Shah and
Yuankai Zhang and
Ang Chen and
Andreas Haeberlen and
Boon Thau Loo and
Linh Thi Xuan Phan and
Micah Sherr and
Clay Shields and
Wenchao Zhou
DeDoS: Defusing DoS with Dispersion Oriented Software
Henri Maxime Demoulin∗
Tavish Vaidya∗
University of Pennsylvania
Georgetown University
Isaac Pedisich
Bob DiMaiolo
Jingyu Qian
Georgetown University
Ang Chen
Rice University
Chirag Shah
University of Pennsylvania
Andreas Haeberlen
Boon Thau Loo
Linh Thi Xuan Phan
University of Pennsylvania
University of Pennsylvania
Yuankai Zhang
Georgetown University
Micah Sherr
Clay Shields
Wenchao Zhou
Georgetown University
ABSTRACT
This paper presents DeDoS, a novel platform for mitigating asym-
metric DoS attacks. These attacks are particularly challenging since
even attackers with limited resources can exhaust the resources
of well-provisioned servers. DeDoS offers a framework to deploy
code in a highly modular fashion. If part of the application stack
is experiencing a DoS attack, DeDoS can massively replicate only
the affected component, potentially across many machines. This
allows scaling of the impacted resource separately from the rest
of the application stack, so that resources can be precisely added
where needed to combat the attack. Our evaluation results show
that DeDoS incurs reasonable overheads in normal operations, and
that it significantly outperforms standard replication techniques
when defending against a range of asymmetric attacks.
CCS CONCEPTS
• Security and privacy → Denial-of-service attacks;
KEYWORDS
Denial-of-Service; Distributed Systems;
ACM Reference Format:
Henri Maxime Demoulin, Tavish Vaidya, Isaac Pedisich, Bob DiMaiolo,
Jingyu Qian, Chirag Shah, Yuankai Zhang, Ang Chen, Andreas Haeberlen,
Boon Thau Loo, Linh Thi Xuan Phan, Micah Sherr, Clay Shields, and Wen-
chao Zhou. 2018. DeDoS: Defusing DoS with Dispersion Oriented Software.
In 2018 Annual Computer Security Applications Conference (ACSAC ’18), De-
cember 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3274694.3274727
∗First Co-authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274727
1 INTRODUCTION
Denial-of-service (DoS) attacks have evolved from simple flood-
ing to pernicious asymmetric attacks that intensify the attacker’s
strength by exploiting asymmetries in protocols [33, 35, 36]. Unlike
traditional flooding attacks, adversaries that perform asymmetric
DoS are typically small in scale compared to the target victims.
These attacks are increasingly problematic; the SANS Institute de-
scribed “targeted, application-specific attacks” [33] as the most
damaging form of DoS attack, with an average of four attacks per
year, per survey respondent. Such attacks typically involve clients
launching attacks that consume the computational resources or
memory on servers. Types of asymmetric DoS vary, and are often
targeted at a specific protocol.
An invariant of these attacks is that they exploit a fixed resource.
For example, the SlowLoris/SlowPOST attacks function by establish-
ing HTTP connections with the victim webserver, sending requests
at a very slow rate to inflate their lifetime, consuming connection re-
sources (e.g., file descriptors) at the target [37]. Similarly, the ReDoS
attack uses specially crafted regular expressions that are slow to
parse, amplifying the cost of serving malicious clients’ requests [3].
Likewise, TLS Renegotiation attacks exploit an asymmetry in the
SSL/TLS protocol: the server’s cost of engaging in a handshake is
about ten times that of a client [1].
While traditional volumetric attacks can be defended against by
blocking transmissions on compromised machines [21], filtering
traffic at routers [30], or detecting bogus requests at end hosts [23,
28], such approaches are ineffective against asymmetric DoS. Since
asymmetric attacks tend to be relatively low-volume and often do
not appear different from legitimate traffic, they can easily circum-
vent these defenses over time.
A straightforward defense mechanism against asymmetric at-
tacks is simply to deploy more resources. This is often the de facto
defense deployed in production systems: during an attack, the ser-
vice is automatically replicated as virtual machines (VMs) or light-
weight containers, on multiple machines to scale “elastically” to
the extra load. Replicating all of the VM’s or container’s resources,
regardless of which are being consumed, is enormously costly, mak-
ing this approach unusable for most service providers. For example,
if only a TCP state table is being exhausted (e.g., due to a SYN flood),
the replication of an entire VM mitigates the attack, but does so at
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
H.M. Demoulin, T. Vaidya et al.
an enormous overhead (since the TCP state table is a minuscule
portion of the system’s overall footprint).
In light of the limitations of existing defenses, we present a
radically different approach called DeDoS that defuses DoS attacks
via fine-granularity replication. We advocate software development
in a modular fashion, such that components can be moved and
replicated independently.
declarative domain-specific language [29] that we compile into a
DeDoS dataflow. Our evaluation results show that the overhead of
DeDoS is comparable to equivalent code executed outside of DeDoS’
runtime. Moreover, DeDoS is able to defend against a wide range of
asymmetric attacks, maintaining significantly higher throughput
for a much longer amount of time in the presence of changing
attacks, comparable to traditional replication strategies.
DeDoS is not intended to be a cure against all possible DoS
attacks. If an attacker can saturate a system’s network links or com-
pletely consume the defender’s resources, then the attack will still
succeed. The goal of DeDoS is to better manage available resources
to mitigate the attack. When it cannot completely defend against
an attack, it aims to delay the attack’s effects for as long as possible
– ideally to the point where a human operator can put in place a
longer term fix. DeDoS is also not a replacement or competitor of
specialized defenses, such as hardware SSL accelerators [14]. These
hardware-based approaches are more efficient than DeDoS because
they are tailored to a particular attack vector, but are less generic in
dealing with future unknown attacks (or combinations of attacks).
2 MOTIVATING EXAMPLE
We consider a 2-tiered web service hosted in a data center, where
an HTTP server queries a database server in response to users’
requests. The attacker launches a TLS renegotiation attack [1] that
consumes CPU cycles on the HTTP server. Hence, legitimate re-
quests are being served very slowly, or not at all. In this typical
asymmetric attack, the attacker is unable to overwhelm the de-
fender’s network bandwidth, but succeeds by exhausting other
resources (here, CPU cycles).
Our goal is to automatically mitigate such an attack, even if it
has a new attack vector, and to maintain quality of service (QoS) to
the legitimate clients. DeDoS is not specifically designed to defend
against brute-force volumetric attacks that saturate a data center’s
ingress link, or exploits that take over data center machines.
2.1 Strawman solutions
One possible defense against DoS attacks is to filter or block suspi-
cious network traffic – either based on source addresses, specific
traffic content or other traffic characteristics. However, this relies
heavily on request classification, thus is susceptible to false posi-
tives and negatives. Moreover, it is difficult to differentiate between
legitimate spikes in traffic and actual attacks.
Another approach is to increase resource capacity via replication.
For instance, to handle a TLS renegotiation attack, an operator can
launch more web server VMs to sustain more connections. This
defense does not depend on accurate attack detection, but it can
be inefficient. In the TLS renegotiation example, even though the
attack is limited to the key generation logic (and thus stressing CPU
usage on the host), naïve replication replicates the entire web server,
unnecessarily wasting non-affected resources such as memory.
2.2 DeDoS solution
We observe that overall, data centers machines are under utilized [11],
but current software architectures cannot effectively use them. In
our example, the database servers’ CPUs will be mostly idle while
DeDoS provides a framework which allows programmers to con-
struct more resilient applications through the use of fine-grained,
modular components. Ideally, each component handles some small,
focused aspect of an application that may be vulnerable to resource
exhaustion. Example components include code for performing TLS
handshakes or HTTP requests parsing. Crucially, with DeDoS, pro-
grammers do not have to worry about most of the deployment
specifics: DeDoS offers an adaptive controller that makes real-time
decisions on placing these components within physical resources
(e.g., machines in a datacenter), and then adaptively clones, merges,
or migrates them in order to meet service-level agreement (SLA)
objectives. When SLA objectives are violated, this is treated as a
potential attack, and individual components that are overloaded
are replicated.
The DeDoS architecture offers two benefits for defending against
asymmetric attacks. First, the fine-grained components make it eas-
ier for the defender to deploy all available resources on all machines
against the attacker, exactly as needed. For instance, DeDoS can
respond to a TLS renegotiation attack by temporarily enlisting
other machines with only spare CPU cycles to help with TLS hand-
shakes. Second, the replication approach is not attack-specific and
can thus potentially mitigate unknown asymmetric attacks. Once
DeDoS recognizes that a component is overloaded or its through-
put appears to drop, it can respond by replicating that particular
component – without having seen the attack before, and without
knowing the specific vulnerability that the attacker is targeting.
This potentially allows a flexible and automatic response against
even mixed attacks [25].
Specifically, we make the following contributions:
Architecture and design. We present the DeDoS architecture,
outlining design challenges and our approach to create software
as a dataflow of minimum splittable units (MSUs). We describe the
API, communications, and synchronization components of DeDoS.
Our focus is on supporting new applications written in DeDoS’
API: as services become increasingly modularized, they can ei-
ther adopt the DeDoS API, or offload some critical functionality to
DeDoS to mitigate asymmetric DoS attacks. For the sake of complet-
ing our argument, we also demonstrate how existing applications
written in traditional or domain specific languages [26, 29] can be
entirely ported to DeDoS.
Dynamic adaptation. We present strategies for assigning MSUs to
physical machines, scheduling MSU executions assigned to threads,
and using a global controller to make decisions on cloning and
removing MSUs in the event of attacks.
Prototype implementation, case studies, and evaluation. As
motivating use cases, we deploy three applications using our pro-
totype implementation of DeDoS. These include a web server that
we develop from scratch using DeDoS’ dataflow API, and two ex-
isting software systems: a user-level transport library written in C
that we port over to DeDoS, and routing software written using a
DeDoS: Defusing DoS with Dispersion Oriented Software
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
the web servers’ CPUs are overwhelmed. If the former’s CPUs were
able to alleviate the load on the latter’s by contributing their com-
putational power, the capacity at the bottleneck (TLS handshake)
would increase.
Achieving this requires designing application stacks as smaller
functional pieces that can be replicated and migrated independently.
This additional flexibility would enable an attacked service to use all
of the available datacenter resources for its defense by temporarily
enlisting other machines running different services, resulting in a
substantial increase in the service’s capacity and achieving better
QoS for legitimate clients.
For example, in TLS renegotiation, instead of replicating the
entire web server, we can instead replicate only the key genera-
tion logic. If the database servers have spare CPU cycles, they will
be able to accommodate execution of this logic and alleviate the
CPU bottleneck caused by the attack. In contrast, naïve replication
would not work when the database servers lack the entire set of
resource required to run additional HTTP servers. In other forms
of asymmetric attacks that exhaust other types of resources (e.g.
memory), one can adopt the same approach, in this case, replicating
the memory intensive component into other machines that have
spare memory.
3 DEDOS DESIGN
A DeDoS application consists of several components called mini-
mum splittable units (MSUs) (Figure 1). Each MSU is responsible for
some particular functionality. For instance, a web server might con-
tain an HTTP MSU, a TLS MSU, a page cache MSU, etc. (Figure 1a).
Related MSUs communicate with each other. For instance, HTTPS
requests may enter the system at a network MSU, be decrypted
by the TLS MSU, and parsed by the HTTP MSU. Collectively, the
MSUs form a dataflow graph that contains a vertex for each MSU
and an edge for each communication channel (Figure 1b).
Each DeDoS deployment contains a central controller which
provides an API for programmers to deploy their application. The
controller can either receive a pre-computed allocation, or perform
an initial allocation plan to decide how many instances of each
MSU should exist, and which machines they should run on, based
on the requested performance requirements and available resources
(Figure 1c).
Additionally, the controller continuously collects runtime statis-
tics about available resources and the performance of each MSU. If