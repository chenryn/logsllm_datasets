adversary obtains two valid quorums for conﬂicting contract
states, in Bitcontracts we require that the contract’s state used
as input in a contract call is always the latest on-chain state of
the called contract. Such enforcement is possible if the validity
of a transaction can be conditioned on the current state of the
blockchain, a property that we call (3) state dependent trans-
action validity. Such a referencing mechanism is available in
many existing cryptocurrencies, for example, in UTXO-based
cryptocurrencies, transactions reference UTXOs that must be
outputs of previous transactions which have not yet been
used as inputs in a transaction. Since transaction validity, and
therefore state dependent transaction validity, is checked by
miners, this mechanism can be leveraged to prevent attacks or
benign race conditions, where a contract call is executed based
on an old state, even if the blockchain experiences short-lived
forks and at the same time allows usage of arbitrary quorum
sizes.
This idea of binding off-chain execution results to on-
chain state validity checks that are performed by the min-
ers of the underlying legacy blockchain is a key feature of
Bitcontracts. It enables Bitcontracts to guarantee execution
integrity for contracts that are executed off-chain without it
having to implement a separate consensus protocol of its own
(see Section VII). The same idea also allows Bitcontracts to
be compatible with an execute-order architecture, in which,
similar to Hyperledger Fabric [5], contract calls are ﬁrst
executed and then ordered. In contrast to Fabric which uses an
execute-order-validate approach (cf. Section II-B) this notion,
however, removes the separate validation step. Recall that in
Fabric, this validation step is needed, because the blockchain
consensus mechanism only performs ordering of transactions
without performing any checks and thus all peers need to check
for conﬂicts in the read-/writesets of the contracts to ensure
serializability. In Bitcontracts, such conﬂicts are prevented
during the mining process (ordering step), since miners check
for state-dependent transaction validity, which ensures that all
values read during the contract execution correspond to the
values from the previous state.
Finally, Bitcontracts enables contracts where a single
transaction performs multiple separate money transfers. This is
possible, when the underlying blockchain supports (4) atomic
multitransactions, i.e., transactions that atomically execute
payments from multiple sources to multiple recipients.
D. Cryptocurrency Properties
Above we introduced informally properties 1-4 that the un-
derlying cryptocurrency must provide to support Bitcontracts.
These properties are necessary to support our execution and
trust model, securely and efﬁciently, on unmodiﬁed legacy
blockchains. We do not claim that these properties are nec-
essary or sufﬁcient for every contract execution system. For
example, if a different trust model with a single executing
node is chosen, fewer properties may be sufﬁcient.
Next, we specify these four properties more precisely in the
format of interfaces. This allows us to keep our system design
in Section IV agnostic of the underlying blockchain platform.
Note that these interfaces are deﬁned on transactions and they
can be used without direct access to the blockchain itself, if
the relevant transactions are supplied to the service providers
by the client. In Section V, we analyze how these properties
are supported in existing, widely-used cryptocurrencies.
(1) Multiparty authorization. To allow a distributed set of
service providers to perform state transitions for a contract,
6
the cryptocurrency must support a form of multiparty au-
thorization, i.e. a mechanism that allows a set of n entities
to collectively authorize a transaction with signatures from a
threshold number t of them. An example of such authorization
is multi-signature outputs in systems like Bitcoin. This ensures
that changes to the smart contract state are only committed
to the chain, if enough service providers authorized the state
transition. The threshold is set per account, i.e. if funds are
being transferred from multiple sources, each of them may
have their own threshold that needs to be met.
We abstract authorization for a transaction Tx as an in-
terface σ = sign(Tx, sk), where sk is a secret key of the
authorizing entity and a transaction Tx is valid if the threshold
condition is met for every source of transferred funds. To
verify authorization on a transaction for an account, miners
and other nodes use a predicate verify(Tx, Σ, P K, t) where
Σ = f (σ1, . . . , σt) is some function3 on a list of signatures,
P K = (pk1, . . . , pkn) is the list of public keys and t is the
threshold value associated with the account.
(2) Arbitrary data storage. The cryptocurrency must allow
storing auxiliary (non-ﬁnancial) information in a transaction
in order to support stateful contracts with stateless service
providers. Storing the contract state on chain ensures that all
contract participants receive the latest state and are able to
continue interacting with the smart contract. An example for
this property is the ability to store data in Bitcoin scripts.
For a transaction Tx we abstract appending some data d to
this storage as an interface Tx.append_data(d) and reading as
d = Tx.read_data(loc, len), where loc speciﬁes the location
and len speciﬁes the length of the data to read.
(3) State dependent transaction validity. As the service
providers should remain stateless, the transaction validity rules
of the cryptocurrency must allow the validity of a transaction
to be conditioned on a state references in the transaction.
That is, the transaction should reference a previous transaction
to be valid if and only if that previous transaction has been
included in the chain and resulted in the currently valid state.
In Bitcoin and similar currencies, this is trivially supported
through the UTXO model, since a transaction is only valid if
all inputs are outputs of a previous transaction (i.e. included in
the chain) and have not been spent (i.e. represent the current
state). In Section V we discuss how this property is provided in
account-based systems. In addition to enabling stateless service
providers, this property prevents time-of-check to time-of-use
(TOCTOU) problems, because every new state can directly
reference the previous one and base its validity on it (see
Section VII for details).
For a transaction Tx, we abstract this condition as an
interface Tx.require_previous(id) where id is a unique
identiﬁer for a state or previous transaction and where Tx
will only be accepted as valid if id refers to the most recent
associated state or transaction.
necessitates that atomic transactions with multiple origins and
multiple destinations must be possible, i.e. the smart contract
should be able to receive and send funds in a single contract
call. In UTXO-based cryptocurrencies this can simply be
done by creating a transaction that uses UTXOs from differ-
ent parties as inputs and creating multiple outputs. In other
cryptocurrencies, one atomic transaction may require creating
multiple transactions for which atomicity is guaranteed through
other mechanisms (see Section V). Note that rolling back a
transaction due to permissionless consensus mechanisms such
as proof-of-work does not violate transaction atomicity, since
the transaction is either rolled-back in full, or not at all.
Therefore, all UTXO-based cryptocurrencies, as well as many
others, support this property independent of their consensus
mechanism.
For a transaction Tx, we abstract this property as an inter-
face Tx.add_transfer(src, dest, val) that adds a transfer of
funds with value val from src to dest to the transaction. If a
transaction contains multiple transfers, this interface is called
multiple times. All fund transfers are then executed atomically.
IV. BITCONTRACTS SPECIFICATION
In this section, we describe the Bitcontracts system in
detail. We start with our system model, and then explain the
contract deployment and execution.
A. System Model
There are three types of entities in Bitcontracts, as shown
in Figure 1:
Existing Blockchain System. Bitcontracts extends existing
blockchain systems with smart contracts. Existing entities such
as blockchain clients and miners (or stakers in Proof-of-Stake
systems), as well as the P2P infrastructure are agnostic to
Bitcontracts and thus do not need to be modiﬁed.
Bitcontracts Clients are participants and creators of smart
contracts. They connect to the blockchain’s P2P network and to
service providers for contracts in which they are participating.
Bitcontracts clients can create smart contracts by creating a
transaction that sets an initial state and initial funds for the
contract and speciﬁes the responsible service providers and
broadcasting this transaction to the blockchains P2P network.
Service Providers. A set of service providers called provider
set (P) that can execute smart contracts. Service providers
are stateless and do not necessarily need to connect to the
blockchain. Service providers get requests from clients to
execute a contract based on a given state, execute this contract
and send the result back to the client. Each provider creates a
keypair for receiving and sending transactions on initialization
and publishes the public key. This can be done in several ways;
a provider can publish it on the blockchain, he can make it
accessible on some publicly available website, or he can send
it to clients directly.
(4) Atomic transactions. A smart contract should be able
to receive and send funds within a smart contract call. This
B. Contract Deployment
3This can for example be the identity function, which would be the case in
Bitcoin multisignatures. However, this could also be some form of signature
aggregation such as BLS [10] signatures.
Smart contracts in our system consist of a piece of code
written in an arbitrary language, some funds and a contract
state stored on the blockchain as a key-value store, which
7
Blockchain
P1
P2
P3
State
State, Txprev, Contract, Inputs
Tx, σ P 1
Tx, σ P 2
Tx, σ P 3
Tx, Σ, σ C
1
2
3
4
5
Fig. 2. Contract call. To call a smart contract, the client ﬁrst assembles the
state from the blockchain and then sends the state, the previous transaction,
and his inputs to the service providers. The service providers then execute the
contract call and send the resulting transaction as well as their signatures to
the client, who ﬁnalizes the transaction and broadcasts it.
allows for easy retrieval of the state during contract execution.
The smart contract account can be viewed as an account
managed by a quorum of service providers that can collectively
authorize transactions.
In order to deploy a smart contract, the client chooses an
executing subset E ⊆ P of an arbitrary size n and a t-out-of-
n trust model that describes which number t of the providers
out of the set E have to attest to the correctness of smart
contract execution. Note that this set is collectively trusted
for contract execution results and thus the chosen service
providers are typically known (and not anonymous) entities.
The set of service providers responsible for the execution of
the contract is part of the contract speciﬁcation and is thus
speciﬁc to a contract and not to a transaction. The client then
creates a transaction Tx whose recipient is a new account
that is managed by E collectively, i.e. a subset of E of size
t can authorize transactions from this account. For example,
in UTXO based currencies, this would correspond to a t-out-
of-n multisig output. In addition to any initial funds going to
the contract account, this transaction contains a hash of the
contract code, a hash of its initial state, and the initial state
itself in its auxiliary storage. This is added to the transaction
by the client before broadcasting using the append_data
interface. The client then broadcasts the transaction and makes
the code available to any other party that should be able to
interact with the smart contract. If the contract should be
publicly available, he could even publish the contract code
in the contract creating transaction as well. Alternatively, he
can publish it on some publicly available website.
C. Contract Execution
To execute a smart contract, a client has to contact at
least t of the n providers in the contract’s executing set E to
execute the smart contract. If one of the contacted providers
does not respond, he needs to contact an additional one. A
sequence diagram for the contract call and execution is shown
in Figure 2.
time; clients can continuously update their local state, or they
can even rely on a service that provides them with the most
recent state (which they can check using the state hash stored
in the most recent transaction), similar to current lightweight
blockchain clients.
2 To each of the contacted providers, the client then sends
the current state, the previous contract transaction Txprev,
the smart contract code, any inputs for the smart contract
execution, and any information required to send funds from
the client to the smart contract (e.g. UTXOs from the client).
Service providers can also store the code, but
the design
described here allows service providers to be fully stateless.
3 Each provider Pk then proceeds as follows:
(i) The provider computes the hash of the contract code,
retrieves the hash of the contract code from Txprev using
the read_data interface and compares the two values. If
the values match, he continues, otherwise he aborts.
(ii) The provider does the same for the state, i.e. he retrieves
the state hash from Txprev, compares it to the computed
hash of the state received from the client, and aborts if
the values do not match.
(iii) Given the state, parameters, and additional inputs, the
provider executes the smart contract. This contract execu-
tion can change the state of the contract and can initiate
transfer of funds to other addresses.
(iv) The service provider creates a raw transaction Tx and
makes it dependent on the previous transaction using
Tx.require_previous(Txprev.id).
(v) The provider hashes the new state and appends the hash
of the contract code as well as the state hash to the
transaction using the append_data interface.
(vi) The provider computes the list of state changes from the
previous state to the new state, serializes this list and ap-
pends it to the transaction storage using the append_data
interface.
(vii) If the smart contract receives funds from the client or
the execution causes funds to be transferred to another
address,
the service provider uses the add_transfer
interface to add the transfers to the transaction Tx.
(viii) Finally, the service provider Pk creates a signature on the
transaction as σPk = sign(Tx), and sends the transaction
and signature back to the client.
4 The client receives the transactions Tx as well as
a signature σPk from each provider Pk. Since the contract
execution is deterministic, each of the providers creates the
same transaction and provides a signature over it. The client
then assembles the multiparty signature Σ from all received
signatures σP1, . . . , σPt. If the client is sending funds to the
contract (or is providing funds to pay for fees), he also provides
his own signature σC on Tx.
5 Finally, the client broadcasts the signed transaction
(Tx, Σ, σC) and it can be included in the blockchain.
D. Contract Dependencies
1 The client ﬁrst fetches the current state of the contract
from the blockchain by going through the contract’s past
transactions and assembling the state from all state changes
stored in them. This does not need to be repeated in full every
For contracts calling other smart contracts, we need to
ensure that (i) the whole call (including subcalls) is executed
atomically, and (ii) that execution integrity is guaranteed given
the chosen trust model of each contract. This requires that
8
REQUIRED PROPERTIES SUPPORTED BY POPULAR
TABLE I.
CRYPTOCURRENCIES. (˝ = PROVIDED PROPERTY, + = PARTIALLY
PROVIDED PROPERTY, Ø = NOT PROVIDED PROPERTY).
Model
System
Storage of
Auxiliary data
Multiparty
Authorization
State dependent
Tx validity
Atomic
Transactions
UTXO
Account
Bitcoin
Litecoin
Zcash
Dash
Cardano
Monero
Ethereum
Ripple
Stellar
EOS
˝
˝
˝
˝
˝
˝
˝
˝