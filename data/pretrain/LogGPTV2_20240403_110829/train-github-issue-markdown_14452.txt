### System info
  * Playwright Version: v1.33.0
  * Operating System: macOS 13.3.1
  * Browser: Chromium
  * Other info:
### Source code
  * I provided exact source code that allows reproducing the issue locally.
**Config file**
    // playwright.config.ts
    const config = defineConfig({
      testDir: './e2e',
      /* Maximum time one test can run for - 30s */
      timeout: 30000,
      expect: {
        /**
         * Maximum time expect() should wait for the condition to be met.
         * For example in `await expect(locator).toHaveText();`
         */
        timeout: 10000,
      },
      /* Run tests in files in parallel */
      fullyParallel: true,
      /* Fail the build on CI if you accidentally left test.only in the source code. */
      forbidOnly: IS_CI,
      /* Retry on CI only */
      retries: IS_CI ? 2 : 0,
      /* Opt out of parallel tests on CI. */
      workers: IS_CI ? 1 : undefined,
      /* Reporter to use. See https://playwright.dev/docs/test-reporters */
      reporter: 'html',
      /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
      use: {
        /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */
        actionTimeout: 0,
        /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
        trace: 'on-first-retry',
        screenshot: 'only-on-failure',
      },
      globalTeardown: './e2e/setup/global-teardown.js',
      globalSetup: './e2e/setup/global-setup.js',
      /* Configure projects for major browsers */
      projects,
      /* Run your local dev server before starting the tests */
      // webServer: {
      //   command: 'npm run start',
      //   url: 'http://127.0.0.1:3000',
      //   reuseExistingServer: !process.env.CI,
      // },
    });
    // global-setup.js
    async function globalSetup() {
      console.log('SETUP....');
    }
    export default globalSetup;
    // global-teardown.js
    async function globalTeardown() {
      console.log('TEARDOWN....');
    }
    export default globalTeardown;
**Steps**
  * [Run any test]
  * Observe that the globalSetup will log `SETUP...`
  * Observe that the globalTearDown will never run
**Expected**  
globalTearDown should run after the test finishes
**Actual**  
globalTearDown never runs after the test finishes
Screenshot:
![Screenshot 2023-05-03 at 15 54 33](https://user-
images.githubusercontent.com/5679671/236019461-e599e417-1882-4176-9d1e-97cc08699d83.png)
[Describe actual behavior]
I expect globalTeardown to run once all tests finish, but this is not
happening.
Any help on what I could be doing wrong would be much appreciated, but since
globalSetup is running I believe it could be a bug.