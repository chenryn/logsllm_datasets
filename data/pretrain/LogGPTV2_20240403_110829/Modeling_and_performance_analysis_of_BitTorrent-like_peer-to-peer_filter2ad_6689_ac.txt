0 ≤ nu, the lemma is true. Now, we assume that the lemma
is true for peer i and prove that it is also true for peer i + 1
and hence by induction, it is true for all i.
i ≤ nu and
If the lemma is true for i, we will have ni
k2 ≤ ni
ni
i = nu,
then peer i already has nu uploads and it will not select any
peer from {k|k > i}. Hence, for any k > i, ni
k = ni+1
and
i  ni
k1 ≥ ni+1
ni+1
k1 ≥ ni+1
ni+1
k2, after peer i makes the selection, we always have
k2 . If ni
k2, according to rule 2, we also have
k2 . Hence the lemma is true for i + 1.
i+1 ≤ nu. To show the second part of the lemma, if
k1 = ni
k
Now let Di be the set of peers that select peer i. We
exclude peers that randomly select i by using rule 3 here for
two reasons. First, each peer i has about equal chance to
be selected and hence on average, the eﬀect of the random
selection can be equivalently seen as each peer getting a
constant download rate dr. Secondly, if the number of peers
is large, dr will be very small and can be ignored. The
aggregate downloading rate of peer i then is
X
k∈Di
µk.
di =
1
nu
Note that if two peers have the same uploading bandwidth,
they may get diﬀerent downloading rates. Generally, if µi =
µi+1 = · ·· = µj are peers with the same uploading band-
width, we will have di ≥ di+1 ≥ ··· ≥ dj. So, for a given
peer i, the downloading rate not only depends on the up-
loading bandwidth µi, but also depends on how the peer is
ordered with regards to other peers with the same upload-
ing bandwidth. To eliminate the ambiguity, when there are
two or more peers with the same uploading bandwidth µ,
we deﬁne the downloading rate of these peers to be
jX
d(µ) =
1
j − i + 1
dk,
k=i
(15)
where i (resp. j) is the ﬁrst (resp. last) peer with uploading
bandwidth µ. Moreover, we have the following lemma when
nu ≥ 2.
Lemma 2. Suppose that peers i, i+1,··· , j have the same
uploading bandwidth µ, where i (resp. j) is the ﬁrst (resp.
last) peer with uploading bandwidth µ. If j + i− 1 > nu ≥ 2,
then for any k > j, we have
1. di ≥ di+1 ≥ ··· ≥ dj ≥ dk,
2. di > dk,
3. d(µ) > dk.
Proof: First, from the peer selection rules, it is easy to
see that for any two peers k1  dj+1. When peer i selects peers, if ni
i = nu
(i.e., peer i has already been selected by nu peers that have
uploading bandwidth greater than µ), then di > µ. If ni
i  dk.
From the condition 2 and the deﬁnition of d(µ) (15), it is
easy to see that d(µ) > dk and we are done.
Now, we have deﬁned the peer selection rules. We will
next study how these rules aﬀect the peer’s choice of µi, the
uploading bandwidth.
4.2 Peer Strategy
The objective of the incentive mechanism is to encourage
users to contribute. In BitTorrent, the uploading bandwidth
can be chosen by each user up to a maximum of the physical
uploading bandwidth. The purpose of the rest of this section
is to study how the incentive mechanism will aﬀect the peer
strategy, i.e, how the users set their bandwidth. Let pi be
the physical uploading bandwidth of peer i and let {µ−i} be
the set of uploading bandwidth chosen by the peers except
µi. Let di(µi, µ−i) be the aggregate downloading rate of peer
i when the uploading bandwidth of peer i is µi. When {µ−i}
is given, it is obvious that di is a non-decreasing function of
µi. So when µi = pi, peer i gets the maximum downloading
rate. But setting µi = pi is not necessarily the best strategy
for peer i. For each peer i, di is the gain and µi is the cost.
A peer wants to maximize the gain, but at the same time,
it also wants to minimize the cost. Here, we assume that
maximizing the gain has priority over minimizing the cost.
Intuitively, we may want peer i to choose µi such that
µi = min{˜µi|di(˜µi, µ−i) = di(pi, µ−i)}.
(16)
But unfortunately, the minimum of the set {˜µi|di(˜µi, µ−i) =
di(pi, µ−i)} may not exist (e.g., for the set (4, 6]). If we take
this into account, the best strategy for peer i will be
µi = min {inf{˜µi|di(˜µi, µ−i) = di(pi, µ−i)} + ε, pi} ,
(17)
where ε > 0 is a small number. The parameter ε can be
interpreted as the small diﬀerence between two rates that
a peer can diﬀerentiate. Note that even if the minimum of
{µi|di(µi, µ−i) = di(pi, µ−i)} exists, it is still better to add
a small number ε. Because if the uploading bandwidth of
two peers are very close, we may not be able to detect the
diﬀerence between them. Hence, adding a small positive
number can help diﬀerentiate peer i from other competing
peers.
Given the peer selection algorithm (game rules), we can
now study the system as a non-cooperative game. A Nash
equilibrium for our problem is a set of uploading rates {¯µi}
such that
¯µi = min {inf{˜µi|di(˜µi, ¯µ−i) = di(pi, ¯µ−i)} + ε, pi} .
Let’s consider a small BitTorrent network with 6 peers.
The number of uploads nu = 4 for all peers. We will show
that if the peers have diﬀerent physical uploading bandwidth
and the minimum uploading bandwidth min{pi} > 2ε, there
is no Nash equilibrium point for the system. In this simple
example, we can see that if the uploading bandwidth µi of
peer i is less than those of all other peers, then peer i will
get zero downloading rate because the other ﬁve peers will
upload to each other and not to peer i. On the other hand,
once µi is greater than the uploading bandwidth of at least
one peer, peer i will get the same downloading rate even
if µi  ¯µ6. Otherwise, if they are
equal, since the two peers have diﬀerent physical uploading
bandwidth, there is at least one peer with µi  ¯µ6, we know that peer 6 gets
a zero downloading rate. Since {¯µi} is a Nash equilibrium,
given {¯µ−6}, the maximum downloading rate that peer 6
can get is also zero. Hence, from (17), we have ¯µ6 = ε.
Now, if ¯µ6 = ε, from ( 17), we have ¯µ5 = 2ε  ¯µ5, which contradicts the fact that ¯µ5 is the
ﬁfth highest uploading bandwidth. Hence, there is no Nash
equilibrium point for the system. While there may be no
Nash equilibrium point for a general network setting, when
the network consists of groups of peers where members of
each group have the same uploading and downloading band-
widths, there does exist a Nash equilibrium point as we will
show in the next subsection.
4.3 Nash Equilibrium Point
We consider a network with a ﬁnite number of groups of
peers. In group j, all peers have the same physical uploading
bandwidth pj. Note that this is in fact a good model for
the current Internet users, who have only a ﬁnite number
of network access methods (dial-up, dsl, cable modem, etc).
Let gj be the set of peers in group j and ||gj|| be the number
of peers in group j. Without loss of generality, we also
assume p1 > p2 > ··· .
Proposition 1. If nu ≥ 2 and the number of peers in
a group ||gj|| > nu + 1 for all groups, there exists a Nash
equilibrium point for the system, in which ¯µi = pj if peer
i ∈ gj. Moreover, with any initial setting of {µ0
i}, the system
converges to the Nash equilibrium point {¯µi}.
Proof: We ﬁrst prove that {¯µi} is a Nash equilibrium
point. To prove this, we only need to prove that for any peer
i, if µi  nu + 1, if
we set µi  nu +1, after
the m + 1 round, we will have vm+1 ≥ vm + ε. The increase
in vm will continue until vm = p1 and the peers cannot
increase their uploading bandwidth anymore. In this case,
any peer i ∈ g1 will have the uploading bandwidth µi = p1.
Once peers in the ﬁrst group reach their maximum limit,
they will not change their uploading bandwidth anymore.
We can now use a similar argument to prove that peers in
the second group will also reach the Nash equilibrium point.
Continuing in a similar fashion, we can establish that the
whole system converges to the Nash equilibrium point.
5. OPTIMISTIC UNCHOKING
In Section 4, we assume that each peer knows the up-
loading bandwidths of all other peers. In reality, each peer
only has the rate information about peers from which it is
downloading. Hence optimistic unchoking is used to explore
the network and obtain information about other peers. In
this section, we brieﬂy study the eﬀect of optimistic un-
choking on free-riders. Speciﬁcally, while in Section 4.3, we
showed that rational users would set their uploading rate to
be equal to the maximum possible limit, here we will show
that the maximum downloading rate that an irrational user
nu+1 of the normal
who chooses to free-ride is limited to
downloading rate that they can get if they behave rationally.
5.1 Free-Riding
1
Free-riding means that a peer does not contribute any-
thing to the system, while it attempts to obtain service (or
downloading) from other peers. If peers have global informa-
tion, the free-riding problem can be solved by not uploading
to peers with zero uploading bandwidth. In reality, peers use
optimistic unchoking to explore the network and this gives
an opportunity to free-ride. To illustrate it, let’s consider a
simple example.
We consider a network with a group of peers (g1) that have
the same uploading bandwidth µ. The number of peers in
the group is N . We assume that each peer has nu uploads
and one optimistic unchoking upload. Now, a new peer j
with zero uploading bandwidth joins the network. Each peer
i ∈ g1 will randomly choose a peer that it is not currently
uploading to as the target of its optimistic unchoking. So,
N−nu of the time, it will optimistically
for peer i, on average,
upload to peer j. Since there is a total of N peers in g1, the
total average downloading rate of peer j will be
1
N
1
N − nu
µ
nu + 1
≈ µ
nu + 1
,
when N is large.
In this example, we see that because of optimistic unchok-
ing, peer j contribute nothing to the system, but it still get
an average downloading rate of
In current BitTor-
rent, nu = 4 and thus a free-rider gets 20% of the possible
maximum downloading rate. It would seem that nu can be
increased to reduce the amount that a free-rider can get.
However, choosing nu to be large means that multiple TCP
connections have to share the same bandwidth and thus may
nu+1 .
µ
lead to more time-outs and result in poor performance. The
choice of an optimal nu or other methods to alleviate the
free-riding problem is a subject for further study.
6. EXPERIMENTAL RESULTS
We performed a series of experiments to validate the ﬂuid
model described in Section 3. In the ﬁrst two experiments,
we compare a simulated BitTorrent-like network and the
ﬂuid model. In the last experiment, we actually introduced
a seed into the BitTorrent network, studied the evolution of
the seeds/downloaders, and compared it to our ﬂuid model
results. Due to copyright reasons, we obviously could not
introduce a very popular ﬁle into the network. However,
as we will show in our experimental results, even for a ﬁle
which had a total of less than 100 completed downloads,
the match between the ﬂuid model and the observed data is
quite close.
6.1 Experiment 1
800
700
600
500
400
300
200
100
s
d
e
e
s
f
o
r
e
b
m
u
n
d
e
z
i
l
a
m
r
o
N
0
0
1000
 λ=0.04
 λ=0.4
 λ=4
 λ=40
 simple fluid model
2000
3000
4000
5000
 time (min)
Figure 1: Experiment 1 : The evolution of the num-
ber of seeds as a function of time
500
450
400
350
300
250
200
150
100
50
s
r
e
d
a
o
n
w
o
d
l
f
o
r
e
b
m
u
n
d
e
z
i
l
a
m
r
o
N
0
0
1000
 λ=0.04
 λ=0.4
 λ=4
 λ=40
 simple fluid model
2000
3000
4000
5000
 time (min)
Figure 2: Experiment 1 : The evolution of the num-
ber of downloaders as a function of time
In Figs 1 and 2, we compare the simple deterministic ﬂuid
model that we derived with the results from a discrete-event
y(t)
λ and
simulation of a BitTorrent-like network.
In the discrete-
event simulation, we use the Markov model described in
Section 3.4. We chose the following parameters for this sim-
ulation: µ = 0.00125, c = 0.002, θ = γ = 0.001. When the
number of downloaders is 1, we set η = 0, otherwise, we set
η = 1. This is in keeping with our observation regarding
the eﬃciency of the download as described in Section 3.2.
Initially, there is one seed and no downloader. We also keep
the number of seeds no less than one during the entire sim-
ulation. We change the arrival rate λ from 0.04 to 40 and
plot number of seeds/downloaders normalized by the arrival
x(t)
λ , from both simulations and the ﬂuid
rate, i.e.,
model. In this experiment, since γ < µ, we know that down-
loading bandwidth is the bottleneck. From the ﬁgures, we
see that the simple ﬂuid model is a good approximation of
the system when λ is large, but the match is quite good
even for small λ. The ﬁgures also indicate that the number
of downloaders increases linearly with the arrival rate λ. By
Little’s law, this implies that the average download time is
constant, independent of the peer arrival rate, which shows