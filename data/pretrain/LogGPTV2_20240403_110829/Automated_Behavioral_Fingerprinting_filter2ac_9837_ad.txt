### Method with the Standardized Weighted Character Position Metric

The Support Vector Clustering (SVC) method, when instantiated with the IMAP protocol, does not significantly improve clustering accuracy. In the best case, only 36% of the messages are correctly classified. Therefore, a second step using the nearest neighbors technique is necessary, which allows for a classification accuracy of 49%. This is slightly better than the 47% accuracy achieved by the nearest neighbors technique alone, as shown in Figure 11. Although the improvement is minimal, the number of different message types identified increases from 62% to 96% with SVC. Thus, even if the combined method does not significantly enhance the overall classification rate, it maintains stability and discovers more message types. Figure 10 illustrates the accuracy of SVC for SMTP traffic.

Since the nearest neighbors technique can identify most of the message types, SVC can also find them. Additionally, the classification rate is notably improved: 72% of messages are correctly identified, and 80% of the message types are discovered. By applying the nearest neighbors technique to the obtained clusters, the results are very close, with only one additional type being identified with one packet. Consequently, the number of discovered types is 90%. The standard deviation of the classification rate per type is relatively high (0.39), primarily due to one type being completely ignored in both cases.

### 5.7 Semi-Automated Parameter Identification

Evaluating the classification results for a known protocol is straightforward, but it is much more challenging for unknown protocols, as no reference exists. Our study concludes that the standardized weighted character position metric is the most suitable. For the SVC technique, there are two parameters: C and q. In our experiments, the value of C has a limited impact, as highlighted in Figure 10. This value is constrained by the SVC technique itself.

The evolution of the metrics c(qi) and w(qi) are defined as follows:

\[
\text{evol\_c}(q_i) = 
\begin{cases} 
\frac{\max(\#c(q_i))}{|w(q_i) - w(q_i-1)|} & \text{if } i > 1 \\
0 & \text{else}
\end{cases}
\]

\[
\text{evol\_w}(q_i) = 
\begin{cases} 
\frac{|w(q_i) - w(q_i-1)|}{\max(w(q_i))} & \text{if } i > 1 \\
0 & \text{else}
\end{cases}
\]

These metrics are plotted in Figure 12 for the IMAP protocol. Several peaks in evol_w(q) exist, but the last one at q = 8.5 can be disregarded because the number of clusters decreases simultaneously. The second peak at q = 5.5 is interesting, as it represents the value selected manually, and the number of clusters increases. This semi-automated technique can find a good parameter. The first peak at q = 2, while not as high, affects both metrics. Testing this value slightly improves the classification rate to 50%. For other protocols, this approach identifies the same optimal parameters found through manual testing. Identifying optimal parameters for the nearest neighbors technique can be based on known methods, such as those described in [35].

In conclusion, combining the weighted normalized position metric and the SVC technique often improves the recognition of message types. Adding a second phase with the nearest neighbors technique consistently enhances the results.

### 6 Behavioral Fingerprinting

To describe our approach, we use the example illustrated in Figure 13. First, messages exchanged between two parties are captured. Second, each message is mapped to its corresponding message type using the clustering mechanism described previously. Once each message is assigned to a cluster, a session of captured messages can be represented as a sequence of clusters. A session consists of messages exchanged between two entities without a long period of inactivity. TCP-based protocol sessions are easily distinguishable.

The original sequence of messages can be mapped to a sequence of clusters:

\[
\{m_1(A \rightarrow B), m_2(B \rightarrow A), m_3(A \rightarrow B), m_4(A \rightarrow B)\} \equiv \{c(m_1)(A \rightarrow B), c(m_2)(B \rightarrow A), c(m_3)(A \rightarrow B), c(m_4)(A \rightarrow B)\} \equiv \{c_1(A \rightarrow B), c_2(B \rightarrow A), c_2(A \rightarrow B), c_3(A \rightarrow B)\} \equiv \{!c_1, ?c_2, !c_2, !c_3\}_{A \rightarrow B}
\]

We use the notation `?x` for a received message x and `!x` to indicate that a message of type x is emitted by a device.

A second capture might consist of the sequence of messages (Figure 13):

\[
\{m_5(A \rightarrow B), m_6(B \rightarrow A), m_7(A \rightarrow B), m_8(B \rightarrow A)\} \equiv \{c(m_5)(A \rightarrow B), c(m_6)(B \rightarrow A), c(m_7)(A \rightarrow B), c(m_8)(B \rightarrow A)\} \equiv \{c_1(A \rightarrow B), c_4(B \rightarrow A), c_5(A \rightarrow B), c_4(B \rightarrow A)\} \equiv \{!c_1, ?c_4, !c_5, ?c_4\}_{A \rightarrow B}
\]

Similarly, the final capture consists of the sequence:

\[
\{!c_1, ?c_4, ?c_5, !c_6\}_{A \rightarrow B}
\]

A tree-based representation can summarize these sequences. A simple algorithm incrementally adds a sequence to the tree by checking the longest prefix of the chain that is also a path in the tree. Starting from the last node in this path, the remaining suffix is added as a chain to the tree.

For each device, we construct a device-specific tree (see Figure 14). Each node in the tree corresponds to a message type, and an edge links two nodes if the corresponding message types have been observed to succeed in the traces. Although known to be NP-complete, existing heuristics for constructing these trees are based on building tree representations for the underlying finite state machine. In our approach, we do not prune the tree, and although the final tree representation depends on the order of construction, the resulting subtrees are good discriminative features. We follow a supervised training method where protocol trees are labeled with the identity of their class, assumed to be known. For instance, Figure 14(a) shows that based on traces, a node can start by sending an INVITE message (`!c1`) and receiving either a 180 (`?c2`) or a 407 (`?c4`) typed message. In SIP, a 180 typed message indicates that the call is in progress, while 400 messages are related to authentication requests.

The core idea behind behavioral fingerprinting is to identify subtrees in the underlying tree representations that can uniquely differentiate between two observed behaviors. We developed a classification method based on tree kernels to account for the peculiar nature of the input space. Tree kernels for support vector machines, introduced in [39], [40], and [41], allow the use of substructures of the original sets as features. These substructures are natural candidates for evaluating similarity and differentiation among tree-like structures. We considered two kernel types: the subtree (ST) kernel and the subset tree (SST) kernel, as introduced in [42], [43], and [41]. A subtree (ST) of a node is the complete subtree rooted in that node, while a subset tree (SST) is a cut in the tree, excluding the original leaves. Figure 14 highlights examples of similar SSTs and STs for two trees.

In the context of behavioral fingerprinting, a device-specific protocol tree can be mapped to a set of ST and SST features by extracting all underlying SSTs and STs. Two protocol trees generated by different devices (Figure 14) can be compared by decomposing each tree into its SSTs and STs, followed by a pairwise comparison of the resulted SSTs and STs using tree kernels, as proposed in [41]. The idea behind tree kernels is to count the number of similar SSTs in both feature sets and/or check the exact matching of underlying STs.

For our purposes, similar substructures correspond to similar behavior in terms of exchanged messages and represent a good measure of how much two devices are similar in their behavior. We collected traces from a real VoIP testbed using more than 40 different SIP phones and SIP proxies. In the learning phase, we trained the support vector machines using a modified version of svm-light-TK [44] developed by Alessandro Moschitti. Our dataset consisted of complete SIP traces obtained during a one-day capture from a major VoIP provider. The capture file (8 GB) contained only the signaling SIP-related data. Using the user-agent banner, we identified 40 different end devices. We also observed traffic from user-agents that were not identifiable, likely due to topology hiding performed by home routers or session border controllers. For each device/user-agent, we constructed the underlying tree representations using a maximum of 300 SIP dialogs. Devices that generated more than 300 dialogs were tagged with more than one tree representation. We performed multi-class classification using the one-versus-all method described in [41], achieving a classification precision of 80%, which is a promising result. This result was obtained using a 5-fold validation technique, where one-fifth of the data was used to assess the accuracy/precision of the system, and the remaining four-fifths were used for training. Table 1 summarizes a subset of the SIP devices used for training/testing.

### 7 Conclusion and Future Work

In this paper, we addressed the automated fingerprinting of unknown protocols. Our approach is based on unsupervised learning of the message types used by actual protocol implementations, using Support Vector Clustering (SVC). Our technique employs a new metric, the weighted character position metric, which is computed rapidly and does not require any prior knowledge about the protocols. One main advantage of the SVC technique is its improvement in classification accuracy for large datasets. We also proposed a semi-automated method for choosing the best parameters. The observed message types can be used to induce a tree-like representation of the underlying state machines, where nodes represent different message types and edges indicate invocation relationships. This first phase is complemented by a second stage, where behavioral differences are extracted and mined using tree kernel support vector machines. The main novelty of this approach lies in the direct usage and mining of the induced state machines. We tested our approach on extensive datasets for several well-known protocols, including SIP, SMTP, and IMAP, and observed very good and promising empirical accuracy. We plan to extend this work towards other machine learning tasks and conceptual solutions. Additionally, finding specific metrics for encrypted and binary protocols is another direction for future work.

### Acknowledgments

We would like to thank Yann Guermeur, researcher at CNRS, for his support and feedback on the SVC-specific implementation. This work was partially supported by the French National Research Agency under the VAMPIRE project ref#ANR-08-VERS-017.

### References

1. Tridgell, A.: How samba was written, http://samba.org/ftp/tridge/misc/french_cafe.txt (accessed on 03/16/09)
2. Lin, Z., Jiang, X., Xu, D., Zhang, X.: Automatic protocol format reverse engineering through connect-aware monitored execution. In: 15th Symposium on Network and Distributed System Security, NDSS (2008)
3. Cui, W., Paxson, V., Weaver, N., Katz, R.H.: Protocol-independent adaptive replay of application dialog. In: Symposium on Network and Distributed System Security, NDSS (2006)
4. Leita, C., Mermoud, K., Dacier, M.: Scriptgen: an automated script generation tool for honeyd. In: Computer Security Applications Conference, Annual, pp. 203–214 (2005)
5. Arkin, O.: ICMP usage in scanning: The complete know-how, version 3 (June 2001) (accessed on 03/16/09)
6. tcpdump, http://www.tcpdump.org/ (accessed on 02/05/09)
7. Beddoe, M.: Protocol informatics, http://www.4tphi.net (accessed on 02/05/09)
8. Cui, W., Peinado, M., Chen, K., Wang, H.J., Irun-Briz, L.: TUPNI: automatic reverse engineering of input formats. In: CCS 2008: Proceedings of the 15th ACM conference on Computer and communications security, pp. 391–402. ACM, New York (2008)
9. Caballero, J., Yin, H., Liang, Z., Song, D.: Polyglot: automatic extraction of protocol message format using dynamic binary analysis. In: CCS 2007: Proceedings of the 14th ACM conference on Computer and communications security, pp. 317–329. ACM, New York (2007)
10. Gopalratnam, K., Basu, S., Dunagan, J., Wang, H.J.: Automatically extracting fields from unknown network protocols (June 2006)
11. Weidong: Discoverer: Automatic protocol reverse engineering from network traces, pp. 199–212
12. Wondracek, G., Comparetti, P.M., Kruegel, C., Kirda, E.: Automatic network protocol analysis. In: Proceedings of the 15th Annual Network and Distributed System Security Symposium, NDSS 2008 (2008)
13. Shevertalov, M., Mancoridis, S.: A reverse engineering tool for extracting protocols of networked applications, October 2007, pp. 229–238 (2007)
14. Newsome, J., Brumley, D., Franklin, J., Song, D.: Replayer: automatic protocol replay by binary analysis. In: CCS 2006: Proceedings of the 13th ACM conference on Computer and communications security, pp. 311–321. ACM, New York (2006)
15. Comer, D., Lin, J.C.: Probing TCP Implementations. In: USENIX Summer, pp. 245–255 (1994)
16. p0f, http://lcamtuf.coredump.cx/p0f.shtml
17. Nmap, http://www.insecure.org/nmap/
18. Caballero, J., Venkataraman, S., Poosankam, P., Kang, M.G., Song, D., Blum, A.: FiG: Automatic Fingerprint Generation. In: The 14th Annual Network & Distributed System Security Conference (NDSS 2007) (February 2007)
19. Scholz, H.: SIP Stack Fingerprinting and Stack Difference Attacks. Black Hat Briefings (2006)
20. Yan, H., Sripanidkulchai, K., Zhang, H., yin Shae, Z., Saha, D.: Incorporating Active Fingerprinting into SPIT Prevention Systems. In: Third Annual VoIP Security Workshop (June 2006)
21. Ma, J., Levchenko, K., Kreibich, C., Savage, S., Voelker, G.M.: Unexpected means of protocol inference. In: Almeida, J.M., Almeida, V.A.F., Barford, P. (eds.) Internet Measurement Conference, pp. 313–326. ACM, New York (2006)
22. Hafer, P., Sen, S., Spatscheck, O., Wang, D.: ACAS: automated construction of application signatures. In: Proceedings of the 2005 ACM SIGCOMM workshop on Mining network data (Minet), pp. 197–202. ACM, New York (2005)
23. Abdelnur, H.J., State, R., Festor, O.: Advanced Network Fingerprinting. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 372–389. Springer, Heidelberg (2008)
24. Crocker, D., Overell, P.: Augmented BNF for Syntax Specifications: ABNF. RFC 2234 (Proposed Standard) (1997)
25. Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., Handley, M., Schooler, E.: SIP: Session Initiation Protocol. RFC 3261 (Proposed Standard), Updated by RFCs 3265, 3853, 4320, 4916, 5393 (2002)
26. Schulzrinne, H., Casner, S., Frederick, R., Jacobson, V.: RTP: A Transport Protocol for Real-Time Applications. RFC 3550 (Standard), Updated by RFC 5506 (2003)
27. Kruegel, C., Toth, T., Kirda, E.: Service-specific anomaly detection for network intrusion detection. In: SAC 2002: Proceedings of the 2002 ACM symposium on Applied computing, pp. 201–208. ACM, New York (2002)
28. Ben-Hur, A., Horn, D., Siegelmann, H.T., Vapnik, V.: Support vector clustering. Journal of Machine Learning Research 2, 125–137 (2001)
29. Day, W.H., Edelsbrunner, H.: Efficient algorithms for agglomerative hierarchical clustering methods. Journal of Classification 1(1), 7–24 (1984)
30. Cortes, C., Vapnik, V.: Support-vector networks. Machine Learning 20(3), 273–297 (1995)
31. Wang, L. (ed.): Support Vector Machines: Theory and Applications. Studies in Fuzziness and Soft Computing, vol. 177. Springer, Heidelberg (2005)
32. Berkhin, P.: A survey of clustering data mining techniques. In: Grouping Multidimensional Data, pp. 25–71 (2006)
33. Klensin, J.: Simple Mail Transfer Protocol. RFC 2821 (Proposed Standard), Obsoleted by RFC 5321, updated by RFC 5336 (April 2001)
34. Crispin, M.: Internet Message Access Protocol - Version 4rev1. RFC 3501 (Proposed Standard), Updated by RFCs 4466, 4469, 4551, 5032, 5182 (March 2003)
35. Salvador, S., Chan, P.: Determining the number of clusters/segments in hierarchical clustering/segmentation algorithms. In: ICTAI 2004: Proceedings of the 16th IEEE International Conference on Tools with Artificial Intelligence, Washington, DC, USA, pp. 576–584. IEEE Computer Society, Los Alamitos (2004)
36. Rivest, R.L., Schapire, R.E.: Inference of finite automata using homing sequences. In: STOC 1989: Proceedings of the twenty-first annual ACM symposium on Theory of computing, pp. 411–420. ACM, New York (1989)
37. Angluin, D.: Learning regular sets from queries and counterexamples. Inf. Comput. 75(2), 87–106 (1987)
38. Schapire, R.E.: Diversity-based inference of finite automata. Technical report, Cambridge, MA, USA (1988)
39. Collins, M., Duffy, N.: New ranking algorithms for parsing and tagging: kernels over discrete structures, and the voted perceptron. In: ACL 2002: Proceedings of the 40th Annual Meeting on Association for Computational Linguistics, Morristown, NJ, USA, pp. 263–270 (2002)
40. Vishwanathan, S., Smola, A.: Fast kernels on strings and trees. In: Proceedings of Neural Information Processing Systems (2002)
41. Moschitti, A.: Making tree kernels practical for natural language learning. In: Proceedings of the Eleventh International Conference on European Association for Computational Linguistics (2006)
42. Moschitti, A.: Efficient convolution kernels for dependency and constituent syntactic trees. In: Fürnkranz, J., Scheffer, T., Spiliopoulou, M. (eds.) ECML 2006. LNCS (LNAI), vol. 4212, pp. 318–329. Springer, Heidelberg (2006)
43. Moschitti, A., Pighin, D., Basili, R.: Tree kernel engineering for proposition reranking. In: Proceedings of Mining and Learning with Graphs, MLG 2006 (2006)
44. Moschitti, A.: M-light-tk 1.2 (feature vector set and tree forest) (2009)