= {DIR RMDIR, DIR WRITE, DIR SEARCH}), the directory re-
moval is actually performed by ext2 rmdir, which is transitively
called by sys rmdir. Formally, KernelSummary(sys rmdir)
= KernelSummary(ext2 rmdir), and ext2 rmdir is the deep-
est function in the call-graph reachable from sys rmdir with this
property. Thus, our analysis infers that ext2 rmdir is a controlled
kernel function. Similarly, because ext2 unlink is the deepest
function in the call graph with KernelSummary(ext2 unlink) =
KernelSummary(sys unlink), it is a controlled kernel function.
3.4 Hook Placement
Hook placement using the authorization graph is straightforward.
At each location in the kernel where a controlled kernel function is
called, TAHOE places the hooks determined by the authorization
graph. Currently, TAHOE does not optimize hook placement (as
was shown in Section 3). In the future, we plan to extend our im-
plementation to optimize hook placement.
4.
IMPLEMENTATION & EXPERIENCE
TAHOE is implemented as a plugin to the CIL toolkit [18], and
consists of about 3000 lines of Objective Caml [14] code. In this
section, we discuss the precision of TAHOE’s analysis, its perfor-
mance, and our experience with TAHOE.
4.1 Precision of Hook Placement
Methodology: To evaluate the effectiveness of TAHOE’s hook
placement, we used it with the Linux-2.4.21 kernel, and the hooks
from LSM-SELinux, which has 149 hooks placed at 248 locations
in the kernel. This version of the kernel is available both with hooks
placed for LSM-SELinux and without, thus allowing us to objec-
tively evaluate the results of TAHOE.
We have currently written idioms for conceptual operations rep-
resenting ﬁle and socket operations (numbering about 100 idioms),
and we evaluated the precision of TAHOE in placing these hooks.
For each hook, we manually compare its placement in LSM-SELinux
to the placement suggested by TAHOE. Because the hook place-
ment of LSM-SELinux has been extensively veriﬁed, we believe
that it is bug-free, and hence provides a good benchmark to com-
pare the effectiveness of TAHOE. We report two metrics, false neg-
atives and false positives, as discussed below.
False negatives: A hook placed in LSM-SELinux, but not placed
by TAHOE classiﬁes as a false negative. Because a false negative
in the output of TAHOE corresponds to a missing hook, it results in
insufﬁcient authorization, thus leading to a potential security hole.
TAHOE currently analyzes a subset of ﬁle hooks (26 hooks) from
the LSM-SELinux kernel module (Section 4.3 has details on the
hooks currently not analyzed) which authorize a variety of con-
ceptual operations on ﬁles and inodes. LSM-SELinux places these
hooks at 40 different locations in the kernel. When we used TAHOE
for obtaining hook placement, the output was missing 5 hooks,
which fell into 3 categories, as discussed below:
1. The hook selinux file receive, placed in a kernel function
scm detach fds in LSM-SELinux, was missing from the out-
put of TAHOE. We found that the reason was because kernel
analysis was missing an idiom each for conceptual operations
FILE READ, FILE WRITE and FILE APPEND. This false neg-
ative is eliminated by adding idioms for these operations.
2. The hook selinux file set fowner, placed in 3 kernel func-
tions, was missing from the output. We found that this hook
was not analyzed properly by TAHOE. In particular, this hook
updates a data structure internal to LSM-SELinux, and does not
contain any access vectors. As a result, the analysis described in
Section 3.1 determined that this hook does not analyze any oper-
ations, leading to the false negatives. These false negatives are
Category
File hooks(26)
Socket hooks(12)
Num. Locs.
False Pos.
False Neg.
40
12
13
4
4
0
Figure 8: Comparison of TAHOE’s output with LSM-SELinux.
False positives count locations where TAHOE places an extra
hook, while false negatives count locations with missing hooks.
easily eliminated by considering the update to the data struc-
ture as a new conceptual operation, and adding corresponding
idioms for kernel analysis.
3. The hook selinux inode revalidate, placed in a kernel func-
tion do revalidate, was missing from the output. However,
upon closer investigation we found that this was not a false neg-
ative. In particular, in LSM-SELinux, the authorization query
posed by this hook always succeeds. As a result, TAHOE infers
that no operations are authorized by this hook. This example
shows that semantic information contained in hooks is valuable
in determining hook placement.
TAHOE currently analyzes 12 socket hooks, which are placed at
12 locations in the kernel in LSM-SELinux. It identiﬁed all these
hook placements without any false negatives.
False positives: The output of TAHOE may contain hooks which
are not placed in LSM-SELinux. This may arise because of one
of two reasons: (i) Imprecision in the analysis, for instance, be-
cause the kernel analysis infers that a kernel function performs
more controlled operations than it actually does, or (ii) Unopti-
mized hook placement, for instance, as discussed in Section 3,
where selinux inode permission was placed redundantly. We
only classify hooks in category (i) as false positives, because they
result in extra authorizations being performed. While false posi-
tives do not lead to security holes, they may result in entities with
requisite permissions being denied authorization. Thus, it is desir-
able to have a low false positive rate.
We found that TAHOE had false positives at 13 out of the 40
locations in LSM-SELinux where ﬁle hooks are placed, and at at
4 out of the 12 locations where socket hooks are placed in LSM-
SELinux. In each case, one extra hook was placed in addition to
the required hook. We observed that this imprecision was because
of imprecision in the idioms employed by kernel analysis. In par-
ticular, several functions were wrongly classiﬁed as performing the
conceptual operations FILE READ, DIR READ, FILE EXECUTE
and DIR SEARCH. We expect that further reﬁnement of these id-
ioms will reduce the number of false positives.
Effectiveness at ﬁnding controlled kernel functions: In
the discussion so far, we evaluated TAHOE’s hook placement at
the controlled kernel functions as deﬁned by LSM-SELinux hook
placements. However, TAHOE also infers controlled kernel func-
tions, using the heuristic described in Algorithm 5. We found that
the controlled kernel functions identiﬁed by TAHOE for placing
ﬁle and socket hooks were the same as those identiﬁed by LSM-
SELinux in all but one case. TAHOE identiﬁed open namei as a
controlled kernel function that performed several controlled opera-
tions, including FILE CREATE and FILE EXECUTE. However, in
LSM-SELinux, hooks to protect these operations were placed in
functions that were called by open namei, as opposed to locations
where open namei was called.
4.2 Performance
We ran timing experiments on a machine with a 1GHz AMD
Athlon processor, and 1GB RAM. Hook analysis took about 11
minutes, while kernel analysis took about 8 minutes. The smaller
runtime for kernel analysis can be attributed to its simpler nature.
4.3 Opportunities for Improvement
While we are encouraged by TAHOE’s ability to place hooks,
we have identiﬁed some shortcomings, which we plan to address
in future work. First, TAHOE currently does not analyze all hooks
in LSM-SELinux. In particular, LSM-SELinux has several hooks
to allocate and free data structures internal to the kernel module
(which implements hooks). While these do not authorize any con-
ceptual operations, it is crucial that they be placed at appropriate
locations in the kernel; improper placement of these hooks could
lead to runtime exceptions. Second, while TAHOE’s kernel analy-
sis recovers the conceptual operations performed by a kernel func-
tion, it currently does not recover the speciﬁc resource instances
on which they are performed—this is currently done manually. For
instance, in Figure 3(B), the resource instances dir and dentry
were recovered manually. Third, TAHOE can currently only place
hooks at the granularity of function calls, i.e., it places hooks at
each location where controlled kernel functions are called. There
are cases in LSM-SELinux (selinux file set fowner), where
hooks are placed at a ﬁner granularity, such as before modiﬁcations
of kernel data structures. Last, while idiom writing and reﬁnement
can improve the results of kernel analysis, they are manual proce-
dures. We plan to investigate automatic idiom writing and reﬁne-
ment techniques in the future.
5. RELATED WORK
Prior work on the formal analysis of hook placement in the LSM
framework has focused on verifying the correctness of existing hook
placement. Vali [10] is a runtime tool to determine the consistency
of hook placement in LSM. It is based upon the observation that
hook placement in LSM is typically consistent across different code
paths in the kernel, and thus inconsistencies are indicative of bugs.
Analysis is performed on execution traces obtained by running an
instrumented version of the kernel. The authors also demonstrate
a static version of Vali, which is built using the analysis capabili-
ties of JaBA [13], a static analysis tool to automatically identify the
least privileges needed to execute a Java program. Zhang et al. [23]
demonstrate the use of a type-qualiﬁer-based tool, CQUAL [5], to
determine inadequacies in hook placement. In particular, their anal-
ysis determines that a resource has been authorized by a hook be-
fore a conceptual operation is performed on it. However, the anal-
ysis requires as input the set of conceptual operations performed
on a resource in order to verify the adequacy of hook placement,
which is used as the type-qualiﬁer-lattice by CQUAL. They use the
output of Vali to obtain the type-qualiﬁer lattice. The above efforts
however do not use the source code of hooks in their analysis.
While we have focused on the problem of automatic hook place-
ment, we believe that the analysis employed by TAHOE can be used
for verifying existing hook placement as well. For instance, autho-
rization graphs extracted by TAHOE can be compared against the
authorization graph corresponding to the existing hook placement,
and anomalies can be ﬂagged as potential errors.
The analyses employed by various stages of TAHOE are also
related to prior work. Hook analysis employs a ﬂow-sensitive,
context-sensitive program analysis, which has been explored by
several tools in the past, including MOPS [3], MC [4], and JaBA [13].
The use of idioms in kernel analysis is conceptually similar to the
use of compiler-extensions (written in a language called Metal) by
MC. Vali used runtime techniques to extract the authorization graph
from a hook-placed kernel, and used consistency analysis on this
graph to identify anomalies. Authorization graphs are also similar
to access rights invocation graphs used by JaBA.
While TAHOE addresses the problem of enforcing a given au-
thorization policy by placing hooks to a kernel module that encap-
sulates the policy, it does not ensure that the authorization policy
itself meets security goals, such as integrity and conﬁdentiality.
SLAT [8] and Gokyo [11] are tools that can be used for this pur-
pose. Both these tools construct an abstract model of the authoriza-
tion policy (e.g., an SELinux policy), and analyze them to deter-
mine conﬂicts between the policy and the system security goals.
6. CONCLUSION
The emerging popularity of the LSM framework to implement
MAC authorization policies, coupled with recent interest in LSM-
like frameworks for user-level applications [12, 21] underscores the
need for security of these frameworks. We believe that the tech-
niques presented in this paper are a useful ﬁrst step towards au-
tomatic enforcement of authorization policies through the use of
formal reasoning and program analysis.
Acknowledgments: Many thanks to Shai Rubin and the CCS
reviewers for their insightful comments. Thanks also to Vijayan
Prabhakaran for patiently answering our ﬁle system questions.
7. REFERENCES
[1] J. P. Anderson. Computer security technology planning study, volume II.
Technical Report ESD-TR-73-51, Deputy for Command and Management
Systems, HQ Electronics Systems Division (AFSC), L. G. Hanscom Field,
Bedford, MA, October 1972.
[2] L. Badger, D. Sterne, D. Sherman, K. Walker, and S. Haghighat. A domain and
type enforcement UNIX prototype. In 5th USENIX UNIX Security, June 1995.
[3] H. Chen. Lightweight Model Checking for Improving Software Security. PhD
thesis, University of California, Berkeley, Fall 2004.
[4] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking system rules using
system-speciﬁc programmer-written compiler extensions. In 4th ACM/USENIX
OSDI, December 2000.
[5] J. S. Foster, M. Fahndrich, and A. Aiken. A theory of type qualiﬁers. In ACM
SIGPLAN PLDI, May 1999.
[6] M. R. Garey and D. S. Johnson. Computers and Intractability. Freeman, New
York, NY, 1979.
[7] L. Gong and G. Ellison. Inside JavaT M 2 Platform Security: Architecture, API
Design, and Implementation. Pearson Education, 2003.
information ﬂow goals in security-enhanced Linux. JCS, 13(1):115–134, 2005.
[8] J. D. Guttman, A. L. Herzog, J. D. Ramsdell, and C. W. Skorupka. Verifying
[9] Example idioms. www.cs.wisc.edu/∼vg/papers/ccs2005a/idioms.html.
[10] T. Jaeger, A. Edwards, and X. Zhang. Consistency analysis of authorization
hook placement in the Linux security modules framework. ACM TISSEC,
7(2):175–205, May 2004.
[11] T. Jaeger, R. Sailer, and X. Zhang. Analyzing integrity protection in the
SELinux example policy. In 12th USENIX Security, August 2003.
[12] D. Kilpatrick, W. Salamon, and C. Vance. Securing the X Window system with
SELinux. Technical Report 03-006, NAI Labs, March 2003.
[13] L. Koved, M. Pistoia, and A. Kershenbaum. Access rights analysis for Java. In
ACM SIGPLAN OOPSLA, November 2002.
[14] X. Leroy, D. Doligez, J. Garrigue, D. R´emy, and J. Vouillon. The Objective
Caml system (release 3.08). Technical report, INRIA Rocquencourt, July 2004.
[15] P. Loscocco and S. Smalley. Integrating ﬂexible support for security policies
into the Linux operating system. In USENIX Annual Technical, June 2001.
[16] J. McLean. The speciﬁcation and modeling of computer security. IEEE
Computer, 23(1):9–16, 1990.
[17] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan
Kaufmann, 1997.
[18] G. C. Necula, S. McPeak, S. P. Rahul, and W. Weimer. CIL: Intermediate
language and tools for analysis and transformation of C programs. In 11th Intl.
Conf. on Compiler Construction, April 2002.
[19] M. Sharir and A. Pnueli. Two approaches to interprocedural dataﬂow analysis.
In S. Muchnick and N. Jones, editors, Program Flow Analysis: Theory and
Applications, pages 189–233. Prentice Hall, 1981.
[20] Simplify. http://research.compaq.com/SRC/esc/Simplify.html.
[21] Tresys Technology. Security-enhanced Linux policy management framework.
http://sepolicy-server.sourceforge.net.
[22] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux
security modules: General security support for the Linux kernel. In 11th
USENIX Security, August 2002.
[23] X. Zhang, A. Edwards, and T. Jaeger. Using CQUAL for static analysis of
authorization hook placement. In 11th USENIX Security, August 2002.