### Algorithm for Feasible Solution Upgrade

The FT-HEU (Fault-Tolerant Heuristic) algorithm is designed to iteratively improve the solution by exchanging service candidates while maintaining feasibility. The algorithm converges because:
1. **Step 4** ensures that no feasible properties become infeasible, and any infeasible properties are improved.
2. **Step 5** always upgrades the utility value of the solution.

Given a finite number of feasible solutions, the algorithm avoids infinite loops. The worst-case computational complexity of the FT-HEU algorithm (assuming pct=0%) is analyzed as follows:

- **Step 3**: Finding the initial solution (Algorithm 4) has a complexity of \( O(nm) \) for computing \( \lambda_{ij} \).
- **Step 4**: Finding an exchange candidate (Algorithm 5) requires a maximum of \( n(m-1) \) calculations for alternative candidates. Each calculation invokes the `flowQoS` function, which has a complexity of \( O(nc) \). Thus, the complexity for each exchange is \( O(n^2(m-1)c) \). The `findExchangeCandidate()` function is invoked at most \( n(m-1) \) times, leading to a total complexity of \( O(n^3(m-1)^2c) \) for Step 4.
- **Step 5**: For each upgrade, there are \( n(m-1) \) iterations for alternative candidates, and each iteration invokes the `flowQoS` function with a complexity of \( O(nc) \). Therefore, the complexity for each upgrade is \( O(n^2(m-1)c) \). With a total of \( n(m-1) \) upgrades, the total complexity for Step 5 is \( O(n^3(m-1)^2c) \).

Combining the complexities of Steps 3, 4, and 5, the overall complexity of the FT-HEU algorithm is \( O(n^3(m-1)^2c) \).

### Implementation and Experiments

To evaluate the performance of different selection algorithms (FT-Local, FT-ALL, FT-BAB, FT-HEU, FT-BABHEU), we used the Inet3.0 Internet topology generator to create 10,000 random nodes representing various web services. We then randomly selected different numbers of nodes to create service plans with varying compositional structures and execution routes.

- **FT-Local**: Implements the selection algorithm with local constraints (Algorithm 2).
- **FT-ALL**: Uses an exhaustive search approach (Section 4.3).
- **FT-HEU**: Employs a heuristic algorithm (pct=0%).
- **FT-BAB**: Uses a Branch-and-Bound algorithm (pct=100%) to solve the IP problem.
- **FT-BABHEU**: Combines the Branch-and-Bound and heuristic approaches (Algorithm 3).

All algorithms were implemented in Java, and the LP-SOLVE package was used for the FT-BAB algorithm. The experiments were conducted on a system with an Intel(R) Core(TM) 2.13 GHz CPU, 1 GB RAM, a 100 Mbits/sec Ethernet card, Windows XP, and JDK 6.0.

#### Computation Time

Figures 3(a), 3(b), and 3(c) show the computation time performance of different algorithms with varying numbers of tasks, candidates, and QoS properties, respectively. The results indicate:
1. **FT-ALL**: Computation time increases exponentially even with small problem sizes.
2. **FT-BAB**: Computation time is acceptable for small problem sizes but increases rapidly with larger numbers of tasks, candidates, and QoS properties.
3. **FT-HEU**: Computation time is very small across all experiments, even with large problem sizes.
4. **FT-Local**: Has the best computation time performance (near zero) but does not support global constraints.

Figure 3(d) shows the computation time performance of FT-BABHEU with different pct settings, indicating that the algorithm can adapt to different environments by adjusting the pct parameter.

#### Selection Results

Figures 4(a), 4(b), and 4(c) compare the selection results of the FT-BAB and FT-HEU algorithms with varying numbers of tasks, candidates, and QoS properties. The y-axis represents the utility ratio (Utility(IP)/Utility(HEU)), where a value of 1 indicates that the FT-HEU result is identical to the optimal result obtained by FT-BAB.

- **FT-HEU**: Utility values are close to those of FT-BAB (greater than 0.975 in the experiments) and improve with increasing task numbers.
- **FT-HEU Performance**: Steady with different numbers of QoS properties.

Figure 4(d) shows the utility ratios of FT-BABHEU with different pct settings, indicating that:
1. **Selection Results**: Influenced by the pct values, allowing adjustment of the FT-BABHEU algorithm's performance.
2. **FT-HEU Performance**: When pct=0%, the utility ratio is still greater than 99%, demonstrating the effectiveness of the FT-HEU algorithm.

### Discussion and Related Work

Several fault-tolerance strategies for web services have been proposed, including sequential and parallel approaches. Sequential strategies, such as FT-SOAP and FT-CORBA, invoke backup services only when the primary service fails. Parallel strategies, such as FTWeb, Thema, and WS-Replication, invoke all candidates simultaneously.

In this paper, we provide a systematic introduction to commonly used fault-tolerance strategies and propose a scalable middleware framework for dynamic fault-tolerance strategy reselection and reconfiguration. This framework addresses the problem of dynamic optimal fault-tolerance strategy determination, especially for stateful web services, using a hybrid algorithm (FT-BABHEU).

### Conclusion

We have presented a practical solution for building dependable service-oriented systems by proposing a QoS-aware fault-tolerant middleware. Key features include:
1. Support for stateful web services.
2. User-collaborated QoS model.
3. Scalable middleware framework for easy replacement of QoS properties and fault-tolerance strategies.
4. Combination of global and local constraints for specifying user requirements.
5. Context-aware algorithm for dynamic and automatic optimal fault-tolerance strategy determination.

Future work will focus on state synchronization between different functionally equivalent web services, dependability guarantees, and investigation of more QoS properties.

### Acknowledgments

This work was supported by grants from the Research Grants Council of the Hong Kong Special Administrative Region, China (Project No. CUHK4158/08E), and the Research Committee of The Chinese University of Hong Kong (Project No. CUHK3/06C-SF).

### References

[References listed as provided in the original text]