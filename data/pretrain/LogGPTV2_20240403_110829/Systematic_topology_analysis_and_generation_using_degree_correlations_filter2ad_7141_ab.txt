correlations within non-isomorphic simple connected subgra-
phs of size d and the dK-series Pd to be the series of prop-
erties constraining the graph’s dK-distribution to the same
In other words, Pd tells us
form as in a given graph G.
how groups of d-nodes with degrees k1, ..., kd interconnect.
In the ‘dK’ acronym, ‘K’ represents the standard notation
for node degrees, while ‘d’ refers to the number of d egree
arguments k of the dK-distributions P (k1, . . . , kd) and to
the upper bound of the d istance between nodes with known
degree correlations. Moving from Pd to Pd+1 in describing
a given graph G is somewhat similar to including the ad-
ditional d + 1’th term of the Fourier (time) or Taylor series
representing a given function F . In both cases, we describe
wider “neighborhoods” in G or F to achieve a more accurate
representation of the original structure.
The dK-series deﬁnition satisﬁes the inclusion and con-
vergence requirements described above. Indeed, the inclu-
sion requirement is satisﬁed because any graph of size d is a
subgraph of some graph of size d + 1. Convergence follows
from the observation that in the limit of d = n, the set of
nK-graphs contains only one element: G itself. As a conse-
quence of the convergence property, any topology metric we
can deﬁne on G will eventually be captured by dK-graphs
with a suﬃciently large d.
Hereafter, our main concerns with the dK-series become:
1) how well we can satisfy our ﬁrst requirement of con-
structibility and 2) how fast the dK-series converges toward
the original graph. We address these two concerns in Sec-
tions 4 and 5.
The reason for the second concern is that the number of
probability distributions required to fully specify the dK-
distribution grows quickly with d: see [28] for the number of
non-isomorphic simple connected graphs of size d. Relative
to the existing work on topology generators typically limited
to d = 1 [1, 22, 32], we present and implement algorithms for
graph construction for d = 2 and d = 3. We present these
algorithms in Section 4 and then show in Section 5 that the
dK-series converges quickly: 2K-graphs are suﬃcient for
most practical purposes for the graphs we consider, while
3K-graphs are essentially identical to observed and modeled
Internet topologies.
To motivate our ability to capture increasingly complex
graph properties by increasing d, we present visualizations
of dK-graphs generated using the dK-randomizing approach
we will discuss in Section 4.1.4. Figure 3 depicts random
0K-, 1K-, 2K- and 3K-graphs matching the corresponding
distributions of the HOT graph, a representative router-level
topology from [19]. This topology is particularly interesting,
because, to date reproducing router-level topologies using
only degree distributions has proven diﬃcult [19]. However,
a visual inspection of our generated topologies shows good
convergence properties of the dK-series: while the 0K-graph
and 1K-graph have little resemblance with the HOT topol-
ogy, the 2K-graph is much closer than the previous ones and
the 3K graph is almost identical to the original. Although
the visual inspection is encouraging, we defer more careful
comparisons to Section 5.
4. CONSTRUCTING dK-GRAPHS
There are several approaches for constructing dK-graphs
for d = 0 and d = 1. We extended a number of these algo-
rithms to work for higher values of d.
In Section 4.1, we
describe these approaches, their practical utility, and our
new algorithms for d > 1. In Section 4.2, we introduce the
concept of dK-random graphs, in Section 4.3, a dK-space
exploration methodology. We use this methodology to de-
termine the lowest values of d such that dK-graphs approxi-
mate a given topology with the required degree of accuracy.
4.1
dK-graph-constructing algorithms
We classify existing approaches to constructing 0K- and
1K-graphs into the following categories: stochastic, pseu-
dograph, matching, and two types of rewiring: randomizing
and targeting. We attempted to extend each of these tech-
niques to general dK-graph construction. In this section, we
qualitatively discuss the relative merits of each of these ap-
proaches before presenting a more quantitative comparison
in Section 5.
4.1.1
Stochastic
The simplest and most convenient for theoretical analysis
is the stochastic approach. For 0K, reproducing an n-sized
graph with a given expected average degree ¯k involves con-
necting every pair of n nodes with probability p0K = ¯k/n.
This construction forms the classical (Erd˝os-R´enyi) random
graphs Gn,p [12]. Recent eﬀorts have extended this stochas-
tic approach to 1K and 2K [2, 7, 9]. In these cases, one ﬁrst
labels all nodes i with their expected degrees qi drawn from
the distribution P (k) and then connects pairs of nodes (i, j)
with probabilities p1K (qi, qj) = qiqj/(n¯q) or p2K (qi, qj) =
(¯q/n)P (qi, qj)/(P (qi)P (qj)) reproducing the expected val-
ues of 1K- or 2K-distributions, respectively.
In theory, we could generalize this approach for any d
in two stages: 1) extraction: given a graph G, calculate
the frequencies of all (including disconnected) d-sized sub-
graphs in G, and 2) construction: prepare an n-sized set of
qi-labeled nodes and connect their d-sized subsets into dif-
ferent subgraphs with (conditional) probabilities based on
the calculated frequencies. In practice, we ﬁnd the stochas-
tic approach performs poorly even for 1K because of high
statistical variance. For example, many nodes with expected
degree 1 wind up with degree 0 after the construction phase,
resulting in many tiny connected components.
4.1.2 Pseudograph
The pseudograph (also known as conﬁguration) approach
is probably the most popular and widely used class of graph-
generating algorithms. In its original form [1, 24], it applies
only to the 1K case. Relative to the stochastic approach,
it reproduces a given degree distribution exactly, but does
not necessarily construct simple graphs. That is, it may
(a) 0K-graph
(b) 1K-graph
(c) 2K-graph
Figure 3: Picturizations of dK-graphs and the original HOT graph illustrating the convergence of dK-series.
(d) 3K-graph
(e) original HOT graph
construct graphs with both ends of an edge connected to
the same node (self-loops) and with multiple edges between
the same pair of nodes (loops).
Pkmax
k=1
It operates as follows: given the number of nodes, n(k),
n(k), ﬁrst prepare n(k) nodes with
of degree k, n =
k stubs attached to each node, k = 1, . . . , kmax, and then
randomly choose pairs of stubs and connect them to form
edges. To obtain a simple connected graph, remove all loops
and extract the largest connected component.
k1,k2=1
Pkmax
We extended this algorithm to 2K as follows: given the
number m(k1, k2) of edges between k1- and k2-degree nodes,
m(k1, k2), we ﬁrst prepare a list of m(k1, k2)
m =
disconnected edges and label the ends of each edge by their
respective degree values k1 and k2, k1, k2 = 1, . . . , kmax.
Next, corresponding to each degree k, k = 1, . . . , kmax, we
create a list of all edge-ends that were labelled with k; from
this list, we randomly select groups of k edge-ends to create
the nodes in the graph with degree k, k = 1, . . . , kmax.
The pseudograph algorithm produces good results for d =
2. Unfortunately, we could not generalize it easily for d > 2
because starting at d = 3, d-sized subgraphs overlap over
edges. Such overlapping introduces a series of topological
constraints and non-local dependencies among diﬀerent sub-
graphs, and we could not ﬁnd a simple technique to pre-
serve these combinatorial constraints during the construc-
tion phase.
4.1.3 Matching
The matching approach diﬀers from the pseudograph ap-
proach in avoiding loops during the construction phase. In
the 1K case, the algorithm works exactly as its pseudograph
counterpart but skips pairs of stubs that form loops if con-
nected. We extend the matching approach to 2K in a similar
manner as our 2K pseudograph approach, but using the loop
Figure 4: dK-preserving rewiring for d = 0, 1, 2.
avoidance strategy.
Unfortunately, loop avoidance suﬀers from various forms
of deadlock for both 1K and 2K. In both cases, the algo-
rithms can end up in incomplete conﬁgurations when not all
edges are formed, and the graph cannot be completed be-
cause there are no suitable stub pairs remaining that can be
connected without forming loops. We devised several tech-
niques to deal with these problems. With these additional
techniques, we obtained good results for 2K graphs. Once
again, we could not generalize matching for d > 2 for es-
sentially the same reasons related to subgraphs’ overlapping
and non-locality as in the pseudograph case.
4.1.4 Rewiring
The rewiring approaches are generalizable to any d and
work well in practice. They involve dK-preserving rewiring
as illustrated in Figure 4. The main idea is to rewire ran-
dom (pairs of) edges preserving an existing form of the dK-
distribution. For d = 0, we rewire a random edge to a ran-
dom pair of nodes, thus preserving ¯k. For d = 1, we rewire
two random edges that do not alter P (k), as shown in Fig-
ure 4. If, in addition, there are at least two nodes of equal
degrees adjacent to the diﬀerent edges in the edge pair, then
the same rewiring leaves P (k, k(cid:2)
) intact. Due to the inclusion
property of the dK-series, (d + 1)K-rewirings form a subset
of dK-rewirings for d > 0. For example, to preserve 3K, we
permit a 2K-rewiring only if it also preserves the wedge and
triangle distributions.
The dK-randomizing rewiring algorithm amounts to per-
forming dK-preserving rewirings a suﬃcient number of times
for some dK-graph. A “suﬃcient number” means enough
rewirings for this process to lead to graphs that do not
change their properties even if we subject them to additional
rewirings. In other words, this rewiring process converges af-
ter some number of steps, producing random graphs having
property Pd. Even for d = 1, there are no known rigorous re-
sults regarding how quickly this process converges, but [15]
shows that this process is an irreducible, symmetric and ape-
riodic Markov chain and demonstrates experimentally that
it takes O(m) steps to converge.
In our experiments in Section 5, we employ the following
strategy applicable for any d. We ﬁrst calculate the num-
ber of possible initial dK-preserving rewirings. By “initial
rewirings” we mean rewirings we can perform on a given
graph G, to diﬀerentiate them from rewirings we can apply
to graphs obtained from G after its ﬁrst (and subsequent)
rewirings. We then subtract the number of rewirings that
leave the graph isomorphic. For example, rewiring of any
two (1, k)- and (1, k(cid:2)
)-edges is a dK-preserving rewiring, for
any d, and more strongly, the graph before rewiring is iso-
morphic to the graph after rewiring. We multiply this diﬀer-
ence by 10, and perform that number of random rewirings.
At the end of our rewiring procedure, we explicitly verify
that randomization is indeed complete and the process has
converged by further increasing the number of rewirings and
checking that all graph characteristics remain unchanged.
One obvious problem with dK-randomization is that it
requires an original graph G as input to construct its dK-
random versions. It cannot start with a description of the
dK-distribution to generate random dK-graphs as is possi-
ble with the other construction approaches discussed above.
To address this limitation, we consider the inverse pro-
cess of dK-targeting d(cid:2)K-preserving rewiring, also known as
Metropolis dynamics [23]. It incorporates the following mod-
iﬁcation to d(cid:2)K-preserving rewiring: every rewiring step is
accepted only if it moves the graph “closer” to Pd. In prac-
tice, we can then employ targeting rewiring to construct
dK-graphs with high values of d by beginning with any d(cid:2)K-
graph where d(cid:2)  0 is some parameter that we
call temperature because of the similarity of the process to
simulated annealing.
In the T → 0 limit, this probability goes to 0, and we have
the standard dK-targeting d(cid:2)K-preserving rewiring process.
When T → ∞, the probability approaches 1, yielding the
standard d(cid:2)K-randomizing rewiring process. To verify er-
godicity, we can start with a high temperature and then
gradually cool the system while monitoring any metric known
to have diﬀerent values in dK- and d(cid:2)K-graphs. If this met-
ric’s value forms a continuous function of the temperature,
then our rewiring process is ergodic. Maslov et al. performed
these experiments in [21] and demonstrated ergodicity in the
case with d(cid:2)
= 1 and d = 2. In our experiments in Section 5,
we always obtain a good match for all target graph metrics
in considering (d(cid:2), d)  d can appear as the output
of these algorithms with drastically diﬀerent probabilities.
Some dK-graphs have such a small probability of being con-
structed that we can safely assume they never arise.
For example, consider the simplest 0K stochastic con-
struction, i.e., the classical random graphs Gn,p. Using a
probabilistic argument, one can show that the naturally-
Property
symbol
Tag
dK
0K P0
1K P1
2K P2
3K P3
. . .
. . .
nK Pn
dK-
distribution
¯k
P (k)
P (k1, k2)
P∧(k1, k2, k3)
P(cid:4)(k1, k2, k3)
. . .
G
Pd deﬁnes Pd−1
Table 1: The summary of dK-series.
Edge existence probability in
stochastic constructions
p0K = ¯k/n
p1K (q1, q2) = q1q2/(n¯q)
p2K (q1, q2)
=
(¯q/n)P (q1, q2)/(P (q1)P (q2))
P
kP (k)
=
P
k(cid:2) P (k, k(cid:2)
)
¯k =
P (k)
(¯k/k)
By counting edges, we get P (k1, k2) ∼ P
k {P∧(k, k1, k2) + P(cid:4)(k, k1, k2)} /(k1 − 1) ∼
P
k {P∧(k1, k2, k) + P(cid:4)(k1, k2, k)} /(k2−1), where we omit normalization coeﬃcients.
. . .
. . .
. . .
Maximum entropy value of (d + 1)K-
distribution in dK-random graphs
P0K (k) = e−¯k¯kk/k!
P1K (k1, k2) = k1P (k1)k2P (k2)/¯k2
See [10] for clustering in 2K-random
graphs
occurring 1K-distribution (degree distribution) in these gra-
phs has a speciﬁc form: binomial, which is closely approxi-