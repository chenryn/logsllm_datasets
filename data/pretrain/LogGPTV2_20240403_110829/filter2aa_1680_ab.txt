### Fastboot Command "Boot" and TOCTOU Attack

The `fastboot boot` command loads and executes Android images via USB. It is important to note that the verification and execution of the image are two separate functions. This separation introduces a potential security risk, as the image could be altered between verification and execution, thereby bypassing bootloader unlocking protections and accessing the encrypted partition.

#### Modifying the Boot Command

The `boot` command receives the full Android boot image through the `fastboot download:` command. The image is loaded into RAM, verified, and then executed. By patching the `boot` command, it is possible to perform a Time-of-Check to Time-of-Use (TOCTOU) attack. Instead of sending one image, two images can be sent and swapped after verification. A tool was developed to achieve this by sending three pieces of data: a four-byte offset, a signed image, and an unsigned, malicious image.

#### Patching for Functionality

1. **Locked Bootloader Bypass**:
   - The `boot` command does not function on locked bootloaders. By replacing the lock state check with an operation that moves the image pointer up by four bytes to the signed image, the image at the new pointer can be verified.

2. **Function Call Overwrite**:
   - Between verification and booting, there are unnecessary function calls that can be overwritten. This allows for five spare instructions to be patched in, which is sufficient to change to the unsigned image.

3. **Additional Instructions**:
   - Four additional instructions were required:
     - Move pointer back to start of payload: `sub x19, x19, 4`
     - Read offset value: `ldr w22, [x19]`
     - Add offset value to pointer: `add x19, x19, x22`
     - Push new pointer value to `Info` structure `ImageBuffer` pointer: `str x19, [x21, #0xa0]`
   - These instructions enable the swapping of the signed image with the unsigned image.

#### Tethered Root

Unlocking the bootloader typically wipes all user data, and permanent rooting exposes the device to greater risks. Most phone users do not need a permanently rooted device. By deploying a rooted Android image via the TOCTOU attack, these issues can be mitigated, as rebooting will remove the root capabilities. The Magisk app can easily generate such images.

#### Lockscreen Bypass

Accessing the unencrypted userdata partition allows for the removal of lockscreen restrictions. Using a custom recovery image like TWRP or modifying the operating system, one can gain access to all apps and stored data.

### Backdooring Encrypted Phones

Developer functionality can add further encryption to the userdata partition, requiring a password input during boot. However, the Android boot image, where the kernel and root filesystem are stored, is not encrypted. Adding a reverse shell to this image can provide later access to the data.

#### Disclosure and Impact

The TOCTOU attack was disclosed to Qualcomm. The attack was only possible due to an initial buffer overflow vulnerability. Patching the phone to prevent this attack is challenging due to its reliance on internal, unmodifiable APIs. These weaknesses could allow an attacker with physical access to an SDM660-based phone to bypass all bootloader locking mechanisms.

### Project Two – NXP PN Series

The NXP PN series is a set of chips used for NFC communication in smartphones and embedded electronics. Breaking the firmware protections on these chips can add new NFC capabilities. The NXP PN series is popular in smartphones, making any exploits transferable to a large number of devices.

#### NXP PN553

- **NFC Chip**: Used solely in mobile devices.
- **Similarities**: Shares similarities with PN547, PN548, PN551, and PN5180.
- **Firmware Updates**: Uses a similar protocol and ARM Cortex-M architecture.
- **Public Research**: Limited.

#### Protocol

- **Communication Interface**: I2C interface (`/dev/nq-nci`).
- **NFC Communication**: Utilizes NCI, the standard NFC protocol.
- **Firmware Updates**: Custom protocol, traceable via ADB logcat.

#### Forcing Firmware Updates

Tracing firmware updates helps in reverse engineering the protocol. Firmware updates occur when signed firmware versions differ. Swapping the main firmware image (`libpn553_fw.so`) and recovery image (`libpn553_rec.so`) can force the update. Each function can be traced against source code.

#### Bootloader Firmware Update Protocol

- **Structure**:
  - 1 byte: Status
  - 1 byte: Size
  - 1 byte: Command
  - x bytes: Parameters
  - 2 bytes: CRC-16
  - Encapsulated in 0xfc byte chunks for large payloads.

#### Interfacing with Device Files

- **I2C Communication**: Reads and writes to `/dev/nq-nci` translate to I2C communication.
- **Configuration**: Can be configured via IOCTL functions to set power mode and enable/disable firmware update mode.

#### Firmware File Format

- **ELF Files**: Firmware files are stored in `libpn553_fw.so`.
- **Binary Data**: Contains commands for firmware updates.

#### Firmware Update Process

- **C0 Write Command**: Used throughout the process.
- **First Command**: Contains unknown, high-entropy data.
- **Subsequent Commands**: Contain a 24-bit address, 16-bit size, data payload, and an unknown hash.
- **Sequence**: Commands must be sent in the order they are stored in the update file.

#### Stitching Firmware Updates

- **Memory Addresses**: Aid in reconstructing the firmware.
- **Firmware Data**: Small, with multiple references to inaccessible memory locations.
- **Core Functionality**: Likely stored in the bootloader.

#### Memory Read Commands

- **A2 Command**: Reads memory from a provided address, limited to writable memory.
- **E0 Command**: Calculates checksums and provides configuration data.

#### RSA Public Key

- **Random Data Block**: Suggests the modulus and exponent for a public RSA key.
- **Signature Identification**: Aids in identifying the firmware update signature.

#### Additional Write Command

- **A7 Command**: Allows writing to 64 bytes of configuration memory, likely used for logging.

#### Unknown Hash

- **Block Write Commands**: End with a 256-bit hash, assumed to be SHA-256 but did not match.
- **Hash Chain**: Each block contains a hash of the next block, ensuring validity without verifying the entire update.

#### Fuzzing

- **Targeted Fuzzing**: Performed on the Firmware Update and NCI interfaces.
- **Hidden Configurations**: Accessible via the NCI Config Write command.
- **Bricking**: Bitwise incrementing values bricked the chip's core functionality, but the bootloader still functioned.

#### Weaknesses in the Firmware Update Process

- **Multiple Writes**: The last block of the firmware update can be written multiple times.
- **Hash Overwrite**: An invalid command between packets prevented the last block from being written, implying the hash was overwritten in memory.

#### Bypassing Signature Verification

- **Hash Overwrite**: Allowed writing arbitrary memory blocks by generating a valid hash.
- **Bypass Mechanism**: Bypassed signature verification mechanisms and allowed overwriting the broken config.

#### Repairing the Firmware

- **Config Dump**: Using a dump of the working config, the new config could be hashed and written, repairing the chip.
- **Bootloader Dump**: The next goal was to dump the bootloader from the chip.

#### Patching New Features

- **Standard Functions**: Stored in the bootloader with limited functionality in the firmware update.
- **NCI Version Number Command**: Easy to identify in memory and its function references.
- **Custom Function**: A branch instruction was overridden to point to a custom function, allowing modification of the version number command.

#### Dumping the Bootloader

- **Memory Stitching**: Entire memory stitched from read commands, disassembled to demonstrate validity.
- **Extended Functionality**: Could be extended to modify the core NFC functionality of the chip.

### Replicating the Vulnerability – PN5180

- **Architecture**: Similar to PN553 but uses a custom communication protocol.
- **SPI Interface**: Communicated via SPI and GPIO pins.
- **Firmware Update**: Same process, allowing replication of the signature bypass.
- **Memory Pointer**: Overwriting a specific part of the EEPROM allowed reading the chip’s bootloader without functional changes.

### Impact

- **Vulnerability Scope**: Likely available on similar chipsets.
- **Attacker Capabilities**: With access to firmware updates, attackers could take over the chips and add custom, potentially malicious NFC functionality.
- **Device Requirements**: Full root access on smartphones, expanded capabilities in hobbyist projects.

### Disclosure

- **Disclosure Date**: June 2020.
- **Affected Chips**: Multiple chips in the product line.
- **Remediation Period**: Long remediation period requested, with public release permitted in August 2021.
- **Complexity**: Alteration of the primary bootloader is complex and risky.
- **Current Generation**: SN series and current generation NXP NFC products are not affected.
- **Phased Rollouts**: Remediation across all affected chipsets was performed in phased rollouts.

### Conclusion

Special thanks to Qualcomm and NXP for remediating the findings. Firmware signature protection is only as strong as its implementation. Common chips are high-impact targets, and bootloader vulnerabilities are common even in popular hardware.