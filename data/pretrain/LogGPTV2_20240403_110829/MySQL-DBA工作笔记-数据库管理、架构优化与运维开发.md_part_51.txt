root
root
rootroot
root
root
root
root
root
root
root
root
root
root
root
root
root
root
root
MySQL
id
2145
3621
4514
52Apr
53
5
S
56
54
Apr
Apr
Apr
to anonzero
Apr
Apr
Apr
Apr
Community Server
((none)）
 Commands end with ; or \g.
12
12
1212
set the environment
16:35
16:35
16:35
16:35
16:35
16:35
value
 stop_all
 send_kill_all
sandbox
restart_all
(GPL）
_replication
all
17
比如我指定一个已经解压
action
第8章MySQL集群和高可用设计丨305
---
## Page 328
306丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
好处，相对来说，手工脚本的方式最起码自己更清楚一些。
candidate_master=1
hostname=127.0.0.1
candidate_master=1
port=24801
repl_user=rpl
port=24801
manager_workdir
GRANT ALL PRIVILEGES ON *.* TO 'mha_test'@'%' identified by 'mha_test' ;
[server3]
hostname=127.0.0.1
[serverl]
manager
[server default]
然后指定一个配置文件，内容如下：
我们先创建一个数据库用户 mha_test，作为配置中的连接用户，
动态搭建一主多从，我的一个设想就是快速模拟 MHA的环境。
当然上面的工作可以使用 sandbox来做，也可以使用自定义（手工）脚本来做，各有
port:
node2
port: 20192
查看主从的状态，
replication directory installed in $HOME/sandboxes/rsandbox_5_7_17
starting slave.
starting slave
installing slave
[server2]
# make replication_sandbox 5.7.17
cat/home/mha/conf/appl.cnf
./status_all
 sandbox server started
快速测试
20193
on
log=/home/mha/manager/app1/manager.1og
test
server
user
使用 status_all 即可。
2
12
started
---
## Page 329
(127.0.0.1:24802)
defined.
successfully.
root@127.0.0.1(127.0.0.
这个时候我们来破坏一下，可以手工 Kill掉 24081端口的 mysqld_safe 和 mysqld 服务。
masterha_check_repl --conf=/home/mha/conf/appl.cnf
Wed
 # masterha_check_ssh --conf=/home/mha/conf/appl.cnf
Wed
NedApr
tail -f /home/mha/manager/app1/manager.1og
这个就会从日志中发现MHA开始工作了。
# masterha_check_status --conf=/home/mha/conf/appl.cnf
如果检查目前MHA 的状态，可以使用如下的命令：
接着我们启动 MHA-manager，如下：
MySQL Replication Health is OK.
Wed
Wed
Wed
Wed Apr 12 18:35:29 2017 -
输出日志部分如下，主从关系和复制检测都可以清晰看到。
检查主从的复制情况，
Wed
Wed
基本就是如下的 ssh 连接，请检查。
使用如下的脚本来检测 SSH的情况。
因为是同一台服务器，所以能够快速模拟MHA 的容灾切换和快速恢复。
port=24803
+--127.0.0.1(127.0.0.1:24803)
Apr
-127
Apr
Apr
Apr
Apr
12 18:35:292017 -
12
12
12
22:54:53
18:35:292017
12
12
18:35:29
18:35:52
18:35:522017
22:54:53
 completed successfully.
.0.0.1:24801)
18:35:52
18:35:52
2017
，可以使用如下的命令。
2017
2017
.1:22)
2017
1:24802)
 [info] Checking replication health on 127.0.0.1..
[info]
[info] Resetting slave info on the new master.
2017
2017
[warning] shutdown_script is not defined.
[info]
to
to
[info]
[info]
[warning] master_ip_failover_script is not
[debug]
[info]
[debug]
(currentmaster)
[info]   All SSH connection tests passed
127.0.0.1:
[info]
[debug]
[debug]
ok
ok.
ok.
Master
Connecting
第8章MySQL集群和高可用设计|307
via SSH from
via-
to
SSH from
127.0.0.1
ceeded
---
## Page 330
308丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
在 lib 下面的.pm 文件中。
刀不误砍柴工，
的一个重点内容。我们先从 manager 开始，当然因为这个开源项目是基于 perl 开发，磨
8.2.4
实从步骤上来说大同小异。
从库会自动从24802 端口的服务接受数据变更。
127.0.0.1(127.0.0.1:24802)
下载插件即可。
整个工程的情况如下图 8-6 所示，bin 目录下是可执行的 perl脚本，引用的包体逻辑
整个过程有条不紊，可以基于这个测试环境快速熟悉 MHA，而线上环境的部署，其
对于 Node 节点来说，也是类似的方式，只是 Node 节点的逻辑内容少了很多，主要
了解学习一个开源项目，阅读源码是一个很不错的开始，所以 MHA 就成为了我学习
这样一来 24802 端口的 mysql服务会自动接管，由从库变为主库。而 24803 端口的
Master failover to 127.0.0.1(127.0.0.1:24802)
127.0.0.1(127.0.0.1:24802): Resetting slave
127.0.0.1(127.0.0.1:24802):
Master
appl:
从代码关系图理清 MHA 的脉络
MySQL
我们可以在开发 IDE 里面查看，这样效率更高一些，比如使用 eclipse,
Master
品
r.pn
succeeded
 OK: Applying all
failover
图8-6
is down!
mha4mysql-node
failover
as
anew
127.0.0.1(127.0.0.1:24801)
lydiffrelay.logs
logs succeeded
master.
completed successfully.
from
to
---
## Page 331
我们通过main方法来逐步了解。
查看。会发现脚本主要分为两部分：
集中在对于 binlog 的处理上。
我们切换到 MasterMonitor 中，查看 main 方法的内容，如图 8-9所示。
使用 MHA，启停 Manager 是一个基本的入口，所以我们可以在 masterha_manager 里
整个代码关系图的大体逻辑如下图8-7所示。
_stalus
#
@ARGV
exit1；
-ssh_reachable=$ssh_reachable",
-master_
ServerHealthck
dead
Idefined($ssh_reachable)
1$dead_master->{hostname}
$exit code
ManagerAdmi
Sdea
_master_ip=$dead
_host=$dead_master->{hostname}",
=dead
Nodeuti
：masterMonitor 和MasterFailover。如下图8-8所示，
BindegPposFE
图8-8
图8-7
ivos
Manageradni
第8章MySQL集群和高可用设计丨309
---
## Page 332
310丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
继续往里面看。
跳的检测机制。其中 wait_until_master_is_dead 就是一个重要方法了。可以顺着这个方向
览，如图 8-10所示，我们从 main方法入手。
如果是在 IDE 里面，就很容易看到对应的.pm 文件 MasterMonitor.pm 的一个结构概
整个 Monitor 的核心逻辑就是下面图 8-11 的方法了。这个逻辑是一个循环中进行心
print
"Port: $dead_master->{port}\n";
Outline
Subroutines
main
finalize
finalize_on_error
prepare_for_retry
wait_until_master_is_unreachable
check_binlog_servers
chec
checkslave_env
checkbinlog
check_master_ssh_env
exit_by_signal
SHA::Manage
(s10g);
$dead_master,$ssh_reachable
图8-11
图8-10
图8-9
>{ip}
---
## Page 333
戳来处理）等。
查到当前最新的 Slave 节点，如何补齐日志信息（本质上就是通过 mysqlbinlog 基于时间
逻辑。整体的逻辑如图8-14 所示，会分为几个阶段。每个阶段会有一个整体的校验步骤。
MasterRotate来处理，如图 8-12所示。
查看脚本的基本结构会发现，通过检测主节点的状态，会分别调用 MasterFailover 和
通过上面的部分可以看到，整个切换过程中，后台会进行一系列的逻辑检查，比如
failover 的逻辑如图 8-13 所示，我们可以查看对应的 pm 文件 MasterFailover.pm 来查看
另外一个重要的脚本就是 masterha_master_switch了，主要是完成切换的内容，如果