From “No Way” to 0-day: 
Weaponizing the 
Unweaponizable
Joshua Wise
1
“...you’re de0uing it wrong...”
Outline
• Intro
• Vulnerabilities: in general
-
What makes something easy to exploit?
• Vulnerabilities: a case study
-
Making something hard into something doable
• Brieﬂy -- what went wrong?
-
How did this sort of thing happen?
• Q & A
2
Intro: Me
• Just some guy, you know?
• All-purpose embedded hacker
- Got roped into Android at some point
• Recovering software guy
- Now doing ASIC design
• Buzzword compliant
- Working on IMB in ECE at CMU
3
unrevoked
Intro: You
• At least a little bit of kernel 
experience?
• Interested in security?
• Not a skript kiddie
- No code for you to compile 
here
- Enough description for a skilled 
programmer to repro this
4
image: me, 12 years old
Today’s vulnerability
• While looking for ways to root Android phones, came 
across...
-
CVE-2010-1084
• “CVE request: kernel: bluetooth: potential bad memory 
access with sysfs ﬁles”
-
“...allows attackers to cause a denial of service (memory 
corruption)”
• First showed up in 2.6.18, ﬁxed in 2.6.33
-
...ouch!
-
Raise your hand if you haven’t patched up to 2.6.33 yet
5
Mechanism of crash
• Classic vulnerability
-
for each Bluetooth socket, sprintf() onto the end of 
a string in a buffer
-
no check for end of buffer
• With a twist
-
gets the buffer from the frame allocator; scribbles into 
next frame (uncontrolled target)
-
contents not controlled
-
length only kind of controlled
6
Yesterday’s vulnerability
• Refresher: easy vulnerability
• Simple stack smash:
void cs101_greeter() {          // prof said it has 2 be setuid root 4 term axx
    char buf[1024];
    printf(“What is your name?\n”);
    gets(buf);                  // my prof said not to use gets(3)
    printf(“Hello, %s!\n”, buf);// so i used gets(buf), thats ok rite?
}
• Easily exploitable properties
-
Controlled target
-
Controlled length
-
Controlled contents (with a few limitations)
7
Watch that stack!
• What happens next?
- “User” inputs something bad.
• Where does it go? 
8
Watch that stack!
• What happens next?
-
“User” inputs something bad.
• Where does it go? 
9
main()’s stack frame
0xC0000000
...
return addr for greeter() 
other BS for greeter()
0xBFFF8008
buf
0xBFFF8004
0xBFFF8000
0xBFFF7C00
gets()’s stack frame
!
These addresses are for
no machine in particular!
Watch that stack!
• What happens next?
-
“User” inputs something bad.
• Where does it go? 
10
main()’s stack frame
0xC0000000
...
return addr for greeter() 
other BS for greeter()
0xBFFF8008
buf
0xBFFF8004
0xBFFF8000
0xBFFF7C00
gets()’s stack frame
!
These addresses are for
no machine in particular!
$ /afs/cs/course/15123-sfnoob/usr\
  /aashat/bin/greeter
What is your name?
AAAAAAAAAAAAA...∆∫∆∂œåµƒ...
Hello, AAAAAAAAA...
  [+] pwned
# 
Watch that stack!
• What happens next?
-
“User” inputs something bad.
• Where does it go? 
11
main()’s stack frame
...
return addr for greeter() 
other BS for greeter()
buf
gets()’s stack frame
$ /afs/cs/course/15123-sfnoob/usr\
  /aashat/bin/greeter
What is your name?
AAAAAAAAAAAAA...∆∫∆∂œåµƒ...
Hello, AAAAAAAAA...
  [+] pwned
# 
now contains code!
now contains address
of code in buf!
Why did that work so 
well?
• Remember the three controls:
- Attacker-controlled target
•
Always blast the ret addr - same memory each time
- Attacker-controlled length
•
We never blast off the end of the stack into 
segfaultland
- Attacker-controlled contents
•
Write anything we want but 0x00 and ’\n’
12
From yesterday comes 
tomorrow
• Today’s exploit, at its core:
-
(for those of you following along at home, in l2cap_sysfs_show)
-
str = get_zeroed_page(GFP_KERNEL);
...
for each l2cap_sk_list as sk:
    str += sprintf(str, "%s %s %d %d 0x%4.4x 0x%4.4x %d %d %d\n"
                   batostr(&bt_sk(sk)->src),...);
• What year is it? I seem to have forgotten
13
sprintf() out of control
• Issue is obvious, and crash is inevitable -- 
but what of our three controls?
• Controlled target
-
How is buf allocated?
•
sysfs buffer comes from frame allocator
-
What comes after?
•
Some other poor noob’s frame! 
14
(aside: frames and pages)
• Frames are physical memory backings of pages.
-
Don’t confuse with ‘stack frames’!
• Pages are chunks of virtual memory.
15
Process A pages
0xBFFFF000
Stack
.text
.data
!
0x8C028000
0x8C020000
...
...
Process B pages
0xBFFFF000
Stack
.text
.data
0x8C028000
0x8C020000
...
...
Physical memory frames
•
Linux kernel has both mapped into A.S.!
•
Needed for frame allocations (__GFP_KERNEL) -- more later
A Stack
A .data
Kernel code
Shared .text
B Stack
sprintf() out of control
• Issue is obvious, and crash is inevitable -- 
but what of our three controls?
• Controlled length
-
Writes take place through a sprintf() to a 
strange place
-
We can’t stop it before it smashes something 
else
16
sprintf() out of control
• Issue is obvious, and crash is inevitable -- 
but what of our three controls?
• Controlled contents
-
No data comes directly from us
-
All data comes formatted
17
sprintf() out of control
• Issue is obvious, and crash is inevitable -- 
but what of our three controls?
• Zero for three!
• Now would be a good time to start 
controlling our environment.
18
Target practice
• How can we control the target?
• Let’s use an old-fashioned heap spray.
- ...but what?
- First idea: kstack!
•
It worked so well in CS101, right?
19
“With Emarhavil, your target is our target.”
Jenga
• Let’s assume:
- kernel stack is the frame after the sysfs page
- we know which pid the kstack belongs to
• Given that, what happens?
- What does a kstack even look like?
20
Jenga
• Like other 
stacks, a kstack 
has stack 
frames
• Unlike other 
stacks, a kstack 
has a TCB 
attached to it!
21
str
0x782F2000
0x782F3000
thread control block
the abyss
some poor dude’s stack
~0x782F3100
~0x782F3DE8
return address
more stack frames, reg saves...
0x782F4000
~0x782F3E80
~0x782F3E84
!
...
Jenga
• What happens 
when we 
write?
22
str
0x782F2000
0x782F3000
thread control block
the abyss
some poor dude’s stack
~0x782F3100
~0x782F3DE8
return address
more stack frames, reg saves...
0x782F4000
~0x782F3E80
~0x782F3E84
...
sprintf(str, “ownedownedownedowned”
             “ownedownedownedowned”
             ...);
!
Jenga
• What happens 
when we 
write?
23
str
0x782F2000
0x782F3000
thread control block
the abyss
some poor dude’s stack
~0x782F3100
~0x782F3DE8
return address
more stack frames, reg saves...
0x782F4000
~0x782F3E80
~0x782F3E84
...
sprintf(str, “ownedownedownedowned”
             “ownedownedownedowned”
             ...);
ownedownedownedownedownedowned
ownedownedownedownedowned
Jenga
• What happens 
when we write?
- TCB is clobbered!
- Could be OK; this 
time not.
24
str
0x782F2000
0x782F3000
thread control block
the abyss
some poor dude’s stack
~0x782F3100
~0x782F3DE8
return address
more stack frames, reg saves...
0x782F4000
~0x782F3E80
~0x782F3E84
...
sprintf(buf, “ownedownedownedowned”
             “ownedownedownedowned”
             ...);
ownedownedownedownedownedowned
ownedownedownedownedowned
Getting physical
• What else goes in physical frames?
• Linux kernel has interesting mechanism 
called SLAB allocator
- Creates uniform “caches” of speciﬁc objects
•
conveniently, frame-sized!
- Localizes similar objects in memory
- Avoids expensive variable-size allocation
- Originally designed by the Sun guys
25
free
slot
SLABs of memory
• What’s in a SLAB?
• Where’s the list of SLABs available?
- SLAB metadata stored in... a SLAB!
26
in-use
object
free
slot
free
slot
in-use
object
free
slot
in-use
object
free
slot
frame boundary
frame boundary
frame boundary
pointer to
next free slot
pointer to
ﬁrst free slot
NULL
NULL
free
slot
SLABs of memory
• What’s in a SLAB?
• No per-SLAB header
- Convenient...
27
in-use
object
free
slot
free
slot
in-use
object
free
slot
in-use
object
free
slot
frame boundary
frame boundary
frame boundary
NULL
NULL
free
slot
SLABs of memory
• What’s in a SLAB?
• No per-SLAB header
- Convenient...
28
in-use
object
free
slot
free
slot
in-use
object
free
slot
in-use
object
free
slot
frame boundary
frame boundary
frame boundary
NULL
NULL
str
(hum de dum)
Who eats SLABs?
• Pretty much every kernel subsystem
-
joshua@escape:~/linux$ find . | \
                       xargs grep kmem_cache_alloc | \
                       wc -l
305
-
joshua@nyus:/proc$ cat slabinfo | wc -l
183
• Something in there has to be an easy target
• How about... ﬁle descriptors?
- Stored in struct file, in SLABs
29
Filed away for reference
• What does a struct file look like?
-
struct file {
   union {...} f_u; /* morally, two pointers */
   struct path f_path; /* morally, two pointers */
   struct file_operations *f_op;
   unsigned int f_count, f_flags, f_mode;
   ...
}
struct file_operations {
   struct module *owner;
   loff_t (*llseek)(...);
   ssize_t (*read)(...);
   ssize_t (*write)(...);