# From “No Way” to 0-day: Weaponizing the Unweaponizable
## Joshua Wise

### Outline
- **Introduction**
- **Vulnerabilities: In General**
  - What makes something easy to exploit?
- **Vulnerabilities: A Case Study**
  - Making something hard into something doable
- **Briefly: What Went Wrong?**
  - How did this sort of thing happen?
- **Q & A**

### Introduction: About Me
- Just an ordinary guy, really.
- All-purpose embedded hacker who got involved with Android at some point.
- Recovering software developer, now working on ASIC design.
- Buzzword compliant, currently working on IMB in ECE at CMU.

### Introduction: About You
- At least a little bit of kernel experience?
- Interested in security?
- Not a script kiddie
  - No code for you to compile here.
  - Enough description for a skilled programmer to reproduce this.

### Today’s Vulnerability
- While looking for ways to root Android phones, I came across...
  - **CVE-2010-1084**: "CVE request: kernel: bluetooth: potential bad memory access with sysfs files"
    - "Allows attackers to cause a denial of service (memory corruption)."
    - First appeared in 2.6.18, fixed in 2.6.33.
    - Ouch! Raise your hand if you haven’t patched up to 2.6.33 yet.

### Mechanism of Crash
- **Classic Vulnerability**:
  - For each Bluetooth socket, `sprintf()` is used to append to a string in a buffer without checking the end of the buffer.
- **With a Twist**:
  - The buffer is allocated from the frame allocator, and the overflow can scribble into the next frame (uncontrolled target).
  - The contents are not controlled, and the length is only partially controlled.

### Yesterday’s Vulnerability: A Refresher
- **Simple Stack Smash**:
  ```c
  void cs101_greeter() {
      char buf[1024];
      printf("What is your name?\n");
      gets(buf); // my prof said not to use gets(3)
      printf("Hello, %s!\n", buf);
  }
  ```
- **Easily Exploitable Properties**:
  - Controlled target
  - Controlled length
  - Controlled contents (with a few limitations)

### Watch That Stack!
- **What Happens Next?**
  - The user inputs something bad.
  - Where does it go?

#### Main's Stack Frame
```
0xC0000000
...
return addr for greeter()
other BS for greeter()
0xBFFF8008
buf
0xBFFF8004
0xBFFF8000
0xBFFF7C00
gets()'s stack frame
```
- These addresses are for no machine in particular!

### Execution
```sh
$ /afs/cs/course/15123-sfnoob/usr/aashat/bin/greeter
What is your name?
AAAAAAAAAAAAA...∆∫∆∂œåµƒ...
Hello, AAAAAAAAA...
  [+] pwned
#
```
- The stack now contains code and the address of code in `buf`!

### Why Did That Work So Well?
- **Three Controls**:
  - **Attacker-controlled target**: Always blast the return address, same memory each time.
  - **Attacker-controlled length**: We never blast off the end of the stack into segfault land.
  - **Attacker-controlled contents**: Write anything we want but `0x00` and `\n`.

### From Yesterday Comes Tomorrow
- **Today’s Exploit, at Its Core**:
  - (For those following along, in `l2cap_sysfs_show`)
  - `str = get_zeroed_page(GFP_KERNEL);`
  - For each `l2cap_sk_list` as `sk`:
    ```c
    str += sprintf(str, "%s %s %d %d 0x%4.4x 0x%4.4x %d %d %d\n",
                   batostr(&bt_sk(sk)->src),...);
    ```

### Sprintf() Out of Control
- **Issue**: Obvious, and a crash is inevitable.
- **Controlled Target**:
  - Buffer comes from the frame allocator.
  - What comes after? Some other poor noob’s frame!
- **Aside: Frames and Pages**:
  - Frames are physical memory backings of pages.
  - Pages are chunks of virtual memory.

### Process A and B Pages
- **Process A**:
  ```
  0xBFFFF000
  Stack
  .text
  .data
  0x8C028000
  0x8C020000
  ...
  ...
  ```
- **Process B**:
  ```
  0xBFFFF000
  Stack
  .text
  .data
  0x8C028000
  0x8C020000
  ...
  ...
  ```
- **Physical Memory Frames**:
  - Linux kernel has both mapped into the Address Space (AS).
  - Needed for frame allocations (`__GFP_KERNEL`).

### Sprintf() Out of Control
- **Controlled Length**:
  - Writes take place through `sprintf()` to a strange place.
  - We can’t stop it before it smashes something else.
- **Controlled Contents**:
  - No data comes directly from us.
  - All data comes formatted.
- **Zero for Three!**
  - Now would be a good time to start controlling our environment.

### Target Practice
- **How Can We Control the Target?**
  - Let’s use an old-fashioned heap spray.
  - First idea: kstack!
  - It worked so well in CS101, right?

### Jenga
- **Assumptions**:
  - Kernel stack is the frame after the sysfs page.
  - We know which PID the kstack belongs to.
- **What Happens?**
  - What does a kstack even look like?

### Kstack Structure
- **Like Other Stacks**, a kstack has stack frames.
- **Unlike Other Stacks**, a kstack has a Thread Control Block (TCB) attached to it.

#### Example
```
str
0x782F2000
0x782F3000
thread control block
the abyss
some poor dude’s stack
~0x782F3100
~0x782F3DE8
return address
more stack frames, reg saves...
0x782F4000
~0x782F3E80
~0x782F3E84
...
```

### What Happens When We Write?
- **Sprintf**:
  ```c
  sprintf(str, "ownedownedownedowned"
                 "ownedownedownedowned"
                 ...);
  ```
- **Result**:
  - TCB is clobbered!
  - Could be OK; this time not.

### Getting Physical
- **What Else Goes in Physical Frames?**
  - Linux kernel has an interesting mechanism called the SLAB allocator.
  - Creates uniform “caches” of specific objects.
  - Localizes similar objects in memory.
  - Avoids expensive variable-size allocation.
  - Originally designed by the Sun guys.

### SLABs of Memory
- **SLAB Metadata** stored in a SLAB.
- **No Per-SLAB Header**:
  - Convenient...

#### Example
```
in-use
object
free
slot
free
slot
in-use
object
free
slot
in-use
object
free
slot
frame boundary
frame boundary
frame boundary
NULL
NULL
str
(hum de dum)
```

### Who Eats SLABs?
- **Pretty Much Every Kernel Subsystem**:
  - Example:
    ```sh
    joshua@escape:~/linux$ find . | xargs grep kmem_cache_alloc | wc -l
    305
    joshua@nyus:/proc$ cat slabinfo | wc -l
    183
    ```
- **Easy Target**: File descriptors.
  - Stored in `struct file`, in SLABs.

### Filed Away for Reference
- **Struct File**:
  ```c
  struct file {
     union {...} f_u; /* morally, two pointers */
     struct path f_path; /* morally, two pointers */
     struct file_operations *f_op;
     unsigned int f_count, f_flags, f_mode;
     ...
  }
  struct file_operations {
     struct module *owner;
     loff_t (*llseek)(...);
     ssize_t (*read)(...);
     ssize_t (*write)(...);
  }
  ```

This revised version aims to make the text more coherent, clear, and professional while maintaining the original content and structure.