of chameleon documents that Internet Explorer sniffs as
HTML. Four years ago, a blog post
[2] discusses a
JPEG/HTML chameleon. A 2006 full disclosure post [4]
describes a content-snifﬁng XSS attack that exploits an
incorrect Content-Type header. More recently, PNG and
PDF chameleons have been used to launch content-snifﬁng
XSS attacks [3], [12], [39], [40]. Spammers have reportedly
used similar attacks to upload text ﬁles containing HTML to
open wikis [3]. Many of the example exploits in these ref-
erences no longer work, suggesting that Internet Explorer’s
content-snifﬁng algorithm has evolved over time by adding
MIME types to the fast path.
JAR URI Scheme. Although not a content-snifﬁng vulnera-
bility as such, Firefox 2.0.0.9 contains a vulnerability caused
by treating one type of content as another. Firefox supports
extracting HTML documents from ZIP archives using the
jar URI scheme. If a site lets an attacker upload a ZIP
archive, the attacker can instruct Firefox to unzip the archive
and render the HTML inside [41]. Worse, because the ZIP
parser is tolerant of malformed archives, an attacker can
create chameleon ZIP archives that appear to be images. To
resolve this issue, Firefox now requires the archives to be
served with speciﬁc MIME types.
5. Conclusions
Browser content-snifﬁng algorithms have long been one of
the least-understood facets of the browser security landscape.
In this paper, we study content-snifﬁng XSS attacks and
defenses. To understand content-snifﬁng XSS attacks, we
use string-enhanced white-box exploration and source code
inspection to construct high-ﬁdelity models of the content-
snifﬁng algorithms used by Internet Explorer 7, Firefox 3,
Safari 3.1, and Google Chrome. We use these models to
construct attacks against two Web applications: HotCRP and
Wikipedia.
We describe two defenses for these attacks. For Web sites,
we provide a ﬁlter based on our models that blocks content-
snifﬁng XSS attacks. To protect sites that do not deploy our
ﬁlter, we propose two design principles for securing browser
content-snifﬁng algorithms: avoid privilege escalation and
use preﬁx-disjoint signatures. We evaluate the security of
these principles in a threat model based on case studies,
and we evaluate the compatibility of these principles using
Google’s search database and metrics from over a billion of
HTTP responses.
We implement a content-snifﬁng algorithm based on our
principles and deploy the algorithm to real users in Google
Chrome. Our principles have been incorporated into the
draft HTML 5 speciﬁcation and partially adopted by Internet
Explorer 8. We look forward to continue working with
browser vendors to converge their content sniffers towards
a secure, standardized algorithm.
Acknowledgements
We would like to thank Stephen McCamant, Rhishikesh
Limaye, Susmit Jha, and Sanjit A. Seshia who collaborated
in the design of the abstract string syntax. We also thank
Darin Adler, Darin Fisher, Ian Hickson, Collin Jackson, Eric
Lawrence, and Boris Zbarsky for many helpful discussions
on content snifﬁng. Finally, our thanks to Chris Karlof,
Adrian Mettler, and the anonymous reviewers for their
insightful comments on this document.
This material is based upon work partially supported by
the National Science Foundation under Grants No. 0311808,
No. 0448452, No. 0627511, and CCF-0424422, and by
the Air Force Ofﬁce of Scientiﬁc Research under MURI
Grant No. 22178970-4170. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this material
are those of the author(s) and do not necessarily reﬂect the
views of the Air Force Ofﬁce of Scientiﬁc Research, or the
National Science Foundation.
369
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:06 UTC from IEEE Xplore.  Restrictions apply. 
References
[1] “Firefox bug 175848,” https://bugzilla.mozilla.org/show bug.
cgi?id=175848.
[19] P. Godefroid, M. Y. Levin, and D. Molnar, “Automated
whitebox fuzz testing,” in Proceedings of the Annual Network
and Distributed System Security Symposium, San Diego,
California, February 2008.
[2] “Getting
around
Internet
type
http://weblog.philringnalda.com/2004/04/06/
Explorer MIME
mangling,”
getting-around-ies-mime-type-mangling.
[3] “Internet Explorer
facilitates XSS,” http://www.splitbrain.
org/blog/2007-02/12-internet explorer facilitates cross
site scripting.
[4] “SMF
upload XSS
vulnerability,”
fulldisclosure/2006/Dec/0079.html.
http://seclists.org/
[5] I. Hickson et al., “HTML 5 Working Draft,” http://www.
whatwg.org/specs/web-apps/current-work/.
[6] N. Freed and N. Borenstein, “RFC 2045: Multipurpose In-
ternet Mail Extensions (MIME) part one: Format of Internet
message bodies,” Nov. 1996.
[7] ——, “RFC 2046: Multipurpose Internet Mail Extensions
(MIME) part two: Media types,” Nov. 1996.
[8] K. Moore, “RFC 2047: Multipurpose Internet Mail Exten-
sions (MIME) part three: Message header extensions for non-
ASCII text,” Nov. 1996.
[9] “Apache bug 13986,” https://issues.apache.org/bugzilla/show
bug.cgi?id=13986.
[10] “EXIF.org,” http://www.exif.org/.
[11] “Internet Explorer 8 security part V: Comprehensive
http://blogs.msdn.com/ie/archive/2008/07/02/
protection,”
ie8-security-part-v-comprehensive-protection.aspx.
[12] “Internet
door,”
xss-exploit-door-microsoft-betiteld-als-by-design.html.
exploit
http://tweakers.net/nieuws/47643/
XSS
Explorer
[13] “Wikipedia,” http://www.wikipedia.org.
[14] “HotCRP conference management software,” http://www.cs.
ucla.edu/∼kohler/hotcrp/.
[15] “WineHQ,” http://www.winehq.org/.
[16] “MSDN: MIME type detection in Internet Explorer,” http:
//msdn.microsoft.com/en-us/library/ms775147.aspx.
[17] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and
D. R. Engler, “EXE: Automatically generating inputs of
death,” in Proceedings of the ACM Conference on Computer
and Communications Security, Alexandria, Virginia, October
2006.
[20] “MSDN:
FindMimeFromData
function,”
//msdn.microsoft.com/en-us/library/ms775107(VS.85).aspx.
http:
[21] “The IDA Pro disassembler and debugger,” http://www.
hex-rays.com/idapro/.
[22] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G.
Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena,
“BitBlaze: A new approach to computer security via binary
analysis,” in International Conference on Information Systems
Security, Hyderabad, India, December 2008, Keynote invited
paper.
[23] J. Caballero, S. McCamant, A. Barth, and D. Song, “Ex-
tracting models of security-sensitive operations using string-
enhanced white-box exploration on binaries,” EECS De-
partment, University of California, Berkeley, Tech. Rep.
UCB/EECS-2009-36, Mar 2009.
[24] V. Ganesh and D. Dill, “A decision procedure for bit-vectors
and arrays,” in Proceedings of the Computer Aided Veriﬁca-
tion Conference, Berlin, Germany, August 2007.
[25] N. Bjorner, N. Tillmann, and A. Voronkov, “Path feasibility
analysis for string-manipulating programs,” in Proceedings of
the International Conference on Tools and Algorithms for the
Construction and Analysis of Systems, York, United Kingdom,
March 2009.
[26] P. Hooimeijer and W. Weimer, “A decision procedure for
subset constraints over regular languages,” in Proceedings of
the SIGPLAN Conference on Programming Language Design
and Implementation, Dublin, Ireland, June 2009.
[27] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D.
Ernst, “HAMPI: A solver for string constraints,” MIT CSAIL,
Tech. Rep. MIT-CSAIL-TR-2009-004, Feb. 2009.
[28] “Microsoft KB945686,”
945686/.
[29] “Microsoft KB944533,”
944533.
http://support.microsoft.com/kb/
http://support.microsoft.com/kb/
[30] “Wikipedia image use policy,” http://en.wikipedia.org/wiki/
Image use policy.
[31] “Fine free ﬁle command,” http://darwinsys.com/ﬁle/.
[32] “Sites using mediawiki/en,” http://www.mediawiki.org/wiki/
Sites using MediaWiki/en.
[33] A. Barth, C. Jackson, and J. C. Mitchell, “Securing frame
communication in browsers,” in Proceedings of the Usenix
Security Symposium, San Jose, California, July 2008.
[18] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed
automated random testing,” in Proceedings of the SIGPLAN
Conference on Programming Language Design and Imple-
mentation, Chicago, Illinois, June 2005.
[34] M. Martin and M. S. Lam, “Automatic generation of XSS and
SQL injection attacks with goal-directed model checking,” in
Proceedings of the USENIX Security Symposium, San Jose,
California, July 2008.
370
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:06 UTC from IEEE Xplore.  Restrictions apply. 
[35] “Portable Network Graphics speciﬁcation, w3c/iso/iec ver-
sion,” http://www.libpng.org/pub/png/spec/iso/.
[36] J. Dean and S. Ghemawat, “Mapreduce: Simpliﬁed data
processing on large clusters,” in Proceedings of the Sixth
Symposium on Operating System Design and Implementation,
December 2004.
[37] R. Troost, S. Dorner, and K. Moore, “RFC 2183: Commu-
nicating presentation information in Internet messages: The
content-disposition header ﬁeld,” Aug. 1997.
[38] “Internet Explorer 8 security part V: Comprehensive
http://blogs.msdn.com/ie/archive/2008/09/02/
protection,”
ie8-security-part-vi-beta-2-update.aspx.
[39] “The hazards of MIME snifﬁng,” http://adblockplus.org/blog/
the-hazards-of-mime-snifﬁng.
[40] “The downside of uploads,” http://www.malevolent.com/
weblog/archive/2008/02/26/uploads-mime-snifﬁng/.
[41] “Mozilla foundation security advisory 2007-37,” http://www.
mozilla.org/security/announce/2007/mfsa2007-37.html.
Appendix
Nomenclature. We adopt the following nomenclature to
represent signatures precisely. DATA is a pointer to a buffer
containing the ﬁrst n bytes of the content, where n is the size
of the content-snifﬁng buffer size for the particular browser.
DATA[x:y], where n > y ≥ x ≥ 0, is the subsequence
of DATA beginning at offset x and ending at offset y (both
offsets inclusive). For example, Internet Explorer 7 uses the
following signature for image/jpeg: DATA[0:1] ==
0xffd8. To match this signature, an HTTP response must
contain at least two bytes, the ﬁrst byte of the response
must be 0xff, and the second byte must be 0xd8. We
also use four functions to express signatures: strncmp
for case-sensitive comparison, strncasecmp for case-
insensitive comparison, strstr for case-sensitive search,
and strcasestr for case-insensitive search.
Additional data. Table 4 presents the list of 35 MIME
types that Internet Explorer 7 considers as “known” and thus
trigger the content-snifﬁng algorithm. In addition to those
text/plain and application/octet-stream also
trigger the content-snifﬁng algorithm in Internet Explorer 7.
Table 5 presents Content-Type values that the differ-
ent browsers are willing to upgrade to text/html if the
corresponding signature is matched. In the table, Missing
means that the value is absent, Bogus means that the value
lacks a slash, and Known means that the value is in Table 4.
Undocumented
(null)
application/x-cdf
application/x-netcdf
application/xml
image/png
image/x-art
text/scriptlet
text/xml
video/x-msvideo
Documented
application/base64
application/java
application/macbinhex40
application/pdf
application/postscript
application/x-compressed
application/x-gzip-compressed
application/x-msdownload
application/x-zip-compressed
audio/basic
audio/wav
audio/x-aiff
image/bmp
image/gif
image/jpeg
image/pjpeg
image/tiff
image/x-emf
image/x-jg
image/x-png
image/x-wmf
text/html
text/richtext
video/avi
video/mpeg
image/x-xbitmap
Table 4. Mime types that trigger content snifﬁng in
Internet Explorer 7. Mime types text/plain and
application/octet-stream also trigger the
content-snifﬁng algorithm.
Content-Type
Missing
Bogus
Known
*/*
application/
unknown
unknown/
unknown
text/plain
application/
octet-stream
Chrome
yes
yes
no
yes
yes
yes
no
no
IE 7
yes
no
yes
no
no
no
yes
yes
FF 3
yes
yes
no
yes
no
no
no
no
Safari 3.1
yes
no
no
no
no
no
.html
extension
yes
Table 5. Content-Type values that can be upgraded
to text/html. Missing means the value is absent.
Bogus means the value lacks a slash. Known means
the value is in Table 4.
371
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:06 UTC from IEEE Xplore.  Restrictions apply.