### Chameleon Documents and Content-Sniffing Vulnerabilities

Chameleon documents, which Internet Explorer incorrectly identifies as HTML, have been a long-standing security issue. Four years ago, a blog post [2] discussed a JPEG/HTML chameleon. A 2006 full disclosure post [4] described a content-sniffing Cross-Site Scripting (XSS) attack that exploited an incorrect `Content-Type` header. More recently, PNG and PDF chameleons have been used to launch similar attacks [3], [12], [39], [40]. Spammers have also reportedly used such attacks to upload text files containing HTML to open wikis [3]. Many of the example exploits in these references no longer work, suggesting that Internet Explorer's content-sniffing algorithm has evolved over time by adding MIME types to the fast path.

#### JAR URI Scheme Vulnerability

Although not a content-sniffing vulnerability per se, Firefox 2.0.0.9 contained a vulnerability caused by treating one type of content as another. Firefox supports extracting HTML documents from ZIP archives using the `jar` URI scheme. If a site allows an attacker to upload a ZIP archive, the attacker can instruct Firefox to unzip the archive and render the HTML inside [41]. This is further exacerbated by the fact that the ZIP parser is tolerant of malformed archives, allowing attackers to create chameleon ZIP archives that appear to be images. To address this, Firefox now requires specific MIME types for these archives.

### Conclusions

Browser content-sniffing algorithms have long been one of the least-understood aspects of browser security. In this paper, we study content-sniffing XSS attacks and defenses. To understand these attacks, we use string-enhanced white-box exploration and source code inspection to construct high-fidelity models of the content-sniffing algorithms used by Internet Explorer 7, Firefox 3, Safari 3.1, and Google Chrome. We then use these models to construct attacks against two web applications: HotCRP and Wikipedia.

We describe two defenses for these attacks. For websites, we provide a filter based on our models that blocks content-sniffing XSS attacks. To protect sites that do not deploy our filter, we propose two design principles for securing browser content-sniffing algorithms: avoid privilege escalation and use prefix-disjoint signatures. We evaluate the security of these principles in a threat model based on case studies and assess their compatibility using Google’s search database and metrics from over a billion HTTP responses.

We implement a content-sniffing algorithm based on our principles and deploy it to real users in Google Chrome. Our principles have been incorporated into the draft HTML5 specification and partially adopted by Internet Explorer 8. We look forward to continuing to work with browser vendors to converge their content sniffers towards a secure, standardized algorithm.

### Acknowledgements

We would like to thank Stephen McCamant, Rhishikesh Limaye, Susmit Jha, and Sanjit A. Seshia for collaborating in the design of the abstract string syntax. We also thank Darin Adler, Darin Fisher, Ian Hickson, Collin Jackson, Eric Lawrence, and Boris Zbarsky for many helpful discussions on content sniffing. Finally, our thanks to Chris Karlof, Adrian Mettler, and the anonymous reviewers for their insightful comments on this document.

This material is based upon work partially supported by the National Science Foundation under Grants No. 0311808, No. 0448452, No. 0627511, and CCF-0424422, and by the Air Force Office of Scientific Research under MURI Grant No. 22178970-4170. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Air Force Office of Scientific Research or the National Science Foundation.

### References

[1] “Firefox bug 175848,” https://bugzilla.mozilla.org/show_bug.cgi?id=175848.
[19] P. Godefroid, M. Y. Levin, and D. Molnar, “Automated whitebox fuzz testing,” in Proceedings of the Annual Network and Distributed System Security Symposium, San Diego, California, February 2008.
[2] “Getting around Internet Explorer MIME mangling,” http://weblog.philringnalda.com/2004/04/06/getting-around-ies-mime-type-mangling.
[3] “Internet Explorer facilitates XSS,” http://www.splitbrain.org/blog/2007-02/12-internet-explorer-facilitates-cross-site-scripting.
[4] “SMF upload XSS vulnerability,” http://seclists.org/fulldisclosure/2006/Dec/0079.html.
[5] I. Hickson et al., “HTML 5 Working Draft,” http://www.whatwg.org/specs/web-apps/current-work/.
[6] N. Freed and N. Borenstein, “RFC 2045: Multipurpose Internet Mail Extensions (MIME) part one: Format of Internet message bodies,” Nov. 1996.
[7] ——, “RFC 2046: Multipurpose Internet Mail Extensions (MIME) part two: Media types,” Nov. 1996.
[8] K. Moore, “RFC 2047: Multipurpose Internet Mail Extensions (MIME) part three: Message header extensions for non-ASCII text,” Nov. 1996.
[9] “Apache bug 13986,” https://issues.apache.org/bugzilla/show_bug.cgi?id=13986.
[10] “EXIF.org,” http://www.exif.org/.
[11] “Internet Explorer 8 security part V: Comprehensive protection,” http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx.
[12] “Internet Explorer XSS exploit door,” http://tweakers.net/nieuws/47643/internet-explorer-xss-exploit-door-microsoft-betiteld-als-by-design.html.
[13] “Wikipedia,” http://www.wikipedia.org.
[14] “HotCRP conference management software,” http://www.cs.ucla.edu/~kohler/hotcrp/.
[15] “WineHQ,” http://www.winehq.org/.
[16] “MSDN: MIME type detection in Internet Explorer,” http://msdn.microsoft.com/en-us/library/ms775147.aspx.
[17] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler, “EXE: Automatically generating inputs of death,” in Proceedings of the ACM Conference on Computer and Communications Security, Alexandria, Virginia, October 2006.
[20] “MSDN: FindMimeFromData function,” http://msdn.microsoft.com/en-us/library/ms775107(VS.85).aspx.
[21] “The IDA Pro disassembler and debugger,” http://www.hex-rays.com/idapro/.
[22] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A new approach to computer security via binary analysis,” in International Conference on Information Systems Security, Hyderabad, India, December 2008, Keynote invited paper.
[23] J. Caballero, S. McCamant, A. Barth, and D. Song, “Extracting models of security-sensitive operations using string-enhanced white-box exploration on binaries,” EECS Department, University of California, Berkeley, Tech. Rep. UCB/EECS-2009-36, Mar 2009.
[24] V. Ganesh and D. Dill, “A decision procedure for bit-vectors and arrays,” in Proceedings of the Computer Aided Verification Conference, Berlin, Germany, August 2007.
[25] N. Bjorner, N. Tillmann, and A. Voronkov, “Path feasibility analysis for string-manipulating programs,” in Proceedings of the International Conference on Tools and Algorithms for the Construction and Analysis of Systems, York, United Kingdom, March 2009.
[26] P. Hooimeijer and W. Weimer, “A decision procedure for subset constraints over regular languages,” in Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation, Dublin, Ireland, June 2009.
[27] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D. Ernst, “HAMPI: A solver for string constraints,” MIT CSAIL, Tech. Rep. MIT-CSAIL-TR-2009-004, Feb. 2009.
[28] “Microsoft KB945686,” http://support.microsoft.com/kb/945686/.
[29] “Microsoft KB944533,” http://support.microsoft.com/kb/944533.
[30] “Wikipedia image use policy,” http://en.wikipedia.org/wiki/Image_use_policy.
[31] “Fine free file command,” http://darwinsys.com/file/.
[32] “Sites using MediaWiki,” http://www.mediawiki.org/wiki/Sites_using_MediaWiki/en.
[33] A. Barth, C. Jackson, and J. C. Mitchell, “Securing frame communication in browsers,” in Proceedings of the Usenix Security Symposium, San Jose, California, July 2008.
[18] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed automated random testing,” in Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation, Chicago, Illinois, June 2005.
[34] M. Martin and M. S. Lam, “Automatic generation of XSS and SQL injection attacks with goal-directed model checking,” in Proceedings of the USENIX Security Symposium, San Jose, California, July 2008.
[35] “Portable Network Graphics specification, w3c/iso/iec version,” http://www.libpng.org/pub/png/spec/iso/.
[36] J. Dean and S. Ghemawat, “MapReduce: Simplified data processing on large clusters,” in Proceedings of the Sixth Symposium on Operating System Design and Implementation, December 2004.
[37] R. Troost, S. Dorner, and K. Moore, “RFC 2183: Communicating presentation information in Internet messages: The content-disposition header field,” Aug. 1997.
[38] “Internet Explorer 8 security part V: Comprehensive protection,” http://blogs.msdn.com/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx.
[39] “The hazards of MIME sniffing,” http://adblockplus.org/blog/the-hazards-of-mime-sniffing.
[40] “The downside of uploads,” http://www.malevolent.com/weblog/archive/2008/02/26/uploads-mime-sniffing/.
[41] “Mozilla foundation security advisory 2007-37,” http://www.mozilla.org/security/announce/2007/mfsa2007-37.html.

### Appendix

#### Nomenclature

We adopt the following nomenclature to represent signatures precisely. `DATA` is a pointer to a buffer containing the first `n` bytes of the content, where `n` is the size of the content-sniffing buffer for the particular browser. `DATA[x:y]`, where `n > y ≥ x ≥ 0`, is the subsequence of `DATA` beginning at offset `x` and ending at offset `y` (both offsets inclusive). For example, Internet Explorer 7 uses the following signature for `image/jpeg`: `DATA[0:1] == 0xffd8`. To match this signature, an HTTP response must contain at least two bytes, the first byte of the response must be `0xff`, and the second byte must be `0xd8`.

We also use four functions to express signatures:
- `strncmp` for case-sensitive comparison,
- `strncasecmp` for case-insensitive comparison,
- `strstr` for case-sensitive search,
- `strcasestr` for case-insensitive search.

#### Additional Data

**Table 4: MIME Types Triggering Content Sniffing in Internet Explorer 7**

| MIME Type                       | Triggered |
|---------------------------------|-----------|
| (null)                          | Yes       |
| application/x-cdf               | Yes       |
| application/x-netcdf            | Yes       |
| application/xml                 | Yes       |
| image/png                       | Yes       |
| image/x-art                     | Yes       |
| text/scriptlet                  | Yes       |
| text/xml                        | Yes       |
| video/x-msvideo                 | Yes       |
| application/base64              | Yes       |
| application/java                | Yes       |
| application/macbinhex40         | Yes       |
| application/pdf                 | Yes       |
| application/postscript          | Yes       |
| application/x-compressed        | Yes       |
| application/x-gzip-compressed   | Yes       |
| application/x-msdownload        | Yes       |
| application/x-zip-compressed    | Yes       |
| audio/basic                     | Yes       |
| audio/wav                       | Yes       |
| audio/x-aiff                    | Yes       |
| image/bmp                       | Yes       |
| image/gif                       | Yes       |
| image/jpeg                      | Yes       |
| image/pjpeg                     | Yes       |
| image/tiff                      | Yes       |
| image/x-emf                     | Yes       |
| image/x-jg                      | Yes       |
| image/x-png                     | Yes       |
| image/x-wmf                     | Yes       |
| text/html                       | Yes       |
| text/richtext                   | Yes       |
| video/avi                       | Yes       |
| video/mpeg                      | Yes       |
| image/x-xbitmap                 | Yes       |

In addition to the above, `text/plain` and `application/octet-stream` also trigger the content-sniffing algorithm in Internet Explorer 7.

**Table 5: Content-Type Values Upgradable to `text/html`**

| Content-Type           | Missing | Bogus | Known | `.html` Extension |
|------------------------|---------|-------|-------|-------------------|
| */*                    | Yes     | No    | No    | No                |
| application/unknown    | No      | No    | No    | No                |
| unknown/unknown        | No      | Yes   | No    | No                |
| text/plain             | Yes     | No    | No    | Yes               |
| application/octet-stream | Yes     | No    | No    | Yes               |
| Chrome                 | Yes     | Yes   | No    | Yes               |
| IE 7                   | Yes     | No    | Yes   | No                |
| FF 3                   | Yes     | Yes   | No    | No                |
| Safari 3.1             | Yes     | No    | No    | No                |

- **Missing**: The value is absent.
- **Bogus**: The value lacks a slash.
- **Known**: The value is in Table 4.