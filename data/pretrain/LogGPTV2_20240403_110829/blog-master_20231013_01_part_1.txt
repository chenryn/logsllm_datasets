## 沉浸式学习PostgreSQL|PolarDB 21: 相似图像搜索   
### 作者    
digoal    
### 日期    
2023-10-13   
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 相似图像搜索   
传统数据库不支持图像类型, 图像相似计算函数, 图像相似计算操作服, 相似排序操作符. 所以遇到类似的需求, 需要自行编写应用来解决.  
PG|PolarDB 通过imgsmlr插件, 可以将图像转换为向量特征值, 使用相似距离计算函数得到相似值, 使用索引加速相似度排序, 快速获得相似图片, 实现以图搜图.  
也可以通过pgvector插件来存储图片向量特征值, 结合大模型服务(抠图、图像向量转换), 可以实现从图像转换、基于图像的相似向量检索全流程能力.    
### 实现和对照      
#### 传统方法 设计和实验     
无    
#### PolarDB|PG新方法1 设计和实验   
1、下周一些测试图片, 例如使用搜索引擎, 搜索特朗普、马斯克、自行车、摩托车、房子, 分别下载5张. 拷贝到容器中.    
```  
docker cp ~/Downloads/img pg:/tmp/   
cd /tmp  
```  
或者使用我已经下载好的   
```  
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/digoal/blog/raw/master/202310/20231013_01_img_001.zip -o 20231013_01_img_001.zip  
unzip 20231013_01_img_001.zip  
cd /tmp/img  
```  
图片如下:  
```  
root@537879d580a3:/tmp/img# ll  
total 11M  
-rw-r--r-- 1  502 dialout  63K Oct 13 01:17 1.jpeg  
-rw-r--r-- 1  502 dialout  20K Oct 13 01:17 2.jpeg  
-rw-r--r-- 1  502 dialout  53K Oct 13 01:17 3.jpeg  
-rw-r--r-- 1  502 dialout  23K Oct 13 01:18 4.jpeg  
-rw-r--r-- 1  502 dialout  55K Oct 13 01:18 5.jpeg  
-rw-r--r-- 1  502 dialout 140K Oct 13 01:18 6.jpeg  
-rw-r--r-- 1  502 dialout 163K Oct 13 01:19 7.jpeg  
-rw-r--r-- 1  502 dialout 344K Oct 13 01:19 8.png  
-rw-r--r-- 1  502 dialout  51K Oct 13 01:19 9.jpeg  
-rw-r--r-- 1  502 dialout  63K Oct 13 01:19 10.jpeg  
-rw-r--r-- 1  502 dialout 626K Oct 13 01:19 11.jpeg  
-rw-r--r-- 1  502 dialout 864K Oct 13 01:20 12.jpeg  
-rw-r--r-- 1  502 dialout 414K Oct 13 01:20 13.jpeg  
-rw-r--r-- 1  502 dialout 350K Oct 13 01:20 14.jpeg  
-rw-r--r-- 1  502 dialout 1.6M Oct 13 01:20 15.jpeg  
-rw-r--r-- 1  502 dialout  24K Oct 13 01:20 16.jpeg  
-rw-r--r-- 1  502 dialout 708K Oct 13 01:20 17.jpeg  
-rw-r--r-- 1  502 dialout 386K Oct 13 01:20 18.jpeg  
-rw-r--r-- 1  502 dialout 759K Oct 13 01:20 19.jpeg  
-rw-r--r-- 1  502 dialout 906K Oct 13 01:21 20.jpeg  
-rw-r--r-- 1  502 dialout 191K Oct 13 01:21 21.jpeg  
-rw-r--r-- 1  502 dialout 206K Oct 13 01:21 22.jpeg  
-rw-r--r-- 1  502 dialout  78K Oct 13 01:21 23.jpeg  
-rw-r--r-- 1  502 dialout 2.0M Oct 13 01:21 24.jpeg  
-rw-r--r-- 1  502 dialout 421K Oct 13 01:22 25.jpeg  
drwxr-xr-x 2  502 dialout 4.0K Oct 13 01:24 .  
drwxrwxrwt 1 root root    4.0K Oct 13 01:25 ..  
```  
2、创建imgsmlr插件.  https://github.com/postgrespro/imgsmlr  
```  
create extension imgsmlr;  
```  
3、创建测试表, 分别用于存储图片二进制数据, 签名.  
```  
create table img_raw (  
  id int primary key,  -- 图片ID  
  info text,  -- 图片描述  
  ts timestamp,  
  raw bytea  -- 图片二进制  
);  
create table img_vec (  
  id int primary key references img_raw(id),  -- 图片ID  
  patt pattern, -- 图片详细样式  
  sig signature  -- 图片签名  
);  
```  
4、创建图片签名索引, 用于加速相似搜索  
```  
CREATE INDEX on img_vec using gist (sig);  
```  
5、将图片二进制加载到数据库中  
```  
insert into img_raw values (1, 'jpeg,特朗普1', now(), pg_read_binary_file('/tmp/img/1.jpeg'));  
insert into img_raw values (2, 'jpeg,特朗普2', now(), pg_read_binary_file('/tmp/img/2.jpeg'));  
insert into img_raw values (3, 'jpeg,特朗普3', now(), pg_read_binary_file('/tmp/img/3.jpeg'));  
insert into img_raw values (4, 'jpeg,特朗普4', now(), pg_read_binary_file('/tmp/img/4.jpeg'));  
insert into img_raw values (5, 'jpeg,特朗普5', now(), pg_read_binary_file('/tmp/img/5.jpeg'));  
insert into img_raw values (6, 'jpeg,马斯克1', now(), pg_read_binary_file('/tmp/img/6.jpeg'));  
insert into img_raw values (7, 'jpeg,马斯克2', now(), pg_read_binary_file('/tmp/img/7.jpeg'));  
insert into img_raw values (8, 'png,马斯克3', now(), pg_read_binary_file('/tmp/img/8.png'));  
insert into img_raw values (9, 'jpeg,马斯克4', now(), pg_read_binary_file('/tmp/img/9.jpeg'));  
insert into img_raw values (10, 'jpeg,马斯克5', now(), pg_read_binary_file('/tmp/img/10.jpeg'));  
insert into img_raw values (11, 'jpeg,自行车1', now(), pg_read_binary_file('/tmp/img/11.jpeg'));  
insert into img_raw values (12, 'jpeg,自行车2', now(), pg_read_binary_file('/tmp/img/12.jpeg'));  
insert into img_raw values (13, 'jpeg,自行车3', now(), pg_read_binary_file('/tmp/img/13.jpeg'));  
insert into img_raw values (14, 'jpeg,自行车4', now(), pg_read_binary_file('/tmp/img/14.jpeg'));  
insert into img_raw values (15, 'jpeg,自行车5', now(), pg_read_binary_file('/tmp/img/15.jpeg'));  
insert into img_raw values (16, 'jpeg,摩托车1', now(), pg_read_binary_file('/tmp/img/16.jpeg'));  
insert into img_raw values (17, 'jpeg,摩托车2', now(), pg_read_binary_file('/tmp/img/17.jpeg'));  
insert into img_raw values (18, 'jpeg,摩托车3', now(), pg_read_binary_file('/tmp/img/18.jpeg'));  
insert into img_raw values (19, 'jpeg,摩托车4', now(), pg_read_binary_file('/tmp/img/19.jpeg'));  
insert into img_raw values (20, 'jpeg,摩托车5', now(), pg_read_binary_file('/tmp/img/20.jpeg'));  
insert into img_raw values (21, 'jpeg,房子1', now(), pg_read_binary_file('/tmp/img/21.jpeg'));  
insert into img_raw values (22, 'jpeg,房子2', now(), pg_read_binary_file('/tmp/img/22.jpeg'));  
insert into img_raw values (23, 'jpeg,房子3', now(), pg_read_binary_file('/tmp/img/23.jpeg'));  
insert into img_raw values (24, 'jpeg,房子4', now(), pg_read_binary_file('/tmp/img/24.jpeg'));  
insert into img_raw values (25, 'jpeg,房子5', now(), pg_read_binary_file('/tmp/img/25.jpeg'));  
```  
6、将图片转换为patt和sig写入img_vec表.  
```  
insert into img_vec select id, jpeg2pattern(raw), pattern2signature(jpeg2pattern(raw)) from img_raw where id<>8;  
insert into img_vec select id, png2pattern(raw), pattern2signature(png2pattern(raw)) from img_raw where id=8;  
```  
7、根据图片搜索相似图片, 例如根据图片5(特朗普5), 搜索与他相似的图片.   
用到的操作符:  
Operator	| Left type	| Right type	| Return type	| Description  
---|---|---|---|---  