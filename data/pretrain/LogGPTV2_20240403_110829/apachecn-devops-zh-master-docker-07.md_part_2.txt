我们要做的第一件事是将令牌设置为环境变量，这样我们就不必一直使用它。为此，请运行以下命令，确保用您自己的令牌替换 API 令牌:
```
$ DOTOKEN=0cb54091fecfe743920d0e6d28a29fe325b9fc3f2f6fccba80ef4b26d41c7224
```
Due to the additional flags that we need to pass to the Docker Machine command, I will be using `\` to split the command across multiple lines to make it more readable.
要启动名为`docker-digtialocean`的 Docker 主机，我们需要运行以下命令:
```
$ docker-machine create \
 --driver digitalocean \ --digitalocean-access-token $DOTOKEN \ docker-digitalocean
```
由于 Docker 主机是一台远程机器，启动、配置和访问需要一点时间。从以下输出可以看出，Docker Machine 引导 Docker 主机的方式也有一些变化:
```
Running pre-create checks...
Creating machine...
(docker-digitalocean) Creating SSH key...
(docker-digitalocean) Creating Digital Ocean droplet...
(docker-digitalocean) Waiting for IP address to be assigned to the Droplet...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with ubuntu(systemd)...
Installing Docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker-digitalocean
```
一旦启动，您应该能够在数字海洋控制面板中看到 Docker 主机:
![](img/bfffcab0-e5f0-466c-ad23-16bee375745f.png)
通过运行以下命令，重新配置本地客户端以连接到远程主机:
```
$ eval $(docker-machine env docker-digitalocean)
```
另外，您可以运行`docker version`和`docker-machine inspect docker-digitalocean`来了解更多关于 Docker 主机的信息。
最后，运行`docker-machine ssh docker-digitalocean`将把你 SSH 到主机中。从以下输出以及首次启动 Docker 主机时的输出中可以看出，所使用的操作系统有所不同:
![](img/cb1e120a-b732-47be-a345-353509316d83.png)
可以通过运行`exit`退出远程 shell。如您所见，我们不必告诉 Docker Machine 使用哪个操作系统、Docker 主机的大小，甚至不必告诉它在哪里启动。这是因为每个驱动程序都有一些非常合理的默认值。将这些默认值添加到我们的命令中使其看起来如下所示:
```
$ docker-machine create \
 --driver digitalocean \
 --digitalocean-access-token $DOTOKEN \
 --digitalocean-image ubuntu-16-04-x64 \
 --digitalocean-region nyc3 \
 --digitalocean-size 512mb \
 --digitalocean-ipv6 false \
 --digitalocean-private-networking false \
 --digitalocean-backups false \
 --digitalocean-ssh-user root \
 --digitalocean-ssh-port 22 \
 docker-digitalocean
```
如您所见，您可以自定义大小、区域和操作系统，甚至 Docker 主机启动时使用的网络。假设我们想改变操作系统和液滴的大小。在这种情况下，我们可以运行以下命令:
```
$ docker-machine create \
 --driver digitalocean \
 --digitalocean-access-token $DOTOKEN \
 --digitalocean-image ubuntu-18-04-x64 \
 --digitalocean-size 1gb \
 docker-digitalocean
```
正如您在 DigitalOcean 控制面板中看到的，这将启动一台类似如下的机器:
![](img/766a16c6-50f5-4439-b972-9aa69d25de4b.png)
您可以通过运行以下命令来删除数字海洋 Docker 主机:
```
$ docker-machine rm docker-digitalocean
```
# 使用其他基本操作系统
您不必使用 Docker Machine 的默认操作系统；它确实为其他基本操作系统提供了资源，包括那些面向运行容器的系统。在我们完成这一章之前，我们将看看如何启动其中的一个，CoreOS。
我们要看的发行版有足够的操作系统来运行内核、网络栈和容器，就像 Docker 自己的 MobyOS 一样，它被用作 Mac 的 Docker 和 Windows 的 Docker 的基础。
虽然 CoreOS 支持自己的容器运行时，称为 RKT(发音为火箭)，但它也附带 Docker。然而，正如我们将看到的那样，目前与稳定版本的 CoreOS 一起发布的 Docker 版本有点过时了。
要启动数字海洋管理的`coreos-stable`版本，运行以下命令:
```
$ docker-machine create \
 --driver digitalocean \
 --digitalocean-access-token $DOTOKEN \
 --digitalocean-image coreos-stable \
 --digitalocean-size 1GB \
 --digitalocean-ssh-user core \
 docker-coreos
```
就像在公共云上启动我们的其他 Docker 主机一样，输出几乎是一样的。您会注意到 Docker Machine 使用了 CoreOS 置备程序:
```
Running pre-create checks...
Creating machine...
(docker-coreos) Creating SSH key...
(docker-coreos) Creating Digital Ocean droplet...
(docker-coreos) Waiting for IP address to be assigned to the Droplet...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with coreOS...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker-coreos
```
启动后，您可以运行以下程序:
```
$ docker-machine ssh docker-coreos cat /etc/*release
```
这将返回`release`文件的内容:
```
DISTRIB_ID="Container Linux by CoreOS"
DISTRIB_RELEASE=1800.7.0
DISTRIB_CODENAME="Rhyolite"
DISTRIB_DESCRIPTION="Container Linux by CoreOS 1800.7.0 (Rhyolite)"
NAME="Container Linux by CoreOS"
ID=coreos
VERSION=1800.7.0
VERSION_ID=1800.7.0
BUILD_ID=2018-08-15-2254
PRETTY_NAME="Container Linux by CoreOS 1800.7.0 (Rhyolite)"
ANSI_COLOR="38;5;75"
HOME_URL="https://coreos.com/"
BUG_REPORT_URL="https://issues.coreos.com"
COREOS_BOARD="amd64-usr"
```
运行以下内容将向您展示运行在 CoreOS 主机上的 Docker 版本的更多信息:
```
$ docker $(docker-machine config docker-coreos) version
```
您可以从以下输出中看到这一点；此外，正如已经提到的，它是当前版本的背后:
![](img/1717210e-d830-4cab-bb21-092e16c042fc.png)
这意味着，我们在本书中使用的命令可能并不都有效。要删除 CoreOS 主机，请运行以下命令:
```
$ docker-machine rm docker-coreos
```
# 摘要
在本章中，我们了解了如何使用 Docker Machine 在 VirtualBox 上本地创建 Docker 主机，并回顾了可以用来与 Docker Machine 启动的 Docker 主机进行交互和管理的命令。
然后，我们研究了如何使用 Docker Machine 将 Docker 主机部署到您的云环境，即数字海洋。最后，我们快速了解了如何启动一个不同的容器优化的 Linux 操作系统，它就是 CoreOS。
我相信你会同意使用 Docker Machine 来运行这些任务，它们通常有非常不同的方法，非常一致的体验，并且从长远来看，这将节省大量时间以及解释。
在下一章中，我们将从与单个 Docker 主机交互转向启动和运行 Docker Swarm 集群。
# 问题
1.  运行`docker-machine create`时，哪个标志让您定义 Docker Machine 使用哪个服务或提供商来启动您的 Docker 主机？
2.  对还是错:运行`docker-machine env my-host`将重新配置您的本地 Docker 客户端与`my-host`交互？
3.  解释 Docker Machine 背后的基本原理。
# 进一步阅读
有关 Docker Machine 支持的各种平台的信息，请参考以下内容:
*   亚马逊网络服务:[https://aws.amazon.com/](https://aws.amazon.com/)
*   微软 Azure:[https://azure.microsoft.com/](https://azure.microsoft.com/)
*   数字海洋:[https://www . digital ocean . com/](https://www.digitalocean.com/)
*   系外鳞片:[https://www.exoscale.ch/](https://www.exoscale.ch/)
*   谷歌计算引擎:[https://cloud.google.com/](https://cloud.google.com/)
*   rackspace:[https://www.rackspace.com/](https://www.rackspace.com/)
*   IBM soft layer:https://www . soft layer . com/
*   微软 Hyper-V:[https://www . Microsoft . com/en-GB/云平台/服务器-虚拟化/](https://www.microsoft.com/en-gb/cloud-platform/server-virtualization/)
*   open stack:[https://www.openstack.org/](https://www.openstack.org/)
*   VMware 虚拟圈:[https://www.vmware.com/uk/products/vsphere.html](https://www.vmware.com/uk/products/vsphere.html)
*   甲骨文虚拟盒子:[https://www.virtualbox.org/](https://www.virtualbox.org/)
*   VMware Fusion:[https://www.vmware.com/uk/products/fusion.html](https://www.vmware.com/uk/products/fusion.html)
*   VMware 工作站:[https://www.vmware.com/uk/products/workstation.html](https://www.vmware.com/uk/products/workstation.html)
*   韩文: [https://coreos.com/](https://coreos.com/)