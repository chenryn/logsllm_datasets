Over the course of approximately one year, we capture un-
encrypted 802.11 device traﬃc using inexpensive commodity
hardware and open-source software. We primarily use an LG
Nexus 5 Android phone running Kismet PcapCapture paired
with an AWUS036H 802.11b/g Alfa card. We hop between
the 2.4GHz channels 1, 6, and 11 to maximize coverage.
We additionally employ several Raspberry Pi devices run-
ning Kismet with individual wireless cards each dedicated
to channels 1, 6, and 11. Our corpus spans January 2015
to May 2016 and encompasses approximately 9,000 individ-
ual packet captures. The collection contains over 600 giga-
bytes (GBs) of 802.11 traﬃc, consisting of over 2.8 million
unique devices across a spectrum of IoT devices.
3.1 Ethical Considerations
Our collection methodology is entirely passive. At no time
did we attempt to decrypt any data, or perform active ac-
tions to stimulate or alter normal network behavior. Our
intent is to show the ease with which one can build a simi-
lar capability to that in this paper with low-cost oﬀ-the-shelf
equipment. However, given the nature of our data collection,
we consulted with our Institutional Review Board (IRB).
The primary concerns of the IRB centered on: i) the in-
formation collected; and ii) whether the experiment collects
data “about whom” or “about what.” Because we limit our
collection to 802.11 management frames, mDNS, and other
layer-2 discovery protocols, we do not observe Personally
Identiﬁable Information (PII). Although we observe IP ad-
dresses, our experiment does not use these layer-3 addresses.
Even with an IP address, we have no reasonable way to map
the address to an individual. Further, humans are incidental
to our experimentation as our interest is in the assignment
of wireless device layer-2 MAC addresses, or “what.” Again,
we have no way to map MAC addresses to individuals.
Finally, in consideration of beneﬁcence and respect for
persons, our work presents no expectation of harm, while
the concomitant opportunity for network measurement and
security provides a societal beneﬁt. Our experiment was
therefore determined to not be human subject research.
3.2 Building the Database
Algorithm 1 provides high-level pseudocode of our pro-
cedure to build a database that maps MAC addresses to
various device models (along with available meta-data). For
802.11 management frames, we ﬁnd those that contain WPS.
80
Table 3: Passively Collected Corpus Statistics
3.25
6.53
50.98
†1.41
0.04
0.12
5.79
4.86
28.4
Count
%
67,086,700
134,639,147
1,051,269,586
29,121,890
Frame
Management
- Probe Requests
- Probe Responses
- Beacons
- w/ WPS
Data
- mDNS w/dns.txt packets
- mDNS packets
- Unencrypted data packets (not mDNS)
- Encrypted
Other
- Control & Unused Management Frames
Total
100.00
†WPS frames are an inclusive subset of listed Management Frames
806,954
2,503,800
119,328,932
100,191,115
586,406,377
2,062,232,611
We treat locally-assigned MAC addresses specially, as de-
scribed in §3.2.1. Otherwise, we store the source MAC
in a database with the frame’s advertised WPS manufac-
turer, model_name, model_number, and device_name ﬁeld
values. Additionally, we store the frame’s advertised pri-
mary_device_type.category and subcategory ﬁelds. A full
enumeration of WPS device data is available in [29].
If WPS information is not available, we utilize mDNS. We
parse mDNS packets for model identiﬁcation key-value pairs
(§2.3). If successful, we insert the source address and model
string into the database, along with the device’s common
name derived via public resources [14, 21]. Devices are in a
connected state when implementing mDNS, and as such are
only observed using globally unique addresses.
mDNS, due to its inherent nature as a zero conﬁguration
Local Area Network (LAN) protocol requires the device to
be in an authenticated and associated state. Hence, the
mDNS data we collect is limited to those devices that were
connected to an open 802.11 network. Our collection of
mDNS is thus considerably smaller, allowing inference of
only 10,525 devices as compared to 276,000 for WPS.
3.2.1 Locally Assigned MACs
Many devices, at one point or another, will use a locally
assigned MAC address for P2P communication, hotspot mode,
VLANs, or MAC address privacy.
• Privacy: We observe devices randomizing their MAC
addresses when not associated with a WiFi network – the
Motorola Nexus 6 and Huawei Nexus 6P, for example, switch
to a predetermined local OUI while randomizing the lower
three bytes. Regardless of the implementation details, many
devices continue to send probe requests containing WPS
information using this random, locally assigned MAC ad-
dress. Using the method described in [27], we obtain the
globally unique MAC via a pre-computed lookup table of
the device’s Universally Unique IDentiﬁer-Enrollee (UUID-E),
found in the WPS uuid_e ﬁeld.
• P2P: We identify devices oﬀering P2P capabilities via
beacon frames that contain special extension tags (9 for
WiFi-Direct and 10 for WiFi-Display [29]). We gather the
source address of the device, the P2P.device_id (the locally
assigned P2P MAC), the vendor extension tags, and Ser-
vice Set IDentiﬁer (SSID) advertised in the beacon frame.
The SSID, while oftentimes user-conﬁgurable, generally de-
faults to a string identifying the manufacturer or model of
the device to aid the user in discovering their WiFi-Direct
devices. Last, we ﬁnd the advertised device_name, a ﬁeld
that generally contains descriptive device information (a
81
Table 4: WPS-Based Device Category
Total Number
Device Category
PC
Notebook
Amazon Tablets
Input Device - Mouse
Printer
Camera
Access Point
Television/Display
Multimedia Device
Smart phone
Audio Devices - Music Player
Gaming Systems
6803
11
2240
1
2501
596
219796
326
287
36361
1
101
TV may advertise its model number, while a Roku media
device provides a descriptive string).
• Apple hotspots: Apple APs and devices acting as
hotspots can be identiﬁed by the use of a standardized Ven-
dor Speciﬁc wlan_mgt.tag.oui ﬁeld (0x0017F2 for Apple).
The tag.oui.type subﬁeld is used to diﬀerentiate between
traditional APs (e.g., AirPort models) and client devices
operating in hotspot mode, which advertise service using a
locally assigned MAC address. Although beacon and probe
frames from these devices do not contain model informa-
tion, the OUI of the global MAC address is transmitted
in a subﬁeld of the Vendor Speciﬁc OUI ﬁeld. We replace
the locally assigned OUI used in hotspot mode with the
derived OUI in order to identify the device’s actual global
MAC address.
3.3 Predicting Models from MACs
Using 802.11 management frames and unencrypted mDNS
packets, we build a database that maps MAC addresses to
a device manufacturer and model. To make an inference for
an unknown device, we simply query the database for all
known results that match at least the OUI of the device in
question. We then perform a lexicographical comparison of
the results to ﬁnd the closest matching manufacturer and
device. Further, we show the absolute distance between the
two MAC addresses is a useful measure (§4.4). While simple,
the size and coverage of our database allows us to make
accurate inferences as we show next.
4. RESULTS AND ANALYSIS
In this section, we ﬁrst present a broad overview of our
802.11 corpus and then analyze the allocation of MAC ad-
dresses by vendors, highlighting common practices and ex-
ceptions. Next, we validate our inference methodology against
both a ground-truth set of devices as well as a third-party
public data capture. We conclude with a 5-fold cross-validation
test, using our own dataset to evaluate the eﬀectiveness of
our closest match methodology.
4.1
802.11 Corpus Statistics
As summarized in Table 3, our dataset contains over two
billion 802.11 frames, of which approximately half are bea-
cons. Probe requests and responses together comprise ap-
proximately 200M frames, of which approximately 15% con-
tain WPS data. Considering only globally-unique MAC
addresses, we observe 49,428 total client MAC addresses
(distinguished by the device sending a probe request) using
WPS, and 833,670 clients not implementing WPS. Among
APs (or client devices acting as APs, e.g., hotspots), sending
probe response or beacon frames we observe 227,428 distinct
Table 5: Top 10 Manufacturers - Clients
Indicates Strong/Weak WPS Inference Capability
WPS
LGE
Ralink
Motorola
HTC
Prosoft
Amazon
Huawei
Asus
ZTE
Alco
Other
Count
11,184
4,279
3,260
3,256
2,234
2,222
1,905
1,659
1,619
1,036
16,859
%
22.60
8.64
6.58
6.57
4.50
4.49
3.83
3.34
3.25
2.10
34.10
non-WPS
Apple
Samsung
Murata
Intel
HP
Microsoft
Ezurio
Epson
Lexmark
Sonos
Other
Count
231,214
48,617
48,246
25,734
15,287
13,949
12,385
6,839
5,289
4,542
109,271
%
44.36
9.33
9.26
4.95
2.94
2.68
2.38
1.32
1.01
.09
20.96
Table 6: Top 10 Manufacturers - APs
Indicates Strong/Weak WPS Inference Capability
WPS
Netgear
Cisco
Linksys
Technicolor
Belkin
Arris
ASUSTek
Actiontec
Dlink
Broadcom
Other
Count
58,302
31,978
22,440
19,295
12,896
7,913
7,770
7,163
5,729
5,615
48,327
%
25.64
14.06
9.87
8.48
5.67
3.48
3.42
3.15
2.52
2.47
21.24
non-WPS
Cisco
Ericsson
Apple
Actiontec
Ruckus
HP
Aruba
Ubiquiti
Cisco-Linksys
Mitsumi
Other
Count
73,144
46,110
40,105
39,350
33,858
27,600
23,429
18,126
15,778
12,523
264,483
%
12.30
7.76
6.75
6.62
5.70
4.64
3.94
3.05
2.65
2.10
44.49
MAC addresses whose frames include WPS data, and 1.79M
without. Interestingly, some devices were observed includ-
ing WPS data in some management frames, but at other
times, not. 5,711 distinct client MAC addresses transmitted
at least one management frame with WPS ﬁelds and at least
one without; 204,353 unique AP MAC addresses fell into the
same category. This behavior is common in APs that use
WPS in probe responses, but not beacons.
WPS contains ﬁelds for the manufacturer to specify the
general device category (e.g., PC, camera, etc.), allowing
us to roughly characterize the population as summarized in
Table 4. However, the device category advertised in WPS
ﬁelds can be unintuitive or incorrect. For example, the Mi-
crosoft Xbox One gaming system sends “Ralink” in the cor-