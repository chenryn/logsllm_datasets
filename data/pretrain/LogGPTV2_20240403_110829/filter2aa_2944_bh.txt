        var subject = claims.getSubject();                    
        var token = new Token(expiry, subject);               
        String scope;                                 
        try {                                         
            scope = claims.getStringClaim("scope");   
        } catch (ParseException e) {                  
            scope = String.join(" ",                  
                claims.getStringListClaim("scope"));  
        }                                             
        token.attributes.put("scope", scope);         
        return Optional.of(token);
    } catch (ParseException | BadJOSEException | JOSEException e) {
        return Optional.empty();
    }
}
CHOOSING A SIGNATURE ALGORITHM
The JWS standard that JWT uses for signatures supports many different public key sig-
nature algorithms, summarized in table 7.2. Because public key signature algorithms
are expensive and usually limited in the amount of data that can be signed, the con-
tents of the JWT is first hashed using a cryptographic hash function and then the hash
value is signed. JWS provides variants for different hash functions when using the
Listing 7.12
Validating signed JWT access tokens
Verify the 
signature 
first.
Ensure the 
issuer and 
audience have 
expected values.
Extract the JWT 
subject and 
expiry time.
The scope may be 
either a string or 
an array of strings.
255
Validating an access token
same underlying signature algorithm. All the allowed hash functions provide ade-
quate security, but SHA-512 is the most secure and may be slightly faster than the
other choices on 64-bit systems. The exception to this rule is when using ECDSA sig-
natures, because JWS specifies elliptic curves to use along with each hash function;
the curve used with SHA-512 has a significant performance penalty compared with the
curve used for SHA-256.
 Of these choices, the best is EdDSA, based on the Edwards Curve Digital Signature
Algorithm (https://tools.ietf.org/html/rfc8037). EdDSA signatures are fast to pro-
duce and verify, produce compact signatures, and are designed to be implemented
securely against side-channel attacks. Not all JWT libraries or AS software supports
EdDSA signatures yet. The older ECDSA standard for elliptic curve digital signatures
has wider support, and shares some of the same properties as EdDSA, but is slightly
slower and harder to implement securely. 
WARNING
ECDSA signatures require a unique random nonce for each signa-
ture. If a nonce is repeated, or even just a few bits are not completely random,
then the private key can be reconstructed from the signature values. This
kind of bug was used to hack the Sony PlayStation 3, steal Bitcoin cryptocur-
rency from wallets on Android mobile phones, among many other cases.
Deterministic ECDSA signatures (https://tools.ietf.org/html/rfc6979) can be
used to prevent this, if your library supports them. EdDSA signatures are also
immune to this issue.
RSA signatures are expensive to produce, especially for secure key sizes (a 3072-bit
RSA key is roughly equivalent to a 256-bit elliptic curve key or a 128-bit HMAC key)
and produce much larger signatures than the other options, resulting in larger JWTs.
Table 7.2
JWS signature algorithms
JWS Algorithm
Hash function
Signature algorithm
RS256
SHA-256
RSA with PKCS#1 v1.5 padding
RS384
SHA-384
RS512
SHA-512
PS256
SHA-256
RSA with PSS padding
PS384
SHA-384
PS512
SHA-512
ES256
SHA-256
ECDSA with the NIST P-256 curve
ES384
SHA-384
ECDSA with the NIST P-384 curve
ES512
SHA-512
ECDSA with the NIST P-521 curve
EdDSA
SHA-512 / SHAKE256
EdDSA with either the Ed25519 or Ed448 curves
256
CHAPTER 7
OAuth2 and OpenID Connect
On the other hand, RSA signatures can be validated very quickly. The variants of RSA
using PSS padding should be preferred over those using the older PKCS#1 version 1.5
padding but may not be supported by all libraries.
7.4.5
Encrypted JWT access tokens
In chapter 6, you learned that authenticated encryption can be used to provide the
benefits of encryption to hide confidential attributes and authentication to ensure
that a JWT is genuine and has not been tampered with. Encrypted JWTs can be useful
for access tokens too, because the AS may want to include attributes in the access
token that are useful for the API for making access control decisions, but which
should be kept confidential from third-party clients or from the user themselves. For
example, the AS may include the resource owner’s email address in the token for use
by the API, but this information should not be leaked to the third-party client. In this
case the AS can encrypt the access token JWT by using an encryption key that only the
API can decrypt.
 Unfortunately, none of the public key encryption algorithms supported by the
JWT standards provide authenticated encryption,10 because this is less often imple-
mented for public key cryptography. The supported algorithms provide only confi-
dentiality and so must be combined with a digital signature to ensure the JWT is not
tampered with or forged. This is done by first signing the claims to produce a signed
JWT, and then encrypting that signed JWT to produce a nested JOSE structure (fig-
ure 7.9). The downside is that the resulting JWT is much larger than it would be if it
was just signed and requires two expensive public key operations to first decrypt the
outer encrypted JWE and then verify the inner signed JWT. You shouldn’t use the same
key for encryption and signing, even if the algorithms are compatible.
 The JWE specifications include several public key encryption algorithms, shown in
table 7.3. The details of the algorithms can be complicated, and several variations are
included. If your software supports it, it’s best to avoid the RSA encryption algorithms
entirely and opt for ECDH-ES encryption. ECDH-ES is based on Elliptic Curve Diffie-
Hellman key agreement, and is a secure and performant choice, especially when used
with the X25519 or X448 elliptic curves (https://tools.ietf.org/html/rfc8037), but
these are not yet widely supported by JWT libraries.
10
I have proposed adding public key authenticated encryption to JOSE and JWT, but the proposal is still a draft
at this stage. See http://mng.bz/oRGN.
257
Validating an access token
WARNING
Most of the JWE algorithms are secure, apart from RSA1_5 which
uses the older PKCS#1 version 1.5 padding algorithm. There are known
attacks against this algorithm, so you should not use it. This padding mode
was replaced by Optimal Asymmetric Encryption Padding (OAEP) that was
Table 7.3
JOSE public key encryption algorithms
JWE Algorithm
Details
Comments
RSA1_5
RSA with PKCS#1 v1.5 padding
This mode is insecure and should 
not be used.
RSA-OAEP
RSA with OAEP padding using SHA-1
OAEP is secure but RSA decryption 
is slow, and encryption produces 
large JWTs.
RSA-OAEP-256
RSA with OAEP padding using SHA-256
ECDH-ES
Elliptic Curve Integrated Encryption 
Scheme (ECIES)
A secure encryption algorithm but 
the epk header it adds can be bulky. 
Best when used with the X25519 or 
X448 curves.
ECDH-ES+A128KW
ECDH-ES with an extra AES key-wrapping 
step
ECDH-ES+A192KW
ECDH-ES+A256KW
{"sub":"alice","iss":"https://as.example.com",...}
ES256
eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIi...
ECDH-ES
eyJ0eXAiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjo...
Use separate keys for
signing vs. encryption.
The JWT is ﬁrst
signed . . .
. . . and then
encrypted.
Figure 7.9
When using public key cryptography, a JWT needs to be first signed and then 
encrypted to ensure confidentiality and integrity as no standard algorithm provides both 
properties. You should use separate keys for signing and encryption even if the algorithms 
are compatible.
258
CHAPTER 7
OAuth2 and OpenID Connect
standardized in version 2 of PKCS#1. OAEP uses a hash function internally, so
there are two variants included in JWE: one using SHA-1, and one using SHA-
256. Because SHA-1 is no longer considered secure, you should prefer the
SHA-256 variant, although there are no known attacks against it when used
with OAEP. However, even OAEP has some downsides because it’s a compli-
cated algorithm and less widely implemented. RSA encryption also pro-
duces larger ciphertext than other modes and the decryption operation is
very slow, which is a problem for an access token that may need to be
decrypted many times.
7.4.6
Letting the AS decrypt the tokens
An alternative to using public key signing and encryption would be for the AS to
encrypt access tokens with a symmetric authenticated encryption algorithm, such as
the ones you learned about in chapter 6. Rather than sharing this symmetric key with
every API, they instead call the token introspection endpoint to validate the token
rather than verifying it locally. Because the AS does not need to perform a database
lookup to validate the token, it may be easier to horizontally scale the AS in this case
by adding more servers to handle increased traffic. 
 This pattern allows the format of access tokens to change over time because only
the AS validates tokens. In software engineering terms, the choice of token format is
encapsulated by the AS and hidden from resource servers, while with public key
signed JWTs, each API knows how to validate tokens, making it much harder to change
the representation later. More sophisticated patterns for managing access tokens for
microservice environments are covered in part 4.
7.5
Single sign-on
One of the advantages of OAuth2 is the ability to centralize authentication of users at
the AS, providing a single sign-on (SSO) experience (figure 7.10). When the user’s cli-
ent needs to access an API, it redirects the user to the AS authorization endpoint to
get an access token. At this point the AS authenticates the user and asks for consent
for the client to be allowed access. Because this happens within a web browser, the AS
typically creates a session cookie, so that the user does not have to login again.
 If the user then starts using a different client, such as a different web application,
they will be redirected to the AS again. But this time the AS will see the existing session
Pop quiz
8
Which key is used to validate a public key signature?
a
The public key
b
The private key
The answer is at the end of the chapter.
259
Single sign-on
cookie and won’t prompt the user to log in. This even works for mobile apps from dif-
ferent developers if they are installed on the same device and use the system browser
for OAuth flows, as recommended in section 7.3. The AS may also remember which
scopes a user has granted to clients, allowing the consent screen to be skipped when a
user returns to that client. In this way, OAuth can provide a seamless SSO experience
for users replacing traditional SSO solutions. When the user logs out, the client can
revoke their access or refresh token using the OAuth token revocation endpoint,
which will prevent further access.
WARNING
Though it might be tempting to reuse a single access token to pro-
vide access to many different APIs within an organization, this increases the
risk if a token is ever stolen. Prefer to use separate access tokens for each dif-
ferent API.
Authorization server
API
API
Web browser client
Mobile app client
API
API
API
API
Token introspection
Token introspection
Authenticate
Clients can delegate to
the AS to authenticate the
user and manage tokens.
APIs can all call a single
endpoint on the AS to
validate access tokens.
If the user has an existing
session with the AS, then they
don’t need to log in again to
approve a new access token.
Figure 7.10
OAuth2 enables single sign-on for users. As clients delegate to the 
AS to get access tokens, the AS is responsible for authenticating all users. If the 
user has an existing session with the AS, then they don’t need to be authenticated 
again, providing a seamless SSO experience.
260
CHAPTER 7
OAuth2 and OpenID Connect
7.6
OpenID Connect
OAuth can provide basic SSO functionality, but the primary focus is on delegated
third-party access to APIs rather than user identity or session management. The OpenID
Connect (OIDC) suite of standards (https://openid.net/developers/specs/) extend
OAuth2 with several features:
 A standard way to retrieve identity information about a user, such as their name,
email address, postal address, and telephone number. The client can access a
UserInfo endpoint to retrieve identity claims as JSON using an OAuth2 access
token with standard OIDC scopes.
 A way for the client to request that the user is authenticated even if they have an
existing session, and to ask for them to be authenticated in a particular way,
such as with two-factor authentication. While obtaining an OAuth2 access token
may involve user authentication, it’s not guaranteed that the user was even pres-
ent when the token was issued or how recently they logged in. OAuth2 is primar-
ily a delegated access protocol, whereas OIDC provides a full authentication
protocol. If the client needs to positively authenticate a user, then OIDC should
be used.
 Extensions for session management and logout, allowing clients to be notified
when a user logs out of their session at the AS, enabling the user to log out of all
clients at once (known as single logout).
Although OIDC is an extension of OAuth, it rearranges the pieces a bit because the
API that the client wants to access (the UserInfo endpoint) is part of the AS itself (fig-
ure 7.11). In a normal OAuth2 flow, the client would first talk to the AS to obtain an
access token and then talk to the API on a separate resource server. 
DEFINITION
In OIDC, the AS and RS are combined into a single entity known
as an OpenID Provider (OP). The client is known as a Relying Party (RP).
The most common use of OIDC is for a website or app to delegate authentication to a
third-party identity provider. If you’ve ever logged into a website using your Google or
Facebook account, you’re using OIDC behind the scenes, and many large social media
companies now support this.
7.6.1
ID tokens
If you follow the OAuth2 recommendations in this chapter, then finding out who a
user is involves three roundtrips to the AS for the client:
1
First, the client needs to call the authorization endpoint to get an authorization
code.
2
Then the client exchanges the code for an access token.
3
Finally, the client can use the access token to call the UserInfo endpoint to
retrieve the identity claims for the user.
261
OpenID Connect
This is a lot of overhead before you even know the user’s name, so OIDC provides a
way to return some of the identity and authentication claims about a user as a new
type of token known as an ID token, which is a signed and optionally encrypted JWT.
This token can be returned directly from the token endpoint in step 2, or even
directly from the authorization endpoint in step 1, in a variant of the implicit flow.
There is also a hybrid flow in which the authorization endpoint returns an ID token
directly along with an authorization code that the client can then exchange for an
access token. 
DEFINITION
An ID token is a signed and optionally encrypted JWT that con-
tains identity and authentication claims about a user.
To validate an ID token, the client should first process the token as a JWT, decrypting
it if necessary and verifying the signature. When a client registers with an OIDC pro-
vider, it specifies the ID token signing and encryption algorithms it wants to use and
can supply public keys to be used for encryption, so the client should ensure that the
Authorization server
API
Client
Authorization server
UserInfo API
Client
In normal OAuth, there are
three entities involved.
In OpenID Connect, the
client is accessing the
UserInfo endpoint on
the AS itself.
Figure 7.11
In OpenID Connect, the client accesses APIs on the AS itself, 
so there are only two entities involved compared to the three in normal OAuth. 
The client is known as the Relying Party (RP), while the combined AS and API 
is known as an OpenID Provider (OP).
262
CHAPTER 7
OAuth2 and OpenID Connect
received ID token uses these algorithms. The client should then verify the standard
JWT claims in the ID token, such as the expiry, issuer, and audience values as
described in chapter 6. OIDC defines several additional claims that should also be ver-
ified, described in table 7.4.
When requesting authentication, the client can use extra parameters to the authoriza-
tion endpoint to indicate how the user should be authenticated. For example, the
max_time parameter can be used to indicate how recently the user must have authen-
ticated to be allowed to reuse an existing login session at the OP, and the acr_values
parameter can be used to indicate acceptable authentication levels of assurance. The
prompt=login parameter can be used to force reauthentication even if the user has an
existing session that would satisfy any other constraints specified in the authentication
request, while prompt=none can be used to check if the user is currently logged in
without authenticating them if they are not.
WARNING
Just because a client requested that a user be authenticated in a
certain way does not mean that they will be. Because the request parameters
are exposed as URL query parameters in a redirect, the user could alter them
to remove some constraints. The OP may not be able to satisfy all requests for
other reasons. The client should always check the claims in an ID token to
make sure that any constraints were satisfied.
Table 7.4
ID token standard claims
Claim
Purpose
Notes
azp
Authorized Party
An ID token can be shared with more than one party and so 
have multiple values in the audience claim. The azp claim 
lists the client the ID token was initially issued to. A client 
directly interacting with an OIDC provider should verify that 
it’s the authorized party if more than one party is in the 
audience.
auth_time
User authentication time