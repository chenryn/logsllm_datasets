title:Verified Contributive Channel Bindings for Compound Authentication
author:Karthikeyan Bhargavan and
Antoine Delignat-Lavaud and
Alfredo Pironti
A formal analysis of channel bindings: To systematically
evaluate various channel binding proposals and discover new
attacks automatically, we model a series of compound authen-
tication protocols in the applied pi calculus [17] and analyze
them with the protocol analyzer ProVerif [18].
We formalize the general security goals of compound
authentication, propose a powerful threat model, and analyze
various protocols built using TLS and SSH. Our formal anal-
ysis automatically ﬁnds many of the new attacks presented in
this paper and also rediscovers older attacks. In particular, our
models of TLS resumptions and renegotiation are the ﬁrst to
automatically reconstruct the triple handshake attack and other
MitM attacks on TLS-based compound authentication.
We propose a new security requirement for key exchange
protocols that enables them to be used for compound authen-
tication. They must provide agreement on a channel binding
value that is contributive, that is, it cannot be determined solely
by one of the two participants. We propose new contributive
channel bindings for IKEv2, SSH, and SRP. We analyze our
new SSH channel bindings as well as the TLS session hash
countermeasure [19] for the triple handshake attacks. We show
that within our threat model and under the limitations of
our symbolic cryptographic abstractions,
these contributive
channel bindings prevent channel synchronization attacks.
Outline: Section II presents general notations and for-
mal deﬁnitions for the protocol model used in the paper as
well as detailed examples of several compound authentication
protocols. Section III presents old and new channel synchro-
nization attacks on some compound authentication protocols.
Section IV proposes new contributive channel bindings to
prevent these attacks. Section V describes our ProVerif models
that encode the formal deﬁnitions of Section II; it then shows
how we can discover some of the attacks of Section III and
analyze the countermeasures of Section IV. Section VI brieﬂy
discusses related work. Section VII concludes.
II. FORMAL PROTOCOL MODEL
We consider a family of two-party authentication protocols.
Each protocol session is executed by a pair of principals
over an untrusted network. Each principal (written p, a, b) has
access to a set of public credentials (written c1, c2, . . .), and
each credential has an associated secret (written s1, s2, . . .) that
may be used to create a proof of possession for the credential.
Credentials and their secrets may be shared by two or more
principals. A credential may be compromised, in which case
its secret is revealed to the adversary.
The adversary is treated as a distinguished principal with
access to a set of compromised credentials. At run-time,
the adversary may trigger any number of instances of each
authentication protocol. Each instance has a protocol role: it
is either a initiator or a responder and this role is played by
a principal. By the end of the protocol, each instance assigns
the following variables:
•
•
•
p: the principal executing this instance
l: a fresh locally unique identiﬁer for the instance at
the principal p
role: initiator or responder
•
•
•
◦
◦
◦
◦
◦
◦
params: public session parameters, with the following
distinguished ﬁelds, any of which may potentially be
left unassigned (⊥)
ci: the credential of the initiator
cr: the credential of the responder
sid: a global session identiﬁer
cb: a channel binding value computed for the
current protocol instance
cbin: a channel binding value for the underly-
ing (previous, outer) protocol instance (if any)
secrets: session-speciﬁc secrets, with the following
distinguished ﬁeld, potentially unassigned (⊥):
sk: an authentication (MAC or authenticated
encryption) key created during the protocol
complete: a ﬂag (∈ {0, 1}) that indicates whether the
instance has completed its role in the protocol or not.
The principal name (p) and local identiﬁer (l) are abstract
values that do not appear in the protocol; we use them to state
security properties about our protocol models. The protocol
itself may assign one or both credentials (ci, cr), and may
generate a global session identiﬁer (sid) for use at both
initiator and responder. It may generate a channel binding value
(cb), and if the protocol is being run within an authenticated
channel, it may also exchange a channel binding value (cbin)
for the outer channel.
When the initiator and responder credentials are both
unassigned (ci = cr = ⊥), the protocol instance is said to be
anonymous; if only one of them is unassigned, the instance is
called unilateral; otherwise the instance is said to be mutually
authenticated. If the instance key is assigned (sk (cid:54)= ⊥), then
the instance is said to be key generating.
A. Threat Model
We consider a standard symbolic attacker model in the
style of Dolev and Yao [20], as is commonly used in the
formal analysis of cryptographic protocols, using tools like
ProVerif [18]. The attacker controls the network and hence is
able to read, modify, and inject any unencrypted message.
In addition, the attacker has access to a set of compromised
credentials, marked by an event Compromise(c), which may
be used both by the attacker and by honest principals (who
may not know that their credential has been compromised).
In any given protocol, we say that the initiator or responder
credential is honest if it is deﬁned ((cid:54)= ⊥) and has not been
compromised. The attacker may also selectively compromise
short-term session secrets, such as the session key sk; we mark
the theft of a secret s by an event Leaked(s).
Conversely, we assume that these compromise events are
the only way the attacker can obtain any long-term or short-
term secret; he cannot, for example, guess the value of a secret,
even if it is a short password. Moreover, following Dolev and
Yao, we assume that the underlying cryptography is perfect:
we model each cryptographic primitive as an abstract symbolic
function with strong properties. For example hash functions are
irreversible (one-way) whereas encrypted values can only be
reversed (decrypted) with the correct key.
3
For protocols that use a Difﬁe-Hellman (DH) key exchange,
the attacker may try to either use a bad DH group (e.g. one
with small subgroups) or may send an invalid public key (one
that does not belong to the right group.) This attack vector is
usually not considered in typical protocol analyses, but as we
will see in Section III-B, it is practical for many protocols and
often leads to serious attacks on compound authentication. In
Section V, we show how to encode this more general Difﬁe-
Hellman threat model in ProVerif. We treat Elliptic Curve
Difﬁe Hellman (ECDH) protocols analogously.
Credential compromise (Compromise(c)) is a standard
feature of formal protocol analyses but, to practitioners, it may
seem unrealistic to try to protect against. The attacks in this
paper do not rely on this capability. However, it is an important
threat to consider when evaluating countermeasures, since it
can commonly occur in in real-world scenarios. Consider the
example of TLS server certiﬁcates. The attacker can always
obtain certiﬁcates under his own name. The challenge is to
obtain a certiﬁcate that may be used to impersonate an honest
server. One way is to steal a server’s private key. In practice,
private key theft is difﬁcult to achieve, however there are
several simpler forms of compromise that achieve the same
goal. For example,
to validate server
certiﬁcates correctly (e.g. see [21]), or the user may click-
through certiﬁcate warnings [22]. In these cases, the attacker
may be able to use his own certiﬁcate to impersonate an honest
server. Alternatively, the attacker may be able to exploit a
badly-conﬁgured certiﬁcation authority to obtain a mis-issued
certiﬁcate under the honest server’s name [6], [23], [24].
the client may fail
B. Security Goals
For each individual authentication protocol, the goal is
agreement on (some subset of) both the public protocol pa-
rameters and the session secrets. While the precise deﬁnition
of agreement depends on the protocol being considered, it can
be informally stated as follows:
Deﬁnition 1 (Agreement): If a principal a completes pro-
tocol instance l, and if the peer’s credential in l is honest, and
if the session secrets of l have not been leaked, then there
exists a principal b with a protocol instance l(cid:48) in the dual role
that agrees with l on the contents of params and any shared
session secrets (most importantly sk).
In particular, l and l(cid:48) must typically agree on each other’s
credentials,
the session identiﬁer sid and channel binding
cb, and any negotiated cryptographic parameters. We do
not explicitly state the conﬁdentiality goal for secrets, but
many derived authentication properties such as compound
authentication implicitly depend on the generated sk being
conﬁdential.
When composing a set of protocols, besides getting individ-
ual agreement on each protocol’s parameters, we also require
joint agreement on all the protocols. Informally:
Deﬁnition 2 (Compound Authentication): If a principal a
completes a compound authentication protocol consisting of
protocol instances {l1, . . . , ln}, such that some instance li has
an honest peer credential and the session secrets of li have
not been leaked, then there exists a principal b with protocol
instances {l(cid:48)
n} such that each l(cid:48)
j has the dual role to lj
and agrees with lj on params j and sk j.
1, . . . , l(cid:48)
In other words, a compound authentication protocol com-
poses a set of individual authentication protocols in a way
that guarantees that the same peer principal participated in all
the protocols. The strength of the deﬁnition is that it requires
this guarantee even if all but one of the peer credentials
were compromised (or anonymous). In particular, compound
authentication protects against a form of key compromise
impersonation: even if a server’s transport-level credential is
compromised, the attacker cannot impersonate an honest user
at the application level.
Other weaker variations of this deﬁnition may be more
appropriate for a particular compound authentication protocol.
For example, the deﬁnition of security for TLS renegotia-
tion [15] states that if the peer credential in the last protocol
instance ln is honest then there must be agreement on all
previous protocol instances. Conversely, as we shall see, com-
pound authentication for SSH re-exchange requires that the
session key sk 1 of the ﬁrst protocol instance l1 is never leaked.
Furthermore, some protocols guarantee joint agreement only
on certain elements of params i, such as the peer credentials,
not on their full contents.
C. Compound Authentication Protocol Examples
We now discuss several examples of compound authenti-
cation protocols (and their variations) and show how they ﬁt
in our formal model. Formalizing these varied protocols in a
uniform setting allows us to compare their security guarantees
and serves as the basis for the ProVerif models of Section V.
1) TLS-RSA+SCRAM: Our ﬁrst example uses the TLS
protocol to establish a transport channel and then runs a SASL
user authentication protocol called Salted Challenge Response
Authentication Mechanism (SCRAM) [25]. For compound
authentication, SCRAM relies on the tls-unique channel
binding deﬁned in [11].
TLS supports different key exchange mechanisms; we refer
to the RSA encryption based key exchange as TLS-RSA. In
TLS-RSA, the server credential (cr) is an X.509 certiﬁcate
containing an RSA public key used for encryption. The client
can optionally authenticate via an X.509 certiﬁcate for signing;
here we assume that it remains anonymous (ci = ⊥).
Figure 4 depicts the full protocol ﬂow. The client and
server ﬁrst exchange their local identiﬁers, (nonces cr, sr)
and the server sets a session id sid. At this stage, protocol
version and cipher suite (nego) are also negotiated. The
server then sends its certiﬁcate certS which is veriﬁed by
the client. The client follows by sampling a random pre-
master secret pms which is encrypted under pkS and sent
to the server. The client and server then compute a shared
master secret ms = kdf TLS
(pms, cr, sr) and a session key
sk = kdf TLS
(ms, cr, sr). After the client and server ﬁnished
messages are exchanged and their content checked by each
peer, both instances complete and create a new TLS session
with the following assignments:
1
2
params = (ci = ⊥, cr = cert s, cr, sr, nego)
secrets = (pms, ms, sk )
sr = privkey(cert s)
cb = H(log 1)
4
4) Other Bindings: EAP, tls-server-end-point: The
three previously described compound authentication protocols
are only a few of the many possible combinations between
transport protocols and application-level authentication.
Many protocols compose TLS with EAP methods [7], [8],
[9] and in response to previous man-in-the-middle attacks [1]
on such protocols, many EAP methods have been extended
with a form of channel binding called cryptographic bind-
ing [2]. The idea is to use the master secret and random
values of the TLS protocol (ms, cr, sr) as a channel binding
and to derive a key by mixing it with the master session
key msk and nonces nonce C, nonce S generated by the EAP
method. The resulting compound MAC key (cmk) is then used
to cryptographically bind the EAP method to the TLS channel,
by using it to create two MACs B1_MAC and B2_MAC that
are exchanged in the ﬁnal messages of the EAP exchange:
cmk = prf EAP (ms, cr, sr, msk , nonce C, nonce S)
B1 MAC = mac(cmk , nonce S)
B2 MAC = mac(cmk , nonce C)
have
For
goals.
bindings
more
example,
channel
authentication
modest
Some
compound
the
tls-server-end-point channel binding [11] only
aims to ensure that the application level protocol instances
agree on the transport-level server certiﬁcate. In this case,
the channel binding cb for TLS consists of the hash of the
TLS server certiﬁcate (H(cert S)). This binding is used, for
example, when binding SAML assertions to the underlying
TLS channel [26], so that a SAML assertion generated for
use at one server may not be used at another, unless the two
servers share the server certiﬁcate.
Re-keying and resumption: Many of the authentication
protocols described above also offer a re-keying protocol, by
which the session key sk generated by the protocol can be re-
freshed without the need for full re-authentication of the client
and the server. Re-keying is mainly useful on connections
where a lot of data is exchanged, so that the compromise of a
session key is of limited beneﬁt to the attacker. For example,
SSH recommends that keys be refreshed every hour, or for
every gigabyte of data.
Re-keying protocols may also be used to perform fast
session resumption. If an initiator and responder already have
a channel between them with a session key sk, they may reuse
the session key to start a new channel without the need to re-
peat the full key exchange. Such session resumption protocols
are included within TLS, and are available as extensions to
IKEv2 [27], SSH [28], and EAP [29]. Session resumption can
have a major impact on the performance of a client or a server