Question: "Consider a web service that retrieves user details based on their ID using a PostgreSQL database. The service generates a query to fetch user data from an HTTP request parameter 'id'. Given the SQL query template below, which code snippet correctly prevents SQL Injection attacks while allowing the service to function as intended?

`SELECT * FROM users WHERE id = $_GET['id'];`"
 "A": "Using parameterized queries with prepared statements:
`$stmt = $pdo->prepare('SELECT * FROM users WHERE id = ?');
$stmt->execute([$_GET['id']]);`"
 "B": "Appending a comment character to truncate the query:
`$query = 'SELECT * FROM users WHERE id = '. $_GET['id'] . '--';
$result = pg_query($query);`"
 "C": "Adding a semicolon to separate statements:
`$query = 'SELECT * FROM users WHERE id = '. $_GET['id'] . ';';
$result = pg_query($query);`"
 "D": "Using `LIMIT` and `OFFSET` to control the result set:
`$query = 'SELECT * FROM users LIMIT 1 OFFSET ' . $_GET['id'];
$result = pg_query($query);`"
Answer: A