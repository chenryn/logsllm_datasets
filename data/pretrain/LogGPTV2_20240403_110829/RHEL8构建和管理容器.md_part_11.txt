    ``` literallayout
    # scp /tmp/chkpt.tar.gz other_host:/tmp/
    ```
6.  在目标主机上恢复检查点(`other_host`{.literal})：
    ``` literallayout
    # podman container restore --import /tmp/chkpt.tar.gz
    ```
7.  向目标主机上的容器(`other_host`{.literal})发送请求：
    ``` screen
    # curl 10.88.0.247:8080
    2
    ```
:::
因此，有状态的容器已从一个系统迁移到另一个系统，而不丢失其状态。
::: itemizedlist
**其它资源**
-   [在 RHEL 中使用 Podman
    进行容器迁移](https://www.redhat.com/en/blog/container-migration-podman-rhel){.link}
:::
:::
:::
[]{#assembly_working-with-pods_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_working-with-pods_building-running-and-managing-containers.html#assembly_working-with-pods_building-running-and-managing-containers}第 7 章 使用 pod {.title}
:::
容器是您可以使用 Podman、Skopeo 和 Buildah
容器工具管理的最小单元。Podman pod 是一个或多个容器的组。Pod 概念是由
Kubernetes 引入的。podman pod 与 Kubernetes 定义类似。Pod 是您可以在
OpenShift 或 Kubernetes 环境中创建、部署和管理的最小计算单元。每个
Podman pod 都包括一个 infra 容器。此容器包含与 pod 关联的命名空间，允许
Podman 将其他容器连接到 pod。它允许您在 pod 中启动和停止容器，pod
将保持运行。`registry.access.redhat.com/ubi8/pause`{.literal}
镜像中的默认 infra 容器。
::: section
::: titlepage
# []{#assembly_working-with-pods_building-running-and-managing-containers.html#proc_creating-pods_assembly_working-with-pods}创建 pod {.title}
:::
此流程演示了如何创建带有一个容器的 pod。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  创建空 pod:
    ``` literallayout
    $ podman pod create --name mypod
    223df6b390b4ea87a090a4b5207f7b9b003187a6960bd37631ae9bc12c433aff
    The pod is in the initial state Created.
    ```
    pod 处于 Created 的初始状态。
2.  可选：列出所有 pod：
    ``` literallayout
    $ podman pod ps
    POD ID         NAME    STATUS    CREATED                  # OF CONTAINERS   INFRA ID
    223df6b390b4   mypod   Created   Less than a second ago   1                 3afdcd93de3e
    ```
    请注意，pod 有一个容器。
3.  可选：列出与其关联的所有 pod 和容器：
    ``` literallayout
    $ podman ps -a --pod
    CONTAINER ID  IMAGE                 COMMAND  CREATED                 STATUS   PORTS  NAMES               POD
    3afdcd93de3e  registry.access.redhat.com/ubi8/pause            Less than a second ago  Created         223df6b390b4-infra  223df6b390b4
    ```
    您可以看到 `podman ps 命令中的 pod ID 与 podman pod ps`{.literal}
    命令中的 `pod ID 匹配。`{.literal}默认 infra 容器基于
    `registry.access.redhat.com/ubi8/pause`{.literal} 镜像。
4.  在名为 `my pod 的现有 pod 中运行名为 myubi`{.literal}
    的容器``{=html} ：
    ``` literallayout
    $ podman run -dt --name myubi --pod mypod registry.access.redhat.com/ubi8/ubi  /bin/bash
    5df5c48fea87860cf75822ceab8370548b04c78be9fc156570949013863ccf71
    ```
5.  可选：列出所有 pod：
    ``` literallayout
    $ podman pod ps
    POD ID         NAME    STATUS    CREATED                  # OF CONTAINERS   INFRA ID
    223df6b390b4   mypod   Running   Less than a second ago   2                 3afdcd93de3e
    ```
    您可以看到 pod 有两个容器。
6.  可选：列出与其关联的所有 pod 和容器：
    ``` literallayout
    $ podman ps -a --pod
    CONTAINER ID  IMAGE                                       COMMAND    CREATED                 STATUS                     PORTS  NAMES               POD
    5df5c48fea87  registry.access.redhat.com/ubi8/ubi:latest  /bin/bash  Less than a second ago  Up Less than a second ago         myubi               223df6b390b4
    3afdcd93de3e  registry.access.redhat.com/ubi8/pause                                   Less than a second ago  Up Less than a second ago         223df6b390b4-infra  223df6b390b4
    ```
:::
::: itemizedlist
**其它资源**
-   `podman-pod-create`{.literal} man page
-   [Podman: 在本地容器运行时文章中管理 pod
    和容器](https://developers.redhat.com/blog/2019/01/15/podman-managing-containers-pods/){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-pods_building-running-and-managing-containers.html#proc_displaying-pod-information_assembly_working-with-pods}显示 pod 信息 {.title}
:::
此流程提供有关如何显示 pod 信息的信息。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
-   pod 已创建。详情请参阅 [创建
    pod](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index#creating-pods_building-running-and-managing-containers){.link}
    一节。
:::
::: itemizedlist
**流程**
-   显示在 pod 中运行的活跃进程：
    ::: itemizedlist
    -   要显示 pod 中容器的运行进程，请输入：
        ``` literallayout
        $ podman pod top mypod
        USER   PID   PPID   %CPU    ELAPSED         TTY     TIME   COMMAND
        0      1     0      0.000   24.077433518s   ?       0s     /pause
        root   1     0      0.000   24.078146025s   pts/0   0s     /bin/bash
        ```
    -   要显示一个或多个 pod 中容器的资源使用统计的实时流，请输入：
        ``` literallayout
        $ podman pod stats -a --no-stream
        ID             NAME              CPU %   MEM USAGE / LIMIT   MEM %   NET IO    BLOCK IO   PIDS
        a9f807ffaacd   frosty_hodgkin    --      3.092MB / 16.7GB    0.02%   -- / --   -- / --    2
        3b33001239ee   sleepy_stallman   --      -- / --             --      -- / --   -- / --    --
        ```
    -   要显示描述 pod 的信息，请输入：
        ``` literallayout
        $ podman pod inspect mypod
        {
           "Id": "db99446fa9c6d10b973d1ce55a42a6850357e0cd447d9bac5627bb2516b5b19a",
           "Name": "mypod",
           "Created": "2020-09-08T10:35:07.536541534+02:00",
           "CreateCommand": [
               "podman",
               "pod",
               "create",
               "--name",
               "mypod"
           ],
           "State": "Running",
           "Hostname": "mypod",
           "CreateCgroup": false,
           "CgroupParent": "/libpod_parent",
           "CgroupPath": "/libpod_parent/db99446fa9c6d10b973d1ce55a42a6850357e0cd447d9bac5627bb2516b5b19a",
           "CreateInfra": false,
           "InfraContainerID": "891c54f70783dcad596d888040700d93f3ead01921894bc19c10b0a03c738ff7",
           "SharedNamespaces": [
               "uts",
               "ipc",
               "net"
           ],
           "NumContainers": 2,
           "Containers": [
               {
                   "Id": "891c54f70783dcad596d888040700d93f3ead01921894bc19c10b0a03c738ff7",
                   "Name": "db99446fa9c6-infra",
                   "State": "running"
               },
               {
                   "Id": "effc5bbcfe505b522e3bf8fbb5705a39f94a455a66fd81e542bcc27d39727d2d",
                   "Name": "myubi",
                   "State": "running"
               }
           ]
        }
        ```
        您可以查看 pod 中容器的信息。
    :::
:::
::: itemizedlist
**其它资源**
-   `podman pod 顶部`{.literal} man page
-   `podman-pod-stats`{.literal} man page
-   `podman-pod-inspect`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-pods_building-running-and-managing-containers.html#proc_stopping-pods_assembly_working-with-pods}停止 pod {.title}
:::
您可以使用 `podman pod stop 命令来停止一个或多个 pod`{.literal}。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
-   pod 已创建。详情请参阅 [创建
    pod](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index#creating-pods_building-running-and-managing-containers){.link}
    一节。
:::
::: orderedlist
**流程**
1.  停止 pod `mypod`{.literal}:
    ``` literallayout
    $ podman pod stop mypod
    ```
2.  可选：列出与其关联的所有 pod 和容器：
    ``` literallayout
    $ podman ps -a --pod
    CONTAINER ID  IMAGE                               COMMAND    CREATED             STATUS                    PORTS   NAMES               POD ID        PODNAME
    5df5c48fea87  registry.redhat.io/ubi8/ubi:latest  /bin/bash  About a minute ago  Exited (0) 7 seconds ago          myubi               223df6b390b4  mypod
    3afdcd93de3e  registry.access.redhat.com/ubi8/pause                           About a minute ago  Exited (0) 7 seconds ago          8a4e6527ac9d-infra  223df6b390b4  mypod
    ```
    您可以看到 pod `mypod`{.literal} 和容器 `myubi 处于`{.literal}
    \"Exited\"状态。
:::
::: itemizedlist
**其它资源**
-   `podman-pod-stop`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-pods_building-running-and-managing-containers.html#proc_removing-pods_assembly_working-with-pods}删除 pod {.title}
:::
您可以使用 `podman pod rm 命令删除一个或多个已停止的 pod`{.literal}
和容器。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
-   pod 已创建。详情请参阅 [创建
    pod](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index#creating-pods_building-running-and-managing-containers){.link}
    一节。
-   pod 已停止。详情请参阅[停止
    pod](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/building_running_and_managing_containers/index#stopping-pods_building-running-and-managing-containers){.link}
    一节。
:::
::: orderedlist
**流程**
1.  删除 pod `mypod`{.literal}，键入：
    ``` literallayout
    $ podman pod rm mypod
    223df6b390b4ea87a090a4b5207f7b9b003187a6960bd37631ae9bc12c433aff
    ```
    请注意，删除 pod 会自动移除其中的所有容器。
2.  可选：检查是否删除了所有容器和 pod：
    ``` literallayout
    $ podman ps
    $ podman pod ps
    ```
:::
::: itemizedlist
**其它资源**
-   `podman-pod-rm`{.literal} man page
:::
:::
:::
[]{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers.html#assembly_adding-software-to-a-running-ubi-container_building-running-and-managing-containers}第 8 章 将软件添加到正在运行的 UBI 容器中 {.title}
:::
Red Hat Universal Base Images(UBI)是从 RHEL 内容的一个子集构建的。UBIS
还提供可自由安装的 RHEL 软件包子集，它们可与 UBI
配合使用。要为正在运行的容器添加或更新软件，您可以使用包含 RPM
软件包和更新的 yum 存储库。UBIS 提供一组预先构建的语言运行时容器镜像，如
Python、Perl、Node.js、Ruby 等。
将 UBI 存储库中的软件包添加到正在运行的 UBI 容器中：
::: itemizedlist
-   在 UBI init 和 UBI 标准镜像中，使用 `yum`{.literal} 命令
-   在 UBI 最小镜像中，使用 `microdnf`{.literal} 命令
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
直接在运行容器中安装和使用软件包会临时添加软件包。更改不会保存在容器镜像中。要使软件包更改持久，[请参阅使用
Buildah 从 Containerfile
构建镜像](#assembly_building-container-images-with-buildah_building-running-and-managing-containers.html#proc_building-an-image-from-a-containerfile-with-buildah_assembly_building-container-images-with-buildah "使用 Buildah 从 Containerfile 构建镜像"){.link}
部分。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当您将软件添加到 UBI 容器时，在订阅的 RHEL 主机上或未订阅（或非
RHEL）系统中更新 UBI 的步骤有所不同。
:::
::: section
::: titlepage