### Directory Structure and Configuration

#### `gcc_asan.mk`
- **src**: Contains makefiles and source code for benchmarks and applications.
  - **apache**
    - `Makefile`
  - **phoenix**
    - **histogram**
      - `Makefile`
      - [...source files...]
  
- **experiments**: Scripts to run, parse, and plot results.
  - **phoenix**
    - `run.py`
    - `collect.py`
    - `plot.py`

- **build**: Automatically generated final binaries.
  - **phoenix**
    - **histogram**
      - **gcc_native**
        - [...]
      - **gcc_asan**
        - [...]

**Figure 5: Example directory tree of FEX.**

### Running Experiments
To run experiments, the user can specify various options:
- `-v` for verbose output.
- `-d` to build debug versions of benchmarks.
- `-r 10` to increase the number of runs of each benchmark to 10.
- `-m 1 2 4` to run benchmarks with different numbers of threads (1, 2, and 4).
- `-b histogram` to run only the `histogram` benchmark.

Final binaries of the benchmarks are stored in the `build/` directory. These binaries can be executed directly for debugging or additional measurements.

After the experiment is complete, the user should fetch the final CSV results from the server and run the `plot` command locally:
```bash
fex.py plot -n phoenix -t perf
```
This command generates a performance overhead barplot and saves it as a PDF file. Examples of such graphs are shown in the next section.

### Currently Supported Experiments
During the development and internal use of FEX, we have expanded its capabilities in several directions. Table I lists the currently supported benchmarks, compilers, compilation types, and experiments.

| **Category** | **Supported Items** |
|--------------|---------------------|
| **Benchmark Suites** | Phoenix, SPLASH, PARSEC, SPEC CPU2006* |
| **Additional Benchmarks** | Apache, Nginx, Memcached, RIPE, microbenchmarks |
| **Compilers** | GCC, Clang/LLVM |
| **Compilation Types** | AddressSanitizer (as an example) |
| **Experiments** | Performance and memory overheads, security evaluation |
| **Tools** | perf-stat (generic), perf-stat (memory), time |
| **Plots** | Lineplot, regular barplot, stacked barplot, grouped barplot, stacked-grouped barplot |

*Note: SPEC CPU2006 will not be open-sourced as part of FEX due to proprietary license restrictions.*

FEX supports four benchmark suites: Phoenix, SPLASH, PARSEC, and SPEC CPU2006. Additionally, it includes real-world applications like Apache, Memcached, and Nginx, which are installed via scripts and not placed under the `src/` directory. FEX also provides necessary libraries such as libevent and OpenSSL.

FEX provides installation scripts and makefiles for GCC version 6.1 and Clang/LLVM 3.8.0, and it is straightforward to update these scripts for newer versions. The current framework includes AddressSanitizer as an example of a type-specific makefile.

The list of supported experiments includes:
1. Performance and memory overhead experiments for Phoenix, PARSEC, and SPEC.
2. Throughput-latency and security experiments for Apache, Nginx, and Memcached.

For plotting, FEX offers several generic plots:
- Barplot (for performance and memory overheads)
- Lineplot (for multithreading overheads)
- Stacked barplot
- Grouped barplot
- Stacked-and-grouped barplot (for complex statistics like cache misses at different levels)

### Case Studies
In this section, we evaluate the extensibility and ease of use of FEX through a set of benchmarks. We consider a scenario where a researcher wants to compare the performance of Clang and GCC using the SPLASH-3 benchmark suite and the Nginx web server, as well as the security guarantees provided by the two compilers using the RIPE testbed.

#### A. Multithreaded Benchmark Suite: SPLASH-3
SPLASH-3 is used to evaluate parallel applications on large-scale NUMA architectures. To integrate SPLASH-3 into FEX, the following steps were taken:
- **Source Code Integration**: 
  - Modified the build system (194 LoC, including renaming variables, restructuring directories, and removing unnecessary build targets).
  - Wrote an installation script to download input files (5 LoC).
  - Created a `Runner` subclass to control the experiment (36 LoC) and a `collect.py` script to process the final results (9 LoC).

- **Clang Integration**:
  - Wrote an installation script for Clang and its dependencies (50 LoC if built from sources).
  - Created a compiler-specific Makefile (6 LoC).

- **Plotting**:
  - Built a barplot to represent the slowdown (speedup) of Clang versions over GCC ones (26 LoC in `plot.py`).

The total effort was 326 LoC, or approximately 5 man-hours of work. The experiment was run with:
```bash
fex.py run -n splash -t gcc_native clang_native
```
The resulting plot (Figure 6) shows that the given version of Clang has slightly worse performance than GCC, especially in matrix operations like FFT.

#### B. Real-world Application: Nginx Web Server
To evaluate the effort of adding a standalone application, we integrated Nginx into FEX. The steps included:
- **Installation Script**: Wrote an installation script (9 LoC).
- **Performance Experiment**:
  - Created a `collect.py` script to collect throughput and latency statistics (14 LoC).
  - Adjusted the appearance of a throughput-latency plot in `plot.py` (34 LoC).
  - Wrote a `run.py` script to pre-configure the server side, start a client on a separate machine via SSH, and fetch logs (89 LoC).
  - Created a makefile with configuration options to build Nginx (20 LoC).

The total effort was 166 LoC, or approximately two man-hours. The experiment was run with:
```bash
fex.py run -n nginx -t gcc_native clang_native
```
The resulting throughput-latency measurements (Figure 7) show that the Clang version has worse throughput than GCC.

#### C. Security Benchmark: RIPE
To highlight FEX's support for security experiments, we integrated the RIPE security testbed. The steps included:
- **Source Code Integration**:
  - Placed RIPE sources (two source and two header files) under `src/` with a simple Makefile (14 LoC).
- **Experiment Creation**:
  - Wrote a `run.py` script to call the security tests (44 LoC).
  - Created a `collect.py` script to extract RIPE-specific statistics from the final log (17 LoC).

The total effort was 75 LoC, or less than one hour of work. The experiment was run with:
```bash
fex.py run -n ripe -t gcc_native clang_native
```
The aggregated results (Table II) show that even under an "insecure" configuration, only a few attacks were successful. Notably, Clang had better security performance in some cases.

### Conclusion
FEX demonstrates strong extensibility and ease of use, making it a valuable tool for researchers and developers. The case studies highlight the minimal effort required to integrate new benchmarks and applications, and the framework's ability to handle a variety of experiments and visualizations.