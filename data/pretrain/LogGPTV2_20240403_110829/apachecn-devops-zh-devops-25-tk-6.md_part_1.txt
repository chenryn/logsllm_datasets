# 六、可视化指标和警报
It is curious how often you humans manage to obtain that which you do not want.
- *史巴克*
**仪表盘没用！他们是在浪费时间。如果你想看什么就去找网飞。它比任何其他选择都便宜。**
我在许多公开场合重复了这些话。我认为公司夸大了对仪表板的需求。他们花了很大的力气创建一堆图表，让很多人负责盯着它们。好像这对谁都有帮助。仪表板的主要优点是色彩丰富，充满线条、方框和标签。对于像首席技术官和部门主管这样的决策者来说，这些资产总是很容易出售。当一个软件供应商与有权开支票的决策者开会时，他知道没有“漂亮的颜色”就没有销售。那个软件做什么并不重要，重要的是它看起来怎么样。这就是为什么每个软件公司都关注仪表板。
好好想想。仪表板有什么用？我们是不是要一直看着图表，直到一个条形图到达一条红线，表明达到了一个临界阈值？如果是这样，为什么不创建一个警报，在相同的条件下触发，停止浪费时间盯着屏幕，等待事情发生。相反，我们可以做一些更有用的事情(比如盯着网飞看)。
我们的“恐慌标准”是否比警报所能表达的更复杂？我确实认为它更复杂。然而，这种复杂性不能通过预先定义的图表来反映。当然，意想不到的事情会发生，我们需要挖掘数据。然而，“意想不到”这个词与仪表盘提供的东西背道而驰。它们都是关于预期的结果。否则，我们如何在不知道预期的情况下定义一个图？“它可以是任何东西”不能翻译成图表。带图表的仪表盘是我们假设可能出错的地方，并将这些假设显示在屏幕上，或者更多时候显示在很多屏幕上。
然而，意外只能通过查询度量来探索，并且越来越深入，直到我们找到问题的原因。这是调查工作，不能很好地转化为仪表板。我们使用普罗米修斯查询。
然而，我在这里专门用了一章来介绍仪表板。
我承认仪表盘并非(完全)无用。它们有时很有用。我真正想传达的是，它们的有用性被夸大了，我们可能需要以不同于许多人习惯的方式构建和使用仪表板。
但是，我跳在自己前面。稍后我们将讨论仪表板的细节。目前，我们需要创建一个集群，允许我们进行实验，并将这种对话提升到一个更实际的水平。
# 创建集群
`vfarcic/k8s-specs`([https://github.com/vfarcic/k8s-specs](https://github.com/vfarcic/k8s-specs))存储库将继续作为 Kubernetes 定义的来源。我们将通过获取最新版本来确保它是最新的。
All the commands from this chapter are available in the `06-grafana.sh` ([https://gist.github.com/vfarcic/b94b3b220aab815946d34af1655733cb](https://gist.github.com/vfarcic/b94b3b220aab815946d34af1655733cb)) Gist.
```
 1  cd k8s-specs
 2
 3  git pull
```
这些要求与我们在上一章中的要求相同。为了您的方便，这里也有 Gists。请随意使用它们来创建新的集群，或者验证您计划使用的集群是否满足要求。
*   `gke-instrument.sh` : **具有 3 个 n1-standard-1 工作节点的 GKE** 、 **nginx** **Ingress** 、 **tiller** 、 **Prometheus** Chart，以及环境变量 **LB_IP** 、 **PROM_ADDR** 和**AM _ ADDR**([https://gist . github . com/vfarcic/675 F4 B3 ee2c 555](https://gist.github.com/vfarcic/675f4b3ee2c55ee718cf132e71e04c6e)
*   `eks-hpa-custom.sh` : **具有 3 个 T2 .小型工作节点的 EKS** 、 **nginx Ingress** 、 **tiller** 、 **Metrics Server** 、 **Prometheus** 图表、环境变量 **LB_IP** 、 **PROM_ADDR** 和 **AM_ADDR** ，以及**集群自动缩放器**([https://gist . github . com](https://gist.github.com/vfarcic/868bf70ac2946458f5485edea1f6fc4c)
*   `aks-instrument.sh` : **带有 3 个 Standard_B2s 工作节点的 AKS** 、 **nginx Ingress** 和 **tiller** 、 **Prometheus** 图表，以及环境变量 **LB_IP** 、 **PROM_ADDR** 和**AM _ ADDR**([https://gist . github . com/vfarcic/65a 0d 5834 c 9 e 20 ebf1 b 924](https://gist.github.com/vfarcic/65a0d5834c9e20ebf1b99225fba0d339)
*   `docker-instrument.sh` : **带有 **2 个 CPU**、 **3 GB RAM** 、 **nginx Ingress** 、 **tiller** 、**度量服务器**、**普罗米修斯**图表，以及环境变量 **LB_IP** 、 **PROM_ADDR** 和**AM _ ADDR**([https://](https://gist.github.com/vfarcic/1dddcae847e97219ab75f936d93451c2)**
*   `minikube-instrument.sh` : **带 **2 个 CPU**、 **3 GB RAM** 、**入口**、**存储提供程序**、**默认存储类**和**指标-服务器**插件已启用、**分蘖**、**普罗米修斯**图表和环境变量 **LB_IP** 、【T21**
# 仪表板应该使用哪些工具？
用不了几分钟，普罗米修斯就发现它不是用来做仪表板的。当然，你可以在普罗米修斯中创建图表，但它们不是永久的，在呈现数据方面也没有提供太多。普罗米修斯的图表被设计用来作为一种可视化特别查询的方式。这是我们大多数时候需要的。当我们收到警报通知有问题时，我们通常通过执行警报查询来开始搜索罪魁祸首，然后根据结果深入研究数据。也就是说，如果警报没有立即揭示问题，在这种情况下，没有必要接收通知，因为这些类型的明显问题通常可以自动修复。
但是，正如我已经提到的，普罗米修斯没有缓冲器功能，所以我们将不得不寻找一个不同的工具。
如今，选择仪表板很容易。*格拉夫纳*([https://grafana.com/](https://grafana.com/))是该地区无可争议的统治者。其他解决方案太老了，不值得费心，或者它们不支持普罗米修斯。这并不是说 Grafana 是市场上最好的工具。但是价格是合适的(免费的)，并且它适用于许多不同的数据源。例如，我们可以说*基巴纳*([https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana))和格拉夫纳一样好，甚至更好。但是，它仅限于来自弹性搜索的数据。虽然 Grafana 也可以使用 ElasticSearch 的数据，但它支持许多其他数据。有人可能会说*DataDog*([https://www.datadoghq.com/](https://www.datadoghq.com/))是更好的选择。尽管如此，它仍面临着与基巴纳相同的问题。它与特定的度量来源相关联。
没有灵活性，也没有组合来自其他数据源的数据的选项。更重要的是，两者都不支持普罗米修斯。
我将避免您与其他工具进一步比较。你可以自己试试。现在，你需要相信我，即使不是最好的选择，Grafana 也是好的。如果我们在这一点上意见不一致，你阅读本章的其余部分将毫无意义。
现在我强制 Grafana 作为选择，我们将继续并安装它。
# 安装和设置 Grafana
你可能知道接下来会发生什么。我们用谷歌搜索“Grafana Helm”，希望社区已经创建了一个我们可以使用的图表。我会通过透露赫尔姆*稳定*频道有格拉芙娜来让你免于搜索。我们所要做的就是检查这些值，并选择我们将使用的值。
```
 1  helm inspect values stable/grafana
```
我不会一一列举我们可以使用的所有价值观。我假设，到目前为止，你是一个赫尔姆忍者，你可以自己探索他们。相反，我们将使用我已经定义的值。
```
 1  cat mon/grafana-values-bare.yml
```
输出如下。
```
ingress:
  enabled: true
persistence:
  enabled: true
  accessModes:
  - ReadWriteOnce
  size: 1Gi
resources:
  limits:
    cpu: 20m
    memory: 50Mi
  requests:
    cpu: 5m
    memory: 25Mi
```
这些价值观没有什么特别的。我们启用了入口，设置了`persistence`，定义了`resources`。正如文件名所示，这是一个非常简单的设置，没有任何蓬松的东西。
剩下的就是安装图表了。
```
 1  GRAFANA_ADDR="grafana.$LB_IP.nip.io"
 2    
 3  helm install stable/grafana \
 4      --name grafana \
 5      --namespace metrics \
 6      --version 1.17.5 \
 7      --set ingress.hosts="{$GRAFANA_ADDR}" \
 8      --values mon/grafana-values-bare.yml
 9
10  kubectl -n metrics \
11      rollout status deployment grafana
```
现在我们可以在你喜欢的浏览器中打开 Grafana 了。
```
 1  open "http://$GRAFANA_ADDR"
```
您将看到登录屏幕。就像许多其他的赫尔姆图表一样，该安装带有`admin`用户和作为机密存储的密码。
```
 1  kubectl -n metrics \
 2      get secret grafana \
 3      -o jsonpath="{.data.admin-password}" \
 4      | base64 --decode; echo
```
请回到 Grafana 登录界面，输入`admin`作为用户名，粘贴上一条命令的输出作为密码。
Grafana 不收集指标。相反，它使用其他数据源，因此我们的第一个操作是将普罗米修斯设置为数据源。
请单击添加数据源图标。
键入`Prometheus`作为名称，并选择它作为类型。我们将让格拉夫娜通过 Kubernetes 服务`prometheus-server`连接到它。由于两者都在同一个名称空间中，网址应该设置为`http://prometheus-server`。剩下的就是保存&测试。
The outputs and screenshots in this chapter are taken from Docker for Desktop. There might be slight differences between what you see here and what you can observe on your screen.
![](img/09055a6f-2b2f-4524-8a89-c197904d9134.png)
Figure 6-1: Grafana's new data source screen We'll have more screenshots in this chapter than usual. I believe that they will help you replicate the steps we'll discuss.
# 导入和自定义预制仪表板
数据源本身是无用的。我们需要以某种方式想象它们。我们可以通过创建自己的仪表板来做到这一点，但这可能不是对 Grafana 最好(也是最简单)的介绍。相反，我们将导入一个现有的社区维护的仪表板。我们只需要选择一个适合自己需求的。
```
 1  open "https://grafana.com/dashboards"
```
请随意花一点时间探索可用的仪表板。
我认为 *Kubernetes 集群监控*([https://grafana.com/dashboards/3119](https://grafana.com/dashboards/3119))仪表盘是一个很好的起点。让我们导入它。
请单击左侧菜单中的+图标，然后单击导入链接，您将看到一个屏幕，允许我们导入其中一个 Grafana.com 仪表板，或者粘贴定义它的 JSON。
我们会选择前者。