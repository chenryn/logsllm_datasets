任意文件下载击溃跳板站点
这次的实战渗透过程，信息收集是很重要的一个阶段。尽可能收集目标网站或目标主机尽量多的信
息。信息收集的方式：
主动信息收集是通过直接访问网站主动获取信息，对IP开放的端口、CMS、中间件、敏感目
录、敏感文件、脚本类型、JS里的域名、操作系统扫描分析。
被动信息收集是基于公开的渠道，在不与目标系统直接交互的情况下获取信息，比如搜索引擎
获取网站的URI、获取IP绑定的域名、C段、域名whois信息、证书对应的其他资产做扩展信息收
集。
常用的几个小技巧：
1）利用windows和linux区分大小写的区别，在访问的时候尝试把路径部分改成大写， 
https://www.aaa.com/upload/index.php改成www.aaa.com/upload/index.PHP。 
页面路径还正常访问就是Windows系统，报错就是Linux系统。 
因为Windows系统对文件名称大小写不敏感，而Linux对文件名称大小写会有区分。 
2）chrome的F12扩展查看网络 ‐‐> header ‐‐> Server部分，例如：Server: nginx/1.20.1可以知道是
nginx 
3）判断网站是php 、Jsp 、Asp 、Aspx。可以根据网站URL来判断，也可以利用google语法辅助
判断，site:XXX filetype:asp|php|jsp|jspx|aspx
端口扫描
HTTP端口快速扫描使用masscan扫描，nmap服务识别。常见端口：
21:"FTP", 
22:"ssh", 
25:"SMTP", 
80:"web", 
139:"Samba", 
143:"IMAP", 
161:"SNMP", 
389:"Ldap目录访问协议", 
443:"https", 
445:"Microsoft SMB", 
465:"SMTP SSL", 
513:"rlogin", 
546:"DHCP failover", 
873:"rsync", 
993:"IMAPS", 
1080:"socks proxy", 
1194:"OpenVPN", 
1352:"Lotus domino", 
1433:"MSSQL", 
1521:"Oracle default", 
2049:"Nfs", 
2181:"ZooKeeper", 
2375:"Docker", 
3306:"MySQL", 
3389:"Remote Desktop", 
4440:"rundeck", 
4848:"GlassFish控制台", 
5000:"SysBase/DB2", 
5432:"PostgreSQL", 
5632:"pcanywhere", 
5900:"vnc", 
5984:"Apache CouchDB", 
6082:"varnish", 
6984:"Apache CouchDB SSL", 
6379:"Redis", 
7001:"weblogic_Server isten port", 
7002:"Server Listen SSL Port", 
8069:"zabbix", 
8080:"web,jboss,tomcat etc..", 
8089:"Jboss/Tomcat/Resin", 
8083:"influxDB Web admin", 
8086:"influxdb HTTP API", 
8095:"Atlassian Crowd", 
8161:"activemq", 
8888:"Jupyter Notebook", 
8983:"solr", 
9000:"fastcgi", 
9043:"VMware ESXI vsphere", 
9080:"websphere http", 
9083:"Hive default", 
9090:"websphere admin", 
9200:"Elsaticsearch http", 
9300:"Elsaticsearch Node1", 
10000:"HiveServer2", 
11211:"memcached", 
27017:"MongoDB", 
28017:"MongoDB web page" 
50000:"SAP command excute", 
50060:"hadoop web", 
50070:"hadoop default", 
60000:"HBase Master", 
60010:"hbase.master.info.bindAddress", 
任意文件下载
敏感信息主要是后台目录、备份文件、上传目录路径、安装页面以及信息泄露phpinfo文件、管理
组件phpmyadmin相关的信息。搜集敏感信息借助google搜索引擎的hacking语法，能搜索很多有
用的线索。
这次实操是在一个asp页面里发现了PDF文件下载，然后改成相对路径可以下载任意ASP文件：
目录扫描得到管理员后台URI admin/index.asp
从管理员后台的index.asp页面获取配置文件位置，因为这个用户登录页面都会用到SQL语句查询管
理员帐户密码，所以会有调用数据库的配置文件。
而ASP网站用了MDB数据库，没有做防下载，用前面的任意下载文件漏洞拿到.mdb数据库配置文
件，可以拿到数据库里的管理员密码。
任意文件上传
得到admin/index.asp页面，我就已经把HTML页面，A标签属性里的asp文件都分析了一下。发现有
上传文件的模块。顺着地址访问，只有一个输入框，但是查看源码发现input标签里加了隐藏属
性，抓包还是可以看得到字段的。结合前面的任意文件下载漏洞，分析文件上传的asp源码，构造
上传文件数据包，就可以不用进入后台，上传webshell了。
这是文件上传的部分代码。为了方便理解，把多余代码省略了。
想要了解上传文件的过程，首先要理解HTML传过来的POST包结构。
1）第一部分（起始标志） 
‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐7dc18645076a 
2）第二部分（文件说明） 
Content‐Disposition: form‐data; name="file1"; filename="E:\1111.jpg" 
Content‐Type: application/msword 
3）第三部分（文件内容） 
文件的二进制内容，略
4）第四部分（结束标志） 
‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐7dc18645076a 
ASP代码注释如下：
Dim filesize, filedata, PostData 
'filesize是上传文件的大小 
filesize = Request.TotalBytes 
'bytArray是上传文件的二进制数据 
bytArray = Request.BinaryRead(filesize) 
' 借助RecordSet将二进制流转化成文本 
Set rstTemp = Server.CreateObject("ADODB.Recordset") 
rstTemp.Fields.Append "bytArray", adLongVarChar, lenb(bytArray) 
rstTemp.Open 
rstTemp.AddNew 
rstTemp.Fields("bytArray").AppendChunk bytArray 
rstTemp.Update 
' we have getted the original string 
strByteToString = rstTemp("bytArray") 
Set rstTemp=Nothing 
.....多余代码略过..... 
' 获取二进制文件内容 
strInputContent = Mid(strByteToString, lngStartPos, InStr(lngStartPos, strB
yteToString, strIDInput) ‐ 2 ‐ lngStartPos) 
.....多余代码略过..... 
' 保存文件内容 
Set fso = CreateObject("Scripting.FileSystemObject") 
Set tf = fso.CreateTextFile(withName , True) 
if Err.number = 0 then 
    tf.Write(pContent) 
    tf.Close 
end if 
然后根据字段就可以构造HTML表单，抓包改包内容和文件名。上传路径写死在asp文件上传模块
的变量里。
写的小工具扩展
手动去查谷歌结果也是可以的。公开的爬虫小工具有多，近几年跟谷歌反爬机制，网页元素变动有
关，都不更新了。既然是获取google结果，在浏览器执行js语句更方便。我写了个简陋的chrome
浏览器扩展，获取google搜索结果的效果如下。：
核心JavaScript代码。
    var s = document.getElementById("search"); 
    var r = s.getElementsByTagName("div"); 
    var d = r[0].getElementsByTagName("div"); 
    var e = d[0].getElementsByClassName("g");   //g 
    var str = '\n'; 
    console.log(str); 
    for(var i=0;i< e.length;i++) 
    { 
        var g = e[i].getElementsByTagName("div"); 
        var f = g[0].getElementsByTagName("div"); 
        var x = f[0].getElementsByTagName("div"); 
        str = str + x[0].getElementsByTagName('a')[0].href + '\n'; 
    } 
    console.log(str); 
ASP有点老了，不知道为何还会有这么网站在用。分享出来复盘做下过往总结，有很多语句不顺的
地方，打码比较厚实的地方。是为了保护星球，也是为了保护自己。请多担待。
同时，欢迎大家关注"公鸡队之家"这个知识星球，营造一个攻击队的技术交流氛围，一个专业、前
沿、原创、不违法的红队/蓝军讨论社区，不水贴、不搬运链接，杜绝广告与招聘，做纯粹的技术
分享和技术交流。，与大家一起进步。
历史回顾
实战1‐越权漏洞反制钓鱼网站 
实战2‐文件上传反制跳板站点
参考
https://www.cnblogs.com/liuxianan/p/chrome‐plugin‐develop.html 
https://developer.chrome.com/extensions/content_scripts