ϕ(u) = F (c(u))
(2)
and then learn F (x) = F (c(0)) = ϕ(0). For the sake of
polynomial interpolation, we always assume that k < q and
each server Si is associated with a field element i ∈ Fq.
The three schemes are mainly different in their verification
techniques, which result in different numbers of servers.
A. The First Construction
In our first construction (Scheme 1),
the client will be
convinced that the ϕ(u) in (2) is correct if it takes the correct
value at a random point α ← F∗
q\[k]. In fact, when some of the
servers’ partial results are wrong, the ϕ(u) interpolated from
partial results will not take the correct value at a random point,
except with very small probability. To verify, the client must
be able to learn ϕ(α) = F (c(α)), the value of F at a random
point a = c(α). The client could choose a in KeyGen(λ, F )
and precompute F (a) for all future verifications. However,
that will require the client to memorize a, in order to choose a
random curve c(u) that passes through a in ProbGen(pkF , x),
and thus result in a scheme without public delegation. If the
client picks a in ProbGen(pkF , x) and after c(u) has been
chosen, then it will have to locally compute F (a), which is
as heavy as the outsourced computation.
Scheme 1. The k-Server Scheme Π1 (k = d(t + 1) + 1)
KeyGen(λ, F ): Choose ℓ0, ℓ1 ← Fm
q , let ℓ(u) = ℓ0 + ℓ1u and
ρi = F for every i ∈ [k], compute f (u) = F (ℓ(u)), and
output pkF = ℓ(u), vkF = (ℓ(u), f (u)) and {ρi}k
q \ [k], r1, . . . , rt ←
Fm
s=1 rsαs)) and
s=1 rsus, compute σi = c(i) for every i ∈ [k],
and output vkx = (a, α) and {σi}k
q , let a = ℓ(a), rt+1 = α−t−1(a − (x +(cid:80)t
c(u) = x +(cid:80)t+1
ProbGen(pkF , x): Choose a ← F∗
q , α ← F∗
i=1.
i=1.
Compute(i, ρi, σi): Parse ρi as F and output πi = F (σi).
Verify(vkF , vkx,{πi}k
i=1): Interpolate a polynomial ϕ(u) of degree
< k such that ϕ(i) = πi for all i ∈ [k]. If ϕ(α) = f (a), output
ϕ(0); otherwise, output ⊥.
The client may bypass this difficulty by choosing a random
line ℓ(u) = ℓ0 + ℓ1u in KeyGen, precomputing the restriction
of F on the line as f (u) = F (ℓ(u)), and making (ℓ(u), f (u))
public. Then the client may choose a random curve
c(u) = x + r1u + ··· + rtut + rt+1ut+1
(3)
q and α ← F∗
that passes through (0, x) and intersects with ℓ(u) at a random
point a = ℓ(a) = c(α), where a ← F∗
q \ [k].
After interpolating ϕ(u) = F (c(u)) from the servers’ partial
results, the verification may be done by checking whether
ϕ(α) = f (a). Now the client only needs to evaluate two low-
degree polynomials, i.e., ϕ(u) and f (u). The main idea of
speeding up the precomputation of F (a) and thus achieving
fast verification is dividing the computation of F (a) = f (a)
into two steps: (i) computing f (u) = F (ℓ(u)); and (ii)
computing f (a); and then leaving the heavier step (i) to
KeyGen such that it can be amortized.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
6601
When the partial results {πi}k
i=1 are all correctly computed,
we have that πi = F (c(i)) for all i ∈ [k]. Then the polynomial
ϕ(u) interpolated in Verify is F (c(u)). The correctness of
Π1 follows from the facts that ϕ(α) = F (c(α)) = F (a) =
F (ℓ(a)) = f (a) and ϕ(0) = F (c(0)) = F (x). Regarding
input privacy and security, we have the following:
Theorem 1. The scheme Π1 is t-private and (t, ϵ)-secure with
ϵ = d(t+1)
q−2−d(t+1) (see Appendix A).
B. The Second Construction
In our second construction (Scheme 2), the client will use
(1) to secret-share its input among the servers and use (2)
to reconstruct the output. To add verifiability, the client will
additionally secret-share a random field element α ← F∗
among the k servers using a random polynomial
q
b(u) = α + γ1u + ··· + γtut
(4)
of degree ≤ t. Each server returns not only F (c(i)) but also
b(i)F (c(i)). Finally, the client interpolates two polynomials
ϕ(u) = F (c(u)), ψ(u) = F (c(u))b(u)
(5)
of degree ≤ dt and ≤ (d + 1)t, respectively. The verification
is done by checking whether ψ(0) = αϕ(0).
Scheme 2. The k-Server Scheme Π2 (k = (d + 1)t + 1)
KeyGen(λ, F ): Let ρi = F for all i ∈ [k]. Output pkF =⊥, vkF =⊥
q , γ1, . . . , γt ←
ProbGen(pkF , x): Choose α ← F∗
s=1 γsus,
and compute σi = (c(i), b(i)) for all i ∈ [k]. Output vkx = α
and {σi}k
s=1 rsus and b(u) = α +(cid:80)t
Fq, let c(u) = x +(cid:80)t
q , r1, . . . , rt ← Fm
and {ρi}k
i=1.
i=1.
Compute(i, ρi, σi): Parse ρi as F , compute vi = F (c(i)) and wi =
Verify(vkF , vkx,{πi}k
vib(i), and output πi = (vi, wi).
i=1): Interpolate a polynomial ϕ(u) of degree
≤ dt such that ϕ(i) = vi for all i ∈ [k] and a polynomial ψ(u)
of degree ≤ (d + 1)t such that ψ(i) = wi for all i ∈ [k]. If
ψ(0) = αϕ(0), output ϕ(0); otherwise, output ⊥.
When the partial results {(vi, wi)}k
i=1 are all correctly
computed, we have that vi = F (c(i)) and wi = F (c(i))b(i)
for all i ∈ [k]. Then the polynomials ϕ(u) and ψ(u), which
are interpolated in Verify, will satisfy (5). The correctness of
Π2 then follows from the facts that ψ(0) = ϕ(0)b(0) = αϕ(0)
and ϕ(0) = F (c(0)) = F (x). The cheating servers may forge
a set of partial results which then result in two polynomials
ˆϕ(u) and ˆψ(u) in Verify. However, without knowing α,
ˆψ(0) = α ˆϕ(0) will be false except with very small probability.
Theorem 2. The scheme Π2 is t-private and (t, ϵ)-secure with
ϵ = 1
q−1 (see Appendix B).
C. The Third Construction
In our third construction (Scheme 3), the client will work
over Fq2. Instead of choosing a random curve c(u) that passes
through (0, x), it will choose a random curve
c(u) = x + r1(u − α) + ··· + rt(ut − αt)
(6)
that passes through (α, x) at a random point α ← F∗
q2 \ [k].
Each server Si will be given a curve point (i, c(i)) such that
any t servers learn no information about x. Given k = dt + 1
servers, the client would be able to reconstruct the degree ≤ dt
polynomial ϕ(u) = F (c(u)) and learn F (x) = ϕ(α) ∈ Fq.
Scheme 3. The k-Server Scheme Π3 (k = dt + 1)
KeyGen(λ, F ): Let ρi = F for all i ∈ [k]. Output pkF =⊥, vkF =⊥
ProbGen(pkF , x): Choose α ← F∗
q2 \ [k] and r1, . . . , rt ← Fm
q2, let
s=1 rs(us − αs), set σi = c(i) for all i ∈ [k].
c(u) = x +(cid:80)t
and {ρi}k
i=1.
Output vkx = α and {σi}k
i=1.
Compute(i, ρi, σi): Parse ρi as F and output πi = F (σi).
Verify(vkF , vkx,{πi}k
i=1): Interpolate a polynomial ϕ(u) of degree
≤ dt such that ϕ(i) = πi for all i ∈ [k]. If ϕ(α) ∈ Fq, output
ϕ(α); otherwise, output ⊥.
When the partial results {πi}k
i=1 are all correctly computed,
we have πi = F (c(i)) for all i ∈ [k]. Then the polynomial
ϕ(u) interpolated in Verify is F (c(u)). The correctness of Π3
follows from the fact that ϕ(α) = F (c(α)) = F (x) ∈ Fq. The
cheating servers may provide incorrect partial results, which
then result in a polynomial ˆϕ(u) ̸= F (c(u)) in Verify. The
cheating will be detected if ˆϕ(α) /∈ Fq. Therefore, ˆϕ(u) will
not allow the cheating servers to break the security unless
ˆϕ(α) ∈ Fq \ {ϕ(α)}. However, without knowing α, the last
event will not occur except with very small probability.
Theorem 3. The scheme Π3 is t-private and (t, ϵ)-secure for
ϵ = (q−1)dt
q2−2−dt (see Appendix C).
IV. PUBLICLY VERIFIABLE SCHEMES
The schemes in Section III are privately verifiable. Public
verifiability allows a third party to verify as well and thus
settle the possible disputes between client and servers. We
shall convert Π1 and Π2 to schemes with public verification.
The security of the new schemes is not information-theoretic
but relies on cryptographic assumptions (see Appendix D).
A. The First Construction
In Π1, the client accepts the servers’ partial results if and
only if ϕ(α) = f (a), where (a, α) is a private key for
verification. To obtain a publicly verifiable scheme (Scheme
4), we shall choose a cyclic group G = ⟨g⟩ of prime order q
Scheme 4. The k-Server Scheme Π4 (k = d(t + 1) + 1)
KeyGen(λ, F ): Choose ℓ0, ℓ1 ← Fm
q , let ℓ(u) = ℓ0 + ℓ1u, compute
f (u) = F (ℓ(u)); let ρi = F for every i ∈ [k]; output pkF =
ℓ(u), vkF = (ℓ(u), f (u)) and {ρi}k
q \ [k], r1, . . . , rt ← Fm
q ,
s=1 rsαs)) and c(u) =
s=1 rsus; choose a cyclic group G = ⟨g⟩ of order q; let
); let σi = c(i) for every
let a = ℓ(a), rt+1 = α−t−1(a−(x+(cid:80)t
x +(cid:80)t+1
ProbGen(pkF , x): Choose a ← F∗
i=1.
q , α ← F∗
, gα, . . . , gαk−1
vkx = (g, ga, . . . , gad
i ∈ [k]; output vkx and {σi}k
i=1.
Compute(i, ρi, σi): Parse ρi as F and output πi = F (σi).
Verify(vkF , vkx,{πi}k
i=1): Interpolate a polynomial ϕ(u) of degree
≤ d(t+1) such that ϕ(i) = πi for all i ∈ [k]. If gϕ(α) = gf (a),
output ϕ(0); otherwise, output ⊥.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
7602
and apply a new verification as follows:
(7)
To enable the verification, a key of the form vkx = {gai} ∪
{gαi} will be made public.
gϕ(α) = gf (a).
Proofs for the correctness and t-privacy of Π4 are identical
to those of Π1 and omitted. Regarding security, we show a
reduction from the (k − 1)-DHI problem to the problem of
satisfying (7) with the partial results crafted by an adversary.
Theorem 4. The scheme Π4 is t-secure under the (k−1)-DHI
assumption in G (see Appendix E).
B. The Second Construction
In Π2, not only the client’s input x is secret-shared with a
degree ≤ t curve c(u) but also a random field element α is
secret-shared using a degree ≤ t polynomial b(u). Each server
evaluates F on a point of the curve and returns both the result
and the product of this result with a share of α. The client
then interpolates ϕ(u) = F (c(u)) and ψ(u) = F (c(u))b(u). It
accepts the servers’ partial results if and only if ψ(0) = αϕ(0),
where α is a private key for verification. To obtain a publicly
verifiable scheme (Scheme 5), we shall choose a cyclic group
G = ⟨g⟩ of prime order q and apply the verification
gψ(0) = gαϕ(0).
(8)
To enable the verification, vkx = gα is made public.
Scheme 5. The k-Server Scheme Π5 (k = (d + 1)t + 1)
KeyGen(λ, F ): Let ρi = F for every i ∈ [k]. Output pkF =⊥,
ProbGen(pkF , x): Choose α ← F∗
q , γ1, . . . , γt ←
s=1 γsus, and
σi = (c(i), b(i)) for all i ∈ [k]. Choose a cyclic group G = ⟨g⟩
of order q. Output vkx = gα and {σi}k
s=1 rsus, b(u) = α +(cid:80)t
Fq, let c(u) = x +(cid:80)t
q , r1, . . . , rt ← Fm
vkF =⊥ and {ρi}k
i=1.
i=1.
Compute(i, ρi, σi): Parse ρi as F , σi as (c(i), b(i)), compute vi =
Verify(vkF , vkx,{πi}k
F (c(i)), wi = vib(i), output πi = (vi, wi).
i=1): Interpolate a polynomial ϕ(u) of degree
≤ dt such that ϕ(i) = vi for all i ∈ [k] and a polynomial ψ(u)
of degree ≤ (d + 1)t such that ψ(i) = wi for all i ∈ [k]. If
gψ(0) = gαϕ(0), output ϕ(0); otherwise, output ⊥.
Proofs for the correctness and t-privacy of Π4 are exactly
identical to those of Π2 and omitted. Regarding security, we
show a reduction from the DLog problem to the problem of
satisfying (8) with the partial results crafted by an adversary.
Theorem 5. The scheme Π5 is t-secure under the DLog
assumption in G (see Appendix F).
V. PERFORMANCE EVALUATION
In this section, we evaluate the performance of our schemes
in Section III and IV. Our evaluation will cover not only the
client’s time cost but also its monetary cost, in executing the
schemes. In particular, for monetary cost, although consump-
tions of various computing resources could be accounted, our
evaluation will be simplified and mainly base on the running
times of all algorithms.
We denote respectively with Tk, Tp, T i
c , Tv and Tn the time
needed by the client running KeyGen(λ, F ), the client running