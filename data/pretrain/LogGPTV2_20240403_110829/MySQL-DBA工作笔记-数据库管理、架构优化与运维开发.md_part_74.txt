stateUP
etho
---
## Page 497
行粒度应该是脚本。
的管理。
13.2.1
块设计的一些实践总结，最后通过标签管理来引申出业务改进的新方向和建议。
统的可扩展性和稳定性。本小节中我们会通过脚本管理、工具管理、API 管理来进行通用模
13.2
只有流程完善和统一才能够基本解决这类问题。
服务器数量的增加，人工、脚本检查的代价会越来越高，而且是一个持续地改进过程，
的绑定来进一步定位，这对于元数据的完整性检测和质量还是很不错的。
我们需要借助的是系统层面的方法来进行逻辑加固，可以根据启动的 MySQL进程和端口
6因为各种原因被遗漏了，导致后续的稽核流程都会忽略这个存在的实例，这种情况下，
们也不知道哪些实例被遗漏了，如下图13-15所示，一个服务器上有9个实例，但是实例
，先说一下边界吧，脚本管理中的脚本是不能直接执行的，运维系统中所有的任务执
通用模块设计是运维系统建设中的基础工作，这个部分的功能和性能决定了后期运维系
cmdb instance
脚本管理是运维系统的基础功能，可以把原本散乱的脚本做到标准化，以便于统一
而另外一层的稽核，可能需要根据网段进行全面地筛查和梳理，这些检查工作随着
cmdb_instance1
（1）脚本内容管理：支持Python，Shell，Java，SQL等。
从功能划分上，脚本管理大体有以下几个方面：
在这些稽核工作之外，最复杂的莫过于对于遗漏元数据的处理了，换句话说就是我
对于多网卡IP的提取，则需求根据网络配置的规则来过滤。
/sbin/ipaddrlgrep"global secondary"|awk{print $2}'|sed's/\/24//g'
可以使用下面的命令来输出VIP 信息。
instance7
运维系统中的脚本管理
通用模块设计
数据库端口问题
cmdb_instance5
cmdb_instance2
cmdb_instano
用状态问路
例不存在
图13-15
system_instance
cmdb_instance1
第13章MySQL运维基础架构设计|475
cmdb_instance8
cmdb_instance5
cmdb_instance9
cmdb_instance3
---
## Page 498
476|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
可以指定团队的一个同学来作为脚本管理员，完成这个艰巨的任务。
/usr/local/DBA_SCRIPTS，这样就可以把已经通过审核的脚本统一存放在这个路径下。
脚本路径的规划。
就是“待审核”。在此审核的意义除了做权限和质量的把控外，另一个重要的作用就是做
必经流程。如果没有审核的机制，那么脚本的规范性和质量就难以保证和衡量。
10 14of14entes
监控检系统监控sys_monitor21.sh
监控遮检系统监控
控巡检
膜本大本猫
也就是说在提交脚本的时候不需要声明脚本的路径，这个工作是审核时做的，我们
脚本可以指定一个中控服务器作为脚本的集中管理中心，比如规划路径是
脚本的审核流程和调用流程如下图13-18 所示。
对于脚本路径的规划参考如下图13-17所示。
数据库层面的就是脚本的提交，通过前端的输入，提供脚本内容，这时脚本的状态
下图13-16是一个脚本信息的列表。
在初步实现脚本的提交和查看功能之后，我觉得脚本审核应该是脚本管理中的一个
（7）脚本编辑器：ACEEditor和Monca 都是不错的选择，可以根据喜好进行选择。
（6）设定脚本域的概念，即脚本是全局可用，还是只限于特定的需求。
（5）需要制定脚本的规范和标准，对命名规范和内容做一个基本的审核。
（4）脚本需要一个基本的介绍和用法说明。
（3）参数管理：脚本配置支持多个参数，对参数个数和格式要全面支持。
(2）执行方式：本地和远程（服务器端执行脚本、客户端、中控端)。
sys_mocwitor20sh
本名称
system_manage
installhamanagesqladvisorheaty_check
脚本路径规划
图13-17
图13-16
mysql
Shell
Shel
2018-07-31None
2018-07-31None
2018-07-26
cmdb_scripts
脚本状态
G
Q
Q
Next
---
## Page 499
这样一来这就是一个闭环，目标是把整个管理融入为一个流程化的方式。
中控服务器上生成，整个过程是自动完成的。
面和文件层面的映射。
本内容，同时在文件系统中也会存在对应的文件，也就是说我们所做的变更是数据库层
我做了一个初版的脚本提示（如图13-19)，如果创建了一个脚本会发送相应的邮件，
在脚本审核阶段，
这里需要明确的是，我们在数据库中会维护这个数据结构，而且也会存储对应的脚
提交脚本申请
运维平台数据库运维管理脚本管理模块脚本创建需求-待审核
主要完成两件事情，
table_s
脚本
elect
host-pport
收件
据库
大小7KB
2018年8月13日（周一）18:07
使用脚本
图13-19
图13-18
nema
一个是脚本的路径规划；另外一个是脚本在
2018-08-1318:07隐藏信息
第13章MySQL运维基础架构设计丨477
---
## Page 500
478
|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
那么无论是 Shell，Python 都是接入层的实现，
比如 psutil的使用，或者用脚本来实现一些复杂的定制工作等。
库连接。
的接入类型，对于每个类型都需要有不同的实现。
可以自行定义核心的逻辑。
适配的方式来完成接入，而每个业务层
以打车或者是乘公交车，可以提供多种
好比你去一个地方，可以做地铁，也可
务都做到轻量化，实现目标的统一；就
系统层、数据库层来规划的，如图13-20
的场景中完成指定的任务。
入和适配，然后根据我们的需求在指定
展，更像是一个工具箱，可以做各种接
13.2.2
定义一个编码 code，我们根据编码来进行脚本的调用。
所示。
通过多种适配的方式把每个层的服
整个工具层的设计是按照接入层、
（2）连接到数据库，不同的数据库，只要我输入指定的信息，就返回给我一个数据
（1）连接系统，对于不同的实现方式，都期望做成一个接入层，类似于工厂模式。
需要首先考虑接入层的配置和实现，比如连接到系统和连接到数据库就是两个不同
1.接入层
而在调用脚本的时候，可以把它当做一个对象来管理，在数据库中对每个脚本都会
数据库层级的调用，
3．数据库月
系统服务的管理，比如查看资源状态，可以使用命令的方式或者第三方库的方式，
系统层
运维系统中的工具管理
Saltstack
Paramiko
Ansible
层
通常以 SQL 的方式来进行交互，比如查看数据库的基本信息，
而真正的逻辑部分是在SQL中实现。
接入层
图13-20
数据库层
系统层
---
## Page 501
现权限的管理和逻辑映射。
补充的工作。
建模型来实现基本的 API 管理，对 API 的权限管理和划分，甚至负载均衡都可以做一些
实现一些 API 的基础管理。API 管理的可选方案如下图13-21 所示。
的方式，绝不是必须的路径。
必为追求技术而一刀切；从运维系统的建设来说，使用API 网关和微服务只是一种可选
在这些基础之上提供的任务执行的基本单元。
过工具管理来对零散的脚本功能进一步完善，
API 网关技术。
式管理，也就是我们接下来要聊的 API管理。
13.2.3
到从库的信息等，都是通过脚本（主要核心就是SQL逻辑）的方式来实现。
下图13-22是一个基础的 API 管理的配置页面，通过这样的方式，可以很方便地实
比如我们可以基于Ansible 或者 Saltstack 建设自有的一套服务体系，在这个基础之上
我们所说的 API 主要是基于 RESTful 的设计规范，同时在技术体系上，API 管理不
“先抛开这些技术方案，我们来梳理一下，脚本管理提供了运维任务执行的方式，通
API 管理本身在行业里有很多的解决方案，比如 Swagger，还有行业内非常流行的
在这些基础之上，我们可以迭代演进，同时我们为了满足功能需求，也可以通过自
对运维系统的工具进行提炼和改进之后，我们需要的其实是一种更为通用的执行方
数据库层主要是一些基本的操作，比如查看数据库的基本信息、得到DDL 信息、得
运维系统中的 API 管理
管理
图13-21
更规范，更具有体系性。而API管理则是
I管
第13章MySQL 运维基础架构设计丨479
---
## Page 502
480|MySQLDBA工作笔记：数据库管理、架构优化与运维开发
库运维系统是5，导致数据库运维系统直接无响应，说起来真是尴尬。
任务系统中，结果在任务系统接入任务的时候，任务系统的默认并发是20，而平常数据
查看系统进程都是正常的，日志中也没有额外的信息显示，最后重启服务了事。
统的稳定性和性能问题成为了我们要格外关注的一个方面，简单来说，现状需要改变。
会感觉差不多就行了，直到有一天因为运维系统重新发布，导致一些运维处理受到影响，所以系
，问题2：最近完成了初版的任务系统部署，要逐步把一部分的数据库批量任务迁移到
问题3：使用 postman 调用单独的 API任务时，超时60秒会直接无响应，如图 13-24 所示。
报错信息如下图13-23 所示，感觉是超时自动终止了。
问题1：有一天晚上9:00左右的时候，运维系统的服务突然无响应，页面打开卡顿，
如果把近期的几个问题汇总起来，会发现有些问题开始变得严重起来。
大家对运维系统的要求是能用，好用；而对高可用和性能的关注比较少，一般来说，我们都
案例13-1：运维平台API优化实践
OpsMa
AP名
API编码
Could not get any resn
apiiptabes_add
API链接
mighthavehappen
GETPOSTPUTDELETE
图13-24
图13-23
图13-22
cmdb_server_ist资产管理cmdb.server_list
/iptables_show
/iptables_add
后端URL
基运维iptables_manage iptables_show
基础运维iptables_manageptabiesadd
018-12-292219:01.937635CS7
22:18:01.028157CS
Q
---
## Page 503
代码里有这样的一段：
都打上时间戳，这样就可以明确定位出每一步的执行时间。
的记录中的表只有一个是最新的。
为后续可以分析表的碎片率、表的数据量增长情况打好基础。
中表的元数据信息，然后把这些元数据持久化起来，通过时间维度来采集表级元数据，
看看逻辑层面是怎么回事。
响应的错误。
超时的时候，
外，其他的配置都是统一的。
是以 mange.py 方式的部署启动，线上环境是Uwsgi 的部署方式。
处理超时问题，只是暂时没有找到一个合适的配置，或者说是开关。
说起来也很尴尬。
支持有影响吗？
比测试环境10秒左右，线上环境需要近200秒。
在做这个补充操作的时候，我开始重新理解这个流程，
这个 API任务是一个看起来很普通的任务，主要的流程是通过 SQL 调用得到数据库
按照目前的分析进度，
（2）线上环境临时切换成 manage.py方式，
面对这样的一些问题，初步的感觉是这个问题本身是比较明显的，
其次就是性能，测试环境性能比线上环境还要好，这个很难解释的清楚，而且实际
整个4 步流程中，直接看是没问题的。那么我们来细化一下，我们可以在每个步骤
（4）完成持久化操作，即 insert 的操作。
（3）在持久化之前，会从已有的数据表中把最新的一条记录更新，这样持久化之后
（1）通过 ansible 的方式调用 SQL 得到表的元数据信息。
从任务的流程来说，我通过子任务描述来细化一下：
（1）测试环境的应用配置和线上配置是基本一致的，
通过反复的对比测试，可以明确以下几点：
我们最开始的着手点是分析Web 服务器层面的配置，目前直接的差别就是测试环境
首先这是一个独立的API，能够独立运行，说明业务逻辑是基本正确的。
首先是功能上的，按照目前的支持情况，是存在一些潜在问题的，会对正常的业务
（2）解析得到元数据信息。
这些问题综合起来，会让我们本来对使用还算顺利的系统充满了疑问。
问题5：使用Uwsgi 的超时参数进行对比测试，暂时没有达到预期效果。
问题4：同样的任务使用测试环境竟然会比线上环境要快，性能差异有 20倍，就好
，mange.py 的方式会一直等待任务正确执行完毕，
，这个问题陷入了僵局，该怎么办呢，先查看API的逻辑吧，
重新调用API，
除了服务器和数据库IP不同之
，突然发现了一个潜在的问题。
而Uwsgi 的方式则会报无
第13章MySQL运维基础架构设计|481
唯一的差别是产生 60 秒
，解决的方向就是
---
## Page 504
482丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
多秒，如下图13-25所示。
对一张10条记录的表做全表扫描和对一张1000万条记录的表做全表扫描差别是巨大的。
能问题没有放大，而线上环境的数据已经积累较多，达到了触发性能点的条件，就好比
比测试环境10秒左右，线上环境需要近200秒。
分钟以内即可。
系统崩溃了。
库运维系统是5，导致数据库运维系统直接无响应，说起来真是尴尬。
任务系统中，结果在任务系统接入任务的时候，任务系统的默认并发是20，而平常数据
顿，
试环境的时长是相近的。
张表，按照这种逻辑，结果会是什么样，所以到了这里问题的瓶颈已经比较明确了。
索引只有一个id主键，可以肯定这个查询是走了全表扫描，试想如果这个数据库有1000
顺着这条路来对比下有索引和不存在索引时，异步任务的性能差异。原本需要近3000
问题4：同样的任务使用测试环境竟然会比线上环境要快，性能差异有 20倍，就好
，分析：解决了API的效率问题，超时的概率就很低了。所以也就不存在并发20导致
分析：这个如果知道了原委就很明确了，因为测试环境的数据量不够，所以这个性
问题2：最近完成了初版的任务系统部署，要逐步把一部分的数据库批量任务迁移到
在线上环境添加了相关的索引之后，重新调用API，在10秒内就给出了结果，和测
仔细看来突然发现不大对劲。这个表的数据量在线上已经接近百万了。而这个表的
查看系统进程都是正常的，日志中也没有额外的信息显示，最后重启服务了事。
if
分析：这个和后端的超时配置是有关联的，适当地调大 API 的超时时间，建议在5
问题3：使用 postman 调用单独的 API任务时，超时 60 秒会直接无响应。
会把几百个MySQL实例的元数据都采集一遍，结果触发的时候，并发导致系统无响应。
分析：其实明白了原因，再加上一个背景，问题就很明显了，晚上9:00的时候会跑一批任
问题1：有一天晚上9:00左右的时候，运维系统的服务突然无响应，页面打开很卡
接下来我们再来看看之前的几个比较诡异的问题。
mysqtable_deeh
mysqi_tabie
detai_fetch
3018926-57543a
ame
SUCGES
abl
图13-25
,smaiieay
flag=1)
20101130121-071
20101024033141