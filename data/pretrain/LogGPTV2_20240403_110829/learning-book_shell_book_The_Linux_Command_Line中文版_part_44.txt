应该像其它程序一样开始工作了：
[ne@linuxbox -]$ mkdir bin
[neglinuxbox -]$ mv hello_vorld bin
[ne@linuxbox -]$ hello_world
Hello World
它的确工作了。
如果这个PATH变量不包含这个目录，我们能够轻松地添加它，通过在我们的.bashrc文件
中包含下面这一行文本：
export PATH=-/bin: *$PATH"
当做了这个修改之后，它会在每个新的终端会话中生效。为了把这个修改应用到当前的终
端会话中，我们必须让shell重新读取这个.bashrc文件。这可以通过“sourcing”.bashrc文件
来完成：
[ned@linuxbox -]$ . .bashrc
这个点（.）命令是source 命令的同义词，一个shell内建命令，用来读取一个指定的shell
命令文件，井把它看作是从键盘中输入的一样。
358
---
## Page 360
注意：在Ubuntu系统中，如果存在～/bin目录，当执行用户的.bashrc文件时，Ubuntu会
自动地添加这个～/bin目录到PATH变量中。所以在Ubuntu系统中，如果我们创建了这个
~/bin目录，随后退出，然后再登录，一切会正常运行。
25.5.1脚本文件的好去处
这个~/bin目录是存放为个人所用脚本的好地方。如果我们编写了一个脚本，系统中的每个用
户都可以使用它，那么这个脚本的传统位置是/usr/local/bin。系统管理员使用的脚本经常放
到/usr/local/sbin目录下。大多数情况下，本地支持的软件，不管是脚本还是编译过的程序
都应该放到/usr/local目录下，而不是在/bin或/usr/bin目录下。这些目录都是由Linux文
件系统层次结构标准指定，只包含由Linux发行商所提供和维护的文件。
25.6更多的格式技巧
严肃认真的脚本书写的关键目标之一是为了易于维护；也就是说，一个脚本可以轻松地被作者
或其它用户修改，使它适应变化的需求。使脚本容易阅读和理解是一种方便维护的方法。
25.6.1长选项名称
我们学过的许多命令都以长短两种选项名称为特征。例如，这个B命令有许多选项既可以用短
形式也可以用长形式来表示。例如：
[ne@linuxbox -]$ ls -ad
和：
[ne@linuxbox -]$ 1s --al1 --directory
是等价的命令。为了减少输入，当在命令行中输入选项的时候，短选项更受欢迎，但是当书
写脚本的时候，长选项能提供可读性。
359
---
## Page 361
25.6.2缩进和行继续符
当使用长命令的时候，通过把命令在几个文本行中展开，可以提高命令的可读性。在第十八章
中，我们看到了一个特别长的find命令实例：
soxa- 0090 uzod- sou-  odKs-)\ pumo.x8fe[d putz $[- xoqxnutt5ou]
pouq2 saxo- IIL0 uzod- 4ou- p adf4-)\ xo- (\.:,,O, 0090 pouqp
（..0.1120
显然，这个命令有点儿难理解，当第一眼看到它的时候。在脚本中，这个命令可能会比较容
易理解，如果这样书写它：
find playground 
-type f \
\0090 uzod- 4ou-
-execchmod0600'）*':*\
-or 
\ p odfs-
-not -pers 0711 \
-exec chmod 0711'）′':’
)
通过使用行继续符（反斜杠-回车符序列）和缩进，这个复杂命令的逻辑会被更清楚地描迹
给读者。这个技巧在命令行中同样有效，虽然很少使用它，因为输入和编辑这个命令非常麻烦。
脚本和命令行的一个区别是，脚本可能使用tab字符来实现缩进，然而命令行却不能，因为
tab字符被用来激活自动补全功能。
为书写脚本配置vim
这个vim文本编辑器有许多许多的配置设置。有几个常见的选项能够有助于脚
本书写：
:syntaz on
360
---
## Page 362
打开语法高亮。通过这个设置，当查看脚本的时候，不同的shell语法元素会以
不同的颜色显示。这对于识别某些编程错误很有帮助。并且它看起来也很酷。注意
为了这个功能起作用，你必须安装了一个完整的vim版本，并且你编辑的文件必须
有一个shebang，来说明这个文件是一个shell脚本。如果对于上面的命令，你遇到
了困难，试试：set syntaz=sh。
set hlsearch
个选项，这个单词的每个实例会高亮显示。
set tabstop=4
设置一个tab字符所占据的列数。默认是8列。把这个值设置为4（一种
常见做法），从而让长文本行更容易适应屏幕。
set autoindent
打开“autoindent”功能。这导致vim能对新的文本行缩进与刚输入的文本行相
同的列数。对于许多编程结构来说，这就加速了输入。停止缩进，输入Ctrl-d。
通过把这些命令（没有开头的冒号字符）添加到你的~/vimre文件中，这些改
动会永久生效。
25.7总结归纳
在这脚本编写的第一章中，我们已经看过怎样编写脚本，怎样让它们在我们的系统中轻松地执
行。我们也知道了怎样使用各种格式技巧来提高脚本的可读性（可维护性）。在以后的各章中，
轻松维护会作为编写好脚本的中心法则一次又一次地出现。
25.8拓展阅读
·查看各种各样编程语言的“HelloWorld”程序和实例：
http:/ /en.wikipedia.org/wiki/Hello_ world
·这篇Wikipedia文章讨论了更多关于shebang机制的内容：
http://en.wikipedia.org/wiki/Shebang_(Unix)
361
---
## Page 363
26
6”启动一个项目
从这一章开始，我们将建设一个项目。这个项目的目的是为了了解怎样使用各种各样的shell
功能来创建程序，更重要的是，创建好程序。
我们将要编写的程序是一个报告生成器。它会显示系统的各种统计数据和它的状态，并将
产生HTML格式的报告，所以我们能通过网络浏览器，比如说Firefox或者Konqueror，来查
看这个报告。
通常，创建程序要经过一系列阶段，每个阶段会添加新的特性和功能。我们程序的第一个阶
段将会产生一个非常小的HTML网页，其不包含系统信息。随后我们会添加这些信息。
26.1第一阶段：最小的文档
首先我们需要知道的事是一个规则的HTML文档的格式。它看起来像这样：
Page Title
Page body-
如果我们将这些内容输入到文本编辑器中，并把文件保存为foo.html，然后我们就能在
Firefox中使用下面的URL来查看文件内容：
file://home/usernane/foo.htn1
362
---
## Page 364
程序的第一个阶段将这个HTML文件输出到标准输出。我们可以编写一个程序，相当容易
地完成这个任务。启动我们的文本编辑器，然后创建一个名为~/bin/sys_info_page的新文件：
[ne@linuxbox -]$ vin -/bin/sys_info_page
随后输入下面的程序：
#!/bin/bash
# Progran to output a systen information page
echo **
echo *
*
echo *
echo *
*
echo *
*
echo *
Page body.*
echo *
a
echo *"
我们第一次尝试解决这个问题，程序包含了一个shebang，一条注释（总是一个好主意）和
一系列的echo命令，每个命令负责输出一行文本。保存文件之后，我们将让它成为可执行文
件，再尝试运行它：
[ne@linuxbox -]$ chnod 755 -/bin/sys_info_page
[ne@linuxbox -]$ sys_info_page
当程序运行的时候，我们应该看到HTML文本在屏幕上显示出来，因为脚本中的echo
命令会将输出发送到标准输出。我们再次运行这个程序，把程序的输出重定向到文件
sys_info_page.html中.从而我们可以通过网络浏览器来查看输出结果：
[nedlinuxbox -]$ sys_info_page > sys_info_page.htn]
[nedlinuxbox -]$ firefox sys_info_page.hta]
363
---
## Page 365
到目前为止。一切顺利。
在编写程序的时候，尽量做到简单明了。这总是一个好主意。当一个程序易于阅读和理解的
时候，维护它也就更容易，更不用说，通过减少键入量，可以使程序更容易书写了。我们当前
的程序版本工作正常，但是它可以更简单些。实际上，我们可以把所有的echo命令结合成一个
echo命令，当然这样能更容易地添加更多的文本行到程序的输出中。那么，把我们的程序修改
为：
#1/bin/bash
# Progzan to output a systen information page
Page Title
Page body .
"
一个带引号的字符串可能包含换行符，因此可以包含多个文本行。Shell会持续读取文本直
到它遇到右引号。它在命令行中也是这样工作的：
[ne@linuxbox -]$ echo *
Page Title
>
>
Page body.
>
>*
开头的“>”字符是包含在PS2shell变量中的shell提示符。每当我们在shell中键入多行
语句的时候，这个提示符就会出现。现在这个功能有点儿晦涩，但随后，当我们介绍多行编程
语句时，它会派上大用场。
364
---
## Page 366
26.2第二阶段：添加一点儿数据
现在我们的程序能生成一个最小的文档，让我们给报告添加些数据吧。为此，我们将做以下修
改：
#!/bin/bash
# Progran to output a systen information page
echo *
Systen Infornation Report
Systen Infornation Report
我们增加了一个网页标题，并且在报告正文部分加了一个标题。
26.3变量和常量
然而，我们的脚本存在一个问题。请注意字符串“SystemInformationReport”是怎样被重复
使用的？对于这个微小的脚本而言，它不是一个问题，但是让我们设想一下，我们的脚本非常
长，并且我们有许多这个字符串的实例。如果我们想要更换一个标题，我们必须对脚本中的
许多地方做修改，这会是很大的工作量。如果我们能整理一下脚本，让这个字符串只出现一次
而不是多次，会怎样呢？这样会使今后的脚本维护工作更加轻松。我们可以这样做：
#!/bin/bash
# Progran to output a systen information page
title="Systen Infornation Report*
,oa
$title
$title
365
---
## Page 367
通过创建一个名为title的变量，并把“SystemInformationReport”字符串赋值给它，我
们就可以利用参数展开功能，把这个字符串放到文件中的多个位置。
那么，我们怎样来创建一个变量呢？很简单，我们只管使用它。当shell碰到一个变量的时
候，它会自动地创建它。这不同于许多编程语言，它们中的变量在使用之前，必须显式的声明
或是定义。关于这个问题，shell要求非常宽松，这可能会导致一些问题。例如，考虑一下在命
令行中发生的这种情形：
[nedlinuxbox -]$ foo=*yes*
[ne@linuxbox -]$ echo $foo
yes
[ne@linuxbox -]$echo$foo1
[nedlinuxbox -]$
首先我们把“yes”赋给变量foo，然后用echo命令来显示变量值。接下来，我们显示拼写
错误的变量名“fool”的变量值，然后得到一个空值。这是因为当shell遇到fool的时候，它很
高兴地创建了变量fool并且赋给fool一个空的默认值。因此，我们必须小心谨慎地拼写！同样
理解实例中究竟发生了什么事情也很重要。从我们以前学习shell执行展开操作，我们知道这
个命令：
[neglinuxbox -]$ echo $foo
经历了参数展开操作，然后得到：
[nedlinuxbox -]$ echo yes
然而这个命令：
[neglinuxbox -]$ echo $fool
366
---
## Page 368
展开为：
[neglinuxbox -]$ echo
这个空变量展开值为空！对于需要参数的命令来说，这会引起混乱。下面是一个例子：
[ne@linuxbox -]$ foo=foo.txt
[ne@linuxbox -]$ foo1=foo1.txt
cp: nissing destination file operand after *foo.txt'
   ,r .
我们给两个变量赋值，foo和fool。然后我们执行cp操作，但是拼写错了第二个参数的名
字。参数展开之后，这个cp命令只接受到一个参数，虽然它需要两个。
有一些关于变量名的规则：
1.变量名可由字母数字字符（字母和数字）和下划线字符组成。
2.变量名的第一个字符必须是一个字母或一个下划线。
3.变量名中不允许出现空格和标点符号。
单词“variable”意味着可变的值，并且在许多应用程序当中，都是以这种方式来使用变量
的。然而，我们应用程序中的变量，title，被用作一个常量。常量有一个名字且包含一个值，在
这方面就像是变量。不同之处是常量的值是不能改变的。在执行几何运算的应用程序中，我们
可以把PI定义为一个常量，并把3.1415赋值给它，用它来代替数字字面值。shell不能辨别变
量和常量：它们大多数情况下是为了方使程序员。一个常用惯例是指定大写字母来表示常量，
小写字母表示真正的变量。我们将修改我们的脚本来遵从这个惯例：