title:Structured streams: a new transport abstraction
author:Bryan Ford
Structured Streams: a New Transport Abstraction
Bryan Ford
Massachusetts Institute of Technology
ABSTRACT
Internet applications currently have a choice between stream
and datagram transport abstractions. Datagrams eﬃciently
support small transactions and streams are suited for long-
running conversations, but neither abstraction adequately
supports applications like HTTP that exhibit a mixture of
transaction sizes, or applications like FTP and SIP that use
multiple transport instances. Structured Stream Transport
(SST) enhances the traditional stream abstraction with a hi-
erarchical hereditary structure, allowing applications to cre-
ate lightweight child streams from any existing stream. Un-
like TCP streams, these lightweight streams incur neither
3-way handshaking delays on startup nor TIME-WAIT pe-
riods on close. Each stream oﬀers independent data transfer
and ﬂow control, allowing diﬀerent transactions to proceed
in parallel without head-of-line blocking, but all streams
share one congestion control context. SST supports both
reliable and best-eﬀort delivery in a way that semantically
uniﬁes datagrams with streams and solves the classic “large
datagram” problem, where a datagram’s loss probability in-
creases exponentially with fragment count. Finally, an ap-
plication can prioritize its streams relative to each other and
adjust priorities dynamically through out-of-band signaling.
A user-space prototype shows that SST is TCP-friendly to
within 2%, and performs comparably to a user-space TCP
and to within 10% of kernel TCP on a WiFi network.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols; C.2.6 [Computer-Communication Networks]:
Internetworking—Standards (e.g., TCP/IP)
General Terms
Algorithms, Design, Performance, Security, Standardization
Keywords
SST, transport protocols, stream, datagram, reliable, best-
eﬀort, web transport, multimedia, mobility, fairness, TCP
1.
INTRODUCTION
Current Internet transports oﬀer applications a choice be-
tween two abstractions: reliable byte streams as in TCP [52]
or SCTP [49], or best-eﬀort datagrams as in UDP [41] or
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
DCCP [32]. Streams are convenient for large or long-running
activities that must preserve data content and order, such
as terminal sessions or ﬁle transfers, but datagrams more ef-
ﬁciently support numerous small transactions that need to
proceed independently as quickly as possible, such as DNS
requests or frames of a media stream. An application with
a mixture of many small and a few large transactions faces
awkward tradeoﬀs, because it could beneﬁt from the eﬃ-
ciency of UDP for small transactions but needs TCP to
handle the occasional large ones. Using one TCP stream
per transaction as in HTTP/1.0 [8] makes poor use of net-
work resources and is unfair to other applications when a
client uses many concurrent streams; serializing transactions
onto persistent streams increases transaction latency [38];
and implementing pipelining correctly in web servers has
proven challenging enough that seven years after the stan-
dardization of HTTP/1.1 [19], popular browsers still leave
pipelining disabled for compatibility [33, 37].
Applications face further tradeoﬀs because neither streams
nor datagrams oﬀer a means to associate related transport
instances. Applications such as FTP [42] and SIP [45] asso-
ciate transport instances manually by passing IP addresses
and port numbers in messages, causing protocol fragility and
problems traversing NATs [26]. Other applications multi-
plex many activities onto one TCP stream, as with SSH
tunneling [55], but performance suﬀers from TCP’s total
ordering of the multiplexed stream, where one lost packet
blocks delivery of all data queued behind it in the stream.
Structured Stream Transport, or SST, addresses these prob-
lems of transaction size and instance association by aug-
menting traditional streams with an explicit hereditary struc-
ture. A structured stream provides not only reliable data
delivery as in TCP, but also permits the creation of addi-
tional lightweight child streams or substreams. When an
application spawns a child from an existing stream, SST
conveys this parent/child relationship to the remote appli-
cation, ensuring that only the intended recipient can ac-
cept the new stream and preserving its structural context.
Each stream delivers data reliably and in order within that
stream, with its own receiver-directed ﬂow control, while
other streams may proceed independently with no head-of-
line blocking. SST shares sequencing, congestion control,
and security state among all streams between a pair of hosts,
minimizing per-stream state overhead and allowing the ap-
plication to use as many concurrent streams as convenient
to match its logical structure. The application may also
create and destroy streams rapidly to match the natural
longevity of its transactions, because SST eliminates TCP’s
3-way handshake delay on all streams after the ﬁrst, and
also eliminates the 4-minute TIME-WAIT period on close
that can cause TCP state overload [18]. The application
can transmit datagrams on an SST stream with best-eﬀort
delivery, but SST treats these datagrams as ephemeral sub-
streams that are semantically indistinguishable to the re-
ceiving application from ordinary substreams, allowing SST
to fall back to stream-oriented delivery for “datagrams” too
large to transmit as such without unacceptable probability
of loss. Finally, the application can prioritize SST streams
relative to each other, giving preference to interactive or
multimedia streams over background activities, and applica-
tions can use substreams for out-of-band signaling to change
priorities mid-stream, e.g., expediting the loading of images
in the currently visible area of a web page.
A user-space prototype implementation, running on real
and simulated networks, attests to SST’s practicality and
utility. The prototype achieves within 10% of the bandwidth
of mature native TCP implementations on “consumer-grade”
DSL and WiFi connections, and its congestion control is
TCP-fair to within ±2%. Under a simulated web browsing
workload, using one HTTP/1.0-style transaction per stream
with SST achieves the performance of HTTP/1.1 pipelin-
ing, with lower application complexity, and more ﬂexibility
as demonstrated by a simulation of dynamic Web download
prioritization in response to user actions.
The primary contributions of this work are: (a) the struc-
tured stream abstraction, (b) a novel protocol design that
implements this abstraction by splitting the transport into
separate stream and channel layers, and (c) a user-space
prototype for easy experimentation and deployment.
The next section introduces SST’s design as seen by ap-
plications. Section 3 explores speciﬁc ways applications can
beneﬁt from structured streams, Section 4 describes SST’s
protocol design in detail, and Section 5 experimentally eval-
uates the performance of the prototype. Section 6 relates
SST to prior work, and Section 7 concludes.
2. STRUCTURED STREAMS
This section describes the structured stream abstraction
as viewed by an application using SST, leaving technical
details of the SST protocol itself to Section 4.
Like a TCP stream [52], an SST stream is a reliable, byte-
oriented conversation between applications. Apart from the
ability to create substreams, SST streams are semantically
almost identical to TCP streams, so porting application pro-
tocols from TCP to SST is straightforward.
2.1 Creating and Accepting Substreams
An application can use an SST stream not only to transfer
data but also to “fork oﬀ” child streams or substreams. The
terms “substream” and “child stream” refer only to hered-
itary relationships between streams: once created, there is
no semantic diﬀerence between a “top-level” stream and a
substream. SST extends the traditional sockets API with
three new operations for creating substreams:
• create_substream(stream) → new stream:
• listen_substream(stream):
• accept_substream(stream) → new stream:
indicates willingness to accept substreams on a stream.
creates a new child stream from an existing stream.
accepts a substream initiated by the other endpoint.
An application calls listen_substream to indicate will-
ingness to accept new streams as children of an existing
stream, much as the application would use a traditional
listen socket to receive incoming top-level streams. The
peer application on the existing stream’s other endpoint
may then initiate a substream by calling create_substream
on the existing stream. SST notiﬁes the listening applica-
tion of the incoming substream, and the listener accepts it
via accept_substream. Once created and accepted, child
streams are independent of and may outlive their parents.
SST endeavors to make streams “lightweight enough” for
the application to use a new stream for each logical transac-
tion regardless of size, enabling the application to “frame”
its protocol data units according to its needs [14].
SST ensures reliability and data ordering within a stream
but not between streams, so the loss and retransmission of
a data segment on one stream does not delay communica-
tion on other streams. If a client issues many requests to a
server at once on separate streams, for example, the server
may accept several requests concurrently and respond to
them in any order, completing “easy” requests quickly with-
out blocking them behind long-running requests submitted
earlier. Each stream provides independent ﬂow control, so
the receiving application may accept data at diﬀerent rates
on diﬀerent streams, or accept data continuously on one
stream while temporarily blocking the sender on another.
SST’s ﬂow control applies to new child streams as well as
to stream data, allowing a server to prevent its clients from
overloading it with too many concurrent requests.
2.2 Datagrams as Ephemeral Substreams
SST has a send_datagram operation providing best-eﬀort
delivery, but SST treats this operation as equivalent to cre-
ating a child stream, sending data on it, and closing the child
with a short linger timeout to avoid buﬀering the sent data.
SST’s receive_datagram operation is similarly a shorthand
for accepting a substream, reading data, and closing the sub-
stream. Since an SST “datagram” is semantically just an
ephemeral substream, the receiver can accept the substream
with accept_substream instead of receive_datagram, and
can then read the substream’s content as it would with a
normal substream. The receiver gets a connection reset if it
ever tries to send on this ephemeral substream. The receiv-
ing application thus cannot tell whether the sender invoked
send_datagram or the equivalent sequence of operations.
SST can use an optimization described later to deliver
best-eﬀort datagrams eﬃciently and statelessly as in data-
gram transports such as UDP or DCCP. Because the re-
ceiving application cannot tell whether this optimization
was used, however, the sending SST is free not to use it
when network conditions may not be suitable.
If for ex-
ample a datagram to be sent is large enough that at least
one fragment is likely to be lost, given the current loss rate
computed from congestion control statistics, SST forgoes
the datagram delivery optimization and sends the datagram
instead on a “real” substream, transparently to the appli-
cation. SST thus solves the “large datagram” problem of
traditional best-eﬀort services, where datagram loss rates
quickly become unacceptable as datagram size increases.
2.3 Other Application-Visible Features
SST may be deployed either at system level as a “native
transport” alongside TCP and UDP, or at application level
atop UDP. The latter usage allows applications to ship with
a library implementation of SST without requiring special
privileges or extensions to existing operating systems, and
they can use it as they would SSL/TLS [17] or DTLS [43].
Deploying SST atop UDP also allows it to traverse existing
NATs that only natively support TCP and UDP.
Since communication security is now essential for most
applications on today’s Internet, but IP-layer security [31] is
still not widely deployed other than for VPNs, SST provides
optional transport-layer security built on standard practices.
3. USING STRUCTURED STREAMS
To examine the practical beneﬁts of structured streams,
this section brieﬂy explores requirements and challenges faced
by several classic application protocols. We use these pro-
tocols for illustrative purposes only, without implying that
speciﬁc applications should necessarily be migrated to SST.
3.1 Application Protocol Modularity
FTP [42] modularizes its operation across multiple trans-
port instances: one TCP stream for control signaling and a
separate stream for each ﬁle transfer.
Internet telephony
similarly uses a TCP stream for call setup via SIP [45],
and separate UDP streams for media delivery via RTP and
RTCP [46]. With SST, such applications can use a top-level
stream for control and simply open substreams for data com-
munication. Since SST conveys the parent/child relation-
ship on substream creation, the application protocols need
not communicate IP addresses or port numbers explicitly
to associate the related transport instances, simplifying the
application and avoiding diﬃculties traversing NATs [26].
3.2 Transactional Protocols
The need to support transaction-oriented applications ef-
ﬁciently has long been recognized [9, 11, 13]. In the absence
of a general transport satisfying this demand, HTTP/1.0 [8]
used a separate TCP connection for each request, each re-
quiring a 3-way handshake and TIME-WAIT period after
close, leading to unacceptable overhead as the Web became
riddled with small images. Since TCP congestion control
distributes available bandwidth per stream, opening many
concurrent TCP connections is also unfair to other users [3].
HTTP/1.1 [19] allows reuse of a TCP connection for suc-
cessive requests, reducing the total number of connections,
with the disadvantage of serializing requests and often mak-
ing pages take longer to load [38]. In theory requests may
be pipelined to improve latency, but seven years after the
publication of HTTP/1.1, today’s common browsers still
avoid pipelining by default because many servers implement
it incorrectly [33, 37]. Pipelining also ﬁxes response order
to request order, blocking the server from satisfying simple
static content requests promptly until it ﬁnishes processing
dynamic content requests submitted earlier for example.
HTTP could beneﬁt from UDP’s eﬃciency—particularly
for the many conditional GET requests browsers use to test
the freshness of cached objects, whose responses are usually
small—but HTTP cannot use UDP because responses may
be arbitrarily large, and the client has no way of knowing
this when it submits the request. SIP supports operation
over UDP, but gets into trouble for precisely this reason [24].
With SST, applications can use one stream per transac-
tion, with minimal startup latency on all streams after the
ﬁrst, and without serialization of independent requests or
long-term state retention after close. Alternatively, appli-
cations can use SST as a best-eﬀort datagram transport,
sending requests and replies in separate ephemeral streams,
achieving UDP’s statelessness for small messages without
Figure 1: SST Protocol Architecture
UDP’s message size limits. In either case, SST ensures fair-
ness relative to TCP applications that use only one stream,
since all of an application’s SST streams between the same
pair of hosts share a single congestion control context.
3.3 Out-of-Band Signaling
Many application protocols require some form of out-of-
band signaling, and traditionally must use ad hoc methods
to implement it due to the lack of transport layer support.
Internet telephony sets up two separate UDP media sessions,