使用基于 weight/percentage-based 的路由，对来自多个上游的数据进行拆分。
运行时对来自上下游数据的嗅探。
2、通过requestheader设置，支持的配置项有：
请求重试和超时设置 Envoy 有两种方式来设置请求重试。
任然会转发数据到该upstream server。
将会在client和upstream server之间设置TCP代理。Upstream 负责断开该连接，否则 Envoy
接都会被转换成 WebSocket 的连接。如果配置为 true,Envoy 对于该路由的第一个请求需带
路由层面对 Websocket upgrades。配置该规则后，来自 HTTP/1.1客户端到该路由规则的连
前缀重写(prefix)。
true即可。这两个参数不能同时使用。
strict_dns or logical_dns 类型的场景，其它集群类型不起作用，将 auto_host_rewrite 设置
2、动态配置。根据upstream 主机的 DNS 类型动态配置，具体的值是由cluster manager从
host重写，支持两种重写方式：
路由层面对 Path/host 重定向。
有配置，该virtualhost将不会对TLS有要求。
 2、external_only:只要求外网请求使用TLS。如果来自外网的请求没有使用TLS，如果改参数没 
upstream中选出来的，其主机名作为重写的值。这种方式只用在route的目的集群是
1、固定值。host_rewrite参数配置。
1、all:所有请求都必须使用TLS。如果请求没有使用TLS，返回302。
建议在反向代理层面使用基于regex/slug的路由，当然了，未来我们会根据需求添加对它的支持。
用程序来判定路由规则是否与其它规则冲突很困难，所以,目前暂不支持。由于这个原因，我们不
2.2 重试条件:可以根据应用的需求配置触发重试的条件。例如：5xx、4x×等等。
2.1最大重试次数：每次重试之间会使用指数退避算法。另外，所有重试都包含在整体请求
1、通过route设置。
WebSocket upgrade headers。如果没有添加该header，请求将被拒绝。如果设置了,Envoy
超时之内。这避免了由于大量重试而需要较长的请求时间
微服务－ ServiceMesh 数据面板 Envoy 简介
29
---
## Page 35
例如：
TCP代理配置如下：
访问哪些IP段和哪些端口的服务。
在TCP 代理层还可以配置route 策略，比如：允许哪些IP段和哪些端口进来的请求访问，允许
合使用，例如 MongoDB filter 或者限速filter。
户端与 upstream 服务集群之间的连接代理。TCP 代理既可以单独使用，也可以与其它fiter 组
TCP 代理，L3/L4层连接的转发。这应该是 Envoy 最基础的功能。一般是作为 downstream 客
TCP proxy
HTTP/2的多路复用方式实现细节。
HTTP/2)，向上层提供统一的接口。用户不用关心底层是基于HTTP/1.1的多线程还是基于
对于 HTTP 类型，Envoy 提供了对连接池的抽象，连接池屏蔽底层协议类型(HTTP/1.1、
Connection pooling
其中：重定向、超时、重试对于 websocket upgrades 是不支持的。
30ServiceMesh 数据面板 Envoy 简介－微服务
●route_config：filter 的路由表。
·stat_prefix：统计数据前缀，主要是用于区分统计数据。对于非 TLS 的转发支持绝对 urls。
●对于非TLS 的转发支持绝对urls。
·基于路由的 hash 负载均衡。需要在 header 中设置 hash 使用的策略。
config
name":
"tcp_proxy",
---
## Page 36
Envoy 在传输层和应用层两个层给予gRPC的高度支持。
gRPC 的支持
TPC 代理支持的一些统计数据：
简单说，就是上下游服务的访问控制。
· gRPC-Web is supported by a filter that allows a gRPC-Web client to send requests to
·当装了bridge filter后,bridge fiter 除了收集全局HTTP统计之外，桥接过滤器还收集每个RPC
·gRPC 运行时对于一些语言而言还是不太成熟。为此，Envoy支持一个叫 gRPC bridge 的 fiter,
·Envoy 是当前极少数能同时正确支持HTTP/2trailers和传输gRPC请求和响应的的HTTP代理
·downstream_cx_tx_bytes_total 发送给下游的总字节数
·downstream_cx_no_route 不匹配route的总数 
·downstream_cx_tx_bytes_buffered Gauge 当前为下游服务缓存的字节数
·downstream_cx_total 处理的连接总数
统计信息。
downstream_flow_control_resumed_reading_total 被流控控制重新从下游服务读取数据
downstream_flow_control_paused_reading_total 被流控暂停从下游服务读取数据的次数
 Envoy over HTTP/1.1 and get proxied to a gRPC server. It's under active development
目的server。响应会被转换成HTTP/1.1返回。
的次数
1024,2048-
tcp_proxy
config
destination_ports'
"2001:abcd::/64"
0
微服务－ServiceMesh 数据面板Envoy 简介
/24
3
---
## Page 37
Envoy 集群管理器管理所有 upstream 集群节点：
(HTTP/1.1, HTTP/2)等。
机可用和健康，负载均衡，网络连接数据的本地存储，连接类型(TCP／IP,UDS)，协议类型
一个连接是 L3 / L4 层的连接还是一个新的 HTTP 流。
/L4 层的连接或抽象的HTTP 连接池的数据。在 fiter 处理阶段通过对原始字节流的分析确定是
代理服务。
集群管理器(Cluster manager)
高级概念
条件：
Envoy支持HTTP/1.1连接到WebSocket连接的切换(默认是支持的)。
WebSocket的支持
2、HTTP 路由规则中显示的设置了对 websocket的支持(use_websocket)。
1、 client 需要显示添加 upgrade headers 。
32ServiceMesh 数据面板 Envoy 简介－微服务
●通过动态的集群发现API(CDS)。
·通过静态的配置文件。
集群管理器向 filter 链暴露一组 APl，这组 APl 允许 filters 获取发往 upstream 集群的 L3
Envoy 集群管理器管理所有 upstream 集群节点。
·支持 gRPC-web。通过 filter 能够将使用 HTTP/1.1 发送到Envoy 的 gRPC-Web 客户端请
除了基本的连接类型分析外，集群管理器还要处理一些列的复杂工作，例如：知道哪些主
upstream 集群节点都由一些列L3 / L4 / L7 层filter 链组成，它们可用于任意数量的不同
CDS：Cluster discovery service，是一个可选的APl，Envoy用它来动态的获取cluster 
gRPC 服务。
求代理到 gRPC server。该feature 正在开发阶段。
and is expected to be the successor to the gRPC bridge filter.
关于 Envoy 对 WebSocket 的支持可以参考 Nginx 对 WebSocket 的支持。
Envoy对WebSocket的支持与Nginx对WebSocket的支持是相同的。
由upstream的client来主动关闭。
Envoy对WebSocket的代理是TCP层，它理解不了WebSocket层的语义，所以连接断开应该
重写,traffic shifting and spliting 都是支持的。
的特性它不支持，例如：重定向、超时、重试、限速、shadowing。但是,prefix 重写,host
---
## Page 38
根据配置的不同，Envoy支持3种健康检查方式：
主动健康检查
Health checking
服务发现有几种方式：
 Service discovery(SDS)
集群管理器配置项如下：
1.基于 HTTP
4、Service discovery service (SDS)。
3
1、静态配置。通过配置文件配置(IP/port、unix domain socket等)。
Envoy 向 upstream 节点发送一个 HTTP 请求，返回 200 代表健康,返回 503 代表该host
manager的成员。
影响。
这种模式是前两种模式的高级版，第一种方案数据不一定准，第二种请求太频繁会对性能有
1.3 Pass through with caching 
健康检查接口，返回 200 或 503。
与第一种模式不同，
1.2 Pass through
ing 返回 200 或者 503。
这种模式Envoy不会将健康检查的请求转发给本地的服务，
1.1 No pass through
基于 HTTP 的健康检查支持3种策略：
不再接收请求/流量。
 Original destination。
基于DNS的服务发现。
对其进行服务发现、
"local
"clusters"：[］，#该envoy upstream 集群列表，集群管理器会
：这种模式 Envoy 会将健康检查的请求转发给本地服务，调用本地服务的
微服务－ServiceMesh数据面板Envoy简介
而是根据当前节点是否被 drain-
33
---
## Page 39
基于成功率的检查在两种情况下是不处理的：
Outlier detection 有两种检查类型：
节点是否是正常的。
漏的情况，而 Outlier detection 则是弥补这个“漏洞”的。它通过更高级的一些算法来判定该
Envoy 通过 Outlier detection 进行钝态(实在是找不出太合适的词)检查。
Passive health checking(钝态检查)
1.Redis
stream-healthchecked-cluster 是否和该选项值匹配，如果不匹配则会忽略该请求。
1.L3/L4
项来支持。如果设置了该选项，在健康检查时会对比
，但是这种配置复杂度非常高。Envoy 采用的方案是在 header 中添加一个 service_name 选
务已经改变(在容器服务中尤为明显)。
当其中一个节点挂掉后又“回到平台”且使用的是同一个IP是有可能的，该节点对外提供的服
基于 HTTP 的健康检查支持身份认证
·基于成功率
·基于连续的 5xx错误码
 Envoy 向 Redis 发送一个 PING 命令,返回 PONG 代表健康,其它的代表不健康。
点返回该值，则代表健康，否则不健康
基于L3/L4层的健康检查,Envoy 向 upstream 节点发送定义好的一个字符串.如果 upstream 节 
均衡列表中移除。
34
时(默认100)。
单个节点的请求数量在聚合区间内少于outier_detection.success_rate_request_volume值
1.针对集群中单个节点
Outlier detection,
 upstream 成员连续N次返回5xx错误码，N默认为5(可配置)
有时候一个节点虽然在进行主动健康检查时是正常的，但是会存在某些不正常的状态被遗
如果你在云平台中用了最终一致性的服务发现或者容器服务时，赶上服务水平扩展，这时
于 upstream 节点而言，则是新请求新连接。
这是推荐的一种模式。健康检查时 Envoy 与 Envoy 之间是长连接，
服务加载到缓存中。
该模式加了个缓存的支持，在缓存周期内结果直接从缓存中取，缓存失效后再请求一次本地
ServiceMesh 数据面板 Envoy 简介－微服务
，用来检查某些集群成员在给定范围内是否“正常”,不正常则将其从负载
一种解决方案是对不同的服务使用不同的健康检查URL
header
中的
不会消耗太大性能；对
 x-envoy-up-
---
## Page 40
断路器配置：
pending 请求数、集群最大支持的请求数(适用HTTP/2)、集群存活最大探测次数。
通过redis来做后端存储。
务那里查询全局限速进行判断。Envoy 是通过一个全局的 gRPC 限速服务来实现全局限速。
对整个 cluster 进行限制，这个时候全局的限速就非常有必要了。Envoy支持全局限速(L3 /
Circuit breaking(断路器)
L4、HTTP 都支持)，它有一个集中的限速服务，对于到达该集群的每个连接，都会从限速服
主动健康检查和钝态检查可以配合使用，也可以单独使用。
配置项：
·max_retries：给定时间内Envoy与请求upstream集群时的最大重试次数，该值不宜设置过
·max_requests：给定时间内最大请求数，该参数适用于HTTP/2，HTTP/1.1通过max_-
·max_pending_requests:等待线程池有可用连接时的最大排队请求数量。该参数适用于
·max_connections：Envoy 与 upstream 集群所有节点能够建立的最大连接数量。该参数
 connections来限制。(默认 1024)。
Envoy 的断路器可以控制 envoy 与 downstream 节点的最大连接数、集群最大支持的
 断路器是一种分布式的限速机制，它针对每个upstream 的host 设置，有时候也需要针
大，重试过多可能会带来更多其它的级联故障，甚至导致雪崩。(默认 3)。
HTTP/1.1，HTTP/2采用多路复用方式，无需排队请求(默认1024)。
适用于HTTP/1.1，因为HTTP/2是使用单个连接与每个host建连，连接复用(默认1024)。
小于 outlier_detection.success_rate_request_volume 时。
集群中 outlier_detection.success_rate_minimum_hosts 个节点在检查周期内请求量都 
2.集群级别
max_retries":
+9
..."，#默认1024
微服务－ServiceMesh 数据面板Envoy 简介
1024
35
---
## Page 41
listener 类型:
务与远端服务之间流量的转发。
流量的消息总线角色。在这种场景中，
Envoy 启动多个 listeners 用于本地流量转发和服务与服务之间的流量转发。
Circuit breaking(断路器）
根据不同的使用场景，
Envoy部署方式
看下热更新的过程：
不会丢失任何连接。
具备自身热重启的功能。这意味着 Envoy 能够全自动的更新自己(包括代码和配置的变更)，而
热更新
● Service to service egress listener
6.Envoy的热重启的设计支持新老进程同时存在时也能正常工作。新旧进程之间的通信只能是通
5.驱逐过程结束后,新的Envoy进程告诉旧的Envoy进程关闭自己。参数--parent-shut-
始化服务发现和健康检查，其它)。然后，新的进程开始监听服务，并告诉老的Envoy进程进入驱
3.新的进程在接管旧进程的unixdomainsocket前，先完成一系列的初始化(比如：加载配置,
2.新旧进程通过RPC协议进行通信；
36
过unix domain socket。
down-time-s 用来配置关闭自己的超时时间；
个值，进程会强制关闭和回收；
4.在旧进程驱逐阶段,旧的进程尝试平滑地关闭已存在的连接。具体如何做要依赖于配置的filters
这是最简单的部署和使用方式，在这种方式中Envoy作为内部与外部服务通信的总线。
到 Envoy 的等等。
逐阶段；
1.统计数据和一些lock都放到了共享内存中。进程在重启时这些数据是持久的，不会丢失;