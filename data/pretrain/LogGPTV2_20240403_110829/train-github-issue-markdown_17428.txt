### Issue Description

When using the `slice` pipe in conjunction with `*ngFor` in Angular, it can lead to errors, especially when developer mode is enabled (as of Angular version alpha-55).

### Code Example

Here is a simplified example that demonstrates the issue:

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'users-cmp',
  template: `
    <div *ngFor="let user of users | slice:0:2">
      {{ user.name }}
    </div>
  `
})
export class UsersCmp {
  users: Array<{ name: string }> = [
    { name: 'Cedric' },
    { name: 'Agnes' },
    { name: 'Cyril' }
  ];
}
```

### Error Message

The following error message is thrown:

```
Expression 'users | slice:0:2 in UsersCmp@0:5' has changed after it was checked.
```

### Behavior

- **Runtime:** The application runs as expected, despite the errors.
- **Unit Tests:** Unit tests fail due to the above-mentioned error.

### Related Issue

This issue is likely related to [Angular Issue #5941](https://github.com/angular/angular/issues/5941).

### Suggested Workaround

To avoid this issue, you can use a custom method in your component to handle the slicing logic, rather than relying on the `slice` pipe. Hereâ€™s an example:

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'users-cmp',
  template: `
    <div *ngFor="let user of slicedUsers()">
      {{ user.name }}
    </div>
  `
})
export class UsersCmp {
  users: Array<{ name: string }> = [
    { name: 'Cedric' },
    { name: 'Agnes' },
    { name: 'Cyril' }
  ];

  slicedUsers(): Array<{ name: string }> {
    return this.users.slice(0, 2);
  }
}
```

This approach should prevent the error and ensure that both runtime and unit tests work as expected.