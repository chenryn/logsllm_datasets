      int v14; // [esp+24h] [ebp-18h]
      int v15; // [esp+28h] [ebp-14h]
      int v16; // [esp+2Ch] [ebp-10h]
      int v17; // [esp+30h] [ebp-Ch]
      int v18; // [esp+34h] [ebp-8h]
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v10 = this[2] + 5 * a2 + 8; // 根据传入的a2取flag的各个部分
      for ( i = 0; i > 1) | v8;
          ++v7;
        }
        while ( v6 ); 
        *((_BYTE *)&v16 + v2++) = v7 - 1;
        --v3;
      }
      while ( v3 );
      for ( j = 0; j > (8 - *((_BYTE *)&v15 + j))) > 1) | v8;
            ++v7;
        }
        while ( v6 ); 
        *((_BYTE *)&v16 + v2++) = v7 - 1;
        --v3;
    }
    while ( v3 );
x64dbg调试发现`rcl`下面存在一个`jb`指令，这个指令受`CF`位的影响，当`CF`为1时跳转指令成立，这里跟`dl`的值有关，当`dl`产生进位时`CF`置`1`，跳转成立，出循环：
经测试可以发现当`0x31`左移`3`次时产生进位，所以此时`ebx`值为3，那么`ebx`中记录的就是左移的位数：
同理，往下对`0x31`进行右移，当产生进位时`CF`置`1`，跳出循环，`ebx`记录右移次数减一的值：
这一部分在IDA反编译的不太一样，按照动态调试中体现的汇编更容易理解：
4次循环之后得到，分别对应`0x31 0x32 0x33
0x34`，左边的为左移到进位的次数；右边为右移次数减一，这么理解比较奇怪，我觉得可以理解为从右边0的个数：
如：`0x31`，二进制为 `0011 0001`，所以此时右边0的个数为0
​ `0x32`，二进制为 `0011 0010`，所以此时右边0的个数为1
​ `0x34`，二进制为 `0011 0100`，所以此时右边0的个数为2
第二个循环：
    for ( j = 0; j > (8 - *((_BYTE *)&v15 + j))) > (8 - 左移次数)) > res1;
        res3 = (flag > (8 - 左移次数)) = 4 )
        {
            v9 = sub_402DC0(v17 + 26);
            v14 -= *(unsigned __int8 *)(v9 + i);
            v10 = sub_402DC0(v17 + 26);
            *v15 |= *(unsigned __int8 *)(v10 + i + 16) =4`时，是直接取`res1`：
和`res3`进行运算：
    *v15 |= res3 > 1
    def generate_0(c):
        res1 = check_0(c) + check_1(c)
        res2 = ((c > res1
        res3 = ((c >> (8 - check_1(c))) > res1)
        return [res1, res2, res3]
第二部分就是通过`03\"3 0 203\"
$`进行字符串排除，这里可以判断flag的范围应该是`A-Za-z0-9`，通过前面的分析知道每个字符运算的结果互相独立，但是这里可能存在重复的情况，所以先用`set`去重，然后对`set`中每个元素作为`key`，创建一个字典，如果`check`的结果为`key`则加入该`key`的`value`中，最后返回结果：
    def check_part(c):
        tmp = list(set('  03\"3   0 203\"   $ '))
        tmp2 = check_0(c) | (16 * check_1(c))
        for i in tmp:
            if tmp2 == ord(i):
                return i
        return ''
    def classify():
        for_each = string.ascii_lowercase + string.ascii_uppercase + string.digits
        second_part_res = '  03\"3   0 203\"   $ '
        res = {}
        d = dict.fromkeys(list(set(second_part_res)))
        # print(d)
        for i in list(set(second_part_res)):
            d[i] = []
        for i in for_each:
            tmp = check_part(ord(i))
            if tmp:
                d[tmp].append(i)
        return d
第三部分，`test_1`作为for循环中前四部分的计算，这里需要注意`v14`要代入并返回，经过`8`次运算后，将结果或运算成一个`DWORD`值，与`first_part`对应的`DWORD`进行对比，如果相等则返回此时循环的`4`个字符，这里是可以得到唯一值的，最终拼接得到flag：
    def test_1(c, v14):
        exam = {c: generate_0(ord(c))}
        v14 = v14 - (8 - exam[c][0])
        tmp = exam[c][1] << v14
        return tmp, v14
    def test_2(c, v14):
        exam = {c: generate_0(ord(c))}
        v14 = v14 - exam[c][0]
        tmp = exam[c][2] << v14
        return tmp, v14
    def check_first_part(second_part, first_part):
        for i in d[second_part[0]]:
            for j in d[second_part[1]]:
                for k in d[second_part[2]]:
                    for m in d[second_part[3]]:
                        v14 = 0x20
                        tmp, v14 = test_1(i, v14)
                        tmp2, v14 = test_1(j, v14)
                        tmp3, v14 = test_1(k, v14)
                        tmp4, v14 = test_1(m, v14)
                        tmp5, v14 = test_2(i, v14)
                        tmp6, v14 = test_2(j, v14)
                        tmp7, v14 = test_2(k, v14)
                        tmp8, v14 = test_2(m, v14)
                        tmp = tmp | tmp2 | tmp3 | tmp4 | tmp5 | tmp6 | tmp7 | tmp8
                        if tmp == first_part:
                            return i + j + k + m
    d = classify()
    s2 = '  03\"3   0 203\"   $ '
    s = ['08', 'EA', '58', 'DE', '94', 'D0', '3B', 'BE', '88', 'D4', '32', 'B6', '14', '82', 'B7', 'AF', '14', '54', '7F', 'CF']
    flag = 'swpuctf{'
    for i in range(0, 5):
        first_part = int(s[3 + 4 * i]+s[2 + 4 * i]+s[1 + 4 * i]+s[4 * i], 16)
        second_part = s2[i*4:i*4+4]
        res = check_first_part(second_part, first_part)
        if i == 4:
            flag += res
            break
        flag += res + '-'
    flag += '}'
flag：
    swpuctf{we18-l8co-m1e4-58to-swpu}
提交BUUCTF验证：