RANDOM=
USER=当前系统登陆的用户名
HOME=当前用户家目录
PWD=当前目录
HOSTNAME=主机名
SHELL=当前用户的解释器
UID=
PATH=外部命令路径所在地,将创建的脚本文件放入PATH路径下,可实现直接运行
\[root@server0 \~\]# echo \$PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
PS1=
例如:
\[root@server0 \~\]# echo \$PS1
\[\\u@\\h \\W\]\\\$
\[root@server0 \~\]# PS1=haha
haha \-\--将提示符\[root@server0 \~\]变成了haha,重启终端恢复
PS2=二级提示符
例如:
\[root@server0 \~\]# ls \\
\>
\[root@server0 \~\]# PS2=你好
\[root@server0 \~\]# ls \\
你好 \-\-\--将\>变成了'你好'
位置变量: bash内置,存储执行脚本时提供的命令行参数
由系统定义完成,由系统赋值完成
表示为 \$n,n为序号 \$1、\$2、.. .. \${10}、\${11}、.. ..
为了降低脚本的使用难度,提高用户的体验度,采用交互式传递参数方法
预定义变量: bash内置,可直接调用的特殊值,不能直接修改
> 由系统定义完成,由系统赋值完成
>
> 预定义变量\$0、\$\$、\$?、\$#、\$\*
\$0 脚本名称
\$\$ 当前进程的进程号(PID)
\$# 已加载的位置变量的个数
\$\* 所有位置变量的值
\$? 程序退出后的状态值, 0表示正常,其他值异常
\$! 最后一个程序的进程号
\$@ 与\$\*号类似.可当做数组使用
**stty**终端显示控制
将回显功能关闭（stty -echo），
将回显功能恢复（stty echo）。
例如:
创建用户,输入密码时盲输
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
read -p \"请输入用户名:\" n
useradd \$n
stty -echo
read -p \"请输入密码:\" p
stty echo
echo
echo \$p \| passwd \--stdin \$n
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
**export发布全局变量**
> 默认情况下，自定义的变量为局部变量，只在当前Shell环境中有效，而在子Shell环境中无法直接使用。比如已定义的SCHOOL变量，当进入到sh或bash子Shell后，变量SCHOOL将处于未定义的状态：
\[root@server0 \~\]# p=20
\[root@server0 \~\]# echo \$p
20
\[root@server0 \~\]# bash \-\-\--进入bash 的子shell
\[root@server0 \~\]# echo \$p
\-\--bash 进入子shell 后变量p的值无效了
\[root@server0 \~\]# exit
exit
若希望定义的变量能被子进程使用，可以使用export命令将其发布为全局变量。使用export发布时，只需指定变量名（可以有多个）即可，也可以通过export命令直接设置新的全局变量：
第一种定义方法:通过export命令直接设置新的全局变量
\[root@server0 \~\]# export p=20
\[root@server0 \~\]# echo \$p
20
\[root@server0 \~\]# bash
\[root@server0 \~\]# echo \$p
20
\[root@server0 \~\]#
第二种定义方法:发布已定义的变量
\[root@server0 \~\]#p=20
\[root@server0 \~\]# export p
                            //发布已定义的变量
脚本格式
1,定义解释器
2,注释
3,代码
## date  ：  设定 和 显示日期
date MMDDhhmm\[cc\]YY.ss\
  date \[+FORMAT\]\
  %Y:四位年份\
  %y：两位年份\
  %m:月\
  %M：分钟\
  %d：日\
  %h：英文简写的月\
  %H：时\
  %S：秒\
  %s：现在距离1970年1月1号0点0分（unix元年）的秒数，timestamp（时间戳）\
  %D:月/日/年\
  %F:年-月-日\
  %T:时：分：秒
\[root@server0 \~\]# date +%Y%m%d
20190111
\[root@server0 \~\]#
**read作用:**
1.产生交互
2.自动记录用户在键盘上的输入
3.自动将用户在键盘上的输入,赋值给一个变量储存
为了不至于使用户不知所措、莫名其妙，推荐的做法是结合-p选项给出友好提示：
\[root@svr5 \~\]# read -p \"请输入一个整数：\" i
使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据脚本都必须继续执行，那么可以使用-t选项指定一个计时器。
-t选项指定read命令等待输入的秒数。当计时满时，read命令返回一个非零退出状态;
#! /bin/bash
read -t 5 -p \"please enter your name:\" name #5s
-n选项，后接数值1，指示read命令只要接受到一个字符就退出。只要按下一个字符进行回答，read命令立即接受输入并将其传给变量。无需按回车键。
#!/bin/bash
read -n1 -p \"Do you want to continue \[Y/N\]?\" answer
case \$answer in
Y \| y)
echo \"fine ,continue\";;
N \| n)
echo \"ok,good bye\";;
\*)
echo \"error choice\";;
esac
exit 0
# NSD SHELL DAY02
1.  [**案例1：Shell中的数值运算**](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY02/CASE/01/index.html#case1)
2.  [**案例2：条件测试操作**](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY02/CASE/01/index.html#case2)
3.  [**案例3：使用if选择结构**](http://tts.tmooc.cn/ttsPage/LINUX/NSDTN201801/SHELL/DAY02/CASE/01/index.html#case3)
**Shell数值运算**
**条件测试**
**使用If选择结构**
## Shell中的数值运算: expr、\$\[ \]、let等整数运算工具(不支持小数)
**1）使用expr命令**
乘法操作应采用 \\\*
转义，避免被作为Shell通配符；参与运算的整数值与运算操作符之间需要以空格分开，引用变量时必须加\$符号。
\[root@server0 \~\]# expr 1 + 1
2
\[root@server0 \~\]# expr 1+1
1+1
\[root@server0 \~\]# expr 2 \\\* 2 \-\--\*本为通配符,需取消
4
\[root@server0 \~\]# expr 2 \'\*\' 2
4
\[root@server0 \~\]# expr 2 % 2
0
\[root@server0 \~\]# a=100
\[root@server0 \~\]# expr \$a % 10 \-\-\--求模(取余)
0
**2）使用\$\[\]或\$(())表达式**
乘法操作\*无需转义，运算符两侧可以无空格；引用变量可省略 \$
符号；计算结果替换表达式本身，可结合echo命令输出。
\[root@server0 \~\]# a=100
\[root@server0 \~\]# echo \$\[a+a\]
200
\[root@server0 \~\]# echo \$\[a\*a\]
10000
\[root@server0 \~\]# echo \$\[2\*2\]
4
\[root@server0 \~\]# echo \$\[a%10\]
0
\[root@server0 \~\]# echo \$\[RANDOM%4\]
0
\[root@server0 \~\]# echo \$\[RANDOM%4\]
1
**3）使用let命令**
expr或\$\[\]、\$(())方式只进行运算，并不会改变变量的值；而let命令可以直接对变量值做运算再保存新的值。let运算操作并不显示结果，变量不需要加\$,可以结合echo命令来查看：
\[root@server0 \~\]# x=10
\[root@server0 \~\]# let y=x+5
\[root@server0 \~\]# echo \$y
15
\[root@server0 \~\]# let x=x+1
\[root@server0 \~\]# echo \$x
11
\[root@svr5 \~\]# let X++; echo \$X \# X++(X=X+1)
\[root@svr5 \~\]# let X\--; echo \$X \# X- -(X=X-1)
\[root@svr5 \~\]# let X+=78 ; echo \$X \# X+=78(X=X+78)
\[root@svr5 \~\]# let X-=78 ; echo \$X \# X-=78(X=X-78)
\[root@svr5 \~\]# let X\*=78 ; echo \$X \# X\*=78(X=X\*78)
\[root@svr5 \~\]# let X/=78 ; echo \$X \# X/=78(X=X/78)
\[root@svr5 \~\]# let X%=78 ; echo \$X \# X%=78(X=X%78
\[root@server0 \~\]# x=1234
\[root@server0 \~\]# let x++
\[root@server0 \~\]# echo x
x
\[root@server0 \~\]# echo \$x
1235
\[root@server0 \~\]# let x\--
\[root@server0 \~\]# echo \$x
1234
\[root@server0 \~\]# let x-=4
\[root@server0 \~\]# echo \$x
1230
\[root@server0 \~\]# let x+=4
\[root@server0 \~\]# echo \$x
1234
\[root@server0 \~\]# let x/=2
\[root@server0 \~\]# echo \$x
617
\[root@server0 \~\]# let x\*=2
\[root@server0 \~\]# echo \$x
1234
步骤二：小数运算工具bc支持小数运算,支持简单判断
1）**bc**交互式运算
先执行bc命令进入交互环境，然后再输入需要计算的表达式。
\[root@server0 \~\]# bc
bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software
Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type \`warranty\'.
1.1+1
2.1
2.2/2
1
scale=3 \-\-\-\-\-\-\--定义小数点后位数
2.2/2
1.100
10/3
3.333
Quit
2）**bc**非交互式运算
将需要运算的表达式通过管道操作交给bc运算。注意，小数位的长度可采用scale=N限制，除此以外也受参与运算的数值的小数位影响。利用管道使用bc工具
\[root@server0 \~\]# echo \"1+1\" \|bc
2
\[root@server0 \~\]# echo \"10/3\" \|bc
3
\[root@server0 \~\]# echo \"scale=3;10/3\" \|bc
3.333
\[root@server0 \~\]# echo \"1.1111+1\" \|bc
2.1111
\[root@server0 \~\]# echo \"scale=3;1.1111+1\" \|bc
\--给的数据超过了定义的小数点后位数
2.1111
3\) bc用作判断
\[root@server0 \~\]# echo \"1\>2\" \|bc \-\--错误的输出值为 0
0
\[root@server0 \~\]# echo \"1=2\" \|bc
(standard_in) 1: syntax error
\[root@server0 \~\]# echo \"1\<2\" \|bc \-\--正确的输出值为 1
1
\[root@server0 \~\]# echo \"1\<=2\" \|bc
1
## 2 案例2：条件测试操作
-   字符串匹配
-   比较整数值的大小
-   识别文件/目录的状态
-   多个条件/操作的逻辑组合
**步骤一**：条件测试的基本用法
1）语法格式
使用"test 表达式"或者\[ 表达式 \]都可以，表达式两边至少要留一个空格。
条件测试操作本身不显示出任何信息。测试的条件是否成立主要体现在命令执行后的返回状态（即
\$?），所以可以在测试后查看变量\$?的值来做出判断，或者结合&&、\|\|等逻辑操作显示出结果（或作其他操作）
。
\[root@server0 \~\]# \[ a == b \] \-\--用 \[ 表达式 \]