---
## Page 38
第3章数据结构程序
23
作为一个程序员，你应该意识到计算机从数据库中查询你的姓名并取回以下字段数
据：
Pub1ic|Jane|Q|Ms.|600|MapleStreet|Your Town|Iowa|12345
但是程序该如何精确地从你的数据库记录中构建那个定制的Web页面呢？草率的
程序员可能很想像下面那样开始编写程序：
read lastname，firstname，init，title，streetnum，
streetname,town，state，zip
print “welcome back,"， firstname， "!"
print “we hope that you and all the members"
print“of the"，lastname,“family are constantly”
print “reninding your neighbors there”
print “on"， streetname，“to shop with us."
print “As usual, we will ship your order to"
print “
"，title，firstname， init "."，lastname
print “
"，streetnum，streetname
print "
"，town ","，state，zip
.*.
这一类程序很迷人，但是很长。
更好的方法就是编写一个依赖于下面这样的表单字母模式（formletter schema）的
表单字母生成器（formletter generator）：
welcome back, $1
We hope that you and al1 the menbers
of the so family are constantly
reminding your neighbors there
on $5 to shop with us.
As usual, we wil1 ship your order to
$3 $1 $2.$0
$455
$6,$7 $8
表示法Si表示记录中的第i个字段，所以SO表示姓，等等。下面的伪码将解释该模式。
这段伪码假定字母S字符在输入模式中写为SS。
read fields from database
loop from start to end of schema
C=next character in schena
if c 1='s'
printchar c
else
C= next character in schena
case c of
's':
printchar'$'
'0'-'g':printstring field[c]
default:
error("bad schema")
bbs.theithome.com
---
## Page 39
24
第1部分预备知识
该模式在程序中描述成了一个长长的字符数组。在该数组中，文本行由换行符结尾（Perl
和其他脚本语言在这方面甚至更加简单：我们可以使用诸如Slastmame那样的变量）。
与编写明显的程序相比，编写生成器和模式或许更加简单些。将数据从控件中分离
开来可以使你大大受益：如果字母重新设计，那么可以在文本编辑器中操作该模式，第
二个特定的页面准备起来也要简单些。
报表模式的概念可以大大简化我曾经维护过的一个具有5300行代码的COBOL程
序。该程序的输入描述了一个家庭的财务状态：其输出是一个目录单，汇总了该状态并
推荐未来的策略。某些数字是：120个输入字段：在18个页面中共有400个输出行：300
行用于清理输入数据的代码：800行用于计算；还有4200行用于编写输出。我估计4200
行的输出代码可以使用一个至多几十行代码的解释程序和一个400行的模式来代替：计
算代码可以保持不变。重新以这种形式编写程序所产生的COBOL代码至多只有原来大
小的三分之一，并月维护起来也更加容易。
3.3数组例子
菜单。我希望我的VisualBasic程序的用户可以单击某个菜单项来进行选择。我随
意翻看了一下大量的优秀示例程序，发现其中有一个程序，竞允许用户在八个选择项
之间进行选择。在审查菜单募后的代码时，我发现item0看起来有点类似下面所示样子：
sub menuitem0_c1ick()
menuitem0.checked =1
menufteml.checked=0
menuitem2.checked =0
menuitem3.checked=0
menuitem4.checked=0
menuitem5.checked =0
menuitem6.checked=0
menuitem7.checked= 0
item1仅作以下更改，其他几乎都是一样的：
sub menuiteml_click(
menuitem0.checked = 0
menuiteml.checked = 1
item2到item7也是一样的。总之，选择菜单项占用大约100行的代码。
我自己也像那样编写过代码。一开始一个菜单中只有两个项，代码还是比较合理的。
当我添加第三个、第四个以及以后的项时，我对代码幕后的功能性如此兴奋，以至于代
码变得越来越混乱。
bbs.theithome.com
---
## Page 40
第3章数据结构程序
25
稍微观察一下，我们就可以将人多数代码移到单个函数uncheckall当中，该函数将
每一个checked字段都设置为0。之后，第一个函数就变为：
sub menuitem0_c1ick()
unchecka11
menuitem0.checked =1
但我们仍然还有7个其他相类似的函数。
幸运的是，VisualBasic支持菜单项数组：所以我们可以用下面这一个函数来代替8
个类似的函数：
sub menuitem_click(int choice)
for i=[o,numchoices)
menuitem[1].checked=0
menuitem[choice].checked=1
将重复代码聚集到一个通用的函数中使代码由100行减少到了25行，而明智地使用数组
将代码减少到了4行。添加下一个选择项时更加容易，而且也完全清除了潜在的错误代
码。只用塞塞儿行代码，这种方法就解决了我的问题。
错误消息。“脏”系统的代码里面散布着许许多多的错误消息，并且这些错误消息还
让我们看一看在“脏”组织和“干净”组织下执行以下请求的难度：产生一个所有可能
错误消息的完整列表：将每个“严重”错误消息改为发声报警：将错误消息翻译成法语
或德语。
日期函数。给定某一年以及该年中的某一日，返回其所在月和月中的日子：例如，
2004年中的第61天就是3月1日.Kermighan和Plauger所著的《ElementsofProgramming
Style》一书，为完成此任务给出了一个55行代码的程序，该程序直接取自其他人的编
程文本。然后他们又通过一个带有26个整数的数组，为该任务提供了一个只有5行代
码的程序。问题4将介绍日期函数中大量存在的表示问题。
单词分析。许多计算问题都是在对英语单词进行分析的过程中产生的。在第13.8
节中我们将看到，拼写检查程序如何使用“后缀剥离（suffixstripping）”来浓缩其词
-，，），
等等）。语言学家为这一类任务提出了实体规则（substantialbodyof rules）。在1973
年构建第一个实时文本语音合成器时，DougMcllroy认识到是代码误导了这一规则：
相反，他使用1000行的代码和一个400行的表来编写该程序。当某人不是通过添加表
而是去修改程序时，其结果是用2500行额外的代码来完成增加的20%的工作。Mcllroy
断言，通过添加更多的表，现在他可以使用不到1000行的代码来完成扩展的任务。需
要自已尝试一下类似的规则集的话，请参见问题5。
bbs.theithome.com
---
## Page 41
26
第1部分预备知识
3.4构造数据
什么是构造良好的数据？随着时间的推移，这个标准也在稳步上升，在前些年，构
造数据的意思就是选择良好的变量名称。一旦程序员在哪里使用过并行数组或寄存器偏
移量，随后，语言就会将记录或结构以及指向它们的指针合并在一起。我们学会了使用
具有诸如insert或search那样的名称的函数替换操作数据的代码：那将有助于我们更改
表示而不会破坏其余部分代码。DavidParmas扩展了该方法，他观察到通过考察系统将
处理的数据可以对良好的模块结构有更深的了解这样一个事实。
“面向对象的编程”采取了下一步。程序员学会了在设计中标识各种基本的对象，
向世人公布某一抽象概念及其基本运算，并从视图中隐藏其实现细节。诸如Smaltalk
和C++那样的语言允许我们将那些对象封装在类中：在第13章中我们研究集合（set）
的抽象和实现时将详细讨论这种方法。
3.5针对特定数据的强大工具
在过去艰难的日子里，程序员构建每一个程序都需要从头开始。现代化的工具使程
序员（以及其他人）轻而易举地就可以构建各种各样的应用程序。本小节列出了一个简
短的工具列表，它只是象征性的，不是一个完整的工具列表。每一个工具都利用某一数
据视图来解决某一特定但又是常见的问题。诸如VisualBasic、Tel以及各种不同shell
等语言提供了用于连接这些对象的“胶水”。
超文本。在20世纪90年代早期，当时还只有几千个Web站点，我就对从CD-ROM
转移到Web上的参考资料着了迷。数据收集功能之强大让人震惊：百科全书、词典、年
鉴、电话薄、古典文学、教科书、系统参考手册，还有更多的东西，都掌握在我的手掌
心了、不幸的是，各种不同数据集的用户界面同样让人震惊：每一个程序都有自己的花
样。今天，所有那样的数据（以及更多东西）我都是在CD和Web上进行访问，所选的
界面通常是Web浏览器。这将使用户的生活更惬意，对于实施者来说也是类似的。
名称一值对。书目数据库可能具有如下所示的条目：
%titleThe C++Progranming Language,Third Edition
%authorBjarne Stroustrup
%publisher Addison-Wesley
%city
Reading.Massachusetts
%year
1997
VisualBasic采取这种方法来描述界面上的控件。窗体左上角的文本框可以使用以下属性
（名称）和设置（值）进行描述：
bbs.theithome.com
---
## Page 42
第3章数据结构程序
27
Height
495
Left
0
Multiline
False
Name
txtSample
Top
Visible
True
P
215
（完整的文本框包含36个对。）例如，需要加宽该文本框的话，我可以使用鼠标拖拽文本
框的右边缘：或者输入一个更大的整数，替换掉215：或者使用运行时赋值的方式：
txtSamp1e.width =400
程序员可以选择最方便的方法来操作这个虽然简单但功能又很强大的结构。
电子表格。记录我们组织的预算对我来说似乎很困难。出于习惯，我为该作业构建
了一个大型的程序，用户界面很笨拙。邻近的程序员粗略地看了一下，将该程序实现为
一个电子表格，还补充了VisualBasic中的几个函数。整个界面对于会计这样的主要用
户来说相当自然。（如果今天要让我编写大学调查程序的话，因为调查结果只不过是一个
数字数组，这一事实足以促使我尝试将它放到一个电子表格之中。）
数据库。许多年以前，在文件记录簿中胡乱记录了头十二次跳伞的详细信息之后，
一名程序员决心要自动化记录他的高空跳伞记录。在那时的几年以前，这还涉及到如何
布局复杂的记录格式，以及手工构建程序以进行数据的输入、更新和检索。当时，他使
用一个新奇的商业数据库包来完成该任务，我和他都对此充满敬意：他可以在几分钟而
不是几天之内定义全新的数据库操作屏幕。
城特定的语言。图形用户界面（GUI）有幸代替了许多古老面又笨拙的文本语言，但
是特殊目的的语言在某些应用场合仍然有用。当实际上我希望直接键入类似下面所示的数
学式子时，我会厌恶必须使用鼠标在虚假的计算器上敲来敲去：
n=1000000
47n ±1og(n)/1og(2)
我不喜欢使用怪模怪样的文本框和运算符按钮的组合来指定某个查询，反而喜欢按照类
似下面所示的语言进行编写：
(design or architecture)and not building
窗口以前是由好几百行可执行代码指定的，现在可以只用几十行超文本标记语言
（HTML）来描述。对于一般的用户输入来说，语言可能已不流行了，但是它们在某些
bbs.theithome.com
---
## Page 43
28
第1部分预备知识
应用场合仍然是强有力的手段。