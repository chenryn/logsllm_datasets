define('NONCE_SALT', 'put your unique phrase here');
$table_prefix = 'wp_'; 10
define('WPLANG', '');
define('WP_DEBUG', false);
if ( !defined('ABSPATH') ) 10
define('ABSPATH', dirname(__FILE__) . '/');
require_once(ABSPATH . 'wp-settings.php');
11
我们定义了数据库相关的配置，并把数据库连接为db容器。另一个文件是router.php，它定义
PHP内置的Web服务器如何运行WordPress，其内容为：
13
> ~/.ssh/authorized_keys
接着在A主机上运行ssh来登录B：
$ ssh PI:EMAIL
第二次登录时，就不再需要密码了。
Flocker安装好之后，接下来通过Flocker来部署一个ELK应用。
3. 使用fig.yml来构建ELK应用
ELK应用包含3个组件——ElasticSearch、Logstash和Kibana，我们将为每个组件构建一个容
器并将它们连接在ElasticSearch容器中。此外，我们还会挂载数据卷。这3个组件的连接如下。
 Logstash接受日志消息并将它们投递给ElasticSearch。
 ElasticSearch将日志保存在数据库中。
 Kibana将连接到ElasticSearch，检索日志信息并将其展现到Web页面上。
在fig.yml文件中，我们仅需要定义好应用组件，而不用告诉每个组件在哪台机器上运行。默
认情况下，Fig会将应用部署到本机上。fig.yml文件的具体内容为：
elasticsearch:
image: clusterhq/elasticsearch
ports:
- "9200:9200"
volumes:
- /var/lib/elasticsearch
logstash:
image: clusterhq/logstash
ports:
- "5000:5000"
links:
- elasticsearch:es
kibana:
image: clusterhq/kibana
ports:
- "80:8080"
15.6 Flocker：跨主机的Fig应用 187
4. 使用Fig在单机上部署开发环境 1
配置好YAML文件后，就可以通过fig up命令将应用部署到本机上：
2
$ fig up
Fig会去下载相应的镜像并启动基于镜像的容器。如果需要将容器放到后台运行，那么可以
3
在fig up命令后加上-d参数。
5. 使用Flocker将ELK部署到多节点上 4
接下来，需要将ELK部署到不同的服务器上，这里我们使用两台虚拟机，系统为Fedora 20。我
5
们需要一个部署配置文件deployment.yml，在这个文件中我们指定哪个容器将会被部署到哪个IP上：
"version": 1
6
"nodes":
"104.131.93.66": ["logstash", "kibana"]
"104.131.98.216": ["elasticsearch"]
7
保存好文件之后，我们使用flocker-deploy工具执行如下操作：
9
$ flocker-deploy deployment.yml fig.yml
这样，Logstash和Kibana被部署到同一台机器上，ElasticSearch被部署到另一台机器上。
8
6. 使用Flocker进行数据迁移
随着应用执行时间的推移，记录的日志也越来越多。ElasticSearch的磁盘已经装不下那么多 10
数据，这时需要将它迁移到另外一个存储更大的新节点上。Flocker把这个迁移过程做得非常简单，
你只需要重新修改下deployment.yml文件，然后再重新运行flocker-deploy即可。将deployment.yml 10
文件的内容修改为：
11
"version": 1
"nodes":
"104.131.93.66": ["logstash", "kibana"]
13
"104.131.98.216": []
"104.131.7.13": ["elasticsearch"]
14
然后重新运行flocker-deploy命令即可。我们可以分别在原来的ElasticSearch机器和新的
ElasticSearch机器上查询其日志，具体操作如下：
15
marcus@client:~/elk$ flocker-deploy deployment.yml fig.yml
marcus@client:~/elk$ ssh PI:EMAIL
/*  */ docker ps 18
188 第15章 Fig
CONTAINER ID IMAGE COMMAND CREATED
STATUS PORTS NAMES
marcus@client:~/elk$ ssh PI:EMAIL
/*  */ docker ps
CONTAINER ID IMAGE COMMAND CREATED
STATUS PORTS NAMES
54e26b1e4043 clusterhq/elasticsearch:latest "/bin/sh -c 'source 23 seconds ago
Up 22 seconds 9300/tcp, 0.0.0.0:9200-&gt;9200/tcp flocker--elasticsearch
marcus@client:~/elk$ curl -XGET --silent 'http://104.131.98.216:9200/_search?q=firstname:Joe' |
underscore extract hits.hits
[
{
"_index": "logstash-2014.10.16",
"_type": "logs",
"_id": "KWqBIoOAQEm4S6Q9oF0MyQ",
"_score": 0.30685282,
"_source": {
"firstname": "Joe",
"lastname": "Bloggs",
"@version": "1",
"@timestamp": "2014-10-16T08:04:57.568Z",
"host": "104.131.91.191:54904"
}
}
]
可以看到，旧的数据已经成功迁移到了新的机器上。这里我们简单说一下flocker-deploy在迁
移容器和数据卷中发生了什么。首先，Flocker会给容器的数据卷生成一个快照，然后把该快照发
送给新的主机；旧的容器会被停止，在快照之后的部分数据会被发送给新的主机；然后在新的主
机上启动容器，数据库连接等设置自动被重新设定，指向新的数据库容器。因为Flocker采用了分
步骤的迁移数据：第一步用于生成和迁移快照，数据量大，复制时间长，但这段时间容器并没有
停止工作；第二步复制剩下的部分数据，量非常小，所以容器宕机的时间很短。
16.1 Kubernetes简介 189
1
第 16 章 2
Kubernetes
3
4
5
在第15章中，我们介绍了Fig和Flocker，它们都是为了更好地管理Docker的容器。在本章中，
我们将会介绍另外一款大规模容器集群的管理工具——Kubernetes，它是由Google公司开发的开
6
源软件，其核心采用Go语言开发，代码在GitHub上维护。目前，Docker、微软、IBM以及RedHat
等公司已经加入到Kubernetes社区。本章将介绍如下内容。
7
 Kubernetes简介。
 Kubernetes核心概念，主要包含节点、Pod、服务、控制器、卷和标签等。 9