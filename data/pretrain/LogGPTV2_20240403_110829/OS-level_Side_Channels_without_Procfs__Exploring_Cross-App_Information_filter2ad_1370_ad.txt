Then we assemble a set of transactions Ti = {Tk|ti − β <
Tk(t) < ti + β ∧ Tk ∈ Bi}, for each i ∈ {1, 2,··· , n}. We
next exclude any transaction, Tk, from each Ti (Tk ∈ Ti),
iff ∃Tj ∈ Ti ∧ Tk(S) = Tj(S) ∧ k (cid:54)= j, because these
transactions are typically from high-proﬁle accounts that reuse
their Bitcoin address to perform a large volume of transactions.
This heuristic step improves the efﬁciency of our attack but is
not required.
We note that α and β are parameters we can tune. We
empirically chose α = 3 and β = 15s. This is because we
ﬁnd typically a transaction will have a very high probability
to appear in one of the three following blocks, and 15s is long
enough to tolerate the inaccuracy in the transaction timestamps
measured by the side-channel analysis.
Then in the list of transaction sets {T1, T2,··· , Tn} that is
assembled from the public record, we aim to construct the set
of 3-tuples: X = {(Tx, Ty, Tz)|Tx∈Ti ∧ Ty ∈Tj ∧ Tz ∈
Tk ∧ Tx(R)∩ Ty(S) (cid:54)= ∅ ∧ Ty(R)∩ Tz(S) (cid:54)= ∅ ∧ i <
Fig. 6: Blockchain wallet experiment.
j < k}. The transactions in these 3-tuples are initiated from
the monitored mobile owner with high probability. Therefore,
the Bitcoin addresses that belong to the mobile user is Y =
{a|(a ∈ Tx ∨ a ∈ Ty ∨ a ∈ Tz) ∧ (Tx, Ty, Tz) ∈ X}.
Empirical evaluation. We conducted an empirical attack on
the Blockchain Wallet iOS app. There are 11 major activities
a user can perform in this app2. We use our monitoring app to
monitor and collect traces from the four VM side-channel attack
vectors. These activities can be differentiated by observing the
patterns in the memory traces. Particularly, for each activity,
we collected 10 traces and calculated the average distance
between two traces using the extended DTW (see Sec. V-A).
The results are shown in Fig. 7a. In this heatmap, each row and
each column represent one activity, and cell (i, j) represents
the distance between the traces of activity i and activity j.
Note the distances are normalized in each row so that the
average distance between traces of the same activity is 1 and
the distances from other activities are normalized accordingly.
Therefore, the heatmap is not symmetric.
the
Besides
targeted activity—the make-payment
activity—we are also interested in the return-to-home-
screen activity, because this activity indicates the foreground
app is no longer the Blockchain Wallet app. This is important
because with the capability to detect if the app has been
suspended, the adversary only needs to match the signature
of an in-app activity with that of other activities in the same
app, rather than comparing with all activities in all apps.
Fig. 7a clearly shows that the distance between traces in the
same activity is much closer than between those of different
activities. This is especially true for the make-payment(0)
activity and return-to-home-screen(10) activity. The
number in the parentheses is the index in Fig. 7a.
To demonstrate the attack, we created a new Bitcoin
account and initially deposited some coins in it. Then we
manually made 6 transactions at some random time during
the same time have the monitoring app
3 days, and at
running in the background to collect
the VM traces. By
faithfully executing the aforementioned steps to collect 6
transaction sets {T1, T2, T3, T4, T5, T6} from the public
records, we were able to construct the set of 3-tuples X =
{({T1, T3, T5), (T2, T4, T5}), (T3, T5, T6}), (T4, T5, T6})}.
By linking all transactions in X, a direct acyclic graph is
constructed, which is shown in Fig. 6. Therefore the set
of Bitcoin addresses that have been used by the user is
{a0, a2, a3, a5, a7, a9, a11}. Without exception, all of them
are correctly identiﬁed using the side-channel attacks and the
correlation analysis.
2) Other Targets: As shown in the Bitcoin transaction de-
anonymization attack example, the binary information leakage
2make-payment(0), menu-addresses(1), menu-backupfunds(2),
menu-merchantmap(3), menu-settings(7), menu-support(8),
send-button(6), receive-button(4), overview-button(9),
scan-QR-code(5), and return-to-home-screen(10).
9
via in-app activity detection can be augmented if a public
traceable dataset, even though anonymized, is available to the
adversary to correlate with the detected event. There are a few
other iOS apps that are vulnerable to this type of attacks, such
as Venmo and Twitter.
• Identify Venmo transactions and user information. Venmo is a
mobile payment service owned by Paypal. It simpliﬁes money
transfer processes between banks and accounts. According to a
report by Forbes [4], Venmo processed about $17.6 billion US
Dollars in 2016, which is twice more than the amount in 2015.
One interesting aspect of Venmo, however, is that by default, all
transactions through Venmo are shared publicly [9]. Although
the users can change it to private, a lot of people do not do
so. As of 2014, as many as 50% of all Venmo transactions,
including their payers, payees, transferred amounts, transfer
time and memo, are publicly available [43]. In most cases, the
names of payers/payees shown in a transaction are real names.
Therefore, by detecting the payment process, it is possible to
identify the true identity of the user by matching the transfer
time with the public records, as long as the user has not
modiﬁed the default privacy setting.
In our experiment, similar to the Bitcoin example, we
generate the signature of this activity using four VM vectors,
and run the pattern matching algorithm (Sec. V-A) to detect
the activity using our monitoring app. There are 11 major
activities in the Venmo app that the user can perform, so we
collected 10 traces for each activity and computed the average
distances between the traces from the same activity and dif-
ferent activities (see Fig. 7b). The distances represented in the
heatmap are normalized using the same approach as in Fig. 7a.
The ﬁrst and the last activities are make-payment(0) and
return-to-home-screen(10), respectively. It
is clear
from the ﬁgure that these two activities are easily separable
from other activities using the distance measures.
• Identify Twitter user accounts. Twitter is one of the most
popular social networks in the world. According to a report
published in January 2017 [18], Twitter has 317 million
monthly active users, and there are 500 million tweets being
sent every day. Similar to the attack scenario identiﬁed by
Zhou et al. in their study of Android side channels [67], if an
adversary is able to identify the user’s action of posting tweets
in the Twitter app (using VM features), by correlating with the
online database of tweets, the user’s identity can be identiﬁed
through such side-channel analysis.
In our experiment, we have shown that the user tweet-
posting activity has a unique and stable VM signature. Using
our monitoring app and the algorithm mentioned in Sec. V-A,
we can reliably detect the time of the post-tweets(0) ac-
tivity and return-to-home-screen(7) activity (the ﬁrst
and last activities in Fig. 7c). Therefore, it is also possible
to identify the user’s real identity. As of the time of writing,
the public available tweeting record is no longer complete.
Nevertheless, partially released dataset still allow correlation
analysis.
VI. ATTACK 3: BYPASSING SANDBOX RESTRICTIONS
As mentioned in Sec. III, the fileExistsAtPath API
can be used to check whether a ﬁle or directory exists even
without proper permission. In this section, we show how
(a) Blockchain Wallet
(b) Venmo
(c) Twitter
Fig. 7: In-app activity heatmaps.
a malicious iOS app can leverage this API to bypass iOS
sandbox restrictions to detect the existence of cross-container
ﬁles and extract sensitive user information.
Depth
4
5
6
7
8
File Path
/private/var/logs/lockdownd.log
/private/var/logs/AppleSupport/general.log
/private/var/mobile/Library/DataAccess/AccountInformation.plist
/private/var/mobile/Library/Spotlight/BundleInfo/InstalledApps.plist
/private/var/mobile/Library/Caches/com.apple.purplebuddy/
com.apple.opengl/linkCache.data
TABLE IV: Absolute ﬁle paths for Fig. 8.
A. Attack Methods
We further empirically evaluated the characteristics of
the fileExistsAtPath timing channel. Speciﬁcally, we
measured the execution time of the fileExistsAtPath
API using mach_absolute_time() on a non-jailbroken
iphone7 device running iOS 10.2.1, while varying the depths
of the input ﬁle paths. The tested ﬁle paths are listed in
Table IV. The iOS app making the API calls did not have
the permission to access these ﬁles, so the query to the
fileExistsAtPath API all failed. For each ﬁle path, we
run 100 trials. In each trial, we queried the API 50 times
and calculated the mean value of the execution time. We
compute the mean and standard deviation of these 100 trials
and plot them in Fig. 8. Also shown in the ﬁgure are the
execution times of the API with inputs of some non-existent
ﬁles at the same depth as the tested ﬁle paths. From Fig. 8,
we can see that the two cases (i.e., existent vs. non-existent)
are clearly distinguishable. Note the unit of the y-axis of
the ﬁgure is the Mach Absolute Time Unit, which is a value
returned by mach_absolute_time(). This unit time is
CPU-dependent, which can be converted to nanoseconds using
a system-provided API [17].
As such, to determine the existence of a ﬁle or directory
outside an app’s sandbox, a timing channel can be reliably
constructed by the app using the differential tests that follow: It
ﬁrst queries the fileExistsAtPath API with the targeted
ﬁle or directory as input 50 times and measures the average
execution time. Then it compares the average execution time
with that for a non-existent ﬁle (e.g., a ﬁle with a random
string in its name) of the same depth in the ﬁlesystem. In this
way, the timing difference will reliably tell whether the ﬁle
exists or not.
B. Case Studies
By
utilizing
the
and
iOS
channels,
fileExistsAtPath
timing
a
malicious
app
could bypass the sandbox
enforced
restrictions
by
iOS
learn
information about other
Speciﬁcally, we
apps.
show that
the technique
can be used to infer that
the list of apps installed on
the device (Sec. VI-B1),
as well
information
regarding photos, videos, and voice memos (Sec. VI-B2). In
each of the attacks we show, we use the differential analysis
technique outlined in Sec. VI-A to determine the existence of
the speciﬁc ﬁles on a non-jailbroken iphone7 with iOS 10.2.1.
In all tests, we can reliably detect the ﬁle existence without
any false detection.
Fig. 8: Execution time of
when
FileExistAtPath
changing the depth.
as
1) List of installed apps: Apps that a user has installed on
the phone sometimes reveal the user’s life styles or personal
choices of vendors (e.g., Verizon, Marriott, Chase, Hertz,
United, etc). These apps can be used to proﬁle the user of
the device, which can be valuable to ads providers. Never-
theless, the existence of certain apps may leak more sensitive
information about the user. For instance, the fact that a user
has installed Hornet, a same-sex-dating app, may reveal the
user’s sex orientation; and Pregnancy+, as its name indicates,
may suggest that the user is trying to get pregnant or already
pregnant. We list some of these sensitive apps in Table V.
to use a private API
To learn what apps have been installed on the same
device, one approach is
in the
LSApplicationWorkspace class, which provides a list of
installed apps [11]. However, the use of this private API will
be detected in the vetting process and result in rejection of the
app. Another method is through the canOpenURL API (i.e.,
[UIApplication canOpenURL:]), which allows an app
to check whether there is another app to handle a certain URL.
However, this API was extensively misused by developers to
obtain the installed app list. As a response, since iOS 9, Apple
has imposed limits on the use of this API by requiring explicit
declaration of all the targeted schemes in the plist ﬁle [2].
10
0123456789100123456789101.041.121.201.281.361.441.521.600123456789100123456789101.021.081.141.201.261.321.381.441.5001234567012345671.01.21.41.61.82.02.22.445678Depth02004006008001000Mach Absolute Time UnitExistentNon-Existenttime,
the ﬁrst
Despite Apple’s effort of stronger cross-app isolation, we
found it
is still possible for third-party apps to stealthily
query whether a certain app has been installed using the
fileExistsAtPath timing channel,
if one of the two
following conditions is met for this targeted app: (1) it requires
permission for sending push notiﬁcations, or (2) it dynamically
registers home screen quick actions.
• Push notiﬁcations. When an iOS app that requires send-
ing push notiﬁcations is launched for
it
will prompt
the user for permission to send notiﬁcations.
On iOS 9, no matter whether the user grants the permis-
sion or not, a .pushstore ﬁle with the bundle identiﬁer
as its name will be created in a speciﬁc directory (e.g.,
/var/mobile/Library/SpringBoard/PushStore/
com.google.Gmail.pushstore for the Gmail app). On
iOS 10, this ﬁle will be created the ﬁrst time the app receives
a push notiﬁcation. A large portion of iOS apps request push
notiﬁcation. Particularly, we conducted a static analysis on the
dataset of 7,418 apps, and found that 4,980 (67.13%) of them
may use local notiﬁcation to alert user about in-app information
and 4,438 (59.83%) may use remote notiﬁcation to handle
messages pushed from a remote server. The union of the two
sets are 5,886 (79.35%) apps. We further randomly installed
150 apps from iOS App Store and found that push notiﬁcation
was requested by 67 (i.e., 44.7%) of these apps.
• Home screen quick actions. The feature of home screen quick
actions was ﬁrst introduced in iOS 9 with 3D-touch enabled
iphone 6S and iphone 6S plus in September 2015 [1], [10]. It
allows users to have quick accesses to certain functionalities
of an app by long-pressing the icon on the home screen,
without opening the app. There are two ways to register
quick actions: static (by deﬁning them in Info.plist) or
dynamic (by deﬁning them in code). Through our experiment,
we found that when an app which registers home screen
quick actions dynamically is installed and launched for the
ﬁrst time, a new .plist ﬁle will be created in a speciﬁc
directory with its bundle identiﬁer as the name of the ﬁle (e.g.,
/var/mobile/Library/SpringBoard/Application
Shortcuts/com.google.Gmail.plist for the Gmail
app). Though this new iOS feature brings convenience to
users, it also introduces a vector for information leakage. We
can identify the installed apps by detecting whether a speciﬁc
plist ﬁle has been created. We studied 150 top ranked apps
(i.e., top 150 apps in App Store’s “Top Charts”), and 47 of
them (31.33%) have dynamically registered quick actions.
We conducted a measurement study of the aforementioned
techniques, and discovered that most of the sensitive apps