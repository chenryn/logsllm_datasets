title:CRYLOGGER: Detecting Crypto Misuses Dynamically
author:Luca Piccolboni and
Giuseppe Di Guglielmo and
Luca P. Carloni and
Simha Sethumadhavan
0
1
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
CRYLOGGER:
Detecting Crypto Misuses Dynamically
Luca Piccolboni, Giuseppe Di Guglielmo, Luca P. Carloni, Simha Sethumadhavan
{piccolboni, giuseppe, luca, simha}@cs.columbia.edu
Columbia University, New York, NY, USA
Abstract—Cryptographic (crypto) algorithms are the essential
ingredients of all secure systems: crypto hash functions and en-
cryption algorithms, for example, can guarantee properties such
as integrity and conﬁdentiality. Developers, however, can misuse
the application programming interfaces (API) of such algorithms
by using constant keys and weak passwords. This paper presents
CRYLOGGER, the ﬁrst open-source tool to detect crypto misuses
dynamically. CRYLOGGER logs the parameters that are passed to
the crypto APIs during the execution and checks their legitimacy
ofﬂine by using a list of crypto rules. We compared CRYLOGGER
with CryptoGuard, one of the most effective static tools to detect
crypto misuses. We show that our tool complements the results of
CryptoGuard, making the case for combining static and dynamic
approaches. We analyzed 1780 popular Android apps downloaded
from the Google Play Store to show that CRYLOGGER can detect
crypto misuses on thousands of apps dynamically and automati-
cally. We reverse-engineered 28 Android apps and conﬁrmed the
issues ﬂagged by CRYLOGGER. We also disclosed the most critical
vulnerabilities to app developers and collected their feedback.
Index Terms—Android, Cryptography, Security, Misuses.
Repository—https://github.com/lucapiccolboni/crylogger [1]
I. INTRODUCTION
Cryptographic (crypto) algorithms are the key ingredients of
all secure systems [2]. Crypto algorithms can guarantee that the
communication between two entities satisﬁes strong properties
such as data conﬁdentiality (with encryption) and data integrity
(with hashing). While the crypto theory can formally guarantee
that those properties are satisﬁed, in practice poor implementa-
tions of the crypto algorithms [3] can jeopardize communication
security. For instance, Brumley et al. [4] showed how to obtain
the entire private key of an encryption algorithm, which is based
on elliptic curves, by exploiting an arithmetic bug in OpenSSL.
Unfortunately, ensuring that the actual implementation of the
crypto algorithms is correct as well as secure is not sufﬁcient.
The crypto algorithms can be, in fact, misused. Egele et al. [5]
showed that 88% of the Android apps they downloaded from the
Google Play Store had at least one crypto misuse. For example,
thousands of apps used hard-coded keys for encryption instead
of truly-random keys, thus compromising data conﬁdentiality.
Similarly, Rahaman et al. [6] showed that 86% of the Android
apps they analyzed used broken hash functions, e.g., SHA1, for
which collisions can be produced [7], threatening data integrity.
Recently, researchers analyzed the causes of crypto misuses
in many contexts. Fischer et al. [8] found that many Android
apps included snippets of code taken from Stack Overﬂow and
98% of these snippets included several crypto issues. Nadi et
al. [9] claimed that the complexity of application programming
interfaces (APIs) is the main origin of crypto misuses in Java.
Developers have to take low-level decisions, e.g., select the type
of padding of an encryption algorithm, instead of focusing on
high-level tasks. Acar et al. [10] compared 5 crypto libraries
for Python and argued that poor documentation, lack of code
examples and bad choices of default values in the APIs are the
main causes of crypto misuses. Muslukhov et al. [11] showed
that 90% of the misuses in Android originated from third-party
libraries, a result that was later conﬁrmed by Rahaman et al. [6].
At the same time, researchers started to implement tools to
automatically detect crypto misuses, e.g., [5], [6]. The idea is to
deﬁne a set of crypto rules and check if an application respects
them by verifying the parameters passed to the crypto APIs. The
rules usually come from (i) papers that show the vulnerabilities
caused by some crypto algorithms or their misconﬁgurations,
e.g., [12], and (ii) organizations and agencies, e.g., NIST and
IETF, that deﬁne crypto-related standards to prevent attacks.
Examples of crypto rules are setting (i) a minimum key size for
encryption, e.g., 2048 bits for RSA [13] or (ii) a minimum num-
ber of iterations for key derivation, e.g., 1000 for PKCS#5 [14].
To check the crypto rules, researchers developed static as well
as dynamic solutions. Static approaches, e.g., CrySL [15], Cryp-
toLint [5], CryptoGuard [6], MalloDroid [16], CogniCrypt [17]
and CMA [18], examine the code with program slicing [19] to
check the values of the parameters that are passed to the APIs
of the crypto algorithms. Static analysis has the beneﬁt that the
code is analyzed entirely without the need of executing it. Also,
it can scale up to a large number of applications. Static analysis
produces, however, false positives, i.e., alarms can be raised
on legit calls to crypto algorithms. Some static approaches, e.g.
CryptoGuard, suffer also from false negatives, i.e., some misuses
escape detection, because the exploration is pruned prematurely
to improve scalability on complex programs. It is also possible
that static analysis misses some crypto misuses in the code that
is loaded dynamically [20]. Most of the recent research efforts
focused on static approaches [21], while little has been done to
bring dynamic approaches to the same level of completeness and
effectiveness. Few approaches have been proposed towards this
direction, e.g., SMV-Hunter [22], AndroSSL [23], K-Hunt [24],
and iCryptoTracer [25]. Dynamic approaches are usually more
difﬁcult to use since they require to trigger the crypto APIs at
© 2021, Luca Piccolboni. Under license to IEEE.
DOI 10.1109/SP40001.2021.00010
1972
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
runtime to expose the misuses, but they do not usually produce
false positives. Unfortunately, these dynamic approaches do not
support as many crypto rules as the current static approaches.
SMV-Hunter and AndroSSL consider only rules for SSL/TLS,
and K-Hunt focuses on crypto keys. iCryptoTracer attacks the
hard problem of detecting misuses in iOS apps. iCryptoTracer
supports few rules as it needs to rely on API hooking techniques.
A. Contributions
In this paper, we present CRYLOGGER, an open-source tool to
detect crypto misuses dynamically. It consists of (i) a logger that
monitors the APIs of the crypto algorithms and stores the values
of the relevant parameters in a log ﬁle, and (ii) a checker that
analyzes the log ﬁle and reports the crypto rules that have been
violated. The key insights of this work are: (1) we log the relevant
parameters of the crypto API calls by instrumenting few classes
that are used by a large number of applications; (2) we log the
values of the parameters of the crypto APIs at runtime, while we
check the rules ofﬂine to reduce the impact on the applications
performance; (3) we show that, for most Android apps, the calls
to the crypto APIs can be easily triggered at runtime, and thus
a dynamic approach can be effective in detecting misuses even
if the code of the applications has not been explored entirely;
(4) we show that, for Android apps, it is sufﬁcient to execute an
application for a relatively short amount of time to ﬁnd many of
the crypto misuses that are reported by the current static tools.
We envision two main uses of CRYLOGGER. (1) Developers
can use it to ﬁnd crypto misuses in their applications as well
as in the third-party libraries they include. CRYLOGGER can
exploit the input sequences that are deﬁned by developers for
veriﬁcation purposes to detect the misuses. CRYLOGGER can
be used alongside static tools as it complements their analysis
(Section VIII). Using CRYLOGGER also helps to reduce the false
positives reported by static tools. (2) CRYLOGGER can be used
to check the apps submitted to app stores, e.g., the Google Play
Store. Using a dynamic tool on a large number of apps is hard,
but CRYLOGGER can reﬁne the misuses identiﬁed with static
analysis because, typically, many of them are false positives that
cannot be discarded manually on such a large number of apps.
We make the following contributions:
1. we describe CRYLOGGER, the ﬁrst open-source tool to
detect crypto misuses dynamically; the tool is available
at: https://github.com/lucapiccolboni/crylogger [1];
2. we implemented CRYLOGGER for Android and Java
apps; we support 26 crypto rules, and we decouple the
logging and the checking mechanisms so that new rules
can be easily added and checked with CRYLOGGER;
3. we compare CRYLOGGER against CryptoGuard [6],
one of the most effective static tools to detect misuses:
we used 150 popular Android apps of the Google Play
Store for the comparison; we show that CRYLOGGER
reports misuses that CryptoGuard misses, but we show
that the opposite is also possible, thus making the case
for combining static and dynamic approaches;
MessageDigest
logger
SymmEncryption
logger
crypto library
(Section IV)
1
2
ONLINE
OFFLINE
R-01 Don’t use SHA1
R-02 Don’t use DES
….
crypto rules
(Section IV)
application
10 …
11 M = MessageDigest(“SHA1”);
12 …
…
19 …
20 S = SymmEncryption(“AES”);
21 …
API calls triggered
during the execution
execution log
[MessageDigest] alg: SHA1
[SymmEncryption] alg: AES
checking
procedures
3
checker
(Section V)
broken hash function: SHA1
Fig. 1. Overview of CRYLOGGER. 1(cid:2) We run the application with an
instrumented crypto library. 2(cid:2) We generate a log containing the parameters of
the crypto API calls. 3(cid:2) We check the crypto rules and report all the violations.
4. we reverse engineered 150 Android apps to evaluate
the false positives of CryptoGuard; we show that for
some rules many false positives are reported due to
insecure, but untriggerable, code included in the apps;
5. we compare CRYLOGGER against CryptoGuard by
using the CryptoAPI-Bench [26], a set of Java programs
that include misuses; we also extend the CryptoAPI-
Bench with tests cases suited for dynamic tools;
6. we used CRYLOGGER to analyze 1780 Android apps
downloaded from the Google Play Store (the dataset
was collected between September and October 2019).
These are among the most popular apps of 33 different
categories. We conﬁrm the results previously reported
with static tools [5], [6] and report new misuses;
7. we disclosed the vulnerabilities we found to 306 app
and library developers and we report the feedback we
received from the 10 who replied; we manually reverse-
engineered 28 apps to determine if the vulnerabilities
reported by CRYLOGGER can actually be exploited.
II. OVERVIEW
Fig. 1 provides an overview of CRYLOGGER. It consists of:
1. logger: the logger extends a crypto library, for example
the Java crypto library, to trace the API calls to crypto
algorithms; for each of these calls, it logs the relevant
parameters that must be used to check the crypto rules;
for example, in Fig. 1, the logger saves the names of
the algorithms chosen by the application for message
digest (SHA1) and symmetric encryption (AES);
2. checker: the checker analyzes the log ofﬂine, after the
application has been executed, and it produces a list
of all the crypto rules violated by the application. To
check the rules it uses a set of checking procedures,
each of which covers many crypto rules; for instance,
in Fig. 1, the checker ﬁnds that the application uses the
broken algorithm SHA1 as message digest algorithm.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1973
We decouple logging from checking for 4 main reasons: (1) the
parameters of interest of the crypto library are more stable, i.e., it
is unlikely that new parameters are added; for example, the main
parameters of an algorithm for key derivation are the salt, the
password and the number of iterations, (2) the crypto rules are
likely to change: for example, new rules can be added when new
vulnerabilities are found as well as current rules may need to be
updated (for example the minimum key size of RSA), (3) crypto
rules are context-dependent: some rules may be not relevant for
certain applications or contexts, and (4) checking rules ofﬂine
does not affect the application performance, which is important,
for instance, when the application response is critical (Android).
Similarly to most of the current static solutions, we developed
CRYLOGGER primarily to check Java and Android applications.
Our ideas, however, could be adapted to other contexts. In the
next sections, we describe our tool in more detail. In Section III,
we discuss the related work. In Section IV, we describe a generic
crypto library that we use to deﬁne the crypto rules and the API
parameters that must be logged. In Section V, we explain how
CRYLOGGER checks the rules. In Section VI, we present an
implementation of CRYLOGGER for Java and Android [1], by
explaining which APIs we instrumented and how we analyzed
a large number of Android apps. In Section VII, we describe
the dataset of apps we use for the evaluation. In Section VIII,
we perform a comparison of CRYLOGGER against CryptoGuard
by using 150 Android apps and the CryptoAPI-Bench [26]. In
Section IX, we present an analysis of 1780 apps from the Google
Play Store. We also report the feedback received for disclosing
the vulnerabilities and our reverse-engineering analysis of the
vulnerabilities found in 28 apps. In Section X, we discuss the
limitations of our approach before concluding in Section XI.
III. RELATED WORK
A. Detection of Crypto Misuses
Several tools exist to detect crypto misuses. Most of them are
based on static analysis, e.g., CryptoLint [5], CryptoGuard [6],
CrySL [15], MalloDroid [16], CogniCrypt [17] and CMA [18].
These tools differ in the crypto rules that they support and in
the slicing algorithms [19] that they adopt for analysis. Among
them, CryptoGuard covers the highest number of crypto rules.
As discussed in [27], the main problem with static analysis is
the high number of false positives, which requires the users to
manually examine the results and determine the true positives.
Recent studies [6], [26] showed that CryptoGuard is one of the
most effective tools in reducing the false positives, thanks to rule-
speciﬁc algorithms that reﬁne the results of the static analysis.
We show, however, that CryptoGuard still produces many false
positives in practice by reporting crypto misuses that can never
be triggered at runtime (Section VIII). To achieve scalability on
complex apps, some tools “cut off” some branches of the static
explorations, e.g., CryptoGuard clips orthogonal explorations.
This causes false negatives in addition to false positives. False
negatives are also caused by code that is loaded at runtime [20].
Other tools identify crypto misuses by employing dynamic
analysis. SMV-Hunter [22] and AndroSSL [23], for example,
detect misuses of the SSL/TLS protocol. K-Hunt [24] detects
badly-generated keys, insecurely-negotiated keys and recover-
able keys by analyzing execution traces of Java programs. iCryp-
toTracer [25] detects misuses in iOS apps, which is a complex
task that must be implemented through API hooking techniques.
To the best of our knowledge, there are no approaches that are
as exhaustive and effective as static approaches and cover many
crypto tasks, e.g., encryption, authentication, and SSL/TLS. This
motivated us to develop CRYLOGGER, a tool that supports more
crypto rules than current static approaches and covers several
crypto tasks. The main disadvantage of all dynamic tools is the
possibility of missing vulnerabilities due to poor coverage [28].
Some misuses can remain undetected if the application are not
explored thoroughly. We show, however, that CRYLOGGER is
capable of ﬁnding most of the crypto misuses that CryptoGuard
reports even if the apps are not fully explored (Section VIII).
B. Other Related Research
The problem of crypto misuses has been studied from many
different perspectives. Fischer et al. [8] analyzed security-related
code snippets taken from Stack Overﬂow. They found that >15%
of the apps of the Google Play Store contained snippets of code
directly taken from Stack Overﬂow and ∼98% of these had at
least one misuse. In a more recent work [29], they showed that
nudges [30] signiﬁcantly helped developers in making better
decisions when crypto tasks need to be implemented. Nadi et
al. [9] showed that the main cause of misuses lies in the com-
plexity of the APIs rather than in the lack of security knowledge
in developers. Acar et al. [10] showed that poor documentation,
lack of code examples and bad choices of default values in the
crypto APIs contribute to many of the crypto misuses. Green et
al. [31] made the case for developing security-friendly APIs that
help developers to avoid common mistakes. Many recent works,
e.g., [6], [11] showed that third-party libraries cause most of the
crypto misuses in Android, up to 90% in some cases. To simplify
the work for developers, several approaches display security
tips or warnings in an integrated development environment. For
example, CogniCrypt [17] generates code snippets in Eclipse,
which can be used when crypto tasks need to be implemented.
Similarly, FixDroid [32] provides suggestions to developers on
how to ﬁx crypto-related issues in Android Studio. To remove
the burden of ﬁxing misuses from developers, some approaches
repair problematic code snippets automatically [33]–[36].
C. Testing Android Apps
Analyzing Android apps dynamically and automatically is
considered a hard problem [37], [38]. The common solution
to verify the apps correctness is Monkey1. Monkey generates
pseudo-random events that interact with the GUI of the emulator
or the real device. Monkey often obtains low code coverage
because the events are completely random [39], but it is quite
efﬁcient in terms of execution time. Other approaches try to
exploit some information about the app to improve coverage. For
example, SmartDroid [28] exploits a combination of static and
dynamic techniques to trigger the APIs of interest. DroidBot [40]
1Monkey UI Exerciser: https://developer.android.com/studio/test/monkey.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1974
is a test generator based on control-ﬂow graphs that can be ex-
tended to support custom exploration strategies. Dynodroid [41]
monitors the app to guide the generation of the next input event.
These approaches have a signiﬁcant overhead on the execution
of the app because to generate useful events they require either
to (i) rely on static analysis of the code [28] or (ii) create a model
at runtime that helps the exploration [40]. In CRYLOGGER, we
use Monkey as it is lightweight and common among developers.
IV. CRYPTO LIBRARY AND CRYPTO RULES
A typical crypto library (e.g., Java Cryptography Architecture)
includes 7 classes of tasks: (1) message digest, (2) symmetric
encryption, (3) asymmetric encryption, (4) key derivation/gen-
eration, (5) random number generation, (6) key storage, and (7)
SSL/TLS and certiﬁcates. Fig. 2 shows the parameters used by
CRYLOGGER. The parameters of Fig. 2 are logged and used to
check the rules. We do not claim that this library is complete. We
include the classes that are used by current static tools and those
that have a corresponding implementation in Java and Android.
These are the classes with the highest number of misuses in
Android and Java [5], [6], [16]. Extensions are possible, e.g.,
HKDF [42] can be added to the key derivation class.
(1) MessageDigest implements crypto hash functions [43].
These functions take as input an arbitrary amount of data and
produce ﬁxed-length hash values, called digests. They are used to
check data integrity. For this class, the most important parameter
is the algorithm (alg) that is used as hash function, for example,
SHA1, SHA256. Different libraries support different algorithms.
(2) SymmEncryption contains block ciphers that are used for
symmetric encryption [43]. A block cipher takes as input a block
of data with ﬁxed size (e.g., 128 bits) and a key (whose size
is deﬁned by the algorithm) and it generates the corresponding
output block (encrypted or decrypted). A decrypted block of data
is called plaintext, while an encrypted block is the ciphertext. In
addition to the algorithm (alg), e.g., AES, used for encryption
and decryption, we log the key (key) and some other parameters.
Block ciphers work on a ﬁxed-size data block. Therefore, to work
on multiple blocks of data (#blocks) they need to support some
operation modes (mode). For example, by using electronic code
book (ECB) each block is decrypted / encrypted independently
from the other blocks. With cipher block chaining (CBC), each
block of plaintext is xored with the previous block of ciphertext.
The initialization vector (IV) is a parameter (iv) that deﬁnes
the block that is xored with the very ﬁrst block. Other common
operation modes are cipher feedback (CFB), output feedback
(OFB), and Galois/counter (GCM). Another important parameter
is the padding algorithm (pad), which is the algorithm used to