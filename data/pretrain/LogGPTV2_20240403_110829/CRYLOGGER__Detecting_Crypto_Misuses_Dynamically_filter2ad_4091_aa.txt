# CRYLOGGER: Detecting Crypto Misuses Dynamically

**Authors:**  
Luca Piccolboni, Giuseppe Di Guglielmo, Luca P. Carloni, Simha Sethumadhavan  
Columbia University, New York, NY, USA  
{piccolboni, giuseppe, luca, simha}@cs.columbia.edu

**Abstract:**
Cryptographic (crypto) algorithms are essential for secure systems, ensuring properties such as integrity and confidentiality. However, developers often misuse these algorithms by using constant keys and weak passwords. This paper introduces CRYLOGGER, the first open-source tool to detect crypto misuses dynamically. CRYLOGGER logs the parameters passed to crypto APIs during execution and checks their legitimacy offline using a list of crypto rules. We compared CRYLOGGER with CryptoGuard, one of the most effective static tools for detecting crypto misuses. Our results show that CRYLOGGER complements CryptoGuard, making a strong case for combining static and dynamic approaches. We analyzed 1780 popular Android apps from the Google Play Store, demonstrating that CRYLOGGER can detect crypto misuses on thousands of apps dynamically and automatically. We reverse-engineered 28 Android apps to confirm the issues flagged by CRYLOGGER and disclosed the most critical vulnerabilities to app developers, collecting their feedback.

**Index Terms:**
Android, Cryptography, Security, Misuses

**Repository:**
https://github.com/lucapiccolboni/crylogger [1]

## I. Introduction
Cryptographic (crypto) algorithms are fundamental to secure systems, providing data confidentiality through encryption and data integrity through hashing. While cryptographic theory ensures these properties, poor implementations can compromise security. For example, Brumley et al. [4] demonstrated how an arithmetic bug in OpenSSL could reveal the entire private key of an elliptic curve-based encryption algorithm. 

Ensuring correct and secure implementation is not enough; crypto algorithms can also be misused. Egele et al. [5] found that 88% of Android apps downloaded from the Google Play Store had at least one crypto misuse, such as using hard-coded keys for encryption. Rahaman et al. [6] reported that 86% of the Android apps they analyzed used broken hash functions like SHA1, which can produce collisions, threatening data integrity.

Researchers have identified various causes of crypto misuses. Fischer et al. [8] found that many Android apps included code snippets from Stack Overflow, 98% of which contained crypto issues. Nadi et al. [9] attributed the complexity of application programming interfaces (APIs) as the primary cause of crypto misuses in Java. Acar et al. [10] highlighted poor documentation, lack of code examples, and bad default values in APIs as major contributors. Muslukhov et al. [11] and Rahaman et al. [6] showed that 90% of misuses in Android originated from third-party libraries.

To address these issues, researchers have developed tools to automatically detect crypto misuses. These tools define crypto rules and check if applications adhere to them by verifying the parameters passed to crypto APIs. Examples of such rules include setting a minimum key size for RSA encryption or a minimum number of iterations for key derivation. Static approaches, such as CrySL [15], CryptoLint [5], CryptoGuard [6], MalloDroid [16], CogniCrypt [17], and CMA [18], analyze the code without execution but can produce false positives and negatives. Dynamic approaches, like SMV-Hunter [22], AndroSSL [23], K-Hunt [24], and iCryptoTracer [25], do not usually produce false positives but are more difficult to use and support fewer crypto rules.

### A. Contributions
In this paper, we present CRYLOGGER, an open-source tool to detect crypto misuses dynamically. CRYLOGGER consists of:
1. A logger that monitors crypto API calls and logs relevant parameters.
2. A checker that analyzes the log file and reports violations of crypto rules.

Key insights of our work include:
- Logging relevant parameters by instrumenting a few widely-used classes.
- Logging parameter values at runtime and checking rules offline to minimize performance impact.
- Demonstrating that most crypto API calls in Android apps can be triggered at runtime, making dynamic detection effective.
- Showing that executing an application for a short time can detect many crypto misuses reported by static tools.

We envision two main uses of CRYLOGGER:
1. Developers can use it to find crypto misuses in their applications and third-party libraries, reducing false positives from static tools.
2. App stores can use CRYLOGGER to refine the misuses identified by static analysis, discarding false positives.

Our contributions include:
1. Describing CRYLOGGER, the first open-source tool for dynamic detection of crypto misuses.
2. Implementing CRYLOGGER for Android and Java apps, supporting 26 crypto rules.
3. Comparing CRYLOGGER with CryptoGuard using 150 popular Android apps, showing that both tools complement each other.
4. Evaluating false positives in CryptoGuard by reverse-engineering 150 Android apps.
5. Comparing CRYLOGGER with CryptoGuard using the CryptoAPI-Bench [26] and extending it with dynamic test cases.
6. Analyzing 1780 Android apps from the Google Play Store, confirming and reporting new misuses.
7. Disclosing vulnerabilities to 306 app and library developers, receiving feedback from 10, and manually reverse-engineering 28 apps to verify CRYLOGGER's findings.

## II. Overview
Figure 1 provides an overview of CRYLOGGER, which consists of:
1. **Logger:** Extends a crypto library (e.g., Java crypto library) to trace API calls to crypto algorithms and log relevant parameters.
2. **Checker:** Analyzes the log file offline after execution, producing a list of violated crypto rules using checking procedures.

We decouple logging from checking for several reasons:
1. Stability of crypto library parameters.
2. Changing crypto rules.
3. Context-dependent rules.
4. Performance considerations.

CRYLOGGER is primarily designed for Java and Android applications but can be adapted to other contexts.

## III. Related Work
### A. Detection of Crypto Misuses
Several tools exist to detect crypto misuses, mostly based on static analysis. These tools differ in supported crypto rules and slicing algorithms. CryptoGuard covers the highest number of crypto rules but still produces false positives and negatives. Dynamic approaches, while effective, are more challenging to use and support fewer rules.

### B. Other Related Research
Research has explored various aspects of crypto misuses, including the impact of code snippets from Stack Overflow, API complexity, and third-party libraries. Some approaches provide security tips or warnings in development environments, while others automatically repair problematic code snippets.

### C. Testing Android Apps
Dynamic and automatic analysis of Android apps is challenging. Common solutions include Monkey, which generates pseudo-random events to interact with the GUI, and more advanced tools like SmartDroid, DroidBot, and Dynodroid. CRYLOGGER uses Monkey due to its lightweight nature and common usage among developers.

## IV. Crypto Library and Crypto Rules
A typical crypto library (e.g., Java Cryptography Architecture) includes tasks such as message digest, symmetric encryption, asymmetric encryption, key derivation/generation, random number generation, key storage, and SSL/TLS and certificates. CRYLOGGER logs and checks the following parameters:
1. **MessageDigest:** Implements crypto hash functions, logging the algorithm (e.g., SHA1, SHA256).
2. **SymmEncryption:** Contains block ciphers for symmetric encryption, logging the algorithm (e.g., AES), key, operation modes (e.g., ECB, CBC), initialization vector (IV), and padding algorithm.

Extensions to the library are possible, such as adding HKDF to the key derivation class.

---

This revised version aims to make the text more coherent, clear, and professional, while maintaining the original content and structure.