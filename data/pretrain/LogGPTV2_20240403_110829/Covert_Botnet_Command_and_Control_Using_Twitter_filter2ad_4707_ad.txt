FUELTV
fredwilson
20.189543 Coccpthe
JorayLa
19.178421
31.618525
beteckucovao
20.768233 Diajan_m
26.922820 Boumezzost
24.335242
32.200608
23.335631 McolitePa
21.209548
27.280397 MarassttyM
shltirreaha
SEMarannesi
tudwpi
gzQbhCT
24.123132 wBc3HLqy
17.191901
30.477696 KvJhlRwF4G45
20.492829
25.873167
30.877799
25.831416 QzFS7n4StQt
ZhZ1B28vX
23.613131
hFIn6O
20.180779
21.652989
__hKc4vhHi
PthGonXE
vLdHuXVqDO
4ok1MwHzWD1
Score
44.472027
33.078578
67.152348
30.381789
56.543208
60.301202
58.562229
46.774850
23.278177
50.487769
Table 5: Sample names from each category and their scores.
in previous choices in the probability calculation. The result of
equation 1 becomes small very quickly because of the number of
possibilities, so the answer is stored in log-probability space. That
is, the actual calculation is as follows:
log P (N ) = log P (n1)+log P (n2 | n1)+···+log P (nk | nk−1).
(2)
The score of a name is then calculated as the negative log-probability
of the name. Therefore, a lower score is considered a better name
according to the Markov chain. The Markov chain was constructed
based on real name statistics, so if a name has a higher probability
of occurring according to the Markov chain, it should appear to be
a plausible name.
An experiment was run that computed these name scores for all
1.5 million names collected from Twitter along with the same num-
ber of names generated by the Markov chain, each name having
the same length as one of the names from the original set and also
a set of the same number of equally-lengthed random text names.
The average scores calculated from this experiment are presented
in ﬁgure 9. Some sample names from each category are presented
in table 5. Keep in mind that a lower score correlates to a higher
probability of being generated by the Markov chain.
These results show that names generated by the Markov chain
are statistically identical (within 0.002) to the real usernames used
to create the Markov chain. It is unlikely that an automated system
could distinguish between them. Random text, however, will not
work in this case. Randomly generated names appear signiﬁcantly
different than real user names.
4.3.2
Scoring Names using Human Analysis with Me-
chanical Turk
In addition to the statistical analysis, an experiment was per-
formed using Amazon’s Mechanical Turk15 system. The Mechani-
cal Turk system is a way to connect experimenters that need a hu-
man to evaluate something with willing participants that can per-
form the evaluation for a small fee per task.
For our experiment, we chose the sentiment analysis template.
This asks users to choose from one of ﬁve choices and provides
some more speciﬁc instructions about each choice. Each worker
was shown one user name that is either a real user name from Twit-
ter, a name generated by our Markov chain, or a name that is just
random text. The worker did not know from which group the name
appeared.
Essentially, we asked them to score their conﬁdence in recog-
nizing whether or not the name was real. If they were conﬁdent
that it was fake, they should have answered in the negative. If they
were conﬁdent that it was real, they should have answered in the
positive. If they were not sure, they should have answered neutral.
The negative responses are scored with either -1 or -2 depending
on their degree of conﬁdence and the positive responses are scored
with either 1 or 2 depending on their conﬁdence. A neutral re-
sponse scores 0. Each worker was compensated $0.10 for each
name they scored. It should be noted that this experiment is ex-
empt from IRB approval because no identifying information about
any participants is collected. In fact, Mechanical Turk does not pro-
vide a way for requesters to identify workers. Instead, each worker
has a pseudonymous user ID number. Participants were only asked
to respond to a survey of their opinions about the validity of the
user names, not even the user ID was collected after the experiment
was performed.
In total, 50 names were chosen from each category and each
name was shown to ﬁve different workers. The aggregated results
are shown in ﬁgures 10, 11, and 12.
These results show some differences compared with the auto-
mated statistical analysis above. Random names, however, appear
obviously fake to human examiners. Almost all responses for the
random names were negative.
It does appear, though, that hu-
mans are not conﬁdent in recognizing real names either, with a
plurality of results being zero and some negative. They seem to
have some inclination toward recognizing fake names generated by
the Markov chain, with more negative answers than the real user
names, but very few considered themselves very conﬁdent (a score
of -2).
The results from both the statistical analysis and the Mechani-
cal Turk survey indicate that the method being used for username
generation is sufﬁcient to create usernames that would not appear
abnormal to either an automated name analysis tool or to human
users viewing the page on Twitter. Therefore, this method can be
used as the username generation method for a botnet that must cre-
ate a new account and switch communications to it for some rea-
son, e.g. if Twitter blocks the previous account. By starting with a
common seed, each bot can generate the appropriate new name and
connect to the new account.
5. RELATED WORK
Stegobot [12] is a botnet designed to communicate using social
networks (speciﬁcally Facebook) and image stegangraphy. The au-
thors design two separated types of message: bot commands and
bot cargo. The bot commands are messages from the botmaster to
the bots instructing them. The bot cargo are messages from the bots
back to the botmaster containing stolen information.
Stegobot [12] uses a distributed, peer to peer communication
channel and does not generate its own cover messages. Instead, it
15https://www.mturk.com
uses the image ﬁles that the victims are already uploading to the so-
cial network as the cover messages, embedding the secret messages
within. The botnet software intercepts the images being posted to
embed the message before it is sent to Facebook. Stegobot uses
the existing network of relationships for each victim as the com-
munication channel. In their experiments, the authors used a set
of 116 images. One of the difﬁculties of this technique is the au-
tomatic image manipulation performed by Facebook as the images
are uploaded. This can tamper with the content of the embedded
message, requiring a highly robust stego system.
Natarajan et al. [13] designed a detection scheme for Stegobot
that uses the information entropy of the image ﬁles that are acting
as the cover objects. Their detection technique achieved average
detection rates exceeding 70% in their experiments for several dif-
ferent image steganography methods.
A similar work by Singh et al. [19] uses Twitter for botnet C&C,
but does not apply steganography to hide the communications. In-
stead, the commands are posted directly to the Twitter account.
This allows the botmaster to leverage the beneﬁts of social net-
works for botnet C&C, but they used communication methods that
will likely appear highly suspicious to any viewers.
SocialClymene [6] is a detection scheme designed speciﬁcally
for detecting stego-based botnet command and control methods us-
ing social networks, however it is designed for image steganogra-
phy such as stegobot. CatchSync [9] is another detection technique
that looks at connectivity of nodes in a directed graph to ﬁnd sus-
picious nodes. In the case of Twitter, connectivity is determined by
which accounts follow other accounts.
Sebastian et al. [18] have created a similar mechanism for bot-
net command and control using encrypted tweets. This method
mixes irrelevant sentences among tweets that contain botnet com-
mands. Their command tweets follow the formula of #keyword
command, where the value of command would be encrypted. While
this method can hide the commands being issued, it does not con-
ceal the existence of the commands. Each command follows the
same formula and can be differentiated from other tweets posted on
the botmaster’s account. Additionally, no mechanism is described
for recovering if the botmaster’s account has been closed due to
detection of malicious activity.
6. CONCLUSION
In this paper, we have demonstrated a general-purpose stego sys-
tem that allows secret communication through the Twitter social
network using only metadata for communication. We have showed
that this system can be used for botnet command and control through
the development of a Twitter stego system and a specialized botnet
C&C language. We have discussed the performance evaluation of
the proposed system using Emulab, and usability study using Ama-
zon MTurk. We have also discussed how the vast userbase and
large scale of Twitter facilitates ample steganograpic security. By
demonstrating how a botmaster might perform such communica-
tion using online social networks, our work provides the basis to
detect and prevent emerging botnet activities.
There are other possible steganographic techniques that can be
applied using Twitter. For example, Twitter allows posting images
along with tweets16 and there are many existing image steganog-
raphy techniques [8] that are often used for watermarking, but can
also be used for communication. The existing system can also be
used on other social network websites such as Facebook, but it may
be necessary to collect data from these websites when deciding on
16https://support.twitter.com/articles/
20156423-posting-photos-on-twitter
Figure 10: Aggregate scores for real user-
names from the Mechanical Turk experi-
ment.
Figure 11: Aggregate scores for Markov
chain generated usernames from the Me-
chanical Turk experiment.
Figure 12: Aggregate scores for random
text usernames from the Mechanical Turk
experiment.
the message length distribution. Unlike Twitter, these other web-
sites generally allow much longer posts, so the system could take
advantage of the increased variation.
It is possible to use this system for key exchange for other exist-
ing stego systems. It is necessary in steganographic key exchange
to have a stego system that can be used to transmit the key, other-
wise an adversary can detect the communication of the keys. Be-
cause this system has a relatively low information bandwidth, it
may be well suited for key exchange that does not require a signif-
icant amount of information. This concept is applied in cryptogra-
phy where a public key algorithm such as RSA is used to send a key
for a symmetric algorithm such as AES because AES can achieve
better encryption and decryption performance than RSA, although
it is technically possible to send all of the communications using
RSA.
7. REFERENCES
[1] Rainer Böhme. Advanced Statistical Steganalysis. Springer,
August 2010.
[2] Zack Coburn and Greg Marra. Realboy: believable twitter
bots. http://ca.olin.edu/2008/realboy/index.html.
[3] Franck Dernoncourt. Designing an intelligent dialogue
system for serious games, 2012.
[4] Abdelrahman Desoky. Noiseless Steganography: The Key to
Covert Communications. CRC Press, February 2012.
[5] Donald L. Evans, Phillip J. Bond, and Arden L. Bement.
Federal information processing standards publication:
Standards for security categorization of federal information
and information systems, February 2004.
[6] M. Ghanadi and M. Abadi. Socialclymene: A negative
reputation system for covert botnet detection in social
networks. In Telecommunications (IST), 2014 7th
International Symposium on, pages 954–960, Sept 2014.
[7] D. Gollmann. Computer Security. Wiley, 3 edition, 2012.
[8] F. Hartung and M. Kutter. Multimedia watermarking
techniques. Proceedings of the IEEE, 87(7):1079–1107, Jul
1999.
[9] Meng Jiang, Peng Cui, Alex Beutel, Christos Faloutsos, and
Shiqiang Yang. Catchsync: Catching synchronized behavior
in large directed graphs. In Proceedings of the 20th ACM
SIGKDD International Conference on Knowledge Discovery
and Data Mining, KDD ’14, pages 941–950, New York, NY,
USA, 2014. ACM.
[10] Auguste Kerckhoffs. La cryptographie militaire. Journal des
Sciences Militaires, 5(38):161–191, 1883.
[11] Jan Kok and Bernhard Kurz. Analysis of the botnet
ecosystem. In Telecommunication, Media and Internet
Techno-Economics (CTTE), 10th Conference of, pages 1–10,
May 2011.
[12] Shishir Nagaraja, Amir Houmansadr, Pratch Piyawongwisal,
Vijit Singh, Pragya Agarwal, and Nikita Borisov. Stegobot: a
covert social network botnet. In Information Hiding, pages
299–313. Springer, 2011.
[13] V. Natarajan, Shina Sheen, and R. Anitha. Detection of
stegobot: A covert social network botnet. In Proceedings of
the First International Conference on Security of Internet of
Things, SecurIT ’12, pages 36–41, New York, NY, USA,
2012. ACM.
[14] J. R. Norris. Markov Chains. Cambridge University Press, 1
edition, 1998.
[15] A Perez-Garcia, C. Siaterlis, and M. Masera. Studying
characteristics of an emulab testbed for scientiﬁcally
rigorous experiments. In Distributed Simulation and Real
Time Applications (DS-RT), 2010 IEEE/ACM 14th
International Symposium on, pages 215–218, Oct 2010.
[16] Andreas Pﬁtzmann and Marit Hansen. A terminology for
talking about privacy by data minimization: Anonymity,
unlinkability, undetectability, unobservability, pseudonymity,
and identity management. http://dud.inf.tu-
dresden.de/literatur/Anon_Terminology_v0.34.pdf, August
2010. v0.34.
[17] Rafael A. Rodríguez-Gómez, Gabriel Maciá-Fernández, and
Pedro García-Teodoro. Survey and taxonomy of botnet
research through life-cycle. ACM Comput. Surv.,
45(4):45:1–45:33, August 2013.
[18] S. Sebastian, S. Ayyappan, and P. Vinod. Framework for
design of graybot in social network. In Advances in
Computing, Communications and Informatics (ICACCI,
2014 International Conference on, pages 2331–2336, Sept
2014.
[19] Ashutosh Singh, Annie H. Toderici, Kevin Ross, and Mark
Stamp. Social networking for botnet command and control.
International Journal of Computer Network and Information
Security, 6:11–17, May 2013.
[20] William Stallings and Lawrie Brown. Computer Security:
Principles and Practice. Pearson, 2 edition, 2012.
[21] F. Yergeau. UTF-8, a transformation format of ISO 10646.
RFC 3629 (INTERNET STANDARD), November 2003.
[22] H.R. Zeidanloo and A.A. Manaf. Botnet command and
control mechanisms. In Computer and Electrical
Engineering, 2009. ICCEE ’09. Second International
Conference on, volume 1, pages 564–568, Dec 2009.