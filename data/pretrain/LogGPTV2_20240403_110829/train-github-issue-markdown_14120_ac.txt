            kwargs     = {}
            self       = 
            vargs      = (, array([0.5]), array([15]), array([8]))
    /Users/admin/scipy-dev/lib/python3.10/site-packages/numpy/lib/function_base.py:2411: in _vectorize_call
        outputs = ufunc(*inputs)
            args       = (, array([0.5]), array([15]), array([8]))
            func       = 
            inputs     = [array(,
          dtype=object), array([0.5], dtype=object), array([15], dtype=object), array([8], dtype=object)]
            otypes     = 'd'
            self       = 
            ufunc      = 
    scipy/stats/_distn_infrastructure.py:2943: in _drv2_ppfsingle
        qb = self._cdf(b, *args)
            _a         = -inf
            _b         = inf
            a          = -inf
            args       = (15, 8)
            b          = 50
            q          = 0.5
            self       = 
    scipy/stats/_discrete_distns.py:1438: in _cdf
        1 - _boost._ncx2_cdf(2*mu1, 2*(x+1), 2*mu2))
    E   RuntimeWarning: overflow encountered in _ncx2_cdf
            mu1        = 15
            mu2        = 8
            self       = 
            x          = 50.0
    _____________________________ test_skellam_gh11474 _____________________________
    scipy/stats/tests/test_discrete_distns.py:238: in test_skellam_gh11474
        cdf = skellam.cdf(0, mu, mu)
            mu         = [1, 10, 100, 1000, 5000, 5050, ...]
    scipy/stats/_distn_infrastructure.py:3433: in cdf
        place(output, cond, np.clip(self._cdf(*goodargs), 0, 1))
            _          = 1
            _a         = -inf
            _b         = inf
            args       = (array([   1,   10,  100, 1000, 5000, 5050, 5100, 5250, 6000]), array([   1,   10,  100, 1000, 5000, 5050, 5100, 5250, 6000]))
            cond       = array([ True,  True,  True,  True,  True,  True,  True,  True,  True])
            cond0      = array([ True,  True,  True,  True,  True,  True,  True,  True,  True])
            cond1      = True
            cond2      = False
            cond3      = False
            goodargs   = [array([0, 0, 0, 0, 0, 0, 0, 0, 0]), array([   1,   10,  100, 1000, 5000, 5050, 5100, 5250, 6000]), array([   1,   10,  100, 1000, 5000, 5050, 5100, 5250, 6000])]
            k          = array(0)
            kwds       = {}
            loc        = array(0)
            output     = array([0., 0., 0., 0., 0., 0., 0., 0., 0.])
            self       = 
    scipy/stats/_discrete_distns.py:1438: in _cdf
        1 - _boost._ncx2_cdf(2*mu1, 2*(x+1), 2*mu2))
    E   RuntimeWarning: overflow encountered in _ncx2_cdf
            mu1        = array([   1,   10,  100, 1000, 5000, 5050, 5100, 5250, 6000])
            mu2        = array([   1,   10,  100, 1000, 5000, 5050, 5100, 5250, 6000])
            self       = 
            x          = array([0., 0., 0., 0., 0., 0., 0., 0., 0.])
    _____________________________ TestSkellam.test_cdf _____________________________
    scipy/stats/tests/test_distributions.py:3249: in test_cdf
        assert_almost_equal(stats.skellam.cdf(k, mu1, mu2), skcdfR, decimal=5)
            k          = array([-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,
             3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14])
            mu1        = 10
            mu2        = 5
            self       = 
            skcdfR     = array([6.40614754e-05, 1.78109860e-04, 4.67906118e-04, 1.15967690e-03,
           2.70774851e-03, 5.94897601e-03, 1.228634...799e-01, 8.77852572e-01,
           9.21121265e-01, 9.51369425e-01, 9.71360859e-01, 9.83877736e-01,
           9.91316724e-01])
    scipy/stats/_distn_infrastructure.py:3433: in cdf
        place(output, cond, np.clip(self._cdf(*goodargs), 0, 1))
            _          = 1
            _a         = -inf
            _b         = inf
            args       = (array(10), array(5))
            cond       = array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True,  True,  True])
            cond0      = True
            cond1      = array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True,  True,  True,  True,  True,
            True,  True,  True,  True,  True,  True,  True])
            cond2      = array([False, False, False, False, False, False, False, False, False,
           False, False, False, False, False, False, False, False, False,
           False, False, False, False, False, False, False])
            cond3      = array([False, False, False, False, False, False, False, False, False,
           False, False, False, False, False, False, False, False, False,
           False, False, False, False, False, False, False])
            goodargs   = [array([-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,
             3,   4,   5,   6,   7,   8,   9,  10...0, 10, 10, 10, 10, 10, 10]), array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
           5, 5, 5])]
            k          = array([-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,
             3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14])
            kwds       = {}
            loc        = array(0)
            output     = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0., 0., 0., 0.])
            self       = 
    scipy/stats/_discrete_distns.py:1437: in _cdf
        _boost._ncx2_cdf(2*mu2, -2*x, 2*mu1),
    E   RuntimeWarning: overflow encountered in _ncx2_cdf
            mu1        = array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
           10, 10, 10, 10, 10, 10, 10, 10])
            mu2        = array([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
           5, 5, 5])
            self       = 
            x          = array([-10.,  -9.,  -8.,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,
             1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.,
            12.,  13.,  14.])
    ___________________________ TestExpect.test_skellam ____________________________
    scipy/stats/tests/test_distributions.py:4833: in test_skellam
        m1 = stats.skellam.expect(lambda x: x, args=(p1, p2))
            p1         = 18
            p2         = 22
            self       = 
    scipy/stats/_distn_infrastructure.py:3739: in expect
        x0 = self.ppf(0.5, *args)
            _a         = -inf
            _b         = inf
            args       = (18, 22)
            chunksize  = 32
            conditional = False
            fun        = .fun at 0x2852a5120>
            func       = . at 0x2852a4ca0>
            invfac     = 1.0
            lb         = -inf
            loc        = 0
            maxcount   = 1000
            self       = 
            tolerance  = 1e-10
            ub         = inf
    scipy/stats/_distn_infrastructure.py:3592: in ppf
        place(output, cond, self._ppf(*goodargs) + loc)
            _          = 1
            _a         = -inf
            _b         = inf
            args       = (array(18), array(22))
            cond       = True
            cond0      = True
            cond1      = True
            cond2      = False
            goodargs   = [array([0.5]), array([18]), array([22])]
            kwds       = {}
            loc        = array([0])
            output     = array(nan)
            q          = array(0.5)
            self       = 
    scipy/stats/_distn_infrastructure.py:989: in _ppf
        return self._ppfvec(q, *args)
            args       = (array([18]), array([22]))
            q          = array([0.5])
            self       = 
    /Users/admin/scipy-dev/lib/python3.10/site-packages/numpy/lib/function_base.py:2328: in __call__
        return self._vectorize_call(func=func, args=vargs)
            args       = (, array([0.5]), array([18]), array([22]))
            excluded   = set()
            func       = 
            kwargs     = {}
            self       = 
            vargs      = (, array([0.5]), array([18]), array([22]))
    /Users/admin/scipy-dev/lib/python3.10/site-packages/numpy/lib/function_base.py:2411: in _vectorize_call
        outputs = ufunc(*inputs)
            args       = (, array([0.5]), array([18]), array([22]))
            func       = 
            inputs     = [array(,
          dtype=object), array([0.5], dtype=object), array([18], dtype=object), array([22], dtype=object)]
            otypes     = 'd'
            self       = 
            ufunc      = 
    scipy/stats/_distn_infrastructure.py:2943: in _drv2_ppfsingle
        qb = self._cdf(b, *args)
            _a         = -inf
            _b         = inf
            a          = -inf
            args       = (18, 22)
            b          = 50
            q          = 0.5
            self       = 
    scipy/stats/_discrete_distns.py:1438: in _cdf
        1 - _boost._ncx2_cdf(2*mu1, 2*(x+1), 2*mu2))
    E   RuntimeWarning: overflow encountered in _ncx2_cdf
            mu1        = 18
            mu2        = 22
            self       = 
            x          = 50.0
    __________________________ test_ncx2_tails_ticket_955 __________________________
    scipy/stats/tests/test_distributions.py:6292: in test_ncx2_tails_ticket_955
        a = stats.ncx2.cdf(np.arange(20, 25, 0.2), 2, 1.07458615e+02)
    scipy/stats/_distn_infrastructure.py:2160: in cdf
        place(output, cond, self._cdf(*goodargs))
            _a         = 0.0
            _b         = inf