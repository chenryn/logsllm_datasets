0
)
n
m
i
(
t
s
o
C
r
e
v
r
e
S
0
Qnum
Qocc
20
Radix b
40
)
B
i
k
(
t
s
o
C
.
m
m
o
C
200
100
0
Qnum
Qocc
40
20
Radix b
Figure 4: Performance of our PPSS protocol as a function of the radix b employed in the PIR algorithms. Private
search of q = CTGCAG in a genome with 500k nucleotides
)
s
(
t
s
o
C
t
n
e
i
l
C
20
10
0
Qnum b=20
Qocc b=20
Qnum bn opti
Qocc bo opti
0
20
40
Genome size (MiB)
102
101
100
10−1
)
n
m
i
(
t
s
o
C
r
e
v
r
e
S
Qnum 1 core
Qocc 1 core
20
Qnum bn cores
Qocc bo cores
40
Genome size (MiB)
0
300
200
100
)
B
i
k
(
t
s
o
C
.
m
m
o
C
0
Qnum b=20
Qocc b=20
20
Qnum bn opti
Qocc bo opti
40
Genome size (MiB)
Figure 5: Performance of our PPSS protocol as a function of the genomic document size to find one occurrence of
the substring q = CTGCAG. Considering each document size in increasing order, the optimal values of radixes bn
and bo employed during the experiments are {13, 17, 21, 26, 14, 17, 20, 21} and {27, 14, 17, 20, 24, 28, 17, 18}, respectively
our results refer to a single round of communication. In Fig-
ure 4 a remotely stored string with length equal to 500 · 103
characters is considered, and the client, server and communi-
cation costs are shown as a function of the radix b employed
in the Lipmaa’s PIR algorithm. As expected, increasing val-
ues of b allows to significantly decrease the computational
cost on server side; conversely, the client and communication
costs, which include a factor O(b log2
b(n)) (see Section 3.3),
increase with the values of b, save for small values of b. The
results suggest that the optimal value of b must be found
considering the overall response time of a query, and should
be differentiated between the phases Qnum and Qocc of the
Query procedure as bn and bo, respectively.
In the next batch of tests, we consider a single-core im-
plementation where we employ the same value b = 20 for
genomes of increasing size, to observe how the performances
are affected only by the size of the document collection. In ad-
dition, we consider also a multi-core implementation of the
Search procedure of the Lipmaa’s PIR protocol. Specifically,
we employ a simple parallelization strategy which employs
b cores to simultaneously compute all the b recursive calls of
Algorithm 4. For these tests, we employ the optimal values
bn and bo for each document size. The results of these tests
are shown in Fig. 5. Regarding the server cost, we observe
a linear trend in both the single-core (continuous lines in
Fig. 5) and the multi-core implementations (dashed lines in
Fig. 5); nevertheless, the multi-core implementation is at least
one order of magnitude faster than the single-core, achiev-
ing much more practical performances (i.e., approximately 5
minutes to search for the substring q = CTGCAG in a 40·106
characters document containing the whole chromosome).
The client and communication costs show the expected
poly-logarithmic trend which allows to exchange kilobytes
of data to search for the occurrences of q = CTGCAG in the
whole chromosome. Furthermore, in Fig. 5 the dashed lines
on plots reporting the client and communication costs show
the benefits of employing specific values bn and bo tailored
for the size of the document.
Willing to compare the execution time of our protocol with
the one of the BWT-based substring-search procedure out-
lined in Algorithm 1 (that features no security guarantees),
we focused on querying a single occurrence of the substring
q = CTGCAG in the outsourced document. The experiment
showed an execution time for Algorithm 1 equal to a few mi-
croseconds. We remark that querying for a single occurrence
of q makes the computational complexity of Algorithm 1
unrelated to the size of the outsourced document, while the
PIR-based Query procedure outlined in Algorithm 3 has a
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
)
B
G
(
n
o
i
t
p
m
u
s
n
o
C
y
r
o
m
e
M
2
1
0
32M
2M
8M
500k
15
0
5
10
# Queries
Figure 6: Memory consumption of our PPSS protocol
when multiple simultaneous queries are performed.
Each line represent a genome with a different size
computational complexity depending linearly on the size of
the outsourced document.
Lastly, willing to verify the limited memory consumption
when multiple-queries are simultaneously performed, we
run each query in a separate thread, measuring the memory
consumption of the process, as exposed by the process record
in Linux’s proc virtual filesystem. Figure 6 shows that as the
number of simultaneous queries is increased, the memory
consumption increases keeping (roughly) the same rate for
the four dataset sizes considered. These results agree with
the asymptotic spatial evaluations reported at the end of
Section 4, where substantial storage savings w.r.t. replicating
the whole data structure per-query, are discussed.
7 CONCLUDING REMARKS
We presented the first substring search protocol with proven
guarantees of search and access pattern privacy that enables
the simultaneous execution of queries from multiple users
without the need of the data owner being online, and ex-
hibiting a sub-linear (poly-logarithmic) communication cost
per user. Our experimental validation with a case study on
genomic data shows practical execution times and communi-
cation costs, and highlights the possibility of achieving sig-
nificant benefits tuning the radix b for Lipmaa’s PIR element
representation. As interesting further developments, we will
investigate how to reduce the overall query response time
by employing different parameters and a different FLAHE
scheme as building block of the Lipmaa’s PIR. Indeed, in this
work we aimed at minimizing the communication cost of
the protocol, while results reported in [21] suggests that in
some scenarios the overall query response time is improved
by tuning the PIR parameters to tradeoff a low-bandwidth
for significant computational savings at server side, and/or
to employ a lattice-based FLAHE cryptoscheme as building
block of the Lipmaa’s PIR instead of generalized Pailler one.
ACKNOWLEDGEMENTS
This work was supported in part by the EU Commission
grant: “WorkingAge” (H2020 RIA) Grant agreement no. 826232.
REFERENCES
[1] Pierre Baldi, Roberta Baronio, Emiliano De Cristofaro, Paolo Gasti, and
Gene Tsudik. 2011. Countering GATTACA: efficient and secure testing
of fully-sequenced human genomes. In Proc. of the 18th ACM Conf. on
Computer and Communications Security, CCS 2011, Chicago, Illinois,
USA, October 17-21, 2011, Y. Chen, G. Danezis, and V. Shmatikov (Eds.).
ACM, 691–702. https://doi.org/10.1145/2046707.2046785
[2] John Black and Phillip Rogaway. 2002. Ciphers with Arbitrary Finite
Domains. In Topics in Cryptology - CT-RSA 2002, The Cryptographer’s
Track at the RSA Conf., 2002, San Jose, CA, USA, February 18-22, 2002,
Proc. (Lecture Notes in Computer Science), Bart Preneel (Ed.), Vol. 2271.
Springer, 114–130. https://doi.org/10.1007/3-540-45760-7_9
[3] Christoph Bösch, Pieter H. Hartel, Willem Jonker, and Andreas Peter.
2014. A Survey of Provably Secure Searchable Encryption. ACM
Comput. Surv. 47, 2 (2014), 18:1–18:51. https://doi.org/10.1145/2636328
[4] Michael Burrows and David Wheeler. 1994. A block-sorting lossless
data compression algorithm. Technical Report. Digital Equipment
Corporation. 18 pages. http://www.hpl.hp.com/techreports/Compaq-
DEC/SRC-RR-124.pdf
[5] David Cash, Paul Grubbs, Jason Perry, and Thomas Ristenpart. 2015.
Leakage-Abuse Attacks Against Searchable Encryption. In Proc. of the
22nd ACM SIGSAC Conf. on Computer and Communications Security,
Denver, CO, USA, October 12-16, 2015, Indrajit Ray, Ninghui Li, and
Christopher Kruegel (Eds.). ACM, 668–679. https://doi.org/10.1145/
2810103.2813700
[6] Melissa Chase and Emily Shen. 2015.
Substring-Searchable
Symmetric Encryption.
PoPETs 2015, 2 (2015), 263–281.
http://www.degruyter.com/view/j/popets.2015.2015.issue-2/popets-
2015-0014/popets-2015-0014.xml
[7] P.J. Cock, C.J. Fields, N. Goto, M.L. Heuer, and P.M. Rice. 2010. The
Sanger FASTQ file format for sequences with quality scores, and the
Solexa/Illumina FASTQ variants. Nucleic Acids Research 38, 6 (2010),
1767–1771. https://doi.org/10.1093/nar/gkp1137
[8] Reza Curtmola, Juan A. Garay, Seny Kamara, and Rafail Ostrovsky.
2006. Searchable symmetric encryption: improved definitions and
efficient constructions. In Proc. of the 13th ACM Conf. on Computer and
Communications Security, CCS 2006, Alexandria, VA, USA, October 30 -