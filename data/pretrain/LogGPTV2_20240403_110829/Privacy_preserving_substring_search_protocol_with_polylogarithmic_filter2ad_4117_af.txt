# Performance Analysis of the PPSS Protocol

## Figure 4: Impact of Radix \( b \) on PPSS Protocol Performance
- **Scenario**: Private search for the substring \( q = \text{CTGCAG} \) in a genome with 500,000 nucleotides.
- **Metrics**:
  - Client cost (C)
  - Server cost (S)
  - Communication cost (Cm)

### Observations
- **Server Cost**: Increasing the radix \( b \) significantly reduces the computational cost on the server side.
- **Client and Communication Costs**: These costs, which include a factor of \( O(b \log^2 b(n)) \), increase with \( b \), except for small values of \( b \).
- **Optimal Radix**: The optimal value of \( b \) should be determined by considering the overall response time and should be different for the \( Qnum \) and \( Qocc \) phases, denoted as \( b_n \) and \( b_o \), respectively.

## Figure 5: Performance of PPSS Protocol with Varying Genome Sizes
- **Scenario**: Searching for one occurrence of the substring \( q = \text{CTGCAG} \) in genomes of increasing size.
- **Optimal Radix Values**:
  - For \( Qnum \): \( \{13, 17, 21, 26, 14, 17, 20, 21\} \)
  - For \( Qocc \): \( \{27, 14, 17, 20, 24, 28, 17, 18\} \)

### Observations
- **Single-Core Implementation**: Uses a fixed radix \( b = 20 \) for all genome sizes. The server cost shows a linear trend.
- **Multi-Core Implementation**: Employs \( b \) cores to compute the recursive calls in parallel. This implementation is at least an order of magnitude faster than the single-core version.
- **Practical Performance**: The multi-core implementation can search for the substring in a 40 million character document in approximately 5 minutes.
- **Client and Communication Costs**: Show a poly-logarithmic trend, allowing for efficient data exchange even for large documents.

## Comparison with BWT-Based Substring Search
- **BWT-Based Algorithm (Algorithm 1)**: Execution time is a few microseconds, but it has no security guarantees.
- **PIR-Based Query (Algorithm 3)**: Computational complexity depends linearly on the document size, making it more suitable for secure searches.

## Memory Consumption with Multiple Queries
- **Scenario**: Simultaneous execution of multiple queries.
- **Observations**: Memory consumption increases at a roughly constant rate as the number of simultaneous queries increases, confirming the asymptotic spatial evaluations.

## Concluding Remarks
- **First Secure Substring Search Protocol**: Enables multiple users to execute queries simultaneously without the data owner being online, with sub-linear communication cost.
- **Future Work**: Investigate ways to reduce query response time by tuning parameters and using different FLAHE schemes.

## Acknowledgements
This work was supported in part by the EU Commission grant: "WorkingAge" (H2020 RIA) Grant agreement no. 826232.

## References
- [1] Baldi, P., Baronio, R., De Cristofaro, E., Gasti, P., Tsudik, G. (2011). Countering GATTACA: efficient and secure testing of fully-sequenced human genomes. In Proc. of the 18th ACM Conf. on Computer and Communications Security, CCS 2011.
- [2] Black, J., Rogaway, P. (2002). Ciphers with Arbitrary Finite Domains. In Topics in Cryptology - CT-RSA 2002.
- [3] BÃ¶sch, C., Hartel, P.H., Jonker, W., Peter, A. (2014). A Survey of Provably Secure Searchable Encryption. ACM Comput. Surv.
- [4] Burrows, M., Wheeler, D. (1994). A block-sorting lossless data compression algorithm. Technical Report. Digital Equipment Corporation.
- [5] Cash, D., Grubbs, P., Perry, J., Ristenpart, T. (2015). Leakage-Abuse Attacks Against Searchable Encryption. In Proc. of the 22nd ACM SIGSAC Conf. on Computer and Communications Security.
- [6] Chase, M., Shen, E. (2015). Substring-Searchable Symmetric Encryption. PoPETs.
- [7] Cock, P.J., Fields, C.J., Goto, N., Heuer, M.L., Rice, P.M. (2010). The Sanger FASTQ file format for sequences with quality scores, and the Solexa/Illumina FASTQ variants. Nucleic Acids Research.
- [8] Curtmola, R., Garay, J.A., Kamara, S., Ostrovsky, R. (2006). Searchable symmetric encryption: improved definitions and efficient constructions. In Proc. of the 13th ACM Conf. on Computer and Communications Security, CCS 2006.