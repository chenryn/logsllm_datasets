The Assert\Valid is not taken into account and the form is just considered
valid, even if the constraints are not met. The issue can be reproduced by
taking the example over here :  
http://symfony.com/doc/current/book/forms.html#embedding-a-single-object
  * Add any constraint to Entity\Category with: `groups={"validationgroup"}`
  * Change `@Assert\Type(...)` in Entity\Task to `@Assert\Valid`
  * Add `'validation_groups' => array('validationgroup')` to Form\Type\CategoryType in `$resolver->setDefaults`
  * Remove `'cascade_validation' => true,` from Form/Type/TaskType. As we use Assert\Valid, this should not be necessary, or am I wrong?
  * Create a controller:
    class TestController extends Controller
    {
        public function indexAction()
        {
            $form = $this->createForm(new TaskType(), new Task());
            $form->add('save', 'submit');
            $form->handleRequest($this->getRequest());
            if($form->isValid()){
                echo 'the form is valid...';
            }
            return $this->render('AcmeDemoBundle:Test:taskform.html.twig', array(
                'form' => $form->createView()
            ));
        }
    }
  * and twig template :
    Add task
    {{ form(form) }}
I can provide you this bundle, zipped, if you want. I have also found that (by
placing a debug closure in `validation_groups`) the `validation_groups` is
read by the validator but it doesn't seem to be used.
Tested with version 2.3.7
![capture](https://camo.githubusercontent.com/5efc3ddaed1bedc42eb9c0cb130794650f526dcdfe3f60e830800ba81ec966ed/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313330393534342f313634323434312f61343861333863382d353838332d313165332d393263312d3736323237343132363433662e504e47)