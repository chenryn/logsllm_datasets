-------------------    
 t    
(1 row)    
[postgres@1373488a35ab ~]$ psql -p 5433 -c "select pg_is_in_recovery();"    
 pg_is_in_recovery     
-------------------    
 f    
(1 row)    
[postgres@1373488a35ab ~]$ psql -p 5434 -c "select pg_is_in_recovery();"    
 pg_is_in_recovery     
-------------------    
 t    
(1 row)    
```    
polardb与aurora类似, 共享存储集群模式, 无需pgpool来管理HA.    
- https://www.pgpool.net/docs/latest/en/html/example-aurora.html    
配置pgpool.conf    
```    
cd /usr/local/pgpool4.4.5/etc    
sudo vi pgpool.conf    
listen_addresses = '0.0.0.0'    
port = 9999    
unix_socket_directories = '/tmp'    
pcp_listen_addresses = 'localhost'    
pcp_port = 9898    
pcp_socket_dir = '/tmp'    
log_destination = 'stderr'    
logging_collector = on    
log_directory = '/tmp/pgpool_logs'    
pid_file_name = '/var/run/pgpool/pgpool.pid'    
logdir = '/tmp'    
backend_clustering_mode = 'streaming_replication'    
load_balance_mode = on    
sr_check_period = 0    
health_check_period = 0    
failover_on_backend_shutdown=off    
failover_on_backend_error=off    
enable_pool_hba = on    
backend_hostname0 = '127.0.0.1'    
backend_port0 = '5433'    
backend_weight0 = 1    
backend_application_name0 = 'polardb_primray'    
backend_flag0 = 'ALWAYS_PRIMARY|DISALLOW_TO_FAILOVER'    
backend_hostname1 = '127.0.0.1'    
backend_port1 = '5432'    
backend_weight1 = 2    
backend_application_name1 = 'polardb_reader1'    
backend_flag1 = 'DISALLOW_TO_FAILOVER'    
backend_hostname2 = '127.0.0.1'    
backend_port2 = '5434'    
backend_weight2 = 2    
backend_application_name2 = 'polardb_reader2'    
backend_flag2 = 'DISALLOW_TO_FAILOVER'    
```    
配置pool_hba.conf    
```    
sudo vi pool_hba.conf    
# add    
host all all 0.0.0.0/0 md5    
```    
配置pgpool数据库用户密码文件pool_passwd    
```    
[postgres@1373488a35ab etc]$ sudo $(which pg_md5) --md5auth --username=digoal pwd123    
[postgres@1373488a35ab etc]$ cat /usr/local/pgpool4.4.5/etc/pool_passwd     
digoal:md531a770cec82aa37e217bb6e46c3f9d55    
-- 实际上就是pwd+username的md5值    
postgres=# select md5('pwd123digoal');    
               md5                    
----------------------------------    
 31a770cec82aa37e217bb6e46c3f9d55    
(1 row)    
```    
在数据库中创建相应pgpool-II的映射用户    
```    
psql -p 5433  
postgres=# create user digoal superuser encrypted password 'pwd123' login;    
CREATE ROLE    
```    
配置pcp管理用户密码文件pcp.conf    
```    
postgres=# select md5('pwd123');    
               md5                    
----------------------------------    
 45cb41b32dcfb917ccd8614f1536d6da    
(1 row)    
cd /usr/local/pgpool4.4.5/etc    
sudo vi pcp.conf    
pcpadm:45cb41b32dcfb917ccd8614f1536d6da    
```    
准备pgpool运行时pid文件目录和日志目录    
```    
sudo mkdir /var/run/pgpool    
sudo mkdir /tmp/pgpool_logs    
```    
启动pgpool    
```    
sudo $(which pgpool)   
```    
使用pcp管理命令查看pgpool中间件状态    
```    
pcp_node_info -U pcpadm -p 9898    
Password:    输入 pwd123  
127.0.0.1 5433 1 0.200000 waiting unknown primary unknown 0 none none 2024-01-26 19:40:20  
127.0.0.1 5432 1 0.400000 waiting unknown standby unknown 0 none none 2024-01-26 19:40:20  
127.0.0.1 5434 1 0.400000 waiting unknown standby unknown 0 none none 2024-01-26 19:40:20   
```    
```    
[postgres@1373488a35ab etc]$ pcp_node_count -U pcpadm -p 9898    
Password:     输入 pwd123  
3    
```    
```    
pcp_pool_status  -U pcpadm -h localhost -p 9898    
Password:    输入 pwd123  
...    
name : backend_data_directory2  
value:   
desc : data directory for backend #2  
name : backend_status2  
value: waiting  
desc : status of backend #2  
name : standby_delay2  
value: 0  
desc : standby delay of backend #2  
name : backend_flag2  
value: DISALLOW_TO_FAILOVER  
desc : backend #2 flag  
name : backend_application_name2  
value: polardb_reader2  
desc : application_name for backend #2  
...    
```    
使用pgpool代理链接polardb    
```    
export PGPASSWORD=pwd123    
export PGDATABASE=postgres    
psql -p 9999 -U digoal -c "select * from pg_stat_activity where pid=pg_backend_pid();"    
```    
测试pgpool读写分离    
```    
pgbench -i -s 1 -h 127.0.0.1 -p 9999 -U digoal postgres    
```    
```    
pgbench -n -r -P 1 -c 8 -j 8 -T 10 -S -h 127.0.0.1 -p 9999 -U digoal postgres    
```  
通过另一会话观察压测中国的连接:   
```  
[postgres@1373488a35ab ~]$ psql -p 5432 -c "select count(*) from pg_stat_activity where application_name='pgbench';"    
 count     
-------    
     8    
(1 row)    
[postgres@1373488a35ab ~]$ psql -p 5433 -c "select count(*) from pg_stat_activity where application_name='pgbench';"    
 count     
-------    
     8    
(1 row)    
[postgres@1373488a35ab ~]$ psql -p 5434 -c "select count(*) from pg_stat_activity where application_name='pgbench';"    
 count     
-------    
     8    
(1 row)    
```    
更多信息请参考 [《PolarDB 开源版 使用pgpool-II实现透明读写分离》](../202301/20230102_01.md)    
更详细的用法请参考各个插件开源官网.   
更多开源插件参考[digoal github: PolarDB 开源生态插件心选 - 这些插件让业务战斗力提升100倍!!!](../202212/20221223_03.md)   
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")