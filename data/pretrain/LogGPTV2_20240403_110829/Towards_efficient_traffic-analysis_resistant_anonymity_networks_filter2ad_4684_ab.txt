the needs of applications with a need for high bandwidth
eﬃciency, like BitTorrent. It combines a strong adversarial
model and modest latency with high bandwidth eﬃciency
and signiﬁcantly large anonymity sets (hundreds). Aqua dif-
fers from Tor in its resistance to traﬃc analysis. Aqua dif-
fers from P 5 in its design, bandwidth eﬃciency, and detailed
threat model. Relative to Dissent, Aqua has a weaker ad-
versarial model (i.e., entry and exit mixes are assumed to be
trustworthy), but avoids the scaling limits due to the compu-
tational overhead of D-C nets. Unlike P 5 and Dissent, Aqua
uses unicast routing instead of broadcast, which gives it in-
herently better throughput for a given level of anonymity
and overhead. The technique used by Aqua to obscure traﬃc
on its client links has some similarity with Tarzan’s mimics.
3.1 Overview
System Model. Aqua consists of mixes, which relay traﬃc,
and clients, which originate and terminate traﬃc. Clients
and mixes are connected by links, which carry encrypted
traﬃc. Each client is attached to exactly one mix at a time,
chosen by the client to meet her privacy needs. For a given
payload ﬂow, the mixes adjacent to the two communicating
clients are called the edge mixes.
Aqua adopts an infrastructure based architecture, because
dedicated mixes are likely to be more reliable and can be
placed in well-known locations and jurisdictions. Moreover,
this architecture does not expose clients to legal risks asso-
ciated with forwarding the traﬃc of unknown participants
like P2P architectures do.
In simple cases, an originating client contacts a receiv-
ing client (e.g., a server) at a well known address through
Aqua. Here, Aqua hides the address of the client, a property
called sender anonymity. In other cases, a receiving client
wishes to receive anonymous connections without revealing
her own address, a property called receiver anonymity. To
this end, Aqua provides a rendezvous mechanism, described
in Section 3.4, which joins two sender-anonymous ﬂows at a
rendezvous mix, forming a sender-receiver mutually anony-
mous ﬂow.
Threat Model. We assume an attacker who seeks to infer
which pairs of clients communicate via Aqua. The attacker
is able to observe the time series of encrypted traﬃc at all
clients and mixes as part of a global, passive traﬃc analysis
attack. Within a portion of the Internet controlled by the
attacker, he can additionally compromise mixes and clients,
and modify the time series of encrypted traﬃc as part of a
local, active traﬃc analysis attack. However, it is assumed
that legitimate clients choose uncompromised edge mixes
for their circuits1, and that the attacker controls any of the
client, the edge mix, or the network path between client and
edge mix on at most one end of a Aqua circuit.
The attacker can control only a bounded number of clients
and a bounded number of mixes. The ratio of active clients
to mixes is assumed to be large enough to ensure that there
are many payload ﬂows between each pair of mixes at any
time. Lastly, we make the common assumption that attack-
ers cannot break the cryptographic primitives or compro-
mise the keys used by mixes or clients they do not control.
We will discuss Aqua’s anonymity under these attacks in
Section 3.5.
Goals. Aqua ensures the following anonymity property un-
der the threat model described above:
1For instance, by considering the mixes’ location, jurisdic-
tion, history and operator relative to the type of communi-
cation the client seeks to perform.
3.2 Bit-wise Unlinkability
Bit-wise unlinkability is achieved through layered and
hop-by-hop encryption over a dedicated circuit determined
by the originating client. When a client wishes to initiate a
bi-directional ﬂow with another client, it selects two mixes to
serve as edge mixes for the duration of the ﬂow. The client
establishes an onion circuit [14] involving the two edge mixes
and the destination. The destination could be a receiving
client, or a rendezvous mix in case of a receiver anonymous
circuit (see Section 3.4).
Packets exchanged between the edge mixes may be sent on
the direct link between the edge mixes, or traverse a middle
mix selected from the other mixes. Diﬀerent packets from a
given ﬂow may traverse diﬀerent middle mixes. By forward-
ing traﬃc via middle mixes, Aqua can accommodate payload
traﬃc in excess of the constant rate of the link between a
pair of mixes. Every edge mix pair maintains an encrypted
session so that middle mixes cannot identify the circuit id
of packets they forward.
Security. Because the traﬃc on each link is encrypted using
a secret key shared only between adjacent nodes, the bit-wise
content appears random and uncorrelated with the traﬃc
on other links. Thus, the attacker can learn nothing by
observing the content of network traﬃc.
If a middle mix
is compromised, it can learn the edge mixes of encrypted
packets it forwards, but not the circuit id or clients of the
packet’s ﬂow.
3.3 Trafﬁc-analysis Resistance
Despite bitwise unlinkability, an attacker can observe and
correlate the time series of encrypted packets on diﬀerent
links. Changes in the payload rate of a ﬂow, dynamic ca-
pacity changes of network links (e.g. due to congestion),
or manipulation of encrypted traﬃc by an active attacker
can cause correlated changes in the time series of encrypted
traﬃc along a ﬂow’s path. To defeat such traﬃc analysis,
the anonymity network must craft the time series of pack-
ets on each link such that the attacker is unable to infer
which clients are communicating. Such traﬃc obfuscation
can be accomplished by batching payload traﬃc from dif-
ferent ﬂows, splitting payload traﬃc across multiple paths,
adding artiﬁcial delay to payload traﬃc, or adding artiﬁcial
chaﬀ traﬃc.
Aqua uses a combination of chaﬃng and delayed ﬂow
start-up for traﬃc obfuscation. Moreover, Aqua uses a dif-
ferent strategy for traﬃc obfuscation in the core and at the
edges of the network.
In the Aqua core, we use uniform
rate chaﬃng, because there is enough statistical multiplex-
ing of inter-mix traﬃc that aggregate rate changes are in-
frequent. The multi-path routing at the core further helps
to smoothen traﬃc imbalances among the mixes. At the
network edge, we devise a novel dynamic chaﬃng strategy
for traﬃc obfuscation, which can take advantage of tempo-
ral and spatial correlation among diﬀerent clients’ payload
traﬃc to achieve k-anonymity in large sets at low overhead,
despite the bursty nature of individual ﬂows. We describe
both methods in more detail below.
3.3.1 Trafﬁc obfuscation in the core
Aqua’s traﬃc obfuscation in the core is conceptually sim-
ple: all mixes transmit to all other mixes at a constant rate.
Mixes partition time into small periods called batch periods.
During each period, each mix sends the same number of
Figure 1: Top: A single circuit terminated by a re-
ceiving client provides sender-anonymity. Bottom:
Two Aqua circuits joined at a rendezvous mix pro-
vide a sender-receiver mutually anonymous circuit.
• k-anonymity. The attacker cannot determine which
legitimate client among a set of k clients is communi-
cating with a given target client or rendezvous mix.
Moreover, Aqua has the following performance goals:
• Scalability to large k. Aqua scales to large k, i.e.,
to large anonymity sets.
• Modest end-to-end latency. Because Aqua targets
applications like BitTorrent, its latencies must be low
enough to achieve good bulk TCP performance.
• High bandwidth. As Aqua targets bandwidth-
intensive applications, it must be able to use the ca-
pacity of the underlying network eﬀectively.
Roadmap. In the rest of this section, we discuss the com-
ponents of Aqua’s design. Bitwise unlinkability is ensured
through layered, hop-by-hop encryption. Payload ﬂows are
routed via a circuit consisting of an entry mix, a set of mid-
dle mixes, and an exit mix. Traﬃc obfuscation is achieved
by diﬀerent mechanisms in the core and at the edge of the
Aqua network.
In the core, Aqua maintains constant rate
encrypted traﬃc among mixes, where payload traﬃc is aug-
mented with chaﬀ traﬃc to maintain the rate. Multipath
routing via diﬀerent middle mixes exploits available pay-
load bandwidth in the core while keeping chaﬀ traﬃc to a
minimum.
To obfuscate traﬃc at the edge, Aqua dynamically chooses
sets of clients with correlated payload traﬃc patterns. The
encrypted traﬃc rate of client links within a set is then
coupled, by shaping payload traﬃc and augmenting it with
chaﬀ. As a result, the observed time series of encrypted
traﬃc on links in a set reveals nothing about payload ﬂows,
ensuring k-anonymity. By assigning clients to an anonymity
set with similar payload traﬃc patterns, Aqua can exploit
correlated client traﬃc to achieve large anonymity sets while
keeping chaﬀ traﬃc and payload traﬃc shaping low. Finally,
rendezvous provides receiver anonymity, by concatenating
two sender-anonymous circuits via a rendezvous mix (see
Fig. 1).
same-sized packets to every other mix. This includes pack-
ets transmitted by a mix in its roles as both edge mix and
middle mix. The packets transmitted by a mix during period
t include the payload data received during period t − 1.
Speciﬁcally, each mix transmits n packets to each of m
mixes during a batch period. At the beginning of a period,
each mix assigns the payload data received in its role as a
middle mix, and assign it to the designated edge mixes. If
payload data worth more than n packets are assigned to
a given edge mix, the excess packets are dropped. Then,
the mix randomly assigns payload data it received in its
role as an edge mix to middle mixes with available payload
capacity in its packet slots. If there is more payload data
than available slots, excess packets are dropped. If there are
more slots than payload data (the common case), then chaﬀ
data is added as needed to ﬁll the n packets. To achieve a
constant rate, each mix schedules a packet for transmission
a ﬁxed interval after the previous packet was acknowledged
(retransmitting dropped packets as needed).
To eﬃciently accommodate temporal variations in aggre-
gate payload rates in the core, our design allows the mix-to-
mix link rates to vary over time, but the target rates on all
links are identical at any instant.
Security. Consider the security properties of mixes ex-
changing bidirectional encrypted traﬃc at a ﬁxed target
rate. Due to ﬂow and congestion control, the achieved rate
on a link may diﬀer from the target. The important thing to
note, however, is that the actual rate on a link reﬂects only
the capacity and congestion state of the underlying network,
and reveals nothing about the payload it carries. Thus, the
constant rate traﬃc is perfectly resistant to passive traﬃc
analysis. Moreover, actively delaying or dropping traﬃc on
a link does not reveal any useful information, because the
downstream node’s outgoing stream rate will not be aﬀected
(it simply adds more chaﬀ). Changes in the target rate on
all inter-mix links over time reveal some information about
the aggregate payload traﬃc rate in the core. Given the as-
sumed high degree of ﬂow multiplexing in the core, however,
it reveals nothing about individual ﬂows or the communicat-
ing partners.
3.3.2 Trafﬁc obfuscation at the edges
To resist traﬃc analysis, Aqua must also obscure traﬃc on
client links. The target rate of encrypted traﬃc on a client
link can change dynamically, to accomodate variations in a
client’s payload traﬃc eﬃciently. However, any target rate
adjustment on a client link must coincide with an equivalent
adjustment by a set of clients that form a anonymity set
called a kset. The target rate of a client link is the sum of
the target rates of all ksets the client is currently a member
of. This technique allows Aqua to accommodate variations
in clients’ payload traﬃc rates while ensuring that any given
client’s observable rate change is indistinguishable from that
of k other clients. By seeking to form ksets out of clients
with correlated payload traﬃc, Aqua can reduce overhead
for a given anonymity set size.
Design. A client announces to its edge mix when it has
an incoming or outgoing ﬂow it would like to start, along
with its available bandwidth capacity. The mix in turn an-
nounces this information to other mixes, without revealing
the client’s id.
Mixes wait until they have collectively received about
k + ∆ (∆ deﬁned below) announcements each for incom-
ing and outgoing ﬂows, or a timeout occurs. When pos-
sible, mixes match announcements for ﬂows with a similar
expected rate. When a timeout occurs with less than k
matching announcements, additional clients with available
link capacity are randomly selected to join a kset, even if
they have no ﬂows to start. At this point, the mixes ask the
clients in the kset and their edge mixes to simultaneously in-
crease their current client link rates by a speciﬁed kset rate.
The kset rate is equal to the minimum available capacity
of all selected clients, or the maximal requested ﬂow rate,
whichever is lower. We describe a simple, greedy algorithm
for kset formation in more detail in Section 4.3.
Once the clients in a kset have jointly increased their rates,
they must eventually decrease their rates by the kset rate
simultaneously, to avoid leaking any information about in-
dividual ﬂows. Clients whose ﬂows end early must continue
to send chaﬀ at the required rate. They are free to start
new ﬂows within the anonymity set to ﬁll the available ca-
pacity. When one of the k clients fails or departs abruptly,
the remaining members of an anonymity set must immedi-
ately reduce their rates by the kset rate. To tolerate such
departures more gracefully, sets may be formed with more
than k clients initially, as described below.
In practice,
the implementation operates
in time-
synchronized epochs. A typical epoch time might be 30 sec-
onds. Aqua collects ﬂow announcements and forms ksets
during the present epoch, and starts these ksets at the be-
ginning of the next epoch.
In Aqua, all clients send and
receive at a low constant baseline rate. This make sense for
applications with many small ﬂows and background signal-
ing traﬃc, like BitTorrent.
Forming ksets. To achieve k-anonymity, a kset must in
practice include k + ∆ members. The extra ∆ clients are
required to compensate for kset members attached to com-
promised edge mixes and clients controlled by the attacker.
While not required for anonymity, some number of extra
kset members can also reduce the need for ungraceful kset
shut-downs due to client or mix failure. Consider the case of
M mixes, m∗M of which are controlled by the attacker, and
C clients, c ∗ C of which are controlled by the attacker. Un-
compromised clients attach to random mixes, but the com-
promised clients attach evenly to the uncompromised mixes.
First, to limit the impact of compromised mixes, Aqua
requires that each mix contribute an equal number of clients
((k+∆)/M ) to each kset. To compensate for clients attached
to compromised mixes, we need to add m(k + ∆) clients to
a kset; to compensate for compromised clients attached to
the uncompromised mixes, we need to add (1 − m)(k + ∆)c
clients to a kset. To tolerate client and mix failures, we add
an empirical number r clients. Thus, ∆ = r + k mc−m−c
m+c−mc−1 .
For instance, when k = 100; r = 0; c = m = 0.1; ∆ = 23.45.
The required number of clients ((k + ∆)/M ) contributed
to a kset by each mix is generally a fractional value. There-
fore, some mixes have to contribute one more client than
others in practice. The mixes that contribute an additional
client must be chosen deterministically to avoid any bias
towards compromised mixes, and fairly to avoid load im-
balance. Aqua uses consistent hashing among the mixes to
make a deterministic choice, parameterized by a global kset
sequence number for load balance.
Security. Let us consider the subgraph of client links whose
rates change in response to a ﬂow start-up/shut-down. The
set of clients who might be communicating is simply the
a rendezvous listens for incoming connections from the re-
ceiver on its behalf (4) and notiﬁes the receiver through the
introduction point (5 & 6). Finally, the receiver connects
to the client (7 & 8) after which, the two can communicate
through the rendezvous. Note that the ﬁnal communications
path has six mixes. The rendezvous node itself acts as the
edge mix at the far end of both the client’s and the hidden
receiver’s circuit.
Security. Rendezvous provides both sender and receiver
anonymity, because it concatenates two sender-anonymous
circuits. Because each side chooses its own set of edge mixes,
neither client’s anonymity depends on choices made by the
other client.