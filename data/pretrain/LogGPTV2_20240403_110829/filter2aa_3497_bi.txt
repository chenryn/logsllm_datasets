ILSpy, 290
Java Decompiler, 288
.NET Reflector, 290–291
reverse HTTP proxy. See also forwarding HTTP proxy
advantages and disadvantages of, 35
host header, 32–33
redirecting traffic to, 34
simple implementation of, 33
reverse shell, 266
Rich Site Summary (RSS), 58
Rijndael, 152
Rivest, Ron, 160
RMI (Remote Method Invocation), 29
root certificate, 170
ROP (return-oriented programming), 268–270
route print command (Windows), 65
router, 7–8
ARP poisoning, 75–77
configuring, 66–67
defined, 64
enabling DNAT, 70
enabling SNAT, 68–69
routing
on Linux, 67
on macOS, 67
on Windows, 66
routing table, 8, 65–66
RPC (Remote Procedure Call), 22
Technet24
||||||||||||||||||||
||||||||||||||||||||
RSA encryption, 149
algorithm, 160–162
padding, 155, 162
signature algorithm, 165
RSS (Rich Site Summary), 58
Ruby, 210
Run() function, 187
runtime, 137
S
say_hello() method, 197
say_string() method, 197
say_struct() function, 199
Scan for Hosts (Ettercap), 76
Scapy, 287
scratch registers, 123
scripting languages, 112
sections (memory), 120
secure hashing algorithm (SHA), 164
SHA-1, 133, 165–166
SHA-2, 165
SHA-3, 168
Secure Sockets Layer (SSL). See Transport Layer Security (TLS)
security, 145–178
encryption, 146–149
public key infrastructure (PKI), 169–172
random number generators, 149
requirements, 145–146
signature algorithms, 164–169
symmetric key cryptography, 149–159
Transport Layer Security, 172–177
segment, 5, 87
SELECT statement, 229
selector registers, 118
self-signed certificate, 170
Send() method (.NET), 192–193
||||||||||||||||||||
||||||||||||||||||||
send system call, 15, 122–123
sendfrom system call, 15
Serpent, 152
server random (TLS), 173
session key, 162
session state, 2
set detach-on-fork off command, 237
setAccessible() (Java), 195
SGML (Standard Generalized Markup Language), 58
SHA. See secure hashing algorithm (SHA)
Shamir, Adi, 160
shared key, 163
shell code
accessing payloads, 265
debugging technique, 258–259
generating with Metasploit, 265–266
relative address on 32- and 64-bit systems, 263
reverse shell, 266
setting breakpoint on, 258–259
system calls, 259
exit, 260–261
write, 261–263
writing, 255–266
shell_bind_tcp, 265
Shift-JIS, 44
SHL instruction, 115, 119
SHR instruction, 115
sign flag, 117
signature algorithms, 146, 164–169
asymmetric, 165
cryptographic hashing algorithms, 164–165
DSA, 165
message authentication codes, 166–168
RSA, 165
symmetric, 166
signed integers, 39
simple checksum, 93–94
Technet24
||||||||||||||||||||
||||||||||||||||||||
Simple Mail Transport Protocol (SMTP), 3–4, 56, 59
Simple Network Management Protocol (SNMP), 53
sketches, 150
sniffing, 12–14, 73
sockaddr_in structure, 17, 122
socket system call, 15
SOCKS proxy, 103. See also proxies
advantages and disadvantages of, 28–29
Firefox proxy configuration, 26
Java TCP client, 27
overview, 24
redirecting traffic to, 26–27
simple implementation of, 25–26
versions, 24–25
socksProxyHost system property, 27
socksProxyPort system property, 27
SOH (Start of Header), 56
Solaris, 16, 120
source address, 5
source code, 112
source network address translation (SNAT)
configuring on Linux, 69
enabling, 68–69
$sp, 239
SPARC architecture, 42, 118, 137
spoofing
DHCP, 71–74
DNS, 34
tools, 287–288
sprintf string function, 212
SQL. See Structured Query Language (SQL)
SS register, 116
stack buffer overflows, 246–248, 273–276
stack buffer underflow, 275–276
stack trace, 239–240
stack variables, 128
||||||||||||||||||||
||||||||||||||||||||
Standard Generalized Markup Language (SGML), 58
start address, 120
Start of Header (SOH), 56
static linking, 113–114
static reverse engineering, 125–134. See also reverse engineering
analyzing strings in, 133
extracting symbolic information in, 129–131
identifying key functionality in, 129–134
stack variables and arguments, 128
stdcall, 199
storage exhaustion attacks, 223–224
strace, 16
strcat string function, 212
strcpy string function, 212
strcpy_s string function, 212
stream ciphers, 158–159. See also block ciphers
strings, 42–46
analyzing, 132
ASCII standard, 42–44
Strip tool, 131
struct library (Python), 90
Structure class, 199
structured binary formats, 53–54
Structured Query Language (SQL)
injection, 228–229
Server, 229
structured text formats, 56–58
SUB instruction, 115
subroutine calling, 118–119
substitution boxes (S-Box), 152
substitution ciphers, 147
substitution-permutation network, 152
Sulley, 287
SuperFunkyChat
analysis proxy
captured traffic, 183–187
Technet24
||||||||||||||||||||
||||||||||||||||||||
simple network client, 184–186
simple server, 186–188
ChatClient, 81, 83–84, 106, 200
ChatServer, 80, 106
commands, 81
communicating between clients, 81
dissectors, 95–103
parser code for, 107
starting clients, 80–81
starting the server, 80
UDP mode, 97
switch device, 6
symbolic information, 129–131
symmetric key cryptography, 149. See also asymmetric key cryptography
block ciphers, 150–159
stream ciphers, 158–159
symmetric signature algorithms, 166
synchronize flag (SYN), 41
system API, 268
System assembly, 141
system calls
accept, 123
bind, 15
connect, 15
exit, 260–261
open, 18
read, 15, 18, 122
recv, 15, 122–123
recvfrom, 15
send, 15, 122–123
sendfrom, 15
shell code, 259–262
socket, 15
tracing, 14–19
Unix-like systems, 15–16, 122
write, 15, 18, 122, 261–263
system function, 228
||||||||||||||||||||
||||||||||||||||||||
System.Activator class (.NET), 191
System.Reflection.Assembly class (.NET), 190
System.Reflection.ConstructorInfo class (.NET), 190
System.Reflection.FieldInfo class (.NET), 190
System.Reflection.MethodInfo class (.NET), 190
System.Reflection.PropertyInfo class (.NET), 190
System.Type class (.NET), 190
T
tag, length, value (TLV) pattern, 50–51, 89, 94–95
TCP. See Transmission Control Protocol (TCP)
TCPDump, 278–279
TCP/IP, 2, 9–10, 121, 262
TCP/IP Guide, 16
TcpNetworkListener (ILSpy), 140
terminated data, 47–48
terminated text, 56
TEST instruction, 115, 119
testy virtual buffer (TVB), 99
text protocols, 54
Booleans, 55
dates, 55
numeric data, 55
structured text formats, 56–58
times, 55
variable-length data, 55
text-encoding character replacement, 229–231
threads, 120–121
times, 49–50, 55
TLS. See Transport Layer Security (TLS)
TLS Record protocol, 172
TLV (tag, length, value) pattern, 50–51, 89, 94–95
ToDataString() method, 186
token, 56
tools
Technet24
||||||||||||||||||||
||||||||||||||||||||
for active network capture and analysis
Canape, 280–281
Canape Core, 281
Mallory, 281–282
fuzz testing
American Fuzzy Lop, 285–286
Kali Linux, 286
Metasploit, 286
Scapy, 286
Sulley, 286
network connectivity and protocol testing
Hping, 282
Netcat, 282
Nmap, 282–283
for network spoofing and redirection
DNSMasq, 287
Ettercap, 287–288
for passive network capture and analysis
LibPCAP, 278–279
Microsoft Message Analyzer, 278
TCPDump, 278–279
reverse engineering
Hopper, 289–290
IDA Pro, 289
ILSpy, 290
Java Decompiler, 288
.NET Reflector, 290–291
for web application testing
Burp Suite, 283–284
Mitmproxy, 284–285
Zed Attack Proxy, 284
traceconnect.d file, 16
traceroute, 64–65
tracert (Windows), 64–65
traffic
analysis using proxy, 103
capturing
active method, 20
||||||||||||||||||||
||||||||||||||||||||
HTTP, 29–35
man-in-the-middle, 20
passive method, 12–20
port-forwarding, 21–24
proxies, 20–35
SOCKS, 24–29
system call tracing, 14–19
capturing tools
Dtrace, 17–18
Netcat, 180–182
Process Monitor tool, 18–19
strace, 16
generating, 83–84
outbound, 89
Transmission Control Protocol (TCP), 2–3, 21
bit flags, 41
client connection to server, 121–123
header, 5, 87
HTTP proxy, 30
packets, 87–88
port numbers, 5
port-forwarding proxy, 21–22, 201
reading contents of sessions, 85–86
reverse shell, 265–266
SOCKS proxy, 24–28
stream, 13–14