### 前言介绍
最近`TP-Link`修补了`TL-R600VPN`千兆宽带VPN路由器`1.3.0`版本中的三个漏洞。 在与TP-Link合作以确保其能及时发布补丁后，思科Talos公开了这些漏洞详情。目前对于这些漏洞已有了相应的解决方案，除此之外，我们希望能够对这些漏洞的内部工作方式进行深入研究，之后在文章中我们会分析代码并讲述漏洞是如何产生的。
### 背景
`TP-Link TL-R600VPN`是一款五端口小型办公室/家庭（SOHO）路由器。 该器件在芯片上集成了`Realtek RTL8198`系统。
这个特殊的芯片使用`Lexra`开发的`MIPS-1`架构的分支。
除了在处理未对齐的加载过程和存储操作的一些专有指令外，这两个设备的指令集基本相同。`Lexra`中未包含的说明包括`LWL，SWL，LWR和SWR`。
这些专有指令通常在`MIPS-1`架构编译程序时使用，然而在Lexra中使用时常遇到段错误。了解这些对我们下一步对代码的分析是很有帮助的。
要了解更多有关`Lexra MIPS及其与MIPS-1架构`的信息，请参阅：'[The Lexra
Story](http://probell.com/lexra/)'与 [MIPS-1 patent
filing](https://patents.google.com/patent/US4814976A/en)。
### 漏洞内容
该设备漏洞与HTTP服务器处理对`/fs/`目录的请求的方式有关。设备允许经过身份验证的攻击者远程执行设备上的代码。
当访问`/fs/`目录中的任何页面时，应用程序会错误地解析传递的HTTP标头。
  * http:///fs/help
  * http:///fs/images
  * http:///fs/frames
  * http:///fs/dynaform
  * http:///fs/localiztion (注意：这不是拼写错误)
在函数“`httpGetMimeTypeByFileName`”中，Web服务器尝试解析所请求页面的文件扩展名以确定其`mime类型`。
在此处理过程中，服务器调用`strlen()`函数来确定所请求页面名称的长度，寻找到该堆分配字符串的末尾，并向后读取文件扩展名，直到遇到句点（0x2e）。
    #
    # calculates the length of the uri and seeks to the end
    #
    LOAD:00425CDC loc_425CDC:
    LOAD:00425CDC                 la      $t9, strlen
    LOAD:00425CE0                 sw      $zero, 0x38+var_20($sp)
    LOAD:00425CE4                 jalr    $t9 ; strlen
    LOAD:00425CE8                 sh      $zero, 0x38+var_1C($sp)
    LOAD:00425CEC                 addu    $s0, $v0
    # looks for a period at the current index and break out when found
    LOAD:00425CF0                 li      $v0, 0x2E                         
    LOAD:00425CF4                 lbu     $v1, 0($s0)
    LOAD:00425CF8                 lw      $gp, 0x38+var_28($sp)
    LOAD:00425CFC                 beq     $v1, $v0, loc_425D14
    LOAD:00425D00                 li      $v1, 0b101110
    LOAD:00425D04
    # loop backwards until a period is found, loading the character into $s0
    LOAD:00425D04 loc_425D04:                                                
    LOAD:00425D04                 addiu   $s0, -1
    LOAD:00425D08                 lbu     $v0, 0($s0)                        
    LOAD:00425D0C                 bne     $v0, $v1, loc_425D04
    LOAD:00425D10                 nop
在请求的页面上应始终有一个扩展名，以防止攻击者进行攻击。这可以在下面的非恶意页面`/web/dynaform/css_main.css`的GDB字符串输出中看到，其中将解析文件的扩展名为“css”。
    0x67a170:        "/web/dynaform/css_main.css"
    0x67a18b:        "46YWRtaW4="
    0x67a196:        "\nConnection: close\r\n\r\nWRtaW4=\r\nConnection: close\r\n\r\n6YWRtaW4=\r\nConnection: close\r\n\r\n46YWRtaW4=\r\nConnection: close\r\n\r\ntaW4=\r\nConnection: close\r\n\r\n http://192.168.0.1/\r\nAuthorization: Basic YWRtaW46YWRt"...
    0x67a25e:        "aW4=\r\nConnection: close\r\n\r\nnnection: close\r\n\r\n"
    0x67a28d:        ""
    0x67a28e:        ""
    0x67a28f:        ""
    0x67a290:        ""
但是，如果我们请求其中任意一个易受攻击的页面，我们可以看到解析的URI将不包含句点（0x2e）。 因此，应用程序将会继续向后搜索一段时间。
在这种情况下，我们没有时间能在解析的URI以及早先存储在堆上的原始GET请求数据上（如下面的地址0x679960所示）搜索到我们的payload。我们可以在下面`/fs/help`目录的GDB字符串输出地址`0x67a170`处看到，其中没有解析文件扩展名。
    ...
    0x679960:        "/fs/help"
    0x679969:        "elp"
    0x67996d:        "HTTP/1.1"
    0x679976:        "\n"
    0x679978:        "ost: 192.168.0.1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q"...
    0x679a40:        "=0.5\r\nAccept-Encoding: gzip, deflate\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\n\r\n"                                                   
    0x679ac1:        ""
    0x679ac2:        ""
    0x679ac3:        ""
    0x679ac4:        ""
    0x679ac5:        ""
    ...
    0x67a165:        "gp"
    0x67a169:        ""
    0x67a16a:        "\b"
    0x67a16c:        ""
    0x67a16d:        ""
    0x67a16e:        ""
    0x67a16f:        ""
    0x67a170:        "/web/help"
    0x67a17a:        "secure-Requests"
    0x67a18a:        " 1"
    0x67a18d:        "\n\r\nure-Requests: 1\r\n\r\nclose\r\nUpgrade-Insecure-Requests: 1\r\n\r\nUpgrade-Insecure-Requests: 1\r\n\r\n\nUpgrade-Insecure-Requests: 1\r\n\r\nsic YWRtaW46YWRtaW4=\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\n\r\na"...
    0x67a255:        "tion: Basic YWRtaW46YWRtaW4=\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\n\r\nure-Requests: 1\r\n\r\n"
    0x67a2ba:        ""
    0x67a2bb:        ""
    0x67a2bc:        ""
    ...
在拥有预期文件扩展名或系统易受攻击的情况下，当应用遇到句点时会将提取的字符串交付于`toUpper()`函数处理。
然后应用会通过存储字节指令将该操作的结果写入基于堆栈的缓冲区内。 这可以从提取的指令中看出。
    #
    # loads parsed data onto stack via a store byte call from $s0 register
    #
    LOAD:00425D20 loc_425D20:
    LOAD:00425D20                 lbu     $a0, 0($a0)
    # returns an uppercase version of the character where possible
    LOAD:00425D24                 jalr    $t9 ; toUpper                      
    LOAD:00425D28                 nop
    # $gp references $s2, the place for the next char on the stack buffer
    LOAD:00425D2C                 lw      $gp, 0x38+var_28($sp) 
    # stores the character into $s2
    LOAD:00425D30                 sb      $v0, 0($s2)                        
    LOAD:00425D34
    # calculates the length of the entire user-supplied string
    LOAD:00425D34 loc_425D34:
    LOAD:00425D34                 la      $t9, strlen
    LOAD:00425D38                 jalr    $t9 ; strlen  
    # place a pointer to the parsed data into arg0
    LOAD:00425D3C                 move    $a0, $s0                           
    LOAD:00425D40                 addiu   $v1, $sp, 0x38+var_20
    LOAD:00425D44                 lw      $gp, 0x38+var_28($sp)
    LOAD:00425D48                 sltu    $v0, $s1, $v0
    LOAD:00425D4C                 addu    $a0, $s0, $s1
    LOAD:00425D50                 addu    $s2, $v1, $s1
    LOAD:00425D54                 la      $t9, toupper
程序继续执行，直到它执行到`httpGetMimeTypeByFileName`函数的结尾。此时系统会从堆栈上保存的值中加载返回地址和五个寄存器。当漏洞被利用时，这些保存的值会被正常的数据覆盖，其包括稍后我们描述的小工具地址。
    #
    # registers get overwritten with saved values on the stack
    #
    LOAD:00425DB4 loc_425DB4:
    LOAD:00425DB4
    LOAD:00425DB4                 lw      $ra, 0x38+var_4($sp)
    LOAD:00425DB8                 lw      $s4, 0x38+var_8($sp)