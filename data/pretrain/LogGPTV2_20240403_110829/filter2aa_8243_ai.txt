    def execute_swap(self, current_instruction):
        value = current_instruction - OP_SWAP
        if value == 0:
            self.log ("Pop")
            self.stack.pop()
        else:
            self.log("Swap {}".format(value))
            index = self.stack_index(value)
            temp = self.stack[index]
            self.stack[index] = self.stack.pop()
            self.stack.append(temp)
    def execute_add(self):
        self.log ("Add")
        self.stack.append(self.unsigned_num(self.signed_num(self.stack.pop()) + self.signed_num(self.stack.pop())))
    def execute_sub(self):
        self.log ("Sub")
        self.stack.append(self.unsigned_num(self.signed_num(self.stack.pop()) - self.signed_num(self.stack.pop())))
    def execute_mul(self):
        self.log ("Mul")
        self.stack.append( self.unsigned_num(
                                            (self.signed_num(self.stack.pop()) * self.signed_num(self.stack.pop())) % 256
                                            )
                          )
    def execute_div(self):
        self.log ("Div")
        a = self.stack.pop()
        b = self.stack.pop()
        self.stack.append(a // b)
        self.stack.append(a % b)
    def execute_jump(self):
        self.log ("Jump")
        self.ip = self.ip + self.signed_num(self.stack.pop())
    def execute_call(self):
        self.log ("Call")
        offset = self.stack.pop()
        self.stack.append(self.ip) # note that IP was already incremented here, points to next instruction.
        self.ip = self.ip + self.signed_num(offset)
        #self.ip = self.ip + offset #Already signed?
    def execute_ret(self):
        self.log ("Ret")
        self.ip = self.stack.pop()
    def execute_cje(self):
        self.log ("CJE")
        offset = self.stack.pop()
        if self.stack.pop() == self.stack.pop():
            self.ip = self.ip + self.signed_num(offset)
            #self.ip = self.ip + offset #Already signed?
    def execute_jse(self):
        self.log ("JSE")
        offset = self.stack.pop()
        if len(self.stack) == 0:
            self.ip = self.ip + offset
    def execute_read(self):
        self.log ("Read")
        input_byte_str = input("Please input byte in format 0xab: ")
        input_byte = int(input_byte_str, 16)
        print (input_byte)
        self.stack.append(input_byte)
        self.num_reads += 1
    def execute_write(self):
        self.log ("Write")
        b = self.stack.pop()
        #sys.stdout.write(chr(b))
        print("\t --> \t'" + chr(b) + "'")
    def print_stack(self):
        if self.debug:
            sys.stdout.write(";>| ")
            for n in reversed(self.stack):
                sys.stdout.write("{:02X} ".format(n))
            sys.stdout.write("\n")
    def execute(self, path_to_code):
        self.code = memory_map(path_to_code, mmap.ACCESS_READ)
        while self.ip != len(self.code):
            #assert(self.num_reads נריץ את הקוד ונקבל:
&nbsp;
Please
input byte in format 0xab:
&nbsp;
ננסה אקראית:
Please
input byte in format 0xab: 0x00
0
      --&gt;  '0'
&nbsp;
נצטרך להבין טוב
יותר מה בדיוק התוכנה רוצה.
זמן לכתוב דיסאסמבלר
בסיסי:
```python
def disassemble(self, path_to_code):
        self.code = memory_map(path_to_code, mmap.ACCESS_READ)
        for i in range(len(self.code)):
            current_instruction = self.code[i]
            sys.stdout.write("{:02X}\t{:02X}\t".format(i, current_instruction))
            if current_instruction & OP_PUSH:
                print("Push 0x{:02X}".format(current_instruction - OP_PUSH))
            elif current_instruction & OP_LOAD:
                print("Load 0x{:02X}".format(current_instruction - OP_LOAD))
            elif current_instruction & OP_SWAP:
                if current_instruction == OP_SWAP:
                    print("Pop")
                else:
                    print("Swap 0x{:02X}".format(current_instruction - OP_SWAP))
            elif current_instruction == OP_ADD:
                print("Add")
            elif current_instruction == OP_SUB:
                print("Sub")
            elif current_instruction == OP_MUL:
                print("Mul")
            elif current_instruction == OP_DIV:
                print("Divide")
            elif current_instruction == OP_JUMP:
                print("Jump")
            elif current_instruction == OP_CALL:
                print("Call")
            elif current_instruction == OP_RET:
                print("Ret")
            elif current_instruction == OP_CJE:
                print("CJE")
            elif current_instruction == OP_JSE:
                print("JSE")
            elif current_instruction == OP_READ:
                print("Read")
            elif current_instruction == OP_WRITE:
                print("Write")
```
נריץ ונקבל:
```
00     BF     Push 0x3F
01     C2     Push 0x42
02     85     Push 0x05
03     CB     Push 0x4B
04     A2     Push 0x22
05     CE     Push 0x4E
06     82     Push 0x02
07     B2     Push 0x32
08     E0     Push 0x60
09     87     Push 0x07
0A     C9     Push 0x49
0B     A0     Push 0x20
0C     CC     Push 0x4C
0D     A0     Push 0x20
0E     CF     Push 0x4F
0F     9D     Push 0x1D
10     FA     Push 0x7A
11     94     Push 0x14
12     FD     Push 0x7D
13     91     Push 0x11
14     FD     Push 0x7D
15     92     Push 0x12
16     C0     Push 0x40
17     87     Push 0x07
18     E9     Push 0x69
19     80     Push 0x00
1A     EC     Push 0x6C
1B     A0     Push 0x20
1C     CF     Push 0x4F
1D     9D     Push 0x1D
1E     CF     Push 0x4F
1F     A0     Push 0x20
20     F8     Push 0x78
21     83     Push 0x03
22     E4     Push 0x64
23     85     Push 0x05
24     E9     Push 0x69
25     8F     Push 0x0F
26     8B     Push 0x0B
27     18     JSE
28     08     Read
29     8C     Push 0x0C
2A     11     Call
2B     41     Load 0x01
2C     8A     Push 0x0A
2D     80     Push 0x00
2E     01     Sub
2F     14     CJE
30     B0     Push 0x30
31     81     Push 0x01
32     10     Jump
33     B1     Push 0x31