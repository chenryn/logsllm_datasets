138
V. Mehta et al.
(a)
(b)
(c)
Fig. 3. Comparison of Ranked Network Attack Graphs. (a) Attack Graph of the com-
puter network A (b) Attack Graph after stopping service sshd on ip2 (c) Attack Graph
with changed security property.
running on the host ip2. Figure 3(b) shows the Attack Graph corresponding to
the changed network conﬁguration. The total rank of error states in the changed
Attack Graph is .053, which shows that the network becomes relatively more
secure. Now, suppose the administrator also changes the security property to
Ranking Attack Graphs
139
ip5
ip4
Target
ip1
ip3
aip
  Attacker
ip2
Fig. 4. Computer network B
“Intruder cannot get root access on ip1”. Figure 3(c) shows the Attack Graph
of the network with respect to the changed security property. The total rank of
error states in the Attack Graph is 0.31. This shows that host ip1 is more likely
to be attacked than host ip2 in the changed network conﬁguration.
For realistic examples, the size and complexity of Attack Graphs greatly ex-
ceeds the human ability to visualize and understand [18]. Ranks provide a solu-
tion to this problem by showing the relevant regions of the Attack Graph to be
analyzed. Consider the computer network shown in Figure 4. Let the security
property used by the system administrator be “Intruder cannot get root access
on ip4”. Figure 5 shows the Attack Graph of the network with respect to the
above property. The Attack Graph is huge and hence diﬃcult for a human to
analyze visually. Our ranking tool highlights the relevant regions of the Attack
Graph so that the system administrator can start looking to ﬁgure out the best
way of deploying security measures. Our visualization tool allows him to zoom-in
on portions of the graph with highly ranked states, e.g., the regions depicted in
Figure 5. Based on the incoming transitions of the highly ranked error states in
these two regions, the system administrator can now conclude that the attacker
reaches the highly ranked states mainly through an attack from the host ip2 to
the target host ip4 by exploiting the rsh login vulnerability. Hence, the admin-
istrator needs to put an intrusion detection component on the path between ip2
and ip4 or stop the rsh service between hosts ip2 and ip4. Note that these exam-
ples are very simple since they are used for illustration purposes only. Given the
recent advances in PageRank technology one can expect our approach to scale
to much larger systems.
We also implemented the alternative algorithm for ranking states of an At-
tack Graph based on random simulation described in Section 3.2. We compared
the ranks of states obtained using the two algorithms. Note that the modiﬁed
PageRank algorithm is parameterized by the damping factor d, and the random
simulation based ranking algorithm is parameterized by η. For all the examples
we considered, both algorithms give the same ordering of states based on their
ranks, when d = η = 0.85. However, the exact values of ranks diﬀer slightly.
We observed that when both parameters are decreased simultaneously, the two
140
V. Mehta et al.
Fig. 5. A large unreadable Attack Graph (left) and a zoom-in of two regions of the
Attack Graph with highly ranked states (right)
Ranking Attack Graphs
141
algorithms still compute the same ordering of ranked states. It is remarkable
that two algorithms based on diﬀerent intuition produce similar results.
6 Conclusions and Future Work
We have given two simple, scalable and useful methods for ranking Attack
Graphs. The ranks are a measure of importance of states in an Attack Graph.
They provide a metric of security of the system and are useful in making various
design decisions aiming at improving security of the system. Ranking helps in
overcoming the visual complexity of Attack Graphs by providing a way to view
more important areas of the Attack Graph selectively. The ﬁrst algorithm is
similar to Google’s PageRank algorithm. The second algorithm computes ranks
of states based on the reachability probability of an attacker in a random sim-
ulation. Our technique does not assume any knowledge of a priori probabilities
for all events. If the probabilities are available, then we can use them for more
accurate modeling. Even if the exact probabilities are not available, modeling
the attacks randomly is expected to perform as good as PageRank performs on
the World Wide Web graph.
A direct extension of this work is to combine the ranks obtained using the
above algorithm with other criteria to rank states. Severity of damage occurring
at various error states, cost of preventing an error etc. are some other factors
which can be used to improve the ranks obtained. Another useful direction for
future work is to combine the ranks obtained with logical views of Attack Graph
to aid analysis. Noel and Jajodia [18] have given a framework for obtaining
hierarchical views of Attack Graphs. The views are obtained using automatic
aggregation on common attribute values for elements of the system or connect-
edness of the Attack Graph. Ranks over aggregated states can be used to get an
idea of the probability of attack or damage at various elements in the system.
References
1. Monica Bianchini, Marci Gori, and Franco Scarselli.
Transactions on Internet Technology, pages 92–128, 2005.
Inside pagerank.
In ACM
2. Sergey Brin and Larry Page. Anatomy of a large-scale hypertextual web search
engine. In Proceedings of the 7th International World Wide Web Conference, Bris-
bane, Australia, 1998.
3. E. Clarke, O. Grumberg, and D. Peled. Model checking. In MIT Press, 2000.
4. M. Dacier, Y. Deswarte, and M. Kaaniche. Quantitative assessment of operational
security: Models and tools. Technical Report 96493, LAAS, May 1996.
5. J. Dawkins and J. Hale. A systematic approach to multi-stage network attack
analysis. In Proceedings of the Second IEEE International Information Assurance
Workshop, 2004.
6. T. Haveliawala. Eﬃcient computation of pagerank. In Stanford DB Group Tech-
nical Report, 1999.
7. T. Haveliawala, S. Kamvar, and G. Jeh. An analytical comparison of approaches
to personalizing pagerank. In Stanford University Technical Report, 2003.
142
V. Mehta et al.
8. S. Jha, O. Sheyner, and J. M. Wing. Minimization and reliability analysis of attack
graphs. In CMU CS Technical Report, Feb 2002.
9. S. Jha, O. Sheyner, and J.M. Wing. Two formal analyses of attack graphs. In
Proceedings of the 15th IEEE Computer Security Foundations Workshop, pages
49–63, Nova Scotia, Canada, June 2002.
10. Somesh Jha and Jeannette M. Wing. Survivability analysis of networked systems.
In 23rd International Conference on Software Engineering(ICSE’01), page 0307,
2001.
11. S. Kamvar, T. Haveliawala, and G. Golub. Adaptive methods for the computation
of pagerank. In Stanford University Technical Report, 2003.
12. S. Kamvar, T. Haveliawala, C. Manning, and G. Golub. Exploiting the block
In Stanford University Technical
structure of the web for computing pagerank.
Report, 2003.
13. S. Kamvar, T. Haveliawala, C. Manning, and G. Golub. Extrapolation methods for
accelerating pagerank computations. In Proceedings of the Twelfth International
World Wide Web Conference, 2003.
14. A. Kuehlmann, K. L. McMilan, and R. K. Brayton. Probabilistic state space
search. In Proceedings of ACM/IEEE international conference on Computer Aided
Design, 1999.
15. Amy N. Langville and Carl D. Meyer. Deeper inside pagerank. In Internet Math-
ematics, pages 335–400, 2004.
16. Chris Pan-Chi Lee, Gene H. Golub, and Stefanos A. Zenios. A fast two-stage
algorithm for computing pagerank and its extensions. In Scientiﬁc Computation
and Computational Mathematics, 2003.
17. B. B. Madan, K. G. Popstojanova, K. Vaidyanathan, and K. S. Trivedi. A method
for modeling and quantifying the security attributes of intrusion tolerant systems.
In Dependable Systems and Networks-Performance and Dependability Symposium,
pages 167–186, 2004.
18. S. Noel and S. Jajodia. Managing attack graph complexity through visual hier-
archical aggregation. In Proceedings of the 2004 ACM workshop on Visualization
and data mining for computer security, Washington DC, USA, 2004.
19. R. Ortalo, Y. Deshwarte, and M. Kaaniche. Experimenting with quantitative eval-
uation tools for monitoring operational security. In IEEE Transactions on Software
Engineering, pages 633–650, Oct 1999.
20. C.A. Phillips and L. P. Swiler. A graph-based system for network vulnerability
analysis. In Proceedings of the DARPA Information Survivability Conference and
Exposition, pages 71–79, June 2000.
21. O. Sheyner, J.Haines S. Jha, R. Lippmann, and J.M. Wing. Automated generation
and analysis of attack graphs. In Proceedings of the IEEE Symposium on Security
and Privacy, Oakland, CA, May 2002.
22. O. Sheyner and J.M. Wing. Tools for generating and analyzing attack graphs. In
Proceedings of Workshop on Formal Methods for Components and Objects, pages
344–371, 2004.
23. S. Staniford, V. Paxson, and N. Weaver. How to own the internet in your spare
time. In Proceedings of the 11th USENIX Security symposium, 2002.
24. HF. Zhu. The methematical models of computer virus infection and methods of
prevention. In Mini-Micro Systems (Journal of China Computer Society), pages
Vol 11, No.7, 14–21, 1990.
25. Cliﬀ C. Zou, Don Towsley, and Weibo Gong. Email virus and worm propagation
simulation. In 13th International conference on Computers Communications and
Networks, Chicago, Oct. 2004.
Appendix
Ranking Attack Graphs
143
In this section, we prove the existence of a unique probability distribution among
all the states after a long run for the Probabilistic Attack Model constructed by
us.
Theorem. A Probabilistic Attack Model constructed by us converges to a unique
stationary distribution.
Proof. The Probabilistic Attack Model can be viewed as a Markov Chain where
the probability on each edge is the transition probability. Hence, the rank of a
state is actually its limiting probability in Markov theory, which is simply deﬁned
as the probability of reaching this state after a long time. Unfortunately, this
limiting probability may not always exist, and may not be unique for a general
state transition model. Here, we provide a proof that it exists and is also unique
for the Probabilistic Attack Model constructed by us and thus our computation
converges to the correct ranks.
To prove this, we need to prove that the Probabilistic Attack Model con-
structed by us is an ergodic Markov chain. If a Markov chain is ergodic, each
state will converge to a unique limiting probability. In this case we say that the
Markov chain has a unique stationary distribution. In order for the chain to be
ergodic, it must satisfy three properties: the chain must be irreducible, positive
recurrent and aperiodic. In an irreducible chain any state can be reached from
any other state in the graph with probability that is greater than 0. Note that
a state can return to itself through diﬀerent paths, i.e., recurrence paths. The
number of steps on these recurrence paths is deﬁned as the recurrence step (or
recurrence time). The positive recurrence property requires that for any state,
the mean recurrence step is ﬁnite. Finally, an aperiodic chain requires each state
to be aperiodic. A state is called aperiodic if the greatest common divisor of its
recurrence steps is 1. If the chain is proved to be ergodic, a well-known theorem
in the Markov theory states that the chain will converge to a unique stationary
distribution.
Recall that from any state (except the initial state), there is an edge pointing
back to the initial state. In our Probabilistic Attack Model, by deﬁnition, starting
from the initial state, any other state can be reached. On the other hand, each
edge has a probability that is greater than 0. This means that all states can
reach each other through the initial state with probability that is greater than 0.
Our Probabilistic Attack Model has a ﬁnite number of states. Since it is
irreducible, a state is always able to return to itself through the initial state
in a ﬁnite number of steps. A result in Markov theory shows that the mean
recurrence step of each state is ﬁnite. Thus, this chain is positive recurrent.
In order to prove our model is ergodic, it remains to prove the chain is aperi-
odic. We deﬁne a state to be dangling if there is no other outgoing edge from it
except for the edge that points back to the initial state. The aperiodicity proof
is divided into two cases in Figure 6.
In case 1, all the successive states j of the initial state are dangling. The
recurrence step for each state is 2, 4, 6, . . ., thus all the states are periodic and
144
V. Mehta et al.
Init
State
Init
State
j
a
b
(1)
(2)
Fig. 6. Two Cases in the Probabilistic Attack Model
the chain is periodic. Note that this case is trivial and does not appear in practice.
However, to make this chain aperiodic is easy: a self loop can be added to the
initial state, with a tiny probability . Thus, we simply ignore this case.
In case 2, the initial state has at least one non-dangling successor: state a
whose successor b is a dangling state. State b can be shown to have a 3-step and
5-step recurrence. The 3-step recurrence is completed by moving from state b to
the initial state and back to b through a. The 5-step recurrence happens when
the systems goes from state b to the initial state, and then back to the initial
state through a, and ﬁnally back to b. The gcd(3, 5) = 1 therefore state b is
aperiodic. Since the chain is irreducible, all states reach each other. A theorem
in Markov theory shows that these states have the same periods. Thus, all the
states are aperiodic.
Since the chain is irreducible, positive recurrent and aperiodic, it is ergodic.
Hence, it has a unique stationary distribution that can be computed through
our modiﬁed PageRank algorithm. Q.E.D.
Using Hidden Markov Models to Evaluate the
Risks of Intrusions
System Architecture and Model Validation
Andr´e ˚Arnes1, Fredrik Valeur2, Giovanni Vigna2, and Richard A. Kemmerer2
1 Centre for Quantiﬁable Quality of Service in Communication Systems
Norwegian University of Science and Technology
O.S. Bragstads plass 2E, N-7491 Trondheim, Norway
PI:EMAIL
http://www.q2s.ntnu.no/
2 Department of Computer Science,
University of California Santa Barbara,
Santa Barbara, CA 93106-5110, USA
{fredrik, vigna, kemm}@cs.ucsb.edu
http://www.cs.ucsb.edu/∼rsg/
Abstract. Security-oriented risk assessment tools are used to determine
the impact of certain events on the security status of a network. Most
existing approaches are generally limited to manual risk evaluations that
are not suitable for real-time use. In this paper, we introduce an approach
to network risk assessment that is novel in a number of ways. First of all,
the risk level of a network is determined as the composition of the risks
of individual hosts, providing a more precise, ﬁne-grained model. Second,
we use Hidden Markov models to represent the likelihood of transitions
between security states. Third, we tightly integrate our risk assessment
tool with an existing framework for distributed, large-scale intrusion de-
tection, and we apply the results of the risk assessment to prioritize the
alerts produced by the intrusion detection sensors. We also evaluate our
approach on both simulated and real-world data.
Keywords: Risk assessment,
modeling.
Intrusion detection, Hidden Markov
1 Introduction
The complexity of today’s networks and distributed systems makes the process of
risk management, network monitoring, and intrusion detection increasingly dif-
ﬁcult. The amount of data produced by a distributed intrusion detection system
can be overwhelming, and prioritization and selection of appropriate responses
is generally diﬃcult. On the other hand, risk assessment methodologies are be-
ing used to model and evaluate network and system risk. These approaches are
generally limited to manual processes, and are not suitable for real-time use.
The approach presented in this paper provides both a high-level overview of
network risk based on individual risk evaluations for each host and a quantitative
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 145–164, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
146
A. ˚Arnes et al.
metric for performing alert prioritization. Alerts are prioritized according to the
risk associated with the hosts referenced in the alert. Preliminary work on the
risk-assessment method used in this paper was presented in [1], but it was not
tested as part of an intrusion detection system. The implementation presented in
this paper processes the alerts produced by a set of sensors monitoring a number
of hosts. We use training data from Lincoln Laboratory [11] and real network
traﬃc from the Technical University of Vienna [8] to test the performance of the
model.
The main contribution of this paper is a novel approach to network risk as-
sessment. The approach considers the risk level of a network as the composition
of the risks of individual hosts. It is probabilistic and uses Hidden Markov mod-
els (HMMs) to represent the likelihood of transitions between security states.
We tightly integrate the risk assessment tool with an existing framework for
distributed, large-scale intrusion detection, and we apply the results of the risk
analysis to prioritize the alerts generated by the intrusion detection sensors.
Finally, the approach is evaluated using both simulated and real-world data.
The remainder of this paper is structured as follows. In Section 2 we present
the theoretical model and the necessary terminology for the paper. In Section 3
we present the system architecture, and in Section 4 we discuss how the method
can be used for real-time risk assessment for two example data sets. We provide
a discussion of the method in Section 5 and an overview of related work in