procedure below, before we provide a correctness statement
for DQ and discuss the scope of our method in
Sections 4.3 and 4.4, respectively.
Our presentation does not rely on any particular way
of representing programs and equivalence relations over
program states. In Section 5, we exploit this generality to
provide an implementation of DQ using existing tools
for program veriﬁcation and information-theoretic analysis.
4.1. Discovery of information leaks
Given a program P and a set of experiments E, our goal
is to synthesize ≈E, i.e. the largest equivalence relation R
such that ConﬁneP(R, E) holds. The procedure D shown
in Figure 1 computes this equivalence relation.
The computation is performed in an incremental fashion.
Our procedure D stores the current candidate for the
equivalence relation in the variable R. Initially, R contains
the coarsest equivalence relation, i.e. one that claims that no
information is leaked, see line 1 in Figure 1.
During the execution of D, it is checked whether R
adequately represents the leaking information, see line 2. If
R is inadequate, which is witnessed by a pair of paths, say
π and η, then the candidate R is reﬁned. The reﬁnement
step eliminates the discovered inadequacy using the relation
ReﬁneE(π, η), see line 3. The reﬁnement step guarantees that
the information leak witnessed by the pair of paths π and η
is captured by the reﬁned relation, i.e., after executing line
3 the predicate LeakP(R, E, π, η) no longer holds.
procedure D(P, E)
input
P : program
E : set of experiments
vars
R : equivalence relation
≈E : characterization of leaking information
R (cid:66) Ihi × Ihi
while exists π, η ∈ T + : LeakP(R, E, π, η) do
R (cid:66) R ∩ ReﬁneE(π, η)
done
R (cid:66) R ∪ =Ihi
return R
output
begin
1
2
3
4
5
6
end.
Figure 1. Procedure D for computing a logical repre-
sentation of the leaked information during a set of experi-
ments.
The procedure D generates a symmetric and transitive
relation. For nondeterministic programs P, this relation is not
necessarily reﬂexive, because there can be two computations
that start from the same initial state and produce diﬀerent
low outputs. We choose a conservative approach and assume
that such non-reﬂexive inputs are leaked. This is achieved
by adding the identity relation in Line 5, which yields an
equivalence relation.
The search for leaks in Line 2 and the reﬁnement step in
Line 3 are complex tasks for which we can employ existing
techniques.
Detecting leaks. Line 2 identiﬁes pairs of paths that witness
information leaks with respect
to the current candidate
equivalence relation R. We discover such paths automatically
by analyzing pairs of program runs, e.g., see [5], [39].
An equivalence relation R does not yet adequately capture
the leaked information if and only if there is a pair of R-
related initial high states from which this error state is reach-
able with low input from E. This reachability problem can
be solved, for example, using software model checkers such
as B [21], S [3], or SA [11]. The witness paths π
and η can be reconstructed by inspecting the counterexample
produced by the model checker.
Reﬁning equivalence. The reﬁnement of the candidate
relation R is determined by the paths π and η. This step
partitions R by adding new equivalence classes, see the
relational intersection in line 3. To compute this reﬁnement,
we distinguish between all high input states that lead to
diﬀerent low-observable outputs along (π, η). Formally, we
use a relation ReﬁneE(π, η) such that
146
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:15:53 UTC from IEEE Xplore.  Restrictions apply. 
ReﬁneE(π, η) ≡
{(shi, thi) | ∀s, t ∈ I ∀s(cid:48), t(cid:48) ∈ F : (s, s(cid:48)) ∈ ρπ ∧ (t, t(cid:48)) ∈ ρη ∧
slo = tlo ∧ slo ∈ E → s(cid:48)
= t(cid:48)
lo} .
lo
The relation ReﬁneE(π, η) can be obtained by applying
existing quantiﬁer elimination procedures, e.g., the Fourier-
Motzkin algorithm for linear arithmetic.
Correctness of D. The procedure D in Figure 1 is
a formalization of our counterexample-guided computation
of leaking information, based on the building blocks pre-
sented above. The correctness of D is formalized in the
following proposition.
Proposition 1. Let P be a program and let E by a set of
experiments. If D terminates on input (P, E) and returns
R, then
R = ≈E ,
is, R is the largest equivalence relation such that
that
ConﬁneP(R, E) holds.
Proof: ConﬁneP(R, E) follows directly from the termi-
nation condition of D. R is the largest relation with this
property, as it is the conjunction of weakest preconditions
for the equality of the low outputs. It remains to show that
R is an equivalence relation, i.e., reﬂexive, symmetric and
transitive. For symmetry, assume that there is a (s, t) ∈ R
such that (t, s) (cid:60) R. Then there is a conjunct ReﬁneE(π, η) in
R that is not satisﬁed by (t, s), i.e., there is an experiment in
which t and s lead to diﬀerent low outputs along (π, η).
Then s and t also lead to diﬀerent
low outputs along
(η, π). As ConﬁneP(R, E) is satisﬁed, this contradicts the
assumption (s, t) ∈ R. For transitivity, assume that there are
(s, t), (t, u) ∈ R such that (s, u) (cid:60) R. Then there exists a
pair of paths (π, η) and s(cid:48), u(cid:48) ∈ F such that (s, s(cid:48)) ∈ ρπ,
(u, u(cid:48)) ∈ ρη and s(cid:48)
lo. Choose t(cid:48) ∈ F with (t, t(cid:48)) ∈ ρη.
Such a t(cid:48) exists because we assume that P terminates on
all t ∈ I. As (s, t), (t, u) ∈ R, we have s(cid:48)
= t(cid:48)
= u(cid:48)
lo,
lo
which contradicts the assumption s(cid:48)
(cid:44) u(cid:48)
lo. Reﬂexivity holds
because the identity relation is added to R before it
is
returned.
lo and t(cid:48)
(cid:44) u(cid:48)
lo
lo
lo
4.2. Quantiﬁcation of information leaks
For computing the information-theoretic characteristics
presented in Section 3.2, the procedure Q determines
the number r and the sizes n1, . . . , nr of the equivalence
classes of an equivalence relation R. See Figure 2 for
its description. Q proceeds by iteratively computing
representative elements of the equivalence classes of the
relation R, identifying the corresponding equivalence classes
and determining their sizes.
147
procedure Q(R)
input
R : equivalence relation
vars
output
Q : auxiliary set of high initial states
{n1, . . . , nr} : sizes of the R-equivalence classes
begin
i (cid:66) 1
Q (cid:66) Ihi
while Q (cid:44) ∅ do
si (cid:66) select in Q
ni (cid:66) Count([si]R)
Q (cid:66) Q \ [si]R
i (cid:66) i + 1
done
return {n1, . . . , ni−1}
end.
1
2
3
4
5
6
7
8
9
Figure 2. Procedure Q for computing the information-
theoretic characteristics of a given equivalence relation R.
Our iteration manipulates a set of high initial states Q,
which is initialized to the full set in line 2. In the ﬁrst
iteration, we choose an arbitrary s1 ∈ Q and determine
the size of the R-equivalence class [s1]R of s1. In the i-th
iteration, we ﬁnd si such that [si]R (cid:44) [s j]R for all j < i, see
line 4. If such an si exists, we determine the size of [si]R
in line 5 and proceed with the next iteration after excluding
the equivalence class of si from Q. Otherwise, we report the
sizes of the equivalence classes.
Logical operations. Our procedure performs a number of
logical operations on the set Q. We assume that the set Q is
given as a logical assertion over the high variables h and that
the equivalence relation R is given by an assertion over h and
their copies h. The while condition in line 3 is performed
by a logical satisﬁability check. Line 4 requires ﬁnding a
satisfying assignment to the assertion Q(h). We determine
the members of the equivalence class [si]R by the assertion
R(h, h) ∧ si = h whose free variable h represents the high
states related to si. Line 6 amounts to logical conjunction
and negation.
Counting elements. Our method requires an algorithm
Count that, given a set A, returns the number of elements in
A, i.e., Count(A) = |A|. If A is represented as a formula φ,
this number corresponds to the number of models for φ.
For example, if S is represented in linear arithmetic, this
task can be solved as follows. Suppose φ is in disjunctive
normal form, i.e., φ = φ1 ∨ φ2 ∨ . . . φn, where the clauses
φi are conjunctions of linear inequalities. Then the number
of satisfying assignments of each clause corresponds to the
number of integer solutions of the corresponding system
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:15:53 UTC from IEEE Xplore.  Restrictions apply. 
of inequalities. We can apply Barvinok’s algorithm [6] for
computing the number of integer points in convex polyhedra.
The Lattice Point Enumeration Tool (LE) [25] provides
an implementation of this algorithm.
By summing over the number of solutions for every clause
and removing possible duplicates, we obtain the number of
models for φ.
Correctness of Q. The algorithm Q in Figure
2 is a formalization of the procedure sketched above. Its
correctness is implied by the following proposition.
Proposition 2. Let R be an equivalence relation on Ihi with
Ihi/R = {B1, . . . , Br}. If Q terminates on input R, it
returns the set {|B1|, . . . ,|Br|}.
Proof: Q is a predicate representing a set of high initial
states. It is initialized with Ihi, which represents all possible
high initial states. The assignment Q (cid:66) Q\[si]R in removes
[si]R from this set. As the next representative element is
chosen from this reduced state space, we have [si]R (cid:44) [si]R
for i (cid:44) j. The algorithm terminates if Q = ∅, which implies
that all equivalence classes have been found. If Count is
correct, the assertion follows.
Information-theoretic interpretation. With a uniform
probability distribution on Ihi,
the output of Q can
be given various information-theoretic interpretations. We
consider the attacker’s guessing eﬀort for deducing the secret
input to the program from the observable output (conditional
and minimal guessing entropy),
the attacker’s remaining
uncertainty about
in terms of bits (Shannon
entropy), and the maximal rate at which information can be
transmitted using the program as a communication channel
(channel capacity). A formula for the min-entropy in terms
of |Ihi| and r can be found in [37].
Proposition 3. Let R ⊆ Ihi × Ihi be an equivalence relation
with Ihi/R = {B1, . . . , Br}, let n = |Ihi|, and let U and VR be
deﬁned as in Section 3.3. Then
the secret
(cid:80)r
1) G(U|VR) = 1
i=1 |Bi|2 + 1
2 ,
(cid:80)r
2)
3) H(U|VR) = 1
i=1 |Bi| log2 |Bi|,
4) CR = log2 r, if P is deterministic.
2n
n
ˆG(U|VR) = min{(|Bi| + 1)/2 | i ∈ {i, . . . , r}},
Proof: Assertions 1 and 3 are due to [24]. For 2, a sim-
ple calculation shows that, on the average, (k +1)/2 attempts
are needed for guessing one of k equally likely alternatives.
For 4, observe that H(U)−H(U|VR) = H(VR)−H(VR|U) =
H(VR). The last step follows because VR is determined
by U. H(VR) reaches its maximum of log r when VR is
uniformly distributed. For deterministic programs P, this
uniform distribution can be achieved by a suitable choice
of pU.
148
4.3. Correctness of DQ
The following theorem states the correctness of DQ.
Theorem 1 (Correctness of DQ). Let P be a program
and E be a set of experiments. If DQ(P, E) terminates,
then it outputs the sizes {n1, . . . , nr} of the ≈E-equivalence
classes of Ihi.
Theorem 1 implies that DQ correctly determines
the sizes of the ≈E-equivalence classes. Together with