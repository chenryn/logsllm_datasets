276    26th USENIX Security Symposium
USENIX Association
Figure 1: Using platform diversity to detect maldocs throughout the attack cycle. Italic texts near × refers to the factors identified
in §3.2 that can be used to detect such attacks. A dash line means that certain attacks might survive after the detection.
DynamicAnnotStore.call(t, null, f);
1 var t = {};
2 t.__defineSetter__(’doc’, app.beginPriv);
3 t.__defineSetter__(’user’, app.trustedFunction);
4 t.__defineSetter__(’settings’, function() { throw 1; });
5 t.__proto__ = app;
6 try {
7
8 } catch(e) {}
9
10 f();
11 function f() {
12
13
14
15
16
17
18
19 }
app.beginPriv();
var file = ’/c/notes/passwords.txt’;
var secret = util.stringFromStream(
util.readFileIntoStream(file, 0)
);
app.alert(secret);
app.endPriv();
Figure 2: CVE-2014-0521 proof-of-concept exploitation
Besides being simple to construct, these attacks are
generally available on both Windows and Mac platforms
because of the cross-platform support of the JavaScript.
Therefore, the key to detecting these attacks via platform
diversity is to leverage differences system components
such as filesystem semantics, expected installed programs,
etc., and search for execution divergences when they are
performing malicious activities. For example, line 15 will
fail on Mac platforms in the example of Figure 2, as such
a file path does not exist on Mac.
3.5 Platform-aware Exploitation
document opened, which can be used to check whether
the document is opened on Windows or Mac by testing
whether the returned path is prefixed with /c/.
Another way to launch platform-aware attacks is to
embed exploits on two platform-specific vulnerabilities,
each targeting one platform. In this way, regardless of on
which platform the maldoc is opened, one exploit will be
triggered and malicious activities can occur.
In fact, although platform-aware maldocs are rare in
our sample collection, PLATPAL must be aware of these
attack methods and exercises precautions to detect them.
In particular, the possibility that an attacker can probe the
platform first before launching the exploit implies that
merely comparing external behaviors (e.g., filesystem op-
erations or network activities) might not be sufficient as
the same external behaviors might be due to the result of
different attacks. Without tracing the internal PDF pro-
cessing, maldocs can easily evade PLATPAL’s detection
using platform-specific exploits, for example, by carrying
multiple ROP payloads and dynamically deciding which
payload to use based on the return value of app.platform,
or even generating ROP payload dynamically using tech-
niques like JIT-ROP [49].
However, we do acknowledge that, given the com-
plexity of the PDF specification, PLATPAL does not enu-
merate all possible platform-probing techniques. There-
fore, PLATPAL could potentially be evaded through im-
plicit channels we have not discovered (e.g., timing side-
channel).
Given the difficulties of launching maldoc attacks on dif-
ferent platforms with the same payload, what an attacker
can do is to first detect which platform the maldoc is run-
ning on through explicit or implicit channels and then
launch attacks with platform-specific payload.
In particular, the Adobe JavaScript API contains pub-
licly accessible functions and object fields that could
return different values when executed on different plat-
forms. For example, app.platform returns WIN and MAC
on respective platforms. Doc.path returns file path to the
3.6 Platform-agnostic Exploitation
We also identified several techniques that can help “neu-
tralize” the uncertainties caused by platform diversity,
including but not limited to heap feng-shui, heap spray,
and polyglot shellcode.
Heap feng-shui. By making consecutive heap alloca-
tions and de-allocations of carefully selected sizes, an
attacker can systematically manipulate the layout of the
heap and predict the address of the next allocation or
USENIX Association
26th USENIX Security Symposium    277
Vulnerability DiscoveryExploitationMalicious ActivitiesSuccessPlatform-specific bugse.g., bugs in system libraryCVE-2015-2426AAR implementation bugsMemory corruptione.g., bugs in element parser CVE-2013-2729Logic bugse.g., flaws in JavaScript API designCVE-2014-0521Steal sensitive informationLoad executablesExecute shellcodeDrop other exploitsOther activitiesBug does not exist on other platformsDiscrepancies in:    Memory layout    Heap management    Library functionsSyscall semanticsExecutable formatFilesystem semanticsExpected programsAttacks that cannot be detected with platform diversityde-allocation [51]. This increases the chance of obtain-
ing access to critical data such as vtables even without
knowing every detail of the system memory allocator.
Heap spray and NOP sled. By repeatedly allocating
the attack payload and NOP sled in heap [13], an attacker
is alleviated from using precise memory locations for
control-flow hijacking; instead, an attacker only needs to
ensure that control-flow is redirected to the sprayed area.
Ployglot shellcode trampoline. Although not seen in
the wild, it is possible to construct OS-agnostic shellcode
in a similar manner as CPU architecture-agnostic shell-
code [17, 64]. The key idea is to find operations that
are meaningful in one platform and NOP on the other
and use these operations to jump to different code for
platform-specific activities.
Although these operations can succeed on both plat-
forms, attacks using these techniques can still be detected
by platform diversity. This is because these operations
have to be paired with other procedures to complete an
end-to-end attack. For example, heap manipulation can
succeed but the resulting memory layout might not be
suitable for both platforms to land the critical data in
attacker-controlled memory because of the discrepancies
in heap management, while ployglot shellcode trampo-
lines can run without crashing AAR, but the attack can
still be detected by the malicious activities performed.
4 The PLATPAL Approach
This section presents the challenges and their solutions in
designing PLATPAL that harvests platform diversity for
maldoc detection.
4.1 Dual-level Tracing
Although the platform diversity heuristic sounds intuitive,
two natural questions arise: 1) What “behaviors” could
be potentially different across different platforms? and 2)
How can they be universally traced and compared?
To answer the first question, “behaviors” must satisfy
two requirements: 1) they are available and do not change
across platforms and 2) they are the same for benign doc-
uments and could be different for maldocs. To this end,
we identified two sets of “behaviors” that match these
requirements: AAR’s internal PDF processing functions
(internal behaviors) and external impact on the host sys-
tem while executing the document (external behaviors).
For internal behaviors, in AAR, PDF documents pass
through the PDF processing functions in a deterministic
order and trigger pre-defined callbacks sequentially. For
example, a callback is issued when an object is resembled
or rendered. When comparing execution across platforms,
for a benign document, both function execution order and
results are the same because of the cross-platform support
of AAR, while for a maldoc, the execution trace could be
different at many places, depending on how the attack is
carried out.
In terms of external behaviors, because of the cross-
platform nature of PDF specifications, if some legitimate
actions impact the host system in one platform, it is ex-
pected that the same actions will be shown when opening
the document on the other platform. For example, if a
benign document connects to a remote host (e.g., for con-
tent downloading or form submission), the same behavior
is expected on other platforms. However, if the Internet
connection is triggered only upon successful exploitation,
it will not be shown on the failing platform.
The architecture of PLATPAL is described in Figure 3.
PLATPAL traces both internal and external behaviors, and
we argue that tracing both types of behaviors is necessary.
Tracing external behaviors is crucial to catch the behav-
ioral discrepancy after a successful exploitation, i.e., the
malicious activity step in Figure 1. For example, after
a successful JavaScript hidden API attack [22], the at-
tacker might want to execute shellcode, which will fail
on Mac because of discrepancies in syscall semantics.
The internal behaviors, however, all show the same thing:
execution of JavaScript code stops at the same place.
The most compelling reason to have an internal behav-
ior tracer is to defeat platform probing attempts, with-
out which PLATPAL can be easily evaded by launching
platform-aware attacks, as described in §3.5. Another rea-
son to trace internal behaviors is to provide some insights
on which AAR component is exploited or where the at-
tack occurs, which helps the analysis of maldoc samples,
especially for proof-of-concept (PoC) samples that simply
crash AAR without any external activities.
Internal PDF Processing
4.2
PLATPAL’s internal behavior tracer closely follows how
AAR processes PDF documents. PDF processing inside
AAR can be divided into two stages.
In the parsing stage, the underlying document is opened
and the header is scanned to quickly locate the trailer
and cross reference table (XRT). Upon locating the XRT,
basic elements of the PDF document, called COS objects,
are enumerated and parsed. Note that COS objects are
only data with a type label (e.g., integer, string, keyword,
array, dictionary, or stream). One or more COS objects
are then assembled into PDF-specific components such
as text, image, font, form, page, JavaScript code, etc.
according to AAR’s interpretation of PDF specifications.
The hierarchical structure (e.g., which texts appear in a
particular page) of the PDF document is also constructed
along this process. The output, called PD tree, is then
passed to the rendering engine for display.
278    26th USENIX Security Symposium
USENIX Association
Figure 3: PLATPAL architecture. The suspicious file is submitted to two VMs with different platforms. During execution, both
internal and external behaviors are traced and compared. Divergence in any behavior is considered a malicious signal.
The drawing stage starts by performing OpenActions
specified by the document, if any. Almost all maldocs
will register anything that could trigger their malicious
payload in OpenActions for immediate exploitation upon
document open. Subsequent drawing activities depend
on user’s inputs, such as scrolling down to the next page
triggers the rendering of that page. Therefore, in this
stage, PLATPAL not only hooks the functions but also
actively drives the document rendering component by
component. Note that displaying content to screen is
a platform-dependent procedure and hence, will not be
hooked by PLATPAL, but the callbacks (e.g., an object is
rendered) are platform-independent and will be traced.
In addition, for AAR, when the rendering engine per-
forms a JavaScript action or draws a JavaScript-embedded
form, the whole block of JavaScript code is executed.
However, this also enables the platform detection attempts
described in §3.5 and an easy escape of PLATPAL’s de-
tection. To avoid this, PLATPAL is designed to suppress
the automatic block execution of JavaScript code. Instead,
the code is tokenized to a series of statements that are
executed one by one, and the results from each execution
are recorded and subsequently compared. If the state-
ment calls a user-defined function, that function is also
executed step-wise.
Following is a summary of recorded traces at each step:
PLATPAL outputs the parsing
COS object parsing:
results of COS objects (both type and content).
PD tree construction: PLATPAL outputs every PD com-
ponent with type and hierarchical position in the PD tree.
Script execution:
PLATPAL outputs every executed
statement and the corresponding result.
Other actions: PLATPAL outputs every callback trig-
gered during the execution of this action, such as change
of page views or visited URLs.
Element rendering: PLATPAL outputs every callback
triggered during the rendering of the PDF element.
4.3 External System Impact
As syscalls are the main mechanisms for a program to
interact with the host platform, PLATPAL hooks syscalls
and records both arguments and return values in order
to capture the impact of executing a maldoc on the host
system. However, for PLATPAL, a unique problem arises
when comparing syscalls across platforms, as the syscall
semantics on Windows and Mac are drastically different.
To ease the comparison of external behaviors across
platforms, PLATPAL abstracts the high-level activities
from the raw syscall dumps. In particular, PLATPAL is
interested in three categories of activities:
Filesystem operations:
including files opened/created
during the execution of the document, as well as file
deletions, renames, linkings, etc.
Network activities: including domain, IP address, and
port of the remote socket.
External executable launches: including execution of
any programs after opening the document.
Besides behaviors constructed from syscall
trace,
PLATPAL additionally monitors whether AAR exits grace-
fully or crashes during the opening of the document. We
(empirically) believe that many typical malware activities
such as stealing information, C&C, dropping backdoors,
etc, can be captured in these high-level behavior abstrac-
tions. This practice also aligns with many automated
malware analysis tools like Cuckoo [44] and CWSand-
box [63], which also automatically generate a summary
that sorts and organizes the behaviors of malware into a
few categories. However, unlike these dynamic malware
analysis tools that infer maliciousness of the sample based
on the sequence or hierarchy of these activities, the only
indication of maliciousness for PLATPAL is that the set
of captured activities differs across platforms. Another
difference is that the summary generated by Cuckoo and
CWSandbox usually requires manual interpretation to
USENIX Association
26th USENIX Security Symposium    279
Adobe Reader InstanceWindows HostFilesystem OperationsNetworkActivitiesProgramExecutionsSyscalls(External behaviors)PDF processing (Internal behaviors)COS object parsingPD tree constructionScript executionOther actionsElement renderingVirtual Machine 1Compare traces in PDF processingCompare impacts onhost platformSubmit forexecutionAdobe Reader InstanceMacintosh HostFilesystem OperationsNetworkActivitiesProgramExecutionsSyscalls(External behaviors)PDF processing (Internal behaviors)COS object parsingPD tree constructionScript executionOther actionsElement renderingVirtual Machine 2Submit forexecutionjudge maliciousness, while the summary from PLATPAL
requires no human effort in comparing behaviors across
platforms.
5
Implementation
PLATPAL consists of three components: 1) an internal
behavior tracer in the form of AAR plugin; 2) an external
behavior tracer in the form of syscall tracer; and 3) a sand-
boxed environment for dynamic document examination
based on VMware. We prototype PLATPAL to work on
recent Windows (versions 7, 8 and 10) and Mac (versions
Yosemite, El Capitan, and Sierra) platforms, and is com-
patible with all AAR versions from Adobe Reader X 10.0
to the latest version of Adobe Acrobat DC.
Internal Behavior Tracer
5.1
Given that AAR is closed-source software, it is not vi-
able to hook AAR’s PDF processing functions through
source code instrumentation. Initially, we used dynamic
binary instrumentation tools (i.e., Intel Pin [32] and Dy-
namoRio [7]) to hook the execution of AAR and examine
function calls at runtime. However, such an approach
has two significant drawbacks: 1) These tools introduce a
16-20 times slowdown, which is not tolerable for practical
maldoc detection. For example, executing a two-page
document could take up to five minutes, and sometimes is
even halted by the system; 2) The PDF processing logic
is hidden in over 15000 functions (latest version of AAR)
with no name or symbol information. It is difficult if not
impossible to identify the critical functions as well as to
construct the whole cycle.
To this end, PLATPAL chooses to develop an AAR
plugin as the internal behavior tracer. The AAR plugin
technology [3] is designed to extend AAR with more
functionalities such as database interaction, online col-
laboration, etc. The compiled plugin takes the form of a
loadable DLL on Windows and an app bundle on Mac,
which is loaded by AAR upon initialization and has sig-
nificant control over AAR at runtime. The AAR plugin
provides a few nice features that suit PLATPAL’s needs: 1)
Its cross-platform support abstracts the platform-specific
operations to a higher level; 2) It uses the internal logic
of AAR in PDF processing and summarizes the logic
into 782 functions and callbacks (nicely categorized and
labeled), which enables PLATPAL to both passively mon-
itor the execution of these functions and actively drive
the document, including executing JavaScript code and
rendering elements; 3) It is stable across AAR versions
(only two functions are added since version 10, which are
not used by PLATPAL); 4) Since the AAR plugin is in the
form of a loadable module, it shortens the total document
analysis time to an average of 24 seconds.
In recording behaviors discussed in §4.2, the COS
objects and PD hierarchical information are extracted