title:Fast Secure Multiparty ECDSA with Practical Distributed Key Generation
and Applications to Cryptocurrency Custody
author:Yehuda Lindell and
Ariel Nof
Fast Secure Multiparty ECDSA with Practical
Distributed Key Generation and Applications to
Cryptocurrency Custody∗
Yehuda Lindell†
Ariel Nof†
Samuel Ranellucci‡
October 14, 2018
Abstract
ECDSA is a standardized signing algorithm that is widely used in TLS, code signing, cryp-
tocurrency and more. Due to its importance, the problem of securely computing ECDSA in a
distributed manner (known as threshold signing) has received considerable interest. However,
despite this interest, there is still no full threshold solution for more than 2 parties (meaning
that any t-out-of-n parties can sign, security is preserved for any t−1 or fewer corrupted parties,
and t ≤ n can be any value thus supporting an honest minority) that has practical key distri-
bution. This is due to the fact that all previous solutions for this utilize Paillier homomorphic
encryption, and eﬃcient distributed Paillier key generation for more than two parties is not
known.
In this paper, we present the ﬁrst truly practical full threshold ECDSA signing protocol
that has both fast signing and fast key distribution. This solves a years-old open problem,
and opens the door to practical uses of threshold ECDSA signing that are in demand today.
One of these applications is the construction of secure cryptocurrency wallets (where key shares
are spread over multiple devices and so are hard to steal) and cryptocurrency custody solu-
tions (where large sums of invested cryptocurrency are strongly protected by splitting the key
between a bank/ﬁnancial institution, the customer who owns the currency, and possibly a third-
party trustee, in multiple shares at each). There is growing practical interest in such solutions,
but prior to our work these could not be deployed today due to the need for distributed key
generation.
1
Introduction
1.1 Background and Prior Work
the full proofs of security, as well as a performance improvement to the Paillier-based private multiplication.
In the late 1980s and the 1990s, a large body of research emerged around the problem of threshold
cryptography; cf. [3, 9, 11, 12, 17, 34, 33, 29]. In its most general form, this problem considers the
∗An extended abstract of this work (by the ﬁrst two authors) appeared at ACM CCS 2018. This paper includes
†Dept. of Computer Science, Bar-Ilan University, Israel. PI:EMAIL, nofarie@cs.biu.ac.il. Some
of this work was carried out for Unbound Tech Ltd. This work was also supported by the European Research
Council under the ERC consolidators grant agreement n. 615172 (HIPS), by the BIU Center for Research in Applied
Cryptography and Cyber Security in conjunction with the Israel National Cyber Directorate in the Prime Minister’s
Oﬃce, and by the Alter Family Foundation.
‡Unbound Tech, Ltd. PI:EMAIL
1
setting of a private key shared between n parties with the property that any subset of t parties may
be able to decrypt or sign, but any set of less than t parties can do nothing. This is a speciﬁc example
of secure multiparty computation, where the functionality being computed is either decryption or
signing. Note that trivial solutions like secret sharing the private key and reconstructing to decrypt
or sign do not work since once the key is reconstructed, any single party can decrypt or sign by
itself from that point on. Rather, the requirement is that a subset of t parties is needed for every
private-key operation.
Threshold cryptography can be used in applications where multiple signers are needed to gen-
erate a signature, and likewise where highly conﬁdential documents should only be decrypted and
viewed by a quorum. Furthermore, threshold cryptography can be used to provide a high level of
key protection. This is achieved by sharing the key on multiple devices (or between multiple users)
and carrying out private-key operations via a secure protocol that reveals nothing but the output.
This provides key protection since an adversary needs to breach multiple devices in order to obtain
the key. After intensive research on the topic in the 1990s and early 2000s, threshold cryptography
received considerably less interest in the past decade. However, interest has recently been renewed.
This can be seen by the fact that a number of startup companies are now deploying threshold
cryptography for the purpose of key protection [35, 36, 37]. Another reason is due to the fact that
ECDSA signing is used in Bitcoin and other cryptocurrencies, and the theft of a signing key can
immediately be translated into concrete ﬁnancial loss. Bitcoin has a multisignature solution built
in, which is based on using multiple distinct signing keys rather than a threshold signing scheme.
However, the ﬂexibility of the Bitcoin multisig is limited, not supporting arbitrary and complex ac-
cess structures. In addition, plain multisig solutions introduce anonymity and scalability problems
(as discussed in [18, Section 6.3]), and do not support revoking a party’s share, which can be a
crucial feature in some applications. Thus, a more general solution may be obtained via threshold
cryptography.
Fast threshold cryptography protocols exist for a wide variety of problems, including RSA
signing and decryption, ElGamal and ECIES encryption, Schnorr signatures, Cramer-Shoup, and
more. Despite the above successes, and despite the fact that DSA/ECDSA is a widely-used stan-
dard, DSA/ECDSA has resisted attempts at constructing eﬃcient protocols for threshold signing.
This seems to be due to the need to compute k and k−1 without knowing k, as discussed in detail
in [28]. The ﬁrst solution to overcome this diﬃculty in the honest minority setting was by Macken-
zie and Reiter in [29] who use Paillier additively homomorphic encryption in order to generate a
signature between two parties. Their protocol required heavy zero-knowledge proofs, but this was
improved in [18] and later in [28]. More signiﬁcant to our setting, [18, 4] show how to generalize the
Mackenzie-Reiter paradigm to any number of parties and with a full threshold. This means that
for any n number of parties and any threshold t ≤ n (even t = n) it is possible for any subset of t
parties to sign, and security is preserved in the presence of any subset of t − 1 corrupted parties.
This is a signiﬁcant breakthrough, but falls short of providing a full solution in practice since it
requires distributed Paillier key generation. Although two-party distributed Paillier key generation
can work in practice [15] (albeit requiring about 40 seconds between two strong servers), it is still
unknown as to whether this can be done practically for more than two parties. We remark that
an extremely fast two-party ECDSA signing protocol was recently presented by [13] (the protocol
of [13] is signiﬁcantly faster in signing time, but has much higher bandwidth than [28]). However,
it is unclear how to generalize their method to the multiparty setting. Thus, despite decades of
research in threshold cryptography and secure multiparty computation, the following basic question
2
remains open:
Is it possible to construct a full-threshold protocol for multiparty ECDSA, with practical
distributed key generation and signing?
We answer this question in the aﬃrmative.
1.2 Our Results
In this paper, we present the ﬁrst full threshold ECDSA signing protocol that has practical dis-
tributed key generation and fast signing. We achieve this breakthrough by replacing the Paillier
additively homomorphic encryption with ElGamal in-the-exponent that also supports additive ho-
momorphism. This enables us to compute an encrypted signature in a similar way to that of [18],
except that upon decryption the parties are only able to receive s · G (where G is the generator
point of the Elliptic curve group) and not s itself, where s is the desired portion of the signature.
This is due to the fact that we use ElGamal “in the exponent” and so we only obtain the result “in
the exponent”.1 We overcome this by computing the signature value s in parallel using a method
that guarantees privacy but not correctness. The combination of the above yields a secure solution
since the encrypted signature is veriﬁed and so s-in-the-clear is only revealed once equality with
the encrypted signature is validated.
The above method has many signiﬁcant advantages over using Paillier. First, we do not need
distributed key generation of Paillier keys which is hard, but just distributed key generation of
ElGamal keys which is very easy. Second, Elliptic curve operations themselves are far more eﬃcient
than Paillier operations. Third, zero-knowledge proofs that are very expensive in Paillier are
far more eﬃcient in the Elliptic curve group (it is well known that zero-knowledge is easier in
known-order groups). Fourth, by working in the same Elliptic curve group as the signature, all
homomorphic operations are automatically modulo the required group order q. This removes
many of the diﬃculties in using Paillier, that required adding randomness to enable eﬀectively
working over the integers, and then proving in zero-knowledge that the “correct amount” was
added. Another issue that arises when securely computing ECDSA is how to force the parties to
use the correct k−1. We use a similar method as that of [18] which is to multiplicative mask k with a
random value ρ, and then to reveal k·ρ. This enables each party to locally invert and obtain k−1·ρ−1
which can be used in generating the signature. Once again, by working within ElGamal and not
Paillier, we can achieve this far more eﬃciently than [18] and without the expensive Paillier-based
zero-knowledge proofs that they require.
We remark that our entire protocol works over any group, and thus can be used to securely
compute DSA in exactly the same way.
1.3 Cryptocurrency Wallets and Custody
As mentioned above, one important application of our protocol in practice today is in the protection
of cryptocurrency. Although there are diﬀering opinions on the beneﬁt of existing cryptocurrencies
1This is called ElGamal in-the-exponent due to typical multiplicative group notation. Speciﬁcally, encryption of
some x using generator g and public-key h is carried out by computing (gr, hr · gx). In Elliptic curve notation, this
becomes (r · G, r · P + x · G) for public-key P. It is easy to see that this scheme is additively homomorphic, but that
decryption only returns x · G but not x itself. Since obtaining x requires solving the discrete log problem, this is not
possible except for very small values of x.
3
to society, it is well accepted that honest investors should be protected from mass theft that we
are already seeing in this space. On the end user side, a secure cryptocurrency wallet should
enable the user to split their signing key amongst multiple devices, and require all (or a subset) in
order to transfer money. On the ﬁnancial institution side, there is real interest in banks and other
institutions to oﬀer full cryptocurrency custody solutions to large customers. Such a solution is
intended for use by investors who wish to protect very large amounts of cryptocurrency (even in
the billions) as part of their investment portfolio. Due to the high amount of funds involved, it is
not possible to enable any single party to have access to the signing key. Furthermore, neither the
bank nor the customer should have the ability to singlehandedly transfer funds (the bank cannot
due to liability, and the customer cannot due to the fact that its systems are typically less secure
than the bank). Thus, a natural solution is to split the signing key into multiple parts, both in
the bank and the customer (and potentially an additional third trustee) and then require some
threshold in each entity to sign.2 A full-blown solution for this will typically have diﬀerent roles
both at the bank and the customer (one set of parties would authorize the signature itself as being
requested from the customer, another would verify that the transfer meets the agreed-upon policy,
and so on). Thus, such solutions require complex access structures for signing. We discuss this in
more detail in Section 5.4 and show that our protocol fully supports these requirements. Thus, our
protocol provides the ﬁrst real solution for this problem that is of very practical relevance today.
1.4 Concurrent Work
Concurrently to this work, [19] also present a multiparty ECDSA protocol with practical key gen-
eration. The protocols have some similarity, but the methods used to prevent adversarial behavior
are very diﬀerent. One signiﬁcant diﬀerence between the two results is the hardness assumption
and security model. We prove that our protocol is secure under simulation-based deﬁnitions, show-
ing that it securely computes a standard ideal functionality for ECDSA. In addition, we prove the
security of our protocol under the standard assumptions that the DDH problem is hard and that
Paillier encryption is indistinguishable. In contrast, [19] prove the security of their protocol under
a game-based deﬁnition, and require DDH as well as an ad-hoc but plausible assumption called
Paillier-EC (ﬁrst introduced in [28]).
2 Preliminaries
We denote the security parameter by κ and the number of parties by n. We denote by [n] the set
{1, . . . , n}.
2.1 The ECDSA Signing Algorithm
The ECDSA signing algorithm is deﬁned as follows. Let G be an Elliptic curve group of order q
with base point (generator) G. The private key is a random value x ← Zq and the public key is
Q = x · G. ECDSA signing on a message m ∈ {0, 1}∗ is deﬁned as follows:
1. Compute m(cid:48) to be the |q| leftmost bits of SHA256(m), where |q| is the bit-length of q. Denote
this operation by Hq(m).
2We remark that oﬄine solutions requiring physical presence of representatives of both the bank and the customer,
as could be achieved using physically protected HSMs, are not viable due to the requirement of fast transfer in case
of a cryptocurrency crash.
4
2. Choose a random k ← Z∗
3. Compute R ← k · G. Let R = (rx, ry).
4. Compute r = rx mod q and s ← k−1 · (m(cid:48) + r · x) mod q.
q
5. Output (r, s)
It is a well-known fact that for every valid signature (r, s), the pair (r,−s) is also a valid signature.
In order to make (r, s) unique (which will help in formalizing security), we mandate that the
“smaller” of {s,−s} is always output (where the smaller is the value between 0 and q−1
2 ). We
denote (r, s) ← Sign(x, m) to be the signing algorithm, and Verify(Q, m, (r, s)) to be the veriﬁcation
procedure (that outputs 0 for “invalid” and 1 for “valid”).
2.2 ElGamal in the Exponent
Let G denote a group of order q where the DDH assumption is assumed to be hard, and let G be
a generator of the group. We will use addition as the group operation, upper-case characters for
group elements, and lower-case characters for scalars in Zq. This is consistent with Elliptic curve
notation, although all of our protocols work equivalently in ﬁnite ﬁeld groups.
We utilize ElGamal decryption “in the exponent”. An encryption of a value m ∈ Zq with public
key P ∈ G is denoted EGexpEncP (m), and is formally deﬁned by
EGexpEncP (m) = (A, B) = (r · G, r · P + m · G),
where r ← Zq is random. When we wish to specify the randomness in the encryption, we denote the
above by EGexpEncP (m; r). Note that m is not actually in the exponent here, but this is the name
used since when using multiplicative group notation (as in ﬁnite ﬁelds), a ciphertext is (gr, hr · gm),
in which case m is in the exponent.
Observe that this encryption is additively homomorphic. Speciﬁcally, two ciphertexts (A, B)
and (C, D) can be added by computing (A+C, B +D). If (A, B) = (r·G, r·P +m·G) and (C, D) =
(s·G, s·P +m(cid:48)·G) then (A+C, B +D) = ((r +s)·G, (r +s)·P +(m+m(cid:48))·G) = EGexpEncP (m+m(cid:48)).
In addition, multiplication of a ciphertext (A, B) = (r · G, r · P + m · G) by a scalar c is computed
by (c · A, c · B) = ((c · r) · G, (c · r) · P + (c · m) · G) = EGexpEnc(c · m). This can be combined with
rerandomization by computing (c· A + s· G, c· B + s· P ) = ((c· r + s)· G, (c· r + s)·P + (c· m(cid:48))· G),
which is a “fresh” random encryption of c · m(cid:48). We stress that ElGamal in-the-exponent is not a