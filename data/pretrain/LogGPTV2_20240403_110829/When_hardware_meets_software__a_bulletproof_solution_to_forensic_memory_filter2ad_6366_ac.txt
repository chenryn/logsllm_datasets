puted checksum over all the received packets. A valid signa-
ture guarantees the integrity of the received signed checksum
and matching checksums guarantee the integrity of all the
received packets. To be able to incrementally compute C,
an appropriate algorithm needs to be chosen. As we will see
in Section 5, SMMDumper uses the MD5 cryptographic hash
function.
The question of where to store the private key used for
signing C still remains. Any attempt to embed the key
into SMMDumper may be threatened by sophisticated at-
tacks aimed at reading its code or data. To overcome such
threats, we have decided to oﬄoad all the cryptographic op-
erations (key management and signing) to an external hot-
pluggable smart card device D.
In particular, as soon as
SMMDumper starts executing (that is, as soon as the sys-
tem enters into SMM), it waits for D to be plugged into the
system to carry out the tasks outlined above. Not only this
procedure guarantees the integrity of the collected memory,
but it also provides validity as the signing key can only be
accessed by whoever has access to D and can start the live
forensic memory dump.
It is worth noting that hot-pluggable memory collection
devices may induce tangible side-eﬀects in the target mem-
ory as a result of their installation or initialization in the sys-
tem, as pointed out in Section 2.1. However, SMMDumper
requires the analyst to plug the smart card device once the
system has entered SMM, where no operating system service
is in execution and any potential side-eﬀect is under the con-
trol of SMMDumper. In addition, diﬀerent smart cards allow
for the use of diﬀerent signing identities, which can be easily
produced and distributed to forensic analysts. By using a
personal smart card, the forensic analyst implicitly certiﬁes
that a given live memory acquisition is associated to that
speciﬁc, personal, smart card.
Assuming that errors do not generally occur, the schema
just outlined is both eﬀective and eﬃcient as it generally re-
quires only one encryption operation (signing) per a whole
memory dump.
In fact, signatures of individual packets
would negatively impact on the overall overhead. On the
other hand, if an individual packet is corrupted, the whole
dump must be taken again. Although the errors-are-seldom-
events assumption seems reasonable, SMMDumper can be
easily extended to suite the analysts needs. For instance,
signed checksums could be sent out for every 500MB of data,
trading-oﬀ packet retransmissions and overall overhead.
4.3.2 Network Transmission
Once packets are ready, SMMDumper needs to transfer
them from the target machine to an external trusted host or
device, for future analyses. We have opted for the former so-
lution. Conversely, the latter would, for instance, require to
store packets on an USB storage plugged on the target ma-
chine and this raises two main concerns. First, interacting
with USB devices from SMM is everything but simple and
the code needed to interact with the USB controller would
likely be bloated and prone to errors. Second, the destina-
tion USB device needs to be physically plugged on a port on
the target system while, leveraging a network connection,
the collected data can be sent to a remote host, tipically on
the same local network but, potentially, even elsewhere on
the Internet.
SMMDumper implements a basic network driver that is
able to communicate through I/O operations with the Net-
work Interface Card of the target machine. As noted else-
where, operating in SMM does not allow to rely on any op-
erating system-provided service, such as networking. There-
fore, SMMDumper is also equipped with the code responsible
to forge UDP packets sketched in Figure 3. Once again, the
choice of the UDP protocol rather than the more reliable
TCP is driven by the willingness of keeping the code as sim-
ple as possible and ease the burden of a fully-functional (and
complex) implementation. As described next, this is not a
limitation per-se as we do have enough metadata to recover
from arbitrary transmission errors.
One could argue that transferring data over the network
is less secure than using a removable device as the attack
surface increases. Indeed, an attacker that compromises a
machine in the same network of the target could use dif-
ferent techniques (e.g., ARP spooﬁng [20]) to intercept or
prevent the reception of the packets sent by SMMDumper.
However, it is impossible for an attacker to arbitrarily mod-
ify the content of a packet without being detected as the
overall checksum sent at the end of the transfer is signed
with a private key that, in our threat model, is inaccessible
to the attacker. An attacker could still perform a Denial
of Service attack, by dropping or damaging packets, but we
argue that it is easy to identify this kind of attacks and its
source inside a local area network and, consequentially, to
exclude it from the network and then request a retransmis-
sion of the blocked packets through the protocol explained
in the next paragraph.
4.3.3 Retransmission of Lost Data
As soon as SMMDumper ﬁnishes sending the memory to
the remote host, it switches from send mode to listen mode,
where it accepts requests to retransmit certain chunks of
memory. The remote hosts uses metadata contained in the
packets to check if everything was transmitted correctly,
identifying in the process missing or corrupted chunks. Ev-
ery lost packet is then asked back to the SMMDumper that
recreates the packet and tries again to transfer it. An at-
tacker, of course, could try to mangle with this mechanism,
for example by modifying sent requests or forging fake ones.
These are not really problematic attacks as the remote host
knows which packets it has requested and can simply discard
fake ones.
4.4 Accessing more than 4GB of Memory
There may be some situations in which SMMDumper is
required to access more than 4GB of physical memory:
if
the CPU on the target machine supports Physical Address
Extension (PAE), Page Size Extension (PSE-36) or IA-32e
mode (namely 64bit support). PSE-36 is very similar to
PAE, it just changes some internal structure of the page ta-
bles. Thus, in this paper we address only PAE among these
two alternatives, as we believe that modiﬁcations needed by
SMMDumper to handle PSE-36 would be trivial. Unfortu-
nately, handling IA-32e mode is not straightforward and it
is part of our ongoing research eﬀort.
4.4.1 Handling PAE on IA-32
Physical Address Extension is a paging mechanism that
is supported by an extension of physical addresses from 32
bits to MAXPHYADDR bits, where MAXPHYADDR is 36 bits on IA-
84
Linear Address
31 30 29
21 20
0
Directory Pointer
Directory
Page-Directory-
Pointer Table
9
Page Directory
2
32
Dir. Pointer Entry
CR3
Directory Entry
Oﬀset
21
2-MByte Page
Physical Address
Figure 4: Address translation with PAE (2MB pages)
32 CPUs. Since our approach deals with IA-32 CPUs, from
now on we will consider MAXPHYADDR to be limited to 36 bits.
Theorically, this allows to use up to 64GB of memory. Un-
fortunately, as we said before, when we are in System Man-
agement Mode, we are limited to 32 bit addressing and, thus,
we cannot use 36 bit addresses and registers. Furthermore,
we cannot enable paging and switch to virtual addressing as
this is also forbidden when in SMM. Some authors [25, 4]
state that, surprisingly, it is instead possible to switch from
SMM to protected mode, or even IA-32e. However, we did
not ﬁnd any speciﬁcation that explicitly allows this switch
and our experiments conﬁrmed that it is not possible indeed.
To the best of our knowledge, some CPUs may allow it but
as we aim to reach a good degree of compatibility we do not
rely anyhow on this possibility.
The rationale behind our solution is simple: once we ﬁnish
dumping the ﬁrst 4GB of physical memory, with the method
explained in the previous Sections, we change the paging
structure used by the target system so that we can control
the mapping between virtual and physical memory, both
from SMM and protected mode. Then, we inject some code
in the mapped pages and we modify EIP ﬁeld in the State
Save Map so that it points to the code that we inject. Once
everything is set up, we issue a rsm instruction and go back
to protected mode. During the switch, EIP is restored from
the State Save Map and thus the execution of the system
resumes from the custom code we injected before the switch.
Setting-up Paging.
To better understand how we setup page tables before
returning in protected mode, we reported the address trans-
lation mechanism with PAE enabled in Figure 4 as explained
in [7]. For the sake of simplicity, we only analyze (and use)
paging with 2MB pages. When PAE is enabled on a IA-32
CPU, the size of virtual addresses remains 32 bit while the
size of physical addresses is extended to 36 bit. When trans-
lating a Virtual Address (VA) into a physical one, the MMU
uses the structures depicted in Figure 4. The ﬁrst two bits
of the virtual address points to an entry of the Page Direc-
tory Pointer Table (whose physical address is stored in the
register CR3). The MMU then checks this entry (PDPTE) to
see if it is actually mapped (present bit) and if the required
access is allowed; then, it follows the physical address con-
tained in the entry, that points to the second structure: the
Page Directory. Bits 21:29 of VA determine the Page Direc-
tory Entry (PDE) the MMU must use. The MMU performs
the same check on the PDE and then it uses the base ad-
dress contained in the PDE and bits 0:20 of VA to calculate
the physical address corresponding to VA.
As can be observed, the whole address translation mecha-
nism depends on the CR3 register. When in SMM, however,
we cannot modify the CR3 register value stored in the State
Saved Map. However, even if PAE is enabled, this register is
not extended to 36 bits so we can access the memory pointed
by the register, thus modifying the paging structure at our
likings, even if we are restricted to 32-bit addressing. As
can be seen in Figure 4, theCR3 register points to the ﬁrst
Page Directory Pointer Table Entry (PDPTE). Part of the
bits are used to control the Page Directory mapped by this
PDPTE (e.g., if it is present, if caching is enabled) while the
remaining part contains its physical address. Every PDPTE
is 64 bit long, thus, to set it up correctly, we have to access
it in two “rounds”, using CR3 for the lower 32 bits and CR3+4
for 32 higher bits. SMMDumper edits the ﬁrst PDPTE so
that it points to a Page Directory located at physical address
0x0. This implies that now the ﬁrst Page Directory Entry
(PDE) is located at 0x0. SMMDumper conﬁgures this entry
to be present, writable, accessible from every control priv-
ilege level and large (2MB instead of 4KB). The page base
address of the ﬁrst PDE is then set to 0x0. This may seem
wrong at a ﬁrst glance, since we already use 0x0 as base ad-
dress of the Page Directory. On the contrary, this is not only
correct but also very convenient. Indeed, it means that we
will be able to use virtual address 0x0 to access a 2MB phys-
ical page whose ﬁrst 4KB correspond exactly to the Page
Directory itself. This is possible because we edited the ﬁrst
PDPTE and the ﬁrst PDE of the system, thus the MMU,
when translating virtual address 0x0, will walk these two en-
tries, as we explained before, and will translate the virtual
address into the physical address 0x0. Furthermore, being
able to access the Page Directory once switched to protected
mode, by using virtual range [0x00000000-0x00001000],
will allow us to directly edit paging structures (i.e., map
85
new physical pages into virtual ones) without having to ref-
erence physical addresses.
Returning to Protected Mode.
0x200000
Available
Injected
Code
Available
PDE ⇒ 0x????????
PDE ⇒ 0x00000000
0x10
0x08
0x0
Figure 5: Layout of physical/virtual page 0x0
Before returning the execution control to the system, fur-
ther setup is required. First of all, we must insert the code
that will be executed in protected mode. Obviously, it must
be carefully tailored to avoid overlapping the memory ar-
eas we reserved for PDEs. This code is stored in the SM-
RAM along with the code needed to perform the dump of
the ﬁrst 4GB and then copied into a section of the ﬁrst
mapped page. This page has been mapped as explained in
the previous paragraph, and its layout can be observed in
Figure 5. As we can see, the ﬁrst 16 bytes are reserved
for PDEs: the ﬁrst PDE maps physical page 0 (i.e., itself)
on virtual page 0, thus allowing access to paging structure
and to injected code even when SMMDumper will go back to
protected mode. The PDE at address 0x00000008, on the
other hand, is prepared but still unused: SMMDumper will
modify it to map physical memory pages that still need to
be sent out (i.e., above 4GB). The injected code, depicted
in Figure 6, performs the following tasks:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
= 0x00200000
= 0x00000008
va
p_pde
phy_addr = 0x100000000 /* 36-bit */
while phy_addr page_base_addr = phy_addr
p_pde->p
p_pre->us = 1 /* User/Super */
/* Now 0x00200000 points to phy_addr */
offset = 0
while offset < PAGE_SIZE:
str(phy_addr+offset)
packet =
packet += va[offset:offset+CHUNK_SIZE]
packet += MD5(packet[0:len(packet)])
/* Send pkt */
/* Update overall checksum */
offset += CHUNK_SIZE
phy_addr += PAGE_SIZE
Figure 6: Dump of the upper physical memory