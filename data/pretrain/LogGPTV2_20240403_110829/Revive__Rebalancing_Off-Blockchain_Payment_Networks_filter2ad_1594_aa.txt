title:Revive: Rebalancing Off-Blockchain Payment Networks
author:Rami Khalil and
Arthur Gervais
Revive: Rebalancing O(cid:27)-Blockchain Payment Networks
Rami Khalil
Department of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
Arthur Gervais
Department of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
ABSTRACT
Scaling the transaction throughput of decentralized blockchain
ledgers such as Bitcoin and Ethereum has been an ongoing chal-
lenge. Two-party duplex payment channels have been designed
and used as building blocks to construct linked payment networks,
which allow atomic and trust-free payments between parties with-
out exhausting the resources of the blockchain.
Once a payment channel, however, is depleted (e.g., because
transactions were mostly unidirectional) the channel would need
to be closed and re-funded to allow for new transactions. Users are
envisioned to entertain multiple payment channels with di(cid:29)erent
entities, and as such, instead of refunding a channel (which incurs
costly on-chain transactions), a user should be able to leverage his
existing channels to rebalance a poorly funded channel.
To the best of our knowledge, we present the (cid:27)rst solution that
allows an arbitrary set of users in a payment channel network to
securely rebalance their channels, according to the preferences
of the channel owners. Except in the case of disputes (similar to
conventional payment channels), our solution does not require on-
chain transactions and therefore increases the scalability of existing
blockchains. In our security analysis, we show that an honest par-
ticipant cannot lose any of its funds while rebalancing. We (cid:27)nally
provide a proof of concept implementation and evaluation for the
Ethereum network.
CCS CONCEPTS
• Security and privacy → Distributed systems security; Secu-
rity protocols; • Computer systems organization → Peer-to-
peer architectures;
KEYWORDS
Blockchain; Payment channels; O(cid:29)-chain; Ledger; Ethereum; Smart
contracts;
1 INTRODUCTION
Permissionless blockchains such as Bitcoin and Ethereum, where
any participant can choose to join and leave at any moment, have
allowed to replace a trusted third party with a network of mutually
mistrusting peers. Besides the transfer of monetary value, Ethereum
supports the execution of smart contracts, Turing complete code
which is executed in consensus among all peers of the network.
One of the main costs of the decentralization of permissionless
blockchains is their performance. In its current state, Bitcoin for
example only supports up to 7 transactions per second — clearly
insu(cid:28)cient to grow to a mainstream payment system. Because
the simple re-parameterization of permissionless blockchains has
shown to not solve the scalability performance beyond 100 transac-
tions per second [1], and alternative consensus mechanisms typ-
ically introduce di(cid:29)erent trust assumptions [2–5], second layer
payment channels [6–9] have been introduced.
Payment channels aim to establish direct peer-to-peer payment
channels that allow two parties to privately maintain and update a
two-party ledger. The bene(cid:27)t is that their individual transactions
are not required to be written to the blockchain, while keeping a
guarantee of being able to claim their rightful funds in the global
blockchain ledger at any given time. Payment channels have a few
limitations, but should improve the transaction throughput of a
decentralized ledger to the network bandwidth of the two peers
participating in a payment channel.
Payment networks [6, 8] allow to perform payments between
parties that are not immediately connected by a payment channel.
These linked payments utilize a chain of payment channels as in-
termediate links between two parties that wish to transact with
each other o(cid:29)-chain, without having to open a new payment chan-
nel or conduct an on-chain transaction. Several contributions aim
to improve the performance characteristics of payment networks.
Sprites [7], for example, aims to address the worst-case completion
time of an o(cid:29)-chain linked-transaction. Flare [9] proposes routing
strategies that aim to optimize the amount of time taken on average
to (cid:27)nd a payment route.
One fundamental (cid:30)aw of existing payment channels however
remains the inability to refund a payment channel without per-
forming transactions on the blockchain. Once a payment channel is
depleted, the channel needs to be closed and re-funded, requiring at
least two expensive on-chain transactions. Before refunding a chan-
nel, users might (cid:27)rst opt to choose more expensive channel routes,
which will increase the transaction costs over payment channels
(each hop in a payment network receives a relay fee).
This work. In this work, we propose to the best of our knowledge
the (cid:27)rst rebalancing scheme for o(cid:29)-chain payment networks. Our
solution enables a set of members in a payment network to shift
balances between their payment channels safely. Rather than to en-
act previously mandatory on-chain channel closing and re-opening,
our solution allows participants to safely Revive a channel by real-
locating o(cid:29)-chain the funds they have assigned to their payment
channels. Rebalancing is naturally limited by certain restrictions on
how much can be reallocated, because we do not shift the deposits
made within a payment channel but rather the credits that partic-
ipants are entitled to. In our security analysis, we show that an
honest participant is guaranteed not to lose any of its funds while
rebalancing.
The main contributions of our work are as follows:
• To the best of our knowledge, Revive is the (cid:27)rst rebalanc-
ing scheme for payment channels, that allows a user to
evaluation is presented in Section 6. We overview related work in
the area and contrast it to our solution in Section 7. We conclude
the paper in Section 8.
2 BACKGROUND
In this section, we provide the necessary background on permis-
sionless blockchains such as Bitcoin and Ethereum, and discuss
existing payment channel networks.
2.1 Decentralized Ledgers
With the inception of Bitcoin [10] in the year 2008 by a pseudonym
Satoshi Nakamoto, for the (cid:27)rst time in history, the era of decentral-
ized banking began. Bitcoin allows mutually mistrusting peers to
trade, without relying on a traditional trusted third party, such as
a bank. Inspired by Bitcoin, other blockchains such as Ethereum
surfaced. Similar to Bitcoin, Ethereum is a decentralized database
represented as a chain of blocks (i.e., records), where each block
points to its predecessor in the chain. Ethereum, however extended
Bitcoin’s transaction language to a Turing complete programming
language to ease the development of so-called smart contracts (cf.
Appendix 9.1 for more details).
The blockchain’s main intention is to provide an electronic pay-
ment solution that solves the double-spending problem. In the
physical world, it is not trivial to copy a monetary bill, while it is
trivial to copy an electronic “coin”. The blockchain allows to verify
whether a coin has already been spent by a peer, and as such al-
lows to solve the double-spending problem. Therefore, a blockchain
(such as Bitcoin or Ethereum) is an append-only ledger that records
the history of all transactions exchanged among the peers.
The majority of the existing blockchains rely on a so-called Proof
of Work (PoW) [11, 12], which is a computationally expensive puzzle
that is solved by miners to (cid:27)nd a block. Each block is cryptograph-
ically linked to the previous block in the blockchain, e(cid:29)ectively
forming a chain of blocks. Nakamoto showed that as long as the
majority of the blockchain miners are honest, an attacker is very
unlikely to alter the blockchain history. Note that besides the ability
to trade monetary value, the Bitcoin system also enables to provide
an electronic solution to trade other commodities, such as physical
products or domain names.
2.1.1
Scalability. The main costs of decentralized blockchains
is the problem that every peer needs to be aware of all transaction
of all other peers to not be vulnerable to double-spending. Bitcoin
currently only supports up to 7 transactions per second [13] and
scaling proposal can be roughly divided into two categories: (i)
improving the underlying consensus algorithm to support more
transactions [2–5] or (ii) developing o(cid:29)-chain solutions [6–9] which
rarely requires the scarce resources of the blockchain.
The simple re-parameterization of key blockchain parameters
(such as the block interval or the block size), has been shown to not
allow a transaction load beyond 100 transactions per second [1].
Alternative consensus algorithms and constructions moreover cur-
rently rely on additional trust assumptions. In this work, we there-
fore focus on o(cid:29)-chain solutions, which allow to alleviate the burden
of the underlying blockchain.
Figure 1: Revive reduces the costs of refunding payment
channels (within the green area). This (cid:27)gure shows the gas
costs needed to (i) naively execute rebalancing transactions
(current practise), (ii) use Revive to perform a rebalancing
while incurring the cost of dispute, and (iii) use Revive in
the best case without dispute (which is free).
utilize any other of his channels for rebalancing a particular
channel.
• If all participants of the rebalancing are responsive (i.e. hon-
est), rebalancing with Revive is free. Revive thus increases
the transaction scalability of permissionless blockchains by
reducing the frequency at which on-chain channel refund-
ing is necessary. Simultaneously, Revive reduces the costs
of payment channels because it de-incentivises routing pay-
ments through costly payment routes when rebalancing
of lower-priced channels and routes is feasible.
• Revive is payment channel agnostic, i.e., it can be applied
to di(cid:29)erent underlying payment networks. We expect most
payment channels that operate using smart contracts to be
viable candidates, such as Raiden [8].
• We provide an implementation and evaluation of Revive
for the Ethereum network, using the Sprites[7] payment
channel.
By our estimates, Revive o(cid:29)ers users the opportunity to decrease
the costs of performing a rebalancing of their payment channels
when compared to naively executing transactions that aim to di-
rectly achieve a similar goal on the blockchain. We highlight the
possible savings our protocol can provide within the context of the
Ethereum blockchain in Figure 1 (we report the total costs). At best,
our protocol provides free rebalancing, and at worst, the dispute
penalty is incurred, which is still lower than the fees associated
with withdrawing from and refunding every involved channel us-
ing two on-chain transactions. The details behind the reasoning of
our estimates can be found in Section 5.2.1.
The remainder of the paper is organized as follows. In Sec-
tion 2, we provide the necessary background on permissionless
blockchains and payment channel networks. In Section 3 we present
the Revive protocol, while we analyze its security in Section 4. We
discuss Revive’s usability in Section 5. Our implementation and
510152025NumberofPaymentChannels02004006008001000GasCosts(in1000)FlawlessReviveInstance(Free)DisputedReviveInstance(UpperBound)DisputedReviveInstance(LowerBound)NaiveTransactions(2PerChannel)NaiveTransactions(1PerChannel)DisputedReviveInstance(SchnorrSignaturesEstimate)2.2 Payment Channels
Payment channels allow to establish direct peer-to-peer payment
channels between two parties. Those two parties can privately
maintain and update a two-party ledger, such that their individual
transactions are not required to be written to the blockchain. At the
same time, the payment channel guarantees that the participants
can only spend their rightful amounts and that the payment channel
state can be written to the global blockchain ledger at any time.
Because payment channels avoid transacting on the blockchain,
they can in practice signi(cid:27)cantly improve the transaction through-
put. The transaction rate is e(cid:29)ectively only limited by the network
bandwidth between the participating peers. Another advantage of
payment channels is that they do not require the direct service
of the blockchain miners, and therefore can perform transactions
with lower transaction fees and consequently allow to economically
perform micropayments.
For a channel to be established between two entities, initial
deposits representing the total amounts that can be transacted
in this channel have to be put on the blockchain in escrow. The
security lies in the assurance that in case of a dispute of payment
or a need to withdraw deposits, the latest state of the ledger that
the parties have agreed upon can be submitted to the blockchain
and each party can claim its rightful balance.
2.2.1 Payment Networks. Instead of having to open payment
channels between every pair of individuals that wish to make o(cid:29)-
chain payments to each other, a linked-payment which utilizes a
network of payment channels to (cid:27)nd an indirect path from the
sender to the receiver can be used. Such payment networks are
envisioned to improve the usability and practicality of payment
channels.
Finding routes over a payment network can be considered similar
to Internet packet routing. Certain speci(cid:27)c routing restrictions
apply. Intermediate nodes that route the linked payment need to
have a su(cid:28)cient balance in the payment channel that will act as the
outgoing edge for the payment. A routed payment moreover either
atomically succeeds or fails. The individual payments along each
channel need to all be bound together, such that they all succeed or
fail, and no one loses any money. Because intermediate nodes are
typically not involved in the payment between the sender and the
receiver, they need to be incentivised to forward a payment. Current
designs allow for intermediate hops to collect fees for forwarding a
payment.
2.3 Existing Payment Network Designs
In the following section, we discuss di(cid:29)erent existing designs for
payment networks.
2.3.1 Duplex Micropayment Channels. Decker et al. [14] (cid:27)rst
proposed duplex payment channel networks which rely on the
timelock functionality of modern Bitcoin transactions (timelocked
transactions could for example only be included in the blockchain
10 days in the future). For Bitcoin in particular, the Script opcode
OP_CHECKSEQUENCEVERIFY as de(cid:27)ned in the Bitcoin Improve-
ment Proposals BIP 68 [15] and BIP 112 [16] helps designing such
channels. Duplex Micropayment Channels support routed pay-
ments that can be con(cid:27)rmed without any con(cid:27)rmation delay.
2.3.2 Lightning. Similar to duplex micropayment channels, the
Bitcoin Lightning Network [6] allows to perform o(cid:29)-chain pay-
ments between Bitcoin participants. Instead of timelocks, Lightning,
however, relies on the punishment to promote honest behaviour.
If an entity broadcasts a malicious transaction, an honest partici-
pant is able to claim all funds of the concerned channel. Lightning
is envisioned to support routing of payments among its payment
channels.
2.3.3 Raiden. The Raiden Network [8] is a work in progress
that aims to implement the same concepts proposed in the Light-
ning Network design, but on the Ethereum blockchain using smart
contracts. Transaction costs are estimated to be 7 orders of magni-
tude lower using Raiden than natively on the Ethereum blockchain,
which would pave the way for e(cid:28)cient micropayments.
Because the Ethereum blockchain supports the creation of cus-
tom exchangeable tokens, the Raiden protocol aims to deliver the
ability to make o(cid:29)-chain transactions with any token that follows
the standard token API [17].
2.3.4
Sprites. Sprites [7] are payment channels designed for
Ethereum. Their design is also inspired by Lightning and Raiden,
but they aim to minimize the worst-case collateral costs of indirect
o(cid:29)-chain payments. Collateral cost is calculated as the amount of
time funds are frozen, or held in escrow, instead of being utilized
or invested, multiplied by the amount of money that is suspended
from use.
When performing a linked payment, the amount of money that is
to be transacted has to be frozen across the entire chain of payment
channels involved, until the transaction completes or terminates.
This requirement is present in Lightning, Raiden and Sprites. The
achieved worst case time however, that a linked payment needs
to complete or cancel in Sprites is not proportional to the length
of the chain of intermediaries used to execute the payment, but is
instead constant, unlike in Lightning and Sprites.
Because the total funds held in escrow during a linked payment
using Sprites is proportional to the length of the transaction chain,
and the upper bound on the amount of time is constant, the worst
case collateral cost per payment that is only linearly, rather than
quadratically1, proportional to the length of the chain used. The use
of the Turing complete smart contracts model o(cid:29)ered by Ethereum
to implement the payment channel concept, rather than the direct
migration of an architecture meant for Bitcoin’s limited UTXO2
model over to Ethereum, is what enables Sprites to provide its cost
optimization.
3 LEDGER REBALANCING SCHEME
Over time, the extensive reuse of the same payment route may lead
to an unfavorably skewed network structure in which payment
routing becomes costly and ine(cid:28)cient. Our proposed rebalancing
scheme aims to o(cid:29)er a safe way to mitigate some of the possible
skewness that may arise in a payment network.
A
100
100
0
C
0
0
100
B
Figure 2: Simple skewed network. Each two parties share
their own bi-directional payment channel. A’s balances are
0 and 100 in its channels with B and C, respectively. B’s bal-
ances are 100 and 0 with A and C respectively. C’s balances
are 100 and 0 with B and A, respectively.
3.1 Motivation
Bi-directional payment channels can become highly skewed, and
thus reduced to uni-directional channels, when used frequently to
make transactions in one direction within the context of a payment
routing network. Even though intermediate nodes that participate
in the routing of a payment maintain their total balances, they
are required to transfer the transacted amount from one payment
channel to another. As an example, a skewed network which could
bene(cid:27)t from a rebalance of its ledgers is presented in Figure 2. In this
simple case, even though A and B are connected by a direct payment
channel, its balance is skewed in the direction of B. Therefore, if
A wishes to make a transfer to B, the longer route comprised of
A-C-B will have to be taken. This simple case can be generalized by
considering the direct payment channel between A and B as some
path that is shorter than the longer path from A through C to B.
If the intermediate nodes in a linked payment charge fees for
routing the payment, then the skewness of the channels leads to
an increased transaction cost because of the usage of longer paths
in routing. Moreover, in all aforementioned payment channel de-
signs, the intermediate payment channels involved in a payment
routing must freeze the transaction amount as collateral in order to