remotely exploiting an implementation vulnerability on the
router. Several such vulnerabilities have been published in
the past (e.g., CVE-2010-0581, CVE-2010-0580, and CVE-
2009-2865). Note that we do not assume that the attacker
can compromise an arbitrary number of routers within the
AS, since in many cases it is diﬃcult for an attacker to do
that even if he has already comprised one router in the AS.
One reason for this is the routers’ ﬁrmware diversity. For
example, it has been pointed out ([12]) that there are over
300,000 unique variants of Cisco’s IOS. This diversity stems
from a mixture of various hardware platforms, feature-sets,
licensing agreements, and build procedures. This ﬁrmware
diversity has largely made the deployment of reliable attacks
diﬃcult in practice. Moreover, usually with every attempt
to take-over a router inevitably the chances of discovery
Figure 2: The structure of an LSA header
A local network having two or more routers directly at-
tached to it is called a transit network. A router connected
to a transit network advertises a link to the network rather
than to the neighboring routers.
In addition, one of the
neighboring routers is chosen to act as a designated router.
This router advertises an LSA on behalf of the local network,
in addition to its own LSA, advertising links back from the
network to all the routers attached to the network (including
itself).
Each LSA is advertised periodically every 30 minutes, by
default. An LSA includes a Sequence Number ﬁeld, which is
incremented for every new instance. A fresh LSA instance
with a higher sequence number will always take precedence
over an older instance with a lower sequence number.
In
addition, an LSA includes an Age ﬁeld indicating the elapsed
time since the LSA’s origination. When it reaches 1 hour,
the LSA instance is removed from the LSA database.
For scalability reasons, OSPF allows an AS to be parti-
tioned into areas. Flooding is conﬁned to a single area while
routing information is disseminated between diﬀerent areas
through a special backbone area. For simplicity of the pre-
sentation we shall consider only the case where an AS is
composed of a single area.
The OSPF deﬁnes four basic types of LSA: Router-LSA,
Network-LSA, Summary-LSA and AS-external-LSA. The most
common type is Router-LSA, which is used to advertise the
links of a given router. For brevity, throughout the paper
we refer to a Router-LSA as simply LSA.
All LSAs begin with a common 20 byte header. Figure 2
depicts the LSA header. A description of the LSA header
ﬁelds follows.
• LS age – The time in seconds since the LSA was orig-
inated.
• Options – Optional capabilities supported by the de-
scribed portion of the routing domain.
• LS type – The type of LSA.
• Link State ID – Identiﬁes the part of the AS that is
being described by the LSA.
• Advertising Router – Identiﬁes the router that origi-
nated the LSA.
• LS sequence number – The sequence number of the
LSA.
• LS checksum – The checksum of the complete contents
of the LSA.
increase, hence the attacker may prefer to launch a single
OSPF attack rather than compromise multiple routers.
OSPF employs per-link LSA authentication where each
link is associated with a secret shared by all the routers
directly attached to that link. A router authenticates a
received LSA using the secret associated with the link on
which it was received. Note that no end-to-end authentica-
tion is employed in OSPF. The threat model assumes that
the attacker knows only the secrets associated with the links
that are directly attached to the router it controls. It does
not know the secrets associated with other links in the AS.
Consequently, the attacker may only be able to send false
LSAs to its immediate neighbors (which they in turn ﬂood
to their neighbors). Speciﬁcally, the attacker can not send
an LSA directly to a remote router.
We also note that in order to realize the assumptions of
the threat model it is not necessary for the attacker to com-
promise a router in the AS. It is suﬃcient to know the secret
of one of the links in the AS. This would allow an attacker
to remotely send false LSAs that would be successfully au-
thenticated by the routers attached to that link.
The attacker’s goal is to signiﬁcantly poison the routing
tables of other routers within the routing domain of the com-
promised router. Because the attacker would like to control
the routing domain for an extended period of time, the poi-
soning should be persistent and stealthy while reducing the
attack’s footprints and the trails leading to the attacker.
4. KNOWN ATTACKS
There are two previously published attack techniques that
exploit design vulnerabilities of OSPF in order to evade the
ﬁght-back mechanism, thereby allowing the attacker to per-
sistently falsify an LSA of a route it does not control.
Jones et al. [11] introduced the ﬁrst known attack that
evades the ﬁght-back mechanism – called ’periodic injection’.
The attack exploits a vulnerability in which the ﬁght-back
mechanism is triggered only after the router has ﬂooded
the false LSA (which was advertised on its behalf) to its
neighbors. Since the OSPF speciﬁcation prevents a router
from originating two instances of its own LSA within less
than 5 seconds. The victim router must wait for that time
period before it is able to send the ﬁght-back LSA. Hence,
if the attacker periodically advertises the false LSA at least
once every 5 seconds, it will ultimately prevent the attacker
from issuing any ﬁght-back LSAs.
Nakibly et al. [16] presented another attack technique that
evaded the eﬀect of the ﬁght-back mechanism called ’Dis-
guised LSA’. This attack is more severe than the attack
of [11] since only two malicious packets are required to per-
sistently falsify an LSA of a router. The technique exploited
a vulnerability in the ﬁght-back mechanism which does not
advertise a correcting LSA if the received LSA is “identical”
to last valid LSA advertised by that router. The OSPF spec
considers two instances of an LSA to be identical if they
have the same values in the following three ﬁelds: Sequence
Number, Checksum, and Age. In fact, two LSAs are con-
sidered identical even if their Age ﬁelds diﬀer by up to 15
minutes (and the Sequence Number and Checksum ﬁelds are
the same). The key point is that the spec considers these
two LSAs to be the same even if the actual advertised links
in the LSAs diﬀer. The attack exploited this by advertising
a false LSA that seems to be identical to a future ﬁght-back
LSA sent by a victim router. During the launch of the at-
tack the ﬁght-back mechanism is triggered, however other
routers ignore this ﬁght-back LSA by considering it to be a
duplicate of the false LSA. Thereby, rendering the ﬁght-back
LSA ineﬀective.
5. MANUAL ANALYSIS
We note that there is a general lesson to be learned from
the vulnerabilities outlined above: a defense mechanism must
always be fully aligned with the functionality that it pro-
tects. In other words, a defense mechanism must cover the
entire relevant attack surface of the functionality it aims
to defend. The slightest misalignment jeopardizes the entire
functionality. In our case the defense mechanism is the ﬁght-
back mechanism, the protected functionality is the routing
table calculation, and the attack surface is the receipt of
LSAs. The two ﬁght-back evasion attacks described above
are successful examples of techniques that exploit such mis-
alignments, enabling the attacker to send a false LSA that
does not trigger a ﬁght-back while still aﬀecting the routing
table calculation of the routers that install it.
In the periodic injection attack the misalignment is due to
the ﬁght-back being triggered after the ﬂooding step. In the
disguised LSA attack the misalignment is due to the ﬁght-
back being triggered only on the basis of the LSA’s header
ﬁelds and not on its content.
Note that not every false LSA that does not trigger a ﬁght-
back results in a successful attack. For example, an LSA that
is advertised on behalf of a nonexistent – phantom – router
will never trigger a ﬁght-back; however, it will not aﬀect the
routing table calculation of routers that install that LSA1.
One may well ask whether the OSPF speciﬁcation has
other security weaknesses in which the ﬁght-back mecha-
nism is not fully aligned with the routing table calculation.
To answer this question, we reviewed, in detail, both the
conditions which trigger the ﬁght-back mechanism, as de-
scribed in Section 13.4 of [15], and the procedures of the
routing table calculation, as described in Section 16 of [15].
Then we systematically searched for misalignments between
them.
To ﬁnd such misalignments we ﬁrst enumerated all the
ﬁelds in the LSA header which may potentially aﬀect the
routing table calculation and the values which they must
hold in order for an LSA to actually inﬂuence this calcula-
tion. This resulted in the following list.
1. LS age must be lower than 3600 (the maximum value
age value).
2. Link State ID must belong to an existing router or
network in the AS.
3. LS sequence number must be higher than the value of
the valid LSA to be replaced.
As a second stage of our search we closely inspected the
cases that may trigger a ﬁght-back. These cases can then
be easily translated into conditions on LSA header ﬁelds.
Then we asked what should be the header of an LSA that,
on one hand, obey the conditions to inﬂuence the routing
1The OSPF speciﬁcation mandates that only links adver-
tised by both their ends can aﬀect the routing table. Since
no real router will advertise a link to the phantom router, the
false links advertised on behalf of it will be ignored during
the routing table calculation.
table calculation, but, on the other hand, does not obey the
conditions of the ﬁght-back. This analysis led us to the new
vulnerability we uncovered. The following section explains
the vulnerability in detail.
5.1 The New Attack
The Link State ID ﬁeld of a Router-LSA equals the ID of
the router whose links are described by the LSA. Moreover,
since a Router-LSA is originated by the router described
by that LSA, the Advertising Router ﬁeld of the LSA will
also equal the router’s ID. Therefore, we note that in ev-
ery Router-LSA, the above two ﬁelds – Link State ID and
Advertising Router – are expected to have the same exact
value. The ﬁrst part of the vulnerability arises because the
standard neglects to specify a sanity check to verify this
equality on LSA reception. Thus, a Router-LSA is consid-
ered valid even if it has diﬀerent values in these two ﬁelds.
In the following we explain how an attacker can beneﬁt from
this.
According to Section 13.4 of [15], a router is triggered to
send a ﬁght-back LSA only if it receives a false LSA in which
“the Advertising Router is equal to the router’s
own Router ID.”
This means that no ﬁght-back shall be triggered by the
victim router as long as the Advertising Router ﬁeld of a
received LSA is not equal to the victim router’s ID. This is
true even if the Link State ID ﬁeld of that LSA equals the
victim router’s ID. Namely, no ﬁght-back is triggered even
if the false LSA claims to describe the links of the victim
router itself.
An attacker can exploit the above vulnerability as follows.
Let us assume the attacker wishes to advertise a false LSA on
behalf of some victim router, Rv. The attacker will advertise
on its local links the false LSA while having a header in
which:
• Link State ID = ID of Rv,
• Advertising Router 6= ID of Rv.
The false LSA shall be ﬂooded throughout the AS as usual
and will eventually be received by all routers, including the
victim router Rv. The OSPF standard guarantees that such
false LSA will not trigger ﬁght-back by Rv. Consequently, all
routers within the AS – including Rv – install the false LSA
in their LSA databases. Thus, the attacker achieves com-
plete poisoning of the LSA databases of all routers within
the AS.
However, does this LSA database poisoning indeed poison
the routing tables as well? Recall that an LSA is identiﬁed
by the combination of the following three ﬁelds:
1. LS type,
2. Advertising Router,
3. and Link State ID.
This means that the false LSA advertised by the attacker
has a diﬀerent identiﬁer than that of the valid LSA of the
victim router. They diﬀer in the Advertising Router ﬁeld’s
value. The value of a valid LSA equals that of the vic-
tim router’s ID while the value of the false LSA does not.
Therefore, the false LSA should not replace the valid LSA
in the LSA databases. Consequently, following the attack,
both LSAs are expected to reside in the LSA databases of
all routers.
Now let us turn to the second part of the vulnerability.
The OSPF standard (Section 16.1) speciﬁes that during the
routing table calculation phase LSAs are looked up in the
LSA database
“based on the Vertex ID”.
The vertex ID refers in the standard to the LSA’s Link
State ID ﬁeld. This means that while a router calculates
its routing table, it identiﬁes LSAs on the basis of their
Link State ID ﬁeld only and not on the basis of the full LSA
identiﬁer, which also includes the Advertising Router and LS
type ﬁelds. That the lookup is based on the partial identiﬁer
is explicitly reiterated in footnote 14 of the standard, which
also explains the motivation behind this:
“[14] There is one instance where a lookup must
be done based on partial information. This is
during the routing table calculation, when a network-
LSA must be found based solely on its Link State
ID. The lookup in this case is still well deﬁned,
since no two network-LSAs can have the same
Link State ID.”
Namely, the standard motivates this lookup by saying
that during the routing table calculation the full identiﬁer
of Network-LSAs is not known. However, it seems that the
standard unduly generalized this partial information lookup
to Router-LSAs as well, despite the full identiﬁer of a Router-
LSA being known during the routing calculation phase2.
The above gives rise to the following question: which LSA
will be fetched from the LSA database during the routing
table calculation:
the valid LSA of the victim router or
the false LSA advertised by the attacker? Remember, both
LSAs reside side by side in the LSA database of each router
in the AS. Both LSAs have the exact same value in their
Link State ID ﬁeld – the ID of the victim router. Unfortu-
nately, the standard fails to answer this question; it does not
consider the case where two diﬀerent LSAs have the same
Link State ID ﬁeld. Because this question is not addressed
in the standard, the answer is thus dependent on the imple-
mentation. An OSPF implementation that fetches the valid
LSA during the routing table calculation is oblivious to the
attack. However, an OSPF implementation that fetches the
false LSA is completely vulnerable to the attack.
As noted in Table 1 the attack is indeed successful against
many OSPF implementations which were found to be vul-
nerable. These vendors and others have acknowledged their
routers are vulnerable to the attack and released suitable