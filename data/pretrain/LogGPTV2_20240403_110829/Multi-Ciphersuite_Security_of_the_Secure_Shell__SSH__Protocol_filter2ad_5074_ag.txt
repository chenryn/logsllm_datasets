secret key for this sub-protocol.
, HRd,ˆc
(cid:96)
22
For parties and sessions where B relayed the complete session to the challenger, B also relays
the Corrupt, Reveal, Encrypt, and Decrypt queries to the challenger; otherwise B answers them
itself.
B’s simulation of the multi-ciphersuite ACCE experiment for NP(cid:107) (cid:126)SP to A is perfect.
Suppose A breaks authentication in NP(cid:107) (cid:126)SP. In particular, there exists in the multi-ciphersuite
ACCE experiment some c∗ ∈ [nSP] and some session πs
i that has accepted maliciously for sub-
protocol c∗ with peer identiﬁer j, but there is no unique session πt
j (in the multi-ciphersuite
i has a matching session. With probability 1/nSP, ˆc = c∗. In
ACCE experiment) with which πs
this case, there correspondingly exists in the ACCE-aux challenger a session πs
i that has accepted
with peer identiﬁer j but there is no unique session πt
j (in the ACCE-aux challenger) with which
i has had a matching session. Note in particular that B has not violated the condition Φc∗
πs
for NP(cid:107)SPc∗ because SPd is freshly simulatable under Φc∗ due to pre-condition 1 of the theorem.
Thus B has caused a session in the ACCE-aux challenger to accept maliciously, and thus has
broken authentication in NP(cid:107)SPc∗. Hence,
Advmcs-acce-auth
(A) ≤ nSPAdvacce-auth-aux
NP(cid:107)SPc∗ ,Auxc∗ ,Φc∗ (BA) .
NP(cid:107) (cid:126)SP,c∗
(19)
Similarly, if A breaks channel security of NP(cid:107) (cid:126)SP by answering the encryption challenge
correctly, then with probability 1/nSP B can answer its encryption challenge correctly and break
the channel security of NP(cid:107)SPc∗. Note that B has not made any prohibited queries in the channel
security deﬁnition: Reveal queries that would have made the ACCE challenger unfresh also would
have made the multi-ciphersuite ACCE experiment unfresh; and similarly to the authentication
case above, B has not violated the condition Φc∗. Hence,
Advmcs-acce-aenc
NP(cid:107) (cid:126)SP,c∗
(A) ≤ nSPAdvacce-aenc-aux
NP(cid:107)SPc∗ ,Auxc∗ ,Φc∗ (BA) .
(20)
This yields the result. Note the same reasoning yields the results for server-only authentication.
Remark 2. The concrete bounds in the proof of the composition theorem preserve (up to a small
factor of nSP) the security levels of the various ciphersuites. For example, suppose we have two
signed-Diﬃe–Hellman ciphersuites, both of which use digital signatures with 256-bit security,
but one of which uses a DH group with 128-bit security and the other of which uses a DH group
with 256-bit security. (A theoretician might object that there is no reason to use a 256-bit-strong
signature with a 128-bit-strong group, but in practice a client or server may only have a single
signing key that is used with ciphersuites of diﬀering security levels.) As we can see above, the
security level of authentication in the multi-ciphersuite protocol remains eﬀectively 256-bit.
7 SSH is multi-ciphersuite secure
In order to use the composition theorem to show that signed-Diﬃe–Hellman SSH ciphersuites are
multi-ciphersuite secure, even with re-use of long-term keys across ciphersuites, we need to deﬁne
the auxiliary algorithm Aux and the condition Φ, show that the preconditions of Theorem 3 are
satisﬁed, and show that individual ciphersuites are ACCE-secure with Aux.
Let SSHc denote a ciphersuite of SSH, using signature scheme SIGc. Recall from Section 4
that both the initiator and responder use the long-term signing key as follows. First, they
compute the session ID as a hash of a session identiﬁcation string and the shared secret:
π.sid ← Hc(VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkd(cid:107)e(cid:107)f(cid:107)K) .
(21)
Finally, they compute a signature σ ← SIGc.Sign(sk, π.sid). (If Sign is a hash-then-sign scheme,
this means that the session identiﬁcation string is hashed twice.) Recall further that KEXINIT and
23
KEXREPLY contain the initiator and responder’s respective preference-ordered list of ciphersuites.
(These are actually separate lists for key exchange, compression, signature, MAC, and symmetric
encryption algorithms, but from these we can infer a ciphersuite.)
We deﬁne the auxiliary algorithm Auxc(sk, x) as computing SIGc.Sign(sk, Hc(x)). For a
ciphersuite c, we deﬁne Φc(x) = 1 if, when x is parsed as in (21) and the ordered ciphersuite
preferences (cid:126)spC and (cid:126)spS are parsed from KEXINIT and KEXREPLY, c = neg( (cid:126)spC, (cid:126)spS); in other
words, if c is the ciphersuite that is mutually most preferred by the initiator and responder.
7.1 Proof of Precondition 2
We wish to show that after viewing the outputs of the negotiation algorithms {NP.AlgIl, NP.AlgRl}
(for all l), any party can eﬃciently reconstruct the per-session variables output by those algorithms.
In Section 4 we see that Init → Resp : KEXINIT outputs the message KEXINIT and updates the
per-session variables π.α and π.ρ. π.ρ and π.α are always updated with init and in-progress
respectively. By observing KEXINIT any party can thus construct the updated per-session
variables π.α ← in-progress and π.ρ ← init.
The second negotiation algorithm Resp → Init : KEXREPLY outputs the message KEXREPLY
and updates the per-session variables π.α and π.ρ with in-progress and resp respectively,
and π.c with the particular sub-protocol SPc that has been negotiated. Since π.α and π.ρ are
always updated with in-progress and resp, and π.c is updated with neg( (cid:126)spC, (cid:126)spS) (where
(cid:126)spC ← KEXINIT and (cid:126)spS ← KEXREPLY), any party can construct these updated per-session
variables with knowledge of KEXINIT and KEXREPLY.
The third and ﬁnal negotiation algorithm for SSH is Resp : ∅ which updates π.c from
KEXINIT and KEXREPLY, which is the same set of key-exchange, compression, signature, MAC and
symmetric encryption algorithms computed above. As we saw before, any party with knowledge
of KEXINIT and KEXREPLY can reconstruct the per-session variable π.c via neg( (cid:126)spC, (cid:126)spS) and
thus can reconstruct all updated per-session variables, which serves as proof of Precondition 2 of
Theorem 3.
, HRd,c
l
7.2 Proof of Precondition 1
We wish to show that for all c, d ∈ {1, . . . , nSP}, d (cid:54)= c, that there exists ‘helper algorithms’
l } such that Auxc and these helper algorithms provide a fresh simulation of SPd under
{HId,c
Φc. These helper algorithms are almost identical to the sub-protocol algorithms {SPd.AlgIl, SPd.AlgRl}
described in Section 4. From the proof of Precondition 2 above we know that after the negotiation
phase of the protocol, we can reconstruct all relevant per-session variables, and wish to simulate
the rest of the protocol run.
Without loss of generality, let us say that the negotiated ciphersuite is π(cid:48).c = d. The ﬁrst
is identical to the respective sub-protocol algorithm SPd.AlgI1(skd, pkd, π)
0 = SPd.AlgI1(skd, pkd, π) →
helper algorithm HRd,c
1
→ (π(cid:48), KEXDH INIT) and outputs the message KEXDH INIT. Thus HId,c
(π(cid:48), KEXDH INIT).
is the one of two algorithm that diﬀers from the re-
spective sub-protocol algorithm SPd.AlgR1(skd, pkd, π, KEXDH INIT) → (π(cid:48), KEXDH REPLY). In-
stead, the signature step is replaced with a call to the auxiliary oracle Auxc over inputs
i .pid, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f(cid:107)π.k) where πs
i .pid ← π(cid:48).pid, and KEXINIT and
(πs
KEXREPLY are the observed negotiation messages:
1 (skd, pkd, π, KEXDH INIT) → (π(cid:48), KEXDH REPLY)
1. y $← Zqπ.c
2. f ← gy
3. K ← ey
The second helper algorithm HRd,c
1
HRd,c
π.c
24
The ﬁfth helper algorithm (also omitted in server-only authentication) HId,c
3
is the second
of the two algorithms that diﬀers from the sub-protocol algorithm SPd.AlgI3(skd, pkd, π, AUTHOK
or AUTHFAILURE) → (π(cid:48), AUTHREPLY).
Instead, the signature step is replaced with a call to
j.pid, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f(cid:107)A) where
the auxiliary oracle Auxc over inputs (πt
j.pid ← π(cid:48).pkd and A is as calculated below:
πt
3 (skd, pkd, π, AUTHOK or AUTHFAILURE) → (π(cid:48), AUTHREPLY)
1. A ← username(cid:107)service(cid:107)public-key(cid:107)1(cid:107)alg(cid:107)pkC,π.c
2. σC ← Auxc(πt
3. AUTHREPLY ← A(cid:107)σC
j.pid, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f(cid:107)π.k, A)
HRd,c
4. (π.sid, π.k) ← PRFπ.c(K, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f )
5. σS ← Auxc(πs
i .pid, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f(cid:107)π.k)
6. KEXDH REPLY ← (f, pkS,π.c, σS)
The third helper algorithm HId,c
is exactly identical to the respective sub-protocol algo-
2
rithm SPd.AlgI2(skd, pkd, π, KEXDH REPLY) → (π(cid:48), AUTHREQUEST), which computes the shared
session key, as well as authenticating the server by verifying the server’s digital signature,
and outputs the message AUTHREQUEST, which requests the mode of authentication. Thus
HId,c
is identical to the
sub-protocol algorithm SPd.AlgR2(skd, pkd, π, AUTHREQUEST) → (π(cid:48), AUTHOK or AUTHFAILURE),
which conﬁrms that to the server that mutual authentication has been selected, and veriﬁes
the choice to the client by replying with the algorithm name and public-key. Thus HRd,c
2 =
SPd.AlgR2(skd, pkd, π, AUTHREQUEST) → (π(cid:48), AUTHOK or AUTHFAILURE).
2 = SPd.AlgI2(skd, pkd, π, KEXDH REPLY) → (π(cid:48), AUTHREQUEST).
The fourth helper algorithm (omitted in server-only authentication) HRd,c
2
Note again that since neg( (cid:126)spC, (cid:126)spS) (cid:54)= c (where (cid:126)spC ← KEXINIT (cid:126)spS ← KEXREPLY),
Φc(VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f(cid:107)π.k, A) = 0
The sixth helper algorithm HRd,c
3
and the freshness condition is not violated.
is identical to the respective sub-protocol algorithm
SPd.AlgR3 (skd, pkd, π, AUTHREPLY) → (π(cid:48), AUTHSUCCESS or AUTHFAILURE) (in server-only auth.,
the helper algorithm is identical to SPd.AlgR2(skd, pkd, π, AUTHREQUEST) → (π(cid:48), AUTHSUCCESS or
AUTHFAILURE)), which veriﬁes that authentication was successful and responds with the message
3 = SPd.AlgR3(skd, pkd, π, AUTHREPLY) →
AUTHSUCCESS, or AUTHFAILURE otherwise. Thus HRd,c
(π(cid:48), AUTHSUCCESS or AUTHFAILURE), or in server-only authentication HRd,c
3 = SPd.AlgR2(skd, pkd,
π, AUTHREQUEST) → (π(cid:48), AUTHSUCCESS or AUTHFAILURE).
is identical to the respective sub-protocol algo-
rithm SPd.AlgI4(skd, pkd, π, AUTHSUCCESS or AUTHFAILURE) → (π(cid:48)) (in server-only authentication,
the helper algorithm is identical to SPd.AlgI3(skd, pkd, π, AUTHSUCCESS or AUTHFAILURE) → (π(cid:48)).
This algorithm veriﬁes the AUTHSUCCESS message, and accepts the handshake. Thus HId,c
4 =
SPd.AlgI4(skd, pkd, π, AUTHSUCCESSAUTHFAILURE) → (π) or in server-only authentication mode
HRd,c
3 = SPd.AlgI3(skd, pkd, π, AUTHSUCCESS or AUTHFAILURE) → (π(cid:48)).
The outputs and updated per-session variables for these helper algorithms are indistinguish-
able from the outputs from the ‘real’ sub-protocol algorithms for SSH and together with the
auxiliary oracle Aux provide a fresh simulation of a sub-protocol run SPd under Φc.
The seventh and ﬁnal helper algorithm HId,c
4
7.3 Security of SSH with auxiliary oracle
Theorem 4 (SSH is secure w/aux. oracle). Let SSHc be a signed-DH SSH ciphersuite with
signature scheme SIGc, hash function Hc; deﬁne Auxc and Φc as above. Let µ be the length of
the nonces in KEXINIT and KEXREPLY (µ = 128), nP the number of participating parties and nS
25
the maximum number of sessions per party. The algorithms B1, . . . ,B5 given in the proof of the
lemma, are such that, for all algorithms A,
Advacce-so-auth-aux
SSHc,Auxc,Φc
(A) ≤ (nP nS)2
2µ
+ Advcr
Hc(BA
1 ) + nP Advsuf-cma
SIGc
(BA
2 ) ,
(22)
and
Advacce-so-aenc-aux
SSHc,Auxc,Φc
(A) ≤ Advacce-so-auth-aux
Advddh
SSHc,Auxc,Φc
(A)
gc,qc(BA
(BA
5 have approximately the same running time as A.
3 ) + Advprf
+ nP nS
PRFc
and BA
1 , . . . ,BA
(cid:16)
(cid:17)
,
4 ) + Advbsae
StEc(BA
5 )
In order to prove the theorem, we ﬁrst obtain a bound on the server-only authentication
advantage in Lemma 5, then on the channel security advantage in Lemma 6.
Lemma 5 (Authentication w/auxiliary oracle). Let SSHc be a signed-DH SSH ciphersuite with
signature scheme SIGc, hash function Hc, Diﬃe–Hellman group (gc, qc), and BSAE scheme StEc,
and deﬁne Auxc and Φc as above. The algorithms B1 and B1 given in the proof of the lemma,
are such that, for all algorithms A,
Advacce-so-auth-aux
SSHc,Auxc,Φc
(A) ≤ (nP nS)2
2µ
+ Advcr
Hc(BA
where nP , nS, and µ are as in the statement of Theorem 1, and BA
the same running time as A.
(BA
2 ) ,
SIGc
1 ) + nP Advsuf-cma
1 and BA
2 have approximately
Proof. The proof of authentication with adversarial access to the auxiliary oracle Auxc proceeds
(A) in Section 5.2 with one major change:
identically to the proof of the bound on Advacce-so-auth
Game 3, which involves signature forgeries now considers signatures output by Auxc. Speciﬁcally,
we note that any queries x made to Auxc either do not help the session to accept maliciously, or
the predicate Φ(x) = 1 for x and thus Auxc will not output a signature. This is because, any
query x that helps the session to accept maliciously will include a transcript of the negotiation
phase, and thus uniquely identiﬁes the ciphersuite, satisfying the predicate.
SSH