# Teaching Old Shellcode New Tricks
## DEF CON 2017
### @midnite_runr

## Whoami
- **US Marine (served until 2001)**
- **Developer of BDF/BDFProxy**
- **Co-Author of Ebowla**
- **Discovered OnionDuke**
- **Currently working at Okta**
- **Twitter: @midnite_runr**

## Why This Talk?
- **It’s fun!**
- **It’s time to update publicly available shellcode.**

## Outline
- **Some History**
- **Introduced Methods**
- **Mitigations and Bypasses**

## Part I - History

### Stephen Fewer’s Hash API (SFHA)
- **Also known as Hash API or MetaSploit Payload Hash**
- **Introduced in August 2009**
- **Uses a 4-byte hash to identify DLL!WinAPI in the Export Address Table (EAT)**
- **Jumps to the WinAPI and returns to the payload**
- **Borrowed some code from M. Miller’s 2003 paper, "Understanding Windows Shellcode"**
- **Reference: [Blog Post](http://blog.harmonysecurity.com/2009/08/calling-api-functions.html)**

### Typical SHFA Based Payload
- **Structure: [—SHFA—][the actual payload logic]**
- **Steps:**
  1. [—SHFA—]
  2. [the actual payload logic]
  3. [some winAPI]
  4. Continue until done

### Defeating SFHA
- **EMET (Enhanced Mitigation Experience Toolkit)**
- **Piotr Bania's Phrack 63:15 // HAVOC - POC||GTFO 12:7**

### EMET Caller/EAF(+)
- **EAF(+) Introduced in 2010/2014(+)**
- **Protects reading KERNEL32/NTDLL and KERNELBASE(+)**
- **Caller (2013)**
  - **Blocks ret/jmp into a winAPI (Anti/rop) for critical functions**
- **EMET is End of Life (EOL)**
  - **Supported through July 31, 2018**
  - **Still works, depending on the threat model**
  - **Re-introduced in Windows RS3**

### Tor Browser Exploit vs. EMET
- **Bypassing EMET EAF(+)**
  - **2010: Berend-Jan Wever (Skypher Blog) - ret-2-libc via ntdll**
  - **January 2012: Piotr Bania - Erase HW Breakpoints via NtContinue**
  - **September 2014: Offensive Security - EAF+ bypass via EMET function reuse calling ZwSetContextThread directly**
  - **References:**
    - [Skypher Blog](http://web.archive.org/web/20101125174240/http://skypher.com/index.php/2010/11/17/bypassing-eaf/)
    - [Piotr Bania](http://piotrbania.com/all/articles/anti_emet_eaf.txt)
    - [Offensive Security](https://www.offensive-security.com/vulndev/disarming-emet-v5-0/)

- **Bypassing EMET Caller**
  - **February 2014: Jared Demot - Demo’ed a payload that directly used LoadLibraryA (LLA)**
  - **Reference: [Bromium Labs PDF](https://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf)**

### IAT Based Payloads in BDF
- **May 30, 2014: Added IAT based payloads/shellcode to BDF**
- **Directly used IAT API thunks, bypassing EMET Caller/EAF(+) checks**

### Position Independent IAT Shellcode
- **December 2014**
- **References:**
  - [Skape (M. Miller), 2003](http://www.hick.org/code/skape/papers/win32-shellcode.pdf)
  - [Piotr Bania, 2005](http://phrack.org/issues/63/15.html)
  - [Cabanas Virus, 1997](http://virus.wikidot.com/cabanas)

### Emailed the EMET Team
- **¯\_()_/¯**

### IAT Based Stub
- **LoadLibraryA(LLA)/GetProcAddress(GPA) in Main Module**
- **Reference: [GitHub Gist](https://gist.github.com/secretsquirrel/2ad8fba6b904c2c952b8)**

### IAT Based Stubs
- **LLA/GPA in main module**
- **LLA/GPA in a loaded module (dll)**
- **GPA to LLA in main module**
- **GPA to LLA in loaded module**

### System Binaries/DLLs with LLAGPA or GPA in IAT
| OS | LLAGPA | GPA |
|----|--------|-----|
| XPSP3 | 1300 | 5426 |
| VISTA | 645 | 26855 |
| WIN7 | 675 | 48383 |
| WIN8 | 324 | 31158 |
| WIN10 | 225 | 50522 |

### FireEye Flash Malware with EMET Bypass
- **June 06, 2016**
- **References:**
  - [FireEye Blog](https://www.fireeye.com/blog/threat-research/2016/06/angler_exploit_kite.html)
  - [GitHub POC](https://github.com/ShellcodeSmuggler/IAT_POC)
  - [Okta Blog](https://www.okta.com/blog/2016/07/the-emet-serendipity-emets-ineffectiveness-against-non-exploitation-uses/)

## What Now?
- **July 2016: More payloads**
- **Many MetaSploit payloads were based off of Hash API stub**
- **Much work and some ideas**

## Part II - Development

### Two Ideas
- **Remove SFHA and replace it with X**
- **Build something to rewrite the payload logic for use with an IAT parsing stub**

### REWRITE ALL THE THINGS
- **MSF Winx86 Payloads Follow a Pattern**
- **Reference: [GitHub](https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_recv.asm)**

### Workflow
- **Take Input via stdin or from file**
- **Disassemble**
- **Capture blocks of instructions**
- **Capture API calls**
- **Capture control flow between two locations**
- **Protect LLA/GPA registers from being clobbered**

### Level of Effort (LOE)
- **Five days straight at about 12-15 hour days**
- **When I solved one problem, 2-3 more appeared**
- **There is a point where a manual rewrite would have been easier - I crossed it**
- **!BURN IT DOWN!**

### Next Idea
- **[—SFHA—]**
- **[the actual payload logic]**
- **[IAT Stub]**
- **[IAT Stub] [offset table] [the actual payload logic]**

### Some Requirements
- **Support Read/Execute Memory**
- **Try to keep it small**
- **Support any Metasploit Shellcode that uses SFHA**

### Workflow
- **Take Input via stdin or from file**
- **Disassemble**
- **Capture blocks of instructions**
- **Capture API calls**
- **Build a lookup/offset table**
- **Find an appropriate IAT for the EXE**
- **OUTPUT**

### Offset Table Approach
- **Example: b'RtlExitUserThread\x00ExitThread\x00kernel32\x00WinExec\x00GetVersion\x00ntdll\x00'**
- **DLL and API Offsets**

### The New Workflow
- **[IAT Stub][Lookuptable][the actual payload logic]**
- **Steps:**
  1. [IAT Stub]
  2. [Lookuptable]
  3. [the actual payload logic]
  4. [some winAPI]
  5. Continue to 2 until done

### LOE
- **The initial POC took < 12 hours**
- **Adding the workflow and stubs: 12 hours**
- **Finalizing the tool: ಠ_ಠ**
- **But I’m happy!**

### About Those API Hashes
- **They are now meaningless**
- **AVs depend on them for signatures**
- **What happens if we mangle them?**

### AV Demo
- **Demo: [YouTube](https://youtu.be/p3vFRx5dur0)**

### Introducing FIDO
- **Issues with some DLLs**
- **System Binaries/DLLs with LLAGPA or GPA in IAT**

### API-MS-WIN-CORE*.dlls
- **MINWIN**
- **These DLLs redirect to the actual implementation of the Windows API**
- **Existed since Win7**
- **GPA is implemented via API-MS-WIN-CORE-LIBRARYLOADER-*.DLL**
- **Normally used in system DLLs**
- **Can be called by userland applications via IAT parsing**
- **Reference: [Betanews](https://betanews.com/2009/12/02/mark-russinovich-on-minwin-the-new-core-of-windows/)**

### Because it is in…
- **Kernel32.dll**
- **We just need GPA in any DLL Import Table to access the entire Windows API**
- **Since Win7, GPA has been in Kernel32.dll Import Table**
- **We’ve had a stable EMET EAF(+)/Caller bypass opportunity since Win7 (works for Win7 - Win10)**

### Tor Exploit with My Stub vs. EAF+/Caller
- **Demo: [YouTube](https://youtu.be/oqHT6Ienudg)**

### Updates
- **These payloads were introduced at REcon Brussels - January 2017**
- **For DEF CON 2017 - 64-bit payloads are being released.**

## Part III - Mitigations

### My Reaction
- **How Does the IAT Filter Work?**
  - **The pointer to the Import Name in the import table no longer points to:**
    - **GetProcAddress**
    - **LoadLibraryA**
  - **The API Thunk is still there**
  - **No Import name == driving blind**

### Missed an Import
- **GetProcAddressForCaller (GPAFC)**
  - **Introduced in Win8**
  - **Exported by kernelbase.dll**
  - **Imported by Kernel32.dll**
  - **Works very similar to GPA**
  - **Not filtered by the IAT Filter**
  - **GPA('DLLHandle', 'API String') == GPAFC('DLLHandle', 'API String', 0)**
  - **Example in FIDO: ExternGPAFC**

### Now What?
- **Think About It**
- **Go Directly to GetProcAddress**
- **Process Memory**
- **PEB.imagebase**
- **Offset - Version(s) Dependent**

### Example Dev Workflow
- **Find GetProcAddress (GPA) in process space (application specific)**
- **No system DLLs**
- **If multiple versions have the same exploit:**
  - **Find a lynchpin GetProcAddress location that is the same across all versions**
- **Else, diff the GPA target binary**
- **Use the diff locations in the payload to ID the version to the corresponding GPA offset**
- **Examples in FIDO: OffsetGPA and ExternOffsetGPA**

## Questions?
- **Get the code: [GitHub](https://github.com/secretsquirrel/fido)**
- **Thanks: @SubTee, @FreedomCoder, @Wired33, @__blue__**