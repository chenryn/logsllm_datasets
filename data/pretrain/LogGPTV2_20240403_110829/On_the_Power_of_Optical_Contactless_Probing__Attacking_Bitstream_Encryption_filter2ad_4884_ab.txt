key k and sent to the FPGA. As a result, the correctness of the
Figure 2: Encrypting the bitstream in the IDE using the key
k and decrypting it on the FPGA by an ASIC decryption core
using the same key.
bitstream can be checked only when the whole bitstream, including
the Ka and the MAC, is already decrypted.
2.2.3 Attacks against FPGAs. Here we briefly review the pub-
lished successful attacks against dedicated ASIC decryption cores
of FPGAs. Side-channel analysis is the primary technique deployed
against dedicated ASIC security circuits of FPGAs in the litera-
ture. In one of the first attempts, side-channel analysis was used to
discover a keyed backdoor/test mechanism in a Microsemi FPGA,
which activated the readback of the bitstream in plaintext after
configuration [20]. In subsequent attempts, side-channel analysis
was mainly employed to attack the bitstream encryption feature
of FPGAs to extract the secret key k. It has been demonstrated
that the security of DES and AES decryption cores of the Xilinx
and Intel/Altera FPGAs can be broken by performing differential
power analysis (DPA) [12–14, 21]. However, although DPA is a non-
invasive attack, it requires custom boards to reduce the noise of the
measurement, which makes the attack more challenging. To mount
an attack against the bitstream encryption without any board mod-
ifications, electromagnetic analysis (EM) can be deployed [5, 15].
Side-channel analysis can be mitigated by using asymmetric authen-
tication, key rolling and side-channel resistant decryptors. These
security schemes have been already integrated into the most recent
FPGA generations [9, 17].
3 APPROACH
This section describes the approach employed in this work to assess
the threat of contactless optical probing towards commercial secu-
rity ASICs. To be more specific, we chose a Xilinx Kintex 7 FPGA for
our experiments. For the general attack scenario we assume the fol-
lowing: The attacker has physical possession of a board containing
an FPGA in a modern flip-chip package which loads an encrypted
bitstream from NVM. She seeks to extract the plaintext bitstream
data to reveal the IPs or secrets (e.g., authentication keys) contained
therein. However, the only professional equipment she has access
to is an optical probing system, which she rents at a failure analysis
lab. Apart from that, she only has access to conventional equipment
like a laptop and a soldering iron.
NVMEncryptedbitstream10111001010JTAGBBRAM / eFuseFPGAAES EncryptorAES DecryptorBitstream …DesignSession H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1663To evaluate an actual attack, first we have to consider how an
attacker would proceed. In general, to enable plaintext extraction,
she would need to perform the following basic steps:
(1) Localize the general configuration logic area on the silicon die
(2) Localize the AES decryption core in the configuration logic
(3) Localize the logic gates carrying plaintext data in the AES
(4) Extract the data from the found plaintext gates
To be on the safe side, the attacker would probably perform all these
steps on a “training” device identical to the one she tries to attack.
This would allow her to feed the training device with manipulated
bitstreams, as she can erase and manipulate the keys and security
settings in this device freely. As soon as she finds the plaintext
gates and is confident that her attack is working, she can move on
to extract the data from the actual target.
Most of these steps are rather straightforward if she has access to
an optical probing system. As the device is in a flip-chip package
which exposes the silicon backside directly, she can use the common
1.3 µm optical probing wavelength to acquire reflected light images.
As silicon is transparent to this wavelength, this will deliver images
of the circuit structures without any chip preparation. Just from
the first reflected light images of the device, she should already be
able to distinguish between FPGA user logic fabric and ASIC areas.
As the FPGA logic fabric consists of several rows and columns
of identical elements, such as Custom Logic Blocks (CLBs) and
memory cells, it has a highly ordered appearance. ASIC areas, on
the other hand, are composed of different blocks for individual
sub-functions and synthesized logic areas, and therefore, posses
a more irregular structure. As soon as the attacker has identified
ASIC candidates in this way, she can start to analyze them globally
for identical appearance. If there are identical ASIC areas, they are
unlikely candidates for the configuration ASIC, as it is expected
that there is only one ASIC for this function. Apart from that, she
might also find helpful information by comparing the functions
mentioned in the datasheet to the structure and placement of the
ASIC areas in question.
The remaining candidates can then be examined using optical prob-
ing. If the attacker can estimate some specific frequency present in
the configuration logic, she might perform EOFM to detect the logic
gates operating at this frequency. If this is not possible, she might
deliberately induce a frequency by manipulating the bitstream data
and detect it via EOFM. When she identifies the configuration logic,
she can then compare the activity in this area for encrypted and
unencrypted bitstreams. Areas that are only active for encrypted
bitstreams are potential candidates for the decryption logic. In these
areas, she will then need to somehow distinguish the logic carrying
the plaintext from all other gates.
This distinction will require a slightly more sophisticated approach.
Many modes of operation for block ciphers, especially AES-CBC in
our case, destroy structures and frequencies present in the plaintext
when they create the ciphertext. This is a valuable property of a
cipher as it renders a number of attacks (e.g., frequency analysis)
ineffective. Through this process, the spectrum of the ciphertext
basically becomes computationally indistinguishable from noise
Figure 3: Since the ciphertext function c (t ) is indistinguish-
able from a random noise signal, its spectrum C ( f ) contains
no dominant frequency components. However, the plain-
text p(t ) is generated as a periodic function, and hence, its
spectrum P ( f ) contains specific harmonics.
in the frequency domain, see Fig. 3. However, during decryption,
the plaintext structure is obviously fully recreated. Therefore, a
frequency induced into the plaintext bitstream data would vanish
in the ciphertext, and only reappear in the plaintext that leaves
the decryption core. For instance, to induce a desired frequency
for a signal leaving the AES decryption core, one can generate a
time-periodic plaintext with a regular "10" pattern. Thus, we can
write the plaintext p(t ) as a square wave:
p(t ) = 2[H (t/T ) − H (t/T − 1)] − 1
where H (t ) is the Heaviside step function [26] and T is the bit
duration time. By expanding the periodic function p(t ) in terms of
sum of sines [26], we have
4
π
(cid:18) nπt
∞(cid:88)
(cid:19)
.
p(t ) =
1
n
sin
T
n=1,3,5,···
This implies that only certain harmonics (i.e., frequency of sine
functions) are included in the spectrum of the plaintext, see Fig. 3.
In other words, if the attacker sets the EOFM filter to the funda-
mental frequency of p(t ), the logic carrying the decrypted plaintext
data can be found while all nodes carrying the ciphertext data will
generate no signal. Therefore, if the attacker seeks to identify the
plaintext carrying logic, she simply needs to transfer an encrypted
bitstream, manipulated to contain a certain frequency in its plain-
text, onto the device. If she carefully chooses a frequency, which is
unlikely to be present in other parts of the circuit, all gates carrying
the plaintext can then directly be identified by performing EOFM
at this frequency. Extracting the data from the logic gates found
thus can then be attempted using EOP which constitutes the last
part of the attack.
For all manipulated bitstreams that the attacker generates, she has
to keep in mind that certain aspects of the decryption core imple-
mentation might alter the induced frequency. Nevertheless, she
can solve this systematically, by creating a model of the device
and deducing the generated frequencies from it. As an example,
let us consider bitstream data containing alternating ones and ze-
ros, which is loaded into a serial input using a configuration clock
(CCLK). All logic gates carrying the serial data will then generate
FPGANVMEncrypted Bitstream…11100101101001…AES EncryptorAES DecryptorBitstream …10101010101010…ttff101010101010101010101010………………………Time domainFrequency domainc(t)p(t)∣C(f)∣∣P(f)∣Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1664Figure 4: Image of a Kintex 7 XC7K70T device in a flip-chip
BGA package [6]. The exposed silicon backside of the die can
be seen in the middle of the package.
an EOFM signal at the fundamental frequency of CCLK/2. However,
if we assume that at some point the same data is loaded onto a
32-bit parallel bus, the ones and zeroes are aligned on the individ-
ual bus lines and the signal on each line is static. In this case, no
fundamental frequency is generated at all, and therefore, the logic
gates of the data bus cannot be detected. However, if the attacker
takes this parallel bus into account, she can generate bitstream
data that contains 32 ones followed by 32 zeros. This leads to all
bus lines being toggled for every 32-bit word transferred on the
bus. If the input into the device still functions in a serial fashion
with the CCLK clock, the fundamental frequency of the parallel
bus lines is CCLK/2/32 or CCLK/64 and they can be detected using
EOFM. Using a model for prediction of frequencies and testing it
using EOFM allows the attacker to determine if her current model is
correct. Hence, she can gradually develop a model that considers all
implementation details relevant to EOFM into account and generate
a matching bitstream.
As a probable attack path is outlined, the only remaining aspect
of the approach is the estimation of the effort for developing and
executing the attack. As we expect the optical probing system to
be the most costly factor of the attack, we will use time tracking
software on it while attempting the attack discussed previously.
This will allow us to give a precise measure of the time needed on
the machine, for which in our scenario the attacker has to pay for.
Nonetheless, we do not try to assess the amount of time spent for
planning, programming and soldering, as we assume that this is not
a limiting factor for the attacker. If the attack is successful, we can
afterwards state the precise number of hours on the optical probing
setup that have been needed to develop the attack. Furthermore,
we can estimate how long it would take the attacker to execute
plaintext data extraction when she already has knowledge of all
relevant locations.
4 EXPERIMENTAL SETUP
This section describes the setup used to realize the approach dis-
cussed in Sect. 3.
(a)
(b)
Figure 5: (a) Reflected light overview image of the complete
XC7K70T FPGA die. (b) Zoomed-in view of (a), showing re-
peating FPGA logic fabric structures (left half) versus more
irregular dedicated function blocks (right half).
4.1 Device Under Test
We chose a Skoll Kintex 7 FPGA development board designed by
Numato Lab as the target platform. It contains a Xilinx XC7K70T
Kintex 7 FPGA manufactured with 28 nm technology in a flip-chip
Ball Grid Array (BGA) package, see Fig. 4. In this type of package,
the silicon die is inverted and placed frontside down. There is no
heat sink on top of the package, and therefore, we have direct access
to the silicon substrate on the backside of the chip. Based on our
measurements, the thickness of the substrate is about 700 µm. By
selecting a light source with a wavelength to which the silicon is
transparent (1.3 µm), an image of the die can be acquired without
any substrate thinning, see Fig. 5a. Hence, to conduct an optical
attack from the backside of the chip, no preparation is required.
4.2 Electrical Setup
The FPGA on the development board can be configured either di-
rectly via JTAG or by loading the bitstream data from an on-board
flash. The flash memory is connected via an SPI bus and has 128 Mbit
capacity. Programming of the flash memory is performed through
USB which is handled by an FTDI FT2232H chip. The USB con-
nection also supplies the board power. As the FPGA configuration
time is reduced significantly when using flash memory, we have
chosen this scheme for our experiments. The board is designed to
use the “Master SPI Configuration Mode”, see [28]. If this mode
is used with standard settings, the FPGA requests the data via a
1-bit wide SPI bus from the flash memory during configuration.
To do so, it generates and outputs a clock signal on its CCLK pin
which is used as the SPI bus master clock (Also called SCLK). It then
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1665issues a read instruction via the SPI bus and receives the bitstream
data through its data input (DIN) pin which is connected to the
“master in slave out” (MISO) pin of the flash [30]. The FPGA checks
the received data for validity, and if no errors are found during
configuration phase, it switches to user mode.
The only modifications to the development board are the following:
We soldered coaxial cables to the CCLK output and DIN of the
FPGA. This allowed us to monitor the data entering the FPGA
as well as provide robust access to the bitstream data clock. We
added an additional cable to the PROGRAM_B pin of the FPGA,
which if pulsed low triggers device reconfiguration. PROGRAM_B
can be controlled manually via a switch or automatically through
a function generator (Rigol DG4162). Additionally, we disabled
the on-board switched-mode power supply for the 1.0 V net and
replaced it with an external power supply (Agilent E3645A) as it
was generating increased noise.
This setup can then be used to trigger configuration repeatedly
using the function generator. In combination with a manipulated
bitstream, it allows for continuous fundamental frequency genera-
tion (see Sect. 3) for EOFM. For triggering EOP waveform acquisi-
tion, either the CCLK, PROGRAM_B, or even the DIN signal can
be used.
4.3 Optical Probing Setup
The optical contactless probing setup is provided by a Hamamatsu
PHEMOS-1000 failure analysis microscope. The equipment con-
sists of a suitable probing light source (Hamamatsu C13193) and
an optical probing preamplifier (Hamamatsu C12323). Moreover,
the setup uses an Advantest U3851 spectrum analyzer for EOFM
while EOP waveforms are acquired using a LeCroy WavePro 735Zi
oscilloscope. Three objective lenses were used during this work:
5x/0.14 NA, 20x/0.4 NA, 50x/0.71 NA. The 50x lens is equipped with
a correction ring for silicon substrate thickness. The light source
supplies the following maximum amounts of power onto the Device
Under Test (DUT) with each objective lens: 5x: 63 mW; 20x: 26 mW;