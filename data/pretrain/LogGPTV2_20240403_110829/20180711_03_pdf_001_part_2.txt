WAL Receiver
WAL Page
But we're not because EREALITY
Userspace:
Filesystem Cache Disk IO
WAL Receiver
WAL Page
And I lied to you. This:
Userspace:
Filesystem Cache Disk IO
WAL Receiver
WAL Page
...is actually this.
Userspace:
Filesystem Cache Disk IO
WAL Receiver
WAL Page
~5-10µs
~5-10µs
~5-10µs
~5-10µs
~5-10µs
And this isn't drawn to scale...
Userspace:
Filesystem Cache Disk IO
WAL Receiver
WAL Page
~5-10µs
~10-30ms
~5-10µs
~10-30ms
~5-10µs
Pixel Correct Timeline
Userspace:
Filesystem Cache Disk IO
WAL Receiver
WAL Page
5µs == 0.1pt
15ms == 300pt
Pixel Correct Timeline
Userspace:
Filesystem Cache Disk IO
WAL Receiver
WAL Page
5µs == 0.1pt
15ms == 300pt
And that RAID array you have? It's Idle.
Storage math:
150 iops/disk * 16 disks = ~2400 IOPS (if perfectly scheduled)
And that RAID array you have?
It's Idle.
• Storage math:
150 iops/disk * 16 disks = ~2400 IOPS
And that RAID array you have?
It's Idle.
• Storage math:
150 iops/disk * 16 disks = ~2400 IOPS
• Single WAL Receiver process issuing
pread(2)
• Max 150 IOPS or ~6% utilization of disks
• Busy primaries will overrun followers,
permanently
It's gunna be a while, m'kay?
Fixed It
© 2018 Joyent. All rights reserved. Joyent Confidential !36
Installation
1. Install Go
2. go get github.com/joyent/pg_prefaulter
3. Configure
4. Run
Configuration
[log]
# level can be set to "DEBUG", "INFO", "WARN", "ERROR", or "FATAL"
#level = "INFO"
[postgresql]
#pgdata = "pgdata"
#database = "postgres"
#host = "/tmp"
#password = ""
#port = 5432
#user = "postgres"
[postgresql.xlog]
#pg_xlogdump-path = "/usr/local/bin/pg_xlogdump"
Run: Primary
% env PGPASSWORD=`cat .pwfile` ./pg_prefaulter run --config pg_prefaulter-primary.toml
2018-05-31T11:59:01.413991821-04:00 |DEBU|  config-file=pg_prefaulter-primary.toml
2018-05-31T11:59:01.414189771-04:00 |DEBU| args: []
2018-05-31T11:59:01.414315299-04:00 |DEBU| starting gops(1) agent
2018-05-31T11:59:01.414475394-04:00 |DEBU| starting pprof endpoing agent pprof-port=4242
2018-05-31T11:59:01.414439447-04:00 |DEBU| flags postgresql.host=/tmp postgresql.pgdata=/Users/seanc/go/src/github.com/
joyent/pg_prefaulter/.pgdata_primary/ postgresql.poll-interval=1000 postgresql.port=5432 postgresql.user=postgres pos
tgresql.xlog.mode=pg postgresql.xlog.pg_xlogdump-path=/opt/local//lib/postgresql96/bin/pg_xlogdump
2018-05-31T11:59:01.415005542-04:00 |INFO| Starting pg_prefaulter pid=39865
2018-05-31T11:59:01.417634192-04:00 |DEBU| filehandle cache initialized filehandle-cache-size=2000 filehandle-cache-
ttl=300000 rlimit-nofile=7168
2018-05-31T11:59:01.426437960-04:00 |INFO| started IO worker threads io-worker-threads=3600
2018-05-31T11:59:01.454895027-04:00 |INFO| started WAL worker threads wal-worker-threads=4
2018-05-31T11:59:01.455209806-04:00 |DEBU| Starting wait
2018-05-31T11:59:01.455269901-04:00 |INFO| Starting pg_prefaulter agent commit=none date=unknown tag= version=dev
2018-05-31T11:59:01.498278613-04:00 |DEBU| established DB connection backend-pid=39867 version="PostgreSQL 9.6.3 on x86_64-
apple-darwin16.5.0, compiled by Apple LLVM version 8.1.0 (clang-802.0.42), 64-bit"
2018-05-31T11:59:01.500484662-04:00 |DEBU| found redo WAL segment from DB type=redo walfile=000000010000000000000001
2018-05-31T11:59:01.513085485-04:00 |INFO| skipping REDO record for database database=0 input="rmgr: Heap len (rec/
tot): 14/ 469, tx: 4, lsn: 0/01007750, prev 0/01007728, desc: HOT_UPDATE off 1 xmax 4 ; new off 3 x
max 0, blkref #0: rel 1664/0/1260 blk 0 FPW"
2018-05-31T11:59:01.513213488-04:00 |INFO| skipping REDO record for database database=0 input="rmgr: Heap len (rec/
tot): 2/ 337, tx: 0, lsn: 0/01007988, prev 0/01007950, desc: INPLACE off 1, blkref #0: rel 1664/0/
1262 blk 0 FPW"
2018-05-31T11:59:01.558219381-04:00 |INFO| skipping REDO record for database database=0 input="rmgr: Heap len (rec/
tot): 3/ 80, tx: 22, lsn: 0/0116B050, prev 0/0116B028, desc: INSERT+INIT off 1, blkref #0: rel 16$
4/0/1214 blk 0"
Run: Followers
% env PGPASSWORD=Kdr6zmvYOgWTKnol7HcULw91o15KhA6c ./pg_prefaulter run --config pg_prefaulter-follower.toml
--pprof-port=4243
2018-05-31T12:02:15.364191007-04:00 |DEBU|  config-file=pg_prefaulter-follower.toml
2018-05-31T12:02:15.364357715-04:00 |DEBU| args: []
2018-05-31T12:02:15.364448823-04:00 |DEBU| starting gops(1) agent
2018-05-31T12:02:15.364508931-04:00 |DEBU| starting pprof endpoing agent pprof-port=4243
2018-05-31T12:02:15.364556820-04:00 |DEBU| flags postgresql.host=/tmp postgresql.pgdata=/Users/seanc/go/
src/github.com/joyent/pg_prefaulter/.pgdata_follower/ postgresql.poll-interval=1000 postgresql.port=5433
postgresql.user=postgres postgresql.xlog.mode=pg postgresql.xlog.pg_xlogdump-path=/opt/local/lib/
postgresql96/bin/pg_xlogdump
2018-05-31T12:02:15.365189238-04:00 |INFO| Starting pg_prefaulter pid=40018
2018-05-31T12:02:15.367508589-04:00 |DEBU| filehandle cache initialized filehandle-cache-size=2000
filehandle-cache-ttl=300000 rlimit-nofile=7168
2018-05-31T12:02:15.376917068-04:00 |INFO| started IO worker threads io-worker-threads=3600
2018-05-31T12:02:15.377022308-04:00 |INFO| started WAL worker threads wal-worker-threads=4
2018-05-31T12:02:15.377063872-04:00 |DEBU| Starting wait
2018-05-31T12:02:15.377104519-04:00 |INFO| Starting pg_prefaulter agent commit=none date=unknown tag=
version=dev
2018-05-31T12:02:15.413981503-04:00 |DEBU| established DB connection backend-pid=40019 version="PostgreSQL
9.6.3 on x86_64-apple-darwin16.5.0, compiled by Apple LLVM version 8.1.0 (clang-802.0.42), 64-bit"
2018-05-31T12:02:15.414627296-04:00 |DEBU| found redo WAL segment from DB type=redo
walfile=000000010000000000000004
What's the voodoo?
© 2018 Joyent. All rights reserved. Joyent Confidential !41
pg_prefaulter(1) Design
1. Find WAL files
2. Process WAL files using pg_xlogdump(1)
3. Read the text output from pg_xlogdump(1)
4. Translate output into offsets into relations (i.e. tables/indexes)
5. Dispatch pread(2) calls in parallel
6. Warm the OS cache before the WAL apply process faults a page in
by itself
7. Dump all internal caches if process notices primary/follower change
8. Profit (or at least, fail less hard on failover or startup)
Finding WAL Files
1. Connect to PostgreSQL
2. Search for hints in process titles
:heart: pg_xlogdump(1)
• Platform and WAL file version agnostic way of extracting WAL
information
• Elided the need for writing a customer WAL parser
pg_prefaulter(1) Architecture
PostgreSQL
Proc Titles
System
WAL Receiver
pg_prefaulter(1) Catalogs
WAL File Scanner
WAL Filename Cache
pg_xlogdump(1)
pg_xlogdump(1)
IO Request Cache
WAL File
WAL File
WAL File
FD Cache WAL File
WAL File
WAL File
IO Thread 1
IO Thread 1
IO Thread 1
IO Thread 1
IO Thread 1
IO Thread N
pread(2)
OS
Requirements
1
PostgreSQL 9.6
(an update to support 10 and 11 is coming soon)
2
Go compiler to build the binary
3
pg_xlogdump(1)
Where to use pg_prefaulter(1)
1. On the primary
2. On all followers
3. Useful at startup for primaries and followers
4. Useful for promotion of followers
5. Useful on standalone PostgreSQL instances not using replication
6. Any database that you want to see start faster or where you care
about availability (i.e. everywhere, on all PG instances)
7. Any PostgreSQL database that replicates and VACUUMs or
pg_repack(1)s - i.e. generates lots of WAL activity
Don't be laggin' like this...
Be prefaultin' like this!
pg_prefaulter
deployed
Recovery Visualized
Falling behind at 0.8s/s
Falling behind at 0.2s/s Recovering at -0.6s/s
pg_prefaulter
deployed
Fully Recovered
Steady As She Goes
Thank you!
https://github.com/joyent/pg_prefaulter
We're Hiring!
@SeanChittenden
PI:EMAIL
PI:EMAIL
PI:EMAIL