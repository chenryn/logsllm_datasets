# Baby Cake
* * *
**Points:** 400 | **Solves:** 4/1789 | **Category:** Web
Get the shell plz!!!!! 13.230.134.135
Author: orange
Hint: This is not related to SSRF
* * *
## English
(原文作者还有一个印尼语版本，这里就没翻译)
### TL;DR要点
  * 我们可以在给定的Cake PHP Web的HTTP客户端访问任意URL。如果使用的方法是GET，高速缓存将被存储在`body.cache`和`headers.cache`文件，
  * 除了GET之外，我们可以使用其他方法，例如POST和`getQuery('data')`的数据。
  * 在内部实现中`\Cake\Http\Client\Request`，如果请求数据是一个数组，它将被`Cake\Http\FormData`处理。
  * 在`Cake\Http\FormData`里有类似`CURLOPT_SAFE_UPLOAD`的实现处理方式，其中如果`value`以`@`开头，就会从本地系统（Local File Disclosure）上传。
  * 我们可以控制`Cake\Http\FormData`里的`file_get_contentsin`的参数，这样我们可以使用`phar://`协议加上通过`body.cache`进行隐式反序列化后得到的payload。
  * 我们可以使用好用的小工具进行PHP对象注入来`RCE`; 例如，使用`Monolog`工具。
### Detailed Steps详细步骤
只有4支队队伍解决困难的“baby”赛题。Web站点是用Cake PHP制作的，[源代码](https://github.com/PDKT-Team/ctf/blob/master/hitcon2018/baby-cake/baby_cake.tgz
"源代码")在这。而我们的目标则是getshell。  
Web应用程序的主要代码逻辑是`src/Controller/PagesController.php`。
    headers = $headers;
            $this->body = $body;
        }
    }
    class PagesController extends AppController {
        private function httpclient($method, $url, $headers, $data) {
            $options = [
                'headers' => $headers, 
                'timeout' => 10
            ];
            $http = new Client();
            return $http->$method($url, $data, $options);
        }
        private function back() {
            return $this->render('pages');
        }
        private function _cache_dir($key){
            $ip = $this->request->getEnv('REMOTE_ADDR');
            $index = sprintf('mycache/%s/%s/', $ip, $key);
            return CACHE . $index;
        }
        private function cache_set($key, $response) {
            $cache_dir = $this->_cache_dir($key);
            if ( !file_exists($cache_dir) ) {
                mkdir($cache_dir, 0700, true);
                file_put_contents($cache_dir . "body.cache", $response->body);
                file_put_contents($cache_dir . "headers.cache", serialize($response->headers));
            }
        }
        private function cache_get($key) {
            $cache_dir = $this->_cache_dir($key);
            if (file_exists($cache_dir)) {
                $body   = file_get_contents($cache_dir . "/body.cache");
                $headers = file_get_contents($cache_dir . "/headers.cache");
                $body = "\n" . $body;
                $headers = unserialize($headers);
                return new DymmyResponse($headers, $body);
            } else {
                return null;
            }
        }
        public function display(...$path) {    
            $request  = $this->request;
            $data = $request->getQuery('data');
            $url  = $request->getQuery('url');
            if (strlen($url) == 0) 
                return $this->back();
            $scheme = strtolower( parse_url($url, PHP_URL_SCHEME) );
            if (strlen($scheme) == 0 || !in_array($scheme, ['http', 'https']))
                return $this->back();
            $method = strtolower( $request->getMethod() );
            if ( !in_array($method, ['get', 'post', 'put', 'delete', 'patch']) )
                return $this->back();
            $headers = [];
            foreach ($request->getHeaders() as $key => $value) {
                if (in_array( strtolower($key), ['host', 'connection', 'expect', 'content-length'] ))
                    continue;
                if (count($value) == 0)
                    continue;
                $headers[$key] = $value[0];
            }
            $key = md5($url);
            if ($method == 'get') {
                $response = $this->cache_get($key);
                if (!$response) {
                    $response = $this->httpclient($method, $url, $headers, null);
                    $this->cache_set($key, $response);                
                }
            } else {
                $response = $this->httpclient($method, $url, $headers, $data);
            }
            foreach ($response->headers as $key => $value) {
                if (strtolower($key) == 'content-type') {
                    $this->response->type(array('type' => $value));
                    $this->response->type('type');
                    continue;
                }
                $this->response->withHeader($key, $value);
            }
            $this->response->body($response->body);
            return $this->response;
        }
    }
当使用GET方法在Web上发出请求时带上`?url=`，Web会检查是否已为给定URL存储了缓存。如果没有，将使用内部HTTP客户端请求URL，然后将写入响应正文`body.cache`的内容，并写入序列化头文件（数组）的`headers.cache`。如果存在缓存，则应用程序将直接检索缓存内容。如果使用的方法不是GET，则不使用缓存。
请注意，函数中有一个`unserialize`在`cache_get($key)`里被调用，但该参数来自`header.cache`,并且之前使用`serialize`数组作为输入写入的内容，因此不能从此处进行PHP对象注入（除非PHP内部存在错误）。
The idea is, since we can write arbitrary data to `body.cache`, if a file
operation function with our controlled parameter is executed then we can use
`phar://` wrapper to do PHP Object Injection with `body.cache` as the payload.
It turns out that we can direct the application flow to `file_get_contents`
with our own parameter in the Cake PHP internal!  
我们的方案是这样。因为我们可以写任意数据到`body.cache`，如果执行带有受控参数的文件操作函数，那么我们可以使用`phar://`
来把`body.cache`的内容作为payload进行PHP对象注入。事实证明，我们可以`file_get_contents`在Cake
PHP内部使用我们的参数来引导应用程序运行！  
为了更好地理解漏洞，我们将把这些步骤分解为从请求到远程执行代码的流程。
#### Passing Request Data传递请求数据
    $request  = $this->request;
            $data = $request->getQuery('data');
            $url  = $request->getQuery('url');
            ...
            $scheme = strtolower( parse_url($url, PHP_URL_SCHEME) );
            if (strlen($scheme) == 0 || !in_array($scheme, ['http', 'https']))
                return $this->back();
            ..
            $method = strtolower( $request->getMethod() );
            if ( !in_array($method, ['get', 'post', 'put', 'delete', 'patch']) )
                return $this->back();
            ...
            if ($method == 'get') {
                $response = $this->cache_get($key);
                if (!$response) {
                    $response = $this->httpclient($method, $url, $headers, null);
                    $this->cache_set($key, $response);                
                }
            } else {
                $response = $this->httpclient($method, $url, $headers, $data);
            }
我们的请求被Web应用程序过滤，因此除了GET / POST / PUT / DELETE / PATCh 以外的方法，和`http://`
与`https://` 以外的协议，我们都不能使用。  
We can use POST/PUT/DELETE/PATCH so that `$response =
$this->httpclient($method, $url, $headers, $data);` is called. We can set the
`$data` variable using GET `?data=`.
我们的POST / PUT / DELETE / PATCH，注意 `$response = $this->httpclient($method,
$url, $headers, $data);`会被调用。我们可以`$data`写入GET请求里like this`?data=`。
    private function httpclient($method, $url, $headers, $data) {
            $options = [
                'headers' => $headers, 
                'timeout' => 10
            ];
            $http = new Client();
            return $http->$method($url, $data, $options);
        }
The web uses `Cake\Http\Client` and call the method based on `$method` from us
with `$url` and `$data` from us.
In this example, we will try to use POST method.  
网站使用了`Cake\Http\Client`并且它调用的方法基于我们的请求里的`$method`、`$url`和`$data`。
在这个例子中，我们将尝试使用POST方法。
#### Processing POST Request处理POST请求
看看 `vendor/cakephp/cakephp/src/Http/Client.php`.
    /**
         * Default configuration for the client.
         *
         * @var array
         */
        protected $_defaultConfig = [
            'adapter' => 'Cake\Http\Client\Adapter\Stream',
        ...
        public function __construct($config = [])
        {
            $this->setConfig($config);
            $adapter = $this->_config['adapter'];
            $this->setConfig('adapter', null);
            if (is_string($adapter)) {
                $adapter = new $adapter();
            }
            $this->_adapter = $adapter;
        ...
        /**
         * Do a POST request.
         *
         * @param string $url The url or path you want to request.
         * @param mixed $data The post data you want to send.
         * @param array $options Additional options for the request.
         * @return \Cake\Http\Client\Response
         */
        public function post($url, $data = [], array $options = [])
        {
            $options = $this->_mergeOptions($options);
            $url = $this->buildUrl($url, [], $options);
            return $this->_doRequest(Request::METHOD_POST, $url, $data, $options);
        }
        ...
        /**
         * Helper method for doing non-GET requests.
         *
         * @param string $method HTTP method.
         * @param string $url URL to request.
         * @param mixed $data The request body.
         * @param array $options The options to use. Contains auth, proxy, etc.
         * @return \Cake\Http\Client\Response
         */
        protected function _doRequest($method, $url, $data, $options)
        {
            $request = $this->_createRequest(
                $method,
                $url,
                $data,
                $options
            );
            return $this->send($request, $options);
        }
        ...
        /**
         * Creates a new request object based on the parameters.
         *
         * @param string $method HTTP method name.
         * @param string $url The url including query string.
         * @param mixed $data The request body.
         * @param array $options The options to use. Contains auth, proxy, etc.
         * @return \Cake\Http\Client\Request
         */
        protected function _createRequest($method, $url, $data, $options)
        {
            $headers = isset($options['headers']) ? (array)$options['headers'] : [];
            if (isset($options['type'])) {
                $headers = array_merge($headers, $this->_typeHeaders($options['type']));
            }
            if (is_string($data) && !isset($headers['Content-Type']) && !isset($headers['content-type'])) {
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            $request = new Request($url, $method, $headers, $data);
        ...
        }
我们的数据将被`post($url, $data = [], array $options =
[])`处理，然后传递给`_doRequest($method, $url, $data,
$options)`然后会调用`_createRequest($method, $ url, $data,
$options)`创建一个`$request`对象。在此函数中，对象创建为`Cake\Http\Client\Request`（`new
Request($url, $method, $headers, $data);`）。
接下来我们来看看`vendor/cakephp/cakephp/src/Http/Client/Request.php`代码。
    /**
         * Constructor
         *
         * Provides backwards compatible defaults for some properties.
         *
         * @param string $url The request URL
         * @param string $method The HTTP method to use.
         * @param array $headers The HTTP headers to set.
         * @param array|string|null $data The request body to use.
         */
        public function __construct($url = '', $method = self::METHOD_GET, array $headers = [], $data = null)
        {
            $this->validateMethod($method);
            $this->method = $method;
            $this->uri = $this->createUri($url);
            $headers += [
                'Connection' => 'close',
                'User-Agent' => 'CakePHP'
            ];
            $this->addHeaders($headers);
            $this->body($data);
        }
        ...
        /**
         * Get/set the body/payload for the message.
         *
         * Array data will be serialized with Cake\Http\FormData,
         * and the content-type will be set.