作者：[acez@长亭科技](https://zhuanlan.zhihu.com/p/27733895?utm_medium=social&utm_source=wechat_timeline&from=timeline&isappinstalled=1)  
中文翻译：[kelwin](http://weibo.com/kelwinyang)
#### 1\. 介绍
2017年3月，长亭安全研究实验室（Chaitin Security Research Lab）参加了 Pwn2Own
黑客大赛，我作为团队的一员，一直专注于 VMware Workstation Pro
的破解，并成功在赛前完成了一个虚拟机逃逸的漏洞利用。（很不）幸运的是，就在 Pwn2Own 比赛的前一天（3月14日），VMware
发布了一个新的版本，其中修复了我们所利用的漏洞。在本文中，我会介绍我们从发现漏洞到完成利用的整个过程。感谢@kelwin
在实现漏洞利用过程中给予的帮助，也感谢 ZDI 的朋友，他们近期也发布了一篇相关博客，正是这篇博文促使我们完成本篇 writeup。
本文主要由三部分组成：首先我们会简要介绍 VMware 中的 RPCI 机制，其次我们会描述本文使用的漏洞，最后讲解我们是如何利用这一个漏洞来绕过 ASLR
并实现代码执行的。
#### 2\. VMware RPCI 机制
VMware 实现了多种虚拟机（下文称为guest）与宿主机（下文称文host）之间的通信方式。其中一种方式是通过一个叫做 Backdoor
的接口，这种方式的设计很有趣，guest 只需在用户态就可以通过该接口发送命令。VMware Tools 也部分使用了这种接口来和 host
通信。我们来看部分相关代码（摘自 open-vm-tools 中的 lib/backdoor/backdoorGcc64.c ）：
    void  
    Backdoor_InOut(Backdoor_proto *myBp) // IN/OUT  
    {
       uint64 dummy;
       __asm__ __volatile__(
    #ifdef __APPLE__
            /*
             * Save %rbx on the stack because the Mac OS GCC doesn't want us to
             * clobber it - it erroneously thinks %rbx is the PIC register.
             * (Radar bug 7304232)
             */
            "pushq %%rbx"           "\n\t"
    #endif
            "pushq %%rax"           "\n\t"
            "movq 40(%%rax), %%rdi" "\n\t"
            "movq 32(%%rax), %%rsi" "\n\t"
            "movq 24(%%rax), %%rdx" "\n\t"
            "movq 16(%%rax), %%rcx" "\n\t"
            "movq  8(%%rax), %%rbx" "\n\t"
            "movq   (%%rax), %%rax" "\n\t"
            "inl %%dx, %%eax"       "\n\t"  /* NB: There is no inq instruction */
            "xchgq %%rax, (%%rsp)"  "\n\t"
            "movq %%rdi, 40(%%rax)" "\n\t"
            "movq %%rsi, 32(%%rax)" "\n\t"
            "movq %%rdx, 24(%%rax)" "\n\t"
            "movq %%rcx, 16(%%rax)" "\n\t"
            "movq %%rbx,  8(%%rax)" "\n\t"
            "popq          (%%rax)" "\n\t"
    #ifdef __APPLE__
            "popq %%rbx"            "\n\t"
    #endif
          : "=a" (dummy)
          : "0" (myBp)
          /*
           * vmware can modify the whole VM state without the compiler knowing
           * it. So far it does not modify EFLAGS. --hpreg
           */
          :
    #ifndef __APPLE__
          /* %rbx is unchanged at the end of the function on Mac OS. */
          "rbx",
    #endif
          "rcx", "rdx", "rsi", "rdi", "memory"
       );
    }
上面的代码中出现了一个很奇怪的指令 inl。在通常环境下（例如 Linux 下默认的 I/O
权限设置），用户态程序是无法执行I/O指令的，因为这条指令只会让用户态程序出错并产生崩溃。而此处这条指令产生的权限错误会被 host 上的
hypervisor 捕捉，从而实现通信。Backdoor 所引入的这种从 guest
上的用户态程序直接和host通信的能力，带来了一个有趣的攻击面，这个攻击面正好满足 Pwn2Own
的要求：“在这个类型（指虚拟机逃逸这一类挑战）中，攻击必须从guest的非管理员帐号发起，并实现在 host 操作系统中执行任意代码”。guest 将
0x564D5868 存入 `$eax`，I/O 端口号 0x5658 或 0x5659 存储在 `$dx`
中，分别对应低带宽和高带宽通信。其它寄存器被用于传递参数，例如$ecx的低16位被用来存储命令号。对于 RPCI 通信，命令号会被设为
`BDOOR_CMD_MESSAGE（=30）`。文件 `lib/include/backdoor_def.h` 中包含了一些支持的 backdoor
命令列表。host 捕捉到错误后，会读取命令号并分发至相应的处理函数。此处我省略了很多细节，如果你有兴趣可以阅读相关源码。
##### 2.1 RPCI
远程过程调用接口 RPCI（Remote Procedure Call
Interface）是基于前面提到的Backdoor机制实现的。依赖这个机制，guest 能够向 host 发送请求来完成某些操作，例如，拖放（Drag n
Drop）/复制粘贴（Copy Paste）操作、发送或获取信息等等。RPCI 请求的格式非常简单： 。例如 RPCI 请求info-get
guestinfo.ip 可以用来获取guest的IP地址。对于每个 RPCI 命令，在 vmware-vmx 进程中都有相关注册和处理操作。
需要注意的是有些RPCI命令是基于VMCI套接字实现的，但此内容已超出本文讨论的范畴。
#### 3\. 漏洞
花了一些时间逆向各种不同的 RPCI 处理函数之后，我决定专注于分析拖放（Drag n Drop，下面简称为 DnD ）和复制粘贴（Copy
Paste，下面简称为 CP）功能。这部分可能是最复杂的RPCI命令，也是最可能找到漏洞的地方。在深入理解的 DnD/CP
内部工作机理后，可以很容易发现，在没有用户交互的情况下，这些处理函数中的许多功能是无法调用的。DnD/CP
的核心功能维护了一个状态机，在无用户交互（例如拖动鼠标从 host 到 guest 中）情况下，许多状态是无法达到的。
我决定看一看 Pwnfest 2016
上被利用的漏洞，该漏洞在[这个](https://www.vmware.com/security/advisories/VMSA-2016-0019.html)
VMware 安全公告中有所提及。此时我的 idb 已经标上了很多符号，所以很容易就通过 bindiff
找到了补丁的位置。下面的代码是修补之前存在漏洞的函数（可以看出 `services/plugins/dndcp/dnddndCPMsgV4.c`
中有对应源码，漏洞依然存在于 [open-vm-tools](https://github.com/vmware/open-vm-tools) 的 git
仓库的 master 分支当中）：
    static Bool  
    DnDCPMsgV4IsPacketValid(const uint8 *packet,  
                            size_t packetSize)
    {
       DnDCPMsgHdrV4 *msgHdr = NULL;
       ASSERT(packet);
       if (packetSize payloadSize > DND_CP_PACKET_MAX_PAYLOAD_SIZE_V4) {
          return FALSE;
       }
       /* Binary size is not valid. */
       if (msgHdr->binarySize > DND_CP_MSG_MAX_BINARY_SIZE_V4) {
          return FALSE;
       }
       /* Payload size is more than binary size. */
       if (msgHdr->payloadOffset + msgHdr->payloadSize > msgHdr->binarySize) { // [1]
          return FALSE;
       }
       return TRUE;
    }
    Bool  
    DnDCPMsgV4_UnserializeMultiple(DnDCPMsgV4 *msg,  
                                   const uint8 *packet,
                                   size_t packetSize)
    {
       DnDCPMsgHdrV4 *msgHdr = NULL;
       ASSERT(msg);
       ASSERT(packet);
       if (!DnDCPMsgV4IsPacketValid(packet, packetSize)) {
          return FALSE;
       }
       msgHdr = (DnDCPMsgHdrV4 *)packet;
       /*
        * For each session, there is at most 1 big message. If the received
        * sessionId is different with buffered one, the received packet is for
        * another another new message. Destroy old buffered message.
        */
       if (msg->binary &&
           msg->hdr.sessionId != msgHdr->sessionId) {
          DnDCPMsgV4_Destroy(msg);
       }
       /* Offset should be 0 for new message. */
       if (NULL == msg->binary && msgHdr->payloadOffset != 0) {
          return FALSE;
       }
       /* For existing buffered message, the payload offset should match. */
       if (msg->binary &&
           msg->hdr.sessionId == msgHdr->sessionId &&
           msg->hdr.payloadOffset != msgHdr->payloadOffset) {
          return FALSE;
       }
       if (NULL == msg->binary) {
          memcpy(msg, msgHdr, DND_CP_MSG_HEADERSIZE_V4);
          msg->binary = Util_SafeMalloc(msg->hdr.binarySize);
       }
       /* msg->hdr.payloadOffset is used as received binary size. */
       memcpy(msg->binary + msg->hdr.payloadOffset,
              packet + DND_CP_MSG_HEADERSIZE_V4,
              msgHdr->payloadSize); // [2]
       msg->hdr.payloadOffset += msgHdr->payloadSize;
       return TRUE;
    }
对于 Version 4 的 DnD/CP 功能，当 guest 发送分片 DnD/CP 命令数据包时，host 会调用上面的函数来重组 guest 发送的
DnD/CP 消息。接收的第一个包必须满足 payloadOffset 为 0，binarySize 代表堆上分配的 buffer
长度。[1]处的检查比较了包头中的 binarySize，用来确保 payloadOffset 和 payloadSize
不会越界。在[2]处，数据会被拷入分配的 buffer
中。但是[1]处的检查存在问题，它只对接收的第一个包有效，对于后续的数据包，这个检查是无效的，因为代码预期包头中的 binarySize
和分片流中的第一个包相同，但实际上你可以在后续的包中指定更大的 binarySize 来满足检查，并触发堆溢出。
所以，该漏洞可以通过发送下面的两个分片来触发：
    packet 1{  
     ...
     binarySize = 0x100
     payloadOffset = 0
     payloadSize = 0x50
     sessionId = 0x41414141
     ...
     #...0x50 bytes...#
    }
    packet 2{  
     ...