### Cases Where SIGMAC Analysis Does Not Directly Apply

In certain scenarios, the SIGMAC analysis from Section 5 does not directly apply. We identify three such cases and discuss how to adapt the analysis for each.

#### Case 1: Encrypted CSM in TLS 1.3

In TLS 1.3, the CSM (Certificate Signature and MAC) message is always encrypted for identity protection. In a regular handshake, the encryption key, known as the "handshake transport key" (HTK), is derived from the same intermediate key used to derive \( K_a \) and \( K_s \). By the properties of the key derivation function, HTK is computationally independent from \( K_a \) and \( K_s \).

**Adaptation:**
- The simulator derives the HTK from the UA session key \( K \), similar to \( K_a \) and \( K_s \).
- The HTK is used to encrypt/decrypt the CSM message.
- Due to the independence of HTK from \( K_a \) and \( K_s \), the proof holds with minor adjustments.

#### Case 2: CSM Encrypted with Session Key \( K_s \)

In this case, the CSM message is encrypted using the same key \( K_s \) that the protocol outputs as the session key. This violates key indistinguishability because the client establishes the session key before it can be tested for indistinguishability, and by then, the key has already been used.

**Adaptation:**
- We adapt the SIGMAC analysis to this case, but at the cost of reducing the security guarantee.
- Instead of ensuring generic security of \( K_s \) (as induced by the regular indistinguishability property of key-exchange protocols), we show that \( K_s \) can be used as a key for an authenticated encryption scheme to implement secure channels.
- Our analysis is general and can be applied to different modelings of secure channels (e.g., [20, 15]) and other applications of the session key, as long as the security of such applications is not compromised by the use of \( K_s \) for encrypting CSM.
- We introduce the notion of functional tests (Section 6.1) to abstract out details of applications and implementations.

#### Case 3: Post-Handshake Client Authentication

In post-handshake client authentication, the client authenticates with a CSM message after the server and client have already exchanged application data (i.e., record layer communication in TLS) protected with the session key \( K_s \). The encrypted data exchange starts after the parties compute the session key but before the client authenticates.

**Adaptation:**
- This raises questions about the security claims and the level of protection provided to the pre-authentication data.
- Since the handshake protocol without client authentication provides unilateral authentication, the data gets the assurance of unilateral authentication (server authentication in the case of TLS).
- However, the SIGMAC analysis showing that the CSM message upgrades the protocol to mutual authentication (MA) security no longer holds once \( K_s \) is used to protect data before CSM is delivered and verified.
- We show that the CSM message does provide mutual authentication of the exchanged data, but only in the sense of secure channels, and only after the CSM message is verified by the server.
- The parties get the guarantee (delayed for the server) that only the named party that passed authentication can authenticate and decrypt the exchanged information, including data sent before client authentication.
- Our treatment via functional tests adds generality and allows us to abstract the details of secure channels modeling and implementation.

### Combining the Last Two Cases

Combining the last two cases, we obtain secure channels security for the scenario where, in addition to the exchange of pre-authentication data, the post-handshake CSM message itself is encrypted with the session key (Section 6.3.1).

### Functional Queries and Functional Tests

To address these scenarios, we introduce simple adaptations to the SIGMAC compiler analysis. Specifically, we use functional queries and functional tests to model the desired functionality.

**Functional Family \( F \):**
- Let \( F \) be a parametrized family of (possibly randomized) functions that accept a single input, referred to as a session key.
- Given a parameter \( p \) and a session key \( k \), \( f_p \) denotes a member of \( F \) and \( f_p(k) \) denotes an output distribution or a specific value sampled from that distribution.

**Functional Queries and Tests:**
- We modify the CK model of key exchange security [9] by adding a new adversarial query type, called a functional query \( FQuery \), associated with the functional family \( F \).
- The attacker \( A_F \) can issue \( FQuery \) against any session eligible for a Reveal query and also against the test session.
- The test session experiment is changed: a test session can be chosen under the same rules as in the CK model, but the regular indistinguishability-based Test query is replaced with a functional test \( FTest \).
- \( FTest \) is an arbitrary test taking the form of an interactive game between a challenger and the attacker \( A_F \), where the challengerâ€™s input is the test session key and a random bit \( b \), and the output of \( A_F \) is a bit \( b' \). \( A_F \) wins if \( b = b' \).
- The only condition on a functional test is that if one replaces the input to the challenger with a random independent key, the advantage of \( A_F \) in winning the game is negligible.

**Functional CK Model:**
- The security definition in this functional model remains the same as in the original CK model, except that the notion of winning for the attacker changes from the indistinguishability Test experiment to a given functional test \( FTest \).
- We refer to this notion as Functional CK security and denote the MA and UA variants by F-MA and F-UA.

### SIGMAC with Encrypted CSM

We consider a variant of the SIGMAC compiler where the CSM message is encrypted with the session key \( K_s \) from the same session to which the CSM message belongs. We show that any application whose security can be defined via a functional test as in Section 6.1, and where the encryption and decryption of CSM are included in the functional queries of the model, enjoys mutual authentication in the sense of F-MA.

**Application:**
- Instantiating our abstract formalism with a secure channels model (e.g., [20, 15]), we get that the session key validated via SIGMAC with encrypted CSM implements secure channels with mutual authentication.
- It is assumed that the secure channels mechanism enforces domain separation between the encryption of CSM and encryption of application data, for example, as the ACCE model does via stateful encryption.

**Proof:**
- Let \( \Pi_2 \) be a protocol resulting from applying SIGMAC with encrypted CSM to a UA-secure \( \Pi_1 \) protocol.
- The encryption of CSM is generated by the client, and the corresponding decryption and verification are performed by the receiving server.
- We prove this modified compiler following the original proof of Theorem 3 but replace the regular indistinguishability-based security test with a functional test as defined in Section 6.1.
- We assume Encrypt and Decrypt operations as part of the allowed functional queries.

**Lemma 7:**
- The SIGMAC compiler with the CSM message encrypted under the session key \( K_s \) and applied to a treplication-secure protocol \( \Pi_1 \) ensures F-MA security.

This approach allows us to handle the identified cases while maintaining the security guarantees of the SIGMAC compiler.