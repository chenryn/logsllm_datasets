• insert into tbl (grpid, userid, dt) values () on conflict (grpid, dt)
• do update set
• cnt=tbl.cnt+1,
• hll_userid= case tbl.cnt when 1 then hll_add(hll_add(tbl.hll_userid, hll_hash_integer(tbl.userid)),
hll_hash_integer(excluded.userid)) else hll_add(tbl.hll_userid, hll_hash_integer(excluded.userid))
end ;
案例 流式实时估算
3-
滑窗分析 与 都适用
- RDS PG HDB PG
• 估值滑窗 (最近 7天 UV)
– SELECT date, #hll_union_agg(users) OVER seven_days
FROM daily_uniques WINDOW seven_days AS (ORDER
BY date ASC ROWS 6 PRECEDING);
• 统计滑窗 (最近 7天精确 UV， SUM， AVG。。。 )
– SELECT date, count(distinct users) OVER seven_days,
sum(x) OVER seven_days, avg(x) OVER seven_days
FROM daily_uniques WINDOW seven_days AS (ORDER
BY date ASC ROWS 6 PRECEDING);
滑窗分析 与 都适用
- RDS PG HDB PG
• 估值滑窗 (最近 7天 UV)
– SELECT date, #hll_union_agg(users) OVER seven_days
FROM daily_uniques WINDOW seven_days AS
(ORDER BY date ASC ROWS 6 PRECEDING);
• 统计滑窗 (最近 7天精确 UV， SUM， AVG。。。 )
– SELECT date, count(distinct users) OVER seven_days,
sum(x) OVER seven_days, avg(x) OVER seven_days
FROM daily_uniques WINDOW seven_days AS
(ORDER BY date ASC ROWS 6 PRECEDING);
估值计算
• 求UV（唯一值）
• 求UV增量（唯一值增量）
• HLL估值插件
• https://github.com/digoal/blog/blob/master/201608/20160825_02.md
毫秒级
日UV
select count(distinct uid) from t where dt='2017-11-11';
select # hll_uid from t where dt='2017-11-11';
滑动分析：最近N天UV
SELECT date, #hll_union_agg(users) OVER seven_days
FROM daily_uniques WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING);
每日流失UV
SELECT date, (#hll_union_agg(users) OVER two_days) -#users AS lost_uniques
FROM daily_uniques WINDOW two_days AS (ORDER BY date ASC ROWS 1 PRECEDING);
案例 流式阅后即焚
4-
• 流式处理，高并发写入，快速消费处理。
• 处理后的数据被删除。
可靠、事务、原
• 要求：
子、
– 数据快速写入 低延迟、大吞吐
– 数据写入后必须持久化
– 快速消费被写入的记录（例如订阅，或者用于业务上的流式
计算，计算结果保留）
– 消费和计算必须在一个事务完成
– https://github.com/digoal/blog/blob/master/201711/20171107
_32.md
案例 实时监控
4-
• 流式处理应用
业务举例：
函数计算:
plpgsql, 实时报表、实时在线
plpython,
数、实时大屏监控、
pljava
实时UV估算。
物联网数据、
FEED数据
JSON非结构
化 1、写入确保持久化。
2、消费、处理在事务中完
成
3、无需担心多消费或少消
费的问题
4、实例DOWN机自动恢复。
https://github.com/digoal/blog/blob/master/201711/20171123_02.md
案例 流式阅后即焚
4-
• 流式处理应用
• create table tbl (id int, info jsonb);
具备
• insert into tbl ....;
一致性、原子性。
• 异步处理
• UDF写法，UDF内实现阅后即焚
• CTE写法，单个SQL实现阅后即焚
– with t1 as (delete from tbl where ctid = any (array(select ctid from tbl limit
10)) returning *)
– select pg_notify('channel_name', values) from t1;
– -- deal with t1's values;
案例 实时画像
5-
• 经营分析系统、决策系统
– https://github.com/digoal/blog/blob/master/201711/20171126_01.md
阅后
即焚
案例 架构设计、代码、实操手册
-
• https://github.com/digoal/blog/blob/master/201711/20171111_01.md
• https://github.com/digoal/blog/blob/master/201711/20171107_28.md
• https://github.com/digoal/blog/blob/master/201711/20171107_32.md
• https://github.com/digoal/blog/blob/master/201711/20171107_33.md
• https://github.com/digoal/blog/blob/master/201608/20160827_01.md
• https://github.com/digoal/blog/blob/master/201711/20171123_02.md
• https://github.com/digoal/blog/blob/master/201711/20171126_01.md
• pipelinedb集群
• https://github.com/digoal/blog/blob/master/201803/20180314_04.md
集群架构 插件化
PipelineDB ( )
集群架构 路由策略 读优化
PipelineDB - CV ( )
集群架构 路由策略 写优化
PipelineDB - CV ( )
集群架构 合并 写优化
PipelineDB - CV shard ( )
集群架构 ，
PipelineDB - HA LB
秒杀
Case12 ( )
• 超轻锁 (advisory LOCK) 解决高并发锁竞争问题
– 手段： 在CPU运算发现行锁之前就知道是不是有冲突，大大缩短CPU计算资源，等待资源
传统-行锁弊端
1. 无效等待多
2. 无效等待用户
长时间占用会话资源 热点行
3. 发现锁冲突的代码路径长
需要进行大量CPU运算
250000 231376 会话1
update
200000
持锁
未优化
150000
100000 66630 nowait优化 无效
50000 2855 advisory lock优化 等待 其他会话
0
等待行锁
TPS
代替行锁 秒杀
ADLock -
• 高并发扣减库存
• 高并发争抢锁
– update tbl set x=x where id=? and pg_try_advisory_xact_lock(id) returning *;
单条记录被并发更
新，吞吐23万
APP redis qps。
1. 连接redis判断是否还有库存
2. 有，去PG扣减(ADLock)。没有则直接返回。
PostgreSQL 3. 扣减成功，去redis更新库存
案例 架构设计、代码、实操手册
-
• https://github.com/digoal/blog/blob/master/
201711/20171107_31.md
• https://github.com/digoal/blog/blob/master/
201611/20161117_01.md
• https://github.com/digoal/blog/blob/master/
201509/20150914_01.md
共享 多表 实时分析
Case13 xxx( JOIN )
• ltree 树类型、消除 JOIN
– (空间换时间、物化视图)
分析查询、多
表关联、速度
慢
树类型 索引
ltree + R-T
• ltree
– https://www.postgresql.org/docs/10/static/ltree.html
– SELECT path FROM test WHERE path ~ '*.Astronomy.*';
GiST
– SELECT path FROM test WHERE path ~ '*.!pictures@.*.Astronomy.*';
R-Tree索引
– SELECT path FROM test WHERE path @ 'Astro*% & !pictures@';
– SELECT path FROM test WHERE path @ 'Astro* & !pictures@';
共享 多表 实时分析
Case xxx( JOIN )
• ltree 树类型、消除 JOIN
– (空间换时间、物化视图)
前后对比：
其他表，JOIN补齐
员工表树结构
物化补齐
物化、树化
分析毫秒级。
流式实时补齐，
并行计算，空间
换时间。
案例 架构设计、代码、实操手册
-
• https://github.com/digoal/blog/blob/master/
201709/20170923_01.md
四、混合负载案例
• B2B-AE 实时营销系统
• 天猫 -招商平台
• HELLOBIKE
• IoT - 边缘计算
实时营销系统
B2B-AE
消费 高并发 大量数据
业务系统 队列 商品状态 写入 商品画像 实时多维度圈选
实时更新 圈选
键值更新 透视
增量
业务库
PG
B2B-AE实时营销库
大宽表、实时、批量、分析
大数据量
批量合并
更新、写入
OSS海量存储 ODPS(海量数据调度计算)
画像
PostgreSQL
• HTAP(OLTP、OLAP) – 全文检索、模糊查询、相似查询
• OLAP – 时空、任意字段组合条件查询
– GPU、FPGA加速 – 流计算、估值计算
– 多核并行计算 – 图式计算、搜索
– 复杂场景SQL，处理能力强悍 – 向量计算、索引加速搜索
• OLTP • 人脸识别、图像特征、推荐、指纹、基
因匹配
– SQL标准覆盖全面
– 索引接口丰富（内置已达8种） – IoT 时序数据、时序索引、加速搜索
• Oracle兼容 – pl/xxx 数据库函数式编程
(java,python,lua,perl,tcl,v8,... ...)
• 全栈数据库
– MPP (GPDB)
– 插件化
– SQL on Hadoop (HAWQ)
– 开放自定义接口（函数、类型、操作符、索
引、存储引擎、。。。） – sharding (citus)
– NoSQL（数组、JSON、XML、KV） – 可靠性 -同步复制(quorum based 多副本)
– GIS，空间数据，路由，栅格，TOP，轨迹，
多媒体，点云
产品画像
POLARDB PG
时空、GIS、图像
OLTP、OLAP、
文本、时序、
创
SMP并行计算、
向量相似、图谱
新
GPU并行计算、
流计算、异构、
能
实时分析、 混合
机器学习、
力
多模
JIT、向量计算
多维计算、shard
负载
Oracle
企业级
商 稳定性
兼容
用 可靠性 社区版：orafce
能 可用性 阿里云版：PPAS
力 安全、弹性
产品改进
• 内核改进点
– 事务号32位，改成64或引入其他tuple BIT向下兼容
• https://postgrespro.com/products/postgrespro/enterprise
– 旧版本与新版本在同堆
• https://github.com/EnterpriseDB/zheap
• 功能增强点
– https://github.com/digoal/blog/blob/master/201710/2017
1017_01.md
– 列存、内存表、全局临时表 ...
应用案例
HDB PG
• 双十一业务，实时复杂 OLAP
• 实时游戏运营， JSON破解 FEED难题
• 实时画像， roaring bitmap化繁为简
• 新零售，时空数据实时分析
• 数据大批量处理 +输出， OSS外表接口承载大流
量
• 广告分析， madlib缩短开发周期
准实时订单分析系统 双十一业务
Case1 ( )
30TB+数据；
单表100亿级；
5张表JOIN，秒级响应。
实时订单分析系统 双十一业务
Case1 ( )
同时兼具OLTP+OLAP：
1、大吞吐实时写入
2、海量实时分析（MPP架构）
3、行列混合存储
4、任意JOIN、Group by、Distinct
5、GIS数据管理
6、JSON
7、HLL估值
8、全文检索
9、多值(array,k-v)类型
10、游标
11、传统数据库ACID标准
12、MADlib机器学习
案例 架构设计、代码、实操手册
-
• 案例
• https://github.com/digoal/blog/blob/master/201707/2017
0728_01.md
• https://github.com/digoal/blog/blob/master/201711/2017
1111_01.md
• OSS外部表
– RDS PG OSS 外部表文档：
https://help.aliyun.com/knowledge_detail/43352.html
– HDB PG OSS 外部表文档：
https://help.aliyun.com/document_detail/35457.html
阿里游戏 单款游戏日增量亿 级 动态分析
Case2 - +
• 需求：
• JSON内字段检索、索引、统计
支持列存储
• UDF -JSON内容分裂
分区、分片
实时写入动态结构 JSON 索引
通过UDF转换为：
背景：
固定条件字段+其他JSON字段
JSON很大，
游戏场
包含一些标
景埋点
准列、需要 INSERT、
feed实 JSON A + B + JSON
提取拆分、
COPY
时变化
提高统计性
能、分区、
OSS
列存