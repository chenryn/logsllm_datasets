### 优化后的文本

#### 插入和更新数据
```sql
INSERT INTO tbl (grpid, userid, dt) VALUES () 
ON CONFLICT (grpid, dt) 
DO UPDATE SET 
    cnt = tbl.cnt + 1,
    hll_userid = CASE 
        WHEN tbl.cnt = 1 THEN hll_add(hll_add(tbl.hll_userid, hll_hash_integer(tbl.userid)), hll_hash_integer(excluded.userid))
        ELSE hll_add(tbl.hll_userid, hll_hash_integer(excluded.userid))
    END;
```

#### 案例：流式实时估算
- **滑窗分析**：适用于 RDS PG 和 HDB PG。
  - **估值滑窗（最近7天 UV）**
    ```sql
    SELECT date, #hll_union_agg(users) OVER seven_days
    FROM daily_uniques
    WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING);
    ```
  - **统计滑窗（最近7天精确 UV，SUM，AVG 等）**
    ```sql
    SELECT date, 
           count(DISTINCT users) OVER seven_days, 
           sum(x) OVER seven_days, 
           avg(x) OVER seven_days
    FROM daily_uniques
    WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING);
    ```

#### 估值计算
- **求UV（唯一值）**
- **求UV增量（唯一值增量）**
- **HLL估值插件**：[参考链接](https://github.com/digoal/blog/blob/master/201608/20160825_02.md)

#### 毫秒级日UV
```sql
SELECT count(DISTINCT uid) FROM t WHERE dt = '2017-11-11';
SELECT # hll_uid FROM t WHERE dt = '2017-11-11';
```

#### 滑动分析：最近N天UV
```sql
SELECT date, #hll_union_agg(users) OVER seven_days
FROM daily_uniques
WINDOW seven_days AS (ORDER BY date ASC ROWS 6 PRECEDING);
```

#### 每日流失UV
```sql
SELECT date, (#hll_union_agg(users) OVER two_days) - #users AS lost_uniques
FROM daily_uniques
WINDOW two_days AS (ORDER BY date ASC ROWS 1 PRECEDING);
```

#### 案例：流式阅后即焚
- **需求**：
  - 数据快速写入，低延迟、大吞吐。
  - 数据写入后必须持久化。
  - 快速消费被写入的记录（例如订阅，或者用于业务上的流式计算，计算结果保留）。
  - 消费和计算必须在一个事务完成。
- [参考链接](https://github.com/digoal/blog/blob/master/201711/20171107_32.md)

#### 实时监控
- **流式处理应用**：
  - 函数计算：plpgsql, plpython, pljava。
  - 业务举例：实时报表、实时在线数、实时大屏监控、实时UV估算。
  - 物联网数据、FEED数据。
  - JSON非结构化数据。
- **要求**：
  1. 写入确保持久化。
  2. 消费、处理在事务中完成。
  3. 无需担心多消费或少消费的问题。
  4. 实例DOWN机自动恢复。
- [参考链接](https://github.com/digoal/blog/blob/master/201711/20171123_02.md)

#### 流式阅后即焚
- **创建表**：
  ```sql
  CREATE TABLE tbl (id INT, info JSONB);
  ```
- **插入数据**：
  ```sql
  INSERT INTO tbl ...;
  ```
- **一致性、原子性**。
- **异步处理**。
- **UDF写法**，UDF内实现阅后即焚。
- **CTE写法**，单个SQL实现阅后即焚：
  ```sql
  WITH t1 AS (DELETE FROM tbl WHERE ctid = ANY (ARRAY(SELECT ctid FROM tbl LIMIT 10)) RETURNING *)
  SELECT pg_notify('channel_name', values) FROM t1;
  -- deal with t1's values;
  ```

#### 实时画像
- **经营分析系统、决策系统**。
- [参考链接](https://github.com/digoal/blog/blob/master/201711/20171126_01.md)

#### 架构设计、代码、实操手册
- [多个参考链接](https://github.com/digoal/blog/blob/master/201711/20171111_01.md)
- PipelineDB集群相关文档。

#### 高并发扣减库存
- **高并发争抢锁**：
  ```sql
  UPDATE tbl SET x = x WHERE id = ? AND pg_try_advisory_xact_lock(id) RETURNING *;
  ```

#### 共享多表实时分析
- **ltree树类型**：消除JOIN，提高查询速度。
- [参考链接](https://www.postgresql.org/docs/10/static/ltree.html)

#### 混合负载案例
- **B2B-AE实时营销系统**：
  - 大宽表、实时、批量、分析。
  - 大数据量批量合并。
  - 更新、写入OSS海量存储。
  - ODPS（海量数据调度计算）。

#### 应用案例
- **双十一业务，实时复杂OLAP**。
- **实时游戏运营**：JSON破解FEED难题。
- **实时画像**：roaring bitmap化繁为简。
- **新零售**：时空数据实时分析。
- **广告分析**：madlib缩短开发周期。

#### 准实时订单分析系统
- **双十一业务**：
  - 30TB+数据，单表100亿级。
  - 5张表JOIN，秒级响应。
  - 同时兼具OLTP+OLAP。
  - 大行列混合存储。
  - 任意JOIN、Group by、Distinct。
  - GIS数据管理，JSON，HLL估值等。

#### OSS外部表
- **RDS PG OSS外部表文档**：[参考链接](https://help.aliyun.com/knowledge_detail/43352.html)
- **HDB PG OSS外部表文档**：[参考链接](https://help.aliyun.com/document_detail/35457.html)

#### 阿里游戏动态分析
- **需求**：
  - JSON内字段检索、索引、统计。
  - 支持列存储。
  - UDF - JSON内容分裂。
  - 分区、分片。
  - 实时写入动态结构JSON索引。
- **背景**：游戏场景埋点，包含一些标准列，需要提取拆分，提高统计性能，分区、列存。