## 微服务治理平台的基本功能你可能先会问，到底什么是微服务治理平台？根据我的理解，微服务治理平台就是**与服务打交道的统一入口**，无论是开发人员还是运维人员，都能通过这个平台对服务进行各种操作，比如开发人员可以通过这个平台对服务进行降级操作，运维人员可以通过这个平台对服务进行上下线操作，而不需要关心这个操作背后的具体实现。接下来我就结合下面这张图，给你介绍一下一个微服务治理平台应该具备哪些基本功能。![](Images/95c193fb70e57b401aad804db6cda9f9.png){savepage-src="https://static001.geekbang.org/resource/image/f5/5d/f5aa7ddbd2c0997839d3f292ea89975d.png"}**1. 服务管理**通过微服务治理平台，可以调用注册中心提供的各种管理接口来实现服务的管理。根据我的经验，服务管理一般包括以下几种操作：-   服务上下线。当上线一个新服务的时候，可以通过调用注册中心的服务添加接口，新添加一个服务，同样要下线一个已有服务的时候，也可以通过调用注册中心的服务注销接口，删除一个服务。-   节点添加 /    删除。当需要给服务新添加节点时候，可以通过调用注册中心的节点注册接口，来给服务新增加一个节点。而当有故障节点出现或者想临时下线一些节点时，可以通过调用注册中心的节点反注册接口，来删除节点。-   服务查询。这个操作会调用注册中心的服务查询接口，可以查询当前注册中心里共注册了多少个服务，每个服务的详细信息。-   服务节点查询。这个操作会调用注册中心的节点查询接口，来查询某个服务下一共有多少个节点。``{=html}**2. 服务治理**通过微服务治理平台，可以调用配置中心提供的接口，动态地修改各种配置来实现服务的治理。根据我的经验，常用的服务治理手段包括以下几种：-   限流。一般是在系统出现故障的时候，比如像微博因为热点突发事件的发生，可能会在短时间内流量翻几倍，超出系统的最大容量。这个时候就需要调用配置中心的接口，去修改非核心服务的限流阈值，从而减少非核心服务的调用，给核心服务留出充足的冗余度。-   降级。跟限流一样，降级也是系统出现故障时的应对方案。要么是因为突发流量的到来，导致系统的容量不足，这时可以通过降级一些非核心业务，来增加系统的冗余度；要么是因为某些依赖服务的问题，导致系统被拖慢，这时可以降级对依赖服务的调用，避免被拖死。-   切流量。通常为了服务的异地容灾考虑，服务部署在不止一个 IDC    内。当某个 IDC 因为电缆被挖断、机房断电等不可抗力时，需要把故障 IDC    的流量切换到其他正常    IDC，这时候可以调用配置中心的接口，向所有订阅了故障 IDC    服务的消费者下发指令，将流量统统切换到其他正常    IDC，从而避免服务消费者受影响。**3. 服务监控**微服务治理平台一般包括两个层面的监控。一个是整体监控，比如服务依赖拓扑图，将整个系统内服务间的调用关系和依赖关系进行可视化的展示；一个是具体服务监控，比如服务的QPS、AvgTime、P999等监控指标。其中整体监控可以使用服务追踪系统提供的服务依赖拓扑图，而具体服务监控则可以通过Grafana 等监控系统 UI 来展示。**4. 问题定位**微服务治理平台实现问题定位，可以从两个方面来进行。一个是宏观层面，即通过服务监控来发觉异常，比如某个服务的平均耗时异常导致调用失败；一个是微观层面，即通过服务追踪来具体定位一次用户请求失败具体是因为服务调用全链路的哪一层导致的。**5. 日志查询**微服务治理平台可以通过接入类似 ELK的日志系统，能够实时地查询某个用户的请求的详细信息或者某一类用户请求的数据统计。**6. 服务运维**微服务治理平台可以调用容器管理平台，来实现常见的运维操作。根据我的经验，服务运维主要包括下面几种操作：-   发布部署。当服务有功能变更，需要重新发布部署的时候，可以调用容器管理平台分批按比例进行重新部署，然后发布到线上。-   扩缩容。在流量增加或者减少的时候，需要相应地增加或者缩减服务在线上部署的实例，这时候可以调用容器管理平台来扩容或者缩容。
## 如何搭建微服务治理平台微服务治理平台之所以能够实现上面所说的功能，关键之处就在于它能够封装对微服务架构内的各个基础设施组件的调用，从而对外提供统一的服务操作API，而且还提供了可视化的界面，以方便开发人员和运维人员操作。根据我的经验，一个微服务治理平台的组成主要包括三部分：Web Portal 层、API层以及数据存储 DB 层，结合下面这张图我来详细讲解下每一层该如何实现。![](Images/6e017d255f48e972899192369e7c08d2.png){savepage-src="https://static001.geekbang.org/resource/image/60/e6/6092c301cfe5dc69abd3825e8ceedbe6.png"}**第一层：WebPortal**。也就是微服务治理平台的前端展示层，一般包含以下几个功能界面：-   服务管理界面，可以进行节点的操作，比如查询节点、删除节点。![](Images/ff47aaf309bae79637baa604af29c243.png){savepage-src="https://static001.geekbang.org/resource/image/8a/49/8a21ed33fa1dc550dbc08c5cad993949.png"}-   服务治理界面，可以进行服务治理操作，比如切流量、降级等，还可以查看操作记录。![](Images/8e7d8e1d21c1baa91065f7d529fd6f7b.png){savepage-src="https://static001.geekbang.org/resource/image/0b/84/0b2688db42e3c9b29f19d46eed0aae84.png"}-   服务监控界面，可以查看服务的详细信息，比如    QPS、AvgTime、耗时分布区间以及 P999 等。![](Images/f566eab597f2bd71c881709e416eb872.png){savepage-src="https://static001.geekbang.org/resource/image/07/7b/078d10be60b8a6a804a709c7e896167b.png"}-   服务运维界面，可以执行服务的扩缩容操作，还可以查看扩缩容的操作历史。![](Images/eeadfd1f40c07a16ea239f5cb8dca73a.png){savepage-src="https://static001.geekbang.org/resource/image/be/52/be0ab5c9ba97efa0938a1eab10492a52.png"}**第二层，API**。也就是微服务治理平台的后端服务层，这一层对应的需要提供Web Portal 接口以调用，对应的一般包含下面几个接口功能：-   添加服务接口。这个接口会调用注册中心提供的服务添加接口来新发布一个服务。-   删除服务接口。这个接口会调用注册中心提供的服务注销接口来下线一个服务。-   服务降级 / 限流 /    切流量接口。这几个接口会调用配置中心提供的配置修改接口，来修改对应服务的配置，然后订阅这个服务的消费者就会从配置中心拉取最新的配置，从而实现降级、限流以及流量切换。-   服务扩缩容接口。这个接口会调用容器平台提供的扩缩容接口，来实现服务的实例添加和删除。-   服务部署接口。这个接口会调用容器平台提供的上线部署接口，来实现服务的线上部署。**第三层，DB**。也就是微服务治理平台的数据存储层，因为微服务治理平台不仅需要调用其他组件提供的接口，还需要存储一些基本信息，主要分为以下几种：-   用户权限。因为微服务治理平台的功能十分强大，所以要对用户的权限进行管理。一般可以分为可浏览、可更改以及管理员三个权限。而且还需要对可更改的权限进行细分，按照不同服务的负责人进行权限划分，一个人只能对它负责的服务的进行更改操作，而不能修改其他人负责的服务。-   操作记录。用来记录下用户在平台上所进行的变更操作，比如降级记录、扩缩容记录、切流量记录等。-   元数据。主要是用来把服务在各个系统中对应的记录映射到微服务治理平台中，统一进行管理。比如某个服务在监控系统里可能有个特殊标识，在注册中心里又使用了另外一个标识，为了统一就需要在微服务治理平台统一进行转换，然后进行数据串联。
## 总结可以说一个微服务框架是否成熟，除了要看它是否具备服务治理能力，还要看是否有强大的微服务治理平台。因为微服务治理平台能够将多个系统整合在一起，无论是对开发还是运维来说，都能起到事半功倍的作用，这也是当前大部分开源微服务框架所欠缺的部分，所以对于大部分团队来说，都需要自己搭建微服务治理平台。不过好在微服务治理平台本身的架构并不复杂，你可以根据自己的实际需要，来决定微服务治理平台具备哪些功能。
## 思考题除了我上面列举的一些功能以外，你觉得微服务治理平台还可以包含哪些功能？说说你的理由。欢迎你在留言区写下自己的思考，与我一起讨论。![](Images/b10ed5e0f291705aa335d48abe58cc5d.png){savepage-src="https://static001.geekbang.org/resource/image/9c/be/9ca973ad0a032832bc5d90c377ffe7be.jpg"}
# 24 \| 微服务架构该如何落地？专栏前面的文章我给你讲解了微服务架构的各个组成部分，以及实践过程中可能遇到的问题和对应的解决方案，到这里你应该对微服务架构有了一个完整的认识。那么在实际项目中，如何让一个团队把我们所学的微服务架构落地呢？今天我就结合自己的经验，定位在中小规模团队，[谈谈微服务架构到底该如何落地]{.orange}。
## 组建合适的技术团队经过我前面的讲解，你应该认识到微服务架构相比于单体应用来说复杂度提升了很多，这其中涉及很多组件，比如注册中心、配置中心、RPC框架、监控系统、追踪系统、服务治理等，每个组件都需要专门的人甚至专家把控才能hold 住，不然微服务架构的落地就相当于空中楼阁，虚无缥缈。所以想要落地微服务，首先需要合适的人，也就是组建一支合适的技术团队。你一定很容易想到，是不是只有架构师适合做微服务架构的开发？一定程度上，这是合理的，因为微服务架构所涉及的具体技术，比如CAP 理论、底层网络可靠性保证、Netty高并发框架等，都对技术的深度要求比较高，一般有经验的架构师才能掌握，所以这个技术团队必须包含技术能力很强的架构师。但是还要考虑到微服务架构最后还是要落地到业务当中，既要满足业务的需求，也要防止一种情况的发生，那就是全部由架构人员组成技术团队，根据自己的设想，脱离了实际的业务场景，最后开发出来的架构中看不中用，业务无法实际落地，既打击了团队人员积极性，又对业务没有实际价值，劳民伤财。所以这支技术团队，也**必须包含做业务懂业务的开发人员**，只有他们了解业务的实际痛点以及落地过程中的难点，这样才能保证最后设计出的微服务架构是贴合业务实际的，并且最后是能够实际落地的。``{=html}
## 从一个案例入手当你的团队决定要对业务进行微服务架构改造时，要避免一上来就妄想将整个业务进行服务化拆分、追求完美。这种想法是很危险的，一切的技术改造都应当以给业务创造价值为宗旨，所以业务的稳定性要放在第一位，切忌好高骛远。正确的方法是**首先从众多业务中找到一个小的业务进行试点**，前期的技术方案以满足这个小的业务需求为准，力求先把这个小业务的微服务架构落地实施，从中发现各种问题并予以解决，然后才可以继续考虑更大规模的推广。这样的话，即使微服务架构的改造因为技术方案不成熟，对业务造成了影响，也只是局限在一个小的业务之中，不会对整体业务造成太大影响。否则的话，如果因为微服务架构的改造给业务带来灾难性的后果，在许多技术团队的决策者来看，可能微服务架构的所带来的种种好处也不足以抵消其带来的风险，最后整个微服务架构的改造可能就夭折了。回想一下微博业务的微服务改造，从 2013 年开始进行微服务架构的研发，到2014 年用户关系服务开始进行微服务改造，再到 2015 年 Feed业务开始进行微服务改造，从几个服务上线后经过春晚流量的考验后，逐步推广到上百个服务的上线，整个过程持续了两年多时间。虽然周期比较长，但是对于大流量的业务系统来说，稳定性永远是在第一位的，业务架构改造追求的是稳步推进，中间可以有小的波折，但对整体架构的演进方向不会产生影响。