# CVE-2019-19470：TinyWall防火墙本地提权漏洞分析
|
##### 译文声明
本文是翻译文章，文章原作者 codewhitesec，文章来源：codewhitesec.blogspot.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在本文中，我们介绍了TinyWall在2.1.13版本前存在的一个本地提权漏洞，本地用户可以借助该漏洞提升至`SYSTEM`权限。除了命名管道（Named
Pipe）通信中存在的.NET反序列化漏洞之外，我们也介绍了一个认证绕过缺陷。
## 0x01 背景
[TinyWall](https://tinywall.pados.hu/)是采用.NET开发的一款本地防火墙，由单个可执行文件构成。该可执行程序会以`SYSTEM`权限运行，也会运行在用户上下文中，方便用户进行配置。服务端在某个命名管道上监听传入消息，消息使用`BinaryFormatter`以序列化对象流的形式传输。然而这里存在一个身份认证检查机制，需要进一步研究。在本文中我们将详细分析这种机制，因为其他产品也有可能使用这种机制来防御未授权访问风险。
为了简单起见，下文中我们将使用“服务端”来表示接收消息的`SYSTEM`上下文进程，使用“客户端”来表示位于已认证用户上下文中的发送进程。需要注意的是，已认证用户并不需要任何特殊权限（如`SeDebugPrivilege`）就能利用本文描述的该漏洞。
## 0x02 命名管道通信
许多（安全）产品会使用命名管道（Named
Pipe）作为进程间通信的渠道（可以参考各种反病毒产品）。命名管道有一个优势，服务端进程可以通过Windows的认证模型来获取发送方的其他信息，比如原始进程ID、安全上下文等。从编程角度来看，我们可以通过Windows
API来访问命名管道，但也可以通过直接访问文件系统来实现。我们可以通过命名管道的名称，配合`\\.\pipe\`前缀来访问命名管道文件系统（NPFS）。
如下图所示，该产品用到了`TinyWallController`命名管道，并且任何已认证用户可以访问并写入该管道。
## 0x03 SYSTEM进程
首先我们来看一下命名管道的创建及使用过程。当TinyWall启动时，会调用`PipeServerWorker`方法完成命名管道创建操作。Windows提供了一个API：`System.IO.Pipes.NamedPipeServerStream`，其中某个构造函数以`System.IO.Pipes.PipeSecurity`作为参数，这样用户就能使用`SecurityIdentifiers`等类，通过`System.IO.PipeAccessRule`对象实现细粒度的访问控制。此外，从上图中我们可以观察到，这里唯一的限制条件在于客户端进程必须在已认证用户上下文中运行，但这看上去似乎并不是一个硬性限制。
然而如上图所示，实际上这里还存在其他一些检查机制。该软件实现了一个`AuthAsServer()`方法，会进一步检查一些条件。我们需要到达调用`ReadMsg()`的代码块，该调用负责反序列化已收到的消息内容。
如果未能通过检查，则代码会抛出异常，内容为“Client authentication
failed”（客户端认证失败）。跟踪代码流程后，我们找到了一个“认证检查”代码块，代码逻辑基于进程ID来检查，判断服务端与客户端进程的`MainModule.FileName`是否一致。开发者之所以使用这种逻辑，可能是想确保相同的、可信的TinyWall程序能通过命名管道来发送和接收封装好的消息。
我们可以在调试上下文中使用原始程序，这样就不会破坏`MainModule.FileName`属性，从而绕过该限制。接下来我们先使用调试器来验证不可信的反序列化操作。
## 0x04 测试反序列化
因此，为了测试是否可以使用恶意对象来反序列化，我们可以使用如下方法。首先，我们通过调试器（比如[dnSpy](https://github.com/0xd4d/dnSpy)）启动（而不是attach）TinyWall程序，在客户端向管道写入消息之前的位置上设置断点，这样我们就能修改序列化后的对象。在运行过程中，我们可以考虑在Windows
`System.Core.dll`中的`System.IO.PipeStream.writeCore()`方法上设置断点，以便完成修改操作。完成这些设置后，很快断点就会被触发。
现在，我们可以使用[ysoserial.NET](https://github.com/pwntester/ysoserial.net)和James
Forshaw的`TypeConfuseDelegate`
gadget来创建恶意对象，弹出计算器。在调试器中，我们使用`System.Convert.FromBase64String("...")`表达式来替换当前值，并且相应地调整计数值。
释放断点后，我们就能得到以`SYSTEM`权限运行的计算器进程。由于反序列化操作会在显式转换前触发，因为我们的确能完成该任务。如果大家不喜欢出现`InvalidCastExceptions`，那么可以将恶意对象放在TinyWall的`PKSoft.Message`对象参数成员中，这个练习留给大家来完成。
## 0x05 伪造MainModule.FileName
通过调试客户端验证反序列化缺陷后，接下来我们可以看一下是否能抛开调试器完成该任务。因此，我们必须绕过如下限制：
`GetNamedPipeClientProcessId()`这个Windows
API用来获取特定命名管道的客户端进程标识符。在最终的PoC（`Exploit.exe`）中，我们的客户端进程必须通过某种方式伪造`MainModule.FileName`属性，以便匹配TinyWall的程序路径。该属性通过`System.Diagnostics.ProcessModule`的`System.Diagnostics.ModuleInfo.FileName`成员来获取，后者通过`psapi.dll`的`GetModuleFileNameEx()`原生调用来设置。这些调动位于`System.Diagnostics.NtProcessManager`上下文中，用来将.NET环境转换为Windows原生API环境。因此，我们需要研究一下是否可以控制该属性。
经研究证明，该属性来自于PEB（Process Environment
Block）结构，而进程所有者可以完全控制该区块。PEB在用户模式下可写，我们可以使用`NtQueryInformationProcess`，第一时间获得进程PEB的句柄。`_PEB`结构由多个元素所构成，如`PRTL_USER_PROCESS_PARAMETERS
ProcessParameters`以及双向链表`PPEB_LDR_DATA
Ldr`等。这两者都可以用来覆盖内存中相关的Unicode字符串。第一个结构可以用来伪造`ImagePathName`及`CommandLine`，但对我们而言更有趣的是双向链表，其中包含`FullDllName`以及`BaseDllName`。这些PEB元素正是TinyWall中`MainModule.FileName`代码所提取的元素。此外，Phrack在2007年的一篇[文章](http://phrack.org/issues/65/10.html)中也详细解释了相关的底层数据结构。
幸运的是，Ruben Boonen（[@FuzzySec](https://github.com/FuzzySec
"@FuzzySec")）已经在这方面做了一些研究，发布了多个[PowerShell脚本](https://github.com/FuzzySecurity/PowerShell-Suite)。其中有个`Masquerade-PEB`脚本，可以操控正在运行进程的PEB，在内存中伪造前面提到的属性值。稍微修改该脚本后（该练习同样留给大家来完成），我们可以成功伪造`MainModule.FileName`值。
即使我们可以将PowerShell代码移植成C#代码，但我们还是偷了个懒，在C#版的`Exploit.exe`中直接导入`System.Management.Automation.dll`。我们创建了一个PowerShell实例，读取经过修改的`Masquerade-PEB.ps1`，然后调用相应代码，希望能够成功伪造`Exploit.exe`的PEB元素。
使用Sysinternals Process
Explorer之类的工具检查试验结果，我们可以验证这个猜想，为了后续利用奠定基础，在不需要调试器配合的情况下弹出计算器。
## 0x06 弹出计算器
现在距离完整利用代码只差一步之遥，前面我们在`Exploit.exe`刚开始运行时调用James
Forshaw的`TypeConfuseDelegate`代码以及Ruben
Boonen的PowerShell脚本，现在我们可以进一步连接到`TinyWallController`命名管道。更具体一些，我们需要将`System.IO.Pipes.NamedPipeClientStream`变量`pipeClient`与弹出计算器的gadget一起传入`BinaryFormatter.Serialize()`。
感谢Ruben Boonen之前的研究成果，同时在Markus Wulftange小伙伴的帮助下，我很快就实现了完整版利用代码。
## 0x07 漏洞披露
我们于2019年11月27日向TinyWall开发者反馈了漏洞细节，官方在2.1.13版（2019年12月31日发布）中修复了该漏洞。