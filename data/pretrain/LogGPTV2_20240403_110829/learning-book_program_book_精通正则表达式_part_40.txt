在我的机器上，结果是：
Alternation takes 27.404 seconds
Character class takes 0.288 seconds
下面的代码：
if (phpversion() >= 5)
date_default_timezone_set("GMT");
Java测试
Benchmarking oitlJaoa
因为某些原因，用Java测试很有讲究。首先看个考虑不够周到的例子，然后请思考它为什
么考虑不周到，应该如何改进：
import java.util.regex.*;
public class JavaBenchmark (
public static void main(String [l args)
Matcher regex1 = Pattern.compile(*^(a|b|c|dle|flg)+S").matcher("*);
Matcher regex2=Pattern.compile(*^[a-g]+$").matcher("*);
long timesToDo = 1000;
StringBuffer temp = new StringBuffer();
for（inti=1000;i>0;i--)
temp.append(*abababdedfg*);
String testString = temp.toString();
//第一轮测试计时...
long count = timesToDo;
long startTime= System.currentTimeMillis();
while (--count >0)
regexl.reset(testString).find();
double seconds = (System.currentTimeMil1is()-startTime)/1000.0;
System.out.println("Alternation takes*+seconds +*seconds");
//第二轮测试计时..
count = timesToDo;
startTime = System.currentTimeMillis();
while (--count > 0)
regex2.reset(testString).find();
seconds =(System.currentTimeMillis()startTime)/1000.0;
）
1
你注意到在这个程序中正则表达式如何初始化部分编译了吗？我们需要测试的是匹配的速
度，而不是编译的速度。
---
## Page 262
236
第6章：打造高效正则表达式
速度取决于所使用的虚拟机（VM）。Sun的标准JRE有两种虚拟机，clienrVM为快速启动
而优化，serverVM为长时间、大负荷的作业而优化。
在我的机器上，使用clientVM运行测试的结果如下：
Alternation takes 19.318 seconds
Character class takes 1.685 seconds
使用serverVM的结果如下：
Alternation takes 12.106 seconds
Character class takes 0.657 seconds
这样看来测试有点不可信了，之所以说它不够周到，原因在于计时的结果在很大程度上取
决于自动的预执行编译器（automaticpre-executioncompiler）的工作，或者说运行时编译器
(run-timecompiler）与测试代码的交互情况。某些虚拟机包含JIT（Just-In-Timecompiler），
JIT会根据需要，在需要执行代码之前才进行编译。
Java使用了我称为BLTN（Better-Late-Than-Never）的编译器，在执行期间计数，对反复使
用的代码根据需要进行编译和优化。BLTN的性质是，它只对认为“热门”（hot，即大量使
用）的代码进行干预。如果虚拟机已经运行了一段时间，例如在服务器环境中，它已经“预
热”完毕，而我们的简单例子确保了一台“凉”的服务器（BLTN没有进行任何优化）。
可以把测试部分放入一个循环，来观察“预热”现象：
//第一轮测试计时...
for (int i = 4; i > 0; i--)
1
long count = timesToDo;
long startTime = System.currentTimeMillis();
while (--count > 0)
regexl.reset(testString).find();
double seconds = (System.currentTimeMillis()-startTime)/1000.0;
，
如果新增的循环运行足够长（例如，10s），BLTN就会优化热门代码，最后一次输出的时间
就代表了已预热系统的情况。再次使用serverVM，这些时间确实比之前有了8%和25%的
提高。
Alternation takes 11.151 seconds
Character class takes 0.483 seconds
另一个问题在于，负责调度GC线程的工作是不确定的。所以，进行足够长时间的测试能够
降低这些不确定因素的影响。
---
## Page 263
性能测试
237
VB.NET测试
Bencimarking oitltVB.NET
下面是VB.NET的测试程序：
Option Explicit On
Option Strict On
Imports System.Text.RegularExpressions
Module Benchmark
Sub Main ()
Dim Regexl as Regex = New Regex(*^(a|blcldlelf1g)+$")
Dim Regex2 as Regex = New Regex(*^[a-g]+S")
Dim TimesToDo as Integer = 1000
Dim TestString as String = "*
Dim I as Integer
For I=1to 1000
TestString = TestString &"abababdedfg*
Next
Dim StartTime as Double = Timer()
For I =1 to TimesToDo
Regexl.Match(TestString)
Next
Dim Seconds as Double =Math.Round(Timer()-StartTime,3)
Console.WriteLine("Alternation takes"& Seconds&“seconds")
StartTime = Timer()
For I=1 to TimesToDo
Regex2.Match(TestString)
Next
Seconds = Math.Round(Timer() -StartTime,3)
Console.WriteLine(*Character class takes"& Seconds &*seconds*)
End Sub
End Module
在我的机器上，结果是：
Alternation takes 13.311 seconds
Character class takes 1.680 seconds
在.NETFramework中使用RegexOptions.Compiled作为正则表达式构造函数的第2个参
数，能够把正则表达式编译为效率更高的形式（410），其结果为：
Alternation takes 5.499 seconds
Character class takes 1.157 seconds
使用compiled功能之后，两个测试的速度都有提高，但是多选结构的相对上升幅度更为明
显（几平是之前的3倍，而字符组的程序只提高到之前的1.5倍），所以多选结构从中获益
更大。
---
## Page 264
238
第6章：打造高效正则表达式
Ruby测试
Benchmarking uith Rnby
下面是Ruby的测试代码
TimesToDo=1000
testString="*
for i in 1..1000
testString +=“abababdedfg"
end
Regex1 = Regexp::new("^(aIb|cldle|f1g)+$*);
Regex2 = Regexp::new("^[a-g]+$*）;
startTime = Time.new.to_f
for i in 1..TimesToDo
Regexl.match(testString)
end
print "Alternation takes &.3f seconds\n" $(Time.new.to_f-startTime);
startTime = Time.new.to_f
for i in 1..TimesToDo
Regex2.match(testString)
end
print
*Character class takes &.3f seconds\n*（Time.new.to_f-startTime);
在我的机器上，结果如下：
Alternation takes 16.311 seconds
Character class takes3.479seconds
Python测试
BenchmarkingwithPython
下面是Python的测试代码：
import re
import time
import fpformat
Regex1
1 = re.compile(*^(a1blcldlelf1g)+S*)
Regex2 = re.compile(*^[a-g]+S")
TimesToDo = 1250;
TestString = **
for i in range(800):
TestString +=
"abababdedfg*
StartTime = time.time()
for i in range(TimesToDo):
Regex1.search(TestString)
Seconds = time.time()-StartTime
StartTime = time.time()
for i in range(TimesToDo):
Regex2.search(TestString)
Seconds =time.time()-StartTime
print "Character class takes*+ fpformat.fix(Seconds,3)+*seconds*
---
## Page 265
性能测试
239
因为Pyhon的正则引擎设定的限制，我们必须减少字符串的长度，因为原来长度的字符串
会导致内部错误（“maximumrecursionlimitexceeded”）。这种规定有点像减压阀，它有助于
终止无休止匹配。
、
作为弥补，我相应增加了测试的次数。在我的机器上，测试结果为：
Alternation takes 10.357 seconds
Character class takes 0.769 seconds
Tcl测试
Benchmarking oith Tcl
下面是Tcl的测试代码：
set TimesToDo 1000
set TestString **
for {seti1000}（$i>0}（incr i-1}{
append TestString"abababdedfg"
set Count $TimesToDo
set StartTime [clock clicks -milliseconds]
regexp (^(a|blc|dlelflg)+$} $TestString
set EndTime [clock clicks -milliseconds]
set Seconds[expr (SEndTime -$StartTime)/1ooo.0]
puts [format"Alternation takes $.3f seconds" $Seconds]
set Count $TimesToDo
set StartTime [clock clicks -milliseconds]
for（}（$Count>o)（incr Count-1)（
regexp (^[a-g]+$) $TestString
set EndTime [clock clicks -milliseconds]
set Seconds [expr ($EndTime - $StartTime)/10oo.0]
puts [format*Character class takes $.3f seconds"$Seconds]
在我的机器上，结果如下：
Alternation takes 0.362 seconds
Character class takes 0.352 seconds
神奇的是，两者速度相当。还记得吗，我们在第145页说过，TcI使用的是NFA/DFA混合
引擎，对DFA引擎来说，这两个表达式是没有区别的。本章所举的大部分例子并不适用于
Tcl，详细信息请参考第243页。
排
---
## Page 266
240
第6章：打造高效正则表达式
常见优化措施
Common Optinizations
聪明的正则表达式实现（implementation）有许多办法来优化，提高取得结果的速度。优化
通常有两种办法：
·加速某些操作。某些类型的匹配，例如d+，极为常见，引擎可能对此有特殊的处理
方案，执行速度比通用的处理机制要快。
·避免余操作。如果引擎认为，对于产生正确结果来说，某些特殊的操作是不必要的，
或者某些操作能够应用到比之前更少的文本，忽略这些操作能够节省时间。例如，一
个以"A：（行开头）开头的正则表达式只有在字符串的开头位置才能匹配，如果在此
处无法匹配，传动装置不会徒劳地尝试其他位置(进行无谓的尝试)。
在下面的十几页中，我会讲解自己见过的许多种不同的天才优化措施。没有任何一种语言
或者工具提供了所有这些措施，或者只是与其他语言和工具相同的优化措施，我也确信，
还有许多我没见过的优化措施，但看完本章的读者，应该能够合理利用自己所用工具提供
的任何优化措施。
有得必有失
No Free Linch
通常来说优化能节省时间，但并非永远如此。只有在检测优化措施是否可行所需的时间少
于节省下来的匹配时间的情况下，优化才是有益的。事实上，如果引擎检查之后认为不可
能进行优化，结果总是会更慢，因为最开始的检查需要花费时间。所以，在优化所需的时
间，节省的时间，以及更重要的因素一一优化的可能性之间，存在互相制约的关系。
来看一个例子。表达式八b\B（某个位置既是单词分隔符又不是单词分隔符）是不可能匹配
的。如果引整发现提供的表达式包含八b\B就知道整个表达式都无法匹配，因而不会进行
任何匹配操作。它会立刻报告匹配失败。如果匹配的文本很长，节省的时间就非常可观。
不过，我所知的正则引擎都没有进行这样的优化。为什么？首先，很难判断这条规则是否
适用于某个特定的表达式。某个包含b\B的正则表达式很可能可以匹配，所以引擎必须
做一些额外的工作来预先确认。当然，节省的时间确实很可观，所以如果预计到八b\B经
常出现，这样做还是值得的。