The PATH environment variable is intended to contain a list of directories separated by 
colons (:). When the shell needs to run a program that's specified without directory 
path components, it searches through each directory in the PATH variable in the order 
that they appear. The current directory is checked only if it's specified in the PATH 
variable. 
Programs that run with privilege and make use of subshells can run into trouble if they 
don't use explicit paths for command names. For example, take a look at the following 
code: 
snprintf(buf, sizeof(buf), 
         "/opt/ttt/logcat%s | gzcat | /opt/ttt/parse > 
/opt/ttt/results", 
          logfile); 
system(buf); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
619 
This program makes use of the system() function to run the /opt/ttt/logcat program, 
pipe its output to the gzcat program to decompress the log, pipe the decompressed 
log to the /opt/ttt/parse program, and then redirect the parsing results to the 
/opt/ttt/results file. Note that gzcat is called without specifying a directory path, so 
the shell opened with the system() function searches through the PATH environment 
variable to find the gzcat binary. If this code was part of a setuid root application, 
attackers could do something like this: 
$ cd /tmp 
$ echo '#!/bin/sh' > gzcat 
$ echo 'cp /bin/sh /tmp/sh' >> gzcat 
$ echo 'chown root /tmp/sh' >> gzcat 
$ echo 'chmod 4755 /bin/sh' >> gzcat 
$ chmod 755 ./gzcat 
$ export PATH=.:/usr/bin:/usr/local/bin 
$ /opt/ttt/start_process 
$ ./sh 
# 
In this code, attackers change the PATH environment variable so that the current 
directory is the first directory that's searched. This way, the shell script gzcat in the 
current directory, /tmp/, runs instead of the intended program, /usr/bin/gzcat. 
Attackers made a simple shell script in the place of gzcat that allowed them to obtain 
root access by creating a setuid root copy of /bin/sh. 
HOME 
The HOME environment variable indicates where the user's home directory is placed on 
the file system. Naturally, users can set this variable to any directory they want, so 
it's important for privileged programs to actually look up the user's home directory in 
the system password database. If a privileged program tries to use a subshell to 
interact with a file that's specified relative to a user's home directory, such as ~/file, 
most shells use the value of the HOME environment variable. 
IFS 
IFS (which stands for "internal field separator") is an environment variable that tells 
the shell which characters represent whitespace. Normally, it's set to break input on 
space, tabs, and new lines. On some shells, IFS can be set so that it interprets other 
characters as whitespace but interprets straightforward commands in odd ways. 
Consider the following program excerpt: 
system("/bin/ls"); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
620 
This simple program excerpt makes use of the system() function to run the /bin/ls 
program. If an attacker sets the IFS variable to / and the shell honors it, the meaning 
of this command would be changed entirely. With a normal IFS setting, the string 
/bin/ls is interpreted as one token, /bin/ls. If the attacker set IFS to /, the shell 
interprets it as two tokens: bin and ls. The shell would first try to run the bin program 
and pass it an argument of ls. If a program named bin happened to be in the current 
PATH, the shell would start that program. An attacker could exploit this situation as 
shown in the following example: 
$ cd /tmp 
$ echo 'sh -i' > bin 
$ chmod 755 ./bin 
$ export PATH=.:/usr/bin:/usr/local/bin 
$ export IFS="/" 
$ run_vuln_program 
$ ./sh 
# 
The attacker changed the IFS variable so that / would be interpreted as whitespace, 
and the system() function would try to run the program named bin. The attacker 
created a suitable program named bin that opened a shell as root, and then set PATH 
so that his bin program was first on the list. IFS attacks don't really work against 
modern shells, but ENV attacks, described in the next section, are a bit more plausible. 
ENV 
When a noninteractive shell starts, it often looks to a certain environment variable for 
a filename to run as a startup script. This environment variable is typically expanded, 
so one can use a malicious value, as in this example: 
ENV= 
Any subshells that are opened actually run the /tmp/evil file. BASH_ENV is a similar 
variable honored by bash. Old versions of sliplogin were vulnerable to this issue, as 
shown in the following code: 
    (void)sprintf(logincmd, "%s %d %ld %s", loginfile, 
    unit, speed, loginargs); 
     ... 
    /* 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
621 
     * Run login and logout scripts as root (real and 
     * effective); current route(8) is setuid root and 
     * checks the real uid to see whether changes are 
     * allowed (or just "route get"). 
     */ 
    (void) setuid(0); 
    if (s = system(logincmd)) { 
        syslog(LOG_ERR, "%s login failed: exit status %d from %s", 
               loginname, s, loginfile); 
        exit(6); 
    } 
This error could be exploited by logging in to a slip-enabled account and having telnet 
set an environment variable of ENV that the shell opened by system() would expand 
and run. 
SHELL 
Some programs use the SHELL environment variable to determine a user's preferred 
command shell. Naturally, if privileged programs honor this variable, trouble can 
ensue. 
EDITOR 
Some programs use the EDITOR environment variable to determine users' preferred 
editors. Obviously, this variable is also dangerous for a privileged program to trust. 
Sebastian Krahmer noted a vulnerability in the setuid program cron on a number of 
UNIX distributions that resulted in the program pointed to in the EDITOR variable 
running with elevated privileges (announced by SuSE at 
http://lists.suse.com/archive/suse-security-announce/2001-May/0001.html). 
Runtime Linking and Loading Variables 
Most current UNIX OSs use make extensive use of shared libraries, so that commonly 
required functionality doesn't need to be continually re-implemented by each 
application. The creation of an executable program file involves the use of a special 
program called a linker, which tries to find program-required symbols in a list of 
libraries. If the program is being statically compiled, required library code is simply 
copied from the library into the executable program file, thus the program will be able 
to run without having to dynamically load that library. Conversely, dynamically linked 
executables are created by compiling a list of required modules for the various 
symbols that the application needs, and storing this list within the executable file. 
When the OS runs a dynamically linked program, startup framework code finds the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
622 
shared libraries in this list and maps them into the process's memory when they are 
needed. 
LD_PRELOAD 
LD_PRELOAD provides a list of libraries that the runtime link editor loads before it loads 
everything else. This variable gives you an easy way to insert your own code into a 
process of your choosing. In general, UNIX doesn't honor LD_PRELOAD when running a 
setuid or setgid program, so this variable isn't likely to be a direct vulnerability. 
However, if users can influence the environment of a program running with privilege 
(but isn't setuid), LD_PRELOAD and similar variables can come into play. 
For example, the telnet daemon allows a network peer to define several environment 
variables. These environment variables are typically set before the login program 
runs, and if the telnet daemon doesn't strip out LD_PRELOAD properly, it can lead to an 
exploitable condition. Several years ago, many telnet daemons honored the 
LD_PRELOAD environment variable, thus creating an opportunity for attackers to load 
arbitrary libraries and run code of their choosing. 
LIBRARY PATH 
LD_LIBRARY_PATH provides a list of directories containing shared libraries. The runtime 
link editor searches through this list first when looking for shared libraries. This 
variable is ignored for setuid/setgid binaries. Again, when users might have influence 
over the environment of a privileged application, sanitizing linking/loading-related 
environment variables correctly is important. 
Object Linking Vulnerabilities 
On a related note to environment variables for the linker, a few isolated 
cases of vulnerabilities have been found in executables in the way they're 
compiled. Specifically, the vulnerabilities have to do with the way library files 
required by a program are located on the file system. The dlopen() man page 
specifies this resolution process: 
(ELF only) If the executable file for the calling program contains a 
DT_RPATH tag and doesn't contain a DT_RUNPATH tag, the directories 
listed in DT_RPATH are searched. 
If the environment variable LD_LIBRARY_PATH is defined as containing 
a colon-separated list of directories, these directories are searched. 
(As a security measure, this variable is ignored for setuid and setgid 
programs). 
(ELF only) If the executable file for the calling program contains a 
DT_RUNPATH tag, the directories listed in that tag are searched. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
623 
The cache file /etc/ld.so.cache maintained by ldconfig(8) is checked 
to see whether it contains an entry for the filename. 
The /lib and /usr/lib directories are searched (in that order). 
More steps are involved in this process than you might expect, and a number 
of vulnerabilities have surfaced in the past because of this resolution 
procedure (in addition to the LD_LIBRARY_PATH and LD_PRELOAD attacks 
already mentioned). 
In a few cases, the DT_RPATH or DT_RUNPATH tags embedded in ELF executables 
have listed nonsecure directories that are searched for libraries the program 
depends on. These tags are usually added to an executable with the -R or 
rpath linker options. With relative paths or paths that are writeable, it's 
possible for an attacker to have a rogue library loaded into the process and 
run arbitrary code. One example in the CVSup package is documented at 
www.securiteam.com/securitynews/5LP020UC0Q.html. 
Additionally, the AIX linker was found to exhibit odd behavior compared with 
other standard linkers; any program compiled with the -L flag (used to locate 
libraries at compile time) added those paths to the DT_RPATH tag in the 
executable. Because the -L flag is frequently used to set relative paths, a 
number of programs were vulnerable to privilege escalation caused by 
inappropriate search paths. This bug is documented at 
www.securiteam.com/unixfocus/5EP0I000JC.html. 
There has also been at least one attack against the resolution of paths via the 
/etc/ld.so.cache file. Previously, glibc allowed passing the LD_PRELOAD 
variable to setuid and setgid applications as long as the names didn't contain 
a / character and the library to be preloaded was setuid. This second check 
was neglected if the library to be preloaded existed in the /etc/ld.so.cache 
file. This in turn provided attackers with the opportunity to create or modify 
local files with elevated privileges (as pointed out at 
www.securityfocus.com/archive/1/158736/2005-02-06/2005-02-12/2). 
Other Environment Variables 
The environment variables you have looked at so far are widely used, but they aren't 
the only ones that have caused problems in the pastfar from it! Whenever programs 
run with privileges different from the user interacting with it on a local system or run 
on a remote system in which users can influence the environment, there's the danger 
of the program exposing itself to risk when it interprets values from the environment. 
The values you have seen are standard shell environment variables, but less 
commonly used or application-specific variables have also been manipulated to 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
624 
compromise an application. This vulnerability is possible especially when libraries are 
performing actions based on the environment; application developers might not be 
aware those values are being read and acted on because it's all happening behind the 
scenes. Indeed, some of the most prevalent environment-related vulnerabilities in 
UNIX have been a result of libraries using environment variables in an unsafe manner. 
Take the UNIX locale vulnerability Andreas Hasenak discovered, for example 
(www1.corest.com/common/showdoc.php?idx=127&idxseccion=10). Many UNIX 
OSs were vulnerable to local (and sometimes remote) compromise because the 
formatting of output was dictated according to language files specified by certain 
environment variables (NLSPATH, LC_MESSAGES, and LANG in this case, although it varies 
slightly among operating systems). 
Another notable example was abusing TERM and TERMCAP environment variables via 
telnetd in a number of UNIX systems (BSD and Linux). Theo De Raadt discovered 
that these variables, if present, specified a file that ws parsed to determine certain 
terminal capabilities (more details at 
www.insecure.org/sploits/bsd.tgetent.overflow.html). Attackers who were able to 
write an arbitrary file to a target host's file system could upload erroneous TERMCAP 
files and then connect via telnetd and have them parsed, thus triggering a buffer 
overflow in the tgetent() function. 
Performing a thorough application audit of a UNIX program requires identifying 
variables that an application is using explicitly and having a reasonable idea of the 
environment variables standard libraries use behind the scenes. 
Process Groups, Sessions, and Terminals 
Each process belongs to a process group, which is a related set of processes. One 
process in the group is the process group leader, and the process group's numeric ID 
is the same as its group leader's process ID. Programs that are descendents of the 
group leader remain in the process group, unless one of them creates their own 
process group with setpgid() or setsid(). 
A session is a collection of process groups, usually tied to a terminal device. The 
session leader has a connection with this device, known as the controlling terminal. 
Each session with a terminal has a single foreground process group, and the rest of 
the process groups are background process groups. This organization of processes 
around the terminal allows for the natural interface that UNIX users are accustomed 
to. The terminal device takes certain input from the user, and then sends signals to all 
processes in the foreground process group. 
Terminal Attacks 
Terminal emulation software interprets a number of escape sequences to help format 
data on the screen and perform other tasks, such as taking screen captures, altering 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
625 
terminal parameters, and even setting background images. This flexibility might 
allow data being displayed via a terminal emulator to perform unintended actions on 
behalf of users viewing the data. HD Moore published an interesting paper (available 
at 
http://archives.neohapsis.com/archives/bugtraq/2003-02/att-0313/01-Termulation
.txt) that details a few attacks on popular terminal emulation software, with 
consequences ranging from simple denial-of-service vulnerabilities to stealing 
privileges from the victim viewing data that contains embedded escape sequences. 
From a code-auditing perspective, you can't audit applications for bugs related to 
program output if the output is viewed by a third party via a terminal emulator 
program. However, you need to be aware that these bugs exist, and sometimes it 
makes sense to recommend that an application sanitize output so that nonprintable 
characters don't appear because of problems such as the ones described in HD 
Moore's paper. He points out the syslog daemon as an example and describes the 
behavior of other popular implementations. 
Session Logins 
Occasionally, you encounter code running in a privileged context that determines the 
user interacting with it by using the getlogin() function. This function exists in 
BSD-based UNIX implementations, and it returns the current user associated with the 
session. This value is set at some earlier point with setlogin(). Applications that use 
these functions have to be careful, particularly with setlogin() because it affects all 
processes in the process group, not just the current process. To use setlogin() safely, 
processes need to make themselves the leader of a new session; otherwise, they 
inadvertently set the login name for the entire process group. (Only processes 
running with superuser privileges can use the setlogin() function.) As the OpenBSD 
man page points out, this mistake is easy to make because this behavior is the 
opposite of traditional models of UNIX inheritance of attributes. A process becomes a 
process group leader by using setsid() or setpgrp(); however, only setsid() is 
adequate for use before a call to setlogin() because setpgrp() doesn't put the 
process as a new session, just a new process group. The following code shows an 
incorrect use of setlogin(): 
int initialize_user(char *user) 
{ 
    if(setpgid(0, 0) pw_uid); 
    execl(editor, editor, filename, NULL); 
} 
This (contrived) example sets the user ID inappropriately if the value returned from 
getlogin() is incorrect. If it returns an inappropriate username, this program sets the 
user ID to the wrong person! 
When auditing code that uses setlogin() or getlogin(), you should make the 
assumption that any insecure use of setlogin() can result in compromise. Even if 
getlogin() isn't used in the application being audited, it's used plenty of other places 
on a default system. Similarly, an application shouldn't be putting too much faith in 
the value returned by getlogin(). It's a good idea to approach the audit under the 
assumption that you can abuse some other application on the system to incorrectly 
setlogin(). Any time you encounter getlogin() used in place of more secure 
alternatives (the getpw* functions based on the UID returned from the getuid() 
function), carefully trace the username returned under the assumption you can 
specify an arbitrary value for that username. 
7.6.5 Interprocess Communication 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
627 
UNIX systems provide several mechanisms for processes to communicate with each 
other to share information or synchronize their activities. These mechanisms are 
typically used for transactions across multiple processes, sharing data elements, and 