### 209.42.186.67
— Returned DNS Records at Time t+300 Seconds —
```plaintext
;; ANSWER SECTION:
f07b42b93.com. 300 IN A 64.188.129.99
f07b42b93.com. 300 IN A 69.76.238.227
f07b42b93.com. 300 IN A 69.225.51.55
f07b42b93.com. 300 IN A 76.10.12.224
f07b42b93.com. 300 IN A 76.106.49.207
f07b42b93.com. 300 IN A 76.127.120.38
f07b42b93.com. 300 IN A 76.193.216.140
f07b42b93.com. 300 IN A 99.35.9.172
f07b42b93.com. 300 IN A 200.49.146.20
f07b42b93.com. 300 IN A 204.198.77.248
```

**Figure 1.** An example of how a fast-flux botnet rapidly changes the mapping of IP addresses to its domain names. These two consecutive DNS lookups are 300 seconds apart.

In Figure 1, during a DNS query at time \( t \), the domain's DNS server replies with 10 A records, any of which will lead users to the phishing webpage. The short time-to-live (TTL) value, i.e., 300 seconds, indicates that the records will expire after 300 seconds, necessitating a new DNS query. At \( t+300 \) seconds, we re-issued the same query and obtained another set of IP addresses. In total, there are 19 unique IP addresses, with one duplication in the two sets, indicating that the bot herder currently controls at least 19 bots. The duplication could occur because the DNS server returns IP addresses randomly or the bot herder does not have enough bots to provide more unseen IP addresses. A single fast-flux botnet domain name can be resolved to a large number of IP addresses. For instance, we observed a total of 5,532 IP addresses by resolving the domain name `nlp-kniga.ru` between October 2009 and March 2010. The larger the IP address pool, the higher the "productivity" of the botnet. Consequently, the link between any two bots serving the same bot herder becomes less clear, which is exactly what the bot herders desire.

### Fast-Flux Bot Detection in Real Time

Several approaches have been proposed to detect fast-flux botnets. By definition, a fast-flux botnet domain name will be resolved to different IP addresses over time because: 
1. Bots may not be active all the time.
2. Bot herders want the links between the bots to be less obvious.

Most studies rely on the number of IP addresses of a domain name by actively querying a certain domain name [3, 12] or passively monitoring DNS query activities for a specific period [25] (typically a few days). This approach is straightforward and robust; however, the time required to detect bots is too long. A bot herder may only need a few minutes to set up a new domain name and a malicious service to deceive legitimate users. Therefore, we cannot spend several days trying to determine whether a certain domain hosts malicious services. To fully protect legitimate users from unknowingly accessing malicious services, we need a scheme that can detect whether a service is hosted by a fast-flux botnet in real time.

In this paper, we propose such a scheme. The key features of the scheme are as follows:

1. **Operational Modes:** The scheme can work in either a passive or an active mode. In the passive mode, it operates when users are browsing websites. In the active mode, it issues additional HTTP requests to derive more accurate decisions. Regardless of the mode used, the scheme can determine whether a website is hosted by a fast-flux bot within a few seconds with a high degree of accuracy.

2. **Intrinsic Characteristics:** The scheme relies on certain intrinsic and invariant characteristics of fast-flux botnets:
   - **Request Delegation Model:** Bots delegate user requests to a mothership, which processes the request and sends the response back through the bot.
   - **Bot Ownership:** Bots have owners, so they may not be dedicated to malicious services.
   - **Network Links:** The network links of bots are not comparable to those of dedicated servers.

   The first characteristic exists by definition, while the other two cannot be manipulated by bot herders. Thus, bot herders cannot implement countermeasures against the scheme.

3. **Small Botnet Detection:** The scheme does not assume that a fast-flux botnet owns a large number of bots (IP addresses). Even if a botnet only has a few bots, as long as it adopts the "request delegation" architecture, our scheme can detect it without performance degradation.

### Paper Structure

The remainder of this paper is organized as follows:
- **Section 2:** Discusses existing solutions for detecting fast-flux botnets.
- **Section 3:** Analyzes the intrinsic properties of fast-flux botnets.
- **Section 4:** Introduces the proposed solution.
- **Section 5:** Evaluates the proposed solution.
- **Section 6:** Considers practical issues related to the proposed solution.
- **Section 7:** Contains some concluding remarks.

### Related Work

To the best of our knowledge, the Honeynet project [22] was the first research to study the abuse of fast-flux botnets. The authors explained the hidden operations of botnets by providing examples of both single and double fast-flux mechanisms. Single fast-flux mechanisms change the A records of domains rapidly, while double fast-flux techniques change both the A records and the NS records of a domain frequently.

Holz et al. [12] monitored domain name service (DNS) activities over a seven-week period and proposed a fast-flux botnet domain name detection scheme based on the fluxy-score. The score is computed by counting the number of unique A records in all DNS lookups, the number of NS records in a single DNS lookup, and the number of unique autonomous system numbers (ASNs) for all DNS A records. Several detection schemes [17, 18, 25, 14] detect fast-flux botnet domain names by monitoring how frequently a domain name changes its corresponding IP addresses. However, these solutions often require long-term observation (months). Although the observation period can be reduced by using both active and passive monitoring techniques [3], the approach still needs several minutes along with the help of a data center to determine whether a domain name is controlled by a botnet.

The proposed fast-flux botnet detection scheme is fundamentally different from all previous approaches. Since DNS-based detectors often require a long time to identify fast-flux botnets, the proposed solution does not monitor DNS activities. Instead, it relies on several basic properties measured at the network level with a short period of time. As a result, it can detect fast-flux botnets accurately and efficiently.

### Intrinsic Characteristics of Fast-Flux Bots

In this section, we consider the intrinsic characteristics of fast-flux bots, which serve as the basis of the proposed detection method described in Section 4. Since these characteristics are intrinsic and invariant, they are common to fast-flux bots. Therefore, bot herders cannot manipulate them to evade detection by the proposed scheme.

#### 3.1 Request Delegation

As mentioned in Section 1, a fast-flux bot does not process users' requests itself. Instead, it acts as a proxy by delegating requests to the mothership and then forwards responses from the mothership to the users. The purpose of this design is twofold:
1. To protect the mothership from being exposed or detected.
2. To avoid replicating malicious services and content to every bot, which would increase the risk of detection and slow down the collection of fraudulent information (e.g., obtaining users' confidential data via phishing).

The request delegation design is illustrated in Figure 2. When a client sends a request to a fast-flux bot, the request is redirected to a mothership node. The node processes the request (mostly by reading a static webpage from a hard disk) and sends the response to the bot. The bot, as a proxy, forwards the response to the requester as if it had handled the request itself.

Because of this design, a client may perceive a slightly longer delay between issuing a request and receiving the response when the "service provider" is a fast-flux bot. The increase in response time is roughly the same as the message forwarding delay between the bot and the mothership. As long as the request delegation model is employed, technically, the increase in response time cannot be avoided.

#### 3.2 Consumer-Level Hardware

Bot herders expand their collection of bots by compromising as many computers as possible. Most botnets are comprised of residential PCs [23]. One reason is that such PCs are not well-maintained; e.g., the anti-virus software may be out-of-date, and the operating system and applications may not be patched. Residential PCs are normally equipped with consumer-level hardware and usually connect to the Internet via relatively low-speed network links, such as ADSL and cable modems. As a result, compared to dedicated web servers, like those of Google and Yahoo, most bots have relatively low computation power and network bandwidth to access the Internet, which may cause the following phenomena:
- Because of a bot's relatively low computation power, the message forwarding operation at a bot may experience significant delays if any foreground application is running at the same time (see the next subsection).
- Because of a bot's relatively low network bandwidth, and the fact that residential network links are normally shared by a number of users (e.g., users in the same building), it is likely that significant network queuing will occur. This will induce variable queuing time and make a request's response time more fluctuating.

Obviously, bot herders cannot alter the level of a bot's equipment for network bandwidth access. For this reason, we consider such characteristics intrinsic and the phenomena unalterable by external parties; in other words, longer message forwarding delays and more variable network delays should be widely observable in fast-flux botnets.

#### 3.3 Uncontrollable Foreground Applications

Ideally, bot herders should be able to control bots via remote control software; however, bots are not controlled exclusively by bot herders: They are personal computers that may be used by the owners at the same time. For example, a bot may be serving phishing webpages for bot herders at exactly the same time that the PC owner is playing an online game or watching a movie. This possibility indicates that foreground applications run by bot owners and background malicious processes run by bot herders may compete for computing resources, such as the CPU, memory, disk space, and network bandwidth. In other words, if the workloads of bot owners and bot herders compete for resources, the performance of both applications may suffer.

This characteristic implies that the delay incurred by the message forwarding operation at a bot, i.e., the time taken to forward a user's request to the mothership and the time taken to forward the mothership's response to the user, may vary according to the instantaneous foreground workload on the bot. This effect would be especially significant if a bot's computation power is low (due to consumer-level hardware). In this case, any foreground workload would slow the above message forwarding operation, so a high level of variability in message forwarding delays will be observed.

Bot herders cannot avoid this situation because malicious software would be easily detected if it affects the performance of bot owners' foreground applications. More specifically, if a bot herder's malicious software requests a high priority for computation, bot owners may notice that the performance of their foreground applications deteriorates and run a scan, which would detect and remove the malicious software.

#### 3.4 Summary

In Table 1, we list the characteristics that are intrinsic to fast-flux bots and compare fast-flux bots with dedicated servers and traditional bots (i.e., bots that malicious services are running on, but they do not delegate users' requests). It is clear that dedicated servers do not have any of the characteristics of fast-flux bots. Traditional bots, on the other hand, are similar to fast-flux bots, except that they do not delegate requests.

The effects of these intrinsic characteristics are also summarized in Table 1. Because of these properties, we expect to see long delays in fetching documents (called document fetch delays hereafter), variable network queuing delays, and long processing delays when users make requests to a malicious service hosted by a fast-flux bot. Measuring the three types of delay forms the basis of our fast-flux bot detection scheme, which we discuss in detail in the next section.

| **Dedicated Servers** | **Traditional Bots** | **Fast-Flux Bots** |
|----------------------|---------------------|--------------------|
| Requests Delegated   | ✕                   | ✔                  |
| Consumer-Level Hardware | ✕                   | ✔                  |
| Uncontrollable Foreground Tasks | ✕                   | ✔                  |
| Long Delays in Fetching Documents | ✕                   | ✔                  |
| Low Bandwidth & Variable Network Delays | ✕                   | ✔                  |
| Long Processing Delays | ✕                   | ✔                  |

### The Proposed Solution

In this section, we introduce the proposed solution for detecting fast-flux bots. Our scheme assumes that bot herders exploit the bots to execute web-based malicious services, e.g., phishing pages or other types of fraudulent webpages. Specifically, the malicious software on the bots includes an HTTP server that listens to TCP ports 80/443 and accepts HTTP/HTTPS requests. Before describing the proposed scheme, we explain the rationale behind our design:
- **Realtimeness:** We expect the scheme to be able to detect fast-flux bots in real time, e.g., within a few seconds, so that we can prevent legitimate users from proceeding with malicious services in time.
- **Robustness:** We expect that the scheme will not be dependent on the signatures of certain botnet implementations. The scheme must be signature-independent to cope with updates from existing botnets and new, unknown botnet implementations without degrading the detection performance.
- **Lightweight:** We expect the scheme to be as lightweight as possible so that it can be deployed on any type of device without using too many computing resources.

Given the above guidelines, we propose a real-time, signature-less, and lightweight detection scheme for fast-flux bots based on their intrinsic characteristics (cf. Section 3). Under the scheme, if a client tries to download webpages from a web server suspected of being a fast-flux bot, the scheme will monitor the packet exchanges between the client and the server and issue additional HTTP requests if necessary. The decision about whether the server is part of a fast-flux botnet is based on measurements of the packet transmission and receipt times observed at the client. We call the web server that the client sends HTTP requests to a "suspect server" or simply a "server." However, the machine may only be a proxy, so it does not handle HTTP requests itself (e.g., in the case of fast-flux bots).

Next, we define the three delay metrics used to determine whether a suspect server is a fast-flux bot:
1. **Network Delay (ND):** The time required to transmit packets back and forth over the Internet between the client and the server.
2. **Processing Delay (PD):** The time required for the server to process a dummy HTTP request that does not incur any additional computation and I/O operations.
3. **Document Fetch Delay (DFD):** The time required for the server to fetch a webpage (either from a hard disk or from a back-end mothership).

Network delays occur at the network level, while the processing delays occur at the host level (i.e., at the suspect server). Document fetch delays are more complicated in that they may occur at the host level only (at the suspect server) if the request delegation model is not employed, or they may arise if the server delegates received requests to a mothership via the Internet. In the latter case, DFDs involve host-level delays (at the suspect server and the mothership node).