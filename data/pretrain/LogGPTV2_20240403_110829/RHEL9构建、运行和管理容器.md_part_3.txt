    和其他 acl 命令、`dmsetup`{.literal}
    和其他设备映射器命令，以及此处未提及的其他工具。
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-init-images_assembly_types-of-container-images}了解 UBI init 镜像 {.title}
:::
UBI init 镜像（名为 `ubi-init`{.literal}）包含 systemd
初始化系统，这有助于构建您要在其中运行 systemd 服务的镜像，如 web
服务器或文件服务器。init
镜像内容小于您使用标准镜像获得的内容，但要比最小镜像中的内容要多。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
由于 `ubi8-init`{.literal} 镜像构建在 `ubi8`{.literal}
镜像基础之上，因此它们的内容基本相同。但是，有几个关键的区别：
::: itemizedlist
-   `ubi8-init`{.literal}:
    ::: itemizedlist
    -   CMD 被设为 `/sbin/init`{.literal}，以默认启动 systemd Init 服务
    -   包括 `ps`{.literal} 和进程相关的命令（`procps-ng`{.literal}
        软件包）
    -   将 `SIGRTMIN+3`{.literal} 设为 `StopSignal`{.literal}，因为
        `ubi8-init`{.literal} 中的 systemd
        忽略正常信号退出（`SIGTERM`{.literal} 和
        `SIGKILL`{.literal}），但如果它收到
        `SIGRTMIN+3`{.literal}，则会终止
    :::
-   `ubi8`{.literal} :
    ::: itemizedlist
    -   CMD 设为 `/bin/bash`{.literal}
    -   不包含 `ps`{.literal} 和进程相关的命令（`procps-ng`{.literal}
        软件包）
    -   不要忽略正常信号退出（`SIGTERM`{.literal} 和
        `SIGKILL`{.literal}）
    :::
:::
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-minimal-images_assembly_types-of-container-images}了解 UBI 最小镜像 {.title}
:::
UBI 最小镜像(名为 `ubi-minimal`{.literal})
提供最小的预安装的内容集和软件包管理器(microdnf)。因此，您可以在最小化镜像中包含的依赖项时使用
`Containerfile`{.literal}。
UBI 最小镜像的主要功能包括：
::: itemizedlist
-   [**Small size**]{.strong}:最小镜像在磁盘和 32M 上进行压缩时，最少为
    92M。这比标准镜像小了多一半。
-   [**软件安装
    (`microdnf`{.literal})**]{.strong}:不包含为使用软件存储库和 RPM
    软件包而完全开发的 `dnf`{.literal} 工具，最小镜像包括
    `microdnf`{.literal} 工具。`microdnf`{.literal} 是 `dnf`{.literal}
    的缩小版，允许您启用和禁用存储库，删除和更新软件包，并在安装软件包后清除缓存。
-   [**Based on RHEL packaging**]{.strong}:最小镜像包含常规的 RHEL 软件
    RPM 软件包，但删除了一些功能。最小镜像不包括初始化和服务管理系统，如
    systemd 或 System V init、Python 运行时环境和一些 shell
    工具。您可以依赖 RHEL 存储库来构建镜像，同时承担尽可能少的开销。
-   [**支持 `microdnf`{.literal} 的模块**]{.strong}:与
    `microdnf`{.literal}
    命令一起使用的模块可让您安装同一软件的多个版本。您可以使用
    `microdnf module enable`{.literal}、`microdnf module disable`{.literal}
    和 `microdnf module reset`{.literal} 来分别启用、禁用和重置模块流。
    ::: itemizedlist
    -   例如，要在 UBI 最小容器中启用 `nodejs:14`{.literal}
        模块流，请输入：
        ``` literallayout
        # microdnf module enable nodejs:14
        Downloading metadata...
        ...
        Enabling module streams:
            nodejs:14
        Running transaction test...
        ```
    :::
:::
红帽只支持 UBI 的最新版本，不支持在点版本上的
parking。如果您需要在特定的点版上进行 park ，请参阅
[延长更新支持](https://access.redhat.com/articles/rhel-eus){.link}。
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#con_understanding-the-ubi-micro-images_assembly_types-of-container-images}了解 UBI 微镜像 {.title}
:::
`ubi-micro`{.literal} 可能是最小的 UBI
镜像，通过去掉软件包管理器及通常包含在容器镜像中的所有依赖项而得到。这可最小化基于
`ubi-micro`{.literal}
镜像的容器镜像的攻击面，并适用于最小的应用程序，即使您对其他应用程序使用
UBI Standard、Minimal 或 Init。没有 Linux 发行包的容器镜像称为
Distroless 容器镜像。
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#using-the-ubi-init-images_assembly_types-of-container-images}使用 UBI init 镜像 {.title}
:::
此流程演示了如何使用`Containerfile`{.literal} 构建容器，该 Containerfile
安装和配置 Web 服务器(`httpd`{.literal}) ，以便容器在主机系统上运行时由
systemd 服务（`/sbin/init`{.literal}）自动启动。如果在上下文目录中有
`Containerfile`{.literal}，则 `podman build`{.literal}
命令会使用它，如果没有，`podman build`{.literal} 命令将使用
`Containerfile`{.literal}；否则，可以使用 `--file`{.literal}
选项指定的任何文件。
::: orderedlist
**流程**
1.  在新目录中创建一个包含以下内容的 `Containerfile`{.literal} ：
    ``` literallayout
    FROM registry.access.redhat.com/ubi8/ubi-init
    RUN dnf -y install httpd; dnf clean all; systemctl enable httpd;
    RUN echo "Successful Web Server Test" > /var/www/html/index.html
    RUN mkdir /etc/systemd/system/httpd.service.d/; echo -e '[Service]\nRestart=always' > /etc/systemd/system/httpd.service.d/httpd.conf
    EXPOSE 80
    CMD [ "/sbin/init" ]
    ```
    `Containerfile`{.literal} 安装 `httpd`{.literal} 软件包，启用
    `httpd`{.literal}
    服务以便在引导时启动，创建一个测试文件(`index.html`{.literal})，将
    Web 服务器公开给主机（端口 80），并在容器启动时启动 systemd init
    服务(`/sbin/init`{.literal})。
2.  构建容器：
    ``` literallayout
    # podman build --format=docker -t mysysd .
    ```
3.  Optional.如果要使用 systemd 来运行容器，且在您的系统中启用了
    SELinux，则您必须设置 `container_manage_cgroup`{.literal} 布尔变量：
    ``` literallayout
    # setsebool -P container_manage_cgroup 1
    ```
4.  运行名为 `mysysd_run`{.literal} 的容器：
    ``` literallayout
    # podman run -d --name=mysysd_run -p 80:80 mysysd
    ```
    `mysysd`{.literal} 镜像作为 `mysysd_run`{.literal}
    容器运行，并作为守护进程，容器的端口 80 暴露在主机系统上的端口 80
    上。
    ::: variablelist
    [注意]{.term}
    :   在 rootless 模式中，您必须选择主机端口号 \>= 1024。例如：
        ``` screen
        $ podman run -d --name=mysysd -p 8081:80 mysysd
        ```
        要使用 \80/tcp  mysysd_run
    ```
6.  测试 Web 服务器：
    ``` literallayout
    # curl localhost/index.html
    Successful Web Server Test
    ```
:::
::: itemizedlist
**其他资源**
-   [Rootless Podman
    的缺点](https://github.com/containers/podman/blob/master/rootless.md#shortcomings-of-rootless-podman){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_types-of-container-images_building-running-and-managing-containers.html#proc_using-the-ubi-micro-images_assembly_types-of-container-images}使用 UBI 微镜像 {.title}
:::
此流程演示了如何使用 Buildah 工具构建 `ubi-micro`{.literal} 容器镜像。
::: itemizedlist
**先决条件**
-   `container-tools`{.literal} 模块已安装。
    ``` literallayout
    # dnf module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  拉取并构建 `registry.access.redhat.com/ubi8/ubi-micro`{.literal}
    镜像：
    ``` literallayout
    # microcontainer=$(buildah from registry.access.redhat.com/ubi9-beta/ubi-micro)
    ```
2.  挂载可正常工作的容器根文件系统：
    ``` literallayout
    # micromount=$(buildah mount $microcontainer)
    ```
3.  将 `httpd`{.literal} 服务安装到 `micromount`{.literal} 目录中：
    ``` literallayout
    # dnf install \
        --installroot $micromount \
        --releasever=/ \
        --setopt install_weak_deps=false \
        --setopt=reposdir=/etc/yum.repos.d/ \
        --nodocs -y \
        httpd
    # dnf clean all \
        --installroot $micromount
    ```
4.  在工作容器中卸载根文件系统：
    ``` literallayout
    # buildah umount $microcontainer
    ```
5.  从工作容器创建 `ubi-micro-httpd`{.literal} 镜像：
    ``` literallayout
    # buildah commit $microcontainer ubi-micro-httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  显示有关 `ubi-micro-httpd`{.literal} 镜像的详情：
    ``` literallayout
    # podman images ubi-micro-httpd
    localhost/ubi-micro-httpd latest 7c557e7fbe9f  22 minutes ago  151 MB
    ```
:::
:::
:::
[]{#assembly_working-with-container-images_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#assembly_working-with-container-images_building-running-and-managing-containers}第 3 章 使用容器镜像 {.title}
:::
Podman
工具被设计来处理容器镜像。您可以使用此工具来拉取镜像、检查、打标签、保存、加载、重新分发和定义镜像签名。
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#con_container-registries_assembly_working-with-container-images}容器 registry {.title}
:::
容器注册表是用来存储容器镜像和基于容器的应用工件的存储库或存储库的集合。红帽提供的注册表是：
::: itemizedlist
-   registry.redhat.io (需要身份验证)
-   registry.access.redhat.com（不需要身份验证）
-   registry.connect.redhat.com（保存 [Red Hat Partner
    Connect](https://connect.redhat.com/){.link} 程序镜像）
:::
要从远程注册表（如红帽自己的容器注册表）获取容器镜像，并将其添加到本地系统中，请使用
`podman pull`{.literal} 命令：
``` screen
# podman pull [:]/[/]:
```
其中 `[:]/[/]:`{.literal}
是容器镜像的名称。
例如，`registry.redhat.io/ubi8/ubi`{.literal} 容器镜像通过以下方式识别：
::: itemizedlist
-   注册表服务器(`registry.redhat.io`{.literal})
-   命名空间(`ubi8`{.literal})
-   镜像名称(`ubi`{.literal})
:::
如果同一镜像有多个版本，则请添加一个标签来明确指定镜像名称。默认情况下，Podman
使用 `:latest`{.literal} 标签，如 `ubi8/ubi:latest`{.literal}。
有些注册表也使用 [*\*]{.emphasis}
来区分不同用户或机构所拥有的具有相同 [*\*]{.emphasis}
的镜像。例如：
::: informaltable
  命名空间          示例（[*\*]{.emphasis}/[*\*]{.emphasis}）
  ----------------- ----------------------------------------------------------------------------------
  机构              `redhat/kubernetes`{.literal}，`google/kubernetes`{.literal}
  login（用户名）   `alice/application`{.literal}，`bob/application`{.literal}
  role              `devel/database`{.literal}、`test/database`{.literal}、`prod/database`{.literal}
:::
有关转换到 registry.redhat.io 的详情，请参阅 [Red Hat Container Registry
Authentication](https://access.redhat.com/RegistryAuthentication){.link}
。在从 registry.redhat.io 拉取容器前，您需要使用 RHEL
订阅凭证进行身份验证。
:::
::: section
::: titlepage
# []{#assembly_working-with-container-images_building-running-and-managing-containers.html#con_configuring-container-registries_assembly_working-with-container-images}配置容器注册表 {.title}
:::
您可以在 `registries.conf`{.literal} 配置文件中找到容器注册表的列表。以
root 用户身份，编辑 `/etc/containers/registries.conf`{.literal}
文件，来更改默认的系统范围的搜索设置。
以用户身份，创建 `$HOME/.config/containers/registries.conf`{.literal}
文件来覆盖系统范围的设置。
``` literallayout
unqualified-search-registries = ["registry.fedoraproject.org", "registry.access.redhat.com", "docker.io"]
```
默认情况下，`podman pull`{.literal} 和 `podman search`{.literal}
命令以指定顺序在 `unqualified-search-registries`{.literal}
列表中列出的注册表中搜索容器镜像。
::: variablelist