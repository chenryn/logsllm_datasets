Login name:dorkpro In real life:the dork parade
admin1#finger-m dorkpro
Neverloggedin.
gb:x:102:1:TemporaryAcct:/export/home/gb:/bin/csh
dorkpro:x:0:1:thedork parade:/export/home/dorkpro:/bin/csh
smtp:x:0:0:MailDaemon User:/:
adminl#tail/etc/passwd
rootpts/612:24pm6w
root console 9:09am 2days-csh
User ttylogin@idleJCPU PCPUwhat
12:24pm up148day(s),6:50,1user,load average:0.03,0.05,0.04
adminl#w
Address:172.16.6.66
Name:adminl.web.nosmarts.ca
Non-authoritative answer:
Address:192.168.0.5
Server:ns.lsp.net
>172.16.6.66
I检查Solaris上当前用户使用情况*Il
5
"*只搜索登录的用户名 dorkpro
法日人
20
---
## Page 210
造成的计算机故障。
的命令。它的主要用途是跟踪进程的系统调用、动态装入的用户级函数调用、接收的信号和
工具跟踪ps的执行来检查异常：文
怪，他通过 ps 命令无法发现任何可疑的的进程。他怀疑 ps 程序文件的完整性，于是用 truss
下来，徐幸福检查了受害人的Web服务器中的一个漏洞：
Ivar/log这个目录下的其他日志文件吗？
福碰到了个老到的攻击者，他一定破坏了 lastlog日志文件，还会仁慈地放过/var/adm 和
在 Solaris 中，如果需要跟踪系统的调用，以便查找和定位问题，truss是一个非常有用
注意：
徐幸福觉得他正在接近目标。他对 callog.root.DKB文件运行了 strings 命令：
/var/adm/wtmpx文件已经不完整，很可能抹掉了入侵的痕迹。
接着，徐幸福上传了一个wtmpx文件完整性检测程序到那台计算机，并运行它：
根据显示判断，这台计算机毫无疑问已经被人控制了。然而，徐幸福发现此计算机很奇
admin1# truss /bin/ps-afe
fstat(3,0xEFFFF89C)=0
open("/usr/lib/libc.so.1",O_RDONLY)=3
open("/var/Id/Id.config"，O_RDONLY)Err#2ENOENT
stat("/bin/ps",OxEFFFFB00)=0
period:biweeklynth:421ntimes:10
>>/tmp/bob;/usr/sbin/inetd-s/tmp/bob"duration:10
（add "Wed Dec3119:00:00 1969"key:1 what:""details:"/bin/ks
（accessread"world")
admin1# strings callog.root.DKB
-r--rw----1root
-rw-rw----1
drwxrwxr-x11root
drwxrwsrwt 2daemon daemon512Jul2002:50/
total3-
admin1#ls-la
admin1#cd/var/spool/calendar
wtmpxlookszapped!
admin1#./azx
**start oflog0nSatJul1702:50:212011****
Version:1
root
daemon 4012 Jul 17 02:50 callog.root.DKB
daemon0
bin
512Jul2002:50
I*strings命令可查找目标文件或二进制文件中可显示的字符串
Jul1702:50.lock.adminl
第6章UNIX后门与溢出案例分析187
更坏的消息还在后面。接
001001-51001
文本文个是
---
## Page 211
口气了。
的IP地址列表。徐幸福已经搜集到足够的信息，并可以提前向老板汇报。他终于可以松一
sniffers和一些无序的干扰文件。
为/dev/ptyrg的文件。徐幸福调出了那个文件的内容：
个文件。
常有上万个设备文件。可他用1s列目录却发现列出的文件和目录少得出奇，只能显示几
流行的脚本后门和工具。徐幸福决定检查一下/dev/目录下的隐藏文件。/dev/这个目录下通
启就可使用telnet。很明显，这些攻击者太马虎而没有清除后门，这意味着他们可能使用
这点：
件，这是个文本文件。
发现了如下可疑的进程：
188UNIX/Linux网络日志分析与流量监控
此时终于有了意外的收获：在/der/log.txt文件中包含一个攻击者已经攻破了的计算机
他知道 ls 程序肯定也出了毛病，因此他用处理 ps 的方式来检查它，发现 ls 读出一个名
telnet这种古老的远程连接命令还是能发挥作用的，要测试远程主机上某端口是否开
从以上显示来看，毫无疑问它是个后门。徐幸福登录此服务器的 ingreslock 端口来确认
在/dev/ptyrw 这个文件中根本不会有/tmp/bob 和 sniffer 这些敏感文件！接着他在系统中
这很奇怪，ps 本来不需要读取/dev/目录里的文件 ptyrw。徐幸福检查了这个文件：
徐幸福利用完整的ls命令检查了/dev/目录下的文件，并得到了一长串的文件列表，包括
这是个独立的守护进程，它独立于系统中的合法进程inetd。随后徐幸福查看了bob 文
admin1# telnet localhost ingreslock
root29131001:00:11?0:00/usr/sbin/inetd-s/tmp/bob
/dev/...
admin1#cat/dev/ptyrg
uid=0(root),gid=1(other)
Escape character is
Connected to 127.0.0.1.
Trying127.0.0.1...
admin1# cat/tmp/bob
sniffer
egdrop
rcbnc
/usr/sbin/inetd-s/tmp/bob
admin1#cat/dev/ptyrw
---
## Page 212
以下记录：
是：允许攻击者回访这台计算机。徐幸福发现 ps 程序可以从/dev/ptyrw目录下的文档中读出
一字符串出现在/tmp/bob文件中-这个文件被一个隐藏的inetd进程调用。最终的结果
录的内容：
中自己的登录记录，这是攻击者常见的做法。徐幸福进入了/var/spool/calendar目录并查看目
也是后门大开。徐幸福还在 passwd 中发现一个明显是后来加上去的 root 账号：
webfarm.nosmarts.ca。很明显，这台计算机是这个攻击者的另外一个跳板，因为这台计算机
条目中查到。从IDS日志记录中可以清楚地看到：
服务器是通过“rpc.cmsd”溢出被攻破的，详细的情况可以在 bugtraq 数据库内id为524的
案例解码
问题
以上内容露出了rpc.cmsd 溢出的迹象。溢出的有效载荷在文件里显而易见。实际上，这
这个DKB文件的内容为：
徐幸福用完整性检查程序检查了wtmpx 文件。他还注意到攻击者删除了登录记账文件
徐幸福接着追踪这个攻击者 IP，直到他追踪到一台位于加拿大的托管主机 nsl.
徐幸福将他的发现和自己的推测向上司作了汇报，包括攻击的时间线（timeline）。Web
.9
?
1.
。如果你是这个系统的管理员，将如何防止ls、ps 等重要系统程序被修改？
Lastlog完整性检查程序是如何工作的？聪明的攻击者如何避开lastlog检查？
dorkpro:x:0:1:thedorkparade:/expor/home/dorkpro:/bin/csh
有什么方法可以防止黑客删除日志呢？二
在处理已被攻破的计算机时，为什么使用静态编译的二进制文件是个好主意？
为什么徐幸福排除了CGI攻击的可能性？
/usr/sbin/inetd-s/tmp/bob
-r--rw--- 1 root daemon 4012Jul 17 02:50 callog.root.DKB
徐幸福如何通过ls的输出得知1s系统文件被做了修改？
Eggdrop
ircbnc
author:"root@evilcom" tags:(appointment, 1)) apptstat:active
period:biweeklynth:421ntimes:10
>>/tmp/bob;/usr/sbin/inetd-s/tmp/bob"duration:10
Version:1
第6章UNIX后门与溢出案例分析189
zhsine
E
单间
---
## Page 213
马程序，以便隐藏一些程序和进程。聪明的攻击者还可以用一个秘密的LKM 来修改内核，使
马库函数的动态连接。在徐幸福这个例子里，有几个程序，包括ps 和 ls，被攻击者植入了木
查人某种自信——
法，因为这台被入侵的计算机上的任何东西都不能信任了。使用静态编译的二进制程序能给调
统调用进行监视，详情见2.2节。
Linux平台下有个开源工具systrace 就能实现监视和控制应用程序的访问，能够对活跃的系
简单，只要系统管理员能够对系统调用进行监视，就可以提前发现这一问题。在UNIX
号记录，使用的方法是：写一个程序重建一个新的wtmpx日志文件，从而隐藏自己曾经留
完整性测试程序检查wtmpx文件的空条目。这些“空”条目是memsetO系统调用产生的，
分析解答
的列表。这名黑客最终受到了法律的制裁。
目录下的文件，于是他用自己的 Is 替换掉了 ls 文件，并且立刻发现了 log.txt 文件的内容。
制程序中也植入了木马，如同替换 ps一样。徐幸福认为攻击者想用替换了的 ls 隐藏特定
福确信只要telnet那个端口就可以获得管理员权限。紧接着，徐幸福发现攻击者在ls二进
列表约束，这将使它脱离与系统服务器进程之间的联系。这个/tmp/bob文件包含以下命令：
得他的任何行为都无法被察觉。
用来清除有害的条目；这是黑客常用的日志清除方法。这名攻击者能不露痕迹地删除所有账
际rpc.cmsd攻击开始之前。意
111)，说明攻击者已经掌握了这台受害主机的所有RPC服务情况的列表。这恰恰发生在实
个进程。徐幸福上传了他自己可靠的ps二进制程序，并找到了这个“后门”进程：
190UNIX/Linux网络日志分析与流量监控
下的蛛丝马迹。
口2）rpc.cmsd 在各个UNIX 系统（例如 IBM AIX、Solaris 9/10、HP-UX）中都有 lastlog
4）如果疑点落到一台具体的计算机上，使用静态编译的二进制程序检查是最好的解决办
3）如果高超的攻击者能够控制系统调用，以攻击系统，那么防范此类攻击的方法也很
1）本案例中讲述的RPC攻击很重要，因为pmap_dump请求端口映射服务（TCP 端口
根据这个 log.txt 文件的内容，徐幸福向权威机构提供了被这个攻击者攻击的其他计算机
这个文件在 TCP端口1524（ingreslock）上面派生了一个交互式的Bourne shell，徐幸
以“-s”参数启动的 inetd 进程运行在独立（stand-alone）模式下，不受主机的访问控制
很明显，这台计算机上的 ps 程序被植入了木马，以隐藏/tmp/bob 文件中匹配到的那几
徐幸福对Solaris相当熟悉，
#/usr/ucb/ls/dev...
root 291310 01:00:11?0:00/usr/sbin/inetd-s/tmp/bob
Sniffer
/dev...notfound
他使用的程序是可靠的。这个静态的程序不包含任何特洛伊代码或任何与木
，他知道在Solaris服务器中哪些输出是不存在的：
---
## Page 214
十
个网络嗅探器监控网络，时刻防止黑客们的再次攻击。
减轻这次事故所造成的损失，公司将服务器转至一台被安全工程师加固过的计算机，还用一
和高端UDP、TCP 端口将阻止大部分的 RPC 攻击。另外，及时更新补丁总是很重要的。为
预防措施
据库中，实际上就是系统的一个快照。
性如权限、inode 号、用户、用户组和连接数以及每个文件的加密校验都会被创建到一个数
整性检测工具，正确部署AIDE后（方法见本章6.5节），系统中的重要文件和文件相关的属
rootkit程序代替了。系统管理员需要安装入侵检测工具才能保证安全。AIDE是一个文件完
以检查相应时间的记录。
6.7
testuser，这样的结果会比较有用，我们截取部分记录来看：
但这样输出了所有用户的所有操作。我们可以使用lastcomm+用户名的格式，如lastcomm
/var/adm下，改为pacct，同时执行读取命令lastcomm，就可以调出用户所执行过的命令，
实际上他所有的操作都被记录下来了，管理员事后只要把commandlog这个文件复制到
者不会在/var/adm/下看到pacct。入侵者也许会删掉message，syslog等日志，但他并不知道
accton后面跟一个别的目录和文件即可，如/usr/lib/acct/accton/testuser/log/commanlog，这样入侵
如果他们看到有 pacct 这个文件，会立即删除。
发现。很多有经验的入侵者在进入目标系统后，一定不会放过/var/adm和/var/log 这两个目录，
行为。即使是对付最简单的入侵取证也要具备这种能力。
来似乎是微不足道的，但要求管理人员对系统高度熟悉，了解系统二进制程序的正常与反常
在这次入侵发生之前，过滤掉不必要的端口是最好的预防方法。禁止访问TCP端口111
7）当系统被侵入后，很多重要程序（例如 ls、Isof、ps和last 等系统工具）都可能被
6）黑客在攻陷系统后会修改日志，但这样做的缺点也是明显的，删除日志太多会被管理！
新老管理员在交接UNIX 服务器时，新任管理员发现了系统的 passwd、shadow 均被
可以看出，用户 testuser 所做的命令、时间等都被记录下来，这样在系统出现问题时可
5）攻击者修改了1s二进制程序，使之只返回一个提示符，这恰恰暴露了问题。这看起
案例八：真假root账号
/dev..:No such file or directory
who
#/bin/ls/dev...
S.
testuser pts/7 0.02 secs Mon Jun 1213:36
testuserpts/70.02secsMonJun1213:37
testuser pts/7 0.01 secs Mon Jun 1213:37
testuser pts/70.02se
testuserp
testuser pts/7 0.01
testuser pts/70.02
testuser pts/7 0.01
testuser pts/7 0.05 secsMon Jun 1213:28
pts/70.03
secs
secsN
secs
secs
secs
sMonJun1213:37
MonJun
MonJ
MonJ
Mon Jun 1213:39
Jun
Jun1
1213:38
1213:38
1213:39
一个比较好的解决办法是：执行usr/lib/acct
第6章UNIX后门与溢出案例分析191
员
---
## Page 215
他想先查看一些系统重启后容易丢失的数据。他看了一眼系统进程，如图6-9所示。