果里才会出现重复行。不过，这道例题使用的是连接查询，如果改用关
联子查询，就不需要DISTINCT了。请大家把这当作练习题，试着改写
-下
排序
在使用数据库制作各种票据和统计表的工作中，我们经常会遇到按分
数、人数或销售额等数值进行排序的需求。某些数据库管理系统（Database
Management System，DBMS）已经实现了这样的功能（如 Oracle、DB2
数据库的 RANK函数等）。
现在，我们要按照价格从高到低的顺序，对下面这张表里的商品进行
排序。我们让价格相同的商品位次也一样，而紧接着它们的商品则有两种
排序方法，一种是跳过之后的位次，另一种是不跳过之后的位次。
---
## Page 43
30
第1章神奇的 SQL
Products
me（商品名称）
pnice[价格）
苹果
60
橘子
100
葡萄
50
西瓜
80
柠檬
30
香蕉
50
注
如果使用窗口函数，可以像下面这样实现。
亦称OLAP 药数或分析系数。
编者注
--排序：使用窗口函数
SSLScr name, price,
RANK () OVER (ORDER BY price DESCI AS rank_1,
DENSE_RANK( oVER (ORDER BY price DEsC) AS rank_2
FROM Froduct8/
■执行结果
name
pr1ce
rank_1
rank_2
橘子
100
西瓜
80
1
苹果
50
香蕉
50
葡萄
50
3
柠檬
30
6
在出现相同位次后，rank_1跳过了之后的位次，rank_2没有跳过，
而是连续排序。代码很简洁，而且很容易理解。不过用到的RANK函数还
属于标准SQL中较新的功能，目前只有个别数据库实现了它，还不能用
于MySQL数据库。
所以我们还要考虑一下有没有不依赖于具体数据库来实现的方法。下
面是用非等值自连接（真的很常用）写的代码。
--排序从1开始。如果已出现相同位次，则跳过之后的位次
SSLSCT P1.nane,
P1.prlce,
(SELECT CoUBT (P2 -pr1ce)
KHERs P2.pzice > P1.price) + 1 AS rank_1
FROM Products P2
FEOM Producta P1
ORDER BY rank_1;
---
## Page 44
1-2白连接的用法—31
■执行结果
name
pr1ce
rank
橘子
1.00
西瓜
80
苹果
50
葡萄
50
香蕉
柠檬
50
30
这段代码的排序方法看起来很普通，但很容易扩展。例如去掉标量
子查询后边的+1，就可以从0开始给商品排序，而且如果修改成
COUNr（DISTINCT P2.price），那么存在相同位次的记录时，就可以
不跳过之后的位次，而是连续输出（相当于DENSE_RANK函数）。由此
可知，这条SQL语句可以根据不同的需求灵活地进行扩展，实现不同的
排序方式。
接下来，我们来了解一下这条SQL语句的执行原理。这道例题很好
地体现了面向集合的思维方式。子查询所做的，是计算出价格比自己高的
记录的条数并将其作为自已的位次。为了便于理解，我们先考虑从0开始，
对去重之后的4个价格“{100，80，50，30}”进行排序的情况。首先
是价格最高的100，因为不存在比它高的价格，所以coUNT函数返回o。
接下来是价格第二高的80，比它高的价格有一个100，所以cOUNT函数返
回1.同样地，价格为50的时候返回2，为30的时候返回3.这样，就生
成了一个与每个价格对应的集合，如下表所示。
■同心圆状的递归集合
集台
比自己高的价格
比自己高的价格的个数
这就是位次！
0S
100
0
S1
80
100
S2
50
100, 80
2
S3
30
100, 80, 50
3
---
## Page 45
●32
一第1章神奇的SQL
注0
Joe Celko 的 著作 (SIL 权威指
南)里握到了这个想法，其来通
然后数这些集合的元素个数。正如“同心圆状”这个词的字面意思那样，
可以波医型马 ·泌依显。
这几个集合之间存在如下包含关系。
0S C TS C ZS C ES
集合里有集合，再往里还有集合
实际上，“通过递归集合来定义数”这个想法并不算新颖。有趣的是，
它和集合论里沿用了100多年的自然数（包含0）的递归定义（recursive
注
definition）在思想上不谋而合。研究这种思想的学者形成了几个流派，
关于 SIL和集合论的关系，本书
2-7 节含有详辑介绍。
其中和这道例题的思路类型相同的是计算机之父、数学家冯·诺依曼提出
的想法。冯·诺依曼首先将空集定义为0，然后按照下面的规则定义了全
体自然数。
1 = (0]
0=
2 - {0, 1}
3 ={0. 1, 2}
定义完0之后，用0来定义1，然后用0和1来定义2，再用0、1
和2来定义3.以此类推。这种做法与上面例题里的集合S0～S3在
生成方法和结构上都是一样的（正是为了便于比较，例题里的位次才从
0开始）。这道题很好地直接结合了SQL和集合论，而联系二者的正是
自连接。
---
## Page 46
1-2自连接的用法一
33
顺便说一下，这个子查询的代码还可以像下面这样按照自连接的写法
来改写。
--排序：使用白连接
SELECT P1.name,
MAX (P1 -price)  AS price,
CoUNr (P2.namel +1 AS rank_1
FROM Froducts P1 L&FT OUIER JOIN Products P2
ON P1.price < P2.price
GROUP BY P1.Dane
ORDER BY rank_1J
去掉这条SQL语句里的聚合并展开成下面这样，就可以更清楚地看
出同心圆状的包含关系（为了看得更清楚，我们从表中去掉价格重复的行，
只留下橘子、西瓜、葡萄和柠檬这4行）。
不聚合，查看集合的包含关系
SELECT P1.name, P2.nane
FROM Producta P1 L&FT OOTER JOIN Pzoducta P2
ON P1.price < P2-pxice;
■执行结果
name
Dane
横子
西瓜
横子
51元素个数=1
横子
西感
22元个龄=2
柠檬
横子
柠檬
23元要个数=3
柠檬
西瓜
从执行结果可以看出，集合每增大1个，元素也增多1个，通过数集
合里元素的个数就可以算出位次。
此外，这个查询里还有一个特别的技巧，也许大家已经注意到了。那
就是前面的例题里用的连接都是标准的内连接，而这里用的却是外连接。
如果将外连接改为内连接看一看，马上就会明白这样做的原因。
---
## Page 47
34
一第1章神奇的SQL
--排序：改为内连接
SEL&CT P1.nane,
MAX (P1 -price)AS price,
couvr (P2 -namel  +1 AS rank_1
PROM Producte P1 INNER JOIN Products P2
ON P1.price < P2-price
GROUP BY P1.oane
ORDER BY rank_1J
■执行结果
-没有第1名！
name
price
rank_1
西瓜
50
B0
背莓
苹果
香蕉
50
50
柠檬
30
没错，第1名“橘子”竞然从结果里消失了。关于这一点大家思考一
下就能理解了。没有比橘子价格更高的水果，所以它被连接条件
P1.price<P2.price排除掉了。外连接就是这样一个用于将第1名也存
储在结果里的小技巧（这个小技巧在1-6节还会再次发挥重要作用）。
本节小结
本节，我们通过4个应用实例学习了自连接的一些知识。自连接是
不亚于CASE表达式的重要技术，请一定熟练掌握。最后说一个需要注意
的地方，与多表之间进行的普通连接相比，自连接的性能开销更大（特
别是与非等值连接结合使用的时候），因此用于自连接的列推荐使用主键
或者在相关列上建立索引。本节例题里出现的连接大多使用的是主键。
下面是本节要点。
1.自连接经常和非等值连接结合起来使用。
2.自连接和GROUPBY结合使用可以生成递归集合。
3.将自连接看作不同表之间的连接更容易理解。
4.应把表看作行的集合，用面向集合的方法来思考。
5.自连接的性能开销更大，应尽量给用于连接的列建立索引。
---
## Page 48
1-2自连接的用法—
35 
自连接是用途很广泛的技术，在本书中的出现频率仅次于CASE表达
式。如果想要了解更多信息，可以参考下面的文献资料。
1.JoeCelko，《SQL权威指南（第4版）》（人民邮电出版社，2013年）
注0
进节属于原书第2瓶,环be
关于非等值自连接，请参考17.4.1节“SelfNon-Equi-JOINs"；关于排序，
CeRe’s S0. for Serties: Adencef
请参考29.4.2节“广义极值函数”
IHorgn Kaufnms Pub, 1999 年 )
SGCL Progreeeimg Secod Edt:in
2.JceCelko，《SQL解惑（第2版）》（人民邮电出版杜，2008年）
中的内 春。在(SIL权威指南
 第 4 版 ) (人民邮电出版社,
可以说该书中的所有谜题都用到了自连接，其中有代表性的是用冯·诺
2013年|中未出现，故使用的是
依曼递归集合更新连续编号的“谜题4门禁卡”，以及用非等值自连接
英文标题。——编者注
题44成对的款式”等，都是很棒的技术。
练习题
练习题1-2-1：可重组合
请使用P.22的表Products，求出两列可重组合。结果应该如下所示。
name_1  Dane_2
香蕉
横子
香蕉
苹果
香蕉
香蕉
苹果
横子
苹果
横子
横子
因为是组合，所以（香蕉，橘子）和（橘子，香蕉）这样顺序相反的
对被视为相同的对。此外，因为允许重复，所以结果里也出现了（橘子，
橘子）这样的对。
练习题1-2-2：分地区排序
P.29的“排序”部分针对表的所有行计算了位次。这里准备了下面这