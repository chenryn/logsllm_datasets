### 2021/1/16
#### 从0到1：CTFer成长之路 - Nu1L战队 - 微信读书
##### 2.3 XSS的魔力

跨站脚本（Cross-Site Scripting，XSS）是一种常见的网站应用程序安全漏洞，属于代码注入攻击的一种。通过这种攻击，恶意用户可以将有害代码注入网页，从而影响其他用户的浏览体验。这类攻击通常涉及HTML和客户端脚本语言。

XSS攻击通常是利用网页开发时留下的漏洞，将恶意指令代码巧妙地注入到网页中，使得用户加载并执行这些恶意代码。这些恶意代码多数是JavaScript，但也可以包括Java、ActiveX、Flash或普通的HTML。一旦攻击成功，攻击者可能获得更高的权限，如执行特定操作、访问私密网页内容、会话信息以及Cookie等。（摘自维基百科）

正如上文所述，XSS攻击是一种代码注入攻击。尽管浏览器已经采取了多种防御措施，例如为关键Cookie添加`HttpOnly`属性，以防止通过XSS窃取登录凭证，同源策略也限制了JavaScript跨域执行的能力，但XSS攻击仍然可以在用户浏览器上执行恶意代码，实现模拟用户操作（如文件上传等）。在CTF比赛中，这种类型的XSS题目经常出现。

##### 2.3.1 XSS漏洞类型

根据触发特征，XSS漏洞可以分为反射型XSS和存储型XSS：

1. **反射型XSS**：恶意代码未被服务器存储，而是通过GET/POST请求提交并在页面上直接显示。每次触发都需要重新提交恶意代码。
2. **存储型XSS**：恶意代码被服务器存储，在用户访问相关页面时自动触发。例如，留言板中的恶意留言会在用户查看时执行。

**示例**：
- **反射型XSS**：假设有一个简单的输入点，没有任何过滤直接输出到HTML中（图2-3-1），攻击者可以通过注入恶意标签和代码来实现攻击（图2-3-2）。然而，这样的payload可能会被现代浏览器（如Google Chrome）拦截，因为它们符合XSS过滤器规则。使用Firefox浏览器则可能成功（图2-3-3）。

- **存储型XSS**：当输入数据被拼接到HTML内容中，特别是在标签属性或JavaScript变量值中时，可以通过闭合标签或语句来逃逸过滤（图2-3-4至图2-3-7）。由于特征明显，现代浏览器通常会拦截此类攻击。

**其他场景**：
- **Content-Type头**：决定上传文件是否被解析为HTML的关键因素是HTTP响应头中的`Content-Type`。无论文件后缀如何，只要返回的`Content-Type`是`text/html`，浏览器就会将其解析并执行。类似地，Flash文件的`application/x-shockwave-flash`也可以用于XSS攻击。
- **空或畸形的Content-Type**：浏览器默认将响应视为HTML内容解析，因此空或畸形的`Content-Type`也可能导致XSS攻击。不同浏览器的行为存在差异，需要进行多测试验证。

##### 2.3.2 XSS的技巧

1. **可执行XSS的标签**：
   - 大多数HTML标签都可以通过`on`事件触发恶意代码（图2-3-14）。
   - `img`标签也是一个常用的手段，通过`onerror`事件执行代码（图2-3-15）。
   - 其他常见标签如`a`、`form`、`iframe`等也可用于XSS攻击。

2. **HTML5特性的XSS**：
   - HTML5的一些特性可以用于XSS攻击，例如`input`标签的`autofocus`属性会自动聚焦并触发`onfocus`事件（图2-3-18）。

3. **伪协议与XSS**：
   - 浏览器中常用的协议是HTTP/HTTPS，但在页面中可以使用JavaScript伪协议（如`javascript:alert(1)`）来执行代码（图2-3-16）。
   - `iframe`和`form`标签也支持JavaScript伪协议，不同的地方在于`iframe`不需要交互即可触发，而`form`需要提交表单才能触发。
   - 其他伪协议如`data:`也可以在`iframe`中实现类似效果。

4. **二次渲染导致的XSS**：
   - 后端模板引擎如Flask的Jinja2如果使用不当，可能导致模板注入，进而引发XSS攻击。例如，在AngularJS中，不正确的参数处理会导致前端模板注入（图2-3-17）。

通过以上介绍，我们可以更好地理解和防范XSS攻击。希望这些内容对你的CTF学习有所帮助。