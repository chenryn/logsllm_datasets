  create database zabbix character set utf8;
  exit;
mysql_upgrade -u root -p
mysql -u root -p
  create user zabbix@'%' identified by '{mysql_zabbix_password}';
  grant all privileges on zabbix.* to zabbix@'%';
  flush privileges;
  exit;
```
**安装 zabbix**
```bash
rpm -ivh https://repo.zabbix.com/zabbix/4.2/rhel/7/x86_64/zabbix-release-4.2-1.el7.noarch.rpm
yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-java-gateway zabbix-web
cd /usr/share/doc/zabbix-server-mysql-4.2.1
zcat create.sql.gz | mysql -uroot zabbix -p
```
- 配置 zabbix 参数
  ```vim
  vim /etc/zabbix/zabbix_server.conf
  DBPassword={mysql_zabbix_password}
  CacheSize=512M
  HistoryCacheSize=128M
  HistoryIndexCacheSize=128M
  TrendCacheSize=128M
  ValueCacheSize=256M
  Timeout=30
  ```
  如果需要监控 VMware 虚拟机,则还需要设置以下选项参数:
  ```vim
  StartVMwareCollectors=2
  VMwareCacheSize=256M
  VMwareTimeout=300
  ```
**配置 Apache 中的 PHP 参数**
```vim
vim /etc/httpd/conf.d/zabbix.conf
php_value max_execution_time 600
php_value memory_limit 256M
php_value post_max_size 32M
php_value upload_max_filesize 32M
php_value max_input_time 600
php_value always_populate_raw_post_data -1
date.timezone Asia/Shanghai
```
**配置 PHP 参数**
```vim
vim /etc/php.ini
php_value post_max_size 32M
max_execution_time 300
max_input_time 300
date.timezone Asia/Shanghai
```
**重启&起服务**
```bash
systemctl stop mysqld && reboot
systemctl start httpd && systemctl start zabbix-server
systemctl stop firewalld
setenforce 0    # 关闭 selinux
```
访问 `http://ip地址/zabbix/setup.php`
**Source & Reference**
- [CentOS 7安装Zabbix 3.4](https://www.centos.bz/2017/11/centos-7%E5%AE%89%E8%A3%85zabbix-3-4/)
---
## 容器&虚拟化
### Docker
> 更多 Docker 相关知识参考 [Docker笔记](../容器/Docker.md)
**官网**
- https://www.docker.com
**安装**
- **官方一条命令版(不兼容 kali)**
  ```bash
  curl -sSL https://get.docker.com/ | sh
  ```
- **CentOS7 下安装**
  ```bash
  yum install -y yum-utils device-mapper-persistent-data lvm2
  wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo
  sed -i 's+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo
  yum makecache fast
  yum install -y docker
  systemctl start docker
  ```
- **CentOS8 下安装**
  ```bash
  dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
  dnf list docker-ce
  dnf install docker-ce --nobest -y
  systemctl start docker
  systemctl enable docker
  docker --version
  ```
- **debian 下安装**
  ```bash
  apt remove docker docker-engine docker.io
  apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    gnupg
  curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | apt-key add -
  echo 'deb https://download.docker.com/linux/debian stretch stable'> /etc/apt/sources.list.d/
  apt update
  apt install -y docker-ce
  docker version
  systemctl start docker
  docker login              # 一般不需要账户登录
  ```
**使用**
- 启动,暂停以及启用 Docker
  ```
  systemctl start docker
  systemctl enable docker
  systemctl stop docker
  systemctl restart docker
  ```
- 拉取镜像
  ```bash
  docker image ls                # 检查一下系统中已经有了哪些镜像
  docker pull nginx               # 拉取一个镜像
  docker search nginx             # 搜索 Docker Hub 中的所有 Nginx 镜像
  docker pull jwilder/nginx-proxy # 从非官方源拉取镜像
  ```
- 常用命令
  ```bash
  docker version                              # 查看 docker 版本
  docker run -it [docker_image_id] bash       # 运行一个容器实例
  docker run -d -p 物理端口1:容器端口1 -p 物理端口2:物理端口2 --name 容器名 :
    docker run --name=test -p 1234:1234 -itd ubuntu /bin/bash
    # 使用本地 1234 端口连接 docker 的 1234 端口运行 ubuntu 镜像，并将其临时命名为 test
    # test：为临时名称，可以自定义填写。
    # -p： 第一个端口为本机的端口，第二个端口为 Docker 的端口。
    # -itd：意思是在后台运行，交互式运行，并且输出当前的信息
    # /bin/bash：调用 Shell
    docker run -d -p 8080:80 -v 本机路径:容器路径 --name 容器名  : # 磁盘挂载
  docker stop [docker_name/docker_id]               # 停止容器
  docker start [options] container [container...]   # 启动一个或多个已停止的容器
  docker exec -it [docker_id] bash                  # 获取容器的 shell
  docker kill                                       # 杀死容器
  docker commit [docker_id] [docker_image_id]       # 提交并保存容器状态
  docker logs [options] [docker_name/docker_id]     # 查看docker容器日志
  docker logs [options] [docker_name/docker_id] --tail 100  # 日志最后的100行
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' [docker_name/docker_id]  # 查看容器 ip 地址
  docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]  # 标记本地镜像，将其归入某一仓库。
    docker tag centos centos:v1                     # 给 centos 镜像打标签
    docker tag ubuntu:15.10 test/ubuntu:v3          # 将镜像 ubuntu:15.10 标记为 test/ubuntu:v3 镜像。
    docker run -itd centos:v1                       # 运行 centos:v1 镜像
  docker rm [docker_name/docker_id]                 # 删除容器
  docker rmi $(docker images -f "dangling=true" -q) # 删除 docker 悬空镜像
  docker ps                                         # 查看当前运行的 docker 容器的进程信息
    docker ps -a                                    # 查看当前容器
  docker stats                                      # 统计信息
  docker cp xxx.txt [docker_id]:/home               # 复制 xxx.txt 到容器的 /home 目录下
  docker cp [docker_id]:/home/test.txt /tmp/xxx.txt # 复制容器 /home/text.txt 文件到宿主机 /tmp 目录
  docker hisotry [docker_name/docker_id]            # 查看指定镜像的创建历史
  ```
**容器保活**
```
tail
top
tail -f /var/log/cron.log
init
```
**加速**
- [Docker 镜像加速](../../Plan/Misc-Plan.md#Docker)
**更多内容**
- [Docker](./实验/Docker.md)
#### Docker-Compose
> Docker-Compose 是一个部署多个容器的简单但是非常必要的工具.
**项目地址**
- https://github.com/docker/compose
**安装**
下载二进制包 https://github.com/docker/compose/releases
然后将文件上传到 `/usr/local/bin/` 文件夹下,然后将其重命名为 docker-compose,修改此文件的权限,增加可执行权限
```bash
wget https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Linux-x86_64
mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
```
或直接采用 pip 安装
```bash
pip3 install docker-compose
```
```bash
docker-compose build
docker-compose up -d
docker-compose stop
```
```bash
docker-compose ps     # 查看当前的使用 docker-compose up -d 开启的容器进程信息
docker-compose up -d  # 使用本地的 docker-compose.yml 开启相关的容器
docker-compose down   # 终止当前的使用 docker-compose up -d 开启的容器
docker-compose exec [service] sh  # 进入容器内
```
**常见报错**
- ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule
  原因是关闭防火墙之后 docker 需要重启，执行以下命令重启 docker 即可：
  ```bash
  systemctl daemon-reload
  service docker restart
  ```
- ERROR: Service 'xxxxxx' failed to build : Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on xx.xx.xx.xx: server misbehaving
  dns 服务器的错误，把 dns 服务器改下就行
  ```bash
  vim /etc/resolv.conf
  nameserver 1.1.1.1
  ```
- [3927] Error loading Python lib '/tmp/_MEIuQps8Y/libpython3.9.so.1.0': dlopen: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28' not found (required by /tmp/_MEIuQps8Y/libpython3.9.so.1.0)
  python 版本的问题, 换 python3.7 以上或用 pip 安装即可
**更多内容**
- [Docker-Compose](./实验/Docker-Compose.md)
#### Docker-Portainer
> Portainer 是 Docker 一款可视化管理用具，部署简单，推荐。
**官网**
- https://www.portainer.io/
**部署**
```bash
docker pull portainer/portainer         # 拉取镜像
docker volume create portainer_data
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce   # 部署
```
访问 ip:9000 进入到设置密码界面.
#### ctop
> 用于 docker 版的 top
**仓库地址**
- https://github.com/bcicen/ctop
---
### Kubernetes
#### kubectl
**显示和查找资源**
```bash
kubectl get services                          # 列出所有 namespace 中的所有 service
kubectl get pods -A                           # 列出所有 namespace 中的所有 pod
kubectl get pods -o wide                      # 列出所有 pod 并显示详细信息
kubectl get deployment -A                     # 列出所有 deployment
```
**与运行中的 Pod 交互**
```bash
kubectl logs my-pod                                     # 获取 pod 日志（标准输出）
kubectl logs -l name=myLabel                            # 获取含 name=myLabel 标签的 Pods 的日志（标准输出）
kubectl logs my-pod --previous                          # 获取上个容器实例的 pod 日志（标准输出）
kubectl logs my-pod -c my-container                     # 获取 Pod 容器的日志（标准输出, 多容器场景）
kubectl logs -l name=myLabel -c my-container            # 获取含 name=myLabel 标签的 Pod 容器日志（标准输出, 多容器场景）
kubectl logs my-pod -c my-container --previous          # 获取 Pod 中某容器的上个实例的日志（标准输出, 多容器场景）
kubectl logs -f my-pod                                  # 流式输出 Pod 的日志（标准输出）
kubectl logs -f my-pod -c my-container                  # 流式输出 Pod 容器的日志（标准输出, 多容器场景）
kubectl logs -f -l name=myLabel --all-containers        # 流式输出含 name=myLabel 标签的 Pod 的所有日志（标准输出）
kubectl run -i --tty busybox --image=busybox:1.28 -- sh # 以交互式 Shell 运行 Pod
kubectl run nginx --image=nginx -n mynamespace          # 在 “mynamespace” 命名空间中运行单个 nginx Pod
kubectl run nginx --image=nginx                         # 运行 ngins Pod 并将其规约写入到名为 pod.yaml 的文件
  --dry-run=client -o yaml > pod.yaml
kubectl attach my-pod -i                                # 挂接到一个运行的容器中
kubectl port-forward my-pod 5000:6000                   # 在本地计算机上侦听端口 5000 并转发到 my-pod 上的端口 6000
kubectl exec my-pod -- ls /                             # 在已有的 Pod 中运行命令（单容器场景）
kubectl exec --stdin --tty my-pod -- /bin/sh            # 使用交互 shell 访问正在运行的 Pod (一个容器场景)
kubectl exec my-pod -c my-container -- ls /             # 在已有的 Pod 中运行命令（多容器场景）
kubectl top pod POD_NAME --containers                   # 显示给定 Pod 和其中容器的监控数据
kubectl top pod POD_NAME --sort-by=cpu                  # 显示给定 Pod 的指标并且按照 'cpu' 或者 'memory' 排序
```
**从容器中复制文件和目录**
```bash
kubectl cp /tmp/foo_dir my-pod:/tmp/bar_dir             # 将 /tmp/foo_dir 本地目录复制到远程当前命名空间中 Pod 中的 /tmp/bar_dir
kubectl cp /tmp/foo my-pod:/tmp/bar -c my-container     # 将 /tmp/foo 本地文件复制到远程 Pod 中特定容器的 /tmp/bar 下
kubectl cp /tmp/foo my-namespace/my-pod:/tmp/bar        # 将 /tmp/foo 本地文件复制到远程 “my-namespace” 命名空间内指定 Pod 中的 /tmp/bar
kubectl cp my-namespace/my-pod:/tmp/foo /tmp/bar        # 将 /tmp/foo 从远程 Pod 复制到本地 /tmp/bar
```
> kubectl cp 要求容器镜像中存在 “tar” 二进制文件。如果 “tar” 不存在，kubectl cp 将失败
**与节点和集群进行交互**
```bash
kubectl cordon my-node                                                # 标记 my-node 节点为不可调度
kubectl drain my-node                                                 # 对 my-node 节点进行清空操作，为节点维护做准备
kubectl uncordon my-node                                              # 标记 my-node 节点为可以调度
kubectl top node my-node                                              # 显示给定节点的度量值
kubectl cluster-info                                                  # 显示主控节点和服务的地址
kubectl cluster-info dump                                             # 将当前集群状态转储到标准输出
kubectl cluster-info dump --output-directory=/path/to/cluster-state   # 将当前集群状态输出到 /path/to/cluster-state
# 如果已存在具有指定键和效果的污点，则替换其值为指定值。
kubectl taint nodes foo dedicated=special-user:NoSchedule
```
---
### QEMU
> QEMU 是一款开源的模拟器及虚拟机监管器。QEMU 主要提供两种功能给用户使用。一是作为用户态模拟器，利用动态代码翻译机制来执行不同于主机架构的代码。二是作为虚拟机监管器，模拟全系统，利用其他VMM(Xen, KVM, etc)来使用硬件提供的虚拟化支持，创建接近于主机性能的虚拟机。
**官网**
- https://www.qemu.org/
**项目地址**
- https://github.com/qemu/QEMU
**安装**
- Centos下
  ```bash
  yum install -y qemu
  ```
- Ubuntu下
  ```bash
  apt-get install -y qemu
  ```
---
## 分布式
### ZooKeeper
    这个Logo是什么鬼啊🤣🤣🤣,笑死我了
**官网**
- https://zookeeper.apache.org/
**安装**
依赖 jdk,安装过程见 [JDK](#jdk)
zookeeper 支持两种运行模式:独立模式(standalone)和复制模式(replicated).
真正用于生产环境的 Zookeeper 肯定都是使用复制模式的,这样做可以避免单点问题.想要使用复制模式,但由于没有富余的机器能够使用,所以可以在单台机器上通过配置来使用复制模式,从而模拟真实的集群环境.
由于 Zookeeper 集群是通过多数选举的方式产生 leader 的,因此,集群需要奇数个 Zookeeper 实例组成,也就是说至少需要3台(1台不能算"群").
这里配置的为 `独立模式`
```bash
wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz
mkdir /usr/local/zookeeper
tar -zxvf zookeeper-3.4.14.tar.gz -C /usr/local/zookeeper/
cd /usr/local/zookeeper/zookeeper-3.4.14/conf/
cp zoo_sample.cfg zoo.cfg
```
创建数据存储目录与日志目录
```bash
mkdir /usr/local/zookeeper/zookeeper-3.4.14/dataDir
mkdir /usr/local/zookeeper/zookeeper-3.4.14/dataLogDir
```
修改数据存储和日志目录
```vim
vim /usr/local/zookeeper/zookeeper-3.4.14/conf/zoo.cfg
dataDir=/usr/local/zookeeper/zookeeper-3.4.14/dataDir
dataLogDir=/usr/local/zookeeper/zookeeper-3.4.14/dataLogDir
```
```bash
# 启动
/usr/local/zookeeper/zookeeper-3.4.14/bin/zkServer.sh start
# 连接
/usr/local/zookeeper/zookeeper-3.4.14/bin/zkCli.sh
```
---
## 安全服务
### ClamAV