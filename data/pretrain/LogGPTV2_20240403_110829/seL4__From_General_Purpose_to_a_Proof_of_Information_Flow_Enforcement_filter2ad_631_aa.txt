title:seL4: From General Purpose to a Proof of Information Flow Enforcement
author:Toby C. Murray and
Daniel Matichuk and
Matthew Brassil and
Peter Gammie and
Timothy Bourke and
Sean Seefried and
Corey Lewis and
Xin Gao and
Gerwin Klein
2013 IEEE Symposium on Security and Privacy
seL4: from General Purpose to a Proof of Information Flow Enforcement
Toby Murray∗†, Daniel Matichuk∗, Matthew Brassil∗, Peter Gammie∗, Timothy Bourke∗,
Sean Seefried∗, Corey Lewis∗, Xin Gao∗ and Gerwin Klein∗†
∗NICTA and †University of New South Wales, Sydney, Australia
Email: ﬁPI:EMAIL
Abstract—In contrast to testing, mathematical reasoning and
formal veriﬁcation can show the absence of whole classes of
security vulnerabilities. We present the, to our knowledge, ﬁrst
complete, formal, machine-checked veriﬁcation of information
ﬂow security for the implementation of a general-purpose mi-
crokernel; namely seL4. Unlike previous proofs of information
ﬂow security for operating system kernels, ours applies to the
actual 8,830 lines of C code that implement seL4, and so rules
out the possibility of invalidation by implementation errors in
this code. We assume correctness of compiler, assembly code,
hardware, and boot code. We prove everything else. This proof
is strong evidence of seL4’s utility as a separation kernel, and
describes precisely how the general purpose kernel should be
conﬁgured to enforce isolation and mandatory information ﬂow
control. We describe the information ﬂow security statement
we proved (a variant of intransitive noninterference), including
the assumptions on which it rests, as well as the modiﬁcations
that had to be made to seL4 to ensure it was enforced. We
discuss the practical limitations and implications of this result,
including covert channels not covered by the formal proof.
I. INTRODUCTION
Provably secure operating systems have been a research
topic for more than 30 years [11], [17], [47], [53], and
while there are a number of small high-assurance separation
kernels [25] in deployment such as INTEGRITY-178B [44],
even the strongest
levels of security evaluation schemes
such as Common Criteria do not demand implementation-
level proofs, which have been widely thought infeasible.
Modern mainstream OSes are riddled with security problems
as is to be expected for large monolithic systems, and even
implementations of the proposed mainstream ﬁx for this
problem, hypervisors like Xen [7], have been shown to
exhibit a number of critical vulnerabilities [39].
formal,
This paper presents the ﬁrst
fully machine-
checked, mathematical proof
that a high-performance,
general-purpose microkernel C code implementation en-
forces strong information ﬂow control. Together with the
existing proofs of seL4’s functional correctness [27] and in-
tegrity enforcement [51], this work shows that seL4 provably
enforces strong access control mechanisms, in particular the
high-level security properties of conﬁdentiality and integrity.
Our proof assumptions explicitly state how to conﬁgure
this general-purpose OS kernel to enforce isolated partitions
with controlled communication channels. Unlike previous
information ﬂow veriﬁcations ours applies to the actual
8,830 lines of C code that implement seL4, rather than to a
manually abstracted model of its behaviour. Our main proof
assumptions stem from the foundational work on functional
correctness [27]. We assume correctness of compiler, as-
sembly code, hardware, and boot code; we prove everything
else. The veriﬁed seL4 kernel runs on commodity ARMv6
and ARMv7 hardware and is available commercially under
the product name OKL4:veriﬁed, as well as freely in binary
form for academic use [41].
The information ﬂow property we prove for seL4 is
a variant of intransitive noninterference [19], [40], [46]
proposed for OS kernels [36]. This property enforces conﬁ-
dentiality on storage channels and logical time. As is usual
for noninterference results, ﬁne-grained timing behaviour of
the hardware is not covered by the formal baseline model
and therefore neither by the proof. This means covert timing
channels still need to be mitigated by complementary (e.g.
probability-based) techniques. We argue that for modern
commodity hardware the absence of such channels is not
fully enforceable and that the best that can be expected is
to reduce channel bandwidth based on the risk proﬁle of a
particular deployment.
We analyse the limitations and strength of the proof
statement in detail in Section V. By formally stating the
assumptions under which seL4 enforces information ﬂow
security, this result also provides an unambiguous descrip-
tion of how seL4 should be conﬁgured to enforce a par-
ticular information ﬂow policy. The strongest restriction on
such conﬁgurations is the absence of direct memory access
(DMA) for devices. This is not an unusual restriction, and is
shared with commercial separation kernels in deployment.
New hardware mechanisms such as IOMMUs [3] may
enable us to relax this in the future.
In detail, the technical contributions of this work are:
• to our knowledge,
the most detailed and extensive
machine-checked formal veriﬁcation of information
ﬂow security ever for a general-purpose OS kernel;
• a formal, and thus precise and unambiguous, descrip-
tion on how to conﬁgure the general-purpose seL4
microkernel to enforce a given information ﬂow policy;
• achieving the above results without sacriﬁcing perfor-
mance or preventing the use of the dynamic general-
purpose microkernel API inside partitions.
To achieve this result, we extended the seL4 API only
minimally by adding a static partition-based scheduler com-
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.35
415
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
mon to separation kernels. We disallow none of the seL4
API other than requiring that seL4 be conﬁgured to pre-
vent asynchronous interrupt delivery to user-space partitions
which would introduce an information channel. This means
that device drivers must poll for device interrupts via mem-
ory mapped IO, which is typical behaviour for separation
kernels [42] and high-assurance systems.
While traditional separation kernels typically provide no
system calls at all after initial conﬁguration, in our general-
purpose seL4 setting, all other kernel facilities are available
within partitions, including dynamic memory allocation and
revocation, (intra-partition) inter-thread messaging, capabil-
ity transfer and shared memory. Between partitions, seL4
provides asynchronous notiﬁcations and shared memory to
facilitate uni-directional communication. The information
ﬂow security theorem implies that these primitives are free of
storage back-channels, and that the dynamic intra-partition
services do not violate information ﬂow security either. A
modiﬁed version of the paravirtualised Linux system Wom-
bat [29] allows an entire Linux instance and its applications
to run within a partition. This enables mandatory information
ﬂow control policies to be enforced between untrusted and
legacy applications, with guarantees on information ﬂow
provided by a strong machine-checked theorem.
During this proof of noninterference we did not ﬁnd any
information-ﬂow problems in the seL4 kernel that required
code changes, as we had hoped given the previous intensive
work on proving functional correctness and integrity. We
did, however, ﬁnd a number of API features that had to
be explicitly forbidden for inter-partition use. For experts,
most of these were not surprising. For instance it is well-
known that synchronous IPC will introduce an information
ﬂow back-channel, but the proof clearly identiﬁed all in-
stances. This included a number of cases that were not
immediately obvious, such as capability deletion potentially
and observably crossing partition boundaries. All of these
could be excluded by reasonable restrictions on supported
seL4 conﬁgurations, detailed in Section IV and summarised
in Section V.
Our security proof—like all others—is not an iron-clad
statement of general security for seL4, but rather a powerful
piece of evidence about seL4’s security mechanisms and its
suitability as a separation kernel. Importantly, any system-
level security evaluation can now concentrate its effort on
validating proof assumptions, which is a much simpler job
than asserting information ﬂow security, and on using com-
plementary techniques for the remaining items that are not
covered by our proof (detailed in Section V). Furthermore,
the proof statement addresses whole high-level classes of
attack such as information leakage to conﬁned subjects
without access to timing sources, and the evaluation can be
guided by precise formal statements of policy and system
deployment assumptions. The security proof gives precise
predictions about the strength of mechanisms; the previous
functional correctness proof shows that these mechanisms
will be reliably enforced by the implementation.
The remainder of this paper is organised as follows. We
brieﬂy summarise the attacker/threat model in Section II. We
then discuss background material in Section III, including
the seL4 API and how it can be used to implement separation
and information ﬂow control, as well as past formal seL4
veriﬁcation work that our proof builds upon. We present our
formal statement of information ﬂow security and discuss
its proof in Section IV. We consider its implications and
limitations in Section V. Section VI situates our result in
the context of related work before we conclude.
II. THREAT MODEL
Our target deployment scenario is a physically secured,
high-assurance, uni-processor system with trusted hardware.
The system may potentially have access to untrusted net-
works and run mutually distrusting application software. The
security goal for the kernel is to only permit information
ﬂows according to the partitions and information ﬂow policy
it was conﬁgured with.
The threat model assumes that all user-level code after
system initialisation is malicious and acting in concert to
break the information ﬂow policy. The attacker’s goal is to
read or indirectly infer the contents (i.e. private state) of a
partition that according to the information ﬂow policy should
remain secret to it. The attacker is assumed to know the
conﬁguration and code of the entire system, including the
kernel, but not the contents of other partitions.
As mentioned, timing channels are not in the scope of this
proof and must be analysed by complementary techniques.
The channels that are in scope are storage channels and
causal deduction. The attacker may run any sequence of
instructions or attempt any kernel call, to break the infor-
mation ﬂow policy. Our proof statement is that, subject to
the limitations and assumptions discussed in Section V, the
attacker will not succeed.
III. BACKGROUND
A. The seL4 Kernel API
The seL4 microkernel provides a minimal set of mecha-
nisms for implementing secure systems: threads, capability
management, virtual address spaces, inter-process commu-
nication (IPC), and interrupt delivery. The state of each
instance of a service is maintained within the kernel by
data structures termed kernel objects. For example, for each
thread in a system there is a thread object
that stores
the information about
to scheduling,
execution, and access control. User-space programs can only
refer to kernel objects indirectly through capabilities [16],
each of which combines a reference to a speciﬁc object with
a set of access rights. For example, a thread cannot start,
stop, or read or modify the registers of another unless it
possesses a capability for the corresponding thread object.
the thread relevant
416
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
Capabilities are managed by the kernel, and stored in
kernel objects called CNodes. Each thread object also con-
tains several distinguished capabilities. One of these deﬁnes
the root of a thread’s CSpace: a directed graph of the
CNodes the thread can access. A user-space program refers
to capabilities in its CSpace via addresses that specify paths
relative to its CSpace root. It is possible to fabricate an
address but never a capability; invalid addresses are simply
rejected during decoding. We say that a thread invokes a
capability when it passes the address of that capability to a
system call. For instance, a CNode capability can be invoked
to copy, move, delete, or derive (reduce the associated access
rights of) the capabilities contained within it.
Besides access control, capabilities also serve to manage
memory. Unallocated memory is made available through
Untyped memory capabilities that can be retyped into kernel
objects like CNodes or thread objects. Retyping creates fresh
capabilities that refer to the newly created objects, and which
are derived from the original Untyped capability. The revoke
system call deletes all capabilities derived from the invoked
Untyped capability, which effectively reclaims all resources
allocated from within it and is a useful way of destroying
an entire subsystem in a single system call.
Untyped memory can also be allocated to kernel ob-
jects representing page directories, page tables, and pages.
Another of the distinguished capabilities stored in each
thread object refers to the page directory at the root of
the associated thread’s virtual address space (VSpace). By
invoking this capability, and those for the associated page
tables and pages, a thread can direct the kernel to conﬁgure
the memory management unit of the underlying platform. In
particular, multiple threads that each possess capabilities to
the same physical pages may each map those pages into their
respective VSpaces and thereafter communicate by reading
and writing to the shared memory.
Threads can also communicate and synchronise by send-
ing messages through IPC endpoints. There are two types
of endpoint: synchronous, where a sender blocks waiting for
a receiver; and asynchronous, where a sender never blocks.
Capabilities to either kind of endpoint may carry the Send
and Receive access rights; a thread with a Send capability to
an endpoint can use it to transmit messages to any thread that
has a Receive capability to the same endpoint. In addition,
capabilities for synchronous endpoints may also carry the
Grant right that allows senders to transmit capabilities to
receivers in the style of classical take-grant systems [30].
as revoke which iteratively deletes derived capabilities. In-
terrupts are polled at these points and, if necessary, an active
system call may be suspended until the requesting thread is
next scheduled to run.
B. Using seL4 as a Separation Kernel
As a microkernel, seL4 is designed to provide mecha-