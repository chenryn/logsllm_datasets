i = 1 or i = 2. Hence S
m − S
(cid:2)eti > 0 mod ti. Therefore, it is ci (cid:5)= 1. Note that this
observation is independent of the type of error.
, it is S
(cid:2)
(cid:2)
However, in order to analyze the scheme, we need to de-
ﬁne our fault model. For our analysis, we assume again
the strongest adversary attacking the best protected card.
We will only analyze in detail the most interesting/practical
scenario, the random error fault model #4, and show its
security against the Bellcore attack. Results for the byte
error fault models #2, #3 yield even better results. See the
appendix for details on attacks using the other fault models.
The random error fault model #4 assumes that an attacked
value x is replaced by a random bit string f (x) = x+e(x) as
deﬁned in Section 2. For simplicity, we only assume a single
fault. However, as long as multiple errors are uncorrelated,
the results are the same. Note that it is virtually impos-
sible to correlate attacks on smartcards that use hardware
countermeasures.
The two special inputs m = 0 and m = 1 will prove
dangerous to the algorithm in the presence of some faults.
Later, we will describe several enhancements to our scheme
such that also these two messages cannot be exploited in a
fault attack.
In the following analysis of attacks on each variable, the
term success probability always refers to the success proba-
bility for a random fault induced into the attacked variable
to result in an undetectable error such that the Bellcore at-
tack can be applied.
5.2 Attacks On Lines 1 And 2
• Attack on the variable d
The success probability for an attack on dp is at most
3/t1 for messages m (cid:5)≡ ±1 mod t1. This probability is
taken over the errors. A fraction of at most 3/t1 of
all messages satisﬁes m ≡ ±1 mod t1. The message
m = 1 is secure. For other messages m ≡ ±1 mod t1,
m (cid:5)= 1, the success probability is at least 1/2.
Comment. Although this analysis seems to prove the
algorithm insecure, this is not the case. Any adversary
capable of constructing malicious instances of mes-
sages, i.e. an m ≡ ±1 mod t1, needs to know t1. But
this parameter is secret. Hence, the adversary has no
information on how to construct m. Therefore, the
best he can do is to randomize the inputs. And since
the number of malicious messages is less than 3/t1,
this is a secure situation.
Proof. Let m (cid:5)≡ ±1 mod t1. Given m, an error
e(dp) leads to an undetectable error if
e(dp) ≡ 1 mod t1.
m
(1)
We need to analyze how many e(dp) exist at most with
(1). Consider gcd(e(dp), t1 − 1). Since t1 is a strong
prime, we get gcd(e(dp), t1 − 1) ∈ {1, 2, (t1 − 1)/2, t1 −
1}.
Any e(dp) with gcd(e(dp), t1 − 1) ∈ {1, 2} can be writ-
ten as e(dp) = 2l · b, b odd and gcd(b, t1 − 1) = 1. For
these e(dp), (1) implies m2l ≡ 1 mod t1. Next, since
t1 is a strong prime, the equation x2l ≡ 1 mod t1 has
only the solutions x ≡ ±1 mod t1. We conclude that
for m (cid:5)≡ ±1 mod t1 and gcd(e(dp), t1 − 1) ∈ {1, 2}, no
error will be undetectable.
Hence it remains to bound the number of e(dp) with
gcd(e(dp), t1 − 1) ∈ {(t1 − 1)/2, t1 − 1} and me(dp) ≡
1 mod t1. The worst case for m is if m(t1−1)/2 ≡ 1 mod
t1, in which case any e(dp) with the property that e(dp)
is a multiple of (t1−1)/2 leads to an undetectable fault.
Since e(dp) ∈ [−dp, 2l(dp)+1 − 1], the number of e(dp)
with gcd(e(dp), t1−1) ∈ {(t1−1)/2, t1−1} is a fraction
of at most 2/(t1 − 1) < 3/t1 of all possible e(dp).
Let us now determine the number of messages m ≡
±1 mod t1. As the messages are in ZN, there are at
most 2 · (cid:15)N/t1(cid:16) + 2 messages satisfying the condition
m ≡ ±1 mod t1. This is a fraction of less than 3/t1 of
all possible messages.
Now let m ≡ 1 mod t1. If m = 1, then me(dp) = 1 and
Sp = 1. Hence, the error has no eﬀect. Otherwise,
every fault will cause an undetectable error, because
me(dp) ≡ 1 mod t1 independent of the error e(dp).
Let m ≡ −1 mod t1. The probability that a random
fault causes an undetectable error is at least 1/2, since
every even e(dp) yields me(dp) ≡ 1 mod t1.
In addi-
tion, if e(dp) is invertible modulo (t1 − 1), the same
considerations as above apply. This increases the suc-
cess probability further.
• Attack on the variable 1
The success probability for an attack on pt1 is at most
2/t1. This result is based on Assumption 1. The prob-
ability is taken over random choices of the error.
Proof. If the modulus is randomly changed to f (pt1)
= pt1 + e(pt1), write md = α0 · (pt1 + e(pt1)) + α1 with
α1 < pt1 + e(pt1). The correct result Sp is now Sp =
α0 · e(pt1) + α1 mod pt1, while the faulty result S
(cid:2)
p is
α1. An undetectable error happens, if Sp ≡ Sq mod t1,
hence if α0·e(pt1)+α1 ≡ α1 mod t1. This is equivalent
to α0 · e(pt1) ≡ 0 mod t1.
As t1 is a prime, t1 has to divide at least one of the two
factors. Hence, we need to compute the probability of
0 ≡ e(pt1) mod t1 and of 0 ≡ α0 = md div (pt1 +
e(pt1)) mod t1. As e(pt1) is an uniformly distributed
integer in a contiguous interval and α0 is uniformly
distributed by Assumption 1, the success probability
is at most 1/t1 for each factor, and altogether at most
2/t1. This probability is taken over random choices of
the error.
• Attack on  or the exponentiation’s interme-
diate variable
The success probability for an attack during the expo-
nentiation is at most 2/t1 for messages m (cid:5)≡ 0 mod t1.
This probability is taken over the errors. For messages
m ≡ 0 mod t1, all faults yield an undetectable error.
A fraction of at most 1/t1 of all messages m satisﬁes
m ≡ 0 mod t1.
Comment. There are many possible ways to com-
pute mdp mod pt1. Algorithm 3 presents a timing and
simple power attack secure version of the well-known
square-and-multiply algorithm (cf. [10], [11]). The re-
sult holds for other exponentiation algorithms as well.
Again, some messages are malicious, but similar to the
reasoning before, the adversary can gain no advantage
from this fact as he cannot choose m accordingly. At-
tacks on y0 and y1 resemble the same situation if they
get incorporated into the computation at all.
If the
modulus pt1 is attacked during the exponentiation, the
resulting scenario is equivalent to that analyzed for a
global attack on pt1 above.
Algorithm 3
(modular exponentiation).
Input. A message m ∈ ZN, a key d ≥ 3, a modulus
pt1
Output. md mod pt1
1 Let y := m2 mod pt1
2 For i from l(d) − 2 downto 1 do
3
4
di mod pt1
5
6 Let y0 := y
7 Let y1 := y · m mod pt1
8 Let y := yd0 mod pt1
9
Let y0 := y
Let y1 := y · m mod pt1
Let y := y2
output y
Proof. If Algorithm 3 is attacked at the time when
i = l, and the intermediate value y is altered, we have
p = (y + e(y))2l−1 · mw for w = 
i=1 di · 2i. Hence
l−1
(cid:2)
S
p ≡ Sp mod t1 and to
messages m ≡ 0 mod t1 lead to S
(cid:2)
an undetectable error in line 4 of Algorithm 2. There
are at most 1/t1 of all possible messages satisfying this
condition.
For messages m (cid:5)≡ 0 mod t1, we analyze the proba-
bility of (y + e(y))2l−1 ≡ (y)2l−1
mod t1. First con-
sider the case (y + e(y)) ≡ 0 mod t1. This implies
(y)l−1 ≡ 0 mod t1 as well. Since y is of the form mx
for some x, this in turn implies m ≡ 0 mod t1, which
is impossible.
From now on we assume y + e(y) (cid:5)≡ 0 mod t1. Then
(y + e(y))2l−1 ≡ (y)2l−1
mod t1 implies 1 = (y/(y +
mod t1. Since t1 ≡ 3 mod 4, this is equiv-
e(y)))2l−1
2
alent to 1 = (y/(y + e(y)))
, which in turn implies
±1 = (y/(y + e(y))). For any ﬁxed y, there are exactly
two choices of e(y) that satisfy this equality. Hence,
in case m (cid:5)≡ 0 mod t1 we can bound the success prob-
ability by 2/t1.
• Attack on the result S
The success probability for an attack on Sp is at most
1/t2 for messages m (cid:5)= 0, 1. Again, the probability is
taken over the error.
This case will be analyzed while considering attacks
on the CRT combination in line 3.
5.3 Attacks On Line 3
Line 3, the CRT combination, may also be successfully at-
tacked. We assume that S = Sp + X· (Sq− Sp) mod N · t1· t2
with X = pt1 · ((pt1)
−1 mod qt2). Here X is a precomputed
value stored on the smartcard.
• Attack on the result S, or on the two addends
S and X  (S   S)
The success probability for an attack on S, Sp or X ·
(Sq − Sp) is at most 1/(t1 · t2). The probability is taken
over random errors only, it is independent from the
chosen message.
(cid:2)
Proof. If S is attacked directly, then S
= S+e(S).
This would circumvent the countermeasure iﬀ e(S) ≡
0 mod ti for both i. Because both ti are diﬀerent
primes, this means that e(S) ≡ 0 mod t1·t2 must hold.
As the error e(S) comes from a contiguous interval,
this probability is at most 1/(t1 · t2). The same re-
sult holds for attacks on the two summands Sp and
X · (Sq − Sp).
• Attack on X
(cid:2)
The success probability for an attack on X is at most
1/(t1 · t2) for all but a fraction of 2/ min(t1, t2) mes-
sages. This probability is taken over random choices
for the error.
= S+e(X)·
Comment. An attack on X will result in S
(Sq − Sp), which may be an undetectable error if t1 ·
t2|e(X)·(Sq−Sp). The probability for this requirement
is at most 1/ min(t1, t2). A detailed analysis of this
case can be found in Appendix A. Moreover, the error
e(X) also needs to be a multiple of either p or q in
order to apply the Bellcore attack.
As with attacks on dp, the adversary has no informa-
tion on how to construct a message that yields Sq − Sp
to be a multiple of t1, t2 or both. His best choice is to
choose random messages, which only gives him a neg-
ligible success probability. Hence, this attack is not
promising to an adversary.
• Attack on S or S or (S   S)
The success probability for an attack on Sp or Sq is
less than 1/t2. This probability is taken over random
choices of the error only.
Proof. If an adversary attacks either Sp or Sq in
the second summand, the output of the CRT recom-
= S + e(Sp) · X (or e(Sq) respectively).
bination is S
(cid:2)
This causes an undetectable error if t1 · t2|e(Sp) · X.
As t1 and t2 are primes, this means that both ti have
to divide at least one factor. As t1 always divides
X = pt1 · ((pt1)
−1 mod qt2) and t2 never divides X by
Condition 5, this may only happen if t2|e(Sp). Because
e(Sp) is uniformly distributed over an interval of con-
secutive numbers, the success probability is at most
1/t2. The same reasoning holds for (Sq − Sp).
Comment. If t2 is not chosen carefully to prevent t2|X,
the success probability is increased with the probabil-
ity to meet t2|X. This is independent from the error,
therefore any error e(Sp) (cid:5)= 0 would be harmful. This
explains Condition 5 of the condition list for selecting
t1 and t2.
5.4 Attacks On Lines 4 – 6
 = 1
We also need to investigate the possibilities to attack the
detection mechanism, lines 4 - 6. But attacks on the compu-
tation of ci are in vain unless another successful attack has
been carried out already. If a random error into a correct ci
is induced, it is ci (cid:5)= 1 and the ﬁnal signature will look like
a random value. The same consideration applies to line 6.
5.5 Excluding the two messages  = 0 and
The analysis shows that choosing m ∈ {0, 1} leads to a
malicious message as m ≡ 0, 1 mod ti in these cases as well.
The choice m = 0 or m = 1 is useful for an adversary in
attacks on m, on the values Sp and Sq, and on the inter-
mediate results of the exponentiation. Therefore, these two
messages must be treated separately. For all other cases,
the adversay’s ability to create malicious messages implies
knowledge about ti. As we assume these parameters to be
secret, the adversary has no better choice than to choose m
at random. This leaves him with a success probability of
at most 1/ti. Hence, ti is a security parameter and can be
chosen large enough to eﬀectively prevent eﬃcient attacks.
Now let us explain several methods dealing with the case
m ∈ {0, 1}. The ﬁrst method is to use padding schemes.
In fact, almost any padding scheme, deterministic or ran-
domized, will ensure that m = 0 and m = 1 will either not
be signed at all or will only be signed with negligible prob-
ability. However, as explained in the introduction, most
smartcard certiﬁcation authorities require that a smartcard
implements a pure RSA signature algorithm that is secure
without using OAEP or similar padding schemes.
To avoid padding schemes, one can modify the message
used in lines 1 and 2 in the following way: In line 1 one
uses the message mp := m + r1 · p and in line 2 the message
mq := m+r2·q. Here, 1 < ri < ti, i = 1, 2 are ﬁxed numbers.
Obviously, it should hold that r1 · p mod t1 (cid:5)∈ [−2, . . . 2], and
for line 2 equivalently. In this way, the algorithm actually
computes md mod N . This blinding technique is also useful
against other side channel attacks.
5.6 Summarizing the results
Table 1 shows the most successful attack scenarios on each
line of Algorithm 2. Summarizing the results of this sec-
tion, the probability to induce an error that can fool our
countermeasure and still break the system by the Bellcore
attack is negligibly small if the bitlength of t1 and t2 is large
enough. Additionally, in the real world various randomiza-
tion strategies are applied on the card to counteract other
side-channel attacks. These measures show that malicious
messages, which have been shown to exist for some attacks,
are virtually impossible to create.
fault attack on
probability of the attack
line 1
line 2
line 3
line 4
line 5
line 6
3/ min(t1, t2)