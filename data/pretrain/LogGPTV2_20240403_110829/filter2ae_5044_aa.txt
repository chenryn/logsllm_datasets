**作者：凤雏@安恒扫描器**
## 前言
本文分析的sqlmap是commit编号为591a60bbde434aacc0d90548cd442d6a756ff104的版本，2017年七月份的版本，相对于现在有点老了。不过sqlmap检测的核心逻辑基本没变，还是拿着这个源码做了分析并进行总结。
本文从五个角度去剖析sqlmap的漏洞检测过程，包括前置发包（一系列探子请求）、布尔盲注、错误注入、union注入、时间盲注这五个过程。本文对其中的两个基础检测算法（响应相似度对比技术，高斯分布识别响应机制）进行详细分析，这也是笔者认为本文的最大亮点。响应相似度对比技术在sqlmap中大量使用，高斯分布识别响应机制在union注入（select
null列数探测技术）和时间盲注过程中使用。
本文包含了大量的流程图，这些流程图只有笔者认为的关键环节才会进行说明，这一点也许对不熟悉SQL注入漏洞自动化的人不友好，不过仔细看看流程图多思考多Google，我相信你总会懂的。
## sqlmap检测之前置发包
在sqlmap检测sql注入点的过程中，会有一系列前置发包，这些前置发包主要包括
  1. 网站连通性检测
  2. WAF探测
  3. 网页稳定性检测
  4. 参数动态性检测
  5. 启发式注入检测
  6. 误报检测
等发包检测逻辑。严格来说，误报检测不属于前置发包过程，误报检测在时间盲注和布尔盲注过程中都有使用，并且具有相同的逻辑特点，检测流程就在此一并说明，具体发包情况分别在时间盲注和布尔盲注中说明。
在sqlmap中，响应相似度对比技术内置于发包引擎中，可见响应相似度对比技术在sqlmap的重要性，而这些前置发包的一些逻辑也离不开响应相似度对比。行业内通常会有网页相似度对比的说法，网页相似度对比在本文中指的是响应相似度对比中HTTP响应体对比分析的结果。因此，在剖析前置发包之前，先看看sqlmap中响应相似度对比技术。
### 响应相似度对比技术
在sqlmap检测的整个过程中，会有一个原始响应的定义，指的是在网站连通性检测的过程中，如果网站成功响应，则把该响应定义为原始响应（包括状态码、HTTP响应头、HTTP响应体）。
sqlmap中，原始响应作为对比过程中被对比的对象，一个请求成功响应后，与原始响应进行对比，得出对比结果，具体的对比流程如下图所示。
这个对比算法的输入是当前整个响应（包括状态吗、HTTP响应头、HTTP响应体），输出可以根据需求来选择（包括网页相似度比例数值ratio或者布尔值True/False），算法输出为True表示当前响应与原始响应相似，算法输出为False表示当前响应与原始响应不相似。两个响应体的相似度数值（ratio）和相似度布尔值（True/False）的关系如下图所示。
其中，ratio是一个介于0-1之间的数值。在sqlmap中，当ratio小于0.02（下边界）时，相似度布尔值为False；当ratio大于0.98（上边界）时，相似度布尔值为True；当ratio介于0.02-0.98之间的时候，当ratio
> 临界点（kb.matchRatio，知识库matchRatio值） +
容差（默认0.05）的时候，相似度布尔值为True，否则，相似度布尔值为False，在这种情况下，关键问题就是确定临界点。
临界点的确定方法分为两种情况，分别为：
  1. 布尔盲注过程中一组真假payload对比
  2. 其他
布尔盲注的临界点确定放到后续的布尔盲注过程中讲解，此处讲解第二种情况。在第二种情况下，能够产生临界点值需要两个条件同时满足，分别为：
  1. 该响应需要使用响应相似度对比技术
  2. 首次出现ratio值介于0.02-0.98之间
那么这个ratio值就会作为临界点值，后续会一直使用。本文后续还会出现“网页相似度”这个词语，指的是响应相似度分析技术中的HTTP body对比技术。
响应相似度对比技术作为基础技术存在与sqlmap中，在整个检测过程中会大量使用，在介绍前置发包之前，先简单介绍一下注入环境，结合具体发包来讲解，希望能够好理解一些。
### 注入场景
假设example.php存在一个注入点，并伴随一些随机字符串：
    $query = "SELECT * FROM users WHERE id=" . $_GET['id'] . " LIMIT 0, 1";
    print "static line";
    print str_rand(rand(10,20));
每一次响应都会返回10-20之间任意一个值的随机字符串，该注入点对应的请求为：
    http://target_host/example.php?id=1
假设MySQL数据库中存在两条记录，分别为：
    +----+------------------------------------+-------------------+
    | id | name                               | surname           |
    +----+------------------------------------+-------------------+
    |  1 | luther                             | blisset           |
    |  2 | fluffy                             | bunny             |
    +----+------------------------------------+-------------------+
example.php的响应逻辑为id值为x的时候，就响应第x条数据库信息，并同时PHP错误回显打开。
至此，注入环境构建完成。
### 网站连通性检测
该发包的目的为网站连通性检测，流程图如下如所示：
网站连通性检测的响应，会作为原始响应（响应相似度对比技术中使用）和网站模版（网站稳定性检测中使用）。
在具体场景中，发包情况如下图所示：
### WAF探测
该发包的目的为检测网站是否受WAF保护，流程图如下如所示：
WAF探测的payload构造，在原始请求参数的基础上，增加一个新的参数，参数值设置为带有
    AND 1=1 UNION ALL SELECT 1,NULL,'',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#
载荷，通常情况下就可以触发WAF。sqlmap检测到与原始请求响应相似度小于0.5时，认为存在WAF。
在具体场景中（无WAF），发包情况如下图所示：
### 网页稳定性检测
该发包的目的为检测网页是否稳定，流程图如下如所示：
sqlmap在检验网站稳定性的过程中，如果同一个请求表现出了不同的响应，那么接下来会自动识别动态内容，并在后续响应相似度对比过程中，进行动态内容移除后再进行相似度对比。
网页稳定性检测会进行循环的动态监测，直至动态性内容全部稳定识别之后，才会进行下一步。sqlmap识别网页动态因子的时候，网页动态因子存储时候并非用的增量存储，每一次重新请求页面，都会进行重新计算动态因子，把之前动态因子的放弃。
在具体场景中，发包情况如下图所示：
在上述环境下，网页稳定性检测过程会发包两次，第一次用于识别动态内容，第二次发包用于检验动态内容识别是否有效。对于动态响应，网页稳定性检测只有在准确识别动态内容的基础上才会进行后续处理。
### 参数动态性检测
该发包的目的为检测参数是否具有动态性，流程图如下如所示：
sqlmap使用两个四位数随机数进行测试，在一些情况下，假如参数没有表现出动态性，可以跳过检测，该功能在批量测试时候非常有效。
#### 重复发包问题
在sqlmap中参数动态性检验的过程中，两次生成了随机数并发包，可以理解为重复发包。针对此问题笔者也是百思不得其解，于是上Github去像作者提问，作者的回答在这里：。
sqlmap中，相同逻辑重复发包的情况也是大量存在，包括但不限于误报检测时的真假逻辑、union注入最后确认注入点是否可以多行注入等。笔者认为可能的原因是多发一个包确认情况避免误报，或者是多获得一些环境的信息（union注入多行注出）等。
在具体场景中，参数动态性检测发包情况如下图所示：
### 启发式注入检测
该发包尝试让Web应用报错,目的为探测该参数点是否是动态的、是否为可能的注入点，流程图如下如所示：
启发式注入过程中，payload生成是由`,'"().`六种字符随机组成的长度为10的字符串，同时满足'和"都只有一个。启发式注入的目的就是让Web应用报错，如果Web应用开启了错误回显，就可以快速识别DBMS（正则匹配）。
上图中为启发式注入检测核心逻辑，除此以外还有类型转换、XSS简单测试等的发包，不过笔者认为这都不是核心逻辑，并且画在图中太复杂，就没画上去。
在具体场景中，发包情况如下图所示：
### 误报检测
布尔盲注中使用响应相似度分析技术来确定是否存在注入点，时间盲注中使用高斯算法来确定是否存在注入点，这两种判断方式存在误报的可能，为了防止误报，sqlmap引入误报检测机制。下图为误报检测流程图：
在实际误报检测过程中，使用三个数字构成不同的逻辑，使得payload主动控制响应，并根据响应判断注入是否真实存在。在使用上图中特定逻辑构造payload包的过程中，就要涉及到sqlmap中测试向量中的``标签，这在后续布尔盲注和时间盲注过程中会进行详细分析。
误报检测的实际发包也会在布尔盲注和时间盲注过程中进行展示和分析。
## sqlmap检测之布尔盲注
### 布尔盲注主要流程
上图为布尔盲注流程图，虚线之上表示前置发包过程，虚线之下表示针对每个注入点，都会进行循环发包的流程。
在布尔盲注的前置发包过程中，可以看到有目标稳定性检测过程，在此过程中sqlmap会找出网页动态因素并在后续响应相似度分析过程中进行使用。
布尔盲注过程中大量使用响应相似度分析技术，从流程图中可以看到，在针对每一个注入点循环发包时候，sqlmap第一步就是进行临界点置空。布尔盲注中的临界点，是在发送两组真、假逻辑包时（逻辑假数据包先发送，逻辑真数据包后发送）的过程中确定的，其中某一个包计算后的ratio值介于0.02-0.98，那么该ratio值作为临界点。
在常规的响应相似度分析之后，sqlmap还包括了去除HTML标签进行注入判断，笔者认为是针对，响应数据中HTML标签量大，而数据库改变数据量小的情况。此过程中也不再使用响应相似度分析，而使用集合方式（差集）来识别注入是否存在。
误报检测逻辑在前置发包部分已有说明，后续会针对漏洞环境的发包进行分析。
### 布尔盲注案列分析
在上述漏洞场景中，进行布尔盲注案例分析。
首先看一下原始请求：
    example.php?id=1
可以成功注入的测试向量：
        AND boolean-based blind - WHERE or HAVING clause
        ...
        AND [INFERENCE]
            AND [RANDNUM]=[RANDNUM]