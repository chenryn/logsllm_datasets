## pg_shard PostgreSQL数据库分片  
### 作者                                                                                                                
digoal                                                                                                                
### 日期                                                                                                                 
2015-09-28                                                                                                     
### 标签                                                                                                                
PostgreSQL , sharding , citusdata , citus , pg_shard , 分片 , pasox , 多副本            
----                                                                                                                            
## 背景                                                     
如果你的GCC版本第一4.6，那么首先要安装一个高版本的GCC，因为pg_shard里面用了gcc 4.6以后新加的特性。  
```  
# yum install -y gmp mpfr libmpc libmpc-devel  
# wget http://gcc.cybermirror.org/releases/gcc-4.9.3/gcc-4.9.3.tar.bz2  
# tar -jxvf gcc-4.9.3.tar.bz2   
# cd gcc-4.9.3  
# ./configure --prefix=/opt/gcc4.9.3  
# make && make install  
# vi /etc/ld.so.conf  
/opt/gcc4.9.3/lib  
/opt/gcc4.9.3/lib64  
# ldconfig  
# ldconfig -p|grep gcc  
# vi /etc/profile  
export PATH=/opt/gcc4.9.3/bin:$PATH  
```  
安装pg_shard  
```  
# git clone https://github.com/citusdata/pg_shard.git  
# cd pg_shard/  
```  
切换到master分支，使用1.2.2版本。  
```  
# git checkout master  
commit 7e6103f79e3651eac0b32429f5fb103eb2a8ebdd  
Merge: 2b221d9 ac35076  
Author: Jason Petersen   
Date:   Fri Aug 28 19:12:16 2015 -0600  
    Merge branch 'release-1.2.2'  
......  
```  
安装：  
```  
# . /home/postgres/.bash_profile  
# make clean; make; make install  
```  
假设我的环境中有5个数据库实例，其中一个master，4个worker。  
```  
su - postgres  
cd $PGDATA  
```  
在master实例的$PGDATA中编辑一个pg_worker_list.conf 文件。  
```  
postgres@digoal-> vi pg_worker_list.conf   
localhost 1922  
localhost 1923  
localhost 1924  
localhost 1925  
```  
同时确保master所在主机，连接work节点数据库不需要密码，或密码已经存放在.pgpass密码文件。  
```  
postgres@digoal-> cat $PGDATA1/pg_hba.conf |grep ^local  
local   all             all                                     trust  
postgres@digoal-> cat $PGDATA2/pg_hba.conf |grep ^local  
local   all             all                                     trust  
postgres@digoal-> cat $PGDATA3/pg_hba.conf |grep ^local  
local   all             all                                     trust  
postgres@digoal-> cat $PGDATA4/pg_hba.conf |grep ^local  
local   all             all                                     trust  
```  
在master节点配置pg_shard.  
```  
vi $PGDATA/postgresql.conf  
shared_preload_libraries = 'pg_shard'  
pg_ctl restart -m fast  
psql  
```  
为了确保主和worker一致，正常的流程是，在master和所有的worker节点创建一致的：  
```  
role  
database  
schema  
```  
在主节点，连接到database，创建pg_shard 扩展模块。  
```  
postgres=# create extension pg_shard;  
```  
在主节点创建测试表  
```  
postgres=# CREATE TABLE customer_reviews                                               
(  
    customer_id TEXT NOT NULL,  
    review_date DATE,  
    review_rating INTEGER,  
    review_votes INTEGER,  
    review_helpful_votes INTEGER,  
    product_id CHAR(10),  
    product_title TEXT,  
    product_sales_rank BIGINT,  
    product_group TEXT,  
    product_category TEXT,  
    product_subcategory TEXT,  
    similar_product_ids CHAR(10)[]  
);  
```  
创建合适的约束，索引，建议在定义work table前都确定下来，否则以后添加索引要在所有节点手工添加。  
在主节点，调用以下函数，构造work table。表名，字段名为分布列。  
```  
postgres=# SELECT master_create_distributed_table('customer_reviews', 'customer_id');  
```  
在主节点，调用以下函数，在子节点创建work table，16个分片，每个分片保存2份。  
```  
postgres=# SELECT master_create_worker_shards('customer_reviews', 16, 2);  
```  
在主节点，可以看到元数据。  
```  
postgres=# \dt pgs_distribution_metadata.*  
                       List of relations  
          Schema           |      Name       | Type  |  Owner     
---------------------------+-----------------+-------+----------  
 pgs_distribution_metadata | partition       | table | postgres  
 pgs_distribution_metadata | shard           | table | postgres  
 pgs_distribution_metadata | shard_placement | table | postgres  
(3 rows)  
postgres=# select * from pgs_distribution_metadata.partition ;  
 relation_id | partition_method |     key       
-------------+------------------+-------------  
       42067 | h                | customer_id  
(1 row)  
postgres=# select 42067::regclass;  
     regclass       
------------------  
 customer_reviews  
(1 row)  
postgres=# select * from pgs_distribution_metadata.shard;  
  id   | relation_id | storage |  min_value  |  max_value    
-------+-------------+---------+-------------+-------------  
 10000 |       42067 | t       | -2147483648 | -1879048194  
 10001 |       42067 | t       | -1879048193 | -1610612739  
 10002 |       42067 | t       | -1610612738 | -1342177284  
 10003 |       42067 | t       | -1342177283 | -1073741829  
 10004 |       42067 | t       | -1073741828 | -805306374  
 10005 |       42067 | t       | -805306373  | -536870919  
 10006 |       42067 | t       | -536870918  | -268435464  
 10007 |       42067 | t       | -268435463  | -9  
 10008 |       42067 | t       | -8          | 268435446  
 10009 |       42067 | t       | 268435447   | 536870901  
 10010 |       42067 | t       | 536870902   | 805306356  
 10011 |       42067 | t       | 805306357   | 1073741811  
 10012 |       42067 | t       | 1073741812  | 1342177266  
 10013 |       42067 | t       | 1342177267  | 1610612721  
 10014 |       42067 | t       | 1610612722  | 1879048176  
 10015 |       42067 | t       | 1879048177  | 2147483647  
(16 rows)  
postgres=# select * from pgs_distribution_metadata.shard_placement;  
 id | shard_id | shard_state | node_name | node_port   
----+----------+-------------+-----------+-----------  
  1 |    10000 |           1 | localhost |      1922  
  2 |    10000 |           1 | localhost |      1923  
  3 |    10001 |           1 | localhost |      1923  
  4 |    10001 |           1 | localhost |      1924  
  5 |    10002 |           1 | localhost |      1924  
  6 |    10002 |           1 | localhost |      1925  
  7 |    10003 |           1 | localhost |      1925  
  8 |    10003 |           1 | localhost |      1922  
  9 |    10004 |           1 | localhost |      1922  
 10 |    10004 |           1 | localhost |      1923  
 11 |    10005 |           1 | localhost |      1923  
 12 |    10005 |           1 | localhost |      1924  
 13 |    10006 |           1 | localhost |      1924  
 14 |    10006 |           1 | localhost |      1925  
 15 |    10007 |           1 | localhost |      1925  
 16 |    10007 |           1 | localhost |      1922  
 17 |    10008 |           1 | localhost |      1922  
 18 |    10008 |           1 | localhost |      1923  
 19 |    10009 |           1 | localhost |      1923  
 20 |    10009 |           1 | localhost |      1924  
 21 |    10010 |           1 | localhost |      1924  
 22 |    10010 |           1 | localhost |      1925  
 23 |    10011 |           1 | localhost |      1925  
 24 |    10011 |           1 | localhost |      1922  
 25 |    10012 |           1 | localhost |      1922  
 26 |    10012 |           1 | localhost |      1923  
 27 |    10013 |           1 | localhost |      1923  
 28 |    10013 |           1 | localhost |      1924  
 29 |    10014 |           1 | localhost |      1924  
 30 |    10014 |           1 | localhost |      1925  
 31 |    10015 |           1 | localhost |      1925  
 32 |    10015 |           1 | localhost |      1922  
(32 rows)  
```  
可以看到，每个分片都有2个副本。就是我们前面创建work table时指定的副本数量。  
pg_shard的使用限制：  
1\. 不能使用子查询。  
```  
postgres=# insert into customer_reviews select generate_series(1,100);  
ERROR:  0A000: cannot perform distributed planning for the given query  
DETAIL:  Subqueries are not supported in distributed queries.  