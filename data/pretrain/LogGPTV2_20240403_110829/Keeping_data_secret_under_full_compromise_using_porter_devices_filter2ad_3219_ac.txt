DY channel 2
AR(2,gr(cid:48)
R )
R ,grP )
AP (3,gr(cid:48)
AR(4,S,te,[K,4.1]L)/
P (porter)
pick rP , compute grP
L = gr(cid:48)
K = [K]−1
RrP , delete rP
L , delete L
AR(7,gr∗
R ,gr∗
AP (8,gr∗
R ,S,te)/
P ,[K]L(cid:48) )
pick r∗
P , compute gr∗
L(cid:48) = gr∗
Rr∗
P
P
delete r∗
P , delete L(cid:48)
At time te (ongoing):
delete (S, te, K)
Figure 3: Protocol 1. The protocol can be run over two Dolev-Yao (DY) channels, between S and R and between R and P . The established
symmetric mid-term key K is used by S to encrypt the time-limited data m. All messages are authenticated, denoted by the authentication
function AX (·), which represents the function input concatenated with a digital signature of principal X.
1. All messages are authenticated by the transmitter, as indi-
cated by the authentication function AX (·) where X ∈ {S,
R, P} is the authenticating principal. This can be achieved
using message authentication codes (MACs) with pre-shared
symmetric keys or by digital signatures using X’s long-term
secret key.
In the latter case, the ﬁrst message would be
1, grS , te, SigS(1, grS , te), where SigS(M ) denotes the dig-
ital signature of M using S’s long-term key.
2. The principals verify the authenticity of received messages
(by verifying signatures or MACs) and check the validity of
te. The principals abort the protocol if te has expired or if
message authenticity cannot be veriﬁed.
3. If the protocol aborts due to failed time or authenticity checks,
abortive measures must be taken. In particular, critical data
(such as encryption keys and DH key contributions), which
may be present on a device, must be securely deleted.
Encrypted vs. plain storage of K. In Protocol 1, the mid-term
encryption (decryption) key is stored in plaintext on P and revealed
only to R (encrypted over the DY-channel). While the unencrypted
storage of K may seem like a weakness, under our attacker model,
full device compromise only occurs after the expiration time when
K is already deleted. We still consider it realistic that the porter
device (e. g., a mobile phone) may be lost or stolen before the expi-
ration time; in either case, we can assume that the owner is aware
of the loss. To preserve data privacy in this case, we propose to
store K encrypted on P : In Protocol 1, the receiver would send
the encrypted key K to the porter (i. e., [[K]X ]L instead of [K]L)
and store the symmetric encryption key X along with the expira-
tion time te of K on R. Whenever the owner notices the loss of his
porter device, he can delete X from R’s disk.
4.4.2 Protocol 2
Protocol 2 (Figure 4) assumes a physically secure (PS) channel
between R and P ; e.g., P could be a TPM directly connected to
R’s computer. Thus no key agreement is required on this chan-
nel. Furthermore, Protocol 2 uses asymmetric encryption to secure
time-limited data (independent of the PS channel).
In Figure 4 we use the notation from the beginning of this sec-
+
R
−
R
R (P K
(and {M}P K
tion. Additionally {M}P K
) denote the public-
key encryption (and decryption) of message M with the public
−
R ) of principal R, respectively. Proto-
(private) key P K +
col 2 is based on R’s authenticated broadcast, indicated by *, of the
mid-term public keys P K +
R . These public keys form part of freshly
generated key pairs and are broadcasted along with their expiration
times te. An example broadcast is the authenticated publication
of P K +
R along with te on the receiver’s website, or the receiver’s
reply to a request by the sender (not shown in Figure 4). The cor-
−
responding secret keys P K
R are not stored on R but on a porter
directly connected to R over a PS channel. At any point in time, the
sender may pick the public key that corresponds to the desired data
lifetime, use it to encrypt the time-limited data, and transmit the
message to the receiver, along with the respective expiration time
(thereby enabling the receiver to identify the right secret key). The
messages transmitted over the DY channel are authenticated.
4.4.3 Comparison
Protocols 1 and 2 differ in (i) how they create the mid-term en-
cryption key and (ii) how they achieve forward-secrecy on the com-
munication channel between R and P .
Protocol 1 uses key contributions by both the sender and the
receiver to establish the symmetric encryption key and assumes
a DY channel between R and P . This requires DH session key
establishments on both communication channels. A typical appli-
cation for Protocol 1 is the forward-secure email-communication
of a company (under our full-compromise attacker model) using a
trusted remote device for key management, e. g., a key card or other
special-purpose devices.
In contrast to this, Protocol 2 uses asymmetric encryption with
key pairs created by the receiver. The public keys may, e. g., be an-
nounced on a private user’s webpage. Protocol 2 does not require
DH key establishment on the communication channel between S
and R. Due to the PS channel, it also does not require DH key
establishment between R and P . The communication devices us-
ing Protocol 2 must be able to perform public-key operations; for
example, the porter can be a TPM attached to R. In a slightly dif-
/
/
/
o
o
/
o
o
/
/
o
o
S (sender)
DY channel
AR(1,te,P K
+
R )
*
AS (3,{m}
P K
+
R
,te)
select te
delete m
R (receiver)
generate key pairs (P K+
R , P K−
R )
assign expiration times:
(P K+
R , P K−
delete P K−
R , te)
R
...
m = {{m}P K
After usage: delete m, P K−
}P K
−
R
+
R
R
PS channel
P (TPM)
2,te,P K
−
R /
4,te
5,te,P K
−
R
At te (ongoing):
delete (te, P K−
R )
Figure 4: Protocol 2. The protocol assumes a physically secure (PS) channel between R and P (e. g., P is an HSM physically wired to R’s
hard disk). Hence, messages between S and R need not to be further protected by encryption or authentication measures. The mid-term key
pair used for data encryption and decryption is (P K +
). There are no ephemeral keys used.
R , P K
−
R
ferent setting, this protocol can also be applied if S and R are porter
devices that can directly communicate. In this case, the operations
on the PS channel are simple storage and data retrieval operations
to and from the memory of the porter.
In summary, if the communication devices can perform key man-
agement, they can also be used for key storage; if not, the key man-
agement should be outsourced to a suitable porter. We also note
that the building blocks of Protocols 1 and 2 can be mixed, e. g.,
one can build an implementation that uses symmetric encryption
while relying on a TPM connected by a PS channel.
4.5 Formal Protocol Analysis
We now construct formal models of our protocols and analyze
the secrecy of the message m with respect to our attacker model
(Section 2.3) using the Scyther tool [15]. We chose Scyther since it
provides support for revealing the principals’ states and enables us
to analyze forward secrecy under full compromise [6, 7]. We ﬁrst
provide background information on Scyther.
4.5.1 Background on Scyther
Scyther is a tool for the symbolic automatic analysis of the se-
curity properties of cryptographic protocols (typically conﬁden-
tiality or variants of authenticity).
It assumes perfect cryptogra-
phy, meaning that an attacker gains no information from an en-
crypted message unless she knows the decryption key (this is a
standard assumption in symbolic methods). Scyther takes as in-
put a role-based description of a protocol in which the intended
security properties are speciﬁed using claims. Claims are of the
form claim(Principal,Claim,Parameter), where Principal is the user’s
name, Claim is a security property (such as ’secret’), and Parameter
is the term for which the security property is checked.
Recent versions of Scyther can analyze protocols with respect
to a family of attacker models, ranging from a standard Dolev-Yao
style network attacker to stronger attackers capable of various types
of compromise. The attacker model is speciﬁed by selecting a set of
attacker capabilities, such as revealing the short-term or long-term
secrets of users. To analyze our protocols, we enable the follow-
ing attacker capabilities: (i) Long-term key reveal for all princi-
pals and for other parties after the protocol execution, (ii) Session
(short-term) key reveal for all parties not part of the current pro-
tocol execution, and (iii) Session-state reveal, which reveals the
entire contents of the session-state of the parties. Together, these
capabilities model the attacker from Section 2.3.
For most protocols and properties, the tool either ﬁnds an attack
or establishes the unbounded veriﬁcation of the protocol’s proper-
ties with respect to the speciﬁed attacker model. In the remaining
cases, bounded veriﬁcation is performed where the bound deﬁnes
the number of considered runs, i. e., the maximum number of paral-
lel threads (or executions of role descriptions) executed by honest
principals. This bounded result is similar to model-checking ap-
proaches for formal protocol veriﬁcation. Attacks such as replay or
man-in-the-middle attacks are typically found within the bound of
two or three runs for many protocols (e. g., [5])5. The veriﬁcation of
over 100 protocols in [16] showed that no attacks were found that
involved more runs than the number of principals in the protocol
(except for protocols speciﬁcally constructed as counterexamples).
4.5.2 Analysis of Protocol 1
We model Protocol 1 (Figure 3) using eight send and receive
events for the three principals S, R, and P . The complete proto-
col models and the tool itself are available at [2]. To give some
intuition, we display the part that models the sender S:
role S {
const rS: Nonce;
const te: Nonce;
const M:
Nonce;
var beta: Ticket;
// S’s DH key contribution
// expiration time
// time-limited data
// R’s DH key contribution
// mark T_e as session id
claim_sidS(S, SID, te);
// Phase 1
send_1(S,R,g1(rS),te,{l1,g1(rS),te}sk(S));
recv_5(R,S,g1(rS),beta,te,{l5,g1(rS),beta,te}sk(R));
// Phase 2
send_!6(S,R,{l6a,M}g2(beta,rS),te,
{l6b,{l6a,M}g2(beta,rS),te}sk({S});
claim_s(S, Secret, M);
}
When using Scyther, security properties are modeled as local prop-
erties: If an agent executes a particular role, what can be concluded
about the state of other agents or the attacker’s knowledge? Here
we analyze whether the protocol ensures the secrecy of m after the
execution of an instance of S or R, and the secrecy of K after the
execution of an instance of P , both under full compromise. In par-
ticular, we veriﬁed the following claims: S: claim(S,Secret,m), R:
claim(R,Secret,m), and R: claim(P ,Secret,K). As Scyther currently
does not support explicit key expiration times, we model the expi-
ration as happening immediately after the protocol execution, i. e.,
5The security analysis in [5] indicates that the Ephemerizer proto-
col is secure in terms of secrecy but insecure regarding integrity.
The analysis is based on two (or three) runs.
o
o
/
/
/
/
/
o
o
nize (e.g., Bluetooth [10]). The storage requirements of our so-
lution are easily met with today’s smartphone platforms (see Sec-
tion 5.2). The communication between a mobile phone porter and
the user’s device must be forward-secret. Message secrecy is pre-
served, even given mobile phone loss prior to key deletion, as dis-
cussed in Section 4.3.
5.2 Prototype Implementation
To demonstrate the practical feasibility of our solution, we de-
veloped a prototype implementation of Protocol 1 for the commu-
nication between the receiver and the porter device. Our porter is
a NexusOne [35] mobile phone (ﬁrmware 2.1, kernel 2.6.29, An-
droid OS, 512 MB memory), depicted in Figure 6a. The receiver is
implemented on a laptop running MacOSX 10.6.2.
The communication between the receiver and the porter is based
on Bluetooth, using the Bluecove library [9], which we recompiled
for a 64-bit Mac. Cryptographic operations are implemented using
the Bouncycastle [4] library. To secure the key K on the wire-
less channel, we use symmetric AES/CBC/PKCS5 encryption with
a 256-bit key that is derived from the established ephemeral DH
key L (or L(cid:48)) by a SHA-256 hash. All messages are authenticated