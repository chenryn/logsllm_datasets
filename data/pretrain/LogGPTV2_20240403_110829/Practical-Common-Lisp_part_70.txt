上述框架的实现
(:body
(:head (:title "Random"))
第 26章
((((((atutt uopuex) zutxd:) ： :iaqumu wopue： d:)
实践：用AllegroServe 进行Web 编程
(entity)
www.TopSage.com
---
## Page 348
为：function参数被插入。
的这个函数名的全小写版本。该字符串随后成为publish的:path参数，而函数名则作
with-http-body、with-html-output和html宏的上下文中。然后是对publish的调用。
你即将看到的助手函数来完成的。
的参数生成绑定，以及为粘滞性参数调用set-cookie-header的代码。当然，实际的工作是由
会被发布。DEFUN的前两行只是一些样板代码。
义函数以及调用publish。你应当首先定义该函数，这样如果定义中出现错误，那么该函数将不
为实体参数的名字来使用。然后正则化所有参数，使用下列函数将简单的符号转化成列表形式：
①你需要使用LBT*而非LET来使参数的默认值形式可以引用更早出现在参数列表中的参数。例如，可以写成下面
表达式（format nil“/～(~a~）”name)在宏展开阶段求值，生成一个由“/”后跟你定义
现在开始做实际工作。接下来两行将为在define-url-function中指定的除request以外
其余的就只是些样板代码了，它们将来自define-url-function定义的主体放在适当的
(let* (,@(param-bindings name request params))
接下来是PROGN。你必须展开成一个PROGN，因为你需要生成代码来做两件事：用DEFUN定
换句话说，只用一个符号来声明参数等价于声明不带默认值的非粘滞字符串参数。
直到这里你才开始生成代码。你可以用GENSYM生成一个符号以便在后面的DEFUN里把它作
(defun ,name (,request ,entity)
(defun normalize-param (param)
(defmacro define-url-function (name (request &rest params) &body body)
让我们一点一点地分析它，首先看最初的几行。
从而允许当没有显式提供y的值时，则使用x值的两倍。
(". (((x  *) 1abaut ) (ot iaaut x) asanbai) uotaoung-a-autyep)
这样：
(with-http-response (,request ,entity :content-type "text/html")
(etypecase param
(with-gensyms (entity)
(symbol ^(,param string nil nil))))
(progn
(publish :path ,(format nil "/~(^a~)" name) :function ',name)))))
(defun ,name {,request 
(with-http-response (,request
{let*
with-http-body (,request
(with-html-output ((request-reply-stream ,request))
(html ,@body))))))
e
www.TopSage.com
,entity)
(nTwau/axaa: ad-auaquos: Kataua'
,entity)
26.9
上述框架的实现
331
---
## Page 349
AllegroServe提供的get-cookie-values函数外围的—点儿语法糖:
参数类型，从而可以处理random-page中的limit参数，你可以定义下列方法：
要采用如下的方法把空字符串转化成NIL：
做到。由于浏览器有时会提交带有空字符串的表单，以表明没有值提供给某个特定的变量，你需
方法。你需要至少定义一个特化在符号string上的方法，因为这是默认类型。当然，这很容易
它是一个下列形式的广义函数：
用DESTRUCTURING-BIND来将各部分取出。
其默认值，如果有的话。因为你已经正则化了所有的参数，所以你可以在param-binding中使
计算该变量值的代码的列表。用来计算值的代码的确切形式取决于参数的类型是否为粘滞的以及
集每个参数的由param-binding生成的代码片段。该片段是一个含有需要绑定的变量名和用来
332
再看一看用来生成DEFUN形式的助手函数。为了生成参数绑定，需要在params上循环并收
(defun get-cookie-value (request name)
另一个在param-binding生成的代码中用到的助手函数是get-cookie-value，它只是由
可以为应用程序所需的其他类型添加转换方法。例如，为了使integer成为一个可用的查询
(ante ((buts, [ba) ad)) adtype上定义一个
(defgeneric string->type (type value))
(defun symbol->cookie-name (function-name sym sticky)
类似地，用来计算查询参数和cookie名的函数也相当直接。
(defun param-binding (function-name request param)
(defun symbol->query-name (sym)
(defun param-bindings (function-name request params)
(string-dowmcase sym))
(parse-integer (or value 
(and (plusp (length value)) value))
(destructuring-bind 
loop
(let ((query-name 
collect (param-binding function-name request param)))
第 26章
`(,name (or
forparamin
实践：用 AllegroServe 进行 Web 编程
,default))/))
,@(if cookie-name
(string->type ',type (request-query-value ,query-name ,request))
(list
(name type &optional default sticky) param
(symbol->cookie-name function-name name sticky)))
www.TopSage.com
`(string->type ',type 
(get-cookie-value ,request ,cookie-name))))
:junk-allowed t))
---
## Page 350
中解出的ID3数据。
下一章，我们要编写一个之前在第3章里编写的数据库的增强版，这一次用它来跟踪从MP3文件
简单应用更容易一些的语法糖。
HTML。这就是说，该框架并不是一个大而全的Web应用框架，而只是可以让将在第29章编写的
是否生成了如下代码：
如，你可以检查下面的set-cookie-code：
由set-cookie-code返回的非空值。
自每个粘滞性参数的代码片段。你可以使用when和collectit这两个Loop形式来只收集那些
但在此之前，你还需要编写应用程序的功能性部分，相对来说第29章的应用将成为用户界面。
宏再次使你的代码直击要害，在本例中，就是你想要从请求中解出的数据和你想要生成的
假设这些代码将会出现在x为变量名的某个上下文中，那么它看起来是正确的。
像这样用助手函数来定义宏的一大优点是，很容易确保生成的代码单独看起来是正确的。例
(defun set-cookies-code (function-name request params)
为了生成那些为粘滞性参数设置cookie的代码，需要再次循环参数列表，但这一次只收集来
(WHENX
(defun set-cookie-code （function-name request param)
(SET-COOKIE-HEADER REQUEST
(destructuring-bind (name type &optional default sticky) param
(loop for paramin params
(let((package-name (package-name (symbol-package function
:VALUE（PRINC-TO-STRINGX)))
if sticky
(when sticky
(ecase sticky
(when
when （set-cookie-code function-name request param)collectit))
(:package
(:global
(set-cookie-header
:local
(format nil "~(~a:~a~)"package-name sym))
(string-downcasesym))
:value（princ-to-string,name))))))
:name ,(symbol->cookie-name function-name name sticky)
,request
,name
web:foo:x"
www.TopSage.com
---
## Page 351
调整的带有填充指针的向量。
要支持的特定操作，比如通过数值索引对行进行随机访问，或要排序一个表，使用向量可以更高
松调整实现细节而不会带来太多麻烦。并且这次你将把行保存在一个向量而非列表中，因为你将
各种数据库操作使用。这个类如下所示：
通用的比较函数。
EQUAL来比较的值，或者想要对数据库的行排序的话就会遇到麻烦了，因为不存在像EQUAL那样
效地实现。
table实例都由两个槽构成一
通用的EQUAL方法来比较从数据库中选出的行的不同列的值，但如果你想要保存一些无法用
问题是代码并不清楚保存在不同字段中值的类型。在第3章里你避开了这个问题，通过使用相当
27.1
而后在第28章和第29章里把这个数据库作为一个基于Web的流式MP3服务器的一部分。当然，这
在本章中你将用于开发代码的包如下所示：
初始化rows槽的函数make-rows可以简单地封装在MAKE-ARRAY之外,从而构建一个空的可
(defpackage rcom.gigamonkeys.mp3-database
这次你将定义一个类table来表示单独的数据库表，从而同时解决上述两个问题。每一个
和第3章一样，可以使用plist来表示单独的行，但这次你将创建一层抽象使得以后可以轻
第3章的那个数据库的主要问题是它只有一个表，也就是保存在变量*db*中的列表。另一个
(defclass table ()
(schema :accessor schema
{(rows
数据库
第27章
:accessor rows
阜
一一个用来保存表的数据，而另一个保存关于表中各列的信息以供
实践：MP3数据库
www.TopSage.com
:initarg :schema)))
:initarg :rows :initform (make-rows))
---
## Page 352
时用来正则化列中值的一个函数。schema槽将保存一个column对象的列表。该类的定义如下所示：
个列的信息：它的名字、如何比较列中值的等价性和顺序、默认值以及在向表中插入数据或查询表
应的函数和宏，而：export部分导出了该库提供的API，你将在第29章里用到它们。
为了表示表的模式（schema），你需要定义另一个类column，其每个实例都含有关于表中一
(defclass column ()
(defun make-rows (&optional (size *default-table-size*))
(defparameter *default-table-size* 100)
其中的：use部分可以让你访问那些从第15章、第8章和第25章定义的包中导出的名字所对
((name
(make-array size :adjustable t :fill-pointer 0))
(:export
(comparator
:initarg :equality-predicate)
:reader equality-predicate
(equality-predicate
:initarg :name)
:use :common-1isp
:com.gigamonkeys.id3v2)
:com.gigamonkeys.pathnames
:with-column-values))
:table.
-.sort-rows.
:shuffle-table
:nth-row
:*mp3-schema*
:*default-table-size*
:select
not-nullable
make-schema
:make-column
:load-database
insert-row.
extract-schema
:do-rows
:delete-rows
delete-all-rows
column-value"
column
6
*mp3s*
www.TopSage.com