## 典型回答这个问题可能有点宽泛，我们可以用特定类型的安全风险为例，如拒绝服务（DoS）攻击，分析Java 开发者需要重点考虑的点。DoS是一种常见的网络攻击，有人也称其为"洪水攻击"。最常见的表现是，利用大量机器发送请求，将目标网站的带宽或者其他资源耗尽，导致其无法响应正常用户的请求。我认为，从 Java 语言的角度，更加需要重视的是程序级别的攻击，也就是利用Java、JVM 或应用程序的瑕疵，进行低成本的 DoS 攻击，这也是想要写出安全的Java 代码所必须考虑的。例如：-   如果使用的是早期的 JDK 和 Applet    等技术，攻击者构建合法但恶劣的程序就相对容易，例如，将其线程优先级设置为最高，做一些看起来无害但空耗资源的事情。幸运的是类似技术已经逐步退出历史舞台，在    JDK 9 以后，相关模块就已经被移除。-   上一讲中提到的哈希碰撞攻击，就是个典型的例子，对方可以轻易消耗系统有限的    CPU    和线程资源。从这个角度思考，类似加密、解密、图形处理等计算密集型任务，都要防范被恶意滥用，以免攻击者通过直接调用或者间接触发方式，消耗系统资源。-   利用 Java    构建类似上传文件或者其他接受输入的服务，需要对消耗系统内存或存储的上限有所控制，因为我们不能将系统安全依赖于用户的合理使用。其中特别注意的是涉及解压缩功能时，就需要防范[Zip    bomb](https://en.wikipedia.org/wiki/Zip_bomb)等特定攻击。-   另外，Java    程序中需要明确释放的资源有很多种，比如文件描述符、数据库连接，甚至是再入锁，任何情况下都应该保证资源释放成功，否则即使平时能够正常运行，也可能被攻击者利用而耗尽某类资源，这也算是可能的    DoS 攻击来源。``{=html}所以可以看出，实现安全的 Java代码，需要从功能设计到实现细节，都充分考虑可能的安全影响。
## 考点分析关于今天的问题，以典型的 DoS 攻击作为切入点，将问题聚焦在 Java开发中，我介绍了 Java应用设计、实现的注意事项，后面还会介绍更加全面的实践。其实安全问题实际就是软件的缺陷，软件安全并不存在一劳永逸的秘籍，既离不开设计、架构中的风险分析，也离不开编码、测试等阶段的安全实践手段。对于面试官来说，考察安全问题，除了对特定安全领域知识的考察，更多是要看面试者的Java 编程基本功和知识的积累。所以，我会在后面会循序渐进探讨 Java安全编程，这里面没有什么黑科技，只有规范的开发标准，很多安全问题其实是态度问题，取决于你是否真的认真对待它。-   我将以一些典型的代码片段为出发点，分析一些非常容易被忽略的安全风险，并介绍安全问题频发的热点场景，如    Java 序列化和反序列化。-   从软件生命周期的角度，探讨设计、开发、测试、部署等不同阶段，有哪些常见的安全策略或工具。
## 知识扩展首先，我们一起来看一段不起眼的条件判断代码，这里可能有什么问题吗？    // a, b, c 都是 int 类型的数值if (a + b `{=html}a\>），监控应用是否大量出现了某种类型的异常。\    如果有，那么异常可能就是个突破点。\    如果没有，可以先检查系统级别的资源等情况，监控    CPU、内存等资源是否被其他进程大量占用，并且这种占用是否不符合系统正常运行状况。](https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH173)    [](https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH173)-   监控 Java 服务自身，例如 GC 日志里面是否观察到 Full GC    等恶劣情况出现，或者是否 Minor GC 在变长等；利用 jstat    等工具，获取内存使用的统计信息也是个常用手段；利用 jstack    等工具检查是否出现死锁等。-   如果还不能确定具体问题，对应用进行 Profiling    也是个办法，但因为它会对系统产生侵入性，如果不是非常必要，大多数情况下并不建议在生产系统进行。-   定位了程序错误或者 JVM    配置的问题后，就可以采取相应的补救措施，然后验证是否解决，否则还需要重复上面部分过程。](https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH173)
## 考点分析今天我选择的是一个常见的并且比较贴近实际应用的的性能相关问题，我提供的回答包括两部分。-   在正面回答之前，先探讨更加精确的问题定义是什么。有时候面试官并没有表达清楚，有必要确认自己的理解正确，然后再深入回答。-   从系统、应用的不同角度、不同层次，逐步将问题域尽量缩小，隔离出真实原因。具体步骤未必千篇一律，在处理过较多这种问题之后，经验会令你的直觉分外敏感。大多数工程师也许并没有全面的性能问题诊断机会，如果被问到也不必过于紧张，你可以向面试官展示诊断问题的思考方式，展现自己的知识和综合运用的能力。接触到一个陌生的问题，通过沟通，能够条理清晰地将排查方案逐步确定下来，也是能力的体现。面试官可能会针对某个角度的诊断深入询问，兼顾工作和面试的需求，我会针对下面一些方面进行介绍。目的是让你对性能分析有个整体的印象，在遇到特定领域问题时，即使不知道具体细节的工具和手段，至少也可以找到探索、查询的方向。-   我将介绍业界常见的性能分析方法论。-   从系统分析到    JVM、应用性能分析，把握整体思路和主要工具。对于线程状态、JVM    内存使用等很多方面，我在专栏前面已经陆陆续续介绍了很多，今天这一讲也可以看作是聚焦性能角度的一个小结。如果你有兴趣进行系统性的学习，我建议参考 Charlie Hunt 编撰的《JavaPerformance》或者 Scott Oaks 的《Java Performance：The DefinitiveGuide》。另外，如果不希望出现理解偏差，最好是阅读英文版。
## 知识扩展首先，我们来了解一下业界最广泛的性能分析方法论。根据系统架构不同，分布式系统和大型单体应用也存在着思路的区别，例如，分布式系统的性能瓶颈可能更加集中。传统意义上的性能调优大多是针对单体应用的调优，专栏的侧重点也是如此，CharlieHunt 曾将其方法论总结为两类：``{=html}-   自上而下。从应用的顶层，逐步深入到具体的不同模块，或者更近一步的技术细节单元，找到可能的问题和解决办法。这是最常见的性能分析思路，也是大多数工程师的选择。-   [](https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH173)    [自下而上。从类似 CPU    这种硬件底层，判断类似](https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH173)[Cache-Miss](https://en.wikipedia.org/wiki/CPU_cache#Cache_miss)之类的问题和调优机会，出发点是指令级别优化。这往往是专业的性能工程师才能掌握的技能，并且需要专业工具配合，大多数是移植到新的平台上，或需要提供极致性能时才会进行。例如，将大数据应用移植到 SPARC体系结构的硬件上，需要对比和尽量释放性能潜力，但又希望尽量不改源代码。我所给出的回答，首先是试图排除功能性错误，然后就是典型的自上而下分析思路。第二，我们一起来看看自上而下分析中，各个阶段的常见工具和思路。需要注意的是，具体的工具在不同的操作系统上可能区别非常大。**系统性能分析**中，CPU、内存和 IO 是主要关注项。对于 CPU，如果是常见的 Linux，可以先用 top命令查看负载状况，下图是我截取的一个状态。\![](Images/78e1e0b81d15389f76ac7b275a15942a.png){savepage-src="https://static001.geekbang.org/resource/image/3b/01/3b927b63bec67f99e8dd72860a292601.png"}可以看到，其平均负载（load average）的三个值（分别是 1 分钟、5 分钟、15分钟）非常低，并且暂时看并没有升高迹象。如果这些数值非常高（例如，超过50%、60%），并且短期平均值高于长期平均值，则表明负载很重；如果还有升高的趋势，那么就要非常警惕了。进一步的排查有很多思路，例如，我在专栏第 18 讲曾经问过，怎么找到最耗费CPU 的 Java 线程，简要介绍步骤：-   利用 top 命令获取相应 pid，"-H"代表 thread 模式，你可以配合 grep    命令更精准定位。```{=html}```    top –H-   然后转换成为 16 进制。```{=html}```    printf "%x" your_pid-   最后利用 jstack 获取的线程栈，对比相应的 ID 即可。当然，还有更加通用的诊断方向，利用 vmstat之类，查看上下文切换的数量，比如下面就是指定时间间隔为 1，收集 10 次。    vmstat -1 -10输出如下：\![](Images/52663b0a00c60bbbe981f3003a4adedc.png){savepage-src="https://static001.geekbang.org/resource/image/ab/a0/abd28cb4a771365211e1a01d628213a0.png"}如果每秒上下文（cs，[contextswitch](https://en.wikipedia.org/wiki/Context_switch)）切换很高，并且比系统中断高很多（in，system](https://en.wikipedia.org/wiki/Interrupt)interrupt](https://en.wikipedia.org/wiki/Interrupt)），就表明很有可能是因为不合理的多线程调度所导致。当然还需要利用[pidstat](https://linux.die.net/man/1/pidstat)等手段，进行更加具体的定位，我就不再进一步展开了。除了 CPU，内存和 IO 是重要的注意事项，比如：-   利用 free 之类查看内存使用。-   或者，进一步判断 swap 使用情况，top 命令输出中 Virt    作为虚拟内存使用量，就是物理内存（Res）和 swap 求和，所以可以反推    swap 使用。显然，JVM 是不希望发生大量的 swap 使用的。-   对于 IO 问题，既可能发生在磁盘 IO，也可能是网络 IO。例如，利用    iostat 等命令有助于判断磁盘的健康状况。我曾经帮助诊断过 Java    服务部署在国内的某云厂商机器上，其原因就是 IO    表现较差，拖累了整体性能，解决办法就是申请替换了机器。讲到这里，如果你对系统性能非常感兴趣，我建议参考[BrendanGregg](http://www.brendangregg.com/linuxperf.html)提供的完整图谱，我所介绍的只能算是九牛一毛。但我还是建议尽量结合实际需求，免得迷失在其中。\![](Images/25394321852ca21285dec30afbfabca9.png){savepage-src="https://static001.geekbang.org/resource/image/93/40/93aa8c4516fd2266472ca4eab1b0cc40.png"}对于**JVM 层面的性能分析**，我们已经介绍过非常多了：-   利用 JMC、JConsole 等工具进行运行时监控。-   利用各种工具，在运行时进行堆转储分析，或者获取各种角度的统计数据（如[jstat](https://docs.oracle.com/javase/7/docs/technotes/tools/share/jstat.html)    -gcutil 分析 GC、内存分带等）。-   GC 日志等手段，诊断 Full GC、Minor GC，或者引用堆积等。这里并不存在放之四海而皆准的办法，具体问题可能非常不同，还要看你是否能否充分利用这些工具，从种种迹象之中，逐步判断出问题所在。对于**应用****Profiling**](https://en.wikipedia.org/wiki/Profiling_(computer_programming))，简单来说就是利用一些侵入性的手段，收集程序运行时的细节，以定位性能问题瓶颈。所谓的细节，就是例如内存的使用情况、最频繁调用的方法是什么，或者上下文切换的情况等。我在前面给出的典型回答里提到，一般不建议生产系统进行Profiling，大多数是在性能测试阶段进行。但是，当生产系统确实存在这种需求时，也不是没有选择。我建议使用JFR配合[JMC](http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html)来做Profiling，因为它是从 Hotspot JVM内部收集底层信息，并经过了大量优化，性能开销非常低，通常是低于 **2%**的；并且如此强大的工具，也已经被 Oracle 开源出来！所以，JFR/JMC 完全具备了生产系统 Profiling的能力，目前也确实在真正大规模部署的云产品上使用过相关技术，快速地定位了问题。它的使用也非常方便，你不需要重新启动系统或者提前增加配置。例如，你可以在运行时启动JFR 记录，并将这段时间的信息写入文件：    Jcmd  JFR.start duration=120s filename=myrecording.jfr然后，使用 JMC 打开".jfr 文件"就可以进行分析了，方法、异常、线程、IO等应有尽有，其功能非常强大。如果你想了解更多细节，可以参考相关[指南](https://blog.takipi.com/oracle-java-mission-control-the-ultimate-guide/)。今天我从一个典型性能问题出发，从症状表现到具体的系统分析、JVM分析，系统性地整理了常见性能分析的思路；并且在知识扩展部分，从方法论和实际操作的角度，让你将理论和实际结合，相信一定可以对你有所帮助。
## 一课一练关于今天我们讨论的题目你做到心中有数了吗？ 今天的思考题是，Profiling工具获取数据的主要方式有哪些？各有什么优缺点。请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习奖励礼券，欢迎你与我一起讨论。你的朋友是不是也在准备面试呢？你可以"请朋友读"，把今天的题目分享给好友，或许你能帮到他。![](Images/ad11e858c146d898be1a6f5d5838732b.png){savepage-src="https://static001.geekbang.org/resource/image/a3/45/a3c4614fadf6248a2ac5d63ddcdf8945.jpg"}