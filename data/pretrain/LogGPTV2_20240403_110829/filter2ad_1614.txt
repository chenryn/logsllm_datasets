# Title: Spider: Improving Mobile Networking with Concurrent Wi-Fi Connections

## Authors
- Hamed Soroush, University of Massachusetts, PI:EMAIL
- Peter Gilbert, Duke University, PI:EMAIL
- Nilanjan Banerjee, University:// Arkansas, PI:EMAIL
- Mark D. Corner, University of Massachusetts, PI:EMAIL
- Brian Neil Levine, University of Massachusetts, PI:EMAIL
- Landon P. Cox, Duke University, PI:EMAIL

## Abstract
We investigate the use of concurrent connections to multiple Wi-Fi access points (APs) from highly mobile clients. Previous multi-AP solutions are limited to stationary wireless clients and do not account for various mobile factors. Our study shows that connection duration, AP response times, channel scheduling, available and offered bandwidth, node speed, and DHCP joins all affect performance. Building on these findings, we present a system called Spider, which establishes and maintains concurrent connections to 802.11 APs in a mobile environment. While Spider can manage multiple channels, it achieves maximum throughput when using multiple APs on a single channel.

## Categories and Subject Descriptors
C.2.m [Computer Systems Organization]: Computer-Communication Networks—Mobile and Wireless Systems

## General Terms
Concurrent Wi-Fi, Mobile Networks

## 1. Introduction
To fully realize the benefits of Wi-Fi systems, it is possible to aggregate a large number of access points (APs) concurrently to achieve improved network characteristics. Unlike cellular networks, where devices are typically assigned to a single AP, recent virtualized Wi-Fi systems such as VirtualWiFi [1], FatVAP [2], and Juggler [3] have shown that stationary users connected to multiple APs can achieve up to three times greater bandwidth than those connected to a single AP [2]. These systems work by rapidly switching between APs on multiple channels, aggregating bandwidth at the client.

However, our results show that multi-AP solutions designed for stationary users are not effective in truly mobile scenarios. At higher speeds, mobile users receive better performance by connecting to multiple APs only if they appear on the same channel. Only at lower speeds can mobile users recover from the throughput loss resulting from DHCP joins to APs on separate channels. In our extended technical report [4], we present a general model that isolates the critical factors determining an optimal schedule using one or more channels. These factors include the user's speed, the AP's DHCP response time, the AP's offered bandwidth, and the attained bandwidth. Based on this model, we find that the dividing speed is about 10 m/s (approximately 22 mph) in a typical environment; mobile users moving at this speed or faster should form concurrent Wi-Fi connections only within a single channel. Furthermore, we empirically show that link-layer association, DHCP, and TCP performance are negatively affected by multi-channel solutions.

We present a practical version of a mobile, virtualized Wi-Fi system called Spider, designed for high-speed mobile users. Evaluation of Spider on a vehicular testbed highlights the trade-offs between throughput and connectivity. Spider can manage and schedule joins to APs on multiple channels, but at a significant penalty to achieved bandwidth, as predicted by our model [4].

## 2. Challenges
### Joining to Multiple APs
Since APs can be instructed by the client to buffer packets, concurrent connections between a static client and multiple APs [1–3] are possible for Wi-Fi. The client falsely claims it is entering power-save mode (PSM), implicitly asking the AP to queue incoming packets, and then communicates with another AP. Given that backhaul bandwidth is typically smaller than wireless bandwidth, such a scheme results in higher aggregate throughput if switching delays are kept very short. Static multi-AP solutions do not need to consider the delay incurred by the process of joining to the APs, as the association and DHCP happen once and their duration is negligible compared to the total connection time. In a mobile Wi-Fi environment, however, clients must continuously associate and obtain DHCP leases from APs as they become available. Additionally, the packets associated with the join process cannot be buffered by the PSM request, reducing the client's chances of getting a DHCP lease.

To evaluate how the amount of time spent on the wireless channel affects the success rate of obtaining a DHCP lease, we performed several experiments, each lasting six hours on five vehicles moving around a small town, representing hundreds of trials. Since join delays are affected by link-layer timeouts, we reduced them from a standard of 1s to 100ms in these experiments. Detailed results are presented in [4]. Our results show that reducing both DHCP and link-layer timeouts significantly improves performance, and that link-layer associations are robust to channel switching. However, while reconfigured DHCP timers boost performance, we could not make DHCP robust to low fractions of scheduled time. This suggests that the driver's time cannot be divided among more than two channels at 50% each in a mobile setting where the duration of time in range of an AP is limited.

### Sustaining "Concurrent" TCP Connections
In a practical setting, if the channel schedule is skewed towards spending a large fraction of the time on a single channel, TCP connections on an orthogonal channel can timeout, potentially strangling performance. There is an inherent tension between the probability of successfully associating with APs on one channel and sustaining TCP connections on another channel. Our indoor experiments [4] show that when the total scheduling time is fixed, TCP throughput increases monotonically with the amount of time spent on the AP's channel. However, when the total scheduling time is varied, the throughput increase is non-monotonic. This behavior is due to increasing the total schedule, which increases the amount of time spent away from the channel, leading to TCP timeouts.

### The Dividing Speed
In addition to these experiments, we developed and validated a model in [4] that predicts the probability of obtaining a DHCP lease from an AP as a function of the amount of time spent in range in truly mobile scenarios. Based on the model, we formulated an optimization framework to determine schedules that maximize aggregate throughput for a multi-AP solution. Our framework suggests that for highly mobile networks (where the average node speed is greater than 10m/s), the best policy to maximize bandwidth is to stay on a single channel.

## 3. Solution: Spider
Based on the results of our model and experimental analysis, we designed and implemented Spider, a system that leverages concurrent 802.11 connections to improve performance in highly mobile networks. Our implementation is a freely available, open-source Linux kernel module. Unlike previous work designed for static scenarios that slice time across individual APs, Spider schedules a physical Wi-Fi card among 802.11 channels as suggested by our analysis. The use of per-channel queues in Spider's driver allows it to communicate with all the APs on the same channel simultaneously with no switching overhead. In [4], we show that selecting multiple APs while maximizing a given system utility function is NP-hard and use a practically efficient heuristic for that purpose. We evaluated Spider on a vehicular platform in two different cities [4].

Can open Wi-Fi solutions such as Spider cater to the connectivity needs of mobile users? To answer this question, we performed a study using data from a permanent Wi-Fi mesh we deployed in our downtown. The mesh consists of 25 nodes and covers an area of about 0.50 km². We collected performance data on all TCP flows from 161 wireless users for an entire day. Although not all users may be mobile, the data provides a plausible baseline. We compare the traffic needs of wireless users with those provided by Spider based on two key metrics: (1) distribution of the duration of TCP connections, and (2) distribution of inter-connection time. Figure 1 compares the TCP flow lengths gathered from actual users using our mesh network and Spider in its multi-channel and single-channel modes. The figure shows that Spider can support all the TCP flows that users need. Additionally, Figure 2 compares the time between two connections for the mesh users and disruption time for Spider. When Spider uses multiple channels and multiple APs, it experiences disruptions comparable to what real users can sustain.

These results present Spider as a plausible complement to cellular data services. However, more data on mobile users' connectivity needs and network usage patterns is required to determine the degree to which Spider can align itself with the needs of each individual user. Conducting this study forms part of our future work with Spider.

## 4. References
[1] R. Chandra, P. Bahl, and P. Bahl. MultiNet: Connecting to Multiple IEEE 802.11 Networks Using a Single Wireless Card. In Proc. IEEE INFOCOM, March 2004.
[2] S. Kandula, K. C.-J. Lin, T. Badirkhanli, and D. Katabi. FatVAP: Aggregating AP Backhaul Capacity to Maximize Throughput. In Proc NSDI, pages 89–104, 2008.
[3] A. Nicholson, S. Wolchok, and B. Noble. Juggler: Virtual Networks for Fun and Profit. In IEEE Trans. Mobile Computing, 2009.
[4] H. Soroush, P. Gilbert, N. Banerjee, B. N. Levine, M. D. Corner, and L. Cox. Spider: Improving Mobile Networking with Concurrent Wi-Fi Connections. UMass UM-CS-2011-016 Technical Report, 2011.