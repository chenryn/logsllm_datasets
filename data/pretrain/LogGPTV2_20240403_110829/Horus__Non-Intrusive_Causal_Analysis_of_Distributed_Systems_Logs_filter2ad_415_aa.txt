title:Horus: Non-Intrusive Causal Analysis of Distributed Systems Logs
author:Francisco Neves and
Nuno Machado and
Ricardo Vilaça and
Jos&apos;e Pereira
5
3
0
0
0
.
1
2
0
2
.
7
8
9
8
4
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
7
-
2
7
5
3
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
t
s
1
5
1
2
0
2
2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Horus: Non-Intrusive Causal Analysis
of Distributed Systems Logs
Francisco Neves
Nuno Machado
Ricardo Vilac¸a and Jos´e Pereira
INESC TEC and U. Minho
Amazon and INESC TEC
INESC TEC and U. Minho
Braga, Portugal
Madrid, Spain
PI:EMAIL
PI:EMAIL
Braga, Portugal
{rmvilaca,jop}@di.uminho.pt
Abstract—Logs are still the primary resource for debugging
distributed systems executions. Complexity and heterogeneity
of modern distributed systems, however, make log analysis
extremely challenging. First, due to the sheer amount of messages,
in which the execution paths of distinct system components
appear interleaved. Second, due to unsynchronized physical
clocks, simply ordering the log messages by timestamp does not
sufﬁce to obtain a causal trace of the execution.
To address these issues, we present Horus, a system that
enables the reﬁnement of distributed system logs in a causally-
consistent and scalable fashion. Horus leverages kernel-level
probing to capture events
for tracking causality between
application-level logs from multiple sources. The events are then
encoded as a directed acyclic graph and stored in a graph
database, thus allowing the use of rich query languages to reason
about runtime behavior.
Our case study with TrainTicket, a ticket booking application
with 40+ microservices, shows that Horus surpasses current
widely-adopted log analysis systems in pinpointing the root cause
of anomalies in distributed executions. Also, we show that Horus
builds a causally-consistent log of a distributed execution with
much higher performance (up to 3 orders of magnitude) and
scalability than prior state-of-the-art solutions. Finally, we show
that Horus’ approach to query causality is up to 30 times faster
than graph database built-in traversal algorithms.
I. INTRODUCTION
Anomalies in systems can potentially impact users’ lives and
undermine their trust in a blink of an eye. Identifying and trou-
bleshooting unexpected behavior in a quick and effective way
is thus essential to maintain dependable services. Developers
still use logs as the primary resource for debugging anomalies
in distributed systems [1], as they are usually available out-of-
the-box on every component via standard logging libraries [2],
[3]. While the content of a log ﬁle may vary depending on the
application and vendor, the common procedure is to have a
sequence of unstructured textual messages with miscellaneous
information regarding the system’s state (e.g.
timestamps,
object identiﬁers, variable values, etc).
However, as modern distributed architectures increase in
size, complexity and heterogeneity, troubleshooting issues via
log inspection can be a daunting task for two main reasons:
• Large number of intertwined events. The log of a
distributed execution often comprises a huge number of
messages that belong to different requests and appear in-
terleaved with each other. Since only a few log messages
are actually relevant to diagnose an anomaly [4], [5],
blindly analyzing the log for the whole execution is a
metaphorical search for a needle in a haystack, which
will only cause the problem to linger on.
• Lack of causality. As observed by Lamport, causality
is fundamental to consistent reasoning about distributed
executions [6]. Unfortunately, physical clocks on dif-
ferent machines drift apart, which prevents nodes of a
distributed system from relying on real time to derive
causality [7]. As the processing of a single request can
be split across different nodes, one cannot reconstruct a
request’s causal history simply by collecting the nodes’
log ﬁles and sort their messages by timestamp.
A popular approach to address the ﬁrst challenge is to use
toolsets such as the Elastic stack [8]. The Elastic stack provides
support for aggregating, storing, analyzing, and visualizing
logs from multiple components of a distributed system. The
analysis of those logs is driven by a query language that en-
ables the ﬁltering of timestamped messages using conditional
and regular expressions. Although widely used by developers
to debug issues in production environments, the Elastic stack
is no panacea. Since log messages are ordered by physical
timestamp instead of causal dependencies, this toolset falls
short for reasoning about bugs stemming from concurrent
interactions across different nodes. In Section II-C, we show
a concrete example of this limitation.
To tackle the aforementioned challenges, we propose Ho-
rus, a system that enables causally-consistent reﬁnement of
distributed system logs in a non-intrusive and scalable fashion.
Horus traces lightweight kernel-level events with a clear
happens-before relationship [6] (e.g. socket send and receive
events), which are then used to encode a partial order of
log messages from different sources. Since the inter-node
causal dependencies stemming from the kernel-level events are
independent of the message timestamp, Horus is not prone to
physical clock drifting.
This idea of tracking causality in a distributed execution us-
ing kernel-level events was pioneered by Falcon [9]. However,
Falcon relies on a Satisﬁability Modulo Theories constraint
solver to perform the causal ordering, which, using current
state-of-the-art solvers [10], does not scale to executions with
more than a few thousands of events, thus being unsuitable
for production environments [11]. Moreover, Falcon does not
provide support for ﬁltering nor querying the resulting exe-
978-1-6654-3572-7/21/$31.00 ©2021 IEEE
DOI 10.1109/DSN48987.2021.00035
212
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:14 UTC from IEEE Xplore.  Restrictions apply. 
cution trace, which further hinders its ability to troubleshoot
issues in real-world distributed systems.
Horus overcomes Falcon’s limitations by explicitly encod-
ing causality as a directed acyclic graph (DAG), where nodes
represent events (i.e. log messages and low-level operations)
and edges indicate the causal dependencies between them. This
execution graph is then stored in a graph database, allowing
for both better scalability and the use of rich query languages
to analyze the content of the logs.
To speed up graph traversals for query computation, Horus
assigns both logical [6] and vector [12] clocks to each event.
Given the DAG properties of the execution graph, the logical
timestamps can be used to bound the subset of events relevant
to a given query. This way, portions of the graph that comprise
events outside the time span given by the logical clocks can
be safely and efﬁciently excluded from the traversal, as they
will not contribute to the result set.
Our case study with TrainTicket [1], a ticket booking
application with 40+ distributed microservices, shows that
Horus surpasses the Elastic stack in pinpointing the root cause
of an anomaly in a distributed execution via log analysis.
We also conducted an experimental evaluation of Horus that
demonstrated that our system is capable of causal ordering
the log messages of a distributed execution with much higher
performance (up to 3 orders of magnitude) and scalability
than prior state-of-the-art solutions such as Falcon. Moreover,
we show that, by leveraging logical time, Horus is able to
dramatically reduce the query computation time (up to 30×)
with respect to traditional traversals in graph databases.
In summary, this paper makes the following contributions:
• A system, named Horus, that combines log messages and
kernel-level operations to produce a graph of a distributed
execution that can be inspected with rich queries.
• A technique that leverages logical clocks to dramatically
reduce the time to run high-level queries that search of
anomalies over a stored execution graph.
• An evaluation, using multiple benchmarks, that demon-
strates the efﬁciency and effectiveness of Horus with
respect to other state-of-the-art solutions to analyze logs
of distributed systems.
The rest of this paper is organized as follows. §II presents
a motivating example. §III provides an overview of Horus,
while §IV and §V detail how it achieves causality and query
reﬁnement, respectively. §VI shows how Horus can be used in
practice using a case study. §VII discusses the experimental
evaluation. §VIII overviews the related work. Finally, §IX
summarizes the main ﬁndings of this paper.
II. BACKGROUND AND MOTIVATION
Causality is key to understand the behavior of a distributed
system and, therefore, should be a core feature of any log
analysis tool. In this section, we start by reviewing the concept
of causality from the literature and, then, present a motivating
example with TrainTicket
log
analysis solutions without causality guarantees fall short for
debugging distributed system bugs.
to demonstrate that current
A. The Need for Causality
Lamport introduced the happens-before relation → to enable
a correct reasoning about causality in distributed executions
[6]. Formally, there is a happens-before relationship between
two events a and b, denoted a → b, if: a and b belong to