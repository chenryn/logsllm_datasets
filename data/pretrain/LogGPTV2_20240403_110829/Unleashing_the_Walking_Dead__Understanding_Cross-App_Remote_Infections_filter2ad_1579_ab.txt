that allows a developer to control the URLs allowed to be loaded
into a WebView instance.
WebView protection. Given the importance of local resources ex-
posed through these mechanisms, access control should certainly
be in place to prevent them from being abused by untrusted do-
mains. Android offers a set of APIs for controlling the domains
a WebView can visit, including shouldOverrideUrlLoading(),
onPageStarted() and shouldInterceptRequest(). Using these
APIs for domain control, however, is highly complicated. WebView
can visit untrusted domains under different circumstances: for ex-
ample, when its hosting app is activated to load a page directly
through loadUrl(), when it is asked to load another page in an
iframe, when it is redirected by user interactions or when it loads
another page due to a post request. Under each of these situations, a
different set of callbacks are triggered and security checks therefore
need to be performed at various program locations based upon
the unique properties of the callbacks. Given the complexity of
WebView integration within an app, complete mediation of its nav-
igation is difficult. Once such an attempt falls short, which happens
frequently in practice, some smart tricks can be played to bypass
the protection, as discovered in our study (Section 3.3).
On the other hand, app developers today often do not have in-
centive to put too much restriction on the domains their apps are
allowed to visit, due to the need to retain their customers as long as
possible, a feature critical for their apps’ commercial values [18, 34]
(for advertising, in-app purchase, etc.). So app design today is lean-
ing more toward “soft protection” of WebView instances. Specifi-
cally, many apps do not apply any restrictions to the instances that
do not include any JavaScript interfaces, since these instances are
considered to be of “low risk”. A more common approach, as ob-
served in our study (Section 4.2), seems to just limit the app UIs (e.g.,
not providing any URL bar) to prevent the user from inadvertently
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA831directing WebView to untrusted domains, but has little constraints
on the navigation requests from other apps. Such protection turns
out to be insufficient and can be easily defeated by an XAWI attack,
as discovered in our research (Section 3).
2.3 Remote App Linking
Intent and Intent-filter. To invoke an app’s activity from the web
content, the WebView asks its hosting app to construct an Android
Intent and send it through the StartActivity API. When the In-
tent carries the recipient’s package name and the activity name, the
OS directly locates the target component. Otherwise, the system
needs to utilize the action, category and data URI within the Intent
to find the target. For this purpose, the target activity first needs
to register an Intent filter with the OS to specify the attributes of
the Intents it expects to receive. For example, “example://” matches
the attribute “” specified in an
Intent filter. In the presence of multiple activities expecting the
same Intent, the OS prompts a dialog to ask the user to choose.
In our attack, to avoid this user interaction, we utilize the URL
scheme channel capable of generating the Intent with a package
name whenever possible, unless the recipient’s Intent filter has not
been registered by another app.
URL scheme. URL schemes are the standard support for remote
app invocation. On Android, when the user clicks a link, the system
will send an Intent to its target. There are two types of schemes
supported by Android, implicit (or broadcast) scheme and explicit
(or Intent) scheme. An implicit scheme does not name a specific
app but provides data attributes for locating the target, through its
Intent. An explicit (or Intent) scheme, starting with intent:, includes
not only the data URI but also the target’s package name. For ex-
ample, “intent://example.com/path#Intent;package=com.example.
app;scheme=http;end” will be parsed to the Intent with data URI
“http://example.com/path” and package name “com.example.app”.
Deep linking scheme. Unlike web pages available on the Internet,
content within apps cannot be searched and shared. To solve this
problem, deep linking has been proposed to connect the content
within mobile apps with a single link, which enables the invocation
from web pages to the activities inside apps. Unlike URL schemes,
deep linking supports are provided by individual app vendors and
incorporated into apps through SDKs. To use the mechanism, an
app developer includes her own WebViewClient to handle call-
backs from WebView (thereby disabling both the implicit and ex-
plicit schemes), which contains the customized program logics to
implement individual vendors’ own deep-linking protocols. Since
there is no standard for this technology right now, we consider
any customized scheme or web content capable of specifying both
package and activity names to be a deep linking approach, as it can
directly reach the activity, which the standard schemes cannot do.
An example is Facebook’s applink[16] (see Figure 1).
Security guards. URL-based app invocation has not been exten-
sively guarded by mobile OS. On Android, the protection is built
almost entirely on Intent permissions and filter. Alternatively, one
can “hide” an activity by registering no scheme in its Intent fil-
ter, so neither the implicit or explicit scheme can trigger the ac-
tivity. However, this protection becomes completely ineffective
in the presence of deep linking, which enables specification of
Figure 1: An example of Facebook’s applink
activity name and therefore can reach such a “hidden” activity
(note here, “’hidden” means an activity could not be accessed by
remote party through scheme, and it may still be exported to lo-
cal apps). Further, the WebViewClient object provides an interface
(e.g.shouldOverrideUrlLoading()), for the activity to determine how
a URL in a web page should be handled, which can be used to con-
trol this app/component invocation and can even completely shut
down the channel. However, our study shows that such protection
can be circumvented even in popular apps, due to their problematic
implementation (Section 3.1).
3 INFECTION ACROSS WEBVIEWS
In this section, we elaborate the XAWI attacks, starting with pre-
liminaries for the attacks and then explicating the techniques we
used to conduct remote deep Phishing and escalate the adversary’s
capabilities. These attacks exploit high-profile apps (e.g., Facebook,
Twitter, Baidu, Amazon, etc.), posing realistic threats to a large
number of popular apps (at least 7.4% found in our research). Their
video demos are posted online [1].
3.1 XAWI Basics
Overview and threat model. The root cause of XAWI attack is
the XAWN (cross-app WebView navigation) weakness, which al-
lows the malicious content in one WebView to send a navigation
request through a URL scheme to another WebView in a different
app, redirecting the latter to an attack website, so as to gain a partial
control of its hosting app. In this way, the attack web content (e.g.,
a script) can spread across multiple apps on the same device like
an infectious disease, making it possible for the remote adversary
to utilize these infected zombies to launch a colluding attack. In
our study, we demonstrate the feasibility of such an attack. Most
importantly, we found that infected WebViews can be used collec-
tively to amplify the effectiveness of the attack, enabling the remote
adversary to perform the activities that cannot be done through a
single app.
Unlike most prior studies [2, 4, 7, 8, 20, 23, 24, 31], we do not
assume the presence of a malicious app on the victim’s device. What
needs to make the attack work is just having malicious content
(e.g., JavaScript) loaded into the WebView in at least one of the
victim’s apps. This happens when the user inadvertently visits some
malicious, compromised or other less secure domains through her
app. Actually, we believe that a main entry point for such an attack
is a mobile browser, such as Chrome, even though its WebViews
only have limited capabilities (no JS interfaces) and therefore need
stepping stones to gain more privileges.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA832Target and channel. The goal of the XAWI adversary is to gain
privileges and control apps, which is served by aggressively infect-
ing other apps’ WebViews, particularly those with JS interfaces.
Our study on top 5,000 Google-Play apps shows that 7.4% of them
expose at least one of their WebView instances, providing the mate-
rials for constructing exploits that reach these targets. Particularly,
38.4% of these vulnerable targets have JS interfaces capabilities,
supporting location, device private and network state information
collection. Since almost all the WebViews with certain capabilities
also have different levels of domain control, the key of the attack is
to bypass such protection. A challenge here is the channel for such
attacks, since an infected app, such as Chrome, may not have the
capability to access the targeted resources and needs the help from
other apps to do that.
Cross-app channels are those URL based inter-process com-
munication (IPC) mechanisms, including the implicit and explicit
schemes and deep links (Section 2.3). The app’s in-WebView infec-
tion may only utilize the channel the app supports to reach out to
other apps. Therefore, in the case that the target WebView cannot
be directly invoked (e.g., not registering any Intent filter), the adver-
sary needs to strategically infect another app having that channel
(e.g., deep link) to attack the target. On the other hand, for the We-
bView not having any cross-app channels (i.e., not allowed to make
any IPC call), its infection apparently cannot go beyond its hosting
app. Interestingly, however, we discovered that this limit can actu-
ally be broken sometimes, which enables a WebView not having
the IPC privilege to issue navigation requests to other WebViews,
as elaborated below.
• Exploiting a race condition in popular apps. We found that in pop-
ular apps like WeChat and Pinterest, there exists a race-condition
when a WebView is about to be closed, which once exploited, tem-
porarily grants the WebView the privilege to send out implicit or
even explicit schemes, even though the WebView is not supposed
to have this channel. Specifically, when a WebView instance is to
be destroyed, these apps will set its WebViewClient object (for con-
trolling URL navigation) to NULL. This actually turns the object
to the default one with the capability to send out schemes. As a
result, the malicious content within the WebView can issue navi-
gation requests to others before it is closed by the OS. Note that
for the popular apps with this problem, oftentimes, the attack page
within an WebView instance can programmatically close the in-
stance through commands, thereby actively triggering this process
to produce scheme requests before the WebView stops running:
e.g., we can load "weixin://webview/close/" into WeChat’s Web-
View or "market://" into Pinterest, which will cause the app to set
WebViewClient to NULL, so the attack script’s navigation requests
can be sent out before its hosting WebView is closed.
Persistent control and reconnaissance. Serving the purpose of
strategic infection spreading are two key capabilities: stealthy and
persistent control on the infected app, and reconnaissance for find-
ing other vulnerable apps on the same device. In our research, we
found that by default, a WebView can operate in background, con-
tinuously receiving and executing the commands (e.g., monitoring
other apps and changing their states) from the remote adversary.
Among all the vulnerable apps we examined (> 16,907,555,000 total
installs), 81.6% of them can respond to remote commands while
running in the background. Further, the activity hosting WebView
can be launched in a standard mode, under which each invocation
of the activity creates a new instance. Our research shows that
many apps are running in this mode (e.g., Taobao, Baidu Appstore,
Twitter, etc.). Leveraging these features, as soon as an infected app
(i.e., the attacker) loads attack content to a victim app’s WebView,
the content (e.g., a script) in the WebView first launches another
activity of the same app to cover the WebView and then the attacker
triggers another app so as to move the victim to the background
(see Figure 2). This transition can be done within a very short period
of time, barely noticed by the user (see the online demo [1]). Most
importantly, the background WebView infection can continuously
command and control the whole infected device behind the scene,
even when the infected app is launched by the user (only the top
activity displayed) and even when the exact same activity is called
again (a different instance of the activity displayed). Also, as long
as some of the infected apps (called commander) can operate per-
sistently, the adversary can maintain a firm control of the device,
since other apps, even after their infected WebViews are closed, can
be easily reinfected by the commander.
Figure 2: An infected WebView in the background
The background running commander also needs to identify and
infect other co-located vulnerable apps to serve a XAWI attack.
It can simply send navigation requests to the popular apps likely
already installed on the target device: if the recipient is indeed
there, the web content loaded to its WebView will notify the re-
mote adversary. Note that with the adversary’s persistent control,
this can be done over a long period of time. Alternatively, we can
leverage some apps’ JS interfaces. For example, the Baidu app lets
its WebViews query the presence of a specific app; also the widely-
deployed AdMob library (a leading mobile advertising platform)
tests the presence of a given package by trying to open it, and then
informs the script running in its WebView once succeeds. To use
this platform, we successfully delivered an attack advertisement
(ad) through AdMob to our app using the library. The ad can dis-
cover vulnerable apps through AdMob and infect them using the
WebView navigation.
Entry points and triggers. A XAWI infection starts from an entry-
point app, whose WebView is the first one stuck by the attack web
content on a device. Browsers, social-networking apps and mobile
ad platforms are clearly more likely to become the entry points than
other apps. For example, Chrome can be turned into the “source of
transmission” once it visits an attack site. A problem here, however,
is that unlike the WebViews within many other apps, in which a
ForegroundBackground(1)(2)(3) Victim app’s infected WebViewVictim app’s another ActivityAnother app (eg, chrome)(1)Infect the victim app’s WebView(2)Launch another activity of the victim app(3)Launch another app to hide the victim appSession D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA833script can automatically issue navigation requests, Chrome is only
allowed to do so in the presence of a user click. However, we found
that the browser is not good at linking the click to the URL scheme
to be triggered: you can click on an image, a button and even a link
opening a new page to trigger the delivery of a scheme unknown
to the user. Also, at the moment a new page is loaded (e.g., when
the browser is launched by a navigation request from another app),
Chrome is allowed to send out an Intent scheme to other apps,
without the user’s click.
3.2 Remote Deep Phishing
With such supporting techniques, a XAWI adversary’s capability to
infect and control multiple apps from the remote becomes a game
changer for mobile Phishing. No longer do we need a malicious app
to be installed on the victim’s device, as assumed by all prior work [4,
7, 31]. The new attack through XAWI can happen completely from
the remote, through the scripts running in infected WebViews. Also
we are talking about a coordinated, multi-app attack, which can do
a lot more than the conventional, single-app attack can possibly
achieve. Most importantly, such an attack is practical, only relying
on the WebViews without JS interfaces, which are less protected
and often need to be available for integrated services (discovered in
7.4% of popular apps). We call this new attack remote deep Phishing
or RDP. The importance of RDP has been acknowledged by both
Facebook and Twitter, which awarded us for the discovery of this
new type of attacks [1].
More specifically, our research shows that in an RDP, the adver-
sary can stealthily change a legitimate app’s state and the relations
between infected apps. For example, we can use one app’s WebView
to fake its own login UI, so when the user launches the app, she
will unsuspiciously expose her credentials to the remote adversary.
Further, an app with in-WebView infection can invite another app
to impersonate some of its own UIs, when the latter includes an
activity more suitable for the task. Since all these attacks happen
with the cooperation from the “victim” app, the one impersonated
or hijacked, they cannot be captured by existing defense. Follow-
ing we elaborate three examples of such attacks, on Twitter and
Facebook apps.
Evil twin from within. We found that a remote adversary with
scripts running in Chrome can stealthily change the state of the
Twitter app, using its WebView to impersonate its own login view.
This attack renders all existing protection useless, since the Phish-
ing content comes from the Twitter app itself. To make it hap-
pen, the infected Chrome first sends a navigation request to Twit-
ter through a scheme invocation. Twitter has a public activity
UrlInterpreterActivity that handles all the StartActivity re-
quests from the browser and other apps (Figure 10 in Appendix
illustrates the Intent filter registered by the activity and the URL
that can be used to trigger the activity). Upon receiving the URL,
the activity launches another activity and navigates the latter’s
WebView to attacker’s website, which grants the control to the ad-
versary. During this process, to avoid the http scheme that triggers
a dialog window asking the user to choose the handling app, our