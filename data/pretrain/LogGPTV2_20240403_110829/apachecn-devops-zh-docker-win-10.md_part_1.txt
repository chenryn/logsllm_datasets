# 十、使用 Docker 为持续部署管道提供动力
Docker 支持在易于分发和管理的组件中构建和运行软件。该平台还适用于开发环境，其中源代码控制、构建服务器、构建代理和测试代理都可以在 Docker 容器中从标准映像运行。
使用 Docker 进行开发可以让您将许多项目整合到一组硬件中，同时保持隔离。您可以在 Docker Swarm 中拥有运行 Git 服务器和高可用性映像注册表的服务，许多项目都共享这些服务。每个项目都可以有一个专用的构建服务器，配置有自己的管道和构建设置，运行在一个轻量级的 Docker 容器中。
在这种环境中建立一个新项目只是在源代码管理存储库中创建一个新的存储库，在注册表中创建一个新的命名空间，并为构建过程运行新的容器。这些步骤都可以自动化，因此项目入职成为一个简单的过程，只需几分钟，并使用现有的硬件。
在本章中，我将使用 Docker 引导您完成**持续集成和持续交付** ( **CI/CD** )管道的设置。我会报道:
*   用 Docker 设计 CI/CD
*   在 Docker 中运行共享开发服务
*   在 Docker 中使用詹金斯配置配置项/光盘
*   使用詹金斯部署到远程 DockerSwarm
# 技术要求
您将需要运行在 Windows 10 更新 18.09 或 Windows Server 2019 上的 Docker 来跟随示例。本章代码见[https://github . com/six eyes/docker-on-window/tree/第二版/ch10](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch10) 。
# 用 Docker 设计 CI/CD
管道将支持完全连续集成。当开发人员将代码推送到共享的源代码存储库时，这将触发生成候选版本的构建。候选版本将被标记为存储在本地注册表中的 Docker 映像。配置项工作流将构建的映像中的解决方案部署为容器，并运行端到端测试包。
我的样本管道有一个手动质量门。如果测试通过，映像版本将在 Docker Hub 上公开，管道可以在远程 Docker Swarm 上运行的公共环境中开始滚动升级。在完整的配置项/光盘环境中，您也可以在您的管道中自动部署到生产。
管道的各个阶段都将由 Docker 容器中运行的软件提供动力:
*   **源码控制** : Gogs，一个用 Go 编写的简单开源 Git 服务器
*   **构建服务器** : Jenkins，一个基于 Java 的自动化工具，使用插件支持很多工作流
*   **构建代理** : The.NET SDK 打包成 Docker 映像，在容器中编译代码
*   **测试代理** : NUnit 打包成 Docker 映像，对部署的代码运行端到端测试
Gogs 和 Jenkins 可以在 Docker Swarm 或单个 Docker 引擎上的长时间运行的容器中运行。构建和测试代理是任务容器，将由 Jenkins 运行以执行管道步骤，然后它们将退出。候选版本将被部署为一组容器，当测试完成时，这些容器将被移除。
设置它的唯一要求是让容器能够访问 Docker API——无论是在本地还是远程环境中。在本地服务器上，我将使用来自 Windows 的命名管道。对于远程 Docker Swarm，我将使用安全的 TCP 连接。我在[第 1 章](01.html)、*中介绍了保护 Docker API，使用`dockeronwindows/ch01-dockertls`映像生成 TLS 证书。您需要配置本地访问，以便 Jenkins 容器可以在开发中创建容器，并配置远程访问，以便 Jenkins 可以在公共环境中开始滚动升级。*
当开发人员将代码推送到运行 Docker 容器中 Gogs 的 Git 服务器时，这个管道的工作流就开始了。Jenkins 被配置为轮询 Gogs 存储库，如果有任何更改，它将启动构建。解决方案中的所有定制组件都使用多阶段 Dockerfiles，这些文件存储在项目的 Git 存储库中。Jenkins 为每个 Docker 文件运行`docker image build`命令，在 Jenkins 本身运行在容器中的同一个 Docker 主机上构建映像。
构建完成后，Jenkins 将解决方案作为容器部署在本地的同一个 Docker 主机上。然后，它运行端到端测试，这些测试被打包在 Docker 映像中，并作为容器在与被测试的应用相同的 Docker 网络中运行。如果所有的测试都通过了，那么最后的管道步骤将这些映像作为发布候选推送到本地注册表，并且注册表也在 Docker 容器中运行。
当您在 Docker 中运行开发工具时，您将获得与在 Docker 中运行生产工作负载时相同的好处。整个工具链变得可移植，您可以在任何您喜欢的地方运行它，并且只需要很少的计算需求。
# 在 Docker 中运行共享开发服务
源代码管理和映像注册等服务是许多项目之间共享的好选择。它们对高可用性和可靠存储有类似的要求，因此可以跨具有足够容量的集群进行部署，用于许多项目。配置项服务器可以作为共享服务运行，也可以作为每个团队或项目的单独实例运行。
我在[第 4 章](04.html)*中介绍了在 Docker 容器中运行私有注册表，并与 Docker 注册表*共享映像。在这里，我们将研究在 Docker 中运行一个 Git 服务器和一个 CI 服务器。
# 将一个 Git 服务器打包成一个 Windows Docker 映像
Gogs 是一个流行的开源 Git 服务器。它是用 Go 编写的，这是跨平台的，您可以基于最小的 Nano Server 安装或 Windows Server Core 将其打包为 Docker 映像。Gogs 是一个简单的 Git 服务器；它通过 HTTP 和 HTTPS 提供远程存储库访问，并且它有一个网络用户界面。Gogs 团队在 Docker Hub 上为 Linux 提供映像，但是您需要构建自己的映像以在 Windows 容器中运行。
在 Docker 映像中打包 Gogs 非常简单。这是一个在 Dockerfile 中编写安装指令脚本的例子，我已经为`dockeronwindows/ch10-gogs:2e`映像完成了这个过程。该映像使用从 Windows Server Core 开始的多阶段构建来下载 Gogs 版本并扩展 ZIP 文件:
```
#escape=`
FROM mcr.microsoft.com/windows/servercore:ltsc2019 as installer
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]
ARG GOGS_VERSION="0.11.86"
RUN Write-Host "Downloading: $($env:GOGS_VERSION)"; `
    Invoke-WebRequest -Uri "https://cdn.gogs.io/$($env:GOGS_VERSION)...zip" -OutFile 'gogs.zip';
RUN Expand-Archive gogs.zip -DestinationPath C:\;
```
这里没有什么新内容，但有几点值得关注。Gogs 团队为他们的版本提供了一个 CDN，URL 使用相同的格式，所以我已经参数化了要下载的版本号。`ARG`指令使用了`0.11.86`的默认 Gogs 版本，但是我可以通过指定一个构建参数来安装不同的版本，而无需更改 Dockerfile。
为了弄清楚安装的是哪个版本，我在下载 ZIP 文件之前把它写了出来。下载在一个单独的`RUN`指令中，所以下载的文件被存储在 Docker 缓存中它自己的层中。如果我需要在 Dockerfile 中编辑后面的步骤，我可以再次构建映像，并从缓存中获取下载的文件，因此不需要重复下载。
最终的映像可能基于 Nano Server，因为 Gogs 是一种跨平台技术，但它依赖于 Git 工具，这在 Nano Server 中很难设置。用巧克力安装依赖项很简单，但是在 Nano Server 中不行。我使用`sixeyed/chocolatey`作为基础应用映像，这是 Docker Hub 上的公共映像，在 Windows Server Core 上安装了 Chocolatey，然后我为 Gogs 设置了环境:
```
FROM sixeyed/chocolatey:windowsservercore-ltsc2019
ARG GOGS_VERSION="0.11.86"
ARG GOGS_PATH="C:\gogs"
ENV GOGS_VERSION=${GOGS_VERSION} `
    GOGS_PATH=${GOGS_PATH}
EXPOSE 3000
VOLUME C:\data C:\logs C:\repositories
CMD ["gogs", "web"]
```
我将 Gogs 版本和安装路径捕获为`ARG`指令，以便可以在构建时指定它们。构建参数没有存储在最终映像中，所以我在`ENV`指令中将它们复制到环境变量中。Gogs 默认使用端口`3000`，我为所有数据、日志和存储库目录创建卷。
Gogs 是一个 Git 服务器，但它没有将 Git 包含在发行版中，这就是为什么我使用安装了 Chocolatey 的映像。我用`choco`命令行安装`git`:
```
RUN choco install -y git
```
最后，我从安装程序阶段复制扩展的`Gogs`目录，并从本地`app.ini`文件捆绑一组默认配置:
```
WORKDIR ${GOGS_PATH}
COPY app.ini ./custom/conf/app.ini
COPY --from=installer ${GOGS_PATH} .
```
构建这个映像给了我一个可以在 Windows 容器中运行的 Git 服务器。
It's not a best practice to have an application image that uses a larger base image than it needs, and includes installation tools such as Chocolatey. If my Gogs container was compromised, the attacker would have access to the `choco` command as well as all the features of PowerShell. In this case, the container won't be on a public network, so the risks are mitigated.
# 在 Docker 中运行 Gogs Git 服务器
您可以像运行任何其他容器一样运行 Gogs:将其设置为分离，发布 HTTP 端口，并使用主机装载将卷存储在容器外部的已知位置:
```
> mkdir C:\gogs\data; mkdir C:\gogs\repos
> docker container run -d -p 3000:3000 `
    --name gogs `
    -v C:\gogs\data:C:\data `
    -v C:\gogs\repos:C:\gogs\repositories `
    dockeronwindows/ch10-gogs:2e
```
Gogs 映像中捆绑了默认配置设置，但是当您第一次运行应用时，您需要完成一个安装向导。我可以浏览到`http://localhost:3000`，保留默认值，点击安装 Gogs 按钮:
![](img/25fa9119-bc6b-4f11-9fe2-edabd0b2d520.png)
现在，我可以注册用户并登录，这将我带到 Gogs 仪表板:
![](img/729ae508-9bc9-46ae-9fdb-1e3c84e7b997.png)
除了常见的 Git 特性之外，Gogs 还支持问题跟踪和拉取请求，因此它非常像 GitHub 的精简本地版本。我接着创建了一个名为`docker-on-windows`的存储库来存储这本书的源代码。要使用它，我需要在我的本地 Git 存储库中添加 Gogs 服务器作为远程服务器。
我使用了`gogs`作为容器名，所以其他容器可以通过这个名字到达 Git 服务器。我还在我的 hosts 文件中添加了一个指向本地机器的同名条目，这样我就可以在我的机器上和容器内使用相同的`gogs`名称(这在`C:\Windows\System32\drivers\etc\hosts`中):
```
#ch10 
127.0.0.1  gogs
```
I tend to do this quite a lot, adding the local machine or container IP addresses to my hosts file. I have a PowerShell alias set up to make it easier, which gets the container IP address and adds the line to the hosts file. I've blogged about this and other aliases I use at [https://blog.sixeyed.com/your-must-have-powershell-aliases-for-docker](https://blog.sixeyed.com/your-must-have-powershell-aliases-for-docker).
现在，我可以像任何其他远程 Git 服务器一样，将源代码从我的本地机器推送到 Gogs，比如 GitHub 或 GitLab。它在本地容器中运行，但对我笔记本电脑上的 Git 客户端来说是透明的:
```
> git remote add gogs http://gogs:3000/docker-on-windows.git
> git push gogs second-edition
Enumerating objects: 2736, done.
Counting objects: 100% (2736/2736), done.
Delta compression using up to 2 threads
Compressing objects: 100% (2058/2058), done.
Writing objects: 100% (2736/2736), 5.22 MiB | 5.42 MiB/s, done.
Total 2736 (delta 808), reused 2089 (delta 487)
remote: Resolving deltas: 100% (808/808), done.
To http://gogs:3000/elton/docker-on-windows.git