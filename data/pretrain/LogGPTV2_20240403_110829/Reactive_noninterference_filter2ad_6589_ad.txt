mand paired with a store, where each step produces an
output.
3. (p)(i) ⇓ c, the response to an input event, producing
the command that will execute next.
4. Q a→ Q(cid:2)
, the actual transitions of the reactive system.
The bulk of computation occurs when the commands in
a handler are executed. Each step of computation produces
an output, o, although many of those outputs will be the
trivial output •, which is visible only to the highest-security
observer. The rules below are standard except for the ﬁnal
rule, which produces output.
5.1 Deﬁnition: Inductively deﬁne (μ, c)
the following rules:
(μ, (skip; c))
•→ (μ, c)
(μ, c1)
(μ, (c1; c2))
o→ (μ(cid:2), c(cid:2)
1)
o→ (μ(cid:2), (c(cid:2)
1; c2))
o→ (μ(cid:2), c(cid:2)
) with
Visible similarity is an important technical tool in our
development since it gives us a coinduction principle that
can be used to prove the following key lemma.
μ (cid:14) e ⇓ n
•→ (μ[r (cid:16)→ n], skip)
(μ, (r := e))
85μ (cid:14) e ⇓ n
n (cid:12)= 0
(μ, (if e then c1 else c2))
•→ (μ, c1)
μ (cid:14) e ⇓ 0
•→ (μ, c2)
(μ, (if e then c1 else c2))
n (cid:12)= 0
μ (cid:14) e ⇓ n
(μ, (while e {c}))
•→ (μ, (c; while e {c}))
μ (cid:14) e ⇓ 0
(μ, (while e {c}))
μ (cid:14) e ⇓ n
•→ (μ, skip)
(μ, (output ch(e)))
ch (n)→ (μ, skip)
Next, we need a deﬁnition that pairs an input with a pro-
gram and builds the code that will be executed in response
to that event. This will require a substitution of the message
data for the parameter x in the body of the event handler.
We assume a standard deﬁnition of substituting a value n
for x in an expression e (written e{n/x}), extended to com-
mands in the obvious way.
5.2 Deﬁnition: Inductively deﬁne (p)(i) ⇓ c with the fol-
lowing rules:
(ch(x){c}; p)(ch(n)) ⇓ c{n/x}
(cid:2)
(n)) ⇓ c
(p)(ch
(ch(x){c}; p)(ch
(cid:2)
ch (cid:12)= ch
(n)) ⇓ c
(cid:2)
(·)(i) ⇓ skip
Finally, we give the labeled transition system correspond-
ing to RIMP’s semantics. This system either transitions a
consumer state to a producer state by looking up the ap-
propriate handler, steps a producer state to a new producer
state (if there is computation remaining), or steps a pro-
ducer state to a consumer state (if the handler has ﬁnished
execution).
5.3 Deﬁnition: Deﬁne Q a→ Q(cid:2)
following rules:
(where a ::= i | o) with the
(p)(ch(n)) ⇓ c
(μ, p)
ch (n)→ (μ, p, c)ch
(μ, c)
o→ (μ(cid:2), c(cid:2)
)
(μ, p, c)ch o→ (μ(cid:2), p, c(cid:2)
)ch
(μ, p, skip)ch •→ (μ, p)
We can easily show that these rules deﬁne a reactive sys-
tem, which is really just a matter of conﬁrming that the
RIMP execution will never halt if inputs are available.
Typing of RIMP Programs. Now we give a static type
system to the RIMP language, whose purpose is to identify
a subset of programs that are secure.
We assume there is a function lbl that associates a la-
bel with every channel and program variable, and we deﬁne
visible l(ch(n)) to mean that lbl (ch) ≤ l, for both inputs and
outputs. Deﬁne visible l(•) to hold iﬀ l = (cid:9).
Expressions are typed with a single label, which can be
interpreted as an upper bound on the secrecy level of the
components of the expression. The typing judgment for ex-
pressions is parametrized by a mapping Γ from parameters
to labels. (Even though we use only one formal parameter
x in this language, we write it this way for consistency of
notation with standard typing judgments in more expressive
languages.)
5.4 Deﬁnition: Inductively deﬁne Γ (cid:14) e : l with the fol-
lowing rules:
Γ(x) ≤ l
Γ (cid:14) x : l
Γ (cid:14) e1 : l1
Γ (cid:14) n : l
Γ (cid:14) e2 : l2
Γ (cid:14) e1 (cid:7) e2 : l
lbl (r) ≤ l
Γ (cid:14) r : l
l1, l2 ≤ l
Commands are also typed with a single label, which can
be interpreted as a lower bound on the secrecy of the ef-
fects that could occur during the execution of the command.
Traditionally, this label is called the label of the “program
counter,” so we use pc to range over it. Again, we need
a typing environment Γ for the parameters that might be
present in commands.
5.5 Deﬁnition: Inductively deﬁne Γ (cid:14) c : pc with the fol-
lowing rules:
pc ≤ pc1, pc2
Γ (cid:14) c1 : pc1
Γ (cid:14) e : l
Γ (cid:14) skip : pc
Γ (cid:14) c2 : pc2
Γ (cid:14) (c1; c2) : pc
l ≤ lbl(ch)
Γ (cid:14) output ch(e) : pc
Γ (cid:14) e : l
Γ (cid:14) e : l
l ≤ lbl (r)
Γ (cid:14) (r := e) : pc
Γ (cid:14) c1 : pc1
l ≤ pc1, pc2
pc ≤ pc1, pc2
Γ (cid:14) if e then c1 else c2 : pc
pc ≤ lbl (ch)
pc ≤ lbl (r)
Γ (cid:14) c2 : pc2
Γ (cid:14) e : l
l ≤ pc1
Γ (cid:14) c : pc1
Γ (cid:14) while e {c} : pc
pc ≤ pc1
The typing judgment for programs simply requires that
each handler be well typed at the level of its channel, under
the assumption that the message received is secret at the
level of the channel.
5.6 Deﬁnition: Inductively deﬁne (cid:14) p with the following
rules:
(cid:14) ·
x : lbl (ch) (cid:14) c : lbl (ch)
(cid:14) ch(x){c}; p
(cid:14) p
Finally, we may deﬁne a typing judgment for producer
and consumer states. Note that typing programs does not
depend on the store. The channel that triggered a producer
state also constrains the type of the command in that state.
5.7 Deﬁnition: Deﬁne the judgment (cid:14) Q with the follow-
ing rules:
(cid:14) p
(cid:14) (μ, p)
(cid:14) p
(cid:14) c : lbl (ch)
(cid:14) (μ, p, c)ch
86These deﬁnitions have the standard type preservation
property.
5.8 Lemma: If (cid:14) Q and Q a→ Q(cid:2)
, then (cid:14) Q(cid:2)
.
The standard progress theorem for well-typed terms is
actually trivial here because by deﬁnition every term can
make progress in a reactive system.
Bisimulation on RIMP Programs. We now turn to deﬁn-
ing a label-indexed family of binary relations on program
states and showing that it is a ID-bisimulation. This relation
is built from relations on stores, commands, and programs.
First, two stores are related at label l if the contents visible
to l are identical. This relation is an equivalence relation.
5.9 Deﬁnition: Deﬁne two stores μ and μ(cid:2)
l (written μ ∼l μ(cid:2)
μ(r) = μ(cid:2)
to be related at
) if, for all r for which lbl (r) ≤ l, we have
(r).
Next, to deﬁne when two commands are related, we must
ﬁrst deﬁne a predicate high L(c) stating that the eﬀects of
a command are visible only within a certain upward-closed
set L.
In the following, we deﬁne the downward closure
) as {l | ∃l(cid:2) ∈ L. l ≤ l(cid:2)}.
of a set of labels L (written L(cid:2)
Similarly, the upward closure of a set of labels L (written
L(cid:3)
and
{l}(cid:3)
) is {l | ∃l(cid:2) ∈ L. l(cid:2) ≤ l}. (We write l(cid:2)
.) L is the complement of L.
for {l}(cid:2)
and l(cid:3)
5.10 Deﬁnition: Inductively deﬁne high L(c) with the fol-
lowing rules:
L is upward-closed
high L1 (c1)
high L2 (c2)
high L(skip)
lbl (ch) ∈ L
high L1∪L2 (c1; c2)
L is upward-closed
high L(output ch(e))
lbl (r) ∈ L
L is upward-closed
high L(r := e)
high L1 (c1)
high L2 (c2)
high L1∪L2 (if e then c1 else c2)
high L(c)
high L(while e {c})
Now we can deﬁne when two commands are related at a
label. Intuitively, the commands must be identical, except
for subcommands whose eﬀects are invisible to an observer
at level l.
5.11 Deﬁnition: Inductively deﬁne c ∼l c(cid:2)
c1 ∼l c(cid:2)
(c1; c2) ∼l (c(cid:2)
as follows:
c2 ∼l c(cid:2)
2
1; c(cid:2)
2)
skip ∼l skip
1
l(cid:2) ≤ lbl(ch) ≤ l
(cid:14) e : l(cid:2)
output ch(e) ∼l output ch(e)
(cid:14) e : l(cid:2)
l(cid:2) ≤ lbl (r) ≤ l
(r := e) ∼l (r := e)
(cid:14) e : l(cid:2)
l(cid:2) ≤ l
c1 ∼l c(cid:2)
c2 ∼l c(cid:2)
if e then c1 else c2 ∼l
1 else c(cid:2)
if e then c(cid:2)
1
2
2
(cid:14) e : l(cid:2)
c ∼l c(cid:2)
while e {c} ∼l while e {c}
l(cid:2) ≤ l
high L(c)
high L(c(cid:2)
c ∼l c(cid:2)
)
l (cid:12)∈ L
(This relation is symmetric and transitive; however, it is
not reﬂexive for untypeable commands. For example, con-
sider c = output ch(r) where lbl (r) (cid:12)≤ lbl (ch).)
Next we deﬁne when two programs are related. As for
commands, this is a partial equivalence relation.
5.12 Deﬁnition: Two programs p and p(cid:2)
(written p ∼l p(cid:2)
are related at l
• for all ch for which lbl (ch) ≤ l, if (p)(ch(n)) ⇓ c and
• for all ch for which lbl (ch) (cid:12)≤ l, if (p)(ch(n)) ⇓ c, then
) if
)(ch(n)) ⇓ c(cid:2)
, then c ∼l c(cid:2)
, and
(p(cid:2)
• for all ch for which lbl (ch) (cid:12)≤ l, if (p(cid:2)
)(ch(n)) ⇓ c, then
high l(cid:2) (c), and
high l(cid:2) (c).
Finally, we deﬁne when two program states are related. A
consumer state is related to a producer state only when the
outputs of the command in the producer state are invisible
and the stores and programs are related. This relation is
also a partial equivalence relation.
5.13 Deﬁnition: Two states Q and Q(cid:2)
(written Q ∼l Q(cid:2)
) with the following inductive deﬁnition:
are related at l
μ ∼l μ(cid:2)
(μ, p) ∼l (μ(cid:2), p(cid:2)
p ∼l p(cid:2)
)
μ ∼l μ(cid:2)
p ∼l p(cid:2)
(μ, p) ∼l (μ(cid:2), p(cid:2), c)ch
high l(cid:2) (c)
μ ∼l μ(cid:2)
p ∼l p(cid:2)
(μ, p, c)ch ∼l (μ(cid:2), p(cid:2)
μ ∼l μ(cid:2)
p ∼l p(cid:2)
(μ, p, c)ch ∼l (μ(cid:2), p(cid:2), c(cid:2)
high l(cid:2) (c)
)
c ∼l c(cid:2)
)ch
Security of RIMP Programs. Now that we have deﬁned a
label-indexed family of relations on program states, we need
to show that it is an ID-bisimulation.
A key lemma is that high commands step to high com-
),
o→ (μ(cid:2), c(cid:2)
) and, for all l
then
(cid:12)∈ L, we have ¬ visible l(o) and