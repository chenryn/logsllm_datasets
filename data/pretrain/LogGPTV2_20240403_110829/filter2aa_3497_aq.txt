size. If the key is short, an attacker could brute-force the key until they find the correct
one.
There are two main types of symmetric ciphers: block and stream ciphers. Each has its
advantages and disadvantages, and choosing the wrong cipher to use in a protocol can
seriously impact the security of network communications.
||||||||||||||||||||
||||||||||||||||||||
Block Ciphers
Many well-known symmetric key algorithms, such as the Advanced Encryption Standard
(AES) and the Data Encryption Standard (DES), encrypt and decrypt a fixed number of bits
(known as a block) every time the encryption algorithm is applied. To encrypt or decrypt a
message, the algorithm requires a key. If the message is longer than the size of a block, it
must be split into smaller blocks and the algorithm applied to each in turn. Each
application of the algorithm uses the same key, as shown in Figure 7-3. Notice that the
same key is used for encryption and decryption.
Figure 7-3: Block cipher encryption
When a symmetric key algorithm is used for encryption, the plaintext block is
combined with the key as described by the algorithm, resulting in the generation of the
cipher text. If we then apply the decryption algorithm combined with the key to the cipher
text, we recover the original plaintext.
Technet24
||||||||||||||||||||
||||||||||||||||||||
DES
Probably the oldest block cipher still used in modern applications is the DES, which was
originally developed by IBM (under the name Lucifer) and was published as a Federal
Information Processing Standard (FIPS) in 1979. The algorithm uses a Feistel network to
implement the encryption process. A Feistel network, which is common in many block
ciphers, operates by repeatedly applying a function to the input for a number of rounds.
The function takes as input the value from the previous round (the original plaintext) as
well as a specific subkey that is derived from the original key using a key-scheduling
algorithm.
The DES algorithm uses a 64-bit block size and a 64-bit key. However, DES requires
that 8 bits of the key be used for error checking, so the effective key is only 56 bits. The
result is a very small key that is unsuitable for modern applications, as was proven in 1998
by the Electronic Frontier Foundation’s DES cracker—a hardware-key brute-force
attacker that was able to discover an unknown DES key in about 56 hours. At the time, the
custom hardware cost about $250,000; today’s cloud-based cracking tools can crack a key
in less than a day far more cheaply.
Triple DES
Rather than throwing away DES completely, cryptographers developed a modified form
that applies the algorithm three times. The algorithm in Triple DES (TDES or 3DES) uses
three separate DES keys, providing an effective key size of 168 bits (although it can be
proven that the security is actually lower than the size would suggest). As shown in Figure
7-4, in Triple DES, the DES encrypt function is first applied to the plaintext using the
first key. Next, the output is decrypted using the second key. Then the output is encrypted
again using the third key, resulting in the final cipher text. The operations are reversed to
perform decryption.
||||||||||||||||||||
||||||||||||||||||||
Figure 7-4: The Triple DES encryption process
AES
A far more modern encryption algorithm is AES, which is based on the algorithm
Rijndael. AES uses a fixed block size of 128 bits and can use three different key lengths:
128, 192, and 256 bits; they are sometimes referred to as AES128, AES192, and AES256,
respectively. Rather than using a Feistel network, AES uses a substitution-permutation
network, which consists of two main components: substitution boxes (S-Box) and permutation
boxes (P-Box). The two components are chained together to form a single round of the
algorithm. As with the Feistel network, this round can be applied multiple times with
different values of the S-Box and P-Box to produce the encrypted output.
An S-Box is a basic mapping table not unlike a simple substitution cipher. The S-Box
takes an input, looks it up in a table, and produces output. As an S-Box uses a large,
distinct lookup table, it’s very helpful in identifying particular algorithms. The distinct
lookup table provides a very large fingerprint, which can be discovered in application
executables. I explained this in more depth in Chapter 6 when I discussed techniques to
find unknown cryptographic algorithms by reverse engineering binaries.
Other Block Ciphers
DES and AES are the block ciphers that you’ll most commonly encounter, but there are
others, such as those listed in Table 7-1 (and still others in commercial products).
Table 7-1: Common Block Cipher Algorithms
Cipher name
Block size
(bits)
Key size
(bits)
Year
introduced
Data Encryption Standard (DES)
64
56
1979
Technet24
||||||||||||||||||||
||||||||||||||||||||
Blowfish
64
32–448
1993
Triple Data Encryption Standard
(TDES/3DES)
64
56, 112, 168
1998
Serpent
128
128, 192,
256
1998
Twofish
128
128, 192,
256
1998
Camellia
128
128, 192,
256
2000
Advanced Encryption Standard (AES)
128
128, 192,
256
2001
The block and key size help you determine which cipher a protocol is using based on
the way the key is specified or how the encrypted data is divided into blocks.
Block Cipher Modes
The algorithm of a block cipher defines how the cipher operates on blocks of data. Alone,
a block-cipher algorithm has some weaknesses, as you’ll soon see. Therefore, in a real-
world protocol, it is common to use the block cipher in combination with another
algorithm called a mode of operation. The mode provides additional security properties, such
as making the output of the encryption less predictable. Sometimes the mode also changes
the operation of the cipher by, for example, converting a block cipher into a stream cipher
(which I’ll explain in more detail in “Stream Ciphers” on page 158). Let’s take a look at
some of the more common modes as well as their security properties and weaknesses.
Electronic Code Book
The simplest and default mode of operation for block ciphers is Electronic Code Book (ECB).
In ECB, the encryption algorithm is applied to each fixed-size block from the plaintext to
generate a series of cipher text blocks. The size of the block is defined by the algorithm in
use. For example, if AES is the cipher, each block in ECB mode must be 16 bytes in size.
The plaintext is divided into individual blocks, and the cipher algorithm applied. (Figure
7-3 showed the ECB mode at work.)
Because each plaintext block is encrypted independently in ECB, it will always encrypt
to the same block of cipher text. As a consequence, ECB doesn’t always hide large-scale
structures in the plaintext, as in the bitmap image shown in Figure 7-5. In addition, an
attacker can corrupt or manipulate the decrypted data in independent-block encryption by
||||||||||||||||||||
||||||||||||||||||||
shuffling around blocks of the cipher text before it is decrypted.
Figure 7-5: ECB encryption of a bitmap image
Cipher Block Chaining
Another common mode of operation is Cipher Block Chaining (CBC), which is more
complex than ECB and avoids its pitfalls. In CBC, the encryption of a single plaintext
block depends on the encrypted value of the previous block. The previous encrypted block
is XORed with the current plaintext block, and then the encryption algorithm is applied to
this combined result. Figure 7-6 shows an example of CBC applied to two blocks.
At the top of Figure 7-6 are the original plaintext blocks. At the bottom is the resulting
cipher text generated by applying the block-cipher algorithm as well as the CBC mode
algorithm. Before each plaintext block is encrypted, the plaintext is XORed with the
previous encrypted block. After the blocks have been XORed together, the encryption
algorithm is applied. This ensures that the output cipher text is dependent on the plaintext
as well as the previous encrypted blocks.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 7-6: The CBC mode of operation
Because the first block of plaintext has no previous cipher text block with which to
perform the XOR operation, you combine it with a manually chosen or randomly
generated block called an initialization vector (IV). If the IV is randomly generated, it must
be sent with the encrypted data, or the receiver will not be able to decrypt the first block of
the message. (Using a fixed IV is an issue if the same key is used for all communications,
||||||||||||||||||||
||||||||||||||||||||
because if the same message is encrypted multiple times, it will always encrypt to the same
cipher text.)
To decrypt CBC, the encryption operations are performed in reverse: decryption
happens from the end of the message to the front, decrypting each cipher text block with
the key and at each step XORing the decrypted block with the encrypted block that
precedes it in the cipher text.
Alternative Modes
Other modes of operation for block ciphers are available, including those that can convert
a block cipher into a stream cipher, and special modes, such as Galois Counter Mode (GCM),
which provide data integrity and confidentiality. Table 7-2 lists several common modes of
operation and indicates whether they generate a block or stream cipher (which I’ll discuss
in the section “Stream Ciphers” on page 158). To describe each in detail would be outside
the scope of this book, but this table provides a rough guide for further research.
Table 7-2: Common Block Cipher Modes of Operation
Mode name
Abbreviation
Mode type
Electronic Code Book
ECB
Block
Cipher Block Chaining CBC
Block
Output Feedback
OFB
Stream
Cipher Feedback
CFB
Stream
Counter
CTR
Stream
Galois Counter Mode
GCM
Stream with data integrity
Block Cipher Padding
Block ciphers operate on a fixed-size message unit: a block. But what if you want to
encrypt a single byte of data and the block size is 16 bytes? This is where padding schemes
come into play. Padding schemes determine how to handle the unused remainder of a
block during encryption and decryption.
The simplest approach to padding is to pad the extra block space with a specific known
value, such as a repeating-zero byte. But when you decrypt the block, how do you
distinguish between padding bytes and meaningful data? Some network protocols specify
an explicit-length field, which you can use to remove the padding, but you can’t always rely
on this.
One padding scheme that solves this problem is defined in the Public Key Cryptography
Standard #7 (PKCS#7). In this scheme, all the padded bytes are set to a value that
Technet24
||||||||||||||||||||
||||||||||||||||||||
represents how many padded bytes are present. For example, if three bytes of padding are
present, each byte is set to the value 3, as shown in Figure 7-7.
Figure 7-7: Examples of PKCS#7 padding
What if you don’t need padding? For instance, what if the last block you’re encrypting
is already the correct length? If you simply encrypt the last block and transmit it, the
decryption algorithm will interpret legitimate data as part of a padded block. To remove
this ambiguity, the encryption algorithm must send a final dummy block that only contains
padding in order to signal to the decryption algorithm that the last block can be discarded.
When the padded block is decrypted, the decryption process can easily verify the
number of padding bytes present. The decryption process reads the last byte in the block
to determine the expected number of padding bytes. For example, if the decryption
process reads a value of 3, it knows that three bytes of padding should be present. The
decryption process then reads the other two bytes of expected padding, verifying that each
byte also has a value of 3. If padding is incorrect, either because all the expected padding
bytes are not the same value or the padding value is out of range (the value must be less
than or equal to the size of a block and greater than 0), an error occurs that could cause the
decryption process to fail. The manner of failure is a security consideration in itself.
Padding Oracle Attack
A serious security hole, known as the padding oracle attack, occurs when the CBC mode of
operation is combined with the PKCS#7 padding scheme. The attack allows an attacker to
decrypt data and in some cases encrypt their own data (such as a session token) when sent
||||||||||||||||||||
||||||||||||||||||||
via this protocol, even if they don’t know the key. If an attacker can decrypt a session
token, they might recover sensitive information. But if they can encrypt the token, they
might be able to do something like circumvent access controls on a website.
For example, consider Listing 7-1, which decrypts data from the network using a
private DES key.
def decrypt_session_token(byte key[])
{
➊ byte iv[] = read_bytes(8);
      byte token[] = read_to_end();
➋ bool error = des_cbc_decrypt(key, iv, token);
      if(error) {
    ➌ write_string("ERROR");
      } else {
    ➍ write_string("SUCCESS");
      }
}
Listing 7-1: A simple DES decryption from the network
The code reads the IV and the encrypted data from the network ➊ and passes it to a
DES CBC decryption routine using an internal application key ➋. In this case, it decrypts
a client session token. This use case is common in web application frameworks, where the
client is effectively stateless and must send a token with each request to verify its identity.
The decryption function returns an error condition that signals whether the decryption
failed. If so, it sends the string ERROR to the client ➌; otherwise, it sends the string SUCCESS ➍.
Consequently, this code provides an attacker with information about the success or failure
of decrypting an arbitrary encrypted block from a client. In addition, if the code uses
PKCS#7 for padding and an error occurs (because the padding doesn’t match the correct
pattern in the last decrypted block), an attacker could use this information to perform the
padding oracle attack and then decrypt the block of data the attacker sent to a vulnerable
service.
This is the essence of the padding oracle attack: by paying attention to whether the
network service successfully decrypted the CBC-encrypted block, the attacker can infer the
block’s underlying unencrypted value. (The term oracle refers to the fact that the attacker
can ask the service a question and receive a true or false answer. Specifically, in this case,
the attacker can ask whether the padding for the encrypted block they sent to the service is
valid.)
To better understand how the padding oracle attack works, let’s return to how CBC
decrypts a single block. Figure 7-8 shows the decryption of a block of CBC-encrypted
data. In this example, the plaintext is the string Hello with three bytes of PKCS#7 padding
after it.
By querying the web service, the attacker has direct control over the original cipher text
Technet24
||||||||||||||||||||
||||||||||||||||||||
and the IV. Because each plaintext byte is XORed with an IV byte during the final
decryption step, the attacker can directly control the plaintext output by changing the
corresponding byte in the IV. In the example shown in Figure 7-8, the last byte of the
decrypted block is 0x2B, which gets XORed with the IV byte 0x28 and outputs 0x03, a
padding byte. But if you change the last IV byte to 0xFF, the last byte of the cipher text
decrypts to 0xD4, which is no longer a valid padding byte, and the decryption service
returns an error.
Figure 7-8: CBC decryption with IV
Now the attacker has everything they need to figure out the padding value. They query
the web service with dummy cipher texts, trying all possible values for the last byte in the
IV. Whenever the resulting decrypted value is not equal to 0x01 (or by chance another
valid padding arrangement), the decryption returns an error. But once padding is valid, the
decryption will return success.
With this information, the attacker can determine the value of that byte in the
decrypted block, even though they don’t have the key. For example, say the attacker sends
the last IV byte as 0x2A. The decryption returns success, which means the decrypted byte
XORed with 0x2A should equal 0x01. Now the attacker can calculate the decrypted value
||||||||||||||||||||
||||||||||||||||||||
by XORing 0x2A with 0x01, yielding 0x2B; if the attacker XORs this value with the
original IV byte (0x28), the result is 0x03, the original padding value, as expected.
The next step in the attack is to use the IV to generate a value of 0x02 in the lowest two
bytes of the plaintext. In the same manner that the attacker used brute force on the lowest
byte earlier, now they can brute force the second-to-lowest byte. Next, because the
attacker knows the value of the lowest byte, it’s possible to set it to 0x02 with the
appropriate IV value. Then, they can perform brute force on the second-to-lowest byte
until the decryption is successful, which means the second byte now equals 0x02 when
decrypted. By repeating this process until all bytes have been calculated, an attacker could
use this technique to decrypt any block.
Stream Ciphers
Unlike block ciphers, which encrypt blocks of a message, stream ciphers work at the
individual bit level. The most common algorithm used for stream ciphers generates a
pseudorandom stream of bits, called the key stream, from an initial key. This key stream is
then arithmetically applied to the message, typically using the XOR operation, to produce
the cipher text, as shown in Figure 7-9.
Figure 7-9: A stream cipher operation
As long as the arithmetic operation is reversible, all it takes to decrypt the message is to
generate the same key stream used for encryption and perform the reverse arithmetic
operation on the cipher text. (In the case of XOR, the reverse operation is actually XOR.)
The key stream can be generated using a completely custom algorithm, such as in RC4, or
by using a block cipher and an accompanying mode of operation.
Table 7-3 lists some common algorithms that you might find in real-world applications.
Table 7-3: Common Stream Ciphers
Technet24
||||||||||||||||||||
||||||||||||||||||||
Cipher name
Key size (bits)
Year
introduced