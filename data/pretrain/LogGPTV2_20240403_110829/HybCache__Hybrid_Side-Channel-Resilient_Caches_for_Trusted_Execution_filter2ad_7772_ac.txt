cency of accesses to the cache ways to make it least likely
to evict a line from one of the subcache ways if it is recently
used by an I-Domain process.
If the cache request is issued by an I-Domain process, it is
serviced by querying only the subcache ( G ). The subcache
deploys fully-associative mapping, and is thus queried by a
lookup of all the ways using the (cache line address bits -
block offset bits) as tag bits ( H ) and simultaneously query-
ing that the line belongs to an I-Domain (since these ways
may also be used by the NI-Domain) and that it was placed
by a process with the same IDID ( I ). Otherwise, a cache
miss occurs. Disallowing I-Domain processes from hitting on
cache lines originally placed by processes in other I-Domains
provides dynamic isolation between an unlimited number of
mutually distrusting processes that share memory. In case of
a miss, any of the subcache ways is randomly selected and
its cache line is evicted and replaced by the memory block
fetched from main memory ( J ). The random replacement
policy considers all subcache ways equally, even those occu-
pied by the NI-Domain cache lines.
456    29th USENIX Security Symposium
USENIX Association
FIGURE 1: HYBCACHE controller policy
4.4 Hardware Microarchitecture
Figure 2 shows how HYBCACHE could be applied for a con-
ventional cache hierarchy of a multi-core processor. The cache
capacity available for the NI-Domain execution is unaltered,
i.e., the conventional set-associative cache with all its sets and
ways can be utilized by the NI-Domain.
At each cache level, way-based partitioning is used to re-
serve at least a way in each set (gray ways in Figure 2). These
ways, combined, form the orthogonal subcache that the I-
Domain execution is restricted to use. However, these sub-
cache ways are not used exclusively by the I-Domain execu-
tion, i.e., the NI-Domain execution may use these ways in
case a corresponding set is fully utilized and the least-recently-
used (LRU) replacement algorithm requires to evict a cache
line from a subcache way in this set. This ensures that the NI-
Domain execution is provided with unaltered cache capacity
and does not suffer performance degradation.
The subcache is fully-associative and deploys random re-
placement policy, i.e., a given memory block is always equally
likely to be cached in any of the available ways. This breaks
set-associativity and provides randomization-based dynamic
isolation between different I-Domains while allowing ﬂexible
sharing of the subcache depending on the run-time utilization
requirements of the isolated execution domains. Using the
subcache fully-associatively further maximizes the utilization
of its limited hardwired capacity.
FIGURE 2: HYBCACHE hierarchy and organization
The nisolated ways that form the subcache are conﬁgured
(hardwired) at design-time and cannot change at run-time,
because these ways are members of both the primary cache as
USENIX Association
29th USENIX Security Symposium    457
incoming cache requestnon-isolatedisolatedABCDyesnoEyesyescache hitnonoFFEndEndGHJEndIJEndyesnonoyescache hitIs the process issuing the request in isolated or non-isolated execution mode?Query cache set-associatively using set index and tag bits to locate the way with requested memory blockIs way with matching tag found?Is it one of the subcacheways?Is line-IDID= non-isolated (all-zero)?Cache miss: Evict and replace (via LRU/pseudo-LRU policy) cache line (including these occupying subcache ways) by memory block fetched from main memoryQuery the nisolatedways of subcachefully-associatively using the requested cache line address as tag for lookupIs way with matching tagfound?Is wayoccupied by a line with matching line-IDID?Cache miss: Randomly replace and evict any of the cache lines occupying the subcacheways (irrespective of line-IDID of the cache lines)ABCDEFGHIJcache hitLevel 1InstructionCache0123Level 1DataCache0123Core 0Level2 Cache0123456subcacheof fully-associativenisolatedwaysLevel 1InstructionCache0123Level 1DataCache0123Core 1Level2 Cache0123456Level 3 Shared Cacheset 0set 1set 2set 3set 4set 5set 6set 7way 0way 0way 0way 0way 0way 0way 0way 0way 1…………………way 2……...…………way3…………………way4…………………way 5…………………way 6…………………way 7…………………Main Memorysubcacheof fully-associativenisolatedwayswell as the subcache as shown in Figure 3. It is not feasible to
make nisolated run-time conﬁgurable, as this would require that
all the ways are unreasonably wired in both a fully-associative
and set-associative organization. Thus, only a small subset
of nisolated ways (dark gray ways in Figure 3) is selected to
form the subcache. Each of the subcache ways is augmented
with IsolationDomainID (IDID) conﬁguration bits to iden-
tify the isolation domain that placed an occupying cache line
in the pertinent way. To provide any cache isolation at the
microarchitectural level, a mechanism to bind owners/tags to
cache lines is required, thus IDIDs are needed. We chose to
conﬁgure 4 bits for the IDID, thus supporting 16 concurrent
isolation domains, where an all-zero indicates the NI-Domain.
The number of bits allocated in HYBCACHE for IDID is a
hardware design decision. Increasing the number of desig-
nated bits would increase the number of maximum concurrent
isolation domains that HYBCACHE can support. However,
other metrics such as area overhead and power consumption
come into play in this design trade-off.
FIGURE 3: HYBCACHE hardware microarchitecture
The subcache ways are augmented with an extended tag
bits storage (dashed dark gray tag bits of the dark gray ways
in Figure 3). When queried fully-associatively (for the I-
Domains), all bits, except the offset bits (6 bits for byte-
addressable 64B cache line), of the requested address are
compared with the extended tag bits of the subcache ways
to locate a matching cache line. For the NI-Domain, the sub-
cache ways are queried set-associatively with the rest of the
cache (conventionally), where the request tag bits are com-
pared only with the non-extended tag bits of the subcache
ways within the located cache set.
4.5 Software Conﬁguration
Abstraction and Transparency. The hardware modiﬁca-
tions required for HYBCACHE are transparent to the software
and abstracted from it. The trusted software (or hardware)
component of the incorporating platform is only required to
interface with the HYBCACHE controller to communicate the
isolation domain of each incoming cache request. However,
HYBCACHE does not stipulate or restrict how these isolation
domains are deﬁned and communicated, thus leaving it to the
discretion of the system designer to identify how HYBCACHE
can be integrated with the comprising architecture.
Isolated Execution. HYBCACHE enables the dynamic iso-
lation of the cache utilization of different isolation domains
by using the IDID of the process that issues the cache request
being serviced. The means by which the isolation domains
are deﬁned, generated, and communicated is dependent on
how the trusted execution and isolation is deployed. We de-
sign HYBCACHE such that it is seamlessly compliant with
any trusted execution environment (TEE) where isolation do-
mains (across different processes, cores, containers, or virtual
machines (VMs)) are either software-deﬁned by a trusted OS
(thus requiring kernel support) or hardware/ﬁrmware-deﬁned
in case the OS is not trusted (such as in SGX). Different isola-
tion domains can be deﬁned across different isolated address
space ranges such as in SGX enclaves, across processes such
as in TrustZone normal/secure worlds or by standard inter-
process isolation, or even across different groups of processes
or different virtual machines.
HYBCACHE is agnostic to the means of deﬁning the IDIDs
of different isolation domains, and complements any form
of isolated execution environment in place to provide it with
cache side-channel resilience. If the kernel is trusted, kernel
support is required to assign an IDID (or an all-zero IDID for
a non-isolated process) to each process according to its isola-
tion domain. The IDID bits can be added as an additional pro-
cess attribute in each process’s process control block (PCB).
Otherwise, the trusted hardware or ﬁrmware would assign the
isolation domains. HYBCACHE assumes that some mecha-
nism of isolation is already enforced for security-critical code
that it can leverage to provide the cache-level isolation. We
argue why this is reasonable in Assumption A1. Neverthe-
less, if this is not the case, then isolation domains need to
be explicitly deﬁned by the developer if s/he wishes to pro-
tect particular code against cache-based side-channel attacks.
While HYBCACHE is focused on protecting user code, in prin-
ciple, kernel code can also be protected by allocating it to an
isolation domain.
Backward Compatibility. Similar to processor supplemen-
tary capabilities such as Page Attribute Tables (PATs) and
Memory Type Range Register (MTRR) for x86, HYBCACHE
supports providing side-channel-resilience on-demand while
458    29th USENIX Security Symposium
USENIX Association
TagCache LineCache wayTagOffsetMemory Address (32/39/46-bit)626/33/40line-IDIDReqIsolation-Domain ID (req-IDID)Cache requestSet 0Set 1Set 2Set 3========If !(zero)Query nisolatedways  (fully-associative)isolated way with extended tag bitsLegend=comparatorconventional (non-isolated) wayExtended Tagretaining backward compatibility. HYBCACHE only effec-
tively provides side-channel resilience for the cache utilization
of execution when processes are assigned different IDIDs that
are communicated with each cache request. Otherwise, from
a software perspective, HYBCACHE is identical to a conven-
tional cache architecture. If no isolation domains are assigned
to the different processes by the trusted kernel or trusted hard-
ware, HYBCACHE is designed to assign an all-zero IDID by
default to incoming cache requests and all execution is treated
as non-isolated (see Figure 1) with cache-based side-channel
resilience disabled. Only when kernel support is provided
(or trusted hardware or ﬁrmware in case of SGX) does HY-
BCACHE behave differently for different isolation domains
and provides its side-channel resilience capability.
Shared Memory Support. HYBCACHE supports, by de-
sign, that different isolation domains can share read-only
memory, usually in the form of shared code libraries, without
sharing the corresponding cache lines. This results in having
multiple copies of the shared memory kept in cache (multiple
cache entries), enforcing that cache entries are not shared be-
tween mutually distrusting code. Data coherence is also not a
problem, in this case, since this is read-only memory. We elab-
orate in Section 5 how this effectively mitigates access-based
side-channel attacks.
Conventional access to shared writable memory, on the
other hand, between different isolation domains is disallowed
by design in HYBCACHE, as this makes the victim pro-
cess vulnerable to access-based attacks and would under-
mine cache coherence. In order to provide input and output
functionality to isolated code, HYBCACHE provides special
I/O move instructions. These allow code in an I-Domain to
transfer data between a CPU register and a memory region
(assigned an all-zero IDID when cached) that is designated
exclusively for shared memory between processes belonging
to different I-Domains. These special instructions are meant
to be used to transfer data between domains only through this
designated memory. In practice, we expect them to be used
only in frameworks like the SGX SDK or a trusted kernel. If
code in an I-Domain incorrectly accesses this memory region
using regular instructions, or accesses its own memory using
these special instructions, this could be disallowed, i.e., de-
tected and blocked by the hardware or microcode, e.g., the
MMU. This prevents inserting duplicated writable cache en-
tries which can disrupt cache coherency, while ensuring that
HYBCACHE’s security guarantees still apply to any access
performed using regular instructions.
5 Security Analysis
In the following, we evaluate the effectiveness of HYBCACHE
with respect to the security requirements we outlined in Sec-
tion 4.1. We show that HYBCACHE achieves these security
guarantees by mitigating the following leakages:
S1 Malicious software running in an I-Domain or NI-Domain
cannot ﬂush or perform a cache hit on a cache line belong-
ing to a different I-Domain.
S2 Malicious software running in an I-Domain or NI-Domain
cannot pre-compute and construct an eviction set that
selectively evicts a non-trivial subset of the cache lines
belonging to a different I-Domain. Moreover, the set of
the attacker’s cache lines which can be evicted by the
victim’s lines does not depend on the addresses accessed
by the victim.
S3 Cache hits generated by software in an I-Domain cannot
be observed by software running in a different I-Domain
or NI-Domain. Cache misses generated by software in
an I-Domain can still be indirectly observed by mali-
cious software running in a different I-Domain or NI-
Domain, but the malicious software learns no information
(e.g., memory address) about the access besides whether
a cache miss has occurred.
5.1 S1: Absence of Direct Access to Cache
Lines
Access-based attacks, like Flush + Reload [29, 78], Flush +
Flush [26], Invalidate + Transfer [35], Flush + Prefetch [25],
and Evict + Reload [27], require the attacker to have direct
access to the victim’s cache lines, normally as a result of
shared memory between processes (e.g., shared libraries).
As an example, Flush + Reload works by ﬂushing shared
cache lines and monitoring which lines the victim accesses
and brings back into the cache. HYBCACHE mitigates this
class of attacks by preventing shared cache lines between the
attacker and victim, as we explain in the following.
Shared Read-Only Memory. Read-only memory is shared
between different processes in case of shared code libraries.
HYBCACHE provides support for shared read-only memory
(Section 4.5), while fundamentally disallowing that any cache
line is shared across different I-Domains. Execution within
one domain can only access cache lines brought into the cache
by the same domain. Separate (potentially duplicate) cache
lines are maintained for each domain; ﬂushing and reloading
cache lines only impacts those owned by the attacker’s do-
main and cannot inﬂuence any other I-Domain or leak any
information on its cache lines. Having duplicate cache lines
for read-only memory pages does not disturb cache coherency
because it is read-only.
Shared Writable Memory. Shared writable memory be-
tween mutually distrusting domains is disallowed by design
with HYBCACHE. Code in an I-Domain can only exchange
data with another isolation domain through the special I/O
USENIX Association
29th USENIX Security Symposium    459
move instructions, which transfer data between the CPU reg-
isters and memory in the NI-Domain that is designated for
shared communication (see Section 4.5). Incorrect usage of
those instructions or incorrect access to this designated mem-
ory region could be detected and blocked by the MMU to
prevent potential cache coherency disruption due to dupli-
cate writable cache entries. However, HYBCACHE still en-
forces that every cache line only belongs to one domain. Since
cache lines always belong to one speciﬁc I-Domain or the
NI-Domain, code in a domain cannot ﬂush or perform a cache
hit on a different domain’s cache lines (S1), and attacks that
rely on those capabilities are thus impossible.
5.2 S2: Impossibility of Pre-Computed Evic-
tion Set Construction
Without direct access to the victim’s cache lines, attackers
resort to contention-based attacks, like Prime + Probe [34, 38,
54, 61, 77], Prime + Abort [15], and Evict + Time [23, 61].
In these attacks, the attacker pre-computes and constructs an
eviction set which ensures eviction of a speciﬁc subset of the
victim’s cache lines, e.g., lines that belong to a speciﬁc set in
a set-associative cache. The attacker process ﬁrst accesses the
whole eviction set, thus ensuring the victim’s cache lines are
evicted. After a waiting interval, it then checks if its whole
eviction set is still in cache by timing its own memory ac-
cesses to this set, thus detecting if the victim accessed any of
the cache lines of interest. For a conventional set-associative
cache, this is possible because of a ﬁxed set-indexing, which
can be directly determined from the target address of interest.
HYBCACHE protects I-Domains from such attacks by dis-
abling the set-associativity of the reserved subcache entries
when they are used by isolated execution: when a memory ad-
dress is accessed by the isolated victim process, the cache line
will be stored in any entry chosen randomly from the whole
subcache and not from a speciﬁc set. The random replacement
policy for isolated execution ensures that any of the subcache
entries is chosen using a discrete uniform distribution, i.e.,
with an equal and independent probability every time, so the
attacker has no means of identifying deterministically and
reproducibly which cache set (or entry) will be used to cache
a particular memory access of the victim. In order to ensure
that a speciﬁc cache line of the victim is evicted, the attacker
can only evict all lines in the subcache, but s/he cannot se-
lectively evict a non-trivial subset of the victim’s cache lines.
Moreover, the set of the attacker’s cache lines which can be
evicted by the victim’s lines does not depend on the addresses
accessed by the victim (S2). As a consequence, attacks that
rely on these capabilities are no longer possible. This holds
whether the attacker process is running in an I-Domain or
NI-Domain, as long as the victim process is in an I-Domain
(Requirements R1 and R2).
5.3 S3: Observable Cache Events
Software running in an I-Domain can only hit on cache lines
belonging to the same I-Domain. These cache hits generate
no changes to the cache state, thus, they are unobservable by
an attacker in a different I-Domain or in the NI-Domain.
Cache misses generated by software in an I-Domain evict a
random cache line, which may belong to a different I-Domain
or the NI-Domain. Malicious attacker code can then periodi-
cally observe how many of its lines are evicted and infer the
number of cache misses the victim process is experiencing.
The attacker can further use this information to infer the size