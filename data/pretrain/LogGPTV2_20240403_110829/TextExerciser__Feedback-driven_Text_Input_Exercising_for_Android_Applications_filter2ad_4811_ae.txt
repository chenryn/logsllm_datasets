3.0±0.0
9.3±1.2
9.0±3.3
5.3±0.9
7.7±1.7
3.0±1.4
3.0±0.0
1.0±0.0
5.0±0.0
3.0±0.0
5.0±0.8
2.0±0.0
6.3±3.1
10.3±1.2
2.0±0.0
6.3±0.5
3.0±0.0
4.3±0.5
1.0±0.0
2.7±0.9
3.0±0.0
5.0±0.0
5.0±0.8
5.0±0.0
8.0±2.9
4.0±0.0
6.3±0.9
7.0±0.0
4.7±0.5
2.0±0.0
4.0±0.0
177.0±23.2
M.+R.
6.0±0.0
2.3±0.5
3.7±0.5
1.0±0.0
2.3±0.5
2.0±0.0
3.0±0.0
6.3±0.5
5.3±0.9
2.0±0.0
9.7±0.5
8.0±0.8
5.0±0.8
11.0±0.0
4.3±0.5
2.0±0.0
1.3±0.5
4.3±0.9
3.0±0.0
4.7±0.9
2.0±0.0
6.3±0.5
6.7±0.5
2.0±0.0
6.0±0.0
1.0±0.0
4.0±0.0
1.0±0.0
3.7±0.5
3.0±0.0
4.0±0.0
4.3±0.5
4.0±0.0
3.3±0.5
4.0±0.0
6.3±0.9
5.0±0.8
5.0±0.8
2.0±0.0
4.7±0.5
166.2±12.8
D.+P.
4.7±0.5
1.3±0.5
3.0±0.0
1.0±0.0
4.7±0.5
2.0±0.0
3.0±0.0
4.0±0.0
6.0±0.0
2.0±0.0
5.3±0.5
11.0±1.4
2.0±0.0
11.0±0.8
2.0±0.0
3.0±0.0
1.0±0.0
5.0±0.0
3.0±0.0
4.7±0.5
2.0±0.0
9.0±0.0
11.0±1.4
2.0±0.0
7.0±0.0
3.0±0.0
4.0±0.0
1.0±0.0
2.0±0.0
4.0±0.0
5.0±0.0
2.3±0.5
4.0±0.0
5.0±0.0
4.0±0.0
12.0±0.0
7.0±0.0
15.0±0.8
2.0±0.0
5.3±0.5
186.3±7.8
-
ID
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
Total
-
-
-
-
-
THE CATEGORY OF PRIVATE INFORMATION IN TAINTDROID, RECON AND
A KEYWORD-BASED TRAFFIC ANALYSIS IMPLEMENTED BY OURSELVES.
WE LIST ALL THE USED KEYWORDS IN THE LAST COLUMN.
Table VI
Category TaintDroid
ReCon
Keyword-based trafﬁc analysis
Device
Identiﬁer
Accelerometer
IMEI, IMSI
ICCID
Serial Number
MAC Address
Device ID
Advertiser ID
IOS IFA ID
User
Identiﬁer
Phone Number
Microphone
Camera
Browser History
Name
Gender
Birthday
E-mail
Relatioship Status
Contact
Information Contact Provider
Phone Number
Address Book
Location
GPS Location
Net-base Location
Last-known Location
Zip Code
Credentials Account Information Username
Password
MAC Address,
IMEI, IMSI, ICCID,
Device Serial Number
Birthday, Date Of Birth, Expire,
Expiration Year/Month/Day, Year,
Month, Day, Date, Birth, Username,
First Name, Last Name, User ID,
Nick Name, Skype Name,
Name, Nick, Email, Mailbox,
Email Address, Mail
Contact/Cell/Phone/Mobile/Full
number, Phone No, Mobile Phone,
Country Code, CC
Postal/Post Code, ZipCode,
ZipNumber, Location, Country,
City, Address, Area, Region
Id, Account Number, Partner Code,
Password, Passwd, PassCode
Verify, Veriﬁcation, Check Number,
Veriﬁcation/Verify Code,
Veriﬁcation Number, Otp, PinView,
Pin, Pinnum, Account Pin,
Pin Code, PinNumber, Pin Number,
Card Number, Account Name,
successfully generate such inputs and trigger the privacy leak.
Next, we compare the detection capability of these three
tools and start from TaintDroid and the other two. TaintDroid
detects the most number of privacy leaks, because TaintDroid,
comparing with ReCon and keyword-based search, can detect
encrypted private identiﬁers. On the contrary, ReCon and
keyword-based search detect more categories of private infor-
mation, especially user credentials, because it is hard to mark
the sources of these information in taint analysis. A detailed
breakdown of these detected privacy leak categories can be
found in Appendix C.
We then compare ReCon and keyword-based search. Recon
detects one more user identiﬁer than the keyword-based search
because some keywords, such as “user”, are very common
and cannot be used for detection—that is the limitation of
a keyword-based search. When using Stoat,
the keyword-
based search detects seven more privacy leaks due to special
encoding like “@” as “%40”. It is worth noting that the false
positive rate of ReCon is relatively high mainly due to the fact
that ReCon often mistakenly considers a large port number as
a zipcode during our manual inspection.
3) Case Study: In this part, we present a case study of the
apps with additional privacy leaks found by TaintDroid and
ReCon with the help of TextExerciser. Note that inter-
estingly, as a byproduct, TextExerciser also ﬁnds some
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1079
version of Saviry has a vulnerability that transfers an HTTP
post request in plaintext. Speciﬁcally, an active network
attacker can directly modify the request to alter user’s
proﬁle and a passive network attacker can also sniff the
cookie and send another request to tamper user’s proﬁle.
TextExerciser helps to discover this vulnerability by
correctly ﬁlling all the ﬁelds in the user proﬁle and then
triggering the request.
● Eskimi, a social app to ﬁnd and communicate with new
Eskimi
friends.
transfer private information, such as
birthday, gender, email, and city, as well as user credentials
all in plaintext. TextExerciser helps to discover more
private information transfers, such as birthday and email,
on certain pages.
b) Insecure Conﬁguration (i.e., Missing Certiﬁcate and
Hostname Check) of SSL Communication: We describe Black-
WhiteMeet, a dating app with more than 100,000 downloads
on Google Play, which enables users to ﬁnd new friends
and communicate with each other. BlackWhiteMeet conﬁgures
SSL communication incorrectly by missing certiﬁcate and
hostname check so that an adversary can mimic the authentic
server using a fake certiﬁcate.
c) Constraint Bugs for Checking Text Inputs: We de-
scribe two bugs of existing Android apps when checking text
constraints. This is a byproduct of TextExerciser when it
tries to generate text inputs—TextExerciser compares the
generated text inputs with a common knowledge of that ﬁeld,
e.g., a phone number and email address. If the generated input
violates the common constraints enforced by all other apps,
we will consider it as a bug. Now, we introduce two concrete
bug examples.
● Phone number validity checking bug in SuperShuttle, a
travel app on Google Play.
TextExerciser ﬁnds a
bug that can bypass the original constraints enforced for
phone numbers. More speciﬁcally, SuperShuttle requires
user to enter a valid phone number along with country
code, and the app server will check if the number and
the country code match with each other. Once the check
failed, SuperShuttle will notify the user to modify the
input. However, TextExerciser ﬁnds that if we enter
a much larger country code, for example “100000”, any
number entered as the phone number is considered as valid.
This bug can be potentially exploited to register a large
amount of fake or bot accounts with the app server.
● Sign-in bug in Flipboard, a news app on Google Play.
The app has a bug in its mobile sign-in page: Speciﬁcally,
if one signs up an account with the app server in its mobile
app, he or she cannot log into the app using the newly
registered account. One can only log into the app using an
account registered in the web browser or keeps logged in
using the newly registered account after sign-up in mobile
devices. We conﬁrm the bug via manually registering an
account and trying to log into the app.
Figure 7. The number of detected privacy leakage of three dynamic analysis,
i.e., TaintDroid, ReCon, and a keyword-based trafﬁc search.
ALL VULNERABILITIES AND BUGS DETECTED IN THE GOOGLE PLAY APPS
BY USING TE X TEX E R C I S E R AS EXERCISERS.
Table VII
App Name
#Downloads
Description
Previously-unknown Vulnerabilities:
BlackWhiteMeet
Coco
10times
100,000+
10,000,000+
100,000+
Yippi
Saviry
Eskimi
100,000+
100,000+
1,000,000+
Previously-unknown Bugs:
Doesn’t verify signature in https
Leak user credential in http
Leak user location and device info in
http
Change user password in http
Modify user proﬁle in http
Leak user credential and proﬁle in http
Flipboard
SuperShuttle
500,000,000+
500,000+
Unable to login after mobile sign-up
Bypass constraints for phone number
bugs, e.g., malformed text constraints, of existing Android
apps when generating text inputs. A list of these apps is shown
in Table VII—We have responsibly disclosed all these issues
to corresponding app developers.
a) Insecure Transfer of User Credential or Private Infor-
mation: We describe three apps that transfer user credentials
such as username and password in plaintext, i.e., via HTTP
protocol.
● Coco, a popular social app with more than 10,000,000
downloads on Google Play. The 7.6.8 version of Coco,
i.e., the latest at the paper’s submission, has a vulnera-
bility that transfers user credentials in plaintext without
any encryption. This vulnerability involving two con-
secutive HTTP requests is triggered with the help of
TextExerciser during the sign up and login pages of
Coco. It is worth noting that all other network communica-
tions in Coco except these two adopt HTTPS protocol. We
have reported the vulnerability to Coco’s developer and a
patched version is coming soon.
● Saviry, a shopping app with more than 100,000 down-
loads on Google Play and a 4.4 rating score. The latest
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1080
C. Tool Performance on Popular Android Apps
In this section, we answer RQ3 (is TextExerciser
efﬁcient for generating text input for popular Android apps?)
by evaluating TextExerciser from four perspectives:
our rules in interpreting the syntax trees of all the hints
from a larger dataset of randomly collected Android apps.
● Coverage of syntax rules. We evaluate the coverage of
● Code coverage of a larger number of Android apps. We
● Efﬁciency of input generation. We evaluate the number of
● Performance of learning model. We evaluate the perfor-
evaluate the capability of Monkey+TextExerciser and
DroidBot+TextExerciser in analyzing these randomly
collected Android apps and their corresponding code cov-
erage.
trials before TextExerciser can generate a valid input
for a given text ﬁeld.
mance of the learning model used by TextExerciser
with different parameters.
1) Dataset and Experiment Setup: In this part, we use a
dataset of 6,000 randomly-collected, popular Android apps
from Google Play. We conduct the experiment on 16 ofﬁcial
Android x86 emulators with 4 CPU cores, 2 GB RAM
and 2 GB SD card and the aforementioned four physical
phones (OnePlus 6T), all of which run Android 9.0. We
ﬁrst run an app on Android emulator together with Mon-
key+TextExerciser or DroidBot+TextExerciser and
if the execution fails, we will run the app in physical phones.
We restrict each execution to be within 30 minutes. Note
that for similar reasons stated in §V-B, we only evaluate
Monkey/DroidBot+TextExerciser in this section.
Monkey/DroidBot+TextExerciser in total
analyze
5,640, i.e., 94.0% of all the Android apps, which is the same