### Table VI: Categories of Private Information in TaintDroid, ReCon, and Keyword-Based Traffic Analysis

| **Category** | **TaintDroid** | **ReCon** | **Keyword-Based Traffic Analysis** |
|--------------|----------------|------------|------------------------------------|
| **Device Identifier** | IMEI, IMSI, ICCID, Serial Number, MAC Address, Device ID, Advertiser ID, iOS IFA ID | - | - |
| **User Identifier** | Phone Number, Microphone, Camera, Browser History, Name, Gender, Birthday, Email, Relationship Status | - | - |
| **Contact Information** | Contact Provider, Phone Number, Address Book | - | - |
| **Location** | GPS Location, Net-base Location, Last-known Location, Zip Code | - | - |
| **Credentials** | Account Information, Username, Password | - | - |
| **Keywords Used** | MAC Address, IMEI, IMSI, ICCID, Device Serial Number, Birthday, Date Of Birth, Expire, Expiration Year/Month/Day, Year, Month, Day, Date, Birth, Username, First Name, Last Name, User ID, Nick Name, Skype Name, Name, Nick, Email, Mailbox, Email Address, Mail, Contact/Cell/Phone/Mobile/Full number, Phone No, Mobile Phone, Country Code, CC, Postal/Post Code, ZipCode, ZipNumber, Location, Country, City, Address, Area, Region, Id, Account Number, Partner Code, Password, Passwd, PassCode, Verify, Verification, Check Number, Verification/Verify Code, Verification Number, Otp, PinView, Pin, Pinnum, Account Pin, Pin Code, PinNumber, Pin Number, Card Number, Account Name | - | - |

### Comparison of Detection Capabilities

1. **TaintDroid vs. ReCon and Keyword-Based Search:**
   - **TaintDroid** detects the highest number of privacy leaks, particularly because it can identify encrypted private identifiers.
   - **ReCon and Keyword-Based Search** detect more categories of private information, especially user credentials, which are challenging to trace in taint analysis.

2. **ReCon vs. Keyword-Based Search:**
   - **ReCon** identifies one additional user identifier compared to keyword-based search, as common keywords like "user" cannot be used for detection.
   - **Keyword-Based Search** detects seven more privacy leaks due to special encoding (e.g., "@" as "%40").
   - **False Positives:** ReCon has a higher false positive rate, often mistaking large port numbers for zip codes.

### Case Studies

1. **Saviry:**
   - **Vulnerability:** Transfers HTTP post requests in plaintext, allowing active network attackers to modify user profiles and passive attackers to sniff cookies.
   - **Discovery:** TextExerciser filled all fields in the user profile, triggering the request and revealing the vulnerability.

2. **Eskimi:**
   - **Privacy Leak:** Transfers private information (birthday, gender, email, city) and user credentials in plaintext.
   - **Discovery:** TextExerciser helped identify additional private information transfers on certain pages.

3. **BlackWhiteMeet:**
   - **Insecure Configuration:** Missing certificate and hostname checks in SSL communication, enabling adversaries to mimic the authentic server with a fake certificate.
   - **Downloads:** Over 100,000 on Google Play.

4. **SuperShuttle:**
   - **Bug:** Bypasses phone number validity checks by entering a large country code (e.g., "100000"), allowing any phone number to be considered valid.
   - **Exploitation:** Can be used to register a large number of fake or bot accounts.

5. **Flipboard:**
   - **Bug:** Users cannot log into the app using newly registered mobile accounts; only web-registered accounts or continuously logged-in mobile accounts work.
   - **Verification:** Confirmed through manual account registration and login attempts.

### Detected Vulnerabilities and Bugs in Google Play Apps

| **App Name** | **#Downloads** | **Description** | **Vulnerabilities/Bugs** |
|--------------|----------------|-----------------|--------------------------|
| **BlackWhiteMeet** | 100,000+ | Dating app | Insecure transfer of user credentials, location, and device info in HTTP |
| **Coco** | 10,000,000+ | Social app | Insecure transfer of user credentials in HTTP |
| **Saviry** | 100,000+ | Shopping app | Insecure transfer of user credentials and profile in HTTP |
| **Eskimi** | 1,000,000+ | Social app | Insecure transfer of user credentials and profile in HTTP |
| **Flipboard** | 500,000,000+ | News app | Unable to log in after mobile sign-up |
| **SuperShuttle** | 500,000+ | Travel app | Bypass constraints for phone number |

### Tool Performance on Popular Android Apps

#### Evaluation Metrics
1. **Coverage of Syntax Rules:**
   - Evaluate the coverage of our rules in interpreting the syntax trees of hints from a larger dataset of randomly collected Android apps.

2. **Code Coverage:**
   - Assess the code coverage of a larger number of Android apps using Monkey+TextExerciser and DroidBot+TextExerciser.

3. **Efficiency of Input Generation:**
   - Measure the number of trials before TextExerciser generates a valid input for a given text field.

4. **Performance of Learning Model:**
   - Evaluate the performance of the learning model used by TextExerciser with different parameters.

#### Dataset and Experiment Setup
- **Dataset:** 6,000 randomly-collected, popular Android apps from Google Play.
- **Environment:**
  - 16 official Android x86 emulators with 4 CPU cores, 2 GB RAM, and 2 GB SD card.
  - Four physical phones (OnePlus 6T) running Android 9.0.
- **Execution:**
  - Each app is run on an Android emulator with Monkey+TextExerciser or DroidBot+TextExerciser.
  - If execution fails, the app is run on a physical phone.
  - Execution time is restricted to 30 minutes.
- **Results:**
  - Monkey/DroidBot+TextExerciser analyzed 5,640 apps (94.0% of the total).

This structured format provides a clear and professional overview of the data and findings, making it easier to understand and reference.