returns a ciphertext ct
we show that for a level-(cid:96) encryption ct of m, the rescaling algorithm returns a ciphertext ct
at level
((cid:96) − 1) encrypting p−1
such that [(cid:104)ct
· m from the equation [(cid:104)ct
, sk(cid:105)]q(cid:96)−1 ≈ p−1
· [(cid:104)ct, sk(cid:105)]q(cid:96) .
q(cid:96)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:96)
(cid:96)
4.3 Distributed Decryption
In the classical deﬁnition of MKHE primitive, all the secrets of the parties involved are required to decrypt
a multi-key ciphertext. In practice, however, it is not reasonable to assume that there is a party holding
multiple secret keys. Instead, we can ‘imagine a protocol between several key owners to jointly decrypt
a ciphertext. The decryption algorithms of our schemes are (approximate) linear combinations of secrets
with known coeﬃcients, and there have been proposed some secure methods for this task. We introduce
one simple solution based on the noise ﬂooding technique, but any secure solution achieving the same
functionality can be used.
The distributed decryption consists of two algorithms: partial decryption and merge. In the ﬁrst
phase, each party i receives the i-th entry of a ciphertext and decrypts it with a noise. We set the noise
distribution φ which has a larger variance than the standard error distribution ψ of basic scheme. Then,
we merge partially decrypted results with c0 to recover the message.
• MKHE.PartDec(ci, si): Given a polynomial ci and a secret si, sample an error ei ← φ and return µi =
ci · si + ei (mod q).
• MK-BFV.Merge(c0,{µi}1≤i≤k): Compute µ = c0 +(cid:80)k
• MK-CKKS.Merge(c0,{µi}1≤i≤k): Compute and return µ = c0 +(cid:80)k
i=1 µi (mod q) and return m = (cid:98)(t/q) · µ(cid:101).
i=1 µi (mod q).
c0 +(cid:80)k
i=1 µi = (cid:104)ct, sk(cid:105)+(cid:80)k
by cancelling the scaling factor (q/t).
For a multi-key ciphertext ct = (c0, . . . , ck), both multi-key BFV and CKKS schemes compute µ =
i=1 ei ≈ (cid:104)ct, sk(cid:105) (mod q) in the merge phase. Then, BFV extracts the plaintext
5 Bootstrapping for two MKHE schemes
There have been several studies on the bootstrapping procedures of the standard (single-key) ring-based
HE schemes [25, 32, 12, 14, 9]. Previous work had diﬀerent goals and solutions depending on the under-
lying schemes but they are basically following the Gentry’s technique [24] – homomorphic evaluation of
the decryption circuit. In particular, the BFV and CKKS schemes have a very similar pipeline for boot-
strapping which consists of four steps: (1) Modulus Raise, (2) Coeﬀ to Slot, (3) Extraction and (4) Slot
to Coeﬀ. The second and last steps are speciﬁc linear transformations, which require rotation operations
on encrypted vectors.
In the rest of this section, we ﬁrst explain how to perform the rotation operation on multi-key cipher-
texts based on the evaluation of Galois automorphisms. Then, we revisit the bootstrapping procedures
for BFV and CKKS to generalize the existing solutions to our MKHE schemes.
5.1 Homomorphic Evaluation of Galois Automorphisms
The Galois group Gal(Q[X]/(X n + 1)) of a cyclotomic ﬁeld consists of the transformation X (cid:55)→ X j for
j ∈ Z∗
2n. We recall that BFV (resp. CKKS) uses the DFT on Rt (resp. R) to pack multiple plaintext
values into a single polynomial. As noted in [26], these automorphisms provide special functionalities on
packed ciphertext such as rotation of plaintext slots.
The evaluation of an automorphism can be done based on the key-switching technique. In some
more details, let τj : a(X) (cid:55)→ a(X j) be an element of the Galois group. Given an encryption ct =
(c0, c1, . . . , ck) ∈ Rk+1
of m, we denote by τj(ct) = (τj(c0), . . . , τj(ck)) the ciphertext obtained by taking
τj to the entries of ct. Then τj(ct) is a valid encryption of τj(m) corresponding the secret key τj(sk).
We then perform the key-switching procedure from τj(sk) back to sk, so as to generate a new ciphertext
encrypting the same message under the original secret key sk.
q
In the following, we present two algorithms for the evaluation of the Galois element. The ﬁrst algorithm
generates an evaluation key for the Galois automorphism τj. The second algorithm gathers the evaluation
keys of multiple parties and evaluates τj on a multi-key ciphertext using the multi-key-switching technique
proposed in [10].
• MKHE.GkGen(j; s): Generate a random vector h1 ← U (Rd
q ) and an error vector e(cid:48) ← ψd. For an RLWE
secret s ∈ R, compute h0 = −s · h1 + e(cid:48) + τj(s) · g (mod q). Return the Galois evaluation key as
gk = [h0|h1] ∈ Rd×2
• MKHE.EvalGal(ct;{gki}1≤i≤k): Let gki = [hi,0|hi,1] be the Galois evaluation key of the i-th party for 1 ≤
i ≤ k. Given a ciphertext ct = (c0, . . . , ck) ∈ Rk+1
0, . . . , c(cid:48)
k)
by
, compute and return the ciphertext ct
= (c(cid:48)
(cid:48)
q
.
q
k(cid:88)
(cid:104)g−1(τj(ci)), hi,0(cid:105)
c(cid:48)
0 = τj(c0) +
i = (cid:104)g−1(τj(ci)), hi,1(cid:105)
c(cid:48)
i=1
(mod q),
and
1 ≤ i ≤ k.
(mod q)
for
In the context of CKKS, all the computations are carried out over modulus q = q(cid:96) for level-(cid:96) ciphertext.
We now show the correctness of our algorithms.
Correctness. From the deﬁnition, the output ciphertext ct
holds
(cid:48)
= (c(cid:48)
0, . . . , c(cid:48)
k) ← MKHE.EvalGal(ct;{gki}1≤i≤k)
(cid:48)
(cid:104)ct
, sk(cid:105) = c(cid:48)
0 +
k(cid:88)
i=1
i · si
c(cid:48)
k(cid:88)
k(cid:88)
i=1
= τj(c0) +
(cid:104)g−1(τj(ci)), hi,0(cid:105) + (cid:104)g−1(τj(ci)), hi,1(cid:105) · si
(mod q)
(cid:104)g−1(τj(ci)), τj(si) · g(cid:105)
(mod q)
≈ τj(c0) +
= (cid:10)τj(ct), τj(sk)(cid:11) = τj
i=1
(cid:0)(cid:104)ct, sk(cid:105)(cid:1)
(mod q),
as desired. In other words, if the input ciphertext has the phase µ(X) = (cid:104)ct, sk(cid:105) (mod q), then the phase
of the output ciphertext is approximately equal to τj(µ(X)) = µ(X j).
Besides the rotation of plaintext slots, we can evaluate the Frobenius endomorphism X (cid:55)→ X t on
BFV ciphertexts using the same technique. In the case of CKKS, the map X (cid:55)→ X−1 corresponds to the
complex conjugation over plaintext slots.
Any linear transformation can be represented as a linear combination of shifted plaintext vectors.
We note that previous HE optimization techniques [25, 32, 9] ford linear transformations can be directly
applied to our MKHE schemes.
5.2 Bootstrapping for Multi-Key BFV
The authors of [12] described a bootstrapping procedure for the single-key BFV scheme, which follows the
paradigm of [32], done for BGV scheme. The bootstrapping procedure in [12] takes as input a ciphertext
with an arbitrary noise and outputs another ciphertext with a low noise encrypting the same plaintext.
Below we present a multi-key variant of [12].
q
(cid:48)
q(cid:48) ·(cid:16) q(cid:48)
1. The previous work [12] published an encryption of the secret key by itself to raise the modulus.
However, we observe that this step can be done by multiplying a constant without extra information.
Suppose that the input ciphertext ct encrypts a message m with a plaintext modulus t, i.e., (cid:104)ct, sk(cid:105) =
t m + e (mod q) for some error e. Then we perform a modulus-switching down to a divisor q(cid:48) of q,
, sk(cid:105) = q(cid:48)
resulting in (cid:104)ct
t m + e(cid:48) (mod q(cid:48)), then multiply the ciphertext with q/q(cid:48) and get a ciphertext
(cid:48)(cid:48)
(cid:48)(cid:48)
whose phase is (cid:104)ct
, sk(cid:105) = q
ct
(mod q). This is a trivial (noise free) encryption of
µ = q(cid:48)
t m + e(cid:48) with plaintext modulus q(cid:48) and ciphertext modulus q.
2. It computes a homomorphic linear transform which produces multiple ciphertexts holding the coeﬃ-
cients µi ∈ Zt of µ in their plaintext slots. We note that this step can be done using the additions,
scalar multiplications and multi-key rotations.
3. We homomorphically evaluate a polynomial, called lower digits removal [12], on the multi-key cipher-
texts obtained in previous step. It removes the noise e(cid:48) and leaves the coeﬃcients of m in plaintext
slots.
t m + e(cid:48)(cid:17)
4. The ﬁnal step is another linear transformation which inverts the second step and outputs an encryp-
tion of m.
As a consequence, the output ciphertext has the phase q
than the initial noise e.
t m + e(cid:48)(cid:48) (mod q) for an error which is smaller
5.3 Bootstrapping for Multi-Key CKKS
The authors of [14] presented a bootstrapping procedure for the single-key CKKS scheme and its perfor-
mance was improved in the follow-up research [9]. The bootstrapping procedure of CKKS aims to refresh
a low-level ciphertext and return an encryption of the (almost) same messages in a larger ciphertext
modulus. We describe its multi-key version as follows.
1. The ﬁrst step takes a lowest-level ciphertext ct as an input. Let µ = (cid:104)ct, sk(cid:105) (mod q0). Then (cid:104)ct, sk(cid:105) =
q0 · I + µ for a small I ∈ R, so ct can be considered as an encryption of t = q0 · I + µ in the largest
ciphertext modulus qL.
2. We apply a homomorphic linear transformation to compute one or two ciphertexts encrypting the
coeﬃcients of t(X) in their plaintext slots. This step requires multi-key rotation and conjugation
described in Section 5.1.
3. We evaluate a polynomial which approximates the reduction modular q0 function. It removes the I
part of t and leaves coeﬃcients of µ in the slots.
4. Finally, we apply the inverse linear transformation of the second step to pack all the coeﬃcients of µ
back into a ciphertext.
The output ciphertext ct
encrypts the same plaintext µ in a higher level than the input ciphertext
ct, i.e., (cid:104)ct
(cid:48)
, sk(cid:105) ≈ µ (mod q(cid:96)) for some 0 < (cid:96) < L.
(cid:48)
6 Implementation
We provide a proof-of-concept implementation to show the performance of our MKHE schemes. Our
source code is developed in C++ with Microsoft SEAL version 3.2.0 [46] which includes BFV and CKKS
implementations. We summarize our optimization techniques, recommended parameter sets, and some ex-
perimental results in this section. Finally, we apply the multi-key CKKS scheme to evaluate an encrypted
neural network model on encrypted data and report the experimental result to classify handwritten im-
ages on the MNIST dataset [40]. All experiments are performed on a ThinkPad P1 laptop: Intel Xeon
E-2176M @ 4.00 GHz single-threaded with 32 GB memory, compiled with GNU C++ 7.3.0 (-O2).
6.1 Optimization Techniques
Basic Optimizations. In the relinearization process, we ﬁrst compute the tensor product of two cipher-
texts which corresponds to the tensor squared secret sk ⊗ sk. It has duplicated entries at (i, j) and (j, i),
so we can reduce its dimension from (k + 1)2 down to 1
2 k(k + 1). Both the size of the relinearization key
i of sk⊗ sk
and complexity of the algorithm are almost halved. Furthermore, each of the diagonal entries s2
depends on a single party, so we can include a key-switching key for s2
i in the generation of an evaluation
key. It increases the size of evaluation keys but reduces the complexity and noise of relinearization.
q = (cid:81)L
i=0 pi which is a product of coprime integers. Based on the ring isomorphism Rq → (cid:81)L
RNS and NTT. Our schemes are designed on the ring structure Rq, so we need to optimize the basic
polynomial arithmetic. There is a well-known technique to use an RNS by taking a ciphertext modulus
i=0 Rpi,
a (cid:55)→ (a (mod pi))0≤i≤L, we achieve asymptotic/practical improvements in polynomial arithmetic over
Rq. In particular, it has been studied how to design full-RNS variants of BFV and CKKS [4, 30, 15],
which do not require any RNS conversions. In addition, each of base prime can be chosen properly so
that there exists a (2n)-th root of unity modulo pi. It allows us to exploit an eﬃcient Number Theoretic
Transformation (NTT) modulo pi. Our implementation adapts these techniques to improve the speed of
polynomial arithmetic.
performance of homomorphic arithmetic. Bajard et al. [4] observed that the formula a = (cid:80)
Gadget Decomposition. As mentioned before, the gadget decomposition has a major eﬀect on the
i gi · [a]pi
(mod q) where gi =
can be used to build an RNS-friendly decomposition
a (cid:55)→ ([a]pi)i with the gadget vector g = (gi)i. We adapt this decomposition method and take an advantage
of an RNS-based implementation by storing ciphertexts in the RNS form.
j(cid:54)=i pj)−1(cid:105)
(cid:104)
((cid:81)
·(cid:16)(cid:81)
j(cid:54)=i pj
(cid:17)
pi
In [4, 30], the authors further combined this method with the classical digit decomposition method to
provide a more ﬁne-grained control of the trade-oﬀ between complexity and noise growth. However, we
realize that this hybrid method increases the decomposition degree (and thereby space and computational
complexity) several times, and the special modulus technique described in Section 3.3.4 provides a much
better trade-oﬀ. Therefore, the digit decomposition is not used in our implementation.
Parameter
ID n (cid:100)log q(cid:101) (cid:100)log pi(cid:101) # p(cid:48)
is
213
4
I
214
II
8
III 215
16
49–60
53–60