8
6
4
2
)
s
d
n
o
c
e
s
(
D
P
B
0
0
20 40 60 80 100
# parallel blocks/second
0
20 30 40 50 60 70 80
bandwidth utilization (%)
8Mbps;
16Mbps;
20Mbps
Fig. 4: BDP under different per-node bandwidth conﬁgurations
(8-20Mbps). [left]: BPD vs. number of blocks propagated in
parallel per second. The BPD for a single block (non-parallel
case) is plotted as x-axis value of 0. [right]: BPD vs. fraction
of raw bandwidth utilized by parallel block propagation.
B. Efﬁcient Parallel Propagation of Blocks
At the network level, a key difference between OHIE and
other high-throughput protocols (e.g., Algorand [20]) is that
with its large number of parallel chains, OHIE propagates a
large number of small blocks in parallel. In contrast, protocols
such as Algorand usually propagate a single large block (e.g.,
of 1 MB).
Now for OHIE, the critical empirical question is whether
propagating many parallel blocks will have signiﬁcant negative
impact on BPD, as compared to propagating a single such
block. We use micro experiments to answer this critical ques-
tion. Figure 4(left) plots the BPD for 20 KB blocks (results for
block sizes ranging from 10-64KB are similar and not shown),
as a function of number of parallel block propagations. For
example, “40 parallel blocks/sec” means that we inject 40
new blocks (of size 20 KB each) into the network per second.
The ﬁgure shows that under 20Mbps raw bandwidth, even
60 parallel blocks per second will not cause any substantial
increase in BPD.
Figure 4(right) presents the same results from a different
perspective — it plots how BPD changes as the fraction of raw
bandwidth used by the parallel block propagation increases.
It shows that, consistently under all our bandwidth conﬁg-
urations, parallel block propagation can effectively utilize a
rather signiﬁcant fraction (about 50%) of the raw bandwidth,
without signiﬁcant negative impact on BPD. This simple yet
important ﬁnding lays the empirical foundation for parallel
chain designs. In particular, we can hope OHIE to eventually
achieve a throughput approaching a signiﬁcant fraction of
the raw network bandwidth, by using a sufﬁcient number of
parallel chains.
C. End-to-end Performance of OHIE
We ﬁnally use macro experiments to evaluate the end-
to-end performance of OHIE,
in terms of its throughput,
decentralization factor, and conﬁrmation latency. By default,
all our results will be from running 12, 000 nodes on 1000 EC2
instances, with different per-node bandwidth conﬁgurations (8-
20Mbps). We have also experimented with 50, 000 nodes on
99
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
t
s
n
x
t
10
5
0
9.68
7.76
5.84
3.84
8
20
available bandwidth (Mbps)
16
12
3,000
2,000
)
s
p
t
(
d
n
o
c
e
s
r
e
p
1,000
s
n
x
t
0
)
c
e
s
/
s
k
c
o
l
b
(
r
o
t
c
a
f
.
r
t
n
e
c
e
d
60
40
20
0
61.8
62
49.6
50
37
37
24.7
25
8
20
available bandwidth (Mbps)
12
16
600
400
200
)
c
e
s
(
y
c
n
e
t
a
l
n
o
i
t
a
m
r
ﬁ
n
o
c
0
0
556.3
468.5
390.2
324.3
299.9
250.1
250.3
200.3
150.5
188.6
100.2
59.4
10
20
T
30
(a) Transaction throughput in Mbps (left
y-axis) and transactions/second (right y-
axis).
exp. observed;
theoretically expected
partial-conﬁrm;
full-conﬁrm
(b) Decentralization factor.
(c) Conﬁrmation latency.
Fig. 5: OHIE’s throughput, decentralization factor, and conﬁrmation latency.
1000 EC2 instance, with 20Mbps per-node bandwidth. Those
results are within 1% of the results under the corresponding
experiment with 12, 000 node, and we do not report those
separately.
We always use 20 KB blocks, with block interval being
10 seconds on each chain, as determined in Section VI-A.
We choose k according to the available bandwidth, such that
k × block size/block interval ≈ 0.5 × available bandwidth.
Speciﬁcally, for 8Mbps, 12Mbps, 16Mbps, and 20Mbps per-
node available bandwidth, we use k = 250, 370, 500, and
620, respectively. Since these k values are not powers of 2,
we do not use the last log2 k bits of the block hash to decide
which chain a block belongs to. Instead, let x be the last 48
bits of the block hash, and we assign the block to chain i
where i = x mod k. Assuming the hash function is a random
oracle, doing so will assign each block to a uniformly random
chain, except some negligible probability.18 Finally, to be able
to run multiple nodes on each EC2 instance, we do not have
the nodes solve PoW puzzles. Instead, each node produces
(“mines”) a new block after some exponentially distributed
time that corresponds to the mining difﬁculty.
Throughput. Figure 5a shows that the throughput of OHIE
indeed scales up roughly linearly with the available bandwidth.
In fact,
the throughput of OHIE always reaches a rather
signiﬁcant fraction (about 50%) of the raw available network
bandwidth of the system. Under 20Mbps available bandwidth,
the throughput of OHIE is about 9.68Mbps, or about 2, 420
transactions per second (assuming 500-byte average transac-
tion size as in Bitcoin). As a quick comparison, OHIE achieves
about 550% of the throughput of AlgoRand [20] under similar
available bandwidth. Compared to Conﬂux under 20Mbps
available bandwidth [32], the throughput of OHIE is about
150% of the throughput of Conﬂux. This suggests that while
explicitly focusing on simplicity, OHIE still retains the high
throughput property of modern blockchain designs.
Decentralization factor. Another advantage of OHIE is its
decentralization factor, in terms of the number of distinct
18This is not exactly uniformly random since the range of x is not an exact
multiple of k. But the impact is negligible.
conﬁrmed blocks per second. Figure 5b shows that the decen-
tralization factor of OHIE increases linearly with the available
bandwidth. This is expected since the number of parallel
blocks (or chains) increases with the available bandwidth. In
particular, OHIE achieves a decentralization factor of about
61.8 under 20Mbps available bandwidth. This is at least about
20x higher than those reported in experiments on previous per-
missionless protocols, among which Omniledger [28] reported
the best decentralization factor of about 3.1 (i.e., 25 blocks in
8.1 seconds).
Conﬁrmation latency. Let T be the number of blocks that
we remove from the end of the chain in order to obtain
partially-conﬁrmed blocks in each individual chain in OHIE.
For example, Bitcoin and Ethereum use T = 6 and T = 10
to 15, respectively. For comparable security, our analysis in
Section V suggests using a T that is Θ(log k) larger. Given
that our k is no larger than 214, we use T = 20 to 30 in
OHIE. Note that T has impact only on conﬁrmation latency,
and has no impact on the throughput or decentralization factor
of OHIE.
Figure 5c plots the average time for a block to become
partially-conﬁrmed and fully-conﬁrmed on all nodes, under