18
38
drop points
9
19
39
to cover
5s
20s
50s
drop points
8
16
31
to cover
5s
20m
1h2m
We only consider drop points in the TCP LISTEN,
SYN_RECV, and ESTABLISHED states. Because we assume
the server doesn’t initiate a connection, we know that it will
not go into the SYN_SENT state. In other TCP states such
as TCP_CLOSE, the server will not accept any further data
packets. We also excluded some cases that are not practical
for insertion packets: 1) a packet dropped due to memory
allocation failures because it is rare to encounter memory
pressure on the server; 2) a packet dropped due to listen queue
overﬂow, which is not a common case; 3) a packet dropped
due to SELinux check failed; 4) a packet dropped due to Xfrm
check failed; 5) a packet dropped due to socket ﬁlter; 6) a
packet dropped due to route error or no route; 7) a few other
minor cases, e.g., unusual server conﬁgurations.
As a result, we eventually labeled 38 places in the source
code where a packet gets dropped without changing states.
Because S2E works on the binary level, we map the source
code lines to binary addresses, and they are mapped to 47
binary level drop points (as one source-level conditional state-
ment can be translated into multiple basic blocks in binary) as
summarized in Table I. To save space, we put the raw table in
an appendix.
Currently, we use two seed packets as inputs to the sym-
bolic execution: 1. a SYN packet with all 0s in its TCP option
ﬁelds; 2. a SYN packet with a TCP Timestamp option turned
on. In practice, with 1, we can cover most drop points and
accept points but can rarely cover the 2 drop points related
to the TCP Timestamp option. With 2 as another seed packet,
we are able to cover all drop points and accept points easily.
We believe that the complete coverage of all accept and drop
points is a good indication of our results.
We employ an HTTP request with bad keyword “ultrasurf”
in our experiment:
GET /AA...A#ultrasurf##
HTTP/1.1\r\nHost: local_test_host\r\n\r\n
“A” is used to pad the HTTP request so that the ﬁrst n
9
packets before the follow-up packet will not contain the bad
keyword (by deﬁnitions in §III-B the ﬁrst n packets may be
accepted by the DPI). It is the follow-up packet that will carry
the bad keyword “ultrasurf” and the remaining part of the
request.
B. Symbolic Execution Results
In our experiments, we send symbolic packets with 20,
40, and 60 bytes in total,
including the TCP header and
the payload. As discussed in §V-B, since we symbolize the
TCP data offset header ﬁeld, the length of the TCP header is
variable. For example, if we send a TCP packet of 60 bytes,
it always has a 20-byte TCP basic header, and the length of
the TCP option can vary between 0 and 40-byte. As a result,
the rest will be the TCP payload (from 0 to 40 bytes as well).
We choose not to symbolize the length of the entire packet or
the payload because more or fewer bytes in the payload does
not really affect how TCP accepts or drops a packet.
As shown in Table II, when we send 1 symbolic packet, we
can cover only 8/9/8 drop points with a TCP packet of 20/40/60
bytes. By comparing the drop points covered, we found that
the 40-byte case can cover one more drop point than the 20-
byte case, which checks the TCP MD5 option. The 60-byte
case covers one less drop point than the 40-byte case because
it misses a drop point when the TCP data offset is larger than
the actual TCP packet size. Because the TCP data offset is by
design no more than 60, if we pick the actual size of a TCP
packet to be 60, the condition can never be satisﬁed. Finally,
by sending 1 symbolic packet, we can only cover drop points
in TCP LISTEN state.
When we send 2 symbolic packets, we can cover 16/19/18
drop points with 20/40/60 bytes of TCP options and payload.
The increased coverage of drop points is because we can now
cover drop points in TCP SYN_RECV and part of them in
ESTABLISHED. In addition, the 40-byte case covers 3 more
drop points related to TCP options, i.e., MD5 and Timestamp.
The 60-byte case still covers one less drop point related to
TCP data offset.
When we send 3 symbolic packets, we can cover 31/39/38
drop points with 20/40/60 bytes of TCP options and payload.
The increased coverage of drop points are because of more
drop points in ESTABLISHED state covered, and also cases
like data overlapping. The 20-byte case covers much less since
it doesn’t send packets with a payload.
We take a further look at the 8 drop points not covered by
any of our experiments. 2 of them requires the TCP receive
window size becomes 0. That means the server’s receive buffer
has to be full. This is very hard to achieve in reality and we
don’t want to ﬂood the server. 1 drop point requires TCP Fast
Open to be enabled on the server. The other 5 drop points are
also infeasible due to various reasons. Overall, all 8 uncovered
drop points are either not of interest or cannot be reached in
reality. Furthermore, we found that 2 of the covered drop points
are reached when the TCP state is in CLOSE_WAIT, which
we ignore.
Because the 40-byte experiment can already cover all of the
drop points covered by the 20-byte and 60-byte experiments,
we use the dataset generated from the 40-byte experiment
TABLE III.
IMPORTANT ACCEPT POINTS IN LINUX KERNEL V4.9.3
Source ﬁle
tcp input.c
tcp minisocks.c
Line #
4461
4477
4533
4684
6408
773
TCP State
Non-LISTEN
Non-LISTEN
Non-LISTEN
Non-LISTEN
LISTEN
SYN RECV
Major Reason
OFO: Initial out of order segment
OFO: Coalesce
OFO: Insert segment into RB tree
In sequence. In window.
Enter SYN RECV
Enter ESTABLISHED
to probe the DPI. This dataset
includes 56,787 test cases
generated in around one hour which covers 37 drop points
in binary (after ﬁltering infeasible drop points).
to probe the DPI. The original dataset
Since the original dataset is too large, we cull out 10,000
test cases by sampling the dataset, and then use the sampled
dataset
is highly
imbalanced, ranging from 2 to 9,790 test cases for different
drop points. To make it more balanced, we undersample the
majorities while keeping the minorities intact. We order the
drop points by the number of their corresponding test cases,
and use the 50th percentile as a threshold. For the drop points
whose corresponding numbers of test cases are below the
threshold, we keep them intact; for the ones above the thresh-
old, we proportionally sample the test cases corresponding to
the overly represented drop points.
Finally, since we consider every path not reaching a drop
point as an accept path, the accept paths can be diverse and
overwhelming in number. To sample them, we explicitly label
some important accept points, as listed in Table III, which
indicates TCP state changes and data entering receive buffer.
During sampling, we group the test cases by the sets of labeled
accept/drop points they reached.
C. Evaluation against DPI
We evaluated our sampled test set of 10,000 candidate
insertion/evasion packets against 3 DPI systems, 2 open-source
NIDSes, Zeek (formerly known as Bro), Snort, and a nation-
wide censorship system, the Great Firewall of China (GFW).
We downloaded the latest version of Zeek (2.6) and Snort
(2.9.13) at the time of writing, and conducted the experiment
against the GFW on August 18, 2019.
Out of 10,000 test cases, we found 6,082 test cases can
evade Zeek, including 5,771 cases caused by insertion packets
and 311 cases caused by evasion packets; 652 test cases can
evade Snort, including 432 cases caused by insertion packets,
and 220 cases caused by evasion packets; 4,587 test cases
can evade the GFW, including 1,435 cases caused by insertion
packets and 3,152 cases caused by evasion packets. For GFW,
most of the successful test cases caused by evasion packets
are due to the “SEQ ≤ ISN” strategy listed in Table VI,
as a common condition shared by many test cases. For Zeek,
though it has a similar “SEQ < ISN” strategy, most of such
test cases are successful for different reasons, i.e., due to some
preceding packets turning into insertion packets (as Zeek has a
very loose check on incoming packets). For example, the third
packet has a SEQ number less than ISN, which is an evasion
packet, but the second packet is an insertion packet so the test
case works because of the insertion packet.
To reason about the successful test cases and abstract them
into high-level evasion strategies, we conducted postmortem
10
analysis and evasion strategies summarization. For Zeek and
Snort, even though we treat them as blackboxes when generat-
ing candidate insertion/evasion packets, they are actually both
open-sourced, which allows us to pinpoint the underlying cause
of evasion. In order to expedite this process, we replay the
successful cases and record the binary execution trace of the
DPI for each case. Then, we group the cases by the execution
trace of the data packet containing the sensitive keyword which
evaded the detection of the DPI (the trace therefore explains
why this occurred), For Snort, we additionally record the trace
caused by processing the server’s ACK packet as some checks
performed on Snort are delayed until the ACK packet is seen.
In the end, we still manually verify the cases within the same
group in case they actually belong to different reasons for
evasion.
For GFW, since it
is really a blackbox, we have to
make hypotheses about the success reasons from prior knowl-
edge [48] and then validate them. Speciﬁcally, we ﬁrst replay
the captured packet traces and verify if the result is stable; this
eliminates the noisy results caused by random events such as
packet loss or GFW overload. Then we slightly tweak the TCP
header ﬁelds of the insertion/evasion packet and then replay
the modiﬁed packet trace. If it cannot work, then it’s likely the
discrepancy is caused by that ﬁeld.
We summarize a few featured evasion strategy (not a
complete list) for each DPI in the next few sections. Overall,
we not only rediscovered already known strategies but also
found 14 novel strategies comparing with previous works using
manually crafted insertion/evasion packets.
D. Zeek (formerly known as Bro)
Zeek [34] is very liberal in accepting incoming packets.2 It
is therefore relatively easy to bypass using insertion packets.
We list some strategies in Table IV. In most cases, it only
looks at the TCP ﬂags of a packet but does not check SEQ
or ACK number for TCP control packets, e.g., SYN, RST,
FIN. This makes many strategies that were previously reported
feasible [37], [25], [48]. For example, whenever Zeek receives
a SYN packet in an existing connection, it simply tears down
the TCB and creates a new one. But Linux doesn’t accept
out-of-window SYN packets in SYN_RECV state or any SYN
packets in ESTABLISHED state. As a result, an attacker can
easily inject a SYN packet (as insertion packet) to tear down
the TCB and recreate a TCB with a different ISN that Zeek will
keep track of, thus allowing later packets to evade detection.
Another interesting strategy which we have not seen ap-
plied (only hypothesized in [37]) in any prior work: TCP RFC
793 allows data in SYN packet to be buffered and delivered
to the user only when the connection is fully established, but
Linux doesn’t buffer data in SYN packet unless in the TCP
Fastopen cases. In this case, Zeek correctly implements the
RFC and accepts data in SYN packets. However, this allows
an attacker to attach junk payload in a SYN packet as “cover”
for the actual data sent in later packets.
In addition, we also found a novel evasion strategy that was
not mentioned in any prior work: if we send a data packet with
SEQ number less than the client ISN but has partial data in
2Zeek does log weird packets to a weird.log for ofﬂine analysis.
server’s receive window, the data will be ignored by Zeek, but
Linux will accept the data in window (an evasion packet).
E. Snort
Snort implements OS-speciﬁc TCP state machines, includ-
ing Windows, Linux, and Mac OS; its TCP implementation
is the most rigorous among the three DPIs. However, from
our results, even its Linux version still has discrepancies from
the Linux kernel we analyzed. The strategies we found are
listed in Table V. In general, Snort checks the SEQ number
for control packets but doesn’t check ACK number. Also, it
doesn’t check TCP MD5 option and accepts in-window SYN,
FIN, and RST packets too liberally. Whenever it receives
an in-window SYN or RST packet, it will tear down the
TCB (matching the behavior of older versions of Linux); and
whenever it receives an in-window FIN packet, it will mark the
connection as CLOSED and discard data which SEQ number
larger than the end SEQ number of the FIN packet. On the
contrary, the latest Linux doesn’t accept any SYN packet in
ESTABLISHED state, and requires SEQ number of FIN or
RST packet to be equal to rcv_nxt. In addition, Snort also
accepts FIN or RST packet with out-of-window ACK number
or TCP MD5 option, which will be discarded by Linux. Most
of these strategies have also been mentioned in [37] (though
not all of them are tested in practice), and the usage of TCP
MD5 option was done in [48].
Now we discover two novel strategies unique to the Snort
implementation. The ﬁrst strategy is related to how Snort
implements TCP Timestamp option validation (it is the only
DPI we are aware of that attempts to perform timestamp
checks). Interestingly, we found its implementation to be
slightly different from Linux in 2 ways: 1) Snort doesn’t check
timestamp for RST packets in SYN_RECV state (as mandated
by RFC 7323) while Linux does. 2) In PAWS checking, if the
TSval in the current packet is older than that in the last packet,
it will reject
the current packet. However, due to slightly
different implementations of the check of Snort and Linux, the
acceptable TSval ranges are “off by two”. As a result, say if
the ﬁrst packet has a TSval of 0x80000000 and the second
packet has a TSval of 0 or 0xffffffff, then Linux will
accept the second packet, but Snort will reject it. The pseudo-
code of their implementations can be found in the appendix.
The second novel strategy is related to the urgent pointer
processing logic, which is notoriously ambiguous [36] and
often implemented incorrectly, even in major OSes such as
Linux [22]. Simply put, an urgent pointer is supposed to allow
TCP to specify some range of data in the payload to be marked
as urgent, which will be treated differently when a receiver sees
it (e.g., immediately pushed to the application layer using a
separate interface [22]). In Snort, it interprets the urgent pointer
as the offset to the last byte of the urgent data and simply
discards all of the bytes before this offset. In Linux though,
it consumes 1 byte of urgent data (right before the urgent
pointer offset) which is stored in a separate place, and leaves
the remaining payload intact. Our system initially discovered
an evasion packet with urgent ﬂag and urgent pointer set to
a random location in a packet (which happens to point to
an insigniﬁcant padding byte), and therefore preserving the
semantic and the keyword in the HTTP request. However,
11
TABLE IV.
SUCCESSFUL STRATEGIES ON ZEEK V2.6
Strategy
Linux
† SYN with data
Ignore data
† Multiple SYN
Discard and send ACK
† Pure FIN
Discard (may send ACK)
† Bad RST/FIN
Discard (may send ACK)
† Data overlapping