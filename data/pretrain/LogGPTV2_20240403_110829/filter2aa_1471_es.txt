0000001305  0000000081  ( 5) FirmwareTemporary    ( 516 Kb )
0000001386  000000001c  (20) MemoryData           ( 112 Kb )
...
0000001800  0000000b80  (19) RegistryData         ( 11 Mb 
512 Kb )
0000002380  00000009fe  ( 9) SystemCode           ( 9 Mb 
1016 Kb )
0000002d7e  0000000282  ( 2) Free                 ( 2 Mb 520 
Kb )
0000003000  0000000391  ( 9) SystemCode           ( 3 Mb 580 
Kb )
0000003391  0000000068  (11) BootDriver           ( 416 Kb )
00000033f9  0000000257  ( 2) Free                 ( 2 Mb 348 
Kb )
0000003650  00000008d2  ( 5) FirmwareTemporary    ( 8 Mb 840 
Kb )
000007ffc9  0000000026  (31) FirmwareData         ( 152 Kb )
000007ffef  0000000004  (32) FirmwareReserved     ( 16 Kb )
000007fff3  000000000c  ( 6) FirmwarePermanent    ( 48 Kb )
000007ffff  0000000001  ( 5) FirmwareTemporary    ( 4 Kb )
NumberOfDescriptors: 90
Summary
Memory Type         Pages
Free                000007a89c   (    501916)   ( 1 Gb 936 
Mb 624 Kb )
LoadedProgram       0000000370   (       880)   ( 3 Mb 448 
Kb )
FirmwareTemporary   0000001fd4   (      8148)   ( 31 Mb 848 
Kb )
FirmwarePermanent   000000030e   (       782)   ( 3 Mb 56 Kb 
)
OsloaderHeap        0000000275   (       629)   ( 2 Mb 468 
Kb )
SystemCode          0000001019   (      4121)   ( 16 Mb 100 
Kb )
BootDriver          000000115a   (      4442)   ( 17 Mb 360 
Kb )
RegistryData        0000000b88   (      2952)   ( 11 Mb 544 
Kb )
MemoryData          0000000098   (       152)   ( 608 Kb )
NlsData             0000000023   (        35)   ( 140 Kb )
HALCachedMemory     0000000005   (         5)   ( 20 Kb )
FirmwareCode        0000000008   (         8)   ( 32 Kb )
FirmwareData        0000000075   (       117)   ( 468 Kb )
FirmwareReserved    0000000044   (        68)   ( 272 Kb )
                    ==========    ==========
Total               000007FFDF   (    524255) = ( ~2047 Mb )
The Loader Parameter extension can show useful information
about the system hardware, CPU features, and boot type:
Click here to view code image
kd> dt poi(nt!KeLoaderBlock) nt!LOADER_PARAMETER_BLOCK 
Extension
   +0x0f0 Extension : 0xfffff800`2275cf90 
_LOADER_PARAMETER_EXTENSION
kd> dt 0xfffff800`2275cf90 _LOADER_PARAMETER_EXTENSION
nt!_LOADER_PARAMETER_EXTENSION
   +0x000 Size             : 0xc48
   +0x004 Profile          : _PROFILE_PARAMETER_BLOCK
   +0x018 EmInfFileImage   : 0xfffff800`25f2d000 Void
   ...
   +0x068 AcpiTable        : (null)
   +0x070 AcpiTableSize    : 0
  +0x074 LastBootSucceeded : 0y1
   +0x074 LastBootShutdown : 0y1
   +0x074 IoPortAccessSupported : 0y1
   +0x074 BootDebuggerActive : 0y0
   +0x074 StrongCodeGuarantees : 0y0
   +0x074 HardStrongCodeGuarantees : 0y0
   +0x074 SidSharingDisabled : 0y0
   +0x074 TpmInitialized   : 0y0
   +0x074 VsmConfigured    : 0y0
   +0x074 IumEnabled       : 0y0
   +0x074 IsSmbboot        : 0y0
   +0x074 BootLogEnabled   : 0y0
   +0x074 FeatureSettings  : 0y0000000 (0)
   +0x074 FeatureSimulations : 0y000000 (0)
   +0x074 MicrocodeSelfHosting : 0y0
   ...
   +0x900 BootFlags        : 0
   +0x900 DbgMenuOsSelection : 0y0
   +0x900 DbgHiberBoot     : 0y1
   +0x900 DbgSoftRestart   : 0y0
   +0x908 InternalBootFlags : 2
   +0x908 DbgUtcBootTime   : 0y0
   +0x908 DbgRtcBootTime   : 0y1
   +0x908 DbgNoLegacyServices : 0y0
Ntoskrnl then begins phase 0, the first of its two-phase initialization
process (phase 1 is the second). Most executive subsystems have an
initialization function that takes a parameter that identifies which phase is
executing.
During phase 0, interrupts are disabled. The purpose of this phase is to
build the rudimentary structures required to allow the services needed in
phase 1 to be invoked. Ntoskrnl’s startup function, KiSystemStartup, is called
in each system processor context (more details later in this chapter in the
“Kernel initialization phase 1” section). It initializes the processor boot
structures and sets up a Global Descriptor Table (GDT) and Interrupt
Descriptor Table (IDT). If called from the boot processor, the startup routine
initializes the Control Flow Guard (CFG) check functions and cooperates
with the memory manager to initialize KASLR. The KASLR initialization
should be done in the early stages of the system startup; in this way, the
kernel can assign random VA ranges for the various virtual memory regions
(such as the PFN database and system PTE regions; more details about
KASLR are available in the “Image randomization” section of Chapter 5,
Part 1). KiSystemStartup also initializes the kernel debugger, the XSAVE
processor area, and, where needed, KVA Shadow. It then calls
KiInitializeKernel. If KiInitializeKernel is running on the boot CPU, it
performs systemwide kernel initialization, such as initializing internal lists
and other data structures that all CPUs share. It builds and compacts the
System Service Descriptor table (SSDT) and calculates the random values for
the internal KiWaitAlways and KiWaitNever values, which are used for
kernel pointers encoding. It also checks whether virtualization has been
started; if it has, it maps the Hypercall page and starts the processor’s
enlightenments (more details about the hypervisor enlightenments are
available in Chapter 9).
KiInitializeKernel, if executed by compatible processors, has the important
role of initializing and enabling the Control Enforcement Technology (CET).
This hardware feature is relatively new, and basically implements a hardware
shadow stack, used to detect and prevent ROP attacks. The technology is
used for protecting both user-mode applications as well as kernel-mode
drivers (only when VSM is available). KiInitializeKernel initializes the Idle
process and thread and calls ExpInitializeExecutive. KiInitializeKernel and
ExpInitializeExecutive are normally executed on each system processor.
When executed by the boot processor, ExpInitializeExecutive relies on the
function responsible for orchestrating phase 0, InitBootProcessor, while
subsequent processors call only InitOtherProcessors.
 Note
Return-oriented programming (ROP) is an exploitation technique in
which an attacker gains control of the call stack of a program with the
goal of hijacking its control flow and executes carefully chosen machine
instruction sequences, called “gadgets,” that are already present in the
machine’s memory. Chained together, multiple gadgets allow an attacker
to perform arbitrary operations on a machine.
InitBootProcessor starts by validating the boot loader. If the boot loader
version used to launch Windows doesn’t correspond to the right Windows
kernel, the function crashes the system with a
LOADER_BLOCK_MISMATCH bugcheck code (0x100). Otherwise, it
initializes the pool look-aside pointers for the initial CPU and checks for and
honors the BCD burnmemory boot option, where it discards the amount of
physical memory the value specifies. It then performs enough initialization of
the NLS files that were loaded by Winload (described earlier) to allow
Unicode to ANSI and OEM translation to work. Next, it continues by
initializing Windows Hardware Error Architecture (WHEA) and calling the
HAL function HalInitSystem, which gives the HAL a chance to gain system
control before Windows performs significant further initialization.
HalInitSystem is responsible for initializing and starting various components
of the HAL, like ACPI tables, debugger descriptors, DMA, firmware, I/O
MMU, System Timers, CPU topology, performance counters, and the PCI
bus. One important duty of HalInitSystem is to prepare each CPU interrupt
controller to receive interrupts and to configure the interval clock timer
interrupt, which is used for CPU time accounting. (See the section
“Quantum” in Chapter 4, “Threads,” in Part 1 for more on CPU time
accounting.)
When HalInitSystem exits, InitBootProcessor proceeds by computing the
reciprocal for clock timer expiration. Reciprocals are used for optimizing
divisions on most modern processors. They can perform multiplications
faster, and because Windows must divide the current 64-bit time value in
order to find out which timers need to expire, this static calculation reduces
interrupt latency when the clock interval fires. InitBootProcessor uses a
helper routine, CmInitSystem0, to fetch registry values from the control
vector of the SYSTEM hive. This data structure contains more than 150
kernel-tuning options that are part of the
HKLM\SYSTEM\CurrentControlSet\Control registry key, including
information such as the licensing data and version information for the
installation. All the settings are preloaded and stored in global variables.
InitBootProcessor then continues by setting up the system root path and
searching into the kernel image to find the crash message strings it displays
on blue screens, caching their location to avoid looking them up during a
crash, which could be dangerous and unreliable. Next, InitBootProcessor
initializes the timer subsystem and the shared user data page.
InitBootProcessor is now ready to call the phase 0 initialization routines
for the executive, Driver Verifier, and the memory manager. These
components perform the following initialization tasks:
1. 
The executive initializes various internal locks, resources, lists, and
variables and validates that the product suite type in the registry is
valid, discouraging casual modification of the registry to “upgrade” to
an SKU of Windows that was not actually purchased. This is only one
of the many such checks in the kernel.
2. 
Driver Verifier, if enabled, initializes various settings and behaviors
based on the current state of the system (such as whether safe mode is
enabled) and verification options. It also picks which drivers to target
for tests that target randomly chosen drivers.
3. 
The memory manager constructs the page tables, PFN database, and
internal data structures that are necessary to provide basic memory
services. It also enforces the limit of the maximum supported amount
of physical memory and builds and reserves an area for the system
file cache. It then creates memory areas for the paged and nonpaged
pools (described in Chapter 5 in Part 1). Other executive subsystems,
the kernel, and device drivers use these two memory pools for
allocating their data structures. It finally creates the UltraSpace, a 16
TB region that provides support for fast and inexpensive page
mapping that doesn’t require TLB flushing.
Next, InitBootProcessor enables the hypervisor CPU dynamic partitioning
(if enabled and correctly licensed), and calls HalInitializeBios to set up the
old BIOS emulation code part of the HAL. This code is used to allow access
(or to emulate access) to 16-bit real mode interrupts and memory, which are
used mainly by Bootvid (this driver has been replaced by BGFX but still
exists for compatibility reasons).
At this point, InitBootProcessor enumerates the boot-start drivers that
were loaded by Winload and calls DbgLoadImageSymbols to inform the
kernel debugger (if attached) to load symbols for each of these drivers. If the
host debugger has configured the break on symbol load option, this will be
the earliest point for a kernel debugger to gain control of the system.
InitBootProcessor now calls HvlPhase1Initialize, which performs the
remaining HVL initialization that hasn’t been possible to complete in
previous phases. When the function returns, it calls HeadlessInit to initialize
the serial console if the machine was configured for Emergency Management
Services (EMS).
Next, InitBootProcessor builds the versioning information that will be
used later in the boot process, such as the build number, service pack version,
and beta version status. Then it copies the NLS tables that Winload
previously loaded into the paged pool, reinitializes them, and creates the
kernel stack trace database if the global flags specify creating one. (For more
information on the global flags, see Chapter 6, “I/O system,” in Part 1.)
Finally, InitBootProcessor calls the object manager, security reference
monitor, process manager, user-mode debugging framework, and Plug and
Play manager. These components perform the following initialization steps:
1. 
During the object manager initialization, the objects that are necessary
to construct the object manager namespace are defined so that other
subsystems can insert objects into it. The system process and the
global kernel handle tables are created so that resource tracking can
begin. The value used to encrypt the object header is calculated, and
the Directory and SymbolicLink object types are created.
2. 
The security reference monitor initializes security global variables
(like the system SIDs and Privilege LUIDs) and the in-memory
database, and it creates the token type object. It then creates and
prepares the first local system account token for assignment to the
initial process. (See Chapter 7 in Part 1 for a description of the local
system account.)
3. 
The process manager performs most of its initialization in phase 0,
defining the process, thread, job, and partition object types and setting
up lists to track active processes and threads. The systemwide process
mitigation options are initialized and merged with the options
specified in the HKLM\SYSTEM\CurrentControlSet\Control\Session
Manager\Kernel\MitigationOptions registry value. The process
manager then creates the executive system partition object, which is
called MemoryPartition0. The name is a little misleading because the
object is actually an executive partition object, a new Windows object
type that encapsulates a memory partition and a cache manager
partition (for supporting the new application containers).
4. 
The process manager also creates a process object for the initial
process and names it idle. As its last step, the process manager creates
the System protected process and a system thread to execute the
routine Phase1Initialization. This thread doesn’t start running right
away because interrupts are still disabled. The System process is
created as protected to get protection from user mode attacks, because
its virtual address space is used to map sensitive data used by the
system and by the Code Integrity driver. Furthermore, kernel handles
are maintained in the system process’s handle table.
5. 
The user-mode debugging framework creates the definition of the
debug object type that is used for attaching a debugger to a process
and receiving debugger events. For more information on user-mode
debugging, see Chapter 8, “System mechanisms.”
6. 
The Plug and Play manager’s phase 0 initialization then takes place,
which involves initializing an executive resource used to synchronize
access to bus resources.
When control returns to KiInitializeKernel, the last step is to allocate the
DPC stack for the current processor, raise the IRQL to dispatch level, and
enable the interrupts. Then control proceeds to the Idle loop, which causes
the system thread created in step 4 to begin executing phase 1. (Secondary
processors wait to begin their initialization until step 11 of phase 1, which is
described in the following list.)
Kernel initialization phase 1
As soon as the Idle thread has a chance to execute, phase 1 of kernel
initialization begins. Phase 1 consists of the following steps:
1. 
Phase1InitializationDiscard, as the name implies, discards the code
that is part of the INIT section of the kernel image in order to preserve
memory.
2. 
The initialization thread sets its priority to 31, the highest possible, to
prevent preemption.
3. 
The BCD option that specifies the maximum number of virtual
processors (hypervisorrootproc) is evaluated.
4. 
The NUMA/group topology relationships are created, in which the
system tries to come up with the most optimized mapping between
logical processors and processor groups, taking into account NUMA
localities and distances, unless overridden by the relevant BCD
settings.
5. 
HalInitSystem performs phase 1 of its initialization. It prepares the
system to accept interrupts from external peripherals.
6. 
The system clock interrupt is initialized, and the system clock tick
generation is enabled.
7. 
The old boot video driver (bootvid) is initialized. It’s used only for
printing debug messages and messages generated by native
applications launched by SMSS, such as the NT chkdsk.
8. 
The kernel builds various strings and version information, which are
displayed on the boot screen through Bootvid if the sos boot option
was enabled. This includes the full version information, number of
processors supported, and amount of memory supported.
9. 
The power manager’s initialization is called.
10. 
The system time is initialized (by calling HalQueryRealTimeClock)
and then stored as the time the system booted.
11. 
On a multiprocessor system, the remaining processors are initialized
by KeStartAllProcessors and HalAllProcessorsStarted. The number
of processors that will be initialized and supported depends on a
combination of the actual physical count, the licensing information
for the installed SKU of Windows, boot options such as numproc and
bootproc, and whether dynamic partitioning is enabled (server
systems only). After all the available processors have initialized, the
affinity of the system process is updated to include all processors.
12. 
The object manager initializes the global system silo, the per-
processor nonpaged lookaside lists and descriptors, and base auditing
(if enabled by the system control vector). It then creates the
namespace root directory (\), \KernelObjects directory, \ObjectTypes
directory, and the DOS device name mapping directory (\Global??),
with the Global and GLOBALROOT links created in it. The object
manager then creates the silo device map that will control the DOS
device name mapping and attach it to the system process. It creates
the old \DosDevices symbolic link (maintained for compatibility
reasons) that points to the Windows subsystem device name mapping
directory. The object manager finally inserts each registered object
type in the \ObjectTypes directory object.
13. 
The executive is called to create the executive object types, including
semaphore, mutex, event, timer, keyed event, push lock, and thread
pool worker.
14. 
The I/O manager is called to create the I/O manager object types,
including device, driver, controller, adapter, I/O completion, wait
completion, and file objects.
15. 
The kernel initializes the system watchdogs. There are two main types
of watchdog: the DPC watchdog, which checks that a DPC routine
will not execute more than a specified amount of time, and the CPU
Keep Alive watchdog, which verifies that each CPU is always
responsive. The watchdogs aren’t initialized if the system is executed
by a hypervisor.
16. 
The kernel initializes each CPU processor control block (KPRCB)
data structure, calculates the Numa cost array, and finally calculates
the System Tick and Quantum duration.
17. 
The kernel debugger library finalizes the initialization of debugging
settings and parameters, regardless of whether the debugger has not
been triggered prior to this point.
18. 
The transaction manager also creates its object types, such as the
enlistment, resource manager, and transaction manager types.
19. 
The user-mode debugging library (Dbgk) data structures are
initialized for the global system silo.
20. 
If driver verifier is enabled and, depending on verification options,