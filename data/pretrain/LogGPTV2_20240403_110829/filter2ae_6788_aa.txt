## 描述
根据[官方](https://github.com/SECCON/SECCON2018_online_CTF/tree/master/Pwn/q-escape)提供的信息，该挑战名为`q-escape`。开发团队创建了一个名为CYDF的新设备，并在Ubuntu 16.04的最新版本上进行了测试。参与者需要通过以下命令连接到指定服务器：
```
nc q-escape.pwn.seccon.jp 1337
```

下载文件后，目录结构如下：
```bash
$ ll
-rw-rw-r--  1 raycp raycp 1.7M Aug 21 08:03 initramfs.igz
drwxr-xr-x  6 raycp raycp 4.0K Oct 22  2018 pc-bios
-rwxr-xr-x  1 raycp raycp  28M Oct 22  2018 qemu-system-x86_64
-rwxr-xr-x  1 raycp raycp  256 Oct 22  2018 run.sh
-rw-------  1 raycp raycp 7.9M Oct 22  2018 vmlinuz-4.15.0-36-generic
```

`run.sh`脚本内容为：
```sh
#!/bin/sh
./qemu-system-x86_64 \
        -m 64 \
        -initrd ./initramfs.igz \
        -kernel ./vmlinuz-4.15.0-36-generic \
        -append "priority=low console=ttyS0" \
        -nographic \
        -L ./pc-bios \
        -vga std \
        -device cydf-vga \
        -monitor telnet:127.0.0.1:2222,server,nowait
```

从上述脚本中可以得知，设备名称是`cydf-vga`，并且在本地2222端口开启了QEMU monitor。

## 分析
首先运行`sudo ./run.sh`启动虚拟机。若环境为Ubuntu 18.04，则可能会遇到以下错误：
```
./qemu-system-x86_64: error while loading shared libraries: libcapstone.so.3: cannot open shared object file: No such file or directory
```

解决方法是安装缺失的库：
```bash
sudo apt-get install libcapstone3
```

接下来将`qemu-system-x86_64`加载至IDA进行分析，以查找与`cydf-vga`相关的函数。在`cydf_vga_class_init`函数中，发现其`device_id`为`0xB8`、`vendor_id`为`0x1013`以及`class_id`为`0x300`。通过字符串`Cydf CLGD 54xx VGA`进一步搜索，确认该设备是从`Cirrus CLGD 54xx VGA Emulator`修改而来。Cirrus设备的源代码位于[此处](https://github.com/qemu/qemu/blob/master/hw/display/cirrus_vga.c)。

在虚拟机内查看PCI设备列表，可以看到最后一个设备（`00:04.0 Class 0300: 1013:00b8`）即为我们的目标设备：
```bash
/ # lspci
00:00.0 Class 0600: 8086:1237
00:01.3 Class 0680: 8086:7113
00:03.0 Class 0200: 8086:100e
00:01.1 Class 0101: 8086:7010
00:02.0 Class 0300: 1234:1111
00:01.0 Class 0601: 8086:7000
00:04.0 Class 0300: 1013:00b8
```

由于当前版本的`lspci`不支持`-v`参数，因此我们通过读取`resource`文件来获取内存和端口空间的信息：
```bash
/ # cat /sys/devices/pci0000\:00/0000\:00\:04.0/resource
0x00000000fa000000 0x00000000fbffffff 0x0000000000042208
0x00000000febc1000 0x00000000febc1fff 0x0000000000040200
0x0000000000000000 0x0000000000000000 0x0000000000000000
0x0000000000000000 0x0000000000000000 0x0000000000000000
0x0000000000000000 0x0000000000000000 0x0000000000000000
0x0000000000000000 0x0000000000000000 0x0000000000000000
0x00000000febb0000 0x00000000febbffff 0x0000000000046200
```

另一种方式是通过`telnet 127.0.0.1 2222`连接到QEMU monitor并使用`info pci`命令获取地址空间信息：
```plaintext
Bus  0, device   4, function 0:
    VGA controller: PCI device 1013:00b8
      BAR0: 32 bit prefetchable memory at 0xfa000000 [0xfbffffff].
      BAR1: 32 bit memory at 0xfebc1000 [0xfebc1fff].
      BAR6: 32 bit memory at 0xffffffffffffffff [0x0000fffe].
      id ""
```

在`cydf_init_common`函数中发现了三个注册I/O区域的调用：
```c
memory_region_init_io(&s->cydf_vga_io, owner, &cydf_vga_io_ops, s, "cydf-io", 0x30uLL);
...
memory_region_init_io(&s->low_mem, owner, &cydf_vga_mem_ops, s, "cydf-low-memory", 0x20000uLL);
...
memory_region_init_io(&s->cydf_mmio_io, owner, &cydf_mmio_io_ops, s, "cydf-mmio", 0x1000uLL);
```

这表明注册了大小分别为`0x30`的PMIO、`0x20000`的MMIO以及`0x1000`的MMIO。然而，在实际设备中只看到了`BAR1`中`0x1000`大小的MMIO空间，其余两个区域去向不明。

参考`cirrus_vga.c`中的注释：
```c
/* Register ioport 0x3b0 - 0x3df */
...
/* memory access between 0xa0000-0xbffff */
```

结合`cat /proc/iomem`和`cat /proc/ioports`的输出结果：
```bash
/ # cat /proc/iomem
...
000a0000-000bffff : PCI Bus 0000:00
...
04000000-febfffff : PCI Bus 0000:00
...
  febc1000-febc1fff : 0000:00:04.0
/ # cat /proc/ioports
...
  03c0-03df : vga+
...
```

由此可知，另外两个`0x30`大小的PMIO空间及`0x20000`大小的MMIO空间实际上是VGA的地址空间。根据相关文档和前人的writeup，地址`000a0000-000bffff`确实是VGA的空间。

对比源码后，主要改动集中在`cydf_vga_mem_write`函数，并且在`CydfVGAState`结构体中添加了两个新字段：
```c
000133D8 vs              VulnState_0 16 dup(?)
000134D8 latch           dd 4 dup(?)
```

`VulnState`定义如下：
```c
00000000 VulnState_0     struc ; (sizeof=0x10, align=0x8, copyof_4201)
00000000                                         ; XREF: CydfVGAState/r
00000000                                         ; CydfVGAState_0/r
00000000 buf             dq ?                    ; offset
00000008 max_size        dd ?
0000000C cur_size        dd ?
00000010 VulnState_0     ends
```

进一步分析`cydf_vga_mem_write`函数的区别部分，以下是关键代码片段（可能存在漏洞的部分）：
```c
void __fastcall cydf_vga_mem_write(CydfVGAState *opaque, hwaddr addr, uint64_t mem_value, uint32_t size)
{
  ...
  if ( !(opaque->vga.sr[7] & 1) )
  {
    vga_mem_writeb(&opaque->vga, addr, mem_value);
    return;
  }
  if ( addr < opaque->vga.sr[0xCC];
    LOWORD(v6) = opaque->vga.sr[0xCC] / 5u;
    cmd = opaque->vga.sr[0xCC] - 5 * v6;
    if ( *(_WORD *)&opaque->vga.sr[0xCD] )      // cmd = sr[0xcc]%5
      LODWORD(mem_value) = (opaque->vga.sr[0xCD] << 8) | opaque->vga.sr[0xCE];
    ...
    else
    {
      if ( (unsigned __int8)cmd <= 2u )
      ...
    }
  }
}
```

此段代码揭示了潜在的安全漏洞所在。