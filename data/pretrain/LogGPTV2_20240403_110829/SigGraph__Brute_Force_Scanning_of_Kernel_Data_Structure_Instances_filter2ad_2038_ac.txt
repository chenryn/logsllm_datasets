2.6.20-15
2.6.24-26
2.6.31-1
#Total
structs
8850
11800
14992
15901
26799
Signature Statistics
#Pointer
structs
3597
4882
6096
6427
9957
#Unique
Sig.
3229
4305
5395
5645
8683
Percent
S
89.76%
88.18%
88.50%
87.83%
87.20%
2.31
2.45
2.54
2.47
2.73
Number of Signatures of Various Depths
1
1355
1820
2137
2172
3364
2
823
1057
1311
1316
1951
3
461
382
680
761
696
4
229
410
236
475
319
5
76
159
407
624
1492
6
194
337
501
248
494
7
85
121
106
37
344
8
4
9
9
7
19
9
1
3
1
1
1
10
11
12
13
0
5
5
0
0
1
1
1
3
1
-
1
1
1
1
-
-
-
-
1
Table 1. Experimental results of signature uniqueness test
the status of the system in the aspects of process, mem-
ory, network and ﬁle system; from these data structures, we
can reach most other kernel objects; and (3) They contain
pointer ﬁelds. Note that when scanning for instances of
these data structures, other data structures – as part of the
pointer patterns – are also traversed.
To ease our presentation, we assign an ID to each data
structure, which is shown in the 3rd column of Table 2. We
use F to represent the set of ﬁne-grained ﬁelds, and P to
represent the set of pointer ﬁelds. A ﬁne-grained ﬁeld is a
ﬁeld with a primitive type (not a composite data type such as
a struct or an array). Then, we present the corresponding
total number of ﬁelds |F | and pointers |P | in the 5th and 6th
columns, respectively.
7.2.1 Experiment Setup
We perform two sets of experiments. We ﬁrst use our pro-
ﬁler to automatically prune the undependable pointer/non-
pointer ﬁelds, generate reﬁned signatures, and then detect
the instances. After that we perform a comparison run with
value invariant-based signatures (Section 7.2.3) to further
conﬁrm the effectiveness of SigGraph.
Memory snapshot collection: The ﬁrst input of the effec-
tiveness test is the snapshots of physical memory, which are
acquired by instrumenting QEMU [3] to dump them on de-
mand. We set the size of the physical RAM to 256M.
Ground truth acquisition: The second input is the ground
truth data of the kernel objects under study. We leverage
and modify a kernel dump analysis tool, the RedHat crash
utility [2], to analyze our physical memory image and col-
lect the ground truth, through a data structure instance query
interface driven by our Python script. Note that to enable
crash’s dump analysis, the kernel needs to be rebuilt with
debugging information.
Proﬁling run: In all our proﬁling runs, the OS kernel is
executed under normal workload and monitored for hours,
with the goal of achieving good coverage of kernel data ac-
cess patterns. However, it is unlikely that the proﬁling runs
be able to capture the complete spectrum of patterns. As
our future work, we will leverage existing techniques for
software test generation to achieve better coverage.
7.2.2 Dynamic Reﬁnement
In this experiment, we carry out the dynamic reﬁnement
phase as described in Section 6. The depth and size of sig-
natures before and after pruning are presented in the “Sig-
Graph Signature” columns in Table 2, with D being the
depth and P |P | the number of pointer ﬁelds. Note that
the signature generation algorithm has to be run again on
the pruned data structure deﬁnitions to ensure uniqueness.
Observe that since pointer ﬁelds are pruned and hence the
graph topology gets changed, our algorithm has to perform
a few more expansions to redeem uniqueness, and hence the
depth of signatures increases after pruning for some data
structures, such as task struct.
7.2.3 Value Invariant-based Signatures
To compare SigGraph-based signatures with value
invariant-based signatures [38, 35, 13, 9], we also imple-
ment a basic value-invariant signature generation system.
More speciﬁcally, we generally derive four
types of
invariants for each ﬁeld including (1) zero-subset: a ﬁeld
is included if it is always zero across all instances during
training runs; (2) constant: a ﬁeld is always constant; (3)
bitwise-AND: the bitwise AND of all values of a ﬁeld is not
zero, that is, they have some non-zero common bits; and
(4) alignment: if all instances of a ﬁeld are well-aligned at
a power-of-two (other than 1) number.
To derive such value invariants for the data structures,
we perform two types of proﬁling: one is access frequency
proﬁling (to prune out the ﬁelds that are never accessed by
the kernel) and the other is to sample their values and pro-
duce the signatures. The access frequency proﬁling is done
by instrumenting QEMU to track memory reads and writes.
Sampling is similar to the sampling method in our dynamic
reﬁnement phase.
All the data structures under study turn out to have value
invariants. The statistics of these signatures are shown in
the last four column of Table 2. The total numbers of zero-
subset, constant, bitwise-AND, and alignment are denoted
as |Z|, |C|, |B|, and |A|, respectively.
7.2.4 Results
The ﬁnal results for each signature when brute force scan-
ning a test image is shown in Table 3. The 3rd column
shows the total number of true instances of the data struc-
ture, which is acquired by the modiﬁed crash utility [2].
Static Properties of the Data Structure
SigGraph Signature
Value Invariant Signature
Data Structure Name
ID
Size
|F |
|P |
Statically Derived
D
P |P |
Dynamically Reﬁned
D
P |P |
Category
Processes
task struct
thread info
key
mm struct
Memory
vm area struct
shmem inode info
kmem cache
files struct
fs struct
file
dentry
proc inode
ext3 inode info
vfsmount
inode security struct
sysfs dirent
socket alloc
socket
sock
bdev inode
mb cache entry
signal struct
user struct
File
System
Network
Others
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
1408
56
100
488
84
544
204
384
48
164
144
452
612
108
60
44
488
52
436
568
36
412
52
354
15
27
121
21
135
51
50
12
40
63
112
151
27
16
11
121
13
114
141
12
99
13
81
4
9
23
10
51
39
41
7
11
16
49
58
23
6
7
54
7
48
65
8
25
4
1
2
4
1
4
1
3
3
2
5
5
1
1
4
7
4
1
5
1
1
6
2
6
81
91
117
23
1444
51
295
3810
121
17034
27270
49
58
6690
277992
1134
54
45907
48
65
27848
395
586
2
2
4
2
4
2
3
3
2
5
5
3
2
4
7
4
2
5
2
2
6
2
6
233
45
69
26
60
147
36
13
68
3699
1444
455
166
1884
8426
61
142
2402
149
166
6429
90
394
|Z|
269
5
5
39
15
32
8
38
2
15
44
27
59
4
1
3
28
1
21
22
2
41
1
|C|
|B|
17
2
2
41
0
24
0
4
7
4
4
16
27
0
1