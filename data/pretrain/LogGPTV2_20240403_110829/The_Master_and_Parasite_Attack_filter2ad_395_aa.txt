# The Master and Parasite Attack

**Authors:** Lukas Baumann, Elias Heftrig, Haya Shulman, Michael Waidner  
**Affiliation:** Fraunhofer Institute for Secure Information Technology, Darmstadt, Germany

## Abstract
We introduce a new type of malicious script attack: the persistent parasite attack. These stealthy scripts persist in the browser's cache for extended periods. We demonstrate how to infect victims' caches with parasite scripts via TCP injection. Once the cache is infected, we present methods for propagating the parasites to other popular domains on the victim's client and to other caches on the network. We also show how to design the parasites to remain in the victim's cache long after their initial visit to the website. We develop covert communication channels between the attacker and the parasites, enabling the attacker to control script execution and exfiltrate private information such as cookies and passwords. We then demonstrate how to leverage these parasites to perform sophisticated attacks and evaluate these attacks against a range of applications and security mechanisms on popular browsers. Finally, we provide recommendations for countermeasures.

## 1. Introduction
Malware poses a significant threat to computer users, with advanced persistent threats (APTs) being particularly dangerous due to their ability to remain undetected on a victim's computer for extended periods. However, installing malware, especially APTs, can be challenging. Attackers must either trick the user into installing malicious software or exploit a vulnerability in the user's system or applications to install the malware without the user's knowledge.

In contrast, browsers automatically download and execute code from remote websites, but this code runs in a restricted sandbox, limiting its potential for harm. Remotely-downloaded JavaScript code typically executes only while the browser visits the relevant website and remains in the cache until it is evicted or a new version is served. Therefore, any malicious activity, such as crypto-currency mining, can only affect the user during their visit to the website or until the script is evicted from the cache.

However, in this work, we show that remotely-downloaded JavaScript can be made persistent and pose a serious threat. Specifically, we demonstrate that attackers can inject and spread malicious scripts, which we call parasites, that persist in the victim's browser and actively propagate to other domains. We then show how these parasites can be used to perform various attacks, such as stealing credentials and bypassing two-factor authentication. We evaluate the effectiveness of these attacks on popular browsers.

Typically, such attacks should be prevented by the Same Origin Policy (SOP), which restricts scripts from accessing data from other domains. To bypass SOP, the attacker camouflages the malicious script to appear as if it originated from a legitimate domain. We develop methodologies to keep the parasite in the victim's browser over long periods and control it to launch attacks against different applications, even after the client moves to a different network. The parasite uses modules for Command and Control (C&C) and propagation. We demonstrate implemented attacks and provide results from our experimental evaluation.

### 1.1. Attack Overview
The attack consists of four main modules:
1. **Cache Eviction:** Removing cached objects of popular target domains.
2. **Injection into Transport Layer:** Injecting a spoofed TCP segment with the infected object.
3. **Parasite Construction:** Designing the parasite to persist and propagate.
4. **Application of Parasites:** Launching sophisticated attacks using the parasites.

### 1.2. Contributions
Our goal is to explore the feasibility and impact of remotely controlled parasite scripts. Our contributions are summarized as follows:
- **Identification of Persistent Objects:** We measure the persistence and prevalence of objects on popular websites, finding that more than 87% of websites have at least one object that persists for five days.
- **Methodologies for Persistence:** We develop techniques to keep parasite scripts in the cache even after the victim stops visiting the website and changes networks.
- **Bypassing SOP:** We devise methods to bypass the Same Origin Policy, allowing parasites to propagate between different domains and caches.
- **Command and Control Channels:** We develop and evaluate C&C channels for communication between the attacker and the parasites.
- **Taxonomy of Caches and Applications:** We create a taxonomy of popular caches and applications that can be attacked using our parasite botnet, ranging from financial systems to hardware components like cameras and microphones.

## 2. Related Work
### 2.1. Malicious JavaScript Attacks
Despite policies like the Same Origin Policy (SOP), Cross-Origin Resource Sharing (CORS), and Content Security Policy (CSP), malicious scripts can still cause harm through side channels, memory access, and cryptojacking. Previous JavaScript attacks exploited bugs in browser implementations of SOP. In contrast, our attacks do not rely on bugs but combine transport layer attacks with cache infection to bypass SOP restrictions, making them more difficult to block.

### 2.2. Browser Cache Poisoning
Previous research has shown that browser cache poisoning is a significant problem, with malicious code injected into cached objects. Our work extends this by creating a persistent network of malicious files that can infect multiple domains without the user browsing them.

## 3. Attacker Model
Our attacker, referred to as the "master," injects malicious scripts (parasites) into the browser caches of victim clients. The master controls the parasites and uses them to launch sophisticated attacks. The master can eavesdrop on the packets exchanged by the victim but cannot block or modify them. This attacker can be another client on a public wireless network. The master sees the TCP source port and sequence number in the segments sent by the client, allowing it to craft correct response segments impersonating the server.

### 3.1. Parasites
Parasites are scripts from legitimate websites modified by the attacker to include malicious behavior. They are injected into the communication between the client and the website and cached by the victim's browser. We show how to construct parasites to persist in the browser over long periods, even when the victim changes networks. The parasites propagate and infect multiple domains in the victim's browser cache, communicate with each other and the master, and execute commands and attacks on behalf of the master.

## 4. Eviction from Browserâ€™s Cache
To infect an object from a website with a malicious script, the attacker must cause the client to issue an HTTP request for that object. Typically, objects from popular websites are cached, so repeated visits do not generate new requests. To force the browser to retrieve the newest copy of the object, we developed a cache eviction module that removes all objects from the browser's cache. This process is illustrated in Figure 1.

### 4.1. Evaluation
We evaluated cache eviction against popular browsers, including Chrome, Edge, Internet Explorer, Firefox, and Opera. Browsers differ in cache types, sizes, and eviction methodologies. We also investigated whether they allocate memory per domain. The results are shown in Table IV.

## 5. Conclusion
In this work, we introduce the persistent parasite attack, a new type of malicious script attack. We demonstrate how to inject and spread these parasites, keep them persistent, and use them to launch sophisticated attacks. We also provide recommendations for countermeasures to mitigate these threats.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.