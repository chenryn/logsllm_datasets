100% to 75% relative clock cycle) has only a minor impact 
on  the  error  behavior.  Running  the  system  in  twice  the 
original  frequency  (50%  clock  cycle time) causes the FIT 
8
c
y
c
n
o
i
t
u
c
e
x
e
n
i
n
o
i
t
c
u
d
e
R
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
12
10
]
%
[
s
e
l
c
y
c
n
o
i
t
u
c
e
x
e
n
i
n
o
i
t
c
u
d
e
R
8
6
4
2
0
ECC
RB
RE
RP
7
6
5
Register file access latency
4
3
2
1
Figure 14. Reduction in average execution cycles for applications 
when varying the register file access latency between 8 and 1.
register  access 
The second set of experiments is conducted for finding the 
optimal  operation  frequency  given  that  the  number  of 
register  file  access  pipeline  stages  varies  with 
the 
frequency. As we reduce the access latency, the number of 
stages  in  the  critical  loops  decreases.  This  increases  the 
performance  of 
the  processor.  However,  since  we 
introduce  additional  replays  due  to  register  read/write 
errors,  there  can  be  an  increase  in  the  execution  cycles 
additionally.  We  performed  simulations  for  the  base 
architecture,  a  base  architecture  with  4-cycle  register  file 
access,  and  a  base  architecture  with  8-cycle  register  file 
access2. Reducing the latency to 1 cycle from 2 results in 
7.4%, 6.5%, 6.8%, and 7.5% reduction in execution cycles 
for the ECC, RB, RE, and RP schemes. The results for the 
processor  with  4-cycle 
latency  are 
summarized  in  Figure  13.  Although  processors  such  as 
Pentium  4  dedicate  2  pipeline  stages  for  the  register  file 
access, this is likely to increase in the near future with the 
increase in the register file size and the overall number of 
pipeline stages. Figure 133 presents the average reduction 
in  the  execution  cycles  for  20  SPEC  applications  as  we 
change  the  cycle  time  of  the  register  file.  We  see  that 
reducing the latency to 50% (i.e. to 2 cycles) has a positive 
effect  for  all  recovery  schemes.  Reducing  beyond  this 
point,  on  the  other  hand,  reduces  the  advantages  seen  by 
RB  and  RE  schemes,  where  the  number  of  rollbacks 
increases  due  to  errors  that  cannot  be  recovered.  RP  and 
ECC,  on  the  other  hand,  can  recover  from  most  errors. 
Therefore,  they  give  their  best  performance  for  an  access 
latency of 1. Specifically, ECC and RP reduce the number 
of  execution  cycles  by  8.7%  and  8.9%,  respectively.  The 
results for a processor with 8-cycle register access latency 
are  presented  in  Figure  14.  Similarly,  as  we  reduce  the 
latency,  we  generally  see  an  increase  in  performance. 
However, when the access latency is set to 1, all techniques 
significantly increase the execution cycles: ECC, RB, RE, 
2 Note that 2 pipeline stages are dedicated to register file access in 
Pentium  4.  If  the  total  number  of  pipeline  stages  is  increased, 
the number of stages dedicated to register file accesses is likely 
to increase as well.
and RP increase the execution cycles by 26, 77, 69, and 24 
times respectively. 
There are two reasons for this. First, even if all the errors 
can  be  recovered,  the  processor  spends  most  of  its  time 
replaying  instructions  due  to  register  read  errors.  In 
addition, many times the errors cannot be recovered. Hence 
the rollbacks constitute a significant overhead. In fact, this 
is  the  only  configuration  in  our  simulations  where  the 
probability  of  a  rollback  is  larger  than  a base architecture 
with  full  voltage  swing.  Overall,  the  RP  gives  the  best 
result by reducing the execution cycles by 11.5% when the 
register file access latency is reduced to 2 cycles. 
6.  RELATED WORK
Fault  tolerant  computing  has  been  studied  in  detail  in  the 
context  of  high  radiation  environments  and  outer  space 
[17,  26].  Techniques  exist  to  study  potential  errors  in  the 
pre-silicon  [2]  stage  and  subsequent  to  the  fabrication 
process  [14].  More  recently,  designing  computer  systems 
for resiliency [12, 18, 19, 21, 27, 28] to transient faults has 
gained  greater  significance  due  the  combined  effect  of 
higher  integration  densities,  lower  voltages,  and  faster 
clock  frequencies.  In  comparison  to  our  study,  these 
techniques  aim  to  increase  the  reliability  of  the  processor 
with minimal impact on performance. Nakka [13] proposed 
RSE  framework  which  provided  reliability  and  security 
support.  Bower  [3]  introduced  SRAS  which  masked  hard 
faults  in  microprocessor  array  structures.  Both  of  these 
approaches  have  hardware  and  performance  overheads. 
Our  work,  on  the  other  hand,  aims  to  increase  the 
performance without affecting the overall reliability.  
There  is  a  recent  trend  in  computer  architecture  to design 
processors  that  can  adapt  to  circuit-level  phenomena. 
Examples  of  this  trend  include  Razor  [4],  thermal  control 
schemes [24], and techniques for reducing inductive noise 
[16] and voltage variation [9]. Among these studies, Razor 
[5] is the closest work to ours. In Razor, the performance 
of  the  processor  is  reduced  to  achieve  lower  energy 
consumption  by  reducing  the  supply  voltage  in  each 
pipeline  stage.  There  are  two  major  differences  between 
Razor  and  our  study:  our  goal  is  to  improve  the 
the  energy-
performance,  whereas  Razor 
efficiency  while  having  a  negative 
the 
performance. Second, the particular technique we apply on 
the architecture is different. In short, to our best knowledge 
there  is  no  work  that  studies  the  effects  of  operation 
frequency  on  reliability  and  trades  off  reliability  for 
increasing performance, which is the focus of our paper.    
impact  on 
improves 
7.  CONCLUSIONS
In this paper, we have presented a method for reducing the 
cycle 
in  high-performance 
microprocessors.  We  have  first  established  a  model  for 
estimating the probability of a bit error when the cycle time 
of a register is reduced. When the cycle time is reduced, a 
time  of 
register 
files 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
9
circuit node will experience reduced voltage swing, hence 
the probability of an error due to noise and other external 
factors 
increase.  Then,  we  have  presented  novel 
architectural  techniques  to  increase  the  robustness  of  the 
register  file.  Our  goal  is  to  allow  the  circuit  designer  to 
push  the  frequency  higher  (hence  increase  the  probability 
of  an  error)  and  recover  from  these  errors  with  the 
architectural  techniques  developed.  We  first  showed  a 
novel  system  for  error  detection  and  correction  (EDC), 
which pushes the EDC logic out of the critical path of the 
processor.  Then,  we  showed  that  a  large  fraction  of 
physical registers are not utilized during certain periods of 
execution in superscalar processors. The redundancy-based 
schemes  use  these  underutilized  registers  to  copy  the 
values  of  active  registers.  We  discussed  an  Error-
Correction  Code  (ECC)  based  on  Hamming  codes  and  a 
replication-based scheme, which uses a replica register file 
to  store  the  copies  of  the  active  register  values  and  uses 
those  copies  in  case  of  errors  to  restore  the  state.  Finally, 
we have presented experimental results showing that using 
the  proposed  techniques  the  frequency  of  the  register  file 
can be reduced by as much as 80% while having a 0.12% 
penalty  in  number  of  execution  cycles.  In  addition,  the 
number  of  pipeline  stages  in  a  processor  with  4-cycle 
register  file  access  can  be  reduced  by  75%,  resulting  in  a 
reduction of 8.9% in total execution cycles.
REFERENCES
[1].  Borch,  E.,  et  al.  Loose  Loops  Sink  Chips.  in  International
Conference  on  High  Performance  Computer  Architecture 
(HPCA-02). Feb. 2002. Boston, MA. 
[2].  Bose,  P.  Ensuring  dependable  processor  performance:  an 
experience  report  on  pre-silicon  performance  validation.  in  Intl
Conference on Dependable Systems and Networks,  July 2000. 
[3]. Bower Fred., et al. Tolerating Hard Faults in Microprocessor 
Array  Structures.  in  International  Conference  on  Dependable 
Systems and Networks (DSN). June, 2004. Florance, Italy. 
[4]. Burger, D. and T. Austin, The SimpleScalar Tool Set, Version 
2.0. 1997, Univ. of Wisconsin-Madison, Comp. Sci. Dept. 
[5].  Ernst,  D.,  et  al.  Razor:  A  Low-Power  Pipeline  Based  on 
Circuit-Level Timing Speculation. in International Symposium on 
Microarchitecture. Dec. 2003. 
[6]. Hamming, R.W., Error detecting and correcting codes. Bell 
Sys. Tech. Journal, 1950. 29: p. 147-160. 
[7]. Hartstein, A. and T.R. Puzak. Optimum Pipeline Depth for a 
Microprocessor. 
in  International  Symposium  on  Computer 
Architecture. May 2002. Anchorage / AK. 
[8].  Hinton,  G.,  et  al.,  The  microarchitecture  of  the  Pentium  4 
processor. 2001. 
[9]. Joseph, R., D. Brooks, and M. Martonosi. Control Techniques 
to  Eliminate  Voltage  Emergencies 
in  High  Performance 
Processors.  in  International  Symposium  on  High  Performance 
Computer Architecture. Feb. 2003. 
[10]. Kessler, R., The Alpha 21264 Microprocessor. IEEE Micro, 
Mar/Apr 1999. 19(2).
[11].  Mallik,  A.  and  G.  Memik.  A  Case  for  Clumsy  Packet 
Processors.  in  International  Symposium  on  Microarchitecture.
Dec. 2004. Portland, OR. 
for  Transient-Fault  Detection  and  Recovery. 
[12].  Mukherjee,  S.S.,  M.  Kontz,  and  S.K.  Reinhardt.  Detailed
Design and Evaluation of Redundant Multithreading Alternatives.
in International  Symposium  on  Computer  Architecture  (ISCA).
May 2002. 
[13]. Nakka N., et al. An Architectural Framework for Providing 
Reliability  and  Security  Support.  in  International  Conf.  on 
Dependable  Systems  and  Networks  (DSN).  June  2004.  Florence, 
Italy. 
[14].  Paschalis,  A.,  et  al.  Deterministic  Software-Based  Self-
Testing of Embedded Processor Core. in Design Automation and 
Test in Europe (DATE). March 2001. 
[15]. Phelan, R., Addressing Soft Errors in ARM Core-based SoC.
Dec. 2003, ARM Ltd. 
[16].  Powell,  M.  and  T.N.  Vijaykumar.  Exploiting  resonant 
behavior to reduce inductive noise. in 31st Annual International 
Symposium  on  Computer  Architecture  (ISCA).  June  2004. 
Munich, Germany. 
[17].  Prager,  K.,  et  al.  A  fault  tolerant  signal  processing 
computer.  in  International  Conference  on  Dependable  Systems 
and Networks (DSN). June 2000. 
[18].  Ray,  J.,  J.  Hoe,  and  B.  Falsafi.  Dual  Use  of  Superscalar 
in 
Datapath 
International  Symposium  on  Microarchitecture  (MICRO).  Dec. 
2001.
[19].  Reinhardt,  S.K.  and  S.S.  Mukherjee.  Transient  Fault 
Detection  via  Simultaneous  Multithreading.  in  International
Symposium on Computer Architecture (ISCA). June 2000. 
[20].  Reinhardt,  S.K.  and  S.S.  Mukherjee.  Transient  Fault 
Detection  via  Simultaneous  Multithreading.  in  27th  Annual 
International Symposium on Computer Architecture. June 2000. 
[21]. Sato, T. and I. Arita. Tolerating Transient Faults through an 
Instruction  Reissue  Mechanism.  in  International  Conference  on 
Parallel and Distributed Computing Systems (PDCS). Aug. 2001. 
[22].  Sherwood,  T.,  E.  Perelman,  and  B.  Calder.  Basic  Block 
Distribution  Analysis  to  Find  Periodic  Behavior  and  Simulation 
Points  in  Applications.  in  International  Conference  on  Parallel 
Architectures  and  Compilation  Techniques  (PACT  2001).  Sep. 
2001. Barcelona, Spain. 
[23].  Shivakumar,  P.,  et  al.  Modeling  the  Effect  of  Technology 
Trends  on  the  Soft  Error  Rate  of  Combinational  Logic.  in 
International  Conference  on  Dependable  Systems  and  Networks 
(DSN). June 2002. 
[24]. Skadron, K., M. Stan, and T. Abdelzaher. Control-theoretic
techniques  and  thermal-RC  modeling  for  accurate  and  localized 
dynamic  thermal  management.  in  International  Symposium  on 
High-Performance Computer Architecture. Feb. 2002. 
[25]. Tremblay, M. and Y. Tamir. Support for Fault Tolerance in 
VLSI  Processors.  in  International  Symposium  on  Circuits  and 
Systems. May 1989. Portland, Oregon. 
[26]. Turmon, M., R. Granat, and D. Katz. Software-implemented
fault  detection  for  high-performance  space  applications.  in 
International  Conference  on  Dependable  Systems  and  Networks 
(DSN). June 2000. 
[27].  Vijaykumar,  T.N.,  I.  Pomeranz,  and  K.  Cheng.  Transient-
Fault Recovery via Simultaneous Multithreading. in International
Symposium on Computer Architecture (ISCA). May 2002. 
[28]. Zhang W., G.S., Kandemir M.,  Sivasubramaniam A. ICR:
In-Cache  Replication  for  Enhancing  Data  Cache  Reliability.  in 
Dependable  Computing  and  Communication  Symposium  (DSN-
03). 2003. 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
10