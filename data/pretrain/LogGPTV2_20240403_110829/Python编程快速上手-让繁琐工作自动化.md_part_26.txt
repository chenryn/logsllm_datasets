### 8.1 处理文件路径

#### 8.1.1 检查绝对路径和相对路径
- `os.path.isabs(path)` 函数用于判断给定的路径是否为绝对路径。如果参数是绝对路径，返回 `True`；如果是相对路径，则返回 `False`。
- `os.path.relpath(path, start)` 函数将返回从 `start` 路径到 `path` 的相对路径字符串。如果没有提供 `start` 参数，默认使用当前工作目录作为起始路径。

**示例：**
```python
import os
print(os.path.abspath('.'))  # 输出: 'C:\\Python34'
print(os.path.abspath('.\\Scripts'))  # 输出: 'C:\\Python34\\Scripts'
print(os.path.isabs('.'))  # 输出: False
print(os.path.isabs(os.path.abspath('.')))  # 输出: True
```
在上述示例中，因为当前工作目录是 `C:\Python34`，所以 `'.'` 文件夹指的是绝对路径 `'C:\\Python34'`。

**注意：** 由于每个系统的文件结构可能不同，请尝试使用您计算机上实际存在的文件夹进行练习。

**示例：**
```python
print(os.path.relpath('C:\\Windows', 'C:\\'))  # 输出: 'Windows'
print(os.path.relpath('C:\\Windows', 'C:\\spam\\eggs'))  # 输出: '..\\..\\Windows'
print(os.getcwd())  # 输出: 'C:\\Python34'
```

#### 8.1.2 获取路径信息
- `os.path.dirname(path)` 返回一个字符串，包含 `path` 中最后一个斜杠之前的所有内容。
- `os.path.basename(path)` 返回一个字符串，包含 `path` 中最后一个斜杠之后的所有内容。

**示例：**
```python
path = 'C:\\Windows\\System32\\calc.exe'
print(os.path.basename(path))  # 输出: 'calc.exe'
print(os.path.dirname(path))  # 输出: 'C:\\Windows\\System34'
```

- 如果需要同时获取路径的目录名和基名，可以使用 `os.path.split()` 函数，它会返回一个包含这两个字符串的元组。

**示例：**
```python
calcFilePath = 'C:\\Windows\\System32\\calc.exe'
print(os.path.split(calcFilePath))  # 输出: ('C:\\Windows\\System32', 'calc.exe')
# 或者：
print((os.path.dirname(calcFilePath), os.path.basename(calcFilePath)))  # 输出: ('C:\\Windows\\System32', 'calc.exe')
```

- 若要将文件路径分割成各个部分的列表，可以使用 `split()` 字符串方法，并根据 `os.path.sep` 中的字符进行分割。

**示例：**
```python
print(calcFilePath.split(os.path.sep))  # 输出: ['C:', 'Windows', 'System32', 'calc.exe']
# 在 OS X 和 Linux 系统上:
print('/usr/bin'.split(os.path.sep))  # 输出: ['', 'usr', 'bin']
```

#### 8.1.3 查看文件大小和文件夹内容
- `os.path.getsize(path)` 返回 `path` 中文件的字节数。
- `os.listdir(path)` 返回一个包含 `path` 中所有文件名的字符串列表（注意，这个函数在 `os` 模块中，而不是 `os.path`）。

**示例：**
```python
print(os.path.getsize('C:\\Windows\\System32\\calc.exe'))  # 输出: 776192
print(os.listdir('C:\\Windows\\System32'))  # 输出: ['0409', '12520437.cpx', ...]
```

- 计算指定目录下所有文件的总字节数：

**示例：**
```python
totalSize = 0
for filename in os.listdir('C:\\Windows\\System32'):
    totalSize += os.path.getsize(os.path.join('C:\\Windows\\System32', filename))
print(totalSize)  # 输出: 1117846456
```

#### 8.1.4 检查路径有效性
- `os.path.exists(path)` 判断 `path` 是否存在，存在返回 `True`，否则返回 `False`。
- `os.path.isfile(path)` 判断 `path` 是否存在且是一个文件，是则返回 `True`，否则返回 `False`。
- `os.path.isdir(path)` 判断 `path` 是否存在且是一个文件夹，是则返回 `True`，否则返回 `False`。

**示例：**
```python
print(os.path.exists('C:\\Windows'))  # 输出: True
print(os.path.exists('C:\\some_made_up_folder'))  # 输出: False
print(os.path.isdir('C:\\Windows\\System32'))  # 输出: True
print(os.path.isfile('C:\\Windows\\System32'))  # 输出: False
print(os.path.isdir('C:\\Windows\\System32\\calc.exe'))  # 输出: False
print(os.path.isfile('C:\\Windows\\System32\\calc.exe'))  # 输出: True
```

### 8.2 文件读写过程

#### 8.2.1 用 `open()` 函数打开文件
- `open(path, mode)` 函数用于打开文件并返回一个 `File` 对象。`mode` 参数指定文件打开模式，如 `'r'` 表示读取模式，`'w'` 表示写入模式，`'a'` 表示追加模式。

**示例：**
```python
helloFile = open('C:\\Users\\your_home_folder\\hello.txt', 'r')
```

#### 8.2.2 读取文件内容
- `read()` 方法将整个文件内容读取为一个字符串。
- `readlines()` 方法将文件内容按行读取为一个字符串列表。

**示例：**
```python
helloContent = helloFile.read()
print(helloContent)  # 输出: 'Hello world!'

sonnetFile = open('sonnet29.txt', 'r')
print(sonnetFile.readlines())  # 输出: ['When, in disgrace with fortune and men\'s eyes,\n', 'I all alone beweep my outcast state,\n', ...]
```

#### 8.2.3 写入文件
- 使用写入模式 (`'w'`) 或追加模式 (`'a'`) 打开文件，然后调用 `write()` 方法写入内容。

**示例：**
```python
baconFile = open('bacon.txt', 'w')
baconFile.write('Hello world!\n')  # 返回写入的字符数
baconFile.close()

baconFile = open('bacon.txt', 'a')
baconFile.write('Bacon is not a vegetable.')  # 返回写入的字符数
baconFile.close()

baconFile = open('bacon.txt', 'r')
content = baconFile.read()
baconFile.close()
print(content)  # 输出: 'Hello world!\nBacon is not a vegetable.'
```

### 8.3 用 `shelve` 模块保存变量
- `shelve` 模块允许你将 Python 程序中的变量保存到二进制的 shelf 文件中。