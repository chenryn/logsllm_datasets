• 调用os.path.isabs(path)，如果参数是一个绝对路径，就返回True，如果参数是
一个相对路径，就返回False。
• 调用os.path.relpath(path, start)将返回从start路径到path的相对路径的字符串。
如果没有提供start，就使用当前工作目录作为开始路径。
在交互式环境中尝试以下函数：
>>> os.path.abspath('.')
'C:\\Python34'
>>> os.path.abspath('.\\Scripts')
'C:\\Python34\\Scripts'
>>> os.path.isabs('.')
False
>>> os.path.isabs(os.path.abspath('.'))
True
因为在os.path.abspath()调用时，当前目录是C:\Python34，所以“点”文件夹指
的是绝对路径'C:\\Python34'。
注意 因为在你的系统上，文件和文件夹可能与我的不同，所以你不能完全遵照本章
中的每一个例子。但还是请尝试用你的计算机上存在的文件夹来完成例子。
在交互式环境中，输入以下对os.path.relpath()的调用：
>>> os.path.relpath('C:\\Windows', 'C:\\')
'Windows'
>>> os.path.relpath('C:\\Windows', 'C:\\spam\\eggs')
'..\\..\\Windows'
>>> os.getcwd()
'C:\\Python34'
调用os.path.dirname(path)将返回一个字符串，它包含path参数中最后一个斜杠
之前的所有内容。调用os.path.basename(path)将返回一个字符串，它包含path 参数
中最后一个斜杠之后的所有内容。一个路径的目录名称和基本名称如图8-4所示。
第8章 读写文件 141
图8-4 基本名称跟在路径中最后一个斜杠后，它和文件名一样，
目录名称是最后一个斜杠之前的所有内容
例如，在交互式环境中输入以下代码：
>>> path = 'C:\\Windows\\System32\\calc.exe'
>>> os.path.basename(path)
'calc.exe'
>>> os.path.dirname(path)
'C:\\Windows\\System32'
如果同时需要一个路径的目录名称和基本名称，就可以调用 os.path.split()，获
得这两个字符串的元组，像这样：
>>> calcFilePath = 'C:\\Windows\\System32\\calc.exe'
>>> os.path.split(calcFilePath)
('C:\\Windows\\System32', 'calc.exe')
请注意，可以调用os.path.dirname()和os.path.basename()，将它们的返回值放在
一个元组中，从而得到同样的元组。
>>> (os.path.dirname(calcFilePath), os.path.basename(calcFilePath))
('C:\\Windows\\System32', 'calc.exe')
但如果需要两个值，os.path.split()是很好的快捷方式。
同时也请注意，os.path.split()不会接受一个文件路径并返回每个文件夹的字符串的
列表。如果需要这样，请使用split()字符串方法，并根据os.path.sep中的字符串进行分
割。回忆一下，根据程序运行的计算机，os.path.sep变量设置为正确的文件夹分割斜杠。
例如，在交互式环境中输入以下代码：
>>> calcFilePath.split(os.path.sep)
['C:', 'Windows', 'System32', 'calc.exe']
在OS X和Linux系统上，返回的列表头上有一个空字符串：
>>> '/usr/bin'.split(os.path.sep)
['', 'usr', 'bin']
split()字符串方法将返回一个列表，包含该路径的所有部分。如果向它传递
os.path.sep，就能在所有操作系统上工作。
8.1.7 查看文件大小和文件夹内容
一旦有办法处理文件路径，就可以开始搜集特定文件和文件夹的信息。os.path 模
块提供了一些函数，用于查看文件的字节数以及给定文件夹中的文件和子文件夹。
• 调用os.path.getsize(path)将返回path参数中文件的字节数。
142 Python编程快速上手——让繁琐工作自动化
• 调用 os.listdir(path)将返回文件名字符串的列表，包含 path 参数中的每个文件
（请注意，这个函数在os模块中，而不是os.path）。
下面是我在交互式环境中尝试这些函数的结果：
>>> os.path.getsize('C:\\Windows\\System32\\calc.exe')
776192
>>> os.listdir('C:\\Windows\\System32')
['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll',
--snip--
'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']
可以看到，我的计算机上的 calc.exe 程序是 776192 字节。在我的 C:\Windows\
system32下有许多文件。如果想知道这个目录下所有文件的总字节数，就可以同时
使用os.path.getsize()和os.listdir()。
>>> totalSize = 0
>>> for filename in os.listdir('C:\\Windows\\System32'):
totalSize = totalSize + os.path.getsize(os.path.join('C:\\Windows\\System32', filename))
>>> print(totalSize)
1117846456
当循环遍历C:\Windows\System32文件夹中的每个文件时，totalSize变量依次增加
每个文件的字节数。请注意，我在调用os.path.getsize()时，使用了os.path.join()来连接
文件夹名称和当前的文件名。os.path.getsize()返回的整数添加到totalSize中。在循环遍
历所有文件后，我打印出totalSize，看看C:\Windows\System32文件夹的总字节数。
8.1.8 检查路径有效性
如果你提供的路径不存在，许多 Python 函数就会崩溃并报错。os.path 模块提
供了一些函数，用于检测给定的路径是否存在，以及它是文件还是文件夹。
• 如果path参数所指的文件或文件夹存在，调用os.path.exists(path)将返回True，
否则返回False。
• 如果path参数存在，并且是一个文件，调用os.path.isfile(path)将返回True，否
则返回False。
• 如果path参数存在，并且是一个文件夹，调用os.path.isdir(path)将返回True，
否则返回False。
下面是我在交互式环境中尝试这些函数的结果：
>>> os.path.exists('C:\\Windows')
True
>>> os.path.exists('C:\\some_made_up_folder')
False
>>> os.path.isdir('C:\\Windows\\System32')
True
>>> os.path.isfile('C:\\Windows\\System32')
False
>>> os.path.isdir('C:\\Windows\\System32\\calc.exe')
第8章 读写文件 143
False
>>> os.path.isfile('C:\\Windows\\System32\\calc.exe')
True
利用os.path.exists()函数，可以确定DVD或闪存盘当前是否连在计算机上。例
如，如果在Windows计算机上，我想用卷名D:\检查一个闪存盘，可以这样做：
>>> os.path.exists('D:\\')
False
不好！看起来我忘记插入闪存盘了。
8.2 文件读写过程
在熟悉了处理文件夹和相对路径后，你就可以指定文件的位置，进行读写。接下
来几节介绍的函数适用于纯文本文件。“纯文本文件”只包含基本文本字符，不包含字
体、大小和颜色信息。带有.txt扩展名的文本文件，以及带有.py扩展名的Python脚本
文件，都是纯文本文件的例子。它们可以被Windows 的Notepad 或OS X 的TextEdit
应用打开。你的程序可以轻易地读取纯文本文件的内容，将它们作为普通的字符串值。
“二进制文件”是所有其他文件类型，诸如字处理文档、PDF、图像、电子表格
和可执行程序。如果用Notepad或TextEdit打开一个二进制文件，它看起来就像乱
码，如图8-5所示。
图8-5 在Notepad中打开Windows的calc.exe程序
既然每种不同类型的二进制文件，都必须用它自己的方式来处理，本书就不会
探讨直接读写二进制文件。好在，许多模块让二进制文件的处理变得更容易。在本
章稍后，你将探索其中一个模块：shelve。
在Python中，读写文件有3个步骤：
1．调用open()函数，返回一个File对象。
2．调用File对象的read()或write()方法。
3．调用File对象的close()方法，关闭该文件。
144 Python编程快速上手——让繁琐工作自动化
8.2.1 用open()函数打开文件
要用 open()函数打开一个文件，就要向它传递一个字符串路径，表明希望打开
的文件。这既可以是绝对路径，也可以是相对路径。open()函数返回一个File对象。
尝试一下，先用 Notepad 或 TextEdit 创建一个文本文件，名为 hello.txt。输入
Hello world!作为该文本文件的内容，将它保存在你的用户文件夹中。然后，如果使
用Windows，在交互式环境中输入以下代码：
>>> helloFile = open('C:\\Users\\your_home_folder\\hello.txt')
如果使用OS X，在交互式环境中输入以下代码：
>>> helloFile = open('/Users/your_home_folder/hello.txt')
请确保用你自己的计算机用户名取代 your_home_folder。例如，我的用户名是
asweigart，所以我在windows下输入'C:\\Users\\asweigart\\hello.txt'。
这些命令都将以读取纯文本文件的模式打开文件，或简称为“读模式”。当文件
以读模式打开时，Python只让你从文件中读取数据，你不能以任何方式写入或修改它。
在Python中打开文件时，读模式是默认的模式。但如果你不希望依赖于Python的默
认值，也可以明确指明该模式，向 open()传入字符串'r'，作为第二个参数。所以
open('/Users/asweigart/hello.txt', 'r')和open('/Users/asweigart/hello.txt')做的事情一样。
调用 open()将返回一个 File 对象。File 对象代表计算机中的一个文件，它只是
Python中另一种类型的值，就像你已熟悉的列表和字典。在前面的例子中，你将File
对象保存在 helloFile 变量中。现在，当你需要读取或写入该文件，就可以调用
helloFile变量中的File对象的方法。
8.2.2 读取文件内容
既然有了一个File对象，就可以开始从它读取内容。如果你希望将整个文件的
内容读取为一个字符串值，就使用 File 对象的 read()方法。让我们继续使用保存在
helloFile中的hello.txt File对象。在交互式环境中输入以下代码：
>>> helloContent = helloFile.read()
>>> helloContent
'Hello world!'
如果你将文件的内容看成是单个大字符串，read()方法就返回保存在该文件中的
这个字符串。
或者，可以使用 readlines()方法，从该文件取得一个字符串的列表。列表中的
每个字符串就是文本中的每一行。例如，在 hello.txt 文件相同的目录下，创建一个
名为sonnet29.txt的文件，并在其中写入以下文本：
When, in disgrace with fortune and men's eyes,
I all alone beweep my outcast state,
第8章 读写文件 145
And trouble deaf heaven with my bootless cries,
And look upon myself and curse my fate,
确保用换行分开这4行。然后在交互式环境中输入以下代码：
>>> sonnetFile = open('sonnet29.txt')
>>> sonnetFile.readlines()
[When, in disgrace with fortune and men's eyes,\n', ' I all alone beweep my
outcast state,\n', And trouble deaf heaven with my bootless cries,\n', And
look upon myself and curse my fate,']
请注意，每个字符串值都以一个换行字符\n结束。除了文件的最后一行。与单
个大字符串相比，字符串的列表通常更容易处理。
8.2.3 写入文件
Python允许你将内容写入文件，方式与print()函数将字符串“写”到屏幕上类
似。但是，如果打开文件时用读模式，就不能写入文件。你需要以“写入纯文本模
式”或“添加纯文本模式”打开该文件，或简称为“写模式”和“添加模式”。
写模式将覆写原有的文件，从头开始，就像你用一个新值覆写一个变量的值。
将'w'作为第二个参数传递给open()，以写模式打开该文件。不同的是，添加模式将
在已有文件的末尾添加文本。你可以认为这类似向一个变量中的列表添加内容，而
不是完全覆写该变量。将'a'作为第二个参数传递给open()，以添加模式打开该文件。
如果传递给 open()的文件名不存在，写模式和添加模式都会创建一个新的空文
件。在读取或写入文件后，调用close()方法，然后才能再次打开该文件。
让我们整合这些概念。在交互式环境中输入以下代码：
>>> baconFile = open('bacon.txt', 'w')
>>> baconFile.write('Hello world!\n')
13
>>> baconFile.close()
>>> baconFile = open('bacon.txt', 'a')
>>> baconFile.write('Bacon is not a vegetable.')
25
>>> baconFile.close()
>>> baconFile = open('bacon.txt')
>>> content = baconFile.read()
>>> baconFile.close()
>>> print(content)
Hello world!
Bacon is not a vegetable.
首先，我们以写模式打开bacon.txt。因为还没有bacon.txt，Python就创建了一
个。在打开的文件上调用write()，并向write()传入字符串参数'Hello world! \n'，将
字符串写入文件，并返回写入的字符个数，包括换行符。然后关闭该文件。
为了将文本添加到文件已有的内容，而不是取代我们刚刚写入的字符串，我们
就以添加模式打开该文件。向该文件写入'Bacon is not a vegetable.'，并关闭它。最后，
为了将文件的内容打印到屏幕上，我们以默认的读模式打开该文件，调用 read()，
146 Python编程快速上手——让繁琐工作自动化
将得到的内容保存在content中，关闭该文件，并打印content。
请注意，write()方法不会像 print()函数那样，在字符串的末尾自动添加换行字
符。必须自己添加该字符。
8.3 用 shelve 模块保存变量
利用shelve模块，你可以将Python程序中的变量保存到二进制的shelf文件中。