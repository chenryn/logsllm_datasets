title:Copker: Computing with Private Keys without RAM
author:Le Guan and
Jingqiang Lin and
Bo Luo and
Jiwu Jing
Copker: Computing with Private Keys without RAM
Le Guan†,‡,\, Jingqiang Lin†,‡,§, Bo Luo], Jiwu Jing†,‡
† Data Assurance and Communication Security Research Center, Chinese Academy of Sciences, CHINA
‡ State Key Laboratory of Information Security, Institute of Information Engineering,
Chinese Academy of Sciences, CHINA
\ University of Chinese Academy of Sciences, CHINA
] Department of Electrical Engineering and Computer Science, The University of Kansas, USA
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
§ Corresponding author
Abstract—Cryptographic systems are essential for computer
and communication security, for instance, RSA is used in PGP
Email clients and AES is employed in full disk encryption. In
practice, the cryptographic keys are loaded and stored in RAM
as plain-text, and therefore vulnerable to physical memory attacks
(e.g., cold-boot attacks). To tackle this problem, we propose
Copker, which implements asymmetric cryptosystems entirely
within the CPU, without storing plain-text private keys in the
RAM. In its active mode, Copker stores kilobytes of sensitive data,
including the private key and the intermediate states, only in on-
chip CPU caches (and registers). Decryption/signing operations
are performed without storing sensitive information in system
memory. In the suspend mode, Copker stores symmetrically en-
crypted private keys in memory, while employs existing solutions
to keep the key-encryption key securely in CPU registers. Hence,
Copker releases the system resources in the suspend mode. In this
paper, we implement Copker with the most common asymmetric
cryptosystem, RSA, with the support of multiple private keys.
We show that Copker provides decryption/signing services that
are secure against physical memory attacks. Meanwhile, with
intensive experiments, we demonstrate that our implementation
of Copker is secure and requires reasonable overhead.
Keywords—Cache-as-RAM; cold-boot attack; key management;
asymmetric cryptography implementation.
I.
INTRODUCTION
In computer and communication systems, cryptographic
protocols are indispensable in protecting data in motion as well
as data at rest. In particular, asymmetric cryptography is the
foundation of a number of Internet applications. For instance,
secure Email systems (PGP [20] and S/MIME [42]) are used
to exchange encrypted messages and verify the identities of the
senders. Meanwhile, SSL/TLS [16, 19] is widely adopted in
secure HTTP [43], e-commerce, anonymous communications
[17], voice over IP (VoIP) [13] and other communication
systems. The security of such protocols relies on the semantic
security of asymmetric cryptographic algorithms and the con-
ﬁdentiality of private keys. In practice, when the cryptographic
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:18)(cid:19)(cid:22)
modules are loaded, the private keys are usually stored in the
main random-access-memory (RAM) of a computer system.
Although various mechanisms have been proposed for memory
protection, unfortunately, the RAM is still vulnerable to phys-
ical attacks. For instance, when the adversaries have physical
access to a running computer,
they can launch cold-boot
attacks [23] to retrieve the contents of the main memory. Such
attacks completely bypass memory protection mechanisms at
operating system (OS) level. Therefore, any content, including
cryptographic keys, stored in the memory could be extracted
even though the adversaries do not have any system privilege
in the target machine. The compromised private keys could
be further exploited to decrypt messages eavesdropped from
network communications, or to impersonate the owners of the
private keys.
Access control, process isolation and other memory protec-
tion mechanisms at OS level cannot prevent cold-boot attacks,
since the attackers usually reboot the machine with removable
disks, or load the physical memory modules to their own
machines to get a dump of the memory content. On the other
hand, approaches based on memory management (e.g., the
one-copy policy [24]) mitigate the problem by increasing the
difﬁculty to ﬁnd the private keys. Such methods are moderately
effective for partial memory disclosure. Unfortunately, a suc-
cessful cold-boot attack generates a dump of the entire physical
memory, so that all “hidden” information are disclosed. More
recently, TRESOR and Amnesia [38, 45] propose to store
symmetric keys (e.g., AES keys) and perform encryption/de-
cryption operations completely in CPU registers, so that keys
are not loaded into the main memory during the process. The
solutions are effective in protecting symmetric keys (typically
not longer than 256 bits) against cold-boot attacks. However,
they are not suitable for asymmetric cryptography, since private
keys are too long to ﬁt into CPU registers: RSA Laboratories
[30] and NIST [3] recommend a minimum key length of 2048
bits for RSA private keys. Meanwhile, a 2048-bit RSA private
key block needs at least 1152 bytes to work with Chinese
remainder theorem (CRT)1, and the intermediate states (in
decryption or signing) need at least 512 bytes of additional
storage (see Section II-A for details).
In this paper, we present a mechanism named Copker to
perform asymmetric cryptographic algorithms without using
RAM, and hence defeat against cold-boot attacks. In particular,
1CRT makes the computation approximately four times faster than that does
not use CRT [32].
we implement RSA, the most prevalent asymmetric crypto-
graphic algorithm, on multi-core CPU systems running Linux
OS. During computation, Copker stores keys and intermediate
states in on-chip CPU caches and registers, and computes
with private keys entirely on the CPU. Therefore, plain-text
private keys are never loaded to the RAM. To achieve this
goal, Copker designs the following mechanisms: (1) during
decryption/signing, the stack is switched so that all variables
are directed into a reserved address space within caches; (2)
the Copker task enters an atomic section, so that it cannot
be suspended and the sensitive variables are never swapped
to RAM; (3) other cores that share on-chip caches with the
core running Copker are set to the no-ﬁll mode during the
computation, so that any task on these cores would not trigger
cache replacement; and (4) private keys are either dynamically
loaded into caches or encrypted in RAM, hence, the cache is
occupied only when necessary.
We also designed a real-time checker program to verify
that no plain-text sensitive data has been leaked to RAM
during the stress test. The design goal of Copker is to de-
fend against physical attacks on RAM. Hence, we assume
a trustworthy OS kernel, that is, all binaries and processes
with root privileges are trusted. The prototype system is
implemented as a customized Linux kernel, but it can be ported
to a trustworthy OS such as seL4 [31]. Moreover, since the
asymmetric cryptographic algorithm in Copker is written in C
language, hence, it is easier to be extended (compared with
assembly language in [38, 45]) to support more cryptographic
algorithms.
Our contributions are three-fold: (1) We are the ﬁrst to pro-
pose an architecture to support asymmetric decryption/signing
without using RAM. We keep private keys and intermediate
variables/states in CPU caches and registers, so that conﬁden-
tial information is never loaded to RAM. (2) We implement the
designed architecture, and demonstrate its security through se-
curity analysis as well as experimental validation. (3) Through
intensive experiments, we show that our secure asymmetric
decryption/signing scheme requires reasonable overhead. The
rest of the paper is organized as follows: Section II presents
the background about asymmetric cryptographic algorithms
and caches. The design and implementation of Copker are de-
scribed in Section III and IV, respectively. Section V evaluates
Copker in term of validity and performance, followed by the
security analysis in Section VI. Finally, Section VII surveys
the related work and Section VIII draws the conclusion.
II. BACKGROUND
A. RSA
RSA is the most prevalent asymmetric cryptographic al-
gorithm for both encryption/decryption and signing/veriﬁca-
tion [44]. A typical RSA private key block is an octuple
(n, e, d, p, q, dp, dq, qinv), where (n, e) denotes the public key,
d denotes the private key, and other variables are private
parameters enabling the CRT speed-up. The key-length of the
RSA key, denoted as L, is the length of n, which is 2048 bits
or 3072 bits. The length of d is also L, while p, q, dp, dq and
qinv are all L/2 in length. The length of e is usually negligible
(e.g., 64 bits). Therefore, a 2048-bit RSA private key needs at
least 4.5L, i.e., 1152 bytes of storage.
Algorithm 1: RSA Decryption with CRT
Input: ciphertext, n, e, d, p, q, dp, dq, qinv
Output: plaintext
1 t1   String2Integer(ciphertext)
2 t2   t1dp mod p
3 t3   t1dq mod q
4 t1   (t2   t3) ⇤ qinv mod p
5 t1   t3 + t1 ⇤ q
6 plaintext   Integer2String(t1)
To implement the RSA algorithm in computer systems,
more memory in addition to the private key block is required
to store temporary variables. The pseudo-code in Algorithm
1 shows the RSA decryption process with the CRT speed-up.
From the pseudo-code, we can ﬁnd that at least 3 intermediate
variables are needed: t1 is L in length, while t2 and t3
are L/2. Therefore, for a 2048-bit RSA decryption, at least
6.5L = 1664 bytes are needed to store the private key block
and intermediate variables. Moreover, the pseudo code in Algo-
rithm 1 only shows the major steps in the decryption process.
When we consider the detailed implementation in each step,
such as modular exponentiations and multiplications, more
memory will be needed.
Moreover, commercial and well-designed RSA implemen-
tations may require even more spaces to support additional
features. For example, Montgomery reduction [36], which can
be used to accelerate modular multiplications, needs 3 long
integers to store Montgomery values. To defend against timing
attacks, RSA blinding is usually enabled [12], which requires
extra memory space as well.
B. CPU Cache
On-chip cache is introduced to make up the speed gap
between CPU and RAM. At present, the frequency of CPU is
much higher than that of the memory bus. For example, Intel
Core i7-2600 CPU has 4 cores running at 3.4GHz, while the
bus frequency of a high-end DDR3-1600 RAM is 800MHz
only. The discrepancy is primarily caused by the inherent
physical limitations of the dynamic RAM (DRAM) hardware.
On the other hand, the cache is a small amount of high-
speed static RAM (SRAM) located between CPU cores and the
main memory. CPU caches are used to temporarily store data
blocks recently accessed by the CPU, so that future read/write
operations may be performed only on the cache, i.e. without
accessing the RAM. Typically, it takes 3 to 4 cycles for a cache
read, while a memory read takes about 250 cycles [18].
As the speed gap between RAM and CPU increases,
multiple levels of caches are implemented. Higher-level caches
are larger in size (megabytes level) but slower in speed.
Some of the caches are dedicated to store data or instructions
only, namely data caches or instruction caches, respectively.
The cache hierarchy differs among microarchitectures. For
example, on Intel Core microarchitecture, each of the two cores
on a single die has its own level-one data (L1D) cache (32KB)
and instruction cache (32KB). Those two cores also share a
uniﬁed level-two (L2) cache of 2MB or 3MB.
In symmetric multiprocessing (SMP) systems, different
cores may access the same memory location, hence, multiple
2
copies of the same memory block may be stored in different
caches belonging to different cores. As the caches could
be modiﬁed independently by different cores, data could be
inconsistent across multiple copies. To tackle the problem,
CPU manufacturers, such as Intel, provide built-in utilities
to maintain data consistency between the cache and RAM.
However, cache control is usually very limited to the OS and
applications.
III. SYSTEM DESIGN
A. Threat Model
The primary goal of Copker is to defend against memory-
based attacks, such as the cold-boot attack [23]. In such
attacks, the target computer is physically accessible to the
attacker. The attacker could take the following steps to obtain
the data in RAM: (1) power off the target computer; (2) pull
out the RAM; (3) put it in another machine (fully controlled by
the attacker) with a memory dump program; and (4) dump the
original contents of RAM to the hard disk of the new machine.
To make the attack more effective, the attacker could reduce
the temperature of the memory chips to slow down the fading
speed of the memory content. Such attacks bypass all access
control protections at OS and application levels, since they are
essentially at the lowest level (i.e., the hardware).
In this paper, we do not consider OS vulnerabilities, or
software attacks against the OS. In particular, we ﬁrst assume a
trustworthy OS kernel to prevent attacks at system level, when
the attacker has an account (with some privileges) on the target
machine. A trustworthy OS ensures basic security mechanisms
such as process isolation and hierarchical protection domains.
Formally veriﬁed OS such as seL4 [31] and PikeOS [5] can
be used for this purpose. Meanwhile, unauthorized calls to the
private key service are also outside our scope. That is, although
an attacker may obtain decryption/signing results, it does not
harm the conﬁdentiality of private keys.
Moreover, we also assume that the entire system is safe
(i.e., no malicious process stealing secret information) during
OS initialization, which is a short time period. In particular,
during this period, we derive the AES key-encryption key to
be used in Copker, by asking the user to input a password
(will be elaborated in Section III-C). We also assume that
this password is strong enough to defeat brute-force attacks.
After the initialization period, malicious processes may exist in
the system (e.g., an attacker gains root privileges and invokes
different system calls); however, such processes shall not break
the protections by the trusted OS kernel. That is, these attackers
can invoke any system call, but the system calls perform as
expected.
B. Design Goals and Principles
To defend against cold-boot attacks, our most important
design goal is to ensure that sensitive information is never
loaded into the RAM. That is, plain-text private keys, as well
as any intermediate results that might be exploited to expose
the keys, are always kept in on-chip CPU caches and registers.
Such information should never appear on the front side bus
(FSB) or into RAM. On the other hand, to minimize the impact
on CPU performance, we only lock the caches when we are
using the private keys to decrypt or sign messages. To release
unused resources and to protect private keys when they are
not used, we employ an existing technique, TRESOR [38],
to encrypt private keys with AES, and protect the AES key in
CPU registers. In this way, when Copker is not in active mode,
the caches can be used normally, so that system performance is
not affected. Meanwhile, storing AES-encrypted private keys
in RAM is considered safe. The design of dynamic loading
also allows us to support multiple private keys simultaneously
in Copker.
Copker uses private keys to decrypt and sign messages.
To provide decryption and signing services for user-mode
processes, and to defend against memory-based attacks, the
design of Copker needs to satisfy the following criteria:
1)
2)
3)
A ﬁxed address space is allocated and reserved for
computing with private keys. During computing, the
address space is used only by Copker, so that we can
further ensure data in this space are accessed entirely
in caches and not written to RAM.
All variables, including the plain-text private keys and
intermediate variables, are strictly limited within the
address space allocated in Criterion 1.
The Copker decryption/signing process cannot be
interrupted by any other task. Otherwise, the sensitive
data in this address space might be ﬂushed to RAM,
when cache replacement is triggered by read or write
misses (from other tasks).
4) When Copker ﬁnishes computing with private key, all
sensitive information in this address space is erased.
That is, the used cache lines are cleaned deliberately
before the cache lines are released.
In Copker, the service is implemented as system functions
in Linux kernel. A block of bytes are ﬁrst deﬁned as static
variables, and then an address space is allocated for these
variables. The size of the reserved space is carefully chosen,