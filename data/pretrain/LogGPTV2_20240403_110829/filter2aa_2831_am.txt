object. Do this in the Tools/References... menu item of the VB
editor. Find the server object in the list and check it on the list.
This causes Visual Basic to open the type library for browsing. 
Warning - you won't be able to build the C++ server while
VB has an open reference to it. If you need to make any
changes, turn off browsing or close the project and rebuild your
C++ project. 
We will only make two changes in the VB code. Instead of
creating a generic object, we create a specific COM Object. VB
will find the definition among its open references. 
First, we create the object with a specific object type. In the
VB world this is also known as "hard typing." As objects become
more common in the VB world, the practice is becoming more
common. 
Dual Interfaces
137
Additonal Information and Updates: http://www.iftech.com/dcom
Dim Testobj As VbTest 
“VbTest” is a name we assigned to our test server (more
details on naming below). When we create the object we can
specify it more concisely, in a format C++ programmers will find
reassuringly familiar: 
Set Testobj = New VbTest 'early binding
Syntactically early binding isn't very different. All the other
references to the object will remain unchanged. (In our four-line
program this isn't remarkable). 
The real difference is in how VB calls the methods of the
Testobj object. It no longer needs to call GetIDsOfNames() to get
the DISPID of the method. Visual Basic is using the Type library
to get information about the Beep() method. It can find out
about the required parameters and build a parameter list. It can
also do all this before it calls the object, and without the over-
head of communicating remotely with the object. 
Here's what's most interesting: VB isn't using Invoke to call
Beep() anymore. The call goes directly through the COM
VTABLE! VB is figuring out the pointers of the VTABLE without
the VB programmer even knowing they're using pointers. 
Dual Interfaces
Dual interfaces can be called both through VTABLE pointers
and from interpreted languages via IDispatch. Actually, I've been
using dual interfaces in my examples all along. 
If you aren't familiar with old-style OLE IDispatch imple-
mentations, dual interfaces may seem trivial. If you're working
with ATL, it's extremely easy to create a dual interface. Back in
the old days with MFC-based COM, this wasn't the case - it took
a considerable programming effort to build a dual interface. This
approach would have required, for example, that we implement
all the object's methods inside Invoke. 
138    Chapter 9 •
Dual Interfaces 
When an interface is called through Invoke(), it only needs
to implement the four methods of IDispatch. If you specify the
interface as dual, it implements these four methods, plus your
custom methods. Here's what the VTABLE looks like for a dual
interface:
When a dual interface method is called through Invoke, it
looks up the DISPID and finds the location of the method in the
VTABLE. It can then call the method through the VTABLE
pointer. In this case, if the user requested MyMethodA, the client
would call GetIdsOfNames and get the DISPID of that method -
five. It would map the call to the VTABLE, and call
MyMethodA(). An early binding client can skip all this and call
MyMethodA directly, without using GetIDsOfNames or Invoke. 
When you create a new COM object using the ATL Object
Wizard, you can specify the dual attribute. This will cause the
wizard to add the ATL IDispatch implementation to the object.
Figure 9–1
The VTABLE of a dual interface
MyMethodC()
0
1
2
VTABLE
QueryInterface()
Addref()
Release()
Functions
IOLETestObj
Interface
3
4
5
6
7
8
9
GetTypeInfoCount()
GetTypeInfo()
GetIDsOfNames()
Invoke()
MyMethodA()
MyMethodB()
IUnknown
IDispatch
Custo
m
Dual Interfaces
139
Additonal Information and Updates: http://www.iftech.com/dcom
ATL makes IDispatch available by using the template class
IDispatchImpl<>. 
class ATL_NO_VTABLE CVbTest : 
public CComObjectRootEx,
public CComCoClassget_LongVal(&l);
Adding Properties with the Class Wizard
The ATL wizards make adding properties to an interface
extremely easy. If you use the "Add Properties" wizard, it's a no-
brainer. First, the interface must be a dual or oleautomation
derived interface. Next go to the ClassView tab and press the
right mouse button. Choose the "Add Property..." selection. 
Adding Properties with the Class Wizard
143
Additonal Information and Updates: http://www.iftech.com/dcom
Figure 9–3
Adding properties
Figure 9–4
Specifying properties
144    Chapter 9 •
Dual Interfaces 
The Add Properties dialog will be displayed. This dialog
automatically creates property members for the interface. Note
that we didn't enter any parameters for the property interface.
This property interface has just one parameter, although you are
allowed to have more. If you're going to have more parameters,
pay attention to the rules for the propget and propput
attributes.
Methods
You can call methods in an IDispatch interface just like any other
COM interface. In the previous example we used the Beep()
method. Here's the full example code: 
MIDL DEFINITION 
[id(7), helpstring("method Beep")] 
HRESULT Beep([in] long lDuration);
SERVER CODE 
STDMETHODIMP CVbTest::Beep(long lDuration)
{
::Beep( 440, lDuration );// don’t forget the ::
return S_OK;
}
CLIENT USAGE 
testobj.Beep (1000)         ' Visual Basic client
The ISupportErrorInfo Interface
HRESULTS provide the basis for all COM error handling, but
automation clients are often able to get more detailed informa-
tion through the ERR object. This extended capability is built into
IDispatch, so it makes sense to build it into your server objects.
You can add this functionality to Dispatch and Dual interfaces
The ISupportErrorInfo Interface
145
Additonal Information and Updates: http://www.iftech.com/dcom
(or Custom, for that matter) by checking the SupportErrorInfo
box when you create your ATL object. 
What this option does is add several interfaces to your ATL
object. Here’s the header code of an object that supports the
ErrorInfo interface. 
class ATL_NO_VTABLE CErrTest : 
public CComObjectRootEx,
public CComCoClass<CERRTEST, &CLSID_ErrTest,
public ISupportErrorInfo,
public IDispatchImpl<IERRTEST, &LIBID_OLETESTLib 
&IID_IErrTest,
This extended error capability comes through both the ISup-
portErrorInfo interface and the CComCoClass template. The
ISupportErrorInfo interface is added to the supported interfaces
of the coclass through the COM map. 
Figure 9–5
Adding error support
146    Chapter 9 •
Dual Interfaces 
BEGIN_COM_MAP(CErrTest)
COM_INTERFACE_ENTRY(IErrTest)
COM_INTERFACE_ENTRY(IDispatch)
COM_INTERFACE_ENTRY(ISupportErrorInfo)
END_COM_MAP()
The ATL wizard also adds source code to your CPP module.
ISupportErrorInfo supports a single method called InterfaceSup-
portsErrorInfo. The method provides an array of interfaces that
support extended errors. The first interface is automatically
(IID_IErrTest ) added to this list. If you add multiple interfaces to
your coclass you’ll need to add the IID’s to this static array. Note
that this code was entirely generated by the ATL wizard. 
STDMETHODIMP CErrTest::InterfaceSupportsError-
Info(REFIID riid)
{
static const IID* arr[] = 
{
&IID_IErrTest
};
for (int i=0; i < sizeof(arr) / sizeof(arr[0]); i++)
{
if (InlineIsEqualGUID(*arr[i],riid))
return S_OK;
}
return S_FALSE;
}
To populate the ErrorInfo object, you can call the Error
method of the CComCoClass template class. This method has a
number of overloads, which allow you to set different types of
error information. Here’s one of the simplest ways to use it. 
STDMETHODIMP CErrTest::Div(double d1, double d2, dou-
ble *dresult)
{
HRESULT hr = S_OK;
if (d2 == 0.0)
{
The ISupportErrorInfo Interface
147
Additonal Information and Updates: http://www.iftech.com/dcom
wchar_t str[128] = L"Divide By Zero" ;
Error( str, IID_IErrTest ); // member of CComCo-
Class
hr = E_FAIL;
}
else
*dresult = d1 / d2;
return hr;
}
Here’s the IDL code that defines this method: 
[id(1), helpstring("method Div")] HRESULT Div(
                       [in] double d1, 
                       [in] double d2, 
                       [out,retval] double *dresult); 
The automation client can extract this information the usual
way, using the ERR object. Even if your coclass doesn’t imple-
ment ISupportErrorInfo, the VB ERR object does a pretty good
job of filling itself with usable information. Here’s a Visual Basic
sample: 
Private Sub DoCalc_Click()
    Dim ETObj As Object
    Dim v1 As Double, v2 As Double, v3 As Double
    Set ETObj = CreateObject("OLETest.ErrTest.1")
    v1 = Me.D1
    v2 = Me.D2
    On Error GoTo ShowProb
    v3 = ETObj.Div(v1, v2)
    Me.Result = v3
    Set ETObj = Nothing
    Exit Sub
ShowProb:
148    Chapter 9 •
Dual Interfaces 
Dim msg As String
    msg = "Description:" + Err.Description + Chr(13)+_
          "Source:" + Err.Source + Chr(13) + _
          "Number:" + Hex(Err.Number)
    MsgBox msg, vbOKOnly, "Server Error"
    Set ETObj = Nothing
End Sub
The Visual Basic "ERR" object has a number of useful prop-
erties - these include "Description", "HelpContext", "HelpFile",
"Number", and "Source". All these properties can be set with
Error method. 
This error information is getting stored in a structure called
EXCEPINFO. Here’s the layout of this structure from OAIDL.IDL.
You can immediately see the similarities between this and the
"ERR" object. 
typedef struct tagEXCEPINFO {
    WORD  wCode;            /* An error code describing 
the error. */
    WORD  wReserved;
    BSTR  bstrSource;       /* A source of the excep-
tion */
    BSTR  bstrDescription;  /* A description of the 
error */
    BSTR  bstrHelpFile;     /* Fully qualified drive, 
path, and file name */
    DWORD dwHelpContext;    /* help context of topic 
within the help file */
    ULONG pvReserved;
    ULONG pfnDeferredFillIn;
    SCODE scode;
} EXCEPINFO;
Obviously, this structure is getting filled by CComCo-
Class::Error. The information in the structure is passed back
through an interface called IErrorInfo. There’s also an interface
called ICreateErrorInfo that sets the EXECPINFO structure. If
Summary
149
Additonal Information and Updates: http://www.iftech.com/dcom
you’re accessing the coclass through C++, you can use these two
interfaces directly. 
All of this error handling comes standard with an IDispatch
interface. The EXECPINFO structure is one of the parameters to
IDispatch::Invoke(). The extended error interfaces provide a
good way to pass detailed information back to a client program. 
Summary
Here are a few important points from the discussion above: 
• Your components are going to need to communicate with
Visual Basic, Java, Scripting languages, and a whole slew
of other applications. These applications will probably
support IDispatch based OLE interfaces. 
• With ATL it's easy to implement IDispatch and dual inter-
faces. 
• Dual and IDispatch interfaces can only use data types
allowed in variants. 
• The earlier the binding, the faster the interface. Use hard
typing on the client for maximum performance. 
• Type libraries provide extensive information to the client
application. IDispatch interfaces can use the type library
to marshal data.
150    Chapter 9 •
Dual Interfaces 
T
E
N
10
COM Threading 
Models 