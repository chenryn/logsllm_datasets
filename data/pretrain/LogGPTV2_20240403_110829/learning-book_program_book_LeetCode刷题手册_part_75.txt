for k := 0;k = 0; i-- {
if strings.HasPrefix(this.input[i], prefix) &&
strings.HasSuffix(this.input[i], suffix) {
return i
3
return -1
/**
* Your wordFilter object will be instantiated and called as such:
*obj := Constructor(words);
* param_l := obj-F(prefix,suffix);
*/
746.MinCostClimbingStairs
题目
On a staircase, the i -th step has some non-negative cost cost[i] assigned (0 indlexed).
Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to
reach the top of the floor, and you can either start from the step with index O, or the step with
index 1.
Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.
Example 2:
---
## Page 731
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[o], and only step on ls, skipping
cost[3]
Note:
1. cost will have a length in the range [2, 1000] .
2. Every cost [i] will be an integer in the range [0, 999]
题目大意
数组的每个索引做为一个阶梯，第1个阶梯对应着一个非负数的体力花费值cost[]（索引从0开始）。每
当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。您
需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为0或1的元素作为初始阶梯。
解题思路
·这一题算是第70题的加强版。依旧是爬楼梯的问题，解题思路也是DP。在爬楼梯的基础上增加
了一个新的条件，每层楼梯都有一个cost花费，问上到最终楼层，花费最小值是多少。
dp[i]代表上到第n层的最小花费，状态转移方程是dp[i]=cost[i]+min（dp[i-2]，
dp[i-1]），最终第n层的最小花费是min（dp[n-2]，dp[n-1]]。
·由于每层的花费只和前两层有关系，所以每次DP选代的时候只需要2个临时变量即可。可以用这
种方式来优化辅助空间。
代码
package leetcode
//解法-DP
func minCostclimbingStairs(cost []int) int {
dp := make([]int, len(cost))
dp[0], dp[1] = cost[0], cost[1]
for i := 2; i  cur+cost[i-2] {
cur, last = last, cur+cost[i-2]
---
## Page 732
}else{
cur, last = last, last+cost[i-1]
return last
Z48.ShortestCompletingWord
题目
Find the minimum length word from a given dictionary words, which has all the letters from the
Here, for letters we ignore case. For example, *"p" on the TicensePlate still matches "p" on
the word.
It is guaranteed an answer exists. If there are multiple answers, return the one that occurs first in
the array.
The license plate might have the same letter occurring multiple times. For example, given a
1icensePlate of "pp", the word “pair" does not complete the 1icensePlate, but the word
"supper" does.
Example 1:
Input: licensePlate = “1s3 Pst", words = ["step", "steps", "stripe",
"stepple"]
Output: "steps"
Explanation: The smallest length word that contains the 1etters "s", "p", "s",
...pue
Note that the answer is not "step", because the letter “s" must occur in the
word twice.
Also note that we ignored case for the purposes of comparing whether a letter
exists in the word.
Example 2:
Input: 1icensePlate = "1s3 456", words = ["looks", “pest", "stew", "show"]
Output: “pest"
Explanation: There are 3 smallest length words that contains the letters "s".
we return the one that occurred first.
Note:
1. Ticenseplate will be a string with length in range [1, 7]
2. 1icensePlate will contain digits, spaces, or letters (uppercase or lowercase).
---
## Page 733
3. words will have a length in the range [10, 1000] .
4. Every words [i] will consist of lowercase letters, and have length in range [1, 15]
题目大意
如果单词列表（words）中的一个单词包含牌照（licensePlate）中所有的字母，那么我们称之为完整
词。在所有完整词中，最短的单词我们称之为最短完整词。
单词在匹配牌照中的字母时不区分大小写，比如牌照中的“P”依然可以匹配单词中的“p”字母。我们保
证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一
个。牌照中可能包含多个相同的字符，比如说：对于牌照“PP"，单词“pair”无法匹配，但是“supper”
可以匹配。
注意：
·牌照（licensePlate）的长度在区域[1，7]中。
·牌照（licensePlate）将会包含数字、空格、或者字母（大写和小写）。
●单词列表（words）长度在区间[10,1000]中。
●每一个单词words[]都是小写，并且长度在区间[1，15]中。
解题思路
·给出一个数组，要求找出能包含licensePlate字符串中所有字符的最短长度的字符串。如果最
短长度的字符串有多个，输出word下标小的那个。这一题也是简单题，不过有2个需要注意的
点，第一点，1icensePlate中可能包含Unicode任意的字符，所以要先把字母的字符筛选出
来，第二点是题目中保证了一定存在一个最短的单词能满足题意，并且忽略大小写。具体做法按照
题意模拟即可。
代码
package leetcode
import "unicode'
func shortestCompletingword(licensePlate string, words []string) string {
1p := genCnter(licensePlate)
var ret string
for _, w := range words {
if match(lp,w){
if len（w)]
for k, v := range 1p {
if m[k]  110 (2 set bits, 2 is prime)
7 -> 111 (3 set bits, 3 is prime)
9 -> 1001 (2 set bits , 2 is prime)
10->1010 (2 set bits , 2 is prime)
Example 2:
Input: L = 10, R = 15
Output:5
Explanation:
10 -> 1010 (2 set bits, 2 is prime)
11 -> 1011 (3 set bits, 3 is prime)
12 -> 1100 (2 set bits, 2 is prime)
13 -> 1101 (3 set bits, 3 is prime)
14 -> 1110 (3 set bits, 3 is prime)
15 -> 1111 (4 set bits, 4 is not prime)
Note:
1. L, R will be integers L <= R in the range [1, 10^6] 
2. R - L will be at most 10000.
题目大意
给定两个整数L和R，找到闭区间[LR]范围内，计算置位位数为质数的整数个数。（注意，计算置位
代表二进制表示中1的个数。例如21的二进制表示10101有3个计算置位。还有，1不是质数。）
注意：
●L, R是L<=R且在[1,106] 中的整数。
·R-L的最大值为10000。
解题思路
·题目给出[L，R]区间，在这个区间内的每个整数的二进制表示中1的个数如果是素数，那么最
终结果就加一，问最终结果是多少？这一题是一个组合题，判断一个数的二进制位有多少位1，是
第191题。题目中限定了区间最大不超过10^6，所以1的位数最大是19位，也就是说素数最大
就是19。那么素数可以有限枚举出来。最后按照题目的意思累积结果就可以了。
代码
package leetcode
---
## Page 740
import "math/bits"
func countPrimeSetBits(L int,R int) int {
counter := 0
for i := L; i <= R; i++ {
if isprime(bits.onesCount(uint(i))){
counter++
3
return counter
func isPrime(x int) boo1{
return x == 2 11 x == 3 11 × == 5 11 x == 7 11 x == 11 11 x == 13 11 x == 17
11 × == 19
763.PartitionLabels
题目
A string S of lowercase letters is given. We want to partition this string into as many parts as
possible so that each letter appears in at most one part, and return a list of integers representing
the size of these parts.
Example 1:
Input: S = "ababcbacadefegdehijhk1ij"