functionality. We elaborate this fully in Section 3.
3. Logical ID dissemination. When logical IDs for all the de-
vices have been resolved, i.e., the device-to-logical ID mapping table
is achieved, we need to disseminate this information to the whole net-
work. To this end, we introduce a Logical ID Dissemination Protocol
(LDP). In contrast to PCP, in LDP the mapping table is delivered top-
down from DAC manager to the leaf devices, layer by layer. Upon
receipt of such information, a device can easily index its logical ID
according to its device ID. A more detailed explanation of LDP to-
gether with CBP and PCP above is introduced in Section 5.
4. Malfunction detection and handling. DAC needs to automat-
ically detect malfunctions and pinpoint their locations. For this, we
2While most data center structures, like BCube [7], DCell [6], Fi-
conn [17] and Portland [8], use device based logical ID, there also
exist structures, like VL2 [9], that use port based logical ID. For
brevity, in this paper, DAC is introduced and evaluated as the device
based case. It can handle the port based scenario by simply consid-
ering each port as a single device and treating a device with multiple
ports as multiple logical devices.
Figure 2: The DAC system framework with four modules.
introduce a malfunction detection and handling module. In DAC, this
module interacts tightly with the device-to-logical ID mapping mod-
ule because the former one is only triggered by the latter. If there exist
malfunctions in Gp, our O2 engine quickly perceives this by noticing
that the physical topology graph Gp mismatches with the blueprint
graph Gb. Then, the malfunction detection module is immediately
invoked to detect those malfunctioning devices and report them to
network administrators. We describe this module in Section 4.
3. DEVICE-TO-LOGICAL ID MAPPING
In this section, we formally introduce how DAC performs the device-
to-logical ID mapping. We ﬁrst formulate the mapping using graph
theory. Then, we solve the problem via optimizations designed for
data center structures. Last, we discuss how to do the mapping for
data center expansion.
3.1 Problem Formulation and Solution Overview
As introduced, the challenge here is to do the device-to-logical
mapping such that this mapping reﬂects the topological relationship
of these devices. Considering we have the blueprint graph Gb =
(Vb; Eb) and the physical topology graph Gp = (Vp; Ep), to meet
the above requirement, we formulate the mapping problem as ﬁnding
a one-to-one mapping between nodes in Vp and Vb while preserving
the adjacencies in Ep and Eb. Interestingly, this is actually a variant
of the classical graph isomorphism (GI) problem [14].
DEFINITION 1. Two graphs G1 = (V1; E1) and G2 = (V2; E2)
∼
= G2, if there is a bijection f : V1 →
are isomorphic, denoted by G1
V2 such that {u; v} ∈ E1 if, and only if, {f (u); f (v)} ∈ E2, for all
u; v ∈ V1. Such a bijection f is called a graph isomorphism between
G1 and G2.
To the best of our knowledge, we are the ﬁrst one to introduce the
GI model to data center networks, thus solving the address autocon-
ﬁguration problem. After the problem formulation, the next step is
to solve the GI problem. In the past 20 years, many research efforts
have been made to determine whether the general GI problem is in P
or NP [14]. When the maximum node degree is bounded, polynomial
algorithm with nO(d2) time complexity is known [18], where n is the
number of nodes and d is the maximal node degree.
However, nO(d2) is too slow for our problem since data centers can
have millions of devices [6] and the maximal node degree can be more
than 100 [9]. To this end, we devise O2, a fast one-to-one mapping
engine. As shown in Figure 3, O2 starts with a base algorithm (i.e.,
O2_Base_Mapping()) for general graphs, and upon that we propose
an optimization algorithm (i.e., O2_Mapping()) using three heuris-
tics: candidate selection via SPLD, candidate ﬁltering via orbit and
selective splitting that are specially tailored for the attributes of data
center structures and our real address autoconﬁguration application.
In the following, we ﬁrst introduce some preliminaries together with
the base algorithm, and then introduce the optimization algorithm.
3.2 The Base Algorithm
Preliminaries. Given a graph G = (V; E), a partition of a vertex
set V , e.g., (cid:5) = ((cid:25)0; (cid:25)1;··· ; (cid:25)n−1), is a set of disjoint non-empty
Physical topology collectionDevice-to-logical ID mappingMalfunction detection and  handlingLogical ID dissemination41Figure 3: The O2 mapping engine.
subsets of V whose union is V . We call each subset (cid:25)i(0 ≤ i ≤
n − 1) a cell. In O2, the basic operations on partitions or cells are
“decompose” and “split”.
• Decompose. Given a node v, a cell (cid:25)i and a partition (cid:5) where
v ∈ (cid:25)i and (cid:25)i ∈ (cid:5), using v to decompose (cid:25)i means to replace (cid:25)i
with {v} and (cid:25)i \ v in partition (cid:5), where \ is set minus meaning
to remove node v from (cid:25)i.
• Split. Given two cells (cid:25)i; (cid:25)t ∈ (cid:5), using (cid:25)i to split (cid:25)t means to
do the following: ﬁrst, for each node v ∈ (cid:25)t, we calculate a value
k = (cid:17)(v; (cid:25)i) as the number of connections between node v and
nodes in (cid:25)i where (cid:17) is called connection function; then, we divide
(cid:25)t into smaller cells by grouping the nodes with the same k value
together to be a new cell. Moreover, we call (cid:25)i the inducing cell
and (cid:25)t the target cell. The target cell should be a non-singleton.
′
1=(cid:25)i
1=(cid:25)t
1=(cid:25)t
1 as (cid:25)t
, we replace (cid:25)i
2 respectively, (cid:25)t
1 \ v and (cid:25)i
1 with {v}; (cid:25)i
2 to split target cell pair (cid:25)t
A partition is equitable if no cell can be split by any other cell in
the partition. A partition is discrete if each cell of this partition is a
singleton (i.e., single element). Suppose we use an inducing cell pair
2 are divided
(cid:25)i
1=(cid:25)i
2 if for each value k = 0; 1; 2;··· , (cid:25)t
isomorphically by (cid:25)i
1 has
2 has to (cid:25)i
2.
the same number of nodes with k-connection to (cid:25)i
Note that the cells in a partition have their orders. We use paren-
thesis to represent a partition, and each cell is indexed by its order.
For example, (cid:5) = ((cid:25)0; (cid:25)1;··· ; (cid:25)n−1) means a partition (cid:5) with n
cells and the i-th cell is (cid:25)i−1.
In our mapping algorithm, decom-
position/split operation always works on the corresponding pair of
cells (i.e., two cells with the same order) in two partitions. Further-
more, during these operations, we place the split cells back to the par-
titions in corresponding orders. For example, decomposing (cid:25)i
1=(cid:25)i
′}; (cid:25)i
2 \ v
′
2
with v=v
,
and then place the split cells back to the partitions such that {v} and
{v
′} are in the same order, (cid:25)i
are in the same order.
In addition to the above terms, we further have two important terms
used in the optimization algorithm, which are SPLD and orbit.
• SPLD. SPLD is short for Shortest Path Length Distribution, the
SPLD of a node v is the distribution of the distances between this
node and all the other nodes in the graph.
• Orbit. An orbit is a subset of nodes in graph G such that two nodes
u and v are in the same orbit if there exist an automorphism3 of
G that maps u to v [19]. For example, in Gb of Figure 6, l1 to l2
are in the same orbit since there is an automorphism permutation
of Gb, which is (l2 l1 l3 l4 l5 l6 l7 l8), that maps l1 to l2.
Base algorithm. Figure 4 is a base mapping algorithm for general
graphs we summarize from previous literatures. It contains Decom-
position() and Reﬁnement(), and it repeatedly decomposes and reﬁnes
(or splits) (cid:5)p and (cid:5)b until either they both are discrete, or it termi-
nates in the middle ﬁnding that Gp and Gb are not isomorphic.
1 \ v and (cid:25)i
2 with {v
2 \ v
In each level of recursion, we ﬁrst check if the current partitions (cid:5)p
and (cid:5)b are discrete. If so, we return true (line 2) and get a one-to-one
mapping by mapping each singleton cell of (cid:5)p to the corresponding
singleton cell of (cid:5)b. Otherwise, we do Decomposition().
′
3An automorphism of a graph is a graph isomorphism with itself, i.e.,
a mapping from the vertices of the given graph G back to vertices of
G such that the resulting graph is isomorphic with G.
b
else
p; /* (cid:25)i
p is nonsingleton. */
if ((cid:5)p and (cid:5)b are both discrete)
((cid:5)p, (cid:5)b) = Decomposition((cid:5)p; (cid:25)i
if (Reﬁnement((cid:5)p; (cid:5)b) == true)
return true;
select a vertex v ∈ (cid:25)i
′ ∈ (cid:25)i
foreach vertex v
O2_Base_Mapping((cid:5)p, (cid:5)b) /* Initially, (cid:5)p = (Vp) and (cid:5)b = (Vb). */
1
2
3
4
5
6
7
8
9
10
11
12
Figure 4: Pseudocode of the generic algorithm for one-to-one
mapping (i.e., graph isomorphism). For clarity, the functions De-
composition() and Reﬁnement() are explained in the context.
if (O2_Base_Mapping((cid:5)p; (cid:5)b) == true)
else continue;
else continue;
return f alse;
p; v; (cid:5)b; (cid:25)i
return true;
b; v
′);
b
′
b, and then select a pair of nodes v ∈ (cid:25)i
p and (cid:25)i
In Decomposition(), we ﬁrst select a pair of corresponding nonsin-
′ ∈
p and v
b respectively (lines 4-6). The partitions
p \
p;··· ;{v}; (cid:25)i
b ). Immediately
gleton cells (cid:25)i
p and (cid:25)i
b to decompose (cid:25)i
(cid:25)i
(cid:5)p and (cid:5)b then become more concrete: (cid:5)p = ((cid:25)0
v;··· ; (cid:25)k
;··· ; (cid:25)k
after decomposition, we do Reﬁnement() on (cid:5)p and (cid:5)b (line 7).
p ) and (cid:5)b = ((cid:25)0
b ;··· ;{v
′}; (cid:25)i
\ v
In Reﬁnement(), we repeatedly try to use every newly born pair of
cells to split all other corresponding nonsingleton pairs of cells. For
each pair of cells that have been simultaneously divided, we check
whether the two cells are divided isomorphically or not. If not, then
Reﬁnement((cid:5)p, (cid:5)b) returns false. Otherwise, if each time the pair
of target cells are isomorphically divided, Reﬁnement((cid:5)p, (cid:5)b) will
continue until (cid:5)p and (cid:5)b are equitable and returns true.
b (line 11). If all the candidates in (cid:25)i
If Reﬁnement((cid:5)p, (cid:5)b) returns true, we go one step further of re-
cursion to work on new equitable partitions (line 8). Otherwise, it
means that v
cannot be mapped to v and we try the next candidate
in (cid:25)i
b fail to be mapped to v, we
must backtrack (line 10). Such recursion continues until either both
partitions become discrete, i.e., a one-to-one mapping is found (line
2), or we backtrack to root of the search tree, thus concluding that no
one-to-one mapping exists (line 12).
3.3 The Optimization Algorithm
′
Compared with general graphs, network topologies of data centers
have the following attributes: 1) They are sparse; 2) They are typi-
cally either highly symmetric like BCube [7] or highly asymmetric
like DCell [6]. In any case, for our address autoconﬁguration prob-
lem, the blueprint graph is available in advance which means we can
do some precomputation.
Based on these features, we apply graph theory to design an op-
timization algorithm with three heuristics: candidate selection via
SPLD, candidate ﬁltering via orbit and selective splitting to speedup
the device-to-logical ID mapping. Speciﬁcally, we introduce the ﬁrst
heuristic, and borrow the last two from [15] and [16] respectively,
based on their effectiveness for graphs derived for data centers. Our
experiments in Section 6.2 indicate that we need all these three heuris-
tics to solve our problem and any partial combination of them is slow
for some structures. Figure 5 is the optimization algorithm built on
the base algorithm. In the following, we explain the three heuristics
emphasizing the reasons why they are suitable for data center graphs.
1. Candidate selection via SPLD. We observe that nodes in data
centers have different roles such as switches and servers, and switches
in some data centers like FatTree can be further divided into ToR,
aggregation and core. Hence from this point of view, SPLD can be
helpful by itself to distinguish nodes of different roles. Furthermore,
SPLD can provide even signiﬁcant improvement for structures like
DCell which are very asymmetric. This is because the SPLDs of
different nodes in DCell are very different. To take advantage of this
O2Mapping EngineOutput:Device-to-logical ID Mapping TableInput: Gp and GbPre-computation Base algorithmOptimization algorithm42Figure 6: An example of mapping between Gp and Gb. White arrow is decomposition and dark arrow is reﬁnement.
if ((cid:5)p and (cid:5)b are both discrete)
/* pre-compute the SPLDs for all nodes in Gb; */
/* pre-compute all the orbits in Gb; */
O2_Mapping((cid:5)p, (cid:5)b) /* Initially, (cid:5)p = (Vp) and (cid:5)b = (Vb). */
1