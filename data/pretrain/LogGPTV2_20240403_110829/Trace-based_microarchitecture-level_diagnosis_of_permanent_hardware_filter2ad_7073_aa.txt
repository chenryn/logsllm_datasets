title:Trace-based microarchitecture-level diagnosis of permanent hardware
faults
author:Man-Lap Li and
Pradeep Ramachandran and
Swarup Kumar Sahoo and
Sarita V. Adve and
Vikram S. Adve and
Yuanyuan Zhou
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Trace-Based Microarchitecture-Level Diagnosis of Permanent Hardware Faults
Man-Lap Li, Pradeep Ramachandran, Swamp K. Sahoo, Sarita V. Adve, Vikram S. Adve, Yuanyuan Zhou
Department of Computer Science
University of Illinois at Urbana-Champaign
PI:EMAIL
Abstract
As devices continue to scale, future shipped hardware
will
likely fail due to in-the-jield hardware faults. As
traditional redundancy-based hardware reliability solutions
that tackle these faults will be too expensive to be broadly
deployable, recent research has focused on low-overhead
reliability solutions. One approach is to employ low(cid:173)
overhead (Cialways-on '') detection techniques that catch
high-level symptoms and pay a higher overhead for (rarely
invoked) diagnosis.
is detected,
This paper presents trace-based fault diagnosis, a diag(cid:173)
nosis strategy that identifies permanent faults in microar(cid:173)
chitectural units by analyzing the faulty core's instruc(cid:173)
tion trace. Once a fault
the faulty core is
rolled back and re-executes from a previous checkpoint,
generating a faulty instruction trace and recording the
microarchitecture-level resource usage. A diagnosis process
on another fault-free core then generates a fault-free trace
which it compares with the faulty trace to identify the
faulty unit. Our result shows that this approach successfully
diagnoses 98% of the faults studied and is a highly robust
and flexible way for diagnosing permanent faults.
1. Introduction
As we continue to scale CMOS, hardware reliability
threatens to be a major challenge to reaping the benefits
of Moore's law. Permanent faults due to phenomena such
as wear-out and infant mortality are growing concerns
for in-field processor reliability. The problem is pervasive
across the broad computing market;
there has
been much emphasis on solutions that incur limited area,
power, and performance overheads. Traditional manufactur(cid:173)
ing, device, and circuit level solutions often make worst(cid:173)
case, overly conservative assumptions. An alternative is
to use an aggressive design that risks faults but relies on
therefore,
This work is supported in part by the Gigascale Systems Research Center
(funded under FCRp, an SRC program), the National Science Foundation
under Grants NSF CCF 05-41383, CNS 07-20743, and NGS 04-06351,
an OpenSPARC Center of Excellence at
the University of Illinois at
Urbana-Champaign supported by Sun Microsystems, and an equipment
donation from AMD.
microarchitecture and higher system levels to detect these
faults on-line.
While traditional high-level detection involves core-level
redundancy, more recent techniques propose very low-cost
monitoring of high level symptoms of faults. For example,
Wang and Patel consider traps and mispredictions of high
confidence branches as symptoms of transient faults [19].
Racunas et al. dynamically predict the valid set of values
that an instruction will produce, and consider a departure
from this prediction as a symptom of a (transient) fault [14].
Dimitrov and Zhou monitor the variance between the two
most recent results produced by two dynamic instructions
of the same PC, and any large variance indicates a possible
soft error [5]. We have recently explored various symptoms
- fatal traps, hangs, high OS activity, and program based
invariant violations - as the mechanisms for detecting
permanent and transient faults in our SWAT system [6],
[15]. Meixner et al. describe a set of high-level detection
techniques for a simple processor [9]. Such high-level
detection mechanisms can be very effective because they
provide coverage for a wide range of fault sources and
faulty components.
Unlike transient faults, permanent faults require diagno(cid:173)
sis in addition to detection. To ensure continuous operation,
it is important to diagnose the source of the permanent fault
so it can be repaired or reconfigured; e.g., by disabling the
faulty component (such as a faulty core, ALU, or entries
in a buffer, queue, or cache), reducing the frequency of
operation of the component, or using software to replace
the faulty execution of a specific instruction.
While there has been significant recent work on high(cid:173)
level detection of in-field faults,
there is relatively little
work on diagnosing the source of a permanent fault de(cid:173)
tected in this way. The higher the level at which a fault
is detected, the longer the latency between the actual fault
activation and detection and the more difficult it is to diag(cid:173)
nose its root cause for repair. Therefore, to reap the benefits
of emerging low-cost high-level detection techniques, we
need to develop effective diagnosis techniques. This paper
concerns such a diagnosis framework.
When a fault is detected and identified to a particular
core, a simple option is to decommission that core [10].
However, that can be wasteful, especially since modern pro-
1-4244-2398-9/08/$20.00 ©2008 IEEE
22
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:28 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
cessors offer opportunities to reconfigure around individual
(failed) microarchitectural components. We therefore inves(cid:173)
tigate a technique to diagnose the fault to the granularity
of a microarchitectural component. Our technique, Trace
Based Fault Diagnosis (TBFD), is based on the following
observations.
• It is acceptable to incur high overhead for the diagno(cid:173)
sis procedure since it is invoked only in the infrequent
case when a fault is detected (in contrast, the detection
mechanism needs to be low overhead since it must be
on all the time).
• Many detection schemes today rely on a check(cid:173)
point/restart mechanism for recovery [1], [9], [14],
[19]. Our diagnosis exploits this mechanism to roll
the faulty core back to a pristine checkpoint. It replays
from the checkpoint to generate a detailed record of
the execution trace that activated the fault. This trace
can now be used as a starting point for instruction(cid:173)
based (functional) diagnosis.
• We exploit the trend towards multicore systems by
using a fault-free core to generate a fault-free trace
against which the replay on the faulty core can be
compared to reveal diagnostic information. Effectively,
we cheaply synthesize Dual-Modular Redundancy
(DMR) for diagnosis, in contrast to expensive always(cid:173)
on DMR traditionally used for detection.
Our overall scheme proceeds as follows. We assume a
single-threaded program that is executing on a modem out(cid:173)
of-order superscalar processor. The presence of the fault
in the core is detected through one of the many existing
detection mechanisms [6], [9], [14], [19]. For this work, we
use the low-cost detection methods in the SWAT system
to detect faults within the processor core [6]. Detection
of a permanent fault triggers the firmware-driven TBFD
algorithm on a fault-free core. TBFD rolls the faulty core
back to a pristine checkpoint and replays the execution on
it, while recording detailed information such as microar(cid:173)
chitectural resource usage for all instructions. TBFD also
downloads the checkpoint from the faulty core to the fault(cid:173)
free core, and plays a "golden" execution on the fault-free
core. It compares the traces from the fault-free and faulty
cores and systematically analyzes any points of divergence
to accurately diagnose the faulty microarchitectural struc(cid:173)
ture.
We
evaluate
injection experiments
effectiveness
fault
of TBFD using
the
microarchitecture-Ievel
in
a full-system simulation of an out-of-order processor. We
apply TBFD to all the faults that are detected using the
SWAT symptom-based fault detectors [6]. TBFD correctly
diagnosed 89% of the detected faults to a single non-array
structure (e.g., one particular ALU) or a single entry in
an array structure (e.g., a particular register in the register
file). Of the remaining detected faults, TBFD is able to
correctly diagnose almost all of them to the correct array
structure (as opposed to a specific entry in the array).
The array entry could be narrowed down using traditional
BIST-like techniques. With the above faults included, the
accuracy of TBFD is 98%. Overall, TBFD presents a
flexible and robust method for in-field microarchitecture
level fault diagnosis.
2. Related Work
Addressing in-field permanent faults at higher system
levels is a relatively new area with little work on high(cid:173)
level on-line diagnosis. The most related prior work is by
Bower et al. [2], proposed in the context of the DIVA
architecture [1]. Their scheme associates a counter for each
reconfigurable (repairable) microarchitectural resource. As
instructions flow through the pipeline, it keeps track of the
microarchitectural resources used (e.g., which ALU, etc.)
in a bit vector which is carried along through the pipeline.
When a mismatch between the main processor and the
DIVA checker is detected,
the counter corresponding to
each resource touched by the mismatching instruction is
incremented. Once a resource counter reaches a certain
threshold value, it is declared faulty. Our scheme differs
from Bower et. al.'s scheme in the following ways. First, we
incur diagnosis related overhead only in the infrequent case
when a fault is detected. Their scheme, however, contains
always-on monitors that present overheads in power and
performance even in the common fault-free operation. Sec(cid:173)
ond, although their method works well for faults on the data
path, it is not well-suited to handle faults in structures that
establish or rely on logical to physical name translations.
For example, a fault in a register alias table (RAT) entry or
physical register number in a reorder buffer entry (ROB)
is not handled by their technique [2]. TBFD diagnoses the
faulty microarchitectural structure even in these scenarios.
Periodic low-level (conventional) tests to detect faults
at a finer granularity, and using the signature of the test
output to diagnose the fault source have also been pro(cid:173)
posed [4], [16]. Our diagnosis framework does not require
the overhead (in performance, power, or increased wear(cid:173)
out) of periodic testing. Our overhead is incurred only in
the infrequent case when a fault is actually detected through
very low-cost detection techniques (e.g., [6]). Further, the
coverage of the test-based approaches is limited by the fault
models used to generate the test vectors. In contrast, our
"test vector" is the program for which the fault was detected
and is therefore known to excite the fault. Nevertheless,
for parts of the chip where our approach does not provide
sufficient diagnosis, conventional test-based schemes may
be used to complement the trace-based diagnosis scheme
and to improve its accuracy.
Of late,
there has been much interest
in logic self(cid:173)
test. Specifically, recent projects have explored instruction(cid:173)
sequence based test
(also referred to as functional or
embedded self-test) [3], [12], [20] where the processor
generates its own (pre-specified) set of instructions for
1-4244-2398-9/08/$20.00 ©2008 IEEE
23
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:28 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
not recur in the other core, a permanent fault is diagnosed
in the original symptom-causing core. 1
3.2. Generating the Detailed Faulty Trace
To generate the faulty trace, TBFD rolls the faulty core
back to the previous checkpoint and replays the execution
for a predefined number of instructions. It records a trace
of the execution with the following information for each
retired instruction:
Decode: Decoded opcode, logical source and destination
register identifiers.
Data values: Values read from the source registers and
written into the destination register. For loads, stores, and
branches, it also records the virtual address.
Microarchitectural resources used by the instruction: For
example, the source and destination physical register num(cid:173)
bers,
the specific functional unit used, etc. The specific
information recorded depends on the reconfigurable units
supported in the processor and consequent granularity of
diagnosis required.
Section 3.5 describes hardware support for obtaining and
recording the above information.
3.3. Fault-Free Execution and Test Trace
Next, the fault-free core is loaded with the checkpoint
of the faulty core and the execution is replayed. For each
instruction in this execution, the TBFD firmware compares
the decode and value fields from the corresponding instruc(cid:173)
tion in the faulty trace. Any mismatches in these fields
cause the firmware to mark the corresponding instruction
in the faulty trace as mismatched and record the cause
for the mismatch. Additionally, the firmware synchronizes
(corrupts) the fault-free core's state to that of the faulty
core. This allows the fault-free core to continue executing
a path similar to the faulty core until the next activation of
the fault.
It is also possible that the corresponding instruction on
the faulty core was hung at the head of the reorder buffer
and never retired because it waits for its source operand(s)
indefinitely. The firmware marks such an instruction in the
faulty trace as hung. We assume hooks are available to
extract information of the hung instruction even though it
does not retire. When a hung instruction is encountered,
the analysis algorithm diagnoses the source of the fault by
examining the test trace (Section 3.4). If the algorithm does
not terminate after the analysis, both the faulty core and the
fault-free core are rolled back to generate a new test trace
for further analysis.
We refer to mismatched and hung instructions collec(cid:173)
tively as misbehaved instructions. We refer to the faulty
trace enhanced with the information about misbehaved
instructions as the test trace.
1. If the symptom occurs in both cores, a software fault is diagnosed
and handed over to the software layer.
Figure 1. TBFD overview.
testing. The FRITS tool in particular has been extensively
used for testing real x86 and Itanium processors [12].
In our diagnosis framework, such pre-specified instruction
traces are not generated because the program and inputs
for the execution of interest is already known. However,
such mechanisms that generate pre-specified instruction
sequences can aid in refining the resolution of diagnosis in
the cases that the existing program inputs fail in providing
sufficient information for accurate diagnosis. These form
interesting future studies, but are beyond the scope of this
paper.
3. Trace-Based Fault Diagnosis
This section describes the different components of our
trace-based fault diagnosis algorithm (TBFD) and its im(cid:173)
plementation. On detection of a fault in a core, TBFD is
invoked in the firmware of a fault-free core. TBFD must
first determine whether it is a permanent fault (Section 3.1).
It then constructs a detailed trace of the faulty execution
on the faulty core (Section 3.2). This is followed by the
generation of a corresponding fault-free execution on the
fault-free core, and a resulting test trace that incorporates
information from both the faulty and fault-free executions
(Section 3.3). TBFD then analyses the test trace to finally
diagnose the faulty structure (Section 3.4). Section 3.5
provides details on the implementation for TBFD. Sec(cid:173)
tion 3.6 gives a possible alternative strategy for TBFD