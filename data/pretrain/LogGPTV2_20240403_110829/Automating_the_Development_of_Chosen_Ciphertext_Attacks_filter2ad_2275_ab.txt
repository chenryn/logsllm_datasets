tion. To realize this, we rely heavily on theory solvers,
together with some novel optimization techniques.
Attack intuition. We now explain the full attack in greater
detail. To provide a clear exposition, we will begin this
discussion by discussing a simpliﬁed and inefﬁcient pre-
cursor algorithm that we will later optimize to produce
our main result. Our discussion below will make a signif-
icant simplifying assumption that we will later remove:
namely, that Maulplain will output exactly one plaintext
for any given input. This assumption is compatible with
common encryption schemes such as stream ciphers, but
will not be valid for other schemes where malleation can
produce key-dependent effects following decryption.
We now describe the basic steps of our ﬁrst attack algo-
rithm.
Step 0: Initialization. At the beginning of the attack, our
attack algorithm receives as input a target ciphertext C∗,
as well as a machine-readable description of the func-
tions F and Maulplain. We require that these descriptions
be provided in the form of a constraint formula that a
theory solver can reason over. To initialize the attack
procedure, the user may also provide an initial constraint
predicate G0 : {0,1}n → {0,1} that expresses all known
constraints over the value of M∗.2 (If we have no a priori
knowledge about the distribution of M∗, we can set this
initial formula G0 to be trivial).
Beginning with i = 1, the attack now proceeds to iterate
over the following two steps:
Step 1: Identify an experiment. Let Gi−1 be the current
set of known constraints on M∗. In this ﬁrst step, we
employ the solver to identify a malleation instruction
string S as well as a pair of distinct plaintexts M0,M1
that each satisfy the constraints of Gi−1. Our goal is to
identify an assignment for (S,M0,M1) that induces the
following speciﬁc properties on M0, M1: namely, that
each message in the pair, when mauled using S and then
evaluated using the format checking function, results in
a distinct output from F. Expressed more concretely, we
require the solver to identify an assignment that satisﬁes
the following constraint formula:
Gi−1(M0) = Gi−1(M1) = 1 ∧
∀b ∈ {0,1} : F(Maulplain(Mb,S)) = b
(1)
2Here n represents an upper bound on the length of the plaintext
M∗.
If the solver is unable to derive a satisfying assignment
to this formula, we conclude the attack and proceed to
Step (3). Otherwise we extract a concrete satisfying as-
signment for S, assign this value to S, and proceed to the
next step.
Step 2: Query the oracle; update the constraints. Given
a concrete malleation string S, we now apply the cipher-
text malleation function to compute an experiment ci-
phertext C ← Maulciph(C∗,S), and submit C to the de-
cryption oracle. When the oracle produces a concrete
result r ∈ {0,1}, we compute an updated constraint for-
mula Gi such that for each input M, it holds that:
Gi(M) ← (Gi−1(M) ∧ F(Maulplain(M,S)) = r)
If possible, we can now ask the solver to simplify the
formula Gi by eliminating redundant constraints in the
underlying representation. We now set i ← i + 1 and
return to Step (1).
Step 3: Attack completion. The attack concludes when
the solver is unable to identify a satisfying assignment
in Step (1). In the ideal case, this occurs because the
constraint system Gi−1 admits only one possible candi-
date plaintext, M∗: when this happens, we can employ
the solver to directly recover M∗ and complete the attack.
However, the solver may also fail to ﬁnd an assignment
because no further productive experiment can be gener-
ated, or simply because ﬁnding a solution proves com-
putationally intractable. When the solver conclusively
rules out a solution at iteration i = 1 (i.e., prior to issuing
any decryption queries) this can be taken as an indication
that a viable attack is not practical using our techniques.
Indeed, this feature of our work can be used to rule out
the exploitability of certain systems, even without access
to a decryption oracle. In other cases, the format oracle
may admit only partial recovery of M∗. If this occurs, we
conclude the attack by applying the solver to the ﬁnal
constraint formula Gi−1 to extract a human-readable de-
scription of the remaining candidate space (e.g., the bits
of M∗ we are able to uniquely recover).
Remark on efﬁciency. A key feature of the attack de-
scribed above is that it is guaranteed to make progress at
each round in which the solver is able to ﬁnd a satisfying
assignment to Equation (1). This is fundamental to the
constraint system we construct: our approach forces the
solver to ensure that each malleation string S implicitly
partitions the candidate message set into a pair (M0,M1),
such that malleation of messages in either subset by S
will produce distinct outputs from the format checking
function F. As a consequence of this, for any possible
result from the real-world decryption oracle, the updated
1824    29th USENIX Security Symposium
USENIX Association
that both M0, M1 are as large as possible. Put slightly
differently, we wish to ﬁnd an experiment S that max-
imizes the cardinality of the smaller subset in the pair.
The result of this optimization is a greedy algorithm that
will seek to eliminate the largest number of candidates
with each query.
Technical challenge: model count optimization.
While our new formulation is conceptually simple, actu-
ally realizing it involves overcoming serious limitations
in current theory solvers. This is due to the fact that,
while several production solvers provide optimization
capabilities [49], these heuristics optimize for the value
of speciﬁc variables. Our requirement is subtly different:
we wish to solve for a candidate S that maximizes the
number of satisfying solutions for the variables M0,M1
in Equation (1).3
Unfortunately, this problem is both theoretically and
practically challenging. Indeed, merely counting the num-
ber of satisfying assignments to a constraint formula is
known to be asymptotically harder than SAT [69, 70],
and practical counting algorithms solutions [14, 20] tend
to perform poorly when the combinatorial space is large
and the satisfying assignments are sparsely distributed
throughout the space, a condition that is likely in our
setting. The speciﬁc optimization problem our tech-
niques require proves to be even harder. Indeed, only
recently was such a problem formalized, under the name
Max#SAT [35].
Approximating Max#SAT. While an exact solution to
Max#SAT is NPPP-complete [35, 69], several works have
explored approximate solutions to this and related count-
ing problems [25, 35, 37, 65]. One powerful class of
approximate counting techniques, inspired by the the-
oretical work of Valiant and Vazirani [71] and Stock-
meyer [67], uses a SAT oracle as follows: given a con-
straint formula F over some bitvector T , add to F a
series of s random parity constraints, each computed
over the bits of T . For j = 1 to s, the jth parity con-
straint can be viewed as requiring that Hj(T ) = 1 where
Hj : {0,1}|T| → {0,1} is a universal hash function. In-
tuitively, each additional constraint reduces the number
of satisfying assignments approximately by half, inde-
pendently of the underlying distribution of valid solu-
tions. The implication is as follows: if a satisfying as-
sigment to the enhanced formula exists, we should be
convinced (probabilistically) that the original formula
3Some experimental SMT implementations provide logic for rea-
soning about the cardinality of small sets, these strategies scale poorly
to the large sets we need to reason about in practical format oracle
attacks.
Figure 2: Left: illustration of a plaintext candidate space
deﬁned by Gi−1, highlighting the two subsets M0, M1
induced by a speciﬁc malleation string S. Right: the can-
didate space deﬁned by Gi, in which many candidates
have been eliminated following an oracle response b = 1.
constraint formula Gi must eliminate at least one plaintext
candidate that satisﬁed the previous constraints Gi−1.
While this property ensures progress, it does not imply
that the resulting attack will be efﬁcient. In some cases,
the addition of a new constraint will fortuitously rule out
a large number of candidate plaintexts. In other cases, it
might only eliminate a single candidate. As a result, there
exist worst-case attack scenarios where the algorithm re-
quires as many queries as there are candidates for M∗,
making the approach completely unworkable for prac-
tical message sizes. Addressing this efﬁciency problem
requires us to extend our approach.
Improving query proﬁtability. We can deﬁne the prof-
itability ψ(Gi−1,Gi) of an experimental query by the
number of plaintext candidates that are “ruled out” once
an experiment has been executed and the constraint for-
mula updated. In other words, this value is deﬁned as the
number of plaintext candidates that satisfy Gi−1 but do
not satisfy Gi. The main limitation of our ﬁrst attack strat-
egy is that it does not seek to optimize each experiment
to maximize query proﬁtability.
To address this concern, let us consider a more general
description of our attack strategy, which we illustrate in
Figure 2. At the ith iteration, we wish to identify a mal-
leation string S that deﬁnes two disjoint subsets M0, M1
of the current candidate plaintext space, such that for any
concrete oracle result r ∈ {0,1} and ∀M ∈ Mr it holds
that F(Maulplain(M,S)) = r. In this description, any con-
crete decryption oracle result must “rule out” (at a mini-
mum) every plaintext contained in the subset M1−r. This
sets ψ(Gi−1,Gi) equal to the cardinality of M1−r.
To increase the proﬁtability of a given query, it is there-
fore necessary to maximize the size of M1−r. Of course,
since we do not know the value r prior to issuing a decryp-
tion oracle query, the obvious strategy is to ﬁnd S such
USENIX Association
29th USENIX Security Symposium    1825
M0AAAB8XicbVBNS8NAEJ34WetX1aOXxSJ4KkkV9Fj04kWoYD+wDWWznbRLN5uwuxFK6L/w4kERr/4bb/4bt20O2vpg4PHeDDPzgkRwbVz321lZXVvf2CxsFbd3dvf2SweHTR2nimGDxSJW7YBqFFxiw3AjsJ0opFEgsBWMbqZ+6wmV5rF8MOME/YgOJA85o8ZKj1mXUUHuJj23Vyq7FXcGsky8nJQhR71X+ur2Y5ZGKA0TVOuO5ybGz6gynAmcFLupxoSyER1gx1JJI9R+Nrt4Qk6t0idhrGxJQ2bq74mMRlqPo8B2RtQM9aI3Ff/zOqkJr/yMyyQ1KNl8UZgKYmIyfZ/0uUJmxNgSyhS3txI2pIoyY0Mq2hC8xZeXSbNa8c4r1fuLcu06j6MAx3ACZ+DBJdTgFurQAAYSnuEV3hztvDjvzse8dcXJZ47gD5zPH91XkGI=M⇤AAAB6nicbVDLSgNBEOz1GeMr6tHLYBDEQ9iNgh6DXrwIEc0DkjXMTibJkNnZZaZXCEs+wYsHRbz6Rd78GyfJHjSxoKGo6qa7K4ilMOi6387S8srq2npuI7+5tb2zW9jbr5so0YzXWCQj3Qyo4VIoXkOBkjdjzWkYSN4IhtcTv/HEtRGResBRzP2Q9pXoCUbRSve3j6edQtEtuVOQReJlpAgZqp3CV7sbsSTkCpmkxrQ8N0Y/pRoFk3ycbyeGx5QNaZ+3LFU05MZPp6eOybFVuqQXaVsKyVT9PZHS0JhRGNjOkOLAzHsT8T+vlWDv0k+FihPkis0W9RJJMCKTv0lXaM5QjiyhTAt7K2EDqilDm07ehuDNv7xI6uWSd1Yq350XK1dZHDk4hCM4AQ8uoAI3UIUaMOjDM7zCmyOdF+fd+Zi1LjnZzAH8gfP5A79MjXE=M1AAAB8XicbVBNS8NAEJ34WetX1aOXxSJ4KkkV9Fj04kWoYD+wDWWznbRLN5uwuxFK6L/w4kERr/4bb/4bt20O2vpg4PHeDDPzgkRwbVz321lZXVvf2CxsFbd3dvf2SweHTR2nimGDxSJW7YBqFFxiw3AjsJ0opFEgsBWMbqZ+6wmV5rF8MOME/YgOJA85o8ZKj1mXUUHuJj2vVyq7FXcGsky8nJQhR71X+ur2Y5ZGKA0TVOuO5ybGz6gynAmcFLupxoSyER1gx1JJI9R+Nrt4Qk6t0idhrGxJQ2bq74mMRlqPo8B2RtQM9aI3Ff/zOqkJr/yMyyQ1KNl8UZgKYmIyfZ/0uUJmxNgSyhS3txI2pIoyY0Mq2hC8xZeXSbNa8c4r1fuLcu06j6MAx3ACZ+DBJdTgFurQAAYSnuEV3hztvDjvzse8dcXJZ47gD5zPH97bkGM=M0AAAB8XicbVBNS8NAEJ34WetX1aOXxSJ4KkkV9Fj04kWoYD+wDWWznbRLN5uwuxFK6L/w4kERr/4bb/4bt20O2vpg4PHeDDPzgkRwbVz321lZXVvf2CxsFbd3dvf2SweHTR2nimGDxSJW7YBqFFxiw3AjsJ0opFEgsBWMbqZ+6wmV5rF8MOME/YgOJA85o8ZKj1mXUUHuJj23Vyq7FXcGsky8nJQhR71X+ur2Y5ZGKA0TVOuO5ybGz6gynAmcFLupxoSyER1gx1JJI9R+Nrt4Qk6t0idhrGxJQ2bq74mMRlqPo8B2RtQM9aI3Ff/zOqkJr/yMyyQ1KNl8UZgKYmIyfZ/0uUJmxNgSyhS3txI2pIoyY0Mq2hC8xZeXSbNa8c4r1fuLcu06j6MAx3ACZ+DBJdTgFurQAAYSnuEV3hztvDjvzse8dcXJZ47gD5zPH91XkGI=M⇤AAAB6nicbVDLSgNBEOz1GeMr6tHLYBDEQ9iNgh6DXrwIEc0DkjXMTibJkNnZZaZXCEs+wYsHRbz6Rd78GyfJHjSxoKGo6qa7K4ilMOi6387S8srq2npuI7+5tb2zW9jbr5so0YzXWCQj3Qyo4VIoXkOBkjdjzWkYSN4IhtcTv/HEtRGResBRzP2Q9pXoCUbRSve3j6edQtEtuVOQReJlpAgZqp3CV7sbsSTkCpmkxrQ8N0Y/pRoFk3ycbyeGx5QNaZ+3LFU05MZPp6eOybFVuqQXaVsKyVT9PZHS0JhRGNjOkOLAzHsT8T+vlWDv0k+FihPkis0W9RJJMCKTv0lXaM5QjiyhTAt7K2EDqilDm07ehuDNv7xI6uWSd1Yq350XK1dZHDk4hCM4AQ8uoAI3UIUaMOjDM7zCmyOdF+fd+Zi1LjnZzAH8gfP5A79MjXE=Gi 1AAAB7nicbVBNS8NAEJ34WetX1aOXxSJ4sSRV0GPRgx4r2A9oQ9lsN+3SzSbsToQS+iO8eFDEq7/Hm//GbZuDtj4YeLw3w8y8IJHCoOt+Oyura+sbm4Wt4vbO7t5+6eCwaeJUM95gsYx1O6CGS6F4AwVK3k40p1EgeSsY3U791hPXRsTqEccJ9yM6UCIUjKKVWne9TJx7k16p7FbcGcgy8XJShhz1Xumr249ZGnGFTFJjOp6boJ9RjYJJPil2U8MTykZ0wDuWKhpx42ezcyfk1Cp9EsbalkIyU39PZDQyZhwFtjOiODSL3lT8z+ukGF77mVBJilyx+aIwlQRjMv2d9IXmDOXYEsq0sLcSNqSaMrQJFW0I3uLLy6RZrXgXlerDZbl2k8dRgGM4gTPw4ApqcA91aACDETzDK7w5ifPivDsf89YVJ585gj9wPn8At6SPKQ==GiAAAB7HicbVBNS8NAEJ3Ur1q/qh69LBbBU0mqoMeiBz1WMG2hDWWznbZLN5uwuxFK6G/w4kERr/4gb/4bt20O2vpg4PHeDDPzwkRwbVz32ymsrW9sbhW3Szu7e/sH5cOjpo5TxdBnsYhVO6QaBZfoG24EthOFNAoFtsLx7cxvPaHSPJaPZpJgENGh5APOqLGSf9fL+LRXrrhVdw6ySrycVCBHo1f+6vZjlkYoDRNU647nJibIqDKcCZyWuqnGhLIxHWLHUkkj1EE2P3ZKzqzSJ4NY2ZKGzNXfExmNtJ5Eoe2MqBnpZW8m/ud1UjO4DjIuk9SgZItFg1QQE5PZ56TPFTIjJpZQpri9lbARVZQZm0/JhuAtv7xKmrWqd1GtPVxW6jd5HEU4gVM4Bw+uoA730AAfGHB4hld4c6Tz4rw7H4vWgpPPHMMfOJ8/26SOtw==is likely to possess on the order of 2s satisfying assign-
ments. Subsequently, researchers in the model counting
community showed that with some reﬁnement, these ap-
proximate counting strategies can be used to approximate
Max#SAT [35], although with an efﬁciency that is sub-
stantially below what we require for an efﬁcient attack.
To apply this technique efﬁciently to our attack, we
develop a custom count-optimization procedure, and ap-
ply it to the attack strategy given in the previous section.
At the start of each iteration, we begin by conjecturing a
candidate set size 2s for some non-negative integer s, and
then we query the solver for a solution to (S,M0,M1) in
which approximately 2s solutions can be found for each
of the abstract bitvectors M0,M1. This involves modify-
ing the equation of Step (1) by adding s random parity
constraints to each of the abstract representations of M0
and M1. We now repeatedly query the solver on variants
of this query, with increasing (resp. decreasing) values
of s, until we have identiﬁed the maximum value of s
that results in a satisfying assignment.4 For a sufﬁciently
high value of s, this approach effectively eliminates many
“unproﬁtable” malleation string candidates and thus sig-
niﬁcantly improves the efﬁciency of the attack.
The main weakness of this approach stems from the
probabilistic nature of the approximation algorithm. Even
when 2s satisfying assignments exist for M0,M1, the
solver may deem the extended formula unsatisﬁable with
relatively high probability. In our approach, this false-
negative will cause the algorithm to reduce the size of s,
potentially resulting in the selection of a less-proﬁtable
experiment S. Following Gomes et al. [37], we are able
to substantially improve our certainty by conducting t
trials within each query, accepting iff at least (cid:100)( 1
2 + δ)t(cid:101)
trials are satisﬁed, where δ is an adjustable tolerance
parameter.
Putting it all together. The presentation above is in-
tended to provide the reader with a simpliﬁed description
of our techniques. However, this discussion does not con-
vey most challenging aspect of our work: namely, the
difﬁculty of implementing our techniques and making
them practical, particularly within the limitations of ex-
isting theory solvers. Achieving the experimental results
we present in this work represents the result of months
of software engineering effort and manual algorithm op-
timization. We discuss these challenges more deeply in
§4.
Using our techniques we were able to re-discover both
well known and entirely novel chosen ciphertext attacks,
4Note that s = 0 represents the original constraint formula, and so a
failure to ﬁnd a satisfying assignment at this size triggers the conclusion
of the attack.
all at a query efﬁciency nearly identical to the (optimal
in expectation) human-implemented attacks. Our experi-
ments not only validate the techniques we describe in this
work, but they also illustrate several possible avenues for
further optimization, both in our algorithms and in the
underlying SMT/SAT solver packages. Our hope is that
these results will inspire further advances in the theory
solving community.
2 Preliminaries
2.1 Encryption Schemes and Malleability
Our attacks operate assume that the target system is us-
ing a malleable symmetric encryption scheme. We now
provide deﬁnitions for these terms.
Deﬁnition 1 (Symmetric encryption) A
symmet-
ric encryption scheme Π is a tuple of algorithms
(KeyGen, Encrypt, Decrypt) where KeyGen(1λ) gen-
erates a key, the probabilistic algorithm EncryptK(M)
encrypts a plaintext M under key K to produce a cipher-
text C, and the deterministic algorithm DecryptK(C)
decrypts C to produce a plaintext or the distinguished
error symbol ⊥. We use M to denote the set of valid
plaintexts accepted by a scheme, and C to denote the set
of valid ciphertexts.
2.1.1 Malleation Functions
The description of malleation functions is given in the
form of two functions. The ﬁrst takes as input a cipher-
text along with an opaque data structure that we refer to
as a malleation instruction string, and outputs a mauled
ciphertext. The second function performs the analogous
function on a plaintext. We require that the following
intuitive relationship hold between these functions: given
a plaintext M and an instruction string, the plaintext mal-
leation function should “predict” the effect of mauling
(and subsequently decrypting) a ciphertext that encrypts
M.
ciph, MaulΠ
Deﬁnition 2 (Malleation functions) The malleation
functions for a symmetric encryption scheme Π
comprise a pair of efﬁciently-computable functions
(MaulΠ
plain) with the following properties. Let
M, C be the plaintext (resp. ciphertext) space of Π. The