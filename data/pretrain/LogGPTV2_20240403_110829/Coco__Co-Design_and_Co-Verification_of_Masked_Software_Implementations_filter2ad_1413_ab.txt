model in which a dth-order attacker on software implementa-
tions can observe up to d intermediate values of the computa-
tion (+ transition effects). However, this implicitly excludes
the attacker from observing more than two intermediate val-
ues at one probing location, even though CPU registers very
likely contain multiple intermediate values throughout the
software execution. Even though the essence of higher-order
attacks is captured, it fails to represent that observing combi-
nations of more than two intermediates is possible in practice.
Time-Constrained Probing Model We introduce the
Time-Constrained Probing Model to model the capabilities of
an attacker who performs power analysis attacks of a given
order. The time-constrained probing model constrains the clas-
sical probing model such that the complexity of higher-order
attacks is represented. In addition, it captures hardware effects
and leads to situations where an attacker can observe more
than two intermediate values at one probing location. Hard-
ware effects, like glitches, occur frequently in practice and
have been shown to be exploitable in the context of masked
implementations [18, 33, 36].
In the time-constrained probing model, an attacker pos-
sesses d probes. Each probe can be used to measure informa-
tion in one speciﬁc clock cycle and at one speciﬁc location.
The attacker can distribute the d probes spatially and tem-
porally. Hence, the attacker can perform d measurements at
different locations in the same clock cycle, or probes at the
same location in different clock cycles, or a mix of both. A
masked software implementation is dth-order secure in the
time-constrained probing model if an attacker cannot com-
bine the recorded information to learn anything about native
values.
2.4 Co-Veriﬁcation Methodology
While REBECCA is limited to the veriﬁcation of pipelined
masked hardware circuits, COCO aims at the co-veriﬁcation
of software and hardware, i.e., verifying the execution of
masked software implementations directly on a processor’s
netlist. Consequently, COCO requires some knowledge about
how concrete programs inﬂuence the data/control ﬂow within
the CPU. We then need to extend REBECCA such that the
veriﬁcation method is aware of the software execution.
In the following, we ﬁrst brieﬂy outline the workﬂow of
COCO, broken into 4 steps. Steps 1-2 give intuition into how
the execution of software can be combined with an otherwise
purely hardware-focused veriﬁcation method. Steps 3-4 then
describe COCO’s veriﬁcation method. The remainder of this
section describes Step 3 in more detail.
Step 1 We use Verilator [47] to execute a masked assembly
implementation on a given CPU hardware design via a
cycle-accurate simulation. From the simulation, we extract a
so-called execution trace which contains concrete values for
all CPU control signals in all execution cycles. We require
implementations with a constant control ﬂow using Boolean
masking and therefore, these control signals are the same
for all inputs to that software implementation.
Step 2 We annotate which registers or memory locations
hold the shares of a native value at the start of the software
execution. Additionally, we need to specify the masking
order of the software implementation and the number of
cycles that should be veriﬁed.
Step 3 We capture the correlations of each logic gate and
register in the processor by constructing correlation sets
throughout each clock cycle. For this purpose, we improve
and extend the set of stable and transient propagation rules
used by REBECCA. Most importantly, we reformulate them
such that they can be made execution-aware. Knowing the
exact values of control signals at each point during the exe-
cution allows COCO to simplify the correlation sets under
certain circumstances. In turn, we obtain a tighter over-
approximation and reduce erroneous leakage reports.
Step 4 We encode the resulting correlation sets as a proposi-
tional Boolean formula and use a SAT-solver to check for
leakage. In case the implementation is insecure, the exact
gate in the netlist and execution cycle is reported. Tracking
correlation sets naively is infeasible since their size grows
exponentially with the number of secret shares and masks.
Our encoding includes the circuit structure, correlation prop-
agation rules and security constraints. Although REBECCA
already applies this approach, their SAT encoding is incom-
patible with our execution-aware propagation rules and not
efﬁcient enough for circuits as large as processors.
1472    30th USENIX Security Symposium
USENIX Association
Table 1: Deﬁnition of the stable (St
x ) corre-
lation sets of gate x in cycle t. We use the operator ⊗ as the
element-wise multiplication of two correlation sets.
x) and transient (T t
Gate type of x
Constant
Negation
Register
XOR
XNOR
AND
OR
Multiplexer
x = ¬a
x ⇐R a
x = a⊕ b
x = a⊕ b
x = a∧ b
x = a∨ b
x = c ? a : b
Deﬁnition of St
x
{1}
St
a
St−1
a
a ⊗ St
St
(cid:98)St
a ⊗(cid:98)St
(cid:98)St
a ∪ St
c ⊗ (St
b)
b
b
Deﬁnition of T t
x
b
{1}
T t
a
a
a ⊗(cid:98)St
(cid:98)St−1
(cid:98)T t
a ⊗(cid:98)T t
a ⊗(cid:98)T t
(cid:98)T t
(cid:98)T t
c ⊗(cid:98)T t
a ⊗(cid:98)T t
b
b
x = {1} ∪ St
correlation set(cid:98)St
Execution-Aware Stable Correlation Sets
In COCO, we
apply an over-approximation of the Fourier expansions of
Boolean functions by building execution-aware correlation
sets St
x which track the non-zero correlation terms of gate x in
cycle t. For reasons of simplicity, we also deﬁne the biased
x. In Step 2 of the veriﬁcation pro-
cess, we decide on the initial correlation terms by providing
labels for registers and memory locations. For example, if we
label register x as the ﬁrst share s1 of the secret s, then its
x = {s1}. Correlation terms of con-
initial correlation set is S0
secutive gates are derived by propagating these labels through
the whole circuit, using the deﬁnitions of stable correlation
sets, until the initial registers are reached again. The register’s
labels are updated accordingly and the propagation restarts.
This process is repeated for every cycle, until the execution
ﬁnishes.
Table 1 shows the deﬁnitions of stable correlation sets
St
x used by COCO. Constants only correlate to the constant
term 1. Negations only change the sign of the coefﬁcients in
the Fourier expansion, so the correlation set stays the same.
Registers inherit the stable correlation set their input had at the
end of the last cycle. The stable correlation set of linear gates
(XOR, XNOR) is computed as the element-wise multiplication
(⊗) of the correlation set of the gate inputs. Similarly, the
deﬁnition for non-linear gates is calculated as the element-
wise multiplication of the biased correlation set of the gate
inputs.
Unlike REBECCA, our veriﬁcation tool supports multiplex-
ers. Therefore, in Equation 1, we propose the Fourier expan-
sion of multiplexer gates.
MUX F(c ? a : b) =
1
2
a +
1
2
b− 1
2
ac +
1
2
bc
(1)
A detailed derivation of the coefﬁcients is given in Section A.2.
Consequently, the correlation set for multiplexers combines
the stable correlation sets of all inputs.
The resulting over-approximation St
x is sound but not al-
ways tight. This means that the stable correlation set contains
at least all correlation terms with non-zero coefﬁcients, but
might also contain terms that have a zero coefﬁcient. In other
words, all real leaks are always detected, but sometimes leaks
could falsely be reported. Unlike REBECCA, COCO tightens
the over-approximation and circumvents the necessity to ap-
ply the full sets in some cases, which reduces the amount of
false positives. The propagation rules for gates which have at
least one public input can, depending on the concrete value
of the input, be simpliﬁed by substituting correlation sets
with constants. The concrete values can be obtained from
the execution trace. For example, if there exists a mulitplexer
c ? a : b and we know that c is public and has the concrete
value FALSE, the result of the multiplexer will only correlate
to terms in St
b.
x = {1} ∪ T t
The deﬁnitions of transient correlation sets T t
in cycle t and the biased representation (cid:98)T t
Execution-Aware Transient Correlation Sets Hardware
effects like transitions and glitches cause information leaks,
which cannot be captured by stable correlation sets. There-
fore, we introduce transient correlation sets T t
x for a gate x
x . T t
x
contains at least all the correlations an attacker can observe
throughout the duration of one cycle. Additionally, it contains
spurious terms that make efﬁcient calculations easier while
still yielding an over-approximation, albeit a less tight one.
x are shown
in Table 1. For constants and negations, the deﬁnition of the
correlation sets is identical to the stable case. An attacker
probing a register can learn the current stable value, the old
stable value, and their linear combination due to transition
leakage. Therefore, probing a register does not reveal any
transient information, as registers synchronize the circuit and
do not change throughout a clock cycle. Non-linear and linear
gates leak the same amount of information in the transient
case. Glitches can cause a linear gate to forward either of its
inputs because they do not necessarily update simultaneously.
Similarly, due to the transition from the previous stable signal
value to the current transient signal value, an attacker can
observe both, as well as their linear combination. The over-
approximation in Table 1 does not state this directly. Instead,
this is implied by the transient correlation sets for registers,
which make sure that an attacker probing any gate also sees
the old stable value of that gate. Therefore, as St−1
a, gates
using a as an input observe both old and new signal values of
a. In the transient case, COCO treats multiplexers similarly
to linear and non-linear gates. Our over-approximation just
assumes that a multiplexer leaks all possible linear combina-
tions of the transient values of all of its inputs.
a ⊆ T t
Just like stable correlation sets, transient correlation sets
are also affected by concrete signal values obtained from the
execution trace. However, glitches make simpliﬁcations due
to execution awareness harder and less effective. They are
still possible, as long as we keep track whether a given signal
can cause a glitch or not. We use a method similar to what
was proposed by Thompson et al. [48] to track the stability of
a given signal. This method is summarized by the following
rules:
USENIX Association
30th USENIX Security Symposium    1473
Cycle n + 2
Cycle n + 1
Cycle n
Boolean values according to trace
0
0
0
0
1
a
Stable correlation sets
{1}
Sn
a
Transient correlation sets
T n
a
T n+1
a
{1}
{1}
b
x
St
x
T t
x
Figure 1: Example of simpliﬁcations made to the propagation
rule of an AND gate in three consecutive cycles, exploiting
execution-awareness.
• Registers that have not changed their value during a
transition from cycle t − 1 to cycle t cannot produce
glitches, as their signals are inherently stable.
• If all inputs of a logic gate are stable, the output of the
logic gate cannot cause glitches either.
• Non-linear gates and multiplexers can still produce sta-
ble signals, even if one of its inputs is unstable. This
depends on the gate’s physical properties, which can pre-
vent glitches, e.g. AND gates with one unstable and one
stable FALSE input, OR gates with one unstable and one
stable TRUE input.
The gate stability propagates through the circuit for any
given clock cycle, starting at registers and continuing until the
stability of all gates is determined. After computing which
circuit gates produce stable signals, we use this to apply sim-
pliﬁcations to transient correlation sets using the same method
as for stable correlation sets.
a
Example of Execution-Aware Simpliﬁcations Consider
an AND gate x = a∧ b, where b is the output of a register
and a is calculated by some combinatorial logic, as shown in
Figure 1. For simplicity, assume that the value of b is public,
and that the value of a, as well as the stable and transient
correlation sets, do not change throughout cycles n to n + 2,
i.e., Sn
and T n
a = T n+2
a = Sn+2
a = T n+1
a = Sn+1
x = Sn
a and Sn+1
x = Sn+2
From the execution trace we know that b = 1 in cycle n
and b = 0 in cycles n + 1 and n + 2. Knowing b allows us
x = {1}.
to apply the simpliﬁcations Sn
Now consider the same circuit when glitches are present, and
assume that b = 1 was a stable signal in cycle n. In cycle n +1,
it is possible that the signal from a arrives at x before the new
value b = 0. Therefore, the simpliﬁcations due to execution