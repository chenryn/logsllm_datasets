with open(itrace.out','rb) as f:
for line inf:
ips.append(int(line.strip().16))
with open(itrace_asm.out',wb')asf:
for ip in ips:
if(ip>=OxDEAD0ED)&（ip<OxDEAD3AF):
mnemonic=GetMnem(ip)
if（mnemonic== mp)I(mnemonic=='retn):
continue
asm = GetDisasm(ip)
if asm =='add
rsi,8
continue
if asm =='sub
rsi, 8:
continue
f.write(%08x %sin'%(ip,asm))
这样处理之后，itrace_asm.out中还剩下500多行汇编代码，然后
---
## Page 294
CTF特训营：技术详解、解题方法与
10.3.4控制流混淆
294/1144
对其进行静态分析，重点关注对接收数据的处理，发现接收的输入只
传给了寄存器R8和R12。下面手动整理出对数据的处理过程：
r8=key
r12=1
r12=r8*r12
r8=r8*r8
r8=r8*r8
r8=r8*r8
r12=r8*r12
r8=r8*r8
r12=r12*r8
r8=r8*r8
r8=r8*r8
r8=r8*r8
r8=r8*r8
r8=r8*r8
r8=r8*r8
r12=r12*r8
r8=r8*r8
r8=r8*r8
r12=r12*r8
r8=r8*r8
r12=r8*r12
r8=r8*r8
r12==0x2724090c0798e4c5
化简后得知需要求出一个输入，满足如下条件：
0x2724090c0798e4c5=key^13337mod2^64
可利用如下代码对该条件进行求解：
---
## Page 295
CTF特训营：技术详解、解题方法与
10.3.4控制流混淆
295/1144
left=0x2724090c0798e4c5mi=13337
mo =64
right=
foriin range(mo):
m=（pow(2,i+1））
|= left % m
0=J
forindex,value in enumerate(right):
r+=value*pow（2,index)
if pow（r,mi, m) ==1:
right.append(0)
elif pow（(r+pow(2,i）),mi,m)==1:
right.append(1)
else:
raise
r=0
forindex,value inenumerate(right):
r+=value*pow(2,index)
printr
经过8轮这样的比较，程序就会打印出flag。每次比较只是等式
左边的值不同，通过在比较的地方下断点，可以知道比较的值。最终
获取flag的脚本如下：
fromzioimport*
target =(127.0.0.1,13337)
io = zio(target, timeout=10000, print_read=COLORED(NONE, 'red), print_write=
COLORED(NONE,'green))
p=164（0xd5b028b6c97155a5)
p+=164(0x51a2c3e8e288fa45)
p+=164（0x561720a3f926b105)
p+=164（0xa325ec548e4e0385）
p+=164（0x5369761ad6ccde85）
p+=|64（0x9475802813002885）
p+=164（0xcadd6a0bdc679485)
p +=164(0x7d67b37124bcbc85)
---
## Page 296
CTF特训营：技术详解、解题方法与.
10.3.4控制流混淆
296/1144
io.writeline(p)
io.interact()
---
## Page 297
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
297/1144
10.3.5双进程保护
双进程保护又称为DebugBlocker，是一种在调试模式下运行自
身程序的方法。这种保护通常存在两个进程，两个进程是调试器与被
调试器的关系。
DebugBlocker技术的特点如下。
防止代码调试。通常实际功能的代码运行在子进程中，不过因
为子进程已经处于调试状态了，所以无法再使用其他调试器进行附加
操作。
父进程能够控制子进程。通过处理子进程的异常，父进程能够
由于真正的功能通常位于子进程中，所以要调试子进程，就必须
先断开与已有调试器的链接，但是这样之后，就没有父进程处理子进
程的异常，导致子进程无法正常运行，这也是逆向Debugblocker最
难的部分。
1.基本思路
---
## Page 298
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
298/1144
在CTF中出现的双进程保护题目中，通常父进程的功能都比较单
一，因此我们首先针对父进程进行分析，了解其处理子进程的逻辑
然后对子进程进行patch，使子进程脱离主进程后仍能正常运行，最
后再对子进程进行分析。
因为交进程相当于一个调试器。调试器在调试程序的时候会一直
循环等待，直到检测到一个调试事件的发生。当调试事件发生的时候
就会调用一个与之对应的事件处理函数。调用处理函时，调试器会暂
停程序等待下一步的指示。所以本节的重点就是分析父进程对应的事
件处理函数。
2.实例分析
本节列举的实例来自2016alictf的debug，这是一个Windows系统
下的程序，运行debug.exe，会直接提示输入flag。
用IDA打开debug.exe，IDA自动停留到main函数处，不过此处的
main不能反编译，只能看反汇编代码。如图10-34所示，程序首先用
CreateMutexA尝试创建了一个名为ALlCTF：Bigtang的互斥体，成功或
者失败将会对应跳转到不同的函数中。对于双进程而言，交进程是第
一次创建，会返回成功，而子进程会因为互斤体已经存在而返回失败
---
## Page 299
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
299/1144
所以可以知道后面的两个函数分别为parent_handle和child_handle。
main:
;CODE XREF:start+AFP
push
push
push
ds:CreateMutexA
call
08t
short1oc_401488
call
nz
ds:GetLastError
push
oush
offset aCreatemutexFai;"CreateMutex（）failedl[ad]\n”
eaX
call
PPE
esp,8
printi
retr
loc_401488:
；CODE XREF:.text:00401471j
call
ds:GetLastError
short 1oc_40149A
cax,0B7h
jmp
parent_handle
loc_40149A:
；CODE XREF:.text:00401493'j
jmp
child_handle
图10-34通过互斤体区分父子进程
按照我们的一般思路，首先分析父进程的处理函数
parent_handle，对应的地址为4014D0，主要处理逻辑如图10-35所示。
通过查看反编译代码，可以知道首先创建了子进程，然后进入调试事
件处理循环之中。调试事件处理逻辑如图10-35所示，其主要完成了
两件事：当异常地址为4014A6时，对4014A8处的4字节进行与0x7F
的异或操作，并将EIP寄存器增加2；当异常地址为4014B9时，对
407040处的16字节进行与0x31的异或操作，并将4014B9处的2字节
修改为E8B2
---
## Page 300
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
300/1144
if（DebugEvont.u.Exception.ExceptionRecord.ExceptionCode -= OxCoooooiD )// sTArus_ILLE
if（(_umxows *)DebugEvent,u.Exception.ExceptionRecord.ExceptionAddress * sloc_4014A6)
ReadProc
0=EA
sory(ProcessInformation.hProcess,6loc_4014A8,4Buffer,4u, 0))
do
GetThres
Coteest(proceasinformation.hhread,sContext))
rocessInformation.hthread,sContazt);
sub_4014B9)
<16)1
BufferOxEBu)
oy（ProcessInformation.hProcess,sdword_407040,&dword_407040,0x10u，0))
ess,sub_401489,4Buffer,2u,0）1
图10-35
父进程的主要处理逻辑
然后，对子进程的child_handle函数进行分析，发现4014A6处不
能正常识别为汇编代码，如图10-36所示。所以在地址0x4014a6处会
抛出非法指令异常，而父进程能够接收到这个异常，
并对此处进行
patch.
004014A0
push
ebp
004014A1
mov
ebp,
004014A3
push
ebx
esp
004014A4
push
esi
004014A5
push
edi
004014A5
004014A6
word_4014A6
dw
OC08Dh
;DATAXREF:.teXt:0040160Do
004014A8
dword_4014A8
dd
17C0A7A0Bh，74979899h,96067508h，90919294h
004014A8
;DATAXREF:.text:00401621o
004014A8
;.text:0040164Do
004014B8
004014B8
mov
[ebp-140h],ecx ;DATA xREF:.text:loc_401691
004014B8
edi
；.text:004016D10
004014BE
004014BF
pop
pop
esi
004014C0
pop
ebx
004014C1
pop
ebp
004014C2
retn
图10-36
子进程的原始代码
---
## Page 301
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
301/1144
patch后的代码如图10-37所示。
:004014A055
push
:004014A1
8B
EC
mov
ebp,
esp
:004014A3
53
push
ebx
:004014A4
56
push
esi
:004014A5
57
push
edi
:004014A6
:004014A6
1oc_4014A6:
；DATA XREF:1
:004014A6
90
nop
:004014A7
90
nop
:004014A8
:004014A8
loc_4014A8:
;DATA XREF:I
:004014A8
parent_hand]
:004014A8
7405
jz
short 1oc_4014AF
:004014AA
75
03
jnz
short 1oc_4014AF
:004014AC
99
cdq
:004014AD
98
xchg
cwde
:004014AE97
eax,edi
图10-37
子进程patch后的代码
当子进程运行到4014B9处再次发生异常，对407040和4014B9进
行相应patch。
最后修改main函数，使其直接跳转到child_handle函数中，这样
子进程就可以在脱离父进程的情况下正常运行了，也可以用调试器对
程序进行调试操作。以上的patch操作可以通过编写IDAPython脚本来
完成，对应的IDA脚本如下：
fromidcimport*
PatchByte(0x4014a6,0x90)
PatchByte(0x4014a7,0x90)
foriinrange(4):
PatchByte(0x4014a8+i,Byte(0x4014a8+i)^0x7f)
for i in range(16):
---
## Page 302
CTF特训营：技术详解、解题方法与
10.3.5双进程保护
302/1144
PatchByte(0x407040+i,Byte(0x407040+i)^0x31)
PatchByte(0x4014b9,0xe8)
PatchByte(0x4014ba,0xb2）
PatchByte(0x401493,0xeb)
后面就是对子进程中的算法进行分析，其算法逻辑如图10-38所
示。经过分析可以知道，首先通过TEA进行加密，然后与0x31进行异
或操作，并与固定的字符串进行比较，最后，编写脚本进行解密。
may_tea（&dword_407990,&dword_4079A0）;
may_tea（&dword_407998，&dword_4079A0);
xor（）;
return sub_401210(）;
图10-38子进程的算法逻辑
def ul(v):
returnv&OxFFFFFFFF
def retea(ct,key):
res="
v0=132（ct[0:4])
v1=132(ct[4:8])
sum =0x1bbcdc80