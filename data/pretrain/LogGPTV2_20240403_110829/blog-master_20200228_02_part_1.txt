## 用户喜好推荐系统 - PostgreSQL 近似计算应用    
### 作者                                                                          
digoal                                                                                                                   
### 日期                                                                                                                   
2020-02-28                                                                                                               
### 标签                                                                                                                   
PostgreSQL , 近似计算 , hll , hyperloglog , hash     
----                 
## 背景      
推荐系统在互联网化的应用中是一个提升用户粘性、提高转化率的通用需求.    
例如电商, 根据用户喜好, 推荐打折商品.    
音乐网站, 根据用户听音习惯, 推荐音乐.    
新闻网站, 根据用户浏览习惯, 推荐喜好的内容.    
appstore网站, 根据用户下载和使用app习惯, 推荐app    
... ...    
下面以音乐网站为例子介绍如何设计推荐系统数据库, 以及不同设计方法的差异.    
## 设计背景    
歌曲有对应的标签    
一个歌曲可以有多个标签    
用户听过什么歌曲(听完的)    
形成一个一堆多的映射关系    
```    
uid ->> tags ->> musics    
```    
根据用户每个tag下的music数排行, 得到tag热度    
```    
tag(count distinct music)    
...    
```    
前5个tag, 以及权重    
```    
tag1:40%    
tag2:20%    
tag3:15%    
tag4:15%    
tag5:10%    
```    
从打了这些tag标签的歌曲库, 排除用户听过的, 以及这些歌曲的推荐权重(例如播放次数倒排), 按比例再推荐新的歌曲给你.    
## 普通设计    
适合所有数据库    
```    
create table t_like(     
uid int,  -- 用户id    
tagid int,  -- 歌曲标签id    
vid int,   -- 歌曲id    
mod_time timestamp,  -- 最后一次更新时间, 仅与上次时间超过1天时更新    
primary key (uid,tagid,vid)     
);    
insert into t_like values (:uid, :tagid, :vid, :mod_time)     
 on conflict (uid,tagid,vid) do update    
set mod_time=excluded.mod_time    
where    
excluded.mod_time - t_like.mod_time > interval '1 day'    
;    
-- 根据tag里面歌曲id的歌手, 统计最近1天的top 10的tag    
select tagid, count(*) from t_like     
where uid=:uid     
and now()-mod_time  interval '1 day';    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 240  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 32  
number of threads: 32  
duration: 240 s  
number of transactions actually processed: 80975327  
latency average = 0.095 ms  
latency stddev = 0.340 ms  
tps = 337396.279382 (including connections establishing)  
tps = 337406.018908 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.000  \set uid random(1,50000)    
         0.000  \set tagid random(1,5000)    
         0.000  \set vid random(1,10000000)    
         0.094  insert into t_like values (:uid, :tagid, :vid, now())    
db1=# select tagid, count(*) from t_like     
where uid=1        
and now()-mod_time  current_date     
then excluded.w5     
else hll_union(coalesce(t_like.w5,hll_empty()), excluded.w5)    
end,    
w5_mod_time = excluded.w5_mod_time,    
whole = hll_union(coalesce(t_like.whole,hll_empty()), excluded.whole)    
where    
hll_union(coalesce(t_like.w5,hll_empty()), excluded.w5) <> coalesce(t_like.w5,hll_empty())    
or    
hll_union(coalesce(t_like.whole,hll_empty()), excluded.whole) <> coalesce(t_like.whole,hll_empty())    
;    
```    
实际也可以批量合并更新, 针对单个用户的单个标签聚合更新. 采用hll union即可. 降低更新率     
查询uid 1最近2天的top 10标签, 例如    
```    
select tagid,     
hll_cardinality( hll_union(coalesce(w4,hll_empty()), coalesce(w5,hll_empty())) ) as vids     
from t_like    
where uid = 1    
order by 2 desc limit 10;    
 tagid | vids     
-------+------    
   200 |    2    
(1 row)    
```    
支持索引    
```    
create index idx_t_like_1 on t_like (uid, hll_cardinality( hll_union(coalesce(w4,hll_empty()), coalesce(w5,hll_empty())) ));    
```    
索引扫描    
```    
postgres=# explain select tagid,     
hll_cardinality( hll_union(coalesce(w4,hll_empty()), coalesce(w5,hll_empty())) ) as vids    
from t_like    
where uid = 1    
order by 2 desc limit 10;    
                                        QUERY PLAN                                             
-------------------------------------------------------------------------------------------    
 Limit  (cost=0.11..0.15 rows=1 width=12)    
   ->  Index Scan Backward using idx_t_like_1 on t_like  (cost=0.11..0.15 rows=1 width=12)    
         Index Cond: (uid = 1)    
(3 rows)    
```    
写入几千万数据, 压力测试性能    
```    
vi test.sql    
\set uid random(1,50000)    
\set tagid random(1,5000)    