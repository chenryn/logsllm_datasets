hibernation data. Finally, it transfers the execution to the Windows Resume
boot application (Winresume.efi). HbMain, the entry point routine of
Winresume, reinitializes the boot library and performs different checks on
the hibernation file:
■    Verifies that the file has been written by the same executing processor
architecture
■    Checks whether a valid page file exists and has the correct size
■    Checks whether the firmware has reported some hardware
configuration changes (through the FADT and FACS ACPI tables)
■    Checks the hibernation file integrity
If one of these checks fails, Winresume ends the execution and returns
control to the Boot Manager, which discards the hibernation file and restarts
a standard cold boot. On the other hand, if all the previous checks pass,
Winresume reads the hibernation file (using the UEFI boot library) and
restores all the saved physical pages contents. Next, it rebuilds the needed
page tables and memory data structures, copies the needed information to the
OS context, and finally transfers the execution to the Windows kernel,
restoring the original CPU context. The Windows kernel code restarts from
the same power manager sleeper thread that originally hibernated the system.
The power manager reenables interrupts and thaws all the other system
CPUs. It then updates the system time, reading it from the CMOS, rebases all
the system timers (and watchdogs), and sends another
IRP_MN_SET_POWER Irp to each system driver, asking them to restart their
devices. It finally restarts the prefetcher and sends it the boot loader log for
further processing. The system is now fully functional; the system power
state is S0 (fully on).
Fast Startup is a technology that’s implemented using hibernation. When
an application passes the EWX_HYBRID_SHUTDOWN flag to the
ExitWindowsEx API or when a user clicks the Shutdown start menu button, if
the system supports the S4 (hibernation) power state and has a hibernation
file enabled, it starts a hybrid shutdown. After Csrss has switched off all the
interactive session processes, session 0 services, and COM servers (see the
”Shutdown” section for all the details about the actual shutdown process),
Winlogon detects that the shutdown request has the Hybrid flag set, and,
instead of waking up the shutdown code of Winint, it goes into a different
route. The new Winlogon state uses the NtPowerInformation system API to
switch off the monitor; it next informs LogonUI about the outstanding hybrid
shutdown, and finally calls the NtInitializePowerAction API, asking for a
system hibernation. The procedure from now on is the same as the system
hibernation.
EXPERIMENT: Understanding hybrid shutdown
You can see the effects of a hybrid shutdown by manually
mounting the BCD store after the system has been switched off,
using an external OS. First, make sure that your system has Fast
Startup enabled. To do this, type Control Panel in the Start menu
search box, select System and Security, and then select Power
Options. After clicking Choose What The Power Button does,
located in the upper-left side of the Power Options window, the
following screen should appear:
As shown in the figure, make sure that the Turn On Fast
Startup option is selected. Otherwise, your system will perform a
standard shutdown. You can shut down your workstation using the
power button located in the left side of the Start menu. Before the
computer shuts down, you should insert a DVD or USB flash drive
that contains the external OS (a copy of a live Linux should work
well). For this experiment, you can’t use the Windows Setup
Program (or any WinRE based environments) because the setup
procedure clears all the hibernation data before mounting the
system volume.
When you switch on the workstation, perform the boot from an
external DVD or USB drive. This procedure varies between
different PC manufacturers and usually requires accessing the
BIOS interface. For instructions on accessing the BIOS and
performing the boot from an external drive, check your
workstation’s user manual. (For example, in the Surface Pro and
Surface Book laptops, usually it’s sufficient to press and hold the
Volume Up button before pushing and releasing the Power button
for entering the BIOS configuration.) When the new OS is ready,
mount the main UEFI system partition with a partitioning tool
(depending on the OS type). We don’t describe this procedure.
After the system partition has been correctly mounted, copy the
system Boot Configuration Data file, located in
\EFI\Microsoft\Boot\BCD, to an external drive (or in the same
USB flash drive used for booting). Then you can restart your PC
and wait for Windows to resume from hibernation.
After your PC restarts, run the Registry Editor and open the root
HKEY_LOCAL_MACHINE registry key. Then from the File menu,
select Load Hive. Browse for your saved BCD file, select Open,
and assign the BCD key name for the new loaded hive. Now you
should identify the main Boot Manager BCD object. In all
Windows systems, this root BCD object has the {9DEA862C-
5CDD-4E70-ACC1-F32B344D4795} GUID. Open the relative key
and its Elements subkey. If the system has been correctly switched
off with a hybrid shutdown, you should see the resume and
hiberboot BCD elements (the corresponding keys names are
26000005 and 26000025; see Table 12-2 for further details) with
their Element registry value set to 1.
To properly locate the BCD element that corresponds to your
Windows Installation, use the displayorder element (key named
24000001), which lists all the installed OS boot entries. In the
Element registry value, there is a list of all the GUIDs of the BCD
objects that describe the installed operating systems loaders. Check
the BCD object that describes the Windows Resume application,
reading the GUID value of the resumeobject BCD element (which
corresponds to the 23000006 key). The BCD object with this
GUID includes the hibernation file path into the filepath element,
which corresponds to the key named 22000002.
Windows Recovery Environment (WinRE)
The Windows Recovery Environment provides an assortment of tools and
automated repair technologies to fix the most common startup problems. It
includes six main tools:
■    System Restore Allows restoring to a previous restore point in cases
in which you can’t boot the Windows installation to do so, even in
safe mode.
■    System Image Recover Called Complete PC Restore or Automated
System Recovery (ASR) in previous versions of Windows, this
restores a Windows installation from a complete backup, not just from
a system restore point, which might not contain all damaged files and
lost data.
■    Startup Repair An automated tool that detects the most common
Windows startup problems and automatically attempts to repair them.
■    PC Reset A tool that removes all the applications and drivers that
don’t belong to the standard Windows installation, restores all the
settings to their default, and brings back Windows to its original state
after the installation. The user can choose to maintain all personal data
files or remove everything. In the latter case, Windows will be
automatically reinstalled from scratch.
■    Command Prompt For cases where troubleshooting or repair
requires manual intervention (such as copying files from another drive
or manipulating the BCD), you can use the command prompt to have
a full Windows shell that can launch almost any Windows program
(as long as the required dependencies can be satisfied)—unlike the
Recovery Console on earlier versions of Windows, which only
supported a limited set of specialized commands.
■    Windows Memory Diagnostic Tool Performs memory diagnostic
tests that check for signs of faulty RAM. Faulty RAM can be the
reason for random kernel and application crashes and erratic system
behavior.
When you boot a system from the Windows DVD or boot disks, Windows
Setup gives you the choice of installing Windows or repairing an existing
installation. If you choose to repair an installation, the system displays a
screen similar to the modern boot menu (shown in Figure 12-15), which
provides different choices.
The user can select to boot from another device, use a different OS (if
correctly registered in the system BCD store), or choose a recovery tool. All
the described recovery tools (except for the Memory Diagnostic Tool) are
located in the Troubleshoot section.
Figure 12-15 The Windows Recovery Environment startup screen.
The Windows setup application also installs WinRE to a recovery partition
on a clean system installation. You can access WinRE by keeping the Shift
key pressed when rebooting the computer through the relative shutdown
button located in the Start menu. If the system uses the Legacy Boot menu,
WinRE can be started using the F8 key to access advanced boot options
during Bootmgr execution. If you see the Repair Your Computer option, your
machine has a local hard disk copy. Additionally, if your system failed to
boot as the result of damaged files or for any other reason that Winload can
understand, it instructs Bootmgr to automatically start WinRE at the next
reboot cycle. Instead of the dialog box shown in Figure 12-15, the recovery
environment automatically launches the Startup Repair tool, shown in Figure
12-16.
Figure 12-16 The Startup Recovery tool.
At the end of the scan and repair cycle, the tool automatically attempts to
fix any damage found, including replacing system files from the installation
media. If the Startup Repair tool cannot automatically fix the damage, you
get a chance to try other methods, and the System Recovery Options dialog
box is displayed again.
The Windows Memory Diagnostics Tool can be launched from a working
system or from a Command Prompt opened in WinRE using the mdsched.exe
executable. The tool asks the user if they want to reboot the computer to run
the test. If the system uses the Legacy Boot menu, the Memory Diagnostics
Tool can be executed using the Tab key to navigate to the Tools section.
Safe mode
Perhaps the most common reason Windows systems become unbootable is
that a device driver crashes the machine during the boot sequence. Because
software or hardware configurations can change over time, latent bugs can
surface in drivers at any time. Windows offers a way for an administrator to
attack the problem: booting in safe mode. Safe mode is a boot configuration
that consists of the minimal set of device drivers and services. By relying on
only the drivers and services that are necessary for booting, Windows avoids
loading third-party and other nonessential drivers that might crash.
There are different ways to enter safe mode:
■    Boot the system in WinRE and select Startup Settings in the
Advanced options (see Figure 12-17).
Figure 12-17 The Startup Settings screen, in which the user can select
three different kinds of safe mode.
■    In multi-boot environments, select Change Defaults Or Choose
Other Options in the modern boot menu and go to the Troubleshoot
section to select the Startup Settings button as in the previous case.
■    If your system uses the Legacy Boot menu, press the F8 key to enter
the Advanced Boot Options menu.
You typically choose from three safe-mode variations: Safe mode, Safe
mode with networking, and Safe mode with command prompt. Standard safe
mode includes the minimum number of device drivers and services necessary
to boot successfully. Networking-enabled safe mode adds network drivers
and services to the drivers and services that standard safe mode includes.
Finally, safe mode with command prompt is identical to standard safe mode
except that Windows runs the Command Prompt application (Cmd.exe)
instead of Windows Explorer as the shell when the system enables GUI
mode.
Windows includes a fourth safe mode—Directory Services Restore mode
—which is different from the standard and networking-enabled safe modes.
You use Directory Services Restore mode to boot the system into a mode
where the Active Directory service of a domain controller is offline and
unopened. This allows you to perform repair operations on the database or
restore it from backup media. All drivers and services, with the exception of
the Active Directory service, load during a Directory Services Restore mode
boot. In cases when you can’t log on to a system because of Active Directory
database corruption, this mode enables you to repair the corruption.
Driver loading in safe mode
How does Windows know which device drivers and services are part of
standard and networking-enabled safe mode? The answer lies in the
HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot registry key. This key
contains the Minimal and Network subkeys. Each subkey contains more
subkeys that specify the names of device drivers or services or of groups of
drivers. For example, the BasicDisplay.sys subkey identifies the Basic
display device driver that the startup configuration includes. The Basic
display driver provides basic graphics services for any PC-compatible display
adapter. The system uses this driver as the safe-mode display driver in lieu of
a driver that might take advantage of an adapter’s advanced hardware
features but that might also prevent the system from booting. Each subkey
under the SafeBoot key has a default value that describes what the subkey
identifies; the BasicDisplay.sys subkey’s default value is Driver.
The Boot file system subkey has as its default value Driver Group. When
developers design a device driver’s installation script (.inf file), they can
specify that the device driver belongs to a driver group. The driver groups
that a system defines are listed in the List value of the
HKLM\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder key. A
developer specifies a driver as a member of a group to indicate to Windows
at what point during the boot process the driver should start. The
ServiceGroupOrder key’s primary purpose is to define the order in which
driver groups load; some driver types must load either before or after other
driver types. The Group value beneath a driver’s configuration registry key
associates the driver with a group.
Driver and service configuration keys reside beneath
HKLM\SYSTEM\CurrentControlSet\Services. If you look under this key,
you’ll find the BasicDisplay key for the basic display device driver, which
you can see in the registry is a member of the Video group. Any file system
drivers that Windows requires for access to the Windows system drive are
automatically loaded as if part of the Boot file system group. Other file
system drivers are part of the File System group, which the standard and
networking-enabled safe-mode configurations also include.
When you boot into a safe-mode configuration, the boot loader (Winload)
passes an associated switch to the kernel (Ntoskrnl.exe) as a command-line
parameter, along with any switches you’ve specified in the BCD for the
installation you’re booting. If you boot into any safe mode, Winload sets the
safeboot BCD option with a value describing the type of safe mode you
select. For standard safe mode, Winload sets minimal, and for networking-
enabled safe mode, it adds network. Winload adds minimal and sets
alternateshell for safe mode with command prompt and dsrepair for
Directory Services Restore mode.
 Note
An exception exists regarding the drivers that safe mode excludes from a
boot. Winload, rather than the kernel, loads any drivers with a Start value
of 0 in their registry key, which specifies loading the drivers at boot time.
Winload doesn’t check the SafeBoot registry key because it assumes that
any driver with a Start value of 0 is required for the system to boot
successfully. Because Winload doesn’t check the SafeBoot registry key to
identify which drivers to load, Winload loads all boot-start drivers (and
later Ntoskrnl starts them).
The Windows kernel scans the boot parameters in search of the safe-mode
switches at the end of phase 1 of the boot process
(Phase1InitializationDiscard, see the “Kernel initialization phase 1” section
earlier in this chapter), and sets the internal variable InitSafeBootMode to a
value that reflects the switches it finds. During the InitSafeBoot function, the
kernel writes the InitSafeBootMode value to the registry value
HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Option\OptionValue
so that user-mode components, such as the SCM, can determine what boot
mode the system is in. In addition, if the system is booting in safe mode with
command prompt, the kernel sets the HKLM\SYSTEM\CurrentControlSet\
Control\SafeBoot\ Option\UseAlternateShell value to 1. The kernel records
the parameters that Winload passes to it in the value
HKLM\SYSTEM\CurrentControlSet\Control\SystemStartOptions.
When the I/O manager kernel subsystem loads device drivers that
HKLM\SYSTEM\CurrentControlSet\Services specifies, the I/O manager
executes the function IopLoadDriver. When the Plug and Play manager
detects a new device and wants to dynamically load the device driver for the
detected device, the Plug and Play manager executes the function
PipCallDriverAddDevice. Both these functions call the function
IopSafebootDriverLoad before they load the driver in question.
IopSafebootDriverLoad checks the value of InitSafeBootMode and
determines whether the driver should load. For example, if the system boots
in standard safe mode, IopSafebootDriverLoad looks for the driver’s group,
if the driver has one, under the Minimal subkey. If IopSafebootDriverLoad
finds the driver’s group listed, IopSafebootDriverLoad indicates to its caller
that the driver can load. Otherwise, IopSafebootDriverLoad looks for the
driver’s name under the Minimal subkey. If the driver’s name is listed as a
subkey, the driver can load. If IopSafebootDriverLoad can’t find the driver
group or driver name subkeys, the driver will not be loaded. If the system
boots in networking-enabled safe mode, IopSafebootDriverLoad performs
the searches on the Network subkey. If the system doesn’t boot in safe mode,
IopSafebootDriverLoad lets all drivers load.
Safe-mode-aware user programs
When the SCM user-mode component (which Services.exe implements)
initializes during the boot process, the SCM checks the value of
HKLM\SYSTEM\CurrentControlSet\ Control\SafeBoot\Option\OptionValue
to determine whether the system is performing a safe-mode boot. If so, the
SCM mirrors the actions of IopSafebootDriverLoad. Although the SCM
processes the services listed under
HKLM\SYSTEM\CurrentControlSet\Services, it loads only services that the
appropriate safe-mode subkey specifies by name. You can find more
information on the SCM initialization process in the section “Services” in
Chapter 10.
Userinit, the component that initializes a user’s environment when the user
logs on (%SystemRoot%\System32\Userinit.exe), is another user-mode
component that needs to know whether the system is booting in safe mode. It
checks the value of HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\
Option\UseAlternateShell. If this value is set, Userinit runs the program
specified as the user’s shell in the value
HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\AlternateShell rather
than executing Explorer.exe. Windows writes the program name Cmd.exe to
the AlternateShell value during installation, making the Windows command
prompt the default shell for safe mode with command prompt. Even though
the command prompt is the shell, you can type Explorer.exe at the command
prompt to start Windows Explorer, and you can run any other GUI program
from the command prompt as well.
How does an application determine whether the system is booting in safe
mode? By calling the Windows GetSystemMetrics(SM_CLEANBOOT)
function. Batch scripts that need to perform certain operations when the
system boots in safe mode look for the SAFEBOOT_OPTION environment
variable because the system defines this environment variable only when
booting in safe mode.
Boot status file
Windows uses a boot status file (%SystemRoot%\Bootstat.dat) to record the
fact that it has progressed through various stages of the system life cycle,
including boot and shutdown. This allows the Boot Manager, Windows
loader, and Startup Repair tool to detect abnormal shutdown or a failure to
shut down cleanly and offer the user recovery and diagnostic boot options,
like the Windows Recovery environment. This binary file contains
information through which the system reports the success of the following
phases of the system life cycle:
■    Boot
■    Shutdown and hybrid shutdown
■    Resume from hibernate or suspend
The boot status file also indicates whether a problem was detected the last
time the user attempted to boot the operating system and the recovery options
shown, indicating that the user has been made aware of the problem and
taken action. Runtime Library APIs (Rtl) in Ntdll.dll contain the private
interfaces that Windows uses to read from and write to the file. Like the
BCD, it cannot be edited by users.
Conclusion
In this chapter, we examined the detailed steps involved in starting and
shutting down Windows (both normally and in error cases). A lot of new
security technologies have been designed and implemented with the goal of
keeping the system safe even in its earlier startup stages and rendering it
immune from a variety of external attacks. We examined the overall structure
of Windows and the core system mechanisms that get the system going, keep
it running, and eventually shut it down, even in a fast way.
APPENDIX
Contents of Windows Internals,
Seventh Edition, Part 1
Introduction
Chapter 1   Concepts and tools
Windows operating system versions
Windows 10 and future Windows versions
Windows 10 and OneCore
Foundation concepts and terms
Windows API
Services, functions, and routines
Processes
Threads
Jobs
Virtual memory
Kernel mode vs. user mode
Hypervisor
Firmware
Terminal Services and multiple sessions
Objects and handles
Security
Registry
Unicode
Digging into Windows internals
Performance Monitor and Resource Monitor