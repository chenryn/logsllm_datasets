Chapter 11
• iFrame keylogger: Rewrites all of the links on a web page to an iFrame
overlay that is 100 percent of the height and width of the original. For
maximum effectiveness, it should be attached to a JavaScript keylogger.
Ideally, you would load the login page of the hooked domain.
• Man-in-the-browser: This module ensures that whenever the victim clicks
on any link, the next page will be hooked as well. The only way to avoid
this behavior is to type a new address in the address bar.
Finally, although BeEF provides an excellent series of modules to perform the
reconnaissance, as well as the exploit and post-exploit phases of the kill chain, the
known default activities of BeEF (/hook.js and server headers) are being used to
detect attacks, reducing its effectiveness. Testers will have to obfuscate their attacks
using techniques such as Base64 encoding, whitespace encoding, randomizing
variables, and removing comments to ensure full effectiveness in the future.
Summary
In this chapter, we examined the attacks against systems that are generally isolated
from protected networks. These client-side attacks focus on the vulnerabilities in
specific applications. We reviewed hostile scripts, especially VBScript and PowerShell,
which are particularly useful in testing and compromising Windows-based networks.
We then examined the Cross-Site Scripting Framework, which can compromise XSS
vulnerabilities, as well as the BeEF tool, which targets the vulnerabilities in a web
browser. Both XSSF and BeEF integrate with reconnaissance, exploitation, and
post-exploitation tools on Kali to provide comprehensive attack platforms.
This chapter concludes Mastering Kali Linux for Advanced Penetration Testing.
We hope that this book has helped you to understand how attackers use tools
such as Kali to compromise networks, and how you can use the same tools to
understand your network's vulnerabilities and mediate them before your own
network is compromised.
[ 311 ]
Installing Kali Linux
Kali Linux is a Linux-based operating system that acts as a platform to support
several hundred different applications used to audit the security of a network.
Its complexity is matched by the diversity of methods to install and use it during
testing. This chapter will cover some of the considerations to be made when
installing Kali, and will focus on how to get a secure virtual machine up and
running as quickly as possible. It will also examine how to set up and maintain an
inexpensive site to test the material covered in this book.
Downloading Kali Linux
There are multiple options for downloading and installing Kali Linux. At the time
of this publication, the most recent Version is release 1.06; however, Version 1.07 is
due for imminent release. The current version is available from the official website
(www.kali.org/downloads/) in 32- and 64-bit compilations.
Offensive Security has made the preconfigured version of Advanced RISC
Machines (ARM), processors (for example, Galaxy Note 10.1, Raspberry Pi, and
Samsung Chromebooks) available for download; both ARMEL and ARMHL
platforms are supported. In addition, premade VMware images are also available
online at http://www.offensive-security.com/kali-llnux-vmware-arm-
image-download/.
Installing Kali Linux
After you have downloaded the appropriate image, ensure that the SHA1 checksum
file was generated by Kali (it will be signed using the official Kali encryption key,
which is available online to verify the authenticity of the download), and inspect the
SHA1 checksum to verify the integrity of the image. Verification tools are built into
Linux and OSX operating systems; however, you will have to use a third-party tool
such as hashtab (http://www.implbits.com/HashTab/HashTabWindows.aspx) for
Windows operating systems.
If you wish to build a custom version of Kali, especially one that features an alternate
desktop or toolset, you can use the live-build scripts available at http://docs.
kali.org/live-build/generate-updated-kali-iso.
Basic Installation of Kali Linux
Once you have obtained a suitable distribution of Kali Linux, it must be installed for
use. The following installation options are available:
• Install to an i386, AMD64, or ARM system hard drive. Kali Linux will be the
sole host operating system when the device boots up.
• Dual-boot a system. Usually, this option is selected when using an MS
Windows operating system. During boot-up, the user has the option to boot
the system as Kali Linux or as the Windows operating system. This offers
more flexibility than installing Kali directly to the hard drive; however, it
does make switching back and forth between the two systems difficult.
• Install directly to a DVD drive or a USB device. This is especially useful if
the host system can be configured to boot from the USB device; however,
additional configuration changes are required if the USB device needs to be
persistent (retains all changes to the based operating system, applications,
and data that are made during the testing process).
• Install as a virtual machine using products such as VMware or VirtualBox. We
have found this to be the most flexible option to support penetration testing.
• Kali supports two types of network installs—the mini ISO install and the
network PXE install. The mini ISO installs a truncated Kali distribution on
a system and then relies on a fast network connection to install the remainder
of the applications needed for an effective final product. The network PXE
install supports terminals (no CD-ROM and no USB ports) during the
booting process, obtaining the IP address information and installing Kali.
• Kali can now be used from the cloud—a 64-bit minimal image of Kali is
available from the Amazon EC2 marketplace (https://aws.amazon.com/
marketplace/pp/B00HW50E0M). The Kali image is free, and users are only
charged for regular AWS usage.
[ 314 ]
Appendix
Due to Amazon's regulations, this version of Kali does not use the
root account by default. Once you have obtained your SSH key from
Amazon, you have to connect to the Kali instance as a user, and then
sudo to root. You may have to download additional tools to support
testing. Finally, you have to inform Amazon that it is being used for
legitimate security testing and not as an attack tool.
Installing Kali Linux to a virtual machine
In this book, Kali was configured as a virtual machine (VM). A VM has the
following advantages when used for penetration testing:
• A common test VM can be developed and maintained, ensuring that testers
are familiar with the toolset and their impact on typical target systems.
• VMs facilitate rapid switching between the host and guest operating systems,
allowing the tester to move between Windows and Linux platforms in order
to find the optimum mix of tools for testing.
• VMs are mobile—they can be moved to different systems and operating
platforms.
• VMs can be retained in a library to facilitate regression testing. After a toolset
has been used to validate the security of a network or system, testers are
often asked if their methodology and tools would have detected a particular
vulnerability present at the time of testing. Testers can go back and retest for
the vulnerability using the archived VM to determine whether it would have
been detected or the network was at a risk of attacks.
Although premade VMs are available for download, most testers create their own
using validated ISO images (the process of installing Kali to a VM is almost identical
to installing it to a hard drive or media, such as a USB key). Kali supports both
VMware and Oracle VirtualBox VMs.
In general, the process is simple and guided by application wizards that walk
you through the process. When using VMware, for example, the process would
be as follows:
1. Select the Create a New Virtual Machine icon to create a new
virtual machine.
2. Choose to create the VM using an ISO image.
3. Select the guest operating system.
4. Set the name and location for the ISO image.
[ 315 ]
Installing Kali Linux
5. Set the disk space; the minimum used should be 12 GB, but set aside at least
20-25 GB. A minimum of 1 GB memory should be made available to the VM;
however, if you are testing a large network and will be using multithreaded
tools, you may wish to increase this to at least 3 GB.
6. Review the hardware configuration.
Make sure that the VM is configured to be visible only to the host
operating system, especially if it has not been updated. If you are
configuring a VM to use as a target, beware that if it is visible to the
Internet, your test platform may be compromised by an external attacker.
7. Start the VM. The boot menu will provide several options; select
Graphical Install.
8. Follow the prompts to select the normal language, time zone, hostname,
and set root password.
9. When setting the disk partition, and if you're not using the dual boot option,
you can set the full partition as the virtual disk. It is recommended that you
select this option for full disk encryption at this time.
10. The VM application will complete partitioning, write the changes to the
disk, and then install the system files. After prompting for some additional
configuration information, the VM will reboot.
11. At this point, the system is live. Configure to support penetration testing as
described in Chapter 1, Starting with Kali Linux.
Preconfigured distributions of Kali usually rely on the default
username and password and may have pregenerated SSH host
keys. These should be changed as soon as possible.
Full disk encryption and nuking the master key
Penetration testers typically have sensitive information in their possession—a
successful test can reveal flaws in a client's network, and even the tools used
to conduct a penetration test may be classified as illegal in some jurisdictions.
Therefore, testers frequently secure their systems using full-disk encryption.
During the partitioning phase of installation to a hard drive or virtual machine,
Kali can be set to use full-disk encryption using a combination of Logical Volume
Management (LVM) and the Linux Unified Key Setup (LUKS), which is the
standard application for Linux hard drive encryption. This is shown in the
following screenshot:
[ 316 ]
Appendix
Access to the encrypted drive requires a passphrase, and it is recommended that
the passphrase have a length of 20 or more characters. Unfortunately, given the
recent emergence of state-sponsored surveillance, there are concerns that testers
could be compelled to give their passphrase to a government agent, removing the
benefits of encryption.
The solution is to provide a passphrase that will nuke, or destroy, the master key.
This will ensure confidentiality, making it impossible to decrypt the drive.
This capability was recently added to Kali Linux release 1.06.
Kali Linux incorporates LUKS, which is a platform-independent encryption
specification that allows a user to encrypt partitions on a hard drive. LUKS allows
multiple user keys to decrypt the master key, allowing multiple users to encrypt
and decrypt the data, and permits the use of backup keys.
When a LUKS-encrypted container is created, a random master key is generated.
This master key is encrypted using the passphrase. The advantage of this approach
is that the passphrase is not directly linked to the data—if two identical volumes are
encrypted and the same passphrase is used, the master keys remain unique to their
volume and cannot be swapped.
[ 317 ]
Installing Kali Linux
This means that if the master key is lost or destroyed, it is impossible to recover
the encrypted data. This property allows us to nuke the recovery of an encrypted
volume or hard drive by deliberately wiping the master key if a specific passphrase
is entered. The emergency self-destruction functionality was added to Kali Linux
release 1.06 and can be implemented using the cryptsetup utility.
To use the nuke functionality:
1. Install Kali with the Full Disk Encryption option. Before Kali is installed, all
partitions will be erased; this will result in a slow installation.
2. Verify the LUKS header information for the encrypted hard drive using the
following command:
root@kali:~# cryptsetup luksDump /dev/sda5
Key Slot 0, associated with the password for the disk encryption, is enabled.
The remaining key slots are unused. The execution of the previous command
is given in the following screenshot:
[ 318 ]
Appendix
3. Add the Nuke key using the following command:
root@kali:~# cryptsetup luksAddNuke /dev/sda5
The system will prompt you for the existing passphrase to validate identity
and then will ask you the new passphrase to be used for the nuke option.
Be careful—it does not prompt the user to repeat the passphrase twice in
order to guard against a miskey during entry. The execution of the previous
command is shown in the following screenshot:
4. To confirm that the nuke key has been enabled, review the list of available
key slots, using the command shown in the following screenshot:
Key slot 1 is now enabled; it contains the nuke key.
5. Back up the keys using the following command:
root@kali:~# cryptsetupluksHeaderBackup --header-backup-file
 /dev/sda5
[ 319 ]
Installing Kali Linux
6. Once the master key file has been backed up, encrypt it and transfer it off the
system for secure storage. Several applications are available for encryption
(for example, 7 Zip, bcrypt, ccrypt, and GnuPG), or you can use an internal
command such as openssl. A sample command is as follows:
root@kali:~# opensslenc -aes-256-cbc -salt -in 
-out 
When the backup file has been secured, your system is protected against
forced password extraction. If the nuke password is entered, the local copy
of the master key will be destroyed, making it impossible to access the
encrypted files.
If you dump the LUKS headers after issuing the nuke password, you will see
an output as shown in the following screenshot:
What if you want to restore a drive that you were forced to nuke? As long as you
can retrieve the encrypted header from the remote storage location, this is a simple
matter; you will be able to decrypt the hard drive and recover your data. Once the
encrypted header has been decrypted (using the appropriate decryption command
based on the method used to protect the file), enter the following command:
root@kali:~# cryptsetupluksHeaderRestore --header-backup-file
 /dev/sda5
[ 320 ]
Appendix
This will generate the following warning:
Device /dev/sda5 already contains LUKS header, Replacing header will
destroy existing keyslots. Are you sure?
When you are prompted, type YES. This will replace the header and allow you to
decrypt the hard drive.
Setting up a test environment
Before testing a production environment, it is important for the tester to fully
understand how to use the testing tools, the impact that they will have on the target
system, and how to interpret the data in relation to the activities performed against
the target.
Testing controlled environments frequently produces results that are different from
same tests when they are run on a production system for several reasons, including
the following:
• The operating system in the target environment differs from the operating
system in the test environment, including different versions of the operating
system. (XP is clearly different from Windows 8.1, but there are also
differences between Windows 8.1 Pro and Enterprise versions or between
32-bit and 64-bit operating system.) Operating system modifications to
support local languages can also have a significant impact on the presence
of vulnerabilities.
• The target environment has different service packs, patches, or
upgrades applied.
• The target environment has different third-party applications installed; these
can conflict with network traffic, introduce new vulnerabilities, or impact a
tester's ability to exploit the existing vulnerabilities.
• Targets configured as virtual machines in a host environment may react
differently from target systems installed directly on bare metal.
• Targets are protected by various network and system devices
and applications.
To obtain the best possible results, testers (and attackers) typically use a two-
stage testing process. Testers first perform the attack using a well-defined virtual
machine (such as Windows XP) to determine the most effective attack tools and
methodologies; once this simple test case is proven, testers revalidate the attack
using a more complex virtual or physical network that mirrors the target network
as closely as possible.
[ 321 ]
Installing Kali Linux
Vulnerable operating systems and
applications
Testers usually maintain a library of the current and historical operating systems.
When testing Microsoft operating systems, WinXP is used as the reference standard to
test vulnerabilities. Although Windows XP will be deprecated in 2014 and no longer
supported by Microsoft, it will remain on many networks in servers and workstations
as well as embedded in devices such as printers and point-of-sale terminals.
When testing vulnerable Windows operating systems, a subscription to MSDN
(http://msdn.microsoft.com/en-ca/subscriptions/aa336858) is invaluable in
order to gain access to current Microsoft products to test in the lab.
Do not use operating systems downloaded from public file-
sharing services such as Torrent sites. DigitalDefence recently
evaluated 40 downloads of Microsoft operating systems from
Torrent sites—every download was infected with a backdoor to
permit remote access to an attacker.
To test older third-party Windows applications that possess specific vulnerabilities,
testers can access online repositories that retain old copies of the applications; many
of these include exploitable vulnerabilities. Examples of such repositories can be seen
at the following links:
• http://www.oldapps.com
• www.oldversion.com
Due to their open source nature, multiple versions of Unix-like operating systems
(Linux, BSD, and Solaris) are available for download and testing.
The following projects will allow you to test Unix operating system installations with
known vulnerabilities, you can access:
• Damn Vulnerable Linux (http://sourceforge.net/projects/
virtualhacking/files/os/dvl/)
• LAMPSecurity (http://sourceforge.net/projects/lampsecurity/)
• Metasploitable2 (http://sourceforge.net/projects/virtualhacking/
files/os/metasploitable/)
Older Unix applications with known vulnerabilities are usually available for
download at the application's website.
[ 322 ]
Appendix
Complex environments for testing (operating system and vulnerable applications)
can be downloaded from the VulnHub repository at http://vulnhub.com. These
images are usually accompanied by walk-throughs that demonstrate various ways to
exploit the images. Some of the images include the following:
• bWAPP: This provides several ways to deface a sample website
• VulnVPN: This allows the tester to exploit the VPN service in order to access
the server and internal services and gain root access
• VulnVoIP: This allows the tester to practice reconnaissance and allows the
exploitation of a VoIP network
Finally, testers will want to take advantage of some of the vulnerable web-based
applications that are available for testing.
One of the most common testing targets is the Linux image called Metasploitable.
The base operating system has multiple vulnerabilities; in addition, it loads
vulnerable web applications when it starts. To access the applications, open
Metasploitable as a VM and then start a separate VM with Kali Linux. In the Kali
VM, open a browser and enter the IP address of the Metasploitable VM. You will see
the menu options, as shown in the following screenshot:
[ 323 ]
Installing Kali Linux