account for the entire state of the programnot just global variables. The state of the 
program can also include static variables, privilege levels, open and closed file 
descriptors, the process signal mask, and even local stack variables. This last item 
might seem counter-intuitive since stack variables only have a local scope inside the 
function that declares them. However, consider the fact that a function might be 
interrupted at any point during execution by a signal, and then a different part of the 
function is returned to through the use of longjmp(). In this scenario, it is possible 
that stack variables used by that function are not in an expected state. 
A security researcher from the FreeBSD project named David Greenman pointed out 
a perfect example of exploiting a state change bug in WU-FTPD v2.4, which is detailed 
in a mail he sent to the bugtraq security mailing list (archived at 
http://seclists.org/bugtraq/1997/Jan/0011.html). Essentially, the program installed 
two signal handlers, one to handle SIGPIPE and one to handle SIGURG. The SIGPIPE 
handler is shown in Listing 13-2. 
Listing 13-2. Signal Race Vulnerability in WU-FTPD 
static void 
lostconn(signo) 
    int signo; 
{ 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
815 
    if (debug) 
        syslog(LOG_DEBUG, "lost connection"); 
    dologout(-1); 
} 
/* 
 * Record logout in wtmp file 
 * and exit with supplied status. 
 */ 
void 
dologout(status) 
    int status; 
{ 
    if (logged_in) { 
        (void) seteuid((uid_t)0); 
        logwtmp(ttyline, "", ""); 
#if defined(KERBEROS) 
        if (!notickets && krbtkfile_env) 
            unlink(krbtkfile_env); 
#endif 
    } 
    /* beware of flushing buffers after a SIGPIPE */ 
    _exit(status); 
} 
Upon receipt of a SIGPIPE signal, the process sets its effective user ID to 0, logs some 
information, and then exits. Here's the SIGURG handler: 
static void 
myoob(signo) 
    int signo; 
{ 
    char *cp; 
    /* only process if transfer occurring */ 
    if (!transflag) 
        return; 
    cp = tmpline; 
    if (getline(cp, 7, stdin) == NULL) { 
        reply(221, "You could at least say goodbye."); 
        dologout(0); 
    } 
    upper(cp); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
816 
    if (strcmp(cp, "ABOR\r\n") == 0) { 
        tmpline[0] = '\0'; 
        reply(426, "Transfer aborted. Data connection closed."); 
        reply(226, "Abort successful"); 
        longjmp(urgcatch, 1); 
    } 
    if (strcmp(cp, "STAT\r\n") == 0) { 
        if (file_size != (off_t) -1) 
            reply(213, "Status: %qd of %qd bytes transferred", 
                byte_count, file_size); 
        else 
            reply(213, "Status: %qd bytes transferred", 
                byte_count); 
    } 
} 
... 
void 
send_file_list(whichf) 
    char *whichf; 
{ 
... 
    if (setjmp(urgcatch)) { 
        transflag = 0; 
        goto out; 
    } 
Upon receipt of a SIGURG signal (which can be delivered by sending a TCP segment 
with the URG flag set in the TCP header), some data is read. If it's ABOR\r\n, the 
process calls longjmp() to go back to another part of the program, which eventually 
goes back to the main processing loop for receiving FTP commands. It's possible for 
a SIGPIPE to occur while handling the data connection, and then be interrupted after 
it has set the effective user ID to 0 but before it calls exit() by a SIGURG signal. In this 
case, the program returns to the main processing loop with an effective user ID of 0, 
thus allowing users to modify files with root privileges. 
Another problem with signal handlers that use longjmp() to return back into the 
program is a situation where the jump target is invalid. For setjmp() and sigsetjmp() 
to work correctly, the function that calls them must still be on the runtime execution 
stack at any point where longjmp() or siglongjmp() is called from. This is a 
requirement because state restoration performed by longjmp() is achieved by 
restoring the stack pointer and frame pointer to the values they had when setjmp() 
was invoked. So, if the original function has since terminated, the stack pointer and 
frame pointer restored by longjmp() point to undefined data on the stack. Therefore, 
if a longjmp() can be activated at any point after the function that calls setjmp() has 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
817 
returned, the possibility for exploitation exists. Take a look at a modified version of 
the process_message() example used earlier in this section: 
jmp_buf env; 
void pipe_handler(int signo) 
{ 
    longjmp(env); 
} 
int process_message(int sock) 
{ 
    struct pkt_header header; 
    int err = ERR_NONE; 
    if(setjmp(env) != 0) 
    { 
        log("user disconnected!"); 
        err = ERR_DISCONNECTED; 
            goto cleanup; 
    } 
    signal(SIGPIPE, pipe_handler); 
    for(;;) 
    { 
           if(read_packet_header(sock, &header)) < 0) 
               return ERR_BAD_HEADER; 
           switch(header.type) 
           { 
           case USER: 
               parse_username_request(sock); 
               break; 
           case PASS: 
               parse_password_request(sock); 
               break; 
           case OPEN: 
               parse_openfile_request(sock); 
               break; 
           case QUIT 
               parse_quit_request(sock); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
818 
               goto cleanup; 
           default: 
               log("invalid message"); 
               break; 
           } 
    } 
cleanup: 
    signal(SIGPIPE, SIG_DFL); 
    return err; 
} 
In this example, longjmp() is called when a SIGPIPE is received, which you can safely 
assume that users are able to generate in any parsing functions for the different 
commands, as the program might be required to write some data back to the client. 
However, this code has a subtle error: If read_packet_header() returns less than 0, 
the SIGPIPE handler is never removed, and process_message() returns. So, if a SIGPIPE 
is delivered to the application later, pipe_handler() calls longjmp(), which returns to 
the process_message() function. Because process_message() is no longer on the call 
stack, the stack and frame pointers point to stack space used by some other part of 
the program, and memory corruption most likely occurs. 
To summarize, signal handlers with longjmp() calls require special attention when 
auditing code for the following reasons: 
The signal handler doesn't return, so it's highly unlikely that it will be 
asynchronous-safe unless it exits immediately. 
It might be possible to find a code path where the function that did the setjmp() 
returns, but the signal handler with the longjmp() isn't removed. 
The signal mask might have changed, which could be an issue if sigsetjmp() 
and siglongjmp() aren't used. If they are, does restoring the old signal mask 
cause problems as well? 
Permissions might have changed (as in the WU-FTPD example). 
Program state might have changed such that the state of variables that are 
valid when setjmp() is originally called but not necessarily when longjmp() is 
called. 
Signal Interruption and Repetition 
The bug presented in WU-FTPD introduces an interesting concept: The signal handler 
itself can also be interrupted, or it can be called more than once. An interesting paper 
by Michael Zalewski, "Delivering Signals for Fun and Profit," describes these two 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
819 
related attacks (available at 
www.bindview.com/Services/Razor/Papers/2001/signals.cfm). 
Sometimes developers will construct signal handlers with the expectation that they 
are only executed once, or not at all. If a signal handler may be invoked more than 
once due to the delivery of multiple signals, the handler may inadvertently perform an 
operation multiple times that is really only safe to perform once. As an example, 
consider the cleanup() function presented in Listing 13-1 at the beginning of this 
section; it can be invoked by the delivery of either a SIGTERM or a SIGINT signal. As 
such, it would be possible to deliver a SIGTERM signal to the process followed rapidly 
by a SIGINT signal, and thus have it execute multiple times, resulting in deallocating 
the user variable more than once. When you're auditing instances of sigaction(), 
note that the combination of the SA_ONESHOT and SA_RESETHAND flags indicate that the 
signal handler is used only once, and then the default action for that signal is 
restored. 
Note 
The signal() function behaves a little differently in Linux than it does on BSD systems; 
when a signal handler is installed with the signal() function in Linux, after the signal 
is triggered once, the default action is restored for that signal. Conversely, BSD 
systems leave the signal handler defined by the user in place until it's explicitly 
removed. So the program behaves a little differently depending on whether it runs on 
Linux or BSD, which might determine whether a signal handler is vulnerable to 
attacks such as those detailed previously. 
The second problem that can arise is that a signal handler itself can be interrupted by 
another signal, which might cause problems if the signal handler isn't 
asynchronous-safe. A signal handler can be interrupted only if a signal is delivered to 
the process that's not blocked. Typically, a process blocks signals by using the 
sigprocmask() function (except for SIGKILL and SIGSTOP, which can't be caught or 
blocked). With this function, developers can define a set of signals in the form of a 
sigset_t argument that describes all signals that should be blocked while the handler 
is running. If a process receives a signal while it's blocked, the kernel makes a note of 
the signal and delivers it to the process after it's unblocked. 
In addition, when a signal handler is running, certain signals can be implicitly blocked, 
which might affect whether a signal handler can be interrupted. In a signal handler 
installed with signal(), the signal the handler catches is blocked for the period of time 
the signal handler is running. So, for example, a signal handler installed to handle 
SIGINT can't be interrupted by the delivery of another SIGINT while it's running. This is 
also the case with sigaction(), except when the SA_NODEFER flag is supplied in the 
sa_flags member of the sigaction structure. The sigaction() function also enables 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
820 
developers to supply additional signals that are blocked for the duration of the 
signal-handling routine by supplying them in the sa_mask field of the sigaction 
structure. 
Therefore, when you're evaluating whether a signal can be interrupted by another 
signal, you need to establish what the process's signal mask is when the handler is 
running. It's quite common for signal handlers to be interruptible by other signals; for 
example, a SIGINT handler might be interrupted by a SIGALRM signal. Again returning 
to our cleanup() example from Listing 13-1, you would be able to interrupt the 
handler that has caught SIGINT by sending a SIGTERM at the appropriate time, thus 
having the cleanup() function interrupt itself because it's the handler for both. 
One nasty problem that tends to catch developers off-guard is the use of library 
functions within a signal handler. In "Delivering Signals for Fun and Profit," Zalewski 
talks about libc functions that are and are not asynchronous-safe. The complete list of 
functions guaranteed to be asynchronous-safe by POSIX standards is shown (taken 
from the OpenBSD signal(3) man page): 
Base Interfaces: 
_exit(), access(), alarm(), cfgetispeed(), cfgetospeed(), 
cfsetispeed(), cfsetospeed(), chdir(), chmod(), chown(), 
close(), creat(), dup(), dup2(), execle(), execve(), 
fcntl(), fork(), fpathconf(), fstat(), fsync(), getegid(), 
geteuid(), getgid(), getgroups(), getpgrp(), getpid(), 
getppid(), getuid(), kill(), link(), lseek(), mkdir(), 
mkfifo(), open(), pathconf(), pause(), pipe(), raise(), 
read(), rename(), rmdir(), setgid(), setpgid(), setsid(), 
setuid(), sigaction(), sigaddset(), sigdelset(), 
sigemptyset(), sigfillset(), sigismember(), signal(), 
sigpending(), sigprocmask(), sigsuspend(), sleep(), stat(), 
sysconf(), tcdrain(), tcflow(), tcflush(), tcgetattr(), 
tcgetpgrp(), tcsendbreak(), tcsetattr(), tcsetpgrp(), 
time(), times(), umask(), uname(), unlink(), utime(), 
wait(), waitpid(), write() 
Real-time Interfaces: 
aio_error(), clock_gettime(), sigpause(), timer_getoverrun(), 
aio_return(), fdatasync(), sigqueue(), timer_gettime(), 
aio_suspend(), sem_post(), sigset(), timer_settime() 
ANSI C Interfaces: 
strcpy(), strcat(), strncpy(), strncat(), and perhaps 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
821 
some others 
Extension Interfaces: 
strlcpy(), strlcat(), syslog_r() 
Everything else is considered not safe. Notice the lack of some commonly used 
functions in this list: syslog(), malloc(), free(), and the printf() functions. Signal 
handlers that use any functions not listed here are potentially at risk. Exactly what 
level of risk they are exposed to depends on the function they use and its 
implementation specifics; a signal handler that interrupts a malloc() or free() and 
then calls malloc() or free() is at risk of corrupting the heap because it might be in an 
inconsistent state when the signal handler is called. Many of the functions not 
included in the safe list use these heap functions internally. 
Although functions manipulating the system heap might initially appear to be the 
most major concern, it's much less of a problem than it used to be. Many libc 
implementations now contain some sort of concurrency controls over the system 
heap that prevent more than one heap function from being entered at a time. Still, a 
signal handler that uses the heap in an unsafe manner should be flagged, as you can't 
assume the system will handle concurrency correctly, especially when you don't know 
what system the software is running on. 
Signals Scoreboard 
A signal function contains the special property that it can run at any time from 
installation to removal, so you need to give signal handlers special attention. The 
procedure for auditing a signal-handling function involves an extra step on top of the 
standard code-auditing practices you have already learned in this book. Specifically, 
you need to assess whether the signal function is asynchronous-safe. As you have 
learned, asynchronous-safe isn't quite the same as thread safe. In fact, sometimes 
thread APIs aren't asynchronous-safe; for example, in PThreads, the use of a mutex 
data type in a signal handler can cause the program to become deadlocked! When 
examining a signal handler, therefore, you might find it helpful to record some basic 
statistics on your analysis of the function, as shown in Table 13-3. These logs are 
similar to the Synchronization Scoreboards introduced earlier in this chapter. 
Table 13-3. Signal Handler Scoreboard 
Function name 
Alrmhandler 
Location 
src/util.c, 
line 140 
Signal 
SIGALRM 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
822 
Table 13-3. Signal Handler Scoreboard 
Function name 
Alrmhandler 
Installed 
src/main.c, 
line 380 
Removed 
Never 
Unsafe library functions used 
malloc(), 
free(), 
syslog() 
Notes This function is used to handle a network timeout from 
reading data. By default, it occurs after three minutes of 
inactivity. Interesting if you can interrupt read_data() in 
src/net.c, particularly when the buffer length is updated but 
before the buffer has been reallocated. 
When you're determining the risk level associated with a signal handler running at a 
certain time, you should user your scoreboard to help identify any issues. First, 
attempt to locate non-reentrant functions called while the signal handler is installed. 
This means finding functions that have static variables or that modify global variables 
or resources without any sort of locking mechanisms. 