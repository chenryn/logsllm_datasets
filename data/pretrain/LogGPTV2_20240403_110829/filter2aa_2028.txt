# Windows Kernel Shellcode Exploit

## Summary
- **What is an Exploit?**
- **Windows Shellcode**
- **Windows Kernel Shellcode**
- **CreateRemoteThread Backdoor ("byshell")**
- **Exploit Demonstration**
- **0day Exploit**

## What is an Exploit?
An exploit is a piece of software, a sequence of commands, or a data payload that takes advantage of a vulnerability in a system to cause unintended behavior. Common types of exploits include:
- Buffer overflow
- Heap overflow
- Format string vulnerabilities
- CGI or SQL injection

### Buffer Overflow
A buffer overflow occurs when more data is written to a buffer than it can hold, overwriting adjacent memory. This can be exploited to execute arbitrary code.

#### Example:
```c
void func(void) {
    char buffer[256];
    for (int i = 0; i < 1024; i++) {
        buffer[i] = 'A';
    }
}
```
In this example, the `buffer` is only 256 bytes, but 1024 bytes are written to it, causing an overflow.

## Windows Shellcode
Shellcode is a small piece of code used as the payload in the exploitation of a software vulnerability. It is typically machine code and is designed to perform specific actions, such as opening a shell, downloading and executing a file, or escalating privileges.

## Windows Kernel Shellcode
Kernel shellcode operates at the kernel level (Ring 0) and can be used to gain full control over the operating system. This type of shellcode is more complex and requires a deep understanding of the Windows kernel.

### Key Structures
- **_KTHREAD**:
  - `+0x02d State: UChar`
- **_KAPC_STATE**:
  - `+0x000 ApcListHead: [2] _LIST_ENTRY`
  - `+0x010 Process: Ptr32 _KPROCESS`
  - `+0x014 KernelApcInProgress: UChar`
  - `+0x015 KernelApcPending: UChar`
  - `+0x016 UserApcPending: UChar`

### Functions
- `KeInitializeApc`: Initializes an APC (Asynchronous Procedure Call).
- `KeInsertQueueApc`: Inserts an APC into the queue.

## CreateRemoteThread Backdoor ("byshell")
The "byshell" backdoor uses the `CreateRemoteThread` function to inject code into a remote process.

### Key Functions
- `OpenProcess`: Opens an existing local process object.
- `VirtualAllocEx`: Reserves or commits a region of memory within the virtual address space of a specified process.
- `WriteProcessMemory`: Writes data to an area of memory in a specified process.
- `CreateRemoteThread`: Creates a thread that runs in the virtual address space of another process.

### Monitoring Threads and Processes
- `PsSetCreateProcessNotifyRoutine`: Sets a notification routine for process creation.
- `PsLookupProcessByProcessId`: Looks up a process by its ID.
- `PsSetCreateThreadNotifyRoutine`: Sets a notification routine for thread creation.
- `PsLookupThreadByThreadId`: Looks up a thread by its ID.

## Windows Kernel Shellcode Exploit
To escalate privileges from user mode (Ring 3) to kernel mode (Ring 0), an exploit can use techniques such as:
- `OpenPhysicalMemory()`
- `MapPhysicalMemory()`

### Exploit Apc Inject Demo
This involves injecting an APC into the kernel to execute arbitrary code.

### Exploit Demonstration
- **Microsoft Jet Database Engine DB File Buffer Overflow Exploit**
- **Microsoft Exchange Server Remote Code Execution Exploit (MS05-021)**
- **Microsoft Internet Explorer "javaprxy.dll" Command Execution Exploit**

## Q&A
Feel free to ask any questions you may have about the content covered.

## References
- **Remote Windows Kernel Exploitation - Step Into the Ring 0 (PDF)**: [Link](http://www.eeye.com/~data/publish/whitepapers/research/OT20050205.FILE.pdf)
- **ring3->ring0 code**: [Link](http://zzzevazzz.blogchina.com/427939.html)
- **Monitor Thread & Process**: [Link](http://www.xfocus.net/articles/200503/788.html)
- **Inside Microsoft Windows 2000**
- **Byshell Backdoor**: [Link](http://www.xfocus.net/tools/200412/943.html)
- **MSDN**: [Link](https://docs.microsoft.com/en-us/windows/win32/api/index)

Thank you for your attention.