title:Preventing Exploits in Microsoft Office Documents Through Content
Randomization
author:Charles Smutz and
Angelos Stavrou
Preventing Exploits in Microsoft Oﬃce
Documents Through Content Randomization
Charles Smutz(B) and Angelos Stavrou
George Mason University, Fairfax, USA
{csmutz,astavrou}@gmu.edu
Abstract. Malware laden documents are a common exploit vector,
often used as attachments to phishing emails. Current approaches seek to
detect the malicious attributes of documents through signature match-
ing, dynamic analysis, or machine learning. We take a diﬀerent approach:
we perform transformations on documents that render exploits inopera-
ble while maintaining the visual interpretation of the document intact.
Our exploit mitigation techniques are similar in eﬀect to address space
layout randomization and data randomization, but we implement them
through permutations to the document ﬁle layout.
We randomize the data block order of Microsoft OLE ﬁles in a manner
similar to the inverse of a ﬁlesystem defragmention tool. This relocates
malicious payloads in both the original document ﬁle and in the memory
of the reader program. Through dynamic analysis, we demonstrate that
our approach indeed subdues in the wild exploits in both Oﬃce 2003
and Oﬃce 2007 documents while the transformed documents continue
to render benign content properly. We also show that randomizing the
compression used in zip based OOXML ﬁles mitigates some attacks. The
strength of these mechanisms lie in the number of content representa-
tion permutations, and the method applies where raw document content
is used in attacks. Content randomization methods can be performed
oﬄine and require only a single document scan while the user-perceived
delay when opening the transformed document is negligible.
1 Introduction
Leveraging documents as a vehicle for exploitation remains a very popular form
of malware propagation that is sometimes more eﬀective than mere drive-by
downloads [2]. Malicious documents are documents that have been modiﬁed to
contain malware, but are engineered to pose as benign documents with
useful content. For this reason, they are often called Trojan documents. Malware-
bearing documents typically exploit a vulnerability in the document reader pro-
gram, but they can also be crafted to carry exploits in the form of an embedded
object such as a media ﬁle. Another class of malicious documents are used as
a stepping stone and while they do not take advantage of a software ﬂaw, they
rely on the user to execute a macro or even a portable executable. Often social
engineering is used as part of the delivery vector to enhance the likelihood that
victims will execute the malware contained within the document.
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 225–246, 2015.
DOI: 10.1007/978-3-319-26362-5 11
226
C. Smutz and A. Stavrou
For years, client side exploits, including attacks against document readers,
have become more prevalent [6]. Despite eﬀorts at improving software security,
new vulnerabilities in document readers are still present today. For instance,
there were 17 CVEs issued for Microsoft Oﬃce in 2013 and 10 in 2014, many of
which were severe vulnerabilities facilitating arbitrary code execution. Document
ﬁle types, such as PDF and Microsoft Oﬃce documents, are consistently among
the top ﬁle types submitted to VirusTotal, implying current widespread concern
over the role of documents as malware carriers. The impetus to stop Trojan
documents is elevated due to their pervasive use in targeted espionage campaigns,
such as those waged against non-governmental organizations (NGOs) [4,8,11].
Numerous approaches have been proposed to detect malicious documents.
Signature matching, dynamic analysis, and machine learning based approaches
are used widely in practice. Despite these many approaches, malware authors
continue to evade detection and exploit computers successfully. Mitigations which
seek to defeat many classes of memory misuse based exploits, such as address
space layout randomization (ASLR) and data execution prevention (DEP), are
implemented in modern operating systems. However, these protections are com-
monly circumvented and exploitation is still possible [23]. Despite extensive
research and signiﬁcant investments in protective technology, document exploits
continue to remain a viable and popular vector for attack.
Our primary contribution is to demonstrate that modiﬁcations to documents
between creation and viewing can hinder misuse of document content, adding
additional exploit protection, while leaving them semantically equivalent with
very little end-user impact. The proposed approach is inspired by operating
system based exploit protections. Instead of seeking to detect the exploits in
documents, we seek to defeat exploits by scrambling the malicious payloads
used in attacks. While address space layout randomization is performed by the
operating system, we induce exploit protections in the reader program through
modiﬁcations to the input data. We modify a document at the ﬁle format level,
resulting in a transformed document which will render the same as the origi-
nal, but in which malicious content is disarranged and made inoperative. The
transformed document is used in place of the original document. The document
transformation should occur between the document creation and document open.
Network gateways, such as web proxies or mail servers, or network clients such
as web browsers or mail clients are ideal places to utilize our mechanisms. Hence,
deployment of our technique requires no modiﬁcation to the vulnerable docu-
ment reader or client operating system.
We explore various methods of document content randomization (DCR).
Microsoft Oﬃce formats are particularly amenable to document content frag-
ment randomization (DCFR) where we rearrange the layout of blocks in a doc-
ument ﬁle, without modifying the extracted data streams. We show that it is
possible to relocate malicious content in both the document ﬁle and document
reader memory. We also show that document content encoding randomization
(DCER) breaks exploits in practice by changing the raw representation of the
data in the ﬁle without changing the decoded stream. The strength of DCR
Preventing Exploits in Microsoft Oﬃce Documents
227
rests in the number of unique content representations that can be created. For
DCFR, this is driven by the number of block order permutations. For DCER,
the number of possible encodings is the limiting factor.
We evaluate these content randomization techniques by testing them against
hundreds of real world maldocs taken from VirusTotal. We test DCR on the three
most prevalent exploits in both .doc and .docx ﬁles in our malicious document
corpus. We ﬁnd that most attacks are mitigated. Furthermore, we measured the
performance of document transformation and found it to be comparable to an
anti-virus scan. Opening a transformed document is at most 3 % slower than
normal. We also validated that the transformed document rendered the same
as the original document. Lastly, we examine the limits of DCR in the face of
possible bypass techniques such as omelette shellcode.
The applicability of DCR is limited to foiling exploits that attempt to access
exploit material in a manner inconsistent with the way the document reader
accesses document data. Potential issues with DCR include breaking intrusion
detection system signatures and cryptographic signatures applied to the raw
document ﬁle.
2 Related Work
Detection of malicious documents using byte level analysis has long been studied
and deployed widely despite recognized weaknesses in detecting new or polymor-
phic samples [13,22,24].
Dynamic analysis of documents can provide additional detection power, but
it comes with computational cost, diﬃculty of implementation, and ambiguity in
discerning malware [27]. Applying machine learning to various features extracted
from documents, such as structural properties, has been shown to be eﬀective but
has also been challenged by mimicry attacks and adversarial learning [14,20,21].
We diﬀer from most document centric defenses. Instead of seeking to detect the
malicious content, we modify documents to foil exploit progression.
Our work builds upon years of research in probabilistic exploit mitigations
typically implemented in the operating system. Address space layout random-
ization (ASLR) [26] is adopted widely. It is eﬀective in defeating many classes
of exploits, but is circumvented through limitations in implementation [19], use
of heap sprays [28], or data leakage. As return oriented programming and sim-
ilar techniques [18] have become popular, mechanisms to relocate or otherwise
mitigate code (gadget) reuse have been proposed [16,29].
ASLR incurs little run time overhead because it relies on virtual memory
techniques where address translation and relocation are already performed. Code
level approaches such as instruction set randomization have also been proposed
but are computationally prohibitive [9]. Data space randomization enciphers
program data with random keys, but this method is not feasible in practice due
to deployment diﬃculty and computational expense [3]. Instead of implementing
these protection mechanisms in the execution environment, we seek to induce
barriers to malware by modiﬁcation to the document.
228
C. Smutz and A. Stavrou
3 Microsoft Oﬃce File Formats and Exploit Protections
We here describe the commonly used Microsoft Oﬃce ﬁle formats. The OLE
Compound Document Format was used as the default by Oﬃce 97-2003 and is
used in the ﬁles whose extension is typically .doc, .ppt, and .xls. Beginning in
Oﬃce 2007, the default ﬁle format is Oﬃce Open XML which use the .docx,
.pptx, and .xslx extensions. We also explain the most important exploit protec-
tion mechanisms provided by Oﬃce and Windows, such as ASLR and DEP.
3.1 OLE Compound Document Format
The ﬁle format used by Oﬃce 97-2003 is called by many names including Com-
pound File Binary Format and OLE Compound Document Format. We refer
to this format as the “OLE” ﬁle format throughout this paper, as many of the
libraries and utilities for parsing this format use variations of this name.
The OLE Compound Document format supports the storage of many inde-
pendent data streams and borrows many structures from ﬁlesystems, especially
the FAT ﬁlesystem. OLE ﬁles are used as a container for many ﬁle types includ-
ing Oﬃce 97-2003 (.doc/.ppt/.xls), Outlook Message (.msg), Windows Installer
(.msi), Windows Thumbnails (Thumbs.db), and ActiveX or OCX controls (.ocx).
All of these ﬁle formats use the OLE format as a base container, implementing
their own data structures inside of streams stored by the OLE format. In this
way, the OLE ﬁle format can be compared to the zip archive which serves at
the base container for diverse ﬁle formats including Java Archives (.jar), Oﬃce
Open XML Documents (.docx/.pptx./.xlsx), and Mozilla Extensions (.xpi).
Like a ﬁlesystem, the OLE format is comprised of many data blocks or sectors.
The vast majority of OLE ﬁles use a 512 byte sector size, but other sizes are
possible. Blocks in the OLE ﬁle are allocated and linked using allocation tables.
The individual data streams are logically organized in a hierarchical structure
similar to the ﬁle/folder organization of a ﬁlesystem. There is a directory entry
for each OLE stream containing the name of the ﬁle, the location of the ﬁrst
sector, and other metadata such as modiﬁcation times. The OLE format also
supports mini-streams which divide normal size sectors into 64 byte sectors,
using a second, embedded allocation table.
Except for the header, which must be located in the ﬁrst sector, all of the
contents in an OLE ﬁle can be located arbitrarily within the OLE ﬁle. Further-
more, there is no requirement for the various data streams to be arranged in
order or in contiguous blocks, although it is the norm.
The OLE format serves as a container for arbitrary data streams. Individual
ﬁle formats use this basic container but implement their own format for the
data in the various streams. We do not describe the particular OLE-based ﬁle
formats as they vary widely, are often proprietary and poorly documented, and
our study relies on the common container capability of OLE ﬁles.
Preventing Exploits in Microsoft Oﬃce Documents
229
3.2 Oﬃce Open XML File Format
The Oﬃce Open XML (OOXML) File Format became the default ﬁle format
for Oﬃce documents starting in Oﬃce 2007. These ﬁles use the extensions of
.docx, .pptx, and .xlsx. This format has been codiﬁed in international standards
ECMA-376 and ISO/IEC 29500.
The OOXML ﬁle format uses a zip ﬁle as a container, with individual objects
stored as ﬁles in the zip. The majority of the content in an OOXML ﬁle is XML
data. The document content is represented as XML with markup that is unique
to the OOXML format, but which is generally similar to other markup such as
HTML. The contents of an OOXML document can be modiﬁed by unzipping the
archive, modifying it with a text editor, and zipping the archive. However, the
relatively complex markup requires extensive knowledge to make major changes.
While text and formating can be represented using XML, other content, such
as images, are embedded in the document as separate ﬁles in the zip archive.
Some of the binary objects embedded in OOXML ﬁles utilize the OLE format.
Example of these ﬁles include Oﬃce 2003 ﬁles, some multimedia ﬁles, equations,
ActiveX controls, and executables.
3.3 Microsoft Oﬃce Exploit Protections
Macro based viruses have long been an issue in Oﬃce documents. All recent
Oﬃce versions disable the automatic execution of macros. The OOXML ﬁle
format assigns macro based ﬁles a separate extension, such as .docm instead of
.docx, making inadvertent execution of macros extremely diﬃcult. The OOXML
format is designed to minimize the amount of binary content and improve the
readability in the text content of documents, making the ﬁle format easier to
validate and simplifying the parser.
Data Execution Prevention (DEP) was enabled in Oﬃce 2010, which prevents
execution of arbitrary shellcode in the heap and has generally forced the adoption
of ROP code re-use techniques. ASLR was enabled by default in Windows Vista.
Oﬃce running on versions of Windows since Vista will have the beneﬁt of ASLR
for operating system libraries, but ASLR was not enabled for all Oﬃce provided
libraries until Oﬃce 2013. Hence, up until Oﬃce 2013, we observe use of ROP
gadgets from Oﬃce libraries without the need for an ASLR bypass.
Throughout this paper, we refer to the container format common to Oﬃce
2003 and many other ﬁles as OLE. We refer speciﬁcally to Oﬃce 2003 or Oﬃce
2007 ﬁles by their extension: .doc or .docx respectively. While we refer to these
ﬁle formats by the ﬁle extension of the document ﬁles (.doc/.docx) for brevity,
we also included the presentation (.ppt/.pptx) and spreadsheet (.xls/.xlsx) ﬁles
in our study. Our study relies on ﬁle format characteristics which are common
across the document, presentation, and spreadsheet ﬁle variations.
4 Approach
Inspired by the simplicity and generality of ASLR-like techniques, we seek to
obtain similar exploit mitigation outcomes through transformations to input
230
C. Smutz and A. Stavrou
data. The properties of a document can often directly and predictably inﬂuence
various run time attributes of the opening application. The memory of a reader
program is necessarily inﬂuenced by the ﬁle which it opens. We seek to ﬁnd
practical ways to make exploitation more diﬃcult by content induced variations
to the document ﬁle and reader memory. We call this general approach document
content randomization (DCR).
We study two speciﬁc forms of document entropy infusion: document content
fragment randomization (DCFR) and document content encoding randomization
(DCER). DCFR is analogous to ASLR in that the order of data blocks in the
document ﬁle is randomized. DCER can be compared to data space randomiza-
tion because we randomize ﬁle level encoding. Both of these approaches apply
to data stored in document ﬁles, but they can aﬀect memory as ﬁles and subﬁles
are loaded into memory.
These transformations are envisioned to operate on documents during trans-
fer between the potentially malicious source and the intended victim. They could
be employed in network gateways such as email relays or web proxies where
modiﬁcation is already supported. In practice, ﬁltering based on blacklists and
anti-virus scanning is already common at these points. The modiﬁcations to the
document could also be implemented on the client. For example, the web browser
could employ the mechanisms presented here at download time, similar to other
defenses such as blacklists and anti-virus.
We focus on Oﬃce documents, but most of the high level principles discussed
here apply to other ﬁle formats. Speciﬁcally, we seek to mitigate exploits in two
common document formats: Oﬃce 2003 (.doc) and Oﬃce 2007 (.docx).