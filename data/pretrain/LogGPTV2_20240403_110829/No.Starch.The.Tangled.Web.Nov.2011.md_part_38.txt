(2010), http://www.trusteer.com/sites/default/files/Google_Chrome_6.0_and
_7.0_Math.random_vulnerability.pdf.
14. “.NET Framework 3.0: toStaticHTML Method,” Microsoft, http://msdn
.microsoft.com/en-us/library/cc848922%28v=vs.85%29.aspx.
15. D. Ross, “IE8 Security Part IV: The XSS Filter,” IEBlog (2008), http://blogs
.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx.
16. E. Vela Nava and D. Lindsay, “Abusing Internet Explorer 8’s XSS Filters”
(2009), http://p42.us/ie8xss/Abusing_IE8s_XSS_Filters.pdf.
280 Notes for Pages 236–251
Chapter 17
1. “navigator.registerProtocolHandler,” Mozilla Developer Network, https://
developer.mozilla.org/en/DOM/window.navigator.registerProtocolHandler.
2. “Manipulating the Browser History,” Mozilla Developer Network, https://
developer.mozilla.org/en/DOM/Manipulating_the_browser_history/.
3. A. Langley and M. Belsche, “SPDY: An Experimental Protocol for a
Faster Web,” The Chromium Projects, http://www.chromium.org/spdy/
spdy-whitepaper/.
4. I. Fette and A. Melnikov, “The WebSocket Protocol,” IETF Request
forComments draft (2011), http://tools.ietf.org/html/draft-ietf-hybi-
thewebsocketprotocol-10/.
5. J. Rosenberg, M. Kaufman, M. Hiie, and F. Audet, “An Architectural
Framework for Browser Based Real-Time Communications,” IETF
Request for Comments draft (2011), http://tools.ietf.org/html/draft-
rosenberg-rtcweb-framework-00/.
6. I. Hickson, “HTML5: 5.6—Offline Web Applications,” World Wide Web
Consortium (2011), http://www.w3.org/TR/html5/offline.html.
7. A. Barth, “Simple HTTP State Management Mechanism,” IETF Request
for Comments draft (2010), http://tools.ietf.org/html/draft-abarth-cake-00/.
8. I. Hickson, “Web SQL Database: W3C Working Group Note 18,” World
Wide Web Consortium (2010), http://www.w3.org/TR/webdatabase/.
9. N. Mehta, J. Sicking, E. Graff, A. Popescu, and J. Orlow, “Indexed Data-
base API: W3C Working Draft 19,” World Wide Web Consortium (2011),
http://www.w3.org/TR/IndexedDB/.
10. I. Hickson, “Web Applications 1.0: Web Workers,” WHATWG (2011),
http://www.whatwg.org/specs/web-apps/current-work/complete/workers.html.
11. A. Popescu, “Geolocation API Specification: Editor’s Draft,” World
WideWeb Consortium (February 10, 2010), http://dev.w3.org/geo/api/
spec-source.html.
12. “Detecting Device Orientation,” Mozilla Developer Network, https://
developer.mozilla.org/en/detecting_device_orientation/.
13. L. Cai and H. Chen, “TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion,” Usenix HOTSEC (2011), http://
www.usenix.org/event/hotsec11/tech/final_files/Cai.pdf.
14. “Web Developer’s Guide to Prerendering in Chrome,” Google code labs,
http://code.google.com/chrome/whitepapers/prerender.html.
15. Z. Wang, “Navigation Timing: Editor’s Draft,” World Wide Web Consor-
tium (July 27, 2011), https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/
NavigationTiming/Overview.html.
Notes for Pages 256–259 281
16. J. Gregg, “Web Notifications Overview: W3C Editor’s Draft,” World Wide
Web Consortium (October 12, 2010), http://dev.w3.org/2006/webapi/
WebNotifications/publish/.
17. D.D. Tran, I. Oksanen, and I. Kliche, “The Media Capture API: W3C
Working Draft,” World Wide Web Consortium (September 28, 2010),
http://www.w3.org/TR/media-capture-api/.
282 Notes for Page 259
I N D E X
Symbols & Numbers Accept request header, 43
Access-Control-Allow-Origin header,
& (ampersand), in HTML, 71
237–238,240
 (angle brackets)
acrobat: scheme, 36
browser interpretation, 74–75
action parameter, for  tag, 80
in HTML, 71
ActionScript, 132–134
 blocks, 72, 78, 250
Active Server Pages, 75
 directive, 71
ActiveX, 129, 136–137
 directive, 76
address bars, 220
, for HTML comments, 72
and EV SSL, 65
 blocks, Internet Explorer
hiding, 221
and,75
manipulation, 256–257
@ directives, in CSS, 89–90
Adobe Flash, 119, 130, 132–134
\ (backslashes) in URLs, browser accep-
and cross-domain HTTP headers, 147n
tance of, 29
file handling without Content-Type, 199
` (backticks), as quote characters, 74, 111
HTML parser offered by plug-in, 133
!- directives, 76
policy file spoofing risks, 156–157
// fixed string, in URLs, 25
security rules, 154–157
% (percent sign), for character
Adobe Reader, 130
encoding,31
Adobe Shockwave Player, 132
. (period), hostnames with, and cookie-
ADS (Alternate Data Stream) Zone
setting algorithms, 159
Identifier, 231
?-directives, 76
advertisements, new window for, 217
 directive, 88
Akamai Download Manager, 137
; (semicolon), as delimiter
Allow-forms keyword, for sandbox
in HTTP headers, 48–49
parameter, 246
in URLs, 29
AllowFullScreen parameter, for Flash, 155
200–299 status codes, 54
AllowNetworking parameter, for Flash, 155
300–399 status codes, 55
Allow-same-origin keyword, for sandbox
400–499 status codes, 55–56
parameter, 246
500–599 status codes, 56
AllowScriptAccess parameter, for Flash, 154
Allow-scripts keyword, for sandbox
A parameter, 246
Allow-top-navigation keyword, for sandbox
 tag (HTML), 79
parameter, 246
target parameter, 174–175
Alternate Data Stream (ADS) Zone
about:blank document, origin inheritance,
Identifier, 231
165, 166–167
ambient authority, 60, 60n
about:config (Firefox), navigation risks, 188
ampersand (&), in HTML, 71
absolute URLs, vs. relative, 25
anchor element (HTML), specifying
Accept-Language request header, 43
name of, 28
angle brackets () BMP file format, 83
browser interpretation, 74–75  tag (HTML), 83
in HTML, 71 BOM (byte order marks), 208
anonymity, scripts and, 249 Breckman, John, 52n
anonymous requests, in CORS, 239 browser cache
anonymous windows, 175 information in, 59
antimalware, 236n poisoning, 60
Apache browser extensions and UI, 161
and Host headers, 47 browser-managed site permissions, 226–227
PATH_INFO, 201 browser market share, May 2011, 19
APNG file format, 83 browser-side scripts, 95–116
Apple QuickTime, 119, 130, 132 browser wars, 10–11, 233
Apple Safari. See Safari (Apple) buffer overflow, 265
 tag (HTML), 83, 128, 135, 183 bugs, preventing classes of, 7
application/binary, 212 Bush, Vannevar, 8
application/javascript document type, 118 byte order marks (BOM), 208
application/json document type, 118, 202
application/mathml+xml document type, 119 C
application/octet-stream document type,
200–201, 212 cache. See browser cache
application/x-www-for-urlencoded, 81 Cache-Control directive, 48, 59
Arce, Ivan, 2n cache manifests, 257
Arya, Abhishek, 209 cache poisoning, 189, 263
asynchronous XMLHttpRequest, 146 caching behavior, in HTTP, 58–60
Atom, 123 caching HTTP proxy, keepalive
 tag (HTML), 84, 119 sessionsand, 57
authentication, in HTTP, 62–63 Caja, 116
authorization, vs. authentication, 62n Cake (proposal), 257
Authorization header (HTTP), 63 call stack, limiting size, 216
callto: scheme, 36
 tag (HTML5), 183
B
CAPTCHA, 184–185, 185n
background parameter for HTML tags, 83 Cascading Style Sheets (CSS), 11, 12, 73,
background processes, in JavaScript, 258 83, 87–93
backslashes (\) in URLs, browser accep- basic syntax, 88–90
tance of, 29 character encoding, 91–92
backticks (`), as quote characters, 74, 111 interaction with HTML, 90
Bad Request status error (400), 55 opacity property, 179
bandwidth, and XML, 123n parser resynchronization risks, 90–91
Barth, Adam, 16, 177, 240, 241, 246, 257 property definitions, 89
Base64 encoding, 50n case of tags, HTML vs. XML, 72
basic credential-passing method, 63  blocks, 72, 78, 250
Bell-La Padula security model, 2, 4 certificate authorities, 64
Berners-Lee, Tim, 9, 41, 69 certificates
and semantic web, 72–73 extended validation, 65
World Wide Web browser, 9 warning dialog example, 66
World Wide Web Consortium, 11 cf: scheme, 36
 tag (HTML), 84, 119 characters
binary HTTP, 257 delimiting, in URLs, 29
bitmap images, browser recognition of, 118 encoding in CSS, 91–92
blacklists encoding in filenames, 49–51
of HTTP headers in XMLHttpRequest, 147 encoding in HTML, 76–78
malicious URLs, 236n encoding in JavaScript, 112–113
encoding in URLs, 31–35
_blank, as link target, 80
printable, browser treatment of, 32
284 INDEX
reserved, 31–35 Common UNIX Printing System (CUPS),
unreserved, 32 152–153
character sets Common Vulnerability Scoring System
byte order marks and detection, 208 (CVSS), 6–7
detection for non-HTTP files, 210–211 Common Weakness Enumeration (CWE), 6
handling, 206–211 complex selectors, in CSS, 88
for headers, 49–51 computer proficiency of user, 14
inheritance and override, 209 conditionals, explicit and implicit, in
markup-controlled, on subresources, HTML, 75–76
209–210 conflicting headers, resolution of, 47–48
sniffing, 264 CONNECT requests, 46, 54
in URLs, 33 Connolly, Dan, 9
@charset (CSS), 89 content directives, on subresources, 204
children objects in JavaScript, 108 Content-Disposition directive, 48, 84, 122
Chrome defensive uses, 203–204
autodetection of passive document NUL character and, 51
types, 205 plug-in-executed code and, 204
cached pages in, 37 user-controlled filenames in, 67
characters in URL scheme name content inclusion in HTML
ignored by, 25 hyperlinking and, 79–84
deleting JavaScript function, 103 type-specific, 82–84
and file extensions in URLs, 130 Content-Length header, 43, 52, 147
local file access, 160 in keepalive sessions, 56–58
modal dialogs for prompts, 219 content recognition, 197–211
navigation timing, 259 content rendering, plug-ins for, 127–138
prerendering page, 258–259 Content Security Policy (CSP), 242–245,
printable characters in, 32 250, 253
privileged JavaScript in, 161 criticisms of, 244–245
and realm string, 63 violations, 244
and RFC 2047 encoding, 50 content sniffing, 197–198, 205, 264
stored password retrieval, 228 Content-Type directive, 49, 71, 84
SWF file handling without application/binary, 212
Content-Type, 199 application/JavaScript, 118
time limits on continuously executing application/json, 118, 202
scripts, 215 application/mathml+xml, 119
WebKit parsing engine, 70n application/octet-stream, 200–201, 212
window.open() function and, 218 charset parameter, 206, 208
Windows Presentation Foundation image/jpeg, 118, 202, 205
plug-ins, 136 image/svg+xml, 124
chunked data transfers, 57–58 logic to handle absence, 198–199
clickjacking, 179, 180–181, 263 plug-ins and, 128, 204
click() method, 218 slash-delmited alphanumeric
client certificates, 64–66 tokensin,199
client-server architecture, 17–18 special values, 200–201
client-side data, 165 text/css, 118
client-side databases, 258 text/html, 124
client-side errors (400–499), 55–56 text/plain, 118, 156, 200–201, 204, 212
client-side scripts, restricting privileges of unrecognized, 202–203
HTML generated by, 250–251 and XML document parsing, 120
cloud, 15 control characters, JavaScript shorthand
Clover, Andrew, 184 notation, 112
command injection, 265 cookie-authenticated text, reading, 181
comments Cookie header. See cookies
in CSS syntax, 89 cookie injection, 264
in XHTML and HTML, 72
INDEX 285
cookies, 11, 257 D
deleting, 62
daap: scheme, 36
and DNS hijacking, 153
data: scheme, 37, 167–168
forcing, 264
data transfers, chunked, 57–58
limitations on third-party, 192–194
Date/If-Modified-Since header pair, 59
and same-origin policy, 150–151
deceptive framing, 180
security policy for, 149–153
dedicated workers, for background
semantics, 60–62
processes, 258
user data in, 67
default policy, CSP directive for, 243
CORS. See Cross-Origin Resource
default ports, for protocols, overriding, 27
Sharing(CORS)
DELETE method (HTTP), 53
CR characters, stripping from HTTP
deleting
headers, 45
cookies, 62
credential-passing methods, 63
JavaScript functions, 102–103
credentials, in URLs, 26
delimiting characters, in URLs, 29
CRLF (newline), 45
denial-of-service (DoS) attacks, 214–219,
cross-browser interactions, 16–17
248, 264
cross-document links, 8, 9
DeviceOrientation API, 258
cross-domain communications, and frame
dialog use restrictions, 218–219
descendant policy, 176–178
digest credential-passing method, 63
cross-domain content inclusion, 181–183
Digital Rights Management (DRM), 131
cross-domain policy files, 155–156
directory traversal, 265
cross-domain requests, 236–239
disable-xss-protection, 242n
Cross-Origin Resource Sharing (CORS),
 tag (HTML), 73
148, 236
DNS hijacking, and cookies, 153
current status, 239
DNS labels, security mechanisms