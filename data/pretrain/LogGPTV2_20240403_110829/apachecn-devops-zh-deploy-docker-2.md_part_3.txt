下一行非常重要，因为基本的 Ubuntu 映像几乎没有现成的东西，所以我们需要通过包管理器`apt`安装提供 ping 实用程序(`iputils-ping`)的包，就像我们在命令行上使用`RUN`指令安装 Docker 一样。然而，在我们安装它之前，我们还需要确保我们的更新索引是最新的，为此我们使用`apt-get update`。一会儿，我们将详细介绍为什么我们使用`&&`来链接`update`和`install`命令，但是现在，我们将神奇地忽略它，这样我们就不会过多地破坏我们的示例。
`CMD`指令指示 Docker，默认情况下，每当容器启动时，Docker 将运行`"ping" "google.com"`，而无需进一步的参数。该指令用于启动容器内的服务，它将容器的生命周期与该过程联系起来，因此如果我们的`ping`失败，我们的容器终止，反之亦然。您的 Dockerfile 中只能有一行`CMD`，所以要特别小心使用它的目的。
现在我们已经配置了整个容器，让我们构建它:
```
$ # Build using Dockerfile from current directory and tag our resulting image as "test_container"
$ docker build -t test_container . 
Sending build context to Docker daemon 1.716MB
Step 1/3 : FROM ubuntu:latest
---> 14f60031763d
Step 2/3 : RUN apt-get update -q && apt-get install -qy iputils-ping
---> Running in ad1ea6a6d4fc
Get:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [102 kB]
The following NEW packages will be installed:
iputils-ping libffi6 libgmp10 libgnutls-openssl27 libgnutls30 libhogweed4
libidn11 libnettle6 libp11-kit0 libtasn1-6
0 upgraded, 10 newly installed, 0 to remove and 8 not upgraded.
Need to get 1304 kB of archives.
Setting up iputils-ping (3:20121221-5ubuntu2) ...
Processing triggers for libc-bin (2.23-0ubuntu9) ...
---> eab9729248d9
Removing intermediate container ad1ea6a6d4fc
Step 3/3 : CMD ping google.com
---> Running in 44fbc308e790
---> a719d8db1c35
Removing intermediate container 44fbc308e790
Successfully built a719d8db1c35
Successfully tagged test_container:latest
```
正如对它的评论所暗示的，我们在这里对`docker build -t test_container .`所做的是，我们在当前目录中构建了容器(使用默认的 Dockerfile 配置名称)，并用名称`test_container`标记它。由于我们没有在`test_container`的末尾指定版本，Docker 给我们分配了一个名为`latest`的版本，从输出的末尾我们可以看到。如果我们仔细检查输出，我们还可以看到对基础映像的每个更改都会创建一个新的层，然后该层的标识被用作下一个指令的输入，每个层都会在映像上创建自己的文件系统差异。例如，如果我们再次运行构建，Docker 足够聪明，知道没有任何变化，它将再次使用这些层的缓存版本。将最终容器标识(`a719d8db1c35`)与上一次运行的容器标识进行比较:
```
$ docker build -t test_container . 
Sending build context to Docker daemon 1.716MB
Step 1/3 : FROM ubuntu:latest
---> 14f60031763d
Step 2/3 : RUN apt-get update -q && apt-get install -qy iputils-ping
---> Using cache
---> eab9729248d9
Step 3/3 : CMD ping google.com
---> Using cache
---> a719d8db1c35
Successfully built a719d8db1c35
Successfully tagged test_container:latest
```
如果在 Dockerfile 的指令中检测到任何更改，Docker 将重建该层和任何后续层，以确保一致性。这个功能和选择性的“缓存破坏”也将在后面介绍，它在管理您的存储库和映像大小方面有着非常重要的作用。
构建好容器后，让我们看看它是否真的工作(要退出循环，请按 *Ctrl* + *C* ):
```
$ # Run the image tagged "test_container"
$ docker run test_container 
PING google.com (216.58.216.78) 56(84) bytes of data.
64 bytes from ord30s21-in-f14.1e100.net (216.58.216.78): icmp_seq=1 ttl=52 time=45.9 ms
64 bytes from ord30s21-in-f14.1e100.net (216.58.216.78): icmp_seq=2 ttl=52 time=41.9 ms
64 bytes from ord30s21-in-f14.1e100.net (216.58.216.78): icmp_seq=3 ttl=52 time=249 ms
^C
--- google.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min/avg/max/mdev = 41.963/112.460/249.470/96.894 ms
```
又成功了！你写了你的第一个运行的 Docker 容器！
# 破坏缓存
在我们刚刚写的容器中，我们稍微浏览了一下`RUN apt-get update -q && apt-get install -qy iputils-ping`行，因为它需要在这里进行更深入的讨论。在大多数 Linux 发行版中，包一直在版本中循环，但是这些索引的列表告诉我们在哪里可以找到它们，这些索引在创建时会被烘焙到原始的 Docker 映像中(在本例中为`ubuntu:latest`)。在我们可以安装软件包之前，在大多数情况下，我们的索引文件已经过时太久了(如果它们还没有被完全删除)，所以我们需要更新它们。将这条`&&`连接线分成两条独立的线将适用于第一栋建筑:
```
RUN apt-get update -q
RUN apt-get install -qy iputils-ping
```
但是当您稍后向第二行添加另一个包时会发生什么，如下行所示？
```
RUN apt-get install -qy curl iputils-ping
```
在这种情况下，Docker 不是很聪明，会认为`update`行没有变化，不会再次运行更新命令，因此它将使用来自更新层缓存的状态，然后继续下一个试图安装`curl`的更新(因为该更新自上次构建以来确实发生了变化)，如果在存储库中轮换了足够多的版本，这很可能会失败，因为索引将再次过时。为了防止这种情况发生，我们将`update`和`install`命令与`&&`连接起来，这样它们就被视为一个指令并创建一个层，在这种情况下，更改这两个连接命令中的任何一个的任何部分都将破坏缓存并正确运行`update`。可悲的是，随着您越来越多地使用可扩展的 Docker 组件，使用类似这样的奇怪技巧来管理缓存并进行选择性的缓存破坏将成为您工作的一大部分。
# 更实用的容器
这可能是我们开始偏离其他 Docker 材料的地方，这些材料实际上假设只有这些基本知识，剩下的工作是小菜一碟，而实际上完全不是这样。这不是火箭科学，但这些简单的例子确实不足以让我们到达我们需要的地方，所以我们将使用一个基于我们以前与 NGINX 的工作的实际例子，并创建一个容器，使用这个网络服务器映像来提供和服务我们将烘焙到映像中的内容。
This example and all the other ones in this book are also available on GitHub at [https://github.com/sgnn7/deploying_with_docker](https://github.com/sgnn7/deploying_with_docker). You can use either `git` or their web interface to follow along with the examples, but all examples of code that we will use will be directly included in the book too.
要开始创建我们的 web 服务器，我们需要创建一个目录来存放我们的所有文件:
```
$ mkdir ~/advanced_nginx
$ cd ~/advanced_nginx
```
我们需要创建的第一个文件是我们的虚拟文本文件，我们将尝试在映像中提供:
```
$ echo "Just a test file" > test.txt
```
我们需要的下一个文件是所需的 NGINX 配置。将以下文本放入名为`nginx_main_site.conf`的文件中:
```
    server {
      listen 80;
      server_name _;
      root /srv/www/html;
      # Deny access to any files prefixed with '.'
      location ~/\. {
        deny all;
      }
      # Serve up the root path at /
      location / {
        index index.html;
        autoindex on;
      }
    }
```
如果你从未使用过 NGINX，让我们来看看这个文件是做什么的。在第一个块中，我们正在创建一个`server`，它在端口`80`上监听，该端口根植于映像上的`/srv/www/html`。第二个块，虽然不是严格需要的，并且需要为更大的网站进行更改，但对于任何在 NGINX 上工作的人来说，应该是肌肉记忆，因为它阻止下载隐藏文件，如`.htaccess`、`.htpasswd`，以及许多其他不应该公开的文件。最后一个块只是确保从`root`读取任何以`/`开始的路径，如果没有提供索引文件，它将使用`index.html`。如果没有这样的文件可用，并且我们在一个目录中，`autoindex`确保它可以向您显示一个人类可读的目录列表。
While this NGINX configuration is functional, there are many things that it is not including (SSL configuration, logging, error files, file lookup matching, and so on), but that is mostly because this is a book is trying to focus on Docker itself and not NGINX. If you would like to learn more about how to fully and properly configure NGINX, you can visit [https://nginx.org/en/docs/](https://nginx.org/en/docs/) for more information.
写好配置后，我们现在可以创建 Docker 文件，它将获取我们的测试文件、配置文件和 NGINX 映像，并将其全部转换为 Docker 映像，该映像运行 web 服务器并提供我们的测试文件:
```
FROM nginx:latest
# Make sure we are fully up to date
RUN apt-get update -q && \
 apt-get dist-upgrade -y
# Remove the default configuration
RUN rm /etc/nginx/conf.d/default.conf
# Create our website's directory and make sure
# that the webserver process can read it
RUN mkdir -p /srv/www/html && \
 chown nginx:nginx /srv/www/html
# Put our custom server configuration in
COPY nginx_main_site.conf /etc/nginx/conf.d/
# Copy our test file in the location that is