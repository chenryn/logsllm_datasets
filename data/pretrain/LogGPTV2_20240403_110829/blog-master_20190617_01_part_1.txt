## PostgreSQL 自动vacuum(垃圾回收)与手动vacuum的参数详解        
### 作者          
digoal          
### 日期          
2019-06-17          
### 标签          
PostgreSQL , vacuum , autovacuum , 垃圾回收 , 参数        
----          
## 背景       
PostgreSQL 11以及以前的版本，默认使用的表存储是HEAP存储，用于并发多版本控制的所有版本都是存储在HEAP内部，而不是独立的UNDO文件中。所以如果表有更新、删除时，实际上需要VACUUM动作来回收垃圾版本。      
除了垃圾回收以外，由于PG目前XID（事务号）使用的是32位长度，所以需要轮询使用，事务号被记录在TUPLE的头信息中，是tuple可见性判断的关键。既然XID是轮询使用，为了可见性判断的正确性，需要在TUPLE的年龄超过20亿之前对TUPLE头部的XID进行FREEZE操作，保证可见性（FREEZE状态的TUPLE对所有事务都是可见的，不需要依赖XID的比较判断）。      
垃圾回收和FREEZE、包括ANALYZE这三种操作(analyze是收集统计信息)，都是由vacuum命令来完成的。      
vacuum命令又分为“自动”和“手动”调用。      
## 一、自动触发vacuum、analyze、freeze      
目前PG的自动垃圾回收（自动vacuum）的调度做得还是比较好的，例如有一个autovacuum launcher进程在间歇性(autovacuum_naptime)的监测PG集群中的所有database，检查database中是否有需要执行(vacuum, freeze, analyze)的table。      
可配置自动调度参数包括：      
https://www.postgresql.org/docs/devel/runtime-config-autovacuum.html      
### track_counts (boolean)      
必须开启track_counts，因为autovacuum需要依赖计数器，否则无法知道dead tuples的数量以判断是否需要触发vacuum,analyze。      
Enables collection of statistics on database activity.       
This parameter is on by default, because the autovacuum daemon needs the collected information. Only superusers can change this setting.      
### autovacuum (boolean)      
Controls whether the server should run the autovacuum launcher daemon.       
This is on by default; however, track_counts must also be enabled for autovacuum to work.       
This parameter can only be set in the postgresql.conf file or on the server command line;       
however, autovacuuming can be disabled for individual tables by changing table storage parameters.      
Note that even when this parameter is disabled, the system will launch autovacuum processes if necessary to prevent transaction ID wraparound.       
See Section 24.1.5 for more information.      
### log_autovacuum_min_duration (integer)      
向日志打印autovacuum的统计信息（以及资源消耗），大于阈值，输出这次autovacuum触发的事件的统计信息。      
Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds.       
Setting this to zero logs all autovacuum actions.       
-1 (the default) disables logging autovacuum actions.       
For example, if you set this to 250ms then all automatic vacuums and analyzes that run 250ms or longer will be logged.       
In addition, when this parameter is set to any value other than -1, a message will be logged if an autovacuum action is skipped due to a conflicting lock or a concurrently dropped relation. Enabling this parameter can be helpful in tracking autovacuum activity. This parameter can only be set in the postgresql.conf file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.      
### autovacuum_max_workers (integer)      
autovacuum同时最多允许发起多少个vacuum工作进程(autovacuum work process)。设置太大的话容易引起资源使用过多。      
Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.      
### autovacuum_naptime (integer)      
autovacuum launcher监测进程多久轮询完所有数据库，轮询的目的是了解数据库中有哪些对象需要vacuum、freeze、analyze。例如1分钟，PG实例中有10个数据库，表示每分钟要轮询完10个数据库。      
Specifies the minimum delay between autovacuum runs on any given database. In each round the daemon examines the database and issues VACUUM and ANALYZE commands as needed for tables in that database. The delay is measured in seconds, and the default is one minute (1min). This parameter can only be set in the postgresql.conf file or on the server command line.      
### autovacuum_vacuum_threshold (integer)      
当表的垃圾版本(dead tuples)超过 ```autovacuum_vacuum_threshold + autovacuum_vacuum_scale_factor*reltuples``` ，触发vacuum。      
Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples. This parameter can only be set in the postgresql.conf file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.      
### autovacuum_analyze_threshold (integer)      
当上次analyze以来表的新增记录超过 ```autovacuum_analyze_threshold + autovacuum_analyze_scale_factor*reltuples``` ，触发analyze。      
Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples. This parameter can only be set in the postgresql.conf file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.      
### autovacuum_vacuum_scale_factor (floating point)      
Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size). This parameter can only be set in the postgresql.conf file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.      
### autovacuum_analyze_scale_factor (floating point)      
Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.1 (10% of table size). This parameter can only be set in the postgresql.conf file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.      
### autovacuum_freeze_max_age (integer)      
当表的年龄超过autovacuum_freeze_max_age，即使关闭autovacuum，数据库实例依旧会强行触发vacuum freeze。      
Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled.      
Vacuum also allows removal of old files from the pg_xact subdirectory, which is why the default is a relatively low 200 million transactions. This parameter can only be set at server start, but the setting can be reduced for individual tables by changing table storage parameters. For more information see Section 24.1.5.      
### autovacuum_multixact_freeze_max_age (integer)      
当表的multixacts年龄超过autovacuum_freeze_max_age，即使关闭autovacuum，数据库实例依旧会强行触发vacuum freeze。      
Specifies the maximum age (in multixacts) that a table's pg_class.relminmxid field can attain before a VACUUM operation is forced to prevent multixact ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled.      
Vacuuming multixacts also allows removal of old files from the pg_multixact/members and pg_multixact/offsets subdirectories, which is why the default is a relatively low 400 million multixacts. This parameter can only be set at server start, but the setting can be reduced for individual tables by changing table storage parameters. For more information see Section 24.1.5.1.      
### autovacuum_vacuum_cost_delay (floating point)      
autovacuum触发的vacuum、freeze、analyze的平滑化调度，但是注意：设置过大，会导致AUTOVACUUM launcher触发的vacuum耗时过长。所以也不是好事，特别是大表，耗时会非常长，可能导致膨胀等问题。      
Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 2 milliseconds. This parameter can only be set in the postgresql.conf file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.      
### autovacuum_vacuum_cost_limit (integer)      
autovacuum触发的vacuum、freeze、analyze的平滑化调度，但是注意：设置过大，会导致AUTOVACUUM launcher触发的vacuum耗时过长。所以也不是好事，特别是大表，耗时会非常长，可能导致膨胀等问题。      
Specifies the cost limit value that will be used in automatic VACUUM operations.     
If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.     
Note that the value is distributed proportionally among the running autovacuum workers, if there is more than one, so that the sum of the limits for each worker does not exceed the value of this variable.     
This parameter can only be set in the postgresql.conf file or on the server command line;     
but the setting can be overridden for individual tables by changing table storage parameters.      
## 二、手动执行vacuum、analyze、freeze      
https://www.postgresql.org/docs/devel/runtime-config-resource.html#RUNTIME-CONFIG-RESOURCE-VACUUM-COST      
### vacuum_cost_delay (floating point)      
手工执行的vacuum、freeze、analyze的平滑化调度，但是注意：设置过大，会导致AUTOVACUUM launcher触发的vacuum耗时过长。所以也不是好事，特别是大表，耗时会非常长，可能导致膨胀等问题。      
The length of time, in milliseconds, that the process will sleep when the cost limit has been exceeded. The default value is zero, which disables the cost-based vacuum delay feature. Positive values enable cost-based vacuuming.      
When using cost-based vacuuming, appropriate values for vacuum_cost_delay are usually quite small, perhaps less than 1 millisecond. While vacuum_cost_delay can be set to fractional-millisecond values, such delays may not be measured accurately on older platforms. On such platforms, increasing VACUUM's throttled resource consumption above what you get at 1ms will require changing the other vacuum cost parameters. You should, nonetheless, keep vacuum_cost_delay as small as your platform will consistently measure; large delays are not helpful.      
### vacuum_cost_page_hit (integer)      
平滑化调度相关的代价计算方法。当vacuum的这个page已经在buffer时，它的代价是多少？      
The estimated cost for vacuuming a buffer found in the shared buffer cache. It represents the cost to lock the buffer pool, lookup the shared hash table and scan the content of the page. The default value is one.      
### vacuum_cost_page_miss (integer)      
平滑化调度相关的代价计算方法。当vacuum的这个page未在buffer时，它的代价是多少？      
The estimated cost for vacuuming a buffer that has to be read from disk. This represents the effort to lock the buffer pool, lookup the shared hash table, read the desired block in from the disk and scan its content. The default value is 10.      
### vacuum_cost_page_dirty (integer)      
平滑化调度相关的代价计算方法。当vacuum的这个page之前不是个脏页， 由于VACUUM对它的内容造成了改变时（一个clean page vacuum内容后变成了dirty page），它的代价是多少？      
The estimated cost charged when vacuum modifies a block that was previously clean. It represents the extra I/O required to flush the dirty block out to disk again. The default value is 20.      
### vacuum_cost_limit (integer)      
手工执行的vacuum、freeze、analyze的平滑化调度，但是设置过大，会导致vacuum耗时过长。所以也不是好事，特别是大表，耗时会非常长，可能导致膨胀等问题。    
The accumulated cost that will cause the vacuuming process to sleep. The default value is 200.      
#### Note      
There are certain operations that hold critical locks and should therefore complete as quickly as possible. Cost-based vacuum delays do not occur during such operations. Therefore it is possible that the cost accumulates far higher than the specified limit. To avoid uselessly long delays in such cases, the actual delay is calculated as vacuum_cost_delay * accumulated_balance / vacuum_cost_limit with a maximum of vacuum_cost_delay \* 4.      
## 三、自动触发、手动执行的vacuum,freeze,analyze，行为一样吗？      
https://www.postgresql.org/docs/devel/runtime-config-client.html#RUNTIME-CONFIG-CLIENT-STATEMENT      
答案：一样。      
不管是自动还是手动vacuum,freeze,analyze，它们在执行的过程中的行为同样都受到如下参数的影响。      
### vacuum_freeze_table_age (integer)      
当表的pg_class.relfrozenxid年龄大于等于vacuum_freeze_table_age，VACUUM会扫描全表，并执行freeze。（内核优化：跳过vm文件中已经标注为FREEZE的PAGE）      
VACUUM performs an aggressive scan if the table's pg_class.relfrozenxid field has reached the age specified by this setting. An aggressive scan differs from a regular VACUUM in that it visits every page that might contain unfrozen XIDs or MXIDs, not just those that might contain dead tuples. The default is 150 million transactions. Although users can set this value anywhere from zero to two billions, VACUUM will silently limit the effective value to 95% of autovacuum_freeze_max_age, so that a periodical manual VACUUM has a chance to run before an anti-wraparound autovacuum is launched for the table. For more information see Section 24.1.5.      
### vacuum_freeze_min_age (integer)      
freeze时，哪些tuple会被置为frozen状态呢？年龄大于或等于vacuum_freeze_min_age的tuple。    
在自动触发(由于表的年龄大于autovacuum_freeze_max_age) 或 手动执行vacuum freeze，或autovacuum触发、手工执行VACUUM时表的年龄大于等于vacuum_freeze_table_age时。以上几种情况的vacuum都将会进入FREEZE模式(扫描全表，并执行freeze)。    
有效记录的年龄大于vacuum_freeze_min_age的，将该有效记录设置为freeze状态。        
普通vacuum(不带freeze的)，并且表的年龄小于vacuum_freeze_table_age，不会执行FREEZE，所以不受这个参数影响。      
Specifies the cutoff age (in transactions) that VACUUM should use to decide whether to freeze row versions while scanning a table. The default is 50 million transactions. Although users can set this value anywhere from zero to one billion, VACUUM will silently limit the effective value to half the value of autovacuum_freeze_max_age, so that there is not an unreasonably short time between forced autovacuums. For more information see Section 24.1.5.      
### vacuum_multixact_freeze_table_age (integer)      
当表的pg_class.relminmxid年龄大于vacuum_multixact_freeze_table_age，VACUUM会扫描全表，并执行freeze。（内核优化：跳过vm文件中已经标注为FREEZE的PAGE）      
VACUUM performs an aggressive scan if the table's pg_class.relminmxid field has reached the age specified by this setting. An aggressive scan differs from a regular VACUUM in that it visits every page that might contain unfrozen XIDs or MXIDs, not just those that might contain dead tuples. The default is 150 million multixacts. Although users can set this value anywhere from zero to two billions, VACUUM will silently limit the effective value to 95% of autovacuum_multixact_freeze_max_age, so that a periodical manual VACUUM has a chance to run before an anti-wraparound is launched for the table. For more information see Section 24.1.5.1.      
### vacuum_multixact_freeze_min_age (integer)      
Specifies the cutoff age (in multixacts) that VACUUM should use to decide whether to replace multixact IDs with a newer transaction ID or multixact ID while scanning a table. The default is 5 million multixacts. Although users can set this value anywhere from zero to one billion, VACUUM will silently limit the effective value to half the value of autovacuum_multixact_freeze_max_age, so that there is not an unreasonably short time between forced autovacuums. For more information see Section 24.1.5.1.      
### vacuum_cleanup_index_scale_factor (floating point)      
[《PostgreSQL 12 preview - vacuum 新增开关: index_cleanup , 是否同时回收索引》](../201905/20190503_01.md)        
[《PostgreSQL 11 内核优化 - 降低vacuum cleanup阶段index scan概率 ( vacuum_cleanup_index_scale_factor , skip index vacuum cleanup stage)》](../201902/20190201_03.md)        
Specifies the fraction of the total number of heap tuples counted in the previous statistics collection that can be inserted without incurring an index scan at the VACUUM cleanup stage. This setting currently applies to B-tree indexes only.      