1000
800
600
400
200
0
1600
1400
1200
1000
800
600
400
200
0
Syntia
0
2000
4000
6000
8000
10000
12000
# Iterations
Enumerative MCTS
0
2000
4000
6000
8000
10000
12000
# Iterations
Figure 1: Syntia and enumerative MCTS distance evolution
(expression successfully synthesized)
Xyntia
Syntia
)
%
(
e
t
a
R
s
s
e
c
c
u
S
100
90
80
70
60
50
40
30
20
10
0
1
10
60
600
Timeout (s)
Figure 2: Syntia vs Xyntia success rate depending on timeout
2 RELATED WORK
Blackbox deobfuscation. The pioneering work by Blazytko et al.
[6], propose Syntia to simplify obfuscated blocks of code relying
only on observed inputs-outputs relations. Our work complete their
experimental evaluation, generalize and improve their approach:
Xyntia with 1 s/expr. finds twice more expressions than Syntia with
600 s/expr, some of which Syntia cannot find within 12h.
White- and greybox deobfuscation. Several recent works lever-
age whitebox symbolic methods for deobfuscation (“symbolic de-
obfuscation”) [4, 9, 17, 22, 24, 29]. Unfortunately, they are sensitive
to code complexity and efficient countermeasures are available
[11, 19, 20, 30] – while Xyntia is immune to them. David et al. [14]
2
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2385Search-Based Local Black-Box Deobfuscation:
Understand, Improve and Mitigate
(Poster)
recently proposed QSynth, a greybox deobfuscation method combin-
ing I/O relationship caching (blackbox) and incremental reasoning
along the target expression (whitebox). Yet, it is sensitive to massive
syntactic obfuscation where Xyntia is not. Furthermore, QSynth
works on a simple grammar. It is unclear whether its caching tech-
nique would scale to larger ones like those of Xyntia and Syntia.
Program synthesis. Program synthesis aims at finding a function
from a specification which can be given either formally, in natural
language or as I/O relations – the case we are interested in here.
Three main families of methods exist [15]: enumerative, constraint
solving and stochastic. Enumerative search does enumerate all pro-
grams starting from the simpler one, pruning snippets incoherent
with the specification and returning the first code meeting the spec-
ification. We compare to one of such method – CVC4 [5], winner
of the SyGus ’19 syntax-guided synthesis competition [2] – and
showed that our approach is more appropriate to deobfuscation.
Constraint solving methods [16] on the other hand encode the
skeleton of the target program as a first order satisfiability problem
and use an off-the-shelf SMT solver to infer an implementation
meeting specification. However, it is less efficient than enumerative
and stochastic methods [1]. Finally, stochastic methods [23] tra-
verse the search space randomly in the hope of finding a program
consistent with a specification. Contrary to them, we solve the
deobfuscation problem in a fully blackbox way (not relying on the
obfuscated code, nor on an estimation of the result size).
3 CONCLUSION
Blackbox deobfuscation is a promising recent research area. The
field has been barely explored yet and the pros and cons of such
methods are still unclear. This article deepens the state of search-
based blackbox deobfuscation in three different directions. First,
we define a novel generic framework for search-based blackbox
deobfuscation (encompassing prior works such as Syntia), we iden-
tify that the search space underlying code deobfuscation is too
unstable for simulation-based methods, and advocate the use of
S-metaheuristics. Second, we take advantage of our framework to
carefully design Xyntia, a new search-based blackbox deobfuscator.
Xyntia significantly outperforms Syntia in terms of success rate,
while keeping its good properties – especially, Xyntia is completely
immune to the most recent protections. Finally, we propose the two
first anti search-based blackbox deobfuscation methods, completely
preventing Xyntia and Syntia attacks for reasonable cost.
REFERENCES
[1] Rajeev Alur, Rastislav Bodík, Garvit Juniwal, Milo M. K. Martin, Mukund
Raghothaman, Sanjit A. Seshia, Rishabh Singh, Armando Solar-Lezama, Emina
Torlak, and Abhishek Udupa. 2013. Syntax-guided synthesis. In Formal Methods
in Computer-Aided Design, FMCAD 2013, Portland, OR, USA, October 20-23, 2013.
IEEE.
[2] Rajeev Alur, Dana Fisman, Saswat Padhi, Rishabh Singh, and Abhishek Udupa.
2019. SyGuS-Comp 2018: Results and Analysis. (2019). http://arxiv.org/abs/1904.
07146
[3] Sebastian Banescu, Christian S. Collberg, Vijay Ganesh, Zack Newsham, and
Alexander Pretschner. 2016. Code obfuscation against symbolic execution attacks.
In Annual Conference on Computer Security Applications, ACSAC 2016.
[4] Sébastien Bardin, Robin David, and Jean-Yves Marion. 2017. Backward-Bounded
DSE: Targeting Infeasibility Questions on Obfuscated Codes. In 2017 IEEE Sym-
posium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017.
[5] Clark Barrett, Christopher L. Conway, Morgan Deters, Liana Hadarean, Dejan
Jovanovi’c, Tim King, Andrew Reynolds, and Cesare Tinelli. 2011. CVC4. In
3
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Proceedings of the 23rd International Conference on Computer Aided Verification
(CAV ’11), Ganesh Gopalakrishnan and Shaz Qadeer (Eds.). Springer.
[6] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2017.
Syntia: Synthesizing the Semantics of Obfuscated Code. In Usenix Security.
[7] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2018.
Syntia: Breaking State-of-the-Art Binary Code Obfuscation via Program Synthesis.
Black Hat Asia (2018).
[8] Cameron B Browne, Edward Powley, Daniel Whitehouse, Simon M Lucas, Peter I
Cowling, Philipp Rohlfshagen, Stephen Tavener, Diego Perez, Spyridon Samoth-
rakis, and Simon Colton. 2012. A survey of monte carlo tree search methods.
IEEE Transactions on Computational Intelligence and AI in games (2012).
[9] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn Xiaodong
Song, and Heng Yin. 2008. Automatically Identifying Trigger-based Behavior in
Malware. In Botnet Detection: Countering the Largest Security Threat. Springer.
[10] C. Collberg, S. Martin, J. Myers, and B. Zimmerman. [n.d.]. The Tigress C
Diversifier/Obfuscator. http://tigress.cs.arizona.edu/
[11] Christian Collberg and Jasvir Nagra. 2009. Surreptitious Software: Obfuscation,
Watermarking, and Tamperproofing for Software Protection.
[12] Christian Collberg, Clark Thomborson, and Douglas Low. 1997. A taxonomy of
obfuscating transformations.
[13] Christian Collberg, Clark Thomborson, and Douglas Low. 1998. Manufacturing
cheap, resilient, and stealthy opaque constructs. In Proceedings of the 25th ACM
SIGPLAN-SIGACT symposium on Principles of programming languages.
[14] Robin David, Luigi Coniglio, and Mariano Ceccato. 2020. QSynth-A Program
Synthesis based Approach for Binary Code Deobfuscation. In BAR 2020 Workshop.
[15] Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, et al. 2017. Program synthesis.
Foundations and Trends® in Programming Languages (2017).
[16] Susmit Jha, Sumit Gulwani, Sanjit A Seshia, and Ashish Tiwari. 2010. Oracle-
guided component-based program synthesis. In 2010 ACM/IEEE 32nd International
Conference on Software Engineering. IEEE.
[17] Johannes Kinder. 2012. Towards Static Analysis of Virtualization-Obfuscated
Binaries. In 19th Working Conference on Reverse Engineering, WCRE.
[18] Helena Ramalhinho Lourenço, Olivier C Martin, and Thomas Stützle. 2019. Iter-
ated local search: Framework and applications. In Handbook of metaheuristics.
Springer.
[19] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion.
2019. How to kill symbolic deobfuscation for free (or: unleashing the potential of
path-oriented protections). In Proceedings of the 35th Annual Computer Security
Applications Conference.
[20] Mathilde Ollivier, Sébastien Bardin, Richard Bonichon, and Jean-Yves Marion.
2019. Obfuscation: where are we in anti-DSE protections?(a first attempt). In
Proceedings of the 9th Workshop on Software Security, Protection, and Reverse
Engineering.
[21] Oreans Technologies. 2020. Themida – Advanced Windows Software Protection
System. http://oreans.com/themida.php.
[22] Jonathan Salwan, Sébastien Bardin, and Marie-Laure Potet. 2018. Symbolic
deobfuscation: from virtualized code back to the original. In 5th Conference on
Detection of Intrusions and malware & Vulnerability Assessment (DIMVA).
[23] Eric Schkufza, Rahul Sharma, and Alex Aiken. 2013. Stochastic superoptimization.
ACM SIGARCH Computer Architecture News (2013).
[24] Sebastian Schrittwieser, Stefan Katzenbeisser, Johannes Kinder, Georg Merz-
dovnik, and Edgar Weippl. 2016. Protecting Software Through Obfuscation: Can
It Keep Pace with Progress in Code Analysis? ACM Comput. Surv. (2016).
[25] Jon Stephens, Babak Yadegari, Christian S. Collberg, Saumya Debray, and Carlos
Scheidegger. 2018. Probabilistic Obfuscation Through Covert Channels. In 2018
IEEE European Symposium on Security and Privacy, EuroS&P 2018.
[26] El-Ghazali Talbi. 2009. Metaheuristics: From Design to Implementation. Wiley
Publishing.
[27] VM Protect Software. 2020. VMProtect Software Protection. http://vmpsoft.com.
[28] Babak Yadegari and Saumya Debray. 2015. Symbolic Execution of Obfuscated
Code. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Com-
munications Security. Association for Computing Machinery.
[29] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. 2015. A
Generic Approach to Automatic Deobfuscation of Executable Code. In Symposium
on Security and Privacy, SP.
[30] Yongxin Zhou, Alec Main, Yuan X. Gu, and Harold Johnson. 2007. Information
Hiding in Software with Mixed Boolean-arithmetic Transforms. In Proceedings of
the 8th International Conference on Information Security Applications (WISA’07).
Springer-Verlag.
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2386