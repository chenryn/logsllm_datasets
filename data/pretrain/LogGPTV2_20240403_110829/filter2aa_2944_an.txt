post("/spaces", spaceController::createSpace);  ..
If you save the file and restart the server, you can now see unauthenticated requests to
create a space be rejected with a 401 error asking for authentication, as in the follow-
ing example:
$ curl -i -d ‘{"name":"test space","owner":"demo"}’
➥ -H ‘Content-Type: application/json’ https://localhost:4567/spaces
HTTP/1.1 401 Unauthorized
Date: Mon, 18 Mar 2019 14:51:40 GMT
WWW-Authenticate: Basic realm="/", charset="UTF-8"
...
Retrying the request with authentication credentials allows it to succeed:
First, try to authenticate the user.
Then perform 
audit logging.
Finally, add the check if 
authentication was 
successful.
90
CHAPTER 3
Securing the Natter API
$ curl -i -d ‘{"name":"test space","owner":"demo"}’
➥ -H ‘Content-Type: application/json’ -u demo:changeit
➥ https://localhost:4567/spaces
HTTP/1.1 201 Created
...
{"name":"test space","uri":"/spaces/1"}
3.6.2
Access control lists
Beyond simply requiring that users are authenticated, you may also want to impose
additional restrictions on who can perform certain operations. In this section, you’ll
implement a very simple access control method based upon whether a user is a mem-
ber of the social space they are trying to access. You’ll accomplish this by keeping track
of which users are members of which social spaces in a structure known as an access
control list (ACL). 
 Each entry for a space will list a user that may access that space, along with a set of
permissions that define what they can do. The Natter API has three permissions: read
messages in a space, post messages to that space, and a delete permission granted to
moderators.
DEFINITION
An access control list is a list of users that can access a given object,
together with a set of permissions that define what each user can do.
Why not simply let all authenticated users perform any operation? In some APIs this
may be an appropriate security model, but for most APIs some operations are more
sensitive than others. For example, you might let anyone in your company see their
own salary information in your payroll API, but the ability to change somebody’s sal-
ary is not normally something you would allow any employee to do! Recall the princi-
ple of least authority (POLA) from chapter 1, which says that any user (or process)
should be given exactly the right amount of authority to do the jobs they need to do.
Too many permissions and they may cause damage to the system. Too few permissions
and they may try to work around the security of the system to get their job done.
 Permissions will be granted to users in a new permissions table, which links a
user to a set of permissions in a given social space. For simplicity, you’ll represent
permissions as a string of the characters r (read), w (write), and d (delete). Add the
following table definition to the bottom of schema.sql in your text editor and save
the new definition. It must come after the spaces and users table definitions as it
references them to ensure that permissions can only be granted for spaces that exist
and real users.
CREATE TABLE permissions(
    space_id INT NOT NULL REFERENCES spaces(space_id),
    user_id VARCHAR(30) NOT NULL REFERENCES users(user_id),
    perms VARCHAR(3) NOT NULL,
    PRIMARY KEY (space_id, user_id)
);
GRANT SELECT, INSERT ON permissions TO natter_api_user;
91
Access control
You then need to make sure that the initial owner of a space gets given all permissions.
You can update the createSpace method to grant all permissions to the owner in the
same transaction that we create the space. Open SpaceController.java in your text editor
and locate the createSpace method. Add the lines highlighted in the following listing:
return database.withTransaction(tx -> {
      var spaceId = database.findUniqueLong(
          "SELECT NEXT VALUE FOR space_id_seq;");
      database.updateUnique(
          "INSERT INTO spaces(space_id, name, owner) " +
              "VALUES(?, ?, ?);", spaceId, spaceName, owner);
      database.updateUnique(                                      
          "INSERT INTO permissions(space_id, user_id, perms) " +  
              "VALUES(?, ?, ?)", spaceId, owner, "rwd");          
      response.status(201);
      response.header("Location", "/spaces/" + spaceId);
      return new JSONObject()
          .put("name", spaceName)
          .put("uri", "/spaces/" + spaceId);
    });
You now need to add checks to enforce that the user has appropriate permissions for
the actions that they are trying to perform. You could hard-code these checks into
each individual method, but it’s much more maintainable to enforce access control
decisions using filters that run before the controller is even called. This separation of
concerns ensures that the controller can concentrate on the core logic of the opera-
tion, without having to worry about access control details. This also ensures that if you
ever want to change how access control is performed, you can do this in the common
filter rather than changing every single controller method.
NOTE
Access control checks are often included directly in business logic,
because who has access to what is ultimately a business decision. This also
ensures that access control rules are consistently applied no matter how that
functionality is accessed. On the other hand, separating out the access con-
trol checks makes it easier to centralize policy management, as you’ll see in
chapter 8.
To enforce your access control rules, you need a filter that can determine whether the
authenticated user has the appropriate permissions to perform a given operation on a
given space. Rather than have one filter that tries to determine what operation is
being performed by examining the request, you’ll instead write a factory method that
returns a new filter given details about the operation. You can then use this to create
specific filters for each operation. Listing 3.7 shows how to implement this filter in
your UserController class. 
Ensure the
space owner has
all permissions
on the newly
created space.
92
CHAPTER 3
Securing the Natter API
 Open UserController.java and add the method in listing 3.7 to the class under-
neath the other existing methods. The method takes as input the name of the HTTP
method being performed and the permission required. If the HTTP method does not
match, then you skip validation for this operation, and let other filters handle it.
Before you can enforce any access control rules, you must first ensure that the user is
authenticated, so add a call to the existing requireAuthentication filter. Then you
can look up the authenticated user in the user database and determine if they have
the required permissions to perform this action, in this case by a simple string match-
ing against the permission letters. For more complex cases, you might want to convert
the permissions into a Set object and explicitly check that all required permissions
are contained in the set of permissions of the user.
TIP
The Java EnumSet class can be used to efficiently represent a set of per-
missions as a bit vector, providing a compact and fast way to quickly check if a
user has a set of required permissions.
If the user does not have the required permissions, then you should fail the request
with a 403 Forbidden status code. This tells the user that they are not allowed to per-
form the operation that they are requesting.
  public Filter requirePermission(String method, String permission) {
    return (request, response) -> {   
      if (!method.equalsIgnoreCase(request.requestMethod())) {    
        return;                                                   
      }                                                           
      requireAuthentication(request, response);     
      var spaceId = Long.parseLong(request.params(":spaceId"));
      var username = (String) request.attribute("subject");
      var perms = database.findOptional(String.class,   
          "SELECT perms FROM permissions " +            
              "WHERE space_id = ? AND user_id = ?",     
          spaceId, username).orElse("");                
      if (!perms.contains(permission)) {   
        halt(403);                         
      }                                    
    };
  }
3.6.3
Enforcing access control in Natter
You can now add filters to each operation in your main method, as shown in listing 3.8.
Before each Spark route you add a new before() filter that enforces correct permis-
sions. Each filter path has to have a :spaceId path parameter so that the filter can
Listing 3.7
Checking permissions in a filter 
Return a
new Spark
filter as a
lambda
expression.
Ignore requests 
that don’t match the 
request method.
First check
if the user is
authenticated.
Look up permissions for 
the current user in the 
given space, defaulting 
to no permissions.
If the user doesn’t have 
permission, then halt with 
a 403 Forbidden status.
93
Access control
determine which space is being operated on. Open the Main.java class in your editor
and ensure that your main() method matches the contents of listing 3.8. New filters
enforcing permission checks are highlighted in bold.
NOTE
The implementations of all API operations can be found in the GitHub
repository accompanying the book at https://github.com/NeilMadden/
apisecurityinaction.
public static void main(String... args) throws Exception {
  …
  before(userController::authenticate);   
  before(auditController::auditRequestStart);
  afterAfter(auditController::auditRequestEnd);
  before("/spaces",                             
      userController::requireAuthentication);   
  post("/spaces",
      spaceController::createSpace);
  before("/spaces/:spaceId/messages",                
      userController.requirePermission("POST", "w"));
  post("/spaces/:spaceId/messages",
      spaceController::postMessage);
  before("/spaces/:spaceId/messages/*",
      userController.requirePermission("GET", "r"));
  get("/spaces/:spaceId/messages/:msgId",
      spaceController::readMessage);
  before("/spaces/:spaceId/messages",
      userController.requirePermission("GET", "r"));
  get("/spaces/:spaceId/messages",
      spaceController::findMessages);
  var moderatorController =
      new ModeratorController(database);
  before("/spaces/:spaceId/messages/*",
      userController.requirePermission("DELETE", "d"));
  delete("/spaces/:spaceId/messages/:msgId",
      moderatorController::deletePost);
  post("/users", userController::registerUser);  
  …
}
Listing 3.8
Adding authorization filters
Before anything else, 
you should try to 
authenticate the user.
Anybody may create a space, 
so you just enforce that the 
user is logged in.
For each operation, you 
add a before() filter that 
ensures the user has 
correct permissions.
Anybody can register an 
account, and they won’t 
be authenticated first.
94
CHAPTER 3
Securing the Natter API
With this in place, if you create a second user “demo2” and try to read a message cre-
ated by the existing demo user in their space, then you get a 403 Forbidden response:
$ curl -i -u demo2:password 
➥ https://localhost:4567/spaces/1/messages/1
HTTP/1.1 403 Forbidden
...
3.6.4
Adding new members to a Natter space
So far, there is no way for any user other than the space owner to post or read mes-
sages from a space. It’s going to be a pretty antisocial social network unless you can
add other users! You can add a new operation that allows another user to be added to
a space by any existing user that has read permission on that space. The next listing
adds an operation to the SpaceController to allow this.
 Open SpaceController.java in your editor and add the addMember method from
listing 3.9 to the class. First, validate that the permissions given match the rwd form
that you’ve been using. You can do this using a regular expression. If so, then insert
the permissions for that user into the permissions ACL table in the database.
public JSONObject addMember(Request request, Response response) {
    var json = new JSONObject(request.body());
    var spaceId = Long.parseLong(request.params(":spaceId"));
    var userToAdd = json.getString("username");
    var perms = json.getString("permissions");
    if (!perms.matches("r?w?d?")) {           
      throw new IllegalArgumentException("invalid permissions");
    }
    database.updateUnique(       
        "INSERT INTO permissions(space_id, user_id, perms) " +
            "VALUES(?, ?, ?);", spaceId, userToAdd, perms);
    response.status(200);
    return new JSONObject()
        .put("username", userToAdd)
        .put("permissions", perms);
  }
You can then add a new route to your main method to allow adding a new member by
POSTing to /spaces/:spaceId/members. Open Main.java in your editor again and
add the following new route and access control filter to the main method underneath
the existing routes:
  before("/spaces/:spaceId/members",
      userController.requirePermission("POST", "r"));
  post("/spaces/:spaceId/members", spaceController::addMember);
Listing 3.9
Adding users to a space
Ensure the permissions 
granted are valid.
Update the permissions for the 
user in the access control list.
95
Access control
You can test this by adding the demo2 user to the space and letting them read messages:
$ curl -u demo:password 
➥ -H ‘Content-Type: application/json’ 
➥ -d ‘{"username":"demo2","permissions":"r"}’ 
➥ https://localhost:4567/spaces/1/members
{"permissions":"r","username":"demo2"}
$ curl -u demo2:password 
➥ https://localhost:4567/spaces/1/messages/1
{"author":"demo","time":"2019-02-06T15:15:03.138Z","message":"Hello, 
World!","uri":"/spaces/1/messages/1"}
3.6.5
Avoiding privilege escalation attacks
It turns out that the demo2 user you just added can do a bit more than just read mes-
sages. The permissions on the addMember method allow any user with read access to
add new users to the space and they can choose the permissions for the new user. So
demo2 can simply create a new account for themselves and grant it more permissions
than you originally gave them, as shown in the following example.
 First, they create the new user:
$ curl -H ‘Content-Type: application/json’ 
➥ -d ‘{"username":"evildemo2","password":"password"}’
➥ https://localhost:4567/users
➥ {"username":"evildemo2"}
They then add that user to the space with full permissions:
$ curl -u demo2:password 
➥ -H ‘Content-Type: application/json’ 
➥ -d ‘{"username":"evildemo2","permissions":"rwd"}’ 
➥ https://localhost:4567/spaces/1/members
{"permissions":"rwd","username":"evildemo2"}
They can now do whatever they like, including deleting your messages:
$ curl -i -X DELETE -u evildemo2:password 
➥ https://localhost:4567/spaces/1/messages/1
HTTP/1.1 200 OK
...
What happened here is that although the demo2 user was only granted read permis-
sion on the space, they could then use that read permission to add a new user that has
full permissions on the space. This is known as a privilege escalation, where a user with
lower privileges can exploit a bug to give themselves higher privileges. 
DEFINITION
A privilege escalation (or elevation of privilege) occurs when a user
with limited permissions can exploit a bug in the system to grant themselves
or somebody else more permissions than they have been granted.
96
CHAPTER 3
Securing the Natter API
You can fix this in two general ways:
1
You can require that the permissions granted to the new user are no more than
the permissions that are granted to the existing user. That is, you should ensure
that evildemo2 is only granted the same access as the demo2 user.
2
You can require that only users with all permissions can add other users.
For simplicity you’ll implement the second option and change the authorization filter
on the addMember operation to require all permissions. Effectively, this means that
only the owner or other moderators can add new members to a social space. 
 Open the Main.java file and locate the before filter that grants access to add users
to a social space. Change the permissions required from r to rwd as follows:
  before("/spaces/:spaceId/members",
      userController.requirePermission("POST", "rwd"));
If you retry the attack with demo2 again you’ll find that they are no longer able to cre-
ate any users, let alone one with elevated privileges.
Answers to pop quiz questions
1
c. Rate-limiting should be enforced as early as possible to minimize the resources
used in processing requests.
2
b. The Retry-After header tells the client how long to wait before retrying
requests.
3
d, e, and f. A secure password hashing algorithm should use a lot of CPU and
memory to make it harder for an attacker to carry out brute-force and dictio-
nary attacks. It should use a random salt for each password to prevent an
attacker pre-computing tables of common password hashes.
4
e. HTTP Basic credentials are only Base64-encoded, which as you’ll recall from
section 3.3.1, are easy to decode to reveal the password.
5
c. TLS provides no availability protections on its own.
Pop quiz
7
Which HTTP status code indicates that the user doesn’t have permission to
access a resource (rather than not being authenticated)?
a
403 Forbidden
b
404 Not Found
c
401 Unauthorized
d
418 I’m a Teapot
e
405 Method Not Allowed
The answer is at the end of the chapter.
97
Summary
6
d. The principle of separation of duties.
7
a. 403 Forbidden. As you’ll recall from the start of section 3.6, despite the
name, 401 Unauthorized means only that the user is not authenticated.
Summary
 Use threat-modelling with STRIDE to identify threats to your API. Select appro-
priate security controls for each type of threat.
 Apply rate-limiting to mitigate DoS attacks. Rate limits are best enforced in a
load balancer or reverse proxy but can also be applied per-server for defense
in depth.
 Enable HTTPS for all API communications to ensure confidentiality and integ-
rity of requests and responses. Add HSTS headers to tell web browser clients to
always use HTTPS.
 Use authentication to identify users and prevent spoofing attacks. Use a secure