道如何解析和使用 XML 文档？好吧，一个有效的 XML 文档之所以有效，是因为它遵循了
XML 的通用规则（我不需要列出它们，但是拥有闭合标签是一个前面提过的例子），并且它
匹配了它的文档类型定义（DTD）。DTD 是我们继续深入的全部原因，因为它是允许我们作
为黑客利用它的一个东西。
XML DTD 就像是所使用的标签的定义文档，并且由 XML 设计者或作者开发。使用上面的例
子，我就是设计者，因为我在 XML 中定义了职位文档。DTD 定义了存在什么标签，它们拥有
什么属性，以及其它元素里面有什幺元素，以及其他。当你或者我创建自己的 DTD 时，一些
已经格式化了，并且广泛用于 RSS、RDF、HL7 SGML/XML。以及其它。
下面是 DTD 文件的样子，它用于我的 XML。
看一看这个，你可能猜到了它大部分是啥意思。我们的 jobs 标签实际上是 XML !ELEMENT ，
并且可以包含 元素。 是个 ，可以包含标题、薪资和职责，这些也都
job job !ELEMENT
是 ，并且只能包含字符数据（ ）。最后， 拥有一
!ELEMENT #PCDATA !ELEMENT responsibility
个可选属性（ ），默认值为 0。
!ATTLIST
并不是很难吧？除了 DTD，还有两种还未讨论的重要标签， 和 。到现在为
!DOCTYPE !ENTITY
止，我只说了 DTD 文件是我们 XML 的扩展。要记住上面的第一个例子，XML 文档并不包含
标签定义，它由我们第二个例子的 DTD 来完成。但是，我们可以将 DTD 包含在 XML 文档
内，并且这样做之后， XML 的第一行必须是  元素。将我们的两个例子组合起
来，我们就会得到这样的文档：
]>
Hacker
1000000
Shot the web
69
十四、XML 外部实体注入
这里，我们拥有了内部 DTD 声明。要注意我们仍然使用一个声明头部开始，表示我们的文档
遵循 XML 1.0 和 UTF8 编码。但是之后，我们为 XML 定义了要遵循的 DOCTYPE 。使用外部
DTD 是类似的，除了 !DOCTYPE 是  。XML 解析器在解析
XML 文件时，之后会解析 jobs.dtd 的内容。这非常重要，因为 !ENTITY 标签被近似处理，并
且是我们利用的关键。
XML 实体像是一个信息的占位符。再次使用我们之前的例子。，如果我们想让每个职位都包
含到我们网站的链接，每次都编写地址简直太麻烦了，尤其是 URL 可能改变的时候。反之，
我们可以使用 ，并且让解析器在解析时获取内容，并插入到文档中。你可以看看我
!ENTITY
们在哪里这样做。
与外部 DTD 文档类似，我们可以更新我们的 XML 文档来包含这个想法：
]>
Hacker
1000000
Shot the web
&url;
这里你会注意到，我继续并添加了 的 ，但是不是 ，而是 。这
Website !ELEMENT #PCDATA ANY
意味着 可以包含任何可解析的数据组合。我也定义了一个 ，带有 属
Website !ENTITY SYSTEM
性，告诉解析器获取 文件的数据。现在一切都清楚了。
wensite.txt
将它们放到一起，如果我包含了 ，而不是 ，你觉得会发生什么？你
/etc/passwd website.txt
可能户菜刀，我们的 XML 会被解析，并且服务器敏感文件 /etc/passwd 的内容会包含进我们
的内容。但是我们是 XML 的作者，所以为什么要这么做呢？
好吧。当受害者的应用可以滥用，在 XML 的解析中包含这种外部实体时，XXE 攻击就发生
了。换句话说，应用有一些 XML 预期，但是在接收时却不验证它。所以，只是解析他所得到
的东西。例如，假设我正在运行一个职位公告板，并允许你注册并通过 XML 上传职位。开发
我的应用时，我可能使我的 DTD 文件可以被你访问，并且假设你提交了符合需求的文件。我
没有意识到它的危险，决定天真地解析收到的内容，并没有任何验证。但是作为一个黑客，
你决定提交：
70
十四、XML 外部实体注入
]>
&xxe;
就像你现在了解的那样，当这个文件被解析时，我的解析器会收到它，并且看到内部 DTD 定
义了 文档类型，告诉它 可以包含任何可解析的数据，并且有个 ，它应
foo foo !ENTITY xxe
该读取我的 /etc/passwd 文件（ file:// 的用法表示 /etc/passwd 的完整的文件 URL 路
径），并会将 &xxe; 替换为这个文件的内容。之后你以定义  标签的有效 XML 结束了
它，这会打印出我的服务器数据。这就是 XXE 危险的原因。
但是等一下，还有更多的东西。如果应用不打印出回应，而是仅仅解析你的内容会怎么样？
使用上面的例子，内容会解析但是永远不会反回给我们。好吧，如果我们不包含本地文件，
而是打算和恶意服务器通信会怎么样？像是这样：
]>
&callhome;
在解释它之前，你可能已经注意到我在 callhome URL 中使用了 % 来代替 & ， %xxe 。这是
因为 % 用于实体在 DTD 定义内部被求值的情况，而 & 用于实体在 XML 文档中被求值的情
况。现在，当 XML 文档被解析， callhome !ENTITY 会读取 /etc/passwd 的内容，并远程调
用 http://www.malicous.com ，将文件内容作为 URL 参数来发送，因为我们控制了该服务器，
我们可以检查我们的日志，并且足够确保拥有了 的内容。Web 应用的游戏就结
/etc/passwd
束了。
所以，站点如何防范 XXE 漏洞？它们可以禁止解析任何外部实体。
链接
查看 OWASP 外部实体（XXE）解析_Processing)
XXE 速查表
示例
1. Google 的读取访问
71
十四、XML 外部实体注入
难度：中
URL：
google.com/gadgets/directory?synd=toolbar
报告链接：
https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-
production-servers
报告日期：2014.4
奖金：$10000
描述：
了解 XML 以及外部实体之后，这个漏洞实际上就非常直接了。Google 的工具栏按钮允许开
发者定义它们自己的按钮，通过上传包含特定元数据的 XML 文件。
但是，根据 Detectify 小组，通过上传带有 !ENTITY ，指向外部文件的 XML 文件，Google 解
析了该文件，并渲染了内容。因此，小组使用了 XXE 漏洞来渲染服务器的 /etc/passwd 文
件。游戏结束。
Google 内部文件的 Detectify 截图
重要结论
大公司甚至都存在漏洞。虽然这个报告是两年之前了，它仍然是一个大公司如何犯错的
极好的例子。所需的 XML 可以轻易上传到站点，站点使用了 XML 解析器。但是，有时
站点不会产生响应，所以你需要测试来自 OWASP 速查表的其它输入。
72
十四、XML 外部实体注入
2. Facebook 单词 XXE
难度：难
URL：
facebook.com/careers
报告链接：
http://www.attack-secure.com/blog/hacked-facebook-word-document
报告日期：2014.4
奖金：$6300
描述：
这个 XXE 有一些区别，并且比第一个例子更有挑战，因为它涉及到远程调用服务器，就像我
们在描述中讨论的那样。
2013 年末，Facebook 修补了一个 XXE 漏洞，它可能会升级为远程代码执行漏洞，因
为 文件的内容是可访问的。奖金约为$30000。
/etc/passwd
因此，在 Mohamed 于 2014 年 4 月挑战自己来渗透 Facebook 的时候，它不认为 XXE 可能
存在，直到他发现它们的职位页面允许用户上传 文件，它可以包含 XML。对于那些不
.docx
知道的人， .docx 文件只是个 XML 文件的压缩包。所以，根据 Mohames，它创建了一
个 .docx 文件，并使用 7zip 打开它来提取内容，并将下面的载荷插入了一个 XML 文件中。
%dtd;
%send;
]]>
你会想到，在解析的时候，如果受害者开启了外部实体，XML 解析器会调用远程主机。要注
意 !ENTITY 定义中和下面使用了 % 。这是因为这些占位符用在 DTD 自身中。在收到请求调
用之后，远程服务器会发送回 DTD 文件，像这样：
"
所以，回到文件中的载荷：
1. 解析器会将 %dtd; 替换为获取远程 DTD 文件的调用。
2， 解析器会将 替换为服务器的远程调用，但是 会替换
%send; %file;
为 的内容。
file:///etc/passwd
所以，Mohamed 使用 Python 和 SimpleHTTPServer 开启了一台本地服务器，并等待接收：
73
十四、XML 外部实体注入
Facebook 远程调用的攻击截图
在报告之后，Facebook 发送了回复，拒绝了这个报告，并说它们不能重现它，并请求内容的
视频验证。在交换一些信息之后，Facebook 提到招聘人员可能打开了文件，它会发送任意请
求。Facebook 自傲组做了一些深入的挖掘，并给予了奖金，发送了一个邮件，解释了这个
XXE 的影响比 2013 年初的要小，但是仍然是一个有效的利用，这里是这个信息。
Facebook 官方回复
74
十四、XML 外部实体注入
重要结论
这里有一些重要结论。XML 文件以不同形式和大小出现。要留意接