### 如何解析和使用 XML 文档

一个有效的 XML 文档之所以有效，是因为它遵循了 XML 的通用规则（例如闭合标签）并匹配其文档类型定义（DTD）。DTD 是我们深入研究的主要原因，因为它允许黑客利用其中的漏洞。

#### XML DTD 介绍

XML DTD 类似于所使用的标签的定义文档，通常由 XML 设计者或作者开发。在上述例子中，我作为设计者，在 XML 中定义了职位文档。DTD 定义了存在的标签、它们的属性以及包含的其他元素。创建自定义 DTD 时，可以参考一些已广泛使用的格式，如 RSS、RDF、HL7 SGML/XML 等。

以下是用于我的 XML 的 DTD 文件示例：

```xml
<!DOCTYPE jobs [
  <!ELEMENT jobs (job+)>
  <!ELEMENT job (title, salary, responsibilities)>
  <!ELEMENT title (#PCDATA)>
  <!ELEMENT salary (#PCDATA)>
  <!ELEMENT responsibilities (responsibility+)>
  <!ELEMENT responsibility (#PCDATA)>
  <!ATTLIST responsibility id CDATA #IMPLIED>
]>
```

在这个 DTD 文件中：
- `jobs` 标签是 XML 的根元素，可以包含多个 `job` 元素。
- `job` 标签可以包含 `title`、`salary` 和 `responsibilities` 元素。
- `title`、`salary` 和 `responsibility` 都是纯字符数据 (`#PCDATA`)。
- `responsibility` 标签有一个可选的 `id` 属性，默认值为 `0`。

#### 重要标签：`!DOCTYPE` 和 `!ENTITY`

除了 DTD，还有两个重要的标签：`!DOCTYPE` 和 `!ENTITY`。到目前为止，我们只讨论了 DTD 文件作为 XML 的扩展。但我们可以将 DTD 包含在 XML 文档内。在这种情况下，XML 的第一行必须是 `!DOCTYPE` 元素。

结合我们的两个例子，最终的 XML 文档如下：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE jobs [
  <!ELEMENT jobs (job+)>
  <!ELEMENT job (title, salary, responsibilities)>
  <!ELEMENT title (#PCDATA)>
  <!ELEMENT salary (#PCDATA)>
  <!ELEMENT responsibilities (responsibility+)>
  <!ELEMENT responsibility (#PCDATA)>
  <!ATTLIST responsibility id CDATA #IMPLIED>
]>
<jobs>
  <job>
    <title>Hacker</title>
    <salary>1000000</salary>
    <responsibilities>
      <responsibility id="69">Shot the web</responsibility>
    </responsibilities>
  </job>
</jobs>
```

#### XML 外部实体注入 (XXE)

XML 实体类似于信息的占位符。例如，如果我们希望每个职位都包含到我们网站的链接，可以使用 `!ENTITY` 来定义该链接，并让解析器在解析时插入内容。以下是一个示例：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE jobs [
  <!ENTITY url "http://www.example.com">
  <!ELEMENT jobs (job+)>
  <!ELEMENT job (title, salary, responsibilities, website)>
  <!ELEMENT title (#PCDATA)>
  <!ELEMENT salary (#PCDATA)>
  <!ELEMENT responsibilities (responsibility+)>
  <!ELEMENT responsibility (#PCDATA)>
  <!ELEMENT website ANY>
  <!ATTLIST responsibility id CDATA #IMPLIED>
  <!ATTLIST website href CDATA #IMPLIED>
]>
<jobs>
  <job>
    <title>Hacker</title>
    <salary>1000000</salary>
    <responsibilities>
      <responsibility id="69">Shot the web</responsibility>
    </responsibilities>
    <website href="&url;">Visit our website</website>
  </job>
</jobs>
```

如果我们将 `&url;` 替换为恶意文件路径（如 `file:///etc/passwd`），解析器会读取该文件的内容并将其插入到文档中。这就是 XXE 攻击的基础。

#### XXE 攻击示例

假设受害者的应用程序可以滥用外部实体，攻击者可以提交如下 XML：

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
  <!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<foo>&xxe;</foo>
```

当这个文件被解析时，解析器会读取 `/etc/passwd` 的内容并将其插入到 `<foo>` 标签中，从而泄露敏感信息。

#### 防范 XXE 漏洞

站点可以通过禁止解析任何外部实体来防范 XXE 漏洞。具体措施包括：
- 禁用外部实体解析。
- 使用安全的 XML 解析库。
- 对输入进行严格的验证和过滤。

#### 示例案例

**1. Google 的读取访问**

- **难度**: 中
- **URL**: google.com/gadgets/directory?synd=toolbar
- **报告链接**: [Detectify Blog](https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers)
- **报告日期**: 2014 年 4 月
- **奖金**: $10,000
- **描述**: 通过上传带有 `!ENTITY` 标签指向外部文件的 XML 文件，Google 解析了该文件并渲染了内容，导致服务器的 `/etc/passwd` 文件被泄露。

**2. Facebook 单词 XXE**

- **难度**: 难
- **URL**: facebook.com/careers
- **报告链接**: [Attack Secure Blog](http://www.attack-secure.com/blog/hacked-facebook-word-document)
- **报告日期**: 2014 年 4 月
- **奖金**: $6,300
- **描述**: 通过上传包含恶意 XML 的 `.docx` 文件，攻击者能够远程调用服务器并获取敏感信息。Facebook 最终确认了该漏洞并给予了奖励。

#### 重要结论

- XML 文件可以以多种形式存在，需要注意各种可能的输入。
- 大公司也可能存在漏洞，因此对输入进行严格验证非常重要。
- XXE 攻击可以通过禁用外部实体解析来防范。

希望这些优化后的文本能更好地帮助你理解如何解析和使用 XML 文档，以及如何防范 XXE 漏洞。