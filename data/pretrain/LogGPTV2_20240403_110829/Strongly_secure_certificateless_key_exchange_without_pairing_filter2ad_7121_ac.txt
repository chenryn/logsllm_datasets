(4)
is at most 1/p, moreover, if Equation 4 holds, then Equation 3 certainly holds.
Proof. This proof is a rewrite of Cash, Kiltz and Shoup’s [CKS08] trapdoor test proof. Observe that
y1 + y2 = z(b1 + d1) + (b2 + d2). It is easy to verify that B2 + D2 is uniformly distributed over G, and
that B1 + D1, B2 + D2, z are mutually independent, from which (i) and (ii) follow. To prove (iii),
condition on ﬁxed values of B1 + D1 and B2 + D2. In the resulting conditional probability space, z is
uniformly distributed over Zp, while (b1 + d1), (b2 + d2), e(A, C), T1 and T2 are ﬁxed. If Equation 4 holds,
then by multiplying together the two equations in Equation 4, we see that Equation 3 certainly holds.
9
(cid:18)
(cid:19)z
Conversely, if Equation 4 on the preceding page does not hold, we show that Equation 3 on the previous
page holds with probability at most 1/p. Observe that Equation 3 on the preceding page is equivalent
to
T1
e(A, C)b2+d2
.
=
T2
e(A, C)b1+d1
(5)
It is not hard to see that if T1 = e(A, C)b1+d1 and T2 (cid:54)= e(A, C)b2+d2, then Equation 5 certainly does not
hold. This leaves us with the case T1 (cid:54)= e(A, C)b1+d1 . But in this case, the left hand side of Equation 5
is a random element of GT (since z is uniformly distributed in Zp), but the right hand side is a ﬁxed
element of GT . Thus, Equation 5 holds with probability 1/p in this case.
Theorem 3 (Multiplicative double BDH Trapdoor Test). 2 Let e : G × G → GT be a bilinear pairing,
where G, GT are two cyclic groups of prime order p. Let P ∈ G be a generator of G. Suppose B1, C1 ∈
G, y1, y2, z ∈ Zp are mutually independent random variables. Deﬁne B2 := y1P − zB1 and C2 :=
y2P − zC1. Further, suppose that A is a random variables in G and T1, T2 are random variables in GT ,
each of which is deﬁned as some function of (A, B1, C1) and (A, B2, C2). Then we have:
(i) B2 and C2 are uniformly distributed over G (guaranteed by y1 and y2), and e(B2, C2) is uniformly
distributed over GT .
(ii) B1 and B2 are independent and C1 and C2 are independent and B2 and C2 are independent, and
e(B1, C1) and e(B2, C2) are independent (also due to y1 and y2).
(iii) If B1 = b1P, B2 = b2P, C1 = c1P, C2 = c2P , then the probability that the truth value of
z2
T1
T2
?=
e(A, P )y1y2
e(A, C2)y1e(A, B1)y2
does not agree with the truth value of
?= e(A, P )b1c1 ∧ T2
T1
?= e(A, P )b2c2
is at most 2/p, moreover, if Equation 7 holds, then Equation 6 certainly holds.
(6)
(7)
Proof. Observe that y1y2 = (zb1 + b2)(zc1 + c2) = z2b1c1 + zb1c2 + zb2c1 + b2c2. It is easy to verify that
e(B2, C2) is uniformly distributed over GT , and that e(B1, C1), e(B2, C2), z are mutually independent,
from which (i) and (ii) follow. To prove (iii), condition on ﬁxed values of e(B1, C1) and e(B2, C2). In
the resulting conditional probability space, z is uniformly distributed over Zp, while b1c1, b2c2, A, T1 and
T2 are ﬁxed. If Equation 7 holds, then by multiplying together the two equations in Equation 7, we see
that Equation 6 certainly holds. Conversely, if Equation 7 does not hold, we show that Equation 6 holds
with probability at most 2/p. Observe that Equation 6 is equivalent to
(cid:18)
(cid:19)z2
T1
e(A, P )b1c1
=
e(A, P )b2c2
T2
.
(8)
It is not hard to see that if T1 = e(A, P )b1c1 and T2 (cid:54)= e(A, P )b2c2 , then Equation 8 certainly does not
hold. This leaves us with the case T1 (cid:54)= e(A, P )b1c1. But in this case, the left hand side of Equation 8 is
the square of a random element of GT . Since z is uniformly distributed in Zp, z2 is uniformly distributed
over half of Zp as half of the elements of Zp are quadratic residues. On the other hand, the right hand
side of 8 is a ﬁxed element of GT . Thus, Equation 8 holds with probability 2/p in this case.
5 Security proof for the certiﬁcateless key agreement scheme
We will prove that the certiﬁcateless key agreement scheme is a secure key agreement scheme in the ran-
dom oracle model under the computational bilinear Diﬃe-Hellman (CBDH) assumption and the computa-
tional Diﬃe-Hellman (CDH) assumption. The CBDH the assumption states that given {aP, bP, cP} ∈ G3
2If this test was implemented with B2 = y1P − z1bP and C2 = y2P − z2cP , then the probability that Equation 7 holds
would be 1
p2 . We use z instead of z1 and z2 because we need Theorem 2 on the previous page simultaneously.
10
it is hard to compute e(P, P )abc ∈ GT . Let Z be an algorithm that takes as input a triple {aP, bP, cP} ∈
G3, and outputs an element Z ∈ GT . We deﬁne the CBDH advantage of Z to be
(cid:104)
Pr
The CDH assumption states that given {aP, bP} ∈ G2 it is hard to compute abP ∈ G. Let Z be an
algorithm that takes as input the pair {aP, bP} ∈ G2, and outputs an element T ∈ G. We deﬁne the
CDH advantage of Z to be
a, b, c $← Zp : Z(aP, bP, cP ) = e(P, P )abc(cid:105)
(cid:104)
a, b $← Zp : Z(aP, bP ) = abP
(cid:105)
Pr
To relate the advantage of an adversary against our protocol to the above assumptions, we use a
classical reduction approach. We assume that an adversary M has an advantage in winning the game
outlined in Section 2.1 on page 3. Additionally, the adversary M may query the random oracles H1, H2,
and H3. In the following, the challenger B is interested to use the adversary M to turn M’s advantage
in distinguishing a random session key from the correct session key in an advantage to solve either the
computational Diﬃe-Hellman problem or the computational bilinear Diﬃe-Hellman problem. Let q0 be
the maximum number of sessions that any one party may have. We assume that the adversary M makes
at most q1 distinctive H1 queries. The adversary may make any number of H2 queries or H3 queries. At
the end of the game, M outputs its guess ˆb ∈ {0, 1} for b. Let AdvM(k)[Π] be the advantage that the
adversary M has against the protocol, i.e. the event that ˆb = b and M wins the game.
Theorem 4. If there exists an adversary that has an advantage against our certiﬁcateless key agreement
scheme (AdvM(k)[Π]), the challenger B can use this adversary to solve either the computational Diﬃe-
Hellman or the computational bilinear Diﬃe-Hellman problem. We show that the success probability of
any adversary against the scheme is limited by
AdvM(k)[Π] ≤ 9q0q2
1 max(cid:0)AdvB(k)[CDH], AdvB(k)[CBDH](cid:1)
where AdvB(k)[CDH] is the advantage that the challenger gets in solving the computational Diﬃe-
Hellman problem given security parameter k using the adversary and AdvB(k)[CBDH] is the advantage
that the challenger gets in solving the computational bilinear Diﬃe-Hellman problem given security pa-
rameter k using the adversary.
We note that the CBDH problem is strictly weaker than the CDH problem. Thus, an adversary that
is able to solve the CDH problem will also be able to solve the CBDH problem. We diﬀerentiate between
these two problems because security against a Type II adversary is based solely on the CDH problem,
whereas security against a Type I adversary is based on both the CDH problem and the CBDH problem.
5.1 Possible strategies for the challenger
Before the game starts, the challenger B tries to guess the test session. To this end, B randomly selects
two indexes I, J ∈ {1, . . . , q1} : I (cid:54)= J that represent the I th and the J th distinct query to the H1 oracle.
The probability that B chooses I and J correctly is (as there are at most q1 entries in H1)
1
q1(q1 − 1)
>
1
q2
1
. If B did not guess the test session correctly, B aborts the game.
B chooses T ∈ {1, . . . , q0} and thus determines the test oracle ΠT
I,J , which is correct with probability
larger than 1
q0q2
In order to use the adversary M to gain an advantage in computing the CBDH or the CDH challenge,
1
the challenger B will guess the parts of the key in the session corresponding to the test query that the
adversary may not learn. Depending on the chosen strategy, B aborts the game whenever M’s queries
target one of the forbidden elements. Otherwise, the game proceeds as usual. There are nine choices for
B (see also Table 1 on the next page):
1. The adversary may learn neither the secret value of IDI nor of IDJ .
2. The adversary may learn neither the ephemeral private key of IDI nor of IDJ .
11
Strategy
Value at party p
sH1(IDp)
sH3(H1(IDp))
xp / xpP
rp
Embedding in
Problem type
1
2
3/4(mirr.)
I
c
c
J
c
c
c
c
xI xJ P
CDH
I
c
c
c/r
J
c
c
c/r
rI rJ P
CDH
I
c
c
J
c
c
c/r
c
rI xJ P/rJ xI P
CDH
5/6(mirr.)
I
J
c
c
c/r
c
c
K
CBDH
7/8(mirr.)
I
J
c
c
c/r
c/r
c
L
9
I
J
c/r
c
c/r
c
N
CBDH
CBDH
c = corrupt, r = replace, mirr. = swap columns I and J
Strategy 1 - 4 are related to the computational Diﬃe-Hellman problem, Strategies 5 - 9 are related
to the computational bilinear Diﬃe-Hellman problem. In the proof, the problem is always embedded
in the values that the adversary may not corrupt or replace.
Table 1: Possible corrupt queries sorted by strategy
ID
ID1
. . .
IDI
. . .
IDJ
. . .
H1(ID)
l1P
. . .
bP
. . .
cP
. . .
l $← Zp
l1
. . .
⊥
. . .
⊥
. . .
Instead of choosing H1(IDi) at random from G, B chooses li ∈ Zp at random, records it, and sets
H1(IDi) to liP . For Strategy 5, 7 and 9, the I th entry is set to H1(IDI ) = bP ; for Strategy 6 and
8, the J th entry is set to H1(IDJ ) = bP . For Strategy 9 the J th entry is set to H1(IDJ ) = cP .
bP and cP are taken from the inputs to the BDH challenge. As bP and cP are random in G, this
modiﬁcation is indistinguishable for any adversary. The table above shows the H1 oracle for Strategy
9 as an example.
Table 2: Modiﬁed H1 oracle
3. The adversary may learn neither the secret value of IDJ nor replace the public key of IDJ and