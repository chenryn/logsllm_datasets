一旦 OpenUnison 和 API 服务器已经集成，我们需要测试连接是否工作:
1.  要测试集成，请重新登录 OpenUnison，然后再次单击 **Kubernetes 仪表板**链接。
2.  Click on the bell in the upper right and you'll see a different error:
    ![](img/Fig_7.9_B15514.jpg)
    图 7.9–单点登录已启用，但用户无权访问任何资源
    OpenUnison 之间的 SSO，你会看到 Kubernetes 正在工作！但是，新的错误，**服务被禁止:用户 https://...**，是授权错误，**不是**是认证错误。应用编程接口服务器知道我们是谁，但不让我们访问应用编程接口。
3.  我们将在下一章深入探讨 RBAC 和授权的细节，但是现在，创建这个 RBAC 绑定:
    ```
    kubectl create -f -    46m   v1.17.0
    ```
    查看集群节点
6.  您现在使用的是您的登录凭据，而不是主证书！工作时，会话将会刷新。退出 OpenUnison 并观察节点列表。一两分钟内，您的令牌将过期，不再工作:
    ```
    $ kubectl get nodes
    Unable to connect to the server: failed to refresh token: oauth2: cannot fetch token: 401 Unauthorized
    ```
恭喜你！现在，您已经设置了您的集群，它可以执行以下操作:
*   使用企业现有的认证系统，使用 SAML2 进行认证。
*   使用来自您的集中式认证系统的组来授权对 Kubernetes 的访问(我们将在下一章中详细介绍如何授权)。
*   使用集中式凭据让您的用户能够访问 CLI 和仪表板。
*   通过使用提供超时方法的短期令牌来维护企业的法规遵从性要求。
*   从用户的浏览器到入口控制器，再到 OpenUnison、仪表板，最后是 API 服务器，一切都使用 TLS。
接下来，您将学习如何将集中式认证集成到托管集群中。
# 引入模拟，将认证与云管理的集群相集成
使用谷歌、亚马逊、微软和数字海洋等云供应商的托管 Kubernetes 服务非常流行。当涉及到这些服务时，通常可以非常快速地启动和运行，并且它们都共享一个公共线程:它们不支持 OpenID Connect。
在本章的前面，我们讨论了 Kubernetes 如何通过 webhooks 支持自定义认证解决方案，除非您是公共云提供商或 Kubernetes 系统的其他主机，否则您永远不应该使用这种方法。事实证明，几乎每个云供应商都有自己的方法来使用这些 webhooks，它们使用自己的身份和访问管理实现。既然如此，为什么不直接使用供应商提供的东西呢？您可能不想使用云供应商的 IAM 系统有几个原因:
*   **技术**:您可能希望以安全的方式支持云供应商没有提供的功能，例如仪表板。
*   **组织**:将对托管 Kubernetes 的访问与该云的 IAM 紧密耦合会给云团队带来额外的负担，这意味着他们可能不想管理对您的集群的访问。
*   **用户体验**:您的开发人员和管理员可能需要跨多个云工作。提供一致的登录体验使他们更容易，并且需要学习的工具更少。
*   **安全性和合规性**:云实现可能无法提供符合企业安全需求的选择，例如短期令牌和空闲超时。
话虽如此，还是有理由使用云供应商的实现。不过，你需要平衡需求。如果您想继续对托管的 Kubernetes 使用集中式认证和授权，您需要学习如何使用模拟。
## 什么是模仿？
Kubernetes 模拟是一种告诉应用编程接口服务器你是谁的方式，而不需要知道你的凭证或者强迫应用编程接口服务器信任一个 OpenID Connect IdP。当您使用`kubectl`时，API 服务器将接收一个被授权模拟用户的服务帐户或识别证书，以及一组告诉 API 服务器代理代表谁的头，而不是直接接收您的`id_token`:
![Figure 7.11 – Diagram of how a user interacts with the API server when using Impersonation ](img/Fig_7.11_B15514.jpg)
图 7.11–使用模拟时用户如何与应用编程接口服务器交互的示意图
反向代理负责确定如何从用户提供的`id_token`(或任何其他令牌)映射到`Impersonate-User`和`Impersonate-Group` HTTP 头。仪表板永远不应该使用特权身份进行部署，模拟的能力属于特权身份。要允许 2.0 仪表板的模拟，请使用类似的模型，但不要转到 API 服务器，而是转到仪表板:
![Figure 7.12 – Kubernetes Dashboard with Impersonation ](img/Fig_7.12_B15514.jpg)
图 7.12–带模拟功能的 Kubernetes 仪表板
用户与反向代理交互就像任何网络应用一样。反向代理使用自己的服务帐户并添加模拟头。仪表板在所有请求上将该信息传递给应用编程接口服务器。仪表板从来没有自己的身份。
## 安全考虑
服务帐户有一个特定的超能力:它可以用来冒充任何人(取决于你的 RBAC 定义)。如果您从集群内部运行您的反向代理，服务帐户是可以的，特别是如果与`TokenRequest`应用编程接口相结合以保持令牌短暂。在这一章的前面，我们谈到了`ServiceAccount`对象没有过期。这一点很重要，因为如果您在集群之外托管反向代理，那么如果它被破坏了，有人可以像任何人一样使用该服务帐户来访问 API 服务。确保您经常轮换该服务帐户。如果您在群集外运行代理，最好使用寿命较短的证书，而不是服务帐户。
在群集上运行代理时，您需要确保它已被锁定。它至少应该在自己的命名空间中运行。也不是`kube-system`。你想尽量减少谁有权访问。使用多因素认证来访问该名称空间始终是一个好主意，控制哪些 pods 可以访问反向代理的网络策略也是如此。
基于我们刚刚了解到的关于模拟的概念，下一步是更新我们集群的配置以使用模拟，而不是直接使用 OpenID Connect。您不需要云管理的集群来使用模拟。
# 为模拟配置集群
让我们为集群部署一个模拟代理。假设您正在重用您现有的集群，我们首先需要删除我们的 orchestra Helm 部署(这不会删除操作符；我们想保留 OpenUnison 运算符)。那么，让我们开始吧:
1.  Run the following command to delete our `orchestra` Helm deployment:
    ```
    $ helm delete orchestra --namespace openunison
    release "orchestra" uninstalled
    ```
    在`openunison`命名空间中运行的唯一一个 pod 是我们的运算符。请注意，所有的机密、入口、部署、服务和其他由操作员在部署编排器掌舵图时创建的对象都已消失。
2.  Next, redeploy OpenUnison, but this time, update our Helm chart to use impersonation. Edit the `values.yaml` file and add the two bold lines shown in the following example file:
    ```
    network:
      openunison_host: "k8sou.apps.192-168-2-131.nip.io"
      dashboard_host: "k8sdb.apps.192-168-2-131.nip.io"
     api_server_host: "k8sapi.apps.192-168-2-131.nip.io"
      session_inactivity_timeout_seconds: 900
      k8s_url: https://192.168.2.131:32776
    cert_template:
      ou: "Kubernetes"
      o: "MyOrg"
      l: "My Cluster"
      st: "State of Cluster"
      c: "MyCountry"
    image: "docker.io/tremolosecurity/openunison-k8s-login-saml2:latest"
    myvd_config_path: "WEB-INF/myvd.conf"
    k8s_cluster_name: kubernetes
    enable_impersonation: true
    dashboard:
      namespace: "kubernetes-dashboard"
      cert_name: "kubernetes-dashboard-certs"
      label: "k8s-app=kubernetes-dashboard"
      service_name: kubernetes-dashboard
    certs:
      use_k8s_cm: false