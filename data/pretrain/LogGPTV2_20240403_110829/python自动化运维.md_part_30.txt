API模块包及全局参数，同时也增加代码的复用性。
【/home/test/OMServer/config.py】
# -*- coding： utf-8 -*-
#！/usr/bin/env python
AUTO_PLATFORM = "saltstack" #指定组件环境，支持Saltstack、Ansible、Func
#密钥，与项目中setting.py的SECRET_KEY变量保持一致
SECRET_KEY = "ctmj#&amp；8hrgow_^sj$ejt@9fzsmh_o）-=（byt5jmg=e3#foya6u"
服务器端任务模块由Modulehandle类及其两个方法组成，其中__init__（）方
法作用为初始化模块基本信息，包括操作主机列表、模块ID、模块扩展参数
等；run（）方法实现组件API的调用以及返回执行结果。针对“重启进程服务”这
个任务模块，下面分别介绍3个组件的不同实现方法。
1）编写Ansible组件ID为“1007”模块。
根据Ansible组件模块的开发原理，通过调用command模块实现远程命令执
行，使用copy模块实现文件远程同步，详细源码如下：
【/home/test/OMServer/modules/ansible/Mid_1007.py】
# -*- coding： utf-8 -*-
from Public_lib import *
#重启应用模块进程服务#
class Modulehandle（）：
def __init__（self，moduleid，hosts，sys_param_row）： #初始化方法无须改动
self.hosts = ""
self.Runresult = ""
self.moduleid = moduleid #模块ID
self.sys_param_array= sys_param_row #模块扩展参数列表
self.hosts=target_host（hosts，"IP"） #格式化主机信息，参数“IP”为IP地
址，“SN”为主机名
#任务下发、执行方法
def run（self）：
try： #根据模块扩展参数定义执行的不同命令集
commonname=str（self.sys_param_array[0]）
if commonname=="resin"：
self.command="/etc/init.d/resin restart"
elif commonname=="nginx"：
self.command="/etc/init.d/nginx restart"
elif commonname=="haproxy"：
self.command="/etc/init.d/haproxy restart"
elif commonname=="apache"：
self.command="/etc/init.d/httpd restart"
elif commonname=="mysql"：
self.command="/etc/init.d/mysql restart"
elif commonname=="lighttpd"：
self.command="/etc/init.d/lighttpd restart"
#调用Ansible提供的API（command模块），执行远程命令
self.Runresult = ansible.runner.Runner（
pattern=self.hosts， forks=forks，
module_name="command"， module_args=self.command，）.run（）
if len（self.Runresult['dark']） == 0 and len（self.Runresult['contacted']） == 0：
return "No hosts found，请确认主机已经添加ansible环境！"
except Exception，e：
return str（e）
return self.Runresult #返回执行结果
2）编写Saltstack组件ID为“1007”模块。
根据Saltstack组件模块的开发原理，通过调用cmd（）方法配
置“cmd.run”与“cp.get_file”参数实现远程命令执行及文件远程同步，详细源码
（部分）如下：
【/home/test/OMServer/modules/saltstack/Mid_1007.py】
def run（self）：
try：
client = salt.client.LocalClient（）
……
#调用Saltstack提供的API（cmd.run模块），执行远程命令
self.Runresult = client.cmd（self.hosts，'cmd.run'，
[self.command]，\
expr_form='list'）
if len（self.Runresult） == 0：
return "No hosts found，请确认主机已经添加saltstack环境！"
except Exception，e：
return str（e）
return self.Runresult #返回执行结果
3）编写Func组件ID为“1007”模块。
根据Func组件模块的开发原理，通过调用client.command.run（）方法实现远
程命令执行，使用client.copyfile.copyfile（）方法实现文件远程同步，详细源码
（部分）如下：
【/home/test/OMServer/modules/func/Mid_1007.py】
def run（self）：
try：
client = fc.Overlord（self.hosts）
……
#调用Func提供的API（command.run模块），执行远程命令
commonname=str（self.sys_param_array[0]）
self.Runresult=client.command.run（self.command）
except Exception，e：
return str（e）
return self.Runresult #返回执行结果
任务模块编写完成后，启动服务端服务，运行以下命令：
# cd /home/test/OMServer
# python OMservermain.py &
最后，打开浏览器访问http://omserver.domain.com，效果见图13-11。
图13-11 远程操作功能截图
参考提示 RC4加密算法参考文章
http://www.snip2code.com/Snippet/27937/Blockout-encryption-decryption-methods-
p。
第14章 打造Linux系统安全审计功能
随着互联网逐渐深入我们日常生活的方方面面，网络安全威胁也随之严重，
比如服务器渗透、数据窃取、恶意攻击等。为了解决网络安全的问题，人们采
取了各式各样的防护措施来保证网络或服务的正常运行，其中系统安全审计是
记录入侵攻击主机的一个重要凭证：实时跟踪黑客的操作记录，可在第一时间
监测到攻击者的行为，并让管理员采取相应的应对措施；同时也可作为日后攻
击者的犯罪证据，为后续的审计工作提供数据依据，具有可靠性、完整性、不
可抵赖等特点。本章将介绍在OMServer平台扩展Linux系统安全审计功能。
14.1 平台功能介绍
安全审计功能作为OMServer平台的一部分，扩展了Linux系统安全审计的功
能，实现实时跟踪所有Linux服务器系统登录账号的操作记录，由于操作记录异
地集中式存储，即使攻击者做了事后的操作痕迹清理也无济于事。该功能结合
Linux系统的history（命令行历史记录）工作机制实现，同时设置用户全局环
境/etc/profile的history属性变量，实现定制系统用户实时触发事件，在该事件中
加入Python编写的上报脚本，实现数据的实时跟踪，最后利用OMServer的前端
作为实时输出展示，平台首页截图见图14-1。
图14-1 平台首页截图
14.2 系统构架设计
OMServer平台安全审计的功能同样基于B/S结构，服务端的数据来源于业务
集群Agent实时上报，使用MySQL数据库作为数据存储，客户端采用prototype.js
前端架构实现数据同步展示，系统架构图见图14-2。
图14-2 系统架构图
从图14-2中可以看出系统的整体架构，首先管理员在业务服务器集群部署
Python数据上报脚本，通过OMServer提供的cgi接口实现数据接收、入库，最后
通过访问前端页面来查看、跟踪服务器上报的审计信息，整个流程结束。
14.3 数据库结构设计
14.3.1 数据库分析
安全审计服务器端功能是在OMServer平台上进行扩展，追加一张
server_history表，用于操作事件信息的存储，且与server_list的IP字段配置外键关
联。表信息说明如下。
·server_history：操作事件表。
·server_list：服务器列表。
14.3.2 数据字典
server_list服务器列表。
server_history操作事件表。
数据库模型功能沿用了OMServer系统中主机表（server_list）的层次结构，
且追加了操作事件表（server_history），其中，将表server_history的history_ip字
段设置成外键，与server_list表中的server_lip字段进行关联，详细见图14-3的数
据库模型。
图14-3 平台数据库模型
14.4 系统环境部署
14.4.1 系统环境说明
系统安全审计功能的服务器端作为OMServer项目的App存在，关于服务器端
Web Server的环境搭建本节将不再说明。为了便于读者理解，下面对上报主机系
统环境配置、Agent与服务器端Python实现方法进行详细说明，环境设备角色如
表14-1所示。
表14-1 系统环境说明表
14.4.2 上报主机配置
系统安全审计功能主机上报需要完成两个任务，一为配置用户profile，二为
编写上报Python脚本，下面一一进行说明。
（1）系统用户环境配置
通过配置Linux profile的history相关变量来实现与安全审计功能的对接，包括
指定系统账号history存放路径、存储长度、扩展信息、PROMPT_COMMAND事
件等，更多见以下配置及含义说明。
# vi /etc/profile
# 追加以下配置
#add by OMAudit
export HISTFILE=$HOME/.bash_history #指定用户history日志存放路径
export HISTSIZE=1200 #指定history 命令输出的记录数
export HISTFILESIZE=1200 #指定历史记录文件.bash_history的最大存储行数
export HISTCONTROL=ignoredups #不记录连续重复的命令
export HISTTIMEFORMAT="`whoami` %F %T " # history命令显示当前记录的用户与时间，例
如：
# “root 2014-06-05 23：32：16 free –m”
# PROMPT_COMMAND变量最为核心，实现了指定内容在出现bash提示符前执行的功能；
# “history –a” 将目前新增的history命令写入histfiles中；“history -c”删除记录的所有命
令（仅内存）；
# “history -r” 将histfiles 的内容读到内存中，即可以通过history查看；
# “/home/test/OMAudit/OMAudit_agent.py $（history 1）” 通过$（history 1）获取最
后一条
# 命令，且作为参数传递给OMAuditmain.py脚本，做后续的命令数据信息上报
export PROMPT_COMMAND="history -a； history -c； history -
r；"'/home/test/OMAudit/ OMAudit_agent.py $（history 1）'
shopt -s histappend #历史清单将以添加形式加入HISTFILE变量指定的文件，而不是覆盖
typeset -r PROMPT_COMMAND #设置关键变量只读，提高安全性
typeset -r HISTTIMEFORMAT
保存配置后使其生效，运行“source/etc/profile”命令，profile环境配置完成。
（2）客户端上报脚本
客户端上报脚本的作用是将接收的最新Linux命令“$（history 1）”及服务器相
关信息提交到OMServer主机，其中config.py为上报agent的配置文件，涉及三个
选项，详细说明如下：
【/home/test/OMAudit/config.py】
# -*- coding： utf-8 -*-
#！/usr/bin/env python
Net_driver = "eth0" #为便于记录上报来源主机，获取指定网卡驱动的IP地址
OMServer_address = "omserver.domain.com" #OMServer服务器端地址，作为上报的目的
Connect_TimeOut = 3 #指定上报超时时间，单位为秒
OMAudit_agent.py作为主上报agent程序，负责信息的上报，采用了httplib模
块作为HTTP客户端，详细源码及说明如下：
【/home/test/OMAudit/OMAudit_agent.py】
#！/usr/bin/env python
#coding：utf-8
import sys
import socket
import fcntl
import struct
import logging
from config import *
import urllib，httplib
socket.setdefaulttimeout（Connect_TimeOut） #设置全局Socket超时时间（覆盖HTTP
连接超时）
logging.basicConfig（level=logging.DEBUG， #启用日志记录
format='%（asctime）s [%（levelname）s] %（message）s'，
filename=sys.path[0]+'/omsys.log'，
filemode='a'）
#对$（history 1）信息进行合法校验，少于6个参数则报错，正确的格式为“173 root 2014-06-
07 22：05：56 ls”
if len（sys.argv）<6：
logging.error（'History not configured in /etc/profile！'）
sys.exit（）
def get_local_ip（ethname）： #获取本地IP地址函数，用来确认数据来源
try：
sock = socket.socket（socket.AF_INET， socket.SOCK_DGRAM）
addr = fcntl.ioctl（sock.fileno（）， 0x8915， struct.pack（'256s'， ethname））
return socket.inet_ntoa（ addr[20：24] ）
except Exception，e：
logging.error（'get localhost IP address error：'+str（e））
return "127.0.0.1"
def pull_history（http_get_param=""）： #数据上报函数
try：
#与OMServer服务器建立HTTP连接，指定超时时间
http_client =httplib.HTTPConnection（OMServer_address， 80， timeout= Connect_TimeOut）
http_client.request（"GET"， http_get_param） #发起GET请求
response =http_client.getresponse（） #获取HTTP返回对象
if response.status ！= 200： #非HTTP 200状态则退出
logging.error（'response http status error：'+str（response.status））
sys.exit（）
http_content=response.read（）.strip（） #返回字符串非“OK”则退出
if http_content ！= "OK"：
logging.error（'response http content error：'+str（http_content））
sys.exit（）
except Exception， e：
logging.error（'connection django-cgi server error：'+str（e））
sys.exit（）
finally：
if http_client：
http_client.close（）
else：
logging.error（'connection django-cgi server unknown error.'）
sys.exit（）
Sysip = get_local_ip（Net_driver） #调用获取本地IP函数
SysUser = sys.argv[2] #获取history信息中的系统用户
History_Id = sys.argv[1] #获取history ID信息
History_date = sys.argv[3] #获取history 日期信息
History_time = sys.argv[4] #获取history 时间信息
History_command = ""
for i in range（5， len（sys.argv））： #获取history的系统命令信息
History_command+= sys.argv[i]+" "
#合并所有信息的HTTP GET参数格式，部分信息使用urllib.quote进行URL编码
s= "/omaudit/omaudit_pull/？history_id="+History_Id+"&history_ip="+Sysip+"&history_user="+SysUser+ \
"&history_datetime="+History_date+urllib.quote（" "）+History_time+"&history_com
mand="+urllib.quote（History_command.strip（））
pull_history（s） #调用数据上报函数
添加“/home/test/OMAudit/OMAudit_agent.py”可执行权限，执行以下chmod命
令，客户端上报agent部署完毕。接下来使用SSH工具登录Linux服务器，输入的