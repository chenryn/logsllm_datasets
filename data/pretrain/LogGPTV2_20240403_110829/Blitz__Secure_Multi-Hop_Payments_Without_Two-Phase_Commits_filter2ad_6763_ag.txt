xUi+1
Ui
Ui+1
pkUi
pkUi+1
txr
i
αi + ε
txp
i
αi
Ui
pkUi
Ui+1
pkUi+1
+∆
pkUi, pkUi+1
≥ T
pkUi+1
txer
...
ε
...
+tc + ∆
pkUi
(cid:48)
i
txstate
αi
α(cid:48)
i
xUi − αi − α(cid:48)
i
xUi+1
. . .
Ui
Ui+1
pkUi
pkUi+1
txr
i
αi + ε
txp
i
αi
Ui
pkUi
Ui+1
pkUi+1
+∆
pkUi, pkUi+1
≥ T
pkUi+1
Figure 9: Concurrent payments between users Ui and Ui+1: (left) a Blitz channel with a single payment; (right) an updated
channel that has this payment and a second concurrent one. To add a second payment of value α(cid:48)
i to the channel, the transactions
(cid:48) and ﬁnally,
for the in-ﬂight payment of value αi are recreated with the new state txstate
the old state txstate
is revoked. In the LN, this process is the same, except that the HTLC contract and transactions are recreated,
instead of the Blitz ones.
(cid:48) as input, the channel is updated to txstate
i
i
i
some time period, ≥ 0
τ
0
τ
n
. . .
c − 3 ∆
T − t
c − 2 ∆
T − 2 ∆
T − t
T − ∆
T
time
Setup payment structure
Case Refund:
Setup failure:
U0 publishes txer
Publish txer
Close γi
L
o n
t x e r
o n
t x s t a t e
i
Publish txr
i
L
L
o n
t x r
i
Case Payment (txer not on L before T −tc − 3∆):
α effectively paid
Figure 10: Timeline of when transactions appear on the ledger L in the case payment and refund. τn −τ0 denotes the time needed
for the setup of the whole payment.
E Timeline
We show a timeline of posting the transaction of the Blitz
payment construction between two users in Figure 10. Red
shows the refund case, green the payment case.
F Communication overhead
To evaluate our payment scheme, we created an imple-
mentation that creates the transactions necessary for set-
ting up the payment. The source code is publicly available
at https://github.com/blitz-payments/overhead. We
tested the compatibility by deploying the transactions on the
Bitcoin testnet and checking if the transactions achieve our in-
tended functionalities. Furthermore, we measured the transac-
tion sizes in Bytes and compare them to multi-hop payments
in the Lightning Network (LN) in a case-by-case analysis.
We present the number of transactions and their sizes for
the different sizes in Table 3. Note that the size of the contract
in our construction is only 88 Bytes compared to the 119 of
the HTLC, a difference mostly due to the part of the script that
veriﬁes the hash pre-image. This means, that state transactions
Table 3: Communication overhead of the LN and Blitz. The
pessimistic transactions are on-chain, the rest off-chain.
Cases
Pay (pessimistic)
Refund (pessimistic) per channel
Additional pess. refund cost for sender
Cost of p in-ﬂight payments
# txs
1
1
0
1
LN
size
192
158
0
225 + 119· p
Blitz
size
158
307
157 + 34· n
225 + 88· p
# txs
1
1
1
1
holding several different in-ﬂight payments, which directly
implement the contract in their outputs, can hold around 26%
more Blitz payments than LN payments. For one payment,
this difference results in a state of size 311 Bytes for Blitz
and a state of 345 Bytes for the LN. In Blitz, additionally to
the state we require the refund transaction to be exchanged,
which is 307 Bytes, resulting in 618 Bytes for a 2-party setup.
For the rest of the cases, the Blitz payments and the LN
payments are similar. In the pessimistic case, both Blitz and
the LN require to publish one transaction (after closing the
channel) per disputed channel. In the pessimistic refund case,
the it is 158 Bytes in the LN and 307 Bytes in Blitz, due to the
USENIX Association
30th USENIX Security Symposium    4059
Table 4: Extended results of our simulation.
FRate
ppnpr
4
13
15
751
28
1076
0.5% 4
0.5% 50
4
1%
1%
50
2.5% 4
2.5% 50
ub
failBlitz
25% disrupted type 1, 75% type 2
3000
3000
3000
3000
3000
3000
75% disrupted type 1, 25% type 2
3000
3000
3000
3000
3000
3000
0.5% 4
0.5% 50
4
1%
1%
50
2.5% 4
2.5% 50
18
505
19
1458
78
15427
failLN
ratio
33
4343
56
32807
182
77213
31
4422
61
33386
195
77574
8.25
334.08
3.73
43.68
6.50
71.76
1.72
8.76
3.21
22.90
2.50
5.03
additional signature of the input spending from txer. In the
pay case it is 192 Bytes in the LN and 158 Bytes in Blitz, due
to the additional hash in the LN. The most notable difference
in comparing the transaction overhead comes from the fact
that in the Blitz payment, the sender has to publish txer in
the pessimistic refund case, which is a total of 157 + 34· (n)
Bytes, for a payment path of length n + 1. However, in the
LN there is an additional communication overhead of sending
the hash pre-image of 32 Bytes per channel back in the open
phase.
G Extended simulation results
In this section, we include results for the simulation when
we do not distribute the disrupted payments equally between
the two types. As expected, letting 75% of the disrupted pay-
ments be of the second type is more favorable for Blitz, while
having 25% is less favoring than dividing equally. We show
the results in Table 4.
H Extended macros
In this section, we give concrete pseudo-code for the used
subprocedures.
Subprocedures
checkTxIn(txin,n,U0):
1. Check that txin is a transaction on the ledger L.
2. If
txin.output[0].cash ≥ n · ε
and txin.output[0].φ =
OneSig(U(cid:48)
0), that is spendable by an unused address of U0,
return (cid:62). Otherwise, return ⊥. When using this transaction (to
fund txer), the sender will pay any superﬂuous coins back to a
fresh address of itself.
checkT(n,T ):
Let τ be the current round. If T ≥ τ + n(2 + tu) + 3∆ + tc + 1,
return (cid:62). Otherwise, return ⊥
genTxEr(U0, channelList, txin):
1. Let outputList := /0 and rList := /0
2. For every channel γi in channelList:
• (pk(cid:101)Ui
,Ri) ← GenPk(γi.left.A,γi.left.B)
:= outputList ∪ (ε, OneSig(pk(cid:101)Ui
• outputList
RelTime(tc + ∆))
• rList := rList∪ Ri
3. Let P := {γi.left,γi.right}γi∈channelList and let nodeList be a
list, where P is sorted from sender to receiver. Let n := |P|.
) ∧
4. Shufﬂe outputList and rList.
5. Let txer := (txin.output[0], outputList)
6. Create a list [msgi]i∈[0,n], where msgi := H (txer)
7. onion ← CreateRoutingInfo(nodeList, [msgi]i∈[0,n])
8. Return (txer, rList, onion)
genState(αi,T,γi):
1. For the users Ui := γi.left = and Ui+1 := γi.right, create the
:= (αi, (MultiSig(Ui,Ui+1) ∧ RelTime(T )) ∨
output vector(cid:126)θi := (θ0,θ1,θ2), where
• θ0
(OneSig(Ui+1)∧ AbsTime(T )))
• θ1 := (xUi − αi, OneSig(Ui))
• θ2 := (xUi+1 , OneSig(Ui+1))
where xUi and xUi+1 is the amount held by Ui and Ui+1 in the
channel, respectively.
2. Let txstate
be a channel transaction carrying the state with
i
i
txstate.output =(cid:126)θi. Return txstate
.
checkTxEr(Ui,a,b, txer, rList, onioni):
1. x := GetRoutingInfo(onioni,Ui). If x = ⊥, return ⊥. If Ui is
the receiver and x = H (txer) , return ((cid:62),(cid:62),(cid:62),(cid:62),(cid:62)). Else, if
x (cid:54)= (Ui+1,H (txer), onioni+1), return ⊥.
2. For all outputs (cash,φ) ∈ txer.output it must hold that:
exactly
• cash = ε
:= (ε, OneSig((cid:101)Ui) ∧
• φ = OneSig(pkx)∧ RelTime(tc + ∆) for some identity pkx
RelTime(tc + ∆)) ∈ txer.output and one element Ri ∈ rList it
be the corresponding public key of OneSig((cid:101)Ui)
must hold that
:= GenSk(a,b, pk(cid:101)Ui
• Let pk(cid:101)Ui
• sk(cid:101)Ui
secret key of pk(cid:101)Ui
4. If the checks in 2 or 3 do not hold, return ⊥
5. Return (sk(cid:101)Ui
,Ri) must be the corresponding
,θεi ,Ri,Ui+1, onioni+1)
3. For
output
one
θεi
checkChannels(channelList,U0):
Check that channelList forms a valid path from U0 via some
intermediaries to a receiver Un and that no users are in the path
twice. If not, return ⊥. Else, return Un.
4060    30th USENIX Security Symposium
USENIX Association