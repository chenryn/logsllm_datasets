is depthS(C)
Notions of depth. For circuits in CS and CE, we use
alternative notions of depth, called S-depth and E-depth;
both S-depth and E-depth are bounded from above by
(traditional) circuit depth, but are sometimes much less.
• The S-depth of C in CS
:=
maxw∈outputs(C) depthS(w) and depthS(w) is deﬁned
there, bw ∈ {0, 1} equals 1 if and
in Figure 2;
only if either |inputs(gw)| ≥ 2 or |inputs(gw)| =
1 ∧ coeﬀs(g)[0] (cid:14)= 0
• The E-depth of C in CE
:=
maxw∈outputs(C) depthE(w) and depthE(w) is deﬁned
∈ {0, 1} equals 1 if
in Figure 2;
and only if ds(L-input(gw)) ∩ ds(R-input(gw)) = ∅
and depthE(L-input(gw)) ≤ depthE(R-input(gw)),
∈ {0, 1} equals 1 if and only if
(cid:4)
and bmul
is depthE(C)
there, badd
w
w
(cid:2)∈inputs(gw) ds(w
w
(cid:4)
) = ∅.
E. Pairings and duplex-pairing groups
Pairings.
Let G1 and G2 be cyclic groups of a
prime order r. Let G1 be a generator of G1,
i.e.,
G1 = {αG1}α∈Fr, and let G2 be a generator for G2.
A pairing is an efﬁcient map e : G1 × G2 → GT , where
GT is also a cyclic group of order r (which, unlike other
groups, we write in multiplicative notation), satisfying
the following properties.
• BILINEARITY. For every pair of nonzero elements
α, β ∈ Fr, it holds that e(αG1, βG2) = e(G1,G2)αβ.
• NON-DEGENERACY. e(G1,G2) (cid:14)= 1
Duplex-pairing groups. A group G of prime order
r is duplex pairing if there are order-r groups G1 and
(i) there is a pairing e : G1 × G2 → GT
G2 such that
for some target group GT , and (ii) there is a generator
G1 of G1 and G2 of G2 such that G is isomorphic to
{(α · G1, α · G2)| α ∈ Fr} ⊆ G1 × G2.
F. Secure multi-party computation
We specialize deﬁnitions of secure multi-party compu-
tation [12], [13] to our setting, by considering parties’
inputs that are ﬁeld elements rather than bit strings,
by considering families of functionalities rather than a
single functionality, and making explicit the notion of a
(transcript) veriﬁer. These deﬁnitions provide background
and notation for this paper (and closely follow the
treatment in [68]). We assume familiarity with simulation-
based security deﬁnitions; for more, see [68].
1) Multi-party broadcast protocols
We consider multi-party protocols that run over a
synchronous network with an authenticated broadcast
channel. Namely, the computation proceeds in rounds
and, at each round, the protocol’s schedule determines
which parties act; a party acts by broadcasting a message
to all other parties. The broadcast channel is authenticated
in that all parties always know who sent a particular
message (regardless of what an adversary may do).
Moreover, we assume that parties have access to a
common random string crs; to simplify notation, we
do not make crs an explicit input. We now introduce
some notations and notions for later discussions.
Honest execution.
Given a positive integer n,
an n-party broadcast protocol
is a tuple Π =
(i) S : N → 2
{1,...,n} is the
(S, Σ1, . . . , Σn) where:
deterministic polynomial-time schedule function; and
(ii) for i = 1, . . . , n, Σi
is the (possibly stateful)
probabilistic polynomial-time strategy of party i.
round
complexity
is ROUND(Π)
The execution of Π on an input (cid:4)x = (x1, . . . , xn),
denoted [[Π, (cid:4)x]], works as follows. Set t := 1. While
(i) for each i ∈ S(t) in any order, party i
S(t) (cid:14)= ∅:
runs Σi, on input (xi, t) and with oracle access to the
history of messages broadcast so far, and broadcasts the
resulting output message msgt,i and, then, (ii) t := t + 1.
The transcript of [[Π, (cid:4)x]], denoted tr, is the sequence of
triples (t, i, msgt,i) ordered by msgt,i’s broadcast time.
The output of [[Π, (cid:4)x]], denoted out, is the last message
in the transcript. Since Π’s strategies are probabilistic,
the transcript and output of [[Π, (cid:4)x]] are random variables.
The
:=
mint∈N{t| S(t + 1) = ∅}. For
i = 1, . . . , n,
(cid:3)
the time complexity of party i is TIME(Π, i)
:=
where
TIME(Σi, t) is Σi(·, t)’s time complexity.
Adversarial execution.
Let A be a probabilistic
polynomial-time algorithm and J a subset of {1, . . . , n}.
We denote by [[Π, (cid:4)x]]A,J the execution [[Π, (cid:4)x]] modiﬁed
so that A controls parties in J, i.e., A knows the private
states of parties in J, may alter the strategies of parties in
J, and may wait, in each round, to ﬁrst see the messages
broadcast by parties not
in J and, only after that,
instruct parties in J to send their messages. (In particular,
[[Π, (cid:4)x]]A,∅ = [[Π, (cid:4)x]].) We denote by REALΠ,A,J ((cid:4)x) the
concatenation of the output of [[Π, (cid:4)x]]A,J and the view
of A in [[Π, (cid:4)x]]A,J.
t∈[ROUND(Π)] s.t. i∈S(t) TIME(Σi, t)
2) Ideal functionalities
While Section III-F1 describes the real-world execution
of a protocol Π on an input (cid:4)x, here we describe the
295295
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2: Deﬁnitions of dependency set, S-depth, and E-depth; see Section III-D.
ideal-world execution of a function f on an input (cid:4)x:
each party i privately sends his input xi to a trusted
party, who broadcasts f ((cid:4)x).
Adversarial execution.
Let S be a probabilistic
polynomial-time algorithm and J a subset of {1, . . . , n}.
The ideal-world execution of f on (cid:4)x when S controls
parties in J differs from the above one as follows: S
may substitute the inputs of parties in J with other
same-length inputs. We denote by IDEALf,S,J ((cid:4)x) the
concatenation of the value broadcast by the trusted party
and the output of S in the ideal-world execution of f
on (cid:4)x when S controls parties in J.
→ Fh
3) Secure sampling broadcast protocols
Let r be a prime, G = (cid:3)G(cid:4) an order-r group, n a positive
integer, and C : Fm
r an Fr-arithmetic circuit. A
r
secure sampling broadcast protocol with n parties for
C over G is a tuple ΠS = (Π, V, S), where Π is an n-
party broadcast protocol, and V (the veriﬁer) and S (the
simulator) are probabilistic polynomial-time algorithms,
that satisﬁes the following.
For every probabilistic polynomial-time algorithm
A (the adversary) and subset J of {1, . . . , n} (the
corrupted parties) with |J| < n, these two distributions
are negligibly close:⎧⎪⎨
⎪⎩REALΠ,A,J ((cid:4)σ)
⎧⎪⎨
⎪⎩IDEALf S
negl
=
C,G ,S(A,J),J ((cid:4)σ)
(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)
r
...
⎫⎪⎬
(cid:4)σ1 ← Fm
⎪⎭
(cid:4)σn ← Fm
⎫⎪⎬
(cid:4)σ1 ← Fm
⎪⎭ .
(cid:4)σn ← Fm
V =1
...
r
r
r
(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)(cid:9)
Above, (cid:4)σ denotes ((cid:4)σ1, . . . , (cid:4)σn); V = 1 denotes con-
that V , on input
the tran-
ditioning on the event
C,G denotes
[[Π, (cid:4)x]]A,J, outputs 1; and f S
script of
the deterministic function such that f S
C,G(σ)
:=
C((
i=1 σi,m)) · G.
n
i=1 σi,1, . . . ,
(cid:2)
(cid:2)
n
Next, we extend the above deﬁnition to variable
number of parties and restricted circuit classes. Let r
be a prime, G = (cid:3)G(cid:4) a group of order r, and C a class
of Fr-arithmetic circuits. A secure sampling broadcast
protocol for C over G is a tuple ΠS = (Π, V, S) such
→ Fh
that, for every positive integer n and circuit C : Fm
r
r
in C, (Πn,C, Vn,C, Sn,C) is a secure sampling broadcast
protocol with n parties for C over G.
r
r
r
r
,
(cid:13)
→ Fh
×···× Fmn
× ··· × Fmn
4) Secure evaluation broadcast protocols
Let r be a prime, G = (cid:3)G(cid:4) an order-r group, n a positive
integer, and C : Fm1
r an Fr-arithmetic
circuit. A secure evaluation broadcast protocol with
n parties for C over G is a tuple ΠE = (Π, V, S),
where Π is an n-party broadcast protocol and V, S are
probabilistic polynomial-time algorithms, that satisﬁes
the following.
For every probabilistic polynomial-time algorithm A,
subset J of {1, . . . , n} with |J| < n, and input (cid:4)σ =
((cid:4)σ1, . . . , (cid:4)σn) in Fm1
{REALΠ,A,J ((cid:4)σ)}
Above, V = 1 denotes the event that V , on input the
transcript of [[Π, (cid:4)x]]A,J, outputs 1, and f E
C,G denotes the
C,G((cid:4)σ) := C((cid:4)σ) · G.
deterministic function such that f E
As before, we extend the above deﬁnition to variable
number of parties and restricted circuit classes. Let r be
a prime, G = (cid:3)G(cid:4) a group of order r, and C a class of
Fr-arithmetic circuits. A secure evaluation broadcast
protocol for C over G is a tuple ΠE = (Π, V, S) such
×
that, for every positive integer n and circuit C : Fm1
··· × Fmn
r in C, (Πn,C, Vn,C, Sn,C) is a secure
evaluation broadcast protocol with n parties for C over
G.
C,G ,S(A,J),J ((cid:4)σ)
IDEALf E
→ Fh
negl
=
(cid:14)
V =1
.
r
r
IV. SECURE SAMPLING FOR A CLASS OF CIRCUITS
Our main construction is a multi-party protocol for
securely sampling values of the form C((cid:4)α) · G for a
296296
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
random (cid:4)α, provided that C belongs to the class CS. We
use two cryptographic ingredients: commitment schemes
(see Section III-B) and NIZKs (see Section III-C); both
rely on a common random string, available in our setting
(see Section III-F1).
Theorem IV.1. Assume the existence of commitment
schemes and NIZKs. Let r be a prime and G a group of
order r. There is a secure sampling broadcast protocol
ΠS = (Π, V, S) for CS over G such that, for every
positive integer n and circuit C in CS,
• ROUND(Πn,C) = n · depthS(C) + 3.
• for i = 1, . . . , n, TIME(Πn,C, i) = Oλ(size(C)).
• Vn,C runs in time Oλ(n · size(C)).
• Sn,C runs in time Oλ(n · size(C)).
Our implementation and evaluation target the case
when G is a duplex-pairing group. This special case
allows for additional optimizations (when further relying
on random oracles), as discussed in Section V.
Proof strategy. We construct the protocol of Theo-
rem IV.1 in two steps. The ﬁrst step (Lemma IV.2) is
a reduction from the problem of constructing secure
sampling broadcast protocols to the problem of construct-
ing secure evaluation broadcast protocols. The second
step (Lemma IV.3) is a construction of such a secure
evaluation broadcast protocol.
Lemma IV.2 (Sampling-to-evaluation reduction). Let
r be a prime and G a group of order r. There exist
polynomial-time transformations T1 and T2 for which
the following holds.
• For every positive integer n and circuit C in CS:
(i) ˜C := T1(n, C) is a circuit in CE; (ii) for every
secure evaluation broadcast protocol ΠE with n parties
for ˜C over G, ΠS := T2(ΠE) is a secure sampling