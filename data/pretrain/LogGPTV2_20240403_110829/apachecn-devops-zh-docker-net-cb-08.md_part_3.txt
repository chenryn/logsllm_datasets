```
然后，从第二个容器访问服务:
```
user@docker4:~$ docker exec -it web2 curl http://10.100.93.2
    Web Server #1 - Running on port 80
user@docker4:~$
```
连接工作正常。现在我们已经有了与 Docker 一起工作的整个 Flannel 配置，说出我们做事的顺序是很重要的。我们看到的其他解决方案能够将他们解决方案的某些部分进行容器化。例如，Weave 能够以容器的形式提供他们的服务，而不是像我们使用 Flannel 那样需要本地服务。有了 Flannel，每个组件都有一个额外的工作。
例如，我们需要在 Flannel 注册之前运行`etcd`服务。这本身并不是一个大问题，如果`etcd`和 Flannel 都在容器中运行，你可以很容易地解决这个问题。但是，由于 Docker 需要对其网桥 IP 地址进行的更改是在服务级别完成的，因此 Docker 需要在开始之前了解 Flannel 范围。这意味着我们不能在 Docker 容器中运行`etcd`和 Flannel 服务，因为没有 Flannel 基于从`etcd`读取密钥生成的信息，我们无法启动 Docker。在这种情况下，理解每个组件的先决条件很重要。
### 注
在 CoreOS 中运行 Flannel 时，他们能够在容器中运行这些组件。对此的解决方案在他们的文档中有详细说明，位于发动机罩下的*部分:*
[https://coreos.com/flannel/docs/latest/flannel-config.html](https://coreos.com/flannel/docs/latest/flannel-config.html)
# 使用 VXLAN 后端
如前所述，Flannel 支持多种不同的后端配置。后端被认为是 Flannel 在启用 Flannel 的主机之间传递流量的方式。默认情况下，这是通过 UDP 完成的，就像我们在前面的食谱中看到的那样。不过 Flannel 也支持 VXLAN。与 UDP 相比，使用 VXLAN 的优势在于较新的主机在内核中支持 VXLAN。在本食谱中，我们将演示如何将 Flannel 后端类型更改为 VXLAN。
## 做好准备
假设您是在本章前面的配方中描述的实验室基础上构建的。您将需要与 Docker 集成的支持 Flannel 的主机，如本章前两部分所述。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
您希望使用的后端类型是在第一次在`etcd`内实例化您的网络时定义的。由于我们在定义网络`10.100.0.0/16`时没有指定类型，Flannel 默认使用 UDP 后端。这可以通过更新我们最初在`etcd`中设置的配置来更改。回想一下，我们的 Flannel 网络最初是用以下命令定义的:
```
etcdctl mk /coreos.com/network/config '{"Network":"10.10.0.0/16"}'
```
注意我们如何使用`etcdctl`的`mk`命令来制作密钥。如果我们想将后端类型更改为 VXLAN，我们可以运行以下命令:
```
etcdctl set /coreos.com/network/config '{"Network":"10.100.0.0/16", "Backend": {"Type": "vxlan"}}'
```
注意，由于我们正在更新对象，我们现在使用`set`命令代替`mk`。虽然有时很难看到纯文本形式，但我们传递给`etcd`的格式正确的 JSON 看起来是这样的:
```
{
    "Network": "10.100.0.0/16",
    "Backend": {
        "Type": "vxlan",
    }
}
```
这将这个后端的类型定义为 VXLAN。虽然前面的配置本身足以改变后端类型，但有时我们可以指定附加参数作为后端的一部分。例如，当定义类型为 VXLAN 时，我们还可以指定一个 **VXLAN 标识符** ( **VNI** )和一个 UDP 端口。如果未指定，VNI 默认为`1`，端口默认为`8472`。为了演示，我们将默认设置作为配置的一部分:
```
user@docker1:~$ etcdctl set /coreos.com/network/config \
'{"Network":"10.100.0.0/16", "Backend": {"Type": "vxlan","VNI": 1, "Port": 8472}}'
```
这在格式正确的 JSON 中是这样的:
```
{
    "Network": "10.100.0.0/16",
    "Backend": {
        "Type": "vxlan",
        "VNI": 1,
        "Port": 8472
    }
}
```
如果我们运行命令，本地`etcd`实例配置将被更新。我们可以通过`etcdctl`命令行工具查询`etcd`来验证`etcd`的配置是否正确。要阅读配置，我们可以使用`etcdctl get`子命令:
```
user@docker1:~$ etcdctl get /coreos.com/network/config
{"Network":"10.100.0.0/16", "Backend": {"Type": "vxlan", "VNI": 1, "Port": 8472}}
user@docker1:~$
```
虽然我们已经成功更新了`etcd`，但是每个节点上的 Flannel 服务不会在这个新配置上起作用。这是因为每个主机上的 Flannel 服务仅在服务启动时读取这些变量。为了使此更改生效，我们需要在每个节点上重新启动 Flannel 服务:
```
user@docker4:~$ sudo systemctl restart flanneld
```
确保在每台主机上重新启动 Flannel 服务。如果一些主机使用 VXLAN 后端，而其他主机使用 UDP 后端，主机将无法通信。重启后，我们可以再次检查 Docker 主机的接口:
```
user@docker4:~$ ip addr show
…… 
11: flannel.1:  mtu 1450 qdisc noqueue state UNKNOWN group default
    link/ether 2e:28:e7:34:1a:ff brd ff:ff:ff:ff:ff:ff
    inet 10.100.15.0/16 scope global flannel.1
       valid_lft forever preferred_lft forever
    inet6 fe80::2c28:e7ff:fe34:1aff/64 scope link
       valid_lft forever preferred_lft forever 
```
在这里，我们可以看到主机现在有了一个名为`flannel.1`的新界面。如果用`ethtool`检查接口，可以看到它使用的是 VXLAN 驱动:
```
user@docker4:~$ ethtool -i flannel.1
driver: vxlan
version: 0.1
firmware-version:
bus-info:
supports-statistics: no
supports-test: no
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: no
user@docker4:~$
```
我们应该仍然能够使用 Flannel IP 地址访问服务:
```
user@docker4:~$ docker exec -it web2 curl http://10.100.93.2
    Web Server #1 - Running on port 80
user@docker4:~$
```
### 注
如果您要指定不同的 VNI，Flannel 界面将被定义为`flannel.`。
重要的是要知道 Flannel 不负责清理旧配置的工件。例如，如果您在`etcd`中更改 VXLAN ID 并重新启动 Flannel 服务，您将在同一网络中拥有两个接口。您需要手动删除使用旧 VNI 命名的旧接口。此外，如果您更改分配给 Flannel 的子网，您将希望在重新启动 Flannel 服务后重新启动 Docker 服务。回想一下，当 Docker 服务加载时，Docker 从 Flannel 中读取配置变量。如果这些更改生效，您需要重新加载配置。
# 使用主机网关后端
正如我们已经看到的，Flannel 支持两种类型的覆盖网络。使用 UDP 或 VXLAN 封装，Flannel 可以在 Docker 主机之间构建覆盖网络。这样做的明显优势是，您可以跨不同的 Docker 节点调配网络，而不必接触物理底层网络。然而，一些类型的覆盖网络也引入了显著的性能损失，尤其是对于在用户空间中执行封装的进程。主机网关模式旨在通过不使用覆盖网络来解决这个问题。然而，这也有其自身的局限性。在本食谱中，我们将回顾主机网关模式可以提供什么，并展示如何配置它。
## 做好准备
在这个食谱中，我们将稍微修改我们一直使用到现在的实验室。实验室拓扑如下所示:
![Getting ready](img/B05453_08_03.jpg)
在这种情况下，主机`docker3`和`docker4`现在的 IP 地址与`docker1`和`docker2`位于同一子网。也就是说，所有主机现在都是第 2 层，彼此相邻，可以直接对话，而不需要通过网关路由。一旦您在此拓扑中重新配置了主机，我们将需要擦除 Flannel 配置。为此，请执行以下步骤:
*   在运行`etcd`服务的主机上:
    ```
    sudo systemctl stop etcd
    sudo rm -rf /var/lib/etcd/default 
    sudo systemctl start etcd
    ```
*   在运行 Flannel 服务的所有主机上:
    ```
    sudo systemctl stop flanneld
    sudo ip link delete flannel.1
    sudo systemctl --no-block start flanneld
    ```
### 注
您会注意到，当我们启动`flanneld`时，我们传递了带有`--no-block`参数的`systemctl`命令。由于我们从`etcd`中删除了 Flannel 配置，Flannel 服务正在搜索用于初始化的配置。由于服务的定义方式(如类型 notify)，需要传递此参数以防止命令挂在 CLI 上。
## 怎么做…
此时，您的 Flannel 节点将搜索它们的配置。由于我们删除了`etcd`数据存储，告知 Flannel 节点如何配置服务的密钥目前丢失，Flannel 服务将继续轮询`etcd`主机，直到我们进行适当的配置。我们可以通过检查其中一台主机上的日志来验证这一点:
```
user@docker4:~$ journalctl -f -u flanneld
-- Logs begin at Wed 2016-10-12 12:39:35 CDT. –
Oct 12 12:39:36 docker4 flanneld[873]: I1012 12:39:36.843784 00873 manager.go:163] Using 10.10.10.104 as external interface
Oct 12 12:39:36 docker4 flanneld[873]: I1012 12:39:36.844160 00873 manager.go:164] Using 10.10.10.104 as external endpoint
Oct 12 12:41:22 docker4 flanneld[873]: E1012 12:41:22.102872 00873 network.go:106] failed to retrieve network config: 100: Key not found (/coreos.com) [4]
Oct 12 12:41:23 docker4 flanneld[873]: E1012 12:41:23.104904 00873 network.go:106] failed to retrieve network config: 100: Key not found (/coreos.com) [4] 
```
需要注意的是，此时 Flannel 已经通过查看哪个接口支持主机的默认路由来决定其外部端点的 IP 地址:
```
user@docker4:~$ ip route
default via 10.10.10.1 dev eth0
10.10.10.0/24 dev eth0  proto kernel  scope link  src 10.10.10.104
user@docker4:~$
```
由于这恰好是`eth0`，Flannel 选择该接口的 IP 地址作为其外部地址。要配置主机网关模式，我们可以将以下配置放入`etcd`:
```
{  
   "Network":"10.100.0.0/16",
   "Backend":{  
      "Type":"host-gw"
   }
}
```