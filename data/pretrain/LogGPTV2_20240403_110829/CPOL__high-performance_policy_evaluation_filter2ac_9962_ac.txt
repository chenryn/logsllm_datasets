The 
last 
•  G – Group IDs uniquely identify groups of entities. Groups 
in  CPOL  are  equivalent  to  roles  in  traditional  role-based 
access control [5]. 
•  M – Membership Pairs associate groups with entities. Each 
pair contains one group ID g and one entity ID e and can be 
represented as . A mapping G → E or E → G can be 
derived from the set of membership pairs. 
•  A – Access Tokens represent privileges that may be assigned 
in the system and can be any arbitrary set of values. In the 
simplest  case  A  could  be  {true,  false}.  For  a  file  access 
control system, A could be something more complex like the 
power  set  of  {Read,  Write,  Execute}.  The  next  section 
discusses access token definition in greater detail. 
•  R – Rules consist of four fields as seen in Figure 1. These 
fields have the following properties: 
o  e – Owner must be a member of E, e ∈ E.  
o 
l – Licensees(s) must be a subset of E  ∪  G. This licensee 
set  almost  always  contains  one  element,  unless  a  rule 
requires multiple requesters for additional security.  
o  a – Access Token must be a member of A, a ∈ A. 
o  c – Condition is an expression that must evaluate to true 
or  false  given a set of inputs. Other than this restriction, 
information stored in the condition, the set of inputs, and 
the function used to evaluate conditions can be anything. 
Section  3.4  provides  an  in-depth  discussion  of  access 
conditions. 
3.3  Access Tokens 
Access  tokens  represent  rights  that  are  given  to  an  entity  in  the 
system. When a request is made by the database back-end for an 
entity’s  resources,  CPOL  returns  an  access  token  indicating  the 
resulting set of privileges. This token is defined by a C++ class, 
which  can  contain  arbitrary  values.  These  values  describe  the 
extent to which access is granted. The application developer can 
define  the  AccessToken  and  is  also  responsible  for  making  sure 
the  data  management  process  can  understand  its  contents.  The 
access token also has four member functions that must be defined. 
These  functions  can  be  seen  in  Figure  4.  They  are  used  to 
combine, compare, add, and remove access tokens. Other than the 
parameters  and  the  return  type,  the  functions  can  be  defined  in 
any  way.  How  they  are  defined  affects  the  delegation  of  rights 
and what it means for an entity to hold multiple access tokens in 
the 
system.
AccessToken Member Functions 
 Boolean 
 AccessToken 
 Boolean  
 Boolean  
Figure 4. The AccessToken object’s four member functions. 
Operator≥  determines if  one token contains another, Add 
Operator≥(AccessToken 
Add(AccessToken OtherToken) 
AddAccess(AccessToken 
  RequesterToken) 
RemoveAccess(AccessToken  
             RequesterToken) 
combines two access tokens, AddAccess checks if a 
requester can add a new rule, and RemoveAccess see if a 
requester can remove a rule. 
To better illustrate the specification of access token values and 
member functions, we will examine how they are defined in the 
location-aware  privacy  enforcement  implementation  of  CPOL. 
The  access  tokens  have  varying  permission  levels  along  three 
dimensions:  location  resolution  (L),  identity  resolution  (I),  and 
delegation (D). The resulting set of access tokens A is L × I × D. 
The  location  resolution  element  restricts  the  level  of  detail  that 
can be seen with respect to an entity’s position. The five members 
of L are {LocNone, LocBuilding, LocFloor, LocRoom, LocExact}, 
which allow the licensee to see the following information about 
the  authorizer:  nothing,  current  building,  floor,  room,  or  exact 
location.  The  identity  resolution  element  I  has  five  members: 
{IdentNone, IdentPerson, IdentJob, IdentAffiliation, IdentName}, 
which respectively disclose: nothing, type (person or object), job 
(student,  professor,  etc.  in  a  university),  affiliation  (computer 
science dept., etc.), or the authorizer’s exact name. 
3.3.1   Delegation 
Delegation is used in CPOL to allow the holder of an access token 
to create and delete access rules on behalf of an authorizer. The 
delegation  access  token  element,  D  has  three  possible  values 
{Normal,  Admin,  Delegate}.  Normal  indicates  that  the  grantee 
cannot  create  access  rules  for  the  authorizer.    Admin  allows  the 
grantee to add and remove rules with access tokens that have up 
to the same location and identity resolution as the current token, 
but  only  have  Normal  delegate  access.  Delegate  allows  the 
grantee to create and delete rules with access tokens that have up 
to the same location and identity resolution as the current token, 
but may have Admin access as well. (A possible modification here 
would be to allow Delegate holders to create Delegate tokens as 
well, instead of only Admin tokens. This could lead to arbitrarily 
long delegation chains, but may be desirable in some situations.) 
Access tokens for the privacy enforcement system also keep 
track  of  the  delegation  chain  used  during  their  creation.  The 
delegation chain field, DChain, does not affect the level of access 
granted  by  the  token,  and  is  treated  as  a  comment  by  the  data 
management  system.  DChain  can  be  used  by  the  management 
interface  to  organize  access  rules.  They  can  be  arranged  into  a 
tree structure in order to make it easier for the original authorizer 
to  revoke  entire  branches.  The  contents  of  the  delegation  chain 
also persist through user updates. So, if Alice grants rights on the 
behalf of Bob and is later removed from the system, then Bob can 
still  see  which  rights  she  added.  This  feature  is  useful  in  the 
situation where someone with Delegate privileges is later found to 
be  malicious  and  the  authorizer  wants  to  delete  all  the  rules 
created  by  that  person.  Also,  DChain  can  be  used  to  prevent 
people from deleting rules that they did not create. For example, 
assume  both  Alice  and  Bob  have  delegate  privileges.  If  Alice 
grants access to a third user, Charlie, she may not want Bob to be 
able  to  remove  Charlie’s  privileges.  This  can  be  enforced  by 
requiring  a  user  to  be  in  a  token’s  delegation  chain  in  order  to 
remove it. 
3.3.2  Access Token Functions 
The first function in Figure 4, Operator ≥, is used to determine if 
one token contains all the rights granted by another token. CPOL 
uses this function to cut down on evaluation time. Once an entity 
has obtained a token, CPOL does not need to continue evaluating 
rules  that  are  contained  by  that  token.  For  example,  in  the 
simplest case where possible access tokens are {yes, no}, yes ≥ no 
would  be  true,  and  no  ≥  yes  would  be  false.  In  the  privacy 
implementation of CPOL, Operator ≥ compares elements for each 
of  the three access dimensions one by one, and is only true if all 
of the elements in one token are greater than or equal to all of the 
elements in another token. Here are a few examples: 
•  T ≥ {LocNone, IdentNone, Normal} will always be True. 
•  {LocFloor, IdentJob, Normal} ≥ {LocBuilding, IdentJob, 
Normal} is True. 
•  {LocExact, IdentName, Normal} ≥ {LocBuilding, 
IdentPerson, Admin} is False. 
The  next  access  token  function,  Add,  combines  two  tokens 
into one. Add defines what it means to simultaneously hold two 
access tokens. Before Add is called on two tokens a and b, CPOL 
checks that a ≥ b and b ≥ a are both false. If one token contains 
the  other,  then  CPOL  just  discards  the  lesser  token.  If  the  two 
tokens a and b do not contain each other, there are a number of 
ways to combine them. First, Add could simply throw away one 
of  the  two  tokens  using  a  heuristic  to  determine  which  is  more 
preferable.  This  method  does  not  work  very  well  in  situations 
where  access  tokens  grant  independent  privileges,  such  as  for 
{read} and {execute} file access tokens. Instead of selecting one 
of the two access tokens, Add could combine them by taking the 
union of their access rights. This would be a good solution for file 
access privileges, but it does not work well for location privacy. 
Ignoring  delegation,  an  entity  could  possess  two  access  tokens: 
{LocBuilding, IdentName} and {LocExact, IdentPerson}. Having 
both of these tokens at the same time means that someone should 
be able to access the authorizer’s name and building, or see the 
authorizer’s  precise  location,  but  know  nothing  about  the 
authorizer’s  identity.  Combining  these  tokens  into  {LocExact, 
IdentName} would give the authorizer’s exact location and name, 
which  could  be  a  severe  violation  of  privacy.  To  avoid  this 
problem, the location-aware privacy enforcement implementation 
of  CPOL  combines  two  access  tokens  in  Add  by  linking  them 
together to form a list. This way, when an entity holds two access 
tokens, it can choose which one to use depending to the needs of 
the application. 
The 
last 
is  passed 
two  access 
token  functions,  AddAccess  and 
RemoveAccess,  allow  for  the  delegation  of  rights.  When  the 
owner of a policy list makes a request to add or remove a rule, 
that  request  is  automatically  granted.  When  someone  else 
attempts to create or delete a rule, however, CPOL must check if 
that person has been given permission to do so by owner. In this 
case,  GetAccess  is  called  to  obtain  the  requester’s  access  token, 
to  AddAccess  or  RemoveAccess.  After 
which 
determining  whether  the  requester  has  sufficient  privileges  to 
create or delete the rule, AddAccess and RemoveAccess return true 
to  allow  the  operation,  or  false  to  prevent  it.  Furthermore, 
AddAccess  has  a  chance  to  update  the  new  token’s  delegation 
chain. 
In 
the  privacy  enforcement  example,  AddAccess  and 
RemoveAccess  first  check  that  the  requester’s  access  token  is 
greater than or equal to the target rule’s access token. Then, the 
function will verify that the delegation level of the rule’s access 
token is less than the delegation level of the requester. If it is not, 
then AddAccess and RemoveAccess return false. If the delegation 
level  is  higher,  then  AddAccess  will  copy  the  delegation  chain 
from  the  requester’s  access  token  to  the  new  access  token, 
appending the requester’s identity to the end. RemoveAccess will 
just delete the rule. As an example of how this works, when a user 
with {LocBuilding, IdentName, Admin} access tries to add a rule 
with  token  {LocBuilding,  IdentJob,  Normal},  the  operation  is 
allowed.    If  that  same  user  tried  to  add  a  rule  with  {LocFloor, 
IdentJob, Normal} or {LocBuilding, IdentJob, Admin}, however, 
then the request would be denied. 
3.4  Access Conditions 
In  CPOL,  access  conditions  give  users  more  control  over  when 
others  can  access  their  resources.  An  access  condition  is  a 
Boolean  expression  that  can  take  inputs  from  the  surrounding 
environment. These inputs are encapsulated in a State object and 
can  include  things  such  as  the  current  time  or  the  authorizer’s 
Condition Member Functions 
 Boolean 
 Condition 
 Condition 
Figure 5. The Condition object’s three member functions. 
Test  evaluates the condition, Add combines two conditions, 
Test(State Inputs) 
Add(Condition OtherCondition) 
Subtract(Condition  
  OtherCondition) 
and Subtract combines a condition that is currently true 
 with one that is false. 
location. Each rule in CPOL can have a condition associated with 
it that must evaluate to true in order for the rule to apply. 
The  capability  to  specify  conditional  access  is  especially 
important  when  enforcing  privacy  for  location-aware  services. 
Without conditions, anyone who had access to a person’s location 
would be able to see where that person is 24 hours a day 7 days a 
week.  This  could  cause  a  variety  of  problems.  As  an  example, 
supervisors may want high-resolution access to their employees’ 
location during work hours, while employees may not want their 
bosses  to  know  where  they  are  on  weekends.  Location  privacy 
enforcement  needs  access  conditions  to  be  able  to  handle  these 
types of situations. 
To define the range of possible conditions and their meaning 
within CPOL, the application developer must specify three things: 
1.  Condition Inputs. These inputs are specified within a State 
object.  The  State  object  is  implemented  as  a  C++  class, 
which  can  have  arbitrary  data  members.  A  State  object  is 
passed into CPOL on every call to GetAccess. 
2.  Condition  Content.  Conditions,  much  like  access  tokens, 
are  implemented  as  a  C++  condition  class.  This  class  can 
have any arbitrary data members, which are used to store the 
contents of the condition. 
3.  Condition  Functions.  The  object  has 
three  member 
functions, which can be seen in Figure 5. The Test function 
evaluates a condition. Add and Subtract are used to combine 
two conditions into one for cache invalidation. 
The manner in which the State and Condition objects are defined 
has a major effect on performance and expressiveness. Conditions 
are evaluated for every single access rule and have the potential to 
become  a  bottleneck  if  the  Test  function  is  slow.  On  the  other 
hand,  if  the  Test  function  is  too  simple,  then  it  can  be  hard  to 
express useful conditions. To give a better understanding of how 
the State and Condition objects should be defined, the remainder 
of  the  section  describes  how  they  are  specified  in  the  location 
privacy enforcement system. 
For  the  privacy  implementation,  we  decided  to  use  two 
condition inputs to make up the State object: the current time and 
the  authorizer’s  location.  When  combined,  these  two  variables 
can  be  used  determine  the  authorizer’s  current  situation,  the 
content  of  the  information  being  disclosed,  and  that  content’s 
sensitivity. According to a study by Lederer et al. [8], these are 
three of the five most important factors when determining privacy 
preferences.  Two  other  important  factors  are  the  recipient’s 