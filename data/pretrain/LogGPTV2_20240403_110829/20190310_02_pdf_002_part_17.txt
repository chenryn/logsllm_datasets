### 3.2.5.1 Procedure Example

The following PL/SQL procedure demonstrates how to output the department number, employee number, and employee name using `DBMS_OUTPUT.PUT_LINE`:

```sql
BEGIN
    DBMS_OUTPUT.PUT_LINE('Department Number = ' || p_deptno);
    DBMS_OUTPUT.PUT_LINE('Employee Number = ' || p_empno);
    DBMS_OUTPUT.PUT_LINE('Employee Name = ' || p_ename);
END;
```

You can call this procedure using mixed notation:

```sql
emp_info(30, p_ename => 'Clark', p_empno => 7455);
```

If you use mixed notation, remember that named arguments cannot precede positional arguments.

### 3.2.5.2 Parameter Modes

As previously discussed, a parameter can have one of three possible modes: IN, OUT, or IN OUT. The characteristics of a formal parameter are dependent on its mode:

- **Initial Value**: When the procedure or function is called.
- **Modifiability**: Whether the called procedure or function can modify the formal parameter.
- **Passing Mechanism**: How the actual parameter value is passed from the calling program to the called program.
- **Exception Handling**: What happens to the formal parameter value when an unhandled exception occurs in the called program.

The following table summarizes the behavior of parameters according to their mode:

| Mode | Formal Parameter Initialized To | Modifiable by Called Program? | Actual Parameter Contains (Normal Termination) | Actual Parameter Contains (Handled Exception) | Actual Parameter Contains (Unhandled Exception) |
|------|--------------------------------|-------------------------------|------------------------------------------------|-----------------------------------------------|-------------------------------------------------|
| IN   | Actual parameter value          | No                            | Original actual parameter value                | Original actual parameter value               | Original actual parameter value                 |
| IN OUT | Actual parameter value          | Yes                           | Last value of the formal parameter             | Last value assigned to the formal parameter   | Original actual parameter value                 |
| OUT  | Actual parameter value          | Yes                           | Last value of the formal parameter             | Last value assigned to the formal parameter   | Original actual parameter value                 |

- **IN Parameters**: An IN formal parameter is initialized to the actual parameter with which it is called unless it was explicitly initialized with a default value. The IN parameter may be referenced within the called program, but the called program cannot assign a new value to the IN parameter. After control returns to the calling program, the actual parameter always contains the same value as it was set to prior to the call.
- **OUT Parameters**: The OUT formal parameter is initialized to the actual parameter with which it is called. The called program may reference and assign new values to the formal parameter. If the called program terminates without an exception, the actual parameter takes on the value last set in the formal parameter. If a handled exception occurs, the value of the actual parameter takes on the last value assigned to the formal parameter. If an unhandled exception occurs, the value of the actual parameter remains as it was prior to the call.
- **IN OUT Parameters**: Like an IN parameter, an IN OUT formal parameter is initialized to the actual parameter with which it is called. Like an OUT parameter, an IN OUT formal parameter is modifiable by the called program, and the last value in the formal parameter is passed to the calling program’s actual parameter if the called program terminates without an exception. If a handled exception occurs, the value of the actual parameter takes on the last value assigned to the formal parameter. If an unhandled exception occurs, the value of the actual parameter remains as it was prior to the call.

### 3.2.5.3 Using Default Values in Parameters

You can set a default value for a formal parameter by including the `DEFAULT` clause or using the assignment operator (`:=`) in the `CREATE PROCEDURE` or `CREATE FUNCTION` statement.

The general form of a formal parameter declaration is:

```sql
(name [ IN | OUT | IN OUT ] data_type [{ DEFAULT | := } expr ])
```

- **name**: An identifier assigned to the parameter.
- **IN | OUT | IN OUT**: Specifies the parameter mode.
- **data_type**: The data type assigned to the variable.
- **expr**: The default value assigned to the parameter. If you do not include a `DEFAULT` clause, the caller must provide a value for the parameter.

The default value is evaluated every time the function or procedure is invoked. For example, assigning `SYSDATE` to a parameter of type `DATE` causes the parameter to have the time of the current invocation, not the time when the procedure or function was created.

The following simple procedure demonstrates using the assignment operator to set a default value of `SYSDATE` into the parameter `p_hiredate`:

```sql
CREATE OR REPLACE PROCEDURE hire_emp (
    p_empno NUMBER,
    p_ename VARCHAR2,
    p_hiredate DATE := SYSDATE
)
IS
BEGIN
    INSERT INTO emp (empno, ename, hiredate)
    VALUES (p_empno, p_ename, p_hiredate);
    DBMS_OUTPUT.PUT_LINE('Hired!');
END hire_emp;
```

If the parameter declaration includes a default value, you can omit the parameter from the actual parameter list when you call the procedure. Calls to the sample procedure `hire_emp` must include two arguments: the employee number (`p_empno`) and employee name (`p_ename`). The third parameter (`p_hiredate`) defaults to the value of `SYSDATE`:

```sql
hire_emp(7575, 'Clark');
```

If you do include a value for the actual parameter when you call the procedure, that value takes precedence over the default value:

```sql
hire_emp(7575, 'Clark', TO_DATE('15-FEB-2010', 'DD-MON-YYYY'));
```

This adds a new employee with a hire date of February 15, 2010, regardless of the current value of `SYSDATE`.

You can write the same procedure by substituting the `DEFAULT` keyword for the assignment operator:

```sql
CREATE OR REPLACE PROCEDURE hire_emp (
    p_empno NUMBER,
    p_ename VARCHAR2,
    p_hiredate DATE DEFAULT SYSDATE
)
IS
BEGIN
    INSERT INTO emp (empno, ename, hiredate)
    VALUES (p_empno, p_ename, p_hiredate);
    DBMS_OUTPUT.PUT_LINE('Hired!');
END hire_emp;
```

### 3.2.6 Subprograms – Subprocedures and Subfunctions

The capability and functionality of SPL procedures and functions can be used to build well-structured and maintainable programs by organizing the SPL code into subprocedures and subfunctions.

#### 3.2.6.1 Creating a Subprocedure

A subprocedure is defined and named in the declaration section of a block using the `PROCEDURE` clause. A block consists of an optional declaration section, a mandatory executable section, and an optional exception section. Blocks are the structures for standalone procedures and functions, anonymous blocks, subprograms, triggers, packages, and object type methods.

The phrase "the identifier is local to the block" means that the identifier (a variable, cursor, type, or subprogram) is declared within the declaration section of that block and is therefore accessible by the SPL code within the executable section and optional exception section of that block.

Subprocedures can only be declared after all other variable, cursor, and type declarations included in the declaration section. (That is, subprograms must be the last set of declarations.)

**Syntax:**

```sql
PROCEDURE name [ (parameters) ]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
    statements
END [ name ];
```

- **name**: The identifier of the subprocedure.
- **parameters**: A list of formal parameters.
- **PRAGMA AUTONOMOUS_TRANSACTION**: The directive that sets the subprocedure as an autonomous transaction.
- **declarations**: Variable, cursor, type, or subprogram declarations. If subprogram declarations are included, they must be declared after all other variable, cursor, and type declarations.
- **statements**: SPL program statements (the `BEGIN - END` block may contain an `EXCEPTION` section).

**Example:**

The following example is a subprocedure within an anonymous block:

```sql
DECLARE
    PROCEDURE list_emp
    IS
        v_empno NUMBER(4);
        v_ename VARCHAR2(10);
        CURSOR emp_cur IS
            SELECT empno, ename FROM emp ORDER BY empno;
    BEGIN
        OPEN emp_cur;
        DBMS_OUTPUT.PUT_LINE('Subprocedure list_emp:');
        DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
        DBMS_OUTPUT.PUT_LINE('----- -------');
        LOOP
            FETCH emp_cur INTO v_empno, v_ename;
            EXIT WHEN emp_cur%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
        END LOOP;
        CLOSE emp_cur;
    END;
BEGIN
    list_emp;
END;
```

Invoking this anonymous block produces the following output:

```
Subprocedure list_emp:
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
```

The following example is a subprocedure within a trigger:

```sql
CREATE OR REPLACE TRIGGER dept_audit_trig
AFTER INSERT OR UPDATE OR DELETE ON dept
DECLARE
    v_action VARCHAR2(24);
    PROCEDURE display_action (
        p_action IN VARCHAR2
    )
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('User ' || USER || ' ' || p_action ||
                             ' dept on ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD'));
    END display_action;
BEGIN
    IF INSERTING THEN
        v_action := 'added';
    ELSIF UPDATING THEN
        v_action := 'updated';
    ELSIF DELETING THEN
        v_action := 'deleted';
    END IF;
    display_action(v_action);
END;
```

Invoking this trigger produces the following output:

```
INSERT INTO dept VALUES (50, 'HR', 'DENVER');
User enterprisedb added dept on 2016-07-26
```

#### 3.2.6.2 Creating a Subfunction

A subfunction is defined and named in the declaration section of a block using the `FUNCTION` clause. A block consists of an optional declaration section, a mandatory executable section, and an optional exception section. Blocks are the structures for standalone procedures and functions, anonymous blocks, subprograms, triggers, packages, and object type methods.

The phrase "the identifier is local to the block" means that the identifier (a variable, cursor, type, or subprogram) is declared within the declaration section of that block and is therefore accessible by the SPL code within the executable section and optional exception section of that block.

**Syntax:**

```sql
FUNCTION name [ (parameters) ]
RETURN data_type
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
    statements
END [ name ];
```

- **name**: The identifier of the subfunction.
- **parameters**: A list of formal parameters.
- **data_type**: The data type of the value returned by the function’s `RETURN` statement.
- **PRAGMA AUTONOMOUS_TRANSACTION**: The directive that sets the subfunction as an autonomous transaction.
- **declarations**: Variable, cursor, type, or subprogram declarations. If subprogram declarations are included, they must be declared after all other variable, cursor, and type declarations.
- **statements**: SPL program statements (the `BEGIN - END` block may contain an `EXCEPTION` section).

**Example:**

The following example shows the use of a recursive subfunction:

```sql
DECLARE
    FUNCTION factorial (
        n BINARY_INTEGER
    ) RETURN BINARY_INTEGER
    IS
    BEGIN
        IF n = 1 THEN
            RETURN n;
        ELSE
            RETURN n * factorial(n-1);
        END IF;
    END factorial;
BEGIN
    FOR i IN 1..5 LOOP
        DBMS_OUTPUT.PUT_LINE(i || '! = ' || factorial(i));
    END LOOP;
END;
```

The output from the example is the following:

```
1! = 1
2! = 2
3! = 6
4! = 24
5! = 120
```

#### 3.2.6.3 Block Relationships

This section describes the terminology of the relationship between blocks that can be declared in an SPL program. The ability to invoke subprograms and access identifiers declared within a block depends upon this relationship.

- **Block**: The basic SPL structure consisting of an optional declaration section, a mandatory executable section, and an optional exception section. Blocks implement standalone procedure and function programs, anonymous blocks, triggers, packages, and subprocedures and subfunctions.
- **Local Identifier**: An identifier (variable, cursor, type, or subprogram) local to a block means that it is declared within the declaration section of the given block. Such local identifiers are accessible from the executable section and optional exception section of the block.
- **Parent Block**: A block that contains the declaration of another block (the child block).
- **Descendent Blocks**: The set of blocks forming the child relationship starting from a given parent block.
- **Ancestor Blocks**: The set of blocks forming the parental relationship starting from a given child block.
- **Hierarchy**: The set of descendent (or ancestor) blocks form a hierarchy.
- **Level**: An ordinal number of a given block from the highest, ancestor block.