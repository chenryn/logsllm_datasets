IS
BEGIN
dbms_output.put_line('Department Number =' || p_deptno);
dbms_output.put_line('Employee Number =' || p_empno);
dbms_output.put_line('Employee Name =' || p_ename;
END;
You can call the procedure using mixed notation:
emp_info(30, p_ename =>'Clark', p_empno=>7455);
If you do use mixed notation, remember that named arguments cannot precede positional
arguments.
3.2.5.2 Parameter Modes
As previously discussed, a parameter has one of three possible modes - IN, OUT, or IN
OUT. The following characteristics of a formal parameter are dependent upon its mode:
 Its initial value when the procedure or function is called.
 Whether or not the called procedure or function can modify the formal parameter.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 149
Database Compatibility for Oracle® Developers Guide
 How the actual parameter value is passed from the calling program to the called
program.
 What happens to the formal parameter value when an unhandled exception occurs
in the called program.
The following table summarizes the behavior of parameters according to their mode.
Table 3-1 Parameter Modes
Mode Property IN IN OUT OUT
Formal parameter initialized to: Actual parameter value Actual parameter value Actual parameter value
Formal parameter modifiable by the
No Yes Yes
called program?
Original actual
Actual parameter contains: (after Last value of the Last value of the
parameter value prior
normal called program termination) formal parameter formal parameter
to the call
Actual parameter contains: (after a Original actual
Last value of the Last value of the
handled exception in the called parameter value prior
formal parameter formal parameter
program) to the call
Actual parameter contains: (after an Original actual Original actual Original actual
unhandled exception in the called parameter value prior parameter value prior parameter value prior
program) to the call to the call to the call
As shown by the table, an IN formal parameter is initialized to the actual parameter with
which it is called unless it was explicitly initialized with a default value. The IN
parameter may be referenced within the called program, however, the called program
may not assign a new value to the IN parameter. After control returns to the calling
program, the actual parameter always contains the same value as it was set to prior to the
call.
The OUT formal parameter is initialized to the actual parameter with which it is called.
The called program may reference and assign new values to the formal parameter. If the
called program terminates without an exception, the actual parameter takes on the value
last set in the formal parameter. If a handled exception occurs, the value of the actual
parameter takes on the last value assigned to the formal parameter. If an unhandled
exception occurs, the value of the actual parameter remains as it was prior to the call.
Like an IN parameter, an IN OUT formal parameter is initialized to the actual parameter
with which it is called. Like an OUT parameter, an IN OUT formal parameter is
modifiable by the called program and the last value in the formal parameter is passed to
the calling program’s actual parameter if the called program terminates without an
exception. If a handled exception occurs, the value of the actual parameter takes on the
last value assigned to the formal parameter. If an unhandled exception occurs, the value
of the actual parameter remains as it was prior to the call.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 150
Database Compatibility for Oracle® Developers Guide
3.2.5.3 Using Default Values in Parameters
You can set a default value of a formal parameter by including the DEFAULT clause or
using the assignment operator (:=) in the CREATE PROCEDURE or CREATE FUNCTION
statement.
The general form of a formal parameter declaration is:
(name [ IN|OUT|IN OUT ] data_type [{DEFAULT | := } expr ])
name is an identifier assigned to the parameter.
IN|OUT|IN OUT specifies the parameter mode.
data_type is the data type assigned to the variable.
expr is the default value assigned to the parameter. If you do not include a DEFAULT
clause, the caller must provide a value for the parameter.
The default value is evaluated every time the function or procedure is invoked. For
example, assigning SYSDATE to a parameter of type DATE causes the parameter to have
the time of the current invocation, not the time when the procedure or function was
created.
The following simple procedure demonstrates using the assignment operator to set a
default value of SYSDATE into the parameter, hiredate:
CREATE OR REPLACE PROCEDURE hire_emp (
p_empno NUMBER,
p_ename VARCHAR2,
p_hiredate DATE := SYSDATE
)
IS
BEGIN
INSERT INTO emp(empno, ename, hiredate)
VALUES(p_empno, p_ename, p_hiredate);
DBMS_OUTPUT.PUT_LINE('Hired!');
END hire_emp;
If the parameter declaration includes a default value, you can omit the parameter from the
actual parameter list when you call the procedure. Calls to the sample procedure
(hire_emp) must include two arguments: the employee number (p_empno) and
employee name (p_empno). The third parameter (p_hiredate) defaults to the value of
SYSDATE:
hire_emp (7575, Clark)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 151
Database Compatibility for Oracle® Developers Guide
If you do include a value for the actual parameter when you call the procedure, that value
takes precedence over the default value:
hire_emp (7575, Clark, 15-FEB-2010)
Adds a new employee with a hiredate of February 15, 2010, regardless of the current
value of SYSDATE.
You can write the same procedure by substituting the DEFAULT keyword for the
assignment operator:
CREATE OR REPLACE PROCEDURE hire_emp (
p_empno NUMBER,
p_ename VARCHAR2,
p_hiredate DATE DEFAULT SYSDATE
)
IS
BEGIN
INSERT INTO emp(empno, ename, hiredate)
VALUES(p_empno, p_ename, p_hiredate);
DBMS_OUTPUT.PUT_LINE('Hired!');
END hire_emp;
3.2.6 Subprograms – Subprocedures and Subfunctions
The capability and functionality of SPL procedure and function programs can be used in
an advantageous manner to build well-structured and maintainable programs by
organizing the SPL code into subprocedures and subfunctions.
The same SPL code can be invoked multiple times from different locations within a
relatively large SPL program by declaring subprocedures and subfunctions within the
SPL program.
Subprocedures and subfunctions have the following characteristics:
 The syntax, structure, and functionality of subprocedures and subfunctions are
practically identical to standalone procedures and functions. The major difference
is the use of the keyword PROCEDURE or FUNCTION instead of CREATE
PROCEDURE or CREATE FUNCTION to declare the subprogram.
 Subprocedures and subfunctions provide isolation for the identifiers (that is,
variables, cursors, types, and other subprograms) declared within itself. That is,
these identifiers cannot be accessed nor altered from the upper, parent level SPL
programs or subprograms outside of the subprocedure or subfunction. This
ensures that the subprocedure and subfunction results are reliable and predictable.
 The declaration section of subprocedures and subfunctions can include its own
subprocedures and subfunctions. Thus, a multi-level hierarchy of subprograms
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 152
Database Compatibility for Oracle® Developers Guide
can exist in the standalone program. Within the hierarchy, a subprogram can
access the identifiers of upper level parent subprograms and also invoke upper
level parent subprograms. However, the same access to identifiers and invocation
cannot be done for lower level child subprograms in the hierarchy.
Subprocedures and subfunctions can be declared and invoked from within any of the
following types of SPL programs:
 Standalone procedures and functions
 Anonymous blocks
 Triggers
 Packages
 Procedure and function methods of an object type body
 Subprocedures and subfunctions declared within any of the preceding programs
The rules regarding subprocedure and subfunction structure and access are discussed in
more detail in the next sections.
3.2.6.1 Creating a Subprocedure
The PROCEDURE clause specified in the declaration section defines and names a
subprocedure local to that block.
The term block refers to the SPL block structure consisting of an optional declaration
section, a mandatory executable section, and an optional exception section. Blocks are
the structures for standalone procedures and functions, anonymous blocks, subprograms,
triggers, packages, and object type methods.
The phrase the identifier is local to the block means that the identifier (that is, a variable,
cursor, type, or subprogram) is declared within the declaration section of that block and is
therefore accessible by the SPL code within the executable section and optional exception
section of that block.
Subprocedures can only be declared after all other variable, cursor, and type declarations
included in the declaration section. (That is, subprograms must be the last set of
declarations.)
PROCEDURE name [ (parameters) ]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statements
END [ name ];
Where:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 153
Database Compatibility for Oracle® Developers Guide
name
name is the identifier of the subprocedure.
parameters
parameters is a list of formal parameters.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the subprocedure
as an autonomous transaction.
declarations
declarations are variable, cursor, type, or subprogram declarations. If
subprogram declarations are included, they must be declared after all other
variable, cursor, and type declarations.
statements
statements are SPL program statements (the BEGIN - END block may contain
an EXCEPTION section).
Examples
The following example is a subprocedure within an anonymous block.
DECLARE
PROCEDURE list_emp
IS
v_empno NUMBER(4);
v_ename VARCHAR2(10);
CURSOR emp_cur IS
SELECT empno, ename FROM emp ORDER BY empno;
BEGIN
OPEN emp_cur;
DBMS_OUTPUT.PUT_LINE('Subprocedure list_emp:');
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
DBMS_OUTPUT.PUT_LINE('----- -------');
LOOP
FETCH emp_cur INTO v_empno, v_ename;
EXIT WHEN emp_cur%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
END LOOP;
CLOSE emp_cur;
END;
BEGIN
list_emp;
END;
Invoking this anonymous block produces the following output:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 154
Database Compatibility for Oracle® Developers Guide
Subprocedure list_emp:
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
The following example is a subprocedure within a trigger.
CREATE OR REPLACE TRIGGER dept_audit_trig
AFTER INSERT OR UPDATE OR DELETE ON dept
DECLARE
v_action VARCHAR2(24);
PROCEDURE display_action (
p_action IN VARCHAR2
)
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('User ' || USER || ' ' || p_action ||
' dept on ' || TO_CHAR(SYSDATE,'YYYY-MM-DD'));
END display_action;
BEGIN
IF INSERTING THEN
v_action := 'added';
ELSIF UPDATING THEN
v_action := 'updated';
ELSIF DELETING THEN
v_action := 'deleted';
END IF;
display_action(v_action);
END;
Invoking this trigger produces the following output:
INSERT INTO dept VALUES (50,'HR','DENVER');
User enterprisedb added dept on 2016-07-26
3.2.6.2 Creating a Subfunction
The FUNCTION clause specified in the declaration section defines and names a
subfunction local to that block.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 155
Database Compatibility for Oracle® Developers Guide
The term block refers to the SPL block structure consisting of an optional declaration
section, a mandatory executable section, and an optional exception section. Blocks are
the structures for standalone procedures and functions, anonymous blocks, subprograms,
triggers, packages, and object type methods.
The phrase the identifier is local to the block means that the identifier (that is, a variable,
cursor, type, or subprogram) is declared within the declaration section of that block and is
therefore accessible by the SPL code within the executable section and optional exception
section of that block.
FUNCTION name [ (parameters) ]
RETURN data_type
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statements
END [ name ];
Where:
name
name is the identifier of the subfunction.
parameters
parameters is a list of formal parameters.
data_type
data_type is the data type of the value returned by the function’s RETURN
statement.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the subfunction
as an autonomous transaction.
declarations
declarations are variable, cursor, type, or subprogram declarations. If
subprogram declarations are included, they must be declared after all other
variable, cursor, and type declarations.
statements
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 156
Database Compatibility for Oracle® Developers Guide
statements are SPL program statements (the BEGIN - END block may contain
an EXCEPTION section).
Examples
The following example shows the use of a recursive subfunction:
DECLARE
FUNCTION factorial (
n BINARY_INTEGER
) RETURN BINARY_INTEGER
IS
BEGIN
IF n = 1 THEN
RETURN n;
ELSE
RETURN n * factorial(n-1);
END IF;
END factorial;
BEGIN
FOR i IN 1..5 LOOP
DBMS_OUTPUT.PUT_LINE(i || '! = ' || factorial(i));
END LOOP;
END;
The output from the example is the following:
1! = 1
2! = 2
3! = 6
4! = 24
5! = 120
3.2.6.3 Block Relationships
This section describes the terminology of the relationship between blocks that can be
declared in an SPL program. The ability to invoke subprograms and access identifiers
declared within a block depends upon this relationship.
The following are the basic terms:
 A block is the basic SPL structure consisting of an optional declaration section, a
mandatory executable section, and an optional exception section. Blocks
implement standalone procedure and function programs, anonymous blocks,
triggers, packages, and subprocedures and subfunctions.
 An identifier (variable, cursor, type, or subprogram) local to a block means that it
is declared within the declaration section of the given block. Such local identifiers
are accessible from the executable section and optional exception section of the
block.
 The parent block contains the declaration of another block (the child block).
 Descendent blocks are the set of blocks forming the child relationship starting
from a given parent block.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 157
Database Compatibility for Oracle® Developers Guide
 Ancestor blocks are the set of blocks forming the parental relationship starting
from a given child block.
 The set of descendent (or ancestor) blocks form a hierarchy.
 The level is an ordinal number of a given block from the highest, ancestor block.