## 0x00 前言
在最近的一次漏洞赏金计划中，我发现了另一个跨站脚本（XSS）漏洞。该网站【redacted.com】受到Cloudflare Web应用防火墙（WAF）的保护，因此许多攻击载荷（payloads）被过滤掉了。然而，由于该网站实现方式存在严重缺陷，即使有Cloudflare WAF也无法完全保护它。

就在发现这个漏洞几天前的一次内部会议上，我还对我的同事们说：“不要过度依赖防火墙和安全产品。”现在，我有了一个真实的案例可以分享了，真是讽刺啊。

## 0x01 概述
当我在登录界面触发了一个错误时，发现一个名为`Message`的参数会直接反映在HTML主体和一个弹出框中，而没有经过任何过滤。具体来说，`Message`的值被插入到了JavaScript代码中，正好位于`alert("[value_here]")`旁边。

**Payload:**
```javascript
This is an outdated page. You will now be redirected to our new page"); window.location="https://google.com"//
```

通过这种方式，我们可以欺骗用户，让他们认为自己将被重定向到一个更新的网页，并需要重新登录（这里重定向到Google作为演示）。

## 0x02 漏洞发现过程
当时我正在检查该网站的注册和登录功能，试图找到一些应用层面的缺陷。我使用邮箱`PI:EMAIL`注册了一个账户，但没有进行邮箱验证，然后尝试用这个邮箱账号登录。结果弹出了一个错误信息：

```
https://redacted.com/Secure/Login.aspx?UserID=PI:EMAIL&ReturnUrl=&Message=The E-Mail Address entered (PI:EMAIL) is already on file. If this is your correct e-mail address, you may sign in as an existing customer.
```

我发现URL中的`Message`参数内容与之前的弹窗内容一致，如图所示：

![Error Message](error_message.png)

这表明`Message`的内容可能直接反映在HTML中。我尝试使用以下payload进行测试：

```javascript
alert("something_here");evil_script_here// ")
```

不出所料，Cloudflare WAF拦截了这个payload。这是因为使用的用户账号是假的。

进一步分析后，我发现`Message`内容直接插入到了JavaScript代码中。因此，我们可以通过闭合双引号和括号等符号来注入恶意脚本，例如：

```javascript
alert("something_here"); evil_script_here// ")
```

这样，我们就可以执行任意的JavaScript代码了。

## 总结
再强大的防火墙也无法弥补糟糕的代码实现。感谢您的阅读。