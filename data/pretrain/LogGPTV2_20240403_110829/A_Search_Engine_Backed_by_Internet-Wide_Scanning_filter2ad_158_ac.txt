### 数据概览与协议扫描

#### 协议扫描结果
下表展示了我们在初始实现中扫描的16种协议及其子协议。对于每种协议，我们列出了原始记录和转换后记录的平均大小及标准差，以及连续两天扫描之间的记录变化百分比。大多数协议在连续两天之间的更新率低于15%。

| 原始大小 (KB) | 标准差 (KB) | 变化百分比 (%) |
|--------------|------------|----------------|
| 0.3 (0.3)    | 0.19 (0.20)| 0.08 (0.09)     |
| 2.8 (4.1)    | 6.6 (4.2)  | 2.5 (3.9)       |
| 6.4 (4.1)    | 1.9 (3.6)  | 1.0 (0.2)       |
| 0.05 (0.001) | 0.02 (0.0006) | 0.051 (0.002)  |

| 扫描主机数量 (百万) |
|-------------------|
| 66.8             |
| 33.3             |
| 22.5             |
| 33.1             |
| 44.3             |
| 0.032            |
| 14.9             |
| 4.9              |
| 4.3              |
| 4.1              |
| 4.0              |
| 9.0              |
| 14.3             |
| 8.4              |
| 1.2              |
| 9.5              |

| 扫描主机数量 (百万) |
|-------------------|
| 77.3             |
| 47.1             |
| 43.1             |
| 47.1             |
| 55.1             |
| 2.0              |
| 22.9             |
| 7.9              |
| 6.9              |
| 8.8              |
| 6.6              |
| 14.7             |
| 14.3             |
| 12.4             |
| 1.6              |
| 9.5              |

| 处理差异 (%) | 大小 (KB) | 变化百分比 (%) |
|--------------|-----------|----------------|
| 0.32 (0.096) | 11.5      | 8.5            |
| 4.5 (1.4)    | 6.8       | 0.08 (0.0001)  |
| 4.4          | 2.3 (0.002) | 28.1          |
| 0.34 (0.09)  | 10.6      | 0.10 (0.08)    |
| 0.33 (0.31)  | 7.5       | 3.3            |
| 2.2 (8.9)    | 2.0       | 4.9 (8.4)      |
| 4.4          | 2.3 (0.44)| 1.9            |
| 2.4 (0.4)    | 1.5 (1.2) | 5.8            |
| 13.8         | 0.6 (0.2) | 29.8           |
| 0.145 (0)    | 92.8      | 0.145 (0)      |
| 0.10 (0.0)   | 37.2      |                |

| 数据库磁盘大小 (GB) |
|--------------------|
| 10.9               |
| 50.1               |
| 1.5                |
| 4.8                |
| 6.5                |
| 0.0                |
| 9.0                |
| 7.0                |
| 11.5               |
| 6.9                |
| 6.9                |
| 8.9                |
| 5.8                |
| 0.7                |
| 0.1                |
| 0.6                |

#### 内部数据存储
内部数据使用RocksDB进行存储，这是一种针对闪存优化的嵌入式键值存储系统。RocksDB将写操作缓冲到内存中的小型表和磁盘日志中，并在另一个线程中将更改刷新到磁盘上的日志结构合并树。存储在RocksDB中的记录由扫描工作生成的序列化protobuf消息组成。由于数据以日志结构合并树的形式写入磁盘，我们维护了所有记录的全局顺序，这使得我们可以高效地将描述同一主机或网络的多个记录逻辑分组在一起。这样，我们可以通过对数据库进行一次线性遍历，将描述单个主机的所有记录组合在一起，并输出一个结构化的JSON文档，描述每个主机的所有测量方面。

#### 性能优化
虽然仅使用RocksDB可以实现ZDb的所有功能，但这需要对每个传入记录进行磁盘读取。为了提高性能，我们使用内存中的Judy数组缓存当前记录的SHA-1指纹及其是否在最新扫描中被看到。通过这一优化，我们无需在处理过程中从RocksDB进行随机读取，并且可以在不触碰磁盘的情况下处理所有包含无变更的传入记录。我们在扫描结束时的修剪过程中更新每个记录的最后看到时间，该过程已经对磁盘上的记录进行了线性遍历。通过这些优化，ZDb能够在最坏情况下每秒处理58,000条记录，在最佳情况下每秒处理137,000条记录，在日常负载下每秒处理111,000条记录。

#### 故障管理
由于记录在处理前会在内存中排队，并且直到扫描完成才会在内存中缓存哪些记录已被看到，如果服务器崩溃（例如，由于内核恐慌），ZDb会丢失与特定扫描相关的数据。尽管这不是最优方案，但我们认为这种风险是可以接受的，因为可以在几个小时内完成新的扫描，这可能与调查崩溃、恢复数据库并完成剩余扫描所需的时间相似。我们在管理扫描期间的故障时采取类似的方法。如果扫描工作崩溃或扫描验证失败，我们会启动新的扫描而不是尝试恢复之前的扫描。

### 数据公开

#### 搜索界面
Censys的主要界面是一个搜索引擎，允许研究人员对IPv4主机、Alexa Top 1 Million网站和已知证书的最新数据执行全文搜索和结构化查询。例如，研究人员可以通过以下查询找到美国目前易受Heartbleed攻击的所有主机：`443.https.heartbleed.vulnerable: true AND location.country_code: US`。此查询大约在250毫秒内执行完毕，并向用户展示符合标准的主机及其基本元数据，包括顶级自治系统、国家和地区标签的分布情况。用户可以查看任何主机的详细信息，并生成统计报告。

#### 查询语法
搜索界面支持基本谓词逻辑（例如 `location.country_code: US OR CA`）、范围查询（例如 `80.http.http_status.code > 200`）、通配符（例如 `443.https.certificate.issuer.*: GoDaddy*`）和正则表达式（例如 `25.smtp.banner: gsmtp`）。用户可以执行简单的全文搜索，也可以查询在扫描过程中生成的任何结构化字段，包括用户注释和系统维护的元数据（例如地理位置和网络拓扑）。

#### 查看单个记录
用户可以查看查询返回的任何主机、证书或域名的详细信息。这包括服务配置的用户友好视图、最新的原始数据、用户提供的元数据和标签以及历史扫描数据。我们还显示地理定位、路由和WHOIS信息。

#### 动态报告
查询完成后，用户可以生成关于结果集中任何字段的报告。例如，用户可以通过执行查询 `443.https.tls.validation.browser_trusted: true` 并生成关于 `443.https.cipher_suite.name` 的报告来查看具有浏览器信任证书的IPv4 HTTPS主机所选择的密码套件的分布情况。

#### 后端
搜索界面和报告由Elasticsearch提供支持，这是一个开源项目，前端使用Apache Lucene。我们在Elasticsearch中维护三个索引：IPv4主机、Alexa Top 1 Million网站和所有已知证书；ZDb实时更新这三个索引。所有更新也会追加到Google Cloud Datastore集合中，用于提供每个主机的历史记录。我们的Web前端使用Python和Pylons Pyramid框架实现，并托管在Google App Engine上。我们计划使用基于会话的令牌桶限制Web界面，以防止屏幕抓取并鼓励开发人员使用我们在下一节中描述的REST API进行程序访问。我们在表3中展示了示例查询的响应时间。

#### 程序访问
Censys提供了一个程序API，提供了与搜索界面等效的功能，但呈现JSON结果并遵循REST API的语义。例如，研究人员可以通过发送GET请求到 `https://censys.io/api/ipv4/8.8.8.8/history` 来获取IPv4主机的历史记录。为了防止滥用，我们要求用户使用密钥，但很乐意为研究人员提供这些密钥。

#### SQL接口
我们认识到并非所有研究问题都可以通过上述搜索界面回答，特别是历史查询，因为我们只暴露最新的数据。为了支持更复杂的查询，我们公开了包含每日ZDb快照的Google BigQuery表，其中包括IPv4地址空间和Alexa Top 1 Million域，以及我们的辅助证书和公钥集合。Google BigQuery是一种基于Dremel的云数据库引擎，专为执行大规模分析查询而设计。查询需要10-20秒才能执行，但允许完整的SQL语法并且不限于特定索引。经过身份验证的研究人员可以通过Censys Web界面执行查询，或者使用自己的Google Cloud账户直接访问表。

#### 原始数据
最后，我们发布了所有扫描的原始数据，以及我们整理的ZDb快照，包括IPv4地址空间、Alexa Top 1 Million网站和已知证书。我们将这些数据作为结构化的JSON文档发布，并附带数据定义和常见数据库的模式。我们之前在 `https://scans.io` 上发布了扫描数据，这是我们团队托管的一个通用扫描数据存储库。我们将继续维护scans.io接口，提供对我们历史数据集的持续访问，并允许研究人员上传其他数据。然而，我们将不再在 `https://scans.io` 上发布定期扫描，而是鼓励用户直接从Censys的Web界面下载这些数据。

#### 协议仪表板
虽然Censys的主要目标是回答研究人员的具体查询，但后端同样支持生成预定报告和仪表板所需的查询类型。我们计划在Censys网站上发布仪表板，展示各种协议在实际部署中的不同视角。在初始发布时，我们将发布一个全球HTTPS仪表板，展示HTTPS的实际部署情况，一个Alexa HTTPS部署仪表板，展示HTTPS部署的历史趋势以及排名靠前的站点尚未部署HTTPS的情况，以及每个最近的HTTPS漏洞的仪表板，这些将取代Heartbleed Bug Health Report、POODLE Attack and SSLv3 Deployment、Tracking the FREAK Attack和Who is affected by Logjam?等站点。最初，仪表板将是静态定义的。然而，我们鼓励研究人员在完成研究项目后贡献报告，并希望在未来允许动态生成报告。