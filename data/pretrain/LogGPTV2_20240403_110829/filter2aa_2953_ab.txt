Trace µcode execution leveraging hooks.
cpuid
?
µcode
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
2
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
2
5
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
2
5
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
2
5
3
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
2
5
3
4
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode traces
Trace µcode execution leveraging hooks.
cpuid
?
µcode
1
2
5
3
4
1
2
3
4
5
hook:
1.
dump timestamp
2.
disable hook
3.
continue
23
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Reversing µcode updates
µcode update algorithm has always been kept secret by Intel
Let’s trace the execution of a µcode update!
24
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Reversing µcode updates
µcode update algorithm has always been kept secret by Intel
Let’s trace the execution of a µcode update!
• Trigger a µcode update
24
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Reversing µcode updates
µcode update algorithm has always been kept secret by Intel
Let’s trace the execution of a µcode update!
• Trigger a µcode update
• Trace if a microinstruction is executed
24
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Reversing µcode updates
µcode update algorithm has always been kept secret by Intel
Let’s trace the execution of a µcode update!
• Trigger a µcode update
• Trace if a microinstruction is executed
• Repeat for all the possible µcode instructions
24
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Reversing µcode updates
µcode update algorithm has always been kept secret by Intel
Let’s trace the execution of a µcode update!
• Trigger a µcode update
• Trace if a microinstruction is executed
• Repeat for all the possible µcode instructions
• Restore order
24
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
wrmsr
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
wrmsr
move ucode patch to 0xfeb01000
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
RC4 key
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
RC4 key
discard first
0x200 bytes
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
RC4 key
discard first
0x200 bytes
decrypt
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
RC4 key
discard first
0x200 bytes
decrypt
SHA256
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
RC4 key
discard first
0x200 bytes
decrypt
SHA256
RSA verify
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
GLM µcode update algorithm
metadata nonce RSA mod RSA exp RSA sig ucode patch
wrmsr
move ucode patch to 0xfeb01000
SHA256
check
check
nonce CPU secret
CPU secret
key expansion
RC4 key
discard first
0x200 bytes
decrypt
SHA256
RSA verify
parse ucode!
25
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (1/2)
The temporary physical address where µcode is decrypted.
26
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (1/2)
The temporary physical address where µcode is decrypted.
> sudo cat /proc/iomem | grep feb00000
:(
26
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (1/2)
The temporary physical address where µcode is decrypted.
> sudo cat /proc/iomem | grep feb00000
:(
> read physical address 0xfeb01000
00000000: ffff ffff ffff ffff ffff ffff ffff ffff
00000010: ffff ffff ffff ffff ffff ffff ffff ffff
00000020: ffff ffff ffff ffff ffff ffff ffff ffff
00000030: ffff ffff ffff ffff ffff ffff ffff ffff
26
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (2/2)
• Dynamically enabled by the CPU
27
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (2/2)
• Dynamically enabled by the CPU
• Access time: about 20 cycles
27
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (2/2)
• Dynamically enabled by the CPU
• Access time: about 20 cycles
• Content not shared between cores
27
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (2/2)
• Dynamically enabled by the CPU
• Access time: about 20 cycles
• Content not shared between cores
• Can fit 64-256Kb of valid data
27
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (2/2)
• Dynamically enabled by the CPU
• Access time: about 20 cycles
• Content not shared between cores
• Can fit 64-256Kb of valid data
• Replacement policy on the content?!
27
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
What is address 0xfeb01000 (2/2)
• Dynamically enabled by the CPU
• Access time: about 20 cycles
• Content not shared between cores
• Can fit 64-256Kb of valid data
• Replacement policy on the content?!
• It’s a special CPU view on the L2 cache!
27
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Parsing µcode updates
00000000: 0102 007c 3900 0a00 3f88 4bed c000 080c
...|9...?.K.....
00000010: 0b01 4780 0000 0a00 3f88 4fad 0003 0a00
..G.....?.O.....
00000020: 2f20 4b2d 8002 080c 0322 4740 a903 0a00
/ K-....."G@....
00000030: 2f20 4f6d 1902 0002 0353 6380 c000 3002
/ Om.....Sc...0.
00000040: b8a6 6be8 0000 0002 0320 63c0 0003 f003
..k...... c.....
00000050: f8a6 6b28 c000 0800 03c0 0bed 0000 0b10
..k(............
00000060: 7f00 0800 8001 3110 0300 a140 c000 310c
......1....@..1.
00000070: 0300 0700 0000 4012 0b30 6210 0003 4b1c
......@..0b...K.
00000080: 7f00 0440 c000 3112 0310 2400 0000 310c
...@..1...$...1.
00000090: 0300 01c0 0003 0800 03c0 0fad 0002 00d2
................
28
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Parsing µcode updates
A µcode update is bytecode: the CPU interprets commands from the µcode update
reset
write µcode
hook match
& patch
write stgbuf
write uram
CRBUS
cmd
control flow
directives
nested decrypt
(e.g., XuCode)
29
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode decryptor
• Create a parser for µcode updates
30
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode decryptor
• Create a parser for µcode updates
• Automatically collect existing µcode (s) for GLM
30
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode decryptor
• Create a parser for µcode updates
• Automatically collect existing µcode (s) for GLM
• Decrypt all GLM updates
30
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
µcode decryptor
• Create a parser for µcode updates
• Automatically collect existing µcode (s) for GLM
• Decrypt all GLM updates
github.com/pietroborrello/CustomProcessingUnit/ucode_
collection
30
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Bonus Content 1: Skylake perf traces
31
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Bonus Content 2: An APIC failed exploit
µcode update
Use:
0xfeb01000
L2 Cache MMIO
0xfeb00000
32
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Bonus Content 2: An APIC failed exploit
µcode update
Use:
0xfeb01000
APIC MMIO
0xfee00000
L2 Cache MMIO
0xfeb00000
32
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Bonus Content 2: An APIC failed exploit
µcode update
Use:
0xfeb01000
L2 Cache MMIO
0xfeb00000
APIC MMIO
0xfeb01000
32
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Conclusion
• Deepen understanding of modern CPUs with µcode access
33
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Conclusion
• Deepen understanding of modern CPUs with µcode access
• Develop a static and dynamic analysis framework for µcode:
33
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Conclusion
• Deepen understanding of modern CPUs with µcode access
• Develop a static and dynamic analysis framework for µcode:
• µcode decompiler
• µcode assembler
• µcode patcher
• µcode tracer
33
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)
Conclusion
• Deepen understanding of modern CPUs with µcode access
• Develop a static and dynamic analysis framework for µcode:
• µcode decompiler
• µcode assembler
• µcode patcher
• µcode tracer
• Let’s control our CPUs!
github.com/pietroborrello/CustomProcessingUnit
33
Pietro Borrello (@borrello pietro)
Martin Schwarzl (@marv0x90)