# 流行
这可能是需要考虑的最有争议的维度，也是处理新技术时需要注意的最重要的维度之一。虽然流行并不等同于技术优点是绝对正确的，但可以假设:
*   更多使用特定工具的人将能够提供更好的集成帮助。
*   问题的解决方案会更容易找到。
*   如果代码库是开源的，项目将更有可能添加修复和特性。
换句话说，对于一个未经验证或有望在未来几年内被放弃的工具，你能承担数周/数月/数年的集成工作风险吗？如果你是一家拥有大量预算的大型商店，这可能不是问题，但在大多数情况下，你将没有机会尝试集成不同的竞争技术，看看哪一种是最好的。虽然有时使用新工具的机会是合理的，但在大多数情况下，由于云系统的复杂性和寿命，失败的成本非常高，因此通常建议采取务实的方法，但您的个人需求可能会有所不同，因此请做出相应的选择。
要评估项目的这一方面，可以使用各种工具，但最简单和最容易的是 GitHub 项目 forks/star(对于 OSS 项目)、Google Trends([https://trends.google.com](https://trends.google.com))预测，以及使用过所述技术的人的一般社交媒体反馈。通过观察这些值的变化和转移，可以以相对较高的精度进行长期可行性的推断，并与现有工具的比较相结合，也可以很好地描述项目的总体趋势。向上流动的项目通常表明了优越的技术基础，但在某些情况下，这是由拒绝现有工具或大的营销推动所激发的，所以在评估工具时不要总是认为流行的选项更好。
**![](img/61a25aac-5288-4e28-ae3e-ae254f86b730.png)**
在前面的截图中，您可以看到随着时间的推移，人们对 Kubernetes 的兴趣明显增加，这在一定程度上反映了社区对该编排工具的采用和接受。如果我们自己实现这项技术，我们可以合理地确定，在一段时间内，我们将使用一种更容易使用和获得支持的工具。
当将 Kubernetes 与 Marathon 进行比较并使用相同的技术时，事情会变得非常混乱，因为 Marathon 也是一种非常常见的长跑活动，因此结果会与不相关的谷歌查询混淆。在下面的截图中，我们将结果与其他几个与云相关的关键词进行了对比，您可以看到我们的数据有问题:
![](img/20ba9666-a31d-4dd4-b1e7-15c3cf166831.png)
然而，看看他们的 GitHub 页面的右上角和叉/星，我们可以看到他们是如何比较的( **3，483** 星和 **810** 叉与 **28，444** 星和 **10，167** 叉):
![](img/2b94ae37-1384-433b-aee2-575108682321.png)
将前面的 GitHub 页面与下面的页面进行比较:
![](img/480f3c91-c948-450a-82ce-eec56cc56eaa.png)
然而，在这个特殊的例子中，很难看到长期趋势，我们已经提到这两个工具不能解决相同类型的问题，除此之外，这两个工具的设置复杂性有很大的不同，因此正确的评估非常困难。
在进入下一个维度之前，我们应该提到的一件非常重要的事情是:对于不成熟的工具，一个常见的并且强烈推荐的风险缓解(这个场景比你想象的更有可能)是，如果你自己的开发人员有能力并且被允许在相关的上游项目上工作，那么他们可以被用来修复 bug 和添加特性。如果一个工具非常适合您的基础架构，并且您可以将开发资源抛在它的后面，那么只要您能够让它以您满意的方式为您工作，它是否受欢迎就不会有太大的不同。
As a reference data point, countless times during the development of cloud implementations, the teams that I worked on have found bugs and issues in upstream projects that we fixed rather quickly and in the process also helped all the other users of that software instead of potentially waiting days or weeks for the upstream developers to make time to fix them. I would highly encourage this type of approach to contributing back being applied to your workplace if possible since it helps the whole project's community and indirectly prevents loss of project momentum due to unfixed bugs.
# 团队的技术能力
新的工具通常有一个很好的初始想法，但是由于糟糕的执行或架构，它很快就会变成不可维护且容易出错的意大利面代码。如果设计和实现保持高标准，您可以更好地保证不会出现意外的损坏，或者至少 bug 可以更容易找到和修复。核心项目开发人员的能力在这方面起着巨大的作用，并且由于大多数较新的工具都是开源的，所以在这方面看一看代码库通常会很有帮助。
几乎不可能为评估跨越各种技术和系统的项目制定确切的指导方针，但对于关键应用中使用的工具，有一些危险信号应被视为未来潜在问题的警告信号:
*   **缺乏测试**:没有测试，代码工作的保证几乎被消除，您希望进行更改的开发人员在实现新功能时足够小心，并且他们没有破坏当前的功能。在我的一生中，我只见过少数几个开发人员能够像测试工具一样关注所有的边缘案例，但是我不会屏息以待，因为您正在研究的项目中就有一个。
*   **聪明的代码**:一个项目时不时会有一个或多个开发人员，他们更关心的是展示自己的技能，而不是他们正在处理的项目的可维护性，他们几乎总是会把他们接触到的文件变成只有他们才能处理的代码，导致未来添加功能或修复 bug 时出现问题。几乎总是这种类型的改变是单向的，在足够长的一段时间后，它通常会以项目的死亡告终(在我的经验中，这种情况经常发生)。
*   **大量关键 bug 长时间开放**:对于任何项目来说，总有一天会遇到必须尽快修复的关键 bug，通过查看修复需要多长时间的趋势，可以看出团队是否有能力快速修复一个问题，或者是否关注更广泛的社区。虽然更多的是一种主观的度量，但随着服务的概要或安全状况的增加，它变得极其重要。
只要你对代码库的质量有正确的认识，你也可以使用任何其他的度量来评估，比如:旧的和未合并的拉取请求，任意关闭的 bug 报告，等等。有了这些知识，您可以正确地评估候选工具的未来，以及您的基础设施如何随之发展。
# 摘要
就这样，我们已经到了书的结尾！在这一章中，我们介绍了您将需要的各种东西，通过积极的自动化，将东西分成多个可用性区域，并为您的基础架构添加监控，使您的小型服务全球化。由于云技术还相对年轻，我们更重要的是包括了一些关于如何尽可能客观地评估新兴工具的技巧，以确保您的项目在工具生态系统变化的情况下最有可能成功，这些变化在可预见的未来将是常见的。通过假设事情在未来会发生变化，并拥有处理这些变化的工具，我们可以准备好接受任何扔给我们的东西。