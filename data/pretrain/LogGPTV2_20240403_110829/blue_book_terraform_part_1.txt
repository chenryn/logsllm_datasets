---
title: Terraform
date: 20210806
author: Lyz
---
[Terraform](https://en.wikipedia.org/wiki/Terraform_%28software%29) is an
open-source infrastructure as code software tool created by HashiCorp. It
enables users to define and provision a datacenter infrastructure using
an awful high-level configuration language known as Hashicorp Configuration Language
(HCL), or optionally JSON. Terraform supports a number of cloud
infrastructure providers such as Amazon Web Services, IBM Cloud
, Google Cloud Platform, DigitalOcean, Linode, Microsoft Azure,
Oracle Cloud Infrastructure, OVH, or VMware vSphere as well as
OpenNebula and OpenStack.
# Installation
Go to the [releases page](https://github.com/hashicorp/terraform/releases), download the latest release, decompress it and add it to your `$PATH`.
# Tools
* [tfschema](https://github.com/minamijoyo/tfschema): A binary that allows you
  to see the attributes of the resources of the different providers. There are
  some times that there are complex attributes that aren't shown on the docs
  with an example. Here you'll see them clearly.
  ```bash
  tfschema resource list aws | grep aws_iam_user
  > aws_iam_user
  > aws_iam_user_group_membership
  > aws_iam_user_login_profile
  > aws_iam_user_policy
  > aws_iam_user_policy_attachment
  > aws_iam_user_ssh_key
  tfschema resource show aws_iam_user
  +----------------------+-------------+----------+----------+----------+-----------+
  | ATTRIBUTE            | TYPE        | REQUIRED | OPTIONAL | COMPUTED | SENSITIVE |
  +----------------------+-------------+----------+----------+----------+-----------+
  | arn                  | string      | false    | false    | true     | false     |
  | force_destroy        | bool        | false    | true     | false    | false     |
  | id                   | string      | false    | true     | true     | false     |
  | name                 | string      | true     | false    | false    | false     |
  | path                 | string      | false    | true     | false    | false     |
  | permissions_boundary | string      | false    | true     | false    | false     |
  | tags                 | map(string) | false    | true     | false    | false     |
  | unique_id            | string      | false    | false    | true     | false     |
  +----------------------+-------------+----------+----------+----------+-----------+
  # Open the documentation of the resource in the browser
  tfschema resource browse aws_iam_user
  ```
* [terraforming](https://github.com/dtan4/terraforming): Tool to export existing
  resources to terraform
* [terraboard](https://github.com/camptocamp/terraboard): Web dashboard to
  visualize and query terraform tfstate, you can search, compare and see the
  most active ones. There are deployments for k8s.
  ```bash
  export AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXX
  export AWS_SECRET_ACCESS_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  export AWS_DEFAULT_REGION=eu-west-1
  export AWS_BUCKET=terraform-tfstate-20180119
  export TERRABOARD_LOG_LEVEL=debug
  docker network create terranet
  docker run -ti --rm --name db -e POSTGRES_USER=gorm -e POSTGRES_DB=gorm -e POSTGRES_PASSWORD="mypassword" --net terranet postgres
  docker run -ti --rm -p 8080:8080 -e AWS_REGION="$AWS_DEFAULT_REGION" -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" -e AWS_BUCKET="$AWS_BUCKET" -e DB_PASSWORD="mypassword" --net terranet camptocamp/terraboard:latest
  ```
* tfenv: Install different versions of terraform
  ```bash
  git clone https://github.com/tfutils/tfenv.git ~/.tfenv
  echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ~/.bashrc
  echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ~/.zshrc
  tfenv list-remote
  tfenv install 0.12.8
  terraform version
  tfenv install 0.11.15
  terraform version
  tfenv use 0.12.8
  terraform version
  ```
* https://github.com/eerkunt/terraform-compliance
* [landscape](https://github.com/coinbase/terraform-landscape): A program to
  modify the `plan` and show a nicer version, really useful when it's shown as
  json. [Right now](https://github.com/coinbase/terraform-landscape/issues/101)
  it only works for terraform 11.
  ```bash
  terraform plan | landscape
  ```
* [k2tf](https://github.com/sl1pm4t/k2tf): Program to convert k8s yaml
  manifestos to HCL.
## Editor Plugins
For [Vim](vim.md):
* [vim-terraform](https://github.com/hashivim/vim-terraform): Execute tf from
    vim and autoformat when saving.
* [vim-terraform-completion](https://github.com/juliosueiras/vim-terraform-completion):
    linter and autocomplete.
## Good practices and maintaining
* [fmt](https://www.terraform.io/docs/commands/fmt.html): Formats the code
  following hashicorp best practices.
  ```bash
  terraform fmt
  ```
* [Validate](https://www.terraform.io/docs/commands/validate.html): Tests that
  the syntax is correct.
  ```bash
  terraform validate
  ```
* [DocumentaciÃ³n](https://github.com/segmentio/terraform-docs): Generates
  a table in markdown with the inputs and outputs.
  ```bash
  terraform-docs markdown table *.tf > README.md
  ## Inputs
  | Name | Description | Type | Default | Required |
  |------|-------------|:----:|:-----:|:-----:|
  | broker_numbers | Number of brokers | number | `"3"` | no |
  | broker_size | AWS instance type for the brokers | string | `"kafka.m5.large"` | no |
  | ebs_size | Size of the brokers disks | string | `"300"` | no |
  | kafka_version | Kafka version | string | `"2.1.0"` | no |
  ## Outputs
  | Name | Description |
  |------|-------------|
  | brokers_masked_endpoints | Zookeeper masked endpoints |
  | brokers_real_endpoints | Zookeeper real endpoints |
  | zookeeper_masked_endpoints | Zookeeper masked endpoints |
  | zookeeper_real_endpoints | Zookeeper real endpoints |
  ```
* Terraform lint ([tflint](https://github.com/wata727/tflint)): Only works with
  some AWS resources. It allows the validation against a third party API. For
  example:
  ```hcl
    resource "aws_instance" "foo" {
      ami           = "ami-0ff8a91507f77f867"
      instance_type = "t1.2xlarge" # invalid type!
    }
  ```
  The code is valid, but in AWS there doesn't exist the type `t1.2xlarge`. This
  test avoids this kind of issues.
  ```bash
  wget https://github.com/wata727/tflint/releases/download/v0.11.1/tflint_darwin_amd64.zip
  unzip tflint_darwin_amd64.zip
  sudo install tflint /usr/local/bin/
  tflint -v
  ```
We can automate all the above to be executed before we do a commit using the
[pre-commit](https://pre-commit.com/) framework.
```bash
pip install pre-commit
cd $proyectoConTerraform
echo """repos:
- repo: git://github.com/antonbabenko/pre-commit-terraform
  rev: v1.19.0
  hooks:
    - id: terraform_fmt
    - id: terraform_validate
    - id: terraform_docs
    - id: terraform_tflint
""" > .pre-commit-config.yaml
pre-commit install
pre-commit run terraform_fmt
pre-commit run terraform_validate --file dynamo.tf
pre-commit run -a
```
## Tests
[Motivation](https://www.contino.io/insights/top-3-terraform-testing-strategies-for-ultra-reliable-infrastructure-as-code)
### Static analysis
#### Linters
* conftest
* tflint
* `terraform validate`
#### Dry run
* `terraform plan`
* hashicorp sentinel
* terraform-compliance
### Unit tests
There is no real unit testing in infrastructure code as you need to deploy it in
a real environment
* `terratest` (works for k8s and terraform)
    Some sample code in:
    * github.com/gruntwork-io/infrastructure-as-code-testing-talk
    * gruntwork.io
### E2E test
* Too slow and too brittle to be worth it
* Use incremental e2e testing
# [Variables](https://www.terraform.io/intro/getting-started/variables.html)
It's a good practice to name the resource before the particularization of the
resource, so you can search all the elements of that resource, for example,
instead of `client_cidr` and `operations_cidr` use `cidr_operations` and
`cidr_client`
```tf
variable "list_example"{
  description = "An example of a list"
  type = "list"
  default = [1, 2, 3]
}
variable "map_example"{
  description = "An example of a dictionary"
  type = "map"
  default = {
    key1 = "value1"
    key2 = "value2"
  }
}
```
For the use of maps inside maps or lists investigate `zipmap`
To access you have to use `"${var.list_example}"`
For secret variables we use:
```terraform
variable "db_password" {
  description = "The password for the database"
}
```
Which has no default value, we save that password in our keystore and pass it as
environmental variable
```bash
export TF_VAR_db_password="{{ your password }}"
terragrunt plan
```
As a reminder, Terraform stores all variables in its state file in plain text,
including this database password, which is why your terragrunt config should
always enable encryption for remote state storage in S3
## [Interpolation of variables](https://github.com/hashicorp/terraform/issues/4084)
You can't interpolate in variables, so instead of
```terraform
variable "sistemas_gpg" {
  description = "Sistemas public GPG key for Zena"
  type = "string"
  default = "${file("sistemas_zena.pub")}"
}
```
You have to use locals
```terraform
locals {
  sistemas_gpg = "${file("sistemas_zena.pub")}"
}
"${local.sistemas_gpg}"
```
# Show information of the resources
Get information of the infrastructure. Output variables show up in the console
after you run `terraform apply`, you can also use `terraform output [{{
output_name }}]` to see the value of a specific output without applying any
changes
```tf
output "public_ip" {
  value = "${aws_instance.example.public_ip}"
}
```
```bash
> terraform apply
aws_security_group.instance: Refreshing state... (ID: sg-db91dba1)
aws_instance.example: Refreshing state... (ID: i-61744350)
Apply complete! Resources: 0 added, 0 changed, 0 destroyed.
Outputs:
public_ip = 54.174.13.5
```
# Data source
A *data source* represents a piece of read-only information that is fetched from
the provider every time you run Terraform. It does not create anything new
```terraform
data "aws_availability_zones" "all" {}
```
And you reference it with `"${data.aws_availability_zones.all.names}"`
# Read-only state source
With `terraform_remote_state` you an fetch the Terraform state file stored by
another set of templates in a completely read-only manner.
From an app template we can read the info of the ddbb with
```terraform
data "terraform_remote_state" "db" {
  backend = "s3"
  config {
    bucket = "(YOUR_BUCKET_NAME)"
    key = "stage/data-stores/mysql/terraform.tfstate"
    region = "us-east-1"
  }
}
```
And you would access the variables inside the database terraform file with
`data.terraform_remote_state.db.outputs.port`
To share variables from state, you need to to set them in the `outputs.tf` file.
# Template_file source
It is used to load templates, it has two parameters, `template` which is
a string and `vars` which is a map of variables. it has one output attribute
called `rendered`, which is the result of rendering template. For example
```bash
# File: user-data.sh
#!/bin/bash
cat > index.html Hello, World
DB address: ${db_address}
DB port: ${db_port}
EOF
nohup busybox httpd -f -p "${server_port}" &
```
```terraform
data "template_file" "user_data" {
  template = "${file("user-data.sh")}"
  vars {
    server_port = "${var.server_port}"
    db_address = "${data.terraform_remote_state.db.address}"
    db_port = "${data.terraform_remote_state.db.port}"
  }
}
```
# Resource lifecycle
The `lifecycle` parameter is a *meta-parameter*, it exist on about every
resource in Terraform. You can add a `lifecycle` block to any resource to
configure how that resource should be created, updated or destroyed.
The available options are:
* `create_before_destroy`: Which if set to true will create a replacement
  resource before destroying hte original resource
* `prevent_destroy`: If set to true, any attempt to delete that resource
  (`terraform destroy`), will fail, to delete it you have to first remove the
  `prevent_destroy`
```terraform
resource "aws_launch_configuration" "example" {
  image_id = "ami-40d28157"
  instance_type = "t2.micro"
  security_groups = ["${aws_security_group.instance.id}"]
  user_data =  index.html
              nohup busybox httpd -f -p "${var.server_port}" &
              EOF
  lifecycle {
    create_before_destroy = true
  }
}
```
If you set the `create_before_destroy` on a resource, you also have to set it on every
resource that X depends on (if you forget, you'll get errors about cyclical
dependencies). In the case of the launch configuration, that means you need to
set `create_before_destroy` to true on the security group:
```terraform
resource "aws_security_group" "instance" {
  name = "terraform-example-instance"
  ingress {
    from_port = "${var.server_port}"
    to_port = "${var.server_port}"
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  lifecycle {
    create_before_destroy = true
  }
}
```
# Use collaboratively
## Share state
The best option is to use S3 as bucket of the config.
First create it
```terraform
resource "aws_s3_bucket" "terraform_state" {
  bucket = "terraform-up-and-running-state"
  versioning {
    enabled = true
  }
  lifecycle {
    prevent_destroy = true
  }
}
```
And then configure terraform
```bash
terraform remote config \
          -backend=s3 \
          -backend-config="bucket=(YOUR_BUCKET_NAME)" \
          -backend-config="key=global/s3/terraform.tfstate" \
          -backend-config="region=us-east-1" \
          -backend-config="encrypt=true"
```
In this way terraform will automatically pull the latest state from this bucked
and push the latest state after running a command
## Lock terraform
To avoid several people running terraform at the same time, we'd use
`terragrunt` a wrapper for terraform that manages remote state for you
automatically and provies locking by using DynamoDB (in the free tier)
Inside the `terraform_config.tf` you create the dynamodb table and then
configure your `s3` backend to use it
```terraform
# create a dynamodb table for locking the state file
resource "aws_dynamodb_table" "dynamodb-terraform-state-lock" {
  name         = "terraform-state-lock-dynamo"
  hash_key     = "LockID"
  billing_mode = "PAY_PER_REQUEST"
  attribute {
    name = "LockID"