## Important Notice: DevOps Kit (AzSK) Sunset by End of FY21
For more details, please refer to the [AzSK Sunset Notice](/ReleaseNotes/AzSKSunsetNotice.md).

## Migrating from 'AzSDK' to 'AzSK'

### Important:
1. If you are from Microsoft CSE&O, please follow the steps [here](https://aka.ms/devopskit/migration). Do not use the migration instructions on this page; these are for non-Microsoft consumers of the DevOps Kit.
2. If you are external to Microsoft, the migration process depends on whether your organization's subscriptions are running with a generic (org-neutral) policy or a custom AzSDK policy set up using the `Install-AzSDKOrganizationPolicy` command. The steps for both scenarios are detailed below.

### Step 1: Migrating Org Policy

**Note:** This step is only required if you have a custom org policy set up. If not, proceed directly to Step 2.

#### Prerequisites:
- You must be an **Owner** of the subscription where your org policy is hosted.

#### Steps:
0. Close all PowerShell sessions.
1. Open a fresh PowerShell session and install the latest DevOps Kit release:
   ```PowerShell
   Install-Module AzSK -Scope CurrentUser -AllowClobber
   ```
2. Close the installation session, open a new PowerShell session, and run the following commands to migrate the org policy and create new resources as per the 'AzSK' module:
   ```PowerShell
   Import-Module AzSK
   Update-AzSKOrganizationPolicy -SubscriptionId <YourSubscriptionId> -OrgName <YourOrgName> -DepartmentName <YourDeptName> -Migrate
   ```
   **Note:**
   - If you have customized `AzSDK-EasyInstaller.ps1` or `RunbookScanAgent.ps1`, re-apply those changes to the newly generated `AzSK-EasyInstaller.ps1` and `RunbookScanAgent.ps1`.
   - If you are using the baseline control feature, add the `-UseBaselineControls` flag to the `Get-AzSKAzureServicesSecurityStatus` and `Get-AzSKSubscriptionSecurityStatus` commands in `RunbookScanAgent.ps1`.

3. Run the newly generated **"iwr"** command displayed in the output of the migration command:
   ```PowerShell
   iwr 'https://azsk............/AzSK-EasyInstaller.ps1' -UseBasicParsing | iex
   ```

4. Start another fresh PowerShell session and verify the new policy settings by running AzSK scan commands such as `Get-AzSKSubscriptionSecurityStatus` or `Get-AzSKAzureServicesSecurityStatus`. If you have a custom controls baseline, include the `-UseBaselineControls` flag to validate that your org-specific baseline is honored.

5. Communicate the newly generated **"iwr"** to your subscription owners/end users so they can install the new AzSK module using the latest (migrated) org policy. Subscription owners can then migrate their subscriptions to "AzSK" using the instructions in Step 2.

**Additional Notes:**
- Your old (AzSDK-based) org policy will be retained under the old "AzSDK-[OrgName]-[DeptName]-RG" resource group. Delete this RG after ensuring the migration has worked as expected.
- If you enabled 'baseline scanning' via the "SupportedSources = "CC"" setting in `ControlSettings.json`, use the `-UseBaselineControls` switch directly in the command invocation inside `RunbookScanAgent.PS1`.
- If you modified CosmosDB settings and had an entry for `cosmosdb.json` in `ServerConfigMetadata.json`, rename the file to `CosmosDB.json` and re-upload it.
- Review the configuration capabilities available for org policy control [here](../07-Customizing-AzSK-for-your-Org/Readme.md#basic-files-setup-during-policy-setup).

### Step 2: Migrating Individual Subscriptions

#### Prerequisites:
- You must be an **Owner** of the subscription being migrated.

#### Steps:
0. Close all PowerShell sessions.
1. Open a fresh PowerShell session and install the latest release:
   ```PowerShell
   # Run this command if you do not have org-policy setup
   Install-Module AzSK -Scope CurrentUser -AllowClobber
   # Run this command if your organization has custom org-policy setup
   iwr 'https://azsk............/AzSK-EasyInstaller.ps1' -UseBasicParsing | iex
   ```
2. Close the installation session, open a new PowerShell session, and run the following:
   ```PowerShell
   Import-Module AzSK
   Update-AzSKSubscriptionSecurity -SubscriptionId <YourSubscriptionId> -Migrate
   ```

This will make all necessary changes in your subscription to start using the new ('AzSK') module. If any step fails, you can retry migration by re-running the 'migrate' command.

**Additional Notes:**
- Until a subscription is migrated, you can use the 'AzSDK' module and corresponding cmdlets as before.
- After migration, use only the new 'AzSK' versions of the cmdlets.
- If you are using generic org-policy, uninstall the old (AzSDK) module using `Uninstall-Module AzSDK -Force` from a fresh PowerShell console.
- Logs generated by locally run scan commands from the new module will appear under the `'%localappdata%\Microsoft\AzSKLogs'` folder.

#### FAQ:

##### Why are we migrating from AzSDK to AzSK?
Feedback indicated that the 'SDK' in the module name was misleading, as 'SDK' is traditionally used for 'Software Development Kit'. Additionally, some users confused 'AzSDK' with 'Azure SDK'.

##### What exactly happens during migration?
The migration process prepares your local machine and subscription to use the new 'AzSK' PS module. Depending on your subscription's security features, the following occurs:
- The old resource group ('AzSDKRG') is retained and locked for modifications post-migration.
- Attestation data and resource group tags are auto-migrated to the new resource group ('AzSKRG').
- Attestation data is retained in the old storage account as a backup.
- Previously set alerts, ARM policies, and Continuous Assurance Automation Account are deleted, and new resources are created under the AzSK RG.

##### How will the old cmdlets (from the old 'AzSDK' module) behave?
If you have not yet migrated, all AzSDK cmdlets (e.g., `Get-AzSDKxxx` or `Set-AzSDKxxx`) will work as usual. The latest version of AzSDK (2.11.x) will show warnings about migration. Once migrated, most cmdlets from AzSDK 2.11.x will report errors, instructing you to use cmdlets from the 'AzSK' module.

##### Can I use the new 'AzSK' module if I have not migrated?
Some read-only commands will work, but others (e.g., attestation or `Set-AzSKSubscriptionSecurity`) will be blocked to avoid conflicts with the 'AzSDK-based' state in the subscription.

##### How will Continuous Assurance transition through migration?
If you have not yet migrated, the current AzSDK setup will seamlessly update to the latest AzSDK (version 2.11.x), and existing CA setups will continue to function. Once migrated, the migration process will create a new CA setup using the same settings, and CA scanning will use 'AzSK' and update to newer releases when available.

##### What about CICD extension?
The CICD extension has been revised to reflect the switch from 'AzSDK' to 'AzSK'. The previous extension will continue to work in the pipeline. After migration, select the newest version in the extension UI. If you have set up CICD in non-hosted mode, manually remove the older module as an additional step.

##### Are my old CA scan logs retained after migration?
Yes, old CA logs are retained in the (old) storage account within 'AzSDKRG'. The migration process places a 'read' lock on 'AzSDKRG'. To view the logs, temporarily change the lock type from 'read-only' to 'delete', download/view the logs, and then revert the lock type back to 'read-only'.

##### What happens during 'org policy' migration?
If you have a custom org policy set up, the migration process involves:
- Downloading all artifacts from the current policy store to a folder on your desktop named 'AzSK-[OrgName]-[DeptName]-Policy'.
- Creating new resources with 'AzSK'-based names in the policy host subscription.
- Uploading the old policy JSONs and other files from the local copy to the new policy location.
- Generating a new **"iwr"** command for subscription owners to install 'AzSK' with the policy URL pointing to the new location.