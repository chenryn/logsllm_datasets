to runtime crashes. We have compared our results with those of CiD, Cider and
Lint and we can conclude that GAINDroid is more effective than the other three
state-of-the-art approaches. It can detect more sources of potential mismatches
while yielding less false positives. Metrics such as precision, recall, and F-Measure
supports our claim that our approach performs better than the other three state-of-
the-art tools. GAINDroid can also perform analysis at least 3 times faster than
CiD and Lint.
We further conducted a case study using 3,571 real-world Android apps down-
loaded from Androzoo [32] and F-Droid [9]. Again, we used GAINDroid to
detect potential API invocation and callback mismatches, along with permission
request and revocation mismatch. Our analysis results report that 41,19% of the
downloaded apps can have at least one potential API invocation mismatch, they
also show that 20,05% of the analyzed apps can crash due to API callback mis-
match. With respect to permission mismatches, 12,34% suffer from permission
request mismatch while 68,68% of the downloaded apps can suffer from crashes
due to permission revocation mismatch. The obtained results demonstrate that
49
such problems are still present in modern Android apps. The study also showed
that GAINDroid can be used in real-world Android applications to perform a
large-scale analysis.
With respect to future work, we have a few items that we plan to address. Our
immediate plan is to contact Huang et al. [46] and He et al. [44] and request access
to Cider and IctApiFinder so that we can conduct more extensive experiments
to compare their effectiveness and efﬁciency with our work. We also would like
to evaluate if they can handle misuse of the Android permission mechanism. We
also plan to contact the authors of apps that showed mismatches problems. The
Android framework evolves fast and developers tend to not engage in keeping
their apps up to date to be compatible with new features and APIs in the most
recent versions of the framework.
In terms of implementation of additional features to increase true positives
in GAINDroid, we plan to analyze anonymous classes, inaccessible APIs and
identify behavioral changes in Android APIs.
As described in the Result section, GAINDroid is unable to identify API
methods within anonymous classes in apps such as MaterialFBook, DuckDuckGo
and Padland. Therefore we plan to implement a module that is able to identify
anonymous classes and analyze its content. Thus, recognizing API invocations
and callbacks that could not be analyzed previously, culminating in an increase of
true positives for the aforementioned API related mismatches.
It is known that is possible to access inaccessible APIs, such as internal and
hidden APIs [50]. Such APIs are often classiﬁed as not stable enough to be
promoted or are still subject to invasive changes in future releases. However,
developers may ﬁnd more convenient to implement their desired functionalities
with hidden APIs and consequently, to use them along with public APIs. As stated
50
by Google [20], more restrictions regarding the use of inaccessible APIs will be
implemented, starting in Android level 28. Therefore, the scenario where an app
using a hidden API works ﬂawlessly but, after a system update, the app may
crash because the method is not available anymore due to a system restriction,
can happen. In order to warn developers about this upcoming issue, we want to
include the capability to identify internal and hidden methods within an Android
app.
We are also interested in identifying behavioral changes in API methods across
different levels of Android APIs. The reason for this module is because methods
can still have the same signature but, different implementations in order to improve
performance and security. We want to create a repository containing all changes
of a method and whenever a developer uses an API, GAINDroid would send
an alert to the user, mentioning that the API has changes on its behavior. Maybe
this change in behavior can lead to a runtime crash. For example, API methods
WiﬁInfo.getMacAddress() and BluetoothAdapter.getAddress() return now return the
default constant value of 02:00:00:00:00:00 starting from Android level 23. Such
behavior change has initiated many discussions online [11].
In addition, another idea is to provide guidance to users to replace the use
of possibly outdated or deprecated APIs with more updated ones. For example,
GAINDroid would recommend a developer to replace Apache HTTP Client class
by the class HttpURLConnection.
51
Bibliography
[1] Adaway. https://github.com/AdAway/AdAway/releases/tag/v3.0.2". 2.3,
5.2
[2] Afwall. https://github.com/ukanth/afwall/tree/71e6c66". 4.1
[3] Android lint. http://tools.android.com/tips/lint. 5.1, 7.1, 7
[4] Android market share. https://www.statista.com/statistics/266136/global-
market-share-held-by-smartphone-operating-systems/. 1
[5] Android runtime permissions. https://source.android.com/devices/tech/
conﬁg/runtime perms. 2.3, 2.3
[6] Android versions. https://en.wikipedia.org/wiki/Android version history.
2.1
[7] Bazaar repository. https://cafebazaar.ir. 6
[8] Duck duck go. https://github.com/duckduckgo/Android/tree/2d7d379".
4.1
[9] F-droid repository. https://f-droid.org/. 4.1, 5.2, 6, 8
[10] Foss
browser.
e08f5b6". 4.1
https://github.com/scoute-dich/browser/commit/
52
[11] Getting mac address in android 23. http://stackoverflow.com/questions/
33159224/getting-mac-address-in-android-6-0. 8
[12] Google play apps repository.
https://www.statista.com/statistics/
266210/number-of-available-applications-in-the-google-play-store/.
1
[13] Kolab notes.
https://github.com/konradrenner/kolabnotes-android/
commit/14ba3c3". 4.1, 5.2
[14] Materialfbook.
2cb3c61". 4.1
https://github.com/ZeeRooo/MaterialFBook/tree/
[15] Meet google play’s target api level requirement. https://developer.android.
com/distribute/best-practices/develop/target-sdk". 6
[16] Network monitor. https://github.com/caarmen/network-monitor/tree/
0e17b95". 4.1
[17] Nyaa pantsu. https://github.com/NyaaPantsu/NyaaPantsu-android-app/
tree/53ad9a8". 4.1
[18] Padland. https://github.com/mikifus/padland/commit/38f7e66". 4.1
[19] Permissions in android. https://developer.android.com/guide/topics/
permissions/overview#permission-groups. 1, 2.3
[20] Restrictions on non-sdk interfaces. https://developer.android.com/about/
versions/pie/restrictions-non-sdk-interfaces. 6, 8
[21] sdkmanager
tool.
line/sdkmanager. 3
https://developer.android.com/studio/command-
53
[22] Simple solitaire. https://github.com/TobiasBielefeld/Simple-Solitaire/
commit/1483ee". 2.2.2, 4.1
[23] Survival manual.
13b1f43". 4.1
https://github.com/ligi/SurvivalManual/tree/
[24] Uber rides. https://github.com/uber/rides-android-sdk/tree/4d77c38".
4.1
[25] Using sdk in android apps. https://developer.android.com/guide/topics/
manifest/uses-sdk-element. 2.1, 2.2
[26] Android - aosp. https://github.com/aosp-mirror/, 2018. 5.3
[27] Android platform frameworks base.
https
:
//github.com/aosp-
mirror/plat f orm f rameworks base/releases, August 2018. 1
[28] Apktool. https://ibotpeaches.github.io/Apktool/, 2018. 4
[29] FOSDEM Companion.
https://github.com/cbeyls/fosdem-companion-
android/releases/tag/1.5.0, 2018. 5.2
[30] Ofﬂine
Calendar.
https://github.com/PrivacyApps/ofﬂine-
calendar/releases/tag/v1.8, 2018. 5.2
[31] Yousra Aafer, Xiao Zhang, and Wenliang Du. Harvesting inconsistent security
conﬁgurations in custom android roms via differential analysis. In USENIX
Security Symposium, pages 1153–1168, 2016. 7
[32] Kevin Allix, Tegawend´e F Bissyand´e, Jacques Klein, and Yves Le Traon.
Androzoo: Collecting millions of android apps for the research community.
In Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working Conference
on, pages 468–471. IEEE, 2016. 4.1, 5.2, 8
54
[33] AndroidCentral.
System Update,
Phone Died During
2013.
http://forums.androidcentral.com/htc-desire-c/265098-phone-died-during-
system-update.html. 1
[34] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. Pscout:
analyzing the android permission speciﬁcation. In Proceedings of the 2012 ACM
conference on Computer and communications security, pages 217–228. ACM, 2012.
3.3
[35] Gabriele Bavota, Mario Linares-Vasquez, Carlos Eduardo Bernal-Cardenas,
Massimiliano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. The impact
of api change-and fault-proneness on the user ratings of android apps. IEEE
Transactions on Software Engineering, 41(4):384–407, 2015. 7
[36] A. Bera. How To Fix Apps Crashing After 4.4 Kit-Kat Update Problem On
Nexus 7, 2016. http://www.technobezz.com/ﬁx-apps-crashing-4-4-kitkat-
update-problem-nexus-7/. 1
[37] Marcus Bueschleb. PassAndroid. https://github.com/ligi/PassAndroid/
tree/fcd9ba", 2018. 4.1
[38] Dave Burke.
Introducing Android 9 pie.
https://android-
developers.googleblog.com/2018/08/introducing-android-9-pie.html,
2018. 2.1
55
[39] Zach Epstein. Did Apps Just Start Crashing Constantly on Your Android
Phone?, 2015. http://bgr.com/2015/04/28/android-tips-tricks-ﬁx-crashing-
apps/. 1
[40] Mattia Fazzini and Alessandro Orso. Automated cross-platform inconsistency
In Proceedings of the 32Nd IEEE/ACM Interna-
detection for mobile apps.
tional Conference on Automated Software Engineering, ASE 2017, pages 308–318,
Piscataway, NJ, USA, 2017. IEEE Press. 7
[41] Aur´elien G´eron. Hands-on machine learning with Scikit-Learn and TensorFlow:
concepts, tools, and techniques to build intelligent systems. ” O’Reilly Media, Inc.”,
2017. 5
[42] Cyril Goutte and Eric Gaussier. A probabilistic interpretation of precision,
recall and f-score, with implication for evaluation. In European Conference on
Information Retrieval, pages 345–359. Springer, 2005. 5
[43] Dan Han, Chenlei Zhang, Xiaochao Fan, Abram Hindle, Kenny Wong, and
Eleni Stroulia. Understanding android fragmentation with topic analysis
of vendor-speciﬁc bugs. In Reverse Engineering (WCRE), 2012 19th Working
Conference on, pages 83–92. IEEE, 2012. 7
[44] Dongjie He, Lian Li, Lei Wang, Hengjie Zheng, Guangwei Li, and Jingling
Xue. Understanding and detecting evolution-induced compatibility issues in
android apps. In Proceedings of the 33rd ACM/IEEE International Conference on
Automated Software Engineering, pages 167–177. ACM, 2018. 1, 4.2.1, 7.1, 8
[45] Ville-Veikko Helppi. What Every App Developer Should Know About An-
droid. http://www.smashingmagazine.com/2014/10/02/what-every-app-
developer-should-know-about-android/, October 2014. 1
56
[46] Huaxun Huang, Lili Wei, Yepang Liu, and Shing-Chi Cheung. Understanding
and detecting callback compatibility issues for android applications. 2018. 1,
4.1, 4.1, 4.2.1, 4.2.2, 4.3, 5.1, 7.1, 7, 8
[47] Apple
breaks
new iphones with
terrible
software
update.
http://www.slate.com/blogs/
future tense/2014/09/24/apple ios 8 0 1 software update
major bugs hit iphone 6 6 plus.html, 2014. 1
[48] Maxime Lamothe and Weiyi Shang. Exploring the use of automated api
migrating techniques in practice: An experience report on android. 2018. 7
[49] Huoran Li, Xuan Lu, Xuanzhe Liu, Tao Xie, Kaigui Bian, Felix Xiaozhu Lin,
Qiaozhu Mei, and Feng Feng. Characterizing smartphone usage patterns
from millions of android users. In Proceedings of the 2015 Internet Measurement
Conference, pages 459–472. ACM, 2015. 7
[50] Li Li, Tegawend´e F Bissyand´e, Yves Le Traon, and Jacques Klein. Accessing
inaccessible android apis: An empirical study. In Software Maintenance and
Evolution (ICSME), 2016 IEEE International Conference on, pages 411–422. IEEE,
2016. 8
[51] Li Li, Tegawend´e F. Bissyand´e, Haoyu Wang, and Jacques Klein. Cid: Au-
tomating the detection of api-related compatibility issues in android apps.
In Proceedings of the 27th ACM SIGSOFT International Symposium on Software
Testing and Analysis, ISSTA 2018, pages 153–163, New York, NY, USA, 2018.
ACM. 1, 4.1, 4.2.2, 4.3, 5.1, 5.1, 7.1, 7
57
[52] Li Li, Jun Gao, Tegawend´e F Bissyand´e, Lei Ma, Xin Xia, and Jacques Klein.
Characterising deprecated android apis. In Proceedings of the 15th International
Conference on Mining Software Repositories, pages 254–264. ACM, 2018. 7
[53] Mario Linares-V´asquez, Gabriele Bavota, Carlos Bernal-C´ardenas, Massimil-
iano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. Api change and fault
proneness: a threat to the success of android apps. In Proceedings of the 2013
9th joint meeting on foundations of software engineering, pages 477–487. ACM,
2013. 7
[54] Mario Linares-V´asquez, Gabriele Bavota, Massimiliano Di Penta, Rocco
Oliveto, and Denys Poshyvanyk. How do api changes trigger stack over-
In proceedings of the 22nd
ﬂow discussions? a study on the android sdk.
International Conference on Program Comprehension, pages 83–94. ACM, 2014. 1
[55] Yepang Liu, Chang Xu, and Shing-Chi Cheung. Characterizing and detecting
In Proceedings of the 36th
performance bugs for smartphone applications.
International Conference on Software Engineering, pages 1013–1024. ACM, 2014.
7
[56] Mehran Mahmoudi and Sarah Nadi. The android update problem: an empiri-
cal study. In Proceedings of the 15th International Conference on Mining Software
Repositories, pages 220–230. ACM, 2018. 7
[57] Tyler McDonnell, Baishakhi Ray, and Miryung Kim. An empirical study of
api stability and adoption in the android ecosystem. In Software Maintenance
(ICSM), 2013 29th IEEE International Conference on, pages 70–79. IEEE, 2013. 7
[58] Michael Kassner.
Beware
of
danger
lurking
in Android
phone
updates.
http://www.techrepublic.com/article/
beware-of-danger-lurking-in-android-phone-updates/", April
1, 2.1
58
2014.
[59] Kevin Moran, Mario Linares-V´asquez, Carlos Bernal-C´ardenas, Christopher
Vendome, and Denys Poshyvanyk. Crashscope: A practical tool for automated
testing of android applications. In Software Engineering Companion (ICSE-C),
2017 IEEE/ACM 39th International Conference on, pages 15–18. IEEE, 2017. 7
[60] Suhaib Mujahid. Detecting wearable app permission mismatches: a case study
on android wear. In Proceedings of the 2017 11th Joint Meeting on Foundations of
Software Engineering, pages 1065–1067. ACM, 2017. 1
[61] Suhaib Mujahid and Emad Shihab Rabe Abdalkareem. Studying permission
related issues in android wearable apps. 1
[62] Patrick Mutchler, Yeganeh Safaei, Adam Doup´e, and John Mitchell. Target
fragmentation in android apps. In 2016 IEEE Security and Privacy Workshops
(SPW), pages 204–213. IEEE, 2016. 7
[63] Abhinav Pathak, Y Charlie Hu, and Ming Zhang. Bootstrapping energy
debugging on smartphones: a ﬁrst look at energy bugs in mobile devices. In
Proceedings of the 10th ACM Workshop on Hot Topics in Networks, page 5. ACM,
2011. 7
[64] Mehul Rajput. Tips For Solving Your Android App Crashing Issues, 2015.
http://tech.co/tips-solving-android-app-crashing-issues-2015-10. 1
[65] Mallisa Tolentino. Will These Bugs be Fixed in Android 5.1.1 Up-
date. http://siliconangle.com/blog/2015/04/24/will-these-bugs-be-ﬁxed-in-
android-5-1-1-update/, April 2015. 1
59
[66] Yutaka Tsutano, Shakthi Bachala, Witawas Srisa-An, Gregg Rothermel, and
Jackson Dinh. An efﬁcient, robust, and scalable approach for analyzing
interacting android apps. In Proceedings of the 39th International Conference on
Software Engineering, pages 324–334. IEEE Press, 2017. 3.1, 4
[67] Lili Wei, Yepang Liu, and Shing-Chi Cheung. Taming android fragmentation:
Characterizing and detecting compatibility issues for android apps. In Pro-
ceedings of the 31st IEEE/ACM International Conference on Automated Software
Engineering, pages 226–237. ACM, 2016. 1, 7, 7
[68] Daoyuan Wu, Ximing Liu, Jiayun Xu, David Lo, and Debin Gao. Measuring
the declared sdk versions and their consistency with api calls in android apps.
In International Conference on Wireless Algorithms, Systems, and Applications,
pages 678–690. Springer, 2017. 1, 3.4, 7
[69] YouTube API change:
some older devices can’t update to new
app. http://hexus.net/ce/news/audio-visual/82570-youtube-api-change-
older-devices-update-new-app/, 2014. 1
[70] Xiaoyong Zhou, Yeonjoon Lee, Nan Zhang, Muhammad Naveed, and Xi-
aoFeng Wang. The peril of fragmentation: Security hazards in android device
driver customizations. In Security and Privacy (SP), 2014 IEEE Symposium on,
pages 409–423. IEEE, 2014. 7