association activates between 
Session[*] role session 
Role[*] role role_ 
end 
Constraints 
-- Prerequisite roles  
context User inv PrerequisiteRole: 
self.role_->includes(Cashier) 
implies self.role_-> 
includes(Banking_Employee) 
-- Static SOD – Conflicting Users 
context Role inv SSOD-CU: 
let 
  CU:Set(User)=Set{Frank,Joe}, 
  CR:Set(Role)=Set{Cashier, 
in 
CU->iterate(u:User; 
      intersection(CR)->size()size() 
-- Simple Dynamic SOD 
context User inv SDSOD: 
let 
  CR:Set(Role)=Set{Customer,Cashier} 
in 
  CR->intersection(self.session->iterate( 
s:Session;  
result:Set(Role)=oclEmpty(Set(Role))| 
result->union(s.role_)))->size() 
result:Set(Role)=oclEmpty(Set(Role))| 
result->union(u.role_))->  
Cashier_Supervisor} 
                            size() 
Fig. 4. USE specification of an RBAC policy. 
context User inv PrerequisiteRole: 
self.role_->includes(_r2_) 
implies self.role_->includes(_r1_). 
instance, 
We  can  then  instantiate  this  macro  with  the  actual 
parameters  of  the  authorization  constraint  in  question. 
For 
PrereqRole(Banking_Employee, Cashier) 
will then be expanded by a macro pre-processor to the 
prerequisite role constraint displayed in Figure 4.   
4.1. Administrative RBAC functionality 
macro 
The  authorization  engine  supports  most  of  the 
functionality  demanded  by  the  ANSI  RBAC  standard 
[14],  i.e.,  it  also  contains  functionality  of  a  policy 
administration point (PAP) [15]. In particular, we have 
implemented  administrative, 
review,  and  system 
functions.  Administrative  functions  (e.g.,  AddUser, 
AssignUser)  are 
the  creation  and 
maintenance  of  the  RBAC  element  sets  and  relations. 
Review  functions  (e.g.,  UserPermissions)  can  be 
employed  to  inspect  the  results  of  the  actions  created 
by  administrative  functions.  System  functions  such  as 
CreateSession,  AddActiveRole,  and  CheckAccess  are 
required  by 
the  authorization  engine  for  session 
management and making access control decisions.  
required 
for 
the 
call                                            
such 
functions 
as  CreateSession 
The administrative RBAC functions and some of the 
are 
system 
implemented  by 
is 
responsible  for  creating  system  states  (animator).  This 
way,  system/security  states  are  built,  which  are 
employed  by  USE  (authorization  engine)  for  making 
access control decisions. 
the  USE  component  which 
In  addition,  we  use  OCL expressions to specify the 
RBAC  review  and  the  remaining  system  functions. 
Consequently, not only are the authorization constraints 
specified  in  OCL,  but  also  parts  of  the  administrative 
functionality.  For  example, 
function 
UserPermissions,  which  returns  all  the  permissions 
belonging to a user, is specified as follows in OCL: 
review 
the 
UserPermissions(u:User):Set(Permission)= 
  u.role_->iterate(r:Role; 
    result:Set(Permission)={}| 
result->union(r.permission)). 
This  OCL  specification  is  then  simply  called  by  the 
eval  method  made  available  by  the  USE  system’s 
Java API. This allows a developer to specify main parts 
of  the  authorization  engine  in  UML/OCL  and  then 
obtain an implementation semi-automatically [22]. 
4.2.   Advanced RBAC concepts 
One  of  the  important  aspects  of  the  authorization 
engine is to incorporate advanced RBAC concepts that 
are  comprised  of  various  kinds  of  authorization 
constraints. We now demonstrate that the authorization 
engine  can  deal  with  a  diverse  range  of  authorization 
constraints.  In  particular,  far  more  constraints  are 
supported  than  the  simple  SOD  constraints  of  the 
RBAC  standard  [4],  which  is  deliberately  restricted  to 
common  RBAC 
authorization 
constraints can be specified in OCL in a similar way as 
shown in Figure 4.  
concepts.  The 
4.2.1.  Authorization  constraints.  The  authorization 
engine supports various SOD constraints. One example 
has  already  been  mentioned,  namely,  SSOD-CU  (cf. 
Figure  4).  Other  constraints  are  simple  static  SOD  [4] 
or  conflicting  permissions 
[7].  The  conflicting 
permissions  constraint,  for  example,  states  that  the 
same  user  may  not  receive  the  “approve  order”  and 
“approve  audit”  permission.  We  also  realized  the 
SDSOD constraint given in Figure 4, and session-based 
dynamic  SOD  by  which  no  user  can  activate  two 
conflicting roles within a single session. 
The  authorization  engine  also  supports  cardinality 
constraints and prerequisite constraints. The cardinality 
constraints  are  instructions  of  the  form  “a  department 
has  exactly  one  chairperson”.  More  generally,  Sohr  et 
262262
al.  [22]  show  that  the  authorization  engine  can  handle 
all  the  types  of  authorization  constraints  that  can  be 
formulated  in  RCL  2000,  a  well-known  specification 
language for RBAC authorization constraints [7].  
The  implementation  of  authorization  constraints  by 
means of the USE system is done by calling the check 
method provided by the Java API of USE. Similarly to 
the implementation of the review functions (cf. Section 
4.1.),  the  constraint  is  passed  as  a  parameter  to  the 
check  method.  If  the  authorization  constraint  is 
satisfied in the current system state, the check method 
returns true, otherwise false. Hence, we obtain a simple 
implementation of authorization constraints and use the 
functionality of a general-purpose OCL validation tool 
for the evaluation of RBAC policies. This applies to all 
authorization constraints discussed in this paper, too. 
4.2.2.  History-Based  SOD.  The  authorization  engine 
also  supports  different  forms  of  History-Based  SOD. 
One  example 
is  Object-Based  Dynamic  SOD 
(ObjDSOD)  as  proposed  by  Simon  and  Zurko  [9]. 
ObjDSOD  states  that  a  user  may  act  upon  an  object 
with at most one critical operation. For example, a user 
may  only  perform  one  of  the  operations  prepare, 
approve, and sign on a check.  
In  order  to  formulate  history-based  constraints,  we 
introduce  a  further  attribute  called  accesshistory 
for  each  object.  It  represents  the  access  history  of  the 
object  in  question.  The  ObjDSOD  constraint  for  the 
check object  can be specified in OCL as follows: 
crit_ops:Set(Operation)= 
Set{prepare,approve,sign}, 
check:Object.allInstances 
context User inv ObjDSOD: 
let 
in 
check.accesshistory->forAll(t1,t2|  
(t1.u=self and t2.u=self  
and crit_ops->includes(t1.op)  
and crit_ops->includes(t2.op))  
implies t1.op=t2.op) 
->any(name=’check’) 
The  access  history  is  a  sequence  of  pairs  (user, 
critical  operation),  i.e.,  each  access  with  a  critical 
operation on a check object is logged. Moreover, note 
that  we  use  OCL’s  tuple  types  to  represent  the  access 
pairs.  Through  the  use  of  OCL  sequences  even 
ordered-dependent  history-based  SOD  constraints  [9] 
can be formulated. The aforementioned OCL constraint 
states that if a user has executed two critical operations 
on a check, both operations must be the same. 
History-based  constraints  ought  to  be  enforced  at 
runtime  when  an  operation  is  executed  on  an  object. 
Then we would have to change the history information 
after  the  operation  has  been  successfully  executed. 
However,  this  would  mean  that  we  need  a  feedback 
from  the  Application  Web  Service.  Specifically,  if  the 
Application Web Service is not reachable, that security-
relevant information will not be communicated back to 
the  PDP.  For  this  reason,  we  decided  to  enforce  those 
constraints  whenever  an  access  request  is  to  be 
checked, i.e., on calling CheckAccess. We also decided 
to store the access control history for each object in the 
security  state  (USE  system  state).  This  means  that  we 
must also update the access control history in the USE 
system whenever CheckAccess is successfully called.   
4.2.3.  Context  Constraints.  Context  constraints  [10, 
11,  13]  are  another  variation  of  authorization 
constraints, which allow organizations to restrict access 
to data or business processes according to the contexts 
such  as  location  and  time.  The  authorization  engine 
supports  context-based  permission  activation  [23]. 
Context information (like location and time) allows one 
to express a variety of authorization constraints that can 
further tighten the permission activation. We now give 
a context constraint w.r.t. location as an example: 
context User inv LocationContext: 
self.session->forAll(s|s.role_->forAll(r|
ActivePermission(s,r,p)implies   
p.o.location=self.location))). 
r.permission->forAll(p|   
a 
We 
ternary 
introduced 
association 
ActivePermission1 stating that the session s has 
activated permission p with role r. Second, we assume 
that  both  the  user  and  the  object  have  an  additional 
attribute  “location”  that  describes  the  current  location 
of the user and the object, respectively. If now a role is 
activated  in  a  session,  then  the  location  of  the 
permission  (or  more  exactly,  of  the  permission’s 
object)  must  be  the  same  as  the  location  of  the  user. 
The aforementioned context constraint is then checked 
by 
the  RBAC  system  functions 
AddActiveRole or CreateSession are called. 
5. Case studies 
the  PDP  when 
As  mentioned  above, 
the  authorization  engine 
implements  various  RBAC  policies, 
the 
authorization engine is independent of the domain. This 
will be demonstrated by two case studies, namely, from 
the  banking  and  military  domain.  We  also  employed 
our  authorization  engine  in  a  healthcare  environment, 
but  do  not  give  more  details  here  due  to  space 
i.e., 
1 Ternary associations can be expressed in OCL with association 
classes.  However,  as  we  have  done  earlier  [22],  we  again  introduce 
an additional ternary predicate to simplify the discussion.  
263263
restrictions.  Note  that  in  all  these  cases  the  RBAC 
policy  in  question  is  defined  in  a  USE  file.  This  is 
similar to the RBAC policy in Figure 4, containing the 
domain-specific  authorization  constraints.  The  USE 
system then processes this file and enforces the RBAC 
policy as sketched in Section 4.2.1. 
5.1.   SOD in a banking environment 
The  first  case  study  reflects  the  fact  that  Web 
Services  are  used  in  financial  institutes  to  integrate 
applications  [29].  In  particular,  SOD  often  occurs  in 
those  applications.  We  specifically  implemented  the 
SOD constraints shown in Figure 4 such as the SSOD-
CU constraint which prevents two colluding users to be 
assigned to the conflicting roles “Cashier” and “Cashier 
Supervisor”.  Due  to  the  fact  that  SSOD-CU  is  static, 
the constraint must be enforced at administration time. 
Whenever  the  administrative  RBAC  functions  such  as 
AssignUser are called, the authorization engine checks 
the already defined static authorization constraints. The 
other  parts  of  our  authorization  framework  (cf.  Figure 
2)  are  not  involved  in  enforcing  static  authorization 
constraints. 
Dynamic  SOD  constraints  have  been  implemented, 
too,  such  as  the  SDSOD  constraint  between  the  roles 
“Cashier” and the “Customer”. Figure 5 shows a dialog 
window  made  available  by  the  Banking  application 
client  prototype  for  activating  roles.  Here,  a  user  has 
already  activated  the  “Customer”  role.  Activating  the 
“Cashier”  role  is  forbidden  due  to  the  SDSOD 
constraint as shown in Figure 5. 
Considering our framework introduced in Section 3, 
the  following  steps  are  carried  out.  The  user  tries  to 
activate  the  “Cashier”  role  in  the  Application  Client, 
i.e., the RBAC system function AddActiveRole is called 
(cf.  Figure  2).  This  request  is  passed  from  the 
Application Client via the Access Decision Handler to 
the  authorization  engine.  The  engine  then  makes  the 
access decision based upon the current security/system 
state (in our example, the “Customer” role has already 
been  activated)  and  the  already  defined  authorization 
constraints  (SDSOD  in  our  case).  The  engine  then 
returns  the  decision  “activation forbidden” back to the 
Access  Decision  Handler,  which  communicates  the 
result to the banking application client (cf. Figure 5).  
Note  that  in  this  particular  case  the  banking 
application itself never sees the activation process. The 
role activation is actually done inside the authorization 
engine. Having activated appropriate roles, the user can 
carry  out  operations  on  the  banking  application  Web 