符(UI)来表示特定的对象（如一部电影、一个人或者一个餐馆），因
此当两个人探讨相同的事物时，所有人都可以理解。人们已经为一
1725
---
## Page 1727
组本体(otologies)进行标准化，这些本体描述了应该使用哪些字段来
描述在所有情况下的餐馆或电影这类事物。
然而，到目前为止，同意使用相同的URI来表示事物以及采用相同的
本体论来描述事物的组织在所有的免费数据库中只占了非常小的比
例，而且几乎没有覆盖任何公司的私有数据库。在很多情况下，即
使那些试着参与链接的开源数据，当前也并没有使用相同的URI来表
示显然是相同的事物。这意味着，对于像我们这样试着连接数据
集，我们将需要设计自动确定两种事物相同的方式。
同一事物的不同名字
和很多人一样，当我第一次试着连接数据集时，我想到了一个不错
的一级假设，确定两个事物相同的最佳方式是它们有相同的名字。
我甚至认为通过使用字符事距离和子事匹配就能够很有技巧地解决
像"Coca-cola"和"Thecoca-colacompany"这样的问题。这在很多情况
下适用，但是在最有意思的情况下通常失败了一—而且是你最感兴
趣的那些情况。
我在试着结合维基百科的电影数据和Netflix网站的电影数据时遇上
的一个简单的例子是《Pret-a-Porter》。维基百科用该名字来描述这
部电影（虽然实际上它是一部美国电影），但是在Netlix上，则是
用英文名字《ReadytoWear》来描述。在你认为我们应该先把名字
翻译成英语，再进行字符事比较时，首先应该注意的一点是存在很
多电影，同一个语言有多个名称，如《B.U.S.T.E.D.》和《Everybody
LovesSunshine》，或者《PointofNoReturn》和《TheAssassin》
-这些电影或者是在不同国家有不同的名字或者包含和发布标题
不同的工作标题。
因此，如果我们不依赖于搜索相似的字符串，我们如何匹配电影？
原则很简单，而细节却非常困难（是很多个人和学术研究的主
题）。举个例子，我们有两部电影，都是在1994年发布的，都是由
RobertAltman导演，JuliaRoberts和SophiaLauren主演：它们有可能
会是不同的电影吗？正如实际情况所示，只有一部电影满足这些特
征，因此包含这些属性的任何电影——不考虑它的名字——一定是
相同的电影。在本章后面我将探讨在实践中是如何发现这一点。
顺便说一下，字符事距离匹配很不适合电影匹配。《Ghostbusters》
和《Ghostbusters2》是非常相似的字符串，但是它们是两部不同的
电影，你可以很容易发现一部在1984年上映而另一部在1989年上
1726
---
## Page 1728
映。甚至无法假定电影标题后面的数字表示的是一系列电影
《The Madness of George IM》和《The Madness ofKing George》实际
上指的是同一部电影。
同一名字的不同事物
没有意识到两种事物实际上相同通常会造成很多麻烦，生成一些副
本，必要的话可以在事后解决。更严重的后果是由于两个不同事物
地确定它们是相同的事物。这种方式更危险的原因是一旦数据库中
的事物不正确地合并在一起，在不需要太多人工介入的情况下，我
们就没有很简单的方式来解决掉这些问题。
√一是中其（料草累加专岁√县（国美）雪五
城镇有沃尔玛。至少有四本书的名字为《CityofGod》。至少有50个
名叫“JohnSmith"的人有足够的知名度出现在维基百科上。抛开考虑
错误的飞行黑名单，即使两个事物具有相同的名字，很显然也不足
以证明它们是相同的，尤其对于人们的名字而言。虽然对于人来
说，存在唯一关键字，如在美国是社会保险号码，但是这些信息八
乎从来不会出现在公众可访问的数据库上；对人的唯一识别符通常
需要某种程度的保护。
除了在非常封闭的集合（比如国家名字）或者是非常罕见的名字
（我想到了“TobySegaran"），强烈建议不要仅仅基于名字来合并事
物，应该使用额外的信息来设计算法，以便确定两条不同的记录确
实是同一个事物。
我觉得必须指出已经付出很多努力来为某些特定事物创建经典的标
识符，但是这些标识符由于隐私问题从未被成功地应用于人。在美
国，我们有社会保险号码，很多政府部门和信誉机构用它来追踪我
们，但是人们告诉我们不应该把这些信息和别人分享，因此我们当
然不会把它放到公共数据库中以防别人可以更容易地把他们的数据
和我们的数据链接起来。因此，我们永远都处于几十亿的人们有相
似的名字而没有办法识别出他们。
可能的解决方案
在通常情况下，能够意识到这是一个悬而未解的问题很重要，人们
尝试了一些在某些特定情况下可以工作的想法。这些方法，有的是
1727
---
## Page 1729
个“死胡同”，但是有的当继续发展时，看起来像是可以在广泛的数
据集上工作。
匹配多个字段
在第7章中，JefJonas描述了一个假设的场景，可以通过结合名字和
地址，发现某个员工是个小偷。在那种情况下，名字和地址的组合
足以表明两种不同的记录实际上表示同一个人。Jef可以很快地指出
同的地址，而且都包含“PatSmith"，因此如果你不注意，很容易陷入
其他很明显的规则的迷营中。
这说明了在数据集中匹配数据项时可用的最基本常见的方式：选择
一组参数，创建一组固定的规则来告诉你事物间是否匹配。举个例
子，“两个人是否有相同的名字和地址？”或者“两部电影是否有相同
的名字并且是在同一年发布的？”
这种方法在很多情况下都适用，但是它存在一些缺点。首先，它需
要开发人员识别字段和匹配规则。这种方式可能会非常乏味，因为
当他们发现根据基本的名字/发布年份规则，《Pret-a-Porter》和
《ReadytoWear》不匹配时，他们需要发明另一种规则，如“两部电
影在同一年发布，导演相同，而且至少有一个演员相同。”
另一个问题是它需要这些字段本身具有很高的一致性。如果我们没
有演员的全名怎么办呢？如果在其中一个数据库丢失了某些电影的
年份信息，那文该如何处理？最后，因为我们是选择特定的字段，
然后生成平面记录，这种方式并没有充分利用全部网络的数据
全网数据潜在地可能为我们提供更多关于身份的信息。
集体调解
我相信充分利用全网数据是解决匹配问题的关键。这种思想体现在
称为"集体调解"(cllectivereconciliation)或“集体实体决议"(cllective
entityresolution)。有关这方面的详细讨论，我建议阅读Indrajit
Bhattacharya的博士论文，你可以在
http：//www.lib.umd.edu/drum/handle/1903/4241获取该论文。
在本节中，我将从高层次介绍集体调解的涵义。这些算法的实现细
节根据你所处理的特定类型的数据会有很大区别，而且超出了本章
1728
---
## Page 1730
的讨论范围，但是我希望一个高层次的概要会帮助你去试验以及使
你阅读别人在该主题上所做的工作会更容易。
首先，考虑如下情况，我们有两个电影数据集，两个数据集包含的
信息略有不同。从这两个数据集抽取两份数据片段并进行图形化表
示，如图20-5所示。我们已经确定仅仅基于名字进行匹配是不明智
的，因此我们无法仅仅通过名字来确定两个对象是一样的。但是，
我们相信图A中的节点node10和图B中的节点node22可能是一样的，
因为它们的名字都是“JuliaRoberts”，图A中的节点node12和图B中的
节点node27可能是一致的，因为它们都是命名为“ReadytoWear”。
技巧在于我们在两个图中的数据项有潜在的匹配，而且这些数据项
的"ReadytoWear"之间有连接。这条连接为这二者的匹配提供了更多
的证据。这种匹配关系是否是最终结论取决于很多可能性假设，如
有多个名叫JuliaRoberts的女主角在名为《ReadytoWear》的电影
中，但是在该案例情况下，我们可以认为这些关联匹配是正确的。
这些关联的实现方式有很多区别，但是主流技术称为“消息传递”
(mssage-passing)。通常，图A中的节点node12知道它可能和图B中的
节点node27一样，查看图B中的所有连接，它给图A中的邻居节点发
送了消息。连接所有演员的消息可能是“你可能和节点node22或节点
node25一样”。而节点node10接收到这条消息后，意识到“实际上，我
已经认为我可能和节点node22一样”。同理，节点node10告诉节点
node12它可能的所有电影。图20-6显示了可能的过程。
你很可能明白了为什么这被称为“集体调解”，而不是拼合记录，我
们实际上是想要一次性把所有东西都归并起来，而且节点之间可以
互相提供信息是否需要归并。当然，这只是一个很小的例子，但是
考虑一下图20-7所示的更复杂的一项。
1729
---
## Page 1731
GraphA
node10
name:Julia Roberts
actor
node12
name:ReadytoWear
actor
director
name:Sophia Loren
name:RobertAltman
GraphB
node29
name:Sophia Loren
actor
node27
name:Ready toWear
year:1994
actor
node22
name:Julia Roberts
图20-5：两个不同的电影数据集的数据片段
在该图中，名字为"ReadytoWear"的节点并不匹配，而且我们甚至没
有一个节点命名为nodel0！我们如何知道它是JuliaRoberts？但是，
我们已经稍微扩展了网络范围，包含一些其他JuliaRoberts为明星的
电影，幸运的是，“消息传递"机制可以通过很多选代来完成。可能
你明白了“消息传递"算法的作用？以下是基本的思想：
1730
---
## Page 1732
GraphA
node10
name:Julia Roberts
(mightbenode22)
node29
node27
actor
or
node22
node12
name:ReadytoWear
node29
(mightbenode27)
or
node22
actor
director
node27
node19