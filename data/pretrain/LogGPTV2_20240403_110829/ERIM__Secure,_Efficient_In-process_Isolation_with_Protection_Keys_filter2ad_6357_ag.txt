Figure 3c shows the throughput of NGINX running with
lwCs and emulated ERIM, relative to a baseline without any
protection. With lwCs, the throughput is never above 80%
of the baseline, and for small ﬁles, where the switch rate is
high, the throughput is below 50%. In contrast, the through-
put with emulated ERIM is within 95% of the baseline for all
ﬁle sizes. In terms of switch rates, lwCs incur a cost of 10.5-
18.3% for 100,000 switches/s across different ﬁle sizes. Ac-
tual ERIM’s switch overhead during the similar experiment
of Section 6.2 is no more than 0.44% across all ﬁle sizes,
which is two orders of magnitude lower than that of lwCs.
Memory safety (WebAssembly) Finally, we compare
ERIM’s overheads to those of full memory safety on un-
trusted code. Speciﬁcally, we compare to compilation of
untrusted code through WebAssembly [21], a memory-safe,
low-level language that is now supported natively by all ma-
jor web browsers and expected to replace existing SFI tech-
niques like Native Client in the Chrome web browser. We
compare to ERIM using the experiment of Section 6.3. We
re-compile the (untrusted) SQLite library to WebAssembly
via emscripten v1.37.37’s WebAssembly backend [5], and
run the WebAssembly within Node.js, which supports the
language. Accross tests of Table 5, the overhead of using
WebAssembly varies from 81% to 193%, which is one to
two orders of magnitude higher than ERIM’s overhead.
Emulating ERIM’s switch cost We describe how we em-
ulate ERIM’s switch cost when comparing to VMFUNC and
lwCs above. Speciﬁcally, we need to emulate the cost of a
WRPKRU instruction, which isn’t natively supported in the
environments of those experiments. We do this using xor in-
structions to consume the appropriate number of CPU cycles,
followed by RDTSCP, which causes a pipeline stall and pre-
vents instruction re-ordering. Speciﬁcally, we execute a loop
ﬁve times, with xor eax,ecx; xor ecx,eax; xor
eax,ecx, followed by a single RDTSCP after the loop.
To validate the emulation we re-ran the SPEC CPU 2006
benchmark with CPI/CPS (Section 6.4) after swapping ac-
tual WRPKRU instructions with the emulation sequence
shown above and compared the resulting overheads. In each
individual test, the difference in overhead between actual
ERIM and the emulation is below 2%. We note that a per-
fectly precise emulation is impossible since emulation can-
not exactly reproduce the effects of WRPKRU on the exe-
cution pipeline. (WRPKRU must prevent the reordering of
loads and stores with respect to itself.) Depending on the
speciﬁc benchmark, our emulation slightly over- or under-
estimates the actual performance impact of WRPKRU. We
also observed that emulations of WRPKRU using LFENCE
or MFENCE (the latter was suggested by [30]) in place of
RDTSCP incur too little or too much overhead, respectively.
7 Conclusion
Relying on the recent Intel MPK ISA extension and simple
binary inspection, ERIM provides hardware-enforced isola-
tion with an overhead of less than 1% for every 100,000
switches/s between components on current Intel CPUs,
and almost no overhead on execution within a component.
ERIM’s switch cost is up to two orders of magnitude lower
than that of kernel page-table based isolation, and up to
3-5x lower than that of VMFUNC-based isolation. For
VMFUNC, virtualization can cause additional overhead on
syscalls and page table walks. ERIM’s overall overhead
is lower than that of isolation based on memory-bounds
checks (with Intel MPX), even at switch rates of the order
of 106/s. Additionally, such techniques require control-ﬂow
integrity to provide strong security, which has its own over-
head. ERIM’s comparative advantage prominently stands
out on applications that switch very rapidly and spend a non-
trivial fraction of time in untrusted code.
Acknowledgements We thank the anonymous reviewers,
our shepherd Tom Ritter, Bobby Bhattacharjee, and Mathias
Payer for their feedback, which helped improve this paper.
This work was supported in part by the European Research
Council (ERC Synergy imPACT 610150) and the German
Science Foundation (DFG CRC 1223).
References
[1] https://www.sqlite.org.
[2] https://nodejs.org.
[3] https://httpd.apache.org/docs/2.4/
programs/ab.html.
[4] https://www.sqlite.org/testing.html.
[5] https://github.com/kripken/
emscripten.
[6] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay
Ligatti. Control-ﬂow integrity. In Proceedings of ACM
SIGSAC Conference on Computer and Communica-
tions Security (CCS), 2005.
[7] ARM Limited. Developer guide: ARM memory do-
mains. http://infocenter.arm.com/help/,
2001.
[8] ARM Limited. ARM Security Technology. http://
infocenter.arm.com/help/topic/
com.arm.doc.prd29-genc-009492c/
PRD29-GENC-009492C_trustzone_
security_whitepaper.pdf, 2009.
[9] Adam Belay, Andrea Bittau, Ali Mashtizadeh, David
Terei, David Mezières, and Christos Kozyrakis. Dune:
1236    28th USENIX Security Symposium
USENIX Association
Safe user-level access to privileged CPU features. In
Proceedings of USENIX Symposium on Operating Sys-
tems Design and Implementation (OSDI), 2012.
[10] Andrea Bittau and Petr Marchenko. Wedge: Splitting
applications into reduced-privilege compartments.
In
Proceedings of Networked System Design and Imple-
mentation (NSDI), 2008.
[11] Nathan Burow, Xinping Zhang, and Mathias Payer.
SoK: Shining Light On Shadow Stacks.
In Proceed-
ings of IEEE Symposium on Security and Privacy (Oak-
land), 2019.
[12] Scott A. Carr and Mathias Payer. Datashield: Conﬁg-
urable data conﬁdentiality and integrity. In Proceedings
of ACM ASIA Conference on Computer and Communi-
cations Security (AsiaCCS), 2017.
[13] Yaohui
Chen,
Sebassujeen
Reymondjohnson,
Fine-
Zhichuang Sun, and Long Lu.
Grained Execution Units with Private Memory.
In
Proceedings of IEEE Symposium on Security and
Privacy (Oakland), 2016.
Shreds:
[14] Nathan Dautenhahn, Theodoros Kasampalis, Will Di-
etz, John Criswell, and Vikram Adve. Nested kernel:
An operating system architecture for intra-kernel priv-
ilege separation. In Proceedings of ACM Conference
on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2015.
[15] Dyninst. Dyninst: An application program interface
(API) for runtime code generation. http://www.
dyninst.org.
[16] Isaac Evans, Sam Fingeret, Julian Gonzalez, Ulziiba-
yar Otgonbaatar, Tiffany Tang, Howard Shrobe, Ste-
lios Sidiroglou-Douskos, Martin Rinard, and Hamed
Okhravi. Missing the point(er): On the effectiveness
of code pointer integrity. In Proceedings of IEEE Sym-
posium on Security and Privacy (Oakland), 2015.
[17] Tommaso Frassetto, David Gens, Christopher
JITGuard:
Liebchen, and Ahmad-Reza Sadeghi.
Hardening just-in-time compilers with SGX.
In Pro-
ceedings of ACM SIGSAC Conference on Computer
and Communications Security (CCS), 2017.
[18] Tommaso Frassetto, Patrick Jauernig, Christopher
IMIX: In-
In Proceedings
Liebchen, and Ahmad-Reza Sadeghi.
process memory isolation extension.
of USENIX Security Symposium, 2018.
[19] Enes Göktas, Robert Gawlik, Benjamin Kollenda,
Elias Athanasopoulos, Georgios Portokalidis, Cristiano
Giuffrida, and Herbert Bos. Undermining Information
Hiding (and What to Do about It). In Proceedings of
USENIX Security Symposium, 2016.
[20] Le Guan, Jingqiang Lin, Bo Luo, Jiwu Jing, and Jing
Wang. Protecting private keys against memory disclo-
sure attacks using hardware transactional memory. In
Proceedings of IEEE Symposium on Security and Pri-
vacy (Oakland), 2015.
[21] Andreas Haas, Andreas Rossberg, Derek L. Schuff,
Ben L. Titzer, Michael Holman, Dan Gohman, Luke
Wagner, Alon Zakai, and J. F. Bastien. Bringing the
web up to speed with WebAssembly. In Proceedings
of ACM SIGPLAN Conference on Programming Lan-
guage Design and Implementation (PLDI), 2017.
[22] Mohammad Hedayati, Spyridoula Gravani, Ethan
Johnson, John Criswell, Michael Scott, Kai Shen, and
Mike Marty. Hodor: Intra-Process Isolation for High-
Throughput Data Plane Libraries.
In Proceedings of
USENIX Annual Technical Conference (ATC), 2019.
[23] Andrei Homescu, Stefan Brunthaler, Per Larsen, and
Michael Franz.
librando: Transparent Code Random-
ization for Just-in-Time Compilers. In Proceedings of
ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS), 2013.
[24] Terry Ching-Hsiang Hsu, Kevin Hoffman, Patrick Eug-
ster, and Mathias Payer. Enforcing least privilege mem-
ory views for multithreaded applications. In Proceed-
ings of ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2016.
[25] Ralf Hund, Carsten Willems, and Thorsten Holz. Prac-
tical timing side channel attacks against kernel space
ASLR. In Proceedings of IEEE Symposium on Secu-
rity and Privacy (Oakland), 2013.
[26] Intel Corporation. Memory Protection Extensions
(Intel MPX). https://software.intel.com/
en-us/isa-extensions/intel-mpx.
[27] Intel Corporation. Software Guard Extensions Pro-
https://software.
gramming Reference.
intel.com/sites/default/files/
managed/48/88/329298-002.pdf, 2014.
[28] Intel Corporation. Intel(R) 64 and IA-32 Architectures
https://
Software Developer’s Manual, 2016.
software.intel.com/en-us/articles/
intel-sdm.
[29] Kernel.org.
SECure COMPuting with
ﬁl-
https://www.kernel.org/doc/
ters.
Documentation/prctl/seccomp_filter.
txt, 2017.
[30] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuf-
frida, and Elias Athanasopoulos. No Need to Hide:
Protecting Safe Regions on Commodity Hardware. In
USENIX Association
28th USENIX Security Symposium    1237
Proceedings of ACM European Conference on Com-
puter Systems (EuroSys), 2017.
[31] Volodymyr Kuznetsov, László Szekeres, and Math-
ias Payer. Code-pointer integrity.
In Proceedings of
USENIX Symposium on Operating Systems Design and
Implementation (OSDI), 2014.
[32] Hojoon Lee, Chihyun Song, and Brent Byunghoon
Kang. Lord of the x86 rings: A portable user mode
privilege separation architecture on x86. In Proceed-
ings of ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2018.
[33] James Litton, Anjo Vahldiek-Oberwagner, Eslam El-
nikety, Deepak Garg, Bobby Bhattacharjee, and Peter
Druschel. Light-Weight Contexts: An OS Abstraction
for Safety and Performance. In Proceedings of USENIX
Symposium on Operating Systems Design and Imple-
mentation (OSDI), 2016.
[34] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and
Yubin Xia. Thwarting Memory Disclosure with Efﬁ-
cient Hypervisor-enforced Intra-domain Isolation.
In
Proceedings of ACM SIGSAC Conference on Computer
and Communications Security (CCS), 2015.
[35] Kangjie Lu, Chengyu Song, Byoungyoung Lee, Si-
mon P. Chung, Taesoo Kim, and Wenke Lee. ASLR-
Guard: Stopping Address Space Leakage for Code
Reuse Attacks. In Proceedings of ACM SIGSAC Con-
ference on Computer and Communications Security
(CCS), 2015.
[36] Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei
Zhou, Anupam Datta, Virgil Gligor, and Adrian Perrig.
Trustvisor: Efﬁcient TCB reduction and attestation. In
Proceedings of IEEE Symposium on Security and Pri-
vacy (Oakland), 2010.
[37] MITRE. CVE-2014-0160. https://nvd.nist.
gov/vuln/detail/CVE-2014-0160, 2014.
[38] Lucian Mogosanu, Ashay Rane, and Nathan Dauten-
hahn. MicroStache: A Lightweight Execution Context
for In-Process Safe Region Isolation. In Proceedings
of International Symposium on Research in Attacks, In-
trusions, and Defenses (RAID), 2018.
[39] Angelos Oikonomopoulos, Elias Athanasopoulos, Her-
bert Bos, and Cristiano Giuffrida. Poking Holes in In-
formation Hiding. In Proceedings of USENIX Security
Symposium, 2016.
ference on Measurement and Analysis of Computing
Systems (ACM Sigmetrics), 2018.
[41] Soyeon Park, Sangho Lee, Wen Xu, Hyungon Moon,
and Taesoo Kim. libmpk: Software abstraction for Intel
Memory Protection Keys (Intel MPK). In Proceedings
of USENIX Annual Technical Conference (ATC), 2019.
[42] David Sehr, Robert Muth, Cliff Bifﬂe, Victor Khi-
menko, Egor Pasko, Karl Schimpf, Bennet Yee, and
Brad Chen.
isolation to
contemporary CPU architectures.
In Proceedings of
USENIX Security Symposium, 2010.
Adapting software fault
[43] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin
Goh, Nagendra Modadugu, and Dan Boneh. On the
effectiveness of address-space randomization. In Pro-
ceedings of ACM SIGSAC Conference on Computer
and Communications Security (CCS), 2004.
[44] Monirul I. Sharif, Wenke Lee, Weidong Cui, and An-
drea Lanzi. Secure in-VM monitoring using hard-
ware virtualization. In Proceedings of ACM SIGSAC
Conference on Computer and Communications Secu-
rity (CCS), 2009.
[45] Lei Shi, Yuming Wu, Yubin Xia, Nathan Dautenhahn,
Haibo Chen, Binyu Zang, Haibing Guan, and Jinming
Li. Deconstructing Xen.
In Proceedings of Network
and Distributed System Security Symposium (NDSS),
2017.
[46] The Clang Team. Clang 5 documentation: Safes-
http://clang.llvm.org/docs/
tack.
SafeStack.html, 2017.
[47] Robert Wahbe, Steven Lucco, Thomas E. Anderson,
and Susan L. Graham. Efﬁcient software-based fault
isolation. In Proceedings of ACM Symposium on Oper-
ating Systems Principles (SOSP), 1993.
[48] Wikimedia Foundation.
Static HTML dump.
http://dumps.wikimedia.org/, 2008.
[49] Wikimedia Foundation.
Page view statistics April
http://dumps.wikimedia.org/
2012.
other/pagecounts-raw/2012/2012-04/,
2012.
[40] Oleksii Oleksenko, Dmitrii Kuvaiskii, Pramod Bhato-
tia, Pascal Felber, and Christof Fetzer. Intel MPX Ex-
plained: A Cross-layer Analysis of the Intel MPX Sys-
tem Stack. In Proceedings of ACM SIGMETRICS Con-
[50] Chris Wright, Crispin Cowan, Stephen Smalley, James
Morris, and Greg Kroah-Hartman. Linux security mod-
ules: General security support for the linux kernel. In
Proceedings of USENIX Security Symposium, 2002.
1238    28th USENIX Security Symposium
USENIX Association