dprotectorandroidsne
eneslsadprotector.
Console (v2.3.2)
图3.21
3.5枚举已安装的包（package）
drozerAgent已经安装好了，你也已经能够使用drozer console了。现在你可以使
用一些drozer模块，真正地开始做些与设备安全相关的工作了。
下面这个实验通过执行一些新奇的任务，比如枚举已安装的包，根据包名对它
72
---
## Page 91
第3章Android安全评估工具
们进行过滤等，详述了drozer框架的基本用法。
怎么做
装好drozer框架，把它运行起来之后，你一定跃跃欲试地打算在你的android设
备中要弄一番。你或许想要列出设备中所有已安装的包。这时，你可以在你的drozer
console 中执行下面这条命令：
dz> run app ·package .1ist
你应该能看到类似图3.22中给出的东西一条一条地出现在你的屏幕上。
ge.list
SARS eFILING)
and.za.g(v.drrs.efys1ng)
obc.moble.news.ww（BBCNeus)
Reader
图 3.22
工作原理
让我们研究一下drozer的源码，看它究竞是怎样使用包管理器（packagemanager）
API，获取这些有用的信息的。我将在介绍大多数模块后，对代码进行解释。这样你
就能了解drozer究竞是怎么工作的。在这一章的最后，还会请你亲自动手写一个自
己的drozer模块！毕竞，这才是“框架”的真正含义一可以让你编写自己的模块和
插件。
非Python用户/程序员请注意了！你可能需要一些关于Python的基本知识才能读
懂这些源代码。不过Python的语法是很漂亮的一即使你从来没写过Python代码，
你也能相当轻松地跟上我的节奏。drozer设计中的另一个优点在于：它们基本上是
镜像了Android 的 Java API，Android的开发者能够轻易上手drozer 模块的编写。所
以，总的来说，你现在不必冲出去买一本Python 方面的专著。即使你以前没写过
①指 drozer 中的 APl.—译者注
73
---
## Page 92
Android安全攻防实战
Android app，跟上教学节奏也是很容易的。好吧，扯的太多了—我们来看代码！
下面这些代码可以在：htps:/github.com/mwrlabs/drozer/blob/
master/src/drozer/modules/app/packagc.py 下载到,( 第 99 行至 121
行）
def add_arguments (self, parser) :
parser,add_argument (*-a*, "--package", default=None, help=*the
identifler of the package to Inspect*)
parser,add_argument (*d*, *-defines-permission*, default=None,
help=*filter by the permissions a package defines*)
parser,add_argument (*-f*, "--fi1ter", default=None,
(_suoTatpuoo xeatTg p3o/ox,=dreq
parser, add_argument (*g*, *-=gid*, default=None, help=*fi1ter
packages by GID*)
parser,add_argument (“-p*, "--permission*, default=ione,
help=*permission filter conditions*)
parser,add_argument (*-u*, "--uid", default=None, help=*fi1ter
packages by UID*)
def execute (self, arguments) :
If arguments.package *= None:
for package in self-packageManager () •getPackages
(common, PackageManager . GET_PERMISSIONS 1
common . PackageManager , GET_CONFIGURATIONS 1
common PackageManager , GET_GIDS |
common. PackageManager , GET_SHARED_LIBRARY_FILES) :
self._get_package (arguments, package)
e1se1
0gue6exoeaqe6* () xabeuege6eyoed*gt9s = 06eoed
(arguments -package, common, PackageManager.GBT_PERMISSIONs 1
common . PackageManager -GET_CONFIGURATIONS
common . PackageManager ,GET_SHARSD_LIBRARY_FILES)
self.__get_package (arguments, package)
def get_completion_suggestions (self, action, text, **xwargs) :
1f action.dest == *permission":
return android,permissions
def get_package (self, arguments, package) :
74
---
## Page 93
第3章Android安全评估工具
无论何时，只要你在drozer console中使用app.activity.info模块，就会调用executeO
方法。它实质上就是模块去完成真正艰苦工作的入口点。
我们看到它调用了包管理器中的 APIself.packageManager(.getPackages(…)。
这个函数会返回一个带有各个包的权限、配置、GID，以及共享库的所有包对象的列
表（list）。这个脚本再会对列表中的每个对象调用一次self_get_packageO函数，把
它打印到drozer console的屏幕上。如果有某些包支持命令行参数，也会把这个过程
一样再进行一遍。
如果你想下载这段代码，你可以直接去drozer的官方GitHub代码库中下载。只
要你的Google能力强，这也不算是什么难事。不过，为了让你活的更滋润些，我已
经在这个实验的“拓展阅读”一节中给出了代码仓库的URL。
进一步说明.
“dz> run app.package.list”这条命令是对 Android 包管理 API 的封装。正是因为
有了它，你就能做的一件很酷的事—根据app 的名称，过滤app，比如下面这条命
令。
[g dde]g-sttefexoed dde unx  run app ·package.info -a [包名]
下面是个例子，如图3.23所示。
aeswouq proupue'uoo e- ogur efexoed dde umz  run app ·package .info -a com.google .android.gsf
上面这条命令将会产生如图3.24所示的输出。
dz>run
app.package.info
package con.google,
UID:
Shared
server.o
c2dn.perkiss1on.
PrRSS1On.XM_ENDPOINT_BROADCAST
pereisston.
ACCESS CAOHE FTLES
DONNLOADMANACER_ADVANCED
ACCESS
ACCESS.
NETNCFK_STATE
AUTHENTICATE_ACCOUNTS
NIFI_STATE
BAOKUP
oernission.
BROADCAST_STIOKY
pernission.
pernission.
IFI_STATE
K_STATE
图 3.24
①这个“应用程序”应该就是指存放native code的.so 文件，根据译者序中表明的术语翻译原则这
样译。
77
---
## Page 96
Android安全攻防实战
你能用app.package.info 模块做的另一件很酷的事是：根据包的权限寻找包。下
面这条命令能让你完成这一操作。
[h]d oguy ofeped·dde umx run app -package. info -p android.permission.INrEROET
为什么这玩儿很酷呢？因为你可能会想要知道都有哪些app拥有某一组危险权
限。我是说，你能不能搞清你的设备上有多少个拥有“INTERNET”权限（或者其他
危险的权限）的app呢？不行吗？够漂亮吧！
拓展阅读
° drozer 的 GitHub 代码仓库位于 https://github.com/mwrlabs/drozcr。
°drozer 模块 “package.py" 位于 : https:/github.com/mwrlabs/drozer/blob/master/
src/ drozer/modules/app/package.py 
3.6枚举activity
Drozer还提供了一个很有用的模块，它能枚举目标Android设备中可用的activity
组件的相关信息。下面这个实验演示了这个模块的用法。
怎么做·.
有时，你可能会想要找出设备上都安装了和导出了哪些activity。drozer框架使
这个任务变得相当简单。下面是怎么做。
在你的 drozer console中输入下面这条命令。
dz> run app activity .info
这条命令将列出你的设备上所有导出的 activity。
进一步说明
你或许想要知道更多设备中各个activity 的相关信息，例如列出所有叫某个名字
的，或者名字中含有某个字符串（比如“browser”或者“facebook"）的app：哪些
app拥有哪些权限：甚至寻找那些未导出的activity。下面我来告诉你该怎么做。
执行下面这条命令，根据名字搜索activity。
78
---
## Page 97
第3章Android安全评估工具
dz> run app activity info -filter [activity 名]
这条命令会列出所有名称中含有[activity名]的activity，比如下面这个例子。
dz> run app.activity.info --filter facebook
就像所有UNIX风格或Linux风格的命令一样，这个参数也有一个简写。
dz> run app.activity.info -f facebook
上面这条命令将会产生类似图3.25这张截图的输出。
up-spl.ashsc reen ,Node
tivIty
UriHandLer
sission: com.faco
t.actlvs
UVAL
activities.Loadingt
coe.huffingtorgost.androd.share.Facel
oookPostActivity
图 3.25
你也可以指定你想要检查哪个包中的activity。
搜索指定包中的activity的命令格式如下。
[g afexoed] abexoed-- oguy Aqtayqoe dde unz  run app.activity info -a com.android.phon
79