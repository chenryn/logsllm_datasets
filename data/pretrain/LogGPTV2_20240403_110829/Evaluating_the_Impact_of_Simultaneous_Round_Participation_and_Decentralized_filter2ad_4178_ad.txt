 60
 55
 50
 45
 40
 35
 30
 25
]
t
u
[
e
m
i
t
n
o
i
t
u
c
e
x
e
s
u
s
n
e
s
n
o
C
 0
 5
 10
 20
Probability of wrong suspicions [%]
Figure 4. Comparison between the best con-
ﬁguration (w = x = n) and the baseline con-
ﬁguration (w = 1, x = 2).
5 Related Work
Previous studies on the performance of consensus proto-
cols following a quantitative approach and using temporal
metrics have been done [6, 17, 18, 12]. They analyzed the
impact of external and internal factors on the performance
of the protocols. While external factors are related to the
characteristics of the execution environment, such as the
conﬁguration of the failure detection service, the internal
factors concern characteristics of the protocol itself.
The impact of failures as well as the QoS of the failure
detection service on the performance of CT-consensus have
been studied in [6]. By simulating and measuring an imple-
mentation of the protocol, the authors analyzed the consen-
sus behavior in faultloads characterized by i) no failures and
no wrong suspicions; ii) no failures, with wrong suspicions
and ii) failures, without wrong suspicions. The work of [17]
take into account similar faultloads, but in the context of a
consensus embedded in atomic broadcast protocols. More-
over, it compares the performance of consensus protocols
(a) 1st-smallest
(b) 3rd-smallest
(c) 5th-smallest
Figure 3. Percentual performance results
(compared to the baseline conﬁguration) for
different values for x when w = n.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007that use failure detectors of different classes. In both works,
the implementation of the failure detector does not generate
any contention and its behavior is driven by some QoS met-
rics. Both studies conclude that the impact of wrong suspi-
cions and failures on the performance of the protocols were
negative. The studies conducted in this paper have attained
the same results as [6] and [17] concerning the negative im-
pact of wrong suspicions on the consensus protocol. Differ-
ently from these works, we did not consider a scenario with
crashes. Since these are not frequent in practice, the inter-
est on their evaluation is only recommended when a too bad
performance degradation is expected for these cases, which
is not the case [17]. The interesting aspect of our exper-
iments is that they adopt an implementation of a speciﬁc
failure detector which generates an amount of contention.
The impact of the characteristics of the protocol itself on
its performance has not been so much explored in the liter-
ature. The work of [12] proposes an adaptive solution for
consensus protocols based on process ordering. Signiﬁcant
performance gains can be obtained when using such a solu-
tion in heterogeneous systems. In this work, we investigate
how the performance of the HMMR-consensus is impacted
by the values of its two adaptive parameters x and w. By
tuning these parameters it is possible to change the decision
pattern from (almost) centralized (w = 1, x = 2) up to
completely decentralized (w = 1, x = n).
In [18] the performance of consensus protocols is an-
alyzed by considering the two extreme decision patterns:
centralized and fully decentralized, adopted respectively by
protocols CT-consensus [2] and MR-consensus [11]. More
precisely, it studies the latency of a total order broadcast
service implemented on top of these consensus. In this way,
the performance measures obtained in that work cannot be
directly compared with ours as the notion of throughput it
uses does not appear in our work: we assume that a new
consensus is launched every 1, 000ut. Moreover, while
the baseline conﬁguration can be considered as a slightly
optimization of the classical CT-consensus (evaluated in
both works), the conﬁguration (w = 1, x = n) does not
correspond to the MR-consensus. Despite all these dif-
ferences, the results we obtained for the baseline conﬁgu-
ration (see Section 4.2.1) corroborate with the conclusion
of [18] which indicates that “the centralized algorithm per-
forms better in some environments in spite of the fact that
the decentralized algorithm ﬁnishes in fewer communica-
tion steps”. Moreover, due to contention reasons, the gain
(when it exists) is not very signiﬁcant.
Our work extends the one by Urb´an and Schiper [18] in
two directions: i) it analyzes intermediate values of x and
ii) it considers the impact of the additional parameter w. To
the best of our knowledge, our work is the ﬁrst one to in-
vestigate the practical interests of using simultaneous round
participation, represented by w. The performance results
show that a window of size n allows to reduce signiﬁcantly
the latency and to entirely mask the impact of a bad QoS of
the failure detector. In the related literature, the excessive
attention paid to the ﬁrst parameter x is mainly due to the
fact that an analysis of the number of communication steps
leads to predict a gain when considering this parameter. On
the contrary, the lack of interest with regard to the second
parameter w is partially due to the fact that no analysis re-
garding the interest of this parameter has been conducted at
all. In fact, any analysis in terms of number of rounds and/or
number of communication steps appears to be inappropriate
when a process can participate to several consecutive rounds
at the same time.
In [10], the authors propose a hybrid approach to ana-
lyze the performance of indulgent protocols by means of
a generic framework called GIRAF. In most round-based
computation models, rounds are communication-closed: a
message can only be consumed in the round in which it is
sent. As this requirement is not mandatory in the approach
proposed in [10], it could be interesting to check if the re-
sults that we have obtained by simulation (and in particular
the great interest of using a window mechanism) can also
be corroborated by an analysis based on the GIRAF frame-
work.
An important decision when conducting a performance
study regards the choice of the metric. When analyz-
ing consensus protocols, the ﬁrst decision time is largely
used [6, 14, 12, 17]. Other metrics can be of some inter-
est according to the requirements of the application which
uses the consensus protocol, as, for example, the last deci-
sion time [17]. The performance of the HMMR-consensus
was analyzed by means of the kth-smallest decision time.
By setting k to {1, f + 1, n}, we estimated the ﬁrst, last
and f + 1 smallest consensus decision times. The results
obtained showed that the judicious combination of the si-
multaneous round execution (w > 1) with the decentralized
pattern (x > 2) mechanisms had a very good impact on the
decision time, in such a way that the difference among the
results for each one of the metrics decreases by increasing
the value of x. Interestingly, as shown in Figure 4, it is pos-
sible to set x to be sufﬁciently large in order to have the
nth-decision time close to the 1th-decision time.
6 Conclusion
Studying and comparing the performances of consensus
protocols is very important because such protocols are in-
tensively used in many fault-tolerant distributed systems.
Most protocols already published have been analyzed using
metrics that provide incomplete and sometimes misleading
information about their performances. In this paper we have
evaluated the performance of a consensus protocol in prac-
tical settings, using a metric that gauges the time that takes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007for up to k processes reach a decision, with k ∈ 1, f + 1, n.
The protocol analyzed has two unique features. Firstly, it
uses a window mechanism that allow processes to simulta-
neously participate to multiple rounds, mitigating the neg-
ative impacts of an eventual bad QoS delivered by the fail-
ure detector. Secondly, it allows its decision pattern to be
conﬁgured to have different numbers of processors able to
autonomously decide in a round.
Our results show the great importance of the window
mechanism in masking wrong suspicions of the failure de-
tector. Moreover, when k > 1, then the window mechanism
is of interest even if the failure detector makes no mistake.
As this mechanism has a ﬁxed cost, the best conﬁguration
is obtained when the window size is equal to the number of
processes. Regarding the conﬁguration of the decision pat-
tern, we show that this parameter is only useful when the
protocol uses the window mechanism. In this case, we ob-
served that the best performance were achieved when the
number of processes allowed to autonomously decide was
greater or equal to k. As a future work we intend to evalu-
ate the behavior of the protocol when the system is subject
to a background load that is heterogeneous and that varies
over time. We believe that an adaptation mechanism similar
to the one proposed in [12] can be used to deﬁne suitable
values for the set X and maximize the performance of the
protocol in such setting.
Acknowledgements. This work has been supported by
grants from CNPq/Brazil, CAPES/Brazil and COFE-
CUB/France.
References
[1] O. Bakr and I. Keidar. Evaluating the running time of a
communication round over the internet. In Proceedings of
the ACM Symposium on Principles of Distributed Comput-
ing (PODC), pages 243–252, Monterey, California, USA,
July 2002. ACM.
[2] T. Chandra and S. Toueg. Unreliable failure detectors for
reliable distributed systems. Journal of the ACM, 43(2):225–
267, Mar. 1996.
[3] T. D. Chandra, V. Hadzilacos, and S. Toueg. The weakest
failure detector for solving consensus. Journal of the ACM,
43(4):685–722, July 1996.
[4] B. Charron-Bost. Agreement problems in fault-tolerant dis-
tributed systems. In Proceedings of the 28th Conference on
Current Trends in Theory and Practice of Informatics, pages
10–32, Piestany, Slovak Republic, Nov. 2001.
[5] W. Chen, S. Toueg, and M. K. Aguilera. On the quality of
service of failure detectors. In International Conference on
Dependable Systems and Networks (DSN’2000), pages 191–
200, New York, USA, Jun 2000. IEEE Computer Society.
[6] A. Coccoli, P. Urb´an, A. Bondavalli, and A. Schiper. Per-
formance analysis of a consensus algorithm combining
In Inter-
stochastic activity networks and measurements.
national Conference on Dependable Systems and Networks
(DSN’2002), pages 551–560, Washington, D.C., USA, June
2002. IEEE Computer Society.
[7] M. J. Fischer, N. A. Lynch, and M. D. Paterson. Impossibil-
ity of distributed consensus with one faulty process. Journal
of ACM, 32(2):374–382, Apr. 1985.
[8] M. Hurﬁn, R. Macedo, A. Mostefaoui, and M. Raynal. A
consensus protocol based on a weak failure detector and a
sliding round window. In Proc. of the 20th IEEE Symposium
on Reliable Distributed Systems (SRDS’2001), pages 120–
129, New-Orleans,LA,USA, Oct. 2001. IEEE Computer So-
ciety.
[9] M. Hurﬁn and M. Raynal. A simple and fast asynchronous
consensus protocol based on a weak failure detector. Dis-
tributed Computing, 12(4):209–223, 1999.
[10] I. Keidar and A. Shraer. Timeliness, failure-detectors, and
consensus performance. In PODC ’06: Proceedings of the
twenty-ﬁfth annual ACM symposium on Principles of dis-
tributed computing, pages 169–178. ACM Press, 2006.
[11] A. Mostefaoui and M. Raynal. Solving consensus using
chandra toueg’s unreliable failure detectors: a general quo-
In Proceedings of the 13th Inter-
rum based approach.
national Symposium on Distributed Computing (DISC’99),
pages 49–63, Bratislava, Slovaquia, Sep 1999.
[12] L. M. R. Sampaio and F. V. Brasileiro. Adaptive indulgent
consensus. In Proceedings of the International Conference
on Dependable Systems and Networks (DSN’2005), pages
422–431, Yokohama, Japan, June 2005. IEEE Computer So-
ciety.
[13] A. Schiper. Early consensus in an asynchronous system with
a weak failure detector. Distributed Computing, 10(3):149–
157, Apr. 1997.
[14] N. Sergent, X. D´efago, and A. Schiper. Impact of a failure
detection mechanism on the performance of consensus. In
Proceedings of the 2001 Paciﬁc Rim International Sympo-
sium on Dependable Computing (PRDC’2001), pages 137–
145, Seoul, Korea, Dec. 2001. IEEE Computer Society.
[15] P. Urb´an, X. D´efago, and A. Schiper. Contention-aware met-
rics for distributed algorithms: comparison of atomic broad-
cast algorithms.
In Proceedings of the 9th IEEE Interna-
tional Conference on Computer Communications and Net-
works (IC3N’2000), pages 80–92, Las Vegas, Nevada, USA,
Oct. 2000. IEEE Computer Society.
[16] P. Urb´an, X. D´efago, and A. Schiper. Neko: a single en-
vironment to simulate and prototype distributed algorithms.
In Proceeding of the 15th International Conference on In-
formation Networking (ICOIN-15), pages 503–511, Beppu
City, Japan, Feb. 2001. IEEE Computer Society.
[17] P. Urb´an, N. Hayashibara, A. Schiper, and T. Katayama. Per-
formance comparison of a rotating coordinator and a leader
based consensus algorithm. In Proceedings of the 23rd Sym-
posium on Reliable Distributed Systems (SRDS’2004), pages
4–17, Florian´opolis, Brazil, Oct. 2004. IEEE Computer So-
ciety.
[18] P. Urb´an and A. Schiper. Comparing the performance of
two consensus algorithms with centralized and decentralized
communication schemes. Technical Report IS-RR-2004-
009, Japan Advanced Institute of Science and Technology,
Mar. 2004.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007