# Figure 4: Comparison of Configurations
The figure below compares the best configuration (w = x = n) with the baseline configuration (w = 1, x = 2) in terms of the probability of wrong suspicions.

```
Probability of wrong suspicions [%]
60
55
50
45
40
35
30
25
0   5   10  20
Figure 4. Comparison between the best configuration (w = x = n) and the baseline configuration (w = 1, x = 2).
```

## 5. Related Work

Previous studies on the performance of consensus protocols have employed quantitative approaches and temporal metrics [6, 17, 18, 12]. These studies analyzed the impact of both external and internal factors on protocol performance. External factors include characteristics of the execution environment, such as the configuration of the failure detection service, while internal factors pertain to the protocol's inherent properties.

### Impact of Failures and QoS on CT-Consensus

The impact of failures and the Quality of Service (QoS) of the failure detection service on the performance of CT-consensus was studied in [6]. The authors simulated and measured an implementation of the protocol under different faultloads: 
- No failures and no wrong suspicions,
- No failures but with wrong suspicions,
- Failures without wrong suspicions.

The study in [17] considered similar faultloads but in the context of a consensus embedded in atomic broadcast protocols. It also compared the performance of consensus protocols using failure detectors of different classes. Both studies concluded that wrong suspicions and failures negatively affected protocol performance. Our findings align with these results, particularly regarding the negative impact of wrong suspicions. However, we did not consider scenarios with crashes, as they are infrequent in practice and only recommended for evaluation if significant performance degradation is expected [17].

### Implementation and Contention

Our experiments adopted an implementation of a specific failure detector that generates contention, which is a unique aspect of our work. The impact of protocol characteristics on performance has been less explored in the literature. For instance, [12] proposed an adaptive solution for consensus protocols based on process ordering, achieving significant performance gains in heterogeneous systems. In this paper, we investigate how the HMMR-consensus performance is influenced by the values of its two adaptive parameters, x and w. By tuning these parameters, it is possible to change the decision pattern from (almost) centralized (w = 1, x = 2) to completely decentralized (w = 1, x = n).

### Comparative Analysis

In [18], the performance of consensus protocols was analyzed by considering two extreme decision patterns: centralized (CT-consensus [2]) and fully decentralized (MR-consensus [11]). Specifically, it studied the latency of a total order broadcast service implemented on top of these consensus protocols. The performance measures in [18] cannot be directly compared with ours, as their notion of throughput does not appear in our work. We assume a new consensus is launched every 1,000 units of time. While the baseline configuration can be considered a slight optimization of the classical CT-consensus, the configuration (w = 1, x = n) does not correspond to MR-consensus. Despite these differences, our results for the baseline configuration (see Section 4.2.1) corroborate the conclusion in [18] that "the centralized algorithm performs better in some environments despite the fact that the decentralized algorithm finishes in fewer communication steps." Moreover, due to contention, any performance gain is not very significant.

### Extensions and New Insights

Our work extends the research by Urbán and Schiper [18] in two directions:
1. Analyzing intermediate values of x.
2. Considering the impact of the additional parameter w.

To the best of our knowledge, this is the first study to investigate the practical benefits of simultaneous round participation, represented by w. The performance results show that a window size of n significantly reduces latency and entirely masks the impact of a poor QoS from the failure detector. The excessive attention paid to the first parameter x in the literature is due to the analysis of the number of communication steps, which predicts a gain. Conversely, the lack of interest in the second parameter w is due to the absence of relevant analysis. In fact, any analysis in terms of the number of rounds or communication steps appears inappropriate when a process can participate in several consecutive rounds simultaneously.

### Hybrid Approach and Metrics

In [10], the authors proposed a hybrid approach to analyze the performance of indulgent protocols using a generic framework called GIRAF. Since the requirement for communication-closed rounds is not mandatory in their approach, it would be interesting to check if our simulation results (particularly the benefits of using a window mechanism) can be corroborated by an analysis based on the GIRAF framework.

### Performance Metrics

An important decision in conducting a performance study is the choice of metric. For consensus protocols, the first decision time is widely used [6, 14, 12, 17]. Other metrics, such as the last decision time [17], may be of interest depending on the application's requirements. The performance of the HMMR-consensus was analyzed using the kth-smallest decision time. By setting k to {1, f + 1, n}, we estimated the first, last, and f + 1 smallest consensus decision times. The results showed that the judicious combination of simultaneous round execution (w > 1) with the decentralized pattern (x > 2) had a very good impact on decision time, reducing the difference among the results for each metric as x increases. As shown in Figure 4, it is possible to set x sufficiently large to make the nth-decision time close to the 1st-decision time.

## 6. Conclusion

Studying and comparing the performances of consensus protocols is crucial because such protocols are extensively used in many fault-tolerant distributed systems. Most published protocols have been analyzed using metrics that provide incomplete or misleading information about their performance. In this paper, we evaluated the performance of a consensus protocol in practical settings using a metric that measures the time taken for up to k processes to reach a decision, with k ∈ {1, f + 1, n}. The protocol has two unique features:
1. A window mechanism allowing processes to participate in multiple rounds simultaneously, mitigating the negative impacts of a poor QoS from the failure detector.
2. A configurable decision pattern that allows different numbers of processors to autonomously decide in a round.

Our results highlight the importance of the window mechanism in masking wrong suspicions from the failure detector. When k > 1, the window mechanism remains beneficial even if the failure detector makes no mistakes. The best configuration is achieved when the window size equals the number of processes. Regarding the decision pattern, this parameter is only useful when the protocol uses the window mechanism. The best performance is achieved when the number of processes allowed to autonomously decide is greater than or equal to k. Future work will evaluate the protocol's behavior under heterogeneous and varying background loads, potentially using an adaptation mechanism similar to the one proposed in [12] to maximize performance.

## Acknowledgements

This work was supported by grants from CNPq/Brazil, CAPES/Brazil, and COFECUB/France.

## References

[1] O. Bakr and I. Keidar. Evaluating the running time of a communication round over the internet. In Proceedings of the ACM Symposium on Principles of Distributed Computing (PODC), pages 243–252, Monterey, California, USA, July 2002. ACM.

[2] T. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. Journal of the ACM, 43(2):225–267, Mar. 1996.

[3] T. D. Chandra, V. Hadzilacos, and S. Toueg. The weakest failure detector for solving consensus. Journal of the ACM, 43(4):685–722, July 1996.

[4] B. Charron-Bost. Agreement problems in fault-tolerant distributed systems. In Proceedings of the 28th Conference on Current Trends in Theory and Practice of Informatics, pages 10–32, Piestany, Slovak Republic, Nov. 2001.

[5] W. Chen, S. Toueg, and M. K. Aguilera. On the quality of service of failure detectors. In International Conference on Dependable Systems and Networks (DSN’2000), pages 191–200, New York, USA, Jun 2000. IEEE Computer Society.

[6] A. Coccoli, P. Urbán, A. Bondavalli, and A. Schiper. Performance analysis of a consensus algorithm combining stochastic activity networks and measurements. In International Conference on Dependable Systems and Networks (DSN’2002), pages 551–560, Washington, D.C., USA, June 2002. IEEE Computer Society.

[7] M. J. Fischer, N. A. Lynch, and M. D. Paterson. Impossibility of distributed consensus with one faulty process. Journal of ACM, 32(2):374–382, Apr. 1985.

[8] M. Hurfin, R. Macedo, A. Mostefaoui, and M. Raynal. A consensus protocol based on a weak failure detector and a sliding round window. In Proc. of the 20th IEEE Symposium on Reliable Distributed Systems (SRDS’2001), pages 120–129, New-Orleans, LA, USA, Oct. 2001. IEEE Computer Society.

[9] M. Hurfin and M. Raynal. A simple and fast asynchronous consensus protocol based on a weak failure detector. Distributed Computing, 12(4):209–223, 1999.

[10] I. Keidar and A. Shraer. Timeliness, failure-detectors, and consensus performance. In PODC ’06: Proceedings of the twenty-fifth annual ACM symposium on Principles of distributed computing, pages 169–178. ACM Press, 2006.

[11] A. Mostefaoui and M. Raynal. Solving consensus using Chandra Toueg’s unreliable failure detectors: a general quorum-based approach. In Proceedings of the 13th International Symposium on Distributed Computing (DISC’99), pages 49–63, Bratislava, Slovaquia, Sep 1999.

[12] L. M. R. Sampaio and F. V. Brasileiro. Adaptive indulgent consensus. In Proceedings of the International Conference on Dependable Systems and Networks (DSN’2005), pages 422–431, Yokohama, Japan, June 2005. IEEE Computer Society.

[13] A. Schiper. Early consensus in an asynchronous system with a weak failure detector. Distributed Computing, 10(3):149–157, Apr. 1997.

[14] N. Sergent, X. Défago, and A. Schiper. Impact of a failure detection mechanism on the performance of consensus. In Proceedings of the 2001 Pacific Rim International Symposium on Dependable Computing (PRDC’2001), pages 137–145, Seoul, Korea, Dec. 2001. IEEE Computer Society.

[15] P. Urbán, X. Défago, and A. Schiper. Contention-aware metrics for distributed algorithms: comparison of atomic broadcast algorithms. In Proceedings of the 9th IEEE International Conference on Computer Communications and Networks (IC3N’2000), pages 80–92, Las Vegas, Nevada, USA, Oct. 2000. IEEE Computer Society.

[16] P. Urbán, X. Défago, and A. Schiper. Neko: a single environment to simulate and prototype distributed algorithms. In Proceeding of the 15th International Conference on Information Networking (ICOIN-15), pages 503–511, Beppu City, Japan, Feb. 2001. IEEE Computer Society.

[17] P. Urbán, N. Hayashibara, A. Schiper, and T. Katayama. Performance comparison of a rotating coordinator and a leader-based consensus algorithm. In Proceedings of the 23rd Symposium on Reliable Distributed Systems (SRDS’2004), pages 4–17, Florianópolis, Brazil, Oct. 2004. IEEE Computer Society.

[18] P. Urbán and A. Schiper. Comparing the performance of two consensus algorithms with centralized and decentralized communication schemes. Technical Report IS-RR-2004-009, Japan Advanced Institute of Science and Technology, Mar. 2004.