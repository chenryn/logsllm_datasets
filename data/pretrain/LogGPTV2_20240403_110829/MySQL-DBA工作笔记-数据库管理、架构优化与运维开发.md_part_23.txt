Jul
:::24801
->/home/data/sl/ib_logfilel
/tmp/ibHcflkp
Xid =477
(deleted)
：::*
---
## Page 143
和日志
(deleted)
加载ibd文件
脚本的完整内容可以参考网址：https://ithub.com/jeanron100/mysql_.devops。
第2阶段：
整体来说这个恢复的过程分为两个阶段：
志恢复；在这些技能之外，我们还需要有一种技能，那就是能够单独恢复物理文件。
对于备份恢复而言，我们主要说到了全库和表级别的恢复，引用了逻辑恢复、物理恢复
1rowin
mysql> select *from test;
整个流程可以用下面的图3-28来表示。
（2）解析.ibd 文件，加载.ibd文件。
（1）解析.frm文件，得到建表语句。
恢复方法9：直接恢复物理文件
所以这一点上，句柄层级的恢复和之前自己在oracle下的句柄恢复情况很类似。
这个时候验证数据就会发现，之前的那个事务已经做了回滚。
正常停库，启库。
root@grtest
[root@grtest s1]# chown mysql:mysql xxxx
我们做两件事情：先给当前的环境上锁，然后进行文件的拷贝。
rwx
lrwx-
lrwx------
1000
-
id
root@grtest
 set (0.01 sec)
替换临时ibd文件
s1]
sl
s1]
root
root
root
root root
构建虚拟表
#
mv
root
root
root6
root
/home/data/
64
9
9
/home/data/s1/ibtmp1
Jul
Jul10
Jul
Jul
Jul
传输表空间加载表
10
10
1022:49
图3-28
22:497
22:49
22:49
s1
ib
8
_logfilel
9->
->
个
/tmp/ibYubRMp
/tmp/ibq71vQK
重新构建虚拟表
/home/data/sl/ib_logfile0
第3章MySQL基础运维面面观|121
适过异教恢复机制
(deleted)
(deleted)
---
## Page 144
122丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
的替代，以GPL方式重新实现了审计插件。支持4种格式：XML(XML 属性/XML)、Tag、
以进行参数化定制和在线调整，部分功能只适用于 MariaDB。
5.1、5.5、5.6及以上版本。
行审计，不能对失败的语句进行审计。
然后根据连接id，查询审计表获得账号信息（用户名+IP)。
到预先创建的审计表中。审计时通过 mysqlbinlog 命令解析 binlog 找到语句对应的连接 id,
变相审计。
3.4.1常用方法
过一些对比来提供一些参考。
要追根溯源，审计插件就排上用场了，我们在本小节会讨论数据库方向的几个插件，通
受的攻击相对会少一些，但是应用层的压力会间接转嫁过来，或者说一些关键的操作需
持续发展离不开审计的支撑。相比而言，数据库在IT系统服务中一般不会对外开放，遭
况，保障稳定运行，数据库审计是一个需要及早摆上日程的事情，企业的发展壮大和可
3.4
注意：该方法不能对root 用户（有 super超级权限的用户）进行审计，不能对查询进
由于 MySQL 社区版中并未提供审计功能，但可以借助于 init-connect 和 binlog 实现
随着业务的规模化发展，预防核心信息资产破坏和泄漏，同时掌握业务系统运行状
从 Percona Server 5.5.37和 5.6.17版本开始提供。是对MySQL Enterprise Audit Log
（5） Percona Server Audit Plugin
支持 MariaDB、MySQL 和 Percona Server 5.5以上的版本。审计的粒度比较丰富，可
(4） MariaDB Audit Plugin
以 JSON 格式记录到文件，可以借助 MongoDB 或者 MySQL 进行日志的解析。
基于 THD 的offset，从内存对象中直接获取信息，因此日志可以获取更多的内核信息。
支持 MySQL 5.1、5.5、5.6以及MariaDB5.5、10.0版本，理论上也支持 Percona Server
MySQL5.7版本中使用了新的审计日志格式，记录了更多的内容。
MySQL5.5和5.6版本中记录的内容很少，和 generallog 差不多，不含用户名和 IP 信息。
支持MySQL5.5、5.6和5.7版本，但只在企业版中提供。
（2） MySQL Enterprise Audit Log Plugin
(3）McAfee MySQL Audit Plugin
（1） init-connect+binlog
在工作中，通常会有以下的几类方法来做数据库审计。
MySQL安全审计
---
## Page 145
负载的业务来说都不会带来显著影响，两者建议在生产环境中使用。
3.4.3
3.4.2
JSON 和CSV；审计的粒度过大，输出日志相对较多。
（3）Plugin 对于 CPU 和 IO 都带来了一定的消耗，但都在可接受的范围内，对于正常
（2）在开启MariaDB Audit后，性能最多下降了11%。
（1）在开启McAfee Audit后，性能最多下降了15%。
根据这台机器的配置，8线程时基本已经接近吞吐量的上限了，所以更高的并发数并未测试。
MySQL Base 表示没有开启Audit 时的基准性能。
使用审计后，性能测试结果见下表3-4，单位是TPS。
测试小结
性能测试结果
Concurrency
9
MySQLBase
515.89
504.55
417.08
204.38
84.38
表3-4
McAfee Audit
446.39
431.04
358.91
187.26
80.39
第3章MySQL 基础运维面面观|123
MariaDBAudit
470.24
451.84
379.29
202.11
83.23
---
## Page 146
表记录数控制在2000W以内。
设置。在8.0中已经默认为UTF8MB4，可以根据公司的业务情况进行统一或者定制化设置。
一设置为 RC（Read-Committed），对于 OLTP 业务更适合。
UTF8，应用程序连接、展示等可以设置字符集的地方也都统一设置为UTF8字符集。
4.1.1
况，如下图4-1所示。
些规范的结构和内容，来尝试改进这些情
统一，本小节会从几个维度来详细介绍一
4.1
的基础内容有一个全面地梳理和总结。
大家对于数据库开发规范还是存在一些误解，主要表现在以下三个方面：
题，所以规范的意义很明确，能够让彼此的工作都可以互利互惠。但是从工作实践来说，
（5）MySQL 实例下，数据库、表数量尽可能少；数据库一般不超过 50个，每个数
（4）数据库中的表要合理规划，控制单表数据量，对于MySQL 数据库来说，建议单
（3）MySQL 数据库的事务隔离级别默认为 RR（Repeatable-Read），建议初始化时统
注：UTF8格式是存储不了表情类数据，需要使用UTF8MB4，可在MySQL字符集里面
（2）保证字符集设置统一，MySQL 数据库相关系统、数据库、表的字符集使都用
（1）MySQL 数据库默认使用InnoDB 存储引擎。
对于开发规范，因为业务的差异很难
所以我们也要结合MySQL 的特点给出一些具体可行的建议,这就需要我们对MySQL
（3）有了开发规范，束之高阁了，没有一个持续的改进过程。
（2）制定了太过细致的开发规范，导致在工作落实中难以适应业务场景。
（1）有了开发规范，但是规范粒度太粗，规范落实没有参考。
俗话说，无规矩不成方圆。而规范的本质不是解决问题，而是有效杜绝一些潜在问
秩序是自由的第一条件。——黑格尔
配置规范
数据库开发规范
第4章SQL 开发规范和基础
存储过程规范
应用安全规范
分表规范
数据安全规范
应用规范
图4-1
开发规范
索引规范
配置规范
命名规范
建表规范
---
## Page 147
4.1.4
个字符，但为了统一规范、易于辨识以及减少传输量，统一不超过12字符）
4.1.3命名规范
的描述型较大字段拆分到其他表中；另外，禁止用数据库存储图片或文件。
4.1.2
据库下，数据表数量一般不超过500个（包括分区表)。
（1）索引建议命名规则：idx_coll_col2[_coIN]、uniq_coll_col2[_coIN]（如果字段过
对于对象命名规范的一个简要总结如下表4-1所示，供参考。
（4）库名、表名、字段名见名知意，不需要添加注释。
（3）库名、表名、字段名建议不超过12个字符。（库名、表名、字段名支持最多64
（2）库名、表名、字段名、索引名称均使用小写字母，并以“_”分隔。
（1）库、表、字段全部采用小写。
（8）建议DBA提供 SQL 审核工具，建表规范性需要通过审核工具审核后。
（7）建议字段定义为NOTNULL。
(6）存储年时使用YEAR(4)，不使用 YEAR(2)。
（5）尽可能不使用TEXT、BLOB 类型，如果必须使用，建议将过大字段或是不常用
（4）不建议使用ENUM类型，可使用TINYINT来代替。
(3）整型定义中无需定义显示宽度，比如：使用 INT，而不是INT(4)。
（2）存储精确浮点数必须使用DECIMAL替代FLOAT和DOUBLE。
（1）InnoDB 禁止使用外键约束，可以通过程序层面保证。
建表规范
索引规范
对象中文名称
主键索引
唯一索引
普通索引
触发器
存储过程
函数
视图
对象英文全称
primarykey
unique index
trigger
procedure
index
function
表4-1
view
MySQL对象简写
第4章SQL开发规范和基础|125
uniq_
trig_
proc_
func
view_
---
## Page 148
126丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
INSERT INTO table_name valuesO)。
类型转化。
性，否则修改后，注释会丢失。
redis，非实时统计可以使用单独统计表，定时更新。
InnoDB 表避免使用COUNT(*)操作，计数统计实时要求较强可以使用 memcache 或者
序操作，速度相对比UNION要快，如果没有去重的需求，优先使用UNION ALL。
后期做分布式方案时会成为瓶颈。
4.1.5
覆盖索引 idx_uid_email(uid,email)来提高查询效率。
表扫描。
长建议采用缩写)。
（11）SELECT、INSERT 语句必须显式的指明字段名称，禁止使用 SELECT*或是
（2）考虑使用UNION ALL，减少使用UNION，因为UNION ALL不去重，而少了排
（12）INSERT 语句使用 batch 提交（INSERT INTO table_name VALUESO.O.O)...),
（10）WHERE 条件中的字段值需要符合该字段的数据类型，避免 MySQL进行隐式
（6）做字段变更操作（modify column/change column）的时候必须加上原有的注释属
（1）避免使用存储过程、触发器、自定义函数等，容易将业务逻辑和DB 耦合在一起，
（9）避免在索引字段上使用函数，否则会导致查询时索引失效。
SELECT email,uid FROM user_email WHERE uid=xx，如果 uid 不是主键，可以创建
（9）UPDATE、DELETE语句一定要有明确的 WHERE条件。
（8）SQL语句中IN包含的值不应过多。
（7）使用 prepared statement 可以提高性能并且避免 SQL注入。
（5）统计表中记录数时使用COUNT(*)，而不是COUNT(primary_key)和COUNT(1);
（4）减少或避免排序，如：group by 语句中如果不需要排序，可以增加 order by null
（3）考虑使用 limit N，少用limit M，N，特别是大表或 M 比较大的时候。
（10）确认索引是否需要变更时要联系DBA。
（8）合理利用覆盖索引，例如：
（7）不建议使用%前缀模糊查询，例如LIKE“%weibo"，无法用到索引，会导致全
（5）建立复合索引时，优先将选择性高的字段放在前面。
（4）InnoDB 表一般都建议有主键列，尤其在高可用集群方案中是作为必须项的。
（3）单张表的索引个数控制在5个以内。
（2）索引中的字段数建议不超过5个。
（6）UPDATE、DELETE语句需要根据WHERE条件添加索引。
应用规范
---
## Page 149
入长度为6位。
和查询数据库元信息检索出来。
in (select database())
给后台的 SQL 服务器加以解析并执行的攻击。
4.1.8
明，调试复杂，不便于优化。
4.1.7
数字必须从0开始并等宽，比如拆分后100张表，后缀建议为：00-99。
比如 user_ff。
按月散表user_201102 等。
4.1.6
values 的个数不应过多。
（6）推荐使用CRC32求余（或者类似的算术算法）进行散表，表名后缀使用数字，
这种就是采用 SQL 拼接的方式进行的 SQL 注入攻击，而字段名和表名可以通过试错
select ipaddr from tl_ip where ipaddr= "? "
（5）如果使用MD5（或者类似的HASH 算法）进行散表，表名后缀使用16 进制，
前端验证：
解决方法：
select
变量可以等于一个合法的字符也可以等于一个 SQL语句。
举例：
SQL 注入是一种将 SQL 代码插入或添加到用户输入的参数中，之后将这些参数传递
（1）杜绝SQL注入
存储过程定义语句，不要显式带 definer 和 invoker 指定特有的定义者和调用者。
主要原因是存储过程不能实现业务逻辑层与数据存储层的分离，对于应用逻辑不透
存储过程规范很简单，核心就是一句话：尽量不要使用存储过程。
（4）分表的设定规范可以借助数据库中间件来完成。
（3）使用时间散表，表名后缀必须使用特定格式，比如：按日散表user_20110209，