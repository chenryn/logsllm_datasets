# Bug report
## Describe the bug
When using `_app.js` page for common stuff (like creating redux store) - these
libraries are duplicated between pages.
## To Reproduce
  1. Checkout https://github.com/cherniavskii/nextjs-app-code-splitting-reproduction locally
  2. Run `npm install`
  3. Run `npm run analyze`
  4. See bundle analyzer report
## Expected behavior
`redux` and `react-redux` are bundled once.
## Actual behaviour:
`redux` and `react-redux` are bundled many times - once in `_app.js` and in
every page which is connected with Redux (`index.js` and `home.js`)
## Screenshots
![next-code-splitting](https://user-
images.githubusercontent.com/13808724/42033681-4af62666-7ae6-11e8-9fac-048a920c5819.png)
## System information
  * OS: Windows
  * Browser (if applies) N/A
  * Version of Next.js: 6.1.0
## Additional context
This app contains 6 pages:
  * `_app.js` \- initializes redux store
  * `index.js` \- connects with redux store
  * `home.js` \- connects with redux store
  * `about.js` \- renders single element, doesn't connect with redux
  * `contacts.js` \- renders single element, doesn't connect with redux
  * `offer.js` \- renders single element, doesn't connect with redux
This issue reproduces only when most of pages aren't connected with Redux
(that's the way how code splitting works in Next.js).
But IMHO `_app.js` bundle should be treated like the "second `main`" bundle -
since every page is wrapped in `_app` page.  
There's no sense to duplicate libraries bundled in `_app`, since `_app` is
always loaded