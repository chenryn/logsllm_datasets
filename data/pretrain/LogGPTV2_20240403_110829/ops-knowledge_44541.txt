Question: Consider a function 'processTransaction' that can throw multiple exceptions such as 'NetworkException', 'DatabaseException', and 'PaymentException'. A developer decided to streamline the exception handling using a single catch block. Which of the following catch block implementations can potentially lead to security vulnerabilities or logic errors in the application?
"A": "try { processTransaction(); } catch (Exception e) { logger.error('Transaction failed', e); }",
"B": "try { processTransaction(); } catch (NetworkException | DatabaseException | PaymentException e) { logger.error('Transaction failed', e); }",
"C": "try { processTransaction(); } catch (Throwable e) { logger.error('Transaction failed', e); }",
"D": "try { processTransaction(); } catch (Exception e) { if (e instanceof NetworkException || e instanceof DatabaseException) { logger.error('Transaction failed', e); } else { throw e; }}"
Answer: AC