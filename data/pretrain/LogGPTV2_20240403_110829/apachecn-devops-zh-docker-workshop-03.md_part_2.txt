    注意
    如果您正在使用 Docker Desktop，可能在 Mac 上，您会注意到，当 Docker 在您系统上的虚拟映像上运行时，您将无法看到映像，尽管`docker image inspect`命令将显示与我们上面相同的位置。
10.  Run the `docker images` command again using the `-a` option:
    ```
    docker images -a
    ```
    它还将显示构建映像时使用的中间层:
    ```
    REPOSITORY   TAG      IMAGE ID      CREATED          SIZE
    basic-app    latest   c7918f4f95b9  25 seconds ago   8.8MB
              0e86ae52098d  2 minutes ago    7.48MB
              112a4b041305  11 minutes ago   7MB
    Alpine       latest   961769676411  5 weeks ago      5.58MB
    ```
11.  Run the `docker image prune` command to remove all the dangling images. You could remove all the dangling images one at a time using the `docker rmi` command using the image ID, but the `docker image prune` command is an easier way to do that:
    ```
    docker image prune
    ```
    您应该得到如下输出:
    ```
    WARNING! This will remove all dangling images.
    Are you sure you want to continue? [y/N] y
    Deleted Images:
    deleted: sha256:0dae3460f751d16f41954e0672b0c41295d46ee99d71
             d63e7c0c8521bd9e6493
    deleted: sha256:d74fa92b37b74820ccccea601de61d45ccb3770255b9
             c7dd22edf16caabafc1c
    Total reclaimed space: 476.4kB
    ```
12.  Run the `docker images` command again:
    ```
    docker images
    ```
    您将看到我们的映像列表中不再有悬空映像:
    ```
    REPOSITORY   TAG      IMAGE ID        CREATED           SIZE
    basic-app    latest   c7918f4f95b9    25 seconds ago    8.8MB
    Alpine       latest   961769676411    5 weeks ago       5.58MB
    ```
13.  Run the `du` command again over the image's directory:
    ```
    du -sh /var/lib/docker/overlay2/
    ```
    您还应该观察到尺寸的小幅减小:
    ```
    10M    /var/lib/docker/overlay2/
    ```
本练习只显示了较小的映像大小，但这绝对是在运行生产和开发环境时需要记住的。本章的这一部分已经为您提供了 Docker 如何使用层和缓存作为其构建过程的一部分的基础。
在我们的下一个练习中，我们将进一步研究我们的图层和缓存，看看如何使用它们来加快映像构建过程。
## 练习 3.02:提高构建速度和减少层数
到目前为止，您一直在使用较小的版本。然而，随着您的应用在大小和功能上的增加，您将开始考虑您正在创建的 Docker 映像的大小和层数以及您创建它们的速度。本练习的目标是加快构建时间并减小映像的大小，以及在构建 Docker 映像时使用`--cache-from`选项:
1.  Create a new `Dockerfile` to demonstrate the change you are going to make, but first, clear up all the images on your system. Run the `docker rmi` command with the `-f` option to force any removals needed, and the command in brackets will provide a list of all image IDs on your system. Use the `-a` option to show all running and stopped containers and the `-q` option to only show the container image hash value and nothing else:
    ```
    docker rmi -f $(docker images -a -q)
    ```
    该命令应该返回如下输出:
    ```
    Untagged: hello-world:latest
    ...
    deleted: sha256:d74fa92b37b74820ccccea601de61d45ccb3770255
             b9c7dd22edf16caabafc1c
    ```
    可以观察到`hello-world: latest`映像未被标记，ID 为`sha256:d74fa92b37b74820ccccea601 de61d45ccb3770255b9c7dd22edf16caabafc1c`的映像被移除。
    注意
    请注意，我们可以使用`rmi`和`prune`命令删除映像。这里，我们使用了`rmi`命令，因为`prune`直到最近才一直可用。
2.  Add the following code to your `Dockerfile` (which you created in *Exercise 3.01*). It will simulate a simple web server, as well as print the output of our `Dockerfile` during the build process:
    ```
    1 FROM alpine
    2 
    3 RUN apk update
    4 RUN apk add wget curl
    5
    6 RUN wget -O test.txt https://github.com/PacktWorkshops/   The-Docker-Workshop/blob/master/Chapter03/Exercise3.02/100MB.bin
    7
    8 CMD mkdir /var/www/
    9 CMD mkdir /var/www/html/
    10
    11 WORKDIR /var/www/html/
    12
    13 COPY Dockerfile.tar.gz /tmp/
    14 RUN tar -zxvf /tmp/Dockerfile.tar.gz -C /var/www/html/
    15 RUN rm /tmp/Dockerfile.tar.gz
    16
    17 RUN cat Dockerfile
    ```
    你会注意到`Dockerfile`的*第 6 行*正在做一个相当卑微的任务(下载一个 100 MB 的文件，名为`100MB.bin`，这通常不会在`Dockerfile`中执行。我们已经将它添加到中，以表示构建任务或可能在构建过程中添加的类似内容，例如，从文件下载内容或构建软件。
3.  使用`docker pull`命令下载你的基本映像，这样你就可以从我们做的每个测试的相同映像开始:
    ```
    docker pull alpine
    ```
4.  按照我们在`Dockerfile` :
    ```
    tar zcvf Dockerfile.tar.gz Dockerfile
    ```
    的*第 13 行*中的指示，创建一个要添加到我们的映像中的 TAR 文件
5.  Build a new image using the same name as `basic-app.` You will use the `time` command at the start of the code to allow us to gauge the time it takes to build our image:
    ```
    time docker build -t basic-app .
    ```
    输出将返回构建映像所需的时间:
    ```
    ...
    real 4m36.810s
    user 0m0.354s
    sys 0m0.286s
    ```
6.  Run the `docker history` command over the new `basic-app` image:
    ```
    docker history basic-app
    ```
    与之前的练习相比，我们的`Dockerfile`中有一些额外的命令。因此，在我们的新映像中看到 12 层应该不足为奇:
    ```
    IMAGE         CREATED      CREATED BY                           SIZE
    5b2e3b253899 2 minutes ago /bin/sh -c cat Dockerfile            0B
    c4895671a177 2 minutes ago /bin/sh -c rm /tmp/Dockerfile.tar.gz 0B
    aaf18a11ba25 2 minutes ago /bin/sh -c tar -zxvf /tmp/Dockfil…   283B
    507161de132c 2 minutes ago /bin/sh -c #(nop) COPY file:e39f2a0… 283B
    856689ad2bb6 2 minutes ago /bin/sh -c #(nop) WORKDIR /var/…     0B
    206675d145d4 2 minutes ago /bin/sh -c #(nop)  CMD ["/bin/sh"…   0B
    c947946a36b2 2 minutes ago /bin/sh -c #(nop)  CMD ["/bin/sh"…   0B
    32b0abdaa0a9 2 minutes ago /bin/sh -c curl https://github.com…  105MB
    e261358addb2 2 minutes ago /bin/sh -c apk add wget curl         1.8MB
    b6f77a768f90 2 minutes ago /bin/sh -c apk update                1.4MB
    961769676411 6 weeks ago   /bin/sh -c #(nop)  CMD ["/bin/sh"]   0B
        6 weeks ago   /bin/sh -c #(nop) ADD file:fe3dc…    5.6MB
    ```
    我们可以看到`Dockerfile`中的`RUN`、`COPY`和`ADD`命令正在创建与正在运行的命令或正在添加的文件相关的特定大小的图层，而`Dockerfile`中的所有其他命令的大小都是 0 B
7.  Reduce the number of layers in the image by combining the `RUN` commands in *lines 3 and 4* and combining the `CMD` commands in *lines 8 and 9* of the `Dockerfile` created in *step 1* of this exercise. With these changes, our `Dockerfile` should now look like the following:
    ```
    1 FROM alpine
    2 
    3 RUN apk update && apk add wget curl
    4 
    5 RUN wget -O test.txt https://github.com/PacktWorkshops/    The-Docker-Workshop/blob/master/Chapter03/Exercise3.02/100MB.bin
    6 
    7 CMD mkdir -p /var/www/html/
    8 
    9 WORKDIR /var/www/html/
    10 
    11 COPY Dockerfile.tar.gz /tmp/
    12 RUN tar -zxvf /tmp/Dockerfile.tar.gz -C /var/www/html/
    13 RUN rm /tmp/Dockerfile.tar.gz
    14 
    15 RUN cat Dockerfile
    ```
    再次运行`docker build`会将我们新映像的层数从 12 层减少到 9 层，因为即使有相同数量的命令正在运行，它们也会在*第 3 行*和*第 7 行*中链接在一起。
8.  我们的`Dockerfile`的*第 11 行*、*第 12 行*、*第 13 行*正在使用`COPY`和`RUN`命令对我们的存档文件`copy`和`unzip`进行操作，然后删除原来解压后的文件。用`ADD`命令替换这些行，而不需要运行解压和删除`.tar`文件的行:
    ```
    1 FROM alpine
    2 
    3 RUN apk update && apk add wget curl
    4
    5 RUN wget -O test.txt https://github.com/PacktWorkshops/    The-Docker-Workshop/blob/master/Chapter03/Exercise3.02/100MB.bin
    6 
    7 CMD mkdir -p /var/www/html/
    8 
    9 WORKDIR /var/www/html/
    10 
    11 ADD Dockerfile.tar.gz /var/www/html/
    12 RUN cat Dockerfile
    ```
9.  再次构建映像，将新映像的层数从 9 层减少到 8 层。如果您一直在观看构建运行，您可能会注意到构建运行的很多时间是我们的`Dockerfile`的*第 3 行*和*第 5 行*的一部分，在这里我们运行`apk update`，然后安装`wget`和`curl`，然后从网站抓取内容。这样做一两次不成问题，但是如果我们创建我们的基础形象，然后`Dockerfile`可以运行，你将能够从你的`Dockerfile`完全删除这些线。
10.  移动到一个新的目录，创建一个新的`Dockerfile`，它将只拉基础映像并运行`apk`命令，如下所列:
    ```
    1 FROM alpine
    2
    3 RUN apk update && apk add wget curl
    4
    5 RUN wget -O test.txt https://github.com/PacktWorkshops/    The-Docker-Workshop/blob/master/Chapter03/Exercise3.02/100MB.bin
    ```
11.  根据前面的`Dockerfile`构建新的基础映像，并将其命名为`basic-base` :
    ```
    docker build -t basic-base .
    ```
12.  从原来的`Dockerfile`中移除*线 3* ，因为不再需要它。进入项目目录，将`FROM`命令中正在使用的映像更新为`basic-base`，并删除*第 3 行*中的`apk`命令。我们的`Dockerfile`现在应该看起来像下面的代码:
    ```
    1 FROM basic-base
    2
    3 CMD mkdir -p /var/www/html/
    4
    5 WORKDIR /var/www/html/
    6
    7 ADD Dockerfile.tar.gz /var/www/html/
    8 RUN cat Dockerfile
    ```
13.  Run the build again for our new `Dockerfile`. Using the `time` command again with our build, we now see the build complete in just over 1 second:
    ```
    time docker build -t basic-app .
    ```
    如果您一直在关注构建，您会注意到与我们之前的构建相比，它运行得更快:
    ```
    ...
    real 0m1.810s
    user 0m0.117s
    sys  0m0.070s
    ```
    注意
    您将观察到映像的图层将保持不变，因为我们正在执行`apk`命令的系统上构建基础映像。这是一个很好的结果，即使我们没有减少层数，仍然可以加快构建速度。