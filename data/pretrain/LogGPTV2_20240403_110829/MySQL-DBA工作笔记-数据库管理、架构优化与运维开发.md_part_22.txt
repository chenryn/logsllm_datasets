test
id
test
test
est`
test`.
end 11321 time
`test(`memo
#start 12062 end 12239
#start
再次查看数据，
SET
SET
`test`
，有一个 flashback 的选项，其实就是在原来的基础上进行
AND
SET
AND
.`test`
SET
test
memo`='memo2',
memc
name
memo
11127
memo
memo`='new'
-bin.000016'
WHERE
WHERE
WHERE
2017-02-06 04:15:23
 2017-02-06 04:15:37
end 11321
数据就恢复了正常。
`id`
`id`
memo`='memo6'
memo
"memo`='memol'
包括功能和性能，手
>/tmp/tmp.log
-P3306-uadmin -padmin
id=2，
"name`)
id=4,
name
9time 2017-02-06 04:15:37
id
time 2017-02-06 04:15:23
id=4
--start-datetime='2017-02-06
：'memo3
：#start 11400 end 11625
VALUES
VALUES
name`='name4'
name
AND
AND
AND
我们需要在充分
‘ouu）
('memol',
（'memo6',
id=6
id`=1
1d
WHERE
WHERE
WHERE
WHERE
AND
AND
3
9
---
## Page 139
就是表中需要有两个字段：一个是创建时间，一个是修改时间。
半小时，多则数小时才能恢复。如何快速恢复呢，在表结构设计中我们秉承的原则之一
上的业务数据写入，如果按照常规的恢复流程，需要中断业务，但是根据数量量，短则
调整，这样可以让恢复工作更加轻量可控。
参数值
但 insert，update 或者 delete 这类操作是不允许的，如下表 3-3所示。
面所有数字的影响。当设置参数值大于O后，可以对表进行 select，create，drop 操作，
我们可以根据修改时间来进行匹配，得到一个较小范围的数据集，将这个时间点的
如此一来影响面就大了，user_id in（10002，10005）都会受到影响，因为不断有线
update tl set status=l where status=0;
假设 update 语句有 where 条件，检查不够认真，实际的语句是下面这样的：
我们假设两个异常场景，
update tl set status=1 where user_id=10001 and status=0;
比如业务流程触发了一条DML逻辑，在测试环境中，因为没有其他数据，影响范围等价于：
我们假设存在如下的数据：
其实在很多时候，我们的数据恢复不能按部就班，
innodb_force_recovery 可选的参数值为 0-6，默认情况下的值为 0，大的数字包含前
（1）误操作语句有where过滤条件
恢复方法6：基于逻辑的数据恢复
SRV_FORCE_IGNORE_CORRUPT
恢复方法5：使用参数 innodb_force_recovery
SRV_FORCE_NO_UNDO_LOG_SCAN 不查看重做日志，ImnoDB 存储引擎会将未提交的事务视为已提交
SRV_FORCE_NO_IBUF_MERGE
SRV_FORCE_NO_TRX_UNDO
SRV_FORCE_NO_BACKGROUND
SRV_FORCE_NO_LOG_REDO
编码
user_id
10005
10004
10003
10002
10001
来分别做下恢复的说明。
Status
不执行前滚的操作
不执行插入缓冲的合并操作
不执行事务回滚操作
阻止主线程的运行，如主线程需要执行full purge 操作，会导致crash
忽略检查到的 corrupt页
2019-03-2710:00:04
2019-03-27 10:00:03
2019-03-27 10:00:02
2019-03-2710:00:01
2019-03-2711:00:00
表3-3
update_date
，而是需要根据恢复场景进行灵活
解释
100
100
200
100
value
第3章MySQL基础运维面面观丨117
---
## Page 140
118丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
差一些。
不可玩是很敏感的，但是有些用户十天半月登录一次玩玩，他们对这种在线服务感知要
其实他们本身就不关注，这一点以游戏行业来打比方比较贴切，那些活跃玩家对于游戏
户而言，他们对业务中断是敏感的，而对于那些没有业务强依赖的用户来说，是否中断
小数据量的恢复，是一种参考的思路。
作是具有生命周期管理的，那么我们的数据变化可以通过历史信息来恢复。
数据进行逆向操作，
从数据恢复的性价比来说，我们为了快速恢复业务，花费了大量的时间在这些不够
对于绝大多数的业务来说，热数据始终是少数，但是相对较为重要，对于热数据用
恢复方法7：基于冷热数据分离的恢复思路
当然如上的方法在变更范围扩大的情况下会出现难以适配的情况，这种恢复更适合
通过历史表可以追溯数据的变化情况，及时进行 status 和 value 的逆向操作。
而历史表的数据如下：
这种情况下状态表的数据如下：
在这种情况下，影响范围就很大了，如果从表结构设计的角度来说，我们的所有操
update t set status=l;
如果属于全量改动，实际的语句类似于下面这样：
（2）误操作语句属于全量改动
因为条件是 status=O 和时间范围，所以这个操作的影响范围是可以量化的。
10005
10004
10003
10002
10001
user_id
10004
10003
10002
10001
user_id
10005
如下：
status
0
status
2019-03-27 10:00:04
2019-03-27 10:00:03
2019-03-27 10:00:02
2019-03-27 10:00:01
2019-03-27 11:00:00
2019-03-27 11:00:04
2019-03-2711:00:03
2019-03-27 11:00:02
2019-03-2711:00:01
2019-03-27 11:00:00
update_date
update_date
100
100
200
100
value
100
100
100
200
100
value
100
---
## Page 141
份能不能恢复，在问题真正发生前，我们来简单模拟一下。
计，优先恢复状态数据，而日志流水数据可以转为异步任务恢复，提高业务的交付效率。
流水型日志型数据的存储容量较高，恢复代价较高，我们可以在这一点上进行架构的优化设
低，剩下的用户数据可以转为在线恢复，对于业务可持续性来说是一种折衷的改进。
会很大，假设玩家总数是100万，但是活跃玩家是20万，那么我们的恢复代价就会大大降
活跃的用户上面，性价比也是不高的，所以如果能够做好冷热数据分离，那么这样的收益就
同时对于表数据来说，状态型数据是关键所在，一般来说这种数据的量级不会太大，而
Query OK, 0 rows affected (0.01 sec)
mysql>
Query OK,
mysql> create database test;
我们可以测试一下破坏的情况，同时和事务结合起来。
其中，ib_buffer_pool 是 5.7的新特性，暂时没有用到，两个 redo 日志，一个临时文件。
[root@grtest sl]# ll ib*
这个时候的文件是下面的几个：
查看是数据文件的目录，输出如下：
6 rows in set (0.01 sec)
mysql> show variables like '%pct%';
rw-r-
rw-r----
-rw-r--
首先我们得到两个参数值，一个是刷脏页的指标结果如下：
常在河边走，哪有不湿鞋，如果我们在操作中不小心删除了一个物理文件，没有备
恢复方法8：基于句柄的无备份恢复
row in set (0.00 sec)
datadir
Variable_name
Variable_name
innodb_max_
innodb
innodb_compression_failure_threshold_pct
innodb
create table test(id int);
1 row affected (0.00 sec)
max
compression
test
1 mysql
_dirty_pages_pct_lwm
mysql
mysql
/home/data/s1/
mysql
Value
mysql
mysql
mysql
pad_pct_max
12582912
50331648
12582912
50331648
oct
413 Jun 20 14:01 ib_buffer_pool
Jun 20 14:02 ibtmp1
Jun
Jun
Jun
20
20
20
14:01
Value
14:01
125
37
0.000000
75.000000
5
ib_logfilel
ibdatal
logfile0
第3章MySQL基础运维面面观丨119
---
## Page 142
120丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
(deleted)
LISTEN
程ID，从下面的输出我们可以很方便地定位到进程号是24901。
件
在系统目录下，按照规律会发现下面的文件。
所以我们换一个姿势，通过指定的端口（在这里就是端口24801）来定位到相关的进
查看 mysqld 的 pid，发现测试环境中有大量的同类服务。
我们就把这些ib_字样的文件删除了。
mysql>
mysql> start transaction;
查看恢复的情况。
我们来验证一下这种破坏场景下的数据情况：插入一条记录，不提交，然后破坏文
BINLOG
# mysqlbinlog -vv binlog.000001 lgrep -i -a5 INSERT
之后再次查看 binlog 内容如下：
SQL>commit
而一旦提交之后，binlog 里面就会包含进去。
# mysqlbinlog -vv binlog.000001 Igrep -i INSERT
UZNjWR7hYAAAJAAAADYHAAAAANsAAAAAAAEAAgAB/ /7oAwAA
这个时候没有commit，
Query OK，0 rows affected (0.00 sec)
mysql> start transaction;
rwx-
rwx-
rwx
tcp
手工开启一个事务，但是不提交。
#
#
*！*/;
SET
INSERT INTO`test`.`test`
1846
@1=1000 /* INT meta=0 nullable=1 is_null=0 */
29401/mysqld
insert
nsert
0rows
1 root root 64 Jul10 22:49 4->/home/data/s1/ibdata1(deleted
root
rootroot64Jul1022:4910
affected
root
，所以查看 binlog 里面目前是没有匹配记录的。
64
values (2000)
valu