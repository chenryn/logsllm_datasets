1:
2:
3: openFileOrDir(pathname);
}
private void M eth Y (String pathname) {
0:
SecurityManager sm =
if (sm != null) {
System.getSecurityManager();
sm.checkPermission(FilePermission
(pathname, ”read”));
}
fsStatFile(pathname); //sensitive-op
1:
2:
3:
}
2:
3:
4:
5:
}
private void M eth Z(String pathname) {
0:
1:
if (pathname.endsWith(”/”)){
System.getSecurityManager();
SecurityManager sm =
if (sm != null) {
sm.checkPermission(FilePermission
}
// sensitive-op
fsStatDirectory(pathname);
(pathname, ”read”));
}
else {
}
// other operations
Figure 1: An example that involves sensitive operations
the absence of any witnesses can be used to certify that the
system possesses the complete mediation property. In our
experiments, we have been able to analyze methods in the
order of several thousands of lines of code, while keeping the
false positives in the order of tens of methods. Specialized
techniques can be developed for addressing these false posi-
tives, and careful manual eﬀort can be employed to rule out
bugs.
3.2 Challenges for Veriﬁcation
Verifying the software implementation of the Java access
control is a important problem. The main challenge is to
design a procedure that scales to several thousands of meth-
ods present in the JVM libraries. Scalability demands the
following two characteristics in any solution.
• Compositionality In the above example, in the context
of analyzing method X, we have to analyze methods Y
and Z. In some other context, we may need to analyze
methods Y and Z. In this case, we should be able to
reuse the results of the ﬁrst analysis. This property
of being able to (re)use the results of the analysis of
individual methods, is the compositionality property,
and is a key concern in the design of scalable methods
for security veriﬁcation.
• Low Complexity A naive approach that looks for con-
trol paths in all possible method sequences in the li-
brary will fail due to the enormous size of the Java
library, which has several thousands of methods. The
space complexity of such a naive control ﬂow analysis
can be exponential in the sum of the sizes of the meth-
ods in the Java library, as explained later. For the size
of the Java library, even polynomial methods are not
good enough, as cubic or even quadratic algorithms
can be expensive.
The procedure we describe in the next section satisﬁes
these two important properties.
3.3 Technical Approach
Problem Scope We assume that we are given the set of se-
curity sensitive operations and the Java permissions required
for performing these operations. We also assume that we are
given a set of method deﬁnitions that is self contained, i.e.,
the deﬁnition (body code) of all methods invoked by any
method is also present in the set. The only exception is
the source for sensitive native methods, which we do not
analyze.
For each public method M among them, we want to check
the following property: does there exist a call sequence of
methods starting with M , that invokes a sensitive operation
without consulting the SecurityManager before the operation?
Since the method is public, it can be called from any appli-
cation class, and therefore we call such a method M a risky
method. Our task is to identify such risky methods in the
Java standard library. In the rest of this section, we intro-
duce our approach of computing these summaries through
gradual reﬁnement of ideas.
A ﬁrst approach To identify such paths we can statically
analyze the code of library classes. A ﬁrst approach to veri-
fying whether a given method M that operates on a sensitive
resource respects complete mediation is to start with the
control ﬂow graph (CFG) of the method and look for paths
in it that lead to the sensitive operation without calling the
SecurityManager. Figure 2 gives the CFGs for methods X,
Y , and Z presented in Figure 1.
To handle procedure calls made by method M , we can
extend the above method by extending the CFG of M with
inline expansion of the CFGs of all the methods called by
M. We can then analyze every path in the resulting graph
(called the expanded CFG or ECFG(M)) that leads to a
sensitive operation.
The above naive method may actually work for small code
bases. However, it has two main drawbacks. The ﬁrst draw-
back relates to the case where recursion is present among
methods in the library, where it is well known that inline
expansion will not work. For instance, the presence of two
or more mutually recursive methods will result in an inﬁnite
expanded graph.
Secondly, due to the inline expansion, in general, even if
there is no recursion, the size of ECF G(M ) can be expo-
nential in the sum of sizes of the methods. Thus a method
that constructs the ECF G(M ) is not scalable for large code
bases. Our aim, therefore is to analyze the code base without
constructing ECFGs.
Method Summaries To analyze the code base without
constructing ECFGs, our approach needs to reuse the results
103
of analysis of a method.
In our approach, the results of
analyzing each method is stored in its method summary (One
of the earliest works that employed procedure summaries
is [24]). Intuitively, the summary of a method M denotes
the eﬀect of a call to M by any other method for checking
the presence of security checks. The heart of our approach
involves a novel procedure for computing (and reusing) these
summaries for veriﬁcation.
We classify the nodes of the control ﬂow graph of a method
M into the following types: entry node, return node, secu-
rity check, sensitive operation, method invocation and neutral
node. The ﬁrst ﬁve are self-explanatory, neutral nodes are
those that do not fall into any of the ﬁrst ﬁve types.
3.3.1 Computing summaries
The summary of a method M is a 2-tuple that contains
two following components:
• Presence of paths that do not have security checks This
component of the summary reﬂects the existence of
paths from the entry node of M to a return node that
do not contain any security check. If such a path exists
in a method, then we include the insecure path in
the ﬁrst component of summary(M ). We say that a
method is all path secure if insecure path is not in
the ﬁrst component of summary(M ).
• Presence of unguarded sensitive operations If there is
a path in the expanded control ﬂow graph from the
entry node to a sensitive operation without the pres-
ence of a security check before that operation, then
our approach will include the label bad in the sec-
ond component of summary(M ). We call a method
good if the label bad is not in the second component of
summary(M ).
Thus we can have the following four types of summaries:
(cid:104)insecure path, bad(cid:105), (cid:104)insecure path,⊥(cid:105), (cid:104)⊥, bad(cid:105), (cid:104)⊥,⊥(cid:105).
The method summaries of X, Y and Z in Figure 1 are
given at the bottom of Figure 2. For instance, method
Y is all path secure and good, and Z is good but not
all path secure. Consequently, X, which calls Y and Z
along diﬀerent paths, is bad. We also wish to note that
a method may be bad, but still can be all path secure; this
is because it may contain a path having a sensitive operation
that is followed by a security check.
For a method M , we deﬁne the boolean function
insecure path(M ) to be true if
it contains the label
insecure path in its ﬁrst component. In a similar fashion,
we can deﬁne the boolean function bad(M ). We can
also deﬁne good(M ) (which is simply not bad(M ) and
all path secure(M )
as
not insecure path(M )).
(which
is
same
Our objective is then to compute for each method the
two components (corresponding to insecure path and bad)
of the summary. Our approach computes these summaries
by analyzing the individual CFGs of these methods.
Observation 1 Let M1 be a method for which bad(M ) is
true. Let M2 be a method that calls M1. Then note that,
we can eﬀectively replace this method invocation node in
CF G(M2) with a sensitive operation node while computing
the bad summary of M2 (i.e., the second component).
The above observation says that calling the method M1
for which bad(M1) is true is eﬀectively (i.e., for the purposes
104
of computing bad summaries) equivalent to performing a
sensitive operation. Note that calling M1 does not however
add bad to the summary of M2 because there may have been
a preceding security check in the body of M2 before the call
to M1.
Observation 2 Let M1 be a method for which
insecure path(M1) is true. Let M2 be a method that calls
M1. Then note that, we can eﬀectively replace this method
invocation node in CF G(M2) with a neutral node while
computing the insecure path summary of M2 (i.e., the ﬁrst
component).
Observation 3 Let M1 be a method for which
all path secure(M1) is true and bad(M1) is false. Let M2
be a method that calls M1. Then note that, we can replace
this method invocation node in CF G(M2) with a security
check node in computing the bad summary of M2 (i.e., the
second component).
The above three observations allow us to compute the bad
and insecure path summaries of a set of methods easily. In
the absence of recursion, we can sort the methods based on
their reverse invocation sequence; (i.e., if M2 calls M1 then
M1 appears in earlier in the sequence). Such a sequence can
be constructed using the reverse topological sort of the call
graph of all methods.
The ﬁrst method M1 in this sequence calls no other meth-
ods. Therefore, we can compute its summary by analyzing
all its paths. We move on to M2, which is next in the re-
verse invocation sequence. While computing insecure path
summary of M2, if insecure path(M1) is true, then we can
eﬀectively consider M1 to be a neutral node (Observation 2).
Similarly, while computing bad summaries of M2, if bad(M1)
is true, we can replace the call node to M1 with a sensitive
operation node (Observation 1). If all path secure(M1) is
true, and bad(M1) is not true, we can replace the call node
to M1 with a security check (Observation 3).
In a simi-
lar manner, we can successively compute the insecure path
and bad summaries for all the methods in the sequence, and
then identify bad methods that are public. These methods
are risky, as they provide a direct path from application code
to a sensitive operation.
The above algorithm is also very eﬃcient, and one can
show that the total running time of this algorithm is linear
in the sum of the size of the methods analyzed.
3.3.2 Handling recursion
Unfortunately, the approach that was described above will
not work in the case of recursive calls.
In the case with
recursion, we will not be able to uniquely sort the methods in
their reverse invocation order, as the call graph will contain
cycles due to recursion.
The standard approach to deal with recursion involves
iteratively computing summaries for the procedure until the
computation converges to a ﬁxed point. Such an approach
will compute the summaries, but the worst case running
time of this procedure will be of order O(N ∗ M ) where N
is the number of methods and M is the sum of the sizes of
all the methods analyzed, thus making it highly ineﬃcient.
3.3.3 A new efﬁcient solution
We have devised a new solution that computes the sum-
maries for the recursive case that is highly eﬃcient. The
running time of this new procedure is still linear in the sum
Figure 2: Control ﬂow graphs for the example in Figure 1
of the sizes of methods analyzed, eﬀectively equaling the run-
ning time of the algorithm for non-recursive case that was
described earlier. We describe the procedure for computing
the summary for a procedure below.
Checking for insecure paths To determine if method M
has insecure path, we perform a search of CF G(M ) check-
ing for the existence of a path, that does not contain a se-
curity check from its entry node to its return node. This
search starts from the entry node and operates as follows.
Whenever we encounter a node that is a neutral node or is
a sensitive operation, we continue the search from its suc-
cessors. Whenever we encounter a security check node, we
do not proceed beyond that node but explore other nodes.
This is because the path we are looking for is an insecure
path and therefore cannot contain a security check.
Whenever we encounter a method invocation node u that
invokes method M(cid:48), and insecure path is in summary(M(cid:48)),
then we continue the search from the successor nodes of u.
This is because there is a path without a security check, in
the expanded control ﬂow graph of M passing through M(cid:48),
from the entry node of M to u and its successors. On the
other hand, if insecure path is not in summary(M(cid:48)), we
put node u on a waiting queue, W Q(M(cid:48)), associated with
M(cid:48). Whenever M(cid:48) is determined to have an insecure path,
at that point, the search of CF G(M ) is resumed from node
u. Whenever a return node is encountered in the search of
CF G(M ), we include insecure path in its summary and at
this time we examine all entries in W Q(M ). For each node v
on this queue, we do as follows. If insecure path is already
in the summary of the method containing v then we ignore
v; otherwise, we continue the search from node v.
The above intuitive procedure is implemented as shown
in Figure 3 and can be explained further as follows. For
each node u of a control ﬂow graph, we associate a binary
ﬂag u.visited which by default set to false and set to true
when ﬁrst encountered. We also assume that u.successors
gives a list of successors of u, also u.method the name of
the method to which u belongs. With each method M , we
maintain a set W Q(M ) as indicated earlier. The search
algorithm maintains a set data structure Q. Essentially, Q
is the set of nodes that need to be explored. It is initialized
to be the set of entry nodes of all the methods and each such
node is marked as visited. The algorithm is self explanatory.
The correctness of the algorithm of Figure 3 is stated by the
following lemma.
Lemma 1:
1. For every node u placed on Q, there exists a path in
ECF G(u.method) from the entry node of u.method to
u such that none of the nodes on the path (excepting
u) is a security check.
2. For every method M ,
insecure path is added to
summary(M ) iﬀ there is a path not containing a secu-
rity check from the entry node of M to a return node
of M in ECF G(M ).
Complexity Analysis In the above algorithm, it is easy to
see that each node of a control ﬂow graph is placed on Q at
most once if it is a node other than a method invocation; a
node which is a method invocation is placed on Q at most
twice (the second time is when it is removed from W Q(M(cid:48))
where M(cid:48) is the method invoked by the node). Hence the
complexity of the above algorithm is linear in the sum of the
sizes of the control ﬂow graphs of all the methods.
Algorithm for determining bad methods Now, we
present the algorithm for determining bad methods, which is
executed after the algorithm for insecure paths terminates.
We perform a search of the CF G(M ), for each method M ,
looking for a path from the entry node to a sensitive oper-
ation without a security check before it. We use the same
data structures as given above which are initialzed similarly.
The search of the control ﬂow graphs of all the methods is
done at the same time using the set data structure Q. The
only diﬀerence is in processing of a node u when it is re-
moved from Q. Let us say that u.method is M . If u is a
neutral node then search is continued from its successors. If
u is a security check or a return node then it is ignored.
If u is a method invocation that invokes method M(cid:48) then
the following actions are taken. First observe that there is
a path, not containing any security check, from the entry
105
X0X3RxY1Y2Y3Y0RyZ1Z3Z4Z0RzZ2Z5Summary(Z) = Summary(Y) = Summary(X) = X1X2Entry nodeSensitive operationSecurity checkMethod invocationRxReturn nodeNeutral nodeEdge in a bad pathInvokes YInvokes ZEdge in a insecure pathcheckNulledge that is removed. Will be explained in Section 4.X0Y0Z0RyRzInitialze();
For each method M
While Q (cid:54)= ∅ {
Set summary(M ) to be (cid:104)⊥,⊥(cid:105);
Remove a node u from Q;
If insecure path(u.method) : Continue;
Perform one of the following steps based on type of u
u is a sensitive operation or a neutral node :
For each v in u.successors
If v.visited = f alse
v.visited := true, add v to Q;
u is a return node :
add insecure path to summary(u.method),
For each v in W Q(u.method)
if ! insecure path(v.method) add v to Q;
u is a method invocation to method M(cid:48) :
set W Q(u.method) to the empty set;
If insecure path(M(cid:48))
For each v in u.successors
If v.visited = f alse
v.visited := true, add v to Q;
Else add u to W Q(M(cid:48));
u is a security check : Continue;}
Procedure Initialize() {
Q := ∅;
For each method M
W Q(M ) := ∅;
For each node u in CF G(M )
u.visited := f alse;
Add the entry node u of M to Q,
u.visited := true ; }
Figure 3: Algorithm for computing insecure path
summaries
node of M to u.
(If there were a check, then we would
have skipped the check and therefore wouldn’t have reached
u.) So if M(cid:48) is bad then M is also bad and is marked so.
However, if M(cid:48) is not currently marked as a bad, then we