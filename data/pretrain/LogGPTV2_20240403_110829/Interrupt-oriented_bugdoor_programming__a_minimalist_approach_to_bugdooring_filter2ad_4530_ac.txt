This exploit was designed to be carried out without any
speciﬁc interrupt timings required. Simply triggering two
NMIs would cause the GoodFET42-JTAG to turn on its
LED.
9.2 Loop execution exploit
Besides containing state accumulation primitives, an in-
terrupt handler may contain other useful primitives, such as
one that writes to a useful memory address. Proper tim-
ing and nesting of interrupts could possibly allow both state
accumulation and the writing of the accumulated value to
other locations in memory, to be used in combination to
aﬀect the target.
Figure 3: Loop execution exploit
The assembly source code of a simple ﬁrmware that con-
tains such a primitive can be found in Figure 3. The in-
terrupt handler in this ﬁrmware contains both a state accu-
mulation primitive (line 21) and a memory write primitive
(line 22). Using a series of well timed, nested interrupts,
this IOP program ﬁrst accumulates state, then writes it to
a destination memory location that controls the number of
times the ﬁrmware blinks its LEDs. The IOP exploit takes
place as follows:
(1) The SP (R1) is initialized at line 1, and the micro-
controller is conﬁgured trigger NMI interrupts upon
receiving a falling edge on the RST/NMI pin at line
2. The memory locations that will be used for state
accumulation and the ﬁnal memory write, 0x200 and
0x202 are cleared in lines 4 and 5. The LED is turned
oﬀ (if it is already on) from lines 6-7, and the NMI in-
terrupt is enabled by setting the NMI interrupt enable
bit at line 8. Finally, the register used as a counter for
the LED blinking loop from lines 10-14 is cleared.
(2) An NMI is triggered, which invokes the NMI handler
at line 18.
(cid:20)(cid:21)(cid:20)
dler at line 18.
(5) Step 3 is repeated.
(6) Another NMI is triggered, which invokes the NMI han-
dler at line 18.
(7) Step 3 is repeated.
(8) The state accumulated in 0x202 (a value of 0x3) is
written to 0x200.
(9) The ﬁrmware returns to line 21, where the nested NMI
was triggered.
(10) Step 8 is repeated. Repeating the memory write is es-
sentially a nop, since neither the source or destination
has changed.
(11) Step 9 is repeated.
(12) Step 8 is repeated. Repeating the memory write is es-
sentially a nop, since neither the source or destination
has changed.
(13) The ﬁrmware returns to line 10, where the ﬁrst NMI
was triggered.
(14) The LED blinks as many times as the value stored in
0x200 (i.e. 3 times). The ﬁrmware then spins from
lines 15-16.
This IOP program requires precise timing of nested NMIs
to work. Repeating steps 3-4 an arbitrary number of times
would allow the attacker to cause the GoodFET42-JTAG to
blink its LED an arbitrary number of times.
9.3 Stack growing exploit
All MSP430 interrupt handlers are essentially stack-grow-
ing primitives. The invocation of an interrupt handler itself,
as described earlier, causes the stack to grow by four bytes
since the SR and PC are pushed onto the stack. If an inter-
rupt could be nested (i.e., invoked while still executing its
handler), the interrupt handler itself could be seen as a state
accumulation tool that can decrement SP by 4 an arbitrary
number of times.
The MSP430 has a linear memory layout, and the stack
uses RAM, which precedes ROM in a higher address range
(see Figure 4). If the stack was grown deep enough (i.e. to-
wards lower addresses) by repeated invocations of the afore-
mentioned interrupt handler until the stack reaches ROM,
the push instructions executed by the microcontroller will
decrement SP without actually writing to top of the stack—
since ROM cannot be written to. Consequently, SP can be
made to point to any arbitrary word in ROM. Upon execu-
tion of the next ret or reti instruction, a word from ROM
will be loaded into PC, thereby redirecting control ﬂow to
the code that this word points to.
The hard and soft entry points for the MSP430’s Boot-
strap Loader (BSL) are stored in ROM at 0xC00 and 0xC02
respectively. As Goodspeed showed in [11], entering the BSL
at its soft entry point without clearing the password check
line 10. Causing SP to be decremented by two words to
0xC08. PC and SR are not actually written to memory,
since SP is pointing to ROM.
(3) The NMI handler clears the NMI interrupt ﬂag at line
11, and then re-enables NMIs by setting the NMI in-
terrupt enable bit at line 12.
(4) An NMI is triggered, causing SP to be decremented by
two words to 0xC04.
(5) Step 3 is repeated.
(6) An NMI is triggered, causing SP to be decremented by
two words to 0xC00.
(7) Step 3 is repeated.
(8) Since SP is now 0xC00, the ﬁrmware does not spin
in the loop from lines 14-16, and instead proceeds to
turn on the LED at lines 17-18 and execute the reti
instruction at line 19. This ﬁrst pops the word in ROM
at 0xC00 into SR, then the word in ROM at 0xC02 (i.e.
the BSL soft entry point) into PC. The microcontroller
is therefore starts executing its BSL with full privileges
(since the password check bit in R11 is set).
This exploit was designed to be carried out without any
speciﬁc interrupt timings required. Simply triggering three
NMIs would cause the GoodFET42-JTAG to turn on its
LED and enter the BSL with full privileges. However, even
without the loop checking the value of SP (lines 14 to 16),
this exploit is still possible to perform if the NMIs in step 2,
4, and 6 are properly timed.
10. PLANTING A BUGDOOR
An attacker able to read and modify target ﬁrmware source
code could introduce minimal changes that would leave the
target vulnerable to IOP attacks (i.e.
leave a “bugdoor” in
the ﬁrmware). To demonstrate this, we insert a bugdoor
into TinyOS [32], an open source operating system target-
ing low-power wireless embedded systems. Since TinyOS
was designed to be lightweight, there is no common kernel
running in the background of each TinyOS program.
In-
stead, TinyOS programs are compiled speciﬁcally for the
target device along with the operating system abstractions
required for the program to interface with device hardware.
By planting the bugdoor into a TinyOS MSP430 interrupt
handler, all MSP430 devices running TinyOS applications
that support such an interrupt would be made vulnerable to
IOP attacks.
We added two additional lines of code to the USART1
receive interrupt handler generated for the MSP430F1611
on the TelosB mote that makes the interrupt handler re-
entrant, as shown in Figure 6. This change transforms the
USART1 receive interrupt into an unbounded stack growing
primitive that can be used to perform the stack growing
exploit described in Section 9.3.
The disassembled binary of a TinyOS application (Mul-
tihopOscilloscope) compiled for a MSP430 device (TelosB)
target compiled with source code modiﬁcation contains four
additional lines of assembly (from 0xA3D2 to 0xA3D8) in its
interrupt handler, as shown in Figure 7.
This bugdoor, which enables privileged access to the MSP-
430 BSL, required the addition of a mere two lines of code.
Figure 4: MSP430F2618 16-bit memory map
bit in R11 allows the attacker to execute privileged BSL op-
erations, such as reading out its ﬁrmware. Nesting interrupt
handler invocations at a point in ﬁrmware where the bits in
R11 are set would therefore allow an attacker to enter the
MSP430 BSL with administrative privileges.
Figure 5: Stack growing exploit
The assembly source code of a simple ﬁrmware that con-
tains such a vulnerability can be found in Figure 5. This
IOP exploit ﬁrst sets all bits in R11, then grows the stack
using nested NMIs until it is deep enough for the next reti
instruction to pop the BSL soft entry point into PC. The
IOP exploit takes place as follows:
(1) The SP (R1) is initialized at line 1, and the micro-
controller is conﬁgured trigger NMI interrupts upon
receiving a falling edge on the RST/NMI pin at line 2.
All bits in R1 are set at line 4, and NMIs are enabled
at line 5. The ﬁrmware then spins at lines 6-7.
(2) An NMI is triggered, which invokes the NMI handler at
(cid:20)(cid:21)(cid:21)
TOSH_SIGNAL(UART1RX_VECTOR) {
uint8_t temp = U1RXBUF;
WRITE_SR( READ_SR | SR_GIE); //+set GIE
ME2 |= URXE1;
signal Interrupts.rxDone(temp);
//+set USART1RX IE
}
Figure 6: Modiﬁed TinyOS source code
.def __isr_3
push.w
A3C6
A3C6 __isr_3:
A3C6
A3C6
A3C8
A3CA
A3CC
A3CE
A3D2
A3D4
A3D6
A3D8
...
push.w
push.w
push.w
mov.b
mov.w
bis.w
mov.w
bis.b
R15
R14
R13
R12
&7Eh, R14
SR, R15
#8, R15
R15, SR
#10h, &5
; sig_UART1RX_VECTOR
; tmp = READ_SR
; tmp | SR_GIE
; SR = temp
; ME2 |= URXE1
Figure 7: Disassembly of binary produced by modi-
ﬁed TinyOS source
This additional code is not obviously malicious, will unlikely
be ﬂagged as suspicious by static analyzers, and it will likely
be passed oﬀ as a benign error if discovered by hand. This
small, malicious change could conceivably be pushed to the
TinyOS source tree, and if it was, would expose the many
embedded MSP430 devices that use TinyOS to the stack-
growing exploit.
11.
IOP BUGDOORS IN THE WILD?
Now that we showed a novel technique for “bugdooring”
ﬁrmware by injecting them with synthetic vulnerabilities ex-
ploitable by IOP, we can ask: do such vulnerabilities or back-
doors actually occur in the wild?
Our answer for now has to be, “we looked, but we haven’t
spotted any yet.” In the spirit of good science, even though
our search attempts were inconclusive, we ﬁnish with de-
scribing our tools and methods, and hope that they will help
other researchers who might be interested in IOP attacks.
11.1 Static analysis
To look for potential IOP programs in actual MSP430
ﬁrmware, we attempted static analysis of the ﬁrmware of ﬁve
MSP430-powered devices: EZ430U, EZ430URF, FET430UIF,
MSP430FET, and GoodFET. We did this manually using
IDA Pro and also added some automation using IDAPython
scripts and mspdebug functions that we wrote.
11.1.1 Manual examination in IDA Pro
In the ﬁrmware binaries we examined in IDA Pro, inter-
rupts were not re-enabled within interrupt handlers them-
selves, therefore preventing the nesting of interrupts and pre-
cluding the stack-growing attack described in Section 9.3.
Moreover, registers and memory always seemed to be prop-
erly set before use, therefore making state accumulation at-
tack described in Section 9.1 unlikely. However, it was clear
that interrupt handlers did not completely save and restore
CPU state before and after execution, which meant that
(cid:20)(cid:21)(cid:22)
most interrupt handlers probably modiﬁed CPU state in
some way after each invocation.
The following describes the static analysis tools we wrote
to automate looking for potential IOP programs. None of
these scripts/programs fully automated the IOP program
discovery and payload creation process; they were written
to automate certain portions of the static analysis process
and to narrow down segments of code/interrupt handlers
that might allow for the creation of an IOP program.
11.1.2 Unset register/memory use scanner
This is an IDAPython script that searches for instances
where a register or memory address is used to aﬀect state
or program behavior without ﬁrst setting it. For each in-
struction that uses a register/memory address as the source
operand in an instruction that redirects control ﬂow (e.g.
jmp, call) or performs a write to a register/memory (e.g.
mov, add, push), this script searches up to n instructions
backwards (where n is provided by the user)—including all
possible conditional branch paths to that instruction—to
check if that source register/memory address is set (e.g. by a
mov or clr instruction). This tool is meant to identify regis-
ters/memory addresses that might aﬀect program behavior
if their state is modiﬁed or accumulated.
11.1.3 Brute-force search
This is an mspdebug function we implemented speciﬁcally
for the simulator module. Given a certain register value
pair (R, V ), this program performs a brute-force search of
the space of possible CPU states, executing all possible se-
quences of timed interrupts up to n steps into the program
(where n is provided by the user). For each of these CPU
states the program reaches, if register R contains the value