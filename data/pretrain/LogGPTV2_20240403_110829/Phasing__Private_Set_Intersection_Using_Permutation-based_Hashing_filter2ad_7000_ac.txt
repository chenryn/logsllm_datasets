PSI protocols that are based on generic secure compu-
tation are of great importance due to their ﬂexibility (cf.
§3.4 for details). The best known construction of a circuit
computing the intersection (of σ-bit elements) is the SCS
circuit of [12] with about 3nσ log2 n AND gates and an
AND depth of Θ(log2 σ ·log2 n). We describe a new con-
struction of circuits with the same order of AND gates
(but with smaller constants), and a much smaller depth.
Our experiments, detailed in §8.1, demonstrate that the
new circuits result in much better performance.
The new protocol, which we denote as Circuit-
Phasing, is based on the two parties mapping their inputs
to hash tables before applying the circuit. The idea is
similar to the OT-based PSI protocol of [22] described
in §3.5, but instead of using OTs for the comparisons,
the protocol evaluates a pairwise-comparison circuit be-
tween each bin of P1 and P2 in parallel:
• Both parties use a table of size β = O(n) to store
their elements. Our analysis (§7) shows that setting
β = 2.4n reduces the error probability to be negligi-
ble for reasonable input sizes (28 ≤ n ≤ 224) when
setting the stash size according to Tab. 4.
• P2 maps its input elements to β bins using Cuckoo
hashing with two hash functions and a stash; empty
bins are padded with a dummy element d2.
• P1 maps its input elements into β bins using sim-
ple hashing. The size of the bins is set to be maxβ ,
a parameter that is set to ensure that no bin over-
ﬂows (see §7.1). The remaining slots in each bin are
padded with a dummy element d1 (cid:23)= d2. The analy-
USENIX Association  
24th USENIX Security Symposium  521
7
sis described in §7.1 shows how maxβ is computed
and is set to a value smaller than log2 n.
• The parties securely evaluate a circuit that compares
the element that was mapped to a bin by P2 to each
of the maxβ elements mapped to it by P1.
• Finally, each element in P2’s stash is checked for
equality with all n1 input elements of P1 by securely
evaluating a circuit computing this functionality.
• To reduce the bit-length of the elements in the
bins, and respectively the circuit size, the protocol
uses permutation-based hashing as described in §4.
(Note that using this technique is impossible with
SCS circuits of [12].)
A detailed analysis of the circuit size and depth
Let m be the size of P1’s input to the circuit with m =
β maxβ + sn1, i.e., for each of the β bins, P1 inputs maxβ
items as well as n1 items for each of the s positions in
the stash. The circuit computes a total of m comparisons
between the elements of the two parties. Each element
is of length σ(cid:29) bits, which is the reduced length of the
elements after being mapped to bins using permutation-
based hashing, i.e. σ(cid:29) = σ − log2 β .
A comparison of two σ(cid:29)-bit elements is done by com-
puting the bitwise XOR of the elements and then a tree
of σ(cid:29) − 1 OR gates, with depth (cid:27)log2 σ(cid:29)(cid:26). The topmost
gate of this tree is a NOR gate. Afterwards, the circuit
computes the XOR of the results of all comparisons in-
volving each item of P2. (Note that at most one of the
comparisons results in a match, therefore the circuit can
compute the XOR, rather than the OR, of the results of
the comparisons.) Overall, the circuit consists of about
m· (σ(cid:29) − 1) ≈ n1 · (maxβ + s)· (σ(cid:29) − 1) non-linear gates
and has an AND depth of (cid:27)log2 σ(cid:26).
Advantages Circuit-Phasing has several advantages
over the SCS circuit:
• Compared to the number of AND gates in the SCS
circuit, which is 3nσ logn, and recalling that σ(cid:29)  0. This means that Cuckoo
hashing achieves around 50% utilization of the bins. If
the number of hash functions h is increased to h > 2, a
much better utilization of bins can be achieved [6]. How-
ever, using h hash functions in our protocol requires P1 to
map each element h times into its bins using simple hash-
ing and requires P1 to send hn1 masks in the intersection
step of the protocol.
We detail in Tab. 1 the utilization and total communi-
cation of our PSI protocol for n1 = n2 = 220 and n2 =
28 (cid:25) n1 = 220, for σ = 32-bit elements with different
numbers of hash functions. We observe that there is a
tradeoff between the communication for the OTs and the
communication for the masks that are sent by P1. Our
goal is to minimize the total communication, and this is
achieved for h = 3 hash functions in the setting of n1 = n2
and for h = 2 in the setting of n2 (cid:25) n1. For n1 = n2 using
h = 3 instead of h = 2, as in the original protocol of [22],
reduces the overall communication by 33%.
Hashing failures: We observe that with OT-Phasing,
there is essentially no bound on the number of items that
the server can map to each speciﬁc bin, since the client
does not observe this value in any way (the message that
the client receives only depends on the total number of
items that the server has). However, the parameters used
USENIX Association  
24th USENIX Security Symposium  523
9
h
2
3
4
5
Util. [%]
50.0
91.8
97.7
99.2
#OTs
2.00n2 t
1.09n2 t
1.02n2 t
1.01n2 t
#Masks
2n1(cid:31)
3n1(cid:31)
4n1(cid:31)
5n1(cid:31)
Comm. [MB]
n1 = n2
148.0
99.8
105.3
114.6
n2 (cid:31) n1
17.0
25.5
34.0
42.5
Table 1: Overall communication for a larger number of
hash functions h. Communication is given for a) n1 =
n2 = 220 and b) n2 = 28 (cid:31) n1 = 220 elements of σ = 32-
bit length. Utilization according to [6].
in the protocol do need to ensure that the Cuckoo hashing
procedure does not fail. The analysis appears in §7.
7 Hashing Failures
The PSI schemes we presented use simple hashing (by
P1), and Cuckoo hashing (by P2).
In both hashing
schemes, the usage of bins (or a stash) of constant size,
might result in hashing failures if the number of items
mapped to a bin (or the stash) exceeds its capacity.
When hashing fails, the party which performed the
hashing has two options: (1) Ignore the item that can-
not be mapped by the hashing scheme. This essentially
means that this item is removed from the party’s input to
the PSI protocol. Consequently, the output of the compu-
tation might not be correct (although, if this type of event
happens rarely, the effect on correctness is likely to be
marginal). (2) Attempt to use a different set of hash func-
tions, and recompute the hash of all items. In this case
the other party must be informed that new hash functions
are used. This is essentially a privacy leak: for example,
the other party can check if the input set S of the ﬁrst
party might be equal to a set S(cid:29) (if a hashing failure does
not occur for S(cid:29) then clearly S(cid:29) (cid:28)= S). The effect of this
leak is likely to be weak, too, but it is hard to quantify.
The effect of hashing failures is likely to be marginal,
and might be acceptable in many usage settings (for ex-
ample, when measuring ad conversion rates it typically
does not matter if the revenue from a single ad view is
ignored). However, it is preferable to set the probability
of hashing failures to be negligibly small.
In OT-Phasing, P2 does not learn the number of items
that P1 maps to each bin, and therefore P1 can set the size
of the bins to be arbitrarily large. However, in that PSI
protocol P1 knows the size of the stash that is used in
the Cuckoo hashing done by P2. In Circuit-Phasing, each
party knows the size of the bins (or stash) that is used by
the other party. We are therefore interested in learning
the failures probabilities of the following schemes, and
bound them to be negligible, i.e., at most 2−40:
• §7.1:
Simple hashing in the Circuit-Phasing
scheme, where n items are mapped using two in-
dependent functions to 2.4n bins. This is equivalent
to mapping 2n items to 2.4n bins.
• §7.2: Cuckoo hashing, using 2.4n bins and either 2-
way hashing (for Circuit-Phasing), or 3-way hash-
ing (for OT-Phasing). The failure probability for
3-way hashing is smaller than for 2-way hashing
(since there is an additional bin to which each item
can be mapped), and therefore we will only examine
the failure probability of 2-way Cuckoo hashing.
7.1 Simple Hashing
It was shown in [23] that when n balls are mapped at
random to n bins then the maximum number of elements
in a bin is with high probability lnn
lnlnn (1 + o(1)). Let us
examine in more detail the probability of the following
event, “2n balls are mapped at random to 2.4n bins, and
the most occupied bin has at least k balls”:
Pr(∃bin with ≥ k balls)
≤ 2.4n· Pr(bin #1 has ≥ k balls)
k(cid:30)(cid:31) 1
≤ 2.4n(cid:31)2n
2.4n(cid:30)k
k (cid:30)k(cid:31) 1
2.4n(cid:30)k−1