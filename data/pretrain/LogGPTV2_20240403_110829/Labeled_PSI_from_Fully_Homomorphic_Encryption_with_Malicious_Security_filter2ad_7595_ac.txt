From a security perspective it is now safe to send X(cid:48) to the receiver, who can infer the intersection
from X(cid:48) ∩ Y (cid:48). However, this approach incurs a very high communication overhead, since X(cid:48) can
easily be over a gigabyte. Several recent works [44,47] try to tackle this problem by encoding X(cid:48) in
a compressed format, e.g. a Bloom ﬁlter or a cuckoo ﬁlter. However, the communication remains
linear in the set |X|, and the compression can introduce false positives such as in the case of [47].
Our approach sidesteps this issue by applying an FHE-based PSI protocol to the sets X(cid:48) and Y (cid:48).
Overall, the communication complexity of our protocol is O(|Y | log |X|), as opposed to O(|Y |+|X|)
in the case of e.g. [44,47]. As previously described, we do not need to worry about noise ﬂooding
unlike [12], since the OPRF already provides suﬃcient protection. This allows our protocol to
use FHE parameters that are highly optimized, improving our performance and communication
overhead.
More broadly, applying the OPRF to the sets also eliminates the need to perform two other
procedures which protect the sender’s set. First, recall that the sender performs simple hashing
where its |X| items are mapped to O(|Y |) bins using three hash functions. In the original [12]
protocol all of these bins must then be padded with dummy items to an upper bound. This prevents
some partial information from being leaked to the receiver, e.g. m items hash to bin i, which implies
that |{x ∈ X | h(x) = i}| = m. However, in the case that the OPRF is applied, the number of
items in any given bin is a function of X(cid:48), and therefore can be made public.
F (y) = r(cid:81)
Secondly, the polynomials that the sender evaluates using the receiver’s set need not be ran-
domized. Recall that in [12] the sender evaluates homomorphically a polynomial of the form
x∈X (y − x), where r ← F∗ is sampled uniformly at random each time the protocol
is executed. This additional randomization was required to ensure that the receiver does not learn
the product of diﬀerences between y and X. It also has a signiﬁcant impact on performance, as it
increases the multiplicative depth by one. However, after the OPRF is applied, this polynomial is
formed with respect to X(cid:48)—not X—and therefore revealing the product of diﬀerences is no longer
a security risk, since X(cid:48) can securely be made public.
We consider two types of OPRFs which have diﬀerent trade-oﬀs. The ﬁrst is a Diﬃe-Hellman
based OPRF described by [31,47], which allows the sender to reuse OPRF values with many inde-
pendent receivers, allowing for the cost of applying the OPRF to the sender’s set to be amortized.
Alternatively, an oblivious transfer based OPRF [42,36] case be used, which is computationally
more eﬃcient, but can not be reused across several receivers.
q. The sender has a key α ∈ Z∗
4.3 DH-OPRF Pre-Processing
The Diﬃe-Hellman based OPRF protocol of [31] computes the function Fα(x) = H(cid:48)(H(x)α), where
H is a hash function modeled as a random oracle. This style of OPRF has been used several times
in the context of PSI, e.g. in [38,23,31,47]. In more detail, let G be a cyclic group with order q,
where the One-More-Gap-Diﬃe-Hellman (OMGDH) problem is hard. H is a random oracle hash
q and the receiver has an input x ∈ {0, 1}∗.
function with range Z∗
The receiver ﬁrst samples β ← Z∗
q and sends H(x)β to the sender, who responds with (H(x)β)α.
The receiver can then output H(cid:48)(H(x)α) = H(cid:48)(((H(x)β)α)1/β). The outer hash function H(cid:48) is used
to map the group element to a suﬃciently long bit string, and helps facilitate extraction in the
malicious setting.
In particular, by observing the queries made to H(xi), the simulator can collect a list of pairs
{(xi, H(xi))} which are known to the receiver. From this set the simulator can compute the set
A = {(xi, H(xi)α)}. For some subset of the H(xi), the receiver sends {H(xi)βi} to the simulator,
who sends back {H(xi)βiα}. For the receiver to learn the OPRF value for xi, it must send H(xi)α
to the random oracle H(cid:48). At this time the simulator extracts xi if (xi, H(xi)α) ∈ A. Although
this OPRF does not facilitate extracting all xi at the time the ﬁrst message is sent, extraction is
performed before the receiver learns the OPRF value, which will be suﬃcient for our purposes.
In the context of our PSI protocol, this OPRF has the property that the sender can use the
same key with multiple receivers. This allows the sender, who has a large and often relatively static
set, to pre-process its set only once. This is particularly valuable since our protocol also allows for
eﬃcient insertions and deletions of data from the pre-processed set.
4.4 OT-OPRF Pre-Processing
An alternative approach is to use recent advances in Oblivious Transfer (OT) extension protocols
[36,42], which enable a functionality very similar to a traditional OPRF. The relevant diﬀerence
is that the receiver can only learn one OPRF output per key. This restriction mandates that the
OPRF be used in a diﬀerent way. In particular, we follow the PSZ paradigm [45,43,46,36], where
the OPRF is applied to the items after cuckoo hashing. First the parties perform cuckoo hashing,
which ensures that the receiver has at most one item per hash table bin. The parties then run an
OT-based OPRF protocol, where the sender assigns a unique key to each bin. The receiver updates
the values in the cuckoo table with the OPRF outputs, while the sender similarly updates the values
in its simple hash table. Note that the sender can learn an arbitrary number of OPRF outputs per
key, which allows it to update all the values in each bin.
Another restriction with this approach is that the sender must pad its simple hash table with
dummy items to ensure that the receiver does not infer any partial information. That is, since the
OPRF is applied after hashing, the number of items in any given bin is a function of X instead of
the hashed set X(cid:48). It is therefore critical that the bins be padded to their maximum possible size,
as was done in [12].
As with the Diﬃe-Hellman based OPRF, the receiver’s input can be extracted. The exact details
how how these protocols extract is quite involved, and we defer to [42] for a detailed explanation.
5 Labeled PSI
We present two related approaches for enabling Labeled PSI. The ﬁrst is compatible with the [12]
protocol, while the latter is optimized to take advantage of the OPRF pre-processing phase. This
section will be presented in terms of the receiver with a singleton set {y} and obtaining the label
(cid:96)i if and only if the sender has a pair (xi, (cid:96)i) in its set for which y = xi. The approaches naturally
extend to the general setting by using cuckoo hashing on the receiver’s side.
5.1 Compatible With CLR17
r∗(cid:81)
We employ an idea of interpolation polynomials, also used in [23], to build our labeled PSI protocol.
Recall that in the [12] protocol the server homomorphically evaluates the polynomial F (y) =
x∈X (x− y), where r∗ is a random nonzero element in some ﬁnite ﬁeld F, and the coeﬃcients of
the polynomial F (y) are elementary symmetric polynomials in the x ∈ X. It has the property that
if y ∈ X, then F (y) = 0; otherwise F (y) is a random element in F∗. In the Labeled PSI case, the
sender’s input is a list of pairs {(xi, (cid:96)i)}D
i=1, where for simplicity we assume xi and (cid:96)i are elements
of F. Our goal is to construct a polynomial G, such that for any y ∈ F
(cid:40)
G(y) =
(cid:96)i
random element in F
if y = xi;
otherwise.
Note that there exists a polynomial H(x) of degree less than D = |Y |, such that H(yi) = (cid:96)i for all
1 ≤ i ≤ D. Then, we select r ∈ F randomly, and let
G(y) = H(y) + rF (y).
It is easy to verify that G has the desired property: if y = xi, then G(y) = H(xi) = (cid:96)i; if y /∈ X,
then since F (y) (cid:54)= 0 and r is random, we know that G(y) is a random element in F. At a high level,
our protocol has the receiver encrypt and send each of its items y using the FHE scheme; the sender
evaluates the polynomials G and F homomorphically, and sends the results back. The receiver then
decrypts and obtains (F (y), G(y)), which is either equal to (0, pi) if y = xi, or uniformly random
in F∗ × F.
Note that in the above discussion, we implicitly assumed that labels are of the same size as the
items. In case the labels are longer than the items, we can break down each label in chunks, and
have the server repeat its computation several times. Finally, the receiver can decrypt the parts of
the label and re-assemble. The security proof is not aﬀected, because in the case of a non-match,
all the decrypted parts will be random strings.
Communication complexity We utilize the optimizations in [12], with the modiﬁcation that the
sender homomorphically evaluates several polynomials instead of one. Hence, the communication
complexity for our Labeled PSI is equal to O(|Y | log |X|σ + |Y |(cid:96)), and the online computation
complexity is O(|X|(cid:96)), where σ and (cid:96) denote the lengths of items and labels, respectively. Note
that by hashing the items beforehand, we can assume σ = λ + log |X| + log |Y |, where λ is the
statistical security parameter.
Computational complexity This Labeled PSI protocol introduces two additional computational
tasks on top of the PSI protocol of [12]. In the oﬄine phase, the sender needs to interpolate a
polynomial of degree B(cid:48) ≈ |X|
mα . The Newton interpolation algorithm has complexity O(B(cid:48)2), and is
fast for small values of B(cid:48). The algorithm needs to be executed mα times, so the total complexity
|X|2
mα ) · (cid:96)/σ. In the online phase, the sender needs to evaluate the interpolated polynomials
is O(
· (cid:96)/σ) FHE operations. Compared to the complexity
homomorphically, which has a cost of O(
of the PSI protocol in [12], the sender’s computation of labeled PSI grows by a factor of (cid:96)/σ, i.e.
by the ratio of the label length and the item length.
|X||Y |
m2
5.2 OPRF Optimized Labeled PSI
If the parties perform the OPRF pre-processing phase, this procedure can be signiﬁcantly improved.
The core idea is to ﬁrst encrypt all of the labels using the associated OPRF values as the key. All of
these encrypted labels can then be sent to the receiver, who uses the OPRF values for the items in
its set to decrypt the associated labels. We stress that this approach requires no security guarantees
from the homomorphic encryption scheme to ensure that information is not leaked to the receiver
about labels for items not in the intersection.
To avoid linear communication when sending these encrypted labels, we have the sender evaluate
a polynomial which interpolates the encrypted labels, eﬀectively compressing the amount of data
that needs to be communicated. In more detail, the sender ﬁrst computes (x(cid:48)
i ) = OP RFk(xi)
for all xi in its set X. Here, x(cid:48)
i will be used as the OPRF value for computing the intersection as
i will be used to one-time-pad7 encrypt the label as (cid:96)(cid:48)
i = (cid:96)i + x(cid:48)(cid:48)
before, while the second part x(cid:48)(cid:48)
i .
The sender then computes a polynomial G with minimal degree such that G(x(cid:48)
i) = (cid:96)(cid:48)
i.
i, x(cid:48)(cid:48)
One of the main advantages of this approach is that the degree of the online computation is
reduced due to G not requiring additional randomization. Recall from above that the result of
evaluating the symmetric polynomial F has to be randomized by multiplying with a nonzero r.
This increases the degree of the computation by one, which can require larger FHE parameters.
Looking forward, our approach for improved security against a malicious sender requires the
use of Labeled PSI, but interestingly does not require the evaluated symmetric polynomial F (y) to
be sent back to the receiver. As such, by not requiring F in the computation of the labels, we gain
an additional performance improvement in the malicious setting by not computing or evaluating
F .
5.3 Full Protocol
We present our full protocol for labeled PSI in Figure 2.
7 Note that x(cid:48)(cid:48)
i can be extended to an arbitrary size (cid:96)i using a PRG.
Input: Receiver inputs set Y ⊂ {0, 1}∗ of size Ny; sender inputs set X ⊂ {0, 1}∗ of size Nx. Nx, Ny are public.
κ and λ denote the computational and statistical security parameters, respectively.
Output: The receiver outputs Y ∩ X; the sender outputs ⊥.
1. [Sender’s OPRF] The sender samples a key k for the [31] OPRF F : {0, 1}∗ → {0, 1}κ. The sender
updates its set to be X(cid:48) = {H(Fk(x)) : x ∈ X}. Here H is a random oracle hash function with a range of
σ = log2(NxNy) + λ bits which is sampled using a coin ﬂipping protocol.
2. [Hashing] The parameter m is agreed upon such that cuckoo hashing Ny balls into m bins succeed with
probability ≥ 1 − 2−λ. Three random hash function h1, h2, h3 : {0, 1}σ → [m] are agreed upon using coin
ﬂipping. The sender inserts all x ∈ X(cid:48) into the sets B[h1(x)],B[h2(x)],B[h3(x)].
scheme. They choose t, d to be large enough so that d log2 t ≥ σ.
windowing parameter w ∈ {21, 22, . . . , 2log2 B} as to minimize the overall cost.
(a) [Splitting] For each set B[i], the sender splits it into α subsets of size at most B, denoted as
3. [Choose FHE parameters] The parties agree on parameters (n, q, t, d) for an IND-CPA secure FHE
4. [Choose circuit depth parameters] The parties agree on the split parameter B < O(|Y |/m) and
5. [Pre-Process X]
B[i, 1], . . . ,B[i, α].
i. [Symmetric Polynomial] For each set B[i, j], the sender computes the symmetric polynomial
ii. [Label Polynomial] If the sender has labels associated with its set, then for each set B[i, j], the
td such that Pi,j(x) = (cid:96) for x ∈ B[i, j] where (cid:96) is the
td such that Si,j(x) = 0 for x ∈ B[i, j].
sender interpolates the polynomial Pi,j over F
label associated with x.
(b) [Computing Coeﬃcients]
Si,j over F
(c) [Batching]
View the polynomials Si,j as a matrix where i indexes the row. For each set of n/d rows (non-overlapping
and contiguous), consider them as belonging to a single batch. For b-th batch and each j, take the k-th
coeﬃcient of the n/d polynomials, and batch them into one FHE plaintext polynomial Sb,j,k.
For Labeled PSI, perform the same batching on the label polynomials Pi,j to form batched FHE
plaintext polynomials P b,j.
Fig. 1. Full Labeled PSI protocol (sender’s oﬄine pre-processing).
6 PSI with Computation
A recent trend in PSI protocols has been to enable additional computation on the intersection [44,19,20,30].
However, in our setting where the set sizes are extremely unbalanced these protocols impose (at
least) a linear communication overhead. We show that our protocol can be extended to output the
intersection along with the associated labels in a form suitable for further computation. With these
techniques, both parties can input a set of key-value pairs {(xi, (cid:96)i)}i,{(yj, tj)}j where the values
{((cid:96)i, tj)} with matching keys xi = yj are the input to the function
f ({((cid:96)i, tj)})
The communication complexity of this computation is O(|Y | log |X| + |f|) where |f| is the com-
munication complexity of computing f on |Y | inputs. This deviates from other techniques such as