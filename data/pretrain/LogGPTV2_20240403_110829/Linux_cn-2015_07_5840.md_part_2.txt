    $x++;
}
```
或者应该避免修改参数：
```
function foo($x) {
    $newX = $x + 1;
    var_dump(func_get_arg(0));
}
```
* 类似的，异常回溯也不再显示传递给函数的原始值，而是修改后的值。例如：
```
function foo($x) {
    $x = 42;
    throw new Exception;
}
foo("string");
```
现在堆栈跟踪的结果是：
```
Stack trace:
#0 file.php(4): foo(42)
#1 {main}
```
而以前是：
```
Stack trace:
#0 file.php(4): foo('string')
#1 {main}
```
这并不会影响到你的代码的运行时行为，值得注意的是在调试时会有所不同。
同样的限制也会影响到 debug\_backtrace() 及其它检查函数参数的函数。
相关 RFC: 
#### 整数处理的变化
* 无效的八进制表示（包含大于7的数字）现在会产生编译错误。例如，下列代码不再有效：
```
$i = 0781; // 8 不是一个有效的八进制数字！
```
以前，无效的数字（以及无效数字后的任何数字）会简单的忽略。以前如上 $i 的值是 7，因为后两位数字会被悄悄丢弃。
* 二进制以负数镜像位移现在会抛出一个算术错误：
```
var_dump(1 >> -1);
// ArithmeticError: 以负数进行位移
```
* 向左位移的位数超出了整型宽度时，结果总是 0。
```
var_dump(1 > 64);  // int(0)
var_dump(-1 >> 64); // int(-1)
```
相关 RFC: 
#### 字符串处理的变化
* 包含十六进制数字的字符串不会再被当做数字，也不会被特殊处理。参见例子中的新行为：
```
var_dump("0x123" == "291");     // bool(false)     (以前是 true)
var_dump(is_numeric("0x123"));  // bool(false)     (以前是 true)
var_dump("0xe" + "0x1");        // int(0)          (以前是 16)
var_dump(substr("foo", "0x1")); // string(3) "foo" (以前是 "oo")
// 注意：遇到了一个非正常格式的数字
```
filter\_var() 可以用来检查一个字符串是否包含了十六进制数字，或这个字符串是否能转换为整数：
```
$str = "0xffff";
$int = filter_var($str, FILTER_VALIDATE_INT, FILTER_FLAG_ALLOW_HEX);
if (false === $int) {
    throw new Exception("Invalid integer!");
}
var_dump($int); // int(65535)
```
* 由于给双引号字符串和 HERE 文档增加了 Unicode 码点转义格式（Unicode Codepoint Escape Syntax）， 所以带有无效序列的 "\u{" 现在会造成错误：
```
$str = "\u{xyz}"; // 致命错误：无效的 UTF-8 码点转义序列
```
要避免这种情况，需要转义开头的反斜杠：
```
$str = "\\u{xyz}"; // 正确
```
不过，不跟随 { 的 "\u" 不受影响。如下代码不会生成错误，和前面的一样工作：
```
$str = "\u202e"; // 正确
```
相关 RFC:
* 
* 
#### 错误处理的变化
* 现在有两个异常类： Exception 和 Error 。这两个类都实现了一个新接口： Throwable 。在异常处理代码中的类型指示也许需要修改来处理这种情况。
* 一些致命错误和可恢复的致命错误现在改为抛出一个 Error 。由于 Error 是一个独立于 Exception 的类，这些异常不会被已有的 try/catch 块捕获。
可恢复的致命错误被转换为一个异常，所以它们不能在错误处理里面悄悄的忽略。部分情况下，类型指示失败不再能忽略。
* 解析错误现在会生成一个 Error 扩展的 ParseError 。除了以前的基于返回值 / error*get*last() 的处理，对某些可能无效的代码的 eval() 的错误处理应该改为捕获 ParseError 。
* 内部类的构造函数在失败时总是会抛出一个异常。以前一些构造函数会返回 NULL 或一个不可用的对象。
* 一些 E\_STRICT 提示的错误级别改变了。
相关 RFC:
* 
* 
* 
* 
#### 其它的语言变化
* 静态调用一个不兼容的 $this 上下文的非静态调用的做法不再支持。这种情况下，$this 是没有定义的，但是对它的调用是允许的，并带有一个废弃提示。例子：
```
class A {
    public function test() { var_dump($this); }
}
// 注意：没有从类 A 进行扩展
class B {
    public function callNonStaticMethodOfA() { A::test(); }
}
(new B)->callNonStaticMethodOfA();
// 废弃：非静态方法 A::test() 不应该被静态调用
// 提示：未定义的变量 $this
NULL
```
注意，这仅出现在来自不兼容上下文的调用上。如果类 B 扩展自类 A ，调用会被允许，没有任何提示。
* 不能使用下列类名、接口名和特殊名（大小写敏感）：
```
bool
int
float
string
null
false
true
```
这用于 class/interface/trait 声明、 class\_alias() 和 use 语句中。
此外，下列类名、接口名和特殊名保留做将来使用，但是使用时尚不会抛出错误：
```
resource
object
mixed
numeric
```
* yield 语句结构当用在一个表达式上下文时，不再要求括号。它现在是一个优先级在 “print” 和 “=>” 之间的右结合操作符。在某些情况下这会导致不同的行为，例如：
```
echo yield -1;
// 以前被解释如下
echo (yield) - 1;
// 现在被解释如下
echo yield (-1);
yield $foo or die;
// 以前被解释如下
yield ($foo or die);
// 现在被解释如下
(yield $foo) or die;
```
这种情况可以通过增加括号来解决。
* 移除了 ASP () 标签。
RFC: 
* 不支持以引用的方式对 new 的结果赋值。
* 不支持对一个来自非兼容的 $this 上下文的非静态方法的域内调用。细节参见：  。
* 不支持 ini 文件中的 # 风格的备注。使用 ; 风格的备注替代。
* $HTTP\_RAW\_POST\_DATA 不再可用，使用 php://input 流替代。
### 标准库的变化
* call\_user\_method() 和 call\_user\_method\_array() 不再存在。
* 在一个输出缓冲区被创建在输出缓冲处理器里时， ob\_start() 不再发出 E\_ERROR，而是 E\_RECOVERABLE\_ERROR。
* 改进的 zend\_qsort （使用 hybrid 排序算法）性能更好，并改名为 zend\_sort。
* 增加静态排序算法 zend\_insert\_sort。
* 移除 fpm-fcgi 的 dl() 函数。
* setcookie() 如果 cookie 名为空会触发一个 WARNING ，而不是发出一个空的 set-cookie 头。
### 其它
* Curl:
	+ 去除对禁用 CURLOPT\_SAFE\_UPLOAD 选项的支持。所有的 curl 文件上载必须使用 curl\_file / CURLFile API。
* Date:
	+ 从 mktime() 和 gmmktime() 中移除 $is\_dst 参数
* DBA