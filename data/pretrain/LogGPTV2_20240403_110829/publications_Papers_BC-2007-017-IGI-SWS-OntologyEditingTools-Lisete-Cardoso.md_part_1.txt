Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
Editing Tools for Ontology Construction
Jorge Cardoso
Department of Mathematics and Engineering
University of Madeira
9000-039 Funchal, Portugal
PI:EMAIL
Ana Lisete Nunes Escórcio
Department of Exact Science and Technology
Escola Básica e Secundária do Carmo
9300 Câmara de Lobos, Portugal
PI:EMAIL
Abstract: This chapter gives an overview of some editing tools for ontology
construction. At the present time, the development of a project like the one of
building an ontology demands the use of a software tool. Therefore, it is given a
synopsis of the tools that the authors consider more relevant. This way, if you are
starting out on an ontology project, the first reaction is to find a suitable ontology
editor. Furthermore, the authors hope that by reading this chapter, it will be
possible to choose an editing tool for ontology construction according to the
project goals. The tools have been described following a list of features. The
authors believe that the following features are pertinent: collaborative ontology
edition, versioning, graphical tree view, OWL editor and many others (see annex
2).
Keywords: knowledge base; meta model; data sharing; data modeling;
knowledge representation; knowledge based system; knowledge sharing;
semantic data model; data semantics; ontologies; xml.
Introduction
The World Wide Web is mainly composed of documents written in HTML (Hypertext
Markup Language). This language is useful for visual presentation since it is a set of
“markup” symbols contained in a Web page intended for display on a Web browser.
Humans can read Web pages and understand them, but their inherent meaning is not
shown in a way that allows their interpretation by computers. The information on the
Web can be defined in a way that can be used by computers not only for display
purposes, but also for interoperability and integration between systems and applications
(Cardoso, 2005).
“The Semantic Web is not a separate Web but an extension of the current one, in
which information is given a well-defined meaning, better enabling computers and
1
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
people to work in cooperation” (Berners-Lee et al., 2001). The Semantic Web was made
through incremental changes by bringing machine readable descriptions to the data and
documents already on the Web. In recent times, instead of a Web site comprising a
collection of manually constructed HTML pages, server-side applications and database
access techniques are used to dynamically create Web pages directly in response to
requests from user’s browsers. The technologies available to dynamically create Web
pages based on databases information were insufficient for requirements of
organizations looking for application integration solutions. Business required their
heterogeneous systems and applications to communicate in a transactional manner.
Ontologies can be used to increase communication either between humans and
computers. An ontology is a shared conceptualization of the world. Ontologies consist
of definitional aspects such as high-level schemas and assertional aspects, entities,
attributes, interrelationships between entities, domain vocabulary and factual
knowledge, all connected in a Semantic manner (Sheth, 2003). They have generally
been associated with logical inferencing and recently have begun to be applied to the
Semantic Web. Ontologies provide specific tools to organize and provide a useful
description of heterogeneous content. The three major uses of ontologies are:
• To assist in communication between humans;
• To achieve interoperability and communication among software systems;
• To improve the design and the quality of software systems.
The most prominent markup language for publishing and sharing data using
ontologies on the internet is the Web Ontology Language (OWL, 2004). There are
several ontology development tools for domain modeling, for building knowledge base
systems, for ontology visualization, for project management or other modeling tasks.
Many of the tools are research prototypes that have been built for a particular project or
for an Institute/University. There has been a significant growth in the number of
ontology technologies products.
After studying Michael Deny’s Survey on Ontology Tools and reading the paper The
Hitchhiker’s Guide to Ontology Editors of Loredana Laera and Valentina Tamma we
decided to do an update of the tools that are available. Some of the tools described in
the Michael Deny’s Survey either were no longer available (the project has finished) or
have been improved. There are also new tools and new languages since there are new
projects that demand so. In composing the list shown on table 1, we have selected the
tools that comprise some of the following features: are robust and ready to be used; free
and open source; provide support to most of the activities involved in the ontology
development process and ontology practice; support Resource Description Framework
(RDF), Resource Description Framework Schema (RDFS) and Web Ontology
Language (OWL); offer collaborative environment; provide multiple ontology
environment; offer server-based environment with support for consistency checking;
offer easy-to-use functionality for visual creation and editing; offer a query builder;
support a methodology; support editing formal axioms and rules; support the growth of
large scale ontologies; support versioning; promote interoperability; has a reasoner; has
a graphical view; promotes easy and fast navigation between concepts; has tutorial
support; and offers Plug-ins.
We have chosen the following tools: Protégé; OntoEdit; DOE (Differential Ontology
Editor); IsaViz; Ontolingua; Altova SemanticWorks 2006; OilEd; WebODE; pOWL
and SWOOP.
Protégé is one of the most widely used ontology development tool. It is free and open
source. It is an intuitive editor for ontologies and there are plug-ins available to carry
2
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
out some of the tasks for building an ontology. OntoEdit is an ontology editor that
integrates numerous aspects of ontology engineering. OntoEdit environment supports
collaborative development of ontologies. DOE is a simple prototype developed with
Java that allows users to build ontologies according to the Bruno Bachimont proposed
methodology. IsaViz is a visual environment for browsing and authoring RDF models
as graphs. Ontolingua was built to ease the development of ontologies with a form-
based Webinterface.
Altova Semantic Works is a commercial visual Semantic Web editor that offers easy-
to-use functionality for visual creation and editing. It can be downloaded for 30 days
free evaluation period. OilEd is an editor that allows the user to construct and
manipulate DAML+OIL (DAML- DARPA Agent Markup Language; OIL-Ontology
Inference Layer) and OWL ontologies and which uses a reasoner to classify and check
consistency of ontologies. It is provided free of charge. WebODE is the web counterpart
for ODE (Ontology Design Environment). It has support for multiple-users. This editor
gives support to the methodology Methontology. pOWL is an open source ontology
management tool in a collaborative Web enabled environment. SWOOP is a Web-based
OWL ontology editor and browser. This editor has default plug-ins for different
presentation syntax for rendering ontologies.
The main purpose of this chapter is to give an overview of some of the ontology tools
available at the present time. This way, if you are starting out on an ontology project,
the initial step is to find a suitable ontology editor.
PROTÉGÉ
Protégé (Noy et al., 2001) is one of the most widely used ontology development tool
that was developed at Stanford University. Since Protégé is free and open source, it is
supported by a large community of active users. It has been used by experts in domains
such as medicine and manufacturing for domain modeling and for building knowledge-
base systems. Protégé provides an intuitive editor for ontologies and has extensions for
ontology visualization, project management, software engineering and other modeling
tasks.
In early versions, Protégé only enabled users to build and populate frame-based
ontologies in accordance with the Open Knowledge Base Connectivity protocol
(OKBC). In this model, an ontology consisted of a set of classes organized in a
subsumption hierarchy, a set of slots associated to classes to describe their properties
and relationships, and a set of instances of those classes. Protégé editor included support
for classes and class hierarchies with multiple inheritance; templates and slots;
predefined and arbitrary facets for slots, which included permitted values, cardinality
restrictions, default values, and inverse slots; metaclasses and metaclass hierarchy.
3
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
Figure 1: Protégé editor
While the first architecture of Protégé was based on frames, in 2003 it has been
extended to support OWL. This extension has attracted many users captivated by the
Semantic Web vision. The OWL plug-in extends the Protégé platform into an ontology
editor for the OWL enabling users to build ontologies for the Semantic Web. The OWL
plug-in allows users to load, save, edit and visualize ontologies in OWL and RDF. It
also provides interfaces for Description Logic Reasoners such as Racer.
Protégé ontologies can be exported into a variety of formats including RDF(S), OWL,
and Extended Mark-up Language (XML) Schema. The current Protégé version can be
used to edit classes and their characteristics, to access reasoning engines, to edit and
execute queries and rules, to compare ontology versions, to visualize relationships
between concepts, and to acquire instances using a configurable graphical user
interface. Protégé is a tool installed locally in a computer and does not allow
collaborative editing of ontologies by groups of users.
Protégé can be extended by way of a plug-in architecture and a Java-based
Application Programming Interface (API) for building knowledge-base tools and
applications. Protégé is based on Java and provides an open-source API to develop
Semantic Web and knowledge-base stand-alone applications. External Semantic Web
applications can use the API to directly access Protégé knowledge bases without
running the Protégé application. An OWL API is also available to provide access to
OWL ontologies. Its extensible architecture makes it suitable as a base platform for
ontology-based research and development projects. Protégé also includes a
Programming Development Kit (PDK), an important resource for programmers that
describe how to work directly with Protégé APIs and illustrates how to program plug-in
extensions for Protégé.
Several plug-ins are available. For example, JSave (http://protege.stanford.edu/plug-
ins/jsave/) is an application plug-in to generate Java class definition stubs for Protégé
classes and Protégé Web Browser is a Java-based Web application that allows users to
share Protégé ontologies over the Internet. The WordNet plug-in
(http://protege.stanford.edu/plug-ins/wordnettab/wordnet_tab.html) provides Protégé
users an interface to WordNet knowledge base. Users can easily annotate a Protégé
4
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
knowledge base using information from WordNet database. The information in
WordNet can be searched by name and then be used to annotate ontologies with terms,
concept IDs, synonyms, and relations.
The XML Schema (http://faculty.washington.edu/gennari/Protege-plug-
ins/XMLBackend/XMLBackend.html) is a backend plug-in that transforms a Protégé
knowledge base into XML. The plug-in generates an XML Schema file describing the
Protégé knowledge model and an XML file where the classes and instances are stored.
The UML plug-in (http://protege.stanford.edu/plug-ins/uml/) is also a backend plug-in
which provides an import and export mechanism between the Protégé knowledge model
and the object-oriented modeling language UML. To enables the exchange of ontologies
and UML class diagrams, the UML plug-in uses the standard format for UML diagram
exchange, XMI, which is supported by major CASE tools. The use of the XMI standard
enables users to work with Protégé in combination with Software Engineering tools and
Integrated Development Environments.
The DataGenie (http://faculty.washington.edu/gennari/Protege-plug-
ins/DataGenie/index.html) is an import/export plug-in that allows reading and creating a
knowledge model from relational databases using JDBC. Users can select a proper
subset of a relational database to be converted into Protégé classes. Typically, during
the conversion, tables become classes and attributes becomes slots. The Docgen
(http://protege-docgen.sourceforge.net/) is also an import/export plug-in that allow users
to create reports describing Protégé knowledge bases or ontologies. Classes, instances
and documentation can be exported to various output formats such as HTML, Dynamic
Hypertext Markup Language (DHTML), PDF, and XML.
Plug-ins are also available to carry out rule-based programming using the information
stored in a Protégé frame-based knowledge base. Two worth mentioning examples are
JessTab (http://www.ida.liu.se/~her/JessTab/) and Algernon (http://algernon-
j.sourceforge.net/doc/algernon-protege.html). JessTab is a plug-in that provides a Jess
console window where it is possible to interact with Jess while running Protégé. This
plug-in extends Jess with supplementary features that map Protégé knowledge bases to
Jess facts. Users can deploy applications that handle Protégé knowledge bases and react
when patterns in the knowledge base are found. Algernon is a system implemented in
Java that performs forward and backward inference of frame-based knowledge bases.
Compared to Jess, Algernon operates directly on Protégé knowledge bases rather than
requiring a mapping operation to and from a separate memory space.
The PROMPT plug-in (Noy and Musen, 2003) allows to manage multiple ontologies
within Protégé, mainly compare versions of the same ontology, merge ontologies into
one, and extract parts of an ontology.
The OWL-S Editor plug-in (http://owlseditor.semwebcentral.org/) is an easy-to-use
editor which allows loading, creating, managing, and visualizing OWL-S services.
OWL-S (formerly DAML-S) is emerging as a Web service description language that
semantically describes Web Services using OWL ontologies. OWL-S consists of three
parts expressed with OWL ontologies: the service profile, the service model, and the
service grounding. The profile is used to describe “what a service does”, with
advertisement and discovery as its objective. The service model describes “how a
service works”, to enable invocation, enactment, composition, monitoring and recovery.
Finally, the grounding maps the constructs of the process model onto detailed