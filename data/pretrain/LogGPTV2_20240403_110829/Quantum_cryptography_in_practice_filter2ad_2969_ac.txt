reflected light ray does not have its phase changed. 
•  When  a  ray  goes  from  one  medium  into  another,  its 
direction changes due to refraction but no phase change 
occurs at the surfaces of the two mediums. 
•  When  a  ray  travels  through  a  medium,  such  as  a  glass 
plate, its phase is shifted by an amount that depends on 
the index of refraction of the medium and the path length 
of the ray through the medium. 
With these facts as background, we can see how ‘1’ and ‘0’ 
symbols work in a phase-shifted QKD system. Fig. 7 provides 
a schematic overview of how the system works. As depicted, 
the  central  peak  within  a  photon  pulse  contains  a  coherent 
interval (a) during which two distinct wave paths are present 
simultaneously.  A  close-up  view  of  these  waves,  as  in  (b), 
shows  that  in  general  the  two  distinct  waves  have  different 
phases – that is, the phase of the wave as it traveled through 
the  SALB  path  is  offset  by  some  phase  shift,  ∆,  from  that 
which traveled through the LASB path. At the right, these two 
waves interact  with the  final 50/50 coupler in the system to 
present  constructive  interference  for  one  detector  (click)  but 
destructive interference for the other (no click). 
Thus Alice can signal ‘0’ and ‘1’ symbols to Bob merely by 
adjusting  the  relative  phases  of  these  two  waves,  i.e,  by 
adjusting the phase delta value (∆) on a per-pulse basis. Alice 
does  this  by  setting  her  phase  shifter  accordingly  for  each 
transmitted pulse. 
The phase-encoded variant of BB84 works as follows. Alice 
encodes the 0 or 1 value for a single photon in either of two 
randomly selected non-orthogonal bases. She represents the 0 
value by either the phase shift of 0 (basis 0) or π /2 (basis 1), 
and  represents  the  1  value  by  either  π  (basis  0)  and  3  π  /2 
(basis  1).  Thus  Alice  can  apply  one  of  four  phase  shifts  (0, 
π/2,  π,  3π/2)  to  encode  four  different  corresponding  (basis, 
value) pairs of the key as (00, 01, 10, 11). This is achieved by 
applying four different voltages to the Electro-Optical (E-O) 
phase  shifter  on  the  transmitter  side.  It  can  be  seen  that  the 
voltage on the phase shifter can be derived as a sum of basis 
and value bits via a summing amplifier.  
When their phase difference is equal to 0 or π, Alice and Bob 
are  using  compatible  bases  and  obtain  nominally  identical 
results (assuming a number of unrealistic assumptions such as 
zero noise, no photon loss, etc.). In such cases, Alice can infer 
from the phase shift she applied the detector hit at the Bob’s 
end,  and  hence  the  bit  value  Bob  registered.  By  the  same 
process  of  logic,  Bob  can  deduce  which  value  Alice 
transmitted. However, when Alice and Bob didn’t randomly 
agree  on  the  same  basis  (i.e.  when  their  phase  difference 
equals π/2 or 3π/2), the bases are incompatible and the photon 
strikes one of the two APDs at random. 
Alice provides the clock source (trigger) for both transmitter 
and  receiver.  All  clocking  in  this  system  ultimately  derives 
Figure 8. Physical layers of our weak-coherent link in the laboratory (Alice at left, Bob at right). 
from  a  single  trigger  supplied  from  higher  layers  in  the 
protocol stack, and drawn in Fig. 3 as descending from above 
the Transmitter suite. This clock comes from a FIFO card on a 
real-time  Optical  Process  Control  (OPC)  computer  not 
discussed in this paper. 
The  rising  edge  of  this  signal  serves  as  a  trigger  for  the 
transmitter suite. It triggers a pulse generator that in turn emits 
two  further  triggers:  one  leads  immediately  to  the  1300  nm 
bright source laser, and the other is delayed and then given to 
the  1550  nm  QKD  source  laser.  Thus  the  1300  nm  bright 
pulse laser transmits first, followed a short time later by a dim 
(single  photon)  pulse  from  the  1550  nm  QKD  source  laser. 
This fixed delay is designed to allow sufficient time for Bob 
to gate his QKD detectors after receiving the bright pulse. 
On the receiver side, Bob’s pair of 1550 nm QKD detectors 
are operated in the Geiger gated mode, where the applied bias 
voltage exceeds the breakdown voltage for a very short period 
of  time  when  a  photon  is  expected  to  arrive,  leading  an 
absorbed photon to trigger an electron avalanche consisting of 
thousands of carriers. Since the typical gating interval is a few 
ns,  this  mode  of  operation  requires  some  knowledge  of  the 
photon  arrival  time,  which  is  deduced  from  the  1300  nm 
bright  pulse  (synchronization)  laser  and  passively  quenched 
sync detector, which generate and detect the trigger signal for 
the gated APD detectors after a known delay. 
At  Bob,  the  received  annunciator  pulse  from  the  1300  nm 
Bright  Pulse  Detector  triggers  the  gating  of  Bob’s  cooled 
APDs to set the detectors’ bias voltages high just around the 
time that the 1550 nm QKD photon arrives. Bob interprets a 
click on APD Detector 0 (D0) as a bit value of “0”, and on 
Detector 1 (D1) as “1”. After Bob samples these detectors, it 
then sets up for the next incoming QKD photon by randomly 
applying a phase shift of either 0 or π /2 to the Phase Shifter.  
Actively  controlled  fiber  stretchers  are  required  in  order  to 
stabilize path length during transmission and to maintain the 
equivalence  of  interferometers  on  both  sides,  with  the  same 
coupling  ratios  in  each  arm  and  the  same  path  length. 
Moreover, the optical components, such as phase shifters and 
phase  adjusters,  are  polarization  dependent,  requiring  a 
polarization-maintaining  fiber  for  both  interferometers  and 
active  polarization  controller  on  the  receiver  side  to  restore 
polarization after passing regular telecom fiber. 
At time of writing, our weak-coherent link is operating with a 
1 MHz pulse repetition rate, mean photon-emission number of 
0.1  photons  per  pulse,  and  approximately  a  6-8%  Quantum 
Bit Error Rate (QBER) on the detectors cooled to –30 C. 
5.  QKD PROTOCOLS 
IMPLEMENTATION 
Quantum cryptography involves a surprisingly elaborate suite 
of  specialized  protocols,  which  we  term  “QKD  protocols.” 
Many  aspects  of  these  protocols  are  unusual  –  both  in 
motivation and in implementation – and may be of interest to 
specialists in communications protocols. 
This  section  describes  the  protocols  now  running  in  our  C-
language  QKD  protocol  implementation.  We  have  designed 
this engine so it is easy to “plug in” new protocols, and expect 
to devote considerable time in coming years to inventing new 
QKD protocols and trying them in practice. As shown in Fig. 
Authentication
Privacy Amplification
Error Correction
Sifting
Authenticated Bits
Distilled Bits
Error-Corrected Bits
Sifted Bits
Raw Qframes
(Symbols)
VPN / OPC Interface
Fig. 9. The QKD protocol stack. 
to 
the 
lost 
layers 
in  any  obvious  way 
5, these protocols are best described as sub-layers within the 
QKD protocol suite. Note, however, that these layers do not 
correspond 
in  a 
communications stack, e.g., the OSI layers. As will be seen, 
they are in fact closer to being pipeline stages. 
Sifting is the process whereby Alice and Bob winnow away 
all  the  obvious  “failed  qubits”  from  a  series  of  pulses.  As 
described  in  the  introduction  to  this  section,  these  failures 
include  those  qubits  where  Alice’s  laser  never  transmitted, 
Bob’s  detectors  didn’t  work,  photons  were 
in 
transmission, and so  forth. They  also include those  symbols 
where Alice chose one basis for transmission but Bob chose 
the other for receiving. 
At the end of this round of protocol interaction – i.e. after a 
sift and sift response transaction – Alice and Bob discard all 
the useless symbols from their internal storage, leaving only 
those  symbols  that  Bob  received  and  for  which  Bob’s  basis 
matches Alice’s. 
In general, sifting dramatically prunes the number of symbols 
held in Alice  and Bob. For instance, assume that 1% of the 
photons  that  Alice  tries  to  transmit  are  actually  received  at 
Bob and that the system noise rate is 0. On average, Alice and 
Bob will happen to agree on a basis 50% of the time in BB84. 
Thus only 50% x 1% of Alice’s photons give rise to a sifted 
bit, i.e., 1 photon in 200. A transmitted stream of 1,000 bits 
therefore would boil down to about 5 sifted bits. 
Error correction allows Alice and Bob to determine all the 
“error bits” among their shared, sifted bits, and correct them 
so  that  Alice  and  Bob  share  the  same  sequence  of  error-
corrected bits. Error bits are ones that Alice transmitted as a 0 
but Bob received as a 1, or vice versa. These bit errors can be 
caused by noise or by eavesdropping. 
Error correction in quantum cryptography has a very unusual 
constraint,  namely,  evidence  revealed  in  error  detection  and 
correction (e.g. parity bits) must be assumed to be known to 
Eve, and thus to reduce the hidden entropy available for key 
material. As a result, there is very strong motivation to design 
error  detection  and  correction  codes  that  reveal  as  little  as 
possible in their public control traffic between Alice and Bob. 
Our first approach for error correction is a novel variant of the 
Cascade  protocol  [19]  and  algorithms.  The  protocol  is 
adaptive,  in  that  it  will  not  disclose  too  many  bits  if  the 
to 
technique 
reduce  Eve’s  knowledge 
number  of  errors  is  low,  but  it  will  accurately  detect  and 
correct a large number of errors (up to some limit) even if that 
number is well above the historical average. 
Our version works by defining a number of subsets (currently 
64) of the sifted bits and forming the parities of each subset. 
In the first message, the list of subsets and their parities is sent 
to  the  other  side,  which  then  replies  with  its  version  of  the 
parities.  The  subsets  are  pseudo-random  bit  strings,  from  a 
Linear-Feedback Shift Register (LFSR) and are identified by 
a 32-bit seed for the LFSR. Once an error bit has been found 
and  fixed,  both  sides  inspect  their  records  of  subsets  and 
subranges, and flip the recorded parity of those that contained 
that  bit.  This  will  clear  up  some  discrepancies  but  may 
introduce other new ones, and so the process continues. 
Since  these  parity  fields  are  revealed  in  the  interchange  of 
“error  correction”  messages  between  Alice  and  Bob,  these 
bits  must  be  taken  as  known  to  Eve.  Therefore,  the  QKD 
protocol engine records amount of information revealed (lost) 
due to parity fields, and later requires a compensating level of 
privacy  amplification 
to 
acceptable levels. 
Privacy amplification is the process whereby Alice and Bob 
reduce Eve’s knowledge of their shared bits to an acceptable 
level.  This 
is  also  often  called  advantage 
distillation. 
The side that initiates privacy amplification chooses a linear 
hash function over the Galois Field GF[2n] where  n  is the 
number of bits as input, rounded up to a multiple of 32. He 
then  transmits  four  things  to  the  other  end—the  number  of 
bits  m    of  the  shortened  result,  the  (sparse)  primitive 
polynomial of the Galois field, a multiplier (n bits long), and 
an m-bit polynomial to add (i.e. a bit string to exclusive-or) 
with the product. Each side then performs the corresponding 
hash  and  truncates  the  result  to    m    bits  to  perform  privacy 
amplification. 
Authentication allows Alice and Bob to guard against “man 
in the middle attacks,” i.e., allows Alice to ensure that she is 
communicating  with  Bob  (and  not  Eve)  and  vice  versa. 
Authentication must be performed on an ongoing basis for all 
key management traffic, since Eve may insert herself into the 
conversation  between  Alice  and  Bob  at  any  stage  in  their 
communication. 
The  original  BB84  paper  [1]  described  the  authentication 
problem  and  sketched  a  solution  to  it  based  on  universal 
families of hash functions, introduced by Wegman and Carter 
[20].  This approach requires Alice and Bob to already share a 
small secret key, which is used to select a hash function from 
the  family  to  generate  an  authentication  hash  of  the  public 
correspondence  between  them.    By  the  nature  of  universal 
hashing,  any  party  who  didn’t  know  the  secret  key  would 
have an extremely low probability of being able to forge the 
correspondence, 
adversary  with  unlimited 
computational power.  The drawback is that the secret key bits 
cannot  be  re-used  even  once  on  different  data  without 
compromising 
  Fortunately,  a  complete 
authenticated  conversation  can  validate  a  large  number  of 
new,  shared  secret  bits  from  QKD,  and  a  small  number  of 
these may be used to replenish the pool. 
the  security. 
even 
an 
There are many further details in a practical system which we 
will  only  mention  in  passing,  including  symmetrically 
authenticating both parties, limiting the opportunities for Eve 
to force exhaustion of the shared secret key bits, and adapting 
the  system  to  network  asynchrony  and  retransmissions.  
Another important point: it is insufficient to authenticate just 
the QKD protocols; we must also apply the these techniques 
to authenticate the VPN data traffic. 
6.  A DISQUISITION ON EVE 
Within  the  quantum  cryptographic  community,  Eve  is 
generally understood to be limited only by the known laws of 
physics,  and 
to  otherwise  possess  engineering  and 
mathematical powers far beyond the current state of the art. In 
particular, it is axiomatic that Eve can: 
• 
Instantly break all symmetric ciphers and public key 
primitives. 
•  Detect all dim pulses with zero loss. 
•  Create dim pulses that are indistinguishable from Alice’s 
except  for  the  limitations  of  quantum  physics  (e.g.  the 
no-cloning law). 
Transport photons to Bob with zero loss. 
Eavesdrop undetectably on the public channel. 
Forge or block messages on the public channel. 
• 
• 
• 
It will be seen that, given these basic axioms, Eve can launch 
highly  formidable  eavesdropping  and  “man  in  the  middle” 
attacks against Alice and Bob since she can interpose herself 
along the photonic channel between Alice  and Bob in ways 
that are very hard to detect, and instantly defeat all ciphers on 
the  “public  channel”  except  one-time  pads.  Defense  against 
such  extreme  attacks  plays  a  major  role  in  the  theoretical 
security of a full quantum cryptographic system. 
Privacy  amplification  depends  on  having  an  estimate  of  the 
eavesdropping-free  entropy  of  the  quantum  channel—the 
amount of information in the channel beyond what Eve might 
know. The estimate is made after sifting and error correction, 
and  any  randomness  or  bias  testing.  The  inputs  to  entropy 
estimation are: 
b, 
e, 
n, 
d, 
the number of received bits (sifted) 
the number of errors in the sifted bits 
the total number of bits transmitted 
the number of parity bits disclosed during error 
correction 
a non-randomness measure from randomness tests 
r, 
The components of the entropy estimate are: 
•  An estimate of the information Eve possesses due to 
non-transparent (error-inducing) observations. 
•  An estimate of the information Eve might possess due to 
• 
transparent eavesdropping—observations that have no 
effect on the error rate, e.g. beamsplitting attacks, 
interceptions of multi-photon pulses, and the like. 
The amount of information disclosed publicly during 
error detection and correction. 
•  An estimate of the information Eve might possess due to 
non-randomness in the raw QKD bits (detector bias, for 
example). 
information 
Of  these  components,  only  the  third—publicly  disclosed 
information—is clear and non-controversial: it is precisely the 