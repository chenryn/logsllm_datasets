#### 1. 怎么样让项目不至于半途而废？想法大，时间少怎么办？怎么样让项目不至于半途而废呢？回想一下专栏文章《[08 \|怎样平衡软件质量与时间成本范围的关系？](http://time.geekbang.org/column/article/85302)》中的金三角理论，在这一篇中，我解释了如何去平衡软件质量与时间成本范围的关系，今后你会发现项目中很多问题都能应用到金三角的理论。比如说，想法大，其实就是范围大，按照金三角的理论，你要去固定一条边或者两条边，然后去调整剩下的边。对于业余项目来讲，其实时间是很难去控制的，也就是你不可能像每天上班那样投入大量的时间在上面，所以这条边要被固定起来。然后看成本这条边，虽然理论上来说你可以花钱请人帮你，也可以花钱买成熟的商业组件，但作为一个业余项目，一般来说前期不会投入大成本的。你也可以假定它是固定的。那么最适合调整的边就是范围这条边，毕竟作为一个业余项目，你可以先实现最核心的功能。可以采用MVP（minimum viableproduct，最小化的可行性产品）的模式，一开始只推出最核心的功能，满足用户最核心的需求，然后在用户的使用过程中收集反馈，进一步升级迭代。前不久一个朋友做了一款播客的应用，他就是采用的 MVP的开发模式，先快速发布了一个只有核心功能的版本，甚至还很多Bug。发布后邀请了几个朋友试用，收集了反馈，并且也把发现的 Bug修复了，再逐步增加新功能。这样几个迭代后，他的 App已经登上了新闻分类的排行榜。如果一开始他就想的是要做一个很大的项目，也许到现在还在开发中呢。即使程序员做的是业余项目，还有必要补充的一点就是：**在决定做什么项目之前，一样要充分考虑项目的可行性研究。**关于这一点，你可以参考专栏文章《[09\| 可行性研究：一个从一开始就注定失败的跨平台项目](http://time.geekbang.org/column/article/85730)》去从经济可行性、技术可行性还有社会可行性方面，去分析一下项目是不是真的可行，再动手不迟。
#### 2. 怎么避免陷入过于追求技术，项目难以交付的困境？过于追求技术，缺少约束是程序员业余项目失败的另一个主要原因。程序员追求技术是天性，这一点其实也不是坏事，重点是要有所约束，毫无约束的结果就是迷失在技术中，而忘记了项目的整体。这其实也是我在专栏一开始就写的《[02 \|工程思维：把每件事都当作一个项目来推进](http://time.geekbang.org/column/article/83277)》中提到的，要把业余项目也当作一个正式的项目，做你的业余项目时，也要站在项目的整体去思考项目的进展，而不是沉迷于局部的技术实现。所以你有业余项目的话，也要像专栏文章《[11 \|项目计划：代码未动，计划先行](http://time.geekbang.org/column/article/86817)》中提到的那样，去做项目计划，去设置里程碑。还要敢于把计划和里程碑分享给你的家人和朋友们，公开的做出里程碑的承诺，让他们帮助监督你的计划执行。当你有了一个可行的计划，有了真正的 DeadLine，你的项目交付就有了基本的保障。我前些年运营过网站，一个针对我的母校西北工业大学校友们的论坛网站叫开放实验室，我需要负责这个网站的日常运营和程序开发，所以每次升级之前，我都会在论坛发帖子公布我的升级计划，设定一个上线时间，这样网站的用户会监督我的项目进度。有了进度的压力，就会逼着我必须按时完成，而不是老想着用什么新酷的技术。在你的业余项目难以交付的时候，记住一句话：**Dead Line 就是第一生产力。**
#### 3. 怎么弥补你的短板？产品能力和运营能力是大部分程序员的短板。关于产品设计，我们专栏需求分析篇的几篇文章可以参考。《[17 \|需求分析到底要分析什么？怎么分析？](http://time.geekbang.org/column/article/88833)》可以帮助你去分析用户真正的需求是什么，从而让你可以做出来用户想要的，而不是自己凭空想象出来的用户需求。产品能力的锻炼不是一朝一夕就能炼成的，但日常多模仿，多实践，还是能做出来不错的产品设计，我在专栏文章《[19\|作为程序员，你应该有产品意识](http://time.geekbang.org/column/article/89480)》中如何培养产品能力上，给出了一些具体的建议。比如说你可以从解决自己的需求，解决家人朋友的需求开始，设定一个小的产品目标，然后借鉴类似的产品，模仿它们的产品设计、交互设计，就能做出来一个基本可用的产品。像 UI 设计，其实现在无论是网站的 UI 设计还是 App 的 UI设计，都趋向于标准化，对于一个业余项目，使用一些标准模板，或者花点钱购买一套漂亮的界面模板，都是不错的选择。对于产品的运营，这一点很遗憾，软件工程重点是讲如何做项目的，并没有太多运营相关的知识。我个人的一点经验就是，如果你要运营一款产品，你需要想清楚以下几个问题：-   想清楚你的产品能给用户带来什么样的价值？帮助用户解决什么问题？-   商业模式是什么？也就是用户是不是会为你的产品付钱？或者你的产品通过什么方式赚钱？-   如何让用户知道你的产品？如何让用户知道你产品所能带来的价值？只有想清楚了你的产品的核心价值是什么，才好去针对性的运营你的产品。具体产品的运营上，可以找你的朋友作为第一批用户，然后去像[ProductHunt](http://www.producthunt.com)这样的网站发帖子自荐，还可以通过微博、Twitter这样的社交媒体宣传。除了自己去学习产品知识和运营知识之外，其实还有一种方式，就是组建一个小团队，找到志同道合的人一起，你写程序，有人做产品设计，有人负责运营推广，大家取长补短，一起把产品做好！
## 总结今天带你一起分析了程序员的业余项目失败的原因。想法大，时间少；过于追求技术，缺少约束；缺少产品能力和运营能力。这几点是程序员业余项目失败的主要原因。针对想法大、时间少的问题，可以借助软件项目金三角的理论，去缩小范围，在做项目时，可以采用MVP 的开发模式，先实现核心需求，再逐步增加功能。针对过于追求技术、缺少约束的问题，应该要对你的项目制定计划，设定里程碑，把时间点告诉你的家人和朋友，让他们监督你执行，通过Dead Line 来保障项目的进度。针对缺少产品能力和运营能力的问题，需要有针对性地去学习相关知识，也可以去组建小团队，弥补这些方面能力的不足。最后，即使程序员们的业余项目很可能会是以失败告终，我做过很多失败的业余项目，但我还是强烈的建议你多尝试做一做业余项目。因为做业余项目，即使项目失败了，一样可以让你收获很多：-   通过业余项目，你可以学习和使用工作中不会使用的技术。你工作中做后端开发，你业余项目完全可以体验    iOS App 开发。-   通过业余项目，你有机会去按照自己的想法去实现。很多时候在工作中，因为你无法去做决策，无法改变架构的设计或产品的设计，而在自己的业余项目中，你可以完全按照自己的想法去尝试，去证明自己。-   通过业余项目，可以锻炼你的大局观和工程思维。当你真的去自己负责一个项目时，就会更多地去站在项目的整体去思考一个项目，而不是局限于专业领域。-   通过业余项目，帮助你更好地在项目中沟通。在做过业余项目后，在工作中，和产品经理、测试沟通，你会更懂他们，因为他们的工作你也体验过了，你会体会到他们的工作其实不像你最初想的那么容易。
## 课后思考你有做过业余项目吗？你有经历过哪些成功的和失败的业余项目经历？你从中收获的经验教训是什么？欢迎在留言区与我分享讨论。感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。![](Images/da183fec69b316d65c37d6f003a9f298.png){savepage-src="https://static001.geekbang.org/resource/image/31/af/315c3c753591fbaf480f39cdc9e0f3af.jpg"}
# 42 \| 反面案例：盘点那些失败的软件项目你好，我是宝玉。我想你日常一定看到过很多项目失败的案例，有些失败项目的案例甚至超出我们的想象，比如说我的朋友圈就被两个项目刷过屏，一个是号称史上最烂的开发项目，开发12 年，六百万行代码；一个是美国联邦调查局的一个软件项目，花了 1.7亿美元，最后变成了豆腐渣工程。也许大多数人看完这类文章后，会当作一个有趣的故事，觉得他们软件工程水平太差了，居然会把项目做成这样。当你学习完软件工程知识后，再看到这些项目失败的案例，不妨从软件工程的角度来分析一下，这些项目失败的真正原因是什么？你能从中有什么启发？