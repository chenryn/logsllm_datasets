状态。一个Bug只有4种状态：活动中、已修订、已解决或者关闭
的。活动中是指Bug还没有修订，仍然在考虑中。已修订的意思是
指程序员认为这已经修订完成。只有公布这个Bug的人同意已经修
订或者拖延后期处理，Bug才算解决好。关闭表明Bug的生命已经结
束，测试团队已经确认它的寿终就寝。
解决方法。已经解决的Bug说明它已不再起作用。Bug可以通过多
种不同的方式来解决：修正，推迟到下一个里程碑或者版本，和现
有的Bug重复或者不进行修订。
·类型。有两种主要的Bug类型：缺陷型和回归型。缺陷型是常规
的普通Bug。回归型是已经修订过，但是因为其他方面变化所带来
的负面边际效应而又重新出现的Bug。
·分类。这一部分指出不管是否已经分类Bug，以及其结果如何。
有时，应该修正的Bug就是那些已经分类而且标识已经核准的Bug。
所以，这一部分有3种状态：已核准、已拒绝或者调查中。
771
---
## Page 773
·标题。所有Bug都应该有一行标题来描述Bug，这样，其他人才能
对问题是什么有个基本的了解。
多数Bug追踪系统都能提供记录每一个Bug。这样就能看到谁对哪个
Bug进行了修改，以及他们何时做的。如果对特殊Bug的决策有争
议，这样做也很方便。同时，也能防止人们对Bug管理做出各种各
样的欺骗行为。
活动图表
在项目层次上，最有效地使用Bug就是追踪其发现、评价以及解决
的各种趋势。看着项目中这种趋势的发展，你可以做3件事：衡量
工作进展，深刻了解项目层次上可能存在什么样的问题，以及发展
出哪些行动可以更正这些问题的判断力。
一旦你有了个即使非常简单的Bug数据库，陷阱就是很容易产生各
种各样的图表，并且执行各种复杂的分析。避免渴望获得奇特的
结果一—基本的突变才是重点。更为高级的查询通常令人分心
（看！我们的Bug修正率和西班牙的降雨率是一致的！）。在你浪
费时间撰写一份精美的新报考之前，先问问自己以下问题：
1.通过查看这份图表，我们司以回答什么问题？
2.这些问题的答案如何帮助我们按时、按质交货？这些答案如何帮
助我们满足特定的退出标准或项目目标？
3.如果数目增加，这究竟意味着什么？下降呢？保持不变呢？
4.每大/每周结束时，这图表会帮助我们了解自已有多么接近任务完
成吗？
保持简单
使用活动图表，可以追踪最简单和最重要的趋势。就项目的每大进
展而言，下列统计数据可以从Bug数据库获得，并且用线性图表示
出来。
活动中。所有活动中，且并未修正或解决的Bug总数。
·新生成。某一大（分类前）公布的Bug总数。
772
---
## Page 774
·已修正。某一天修正完成的Bug总数。
在图15-7中，你可以看到基本的活动趋势，这些趋势处于中型项目
中某个里程碑终局阶段的初期。有很多活动中的Bug，而且Bug的新
生成率也相当高。到了图表中间时（从左向右），开始重要的测试
工作，而Bug新生成率戏剧性地提高（就像活动中的Bug数量一
样）。最后，测试通过工作完成时，已修正率超过新生成率，活动
中的Bug数量开始下降。从这张简单的图表中，你可以看到核心的
关系：新生成的Bug对已修正的Bug，决定了工作完成的核心趋势。
y5O
￥00
350
300
ose
o0t
I5o
100
活动中
新生成
已修正
时间（日数）
图15-7：基本的Bug活动图
评价趋势
所有图表或者分析技术，都会告诉你这两件事情中的之一：有更多
的工作要做或者有较少的工作要做。例如，如果活动中的Bug数量
持续攀升，这说明工作的数量的增加速度超过了清空的速度，新的
问题仍然以高速率在不断被发现。另外，如果活动中Bug的数量处
于下降的趋势，那么完成工作的速度比新发现问题的速度要快。无
论那种情况，趋势分析的目标是要了解，某个给定的属性，处于以
下3种状态中的哪一种：
事情变得更糟糕。在项目的早期测试阶段，这是可以接受的，甚
至是所期待的。如果主要的测试最近才完成，Bug数量的增长速度
自然超过编程团队可以控制的程度以。有时，组件的整合会比原来
773
---
## Page 775
计划的要来得慢，追使Bug在过程晚期才被发现。重要的是，了解
事情为什么变坏，变得有多糟糕，以及该做些什么（如果有什么事
的话）来改变趋势。
·事情保持不变。因为原有的Bug正在修正，新的Bug也在同时被发
现，团队完全有可能看上去像在水上浮动。即使程序员已经急疯
了，但是活动中的Bug率可能会依然稳定。如果采取了某种重要的
评价方法，要检查评价方法的输入和输出值，来了解发生什么才能
让事情好转。和团队就次沟通是非常重要的。很多程序员急疯时都
感到很恐慌，因为他们不明百项目为什么不向前移动（或者更糟糕
的是，项目进展速度还降了下来）。
事情变得更好。当趋势变得令人高兴时，评估加速度以及朝向里
程碑的趋势线是非常重要的。正向的趋势积极得还不足以满足退出
标准。如果趋势很早就变得正向，一定要并始怀疑：所有的测试工
作是否已经完成？是否还有尚未分类的Bug？Bug修正质量高吗？在
你认为是好消息之前，要确定你真的了解是什么造成了趋势在不断
改进。
有用的Bug评价标准
有些常用的评价方法，证明对终局阶段的追踪非常有用。值得找出
某种方法来自动产生这些统计数据，这样，当需要这些数据帮助做
决策时，就不要浪费时间来建立一个新的数据库查询程序。
修正率。团队修正Bug的速度被称为修正率。因为不是所有的Bug
都平等，这个修正率是指修正普通复杂度的Bug所需要的时间。如
果修正的速率落后于Bug生成的速率，而且所有新生成的Bug都必须
进行修正，项目就无法交付：因为总是会有更多的Bug出现。
·新生成的到已核准的。究竞有多少新Bug必须修正？有多少不是
成Bug和已分类Bug的比率，有助于帮助估计未分类的Bug。一般而
言，Bug质量会随着时间而下降：优先级1和2的Bug生成率会减慢，
原始的生成率无法告诉你此事什么时候发生。
活动中Bug的存货时间。活动中Bug平均存活多长时间。这表明团
队的响应能力，以及团队如何处理目前的工作量。当你接近交付日
期时，响应时间就会增加，因为团队应该管理更少的Bug，而且应
774
---
## Page 776
该更加积极地分类，并对付新生成的Bug问题。如果响应时间减
慢，就说明大家都很忙。
·每位开发人员负责多少Bug。开发团队要负载平衡，需要追踪每
分比的活动中Bug分配给测试人员，并发者或者PM，是没有意义
的。因为分配给PM或者测试人员的Bug，并不在管道中，而且它们
需要定期进行分类。
·错误反馈比。Weinberg把Bug修正而引起的回归率称为错误反馈比
（FaultFeedbackRatio，FFR）【LQl。如果每个已经修正的Bug会引
起另外两个Bug，FFR就是2.0。根据Weinberg的观点，0.1到0.3的
FFR是基本可以接受的比率；任何高于此范围的值都意味着必须要
提高质量（并且/或者步调必须减慢）。多数的Bug数据库都允许把
新的Bug链接到已经存在的Bug上，使之可能追踪FFR值。我从未看
到过自动进行的宽泛分类一—只是那些执行项目的人进行的主观判
断分类。（请注意，有时修正某个Bug可能导致之前隐藏的Bug会出
现。这不应该算在FFR内。）
控制的元素
控制项目比追踪项目要困难很多。评价好的数据是做推论，但是了
解如何响应趋势需要直觉。项目有其本身的动力，尤其是在终局阶
段，人们想引导项目可不像影响项目那么容易。当人们专注于解决
Bug时，团队中有很多各自的决策正在进行，这需要不断地沟通和
提示，以便使大家做出的决定都保持相同的态度、假设和目标。
考虑控制各种元素的最好方法，就是控制元素使用的频率。就一些
高层次的活动而言，就像管理层查看，只需要每月进行一次。就其
他方面而言，就像分类，可以每天或每小时进行一次。根据你所需
要的控制程度，控制的时间间隔是你考虑的最重要方面。
查看会议
这主要是中盘阶段的控制机制。当团队领导必须对高级管理阶层、
客户和整个团队本身，展示项目的状态，和标目进行对比时，就需
要查看。查看应该表现为一种推动作用，以便讨论哪些进展顺利，
哪些进展不顺利，以及现在应该做些什么来对应现有局面。查看的
形式真的可以这么简单。我参与过的最好的查看就是直线切入核
775
---
## Page 777
心。房间里有足够成熟的人，他们的核查都非常自愿坦诚（而不是
隐藏），要求帮助时都会给予协助（而不是嘲笑），而且都把精力
花在最重要的事情上（而不是那些让人看起来得意或者感觉高兴的
事）。
查看的讨论，应该道使团队真实地去评价目标、时限、技术和角
色。查看时，什么都不能放过。任何影响项目的问题都要开诚布公
地讨论。基于这个原因，查看会议是一直控制元素，而不仅仅是追
踪，因为它能为领导者和高级经理们提供一个讨论的论坛，使之可
以讨论项目任何方面所必需要做的调整。无论会议的大小有多大，
讨论的摘要和演示中所有的幻灯，都要在之后的另一个论坛上提供
给整个团队。
在每个里程碑的过程中，团队都应该定期查看进度。但这进行时，
应该人人都知道，接下来就是召并团队会议。数月之久的项目应该
每月都要查看。数周之久的项目应该每周或者每两周查看。频率越
多，就可以越快速和非正式。
用户/客户查看
如果你是合约团队，或者有内部客户，查看会议就可以作为从客户
那里直接获得反馈的方式。刚才提到的多数建议仍然适用。另一点
是，绝不要把这些会议当成唯一获得客户反馈的来源。会议之间的
间隔总是太长，而会议的正式形式也很难令人非常深入地讨论复杂
的问题。
XP的重要方面，就是鼓励客户代表直接参与到软件的开发中来[山]
。这一代表应该使用每日构建版本，使程序员和他们的领导发展人
际关系。这样就可能让你的团队每天，或者每时都可以获得问题的
反馈，而不是每周或者每月。第一次定义这种关系可能需要圆滑机
警（请参阅第9章的“定义角色"部分），但是，换取的结果是更明
智的决策和更满意的用户。
Bug分类
任何流程中，只要你列出一份问题列表，把它们分出优先级，这就
是所说的分类过程。Bug分类和其他优先级分类的真正不同之处在
于你面对不断生成的新问题，需要了解并根据其他关注的要点来加
以分类。当中盘阶段需要赶上某个临时日期，或者退出标准有一定
776
---
## Page 778