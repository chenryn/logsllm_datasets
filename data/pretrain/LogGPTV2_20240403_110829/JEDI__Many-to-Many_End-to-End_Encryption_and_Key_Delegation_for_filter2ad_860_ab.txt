from tree-based broadcast encryption [37, 67] to encrypt in
such a way that all decryption keys for that URI, except for
ones on a revocation list, can be used to decrypt. Achiev-
ing this is nontrivial because we have to combine broadcast
encryption with JEDI’s semantics of hierarchical resources,
expiry, and delegation. First, we modify broadcast encryption
to support delegation, in such a way that if a key is revoked,
all delegations made with that key are also implicitly revoked.
Then, we integrate broadcast revocation, in a non-black-box
way, with JEDI’s encryption and delegation, as a third re-
source hierarchy alongside URIs and expiry.
1.2 Summary of Evaluation
For our evaluation, we use JEDI to encrypt messages transmit-
ted over bw2 [5, 27], a deployed open-source messaging sys-
tem for smart buildings, and demonstrate that JEDI’s overhead
is small in the critical path. We also evaluate JEDI for a com-
mercially available sensor platform called “Hamilton” [49],
and show that a Hamilton-based sensor sending one sensor
reading every 30 seconds would see several years of battery
lifetime when sending sensor readings encrypted with JEDI.
As Hamilton is among the least powerful platforms that will
participate in IoT (farthest to the right in Fig. 1), this validates
that JEDI is practical across the IoT spectrum.
2
JEDI’s Model and Threat Model
A principal can post a message to a resource in a hierarchy
by encrypting it according to the resource’s URI, hierarchy’s
public parameters, and current time, and passing it to the un-
USENIX Association
28th USENIX Security Symposium    1521
ever, an adversary who compromises the broker can read all
messages. In this context, JEDI’s end-to-end encryption pro-
tects data from such an adversary. Publishers encrypt their
messages with JEDI before passing them to the underlying
communication system (without knowledge of who the sub-
scribers are), and subscribers decrypt them with JEDI after
receiving them from the underlying communication system
(without knowledge of who the publishers are).
2.3 Comparison to a Naïve Key Server Model
To better understand the beneﬁts of JEDI’s model, consider
the natural strawman of a trusted key server. This key server
generates a key for every URI and time. A publisher encrypts
each message for that URI with the same key. A subscriber
requests this key from the trusted key server, which must
ﬁrst check if the subscriber is authorized to receive it. The
subscriber can decrypt messages for a URI using this key, and
contact the key server for a new key when the key expires.
JEDI’s model is better than this key server model as follows:
• Improved security. Unlike the trusted key server, which
must always be online, the authority in JEDI can delegate
qualiﬁed keys to some principals and then go ofﬂine, leaving
these principals to qualify and delegate keys further. While
the authority is ofﬂine, it is more difﬁcult for an attacker
to compromise it and easier for the authority to protect
its secrets because it need only access them rarely. This
reasoning is the basis of root Certiﬁcate Authorities (CAs),
which access their master keys infrequently. In contrast, the
trusted key server model requires a central trusted party (key
server) to be online to grant/revoke access to any resource.
• Improved privacy. No single participant sees all delegations
in JEDI. An adversary in JEDI who steals an authority’s se-
cret key can decrypt all messages for that hierarchy, but still
does not learn who has access to which resource, and can-
not access separate hierarchies to which the ﬁrst authority
has no access. In contrast, an adversary who compromises
the key server learns who has access to which resource and
can decrypt messages for all hierarchies.
• Improved scalability. In the campus IoT example above, if
a building admin receives access to all sensors and all their
different readings for a building, the admin must obtain a
potentially very large number of keys, instead of one key for
the entire building. Moreover, the campus-wide key server
needs to grant decryption keys to each application owned
by each employee or student at the university. Finally, the
campus-wide key server must understand which delegations
are allowed at lower levels in the hierarchy, requiring the
entire hierarchy to be centrally administered.
IoT Gateways
2.4
Low-power wireless embedded sensors, due to power con-
straints, often do not use network protocols like Wi-Fi, and
instead use specialized low-power protocols such as Blue-
tooth or IEEE 802.15.4. It is common for these devices to rely
on an application-layer gateway to send data to computers
Figure 3: Applying JEDI to a smart buildings IoT system.
Components introduced by JEDI are shaded. The subscriber’s
key is obtained via JEDI’s decentralized delegation (Fig. 2).
derlying system that delivers it to the relevant subscribers.
Given the secret key for a resource subtree and time range,
a principal can generate a secret key for a subset of those
resources and subrange of that time range, and give it to an-
other principal, as in Fig. 2. The receiving principal can use
the delegated key to decrypt messages that are posted to a
resource in that subset at a time during that subrange.
JEDI does not require the structure of the resource hier-
archy to be ﬁxed in advance. In Fig. 2, the campus facilities
manager, when granting access to buildingA/* to the build-
ing manager, need not be concerned with the structure of
the subtree rooted at buildingA. This allows the building
manager to organize buildingA/* independently.
2.1 Trust Assumptions
A principal is trusted for the resources it owns or was given
access to (for the time ranges for which it was given access).
In other words, an adversary who compromises a principal
can read all resources that principal can read and forge new
messages as if it were that principal. In particular, an adversary
who compromises the authority for a resource hierarchy gains
control over that resource hierarchy.
JEDI allows each principal to act as an authority for its own
resource hierarchy in its own trust domain, without a single
authority spanning all hierarchies. In particular, principals
are not organized hierarchically; a principal may be delegated
multiple keys, each belonging to a different resource hierar-
chy. In the example in Fig. 2, Alice might also receive JEDI
keys from her landlord granting access to resources in her
apartment building, in a separate hierarchy where her landlord
is the authority. If Alice owns resources she would like to
delegate to others, she can set up her own hierarchy to repre-
sent those resources. Existing IoT systems with decentralized
delegation, like bw2 and Vanadium, use a similar model.
2.2 Applying JEDI to an Existing System
As shown in Fig. 3, JEDI can be applied as a wrapper around
existing many-to-many communication systems, including
publish-subscribe systems for smart cities. The transfer of
messages from producers to consumers is handled by the
existing system. A common design used by such systems is
to have a central broker (or router) forward messages; how-
1522    28th USENIX Security Symposium
USENIX Association
Existing IoT SystemDataJEDIData(e.g., bldg/ﬂoor/room/sensor/reading)(e.g., Publish/Subscribeon URI-based Resources)EncryptURIURIDataJEDIDataDecryptURIMessageMessageSubscriberPublisher(e.g., indoorsensor)(e.g., user'sapp)outside of the low-power network [91]. This gateway could
be in the form of a phone app (e.g., Fitbit), or in the form
of a specialized border router [25, 92]. In some traditional
setups, the gateway is responsible for performing encryp-
tion/authentication [70]. JEDI accepts that gateways may be
necessary for Internet connectivity, but does not rely on them
for security—JEDI’s cryptography is lightweight enough to
run directly on the low-power sensor nodes. This approach
prevents the gateway from becoming a single point of attack;
an attacker who compromises the gateway cannot see or forge
data for any device using that gateway.
2.5 Generalizability of JEDI’s Model
Since JEDI decouples senders from receivers, it has no re-
quirements on what happens at any intermediaries (e.g., does
not require messages to be forwarded from publishers to sub-
scribers in any particular way). Thus, JEDI works even when
messages are exchanged in a broadcast medium, e.g., multi-
cast. This also means that JEDI is more broadly applicable to
systems with hierarchically organized resources. For example,
URIs could correspond to ﬁlepaths in a ﬁle system, or URLs
in a RESTful web service.
2.6 Security Goals
JEDI’s goal is to ensure that principals can only read messages
from or send messages to resources they have been granted
access to receive from or send to. In the context of publish-
subscribe, JEDI also hides the content of messages from an
adversary who controls the router.
JEDI does not attempt to hide metadata relating to the
actual transfer of messages (e.g., the URIs on which messages
are published, which principals are publishing or subscribing
to which resources, and timing). Hiding this metadata is a
complementary task to achieving delegation and end-to-end
encryption in JEDI, and techniques from the secure messaging
literature [29, 32, 81] will likely be applicable.
3 End-to-End Encryption in JEDI
A central question answered in this section is: How should
publishers encrypt messages before passing them to the un-
derlying system for delivery (§3.4)? As explained in §1.1.2,
although ABE, the obvious choice, is too heavy for low-power
devices, we identify WKD-IBE, a more lightweight identity-
based encryption scheme, as sufﬁcient to achieve JEDI’s prop-
erties. The primary challenge is to encode a sufﬁciently ex-
pressive rendezvous point in the WKD-IBE ID (called a pat-
tern) that publishers use to encrypt messages (§3.4).
3.1 Building Block: WKD-IBE
We ﬁrst explain WKD-IBE [1], the encryption scheme that
JEDI uses as a building block. Throughout this paper, we
denote the security parameter as κ.
In WKD-IBE, messages are encrypted with patterns, and
keys also correspond to patterns. A pattern is a list of values:
p ∪{⊥})(cid:96). The notation P(i) denotes the ith compo-
P = (Z∗
nent of P, 1-indexed. A pattern P1 matches a pattern P2 if, for
all i ∈ [1, (cid:96)], either P1(i) = ⊥ or P1(i) = P2(i). In other words,
if P1 speciﬁes a value for an index i, P2 must match it at i.
Note that the “matches” operation is not commutative; “P1
matches P2” does not imply “P2 matches P1”.
of Z∗
aid our presentation, we deﬁne the following sets:
Deﬁnition 1. For a pattern S, we deﬁne:
We refer to a component of a pattern containing an element
p as ﬁxed, and to a component that contains ⊥ as free. To
ﬁxed(S) = {(i,S(i)) | S(i) (cid:54)= ⊥}
free(S) = {i | S(i) = ⊥}
A key for pattern P1 can decrypt a message encrypted with
pattern P2 if P1 = P2. Furthermore, a key for pattern P1 can
be used to derive a key for pattern P2, as long as P1 matches
P2. In summary, the following is the syntax for WKD-IBE.
• Setup(1κ,1(cid:96)) → Params, MasterKey;
• KeyDer(Params, KeyPatternA
, PatternB) → KeyPatternB,
derives a key for PatternB, where either KeyPatternA is the
MasterKey, or PatternA matches PatternB;
• Encrypt(Params, Pattern,m) → CiphertextPattern,m;
• Decrypt(KeyPattern, CiphertextPattern,m) → m.
We use the WKD-IBE construction in §3.2 of [1], based on
BBG HIBE [17]. Like the BBG construction, it has constant-
size ciphertexts, but requires the maximum pattern length (cid:96)
to be known at Setup time. In this WKD-IBE construction,
patterns containing ⊥ can only be used in KeyDer, not in
Encrypt; we extend it to support encryption with patterns
containing ⊥. We include the WKD-IBE construction with
our optimizations in the appendix of our extended paper [57].
3.2 Concurrent Hierarchies in JEDI
WKD-IBE was originally designed to allow delegation in
a single hierarchy. For example, the original suggested
use case of WKD-IBE was to generate secret keys for
a user’s email addresses in all valid subdomains, such as
sysadmin@*.univ.edu [1].
JEDI, however, uses WKD-IBE in a nonstandard way to
simultaneously support multiple hierarchies, one for URIs
and one for expiry (and later in §5, one for revocation), each
in the vein of HIBE. We think of the (cid:96) components of a
WKD-IBE pattern as “slots” that are initially empty, and are
progressively ﬁlled in with calls to KeyDer. To combine a
hierarchy of maximum depth (cid:96)1 (e.g., the URI hierarchy) and
a hierarchy of maximum depth (cid:96)2 (e.g., the expiry hierarchy),
one can Setup WKD-IBE with the number of slots equal to
(cid:96) = (cid:96)1 + (cid:96)2. The ﬁrst (cid:96)1 slots are ﬁlled in left-to-right for the
ﬁrst hierarchy and the remaining (cid:96)2 slots are ﬁlled in left-to-
right for the second hierarchy (Fig. 4).
3.3 Overview of Encryption in JEDI
Each principal maintains a key store containing WKD-IBE
decryption keys. To create a resource hierarchy, any principal
USENIX Association
28th USENIX Security Symposium    1523
can call the WKD-IBE Setup function to create a resource
hierarchy. It releases the public parameters and stores the
master secret key in its key store, making it the authority of
that hierarchy. To delegate access to a URI preﬁx for a time
range, a principal (possibly the authority) searches its key
store for a set of keys for a superset of those permissions. It
then qualiﬁes those keys using KeyDer to restrict them to
the speciﬁc URI preﬁx and time range (§3.5), and sends the
resulting keys to the recipient of the delegation.2 The recipient
accepts the delegation by adding the keys to its key store.
Before sending a message to a URI, a principal encrypts
the message using WKD-IBE. The pattern used to encrypt it
is derived from the URI and the current time (§3.4), which are
included along with the ciphertext. When a principal receives
a message, it searches its key store, using the URI and time
included with the ciphertext, for a key to decrypt it.
In summary, JEDI provides the following API:
Encrypt(Message, URI, Time) → Ciphertext
Decrypt(Ciphertext, URI, Time, KeyStore) → Message
Delegate(KeyStore, URIPreﬁx, TimeRange) → KeySet
AcceptDelegation(KeyStore, KeySet) → KeyStore(cid:48)
Note that the WKD-IBE public parameters are an implicit
argument to each of these functions. Finally, although the
above API lists the arguments to Delegate as URIPreﬁx and
TimeRange, JEDI actually supports succinct delegation over
more complex sets of URIs and timestamps (see §3.7).
3.4 Expressing URI/Time as a Pattern
A message is encrypted using a pattern derived from (1) the
URI to which the message is addressed, and (2) the current
time. Let H : {0,1}∗ → Z∗
p be a collision-resistant hash func-
tion. Let (cid:96) = (cid:96)1 + (cid:96)2 be the pattern length in the hierarchy’s
WKD-IBE system. We use the ﬁrst (cid:96)1 slots to encode the URI,
and the last (cid:96)2 slots to encode the time.
Given a URI of length d, such as a/b/c (d = 3 in this
example), we split it up into individual components, and ap-
pend a special terminator symbol $: ("a", "b", "c", $).
Using H, we map each component to Z∗
p, and then put these
values into the ﬁrst d + 1 slots. If S is our pattern, we would
have S(1) = H("a"), S(2) = H("b"), S(3) = H("c"), and
S(4) = H($) for this example. Now, we encode the time range
into the remaining (cid:96)2 slots. Any timestamp, with the granu-
larity of an hour, can be represented hierarchically as (year,
month, day, hour). We encode this into the pattern like
the URI: we hash each component, and assign them to con-
secutive slots. The ﬁnal (cid:96)2 slots encode the time, so the depth
of the time hierarchy is (cid:96)2. The terminator symbol $ is not