side-channel [57] or (3) injecting content into IP defragmentation
cache [38]. In this section we describe these attack methodologies,
their unique properties and explain what attacker capabilities they
assume. We compare effectiveness and stealthiness of each of these
methods for carrying out cache poisoning attacks.
Setup. To test our attacks experimentally in the Internet we
setup a victim AS and associate a /22 prefix with our AS. We register
victim domains and setup nameservers and a DNS resolver.
3.1 Intercepting DNS with BGP Hijacking
A malicious Autonomous System (AS) can exploit vulnerabilities in
BGP to hijack packets of some victim AS. A route hijack happens
when an attacker announces an incorrect prefix belonging to a
different AS. The attacker hijacks the prefix or a sub-prefix which
has the IP address of a DNS nameserver or a resolver. If the hijack
succeeds, the ASes that accepted the hijack will send all their traffic
destined to the victim prefix instead to the attacker. The goal of
the attacker is to intercept a single DNS packet, either a query sent
by the resolver or a corresponding response of the nameserver.
For simplicity in this discussion we focus on sub-prefix hijacks
and assume that the attacker attempts to hijack the DNS query;
see [22] for a taxonomy of BGP prefix hijack attacks. The attacker
intercepts the DNS query and crafts a spoofed DNS response with
malicious records and the correct challenge values, and sends it
838
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tianxiang Dai, Philipp Jeitner, Haya Shulman, and Michael Waidner
Figure 1: DNS Poisoning with side-channel.
to the victim DNS resolver. Additionally, to avoid detection due to
blackholing, the attacker should relay all the traffic to the legitimate
destination, except for the DNS query which it intercepted (to avoid
race condition with the response from the genuine nameserver).
We call this DNS cache poisoning attack method HijackDNS.
3.2 Guessing Challenges with Side-channel
The SadDNS off-path attack [57] uses an ICMP side channel to guess
the UDP source port selected by the victim resolver in its query to
the target nameserver. This is done via a side-channel present in
most modern operating systems which allows the attacker to test if a
given UDP port open or not. The operating systems have a constant,
global limit of how many ICMP port unreachable messages they
will return when packets are received at closed UDP ports (50 in
the case of linux). The attacker splits the range of ports to sets of N
ports and for every set performs the following: the attacker sends
50 probes with a spoofed source IP address of the nameserver to a
range of UDP ports at the resolver. If the probes arrived at closed
ports only, the returned ICMP error messages reach the global limit,
and further messages will not be issued. The attacker sends a single
probe from the IP address of the attacker to a known-closed port.
If all of the previously probed 50 ports were closed the attacker
will not receive an ICMP message in response to his own message.
However, if one of the 50 probed ports was open, the limit was not
reached, the attacker will receive a ICMP port unreachable message.
The attacker repeats this process until a set containing an open port
is found. Once a set with an open port is found, the attacker applies
divide and conquer with the technique above dividing the ports
until a single open port is isolated. This reduces the entropy of the
challenge-response parameters unknown to the attacker from 32
bit (DNS TXID + UDP port number) to 16 bit.
Once the open port is identified the attacker sends multiple
spoofed DNS responses from a spoofed IP address (of the name-
server) to that open UDP port of the resolver, for each possible TXID
value, total of 216 spoofed responses; e.g., [37, 45, 57]. A packet with
the correct TXID is accepted by the DNS resolver. The attack is
illustrated in Figure 1. The attack applies to only about 18% of the
Figure 2: Fragmentation-based DNS poisoning.
domains with nameservers that use rate-limiting. The rate limiting
allows the adversary to delay the response from the genuine name-
server and hence to win the race against it. Additionally, the attack
applies only against resolvers with a global (un-patched) ICMP rate
limit.
3.3 Injecting Records via IP Fragmentation
In this section we describe an attack which exploits IP fragmenta-
tion to inject spoofed fragments into the IP defragmentation cache
on the victim system. The spoofed fragments contain malicious
content, which when reassembled with the genuine fragments, ma-
nipulate the payload of the original IP packet without having to
guess the values in the challenge-response parameters, [38].
We assume that the response from the nameserver is fragmented
and arrives in at least two fragments. The fragment sent by the at-
tacker is reassembled with the first fragment sent by the nameserver.
The attacker replaces the second fragment of the nameserver with
its malicious fragment, which overwrites part of the payload of the
genuine DNS response from the nameserver, with malicious values.
Since the challenge-response values (port, TXID) are in the first
fragment, they remain unchanged. The illustration of the attack is
in Figure 2.
To cause the nameserver to fragment a DNS response the at-
tacker sends to the nameserver a ICMP Destination Unreachable
Fragmentation Needed error message (type 3, code 4) with a DF
bit set, signalling to the nameserver that the Maximum Transmis-
sion Unit (MTU) to the destination is smaller than the packet’s
length. The nameserver reduces the size of the packet accordingly
by fragmenting the IP packet to smaller fragments.
4 EXPLOITING DNS POISONING FOR
CROSS-LAYER ATTACKS
In this section we demonstrate how DNS cache poisoning can be
used to launch cross-layer attacks against popular applications.
In Section 4.1 we explain our methodology for selecting the ap-
plications. We list the categories according to which we selected
the applications in Table 1. Our analysis of the applications is per-
formed according to the key properties related to cache poisoning:
(1) control over the query, (2) which records can be injected, (3)
839
Vicitmservice30.0.0.0/24Targetdomain123.0.0.0/24DNS30.0.0.1UDP source portfound!NS123.0.0.53Attacker6.6.6.6Service30.0.0.254000 queriestomute NS via queryflood: abc.vict.im A?, src=30.0.0.11Trigger Query tovict.im(ie, via SMTP, …)2vict.imA?, txid=65432Rate-limited,Noresponseto30.0.0.1350 probesto50 ports, src=123.0.0.53:5350 ICMP destinationunreachable1 probe toclosedportICMP limitreached, noanswer550 probesto50 ports, src=123.0.0.53:5349 ICMP destinationunreachable1 probe toclosedportICMP destinationunreachable6216responses, all txids: vict.imA 6.6.6.6vict.imA6.6.6.6784Noanswer: All 50 portsclosedVicitmservice30.0.0.0/24Targetdomain123.0.0.0/24DNS30.0.0.1ReassemblewithFragAtk1and cachein DNS resolverNS123.0.0.53Attacker6.6.6.6Service30.0.0.25ICMP PTB, MTU=68, src=30.0.0.11FragAtkvict.imA 6.6.6.6, src=123.0.0.532Trigger Query tovict.im(ie, via SMTP, …)34vict.imA?, txid=65432FragNS1chksum, txid=65432, QFragNS2vict.imA …vict.imA 6.6.6.656SrcportDstportchksumlentxid…Q = vict.im A?A = vict.imA 6.6.6.6FragNS1FragAtk78Store in defragmetationcacheFrom IP to Transport and Beyond:
Cross-Layer Attacks Against Applications
Category
Protocol
Use Case
Authentication
Online Chat
Email
Web
Sync
Crypto-currency
Tunnelling
PKI
Intermediate
devices
Radius
XMPP
SMTP
SPF,DMARC
DKIM
HTTP
SMTP
NTP
Bitcoin
OpenVPN
IKE
IKE
DV
OCSP
RPKI
–
HTTP/...
HTTP
DNS
HTTP/Socks
Peer discovery
Chat+VoIP
Mail
Anti-Spam
Integrity Checking
Web sites
Peer discovery
VPN
VPN
Opportunistic Enc.
Domain Validation
Revocation checking
Repository sync.
Firewall filters
Loadbalancers
CDN’s
ANAME/ALIAS[33]
method
direct
bounce
query known query trigger
name
target ✓1
target ✓1
target ✓1
target ✓1
target ✓1
target ✓1
target ✓1
direct/bounce
authentication
direct/bounce
direct
direct
known ✓
config
✗
config
✗
target ✓1
target ✓1
target ✓1
known ✓
config
✗
config
✗
config
✗
config
✗
target ✓1
waiting
connection DoS
connection DoS
bounce
authentication
direct
waiting
waiting
on-demand
on-demand
on-demand
Password recovery
Time synchronisation known ✓ connection DoS
A, MX, TXT
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
NAPTR, SRV, A ✓ ✓
✓ ✓
✓ ✓
Record
Type
A, SRV
A, MX
TXT
TXT
A
IPSECKEY
A, MX, TXT
A
A
A
A
A
A
A
A
A
A
A
✓
✓
impact
Methodologies
Cache Poisoning
DoS: no network access
Hijack: eavesdropping
Hijack: eavesdropping
Downgrade: spoofing
Downgrade: spoofing
Hijack: eavesdropping
Hijack: account hijack
DNS used for
loc. fed. auth. Hijack SadDNS Frag
✓
✓
✓
✓
✓
✓
✓
✓2 Hijack: change time
✗
✓2
✓2
✓2 Hijack: eavesdropping
Hijack: fraud. certificate
✗
Downgrade: no check
✓
Downgrade: no ROV
✗
✓2
Downgrade: no filters
✓2 Hijack: eavesdropping
✓2 Hijack: eavesdropping
✓2 Hijack: eavesdropping
Hijack: eavesdropping
✓
Hijack: fake blockchain
DoS: no VPN aceess
DoS: no VPN aceess
✓
✓
✓
✓
✓
✓
✓
✗
✗
✓2
✓2
✓2
✗
✓
✗
✓2
✓2
✗
✓2
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓