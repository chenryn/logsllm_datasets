Keeping Secret Secrets Secret
Keeping Secret Secrets Secret
and
and
Sharing Secret Secrets Secretly
Sharing Secret Secrets Secretly
Vic Vandal
Vic Vandal
PI:EMAIL
PI:EMAIL
DefCon
DefCon-XVI / 2008
-XVI / 2008
Vic’s Usual Disclaimer
• Don’t do anything illegal.
• If you do anything illegal, don’t get caught.
• I take no personal responsibility for the subsequent
illegal use of any information provided here by anyone.
• I don’t condone/support espionage, treason, child porn,
terrorism, or general stupidity.  I “may” take more liberal
views on some of the other usage examples herein.
• I own my own words, which means I may legally
challenge any use or duplication of them for which I have
not provided explicit permission.
• Any duplication of this presentation must include this
slide.
Stego 
Stego Files Link
Files Link
(for later in the presentation)
(for later in the presentation)
http://www.well.com/~sthomas/.Secret-Page.html
Introduction
• What is a secret?
– DUH!…anything secret, keys to important items,
secret plans/designs/code, sensitive info/items, etc.
• Why protect secrets?
– Because “SECRET = SECRET” (see Webster’s
definition for more on that secret formula, cough)
• Why share secrets?
– Secrecy
– Fault-tolerance
– Profit
– Fun
Chaffing and Winnowing
Chaffing and Winnowing
What Is It?
• Winnowing -- separating out or eliminating the
chaff
• Chaffing -- adding chaff to a collection
• By a sender strategically adding chaff to a
message, it becomes garbled/hidden
• By the receiver correctly winnowing out the
chaff, they can retrieve the original message
How It’s Done
1. Authenticate each packet of message with a
shared authentication key
2. Append a Message Authentication Code
(MAC) to each packet
3. After authentication, add chaff packets with bad
MAC’s to the message stream
•
MAC’s are added to message packets by calculating
the MAC value and appending the fixed length MAC to
each corresponding packet
Authentication Key
• Authentication key used to calculate MAC’s is
shared by sender and receiver
• When recipient receives packets, they compute
the MAC with the message-packet content and
the shared key
• If the calculated MAC equals the transmitted
MAC, the origin of the packet is known to be the
sender and the packet is kept
• Otherwise when the calculated and transmitted
MAC’s are not equal, the packet is discarded
Packet Sequence Number
• Assign each packet a sequence number for:
– Removal of duplicate packets
– Identification of missing packets
– Correct ordering of received packets
• An example sequence might look like:
(1,Hello David,465231)
(3,Joshua,344287)
(2,The code is,782290) 
(4,Sincerely-Falken,312265)
Adding The Chaff
• After authentication of the packets, chaff
packets with incorrect MAC’s are added to
the message stream
• It is important that chaff packets:
• Are correctly formatted
• Have reasonable sequence numbers
• Have reasonable message contents
• Have invalid MAC’s
Sample Message
   (1,Hello Lizzie,532105)
(1,Hello David,465231)
(2,The code is,782290)
(2,Your contact is,793122)
(3,Flex,891231)
(3,Joshua,344287)
(4,Peace-Vic,553419)
(4,Sincerely-Falken,312265)
Receiver Separates Chaff
   (1,Hello Lizzie,532105)  789326
(1,Hello David,465231)  465231
(2,The code is,782290)  782290
(2,Your contact is,793122)  878933
(3,Flex,891231)  643236
(3,Joshua,344287)  344287
(4,Peace-Vic,553419)  003732
(4,Sincerely-Falken,312265)  312265
MAC Algorithm Notes
• The MAC Algorithm is simply a hash
function
• Once hashed, the original message
cannot be retrieved
• It must look random to an eavesdropper,
where similar inputs generate distinctly
different outputs
Packet Construction Notes
• Smaller packets = more packets
• More packets = brute force more difficult
• Too small = inefficient use of bandwidth
– Tough on recipient
– Tough on eavesdropper
Chaff Construction Notes
• Creating chaff is easy/inexpensive, one can pick
any sequence number and content and append
a random MAC value
• If the MAC is 64 bits long, the chance of
accidentally creating the correct MAC for the
sequence number and content is extremely
unlikely (1/264)
• Creating bogus MAC’s for chaff packets
requires no knowledge of the secret key
Chaffing / Winnowing Uses
• Transmitting secret codes, messages, and/or any other
sensitive information
• Why use it instead of crypto?
– Bypass U.S. government regulations on encryption exports
– Exportable encryption defined as systems with key lengths <= 56
bits, or systems that implement key recovery/key escrowing
– Chaffing and Winnowing is a direct challenge to encryption-
restricting legislation, proposed by Ron Rivest
– Chaffing and Winnowing doesn’t fall under the restriction because
messages are sent plain-text, using only a shared key for
authentication
– In essence to say; “Screw you Big Brother!”
Secret-Splitting / Sharing
Secret-Splitting / Sharing
What Is It?
• Just what it sounds like
• Take a secret, split it up, and share it – to
make it more secure
• Explained in detail in forthcoming slides
Why Not Use Crypto Instead?
•
One can encrypt data to protect it, but then you still need to protect
the encryption key
•
One can store the key in a secure location, but if it is lost you can
never recover it and/or the data
•
One can store multiple copies of the key in different locations, but
then the potential for key compromise is increased
•
To make the secret reliable and robust, the idea is to break the
secret into pieces and then distribute those pieces to different
persons in a group
Secret-Splitting / Sharing
• Secret-sharing scheme
– Two parts:
• Set of “Holders”
• “Access Structure”
• Shares
– Pieces of a split secret or information that every
holder receives
Splitting Scheme Details
• Two Components:
– Set of Holders: H={H1,H2,H3}
– Access Structure set:
• Subsets of holders who can discover the secret by pooling
their information together;
– i.e., AS={  {H1,H2}, {H2,H3}, {H1,H2,H3} }
• Monotone access structure:
– i.e., AS0={ {H1,H2}, {H2,H3} } consists of all “minimal” sets of AS
• A perfect secret-sharing scheme:
• Any qualified subset can reconstruct the secret
• Any un-qualified subset has absolutely no viable information
on the secret
Access Structure Variance
•
Generalized Access Structures:
– For any set of Holders, there can be many different kinds of Access
Structures
– i.e., For a set of 3 users, Access Structures that may be employed by
different secret sharing schemes include;
• A+B+C, A+BC, AB+BC, AB+BC+AC, ABC
•
Why study different Access Structures?
– Different secret-sharing schemes may require different levels of fault
tolerance and secrecy, which can be realized by different Access
Structures
– A+B+C increases the fault tolerance of the key, but it decreases the
secrecy of the key
– ABC increases the secrecy of the key, but the key becomes more
unreliable
– Also of great importance, different Access Structures may require
different sizes of shares
Share Sizes
• For different Access Structures, they may
require different bounds on the amount of
information that its users must remember
• If the amount of information that must be kept
secret increases, then the security of the system
will degrade
• To prevent the appearance of Bob and Alice,
and to keep the presentation time in check, we
shall delve no further on this subset topic.  A
reference to more topic info is on the final slide.
Secret-Splitting Risks
• Risk-based consequences of authentication
error include:
– Inconvenience
– Distress
– Damage to organization/group programs or
reputation
– Financial loss
– Personal safety
Secret-Splitting Uses*
•
Nuclear launch codes
•
Bomb components
•
Chemical weapons ingredients
•
Level 3,4 PKI management for legal non-repudiation
•
Monetary asset protection
•
Intellectual property protection
•
Warez/file-sharing legal liability/protection
•
Terrorist plots
•
Illegal substance smuggling/possession
* Not necessarily endorsed/condoned by presentation author
Steganography
Steganography
What Is It?
•
Steganography = covered writing
– cover-image + hidden-data + stego-key
•
Use dates back several millennium:
– wax tablets
– messages tattooed on scalps
•
Other examples:
– Invisible ink
– Hide an image under another image in a PPT presentation (cough)
– Hide text in same color as background
– Spammers employ by encoding spam messages into literature text
•
Digital steganography can hide information in image/video/audio
files (or any binary file)
•
Primary “legitimate” use is digital watermarking
Why Is It Effective?
•
Point to ponder #1:
How do you know when you’ve run out of invisible ink?
•
Point to ponder #2:
Male mosquitoes buzz loudly but do not sting.
Female mosquitoes are silent and do sting.
Therefore if you DO hear a mosquito buzzing around, no worries.
If you DO NOT hear buzzing, there may be trouble present.
•
Ximenez in Monty Python:
“Nobody expects the Spanish Inquisition.”
•
Keyser Soze in The Usual Suspects:
“The greatest trick the devil ever pulled was convincing the world he
didn’t exist.”
Modern Implementations
•
Modern steganography attempts to be detectable only if secret information
is known
•
For steganography to remain “undetected”, the unmodified cover medium
must be kept secret
•
If exposed, a comparison between the cover media and stego media
immediately reveals the changes/differences
•
An information-theoretic model that considers the security of steganography systems
against passive eavesdroppers:
–
Assume that the adversary has complete knowledge of the encoding system, but does not
know the secret key
–
Attacker must devise model for the probability distribution PC of all possible cover media,
and PS of all possible stego media
–
Adversary can then use detection theory to decide between hypothesis C (that a message
contains no hidden information) and hypothesis S (that a message carries hidden content)
•
A system is perfectly secure if no decision rule exists that can perform better than
random guessing
The Color of Secrets
•
Image file colors are important in the amount of redundant bits
available to hide data
•
Steganography works best in cover files with; high energy, bright
colors, high volume
•
24-bit color is True Color
– 1 pixel requires three bytes, each representing level of Red/Green/Blue
(RGB) color
• Color of this line is denoted 0xbf-1d-98 [i.e., Red=191 (0xbf), Green=29
(0x1d), Blue=152 (0x98)]
– 16,777,216 (2 to 24th power) possible colors/image
•
8-bit color is also True Color, but...
– Image contains a palette with up to 256 (2 to 8th power) unique colors,
each denoted by a 24-bit RGB value
– Each pixel requires 1 byte to point to palette entry
Use of LSB Overwriting