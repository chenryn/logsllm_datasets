一样，它属于一个存储目录（repository）……….
你应该总是把你的构建脚本调入到代码目录：
由于我们正在把一个新的文件增加到波调出
的代码中，我们用reo的i特合，善的
当你据文伴增加到
suim我们增如到明个文件之中。
存储目录时，你统
正在等的Sfesim
应端注象运个立伴。
但你仍然需提交
bu11d2.xml
那个文伴，即使在7
增加之后。
ending
bulld.xml
不要多记诺入注释，
mitted reviaion 11.
fsd>
通过存储目录中的构建脚本，当需要更新时，其他人都知道。你
构建脚本也是
的版本控制软件将跟踪对脚本的任何修改，并且无论你何时发布
代码……代码
软件，脚本被标记。这表示你无需记住构建1.0版本时所需的奇
隶属于版本控
异的命令—在庆功宴的几年之后。
制系统，在那
里有版本号和
标记，并且被
保存以供以后
之用。
232
第6%章
---
## Page 269
构建代码
新的开发人员，第二幕
我们还没有编写新的类来与客户沟通，把使用情节分解为任务或为客户
演示软件的demo.…….不过，事情现在看起来很不错。有了准备好的构建
工具，让我们看看呈现给新的开发人员的是什么：
不错..…我请出了项B，域行了
建脂本，将显现在我可以立刻于语
3
第6章中的版本控制
svn checkout
服务器
本章要点
简单讲，构建工具就是
确定你创建了某种方
一个工具。工具应该使
式，以清理脚本构建过
你的新的开厦人男在几分种税有户
出了，而不是几小时（或更增
构建项目容易，而不是
程中产生的文件。
天）
科.不舍一应你去普
困难。
构建脚本是代码，并且
的新的开道人美如何称建系统
大多数的构建工具使用
应该有版本号及调入到
构建脚本，在构建脚本
你的代码存储目录中。
中，你可以指定要构建
构建工具是服务于整
什么，几个不同的指令
个团队的，不只是你。
集以及外部文件和资源
选择适合团队所有人员
的位置。
的构建工具。
目前位置
233
---
## Page 270
软件开发工具箱
1/2章
软件开发的宗旨就是要开发和交付伟大的软件。在
本章中，你学到了几种使开发工作保持在正轨上的几
第61
项技术。本书的完整的工具清单，见附录i。
本章要点
开发技术
除了极小的项日之外，
这置恶你在本章
所有的项目都具有有价
使用构建工具去构建脚本
学到的一些美健
值的构建流程。
打包软件、测试软件和部署
你的应用系统。
你应该捕提和使之自
动化“如何构建你的系
大多数DE已正在使用构建工
统”理想上，用单
丹。要熟悉请工具，你能够
一指令。
靠它构建应用程序。
对待构建脚本要像对待代码
.·这登技术之屠
Ant是Java项目的构建工
一样，并且把它调入到版本
的一些则
其，并且在XML文件中
控制系统中
捕提构建信息，并命名
开发原则
为build.xml。
越是遵循一般的命名约
构建一个项目应该是可重复
定，别人就越熟悉你的
的和自动化的。
项目，并且他容易把项
构建脚本为其他自动化工具
目与外部工具集成。
美定了基础。
你的构建脚本是项目的
构建脚本超超了步骤上的自
一部分，就像其他的代
动化，并且能捕提编译和部
码。应该被调入到版本
暑的还辑决策。
控制系统之中。
234
第6%章
---
## Page 271
7测试和连续集成
智者千虑必有一失
我监警，再给我需天时间，我一定
把它蕴定，否则，我会自已先范坑挖
，行响1
有时候，即便最优秀的开发人员也会破坏构建版本。
至少人人身上都经历过一次，你确认代码通过了编译，你在机器上一遍又一遍地测
试了你的代码，并把代码提交到存储目录。但是，在你的机器和被人们称之为服务
器的黑箱子之间的某处，就肯定有人修改了你的代码。下一个调出程序的倒霉的人
将要按过一个痛苦的早上，得想尽办法弄清哪些是可工作的代码。在这一章中，我
们将讲述如何设置一张安全网，以保证构建版本有序，并且富有生产力。
进入新的篇章
235
---
## Page 272
不下雨则已，一下雨倾盆
事情总是会出错的…
每个微过软件开发的人都知道有这么一国事。夜深人静，你已经喝了
第七罐红牛来补充体能了，你还是在某个地方遗漏了++运算符。突
然间，你优美的代码变得支离破碑，最坏消息是你还没有意识到你
碰到问题了。
至少，在给老板演示你的软件之前，你还不知道。还记得在第6章中
Bob的代码所出现的问题了吗？
Bob的代码在某营地方码
像述作正·
Sat
Send Poke
Send Picture
SECRET_POKE_SEQUENCE|
个
我没有哈到任何预管声。什么
是SECRET_POKE_SEQUENCE?我没布
不正常
什色总觉响：
联是当事情出情时
客
对于一个开发项目，还有哪些事情要出错？小型开发团队呢？更大的
团队时，有同样的问题吗？是不同的问题？
236
第7章
---
## Page 273
测试和连续集成
碰头会
票b只是常定他编净过他的
代码，这些都不可能成为问题。
Bob：我的代码通过编译了！我无休止地整合这些修改，并且能构建好
每件事情。这不是我的错。
Mark：是的，代码通过编译了，它就是不能运行。所以，说真的，还
不算把事情弄得很槽。
Laura：微过测试吗？
Bob：是的，代码在我的机器上运行得好好的。代码运行时，每件事情
看起来都很好.
Mark：好的，但运行代码和对代码做快速地检查还真谈不上是在测试
你的代码。
Laura：非常正确。软件的功能是你责任的一部分，不能只是代码“看
起来能运行”就行：那在客户面前是站不住的
Bob：好的，既然我们的版本控制服务器和构建工具已就位，这不应该
再是问题了。所以，别崂明了，好吗？
Mark：不！构建工具只是确保代码能编译，而版本控制也只是帮助管理
我们对软件的修改，但这些不能确保代码能正常运行。你的代码通过了
编译，这不是问题所在。系统的功能性问题出现了。而构建工具对这些
问题是无能为力的。
Laura：是的，你当时甚至还没有意识到哪些事情错了
目前位置
237
---
## Page 274
黑箱测试
有三种方式检查你的系统··
良好的测试是我们任何软件项目的基础。如果你的软件不能运行，它就不能
使用—你可能得不到报酬。所以，在进人软件测试的核心之前，最好先退一
步想一下，要记住不同的人用完全不同的角度或观点看待你的系统。
更多不同的到试类型
见附录i
用户从外面看系统
用户不会看你编写的代码，他们不会看你的数据库表单。
更不会评价你的算法并且，通常情况下他们也不想
这样去做。对他们而言，你的系统是一只黑籍子（Black
box）；软件系统或是能完成他们要求的工作，或者不
是。你的用户在乎的是系统的功能。
测试人员探究一点深入的东西
测试人员与用户不一样。他们期望得到系统的功能性。
但通常也会做深人地探究，确定事情真正地像你说的
那样发生。对测试人员而言，你的系统是一只灰箱子
(Greybox）。测试人员可能会检查数据库中的数据，
以确定数据得到正确的整理；他们可能也检查端口的
关闭情况、网络连接的掉线情况，以及内存稳定使用
的情况。
开贵人员让系统全透明
开发人员深人到所有的细节。他们看到良好的类设计
（有时是坏的），设计模式，可重用的代码，以及表示
上的不一致。对开发人员面言，系统对他们是完全开放
的。如果用户看到的系统犹如一只关闭的黑箱子，开发
人员看到的系统犹如一只打开的白籍子（Whitebox）。
但是，有时因为开发人员注意到太多的细节，反而错失
了系统的功能性，或做出了测试人员或最终用户不会做
出的假设。
………你必须兼顾三方面的观点
每一方面对系统的观点都是正当的，并且你必须从其中的
任何一个侧面对系统进行测试。
238
---
## Page 275
测试和连续集成
黑箱测试的重点在输入
和输出
用户在你的系统外部，他们仅仅能看到的是他
们向系统输入了什么和系统给他们输出的是什
箱测试
么。当你微黑箱测试时，你应该寻求：
这不是“Onleefrece-
功能性。明显地，这是最重要的黑箱测试。系统能否按照其使用情节中
s类能处星GiftCand
的要求完成任务？进行黑箱测试时，你不必关心数据是被存储在文本文
对象”的功能性，而
是关系到客户程要用
件中还是存储在并行的集群数据库之中。你只在乎数据是否像使用情节
“私类买铁科”
中要求的那样输人，并且像使用情节要求那样得到的输出结果。
用户输入验证。向系统输入3.995美元或输入-1作为你的生日。如果你
正在写一个web应用，输入HTML到你的名称字段或试一下SQL陈述
式。你的系统最好能拒绝这些值，并且以最终用户能理解的方式去进
行。
输出结果。手工检查你的系统返目的数值。确认所有的功能路径都一
版开道人员最后常虑
错误条件遥常是大多
口
测试通过（“如果用户输人一个非法的目的位置，然后单击“Get
的事情，但是天多数
Directions’….”）。把你能给予系统的各类输人以及你期望的每个
客户节无注色到的事
输出汇集在一张表中，对这项工作常常是有帮助的，
情：
状态转换。有些系统必须根据特定的规则从一个状态转换为另外一个
状态。这与“输出结果”相似，但它关系到你的系统能预期地从一个
状态转移到另外一个状态。如果你正在实施像SMTP一类的协议，卫
星通信连接或GPS接收时，这一点就特别的关键。还有，做一张状态
图，看看系统从一个状态到另外一个状态时产生了什么是非常有用的。
口
边界案例与缓冲溢出错误（off-by-one errors）。你应当通过一个值，
该值或是非常小或是超过了最大允许值，来测试系统。例如，检查月
份值12（假如你的月份是0~11）或13，将让你知道你是否把边界情
况搞明白或某开发人员是否忘记了队列是从0开始。
7
客户遥常不金船下保大的错误
继往只是精打得字，这业正是你
在这重所测试的事情。
目前位置
239
---
## Page 276
灰箱测试
灰箱测试使你更贴近代码
对大多数应用程序面言，黑箱测试非常有效，但有些情形
你需要做更为深入地测试。有时候，如果你不深人到系统
中去，你就难以得到系统的结果。这对有很多web应用的系
统尤其是这样，在web应用系统中，web接口只是在数据库
灰霜测试
中传递数据。你必须去处理数据库代码和web接口本身。
灰箱测试就像黑箱测试一样·但你可以窥视一下系统
当进行灰箱测试时，你所寻求的东西通常与黑箱测试相同，但你可以深人一点，
以确保系统像预期的那样工作。使用灰箱测试可以验证以下儿方面：
注意，不要将机密信
口
检验审计和登陆，当主要的数据（如金钱）在线运行时，通常有很多
乌记录到不安金的地
审计和登陆的工作在系统内运行。这类信息通常也不通过普通用户的
方，需把客户的信息
接口提供。你可能需要使用登陆测览工具或审计报告，或可能直接查
询数据库表单来阅读相关数据。
供其他系统使用的数据。如果你正在构建一个系统，该系统在以后
会传送信息到另一个系统（如50本《重视大脑的软件开发》的订
单）、你应该检查你准备传送到其他系统的数据格式和数据.那
表示你要检查系统底层的数据。
口
系统附加信息。对应用系统而言，创建数据的校验或数据的杂凑
（hash）以保证数据能正确存储是常见的。你应该手工检查（Hand-
check）这些东西。确认系统生成的时间戳是在正确的区间得以创
建，并且数据的储存是正确的。
口
残留数据，作为一个开发人员，非常容易忘记在系统处理过数据后、
清理系统。这可能带来安全风险和资源泄露。确认要删除的数据确实
得以删除，同时确认不应被删除的数据也应该没有被删除。检查应用
系统在运行时是否有数据溢出。在清理完成后，查询可能留下文件碎
片或登陆入口（Registry entries），验证卸载完应用系统之后，系统确
实干净。
240
第7章
---
## Page 277
测试和连续集成
以下是来自BeatBox项目中的一个使用情节。你的任务是为黑箱测试或灰箱测试
提供三个思路，并且描述实施这些测试时需要做的事情。
标题：传送图片给其他用户
插述：单“传送片”按钱，传送片
经其丝围户（只营支持JPEQ格式）.。应该有
不接受文件的选项，传送的文得的大小没有
优先级：
20
估计值：
1.测试...
传送-小-PEG文件给另外
这是事你超过头
>
你业如何测试：用离单的
通富播进测试索例
2.测试..