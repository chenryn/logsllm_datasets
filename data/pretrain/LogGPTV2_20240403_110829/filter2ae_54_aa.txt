原文：
这里要介绍的，是我见过的最好的KVM
(基于内核的虚拟机)挑战题目！在此，我要特别感谢[@shift_crops](https://twitter.com/shift_crops
"@shift_crops")为我们带来了一个如此迷人的挑战题目。随着赛事的结束，他已经公布了EscapeMe的[源代码](https://github.com/shift-crops/EscapeMe "源代码")。
对于这些公布的文件，读者可以从作者的[repo](https://github.com/shift-crops/EscapeMe
"repo")中下载，其中包括4个二进制文件、2个文本文件和1个python脚本。
此外，读者还可以从本人的CTF-writes [repo](https://github.com/david942j/ctf-writeups/tree/master/twctf-2018/EscapeMe "repo") 中找到相关的3个漏洞利用脚本。
**简介**
* * *
这个挑战涉及3个二进制文件，分别是kvm.elf、kernel.bin和memo-static.elf。
同时，该挑战中还有3个旗标，它们分别需要借助位于用户空间、内核空间和宿主机模拟器（kvm.elf）中的shellcode来获取。
首先，在shell中键入./kvm.elf kernel.bin memo-static.elf命令，将看到一个普通的pwn挑战界面：
kvm.elf是一个模拟器（与qemu-system类似），它是通过KVM（利用Linux内核实现的VM）进行模拟的。
kernel.bin实现了一个非常小的内核，能够加载静态ELF二进制文件和一些系统调用。
memo-static.elf是一个普通的ELF文件，实现了一个简单的内存管理系统。
由于源代码已在作者的[存储库](https://github.com/shift-crops/EscapeMe/
"存储库")中发布，所以，本文仅涉及我用到的漏洞，而不是整个挑战中的所有漏洞。
**EscapeMe1：用户空间**
* * *
memo-static.elf是一个静态链接的二进制文件，所以，我们不妨先过一遍checksec：
好吧，对于这个挑战来说，checksec没有什么用处，因为执行这个二进制文件的“内核”是在kernel.bin中实现的，它禁用了针对可执行文件的所有现代保护措施。因此，这里既没有ASLR，也没有NX（所有节都是可执行的），所以，我们只要能够控制rip，就能随心所欲了。
**漏洞分析**
* * *
实际上，这是一个“老洞”。在Alloc函数中，我们可以添加一个内存块（在堆上），最多可以添加0x28字节的数据，之后，我们可以设法通过Edit编辑每个内存块的内容，其中实现编辑操作的代码为：
    read(0, memo[id].data, strlen(memo[id].data));
如果该内存快恰好有0x28字节的非空数据，那么上面的操作会越界读取下一个块中的内容。
**漏洞利用**
* * *
虽然这是一个简单的堆溢出挑战，但是其中的内存分配不是由我们熟悉的glibc库中的ptmalloc函数完成的。虽然这里的malloc/free的机制与ptmalloc函数的非常相似，但是却少了tcache和fastbin。
我们决定在伪造的数据块上使用unlink攻击，具体如下图所示:
    |-----------------------------|
                       |              |     0x31     |
             (*ptr) -> |              |     0x51     |  |     0x50     |     0x30     | > 12) pfree(paddr + (i << 12), 0x1000);
这里没有漏洞。