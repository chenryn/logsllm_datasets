    .text:00000001C00399BC                 mov     ecx, r15d       ; ecx = view_index
    .text:00000001C00399BF                 mov     rsi, [rsi+8]    ; rsi = CSectionBitmapAllocator->xored_view
    .text:00000001C00399C3                 xor     edx, edx
    .text:00000001C00399C5                 shl     ecx, 0Ch        ; ecx = view_index * 0x1000
    .text:00000001C00399C8                 xor     rsi, rax        ; rsi = xored_view ^ xor_key
    .text:00000001C00399CB                 add     rsi, rcx        ; rsi = view + view_index * 0x1000
    .text:00000001C00399CE                 mov     rcx, rbx        ; rcx = CSectionBitmapAllocator->pushlock
    .text:00000001C00399D1                 call    cs:__imp_ExReleasePushLockExclusiveEx
    .text:00000001C00399D7                 call    cs:__imp_KeLeaveCriticalRegion
    .text:00000001C00399DD                 lea     eax, [r15+r15*2] ; r15 == view_index
    .text:00000001C00399E1                 add     eax, eax
    .text:00000001C00399E3                 sub     r12d, eax       ; r12d = free_bit_index - view_index * 6 == free_bit_index % 6
    .text:00000001C00399E6                 lea     ebx, [r12+r12*4]
    .text:00000001C00399EA                 shl     ebx, 7          ; ebx = r12 * 0x5 * 0x80 == r12 * 0x280
    .text:00000001C00399ED                 add     rbx, rsi        ; rbx += view + view_index * 0x1000
RBX在0x1C00399ED得到的值是新分配的SURFACE头部的地址，这个值是由CTypeIsolation::AllocateType()返回的。  
那么，如果nt!RtlFindClearBits()返回的是-1，也就是在当前CSectionEntry的RTL_BITMAP已满的情况下，会发生什么呢？经过分析，会发生下面的条件跳转：
    .text:00000001C0039870                 mov     rcx, [rsi+18h]  ; rcx = CSectionBitmapAllocator->xored_rtl_bitmap
    .text:00000001C0039874                 mov     edx, 1          ; NumberToFind
    .text:00000001C0039879                 xor     rcx, [rsi+10h]  ; BitMapHeader = xored_rtl_bitmap ^ xor_key
    .text:00000001C003987D                 call    cs:__imp_RtlFindClearBits
    .text:00000001C0039883                 mov     r12d, eax       ; r12 = free_bit_index
    .text:00000001C0039886                 cmp     eax, 0FFFFFFFFh ; free_bit_index == -1?
    .text:00000001C0039889                 jz      short loc_1C00398D6 ; if so, RTL_BITMAP is full, check another CSectionEntry
这一跳转检查CSectionEntry->next是否与CTypeIsolation相等，也就意味着我们此时已经到达了CSectionEntry对象列表的末尾。如果不相等，就会循环到下一个CSectionEntry对象，并重复该过程。
    .text:00000001C00398D6 loc_1C00398D6:                          ; CODE XREF: NSInstrumentation::CTypeIsolation::AllocateType(void)+89j
    .text:00000001C00398D6                 lea     rcx, [rsp+48h+arg_0]
    .text:00000001C00398DB                 call    NSInstrumentation::CAutoExclusiveCReaderWriterLock::~CAutoExclusiveCReaderWriterLock(void)
    .text:00000001C00398E0 loc_1C00398E0:                          ; CODE XREF: NSInstrumentation::CTypeIsolation::AllocateType(void)+1F0j
    .text:00000001C00398E0                 mov     r14, [r14]      ; r14 = CSectionEntry->next
    .text:00000001C00398E3                 mov     ebp, 0
    .text:00000001C00398E8                 cmp     r14, r13        ; CSectionEntry->next == CTypeIsolation ?
    .text:00000001C00398EB                 jnz     loc_1C0039843   ; if not, keep traversing the list
否则，如果我们已经到达CSectionEntry对象列表的末尾，但没有找到一个空位置（也就是说，每个CSectionEntry都最大限度占用了0xF0
SURFACE头部），那么就会到达下面的代码位置。如下所示，会创建一个新的CSectionEntry，并且这个新的CSectionEntry的CSectionBitmapAllocator成员会调用CSectionBitmapAllocator::Allocate()。如我们所预期的那样，CSectionBitmapAllocator::Allocate()完成的几乎是之前描述的过程：在RTL_BITMAP中找到一个闲置位，提交与闲置位相对应的0x1000字节的视图，在RTL_BITMAP将该位标记为忙状态，并返回提交的视图中新创建的SURFACE头部的地址。
    .text:00000001C00398F1 loc_1C00398F1:                          ; CODE XREF: NSInstrumentation::CTypeIsolation::AllocateType(void)+3Dj
    .text:00000001C00398F1                 xor     edx, edx        ; if we land here, that means that we finished traversing
    .text:00000001C00398F1                                         ; the list of CSectionEntry, without finding an empty slot
    .text:00000001C00398F3                 mov     rcx, rdi
    .text:00000001C00398F6                 call    cs:__imp_ExReleasePushLockSharedEx
    .text:00000001C00398FC                 call    cs:__imp_KeLeaveCriticalRegion
    .text:00000001C0039902                 call    NSInstrumentation::CSectionEntry::Create(void)
    .text:00000001C0039907                 mov     rdi, rax        ; rdi = new CSectionEntry
    .text:00000001C003990A                 test    rax, rax
    .text:00000001C003990D                 jz      short loc_1C003996D
    .text:00000001C003990F                 mov     rcx, [rax+20h]  ; rcx = CSectionEntry->bitmap_allocator
    .text:00000001C0039913                 call    NSInstrumentation::CSectionBitmapAllocator::Allocate(void) ; *** do the actual SURFACE header allocation
    .text:00000001C0039918                 mov     rbp, rax        ; rbp = return value, allocated SURFACE header
最后，新创建的CSectionEntry被插入在双链表的末尾，如下所示。请注意，在使用列表的指针之前会进行完整性检查：代码会验证CTypeIsolation->previous的下一个指针是否指向CTypeIsolation头。
    .text:00000001C0039939                 mov     rcx, [r13+8]    ; rcx = CTypeIsolation->previous
    .text:00000001C003993D                 cmp     [rcx], r13      ; CTypeIsolation->previous->next == CTypeIsolation ?
    .text:00000001C0039940                 jnz     FatalListEntryError_9 ; if not, the list is corrupted
    .text:00000001C0039946                 mov     [rdi+8], rcx    ; CSectionEntry->previous = CTypeIsolation->previous
    .text:00000001C003994A                 xor     edx, edx
    .text:00000001C003994C                 mov     [rdi], r13      ; CSectionEntry->next = CTypeIsolation
    .text:00000001C003994F                 mov     [rcx], rdi      ; CTypeIsolation->previous->next = CSectionEntry
    .text:00000001C0039952                 mov     rcx, rbx
    .text:00000001C0039955                 add     dword ptr [r13+18h], 0F0h ; CTypeIsolation->size += 0xF0
    .text:00000001C003995D                 mov     [r13+8], rdi    ; CTypeIsolation->previous = CSectionEntry
###  4.4 释放
SURFACE对象的释放，是由win32kbase!SURFACE::Free()函数来完成的。该函数第一步会对像素数据缓冲区所分配的池进行释放：
    .text:00000001C002DC9A                 cmp     byte ptr [rbp+270h], 0 ; boolean is_kernel_mode_pixel_data_buffer
    .text:00000001C002DCA1 loc_1C002DCA1:                          ; DATA XREF: .rdata:00000001C017D540o
    .text:00000001C002DCA1                 mov     [rsp+48h+arg_8], rbx
    .text:00000001C002DCA6                 jz      short loc_1C002DCCC    ; if byte[SURFACE+0x270] == 0, the pixel data buffer is not freed
    .text:00000001C002DCA8                 mov     rbx, [rbp+48h]  ; rbx = SURFACE->pvScan0
    .text:00000001C002DCAC                 test    rbx, rbx
    .text:00000001C002DCAF                 jz      short loc_1C002DCCC
    .text:00000001C002DCB1                 call    cs:__imp_IsWin32FreePoolImplSupported
    .text:00000001C002DCB7                 test    eax, eax
    .text:00000001C002DCB9                 js      short loc_1C002DCC4
    .text:00000001C002DCBB                 mov     rcx, rbx
    .text:00000001C002DCBE                 call    cs:__imp_Win32FreePoolImpl ; frees the pixel data buffer
在此之后，它会开始遍历CSectionEntry对象的双向链表，试图确定哪一个CSectionEntry中包含了需要释放的SURFACE头部。为了实现这一点，只需要检查是否满足CSectionEntry->view
view +
0x28000。请大家注意，这一判断条件是存在问题的，正确的判断条件应该为：CSectionEntry->view view + 0x28000，其中第二个比较符号应为小于号，而不是小于等于号。
    .text:00000001C002DCCC                 mov     rax, cs:uchar * * gpTypeIsolation
    .text:00000001C002DCD3                 mov     rsi, [rax]      ; rsi = CTypeIsolation head
    [...]
    .text:00000001C002DD08                 mov     rbx, [rsi]      ; rbx = CTypeIsolation->next
    .text:00000001C002DD0B                 cmp     rbx, rsi        ; next == CTypeIsolation ?
    .text:00000001C002DD0E                 jz      loc_1C002DDFF   ; if so, there's no CSectionEntry
    .text:00000001C002DD14                 mov     r12, 0CCCCCCCCCCCCCCCDh
    .text:00000001C002DD1E                 xchg    ax, ax
    .text:00000001C002DD20 loc_1C002DD20:                          ; CODE XREF: SURFACE::Free(SURFACE *)+C5j
    .text:00000001C002DD20                 mov     r14, [rbx+20h]  ; r14 = CSectionEntry->bitmap_allocator
    .text:00000001C002DD24                 mov     r8, [r14+10h]   ; r8 = bitmap_allocator->xor_key
    .text:00000001C002DD28                 mov     rax, r8
    .text:00000001C002DD2B                 xor     rax, [r14+8]    ; rax = xor_key ^ xored_view
    .text:00000001C002DD2F                 cmp     rbp, rax        ; SURFACE < view?
    .text:00000001C002DD32                 jb      short loc_1C002DD3F ; ...if so, skip to the next CSectionEntry
    .text:00000001C002DD34                 add     rax, 28000h     ; view += section_size
    .text:00000001C002DD3A                 cmp     rbp, rax        ; SURFACE <= end of last view?
    .text:00000001C002DD3D                 jbe     short loc_1C002DD4C ; if so, we found the view containing the SURFACE header
当满足条件时，意味着我们已经找到了包含着要被释放的SURFACE头部的CSectionEntry。随后，会计算其视图中的SURFACE索引（在这里我们称之为index_within_view），计算方式是获取SURFACE地址中较低的3个
半字节（Nibble），并将其除以0x280。
    .text:00000001C002DD4C loc_1C002DD4C:                          ; CODE XREF: SURFACE::Free(SURFACE *)+BDj
    .text:00000001C002DD4C                 mov     rcx, rbp        ; rcx = SURFACE header
    .text:00000001C002DD4F                 mov     rax, r12
    .text:00000001C002DD52                 and     ecx, 0FFFh
    .text:00000001C002DD58                 mul     rcx
    .text:00000001C002DD5B                 mov     r15, rdx
    .text:00000001C002DD5E                 shr     r15, 9          ; r15 = (SURFACE & 0xfff) / 0x280 == index_within_view
    .text:00000001C002DD62                 lea     rax, [r15+r15*4]
    .text:00000001C002DD66                 shl     rax, 7          ; rax = r15 * 0x5 * 0x80 == r15 * 0x280
    .text:00000001C002DD6A                 sub     rcx, rax        ; if rcx == rax, it's ok