### Challenges in Trust Anchor Management

Validators often lack the necessary permissions to persist state to disk, or they may lose state due to container or virtual machine teardown and reinitialization. The latter issue is becoming increasingly problematic as the use of container technologies has proliferated, a scenario not anticipated when RFC 5011 was authored 11 years ago. Additionally, DNSSEC validation is now being integrated into end-user applications, such as the VPN client mentioned in Section 4.1.2, often with hard-coded trust anchors. A search on GitHub reveals thousands of examples of this practice. This raises the question of whether in-band updates via RFC 5011 will remain the primary method for trust anchor management in the future.

Some resolver implementations distribute trust anchors within their software packages, which are refreshed with software updates. While this approach works to some extent, it does not scale well for applications performing validation. We have also observed significant delays in retiring trust anchors, as evidenced by the unexpected resurgence of KSK-2010.

### Recommendations for Trust Anchor Distribution

Based on these findings, we recommend that the preferred method for distributing trust anchors should be through operating systems (out-of-band). Some distributions, such as Debian Linux, have already begun implementing this approach. Applications can then rely on the OS for trust anchor management, and we strongly advise against hard-coding trust anchors. Furthermore, OS distributors should tightly manage these trust anchors when they are replaced.

In Section 4.3.4, we discussed whether the retention of the retired KSK-2010 was problematic. On the surface, the answer is "No," as the key was retired according to schedule, and all copies have been destroyed. However, consider two scenarios: one where a key is revoked because it has been compromised, and another where the algorithm for the key has been compromised. In both cases, it is imperative to quickly retract the key as a trust anchor. The current practice we observed is insufficient for such scenarios.

Given the challenges in addressing this issue Internet-wide, we recommend an additional security practice: if a key needs to be revoked, the root DNSKEY RRset should include the revocation signal until there is reasonable certainty that systems have been updated to remove the trust anchor. This practice ensures that software correctly implementing RFC 5011 will not use the compromised key as a trust anchor.

### Conclusions

In this paper, we provide a comprehensive analysis of the first DNSSEC Root KSK Rollover. Our findings show that while the rollover did not pass without problems—hundreds of actively used resolvers failed to validate signatures at some point during the process—these issues affected only a small fraction of the total resolver population and were generally resolved quickly. Additionally, thousands of resolvers exhibited anomalous behavior, though it remains unclear if this caused problems for end users. The significant traffic increase to root servers after the revocation of KSK-2010 requires attention from the DNS community for future rollovers. We demonstrated that at least some of these queries can likely be attributed to bugs in resolver software.

We also found that telemetry, used to measure the deployment of new keys, was significantly distorted by a single application (a VPN client). We analyzed a complementary protocol, which, while potentially valuable, still has drawbacks. Based on our experiences, we provide recommendations for incremental improvements to both protocols. Additionally, we observe that trust anchor distribution, which the rollover design team expected to happen mostly in-band, requires attention for future rollovers, and we provide recommendations for alternatives.

While our work focused heavily on anomalies, our analysis supports ICANN's conclusion that the rollover was an overall success. As with earlier changes to the root system, some systems will fail, and this study shows that the Root KSK rollover was no different. These failures, however, were limited to a very small set of resolvers and were fixed quickly, limiting the impact. This gives us confidence that this first-ever rollover should not be the last.

### Broader Lessons

Taking a step back from the specifics of the DNS, there are valuable lessons to be learned from this event that apply more broadly to Internet protocols. Firstly, the experience with this event underscores the importance of telemetry in understanding and making decisions about major changes to the Internet. The event also highlights the inertia of the installed base of networking software across the Internet, which hampers the deployment of such telemetry enhancements. This underlines the need to make measurability an explicit concern when designing protocols, as argued by others in the network research community [56].

Secondly, there are lessons to be drawn about trust anchor management. The more places in which trust anchors are stored (i.e., in different applications and services), the harder it becomes to predictably manage them. We posit that trust anchors should be managed centrally, in the OS. While not a perfect solution, this approach limits the risk of hard-coded or mismanaged trust anchors. This lesson applies equally to other Public Key Infrastructures.

### Acknowledgements

The authors would like to thank the following organizations (in alphabetical order): Amazon, DNS-OARC, ICANN, NIC.at, OVH, Purdue University, RIPE, and SURFnet. We also extend our gratitude to Anna Sperotto, Evan Hunt, our shepherd Matthew Luckie, Ondřej Surý, and the anonymous IMC reviewers. This research was supported in part by NSF grants CNS-1850465, CNS-1901090, and EC H2020 Project CONCORDIA GA 830927.

### References

[References listed here, formatted consistently and alphabetically.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.