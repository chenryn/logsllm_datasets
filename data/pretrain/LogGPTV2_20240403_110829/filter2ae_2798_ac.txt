> Figure 11 Zeek signature to detect SSRF targeting AWS EC2 IMS (ssrf.sig)
>  
>  
>     signature aws-ec2-ims-request {
>         ip-proto == tcp
>         dst-port == 80
>         payload /.*meta-data\/iam\/security-credentials/
>         event "EC2 Instance Metadata path in request, SSRF attempt"
>     }
>  
>  
>     signature aws-ec2-ims-response-access-key {
>         ip-proto == tcp
>         src-port == 80
>         payload /.*\"SecretAccessKey\" :/
>         event "Potential AWS IAM temporary credential in HTTP response,
> successful SSRF exploitation"
>     }
第一个签名(译者注:可以理解为Zeek的一条检测规则)，可以检测"枚举角色名称的请求"、"获取临时访问凭据的HTTP请求"，因为这两个HTTP请求的path部分，有一部分字符串是相同的，都会被该签名匹配到。
重要的是，该签名省略了路径的“最新”部分，因为特定的IMS协议版本也能被作为获取凭据的目标。使用命令`zeek -r request.pcap -s
ssrf.sig`运行Zeek会生成一个signatures.log文件，该文件详细说明了检测结果：
> Figure 12 Zeek signatures.log output showing SSRF detection  
>
> 
#### 3.3.2. Detecting SSRF using Suricata
测试Suricata的检测能力。
虽然Snort当前不支持VXLAN解封装，但Suricata 4.1.5支持。  
Suricata是一个开源的入侵检测和防御系统，具有许多与Snort相同的基于签名的功能。尽管Suricata中设置的默认签名集不检测对EC2
IMS的尝试访问，但通过启用VXLAN
decoder并为元数据"端点"(endpoint)定义签名后，Suricata可以检测到SSRF尝试。具体检测规则见Figure 13。
> Figure 13 Suricata rules that detect SSRF requests and responses with
> temporary credentials
>  
>  
>     alert ip any any -> $HOME_NET 80 (msg:"AWS EC2 IMS Recon"; sid:10000001;
> rev:001; flow:to_server; content:"/metadata/iam/security-credentials";)
>     alert ip $HOME_NET 80 -> any any (msg:"AWS EC2 IMS Credential Exfil";
> sid:10000003; rev:001; flow:to_client,established;
> content:"\"SecretAccessKey\" :";)
因为Suricata可以正确解释VXLAN封装(VXLAN encapsulation)，所以HTTP活动不会显示为UDP流量，而是显示为基础TCP流。  
使用命令`suricata -r
request.pcap`(这个命令很常用！)运行Suricata会生成一个`/var/log/suricata/fast.log`文件，该文件详细说明了检测：
> Figure 14 Suricata alert logs demonstrating detection of SSRF attempts on
> the EC2 IMS and credential exfiltration  
>
> 
#### 3.4. Detection using iptables
测试iptables的检测能力。
iptables是Amazon Linux上可用的"数据包过滤器"(packet
filter)。这种基于规则的功能允许管理员定义用于匹配数据包的参数，然后指定匹配成功时的动作：可用的操作包括"记录"(logging)、"转发"(forwarding)、"丢弃"(dropping)数据包。
观察`connect`syscall是监视网络活动的一种非常具体的方法，而iptables提供了匹配条件，包括源IP地址、目标IP地址、协议和目标端口。此外，iptables可以匹配数据包创建者的UID，GID，PID和SID。
有了这种功能，管理员就可以控制EC2实例，在EC2实例中
所有进程都只有唯一的UID，通过使用PID来区分进程，或者在所有进程都被独立的"目的服务主体"(purpose service
principals)通过UID或GID区分开的环境中，以最低的误报率可靠地检测SSRF攻击。根据控制环境的不同，可以使用多种方法授权一个进程绑定到一个具有独有UID的"特权端口"(privileged
port,The TCP/IP port numbers below
1024)。为了测试iptables是否可以用于检测SSRF，研究人员向Node.js二进制文件授予了"系统功能"(system
capability)，允许它使用`sudo setcap CAP_NET_BIND_SERVICE=+eip
/usr/bin/node`命令绑定到1024以下的端口。
  * 然而在生产环境中，更合适的替代策略是：
    * 容器化(containerization)
    * chroot
    * 通过端口地址转换(port address translation)，将负载均衡器的入站HTTP/HTTPS listener映射到主机上的非特权端口(AWS Elastic Load Balancer原生支持这种转换)
使用已知的UID(本例中为1001)作为一个server来处理一些用户请求（我们不希望调用IMS的那些用户请求），可以使用以下iptables命令写入一条检测规则:
`sudo iptables -A OUTPUT -p tcp --dport 80 d 169.254.169.254 -m owner --uid-owner 1001 -j LOG`
配置完成后，syslog或dmesg会记录下：来自该Node.js服务器的 对IMS的所有访问。 如Figure 15所示：
> Figure 15 dmesg output after an iptables LOG rule implemented to log IMS
> accesses from a publicly accessible server process.  
>
> 
此外，本研究还确定了第2条iptables规则，当把它加到日志规则之后的iptables规则链中时，还可以使用以下命令拒绝出站流量，从而防止SSRF:  
`sudo iptables -A OUTPUT -p tcp --dport 80 -d 169.254.169.254 -m owner --uid-owner 1001 -j REJECT`
应用了这个"reject"规则后，有漏洞的测试程序执行了SSRF，当本地防火墙规则拒绝SSRF连接尝试时，该程序会记录到一个内部错误，由于该程序正确地处理了error情况，所以这条"reject"规则并不会影响用户的体验，Node.js进程向console报告了以下错误:
> Figure 16 Application error message when iptables blocked SSRF access via a
> REJECT rule  
>
> 
iptables需要你具有EC2实例的shell权限：  
通过访问EC2实例的shell，系统管理员可以使用"主体隔离"(principal
segregation)和iptables来检测和防止SSRF访问IMS。应用程序程序员也可以catch和log这些连接错误，这为安全人员提供另一种方法来识别已被阻止了的SSRF尝试。
没有shell权限就不能使用iptables：  
然而，提供给管理员用于部署到其环境的“黑盒(black
box)”虚拟设备，比如来自AWS市场，发布者被要求实现适当的SSRF保护，因为客户无法在这些设备上配置基于主机的管控(如iptables)。
#### 3.5. Detection using auditd
测试auditd的检测能力。
auditd是一个系统日志记录工具包，它支持捕获低级别的审计活动。它可以捕获关于各种系统调用(syscalls)的基本信息，并构成许多安全事件检测系统的基础，这些系统将这些数据关联起来并分析潜在的恶意活动。
  * 检测对SSRF攻击有意义的那些系统调用(syscalls)只能有限地缩小误报率。为什么？举几个例子
    * 1.系统调用`execve` \- SSRF攻击连接到已知的主机，但该连接是从具有SSRF漏洞的服务器组件(通常是web服务器)的进程上下文中进行的（并没有生成新进程）。如果一个服务器进程需要生成额外的进程，那么审计`execve`syscall(生成一个新程序)并不是可靠的SSRF指示器。
    * 2.系统调用`gethostname` \- 针对IMS的SSRF攻击的目标是一个众所周知的地址，即169.254.169.254，并且不需要将主机名解析为IP地址，所以审计`gethostname`syscall对检测SSRF毫无用处。
    * 3.系统调用`connect` \- 该syscall可以检测针对EC2 IMS的link-local地址169.254.169.254的SSRF活动。通过添加类似Figure 17的审计规则，auditd将socket连接信息记录到了"审计日志"(audit logging)目录中。
> Figure 17 Command to add an auditd rule to log the connect() syscall
>  
>  
>     auditctl -a always,exit -F arch=b64 -S connect
audit.log文件包含了详细信息，有关执行所有已审计的操作的进程上下文的详细信息。  
`connect`syscall包含：UID，EUID，GID，PID annotations，一个编码了的saddr实参值。  
该参数的值是以十六进制格式"socket family"、"port number"、"IP address"进行编码。  
对于EC2 IMS来说 `saddr = 02000050A9FEA9FE0000000000000000`
正如在iptables中所观察到的，安全工程师可以使用"审计记录"(audit
records)来观察针对IMS的连接请求，这些请求源自于意外但有效的用户身份。如果管理员对需要IMS访问的进程、不需要IMS访问的进程，使用了不同的uid和gid，则此活动将以较低的误报率识别SSRF请求。
### 3.6. Discussion of other known detection techniques
其他已知检测技术的讨论。
#### 3.6.1. Inline Firewall Services and Appliances
AWS虚拟私有云(VPC)中的入侵检测和预防系统(IDPS)可以解密和分析流量，有可能观察和阻止访问IMS的尝试。然而，由于云环境使用软件定义网络(SDN)既不支持"广播网络地址"(broadcast
network addresses)，传统上不支持"端口镜像"(port
mirroring)，或生成捕捉流量的网络交换机或路由器设备，这些策略需要内联设备、基于主机的入侵检测系统(HIDS)，或基于主机的流量转发到IDS
collectors。
内联IDS系统在云环境中存在问题：因为它们倾向于"过载"(overloaded)，在SDN约束下无法有效地实现负载平衡以及部署成本。工程师必须部署大量的collectors以实现全面的"入口"(ingress)、"出口"(egress)覆盖
(C. Mazzariello, 2010)。