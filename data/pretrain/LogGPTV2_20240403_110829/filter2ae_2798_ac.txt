### 3.3.1. 检测SSRF使用Zeek

**Figure 11: Zeek签名以检测针对AWS EC2实例元数据服务（IMS）的SSRF攻击 (ssrf.sig)**

```zeek
signature aws-ec2-ims-request {
    ip-proto == tcp
    dst-port == 80
    payload /.*meta-data\/iam\/security-credentials/
    event "EC2 Instance Metadata path in request, SSRF attempt"
}

signature aws-ec2-ims-response-access-key {
    ip-proto == tcp
    src-port == 80
    payload /.*\"SecretAccessKey\" :/
    event "Potential AWS IAM temporary credential in HTTP response, successful SSRF exploitation"
}
```

第一个签名可以检测枚举角色名称的请求和获取临时访问凭据的HTTP请求，因为这些请求的路径部分包含相同的字符串。该签名省略了路径的“最新”部分，因为特定的IMS协议版本也可以作为获取凭据的目标。运行以下命令会生成一个`signatures.log`文件，详细记录检测结果：

```bash
zeek -r request.pcap -s ssrf.sig
```

**Figure 12: Zeek signatures.log输出显示SSRF检测**

### 3.3.2. 检测SSRF使用Suricata

测试Suricata的检测能力。虽然Snort当前不支持VXLAN解封装，但Suricata 4.1.5支持。

Suricata是一个开源的入侵检测和防御系统，具有许多与Snort相同的功能。尽管Suricata中默认的签名集不检测对EC2 IMS的尝试访问，但通过启用VXLAN解码器并为元数据端点定义签名后，Suricata可以检测到SSRF尝试。具体检测规则见Figure 13。

**Figure 13: Suricata规则检测SSRF请求和响应中的临时凭据**

```suricata
alert ip any any -> $HOME_NET 80 (msg:"AWS EC2 IMS Recon"; sid:10000001; rev:001; flow:to_server; content:"/metadata/iam/security-credentials";)
alert ip $HOME_NET 80 -> any any (msg:"AWS EC2 IMS Credential Exfil"; sid:10000003; rev:001; flow:to_client,established; content:"\"SecretAccessKey\" :";)
```

由于Suricata可以正确解释VXLAN封装，因此HTTP活动不会显示为UDP流量，而是显示为基础TCP流。运行以下命令会生成一个`/var/log/suricata/fast.log`文件，详细记录检测结果：

```bash
suricata -r request.pcap
```

**Figure 14: Suricata警报日志显示对EC2 IMS的SSRF尝试和凭据外泄**

### 3.4. 使用iptables进行检测

测试iptables的检测能力。iptables是Amazon Linux上可用的数据包过滤器，允许管理员定义匹配数据包的参数，并指定匹配成功时的动作，如记录、转发或丢弃数据包。

观察`connect`系统调用是监视网络活动的一种方法，而iptables提供了包括源IP地址、目标IP地址、协议和目标端口在内的匹配条件。此外，iptables可以匹配数据包创建者的UID、GID、PID和SID。

通过这种功能，管理员可以控制EC2实例，可靠地检测SSRF攻击。为了测试iptables是否可以用于检测SSRF，研究人员向Node.js二进制文件授予了系统功能，允许它绑定到1024以下的端口。

**生产环境中的替代策略：**
- 容器化
- chroot
- 通过端口地址转换将负载均衡器的入站HTTP/HTTPS监听器映射到主机上的非特权端口

使用已知的UID（例如1001）处理用户请求，可以使用以下iptables命令写入一条检测规则：

```bash
sudo iptables -A OUTPUT -p tcp --dport 80 -d 169.254.169.254 -m owner --uid-owner 1001 -j LOG
```

配置完成后，syslog或dmesg会记录来自该Node.js服务器的所有IMS访问。见Figure 15。

**Figure 15: dmesg输出显示iptables日志规则记录IMS访问**

此外，还可以添加拒绝出站流量的规则，以防止SSRF：

```bash
sudo iptables -A OUTPUT -p tcp --dport 80 -d 169.254.169.254 -m owner --uid-owner 1001 -j REJECT
```

应用此规则后，有漏洞的测试程序在执行SSRF时会记录内部错误，但不会影响用户体验。见Figure 16。

**Figure 16: 当iptables阻止SSRF访问时的应用程序错误消息**

iptables需要EC2实例的shell权限。通过访问EC2实例的shell，系统管理员可以使用主体隔离和iptables来检测和防止SSRF访问IMS。应用程序程序员也可以捕获和记录这些连接错误，从而为安全人员提供另一种识别被阻止的SSRF尝试的方法。

对于没有shell权限的情况，提供给管理员部署的“黑盒”虚拟设备（如来自AWS市场）应实现适当的SSRF保护，因为客户无法在这些设备上配置基于主机的管控。

### 3.5. 使用auditd进行检测

测试auditd的检测能力。auditd是一个系统日志记录工具包，支持捕获低级别的审计活动，构成许多安全事件检测系统的基础。

**检测有意义的系统调用：**
- `execve`：SSRF攻击连接到已知主机，但通常从具有SSRF漏洞的服务器组件的进程上下文中进行。如果服务器进程需要生成额外的进程，审计`execve`并不是可靠的SSRF指示器。
- `gethostname`：针对IMS的SSRF攻击不需要将主机名解析为IP地址，因此审计`gethostname`对检测SSRF无用。
- `connect`：该系统调用可以检测针对EC2 IMS的link-local地址169.254.169.254的SSRF活动。通过添加类似Figure 17的审计规则，auditd将socket连接信息记录到审计日志目录中。

**Figure 17: 命令添加auditd规则以记录`connect()`系统调用**

```bash
auditctl -a always,exit -F arch=b64 -S connect
```

`audit.log`文件包含有关执行所有已审计操作的进程上下文的详细信息。`connect`系统调用包含UID、EUID、GID、PID注释以及编码的`saddr`参数值。对于EC2 IMS，`saddr = 02000050A9FEA9FE0000000000000000`。

通过审计记录，安全工程师可以观察针对IMS的连接请求，这些请求源自意外但有效的用户身份。如果管理员对需要IMS访问的进程和不需要IMS访问的进程使用不同的UID和GID，则可以以较低的误报率识别SSRF请求。

### 3.6. 其他已知检测技术的讨论

#### 3.6.1. 内联防火墙服务和设备

AWS虚拟私有云（VPC）中的入侵检测和预防系统（IDPS）可以解密和分析流量，有可能观察和阻止访问IMS的尝试。然而，由于云环境使用软件定义网络（SDN），既不支持广播网络地址，也不支持端口镜像，或生成捕捉流量的网络交换机或路由器设备，这些策略需要内联设备、基于主机的入侵检测系统（HIDS），或基于主机的流量转发到IDS收集器。

内联IDS系统在云环境中存在问题，因为它们容易过载，在SDN约束下无法有效实现负载平衡且部署成本高。工程师必须部署大量的收集器以实现全面的入口和出口覆盖（C. Mazzariello, 2010）。