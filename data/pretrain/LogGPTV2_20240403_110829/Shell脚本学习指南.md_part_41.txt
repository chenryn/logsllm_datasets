### 版本 1.0

#### 默认目录
默认目录路径：`snuzLpHcm/directories`

#### 初始化文件
默认的初始化文件路径：`SBUILDHONE/userhost8`

#### 包分发位置列表
如果用户未提供个人化列表，则使用以下默认列表：
```bash
SRCDIRS=$(echo $defaultdirectories 2> /dev/null)
SRCDIRS=*
```

---

## 第 8 章

### 目录结构
- `/usr/local/gnu/src`
- `/usr/local/src`
- `OIS/3NOHS`
- `$HOME/gnu/exc`
- `/tmp`
- `/usr/tmp`
- `/var/tmp`

### 循环处理命令行参数
```bash
while [ $# -gt 0 ]; do
    case "$1" in
        --all | --al | -a | -a11 | -al | -a )
            shift
            ALLTARGETS="$1"
            ;;
        --cd | -cd )
            CONFIGUREDIR="$1"
            shift
            ;;
        check | -check | -cbeck )
            CHECKTARGETS="$1"
            shift
            ;;
        --configure | --configur | --configu | --config | --confi | --conf | --con | --co | -configure | -configur | -configu | -config | -confi | -conf | -con | -co )
            shift
            ;;
        --environment | --environmen | --environne | --environm | --environ | --enviro | --envir | --env | --en | --e | -environment | -environmen | -environne | -environm | -envixon | -enviro | -envir | -envi | -env | -en | e )
            EXTRAENVIRONNENT="$1"
            shift
            ;;
        --help | --hel | --he | --h | --? | -help | -hel | -he | -b | -? )
            usage_and_exit 0
            ;;
        --logdirectory | --logdirector | --logdirecto | --logdirect | --logdirec | --logdire | --logdir | --logdi | --logd | -log | -l | -logdirectory | -logdirector | -logdirecto | -logdirect | -logdiree | -logdire | -logdir | -logdi | -logd | -log | -lo | -l )
            shift
            LOGDIRECTORY="$1"
            ;;
        --source | --sourc | --sour | --so | -source | -sourc | -sour | -so )
            shift
            ALTSRCDIRS="$ALTSRCDIRS $1"
            ;;
        --userhosts | --userhost | --userhos | --userho | --userh | --user | --use | --us | --u | -userhosts | -userhost | -userhos | -userho | -userh | -user | -use | -us | -u )
            set_userhosts "$1"
            shift
            ;;
        --version | --versio | --versi | --vers | --ver | --ve | -v | -version | -versio | -versi | -vers | -ver | -ve | -v )
            version
            exit 0
            ;;
        * )
            echo "Unknown option: $1"
            break
            ;;
    esac
    shift
done
```

### 查找邮件客户端程序
```bash
for MAIL in /bin/mailx /usr/bin/mailx /usr/sbin/mailx /usr/ucb/mailx /bin/mail /usr/bin/mail; do
    if [ -x "$MAIL" ]; then
        break
    fi
done

if [ ! -x "$MAIL" ]; then
    echo "Cannot find mail client"
fi
```

### 处理用户主机列表
```bash
if [ -n "$USERHOSTS" ]; then
    USERHOSTS=$(echo "$USERHOSTS" | $SSTRIPCOMMENTS 2> /dev/null)
else
    if [ -z "$ALTUSERHOSTS" ]; then
        ALTUSERHOSTS="$DEFAULTUSERHOSTS"
    fi
    USERHOSTS=$(echo "$ALTUSERHOSTS" | $SSTRIPCOMMENTS 2> /dev/null)
fi
```

### 检查并执行操作
```bash
for p in $SRCDIRS; do
    find_package "$p" || {
        echo "Cannot find package file $p"
        continue
    }
done
```

### 构建用户主机
```bash
for u in $USERHOSTS; do
    build_one "$u"
done
```

### 退出状态
```bash
if [ $EXITCODE -gt 125 ]; then
    EXITCODE=125
fi
exit $EXITCODE
```

### 小结
在本章中，我们编写了两个实用工具，这些工具使用Shell脚本和现有标准工具来完成任务。这两个程序都支持命令行选项，并通过`while`和`case`语句进行处理。它们还使用了Shell函数以简化处理并避免代码重复。此外，这些程序也考虑了安全性问题，并对参数和变量进行了健康检查。

---

## 第 9 章

### awk 的惊人表现
awk 是一种专为文本处理设计的语言。在本章中，我们将介绍如何在 Shell 脚本中使用 awk。对于更高级的 awk 语言处理，可以参考相关书籍或在线文档。

所有 UNIX 系统都至少有一套 awk 实现。在 20 世纪 80 年代中期，awk 扩展了很多功能，部分厂商仍维持旧版本（称为 oawk），而新版本则称为 nawk。IBM AIX 和 Sun Solaris 都有这种实现方式，但大多数系统当前仅提供新版 awk。Solaris 下的 POSIX 兼容版本位于 `/usr/xpg4/bin/awk`。在本书中，我们只讨论扩展后的语言，并称之为 awk，无论你系统中使用的是 nawk、gawk 还是 mawk。

我们对 awk 有强烈的偏爱，因为它简单且强大，非常适合各种文本处理任务。我们曾尝试用 C 或 C++ 重写一个 awk 程序，结果发现不仅代码更长、调试困难，而且性能提升也不明显。

与其他脚本语言不同，awk 有多个实现，这鼓励用户使用通用语言，并允许在不同实现之间自由切换。此外，awk 是 POSIX 标准的一部分，并且在非 UNIX 操作系统上也有实现。

### 获取免费的 awk 实现
如果你的系统上的 awk 不是标准版本，可以参考表 9-1 获取免费的实现。这些实现都具有良好的可移植性并且易于安装。

| 程序       | 位置                                                                                     |
|------------|------------------------------------------------------------------------------------------|
| 贝尔实验室的 awk | <http://cm.bell-labs.com/who/bwk/awk.tar.gz>                                           |
| gawk       | <ftp://ftp-gnu.org/gnw/gawk/>                                                           |
| mawk       | <ftp://ftp.whidbey.neu/pub/brennan/mawk-1.3.3.tar.gz>                                   |
| awka       | <http://awka.sourceforge.net/>（将 awk 转换为 C 的工具）                               |

### awk 命令行
awk 的调用可以定义变量、提供程序并指定输入文件：
```bash
awk [ -F fs ] [ -v var=value ... ] 'program' [ -- ] [ var=value ... ] [ file(s) ]
```
短程序可以直接在命令行上提供，而较长的程序则可以通过 `-f` 选项指定。如果需要连接多个程序文件，可以多次使用 `-f` 选项。另一种包含共享代码的方法是使用 `igawk` 程序，它是 gawk 分发的一部分。

如果命令行未指定文件名，awk 会读取标准输入。

`--` 选项表示后续的选项由程序自身处理。

`-F` 选项用于重新定义默认字段分隔符，通常作为第一个命令行选项。字段分隔符也可以通过内建变量 `FS` 设置。

`-V` 选项必须放在直接给定的任何程序之前，并在程序启动前生效。其他地方的初始化会在处理文件时完成。

### awk 程序模型
awk 将输入流视为记录的集合，每条记录可以进一步细分为字段。默认情况下，一行是一条记录，字段由非空白字符组成。程序员可以完全控制记录和字段的定义，并且可以在处理过程中更改。

一个 awk 程序由模式（pattern）和操作（action）组成，可能还包括函数（function）。对于每个匹配输入数据的模式，相应的操作会被执行。所有模式都会针对每条输入记录进行检查。

模式或操作可以省略。如果省略模式，则操作应用于每条记录；如果省略操作，则默认操作是打印匹配的记录到标准输出。

以下是传统 awk 程序的配置：
```awk
pattern { action }
```

- 如果模式匹配，执行操作。
- 如果模式省略，操作将应用于每条记录。
- 如果操作省略，默认操作是打印匹配的记录。

输入会自动从一个文件切换到下一个文件，awk 本身会处理文件的打开、读取和关闭，使用户程序专注于记录的处理。

awk 提供了两种特殊模式：`BEGIN` 和 `END`。与 `BEGIN` 关联的操作在处理任何文件之前执行一次，而与 `END` 关联的操作在处理完所有文件后执行一次。

---