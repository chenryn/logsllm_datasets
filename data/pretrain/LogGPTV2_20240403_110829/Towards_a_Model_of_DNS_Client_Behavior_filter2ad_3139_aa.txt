title:Towards a Model of DNS Client Behavior
author:Kyle Schomp and
Michael Rabinovich and
Mark Allman
Towards a Model of DNS Client Behavior
Kyle Schomp1(B), Michael Rabinovich1, and Mark Allman2
1 Case Western Reserve University, Cleveland, OH, USA
PI:EMAIL
2 International Computer Science Institute, Berkeley, CA, USA
Abstract. The Domain Name System (DNS) is a critical component
of the Internet infrastructure as it maps human-readable hostnames into
the IP addresses the network uses to route traﬃc. Yet, the DNS behavior
of individual clients is not well understood. In this paper, we present
a characterization of DNS clients with an eye towards developing an
analytical model of client interaction with the larger DNS ecosystem.
While this is initial work and we do not arrive at a DNS workload model,
we highlight a variety of behaviors and characteristics that enhance our
mental models of how DNS operates and move us towards an analytical
model of client-side DNS operation.
1 Introduction
The modern Internet relies on the Domain Name System (DNS) for two main
functions. First, the DNS allows people to leverage human-friendly hostnames
(e.g., www.cnn.com) instead of obtuse IP addresses to identify a host. Second,
hostnames provide a layer of abstraction such that the IP address assigned to
a hostname can vary over time. In particular, Content Distribution Networks
(CDNs) employ this late binding to direct users to the best content replica.
Previous work shows that DNS lookups precede over 60 % of TCP connections
[14]. As a result, individual clients issue large numbers of DNS queries. Yet,
our understanding of DNS query streams is largely based on aggregate popula-
tions of clients—e.g., at an organizational [6] or residential level [3]—leaving our
knowledge of individual client behavior limited.
This paper represents an initial step towards understanding individual client
DNS behavior. We monitor DNS transactions between a population of thousands
of clients and their local resolver such that we are able to directly tie lookups
to individual clients. Our ultimate goal is an analytical model of DNS client
behavior that can be used for everything from workload generation to resource
provisioning to anomaly detection. In this paper we provide a characterization
of DNS behavior along the dimensions our model will ultimately cover and also
anecdotally show promising modeling approaches.
Note, one view holds that DNS is a “side service” and should not be directly
modeled, but rather can be well understood by deriving the DNS workload from
This work was funded in part by NSF grant CNS-1213157.
c(cid:2) Springer International Publishing Switzerland 2016
T. Karagiannis and X. Dimitropoulos (Eds.): PAM 2016, LNCS 9631, pp. 263–275, 2016.
DOI: 10.1007/978-3-319-30505-9 20
264
K. Schomp et al.
applications such as web browsing and email transmission. However, deriving a
DNS workload from application behavior is at best diﬃcult because (i) client
caching policies impact what DNS queries are actually sent in response to an
application event, (ii) some applications selectively use pre-fetching to lookup
names before they are needed and (iii) such a derivation would entail under-
standing many applications to pull together a reasonable DNS workload. There-
fore, we take the approach that focusing on the DNS traﬃc itself is the most
tractable way to understand—and eventually model—name lookups.
To motivate the need for a model, we provide an exemplar from our previous
work. In [14], we propose that clients should directly resolve hostnames instead of
using a recursive resolver. Ideally, an evaluation of this end system-based mech-
anism would be conducted in the context of end systems themselves. However,
the best data we could obtain was at the level of individual households—which
we know to include multiple hosts behind a NAT. Therefore, the results of our
trace-driven simulations are at best an approximation of the impact of the mech-
anism we were investigating. Our results would have been more precise had we
been able to leverage a model of individual client DNS behavior.
Broadly, the remainder of this paper follows the contours of what a model
would capture. We ﬁrst focus on understanding the nature of the clients them-
selves in Sect. 3, ﬁnding that while most are traditional user-facing devices, there
are others that interact with the DNS in distinct ways. Next we observe in Sect. 4
that DNS queries often occur closely-spaced in time—e.g., driven by loading
objects for a single web page from disparate servers—and therefore we develop
a method to gather together queries into clusters. We then assess the num-
ber and spacing of queries in Sect. 5 and ﬁnally tackle the patterns in what
hostnames individual clients lookup in Sect. 6. We ﬁnd that clients have fairly
distinct “working sets” of names, and also that hostname popularity has power
law properties.
2 Dataset
Our dataset comes from two packet taps at Case Western Reserve University
(CWRU) that monitor the links connecting the two data centers that house
all ﬁve of the University’s DNS resolvers—i.e., between client devices and their
recursive DNS resolvers. We collect full payload packet traces of all UDP traﬃc
involving port 53 (the default DNS port). The campus wireless network situ-
ates client devices behind NATs and therefore we cannot isolate DNS traﬃc to
individual clients. Hence, we do not consider this traﬃc in our study (although,
future work remains to better understand DNS usage on mobile devices). The
University Acceptable Use Policy prohibits the use of NAT on its wired networks
while oﬀering wireless access throughout the campus, and therefore we believe
the traﬃc we capture from the wired network does represent individual clients.
Our dataset includes all DNS traﬃc from two separate weeks and is partitioned
by client location—in the residential or oﬃce portions of the network. Details of
the datasets are given in Table 1 including the number of queries, the number of
clients that issue those queries, and the number of hostnames queried.
Towards a Model of DNS Client Behavior
265
Table 1. Details of the datasets used in this study.
Dataset
Dates
Queries Clients
Hostnames
Feb:Residential
Feb. 26–Mar. 4
32.5 M 1359 (IPs)
652 K
Feb:Residential (ﬁlter)
Feb. 26–27, Mar. 2–4 16.4 M 1262 (MACs) 505 K
Feb:Residential:Users
Feb:Residential:Others
15 M
1033
1.11 M 229
Feb:Oﬃce
Feb. 26–Mar. 4
232 M 8770 (IPs)
499 K
7.94 K
1.98 M
Feb:Oﬃce (ﬁlter)
Feb. 26–27, Mar. 2–4 143 M 8690 (MACs) 1.87 M
Feb:Oﬃce:Users
Feb:Oﬃce:Others
118 M 5986
25.0 M 2704
Jun:Residential
Jun. 23–Jun. 29
11.7 M 345 (IPs)
1.52 M
158 K
140 K
Jun:Residential (ﬁlter)
Jun. 23–26, 29
6.22 M 334 (MACs)
120 K
Jun:Residential:Users
Jun:Residential:Others
5.81 M 204
408 K
130
Jun:Oﬃce
Jun. 23–Jun. 29
245 M 8335 (IPs)
116 K
4.13 K
1.61 M
Jun:Oﬃce (ﬁlter)
Jun. 23–26, 29
133 M 8286 (MACs) 1.52 M
Jun:Oﬃce:Users
Jun:Oﬃce:Others
108 M 5495
25.0 M 2791
1.42 M
63.1 K
Validation: During the February data collection, we collect query logs from
the ﬁve campus DNS resolvers to validate our datasets1. Comparing the packet
traces and logs we ﬁnd a 0.6 % and 1.8 % loss rates in the Feb:Residential and
Feb:Oﬃce datasets, respectively. We believe these losses are an artifact of our
measurement apparatus given that the loss rate is correlated with traﬃc volume.
Tracking Clients: We aim to track individual clients in the face of dynamic
address assignment. Simultaneously with the DNS packet trace, we gather logs
from the University’s three DHCP servers. Therefore, we can track DNS activity
based on MAC addresses. Note, we could not map 1.3 % of the queries across
our datasets to a MAC address because the source IP address in the query never
appears in the DHCP logs. These likely represent static IP address allocations.
Further, without any DHCP assignments we are conﬁdent that these IPs repre-
sent a single host.
Filtering Datasets: We ﬁnd two anomalies that skew the data in ways that are
not indicative of user behavior. First, we ﬁnd roughly 25 % of the queries request
the TXT record for debug.opendns.com (The next most popular record repre-
sents less than 1 % of the lookups!). We ﬁnd this query is not in response to users’
actions, but is automatically issued to determine whether the client is using the
OpenDNS resolver (indicated in the answer) [1]. We observe 298 clients querying
this record, which we assume use OpenDNS on other networks or used OpenDNS
in the past. We remove these queries from further analysis. The second anomaly
1 We prefer traces over logs due to the better timestamp resolution (msec vs. sec).
266
K. Schomp et al.
involves 18 clients whose prominent behavior is to query for debug.opendns.com
and other domains repeatedly without evidence of accomplishing much work.
The campus information technology department veriﬁed that these clients serve
an operational purpose and are not user-facing devices. Therefore, we remove
the 18 clients as they are likely unique to this network and do not represent
users. We do not attempt to further ﬁlter misbehaving hosts—e.g., infected or
misconﬁgured hosts—as we consider them part of the DNS workload (e.g., since
a resolver would be required to cope with their requests).
Timeframe: To more directly compare residential and oﬃce settings we exclude
Saturday and Sunday from our datasets.
Table 1 shows the magnitude of our ﬁltering. We ﬁnd commonality across
the partitions of the data, so we focus on the Feb:Residential:Users dataset for
conciseness and discuss how other datasets diﬀer as appropriate.
Table 2. Feb:Residential clients that ﬁt markers for general purpose devices.
Marker
All
Clients %
1262
100 %
Google analytics
983
Search engine
Google
Any other
Gmail
LDAP login
Any
1010
1006
602
881
840
1033
78 %
80 %
80 %
48 %
70 %
66 %
82 %
3 Identifying Types of Clients
Since our focus is on characterizing general purpose user-facing devices, we aim to
separate them from other types of end systems. We expect general-purpose sys-
tems are involved in tasks, such as (i) web browsing, (ii) accessing search engines,
(iii) using email, and (iv) conducting institutional-speciﬁc tasks2. Therefore, we
develop the following markers to identify general-purpose hosts:
Browsing: A large number of web sites embed Google Analytics [8] in their
pages, thus there is a high likelihood that regular users will query for Google
Analytics hostnames on occasion.
Searching: We detect web search activity via DNS queries for the largest search
engines: Google, Yahoo, Bing, AOL, Ask, DuckDuckGo, Altavista, Baidu,
Lycos, Excite, Naver, and Yandex.
2 In our case, this is campus-life tasks, e.g., checking the course materials portal.
Towards a Model of DNS Client Behavior
267
Email: CWRU uses Google to manage campus email and therefore we use
queries for mail.google.com to indicate email use.
Institutional-Speciﬁc Tasks: CWRU uses a single sign-on system for authen-
ticating users before they perform a variety of tasks and therefore we use
queries for the corresponding hostname as indicative of user behavior.
Table 2 shows the breakdown of the clients in the Feb:Residential dataset.
Of the 1,262 clients we identify 1,033 as user-facing based on at least one of the
above markers. Intuitively we expect that multiple markers likely apply to most
general purpose systems and in fact we ﬁnd at least two markers apply to 991 of
the clients in our dataset. Results for our other datasets are similar.
We next turn to the 229 clients (≈ 18 %) that do not match any of our mark-
ers for user-facing clients. To better understand these clients we aggregate them
based on the vendor portion of their MAC addresses. First, we ﬁnd a set of ven-
dors and query streams that indicate special-purpose devices: (i) 48 Microsoft
devices that query for names within the xboxlive.com domain, which we con-
clude are Xbox gaming consoles, (ii) 33 Sony devices that query for names
within the playstation.net domain, which we conclude are Sony Playstation
gaming consoles, (iii) 16 Apple devices that have an average of 11 K queries—
representing 96 % of their lookups—for the apple.com domain, even though the
average across all devices that lookup an apple.com name is 262 queries, which
we conclude are Apple TV devices and (iv) 7 Linksys devices that issue queries
for esuds.usatech.com, which we conclude are transaction systems attached to
the laundry machines in the residence halls (!).
In addition to these, we ﬁnd devices that we cannot pinpoint explicitly, but
do not in fact seem to be general-purpose client systems. We ﬁnd 41 Dell devices
that diﬀer from the larger population of hosts in that they query for more PTR
records than A records. A potential explanation is that these devices are servers
obtaining hostnames for clients that connect to them (e.g., as part of sshd’s
veriﬁcation steps or to log client connects). We also identify 12 Kyocera devices
that issue queries for only the campus NTP and SMTP servers. We conclude
that these are copy machines that also oﬀer emailing of scanned documents.
For the IP addresses that do not appear in the DHCP logs (i.e., addresses
statically conﬁgured on the hosts), we cannot obtain a vendor ID. However, we
note that 97 % of the queries and 96 % of the unique domain names from these
machines involve CWRU domains and therefore we conclude that they serve
some administrative function and are not general purpose clients. The remaining
61 devices are distributed among 42 hardware vendors. In the remainder of the
paper we will consider the general purpose clients (Users) and the special purpose
clients (Others) separately, as we detail in Table 1. We ﬁnd that our high-level
observations hold across all of the Users datasets, and thus present results for
the Feb:Residential:Users dataset only.
268
K. Schomp et al.
4 Query Clusters
Applications often call for multiple DNS queries in rapid succession—e.g., as part
of loading all objects on a web page, or prefetching names for links users may
click. In this section, we quantify this behavior using the DBSCAN algorithm [4]
to construct clusters of DNS queries that likely share an application event. The
DBSCAN algorithm uses two parameters to form clusters: a minimum cluster
size M and a distance ε that controls the addition of samples to a cluster. We
use the absolute diﬀerence in the query timestamps as the distance metric. Our
ﬁrst task is to choose suitable parameters. Our strategy is to start with a range
of parameters and determine whether there is a point of convergence where
the results of clustering do not change greatly with the parameters. Based on
the strategy in [4], we start with an M range of 3–6 and an ε range of 0.5–
5 s—note that M = 2 simpliﬁes to threshold based clustering, but does not
produce a point of convergence. We ﬁnd that 96 % of the clusters we identify
with M = 6 are exactly found when M = 3 and hence at M = 3 we have
converged on a reasonably stable answer which we use in the subsequent analysis.
Additionally, we ﬁnd that for ε ∈ [2.5, 5], the total number of clusters, the
distribution of cluster sizes, and the assignment of queries to clusters remain
similar irrespective of ε value and therefore use ε = 2.5 s in our analysis. We
deﬁne the ﬁrst DNS query per cluster as the root and all subsequent queries
in the cluster as dependents. In the Feb:Residential:Users dataset, we ﬁnd 1 M
clusters that encompass 80 % of the roughly 15 M queries in the dataset.
To validate the clustering algorithm we ﬁrst inspect the 67 K unique host-
names the algorithm labels as noise. We ﬁnd a variety of hostnames with the
most frequent being: WPAD [7] queries for discovering proxies, Google Mail
and Google Docs, software update polling (e.g., McAfee and Symantec), heart-
beat signals for gaming applications (e.g., Origin, Steam, Blizzard, Riot), video
streaming (e.g., Netﬂix, YouTube, Twitch), and the Network Time Protocol
(NTP). All of these names can intuitively come from applications that require
only sporadic DNS queries, as they are either making quick checks every once in
a while, or are using long-lived sessions that leverage DNS only when starting.
To validate the clusters themselves, we observe that there are frequently
occurring roots. Indeed, the 1 M clusters have only 72 K unique roots, with
the 100 most frequently occurring roots accounting for 395 K (40 %) of the
clusters. Further, the 100 most popular roots include popular web sites (e.g.,
www.facebook.com, www.google.com). These are the type of names we would
expect to be roots in the context of web browsing. Another common root is
safebrowsing.google.com [9], a blacklist directory used by some web browsers to
determine if a given web site is safe to retrieve. This is a distinctly diﬀerent type
of root than a popular web site because the root is not directly related to the
dependents by the page content, but rather via a process running on the clients.
This in some sense means SafeBrowsing-based clusters have two roots. While