if the statistical distance between them is at most .
Variables X, Y are called statistically indistinguishable
if  = negl(α) with security parameter α.
An important application of Deﬁnition 3 is its use in
the probability of distinguishing between two random
variables or two distributions [2]. This probability is
bounded by the statistical distance between the distri-
butions.
Deﬁnition 4 (Distinguishing Two Distributions ). Let
P0 and P1 be probability distributions on a ﬁnite set R.
Then for every adversary A, we have the distinguishing
advantage of A between P0 and P1,
P r[DistA(P0, P1)] ≤ Δ(P0, P1)
Deﬁnition 5 (SHUFFLE). Let S be a set containing n
distinct objects. A SHUFFLE of S is an ordered list of
the objects in S. A SHUFFLE of the set {1, 2, ..., n} is
called a SHUFFLE of n.
To shufﬂe a list, the set S is the indexes into the list.
The shufﬂe of a list re-orders the indexes. Informally this
is a permutation of a list.
If S contains n distinct objects, then there are exactly
n! SHUFFLES of n.
Deﬁnition 6 (PSEUDO RANDOM SHUFFLE (PRS)).
Let PRS be a deterministic polynomial time function,
on input a key k ∈ {0, 1}n, message m ∈ {0, 1}∗
, and
set of messages {l0, l1, ...li} where li ∈ {0, 1}∗
, outputs
a SHUFFLE of {l0, l1, ...li}. We say PRS is a Pseudo
Random Shufﬂe if:
• (Pseudorandomness:) For any probabilistic polyno-
mial time algorithm D there is a negligible function
(cid:2)(cid:2)(cid:2)(cid:2)P r[D(PRS(k, m, l))] − P r[D(R(l))]
(cid:2)(cid:2)(cid:2)(cid:2) ≤ NEGL(n)
NEGL such that
where the ﬁrst probability is taken over the uniform
choice of k ∈ {0, 1}n, m ∈ {0, 1}∗
and the
randomness of D, and the second probability is
taken over R(l), where R is a uniformly random
shufﬂe algorithm.
Deﬁnition 7 (The IND-CUDA Indistinguishability
Experiment ). Let Π = (Gen, Enc, Dec) be a WRE
searchable encryption scheme with message space M
and key space K. Let X be the security parameter for
Π. Let A be an poly-bounded adversary.
IND-CUDAΠ,A(n,X ):
• (k0, k1) ← Gen(1n).
• A(X , n0, n1) chooses a pair of lists of messages
M0, M1 where |M0| = |M1| and for all mi, mj ∈
M0, mk, ml ∈ M1,|mi| = |mj| = |mk| = |ml|
• A uniform bit b ∈ 0, 1 is chosen.
• edb ← Enc((k0, k1,X ), P RS(Mb)).
• b
(cid:4)
• The output of the experiment is 1 if b
(cid:4) ← A(edb)
= b, and
0 otherwise. We write IND-CUDAA,Π = 1 if the
output of the experiment is 1, and in this case we
say that A succeeds.
Deﬁnition 8 (IND-CUDA Indistinguishability). We say
that the encryption scheme Π with security parameters
λ and n0, n1 has IND-CUDA security if, for all proba-
bilistic polynomial time adversaries A,
+ negl(X , n0, n1)
P r[IND-CUDAA(n0,n1,X ) = 1]≤ 1
where (X , n0, n1) are the security parameters of our
2
scheme.
In Section V, we introduce our constructions and in
Section V-C we use our security deﬁnitions to evaluate
520
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
the single-column security of one of our constructions
(which uses a Poisson distribution). Our schemes are
tune-able to trade-off performance for security, and
have acceptable performance and security for sizable
databases as shown in Section VI.
IV. WEAKLY RANDOMIZED ENCRYPTION
(cid:4)
= (Gen
In this section we formalize and extend a “folklore”
technique that we call weakly randomized encryption
(WRE) in text and in Figure 1. This is the basis for
all variants described in Section V.
Weakly Randomized Encryption
Let F be a pseudorandom function with key length
(cid:4)
(cid:4)
n1. Let Π
) be an IND-CPA
secure private key encryption scheme with message
space m ∈ {0, 1}∗
and key length n0. Let getSalts
be a function that on input message m ∈ {0, 1}∗
and
message probability distribution function Pm and a
security parameter X , outputs S, a list of integers
representing the salts and PS, a probability distri-
bution over the salts. Deﬁne a private-key weakly
randomized encryption scheme Π as follows:
, Enc
, Dec
(cid:4)
(cid:4)
• Gen: on input 1n0 , 1n1 run Gen
(1n0 ) receiving
key k0 and choose uniform k1 ∈ {0, 1}n1.
Choose security parameter X .
• Enc: on input keys k0, k1, security parameter X ,
and a message m, choose a random salt
(S, PS) ← getSalts(m, Pm,X )
$← sample(S, PS)
s
Output the (search tag, ciphertext):
(t, c) ← (cid:4)
Fk1 (s||m), Enc
(cid:4)
k0 (m)
(cid:5)
• Dec: on input key k0, and ciphertext (t, c) output
plaintext message
m ← Dec
(cid:4)
k0 (c)
• Search: on input keys k0, k1, parameter X , and
a message m, (S, PS) ← getSalts(m, Pm,X )
Output query (query) on table (T ) containing
search tag column (Tt) as shown below:
(cid:5)∨
query ←(cid:4)
Tt = Fk1 (s1||m)
(cid:5) ∨ ...∨
(cid:4)
Tt = Fk1 (s2||m)
(cid:5)
(cid:4)
Tt = Fk1 (s|s|||m)
Fig. 1: Weakly Randomized Encryption,
Decryption and Search
Previous efﬁciently searchable encryption construc-
tions either have speciﬁc requirements on the plaintext
521
data, like high min-entropy [6], or place limitations on
the adversary, such like limiting oracle queries [4] to
distinct plaintexts.
We can reduce the vulnerability of deterministic en-
cryption due to frequency analysis and other leakage in-
ference attacks by adding a small amount of randomness
to the encryption.
We show how a weakly randomized encryption
scheme can be constructed as the composition of (i)
any efﬁciently-searchable encryption scheme that satis-
ﬁes the security deﬁnitions from [4] and (ii) a weak
randomization, or “salting,” function. In this work, we
construct our schemes using a variation of the Amana-
tidis, Boldyreva, and O’Neill [4] ESE, which is itself
composed of a randomized encryption scheme (RE) that
leaks nothing about the plaintext and a pseudo-random
function (P RF) that leaks nothing except equality.
Encryption. The WRE encryption takes as input:
symmetric keys k0, k1; a plaintext m; and the proba-
bility distribution PM of the plaintexts. The encryption
algorithm begins by calling the getSalts subroutine to
pseudorandomly generate a probability distribution PS
over a set S of salts for the message m. The getSalts
subroutine uses the plaintext distribution PM to choose
a distribution for the salts that makes the frequencies of
the ciphertexts (nearly) independent of the plaintext. We
give a handful of candidate algorithms for getSalts, and
evaluate their security, in the following sections. A salt
s ∈ S is chosen at random according to PS and is pre-
pended to the message. The encoding of the pre-pended
salts must ensure that no pairs of salts and messages of
different lengths results in the same search tag. Finally,
the salt and plaintext are input into the PRF to create
the search tag and the plaintext is encrypted with the
randomized encryption algorithm.
Search. To search the encrypted database for all
records with plaintext equal to m, the client ﬁrst com-
putes all possible search tags t1, t2, . . . , tn for m and
then requests all records having tags equal to t1 or t2
... or tn. Because the number of unique search tags for
each plaintext is small, WRE allows the server to build
useful indexes on the encrypted data, just as with DET.
To perform the search for each ti, the server can use
built-in indexing techniques to return the list of matching
records on columns added by our scheme. Because no
custom indexing scheme needs be used, this allows it to
be deployed on unmodiﬁed DBMS services.
Decryption. Given a search tag and a randomized
ciphertext, the WRE decryption routine discards the tag
and uses the randomized encryption scheme’s decryption
function on the ciphertext to obtain the plaintext.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
Updates. One advantage of WRE versus stronger
searchable encryption schemes like SSE is updates are
simple with WRE. To insert a new record in the en-
crypted database, we use the encryption function to
obtain its weakly randomized search tag and its (strongly
randomized) ciphertext. Then we simply append the tag
and ciphertext to the database. If we assume new records
inserted are drawn from the same plaintext distribution,
then adding new records will not affect the WRE tag
frequencies. Thus it is secure under the snapshot ad-
versary model. The challenge with SSE updates comes
from a different security model that allows the adversary
to query the database while providing forward security.
Because of security model and the encrypted indexes
used by SSE, SSE typically performs updates in batches
using new keys resulting in multiple indexes.
Future work will address security when the distribu-
tion changes from updates or if the adversary has speciﬁc
knowledge of the updated records.
The improvement in security, if any, of WRE over
deterministic encryption is not immediately clear. Sur-
prisingly, our analysis also shows that, with a carefully
chosen getSalts algorithm, we can construct a weakly
randomized encryption that leaks virtually no informa-
tion about the plaintext to a snapshot adversary who
knows the distribution PM .
V. WRE SCHEMES
In this section, we present our variants that each
complete the WRE construction described in Section IV.
We ﬁrst present simpler/weaker constructions to give the
reader an understanding of our motivations for our later,
more secure schemes in Sections V-C and V-C1. We do
not fully analyze the security of these weaker schemes
because we believe they are inferior to later schemes.
A. Fixed Salts Method
We refer to the “folklore” version of weakly random-
ized encryption as the ”ﬁxed salts” method, because
it always uses a constant number of salts for every
plaintext, regardless of the frequency of the plaintext.
We label the security parameter of this scheme as N,
the number of unique salts per plaintext.
Notion of Security.
If a plaintext m occurs in the
unencrypted database with frequency p, then with ﬁxed
salts, each of m’s N ciphertexts will occur in the EDB
with frequency p
the ﬁxed salt method
improves on the security of deterministic encryption
because it reduces the differences in the plaintext fre-
quencies.
N . Intuitively,
Limitations. First, the overall improvement to security
is small. For large databases, the adversary can still guess
the plaintext with very high accuracy. Second, the ﬁxed
salt WRE is not very efﬁcient. In order to achieve any
security for a database of moderate size, it needs a large
number of salts, making query processing unnecessarily
intensive, especially for low-frequency plaintexts. We
could potentially improve both of these aspects if we
modiﬁed the chance of picking each salt with the fre-
quency of its respective plaintext. We formalize this idea
in the next section.
B. Proportional Salts Method
The ﬁxed salts method can be improved by taking
into account
the frequencies of the plaintexts in the
database. Intuitively, we would like each search tag to
occur with roughly the same frequency, regardless of the
plaintext. In the proportional salts method, we allocate a
different number of salts to each plaintext, in proportion
to its frequency in the plaintext data. Let the security
parameter be the total number of unique ciphertexts be
NT . Then for a plaintext m with frequency PM (m), we
use Nm ≈ PM (m) · NT salts. Therefore, for any two
plaintexts m0, m1 ∈ M, their search tags will appear in
the EDB with approximately the same frequency.
Limitations. Unlike the ﬁxed salts method, propor-
tional salt allocation requires that the data owner must
know the plaintext distribution PM in order to encrypt
a message.
Another limitation of proportional salts stems from
the fact that we must allocate an integer number of
salts for each plaintext. This gives rise to an aliasing
problem, where in certain situations using more salts
can actually reduce the security. For example, consider
an example database column with PM (m1) = 0.7 and
PM (m2) = 0.3. For NT = 10, this works out nicely, but
if we encrypt this database with NT = 12, then we will
round our number of search tags to 8 for plaintext m1,
each with frequency 0.0875, and 4 for plaintext m2, each
with frequency 0.075. Given sufﬁciently many encrypted
records, the adversary will be able to distinguish the
plaintexts using this frequency disparity.
In the following sections, we address the aliasing
problem of proportional salts by randomizing the fre-
quencies of salts.
C. Poisson Random Frequencies
A Poisson process is a simple stochastic process often
used to model the arrival of events in a system, for
example the occurrence of earthquakes in a geographical
region, or the arrival of buses at a bus stop. In a Poisson
522
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
process with rate parameter λ, the times between arrival
events, called the “interarrival times,” are independent
and identically distributed, and they follow an Exponen-
tial distribution with parameter λ. The number of arrivals
in an interval of length t is independent of the events in
all intervals before and after, and it is Poisson distributed
with expected value λt.
In the Poisson variant of WRE, the security parameter
is the Poisson rate parameter λ. On expectation, this
method will generate about λ + |M| search tags in
total across all plaintexts. To allocate salts for plaintext
m ∈ M and to assign their relative weights, we
sample arrivals in the interval [0, PM (m)] from a Poisson
process with rate λ. Let the number of arrival events
in the interval be N, and let their times be denoted
a1, . . . , aN . Additionally, we deﬁne a0 = 0 and aN +1 =
PM (m). The interarrival times are xi = ai − ai−1 for
i ∈ 1, . . . , N + 1.
Based on the outcome of this experiment, we allocate
N + 1 salts to plaintext m, and when we encrypt m,
PM (m). The resulting
we choose salt i with probability
search tag will then have frequency equal to xi in the
encrypted database. Also note that N has a Poisson
distribution,
thus on average we will allocate about
λ · PM (m) + 1 salts to plaintext m.
The pseudocode for our Poisson method’s algorithm
xi
is shown below in Algorithm 1.
Algorithm 1 Poisson Salt Distributions
1: function GETSALTS-POISSON(PM , m, k, λ)
2:
3:
4:
5:
6:
7:
8:
s = 0
E = Exponential(λ)
total = 0