title:Xl: an efficient network routing algorithm
author:Kirill Levchenko and
Geoffrey M. Voelker and
Ramamohan Paturi and
Stefan Savage
XL: An Efﬁcient Network Routing Algorithm
Kirill Levchenko, Geoffrey M. Voelker, Ramamohan Paturi, and Stefan Savage
Department of Computer Science and Engineering
University of California, San Diego
PI:EMAIL, PI:EMAIL, PI:EMAIL,
PI:EMAIL
ABSTRACT
In this paper, we present a new link-state routing algorithm called
Approximate Link state (XL) aimed at increasing routing efﬁciency
by suppressing updates from parts of the network. We prove that
three simple criteria for update propagation are sufﬁcient to guaran-
tee soundness, completeness and bounded optimality for any such
algorithm. We show, via simulation, that XL signiﬁcantly outper-
forms standard link-state and distance vector algorithms—in some
cases reducing overhead by more than an order of magnitude—
while having negligible impact on path length. Finally, we argue
that existing link-state protocols, such as OSPF, can incorporate
XL routing in a backwards compatible and incrementally deploy-
able fashion.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Routing Protocols
General Terms
Algorithms, Design, Theory, Performance, Experimentation
1.
INTRODUCTION
“How do I best get from here to there?” This simple question
is the essence of the routing problem, but it belies the consider-
able complexity embedded in modern intra-domain routing pro-
tocols. At the heart of this complexity is the issue of topology
change. Routing in a static network is trivial, a simple table of
directions calculated once for each destination. However, most real
networks are dynamic—network links go up and down—and thus
some nodes may need to be notiﬁed to recalculate their routes in
response. This problem in turn can be boiled down to the ques-
tion, “Who needs to know?” The traditional approach, enshrined
in the family of link-state protocols, is to tell everyone; ﬂood the
topology change throughout the network and have each node then
recompute its table of best routes. However as a network grows,
this requirement to universally communicate and act on each topol-
ogy change can become problematic. This is because a larger net-
work also generates routing updates more often, necessitating more
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’08, August 17–22, 2008, Seattle, Washington, USA.
Copyright 2008 ACM 978-1-60558-175-0/08/08 ...$5.00.
frequent route updates and route re-computation. Worse yet, these
costs are incurred by every router in the network, meaning that the
most resource-constrained router effectively determines the maxi-
mum network size that can be served by a routing algorithm. Thus,
link-state protocols are frequently said to “not scale well.”
However, it is manifestly unnecessary to communicate every link
change to every router. Intuitively, only a small subset of router
nodes are critically impacted by most link-state changes (particu-
larly those whose shortest path trees include the changed link) and
most other routing-related communication and computation is re-
dundant. The traditional solution to this problem is to divide the
network into separate routing domains and use this hierarchy to
isolate topology updates. In the inter-domain context, the network
is naturally divided into Autonomous Systems to reﬂect adminis-
trative and policy boundaries. However, the hierarchy imposed in
the intra-domain context, for example with OSPF areas, is com-
pletely artiﬁcial:
these areas do not delineate policy regions but
rather serve as a routing algorithm optimization. As Cisco’s OSPF
Design Guide [6] states, “Areas are introduced to put a boundary
on the explosion of link-state updates.”
Unfortunately the process of properly conﬁguring and maintain-
ing areas is a complex art form; one with ad-hoc rules of thumb
(“no more than 50 routers per area”) and complex design trade-
offs.1 Indeed, the structure imposed by areas inherently limits the
kinds of topologies that can be mapped onto routes and, if not care-
fully managed, can produce arbitrarily sub-optimal routes and un-
necessary points of failure [31]. Our work is focused on minimiz-
ing or removing the need for such artiﬁcial hierarchy by improving
the efﬁciency of the underlying routing protocols.
Another approach to this problem is exempliﬁed in the ﬁsh-eye
routing optimization used by the 802.11s Mesh Networking stan-
dard. This technique simply limits the range over which topology
updates are communicated, thus limiting updates to their immedi-
ate region [16, 14]. While this optimization imposes no operational
burden, it is fundamentally unsound. Such protocols can neither
guarantee that their routes will lead to their destinations (since they
may contain loops) nor that all reachable destinations will have a
valid route. While our work is motivated by the same desire to
winnow update trafﬁc, we seek to do so within the traditional con-
straints of correctness.
This state of affairs is fundamentally unsatisfying, and with link-
state protocols being introduced into a wide range of new domains
including overlay networks [2], ad-hoc and mesh networks [7], and
1In Moy’s classic OSPF: Anatomy of an Internet Routing Proto-
col, he addresses the issue of how to place area boundaries as fol-
lows: “This is a complicated question, one without a single an-
swer.” and further clariﬁes that it depends on a combination of
addressing structure, area size, topology considerations and policy
considerations.
to support trafﬁc engineering for both MPLS [15] and Packet Based
Backbone [9] technologies, we feel the issue is ripe for revisiting.
To this end, our paper seeks to answer the following simple ques-
tion: “Can one signiﬁcantly increase routing protocol efﬁciency by
selectively propagating topology updates, while still providing tra-
ditional guarantees of soundness, completeness and optimality?”
In addressing this question, this paper offers three contributions.
First, we introduce the Approximate Link state (XL) routing algo-
rithm, which can reduce routing overhead by an order of magnitude
over existing protocols while still maintaining our correctness prop-
erties. Second, we show that three simple criteria for propagating
updates are sufﬁcient to ensure these properties for any link-state
routing protocol:
S1 When the update is a cost increase (bad news),
S2 When the link is used in the node’s shortest-path tree
(propagated only to the next hop along the path to the
link), and
C1 When it improves the cost to any destination by more
than a 1 +  cost factor, where  is a design parameter
of the algorithm.
We show that all other updates may be safely suppressed. We show
that these conditions are sufﬁcient to guarantee that all forwarding
paths are loop-free and within a 1 +  cost factor of optimal.
Finally, since our approach is primarily a restriction of the tradi-
tional link-state approach, it is possible to mix it within an existing
link-state framework; allowing incremental deployment. We sketch
how such interoperability could be achieved between native OSPF
and a modiﬁed OSPF/XL protocol.
The remainder of the this paper is structured as follows: we
brieﬂy outline the relevant background and related work in Sec-
tion 2, followed by a description of the network model and notation
used throughout the paper in Section 3 and the XL routing algo-
rithm itself in Section 4. Section 5 describes the simulation sys-
tem we developed for evaluating the performance of routing algo-
rithms. Then, in Section 6 we present our experimental evaluation
the XL routing algorithm compared with link-state and distance-
vector based approaches. In Section 7 we explain how OSPF may
be modiﬁed to include the update suppression mechanism used in
XL and Section 8 summarizes our results and concludes the paper.
2. BACKGROUND AND RELATED WORK
Beginning with the development of the ARPANET routing al-
gorithms in the late seventies and early eighties [21, 22], network
routing became a major area of research. The long-term loops suf-
fered by the ARPANET distance-vector algorithm led to the de-
velopment of link-state routing algorithms. In turn, a number of
competitive distance vector algorithms were later developed that
avoided long-term loops [4, 12, 17, 23, 28], including Garcia-Luna-
Aceves’ DUAL [10], which became the basis for Cisco’s EIGRP [5].
To scale to larger networks, the link-state protocols OSPF and IS-
IS introduced area routing. In this regime the network is manually
divided into areas and while routing within an area takes place as
before. Forwarding to destinations outside the local area is handled
by special border routers—largely isolating most areas from the
knowledge of any external topology change. As the OSPF speciﬁ-
cation states:
[The] isolation of knowledge enables the protocol to
effect a marked reduction in routing trafﬁc as com-
pared to treating the entire Autonomous System as a
single OSPF domain. [24]
We are not the ﬁrst to identify that areas can introduce problems
in link-state networks. These problems have long been understood
experimentally and are well summarized by AT&T’s Mikkel Tho-
rup in his “OSPF Areas Considered Harmful” [31]. Nor are we the
ﬁrst to look at reducing ﬂooding overhead in link-state protocols.
A number of such proposals have been made—typically for partic-
ular narrow regimes—including optimizations for ﬂooding across
interfaces [32], for reducing refresh overhead [27] and to damp the
effects of route ﬂapping [25]. We believe that our work is consid-
erably more general than these efforts and with greater impact on
efﬁciency.
Another approach to improving the scalability of link-state al-
gorithms is the Link Vector (LV) algorithm introduced by Behrens
and Garcia-Luna-Aceves [3]. The LV algorithm only propagates
link updates about links in the node’s shortest-path tree, an idea
borrowed from distance vector algorithms, which we use in our
work as well. However unlike our algorithm, the LV algorithm ex-
plicitly notiﬁes neighbors when a link is added or removed from
the shortest-path tree, whereas in our algorithm, the shortest-path
tree is never explicitly communicated to neighbors; links not in
the shortest-path tree are removed lazily only if their cost actually
changes. This allows us to support approximation which, in turn,
permits signiﬁcant reductions in overhead for small increases in
stretch, as our simulations show.
Finally, our notion of a view as a representation of network state
is similar to that of Fayet et al. [8]. In their work, they give several
sufﬁcient conditions for routing in a network where nodes may have
different views. However they do not give a routing algorithm or
propose a mechanism for achieving these conditions.
3. DEFINITIONS AND NOTATION
In this section we formally describe our network representation
and deﬁne what we mean by “forwarding.” We then deﬁne the
routing problem in terms of network conﬁgurations (e.g., “loop-
free”). The reader may choose to skip directly to the ext section,
where we describe the XL routing algorithm itself, turning back to
this section for reference.
XL is a routing algorithm for a destination-based forwarding net-
work such as the Internet. Formally, a routing algorithm is a mech-
anism by which network nodes can coordinate packet forwarding
to ensure any two nodes in the network can communicate.
In a
destination-based forwarding network, forwarding is based on the
packet destination address only. A node makes its forwarding de-
cision using a forwarding table which either gives the next hop to
each destination or indicates that the destination is not reachable
by forwarding. The objective of a routing algorithm is to maintain
a network conﬁguration in which nodes are globally reachable by
forwarding.
3.1 Network Model
We model the network as a graph G = (V, E, e) with vertex set
V , edge set E, and edge weight function e. The vertices represent
network nodes, edges represent links, and edge weight represent
link costs. Throughout the paper, we will use the pairs of terms
node and vertex, link and edge, interchangeably.
To simplify exposition, the set of nodes and edges is ﬁxed and
globally known; only the edge weight function varies with time.
It is straightforward to extend an algorithm in this model to allow
vertices and edges to be inserted or deleted. The range of the weight
function is the set of non-negative real numbers together with the
special value ∞ having the usual semantics.
Let n = |V |, m = |E| and let N (u) denote the set of neighbors
of u ∈ V . The set of edges E is undirected, however the weight
function e is directed, which meaning that costs may be different
along each direction of the link.
A path is a sequence of nodes of which any consecutive pair is
adjacent in the graph. The weight of a path α in G, denoted (cid:4)α(cid:4)
is sum of the weights (given by the weight function e) of its edges.
Let δ(u, w) be the minimum weight of a path from u to w, or ∞ if
no such path exists. If δ(u, w) is ﬁnite, we say that w is reachable
(in the network) from u.
We use a superscript to denote the time at which the value of a
function or variable is considered. For example, δt(u, w) denotes
the weight of a minimum-weight path in G at time t. The domain
of t is the set of non-negative real numbers. We say that a set of
edges is quiet during a time interval if its weights do not change
during the time interval. A set of edges becomes quiet at some time
t if its edge weights do not change after time t.
3.2 Forwarding
To each node u in the graph we associate a forwarding table fu
which maps a destination node w to a neighbor of u, with the se-
mantics that a packet arriving at u destined for w will be sent to
the neighbor of u given by the forwarding table. If the packet has
reached the destination or the destination is not reachable by for-
warding, the forwarding table contains special value NONE. Thus,
fu(w) ∈ N (u) ∪ {NONE},
(1)
where N (u) are the neighbors of u.
We deﬁne the conﬁguration of a forwarding network at some in-
stant in time to be the set of all forwarding tables at that time. To
capture the iterative nature of packet forwarding, we consider the
path taken by a packet in the network. The (instantaneous) for-
warding path from u to w, denoted φ(u, w), is the successive ap-
plication of f to w, starting at u, up until NONE. Formally, φ(u, w)
is the unique maximum-length sequence satisfying
φ0(u, w) = u
φi+1(u, w) = fφi(u,w)(w)
φi+1(u, w) (cid:6)= NONE.
(2)
(3)
(4)
Note that φ(u, w) may be an inﬁnite sequence, (if for example
fu(w) = v and fv(w) = u) resulting in a forwarding loop. If
φ(u, w) is a ﬁnite path from u to w, we say that w is reachable by
forwarding from u.
3.3 Soundness and Completeness
To each node we associate a routing process responsible for com-
puting the forwarding table of the node. The routing process knows
(or measures directly) the costs of incident links and communicates
with its neighbors via these links. A routing algorithm is the mech-
anism that deﬁnes what information is exchanged with neighbors
and how the forwarding tables are computed. The central purpose
of a routing algorithm is to maintain a forwarding conﬁguration in
which nodes are mutually reachable by forwarding. It is often also
desirable for the paths taken by forwarded packets to be optimal or
near-optimal. We formalize these objectives using the notions of
soundness, completeness and stretch.
Deﬁnition. A conﬁguration is sound if for all nodes u and w,
fu(w) (cid:6)= NONE implies φ(u, w) is a path from u to w. A rout-
ing algorithm is sound if it produces a sound conﬁguration after the
network becomes quiet.
In a nutshell, soundness says that a node should only attempt to
forward to destinations it can reach by forwarding. We will show
that the XL routing algorithm we describe in this paper has this
property. There is also a weaker property that is sufﬁcient for many
applications, and it is simply that there be no forwarding loops:
Deﬁnition. A conﬁguration is loop-free if for all u and w, φ(u, w)
is ﬁnite. A routing algorithm is loop-free if it produces a loop-free
conﬁguration after the network becomes quiet.
The difference between a sound and a loop-free conﬁguration is
that in the latter, a node only needs to know that forwarding to its
next hop will not cause a loop (but the packet could be dropped
somewhere down the path), while in a sound conﬁguration, for-
warding to the next hop must actually reach the destination.
The easiest way to achieve soundness is for every node to “pre-
tend” everyone is unreachable by setting fu(w) = NONE for all
destinations w. Clearly this is a degenerate conﬁguration, so what
we also want is for fu(w) to be NONE only if w really is unreach-
able from u in the network. We call this property completeness.
Deﬁnition. A conﬁguration is complete if for all distinct u and w,
δ(u, w) (cid:6)= ∞ implies fu(w) (cid:6)= NONE. A routing algorithm is
complete if it produces a complete conﬁguration after the network
becomes quiet.
Together the soundness and completeness properties say that all
nodes are reachable by forwarding, but they say nothing about the
optimality of the forwarding paths. This is the subject of our next
deﬁnition.
Deﬁnition. The stretch of a conﬁguration is the maximum taken
over all distinct nodes u and w of the ratio (cid:4)φ(u, w)(cid:4)/δ(u, w),
with the convention that 1/∞ is 0, and ∞/∞ is undeﬁned and not
included in the maximum. A routing algorithm has stretch 1 + 
if it produces a conﬁguration with stretch at most 1 +  after the
network becomes quiet.
4. THE XL ROUTING ALGORITHM
XL is fundamentally a link-state routing algorithm.
It differs
from the standard link-state algorithm in propagating only some
link state updates. At the heart of the algorithm are three rules
describing when an update should be propagated, and our main
technical contribution is showing that these are sufﬁcient for cor-
rectness as deﬁned above. These conditions, which are at the heart
of the algorithm, are:
S1 When the update is a cost increase (bad news),
S2 When the link is used in the node’s shortest-path tree
(propagated only to the next hop to the link), and
C1 When it improves the cost to any destination by more
than a 1 +  cost factor, where  is a design parameter
of the algorithm.
Any updates not covered by the three rules above may be sup-
pressed. The intuition behind these rules is that S1 and S2 ensure
that each node’s estimate of the distance to a destination decreases
along the forwarding path, which ensures that no loops are formed.
(More generally, S1 and S2 ensure soundness as described above.)
Rule C1 ensures that all nodes know about some good (not but
necessarily optimal) paths; this ensures completeness and bounded
stretch. In the rest of this section, we formally describe our algo-
rithm and describe how it implements these rules.
Because some updates are propagated while others are suppressed,
nodes will not all have the same information about the network. To
reason about this formally, we encapsulate a node’s knowledge of
the network in a view. A view is an edge weight function giving the
weight of each edge at a particular point in time. Each node has an
fu