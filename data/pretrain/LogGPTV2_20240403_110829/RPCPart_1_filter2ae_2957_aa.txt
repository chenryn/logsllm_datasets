# 如何挖掘RPC漏洞（Part 1）
##### 译文声明
本文是翻译文章，文章原作者 fortinet，文章来源：fortinet.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
2018年8月下旬，一名研究人员（SandboxEscaper）公开了一个Windows本地权限提升0day漏洞。在互联网上公开后不到两周时间内，该漏洞就已经被恶意软件攻击者所使用（参考ESET发表的[文章](https://www.welivesecurity.com/2018/09/05/powerpool-malware-exploits-zero-day-vulnerability/)）。这件事情在InfoSec社区造成了一定程度的混乱，也引起了FortiGuard实验室的警觉。
FortiGuard实验室认为，理解这类攻击原理非常重要，可以帮助其他研究人员挖掘出类似SandboxEscaper在Windows任务计划程序（Windows
Task Scheduler）中找到的漏洞。在本文中，我们将与大家分享如何滥用RPC服务器上的符号链接来提升权限。
事实证明，Windows Task Scheduler通过RPC服务器对外公开的某个RPC（Remote Procedure Call，远程过程调用）
API中存在漏洞。在Windows中，大多数RPC服务器都托管于以本地系统权限运行的系统进程中，低权限的RPC客户端可以与RPC服务器进行交互。与其他软件一样，这些RPC服务器也可能存在漏洞，如拒绝服务、内存损坏、逻辑错误等等。换句话说，攻击者可以利用RPC服务器中存在的任何漏洞来发起攻击。
这个0day漏洞之所以如此流行，其中一个原因在于底层漏洞利用起来非常简单。这是一个程序逻辑错误漏洞，只要使用正确的工具及技术就比较容易发现。攻击者通常使用伪造的符号链接（symbolic
link）来利用这类权限提升漏洞，越权至某些文件或者目录，从而能让普通用户提升权限。如果大家对这方面内容比较感兴趣，来自Google Project
Zero的James Forshaw分享了关于符号链接攻击的各种资源，大家可以作为参考。
## 二、RPC服务器运行时及静态分析
进入新的研究领域后，在自己开发工具之前，最好先看一下网上是否已经有开源工具。幸运的是，微软RPC协议非常出名，在过去十几年里已经有研究人员在这方面做了许多优秀的逆向分析工作。研究人员可以使用[RpcView](http://www.rpcview.org/)这款开源工具，这个工具非常方便，可以识别Windows系统上运行的RPC服务。这是我最喜欢的RPC工具之一，具有各种强大的功能，如搜索RPC接口的UUID（Universal
Unique Identifier）、RPC接口名等等。
然而，我们的目的是将所有RPC信息反编译并导出到文本文件中，该工具并不满足我们的要求。幸运的是，在阅读源码后，我们发现工具开发者已经集成了我们所需的功能，但默认情况下该功能没有启用，只能在调试模式下使用某个命令行参数触发。在这个限制条件下，我们选择将已有的`DecompileAllInterfaces`函数集成到RpcView
GUI中。如果大家也想使用这个功能，可以访问我们的[Github页面](https://github.com/fortiguard-lion/RpcView)，下载我们定制的RpcView工具。在下文中大家就可以看到“反编译所有接口”这个功能的好处。
图1. RpcView反编译所有接口
当分析RPC服务器的行为时，我们总是会通过RPC接口调用服务器对外提供的API。我们可以通过RPC客户端向服务器发送RPC请求，与RPC交互，然后使用SysInternals中的Process
Monitor工具来观察服务器的行为。在我看来，最方便的做法是编写脚本，而不是开发C/C++ RPC客户端，因为前者不需要代码编译过程，比较节省时间。
我们选择使用[PythonForWindows](https://github.com/hakril/PythonForWindows)这个库。这个库能够帮助我们以Python的方式来抽象处理Windows功能，但需要依赖Python的`ctypes`库。这个库中还包含一些RPC库，这些库提供了一些方便的封装函数，可以节省我们开发RPC客户端的时间。比如，典型的RPC客户端程序需要定义接口定义语言，并且我们需要手动实现绑定操作，这个过程通常需要涉及到一些C++代码。从下面两段代码中，我们可以清晰地看到在实现RPC客户端方面脚本语言和编程语言之间的区别：
    import sys
    import ctypes
    import windows.rpc
    import windows.generated_def as gdef
    from windows.rpc import ndr
    StorSvc_UUID = r"BE7F785E-0E3A-4AB7-91DE-7E46E443BE29"
    class SvcSetStorageSettingsParameters(ndr.NdrParameters):
    MEMBERS = [ndr.NdrShort, ndr.NdrLong, ndr.NdrShort, ndr.NdrLong]
    def SvcSetStorageSettings():
    print "[+] Connecting...."
    client = windows.rpc.find_alpc_endpoint_and_connect(StorSvc_UUID, (0,0))
    print "[+] Binding...."
    iid = client.bind(StorSvc_UUID, (0,0))
    params = SvcSetStorageSettingsParameters.pack([0, 1, 2, 0x77])
    print "[+] Calling SvcSetStorageSettings"
    result = client.call(iid, 0xb, params)
    if len(str(result)) > 0:
    print " [*] Call executed successfully!"
    stream = ndr.NdrStream(result)
    res = ndr.NdrLong.unpack(stream)
    if res == 0:
    print " [*] Success"
    else:
    print " [*] Failed"
    if __name__ == "__main__":
    SvcSetStorageSettings()
代码1. 使用PythonForWindows RPC Client开发的SvcSetStorageSettings
    RPC_STATUS CreateBindingHandle(RPC_BINDING_HANDLE *binding_handle)
    {
    RPC_STATUS status;
    RPC_BINDING_HANDLE v5;
    RPC_SECURITY_QOS SecurityQOS = {};
    RPC_WSTR StringBinding = nullptr;
    RPC_BINDING_HANDLE Binding;
    StringBinding = 0;
    Binding = 0;
    status = RpcStringBindingComposeW(L"BE7F785E-0E3A-4AB7-91DE-7E46E443BE29", L"ncalrpc", nullptr, nullptr, nullptr,&StringBinding);
    if (status == RPC_S_OK)
    {
    status = RpcBindingFromStringBindingW(StringBinding, &Binding);
    RpcStringFreeW(&StringBinding);
    if (!status)
    {
    SecurityQOS.Version = 1;
    SecurityQOS.ImpersonationType = RPC_C_IMP_LEVEL_IMPERSONATE;
    SecurityQOS.Capabilities = RPC_C_QOS_CAPABILITIES_DEFAULT;
    SecurityQOS.IdentityTracking = RPC_C_QOS_IDENTITY_STATIC;
    status = RpcBindingSetAuthInfoExW(Binding, 0, 6u, 0xAu, 0, 0, (RPC_SECURITY_QOS*)&SecurityQOS);
    if (!status)
    {
    v5 = Binding;
    Binding = 0;
    *binding_handle = v5;
    }
    }
    }
    if (Binding)
    RpcBindingFree(&Binding);
    return status;
    }
    VOID RpcSetStorageSettings()
    {
    RPC_BINDING_HANDLE handle;
    RPC_STATUS status = CreateBindingHandle(&handle);
    if (status != RPC_S_OK)
    {
    _tprintf(TEXT("[-] Error creating handle %dn"), status);
    return;
    }
    RpcTryExcept
    {
    if (!SUCCEEDED(SvcSetStorageSettings(0, 1, 2, 0x77))
    {
    _tprintf(TEXT("[-] Error calling RPC APIn"));
    return;
    }
    }
    RpcExcept(1)
    {
    RpcStringFree(&instanceid);
    }
    RpcEndExcept
    }
代码2. 使用C++ RPC Client开发的SvcSetStorageSettings
当RPC客户端成功调用相应的RPC API后，我们可以使用Process Monitor来监控程序活动轨迹。Process
Monitor对动态分析来说非常有用，可以提供基于事件的API运行时信息。值得注意的是，Process
Monitor中有个较少使用的功能，可以提供调用栈（call-stack）信息，如图2所示。利用这个信息，我们可以跟踪某个事件的API调用过程。
图2. Process Monitor API调用栈功能
在使用IDA
Pro之类的工具静态分析时，我们可以根据上图中`Address`和`Path`信息精确定位相应的模块及函数例程。这一点非常有用，因为有些时候我们可能无法单独使用Process
Monitor输出信息来发现潜在的符号链接攻击特征。这时候反汇编工具的静态分析功能就能派上用场，可以帮助我们发现竞争条件问题，我们会在Part
2文章中讨论这方面内容。
## 三、UTC案例分析
大家是否知道微软会在Windows
10及更高版本系统上收集客户信息、数据以及文件相关信息？有没有想过背后的工作原理？如果大家感兴趣，可以阅读[这篇文章](https://www.zdnet.com/article/windows-10-telemetry-secrets/)，其中介绍了UTC（Universal Telemetry Client，通用遥测客户端）背后的工作机制。
为了开启下一阶段分析过程，我们首先使用RpcView GUI将所有RPC接口导出到文本文件中，结果文件中包含RPC服务器中可以调用的所有RPC
API。从输出文件中，我们需要查找可以接受宽字符串作为输入的RPC
API，最终从`diagtrack.dll`中找到了比较有趣的一个RPC接口。随后，我们可以确认这个DLL组件负责UTC功能的的具体实现，比如，我们可以在RpcView
GUI中发现这个DLL的描述为`Microsoft Windows Diagnostic Tracking`。
图3. 使用RpcView分析UTC相关DLL组件，其中某个RPC接口接受宽字符串作为输入数据
请记住，这里我们的目标是找到某个API，这个API可以接收文件路径作为输入参数，最终可能导致权限提升问题（如Windows Task
Scheduler中存在的问题）。但在图3中，我们发现有16个API可能满足我们的要求。显然，我们需要过滤掉不符合我们条件的API。因此我们使用IDA
Pro，开始静态分析，找到待深入分析的目标API。
我首先找到的是`RpcServerRegisterIf`这个RPC函数，这个函数通常用来注册RPC服务器上的接口规范（interface
specification）。接口规范中包含托管于特定RPC服务器上的RPC接口定义。根据MSDN官方文档的描述，接口规范位于函数的第一个参数中，该参数遵循`RPC_SERVER_INTERFACE`数据结构，结构定义如下：
    struct _RPC_SERVER_INTERFACE
    {
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    const void *InterpreterInfo;
    unsigned int Flags;
    };
接口规范中的`InterpreterInfo`是指向`MIDL_SERVER_INFO`数据结构的一个指针，该结构由`DispatchTable`指针所组成，指针中保存特定RPC接口所支持的接口API信息。这的确是我们在寻找的字段。
    typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE* DispatchTable;