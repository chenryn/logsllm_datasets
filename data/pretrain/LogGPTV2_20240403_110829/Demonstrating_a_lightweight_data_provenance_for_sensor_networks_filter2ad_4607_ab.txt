# Provenance and Integrity in Sensor Networks

## 2.2 Provenance Decoding
Figure 2 illustrates the steps involved in the provenance mechanism decoding at the base station (BS).

### Decoding Process
1. **Packet Reception**: When the BS receives a data packet, it checks for all possible safe paths from the same source node that have been previously saved.
2. **Provenance Computation**: The BS computes the provenance of these paths using the information in the packet and compares it with the provenance encoded by the Bloom filter enclosed with the data packet.
3. **Matching and Processing**:
   - **Match**: If there is a match, the data is considered for further processing and analysis.
   - **Mismatch**:
     - **New Route**: If the data packet has taken a new route that is safe but not previously saved, the BS traces back the path and computes the provenance at each node until it reaches the source node. If the provenance matches, the BS adds this new route to its set of safe paths.
     - **Dropped Packet**: If the mismatch is due to a dropped packet, the BS traces back the node responsible for dropping packets and analyzes the frequency of dropped packets by this node to determine whether it is a normal behavior or an attack.
     - **Tampered Data**: If the data packet has been tampered with, either by inserting a malicious node into the network or by compromising an existing node, the BS checks for compromised nodes and dynamically changes the route to avoid such nodes.

## 2.3 Detecting Packet Dropping Attacks
Every intermediate node stores the last sequence number of the data packet (pSeq) that passed through it for every source node. When the same source node sends another packet through the same intermediate node, it uses the pSeq together with the current sequence number (Seq) to encode the provenance. This approach helps the BS locate the node that dropped certain data packets when there is a mismatch in the provenance by checking the last processed packet coming from the same source.

### Provenance Encoding at a Sensor Node
- Each node must maintain a per-flow record to store the previous packet sequence for each data flow passed through it.
- Whenever a node processes/forwards a packet, it updates the previous packet record of the appropriate data flow with the recently processed packet sequence.
- If a node receives a packet from a data flow for which it has no packet sequence information, it may use a pre-specified special-purpose identifier, such as 0.
- If a node does not receive packets from a data flow for a long time, it can erase the previous packet information for that flow to reduce space overhead.

### Provenance Decoding at the BS
- The BS also stores the sequence number of the most recent packet processed for each data flow.
- Upon receiving a packet, the BS retrieves the sequence of the last packet transmitted by the source node from the packet header, fetches the previous packet sequence for the flow from its local storage, and then compares these two sequence numbers.
- If there is no packet dropping attack, each node in the path and the BS receive all packets in the flow and thus possess the same previous packet sequence.
- If the BS observes a difference between these two sequence numbers, it infers a possible packet loss and takes necessary actions to confirm the event and localize the faulty link.

### Faulty Link Identification Using Provenance
- Assume a data packet [i] has been dropped at an intermediate node [k]. Nodes [k], [k+1], ..., [n] received [i] and updated their lastly seen packet sequences to [i].
- On the contrary, nodes [k+1], ..., [n] and the BS did not observe [i] and retain the old identifier [i-1].
- Upon receiving the next packet in the flow, nodes [k], [k+1], ..., [n-1] include [i] in the provenance metadata, whereas nodes [k+1], ..., [n] use [i-1] for this purpose.
- The malicious node [k] may either use [i], leading the BS to detect [k] as faulty, or use [i-1], in which case the link [k-1] is identified as faulty.
- In any case, an adjacent link to the malicious node is identified and held responsible.

### Certification of Attack
- To confirm that the faulty link [k-1] is actually malicious, the BS observes more packets.
- Whenever the BS identifies a packet loss and the responsible link [k-1], it updates the empirical loss rate for the link.
- If after a number of packet transmissions, the empirical loss rate exceeds a threshold, the BS convicts the link as malicious.

## 3. Scenarios
For demonstration purposes, we have simulated the entire sensor network on a single computer. Each node in the network runs its own Java program on a separate port, acting as a sensor node, where the network map identifies the nodes by their corresponding port number.

### Scenario 1: Multiple Source Nodes
- Multiple source nodes will send packets towards the BS.
- We will show how the provenance is encoded at every intermediate node and how it is decoded once it arrives at the BS.
- The goal is to see the provenance decoding code running at the BS and to see a matching provenance.

### Scenario 2: Malicious Nodes
- While source nodes are sending packets to the BS, some malicious nodes are introduced into the network.
- The purpose is to show how the BS raises the flag at untrusted data received by the network.

### Scenario 3: Packet Dropping Attacks
- We will show how the BS detects packet dropping attacks and locates the responsible node.

## 4. Conclusion
In this demonstration, we develop a lightweight scheme for securely transmitting provenance in sensor networks. Our scheme uses Bloom filters to encode and decode the provenance, and is capable of detecting packet dropping attacks and localizing malicious sensor nodes, as well as dynamically changing the route of data packets to avoid using such nodes.

## 5. Acknowledgments
This work has been partially supported by the Northrop Grumman Cybersecurity Research Consortium and NSF under grants NSF-CNS 0964294 and NSF CNS-1111512.

## 6. References
[1] I. Akyildiz, W. Su, Y. Sankarasubramaniam, and E. Cayirci. A survey on sensor networks. Communications Magazine, IEEE, 40(8):102 – 114, Aug 2002.

[2] S. Chong, C. Skalka, and J. A. Vaughan. Self-identifying sensor data. In Proceedings of the 9th ACM/IEEE International Conference on Information Processing in Sensor Networks, IPSN ’10, pages 82–93, New York, NY, USA, 2010. ACM.

[3] I. Foster, J. VÃ˝uckler, M. Wilde, and Y. Zhao. Chimera: A virtual data system for representing, querying, and automating data derivation. In 14th Conference on Scientific and Statistical Database Management, pages 37–46, 2002.

[4] A. Ghani and P. Nikander. Secure in-packet bloom filter forwarding on the netfpga. In Proceedings of the European NetFPGA Developers Workshop, 2010.

[5] R. Hasan, R. Sion, and M. Winslett. The case of the fake picasso: Preventing history forgery with secure provenance.

[6] H.-S. Lim, Y.-S. Moon, and E. Bertino. Provenance-based trustworthiness assessment in sensor networks. In Proceedings of the Seventh International Workshop on Data Management for Sensor Networks, DMSN ’10, pages 2–7, New York, NY, USA, 2010. ACM.

[7] T. M. . F. N. Ramachandran A., Bhandankar K. Packets with provenance. Technical report, Georgia Institute of Technology, 2008.

[8] Y. L. Simmhan, B. Plale, and D. Gannon. A survey of data provenance in e-science. SIGMOD RECORD, 34:31–36, 2005.

[9] A. Syalim, T. Nishide, and K. Sakurai. Preserving integrity and confidentiality of a directed acyclic graph model of provenance. In Proceedings of the 24th annual IFIP WG 11.3 working conference on Data and applications security and privacy, DBSec’10, pages 311–318, Berlin, Heidelberg, 2010. Springer-Verlag.

[10] N. N. Vijayakumar and B. Plale. Towards low overhead provenance tracking in near real-time stream filtering. In Proceedings of the 2006 international conference on Provenance and Annotation of Data, Berlin, 2006.

[11] M. N. Wybourne. National cyber security, research and development challenges related to economics, physical infrastructure and human behavior. Technical report, Institute for Information Infrastructure Protection (I3P), Dartmouth College, 2009.