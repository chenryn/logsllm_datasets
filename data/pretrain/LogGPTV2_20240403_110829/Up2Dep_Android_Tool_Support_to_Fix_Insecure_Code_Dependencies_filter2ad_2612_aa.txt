title:Up2Dep: Android Tool Support to Fix Insecure Code Dependencies
author:Duc-Cuong Nguyen and
Erik Derr and
Michael Backes and
Sven Bugiel
Up2Dep: Android Tool Support to Fix Insecure
Code Dependencies
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
CISPA Helmholtz Center for Information Security
{duc.nguyen,erik.derr,backes,bugiel}@cispa.saarland
ABSTRACT
Third-party libraries, especially outdated versions, can introduce
and multiply security & privacy related issues to Android appli-
cations. While prior work has shown the need for tool support
for developers to avoid libraries with security problems, no such
a solution has yet been brought forward to Android. It is unclear
how such a solution would work and which challenges need to be
solved in realizing it.
In this work, we want to make a step forward in this direction.
We propose Up2Dep, an Android Studio extension that supports
Android developers in keeping project dependencies up-to-date and
in avoiding insecure libraries. To evaluate the technical feasibility
of Up2Dep, we publicly released Up2Dep and tested it with An-
droid developers (N=56) in their daily tasks. Up2Dep has delivered
quick-fixes that mitigate 108 outdated dependencies and 8 outdated
dependencies with security problems in 34 real projects. It was
perceived by those developers as being helpful. Our results also
highlight technical challenges in realizing such support, for which
we provide solutions and new insights.
Our results emphasize the urgent need for designated tool sup-
port to detect and update insecure outdated third-party libraries in
Android apps. We believe that Up2Dep has provided a valuable step
forward to improving the security of the Android ecosystem and
encouraging results for tool support with a tangible impact as app
developers have an easy means to fix their outdated and insecure
dependencies.
KEYWORDS
Mobile Security, Vulnerable Third-party Libraries, Third-party Li-
brary Updatability, Cryptographic API Misuse in Android
ACM Reference Format:
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel. 2020.
Up2Dep: Android Tool Support to Fix Insecure Code Dependencies. In
Annual Computer Security Applications Conference (ACSAC 2020), December
7–11, 2020, Austin, USA. ACM, New York, NY, USA, 14 pages. https://doi.
org/10.1145/3427228.3427658
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427658
1 INTRODUCTION
Software developers commonly re-use existing code, in particular in
the form of third-party libraries. Third-party libraries are software
components that are bundled in a form that can be distributed to
developers through different channels, such as central repositories.
However, those libraries come at a cost: if they contain bugs or
security and privacy issues, those flaws could be amplified by being
integrated in different applications that use the affected library
versions. Prior works [16, 19, 22, 33, 38] showed that such libraries
could expose user sensitive information to third-party applications,
or be a contributing factor for cryptographic API misuse in applica-
tions. More concerning, even when privacy & security related fixes
were available in newer versions of affected libraries, their adop-
tion by developers progressed very slowly [14]. Existing work has
proposed different solutions to overcome the problem of outdated
third-party libraries. Ogawa et al. [40] proposed using an external
service to split app code and third-party library code from Android
application package (APK) files, and then replace the (vulnerable)
outdated libraries with their fixed versions. This might improve
the situation but requires user actions to re-install the updated
APK. Market stores may play the central role to roll out updates for
libraries to end users but third-party libraries are tightly integrated
into their host app which makes it virtually impossible to precisely
separate app code and library code [14], and to pinpoint the exact
version of a library that an app is using. App developers (not market
stores, not end users) are in the perfect position to fix this problem
in today’s ecosystem as app code and library code are separated
in their development environment. They are aware of the exact
library version they are using and can upgrade their dependencies.
However, developers do not update their app’s dependencies [19]
because the outdated libraries are still working; developers fear
incompatibilities between library versions, specifically semantic
versioning has been found unreliable and has failed developers;
developers are unaware of the updates; and updates take too much
effort. This raises an important issue: providing security updates
does not solve the problems at all if developers do not migrate their
app’s dependencies to the security fixes.
Unfortunately, existing solutions to support developers in keep-
ing their project’s dependencies up-to-date are ineffective. Android
Studio itself includes Lint tool [3] to inform developers about up-
dates of third-party dependencies in Android projects. However,
Lint only provides developers information on whether there are
newer versions of the included libraries, but it does not alert devel-
opers about security vulnerabilities of the libraries and it is limited
to a list of only two libraries that are classified as privacy risks and
without further information about the risks. The lack of informa-
tion on whether the current version is secure and on whether the
newer version is compatible with the existing code of the app makes
263ACSAC 2020, December 7–11, 2020, Austin, USA
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
developers afraid of migrating their project dependencies to newer
versions, and, more importantly, it accustoms developers to stay
with the current (although outdated and more likely vulnerable)
versions as long as the app is still working.
With established tools being unreliable and not universally adopted
(semantic versioning) [19] or providing insufficient support (Lint),
this leaves a gap between developers’ expressed wishes for support
and the status quo. At the same time, there are still open ques-
tions on the technical feasibility of tool support for developers to
keep project’s dependencies up-to-date, which challenges come
along the way, especially how developers would receive (i.e., apply)
such a tool support, and most importantly its (security) impact on
real projects. As long as these questions are not yet answered, we
will still see security & privacy problems in apps that are attrib-
uted to outdated, insecure third-party libraries. Therefore, to make
advances in filling this gap with appropriate tool support for app de-
velopers, we focus in this paper on the following research questions:
"Would it be technically feasible to support developers in keeping their
project’s dependencies up-to-date?" and, more importantly, "Could
such a tool support have a tangible impact on the security and privacy
of Android apps?". To try to answer these questions, we developed
an Android Studio extension called Up2Dep to help Android app
developers in upgrading their library dependencies and in avoiding
vulnerable library versions. Up2Dep analyzes third-party libraries
to provide developers with information about the changes that they
may need to perform when updating a library, based on the public
API changes between the library versions. Using the collected in-
formation about library APIs and their usages on a given project,
Up2Dep provides developers feedback on the updatability of out-
dated library versions (i.e., we base our updatability information
only on the code itself and not on unreliable external sources like
semantic version of libraries).
Up2Dep also maintains a database of publicly disclosed vulnera-
bilities and cryptographic API misuse of libraries, and alerts devel-
opers if a vulnerable library version is included in their apps.
Our solution is the first implemented solution to support app
developers in their task to avoid outdated, critical dependencies, and
an important step to gather first-hand feedback from developers
about solutions that so far have only been recommended in the
literature.
We tested Up2Dep with developers to see how Up2Dep can sup-
port them in their daily programming tasks. To measure the impact
of Up2Dep, we implemented telemetric features inside Up2Dep that
gather anonymized information on how developers interact with
Up2Dep and that allow developers to provide feedback in-situ on
whether the suggested quick-fixes worked as they expected and
what they think about such support from Up2Dep. Our telemetric
data shows that among 56 developers, 30 have applied quick-fixes
suggested by Up2Dep on 34 real projects, totaling 116 quick-fixes (8
insecure library versions, 108 outdated library versions). The results
from the 60 in-situ feedbacks we received from 22 developers con-
firm that 80.0% of the proposed fixes worked and Up2Dep’s support
was useful, while only four cases of the proposed fixes did not work.
Upon further investigating the feedback, we discovered that 13.51%
libraries in our dataset have hidden security related problems as the
problems reside in the transitive dependencies of those libraries,
and are not shown to the developers. We believe, this is a new
and important finding because if this problem is not solved, many
app developers would continue using insecure libraries without
being aware of it. This is detrimental for the security of the Android
ecosystem as end users of such apps will eventually be exposed
to a variety of attacks. Therefore, we subsequently developed a
solution to tackle this problem by analyzing and alerting devel-
opers of libraries that have (hidden) transitive dependencies with
security problems. Further, our study results show that having tool
support on the compatibility of the updates really helps developers
more willing to keep their project’s dependencies up-to-date. Lastly,
we further evaluated developers’ Up2Dep experience in an online
survey where 23 developers shared with us their opinion. Up2Dep
received a SUS score [17] of 76.20, which indicates that Up2Dep
was considered good by developers in terms of usability.
In summary, we make the following tangible contributions:
• We significantly extended LibScout’s original library dataset
(by the factor of 7.5x, totaling 1,878 libraries with their com-
plete version history) and analyze those libraries (37,402
library versions) to discover cryptographic API misuse. To
support future research, we make both Up2Dep and this
dataset publicly available 1.
• We built an Android Studio extension called Up2Dep to warn
developers about vulnerable library versions including both
publicly disclosed vulnerabilities and cryptographic API mis-
use. Up2Dep helps developers upgrade their project’s depen-
dencies, taking into account the library API compatibility.
• We evaluated the technical feasibility of Up2Dep with An-
droid developers (N=56) in-the-wild and gather anonymized
usage information with our telemetric features. Our results
show that Up2Dep has helped developers in fixing their
project dependencies (n=108) and in avoiding dependen-
cies with security problems (n=8). The majority (80.0%) of
suggested fixes (from developer’s feedback) worked and de-
velopers found them useful, while only four instances of the
proposed fixes did not work as developers expected.
• We discovered that 13.51% of the libraries (233 out of 1,725)
have hidden security problems by including (insecure) depen-
dencies which is normally not visible to developers. We have
subsequently developed a solution to tackle this problem.
• Our results show that developers indeed are in favor of such
support and are willing to use it in their projects. Thus, this
work makes a call for action to include such an IDE-provided
support for app developers to avoid insecure code dependen-
cies already during app development and for the research
community to further investigate how library updatability
can be further improved (e.g., detecting non-code, breaking
changes between library versions).
2 RELATED WORK
We discuss related works on studying the security of third-party
libraries and on tool support for developers in creating more secure
apps.
Security of third-party libraries: Sonatype reported that al-
most 2 billion software components were downloaded per year
that contain at least one security vulnerability, and that outdated
1https://github.com/ngcuongst/up2dep
264Up2Dep: Android Tool Support to Fix Insecure Code Dependencies
ACSAC 2020, December 7–11, 2020, Austin, USA
software components had a three times higher rate of security is-
sues [1]. In the Web world, Lauinger et al. [32] showed that 37% of
133k analyzed websites include at least one library with a known
vulnerability, and that it takes years for web developers to up-
grade the included dependencies to the latest version. On the other
hand, regarding Android applications, Stevens et al. [44] investi-
gated the user privacy in Android advertisement libraries and found
that among 13 investigated ad libraries, several of them are over-
privileged. Looking further into Android apps, Backes et al. [14]
proposed the LibScout tool to detect third-party library code in
Android apps, and found that 70.4% of the included libraries in their
dataset are outdated. They also found that it took developers on
average almost one year to migrate the app to the latest library
version.
Muslukhov et al. [33] proposed BinSight, a static program ana-
lyzer that was capable of identifying source attribution in Android
applications. The authors revealed that for 90% of the apps that
contain cryptographic API misuses, at least one violation originated
from third party inclusions. Watanabe et al. [46] also found that
70% and 50% of vulnerabilities of free and paid apps, respectively,
stemmed from software libraries, particularly from third-party li-
braries.
Tool support for software developers: Prior work has proposed
different approaches and tools to support developers in building
more secure Android apps. Among them, many developed tools to
find vulnerabilities in applications after they have been released [21,
35, 41]. This means that developers were only aware of such secu-
rity mistakes at the end of or after their development cycle. Other
tools [29, 39] provided developers support while they were writing
code. Krüger et al. [29] developed Cognicryptto support developers
in securely using crypto APIs. Rahaman et al. [42] proposed a set
of analysis algorithms and a static analysis tool namely Crypto-
Guard for detecting cryptographic and SSL/TLS API misuses to
help developers analyze large Java projects. Specifically target-
ing Android applications, Nguyen et al. [39] proposed FixDroid to
provide developers with feedback regarding common vulnerabili-
ties while developers write code. Focusing on supporting Android
developers in writing more privacy-friendly apps, Li et al. [34] pro-
posed Coconut, an Android Studio plugin that engages developers
to think about privacy during app development and to provide
real-time feedback on potential privacy issues. Further, Android
Studio, Google’s official IDE to develop Android apps, includes Lint
tool [3] to check for outdated third-party libraries. Lint, however,
only informs developers about whether or not a newer version of
the library is available.
None of the above solutions supports developers in keeping their
project dependencies up-to-date while taking into account the ef-
fort to update the dependencies, the compatibility of the update, or
the potential security vulnerabilities of the different dependencies’
versions. While being the Google-provided tool for Android devel-
opers, also Android Studio has not considered all these aspects to
help developers in keeping their project dependencies up-to-date,
and especially to avoid insecure library versions.
Figure 1: Up2Dep’s architecture. Gray boxes are external
components
3 UP2DEP DESIGN
In this paper, we propose Up2Dep, an Android Studio extension that
facilitates the task of keeping Android project dependencies up-to-
date, and help developers avoid insecure library versions. We focus
on the Android Studio IDE as this is the tool officially supported by
Google and a previous survey [19] has shown that most Android
developers use it to develop apps. We abstain from performing
automatic (updates) patching in the background because this is
too much control over developer’s source code. Further, it is not
possible (with absolute reliability) to guarantee that the patching is
free of unintended side effects. Additionally, developers should be
informed and in control of the changes on their projects.
Up2Dep analyzes the developer’s code and provides developers