It sounds like you have encountered a $PATH issue when trying to use Python 3.4 with root access. Here is a more detailed and professional explanation of the situation and some potential solutions:

### Problem Description
You initially had Python 2.6 installed on your Linux system, and you later installed Python 3.4 in `/usr/local/bin` using `sudo`. You can use Python 3.4 without root access by running `python3.4` from the command line or by specifying the shebang `#!/usr/local/bin/python3.4` in your `.py` files. However, when you try to use Python 3.4 with root access, you get a "command not found" error. This is because the root user's $PATH does not include `/usr/local/bin`.

### Potential Solutions

#### 1. Update the Root User's $PATH
You can temporarily update the root user's $PATH to include `/usr/local/bin` by running the following command:
```sh
sudo -s
export PATH=$PATH:/usr/local/bin
```
This will add `/usr/local/bin` to the root user's $PATH for the current session. To make this change permanent, you can add the `export` line to the root user's shell configuration file (e.g., `~/.bashrc` or `~/.profile`).

#### 2. Install Python 3.4 in a Standard Location
If you want to install Python 3.4 in a standard location that is already included in the root user's $PATH, you can reinstall it in `/usr/bin`:
```sh
sudo apt-get remove python3.4
sudo apt-get install python3.4
```
Alternatively, you can specify the installation prefix during the build process if you are compiling from source:
```sh
./configure --prefix=/usr
make
sudo make install
```

#### 3. Use a Virtual Environment
To avoid conflicts and manage dependencies more effectively, consider using a virtual environment. You can create a virtual environment with Python 3.4 and install your modules there:
```sh
python3.4 -m venv myenv
source myenv/bin/activate
pip install <your-module>
```
This way, you can isolate your project's dependencies and avoid modifying the global Python installation.

### Conclusion
The issue you are experiencing is likely due to the root user's $PATH not including the directory where Python 3.4 is installed. By updating the $PATH, installing Python 3.4 in a standard location, or using a virtual environment, you can resolve this issue and successfully install and use your desired modules with Python 3.4.