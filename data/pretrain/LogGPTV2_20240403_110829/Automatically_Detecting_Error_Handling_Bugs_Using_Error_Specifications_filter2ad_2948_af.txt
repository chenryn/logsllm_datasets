[3] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P. Strub, and J. Zinzindohoue. A messy
state of the union: Taming the composite state machines of TLS.
IEEE Symposium on Security and Privacy (S&P), 2015.
[4] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Pironti, and
P. Strub. Triple handshakes and cookie cutters: Breaking and
ﬁxing authentication over TLS. In IEEE Symposium on Security
and Privacy (S&P), 2014.
[5] D. Bleichenbacher. Chosen ciphertext attacks against protocols
based on the RSA encryption standard PKCS #1. In International
Cryptology Conference (CRYPTO), 1996.
[6] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov. Us-
ing frankencerts for automated adversarial testing of certiﬁcate
validation in ssl/tls implementations. In IEEE Symposium on Se-
curity and Privacy (S&P), 2014.
[7] D. Brumley and D. Boneh. Remote timing attacks are practical.
In USENIX Security Symposium, 2003.
[8] R. Buse and W. Weimer. Automatic documentation inference for
exceptions. In International Symposium on Software Testing and
Analysis (ISSTA), 2008.
[9] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and au-
tomatic generation of high-coverage tests for complex systems
programs. In USENIX Symposium on Operating Systems Design
and Implementation (OSDI), 2008.
[10] C. Cadar and D. Engler. Execution generated test cases: How to
make systems code crash itself. In International SPIN Workshop
on Model Checking of Software (SPIN), 2005.
[11] H. Chen and D. Wagner. MOPS: an infrastructure for examining
security properties of software. In ACM Conference on Computer
and Communications Security (CCS), 2002.
[12] Y. Chen and Z. Su. Guided differential testing of certiﬁcate vali-
dation in SSL/TLS implementations. In ACM SIGSOFT Interna-
tional Symposium on the Foundations of Software (FSE), 2015.
[13] J. Clark and P. van Oorschot. SoK: SSL and HTTPS: Revisiting
past challenges and evaluating certiﬁcate trust model enhance-
ments. In IEEE Symposium on Security and Privacy (S&P), 2013.
[14] C. Cortes and V. Vapnik. Support-vector networks. Machine
learning, 20(3):273–297, 1995.
[15] T. Duong and J. Rizzo.
Here come the ⊕ ninjas.
http://nerdoholic.org/uploads/dergln/beast_
part2/ssl_jun21.pdf, 2011.
[16] D. Engler, D. Chen, S. Hallem, A. Chou, and B. Chelf. Bugs
as deviant behavior: A general approach to inferring errors in
systems code.
In Symposium on Operating Systems Principles
(SOSP), 2001.
[17] S. Fahl, M. Harbach, T. Muders, and M. Smith. Why Eve and
Mallory love Android: An analysis of SSl (in)security on An-
droid.
In ACM Conference on Computer and Communications
Security (CCS), 2012.
[18] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov. The most dangerous code in the world: Validating
SSL certiﬁcates in non-browser software. In ACM Conference on
Computer and Communications Security (CCS), 2012.
[19] P. Godefroid, N. Klarlund, and K. Sen. DART: Directed auto-
In ACM SIGPLAN conference on Pro-
mated random testing.
gramming Language Design and Implementation (PLDI), 2005.
[20] P. Godefroid, M. Levin, and D. Molnar. Automated whitebox
fuzz testing. In Network & Distributed System Security Sympo-
sium (NDSS), 2008.
[21] H. Gunawi, C. Rubio-González, A. Arpaci-Dusseau, R. Arpaci-
Dusseau, and B. Liblit. EIO: Error handling is occasionally cor-
rect. In USENIX Conference on File and Storage Technologies
(FAST), 2008.
[22] W. Halfond, S. Anand, and A. Orso. Precise interface identiﬁ-
cation to improve testing and analysis of web applications.
In
International Symposium on Software Testing and Analysis (IS-
STA), 2009.
[23] N. Heninger, Z. Durumeric, E. Wustrow, and A. Halderman. Min-
ing your Ps and Qs: Detection of widespread weak keys in net-
work devices. In USENIX Security Symposium, 2012.
[24] CVE-2011-0228.
http://cve.mitre.org/cgi-bin/
cvename.cgi?name=CVE-2011-0228, 2011.
[25] D. Kaminsky, M. Patterson, and L. Sassaman. PKI layer cake:
New collision attacks against the global X.509 infrastructure. In
360  25th USENIX Security Symposium 
USENIX Association
16
FC, 2010.
[26] S. Khurshid, C. Pasareanu, and W. Visser. Generalized symbolic
execution for model checking and testing. In International Con-
ference on Tools and Algorithms for the Construction and Analy-
sis of Systems (TACAS), 2003.
[27] A. Kiezun, P. Guo, K. Jayaraman, and M. Ernst. Automatic cre-
ation of SQL injection and cross-site scripting attacks. In Inter-
national Conference on Software Engineering (ICSE), 2009.
[28] D. Kim, J. Nam, J. Song, and S. Kim. Automatic patch generation
learned from human-written patches. In International Conference
on Software Engineering (ICSE), 2013.
[29] J. King. Symbolic execution and program testing. Communica-
tions of the ACM, 19(7):385–394, 1976.
[30] A. Langley.
Apple’s SSL/TLS bug.
https://www.
imperialviolet.org/2014/02/22/applebug.
html, 2014.
[31] J. Lawall, B. Laurie, R. Hansen, N. Palix, and G. Muller. Find-
ing error handling bugs in openssl using coccinelle. In European
Dependable Computing Conference (EDCC), 2010.
[32] A. Lenstra, J. Hughes, M. Augier, J. Bos, T. Kleinjung, and
C. Wachter. Ron was wrong, Whit is right. http://eprint.
iacr.org/2012/064, 2012.
[33] P. Marinescu and G. Candea. Efﬁcient testing of recovery code
using fault injection. ACM Transactions on Computer Systems
(TOCS), 29(4), 2011.
[34] P. D. Marinescu, R. Banabic, and G. Candea. An extensible tech-
In USENIX
nique for high-precision testing of recovery code.
Annual Technical Conference, 2010.
[35] M. Marlinspike.
IE SSL vulnerability.
http://www.
thoughtcrime.org/ie-ssl-chain.txt, 2002.
[36] M. Marlinspike. More tricks for defeating SSL in practice. DEF-
CON, 2009.
[37] M. Marlinspike. New tricks for defeating SSL in practice. Black
Hat DC, 2009.
[38] M. Marlinspike. Null preﬁx attacks against SSL/TLS cer-
http://www.thoughtcrime.org/papers/
tiﬁcates.
null-prefix-attacks.pdf, 2009.
[39] Z. Qi, F. Long, S. Achour, and M. Rinard. An analysis of patch
plausibility and correctness for generate-and-validate patch gen-
eration systems. In International Symposium on Software Testing
and Analysis (ISSTA), 2015.
[40] D. Ramos and D. Engler. Practical, low-effort equivalence veri-
ﬁcation of real code. In International Conference on Computer-
Aided Veriﬁcation (CAV), 2011.
[41] D. Ramos and D. Engler. Under-constrained symbolic execution:
correctness checking for real code. In USENIX Security Sympo-
sium, 2015.
[42] Checker developer manual.
http://clang-analyzer.
llvm.org/checker_dev_manual.html.
[43] J. Rizzo and T. Duong. The CRIME attack. In Ekoparty, 2012.
[44] M. Robillard and G. Murphy. Analyzing exception ﬂow in Java
In ACM SIGSOFT International Symposium on the
programs.
Foundations of Software (FSE), 1999.
[45] C. Rubio-González, H. Gunawi, B. Liblit, R. Arpaci-Dusseau,
and A. Arpaci-Dusseau. Error propagation analysis for ﬁle sys-
tems. In ACM SIGPLAN conference on Programming Language
Design and Implementation (PLDI), 2009.
[46] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and
In
D. Song. A symbolic execution framework for JavaScript.
IEEE Symposium on Security and Privacy (S&P), 2010.
[47] K. Sen, D. Marinov, and G. Agha. CUTE: A concolic unit testing
engine for C. In ACM SIGSOFT International Symposium on the
Foundations of Software (FSE), 2005.
[48] S. Son, K. McKinley, and V. Shmatikov. Rolecast: ﬁnding miss-
ing security checks when you do not know what checks are. In
International Conference on Object Oriented Programming, Sys-
tems, Languages and Applications (OOPSLA), 2011.
[49] V. Srivastava, M. Bond, K. McKinley, and V. Shmatikov. A se-
curity policy oracle: Detecting security holes using multiple API
implementations. In ACM SIGPLAN conference on Programming
Language Design and Implementation (PLDI), 2011.
[50] M. Stevens, A. Sotirov, J. Appelbaum, A. Lenstra, D. Molnar,
D. Osvik, and B. Weger. Short chosen-preﬁx collisions for MD5
and the creation of a rogue CA certiﬁcate. In International Cryp-
tology Conference (CRYPTO), 2009.
[51] The Apache Software Foundation. Apache portable runtime: Er-
ror codes. Available at https://apr.apache.org/docs/
apr/1.4/group__apr__errno.html, 2011.
[52] W. Weimer and G. Necula. Finding and preventing run-time er-
ror handling mistakes.
In International Conference on Object
Oriented Programming, Systems, Languages and Applications
(OOPSLA), 2004.
[53] W. Weimer and G. Necula. Mining Temporal Speciﬁcations for
Error Detection.
In International Conference on Tools and Al-
gorithms for the Construction and Analysis of Systems (TACAS),
2005.
[54] W. Weimer and G. Necula. Exceptional situations and program
reliability. ACM Transactions on Programming Languages and
Systems (TOPLAS), 2008.
[55] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest. Automat-
In Interna-
ically ﬁnding patches using genetic programming.
tional Conference on Software Engineering (ICSE), 2009.
[56] D. A. Wheeler.
Sloccount. Available at http://www.
dwheeler.com/sloccount/, 2015.
[57] F. Yamaguchi, C. Wressnegger, H. Gascon, and K. Rieck.
Chucky: exposing missing checks in source code for vulnera-
bility discovery. In ACM Conference on Computer and Commu-
nications Security (CCS), 2013.
A Appendix
Listing 3:
RAND_pseudo_bytes in OpenSSL
Sample implementation of
/* crypto/engine/hw_aep.c */
int aep_rand(unsigned char *buf, int len)
{
...
AEP_RV rv = AEP_R_OK;
AEP_CONNECTION_HNDL hConnection;
rv = aep_get_connection(&hConnection);
if (rv != AEP_R_OK) {
AEPHKerr(AEPHK_F_AEP_RAND,
goto err_nounlock;
AEPHK_R_GET_HANDLE_FAILED);
}
if (len > RAND_BLK_SIZE) {
rv = p_AEP_GenRandom(hConnection, len,
2, buf, NULL);
if (rv != AEP_R_OK) {
AEPHKerr(AEPHK_F_AEP_RAND,
goto err_nounlock;
AEPHK_R_GET_RANDOM_FAILED);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
17
}
}
...
return 1;
err_nounlock:
return 0;
}
USENIX Association  
25th USENIX Security Symposium  361
Table 6: Tested functions and bug counts
Function
Name
ASN1_INTEGER_set
BN_mod_exp
BN_sub
EC_KEY_up_ref
EC_POINT_cmp
PEM_read_bio_X509
RAND_pseudo_bytes
X509_get_serialNumber
i2a_ASN1_INTEGER
i2d_X509
Total
asn1_read_value
asn1_write_value
gnutls_openpgp_crt_get_subkey_idx
gnutls_openpgp_privkey_get_subkey_idx
gnutls_privkey_get_pk_algorithm
gnutls_x509_crq_get_dn_by_oid
gnutls_x509_crq_get_extension_info
gnutls_x509_crq_get_pk_algorithm
gnutls_x509_crt_get_serial
gnutls_x509_privkey_import
gnutls_x509_privkey_import_pkcs8
record_overhead_rt
Total
aes_setkey_enc
asn1_get_int
asn1_get_tag
md_hmac_starts
md_init_ctx
mpi_ﬁll_random
ssl_handshake
Total
wc_InitRsaKey
wc_ShaHash
mp_init
Total
RAND_bytes
SSL_get_peer_cert_chain
SSL_shutdown
Total
BIO_free
BIO_new
SSL_CTX_new
SSL_CTX_use_certiﬁcate_chain_ﬁle
SSL_get_peer_cert_chain
SSL_get_peer_certiﬁcate
SSL_get_verify_result
SSL_read
SSL_write
Total
SSL_set_fd
SSL_CTX_new
Total
SSL_CTX_new
BIO_new
SSL_shutdown
Total
BIO_new
Total
OpenSSL
GnuTLS
mbedTLS
wolfSSL
cURL
httpd
Lynx
Mutt
Wget
Grand_Total
Bug
Count
4
3
2
1
1
2
20
3
3
9
48
4
3
1
3
3
2
1
2
1
0
1
2
23
0
2
8
2
2
5
0
19
0
0
0
0
2
0
0
2
4
1
1
1
0
0
0
0
0
7
1
0
1
0
1
1
2
0
0
102
False
Positives
0
0
0
0
0
0
1
1
0
0
2
0
0
0
0
1
0
0
0
0
1
0
0
2
1
0
0
0
0
0
1
2
1
1
8
10
0
1
1
2
0
1
0
0
1
1
1
1
1
6
0
2
2
1
0
0
1
1
1
28
18
362  25th USENIX Security Symposium 
USENIX Association