also each generate a secret value.
2 Client Hello: Like TLS, an mcTLS session be-
gins with a ClientHello message containing a
random value. In mcTLS, the ClientHello carries
a MiddleboxListExtension, which contains (1) a
list of the middleboxes to include in the session—
we discuss building this list in the ﬁrst place in
§6.1—and (2) a list of encryption contexts, their
purposes (strings meaningful to the application),
and middlebox access permissions for every con-
text. The client opens a TCP connection with the
middlebox and sends the ClientHello; the mid-
dlebox opens a TCP connection with the server
and forwards the ClientHello.
3 Certiﬁcate & Public Key Exchange: As in
TLS, the server responds with a series of messages
1Though we describe each as one key for simplicity,
Kreaders and Kendpoints are really four keys each (just
like the “session key” in TLS): an encryption key for
data in each direction and a MAC key for data in each
direction. Likewise, Kwriters is really one MAC key for
each direction.
Figure 1: The mcTLS handshake.
containing a random value, its certiﬁcate, and an
ephemeral public key signed by the key in the cer-
tiﬁcate. The middlebox does the same:
it sends
its random value, certiﬁcate, and ephemeral pub-
lic key to both the client and the server. The client
sends an ephemeral public key, which the middle-
box saves and forwards to the server. The middle-
box piggy-backs its messages on the ServerKeyEx-
change and ClientKeyExchange messages (indi-
cated by dashed arrows). The ephemeral keys pro-
vide forward secrecy; the middlebox uses diﬀerent
key pairs for the client and the server to prevent
small subgroup attacks [22].
TCP HandshakeClientMiddleboxServerClientHellorandCTCP Handshakeread and forwardforwardChangeCipherSpecFinishedServerHelloCerti(cid:31)caterandSPK+SServerKeyExchangeSign      (DH+S)PK –SMiddleboxKeyMaterial (M)AuthEnc     ({KCreaders}, {KCwriters})KC-MKreaders ! PRF                                 (”reader keys” || randC || randS)Kwriters ! PRF                                (”writer keys” || randC || randS)context key computation (all parties)KCreaders || KSreadersKCwriters || KSwritersClientKeyExchangeDH+CrandC , SC , DH+C , DH–CgeneraterandM , DH+M1 , DH–M1, DH+M2, DH–M2generaterandS , SS , DH+S , DH–SgenerateServerKeyExchangeServerHelloDone|Sign       (DH+M1)PK –MServerHelloCerti(cid:31)caterandMPK+MSign       (DH+M2)}PK –Mclient key computationPSC-S ! DHCombine(DH+S , DH–C )Kendpoints ! PRF    (”k” || randC || randS )SC-S{KCreaders, KCwriters} ! PRF    (”ck” || randC )SCSC-S ! PRF          (”ms” ||  randC || randS)PSC-SPSC-M ! DHCombine(DH+M1 , DH–C )KC-M ! PRF     (”k” || randC || randM )SC-MSC-M ! PRF          (”ms” ||  randC || randM)PSC-Mserver key computationmirrors clientMiddleboxKeyMaterial (S)AuthEnc         ({KCreaders}, {KCwriters})KendpointsChangeCipherSpecFinishedMiddleboxKeyMaterial (M)AuthEnc     ({KSreaders}, {KSwriters})KS-MServerHelloDonemiddlebox key computationPSC-M ! DHCombine(DH+C , DH–M1 )KC-M ! PRF     (”k” || randC || randM )SC-MSC-M ! PRF          (”ms” ||  randC || randM)PSC-MPSS-M ! DHCombine(DH+S , DH–M2 )KS-M ! PRF    (”k” || randS || randM )SS-MSS-M ! PRF          (”ms” ||  randS || randM)PSS-MMiddleboxKeyMaterial (S)AuthEnc         ({KSreaders}, {KSwriters})Kendpoints4123576204Hash
Secret Comp.
Key Gen.
Asym Verify
Sym Encrypt
Sym Decrypt
Client
12 + 6N
N + 1
4K + N + 1
N + 1
N + 2
2
mcTLS
Middlebox
(k ≤ 2K) + 2
n ≤ 1
0
2
0
2
Server
12 + 6N
N + 1
n ≤ N
N + 2
4K + N + 1
2
mcTLS (Client Key Dist.)
Client
10 + 5N
N + 1
Middlebox
Server
10 + 5N
Split TLS
Client Middlebox
Server
10
1
1
1
1
1
20
2
2
1
2
2
10
1
1
0
1
1
1
1
0
1
2
2K + N + 1
N + 1
N + 2
1
0
1
1
0
1
n ≤ 1
(N = number of middleboxes; K = number of contexts)
Table 3: Cryptographic operations performed by the client, middlebox, and server during the handshake. Assumes
no TLS extensions, a DHE-RSA cipher suite, and the client is not authenticated with a certiﬁcate.
readers,
writers
for each context, using a secret
4 Shared Key Computation: The client com-
putes two secrets (SC-M and SC-S) using the con-
tributions from the server and middlebox, which
it uses to generate a symmetric key shared with
the middlebox (KC-M ) and the server (Kendpoints).
The client also generates “partial keys,” K C
and K C
known only to itself.
The server follows the same procedure as the
client, resulting in Kendpoints, KS-M , K S
writers, and
K S
readers. The server may choose to avoid this
overhead by asking the client to generate and dis-
tribute complete context keys (§3.6).
When the middlebox receives the ClientKeyEx-
change, it computes KC-M and KS-M using the
client’s and server’s ephemeral public keys, respec-
tively; it will use these keys later to decrypt con-
text key material from the client and server.
readers and K S
writers and K S
5 Context Key Exchange: Next, for each con-
text, the endpoints send the partial context keys
to the middlebox (K C
readers if it has
read access and K C
writers if it has
write access). These messages are sent encrypted
and authenticated under KC-M and KS-M , ensur-
ing the secrecy and integrity of the partial context
keys. The middlebox forwards each message on to
the opposite endpoint so it can be included in the
hash of the handshake messages that is veriﬁed at
the end of the handshake. The endpoints also send
all of the partial context keys to the opposite end-
point encrypted under Kendpoints. The middlebox
forwards this message (but cannot read it).
6 Context Key Computation: The client indi-
cates that the cipher negotiated in the handshake
should be used by sending a ChangeCipherSpec
message. Receipt of the ChangeCipherSpec mes-
sage prompts all parties to generate context keys
using P RF(·) keyed with the concatenation of the
partial context keys. This “partial key” approach
serves two purposes: (1) it provides contributory
key agreement (both endpoints contribute ran-
domness) and (2) it ensures that a middlebox only
gains access to a context if the client and server
both agree.
7 Finished: The mcTLS handshake concludes
with the exchange of Finished messages. As
in TLS, the Finished message contains a hash
of the concatenation of all handshake messages
(including those directed to the middlebox):
P RFSC-S (f inished label, H(messages)). Verify-
ing this message ensures that both endpoints ob-
serve the same sequence of identical handshake
messages, i.e., no messages were modiﬁed in ﬂight.
Details There are a few subtle diﬀerences between the
mcTLS and TLS handshakes. We brieﬂy highlight the
changes here and argue why they are safe; for a more
detailed security analysis, see [1].
• For simplicity, the middlebox cannot negotiate ses-
sion parameters (e.g., cipher suite or number of
contexts). A more complex negotiation protocol
could be considered in future work if needed.
• The server’s context key material is not included
in the client’s Finished message, since this would
require an extra RTT. However, this key material
is sent encrypted and MAC-protected, so an ad-
versary cannot learn or modify it.
• The client cannot decrypt the context key mate-
rial the server sends the middlebox and vice versa.
This would require establishing a three-way sym-
metric key between both endpoints and each mid-
dlebox. Because the middlebox needs key material
from both endpoints, one rogue endpoint cannot
unilaterally increase a middlebox’s permissions.
• The middlebox cannot verify the handshake hash
in the Finished message because it does not know
Kendpoints. We do not include per-middlebox Fin-
ished messages to avoid overhead. This means it
is possible for the middlebox to observe an incor-
rect sequence of handshake messages. However,
this is at most a denial of service attack. For in-
stance, even though the middlebox cannot detect
a cipher suite downgrade attack, the endpoints
would detect it and terminate the session. Further-
more, context key material is sent encrypted and
MAC-protected under keys each endpoint shares
with the middlebox, so as long as at least one end-
point veriﬁes the middlebox’s certiﬁcate, an adver-
sary cannot learn or modify the context keys.
2053.6 Reducing Server Overhead
One concern (albeit a diminishing one [17, 4]) about
deploying TLS is that the handshake is computationally
demanding, limiting the number of new connections per
second servers can process. We do not want to make this
problem worse in mcTLS, and one way we avoid this
is by making certain features optional. For example,
similar to TLS, authentication of the entities in the ses-
sion is optional—in some cases, the server may not care
who the middleboxes are. Another burden for servers
in mcTLS is generating and encrypting the partial con-
text keys for distribution to middleboxes. Rather than
splitting this work between the client and server, it can
optionally be moved to the client: context keys are gen-
erated from the master secret shared by the endpoints
and the client encrypts and distributes them to middle-
boxes (“client key distribution mode”). This reduces the
server load, but it has the disadvantage that agreement
about middlebox permissions is not enforced.
(Note
that this does not sacriﬁce contributory key agreement
in the sense that both endpoints contribute randomness.
The client generates the context keys from the secret
it shares with the server; if client/server key exchange
was contributory, the context keys inherit this beneﬁt.)
Choosing a handshake mode is left to content providers,
who can individually decide how to make this control-
performance tradeoﬀ; servers indicate their choice to
clients in the ServerHello.
Table 3 compares the number of cryptographic opera-
tions performed by mcTLS and the split TLS approach
described in Section 2.2. We show numbers for mcTLS
both without and with client context key distribution.
If we consider a simple example with a single middle-
box (N = 1), the additional server load using client
key distribution mode is limited to a small number of
lightweight operations (Hash and Sym Decrypt).
4. USING mcTLS
4.1 Using Contexts
Just as the architects of HTTP had to deﬁne how it
would operate over TLS [30], protocol designers need
to standardize how their applications will use mcTLS.
From an application developer’s perspective, the biggest
change mcTLS brings is contexts: the application needs
to decide how many contexts to use and for what. First
we give the topic a general treatment and then follow
up with some concrete use cases below.
There are two ways to think about contexts: as sec-
tions of the data stream or as conﬁgurations of middle-
box permissions. For example, suppose an application
wants to transfer a document consisting of three pieces,
A, B, and C, via two middleboxes, M1 and M2. M1
should have read access to the entire document and M2
should read A, write B, and have no access to C. The
application could allocate one context for each piece and
assign the appropriate permissions (Figure 2 left), or it
Figure 2: Strategies for using encryption contexts: context-
per-section (left) and context-as-permissions (right).
could create one context for each combination of per-
missions and use the appropriate context when sending
each piece of the document (Figure 2 right).
Which model is appropriate depends on the use case:
in the context-per-section model, n sections means n
contexts. In the contexts-as-permissions model, m mid-
dleboxes means 3m contexts. In practice, we expect at
least one of these numbers to be small, since data in
a session often is not of wildly varying levels of sensi-
tivity and since most middleboxes need similar permis-
sions (Table 1). For instance, in the case of HTTP, we
imagine four contexts will be suﬃcient: request head-
ers, request body, response headers, and response body.
(Though you could imagine extreme cases in which each
HTTP header has its own access control settings.)
Finally, the example above uses a static context as-
signment, but contexts can also be selected dynamically.
An application could make two contexts, one which a
middlebox can read and one it cannot, and switch be-
tween them to enable or disable middlebox access on-
the-ﬂy (for instance, to enable compression in response
to particular user-agents).
4.2 Use Cases
Data Compression Proxy Many users—particularly
on mobile devices—use proxies like Chrome’s Data
Compression Proxy [3], which re-scale/re-encode im-
ages, to reduce their data usage. However, Google’s
proxy currently ignores HTTPS ﬂows. With mcTLS,
users can instruct their browsers to give the compres-
sion proxy write access to HTTP responses. One step
further, the browser and web server could coordinate to
use two contexts for responses: one for images, which
the proxy can access, and the other for HTML, CSS, and
scripts, which the proxy cannot access. Context assign-
ments can even change dynamically:
if a mobile user
connects to Wi-Fi mid-page-load, images might also be
transferred over the no-access context since compression
is no longer required.
Parental Filtering Libraries and schools—and some-