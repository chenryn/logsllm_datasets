6http://rweverything.com/
17
ProduceFVBProtocolOnBuffer Code
ProduceFVBProtocolOnBuffer Stack
FvbDev
00000000
FFFFFFFF
FvbDev->LbaCache
3DE1A890
3DE1A910
3EB18E78
3EBE1E44
???
loc_3EB21E44:
8B 4D FC     mov     ecx, [ebp+vBlockIndex]         
8B 5E 30     mov     ebx, [esi+EFI_FW_VOL_BLOCK_DEVICE.LbaCache]
C1 E1 03     shl     ecx, 3
89 14 19     mov     [ecx+ebx+LBA_CACHE.Base], edx   ; LbaCache[i].Base = AttackerValue*i
8B 56 30     mov     edx, [esi+EFI_FW_VOL_BLOCK_DEVICE.LbaCache]
8B 58 04     mov     ebx, [eax+LBA_CACHE.Length]
89 5C 0A 04  mov     [edx+ecx+LBA_CACHE.Length], ebx ; LbaCache[i].Length = AttackerValue
8B 55 F4     mov     edx, [ebp+vLinearOffset]  
03 50 04     add     edx, [eax+4]     
FF 45 FC     inc     [ebp+vBlockIndex]  
FF 45 F8     inc     [ebp+vBlockIndex2]  
8B 4D F8     mov     ecx, [ebp+vBlockIndex2]  
89 55 F4     mov     [ebp+vLinearOffset], edx  
3B 08        cmp     ecx, [eax]
72 D4        jb      short loc_3EB21E44  
LbaCache Pointer 
Overwritten
Figure 9: The LbaCache pointer is corrupted, further complicating the overwrite.
address is typically allocated to the kernel.
5
Leveraging The Attack
Successful exploitation of these vulnerabilities allows the attacker to gain code execution in the early boot
environment. In this environment, the SPI ﬂash is still necessarily unlocked7. Thus the attacker is able to
make SPI write cycles to the SPI ﬂash, allowing him to permanently persist in the platform ﬁrmware. Note
that this means the attackers injections would survive even an operating system reinstallation! In fact, as
shown in [3] it would then be possible for the attacker to persist across ﬁrmware update attempts. As it
is the platform ﬁrmware that is responsible for instantiating SMM, the attacker is able to arbitrarily inject
code into SMM. Hence our attacker who began his life in ring 3, now has permanent control of SMM.
6
User Experience
Exploiting the capsule update vulnerabilities requires rebooting the system. An attacker wishing to remain
stealthy could schedule the attack to occur when the system is naturally rebooting for patches. After the
reboot has occurred, and the attacker has pivoted control to a ﬁrmware injecting shellcode, another reboot
of the system should immediately take place. Because the vulnerabilities take place before graphics have
been initialized, the victim may only notice a longer than usual reboot time.
7The ﬂash must remain unlocked until the ﬂash update code has ﬁnished.
18
ProduceFVBProtocolOnBuffer Code
ProduceFVBProtocolOnBuffer Stack
FvbDev
00000000
FFFFFFFF
FvbDev->LbaCache
3DE1A890
3DE1A910
3EB18E78
3EBE1E44
loc_3EB21E44:
B8 8B D9 02 5E        mov     eax,5E02D98Bh         
8B 5E 30     mov     ebx, [esi+EFI_FW_VOL_BLOCK_DEVICE.LbaCache] 
C1 E1 03     shl     ecx, 3
89 14 19     mov     [ecx+ebx+LBA_CACHE.Base], edx   ; LbaCache[i].Base = AttackerValue*i
8B 56 30     mov     edx, [esi+EFI_FW_VOL_BLOCK_DEVICE.LbaCache]
8B 58 04     mov     ebx, [eax+LBA_CACHE.Length]
89 5C 0A 04  mov     [edx+ecx+LBA_CACHE.Length], ebx ; *(DWORD *)3EB21E44 = AttackerValue
8B 55 F4     mov     edx, [ebp+vLinearOffset]  
03 50 04     add     edx, [eax+4]     
FF 45 FC     inc     [ebp+vBlockIndex]  
FF 45 F8     inc     [ebp+vBlockIndex2]  
8B 4D F8     mov     ecx, [ebp+vBlockIndex2]  
89 55 F4     mov     [ebp+vLinearOffset], edx  
3B 08        cmp     ecx, [eax]
72 D4        jb      short loc_3EB21E44  
We are now 
corrupting the loop 
code itself..
 AttackerValue = 2D98BB8.
 Overwrites top of loop code on iteration=38E
 *(DWORD *)3EB21E44 = AttackerValue (B8 8B D9 02) [endianness]
Figure 10: Loop code overwritten with useless instructions.
7
A↵ected Systems
Determining which vendors were a↵ected was a non-trivial problem. Theoretically the UEFI open source
reference implementation should be widely utilized by both OEMs and Independent BIOS Vendors (IBVs).
Thus the capsule update vulnerabilities should be widespread. In practice there is large variance to the
degree that OEMs/IBVs utilize the reference implementation. This problem is further described by [16],
which points out that ﬁrmware implementations vary widely even within the same OEM. Due to this, it is
necessary to consider the exploitability of systems on a case by case basis. Before we can begin with a case
study, analysis techniques that help determine exploitability are introduced.
7.1
OEM Firmware Instrumentation
As mentioned in Section 4, the lack of debugging capability for ﬁrmware level code is a signiﬁcant hurdle.
Without debugging capability, the vulnerability of a particular system must be determined using only static
analysis. Given the complexity of UEFI and its tendency for indirect calling, this approach proved diﬃcult.
To work around this limitation, we used QEMU to instrument the OEM ﬁrmware using the following steps.
• The OEM Firmware was dissected into its individual EFI executables using EFIPWN8.
• The EFI executables responsible for Capsule Coalescing (PEI Phase) and Capsule Processing (DXE
Phase) were identiﬁed using Guid matching and bindi↵9.
- Capsule coalescing code was usually located in CapsulePEI.
- Capsule processing code was usually located in DXECORE.
8https://github.com/G33KatWork/EFIPWN
9http://www.zynamics.com/bindiff.html
19
ProduceFVBProtocolOnBuffer Code
ProduceFVBProtocolOnBuffer Stack
FvbDev
00000000
FFFFFFFF
FvbDev->LbaCache
3DE1A890
3DE1A910
3EB18E78
3EBE1E44
loc_3EB21E44:
E9 14 BF 8C D9            jmp    183EDD5Dh         
2D 5E 30     mov     ebx, [esi+EFI_FW_VOL_BLOCK_DEVICE.LbaCache]
C1 E1 03     shl     ecx, 3
89 14 19     mov     [ecx+ebx+LBA_CACHE.Base], edx   ; *(DWORD *)3EB21E42 = AttackerValue*i
8B 56 30     mov     edx, [esi+EFI_FW_VOL_BLOCK_DEVICE.LbaCache]
8B 58 04     mov     ebx, [eax+LBA_CACHE.Length]
89 5C 0A 04  mov     [edx+ecx+LBA_CACHE.Length], ebx ; *(DWORD *)3EB21E46 = AttackerValue
8B 55 F4     mov     edx, [ebp+vLinearOffset]  
03 50 04     add     edx, [eax+4]     
FF 45 FC     inc     [ebp+vBlockIndex]  
FF 45 F8     inc     [ebp+vBlockIndex2]  
8B 4D F8     mov     ecx, [ebp+vBlockIndex2]  
89 55 F4     mov     [ebp+vLinearOffset], edx  
3B 08        cmp     ecx, [eax]
72 D4        jb      short loc_3EB21E44  
Shellcode
183EDD5D
 AttackerValue = 2D98CBF.
 Overwrites top of loop code on iteration=BB
 *(DWORD *)3EB21E42 = (AttackerValue * 0xBB) % 0x100000000
                                              = 14E9CF8F 
                                              = 85 CF E9 14 [endianness]
 *(DWORD *)3EB21E46 = BF 8C D9 02 [endianness]
Figure 11: Loop code overwritten with jump to shellcode.
• The relevant binary modules were then inserted into the UEFI Open Virtual Machine Firmware[1]10
• Because OVMF does not have built in support for capsule update, the PlatformPeim module provided
by OVMF was modiﬁed to call the capsule update interface exported by the OEM’s binary module.
• QEMU was then used to boot the modiﬁed OVMF ﬁrmware.
• Debugging of the OEM capsule binary modules was now possible via QEMU’s gdb stub.
7.2
HP EliteBook 2540p F23 Case Study
As an example of determining the vulnerability of a speciﬁc OEM system, we consider the capsule coalescing
routine of the HP EliteBook 2540p at BIOS (UEFI) revision F23. We discovered the capsule coalescing code
to be very similar to the code described in Listing 4, with the following relevant di↵erences.
• CapsuleSize + 8 is compared to MemorySize, as opposed to CapsuleSize + DescriptorSize. Hence Bug
1 is present in a di↵erent form.
• An additional sanity check is made that for each entry in the descriptor array, descriptor.DataBlock
+ descriptor.Length does not integer overﬂow11.
• EDK1 style descriptors are used, which include a 4 byte signature and a checksum.12 The DataBlock
and Length ﬁelds are identical.
10OVMF is an open source virtual machine ﬁrmware included in the UEFI open source reference implementation.
11An important sanity check that the reference implementation lacked
12Neither of these 2 additional ﬁelds matters in practice
20
To demonstrate the vulnerability of the 2540p, we built a descriptor list that explicitly instantiated Bug
213 and Bug 414. Both of these bugs were present in the 2540p. Consider the matryoshka style descriptor
array conﬁguration outlined by Figure 12. In this conﬁguration, the sum of the descriptor length values will
overﬂow the 32 bit CapsuleSize integer, and hence pass the sanity comparison with MemorySize. Also note
that although it is sanity checked that Descriptor[0].Length + Descriptor[0].DataBlock does not overﬂow, it
is still possible that DestPtr + Descriptor[0].Length will overﬂow. This is in fact the case since we explicitly
set Descriptor[0] to be low in memory and have a huge length size, and DestPtr is always high in the address
space due to the coalescing function design. Hence we can abuse Bug 4 in the IsOverlapped check to proceed
with the block copy operation of Descriptor[0]. This copy will corrupt the address space and allow the
attacker to hijack control of the update operation.15
00000000
FFFFFFFF
UEFI PEI Code
PEI Stack
Descriptor[0] 
“Matryoshka  Layer  1”
Length=C0000000-&DescriptorArray[0].DataBlock
DataBlock=2000000
Descriptor[1]
“Matryoshka  Layer  2”
Length=100-DescriptorArray[0].Length
DataBlock=2000000
C0000000
Intended Coalescing Space
02000000
Descriptor[1] 
Descriptor[0] 
C0000000 - 100
Figure 12: The Matryoshka descriptor conﬁguration. Sum of length values overﬂows 32 bit Integer.
7.3
General Observations Regarding A↵ected Systems
We believe the vulnerabilities presented in this paper to be widespread among UEFI systems. However, it
is diﬃcult to determine the exact pervasiveness of the vulnerabilities due to the need to evaluate ﬁrmware
implementations on a case by case basis. Some variant of the capsule coalescing vulnerability was present in
the majority of systems we evaluated with static analysis. Interestingly, although the OEM coalescing code
often demonstrated variations from the reference implementation code, the ProduceFVBProtocolOnBu↵er
code appeared to be identically copied in all of the systems we looked at. Thus the code associated with
bug 316 was present on all of the UEFI implementations we analyzed. However, as we did not have debug
access, or even physical access17 to many systems we evaluated, it is impossible to produce a complete list
of a↵ected systems without self-reporting by the vendors. For instance, although the vulnerable code may
be present, it may be vestigial and not actually utilized during the update process.
8
Vendor Response
Intel and CERT were notiﬁed of the envelope parsing vulnerability on November 22nd 2013, and of the
coalescing vulnerabilities on December 4th 2014. Intel then reached out to IBVs and OEMs to attempt to
13Integer overﬂow in capsule length summation
14Integer overﬂow in IsOverlapped check
15In the case of the Elitebook 2540p, 4GB RAM is standard so there is no dead space in the address space as had to be
overcome on the MinnowBoard.
16Integer overﬂow in LbaCache allocation
17We just downloaded the ﬁrmware images from the OEM websites.
21
discern if they were a↵ected. Information about which vendors are a↵ected and what systems should be
patched is conveyed in CERT VU #552286. The disclosure of these vulnerabilities ultimately led to the
formation of a UEFI Security Response Team. The vulnerabilities were patched in the UDK2014 reference
implementation release[10].
9
Recommendations
The authors have several recommendations regarding locking down the UEFI capsule update interface and
the Runtime Interface as a whole.
• The UEFI Reference Implementation should be more thoroughly audited. The existence of easy to
ﬁnd integer overﬂows in security critical code is disturbing.
• Capsule coalescing seems unnecessary on modern system’s with plentiful RAM as ﬁrmware capsules are
usually under 16 MB. Instead the ﬁrmware capsule could assumed to be already contiguous in memory.
This would eliminate much of the complicated and buggy code from the ﬁrmware update process. If
memory constraints are a valid concern 18, the ﬁrmware update process could be instantiated from a
boot loader.
• The decision to expose the Variable portion of the Runtime Services to userland in Windows 8 should be
more closely evaluated from a security standpoint. On the one hand, this decision minimizes the amount
of code that needs to be loaded into the kernel, as now userland processes can perform important system
conﬁguration. On the other hand, userland access to these variables opens up additional attack surface
that is accessible from ring 3.
• An option for a physical presence test should be added to the ﬁrmware update process19. Although
many organizations will opt out of this option so that they can remotely update ﬁrmware without user
interaction, organizations with a greater security focus could opt in to this requirement.
10
Related Work
Invisible Things Lab presented the ﬁrst memory corruption attack against a BIOS update[20].
In their
attack, an integer overﬂow in the rendering of a customizable bootup splash screen was exploited to gain
control over the boot up process before the BIOS locks were set. This allowed the BIOS to be reﬂashed with
arbitrary contents. The authors of this paper have also presented an attack against the coalescing operation
of some Dell legacy BIOSes[15].
11
Conclusion
In this paper we have demonstrated that although UEFI provides additional security features, it has also
provided additional attack surface that may be exploited. Furthermore, some of this attack surface is exposed
to Windows 8 userland processes by the Windows 8 ﬁrmware environment variable API. Despite increased
focus on protecting the integrity of the platform, vulnerabilities introduced by UEFI may allow an attacker
to compromise the platform ﬁrmware and attain permanent control of SMM. Although the authors believe
that UEFI is ultimately a step in the right direction towards securing the platform, more work needs to be
done on evaluating the security of the features it provides.
12
Acknowledgments
TODO
18Such as on an embedded system
19Toggled perhaps through the BIOS conﬁguration screen
22
References
[1] How to build OVMF.
http://sourceforge.net/apps/mediawiki/tianocore/index.php?title=
How_to_build_OVMF. Accessed: 06/13/2014.
[2] MinnowBoard. http://www.minnowboard.org. Accessed: 06/13/2014.
[3] J. Butterworth, C. Kallenberg, and X. Kovah. Bios chronomancy: Fixing the core root of trust for
measurement. In BlackHat, Las Vegas, USA, 2013.
[4] CERT. VU #758382. http://www.kb.cert.org/vuls/id/758382. Accessed: 06/13/2014.
[5] Intel Corporation. Intel I/O Controller Hub 9 (ICH9) Family Datasheet. http://www.intel.com/
content/www/us/en/io/io-controller-hub-9-datasheet.html. Accessed: 10/01/2013.
[6] Intel Corporation.
Intel Platform Innovation Framework for EFI Driver Execution Environ-
ment Core Interface Speciﬁcation.
http://www.intel.com/content/dam/doc/reference-guide/
efi-dxe-cis-v091.pdf. Accessed: 06/13/2014.
[7] Intel Corporation. Intel Platform Innovation Framework for EFI Pre-EFI Initialization Core Interface
Speciﬁcation. http://www.intel.com/content/dam/doc/reference-guide/efi-pei-cis-v091.pdf.
Accessed: 06/13/2014.
[8] Intel Corporation. TianoCore. http://sourceforge.net/apps/mediawiki/tianocore/index.php?
title=Welcome. Accessed: 06/13/2014.
[9] Intel Corporation.
UEFI Development Kit 2010.
http://sourceforge.net/apps/mediawiki/
tianocore/index.php?title=UDK2010. Accessed: 06/13/2014.
[10] Intel Corporation. UEFI Development Kit 2010. http://sourceforge.net/projects/edk2/files/
UDK2014_Releases/UDK2014/. Accessed: 06/13/2014.
[11] Microsoft Corporation.
MSDN SetFirmwareEnvironmentVariable.
http://msdn.microsoft.com/
en-us/library/windows/hardware/ms724934(v=vs.85).aspx. Accessed: 06/13/2014.
[12] j00ru.
Defeating Windows Driver Signature Enforcement #1:
default drivers.
http://j00ru.
vexillium.org/?p=1169. Accessed: 06/13/2014.
[13] j00ru. Defeating Windows Driver Signature Enforcement #2: CSRSS and thread desktops. http:
//j00ru.vexillium.org/?p=1393. Accessed: 06/13/2014.
[14] j00ru. Defeating Windows Driver Signature Enforcement #3: The Ultimate Encounter. http://j00ru.
vexillium.org/?p=1455. Accessed: 06/13/2014.
[15] C. Kallenberg, J. Butterworth, X. Kovah, and C. Cornwell. Defeating Signed BIOS Enforcement. In
EkoParty, Buenos Aires, 2013.
[16] C. Kallenberg, C. Cornwell, X. Kovah, and J. Butterworth. Setup For Failure: More Ways to Defeat
SecureBoot. In Hack In The Box Amsterdam, Amsterdam, 2014.
[17] MN.
Analysis of Uroburos, using WinDbg.
https://blog.gdatasoftware.com/blog/article/
analysis-of-uroburos-using-windbg.html. Accessed: 06/16/2014.
[18] Phoenix. Eﬁ Runtime Services. http://wiki.phoenix.com/wiki/index.php/EFI_RUNTIME_SERVICES.
Accessed: 06/13/2014.
[19] J. Rutkowska and A. Tereshkin. IsGameOver() Anyone? In BlackHat, Las Vegas, USA, 2007.
[20] R. Wojtczuk and A. Tereshkin. Attacking Intel BIOS. In BlackHat, Las Vegas, USA, 2009.
23