authenticated messages (m1, . . . , mn).
• Type 3 Forgery: P ∗ is not well-deﬁned w.r.t. T∆∗ .
Our deﬁnition is obtained by extending the one by Cata-
lano and Fiore [15] to our model of multi-labeled programs.
The resulting deﬁnition is very close to the one proposed
by Freeman for homomorphic signatures [23], with the ex-
ception that we allow for arbitrary labels, and we do not
impose any a-priori ﬁxed bound on the number of elements
in a data set.
In the most general case where f can be any function, it
might not be possible to eﬃciently (i.e., in polynomial time)
check whether a program P is well-deﬁned w.r.t. a list T .
However, for more speciﬁc classes of computations, this is
not an issue. For example, Freeman showed that this is not
a problem for linear functions [23]. In the following propo-
sition (whose proof appears in the full version), we show a
similar result for the classes of computations considered in
our work, i.e., arithmetic circuits deﬁned over the ﬁnite ﬁeld
Zp where p is a prime of roughly λ bits, and whose degree
d is bounded by a polynomial. In particular, we show that
any adversary who wins by producing a Type 3 forgery can
be converted into one who outputs a Type 2 forgery.
Proposition 1. Let λ ∈ N be the security parameter, let
p > 2λ be a prime number, and let {fλ} be a family of arith-
metic circuits over Zp whose degree is bounded by some poly-
nomial d = poly(λ). If for any adversary B producing a Type
2 forgery we have that Pr[HomUF−CMAB,HomMAC-ML(λ) =
1] ≤ ǫ, then for any adversary A producing a Type 3 forgery
it holds Pr[HomUF−CMAA,HomMAC-ML(λ) = 1] ≤ ǫ + d/p.
3.3 Homomorphic MACs with Efﬁcient Veri-
ﬁcation for Multi-Labeled Programs
In this section we introduce a new property for homomor-
phic MACs that we call eﬃcient veriﬁcation.
Informally,
a homomorphic MAC satisﬁes eﬃcient veriﬁcation if it is
possible to verify a tag σ against a multi-labeled program
P∆ = (P, ∆) in less time than that required to compute P.
We deﬁne this eﬃciency property in an amortized sense, so
that the veriﬁcation is more eﬃcient when the same program
P is executed on diﬀerent data sets. The formal deﬁnition
follows.
Definition 2. Let HomMAC-ML = (KeyGen, Auth, Ver,
Eval) be a homomorphic MAC scheme for multi-labeled pro-
grams as deﬁned in the previous section. HomMAC-ML sat-
isﬁes eﬃcient veriﬁcation if there exist two additional algo-
rithms (VerPrep, EﬀVer) as follows:
VerPrep(sk, P): on input the secret key sk and a labeled pro-
gram P = (f, τ1, . . . , τn), this algorithm generates a con-
cise veriﬁcation key VKP . We stress that this veriﬁcation
key does not depend on any data set identiﬁer ∆.
EﬀVer(sk, VKP , ∆, m, σ):
given the secret key sk, a veriﬁ-
cation key VKP , a data set identiﬁer ∆, a message m ∈ M
and a tag σ, the eﬃcient veriﬁcation algorithm outputs 0
(reject) or 1 (accept).
The above algorithms are required to satisfy the following
two properties:
Correctness. Let (sk, ek) ←R KeyGen(1λ) be honestly
generated keys, and (P∆, m, σ) be any program/message/tag
tuple with P∆ = (P, ∆) such that Ver(sk, P∆, m, σ) = 1.
Then, for every VKP ←R VerPrep(sk, P), we have Pr[EﬀVer(sk,
VKP , ∆, m, σ) = 1] = 1.
Amortized Efficiency. Let P∆ = (P, ∆) be a program,
let (m1, . . . , mn) ∈ Mn be any vector of inputs, and let
t(n) be the time required to compute P(m1, . . . , mn).
If
VKP ←VerPrep(sk, P), then the time required for EﬀVer(sk,
VKP , ∆, m, σ) is O(1), i.e., independent of n.
Notice that in our eﬃciency requirement, we do not include
the time needed to compute VKP . The reason is, since VKP
is independent of ∆, the same VKP can be re-used in many
veriﬁcations involving the same labeled program P but many
diﬀerent ∆.
In this sense, the cost of computing VKP is
amortized over many veriﬁcations of the same function on
diﬀerent data sets.
Application to Veriﬁable Computation on Outsourced
Data. A homomorphic MAC scheme with eﬃcient veriﬁ-
cation can be easily used to obtain a protocol for veriﬁable
delegation of computations on outsourced data, satisfying
the requirements (1)–(5) mentioned in Section 1. Below, we
sketch such a protocol between a client C and a server S:
Setup: C generates the keys (sk, ek) ←R KeyGen(1λ) for a
homomorphic MAC, sends ek to S and stores sk.
Data Outsourcing: to outsource a value m, C ﬁrst au-
thenticates m wrt. some multi-label L, i.e., σ ←R Auth(sk,
L, m), and then sends (m, L, σ) to the server. It is easy to
see that this phase satisﬁes the requirements of unbounded
storage (4) and function independence (5).
869Client’s Preparation: assume that C needs to evaluate a
labeled program P = (f, τ1, . . . , τn) on some of its out-
sourced data sets. In this preparation phase (oﬄine), the
client computes and stores VKP ←R VerPrep(sk, P) (inde-
pendently of any ∆).
Delegation: when the client wants to compute P on a data
set ∆ (online), it simply sends (P, ∆) to the server.3
Computation: to compute (P, ∆), where P = (f, τ1, . . . ,
τn), the server ﬁrst looks for the corresponding data (m1,
. . . , mn) and tags (σ1, . . . , σn) according to the labeling
previously sent by C. Next, S computes m = f (m1, . . . , mn)
and σ←Eval(ek, f, σ1, . . . , σn), and sends (m, σ) to C.
Veriﬁcation: given the result (m, σ) sent by S, the client
checks that m is the correct output of the multi-labeled
program (P, ∆) by running EﬀVer(sk, VKP , ∆, m, σ). By
the amortized eﬃciency property of the homomorphic MAC,
we obtain that C achieves amortized input-independent ef-
ﬁciency (3) – and thus also eﬃciency (2) – in verifying the
delegated computations.
Finally, from the unforgeability of the homomorphic MAC,
it is straightforward to see that the server cannot induce the
client to accept incorrect results (1).
4. UTILITIES
This section provides some technical tools that will be use-
ful to obtain our construction of homomorphic MACs with
eﬃcient veriﬁcation.
4.1 Hom. Evaluation of Arithmetic Circuits
In the next two sections, we describe algorithms for the ho-
momorphic evaluation of an arithmetic circuit f : Mn → M
over values deﬁned in some appropriate set J 6= M.
Homomorphic Evaluation over Polynomials. As a
ﬁrst example, we consider the case in which J is a ring
of polynomials. More formally, let Jpoly = Zp[x1, . . . , xm] be
the ring of polynomials in variables x1, . . . , xm over Zp. For
every ﬁxed tuple ~a = (a1, . . . , am) ∈ Zm
p , let φ~a : Jpoly →
Zp be the function deﬁned by φ~a(y) = y(a1, . . . , am) for
any y ∈ Jpoly. By the substitution property of polynomi-
als, φ~a is a homomorphism from Jpoly = Zp[x1, . . . , xm] to
Zp, i.e., ∀y1, y2 ∈ Jpoly it holds: φ~a(y1 + y2) = φ~a(y1) +
φ~a(y2) and φ~a(y1 · y2) = φ~a(y1) · φ~a(y2). By simple in-
duction, we then observe that for a given arithmetic cir-
cuit f : Zn
poly →
Jpoly such that ∀y1, . . . , yn ∈ Jpoly: φ~a( ˆf (y1, . . . , yn)) =
f (φ~a(y1), . . . , φ~a(yn)). The circuit ˆf is basically the same
as f , except that operations in Zp are replaced by the cor-
responding operations in Zp[x1, . . . , xm]. We formally write
the computation of ˆf as the algorithm PolyEval(m, f, y1, . . . ,
yn), for which the following property holds: for any homo-
morphism φ~a deﬁned by ~a = (a1, . . . , am) ∈ Zm
p , and for any
circuit f and any values y1, . . . , yn ∈ Jpoly:
p → Zp, there exists another circuit ˆf : J n
φ~a(PolyEval(m, f, y1, . . . , yn)) = f (φ~a(y1), . . . , φ~a(yn))
We remark that in our work we will use PolyEval only for f
of degree 2, and with m = 1 and m = 2.
3While in general the description of P may be large, here we
assume the case in which P has a succinct description, e.g.,
“daily variance of the air pollution levels at every 5 minutes”.
Hence, the cost of communicating P can, in fact, be ignored.
Homomorphic Evaluation over Bilinear Groups. As
a second example, we show how to homomorphically eval-
uate arithmetic circuits, of degree at most 2, over prime
order groups with bilinear maps. Let bgpp = (p, G, GT , e, g)
be the description of bilinear groups where G has prime or-
If we ﬁx a generator g ∈ G, then G and the ad-
der p.
ditive group (Zp, +) are isomorphic by considering the iso-
morphism φg(x) = gx for every x ∈ Zp. Similarly, by the
property of the pairing function e, we also have that GT
and the additive group (Zp, +) are isomorphic by consider-
ing φgT (x) = e(g, g)x. Since φg and φgT are isomorphisms
there also exist the corresponding inverses φ−1
: G → Zp
and φ−1
gT : GT → Zp, even though these are not known to be
eﬃciently computable.
g
For every arithmetic circuit f : Zn
p → Zp of degree at
most 2, we deﬁne GroupEval(f, X1, . . . , Xn) to be the algo-
rithm which homomorphically evaluates f with inputs in
G and output in GT in such a way that, for every tuple
(X1, . . . , Xn) ∈ Gn, and every such circuit f , we have that
GroupEval(f, X1, . . . , Xn) = e(g, g)f (x1,...,xn)
(1)
holds, where xi = φ−1
g (Xi), ∀i = 1, . . . , n.
Given a circuit f of degree at most 2, and given an n-tuple
of values (X1, . . . , Xn) ∈ Gn, GroupEval intuitively proceeds
as follows. It computes additions by using the group oper-
ation in G or in GT . To compute multiplications, it uses
the pairing function, e.g., R = e(R1, R2), thus “lifting” the
result to the group GT . By our assumption on the degree of
f , one can see that multiplication is well deﬁned. A more
formal description of GroupEval and a proof that it satisﬁes
Equation (1) are given in the full version.
4.2 Pseudorandom Functions with Amortized
Closed-Form Efﬁciency
Here we introduce one of most important technical tools for
our construction, that is the notion of pseudorandom func-
tions with amortized closed-form eﬃciency. This primitive
is an extension of closed-form eﬃcient PRFs proposed by
Benabbas et al. [9], and later reﬁned by Fiore and Gennaro
[22]. As we will show in Section 5, this new notion of PRFs
will be crucial for achieving the property of eﬃcient veriﬁ-
cation in our homomorphic MAC realization.
In a nutshell, closed-form eﬃcient PRFs [9] are deﬁned
like standard PRFs with the additional requirement of sat-
isfying the following eﬃciency property. Assume there exists
a computation Comp(R1, . . . , Rn, ~z) which takes random in-
puts R1, . . . , Rn and arbitrary inputs ~z, and runs in time
t(n, |~z|). Also, think of the case in which each Ri is gener-
ated as FK (Li). Then the PRF F is said to satisfy closed-
form eﬃciency for (Comp, ~L) if, by knowing the seed K, one
can compute Comp(FK(L1), . . . , FK (Ln), ~z) in time strictly
less than t. Here, the key observation is that in the pseudo-
random case all the Ri values have a shorter “closed-form”
representation (as function of K), and this might also allow
for a shorter closed-form representation of the computation.
Starting from the above considerations, we introduce a
new property for PRFs that we call amortized closed-form
eﬃciency. Our basic idea is to address computations Comp(R1,
. . . , Rn, ~z) of the above form, but then consider the case in
which all values Ri are generated as FK (∆, τi). Basically,
we interpret the PRF inputs Li as pairs of values (∆, τi),
all sharing the same ∆ component. Then, we informally
say that F satisﬁes amortized closed-form eﬃciency if it is
870possible to compute ℓ computations {Comp(FK(∆j , τ1), . . . ,
FK (∆j, τn), ~z)}ℓ
j=1 in time strictly less than ℓ · t. More de-
tailed deﬁnitions follow.
A PRF consists of two algorithms (KG, F) such that (1)
the key generation KG takes as input the security parameter
1λ and outputs a secret key K and some public parameters
pp that specify domain X and range R of the function, and
(2) the function FK (x) takes input x ∈ X and uses the secret
key K to compute a value R ∈ R. As usual, a PRF must
satisfy the pseudorandomness property. Namely, we say that
(KG, F) is secure if for every PPT adversary A we have that:
| Pr[AFK (·)(1λ, pp) = 1] − Pr[AΦ(·)(1λ, pp) = 1] | ≤ ǫ(λ)
where ǫ(λ) is negligible, (K, pp) ←R KG(1λ), and Φ : X →
R is a random function.
For any PRF (KG, F) we deﬁne amortized closed-form ef-
ﬁciency as follows.
Definition 3
(Amortized Closed-Form Efficiency).
Consider a computation Comp that takes as input n ran-
dom values R1, . . . , Rn ∈ R and a vector of m arbitrary
values ~z = (z1, . . . , zm), and assume that the computation of
Comp(R1, . . . , Rn, z1, . . . , zm) requires time t(n, m).
Let ~L = (L1, . . . , Ln) be arbitrary values in the domain
X of F such that each can be interpreted as Li = (∆, τi).
We say that a PRF (KG, F) satisﬁes amortized closed-form
eﬃciency for (Comp, ~L) if there exist algorithms CFEvaloﬀ
and CFEvalon
Comp,∆ such that:
Comp, ˜τ
1. Given ω←CFEvaloﬀ
Comp, ˜τ (K, ~z), we have CFEvalon
ω) = Comp(FK(∆, τ1), . . . , FK (∆, τn), z1, . . . , zm)
Comp,∆(K,
2. the running time of CFEvalon
Comp,∆(K, ω) is o(t).
We remark two important facts on our deﬁnition. First,
the computation of ω←CFEvaloﬀ
Comp, ˜τ (K, ~z) does not depend
on ∆, which means that the same value ω can be re-used in
CFEvalon