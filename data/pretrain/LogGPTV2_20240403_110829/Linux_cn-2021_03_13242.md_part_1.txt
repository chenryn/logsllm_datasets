---
author: Stephan Avenwedde
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4988
date: '2021-03-28 09:40:48'
editorchoice: false
excerpt: 在本教程中，教你如何设置和使用 Pythonic 来编程。它是一个图形化编程工具，用户可以很容易地使用现成的函数模块创建 Python 程序。
fromurl: https://opensource.com/article/20/4/python-crypto-trading-bot
id: 13242
islctt: true
largepic: /data/attachment/album/202103/28/093858qu0bh3w2sd3rh20s.jpg
permalink: /article-13242-1.html
pic: /data/attachment/album/202103/28/093858qu0bh3w2sd3rh20s.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 在本教程中，教你如何设置和使用 Pythonic 来编程。它是一个图形化编程工具，用户可以很容易地使用现成的函数模块创建 Python 程序。
tags:
- 加密货币
- 自动交易
- Python
thumb: false
title: 如何使用 Python 来自动交易加密货币
titlepic: true
translator: wyxplus
updated: '2021-03-28 09:40:48'
---
> 
> 在本教程中，教你如何设置和使用 Pythonic 来编程。它是一个图形化编程工具，用户可以很容易地使用现成的函数模块创建 Python 程序。
> 
> 
> 
![](/data/attachment/album/202103/28/093858qu0bh3w2sd3rh20s.jpg "scientific calculator")
然而，不像纽约证券交易所这样的传统证券交易所一样，有一段固定的交易时间。对于加密货币而言，则是 7×24 小时交易，这使得任何人都无法独自盯着市场。
在以前，我经常思考与加密货币交易相关的问题：
* 一夜之间发生了什么？
* 为什么没有日志记录？
* 为什么下单？
* 为什么不下单？
通常的解决手段是使用加密交易机器人，当在你做其他事情时，例如睡觉、与家人在一起或享受空闲时光，代替你下单。虽然有很多商业解决方案可用，但是我选择开源的解决方案，因此我编写了加密交易机器人 [Pythonic](https://github.com/hANSIc99/Pythonic)。 正如去年 [我写过的文章](https://opensource.com/article/19/5/graphically-programming-pythonic) 一样，“Pythonic 是一种图形化编程工具，它让用户可以轻松使用现成的函数模块来创建 Python 应用程序。” 最初它是作为加密货币机器人使用，并具有可扩展的日志记录引擎以及经过精心测试的可重用部件，例如调度器和计时器。
### 开始
本教程将教你如何开始使用 Pythonic 进行自动交易。我选择    币安    Binance  交易所的    波场    Tron  与    比特币    Bitcoin  交易对为例。我之所以选择这个加密货币对，是因为它们彼此之间的波动性大，而不是出于个人喜好。
机器人将根据    指数移动平均    exponential moving averages  （EMA）来做出决策。
![TRX/BTC 1-hour candle chart](/data/attachment/album/202103/28/094050ln73sss1s9st3ssf.png "TRX/BTC 1-hour candle chart")
*TRX/BTC 1 小时 K 线图*
EMA 指标通常是一个加权的移动平均线，可以对近期价格数据赋予更多权重。尽管移动平均线可能只是一个简单的指标，但我对它很有经验。
上图中的紫色线显示了 EMA-25 指标（这表示要考虑最近的 25 个值）。
机器人监视当前的 EMA-25 值（t0）和前一个 EMA-25 值（t-1）之间的差距。如果差值超过某个值，则表示价格上涨，机器人将下达购买订单。如果差值低于某个值，则机器人将下达卖单。
差值将是做出交易决策的主要指标。在本教程中，它称为交易参数。
### 工具链
将在本教程使用如下工具：
* 币安专业交易视图（已经有其他人做了数据可视化，所以不需要重复造轮子）
* Jupyter 笔记本：用于数据科学任务
* Pythonic：作为整体框架
* PythonicDaemon ：作为终端运行（仅适用于控制台和 Linux）
### 数据挖掘
为了使加密货币交易机器人尽可能做出正确的决定，以可靠的方式获取资产的 美国线   open-high-low-close chart （[OHLC](https://en.wikipedia.org/wiki/Open-high-low-close_chart)）数据是至关重要。你可以使用 Pythonic 的内置元素，还可以根据自己逻辑来对其进行扩展。
一般的工作流程：
1. 与币安时间同步
2. 下载 OHLC 数据
3. 从文件中把 OHLC 数据加载到内存
4. 比较数据集并扩展更新数据集
这个工作流程可能有点夸张，但是它能使得程序更加健壮，甚至在停机和断开连接时，也能平稳运行。
一开始，你需要    币安 OHLC 查询    Binance OHLC Query  元素和一个    基础操作    Basic Operation  元素来执行你的代码。
![Data-mining workflow](/data/attachment/album/202103/28/094051qdkqluhu7sqkus73.png "Data-mining workflow")
*数据挖掘工作流程*
OHLC 查询设置为每隔一小时查询一次 **TRXBTC** 资产对（波场/比特币）。
![Configuration of the OHLC query element](/data/attachment/album/202103/28/094051lwhwz6qyhg8zspg6.png "Configuration of the OHLC query element")
*配置 OHLC 查询元素*
其中输出的元素是 [Pandas DataFrame](https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html#dataframe)。你可以在 **基础操作** 元素中使用    输入    input  变量来访问 DataFrame。其中，将 Vim 设置为 **基础操作** 元素的默认代码编辑器。
![Basic Operation element set up to use Vim](/data/attachment/album/202103/28/094052xn23s2x4xoj24d6f.png "Basic Operation element set up to use Vim")
*使用 Vim 编辑基础操作元素*
具体代码如下：
```
import pickle, pathlib, os
import pandas as pd
outout = None
if isinstance(input, pd.DataFrame):
    file_name = 'TRXBTC_1h.bin'
    home_path = str(pathlib.Path.home())
    data_path = os.path.join(home_path, file_name)
    try:
        df = pickle.load(open(data_path, 'rb'))
        n_row_cnt = df.shape[0]
        df = pd.concat([df,input], ignore_index=True).drop_duplicates(['close_time'])
        df.reset_index(drop=True, inplace=True)
        n_new_rows = df.shape[0] - n_row_cnt
        log_txt = '{}: {} new rows written'.format(file_name, n_new_rows)
    except:
        log_txt = 'File error - writing new one: {}'.format(e)
        df = input
    pickle.dump(df, open(data_path, "wb" ))
    output = df
```
首先，检查输入是否为 DataFrame 元素。然后在用户的家目录（`~/`）中查找名为 `TRXBTC_1h.bin` 的文件。如果存在，则将其打开，执行新代码段（`try` 部分中的代码），并删除重复项。如果文件不存在，则触发异常并执行 `except` 部分中的代码，创建一个新文件。
只要启用了复选框    日志输出    log output ，你就可以使用命令行工具 `tail` 查看日志记录：
```
$ tail -f ~/Pythonic_2020/Feb/log_2020_02_19.txt
```
出于开发目的，现在跳过与币安时间的同步和计划执行，这将在下面实现。
### 准备数据
下一步是在单独的  网格   Grid  中处理评估逻辑。因此，你必须借助   返回元素    Return element  将 DataFrame 从网格 1 传递到网格 2 的第一个元素。
在网格 2 中，通过使 DataFrame 通过    基础技术分析    Basic Technical Analysis  元素，将 DataFrame 扩展包含 EMA 值的一列。
![Technical analysis workflow in Grid 2](/data/attachment/album/202103/28/094052xq7vemsqm9evasx9.png "Technical analysis workflow in Grid 2")
*在网格 2 中技术分析工作流程*
配置技术分析元素以计算 25 个值的 EMA。
![Configuration of the technical analysis element](/data/attachment/album/202103/28/094053x0wecdexbcc7idhy.png "Configuration of the technical analysis element")
*配置技术分析元素*
当你运行整个程序并开启    技术分析    Technical Analysis  元素的调试输出时，你将发现 EMA-25 列的值似乎都相同。
![Missing decimal places in output](/data/attachment/album/202103/28/094053c6poxlr4exxe4foc.png "Missing decimal places in output")
*输出中精度不够*
这是因为调试输出中的 EMA-25 值仅包含六位小数，即使输出保留了 8 个字节完整精度的浮点值。
为了能进行进一步处理，请添加 **基础操作** 元素：
![Workflow in Grid 2](/data/attachment/album/202103/28/094053w4u44j6wqz6fr3kh.png "Workflow in Grid 2")
*网格 2 中的工作流程*
使用 **基础操作** 元素，将 DataFrame 与添加的 EMA-25 列一起转储，以便可以将其加载到 Jupyter 笔记本中；
![Dump extended DataFrame to file](/data/attachment/album/202103/28/094054kc1y44yvcvgycnye.png "Dump extended DataFrame to file")
*将扩展后的 DataFrame 存储到文件中*
### 评估策略
在 Juypter 笔记本中开发评估策略，让你可以更直接地访问代码。要加载 DataFrame，你需要使用如下代码：
![Representation with all decimal places](/data/attachment/album/202103/28/094054s7ozuzh8ebzpeb9o.png "Representation with all decimal places")
*用全部小数位表示*
你可以使用 [iloc](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html) 和列名来访问最新的 EMA-25 值，并且会保留所有小数位。
你已经知道如何来获得最新的数据。上面示例的最后一行仅显示该值。为了能将该值拷贝到不同的变量中，你必须使用如下图所示的 `.at` 方法方能成功。
你也可以直接计算出你下一步所需的交易参数。
![Buy/sell decision](/data/attachment/album/202103/28/094054jnb1dc3caipaksf9.png "Buy/sell decision")
*买卖决策*
### 确定交易参数
如上面代码所示，我选择 0.009 作为交易参数。但是我怎么知道 0.009 是决定交易的一个好参数呢？ 实际上，这个参数确实很糟糕，因此，你可以直接计算出表现最佳的交易参数。