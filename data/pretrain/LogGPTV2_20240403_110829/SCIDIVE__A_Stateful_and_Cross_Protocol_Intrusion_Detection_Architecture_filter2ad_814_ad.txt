involved. Let the time of the last RTP packet arrival be T1
(before the fake BYE/REINVITE message arrival). Also, 
without loss of generality, let this message originate from 
the sender at time 0. Then T1 is the transport delay of this 
RTP packet. Further, let Tsip be the time of arrival of the 
SIP  message.  Let  T2  be  the  time  of  arrival  of  the  RTP 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:44 UTC from IEEE Xplore.  Restrictions apply. 
rtp
sip
sip
sip
N
sip
)
N
sip
.
rtpN
(cid:32)
20
(cid:32) 20
(cid:14)
(cid:16)
G
(
by
(cid:16)
sipT
(cid:14)
 ,  where 
rtpN and
the 
given 
(cid:14)
N
packet,  which  originated  20  ms  after  the  previous  RTP 
packet.  We  assume  that  the  fake  SIP  message  was 
generated after the 1st RTP packet but before the 2nd RTP 
packet.  When  the  SIP  message  is  received,  the  IDS 
system starts looking for RTP packets for a total duration 
of  “m”  milliseconds.  Obviously,  T1,  T2  and  Tsip  are 
random  variables  and  m  is  a  fixed  value.  The  detection 
delay  D  is  a  function  of  these  four  parameters  as 
(cid:32) 2
(cid:16)
T
TD
and
2
(cid:32)
T
sipN are  the  random 
G
variables  associated  with  the  network  delay  for  each 
packet.  While  the  second  RTP  packet  is  generated  20 
milliseconds  after  the  origin,  the  fake  SIP  message  is 
two  RTP  packets  with  a 
generated  between 
distribution 
.
D
sipG
Therefore,
.  Given  the 
distributions  of  these  random  variables,  it  is  possible  to 
compute  the  detection  delay  distribution.  Under  the 
simplest  of  assumptions,  where  the  fake  SIP  message  is 
generated  with  a  uniform  distribution  in  (0,20),  and  the 
network delay is assumed to be independent and identical 
for  all  packets,  the  expected  detection  delay  is  10 
milliseconds, which is half of the RTP packet generation 
period.   
(cid:137) Probability  of  Missed  Alarm:  Since  the  detection 
depends  on  monitoring  after  a  SIP  message  arrival  and 
since  this  monitoring  interval  is  necessary  finite  (m), 
there is a probability that the IDS system may not detect 
the  intrusion.  For  instance,  if  the  subsequent  RTP 
packet(s) from the original sender are lost (somewhere in 
the  network)  and  no  RTP  packet  arrives  within  the 
monitoring  interval,  then  no  alarm  will  be  raised. 
Referring to the above figure, the probability is given by 
Pf = Pr{T2>Tsip+m} = Pr{Nrtp-Gsip-Nsip > m-20}.
(cid:137) Probability  of  False  Alarm:  Although  rare,  it  is 
possible  for  a  valid  BYE  message  to  arrive  before  the 
RTP packet if, for instance, they take a different route, as 
shown 
the 
following  figure. 
In  this  case,  the 
IDS  system  will 
raise 
false 
alarm. In order to 
compute 
this 
probability,  we 
assume 
that  the 
sender  generated 
the  valid  SIP  BYE/REINVITE  immediately  (with  zero 
delay)  after  it  has  sent  out  the  last  RTP  packet.  In  that 
is  given  as 
case, 
false  alarm  probability 
the 
in 
a 
P
f
(cid:32)
Pr{
N
rtp
distribution  function  of 
sip
(cid:31)
N
}
.  If  the  density  function  and 
sipN is  assumed  to  be 
rtpN  and 
)(tFN
)(t
and
f N
identical and independent denoted by 
respectively, then 
m
(cid:179)
0
tF
)(
N
f
N
t
)(
dt
.
5 Related Work 
Currently,  we  are  not  aware  of  any  IDS  dedicated  to 
VoIP systems. One possibility is to use a general purpose 
network  IDS  like  Snort  [10]  for  the  purpose.  Such  a 
network based IDS would sniff the  packets  arriving  at  a 
host and attempt to find predefined patterns indicating an 
attack  in  the  packets.  One  potential  problem  of  this 
approach is that if the target pattern is fragmented across 
multiple  packets,  then  the  IDS  will  miss  it.  Seeing  this 
problem,  Snort  has  an  IP  fragmentation-reassembly 
module which assembles fragmented IP packets. Also, for 
TCP packets, it has a stream4 reassembly module that can 
aggregate TCP packets within the same TCP session (like 
a FTP session) into a conglomerate pseudo packet. After 
this, the same pattern-matching algorithm is employed on 
the pseudo packet. 
The  matching  infrastructure  provided  by  Snort  is 
versatile  and  has  been  proven  to  be  very  effective  for 
dealing with most network based intrusions. However, for 
VoIP  applications,  there  are  two  drawbacks  to  using 
Snort  directly:  First,  no  reassembly  functionality  is 
available for grouping UDP packets that belong to a VoIP 
session.  Second,  Snort’s  detection  is  session  unaware.  It 
does provide stateful detection for some TCP applications 
like  HTTP  and  FTP.  However,  there  is  currently  no 
infrastructure  that  can  help  in  processing  stateful  VoIP 
sessions.
The  WebSTAT  system  [1]  provides  stateful  intrusion 
detection for web servers. It builds on STAT [11] which 
supports  the  modeling  of  multi-step,  complex  attacks  in 
terms  of  states  and  transitions.  WebSTAT  operates  on 
multiple  event  streams,  and  is  able  to  correlate  both 
network-level  and  operating  system-level  events  with 
entries  contained  in  server  logs.  WebSTAT  uses  some 
language  extensions  specific  to  web  server  attacks,  and 
event  generators  that  can  read  web  server  logs,  parse 
them  and  create  events  in  a  commonly  understandable 
form. However, the work is essentially an alert correlation 
engine and does not show evidence of using considerable 
state  across  protocols.  Also,  the  state  is  gathered  from 
vertically  layered  elements  in  the  protocol  stack  which 
operate sequentially (e.g. a web server and the OS), while 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:44 UTC from IEEE Xplore.  Restrictions apply. 
SCIDIVE  performs  state  aggregation  across  concurrently 
executing application level protocols. 
There  has  been  research  done  on  alert  correlation 
methods  [[15],[16],[17]].  The  approach  has  been  to 
consider  elementary  alerts  and  correlate  them  based  on 
various  properties,  such  as  pre-conditions  and  post-
conditions,  to  come  up  with  aggregate  alerts.  These  can 
be  adapted  to  provide  the  functionality  in  SCIDIVE.
However,  the  modifications  to  be  made  are  non-trivial 
(e.g., to map the alert to a protocol and reason based on 
the  protocol).  The  end  result  would  be  a  system  very 
different from the starting system. Also, there is nothing 
to  preclude  SCIDIVE  from  using  an  aggregate  alert  from 
one of these systems as an event in its structure. 
6 Conclusions
In  this  paper  we  have  presented  the  design  and 
implementation  of  an  intrusion  detection  system  called 
SCIDIVE  for  protecting  VoIP  systems.  The  protected 
system  uses  multiple  application  protocols  for  signaling 
and  data  transport,  of  which  SIP  and  RTP  are  used 
respectively  for  the  demonstration.  SCIDIVE introduces 
two important abstractions for detection in VoIP systems 
–  stateful  detection  and  cross-protocol  detection.  In  the 
former, state can be assembled from multiple packets and 
the  aggregated  state  can  be  used  in  the  rule-matching 
engine. Cross protocol detection denotes the functionality 
of  matching  rules  that  span  multiple  protocols.  The 
capability  of  the  system  is  demonstrated  through  four 
kinds of attacks.  
a 
necessitate 
In  the  future,  we  plan  to  investigate  cooperative 
detection between multiple SCIDIVE components. We plan 
to investigate where the components should be placed and 
what kinds of state needs to be exchanged between them. 
A challenge is to design the appropriate protocol that does 
not overwhelm the system with control messages from the 
detectors.  This  may 
hierarchical 
decomposition of the system with different layers looking 
at different levels of abstraction for the system. We plan 
to  evaluate  the  effectiveness  and  accuracy  of  SCIDIVE
through simulated attacks. This is a difficult enough task 
for systems with widely known exploits. It is even more 
so  for  VoIP  systems  that  do  not  have  widely  publicized 
attack  scenarios.  We  anticipate  that  the  accuracy  of  the 
detection will be a function of the input rule base as well 
as the design of the SCIDIVE components. The efficiency 
of  the  algorithm  for  creating  events  from  footprints  and 
matching  events  against  the  rule  set  will  affect  the 
detection latency in addition to the structure of the rules. 
References
[1] G. Vigna, W. Robertson, V. Kher, R.A. Kemmerer, “A 
Stateful Intrusion Detection System for World-Wide Web 
Servers,” In Proceedings of the 19th Annual Computer 
Security Applications Conference (ACSAC ’03), 
December ‘03. 
ITU-T, “Packet-based multimedia communications 
systems,” Recommendation H.323, February 1998. 
[2]
[3] M. Handley et. al.,“SIP: Session Initiation Protocol,” RFC 
2543, March 1999. 
[4] H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson, 
"RTP: A Transport Protocol for Real-Time Applications," 
IETF, RFC 3550, July 2003,Available at: 
http://www.ietf.org/rfc/rfc3550.txt?number=3550.
[5] M. Arango et. al., “Media Gateway Control Protocol 
(MGCP) Version 1.0,” RFC 2705, October 1999. 
[6] F. Cuervo et. al., “Megaco Protocol Version 1.0,” RFC 
[7]
[8]
3015, November 2000. 
ITU-T, “Call Signaling protocols and media stream 
packetization for packet-based multimedia communication 
systems,” Recommendation H.225.0, February 1988. 
ITU-T, “Control protocol for multimedia communication,” 
Recommendation H.245, September 1988. 
[9] Yu-Sung Wu, Bingrui Foo, Yongguo Mei, and Saurabh 
Bagchi, “Collaborative Intrusion Detection System (CIDS): 
A Framework for Accurate and Efficient IDS,” In 
Proceedings of the 19th Annual Computer Security 
Applications Conference (ACSAC ’03), December ‘03. 
[10] M. Roesch, “Snort – Lightweight Intrusion Detection for 
Networks,” In Proceedings of USENIX LISA’99, 
November 1999. 
[11] S.T. Eckmann, G. Vigna, and R.A. Kemmerer, “STATL: 
An Attack Language for State-based Intrusion Detection,” 
Journal of Computer Security, 10(1/2):71–104, 2002. 
[12] CERT Coordination Center, Carnegie Mellon Software 
Engineering Institute, “Vulnerabilities, Incidents and 
Fixes.”
[13] “Prelude Hybrid IDS,” At: http://www.prelude-ids.org
[14] IBM Software, “IBM Tivoli Intrusion Manager,” At: 
http://www.ibm.com/software/tivoli/products/intrusion-
mgr/
[15] P. A. Porras AND P. G. Neumann, “EMERALD: Event 
Monitoring Enabling Responses to Anomalous Live 
Disturbances,” in Proc. 20th National Information Systems 
Security Conference, October 1997, pp. 353-365. 
[16] F. Cuppens and A. Miege, “Alert Correlation in a 
Cooperative Intrusion Detection Framework”, In IEEE 
Symposium on Security and Privacy, Oakland, USA, 2002. 
[17] Peng Ning, Yun Cui, Douglas S. Reeves, “Constructing 
Attack Scenarios through Correlation of Intrusion Alerts”, 
In Proceedings of the ACM CCS 2002, pages 245-254, 
November 2002. 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:44 UTC from IEEE Xplore.  Restrictions apply.