return (skid, spk)
// ID removes sig. key
rem-SigK(ID, skid)
req SK-ID[skid] = ID
req skid ∈ SK-St[ID]
req skid /∈ HG.SKsUsed(ID)
spk ← SK-PK[skid]
𝑠[ID] ← Rem-SK(𝑠[ID], spk)
if ¬Del[ID]
SK-St[ID] −← skid
SK-Tr[ID] +← skid
// ID stores sig. key of ID′
get-SK(ID, ID′, skid)
req SK-ID[skid] = ID′
spk ← SK-PK[skid]
𝑠[ID] ← Get-SK(𝑠[ID], ID′, spk)
SK-St[ID] +← skid
// ID generates new key bundle
gen-new-KB(ID, skid)
req SK-ID[skid] = ID
req skid ∈ SK-St[ID]
spk ← SK-PK[skid]
(𝑠[ID], kb) ← Gen-KB(𝑠[ID], spk)
(wpk, ., .) ← kb
wkid ← idCtr++
WK-ID[wkid] ← ID
WK-PK[wkid] ← wpk
WK-St[ID] +← wkid
WK-SK[wkid] +← skid
return (wkid, kb)
Figure 2: PKI-related oracles of the security game for secure
group-messaging schemes. The compatibility functions are de-
scribed in the accompanying text; a formal description is pro-
vided in Section D.
3.2.4 PKI Oracles. The PKI oracles offer the following functionality
to attacker A:
• New signature keys: Have a party ID create a new signature
key pair. This essentially boils down to ID running algorithm
Gen-SK, which outputs a signature public key spk. The SGM
game then generates an skid for spk and updates arrays
SK-ID, SK-PK, and SK-St correspondingly.
• Remove signature keys: Have a party ID delete a signature
public key spk, identified by the corresponding skid. In order
for a call to this oracle to be legal, skid must correspond to an
spk (a) currently stored by ID and (b) not used by ID in either
the current epoch or any pending proposals or epochs.7 The
oracle simply runs Rem-SK on spk and subsequently updates
arrays SK-ID, SK-PK, and SK-St to reflect the removal of
spk. Additionally, if ID does not delete old values, i.e., if
Del[ID] = false, skid is added to SK-Tr[ID].
• Store new signature key: This oracle lets the attacker instruct
a party ID to store signature public key, identified by its skid,
of a party ID′. The oracle ensures that SK-ID[skid] = ID′,
7Pending epochs are child epochs of V-Pt[ID]; they are explained in more detail later
on.
i.e., that skid was really created by ID′. This models the fact
that the bindings between signature keys and identities are
incorruptible.
• Generate new key bundle: The attacker can make a party ID
create a new key bundle and store it on the PKI server. To
that end, A specifies the skid of the signature public key spk
that is supposed to be used inside the key bundle. The call is
only valid if the key pair corresponding to skid is currently
stored by ID.
The oracle runs Gen-KB on spk. The first component of the
newly generated key bundle is a new welcome key wpk.
Thus, the security game generates a new wkid associated
with wpk and updates arrays WK-ID, WK-PK, and WK-St
accordingly. The oracle also binds wkid to skid.
• Store new key bundle: This oracle lets the attacker instruct a
party ID to store a key bundle kb = (wpk, spk, sig) belonging
to another party ID′. Two conditions must be satisfied for
the oracle call to be valid:
(1) The signature public key spk must belong to ID′, i.e.,
spk = SK-PK[skid] for some skid with SK-ID[skid] = ID′.
This models the fact that the long-term secrets binding
signature public keys to identities are incorruptible.
(2) The public key spk must be stored by ID.
If the oracle call is valid, algorithm Get-KB is run on ID′ and
kb. If the secret key corresponding to spk has not been leaked,
i.e., skid /∈ SK-Lk, then Get-KB must only accept the key bun-
dle if wpk exists and is bound to spk, i.e., WK-SK[wkid] =
skid. If Get-KB outputs ok, skid /∈ SK-Lk, but WK-SK[wkid] ̸=
skid, then the adversary has attempted to create a forgery
against the signing key with ID skid, and if it is success-
ful, it wins the game. If wpk is adversarially generated (i.e.,
wkid = ⊥), the game generates a new wkid for wpk, updates
WK-PK accordingly, and immediately marks wkid as leaked.
Finally, ID’s (symbolic) contact list is updated, by adding the
pair (wkid, skid) to the end of queue CL-KB[ID, ID′].
3.2.5 Main oracles. The main oracles of the SGM game are split
into four figures: oracles related to (i) group creation and propos-
als (Figure 3), (ii) commits (Figure 4), (iii) sending, receiving and
corruptions (Figure 5). The validity of all oracle calls is checked
by the corresponding compatibility functions (cf. Section D in the
Appendix.).
Group creation. The attacker can instruct a party ID to create a
new group by calling the group-creation oracle (Figure 3); such a
call must also specify the skid of the signature key under which ID
initially signs their messages, as well as the wkid of the welcome
key material. A call to the group creation oracle is valid if (i) ID is
not in a group yet, (ii) skid, wkid, are currently stored by ID, and
(iii) wkid is signed under skid.
The bookkeeping is updated as follows: A call is made to the
HG.create(ID, skid) method. This causes HG to create a node 𝑣 =
(.vid ← idCtr++, .orig ← ID, .data ← skid, .pid ← ⊥) as a child
of 𝑣root and return vid = 𝑣.vid. Then, the bad-randomness array
is filled (depending on whether A specified coins 𝑟 or not), ID’s
pointer is set to vid, and V-St[ID] is set to a queue containing
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1468only (vid, true), where the second component records that from
the information ID currently stores about vid, one can compute
information about (future) child states of vid.
• (remove proposals) the target ID′ is a group member;
• (update proposals) the skid with which ID is supposed to sign
is currently stored by ID.
// ID creates group; signs with skid
create-group(ID, skid, wkid, 𝑟)
req *compat-create(ID, skid, wkid)
𝑠[ID] ← Create(𝑠[ID], SK-PK[skid], WK-PK[wkid]; 𝑟)
vid ← HG.create(ID, skid)
BR[vid] ← 𝑟 ̸= ⊥
V-Pt[ID] ← vid
V-St[ID] ← [(vid, true)]
return vid
// ID proposes to add ID′
prop-add-user(ID, ID′)
req *compat-prop(add, ID, ID′,⊥)
(𝑠[ID], 𝑃) ← Add(𝑠[ID], ID′)
(wkid′, skid′) ← CL-KB[ID, ID′].deq
pid ← Props.new(add, ID, (ID′, wkid′, skid′))
PM[pid] ← 𝑃
return (pid, 𝑃)
// ID proposes to remove ID′
prop-rem-user(ID, ID′)
req *compat-prop(rem, ID, ID′,⊥)
(𝑠[ID], 𝑃) ← Remove(𝑠[ID], ID′)
pid ← Props.new(rem, ID, ID′)
PM[pid] ← 𝑃
return (pid, 𝑃)
// ID proposes update
prop-up-user(ID, skid, 𝑟)
req *compat-prop(upd, ID,⊥, skid)
(𝑠[ID], 𝑃) ← Update(𝑠[ID], SK-PK[skid]; 𝑟)
pid ← Props.new(upd, ID, skid)
PM[pid] ← 𝑃
return (pid, 𝑃)
// Proposal pid delivered to ID
dlv-PM(ID, pid)
req *compat-dlv-PM(ID, pid)
(𝑠[ID], PI) ← Proc-PM(𝑠[ID], PM[pid])
if ¬Props.checkPI(pid, PI)
P-St[ID] +← pid
win
// Proposal 𝑃′ injected to ID
inj-PM(ID, 𝑃′)
req *compat-inj-PM(ID, 𝑃′)
(𝑠[ID], PI) ← Proc-PM(𝑠[ID], 𝑃′)
vid ← V-Pt[ID]
IDO ← PI.orig
req ¬(*auth-compr(vid)
if PI ̸= ⊥
win
∧ *SK-compr(vid, IDO))
Figure 3: Group-creation and proposal-related oracles of the
security game for secure group-messaging schemes. The com-
patibility functions are described in the accompanying text; a
formal description is provided in Section D of the Appendix.
Creating proposals. The oracles prop-{add, rem, up}-user (Fig-
ure 3) allow the attacker to instruct a party ID to issue add/re-
move/update proposals. Calls to these proposal oracles are valid if
ID is a group member and:
• (add proposals) the target ID′ is not a group member already
and ID has initial key material for ID′ stored;
Note that the last bullet means that if a party wishes to change its
active signature key, they must have generated one and registered
it with the PKI before issuing the corresponding proposal.
Bookkeeping is updated by calling Props.new(op, ID, data), which
records proposal data 𝑝 = (.pid ← idCtr++, .vid ← V-Pt[ID], .op ←
op, .orig ← ID, .data ← data), where op ∈ {add, rem, upd} is
the proposal type and where data stores (add proposals) data =
(ID′, wkid′, skid′), where (wkid′, skid′) is the head of the contact
list CL-KB[ID, ID′]; (remove proposals) data = ID′; (update pro-
posals) data = skid. Furthermore, the proposal message 𝑃 output
by corresponding proposal algorithm (Add, Remove, or Update) is
stored in the communication array PM for proposal messages.
Delivering and injecting proposals. There are two oracles for getting
a proposal to a party ID (Figure 3): The first one, dlv-PM, is for
honest proposal delivery. The attacker specifies a pid—which must
belong to the epoch ID is currently in—and the corresponding
proposal is fed to the SGM algorithm Proc-PM. Proc-PM is required
to output proposal information PI, which is checked by function
Props.checkPI. Function checkPI ensures that PI correctly identifies
the type, the originator, as well as the data of the proposal.8 The
last action performed by the oracle is to update P-St[ID] to include
pid, indicating that ID now stores the new proposal.
The second oracle, inj-PM, is used by A to inject proposals to a
party ID. More precisely, A is allowed to submit proposals 𝑃′ that
(a) either belong to an epoch different from vid := V-Pt[ID] or (b)
are completely made up (i.e., there exists no pid with PM[pid] = 𝑃′).
A call to this second oracle is only allowed if the adversary is not
currently able to forge messages for epoch vid. This is the case if
either the key material used to authenticate in vid is compromised
(*auth-compr(vid)) or if the signing key used by the supposed
originator IDO of the proposal (as determined by the output of
Proc-PM) is compromised (*SK-compr(vid, IDO)). The functions
*auth-compr and *SK-compr are two of the safety predicates men-
tioned above.
Creating commits. The commit-related oracles (Figure 4) deal with
commits and delivery of commit and welcome messages.
In order to have a party ID create a commit based on a set of
proposals (with IDs) pid, the attacker calls the commit oracle. The
specified pid must be a subset of all proposals currently stored
by ID, and all proposals must belong to ID’s current epoch. In
addition, a (rather permissive) sensibility check is run on the vector
of proposal specified by pid: the proposals are processed in the
given order (changing the group roster accordingly), and for each
proposal it is checked whether the originator would be in the group
and, additionally, whether (add proposal) the target would be in the
group; (remove proposal) the target would not be in the group.
Subsequently, the SGM algorithm Commit is run on the given
set of proposals, which results in an epoch ID 𝐸, a vector of wel-
come messages W, and a commit message 𝑇 being output. Book-
keeping calls HG.commit(ID, pid), which creates a new HG node
8Of course, checkPI checks that PI contains the actual welcome and signature keys
(and not wkid and skid).
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1469𝑣 = (.vid ← idCtr++, .orig ← ID, .data ← ⊥, .pid ← pid), as a
child of ID’s current epoch V-Pt[ID] and returns vid = 𝑣.vid. Then,
the bad-randomness array is filled (depending on whether A spec-
ified coins 𝑟 or not), and 𝐸 is stored in array Ep-ID. Finally, the
commit messages (for current group members) are stored in array
CM, and the welcome messages (for new group members) in WM.
// ID commits proposals pid
commit(ID, pid, 𝑟)
req *compat-commit(ID, pid)
(𝑠[ID], 𝐸, W,𝑇 ) ← Commit(𝑠[ID], PM[pid]; 𝑟)
vid ← HG.commit(ID, pid)
BR[vid] ← 𝑟 ̸= ⊥
Ep-ID[vid] ← 𝐸
for ID′ ∈ HG.roster(V-Pt[ID])
CM[ID′, vid] ← 𝑇
for ID′ ∈ Props.addedIDs(pid)
WM[ID′, vid] ← W[ID′]
// Control msg. 𝑇′ injected to ID
inj-CM(ID,𝑇′)
req *compat-inj-CM(ID,𝑇′)
(𝑠[ID], GI) ← Proc-CM(𝑠[ID],𝑇′)
vid ← V-Pt[ID]
IDO ← GI.orig
req ¬(*auth-compr(vid)
∧ *SK-compr(vid, IDO))
if GI ̸= ⊥
win
// Welcome msg. delivered to ID
dlv-WM(ID, vid)
win
req *compat-dlv-WM(ID, vid)
𝑊 ← WM[ID, vid]
(𝑠[ID], GI) ← Proc-WM(𝑠[ID],𝑊 )
if ¬HG.checkGI(vid, GI)
V-Pt[ID] ← vid
V-St[ID] ← [vid]
wkid ← HG.addedWK(ID, vid)
if ¬Del[ID]
WK-St[ID] −← wkid
WK-Tr[ID] +← wkid
// Welcome msg. 𝑊 ′ injected to ID
inj-WM(ID,𝑊 ′)
req *compat-inj-WM(ID,𝑊 ′)
(𝑠[ID], GI) ← Proc-WM(𝑠[ID],𝑊 ′)
𝐸 ← GI.epID
req ∃ vid : Ep-ID[vid] = 𝐸
IDO ← GI.orig
req ¬(*auth-compr(vid)
∧ *SK-compr(vid, IDO))
if GI ̸= ⊥
win
return vid
// Control msg. delivered to ID
dlv-CM(ID, vid)
req *compat-dlv-CM(ID, vid)
𝑇 ← CM[ID, vid]
(𝑠[ID], GI) ← Proc-CM(𝑠[ID],𝑇 )