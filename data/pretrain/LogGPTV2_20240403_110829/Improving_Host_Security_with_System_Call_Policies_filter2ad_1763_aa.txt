# Improving Host Security with System Call Policies
**Author:** Niels Provos  
**USENIX Association**  
**Proceedings of the 12th USENIX Security Symposium**  
**Washington, D.C., USA**  
**August 4–8, 2003**  
**© 2003 by The USENIX Association**  
**Phone: 1 510 528 8649**  
**FAX: 1 510 548 5738**  
**THE ADVANCED COMPUTING SYSTEMS ASSOCIATION**  
**All Rights Reserved**  
**Email: [PI:EMAIL](mailto:PI:EMAIL)**  
**For more information about the USENIX Association: [WWW: http://www.usenix.org](http://www.usenix.org)**  
**Rights to individual papers remain with the author or the author's employer. Permission is granted for noncommercial reproduction of the work for educational or research purposes. This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.**

## Abstract
This paper introduces a system that eliminates the need to run programs in privileged process contexts. Using our system, programs can run unprivileged but may execute certain operations with elevated privileges as determined by a configurable policy, thus eliminating the need for setuid or sgid binaries. We present the design and analysis of the "Systrace" facility, which supports fine-grained process confinement, intrusion detection, auditing, and privilege elevation. Systrace also facilitates the often difficult process of policy generation, allowing policies to be generated automatically during a training session or interactively during program execution. These policies describe the desired behavior of services or user applications at the system call level and are enforced to prevent operations that are not explicitly permitted. We demonstrate that Systrace is efficient and does not impose significant performance penalties.

## 1. Introduction
Computer security is increasingly important as more business is conducted over the Internet. Despite decades of research and experience, we still struggle to create secure computer systems or even measure their security effectively. It is generally accepted that applications will always contain exploitable bugs that may lead to unauthorized access [4]. Adversaries can exploit vulnerabilities both locally and remotely. To improve the security of a computer system, we layer different security mechanisms, hoping that one of them will fend off a malicious attack. These layers may include firewalls to restrict network access, operating system primitives like non-executable stacks, and application-level protections like privilege separation [30]. In theory and practice, security increases with the number of layers that need to be circumvented for an attack to succeed.

Firewalls can prevent remote logins and restrict access, for example, to a web server only [12]. However, if an adversary successfully exploits a bug in the web server and gains its privileges, they may use these privileges to launch further attacks and gain even more privileges. With local access to a system, an adversary may obtain root privileges by exploiting setuid programs [5, 11], using localhost network access, or special system calls [8].

To recover quickly from a security breach, it is crucial to detect intrusions and maintain audit trails for post-mortem analysis. Although many intrusion detection systems analyze network traffic [27] or host system activity [21] to infer attacks, a careful intruder can often evade them [31, 36]. Instead of detecting intrusions, we may try to confine the adversary and limit the damage they can cause. For file systems, access control lists (ACLs) [15, 32] allow us to limit who can read or write files. Even though ACLs are more versatile than the traditional Unix access model, they do not provide complete confinement and are difficult to configure.

We observe that the only way to make persistent changes to the system is through system calls, which are the gateway to privileged kernel operations. By monitoring and restricting system calls, an application can be prevented from causing harm. Solutions based on system call interposition have been developed in the past [20, 24]. System call interposition allows these systems to detect intrusions as policy violations and prevent them while they are happening. However, specifying an accurate policy remains a challenge.

This paper presents Systrace, a solution that efficiently confines multiple applications, supports multiple policies, interactive policy generation, intrusion detection and prevention, and can be used to generate audit logs. Furthermore, we introduce a novel approach called privilege elevation, which eliminates the need for setuid or setgid binaries. We discuss the design and implementation of Systrace and show that it is an extensible and efficient solution to the host security problem.

The remainder of the paper is organized as follows. Section 2 discusses related work. Section 3 provides further motivation for our work. Section 4 presents the design of Systrace, and Section 5 discusses its implementation. We present an analysis of the system in Section 6. In Section 7, we provide a detailed performance analysis. Section 8 discusses future work, and Section 9 concludes the paper.

## 2. Related Work
Capabilities [26] and access control lists (ACLs) [15, 32] extend the traditional Unix access model to provide finer-grained controls, but they do not prevent untrusted applications from causing damage. Instead, we can use mechanisms based on system call interception or system call interposition to prevent damage from successful intrusions.

Janus, developed by Goldberg et al. [20], is one of the first system call interception tools. It uses the ptrace and /proc mechanisms. Wagner states that ptrace is not a suitable interface for system call interception, as race conditions in the interface allow an adversary to completely escape the sandbox [37]. The original Janus implementation has several drawbacks: applications are not allowed to change their working directory or call chroot because Janus cannot keep track of the application’s changed state. Janus has evolved significantly over time, and its latest version uses a hybrid approach similar to Systrace to get direct control of system call processing in the operating system [18].

One particularly difficult problem in application confinement is symlinks, which can redirect filesystem access almost arbitrarily. Garfinkel introduces safe calling sequences that do not follow any symlinks [18]. This approach uses an extension to the open system call specific to the Linux operating system but breaks any application that accesses filenames containing symlinks. Systrace solves this problem using filename normalization and argument replacement. Currently, Janus does not address intrusion detection, auditing, or policy generation.

Jain and Sekar [24] offer another comprehensive treatment of system call interposition. On some systems, their implementation is based on ptrace and suffers from the problems mentioned above. Additionally, they do not address naming ambiguities that may result in policy circumvention. Because C++ is used as their policy language, creating comprehensive policies is difficult. Systrace, on the other hand, supports automatic and interactive policy generation, allowing us to create policies quickly even in very complex environments.

Other systems that use mechanisms like system call interception include BlueBox [10], Cerb [14], Consh [2], MAPbox [1], and Subterfugue [13].

Peterson et al. present a general-purpose system call API for confining untrusted programs [28]. The API is flexible but has no provisions for recording audit trails or intrusion detection. Furthermore, specifying security policies is labor-intensive as the sandbox needs to be programmed into applications.

Domain Type Enforcement (DTE) [3, 38] is a kernel-level approach to restrict system access for all processes depending on their individual domains. A complete DTE implementation requires extensive changes to the operating system and does not automatically extend to new subsystems. Because policies are locked down on system start, users cannot create individual policies. In contrast to Systrace, DTE domains do not differentiate between users. We believe that system call interposition offers higher flexibility, allowing us to design and create a simple system that also addresses policy generation, audit trails, intrusion detection, etc.

The security architecture for the Flask microkernel emphasizes policy flexibility and rejects the system call interception mechanism, claiming inherent limitations that restrict policy flexibility [34]. Instead, the Flask system assigns security identifiers to every object and employs a security server for policy decisions and an object server for policy enforcement. However, Systrace uses a hybrid design that allows us to overcome the traditional limitations of system call interception; see Section 6.

SubOS [23] takes a similar approach based on object labeling to restrict access to the system. Depending on their origin, objects are assigned sub-user identifiers. A process that accesses an object inherits its sub-user ID and corresponding restrictions. As a result, a process subverted by a malicious object can cause only limited damage. In practice, there are only a few applications that can be subverted in this way, and enforcing security policies for these applications is sufficient to prevent malicious data from causing damage.

Forrest et al. analyze system call sequences to discriminate between processes [16]. Their work is extended by Hofmeyer et al. to achieve intrusion detection by recording the system calls that an application executes and comparing the recorded sequences against a database of good sequences [21]. Abnormal sequences indicate an ongoing intrusion. The training process that collects good system call sequences is similar to the automatic policy generation feature of Systrace.

Wespi et al. further extend this approach by using variable-length patterns to match audit events [39]. Although analyzing system call or audit sequences is an effective mechanism to detect intrusions, it does not help to prevent them. Recent research shows that mimicry attacks can evade intrusion detection systems based on system call sequences [35, 36]. Systrace not only detects such intrusions but can also prevent them or at least limit the damage they can cause. Furthermore, evasion attacks are not possible, as discussed in Section 6.

## 3. Motivation and Threat Model
Most applications running on computer systems are too complex and complicated to trust: web browsers, name servers, etc. Even with access to the source code, it is difficult to reason about the security of these applications. They might harbor malicious code or contain bugs that are exploitable by carefully crafted input. Because it is not possible to find all vulnerabilities, we assume the existence of programming errors known to the adversary that they can use to gain unauthorized access to the system.

We limit the impact an adversary can have on the system by restricting the operations an application is allowed to execute. The observation that changes relevant to security are performed via system calls makes the enforcement of restrictions at the system call level a natural choice.

An application is confined by a set of restrictions expressed by a security policy. Defining a correct policy is difficult and not possible without knowing all possible code paths that an uncompromised application may take. Therefore, we require the policy language to be intuitive yet expressive. It should be possible to generate policies without complete knowledge of an application.

We can use the security policy as a specification that describes the expected behavior of an application. When monitoring the operations an application attempts to execute, any deviation from the specified policy indicates a security compromise [25]. To further facilitate forensic analysis of an intrusion, we also wish to generate an audit log of previous operations related to the application.

Experience shows that adversaries escalate their privileges by abusing setuid or setgid programs [5]. These programs are executed by the operating system with different privileges than the user starting them. Although increasing privileges is often necessary for correct operation, the setuid model is too coarse-grained. We aim to provide a fine-grained model that eliminates the need for setuid binaries and integrates a method to elevate privilege into a policy language.

Systrace realizes these goals and is an effective improvement in host security that limits the damage an adversary can cause by exploiting application vulnerabilities. The next section discusses the design of Systrace.

## 4. Design
There are several approaches for implementing system call interposition. We can use existing interception mechanisms to create an implementation completely in user space, implement the system entirely at the kernel level, or choose a hybrid of both. A user space implementation is often more portable but may suffer a larger performance impact. Furthermore, the interception mechanism may not provide the required security guarantees or may make it difficult to keep track of operating system state, such as processes exiting and forking. A notable exception is SLIC [19], a mechanism to create extensible operating systems via system call interposition. Unfortunately, it is not portable and adds significant complexity to the operating system.

On the other hand, an implementation completely at the kernel level is likely to be fast but less portable and also causes a significant increase in the complexity of the operating system.

We choose a hybrid approach to implement a small part of the system at the kernel level. The kernel-level part supports a fast path for system calls that should always be allowed or denied. This case should incur almost no performance penalty because it does not require a context switch to ask a user space policy daemon for a decision.

Some control in the kernel also allows us to make the system fail-safe, i.e., no application can escape its sandbox even if there are unforeseen errors that might cause the monitor itself to terminate. When the sandboxing process terminates, the kernel terminates all processes that it was monitoring. Additionally, the kernel keeps track of the creation of new processes and of processes that exit. Child processes inherit the policy of their parent.

If the kernel cannot use the fast path for a system call, it must ask the policy daemon in user space for a policy decision. In that case, the process is blocked until the daemon returns with an answer to permit the system call or deny it with a certain error code. Information is exported from the kernel to user space via a simple yet comprehensive interface.

The user space policy daemon uses the kernel interface to start monitoring processes and to get information about pending policy decisions or state changes. The state changes may include process creation, processes exiting, processes changing uid or gid, and other state changes.

The daemon may also request information about the result of a system call. This allows us to know, for example, if the execve system call has succeeded in replacing the current process image with a new application. This event can install a new policy from the policy database.

System call interception does not provide atomicity between the time a policy decision is made and the time a system call is executed, i.e., the time of check is not the time of use (TOCTOU). As a result, an adversary can change the system call before it is executed but after the policy daemon has inspected it. For example, two processes that share parts of their address space may cooperate to present one set of system call arguments to the policy daemon and another one to the kernel. When the kernel suspends the first process to consult the policy daemon, the second process is still running and may change the system call arguments of the first process after they have been inspected by the daemon. For filesystem access, an adversary may also redirect the access by changing a component in the filename to a symbolic link after the policy check. This lack of atomicity may allow an adversary to escape the sandbox.

We prevent these race conditions by replacing the system call arguments with the arguments that were resolved and evaluated by Systrace. The replaced arguments reside in kernel address space and are available to the monitored process via a read-only look-aside buffer. This ensures that the kernel executes only system calls that passed the policy check.

Before making a policy decision, the system call and its arguments are translated into a system-independent, human-readable format. The policy language operates on this translation and does not need to be aware of system call-specific semantics.

### 4.1 Policy
A boolean expression consists of variables \(X_n\) and the usual logical operators: and, or, and not. The variables \(X_n\) are tuples of the form \((\text{subject} \, \text{op} \, \text{data})\), where \(\text{subject}\) is the translated name of a system call argument, \(\text{data}\) is a string argument, and \(\text{op}\) is a function with a boolean return value that takes \(\text{subject}\) and \(\text{data}\) as arguments.

The set of all lists forms the security policy. For a given system call, policy evaluation starts at the beginning of the system call-specific list and terminates with the first boolean expression that is true; see Figure 1. The action from that expression determines whether the system call is denied or allowed.

If no boolean expression becomes true, the policy decision is forwarded to the user of the application or automatically denied, depending on the configuration. Section 4.2 explains in more detail how this mechanism is used to generate policies interactively or automatically. When denying a system call, it is possible to specify which error code is passed to the monitored application.

To create comprehensive policies that apply to different users, policy statements may carry predicates. A policy statement is evaluated only if its predicate matches and ignored otherwise. Using predicates, it is possible to restrict the actions of certain users or be more permissive with others, for example, system administrators. Predicates are appended to the policy statement and are of the form \(\text{if} \, \{\text{user,group}\} \, \text{op} \, \text{data}\), where \(\text{op}\) is either equality or inequality and \(\text{data}\) is a user or group name.

The log modifier may be added to a policy statement to record matching system calls. Every time a system call matches this policy statement, the operating system records all information about the system call and the resulting policy decision. This allows us to create arbitrarily fine-grained audit trails.

### 4.2 Policy Generation
Existing frameworks for making policy decisions propose generic policy languages [6, 7] and provide policy evaluation methods but are more complex than necessary in our case. For that reason, we create our own policy language and evaluator. This approach has also been taken by other sandboxing tools [1, 20].

We use an ordered list of policy statements per system call. A policy statement is a boolean expression \(B\) combined with an action clause: \(B \, \text{then} \, \text{action}\). Valid actions are ask, deny, or permit, plus optional flags. If the boolean expression evaluates to true, the specified action is taken. The ask action requires the user to deny or permit the system call explicitly.

Creating policies is usually relegated to the user who wishes to sandbox applications. Policy generation is not an easy task, as some policy languages resemble complicated programming languages [24]. Although those languages are very expressive, the difficulty of creating policies can be a barrier. Systrace simplifies this process by supporting automatic and interactive policy generation, allowing users to create policies quickly and easily.