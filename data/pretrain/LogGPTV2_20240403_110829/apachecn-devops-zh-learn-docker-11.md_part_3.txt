 --name web \
 -p 8000:8000 \
 --secret source=api-secret-key,target=/run/my-secrets/api-secret-key \
 fundamentalsofdocker/whoami:latest
```
在这个命令中，我们使用扩展语法来定义一个包含目标文件夹的机密。
# 在开发环境中模拟机密
当在开发中工作时，我们的机器上通常没有本地集群。但是机密只在群体中起作用。那么，*我们能做什么*？嗯，幸运的是，这真的很简单。由于机密被视为文件，我们可以轻松地将包含机密的卷装入容器中的预期位置，默认位置为`/run/secrets`。
假设我们在本地工作站上有一个文件夹`./dev-secrets`。对于每个机密，我们都有一个文件，其名称与机密名称相同，并且以机密的未加密值作为文件内容。例如，我们可以通过在工作站上执行以下命令来模拟一个名为`demo-secret`的具有机密值`demo secret value`的机密:
```
$ echo "demo secret value" > ./dev-secrets/sample-secret
```
然后，我们可以创建一个容器来装载这个文件夹，如下所示:
```
$ docker container run -d --name whoami \
 -p 8000:8000 \
 -v $(pwd)/dev-secrets:/run/secrets \
 fundamentalsofdocker/whoami:latest
```
并且在容器内运行的进程将无法区分这些装载的文件和源自机密的文件。因此，例如，`demo-secret`在容器内作为文件`/run/secrets/demo-secret`可用，并且具有期望值`demo secret value`。
为了测试这一点，我们可以在前面的容器中执行一个 shell:
```
$ docker container exec -it whoami /bin/bash
```
然后导航到文件夹`/run/secrets`，显示文件`demo-secret`的内容:
```
/# cd /run/secrets
/# cat demo-secret
demo secret value
```
# 机密和遗留应用
有时，我们想要将一个我们不能轻易改变或者不想改变的遗留应用容器化。这个遗留应用可能希望有一个机密值作为环境变量。*我们现在要怎么处理？* Docker 将机密作为文件呈现给我们，但是应用希望它们以环境变量的形式出现。
在这种情况下，定义一个在容器启动时运行的脚本(所谓的入口点或启动脚本)是很有帮助的。该脚本将从相应的文件中读取机密值，并定义一个与文件同名的环境变量，将从文件中读取的值分配给新变量。在名为`demo-secret`的机密的情况下，其值应该在名为`DEMO_SECRET,`的环境变量中可用，这个启动脚本中必要的代码片段可能如下所示:
```
export DEMO_SECRET=`cat /run/secrets/demo-secret`
```
类似地，如果遗留应用期望机密值作为条目出现在例如位于`/app/bin`文件夹中的名为`app.config`的 YAML 配置文件中，该文件的相关部分如下所示:
```
...
secrets:
  demo-secret: ">"
  other-secret: ">"
  yet-another-secret: ">"
...
```
我们的初始化脚本现在需要从`secret`文件中读取机密值，并用机密值替换配置文件中相应的占位符。对于`demo-secret,`来说，可能是这样的:
```
file=/app/bin/app.conf
demo_secret=`cat /run/secret/demo-secret`
sed -i "s/>/$demo_secret/g" "$file"
```
在这个片段中，我们使用`sed`工具将占位符替换为适当的值。我们可以对配置文件中的另外两个机密使用相同的技术。
我们将所有初始化逻辑放入一个名为`entrypoint.sh`的文件中，使该文件可执行，例如，将其添加到容器文件系统的根目录中，然后我们在 Dockerfile 中将该文件定义为`ENTRYPOINT`，或者我们可以在`docker container run`命令中覆盖映像的现有`ENTRYPOINT`。
让我们做一个样本。假设我们有一个遗留应用在一个由映像`fundamentalsofdocker/whoami:latest`定义的容器中运行，该容器期望在应用文件夹中的文件`whoami.conf`中定义一个机密`db_password`。我们可以在本地机器上定义一个文件`whoami.conf`，内容如下:
```
database:
  name: demo
  db_password: ">"
others:
  val1=123
  val2="hello world"
```
重要的部分是这个片段的第 3 行。它定义了启动脚本必须将机密值放在哪里。让我们在本地文件夹中添加一个名为`entrypoint.sh`的文件，内容如下:
```
file=/app/whoami.conf
db_pwd=`cat /run/secret/db-password`
sed -i "s/>/$db_pwd/g" "$file"
/app/http
```
该脚本的最后一行源于这样一个事实，即这是原始 Dockerfile 中使用的启动命令。现在，将此文件的模式更改为可执行:
```
$ sudo chmod +x ./entrypoint.sh
```
现在，我们定义一个继承自映像`fundamentalsofdocker/whoami:latest`的 Dockerfile。将名为`Dockerfile`的文件添加到当前文件夹，内容如下:
```
FROM fundamentalsofdocker/whoami:latest
COPY ./whoami.conf /app/
COPY ./entrypoint.sh /
CMD ["/entrypoint.sh"]
```
让我们从这个 Dockerfile 构建映像:
```
$ docker image build -t secrets-demo:1.0 .
```
一旦构建了映像，我们就可以从中运行服务。但在我们做到这一点之前，我们需要定义群体中的机密:
```
$ echo "passw0rD123" | docker secret create demo-secret -
```
现在我们可以创建使用以下机密的服务:
```
$ docker service create --name demo \
 --secret demo-secret \
 secrets-demo:1.0
```
# 更新机密
有时，我们需要更新正在运行的服务中的机密，原因是机密可能会泄露给公众或被恶意的人窃取，例如黑客。在这种情况下，我们需要更改我们的机密数据，因为从它泄露给不可信实体的那一刻起，它就必须被视为不安全的。
像任何其他更新一样，机密的更新必须以零停机时间的方式进行。在这方面，SwarmKit 支持我们。
首先，我们在蜂群中创造新的机密。建议在这样做时使用版本控制策略。在我们的示例中，我们使用版本作为机密名称的后缀。我们最初是从名为`db-password`的机密开始的，现在这个机密的新版本叫做`db-password-v2`:
```
$ echo "newPassw0rD" | docker secret create db-password-v2 -
```
假设使用该机密的原始服务是这样创建的:
```
$ docker service create --name web \
 --publish 80:80
 --secret db-password
 nginx:alpine
```
在容器内运行的应用能够在`/run/secrets/db-password`访问机密。现在，SwarmKit 不允许我们在运行的服务中更新现有的机密，因此我们必须首先删除这个机密的过时版本，然后添加新的版本。让我们从以下命令开始删除:
```
$ docker service update --secret-rm db-password web
```
然后我们可以用下面的命令添加新的机密:
```
$ docker service update \
 --secret-add source=db-password-v2, target=db-password \
 web
```
# 摘要
在这一章中，我们学习了 FlowKit 如何允许我们在不需要停机的情况下更新服务。我们还讨论了与零停机时间部署相关的 FlowKit 的当前限制。在这一章的第二部分，我们介绍了机密作为一种以高度安全的方式向服务提供机密数据的手段。
在下一章中，我们将介绍当前最流行的容器编排器 Kubernetes。我们将讨论用于在 Kubernetes 集群中定义和运行分布式、弹性、健壮和高可用性应用的对象。此外，这一章将让我们熟悉 MiniKube，一个用于在本地部署 Kubernetes 应用的工具，并演示 Kubernetes 与 Mac 的 Docker 和 Windows 的 Docker 的集成。
# 问题
为了评估您对本章讨论的主题的理解，请回答以下问题:
1.  用几句简单的话向感兴趣的外行解释一下*零停机部署*的含义。
2.  FlowKit 如何实现零宕机部署？
3.  与传统(非容器化)系统相反，为什么 Docker Swarm *中的回滚只是起作用*？用几句简短的话解释一下。
4.  描述 Docker 机密的两到三个特征。
5.  您需要推出新版本的`inventory`服务。你的命令看起来像什么？以下是一些更多信息:
    1.  新映像称为`acme/inventory:2.1`。
    2.  我们希望使用批量为两个任务的滚动更新策略。
    3.  我们希望系统在每批后等待一分钟。
6.  您需要使用通过 Docker 机密提供的新密码更新名为`inventory`的现有服务。新的机密叫做`MYSQL_PASSWORD_V2`。服务中的代码期望这个机密被称为`MYSQL_PASSWORD`。更新命令是什么样子的？(注意:我们不希望更改服务的代码！)
# 进一步阅读
以下是一些外部来源的链接:
*   *在[https://dockr.ly/2HfGjlD](https://dockr.ly/2HfGjlD)对服务*应用滚动更新
*   *在[https://dockr.ly/2vUNbuH](https://dockr.ly/2vUNbuH)管理带有 Docker 机密的敏感数据*
*   *在[https://dockr.ly/2k7zwzE](https://dockr.ly/2k7zwzE)引入 Docker 机密管理*
*   *从环境变量到 Docker 的机密[https://bit.ly/2GY3UUB](https://bit.ly/2GY3UUB)*