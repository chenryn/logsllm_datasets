get airSpeedvelocity() {return this._speciesDelegate.airSpeedVelocity;}
get plumage() {return this._speciesDelegate.plumage;}
class AfricanSwallowDelegate extends SpeciesDelegate {
class EuropeanSwallowDelegate extends SpeciesDelegate {
 return new Bird(data);
switch(data.type)
constructor(data,
this._plumage = data.plumage;
rest of bird's code...
我喜欢这种办法，
case
case
case
有了共同的超类以后，
this._isNailed = data.isNailed;
这几个类最终的状态如下：
 return new AfricanSwallowDelegate(data, this);
eturn
new
bird）{
bird）{
因为它简化了Bird类中的委托函数。
，就可以把speciesDelegate字段默认设置为这个超类的
，我可以一目了然地看
---
## Page 479
同的数据和行为，
从这个重构中我还有什么收获？新的继承体系范围更收拢了
的继承结构被转移到了speciesDelegate下面。除了给Bird类重新被继承的机会，
class NorwegianBlueParrotDelegate extends SpeciesDelegate {
class AfricanSwallowDelegate extends SpeciesDelegate {
class EuropeanSwallowDelegate extends SpeciesDelegate {
get_plumage(）{
get airSpeedvelocity() {
constructor(data, 
get airSpeedvelocity(）{
constructor(data,
get airSpeedvelocity(） {return null;}
get plumage(）{
selectSpeciesDelegate(data) {
return this. bird._plumage Il "average";
get name()
return (this._isNaiied) ? 0 : 10 + this._voltage ／ 10;
this
super(data
 rest of bird's code...
this._speciesDelegate = this.selectSpeciesDelegate(data);
在这个例子中，我用一系列委托类取代了原来的多个子类，
default:
case
case
case
(this
return new 
return
'EuropeanSwallow':
bird);
{return this._name;}
 AfricanSwallowDelegate(data, this);
w EuropeanSwallowDelegate(data, this)
bird）{
this._numberofcoconuts;
bird）{
 各个品种相同的代码则全都留在了Bird中，
"beautiful";
它未来的子类也将
只涉及各个品种不
 与原来非常相似
---
## Page 480
就不太上口了。
是“审慎地组合使用对象组合与类继承，优于单独使用其中任何一种"-
系来搞定分发。不过写到这儿，我要去吃晚饭了，
类。
得益于这些共用的行为。
，这样在Booking类中就不需要分发逻辑，直接调用委托对象即可，让继承关
从这两个例子看来，
在前面的“演出预订"的例子中，
“对象组合优于类继承"这句话更确切的表述可能应该
我也可以采用同样的手法，
，就把这个练习留给读者吧。
创建一个委托超
-不过这
---
## Page 481
栈的字段，
T
是一件好事，但这个继承关系有问题：列表类的所有操作都会出现在栈类的接口
表
的
段
动机
class List {...}
class Stack {
Delegate)
12.11
constructor(）{
然而其中大部分操作对一个栈来说并不适用。更好的做法应该是把列表作为
（list）
this._storage = new List();
但继承也有可能造成困扰和混乱。
我只要继承一个已有的类，覆写-
在面向对象程序中，
曾用名：以委托取代继承（Replace Inheritance with Delegation）
，把必要的操作委派给列表就行了。
以委托取代超类（Replace Superclass with
，通过继承来复用现有功能，
一些功能，
再添加一些功能，就能达成目
 是一种既强大又便捷的手
---
## Page 482
·针对超类的每个函数，
·在子类中新建一个字段，使其引用超类的一个对象，并将这个委托引用初始化
取代超类。
所以我的建议是，首先（尽量）使用继承，如果发现继承有问题，再使用以委托
所有实例都是超类的实例），那么继承是一种简洁又高效的复用机制。如果情况
种观点。如果符合继承关系的语义条件（超类的所有方法都适用于子类，子类的
转发函数虽然写起来乏味，但它们都非常简单，
中原本一样的函数，现在我必须在宿主类中挨个编写转发函数。不过还好，这种
的缺点就是，对于宿主类（也就是原来的子类）和委托类（也就是原来的超类)
层意思。
发生变化，继承不再是最好的选择，我也可以比较容易地运用以委托取代超类。
关系能更清晰地表达“这是另一个东西，我只是需要用到其中携带的一些功能"这
将部分职能委托给另一个对象，这些混乱和错误本是可以轻松避免的。使用委托
tih]。
号、制造日期等属性。然而汽车终归不是模型。这是一种常见而又经常不易察觉
属性，我可能想复用这些特性来表示真正的汽车（car）：
该完全不出问题。假如我有一个车模（car model）类，其中有名称、引擎大小等
类并不适用，就说明我不应该通过继承来获得超类的功能。
移，然后才能测试。
为超类的新实例。
做法
用。每转发一块完整逻辑，都要执行测试。
有些人在这个方向上走得更远，
 在这两个例子中，有问题的继承招致了混乱和错误－
这就是一个用得上以委托取代超类手法的例子-
超类的变化很容易破坏子类的功能，我还是会使用以委托取代超类。这样做
即便在子类继承是合理的建模方式的情况下，如果子类与超类之间的耦合过
子类的所有实例都应该是超类的实例，通过超类的接口来使用子类的实例应
除了“子类用得上超类的所有函数"之外，
大多数时候，每转发一个函数就可以测试，但一对设值/取值必须同时转
在子类中创建一个转发函数，将调用请求转发给委托引
，他们建议完全避免使用继承，但我不同意这
 合理的继承关系还有一个重要特
几乎不可能出错。
-如果超类的一些函数对子
并在子类上添加VIN编
一如果把继承关系改为
C
---
## Page 483
可以认为就是目录中数据的副本。如果这些数据从不发生改变，我完全可以接受
但在目录上却只记录一个条目。
是完全不同的两种东西。
needscleaning(targetDate) {
constructor(id, title, tags, dateLastcleaned) {
class Scroll extends CatalogItem..
的catalogItem类，并扩展出与“需要清扫"相关的数据。
constructor(id, title， tags）{
class CatalogItem...
daysSinceLastcleaning(targetDate） {
的信息编制了
·当所有超类函数都被转发函数覆写后，就可以去掉继承关系。
 this._lastcleaned = dateLastcleaned;
hasTag(arg)
get
 return this._lastCleaned.until(targetDate, ChronoUnit.DAYS);
 return this.daysSinceLastCleaning(targetDate) > threshold 
super(id，
范例
this._tags = tags;
this._title :
this._id = id;
这样的建模错误很多时候可以置之不理。
这些古老的卷轴需要日常清扫，
）
这就是一个常见的建模错误。
title, tags);
{return
{return 
title;
 this.hasTag("revered") ? 700 : 1500;
this._tags.includes(arg);}
this._title;}
_id;}
比如说，
关于“如何治疗灰鳞病"的卷轴可能有好几卷，
 真实存在的卷轴和只存在于纸面上的目录项，
，因此代表卷轴的scrol1类继承了代表目录项
像“标题"和“标签"这样的数据，
---
## Page 484
改为引用对象（256）。
书馆中的6份卷轴，
但在这个例子中，更好的建模方式应该是：关于灰鳞病的一个目录项，对应于图
个独一无二的catalogItem对象。
点收尾工作要做。
get titie()
get id() {return this._
class Scroll..
class Scroll extends CatalogItem..
型。
项"作为“卷轴"的超类很可能会把未来的程序员搞迷糊，因此这是一个糟糕的模
个目录项对应的所有数据副本都被正确地更新。
这样的表现形式。
constructor(id, 
this.
this._catalogItem
就算没有数据更新的问题，
不过在使用将值对象改为引用对象（256）之前，还有一个问题需要先修
前面的重构把catalogItem变成了scroll的一个组件：每个scroll对象包含-
基本的以委托取代超类重构到这里就完成了，不过在这个例子中，我还有一
Lns
最后去除scrol1与catalogItem之间的继承关系。
然后对于子类中用到所有属于超类的函数，我要逐一为它们创建转发函数。
我首先在scroll类中创建一个属性，令其指向一个新建的catalogItem实例。
-catalogItem = new CatalogItem(id, title, tags);
{return this.
extends CatalogItem{
。但如果需要更新其中某处数据，
，因为这6份卷轴都是同一个标题。这实际上是要运用将值对象
_catalogItem.id;}
 tags, dateLastcleaned){
new CatalogItem(id, title, tags);
tags, dateLastcleaned）{
我还是希望改变这两个类之间的关系。把“目录
在使用本重构的很多情况下，
，我就必须非常小心，确保同一
这样处理就够了
---
## Page 485
加载程序...
Scroll的构造函数。
以运用改变函数声明（124），把整个目录对象以及目录项的ID都作为参数传给
前一直被无视了，因为在使用继承的时候用不着。
法把这个ID值放进scrol1对象的构造函数。还好，
对象负责提供catalogItem对象，
加载程序...
const scrolls = aDocument
是我在重构过程中的临时状态，可以暂时忍受。
get id() {return this._id;}
constructor(id, title, tags, dateLastcleaned) {
class Scroll...
段。这一步既可以说是搬移，也可以说是拆分。
段
该是目录项的ID，而不是卷轴的ID。也就是说，我需要在scrol1类上添加id字
ID。但如果我把catalogItem当作引用来处理，那么透过这个引用获得的ID就应
好。在原来的继承结构中，Scroll类使用了catalogItem类的id字段来保存自己的
（repository）。我发现有一个仓库对象可以很容易地导入加载程序中，这个仓库
一个共享的目录项，而后者也会有合适的ID。
 this._lastcleaned = dateLastcleaned;
 this._catalogItem = new CatalogItem(null, title, tags);
将值对象改为引用对象（256）的第一步是要找到或者创建一个仓库对象
用nul1作为ID值创建目录项，
.map(record =>
当前scrol1对象是从一个加载程序中加载的。
> new Scroll(record.id,
record.catalogData.title,
record.catalogData.title,
LocalDate.parse(record.lastcleaned)))
，并用ID作为索引。
，这种操作一般而言应该触发警报了，
。等我重构完成，多个卷轴会指向
，把这些信息都理清楚，我就可
 输入数据中有这个值，
，我的下一项任务就是要想办
不过这只
不过之
---
## Page 486
class Scroll..
加载程序...
变函数声明（124）把它们去掉。
class Scroll...
对象，并引用这个对象（而不再新建catalogItem对象）。
constructor(id, title, tags, dateLastCleaned, catalogID, catalog） {
const scrolls = aDocument
constructor(id, title, tags, dateLastcleaned, catalogID, catalog) {
constructor(id, title， tags, dateLastCleaned, catalogID, catalog） {
class Scroll..
this._lastCleaned = dateLastCleaned;
this
Scroli的构造函数已经不再需要传入title和tags这两个参数了，所以我用改
然后修改scroli的构造函数，
.map(record => new Scroll(record.id,
_catalogItem = catalog.get(catalogID);
id;
catalog));
record.catalogData.tags,
record.catalogData.title,
catalog));
record.
LocalDate.parse(record.lastcleaned),
record.catalogData.tags,
.catalogData.id,
用传入的catalogID来查找对应的catalogItem
---
## Page 487
ISBN 0321213351.
0321503635.
Technology Organizations. IT Revolution Press, 2018. ISBN 1942788339.
Architectures. O'Reilly, 2017. ISBN 1491986360.
Edition. Addison-Wesley, 2009. ISBN 0321603508.
2004.ISBN 0131177052.
ISBN 013476904X.
Databases. Addison-Wesley, 2006. ISBN 0321293533.
ISBN 0201633612.
在本书正文中，而是引导读者去bliki查看。
一些软件开发中用到的词汇。在撰写本书的过程中，我决定不把这些名词解释放
目都指向"bliki"—
https://martinfowler.com/books/refactoring-bibliography.html 。
 [gof] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. Design
 [Forsgren et al.] Nicole Forsgren, Jez Humble, and Gene Kim. Accelerate: The
 [Ford et al.] Neal Ford, Rebecca Parsons, and Patrick Kua. Building Evolutionary
[Ambler & Sadalage] Scott W. Ambler and Pramod J. Sadalage. Refactoring 
 [HaroldLElliotte Rusty Harold. Refactoring HTML. Addison-Wesley, 2008. ISBN
 [Fields et al.] Jay Fields, Shane Harvie, and Martin Fowler. Refactoring Ruby
[Feathers] Michael Feathers. Working Effectively with Legacy Code. Prentice-Hall,
[Beck SBPP] Kent Beck. Smalltalk Best Practice Patterns. Addison-Wesley, 1997.
在以下网址可以找到这份参考文献的在线版本：
[Bazuzi] Jay Bazuzi. “Safely Extract a Method in Any C++ Code."
一这是martinfowler.com网站的一个栏目，我在其中简要介绍了
参考文献