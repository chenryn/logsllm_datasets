Drivers can also participate in greenhouse gas trading schemes with their score
points.
Important aspect of the design of the system is it’s security. Security is
major problem in all IoT applications, because of the big number of hetero-
geneous devices, the data, which is distributed across many locations and the
needforhigh-speedcommunication.Newprotocolsandschemesthatincorporate
symmetric and asymmetric cryptography are developed [6] in order to resolve
these problems. The current system uses TLS v1.2 (TLS protocol) with it’s
built-in asymmetric and symmetric cryptography for the network communica-
tion between components.
3 System Implementation Elements
This section outlines the main components of EcoLogic system. First, the hard-
ware module with it’s components and the algorithm for calculation of carbon
emissions are presented. Later, the cloud applications are described and the
algorithm for data analysis.
3.1 Embedded Hardware System
The embedded hardware system contains two embedded subsystems: Arduino
Uno and Raspberry Pi B+. The Arduino operates on the low-level hardware
sensors and actuators in the vehicles, while the Raspberry Pi works on higher
level.Itaggregatesthedatafromthelow-levelhardwareandcommunicateswith
the cloud platform in bidirectional way.
System for Monitoring and Control of Vehicle’s Carbon Emissions 569
Arduino Embedded Hardware System. The Arduino Uno embedded sys-
tem has the following capabilities:
 Measure physical parameters of internal combustion engine.
 Visualize the measured parameters on 4 × 16 liquid crystal display.
 Control of actuator (light emitting diode).
 Communication with Raspberry Pi embedded system.
The physical parameters are measured in two ways: by sensors or extracted
from the onboard diagnostic system (OBD2), which is provided by the elec-
tronic control module of the vehicle. If the onboard diagnostic interface exposes
the necessary parameters in the Application Programming Interface (API), no
additionalsensorswillbeinstalledinthevehicle.Iftheonboarddiagnosticinter-
face API does not expose the necessary parameters, additional sensors, which
measuretheseparameters,willbeintegrated.Thereisalsoapossibilitytoreuse
the already existing default sensors of the vehicle. In this way the hardware
module is flexible and can be installed on huge amount of vehicles.
Fig.2. Raspberry Pi architecture
The Arduino embedded system has deployed application in its local stor-
age and executes it. The application is implemented on the C++ program-
ming language. It is publicly available and can be downloaded from the
following location: https://github.com/ttsokov/vehicle-monitor-controller-hw-
controller (vehicle- monitor-controller- hw-controller source code). The repos-
itory from the link contains information for the build, deployment and execu-
tiononlocalArduino-basedhardwaremodule.TheapplicationconsumesWiring
570 T. Tsokov and H. Kostadinov
library, which is part of the Arduino SDK (Software Development Kit). The
Wiring library executes on the concrete Arduino microcontroller via drivers.
Currently, the Arduino Uno hardware is used, which has Microchip ATmega328
microcontroller based on RISC architecture. This hardware module executes a
critical calculations from physical sensors in real time. This is the reason why
it’s a separate module with own independent computational resources and with
software application written in fast low-level programming language like C++.
Raspberry Pi Embedded Hardware System. The Raspberry Pi B+
embedded system delegates the communication between the Arduino embed-
ded system and the applications in the cloud platform. Its architecture is shown
in Fig.2.
The communication between the Raspberry Pi B+ embedded system and
the Arduino embedded system is via serial UART (Universal Asynchronous
Receiver/Transmitter) protocol with a custom application messaging protocol
on top of it. The Raspberry Pi B+ embedded system is connected to the cloud
platform via 4G broadband cellular network. The measured physical parame-
ters by the Arduino embedded system are ingested into the Raspberry Pi B+
embedded system, which caches them in a local cache storage for further pro-
cessing and sends them to the cloud platform. It sends the data to the cloud
platform via HTTPS or MQTT protocol. The Adapter cloud-application is the
facade, which is the only endpoint seen by the Raspberry Pi B+ embedded sys-
tem. When it sends the data to the cloud platform, it receives response that
contain information about the state of the vehicle, including the amount of the
carbon dioxide emissions. There are two possible states: optimal (eco) and not
optimal (not eco). The Raspberry Pi module notifies the Arduino embedded
system once the emissions are not optimal. Then the Arduino embedded sys-
tem activates the low-level hardware actuator in order to reduce the quantity of
emissions. The main component inside the Raspberry Pi embedded hardware is
the System on a Chip (SoC), which is using ARM architecture and Linux based
operationsystem,currentlyRaspbian.ItexecutestheVehicleAgentapplication,
whichisimplementedintheJavaprogramminglanguageanditrunsontopofa
JavaVirtualMachine.TheVehicleAgentapplicationispubliclyavailableandcan
bedownloadedfromthefollowinglocation:https://github.com/ttsokov/vehicle-
monitor-controller-hw-proxy (vehicle-monitor-controller-hw-proxysourcecode).
The repository from the link contains information on how to build the applica-
tion locally, how to deploy it on any Raspberry Pi-based hardware module and
how to execute it.
The VehicleAgent application depends on the Pi4J and WiringPi libraries,
whichsupporttheserialcommunicationbetweenthetwoembeddedsystems.An
USB WiFi adapter is used for the 802.11n communication between the Rasp-
berry Pi embedded hardware and a hotspot, which provides the 4G broadband
cellular network to the cloud platform. The adapter is connected to one of
the USB ports of the Raspberry Pi. The communication with the cloud plat-
form can be achieved by several application layer protocols: HTTPS or MQTT.
System for Monitoring and Control of Vehicle’s Carbon Emissions 571
The decision which protocol will be used is taken according to the supported
protocol by the cloud platform. The modular architecture of the application
enables easy extension with other application layer protocols. Because the com-
munication network to the cloud platform is constrained it is expected to exist
glitches and that’s why the application caches the latest data in the local cache
storage. After successful reestablishment of the connection with the cloud plat-
form,theapplicationretriestosentthelocallycacheddata.Theapplicationcan
be configured by configuration file (config.xml), which is located into the local
file system storage. It contains unique identifiers for the vehicle, sensors and
typeofthecommunicationwiththecloudplatform(HTTPS,MQTT,etc.).The
driver or operator, who registers the vehicle into the system, should populate
the configuration file and save it.
This hardware module serves as a communication proxy and need to have
capabilities to work with a lot of communication networks and protocols. This
is the reason why it’s a separate hardware module, which can work with many
hardware adapters or antennas supporting different communication networks.
Thesoftwareapplicationiswritteninhigh-levelprogramminglanguagelikeJava,
because it needs to work with many communication protocols and serialize data
in different formats.
3.2 Cloud Software Applications
The EcoLogic is composed of several cloud- native microservice applications,
namely Controller application, Adapters applications, Web user interface and
Analyticsapplication.Eachapplicationisdescribedinthefollowingsubsections.
Controller Application. The Controller application is the main cloud appli-
cation, which manages all vehicles with their hardware modules and sensors,
make calculations, persists data into database, executes artificial intelligence
algorithmsonthedataandprovidesHTTPRESTAPI.Itisimplementedusing
theJavaEnterpriseEditionprogramminglanguageusingJPAandApacheCXF
services framework. The Controller application is publicly available and can be
downloaded from the following location: https://github.com/ttsokov/vehicle-
monitor-controller-backend (vehicle-monitor-controller- backend source code).
The repository from the link contains information on how to build the appli-
cationlocally,howtodeployitonawebcontainerinanycloudplatformorlocal
server and how to execute it. The application has the following functionality:
Composeadatamodel,whichhasthefollowingrelations:users,whichhave
vehicles, which have sensors, which have measurements of physical parameters.
 Orchestrates the lifecycle of all users, vehicles, sensors and measurements.
Persists thedata into arelational database, which is providedas abacking
service exposed by the cloud platform. The application is database-agnostic,
whichmeansthatitcanworkwithanyrelationaldatabase,whichprovidesJava
connectivity. If it does not provide Java connectivity, an adapter can be used.
Thedatabaseiscomposedoffourtables:User,Vehicle,SensorandMeasurement.
572 T. Tsokov and H. Kostadinov
Calculatesthetotalmassofthecarbondioxideemissionsdisposedintothe
atmosphere by vehicles.
Managesthestateofeachvehicle:optimal(eco)stateandnotoptimal(not
eco) state. This is a simple state machine with two states.
 Calls the API of an Analytics application, which executes clustering anal-
ysis and anomaly detection. The purpose is to find vehicles, which have not
optimal amount of carbon dioxide emissions per region.
ProvidesHTTPRESTAPIwhichisusedbytheAdapterapplications and
web user interface.
Adapter Application. The data coming from the vehicle hardware modules
is intercepted and adapted by the Adapter cloud-native applications. Then it
is routed to the Controller application. The Adapter applications are imple-
mented using the Java programming language. Currently there are two types
of Adapter applications that handle HTTPS and MQTT network protocols:
ControllerAdapterHttps and ControllerAdapterMqtt, respectively. Controller-
AdapterMqtt application communicates with MQTT broker. It is broker inde-
pendent, so: Mosquitto, HiveMQ, Mosca or other type of MQTT broker can be
used. The MQTT broker and the Adapter applications have publicly available
URL endpoints, which are called by the vehicle hardware modules. The traffic
is routed by the cloud platform to the concrete application depending on the
application layer protocol that is used. The traffic is routed to the Controller-
AdapterHttps application if HTTPS protocol is used. The traffic is routed to
the MQTT broker if MQTT protocol is used. This routing behaviour of the
cloudplatformisbasedonTCProutingmechanism.TCProutingenablescloud
platformstosupportapplications,whichcommunicatewithdifferentnon-HTTP
protocols.TCProutingisusedbyoneoftheindustrystandardcloudplatforms,
called Cloud Foundry (Cloud Foundry TCP Routing).
The flow of the MQTT traffic is the following:
1. On creation of new vehicle, the Controller application registers two top-
ics with names vehicles/{id}/sensors/{id}/measurements and vehicles/{id}/
state. The ControllerAdapterMqtt application subscribes for that topics.
2. Theconcretehardwaremodulealsosubscribestobothtopicsandstarttopub-
lish new measurements to vehicles/{id}/sensors/{id}/measurements topic.
3. On receiving of new message with measurement by the ControllerAddapter-
Mqtt application, it adapts the measurement and sends it to the Controller
application via the HTTP protocol.
4. The ControllerAddapterMqtt application receives the state of the concrete
vehicle and publishes it to the vehicles/{id}/state topic.
5. The concrete hardware module is subscribed to the state topic and receives
a response with the state of the vehicle, whether it is in optimal state or not.
In this way vehicle is notified.
This flow represents how ControllerAddapterMqtt application adapts the
data from MQTT to HTTP in both directions.
System for Monitoring and Control of Vehicle’s Carbon Emissions 573
Web User Interface. A web serverserves static HTML5, JavaScript and CSS
resources,whichareassemblingthewebuserinterface.Thewebresourcesdonot
containanyback-endlogic,butonlyfront-endcode,whichassemblesaresponsive
and user-friendly interface. This functionality for serving of static web resources
islightweightandit’ssupportedbythemostcloudplatformproviders.Thecon-
crete web user interface in the EcoLogic is based on the open-source JavaScript
front-end web application framework OpenUI5. It makes many simultaneous
AJAX (Asynchronous JavaScript and XML) requests to the HTTP REST API
endpoint exposed by the Controller application. Public access is provided and
the drivers and operators of the system are using it. The web user interface
andtheControllerapplicationhavedifferentorigins,becausetheyhavedifferent
domain names. The problem of the same-origin policy (OpenUI5), which pos-
tulates that one web application can access web resources from the same origin
or only permitted web resources from another origin is resolved by most of the
cloud platforms, usually by tokens.
The web user interface is based on the model-view-controller architecture
and supports the following capabilities:
Handlesthewholelifecycleoftheusers,vehicles,sensorsandmeasurements:
supports create, read, update, and delete operations.
 Display all historic and live measured parameters in real-time.
 Static manual control of the state of all vehicles by appropriate user inter-
face controls, which leads to control of the vehicle’s actuator. This is achieved
with manually configured threshold.
 Automatic dynamic control of the state of the vehicles, which is based on
the value of emissions or parameters that are not optimal per region.
 Visualization of all vehicles with not optimal emissions or parameters -
anomalies (outliers).
Analytics Application. TheAnalytics application executesaclustering anal-
ysisalgorithmonthestoreddata.Thealgorithmtakestwoparametersasinput:
engine capacity of the vehicles and total mass of carbon dioxide emissions
exposed in the atmosphere. In this way it partitions vehicles that have similar
engine capacity and emissions amount in clusters and finds the vehicles which
are anomalies. The analytics application uses K-Means algorithm for clustering
analysis. The number of engine capacities of the registered vehicles represent
thenumberofclusters(K)inthealgorithm.Theapplicationisconnectedtothe
backing service and consumes the stored relational data.
4 Algorithm Results
This section proves the relevancy of the EcoLogic algorithm by presenting a
case study with two separate datasets: test dataset and real dataset. The goal
of the case study is to test the capability of the algorithm to find outliers in
thedataset,whichrepresentvehicles’withnotoptimalcarbondioxideemissions
574 T. Tsokov and H. Kostadinov
in the context of a region with many vehicles. The experiment is carried out
with one real vehicle with installed hardware module. The cloud platform and
services that are configured for the case study are as follows:
 All described cloud-native applications are deployed into SAP Cloud plat-
form.
 The data is stored in a HANA relational database, provided as a backing
service from the cloud platform [7].
TheAnalyticsapplicationisrepresentedbyaSAPcloudplatformpredictive
service, which provides an algorithm for clustering analysis used for anomaly
detection.
4.1 Algorithm Results on a Dataset with Known Anomalies
First for validation of the correctness of the anomaly detection algorithm a test
dataset, which contains known anomalies is used. The algorithm is executed on
the test dataset and the returned result is compared with the known result. An
official test dataset is used for that purpose (Mugglestone 2014). It has data
for customers with the following parameters: id, name, lifespend, newspend,
income and loyalty. The test dataset contains 152 rows. The returned results
from execution of the clustering analysis with anomaly detection on the test
dataset are shown in Fig.3.
Fig.3. Clusters of dataset with known anomalies
The x-axis contains the income of the customers. The y-axis contains the
loyalty of the customers. The algorithm successfully make two clusters (K1 and
K2) and detects one anomaly. The clusters represent two kinds of customers:
System for Monitoring and Control of Vehicle’s Carbon Emissions 575
customerswithlowincomeandlowloyaltyandcustomerswithhighincomeand
high loyalty. The anomaly, marked in Fig.3 as Outlier, represents a data point,
which is located too far from the centers of the clusters K1 and K2, according
to other data points. The customer, which is detected as an outlier has ID: 151,
income:2.5andloyalty:0.75.Theresultobtainedfromthealgorithmisthesame
as the known result from the test dataset, which proves the correctness of the
algorithm for this dataset.
4.2 Algorithm Results on a Real Dataset
ThehardwaremoduleoftheEcoLogicisinstalledintoarealvehiclewithinternal
combustion engine with a capacity of 1800 cubic centimetres, working on petrol