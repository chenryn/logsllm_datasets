achieves a subtle and eﬀective compromise between exposure
to machine-level representation of memory and tractability
of formal proofs, and is ideal for reasoning about properties
that relate to sequences of memory accesses; ii. its sophisti-
cated compilation chain, which involves over 15 passes, and
about 10 intermediate languages, which are judiciously cho-
sen to provide compact representations on which program
analyses can be veriﬁed.
Our goal is to implement static analyses for checking whether
programs perform conditional jumps or memory accesses
that depend on secrets, and to derive strong semantical
guarantees for the class of programs accepted by one of our
analyses. In order to obtain meaningful results, it is impor-
tant that our analyses are performed on intermediate repre-
sentations towards the end of the compilation chain, rather
than source C programs; indeed, some compilation passes
in the compiler middle-end (typically at RTL level) may
typically modify and reorder memory accesses and hence
a constant-time C program could well be transformed into
a non constant-time x86 program, or vice-versa. Therefore,
we settle on deﬁning our analysis on one of the ﬁnal in-
termediate forms. A natural representation for reasoning
about sequences of memory accesses is Mach, the last-but-
ﬁnal intermediate language in the compilation chain. The
Mach language is used after passes that may introduce new
memory accesses (such as register allocation, branch tunnel-
ing and layout of the activation records for procedure calls),
and immediately before generation of assembly code. Hence
the sequence of memory accesses at Mach and assembly lev-
els coincide. Moreover, Mach has a compact syntax, which
is important to reduce proof eﬀort. On the other hand, the
Mach language does not enjoy a control ﬂow graph represen-
tation, which is a drawback for performing static analyses.
We therefore adopt a minor variant of Mach, which we call
MachIR, that retains the same instruction set as Mach but
makes explicit the successor(s) of each instruction. MachIR
is an idoneous representation for building veriﬁed static anal-
yses about sequences of memory accesses of programs.
Syntax. A MachIR program p is represented by a (par-
tial) map of program nodes to instructions, i.e. as an el-
ement of N ⇀ I. Each instruction carries its successor(s)
node(s) explicitly. The most basic instructions manipulate
registers and perform conditional and unconditional jumps:
op(op, ~r , r , n) (register r is assigned the result of the oper-
ation op on arguments ~r ; next node is n), goto(n) (uncon-
ditional jump to node n) and cond(c, ~r , nthen , nelse ) (condi-
tional jump; next node is nthen or nelse depending on the
boolean value that is obtained by evaluating condition c on
arguments ~r ). Memory is manipulated trough two oper-
ations:
loadς (addr , ~r , r , n) (register r receives the content
of the memory at an address that is computed with ad-
dressing mode addr and arguments ~r ; next node is n) and
n
r
S
N ∋
R ∋
S ∋
A ∋ addr ::=
| based(S)
|
stack(δ)
|
indexed
O ∋ op ::=
CFG nodes
register names
global variable names
based addressing
stack position
indexed addressing
| addrof(addr )
| move
| arith(a)
symbol address
register move
arithmetic operation
I ∋ instr ::=
loadς (addr , ~r , r , n)
storeς (addr , ~r , r , n)
| op(op, ~r , r , n)
|
|
| goto(n)
| cond(c, ~r , nthen , nelse )
register operation
memory load
memory store
static jump
conditional static jump
Figure 2: Instruction set
storeς (addr , ~r , r , n) (the content of the register r is stored
in memory at an address that is computed with addressing
mode addr and arguments ~r ; next node is n). ς describes
the type of memory chunk that is accessed (of size 1, 2 or
4 bytes). Addressing based(S) (resp. stack(δ)) directly de-
notes the address of a global symbol (resp. of the stack
memory block). Pointer arithmetic is performed through
addressing mode indexed. Additional instructions are used
to access the activation record of a procedure call, and to
perform the call. Figure 2 gives an excerpt of the language
instruction set.
Semantics. Values are either numeric values Vnum(i) or
pointer values Vptr(b, δ) with b a memory block name and
δ a block oﬀset. We let &SP denote the memory block that
stores the stack. A state (n, ρ, µ) is composed of the current
CFG node n, the register bank ρ ∈ R → Val and a CompCert
memory µ ∈ Mem.
The operational semantics is modelled with judgments:
s ֒ a−→ s′
The semantics is implicitly parameterized by a program p.
Informally, the judgment above says that executing the pro-
gram p with state s leads to a state s′, and has visible eﬀect
a, where a is either a read eﬀect read x (with x an address),
or a write eﬀect write x, or the null eﬀect ∅. Note that ef-
fects model the addresses that are read and written, but not
their value. Figure 3 presents selected rules of the seman-
tics. Note that an instruction like store4(stack(δ), [], r , n ′)
will assign the four stack positions δ, δ + 1, δ + 2 and δ + 3.
3. A TYPE SYSTEM FOR CONSTANT-TIME
This section introduces a type-based information ﬂow anal-
ysis that checks whether a MachIR program is constant-
time, i.e.
its control ﬂow and its sequence of memory ac-
cesses do not depend on secrets. To track how dependencies
evolve during execution, the information ﬂow analysis must
be able to predict the set of memory accesses that each in-
struction will perform at runtime. However, instructions
p[n] = op(op, ~r , r , n ′)
−→ (n ′, ρ[r 7→ JopK(ρ, ~r )], µ)
∅
(n, ρ, µ) ֒
p[n] = loadς (addr , ~r , r , n ′)
Jaddr K(ρ, ~r ) = vaddr
µ[vaddr]ς = v
read vaddr
−−−−−−−−→ (n ′, ρ[r 7→ v], µ)
(n, ρ, µ) ֒
p[n] = storeς (addr , ~r , r , n ′)
Jaddr K(ρ, ~r ) = vaddr
store(µ, ς, vaddr, ρ(r )) = µ′
(n, ρ, µ) ֒
write vaddr
−−−−−−−−−→ (n ′, ρ, µ′)
Figure 3: Mach IR semantics (excerpts)
such as storeς (indexed, [r1; r2], r , n ′) do not carry this infor-
mation. The standard solution to recover this information is
to let the information ﬂow analysis use the results of another
static analysis that performs these computations. There are
several possible choices that achieve diﬀerent trade-oﬀs be-
tween expressiveness, precision, and simplicity. We opt for
a conventional points-to [7] analysis. A similar analysis has
already been formalized for the CompCert toolchain [43], but
it targets a diﬀerent language (RTL) and makes a diﬀerent
trade-oﬀ between eﬃciency and precision; we use our own
formalization here.
Alias (points-to) type system. The deﬁnition of the alias
type system is given in [12]. For the purpose of understand-
ing the rest of the paper, it is suﬃcient to know that the
type system computes statically the points-to information
PointsTo(n, addr , ~r ) at every node n for a memory access
with an addressing mode addr and arguments ~r . Hence,
if node n contains an instruction loadς (addr , ~r , r , n ′) or an
instruction storeς (addr , ~r , r , n ′), we have a prediction, at
compile time, of the targeted memory address. In this con-
text, a so-called points-to information is one of the follow-
i. Symb(S), which represents pointer values Vptr(b, δ)
ing:
such that b is equal to the memory address &S of the global
variable S; ii. Stack(δ), which represents the pointer value
Vptr(&SP, δ).
For example, if an instruction storeς (indexed, [r1; r2], r , n ′)
is performed at node n when r1 contains Vptr(&S, 8) and
r2 contains the integer 16, the points-to static analysis may
safely predict PointsTo(n, addr , ~r ) = Symb(S), because the
accessed pointer is Vptr(&S, 24).
Information ﬂow type system. Next, we deﬁne an infor-
mation ﬂow type system for constant-time. As usual, we
consider a lattice of security levels L = {Low, High} with
Low ⊑ High. Initially, the user declares a set X 0
h ⊆ S of high
variables.
Programs are assigned types (Xh, T ), where Xh ∈ S → L
is a global type, and T ∈ N → (N + R) → L is a mapping
from program nodes to local types. Xh is a ﬂow-insensitive
global type which assigns a security level Xh(S) for every
global variable S ∈ S. T is a ﬂow-sensitive local type which
assigns for every oﬀset δ ∈ N the security level T [n](δ) of the
stack cell at address Vptr(&SP, δ) and node n, and for every
register r ∈ R its security level T [n](r ) at node n. Formally,
the type system manipulates judgments of the form:
p(n) = op(op, ~r , r , n ′)
Xh ⊢ n : τ ⇒ τ [r 7→ τ (~r )]
p(n) = loadς (addr , ~r , r , n ′)
PointsTo(n, addr , ~r ) = Symb(S)
τ (~r ) = Low
Xh ⊢ n : τ ⇒ τ [r 7→ Xh(S)]
p(n) = loadς (addr , ~r , r , n ′)
PointsTo(n, addr , ~r ) = Stack(δ)
Xh ⊢ n : τ ⇒ τ [r 7→ τ (δ) ⊔ · · · ⊔ τ (δ + ς − 1)]
p(n) = storeς (addr , ~r , r , n ′)
PointsTo(n, addr , ~r ) = Symb(S)
τ (~r ) = Low
τ (r ) ⊑ Xh(S)
Xh ⊢ n : τ ⇒ τ
p(n) = storeς (addr , ~r , r , n ′)
PointsTo(n, addr , ~r ) = Stack(δ)
Xh ⊢ n : τ ⇒ τ [δ 7→ τ (r ), . . . , δ + ς − 1 7→ τ (r )]
p(n) = goto(n ′)
Xh ⊢ n : τ ⇒ τ
Figure 4: Information ﬂow rules for constant-time
where Xh is a global type, n is a node, and τ1 and τ2 are
τ1, τ2 ∈ (N + R) → L. The type system
local types, i.e.
enforces a set of constraints on X 0
h, Xh and T . Typing rules
are given in Figure 4; we note τ (~r ) for Fr ∈~r τ (r).
The rule for op(op, ~r , r , n ′) simply updates the security
level of r with the supremum of the security levels of ~r .
There are two rules for loadς (addr , ~r , r , n ′). The ﬁrst one
considers the case where the value is loaded from a global
variable S.
In this case, the typing rule requires that all
registers are low, i.e.
τ (~r ) = Low, as we want to forbid
memory accesses that depend on a secret. The security level
of the register r is updated with the security level Xh(S)
of the variable. The second rule considers the case where
the value is loaded from a stack position at oﬀset δ.
In
this case, our type system conservatively requires that the
memory access is constant (and statically predicted by the
alias type system). In this case, no information is leaked.
Note that the security level of the register r is set to the
maximum of τ (δ), . . . , τ (δ + ς − 1). Indeed, the security level
of τ (δ) models the level of the 8-bits value at position δ; if
the load is performed with a memory chunk of size strictly
bigger than 1, several 8-bits value will be accessed. Our type
system takes care of this subtlety.
The two typing rules for store are similar to the rules for
load. If the store is performed on a global variable, we again
require τ (~r ) = Low to make sure the dereferenced pointer
does not leak secrets. The constraint τ (r ) ⊆ Xh(S) propa-
gates the security level of the stored value. For a store on
a stack oﬀset, we again make sure to consider enough stack
oﬀsets by considering the memory chunk of the instruction.
Definition 1
(Constant-time programs).
h, written X 0
A program p is constant-time with respect to a set of vari-
ables X 0
h ⊢ p, if there exists (Xh, T ) such that
for every S ∈ X 0
h, Xh(S) = High and for all nodes n and all
its successors n′, there exists τ such that
Xh ⊢ n : τ1 ⇒ τ2
Xh ⊢ n : T (n) ⇒ τ ∧ τ ⊑ T (n′)
where ⊑ is the natural lifting of ⊑ from L to types.
We automatically infer Xh and T using Kildall’s algorithm [33].
4. SOUNDNESS OF TYPE SYSTEM
We capture the soundness of the static analyses with re-
spect to two distinct non-interference properties. The ﬁrst
property is expressed relative to the operational semantics
of MachIR (or equivalently x86) programs, and capture a
passive and non-concurrent attacker. This property is simi-
lar to non-interference results as they arise in the literature
on language-based security, and serves as a key step towards
the second property. The latter is cast relative to the oper-
ational semantics of a virtualization platform, and captures
an active and adaptive adversary. For the sake of readabil-
ity, this section deﬁnes the security policies, relates them
informally to existing threat models, and provides informal
soundness statements. Formalization details are deferred to
Section 6 and to the appendices.
4.1 Language-level security
Our ﬁrst soundness result establishes a non-interference
property based on the semantics of MachIR programs. We
assume given for every pair (Xh, τ ) consisting of a global
type and a local type an equivalence relation ∼Xh,τ on states.
Informally, two states s and s′ are equivalent if they have the
same program counter, and their bank registers and memory
mappings coincide on their low part. Given a typing deriva-
tion for p with witness (Xh, T ), equivalence can be extended
to traces2 of p as follows:
a2−→ s3 . . .
a1−→ s2 ֒
a0−→ s1 ֒
θ = s0 ֒
a′
a′