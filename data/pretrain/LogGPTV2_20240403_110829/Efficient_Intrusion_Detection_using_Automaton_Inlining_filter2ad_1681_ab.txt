write
open
C
R
C
R
close
X
Figure 2. A sample program. In the NFA representation of the program, E, X, C, and R represent entry,
exit, call, and return nodes respectively. The dotted lines represent -transitions in the NFA.
write
C
E
X
R
main
write
E
open
write
C
E
X
R
X
close
(a)
open
write
C
C
close
write
C
write
main
E
X
(b)
Figure 3. (a) The -IAM representation of the program in Figure 2. (b) An -free IAM representation.
Theorem 1 Let L(IAM (P )) denote the language ac-
cepted by an inlined automaton for some program P , and
L(PDA(P )) be the language accepted by the pushdown au-
tomaton of [1], then we have L(PDA(P )) ⊆ L(IAM (P )).
In the case of recursion-free programs, the languages are
equivalent.
4. Monitoring Programs with IAM
Our current implementation of IAM monitors library func-
tion calls. The runtime monitor is implemented as a library
interposition mechanism [9].
It intercepts calls to library
functions and checks them against the model. Figure 6
gives pseudocode for the monitoring algorithm and the data
structures used. The algorithm maintains a vector of current
states and for every transition, computes the states reachable
from that vector. If the set is ever empty, an alert is raised.
4.1. Monitored Events
It should be noted that the algorithm monitors more events
than other approaches because we track library functions ir-
respective of whether they make system calls or not. In the
IAMs of the four test programs (see Table 1), only about
25%-50% (26% in gnatsd) of the library functions made
system calls. So, this generally results in more states and
more transitions in our automaton. This bigger size in-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
main( int argc, char** argv) {
if (argc > 1) foo(--argc, argv);
}
void foo(int argc, char **file) {
int fd;
if ( argc != 0 ) {
fd = open(file[argc], O_WRONLY);
write(fd,"Hello World",11);
foo(--argc, file); close(fd);
}
}
write
main
1
2
9
10
E
C
R
X
4
open
5
6
3
8
foo
E
X
close
7
C
C
R
C
Figure 4. A recursive program. In the IAM representation of the program, dotted lines representing
-transitions have been retained for clarity. The node sequence 1-2-3-4-5-3-8-9-10 which translates
to the system call sequence (start, open, write, end) is an impossible path.
main( int argc, char** argv) {
if (argc > 1) foo1(argc, argv);
}
void foo1(int argc, char **file) {
if ( argc != 0) foo2(--argc, file);
}
void foo2(int argc, char **file) {
int fd; fd = open(file[argc], O_WRONLY);
write(fd,"Hello World",11);
foo1(argc, file); close(fd);
}
main
foo1
E
C
R
X
E
C
R
X
write
open
foo2
E
X
close
C
C
R
C
Figure 5. An indirect-recursion program. The program does exactly the same thing as the program
in Figure 4 but using mutually recursive functions foo1() and foo2(). The dotted lines representing
-transitions have been retained for clarity.
creases the runtime overhead because of the greater search
space. Therefore, modeling libraries instead of system calls
is a worst case scenario with the possible exception of a
program mostly made up of calls to library functions that
make several system calls (e.g. some of the socket li-
brary functions). In this exceptional case, a model based
on system calls would be bigger and slower than our cur-
rent model. Otherwise, in most cases, the time and space
measurements presented in Section 7 can be considered an
upper bound for an implementation of a similar approach
based on system calls.
4.2. Handling Non-standard Control Flow
Function pointers, setjmp/longjmp primitives, and sig-
nals have to be handled to obtain a sound model. Function
pointers in C can be used to make indirect function calls.
The functions that can be invoked from a function pointer
call site are determined by an analysis of the program that
computes the possible values of the function pointer at that
program point. But the pointer analysis required to deter-
mine this itself requires interprocedural control-ﬂow infor-
mation. This chicken-and-egg problem can be solved by ei-
ther ignoring function pointers completely or by combining
the construction of control-ﬂow graph with pointer analy-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Data Structures
node {
unsigned int nodeid : 19
unsigned int funid :
unsigned int succ :
8
1
}
int funid
node[] curr
node[][] model
funid, curr, model
input:
output:
curr
succidx ← 0
foreach node n in curr do
pos ← 0
repeat
nd ← model[n.nodeid][pos++]
if nd.funid = funid then
if nd (cid:2)∈ succ then
succ[succidx++].nodeid ← nd.nodeid
if nd.succ = 0 then break
end
end
if succidx = 0 then raise alert
copy succ to curr
Figure 6. IAM monitoring algorithm.
sis. Ignoring function pointers is unsound. In the current
implementation, we resolve function pointers to all deﬁned
functions with the same number and type of arguments as
the function pointer invocations. Although this has been
sufﬁcient to model our benchmark suite and workloads, this
is unsound in the presence of function pointer targets with
variable number of arguments and typecasts. Future work
should incorporate pointer analysis to more accurately re-
solve function pointers. This would signiﬁcantly decrease
the model size for programs with heavy function pointer us-
age especially in the case of IAM which uses inlining.
A call to setjmp saves the stack state in a buffer speci-
ﬁed by the env argument. A call to longjmp restores the
environment saved by the last call of setjmp with the corre-
sponding env argument. In the absence of data ﬂow analysis
to determine the pair of setjmp/longjmp calls with the same
env buffer (lexical matching would ignore effects of alias-
ing), we connect a longjmp call to every setjmp call in the
control ﬂow graph.
Signals are used extensively in privileged programs and net-
work daemons. We identify the signal handlers in a program
and construct separate context-sensitive models for them.
4.3. Data Structures
The current implementation of the automaton is based on an
-free IAM model. The automaton is represented by a table
of nodes (see Figure 6). Each row in the table corresponds
to a state q, and each entry, a node, in the row corresponds
to an element of successor(q). Nodes are represented by a
node identiﬁer nodeid (used as an offset in the table), li-
brary function identiﬁer funid, and a succ bit to indicate
if this is the last node (the majority of rows are short; so a
bit per node is more efﬁcient than a leading integer). Thus a
node represents a tuple (s, l) indicating the transition state
s for the input symbol l. The entire structure is packed into
28 bits to conserve space. The 19 bits and 8 bits bit-ﬁelds
used for the nodes are sufﬁcient to represent all programs
we have encountered to date.
The calculations for the automaton compacted by including
-transitions and by using delta successor states (c.f. Sec-
tion 5) are based on the following data structure1. Nodes
have three ﬁelds: a one byte funid, another one byte length
for the number of bits used in the offset ﬁeld for the delta
successors of that state, and ﬁnally a pointer to the delta
successors. If a node represents a library call then the fu-
nid is the identiﬁer of the function. If not, it is zero. The
value of the length ﬁeld depends on the delta successor with
the maximum (absolute) offset from the current state. We
cannot use different number of bits for each delta succes-
sor depending on its offset because the delta successors of
a state have to be of the same size to allow traversal by the
runtime monitoring algorithm. Each delta successor con-
tains the offset ﬁeld, one bit to indicate if it is a positive or
negative offset, and another bit to indicate if there are more
delta successors.
5. Inlined Automata Compaction
The Inlined Model trades off space for time. This trade-off
is essential given the performance characteristics of exist-
ing approaches to context-sensitive real-time intrusion de-
tection. While IAMs obtain run-time performance better
1Note that this data structure is different from the one in Figure 6 which
is used in the current implementation.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Program Software Version
cat
htzipd
lhttpd
Solaris 8
LiteZipper-0.1.6
lhttpd-0.1
gnatsd
gnats-4.0
Description
LOC
<1K A utility to concatenate and display ﬁles
≈7K A proprietary HTTP server implementation
<1K A fast and efﬁcient HTTP server capable of handling
≈32K The server daemon component of GNU GNATS, which is
thousands of simultaneous connections
a set of tools for tracking bugs reported by users
Table 1. Test programs.
-IAM
Program
cat
htzipd
lhttpd
gnatsd
states
99
11,274
650
1,286,503
transitions
342
15,563
886
1,969,732
-free IAM
states
90
2,821
429
338,736
transitions
791
31,047
1,098
7,915,678
Table 2. Characteristics of IAM models.
than NFAs (which suffer from performance degradation be-
cause of increased non-determinism as a result of context-
insensitivity), the footprint of a naive IAM can be rather
large. In the previous section we presented a compact data
layout for the model. Here we study automata compaction
techniques. Table 1 describes the test programs in our
benchmark suite and Table 2 gives some basic character-
istics of their IAM models.
Coalescing Single-successor States. Straight-line code
leads to states with single successors (i.e.
fan-out of 1).
Recall that state transitions occur on calls to library func-
tions. The ﬁrst compaction technique that we present con-
sists of coalescing a single-successor state with that succes-
sor; in effect, having multiple symbols on a transition edge.
Formally, For each state sj ∈ IAM, if successor(sj) =
{(sk, l)}, then for each (si, l(cid:2)) ∈ predecessor(sj), trans-
form (sj, l(cid:2)) to (sk, l(cid:2)l) in successor(si). In terms of the
transition function, replace δ(si, l(cid:2)) = sj and δ(sj, l) = sk
with δ(si, l(cid:2)l) = sk. The cost of this optimization is that the
monitoring code must keep extra state, a pointer in the ar-
ray of symbols for the current transition. This cost is rather
modest. The space savings come from the fact that a tran-
sition can be encoded as a sequence of bytes (one per sym-
bol) and that the state space is reduced as the nodes for the
single-successor state are not needed. Every coalesced state
would reduce the overall space requirements by approxi-
mately 52 bits by removing one row in the model and part
of a node.
Figure 7 gives the distribution of fan-out values for states
in our benchmark suite. Single-successor states range from
30% in htzipd to 58% in lhttpd. This shows that there
is potential for signiﬁcant reduction in the number of au-
tomaton states using this technique.
Merging Final States. Functions such as exit, exit,
and abort terminate a process. Calls to such functions
denote ﬁnal states in the automaton. We do not need to
maintain multiple instances of such ﬁnal states in the inlined
model and can instead have a single ﬁnal state. This is use-
ful especially when there is extensive use of error-handling
routines such as those present in network daemons. The
number of zero-successor states (fan-out = 0) ranges from
0.68% in htzipd to about 10% in gnatsd as shown in
Figure 7. For gnatsd, which has more than 300,000 states,
a 10% reduction is signiﬁcant. Each ﬁnal state that can be
removed saves approximately four bytes in the overall rep-
resentation. Furthermore, smaller state space could allow
us to reduce the number of bits required for the nodeid
ﬁeld (currently 19).
Combining Equivalent Transition Symbols. The above
two techniques reduce the number of states in the automa-
ton. This technique takes advantage of the commonality
of transition symbols. We know that non-determinism can
result in a state having multiple successors.
If there are
multiple successors for the same transition symbol then
one can reduce the overhead by maintaining a single in-
stance of the transition symbol for all those successor
states. Formally, the representation for successor states of si
can be transformed from {(sj1, l), (sj2, l), . . . , (sjn, l), . . .}
to {({sj1, sj2, . . . , sjn}, l), . . .}. In our representation we
would save one byte per transition with a common function
symbol. Figure 9 shows the average number of successors
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
s
e
a
t
t
s
g
n
o
m
a
s
e
u
a
v
t
l
u
o
−
n
a
f
f
o
n
o
i
t