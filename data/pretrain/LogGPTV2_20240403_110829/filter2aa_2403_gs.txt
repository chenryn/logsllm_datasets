          add   
ebp, 1 
          cmp   
ebp, 1000000 
          jne   
.L6 
          cvtsi2ss         xmm0, ebx 
          unpcklps         xmm0, xmm0 
          cvtps2pd         xmm0, xmm0 
          mulsd 
xmm0, QWORD PTR .LC2[rip] 
          divsd 
xmm0, QWORD PTR .LC3[rip] 
          add   
rsp, 16 
          pop   
rbx 
          pop   
rbp 
          unpcklpd         xmm0, xmm0 
          cvtpd2ps         xmm0, xmm0 
          ret 
v1.2084: 
          .long 
305419896 
.LC0: 
          .long 
1077936128 
.LC1: 
          .long 
1065353216 
.LC2: 
          .long 
0 
          .long 
1074790400 
.LC3: 
          .long 
0 
          .long 
1093567616 
100.6.3  Optimizing GCC 4.8.1 x86 
f1: 
          sub  
esp, 4 
          imul 
eax, DWORD PTR v1.2023, 1664525 
          add  
eax, 1013904223 
          mov  
DWORD PTR v1.2023, eax 
          and  
eax, 8388607 
          or   
eax, 1073741824 
          mov  
DWORD PTR [esp], eax 
          fld  
DWORD PTR [esp] 
          fsub 
DWORD PTR .LC0 
          add  
esp, 4 
          ret 
f: 
          push 
esi 
          mov  
esi, 1000000 
          push 
ebx 
          xor  
ebx, ebx 
          sub  
esp, 16 
.L7: 
          call 
f1 
          fstp 
DWORD PTR [esp] 
          call 
f1 
          lea  
eax, [ebx+1] 
          fld  
DWORD PTR [esp] 
          fmul 
st, st(0) 
          fxch 
st(1) 
          fmul 
st, st(0) 
          faddp 
st(1), st 
          fld1 
          fucomip st, st(1) 
          fstp 
st(0) 
          cmova 
ebx, eax 
          sub   
esi, 1 
          jne   
.L7 
          mov   
DWORD PTR [esp+4], ebx 
          fild  
DWORD PTR [esp+4] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
896 
逆向工程权威指南（下册） 
          fmul  
DWORD PTR .LC3 
          fdiv  
DWORD PTR .LC4 
          fstp  
DWORD PTR [esp+8] 
          fld   
DWORD PTR [esp+8] 
          add   
esp, 16 
          pop   
ebx 
          pop   
esi 
          ret 
v1.2023: 
          .long 
305419896 
.LC0: 
          .long 
1077936128 
.LC3: 
          .long 
1082130432 
.LC4: 
          .long 
1232348160 
100.6.4  Keil（ARM 模式）：面向 Cortex-R4F CPU 的代码 
f1       PROC 
          LDR  
 r1,|L0.184| 
          LDR  
 r0,[r1,#0]  ; v1 
          LDR  
 r2,|L0.188| 
          VMOV.F32 s1,#3.00000000 
          MUL  
 r0,r0,r2 
          LDR  
 r2,|L0.192| 
          ADD  
 r0,r0,r2 
          STR  
 r0,[r1,#0]  ; v1 
          BFC  
 r0,#23,#9 
          ORR  
 r0,r0,#0x40000000 
          VMOV 
 s0,r0 
          VSUB.F32 s0,s0,s1 
          BX   
 lr 
          ENDP 
f        PROC 
          PUSH 
 {r4,r5,lr} 
          MOV  
 r4,#0 
          LDR  
 r5,|L0.196| 
          MOV  
 r3,r4 
|L0.68| 
          BL   
 f1 
          VMOV.F32 s2,s0 
          BL   
 f1 
          VMOV.F32 s1,s2 
          ADD  
 r3,r3,#1 
          VMUL.F32 s1,s1,s1 
          VMLA.F32 s1,s0,s0 
          VMOV  
 r0,s1 
          CMP   
 r0,#0x3f800000 
          ADDLT 
 r4,r4,#1 
          CMP   
 r3,r5 
          BLT   
 |L0.68| 
          VMOV 
 s0,r4 
          VMOV.F64 d1,#4.00000000 
          VCVT.F32.S32 s0,s0 
          VCVT.F64.F32 d0,s0 
          VMUL.F64 d0,d0,d1 
          VLDR 
 d1,|L0.200| 
          VDIV.F64 d2,d0,d1 
          VCVT.F32.F64 s0,d2 
          POP  
 {r4,r5,pc} 
          ENDP 
|L0.184| 
          DCD   
 ||.data|| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
897 
|L0.188| 
          DCD   
 0x0019660d 
|L0.192| 
          DCD   
 0x3c6ef35f 
|L0.196| 
          DCD   
 0x000f4240 
|L0.200| 
          DCFD  
 0x412e848000000000 ; 1000000 
          DCD  
 0x00000000 
          AREA ||.data||, DATA, ALIGN=2 
v1 
          DCD  
 0x12345678 
100.6.5  Optimizing GCC 4.9.1（ARM64） 
指令清单 100.8  Optimizing GCC 4.9.1（ARM64） 
f1: 
          adrp 
x2, .LANCHOR0 
          mov  
w3, 26125 
          mov  
w0, 62303 
          movk 
w3, 0x19, lsl 16 
          movk 
w0, 0x3c6e, lsl 16 
          ldr  
w1, [x2,#:lo12:.LANCHOR0] 
          fmov 
s0, 3.0e+0 
          madd 
w0, w1, w3, w0 
          str  
w0, [x2,#:lo12:.LANCHOR0] 
          and  
w0, w0, 8388607 
          orr  
w0, w0, 1073741824 
          fmov 
s1, w0 
          fsub 
s0, s1, s0 
          ret 
mail_function: 
          adrp 
x7, .LANCHOR0 
          mov  
w3, 16960 
          movk 
w3, 0xf, lsl 16 
          mov  
w2, 0 
          fmov 
s2, 3.0e+0 
          ldr  
w1, [x7,#:lo12:.LANCHOR0] 
          fmov 
s3, 1.0e+0 
.L5: 
          mov   
w6, 26125 
          mov   
w0, 62303 
          movk  
w6, 0x19, lsl 16 
          movk  
w0, 0x3c6e, lsl 16 
          mov   
w5, 26125 
          mov   
w4, 62303 
          madd  
w1, w1, w6, w0 
          movk  
w5, 0x19, lsl 16 
          movk  
w4, 0x3c6e, lsl 16 
          and   
w0, w1, 8388607 
          add   
w6, w2, 1 
          orr   
w0, w0, 1073741824 
          madd  
w1, w1, w5, w4 
          fmov  
s0, w0 
          and   
w0, w1, 8388607 
          orr   
w0, w0, 1073741824 
          fmov  
s1, w0 
          fsub  
s0, s0, s2 
          fsub  
s1, s1, s2 
          fmul  
s1, s1, s1 
          fmadd 