Simulated applications and important statistic: the 
number of write errors and read errors occurred when the cycle 
time is reduced to 20% of full voltage swing.
Appln 
cycle
[M] 
DL1
acc.
[M] 
93.4
168.wupwise 260.1
97.5
837.5
171.swim
109.8
492.9
172.mgrid
114.2
173.applu
661.9
147.8
177.mesa
109.8
1845.7 102.8
179.art
1407.6 127.2
183.equake
116.2
762.8
188.ammp
189.lucas
567.2
72.0
111.8
301.apsi
308.6
105.5
FP. Average  729.2
71.8
200.8
164.gzip
175.vpr
682.3
118.8
376.0
176.gcc
126.7
2151.6 20.3
181.mcf
119.5
308.8
186.crafty 
89.2
197.parser
576.8
253.perlbmk 261.5
108.3
115.1
230.4
254.gap
124.8
314.2
255.vortex
100.1
300.twolf
802.7
Int. Average  590.5
99.5
102.5
659.9
Average
Write 
Errors
[K] 
Reg.
writes
[M] 
Reg.
reads
[M] 
550.82 284.55 40.9
344.10 127.46 52.4
285.96 48.28 58.8
284.64 41.53 87.1
339.7 192.92 10.2
309.8 125.65 87.1
436.50 183.93 145.7
501.86 195.35 37.8
338.17 154.46 60.7
571.27 230.48 34.2
396.28 158.46 61.5
480.1 309.7 27.3
428.2 248.9 72.8
459.7 270.5 17.4
260.4 185.3 92.7
450.8 280.5 15.8
498.1 289.8 38.1
419.3 240.4 19.4
459.4 297.9 19.4
317.9 185.1 25.5
518.2 300.5 79.8
429.2 260.9 40.8
329.9 178.0 51.2
Read
Errors
[K] 
43.7
116.2
62.3
93.5
21.9
218.4
189.3
91.7
78.3
41.1
95.6
44.5
99.4
43.9
316.6
35.2
73.2
41.0
36.0
51.1
132.5
87.3
91.5
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
7
integer  registers.  Note 
We  simulate  an  8-way  processor  with  a  16K,  4-way 
associative level 1 data cache, 16K, 2-way associative level 
1  instruction  cache,  and  256K,  4-way  associative  level  2 
cache.  Level  1  caches  have  2  cycle  latencies  and  level  2 
cache  has  18  cycle  latency.  We  simulate  a  register  file 
similar to that of Alpha 21264 [10] with 80 floating point 
and  80 
that  Alpha  has  32 
architectural floating point and integer registers. We used a 
bimodal  branch  predictor  of  size  4K.  Our  base  processor 
has 20 pipeline stages with 7-cycle load loop (similar to the 
Pentium  4).  Errors  that  cannot  be  recovered  empties  the 
pipeline and induces a 1000 cycle extra latency.
We  simulate  10  floating-point  and  10 integer benchmarks 
from  the  SPEC2000  benchmarking  suite.  The  remaining 
benchmarks  are  not  simulated  due  to  the  simulation 
problems  we  have  encountered.  We  simulate  300  Million 
instructions  after  fast-forwarding  an  application-specific 
number  of  instructions  as  proposed  by  Sherwood  et  al. 
[22].  Detailed  characteristics  of  the  applications  are 
presented in Table 1. However, in the rest of the paper, we 
do  not  present  results  for  individual  applications  because 
their  behavior 
to  different 
configurations.  Instead,  we present the average results for 
all the simulated applications. 
5.2  FIT MEASUREMENT
We analyzed the FIT behavior resulting from our schemes 
on the SPEC benchmark programs. We introduced faults in 
the register file guided by the fault occurrence probability 
obtained in equation (4). If the fault is not detected by the 
protection scheme (parity or ECC) it causes an application 
error.
is  similar  with  respect 
Parity
ECC
e
u
l
a
V
I
T
F
e
v
i
t
a
l
e
R
11
10
9
8
7
6
5
4
3
2
1
0
numbers  to  increase  by  approximately  40%  and  20%  for 
ECC  and  parity  protection  schemes,  respectively.  Note 
that,  executing  a  process  with  25%  relative  clock  cycle 
(increasing  the  clock  frequency  by  four  times)  increases 
the FIT of the systems by approximately 200%. Our results 
are a good indication that the total number of failures due 
to  our  optimizations  will  be  limited  even  for  very 
aggressive overclocking of the register file. 
5.3  PERFORMANCE OPTIMIZATION 
We  have  performed  two  sets  of  experiments.  In  the  first 
set, the designer is given a delay constraint for the register 
file.  In  these  experiments,  we  are  trying  to  measure  the 
effects of introduced errors on the overall performance of a 
given  architecture  (the  number  of  execution  cycles). 
Hence, architectural parameters such as pipeline depth are 
kept  constant.  In  the  second  set  of  experiments,  we  are 
given  pipeline  properties  of  a  processor.  We  reduce  the 
register  file  access  times  to  reduce  the  corresponding 
number of pipeline stages.  
Figure  12  summarizes  the  results  for  a  fixed  architecture. 
Each  point  in  the  figure  corresponds  to  the  average 
increase  in  execution  cycles  of  20  SPEC  applications  for 
the simulated scheme/frequency. We see that even with the 
simplest  scheme  (RB)  we  can  reduce  the  cycle  time  by 
more  than  60%  while  keeping  the  penalty  under  1%.  For 
ECC  and  RP,  we  can  increase  the  frequency  by  5  times 
while having 0.14% and 0.12% penalties. 
]
%
[
s
e
l
c
y
c
n
o
i
t
u
c
e
x
e
n
i
e
s
a
e
r
c
n
I
10
1
0.1
0.01
0.001
0.8
0.6
0.4
0.2
ECC
RB
RE
RP
Relative cycle time
Figure 12. Increase in the execution cycles while increasing the 
frequency. Note that the y-axis is in logarithmic scale.
100%
75%
50%
25%
Relative  Clock  Period
s
e
l
]
%
[
10
9
8
7
6
5
4
3
2
1
0
ECC
3
RB
RE
RP
2
Register file access latency
1
Figure 13. Reduction in average execution cycles for applications 
when varying the register file access latency between 4 and 1. 
Figure 11. Increase in the FIT number while increasing the 
frequency.
in  100%  clock  frequency 
Figure  11  presents  the  average  relative  FIT  values  under 
different  relative  clock  frequency  for  parity  and  ecc-
protected  register  file.  The  FIT  value  observed  for  ECC 
based  system  running 
is 
considered  as  the  baseline  case.  The  relative  FIT  value  is 
defined  as  the  change  in  FIT  in  the  corresponding  case 
with  respect  to  the  FIT  of  the  baseline  processor.  We  see 
that reducing the cycle time by 25% (i.e., changing it from 