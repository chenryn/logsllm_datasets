The same origin policy [37] (SOP) dictates which re-
sources a tab may access. For example, a tab is allowed
to load cross-domain images using an img tag, but not
using an XMLHttpRequest.
Unfortunately, we cannot easily verify this policy
since restricting how a resource may be used after it has
been loaded (e.g., in an img tag vs. as a JavaScript value)
requires reasoning across abstraction boundaries, i.e., an-
alyzing the large, complex tab implementation instead of
treating it as a black box.
The SOP also restricts how JavaScript running in dif-
ferent frames on the same page may access the DOM. We
could formally reason about this aspect of the SOP by
making frames the basic protection domains in QUARK
instead of tabs. To support this reﬁned architecture,
frames would own a rectangle of screen real estate which
they could subdivide and delegate to sub-frames. Com-
munication between frames would be coordinated by the
kernel, which would allow us to formally guarantee that
all frame access to the DOM conforms with the SOP.
We only formally prove inter-domain cookie isolation.
Even this coarse guarantee prohibits a broad class of at-
tacks, e.g., it protects all Google cookies from any non-
Google tab. QUARK does enforce restrictions on cookie
access between subdomains; it just does so using WebKit
as unveriﬁed cookie handling code within our cookie
processes. Formally proving ﬁner-grained cookie poli-
cies in Coq would be possible and would not require sig-
niﬁcant changes to the kernel or proofs.
Unfortunately, Quark does not prevent all cookie exﬁl-
tration attacks. If a subframe is able to exploit the entire
tab, then it could steal the cookies of its top-level parent
tab, and leak the stolen cookies by encoding the informa-
tion within the URL parameter of GetURL requests. This
limitation arises because tabs are principles in Quark in-
stead of frames. This problem can be prevented by reﬁn-
ing Quark so that frames themselves are the principles.
Our socket security policy prevents an important sub-
set of cross-site request forgery attacks [9]. Quark guar-
antees that a tab uses a GetURL message when request-
ing a resource from sites whose domain sufﬁx doesn’t
match with the tab’s one. Because our implementa-
tion of GetURL does not send cookies, the resources re-
quested by a GetURL message are guaranteed to be pub-
licly available ones which do not trigger any privileged
actions on the server side. This guarantee prohibits a
large class of attacks, e.g., cross-site request forgery at-
tacks against Amazon domains from non-Amazon do-
mains. However, this policy cannot prevent cross-site
request forgery attacks against sites sharing the same
domain sufﬁx with the tab, e.g., attacks from a tab on
www.ucsd.edu against cse.ucsd.edu since the tab on
www.ucsd.edu can directly connect to cse.ucsd.edu
using a socket and cookies on cse.ucsd.edu are also
available to the tab.
Compatibility Issues. QUARK enforces non-standard
security policies which break compatibility with some
web applications. For example, Mashups do not work
properly because a tab can only access cookies for its
domain and subdomains, e.g., a subframe in a tab can-
not properly access any page that needs user creden-
tials identiﬁed by cookies if the subframe’s domain suf-
ﬁx does not match with the tab’s one. This limitation
arises because tabs are the principles of Quark as op-
posed to subframes inside tabs. Unfortunately, tabs are
too coarse grained to properly support mashups and re-
tain our strong guarantees.
For the same reason as above, Quark cannot currently
support third-party cookies. It is worth noting that third-
party cookies have been considered a privacy-violating
feature of the web, and there are even popular browser
extensions to suppress them. However, many websites
depend on third party cookies for full functionality, and
our current Quark browser does not allow such cookies
since they would violate our non-interference guarantees.
Finally, Quark does not support communications like
“postMessage” between tabs; again, this would violate
our tab non-interference guarantees.
Despite these incompatibilities, Quark works well on a
variety of important sites such as Google Maps, Amazon,
and Facebook since they mostly comply with Quarks’
security policies. More importantly, our hope is that in
the future Quark will provide a foundation to explore all
of the above features within a formally veriﬁed setting.
In particular, adding the above features will require fu-
ture work in two broad directions. First, frames need
to become the principles in Quark instead of tabs. This
change will require the kernel to support parent frames
delegating resources like screen region to child frames.
Second, ﬁner grained policies will be required to retain
appropriate non-interference results in the face of these
new features, e.g.
to support interaction between tabs
via ”postMessage”. Together, these changes would pro-
vide a form of ”controlled” interference, where frames
are allowed to communicate directly, but only in a sanc-
tioned manner. Even more aggressively, one may attempt
to re-implement other research prototypes like Mashu-
pOS [19] within Quark, going beyond the web standards
of today, and prove properties of its implementation.
14
There are also several other features that Quark does
not currently support, and would be useful to add, includ-
ing local storage, ﬁle upload, browser cache, browser his-
tory, etc. However, we believe that these are not funda-
mental limitations of our approach or Quark’s current de-
sign. Indeed, most of these features don’t involve inter-
tab communication. For the cases where they do (for ex-
ample history information is passed between tabs if vis-
ited links are to be correctly rendered), one would again
have to reﬁne the non-interference deﬁnition and theo-
rems to allow for controlled ﬂow of information.
7 Discussion
In this section we discuss lessons learned while develop-
ing QUARK and verifying its kernel in Coq. In hindsight,
these guidelines could have substantially eased our ef-
forts. We hope they prove useful for future endeavors.
Formal Shim Veriﬁcation. Our most essential tech-
nique was formal shim veriﬁcation. For us, it reduced
the veriﬁcation burden to proving a small browser kernel.
Previous browsers like Chrome, OP, and Gazelle clearly
demonstrate the value of kernel-based architectures. OP
further shows how this approach enables reasoning about
a model of the browser. We take the next step and for-
mally prove the actual browser implementation correct.
Modularity through Trace-based Speciﬁcation. We
ultimately speciﬁed correct browser behavior in terms
of traces and proved both that (1) the implementation
satisﬁes the spec and (2) the spec implies our secu-
rity properties. Splitting our veriﬁcation into these two
phases improved modularity by separating concerns. The
ﬁrst proof phase reasons using monads in Ynot to show
that the trace-based speciﬁcation correctly abstracts the
implementation. The second proof phase is no longer
bound to reasoning in terms of monads – it only needs to
reason about traces, substantially simplifying proofs.
This modularity aided us
late in development
when we proved address bar correctness (Theorem
dom_bar_correct in Figure 7). To prove this theorem,
we only had to reason about the trace-based speciﬁca-
tion, not the implementation. As a result, the proof of
dom_bar_correct was only about 300 lines of code,
tiny in comparison to the total proof effort. Thus, prov-
ing additional properties can be done with relatively little
effort over the trace-based speciﬁcation, without having
to reason about monads or other implementation details.
Implement Non-veriﬁed Prototype First. Another
approach we found effective was to write a non-veriﬁed
version of the kernel code before verifying it. This al-
lowed us to carefully design and debug the interfaces be-
tween components and to enable the right browsing func-
tionality before starting the veriﬁcation task.
Iterative Development. After failing to build and ver-
ify the browser in a single shot, we found that an itera-
tive approach was much more effective. We started with
a text-based browser, where the tab used lynx to gener-
ate a text-based version of QUARK. We then evolved this
browser into a GUI-based version based on WebKit, but
with no sockets or cookies. Then we added sockets and
ﬁnally cookies. When combined with our philosophy of
“write the non-veriﬁed version ﬁrst”, this meant that we
kept a working version of the kernel written in Python
throughout the various iterations. Just for comparison,
the Python kernel which is equivalent to the Coq version
listed in Figure 8 is 305 lines of code.
Favor Ease of Reasoning. When forced to choose be-
tween adding complexity to the browser kernel or to the
untrusted tab implementation, it was always better keep
the kernel as simple as possible. This helped manage the
veriﬁcation burden which was the ultimate bottleneck in
developing QUARK. Similarly, when faced with a choice
between ﬂexibility/extensibility of code and ease of rea-
soning, we found it best to aim for ease of reasoning.
8 Conclusions
In this paper, we demonstrated how formal shim veriﬁca-
tion can be used to achieve strong security guarantees for
a modern Web browser using a mechanical proof assis-
tant. We formally proved that our browser provides tab
noninterference, cookie integrity and conﬁdentiality, and
address bar integrity and correctness. We detailed our
design and veriﬁcation techniques and showed that the
resulting browser, QUARK, provides a modern browsing
experience with performance comparable to the default
WebKit browser. For future research, QUARK furnishes
a framework to easily experiment with additional web
policies without re-engineering an entire browser or for-
malizing all the details of its behavior from scratch.
9 Acknowledgments
We thank Kirill Levchenko for many fruitful conversa-
tions regarding shim veriﬁcation. We would also like to
thank our shepherd, Anupam Datta, and the anonymous
reviewers for helping us improve our paper.
References
[1] http://gallium.inria.fr/~dargaye/mlcompcert.html.
[2] Chrome security hall of fame. http://dev.chromium.org/
Home/chromium-security/hall-of-fame.
[3] Public sufﬁx list. http://publicsuffix.org/.
[4] Pwn2own. http://en.wikipedia.org/wiki/Pwn2Own.
[5] AKHAWE, D., BARTH, A., LAMY, P. E., MITCHELL, J., AND
SONG, D. Towards a formal foundation of web security.
In
Proceedings of CSF 2010 (July 2010), M. Backes and A. Myers,
Eds., IEEE Computer Society, pp. 290–304.
15
[6] ANSEL, J., MARCHENKO, P., ERLINGSSON, ´U., TAYLOR, E.,
CHEN, B., SCHUFF, D. L., SEHR, D., BIFFLE, C., AND YEE,
B. Language-independent sandboxing of just-in-time compila-
tion and self-modifying code. In PLDI (2011), pp. 355–366.
[7] BALL, T., MAJUMDAR, R., MILLSTEIN, T., AND RAJAMANI,
S. K. Automatic predicate abstraction of C programs. In Pro-
ceedings of the ACM SIGPLAN 2001 Conference on Program-
ming Language Design and Implementation (Snowbird, Utah,
June 2001).
[8] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust de-
fenses for cross-site request forgery. In ACM Conference on Com-
puter and Communications Security (2008), pp. 75–88.
[9] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust de-
In To appear at the 15th
fenses for cross-site request forgery.
ACM Conference on Computer and Communications Security
(CCS 2008) (2008).
[10] BARTH, A., JACKSON, C., REIS, C., AND THE GOOGLE
CHROME TEAM. The security architecture of the Chromium
browser. Tech. rep., Google, 2008.
[11] BOHANNON, A., PIERCE, B. C., SJ ¨OBERG, V., WEIRICH, S.,
AND ZDANCEWIC, S. Reactive noninterference. In Proceedings
of the 16th ACM conference on Computer and communications
security (2009).
[12] CHEN, E. Y., BAU, J., REIS, C., BARTH, A., AND JACKSON,
C. App isolation: get the security of multiple browsers with just
one. In Proceedings of the 18th ACM conference on Computer
and communications security (2011).
[13] CHEN, S., MESEGUER, J., SASSE, R., WANG, H. J., AND MIN
WANG, Y. A systematic approach to uncover security ﬂaws in
GUI logic. In IEEE Symposium on Security and Privacy (2007).
[14] CHUGH, R., MEISTER, J. A., JHALA, R., AND LERNER, S.
Staged information ﬂow for javascript. In PLDI (2009).
[15] COOK, B., PODELSKI, A., AND RYBALCHENKO, A. Termina-
tor: Beyond safety. In CAV (2006).
[16] DAS, M., LERNER, S., AND SEIGLE, M. ESP: Path-sensitive
program veriﬁcation in polynomial time. In PLDI (2002).
[17] GRIER, C., TANG, S., AND KING, S. T. Secure web browsing
with the OP web browser. In IEEE Symposium on Security and
Privacy (2008).
[18] HENZINGER, T. A., JHALA, R., MAJUMDAR, R., AND SUTRE,
G. Lazy abstraction. In POPL (2002).
[19] HOWELL, J., JACKSON, C., WANG, H. J., AND FAN, X.
MashupOS: operating system abstractions for client mashups. In
HotOS (2007).
[20] HUANG, L.-S., WEINBERG, Z., EVANS, C., AND JACKSON,
C. Protecting browsers from cross-origin css attacks. In ACM
Conference on Computer and Communications Security (2010),
pp. 619–629.
[21] JACKSON, C., AND BARTH, A. Beware of ﬁner-grained origins.
In In Web 2.0 Security and Privacy (W2SP 2008) (May 2008).
[22] JACKSON, C., BARTH, A., BORTZ, A., SHAO, W., AND
BONEH, D. Protecting browsers from dns rebinding attacks.
In ACM Conference on Computer and Communications Security
(2007), pp. 421–431.
[23] JANG, D., JHALA, R., LERNER, S., AND SHACHAM, H. An em-
pirical study of privacy-violating information ﬂows in JavaScript
Web applications. In Proceedings of the ACM Conference Com-
puter and Communications Security (CCS) (2010).
[24] JANG, D., TATLOCK, Z., AND LERNER, S. Establishing browser
security guarantees through formal shim veriﬁcation. Tech. rep.,
UC San Diego, 2012.
16
[25] JANG, D., VENKATARAMAN, A., SAWKA, G. M., AND
SHACHAM, H. Analyzing the cross-domain policies of ﬂash ap-
plications. In In Web 2.0 Security and Privacy (W2SP 2011) (May
2011).
[26] JIM, T., SWAMY, N., AND HICKS, M. Defeating script injec-
tion attacks with browser-enforced embedded policies. In WWW
(2007), pp. 601–610.
[27] KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRONICK, J.,
COCK, D., DERRIN, P., ELKADUWE, D., ENGELHARDT, K.,
KOLANSKI, R., NORRISH, M., SEWELL, T., TUCH, H., AND
WINWOOD, S. seL4: formal veriﬁcation of an OS kernel.
In
SOSP (2009).
[28] LEROY, X. Formal certiﬁcation of a compiler back-end, or: pro-
gramming a compiler with a proof assistant. In PLDI (2006).
[29] MALECHA, G., MORRISETT, G., SHINNAR, A., AND WIS-
NESKY, R. Toward a veriﬁed relational database management
system. In POPL (2010).
[30] MALECHA, G., MORRISETT, G., AND WISNESKY, R. Trace-
J. Symb.
based veriﬁcation of imperative programs with I/O.
Comput. 46 (February 2011), 95–118.
[31] MICKENS, J., AND DHAWAN, M. Atlantis: robust, extensible
execution environments for web applications. In SOSP (2011),
pp. 217–231.
[32] MORRISETT, G., TAN, G., TASSAROTTI, J., TRISTAN, J.-B.,
AND GAN, E. Rocksalt: Better, faster, stronger sﬁ for the x86. In
PLDI (2012).
[33] NANEVSKI, A., MORRISETT, G., AND BIRKEDAL, L. Poly-
morphism and separation in Hoare type theory. In ICFP (2006).
[34] NANEVSKI, A., MORRISETT, G., SHINNAR, A., GOVEREAU,
P., AND BIRKEDAL, L. Ynot: Dependent types for imperative
programs. In ICFP (2008).
[35] PROVOS, N., FRIEDL, M., AND HONEYMAN, P. Preventing
In Proceedings of the 12th conference on
privilege escalation.
USENIX Security Symposium - Volume 12 (2003), USENIX As-
sociation.
[36] RATANAWORABHAN, P., LIVSHITS, V. B., AND ZORN, B. G.
Nozzle: A defense against heap-spraying code injection attacks.
In USENIX Security Symposium (2009), pp. 169–186.
[37] RUDERMAN,
J.
http://www.mozilla.org/projects/security/
origin.html.
The
same
origin
policy,
2001.
components/same-
[38] SAXENA, P., AKHAWE, D., HANNA, S., MAO, F., MCCA-
MANT, S., AND SONG, D. A symbolic execution framework for
javascript. In IEEE Symposium on Security and Privacy (2010),
pp. 513–528.
[39] SINGH, K., MOSHCHUK, A., WANG, H. J., AND LEE, W. On
the incoherencies in web browser access control policies. In IEEE
Symposium on Security and Privacy (2010), pp. 463–478.
[40] STAMM, S., STERNE, B., AND MARKHAM, G. Reining in the
web with content security policy. In Proceedings of the 19th in-
ternational conference on World wide web (2010), WWW ’10,
pp. 921–930.
[41] TANG, S., MAI, H., AND KING, S. T. Trust and protection in the
illinois browser operating system. In OSDI (2010), pp. 17–32.
[42] WANG, H. J., GRIER, C., MOSHCHUK, A., KING, S. T.,
CHOUDHURY, P., AND VENTER, H. The multi-principal OS
construction of the gazelle web browser. Tech. Rep. MSR-TR-
2009-16, MSR, 2009.
[43] YANG, X., CHEN, Y., EIDE, E., AND REGEHR, J. Finding and
understanding bugs in C compilers. In PLDI (2011).
[44] YU, D., CHANDER, A.,
I.
Javascript instrumentation for browser security. In POPL (2007),
pp. 237–249.
ISLAM, N., AND SERIKOV,