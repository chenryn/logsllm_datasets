title:Let's Encrypt: An Automated Certificate Authority to Encrypt the Entire
Web
author:Josh Aas and
Richard Barnes and
Benton Case and
Zakir Durumeric and
Peter Eckersley and
Alan Flores-L&apos;opez and
J. Alex Halderman and
Jacob Hoffman-Andrews and
James Kasten and
Eric Rescorla and
Seth D. Schoen and
Brad Warren
Let’s Encrypt: An Automated Certificate
Authority to Encrypt the Entire Web
Josh Aas∗
Let’s Encrypt
Zakir Durumeric
Stanford University
J. Alex Halderman∗†
University of Michigan
Eric Rescorla∗
Mozilla
Richard Barnes∗
Cisco
Peter Eckersley∗
Electronic Frontier Foundation
Jacob Hoffman-Andrews∗
Electronic Frontier Foundation
Seth Schoen∗
Electronic Frontier Foundation
Benton Case
Stanford University
Alan Flores-López
Stanford University
James Kasten∗
University of Michigan
Brad Warren∗
Electronic Frontier Foundation
ABSTRACT
Let’s Encrypt is a free, open, and automated HTTPS certificate au-
thority (CA) created to advance HTTPS adoption to the entire Web.
Since its launch in late 2015, Let’s Encrypt has grown to become the
world’s largest HTTPS CA, accounting for more currently valid cer-
tificates than all other browser-trusted CAs combined. By January
2019, it had issued over 538 million certificates for 223 million do-
main names. We describe how we built Let’s Encrypt, including the
architecture of the CA software system (Boulder) and the structure
of the organization that operates it (ISRG), and we discuss lessons
learned from the experience. We also describe the design of ACME,
the IETF-standard protocol we created to automate CA–server inter-
actions and certificate issuance, and survey the diverse ecosystem
of ACME clients, including Certbot, a software agent we created to
automate HTTPS deployment. Finally, we measure Let’s Encrypt’s
impact on the Web and the CA ecosystem. We hope that the success
of Let’s Encrypt can provide a model for further enhancements to
the Web PKI and for future Internet security infrastructure.
CCS CONCEPTS
• Networks → Web protocol security; • Security and privacy →
Security services; Usability in security and privacy.
ACM Reference Format:
Josh Aas, Richard Barnes, Benton Case, Zakir Durumeric, Peter Eckersley,
Alan Flores-López, J. Alex Halderman, Jacob Hoffman-Andrews, James
Kasten, Eric Rescorla, Seth Schoen, and Brad Warren. 2019. Let’s Encrypt:
An Automated Certificate Authority to Encrypt the Entire Web. In 2019
ACM SIGSAC Conference on Computer and Communications Security (CCS
’19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY,
USA, 15 pages. https://doi.org/10.1145/3319535.3363192
∗Members of Let’s Encrypt originating team.
†To whom correspondence may be addressed at jhalderm@eecs.umich.edu.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3363192
1 INTRODUCTION
HTTPS [78] is the cryptographic foundation of the Web, providing
an encrypted and authenticated form of HTTP over the TLS trans-
port [79]. When HTTPS was introduced by Netscape twenty-five
years ago [51], the primary use cases were protecting financial
transactions and login credentials, but users today face a growing
range of threats from hostile networks—including mass surveil-
lance and censorship by governments [99, 106], consumer profiling
and ad injection by ISPs [30, 95], and insertion of malicious code
by network devices [68]—which make HTTPS important for prac-
tically every Web request. Many cryptographic flaws in TLS have
been discovered and mitigated (e.g., [11, 13, 17, 23, 37, 69]), but low
adoption of HTTPS posed an even starker risk: as recently as 2015,
55–70% of browser page loads used plaintext HTTP [47].
A major barrier to wider HTTPS adoption was that deploying
it was complicated, expensive, and error-prone for server opera-
tors [22, 57]. Most of the difficulty involved interactions with Certifi-
cate Authorities (CAs), entities trusted by Web browsers to validate
a server’s identity and issue a digitally signed certificate binding the
identity to the server’s public key. (Modern TLS implementations
have negligible performance overhead in typical applications [48,
59].) To obtain and install a certificate, a server operator had to use
arcane key generation software and configuration directives, follow
manual steps to prove control of the domain name, and complete
a payment transaction to a CA. The process was burdensome for
smaller sites and difficult to integrate into large hosting platforms.
To reduce these barriers, facilitate broad adoption of HTTPS,
and improve security for all Web users, we created Let’s Encrypt,
a CA that offers domain-validated certificates through a standard
protocol at no cost to server operators. Let’s Encrypt is the first
browser-trusted CA designed for complete automation: identity
validation and certificate issuance are fully robotic, and neither
Web server operators nor CA staff need to take any manual steps.
Automation serves several goals for Let’s Encrypt. On the Web
server side, it greatly reduces the human effort required for HTTPS
deployment, along with the concomitant risk of configuration errors
that can lead to security problems [9, 14]. Automated support for
Let’s Encrypt has been integrated into Web server software [40, 67],
IOT devices [16], large host platforms [71, 75], and CDNs [12].
Session 10E: CertificatesCCS ’19, November 11–15, 2019, London, United Kingdom2473On the CA side, automation bolsters security by reducing op-
portunities for human error, historically a frequent cause of misis-
suance events [86]. The only way for Let’s Encrypt to validate a
domain and issue a certificate is through the normal API; there is no
manual override. Moreover, avoiding human intervention allows
Let’s Encrypt to keep the cost-per-certificate low and provide cer-
tificates at no charge. This eliminates two important impediments
to HTTPS adoption: financial burdens and payment friction.
We designed Let’s Encrypt to scale to the size of the entire Web.
In just over three years of operation, it has issued more than 538
million certificates covering 223 million domain names. Today, there
are more currently valid browser-trusted certificates issued by Let’s
Encrypt than issued by all other CAs combined.
This paper reports on our experiences building Let’s Encrypt over
the past seven years. We focus on three main results of that work:
ISRG Let’s Encrypt is operated by an independent nonprofit we
established called the Internet Security Research Group (ISRG).
Running a CA requires round-the-clock operations staff, physically
protected server infrastructure, and regular security and compli-
ance audits, all of which ISRG oversees. Section 3 describes the
organization’s history and structure, its operating costs and fund-
ing model, and how it navigated becoming a trusted issuer and
gaining acceptance in all major root programs.
ACME The key to Let’s Encrypt’s automation is ACME, a pro-
tocol for performing CA–server interactions, including certificate
requests, domain validation, issuance, renewal, and revocation. Sec-
tion 4 explains the principles behind ACME’s design and operation,
along with lessons learned while building it. ACME has recently
been standardized by the IETF as RFC 8555 [20].
Boulder Let’s Encrypt is powered by Boulder, an open-source
ACME-based CA implementation designed for security, scalability,
and high reliability. Section 5 describes Boulder’s architecture, in-
cluding design features motivated by past CA security failures, and
discusses how Let’s Encrypt operates Boulder in production.
Over the four years since Let’s Encrypt launched, the fraction
of browser page-loads that take place over HTTPS has approxi-
mately doubled, to 72–95%, according to telemetry from Google
Chrome [47]. To shed light on how Let’s Encrypt’s has contributed
to and helped shape this growth, we combine the CA’s metrics with
data from Internet-wide scans and Certificate Transparency logs
(Sections 6 and 7). We find that more than a third of Alexa Top
Million sites use Let’s Encrypt, and Let’s Encrypt is the fourth most
popular CA in terms of handshakes from Firefox Beta users. We also
survey the diverse ecosystem of ACME clients that Web servers
and hosting providers use to acquire Let’s Encrypt certificates, and
describe the widely used ACME client we created, Certbot.
We hope that the success of Let’s Encrypt can serve as a model for
future efforts to create usable, scalable, and robust Internet security
infrastructure. To help guide such efforts, Section 8 discusses some
of the factors that we believe helped Let’s Encrypt succeed where
other proposals to provide universal server authentication have not.
We also discuss major challenges facing the Web that Let’s Encrypt
has not solved—including combating phishing and securing domain
validation against network attacks—and call for further security
research to address them.
2 HTTPS BEFORE & AFTER LET’S ENCRYPT
HTTPS provides a simple experience for browser users: so long as
the server presents a valid certificate that the browser trusts, users
receive the benefits of an authenticated and encrypted connection
without taking any action. For server operators, however, provi-
sioning HTTPS had long been far more difficult. In this section, we
review the state of affairs prior to Let’s Encrypt’s launch in late 2015,
and we highlight several challenges inhibiting widespread HTTPS
deployment that Let’s Encrypt is designed to help overcome.
2.1 Certificate Costs and Marketplace
High prices for certificates were (and still are) common, as shown
in Table 1. In 2015, the average price for a one-year single-domain
certificate from the five largest CAs was $178, and for a wildcard
certificate it was $766. (Prices for the same products from these CAs
today are the same or higher.) Lower-cost alternatives did exist,
but often came with significant limitations; because browsers treat
all domain-validated certificates identically, they were the subject
of extensive market segmentation by the CAs. One CA, StartCom
offered free certificates for non-commercial use starting in 2011;
however, it charged for revocation, which proved to be a source of
problems when Heartbleed [37] forced many sites to revoke [108].
Beyond high prices, the certificate marketplace was complex and
difficult for server operators to navigate, as evinced by the existence
of third-party review sites such as SSL Shopper [91], which helped
administrators compare prices and value for CA products. CAs often
bundled certificates with additional services such as “vulnerability
assessment scans” [92] and warranties covering losses to relying
parties if the certificate was issued in error [45]. These add-ons
could make it harder for customers to assess the true value of
certificates. Some CAs even charged higher prices for certificates on
keys that used more modern cryptographic algorithms; for example,
Symantec charged $597 more per year to issue a certificate for an
elliptic curve key [27] than for an RSA key [92].
Let’s Encrypt offers domain-validated certificates for all domains
at no cost. This eliminates financial barriers to HTTPS adoption
and greatly lessens friction from confusion and transaction costs.
2.2 Obtaining and Installing a Certificate
Prior to our work, the process of obtaining a certificate and config-
uring an HTTPS server was often manual and tedious [22]. First,
system administrators had to recognize that they needed a certifi-
cate and navigate the confusing marketplace. Then they had to
Certificate Authority
GoDaddy [45, 46]
Comodo/Sectigo [31, 85]
GeoTrust [43, 44]
DigiCert [32, 33]
Symantec [92, 93]
Mid-2015 Prices
Single Wildcard
$332
$404
$499
$595
$1999
$69
$76
$149
$195
$399
Mid-2019 Prices
Single Wildcard
$369
$422
$688
$653
$1999
$79
$92
$149
$207
$399
Table 1: Prices for a one-year certificate for non-free CAs with the
largest market shares. Single domain offerings are domain-validated; wild-
card offerings sometimes require organization validation. The 2015 prices
are from shortly before Let’s Encrypt began offering service to the public.
Session 10E: CertificatesCCS ’19, November 11–15, 2019, London, United Kingdom2474generate a private key, create a certificate signing request (CSR),
and perform the verification steps required by the CA. After waiting
(sometimes for days or more) for the CA to issue the certificate, they