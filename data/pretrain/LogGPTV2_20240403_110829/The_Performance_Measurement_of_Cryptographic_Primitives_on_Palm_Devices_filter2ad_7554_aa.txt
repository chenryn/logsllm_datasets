title:The Performance Measurement of Cryptographic Primitives on Palm Devices
author:Duncan S. Wong and
Hector Ho Fuentes and
Agnes Hui Chan
The Performance Measurement of Cryptographic Primitives on Palm Devices 
Duncan S. Wong, Hector Ho Fuentes and Agnes H. Chan
College of Computer Science
Northeastern University
Boston, MA 02115, USA
(cid:1)swong, hhofuent, ahchan(cid:2)@ccs.neu.edu
Abstract
We developed and evaluated several cryptographic sys-
tem libraries for Palm OS which include stream and
block ciphers, hash functions and multiple-precision integer
arithmetic operations. We noted that the encryption speed
of SSC2 outperforms both ARC4 (Alleged RC4) and SEAL
3.0 if the plaintext is small. On the other hand, SEAL 3.0
almost doubles the speed of SSC2 when the plaintext is con-
siderably large. We also observed that the optimized Rijn-
dael with 8KB of lookup tables is (cid:1) times faster than DES.
In addition, our results show that implementing the cryp-
tographic algorithms as system libraries does not degrade
their performance signiﬁcantly. Instead, they provide great
ﬂexibility and code management to the algorithms. Further-
more, the test results presented in this paper provide a basis
for performance estimation of cryptosystems implemented
on PalmPilotTM.
1. Introduction
With the continuous growth of the Internet and the ad-
vancement of wireless communications technology, hand-
held devices such as the Palm devices are also experienc-
ing booming demands for accessing information and get-
ting connected with the Internet anytime, anywhere. At the
same time, users are expecting secure data transmission and
storage on these devices, which in turn require handheld de-
vices to provide efﬁcient cryptographic algorithms.
Many cryptographic algorithms, which are simple and
efﬁcient to implement on high-performance microproces-
sors such as those found in current desktop computers, may
not be implementable efﬁciently on smaller and less power-
ful microprocessors found in low-power handheld devices.
We will see shortly that some cryptographic operations,
which take only a few milliseconds or less and are widely
used in securing data, performing authentication and in-
tegrity check on desktop machines, may spend seconds or
even minutes to carry out on a PalmPilot. Furthermore, the
memory space on low-power handheld devices are usually
limited which may also introduce new challenges on the im-
plementation of cryptosystems. Hence it is critical for users
to choose appropriate algorithms for the implementation of
cryptosystems on low-power devices.
We developed several cryptographic system libraries for
Palm OS which include the following algorithms:
Stream Ciphers We tested the encryption speed of three
stream ciphers: SSC2 [11], ARC4 (Alleged RC4)1 and
SEAL 3.0 [7].
Block Ciphers Various modes of some block ciphers have
been tested. The algorithms surveyed in this paper are
Rijndael [1], DES and its variants such as DESX and
Triple-DES.
Hash Functions Several widely used hash functions are
evaluated such as MD2 [3], MD4 [5], MD5 [6] and
SHA-1 [4].
Multiple-precision Integer Arithmetic Operations
These operations are the core in most public-key
cryptographic implementations which involve integers
hundreds of digits long. We wrote a system library
called MPLib2 and tested its performance on some
commonly used operations.
In the following sections, we give speed measurement
results of these algorithms. These results help determine if
a cryptographic system is feasible for the PalmPilot or if
it is too complex. They can also be used to estimate the
performance of a system or a protocol which is constructed
This work was sponsored by the U. S. Air Force under contracts
F30602-00-2-0536 and F30602-00-2-0518.
1http://www.achtung.com/crypto/arcfour.txt
2http://www.ccs.neu.edu/home/swong/MPLib
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:01 UTC from IEEE Xplore.  Restrictions apply. 
based on these algorithms. Our purpose here is to investi-
gate the viability of using these cryptographic primitives on
low-power handheld devices.
In this paper, we describe the whole gamut of the tests
from design to analysis. First we provide information on the
hardware and software of the test platforms. Then we ex-
plain the test methodologies, followed by the test details of
each algorithm we conducted. In the last section, we sum-
marize the results and point out the viability of employing
each of them on a low-power handheld device.
2. Test Platforms and System Libraries
Tests were conducted on a 2MB Palm V and a 8MB
Palm IIIc running on a 16MHz and a 20MHz Mo-
torola DragonBall-EZ (MC68EZ328) microprocessor re-
spectively. The processor has a 68K core which implements
the standard Motorola 68K instruction set architecture and
is in big Endian architecture. There are 16 general purpose
32-bit registers. Details of the processors can be found at
Motorola’s web site3. The RAM of a Palm device is divided
into two logical areas: storage and dynamic. The storage
area keeps all the databases, and is analogous to disk stor-
age on a typical desktop system. The dynamic area holds
the kernel’s globals, dynamic allocations as well as appli-
cation programs’ globals, stacks and dynamic allocations.
The size of the dynamic area on a particular device varies
according to the running OS version, the amount of phys-
ical RAM available, and the requirements of pre-installed
software such as the TCP/IP stack or IrDA stack. For Palm
V and IIIc, running Palm OS v3.3 and v3.5 respectively, the
dynamic heap sizes are 128KB and 256KB. However not
all the dynamic heap space can be used by an application
program. For example there are only 56KB of the dynamic
heap that can be used by applications in a Palm V. The re-
maining 72KB are reserved for the system and the TCP/IP
stack. More information can be found at Palm, Inc.’s Hard-
ware Comparison Matrix webpage4 and Palm OS Memory
Architecture (Take Two: 3.0 and Beyond) 5.
We used Metrowerks CodeWarrior for Palm OS Release
6 as the Integrated Development Environment (IDE) and the
compiler. The version of Palm SDK was 3.5. Also, Palm,
Inc.’s Constructor for Palm OS version 1.2b7 was used for
creating the user interface. During compilation, the follow-
ing settings were selected:
(cid:1) 68K Processor Code Model: Small
(cid:1) Global Optimizations
– Optimize For: Faster Execution Speed
– Optimization Level: 4
3http://www.motorola.com/SPS/WIRELESS/pda/index.html
4http://www.palmos.com/dev/tech/hardware/compare.html
5http://oasis.palm.com/dev/kb/papers/1145.cfm
2.1. System Libraries
All the algorithms we discussed here were implemented
as system libraries. System libraries are supported by Palm
OS SysLib* API calls and are ofﬁcially described in Palm
OS FAQ Shared Libraries and Other Advanced Project
Types6. Further details can be found in Ian Goldberg’s arti-
cle, Shared libraries on the Palm Pilot7. A system library
is a runtime shared library which allows multiple applica-
tions using the common library functions dynamically with-
out having to have a copy of the code in each application’s
code resource. Shared libraries in general can also help
to overcome two memory constraints of Palm OS, namely
the 32KB jump limit (of the CodeWarrior default model)
and the code resource size limit. From software engineer-
ing point of view, system libraries also provide better code
management and help developers to write efﬁcient and ro-
bust code because the functions in a system library can be
tested, modiﬁed and upgraded independently.
On the other hand, if the cryptographic algorithms are
implemented inside each application program, then they
usually achieve better performance. We call this type of
implementation as the bundled version of an algorithm. For
system library based implementation, all library functions
are invoked as system calls by the applications. Hence a
system trap instruction is executed when a library function
is called. Now if an algorithm is implemented in the ap-
plication code resource, it is also in user mode as the rest
of the application code does. Therefore it saves time from
executing the system trap related instructions. Furthermore,
for the bundled version of algorithms, the compiler can now
parse the code of the algorithms in conjunction with the
application code to achieve further optimization which is
not possible for system libraries because the algorithms are
treated as system calls in the applications. In our tests, we
found a slight but not signiﬁcant improvement on the per-
formance of the algorithms when they were in bundled ver-
sion.
Another type of shared libraries is called GLib 8, which
is more user-friendly (or programmer-friendly) than the sys-
tem library mentioned above and is also faster because no
system traps are used when calling the GLib functions.
However, as of this writing, neither CodeWarrior nor the lat-
est version of PRC-Tools supports GLibs. Only PRC-Tools
0.5.0 and Michael Sokolov’s 0.6.0 beta 9 do so. We choose
to implement the algorithms as system libraries for ease of
adaptation to later versions of Palm OS and to developing
tools.
6http://oasis.palm.com/dev/kb/papers/1143.cfm
7http://www.isaac.cs.berkeley.edu/pilot/shlib.html
8http://www.isaac.cs.berkeley.edu/pilot/GLib/GLib.html
9http://www.escribe.com/computing/pcpqa/m9618.html
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:01 UTC from IEEE Xplore.  Restrictions apply. 
3. Methodology
Performance measurements were conducted by deter-
mining the amount of time required to perform crypto-
graphic operations of an algorithm. We measured how
many bytes of data could be encrypted in one second for
ciphers and how many bytes of data could be digested per
second for hash functions. For multiple-precision integer
arithmetic operations, we measured the time taken to per-
form a particular operation. We used the TimGetTicks
function provided by the Palm OS time-manager API to cal-
culate the processor time consumed in the execution of the
algorithms. TimGetTicks is a System Tick function. A
Palm device maintains a tick count which increments 100
times per second when the Palm device is in doze or in the
running mode. This 0.01-second timer is initialized to zero
every time when the device is reset. Since the rate of the
tick count is not so high, several iterations of the same op-
eration are required to be carried out in order to achieve a
ﬁner resolution on the speed of that operation. The details
are given as follows.
For each algorithm, a number of tests were conducted
where the time taken for each test was recorded as a sample.
For each sample, a speciﬁc cryptographic primitive opera-
tion was executed for a number of times. The number of
times the operation executed is called the number of calls
per sample. Upon completion of the execution, the sam-
ples were sorted and the median time value was determined.
Then the standard deviation was calculated. Samples that
fell outside a pre-speciﬁed range of standard deviation from
the median were discarded. The remaining sample values
were used to compute the average speed of the algorithm.
Pseudo code for generating the timing information of an en-
cryption algorithm is shown below.
(t = 0; t < samples; t++);
(Start Timer)
(c = 0; c < calls; c++);
makeKey();
cipherInit();
Encrypt(data of a pre-specified size);
(Stop Timer)
4. Stream Ciphers
For stream ciphers and block ciphers (Section 5), we
measured their performance according to the time taken for
each cipher to encrypt a block of data. We used three dif-
ferent sizes of data blocks to do the encryption tests:
2KB A small data block such as a single webpage down-
loaded via a secure channel.
50KB This block size is comparable to the size of a
database such as a secure application database (e.g. a
phonebook) or an application program itself.
4MB This size is even bigger than the total RAM available
on some Palm devices. It refers to the downloading of
some data stream to a Palm device in realtime.
Each test program generated 30 samples, each of which
made 512 calls. All accepted samples were within 3 stan-
dard deviation range.
4.1. SSC2
SSC2 [11] is a software-efﬁcient stream cipher designed
for low-power wireless handsets.
It supports various key
sizes from 32 bits to 128 bits. All operations in SSC2 are
word-oriented (32-bit word) and therefore the keystream
generated by SSC2 can also be considered as a word se-
quence. The word sequence is then added modulo-2 to the
words of a plaintext in the manner of a Vernam cipher to get
the ciphertext. The algorithm, which consists of three main
operations, is shown in the following pseudo code.
(Master key generation)
(i = 0; i < message_size_in_words; i++);
(keystream generation -- one word at a time)
(bitwise XOR keystream word and plaintext word)
Table 1 shows the results of running SSC2 system library on
Palm V and Palm IIIc. These results also include the time
for master key generation.
Message
Size
2KB
50KB
4MB
Throughput (bytes/sec)
Palm V
32,604
35,804
35,501
Palm IIIc
44,582
49,829
49,434
Table 1. Performance of SSC2 System Library
For keystream generation alone, we recorded the average
throughput of 189,046 bytes/sec and 136,533 bytes/sec on
Palm IIIc and Palm V respectively. In addition, the bun-
dled version of SSC2 was about 0.6% to 3% faster than the
system library implementation.
Since the SSC2 algorithm operates on words, an appro-
priate byte ordering conversion may be needed when con-
verting a byte-stream to a 32-bit word-stream and vice versa
for interoperability among different system platforms. The
Big Endian architecture of the Motorola DragonBall mi-
croprocessor favors the conversion. An architecture inde-
pendent implementation of SSC2 is only about 82% of the
speed of a Big Endian architecture optimized code and is
slower than ARC4.
On the memory requirement, it takes only 21 words to
store the four stages of the LFSR and the 17 stages of the
lagged-Fibonacci generator. Hence it is suitable for appli-
cations under severely limited memory conditions.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:05:01 UTC from IEEE Xplore.  Restrictions apply. 
4.2. ARC4
RC410 is another software-optimized variable-key-size
stream cipher whose detailed algorithm is proprietary. In
September 1994, the source code of ARC4 (Alleged RC4)
was made available to ftp sites around the world. It is gener-
ally accepted that ARC4 is comparable to RC4. We ported
ARC411 to the Palm system library and measured its en-
cryption speeds with respect to different data block sizes.
The results are shown in Table 2.
Message
Size
2KB
50KB
4MB
Throughput (bytes/sec)
Palm V
30,768
32,100
31,699
Palm IIIc
42,281
45,110
44,501
Table 2. Performance of ARC4 System Library
Results show that ARC4 is very efﬁcient and can be a
good candidate for data encryption on Palm devices as well.
It requires 256 bytes to store a state array which is bigger
than the memory requirement of SSC2. A bundled version
of ARC4 achieved 3% to 5% improvement in speed.
4.3. SEAL 3.0
SEAL 3.0 [7] is a stream cipher which is optimized for
32-bit processors. The cipher is a pseudorandom function
family which is under control of a key. The cipher stretches
a 32-bit position index into a long, pseudorandom string
which can then be used as the keystream of a Vernam ci-
pher. In order to make the cipher run well, we need to allo-
cate a memory chunk which is slightly over 3KB for a set
of tables. These tables are preprocessed from the key and
are used to speed up the keystream generation process.
We ﬁrst ported the SEAL 1.0 code obtained from Bruce
Schneier’s book Applied Cryptography [8], then we modi-
ﬁed the code so that it conformed with SEAL 3.0. In our
tests, the parameters of SEAL((cid:1)(cid:2) (cid:2) ) were set to: (cid:1) (cid:2) (cid:3)(cid:4)(cid:5)
bits;  (cid:2) (cid:6)(cid:7) bits and  (cid:2) (cid:1)(cid:5)(cid:8)(cid:4) bytes. For simplicity and
speed, each call to the SEAL keystream generator prepares
one keystream block of 4KB long. Hence the program also