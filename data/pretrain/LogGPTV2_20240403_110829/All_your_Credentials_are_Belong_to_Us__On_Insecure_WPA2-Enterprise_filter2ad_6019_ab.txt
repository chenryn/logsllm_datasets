purple in color), and the ones that are not immediately vulnerable
are represented with rounded rectangles (blue in color). Nodes are
ranked according to their relative robustness, and a directed edge
from node A to node B means B Cl.forδPurpleedges:{P,M}>NforγBlackedges:Sp.>Sys.forβRededges:Ob.>Cl.forδ(specialcase)Greenedges:{P,M}>NforαBluenodes:noimmediateattacksPurplenodes:exploitabilitydependsonissuingpoliciesofanchoringCAsRed nodes: susceptible to ET attacksα: rejection of invalid certsβ: trust anchorγ: server name checkingδ: phase-2 methodSession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1104Table 1: Design weaknesses across OSs
OS
Android 6-
Android 7+
Chrome OS
Chrome OS
Chrome OS
Chrome OS
Windows 10
Windows 10
Issues
Implications
The UI lacks an input box for specifying the correct server name of the certificate.
Server name becomes optional when a specific CA is chosen as the trust anchor.
The UI lacks an input box for specifying the correct server name of the certificate.
Domain name checking (possible only via profiles) uses a substring matching logic.
Inconsistent default setting for CA certificate depending on the UI entry points.
The UI shows “Do not check” after importing a profile with multiple CA certificates.
Configurations vulnerable to ET attacks if commercial CAs are used as the trust anchor.
Possibility of insecure configurations if commercial CAs are used as trust anchor.
Configurations vulnerable to ET attacks if commercial CAs are used as the trust anchor.
Attackers can easily obtain attack certificates which satisfy the name checking condition.
Potential confusion and misconfiguration for users who do not understand the subtleties.
Gives a misleading perception that the configuration is not validating the server certificate.
The short timeout hinders manual checking of the certificate thumbprint.
The certificate thumbprint is the SHA1 hash digest of the certificate.
Frustrating the users into continuing the connection without checking the thumbprint.
Resourceful attackers can compute and leverage hash collision for impersonation attacks.
Windows 7&10 By default, detailed configurations fall back to simple alerts and can be overridden. Users might ignore the alerts, render the original configuration pointless and open doors to attacks.
iOS
macOS
The UI marks any server certificate as "Not Trusted" with a red-colored warning text.
Self-signed CA certificates in a pre-configured profile given full trusts after import.
Confusing the users into blindly trusting any server certificates.
Installing profiles can open doors to many other attacks, e.g., MITM against HTTPS & IPSec.
and the user later wants to modify the settings of that connection,
the configuration UI would display “Do not check”, even though
the (P, Sp., _, _) behavior still persists under the hood. This could
create confusions with the users and mislead them into thinking
that the “Do not check” option (α = N) is recommended. We filed 4
separate bug reports regarding these issues and all were confirmed
by the Chrome OS developers. The missing input box issue has a
ranking of low severity, and the other 3 issues all got a ranking of
medium severity. CVE-2021-21212 has been assigned for the issue
of inconsistent default setting.
4.3 Windows
4.3.1 Configurations supported. We mainly consider Windows 10
and 7, as both of them currently have a sizable market share. Inter-
estingly, their UI behaviors are quite different. The configurations
supported by Windows 10 and 7 are shown in Fig. B1a and Fig. B1b
in Appendix. For both versions of Windows, there are 2 possible
UIs that can be used to setup Wi-Fi, which we refer to as the Sim-
ple UI and Traditional UI. In both cases, the inner authentication
method defaults to MSCHAPv2 (δ = Ob.). From the Simple UI, it
is not possible to choose a different phase-2 method, but on the
Traditional UI, additional methods like PAP and EAP-GTC can be
chosen if one first installs some third party plugins (δ = Cl.). Such
plugins are used quite extensively in certain countries/regions.
On Windows 10, the Simple UI can be launched directly from the
Wi-Fi icon in the system tray. There are no checkboxes, dropdown
menus, or input boxes for the user to indicate the preferred trust
anchors and server names. Instead, it will ask if the user wants to
continue connecting through an in place prompt. Blindly continu-
ing means no server name checking would be performed (γ = N)
and no invalid certificates would be rejected (α = N). Alternatively,
the server identity can be confirmed by first clicking the “Show
certificate details” link in the prompt and then matching the dis-
played SHA-1 digest of the certificate against some known values
(SHA1(AM, Sp., M, Sp.)). Newer versions of Windows 10 (since ver-
sion 2004) also display the issuer and subject name of the server
certificate along side with the SHA-1 digest. While this makes the
UI more informative, however, without a prior validity check, those
names cannot be relied upon as they can be chosen arbitrarily by
an attacker when crafting certificates for impersonation attacks.
On the other hand, the simple UI of Windows 7 will not display
the hash digest of the server certificate, but instead has an implicit
α = P ∧ β = Sys. logic, that is, if the server certificate cannot be
validated by any of the trust anchors in the system CA store, it
will be automatically rejected. Only if the server certificate passed
through the initial validation check, then further alert windows
will be shown to allow the user to possibly check the name of
the server ceritifcate (γ = M) and the anchor of the chain of trust
(α = AM∧β = Sp.). It is also possible to just blindly continue without
inspecting the server name (γ = N) or the trust anchor shown on
the alert windows.
The traditional UI of Windows 10 and 7 can be invoked from
“Control Panel” and they are very similar. Both offer an optional in-
put box for the expected server name to be checked programatically
(γ = P), one checkbox for each trusted CA in the system CA store
for selecting the preferred trust anchors (β = Sp.), and a checkbox
for disabling certificate validation completely, which would also
disable hostname checking (α = N ∧ γ = N).
4.3.2 Design weaknesses. There are several issues that we iden-
tified with the design of the Windows 10 UI. First, regarding the
Simple UI, the reliance of SHA-1 digest alone as the basis for con-
firming server identity provides a questionable level of security, as
a collision attack against SHA-1 has already been demonstrated by
previous work [55]. Moreover, we found that the user is given a
meagre 20-second period to decide whether to continue with the
connection when using the Simple UI. When the system times out,
the user will have to reenter the username and password, and get
another 20-second opportunity to decide. Based on the personal
experience of our team members, it is nearly impossible to match
the SHA-1 digest (20 bytes each, encoded into 40 hexadecimal char-
acters for display) before timeout. This could lead to frustrations
and the user may end up blindly continuing without performing the
verification. We reported these 2 issues to the Microsoft Security
Response Center, but they dismissed our report on the grounds that
those appear to be product suggestions and are not vulnerabilities.
Finally, we note that on both Windows 10 and 7, there is a subtle
option on the Traditional UI that needs to be explicitly disabled
by the user in order to enforce the validation behavior specified
in the Traditional UI (e.g., α = P, γ = P, etc.). Otherwise, when
the OS receives a server certificate that is untrusted or contains
unexpected names, it will by default fall back to the Simple UI. This
is particularly detrimental for Windows 10, as unlike Windows 7,
it does not have an implicit α = P ∧ β = Sys. logic, and the SHA-1
digest on the Simple UI is prone to collision attacks. Unfortunately,
this subtle option is sometimes overlooked by instructions that we
evaluate in Section 5, leading to insecure configurations.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea11054.4 macOS and iOS
4.4.1 Configurations supported. For macOS and iOS, we consider
version 10.15 and 13.6, respectively, which are the latest versions at
the time of writing. Despite aesthetic differences, the two are quite
similar in spirit when it comes to configuring WPA2-Enterprise. The
configuration and verification possibilities supported by the two are
basically the same, as shown in Figure B1c in Appendix. Without
the use of profiles, both macOS and iOS rely heavily on human
intervention for certificate validation and server name checking.
No drop-down menus or checkboxes are provided for indicating the
preferred phase-2 method, although both macOS and iOS support
a variety of methods under the hood (δ = Cl.). When a TLS tunnel
is established with a particular authentication server, an alert will
pop out prompting the user to verify the server certificate and the
user has to decide whether to continue or not.
On macOS, the alert window by default only shows the common
name of the server certificate, and this can be manually inspected
and considered in a rejection decision (γ = M), or completely ignored
(γ = N) before continuing. Additional information, including a
predetermined certificate validity and the CA certificates used to
form the chain of trust, will be shown only after the user clicks
the “Show Certificate” button. Interestingly, even if the system has
already determined a server certificate to be invalid, it will not be
programatically rejected (α (cid:44) P), and the alert window will still be
shown, effectively delegating the rejection decision to the user. The
user can then decide to continue/stop the connection based on the
predetermined (in)validity (α = AM ∧ β = Sys.), or blindly continue
without inspecting the validity information on the alert window,
in which case no invalid certificates will be rejected (α = N).
Moreover, there are two ways to upgrade the configuration. First,
the user can check both the predetermined validity and the issuer
name in the detailed information given on the alert window, and
then continues to connect only if the certificate is found to be valid
and the issuer name fits that of an expected CA (α = AM ∧ β = Sp.).
Another way to upgrade the configuration is to inspect the SHA-256
(and SHA-1) digests of the certificate, both of which can be found
when the user clicks on the “Details” button and scroll all the way
down to the bottom of the alert window.
4.4.2 Design weaknesses. We have identified 1 issue for iOS and 1
issue for macOS. For iOS, the determination of certificate validity
with system CA store seems to be broken, and it appears that all
server certificates, including those that are determined to be valid
on macOS, will always be marked as invalid. Consequently, the
only way to confirm the server identity is through verifying hash
digests of the server certificate. This bug has been mentioned in
some of the instructions that we surveyed in Section 5, and we filed
a report to Apple regarding this, but at the time of writing we have
not received any responses from Apple.
For macOS, we found that the CA certificates imported through
pre-configured profiles will be included in the system CA store,
which will affect the determination of certificate validity for other
WPA2-Enterprise networks in the future. More severely, self-signed
root CA certificates imported this way will be trusted by default
for all purposes beyond Wi-Fi, including secure mails (S/MIME),
Web browsing (TLS), IPSec, and code signing. In other words, im-
porting pre-configured Wi-Fi profiles embedded with self-signed
root CA certificates provides a covert pathway for injecting trusted
certificates useful for other attacks (e.g., TLS interception for break-
ing HTTPS). We successfully used a Linux wireless AP running
mitmproxy [22] to intercept HTTPS traffic from Safari and Fire-
fox on a MacBook that imported a Wi-Fi profile containing our
own self-signed root CA certificate. We reported this elevation of
trust to Apple but their product security team dismissed our report,
claiming that there is no security risk to users.
5 INSECURE WPA2-ENTERPRISE
CONFIGURATION INSTRUCTIONS
To evaluate the spread of problematic configuration instructions,
we conduct a large-scale study based on publicly accessible ones
that TEIs prescribe to their staffs and students. We also establish
links between the misguided designs of mainstream OSs and the
poor instructions found in the wild.
5.1 Instruction gathering and labeling
We first collected lists of TEIs from Wikipedia and lists of par-
ticipants from national/regional eduroam homepages (see [40]),
and consolidated a list of 7045 TEIs covering 54 countries/regions.
We then used Selenium WebDriver to crawl the domains of these
TEIs from Google. We crawled the top 8 Google search results for
"eduroam OR wifi OR WI-FI OR WLAN site:", in
an attempt to automatically discover URLs to Wi-Fi configuration
instructions. For each TEI, if none of those results seem relevant,
we would manually navigate to its homepage and use the internal
search there as a last resort. We only crawled results of Google
search but never scrapped any TEI websites programatically. If any
applicable Wi-Fi configuration instructions can be found, we would
then manually capture and archive them using a custom Chrome
extension, and then interpret them and assign security labels, based
on the framework introduced in Section 3 as well as the supported
configurations determined in Section 4. Out of the 7045 TEI consid-
ered, more than 5000 were investigated by 3 authors, and another
4 authors each investigated hundreds of TEIs. Separation of labor
was partly based on authors’ language abilities. Notice that not all
TEIs make their configuration instructions publicly accessible, and
not all instructions describe the configuration of WPA2-Enterprise.
We consider an instruction applicable if it mentions terminologies
like PEAP, TTLS, phase-2 methods, and certificates.
Our data gathering and labeling effort happened between July
2020 to January 2021. In the end we collected and graded 7275
applicable configuration instructions from 2061 TEIs (around 30%
of the TEIs considered). 3096 of the 7275 instructions came from non-
anglophone countries, though some might be written in English. We
follow instructions in local languages if possible, since those tend to
be more informative. Top non-English languages in this set include
Chinese, Japanese, Korean, German, French, and Italian. We consult
Google Translate when necessary. The top 10 regions contributing
the largest number of TEIs and instructions/grades can be found in
Tables G5 and G6 in Appendix. Overall, US contributed the most
for both campus Wi-Fi and eduroam, but numerous schools there
still do not support eduroam. Many European schools use eduroam
as their sole Wi-Fi service, while TEIs in Asian regions tend to have
better support for dedicated campus Wi-Fi than eduroam.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea11065.1.1 Tie-breaking and extrapolation. For each TEI, if multiple ver-
sions of instructions exist, we in general only consider the latest one.
Occasionally, a TEI might provide multiple instructions that are
endorsed equivalently for a specific OS (e.g., one based on Windows
10 Simple UI, another based on Traditional UI), and in those cases
we keep only the worst labels, because some users might choose
to follow the bad ones without understanding the intricacies. Also,