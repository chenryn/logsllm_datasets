向对象的分布式对象系统中借鉴来的。分布式对象系统对可扩展性和功能特性都很
有帮助。
从1996年开始，一个研究团体就在争论是否要将HTTP与更复杂的分布式对象系
统聚合在一起。在Web中使用分布式对象模型有很多好处，更多与此相关的信息请
查阅Xerox PARC早期名为“Migrating the Web Toward Distributed Objects”（“Web
249 向分布式对象的迁移”）的文章（ftp://ftp.parc.xerox.com/pub/ilu/misc/Webilu.html）。
将Web和分布式对象统一起来的雄心使得HTTP-NG的应用受到了某些社团的抵
制。过去的一些分布式对象系统受到了重量级实现方案和形式上复杂性的影响。
HTTP-NG项目组也尝试去解决需求中提到的一些问题。
10.5 第一层——报文传输
我们从最底层开始，近距离地看看HTTP-NG这三层的功能。报文传输层关心的是
报文的有效传输，不考虑报文的含义和目的。报文传输层为报文传输提供了一个
API，无论底层实际采用的是什么网络协议栈都可以使用。
本层关注的是提高报文传输的性能，其中包括：
• 对报文进行管道化和批量化传输，以降低往返时延；
• 重用连接，以降低时延，提高传输带宽；
• 在同一条连接上并行地复用多个报文流，在防止报文流饿死的同时优化共享连接；
• 对报文进行有效的分段，使报文边界的确定更加容易。
264 ｜ 第10章
HTTP-NG工作组将大部分精力都放在了为第一层的报文传输开发WebMUX协议
上。WebMUX是个高性能的报文协议，可以对报文进行分段，并在一条复用的
TCP连接上交错地传输报文。本章会对WebMUX进行较为详细的介绍。
10.6 第二层——远程调用
HTTP-NG结构的中间层提供了对远程方法调用的支持。本层提供了通用的请求/响
应框架，客户端可通过此框架调用对服务器资源的操作。本层并不关心特定操作的
实现及语义（缓存、安全性以及方法逻辑等）；它只关心允许客户端远程调用服务
器操作的接口。
现在已经有很多远程方法调用标准了（举几个例子来说，比如CORBA、DOM和
Java RMI），本层并不打算支持这些系统中所有好的特性。但它有一个明确的目标，
就是要对HTTP/1.1所提供的HTTP RMI支持进行扩展。特别是，要以可扩展的面
向对象方式提供更通用的远程过程调用支持。
HTTP-NG小组建议本层采用二进制连接协议。这个协议支持一种高性能的可扩展
技术，通过这种技术可以调用服务器上经过良好描述的操作，并将结果返回。本章
稍后将对二进制连接协议进行较为详细的讨论。 250
10.7 第三层——Web应用
Web应用层是执行语义和应用程序特定逻辑的地方。HTTP-NG工作组避开了扩展
HTTP应用特性的诱惑，专注于正规的基础建设工作。
Web应用层描述了一个用于提供应用程序特定服务的系统。这些服务并不单一，不
同的应用程序可能使用不同的API。比如，HTTP/1.1的Web应用构成的应用程序
与WebDAV可能会共享一些公用的部分，但又会有所不同。HTTP-NG结构允许多
个应用共存于本层，共享底层特性，它还提供了一种添加新应用程序的机制。
Web应用层的基本思想是提供与HTTP/1.1等价的功能和一些扩展接口，同时将其
映射到一个可扩展的分布式对象框架中去。更多与Web应用层接口有关的内容可以
参见http://www.w3.org/Protocols/HTTP-NG/1998/08/draft-larner-nginterfaces-00.txt。
10.8 WebMUX
HTTP-NG工作组花费了很多精力，为报文传输开发了WebMUX标准。WebMUX
是一个复杂的高性能报文系统，通过这个系统，可以在一个复用的TCP连接上并行
HTTP-NG ｜ 265
地传输报文。可以对以不同速度产生和消耗的独立报文流进行高效的分组，并将其
复用到一条或少数几条TCP连接上去（参见图10-2）。
报文A 报文A
报文B 报文B
报文C 报文C
报文D 报文D
图10-2 WebMUX可以在一条连接上复用多条报文
WebMUX协议的关键目标包括如下几条。
• 设计简单。
• 高性能。
• 复用——可以在一条连接上动态、高效地交错传递多个（使用任意高层协议的）
251 数据流，不用因为等待那些速度很慢的生产者程序而延迟数据的传输。
• 基于信用的流量控制——数据是以不同的速率产生和消耗的，发送者和接收者的
内存和可用的CPU资源都有所不同。WebMUX使用的是“基于信用的”流量控
制方案，接收者可以预先声明期望的数据接收速度，防止出现资源缺乏产生的
死锁。
• 保持对齐——保持复用流中数据的对齐，这样才能有效地发送并处理二进制数据。
• 丰富的功能——接口足够丰富，能支持套接字API。
更多有关WebMUX协议的内容请参阅http://www.w3.org/Protocols/MUX/WD-mux-
980722.html。
10.9 二进制连接协议
HTTP-NG小组建议使用二进制连接协议来提高下一代HTTP协议支持远程操作的
能力。
HTTP-NG定义了一些“对象类型”，并为每种对象类型分配了一组方法。为每
种对象类型分配一个URI，以便将对它的描述和它的方法宣传出去。通过这种方
式，HTTP-NG提供了一种比HTTP/1.1的扩展性更强，且面向对象的执行模型，
HTTP/1.1中所有的方法都是在服务器中静态定义的。
266 ｜ 第10章
二进制连接协议通过一条有状态的连接承载了从客户端发往服务器的操作调用请求，
以及从服务器发往客户端的操作结果应答。有状态的连接可以提供更高的效率。
请求报文中包含操作、目标对象和可选的数据值。应答报文带回了操作的最终状态、
所对应请求的序列号（允许以任意顺序传递并行的请求和响应），以及可选的返回
值。除了请求和应答报文之外，这个协议还定义了几种内部控制报文，用来提高连
接的效率和强壮性。
更多有关二进制连接协议的内容请参阅http://www.w3.org/Protocols/HTTP-NG/1998/08/
draft-janssen-httpng-wire-00.txt。
10.10 当前的状态
1998 年底，HTTP-NG 小组认定现在将 HTTP-NG 建议引入 IETF 还为时尚早。
工业界和各社团都还没有完全调整到 HTTP/1.1 上来，如果没有明确的转换计划
就进行重大的 HTTP-NG 重构计划，将其重构为分布式对象模式可能会造成严重 252
的破坏。
对此，人们提出了两点建议。
• 不要指望能在一步之内实现整个HTTP-NG重构计划，建议重点关注WebMUX
传输技术。但是，在编写此书的时候，人们还没有足够的兴趣去建立一个
WebMUX工作组。
• 要去探讨能否将正式的协议类型修改得足够灵活（可能是通过XML实现的），
以满足Web上应用的需要。对于可扩展的分布式对象系统来说，这一点尤其重要。
这项工作仍在进行之中。
编写此书时，还没有什么主导力量在驱动HTTP-NG的应用。但随着HTTP应用的
不断增多，随着它越来越多地作为各种应用程序的平台使用，以及无线因特网技
术和面向消费者的因特网技术的不断应用，HTTP-NG中提出的一些技术可能会在
HTTP的青少年时期逐渐显现出其重要性。
10.11 更多信息
更多有关HTTP-NG的信息，请参见下面列出的详细规范和活动报告。
• http://www.w3.org/Protocols/HTTP-NG/
HTTP-NG工作组（建议），W3C联盟Web站点。
HTTP-NG ｜ 267
• http://www.w3.org/Protocols/MUX/WD-mux-980722.html
J. Gettys和H. Nielsen编写的“The WebMUX Protocol”(“WebMUX协议”)。
• http://www.w3.org/Protocols/HTTP-NG/1998/08/draft-janssen-httpng-wire-00.txt
B. Janssen编写的“Binary Wire Protocol for HTTP-NG”(“HTTP-NG的二进制
连接协议”)。
• http://www.w3.org/Protocols/HTTP-NG/1998/08/draft-larner-nginterfaces-00.txt
D. Larner编写的“HTTP-NG Web Interfaces”(“HTTP-NG Web接口”)。
• ftp://ftp.parc.xerox.com/pub/ilu/misc/Webilu.html
D. Larner编写的“Migrating the Web Toward Distributed Objects”(“Web向分
253 布式对象的迁移”)。
268 ｜ 第10章
第三部分
识别、认证与安全
第三部分的4章提供了一系列的技术和技巧，可用来跟踪身份、进行安全性检查，
控制对内容的访问。
• 第11章介绍了识别用户的技巧，这样就可以实现用户个性化的内容了。
• 第12章重点概述了用户身份验证的基本原理。这一章还探讨了HTTP认证与数
据库之间的接口机制。
• 第13章解释了摘要验证，这是一种复杂的、针对HTTP的增强方式，可以极大
地提高安全性。 254
~
• 第14章详细介绍了因特网密码学、数字证书和安全套接字层。 256
第11章
客户端识别与 机制
cookie
271
Web服务器可能会同时与数千个不同的客户端进行对话。这些服务器通常要记录下
它们在与谁交谈，而不会认为所有的请求都来自匿名的客户端。本章讨论了一些服
务器可以用来识别其交谈对象的技巧。
11.1 个性化接触
HTTP最初是一个匿名、无状态的请求/响应协议。服务器处理来自客户端的请求，
然后向客户端回送一条响应。Web服务器几乎没有什么信息可以用来判定是哪个用
户发送的请求，也无法记录来访用户的请求序列。
现代的Web站点希望能够提供个性化的接触。它们希望对连接另一端的用户有更多
的了解，并且能在用户浏览页面时对其进行跟踪。Amazon.com这样流行的在线商
店网站可以通过以下几种方式实现站点的个性化。
• 个性化的问候
专门为用户生成的欢迎词和页面内容，使购物体验更加个性化。
• 有的放矢的推荐
通过了解客户的兴趣，商店可以推荐一些它们认为客户会感兴趣的商品。商店还
可以在临近客户生日或其他一些重要日子的时候提供生日特定的商品。
• 管理信息的存档
在线购物的用户不喜欢一次又一次地填写繁琐的地址和信用卡信息。有些站点会
将这些管理细节存储在一个数据库中。只要他们识别出用户，就可以使用存档的
257 管理信息，使得购物体验更加便捷。
• 记录会话
HTTP事务是无状态的。每条请求/响应都是独立进行的。很多Web站点希望能
在用户与站点交互的过程中（比如，使用在线购物车的时候）构建增量状态。要
实现这一功能，Web站点就需要有一种方式来区分来自不同用户的HTTP事务。
本章对HTTP识别用户的几种技巧进行了总结。HTTP并不是天生就具有丰富的识
别特性的。早期的Web站点设计者们（他们都是些注重实际的人）都有自己的用户
识别技术。每种技术都有其优势和劣势。本章我们将讨论下列用户识别机制。
• 承载用户身份信息的HTTP首部。
• 客户端IP地址跟踪，通过用户的IP地址对其进行识别。
• 用户登录，用认证方式来识别用户。
• 胖URL，一种在URL中嵌入识别信息的技术。
272 ｜ 第11章
• cookie，一种功能强大且高效的持久身份识别技术。
11.2 HTTP首部
表11-1给出了七种最常见的用来承载用户相关信息的HTTP请求首部。这里我们先
讨论前三个；后面四个首部用于更高级的识别技术，我们稍后讨论。
表11-1 承载用户相关信息的HTTP首部
首部名称 首部类型 描 述
From 请求 用户的E-mail地址
User-Agent 请求 用户的浏览器软件
Referer 请求 用户是从这个页面上依照链接跳转过来的
Authorization 请求 用户名和密码（稍后讨论）
Client-IP 扩展（请求） 客户端的IP地址（稍后讨论）
X-Forwarded-For 扩展（请求） 客户端的IP地址（稍后讨论）
Cookie 扩展（请求） 服务器产生的ID标签（稍后讨论）
From首部包含了用户的E-mail地址。每个用户都有不同的E-mail地址，所以在理
想情况下，可以将这个地址作为可行的源端来识别用户。但由于担心那些不讲道德
的服务器会搜集这些E-mail地址，用于垃圾邮件的散发，所以很少有浏览器会发送
From首部。实际上，From首部是由自动化的机器人或蜘蛛发送的，这样在出现问
题时，网管还有个地方可以发送愤怒的投诉邮件。 258
User-Agent首部可以将用户所用浏览器的相关信息告知服务器，包括程序的名称
和版本，通常还包含操作系统的相关信息。要实现定制内容与特定的浏览器及其属
性间的良好互操作时，这个首部是非常有用的，但它并没有为识别特定的用户提供
太多有意义的帮助。下面是两种User-Agent首部，一种是网景的Navigator发送
的，另一种是微软的Internet Explorer发送的：
• Navigator 6.2
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:0.9.4)
Gecko/20011128
Netscape6/6.2.1
• Internet Explorer 6.01
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)
Referer首部提供了用户来源页面的URL。Referer首部自身并不能完全标识用
户，但它确实说明了用户之前访问过哪个页面。通过它可以更好地理解用户的浏览
客户端识别与cookie机制 ｜ 273
行为，以及用户的兴趣所在。比如，如果你是从一个篮球网站抵达某个Web服务器
的，这个服务器可能会推断你是个篮球迷。
From、User-Agent和Referer首部都不足以实现可靠的识别。后面的小节对识
别特定用户的策略进行了更为详细的讨论。
11.3 客户端IP地址
早期的Web先锋曾尝试着将客户端IP地址作为一种标识形式使用。如果每个用