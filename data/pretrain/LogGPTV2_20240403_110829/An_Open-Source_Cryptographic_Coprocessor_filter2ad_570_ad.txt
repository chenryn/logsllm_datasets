examine, build, and install as they see fit.
A second, far less theoretical advantage of an open-
source coprocessor is that until the crypto control code
is loaded into it, it isn’t a controlled cryptographic item
as crypto source code and software aren’t controlled in
most of the world.  This means that it’s possible to ship
the hardware and software separately to almost any
destination (or source it locally) without any restrictions
and then combine the two to create a controlled item
once they arrive at their destination (like a two-
component glue, things don’t get sticky until you mix
the parts).
4. Extended Security Functionality
The basic coprocessor design presented so far serves to
move all security-related processing and
cryptovariables out of reach of hostile software, but by
taking advantage of the capabilities of the hardware and
firmware used to implement it, it’s possible to do much
more.  One of the features of the cryptlib architecture is
that all operations are controlled and monitored by a
central security kernel which enforces a single,
consistent security policy across the entire architecture.
By tying the control of some of these operations to
features of the coprocessor, it’s possible to obtain an
extended level of control over its operation as well as
avoiding some of the problems which have traditionally
plagued this type of security device.
4.1. Controlling Coprocessor Actions
The most important type of extra functionality which
can be added to the coprocessor is extended failsafe
control over any actions it performs.  This means that
instead of blindly performing any action requested by
the host (purportedly on behalf of the user), it first seeks
confirmation from the user that they have indeed
requested that the action be taken.  The most obvious
application of this mechanism is for signing documents
where the owner has to indicate their consent through a
trusted I/O path rather than allowing a rogue application
to request arbitrary numbers of signatures on arbitrary
documents.  This contrasts with other tier 1 and 2
processors which are typically enabled through user
entry of a PIN or password, after which they are at the
mercy of any commands coming from the host.  Apart
from the security concerns, the ability to individually
control signing actions and require conscious consent
from the user means that the coprocessor provides a
mechanism required by a number of new digital
signature laws which recognise the dangers inherent in
systems which provide an automated (that is, with little
control from the user) signing capability.
Figure 6: Normal message processing
The means of providing this service is to hook into the
cryptlib kernel’s sign action and decrypt action
processing mechanisms.  In normal processing the
kernel receives the incoming message, applies various
security-policy-related checks to it (for example it
checks to ensure that the object’s ACL allows this type
of access), and then forwards the message to the
intended target, as shown in Figure 6.  In order to obtain
additional confirmation that the action is to be taken,
the coprocessor can indicate the requested action to the
user and request additional confirmation before passing
the message on.  If the user chooses to deny the request
or doesn’t respond within a certain time, the request is
blocked by the kernel in the same manner as if the
objects ACL didn’t allow it, as shown in  Figure 7.  This
mechanism is similar to the command confirmation
mechanism in the VAX A1 security kernel, which takes
a command from the untrusted VMS or Ultrix-32  OS’s
running on top of it, requests that the user press the
(non-overridable) secure attention key to communicate
directly with the kernel and confirm the operation
(“Something claiming to be you has requested X.  Is this
OK?”), and then returns the user back to the OS after
performing the operation [49].
Figure 7: Processing with user confirmation
The simplest form of user interface involves two LED’s
and two pushbutton switches connected to a suitable
port on the coprocessor (for example the parallel port or
serial port status lines).  An LED is activated to indicate
that confirmation of a signing or decryption action is
required by the coprocessor.  If the user pushes the
confirmation button, the request is allowed through, if
they push the cancel button or don’t respond within a
certain time, the request is denied.
4.2. Trusted I/O Path
The basic user confirmation mechanism presented
above can be generalised by taking advantage of the
potential for a trusted I/O path which is provided by the
coprocessor.  The main use for a trusted I/O path is to
allow for secure entry of a password or PIN used to
enable access to keys stored in the coprocessor.  Unlike
typical tier 1 devices which assume the entire device is
secure and use a short PIN in combination with a retry
counter to protect 
cryptovariables, the coprocessor
makes no assumptions about its security and instead
relies on a user-supplied password to encrypt all
cryptovariables held in persistent storage (the only time
keys exist in  plaintext form is when they’re decrypted
to volatile memory prior to use).  Because of this, a
simple numeric keypad used to enter a PIN isn’t
sufficient (unless the user enjoys memorising long
strings of digits for use as passwords).  Instead, the
coprocessor can optionally make use of devices such as
PalmPilots for password entry, perhaps in combination
with novel password entry techniques such as graphical
passwords [50].  Note though that, unlike a tier 0 crypto
implementation, obtaining the user password via a
keyboard  sniffer on the host doesn’t give access to
private keys since they’re held on the coprocessor and
can never leave it, so that even if the password is
compromised by software on the host, it won’t provide
access to the keys.
In a slightly more extreme form, the ability to access
the coprocessor via multiple I/O channels allows us to
enforce strict red/black separation, with  plaintext being
accessed through one I/O channel, 
ciphertext through
another, and keys through a third.  Although cryptlib
doesn’t normally load  plaintext keys (they’re generated
and managed internally and can never pass outside the
security perimeter), when the ability to load external
keys is required FIPS 140 mandates that they be loaded
via a separate channel rather than over the one used for
general data, which can be provided for by loading
them over a separate channel such as a serial port (a
number of commercial crypto coprocessors come with a
serial port for this reason).
4.3. Physically Isolated Crypto
It has been said that the only truly tamperproof
computer hardware is Voyager 2, since it has a
considerable air gap (strictly speaking a non-air gap)
which makes access to the hardware somewhat
challenging (space aliens notwithstanding).  We can
take advantage of air-gap security in combination with
cryptlib’s remote-execution capability by siting the
hardware performing the crypto in a safe location well
away from any possible tampering.  For example by
running the crypto on a server in a physically secure
location and tunneling data and control information to it
via its built-in  ssh or SSL capabilities, we obtain the
benefits of physical security for the crypto without the
awkwardness of having to use it from a secure location
or the expense of having to use a physically secure
crypto module (the implications of remote execution of
crypto from a country like China with keys and crypto
held in Europe or the US are left as an exercise for the
reader).
Physical isolation at the macroscopic level is also
possible due to the fact that cryptlib employs a
separation kernel for its security [ 51][52], which allows
different object types (and, at the most extreme level,
individual objects) to be implemented in physically
separate hardware.  For those requiring an extreme level
of isolation and security, it should be possible to
implement the different object types in their own
hardware, for example 
keyset objects (which don’t
require any real security since certificates contain their
own tamper protection) could be implemented on the
host PC, the kernel (which requires a minimum of
resources) could be implemented on a cheap ARM-
based plug-in card, envelope objects (which can require
a fair bit of memory but very little processing power)
could be implemented on a 486 card with a good
quantity of memory, and encryption contexts (which
can require a fair amount of CPU power but little else)
could be implemented using a faster Pentium-class
CPU.  In practice though it’s unlikely that anyone
would consider this level of isolation worth the expense
and effort.
5. Crypto Hardware Acceleration
So far the discussion of the coprocessor has focused on
the security and functionality enhancements it provides,
avoiding any mention of performance concerns.  The
reason for this is that for the majority of users the
performance is good enough, meaning that for typical
applications such as email encryption, web browsing
with SSL, and remote access via ssh, the presence of the
coprocessor is barely noticeable since the limiting
factors on performance are set by network bandwidth,
disk access times, modem speed,  bloatware running on
the host system, and so on.  Although never intended
for use as a special-purpose crypto accelerator of the
type capable of performing hundreds of RSA operations
per second on behalf of a heavily-loaded web server, it
is possible to add extra functionality to the coprocessor
through its built-in PC104 bus to extend its
performance.  By adding a PC104  daughterboard to the
device, it’s possible to enhance its functionality or add
new functionality in a variety of ways, as explained
below (although the prices quoted for devices will
change over time, the price ratios should remain
relatively constant).
5.1. Conventional Encryption/Hashing
Implementing an algorithm like DES which was
originally targeted at hardware implementation, in a
field-programmable gate array (FPGA) is relatively
straightforward, and hash algorithms like MD5 and
SHA-1 can also be implemented fairly easily in
hardware by implementing a single round of the
algorithm and cycling the data through it the
appropriate number of times.  Using a low-cost FPGA,
it should be possible to build a 
daughterboard which
performs DES and MD5/SHA-1 acceleration for around
$50.  Unfortunately, a number of hardware and software
issues conspire to make this non-viable economically.
The main problem is that although DES is faster to
implement in hardware than in software, most newer
algorithms are much more efficient in software (ones
with large, key-dependent S-boxes are particularly
difficult to implement in  FPGA’s because they require
huge numbers of logic cells, requiring very expensive
high-density  FPGA’s).  A related problem is the fact
that in many cases the CPU on the coprocessor is
already capable of saturating the I/O channel
(ethernet/ECP/EPP/PC104) using a pure software
implementation, so there’s nothing to be gained by
adding expensive external hardware (all of the
software-optimised algorithms run at several MB/s
whereas the I/O channel is only capable of handling
around 1MB/s).  The imbalance becomes even worse
when any CPU faster than the entry-level 5x86/133
configuration is used, since at this point any common
algorithm (even the rather slow triple DES) can be
executed more quickly in software than the I/O channel
can handle.  Because of this it doesn’t seem profitable
to try to augment software-based conventional
encryption or hashing capabilities with extra hardware.
5.2. Public-key Encryption
Public-key algorithms are less amenable to
implementation in general-purpose CPU’s than
conventional encryption and hashing algorithms, so
there’s more scope for hardware acceleration in this
area.  We have two options for accelerating public-key
operations, either using an ASIC from a vendor or
implementing our own version with an FPGA.   Bignum
ASIC’s are somewhat thin on the ground since the
vendors who produce them usually use them in their
own crypto products and don’t make them available for
sale to the public, however there is one company who
specialise in  ASIC’s rather than crypto products who
can supply a  bignum ASIC (it’s also possible to license
bignum cores and implement the device yourself, this
option is covered peripherally in the next section).
Using this device, the PCC201 [
53], it’s possible to
build a  bignum acceleration  daughterboard for around
$100.
Unfortunately, the device has a number of limitations.
Although impressive when it was first introduced, the
maximum key size of 1024 bits and maximum
throughput of 21 operations/s for 1024-bit keys and 74
operations/s for 512-bit keys compares rather poorly
with software implementations on newer Pentium-class
CPU’s, which can achieve the same performance with a
CPU speed of around 200MHz.  This means that
although one of these devices would serve to accelerate
performance on a coprocessor based on the entry-level
5x86/133 hardware, a better way to utilise the extra
expense of the  daughterboard would be to buy the next
level up in coprocessor hardware, giving somewhat
better  bignum performance and accelerating all other
operations as well as a free side-effect (the entry level
for Pentium-class cards is one containing a 266MHz
Cyrix  MediaGX, although it may be possible to put
together an even cheaper one using a bare card and
populating it with an AMD K6/266, currently selling
for around $30).  A second disadvantage of the PCC201
is that it’s made available under peculiar export control
terms which can make it cumbersome (or even
impossible) to obtain for anyone who isn’t a large
company.
An alternative to using an ASIC is to implement our
own  bignum accelerator with an FPGA, with the
advantage that we can make it as fast as required
(within the limits of the available hardware).  Again,
there is the problem that much of the published work in
the area of  bignum accelerator design is by crypto
hardware vendors who don’t make the details available,
however there is one reasonably fast implementation
which achieves 83 operations/s for 1024-bit keys and
340 operations/s for 512-bit keys using a total of 6,700
FPGA basic cells (configurable logic blocks or  CLB’s)
[54].  The use of such a large number of  CLB’s requires
the use of very high-density  FPGA’s, of which the most
widely-used representative is the  Xilinx XC4000 family
[55].  The cheapest available FPGA capable of
implementing this design, the XC40200, comes with a
pre-printed mortgage application form and a $2000-
$2500 price tag (depending on speed grade and
quantity), providing a clue as to why the design has to
date only been implemented on a simulator.  Again, it’s
possible to buy an awful lot of CPU power for the same
amount of money (an equivalent level of performance
to the FPGA design is obtainable using about $200
worth of AMD Athlon CPU [56]).
This illustrates a problem faced by all hardware crypto