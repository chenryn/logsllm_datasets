if they only differ in sub-terms that are labeled with l, with
the intention that l is the label of restricted resources.
Deﬁnition 2 (Similarity up to l). Expressions e and e(cid:48), iden-
tiﬁed up to α-renaming, are similar up to label l according
to the following relation:
e ∼l e
{l}e ∼l {l}e(cid:48)
e ∼l e(cid:48)
l(cid:48) (cid:54)= l
{l(cid:48)}e ∼l {l(cid:48)}e(cid:48)
e2 ∼l e(cid:48)
1 e(cid:48)
2
2
e ∼l e(cid:48)
e1 ∼l e(cid:48)
1
. . .
e1 e2 ∼l e(cid:48)
λ x:t.e ∼l λ x:t.e(cid:48)
The second rule is the most important. It states that ar-
bitrary expressions e and e(cid:48) are considered similar at label
l when both are labeled with l. Other parts of the program
must be structurally identical, as stated by the remaining
congruence rules (not all are shown; the full relation can be
found in our technical report [38]). We extend similarity to
a bisimulation as follows: two similar terms are bisimilar
if they always reduce to similar subterms, and do so indef-
initely or until no further reduction is possible. This notion
of bisimulation is the basis of our access control security
theorem; it is both timing and termination sensitive.
1,e(cid:48)
c(cid:32) e(cid:48)
c(cid:32) e(cid:48)
1 ⇔ e2
2 such that e1
Deﬁnition 3 (Bisimulation). Expressions e1 and e2 are
bisimilar at label l, written e1 ≈l e2, if and only if e1 ∼l e2
and there exists e(cid:48)
2 and
1 ≈l e(cid:48)
e(cid:48)
2.
Theorem 1 (Non-observability). Given a ([·])-free expres-
sion e such that (a:ta,m:tm,cap:int{user},x:t{acl} (cid:96)app e : te)
where acl and user are label constants, and given a substi-
tution σ = (a (cid:55)→ access,m (cid:55)→ member,cap (cid:55)→ ([{user}0])).
Then, for type-respecting substitutions σi = σ ,x (cid:55)→ vi where
· (cid:96)app vi : t{acl} for i=1,2, we have (member user acl
c∗(cid:32)
False) ⇒ σ1(e) ≈acl σ2(e).
This theorem is concerned with a program e that contains
no policy-bracketed terms (it is just application code) but,
via the substitution σ, may refer to our access control func-
tions access and member through the free variables a and m.
Additionally, the program is granted a single user capabil-
ity ([{user}0]) through the free variable cap which gives the
program the authority of user user. The program may also
refer to some protected resource x whose label is acl, but the
authority of user is insufﬁcient to access x according to the
access control policy because (member user acl c∗(cid:32) False).
Under these conditions, we can show that for any two (well-
typed) vi we substitute for x according to substitution σi,
the resulting programs are bisimilar—their reduction is in-
dependent of the choice of vi.
Notice that this theorem is indifferent to the actual imple-
mentation of the acl label and the member function. Thus,
while our example policy is fairly simplistic, a far more so-
phisticated model could be used. For instance, we could
have chosen labels to stand for RBAC- or RT-style roles [23]
and member could invoke a decision procedure for deter-
mining role membership. Likewise, the theorem is not con-
376
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:14 UTC from IEEE Xplore.  Restrictions apply. 
cerned with the origin of the user capability—a function
more sophisticated than login (e.g., that relied on cryptog-
raphy) could have been used. The important point is that
FABLE ensures the second component of the user creden-
tial (l:lab∼USER(k) ×int{l}) is unforgeable by application
code. Finally, it would be straightforward to extend our the-
orem to speak to policies that provide access to more than
one resource with a single membership test, as in the fol-
lowing code
policy access cap(cid:104)k(cid:105)(u:lab∼USER(k), cred:int{u}, acl:lab) =
match member u acl with True ⇒Λα.λ x:α{acl}.{◦}x
⇒#fail
Here the caller presents a user credential and an access
control label acl (but no resource labeled with that label).
If the membership check succeeds, a function with type
∀α.α{acl} →α is returned. This function can be used to
immediately unlabel any resource with the authorized la-
bel. This is useful when policy queries are expensive. It is
also useful for encoding a form of delegation; rather than
releasing his user credential, a user could release a function
that uses that credential to a limited effect. Of course, this
may be undesirable if the policy is known to change fre-
quently, but even this could be accommodated. Variations
that combine static and dynamic checks are also possible.
3.2. Dynamic Provenance Tracking
Provenance is “information recording the source, deriva-
tion, or history of some information” [7]. Provenance is rel-
evant to computer security for at least two reasons. First,
provenance is useful for auditing, e.g., to discover whether
some data was inappropriately released or modiﬁed. Sec-
ond, provenance can be used to establish data integrity, e.g.,
by carefully accounting for a document’s sources. This sec-
tion describes a label-based provenance tracking policy we
constructed in FABLE. To prove that this policy is imple-
mented correctly we show that all programs that use it will
accurately capture the dependences (in the sense of infor-
mation ﬂow) on a value produced by a computation.
Figure 6 presents the provenance policy. We deﬁne the
type Prov α to describe a pair in which the ﬁrst component
is a label l that records the provenance of the second compo-
nent. The policy is agnostic to the actual form of l. Prove-
nance labels could represent things like authorship, owner-
ship, the channel on which information was received, etc.
An interesting aspect of Prov α is that the provenance label
is itself labeled with the 0-ary label constant Auditors. This
represents the fact that provenance information is subject
to security concerns like conﬁdentiality and integrity. Intu-
itively, one can think of data labeled with the Auditors label
as only accessible to members of a group called Auditors (of
course, a more complex policy could be used). Finally, note
that because the provenance label l is itself labeled (having
type lab{Auditors}) it would be incorrect to write α{l} as
the second component of the type since this requires that l
have type lab. Therefore we unlabel l when it appears in the
type of the second component. As explained in Section 2.2,
unlabeling operations in types pose no security risk since
the types are erased at runtime.
The policy function apply is a wrapper for tracking de-
pendences through function applications.
In an idealized
language like FABLE it is sufﬁcient to limit our attention to
function application, but a policy for a full language would
deﬁne wrappers for other constructs as well. The ﬁrst ar-
gument of apply is a provenance-labeled function lf to be
called on the second argument mx. The body of apply ﬁrst
decomposes the pair lf into its label l and the function f itself
and does likewise for the argument mx. Then it applies the
function, stripping the label from both it and its argument
ﬁrst. The provenance of the result is a combination of the
provenance of the function and its argument. We write this
as the label pair Union(l,m) which is then associated with
the ﬁnal result. Notice that we strip the Auditors labels from
l and m before combining them, and then add the label to
the label of the ﬁnal result.
The policy also deﬁnes a function ﬂatten to convert a
value of type Prov (Prov α) to one of type Prov α by ex-
tracting the nested labels (the ﬁrst two lines) and then col-
lapsing them into a Union (third line) that is associated with
the inner pair’s labeled component (fourth line).
An example client program that uses this provenance
policy is the following:
let client(cid:104)α,β ,γ(cid:105) (f : Prov(α →β→γ), x : Prov α, y : Prov β ) =
apply [β ][γ] (apply [α][β →γ] f x) y
This function takes a labeled two-argument function f as its
argument and the two arguments x and y. It calls apply twice
to get a result of type Prov γ. This will be a tuple in which
the ﬁrst component is a labeled provenance label of the form
Union(Union(lf,lx), ly) and the second component is a value
labeled with that provenance label.
In the label, we will
have that lf is the provenance label of the function argument
f and lx and ly are the provenance of the arguments x and y,
respectively. Note that a caller of client can instantiate the
type variable γ to be a type like Prov int. In this case, the
type of the returned value will be Prov (Prov int), which can
be ﬂattened if necessary.
We can prove that provenance information is tracked cor-
rectly following Cheney et al. [7]. The intention is that if a
value x of type Prov α inﬂuences the computation of some
other value y, then y must have type Prov β (for some β)
and its provenance label must mention the provenance label
of x. If provenance is tracked correctly, a change to x will
only affect values like y; other values in the program will be
unchanged. We can express this using a similarity relation
v1 ∼l v2 like the one deﬁned in Section 3.1 which relates
377
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:10:14 UTC from IEEE Xplore.  Restrictions apply. 
typename Prov α= (l:lab{Auditors} ×α{{◦}l})
policy ﬂatten(cid:104)α(cid:105) (x:Prov (Prov α)) =
let l,inner = x in
let m,a = inner in
let lm = Union({◦}l, {◦}m) in
({Auditors}lm, {lm}a)
policy apply(cid:104)α,β(cid:105) (lf:Prov (α →β ), mx:Prov α) =
let l,f = lf in
let m,x = mx in
let y = ({◦}f) ({◦}x) in
let lm = Union({◦}l, {◦}m) in
({Auditors}lm, {lm}y)
Figure 6. Enforcing a dynamic provenance-tracking policy
two values if they differ only on sub-terms of type Prov α
whose provenance label mentions l. Thus, an application
program e that is compiled with the policy of Figure 6 and
is executed in contexts that differ only in the choice of a
tracked value of label l will compute results that differ only
in sub-terms that are also colored using l.
Theorem 2 (Dependency correctness). Given a ([·])-free ex-
pression e such that a : ta, f : t f ,x : Prov t (cid:96)app e : t(cid:48), and
given a substitution σ = (a (cid:55)→ apply, f (cid:55)→ ﬂatten). Then,
for type-respecting substitutions σi = σ ,x (cid:55)→ vi where (cid:96)app
vi : Prov t for i=1,2 it is the case that v1 ∼l v2 implies
(σ1(e) app∗(cid:32) v(cid:48)
1 ∧ σ2(e) app∗(cid:32) v(cid:48)
2) ⇒ v(cid:48)
1 ∼l v(cid:48)
2
3.3. Static Information Flow
Both policies discussed so far rely on runtime checks.
This section illustrates how FABLE can be used to encode
static lattice-based information ﬂow policies that require no
runtime checks.
In a static information ﬂow type system
(as found in FlowCaml [32]) labels l have no run-time wit-
ness; they only appear in types t{l}. Labels are ordered
by a relation (cid:118) that typically forms a lattice. This ordering
is lifted to a subtyping relation on labeled types such that
l1 (cid:118) l2 ⇒ t{l1} <: t{l2}. Assuming the lattice ordering is
ﬁxed during execution, well-typed programs can be proven
to adhere to the policy deﬁned by the initial label assign-
ment appearing in the types.
Figure 7 illustrates the policy functions, along with a
small sample program. In our encoding we deﬁne a two-
point security lattice with atomic labels HIGH and LOW and
protected expressions will have labeled types like t{HIGH}.
The ordering LOW (cid:60) HIGH is exempliﬁed by the lub (least
upper bound) operation for the lattice. The join function
(similar to the ﬂatten function from Figure 6) combines
multiple labels on a type into a single label. The interest-
ing thing here is the label attached to x is a label expres-
sion lub l m, rather than an label value like HIGH. The type
rule (T-CONV) presented in Figure 4 can be used to show
that a term with type int{lub HIGH LOW} can be given type
int{HIGH} (since lub HIGH LOW c(cid:32) HIGH). This is criti-
cal to being able to type programs that use this policy.
The policy includes a subsumption function sub, which
takes as arguments a term x with type α{l} and a label
, HIGH | HIGH, ⇒HIGH |
policy lub(x:lab, y:lab) = match x,y with
policy join(cid:104)α,l,m(cid:105) (x:α{l}{m}) = ({lub l m}{◦}{◦}x)
policy sub(cid:104)α,l(cid:105) (x:α{l}, m:lab) = ({lub l m}{◦}x)
policy apply(cid:104)α,β ,l,m(cid:105) (f:(α →β ){l}, x:α) = {l}(({◦}f) x)
, ⇒LOW
Figure 7. Enforcing an information ﬂow policy
m and allows x to be used at the type α{lub l m}. This
is a restatement of the subsumption rule above, as l (cid:118) m
implies l (cid:116) m = m.
(Once types are erased, join and sub
are both essentially the identity function and could be opti-
mized away.) Finally, the policy function apply unlabels the
function f in order to call it, and then adds f ’s label on the
computed result.
Consider the following client program as an example us-
age of the static information ﬂow policy.
let client (f:(int{HIGH} →int{HIGH}){LOW}, x:int{LOW}) =
let x = (sub [int] x HIGH) in
join [int] (apply [int{HIGH}][int{HIGH}] f x)
The function client here calls function f with x, where
f expects a parameter of type int{HIGH} while x has type
int{LOW}. For the call to type check, the program uses sub
to coerce x’s type to int{lub LOW HIGH} which is convert-
ible to int{HIGH}. The call to apply returns a value of type
int{HIGH}{LOW}. The call to join collapses the pair of
labels so that client’s return type is int{lub HIGH LOW},
which converts to int{HIGH}.
We have proved that FABLE programs using this policy
enjoy the standard noninterference property. We have also
shown that a FABLE static information ﬂow policy is at least
as permissive as the information ﬂow policy implemented
by the functional subset of Core-ML, the formal language of
FlowCaml [30]. Finally, we show how the dynamic prove-
nance tracking and static information ﬂow policies can be
combined to enforce dynamic information ﬂow. All the
aforementioned proofs may be found in our technical re-