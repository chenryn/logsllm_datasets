NetworkStatsManager
Method
isAppForeground
getProcessPss
getProcessMemoryInfo
isAppInactive
getUidStats
getDataLayerSnapshotForUid
getFreeBytes
getAllocatableBytes
isUidActive
querySummary
queryDetailsForUidTagState
getUidProcessState
getPackageProcessState
queryDetailsForUidTag
queryEvents
queryUsageStats
queryAndAggregateUsageStats
queryStatsForUid
queryStatsForPackage
queryDetailsForUid
Hidden Affected versions
Permission
Yes
None
Yes
None
No
None
None
No
ACCESS_NETWORK_STATS Yes
ACCESS_NETWORK_STATS Yes
No
None
No
None
Yes
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
Yes
PACKAGE_USAGE_STATS
Yes
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
No
PACKAGE_USAGE_STATS
Both
Both
Both
Both
Only 9
Both
Both
Both
Only 9
Both
Only 9
Both
Both
Both
Both
Both
Both
Both
Both
Both
Fixed?
CVE-2019-9292
CVE-2020-0087
CVE-2020-0372
CVE-2020-0317
CVE-2020-0327
CVE-2020-0343
Duplicate
Duplicate
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
Won’t fix
TABLE IV: Systematization of the vulnerable APIs. For each API, we report the vulnerable service, the type of permission protecting it, if
the API was present in the Manager or only in the Proxy component, which version contains the vulnerable API and if the bug has been fixed.
the attacker can infer when the user is going to use the keyboard,
giving her the chance to show a popup informing the user that a
keyboard update is available.
Two
(createAppSpecificSmsToken
and
other APIs
DownloadManager.Query)
return very noisy values, which
change at every invocation. We note how the filtering step described
in Section VI-E does not discard these APIs because the noisy
values are not belonging to one of the categories known to not leak
information (e.g., timestamps). In fact, a deeper analysis of these
two APIs allowed us to confirm that their return value is either a
pseudo-random token (for the first API) or an object identifiers (for
the latter). Neither of the API, thus, return a value correlated with
the current state of the system.
The last two APIs are launchLegacyAssist and getAllCellInfo.
Their values changed after the start of the target application but it
does not appear to be correlated to the target app’s state transition.
For completeness, we manually inspected the remaining 42
APIs out of the 66 that have been filtered out by the second stage.
We identified how 7 APIs leak “system state” information, such
as the total amount of bytes written by apps, or aggregate statistics
about the disk usage. 15 APIs, instead, leak sensitive network
information, like the overall network usage. We found that the
remaining APIs do not seem to leak any relevant information.
An interesting observation comes from the vulnerable 3
APIs affecting only Android 9. In fact, they are all new features
introduced in existing services, which were also available in Android
8.1. This continuous evolution underlines the importance of having
an automatic analysis tool to flag these potential problems.
Disclosure. We disclosed our findings to the Android security team.
Six APIs have been acknowledged and fixed by Google and a CVE
was assigned. Table IV provides a detailed list of the APIs fixed and
the assigned CVE. We believe this confirms how seriously Google
is considering this class of vulnerabilities. For what concerns
the remaining APIs, the Android security team considered them
as “won’t fix” due to the type of permission protecting the API.
However, it is important to highlight how these APIs are exposing to
the attacker sensitive information about the state of the apps running
on the phone. Moreover, we note how real-world malware already
abuse similar APIs that require the same permission, as documented
by recent findings by security companies [15], [20]. We believe it
would be possible to secure these APIs by adjusting the granularity
of the information returned.
E. Results Comparison with SCAnDroid
To further illustrate the performance of our system, and to show
how our contributions play a key role on the automatic identification
of state inference vulnerabilities, we compare our results against
those obtained by SCAnDroid on the same Android version —
Android 8.1.
Overall, our system was able to correctly detect all the
vulnerable APIs identified by SCAnDroid. However, we note that
most of the vulnerable APIs identified by SCAnDroid belong to
bugs that, in this paper, we categorized as leaking information
related to the system (like the total amount of bytes written by apps,
or aggregate statistics about the disk usage) and network states (like
the overall network usage), as described in Section VII-D. While
these bugs are interesting and they can be exploited with template
attacks, as showed in [27], it is not trivial to weaponize them.
Our approach focuses on finding vulnerable APIs—and this is
one first difference with SCAnDroid—such as those ones that allow
9
an attacker to pinpoint which app the user is currently interacting
with, or that at least do not require building “templates” for each
target victim app. As presented in Table IV, only two of the bugs
we found were marked as Duplicate, while all the other ones were
previously unknown. All the APIs identified by our system are
generic and are not related to a specific feature or configuration of a
specific application, making our findings more generic and scalable.
Extending the attack surface allows us to examine components
and methods that were not even taken into account by SCAnDroid.
To determine how many methods SCAnDroid missed, we identified
the server-side methods that are not reachable from the Managers.
To collect this number, we first extracted all the server-side
methods defined in the Android OS, version 8.1, obtaining
5216 methods. Then, we extracted “interesting candidates,” as
described in Section VI-B: we identified that only 1,384 of them
are actually potentially reachable by an attacker and thus represent
the attack surface analyzed by SCAnDroid. Since SCAnDroid
uses as entrypoints only a subset of “client-side” methods, we then
determined how many of the 1,384 methods are effectively reachable
from the Managers. To this end, we computed a forward callgraph
for each of the methods defined in the Managers. If one considers
only client-side methods, only 835 methods, out of the 1,384,
are potentially reachable (∼60% of the attack surface). However,
SCAnDroid does not take into account all client-side methods, but it
applies a filtering process based on the method’s name. We applied
the same filtering process on the client-side methods and found that
SCAnDroid would be able to reach only 616 server-side methods,
which is only about the 44% of the attack surface. We also note how,
for what concerns Android 8.1, the 33% of the bugs we identified
(5 out of 15) resides in the server-side component. This shows, once
again, that the server-side attack surface should not be overlooked.
To conclude, our analysis correctly detected 10 vulnerable
APIs that satisfied SCAnDroid’s filtering. Thus, these APIs have
been tested, but were not marked as vulnerable. All 10 APIs are
present in Android 8.1, are exposed in a Manager and match
the prefixes constraints that would pass SCAnDroid’s filter (e.g.,
getProcessMemoryInfo, queryUsageStats, or queryAndAggrega-
teUsageStats). We believe that a possible explanation relates to how
SCAnDroid stimulates the APIs or how it processes the return value.
An emblematic case is getProcessMemoryInfo(int[] pid). This API
leaks statistics about the memory usage of running applications.
However, to detect this leak, the API needs to be invoked with a
list of valid “process id,” otherwise a set of NULL is returned. We
believe SCAnDroid might have misclassified this API due to not
passing proper arguments. Since our system identified “pid” as a
meaningful argument, our analysis handles this case and spots the
vulnerable API. This is another important result that shows how the
argument generation we applied, described in Section VI, improves
the effectiveness of the identification of vulnerable APIs.
VIII. CASE STUDIES
This section discusses three case studies to demonstrate how the
vulnerable APIs we identified can be used to mount phishing attacks.
We opted to discuss specific instances of vulnerabilities highlighting
three different categories of problematic APIs. For the interested
reader, Appendix XII-A reports concrete proof-of-concepts on how
these APIs can be exploited in a real attack scenario. Note that
to prove the feasibility of exploitation of all the vulnerable APIs
identified by our system and listed in Table IV, we provided to
Google, during the disclosure process, a Proof-Of-Concept for each
API to show how it can be used to infer which application is going
to be used by the victim.
isAppForeground - CVE-2019-9292. This API is implemented by
the ActivityManager system service: it takes as argument
a Linux user id (UID) and it returns a boolean indicating if the app
run, by this user, is in foreground. Since in Android each installed
app is assigned a different UID, and since the UID → mapping can
be easily obtained, an attacker can invoke multiple times the API
to check when the target app goes to foreground (the proper time
to spoof its UI). This API thus represents the “ideal” case for an
attacker, as she can monitor the state of any app installed on the
device. This API does not require any permission.
getDataLayerSnapshotForUid - CVE-2020-0343. This API is
implemented by the NetworkStats system service, and it is only
available through the AIDL interface. This API takes the UID of
a target app and it returns a NetworkStats object encapsulating
network statistics for said app. Our framework identified multiple
fields leaking sensitive information; two of them — namely set
and txPackets — can be used in combination to successfully mount
a state inference attack. The txPackets field indicates how many
packets the app transmitted since the boot, while the set field
indicates whether the packets are sent while in foreground. When
the malware notices an increment of txPackets, in conjunction with
a change in the set field, it can infer that the target application is
performing, for example, a login, and can react accordingly. This
API requires the ACCESS_NETWORK_STATE permission: since
this permission is “normal,” it is silently granted at installation time.
queryEvents. This API is implemented as part of the UsageStats
system service. It takes as input a range of time and returns a
UsageEvents object, which embeds information about all the events
triggered by the apps running during that time span. Our framework
identified a number fields leaking information about the state of
an app, which, if combined together, can be used to mount a state
inference attack. In particular, an attacker can combine mPackage,
that indicates the package name of the app performing the “event,”
and mEventType, that specifies the type of the event. Note that
other combinations are effective as well. In this case the attacker
is interested in monitoring for a MOVE_TO_FOREGROUND
event, which indicates that the app moved to foreground, the
ideal moment to show the spoofed UI. This API requires the
PACKAGE_USAGE_STATS permission, which the user needs to
manually approve. Nonetheless, real-world malware has been found
in the wild that had the same exact requirements, showing that this
request is legitimate [20], [28], [15].
IX. DETECTING STATE INFERENCE ATTACKS
We believe that automatically identifying APIs that make the
system vulnerable to state inference attacks is a good first step
forward to eradicate this problem. However, all existing techniques
combine static and dynamic analysis, which potentially open these
approaches to false negatives. To protect users from unknown
vulnerabilities, we studied the feasibility of an additional component,
which aims to be a runtime defense and detection system to identify
state inference attacks at the moment they occur. The design of this
component is based on the following two intuitions.
The first one, which is somehow well known, is that all existing
state inference attacks need to implement polling behaviors. With
this term, we refer to an application invoking multiple times a set
10
of APIs within a short time window. Malware exploiting vulnerable
APIs to mount state inference attacks need to use polling to ensure
they can race the target app and make their spoofed UI appear on
top at the right time.
The second intuition, which, to the best of our knowledge, has
not been explored before, is based on the following key hypothesis:
benign apps rarely rely on polling and, when they do, the nature of
their behaviors is different than those of malicious apps. Our hypoth-
esis, if verified, would consequently imply that the polling behavior
could be used as a strong indicator to distinguish between malicious
and benign apps, where with “strong indicator” we refer to a signal
that would not lead to an unacceptable amount of false positives.
This section is organized as follows: 1) We present and discuss
the results of the analysis on a dataset of malicious apps. The aim of
this analysis is to identify peculiarities in terms of APIs invocation
frequencies adopted by phishing apps (§IX-A); 2) we perform an
analysis on a dataset of about 2K benign apps: this acts as our
“training set” to verify the hypothesis mentioned above (§IX-B); 3)
We used the collected insights to guide the design of an on-device
detection system (§IX-C); 4) We discuss the implementation of
the system, and an evaluation on a different dataset of 8K benign