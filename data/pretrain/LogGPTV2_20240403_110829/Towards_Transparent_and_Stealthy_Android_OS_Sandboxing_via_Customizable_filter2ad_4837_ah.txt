[63] Lukas Stefanko. 2019. Tracking down the developer of Android adware affecting
millions of users. https://www.welivesecurity.com/2019/10/24/tracking-down-
developer-android-adware/.
[64] Kimberly Tam, Salahuddin J. Khan, Aristide Fattoriy, and Lorenzo Cavallaro.
2015. CopperDroid: Automatic Reconstruction of Android Malware Behaviors.
In Proceedings of the 2015 Network and Distributed System Security Symposium
(NDSS’15).
[65] The kernel development community. [online]. Kernel Samepage Merging. https:
//www.kernel.org/doc/html/latest/admin-guide/mm/ksm.html.
[66] Roman Unuchek. 2013. The most sophisticated Android Trojan. https://securelist.
com/the-most-sophisticated-android-trojan/35929/.
[67] Roman Unuchek. 2017. Ztorg: money for infecting your smartphone. https:
//securelist.com/ztorg-money-for-infecting-your-smartphone/78325/.
[68] Steven J. Vaughan-Nichols. 2009. Will Mobile Computing’s Future Be Location,
Location, Location? Computer 42, 2 (2009).
[69] Timothy Vidas and Nicolas Christin. 2014. Evading Android Runtime Analysis
via Sandbox Detection. In Proceedings of the 9th ACM Symposium on Information,
Computer and Communications Security (ASIACCS’14).
[70] Timothy Vidas, Daniel Votipka, and Nicolas Christin. 2011. All Your Droid Are
Belong to Us: A Survey of Current Android Attacks. In Proceedings of the 5th
USENIX Conference on Offensive Technologies (WOOT’11).
[71] VMOS Inc. [online]. Virtual Android on Android . http://www.vmos.com/.
[72] Miguel G. Xavier, Marcelo V. Neves, Fabio D. Rossi, Tiago C. Ferreto, Timoteo
Lange, and Cesar A. F. De Rose. 2013. Performance Evaluation of Container-Based
Virtualization for High Performance Computing Environments. In Proceedings of
the 21st Euromicro International Conference on Parallel, Distributed, and Network-
Based Processing.
[73] Lei Xu, Guoxi Li, Chuan Li, Weijie Sun, Wenzhi Chen, and Zonghui Wang. 2015.
Condroid: A Container-Based Virtualization Solution Adapted for Android De-
vices. In Proceedings of the 3rd IEEE International Conference on Mobile Cloud
Computing, Services, and Engineering (MobileCloud’15).
[74] XxsqManage. 2019. The Best Tool to Change Android Phone’s Configuration.
http://www.javaer.xyz/XxsqManager/html/index.html.
[75] Lok Kwong Yan and Heng Yin. 2012. DroidScope: Seamlessly Reconstructing
the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In
Proceedings of the 21st USENIX Conference on Security Symposium.
[76] Wenbo Yang, Yuanyuan Zhang, Juanru Li, Hui Liu, Qing Wang, Yueheng Zhang,
and Dawu Gu. 2017. Show Me the Money! Finding Flawed Implementations of
Third-party In-app Payment in Android Apps. In Proceedings of the 2017 Network
and Distributed System Security Symposium (NDSS’17).
[77] Lei Zhang, Zhemin Yang, Yuyu He, Mingqi Li, Sen Yang, Min Yang, Yuan Zhang,
and Zhiyun Qian. 2019. App in the Middle: Demystify Application Virtualization
in Android and its Security Threats. In Proceedings of the 45th International
Conference on Measurement and Modeling of Computer Systems (SIGMETRICS’19).
[78] Cong Zheng, Wenjun Hu, and Zhi Xu. 2018. Android Plugin Becomes a Catas-
trophe to Android Ecosystem. In Proceedings of the 1st Workshop on Radical and
Experiential Security (RESEC’18).
APPENDIX
A CORE NETWORK RESOURCE AND POWER
MANAGEMENT
We reuse most of Cells’s kernel-level work to virtualize core net-
work resources such as network adapters, IP addresses, and port
numbers. However, the Android system has been updated signifi-
cantly since Android 6.0. It adopted the so-called “policy routing” to
work with multiple routing tables and rules. Policy routing defines
which traffic a specific routing table is used for. Therefore, we need
to come up with a new virtualization method. We extend Cells
by configuring ndc and iptables commands to add new rules for
policy routing. As WiFi configuration management happens in the
userspace, we adopt the binder service sharing to virtualize WiFi
configuration (see §5.1).
In power management virtualization, VPBox reuses Cells’s solu-
tion in wake-locks virtualization but manages early suspend com-
pletely differently. Since Android 6.0, the early suspend subsystem
has been replaced by SurfaceFlinger’s setPowerMode interface to
manage display’s on/off-screen, which invalidates Cells’s virtualiza-
tion that modifies the early suspend subsystem to recognize device
namespaces. By contrast, we virtualize SurfaceFlinger service at
the user level (see §5.2). We only need to prevent background VPs
from putting the foreground VP into a low power mode via the
setPowerMode interface.
Android Java
Host Userspace
VP Userspace
RIL Java
Libraries
RilD
Vendor RIL
Linux Kernel
Drivers/PPP
Baseband
GSM/CDMA
RIL Java
RilD
RIL Proxy
CellD
Vendor RIL
Linux Kernel
Drivers/ PPP
Baseband
GSM/CDMA
(a) Android
Radio Interface Layer
(b) Cells
Radio Interface Layer
Figure 7: Cells’s Radio Interface Layer (RIL). Cells’s RIL
proxy is visible to apps running in the VP.
B TELEPHONY VIRTUALIZATION VIA RILD
PROXY
As smartphone vendors customize their own proprietary radio
stack, we adopt a user-level device namespace proxy to virtualize
the telephony in the VP. The previous solution proposed by Cells is
not stealthy, because its proxy is located in the VP’s userspace and
visible to apps running in the VP. We show Cells’s Radio Interface
Layer in Figure 7. By contrast, we design a socket-interface-based
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2872proxy that only presents at the host userspace. As shown in Figure 8,
in the host’s Radio Interface Layer, we create a Radio Interface Layer
Daemon (RilD) proxy between the communication flow of Android
telephony Java libraries (RIL Java) and RilD. Then, we create two
standard Unix Domain sockets in the proxy. One socket connects
to the RIL Java of each VP; the other connects to the RIL Java of
the host system. The RIL Java in each VP communicates with the
proxy of the host system, and the proxy passes the communication
data (e.g., dial request and SIM) to the host system’s RilD. The
RilD proxy also passes the VP-related arguments (e.g., call ring
and signal strength) to the VP’s RIL Java over a socket. In this
way, we provide a separate telephony functionality for each VP. In
addition, we customize the SELinux-based device access control
strategy to ensure that private call data (e.g., incoming/outgoing
call information and voice data) pertaining to a specific VP cannot
be accessed by other VPs.
Android Java
Host Userspace
VP Userspace
RIL Java
Libraries
RilD
Vendor RIL
Linux Kernel
Drivers/PPP
Baseband
GSM/CDMA
RIL Java
RIL Java
RilD Proxy
RilD
Vendor RIL
Linux Kernel
Drivers/ PPP
Baseband
GSM/CDMA
(a) Android
Radio Interface Layer
(b) VPBox
Radio Interface Layer
C FILESYSTEM AND ANDROID DEBUG
BRIDGE
Existing Android containers’ SD card partition virtualization does
not comply with the new SD card access management starting from
Android 6.0, which introduces Filesystem in Userspace (FUSE) tech-
nology to manage the SD card partition. Recent Android versions
directly fork a process in the Volume Daemon (Vold) subsystem
and start the sdcard process to mount the FUSE filesystem. Because
the FUSE module supports file system creation in userspace, and
the VP in VPBox runs complete userspace, we take the following
two steps to virtualize SD card partition: 1) open a “dev/fuse” node
in the VP’s Vold process and fork a sdcard process; 2) mount FUSE
filesystem to the “dev/fuse” node.
ADB is a command-line utility that can debug apps, transfer
files back and forth with a PC, and run shell commands. Enabling
ADB for a VP facilitates app security testing [70]. ADB includes
three components: a client, a server, and a daemon (adbd). Usually,
the ADB server and ADB client are located in one device, and they
communicate with adbd process in another device. The cross-device
communication performed by ADB complicates its virtualization.
If the host and the VP are running ADB command at the same time,
we must virtualize the two ends of ADB protocol to avoid conflict.
We build a mutual exclusion mechanism in the Android frame-
work layer. When switching a system to the foreground, we ter-
minate the adbd process in the other ones. In this way, only the
foreground VP can use ADB exclusively. This mechanism is simple
to implement, but the side effect is that the host and background
VPs’ ADB do not work. We argue that this trade-off is acceptable,
as the VP is always activated when using ADB. Besides, as the ADB
protocol partition can only be mounted for one time, we also solve
the difficulty of sharing the ADB protocol partition with the VP. In
the CellD process, we intentionally mount “/dev/usb-ffs/adb”, the
ADB protocol partition’s mount point, to the VP’s system directory.
As a result, the ADB protocol partition is visible to the VP.
Figure 8: VPBox’s Radio Interface Layer (RIL).
D KERNEL VERSION CUSTOMIZATION
Table 5: Common Radio Interface Layer(RIL) commands.
Type
Solicited
Unsolicited
Commands
dial request, get current calls, SIM I/O,
set screen state, set radio state
signal strength, call ring
call state changed
Once a VP’s phone function is enabled, the VP can make/receive
calls and access phone hardware information, such as international
mobile subscriber identity (IMSI) and mobile equipment identifier
(MEID). VPBox disables the telephony functionality for VPs that
have no telephony access. In addition, when the foreground VP is
making or receiving calls, other background VPs cannot make/re-
ceive calls even if they have the telephony functionality. To properly
support the foreground-background usage model, RIL commands
shown in Table 5 require filtering from background VPs or special
handling. We take the same special handling with Cells.
1 const char linux_banner [] =
2
3
" Linux version " UTS_RELEASE " (" LINUX_COMPILE_BY "@"
LINUX_COMPILE_HOST ") (" LINUX_COMPILER ") " UTS_VERSION "\n";
Listing 1: Kernel version information.
1 const char linux_proc_banner [] =
2 "%s version %s"
3 " (" LINUX_COMPILE_BY "@" LINUX_COMPILE_HOST ")"
4 " (" LINUX_COMPILER ") %s\n";
Listing 2: linux_proc_banner.
Customizing kernel version information is a little bit tricky. List-
ing 1 shows the kernel version information. It consists of two ob-
jects defined in the UTS namespace data structure (“UTS_RELEASE”
and “UTS_VERSION ”), as well as linux_proc_banner information
(as shown in Listing 2). The customization of linux_proc_banner
information (Listing 2) is similar to other kernel-related profile cus-
tomizations, but we need to take special measures for “UTS_RELEASE”
and “UTS_VERSION.” These two objects are bound to the UTS
namespace, and the only place that we can edit them is in the func-
tion “clone_uts_ns”, which creates a new UTS namespace when
booting the VP. Therefore, we embed a customization function in
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2873Table 6: VPBox’s customizable device-attribute options (total number: 150).
Type
Customizable Device-Attribute Options
Number
System Property
SECURITY_PATCH, RESOURCES_SDK_INT, BASE_OS, Gsm.version.baseband, Product Name, Useragent,
PREVIEW_SDK_INT, CODE NAME, Description, Secure, USER, Brand, Specific Version Number,
Hardware Serial Number, Device Fingerprint, Device Version Number, Product Local region,
Device Model, Device TAGs, Manufacturer, Device Version Type, Version ID, Product Device,
Httpagent, Device Bootloader, Product Board, Product Locale Language, User Key, RADIO,
Compile machine name, Compiler, SDK, SDK_INT, Version increment, Compile time, Compile type
Kernel Version
UTS_RELEASE, UTS_VERSION, LINUX_COMPILE_BY, UTS_VERSION,
LINUX_COMPILE_HOST, UTS_MACHINE
Memory
Heapsize, Heapgrowthlimit, AvailROMSize, TotalROMSize, AvailRAMSize, TotalRAMSize
CPU
Network
Power
Bluetooth
Location
Telephony
CPUFreq, CPUHardware, CPU Cores, CPU Model, CPU Hardware, CPU Architecture, CPU Version,
CPUTemp, CPUABI, CPU Variant, CPU Part, Feature, CPU Serial Number, CPU Vendor
MAC address, SSID, BSSID, RSSI, IP Address, DNS1, DNS2, Gateway, Available Networks, NetRate,
Netmask, WiFiState, NetworkInerfaces, TypeName, NetworkId, NetworkType, Network Capabilities, Throttling
Battery Scale, Battery Plugged, Battery Temperature, Battery health, Battery Voltage,
Battery Level, Battery Status, Battery Technology, Battery Type
Bluetooth Name, Bluetooth MAC Address, Connected Devices, ProfileConnectionState,
Available Devices, Bluetooth Scanmode, Bluetooth Version, Bluetooth State, Bonding State,
Device Alias, Profiles (e.g., Contact Sharing), Rssi, ScanResultType, ManufacturerData
Accuracy, Speed, GPS Status, Location Type, Best Providers, Base Station Signal Strength, NetworkId,
Longitude, Latitude, Bearing, Altitude, Location Area Code, Cell Identity, SystemId, BaseStationId
SubId, ImsRegistrationState, MMS_USER_ANENT, MMS_UA_PROF_URL, Mobile Network Cod,
IMEI1, IMEI2, MEID, IMSI, IMEISV, ESN, ICCID, Phone Number, SIMState, SIMCountryIso,
Carrier_name, Mobile Country Code, SIMOperatorName, Phone Type, SIMOperator
Display & GPU
GPU Version, Vendor, Density, Renderer, Resolution, ScaledDensity, Extensions,
Touch Screen Type, Brightness, x_px/y_px, x_dpi/y_dpi, GPU Extension
36
6
6
14
18
9
14
15
20
12
“clone_uts_ns” to 1) access our customized “UTS_RELEASE” and
“UTS_VERSION” via our created syscall; 2) update the data structure
“new_utsname” that defines these two objects.
,
Table 7: G-Ware samples’ MD5 values.
Sample
MD5
G-Ware1
B7494A6879FD107FC0910D9F6B7F49B2
G-Ware2 AE2437BC6B21D83A9262A752CD56E678
G-Ware3
BB878E32E75D1136CC10D89619C64E37
G-Ware4
6F46F37EFACE7E6ED38306DA9536A9E5
G-Ware5
5B6614A0E3A824DE836B5D86919F37DA
G-Ware6
8FDFD410B35B356EE2D67828A6A2F05C
G-Ware7
5F62A64CCA5E5CA87C36D3FC6D2FC986
G-Ware8
F9265AA20E6D53C680B9A76E4CFC9F28
G-Ware9
1F66A7A83A331C4DA8FF9EB55C7B317C
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2874