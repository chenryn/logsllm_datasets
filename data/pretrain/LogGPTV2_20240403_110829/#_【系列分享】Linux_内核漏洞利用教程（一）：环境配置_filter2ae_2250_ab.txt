### 1. 定义系统调用入口点
在文件 `arch/x86/entry/syscalls/syscall_32.tbl` 中添加以下内容：
```assembly
.long sys_muhe_test
.long sys_hello
```

### 2. 定义系统调用宏
在文件 `arch/x86/include/asm/unistd_32.h` 中添加以下宏定义：
```c
#define __NR_hello 337
#define __NR_muhe_test 338

#ifdef __KERNEL__
#define NR_syscalls 339
#endif
```
请注意，`NR_syscalls` 应根据现有的系统调用数量进行更新。例如，如果原来有0到336共337个系统调用，现在增加了两个，应将其修改为339。

### 3. 添加函数声明
在文件 `include/linux/syscalls.h` 中添加以下函数声明：
```c
asmlinkage long sys_muhe_test(int arg0);
asmlinkage long sys_hello(void);
```

### 4. 编写系统调用代码
创建一个新的目录来存放自定义系统调用的代码。例如，在 `muhe_test` 目录中创建以下文件：

#### muhe_test.c
```c
#include <linux/kernel.h>
#include <linux/module.h>

asmlinkage long sys_muhe_test(int arg0) {
    printk("I am syscall\n");
    printk("syscall arg %d\n", arg0);
    return (long)arg0;
}

asmlinkage long sys_hello(void) {
    printk("hello my kernel world\n");
    return 0;
}
```

#### Makefile
```makefile
obj-y := muhe_test.o
```

### 5. 修改顶层Makefile
在顶层 `Makefile` 中添加对新目录的支持：
```makefile
core-y        += kernel/ mm/ fs/ ipc/ security/ crypto/ block/ muhe_test/
```

### 6. 编译内核
使用以下命令编译内核：
```sh
make -j2
```
我为虚拟机分配了两个核心，因此使用 `-j2` 选项可以加快编译速度。

### 0x04: Busybox 编译配置

#### 1. 编译步骤
```sh
$ make menuconfig
$ make
$ make install
```

#### 2. 遇到的问题及解决方案

**问题一**
错误信息：
```sh
loginutils/passwd.c:188:12: error: ‘RLIMIT_FSIZE’ undeclared (first use in this function)
setrlimit(RLIMIT_FSIZE, &rlimit_fsize);
```
解决方案：
编辑 `include/libbb.h` 文件，添加以下行：
```c
#include <sys/resource.h>
```

**问题二**
错误信息：
```sh
linux/ext2_fs.h: 没有那个文件或目录
```
解决方案：
在 `menuconfig` 中禁用以下选项：
```sh
Linux System Utilities --->
[ ] mkfs_ext2 
[ ] mkfs_vfat
```

#### 3. 编译完成后配置

**方案1**
```sh
$ cd _install
$ mkdir -pv {bin,sbin,etc,proc,sys,usr/{bin,sbin}}
$ cat > init <<EOF
#!/bin/sh
echo "INIT SCRIPT"
mount -t proc none /proc
mount -t sysfs none /sys
mount -t debugfs none /sys/kernel/debug
mkdir /tmp
mount -t tmpfs none /tmp
mdev -s # We need this to find /dev/sda later
echo -e "nBoot took $(cut -d' ' -f1 /proc/uptime) secondsn"
exec /bin/sh
EOF
$ chmod +x init
$ find . -print0 | cpio --null -ov --format=newc | gzip -9 > /tmp/initramfs-busybox-x86.cpio.gz
$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd /tmp/initramfs-busybox-x86.cpio.gz
```

**方案2**
为了方便，使用另一种方式：
```sh
$ cat > etc/inittab <<EOF
::sysinit:/etc/init.d/rcS
::askfirst:/bin/ash
::ctrlaltdel:/sbin/reboot
::shutdown:/sbin/swapoff -a
::shutdown:/bin/umount -a -r
::restart:/sbin/init
EOF

$ cat > etc/init.d/rcS <<EOF
#!/bin/sh
mount -t proc none /proc
mount -t sys none /sys
/bin/mount -n -t sysfs none /sys
/bin/mount -t ramfs none /dev
/sbin/mdev -s
EOF
$ chmod +x ./etc/init.d/rcS

# 配置 dev 目录
mkdir dev
sudo mknod dev/ttyAMA0 c 204 64
sudo mknod dev/null c 1 3
sudo mknod dev/console c 5 1

$ find . | cpio -o --format=newc > ../rootfs.img
$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd ../busybox-1.19.4/rootfs.img -append "root=/dev/ram rdinit=/sbin/init"
```

### 0x05: 测试系统调用

#### 编写测试程序
```sh
$ cd muhe_test_syscall_lib
$ cat > muhe_test_syscall_lib.c <<EOF
#include <stdio.h>
#include <unistd.h>
#include <sys/syscall.h>

int main(int argc, char **argv) {
    printf("\n Diving to kernel level\n\n");
    syscall(337, 1337);
    return 0;
}
EOF

$ gcc muhe_test_syscall_lib.c -o muhe -static
```
注意：一定要静态链接，因为Busybox环境中没有动态链接库。

#### 将测试程序复制到Busybox文件系统
```sh
$ cp muhe ../busybox-1.19.4/_install/usr/muhe
$ find . | cpio -o --format=newc > ../rootfs.img
```

#### 启动QEMU
```sh
$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd ../busybox-1.19.4/rootfs.img -append "root=/dev/ram rdinit=/sbin/init"
```

### 0x06: 引用与参考
- [Adding a new system call to the Linux kernel](http://www.cs.rochester.edu/~sandhya/csc256/)
- [Adding a system call in X86 QEMU Environment](http://linuxseekernel.blogspot.ie/2014/07/adding-system-call-in-x86-qemu.html)
- [Create a simple file system](http://linuxseekernel.blogspot.com/2014/06/create-simple-file-system.html)
- [Setup for linux kernel dev using qemu](https://beyermatthias.de/blog/2016/11/01/setup-for-linux-kernel-dev-using-qemu/)
- [Root file system for embedded system](http://blog.3mdeb.com/2013/06/07/root-file-system-for-embedded-system/)

### 传送门
- [【系列分享】Linux 内核漏洞利用教程（二）：两个Demo](http://bobao.360.cn/learning/detail/3702.html)