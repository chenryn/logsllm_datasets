            require(!reEntrancyMutex);
            require(balances[msg.sender] >= _weiToWithdraw);
            // limit the withdrawal
            require(_weiToWithdraw = lastWithdrawTime[msg.sender] + 1 weeks);
            balances[msg.sender] -= _weiToWithdraw;
            lastWithdrawTime[msg.sender] = now;
            // set the reEntrancy mutex before the external call
            reEntrancyMutex = true;
            msg.sender.transfer(_weiToWithdraw);
            // release the mutex after the external call
            reEntrancyMutex = false; 
        }
     }
The above code is a way to use mutex lock to avoid recursive protection.
### Real world event
The Dao
  * [The DAO](https://en.wikipedia.org/wiki/The_DAO_\(organization\))
  * [The DAO address](https://etherscan.io/address/0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code)
## (3) Call injection
**When the call function is invoked, you should do strict permission control,
or write the function invoked to hardcode directly.**
In the design of EVM, if the parameter data of the call is 0xdeadbeef (assumed
function name) + 0x0000000000.....01, then it is the invoke function.
Call function injection can lead to token stealing and permission bypass.
Private functions and even partially high-privilege functions can be called
through call injection.
    addr.call(data);             
    addr.delegatecall(data); 
    addr.callcode(data);     
For example, when the delegatecall function must call another contract within
the contract, the keyword library can be used to ensure that the contract is
static and indestructible. By forcing the contract to be static, the storage
environment can be simple to a certain extent and preventing the attacker from
attacking the contract by modifying the state.
### Real world events
call injection
  * [以太坊智能合约call注入攻击](https://paper.seebug.org/624/)
  * [以太坊 Solidity 合约 call 函数簇滥用导致的安全风险](https://paper.seebug.org/633/)
## (4) Permission control
**Different functions in the contract should have reasonable permission
settings.**
Check whether the functions in the contract use public, private and other
keywords correctly for visibility modification. Check whether the contract is
correctly defined and use the modifier to restrict access to key functions to
avoid unauthorized control.
    function initContract() public {
        owner = msg.sender;
    }
The above code should not be a public function.
### Real world event
Parity Multi-sig bug 1
  * [Parity Multi-sig bug 1](http://paritytech.io/the-multi-sig-hack-a-postmortem/)
Parity Multi-sig bug 2
  * [Parity Multi-sig bug 2](http://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/)
Rubixi
  * [Rubixi](https://blog.ethereum.org/2016/06/19/thinking-smart-contract-security/)
## (5) Replay attack
**If the contract involves the demands for entrusted management, attention
should be paid to the non-reusability of verification to avoid replay
attacks.**
In the asset management system, there are often cases of entrusted management.
The principal gives the assets to the trustee for management and pays a
certain fee to the trustee. This business scenario is also common in smart
contracts.
Here is an example of the transferProxy function, which is used when user1
transfers token to user3 but does not have eth to pay for gas price. In this
case, user2 is delegated for payment by calling transferProxy.
    function transferProxy(address _from, address _to, uint256 _value, uint256 _fee,
        uint8 _v, bytes32 _r, bytes32 _s) public returns (bool){
        if(balances[_from]  _fee + _value) revert();
        uint256 nonce = nonces[_from];
        bytes32 h = keccak256(_from,_to,_value,_fee,nonce,address(this));
        if(_from != ecrecover(h,_v,_r,_s)) revert();
        if(balances[_to] + _value = _amount);
        balances[msg.sender] -= _amount;
        etherLeft -= _amount;
        msg.sender.send(_amount);  
    }
The above code use the send() function to transfer, because there is no check
for the returned value of the send() function.
If msg.sender fail to call the contract account fallback(), send() returns
false, which eventually results in a reduction in the account balance with
money loss.
## (5) External call design issue
**For external contracts, pull instead of push is preferred.**
In the case of external calls, unpredictable failure happens. In order to
avoid unknown loss, the external operations should be changed into user's own
disposal.
Error example:
    contract auction {
        address highestBidder;
        uint highestBid;
        function bid() payable {
            if (msg.value  uint) refunds;
        function bid() payable external {
            if (msg.value = _amount);
        balances[msg.sender] -= _amount;
        etherLeft -= _amount;
        msg.sender.send(_amount);  
    }
The above code does not verify the return value of send. If msg.sender is a
contract account, send returns false when the fallback call fails.
So when using the above method, you need to check the return value and make
error handling.
    if(!someAddress.send(55)) {
        // Some failure code
    }
It's worth noting that as a part of the EVM design, the following functions
will return True if the contract being called does not exist.
    call、delegatecall、callcode、staticcall
Before calling such functions, you need to check the validity of the address.
## (7) Weak random number issue
**The method of generating random numbers on smart contracts requires more
considerations.**
The Fomo3D contract introduces the block information as a parameter for
generating the random number seed in the airdrop reward, which causes the
random number seed to be affected only by the contract address and cannot be
completely random.
    function airdrop()
        private 
        view 
        returns(bool)
    {
        uint256 seed = uint256(keccak256(abi.encodePacked(
            (block.timestamp).add
            (block.difficulty).add
            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add
            (block.gaslimit).add
            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add
            (block.number)
        )));
        if((seed - ((seed / 1000) * 1000)) < airDropTracker_)
            return(true);
        else
            return(false);
    }
The above code directly led to the Fomo3D incident causing more than a few