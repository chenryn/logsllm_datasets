您可以在[第 3 章](3.html "Chapter 3. Configuring Docker Containers")、*配置 Docker 容器*中找到更多关于链接的信息。
### 使用大使容器的跨主机链接
下图表示使用大使容器的跨主机链接:
![Cross-host linking using ambassador containers](img/4787OS_04_03.jpg)
大使容器用于跨主机链接容器。在这种架构下，无需重启应用容器，就可以重启/替换数据库容器。
您可以在[第 3 章](3.html "Chapter 3. Configuring Docker Containers")、*配置 Docker 容器*中找到更多关于大使容器的信息。
## 使用 etcd 的服务发现
为什么我们需要专门的服务发现解决方案？虽然大使容器和链接解决了不需要知道其 IP 地址就能找到容器的问题，但它们确实有一个致命的缺陷。您仍然需要手动监控容器的运行状况。
想象一下这样一种情况，您有一个后端服务器和前端服务器通过大使容器链接到它们的集群。如果其中一台服务器出现故障，前端服务器仍然会继续尝试连接后端服务器，因为就它们而言，这是唯一可用的后端服务器，这当然是错误的。
现代服务发现解决方案，如`etcd`、`Consul`和`doozerd`不仅仅是提供正确的 IP 地址和端口。实际上，它们是分布式键值存储，但具有容错性和一致性，并在失败时处理主选举。它们甚至可以充当锁服务器。
`etcd`服务是由 **CoreOS** 开发的开源分布式键值商店。在集群中，`etcd`客户端运行在集群中的每台机器上。`etcd`服务在网络分区和当前主设备丢失期间优雅地处理主设备选举。
您的应用可以向`etcd`服务读写数据。`etcd`服务的常见示例是存储数据库连接详细信息、缓存设置等。
这里列出了`etcd`服务的特性:
*   简单、可卷曲的应用编程接口(HTTP + JSON)
*   可选 **安全** **套接字** **层** ( **SSL** )客户端证书认证
*   按键支持**时间**T3】到 T5】直播 ( **TTL**
### 注
`Consul`服务是`etcd`服务的一个很好的替代。没有理由选择一个而不是另一个。本节旨在向您介绍服务发现的概念。
我们在以下两个阶段使用`etcd`服务:
1.  我们向`etcd`服务注册我们的服务。
2.  We do a lookup to find services thus registered.
    下图显示了`etcd`服务:
    ![Service discovery using etcd](img/4787OS_04_06.jpg)
这看起来像是一个简单的任务，但是构建一个容错和一致的解决方案并不简单。如果服务失败，您还需要得到通知。如果您以简单的集中式方式运行服务发现解决方案本身，它可能会成为单点故障。因此，服务发现服务器集群中的所有实例都需要与正确的答案同步，这就产生了有趣的方法。CoreOS 的团队开发了一种被称为**筏**的共识算法来解决这个问题。你可以在[网站上了解更多。](http://raftconsensus.github.io)
让我们看一个例子来了解一下情况。在这个例子中，我们将在一个容器中运行`etcd`服务器，看看注册一个服务并发现它有多容易。
1.  第一步:运行`etcd`服务器:
    ```
    $ docker run -d -p 4001:4001 coreos/etcd:v0.4.6 -name myetcd
    ```
2.  Step 2: Once the image is downloaded and the server starts, run the following command to register a message:
    ```
    $ curl -L -X PUT http://127.0.0.1:4001/v2/keys/message -d value="Hello"
    {"action":"set","node":{"key":"/message","value":"Hello","modifiedIndex":3,"createdIndex":3}}
    ```
    这只不过是在`/v2/keys/message`路径上对服务器的`PUT`请求(`message`是这里的关键)。
3.  第三步:用以下命令取回钥匙:
    ```
    $ curl -L http://127.0.0.1:4001/v2/keys/message
    {"action":"get","node":{"key":"/message","value":"Hello","modifiedIndex":4,"createdIndex":4}}
    ```
您可以通过更改值、尝试无效密钥等方式继续进行实验。你会发现响应在`JSON`中，这意味着你可以很容易地将其与你的应用集成在一起，而不需要使用任何库。
但是我将如何在我的应用中使用它呢？如果你的应用需要运行多个服务，可以用链接和大使容器连接在一起，但是如果其中一个变得不可用或者需要重新部署，需要做大量的工作来恢复链接。
现在假设您的服务使用`etcd`服务。每个服务根据它的名称注册它的 IP 地址和端口号，并通过它们的名称发现其他服务(这些名称是不变的)。现在，如果一个容器因为崩溃/重新部署而重新启动，新容器将根据修改后的 IP 地址进行注册。这将更新`etcd`服务为后续发现请求返回的值。然而，这意味着单个`etcd`服务器也可能是单点故障。对此的解决方案是运行一组`etcd`服务器。这就是由 CoreOS(创建`etcd`服务的团队)开发的 Raft 共识算法的作用。通过`etcd`服务部署应用服务的完整示例可在[http://jasonwilder . com/blog/2014/07/15/docker-service-discovery/](http://jasonwilder.com/blog/2014/07/15/docker-service-discovery/)上找到
## Docker 编排
一旦你从简单的应用扩展到复杂的架构，你就会开始使用工具和服务，比如`etcd`、`consul`和`serf`，你会注意到它们都有自己的一套 API，即使它们有重叠的特性。如果您将您的基础架构设置为一套工具，并且发现需要切换，那么切换供应商需要相当大的努力，有时甚至需要更改代码。这种情况可能会导致供应商锁定，这将破坏 Docker 成功创建的有前途的生态系统。为了给这些服务提供商提供一个标准的接口，以便他们几乎可以用作即插即用的解决方案，Docker 发布了一套编排服务。在本节中，我们将看一看它们。然而，请注意，在撰写本书时，这些项目(机器、群和合成)仍在 Alpha 中并处于积极开发中。
## Docker 机器
Docker Machine 旨在提供一个单一的命令，带你从零到 Docker 项目。
在 Docker Machine 之前，如果您打算在新主机上开始使用 Docker，无论是虚拟机还是基础架构提供商(如**亚马逊** **网络** **服务** ( **AWS** )或数字海洋)中的远程主机，您都必须登录该实例，并运行该实例中运行的操作系统特定的设置和配置命令。
对于 Docker Machine，无论是在新笔记本电脑上、在数据中心的虚拟机上还是在公共云实例上配置`docker`守护程序，同一个命令都会让目标主机准备好运行 Docker 容器:
```
$ machine create -d [infrastructure provider] [provider options] [machine name]
```
然后，您可以从同一个界面管理多个 Docker 主机，而不管它们的位置如何，并在它们上面运行任何 Docker 命令。
除此之外，该机器还具有可插拔后端，这使得向基础设施提供商添加支持变得容易，同时保留了通用的面向用户的应用编程接口。默认情况下，机器附带驱动程序，以便在本地使用 Virtualbox 以及在数字海洋实例上远程配置 Docker。
注意 Docker Machine 是一个独立于 Docker 引擎的项目。你可以在 https://github.com/docker/machine 的 Github 页面找到这个项目的更新细节。
## 蜂群
**Swarm** 是 Docker 提供的原生聚类解决方案。它采用了 Docker 引擎，并将其扩展到，使您能够处理一组容器。使用 Swarm，您可以管理 Docker 主机的资源池，并安排容器在上面透明地运行，自动管理工作负载并提供故障转移服务。
为了进行调度，它会考虑容器的资源需求，查看主机中的可用资源，并尝试优化工作负载的放置。
例如，如果您想要调度一个需要 1 GB 内存的 Redis 容器，以下是您如何使用 Swarm 调度它:
```
$ docker run -d -P -m 1g redis
```
除了资源调度，Swarm 还支持基于策略的调度，具有标准和自定义约束。例如，如果您想在固态硬盘支持的主机上运行您的 **MySQL** 容器(为了确保更好的读写性能)，您可以指定如下:
```
$ docker run -d -P -e constraint:storage=ssd mysql
```
除了所有这些，Swarm 还提供高可用性和故障转移。它持续监控容器的运行状况，如果一个容器发生故障，它会通过将 Docker 容器从故障主机移动并重新启动到新主机来自动重新平衡。最好的部分是，无论您是从一个实例开始还是扩展到 100 个实例，界面都保持不变。
和 Docker Machine 一样，Docker Swarm 也在 Alpha 中，并且在不断进化。前往 Github 上的知识库了解更多信息:[https://github.com/docker/swarm/](https://github.com/docker/swarm/)。
## 复合 Docker
**缀**是最后一块的拼图。借助 Docker Machine，我们提供了 Docker 守护程序。有了 Docker Swarm，我们可以放心，我们将能够从任何地方控制我们的容器，如果出现任何故障，它们将保持可用。Compose 帮助我们在这个集群上组合分布式应用。
将它与我们已经知道的东西进行比较，可能有助于我们理解所有这些是如何协同工作的。Docker Machine 的作用就像操作系统对程序的作用一样。它为容器提供了一个运行的地方。Docker Swarm 就像程序的编程语言运行时。它管理资源，为容器提供异常处理等等。
Docker Compose 更像是一个 IDE，或者说是一种语言语法，它提供了一种表达程序需要做什么的方式。使用 Compose，我们可以指定分布式应用必须如何在集群中运行。
我们通过编写一个`YAML`文件来声明我们的多容器应用的配置和状态，从而使用 Docker Compose。例如，假设我们有一个使用 Redis DB 的 Python 应用。下面是我们如何为 Compose 编写`YAML`文件:
```
containers:
  web:
     build: .
     command: python app.py
     ports:
     - "5000:5000"
     volumes:
     - .:/code
     links:
     - redis
     environment:
     - PYTHONUNBUFFERED=1
  redis:
     image: redis:latest
     command: redis-server --appendonly yes
```
在前面的示例中，我们定义了两个应用。一个是 Python 应用，需要从当前目录中的 Dockerfile 构建。它有一个公开的端口(`5000`)，并且有一个卷或一段代码绑定装载到当前工作目录。它还定义了一个环境变量，并链接到第二个应用容器`redis`。第二个容器使用 Docker 注册表中的`redis`容器。
定义好配置后，我们可以用以下命令启动两个容器:
```
$ docker up
```
通过这个命令，Python 容器使用 Dockerfile 构建，并且从注册表中获取`redis`映像。但是，`redis`容器首先启动，因为 Python 容器规范中的 links 指令，也因为 Python 容器依赖于它。
与 Docker Machine 和 Docker Swarm 一样，Docker Compose 是一个“进行中的工作”，它的发展可以在[https://github.com/docker/docker/issues/9459](https://github.com/docker/docker/issues/9459)进行跟踪。
更多关于 swarm 的信息可以在[上找到。](http://blog.docker.com/2014/12/announcing-docker-machine-swarm-and-compose-for-orchestrating-distributed-apps/)
# 安全
在决定是否投资某项技术时，安全性是最重要的，尤其是当该技术对基础设施和工作流程有影响时。Docker 容器大多是安全的，由于 Docker 不会干扰其他系统，所以可以使用额外的安全措施来加强`docker`守护进程周围的安全性。最好在专用主机上运行`docker`守护进程，其他服务作为容器运行(除了`ssh`、`cron`等服务)。
在本节中，我们将讨论 Docker 中使用的与安全性相关的内核特性。我们还将把`docker`守护进程本身视为可能的攻击媒介。
形象信用[http://xkcd.com/424/](http://xkcd.com/424/)
![Security](img/4787OS_04_01.jpg)
## 内核命名空间
名称空间为容器提供沙箱。当一个容器启动时，Docker 为该容器创建一组名称空间和组。因此，属于特定命名空间的容器不能看到或影响属于其他命名空间或主机的另一个容器的行为。
下图解释了 Docker 中的容器:
![Kernel namespaces](img/4787OS_04_07.jpg)
内核命名空间还为容器创建了一个网络栈，它可以被配置到最后一个细节。默认的 Docker 网络设置类似于一个简单的网络，主机充当路由器，`docker0`网桥充当以太网交换机。
命名空间功能是仿照 OpenVZ，这是一种基于 Linux 内核和操作系统的操作系统级虚拟化技术。OpenVZ 是当今市场上大多数廉价 VPSes 中使用的。它从 2005 年开始出现，命名空间特性在 2008 年被添加到内核中。从那以后，它一直被用于生产，所以它可以被称为“久经沙场”。
## 对照组
控制组提供资源管理功能。虽然这与权限无关，但它与安全相关，因为它有可能成为抵御拒绝服务攻击的第一道防线。对照组也已经存在了相当长的时间，因此可以认为是安全的生产使用。
控制组的进一步阅读，请参考。
## 容器中的根
容器中的 `root`命令被剥夺了许多权限。例如，默认情况下，您不能使用`mount`命令安装设备。另一方面，运行带有`--privileged flag`标志的容器将使容器中的`root`用户拥有主机中根用户所拥有的所有权限。docker 是如何做到这一点的？
你可以把标准的`root`用户想象成拥有广泛能力的人。其中之一是绑定到任何端口(甚至低于 1024)的`net_bind_service`服务。另一项服务`cap_sys_admin`是安装物理驱动器所需的服务。这些被称为能力，进程用来证明它被允许执行操作的令牌。
Docker 容器从一个缩减的功能集开始。因此，您会发现您可以执行一些根操作，但不能执行其他操作。具体来说，非权限容器中的`root`用户不可能执行以下操作:
*   装载/卸载设备
*   管理原始套接字
*   文件系统操作，如创建设备节点和更改文件所有权
在 v1.2 之前，如果您需要使用任何被列入黑名单的功能，唯一的解决方案是运行带有`--privileged`标志的容器。但是 v1.2 引入了三个新的标志:`--cap-add`、`--cap-drop`和`--device`，来帮助我们运行一个需要特定功能的容器，而不会影响主机的安全性。
`--cap-add`标志为容器增加了功能。例如，让我们更改容器接口的状态(需要`NET_ADMIN`服务能力):
```
$ docker run --cap-add=NET_ADMIN ubuntu sh -c "ip link eth0 down"
```
`--cap-drop`标志将容器中的功能列入黑名单。例如，让我们将除`chown`命令之外的所有命令列入一个容器中的黑名单，然后尝试添加一个用户。这将失败，因为它需要`CAP_CHOWN`服务:
```
$ docker run --cap-add=ALL --cap-drop=CHOWN -it ubuntu useradd test
useradd: failure while writing changes to /etc/shadow
```
`--devices`标志是用于将外部/虚拟设备直接安装在容器上。在 v1.2 之前，我们必须将其安装在主机上，并用`--privileged`容器中的`-v`标志绑定安装。有了`--device`标志，您现在可以在容器中使用设备，而无需使用`--privileged`容器。
例如，要将笔记本电脑的 DVD-RW 设备安装到容器上，运行以下命令:
```
$ docker run --device=/dev/dvd-rw:/dev/dvd-rw ...
```
更多关于旗帜的信息可以在[http://blog.docker.com/tag/docker-1-2/](http://blog.docker.com/tag/docker-1-2/)找到。
Docker 1.3 版本引入了额外的改进。命令行界面中添加了一个`--security-opts`标志，允许您设置自定义 **SELinux** 和**appamor**标签和配置文件。例如，假设您有一个允许容器进程只监听 Apache 端口的策略。假设您已经在`svirt_apache`中定义了该策略，您可以将其应用于容器，如下所示:
```
$ docker run --security-opt label:type:svirt_apache -i -t centos \ bash
```
这个特性的好处之一是，用户将能够在 Docker 中运行 Docker，而不必在支持 SELinux 或 AppArmor 的内核上使用`docker run --privileged`容器。不像`--privileged`容器那样给予正在运行的容器所有主机访问权限，会显著减少潜在威胁的表面积。
来源:[http://blog . docker . com/2014/10/docker-1-3-签名-映像-流程-注入-安全-选项-MAC-共享-目录/](http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/) 。
您可以在[https://github . com/docker/docker/blob/master/daemon/exec driver/native/template/default _ template . go](https://github.com/docker/docker/blob/master/daemon/execdriver/native/template/default_template.go)上看到已启用功能的完整列表。
### 注
对于好奇的人来说，所有可用功能的完整列表可以在功能的 Linux 手册页中找到。也可以在网上[http://man7.org/linux/man-pages/man7/capabilities.7.html](http://man7.org/linux/man-pages/man7/capabilities.7.html)找到。
## 对接守护程式攻击面
`docker`守护进程负责创建和管理容器，包括创建文件系统、分配 IP 地址、路由数据包、管理进程以及许多需要根权限的任务。因此作为`sudo`用户启动守护进程势在必行。这就是为什么`docker`守护进程默认将自己绑定到一个 Unix 套接字，而不是它在 5.2 版之前一直使用的 TCP 套接字
Docker 的最终目标之一是能够以非根用户的身份运行守护程序，而不影响其功能，并将需要根用户的操作(如文件系统操作和网络)委托给具有提升权限的专用子进程。
如果您确实想向外界公开 Docker 的端口(以利用远程 API)，建议确保只允许受信任的客户端访问。一个简单的方法是用 SSL 保护 Docker。你可以在[https://docs.docker.com/articles/https](https://docs.docker.com/articles/https)找到设置的方法。
## 安全最佳实践
现在让我们总结一下在您的基础架构中运行 Docker 时的一些关键安全最佳实践:
*   始终在专用服务器上运行`docker`守护程序。
*   除非您有多实例设置，否则请在 Unix 套接字上运行`docker`守护程序。
*   特别注意将装载主机目录绑定为卷，因为容器可以获得完全的读写访问权限，并在这些目录中执行不可逆的操作。
*   如果您必须绑定到一个 TCP 端口，请使用基于 SSL 的身份验证来保护它。
*   避免在容器中运行具有根权限的进程。
*   绝对没有合理的理由说明为什么在生产中需要运行权限容器。
*   考虑在主机中启用 apparemor/SELinux 配置文件。这使您能够为主机增加额外的安全层。
*   与虚拟机不同，所有容器共享主机的内核。所以用最新的安全补丁更新内核是很重要的。
# 总结
在这一章中，我们学习了各种工具、应用编程接口和实践，它们帮助我们在基于 Docker 的环境中部署应用。最初，我们查看了远程应用编程接口，并意识到所有 Docker 命令只不过是对`docker`守护程序的基于 REST 的调用的结果。
然后我们看到了如何注入进程来帮助调试正在运行的容器。
然后，我们研究了实现服务发现的各种方法，既使用本地 Docker 功能(如链接)，也借助专门的`config`商店(如`etcd`服务)。
最后，我们讨论了使用 Docker 时安全性的各个方面，它所依赖的各种内核特性，它们的可靠性，以及它们对容器运行的主机的安全性的影响。
在下一章中，我们将进一步探讨本章的方法，并检查各种开源项目。我们将学习如何整合或使用它们来充分实现 Docker 的潜力。****