responding text (cid:12)eld with the expected value. Some
app inputs are messages from system or other apps,
so we can attach these inputs to corresponding event
messages. Besides, some apps trigger speci(cid:12)c behavior
based on the wall time of the Android system. For
example, some malicious behavior happens only if a
certain amount of time passed in the current execu-
tion. We explicitly generate sleep operations if data
constraint relies on the current system time.
In the
current version of AppIntent, we do not support net-
work inputs because we generate test cases through
Android InstrumentationTestRunner [1], which can-
not intercept and modify network inputs. This could
be improved by hooking the network interfaces in the
Android framework, which is our future work.
(cid:15) Highlight activated views of GUI events. Activated
view of each GUI event provides essential context, which
represents a GUI element on the screen, for each user
interaction. For example, if a clicking event is trig-
gered, we need to know what element on the user in-
terface is clicked by user. Thus, AppIntent highlights
GUI element by setting its background color to red,
as depicted in Figure 7(a) and Figure 7(b). For GUI
elements whose view cannot be obtained by Android
InstrumentationTestRunner, e.g., the list items, we
highlight these elements by triggering some dialog box
to display the view information.
(cid:15) Highlight sensitive data read and transmission. To (cid:12)g-
ure out whether the functionality of the app requires
sensitive data transmission, our controlled execution
needs to reveal when the data loading and transmission
happen during the presented event chain. We highlight
these two execution points by raising a noti(cid:12)cation di-
alog box, as depicted in Figure 7(c) and Figure 7(d).
6. EVALUATION
In the implementation of AppIntent, we (cid:12)rst leverage DED
[23] to decompile Android DEX (cid:12)les into Java bytecode. We
implement our event-space constraint graph extraction on
top of soot [8] and the guided symbolic execution engine on
top of JavaPath(cid:12)nder [10]. We implement the controlled
execution and dynamic analysis platform on top of Instru-
mentationTestRunner [1].
In this section, we present our
evaluation results on the eﬀectiveness and accuracy of Ap-
pIntent. In our evaluation, the event-space constraint guided
symbolic execution uses an Intel Xeon machine with 2 eight-
core 2.0Ghz CPUs and 32 GB physical memory, which runs
Debian Linux with kernel version 2.6.32. The controlled ex-
ecution of AppIntent is run on Android 2.3.
6.1 Evaluation Methodology
In order to evaluate the eﬀectiveness of AppIntent and its
key techniques, we need to answer the following two ques-
tions: (i) When producing app inputs leading to some sensi-
tive data transmission, to what extent does event-space con-
straint guided symbolic execution reduce the search space
while guaranteeing the code coverage? (ii) Using the con-
trolled execution based on app inputs, how eﬀective is Ap-
pIntent to distinguish unintended data transmission with
user-intended one?
In the following, we evaluate the execution time of sym-
bolic execution with or without our technique to answer the
(cid:12)rst question and use two sets of real-world Android apps
Figure 5: Event chains explored in symbolic execution by traversing the graph in Figure 4
to answer the second one. Besides, we provide some (cid:12)nd-
ings about sensitive data transmission patterns which are
revealed by the result of AppIntent.
6.2 Effectiveness of Event-space Constraint Guided
Symbolic Execution
To illustrate the eﬀect of event-space constraint guided
symbolic execution, we choose 3 famous apps from Google
Play as samples. Among them, Maps is the Google map,
Youlu is an SMS management app, and WeChat (a.k.a.
Weixin) is a popular chatting tool. As presented in Table 1,
without the help of event-space constraint graph, symbolic
execution cannot (cid:12)nish in 5 days when we explore only 20
triggered events for the target app. This clearly demon-
strates that exhaustively exploring event space is not scal-
able and practical. On the other hand, symbolic execution
cannot cover the critical events in WeChat in this con(cid:12)gu-
ration, and failed to cover critical events in two cases(Youlu
and WeChat) if we lower the threshold to 10 events. This
means that naively limiting the search space can damage
the eﬀectiveness of symbolic execution. However, guided by
event-space constraint graph, normally less than two hours
are needed to explore the limited exploration space, and ex-
tract app inputs corresponding to the sensitive data trans-
mission, without sacri(cid:12)cing the code coverage. Thus, it is
clear that compared to existing approaches, guided symbolic
execution proposed in this paper can greatly increase the ex-
ploration eﬀectiveness.
Case
Maps
Youlu
WeChat
Origin
(10 events)
(hours)
5.43
0.97
21.56
Origin
(20 events)
(hours)
>120
>120
>120
AppIntent
(hours)
0.40
0.13
1.33
Table 1: Running time of symbolic execution. Column 2 and
3 represent the running time when symbolic execution ex-
plores ten or twenty triggered events without the help of our
event-space constraint guided symbolic execution. Column
4 shows the execution time of AppIntent.
6.3 Effectiveness on Analyzing Sensitive Data
Transmission
In this experiment, two sets of real-world Android apps
are selected to evaluate the eﬀectiveness of AppIntent. The
(cid:12)rst set contains 750 malware apps from [46], which are
known to perform malicious activities such as information
leakage, money stealing, and privilege escalation. The sec-
ond set contains 1,000 top free Android apps downloaded
from Google Play. To compare with state-of-the-art pri-
vacy leakage approaches, we evaluate the same test datasets
with TaintDroid [22] driven by MonkeyRunner. The results
are depicted in Table 2. To verify the result of AppIntent,
we perform manual analysis, in which we not only check
whether apps reported by AppIntent transmit sensitive data,
but also verify whether apps eliminated by AppIntent do not
contain sensitive transmission.
As from the table, static taint analysis (the (cid:12)rst step of
AppIntent) detects 582 (442+140) cases of possible sensi-
tive data transmission from two datasets. We (cid:12)nd that 164
cases are false positives, which are eliminated by the next
step of AppIntent, guided symbolic execution. With a man-
ual analysis of the code of these programs, we (cid:12)nd that most
false positives in static analysis are caused by the insuﬃcient
context information and dead code, such as debugging code
wrapped by if(debug) branches. There are another 44 cases
from static analysis that failed to pass our symbolic execu-
tion. A further investigation shows that DED is unable to
transform 42 cases from dex format to Java class(cid:12)le, and
the other two cases contain native code that currently can-
not be handled by AppIntent. To check whether the app in-
puts generated by symbolic execution trigger sensitive data
transmission, we applied manual analysis on the result of
symbolic execution, and found that all cases transmit sensi-
tive data de(cid:12)ned in this paper.
With the app inputs extracted in symbolic execution, Ap-
pIntent successfully generates controlled executions for 358
(288+70) apps, among which, 245 (219+26) have been iden-
ti(cid:12)ed as unintended data transmission. We notice that the
top free apps still have user unintended leakages, among
which most apps are SNS (Social Networking Service) apps
or apps that have embedded advertising modules. The leak-
age of SMS and contacts are all found in SNS apps. On the
other side, malware may also contain both user intended and
non-intended transmission, because malicious data leakage
can hide behind some normal data transmission to bypass
the state-of-the-art security validations. For example, we
found that an application acts like an SNS app in disguise,
but in the background, it stealthily transmits user contacts
without user consent.
It is worth noting that the current
version of AppIntent failed to execute test cases of 43 apps
because they are driven by network input, which is not sup-
ported by InstrumentationTestRunner. This could be fur-
ther supported by instrumenting control code in Android
framework.
As a comparison, TaintDroid can only detect 165 (125+40)
cases as possible privacy leakage, most of which are leakage
of device IDs. This is much less than AppIntent. Further-
more, the result of TaintDroid is hard to verify because it
does not contain corresponding app inputs. Through our
manual investigation, among these cases, 151 cases are also
ComposeMessageActivityMessagePopupOnCreate()OnResume()OnStart()OnClick(v1)OnCreate()OnResume()OnStart()OnClick(v2)PushReceiverMessagePopupOnCreate()OnResume()OnStart()OnReceive()OnNewIntent()12345: rollback678910111213Malicious Apps
Google Play Apps
Source
Device
ID
Phone
Info
Location
Contacts
SMS
Total
AppIntent
(Static/
Symbolic/
Controlled
Execution)
389/256/
246
53/50/50
Unintended/
Intended
Data
Transmission
198/0
50/0
76/68/67
13/13/13
27/27/17
442/304/288 219/17
46/4
1/10
16/3
Local
Logging
TaintDroid
73
1
18
2
0
74
101
0
11
0
0
125
AppIntent
(Static/
Symbolic/
Controlled
Execution)
98/43/43
0/0/0
36/15/15
10/10/10
9/8/8
140/70/70
Unintended/
Intended
Data
Transmission
Local
Logging
TaintDroid
24/0
0/0
0/13
1/9
1/7
26/29
19
0
2
1
0
22
37
19
5
3
0
40
Table 2: Sensitive data transmission apps detected. The (cid:12)rst part depicts the results of the chosen malware, and the second
part are results of apps from Google Play. For each dataset, the (cid:12)rst column represents the type of sensitive data transmitted,
while Column 2 depicts the reported data transmission cases after each phase of AppIntent. Column 3 presents the number of
data transmission of each kind. Column 4 depicts the number of sensitive data written to the local logging system. Column
5 lists the number of possible leakage cases detected by TaintDroid.
covered by AppIntent while 14 cases not. We manually
checked the code of ten apps reported by TaintDroid but
not reported in AppIntent, and found that nine of them do
not actually leak privacy information. The remaining four
cases either failed in DED, or contain native code that is not
covered by AppIntent. In the 151 cases that are reported by
both AppIntent and TaintDroid, 20 cases are actually classi-
(cid:12)ed as user-intended data transmission by AppIntent, which
means they are not true privacy leakage. Since TaintDoird
does not provide corresponding app input to trigger the sen-
sitive data transmission, it cannot distinguish user-intended
data transmission from unintended one.
In addition, we also have several interesting (cid:12)ndings:
Finding 1: Data transmission of device IDs and phone
numbers are very common but typically not noticed by most
smartphone users. Among the detected unintended data
transmission in the two selected datasets, most cases are
transmission of device IDs or phone numbers. We also no-
tice that almost all data transmission cases of device IDs
and phone numbers do not inform users the operation. We
believe that it occurs because Android apps use such infor-
mation as the unique user identi(cid:12)er when connected to their
own server.
Finding 2: Lots of apps write sensitive data into local log-
ging system. Among the tested datasets, 96 (74+22) apps
log sensitive data into local logging system, which is bad
practice and may lead to indirect privacy leakage. Addition-
ally, we (cid:12)nd that not only device IDs and phone numbers
are written to Android logs, but also locations and user con-
tacts are temporally stored in several cases. These logged
data can be leveraged by malicious apps that steal Android
log instead of transmitting sensitive data directly. Since
privacy leakage detection approaches do not cover leakage
of local logging, such apps could bypass existing detection
tools.
6.4 Analysis Time
Our static analysis phase costs 96 hours to analyze all
1,750 apps, among which 70 hours are used in static taint
analysis. The analysis time can be further reduced by dis-
tributing the analysis workload to multiple machines. Since
each application costs about 3.3 minutes on average, the
analysis time is almost negligible to the Android market op-
erators.
Our symbolic execution costs 5 to 134 minutes to verify a
certain path reported by static analysis, depending on the
search space and the complexity of the app. Verifying diﬀer-
ent paths can also be processed in parallel because exploring
the possible search space of each sensitive data transmission
path does not depend on information of other paths. As an
oﬄine analysis tool, such a validation time is also acceptable
to the marketplaces that have enough computing power.
6.5 Case Studies
We now present two case studies from our evaluation:
one represents user-intended data transmission (Anzhuod-
uanxin) and the other represents unintended transmission
(Tapsnake). Video demonstrations of AppIntent for both
cases are available at [4, 5].
Anzhuoduanxin [3] is an SMS management app that pro-
vides a set of SMS-related functions such as creating new
messages or forwarding a cached message to another user.
With the help of our event-space constraint guided symbolic
execution, AppIntent generates two feasible app inputs that