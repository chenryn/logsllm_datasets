The proxy and stub are transparent to each side of the applica-
tion. In this way, the proxy and stub hide all the details of inter-
process communication. 
If you've ever done any communications programming, you
will realize that the code hidden inside the proxy and stub is
quite involved. The implementation of marshaling (which in
COM means, "moving data across process or network bound-
aries") is not trivial. Luckily, you don't have to write marshaling
code. We're going to generate our server using MIDL, which will
automatically create the Proxy and Stub. Because of MIDL, the
process is completely invisible and you generally do not have to
think about it. 
Not all COM interfaces use a proxy and stub. Some simple
server models don't require any marshaling of data. Other inter-
Figure 6–3
Relationship between the proxy and stub
Server
Application
COM
Object
Stub
Proxy
Client
Program
Client
Application
Process or
Network Boundries
Method Calls
87
Additonal Information and Updates: http://www.iftech.com/dcom
faces use a type of marshaling known as "type library" marshal-
ing. These servers are commonly known as dual or "dispatch"
interfaces. One of the most important features of COM is that our
client application can ignore all the infrastructure required to use
the interface. The generation of Proxies and Stubs and all the
marshaling will be taken care by the server. Happily, we can pre-
tend our interface is a simple pointer. COM hides the implemen-
tation of the server from the client programmer. 
COM Identifiers: CLSID AND IID
COM makes heavy use of GUIDs to identify items. When you
call CoCreateInstance to get a specific interface, you need two
pieces of information. 
• The COM class that implements the interface 
• The specific interface you wish to access 
These two pieces of information are uniquely specified by
the CLSID and IID respectively. Getting back to the example pro-
gram, take a look at the first parameter of CoCreateInstance(). It's
defined as a reference to a CLSID. Now, as we stated earlier, a
CLSID is a type of GUID. If you look in AFXWIN.H you'll see
that GUID, IID and CLSID are all the same structure. 
typedef struct _GUID GUID;
typedef GUID IID;
typedef GUID CLSID;
Here's the initialization of the CLSID and IID struct. Note
that there is only 1 hex digit different, but that's enough to make
the two GUID's completely unique. They're so close because
they were generated at about the same time. 
IID iid = 
{0x50709330,0xF93A,0x11D0,{0xBC,0xE4,0x20,0x4C,0x4F,
0x4F,0x50,0x20}};
CLSID clsid = 
{0x50709331,0xF93A,0x11D0,{0xBC,0xE4,0x20,0x4C,0x4F,
0x4F,0x50,0x20}};
88    Chapter 6 •
Understanding the Client and Server 
From the client's point of view, the COM class isn't espe-
cially important. As far as we're concerned, it's just a way to
identify the server that will create our interface. If you're writing
a COM Server, your perspective will be completely different. The
COM Class is fundamental in the server. 
The IID is the unique ID, which identifies the COM inter-
face. It's important to note that an interface can be implemented
by several servers. For example, an interface called IFly might be
implemented by a coclass called CKite , CJet, and CGull. 
CLSCTX -- Server Context
The CLSCTX parameter defines how the server will run. The
three most common forms of this parameter are: 
• CLSCTX_INPROC_SERVER : In-process server. The COM
server is a DLL. 
• CLSCTX_LOCAL_SERVER : Out-of-process server. The
server runs on the same machine as a separate EXE or an
NT service. 
• CLSCTX_REMOTE_SERVER : The server runs on a remote
machine as a separate EXE or an NT service. 
In our first examples we're using CLSCTX_INPROC_SERVER,
which means the server will run as part of our client process.
Commonly, a client will use CLSCTX_SERVER, which allows
either INPROC_SERVER and LOCAL_SERVER. This is the client's
way of saying it doesn't care how the server is implemented. 
Inheritance 
One of the accepted principals of Object Oriented programming
is the concept of inheritance. C++ supports and encourages
inheritance, offering a rich set of techniques for its implementa-
tion. 
COM is often criticized because it does not support inherit-
ance. This is not an oversight on the part of COM's designers,
but a necessary compromise. To understand this point of view,
we have to look at the design goals of COM. COM is designed to
Summary
89
Additonal Information and Updates: http://www.iftech.com/dcom
make components available across processes, networks, and
even operating systems. This means COM has to ensure consis-
tency and simplicity in components and their interfaces. 
Object Oriented computer languages such as C++ are
designed for a different purpose. They are designed to work on
a single computer, and within a single process. C++ is optimized
to efficiently create complex applications. A C++ compiler never
has to work across a network, or run simultaneously across dif-
ferent operating systems (by this I mean more than simple net-
work file access). C++ does not have built-in networking; it's just
a compiler. 
Another related issue is stability. Because COM is distrib-
uted, it needs to have a higher level of stability. Inheritance is, by
definition, a very tight form of coupling. Coupling can introduce
a level of instability into applications. When a base class
changes, it can have severe repercussions on the classes that use
it. Instability is contrary to the design principles of COM. 
As we've said so many times, COM is built around inter-
faces. COM's answer to inheritance is interface inheritance. This
means that you can inherit an interface layout, but you will have
to implement the interface in your COM class. There is no spe-
cial limitation on the C++ class that implements an interface,
other than the fact that it must have a proper VTABLE structure.
For a Visual C++ implementation, a coclass is just a C++ class,
and you're free to inherit from whatever base class you desire. 
Summary
In this chapter we have discussed a number of the details
that apply “behind the scenes” to COM applications. Much of this
information will make it easier to understand what is happening
when a client connects to COM server, but most of these imple-
mentation details are hidden. Because they are hidden these
details generally do not matter, but they may matter when a
COM client or server contains a bug causing a failure. See Chap-
ter 16 and the error appendix for details.
90    Chapter 6 •
Understanding the Client and Server 
S
E
V
E
N
7
An Introduction to 
MIDL 
MIDL stands for Microsoft Interface Definition Language. MIDL is
a special interface 'language' and a compiler that generates, or
“emits,” COM code. MIDL provides a standard way of defining
COM interfaces and objects. The code generated by the MIDL
compiler takes care of much of the grunt work of developing
COM applications. 
In then next three chapters we'll look at how MIDL fits in
with the COM development process. We'll also look at MIDL's
capabilities and syntax, as well as how to define and use a num-
ber common interfaces and their parameters. 
Origins of the MIDL Compiler
As with much of COM, MIDL evolved from the Open Software
Foundations Distributed Computing Environment, also known as
DCE. The DCE way of calling procedures across networks is
called RPC (Remote Procedure Calls). RPC is a useful standard,
but it never became hugely popular because of implementation
problems. 
RPCs use an interface language called IDL. MIDL is just an
'Enhancement' of the IDL language that includes Microsoft's
92    Chapter 7 •
An Introduction to MIDL 
COM extensions. Much of the COM IDL syntax is identical to
RPC , and MIDL has the capability of processing RPC definitions. 
COM and RPCs are actually quite closely tied together on
Microsoft platforms. At a low level, COM uses RPCs as its com-
munication method. This is, however, just a matter of conve-
nience - COM can be implemented with almost any
communication method if you are willing to write the marshaling
code yourself. 
MIDL is a language compiler. The source files of MIDL usu-
ally have the extension of "IDL". The MIDL compiler uses a syn-
tax that is somewhat similar to C++, but it has a number of
important extensions for COM. 
Unlike a traditional compiler, MIDL does not generate object
code (you can't link it). The output consists of several header
files and a type library. These header files will be included into a
C++ program and used to create object code. In many ways, the
MIDL compiler is a code generator. It's interesting to note that
MIDL generates stock C++ code wired straight into the Win32
API. It doesn't use ATL or MFC. 
It's reasonable to ask why we need a special language for
COM interfaces. After all, MIDL itself generates C++ code. The
client and server will probably be implemented in a language
such as C++, why can't we just use C++ syntax and write the
MIDL output ourselves? To answer that question, let's look at
some of the special abilities of MIDL. While it is technically pos-
sible to write MIDL’s output “by hand”, it wouldn’t be much fun.
Precisely Defining Interfaces with the IDL Language
The level of precision required to define a COM interface is quite
high. When working with remote objects you have to be very
precise about how you pass data. 
As C++ programmers, we commonly work with function
(method) calls. When dealing with functions, we don't normally
use the word interface. Every C++ function is like a COM
method - it has a name, a return type, and a parameter list. If you
think about it, C++ header files are similar to COM interface def-
initions because they expose functions to the outside world. 
Origins of the MIDL Compiler
93
Additonal Information and Updates: http://www.iftech.com/dcom
If we're working with C++ objects, we have class defini-
tions. The C++ class is roughly equivalent to a COM interface
definition. In the same way a class encapsulates a group of func-
tions, so does the COM interface. C++ classes are of course much
richer than COM interfaces because they can define data mem-
bers and public and private members. A better C++ analogue to
COM interfaces is a 'struct', which defines only public members. 
There are several important differences between C++ classes
and COM interfaces. One difference is that interfaces don't say
anything about implementation. The very rough COM equivalent
to a C++ object is a coclass, which behaves like an object (it can
be instantiated on a server). 
Defining interfaces (object definitions) in C++ is relatively
easy because we're working in a controlled environment. If func-
tion parameters don't match, the compiler will let you know. If
modules are incompatible, the linker will catch the problem. Of
course, run-time errors are a lot harder to catch, but you still
have extensive error handling, especially if you're testing your
code in debug mode. 
As the caller (client) and object (server) get farther away,
the communication of data becomes more problematic. DLLs, for
example, require more precise definitions than local function
calls. A DLL must be able to dynamically load into memory,
export some of its functions, and use an agreed-upon calling
standard. 
When the client and server are completely removed, as they
are in distributed COM, there's a lot of room for miscommunica-
tion. The IDL language contains a rich set of attributes that pre-
cisely define the method of communication. Not only do you
define objects and methods, but you explicitly describe how to
transfer data. 
Actually, you can define COM interfaces and objects without
MIDL but it requires some complex and unusual syntax. In fact,
MIDL converts your IDL definitions into "C" headers. If you take
a look in these automatically generated header files, you'll find a
lot of compiler directives and a level of complexity you've prob-
ably never seen before. 
94    Chapter 7 •
An Introduction to MIDL 
MIDL Generated Headers
IDL acts as the COM 'Data Dictionary'. You write your COM defi-
nitions in IDL, and run them through the MIDL compiler. MIDL
takes your definitions and generates "C" and C++ language head-
ers. 
These header files are very useful to both the client and
server application. You include the MIDL generated headers for
their function prototypes and 'const' definitions. The same file is
included in both the client and server, ensuring that they are
compatible. 
MIDL generates two basic types of header. The first is a
standard C/C++ "H" header file. If you look in this file you'll see
#include statements, #defines, typedefs, and object definitions -
all the usual stuff in a header file. You also see a number of
obscure compiler directives and macro's. There are also a num-
ber of #ifdef's and conditional compile statements (which seem
to be one of the normal characteristics of computer generated
code.) 
Another header file, the "i.c" file, contains "C" definitions of
all the GUID's used by the application. These GUID's are defined
as "const" types. GUID's are quite long and difficult to type, so
this header prevents a lot of mistakes. 
Because "const" definitions are stored as variables, MIDL
puts them in a "C" module, rather that a header. Our beep server
example would generate a file named "BeepServer_i.c". Unlike a
normal "C" file, this file is actually intended to be included with a
"#include". 
Automatically Generated Proxy/Stub Modules
In this book we do not spend much time talking about Proxy/
Stubs and marshaling. This is because these topics are handled
automatically by the MIDL compiler. You have to be aware that
marshaling is going on, but you won't have to actually imple-
ment it. 
One of the most endearing qualities of MIDL is that it writes
Proxy and Stub definitions based on your IDL code. This is
called "Standard Marshaling". If you write your own marshaling
The IDL Language
95
Additonal Information and Updates: http://www.iftech.com/dcom
it's called "Custom Marshaling". The need to use custom marshal-
ing is rare in normal COM applications. The implementation can
be complex and time consuming. I cover some simple marshal-
ing using the CoMarshalInterThreadInterfaceInStream method
call. Kraig Brockschmidt's book Inside Ole is a good reference
for this topic. 
Automatic Creation of Type Libraries
A type library is a data file that contains the description of COM
objects and interfaces. In other words, a type library is the binary
representation of the IDL file. Type libraries are used heavily by
dual and IDispatch interfaces. The #import directive in C++ (V6
and V5) directly imports the type library, and is probably the eas-
iest way to use COM in a client. 
Type libraries are an interesting subject unto themselves. We
cover them in more detail in Chapter 9. 
MIDL can generate a type library for your COM application.
Back in the earlier days of OLE, type libraries were generated by
a utility named MKTYPLIB. MKTYPLIB used a language called
ODL (Object Description Language) that looks remarkably like
IDL. Actually, MIDL can quite happily process ODL source code. 
The IDL Language
IDL is designed specifically to define all the aspects of COM
communication. For C++ programmers, the syntax will be famil-
iar. IDL uses "C" constructs for almost everything, but adds sev-
eral COM specific attributes. 
Unlike C++, IDL just supports definitions. You can't actually
write programs in IDL. The source files have an extension of
"IDL". You can look at IDL files as the COM equivalent of ".H"
files in C++. 
Although it's an "interface" definition language, IDL does a
lot more than define interfaces. Here are some of the things you
define with IDL. 
• COM interfaces 
96    Chapter 7 •
An Introduction to MIDL 
• Individual Interface Method (Function) definitions. 
• Parameters - Detailed information about how parameters
are passed through COM. 
• COM Class definitions (coclass) 
• Type libraries 
• Types - A variety of data types 
The MIDL compiler can be invoked directly from a com-
mand prompt: 
C:\> midl BeepServer.idl 
MIDL will process the source files and generate output. The
MIDL compiler has been integrated with Version 6.0 of visual
studio. This is a big change from earlier versions of Developer
studio, making COM a more integrated part of the development
environment. You can see the MIDL settings by opening the
project settings and selecting the IDL file of your project. There is
a special MIDL tab under settings. 
Figure 7–1
MIDL settings
The IDL Language
97
Additonal Information and Updates: http://www.iftech.com/dcom
In previous versions in the MIDL command was built into
the “Custom Build” step of the project. When you use the ATL
AppWizard to generate a project, it will include the execution of
the MIDL compiler. If you want to see where the MIDL com-
mand resides, do the following: 1) Click on the “FileView” tab of
the workspace. Highlight the IDL source file. 2) select the
“Project” menu, and look at the “settings”. The “Project Settings”
dialog will be displayed. 3) Find the IDL source file under the
source files, and look at its custom build tab. What you’ll see is a
command under the build commands that looks like the follow-
ing: 
midl /Oicf /h "BeepServer.h" /iid "BeepServer_i.c" 
"BeepServer.idl" 
The workspace automatically executes this command when-
ever the IDL source is modified. If you're curious about the MIDL
command line, there is some help available on the options. 
Interfaces and Methods in IDL
When you start to look at IDL source code, you'll notice the sim-
ilarities with C++. MIDL actually uses the C++ pre-processor to
parse the source file, you'll immediately recognize that it accepts
C++ style comments. 
The interface definition is divided into two units -- attributes
and definitions. The attributes are always enclosed in square
brackets. In the following example, the interface has three
attributes, a uuid, a help string, and a pointer_default. The signif-
icant attribute is the uuid. Uuid is the GUID that identifies this
interface. The Wizards also generate a lot of help attributes like
helpstring and helpcontext. The Help information is mostly used
in type libraries, and is displayed by object browsers like the one
in Visual Basic. 
// A simple interface
[
  uuid(36ECA947-5DC5-11D1-BD6F-204C4F4F5020),
  helpstring("IBeep Interface"),
98    Chapter 7 •
An Introduction to MIDL 
  pointer_default(unique)
]
interface IBeep : IUnknown 
{
};
There are a number of other interface attributes. One of
these is the “dual” attribute , which means the interface supports
both a custom COM interface (IUnknown), and an OLE automa-
tion interface (IDispatch). Dual interfaces offer the flexibility of
connecting through the early binding IUnknown interface, or a
late binding IDispatch interface. See chapter 9 for a detailed dis-
cussion of Dispatch interfaces. 
COM allows interface inheritance. All interfaces MUST
implement the methods of IUnknown. The IBeep interface has
IUnknown as part of IBeep's inheritance. In COM, there is no
concept of public and private. Anything we can define in an
interface is, by default, public. 
Often you will see interfaces that inherit from the IDispatch
interface. These interfaces usually have the "Dual" or "oleauto-
mation" attribute. Like all COM interfaces, IDispatch also inherits
from IUnknown. 
There's nothing to stop you from inheriting from your own
custom interface, as long as that interface implements IUn-
known. Multiple inheritance is not allowed for IDL interfaces,
but objects often do have multiple interfaces. If you really want
to see multiple inheritance, you'll get plenty in ATL - in ATL
inheritance is used as a mechanism to bring multiple interfaces
into an object. 
As you get into the OLE world, you'll find there are numer-
ous standard interfaces you need to implement. One typical OLE
interface is IPersistFile. OLE requires that you implement this
interface for several types of objects that must be able store
themselves and be retrieved from disk files. This interface is well
known: 
it's 
GUID 
(always 
0000010b-0000-0000-C000-
000000000046) and methods are defined in the standard IDL files
in the C++ include directories. You just have to include the inter-
The IDL Language