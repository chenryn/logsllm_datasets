3
1
49
2
0
0
0
0
7
2
2
0
1
0
0
0
0
10
0
1
1
0
0
0
4
4
0
34
0
0
0
1
0
0
0
0
0
3
1
0
0
0
7
0
0
0
0
0
0
4
4
0
20
0
0
1
0
0
0
0
0
3
4
0
3
0
0
3
0
0
1
0
0
0
2
0
0
17
0
1
0
1
1
0
0
0
2
1
0
0
0
1
2
0
0
0
0
0
2
1
4
1
17
1
0
0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
1
2
0
5
3
1
5
3
1
7
2
2
6
12
3
3
1
2
41
1
1
2
1
2
2
22
17
2
142
lated research projects, and our labs. We ran the server tool (the
responder) in sfc.wide.ad.jp, a middlebox-free network that we op-
erate.
From 25th September 2010 to 30th April 2011, we measured 142
access networks in 24 countries. Table 2 shows the venues and the
network types of the experiments.
Access networks are categorized in six types by human annota-
tion. Home networks consisting of a consumer ISP and a home-
gateway are labeled as Home. Public hotspots for example in cafes,
airports, hotels, and conference halls are labeled as Hotspot. Mo-
bile broadband networks such as 3G and WiMAX are labeled as
Cellular. Networks in universities are labeled as Univ. We count
two different networks (e.g., the lecture and the residence segments)
in the same university as two university networks. Enterprise net-
works (also including small ofﬁces) are labeled as Ent. Networks
in hosting services are labeled as Hosting.
4. TESTS AND RESULTS
4.1 TCP Option Tests
TCP Options are the intended mechanism by which TCP can be
extended. Standardized and widely implemented options include
Maximum Segment Size (MSS), deﬁned in 1981; Window Scale,
deﬁned in 1988; Timestamp, deﬁned in 1992; and Selective Ac-
knowledgment (SACK), deﬁned in 1996. IANA also lists TCP op-
tions deﬁned since 1996, but SACK is the most recently deﬁned
option in common use, and predates almost all of today’s middle-
boxes. The question we wish to answer is whether it is still possible
to rapidly deploy new TCP functionality using TCP options by up-
grades purely at the end systems.
Unknown TCP options are ignored by the receiving host. A TCP
extension typically adds a new option to the SYN to request the new
behavior. If the SYN/ACK carries the corresponding new option in
the response, the new functionality is enabled. Middleboxes have
183the potential to disrupt this process in many ways, preventing or at
least delaying the deployment of new functionality.
If a middlebox simply removes an unknown option from the
SYN, this should be benign—the new functionality fails to nego-
tiate, but otherwise all is well. However, removing an unknown
option from the SYN/ACK may be less benign—the server may
think the functionality is negotiated, whereas the client may not.
Removing unknown options from data packets, but not removing
them from the SYN or SYN/ACK would be extremely problem-
atic: both endpoints would believe the negotiation to use new func-
tionality succeeded, but it would then fail. Finally, any middlebox
that crashes, fails to progress the connection, or explicitly resets it
would cause signiﬁcant problems.
To distinguish possibly problematic behaviors, we performed the
following tests:
1. Unknown option in SYN. The SYN and SYN/ACK seg-
ments include an unregistered option.
2. Unknown option in Data segment. The test includes un-
known options in data segments sent by client and server.
3. Known option in Data segment. The test includes a well-
known option in data segments sent by client and server.
All three tests are performed using separate connections. We do
not use the unknown option in SYN for test 2 and 3. Test 3 is in-
cluded to allow us to determine whether it is the unknown nature
of the option that causes a behavior, or just any option. We use an
MP_CAPABLE option for test 1 and an MP_DATA option for test
2; both options are deﬁned in a draft version of MPTCP [12] and
neither is currently registered with IANA, and no known middle-
box yet supports them. On receipt of a SYN with MP_CAPABLE,
our responder returns a SYN/ACK also containing MP_CAPABLE,
and on receipt of a data segment with MP_DATA, it returns an ack
packet containing an MP_ACK option, mimicking an MPTCP im-
plementation.
∗
For test 3, we used the TIMESTAMP option [17], which is not
essential to TCP’s functionality, but which is commonly seen in
TCP data segments. This option elicits a response from the remote
endpoint; a stateful middlebox may also respond, allowing us to
identify such middleboxes.
In the unknown option in SYN test, our code tests for the follow-
ing possible middlebox behaviors:
• SYN is passed unmodiﬁed.
• SYN containing the option is dropped.
• SYN is received, but option was removed.
• Connection is reset by the middlebox.
In the unknown and the known option in data tests, we test for the
same behaviors as in the SYN test. After a normal handshake, the
initiator transmits a full-sized TCP segment including MP_DATA
or TIMESTAMP, using the “echo headers” command described in
Sec. 3.2 to identify what the responder received. With this method
we can identify which outbound or inbound option is interfered
and whether the option is modiﬁed or zeroed. We also look for
middleboxes that split the connection, processing the TIMESTAMP
at the middlebox on either the inbound or outbound leg.
Middlebox Behavior on TCP Options
Tables 3 – 5 summarize the results of the options tests. 142 paths
were tested in total; for ports 80 (http) and 443 (https), we obtained
∗
We use March 2010 draft version of these options’ formats;
MP_CAPABLE is 12 byte length, MP_DATA is 16 byte length, and
MP_ACK is 10 byte length. Option numbers are 30, 31 and 32,
respectively.
Table 3: Unknown Option in Syn
34343
129 (96%)
6 (4%)
0 (0%)
0 (0%)
TCP Port
80
122 (86%)
20 (14%)
0 (0%)
0 (0%)
443
133(94%)
9 (6%)
0 (0%)
0 (0%)
135 (100%)
142 (100%)
142 (100%)
Table 4: Known Option in Data
135 (100%)
142 (100%)
142 (100%)
Table 5: Unknown Option in Data
34343
129 (96%)
6 (4%)
0 (0%)
0 (0%)
TCP Port
80
122 (86%)
13 (9%)
0 (0%)
7 (5%)
443
133(94%)
9 (6%)
0 (0%)
0 (0%)
135 (100%)
142 (100%)
142 (100%)
Observed
Behavior
Passed
Removed
Changed
Error
Total
Observed
Behavior
Passed
Removed
Changed
Error
Total
Observed
Behavior
Passed
Removed
Changed
Error
Total
34343
129 (96%)
6 (4%)
0 (0%)
0 (0%)
TCP Port
80
9 (6%)
4 (3%)
7 (5%)
443
6 (4%)
3 (2%)
0 (0%)
122 (86%)
133 (94%)
results from all paths for all tests. However seven paths did not pass
the unregistered port 34343, even with regular TCP SYN segments.