# Bug report
If you declare shared modules that consist of multiple internal libraries, and
define shareKey for this module, you may get run-time JS exceptions `Type
error: fn is not a function`, because ModuleFederationPlugin will register
more internal libraries under the same shareKey, which will make some shared
libraries inaccessible.
**If the current behavior is a bug, please provide the steps to reproduce.**
Some shared modules consist of multiple separated libraries. For example,
declaring rxjs module as shared:
    shared: {
      [ 'rxjs' ]
    }
In this case ModuleFederationPlugin will generate and register two separated
JS libraries: `rxjs` and `rxjs/operators`, and register them like so:
    register("rxjs", "6.6.7", () =>  .... __webpack_require__(/*! ./node_modules/rxjs/_esm2015/index.js */ 5906)
    register("rxjs/operators", "6.6.7", () => ... __webpack_require__(/*! ./node_modules/rxjs/_esm2015/operators/index.js */ 6370)
This works as expected. But there is a problem when you use shareKey in
config:
    shared: {
      [ 'rxjs': { shareKey: 'rxjs for Angular 13'  } ]
    }
In this case ModuleFederationPlugin will register both libraries under the
same key:
    register("rxjs for Angular 13", "6.6.7", () =>  .... __webpack_require__(/*! ./node_modules/rxjs/_esm2015/index.js */ 5906)
    register("rxjs for Angular 13", "6.6.7", () => ... __webpack_require__(/*! ./node_modules/rxjs/_esm2015/operators/index.js */ 6370)
This will produce unexpected run-time JS errors: `Type error: fn is not a
function`, whenever a function from the first library is called, because the
function will be looked-up in the second library because it will override the
first registered library due to the same key.
**What is the expected behavior?**
ModuleFederationPlugin should correcly register and resolve multiple libraries
(because developers are not aware if shared module consists with more
libraries).
There is currently a workaround for this problem if you need to use shareKey:
you must explicitely define all internal libraries for a shared module, and
define them unique shareKeys:
    shared: {
      [ 
        'rxjs': { shareKey: 'rxjs for Angular 13'  },
        'rxjs/operators': { shareKey: 'rxjs/operators for Angular 13'  },
     ]
    }
**Other relevant information:**  
webpack version: 5.73.0  
Node.js version: 16.15.1  
Operating System: Windows 10  
Additional tools: