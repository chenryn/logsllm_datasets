gram  algorithm and by  another  seven  copies of  the FSA- 
algorithm. The entire process was repeated  once more, and 
the results were averaged.  (Given  the rate of  requests  re- 
ceived  at our web server,  this experiment took about three 
weeks to complete.) 
The results of our experiment is shown in Figures 10 and 
1 1. In terms of space requirements, we found that the FSA- 
algorithm used  1.6KB, while  the  N-gram algorithm used 
7.3KB. Note that  these results obtained with  the real  web 
server are generally  similar to those observed  with training 
scripts.  In  particular,  the difference in  the rate of  conver- 
gence  is  similar to those  observed  before.  Similarly, the 
differences  observed  in  false positive rates are  similar -- 
the false positive rate of the FSA-algorithm is between  6 to 
30 times  lower  than  that  of the N-gram  algorithm.  How- 
ever,  there  are some differences as well:  the ratio  of  false 
positive rates does not increase with the training period, as 
was  observed  in  the previous experiments.  Moreover.  the 
absolute values of false positive rates are much higher.  We 
attribute this to the fact that  there is more variation  in live 
traffic  than what  could be simulated using training scripts. 
This means that both approaches produce higher false pos- 
itives.  Moreover,  if new  types of requests that were never 
experienced  before  arrive at the web server, it is likely that 
both approaches would generate the same number of false 
positives. Thus, the ratio does not increase as with the train- 
ing script based  approach. 
4-5. Attack Detection 
e  Buffer overflow attacks. Almost all buffer overflow at- 
152 
tacks involve execution  of  system  calls by  code run- 
ning in the stack segment.  Our approach will always 
detect  such  attacks  since  it  will  observe  a  corrupted 
stack  frame.  We  have  verified  this  assertion  experi- 
mentally  with a version of FTP server  that  was  mod- 
ified to introduce  new buffer  overflow vulnerabilities. 
Even stealthy attacks that do not execute system calls 
from the stack could be detected. 
Trojan Horse  and  other code  changes.  We  used  our 
system  to detect changes  in  the  behavior  of  FTP, af- 
ter  inserting a  few  lines of  code.  The change modi- 
fied the  location  of most  instructions, even  those that 
corresponded  to unchanged  portions of  code.  Conse- 
quently,  almost  every  system  call  made  by  the  mod- 
ified server  was from a different  program  location  as 
compared  to the original server, thus leading to a con- 
tinuous stream  of  anomalies.  Note that, unlike other 
approaches that do not use program counter informa- 
tion,  the  FSA  approach  can  detect  changes  to  code 
even before the changed portions are executed. 
Maliciously crafted  input.  Several  attacks rely  on  in- 
adequate  checking  done  by  programs  on  their  input 
data.  By suitably  altering the input (or command-line 
argument) an attacker can cause the program to behave 
unexpectedly.  Our approach  will detect these attacks, 
since the attacks induce programs to execute  unusual 
sections of  code and/or  result  in  unusua€ system  call 
traces.  As an example, we detected  the site exec vul- 
nerability in the FTP program. 
Dictionary  or Password  guessing attacks.  These  at- 
tacks do not cause new sections of code to be executed, 
but  are characterized  by  repetitive execution  of  same 
code.  Such attacks  can  be  detected  by  maintaining 
frequency-of-execution  information with the automata 
edges. 
Denial-of-Service Attacks.  Most  DOS  attacks  cause 
server programs to execute some sections of their code 
very frequently. The FSA algorithm can be expected to 
detect them using frequency-of-execution information. 
Based  on our classification  [27] of  attacks reported  in  the 
CERT database,  we  note  that  the  above classes  of  attacks 
account for about half of all attacks reported by  CERT over 
the past few years. 
4.5.1  Attacks Not Detected 
Attacks  that  involve  system  call  argument  values. 
Some attacks (e.g., attacks involving files accessed  via 
symbolic links) differ from normal program execution 
only in terms of system call  arguments.  FSA and  N -  
gram algorithms cannot detect such attacks, since there 
are no changes to the system call sequences. 
e  Attacks  that do not change behavior of attacked pro- 
gram.  Some attacks exploit errors of omission in the 
attacked program, such as, race conditions, opening of 
files without appropriate safeguards and checks, leav- 
ing temporary  files with critical information etc.  Ex- 
ploitations  of  these  errors  are  accomplished using  a 
different  program  from  the  one  containing  the  error, 
and  thus  do not  cause the  “attacked  program” to be- 
have differently. A second class of attacks that do not 
change program  behaviors  are those that exploit sys- 
tem configuration errors (e.g., user writable password 
file)  or protocol  weaknesses  (e.&, SYN-flooding), and 
do not cause programs to misbehave.  All these attacks 
are outside the scope of FSA and N-gram approaches. 
e  Certain classes of attacks launched with knowledge of 
the intrusion detection techniques being used. We indi- 
cated earlier that almost all buffer overflow attacks and 
Trojan Horse programs can be detected by the FSA al- 
gorithm. However, armed with the knowledge of how 
the FSA-based  intrusion detection  approach  works, it 
is  possible  to  develop  successful  buffer  overflow  at- 
tacks, as well as Trojans. 
5  Conclusions 
In  this  paper,  we  presented  a  new  technique  for  intru- 
sion detection  based  on  learning program behaviors.  Our 
method captures program behaviors  in terms  of sequences 
of  system  calls.  These  sequences  are  represented  using 
a  finite-state  automaton.  Unlike previous approaches,  the 
FSA approach does not limit either the number or length of 
system call sequences.  (Even without such limits, our rep- 
resentation  ensures that the size of FSA itself is bounded  - 
in the  worst  case,  its size  is  linear  in  the  size of  the pro- 
gram.)  Moreover,  it  captures  the  looping  and  branching 
structures of a program  in a natural  way, enabling it to rec- 
ognize  variations of behaviors  learnt during training.  The 
presence of program state information enables the FSA ap- 
proach  to perform  more accurate detection of execution of 
unusual  sections of code.  Its ability to focus  on  program 
behaviors  (while ignoring library behaviors) contributes to 
shorter training periods and smaller storage requirements. 
Our experimental results support the  following conclu- 
sions about the FSA method. 
e  FSA-learning algorithms converge quickly. The length 
of training required  is  one of  the most  important cri- 
teria for judging an anomaly detection technique. Our 
experiments show that in absolute terms, FSA learning 
153 
converges  quickly.  For  FTP, NFS  and  HTTP server, 
learning was completed after the servers  used  up sev- 
eral minutes of CPU time. 
1.51  S. Forrest, S. A. Hofmeyr, A. Somayaji, Intrusion De- 
tection  using  Sequences of  System Calls, Journal  of 
Computer Security Vol. 6 (1998) pg  15 1-1 80. 
0  False positive rate of the FSA algorithm is low. In rel- 
ative terms, the FSA algorithm produces much fewer 
false  positives  than  the  A'-gram  algorithm.  Even  the 
absolute values are on the low side, corresponding to a 
rate of 
or less after a moderate period of training. 
(On our web server, this would correspond to about 5 
false positives a day.)  In reality, the actual false posi- 
tives experienced  will be significantly lower, since it is 
unlikely  that isolated deviations from the FSA model 
will be reported as attacks. 
0  Space and  runtime overhead of  FSA-learning is min- 
imal.  Our  experiments show  that  the  space  require- 
ments for the FSA algorithm is low.  Its runtime over- 
head is also low. 
0  FSA  approach is effective in detecting  attacks.  Our 
experiments show  that  the  FSA  approach  can  detect 
a wide range of attacks. 
Several  further improvements to the method are still possi- 
ble. One promising avenue is the incorporation of frequency 
information along with the transitions, so that  we can  de- 
tect  and flag attacks  that involve many  transitions that  are 
associated  with low probability of occurrence. Such an ap- 
proach can detect many  denial of service attacks. 
A second avenue  is the incorporation of  system call  ar- 
gument values into the FSA. This extension will expand the 
set of  attacks  detectable by  the approach  to  include many 
filename related  attacks, such as those involving symbolic 
links. 
References 
[l] D. Anderson, T. Lunt, H. Javitz, A. Tamaru,  and  A. 
Valdes,  Next-generation  Intrusion  Detection  Expert 
System (NIDES): A  Summary, SRI-CSL-95-07, SRI 
International.  1995. 
[2] CERT 
Coordination 
Center 
Advisories, 
http://www.cert.org/advisories/index.html. 
[3]  C. Cowan et al, StackGuard: Automatic Adaptive De- 
tection  and  Prevention  of  Buffer-Overflow  Attacks, 
7th USENIX Security Symposium, 1998. 
141  D.  Endler,  Intrusion  Detection:  Applying  machine 
learning to  solaris  audit data,  In  Proceedings  of  the 
1998 Annual Computer Security Applications Confer- 
ence (ACSAC98). 
161  T. Fraser, L. Badger, M. Feldman Hardening, COTS 
software  with  Generic  Software  Wrappers,  Sympo- 
sium on Security and Privacy,  1999. 
71  D. Ghormley, D. Petrou, S. Rodrigues, and T. Ander- 
son,  SLIC: An  Extensibility System for Commodity 
Operating Systems, USENIX Annual Technical  Con- 
ference, 1998. 
81  A.K.  Ghosh and A. Schwartzbard, A Study in  Using 
Neural Networks for Anomaly and Misuse Detection, 
USENIX Security Symposium, 1999. 
[9]  A.K. Ghosh, A. Schwartzbard and M. Schatz, Learn- 
ing Program Behavior Profiles for Intrusion Detection, 
1 st  USENIX  Workshop  on  Intrusion  Detection  and 
Network Monitoring, 1999. 
[IO]  A.K.  Ghosh,  A.  Schwartzbard  and  M.  Schatz,  Us- 
ing Program Behavior Profiles for Intrusion Detection, 
in  Proceedings  of  the  SANS Third  Conference  and 
Workshop on Intrusion Detection and Response, 1999. 
[ I  I]  A.  K. Ghosh, J.  Wanken, and  F.  Charron, Detecting 
anomalous and unknown intrusions against programs. 
In  Proceedings of  the  1998 Annual  Computer Secu- 
rity  Applications Conference (ACSAC '98),  Decem- 
ber  1998. 
[I21  K. Ilgun,  R.  Kemmerer,  and  P.  Porras,  State Transi- 
tion Analysis: A Rule-Based Intrusion Detection Ap- 
proach, IEEE Transactions on Software Engineering, 
March  1995. 
[ 131  K.  Jain  and  R.  Sekar,  User-Level  Infrastructure for 
System Call  Interposition:  A  Platform  for  Intrusion 
Detection and Confinement, ISOC Network and Dis- 
tributed Security Symposium, 2000. 
[ 141 M. Kearns  and L. Valiant, Cryptographic Limitations 
on Learning Boolean Formulae and Finite Automata, 
ACM STOC, 1989. 
[15]  C. KO, G. Fink  and  K.  Levitt,  Automated  detection 
of vulnerabilities in privileged  programs by execution 
monitoring,  Computer  Security  Application Confer- 
ence, 1994. 
[ 161  A. Kosoresow and S. Hofmeyr, Intrusion detection via 
system call traces, IEEE Software '97. 
[ 171  S. Kumar and E. Spafford, A Pattern-Matching Model 
for Intrusion Detection, Nat'l Computer Security Con- 
ference, 1994. 
154 
[30]  C. Warrender, S. Forrest, B. Pearlmutter, Detecting In- 
trusions Using  System Calls:  Alternative  Data Mod- 
els,  1999 IEEE  Symposium  on  Security  and Privacy, 
May 9-12, 1999. 
[ 181 C. Michael and A. Ghosh, Using Finite Automate to 
Mine Execution Data for Intrusion Detection:  A pre- 
liminary Report, Lecture  Notes in Computer Science 
(1 907), RAID 2000. 
1191 T. Mitchem, R. Lu, R. O’Brien, Using Kernel Hyper- 
visors to Secure Applications, Annual  Computer  Se- 
curity Application Conference, December  1997. 
[20]  W.  Lee  and  S. Stolfo, Data  Mining  Approaches  for 
Intrusion  Detection,  USENIX  Security  Symposium, 
1998. 
[21]  R. Lippmann, D. Fried, I. Graf, I. Haines, K. Kendall, 
D. McClung, D. Weber, S. Webster, D. Wyschogrod, 
R.  Cunningham,  and  M.  Zissman,  Evaluating  In- 
trusion  Detection  Systems:  the  1998  DARPA  Off- 
Line  Intrusion  Detection  Evaluation, in  Proceedings 
of  the DARPA Information Survivability Conference 
and Exposition, 2000. 
[22] T. Lunt et al, A Real-Time Intrusion Detection Expert 
System (IDES) - Final  Report, SRI-CSL-92-05,  SRI 
International.  1992. 
[23]  P.  Porras and R. Kemmerer, Penetration  State Transi- 
tion Analysis:  A Rule based Intrusion Detection  Ap- 
proach,  Eighth  Annual  Computer  Security  Applica- 
tions Conference,  1992. 
[24]  P A. Porras and P. G. Neumann, Emerald: Event mon- 
itoring enabling  responses  to  anomalous  live distur- 
bances,  In  Proceedings  of  the  20th  National  Infor- 
mation Systems Security Conference, pages 353-365, 
October  1997. 
[25]  L.  Pitt  and  M.  Warmuth, The  minimum  consistency 
DFA  problem  cannot  be  approximated  within  any 
polynomial, ACM STOC, 1989. 
[26] L. Rabiher, A tutorial on Hidden Markov Models and 
selected applications in  speech recognition, Proceed- 
ings of the IEEE, 1989. 
[27]  R. 
Classification 
1993 
to 
Sekar 
of 
CERTICC  Advisories 
1998, 
http://seclab.cs.sunysb.edu/sekar/papers/cert.htm 
and  Y.  Cai, 
from 
[28]  R. Sekar and P.  Uppuluri, Synthesizing Fast Intrusion 
Prevention/Detection Systems from High-Level Spec- 
ifications, USENIX Security Symposium, 1999. 
[29]  G. Vigna and R. A. Kemmerer, Netstat:  A network- 
based  intrusion  detection  approach,  In  Proceedings 
of  the  1998 Annual Computer Security  Applications 
Conference (ACSAC’98), pages 25-34, Los Alamitos, 
CA, December  1998, IEEE Computer Society, IEEE 
Computer Society Press. Scottsdale, AZ. 
155