lib
Sandbox Detection Engine
â€¢ The 2nd Option: Driver
â€¢ Monitor system call from target in kernel
â€¢ System callbacks, notifications, filters
â€¢ More complete monitoring coverage ðŸ˜€
â€¢ More comprehensive stain tracking ðŸ˜€
â€¢ Is that all right?
â€¢ PATCH GUARD for 64-bit OS â˜¹
â€¢ Interference from malwares with drivers â˜¹
Sandbox Detection Engine
â€¢ The 3rd Option: Virtualization-based Driver
â€¢ Virtualization-based system call monitoring
â€¢ R/W access to sensitive memory monitoring
Userland
Kernel
lib
system call
obj
proc
fsflt
drv
Sandbox Detection Driver
lib
lib
Sandbox Hypervisor Driver
Sandbox Detection Engine
â€¢ The 3rd Option: Virtualization-based Driver
â€¢ Virtualization-based system call monitoring
â€¢ R/W access to sensitive memory monitoring
â€¢ Avoid BSOD caused by PATCH GUARD ðŸ˜€
â€¢ Protect private driver code and data ðŸ˜€
â€¢ Expand more comprehensive detection ðŸ˜€
Userland
Kernel
lib
system call
obj
proc
fsflt
drv
Sandbox Detection Driver
lib
lib
Sandbox Hypervisor Driver
â€¢ The 3rd Option: Virtualization-based Driver
â€¢ Virtualization-based system call monitoring
â€¢ R/W access to sensitive memory monitoring
â€¢ Avoid BSOD caused by PATCH GUARD ðŸ˜€
â€¢ Protect private driver code and data ðŸ˜€
â€¢ Expand more comprehensive detection ðŸ˜€
â€¢ Is this foolproof?
Sandbox Detection Engine
Userland
Kernel
lib
system call
obj
proc
fsflt
drv
Sandbox Detection Driver
lib
lib
Sandbox Hypervisor Driver
Userland
Kernel
lib
system call
obj
proc
fsflt
drv
Sandbox Detection Driver
lib
lib
Sandbox Hypervisor Driver
â€¢ The 3rd Option: Virtualization-based Driver
â€¢ Virtualization-based system call monitoring
â€¢ R/W access to sensitive memory monitoring
â€¢ Avoid BSOD caused by PATCH GUARD ðŸ˜€
â€¢ Protect private driver code and data ðŸ˜€
â€¢ Expand more comprehensive detection ðŸ˜€
â€¢ Is this foolproof?
â€¢ Unsecured reliability of other kernel modules â˜¹
Sandbox Detection Engine
Userland
Kernel
lib
system call
obj
proc
fsflt
drv
Sandbox Detection Driver
lib
lib
Sandbox Hypervisor Driver
Sandbox Detection Engine
â€¢ The 3rd Option: Virtualization-based Driver
â€¢ Virtualization-based system call monitoring
â€¢ R/W access to sensitive memory monitoring
â€¢ Avoid BSOD caused by PATCH GUARD ðŸ˜€
â€¢ Protect private driver code and data ðŸ˜€
â€¢ Expand more comprehensive detection ðŸ˜€
â€¢ Is this foolproof?
â€¢ Unsecured reliability of other kernel modules â˜¹
â€¢ Poor nested virtualization support of Virtual machine software â˜¹
Userland
Kernel
lib
syscall
obj
proc
fsflt
drv
Sandbox Client Driver
Virtual Machine
Sandbox Detection Engine
Hypervisor
Hardware
Sandbox Detection Engine
Virtual Machine
Host OS Kernel
VM-1
VM-2
Â·Â·Â·
Host Server
â€¢ The 4th Option: Detection Scheme Based on Global Virtual Machine Monitor
Hypervisor
Hardware
Sandbox Detection Engine
Virtual Machine
Host OS Kernel
VM-1
VM-2
Â·Â·Â·
Host Server
Sandbox Detection Engine
â€¢ The 4th Option: Detection Scheme Based on Global Virtual Machine Monitor
â€¢ Core detection code in host OS kernel
â€¢ Integrated Advantages from previous
â€¢ Independent of modules inside VM ðŸ˜€
â€¢ No affect on detection when VM crashed ðŸ˜€
â€¢ Data outputs host record service directly ðŸ˜€
Sandbox Detection Technology
â€¢ Behavior Detection
â€¢ Memory Access Detection
â€¢ Kernel Exploit Detection
â€¢ Kernel Exception Detection
â€¢ Known Vulnerabilities Detection
â€¢ User-mode Exploit Detection
Access Proc
Access File
Behavior
Network
Vulnerablitiy
Exploit
EoP
syscall
UAF
Nullptr
Arbitrary 
addr R/W
Arbitrary 
addr exec
Token
Privileges
Sandbox Detection Technology
â€¢ Behavior Detection
â€¢ Memory Access Detection
â€¢ Kernel Exploit Detection
â€¢ Kernel Exception Detection
â€¢ Known Vulnerabilities Detection
â€¢ User-mode Exploit Detection
Memory Access Detection
Behavior Detection
Guest OS
Hypervisor
Match
I.I.
Match
Ret
Extract
Record
Detection Logging Recorder
Execution Flow in Guest OS
Match
I.I.
Match
Ret
Extract
Record
S.MTF
C.MTF
Recover
Ret
Kernel Exploit Detection
Vulnerability Triggering
Exploiting
Exploit Result
UAF
Nullptr
OOB
Pool/heap spray
Corrupting window
Token
Privileges
Integrity
ACL
...
...
...
KeBugCheck(XX)
Record Context
Guest OS
Hypervisor
Kernel Exception Detection
â€¢ Record critical context when the 
system kernel crashes
Known Vulnerabilities Detection
â€¢ Identify tasks that exploit known 
vulnerabilities accurately
User-mode Exploit Detection
â€¢ Heap Spray Limit Detection
â€¢ Export Address Table Filtering
â€¢ Import Address Table Filtering
â€¢ ROP Detection
â€¢ Flash Specific Detection
â€¢ Vector Length Detection
â€¢ ByteArray Length Detection
â€¢ LoadBytes Dump
â€¢ Other Detection Features
â€¢ VBScript Specific Detection
â€¢ â€¦â€¦
Detection Result Alarm
Advanced Threat Automation Platform
Detection Result Alarm
Advanced Threat Automation Platform
How to find zero-day using sandbox?
Speaking from CVE-2017-0199...
Sandbox Advantage
â€¢ Multiple Environments
â€¢ Each version of Windows
â€¢ Each version of Office
â€¢ Each version of Flash
â€¢ Dynamic Execution
â€¢ Analog interaction
â€¢ Anti-static obfuscation (especially RTF files)
â€¢ Record And Restore The Scene
â€¢ Accurate
â€¢ Vulnerability and exploit identification
â€¢ Automation
â€¢ Automatically show process behaviors
â€¢ Automatically dump files
â€¢ Automatically dump exploit code loaded by LoadBytes
Build Automation Detection System
â€¢ Historical Event Research
â€¢ History 0day/1day study
â€¢ Data Source
â€¢ Massive data from 360
â€¢ High quality shared data source
â€¢ Analysis System
â€¢ Sandbox
â€¢ Notification System
â€¢ Manual Confirmation
â€¢ Related Vulnerability Analysts
Related Vulnerabilities in Nearly 6 Years
2013
2014
2015
2016
2017
2018
CVE-2013-0634
CVE-2013-3906
CVE-2014-1761
CVE-2014-4114
CVE-2014-6352
CVE-2015-1642
CVE-2015-2424
CVE-2015-2545
CVE-2015-5119
CVE-2015-5122
CVE-2016-4117
CVE-2016-7193
CVE-2016-7855
CVE-2017-0199
CVE-2017-0261
CVE-2017-0262
CVE-2017-8570
CVE-2017-8759
CVE-2017-11292
CVE-2017-11826
CVE-2017-11882
CVE-2018-0798
CVE-2018-0802
CVE-2018-4878
CVE-2018-5002
CVE-2018-8174
CVE-2018-8373
CVE-2018-15982
Historical Vulnerability Classification
RTF Control Word Parsing 
Problem
Open XML Tag Parsing 
Problem
ActiveX Control Parsing 
Problem
Office Embedded Flash 
0day
CVE-2010-3333
CVE-2014-1761
CVE-2016-7193
CVE-2015-1641
CVE-2017-11826
CVE-2012-0158
CVE-2012-1856
CVE-2015-2424
CVE-2017-11882
CVE-2018-0798
CVE-2018-0802
CVE-2011-0609
CVE-2011-0611
CVE-2013-0634
Code from HackingTeam
CVE-2016-4117
CVE-2016-7855
CVE-2018-4878
CVE-2018-5002
CVE-2018-15982
TIFF Image Parsing 
Problem
EPS File Parsing Problem
Moniker
Other Office Logic 
Vulnerabilities
CVE-2013-3906
CVE-2015-2545
CVE-2017-0261
CVE-2017-0262
CVE-2017-0199
CVE-2017-8570
CVE-2017-8759
CVE-2018-8174
CVE-2018-8373
CVE-2014-4114
CVE-2014-6352
CVE-2015-0097
History is Always Similar
RTF Control Word Parsing 
Problem
Open XML Tag Parsing 
Problem
ActiveX Control Parsing 
Problem
Office Embedded Flash 
0day
CVE-2010-3333
CVE-2014-1761
CVE-2016-7193
CVE-2015-1641
CVE-2017-11826
CVE-2012-0158
CVE-2012-1856
CVE-2015-2424
CVE-2017-11882
CVE-2018-0798
CVE-2018-0802
CVE-2011-0609
CVE-2011-0611
CVE-2013-0634
Code from HackingTeam
CVE-2016-4117
CVE-2016-7855
CVE-2018-4878
CVE-2018-5002
CVE-2018-15982
TIFF Image Parsing 
Problem
EPS File Parsing Problem
Moniker
Other Office Logic 
Vulnerabilities
CVE-2013-3906
CVE-2015-2545
CVE-2017-0261
CVE-2017-0262
CVE-2017-0199
CVE-2017-8570
CVE-2017-8759
CVE-2018-8174
CVE-2018-8373
CVE-2014-4114
CVE-2014-6352
CVE-2015-0097
Constant Reflection
A few missteps: 4 0days + 1 1day