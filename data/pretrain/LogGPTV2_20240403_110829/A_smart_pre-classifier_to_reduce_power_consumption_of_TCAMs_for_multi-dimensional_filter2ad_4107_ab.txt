 10
 100
 1000  10000  100000
Classifier size
(a) Maximum number of overlapping
rules in the two-dimensional space
 1000
 100
 10
s
d
r
a
c
d
l
i
w
f
o
r
e
b
m
u
N
 1
 1
 10
 100
 1000  10000  100000
Classifier size
(b) Number of wildcard rules in the two-
dimensional space
Figure 2: Properties of real classiﬁers (both axes are in log
scale)
4. DESIGN
To reduce the power consumption of TCAMs, we propose SmartPC,
in which we pre-process a classiﬁer and shufﬂe its rules into blocks
in a TCAM, so that only a few TCAM blocks, instead of all the
blocks that are used to store the classiﬁer, will be searched to ﬁnd
the desired matching rule for any given packet.
SmartPC reduces the complex multi-dimensional packet clas-
siﬁcation problem to a much simpler problem by introducing a
pre-classiﬁer which classiﬁes each incoming packet on two header
ﬁelds, source and destination IP addresses. Hereafter, we use “rules”
to refer to ﬁve-dimensional rules in the original classiﬁer, and “en-
tries” to refer to two-dimensional entries in the pre-classiﬁer. The
rules are shufﬂed into TCAM blocks such that each pre-classiﬁer
entry covers a number of rules in one of the blocks. Note that when
rules are shufﬂed to TCAM blocks, the relative order of the rules is
preserved in each TCAM block, since commodity TCAMs select
the match from the ﬁrst (highest priority) rule.
4.1 Design overview
SmartPC is motivated by our large-scale analysis of real classi-
ﬁers as shown in Section 3, from which we observe that in a clas-
siﬁer, the maximum number of source-destination pairs matching a
given packet is much smaller than the size of the classiﬁer.
The main idea behind our work is that we group source-destination
pairs in a classiﬁer into clusters based on their locations in the two-
dimensional space. The two-dimensional space is thus divided by
non-overlapping rectangles of different sizes. Each rectangle cov-
ers a cluster of rules and represents an entry in the pre-classiﬁer for
the classiﬁer, as discussed in Section 4.2.
Given the ranges of the source and destination IP addresses of a
pre-classiﬁer entry p,
p = {[slp, shp], [dlp, dhp]}
and the ranges of the two header ﬁelds of a rule r,
r = {[slr, shr], [dlr, dhr]}
we say p covers r if slp ≤ slr ≤ shr ≤ shp and dlp ≤ dlr ≤
dhr ≤ dhp, where sl, sh represent lower and upper bound of
source address, and dl and dh stand for lower and upper bound
of destination address.
We then shufﬂe the rules in the classiﬁer such that each pre-
classiﬁer entry is associated with a TCAM block, named speciﬁc
block, which contains up to a block size of rules that intercept with
the entry in the two-dimensional space. If the number of rules that
intercept with the pre-classiﬁer entry is larger than one block size,
the extra rules are stored in TCAM blocks named general blocks.
When classifying a packet, the pre-classiﬁer is ﬁrst consulted. If
a match is found in the pre-classiﬁer, then its associated speciﬁc
block plus the general blocks are activated and searched in paral-
lel for the ﬁnal result; otherwise, if no match is found in the pre-
classiﬁer, only the general blocks are searched.
We propose a classiﬁcation system for SmartPC as shown in Fig-
ure 3. The classiﬁcation process of a packet occurs in the following
steps:
• Each incoming packet is ﬁrst matched against Index TCAM,
which contains pre-classiﬁer entries. The Index TCAM in-
dexes into an associated Index SRAM, which contains the
ID of the speciﬁc TCAM block. This block will be searched
in the second stage lookup.
• In the second stage, only the speciﬁc block found in the ﬁrst
stage, if any, together with general blocks are activated and
involved in two parallel searches.
• Finally the matches from the speciﬁc block and general blocks
are resolved by priority, and the action of the higher priority
match is returned as the ﬁnal result.
The above steps can be pipelined to maintain the same operating
frequency as commodity TCAMs. It is worth noting that although
latency grows slightly due to pipelining, throughput remains un-
changed. Throughput is the main metric of interest.
4.2 Construction of a pre-classiﬁer
In SmartPC, we propose the concept of pre-classiﬁer, which
is motivated by Storm [14], where sampled incoming trafﬁc (i.e.,
packets) are expanded and combined to form evolving rules which
are stored in a rule cache. Those evolving rules are updated over
time and are used as popular rules to classify incoming packets. In
SmartPC, we adapt the idea of expanding rule, while we expand
and combine original rules in a classiﬁer to construct entries in the
proposed pre-classiﬁer. Our approach is not dependent on trafﬁc
pattern and the process only occurs once for each classiﬁer 2. Al-
though this insight about expanding and combining rules is derived
out of Storm, it is worth noting that SmartPC employs an intelligent
pre-classiﬁer to cluster overlapping rules while Storm is focusing
on a multi-core approach.
How to build an effective and efﬁcient pre-classiﬁer is of cru-
cial importance. In SmartPC, each entry in a pre-classiﬁer is con-
structed by expanding and combining the rectangles formed by
source and destination ﬁelds of the rules in the original classiﬁer.
The rules in the classiﬁer are reorganized, with each pre-classiﬁer
entry pointing to a TCAM block that contains all the rules covered
by the corresponding pre-classiﬁer entry. The number of original
2The pre-classiﬁer does not change over time unless the rules in the
classiﬁer change.
Figure 3: Packet classiﬁcation system for SmartPC.
rules covered by a pre-classiﬁer entry is restricted to be less than a
pre-deﬁned parameter, named block size in SmartPC. If the inclu-
sion of a rule causes the number of rules covered by a pre-classiﬁer
entry to exceed the block size, the rule will be marked as general 3.
All the rules marked as general are stored in general blocks, which
will be searched in parallel with the speciﬁc block associated with
the matching pre-classiﬁer entry, if there is any, for each incoming
packet.
Our experimental results show that usually only a small portion
of rules in a classiﬁer are marked as general (e.g., the fraction of
general rules ranges from 0 to around 20% for all the classiﬁers we
evaluated), therefore the number of general blocks will be much
smaller than the total number of TCAM blocks used to store the
whole classiﬁer.
the rule is already covered by a pre-classiﬁer entry, and isGeneral
indicates whether it is marked as a general rule. The size property
of each pre-classiﬁer entry is updated to show the current num-
ber of rules covered by the pre-classiﬁer entry. When this number
reaches BLOCK-SIZE, which is the pre-deﬁned TCAM block size,
the pre-classiﬁer entry can not be expanded any further.
In the outer loop of the algorithm, each rule in the classiﬁer is
processed to form or expand a pre-classiﬁer entry. In the inner loop,
the existing pre-classiﬁer entries are checked one by one, until a
pre-classiﬁer entry is found which can be expanded to include the
current rule without exceeding BLOCK-SIZE. If none is found at
the end of the inner loop, and the rule is not marked as general,
this rule forms a new pre-classiﬁer entry by itself, which may be
expanded later.
end if
for each pre-classiﬁer entry j in P do
if (j.size = BLOCK-SIZE) then
continue
end if
expandedEntry = j
if ExpandPreEntry(i, j, expandedEntry) then
success = false
if (i.isDone) || (i.isGeneral) then
continue
Algorithm 1 BuildPreClassiﬁer()
1: for each rule i in C do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
end if
if i.isGeneral then
success = true
j = expandedEntry
for each rule k in C do
break
end if
end for
if ((!success) && (!i.isGeneral)) then
if k is covered by j then
k.isDone = true
end if
end for
break {j is successfully expanded to cover i}
Example on how to build a pre-classiﬁer.
Table 2 shows a ﬁve-dimensional classiﬁer containing 14 rules.
The source and destination addresses are in the format of address/preﬁx-
length. Figure 4(a) is a graphical representation of the source and
destination address ﬁelds of this classiﬁer, where x-axis and y-axis
represent destination address and source address, respectively.
Figure 4 demonstrates the process of building a pre-classiﬁer for
the given classiﬁer, assuming a block size of 5 (note that real block
size could be much larger, and this small number is for demon-
stration purposes only). Initially there is no existing pre-classiﬁer
entry, thus rule 0 becomes the ﬁrst pre-classiﬁer entry P 0 as shown
in Figure 4(a). Then we try to expand P 0 to cover other rules. In
Figure 4(b), P 0 is expanded to cover rule 1. Since rule 5 intercepts
with the expanded pre-classiﬁer entry P 0, we keep expanding P 0
to cover rule 5 as shown in Figure 4(c). Rule 6 lies inside P 0. Ex-
pansion of P0 to cover rule 7 fails, since the expanded P 0 would
cover more than 5 rules. Therefore 7 is marked as general and
will be stored in general blocks. Rule 8 lies inside P 0, thus so far
P 0 = {0, 1, 5, 6, 8}. The size of P 0 reaches block size. Other
intercepting rules 11, 12 and 13 are also marked as general.
We continue to form new pre-classiﬁer entries. Rule 2 forms a
new pre-classiﬁer entry P 1. Similarly, P 1 is expanded to cover
rules 3, 4, 9 and 10. Thus P 1 = {2, 3, 4, 9, 10} as shown in Fig-
ure 4(d).
Heuristic algorithm.
We present the pseudo code on how to build a pre-classiﬁer in
Algorithm 1.
The inputs to the algorithm include a classiﬁer C, and an empty
pre-classiﬁer P . The properties isDone and isGeneral of each rule
in the classiﬁer are initialized to false, where isDone indicates whether
a new pre entry k = i{no existing pre entry can be ex-
panded and i does not intercept with any existing pre-
entry}
k.size = 1
27:
28:
end if
29: end for
3Though a rule with more wildcards (or shorter preﬁx lengths on
source and destination addresses) is more likely to be marked as
general, rules that are marked as general are not necessarily the
rules with more wildcards.
Algorithm 1 calls ExpandPreEntry, shown as Algorithm 2, in
which a rule is marked as general if it intercepts with the current
pre-classiﬁer entry but the inclusion of the rule causes the size of
Table 2: A classiﬁer which contains 14 rules
Rule#
Src_addr
0
1
2
3
4
5
6
7
8
9
10
11
12
13
228.128.0.0/9
223.0.0.0/9
0.0.0.0/1
0.0.0.0/1
0.0.0.0/1
128.0.0.0/1
128.0.0.0/1
0.0.0.0/0
178.0.0.0/7
0.0.0.0/1
0.0.0.0/1
128.0.0.0/1
128.0.0.0/1
128.0.0.0/1
Dst_addr
0.0.0.0/0
0.0.0.0/0
175.0.0.0/8
225.0.0.0/8
225.0.0.0/8
123.0.0.0/8
37.0.0.0/8
123.0.0.0/8
0.0.0.0/1
172.0.0.0/7
226.0.0.0/7
120.0.0.0/7
120.0.0.0/7
38.0.0.0/7
Src_port
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
Dst_port
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
0 : 65535
protocol
0x01
0x06
0x06
0x01
0x06
0x06
0x06
0x06
0x06
0x06
0x06
0x01
0x06
0x06
the entry to exceed BLOCK-SIZE, or it causes entries in the pre-
classiﬁer to be overlapping, or it results in conﬂicts with other rules.
This algorithm keeps expanding a pre-classiﬁer entry to cover non-
general rules intercepting with it until its size reaches BLOCK-
SIZE, or all the intercepting rules in this round are included. This
function returns true if the expansion succeeds, and false otherwise.
Algorithm 2 ExpandPreEntry(i, j, expandedEntry)
1: tmp = expandedEntry
2: expandedEntry = new entry formed by expanding j to cover i
3: expandedEntry.size += 1
4: if expandedEntry.size > BLOCK-SIZE then
5:
6:
7:
8: end if
9: if expandedEntry overlaps with other pre entries || RuleCon-
i.isGeneral = true
expandedEntry = tmp
return false {fail to expand}
ﬂict(expandedEntry) then
i.isGeneral = true
if i intercepts with j then
10:
11:
12:
13:
14:
15: end if
16: return true {succeed to expand}
end if
expandedEntry = tmp
return false {fail to expand}
Algorithm 2 and Algorithm 3 calls each other recursively. Al-
gorithm 3 checks all the non-general rules in classiﬁer C that are
intercepting with expandedEntry for conﬂicts. It returns true if a
conﬂict is found or BLOCK-SIZE is exceeded; otherwise, it returns
false.
When Algorithm 1 terminates, a list of pre-classiﬁer entries are
formed, and those rules that are not covered by the pre-classiﬁer
are marked as general. These general rules are stored in general
TCAM blocks. All the rules covered by a pre-classiﬁer entry are
stored in the same TCAM block, with their orders in the original
classiﬁer preserved.
In spite of this, the rules covered by other
entries can also be stored in the same TCAM block if they can ﬁt in
the block. This is because the rules covered by different entries will
not overlap. We only need to separate the blocks that store general
rules from other blocks. It is a bin-packing problem to minimize
the number of TCAM blocks when organizing the rules covered
by pre-classiﬁer entries into TCAM blocks. Simple and efﬁcient
heuristics such as best-ﬁt decreasing and ﬁrst-ﬁt decreasing could
be used to solve the problem.
Algorithm 3 RuleConﬂict(expandedEntry)
1: for each rule k in C do
2:
if k.isGeneral || k is already covered || k does not intercept