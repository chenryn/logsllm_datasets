title:Using Decision Trees to Improve Signature-Based Intrusion Detection
author:Christopher Kr&quot;ugel and
Thomas Toth
Using Decision Trees
to Improve Signature-Based Intrusion Detection(cid:1)
Christopher Kruegel1 and Thomas Toth2
1 Reliable Software Group
University of California, Santa Barbara
PI:EMAIL
2 Distributed Systems Group
Technical University Vienna
PI:EMAIL
Abstract. Most deployed intrusion detection systems (IDSs) follow a
signature-based approach where attacks are identiﬁed by matching each
input event against predeﬁned signatures that model malicious activity.
This matching process accounts for the most resource intensive task of
an IDS. Many systems perform the matching by comparing each input
event to all rules sequentially. This is far from being optimal. Although
sometimes ad-hoc optimizations are utilized, no general solution to this
problem has been proposed so far.
This paper describes an approach where machine learning clustering
techniques are applied to improve the matching process. Given a set of
signatures (each dictating a number of constraints the input data must
fulﬁll to trigger it) an algorithm generates a decision tree that is used to
ﬁnd malicious events using as few redundant comparisons as possible.
This general idea has been applied to a network-based IDS. In particu-
lar, a system has been implemented that replaces the detection engine of
Snort [14, 16]. Experimental evaluation shows that the speed of the detec-
tion process has been signiﬁcantly improved, even compared to Snort’s
recently released, fully revised detection engine.
Keywords: Signature-based Intrusion Detection, Machine Learning,
Network Security
1 Introduction
Intrusion detection systems (IDSs) are security tools that are used to detect
evidence of malicious activity which is targeted against the network and its re-
sources. IDSs are traditionally classiﬁed as anomaly-based or signature-based.
Signature-based systems are similar to virus scanners and look for known, suspi-
cious patterns in their input data. Anomaly-based systems watch for deviations
(cid:1) This work has been supported by the FWF (Fonds zur F¨orderung der wis-
senschaftlichen Forschung), under contract number P13731-MAT. The views ex-
pressed in this article are those of the authors and do not necessarily reﬂect the
opinions or positions of the FWF.
G. Vigna, E. Jonsson, and C. Kruegel (Eds.): RAID 2003, LNCS 2820, pp. 173–191, 2003.
c(cid:1) Springer-Verlag Berlin Heidelberg 2003
174
C. Kruegel and T. Toth
of actual behavior from established proﬁles and classify all ‘abnormal’ activities
as malicious.
The advantage of signature-based designs is the fact that they can identify
attacks with an acceptable accuracy and they tend to produce fewer false alarms
(i.e., classifying an action as malicious when in fact it is not) than their anomaly-
based cousins. The systems are easier to implement and simpler to conﬁgure,
especially in large production networks. As a consequence, nearly all commercial
systems and most deployed installations use signature-based detection. Although
anomaly-based variants oﬀer the advantage of being able to ﬁnd prior unknown
intrusions, the costs of dealing with a large number of false alarms is often
prohibitive.
Depending on their source of input data, IDSs can be classiﬁed as either
network- or host-based. Network-based systems collect data from network traﬃc
(e.g., packets from network interfaces in promiscuous mode) while host-based
systems collect events at the operating system level, such as system calls, or at
the application level. Host-based designs can collect high quality data directly
from the aﬀected system and are not inﬂuenced by encrypted network traﬃc.
Nevertheless, they often seriously impact performance of the machines they are
running on. Network-based IDS, on the other hand, can be set up in a non-
intrusive manner without interfering with the existing infrastructure. In many
cases, these characteristics make network-based IDS the preferred choice.
Although some vendors claim to have incorporated anomaly-based detection
techniques into their system, the core detection of most intrusion detection sys-
tems is signature-based. Commercial IDSs like ISS RealSecure [13], Symantec’s
Intruder Alert/Net Prowler [19] or Cisco’s IDS [2] oﬀer a wide variety of diﬀerent
signatures and regular updates. Unfortunately, their engines are mostly undocu-
mented. Academic designs like STAT [20] or Bro [10] and open-source tools like
Snort [14] also follow a signature-based approach. They diﬀer signiﬁcantly in the
way a signature (or rule) can be deﬁned, ranging from single-line descriptions in
Snort to complex script languages such as Bro or STATL [4]. The latter allows
one expressing complete scenarios that consist of a number of related basic alerts
in a certain sequence and therefore require that state is kept. Nevertheless, all
systems require a component that produces basic alerts as a result of comparing
the properties of an input element to the values deﬁned by their rules. These ba-
sic alerts can then be combined as building blocks to describe the more complex
scenarios.
Most systems perform the detection of basic alerts by comparing each in-
put event to all rules sequentially. Some of the aforementioned programs utilize
ad-hoc optimizations, but they require domain speciﬁc knowledge and are not
optimal for diﬀerent rule sets. Therefore, a general solution to this problem is
needed. Our paper describes an approach that improves the matching process
by introducing a decision tree which is derived directly from and tailored to the
installed intrusion detection signatures by means of a clustering algorithm. By
using decision trees for the detection process, it is possible to quickly determine
Using Decision Trees to Improve Signature-Based Intrusion Detection
175
all ﬁring rules (i.e., rules that match an input element) with a minimal number
of comparisons.
The paper is organized as follows. Section 2 discusses related work and de-
scribes current rule matching techniques. Section 3 and Section 4 present the idea
of applying rule clustering and the creation of decision trees in detail. Section 5
explains how the comparison between an input element and a single feature
value is performed. Section 6 shows the experimental results obtained with the
improved system. Finally, in Section 7, we brieﬂy conclude.
2 Related Work
The simplest technique for determining whether an input element matches a rule
is to sequentially compare it to the constraints speciﬁed by each element of the
rule set. Such an approach is utilized by STAT [20] or by SWATCH [18], the
simple log ﬁle watchdog.
Consider a STAT (state transition analysis) scenario that consists of three
states, one start state and two terminal states. In addition, consider that a
transition connects the start state to each of the two terminal states (yielding
a total of two transitions). Every transition represents a rule such that it has
associated constraints that determine whether the transition should be taken or
not, given a certain input element. In our simple scenario with two transitions
leading from the start node to each terminal node, none, one or both transitions
could be taken, depending on the input element. To decide which transitions
are made, every input element is compared sequentially to all corresponding
constraints. In addition, as STAT sensors keep track of multiple scenarios in
parallel, an input element has to be compared to all constraints of all currently
active scenarios. No parallelism is exploited and even when multiple transitions
have constraints that are identical or that are mutual exclusive, no optimization
is performed and multiple comparisons are carried out. The same is true for the
much simpler SWATCH system. All installed regular expressions (i.e., SWATCH
rules) are applied to every log ﬁle entry to determine suspicious instances.
Some systems attempt to improve this process using ad-hoc techniques, but
these optimizations are hard-wired into the detection engine and are not ﬂexibly
tailored to the set of rules which is actually used. A straightforward optimization
approach is to divide the rule set into groups according to some criteria. The idea
is that rules that specify a number of identical constraints can be put together
into the same group. During detection, the common constraints of a rule group
need only be checked once. When the input element matches these constraints,
each rule in the group has to be processed sequentially. When the constraints
are not satisﬁed by the input element, the whole group can be skipped.
This technique is utilized by the original version of Snort [14], arguably the
most deployed signature-based network intrusion detection tool. Snort builds a
two-dimensional list structure from the input rules. One list consists of Rule
Tree Nodes (RTNs), the other one of Option Tree Nodes (OTNs). The RTNs
represent rule groups and store the values of the group’s common rule constraints
176
C. Kruegel and T. Toth
(the source and destination IP addresses and ports in this case). A list of OTNs
is attached to each RTN – these lists represent the individual rules of each group
and hold the additional constraints that are not checked by the group constraints
of the corresponding RTN.
In theory, Snort’s two-dimensional list structure could allow the length of
the lists, and therefore the number of required checks, to grow proportional to
the square root of the total number of rules. However, the distribution of RTNs
and OTNs is very uneven. The 1092 TCP and 82 UDP rules that are shipped with
Snort-1.8.7 and enabled by default are divided into groups as shown below in
Table 1. The Maximum, Minimum and Average columns show the maximum, the
minimum and the average number of rules that are associated with each rule
group.
Table 1. Statistics - Snort Data Structures.
Protocol # Groups # Rules Maximum Minimum Average
UDP
2.6
12.4
TCP
82
1092
23
728
31
88
1
1
For UDP, 31 diﬀerent groups are created from only 82 rules and each group has
only three rules associated with it on average. This requires every input packet
to be checked at least against the common constraints of all 31 groups. For TCP,
more than half of the rules (i.e., 728 out of 1092) are in the single group that
holds signatures for incoming HTTP traﬃc. Therefore, each legitimate packet sent
to a web server needs to be compared to at least 728 rules, lots of them requiring
expensive string matching operations. As can be seen easily, the ad-hoc selection
of source and destination addresses as well as ports provides some clustering of
the rules, but it is far from optimal. According to our experience, the destination
port and address are two discriminating features, while the source port seems
to be less important. However, valuable features such as ICMP code/type or TCP
ﬂags are not used and are checked sequentially within each group.
The division of rules into groups with common constraints is also used for
packet ﬁlters and ﬁrewalls. Similar to Snort, the OpenBSD packet ﬁlter [6] com-
bines rules with identical address and port parameters into skip-lists, moving on
when the test for common constraints fails.
With the introduction of Snort-2.0 [17] and its improved detection engine,
the two-dimensional list structure and the strict sequential search within groups
have been abandoned. The idea is to introduce more parallelism when checking
rules, especially when searching the content of network packets for matching
character strings. A rule optimizer attempts to partition the set of rules into
smaller subsets which can then be searched in parallel.
The goal of the revised detection engine is similar to our decision trees in the
sense that both systems attempt to partition the set of rules in smaller subsets
where only a single subset has to be analyzed for each input element. The diﬀer-
ences to our approach are the mechanism to select rule subsets and the extent
of parallelism that is introduced. In Snort-2.0, rules are partitioned only based
Using Decision Trees to Improve Signature-Based Intrusion Detection
177
on at most two statically chosen constraints (source and destination port for TCP
and UDP, type for ICMP packets). Within each group, a parallel search is only per-
formed for content strings, while all other feature constraints are still evaluated
sequentially. Our decision trees, on the other hand, dynamically pick the most
discriminating features for a rule set and allow to perform parallel evaluation of
every feature. This yields superior performance (as shown in Section 6), despite
the fact that the detection engine of Snort-2.0 is heavily tailored to the Snort
rule set (which has many similar rules that only specify diﬀerent content strings
– and the content string is the only feature that can be evaluated in parallel).
Another system that uses decision trees and data mining techniques to ex-
tract features from audit data to perform signature-based intrusion detection is
presented in [7]. In contrast to our approach, however, they derive the decision
tree and the signatures from the audit data while we assume an existing set of
signature rules as the basis for our decision model.
3 Rule Clustering
The idea of rule clustering allows a signature-based intrusion detection system
to minimize the number of comparisons that are necessary to determine rules
that are triggered by a certain input data element.
We assume that a signature rule speciﬁes required values for a set of features
(or properties) of the input data. Each of these features has a type (e.g., integer,
string) and a value domain. There are a ﬁxed number of features f1..fn and
each rule may deﬁne values drawn from the respective value domain for an
arbitrary subset of these properties. Whenever an input data element is analyzed,
the actual values for all n features can be extracted and compared to the ones
speciﬁed by the rules. Whenever a data item fulﬁlls all constraints set by a rule,
the corresponding signature is considered to match it.
A rule deﬁnes a constraint for a feature when it requires the feature of the
data item to meet a certain speciﬁcation. Notice that it is neither required for
a rule to specify values for all features, nor that the speciﬁcation is an equality
relationship. It is possible, for example, that a signature requires a feature of
type integer to be less than a constant or inside a certain interval.
The basic technique utilized to compare a data item with a set of rules is to
consecutively check every deﬁned feature of a rule against the input element and
then move to the next one, eventually determining every matching signature.
As described above, a popular ad-hoc optimization is implemented by con-
sidering certain features more important or discriminating than others and by
checking on a combination of those ﬁrst before considering the rest. This tech-
nique, which is, for example, used by the original Snort and the OpenBSD packet
ﬁlter, bases on domain speciﬁc knowledge and still requires a number of com-
parisons that is about linear to the rule set size. Unfortunately, novel attacks
are discovered nearly on a daily basis and the number of needed signatures is
increasing steadily. This problem is exacerbated by the fact that network and
processor speeds are also improving, thereby raising the pressure on intrusion
178
C. Kruegel and T. Toth