**作者：Lucifaer  
原文链接：**
在说到JNDI的时候，我们最常接触到的都是较为上层的JNDI
SPI（服务端提供的接口），除了常用的RMI、LDAP这些服务，还存在CORBA服务，这篇文章的重点就是来学习一下JNDI如何使用CORBA服务，并以尽量详尽的用例子来解释清楚如何使用CORBA的各个流程。
# 0x01 基础概念
这部分可能会较为枯燥，但是对后续理解有很大的帮助，我尽量用简单的话来描述清楚几个名词。
## 1.1 IDL与Java IDL
IDL全称（Interface Definition
Language）也就是接口定义语言，它主要用于描述软件组件的应用程序编程接口的一种规范语言。它完成了与各种编程语言无关的方式描述接口，从而实现了不同语言之间的通信，这样就保证了跨语言跨环境的远程对象调用。
在基于IDL构建的软件系统中就存在一个OMG IDL（对象管理组标准化接口定义语言），其用于CORBA中。
就如上文所说，IDL是与编程语言无关的一种规范化描述性语言，不同的编程语言为了将其转化成IDL，都制定了一套自用的编译器用于将可读取的OMG
IDL文件转换或映射成相应的接口或类型。Java IDL就是Java实现的这套编译器。
## 1.2 ORB与GIOP、IIOP
ORB全称（Object Request
Broker）对象请求代理。ORB是一个中间件，他在对象间建立一个CS关系，或者更简单点来说，就是一个代理。客户端可以很简单的通过这个媒介使用服务器对象的方法而不需要关注服务器对象是在同一台机器上还是通过远程网络调用的。ORB截获调用后负责找到一个对象以满足该请求。
GIOP全称（General Inter-ORB
Protocol）通用对象请求协议，其功能简单来说就是CORBA用来进行数据传输的协议。GIOP针对不同的通信层有不同的具体实现，而针对于TCP/IP层，其实现名为IIOP（Internet
Inter-ORB Protocol）。所以说通过TCP协议传输的GIOP数据可以称为IIOP。
而ORB与GIOP的关系是GIOP起初就是为了满足ORB间的通信的协议。所以也可以说ORB是CORBA通信的媒介。
# 0x02 CORBA
CORBA全称（Common ObjectRequest Broker
Architecture）也就是公共对象请求代理体系结构，是OMG（对象管理组织）制定的一种标准的面向对象应用程序体系规范。其提出是为了解决不同应用程序间的通信，曾是分布式计算的主流技术。
一般来说CORBA将其结构分为三部分，为了准确的表述，我将用其原本的英文名来进行表述：
  * `naming service`
  * `client side`
  * `servant side`
这三部分组成了CORBA结构的基础三元素，而通信过程也是在这三方间完成的。我们知道CORBA是一个基于网络的架构，所以以上三者可以被部署在不同的位置。`servant
side`可以理解为一个接收`client side`请求的服务端；`naming service`对于`servant
side`来说用于服务方注册其提供的服务，对于`client side`来说客户端将从`naming
service`来获取服务方的信息。这个关系可以简单的理解成目录与章节具体内容的关系：
目录即为`naming service`，`servant
side`可以理解为具体的内容，内容需要首先在目录里面进行注册，这样当用户想要访问具体内容时只需要首先在目录中查找到具体内容所注册的引用（通常为页数），这样就可以利用这个引用快速的找到章节具体的内容。（相信对RMI有所理解的对这种关系不会陌生）
后面我将用一个具体的CORBA通信的demo来具体描述这这三者在通信间的关系。
## 2.1 建立一个CORBA Demo
在阐述CORBA通信前，首先先建立一个用于调试的demo，方便更加清楚的理解上面的概念，以及理清相关关系，之后会深入分析各部分的具体实现。
### 2.1.1 编写IDL
CORBA使用IDL供用户描述其应用程序的接口，所以在编写具体实例前，我们需要使用IDL来描述应用的接口，然后通过Java自身提供的`idlj`编译器将其编译为Java类。
这里的IDL代码描述了一个module名为`HelloApp`中存在一个`Hello`接口，接口中有一个`sayHello()`方法。
### 2.1.2 生成client side
这里直接使用`idlj`来生成`client side`的java类：
    idlj -fclient Hello.idl
该命令会自动生成如下的文件：
其关系如下图所示：
其中：
  1. `HelloOperations`接口中定义了`Hello.idl`文件中所声明的`sayHello()` 方法。 
  2. `Hello`继承于`HelloOperations`。 
  3. `_HelloStub`实现了`Hello`接口，`client side`将使用该类以调用`servant side`的`Hello`接口的具体实现。 
  4. `HelloHelper`包含帮助函数，用于处理通过网络传输的对象，例如数据编组与反编组的工作（或者说是编码与反编码的工作）。 
IDL有三种参数传递方式：in、out和inout。in类型的参数以及返回结果与Java的参数传递方式与结果返回方式完全相同。而out和inout两种类型的参数允许参数具有返回结果的能力，无法直接映射到Java语言的参数传递机制，所以IDL为out和inout参数提供了一个holder，也就是具体实例中的
`HelloHolder`。
其中关键的两个类便是 `_HelloStub`与`HelloHelper` 。这里简单的叙述一下，后面会详细的分析这两个类中的具体逻辑。
首先看先`_HelloStub`或者直接称其为`Stub`:
这里先不看`readObject`及`writeObject`的部分，主要看一下其中实现的`sayHello()`方法。可以看到这里实现了`Hello`接口，而此处的`sayHello()`方法并非其具体的实现，具体的实现是保存在`serant
side`处的，这里的`sayHello()`方法更像一个远程调用真正`sayHello()`方法的“委托人”或者“代理”。
可以注意到关键的两个点是`_request()`及`_invoke()`，而`_request()`完成的流程就是从`naming
service`获取`servant side`的“引用”（简单来说就是`servant side`所注册的信息，便于`client
side`访问`servant side`以获取具体实现类），`_invoke()`完成的就是通过“引用”访问`servant side`以获取具体实现类。
之后我们看一下`HelloHelper`。在`HelloHelper`中有一个常用且重要的方法，那就是`narrow`：
代码很简单，其接受一个`org.omg.CORBA.Object`对象，返回其`Stub`这里可能现在比较难理解，简单看一下`narrow`的使用场景：
关键点时`ncRef.resolve_str()`，这里的`ncRef`是`ORB`（`naming
service`）返回的一个命名上下文，主要看`resolve_str()`的实现：
可以说基本上与`_HelloStub`的`sayHello()`方法一模一样。所以可以说这里是返回一个`Stub`来获取远程的具体实现类。
### 2.1.3 生成servant side
同样也直接可以用`idlj`来生成：
    idlj -fserver Hello.idl
注意到除了`HelloPOA`外，其余的两个接口是和`client side`是相同的。
在这里又要涉及到一个新的概念，那就是POA（Portable Object
Adapter）便携式对象适配器（翻译会有所误差），它是CORBA规范的一部分。这里的这个POA虚类是`servant
side`的框架类，它提供了方法帮助我们将具体实现对象注册到`naming service`上。
具体看一下其代码，截图中的代码是其主要的功能：
着重看红框所标注的代码，首先`POA`是`Operations`的实现，也是`org.orm.CORBA.portable.InvokeHandler`的实现，同时继承于`org.omg.PortableServer.Servant`，这保证了`POA`可以拦截`client
side`的请求。
`POA`首先定义了一个Hashtable用于存放`Operations`的方法名，当拦截到请求后会触发`_invoke`方法从Hashtable中以方法名作为索引获取`Operations`具体实现的相应方法，之后创建返回包，并通过网络将其写入`client
side`。
综上，我们可以总结一下`idlj`帮助我们所生成的所有类之间的关系:
从图中我们能看到这些类之间的关系，以及看到`client side`与`servant
side`间所共用的类。不过单单只是这些类是无法完成构成完整的通信的，还需要一些方法来实现一些具体的客户端和服务方法类。
### 2.1.4 servant side具体实现
根据前面几个小结的叙述不难知道`servant side`需要有两个具体的实现类：
  * `HelloOperations`的具体实现，需要具体的实现`sayHello()`方法。
  * `servant side`的服务端实现，将具体实现的`HelloOperations`注册到`naming service`上
先来看第一个需要实现的类，通过上文我们知道我们具体实现`Operations`的类需要被注册到`naming
service`上，而`POA`作为一个适配器的工作就是帮助我们完成相应的工作以及完成相应请求的响应，所以这里只需要创建一个具体实现类`HelloImpl`继承于`POA`即可：
现在`servant side`的服务类关系及变成了：
现在我们实现了`_HelloStub`要获取的具体实现类`HelloImpl`，同时又有`HelloPOA`来处理网络请求（实际上是由ORB完成处理的），接下来就只需要实现一个服务来接收`client
side`的请求，并将结果返回给`client side`。
这里可以将服务端分为三部分。
第一部分就是激活`POAManager`。CORBA规范定义`POA`对象是需要利用`ORB`从`naming
service`中获取的，同时其在`naming
service`中的命名是`RootPOA`。所以如上图中第一个红框所示，就是初始化`ORB`，并利用`ORB`去访问`naming
service`获取`RootPOA`之后完成激活。
第二部分就是将具体实现类注册到`naming
service`中，具体实现如第二个红框所示。首先会实例化`HelloImpl`，然后通过`ORB`将其转换为`org.omg.CORBA.Object`，最后封装成一个`Stub`。之后从`naming
service`获取`NameService`并将其转换为命名上下文，将`HelloImpl`的别名Hello及其`Stub`绑定到命名上下文中，至此完成了具体注册流程。
第三部分就是将server设置为监听状态持续运行，用于拦截并处理`client side`的请求，返回相应的具体实现类。
### 2.1.5 client side具体实现
通过`servant side`的实现应该可以看出`naming service`只是负责保存具体实例的一个“引用”，如果`client
side`想要真正的获取到具体实现类，就需要首先访问`naming
service`获取这个“引用”，然后访问服务端，之后通过POA的交互返回具体的实例。梳理清楚这一部分后`client side`的实现就呼之而出了:
首先和服务端一样，需要初始化`ORB`，通过`ORB`来获取`NameService`并将其转换成命名上下文。之后通过别名在命名上下文中获取其对应的`Stub`，调用`Stub`中的`sayhello()`方法，这个时候才会完成`client
side`向`servant side`发送请求，`POA`处理请求，并将具体实现的`HelloImpl`包装返回给`client side`。