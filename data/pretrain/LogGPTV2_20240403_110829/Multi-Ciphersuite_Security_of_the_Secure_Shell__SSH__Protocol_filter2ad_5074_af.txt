dent from the key exchange messages. Thus any adversary A that can guess (i∗, s∗, b(cid:48)) correctly
can directly be used to construct an adversary BA
5 that breaks the BSAE scheme. Technically
we exploit the fact that all keys for the encryption scheme are independent from the handshake
and embed a BSAE challenger. Now we simply have to forward A’s output to the challenger
and thus we have
4 ) + Advprf
1, ..., k∗
PRF(BA
4 ) .
(13)
Pr(break(1)
4 ) ≤ Advbsae
StE (BA
5 ) .
(14)
Combining the probability bounds from Lemma 1 and Lemma 2 yields Theorem 1.
Remark 1. Forward secrecy. The ACCE deﬁnition of Jager et al. [20] can be extended to include
forward secrecy, meaning that the adversary in the channel security deﬁnition is allowed to
corrupt the long-term key of the owner of the target session or its peer after the target session
has accepted. We have omitted forward secrecy from this paper for simplicity, but Deﬁnition 6
can be easily extended to cover the case of forward secrecy, and the proof of Lemma 2 can be
readily adapted using the techniques in [20].
5.3 Mutual authentication mode
In a similar manner, it can be shown that the (single ciphersuite) signed-Diﬃe–Hellman SSH
protocol has secure mutual authentication when the client uses public key authentication if the
building blocks of SSH are secure, and thus is a secure ACCE protocol with mutual authentication.
Theorem 2 (SSH is mutual-auth.-ACCE-secure). Let µ be the length of the nonces in KEXINIT
and KEXREPLY, nP the number of participating parties and nS the maximum number of sessions
per party. The algorithms B1, . . . , B5, explicitly given in the proof of the theorem, are such that,
for all algorithms A,
Advacce-auth
SSH
and
(A) ≤ (nP nS)2
2µ
+ Advcr
H(BA
1 ) + nP Advsuf-cma
SIG
(BA
2 )
(A) ≤ Advacce-auth
SSH
Advacce-aenc
and BA
1 , . . . , BA
3 ) + Advprf
5 have approximately the same running time as A.
Advddh
SSH
(A) + nP nS
g,q (BA
PRF(BA
4 ) + Advbsae
StE (BA
5 )
(cid:17)
(15)
(16)
(cid:16)
19
Lemma 3 (SSH has secure mutual authentication). There exist algorithms B1 and B2, explicitly
given in the proof of the lemma, such that, for all algorithms A,
Advacce-auth
SSH
(A) ≤ (nP nS)2
2µ
+ Advcr
H(BA
1 ) + nP Advsuf-cma
where nP , nS, and µ are as in the statement of Theorem 2, and BA
the same running time as A.
SIG
(BA
2 ),
1 and BA
2 have approximately
Proof. Again, for both client and server sessions, acceptance is the result of a successful signature
veriﬁcation. Thus with exactly the same sequence of games as in Lemma 1, we get the same
bound.
Lemma 4 (SSH has channel security in mutual auth. mode). The algorithms B3, B4, and B5,
explicitly given in the proof of the lemma, are such that, for all algorithms A,
Advacce-aenc
SSH
(A) ≤ Advacce-auth
SSH
(cid:16)
(nP nS)2
2µ
(A) +
g,q (BA
PRF(BA
where nP , nS, and µ are as in the statement of Theorem 2, and BA
the same running time as A.
3 ) + Advprf
Advddh
+ nP nS
4 ) + Advbsae
3 , BA
4 , BA
StE (BA
5 )
5 have approximately
(cid:17)
.
Proof. Again, the proof is very similar to the proof of Lemma 2, with the same sequence of
games and the same bound.
6 Composition theorem for multi-ciphersuite security
As noted in the Introduction, if two ciphersuites with the same long-term key generation
algorithm have been proven individually secure (i.e., if SP1.KeyGen = SP2.KeyGen, NP(cid:107)SP1
is ACCE-secure, and NP(cid:107)SP2 is ACCE-secure), it does not necessarily follow that they are
collectively secure when parties use the same long-term secret key in both ciphersuites.
We still hope however to be able to prove some security properties of individual ciphersuites
separately and then compose them together using some generic theorem, rather than having to
directly prove security of the whole multi-ciphersuite combination all at once. Some intuition
for our composition framework follows.
Suppose a user supports two ACCE-secure ciphersuites (the “apple” ciphersuite and the
“orange” ciphersuite) with authentication in both cases provided by use of the same digital
signature scheme, and that in each ciphersuite, the signed data clearly and unambiguously
identiﬁes the ciphersuite (for example, starting with the word “apple” or the word “orange”,
respectively). As well, suppose that during authentication in each ciphersuite, the receiver
veriﬁes that the signed data is for the ciphersuite in question (it really does start with the word
“apple” or the word “orange”, respectively).
Intuitively, then, obtaining signatures from one ciphersuite should not help in breaking the
second ciphersuite, even if they are both signed using the same long-term keys. These signed
objects cannot be re-used across ciphersuites: a receiver running the orange ciphersuite will
reject any signatures that don’t start with the word “orange”, which includes anything starting
with the word “apple”.
We are now able to consider the security of the two ciphersuites together. Since “apple”
signatures will not aﬀect the security of the “orange” ciphersuite, and “orange” signatures will
not aﬀect the security of the “apple” ciphersuite, the two ciphersuites remain secure even if they
share long-term keys. A theorem for the security of the two ciphersuites together should say:
if both the “apple” and “orange” ciphersuites are being used and users are possibly sharing
20
long-term keys between them, and the adversary breaks some session in the “apple” ciphersuite,
then the “apple” ciphersuite was not secure even in isolation; and similarly for “orange”.
To prove security, our simulator will be given a challenger for the “apple” ciphersuite and
must simulate the others. The simulation can simulate ciphersuites that use keys not shared
with “apple” because it can choose those keys itself. Only ciphersuites that share keys with
“apple” are tricky; in this case, the simulator asks the “apple” challenger to sign an “orange”
message, which should not aﬀect the security of the “apple” ciphersuite but allows the simulator
to simulate the “orange” ciphersuite. We have to introduce a few small technical conditions to
ensure that the simulation goes through, but this is the main idea.
6.1 Single ciphersuite security with auxiliary oracle
We begin by “opening up” the ACCE security deﬁnition a little bit, to consider security of a
single ciphersuite in isolation, but with additional access to secret key operations. As shown
in Deﬁnition 10, we extend the ACCE security experiment to allow the adversary access to an
auxiliary oracle that runs a speciﬁed private key operation Aux(sk,·) (in the case of signed-DH
SSH, a signing oracle that signs arbitrary messages). If the adversary breaks the original ACCE
security goals without asking a query x to Aux that violates the constraint or predicate Φ, then
the adversary wins. For example, if we are studying the “orange” ciphersuite, then the predicate
Φ(x) would test if x starts with the word “orange”. As long as the adversary’s signing queries
did not start with the word “orange”, they should not help him win the security experiment.
Deﬁne Advacce-auth-aux
Deﬁnition 10 (ACCE-secure w/auxiliary oracle). Let P be an ACCE protocol. Let Aux :
(sk, x) (cid:55)→ y be an algorithm. Augment the ACCE experiment giving the adversary access to an
additional oracle Aux(i, x) which outputs Aux(ski, x). Let Φ(x) be a predicate on a value x.
(A) as the probability that, when A terminates in the above augmented
ACCE experiment for P with auxiliary oracle, there exists a session that has accepted maliciously,
with the additional constraint that, for all x such that A queried Aux(πs
(A) as |p − 1/2|, where p is the probability that A answers
the encryption challenge correctly in the above augmented ACCE experiment for P with auxiliary
oracle, again with the additional constraint that, for all x such that A queried Aux(πs
i .pid, x),
Φ(x) = 0.
Similarly, deﬁne Advacce-aenc-aux
i .pid, x), Φ(x) = 0.
P,Aux,Φ
P,Aux,Φ
We deﬁne analogous notions for server-only authentication.
6.2 Multi-ciphersuite composition
Once we have that each ciphersuite is individually secure, we want to use a composition theorem
to show that their multi-ciphersuite combination is secure, even if long-term keys are shared across
ciphersuites. For ciphersuites that do not re-use long-term keys, security of the combination is
trivial. For ciphersuites that do re-use long-term keys, reducing the security of the combination
to the security of the individual ciphersuites requires that we be able to simulate the other
ciphersuites. We can do so using the above auxiliary signing oracle, as long as we do not
violate the predicate. For example, we need to be able to simulate the “apple” ciphersuite
using the “orange” signing oracle, without asking queries that start with the word “orange”.
This simulatability condition is modelled in Deﬁnitions 11 and 12. Our composition theorem
(Theorem 3) is then shown using such a simulation argument.
Deﬁnition 11 (Simulatable). We say a sub-protocol SP is simulatable using auxiliary algorithm
Aux and helper algorithms {HI(cid:96), HR(cid:96)} if, for all (cid:96), HIAux(sk,·)
(pk, π, m) = SP.AlgI(cid:96)(sk, pk, π, m)
and HRAux(sk,·)
(pk, π, m) = SP.AlgR(cid:96)(sk, pk, π, m).
(cid:96)
(cid:96)
Deﬁnition 12 (Freshly simulatable). We say that auxiliary algorithm Aux and helper algorithms
{HI(cid:96), HR(cid:96)} provide a fresh simulation of SP under condition Φ if Deﬁnition 11 is satisﬁed and,
21
for all A ∈ {HI(cid:96), HR(cid:96)}, there exist no inputs to A that cause A to make a call Aux(·, x) such
that Φ(x) = 1.
Theorem 3 (Multi-ciphersuite composition). Let NP(cid:107) (cid:126)SP be a multi-ciphersuite ACCE protocol.
Let (cid:126)Aux be a vector of auxiliary algorithms and let (cid:126)Φ be a vector of conditions. Suppose that:
(cid:96) } such that Auxc and
1. for all c, d ∈ [nSP], d (cid:54)= c, there exist helper algorithms {HId,c
, HRd,c
(cid:96)
these helper algorithms provide a fresh simulation of SPd under Φc; and
2. after observing the messages output by the negotiation protocol, one can eﬃciently recon-
struct the complete per-session variables updated by those algorithms.
Then the algorithm B explicitly given in the proof of the theorem is such that, for all algorithms
A and for all c,
Advmcs-acce-auth
(17)
even under key re-use across ciphersuites. Moreover, BA has at most approximately the same
running time as A.
NP(cid:107) (cid:126)SP,c
(A) ≤ nSPAdvacce-auth-aux
NP(cid:107)SPc,Auxc,Φc
(BA)
Similarly,
Advmcs-acce-aenc
NP(cid:107) (cid:126)SP,c
(A) ≤ nSPAdvacce-aenc-aux
NP(cid:107)SPc,Auxc,Φc
(BA)
(18)
for all c, even under key re-use across ciphersuites.
Moreover, analogous versions of the theorem apply for server-only authentication.
Proof. We will specify an algorithm B that uses A. Whenever A breaks authentication or channel
security for ciphersuite c∗ in the multi-ciphersuite ACCE experiment for multi-ciphersuite ACCE
protocol NP(cid:107) (cid:126)SP, the algorithm BA will, with probability 1/| (cid:126)SP|, break authentication or channel
security in the ACCE with auxiliary oracle experiment for the ACCE protocol NP(cid:107)SPc∗.
Let A be an adversary in the multi-ciphersuite ACCE experiment. Recall that A starts the
experiment by setting key re-use variables δi,{c,d}, which is 1 if party Pi is to re-use long-term keys
between SPc and SPd, namely if SPc.KeyGen = SPd.KeyGen and party Pi is to set ski,c = ski,d;
δi,{c,d} = 0 otherwise.
Algorithm B simulates an multi-ciphersuite ACCE experiment for NP(cid:107) (cid:126)SP as follows. First, B
chooses ˆc $← {1, . . . , nSP}. B interacts with a challenger for the ACCE experiment for NP(cid:107)SPˆc
with auxiliary oracle Auxˆc.
B obtains the parties’ public keys for sub-protocol c from the NP(cid:107)SPˆc experiment. For
each party Pi and each sub-protocol d, if δi,{c,d} = 1 then B sets party Pi’s public key for
sub-protocol d equal to its public key in sub-protocol c, otherwise it generates a fresh key pair
using SPd.KeyGen. B gives all of these public keys to A.
B now runs A. A can make any Send, Corrupt, Reveal, Encrypt, or Decrypt queries speciﬁed
in the multi-ciphersuite ACCE experiment. B needs to answer all of these. The basic idea of B’s
simulation is as follows.
B will start oﬀ every session by relaying it down to the challenger for the ACCE-security of
NP(cid:107)SPˆc with auxiliary oracle. If a session ends up negotiating sub-protocol c, then B continues
relaying all queries for that session to the NP(cid:107)SPˆc challenger.
If a session ends up negotiating a sub-protocol d other than ˆc, B needs to simulate it. It can
do so as follows. By pre-condition 2 of the theorem, it can reconstruct the per-session variables
used by the negotiation protocol in the challenger, so it can construct its own per-session variables
from the output of the negotiation protocol. If the query is directed towards a party Pi such
that Pi is using the same key for sub-protocols ˆc and d (i.e., if δi,{c,d} = 1), then B simulates the
session for party Pi using the helper algorithms {HId,ˆc
(cid:96) } for SPd using the auxiliary oracle
Aux of the challenger; by pre-condition 1 of the theorem, this provides a correct simulation of
NP(cid:107)SPd. If δi,{ˆc,d} = 0, then B can simulate the session for party Pi itself since it generated Pi’s