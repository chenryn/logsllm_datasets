strong and expressive conﬁdentiality and integrity poli-
cies. Many of the applications’ security requirements
were expressible as security labels, and are thus enforced
by the Jif 3.0 compiler.
As language-based information-ﬂow control becomes
more mature, and information-ﬂow tools become more
useful and robust, we expect the task of writing and un-
derstanding programs with information-ﬂow control to
become easier. This work makes an important step to-
14
16th USENIX Security Symposium
USENIX Association
wards wider use of information-ﬂow control by provid-
ing a framework in which useful applications can be de-
signed, implemented, and deployed. The Jif 3.0 compiler
and run-time system and the SIF framework are all pub-
licly available.
Acknowledgments
We thank Nate Nystrom, Lantian Zheng, Xin Qi, and Jed Liu for use-
ful suggestions. The research was supported in part by NSF awards
0430161 and 0627649 and by an Alfred P. Sloan Research Fellow-
ship, and in part by TRUST (The Team for Research in Ubiquitous
Secure Technology) and AF-TRUST (Air Force Team for Research
in Ubiquitous Secure Technology for GIG/NCES), which receive sup-
port from the NSF (award 0424422) and from AFOSR (FA9550-06-
1-0244), Cisco, British Telecom, ESCHER, HP, IBM, iCAST, Intel,
Microsoft, ORNL, Pirelli, Qualcomm, Sun, Symantec, Telecom Italia
and United Technologies.
References
[1] Johan Agat. Transforming out timing leaks. In Proc. 27th ACM
Symp. on Principles of Programming Languages (POPL), Jan-
uary 2000.
[2] Aslan Askarov and Andrei Sabelfeld. Security-typed languages
for implementation of cryptographic protocols: A case study. In
Proc. 10th European Symposium on Research in Computer Secu-
rity (ESORICS), September 2005.
[3] Godmar Back, Wilson C. Hsieh, and Jay Lepreau. Processes in
KaffeOS: Isolation, resource management, and sharing in Java.
In Proc. 4th Symposium on Operating Systems Design and Im-
plementation. USENIX, October 2000.
[4] John Barnes. High Integrity Software: The SPARK Approach to
Safety and Security. Addison Wesley, April 2003.
[5] Stephen Chong and Andrew C. Myers. Decentralized robustness.
In Proc. 19th IEEE Computer Security Foundations Workshop,
July 2006.
[6] Lap chung Lam and Tzi cker Chiueh. A general dynamic in-
formation ﬂow tracking framework for security applications. In
Proc. 22st Annual Computer Security Applications Conference
(ACSAC 2006), December 2006.
[7] Danny Coward and Yutaka Yoshida. Java servlet speciﬁcation,
version 2.4, November 2003. JSR-000154.
[8] Dorothy E. Denning and Peter J. Denning. Certiﬁcation of pro-
grams for secure information ﬂow. Comm. of the ACM, 20(7),
July 1977.
[9] Petros Efstathopoulos, Maxwell Krohn, Steve VanDeBogart,
Cliff Frey, David Ziegler, Eddie Kohler, David Mazi`eres, Frans
Kaashoek, and Robert Morris. Labels and event processes in the
Asbestos operating system. In Proc. 20th ACM Symp. on Oper-
ating System Principles (SOSP), October 2005.
[10] T. Garﬁnkel, B. Bfaff, J. Chow, M. Rosenblum, and D. Boneh.
Terra: A virtual machine based platform for trusted computing. In
Proc. 19th ACM Symp. on Operating System Principles (SOSP),
2003.
[11] W. Halfond and A. Orso. AMNESIA: Analysis and monitor-
ing for neutralizing SQL-injection attacks. In Proc. International
Conference on Automated Software Engineering (ASE’05), pages
174–183, November 2005.
[12] Chris Hawblitzel, Chi-Chao Chang, Grzegorz Czajkowski, Deyu
Hu, and Thorsten von Eicken. Implementing multiple protection
domains in Java. In Proc. 1998 USENIX Annual Technical Con-
ference, June 1998.
[13] Boniface Hicks, Kiyan Ahmadizadeh, and Patrick McDaniel. Un-
derstanding practical application development in security-typed
languages. In 22nd Annual Computer Security Applications Con-
ference (ACSAC), Miami, Fl, December 2006.
[14] Yao-Wen Huang, Fang Yu, Christian Hang, Chung-Hung Tsai,
Der-Tsai Lee, and Sy-Yen Kuo. Securing web application code
by static analysis and runtime protection. In Proc. 13th Interna-
tional Conference on World Wide Web. ACM Press, 2004.
[15] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis
tool for detecting web application vulnerabilities. In Proc. IEEE
Symposium on Security and Privacy, May 2006.
[16] Butler Lampson, Mart´ın Abadi, Michael Burrows, and Edward
Wobber. Authentication in distributed systems: Theory and prac-
tice. In Proc. 13th ACM Symp. on Operating System Principles
(SOSP), October 1991. Operating System Review, 253(5).
[17] Gary T. Leavens, K. Rustan M. Leino, Erik Poll, Clyde Ruby,
and Bart Jacobs. JML: notations and tools supporting detailed
design in Java. In OOPSLA 2000 Companion, pages 105–106,
Minneapolis, Minnesota, 2000.
[18] Peng Li and Steve Zdancewic. Practical information-ﬂow control
in web-based information systems. In Proc. 18th IEEE Computer
Security Foundations Workshop, 2005.
[19] V. Livshits and M. Lam. Finding security vulnerabilities in Java
applications with static analysis. In Proc. 14th USENIX Security
Symposium (USENIX’05), pages 271–286, August 2005.
[20] Peter Loscocco and Stephen Smalley. Integrating ﬂexible support
In Proc.
for security policies into the Linux operating system.
FREENIX Track: 2001 USENIX Annual Technical Conference,
2001.
[21] Andrew C. Myers.
JFlow: Practical mostly-static information
In Proc. 26th ACM Symp. on Principles of Pro-
ﬂow control.
gramming Languages (POPL), January 1999.
[22] Andrew C. Myers and Barbara Liskov. Protecting privacy using
the decentralized label model. ACM Transactions on Software
Engineering and Methodology, 9(4), October 2000.
[23] Andrew C. Myers, Andrei Sabelfeld, and Steve Zdancewic. En-
In Proc. 17th IEEE Computer
forcing robust declassiﬁcation.
Security Foundations Workshop, June 2004.
[24] Andrew C. Myers, Lantian Zheng, Steve Zdancewic, Stephen
Chong, and Nathaniel Nystrom. Jif: Java information ﬂow. Soft-
ware release, at http://www.cs.cornell.edu/jif, July 2001–.
[25] A. Nguyen-Tuong, S. Guarneri, D. Greene, and D. Evans. Au-
tomatically hardening web applications using precise tainting. In
Proc. 20th International Information Security Conference, pages
372–382, May 2005.
[26] Franc¸ois Pottier and Sylvain Conchon.
Information ﬂow infer-
ence for free. In Proc. 5nd ACM SIGPLAN International Confer-
ence on Functional Programming (ICFP), 2000.
[27] Franc¸ois Pottier and Vincent Simonet. Information ﬂow inference
for ML. In Proc. 29th ACM Symp. on Principles of Programming
Languages (POPL), 2002.
[28] Andrei Sabelfeld and Andrew C. Myers.
Language-based
IEEE Journal on Selected Areas in
information-ﬂow security.
Communications, 21(1), January 2003.
[29] Andrei Sabelfeld and David Sands. Dimensions and principles of
declassiﬁcation. In Proc. 18th IEEE Computer Security Founda-
tions Workshop, June 2005.
[30] Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert
van Doorn, and Pradeep Khosla. Pioneer: Verifying integrity and
guaranteeing execution of code on legacy platforms.
In Proc.
20th ACM Symp. on Operating System Principles (SOSP), pages
1–15, October 2005.
[31] Geoffrey Smith. A new type system for secure information ﬂow.
In Proc. 14th IEEE Computer Security Foundations Workshop.
IEEE Computer Society Press, June 2001.
[32] Nikhil Swamy, Michael Hicks, Stephen Tse,
and Steve
Zdancewic. Managing policy updates in security-typed lan-
guages.
In Proc. 19th IEEE Computer Security Foundations
Workshop, pages 202–216, July 2006.
[33] Symantec internet security threat report, volume IX. Symantec
Corporation, March 2006.
[34] Trusted Computing Group. TCG TPM Speciﬁcation Version 1.2
USENIX Association
16th USENIX Security Symposium
15
Revision 94, March 2006.
[35] Stephen Tse and Steve Zdancewic. Designing a security-typed
In Proc. 14th
language with certiﬁcate-based declassiﬁcation.
European Symposium on Programming, 2005.
[36] Dennis Volpano and Geoffrey Smith. A type-based approach to
program security. In Proc. 7th International Joint Conference on
the Theory and Practice of Software Development, 1997.
[37] Yichen Xie and Alex Aiken. Static detection of security vulner-
abilities in scripting languages. In Proc. 15th USENIX Security
Conference, July 2006.
[38] Wei Xu, Sandeep Bhatkar, and R. Sekar. Taint-enhanced policy
enforcement: A practical approach to defeat a wide range of at-
tacks. In 15th USENIX Security Symposium, August 2006.
[39] Wei Xu, V.N. Venkatakrishnan, R. Sekar, and I.V. Ramakrishnan.
A framework for building privacy-conscious composite web ser-
vices.
In 4th IEEE International Conference on Web Services
(ICWS’06), September 2006.
[40] Steve Zdancewic and Andrew C. Myers. Robust declassiﬁcation.
In Proc. 14th IEEE Computer Security Foundations Workshop,
pages 15–23, June 2001.
[41] Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, and
David Mazi`eres. Making information ﬂow explicit in histar. In
Proc. 21st ACM Symp. on Operating System Principles (SOSP),
November 2006.
[42] Lantian Zheng and Andrew C. Myers. Dynamic security labels
and noninterference. In Proc. 2nd Workshop on Formal Aspects
in Security and Trust, IFIP TC1 WG1.7. Springer, August 2004.
A Downgrading in case studies
These tables describe the case studies’ functional downgrades.
CDIS application
Description
Error composing message. If an error is made
when composing a message (e.g., leaving Sub-
ject ﬁeld empty), the user is sent back to message
composition. Downgrading this information ﬂow
reveals very little about the message data.
Message approval. When a reviewer approves
a message, he downgrades his conﬁdentiality re-
striction. Once all reviewers have approved the
message, the recipient may view it.
Database access. Access to the database is
done with the authority of the principal CDISApp.
There are 11 functional downgrades for database
accesses, releasing info from CDISApp to the user.
Delegation to CDISRoot. All users delegate au-
thority to a root user for the CDIS application,
CDISRoot, to perform operations that affect all
users. This delegation requires user endorsement.
User library
Description
Unsuccessful login. When user enters a password
on the login page, he learns if the password was
correct. If incorrect, the user is returned to the lo-
gin page with an error message. This information
release about the password is acceptable.
Successful login. When the user logs in suc-
cessfully, he learns that the password was correct.
This information ﬂow is secure.
Delegation to session principal. When the user
logs in, he delegates authority to the session prin-
cipal, using a closure. The decision to authorize
the delegation closure must be declassiﬁed.
Category
Application
Application
Access
control
Application
Category
Application
Application
Application
Delegation to session principal. Delegating au-
thority from a newly logged in user to the session
principal requires the trust of the user, and thus an
endorsement.
Retrieving users from the database. When se-
lecting one or more users, info must be retrieved
from the database, and returned to the caller of the
Select User(s) page. This transfer requires a total
of 3 functional downgrades during user selection.
Error selecting user(s). A user making an error
on the Select User(s) page (e.g., no user id en-
tered) is returned to the Select User(s) page. As
this page is a reusable component, its label is set
conservatively. A declassiﬁcation is needed for
the error message, from the conservative label to
the actual label used for a given page invocation.
Calendar application
Description
Update session state with date to display. The
display date must be trusted by the session prin-
cipal. The date input by the user is trusted by the
user, but must be endorsed by the session princi-
pal before it’s stored in session state.
Update session state with which user’s calen-
dar to display. Similarly, the user selects a user’s
calendar to display. This downgrade ensures that
the session principal authority is required to up-
date session state.
Fresh id for new event. A new event requires
a fresh unique id. The unique id may act as a
covert channel, revealing info about the order in
which events are created. Since ids are generated
randomly, downgrading the fresh id is secure.
Update and retrieve info from database. When
info needs to be updated in the database (e.g.,
edit an event) or retrieved (e.g., fetch user details,
or events) information must be transferred be-
tween the current user and the application princi-
pal CalApp. There are 10 such functional down-
grades, for different database accesses.
Go to View/Edit Event page. An event’s name
is displayed as a hyperlink to the View Event
or Edit Event page (depending on user’s permis-
sions). Since the link contains the event’s name,
the info gained by invoking View/Edit Event ac-
tion is at least as restrictive as the event detail’s
label. This reveals little about which event is be-
ing viewed/edited.
Error editing event. The user who makes an er-
ror editing an event (e.g., end time before start) is
sent back to the Edit Event page. Like the “Go
to View/Edit Event” downgrade, this reveals little
about the data input.
Changing attendees or viewers of an event.
When the user edits an event and changes the at-
tendees or viewers of an event, the labels to en-
force on the event time and details change. This
requires a downgrade.
Delegation to CalRoot. All users delegate their
authority to a root user for the calendar applica-
tion, CalRoot, whose authority is needed to per-
form operations that affect all users. This requires
an endorsement from each user.
Application
Access
control
Imprecision
Category
Access
control
Access
control
Application
Access
control
Application
Application
Application
Application
16
16th USENIX Security Symposium
USENIX Association