# NoSEBrEaK: Defeating Honeynets

## Authors
Maximillian Dornseif, Thorsten Holz, Christian N. Klein  
**Laboratory for Dependable Distributed Systems • RWTH Aachen University**

## Introduction
### Who and Why
This document provides an in-depth analysis of the Sebek monitoring tool, which is used to enhance the capabilities of honeypots and honeynets. The research was conducted at the Laboratory for Dependable Distributed Systems at RWTH Aachen University.

### Key Concepts
- **Honeynet**: A network set up with intentional vulnerabilities to attract and study attackers.
- **Honeywall**: A gateway that controls and monitors traffic to and from a honeynet.
- **Honeypot**: A single system designed to appear vulnerable and attract attackers.
- **Honeynet**: A network of multiple honeypots.

## Sebek: Monitoring Honeypots
Sebek is a powerful tool that provides comprehensive monitoring of all activities on a honeypot. This includes:

- **Keystroke Logging**: Recording every keystroke made by an attacker.
- **File Monitoring**: Capturing any files copied to the honeypot.
- **Network Activity**: Monitoring messages sent via IRC or mail clients.
- **Internal Monitoring**: Providing a "glass-box" view of the honeypot's internal operations, as opposed to the traditional "black-box" approach.

### Detection and Disabling
While Sebek is effective, it can be detected and disabled by sophisticated attackers. However, once Sebek is disabled, it sends a record of the disabling action and the associated code to a collection server, ensuring that the attack details are captured.

## Workings of Sebek
Sebek operates by:

1. **Hijacking `sys_read()`**: Intercepting data read from the system.
2. **Sending Data Over the Network**: Transmitting intercepted data to a remote server.
3. **Overwriting Network Stack**: Modifying parts of the network stack (e.g., `packet_recvmsg`) to hide Sebek's data transmission.
4. **Identifying Hidden Packages**: Using protocol, port, and magic values to identify and hide specific data packets.

### Hiding Sebek
To remain undetected, Sebek employs several techniques:

- **Random Module Name**: Loading as a kernel module with a random numeric name.
- **Module Removal**: Loading a second module that removes Sebek from the list of modules and then unloads itself.

## Detecting Sebek
Several methods can be used to detect a Sebek-infected host:

- **The Honeywall**: Monitoring traffic through the honeywall.
- **Latency**: Observing increased latency, such as during a `dd` attack (`dd if=/dev/zero of=/dev/null bs=1`).
- **Network Traffic Counters**: Comparing `tx_bytes` and `tx_packets` from `dev->get_stats` with `/proc/net/dev` or `ifconfig` output.
- **Syscall Table Modification**: Checking for changes in the syscall table.
- **Hidden Module**: Searching for hidden kernel modules.
- **Memory Analysis**: Looking for unusual data in memory.

### Syscall Table
The syscall table is a critical part of the kernel that contains pointers to system call functions. Sebek modifies this table to intercept and log system calls. For example, before and after Sebek is loaded, the `sys_read` and `sys_write` pointers may change:

- **Before**:
  - `sys_read = 0xc0132ecc`
  - `sys_write = 0xc0132fc8`
- **After**:
  - `sys_read = 0xc884e748`
  - `sys_write = 0xc0132fc8`

### Finding Modules
To find Sebek, one can search for its module header, which is allocated by the kernel's `vmalloc` function. Memory allocated by `vmalloc` is aligned to page boundaries (4096 bytes on IA32) and starts at `VMALLOC_START` and ends `VMALLOC_RESERVE` bytes later.

### Retrieving Sebek’s Variables
Sebek uses a block of memory to store various variables, such as IP addresses, ports, and MAC addresses. These variables are randomly generated and stored in a structure. The following Perl script demonstrates how to generate these variables:

```perl
$bs = 128 + int(rand(128));
for ($x = 0; $x < 38; $x++) {
    $tmp = int(rand() * $bs);
    if (!defined($values{$tmp})) {
        $values{$tmp} = $x;
        push(@fun, $tmp);
    } else {
        $x--;
    }
}
($dip, $dport, $sip, $sport, $kso, $magic, $smac0 ... $dmac5, $m_if, 
$m_dip, $m_dmac, $m_dport, $m_sport, $m_kso, $m_magic, $m_block) = @fun;
$m_block = int(rand(1000000000)); $mod_name = int(rand(1000000000));
printf("//----- autogenerated fudge.h file\n\n\n");
print "#define BS               $bs\n";
print "#define DIP_OFFSET       $dip\n";
print "#define DPORT_OFFSET     $dport\n";
print "#define SIP_OFFSET       $sip\n";
print "#define SPORT_OFFSET     $sport\n";
print "#define KSO_OFFSET       $kso\n";
print "#define MAGIC_OFFSET     $magic\n";
print "#define SMAC_0_OFFSET    $smac0\n";
...
print "#define DMAC_5_OFFSET    $dmac5\n";
```

### Example Memory Block
Here is an example of the memory block used by Sebek, with some values filled in:

```
00000000
00000000
00007a69
00000000
00000000
00000000
00000000
000000d9
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
000000dc
00000000
0000000d
00000000
f001c0de
00000000
00000000
00000000
00000000
00000000
00000000
000000e5
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
0000003a
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
d5495b1d
00000000
```

This structured and detailed approach ensures that Sebek remains a robust and effective tool for monitoring and studying attacks on honeypots and honeynets.