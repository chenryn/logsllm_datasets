of Illinois MTA as the enterprise MTA.
5.2. Test Bed
Studying the components in our system in Figure 1, we
anticipated that the two major resource consuming compo-
nents of our system would be the database and the PDP.
Based on this assumption, we decided to place them on dif-
ferent machines on the network. Our prototype runs on win-
dows client and server machines. The database was running
on a Windows 2003 Server with dual Intel Xeon 3.2GHz
processors and 1 GB of memory. PDP, Web server and
ABM Server were running on a 2.8 GHz Pentium 4 with
1GB of memory with Windows XP Pro operating system.
5.3. Experimental Setup and Results
The goals of our experiments were to evaluate the per-
formance of our ABM system both with and without access
control. These goals enabled us to demonstrate the feasibil-
ity of the system as well as determine the additional costs
imposed by the access control component. To evaluate the
performance with access control we needed to study the per-
formance on the three paths described in Figure 1, namely,
policy specialization, messaging, and address resolution. To
evaluate the performance without access control we needed
to study the performance on messaging path and address
resolution path but without the authorization check. How-
ever, since we are using the University of Illinois MTA, the
performance on the messaging path is not part of the evalu-
ation of our system, because the University of Illinois MTA
will add the same latency to our messages as it would add
to any regular e-mail.
To carry out the evaluation we needed to vary three ex-
perimental components: (1) the complexity and number of
access policies, (2) the number of users and their assign-
ment to a varying number of attributes in the database, and
(3) and the complexity of ABM addresses.
Policy Generation. The complexity and number of the
access policies affects the time frame of the policy special-
ization path and the authorization check on the address res-
olution path. We wrote a probabilistic XACML policy gen-
erator using Java, which created uniformly random policies
of varying complexity by varying the number of terms and
literals in the conditional clause of each policy (please re-
fer to Section 3 for deﬁnitions). Speciﬁcally, the number of
terms and number of literals in each term were uniformly
drawn between one and ﬁve, creating relatively simple to
reasonably complex policies. The number of policies de-
pend on the number of (cid:1)attribute,value(cid:2) pairs and we varied
the number of attributes between 25 and 125 with an aver-
age of 5 values (or value ranges) per attribute for resulting
policies ranging from 143 to 674.
Database Population. The distribution of attributes in
the user population affects the number of recipients a given
ABM address resolves to, which, in turn, affects the time
frame of the address resolution path. Users were assigned
an attribute based on the incidence probability of that at-
tribute. For example, if an attribute has an incidence proba-
bility of 0.1 then 10% of the user population is assigned that
attribute. For our test database, most of the attributes (80%),
had a probability of incidence that ranged from 0.0001 to
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20060.01, 10% had a probability of incidence that was between
0.5 and 0.9 and the remaining 10% had the probability close
to 1. This distribution allowed a big range in the number
of recipients per message, and, intuitively, this distribution
also reﬂects organizations where all the users have some
common attributes and rest of the attributes are sparsely dis-
tributed in the population. The schema below illustrates the
way user’s attributes data was stored in the relational data-
base.
Relational Database Schema (assuming X variables in
the system):
[userid] Primary Key, nvarchar (20)
[passwd] nvarchar (40)
[attr0] int
[attr1] nvarchar(128)
...
[attrX] int
Relational Database
DB Size Avg.
List
(No. of
Users)
Size
Address Resolution Time
Mean 95% Conf. Interval (ms)
With
Without
Access Control Access Control
60K
45K
30K
15K
351
296
168
77
(180, 359)
(153, 395)
(137, 277)
(90, 126)
XML Database
(97, 237)
(82, 263)
(64, 136)
(32, 46)
DB Size Avg.
List
(No. of
Users)
Size
60K
45K
30K
15K
798
469
291
174
Address Resolution Time
Mean 95% Conf. Interval (ms)
With
Without
Access Control Access Control
(5726, 7306)
(6144, 7964)
(3589, 4455)
(3970, 4750)
(2593, 3157)
(2783, 3260)
(2307, 2849)
(2038, 2628)
For storing data in the native XML format we created
a relational table, which consists of three columns. The
third column contains the attribute information stored in
XML format. The following schema illustrates this better.
Table 1. Address Resolution Time. Number
of attributes = 100; number of policies = 568.
[userid] Primary Key, nvarchar (20)
[passwd] nvarchar (40)
[attributes] XML(AttributeSchema)
Schema
AtributeSchema
(www.w3.org/XML/Schema) with the XML values in
that column.
associates
an
XML
ABM Address Generation. The complexity of an ABM
address affects the performance on the address resolution
path by affecting both the number of recipients it resolves
to and the database query resolution time. Similar to our
approach for policy generation we varied the number of
terms for a given address query between one and ﬁve (cho-
sen randomly) and the number of literals in each term be-
tween one and three (also chosen randomly). Each literal
was randomly assigned an attribute from the routable list
of attributes of the message sender. The same set of ABM
addresses were used to evaluate the system both with and
without access control.
Performance Measurements on the Address Resolution
Path. The performance on this path is translated to the la-
tency between the time an ABM message is received by the
ABM Server until the time the message is sent out to the
MTA for distribution.
For the case with access control this latency includes the
time for: (1) checking the integrity of the ABM address via
HMAC veriﬁcation (2) consulting the PDP for authoriza-
tion (in our experiments we do an authorization check on
all messages irrespective of the freshness of the composed
ABM address) (3) retrieving the list of the recipients spec-
iﬁed by the ABM address from the database, and (4) re-
composing the message with the list of recipients. For the
case without access control only the third and fourth latency
components were included.
We performed our tests using databases of user size rang-
ing from 15,000 to 60,000. Each of the experiments was
performed on a sample of 100 users chosen uniformly at
random from the corresponding databases. Table 1 summa-
rizes our results. The Average List Size ﬁeld in the table
refers to the average number of recipients that the ABM
addresses resolved to. The ABM addresses used had 2.5
terms on average and each term had 2.5 literals on average.
There were 100 attributes in the system and 568 policies.
There were 2.5 terms on average per policy and 2.5 liter-
als on average per term. It is worth mentioning that since
the databases were probabilistically ﬁlled, users were ran-
domly selected, and the queries were also probabilistically
generated, we had no direct control on the average list sizes.
Performance Measurements on the Policy Specialization
Path. The performance in this path is translated to the la-
tency a user would see from the time she attempts to log
in to the system until the time her specialized policy is re-
vealed to her. This time includes: (1) a database lookup for
retrieving a user’s attributes and (2) a policy decision time
for determining the routable attributes.
We studied the policy specialization time with regard to
complexity of the policies and the results capturing the la-
tencies are summarized in Figure 2. Each policy had 2.5
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006database lookup. Access validation, via the PDP, by itself
takes around 60ms and gives us a throughput of 1000 vali-
dations per minute.
As expected, Figure 2 shows that the policy specializa-
tion time increases with the number of policies in the sys-
tem. The number of policies in the system is directly pro-
portional to the number of attributes in the system. In partic-
ular, it is equal to number of attributes × average number of
values/sub-ranges per attribute. The number of values/sub-
ranges per attribute was randomly drawn between 1 and 10.
So we can conclude that the policy specialization time is di-
rectly proportional to the number of attributes in the system.
Our experiments showed that for policy specialization, data-
base access time remains virtually constant regardless of the
number of attributes in the system. This value is about 40ms
for relational and 400ms for XML databases. This is due
to the fact that each policy specialization includes a single
lookup on the primary key of the database. So the observed
increase in the policy specialization is due to the increase in
the policy evaluation time, not the database lookup time.
Arguably, the latencies of 12 seconds might be beyond
the level of patience of most of the users and also impact
the scalability of the system. However, we have to keep in
mind that specialized policy need not be computed every
time a user wants to send a message. The ABM system
could periodically, say once a week or once a month, com-
pute the the specialized policy for all users and cache it.
Re-computation between the periods will only be necessary
if there is a change in the policy or users’ attributes. There-
fore, we conclude that even with security included the per-
formance of the ABM system remains reasonable.
6. Discussion
In this section we discuss some of the issues that are im-
portant for usability of ABM.
Policy Administration. Specifying and managing polices
can potentially be a signiﬁcant burden in the deployment
of our ABAC based ABM system. Even having only one
access policy, for each (cid:1)attribute, value(cid:2) pair can lead to a
large set of access policies to be managed by an enterprise
policy administrator. In practice, however, most attributes
do not need a separate access policy for every possible
value. For example, some attributes like address may
not need a policy for every single value as it may not be
possible to even enumerate all values. For some attributes it
might be possible to encode policies for all possible values
of the attribute into a generic form. For example, a policy
to send a message to students in a given course might be
that the sender must be teaching the course. So there is no
need to write a separate policy for each (cid:1)course, value(cid:2) pair
as policies for all values of attribute course follow the same
pattern and hence can be written as one policy. The logical
Figure 2. Policy Specialization Time
terms on average and each term 2.5 literals on average.
Each of the experiments was averaged over 100 runs. The
database used for these experiments was a relational data-
base with 60,000 users, which was ﬁlled using the distribu-
tion described above. In each of the runs the policy special-
ization is performed with respect to a user chosen uniformly
at random from the database.
5.4. Analysis of Results
Feasibility Without Access Control. As shown in Table 1,
the average latency added to an e-mail message by the ABM
system (address resolution latency) without access control
is under 250ms using a relational database. It is under six
seconds using an XML database. The implemented sys-
tem thus can process 240 requests per minute using a rela-
tional database and 10 requests per minute using an XML
database. Though the address resolution takes longer when
using an XML database, we can expect that to decrease in
the future as XML technology matures.
Feasibility With Access Control. As shown in Table 1,
the average latency added to an e-mail message by the ABM
system (address resolution latency) with access control is
under 350ms when using a relational database and under
seven seconds when using an XML database. Adding secu-
rity to the system added at most 100ms additional latency
when using a relational database and 400ms latency when
using an XML database. Thus, on average the ABM sys-
tem with security can process 190 requests per minute using
a relational database and 8.5 requests per minute using an
XML database. The discrepancy in latency added by secu-
rity when using a relational database vs. an XML databases
is due to the fact that the authorization check involves one
database look up and one access validation and on average
an XML database look up took 350ms more than relational
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006form of such a policy is shown below.
(cid:2)request.teaching = variable x(cid:3)