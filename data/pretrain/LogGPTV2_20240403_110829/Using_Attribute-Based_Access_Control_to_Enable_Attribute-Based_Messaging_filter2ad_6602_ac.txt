### 5.2. Test Bed

To evaluate the components of our system, as depicted in Figure 1, we anticipated that the database and the Policy Decision Point (PDP) would be the primary resource-consuming elements. Based on this assumption, we decided to distribute these components across different machines on the network. Our prototype was deployed on Windows client and server machines. The database ran on a Windows 2003 Server equipped with dual Intel Xeon 3.2GHz processors and 1 GB of memory. The PDP, along with the Web server and ABM Server, were hosted on a machine with a 2.8 GHz Pentium 4 processor and 1 GB of memory, running Windows XP Professional.

### 5.3. Experimental Setup and Results

The primary objectives of our experiments were to assess the performance of our Attribute-Based Messaging (ABM) system both with and without access control. This allowed us to demonstrate the feasibility of the system and quantify the additional overhead introduced by the access control component.

#### Performance Evaluation with Access Control

To evaluate the system's performance with access control, we focused on three key paths: policy specialization, messaging, and address resolution. The messaging path, however, was not included in our evaluation because the University of Illinois MTA adds a consistent latency to all messages, regardless of whether they are part of our system or regular emails.

#### Performance Evaluation without Access Control

For the performance evaluation without access control, we examined the messaging and address resolution paths, but excluded the authorization check. 

#### Varying Experimental Components

To conduct the evaluation, we varied three experimental components:
1. **Complexity and Number of Access Policies**: We developed a probabilistic XACML policy generator in Java to create policies with varying complexity. The number of terms and literals in each policy's conditional clause was uniformly distributed between one and five.
2. **Number of Users and Their Attributes**: We assigned attributes to users based on their incidence probabilities. Most attributes (80%) had an incidence probability ranging from 0.0001 to 0.01, 10% had a probability between 0.5 and 0.9, and the remaining 10% had a probability close to 1.
3. **Complexity of ABM Addresses**: The complexity of ABM addresses was varied by randomly choosing the number of terms (between one and five) and the number of literals per term (between one and three).

### Database Population

The distribution of attributes in the user population significantly affects the number of recipients for a given ABM address, impacting the address resolution time. The relational database schema used for storing user attributes is as follows:

- **[userid]**: Primary Key, nvarchar (20)
- **[passwd]**: nvarchar (40)
- **[attr0]**: int
- **[attr1]**: nvarchar(128)
- ...
- **[attrX]**: int

For XML storage, we created a table with three columns, where the third column contains attribute information in XML format.

### Address Resolution Time

The performance on the address resolution path was measured as the latency between the time an ABM message is received by the ABM Server and the time it is sent to the MTA for distribution. For the case with access control, this latency includes:
1. HMAC verification for address integrity.
2. Authorization check via the PDP.
3. Retrieval of recipient lists from the database.
4. Recomposition of the message with the recipient list.

For the case without access control, only the retrieval and recomposition steps were included.

### Performance Measurements

We conducted tests using databases with user sizes ranging from 15,000 to 60,000. Each experiment was performed on a sample of 100 users chosen randomly from the corresponding databases. Table 1 summarizes the results, showing the average number of recipients resolved and the address resolution times with and without access control.

### Policy Specialization Path

The performance on the policy specialization path was measured as the latency from the user's login attempt to the revelation of their specialized policy. This includes:
1. A database lookup to retrieve the user's attributes.
2. Policy decision time to determine routable attributes.

Figure 2 illustrates the policy specialization time with respect to the complexity of the policies. Each policy had 2.5 terms on average, and each term had 2.5 literals on average. The database lookup time remained constant at about 40ms for a relational database and 400ms for an XML database.

### Analysis of Results

#### Feasibility Without Access Control

Table 1 shows that the average latency added to an email message by the ABM system without access control is under 250ms using a relational database and under six seconds using an XML database. The system can process 240 requests per minute with a relational database and 10 requests per minute with an XML database.

#### Feasibility With Access Control

With access control, the average latency added to an email message is under 350ms using a relational database and under seven seconds using an XML database. Adding security increased the latency by up to 100ms for a relational database and 400ms for an XML database. The system can process 190 requests per minute with a relational database and 8.5 requests per minute with an XML database.

### 6. Discussion

#### Policy Administration

Specifying and managing policies can be a significant burden in deploying an ABAC-based ABM system. However, many attributes do not require a separate policy for every possible value. For example, a policy for sending a message to students in a given course might be that the sender must be teaching the course. Such policies can be generalized, reducing the number of policies needed. The logical form of such a policy is shown below:

```
request.teaching = variable x
```

This approach simplifies policy management and enhances the usability of the ABM system.