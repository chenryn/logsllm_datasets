vulnerabilities often remain undiscovered. In addition, as mobile
devices are quickly evolving in their software and hardware,
their firmware binaries have significant differences one another.
Consequently, inspecting the firmware of diverse device models
or versions, even within a single vendor, remains challenging,
requiring additional, serious manual efforts.
Fig. 2: EMM Attach Reject message structure
generation, such as GSM or LTE, but they also include several
different protocols over generations [3]. Table I lists the L3
protocols, their protocol discriminators (PDs), and specification
document numbers. Each specification document defines the
detailed message formats and directions in the corresponding
protocol. An L3 message can be transmitted to a cellular
device (i.e., downlink) or to the core network (i.e., uplink).
Furthermore, the L3 message may have different formats based
on the direction in which it is transmitted. Hereinafter, we use
the abbreviations listed in Table I to denote each L3 protocol.
Standard L3 message formats. Each standard L3 message
has a specific format defined in the corresponding specification
document (Table I) [3]. A standard L3 message starts with a
2-byte header that includes a PD and message identity. A tuple
of a PD and message identity allows a recipient baseband to
determine the format of a given message in order to decode
the message. Each successive field of a message is referred to
as a standard information element (IE).
A standard IE may have three parts: an IE identifier (IEI),
a length indicator (LI), and a value, which are also referred to
as a type (T), length (L), and value (V), respectively. An IE
can be either imperative or non-imperative, according to the
occurrence of an IEI. Imperative IEs do not have IEIs, whereas
non-imperative IEs must have IEIs. In a message, imperative
IEs must appear in a fixed order ahead of non-imperative IEs;
thus, they can be distinguished without an IEI. An LI denotes
the number of bytes for the value part, whereas the IE length
in the specification represents the number of bytes for all parts.
There are seven IE formats: T, V, TV, LV, TLV, LV-E, and TLV-E.
Here, T, L, and V represent the occurrence of an IEI, LI, and
value in an IE, respectively. The -E suffix extends the one-byte
LI to a two-byte LI, which indicates a length from 0 to 65535.
Figure 2 shows an example message called ATTACH REJECT
in the EMM procedure with raw packet data. Each row in
the message structure represents an IE. The header comprises
the 4-bit PD (0x7), 4-bit security header type (0x0), and 8-
bit message identity (0x44). Further, imperative IEs include
a non-header part IE, EMM cause. The packet then continues
with non-imperative IEs: ESM message container and T3346
value, of which IEIs are 0x78 and 0x5f, respectively. Because
the format of the ESM message container IE is TLV-E, its LI
can indicate a length from 0 to 65535. The length of the T3346
value IE is fixed to be 3 although it takes an LI.
C. Baseband Processor
In a cellular device, a BP is a dedicated processor responsi-
ble for managing all radio functions for cellular communication
3
07  44  02  78  00  20  02  01  ...  5F 01 01   ...IEIInformation ElementFormatLengthValue-Protocol discriminatorV1/27-Security headertypeV1/20-Attachreject message identityV144-EMM causeV10278ESM message containerTLV-E6-n02 01 …5FT3346valueTLV301…Raw Packet (in hex)Attach Reject Message StructureIEILIValueImperativeNon-ImperativeHeaderHeaderImperativeNon-ImperativeIEILIValueFig. 3: Overview of our approach: manual firmware analysis and automated BASESPEC.
C3. Difficulties in automated analysis. Automating the
baseband analysis is essential
to achieve scalability and
applicability. An automated analysis can be largely divided
into static and dynamic analyses; however, both methods
have several challenges. A static analysis suffers from that
baseband firmware is extremely large (i.e., tens of MBs), and
it contains numerous non-trivial features to analyze, such as
cryptographic operations. Moreover, building analysis rules is
challenging because cellular specifications are quite complex,
written in over 100 documents. Therefore, existing studies
highly rely on a dynamic analysis (e.g., fuzzing) with real or
emulated hardware [47], [46], [63], [64], [42]. Unfortunately,
many vulnerabilities in the baseband are difficult to trigger
dynamically owing to its convoluted states. These approaches
also rely on an explicit oracle such as a program crash to
identify bugs, thereby limiting them to a few bug types.
B. Our Approach
To tackle these challenges, we propose a novel approach
named BASESPEC, which performs a comparative analysis
of baseband firmware and cellular specifications. BASESPEC
leverages the natural characteristics of a message decoder
in network communication. Our key intuitions are that 1) a
message decoder in the network communication needs to embed
specifications in its implementation, particularly the message
structures, to be able to identify and parse the message fields;
2) As such embedded message structures exist in a machine-
friendly form, we can certainly extract them; 3) Comparative
analysis on the extracted structures may identify incorrectly
embedded ones with reference to the specification documents;
4) As the main logic of decoding routines rarely changes,
message structures can be extracted across diverse device
models/versions, similarly. Hereafter, we refer to the embedded
specifications and message structures in baseband firmware as
binary-embedded specifications/messages.
A workflow of our approach is illustrated in Figure 3. Our
approach is largely divided into two parts: manual firmware
analysis and fully automated BASESPEC. The firmware analysis
mainly explores where the message decoder are located (§IV-C)
and how specifications are embedded (§IV-D) in the baseband
firmware, which we refer to as binary-specific metadata. This
procedure is a manual, yet one-time task because the main logic
of decoding procedure rarely changes across diverse device
models or versions within the same vendor. Then, BASESPEC
utilizes these results for syntactic/semantic comparison. Specif-
ically, BASESPEC automates the extraction of the decoder
function address and embedded message structures from the
target baseband binary. Syntactic comparison literally validates
whether the binary-embedded specifications match those of
the documentations (§V-C). Meanwhile, semantic comparison
investigates whether the underlying logic of the decoder
function correctly follows the specification leveraging symbolic
execution (§V-D). Finally, it reports mismatches, which indicate
developers’ mistakes, which may break the compliance with
the specification, or imply potentially vulnerable points for later
analysis. Thus, we only need to analyze the messages affected
by the reported mismatches.
We address the challenges described in §III-A as follows.
First, we uncover the firmware’s obscurity by manually an-
alyzing the firmware, particularly the L3 message decoders
(C1). This analysis can be reused for other baseband firmware;
i.e., it is a one-time task. Second, BASESPEC automatically
identifies mismatches from numerous L3 messages and reveals
potentially buggy points for analysis (§VII-B); thus, it enables
an efficient and practical analysis (C2). Indeed, by analyzing
the mismatches reported by BASESPEC, we discovered 9 error
cases, of which 5 are functional errors and 4 are vulnerabilities
including 2 RCE 0-days (§VII-C). Finally, as the main decoding
logic rarely changes, BASESPEC is applicable to various device
models or versions with automation (C3) (§VII-D). It can be
also applied to other vendor’s firmware although it requires
one-time manual efforts to analyze its decoder (§VII-E).
C. Scope of This Work
Among the various protocols in the cellular network, we
choose standard L3 messages as our target. These messages
include various protocols and play an important role in the cel-
lular core procedures (§II-B). As the L3 protocol has numerous
complicated logic and data structures, several vulnerabilities
have been discovered in their implementations [25], [15], [42].
Therefore, we focus on analyzing the standard L3 messages as
listed in Table I. Not all messages in L3 protocols are marked
as the standard L3 messages; these other messages are beyond
the scope of this study (§IX). Please refer to §II-B for exact
definition of the standard L3 message.
For the cellular baseband, we mainly focus on one of
the top three mobile processor vendors [17] (i.e., Vendor1).
We analyze their baseband firmware on multiple latest device
models (Table IV) whose architecture is ARM.1 Our approach
can apply to other baseband firmware; however, it may require
considerable manual efforts to uncover the obscurity of their
firmware. We additionally analyzed the firmware of another
one of the top three vendors (i.e., Vendor2) and successfully
applied BASESPEC (§VII-E).
IV. MANUALLY UNCOVERING FIRMWARE OBSCURITY
This section details our approach to uncover the obscurity of
baseband firmware. We describe how we handle several issues in
the state-of-the-art static analysis tool named IDA Pro (§IV-B),
1We anonymized the names of devices and vendor upon the vendor’s request.
4
Spec	from	ETSI	Web(.pdf)SemanticComparisonFirmwarefrom	WebMsg	Structfrom	SemanticsExtractingBinary-specificMetadataL3	DecoderSemanticAnalyzerFully Automated BaseSpec SystemMsg	Structfrom	BinariesComplementarySpec	ParsingLatestFirmwareL3	DecoderIdentificationFunctionIdentificationSyntacticComparisonBinary-embeddedSpecMemory	LayoutAnalysisManual Firmware Analysis (One-time)Spec	from	3GPP	Web(.doc)ImplicationAnalysis(Manual)One-time	Manual	AnalysisMsg	Structfrom	DocumentsAutomationlocate the L3 decoding function (§IV-C), and determine the way
of message structures are embedded (§IV-D). Recall that the
obscurity and complexity of baseband firmware makes a manual
analysis essential (§III-A). However, the analysis procedure is
a one-time task, of which results can be reused for multiple
messages, models, or versions within the same vendor; this will
be shown in §VII-D. This section mainly shares our experience
in analyzing Vendor1’s firmware. However, similar approaches
can be applicable to other vendors’ firmware, although it may
require considerable efforts to determine their L3 message
decoding logic, and we will describe this in §VII-E.
A. Firmware Acquisition
We chose baseband firmware as our analysis target without
requiring physical devices because of its applicability and
accessibility. There are mainly two methods to obtain baseband
firmware: memory dumps and firmware images. Previous
studies [25], [15] relied on a memory dump because it contains
runtime memory states, a memory layout, and global variables,
which do not require complicated analyses for firmware
initialization. However, this method requires a real device to
dump memory; hence, it significantly degrades scalability and
applicability. Moreover, we found that the hidden menu to
trigger the memory dump or a hardware debug interface, such
as JTAG, has been disabled in the recent devices.
Therefore, we decided to use a third-party website [62] that
maintains firmware images for updates. One can also download
the latest firmware images from the vendor’s cloud storage.
However, the third party storage provides a well-structured list
of firmware images per product model and version. Among
them, we selected the images of the latest flagship models as
listed in Table II. For an initial firmware analysis, we need to
analyze only a single image to break down its obscurity. Then,
we can apply the knowledge to other images within the same
vendor. Therefore, we selected to analyze the latest version of
the latest model (i.e., Model A in Table II).
B. Preprocessing
We analyze the baseband firmware with IDA Pro [31], which
is a state-of-the-art binary analysis tool. Although IDA Pro is a
promising tool, it requires additional preprocessing steps for 1)
memory layout analysis and 2) function identification. Because
of several run-time mechanisms in the baseband firmware, IDA
Pro correctly identifies only hundreds among 90K functions in
it. Such a limitation is already known to be challenging [9].
Without any preprocessing, IDA’s automatic analysis can detect
only 450 functions starting from interrupt handlers, which
are common entry points of embedded devices (see Table II).
Therefore, we design the two preprocessing steps as follows.
Memory layout analysis. For analysis, the baseband firmware
should be loaded in a proper memory layout. Otherwise, data or
function pointers in the firmware would point to invalid memory
addresses, which significantly hinders further analysis. Indeed,
when we opened the firmware using IDA, the data/function
pointers in most functions attempted to access data or call other
functions located in invalid memory addresses.
We discovered that this invalid pointer issue is caused by
scatter-loading, and IDA fails to support it. Scatter-loading is an
ARM’s loading mechanism that reallocates the initially loaded
file to multiple memory regions at runtime. This technique
is widely used in ARM-based embedded systems because
it supports compression of data regions, thereby reducing
the firmware size. When building firmware, a component
in the ARM compiler, named armlink, inserts functions for
scatter-loading for initializing the firmware at runtime. These
functions copy, decompress, or zero-initialize the memory
regions according to a predefined table to properly set up
the memory layout. Therefore, without handling the scatter-
loading, an entire binary file is loaded into a single continuous
memory region, which makes the data/function pointers invalid.
To handle the scatter-loading issue and create a proper mem-
ory layout, we emulate the scatter-loading process. Specifically,
we mimic the behavior of the scatter-loading functions: we copy,
decompress, and zero-initialize the memory regions. Because
those scatter-loading functions are predefined by armlink in
highly optimized forms, most recent ARM embedded devices
reuse these functions. Thus, we can detect these functions
with signatures similarly to IDA’s FLIRT [30]. After detecting
the scatter-loading functions, we analyze their cross-references
and identify the predefined scatter-loading table. This table
contains information that indicates the execution sequence and
parameters of the scatter-loading functions. We emulate the
scatter-loading process as stated in the table.
Function identification. Our target (i.e., Vendor1’s firmware)
is based on the ARM architecture. To identify functions
in the firmware, we need to disassemble its byte code in
advance. However, disassembling unknown bytes in ARM is
error-prone [36] because the ARM architecture supports two
instruction sets: ARM and Thumb. The ARM instruction set
is the default mode that executes 32-bit instructions, and the
Thumb instruction set supports compact 16-bit instructions
to reduce the code size. Because the same bytes can be
disassembled in two different instructions, direct disassembling
would lead to many incorrectly disassembled codes.
To tackle this challenge, we designed two simple tech-
niques that leverage i) frequent function prologues and ii) the
characteristics of function pointers in the Thumb mode. First,
we build function prologue signatures that can distinguish
between the ARM and Thumb modes by investigating the
identified functions. These prologue signatures comprise PUSH
instructions in both ARM and Thumb mode. We then search
those signatures; if a match is found, we attempt to analyze
it in the mode of the matched signature. To reduce false
positives in signature-based matching, we verify whether the
function prologue handles registers normally. For instance, most
functions push the LR register in stack but do not push the PC
register; hence, we discard prologues that push the PC register
or those that do not push the LR register.
After detecting the function prologues, we further identify
functions by analyzing function pointers in the data section.
For this, we leverage the characteristics of the Thumb mode.
Function pointers to the Thumb mode functions use odd
numbered addresses; particularly, the least significant bit of the
pointer value is always 1. As most data are aligned with an
even address, an odd numbered address that points to a code
section can be a Thumb mode function pointer. Therefore, we
can find functions that are called indirectly via such pointers.
Preprocessing results. These preprocessing techniques signif-
icantly improve the IDA’s performance in identifying functions.
5
TABLE II: Number of newly identified functions in baseband
firmware by our preprocessing; numerous functions were hidden under
the IDA Pro’s default analysis (i.e., before our preprocessing).
# of Funcs
Firmware
Firmware
Before Our
After Our
Elapsed
Model Build Date Size (MB) Preprocessing Preprocessing Time (s)
8,442
2,219
3,171
1,451
3,434
1,045
1,112
790
1,347
Model A May/2020
Model B May/2020
Model C May/2020
Model D Jun/2020
Model E
Jun/2020
Model F Apr/2020
Model G Apr/2020
Model H Apr/2020
Model I Apr/2020
91,481
90,519
90,328
73,199
83,725
39,003
31,888
35,216
58,974
44.09
44.06
43.82
41.38
41.40
41.78
41.21
37.46
37.09
450
3,505
444
409
409
410
410
380
379
The initial number of functions identified by IDA Pro was
450 for Model A, as shown in Table II. We applied the
memory layout analysis and function identification, which
consists of the prologue detection and pointer analysis, to
the same firmware. Our memory layout analysis found 504
new functions, and our function identification techniques, i.e.,
the function prologue detection and function pointer analysis,
found 31,955 and 2,526 new functions, respectively. If we
give these newly identified functions to IDA Pro, it further
analyzes the code references in each function and recursively