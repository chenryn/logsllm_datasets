### Conducting a Penetration Test: Scoping and Information Gathering

When initiating a penetration test, the potential scope can be vast. Clients may be running various programs with security vulnerabilities, such as misconfigurations in their infrastructure, weak or default passwords, and more. However, the scope of a penetration test is often limited to a specific IP range. Developing an exploit for a new vulnerability is pointless if the client does not use the vulnerable software. Therefore, it is essential to identify active systems and the software they are running.

#### Manual Port Scanning

In the previous chapter, we discussed how exploiting the MS08-067 vulnerability can be a straightforward win for both attackers and penetration testers. To exploit this vulnerability, we need to find a Windows 2000, XP, or 2003 machine with an SMB server that lacks the MS08-067 patch. We can map the network range and query systems for open ports to determine the attack surface.

We can perform manual port scanning using tools like `telnet` or `Netcat`. For example, let's use `Netcat` to connect to the Windows XP machine on port 25, which is the default port for the Simple Mail Transfer Protocol (SMTP).

```bash
root@kali:~# nc -vv 192.168.20.10 25
nc: 192.168.20.10 (192.168.20.10) 25 [smtp]u open
nc: using stream socket
nc: using buffer size 8192
nc: read 66 bytes from remote
220 bookxp SMTP Server SLmail 5.5.0.4433 Ready
ESMTP spoken here
nc: wrote 66 bytes to local
```

The Windows XP box is running an SMTP server on port 25, identified as SLMail version 5.5.0.4433. While administrators can modify banners to mislead attackers, the version information is usually accurate. Searching the web for information about SLMail version 5.5.0.4433 can provide valuable insights.

Manually connecting to every possible TCP and UDP port on a single machine can be time-consuming. Fortunately, tools like Nmap can automate this process.

**Note:** All actions described so far are legal. However, actively querying systems can enter a legally ambiguous area. Unauthorized attempts to break into computers are illegal in many countries. Stealthy scan traffic may go unnoticed, but you should only practice these skills on systems you own or have explicit permission to test.

#### Port Scanning with Nmap

Nmap is a widely used tool for port scanning. It has extensive documentation, and entire books have been written about its usage. Firewalls with intrusion detection and prevention systems have become adept at detecting and blocking scan traffic, so Nmap scans may sometimes yield no results. This could indicate that you are being blocked by a firewall.

##### SYN Scan

A SYN scan is a TCP scan that does not complete the three-way handshake. The syntax for a SYN scan is the `-sS` flag. Here’s an example:

```bash
root@kali:~# nmap -sS 192.168.20.10-12 -oA booknmap
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 07:28 EST
...
```

This scan provides a list of open ports without fully establishing a connection. The results show several open ports on the target machines, including FTP, SMTP, HTTP, and others.

**Note:** It is crucial to take detailed notes during a penetration test. Tools like Dradis can help track pentest data, but any method that ensures you have a record of your actions is acceptable. Outputting Nmap results to files and using the `script` command to log terminal output are good practices.

##### Version Scan

A SYN scan is stealthy but does not provide much information about the software running on the ports. A version scan (`nmap -sV`) completes the connection and attempts to determine the software and version. Here’s an example:

```bash
root@kali:~# nmap -sV 192.168.20.10-12 -oA bookversionnmap
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 08:29 EST
...
```

This scan provides detailed information about the services and versions, such as FileZilla ftpd 0.9.32 beta, Apache httpd 2.2.12, and MySQL. This information is valuable for identifying potential vulnerabilities.

**Note:** Nmap may report incorrect versions if the software has been updated but the banner remains unchanged. Nevertheless, the version scan provides a solid starting point for further research.

##### UDP Scans

Nmap's SYN and version scans do not query UDP ports. UDP scans (`-sU`) send protocol-specific packets to each port and interpret responses. If a response is received, the port is considered open. If the port is closed, Nmap receives an ICMP Port Unreachable message. If no response is received, the port may be open and unresponsive or filtered by a firewall.

Here’s an example of a UDP scan:

```bash
root@kali:~# nmap -sU 192.168.20.10-12 -oA bookudp
Starting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 08:39 EST
...
```

The results show open and filtered UDP ports on the target machines. For instance, the TFTP port (UDP 69) on the Windows XP system may be open or filtered. On the Linux target, the Network File System port (UDP 2049) is confirmed to be listening.

In conclusion, effective information gathering through port scanning and service identification is a critical step in a penetration test. Tools like Nmap and manual techniques with Netcat can provide the necessary insights to proceed with the test.