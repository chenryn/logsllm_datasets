:::
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-before-config-CA.html#s1-clust-svc-ov-CA}2.6. 配置 HA 服务注意事项 {.title}
:::
[]{#ch-before-config-CA.html#idm140713304939360
.indexterm}[]{#ch-before-config-CA.html#idm140713304937920 .indexterm}
::: para
您可以通过配置
HA（高可用性）服务创建集群以满足您对高可用性的要求。红帽高可用性附加组件中的
HA 服务管理关键组件 `rgmanager`{.command}
可为现成的应用程序部署冷故障切换。在红帽高可用性附加组件中，使用其他集群资源配置的应用程序可组成一个
HA
服务，该服务可在集群节点间进行故障切换而不中断集群客户端。如果一个集群节点失败，或者集群系统管理员在集群节点间移动该服务时（例如：计划的集群节点断电），则会发生
HA 服务故障切换。
:::
::: para
要创建 HA 服务，您必须在集群配置文件中配置它。HA
服务由集群*资源*组成。集群资源是在集群配置文件中创建和管理的构建块 ---
例如：IP 地址、应用程序初始化脚本或者红帽 GFS2 共享分区。
:::
::: para
HA
服务每次只能在一个集群节点中运行以保持数据完整性。您可以在故障切换域中指定故障切换优先权。指定故障切换优先权包括在故障切换域中为每个节点分配优先权等级。如果您没有指定故障切换优先权，则
HA 服务可故障切换到其故障切换域中的任何节点。另外，您还可以指定是否将 HA
服务严格限制在与其故障切换域关联的节点中。（当与非限制故障切换域关联时，HA
服务可在故障切换域所有成员都不可用的事件中在任意节点中启动。）
:::
::: para
[图 2.1
"网页服务器集群服务示例"](#ch-before-config-CA.html#fig-ha-svc-example-webserver-CA){.xref}
演示名为 \"content-webserver\" 的网页服务器的 HA 服务示例。它在集群节点
B 中运行，且其故障切换域由节点 A、B 和 D
组成。另外，使用故障切换优先权将故障切换域配置为节点 D 的优先权高于节点
A，并限制为只切换到故障切换域中的节点。HA 服务由以下集群资源组成：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    IP 地址资源 --- IP 地址 10.10.10.201。
    :::
-   ::: para
    名为 \"httpd-content\" 的应用程序资源 ---
    网页服务器应用程序初始化脚本 `/etc/init.d/httpd`{.filename}（指定
    `httpd`{.command}）。
    :::
-   ::: para
    文件系统资源 --- 名为 \"gfs2-content-webserver\" 的 Red Hat GFS2。
    :::
:::
::: figure
[⁠]{#ch-before-config-CA.html#fig-ha-svc-example-webserver-CA}
::: figure-contents
::: mediaobject
![网页服务器集群服务示例](images/ha-svc-example-webserver.png)
:::
:::
**图 2.1. 网页服务器集群服务示例**
:::
::: para
客户端使用 IP 地址 10.10.10.201 访问 HA 服务，启用与网页服务器程序
httpd-content 间的互动。httpd-content 程序使用 gfs2-content-webserver
文件系统。如果节点 B 失败，则 content-webserver HA 服务会切换到节点
D。如果节点 D 不可用或者也失败了，则该服务会切换到节点
A。故障切换会尽量减小集群客户端的服务中断。例如：在 HTTP
服务中，可能会丢失某些状态信息（比如会话数据）。在另一个集群节点中可使用与故障切换前相同的
IP 地址访问 HA 服务。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
有关 HA
服务以及故障切换域的详情请参考*《高可用附加组件概述》*。有关配置故障切换域的详情请参考
[第 3 章 *使用 [**Conga**]{.application}
配置红帽高可用性附加组件*](#ch-config-conga-CA.html){.xref}（使用
[**Conga**]{.application}）或者 [第 7 章
*使用命令行工具配置红帽高可用附加组件*](#ch-config-cli-CA.html){.xref}（使用命令行工具）。
:::
:::
:::
::: para
HA 服务是一组在统一实体中配置的集群资源，可为客户端提供特定的服务。HA
服务在集群配置文件
`/etc/cluster/cluster.conf`{.filename}（在每个集群节点中）中以资源树的形式出现。在集群配置文件中，每个资源树都使用一个
XML
代表，可指定每个资源及其属性和在资源树中与其它资源的关系（上级、下级和平级关系）。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
因为 HA
服务由分为层次树的资源组成，所以服务有时也指的是*资源树*或者*资源组*。这两个词组与
[*HA 服务*]{.emphasis}是同义词。
:::
:::
:::
::: para
在每个资源树的顶端是一个特殊的资源类型 ---
*服务资源*。其他资源类型构成服务的其他部分，决定服务的特点。配置 HA
服务包括创建服务资源、生成下级集群资源以及将其组成统一实体形成该服务的分级限制。
:::
::: para
配置 HA 服务时两个主要考虑的问题：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    创建服务所需的资源类型
    :::
-   ::: para
    资源间的上级、下级和同级关系
    :::
:::
::: para
资源类型以及资源的结构由您所要配置服务的类型决定。
:::
[]{#ch-before-config-CA.html#idm140713242449504
.indexterm}[]{#ch-before-config-CA.html#idm140713242448544 .indexterm}
::: para
集群资源位于 [附录 B, *HA
资源参数*](#ap-ha-resource-params-CA.html){.xref}。有关资源间上级、下级和同级关系的描述，请参考
[附录 C, *HA 资源行为*](#ap-ha-resource-behavior-CA.html){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-before-config-CA.html#s1-config-validation-CA}2.7. 配置验证 {.title}
:::
[]{#ch-before-config-CA.html#idm140713241156032
.indexterm}[]{#ch-before-config-CA.html#idm140713243241168 .indexterm}
::: para
可在启动和重新载入配置时，根据集群方案
`/usr/share/cluster/cluster.rng`{.filename}
自动验证集群配置。您还可以使用 `ccs_config_validate`{.command}
命令在随时验证集群配置。有关使用 `ccs`{.command}
命令时的配置验证详情请参考 [第 5.1.6 节
"配置验证"](#ch-config-ccs-CA.html#s1-config-validation-ccs-CA){.xref}。
:::
::: para
您可在 `/usr/share/doc/cman-X.Y.ZZ/cluster_conf.html`{.filename}
中查看注释的可用方案（例如：`/usr/share/doc/cman-3.0.12/cluster_conf.html`{.filename}）。
:::
::: para
配置验证可检查以下基本错误：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    XML 验证 --- 查看该配置文件是否为有效 XML 文件。
    :::
-   ::: para
    配置选项 --- 查看选项（XML 元素和属性）是否有效。
    :::
-   ::: para
    选项值 --- 查看选项是否包含有效数据（受限制的）
    :::
:::
::: para
以下示例为演示有效性检查的有效配置和无效配置：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    有效配置 --- [例 2.3 "`cluster.conf`{.filename}
    示例配置：有效文件"](#ch-before-config-CA.html#ex-validate-valid-CA){.xref}
    :::
-   ::: para
    无效 XML --- [例 2.4 "`cluster.conf`{.filename} 示例配置：无效
    XML"](#ch-before-config-CA.html#ex-validate-xml-invalid-cli-CA){.xref}
    :::
-   ::: para
    无效选项 --- [例 2.5 "`cluster.conf`{.filename}
    示例配置：无效选项"](#ch-before-config-CA.html#ex-validate-option-invalid-cli-CA){.xref}
    :::
-   ::: para
    无效选项值 --- [例 2.6 "`cluster.conf`{.filename}
    示例配置：无效选项值"](#ch-before-config-CA.html#ex-validate-option-value-invalid-cli-CA){.xref}
    :::
:::
::: example
[⁠]{#ch-before-config-CA.html#ex-validate-valid-CA}
**例 2.3. `cluster.conf`{.filename} 示例配置：有效文件**
::: example-contents
``` screen
```
:::
:::
::: example
[⁠]{#ch-before-config-CA.html#ex-validate-xml-invalid-cli-CA}
**例 2.4. `cluster.conf`{.filename} 示例配置：无效 XML**
::: example-contents
``` screen
         `{.command} 而不是 ``{.command}。
:::
:::
:::
::: example
[⁠]{#ch-before-config-CA.html#ex-validate-option-invalid-cli-CA}
**例 2.5. `cluster.conf`{.filename} 示例配置：无效选项**
::: example-contents
``` screen
```
::: para
在这个示例中配置的第二行（在此注释为 \"INVALID\"）包含无效 XML 元素 ---
应该是 `logging`{.command} 而不是 `loging`{.command}。
:::
:::
:::
::: example
[⁠]{#ch-before-config-CA.html#ex-validate-option-value-invalid-cli-CA}
**例 2.6. `cluster.conf`{.filename} 示例配置：无效选项值**
::: example-contents
``` screen
```
::: para
在这个示例中，配置的第四行（在此注释为 \"INVALID\"）包含 XML
属性的无效值，即 `node-01.example.com`{.command} 的
`clusternode`{.command} 行中的
`nodeid`{.command}。该值应该是一个正数（\"1\"）而不是负数（\"-1\"）。`nodeid`{.command}
属性值必须是一个正数。