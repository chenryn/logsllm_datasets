**表 4.3. 扩展文件系统是可用的 GFS2 具体选项**
::: table-contents
  --------------------------------------------------------------------------------------------
  选项                      描述
  ------------------------- ------------------------------------------------------------------
  `-h`{.option}             帮助，显示简短用法信息。
  `-q`{.option}             静默，降低详细等级。
  `-r MegaBytes`{.option}   指定新资源组大小，默认值为 256MB。
  `-T`{.option}             测试。完成所有计算，但不要向磁盘中写入数据，也不要扩展文件系统。
  `-V`{.option}             显示命令版本信息。
  --------------------------------------------------------------------------------------------
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-addjournalfs}4.7. 在文件系统中添加日志 {.title}
:::
[]{#ch-manage.html#idm140546306180416
.indexterm}[]{#ch-manage.html#idm140546326287120
.indexterm}[]{#ch-manage.html#idm140546326285680 .indexterm}
::: para
`gfs2_jadd`{.command} 命令可用来在 GFS2
文件系统中添加日志。您可以在任意点动态在 GFS2
文件系统中添加日志，且不需要扩展基础逻辑卷。`gfs2_jadd`{.command}
必须在挂载的文件系统中运行，但只需要在集群的一个节点中运行。其他节点可感觉到扩展的发生。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
如果某个 GFS2 文件系统已满，则 `gfs2_jadd`{.command}
将会失败，即使将逻辑卷包含的文件系统扩展到超过该文件系统的大小也是如此。这是因为在
GFS2
文件系统中，日志是纯文本文件，而不是嵌入的元数据，因此只是增大基础逻辑卷大小不会为日志提供空间。
:::
:::
:::
::: para
在向 GFS 文件系统中添加日志前，您可以使用 `gfs2_tool`{.command} 命令的
`journals`{.option} 选项找出 GFS2
文件系统目前含有多少日志。以下示例显示挂载在 `/mnt/gfs2`{.literal}
的文件系统中的日志数目和大小。
:::
``` screen
[root@roth-01 ../cluster/gfs2]# gfs2_tool journals /mnt/gfs2
journal2 - 128MB
journal1 - 128MB
journal0 - 128MB
3 journal(s) found.
```
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-addjournal-use}用法 {.title}
:::
``` screen
gfs2_jadd -j Number MountPoint
```
::: variablelist
[*`Number`*]{.term}
:   ::: para
    指定要添加的新日志数目。
    :::
[*`MountPoint`*]{.term}
:   ::: para
    指定要挂载 GFS2 文件系统的目录。
    :::
:::
:::
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-addjournal-ex}示例 {.title}
:::
::: para
这个示例中，在 `/mygfs2`{.filename} 目录的文件系统中添加了一个日志。
:::
``` screen
gfs2_jadd -j1 /mygfs2
```
::: para
这个示例中，在 `/mygfs2`{.filename} 目录的文件系统中添加了两个日志。
:::
``` screen
gfs2_jadd -j2 /mygfs2
```
:::
::: simplesect
::: titlepage
## [⁠]{#ch-manage.html#ss-manage-addjournal-complete}完整用法 {.title}
:::
``` screen
gfs2_jadd [Options] {MountPoint | Device} [MountPoint | Device]
```
::: variablelist
[*`MountPoint`*]{.term}
:   ::: para
    指定要挂载 GFS2 文件系统的目录。
    :::
[*`Device`*]{.term}
:   ::: para
    指定文件系统的设备节点。
    :::
:::
::: para
[表 4.4 "添加日志时可用的 GFS2
具体选项"](#ch-manage.html#tb-table-gfs2-addjournal){.xref} 描述用来在
GFS2 文件系统中添加日志的 GFS2 具体选项。
:::
[]{#ch-manage.html#idm140546315926544
.indexterm}[]{#ch-manage.html#idm140546295560464 .indexterm}
::: table
[⁠]{#ch-manage.html#tb-table-gfs2-addjournal}
**表 4.4. 添加日志时可用的 GFS2 具体选项**
::: table-contents
  -----------------------------------------------------------------------------------------------------------
  标签            参数                 描述
  --------------- -------------------- ----------------------------------------------------------------------
  `-h`{.option}                        帮助，显示简短用法信息。
  `-J`{.option}   *`MegaBytes`*        以 MB 为单位指定新日志的大小。默认日志大小为 128MB，最小值为
                                       32MB。要在文件系统添加不同大小的日志，必须为每个不同大小的日志运行
                                       `gfs2_jadd`{.command}
                                       命令。指定的大小会不断下降，因此在生成文件系统时会指定多个日志区段。
  `-j`{.option}   *`Number`*           用 `gfs2_jadd`{.command} 命令指定要添加的新日志数目，默认值为 1。
  `-q`{.option}                        静默，降低详细等级。
  `-V`{.option}                        显示命令版本信息。
  -----------------------------------------------------------------------------------------------------------
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-data-journal}4.8. 数据日志 {.title}
:::
[]{#ch-manage.html#idm140546329985360
.indexterm}[]{#ch-manage.html#idm140546329983920 .indexterm}
::: para
Ordinarily, GFS2 writes only metadata to its journal. File contents are
subsequently written to disk by the kernel\'s periodic sync that flushes
file system buffers. An `fsync()`{.command} call on a file causes the
file\'s data to be written to disk immediately. The call returns when
the disk reports that all data is safely written.
:::
::: para
数据日志可缩短非常小的文件的 `fsync()`{.command}
时间，因为文件数据在写入元数据外还要写入日志。随着文件的增大这个优势会明显降低。写入中等到大文件时打开数据日志会非常慢。
:::
::: para
依赖 `fsync()`{.command}
同步文件数据的应用程序可能因使用数据日志而使性能有所提高。在被标记的目录及其所有子目录中生成的
GFS2 文件可自动启用数据日志。现有长度为 0
的文件也可以打开或者关闭其数据日志功能。
:::
::: para
Enabling data journaling on a directory sets the directory to \"inherit
jdata\", which indicates that all files and directories subsequently
created in that directory are journaled. You can enable and disable data
journaling on a file with the `chattr`{.command} command.
:::
::: para
下面的命令在 `/mnt/gfs2/gfs2_dir/newfile`{.filename}
文件中启用了数据日志，并查看是否正确设定了标签。
:::
``` screen
[root@roth-01 ~]# chattr +j /mnt/gfs2/gfs2_dir/newfile
[root@roth-01 ~]# lsattr /mnt/gfs2/gfs2_dir
---------j--- /mnt/gfs2/gfs2_dir/newfile
```
::: para
以下命令禁用了 `/mnt/gfs2/gfs2_dir/newfile`{.filename}
文件中的数据日志，并查看是否正确设定了标签。
:::
``` screen
[root@roth-01 ~]# chattr -j /mnt/gfs2/gfs2_dir/newfile
[root@roth-01 ~]# lsattr /mnt/gfs2/gfs2_dir
------------- /mnt/gfs2/gfs2_dir/newfile
```
::: para
您还可以使用 `chattr`{.command} 命令在目录中设定 `j`{.literal}
标签。当您为某个目录设定此标签时，以后在那个目录中创建的所有文件和目录也都会进行日志操作。下面的一组命令可在
`gfs2_dir`{.literal} 目录中设定 `j`{.literal}
标签，然后查看是否正确设定了该标签。此后，该命令会在
`/mnt/gfs2/gfs2_dir`{.filename} 目录中生成一个名为 `newfile`{.filename}
新文件，然后查看是否将为该文件设定了 `j`{.literal}
标签。因为为该目录设定了 `j`{.literal} 标签，那么应该也为
`newfile`{.literal} 启用了日志操作。
:::
``` screen
[root@roth-01 ~]# chattr -j /mnt/gfs2/gfs2_dir
[root@roth-01 ~]# lsattr /mnt/gfs2
---------j--- /mnt/gfs2/gfs2_dir
[root@roth-01 ~]# touch /mnt/gfs2/gfs2_dir/newfile
[root@roth-01 ~]# lsattr /mnt/gfs2/gfs2_dir
---------j--- /mnt/gfs2/gfs2_dir/newfile
```
:::
::: section
::: titlepage
# [⁠]{#ch-manage.html#s1-manage-atimeconf}4.9. 配置 `atime`{.command} 更新 {.title}
:::
[]{#ch-manage.html#idm140546306172816
.indexterm}[]{#ch-manage.html#idm140546328676928
.indexterm}[]{#ch-manage.html#idm140546328675168 .indexterm}
::: para
每个文件内节点和目录内节点都有三个与之相关的时间戳：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `ctime`{.command} --- 最后一次修改内节点状态的时间
    :::
-   ::: para
    `mtime`{.command} --- 最后一次修改文件（或者目录）数据的时间
    :::
-   ::: para
    `atime`{.command} --- 最后一次访问文件（或者目录）数据的时间
    :::
:::
::: para
如果启用了 `atime`{.command} 更新，因为在 GFS2 和其他 Linux
文件系统中这是默认设置，那么每次在读取文件时都需要更新其内节点。
:::
::: para
因为有些应用程序使用 `atime`{.command}
提供的信息，那些更新可能会需要大量不必要的写入流量和文件锁定流量。那个流量可能会降低性能，因此请尽量关闭或降低
`atime`{.command} 更新频率。
:::
::: para
有两个可用来降低 `atime`{.command} 更新效果的方法：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    使用 `relatime`{.literal}（relative atime）挂载，可在前一个
    `atime`{.command} 更新比 `mtime`{.command} 或者 `ctime`{.command}
    更新旧时更新 `atime`{.command}。
    :::
-   ::: para
    使用 `noatime`{.command} 挂载，可在那个文件系统中禁用
    `atime`{.command} 更新。
    :::
:::
::: section
::: titlepage
## [⁠]{#ch-manage.html#s2-manage-mountrelatime}4.9.1. 使用 `relatime`{.command} 挂载 {.title}
:::
[]{#ch-manage.html#idm140546316955520
.indexterm}[]{#ch-manage.html#idm140546316952800
.indexterm}[]{#ch-manage.html#idm140546306734752 .indexterm}
::: para
当挂载文件系统时，可指定 `relatime`{.option}（relative atime）Linux
挂载选项。如果前一个 `atime`{.command} 更新比 `mtime`{.command} 或者
`ctime`{.command} 更新旧，这就可指定更新 `atime`{.command}。
:::
::: simplesect
::: titlepage
### [⁠]{#ch-manage.html#ss-manage-relatime-use}用法 {.title}
:::
``` screen
mount  BlockDevice MountPoint -o relatime
```
::: variablelist
[*`BlockDevice`*]{.term}
:   ::: para
    指定 GFS2 文件系统所在的块设备。
    :::
[*`MountPoint`*]{.term}
:   ::: para
    指定要挂载 GFS2 文件系统的目录。
    :::
:::
:::
::: simplesect
::: titlepage
### [⁠]{#ch-manage.html#ss-manage-relatime-ex}示例 {.title}
:::
::: para
在这个示例中，GFS2 文件系统位于
`/dev/vg01/lvol0`{.filename}，并挂载到目录
`/mygfs2`{.filename}。只有在前一个 `atime`{.command} 更新比
`mtime`{.command} 或者 `ctime`{.command} 更新旧时才会进行
`atime`{.command} 更新。
:::
``` screen
mount /dev/vg01/lvol0 /mygfs2 -o relatime
```
:::
:::
::: section
::: titlepage