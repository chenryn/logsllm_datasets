## 0x01 背景说明
在某次项目中，由于获取到了非法网站的后台账号密码，但是没有后台管理人员的真实IP，导致项目无法进行下去，于是有了这篇文章，突破该点可以利用以下方式：
由于笔者当前使用golang比较多，就想到了可以使用golang的反代技术实现该项目是需求。那么分析下我们需要实现的几个小目标：
1、可以简单的进行反向代理  
2、可以通过webrtc获取到代理后的真实IP
    ps: 本文不对webrtc在不同浏览器、不同环境下无法利用的问题进行讨论。
## 0x02 代码实现
在golang中，可以很简单的去反向代理一个网站，因为golang中自带了一个`NewSingleHostReverseProxy`的方法，简单的实现代码如下：
    package main
    import (
        "log"
        "fmt"
        "net/http"
        "net/http/httputil"
        "net/url"
    )
    func main() {
        target, err := url.Parse("https://mp.weixin.qq.com/")
        if err != nil {
            fmt.Println("err:", err)
            return
        }
        fmt.Printf("反向代理站点 -> %s \n", target)
        proxy := httputil.NewSingleHostReverseProxy(target)
        d := proxy.Director
        proxy.Director = func(r *http.Request) {
            d(r)                 // 调用默认的director
            r.Host = target.Host // 设置反向代理中request的host头信息
        }
        log.Fatal(http.ListenAndServe(":1288", proxy))
    }
运行上面代码后，访问[http://127.0.0.1:1288/mp/homepage?__biz=MzkwNzIxMDUyNg==&hid=1&sn=024beef326bb29c0232d0f489034f82a](http://127.0.0.1:1288/mp/homepage?__biz=MzkwNzIxMDUyNg==&hid=1&sn=024beef326bb29c0232d0f489034f82a)
就可以看到被代理的网站内容
可以看到很简单的就完成的反代这一小目标，当然我们不仅仅满足于当前结果，我们的目标还有要获取到真实IP，关于如何获取到代理后的真实IP，可以了解下webrtc技术，本文不科普webrtc技术如何获取到真实IP的原理，有兴趣的小伙伴可以到
 进行查看。
在已经有反向代理的前提下，那么要完成webrtc获取ip的模板，其实主要就是要修改反代后的网站源码，使其嵌入一个iframe，这样就可以神不知鬼不觉的达到欺骗+获取代理后真实IP的需求。  
具体实现的核心代码如下:
    /*
    Copyright © 2020 iiusky PI:EMAIL
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    package core
    import (
        "bytes"
        "fmt"
        "github.com/gin-gonic/gin"
        "io/ioutil"
        "net/http"
        "net/http/httputil"
        "strconv"
        "strings"
        "time"
    )
    // response修改
    func ModifyResponse(resp *http.Response) error {
        var respBodyByte []byte
        if resp.Header.Get("Location") != "" {
            resp.Header.Set("Location", strings.ReplaceAll(resp.Header.Get("Location"),
                fmt.Sprintf("%s://%s", scheme, host), WebDomain))
        }
        respBodyByte, err := ioutil.ReadAll(resp.Body)
        if err != nil {
            return err
        }
        err = resp.Body.Close()
        if err != nil {
            return err
        }
        if resp.Header.Get("Content-Encoding") == "gzip" {
            resp.Header.Del("Content-Encoding")
            respBodyByte = unGzip(respBodyByte)
        }
        // 实时打印代理情况
        fmt.Println(time.Now().String(), resp.Request.Method, resp.Request.URL.String())
        respBodyByte = bytes.Replace(respBodyByte, []byte("