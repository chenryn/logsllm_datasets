reload指定的文件？Linux系统下的inotify可以做到这点，具体操作如下。
1）在项目目录中创建一个监视文件：
mkdiz /data/www/0Mserverweb/she11
在项目目票中创建一个存放监视文件的目录shel1
# touch reload.set 
创建一个监视文件reload.set
安装inotify程序包
uwsgi启动脚本添加“--touch-reload”项
 /usr/bin/uwsgi --ini */usr/loca1/nginx/conf/*,ini* -=touch-reload */data/www/
OMserverveb/shel1/reload.set*
2）编写监视脚本：
 vi /data/w/OMserverweb/she11/autoreload.sh
# !/bin/sh
objectdir=*/data/ww/OMserverweb*
追动inotify监视项目目录，参数“--exclude”为忽略的文件或目录正则
\ (od*\1xxs*\1dns*\1tteue|ebot1oTaeae) #pntoxe-- bau- atexAT4out/uta/2sn/
py\~)" --timefmt *d/sn/ay 8:sM* -=format *T 4vf* --event
nodify, delete,
move, create,attrib $(objectdir) 1 while read files
项目源码发生变化后，繁发touchreLoad.net 的操作，最终使uwsgi进程重载，达到剧新项目源码的目的
do
/bin/touch /data/ww/0Mserverweb/she11/reload.set
---
## Page 256
第13章从零开始打造B/S自动化运维平台235
done &
3）启动脚本开启项目目录监视：
+/data/www/OMserverweb/shel1/autoreload.sh
13.5系统功能模块设计
13.5.1前端数据加载模块
OMServer平台的Web 前端采用prototype.js作为默认Ajax框架，通过get方式向定义
好的Django 视图发起请求，功能视图通过HtpResponseO)方法直接输出结果，前端会将输出
的结果做页面渲染。图13-6为应用ID（app_categld）等于1的 HtpResponse0O 输出结果，前
端会将这个结果串进行分割，然后填充页面元素，后端返回主机信息。
→Comsener
List/?app_ca/egld-1
192. 168. 1. 14, 190, 161.1. 20[190. 168. 1. 10*m291207014, 192, 14E.1. 20+±r20[3-01-00)
图13-6后编返用主机信息
前端各区域对应的数据库表及视图方法见图13-7。
OMServer
图13-7前编各区域对应后台方法及数据库表
---
## Page 257
236第三部分案例简
局部方法代码如下：
[ /data/www/OMserverweb/autoadmin/views.py ]
=Return server IP 1ist
-返图服务器列表方法
def servez_list (request):
ip="*
ip_hostname=**
if not *app_categId* in request.GET:
apP_categId***
el8e:
app_categId=request,GET[*app_categId*]
获取用户选择的应用分类ID
SezverList为server_list表模型对案，实现过滤获取的应用分类ID相匹配的主机列表
ServerListob) - ServerList.objects.filter(server_app_id=app_categId)
for e in ServerListobj1
ip+=*,*+e.server_lip
ip_hostname+=*, *+e server_lip+***+e.server_name
servez_1ist_stzing=ip [1:]+* I*+ip_hostname [1: ]
192.168.1.20*8n2013-08-020，其中“1°分属排首都分为IP地址，作为HTML
+ 输出式: 192.168.1.10,192.168.1.201192.168.1.10*sn2012-07010, \
分隔特后部分为的value，以“·”号作为分隔持，目的是为后墙提供主机名及IP两种
下拉板显示项，
目标地址支持
return HttpResponse (server_list_string)
=Return module 1ist
-返据功能模块列表方法
def module_list (request) :
nodule_id=*-1"
module_name=u”请选择功能模块..."
ModuleLiat为module_List表模亚对象，实现读取所有模块列表，以模块id做排序
Module0bj - ModuleList,objects.order_by(*id')
for e Ln ModuleOb]1
module_id+=*,"+str (e,id)
module_name+=*,*+e.module_name.
nodule_1ist_string=nodule_nane+*)*+module_id
输出格式：“请选择功能模块..查看系统日志，查看最新登录，查看系统版本
|-1,1001,1002,1003
其中“1”号分隔模块名称与模块ID，Web前墙获取数据后通过JavaScript做拆分与组装
return HttpResponse (module_1list_string)
---
## Page 258
13.5.2数据传输模块设计
传输模块采用rpyc分布式计算框架，利用分布式特点可以实现多台主控设备的支持，具
备一定横向扩展及容灾能力。rpyc分为两种角色，一种为 Server端，另一种为 Client 端，与
传统的Socket工作方式一样，区别是rpyc实现了更高级的封装，支持同步与异步操作、回
调和远程服务以及透明的对象代理，可以轻松在Server与Client之间传递Python的任意对
象，在性能方面也非常高效。下面介绍的是Django的module_runO视图方法，实现接收功
能模块的提交参数、加密、发送、接收功能模块运行结果等，局部方法代码如下：
[ /data/www/OMserverweb/autoadmin/views.py ]
• Run module
现行模块视图方法（向rpyc 服务器端发起任何请求）
def modale_run (request) :
import rpye
put_string=**
if not *KoduleID* in request.GET:
码巴省略)
·接收模块ID、操作主机、模块扩展参数等（更多源
Module_Id=**
else:
Module_Id=reque8t , G&T[*ModuleID′]
put_string+=Module_Id+*8e*
-111*
try:
conn=rpyc.connect (*192.168.1.20′,11511)连楼xpyc主控编主机。晴α :11511
调用rpyc Server 的 1ogin 方法实现账号、资码校验，暴蔽恶意的连接
conn.root .1ogin ( *oMusex*, *KJS23o4ij09gRF734iuhsdfhkGYSihoivhj38u4h*)
except Exception, e1
Logger,error (*connect rpyc server error:*+str (e))
return HttpResponse (*connect rpyc server error:*+str(e))
对请求数据串使用 tencode 方法进行加客，密钥使用 Django 中 settings,SECR&r_KEY 的值
put_string=tencode (put_string, settings.SScRET_KEY)
满用rpyc Server 的Runcomands 方法实现功能模块的任务下发，返团的结果使用 tdecode 进行解害
OPresult=tdecode (conn,root .Runcommands (put_string) , settings ,SEcR&T_KEY)
return ttpResponse（OPresult）输出结果供首增淮染
关于rpyc服务器端的实现原理，首先接收rpye客户端传递过来的信息，通过解密方
法还原出模块ID、操作对象、模块扩展参数等信息，再通过cxec方法导人相应的功能模块
（要事先完成编写，否则会提示找不到指定功能模块），调用功能模块的相关方法，实现操作
任务向业务集群服务器下发与执行，最后将任务执行结果串进行格式化、加密后返回给Web
层。完整实现代码如下：
---
## Page 259
238第三部分案例篇
[ /home/test/OMServer/OMservermain.py ]
-*- coding: utf-8 --
inport os,sys
import time
from cPickle import dunps
import re
from rpyc import Service
from rpyc,utils.server import ThreadedServer
from libraries inport *
import logging
定义服务募增模块存放路径
fron config import *
sy8dir=os,path, abspath (os ,path,dirname (__file_))
sys -path. append (os. sep jo.n( (aysdir, *modules/ +AUTO_PLATFoRM) ))
class ManagerService (Service) :
定又1ogin 认证方法，对外开放调用的方法。xPyc要求加上“exposed_”前缓，调用时使用
1ogin() 即可
def exposed_login (self,user,passwd) :
if user==*0Muser* and passwd==*KJS23o4i509gHF734iuhsdfhkGYSihoiwh538u4h*:
self,Checkout_pass=True
认证结果标记变量，值为“True”则认证通过，反之
认证失败
el8e:
self.Checkout_pass=False
def exposed_Runcommands (self,get_string) :
logging .basicConfig (leve1=logging.deauG,
启用系统日本记录
fllenane=sys-path[0}+*/1ogs/omsys.1og′,
format=*8 (asctime) s [8 (levelnane) s]  (message) s′,
(,e,=apouett
判断是否通过认证
try:
if self,Checkout_pass1=True:
return tencode (*User verify failed!*,SECRET_KEY)
except:
return tencode (*Invalid Login!*, SECRET_KET)
获革zpyc Client 的请求串get_string，通过 tdecode 方法解害后再进行分隔。分隔特为“e9”
self .get_string_array=tdecode (get_string, SEcRET_KEY) -split (*88′)
self.ModuleId=self.get_string_array[0]获取功能模块ID
self.Hosts=self.get_string_array[1]
获取操作目标主机
[1-KexzeuezedsAe
获取功能模块的扩展参数并速加到列表
for 1 in range(2,len(self.get_string_array) -1) :
sys_param_array-append(self,get_string_array[1))
try1
---
## Page 260
第13章从零开始打造B/S自动化运维平台239
exec importstring
except :
return tencode (u*module\**+mid+u*\*does not exist, Please add
it*, SECRET_KEY)
调用模块相关方法，下发执行任务
Runobj=Modulehandle (se1f ,ModuleId, self ,Bosts, sy8_param_array)
根据不间主控暖组件格式化输出，支持 Func、Ansible、Saltstack
Runmessages=Runob].run()
1f AOTO_PLATFORM==*func* :
If type (Runnessages) == dict:
returnString - func_transfoxm(Runmessages, self,Hosto)
else:
returnString - str (Runmessages) strip ()
elif AUTO_PLATFORM==*ansible*:
If type (Runmessages) * dict:
returnString = ansible_transform (Runmessages, self.Hosts)
else:
returnString = str (Runmessages) -strip()
elif AUTO_PLATFOR==*saltstack":
if type (Runmessages) -= dict:
returnString = saltstack_transform(Runmessages, self.Bosts)
else:
returnString = str (Runmessages) strip()
对返因给rpyc C1ient 的数据串进行加害
s=ThreadedServer (ManagerService, port=11511, auto_register=False)
return tencode (returnString, S8CRET_KEY)
s.start ()
泉动rpyc 服务董听、接收、响应谱求
数据传输的安全性关系到整个运营平台的生命线，因此严格做好人侵安全防范至关重
要。OMServer平台采用base64.b64encodeO、base64.b64decodeO加上密钥混淆算法（RC4）
实现数据的加密与解密。OMServer平台遵循一个原则，数据在传输之前调用tencodeO方法
进行加密，在数据接收完毕后调用dencodeO方法进行解密。解密的密钥采用项目settings。
py中的SECRET_KEY变量值。同时在rpyc服务器端添加loginO方法，实现逻辑层的安全
[ /home/test/OMServer/libraries.py ]
 -*- coding: utf-8 -*-
1/usr/bin/env python
import random, base64
from hashlib import sha1
RC4 加害其洪
def crypt (data, key) :
(952)afue1 = xoq
x = 0
for 1 in range (256) :
---
## Page 261
240第三部分案例篇
x = (x + box[i]+ ord(key[i $ Len (key) 1))  256
box[i], box[×] = box[×], box[1]
0 =  = x
out = [1
for char in data:
x =(× + 1)  256
y = (y + box[x]) $ 256
box[×] , box[y] = box[y] , box[x]
(([9  ([<xoq + [x]xoq) xoq (xeuo)pzo) xu)pueddeno
使用RC4算法加害编码后的数据，data 为加害的数据，key 为塞钥
return "'-join(out)
def tencode (data, key, encode=base64 ,b64encode, salt_length=16) :
**gC4 encrypt.ion vith random salt and final encoding***
salt = '*
for = in range (salt_length) :
salt += chr (zandom, randrange (256) )
data = salt + crypt (data, sha1 (key + salt) ,digest ())
if escode:
data = encode (data)
使用 RC4算法繁密编码后的数据，data 为加资的数据。key 为害钥
return data
def tdecode (data, key, decode=base64,b64decode, salt_length=16) :
if decode:
data - decode (data)
salt = data[:salt_length]
return crypt (data [salt_1ength:1, sha1 (key + salt) -digest ())
13.5.3平台功能模块扩展
OMServer平台模块的扩展需要完成两件事情，一是在前端添加模块基本信息，二是在
服务器端编写对应的任务模块，下面对具体内容进行详细说明。
（1）添加前端模块
添加前端模块包括指定模块名称、功能说明、模块扩展（HTML表单作为模块参数）等，
具体操作是点击首页的【添加模块】按钮，跳转到“添加模块”表单页面，其中最关键的
是“模块扩展”输入框，支持所有HTML表单元素，后台通过name属性引用其值（value）。
OMServer目前支持最多两个扩展参数，name属性要求使用“sys_param_1”、“sys_param_2”
作为其定义值，当然，扩展更多参数的改造成本也非常低。在本示例中添加“重启进程服务”
模块，具体操作如图13-8所示。
提交后将返回新增模块的ID，该模块ID同时会作为服务器端任务模块的后级名，如
图13-9所示，记下模块ID“1007”，前编模块添加完毕。
---
## Page 262
第13章从零开始打造B/S自动化运维平台241
2E用
明
图13-8添加前端模块
?
图13-9提交前端模块添加
（2）添加服务器端任务模块
服务器端模块的作用是负责具体远程操作任务的功能封装，支持3种Python自动化操
作组件，包括 Saltstack、Ansible、Func。不同组件的 API语法及返回数据结构都不一样，因
此OMServer在设计时就将不同组件的模块进行隔离，具体模块目录结构如图13-10所示，
在模块目录（modules）下组件名作为二级目录名，二级目录下为具体的任务模块，文件名称
由“Mid_”+模块ID组成，与前端生成的模块ID进行关联。
---
## Page 263
242第三部分案例
关于任务模块的编写，不同组件的实现规范和方法都不一样，在编写任务模块之前
需要更新配置文件config-py的两个选项，其
中“AUTO_PLATFORM”为指定组件环境，
可选项为“ansible”、“saltstack”、“func”，
“SECRET_KEY”为指定加密、解密的密钥，
与项目 settings.py 中的 SECRET_KEY 变量保
持一致。另外modules/（ansibleisaltstackjfunc)
Public_lib.py文件的作用是导人、定义各组件的
API模块包及全局参数，同时也增加代码的复
用性。
[ /home/test/OMServer/config.py 1
 -*- coding: utf-8 -*-
uouAd Aue/urq/xsn/1#
AUTO_PLATFORM - "saltstack"
件环境，文持Saltstack、Ansible、Func
指定组