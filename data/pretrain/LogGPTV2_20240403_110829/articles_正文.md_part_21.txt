图10-11 磁盘I/O趋势图
### 10.2.5 日志App的发展
日志App在日志分析领域的价值有目共睹，它不仅极大地方便了运维人员使用日志平台，也很好地利用了厂商资源及行业专家的日志分析经验。为建立可持续发展的日志生态管理体系，应主要做好以下几项工作：
> 
> 日志平台运营者应全面收集各类日志（包括服务器类、网络类、安全类、中间件类、业务类），结合日志分析经验和用户分析需求，集百家之所长，开发出覆盖范围广、场景丰富的日志App，持续丰富日志App库。
>
> 
> 制定并维护日志App制作、发布、更新等标准规范，方便更多日志系统用户和第三方参与日志App制作、发布和维护，扩大日志App贡献源。
>
> 
> 建立日志App市场并与日志平台集成，方便制作者发布、更新日志App，使日志App消费者及时了解更新动态，方便地查找、下载和使用日志App。
第11章 智能运维
>  概述
>
>  异常检测
>
>  根因分析
>
>  日志分析
>
>  告警收敛
>
>  趋势预测
>
>  智能运维面临的挑战
## 11.1 概述 
近年来，随着 IT
运维的复杂度不断提高，人工运维和自动化运维已经无法高效、低成本地应对运维场景中的挑战，智能运维逐渐成为一种新的解决方案。实际上，智能运维不仅提高了运维效率，而且引入了很多新的视角，与新的
IT 场景相结合，创造出新的价值。对于 IT
企业来说，智能运维的重要性会越来越明显。所有企业都应该了解智能运维，并从传统的运维手段逐步转向智能运维。
智能运维的英文全称是 Artificial Intelligence for IT
Operations，它是大数据、机器学习等技术在运维领域的应用。以往，随着数据量越来越庞大，系统结构越来越复杂，运维团队不得不雇用更多的人来应对。如今，智能运维通过提供访问工具改变了这一点。这些工具可以通过收集和分析数据来做出高级决策和执行自动化操作。智能运维可以被理解为将数据分析融入
IT
运维系统的一系列更精确、复杂的方法的集合。对运维人员而言，智能运维可以协助他们更高效地定位和解决现实中的问题。对智能运维工具开发人员而言，要最大化利用运维数据，挖掘出对解决问题有切实帮助的信息。智能运维工具的开发必须由算法工程师和运维人员共同完成。算法工程师的科研知识储备和运维人员的专业领域知识，都是不可或缺的部分。
智能运维目前仍处于探索阶段。智能运维是随着机器学习的发展而发展的，相关场景大多是大规模、无监督、高精确度的场景，对算法的要求很高。经过近几年的发展，智能运维逐渐细分出几个较为通用的应用场景：异常检测、根因分析、日志分析、告警收敛和趋势预测。其中，异常检测和告警收敛是发展较快的领域；根因分析和趋势预测受限于真实情况的复杂性，发展较慢，仍然在积累经验。本章将从算法的角度介绍这几个通用场景的实现思路。
## 11.2 异常检测
异常检测是智能运维发展较成熟的场景之一。"异常"可以被定义为不符合常规模式的行为或事件，如异常的网络环境会导致服务器响应变慢，从而导致某个时间点的延迟增大、失败率升高等。在运维系统中，数据大致可分为两种类型，一种是文本类型，另一种是时序指标类型。异常检测关注数值的变化，所以时序指标是它的主要应用载体。时序指标是由监控系统按固定的时间间隔采样的数据，在运维领域中又被称为关键性能指标（Key
Performance
Indicator，KPI）。异常检测的目的是区分指标的正常模式和异常模式。其难点在于，在许多情况下，即使是专业的运维人员也很难定义什么是正常和异常。对于时序指标，早期的异常检测方式是凭经验设定一个阈值，高于或低于该阈值就被判定为异常。但是，这种方式的弊端很多，具体如下：
（1）凭经验设定的阈值可能不理想。
（2）无法适应指标未来可能发生的模式变动。
（3）监控大批量指标时需要耗费很大的人力成本。
（4）只能监控简单的数值异常，无法检测模式上的异常。
为了解决这些问题，依赖于机器学习算法的异常检测应运而生。对不同种类的指标需要有针对性地设计不同种类的算法。例如，对于有周期的业务指标，设计算法时需要考虑其周期性；对于机器指标，要重点关注其波动模式的变化。不存在一个通用的算法可以应对所有情况，更何况一个高度泛化的算法也是很难训练的。另外，算法依赖数据，规范有效的历史数据也是必不可少的。在真实的运维环境中，有异常标签的时序指标数据十分稀少，所以大部分异常检测算法都是无监督的，这对算法的选择有一些限制。既然难以获得有标签的数据，算法需要的训练数据就要更多更广，并且能够覆盖各种特殊的正常模式和异常模式。总之，无论是使用统计方法还是机器学习算法去实现异常检测，数据的多样性和代表性都是十分重要的。
根据应用场景的不同，异常检测可分为单指标异常检测和多指标异常检测。单指标异常检测关注某个指标的异常，它的输入是一维时序数据。多指标异常检测关注一系列相互关联的指标的异常，它的输入是多维时序数据。
### 11.2.1 单指标异常检测
在实际的网络业务数据中存在各类监控指标。这些监控指标往往有具体的含义，对运维人员监控整体业务走势、分析人员获取业务反馈有着至关重要的作用。在智能运维技术架构中，指标异常检测是核心技术中重要的一环。通过指标监控的无人化、自动化、智能化，最终可实现智能的指标检测系统，从而大幅降低运维人员的监控压力，同时为分析人员提供更精确的业务反馈信息。
指标按照来源可分为业务指标和系统指标。其中，业务指标指的是实际业务的监测数据，如交易量、成功率、访问次数、业务额等。这些数据由业务本身产生，来源于人的操作。因此，业务指标往往具有周期性，每天会呈现出有规律的高峰和低谷，每周会呈现出工作日和休息日的差异，在年、季度、月的层面上也会有一定的周期性差异。系统指标指的是由支撑业务运行的物理设备产生的监测数据，如CPU利用率、内存使用量、网络成功率、吞吐量、响应时间等。这些数据由机器产生，与人的操作行为关系不大，更多的是受物理环境的影响。因此，系统指标往往不具有很强的周期性，更多的是受到硬件设备的影响。系统指标虽然不直接反映业务状况，但是对于系统故障导致的业务异常可以通过系统指标快速定位。
指标按照自身特征可分为周期性指标和非周期性指标。周期性指标是指数据具有周期性，对这类指标的异常检测主要关注是否出现了违背历史模式的新模式。非周期性指标是指数据不具有周期性，但可能符合某种非周期性模式（例如，CPU利用率一般会在小于80%的某个数值附近波动，而网络延时会在信道的物理延时附近波动）。对非周期性指标的异常检测一般关注数据是否打破了既有模式。
对于不同来源、不同特征的数据，如何鉴别其中的"固有模式"以进行异常检测，就是异常检测算法需要解决的问题。
下面简要介绍几种常用的单指标异常检测算法。
1\. 三西格玛（3sigma）检测算法
三西格玛检测算法是一种非常经典的异常检测算法，它通过对历史数据计算均值和方差来判断待检测数据是否在合理范围内。
1）优点
（1）简单易用，易于理解，可解释性强。
（2）适合无内在规律可循的数据。
2）缺点
（1）完全不考虑数据本身的时序模式、时间特征、周期性等。
（2）识别逻辑过于简单，约束之外不一定就是异常，很多异常也可能在约束之内。
2\. ARIMA模型
ARIMA（Autoregressive Integrated Moving
Average）模型，即差分整合移动平均回归模型，是一种经典统计学模型，它通过计算历史数据的一些统计学特征来预测未来数据。在异常检测领域，它通过待检测数据和预测数据的差距来判断是否存在异常。
ARIMA模型由以下3个部分组成：
AR(*p*)：AR是Autoregressive的缩写，表示自回归，含义是当前时间点的值等于过去若干个时间点的值的回归。因为不依赖别的解释变量，只依赖自身的历史值，所以称为自回归。若依赖最近的*p*个历史值，则称阶数为*p*，记为AR(*p*)。
I(*d*)：I是Integrated的缩写，表示模型对时间序列进行了差分。因为时间序列分析要求平稳性，所以不平稳的序列需要通过一定手段转化为平稳序列，一般采用的手段是差分。*d*表示差分的阶数。*t*时刻的值减去*t*-1时刻的值，得到新的时间序列，称为1阶差分序列；1阶差分序列的1阶差分序列称为2阶差分序列，以此类推。另外，还有一种特殊的差分是季节性差分，即一些时间序列呈现出一定的周期*T*，用*t*时刻的值减去*t*-*T*时刻的值得到季节性差分序列。
MA(*q*)：MA是Moving
Average的缩写，表示移动平均，含义是当前时间点的值等于过去若干个时间点的预测误差的回归，预测误差=模型预测值-真实值。若序列依赖最近的*q*个历史预测误差，则称阶数为*q*，记为MA(*q*)。
1）优点
（1）简单，易实现。
（2）适用于无噪声、模式简单的数据。
2）缺点
（1）调参难度大，每个参数都需要针对具体数据进行适配。
（2）只能用于模式简单的数据，对于模式复杂的数据表现很差。
（3）不考虑时间特征。
（4）对数据波动非常敏感，容易产生误报和漏报。
3\. 孤立森林算法
孤立森林算法是一种基于决策树森林的集成算法，它是无监督算法。这种算法首先训练若干决策树，再由所有的决策树投票决定是否存在异常。这种通过训练多个弱学习器来实现强学习器的思想称为集成打包思想。
这种算法将样本在空间中的孤立程度作为异常判定标准。在指标异常检测中，所有一维训练数据和测试数据都需要窗口化为高维数据，窗口大小由数据的周期和模式决定。
学习过程：构造多棵分类树，组成森林，每棵树在构造时所用的数据是在总样本中随机抽样得到的。每次在样本空间中随机选择一个维度进行划分，若划分后的子空间中的样本数小于某个阈值则停止划分，否则继续划分，直到达到树的最大深度或无可划分。
估计过程：将新样本输入森林，将新样本所在子空间在每棵树中的深度（划分次数）作为异常指数，深度越大则说明越正常，越小则说明越异常。最后，综合森林中每棵树的结果做出决策。
1）优点
（1）简单，速度快，易训练。
（2）擅长处理与时间不相关的异常，以及异常的偏移程度远大于自身离散程度的简单情况。
（3）对缺漏点不敏感。
2）缺点
（1）不考虑时间特征。
（2）训练数据中的噪声会产生较大影响。
（3）对于细微异常不敏感。
4\. 滑动平均算法
滑动平均算法是一种基于数值的简单阈值算法，通过比较滑动窗口内平均值的某种关系（比值、差分等）的历史分布，判断数据是否在合理的范围内波动，是否产生了历史习惯外的波动情况。
原理：通过计算相邻窗口内数据和的商来考量数据变化的程度，基于商值序列的分布来学习相对稳态下的阈值。在KPI异常检测中，所有一维训练数据和测试数据都需要窗口化为高维数据，窗口大小由数据的波动程度决定。窗口越小，模型对数据波动越敏感；窗口越大，模型对数据波动越不敏感。
学习过程：对两个相邻窗口内的数据分别求和再相除，得到前后窗口的数值商，进而得到训练数据的商序列。数据波动越剧烈，商就越大，反之则越小。为了对商序列的分布做简单描述，对其求平均值和期望值。此期望值和平均值将作为后续检测所用的阈值。其意义是如果数据的波动程度在历史数据波动程度以内，就认为是正常的。
相比于单纯比较平均值的历史分布，使用前后窗口可以增强算法的稳健性，降低数据中噪声的影响。对于偶发性波动异常，如果单纯比较平均值历史分布，由于偶发异常在窗口内对平均值偏移产生的影响有限，最终可能导致产生漏报。而如果使用前后窗口进行比较，可以放大偶发异常的影响，从而更易于捕捉异常情况。
评估过程：对待预测序列进行窗口化并计算商序列，使用平均值和方差配合灵敏度构造阈值，依据阈值判断是否异常。
1）优点
（1）简单，快速，易训练。
（2）适用于无规律的非周期性数据，能容忍一定的噪声。
2）缺点
（1）不考虑时间特征。
（2）不考虑数据本身的模式异常，仅在历史分布的范围内进行判断。
（3）效果与数据本身的波动程度有关，如果数据本身波动程度很大，那么可能难以捕捉波动类型的异常。
（4）对于细微异常不敏感。
5\. 梯度增强回归树算法
梯度增强回归树（GBRT）算法是一种基于增强思想的决策树森林算法，它是有监督算法。在时序数据异常检测中，将数据输入模型，得到数据的异常分数。孤立森林算法通过训练多棵不同的决策树，采用投票的方式决定最终结果，而GBRT算法则通过不断地训练新树去优化或改进之前的决策结果，因此被称为增强算法。正因为需要对之前的结果进行修正，所以GBRT算法是有监督算法。
对于每个给定窗口内的数据，根据窗口大小计算若干统计学特征和基于时间戳的时间特征。由上述特征共同组成该数据的特征维度，输入决策树森林中。
学习过程：使用Boost思想训练决策树森林，除第一棵树外，其余树全部基于之前决策结果的目标函数结果来构造。通过不断从数据的特征维度中选取信息增益最大且降低目标函数的维度和该维度的分界点来构造决策树，直到符合停止条件（如树深度、最小子集划分、最小信息增益等）为止。最终得到一个决策树森林。
评估过程：将数据的特征维度输入决策树森林，从第一棵树开始修正前面的结果，直到最后一棵树输出最终的异常分数。
1）优点
（1）具有较强的学习能力。
（2）通过人为标记或特征工程，可以有针对性地适应某些数据需求。例如，可以加入乱序周期的数据作为反例来训练一个可以识别周期异常的模型。
（3）在多数情况下，效果好于孤立森林算法，但是如果训练数据不理想，可能会出现相反的情况。
2）缺点
（1）因为需要不断地反馈迭代，所以训练时间很长。
（2）对数据要求很高，要求数据必须有标记。
（3）要求数据量比较大。
6\. 核密度分析
核密度分析（Kernel Density Estimation，
KDE）是一种基于历史数据分布的无监督算法。在时序数据异常检测中，将数据输入模型，得到数据的异常分数。
对于给定带宽，以带宽为间隔划分整个数据集，使用每个间隔内的点构造高斯分布，将所有间隔得到的高斯分布线性叠加并归一化，最终得到一个由多个高斯分布组合而成的分布模型。原理上类似于对统计数据绘制直方图，可以将数据在各个数值区间上的分布通过频率计算出来。
学习过程：对每天处于同一时刻的数据点，选取其相邻一定范围内的点构成一个点集，对点集做核密度分析，构造一个核密度模型。对一天中的所有时刻构造一个对应的核密度模型，得到最终的KDE模型。根据精度，可以生成数量不同的模型。
评估过程：首先找到待评估数据点所属的时刻，然后使用该时刻对应的核密度模型对数据点进行评估，得出异常分数，最后根据灵敏度阈值判断是否异常。
1）优点
（1）对于周期规律明确的数据具有较好的评估效果，对任意时刻的灵敏度取决于该时刻数据的波动程度。
（2）如果对不同时间模式训练不同的KDE模型，可以精准捕获周期模式异常，对证券类数据等具有良好的识别效果。
（3）模型完全不受少量缺失点的影响。
2）缺点
（1）模式简单，需要对每个时刻单独建模，存储空间消耗比较大。
（2）要求数据量比较大，算法精度和数据量直接挂钩。
7\. 编码器
条件变分自编码器（Conditional Variational
Autoencoder，CVAE）是对变分自编码器（VAE）的改进，它是一种涉及神经网络的机器学习算法。理解CVAE需要从最原始的自编码器（AE）开始：在时序数据异常检测中，将输入数据窗口化，通过编码器映射为维度更低的隐变量，再由解码器进行复原，如果复原出的数据和原始数据接近程度较高，说明输入数据的模式是正常的，反之则是异常的。网络训练过程就是通过输入无异常的数据让网络训练编码器和解码器，使之尽可能地将模式相似的数据都复原出来。