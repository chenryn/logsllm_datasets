# SyzGen: Automated Specification Generation for Fuzzing Closed-Source Kernel Modules

## Table 5: Vulnerabilities Found by SyzGen
Session 3B: Operating Systems CCS '21, November 15â€“19, 2021, Virtual Event, Republic of Korea

One of the vulnerabilities identified can be exploited to achieve privilege escalation and has been assigned CVE-2020-9928.

## 7. Discussion and Limitations

While SyzGen shows promise in generating templates for closed-source kernel modules, there are areas for improvement. A fundamental requirement for fuzzing and dynamic analysis is that the target driver must be loaded to invoke its interfaces. However, we found that most drivers were not running on our test machines. It is arguable that only those drivers loaded by default are more meaningful attack surfaces. Additionally, SyzGen relies on logs to infer explicit dependencies and then generalizes them beyond the logs. Without logs, it degrades to a mode where only interface recovery is performed.

Modern fuzzing typically uses coverage-guided techniques and various sanitizers (e.g., Kernel Address Sanitizer or KASAN) to catch different types of bugs, even if they do not cause an immediate kernel crash. Retrofitting sanitizers into closed-source binaries, especially kernel drivers, remains challenging. Static rewriting of binaries is a potential solution, but currently, only ELF binaries can be rewritten with high accuracy [12]. QASan [13] is an alternative that uses QEMU to dynamically instrument binaries, though it supports only user-mode programs. Apple occasionally releases a few driver binaries with KASAN enabled, but we found this feature in only three of the drivers we tested. Windows has an in-house driver verifier that monitors drivers by manipulating memory allocation and resource management, which could be integrated into our system if SyzGen is ported to Windows.

## 8. Conclusion

In this paper, we introduced SyzGen, a novel approach to automatically generate specifications for fuzzing drivers without source code. SyzGen infers explicit dependencies for interfaces by analyzing a small number of execution traces from existing applications and then generalizes this knowledge to other interfaces. Instead of producing syscall specifications in one go, SyzGen yields coarse-grained specifications initially and iteratively refines them, allowing us to combine knowledge from multiple runs under different calling contexts. We also proposed a lightweight coverage collection technique that guides fuzzing without requiring specific hardware, virtual machines, or kernel source code. Our empirical evaluation demonstrates that SyzGen effectively recovers driver interfaces, including input structure, constraints on inputs, and explicit dependencies between syscalls. Our evaluation shows that SyzGen produces high-quality syscall specifications, leading to the discovery of 34 unique bugs, including one that can be exploited for privilege escalation, and 2 CVEs to date.

## 9. Acknowledgments

We would like to thank the anonymous reviewers for their insightful feedback. This work was supported by the National Science Foundation under Grant No. 1652954.

## Figure 8: Syscall Specification Example
This figure illustrates a syscall specification where 'resource' is the keyword for dependencies. The example highlights a vulnerability in the Bluetooth driver, assigned CVE-2020-9929, which can trigger an arbitrary read bug. The resources 'connection_0' and 'connection_1' are inferred through our signature-based dependence inference approach. The fifth argument, `inputStruct`, is a nested structure with multiple fields, including pointers, arrays, and constants. The specification also details inter-field relationships, such as the length field `Group199_3_const39` representing the size of another structure `Group199_3_struct_48`. The vulnerability arises from a memory read whose address is provided by the user (`Group199_3_buffer11`) without any sanitization. To exploit this bug, the input must be properly constructed, and the correct sequence of syscalls must be set up to obtain valid dependence values for `connection_0` and `connection_1`.

### Design Issue in Bluetooth Driver
A common practice in macOS drivers to handle race conditions is to enforce a single-threaded work loop, ensuring sequential execution of requests. However, this design can block the entire execution if some requests need to communicate with the underlying firmware, which may, in turn, communicate with other devices. To mitigate this, the driver puts the awaiting thread to sleep until a response arrives, leaving a loophole for race conditions. Any waiting request that has not been completed can have its associated global data modified by subsequent requests. This issue is prevalent in the Bluetooth driver and cannot be fixed without significant changes to the system design. This vulnerability can be exploited to escalate privileges.

### Algorithm 1: Command Identifier Determination
Algorithm 1 outlines the procedure to identify the command identifier, its valid values, and corresponding functionalities (i.e., function addresses). The entry function `IOConnectCallMethod` is a dispatch function that calls other functions based on the command identifier. SyzGen considers all functions inside the target driver as candidates for functionalities and performs symbolic execution to locate the key variable for dispatching. It symbolizes the inputs and employs a breadth-first search strategy to explore all paths, suspending any state that runs into a function that could potentially be the entry of one functionality. If no states are active, SyzGen extracts common symbolic variables from constraint sets of those stopped states and checks whether there is one that could have unique values in different states. If so, SyzGen identifies the symbolic variable as the command identifier, pinpointing its location and parameter origin. Otherwise, it resumes some states and repeats the process until all states terminate.

### Table 6: Rules for Merging Specifications
This table provides rules for merging two specifications if they differ in only one field. The union of two fields is taken whenever possible.

### Figure 9: Coverage Comparison
Figure 9 compares the coverage of SyzGen, SyzGen-IMF, and SyzGen-Base over time for various drivers, showing the effectiveness of SyzGen in achieving higher coverage.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.