USENIX Association
28th USENIX Security Symposium    1253
locate the safe areas. A new thread-private memory mech-
anism is proposed to isolate the thread-local safe areas and
prevent the adversaries from reducing the randomization en-
tropy via thread spraying. It also randomizes the safe areas
after the TLB miss event to prevent the cache-based side-
channel attacks. The experimental results show that our pro-
totype not only prevents all existing attacks successfully but
also incurs low performance overhead.
Acknowledgments
We are grateful to our shepherd Mathias Payer for guiding
us in the ﬁnal version of this paper. We would like to thank
the anonymous reviewers for their insightful suggestions and
comments. This research is supported by the National High
Technology Research and Development Program of China
under grant 2016QY07X1406 and the National Natural Sci-
ence Foundation of China (NSFC) under grant U1736208.
Pen-Chung Yew is supported by the National Science Foun-
dation under the grant CNS-1514444. Yinqian Zhang is sup-
ported in part by gifts from Intel and DFINITY foundation.
References
[1] Kernel
page-table
isolation.
https://www.kernel.org/doc/html/latest/x86/pti.html.
[2] Intel corporation. intel 64 and ia-32 architectures soft-
ware developer’s manual.
[3] ABADI, M., BUDIU, M., ERLINGSSON, U., AND
LIGATTI, J. Control-ﬂow integrity. In Proceedings of
the 12th ACM Conference on Computer and Communi-
cations Security (2005), CCS ’05, ACM.
[4] BACKES, M., AND N ¨URNBERGER, S. Oxymoron:
Making ﬁne-grained memory randomization practical
by allowing code sharing. In Proceedings of the 23rd
USENIX Security Symposium, San Diego, CA, USA,
August 20-22, 2014.
[5] BASU, A., GANDHI, J., CHANG, J., HILL, M. D.,
AND SWIFT, M. M. Efﬁcient virtual memory for
big memory servers. SIGARCH Comput. Archit. News
(2013).
[6] BHATTACHARJEE, A. Large-reach memory manage-
ment unit caches. In Proceedings of the 46th Annual
IEEE/ACM International Symposium on Microarchi-
tecture (2013), MICRO-46.
[8] BUROW, N., MCKEE, D., A. CARR, S., AND PAYER,
In NDSSS
M. Cﬁxx: Object type integrity for c++.
2018.
[9] CHEN, S., ZHANG, X., REITER, M. K., AND
ZHANG, Y. Detecting privileged side-channel attacks
in shielded execution with d´ej`a vu. In Proceedings of
the 2017 ACM on Asia Conference on Computer and
Communications Security (2017), ASIA CCS ’17.
[10] CHEN, X., BOS, H., AND GIUFFRIDA, C. CodeAr-
mor: Virtualizing the Code Space to Counter Disclo-
sure Attacks. In 2017 IEEE European Symposium on
Security and Privacy (2017).
[11] CHEN, Y., REYMONDJOHNSON, S., SUN, Z., AND
LU, L. Shreds: Fine-grained execution units with pri-
vate memory. In IEEE Symposium on Security and Pri-
vacy (2016).
[12] CRANE, S., LARSEN, P., BRUNTHALER, S., AND
In NSPW
FRANZ, M. Booby trapping software.
(2013), ACM, pp. 95–106.
[13] CRANE, S., LIEBCHEN, C., HOMESCU, A., DAVI,
L., LARSEN, P., SADEGHI, A. R., BRUNTHALER, S.,
AND FRANZ, M. Readactor: Practical code random-
ization resilient to memory disclosure. In 2015 IEEE
Symposium on Security and Privacy (2015).
[14] CRANE, S. J., VOLCKAERT, S., SCHUSTER, F.,
LIEBCHEN, C., LARSEN, P., DAVI, L., SADEGHI,
A.-R., HOLZ, T., DE SUTTER, B., AND FRANZ, M.
It’s a trap: Table randomization and protection against
function-reuse attacks. In ACM SIGSAC Conference on
Computer and Communications Security (2015).
[15] DAVI, L., LIEBCHEN, C., SADEGHI, A., SNOW,
K. Z., AND MONROSE, F. Isomeron: Code random-
ization resilient to (just-in-time) return-oriented pro-
In 22nd Annual Network and Distributed
gramming.
System Security Symposium, NDSS (2015).
[16] FRASSETTO, T., JAUERNIG, P., LIEBCHEN, C., AND
SADEGHI, A.-R. IMIX: In-process memory isolation
extension. In 27th USENIX Security Symposium.
[17] GANDHI, J., BASU, A., HILL, M. D., AND SWIFT,
M. M. Badgertrap: A tool to instrument x86-64 tlb
misses. SIGARCH Comput. Archit. News (2014).
[7] BITTAU, A., MARCHENKO, P., HANDLEY, M., AND
KARP, B. Wedge: Splitting applications into reduced-
In the 5th USENIX Sympo-
privilege compartments.
sium on Networked Systems Design and Implementa-
tion (2008).
[18] GARFINKEL, T., PFAFF, B., CHOW, J., ROSENBLUM,
M., AND BONEH, D. Terra: A virtual machine-based
In Proceedings of
platform for trusted computing.
the Nineteenth ACM Symposium on Operating Systems
Principles (2003), SOSP ’03.
1254    28th USENIX Security Symposium
USENIX Association
[19] GAWLIK, R., KOLLENDA, B., KOPPE, P., GAR-
MANY, B., AND HOLZ, T. Enabling client-side crash-
resistance to overcome diversiﬁcation and information
hiding. In 23nd Annual Network and Distributed Sys-
tem Security Symposium, NDSS (2016).
[20] G ¨OKTAS, E., GAWLIK, R., KOLLENDA, B.,
ATHANASOPOULOS, E., PORTOKALIDIS, G., GIUF-
FRIDA, C., AND BOS, H. Undermining information
hiding (and what to do about it). In 25th USENIX Se-
curity Symposium.
[21] GRAS, B., RAZAVI, K., BOS, H., AND GIUFFRIDA,
C. Translation leak-aside buffer: Defeating cache side-
channel protections with TLB attacks. In 27th USENIX
Security Symposium (USENIX Security 18).
[22] GRAS, B., RAZAVI, K., BOSMAN, E., BOS, H., AND
GIUFFRIDA, C. Aslr on the line: Practical cache at-
tacks on the mmu. In NDSS (2017).
[23] GUAN, L., LIN, J., LUO, B., JING, J., AND WANG,
J. Protecting private keys against memory disclosure
attacks using hardware transactional memory. In 2015
IEEE Symposium on Security and Privacy (2015).
[24] HOFMANN, O. S., KIM, S., DUNN, A. M., LEE,
M. Z., AND WITCHEL, E.
Inktag: Secure applica-
tions on an untrusted operating system. In Conference
on Architectural Support for Programming Languages
and Operating Systems (2013).
[25] HSU, T. C.-H., HOFFMAN, K., EUGSTER, P., AND
PAYER, M. Enforcing least privilege memory views
for multithreaded applications. In the 2016 ACM Con-
ference on Computer and Communications Security.
[26] JAMES E. SMITH AND RAVI NAIR. Virtual machines -
versatile platforms for systems and processes. Elsevier,
2005.
[27] JANG, Y., LEE, S., AND KIM, T. Breaking kernel
address space layout randomization with intel tsx. In
Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security (2016).
[28] KOCHER, P., GENKIN, D., GRUSS, D., HAAS,
W., HAMBURG, M., LIPP, M., MANGARD, S.,
PRESCHER, T., SCHWARZ, M., AND YAROM, Y.
Spectre attacks: Exploiting speculative execution.
CoRR abs/1801.01203 (2018).
[29] KONING, K., CHEN, X., BOS, H., GIUFFRIDA, C.,
AND ATHANASOPOULOS, E. No need to hide: Protect-
ing safe regions on commodity hardware. In the Twelfth
European Conference on Computer Systems (2017).
[30] KUZNETSOV, V., SZEKERES, L., PAYER, M., CAN-
DEA, G., SEKAR, R., AND SONG, D. Code-pointer
integrity. In the 11th USENIX Conference on Operat-
ing Systems Design and Implementation (2014).
[31] LAADAN, O., VIENNOT, N., AND NIEH, J. Transpar-
ent, lightweight application execution replay on com-
modity multiprocessor operating systems. In Proceed-
ings of the ACM SIGMETRICS International Confer-
ence on Measurement and Modeling of Computer Sys-
tems (2010), SIGMETRICS ’10.
[32] LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER,
T., HAAS, W., FOGH, A., HORN, J., MANGARD,
S., KOCHER, P., GENKIN, D., YAROM, Y., AND
HAMBURG, M. Meltdown: Reading kernel memory
from user space. In 27th USENIX Security Symposium
(USENIX Security 18) (2018).
[33] LIU, Y., XIA, Y., GUAN, H., ZANG, B., AND CHEN,
H. Concurrent and consistent virtual machine intro-
spection with hardware transactional memory. In IEEE
20th International Symposium on High Performance
Computer Architecture (HPCA’14) (2014).
[34] LIU, Y., ZHOU, T., CHEN, K., CHEN, H., AND
Thwarting memory disclosure with efﬁ-
XIA, Y.
cient hypervisor-enforced intra-domain isolation.
In
the 22Nd ACM SIGSAC Conference on Computer and
Communications Security (2015).
[35] LU, K., LEE, W., N ¨URNBERGER, S., AND BACKES,
M. How to make ASLR win the clone wars: Runtime
In 23nd Annual Network and Dis-
re-randomization.
tributed System Security Symposium, NDSS 2016.
[36] LU, K., SONG, C., LEE, B., CHUNG, S. P., KIM,
T., AND LEE, W. Aslr-guard: Stopping address space
In Proceedings of
leakage for code reuse attacks.
the 22Nd ACM SIGSAC Conference on Computer and
Communications Security (2015), CCS ’15.
[37] MASHTIZADEH, A. J., BITTAU, A., BONEH, D., AND
MAZI `ERES, D. CCFI: cryptographically enforced con-
In ACM Conference on Computer
trol ﬂow integrity.
and Communications Security (2015), ACM.
[38] MERRIFIELD, T., AND TAHERI, H. R. Performance
implications of extended page tables on virtualized
x86 processors. In Proceedings of the12th ACM SIG-
PLAN/SIGOPS International Conference on Virtual
Execution Environments (2016), VEE ’16.
[39] MOGOSANU, L., RANE, A., AND DAUTENHAHN, N.
Microstache: A lightweight execution context for in-
process safe region isolation. In RAID (2018).
USENIX Association
28th USENIX Security Symposium    1255
[40] MOHAN, V., LARSEN, P., BRUNTHALER, S.,
HAMLEN, K. W., AND FRANZ, M. Opaque control-
ﬂow integrity. In 22nd Annual Network and Distributed
System Security Symposium, NDSS 2015.
[41] NATHAN BUROW, X. Z., AND PAYER, M. Shining
light on shadow stacks. In 2019 IEEE Symposium on
Security and Privacy (2019).
[42] NIU, B., AND TAN, G. Per-input control-ﬂow in-
tegrity. In the 22Nd ACM SIGSAC Conference on Com-
puter and Communications Security (2015).
[43] OIKONOMOPOULOS, A., ATHANASOPOULOS, E.,
BOS, H., AND GIUFFRIDA, C. Poking holes in infor-
mation hiding. In 25th USENIX Security Symposium.
[44] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache
attacks and countermeasures: the case of AES. In 6th
Cryptographers’ Track at the RSA conference on Topics
in Cryptology (2006).
[45] ROGLIA, G. F., MARTIGNONI, L., PALEARI, R., AND
BRUSCHI, D. Surgically Returning to Randomized
lib(c). In ACSAC (2009).
[46] SCHAIK, S. V., RAZAVI, K., GRAS, B., BOS, H.,
AND GIUFFRIDA, C. Revanc: A framework for reverse
engineering hardware page table caches. In European
Workshop on Systems Security (2017).
[47] SHACHAM, H., PAGE, M., PFAFF, B., GOH, E.-J.,
MODADUGU, N., AND BONEH, D. On the Effec-
tiveness of Address-space Randomization. In the 11th
ACM Conference on Computer and Communications
Security (2004).
[48] SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M.
T-sgx: Eradicating controlled-channel attacks against
enclave programs. In NDSS (2017).
[49] SNOW, K. Z., MONROSE,
L.,
DMITRIENKO, A., LIEBCHEN, C., AND SADEGHI,
A. R.
Just-In-Time Code Reuse: On the Effec-
tiveness of Fine-Grained Address Space Layout
Randomization. In Security and Privacy 2013 (2013).
F., DAVI,
[50] TA-MIN, R., LITTY, L., AND LIE, D. Splitting inter-
faces: Making trust between applications and operating
systems conﬁgurable. In the 7th Symposium on Oper-
ating Systems Design and Implementation (2006).
[51] TANG, A., SETHUMADHAVAN, S., AND STOLFO,
S. J. Heisenbyte: Thwarting memory disclosure at-
tacks using destructive code reads. In Proceedings of
the 22nd ACM SIGSAC Conference on Computer and
Communications Security (2015).
[52] VAHLDIEK-OBERWAGNER, A., ELNIKETY, E.,
DUARTE, N. O., GARG, D., AND DRUSCHEL, P.
ERIM: Secure and Efﬁcient In-process Isolation with
Memory Protection Keys. ArXiv e-prints (2018).
[53] VAN DER VEEN, V., ANDRIESSE, D., G ¨OKTAS¸, E.,
GRAS, B., SAMBUC, L., SLOWINSKA, A., BOS, H.,
AND GIUFFRIDA, C. Practical Context-Sensitive CFI.
In Proceedings of the 22nd Conference on Computer
and Communications Security (CCS’15).
[54] VUSEC. Reverse engineering page table caches in your
processor, 2017. https://github.com/vusec/revanc.
[55] WAHBE, R., LUCCO, S., ANDERSON, T. E., AND
GRAHAM, S. L. Efﬁcient software-based fault isola-
In Proceedings of the Fourteenth ACM Sympo-
tion.
sium on Operating Systems Principles (1993).
[56] WANG, X., ZANG, J., WANG, Z., LUO, Y., AND LI,
X. Selective hardware/software memory virtualization.
In the 7th ACM Conference on Virtual Execution Envi-
ronments (2011).
[57] WANG, Z., WU, C., LI, J., LAI, Y., ZHANG, X.,
HSU, W.-C., AND CHENG, Y. Reranz: A light-weight
virtual machine to mitigate memory disclosure attacks.
In the 13th ACM Conference on Virtual Execution En-
vironments (2017).
[58] WERNER, J., BALTAS, G., DALLARA, R., OTTER-
NESS, N., SNOW, K. Z., MONROSE, F., AND POLY-
CHRONAKIS, M. No-execute-after-read: Preventing
In Proceed-
code disclosure in commodity software.
ings of the 11th ACM on Asia Conference on Computer
and Communications Security (2016), ASIA CCS ’16.
[59] WILLIAMS-KING, D., GOBIESKI, G., WILLIAMS-
KING, K., BLAKE, J. P., YUAN, X., COLP, P.,
ZHENG, M., KEMERLIS, V. P., YANG, J., AND
AIELLO, W. Shufﬂer: Fast and deployable continuous
code re-randomization. In 12th USENIX Conference on
Operating Systems Design and Implementation.
[60] ZHANG, C., WEI, T., CHEN, Z., DUAN, L., SZEK-
ERES, L., MCCAMANT, S., SONG, D., AND ZOU, W.
Practical control ﬂow integrity and randomization for
In IEEE Symposium on Security
binary executables.
and Privacy (2013).
[61] ZHANG, M., AND SEKAR, R. Control ﬂow and code
integrity for cots binaries: An effective defense against
In the 31st Annual Computer
real-world rop attacks.
Security Applications Conference (2015).
1256    28th USENIX Security Symposium
USENIX Association