                continue;
            }
            return;
以及下面这一段。
        case 6:
            if (GameManager.instance.defeatedMonster != Decrypt.oro_0(12))
            {
                num = 2;
                continue;
            }
            return;
修改逻辑之后，开始游戏就能够捡到一个道具，能够看到flag的第二部分:
另一部分在哪儿呢？如果看了CG动画的话，应该会知道和`SPELL`有关系。搜索 SPELL 找到一个奇怪的内容:
    this.SPText = GameObject.Find("SPELLText").GetComponent();
然后发现这个地方可能有问题，顺着找到发现还有一处奇怪的逻辑:
            case 2:
                GameManager.instance.SPText.enabled = true;
                num = 36;
                continue;
            case 3:
                if (GameManager.instance.defeatedBoss > Decrypt.oro_1(114))
                {
                    num = 34;
                    continue;
                }
                goto IL_4FC;
    ...
            case 30:
                if (GameManager.instance.defeatedMonster > Decrypt.oro_0(514))
                {
                    num = 2;
                    continue;
                }
这一段逻辑显然也是难以触发的恶臭代码。于是我们这里可以再次修改逻辑（或者直接将SPText设置位可见），可以看到第一部分的flag：  
综合两个信息，得到flag为:  
WeLC0mE_70_5uc7F
###  Python大法好?!
考点：
python2.7的opcode，嵌套c，RC4加解密
解题过程：
拿到opcode，建议自己去写一段代码，然后获取opcode，进行对比。可能lambda那块比较难分析出来。
经过分析，可以得到a.py。可以看出这是python嵌套了C，主要的加解密过程需要分析库a中的函数
`IDA`分析a文件，发现导出了a函数也就是encrypt函数，但是没有解密函数，分析加密部分，是简单的RC4的实现，百度到RC4的实现(百度搜索第一条就是2333)，是一样的，所以自己对照着加密逻辑，写个类似的解密逻辑。导出aa函数。
    void decrypt(char *k){
        FILE *fp1, *fp2;
        unsigned char key[256] = {0x00};
        unsigned char sbox[256] = {0x00};
        fp1 = fopen("code.txt","r");
        fp2 = fopen("decode.txt","w");
        DataEncrypt(k, key, sbox, fp1, fp2);
    }
    extern "C"  
    {    
       void a(char *k){
           encrypt(k);
       }
       void aa(char *k){
           decrypt(k);
       }
    }
最后爆破出key在python中调用c的解密函数即可。
    #-*- coding:utf-8 -*-    from ctypes import *
    from libnum import n2s,s2n
    import binascii as b
    #key="20182018"
    def aaaa(key):
        a=lambda a:b.hexlify(a)
        return "".join(a(i) for i in key)
    def aa(key): #jia mi
        a=cdll.LoadLibrary("./a").a
        a(key)
    def aaaaa(a):
        return s2n(a)
    def aaa(key): #jie mi
        a=cdll.LoadLibrary("./a").aa
        a(key)
    def brup_key():
        i=20182000
        while i
    #include 
    #include 
    #include 
    #include 
    #include 
    using namespace std;
    string buf1;
    unsigned char buf[40] = {0};
    unsigned char buf2[40] = {0xa8, 0x1c, 0xaf, 0xd9, 0x0, 0x6c, 0xac, 0x2, 0x9b, 0x5, 0xe3, 0x68, 0x2f, 0xc7, 0x78, 0x3a, 0x2, 0xbc, 0xbf, 0xb9, 0x4d, 0x1c, 0x7d, 0x6e, 0x31, 0x1b, 0x9b, 0x84, 0xd4, 0x84, 0x0, 0x76, 0x5a, 0x4d, 0x6, 0x75};
    bitset buf3(0x5F3759DF);
    // SUCTF{sm4ll_b1ts_c4n_d0_3v3rythin9!}
    void bit_add(unsigned char a, unsigned char b, unsigned char c, unsigned char& f, unsigned char& s)
    {
        s = a ^ b ^ c;
        f = (a & c) | (b & c) | (a & b);
        return;
    }
    void xor_func(unsigned char a, unsigned char b, unsigned char& s)
    {
        s = a ^ b;
        return;
    }
    void gg_func()
    {
        cout > 1;
        buf3[31] = new_bit;
        return buf3.to_ulong();
    }
    void bit_shuffle()
    {
        bitset t;
        for (int i = 0; i  r(buf1[x]);
            bitset bs_num(wheel[0][i]);
            for (int b = 0; b > buf1;
        if (buf1.length() != 36)
        {
            gg_func();
        }
        do_wheel();
        bit_shuffle();
        do_xor_lfsr();
        if (memcmp(buf, buf2, 36))
        {
            gg_func();
        }
        else cout << "200 OK!" << endl;
        return 0;
    }
// 不要吐槽辣鸡的实现方式
// 出题人的怨念：这个题作为难题来说还是出简单了，转轮机和反馈寄存器原本是为了产生One-Time-Pad而设计的，但在逆向中由于可以多次调试，就变成了简单的多表移位和流式密码，调出偏移就好了。如果有机会应该加入更多坑爹的东西，比如根据上一次结果动态变化的转轮（那还能逆么，pia