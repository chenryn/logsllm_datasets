# Title: Linux Security Modules: General Security Support for the Linux Kernel

## Authors
- Chris Wright, WireX Communications, Inc. (PI:EMAIL)
- Crispin Cowan, WireX Communications, Inc. (PI:EMAIL)
- Stephen Smalley, NAI Labs, Network Associates, Inc. (PI:EMAIL)
- James Morris, Intercode Pty Ltd (PI:EMAIL)
- Greg Kroah-Hartman, IBM Linux Technology Center (PI:EMAIL)

## Publication Information
- **Conference**: 11th USENIX Security Symposium
- **Location**: San Francisco, California, USA
- **Date**: August 5-9, 2002
- **Publisher**: The USENIX Association
- **Contact**:
  - Phone: +1 510 528 8649
  - FAX: +1 510 548 5738
  - Email: PI:EMAIL
  - Website: [http://www.usenix.org](http://www.usenix.org)
- **Copyright**: © 2002 by The USENIX Association. All Rights Reserved.
- **Rights**: Individual papers' rights remain with the authors or their employers. Noncommercial reproduction for educational or research purposes is permitted, provided this copyright notice is included.

## Abstract
The access control mechanisms of existing mainstream operating systems are often inadequate for providing robust system security. Enhanced access control mechanisms have not gained widespread acceptance in mainstream operating systems, partly due to a lack of consensus within the security community on the best solution. Since general-purpose operating systems must meet a wide range of user requirements, any integrated access control mechanism must support multiple access control models. The Linux Security Modules (LSM) project has developed a lightweight, general-purpose access control framework for the mainstream Linux kernel, enabling various access control models to be implemented as loadable kernel modules. Several enhanced access control implementations, including Linux capabilities, Security-Enhanced Linux (SELinux), and Domain and Type Enforcement (DTE), have been adapted to use the LSM framework. This paper presents the design and implementation of LSM and discusses the challenges in providing a truly general solution with minimal impact on the Linux kernel.

## 1. Introduction
Operating system protection mechanisms play a critical role in system security, but the access control mechanisms of existing mainstream operating systems often fall short in providing strong security. Although many enhanced access control models and frameworks have been proposed and implemented, mainstream operating systems typically lack support for these enhancements, partly due to a lack of agreement within the security community on the best general solution.

Like other general-purpose operating systems, the Linux kernel primarily provides discretionary access controls and lacks direct support for enhanced access control mechanisms. However, Linux supports dynamically loadable kernel modules, which could, in principle, be used to implement enhanced access controls, allowing for the support of multiple security models.

In practice, creating effective security modules is challenging because the kernel does not provide infrastructure for kernel modules to mediate access to kernel objects. As a result, kernel modules often resort to system call interposition, which has significant limitations. Additionally, these modules may require reimplementing selected kernel functionality or applying kernel patches, reducing the value of modular composition.

At the Linux Kernel 2.5 Summit, the NSA presented their work on Security-Enhanced Linux (SELinux) and emphasized the need for such support in the mainstream Linux kernel. Linus Torvalds acknowledged the need for a general access control framework but favored a new infrastructure that would provide the necessary support to kernel modules for implementing security, avoiding the need to choose among competing projects.

In response, the Linux Security Modules (LSM) project developed a lightweight, general-purpose access control framework for the mainstream Linux kernel, enabling various access control models to be implemented as loadable kernel modules. Several enhanced access control implementations, including POSIX.1e capabilities, SELinux, and Domain and Type Enforcement (DTE), have been adapted to use the LSM framework.

The LSM framework enables the implementation of many different security models with the same base Linux kernel while minimally impacting the kernel. It allows enhanced access controls to be implemented without requiring kernel patches and permits the existing security functionality of POSIX.1e capabilities to be cleanly separated from the base kernel, allowing for performance optimization in specialized environments.

The remainder of this paper is organized as follows:
- Section 2 elaborates on the problem that LSM seeks to solve.
- Section 3 presents the LSM design.
- Section 4 describes the current LSM implementation.
- Section 5 discusses the operational status of LSM, including testing, performance overhead, and modules built for LSM.
- Section 6 addresses issues that arose during development and plans for future work.
- Section 7 describes related work.
- Section 8 presents our conclusions.

## 2. The Problem: Constrained Design Space
The design of LSM was constrained by the practical and technical concerns of both the Linux kernel developers and the various Linux security projects. Linus Torvalds specified that the security framework must be:
- Truly generic, where using a different security model is merely a matter of loading a different kernel module.
- Conceptually simple, minimally invasive, and efficient.
- Capable of supporting the existing POSIX.1e capabilities logic as an optional security module.

The various Linux security projects were primarily interested in ensuring that the security framework would be adequate to permit them to reimplement their existing security functionality as a loadable kernel module. The new modular implementation must not cause any significant loss in the security being provided and should have little additional performance overhead.

The core functionality for most of these security projects was access control. However, a few projects also desired other kinds of security functionality, such as security auditing or virtualized environments. There were significant differences over the range of flexibility for the access controls. Most projects were only interested in further restricting access, i.e., being able to deny accesses that would ordinarily be granted by the existing Linux discretionary access control (DAC) logic. However, a few projects wanted the ability to grant accesses that would ordinarily be denied by the existing DAC logic; some degree of this permissive behavior was needed to support the capabilities logic as a module. Some security projects wanted to migrate the DAC logic into a security module so that they could replace it.

The "LSM problem" is to unify the functional needs of as many security projects as possible while minimizing the impact on the Linux kernel. The union set of desired features would be highly functional but also so invasive as to be unacceptable to the mainstream Linux community. Section 3 presents the compromises LSM made to simultaneously balance these conflicting goals.

## 3. LSM Design: Mediating Access to Kernel Objects
The basic abstraction of the LSM interface is to mediate access to internal kernel objects. LSM allows modules to answer the question, "May a subject S perform a kernel operation OP on an internal kernel object OBJ?"

LSM places hooks in the kernel code just ahead of the access, as shown in Figure 1. Just before the kernel would access an internal object, a hook calls a function that the LSM module must provide. The module can either allow the access or deny it, forcing an error code return.

The LSM framework leverages the kernel's existing mechanisms to translate user-supplied data—typically strings, handles, or simplified data structures—into internal data structures. This avoids time-of-check to time-of-use (TOCTTOU) races and inefficient duplicate lookups. It also allows the LSM framework to directly mediate access to the core kernel data structures. With this approach, the LSM framework has access to the full kernel context just before the kernel performs the requested service, improving access control granularity.

Given the constrained design space described in Section 2, the LSM project chose to limit the scope of the LSM design to supporting the core access control functionality required by the existing Linux security projects. This limitation enabled the LSM framework to remain conceptually simple and minimally invasive while still meeting the needs of many security projects. It also strengthened the justification for adopting the LSM framework into the Linux kernel, as the need for enhanced access controls was more generally accepted by the kernel developers than the need for other kinds of security functionality, such as auditing.

A consequence of the "stay simple" design decision is that LSM hooks are primarily restrictive: where the kernel was about to grant access, the module may deny access, but when the kernel would deny access, the module is not consulted. This design simplification exists largely because the Linux kernel "short-circuits" many decisions early when error conditions are detected. Providing for authoritative hooks (where the module can override either decision) would require many more hooks into the Linux kernel.

However, the POSIX.1e capabilities logic requires the ability to grant accesses that would ordinarily be denied at a coarse level of granularity. To support this logic as a security module, LSM provides some minimal support for permissive hooks, where the module can grant access that the kernel was about to deny. These permissive hooks are typically coupled with a simple DAC check, allowing the module to override the DAC restriction. Figure 2 shows a user access request where a failed user ID check can be overridden by a permissive hook. These hooks are limited to the extent that the kernel already consults the POSIX.1e capable() function.

Although LSM was not designed to explicitly support security auditing, some forms of auditing can be supported using the features provided for access control. For example, many existing Linux security projects provide support for auditing the access checks performed by their access controls. LSM also enables support for this kind of auditing. Some security auditing can also be supported via existing kernel modules by interposing on system calls, as in the SNARE project.

Many security models require binding security attributes to kernel objects. To facilitate this, LSM provides opaque security fields that are attached to various internal kernel objects (detailed in Section 4.1.1). The module is responsible for managing these fields, including allocation, deallocation, and concurrency control.

Finally, module composition presented a challenge to the LSM design. While there is a need to compose some modules with complementary functionality, fully generic security policy composition is known to be intractable. Therefore, LSM permits module stacking, but pushes most of the work to the modules themselves. A module that wishes to be stackable must export an LSM-like interface and make calls to subsequently loaded modules when appropriate. The first module loaded has ultimate control over all decisions, determining when to call any other modules and how to combine their results.

## 4. Implementation
This section describes the implementation of the LSM kernel patch. It begins with an overview of the implementation, detailing the types of changes made to the kernel in Section 4.1. Sections 4.2 through 4.7 discuss the specific hooks for various kernel objects or subsystems.

### 4.1. Implementation Overview
The LSM kernel patch modifies the kernel in five primary ways:
1. **Opaque Security Fields**: Adds opaque security fields to certain kernel data structures (Section 4.1.1).
2. **Security Hook Functions**: Inserts calls to security hook functions at various points within the kernel code (Section 4.1.2).
3. **Generic Security System Call**: Adds a generic security system call (Section 4.1.3).
4. **Module Registration and Unregistration**: Provides functions to allow kernel modules to register and unregister themselves as security modules (Section 4.1.4).
5. **Capabilities Logic**: Moves most of the capabilities logic into an optional security module (Section 4.1.5).

#### 4.1.1 Opaque Security Fields
Opaque security fields are void* pointers, enabling security modules to associate security information with kernel objects. Table 1 shows the kernel data structures modified by the LSM kernel patch and the corresponding abstract objects.

The setting of these security fields and the management of the associated security data are handled by the security modules. LSM provides the fields and a set of calls to security hooks that can be implemented by the module to manage the security fields as desired. For most kinds of objects, alloc_security and free_security hooks are defined, permitting the security module to allocate and free security data when the corresponding kernel data structure is allocated and freed. Other hooks are provided to permit the security module to update the security data as necessary, e.g., a post_lookup hook that can be used to set security data for an inode after a successful lookup operation.

It is important to note that LSM does not provide any locking for the security fields; such locking must be performed by the security module.

Since some objects will exist prior to the initialization of a security module, even if the module is built into the kernel, a security module must handle pre-existing objects. Several approaches are possible:
- **Ignore Pre-Existing Objects**: Treat them as being outside of the control of the module, controlled only by the base Linux access control logic.
- **Traverse Kernel Data Structures**: Set the security fields for all pre-existing objects during module initialization. This approach requires careful handling to ensure all objects are updated and appropriate locking is performed.
- **Test for Pre-Existing Objects**: Set the security field for pre-existing objects on each use when needed.

#### 4.1.2 Security Hook Functions
Security hook functions are inserted at various points within the kernel code to mediate access to kernel objects. For example, Figure 3 shows the vfs_mkdir kernel function with one security hook call to mediate access and one security hook call to manage the security field. The first hook call, security_ops->inode_ops->mkdir, can be used to control the ability to create new directories. If the hook returns an error status, the new directory will not be created, and the error status will be propagated to the caller. The second hook call, security_ops->inode_ops->post_mkdir, can be used to set the security field for the new directory's inode structure. This hook can only update the security module's state and cannot affect the return status.

Although LSM also inserts a hook call into the Linux kernel permission function, the permission hook is insufficient to control file creation operations because it lacks potentially important information, such as the type of operation and the name and mode for the new file. Similarly, inserting a hook call into the Linux kernel permission function is insufficient for controlling file creation operations due to the lack of essential information.

## 5. Operational Status
This section describes the operational status of LSM, including testing, performance overhead, and modules built for LSM so far. Detailed information on the current status and performance metrics will be provided.

## 6. Issues and Future Work
This section addresses issues that arose during the development of LSM and outlines plans for future work. Detailed discussions on the challenges and future directions will be provided.

## 7. Related Work
This section describes related work in the field of access control and security frameworks. A comprehensive review of relevant literature and projects will be provided.

## 8. Conclusions
This paper presents the design and implementation of the Linux Security Modules (LSM) framework, a lightweight, general-purpose access control framework for the mainstream Linux kernel. LSM enables the implementation of various access control models as loadable kernel modules, providing a flexible and efficient solution with minimal impact on the Linux kernel. The framework has been successfully adapted to support several enhanced access control implementations, including POSIX.1e capabilities, SELinux, and DTE. Future work will focus on addressing remaining challenges and expanding the functionality of the LSM framework.