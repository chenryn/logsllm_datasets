title:Information Leaks Without Memory Disclosures: Remote Side Channel
Attacks on Diversified Code
author:Jeff Seibert and
Hamed Okkhravi and
Eric S&quot;oderstr&quot;om
Information Leaks Without Memory Disclosures:
Remote Side Channel Attacks on Diversiﬁed Code∗
Jeff Seibert
MIT Lincoln Laboratory
244 Wood St.
Lexington, MA
Hamed Okhravi
MIT Lincoln Laboratory
244 Wood St.
Lexington, MA
PI:EMAIL
PI:EMAIL
Eric Söderström
MIT CSAIL
32 Vassar St.
Cambridge, MA
PI:EMAIL
ABSTRACT
Code diversiﬁcation has been proposed as a technique to mitigate
code reuse attacks, which have recently become the predominant
way for attackers to exploit memory corruption vulnerabilities. As
code reuse attacks require detailed knowledge of where code is in
memory, diversiﬁcation techniques attempt to mitigate these at-
tacks by randomizing what instructions are executed and where
code is located in memory. As an attacker cannot read the diversi-
ﬁed code, it is assumed he cannot reliably exploit the code.
In this paper, we show that the fundamental assumption behind
code diversity can be broken, as executing the code reveals infor-
mation about the code. Thus, we can leak information without
needing to read the code. We demonstrate how an attacker can uti-
lize a memory corruption vulnerability to create side channels that
leak information in novel ways, removing the need for a memory
disclosure vulnerability. We introduce seven new classes of attacks
that involve fault analysis and timing side channels, where each
allows a remote attacker to learn how code has been diversiﬁed.
Categories and Subject Descriptors
[Security and Privacy]: Systems Security—Information Flow Con-
trol; [Security and Privacy]: Software and Application Security
Keywords
Information Leakage, Code Diversity, Memory Disclosure, Side-
Channel Attacks, Address Space Layout Randomization
1.
INTRODUCTION
Decades of research have gone into solving the problem of mem-
ory corruption bugs [39]. These bugs are particularly notorious, as
they can often be exploited by a remote attacker to execute arbi-
trary code on the victim host, effectively compromising that ma-
∗This work is sponsored by the Defense Advanced Research
Projects Agency under Air Force Contract #FA8721-05-C-0002.
Opinions, interpretations, conclusions, and recommendations are
those of the author and are not necessarily endorsed by the United
States Government.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660309.
chine. Recently, defenses have progressed enough to prevent at-
tackers from being able to use such bugs to conduct code injection
attacks, where an attacker writes code into memory and then causes
it to be executed [39]. Attackers desiring to do malicious computa-
tions are instead forced to reuse code that already exists in the vul-
nerable binary [33]. Code reuse attacks have become a commonly
used technique for exploiting memory corruption bugs. However,
to conduct such attacks, detailed knowledge of the layout of code is
needed, including what code is in memory, and where is it located.
Code diversiﬁcation techniques have then recently been proposed
as a way to defend against code reuse attacks [18, 23, 45]. These
techniques preserve the high level semantics of the code, while
changing the low level details of the code. Diversiﬁcation tech-
niques include changing what speciﬁc machine-level instructions
are executed and changing where code is located in memory. These
techniques rely on the assumption that since the attacker cannot
read the code in memory, then he cannot know what code is there
nor where it is located, resulting in the attacker not being able to
reliably exploit the code.
Attackers have responded by utilizing entropy exhausting attacks
[34] and memory disclosure vulnerabilities [36, 38]. Entropy ex-
hausting attacks brute-force the memory space, leveraging the fact
that some diversiﬁcation techniques do not introduce enough ran-
domness into the system and thus can be fairly predictable. This
allows an attacker to eventually guess how code has been diversi-
ﬁed. However, as entropy is increased through more ﬁne-grained
diversiﬁcation, these attacks will be less effective.
Memory disclosure vulnerabilities leak information about the
code by allowing an attacker to directly read contents of memory
dynamically during runtime. This allows an attacker to know ex-
actly how code has been diversiﬁed without guessing. However,
these attacks often require ﬁnding two specialized vulnerabilities
in the same code. One vulnerability to read unintended memory,
facilitating memory disclosure, and another vulnerability to write
to unintended memory, facilitating the code reuse attack.
In this paper, we demonstrate that the fundamental assumption
underlying code diversity can be broken, allowing an attacker to
know how code has been diversiﬁed without having to read mem-
ory. We show how executing the code leaks information about the
code. Speciﬁcally, we illustrate and analyze how timing and fault
analysis side channels can be used to leak information about the
code. The attacks that we introduce expand the number of ways that
an attacker can exploit memory corruption bugs even if the code
has been diversiﬁed. These attacks also have signiﬁcant advan-
tages over previously discovered attacks. First, they allow leaking
information about the code without needing an entropy exhausting,
brute-force attack. Second, they only require a single vulnerability
that allows an attacker to write to unintended memory, removing
the requirement of a second vulnerability often needed for mem-
ory disclosures [36, 38]. As we will demonstrate, a single memory
corruption vulnerability can be all that is needed to both learn the
contents of memory and conduct a code reuse attack.
The attacks that we propose demonstrate that side channel at-
tacks can be used by a remote attacker on diversiﬁed code, allow-
ing information to be leaked about the code by both analyzing the
output of the execution and timing the execution. Side-channel at-
tacks have a long history of being used to leak secret information,
however, mostly in the context of learning secret data. Most promi-
nently, side channels have been used to subvert cryptographic ap-
plications that operate on some secret key [10, 28, 43]. Many types
of side channels have been found and shown to be effective in re-
covering secret keys. These side channels include timing of ex-
ecution [9, 10, 12, 27] and caches [2, 8, 41, 46], and analysis of
power [24, 28, 32], acoustics [17, 42] and faults [5, 14, 20, 43].
The same side channels that can be applied to computationally
secure cryptography can be applied to code diversiﬁcation because
they both have a similar security model. Both code diversiﬁcation
and computationally secure cryptography have been researched due
to provably secure techniques being too impractical to implement
and deploy.
Instead, they fundamentally rely on randomization
schemes that require secrets to be kept. However, these secrets are
exposed when actual computation happens. The difference being
that with code diversiﬁcation the secret is the code instead of data.
Our ﬁndings reveal that information leak vulnerabilities may be
even more plentiful and easier to ﬁnd than what is commonly be-
lieved today [39]. Furthermore, code diversiﬁcation only random-
izes the low level details of the code, but by necessity needs to
maintain the high level semantics of the code. We demonstrate that
an attacker can leverage his knowledge of high level semantics of
the code to learn how the low level details have been changed.
The contributions of this paper include:
• We introduce new classes of side channel attacks that result in in-
formation being leaked about diversiﬁed code. We show how lever-
aging memory corruption vulnerabilities through overwriting data
variables, data pointers, and code pointers can all reveal informa-
tion about the code through fault analysis and timing side channels.
We introduce three fault analysis attacks and four timing attacks.
For each attack, we describe its capabilities and limitations.
• We evaluate how effective different side channels are in determin-
ing how code has been diversiﬁed. As different vulnerabilities will
allow different information leaking capabilities, we conduct exper-
iments to determine how useful these capabilities are in identifying
real code. As libc is linked to nearly every program, we measure
aspects of it such as timing, return values, and instruction locations.
We ﬁnd that knowing such information can often reveal how code
has been diversiﬁed, and depending on the information leak, can
allow the attacker to ﬁnd up to 97% of gadgets contained in libc.
• We demonstrate a side channel attack on a vulnerable Apache
web server and show that with a single vulnerability that is a buffer
overwrite, we can leak enough information to execute practical,
malicious payloads. It is widely believed that to leak enough infor-
mation to defeat the ubiquitously deployed ASLR an extra memory
disclosure vulnerability is needed. However, we show how a mem-
ory corruption vulnerability can be used to gain the same informa-
tion and then be used to conduct a code reuse attack.
The rest of the paper is organized as follows. We discuss re-
lated work in §2. We introduce our side channel attacks in §3 and
demonstrate how effective different side channels are in §4. We
present a framework for incrementally leaking information using
side channels in §5 and demonstrate a practical side channel attack
in §6. We discuss potential defenses in §7 and conclude in §8.
2. RELATED WORK
2.1 Code Diversiﬁcation
Leveraging diversity as a means of mitigating memory corrup-
tion bugs has been utilized for many years [15]. Recently though,
with the rising prevalence of code reuse attacks, many techniques
have been proposed to diversify code. Address Space Layout Ran-
domization (ASLR) [40] is deployed in most modern operating
systems today, where the base addresses of the stack, heap, and
libraries are randomized. However, most implementations do not
randomize the location of the executable [34]. Several techniques
have then been proposed to complement ASLR.
Some works have focused on diversifying binaries at the instruc-
tion level, where no source code or debugging information is avail-
able. Pappas et al. [31] ﬁnd instructions in the code that can be
replaced by other, equivalent instructions. This modiﬁes many use-
ful instruction sequences that an attacker might use to conduct his
attack, without increasing the size or signiﬁcantly increasing ex-
ecution time of the binary. Hiser et al. [19] build a virtual ma-
chine that allows instruction level randomization, where each in-
struction can be placed randomly throughout memory. The virtual
machine keeps track of the order in which instructions should be
executed, and fetches and decodes them as they are needed. Home-
scu et al. [21] focus on designing a library that hooks into just-in-
time (JIT) compilers and randomizes their emitted code by insert-
ing NOP instructions randomly.
Other works have focused on the randomization of function or
basic block locations, which is also called ﬁne-grained ASLR. Kil et
al. [26] propose to randomize the order of functions in the code and
ﬁnd that it has very low performance overhead. Wartell et al. [45]
diversify at the basic block level, and instrument code to randomly
place basic blocks every time the code is executed.
Compiler based techniques have also been proposed for diversi-
ﬁcation of code. Onarlioglu et al. [29] propose an approach which
inserts NOP instructions in the code to correct the alignment and
prevent unaligned free-branch instructions used in code reuse at-
tacks. Franz et al. [16, 23] have built NOP insertion into LLVM,
where NOPs are randomly placed throughout the code. Guiffrida et
al. [18] also modify the LLVM compiler framework to cause func-
tions to be randomly permuted and a random amount of padding to
be inserted between functions.
2.2 Attacks on Diversiﬁed Code
Several attacks have also been proposed to thwart code diversi-
ﬁcation. Entropy exhausting attacks [34] have been shown to de-
feat ASLR when applications are restarted after crashing and the
amount of entropy in the system is small, as an attack can brute-
force the memory space. The BROP attack [6] demonstrates that
information gained from detecting if a process crashes or not can be
used to determine the locations of pop instructions and the location
of the send function. BROP allows an attacker to directly read
a closed source binary, as a copy of the in-memory binary is sent
to the attacker. Such attacks can typically only be conducted on
systems where repeated crashing goes undetected, the application
is restarted after crashing, and memory is not re-randomized after
restarting. We present and demonstrate several attacks that do not
require crashing the application, thus can bypass such mitigations.
Most often used in practice today are memory disclosure vul-
nerabilities [38], which allow an attacker to read unintended parts
of the code or pointers on the stack or heap. Such vulnerabilities
allow attackers to read memory locations dynamically at runtime,
thus learn exactly how code has been randomized. However, to
effectively use a memory disclosure vulnerability to conduct an ex-
ploit, an attacker needs two vulnerabilities, one to read memory and
another to overwrite memory.
Snow et al. [36] show that a single memory disclosure vulner-
ability can be abused repeatedly to make ﬁne-grained ASLR in-
effective. They designed and built a JIT compiler where a single
payload can be run within a victim’s web browser scripting envi-
ronment to JIT compile a code reuse exploit. We note that while
their JIT compiler framework currently abuses a memory disclo-
sure vulnerability repeatedly, it could also be modiﬁed to use the
information leak attacks that we present in this paper, removing the
need for a second vulnerability.
Hund et al. [22] demonstrate that a local attacker can defeat ker-
nel space ASLR by leveraging cache and TLB-based side chan-
nels. Their work focuses on leaking where kernel code is located in
memory through measuring the execution time of memory accesses
without crashing the kernel. Our work differs as we demonstrate re-
mote side channel attacks that are not cache-based. Furthermore,
we demonstrate how both where code is located and what code has
changed can be leaked through actively inﬂuencing the program’s
execution. Techniques such as cache interface randomization [44]
can be deployed to mitigate cache-based side channels.
Another address leakage attack without a memory disclosure
vulnerability is proposed by Blazakis [7] which uses garbage col-
lection to leak addresses. In this attack, a number of objects are cre-
ated on the heap, some address guesses are placed on the stack, then
all references to the objects are removed. If the objects are deleted
after garbage collection the guesses were wrong and the procedure
continues from the beginning, otherwise one of the guesses is cor-
rect. This attack only applies to garbage collected environments.
2.3 Side Channel Attacks on
Cryptography Implementations
We review several kinds of cryptographic side channels that are
applicable to code diversiﬁcation, with an emphasis on the ones
that can be conducted by remote attackers.
Timing. Cryptography implementations are often optimized to
forgo certain operations when unnecessary, to reduce performance
costs. These optimizations are usually dependent on the secret key,
thus different execution paths will be taken for different keys. As
different keys will cause different execution times, an attacker can
time execution and use that information to infer the key. Many
works have shown that real implementations are susceptible to such
attacks and that they are not trivial to eliminate [9, 10, 12, 27].
Similarly, we will demonstrate how an attacker can use the time of
execution as a way to infer how code has been diversiﬁed.
Fault Analysis. Cryptographic systems have been analyzed un-
der the premise that an attacker that has physical access can control
the environment of the device. Speciﬁcally, by controlling aspects
such as temperature and power supply voltage an attacker can in-
duce a fault in the device [5, 14, 20, 43]. Typically, these attacks
can force bits to ﬂip during the cryptographic computation process.
The output can then be analyzed, and from this information the
attacker can deduce the secret key. In this work, we take advan-
tage of the memory corruption bug to similarly force memory to
change. However, the major difference being that the attacker no
longer needs to have physical access to cause memory to change.
Caches. Cache hits and misses leak information about the data
and code recently accessed by a process. Since cache hits can
shorten execution time respectively, an attacker can measure exe-
cution time and infer something about the memory being accessed.
These capabilities have been shown to allow secret information
such as cryptographic keys to be discerned by a local attacker [2,
8, 41, 46]. As mentioned earlier, cache attacks have been shown to
allow a local attacker to defeat kernel space ASLR [22].
Physical Access. Numerous side channel attacks cannot be per-
formed remotely. This is due to the fact that they require measure-
ments that can only be done if the attacker has physical access to
the machine. These include power [24, 28, 32], electromagnetic
(EM) emanation [30], and acoustical [17, 42] analyses, where the
attacker needs to measure the power consumed, the EM ﬁeld pro-
duced, or the sound produced by the device, respectively. In all
cases, the instructions executed often have a distinct power, EM,
or sound measurement. An attacker conducting cryptanalysis then
needs to infer what secret key caused that sequence of instructions
to execute. However, to discern how code was diversiﬁed simply
learning what instructions were executed could be sufﬁcient.
3. SIDE CHANNEL ATTACKS ON
DIVERSIFIED CODE
Code reuse attacks leverage that there is a known mapping be-
tween memory locations and gadgets. Code diversiﬁcation tech-
niques break this assumption by rearranging the mapping. Specif-
ically, these techniques can change where in memory the code re-
sides (e.g., ASLR [40], function reordering [18]) and they can change
what machine-level instruction a memory address contains (e.g,
NOP insertion [23], instruction substitution [31]). To rebuild the
mapping, the attacker then must either choose a memory address
and determine what gadget resides there, or choose a gadget and
determine where in memory it resides. Different side channel at-
tacks can accomplish these two tasks.
To conduct a side channel attack, an attacker needs to be able to
receive feedback from a victim. This requires that the remote at-
tacker be able to interact with the program through a networked or
scripting environment. In a networked environment, a remote at-
tacker will interact directly with the program and can receive some
information through the network. In a scripting environment, a re-
mote attacker can send a script which conducts side channel attacks
and possibly JIT compile an exploit [36] after discerning enough
information. These are similar requirements to previous entropy
exhausting and memory disclosure attacks.
The type of side channel attack that can be conducted will largely
depend on the vulnerability itself and the gadgets that are available
to an attacker. Some vulnerabilities will be better at leaking infor-
mation than others. This will often depend on what the high level
semantics of the code are, whether the vulnerability allows modi-
fying variables, data pointers or code pointers, and how an attacker
can repurpose the code to leak information about the code. Further-
more, if an attacker has access to particular gadgets, even a small
number of them, he can use them to build an information leak at-
tack. While the example code snippets we present later are in a nor-
mal control ﬂow paradigm, they could also be created using return-
oriented programming (ROP) or other code reuse paradigms [11].
Utilizing a memory corruption vulnerability brings with it the
possibility of causing crashes. An attacker may or may not be able
to tolerate crashes. Some attacks can typically only be conducted
on code that tolerates crashes by restarting [34]. Other code, such
as the kernel, cannot tolerate crashes at all [22]. Different memory