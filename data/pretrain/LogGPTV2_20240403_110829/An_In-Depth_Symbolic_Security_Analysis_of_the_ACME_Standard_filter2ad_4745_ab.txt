more than 16,000 lines of F‚òÖ code and is one of the largest and
most in-depth analyses of a cryptographic protocol standard in the
literature.
2 DY‚òÖ: SYMBOLIC SECURITY ANALYSIS IN F‚òÖ
We here give a brief overview of DY‚òÖ sufficient to follow the rest
of the paper and refer the reader to [11] for details, to [13] for a
tutorial-style introduction, and to [49] for more information on the
umbrella project REPROSEC.
A Global Trace of Execution. DY‚òÖ models the global interleaved
execution of a set of protocol participants (or principals) as a trace
of observable protocol actions (or entries). As a principal executes
a role in some run of a protocol, it can send and receive messages,
generate random values, log security events, and store and retrieve
its session state, and each of these operations either reads from or
extends the global trace.
In F‚òÖ syntax, the global trace is encoded as an array of entries:
type entry =
| RandGen: p:principal ‚Üí b:bytes ‚Üí l:label ‚Üí u:usage ‚Üí entry
| SetState: p:principal ‚Üí v:array nat ‚Üí s:array bytes ‚Üí entry
| Message: s:principal ‚Üí r:principal ‚Üí m:bytes ‚Üí entry
| Event: p:principal ‚Üí ev:string ‚Üí ps:list bytes ‚Üí entry
| Compromise: p:principal ‚Üí sid:nat ‚Üí version:nat ‚Üí entry
type trace = array entry
Each trace index can be seen as a timestamp for the corresponding
entry. An entry RandGen p b l u at index i indicates that a princi-
pal p generated a random value b at i with a secrecy label l and
intended usage u (we discuss labels and usages later). The entry
SetState p v s indicates that principal p stored an array of values
s containing the current states of its active sessions (numbered
0..length(s)‚àí1), where the current version number of each session
is recorded in v. The entry Message s r m says that a message m
was sent on the network (ostensibly) by principal s for principal r.
The entry Event p ev ps indicates that a principal p logged a secu-
rity event ev with parameters ps. The dynamic compromise event
Compromise p sid version says that the attacker has compromised
a specific version of a session sid stored by principal p (and hence
can obtain the corresponding session state).
Protocol Code in the DY Effect. The protocol code for each prin-
cipal cannot directly read or write to the trace, but instead must
use a typed trace API that enforces an append-only discipline on
the global trace using a custom computational effect called DY.
For example, the API provides a function gen for generating new
random values with the following type:
val gen: p:principal ‚Üí l:label ‚Üí u:usage ‚Üí DY bytes
(requires (ùúÜ t0 ‚Üí‚ä§))
(ensures (ùúÜ t0 r t1 ‚Üí match r with
| Error _‚Üí t0 == t1
| Success v ‚Üí len t1 = len t0 + 1 ‚àß entry_at (len t0) (RandGen p v l u)))
The pre-condition of the function (denoted by requires) is ‚ä§, indi-
cating that it is satisfied in all input traces t0. The post-condition is
stated in terms of the input trace t0, output trace t1 and the return
value r. It says that if the function gen successfully returns (without
an Error) then the trace has been extended by the corresponding
RandGen entry; otherwise, the trace is unchanged.
Functions annotated with the DY effect are total (i.e., they always
terminate) but they can return errors. They can call pure (side-
effect free) functions like crypto primitives, or read entries from the
trace, or add new entries at the end of the trace, but cannot do any
other stateful operations. The DY‚òÖ trace API offers a set of base
functions in the DY effect that higher model layers (see below) build
upon. In addition to gen above, it provides functions to send and
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2603receive messages, store and retrieve states, and log security events.
Using these functions, and a library of functions for cryptography
and bytes manipulations, we can build stateful implementations of
protocols like ACME, as we will see in later sections.
A Symbolic Cryptographic API. DY‚òÖ provides a library for the
manipulation of bytes. The interface of this library treats bytes as
abstract using the type bytes and provides functions for creating
constant bytes, concatenating and splitting bytes, and calling vari-
ous cryptographic functions on bytes such as public-key encryption
and signatures, symmetric encryption and message authentication
codes, hashing, Diffie-Hellman, and key derivation. For example,
the API for public-key signatures is as follows:
val vk: sk:bytes ‚Üí bytes
val sign: sk:bytes ‚Üí msg:bytes ‚Üí bytes
val verify: pk:bytes ‚Üí msg:bytes ‚Üí sg:bytes ‚Üí bool
The function vk computes the public verification key corresponding
to a private signature key; sign creates a signature given a signing
key and a message; verify checks a signature over a message using
the verification key.
The library interface also provides a series of functional lemmas
relating to these functions, stating, for example, that decryption
is an inverse of encryption, or that splitting concatenated bytes
returns its components, or (as depicted below) that signature verifi-
cation always succeeds on a validly generated signature.
val verify_sign_lemma: sk:bytes ‚Üí msg:bytes ‚Üí
Lemma (verify (vk sk) msg (sign sk msg) == true)
This cryptographic API is generic and can be implemented in many
ways, including by calling concrete cryptographic libraries. DY‚òÖ
provides a symbolic implementation of bytes as an algebraic data
type. Each function is either implemented as a constructor or a
destructor of this type. For example, the function call sign sk msg
is implemented using a constructor Sign sk msg of the bytes type,
whereas verify is implemented by pattern matching over the in-
put signature to inspect whether it has the form Sign sk msg for
the corresponding signing key. This kind of symbolic encoding of
cryptography is originally due to Needham and Schroeder [47],
and forms the basis for all symbolic protocol analyses, including
ProVerif [20], Tamarin [45], and prior refinement type systems [16].
Note, however, that this symbolic model is hidden behind the
abstract cryptographic API, and hence is invisible to any protocol (or
attacker) code that uses this library. Such code can only manipulate
bytes by using the functions in the interface; it cannot, for example,
extract the signing key from a signature or invert a hash function.
The Dolev-Yao Attacker. The symbolic Dolev-Yao active network
attacker [26] is modeled as an F‚òÖ program that is given full access
to the cryptographic API and limited access to the global trace
API. It can call functions to generate its own random values (by
calling gen), send a message from any principal to any principal, and
read any message from the trace. Notably, it cannot read random
values or events from the trace, and a priori it cannot read the
session states stored by any principal. However, the attacker is
given a special function that it can call at any time to add an entry
Compromise p sid version to the trace. Thereafter, the attacker can
retrieve the compromised version of the state from the trace.
Of course, the attacker can also call any function in the cryp-
tographic API using bytes it has already learned to compute new
messages that it can then insert into the trace, causing honest prin-
cipals can receive them. Furthermore, each protocol model may
provide the attacker with an additional API that it may use to initi-
ate and control protocol sessions at both honest and compromised
principals. The predicate attacker_knows_at index b says that the
attacker can derive bytes b at a given index in the global trace, and
hence it characterizes the attacker‚Äôs knowledge.
Symbolic Debugging. Code written in DY‚òÖ can be executed sym-
bolically to obtain traces that can be printed and inspected for
debugging. This kind of execution is invaluable to test the model
and ensure that it behaves as expected. In particular, we can ensure
that there isn‚Äôt a bug in the protocol code that prevents protocol
runs from finishing. Furthermore, we can write example attacker
code and test potential attacks against our protocol implementation.
Of course, the goal of verification is to ensure that no such attacker
program can violate the intended security goals of the protocol.
Security Goals as Trace Properties. The security goals of each
protocol are stated in terms of reachable global traces. To prove
that some instance of bytes b is kept secret by a protocol, we ask
if it is possible for the attacker to use some combination of calls
to the crypto API, trace API, and the protocol API such that in
the final trace t, the attacker knows b. Protocol authentication
properties are stated in terms of correspondences between events
logged at different principals. For example, we may ask that in all
reachable traces, if a principal p ends a session with some peer
principal p' by logging the event Event p "end"[p',x,...] at index i,
then at some index j < i, the principal p' must have logged an event
Event p' "begin"[p,x,...] with matching parameters. This way of
encoding authentication properties as correspondences between
events is similar to other symbolic analysis methods and is origi-
nally due to Woo and Lam [55].
The main proof methodology for proving security goals stated
as trace properties is to establish an invariant over all reachable
traces and prove that this invariant implies the desired goals. In
particular, we need to prove that all functions that can modify
the trace, either on behalf of honest protocol code or the attacker,
preserve the invariant. Stating a complete global invariant that
captures all protocol runs is challenging and time-consuming since
a large part of the invariant typically involves generic assumptions
about the well-formedness of bytes and the secrecy of keys. Hence,
DY‚òÖ offers a modular proof methodology, where programmers only
need to define and prove local protocol-specific session invariants
and security goals, and the framework fills in generic security
invariants that are proved once-and-for-all for all protocols.
DY‚òÖ defines a second layer of labeled APIs for cryptography
and stateful code as well as a second computational effect DYL on
top of the DY effect that enforces a global trace invariant called
valid_trace. Functions in the trace API and with the DYL effect take
valid_trace as both pre- and post-condition. The invariant consists
of several components, some generic and some that have to be
defined for each protocol. We describe these components below.
Secrecy Labels and Usage Predicates. The labeling predicate
has_label i b l says that a bytes b has a secrecy label l at trace index
i. Each bytes is assigned a unique label that indicates who can read
it. For example, a label CanRead [P p1; P p2] indicates a secret that
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2604only the principals p1 and p2 are allowed to read, whereas the
label Public indicates that anyone can read it. Secrecy labels form a
lattice, where can_flow i l1 l2 says that the label l1 is equal or less
strict than the label l2 at trace index i. In particular, Public flows to
all other labels, and CanRead [P p] can flow to Public at index i if
Compromised p sid v occurs in the trace at or before i.
The labeled APIs enforce a labeling discipline that ensures that
secret values never flow to public channels where the attacker can
read them. In particular, the valid_trace invariant states that all
network messages must have the label Public, and all states stored
at a principal p must flow to CanRead [P p]. If a secret value has
to be sent over the network, it must first be encrypted with a key
whose label is at least as strict as the message‚Äôs label. We refer the
reader to [12] for the full set of labeling rules.
In addition to secrecy labels, the labeled APIs also enforce usage
pre-conditions. Each key is assigned an intended usage, so for
example, a signature key cannot be used as an encryption key.
Furthermore, each key is assigned a usage predicate controlling
what kinds of messages it may be used to encrypt or sign. Of course,
these restrictions only apply to honest principals. For example, the
labeled API for the signature and verification functions is as follows:
sign_key i (CanRead [P p]) ‚Üí verify_key i (CanRead [P p])
val vk: i:nat ‚Üí p:principal ‚Üí
val sign_pred: i:nat ‚Üí p:principal ‚Üí msg:bytes ‚Üí pred
val sign: i:nat ‚Üí p:principal ‚Üí sign_key i (CanRead [P p]) ‚Üí
val verify: i:nat ‚Üí p:principal ‚Üí verify_key i (CanRead [P p]) ‚Üí m:msg i Public ‚Üí
m:msg i Public{sign_pred i p m} ‚Üí msg i Public
sig:msg i Public ‚Üí b:bool{b =‚áí (compromised i p ‚à® sign_pred i p m)}
In this API, signature keys are now labeled with a secrecy label
CanRead [P p] corresponding to some principal p. The correspond-
ing verification keys are Public, and we additionally annotate them
with the label of the corresponding signature key. The predicate
sign_pred is a usage predicate that each protocol defines to indicate
what kinds of messages may be signed in the course of the protocol.
This predicate is then used as a pre-condition for sign, ensuring
that protocol code does not accidentally call sign with a message
that does not conform to sign_pred. Conversely, if verify succeeds
then the API guarantees that the signature must be valid, and hence
the signed message must satisfy sign_pred, unless the signature
key was compromised by the attacker.
Protocol State Invariants and Security Goals. Using secrecy
labels and usage predicates, the labeled APIs ensure that the only
messages that may be sent out on the network obey the label-
ing discipline. In addition, each protocol defines a state invariant
state_inv p v s that must hold for each state that a principal tries to
store by adding an entry SetState p v s into the global trace. This
invariant typically records the secrecy labels of all the values stored
in the state as well as any integrity properties known about these
values at the current stage of the protocol. In particular, the invari-
ant requires that the labels of all session states stored at p must
flow to CanRead [P p], that is, they must be readable by p.
To state the secrecy goals of a protocol, it is enough to annotate
a desired protocol value with a secrecy label and typecheck the pro-
tocol code against the labeled APIs. For well-labeled programs, DY‚òÖ
provides a secrecy lemma that states that bytes with a label (say)
CanRead [P p1; P p2] cannot be learned by the adversary unless p1
or p2 are compromised. To state authentication goals as event cor-
respondences, we define an event pre-condition event_pred p ev ps
that states when a principal p can issue Event p ev ps. For example,
we can ask that an event end [x] can only occur in a trace where
begin [x] has already occurred before. By typechecking, we ensure
that this predicate holds at each logged event, and hence that the
protocol authentication goal is preserved.
3 EXTENSIONS OF DY‚òÖ
We here describe our generic extensions to DY‚òÖ. We will later
use these extensions for our analysis of ACME, but all of these
extensions are of independent interest.
3.1 Authenticated Channels
So far, DY‚òÖ supports public messages only without any integrity
guarantees, i.e., the overall communication model assumes an ad-
versary who controls the network. Some protocols, such as ACME,
assume as a setup assumption that principals can exchange certain
messages in an authenticated way. If a party receives such an au-
thenticated message, it has the guarantee that the sender claimed in
the message indeed sent the message and it has not been modified in
transport ‚Äì jumping ahead, our formalization is much broader than
this. Note that an adversary can still block authenticated messages
and learn the content of such a message.
To add authenticated messages to DY‚òÖ, we extend the basic
communication model as sketched in what follows.
type entry = |... | AuthMessage: s:principal ‚Üí r:principal ‚Üí m:bytes ‚Üí entry
val auth_send_pred: idx:nat ‚Üí s:principal ‚Üí r:principal ‚Üí m:bytes ‚Üí Type0
val auth_send: idx:nat ‚Üí s:principal ‚Üí r:principal ‚Üí m:msg idx public ‚Üí DYL nat
val auth_receive_i: idx:nat ‚Üí r:principal ‚Üí
(requires (ùúÜ t0 ‚Üí ... ‚àß auth_send_pred (len t0) s r m))
(ensures (ùúÜ t0 now t1 ‚Üí ... ‚àß is_auth_message_sent_at now s r m))
DYL (now:nat & s:principal & msg now public)
(requires (ùúÜ t0 ‚Üí ...))
(ensures (ùúÜ t1 (|now,s,m|) ‚Üí ... ‚àß (‚àÉ r'.
is_auth_message_sent_at idx s r' m ‚àß
(compromised idx s ‚à® auth_send_pred idx s r m))))
let valid_trace (tr:trace) = ... ‚àß
(‚àÄ (idx:nat) (s r:principal) (msg:bytes). i < len tr =‚áí
(entry_at idx (AuthMessage s r msg) =‚áí
(compromised idx s ‚à® auth_send_pred idx s r msg)))
We first have to extend the type for trace entries to include
entries for authenticated messages. These contain the sender (s),
the receiver (r), and the message (m). More importantly, to provide
guarantees for receivers of authenticated messages, we introduce
a predicate auth_send_pred. This predicate states properties of
an (authenticated) message sent by the sender to the receiver at
trace index idx. In a verification process, when the sender sends an
authenticated message, one has to prove that this message actually