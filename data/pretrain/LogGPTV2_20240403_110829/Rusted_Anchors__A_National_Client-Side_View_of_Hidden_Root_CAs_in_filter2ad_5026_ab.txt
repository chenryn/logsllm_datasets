### Hidden Root Certificates and Their Security Implications

#### Introduction
Hidden root certificates, which are not publicly visible, should be rejected during certificate chain verification as they do not appear in public root stores. However, these certificates can be imported into local root stores, either manually or through local software [58]. If misused, hidden root certificates can enable the interception and monitoring of secure connections using forged certificates [21].

The use cases of hidden root CAs (Certificate Authorities) differ fundamentally from those of trusted CAs, making it challenging to apply best security practices universally. For example, hidden root CAs used by malware are designed to intercept secure connections, and their use of weak keys and insecure algorithms is intentional. In contrast, self-built root CAs for enterprise networks and anti-virus software should adhere to security requirements to prevent compromise. To address this issue, our methodology (Section 3) categorizes hidden root CAs and certificates and discusses them separately.

#### Related Work
As the adoption of HTTPS increases, the community has focused on studying the security issues within the certificate ecosystem. Previous research has particularly examined the security threats posed by HTTPS interception. Studies by [21] and [67] analyzed dozens of client-end applications (e.g., antivirus software and proxies) that insert self-built root certificates and perform TLS interception. They uncovered several implementation flaws through code analysis. Additionally, Durumeric et al. provided further insights into HTTPS interception from a web-server perspective.

#### Methodology Overview

##### 3.1 Certificate Data Collection
Our study aims to identify hidden root certificates in use and evaluate their real-world impact when trusted by web clients (i.e., installed in local root stores). We collaborated with 360 Secure Browser, a popular PC browser based on Chromium with over 100 million monthly active users in China. Since 2018, 360 Secure Browser has maintained its own root certificate store, which is included in the browser. To help evaluate CAs in the wild, 360 Secure Browser collects certificate data from volunteer users who opt-in to the program. We received data collected from February 1, 2020, to June 30, 2020, for research purposes.

**Certificate Data Collection Procedure:**
When a volunteer user visits a website over HTTPS using 360 Secure Browser, the browser fetches and verifies the web server’s certificate chain. It uses underlying operating system APIs (e.g., CryptoAPI on Windows) for certificate verification. The APIs return a `STATUS_CODE` indicating any verification errors. If any bit in `STATUS_CODE` is set, the certificate chain is considered invalid, and the connection is terminated, displaying an error message to the user.

An `AUTHORITY_INVALID` bit indicates that the root certificate is not trusted by the client’s local root store. The browser also checks if the root certificate is part of the three large public root programs (Microsoft, Mozilla, and Apple), encoding the result in a `PUBLIC_TRUSTED` flag. This check is done by matching the public keys of root certificates and is not shown to users.

For ethical considerations, a certificate chain is collected only if `PUBLIC_TRUSTED` is unset or if any bit is set in `STATUS_CODE`. This means the browser only collects certificate chains linked to hidden root CAs or those considered invalid by the client’s operating system. Valid certificate chains signed by root CAs in the three public programs are not recorded but are counted for statistical purposes.

**Filtering Hidden Root Certificates:**
To filter root certificates from certificate chains, we use criteria from the X.509 RFC standard. A root certificate must meet the following conditions:
- The `cA` value is set to `TRUE`.
- The certificate includes a `basicConstraints` extension with `cA` set to `TRUE`.
- The certificate includes a `keyUsage` extension with the `keyCertSign` bit asserted.
- The distinguished names of the subject and issuer are non-empty and identical.
- If included, the `subjectKeyIdentifier` and `authorityKeyIdentifier` are identical.

We label a root certificate as hidden if it meets these criteria and the `PUBLIC_TRUSTED` flag is unset. If no root certificate is found in a chain, the record is removed from the dataset.

##### 3.2 Grouping Hidden Root Certificates
Our next research questions are “who owns the hidden root certificates” and “how are they currently operating.” Hidden root certificates can be held by various parties, such as local software and enterprise networks. One organization can create multiple root certificates with different public keys but similar subject names, often sharing the same properties.

**Inferring Certificate Ownership:**
Identifying the ownership of root certificates, even in public root programs, is challenging. Mozilla’s Common CA Database (CCADB) provides the most comprehensive and audited ownership information. However, hidden root CAs are not included in public datasets. We infer ownership by leveraging subject distinguished names, grouping certificates with identical `commonName`, `organization`, and `organizationUnit` fields.

**Identifying Subject Templates:**
CAs often generate multiple root certificates using subject templates. We use the Drain algorithm, designed for log parsing tasks, to discover these templates. Drain outputs 13 subject templates from 1.1 million hidden root certificates, with no false positives found during manual verification.

**Unsupervised Grouping:**
Hidden root certificates are grouped if they have identical, non-empty values of `commonName`, `organization`, and `organizationUnit` in their subject distinguished names, or if their subject distinguished names match the same template.

##### 3.3 Evaluation and Limitations
**Evaluating Hidden Root Certificates:**
We use the `PUBLIC_TRUSTED` flag to identify hidden root certificates and verify them against the Certificate Transparency (CT) database. Public CAs are required to submit all issued certificates to CT since June 2016. Out of 1.19 million hidden root certificates, only 6 were found in the CT database, which were falsely included due to expanded root stores. This confirms the effectiveness of the `PUBLIC_TRUSTED` flag.

**Evaluating Grouping Algorithm:**
We manually evaluated the Drain algorithm on a sample of 10,000 hidden root certificates and generated 11 subject templates. Drain identified all 11 templates, missing 2 from the larger dataset due to low sample representation. We believe Drain outputs correct subject templates with high confidence.

**Limitations:**
- Some hidden root CAs may not follow the X.509 standard, leading to potential omissions.
- Inferring ownership from subject distinguished names may not always reflect the real organizations.
- The use of timestamps as client IDs, while protecting privacy, may reduce accuracy.

#### Ethical Considerations
The primary ethical concern is the collection of certificate data from 360 Secure Browser users. The dataset is collected from volunteer users who opt-in to the program, with explicit consent and under the supervision of the company's legal departments. We also mitigate potential privacy risks by using timestamps as client IDs instead of PII.

By addressing these challenges, our study provides valuable insights into the hidden root CA ecosystem and its security implications.