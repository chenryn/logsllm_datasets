# 【技术分享】iOS 安全之针对 mach_portal 的分析

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。

## 作者信息
- 作者：[shrek_wzw@360涅槃团队](http://bobao.360.cn/member/contribute?uid=1224214662)
- 预估稿费：800RMB
- 投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 一、背景
Google Project Zero的Ian Beer在2016年12月中旬发布了一段利用代码，该代码能够在iOS 10.*上获取root shell权限。意大利的安全研究员Luca在此基础上添加了KPP绕过机制，从而实现了对iOS 10.*系统的越狱。本文将结合mach_portal的源码对其所利用的三个漏洞进行详细分析，并逐一解释每个步骤。

### Mach Port 概述
Mach Portal中的漏洞主要源于XNU内核对Mach Port处理不当。XNU内核提供了多种进程间通信（IPC）方法，其中一种就是基于消息传递机制的Mach IPC。Mach消息通过端口（Port）进行传递，一个端口只能有一个接收者但可以有多个发送者。向端口发送消息实际上会将消息放入队列中，直到接收者处理这些消息。

内核中有两个重要结构：`ipc_entry`和`ipc_object`。`ipc_entry`是进程指向特定`ipc_object`的条目，存在于各进程的ipc entry表中且相互独立。`ipc_object`代表ipc port或port set，实际是一个消息队列或内核对象（如task, thread等）。通常我们在编程时获得的Mach Port是一个32位无符号整数，表示ipc_entry在ipc entry表中的索引值。经过MIG转换后，在内核中可以从ipc_port得到实际的内核对象。

## 二、漏洞详情
mach_portal利用了三个关键漏洞：CVE-2016-7637、CVE-2016-7644 和 CVE-2016-7661。接下来我们将逐一分析这些漏洞。

### 1. CVE-2016-7637
**漏洞描述**：内核对ipc_entry的user reference处理不当，导致被释放后的ipc_entry可能被重用，使得特权port可能被替换为攻击者控制的port。
**漏洞分析**：当进程接收到带有port的mach message时，调用流程如下：
- 在`ipc_right_copyout`函数中，将port right复制到当前task的ipc entry table中。
- `ie_bits`的低16位表示user reference，最大值为0xFFFF。
- 如果消息中包含同一port的0x10000个descriptor，则会导致ipc_entry的user reference达到上限并被多次释放。

**攻击方法**：利用此漏洞可以使高权限进程中的特权port的ipc_entry被释放，并用攻击者拥有的receive right的port重新占位，从而形成中间人攻击。

### 2. CVE-2016-7644
**漏洞描述**：在调用`set_dp_control_port`时缺乏锁机制导致的竞争条件，可能造成ipc_entry指向被释放的ipc_port，形成UAF。
**漏洞分析**：`set_dp_control_port`函数在释放send right时没有加锁，可能导致竞争条件。
**利用方法**：通过竞争条件使引用数减少，最终形成ipc_entry指向被释放的ipc_port，从而实现UAF攻击。

### 3. CVE-2016-7661
**漏洞描述**：powerd对于DEAD_NAME通知的处理存在缺陷，允许攻击者指定的port在powerd进程中被释放，导致拒绝服务或port替换。
**漏洞分析**：powerd创建pmServerMachPort用于接收服务消息，并允许接收DEAD_NAME通知。当接收到DEAD_NAME通知时，从not_port字段取出port值并调用`mach_port_deallocate`销毁。由于简单消息不涉及底层ipc_port引用计数的修改，攻击者可提供任意port参数，导致合法port被释放。
**攻击方法**：通过发送DEAD_NAME通知消息使powerd进程崩溃，然后在其重启时通过port中间人攻击窃取其task port，进而获取host priv port。

## 三、mach_portal 源码文件
mach_portal包含了在iOS 10.*设备上获取root shell的代码。以下是主要文件及其功能说明：

- **cdhash.c**：计算MachO文件的CodeDirectory SHA1 Hash。
- **disable_protections.c**：提升mach_portal进程至root权限，绕过沙盒限制。
- **drop_payload.c**：处理iosbinpack中的可执行文件，监听socket端口并生成shell。
- **jailbreak.c**：越狱流程入口。
- **kernel_memory_helpers.c**：获取kernel task port后，封装内核读写接口。
- **kernel_sploit.c**：利用`set_dp_control_port`竞争条件获取kernel task port。

以上是对mach_portal及其相关漏洞的详细分析，希望对读者有所帮助。