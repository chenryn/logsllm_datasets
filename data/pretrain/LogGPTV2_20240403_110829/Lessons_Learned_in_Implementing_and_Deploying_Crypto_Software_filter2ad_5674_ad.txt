years.    Because  of  this  problem,  a  good  basis  for  an
attack  on  an  application  based  on  a  version  of
SSLeay/OpenSSL before 0.9.5 is to assume the PRNG
was never seeded, and for versions after 0.9.5 to assume
it  was  seeded  with  the  string  (cid:147)string  to  make  the
random number generator think it has entropy(cid:148), a value
which  appeared  in  one  of  the  test  programs  included
with  the  code  and  which  appears  to  be  a  favourite  of
users trying to make the generator (cid:147)work(cid:148).
they  were  working  with 
The  fact  that  this  section  has  concentrated  on
SSLeay/OpenSSL seeding is not meant as a criticism of
the  software,  the  change  in  0.9.5  merely  served  to
provide  a  useful  indication  of  how  widespread  the
problem  of  inadequate  initialisation  really  is.    Helpful
advice on bypassing the seeding of other generators (for
example the one in the Java JCE) has appeared on other
mailing  lists.    The  practical  experience  provided  by
cases  such  as  the  ones  given  above  shows  how
dangerous it is to rely on users to correctly initialise a
generator (cid:151) not only will they not perform it correctly,
they(cid:146)ll  go  out  of  their  way  to  do  it  wrong.    Although
there 
the
SSLeay/OpenSSL  generator  itself,  the  fact  that  its
design  assumes  that  users  will  initialise  it  correctly
means that it (and many other user-seeded generators)
will in many cases not function as required.
is  nothing  much  wrong  with 
If  a  security-related  problem  is  difficult
for a crypto developer to solve, there is no
way a non-crypto user can be expected to
solve it.  Don(cid:146)t leave hard problems as an
exercise for the user.
In the above case the generator should handle not only
the  PRNG  step  but  also  the  entropy-gathering  step
itself, while still providing a means of  accepting user
optional entropy data for those users who do bother to
initialise  the  generator  correctly.    As  a  generalisation,
crypto  software  should  not  leave  difficult  problems  to
the  user  in  the  hope  that  they  can  somehow
miraculously come up with a solution where the crypto
developer has failed.
3.7 This Function can Never Fail
A  few  years  ago  a  product  was  developed  which
employed the standard technique of using RSA to wrap
a  symmetric  encryption  key  such  as  a  triple  DES  key
which  was  then  used  to  encrypt  the  messages  being
exchanged (compare this with the RSA usage described
in  section  3.5).    The  output  was  examined  during  the
pre-release  testing  and  was  found  to  be  in  the  correct
format, with the data payload appropriately encrypted.
Then one day one of the testers noticed that a few bytes
of  the  RSA-wrapped  key  data  were  the  same  in  each
message.    A  bit  of  digging  revealed  that  the  key
parameters  being  passed  to  the  RSA  encryption  code
were slightly wrong, and the function was failing with
an error code indicating what the problem was.  Since
this was a function which couldn(cid:146)t fail, the programmer
hadn(cid:146)t  checked  the  return  code  but  had  simply  passed
the  (random-looking  but  unencrypted)  result  on  to  the
next  piece  of  code.    At  the  receiving  end,  the  same
thing  occurred,  with  the  unencrypted  symmetric  key
being  left  untouched  by  the  RSA  decryption  code.
Everything  appeared  to  work  fine,  the  data  was
encrypted  and  decrypted  by  the  sender  and  receiver,
and  it  was  only  the  eagle  eyes  of  the  tester  which
noticed  that  the  key  being  used  to  perform  the
encryption  was  sitting  in  plain  sight  near  the  start  of
each message.
Another example of this problem occurred in Microsoft
Internet Information Server (IIS), which tends to fail in
odd  ways  under  load,  a  problem  shared  with  MS
Outlook,  which  will  quietly  disable  virus  scanning
when the load becomes high enough so that as much as
90% of incoming mail is never scanned for viruses [56].
In this case the failure was caused by a race condition
in which one thread received and decrypted data from
the  user  while  a  second  thread,  which  used  the  same
buffer  for  its  data,  took  the  decrypted  data  and  sent  it
back to the user.  As a result, when under load IIS was
sending  user  data  submitted  over  an  SSL  connection
back to the user unencrypted [57][58].  The fix was to
use  two  buffers,  one  for  plaintext  and  one  for
ciphertext,  and  zero  out  the  ciphertext  buffer  between
calls.    As  a  result,  when  the  problem  occurred,  the
worst which could happen was that the other side was
sent an all-zero buffer [9].
To avoid problems of this kind, implementations should
be designed to fail safe even if the caller ignores return
codes.  A straightforward way to do this is to set output
data to a non-value (for example fill buffers with zeroes
and  set  numeric  or  boolean  values  to  (cid:150)1)  as  the  first
operation in the function being called, and to move the
result  data  to  the  output  as  the  last  operation  before
returning to the caller on successful completion.  In this
way if the function returns at any earlier point with an
error  status,  no  sensitive  data  will  leak  back  to  the
caller, and the fact that a failure has taken place will be
obvious even if the function return code is ignored.
Make  security-critical  functions  fail
obviously  even  if  the  user  ignores  return
codes.
Another  possible  solution  is  to  require  that  functions
use handles to state information (similar to file or BSD
sockets  handles)  which  record  error  state  information
and prevent any further operations from occurring until
the  error  condition  is  explicitly  cleared  by  the  user.
This error-state-propagation mechanism helps make the
fact that an error has occurred more obvious to the user,
even if they only check the return status at the end of a
sequence of function calls, or at sporadic intervals.
3.8 Careful with that Axe, Eugene
The functionality provided by crypto libraries constitute
a powerful tool.  However, like other tools, the potential
for  misuse  in  inexperienced  hands  is  always  present.
Crypto  protocol  design  is  a  subtle  art,  and  most  users
who cobble their own implementations together from a
collection of RSA and 3DES code will get it wrong.  In
this  case  (cid:147)wrong(cid:148)  doesn(cid:146)t  refer  to  (for  example)
missing  a  subtle  flaw  in  Needham-Schroeder  key
exchange, but to errors such as using ECB mode (which
doesn(cid:146)t  hide  plaintext  data  patterns)  instead  of  CBC
(which does).
The  use  of  ECB  mode,  which  is  simple  and
straightforward  and  doesn(cid:146)t  require  handling  of
initialisation  vectors  (IVs)  and  block  chaining  and
synchronisation  issues  is  depressingly  widespread
among users of basic collections of encryption routines,
despite  this  being  warned  against  in  every  crypto
textbook.  Confusion over block cipher chaining modes
is  a  significant  enough  problem  that  several  crypto
libraries  include  FAQ  entries  explaining  what  to  do  if
the  first  8  bytes  of  decrypted  data  appear  to  be
corrupted,  an  indication  that  the  IV  wasn(cid:146)t  set  up
properly.
As  if  the  use  of  ECB  itself  wasn(cid:146)t  bad  enough,  users
often  compound  the  error  with  further  implementation
simplifications.    For  example  one  vendor  chose  to
implement  their  VPN  using  triple  DES  in  ECB  mode,
which  they  saw  as  the  simplest  to  implement  since  it
doesn(cid:146)t  require  any  synchronisation  management  if
packets  are  lost.    Since  ECB  mode  can  only  encrypt
data  in  multiples  of  the  cipher  block  size,  they  didn(cid:146)t
encrypt any leftover bytes at the end of the packet.  The
interaction  of  this  processing  mechanism  with
interactive  user  logins,  which  frequently  transmit  the
user name and password one character at a time, can be
imagined by the reader.
The issue which needs to be addressed here is that the
average  user  hasn(cid:146)t  read  any  crypto  books,  or  has  at
best  had  some  brief  exposure  to  portions  of  a  popular
text  such  as  Applied  Cryptography,  and  simply  isn(cid:146)t
able  to  operate  complex  (and  potentially  dangerous)
crypto  machinery  without  any  real  training.    The
solution to this problem is for developers of libraries to
provide  crypto  functionality  at  the  highest  level
possible, and to discourage the use of low-level routines
by  inexperienced  users.    The  job  of  the  crypto  library
should  be  to  protect  users  from  injuring  themselves
(and  others)  through  the  misuse  of  basic  crypto
routines.
Instead of (cid:147)encrypt a series of data blocks using 3DES
with  a  192-bit  key(cid:148),  users  should  be  able  to  exercise
functionality such as (cid:147)encrypt a file with a password(cid:148),
which  (apart  from  storing  the  key  in  plaintext  in  the
Windows  registry)  is  almost  impossible  to  misuse.
Although the function itself may use an iterated HMAC
hash  to  turn  the  password  into  a  key,  compress  and
MAC the file for space-efficient storage and integrity-
protection,  and  finally  encrypt  it  using  (correctly-
implemented)  3DES-CBC,  the  user  doesn(cid:146)t  have  to
know (or care) about this.
Provide crypto functionality at the highest
level  possible  in  order  to  prevent  users
from  injuring  themselves  and  others
through  misuse  of  low-level  crypto
functions  with  properties  they  aren(cid:146)t
aware of.
4. Conclusion
Although snake oil crypto is rapidly becoming a thing
of the past, its position is being taken up by a new breed
of  snake  oil,  naugahyde  crypto,  which  misuses  good
crypto in a manner which makes it little more effective
than  the  more  traditional  snake  oil.    This  paper  has
covered  some  of  the  more  common  ways  in  which
crypto  and  security  software  can  be  misused  by  users.
Each  individual  problem  area  is  accompanied  (where
possible)  by  guidelines  for  measures  which  can  help
combat  potential  misuse,  or  at  least  warn  developers
that  this  is  an  area  which  is  likely  to  cause  problems
with users.  It is hoped that this work will help reduce
the incidence of naugahyde crypto in use today.
Unfortunately the single largest class of problems, key
management,  can(cid:146)t  be  solved  as  easily  as  the  other
ones.  Solving this extremely hard problem in a manner
practical  enough  to  ensure  uses  won(cid:146)t  bypass  it  for
ease-of-use  or  economic  reasons  will  require  a  multi-
faceted approach involving better key management user
interfaces,  user-certified  or  provided  keys  of  the  kind
used  by  PGP,  application-specific  key  management
such  as  that  used  with  ssh,  and  a  variety  of  other
approaches  [59].    Until  the  key  management  task  is
made  much  more  practical,  (cid:147)solutions(cid:148)  of  the  kind
presented  in  this  paper  will  continue  to  be  widely
employed.
5. References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
(cid:147)The  Design  of  a  Cryptographic  Security
Architecture(cid:148), Peter Gutmann, Proceedings of the
1999  Usenix  Security  Symposium,  August  1999,
p.153.
(cid:147)cryptlib  Security  Toolkit(cid:148),  http://www.-
cs.auckland.ac.nz/~pgut001/-
cryptlib/.