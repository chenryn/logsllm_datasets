#
6.8% 2.5
3.6% 1.5
#
93.5
97.5
Crash
%
2.3%
1.4%
TABLE VII: Breakdown of breakage analysis results (# columns are
the average of two independent scores.)
Results. Table VII reports the site breakage assessments
as the average of two reviewers. The evaluation shows that
6Adblock Plus is conﬁgured with the same 8 ﬁlter lists that are used to
train ADGRAPH.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
772
ADGRAPH and ﬁlter lists are comparable in terms of site
breakage. ADGRAPH and ﬁlter lists do not cause any breakage
on 85.0% and 88.6% of the sites, respectively. The major
breakage rate (5.9%) is also on par with the ﬁlter lists (6.4%).
We also note that ADGRAPH’s breakage is much lower than
other commonly used privacy oriented browsers (e.g. 16.3%
for Tor Browser [59]).
D. Feature Analysis
Next, we discuss the intuitions behind some of the features
used in ADGRAPH, and evaluate their ability to distinguish
ad/tracking content from benign content. We describe some
of the features that are most useful (in terms of information
gain [48]) in ADGRAPH’s predictions.
Structural Features. Two of the structural features that
provided the highest information gain are a node’s average
degree connectivity and its parents’ attributes.
We expect AD nodes to have lower average degree con-
nectivity, since the interaction of these nodes is conﬁned to
only ad/tracking content, and thus appear in less connected
cliques. Conversely, we expect that NON-AD nodes appear
alongside, and interact with, functional content more, and thus
have higher average degree connectivity. Our results in Figure
3(a) support this intuition. AD nodes do indeed have have
lower average degree connectivity than NON-AD nodes.
We also expect the parents of AD nodes to have different
attributes than NON-AD nodes. This intuition came from
the expectation that AD nodes are more likely to follow
common practices and standards, such as those proposed by
the Interactive Advertising Bureau (IAB) [21]. For example,
IAB’s LEAN standard [18] requires ad related scripts to load
asynchronously (indicated by the presence of the async
attribute on a script node). We capture this intuition in a feature
by considering the attributes of each network requests’ parent
nodes (in our graph representation, the parent of a network
request might be the script element that initiates the network
request). Our results in Figure 3(b) support this intuition. The
parents of AD nodes with script tag name were 3 times
more likely to have the async attribute than NON-AD nodes.
We note that some structural features are more robust to ob-
fuscation than others. For example, to ﬂummox the classiﬁer,
it would be more challenging for an adversary to manipulate
a node’s average degree connectivity (which depends on all
of the node’s neighbors) than it would be to manipulate the
attributes of a parent node.
Content Features. Two of the content features that provided
the highest information gain are a node’s domain party and
its URL length.
We expect AD nodes to be more likely to come from
third-party domains than NON-AD nodes. We capture this
intuition in a boolean feature, recording whether the domain
of a network request differs from domain of the ﬁrst party
document. Figure 4(a) shows this intuition to be correct. More
than 90% of the ads came from third-party domains.
We also expect AD nodes to include a large number of query
parameters in their URLs. We capture this intuition by using a
1
0.8
0.6
0.4
0.2
s
t
s
e
u
q
e
r
f
o
n
o
i
t
c
a
r
F
0
0
1
s
t
p
i
r
c
s
c
n
y
s
a
f
o
n
o
i
t
c
a
r
F
0.8
0.6
0.4
0.2
0
AD
NON-AD
0.5
1
Ads
Non-Ads
(a) average degree connectivity
(b) async script
Fig. 3: Conditional distributions for structural features.
request’s URL length as a numeric feature. Figure 4(b) shows
this intuition to be correct. AD node URLs were on average
longer than NON-AD node URLs.
We again note that some content features are more robust
to ﬂummox the
to obfuscation than others. For example,
classiﬁer, it would be more challenging for an adversary to
switch ads/trackers from third-party to ﬁrst-party that it would
be to manipulate the length of a URL.
s
t
s
e
u
q
e
r
f
o
n
o
i
t
c
a
r
F
1
0.8
0.6
0.4
0.2
0
AD
NON-AD
First party
Third party
(a) domain party
1
0.8
0.6
0.4
0.2
s
t
s
e
u
q
e
r
f
o
n
o
i
t
c
a
r
F
0
0
AD
NON-AD
200
400
600
800
(b) length of URL
Fig. 4: Conditional distributions for content features.
Ablation Analysis. Next, we separately evaluate structural
and content features in terms of their contribution to AD-
GRAPH’s accuracy. To this end, we train additional classiﬁers
separately, one using only structural features, the other using
only content features. While structural features and content
features have comparable accuracy they provide complemen-
tary information, which when used together improve AD-
GRAPH’s accuracy. For example, excluding structural features
results in a decrease of 6.6% in precision, 8.7% in recall, and
2.7% in accuracy.
We also expect structural
features to be more robust
than content features. Structural features consider neighboring
graph structure of a node while content features only consider
a node in isolation. To manipulate the structural features, an
adversary would need to change the target node, its neigh-
bors, and subsequently their neighbors. Manipulating content
features would only require changing the target node.
Thus, we conclude that the graph-based representation of
ADGRAPH, as captured by structural features, contributes to
its accuracy and robustness.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
773
E. Tradeoffs in Browser Instrumentation
Recall
from Section III-B that ADGRAPH modiﬁes
Chromium to attribute DOM modiﬁcations to JavaScript code
units. This is different from most existing content blocking
tools that operate at the extension layer. ADGRAPH’s browser
instrumentation is a trade off; it gains attribution accuracy at
the cost of ease of distribution. This raises the question of
whether ADGRAPH can instead be implemented as a browser
extension on any web browser.
We investigate this question by implementing ADGRAPH
as a browser extension, using the best possible attribution
option available at the extension layer (JavaScript stack walk-
ing, discussed in Section II-C). We test the accuracy of the
best possible extension implementation of ADGRAPH by re-
crawling the Alexa-10k with a modiﬁed version of ADGRAPH,
using the same methodology described in Section IV-A. This
modiﬁed version of ADGRAPH uses JavaScript stack walking
to attribute DOM modiﬁcations to script units,
instead of
the Blink and V8 modiﬁcations. We then train and test ML
classiﬁer on the graphs constructed using JavaScript stack
walking.
We compare the accuracy of this best-possible-extension
implementation to our in-browser implementation of AD-
GRAPH. We ﬁnd that implementing ADGRAPH as a browser
extension signiﬁcantly reduces classiﬁcation accuracy. Imple-
menting ADGRAPH as a browser extension degrades precision
by 1.5%, recall by 16%, and accuracy by 2.3%. Thus, the
mistakes JavaScript stack walking makes in attribution lead to
more errors in classiﬁcation. We conclude that costs of imple-
menting ADGRAPH’s as a set of browser modiﬁcations (i.e.
difﬁculty in distribution) is more than offset by the beneﬁts
(i.e. increased classiﬁcation accuracy), and that ADGRAPH is
best implemented as Blink and V8 modiﬁcations.
F. Performance
We evaluate ADGRAPH’s performance as compared to stock
Chromium and Adblock Plus. ADGRAPH performs faster in
most cases than the most popular blocking tool, Adblock Plus,
and in many cases results in faster performance than stock
Chromium. This is the result of both careful engineering in
ADGRAPH’s implementation, and ADGRAPH’s instrumenta-
tion overhead (often) being more than offset by the network
and rendering savings gained by having to fetch and render
less page content (i.e. the content blocked by ADGRAPH).
To measure whether ADGRAPH is a practical blocking
solution, we compare the performance of ADGRAPH, stock
Chromium, and Chromium with Adblock Plus installed (using
Adblock Plus’s default conﬁguration) on the Alexa 1K. Our
simulated network uses a 10 Mbps downlink with a latency
of 100ms. We visit
the landing page of each website 10
times and record the average page load time (measured as
the difference between the DOM’s navigationStart and
loadEventEnd events). Figure 5 presents ADGRAPH’s page
load time compared to stock Chromium, and Chromium with
Adblock Plus.6
Resource Type
Image
Script
CSS
AJAX
iFrame
Video
ADGRAPH faster
24.59%
20.82%
6.47%
48.03%
37.66%
7.14%
Chromium faster
14.92%
17.96%
0.79%
36.14%
30.47%
6.20%
TABLE VIII: Comparison of average percentage of resources AD-
GRAPH blocks on sites where ADGRAPH outperforms Chromium,
and vise versa. For all resource types, ADGRAPH performs faster
when more resources are blocked.
1
0.8
0.6
0.4
0.2
s
e
t
i
s
b
e
w
f
o
n
o
i
t
c