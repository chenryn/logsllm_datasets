        int pgid;
        int session;    //sid
        int tty_nr;     
        int tpgid;
        unsigned int flags;
        long unsigned int minflt;
        long unsigned int cminflt;
        long unsigned int majflt;
        long unsigned int cmajflt;
        long unsigned int utime;
        long unsigned int stime;
        long int cutime;
        long int cstime;
        long int priority;
        long int nice;
        long int num_threads;
        long int itrealvalue;
        long long unsigned int starttime;
        long unsigned int vsize;
        long int rss;
        long unsigned int rsslim;
        long unsigned int startcode;
        long unsigned int endcode;
        long unsigned int startstack;
        long unsigned int kstkesp;
        long unsigned int kstkeip;
        long unsigned int signal;   //The bitmap of pending signals
        long unsigned int blocked;
        long unsigned int sigignore;
        long unsigned int sigcatch;
        long unsigned int wchan;
        long unsigned int nswap;
        long unsigned int cnswap;
        int exit_signal;
        int processor;
        unsigned int rt_priority;
        unsigned int policy;
        long long unsigned int delayacct_blkio_ticks;
        long unsigned int guest_time;
        long int cguest_time;
        long unsigned int start_data;   
        long unsigned int end_data;
        long unsigned int start_brk;    
        long unsigned int arg_start;    //参数起始地址
        long unsigned int arg_end;      //参数结束地址
        long unsigned int env_start;    //环境变量在内存中的起始地址
        long unsigned int env_end;      //环境变量的结束地址
        int exit_code; //退出状态码
    };
Read from the file and format it as a structure:
    struct proc_stat get_proc_stat(int Pid) {
        FILE *f = NULL;
        struct proc_stat stat = {0};
        char tmp[100] = "0";
        stat.comm = tmp;
        char stat_path[20];
        char* pstat_path = stat_path;
        if (Pid != -1) {
            sprintf(stat_path, "/proc/%d/stat", Pid);
        } else {
            pstat_path = "/proc/self/stat";
        }
        if ((f = fopen(pstat_path, "r")) == NULL) {
            printf("open file error");
            return stat;
        }
        fscanf(f, "%d ", &stat.pid);
        fscanf(f, "(%100s ", stat.comm);
        tmp[strlen(tmp)-1] = '\0';
        fscanf(f, "%c ", &stat.state);
        fscanf(f, "%d ", &stat.ppid);
        fscanf(f, "%d ", &stat.pgid);
        fscanf (
                f,
                "%d %d %d %u %lu %lu %lu %lu %lu %lu %ld %ld %ld %ld %ld %ld %llu %lu %ld %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %lu %d %d %u %u %llu %lu %ld %lu %lu %lu %lu %lu %lu %lu %d",
                &stat.session, &stat.tty_nr, &stat.tpgid, &stat.flags, &stat.minflt,
                &stat.cminflt, &stat.majflt, &stat.cmajflt, &stat.utime, &stat.stime,
                &stat.cutime, &stat.cstime, &stat.priority, &stat.nice, &stat.num_threads,
                &stat.itrealvalue, &stat.starttime, &stat.vsize, &stat.rss, &stat.rsslim,
                &stat.startcode, &stat.endcode, &stat.startstack, &stat.kstkesp, &stat.kstkeip,
                &stat.signal, &stat.blocked, &stat.sigignore, &stat.sigcatch, &stat.wchan,
                &stat.nswap, &stat.cnswap, &stat.exit_signal, &stat.processor, &stat.rt_priority,
                &stat.policy, &stat.delayacct_blkio_ticks, &stat.guest_time, &stat.cguest_time, &stat.start_data,
                &stat.end_data, &stat.start_brk, &stat.arg_start, &stat.arg_end, &stat.env_start,
                &stat.env_end, &stat.exit_code
        );
        fclose(f);
        return stat;
    }
Compared with the data we need to obtain, we can obtain the following data
ppid | Parent process id  
---|---  
pgid | Process Group id  
sid | Process session id  
start_time | The start time of the parent process.  
run_time | The time when the parent process has been running.  
## /proc/[pid]/exe
Obtain the path of the executable file through/proc/[pid]/exe, here
/Proc/[pid]/exe is a soft link pointing to an executable file, so the readlink
function is used to obtain the address pointed to by the soft link.
Note that if the file read by readlink has been deleted, one more file name
will be read. `(deleted)` However, the agent cannot delete the corresponding
string at the end of the file blindly. Therefore, you must pay attention to
this situation when writing server rules.
    char *get_proc_path(int Pid) {
        char stat_path[20];
        char* pstat_path = stat_path;
        char dir[PATH_MAX] = {0};
        char* pdir = dir;
        if (Pid != -1) {
            sprintf(stat_path, "/proc/%d/exe", Pid);
        } else {
            pstat_path = "/proc/self/exe";
        }
        readlink(pstat_path, dir, PATH_MAX);
        return pdir;
    }
## /proc/[pid]/cmdline
Obtain the startup command of the process startup, which can be obtained by
obtaining the content of/proc/[pid]/cmdline. There are two pits in this
acquisition.
  1. Because the length of the startup command is uncertain, to avoid overflow, you need to obtain the length first, apply for heap space with MPRI, and then read the data into the variable.
  2. All spaces and press enter in the/proc/self/cmdline file become `'\0'`?I don't know why, so I need to manually change, and several connected spaces will only become one `'\0'`?.
The method of obtaining the length here is stupid, but using fseek to directly
move the file pointer to the end of the file returns 0 each time. I don't know
what to do, so I can only do this first.
    long get_file_length(FILE* f) {
        fseek(f,0L,SEEK_SET);
        char ch;
        ch = (char)getc(f);
        long i;
        for (i = 0;ch != EOF; i++ ) {
            ch = (char)getc(f);
        }
        i++;
        fseek(f,0L,SEEK_SET);
        return i;
    }
Obtain the content of cmdline
    char* get_proc_cmdline(int Pid) {
        FILE* f;
        char stat_path[100] = {0};
        char* pstat_path = stat_path;
        if (Pid != -1) {
            sprintf(stat_path, "/proc/%d/cmdline", Pid);
        } else {
            pstat_path = "/proc/self/cmdline";
        }
        if ((f = fopen(pstat_path, "r")) == NULL) {
            printf("open file error");
            return "";
        }
        char* pcmdline = (char *)malloc((size_t)get_file_length(f));
        char ch;
        ch = (char)getc(f);
        for (int i = 0;ch != EOF; i++ ) {
            *(pcmdline + i) = ch;
            ch = (char)getc(f);
            if ((int)ch == 0) {
                ch = ' ';
            }
        }
        return pcmdline;
    }
# Summary
What is written here is only one of the most common and simple application-level hook methods. The specific implementation and code have been put in
[github](https://github.com/u2400/libc_hook_demo). At the same time, the code
on github is updated. The next article will share how to use LKM to modify
sys_call_table to hook system calls to implement HIDS hook.
# Reference articles
# Appendix 1
Here is a complete description of the specific meaning of each file in
the/proc directory. 
* * *