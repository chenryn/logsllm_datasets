“OK，在上一次迭代过程中我们做了些什么？出了什么岔子？哪些
地方做得好？我们学到了什么新的、可以在今后使用的经验，以便
避免错误或利用最佳实践？”那意味着变化是系统性地发生的，不
是随机或不定期发生的，是按照时间表发生的。这是时间驱动带来
的巨大好处。但是，我所说的“时间驱动"的意思是在每个周三或周
四或类似的时间中举行会议，而不是说：“OK，不管什么时候完
成，就算是完成了。”
Andrew：这样有助于你们控制项目进度吗？
217
---
## Page 219
Alex：它可以帮助你进入状态，找到节奏，你知道这是截正日期，
在截止日期之前没有经过测试、承诺和接受的东西都不在这个选代
中。即使工作还在进行中，现在也到了需要回顾和反省的时候了。
为什么我们在这三个任务上已经做了很多工作，但还是没有做完，
什么可供演示的东西都没有？也许任务比我们预计的要难，或者是
我那台该死的电脑总是死机。所以，解决方案将是完全不同的。一
是对剩余的工作重新进行估算：也许通过更多的分级，我们可以得
到更多、更小的任务，这样我们就不用被那些比我们当初预计的大
得多的任务搞得措手不及了。
到了下一个选代开始的时候，需要高级经理和其他利益相关者在那
里，这点很重要，因为这是他们做出变更的机会。此时他们可以设
置适合这个选代的优先级，可能需要去掉或推迟完成一些功能或任
务，把其他功能或任务提前，引入一个全新的功能，也可以说，很
不幸，某个听起来很好的想法此时无法带来帮助，所以不应当成为
交付物的一部分，以及诸如此类的东西。再次说明，这不是让你的
团队成员大吃一惊的、出乎意料的随机改变。这是有计划的。它是
可预测的。你不知道确切的更改时间，但是你知道它们是很可能要
改变的，因为底层业务的实际情况发生变化了。
Andrew：听起来好像你说为了确保团队成功并构建好的软件，很大
一部分工作不仅仅是确定经理或客户的期望，而且要管理团队本身
的期望。
Alex：说得很对。这有两个方面。一般地，工程师和开发人员以及
团队领导必须定期与渴望得到软件的人进行交谈。
Jenny：当你谈论期望并谈论满足客户的期望时，我想到了儿件事。
在我自己参加过的几个敏捷项目中，就是因为这两个因素犯过一些
愚蠢的错误。我以前有一些客户，虽然按照敏捷的要求参与到了整
个过程中，但是在不同的选代中决定大量地改变他们的想法，以致
我们必须重新编写正在开发的软件，也许在他们想到那些内容之
前，我们根本就不应当开始构建软件。
这是我要说的第一件事情。另外一件事是我在一个敏捷环境中工作
时遇到的，并发人员不大愿意约束自己的创造力，感到需要增加很
多锦上添花的功能，利益相关者从来也没有提出过这种要求，而且
也不需要这些东西，但是程序员们认为那是一些非常好的想法。因
218
---
## Page 220
为有些时候会产生更好的软件，所以人们一般不会就此说些负面的
话，但是这种做法几乎总是导致一些严重的质量问题。
Alex：是的。工程师们，特别是年轻、聪明但是做过的项目不多、
也没有留下伤痕的工程师们，一般都喜欢多做一些东西。我完全赞
成你的观点。我在加入Google时发现那里已经存在着一种很好的做
法，是我特别喜欢的一种做法。我在过去也曾尝试采取那样的做
法，但是除非已经形成了那样的文化，否则在现实世界中很难推
行：强制的代码评审。这种做法之所以在Google能够推厂起来，要
归功于Google的第一位雇员：CraigSilverstein。除非代码经过了检
查并由团队中的其他人批准，否则不准进入代码基础库。这不是人
们在20世纪70年代想象的那种结构化的代码评审，长时间的准备、
投影、白板或诸如此类的东西。
那实际上是一种轻量级的过程，特别适合于电子邮件或轻量级的基
于Web的工具。关键是，如果能够对变更集保持关注并不断地进行
代码评审，无论你是否直接参与了项目，都不会出现某些让你感到
十分意外的、影响代码基础库的变更。现在，我谈论的是在团队内
部的变更，例如你刚才提到的锦上添花的方面，这和客户提出的变
更不一样，是一个完全不同的问题。
Andrew：我完全理解那种代码评审如何有助于解决Jemny提到的第
二个问题，那种处理方式，那个锦上添花的问题。她提到的第一件
事情我也看到过，那应该怎么处理呢？我还记看她所说的，她的团
队被业务人员毁掉了，他们要求做一些最开始根本没有提到的事
情。Jenmy的团队在那个项目中面临着严重的问题。客户出其不意地
完全改变了方向，他们不得不从头并始构建整个代码基础库。我敢
肯定她不是唯一一个遇到这种问题的人。对于这种问题有什么好的
敏捷方法吗？
Alex：并发团队可以归结为两个主要目的：并发正确的软件，以正
确的方式并发软件。我们谈论的很多内容是以正确的方式并发软
件。假设软件必须要做这样或那样的事情，然后把它开发出来。质
量要不错，稳定，性能要好，没有缺陷等。
但是也许更重要的是并发合适的软件：软件的功能集要让公司能够
成功。我发现如果你从来没有做过业务方面的事情，对于你来说，
要你做的那些变更似乎是些非常剧烈的变更，反复无常、很随意。
但是这些变更都是有意义的，除非你在一个管理得特别糟糕的公司
219
---
## Page 221
工作一—如果是这种情况，我建议你找一台好点的打印机去打印简
历。
如果你不是在一个糟糕的公司中，那你就要站在业务人员的角度看
待问题。脚下的世界在变化，为了满足业务的要求，他们只能那样
做。
在大多数敏捷编程学派中都有这样一个观点，但是我不是完全相
信：应当避免普适性。有些普适性会让你付出代价，但是有些普适
性实际上会节省时间。我来举一个有点傻的例子，一个计算被3除
所得余数的例程，做的是一个具体的任务，这个例程可能比一个能
够计算任何数字并将3作为变量传递的例程的成本要高得多。
所以如果你的观察力很敏锐，有着设计人员的观察力，或者稍微差
一点，有着实施人员那样的观察力，能够看到普适性在哪些地方是
免费的，甚至会让你的工作成本更低，那么你就可以成为拥抱变化
的一部分，准备着修改构建的类、模块、包和例程，让它们在不同
的情况中成为可配置的。
关键是，如果你的总工作量比从头并始做还要大，那这是一个必须
面对的糟糕的现实。如果存在可以复用的代码，那么这些代码实际
上是值得复用的。如果业务人员完全是随意的、反复无常的，浪费
了公司的金钱，浪费了你的时间也浪费了他们自己的时间，那你是
应当去打印简历了。但是常常地，他们处于一个特别有挑战性的、
困滩的和不断变化的世界中，他们已经尽力而为了。
Andrew：所有这些关于敏捷的讨论都让我想起了几年前发生的一件
事。我和Jemny在一家很有名气的公司做了一次关于改进软件开发过
程的讲座。在讲座结束时，我们和听众讨论敏捷开发，那是敏捷还
是新生事物。一位并发人员站了起来。显然他已经准备了一段时
间。他是一位身材高大、胡须灰白的人一—看上去很像是个呆板的
开发人员一—房间里的其他人对他显然是言听计从。他站了起
来.....Jenny，你还记着他当时是怎么说的吗？
Jenny：他说：“敏捷的意思是什么文档也不写，直接开始编码。”
Alex：是的，我有一个相当有名的同事，会为那个人的理论鼓掌叫
好。他叫SteveYegge，写的博客相当有名。他在西雅图地区工作。
我们只能说在技术层面上大家都有自己不同的看法。
220
---
## Page 222
在blogsphere中搜一下他的名字和"敏捷”，你会找到数百万的帖子，
他基本上都是在遣责整个思想，并解释为什么开发软件的唯一方法
基本上就是刚才那位并发人员所提倡的。只要并始编码就行了，其
他事情都是自己处理好。不要听我对他的理论的总结，可以去读读
他的帖子。那些帖子实际上写得很不错！我这么说是有点抬杠了，
但其中确实有一些例子能够证明他的观点。我最喜欢的一个例子是
你知道一个叫做Autodesk的公司吗？
Andrew：知道。
Alex：你是否感到奇怪，他们的业务与桌面（desk）有什么联系？
情况是这样的，他们本来想做一个办公室自动化应用软件。在
MicrosoftOfice或其他产品产生之前，他们想做一个自动化的桌面
系统。有几个人，是那个初创企业中的资深工程师，实际上并不是
非常喜欢办公自动化应用软件的想法，他们利用业余时间并发了一
个计算机辅助设计应用程序。
Andrew：他们就是这样构建了AutoCAD吗?
Alex：是的。业务人员说录入发票的软件有巨大的市场潜力，但是
他们认为做计算机辅助设计程序比要有趣得多。所以说“自动桌面”
（Autodesk）应用程序从来没有出现过，但是AutoCAD给世界带来
巨大冲击。那家公司没有改变他们的名字，名字虽然叫Autodesk，
但他们在计算机辅助设计领域非常成功，直到20多年后的今天。顺
便说一下，有一本非常好的书，是由这家公司的创始人之一写的，
描述了所有那些事情以及Autodesk的历史。当然也会有相反的例
子，团队中的人员以正确的方式做事情，但是到了最后发现并没有
为公司生产出任何可以拿到市场上的东西。那些叛逆的人，他们做
模型无关的东西...实际上是拯救了公司并为公司带来巨大成功。
但是基本上可以说，这就和某人在彩票上赚了1.37亿美元一样。可
能发生，但是你不能指望。
Andrew：这和那些典型的高度自治的项目有什么不同吗？
Alex：我认为，高度自治的项目实际上是得到了高层管理人员支持
的。团队和公司的其他人是隔绝开的，特别是中层管理人员。在大
公司中，中层管理人员的主要作用是防止任何变革的发生（如果你
221
---
## Page 223
和他们一起工作过，至少会发现情况似乎是这样的）。战壕里的优
秀工程师，很有趣的是还有一些高层管理人，实际上有富有远见
的，所以他们躲在角落来完成那些事情。这个项目，按照我从
Autodesk发布软件的历史所理解，实际上是完全由一些工程师自作
主张的。
另外一个例子是Microsoft的IE1，这个浏览器的第一个版本。有些
工程师看到新生的Internet风靡一时，认为Microsof也应当有一个浏
览器.....但是那些中层管理人员彻底封杀了那个愚蠢的想法。在浏
览器上是一分钱也赚不到的。突然间当时担任CEO的比尔·盖茨发出
了一个短信，说Internet就是一切，包括公司的前途，所有的事情都
将迅速改变。那些人在第二天就有一个多多少少可以使用的软件
了。
你同样可以把这件事情叫做高度自治的项目，但是同样地，你不能
指望它一定发生。如果你在一个糟糕的公司中工作，这可能是生存
下去的唯一途径。但是你知道，还存在其他公司。如果公司中的每
个人都朝着一个方向前进，如果我们都以这种方式为客户提供优秀
的软件并赚取利润，应当是没有必要躲起来做自己的事情的，相
反，你可以与其他所有人一起做。
Jenny：如果是在这样的环境中，你认为一个更加有条理、更加传统
的敏捷方法会更好用吗？
Alex：我想可能会的，因为变化的想法已深入人心，以致如果不这
样做就没有其他好的过程——比如说像Rational统一过程。持续选代
和对它们进行计时的想法、修复日期等在RUP中都是可选的——你
可以做这些事情，但它们不是过程的核心。这个过程的核心是画出
很多的图表，让不是“专家团队"的人也都能看懂。我认为很多团队
都喜欢生成厚厚的一文档，因为他们都在使用这些文档构筑一道
与组织内其他人隔并的墙，而这些地方可能需要责任心和透明度。
我有点挖苦人了，但是你知道我的意思是什么。
在开始编码之前编写大量的规格说明书一—哎呀！那是一种糟糕的
行为，你所说的程序员们基本上都会以另外一种方式作出过激的反
应：“大家都写了很多僵化的规格说明书，我们干脆什么都不写。”
在两者之间存在一个可行的中间方式，你知道吧？
第21章团队与工具
222