然而，只有当所有受事务影响的系统都使用同样的 **原子提交协议（atomic commit protocol）** 时，这样的分散式事务才是可能的。例如，假设处理讯息的副作用是传送一封邮件，而邮件伺服器并不支援两阶段提交：如果讯息处理失败并重试，则可能会发送两次或更多次的邮件。但如果处理讯息的所有副作用都可以在事务中止时回滚，那么这样的处理流程就可以安全地重试，就好像什么都没有发生过一样。
在 [第十一章](ch11.md) 中将再次回到 “恰好一次” 讯息处理的主题。让我们先来看看允许这种异构分散式事务的原子提交协议。
#### XA事务
*X/Open XA*（**扩充套件架构（eXtended Architecture）** 的缩写）是跨异构技术实现两阶段提交的标准【76,77】。它于 1991 年推出并得到了广泛的实现：许多传统关系资料库（包括 PostgreSQL、MySQL、DB2、SQL Server 和 Oracle）和讯息代理（包括 ActiveMQ、HornetQ、MSMQ 和 IBM MQ） 都支援 XA。
XA 不是一个网路协议 —— 它只是一个用来与事务协调者连线的 C API。其他语言也有这种 API 的系结；例如在 Java EE 应用的世界中，XA 事务是使用 **Java 事务 API（JTA, Java Transaction API）** 实现的，而许多使用 **Java 资料库连线（JDBC, Java Database Connectivity）** 的资料库驱动，以及许多使用 **Java 讯息服务（JMS）** API 的讯息代理都支援 **Java 事务 API（JTA）**。
XA 假定你的应用使用网路驱动或客户端库来与 **参与者**（资料库或讯息服务）进行通讯。如果驱动支援 XA，则意味著它会呼叫 XA API 以查明操作是否为分散式事务的一部分 —— 如果是，则将必要的资讯发往资料库伺服器。驱动还会向协调者暴露回拨介面，协调者可以透过回拨来要求参与者准备、提交或中止。
事务协调者需要实现 XA API。标准没有指明应该如何实现，但实际上协调者通常只是一个库，被载入到发起事务的应用的同一个程序中（而不是单独的服务）。它在事务中跟踪所有的参与者，并在要求它们 **准备** 之后收集参与者的响应（透过驱动回拨），并使用本地磁碟上的日志记录每次事务的决定（提交 / 中止）。
如果应用程序崩溃，或者执行应用的机器报销了，协调者也随之往生极乐。然后任何带有 **准备了** 但未提交事务的参与者都会在疑虑中卡死。由于协调程式的日志位于应用伺服器的本地磁碟上，因此必须重启该伺服器，且协调程式库必须读取日志以恢复每个事务的提交 / 中止结果。只有这样，协调者才能使用资料库驱动的 XA 回拨来要求参与者提交或中止。资料库伺服器不能直接联络协调者，因为所有通讯都必须透过客户端库。
#### 怀疑时持有锁
为什么我们这么关心存疑事务？系统的其他部分就不能继续正常工作，无视那些终将被清理的存疑事务吗？
问题在于 **锁（locking）**。正如在 “[读已提交](ch7.md#读已提交)” 中所讨论的那样，资料库事务通常获取待修改的行上的 **行级排他锁**，以防止脏写。此外，如果要使用可序列化的隔离等级，则使用两阶段锁定的资料库也必须为事务所读取的行加上共享锁（请参阅 “[两阶段锁定](ch7.md#两阶段锁定)”）。
在事务提交或中止之前，资料库不能释放这些锁（如 [图 9-9](../img/fig9-9.png) 中的阴影区域所示）。因此，在使用两阶段提交时，事务必须在整个存疑期间持有这些锁。如果协调者已经崩溃，需要 20 分钟才能重启，那么这些锁将会被持有 20 分钟。如果协调者的日志由于某种原因彻底丢失，这些锁将被永久持有 —— 或至少在管理员手动解决该情况之前。
当这些锁被持有时，其他事务不能修改这些行。根据资料库的不同，其他事务甚至可能因为读取这些行而被阻塞。因此，其他事务没法儿简单地继续它们的业务了 —— 如果它们要访问同样的资料，就会被阻塞。这可能会导致应用大面积进入不可用状态，直到存疑事务被解决。
#### 从协调者故障中恢复
理论上，如果协调者崩溃并重新启动，它应该干净地从日志中恢复其状态，并解决任何存疑事务。然而在实践中，**孤立（orphaned）** 的存疑事务确实会出现【89,90】，即无论出于何种理由，协调者无法确定事务的结果（例如事务日志已经由于软体错误丢失或损坏）。这些事务无法自动解决，所以它们永远待在资料库中，持有锁并阻塞其他事务。
即使重启资料库伺服器也无法解决这个问题，因为在 2PC 的正确实现中，即使重启也必须保留存疑事务的锁（否则就会冒违反原子性保证的风险）。这是一种棘手的情况。
唯一的出路是让管理员手动决定提交还是回滚事务。管理员必须检查每个存疑事务的参与者，确定是否有任何参与者已经提交或中止，然后将相同的结果应用于其他参与者。解决这个问题潜在地需要大量的人力，并且可能发生在严重的生产中断期间（不然为什么协调者处于这种糟糕的状态），并很可能要在巨大精神压力和时间压力下完成。
许多 XA 的实现都有一个叫做 **启发式决策（heuristic decisions）** 的紧急逃生舱口：允许参与者单方面决定放弃或提交一个存疑事务，而无需协调者做出最终决定【76,77,91】。要清楚的是，这里 **启发式** 是 **可能破坏原子性（probably breaking atomicity）** 的委婉说法，因为它违背了两阶段提交的系统承诺。因此，启发式决策只是为了逃出灾难性的情况而准备的，而不是为了日常使用的。
#### 分散式事务的限制
XA 事务解决了保持多个参与者（资料系统）相互一致的现实的和重要的问题，但正如我们所看到的那样，它也引入了严重的运维问题。特别来讲，这里的核心认识是：事务协调者本身就是一种资料库（储存了事务的结果），因此需要像其他重要资料库一样小心地打交道：
* 如果协调者没有复制，而是只在单台机器上执行，那么它是整个系统的失效单点（因为它的失效会导致其他应用伺服器阻塞在存疑事务持有的锁上）。令人惊讶的是，许多协调者实现预设情况下并不是高可用的，或者只有基本的复制支援。
* 许多伺服器端应用都是使用无状态模式开发的（受 HTTP 的青睐），所有持久状态都储存在资料库中，因此具有应用伺服器可随意按需新增删除的优点。但是，当协调者成为应用伺服器的一部分时，它会改变部署的性质。突然间，协调者的日志成为持久系统状态的关键部分 —— 与资料库本身一样重要，因为协调者日志是为了在崩溃后恢复存疑事务所必需的。这样的应用伺服器不再是无状态的了。
* 由于 XA 需要相容各种资料系统，因此它必须是所有系统的最小公分母。例如，它不能检测不同系统间的死锁（因为这将需要一个标准协议来让系统交换每个事务正在等待的锁的资讯），而且它无法与 SSI（请参阅 [可序列化快照隔离](ch7.md#可序列化快照隔离)）协同工作，因为这需要一个跨系统定位冲突的协议。
* 对于资料库内部的分散式事务（不是 XA），限制没有这么大 —— 例如，分散式版本的 SSI 是可能的。然而仍然存在问题：2PC 成功提交一个事务需要所有参与者的响应。因此，如果系统的 **任何** 部分损坏，事务也会失败。因此，分散式事务又有 **扩大失效（amplifying failures）** 的趋势，这又与我们构建容错系统的目标背道而驰。
这些事实是否意味著我们应该放弃保持几个系统相互一致的所有希望？不完全是 —— 还有其他的办法，可以让我们在没有异构分散式事务的痛苦的情况下实现同样的事情。我们将在 [第十一章](ch11.md) 和 [第十二章](ch12.md) 回到这些话题。但首先，我们应该概括一下关于 **共识** 的话题。
### 容错共识
非正式地，共识意味著让几个节点就某事达成一致。例如，如果有几个人 **同时（concurrently）** 尝试预订飞机上的最后一个座位，或剧院中的同一个座位，或者尝试使用相同的使用者名称注册一个帐户。共识演算法可以用来确定这些 **互不相容（mutually incompatible）** 的操作中，哪一个才是赢家。
共识问题通常形式化如下：一个或多个节点可以 **提议（propose）** 某些值，而共识演算法 **决定（decides）** 采用其中的某个值。在座位预订的例子中，当几个顾客同时试图订购最后一个座位时，处理顾客请求的每个节点可以 **提议** 将要服务的顾客的 ID，而 **决定** 指明了哪个顾客获得了座位。
在这种形式下，共识演算法必须满足以下性质【25】：[^xiii]
[^xiii]: 这种共识的特殊形式被称为 **统一共识（uniform consensus）**，相当于在具有不可靠故障检测器的非同步系统中的 **常规共识（regular consensus）**【71】。学术文献通常指的是 **程序（process）** 而不是节点，但我们在这里使用 **节点（node）** 来与本书的其余部分保持一致。
* 一致同意（Uniform agreement）
  没有两个节点的决定不同。