Implementation of the LSH. We use the Leech lattice LSH
of Andoni and Indyk [4], which we describe in Appendix C
for completeness. We ﬁnd the closest Leech lattice point to a
speciﬁed point (e.g., the query) using the decoder described by
Conway and Sloane [30]. The coordinates of the lattice point
are then mapped to the DPF domain using a universal hash.
Since the Leech lattice is a 24-dimensional object, the ﬁrst
step of Andoni and Indyk [4, Appendix B] is dimensionality
reduction [52]. We randomly project d/k of the coordinates
onto each lattice before concatenating the hashes (we use k = 2;
see Proposition 1). Many locality sensitive hashing algorithms
have efﬁcient methods for multi-probing [61]. For lattice based
hashes, we choose the multi-probes from the set of closest
lattice points, as these correspond to unique hash values. Indeed,
the client can advantageously select the closer lattice points
when retrieving candidates through PBR (Section V-A), letting
the retrieval failures correspond to probes that are further away.
C. Efﬁcient LSH for Euclidean distance
In this section we describe how to instantiate Proposition 1
efﬁciently for Euclidean distance ANN search. We ﬁrst note that
Proposition 1 is an upper bound and assumes worst-case data
(all points are between R and cR from the query). In practice,
there are LSH functions that can achieve very small p2 without
needing a large k. We take another look at Proposition 1. For
a large enough k > d, the region of space deﬁned by the set
{x | h(x) = h(y)} for a ﬁxed y becomes bounded. Speciﬁcally,
there exists a bounding distance b such that
Pr[h(x) = h(y) ∧ ||x − y|| > b]  p2. Therefore, there exists a “gap” between
the probability of a true positive and a false positive collision,
which can be ampliﬁed exponentially in k. First, observe that
the probability of selecting a false-positive at random from C,
when the database size is N, is bounded by
N · pk
1 + N · pk
pk
2
2
 p2 (Deﬁnition 1), it follows that p2/p1  1, due
to the increasing radii of the radix buckets, as explained in
Section IV-B.
Rmin
Next, by Lemma 1, we have that the information revealed by
α1 = h1(q) is less than or equal to the information revealed
by O(DB, R1, q). Indeed, as was shown in Lemma 1, αi is
0.77 times less precise compared to O(DB, Ri, q), for any i.
Therefore, we have that the ratio in precision between α1 and
O(DB, Rmax,·), that is, the ratio between the precision of the
smallest radix bucket and the baseline functionality, is bounded
by 0.77 times the ratio of precision between the baseline oracles
O(DB, Rmin,·) and O(DB, Rmax,·), respectively. Because the
, we get that Protocol 1 leaks at most
latter ratio is simply Rmax
Rmin
a multiplicative factor of 0.77 · Rmax
more compared to the
baseline leakage of Functionality 1, derived in Theorem 1. (cid:4)
We empirically compare the concrete leakage of Protocol 1
to the baseline leakage in Section VII-B on real world data. We
do so by ﬁnding values for Rmin and Rmax as a function of L
(see Appendix B for how this is done) and applying Claim 5.
Corollary 1. The leakage of k queries to Protocol 1 is bounded
by a multiplicative factor of 0.77 · Rmax
more than the leakage
of k queries to Functionality 1.
Proof. We only need to consider the relative leakage between
k successive queries to O(DB, Rmin,·) and O(DB, Rmax,·),
resulting in at most a factor of k more leakage. Another attack
one might consider is to learn more information across multiple
queries. While the information given by k hashes for the same
vector is more speciﬁc (e.g., the set of points that have both
hashes is smaller), the same effect occurs with queries to the
baseline oracle. If two queries spaced by some offset return
the same nearest neighbor, then that neighbor must be in the
intersection of the regions of radius Rmax centered at each
query. The leakage factor captures the extra precision in our
case. It also might be the case that the malicious client is able to
pick queries by exploiting hashes that return zeroes. However,
this is bounded by obtaining a new element of Sj (the set of
all LSH digests for a vector vj; see proof of Claim 3) each
(cid:4)
time, which is captured in our concrete leakage bound.
Rmin
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:59 UTC from IEEE Xplore.  Restrictions apply. 
19929