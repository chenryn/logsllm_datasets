    ![{%}](Image00126.jpg)
    **图 4-78 试验环境中即使出现证书错误也依然可以选择继续访问**
    由于虚拟机中无法附带正规证书，因此便导入了自签名证书，这也是出现上图错误信息的原因。而考虑到是虚拟机环境，因此请选择"继续浏览此网站"。关于自签名证书的风险请参考
    7.2.3 节。
    ![{%}](Image00127.jpg)
    **图 4-79 校验令牌方式的页面跳转**
    下面我们就来在 HTTP（非 SSL）中尝试此页面跳转。在 /48/
    菜单中点击"4.48-001: 生成令牌（非 SSL）"链接。结果为，48-001.php
    中显示"认证成功"后，48-002.php 中显示了如下错误消息。
    ![{%}](Image00128.jpg)
    **图 4-80 非 SSL 状态下无法收到令牌**
    这是因为，48-001.php 中生成的令牌值被保存到了设置了安全属性的 Cookie
    中，因此非 SSL 传输时 48-002.php
    就没有收到令牌。也就是说，可以确认安全属性运作正常。
-   **使用令牌能确保安全性的原因**
    即使没有设置安全属性的会话 ID
    被窃听，但只要令牌值设置了安全属性并被加密，HTTPS
    页面就不会遭到会话劫持。原因如下。
    -   服务器输出令牌的时机只有一次，即认证成功的时候
    -   令牌在 HTTPS 的页面被生成（服务器→浏览器）
    -   令牌被加密后由浏览器发送出去（浏览器→服务器）
    -   浏览 HTTPS 的页面必须要有令牌
    换言之，令牌值在服务器和浏览器之间传输时都进行了可靠的加密，而浏览
    HTTPS 页面时需要的令牌值不可能被第三方得知，因此便确保了安全性。
#### **除安全属性外其他属性值需要注意的地方**
除了安全属性之外，Cookie 中还有其他会影响安全性的属性。第 3
章中已经介绍了 Cookie 的属性，因此这里将主要介绍保存会话 ID 的 Cookie
的属性。
-   **Domain 属性**
    Domain
    属性的默认状态（即不指定的状态）是最安全的。只有在多台服务器中共享
    Cookie 时才需要指定 Domain 属性，而一般来说在多台服务器间共享会话 ID
    是没有意义的。
    虽然 PHP 中能够指定会话 ID 的 Domain
    属性，但是在没有特殊理由的情况下，最好不要指定 Domain 属性。
-   **Path 属性**
    PHP 的会话 ID 默认生成 path=/
    的属性。一般情况下这种设置不会有问题，而如果要针对每个路径生成不同的会话
    ID，则可以指定 Path 属性。
    需要注意的是，即使指定了 Path 属性也不会提高安全性。因为 JavaScript
    的同源策略是以域名为单位的，而不是以路径为单位。这在 3.2
    节中已经做过讲解。
-   **Expires 属性**
    会话 ID 的 Cookie 通常不指定 Expires 属性，即浏览器被关闭的同时
    Cookie 也会被删除。设置 Expires
    属性后，关闭浏览器后也照样能维持认证状态。详细的使用方法将在 5.1.4
    节中讲述。
-   **HttpOnly 属性**
    设置了 HttpOnly 属性的 Cookie 无法通过 JavaScript 访问。但由于
    JavaScript 访问会话 ID 并没有什么意义，因此建议每次都给 Cookie 加上
    HttpOnly 属性。正如 4.3 节中所介绍的那样，HttpOnly
    属性有助于减轻跨站脚本攻击造成的损害，但这并不是根本性的防范策略。
    PHP 中给会话 ID 的 Cookie 设置 HttpOnly 属性，只需如下编辑 php.ini。
    ``` 代码无行号
    session.cookie_httponly = On
    ```
#### **总结**
本节讲述了 Cookie 输出的相关问题。其中有两点非常重要的是，原则上仅将
Cookie 用于保存会话 ID，以及使用 HTTP 传输的应用中给 Cookie
设置安全属性。
> **参考文献**
>
> \[1\] Chris Sanders（著）. 诸葛建伟等（译）（2013）.《Wireshark
> 数据包分析实战》. 人民邮电出版社
## **4.9 发送邮件的问题** {#text00000.html#nav_point_41}
Web
应用通常使用邮件的方式来向用户进行确认或发送通知。而如果邮件发送功能不完善，就可能会导致开放转发第三方邮件，或者邮件内容被篡改等问题。本节就将讲述邮件发送功能中产生的安全隐患。
### **4.9.1 发送邮件的问题概要** {#text00000.html#nav_point_42}
与发送邮件相关的问题有如下三项。
> -   邮件头注入漏洞
>
> -   使用 hidden 参数保存收件人信息
>
> -   邮件服务器的开放转发（参考）
-   **邮件头注入漏洞**
    邮件头注入是指，通过在邮件消息中的收件人或标题等字段中插入换行符，从而添加新的邮件头字段或篡改邮件正文的攻击手段。招致此类攻击的漏洞即称为邮件头注入漏洞。
    邮件头注入漏洞将于 4.9.2 节详细讲述。
-   **使用 hidden 参数保存收件人信息**
    在一些用来免费发送邮件的表单中，为了便于自定义，有时会将邮件的收件人等信息指定为
    hidden 参数（图 4-81）。
    ![{%}](Image00129.jpg)
    **图 4-81 将收件人保存在 hidden 参数中的表单**
    通过将 hidden
    参数中的收件人更改为任意的邮箱地址，此类表单就能够被用于发送垃圾邮件。因此，收件人邮箱地址等信息不应该被保存在
    hidden
    参数中，而是应该硬编码在源代码中，或者被保存在服务器上的安全场所（如文件或数据库等）。
-   **参考：邮件服务器的开放转发**
    邮件服务器（Mail Transfer
    Agent，MTA）的设置如果存在问题，就可能使服务器的角色既非发件人也非收件人，而是被用于转发第三方的邮件（开放转发）。这样的服务器通常会沦落为发送垃圾邮件的工具。然而由于导致这种问题的原因并不是应用程序方面的问题，因此这里只将其作为参考内容介绍给读者。
    ![{%}](Image00130.jpg)
    **图 4-82 转发垃圾邮件的情形**
    图 4-82
    展示了恶意发送垃圾邮件的情形。图中右侧的服务器（A）由于收到过左侧服务器（X）发过来的垃圾邮件，因此便进行了设置，拒绝接收
    X
    服务器发来的邮件。而垃圾邮件的发送方随后发现了允许开放转发的邮件服务器（R），于是就利用该服务器发送垃圾邮件。由于经过
    R 服务器的邮件并没有被服务器 A 拒绝接收，因此服务器 A 就依然能收到 X
    发送的垃圾邮件。
    针对以上问题，现在的邮件服务器软件（MTA）中都默认不允许开放转发，因此只要正确设置邮件服务器就不会出现问题。网络上也有能够检查邮件服务器是否为开放转发的网站，设置完邮件服务器后可以去这些网站确认一下。
### **4.9.2 邮件头注入漏洞** {#text00000.html#nav_point_43}
#### **概要**
邮件头注入为，当收件人（To）或标题（Subject）等邮件头由外部指定时，通过使用换行符来添加或更改邮件头或正文的手段。
邮件头注入漏洞的影响如下。
-   标题、发件人或正文被更改
-   被用来发送垃圾邮件
-   被用来发送病毒邮件
防范邮件头注入漏洞的方法为，使用专门用来发送邮件的程序库，并执行以下任一操作。
-   邮件头中不允许包含外界传入的参数
-   通过校验不允许外界传入的参数中包含换行符
**邮件头注入漏洞总览**
![{%}](Image00131.jpg)
#### **攻击手段与影响**
下面我们就来看一下邮件头注入攻击的方法及其造成的影响。
以下为用来发送邮件的表单。
> **代码清单 /49/49-001.html**
``` 代码无行号
咨询发送表单 
邮箱地址 :
正文 :
```
然后，使用以下脚本接收表单的值并执行发送邮件的处理。
> **代码清单 /49/49-002.php**
``` 代码无行号
邮件发送成功
```
`mb_send_mail`
为支持多字节字符的邮件发送函数，各个参数分别为：收件人地址、标题、正文、附加邮件头。上述脚本中使用了第
4 个参数（附加邮件头）指定发件人（From）地址。
关于第 4 个参数，官方文档 [50]{.注释编号} 中有如下记载。
[50]{.注释编号下} 
> additional_headers
> 被插入在邮件头的末尾。常用于增加额外的头。通过使用换行符（\"\\n\"）进行分隔，可以指定多个头。
由此可见，虽然利用换行符就能够指定多个邮件头，但是上述应用中却没有考虑到存在换行符的可能性。而这也是形成安全隐患的直接原因，详情会在之后进行讲述。
首先我们来看正常情况下的使用实例。在表单的邮箱地址处填入"PI:EMAIL"，在正文处填入"请问订单编号为
4309
的交货期限是什么时候"，然后点击发送按钮，邮件就会被发送，如下图所示。
![{%}](Image00132.jpg)
**图 4-83 邮件发送表单**
![{%}](Image00133.jpg)
**图 4-84 通过表单发送的邮件（正常情况）**
这里的收件人 wasbook 就相当于处理用户咨询的客服人员。
接下来，我们就来看一下如何针对此表单实施攻击。
-   **攻击方式 1：添加收件人**
    邮件头注入攻击的第一种方式就是添加收件人。首先我们准备了攻击使用的表单
    49-900.html。此表单与 49-001.html
    大致相同，只是将邮箱地址输入框改成了能够输入换行符的 textarea
    要素，另外，由于假设该网页要被托管在攻击者的网站上，因此这里将 form
    元素的 action 属性改成了 URL
    的绝对地址。两者的差异如下所示，阴影部分即为不同点。
    > **代码清单 /49/49-900.html（与 49-001.html 的差异）**
        【略】
        邮箱地址 :
        【略】
    打开该表单所在的网页，然后输入如下图所示的值。
    ![{%}](Image00134.jpg)
    **图 4-85 通过攻击使用的表单发送邮件**
    点击页面上的发送按钮后，邮件就会被发送至 bob。以下是 Becky
    ！中收到邮件的界面。