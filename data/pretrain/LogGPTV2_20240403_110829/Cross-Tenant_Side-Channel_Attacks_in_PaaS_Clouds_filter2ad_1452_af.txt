best of our knowledge, memory deduplication across VMs is
not commonly used in many IaaS clouds (e.g., EC2), which
limits the applicability of the Flush-Reload side-channel
attack in those settings.
Multiple victim copies. Multiple copies of the same vic-
tim application may co-exist behind a load balancer to in-
crease the throughput and reliability of the services. In such
cases, beyond the steps described in this paper, the adver-
sary needs to further determine whether the requests sent to
the web server are served by the instance that is co-located
with his attacker instance. Such hurdles can be overcome by
issuing multiple requests concurrently or co-locating multi-
ple attacker applications with the victim replicas.
Other attack targets. The NFA-based attack framework
proposed in this paper provides a general control-ﬂow anal-
ysis approach to side-channel observations. We stress its
application extends beyond the three examples discussed in
the paper. For instance, we believe the latest version (v3.2.8
as of this writing) of the GnuTLS libraries are subject to
plaintext-recovery attacks as the co-located adversary can
employ the attack framework to construct a padding ora-
cle which reveals the correctness of the CBC mode padding
during symmetric key decryption processes. We also believe
that an adversary may Flush-Reload a shared MySQL
client library to monitor the victim’s SQL query execution
(e.g., invocation of mysql_error() and a few other func-
tions), thus facilitating blind SQL injection attacks.
8.3 Countermeasures
A key question for future research is how to design ef-
fective defenses against the attacks enabled within our pro-
posed framework. Various countermeasures to cache-based
side channels (not necessarily Flush-Reload channels) have
been proposed in IaaS cloud contexts [31, 4, 36, 18, 41, 19,
35]. However, none of these is applicable to our attacks. We
brieﬂy discuss some other possible defenses for our setting.
Mitigating side channels through program analysis.
A general countermeasure to control-ﬂow side channels, pro-
posed by Molnar et al. [21] and further explored by Coppens
et al. [9], involves the automatic detection of such side chan-
nels in source code and their remediation by means of generic
source-to-source translation. This approach would thwart
the attacks we describe here but does incur signiﬁcant over-
head. A complementary approach involves static analysis of
binaries to measure their vulnerability to cache-based side
channels [11]; this approach yields only an approximation of
the degree of vulnerability of an application, and no coun-
termeasure.
1001Disabling the clflush instruction. It is tempting to dis-
able clflush instructions altogether in PaaS applications to
prevent side-channel attacks. However, as clflush is a non-
privileged instruction, trapping its execution to mitigate its
eﬀect in the privileged software layer, i.e., operating sys-
tem, is diﬃcult without hardware modiﬁcation. An alterna-
tive solution is to sandbox PaaS applications and speciﬁcally
disallow the use of clflush in the application code. Still,
the adversary might be able to accomplish the eﬀects of a
clflush by other means akin to a Prime-Probe protocol.
Increasing background noise with more applications.
Increasing the number of applications sharing the last-level
caches increases background noise in two ways. First, if
more processes share the monitored executables, false posi-
tive noise increases. Second, as more processes are queued
by the CPU scheduler, the last-level caches are less likely to
be shared by the attacker and the victim at the same time.
However, the security provided by this approach is weak
in practice, unless the number of applications is artiﬁcially
sustained even when there is less real demand.
Disallowing resource sharing. The most general coun-
termeasure for any side-channel attack is to prevent sharing
of the exploited resource. In our setting, this would mean
disallowing sharing of memory pages that serve as Flush-
Reload attack vectors. An extreme realization would be
a prohibition on sharing any memory pages among diﬀerent
users, for instance by duplicating binary ﬁles for each user in
the OS. Such a defense, however, would increase the memory
footprint of each tenant, decreasing the number of tenants
that a PaaS provider could provision on a (virtual) machine
and reducing machine utilization and service-provider proﬁt.
Selective memory sharing promises a more cost-eﬀective ap-
proach; sharing of memory pages speciﬁcally carrying vul-
nerable code might then be disallowed. We leave the chal-
lenges of identifying, annotating, and protecting such code,
as well as the development of alternative defenses, as inter-
esting lines of future research.
Detecting Flush-Reload attacks. An interesting side
observation from the experiments conducted in Sec. 8.1 is
that the minimal performance degradation induced by the
attacks in this paper oﬀers little hope for detecting these at-
tacks. That is, prior studies suggest that cross-tenant side-
channel attacks in cloud settings can induce signiﬁcant per-
formance degradation in victim workloads, as was the case
in, e.g., the attacks demonstrated by Zhang et al. [40]. It
is possible, therefore, that the attacks of Zhang et al. might
be detected by monitoring the performance of the victim
application. While our results here do not conclusively rule
out the use of victim application performance monitoring to
detect the attacks in this paper, they also do not oﬀer much
promise for doing so.
However, it might be possible to employ the same type of
side-channel analysis to detect Flush-Reload attacks, sim-
ilar to the ideas of HomeAlone [39]. That is, a victim might
be able to infer the presence of an adversary by means of
performing Flush-Reload monitoring of the cache to de-
tect the Flush-Reload pattern induced by an adversary’s
likely choice of NFA. We leave the implementation of this
defense as future work.
9. CONCLUSION
We have proposed a general automaton-driven framework
to mount cache-based side-channel attacks and demonstrated
its potency speciﬁcally in PaaS environments. Our three
case studies demonstrate that an attacker co-located with a
victim can learn sensitive user data, such as the number of
distinct items in a shopping cart; perform password-reset at-
tacks against arbitrary users; and break XML encryption in
a SAML-based authentication application. The attacks we
illustrate are especially signiﬁcant in some cases in that they
bypass existing or proposed side-channel countermeasures.
Our shopping-cart attack is immune to defenses proposed
for analogous, timing-based side-channel attacks. Our study
of RSA private-key decryption re-enables the classic Ble-
ichenbacher padding-oracle attack despite widely deployed
countermeasures against remote adversaries.
In sum, we believe our work presents: (1) the ﬁrst ex-
ploration of cache-based side-channel attacks speciﬁcally in
PaaS environments, and (2) the ﬁrst report of granular,
cross-tenant, side-channel attacks successfully mounted in
any existing commercial cloud, PaaS or otherwise, against
state-of-the-art applications.
Acknowledgments
This work was supported in part by NSF grants 1065134,
1253870, 1330308, and 1330599, as well as a Google Ph.D.
Fellowship for Yinqian Zhang.
10. REFERENCES
[1] F. E. Allen. Control ﬂow analysis. SIGPLAN Not.,
5(7):1–19, July 1970.
[2] I. Alshanetsky. Top 10 ways to crash PHP.
http://ilia.ws/archives/5_Top_10_ways_to_
crash_PHP.html. Accessed: 2014-08-17.
[3] B. Argyros and A. Kiayias. I forgot your password:
Randomness attacks against PHP applications. In 21st
USENIX Security Symposium, 2012.
[4] A. Aviram, S. Hu, B. Ford, and R. Gummadi.
Determinating timing channels in compute clouds. In
2010 ACM workshop on Cloud computing security
workshop, pages 103–108, 2010.
[5] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato,
G. Steel, and J.-K. Tsay. Eﬃcient padding oracle
attacks on cryptographic hardware. In Advances in
Cryptology — CRYPTO 2012, pages 608–625. 2012.
[6] D. Bleichenbacher. Chosen ciphertext attacks against
protocols based on the RSA encryption standard
PKCS#1. In Advances in Cryptology — CRYPTO
’98, pages 1–12, 1998.
[7] W. J. Bolosky and M. L. Scott. False sharing and its
eﬀect on shared memory performance. In 4th USENIX
Symposium on Experiences with Distributed and
Multiprocessor Systems, 1993.
[8] A. Bortz and D. Boneh. Exposing private information
by timing web applications. In 16th International
Conference on World Wide Web, pages 621–628, 2007.
[9] B. Coppens, I. Verbauwhede, K. De Bosschere, and
B. De Sutter. Practical mitigations for timing-based
side-channel attacks on modern x86 processors. In
IEEE Symposium on Security and Privacy, pages
45–60, 2009.
1002[10] J. P. Crespo. Personal communication, June 2014.
[11] G. Doychev, D. Feld, B. K¨opf, and L. Mauborgne.
CacheAudit: A tool for the static analysis of cache
side channels. In USENIX Security Symposium, 2013.
[12] S. Esser. Lesser known security problems in PHP
applications. In Zend Conference, 2008.
[13] E. W. Felten and M. A. Schneider. Timing attacks on
web privacy. In 7th ACM Conference on Computer
and Communications Security, pages 25–32, 2000.
[14] D. Gullasch, E. Bangerter, and S. Krenn. Cache games
– bringing access-based cache attacks on AES to
practice. In 2011 IEEE Symposium on Security &
Privacy, pages 490–505, 2011.
[15] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar.
Wait a minute! A fast, cross-VM attack on AES.
Cryptology ePrint Archive, 2014.
[16] T. Jager, S. Schinzel, and J. Somorovsky.
Bleichenbacher’s attack strikes again: breaking
PKCS#1 v1.5 in XML encryption. In Computer
Security — ESORICS 2012, pages 752–769. 2012.
[17] S. Kamkar. phpwn: Attacking sessions and
pseudo-random numbers in PHP. In Blackhat USA,
2010.
[18] T. Kim, M. Peinado, and G. Mainar-Ruiz.
STEALTHMEM: system-level protection against
cache-based side channel attacks in the cloud. In 21st
USENIX Security Symposium, 2012.
[19] P. Li, D. Gao, and M. K. Reiter. Mitigating
access-driven timing channels in clouds using
StopWatch. In 43rd IEEE/IFIP International
Conference on Dependable Systems and Networks,
pages 1–12, June 2013.
[20] R. P. Mahowald, C. W. Olofson, M.-C. Ballou,
M. Fleming, and A. Hilwa. Worldwide competitive
public Platform as a Service 2013-2017 forecast (Doc
243315). IDC Inc., November 2013.
[21] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner.
The program counter security model: Automatic
detection and removal of control-ﬂow side channel
attacks. In Information Security and Cryptology, pages
156–168, 2005.
[22] Y. Nagami, D. Miyamoto, H. Hazeyama, and
Y. Kadobayashi. An independent evaluation of web
timing attack and its countermeasure. In 3rd
International Conference on Availability, Reliability
and Security, pages 1319–1324, 2008.
[23] Y. V. Natis. Gartner research highlights Platform as a
Service (ID: G00259659). Gartner Inc., 3 February
2014.
[24] N. Nethercote and J. Seward. Valgrind: A framework
for heavyweight dynamic binary instrumentation.
SIGPLAN Not., 42(6):89–100, June 2007.
[27] OASIS. Proﬁles for the OASIS Security Assertion
Markup Language (SAML) V2.0.
http://docs.oasis-open.org/security/saml/v2.0/
saml-profiles-2.0-os.pdf.
[28] D. A. Osvik, A. Shamir, and E. Tromer. Cache attacks
and countermeasures: the case of AES. In Topics in
Cryptology – CT-RSA 2006, pages 1–20.
Springer-Verlag, 2005.
[29] R. Owens and W. Wang. Non-interactive OS
ﬁngerprinting through memory de-duplication
technique in virtual machines. In 30th IEEE
International Conference on Performance, Computing
and Communications, pages 1–8, November 2011.
[30] C. Percival. Cache missing for fun and proﬁt. In
BSDCon 2005, 2005.
[31] H. Raj, R. Nathuji, A. Singh, and P. England.
Resource management for isolation enhanced cloud
services. In 2009 ACM workshop on Cloud computing
security, pages 77–84, 2009.
[32] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage.
Hey, you, get oﬀ of my cloud: Exploring information
leakage in third-party compute clouds. In 16th ACM
Conference on Computer and Communications
Security, pages 199–212, 2009.
[33] K. Suzaki, K. Iijima, T. Yagi, and C. Artho. Memory
deduplication as a threat to the guest OS. In 4th
European Workshop on System Security, April 2011.
[34] E. Tromer, D. A. Osvik, and A. Shamir. Eﬃcient
cache attacks on AES, and countermeasures. Journal
of Cryptology, 23(1):37–71, 2010.
[35] V. Varadarajan, T. Ristenpart, and M. Swift.
Scheduler-based defenses against cross-VM
side-channels. In 23st USENIX Security Symposium,
2014.
[36] B. C. Vattikonda, S. Das, and H. Shacham.
Eliminating ﬁne grained timers in Xen. In 3rd ACM
workshop on Cloud computing security workshop,
pages 41–46, 2011.
[37] W3Techs. Usage of content management systems for
websites. http://w3techs.com/technologies/
overview/content_management/all.
[38] Y. Yarom and K. Falkner. Flush+Reload: a high
resolution, low noise, L3 cache side-channel attack.
http://eprint.iacr.org/2013/448, 2013.
[39] Y. Zhang, A. Juels, A. Oprea, and M.K. Reiter.
HomeAlone: Co-residency detection in the cloud via
side-channel analysis. In IEEE Symposium on Security
and Privacy, pages 313–328, 2011.
[40] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart.
Cross-VM side channels and their use to extract
private keys. In 2012 ACM Conference on Computer
and Communications Security, pages 305–316, 2012.
[25] M. Neve and J.-P. Seifert. Advances on access-driven
[41] Y. Zhang and M. K. Reiter. D¨uppel: retroﬁtting
cache attacks on AES. In Selected Areas in
Cryptography, 13th International Workshop, SAC
2006, pages 147–162, August 2006.
[26] OASIS. Bindings for the OASIS Security Assertion
Markup Language (SAML) V2.0.
http://docs.oasis-open.org/security/saml/v2.0/
saml-bindings-2.0-os.pdf.
commodity operating systems to mitigate cache side
channels in the cloud. In 2013 ACM Conference on
Computer and Communications Security, pages
827–838, 2013.
1003