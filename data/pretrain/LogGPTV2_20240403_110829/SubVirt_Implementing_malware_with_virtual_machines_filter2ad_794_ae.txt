get OS. We explored the design and implementation of
VMBRs, which use VMMs to provide attackers with
qualitatively more control over compromised systems.
We showed how attackers can leverage this advantage
to implement malicious services that are completely
hidden from the target system and to enable easy de-
velopment of general-purpose malicious services. We
evaluated this new malware threat by implementing
two proof-of-concept VMBRs. We used our proof-of-
concept VMBRs to subvert Windows XP and Linux
target systems and implemented four example mali-
cious services.
In addition to evaluating the VMBR threat, we also
explored techniques for detecting a VMBR. The best
way to detect a VMBR is to control a layer beneath the
VMBR, such as through bootable CD-ROMs, secure
VMMs, or secure hardware. It might also be possible
to detect a VMBR from software running above the
VMM, but the high level of control VMBRs have over
software running above turns this style of detection into
an arms race where the VMBR has the fundamental
advantage.
However, VMBRs have a number of disadvantages
compared to traditional forms of malware. When com-
pared to traditional forms of malware, VMBRs tend to
have more state, be more diﬃcult to install, require a
reboot before they can run, and have more of an im-
pact on the overall system. Although VMBRs do oﬀer
greater control over the compromised system, the cost
of this higher level of control may not be justiﬁed for
all malicious applications.
Despite these shortcomings, we believe that VMBRs
are a viable and likely threat. Virtual-machine moni-
tors are available from both the open-source commu-
nity and commercial vendors. We built VMBRs based
on two available virtual-machine monitors, including
one for which source code was unavailable. On to-
day’s x86 systems, VMBRs are capable of running a
target OS with few visual diﬀerences or performance
eﬀects that would alert the user to the presence of a
VMBR. In fact, one of the authors accidentally used
a machine which had been infected by our proof-of-
concept VMBR without realizing that he was using a
compromised system!
9. Acknowledgments
We thank the anonymous reviewers and our shep-
herd, Steve Gribble, for suggestions that helped us im-
prove this paper. We thank Peter Biddle, Brandon
Baker, and Eric Traut for providing valuable insight
and discussions about this topic. We would also like to
thank Rick Rashid, Ted Wobber, Butler Lampson, and
Paul Barham for providing feedback on early versions
of this paper. This research was supported in part by
National Science Foundation grants CCR-0098229 and
CCR-0219085, by ARDA grant NBCHC030104, by In-
tel Corporation, and by Microsoft.
References
[1] VMware Virtual Machine Technology. Technical re-
port, VMware, Inc., September 2000.
[2] AMD platform for trustworthy computing.
In Win-
HEC, September 2003.
[3] Advanced Conﬁguration and Power Interface Spec-
http://www.acpi.info/
iﬁcation, September 2004.
DOWNLOADS/ACPIspec30.pdf.
[4] Installing VMware Tools,
Novemeber
http://www.vmware.com/support/ws5/doc/
new guest tools ws.html.
2005.
[5] ttylinux,
2006.
http://www.minimalinux.org/
ttylinux/showpage.php?pid=1.
[6] Advanced Micro Devices Inc. BIOS and Kernel Devel-
oper’s Guide for AMD Athlon 64 and AMD Opteron
Processors, April 2004.
[7] Advanced Micro Devices
Inc.
ﬁca Virtualization Technology, March
http://enterprise.amd.com/downloadables/
Paciﬁca.ppt.
AMD Paci-
2005.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:08 UTC from IEEE Xplore.  Restrictions apply. 
[8] K. G. Anagnostakis, S. Sidiroglou, P. Akritidis,
K. Xinidis, E. Markatos, and A. D. Keromytis. De-
tecting Targeted Attacks Using Shadow Honeypots. In
Proceedings of the 2004 USENIX Security Symposium,
August 2005.
[9] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A
secure and reliable bootstrap architecture. In Proceed-
ings of 1997 IEEE Symposium on Computer Security
and Privacy, pages 65–71, 1997.
[10] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Har-
ris, A. Ho, R. Neugebauer, I. Pratt, and A. Warﬁeld.
Xen and the Art of Virtualization. In Proceedings of
the 2003 Symposium on Operating Systems Principles,
October 2003.
[11] J. Butler
and G. Hoglund.
VICE—Catch
Black Hat USA, July 2004.
the Hookers!
http://www.blackhat.com/presentations/bh-usa-
04/bh-us-04-butler/bh-us-04-butler.pdf.
[12] J. Butler, J. L. Undercoﬀer, and J. Pinkston. Hidden
Processes: The Implication for Intrusion Detection.
In Proceedings of the 2003 Workshop on Information
Assurance, pages 116–12, June 2003.
[13] P. M. Chen and B. D. Noble. When virtual is better
than real. In Proceedings of the 2001 Workshop on Hot
Topics in Operating Systems (HotOS), pages 133–138,
May 2001.
[14] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and
P. M. Chen. ReVirt: Enabling Intrusion Analysis
through Virtual-Machine Logging and Replay. In Pro-
ceedings of the 2002 Symposium on Operating Systems
Design and Implementation (OSDI), pages 211–224,
December 2002.
[15] B. Ford, M. Hibler, J. Lepreau, P. Tullmann, G. Back,
and S. Clawson. Microkernels Meet Recursive Vir-
tual Machines.
In Proceedings of the 1996 Sympo-
sium on Operating Systems Design and Implementa-
tion (OSDI), October 1996.
[16] Fuzen Op.
The
FU
rootkit.
http://www.rootkit.com/project.php?id=12.
[17] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A Virtual Machine-Based Platform
for Trusted Computing.
In Proceedings of the 2003
Symposium on Operating Systems Principles, October
2003.
[18] T. Garﬁnkel and M. Rosenblum. A Virtual Machine
Introspection Based Architecture for Intrusion Detec-
tion.
In Proceedings of the 2003 Network and Dis-
tributed System Security Symposium (NDSS), Febru-
ary 2003.
[19] R. Goldberg. Architectural Principles for Virtual
Computer Systems. PhD thesis, Harvard University,
February 1973.
[20] R. P. Goldberg. Survey of Virtual Machine Research.
IEEE Computer, pages 34–45, June 1974.
[23] J. S. Heidemann and G. J. Popek. File-system devel-
opment with stackable layers. ACM Transactions on
Computer Systems, 12(1):58–89, February 1994.
[24] G. Hoglund and J. Butler. Rootkits: Subverting the
Windows Kernel. Addison-Wesley, 2005.
[25] Intel Corp.
LaGrande Technology Architectural
Overview, 2003.
[26] X. Jiang and D. Xu. Collapsar: A VM-Based Ar-
chitecture for Network Attack Detention Center.
In
Proceedings of the 2004 USENIX Security Symposium,
August 2004.
[27] A. Joshi, S. T. King, G. W. Dunlap, and P. M.
Chen. Detecting past and present intrusions through
vulnerability-speciﬁc predicates.
In Proceedings of
the 2005 Symposium on Operating Systems Principles
(SOSP), pages 91–104, October 2005.
[28] R. Kennell and L. H. Jamieson. Establishing the gen-
uinity of remote computer systems. In Proceedings of
the 12th USENIX Security Symposium, August 2003.
[29] G. H. Kim and E. H. Spaﬀord. The design and imple-
mentation of Tripwire: a ﬁle system integrity checker.
In Proceedings of 1994 ACM Conference on Computer
and Communications Security (CCS), pages 18–29,
November 1994.
[30] S. T. King, G. W. Dunlap, and P. M. Chen. Debug-
ging operating systems with time-traveling virtual ma-
chines. In Proceedings of the 2005 USENIX Technical
Conference, pages 1–15, April 2005.
[31] K. Lawton. Running multiple operating systems con-
currently on an IA32 PC using virtualization tech-
niques, 1999. http://plex86.org/research/paper.txt.
[32] J. LeVasseur, V. Uhlig, J. Stoess, and S. Gotz. Un-
modiﬁed Device Driver Reuse and Improved System
Dependability via Virtual Machines.
In Proceedings
of the 2004 Symposium on Operating Systems Design
and Implementation (OSDI), December 2004.
[33] R. Meushaw and D. Simard. NetTop: Commercial
Technology in High Assurance Applications. Tech
Trend Notes: Preview of Tomorrow’s Information
Technologies, 9(4), September 2000.
[34] Microsoft Corp. Microsoft Virtual PC 2004 Tech-
http://www.microsoft.com/
nical Overview, 2005.
windows/virtualpc/evaluation/techoverview.mspx.
[35] Microsoft Corp. Windows Preinstallation Environ-
http://www.microsoft.com/
ment Overview, 2005.
whdc/system/winpreinst/WindowsPE over.mspx.
[36] J. Nick L. Petroni, T. Fraser, J. Molina, and W. A. Ar-
baugh. Copilot–a Coprocessor-based Kernel Runtime
Integrity Monitor. In Proceedings of the 2004 USENIX
Security Symposium, August 2004.
[37] G. J. Popek and R. P. Goldberg. Formal Require-
ments for Virtualizable Third Generation Architec-
tures. Communications of the ACM, 17(7):412–421,
July 1974.
[21] D. Gollmann. Computer Security, 2nd edition. John
[38] J.
Rutkowska.
Wiley and Sons, Inc., January 2006.
[22] Halﬂife. Abuse of the Linux Kernel for Fun and Proﬁt.
Phrack, 7(50), April 1997.
Server Compromises.
curity
Conference,
http://www.invisiblethings.org/papers/hivercon03 joanna.ppt.
Detecting Windows
Se-
2003.
In HivenCon
November
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:08 UTC from IEEE Xplore.  Restrictions apply. 
[39] J. Rutkowska.
Red Pill... or how to detect
VMM using (almost) one CPU instruction, 2005.
http://invisiblethings.org/papers/redpill.html.
[40] C. P. Sapuntzakis, R. Chandra, B. Pfaﬀ, J. Chow,
M. S. Lam, and M. Rosenblum. Optimizing the Migra-
tion of Virtual Computers. In Proceedings of the 2002
Symposium on Operating Systems Design and Imple-
mentation, December 2002.
[41] sd and devik. Linux on-the-ﬂy kernel patching without
LKM. Phrack, 11(58), December 2001.
[42] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn,
and P. Khosla. Pioneer: Verifying integrity and guar-
anteeing execution of code on legacy platforms.
In
Proceedings of ACM Symposium on Operating Systems
Principles (SOSP), pages 1–16, 2005.
[43] S. Sparks and J. Butler. Shadow Walker: Raising The
Bar For Windows Rootkit Detection. Phrack, 11(63),
August 2005.
[44] J. Sugerman, G. Venkitachalam, and B.-H. Lim.
Virtualizing I/O Devices on VMware Workstation’s
Hosted Virtual Machine Monitor.
In Proceedings of
the 2001 USENIX Technical Conference, June 2001.
[45] R. Uhlig, G. Neiger, D. Rodgers, A. L. Santoni,
F. C. M. Martins, A. V. Anderson, S. M. Bennett,
A. Kagi, F. H. Leung, and L. Smith. Intel Virtualiza-
tion Technology. IEEE Computer, 38(5):48–56, May
2005.
[46] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft,
A. Snoeren, G. Voelker, and S. Savage. Scalability, Fi-
delity and Containment in the Potemkin Virtual Hon-
eyfarm. In Proceedings of the 2005 Symposium on Op-
erating Systems Principles, October 2005.
[47] C. A. Waldspurger. Memory Resource Management
in VMware ESX Server.
In Proceedings of the 2002
Symposium on Operating Systems Design and Imple-
mentation (OSDI), December 2002.
[48] Y.-M. Wang, D. Beck, B. Vo, R. Roussev, and C. Ver-
bowski. Detecting Stealth Software with Strider
GhostBuster.
In Proceedings of the 2005 Interna-
tional Conference on Dependable Systems and Net-
works (DSN), June 2005.
[49] A. Whitaker, R. S. Cox, and S. D. Gribble. Con-
ﬁguration Debugging as Search: Finding the Needle
in the Haystack. In Proceedings of the 2004 Sympo-
sium on Operating Systems Design and Implementa-
tion (OSDI), December 2004.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:08 UTC from IEEE Xplore.  Restrictions apply.