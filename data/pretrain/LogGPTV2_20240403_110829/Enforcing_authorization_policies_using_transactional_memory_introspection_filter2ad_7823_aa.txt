# Enforcing Authorization Policies using Transactional Memory Introspection

## Authors
- Arnar Birgisson, School of Computer Science, Reykjavík University, PI:EMAIL
- Mohan Dhawan, Department of Computer Science, Rutgers University
- Úlfar Erlingsson, School of Computer Science, Reykjavík University, PI:EMAIL
- Vinod Ganapathy, Department of Computer Science, Rutgers University
- Liviu Iftode, Department of Computer Science, Rutgers University, PI:EMAIL

## Abstract
Correct enforcement of authorization policies is a challenging task, particularly in multi-threaded software. Even in carefully-reviewed code, unauthorized access can occur in subtle corner cases. We introduce Transactional Memory Introspection (TMI), a novel reference monitor architecture that leverages Software Transactional Memory (STM) to facilitate correct and efficient security enforcement.

TMI simplifies the integration of the reference monitor with software functionality, ensuring complete mediation of security-relevant operations, eliminating race conditions related to security checks, and simplifying the handling of authorization failures. We present the design and implementation of a TMI-based reference monitor and evaluate its performance in enforcing authorization policies on four significant servers. Our experiments confirm the benefits of the TMI architecture, showing that it imposes an acceptable runtime overhead.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Access controls
- D.1.3 [Software]: Concurrent programming

**General Terms:**
- Languages, Security

**Keywords:**
- Reference monitors, Transactional memory

## Introduction
Security enforcement mechanisms must be implemented with special care to ensure correctness even in uncommon code paths, unusual interleavings of execution, or during abnormal error conditions. This is especially challenging for multi-threaded software. This paper introduces Transactional Memory Introspection (TMI), an architecture that significantly simplifies the task of correctly implementing security enforcement mechanisms.

Our work is based on Software Transactional Memory (STM) techniques, which are an active area of research, particularly in connection with multi-core hardware concurrency. STM ensures that code sections have effects as if they were executed in serial order, typically marked using language-level annotations such as `atomic` or `transaction`. STM provides attractive guarantees, such as consistent recovery from failures, and although current STM systems incur high costs, hardware acceleration and language support may soon provide competitive overhead.

TMI is a reference monitor architecture that builds on STM semantics and machinery. It allows security enforcement to benefit from STM guarantees while remaining compatible with existing security mechanisms. TMI ensures that enforcement remains correct, even in corner cases, by leveraging the precise bookkeeping maintained by the STM runtime system to detect read/write conflicts. A TMI reference monitor is implicitly invoked whenever a security-relevant shared resource is accessed in a transaction, and a transaction is aborted unless all security checks are successful.

By triggering security checks on resource accesses, TMI ensures complete mediation, avoids exceptional control paths, and reduces the latency and performance overheads of expensive security checks. The TMI architecture is practical, and we have designed and implemented TMI reference monitors for enforcing authorization policies on server software. We have created a TMI implementation based on Sun’s Dynamic Software Transactional Memory (DSTM2) toolkit for Java, integrating it with existing authorization frameworks such as Java stack inspection and XACML.

## Main Contributions
- **Transactional Memory Introspection (TMI):** We introduce TMI, a new architecture for implementing reference monitors. We describe its components, applicability, and show how it helps avoid violations of complete mediation and time-of-check to time-of-use race conditions, and simplifies handling of errors and authorization failures.
- **Implementation of a TMI Reference Monitor:** We demonstrate that TMI-based enforcement can be practically implemented and integrated with existing security mechanisms and frameworks. We present a specific TMI implementation suited for the enforcement of authorization policies.
- **Experimental Validation:** We retrofitted server software with a TMI reference monitor, integrating it with existing security mechanisms. Our experiments show that adopting TMI-based enforcement can be straightforward, resulting in simpler and less error-prone code. We measured an average overhead of less than 11% for TMI-based enforcement of authorization policies.

## Motivation and Background
### Focus Application: Authorization Policy Enforcement in Server Software
Server software must protect shared resources from inappropriate client access by formulating and enforcing an authorization policy. Such policies specify, for each shared resource, what principals can perform which operations. At runtime, a reference monitor should ensure that each access to a shared resource is authorized.

Integrating authorization enforcement into server software is time-consuming and error-prone. For example, it took almost two years to add invocations of the Linux Security Modules (LSM) reference monitor to the Linux kernel. Similar efforts in the X11 server, the JVM, and IBM WebSphere have also been time-consuming, multi-year endeavors.

### Challenges in Implementing Authorization
To understand the key difficulties in the current practice of enforcing authorization policies, consider Figure 1(a), which shows pseudo-code from a server. This server accesses resources on behalf of a client, and these accesses must be authorized. In current practice, authorization is enforced by embedding reference monitor checks within server functionality, using patterns like `if...then...else`.

#### Key Difficulties
1. **Complete Mediation of Access to Resources:**
   - Each access must be checked and authorized.
   - Each call to the reference monitor must provide the correct security-relevant metadata, such as the operating principal, the identities of accessed resources, and the types of access.
   - Ensuring these properties is challenging, as the locations for authorization checks are currently identified manually, leading to potential omissions.

For example, Figure 2 shows code snippets from the Linux kernel. Both `vfs_read` and `page_cache_read` read the contents of a file object, but `page_cache_read` does not check for file permissions, assuming they have been checked elsewhere. This omission can lead to unauthorized access.

### Benefits of TMI-Based Enforcement
TMI decouples application functionality from policy enforcement, ensuring complete mediation of all resource accesses via introspection on memory-access bookkeeping performed by the STM runtime. It prevents race conditions by construction and allows simple handling of authorization failures via rollback.

In summary, TMI offers a practical and effective approach to enforcing authorization policies in server software, simplifying the implementation and reducing the likelihood of errors.