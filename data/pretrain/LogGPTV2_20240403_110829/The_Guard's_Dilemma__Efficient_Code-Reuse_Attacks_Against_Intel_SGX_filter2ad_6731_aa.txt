title:The Guard's Dilemma: Efficient Code-Reuse Attacks Against Intel SGX
author:Andrea Biondo and
Mauro Conti and
Lucas Davi and
Tommaso Frassetto and
Ahmad-Reza Sadeghi
The Guard’s Dilemma: Efficient Code-Reuse 
Attacks Against Intel SGX
Andrea Biondo and Mauro Conti, University of Padua; Lucas Davi, University of Duisburg-
Essen; Tommaso Frassetto and Ahmad-Reza Sadeghi, Technische Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity18/presentation/biondo
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.The Guard’s Dilemma:
Efﬁcient Code-Reuse Attacks Against Intel SGX
Andrea Biondo, Mauro Conti
University of Padua, Italy
Lucas Davi
University of Duisburg-Essen, Germany
Tommaso Frassetto, Ahmad-Reza Sadeghi
TU Darmstadt, Germany
Abstract
Intel Software Guard Extensions (SGX) isolate security-
critical code inside a protected memory area called
enclave. Previous research on SGX has demonstrated
that memory corruption vulnerabilities within enclave
code can be exploited to extract secret keys and bypass
remote attestation. However, these attacks require kernel
privileges, and rely on frequently probing enclave code
which results in many enclave crashes. Further, they
assume a constant, not randomized memory layout.
In this paper, we present novel exploitation techniques
against SGX that do not require any enclave crashes and
work in the presence of existing SGX randomization
approaches such as SGX-Shield. A key contribution
of our attacks is that they work under weak adversarial
assumptions, e.g., not requiring kernel privileges. In fact,
they can be applied to any enclave that is developed with
the standard Intel SGX SDK on either Linux or Windows.
1
Introduction
Intel recently introduced Software Guard Extensions
(SGX), which aim at strongly isolating sensitive code
and data from the operating system, hypervisor, BIOS,
and other applications.
In addition, SGX also features
sophisticated memory protection techniques that prevent
memory snooping attacks: SGX code and data is always
encrypted and integrity-protected as soon as it leaves the
CPU chip, e.g., when it is stored in main memory. SGX is
especially useful in cloud scenarios as it ensures isolated
execution of code and data within an untrusted computing
environment.
SGX was designed to allow developers to protect
small parts of their application that handle sensitive data,
e.g., cryptographic keys, inside SGX containers called
enclaves. An enclave is a strongly isolated execution
environment that can be dynamically created while the
main application, known as host, is running. The host
can invoke speciﬁc functions in an SGX enclave by
using one of the pre-deﬁned entry points. The enclave
can subsequently perform sensitive computations, call
pre-deﬁned functions in the host, and return to the caller.
In the ideal scenario, the enclave code only includes
minimal carefully-inspected code, which could be
formally proven to be free of vulnerabilities. However,
legacy applications can be adapted as well to run inside
SGX enclaves with relatively minor modiﬁcations.
Formally verifying or manually inspecting such complex
legacy software is not feasible, meaning that the same
memory-corruption vulnerabilities that plague legacy
software are also very likely to occur in those complex
enclaves.
However, previous research on SGX has been mainly
focused on side-channel attacks [31, 29, 6] and de-
fenses [28, 12, 5]. Only recently, Lee et al. [19] presented
the ﬁrst memory-corruption attack against SGX. Their
attack, called Dark-ROP, is based on several oracles and
return-oriented programming (ROP) [27]. The oracles
inform the attacker about the internal status of the enclave
execution, whereas ROP maliciously re-uses benign code
snippets (called gadgets) to undermine non-executable
memory protection.
In particular, Dark-ROP requires
kernel privileges and is based on principles of blind
ROP [3]: if an application is not randomized, or it is not
re-randomized after crashing, crashes can and do leak
useful information to the attacker. This allows Dark-ROP
to extract secret code and data, as well as undermine
remote attestation. However, Dark-ROP requires a
constant, non-randomized memory layout as the oracles
frequently crash enclaves. Hence, to address the Dark-
ROP attack, Seo et al. demonstrated an implementation
of SGX randomization called SGX-Shield [26], since
this attack is not effective if the SGX code is randomized.
Dark-ROP relies on running the target enclave multiple
times to test multiple addresses, so randomizing the
memory layout at initialization time makes previous
results useless for new invocations.
However, SGX-Shield does not randomize the part of
USENIX Association
27th USENIX Security Symposium    1213
the SGX SDK [14, 15] that handles transitions between
host code and enclave code. Thus, the location of this
code, which contains a number of very interesting gadgets
to mount ROP attacks, is known to the attacker. This
paper demonstrates that this interface code is enough
to mount powerful run-time attacks and bypass SGX-
Shield without requiring kernel privileges. Extending
the randomization to this interface code would be very
technically involved due to its low-level nature and the
architectural need to have a ﬁxed entry point, as we
discuss in Section 8. Moreover, even a ﬁnely-randomized
interface code would be vulnerable to side-channel
attacks. Finally, architectural limitations in SGX1 force
randomized code to be executed from writable pages,
thus allowing simpler code-injection.
Goals and Contributions. We show that even ﬁne-
grained code randomization for SGX can be bypassed
by exploiting parts of the SDK code, and point out
the need for more advanced approaches to mitigate
run-time attacks on SGX enclaves. In summary, our main
contributions are:
• We propose two new code-reuse attacks against
enclaves built on top of the Intel SGX SDK. By
abusing preexisting SDK mechanisms, these attacks
provide full control of the CPU’s general-purpose
registers to an attacker able to exploit a memory
corruption vulnerability (Section 6). We also
reverse-engineered and describe the internals of
the ECALL, OCALL and exception handling
mechanisms of the Intel SGX SDK (Section 4).
• To demonstrate that our new attacks are powerful,
we show that they are effective and practical against
SGX-Shield [26], a state-of-the-art ﬁne-grained ran-
domization solution for SGX enclaves (Section 7).
Moreover, we highlight several discrepancies be-
tween the SGX-Shield paper and the proposed open
source implementation.
• We discuss possible countermeasures and mitiga-
tions to prevent our attacks from two perspectives:
hardening the enclave itself, and hardening the SDK
(Section 8).
2 Related Work
Side-channel attacks. Multiple works have shown that
SGX is vulnerable to micro-architectural side-channel
attacks since untrusted code and enclave code share the
same processor. Side-channel attacks can leak critical
secrets from the enclave, such as cryptographic keys.
1 In the current version of SGX, memory permissions cannot be
changed after initialization. This limitation will be lifted in SGX2 [22];
however, no available processor currently supports this new version.
Controlled-channel attacks [31] employ a malicious ker-
nel to infer memory access patterns at the granularity of
pages by triggering page faults in the enclave. They show
how the strong adversary model of SGX can introduce
new kinds of attacks. Cache-based side channels have
been widely studied and exploit the caching mechanisms
of the processor, as unrelated processes can share cache
resources [13, 17, 21, 32]. Software Grand Exposure [6]
and CacheZoom [23] further show how cache side chan-
nels are especially powerful within the strong adversary
model of SGX. Another micro-architectural component
that has been exploited is the branch predictor. Lee et
al. [20] abuse collisions within the branch predictor to
infer whether a branch inside the enclave has been taken.
They demonstrate their attack by monitoring an RSA
exponentiation routine to recover the key. All these
side-channel attacks require frequent interruption of the
enclave. Therefore, defenses such as T-SGX [28] and
D´ej´a Vu [7] are based on avoiding or detecting enclave
interruptions forced by a malicious kernel. In response,
Van Bulck et al. [29] proposed an attack that can monitor
memory accesses at page granularity without interrupting
the enclave. A different mitigation strategy is making the
location of data unpredictable to stop the attacker from
extracting information from memory access patterns. On
this note, DR. SGX [5] performs ﬁne-grained randomiza-
tion of data by permuting it at cache line granularity.
just
Memory corruption. Enclaves,
like normal
applications, can suffer from memory corruptions vul-
nerabilities. SGXBounds [18] offers protection against
out-of-bounds memory accesses. Dark-ROP [19] is
a code-reuse attack that makes return-oriented pro-
gramming (ROP) [27] possible against encrypted SGX
enclaves. Haven [1, 2] and VC3 [24] deploy a symmet-
rically encrypted enclave along with a loader which will
receive the key through remote attestation. Such enclaves
cannot be analyzed or reverse engineered, as the key is
only available within an enclave whose integrity has been
veriﬁed via attestation. Therefore, typical ROP attacks do
not work. Dark-ROP proposes a way to dynamically ﬁnd
ROP gadgets by building a series of oracles [19]. Those
rely on being able to crash and reconstruct the enclave
multiple times while preserving the memory layout, and
possessing kernel privileges. Randomization schemes
such as SGX-Shield [26] challenge this assumption,
since the memory layout changes every time the enclave
is constructed. Further, SGX-Shield makes traditional
exploitation techniques extremely hard to apply because
it employs ﬁne-grained randomization and non-readable
code. However, in this paper, we present exploits that
undermine these mitigation techniques under weak
adversarial assumptions.
1214    27th USENIX Security Symposium
USENIX Association
3 SGX Background
In this section, we recall selected background infor-
mation on SGX. For a more thorough analysis, we refer
to [8] and Intel’s ofﬁcial reference manual on SGX [16].
3.1 Enclave Entry and Exit
SGX enclaves run on the same x86 processor as
ordinary application code does. As such, mechanisms
are required to switch between untrusted and trusted
execution modes, as shown in Figure 1. The SGX
instructions to interact with enclaves are organized as leaf
functions under two real instructions: ENCLS and ENCLU.
The former is used for kernel-mode operations, while
the second for user-mode operations. SGX accomplishes
synchronous enclave entry by means of the EENTER leaf
function, which is invoked via the ENCLU instruction. The
entry point is speciﬁed in the Thread Control Structure
(TCS) for the relevant thread. Since EENTER does not
clear the CPU registers, the untrusted code can pass
additional information to the entry point. For instance, an
enclave may expose various operations to its client. The
untrusted code could pass a parameter that indicates what
operation it wants the enclave to perform. To return back
to untrusted code, the enclave uses the EEXIT leaf. Just
like EENTER, EEXIT does not clear CPU registers, thereby
allowing trusted code to pass data to untrusted code.
An enclave can be entered multiple times concurrently
within the same thread. The number of concurrent entries
in the same thread is limited by the number of State Save
Areas (SSAs) deﬁned by the enclave. The SSA is used to
store enclave state during asynchronous exits, which are
described below. The number of SSAs (NSSA) ﬁeld in the
TCS deﬁnes how many SSAs are present.
Untrusted mode
Asynchronous
(on interrupt)
Trusted mode
(SGX)
Untrusted
code
AEX
ERESUME
EENTER
EEXIT
Synchronous
(on demand)
Trusted
code
An enclave can also exit because of a hardware ex-
ception (such as an interrupt), which needs to be handled
by the kernel in untrusted mode. This event is known
as Asynchronous Enclave Exit (AEX). When an AEX
occurs, the current enclave state is saved in an available
SSA and the register values are replaced with a synthetic
state before handing control to the interrupt handler.
The synthetic state ensures the enclave’s opacity and
avoids leakage of secrets. Once the interrupt is dealt with,
enclave execution can be resumed with the ERESUME leaf,
which restores the previous state from the SSA.
4 SGX SDK Internals
In this section, we review selected internal mechanisms
of the ofﬁcial SGX SDK[14, 15] that are relevant to our
attack. In general, SGX software is developed based on
the ofﬁcial SGX SDK, as it abstracts away the underlying
complexity of SGX. Two SDK-provided libraries are
vital for our attack and the correct execution of SGX code:
the Trusted Runtime System (tRTS) and the Untrusted
Runtime System (uRTS). While tRTS is executing inside
an enclave, uRTS runs outside the enclave. The tRTS and
uRTS interact with each other to handle the transitions
between trusted and untrusted execution modes.
4.1 ECALLs
The ECALL mechanism allows untrusted code to call
functions inside an enclave. The enclave programmer can
arbitrarily select which functions are to be exposed for the
ECALL interface. ECALLs can also be nested: untrusted
code can execute an ECALL while handling an OCALL
(see Section 4.2). The programmer can choose which
ECALLs are allowed at the zero nesting level, and which
are allowed for each speciﬁc OCALL. Every deﬁned
ECALL has an associated index. To perform an ECALL,
the application calls into the uRTS library, which exe-
cutes a synchronous enclave entry (EENTER), passing the
ECALL index in a register. We recall that EENTRY does
not clear the registers. The tRTS then checks whether an
ECALL with that index is deﬁned, and if it is allowed at
the current nesting level. If the checks pass, it executes
the target function. Once the function returns, it performs
a synchronous exit (EEXIT) to give control back to the
uRTS. Passing and returning arbitrarily complex data
structures is possible because SGX enclaves can access
untrusted memory. An enclave must expose at least an
ECALL, otherwise there is no way to invoke enclave
code: from the programmer’s perspective, an enclave’s
code always executes in ECALL context.
4.2 OCALLs
Figure 1: Enclave entry and exit mechanisms.
The OCALL mechanism, shown in Figure 2, allows
trusted code to call untrusted functions deﬁned by the host
USENIX Association
27th USENIX Security Symposium    1215
application. The need for OCALLs mainly stems from the
fact that system calls are not allowed inside an enclave.
Like ECALLs, each OCALL is identiﬁed by an index.
When the enclave code has to perform an OCALL, it calls
into the tRTS (step 1 of Figure 2). The tRTS ﬁrst pushes an
OCALL frame onto the trusted thread stack, which stores
the current register state (step 2). Next, it performs a syn-
chronous enclave exit to return from the current ECALL,
passing the OCALL index back to the uRTS (step 3). The
uRTS recognizes that the exit is for an OCALL and exe-
cutes the target function (step 4). Thereafter, it executes a
special variant of ECALL known as ORET (step 5), which
will restore the context from the OCALL frame through
a function named asm oret, thus returning to the trusted
callsite (step 6). ORET is implemented in the tRTS. Like
ECALLs, data is passed via shared untrusted memory.
4.3 Exception Handling
SDK enclaves can register handlers to catch exceptions
within the enclave. This exception handling mechanism
is shown in Figure 3. Upon an exception (e.g., invalid
memory access, division by zero) an asynchronous
enclave exit (AEX) occurs, which saves the faulting state
to the state save area (SSA). The resulting interrupt is
handled by the kernel, which delivers an exception to the
untrusted application by means of the usual exception
mechanism of the OS (e.g., signals in Linux-based
systems, structured exception handling in Windows).
An exception handler registered by the uRTS performs a
special ECALL to let the enclave handle the exception.
By default, SDK enclaves have two SSAs available
(speciﬁed in the NSSA ﬁeld in the TCS). Hence, it is
possible to re-enter the enclave while an AEX is pending.
The tRTS then copies the faulting state from the SSA to an
exception information structure on the trusted stack, and
changes the SSA contents so that ERESUME will continue
at a second-phase handler in the tRTS, instead of exe-
cuting the faulting instruction again. Once the ECALL
Untrusted
application
uRTS
l