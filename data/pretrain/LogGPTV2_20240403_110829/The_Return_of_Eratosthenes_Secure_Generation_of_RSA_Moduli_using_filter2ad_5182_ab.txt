way they significantly increase the probability of hitting a prime,
and therefore also increase the overall protocol efficiency. Their
distributed RSA modulus generation protocol follows the general
Boneh and Franklin paradigm.
A large scale implementation of the distributed RSA modulus
generation, and improvement of the previous work of Chen et al. [7],
namedDiogenes[8],isthemostrecentresultinthearea.Fromascala-
bility point of view, Diogenes [8] is the first MPC implementation for
a non-trivial task that scales to thousands of parties. To achieve effi-
ciency and scalability, Diogenes [8] deploys the so-called coordinator
model,whichisasettingconsistingofapowerful,honest-but-curious
coordinator, and thousands of relatively lightweight computation
parties. The RSA modulus generation protocol proposed in Dio-
genes [8] is secure against 𝑛 − 1 (out of the 𝑛) malicious parties.
Building upon the work of Chen et al. [7], Diogenes [8] also deploys
the CRT representation, and constructive sampling techniques. To
avoid the communication cost that pairwise messages incur, and to
exploit the potential of packing and SIMD to the fullest, Diogenes [8]
is based on a Ring LWE additively homomorphic encryption scheme
(AHE), where the semi-honest coordinator is tasked to perform all
the homomorphic additions necessary, as well as relay messages.
Malicious security for such a large scale application, is achieved by
a composition of zero-knowledge techniques, the certification of
Protocol
[5]
[16]
[31]
[20]
[1]
[12]
[22]
[23]
[17]
[7]
[8]
Ours
×
×
✓
✓
×
×
✓
Security DM #Parties
𝑛≥ 3
Passive
𝑛≥ 3
Active
Active
𝑛 =2
𝑛 =2
Passive
𝑛≥ 3
Passive
𝑛 =3∗
Active
𝑛≥ 2
Active
𝑛 =2
Active
𝑛≥ 2
Active
𝑛≥ 2
Active∗∗
𝑛≥ 2
Active
✓
✓
✓
✓
Test
NL
biprimality ✓
biprimality ✓
×
biprimality
biprimality ✓
primality
✓
primality
✓
biprimality ✓
×
biprimality
biprimality ✓
biprimality ✓
biprimality ✓
Table 1: Comparison of the related work. DM stands for
Dishonest Majority, and NL stands for No Leakage.
which is aggregated and verified only once, at the end of the protocol,
and only for the successful protocol iteration. In Table 1 the main
functionality and security features of our work and the related works
are summarized.
1.2 Our Contribution
In this work we show how to securely generate an RSA biprime in
the standard multiparty setting, where all parties contribute equally
to the computation. We assume a static active adversary who can cor-
ruptupto𝑛−1(outofthetotal𝑛)parties,butremarkthatourproposal
works with generic MPC, allowing the deployment of different secu-
ritymodels,basedontheneedsoftheapplicationathand.Thismakes
our protocol MPC-platform-independent, as it can be realized with
anyMPCtechnologythatisbasedonlinearsecretsharingtechniques.
For example, Shamir’s secret sharing [37] can be deployed, if our goal
is to produce the RSA moduli in the honest majority setting; or (a
variant of) the replicated secret sharing scheme of Araki et al. [2, 18],
shouldhighthroughputbethemaingoaloftheMPCimplementation.
Following the paradigm of recent work [7], we design a construc-
tive distributed sampling sub-protocol that increases the probability
of our overall protocol generating a biprime. Crucially, we achieve
this constructive sampling having the parties first sample multi-
plicative sharings of a certain form, and then transforming them
into additive sharings, by computing their product in a semi-honest
fashion. This does not degrade the security of the RSA generation
protocol, because subsequently we reveal the public biprime 𝑁 (i.e.,
the product of the sampled candidate primes 𝑝 and 𝑞). An adversary
who succeeds in introducing an additive error in the sharings of
𝑝 or 𝑞 that is consistent with the error in their product 𝑁 , should
effectively factor 𝑁 , which is hard by the original assumption for
an RSA biprime. This semi-honest multiplication presents itself as
a major bulk of the protocol’s cost, so the savings from performing
it semi-honestly are substantial.
∗The protocol can be non-trivially extended to support more than 3 parties, but
efficiency does not scale.
∗∗Diogenes works in the semi-honest coordinator model, and active security is only
guaranteed for the non-coordinating parties.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea596Another important technique we deploy is to run the biprimality
test in terms of checking the Jacobi symbol (which identifies most of
thebiprimessuccessfully)withoutcheckingtheconsistencyofthein-
put shares in the test. Note that the Jacobi test has to be repeated once
for each candidate and 𝜎 times for a candidate that passes the first
iteration of the test, for 𝜎 a statistical security parameter. This means
that any cost savings in this part of the protocol impact significantly
theoverallefficiency.Themorecomputationallyandcommunication
intensive consistency checks are only performed on the candidate
for which all repetitions of the Jacobi test have succeeded.
To perform the consistency check that follows the Jacobi symbol
test,ourprotocolrequirestoconvertaboundedadditivesharingfrom
its CRT representation to a single additive sharing over the integers.
This is to match the computations performed in the exponent over
theintegersforthecompletionoftheJacobitest.Wedesignaprotocol
that performs the aforementioned conversion, and we remark that in
additiontobeingnecessaryforourRSAmodulusgeneration,thispro-
tocol is of independent interest. For example, one of the PRF construc-
tions in Grassi et al. [21], requires the MPC preprocessing field to be
compatible with an elliptic curve group G. Our exponentiation proto-
col,withpublicoutputandsecretexponent,wouldmaketheirprepro-
cessing field compatible with the latest SHE techniques [3, 28], since
those require special primes, which might be incompatible with ellip-
tic curve groups. Our work might also improve the preprocessing ef-
ficiency in other works, which need to compute 𝑔𝑥 in public, where 𝑥
is secret shared [10, 24, 38], but we leave this for future investigation.
Lastly, we analyze our protocol, and set concrete parameters to
compute the communication cost it incurs. We also show how the
communication cost of our protocol scales in the number of parties,
and for different parameter sets. With conservative estimations, and
a statistical security parameter set to 𝜎 = 80, our protocol outper-
forms the current state-of-the-art [7] in all but one settings: the
semi-honest security with 16 parties setting. For malicious security,
and primes of 2048 bits, our protocol improves the previous work
by over 30 times, both in the two-party, and in the 16-party case.
To summarize, our main contributions are as follows:
(1) OurRSAmodulusgenerationprotocolworksforgenericMPC,
being able to leverage any MPC technology based on linear
secret sharing.
(2) We constructively sample candidate primes, transforming
multiplicative sharings to additive sharings, by computing
their product in a semi-honest fashion, which is checked for
maliciously inserted additive errors later in the protocol, re-
sulting in the protocol’s cost reduction.
(3) The first biprimality check, implemented by means of check-
ing the Jacobi symbol, is costly and repeated 𝜎 times in our
protocol. We show how to postpone the even costlier consis-
tency check on the shares contributed to the Jacobi test, in
order to again gain efficiency.
(4) We design a protocol to convert an additive sharing over
a ring to an additive sharing over the integers, which is of
independent interest.
(5) We demonstrate that our protocol improves the communica-
tion cost over the current state-of-the-art [7].
1.3 Technical Overview
Our main protocol, ΠRSAGen, works in five distinct phases: (1) the
sampling phase, aiming at generating two prime numbers 𝑝 and
𝑞, secret shared among the protocol participants; (2) the combine
phase, computing the product 𝑁 of the previously sampled candidate
primes, which is securely computed and then revealed to all parties;
(3) the Jacobi test, checking whether the computed 𝑁 is a biprime; (4)
the consistency check, ensuring input consistency in the presence
of malicious adversaries, should the Jacobi test indicate a candidate
biprime; and (5) the GCD test, which checks again whether 𝑁 is a
biprime, to ensure that the protocol did not accept a false positive
that the Jacobi test may not catch.
Our Sampling phase first deploys a technique similar to the one
introduced by Malkin et al. [29], which they term distributed siev-
ing. Distributed sieving entails each party sampling a multiplicative
share for each of the two primes 𝑝 and 𝑞, then performing a (semi-
honest) multiplication on these shares, and then re-share them to
transform them into additive shares. With the distributed sieving
we increase the probability of sampling primes 𝑝 and 𝑞. Similarly
to recent related work [7, 8], we leverage the Chinese Remainder
Theorem (CRT) to further increase the efficiency of our protocol. To
this end, we show how to extend the standard actively secure MPC
functionality to work on separate MPC engines: one for each of the
CRT components we consider. We call this functionality FMPC-CRT.
In the Combine phase of ΠRSAGen, based on the aforementioned
FMPC-CRT functionality, we perform an actively secure multiplica-
tion between the two sampled primes, we reveal the result to all
parties, and check whether the product falls within the predeter-
mined bounds, and whether it is coprime to a value 𝑀sample, which
is the product of ℓ(𝜆) primes. Should both of these checks pass, the
combine phase is completed and we proceed to the Jacobi test on the
generated candidate biprime.
The Jacobi test aims at establishing whether the product 𝑁 is a
biprime. Although this test introduces no false negatives, it has a
probability of 1/2 of introducing a false positive (i.e., accepting a
non-biprime). To increase the probability of 𝑁 being a biprime to 2−𝜎
(before proceeding to the ultimate GCD test) we repeat the Jacobi
test 𝜎 times. The core of the Jacobi test lies in a secure exponentiation
protocol, with public output, where the computations in the expo-
nent are performed over the integers. We deploy the exponentiation
protocol proposed by Grassi et al. [21] to compute the desired Jacobi
symbol. If the Jacobi symbol is ±1, we proceed to the next phase,
which is the Consistency Check.
The consistency check ensures that the protocol will abort, in the
presence of active adversaries who have input inconsistent shares
of the candidate primes. To achieve this, we carefully mask the expo-
nent of the Jacobi test, with bounded randomness (for which we have
devised a specialized protocol, ΠRand2k) so that all computations are
performed over the integers without wrap around. Then, the masked
value itself needs to be an additive sharing over the integers. To this
end, we have devised a protocol to convert an additive sharing over
a ring, into an additive sharing over the integers, named ΠConvInt.
By ensuring that indeed no computation wrapped around, we check
an equivalent relationship for the exponentiation performed for the
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea597Algorithm CRTrec((𝑥𝑝1,...,𝑥𝑝ℓ ),(𝑝1,...,𝑝ℓ))
(2) For all 𝑖 ∈ {1, ...,ℓ} compute 𝑁𝑖 = 𝑁/𝑝𝑖 and find 𝑀𝑖 satisfying
(1) Compute 𝑁 =ℓ
(3) Compute 𝑥 =ℓ
𝑁𝑖 ·𝑀𝑖 =1 mod 𝑝𝑖.
𝑖=1𝑝𝑖.
𝑖=1𝑥𝑝𝑖 𝑁𝑖 𝑀𝑖 mod 𝑁 .
Figure 1: CRT Reconstruction Algorithm.
Jacobi symbol computation, which serves as a proof of input consis-
tency of the shares contributed by each party to the Jacobi test. This
ensures security against malicious adversaries.
The last phase of our protocol aims at eliminating any false pos-
itives that are not filtered out by the Jacobi test. Concretely, in the
GCD phase we wish to verify that gcd(𝑁 ,(𝑝+𝑞+1)) =1. This phase