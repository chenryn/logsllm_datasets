540x960 (258dpi)
0.4
0.5
0.9
0.6
Table 1: Smallest y coordinate reported by various
Android devices. The last column shows the size in
mm.
also shows that the values are slightly worse for the runs
with the thumb. This is not surprising as the thumb covers
a larger screen area and therefore can only be positioned
less accurately compared to the index ﬁnger. At a size of
1.2mm the hit rates for thumb and index ﬁnger more or less
match which indicates a reasonable size for the SLI. What is
interesting is that while further increasing the SLI size the
hit rates seem to slightly drop. We think this is due to the
exhaustion of the proband who with the increased SLI size
becomes less concentrated.
The key results from this experiment are
• There is a lower bound for the widget size to be touch-
able.
• To achieve reasonable hit rates the size of the SLI must
not be smaller than 1.2mm.
In a third experiment we measured the inﬂuence of the
size of the SLI on the perceptibility under diﬀerent envi-
ronmental conditions. For the experiment we used the three
primary colors red, green and blue for the SLI. We generated
two other sets of colors by reducing either the saturation and
the brightness to 50%. This created darker shades of red,
green and blue and a set with a pastel like tint. For the ex-
periment we used each of those 9 colors in a random order to
tint the SLI. Each conﬁguration was shown to the proband
for one second. The proband then had to decide which color
the SLI had and how good their subjective recognition was.
We chose two diﬀerent locations for the experiment and
used three diﬀerent SLI sizes (0.4mm, 1.0mm, 1.5mm). We
conducted the ﬁrst series in a standard oﬃce environment
and the second one outdoors during noon while the sun was
shining. We used an ambient light sensor of another smart-
phone to estimate the illumination level of the location. The
oﬃce location had around 300lux while we measured around
40.000lux outside. We set the display brightness of our test
device to 100 percent.
We expected the perceptibility of the diﬀerent colors to
be no problem in the oﬃce location. In fact even with the
smallest SLI size the error rate was less than 5 percent. All
probands said that they were able to easily recognize the
diﬀerent colors. The errors resulted from probands confusing
a color with its darker or lighter shade.
This observation changed when we repeated the exper-
iment outside in the sun. With the smallest SLI size of
0.4mm the error rate sprung over 50 percent. The dark
shades of red, green and blue were basically indistinguish-
able. The situation improved when we increased the SLI
size to 1.0mm and 1.5mm. The error rate dropped to 25
percent which is still signiﬁcantly higher than compared to
the indoor results. The probands were able to recognize
the correct hue but distinction between the diﬀerent color
shades was diﬃcult. All probands had problems recognizing
(a) Indoor, all colors can be
distinguished.
(b) Outdoor, reﬂections and
bright light make it hard to
distinguish colors.
Figure 9: The two pictures demonstrate how the
same set of colors is displayed under indoor and out-
door conditions. Outdoors colors with a dark shade
are basically not recognizable. Colors with diﬀerent
saturation appear to be equal.
the dark shaded colors. A photo of how the colors are visible
under indoor and outdoor conditions is depicted in Figure 9.
The results from all three experiments are:
• There is a lower bound for the widget size to be touch-
able which is about 0.6mm.
• The SLI must not be smaller than 1.5mm to be recog-
nizable under indoor and outdoor conditions.
• The brightness of colors should be as high as possible
to make them easily distinguishable under bright light.
As a conclusion the SLI must not be smaller than 1.5mm. As
we described in Section 4.2 the SLI may display the name of
the active VM. With that requirement the height of 1.5mm
is too small. This would make the text label unreadable.
Because there is always a trade-oﬀ between providing max-
imum screen size to VMs and the SLI size we recommend a
size of at least 2.5mm.
6.2 Security Analysis
In this section we discuss how Crossover is able to mitigate
the threats described in Section 3.
In Crossover each VM receives its own framebuﬀer. Each
framebuﬀer memory region is page aligned. This ensures
that no framebuﬀer shares a memory page with another
framebuﬀer. The microkernel takes care of isolating dif-
ferent memory regions by correctly creating the page ta-
bles. As long as the microkernel is not subverted by an
attacker, the memory management unit (MMU) ensures iso-
lation between diﬀerent framebuﬀers. This mechanism pre-
vents screen scraping attacks and no VM can read the frame-
buﬀer memory of another VM.
To prevent lookalike attacks Crossover implements the
SLI. It acts as a trusted path to the user. The SLI claims a
small portion of the screen to display information about the
active VM. This includes a color and an optional text label.
This information lets the user convey which VM is active,
no matter how the VM presents itself. The SLI is drawn
255
into its own framebuﬀer and therefore it is not accessible
and cannot be tampered with by a VM.
Crossover is able to prevent spying attacks. As outlined
in Section 3 all VMs can run in parallel. This would po-
tentially allow a VM to wiretap the stream of input events.
This attack is thwarted by the multiplexing component. Ac-
cording to the deﬁned policy only the active VM receives
input events. Thus a background VM does not receive in-
put events. Crossover does not prevent wiretapping input
events within a VM.
The fourth threat Crossover is targeting is a DoS attack
on the UI to prevent background VMs from becoming the ac-
tive VM (or vice versa). In Crossover a VM is never aware of
its own state (active or background). Because VM switches
are initiated by Crossover a VM cannot prevent the switch
from happening. Together with mag, Crossover reassigns
the resources to the new active VM. Still a background VM
can use the CPU and network to negatively impact the per-
formance and battery.
Compared to a native setup without virtualization the
design of Crossover adds complexity to the trusted comput-
ing base (TCB). But this complexity is actually an advan-
tage because components which previously where not iso-
lated against each other (such as drivers for input and the
framebuﬀer) now run in their own address space in userland.
This reduces the attack surface. A VM does not have direct
access to the display hardware and an attacker ﬁrst has to
compromise the mobile OS within the VM and then he needs
to exploit the multiplexing component through the virtual
input or framebuﬀer driver. The virtual input driver does
not allow bidirectional communication with mag. Only the
virtual framebuﬀer driver is able to communicate with mag
to set certain properties. But this interface is very lean and
we are conﬁdent that it cannot be exploited to attack other
VMs.
7. RELATED WORK
In [13] Selhorst et al. describe a trusted mobile desktop
which displays a trusted bar and securely multiplexes the
hardware framebuﬀer. Their m-gui is an adapted version
of its desktop pendant. Multiple ways of switching to dif-
ferent compartments are implemented using buttons on the
main screen or clicking the trust bar to iterate through all
available compartments. M-gui does not address the han-
dling of device-global functions such as audio volume and
display brightness which are shared between multiple com-
partments.
VMWare’s Mobile Virtualization Platform (MVP) [8] aims
at addressing manageability, cost, compliance and deploy-
ment problems in enterprises. It is a type-2 hypervisor ar-
chitecture implemented for Android. MVP allows to run one
Android guest VM. The guest is considered to be the secure
environment for business applications. To switch between
the host and the guest Android an additional application
is placed in the Android application launcher. MVP does
not implement a secure GUI but the host and the guest can
leverage the full 3D graphics capabilities of the respective
platform. A compromised host OS may launch successful
DoS or phishing attacks on the guest.
In [11] Gudeth et al. recommend the use of bare metal
virtualization to increase mobile device security. Their ar-
chitecture enables trusted applications to be protected de-
spite of a compromise of the commodity OS and aims at
minimizing the system’s trusted computing base. They did
not address a secure UI.
Cells [7] is a virtualization solution for mobile devices
which leverages the Linux namespace mechanism to create
multiple virtual phones (VPs) on one device. Cells’ VPs
feature fully accelerated 3D graphics which revealed no vis-
ible performance degradation during a human UI test. The
trusted computing base of each VP includes the whole Linux
kernel and all VPs share the same instance of the Linux ker-
nel. Switching between VPs is implemented using a one-
ﬁnger swipe gesture on the Android home screen or using a
special key combo. Cells does not have an indicator for the
active VM and the user cannot reliably tell diﬀerent VMs
apart.
Qubes OS [14] is a desktop OS aimed at providing high
security. It is based on Xen and Qubes runs each application
in its own AppVM. Qubes provides isolation at the UI level
between each application. AppVMs are assigned to a cer-
tain security domain and have a color label. Thus the user
can easily convey the security domain of each application.
In [15] Feske addresses the problems of quality of service,
the coexistence of legacy and secure GUIs as well as secure
client side window management on desktop systems. Both
solutions are aimed at windowing based environments and
do not ﬁt the needs of mobile devices.
The Blackberry Z10’s OS is based on the QNX micro-
kernel and promises to oﬀer a business and a private par-
tition. A preliminary security investigation has been con-
ducted in [16]. On the OS level the private and the business
environment are separated by the means of Unix’s user and
group permissions. There is no distinction on the UI level.
8. CONCLUSION AND FUTURE WORK
In this paper we presented Crossover, a solution for a se-
cure and usable UI for mobile devices. Our prototype imple-
mentation is based on the L4Android framework and runs
on a real smartphone, the Samsung Galaxy S2.
Crossover provides a framework which deﬁnes the require-
ments and properties of a secure and usable UI to man-
age several diﬀerent OS environments on one device. With
Crossover a user can trust that the OS personality they see
is the one they deal with. Further the framework allows to
manage global device settings. We showed that Crossover
is able to withstand wiretapping, look-alike and denial of
service attacks.
This makes Crossover the ﬁrst solution which allows the
user to securely manage multiple OS personalities on one
mobile device.
8.1 Future Work
Future versions of Crossover may extend its functional-
ity to manage the lifecycle of multiple VMs. Having both
the private and the corporate environment on one device
may make it hard for employees to distinguish between the
job and recreational time. Recent surveys [17] point to an
always-on culture resulting from BYOD. So it may be desir-
able to switch oﬀ the business VM after work, on weekends
or on vacation. This especially holds true for e.g. a devel-
opment VM which is only temporarily needed.
Another future research question could be how Crossover
can be made accessible. Right now the two ﬁnger swipe
gesture is not suitable for one-armed people. Crossover is
also not usable for people without eyesight.
256
for Secure Smartphones. In Proceedings of the 1st
ACM Workshop on Security and Privacy in
Smartphones and Mobile Devices, SPSM ’11, 2011.
[10] Gernot Heiser. Virtualizing embedded systems: why
bother? In Proceedings of the 48th Design Automation
Conference, DAC ’11, pages 901–905, New York, NY,
USA, 2011. ACM.
[11] Kevin Gudeth, Matthew Pirretti, Katrin Hoeper, and
Ron Buskey. Delivering Secure Applications on
Commercial Mobile Devices: the Case for Bare Metal
Hypervisors. In Proceedings of the 1st ACM workshop
on Security and privacy in smartphones and mobile
devices, SPSM ’11, pages 33–38, New York, NY, USA,
2011. ACM.
[12] M. Niemietz and J. Schwenk. UI Redressing Attacks
on Android Devices, 2012.
[13] Marcel Selhorst, Christian St¨uble, Florian Feldmann,
and Utz Gnaida. Towards a trusted mobile desktop. In
Proceedings of the 3rd international conference on
Trust and trustworthy computing, TRUST’10, 2010.
[14] Joanna Rutkowska and Rafal Wojtczuk. Qubes OS
Architecture.
[15] Norman Feske. Securing Graphical User Interfaces.
PhD thesis, Technische Universit¨at Dresden, 2009.
[16] Alexander Antukh. Blackberry z10 research primer -
dissecting blackberry 10 – an initial analysis.
Technical report, May 2013.
[17] iPass. The iPass Global Mobile Workforce Report.
Technical report, September 2012.
In the future Crossover also needs to address the question
of how to securely handle 3D graphics. Today’s mobile UIs
heavily rely on hardware accelerated graphics. We plan to
investigate how hardware accelerated 3D graphics can be
incorporated into the Crossover design and how the GPU
can be securely multiplexed between multiple clients.
9. ACKNOWLEDGEMENTS
We would like to thank our probands for their patience
during our experiments. We would also like to thank Jean
Wolter, Janis Danisevskis, Jan Nordholz, Adam Lackorzyn-
ski and Alexander Warg who helped implementing earlier
versions of the system. This research was funded in part by
the BMWF grant 01IS12032.
10. REFERENCES
[1] Coverity Inc. Coverity Scan 2010 Open Source
Integrity Report.
http://www.coverity.com/html/press/coverity-
scan-2010-report-reveals-high-risk-software-
flaws-in-android.html, 2010.
[2] Barrera, D and Kayacik, H. G. and van Oorschot, P.
C. and Somayaji, A. A methodology for empirical
analysis of permission-based security models and its
application to android. In Proceedings of the 17th
ACM conference on Computer and communications
security, CCS ’10, pages 73–84, New York, NY, USA,
2010. ACM.
[3] W. Enck, D. Octeau, P. Mcdaniel and S. Chaudhuri. A
Study of Android Application Security. In Proceedings
of the 20th USENIX Security Symposium, 2011.
[4] J. Bickford, R. O’Hare, A. Baliga, V. Ganapathy and
L. Iftode. Rootkits on smart phones: attacks,
implications and opportunities. In Proceedings of the
Eleventh Workshop on Mobile Computing Systems and
Applications, HotMobile ’10, pages 49–54, New York,
NY, USA, 2010. ACM.
[5] Jenny Rains. Bring Your Own Device: Hot or Not?
http://www.hdiconnect.com/\~/media/HDICorp/
Files/Research-Corner/RC\_BYOD\_March2012.pdf.
[6] Sven Bugiel, Lucas Davi, Alexandra Dmitrienko,
Stephan Heuser, Ahmad-Reza Sadeghi, and Bhargava
Shastry. Practical and Lightweight Domain Isolation
on Android. In Proceedings of the 1st ACM workshop
on Security and privacy in smartphones and mobile
devices, SPSM ’11, pages 51–62, New York, NY, USA,
2011. ACM.
[7] Jeremy Andrus, Christoﬀer Dall, Alexander Van’t Hof,
Oren Laadan, and Jason Nieh. Cells: A Virtual
Mobile Smartphone Architecture. In Proceedings of the
Twenty-Third ACM Symposium on Operating Systems
Principles, SOSP ’11, pages 173–187, New York, NY,
USA, 2011. ACM.
[8] Ken Barr, Prashanth Bungale, Stephen Deasy, Viktor
Gyuris, Perry Hung, Craig Newell, Harvey Tuch, and
Bruno Zoppis. The VMware Mobile Virtualization
Platform: Is That a Hypervisor in Your Pocket?
SIGOPS Oper. Syst. Rev., 44(4):124–135, December
2010.
[9] Matthias Lange, Steﬀen Liebergeld, Adam
Lackorzynski, Alexander Warg, and Michael Peter.
L4Android: A Generic Operating System Framework
257