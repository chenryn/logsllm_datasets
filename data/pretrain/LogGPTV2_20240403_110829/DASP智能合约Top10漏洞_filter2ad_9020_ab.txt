  * 一个聪明的合约的withdraw()功能，您可以为您的余额仍是手术后积极检索，只要捐赠合约醚。
  * 一个攻击者试图收回比他或她的当前余额多。
  * 该withdraw()功能检查的结果总是正数，允许攻击者退出超过允许。
  * 由此产生的余额下降，并成为比它应该更大的数量级。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
最直接的例子是一个不检查整数下溢的函数，允许您撤销无限量的标记：
    function withdraw(uint _amount) {
        require(balances[msg.sender] - _amount > 0);
        msg.sender.transfer(_amount);
        balances[msg.sender] -= _amount;
    }
第二个例子（在无益的Solidity编码竞赛期间被发现[https://github.com/Arachnid/uscc/tree/master/submissions-2017/doughoyte）](https://github.com/Arachnid/uscc/tree/master/submissions-2017/doughoyte%EF%BC%89)  
是由于数组的长度由无符号整数表示的事实促成的错误的错误：
    function popArrayOfThings() {
        require(arrayOfThings.length >= 0);
        arrayOfThings.length--; 
    }
第三个例子是第一个例子的变体，其中两个无符号整数的算术结果是一个无符号整数：
    function votes(uint postId, uint upvote, uint downvotes) {
        if (upvote - downvote  SafeMath防止溢出  
> 
>
> 整数溢出代码示例  
>  contracts/tree/master/integer_overflow>
* * *
##
## 4.未检查返回值的低级别调用
也称为或与无声失败发送， 未经检查发送。
> 应尽可能避免使用低级别“呼叫”。如果返回值处理不当，它可能会导致意外的行为。——Remix
其中的密实度的更深层次的特点是低级别的功能call()，callcode()，delegatecall()和send()。他们在计算错误方面的行为与其他Solidity函数完全不同，因为他们不会传播（或冒泡），并且不会导致当前执行的全部回复。相反，他们会返回一个布尔值设置为false，并且代码将继续运行。这可能会让开发人员感到意外，如果未检查到这种低级别调用的返回值，则可能导致失败打开和其他不想要的结果。请记住，发送可能会失败！
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> 以太之王——  
>  Etherpot——
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
  * 下面的代码是一个当忘记检查返回值时会出错的例子send()。
  * 如果调用用于将ether发送给不接受它们的智能合约（例如，因为它没有应付回退功能）
  * 则EVM将用其替换其返回值false。
  * 由于在我们的例子中没有检查返回值，因此函数对合约状态的更改不会被恢复，并且etherLeft变量最终会跟踪一个不正确的值：
    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount);
        balances[msg.sender] -= _amount;
        etherLeft -= _amount;
        msg.sender.send(_amount);
    }
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90)其他资源
> 未经检查的外部电话  
>  contracts/tree/master/unchecked_external_call>
>
> 扫描“未经检查 – 发送”错误的现场以太坊合约  
>  for-bugs/>
* * *
## 5.拒绝服务
包括达到气量上限，意外抛出，意外杀死，访问控制违规
> I accidentally killed it. ————devops199 on the Parity multi-sig wallet
* * *
  * 在以太坊的世界中，拒绝服务是致命的：
  * 尽管其他类型的应用程序最终可以恢复，但智能合约可以通过其中一种攻击永远脱机。
  * 许多方面导致拒绝服务，包括在作为交易接受方时恶意行为
  * 人为地增加计算功能所需的gas，滥用访问控制访问智能合约的私人组件
  * 利用混淆和疏忽，…这类攻击包括许多不同的变体，并可能在未来几年看到很多发展。
> 损失：估计为514,874 ETH（当时约3亿美元）
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> 政府  
>
> 
>
> 奇偶校验多信号钱包  
>  destruct/>
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
  * 一个拍卖合约允许它的用户出价不同的资产。
  * 为了投标，用户必须bid(uint object)用期望的以太数来调用函数。
  * 拍卖合约将把以太保存在第三方保存中，直到对象的所有者接受投标或初始投标人取消。
  * 这意味着拍卖合约必须在其余额中保留未解决出价的全部价值。
  * 该拍卖合约还包括一个withdraw(uint amount)功能，它允许管理员从合约获取资金。
  * 随着函数发送amount到硬编码地址，开发人员决定公开该函数。
  * 一个攻击者看到了潜在的攻击和调用功能，指挥所有的合约的资金为其管理员。
  * 这破坏了托管承诺并阻止了所有未决出价。
  * 虽然管理员可能会将托管的钱退还给合约，但攻击者可以通过简单地撤回资金继续进行攻击。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
在下面的例子中（受以太王的启发[http://blockchain.unica.it/projects/ethereum-survey/attacks.html#kotet）](http://blockchain.unica.it/projects/ethereum-survey/attacks.html#kotet%EF%BC%89)  
游戏合约的功能可以让你成为总统，如果你公开贿赂前一个。不幸的是，如果前总统是一个聪明的合约，并导致支付逆转，权力的转移将失败，恶意智能合约将永远保持总统。听起来像是对我的独裁：
    function becomePresident() payable {
        require(msg.value >= price); // must pay the price to become president
        president.transfer(price);   // we pay the previous president
        president = msg.sender;      // we crown the new president
        price = price * 2;           // we double the price to become president
    }
在第二个例子中，调用者可以决定下一个函数调用将奖励谁。由于for循环中有昂贵的指令，攻击者可能会引入太大的数字来迭代（由于以太坊中的气体阻塞限制），这将有效地阻止函数的功能。
    function selectNextWinners(uint256 _largestWinner) {
        for(uint256 i = 0; i  奇偶Multisig被黑客入侵。再次  
>  again-b46771eaa838>
>
> 关于Parity multi-sig钱包漏洞和Cappasity令牌众包的声明  
>  vulnerability-and-the-cappasity-artoken-crowdsale-b3a3fed2d567>
* * *
##
## 6.错误随机
也被称为没有什么是秘密的
>
> 合约对block.number年龄没有足够的验证，导致400个ETH输给一个未知的玩家，他在等待256个街区之前揭示了可预测的中奖号码。—————阿森尼罗托夫
* * *
  * 以太坊的随机性很难找到。
  * 虽然Solidity提供的功能和变量可以访问明显难以预测的值
  * 但它们通常要么比看起来更公开，要么受到矿工影响。
  * 由于这些随机性的来源在一定程度上是可预测的，所以恶意用户通常可以复制它并依靠其不可预知性来攻击该功能。
> 损失：超过400 ETH
###
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E5%BD%B1%E5%93%8D)真实世界影响
> SmartBillions彩票  
>
> 
>
> TheRun  
>  bugs-and-what-we-can-do-about-them-119aa2843007>
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E7%A4%BA%E4%BE%8B)示例
  1. 甲智能合约使用块号作为随机有游戏用的源。
  2. 攻击者创建一个恶意合约来检查当前的块号码是否是赢家。如果是这样，它就称为第一个智能合约以获胜; 由于该呼叫将是同一交易的一部分，因此两个合约中的块编号将保持不变。
  3. 攻击者只需要调用她的恶意合同，直到获胜。
[](/myblog/%E5%8C%BA%E5%9D%97%E9%93%BE/dasptop10.html#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B)代码示例
在第一个例子中，a private
seed与iteration数字和keccak256散列函数结合使用来确定主叫方是否获胜。Eventhough的seed是private，它必须是通过交易在某个时间点设置，并因此在blockchain可见。
    uint256 private seed;
    function play() public payable {
        require(msg.value >= 1 ether);
        iteration++;
        uint randomNumber = uint(keccak256(seed + iteration));
        if (randomNumber % 2 == 0) {
            msg.sender.transfer(this.balance);
        }
    }