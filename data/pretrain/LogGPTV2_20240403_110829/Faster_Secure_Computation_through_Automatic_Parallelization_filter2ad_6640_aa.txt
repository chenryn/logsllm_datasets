title:Faster Secure Computation through Automatic Parallelization
author:Niklas B&quot;uscher and
Stefan Katzenbeisser
Faster Secure Computation through 
Automatic Parallelization
Niklas Buescher and Stefan Katzenbeisser, Technische Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/buescher
This paper is included in the Proceedings of the 24th USENIX Security SymposiumAugust 12–14, 2015 • Washington, D.C.ISBN 978-1-939133-11-3Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXFaster Secure Computation through Automatic Parallelization
Niklas Buescher
Technische Universit¨at Darmstadt
Stefan Katzenbeisser
Technische Universit¨at Darmstadt
Abstract
Secure two-party computation (TPC) based on Yao’s gar-
bled circuits has seen a lot of progress over the past
decade. Yet, compared with generic computation, TPC
is still multiple orders of magnitude slower. To improve
the efﬁciency of secure computation based on Yao’s
protocol, we propose a practical parallelization scheme.
Its advances over existing parallelization approaches are
twofold. First, we present a compiler that detects paral-
lelism at the source code level and automatically trans-
forms C code into parallel circuits. Second, by switching
the roles of circuit generator and evaluator between both
computing parties in the semi-honest model, our scheme
makes better use of computation and network resources.
This inter-party parallelization approach leads to signiﬁ-
cant efﬁciency increases already on single-core hardware
without compromising security. Multiple implementa-
tions illustrate the practicality of our approach. For in-
stance, we report speed-ups of up to 2.18 on 2 cores and
4.36 on 4 cores for the example application of parallel
modular exponentiation.
1
Introduction
In the thirty years since Yao’s seminal paper [34], Secure
Multiparty Computation (MPC) and Secure Two-Party
Computation (TPC) have transitioned from purely theo-
retic constructions to practical tools. In TPC, two parties
jointly evaluate a function f over two inputs x and y pro-
vided by the parties in such a way that each party keeps
its input unknown to the other. TPC enables the con-
struction of privacy-enhancing technologies which pro-
tect sensitive data during processing steps in untrusted
environments.
Many privacy enhancing implementations use the ap-
proach of “garbled circuits” introduced by Yao in the
1980s, where f is transformed into a Boolean circuit Cf
and encrypted in a special way. Beginning with the real-
ization of the ﬁrst practical implementation of Yao’s pro-
tocol by Fairplay in 2004 [27], theoretical and practical
advances, including Garbled-row-reduction [31], free-
XOR [21], garbling from ﬁxed-key blockciphers [5] and
others have led to a signiﬁcant speed-up of Yao’s original
protocol. Furthermore, high-level language compilers
[14, 22, 23] that demonstrate the usability of Yao’s pro-
tocol have been developed. Nowadays, millions of gates
can be garbled on off-the-shelf hardware within seconds.
Nonetheless, compared with generic computation, Yao’s
garbled circuits protocol is still multiple orders of mag-
nitudes slower. Even worse, recently Zahur et al. [36]
indicated that the information theoretic lower bound on
the number of ciphertexts for gate-by-gate garbling tech-
niques has been reached. Hence, further simpliﬁcation
of computations is unlikely.
Observing the ongoing trend towards parallel hard-
ware, e.g., many-core architectures on a single chip, we
investigate whether parallelism within Yao’s protocol tar-
geting security against semi-honest adversaries can be
exploited to further enhance its performance. To the
best of our knowledge, all previous parallelization efforts
have focused on Yao’s protocol secure against malicious
adversaries, which is easily parallelizable by “design”, or
explored the parallelization possibilities of semi-honest
Yao to only limited extent (see § 2) by using manually
annotated parallism in handcrafted circuits.
Therefore, in this paper we systematically look at three
different levels of automatic parallelization that have the
potential to signiﬁcantly speed up applications based on
secure computation:
Fine-grained parallelization (FGP). As the ﬁrst step,
we observe that independent gates, i.e., gates that do not
provide input to each other, can be garbled and evaluated
in parallel. Therefore, a straight forward parallelization
approach is to garble gates in parallel that are located at
the same circuit depth, because these are guaranteed to be
independent. We refer to this approach as ﬁne-grained
parallelization (FGP) and show that this approach can
USENIX Association  
24th USENIX Security Symposium  531
be efﬁcient for circuits of suitable shape. For example,
when securely computing a matrix-vector multiplication
with 3 million gates, we report a speed-up of 2.4 on 4
cores and 7.5 on 16 cores. Nevertheless, the achievable
speed-up heavily depends on circuit properties such as
the average circuit width, which can be comparably low
even for larger problems when compiling from a high-
level language, as we show.
Coarse-grained parallelization (CGP). To overcome
the limitations of FGP for inadequately shaped circuits,
we make use of high-level circuit descriptions, such as
program blocks, to automatically detect larger coherent
clusters of gates that can be garbled independently. We
refer to this parallelization as coarse-grained paralleliza-
tion (CGP). As one of our main contributions, we ex-
tend the CBMC-GC compiler of Holzer et al. [14], which
translates functionalities described in ANSI-C into cir-
cuits, with the capability to detect concurrency at the
source code level. This enables the compilation of par-
allel circuits. Hence, one large circuit is automatically
divided into multiple smaller, independently executable
circuits. We show that these circuits lead to more scal-
able and faster execution on parallel hardware. For
example, the matrix-vector multiplication circuit, men-
tioned above, scales with a speed-up of 3.9 on 4 cores
and a speed-up of 12 on 16 cores, thus, signiﬁcantly out-
performing FGP. Furthermore, integrating automatic de-
tection of parallel regions into a circuit compiler gives
potential users the opportunity to exploit parallelism
without knowledge of the internals of Yao’s garbled cir-
cuits and relieves them of writing parallel circuits.
Inter-party parallelization (IPP). Finally, we present
an extension to Yao’s garbled circuit protocol secure
against semi-honest adversaries to balance the compu-
tation costs of both parties. In the original protocol (us-
ing the defacto standard point-and-permute optimization
[4, 27]), the garbling party has to perform four times the
cryptographic work than the evaluating party. Hence, as-
suming similar computational capabilities the overall ex-
ecution time is dominated by the garbling costs. Given
the identiﬁed coarse-grained parallelism, the idea of our
protocol is to divide the work in a symmetric manner be-
tween both parties by switching the roles of the garbling
and evaluating party to achieve better computational re-
source utilization without compromising security in the
semi-honest model. This approach can greatly reduce the
overall runtime. By combining CGP and IPP, we report a
speed-up over a serial implementation of 2.14 when us-
ing 2 cores and a speed-up of 4.34 when using 4 cores
for the example application of a modular exponentiation.
Summarizing our results, the performance of Yao’s
protocols secure against semi-honest adversaries can sig-
niﬁcantly be improved by using automatic paralleliza-
tion.
Outline. Next, we discuss related work. An introduc-
tion of the used primitives and tools is given in § 3. In
§ 4 we discuss FGP, CGP, and present our parallel cir-
cuit compiler. Moreover, we introduce the IPP protocol
in § 5. In § 6 we evaluate our approaches on practical
example applications.
2 Related Work
We give a short overview on parallelization approaches
for Yao’s garbled circuits in the semi-honest model, be-
fore discussing solutions in the malicious model. Fur-
thermore, we discuss parallel compilation approaches for
multi-party computation.
Semi-honest model. Husted et al. [17] showed a CPU
and GPU parallelization with signiﬁcant speed-ups on
both architectures. Their approach is based on the idea of
integrating an additional encryption layer between every
circuit level to enable efﬁcient ﬁne-grained paralleliza-
tion. However, their approach signiﬁcantly increases the
communication costs by sending one additional cipher-
text per XOR gate. Moreover, bandwidth saving opti-
mizations, such as garbled row reduction, are incompati-
ble. This is undesirable, as network bandwidth is already
a signiﬁcant bottleneck.
Barni et al. [3] proposed a parallelization scheme simi-
lar to ours, which distinguishes between ﬁne- and coarse-
grained parallelism. Their approach showed speed-ups
for two example applications. However, their coarse-
grained approach requires manual user interaction to an-
notate parallelism in handcrafted circuits. Unfortunately,
their timing results are hardly comparable with other
work, due to the missing implementation of concurrent
circuit generation and evaluation, which is required to
garble larger circuits.
Most recently, Nayak et al. [30] presented an orthog-
onal and complementary work to ours. Their framework
GraphSC supports the parallel computation of graph ori-
ented applications using RAM based secure computa-
tion. GraphSC shows very good scalability for data in-
tensive computations. Parallelism has to be annotated
manually and has to follow the Pregel [26] pattern. To
exploit further parallelism within different computing
nodes of GraphSC, the ideas presented in this work could
be exploited.
Malicious model. The “Billion gates” framework by
Kreuter et al. [23] was designed to execute large circuits
on cluster architectures. The framework supports paral-
lelization in the malicious model using message passing
technologies. Frederiksen et al. [11] also addressed the
malicious model, yet they targeted the GPU as execu-
tion environment.
In both cases, the protocol is based
upon the idea of cut-and-choose, which consists of mul-
532  24th USENIX Security Symposium 
USENIX Association
2
tiple independent executions of Yao’s protocol secure
against semi-honest adversaries. This independence en-
ables naive parallelization up to the constant number of
circuits required for cut-and-choose. Unfortunately, this
degree of parallelism cannot be transferred to the semi-
honest setting considered in this paper.
Parallel compiler. Zhang et al. [37] presented a com-
piler for distributed secure computation with applications
for parallelization. Their compiler converts manually an-
notated parallelism in an extension of C into secure im-
plementations. Even so the compiler is targeting MPC
and not TPC, it could be used as an additional front-end
to the ideas presented in this work.
In summary, up to now there is no work that ad-
dresses parallelization of Yao’s protocol in the semi-
honest model without making compromises towards the
communication costs or relying on manually annotated
parallism in handcrafted circuits.
3 Preliminaries
In this section, we give a short introduction into existing
tools and techniques required for our parallelization ap-
proach. First, we give a brief overview of Yao’s protocol
(§ 3.1). Next, we introduce the compiler CBMC-GC that
transfers ANSI-C to garbled circuits (§ 3.2), followed by
an introduction of the Par4all framework that detects par-
allelism on source code level (§ 3.3).
3.1 TPC and Yao’s protocol
In the following paragraphs, we give a short introduc-
tion into Yao’s TPC protocol. For a complete descrip-
tion, we refer the reader to the detailed work of Lindell
and Pinkas [25].
Semi-honest adversary model.
In this work, we use
the semi-honest (passive) adversary model. TPC proto-
cols secure against semi-honest adversaries ensure cor-
rectness and guarantee that the participating parties do
not learn more about the other party’s input than they
could already derive from the observed output of the joint
computation. The semi-honest model is opposed the ma-
licious model, where the adversary is allowed to actively
violate the protocol. TPC protocols in the semi-honest
model are used for many privacy-preserving applications
and are therefore interesting on their own. A discussion
on example applications is given in § 5.3.
Oblivious transfers. An Oblivious transfer protocol
(OT) is a protocol in which a sender transfers one of
multiple messages to a receiver, but it remains oblivious
which piece has been transferred. In this paper, we use
1-out-of-2 OTs, where the sender inputs two l-bit strings
m0,m1 and the receiver inputs a bit c ∈ {0,1}. At the
end of the protocol, the receiver obliviously receives mc
such that neither the sender learns the choice c nor the
receiver learns anything about the other message m1−c.
In 2003 Ishai et al. [18] presented the idea of OT Exten-
sion, which signiﬁcantly reduces the computational costs
of OTs for most interesting applications of TPC. We use
OTn
l to denote a number n of 1-out-of-2 oblivious trans-
fers with message bit length l.
Yao’s protocol. Yao’s garbled circuits protocol, pro-
posed in the 1980s [35], is a TPC protocol secure in the
semi-honest model. The protocol is executed by two par-
ties PA, PB and operates on functionality descriptions in
form of Boolean circuits denoted with Cf . A Boolean cir-
cuit consists of n Boolean gates, two sets of inputs wires
(one for each party), and a set of output wires. A gate is
described by two input wires wl,wr, one output wire wo,
and a Boolean function γ = g(α,β ) mapping two input
bits to one output bit. The output of each gate can be
used as input to multiple subsequent gates.
During protocol execution, one party becomes the cir-
cuit generator (the garbling party), the other the circuit
evaluator. The generator initializes the protocol by as-
signing each wire wi in the circuit two random labels w0
i
and w1
i of length κ (the security parameter) representing
the respective values 0 and 1. For each gate the genera-
tor computes a garbled truth table. Each table consists of
four encrypted entries of the output wire labels wγ
o. These
are encrypted according to the gate’s Boolean functional-
ity using the input wire labels wα
r as keys. Thus,
an entry in the table is encrypted as
(wg(α,β )
l and wβ
)).
Ewα
l
(Ewβ
r
o
After their creation, the garbled tables are randomly per-
muted and sent to the evaluator, who, so far, is unable
to decrypt a single row of any garbled table due to the
random choice of wire labels.
To initiate the circuit evaluation, the generator sends
its input bits x in form of input wire labels to the evalu-
ator. Moreover, the evaluator’s input y is transferred via
an OT m
κ protocol with the generator being the OT sender
and m being the number of input bits. After the OT step,
the evaluator is in possession of the garbled circuit and
one input label per input wire. With this information the
evaluator is able to iteratively decrypt the circuit from
input wires to output wires. Once all gates are evalu-
ated, all output wire labels are known to the evaluator. In
the last step of the protocol, the generator sends an out-
put description table (ODT) to the evaluator, containing
a mapping between output label and actual bit value. The
decrypted output is then shared with the generator.
Optimizations. Yao’s original protocol has seen multi-
ple optimizations in the recent past. Most important are
pipe-lining [15], which is nescessary for the evaluation
USENIX Association  
24th USENIX Security Symposium  533
3
of larger circuits and a faster online execution of Yao’s
protocol, garbled-row-reduction (GRR) [31], which re-
duces the number of ciphertexts that are needed to be
transferred per gate, and free-XOR [21], which allows
to evaluate linear gates (XOR/XNOR) essentially for
“free” without any encryption or communication costs.
Most recently, Zahur et al. [36] presented an communi-
cation optimal garbling scheme, which only requires two
ciphertexts per non-linear gate while being compatible
with free-XOR.
3.2 CBMC-GC