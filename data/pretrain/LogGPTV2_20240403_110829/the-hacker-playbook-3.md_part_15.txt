我们知道应用程序本身正在监听3000端口。我们可以从外部对该系统进行 nmap 扫描，并发
现当前没有其他 Web 端口正在监听，但是哪些服务仅仅对于 localhost 可用？要搞清楚这个
问题，我们需要通过127.0.0.1的所有端口强制执行。我们可以通过使用 Burp Suite 和
Intruder 来实现这一目标。
在 Burp Suite 中，转到 Proxy/HTTP History 选项卡，找到我们上一个 SSRF 的请求包。
在 Request Body 上单击右键并发送给 Intruder。
Intruder 选项卡将亮起，转到 Intruder 选项卡，然后单击 clear。单击并突出显示端
口“3000”，然后单击 add。你的 GET 请求应如下所示：
GET/ssrf?user=&comment=&link=http://127.0.0.1 :§3000§HTTP/ 1.1
单击 payload 选项卡，然后选择将 Payload 类型选择为 “Numbers”。我们将从28000端
口转到28100。通常，你将测试所有端口，但让我们在实验的时候简化它吧。
From：28000
To：28100
Step：1
点击
Start Attack
95
第3章 抛传——Web 应用程序漏洞利用
你将看到端口28017的响应长度远大于所有其他请求。如果我们打开浏览器并转
到：http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017 ，我们应该能够利
用我们的 SSRF 并获得对 MongoDB Web 界面的访问权限。
96
第3章 抛传——Web 应用程序漏洞利用
你应该能够访问所有链接，但你必须记住你需要使用 SSRF。要访问 serverStatus(
http://chat:3000/serverStatus?text=1 )，你必须使用 SSRF 攻击并转到此处：
http://chat:3000/ssrf?user=&comment=&link=http://127.0.0.1:28017/serverStatus?text=1
服务器端请求伪造可能非常危险。虽然不是新的漏洞，但目前发现的 SSRF 漏洞数量越来越
多。由于 SSRF 允许在基础设施内进行移动，这通常会导致某些重要的发现。
其他资源：
本地的很多编码：
http://www.agarri.fr/docs/AppSecEU15-
Server_side_browsing_considered_harmful.pdf
Bug Bounty - AirBNB
示例：http://bit.ly/2ELvJxp
97
第3章 抛传——Web 应用程序漏洞利用
XML 外部实体攻击（XXE）
XML 代表可扩展标记语言，旨在发送/存储易于阅读的数据。 XML eXternal Entities（XXE）
是对应用程序中 XML 解析器的攻击。XML 解析常见于允许文件上传，解析 Office 文档，
JSON 数据甚至 Flash 类型游戏的应用程序中。当允许 XML 解析时，不正确的验证可以授予
攻击者读取文件的权限、导致拒绝服务攻击，甚至远程代码执行。从一个比较高的维度来
看，应用程序具有以下需求：1) 解析用户提供的 XML 数据，2) 实体的系统标识符部分必须在
文档类型声明(DTD)内，3) XML处理器必须验证/处理 DTD 并解析外部实体。
普通 XML 文件 恶意 XML 文件
\ 8"?>
\ \ \
\100\ ]>
\ \&xxe;\
上面，我们有一个普通的 XML 文件和一个专门用来从系统的 /etc/passwd 文件中读取文件
的恶意 XML。我们将看看是否可以在真实的 XML 请求中注入恶意 XML 请求。
XXE 实验：
由于自定义配置请求，有一个不同的 VMWare 虚拟机用于 XXE 攻击。这可以在这里找到：
http://thehackerplaybook.com/get.php?type=XXE-vm
下载后，在 VMWare 中打开虚拟机并启动它。在登录屏幕上，你无需登录，但你应该看到系
统的 IP 地址。
转到浏览器：
通过 Burp Suite 代理所有流量
转到 URL：http://[IP of your Virtual Machine]
拦截流量并点击
Hack the XML
如果在加载页面后查看页面的 HTML 源代码，你可以看到有一个通过 POST 请求提交的隐藏
字段。XML 内容如下所示：
98
第3章 抛传——Web 应用程序漏洞利用
]>
 Hack The &book;
在这个例子中，我们指定它是 XML 1.0版本，DOCTYPE，指定根元素是 thp， !ELEMENT 指
定任何类型，并且 !ENTITY 将 book 变量设置为“Universe”字符串。最后，在我们的 XML 输
出中，我们希望从解析 XML 文件中打印出我们的实体。
这通常是你在发送 XML 数据的应用程序中看到的内容。由于我们控制具有 XML 请求的
POST 数据，因此我们可以尝试注入我们自己的恶意实体。默认情况下，大多数 XML 解析库
都支持 SYSTEM 关键字，该关键字允许从 URI 读取数据(包括使用 file:// 协议 )。因此，
我们可以创建自己的实体来制作在 上读取的文件。
/etc/passwd
原始 XML 文件 恶意 XML 文件
\ \
\ \
\ \
]> ]>
\Hack The & book;\ \Hack The &book;\
XXE 实验——阅读文件：
拦截 [你的 VM 的 IP]/xxe.php 的流量包并点击 Hack of XML
将截获的流量包发送到 Repeater
将“data”的 POST 参数修改为以下内容：
  ]>Hack The %26book%3B
请注意， 等同于 ， 等同于 。我们需要对&符号和分号字符进行百分比编
%26 & %3B ;
码。
发送流量包，我们现在应该能够读取
/etc/passwd
99
第3章 抛传——Web 应用程序漏洞利用
高级 XXE——XXE-OOB
在之前的攻击中，我们能够在 标签中获得返回的响应。那么如果我们看不到响应或遇
到字符或文件限制怎么办？我们怎样使用带外数据协议（OOB）来发送我们的数据？我们可
以提供远程文档类型定义（DTD）文件来执行 OOB-XXE，而不是在请求 payload 中定义我
们的攻击。DTD 是结构良好的 XML 文件，用于定义 XML 文档的结构和法律元素及属性。为
了简单起见，我们的 DTD 将包含我们所有的攻击或 exfil payload，这将帮助我们解决许多字
符的限制。在我们的实验示例中，我们将使有 XXE 漏洞的服务器请求一个托管在远程服务器
上的 DTD。
新的 XXE 攻击将分四个阶段进行：
1. 使用篡改后的 XXE XML 攻击
2. 对于存在漏洞的 XML 解析器，它会从攻击者服务器抓取一个 DTD 文件
3. 该 DTD 文件包含读取 /etc/passwd 文件的代码
4. 该 DTD文件也包含用于隐秘传输 /etc/passwd 内容的代码（可能是经过编码的）
设置我们的攻击者机器和 XXE-OOB payload：
我们将指定一个外部 DTD 文件，而不是原始文件读取
 %dtd;
新的“数据”POST payload 将如下所示（记得更改 [Your_IP]）：
 %dtd;]>%26send%3B
我们需要通过创建名为 payload.dtd 的文件在攻击者服务器上托管此 payload
gedit /var/www/html/payload.dtd
100
第3章 抛传——Web 应用程序漏洞利用
"
>
%all;
你刚刚创建的 DTD 文件指示易受攻击的服务器读取 /etc/ passwd 然后尝试使用我们的
敏感数据向我们的攻击者机器发出 Web 请求。为了确保我们收到响应，我们需要启动
Web 服务器来托管 DTD 文件并设置 NetCat 监听器
nc -l -p 8888
你将遇到“检测到实体引用循环”类型的错误,具体的报错内容大概是：“Detected an entity
reference loop in \/var/www/html/xxe.php on line \20"。在进行 XXE 攻击时，通常会遇
到解析器错误。很多时候，XXE 解析器仅仅允许某些字符，因此读取带有特殊字符的文
件会报错。我们可以做些什么来解决这个问题？在使用 PHP 的情况下，我们可以使用
PHP 输入和输出流（ http://php.net/manual/en/wrappers.php.php ）来读取本地文
件，并使用 php://filter/read=convert.base64-encode 对它们进行 base64 编码。让我们
重启我们的 NetCat 监听器并更改我们的 payload.dtd 文件以使用此功能：
">
%all;
一旦我们重放我们新修改的请求，我们现在就可以看到我们的受害者服务器首先获取并运行
了 payload.dtd 文件，然后监听8888端口的 NetCat 处理程序发出二次 Web 请求。当然，
GET 请求将采用 base64编码并且我们也将必须对请求进行解码。
更多 XXE payload：
https://gist.github.com/staaldraad/01415b990939494879b4
https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/XXE-Fuzzing.txt
101
第3章 抛传——Web 应用程序漏洞利用
本章总结
虽然这只是你可能遇到的所有不同网络攻击的一小部分，但我希望这些案例能打开你的视
野，关于更现代的框架（Node.js）是如何引入旧的和新的攻击。许多常见的应用程序漏洞扫
描器往往会错过很多这些更复杂的漏洞，因为它们是基于特定的语言或框架的。我想提出的
要点是，为了进行充分的攻击活动，你需要真正理解语言和框架。
102
第4章 带球——开始攻击网络
第4章 带球——开始攻击网络
译者：@Snowming
校对者：@鸫、@leitbogioro、@哈姆太郎、@匿名jack
在进行风险评估项目的第二天，你使用 nmap 扫描了目标的全部网段，还启动了漏洞扫描
器，但运气不太好，你没有探测出任何 Web 应用程序的初始入口点。这让你感到有些失败，
需要反思一下，重新回顾一下之前收集到的所有信息。因为你知道，一旦可以进入目标网
络，就可以使用无数的技巧来获得更多的凭证、在域中漫游、利用 AD（活动目录）的特性，
最后找到我们要找的东西。当然，这不是一件容易的事。因为你要绕过众多防火墙，还要欺
骗管理员，最后还要擦除自己的痕迹。