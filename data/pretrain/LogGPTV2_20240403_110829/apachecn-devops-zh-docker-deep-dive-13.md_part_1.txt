## 十三、卷和持久数据
在云原生和微服务应用领域，保存数据的有状态应用变得越来越重要。Docker 是这一领域的重要基础设施技术，因此我们将在本章中把注意力转向研究 Docker 如何处理写持久数据的应用。
我们将把这一章分成通常的三个部分:
*   TLDR
*   深潜
*   命令
### 卷和持久数据-TLDR
有两大类数据——持久数据和非持久数据。
持久化就是你需要*保留*的数据。比如；客户记录、财务数据、研究结果、审计日志，甚至某些类型的应用*日志*数据。非持久性是不需要保留的数据。
这两者都很重要，Docker 对这两者都有解决方案。
为了处理非持久数据，每个 Docker 容器都有自己的非持久存储。这是为每个容器自动创建的，并与容器的生命周期紧密耦合。因此，删除容器将会删除存储和其中的任何数据。
为了处理持久数据，容器需要将其存储在*卷*中。卷是独立的对象，其生命周期与容器分离。这意味着您可以独立创建和管理卷，并且它们不受任何容器生命周期的限制。最终，您可以删除正在使用卷的容器，而卷不会被删除。
那是 TLDR。让我们仔细看看。
### 卷和持久数据-深潜
有一种流行的观点认为，容器对于保存数据的有状态应用来说并不好。几年前这是真的。然而，事情正在发生变化，现在已经有一些技术使得容器成为许多有状态应用的可行选择。
我是说容器是所有有状态应用的最佳解决方案吗？不。但是，我们将看到容器处理持久和非持久数据的一些方式，您可能会发现很难看到与虚拟机的许多区别。
我们将从非持久性数据开始。
#### 容器和非持久数据
容器被设计成不可变的。这只是一个时髦的词，意思是只读的——在容器部署后最好不要改变它的配置。如果有什么东西坏了或者你需要改变什么东西，你应该创建一个包含修复/更新的新容器，并部署它来代替旧容器。您不应该登录到一个正在运行的容器并进行配置更改！
然而，许多应用需要读写文件系统才能简单地运行——它们甚至不能在只读文件系统上运行。这意味着它不像使容器完全只读那么简单。每个 Docker 容器都是通过在其所基于的只读映像之上添加一个薄读写层来创建的。图 13.1 显示了共享一个只读映像的两个运行容器。
![Figure 13.1 Ephemeral container storage](img/figure13-1.png)
Figure 13.1 Ephemeral container storage
可写容器层存在于 Docker 主机的文件系统中，您会听到它被称为各种名称。这些包括*本地存储*、*临时存储*和*图形驱动程序存储*。它通常位于以下位置的 Docker 主机上:
*   Linux Docker 主机:`/var/lib/docker//...`
*   Windows Docker 主机:`C:\ProgramData\Docker\windowsfilter\...`
这个薄的可写层是容器不可分割的一部分，支持所有读/写操作。如果您或应用更新文件或添加新文件，它们将被写入该层。然而，它与容器的生命周期紧密耦合——它在创建容器时被创建，在删除容器时被删除。它与容器一起被删除的事实意味着它不是您需要保留(保存)的重要数据的选项。
如果您的容器没有创建持久数据，这个薄的可写层*本地存储*就可以了，您可以开始了。但是，如果您的容器需要保存数据，您需要阅读下一节。
在进入下一部分之前，最后说一句话。
本地存储的可写层由存储驱动程序在每个 Docker 主机上管理(不要与卷驱动程序混淆)。如果您在 Linux 上运行 Docker 生产，您需要确保将正确的存储驱动程序与您的 Docker 主机上的 Linux 发行版相匹配。使用以下列表作为*指南:*
*   **红帽企业版 Linux:** 在运行 Docker 17.06 或更高版本的现代版 RHEL 上使用`overlay2`驱动程序。使用旧版本的`devicemapper`驱动程序。这适用于甲骨文 Linux 和其他红帽相关的上下游发行版。
*   **乌班图:**使用`overlay2`或`aufs`驱动程序。如果你使用的是 Linux 4.x 内核或更高版本，你应该选择`overlay2`。
*   **SUSE Linux 企业服务器:**使用`btrfs`存储驱动。
*   **Windows** Windows 只有一个驱动，默认配置。
#### 容器和持久数据
*卷*是将数据保存在容器中的推荐方式。这有三个主要原因:
*   卷是独立的对象，与容器的生命周期无关
*   卷可以映射到专用的外部存储系统
*   卷使不同 Docker 主机上的多个容器能够访问和共享相同的数据
在高级别上，您创建一个卷，然后创建一个容器并将该卷装入其中。该卷被装载到容器文件系统中的一个目录中，写入该目录的任何内容都存储在该卷中。如果删除容器，卷及其数据仍将存在。
图 13.2 显示了作为单独对象存在于容器外部的 Docker 卷。它在`/data`装载到容器的文件系统中，写入`/data`目录的任何数据都将存储在卷上，并在容器被删除后存在。
![Figure 13.2 High-level view of volumes and containers](img/figure13-2.png)
Figure 13.2 High-level view of volumes and containers
在图 13.2 中，`/data`目录是 Docker 卷，可以映射到外部存储系统或 Docker 主机上的目录。无论哪种方式，它的生命周期都是与容器分离的。容器中的所有其他目录都使用 Docker 主机上本地存储区域中的精简可写容器层。
从卷到`/data`目录的箭头显示为虚线，表示卷和容器之间的解耦关系。
##### 创建和管理 Docker 卷
在 Docker，卷是一等公民。其中，这意味着它们在 API 中是自己的对象，并且有自己的`docker volume`子命令。
使用以下命令创建一个名为`myvol`的新卷。
```
$ docker volume create myvol
myvol 
```
 `默认情况下，Docker 使用内置的`local`驱动程序创建新卷。顾名思义，使用`local`驱动程序创建的卷只对与卷位于同一节点的容器可用。您可以使用`-d`标志指定不同的驱动程序。
第三方卷驱动程序作为插件提供。这些为 Docker 提供了对外部存储系统(如云存储服务)和内部存储系统(包括 SAN 或 NAS)的无缝访问。这如图 13.3 所示。
![Figure 13.3 Plugging external storage into Docker](img/figure13-3.png)
Figure 13.3 Plugging external storage into Docker
我们将在后面的章节中看到一个第三方驱动程序的例子。
现在创建了体积，您可以使用`docker volume ls`命令查看它，并使用`docker volume inspect`命令检查它。
```
$ docker volume ls
DRIVER              VOLUME NAME
local               myvol
$ docker volume inspect myvol
[
    {
        "CreatedAt": "2020-05-02T17:44:34Z",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/myvol/_data",
        "Name": "myvol",
        "Options": {},
        "Scope": "local"
    }
] 
```
 `注意`Driver`和`Scope`都是`local`。这意味着该卷是用`local`驱动程序创建的，并且只对该 Docker 主机上的容器可用。`Mountpoint`属性告诉我们卷在 Docker 主机的文件系统中的位置。
所有使用`local`驱动程序创建的卷在 Linux 上的`/var/lib/docker/volumes`和 Windows 上的`C:\ProgramData\Docker\volumes`下都有自己的目录。这意味着您可以在 Docker 主机的文件系统中看到它们。您甚至可以直接从 Docker 主机访问它们，尽管通常不建议这样做。我们在 Docker Compose 一章中展示了一个这样的例子——我们将一个文件直接复制到 Docker 主机上的卷目录中，该文件立即出现在容器内的卷中。
现在卷已经创建，它可以被一个或多个容器使用。我们一会儿将看到用法示例。
有两种方法可以删除 Docker 卷:
*   `docker volume prune`
*   `docker volume rm`
`docker volume prune`将删除**所有未装入容器或服务副本的卷**，因此**请谨慎使用！** `docker volume rm`可让您精确指定要删除的卷。这两个命令都不会删除容器或服务副本正在使用的卷。
由于`myvol`卷没有使用，用`prune`命令删除。
```
$ docker volume prune
WARNING! This will remove all volumes not used by at least one container.
Are you sure you want to continue? [y/N] y
Deleted Volumes:
myvol
Total reclaimed space: 0B 
```
 `恭喜，您已经创建、检查并删除了 Docker 卷。你没有和容器互动。这证明了卷的独立性。
至此，您已经知道了创建、列出、检查和删除 Docker 卷的所有命令。但是，也可以使用`VOLUME`指令通过 Dockerfiles 部署卷。格式为`VOLUME `。有趣的是，在 Dockerfile 中定义卷时，不能指定主机上的目录。这是因为*主机*目录是不同的，取决于你的 Docker 主机运行的是什么操作系统——如果你在一个不存在的 Docker 主机上指定了一个目录，它可能会破坏你的构建。因此，在 Dockerfile 中定义卷需要您在部署时指定主机目录。
#### 展示容器和服务的容量
让我们看看如何将卷用于容器和服务。
这些示例将来自一个没有预先存在卷的系统，我们演示的所有内容都适用于 Linux 和 Windows。
使用以下命令创建一个新的独立容器，该容器装载一个名为`bizvol`的卷。
**Linux 示例:**
```
$ docker container run -dit --name voltainer \
    --mount source=bizvol,target=/vol \
    alpine 
```
 `**窗口示例:**
对所有 Windows 示例使用 PowerShell，并注意使用倒勾(`)将命令拆分到多行。
```
> docker container run -dit --name voltainer `
    --mount source=bizvol,target=c:\vol `
    mcr.microsoft.com/powershell:nanoserver 
```
 `该命令使用`--mount`标志将名为“bizvol”的卷装入位于`/vol`或`c:\vol`的容器中。尽管系统上没有名为`bizvol`的卷，该命令还是成功完成。这引出了一个有趣的问题:
*   如果指定现有卷，Docker 将使用现有卷
*   如果您指定了一个不存在的卷，Docker 将为您创建它
在这种情况下，`bizvol`不存在，所以 Docker 创建了它，并将其安装到新容器中。这意味着你可以用`docker volume ls`看到它。
```
$ docker volume ls
DRIVER              VOLUME NAME
local               bizvol 
```
 `尽管容器和卷有不同的生命周期，但您不能删除容器正在使用的卷。试试看。