**作者：evilpan  
原文链接：**
最近在分析一个运行Android系统的IoT平台，其中包含设备管控和日志服务(Agent)、升级服务(FOTA)、自定义桌面(Launcher)、端上IDS以及前台的图形界面应用等多个前后台进程。在对其中某个功能进行逆向时发现调用链路跨越了多个应用，因此本文就做个简单记录。
# 前言
熟悉安卓开发的同学应该都知道构建IPC的流程，但从逆向工程的角度分析的却比较少见。
说到安卓跨进程通信/调用，就不得不提到AIDL和Binder，在逆向一个东西之前，首先需要了解它，因此本文也会先对其工作流程和工作原理进行介绍。
# AIDL 101
AIDL是Google定义的一个接口定义语言，即Android Interface Definition
Language。两个进程(称为客户端和服务端)共享同一份AIDL文件，并在其基础上实现透明的远程调用。
从开发者的角度如何使用AIDL呢？下面参考[Android的官方文档](https://developer.android.com/guide/components/aidl)以一个实例进行说明。我们的目标是构建一个远程服务FooService，并且提供几个简单的远程调用，首先创建AIDL文件`IFooService.aidl`：
    package com.evilpan; interface IFooService {    void sayHi();    int add(int lhs, int rhs); } 
AIDL作为一种接口语言，其主要目的一方面是简化创建IPC所需要的IPC代码处理，另一方面也是为了在多语言下进行兼容和适配。使用Android内置的SDK开发工具可将其转换为目标语言，本文以Java为例，命令如下：
    aidl --lang=java com/evilpan/IFooService.aidl -o . 
生成的文件为`IFooService.java`，文件的内容后面再介绍，其大致结构如下：
    public interface IFooService extends android.os.IInterface {    /** Default implementation for IFooService. */ public static class Default implements com.evilpan.IFooService  {    // ...  } /** Local-side IPC implementation stub class. */  public static abstract class Stub extends android.os.Binder implements com.evilpan.IFooService  {    // ...  }   public void sayHi() throws android.os.RemoteException;  public int add(int lhs, int rhs) throws android.os.RemoteException; } 
在这个文件的基础上，服务端和客户端分别构造远程通信的代码。
## Server
服务端要做两件事：
  1. 实现AIDL生成的的接口
  2. 创建对应的Service并暴露给调用者
实现接口主要是实现AIDL中的Stub类，如下：
    package com.evilpan.server; import android.os.RemoteException; import android.util.Log; import com.evilpan.IFooService; public class IFooServiceImpl extends IFooService.Stub {    public static String TAG = "pan_IFooServiceImpl";     @Override    public void sayHi() throws RemoteException {        Log.i(TAG, "Hi from server");    }     @Override    public int add(int lhs, int rhs) throws RemoteException {        Log.i(TAG, "add from server");        return lhs + rhs;    } } 
客户端调用接口需要经过Service，因此我们还要创建对应的服务：
    package com.evilpan.server; import android.app.Service; import android.content.Intent; import android.os.IBinder; import android.util.Log; public class FooService extends Service {    public static String TAG = "pan_FooService";    private IBinder mBinder;     public FooService() {        Log.i(TAG, "Service init");        mBinder = new IFooServiceImpl();    }     @Override    public IBinder onBind(Intent intent) {        Log.i(TAG, "return IBinder Object");        return mBinder;    } } 
注意这个服务需要在`AndroidManifest.xml`中导出：
这里的服务与常规服务不同， **不需要** 通过`startService`之类的操作去进行启动，而是让客户端去绑定并启动，因此也称为[Bound
Service](https://developer.android.com/guide/components/bound-services)。客户端绑定成功后拿到的`IBinder`对象(远程对象)就相当于上面`onBind`中返回的对象，客户端中操作本地对象可以实现远程调用的效果。
## Client
客户端在正常调用远程方法之前也需要做两件事：
  1. 实现ServiceConnection接口
  2. bindService
ServiceConnection接口主要是连接远程服务成功的异步回调，示例如下：
        private ServiceConnection mConnection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            Log.i(TAG, "onServiceConnected");            mService = IFooService.Stub.asInterface(service);             Log.i(TAG, "sayHi");            try {                mService.sayHi();                Log.i(TAG, "add");                mService.add(3 , 4);            } catch (RemoteException e) {                e.printStackTrace();            }        }         @Override        public void onServiceDisconnected(ComponentName name) {            Log.i(TAG, "onServiceDisconnected");        } 
连接成功时会获得一个`IBinder`对象，就是前面说的`IFooService.Stub`实现。我们可以直接通过asInterface将其转换为`IFooService`对象。
`bindService`方法用来将Activity绑定到目标Service上，第一个参数为目标Service的Intent，第二个参数为上面的ServiceConnection实例。
        @Override    protected void onStart() {        super.onStart();        Log.i(TAG, "onStart");         Intent intent = new Intent();        String pName = "com.evilpan.server";        intent.setClassName(pName, pName + ".FooService");        boolean ret = bindService(intent, mConnection, Context.BIND_AUTO_CREATE);        Log.i(TAG, "bindService: " + ret);    } 
注意这里的包名指定的是服务端的包名，并且类名是服务类而不是AIDL中的接口类。绑定成功后启动客户端进程，可看到ADB日志如下所示：
    07-11 06:01:25.767  8492  8492 I pan_Client: onCreate 07-11 06:01:25.768  8492  8492 I pan_Client: onStart 07-11 06:01:25.769  8492  8492 I pan_Client: bindService: true 07-11 06:01:25.770  8451  8451 I pan_FooService: Service init 07-11 06:01:25.770  8451  8451 I pan_FooService: return IBinder Object 07-11 06:01:25.785  8492  8492 I pan_Client: onServiceConnected 07-11 06:01:25.785  8492  8492 I pan_Client: sayHi 07-11 06:01:25.785  8451  8463 I pan_IFooServiceImpl: Hi from server 07-11 06:01:25.786  8492  8492 I pan_Client: add 07-11 06:01:25.786  8451  8508 I pan_IFooServiceImpl: add from server 
Server和Client示例文件可见附件。
## 其他
前面我们简单介绍了AIDL的使用，实际上AIDL支持丰富的数据类型，除了int、long、float、String这些常见类型外，还支持在进程间传递`对象`(Parcelable)，以及传递`函数`。在AIDL中定义对象如下：
    package com.evilpan; parcelable Person { int age; String name; } 
也可以在AIDL中只声明parcelable对象，并在Java文件中自己定义。
而函数也可以看做是一个类型进行传递，例如：
    package com.evilpan; oneway interface IRemoteServiceCallback { void onAsyncResult(String result); } 
可以把`IRemoteServiceCallback`当做一个类型，在其他的AIDL中使用：
    package com.evilpan; import com.evilpan.IRemoteServiceCallback; interface IRemoteService { void registerCallback(IRemoteServiceCallback cb); } 
这种模式可以让服务端去调用客户端实现的函数，通常用来返回一些异步的事件或者响应。
# Binder