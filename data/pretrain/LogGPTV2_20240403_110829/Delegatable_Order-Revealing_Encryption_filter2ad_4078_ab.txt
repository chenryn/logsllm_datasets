probability distribution.
The encryption algorithm works by splitting the domain
into two parts according to a value sampled from the hyper-
geometric distribution (HG) routine, and splitting the range
in half recursively. When the domain size contains a single
element, the corresponding ciphertext is sampled uniformly
from the current range.
1 Given the secret key, it is possible to decrypt a ciphertext
by doing binary search on the plaintext domain: encrypting
known values and comparing them against the target cipher-
text, until the target plaintext is found. However, this would
require O (log |D|) encryption and comparison operations.
All pseudo-random decisions are made by an internal PRG
(TapeGen in [8]). This way not only the algorithm is de-
terministic, but also decryption is possible. The decryption
procedure takes the same “path” of splitting domain and
range, and when the domain size reaches one, the only value
left is the original plaintext.
Security. This scheme is POPF-CCA secure [8], mean-
ing that it is as secure as the underlying ideal object —
randomly sampled order-preserving function from a certain
domain to a certain range. For practical values of the pa-
rameters, Boldyreva, Chenette, and O’Neill [9] showed that
the distance between the plaintexts can be approximated to
an accuracy of about the square root of the domain size. In
other words, approximately, half of the bits (the most signif-
icant) are leaked. Grubbs et al. [27] showed that this leak-
age allows to almost entirely decrypt the ciphertexts (given
auxiliary data with a similar distribution) and encrypting
strings (rather than numbers) with this scheme is especially
dangerous (see Section 2.1).
Analysis and implementation challenges
Eﬃcient sampling from the hypergeometric distribution is
a challenge by itself. Authors suggest using a randomized
yet exact (not approximate) Fortran algorithm by Kachit-
vichyanukul and Schmeiser [34]. It should be noted that the
algorithm relies on inﬁnite precision ﬂoating-point numbers,
which most regular frameworks do not have. The security
consequences of ﬁnite precision computations is actually an
open question. The complexity of this randomized algorithm
is hard to analyze; however, we empirically veriﬁed that its
running time is no worse than linear in the input bit length.
The authors also suggest a diﬀerent algorithm for smaller
inputs [64].
On average, encryption and decryption algorithms make
n calls to HG, which in turn consumes entropy generated
by the internal PRG. The entropy, and thus the number of
calls to PRG, needed for one HG run is hard to analyze the-
oretically. However, we derived this number experimentally
(see Section 5).
BCLO has been implemented in numerous languages and
has been deployed in a number of secure systems. We add
C# implementation to the list, and recommend using a li-
brary that supports inﬁnite precision ﬂoating-point numbers
when building the hypergeometric sampler.
3.2 CLWW ORE
The ORE scheme by Chenette et al. [18], which authors
call “Practical ORE”, is the ﬁrst eﬃcient ORE implemen-
tation based on PRFs.
On encryption, the plaintext is split into n values in the
following way. For each bit, a value is this bit concatenated
with all more signiﬁcant bits. This value is given to a keyed
PRF and the result is numerically added to the next less
signiﬁcant bit. This resulting list of n elements is the ci-
phertext.
The comparison routine traverses two lists in-order look-
ing for the case when one value is greater than the other by
exactly one, revealing location and value of the ﬁrst diﬀering
bit. If no such index exists, the plaintexts are equal.
Security. A generic ORE security deﬁnition was intro-
duced along with the scheme [18]. ORE leakage is more
clearly quantiﬁed than in OPE. The deﬁnition says that the
Table 1: Primitive usage by OPE / ORE schemes. Ordered by security rank — most secure below. n is the input length in
bits, d is a block size for Lewi-Wu scheme, λ is a PRF output size, N is a total data size, HG is a hyper-geometric
distribution sampler, PPH is a property-preserving hash with h-bit outputs built with bilinear maps and bolded are weak
points of the schemes. See Table 4 for practically derived values.
Primitive usage
Ciphertext size,
Leakage
Encryption
Comparison
or state size
Scheme
BCLO [8]
CLWW [18]
Lewi-Wu [46]
2 n
d
CLOZ [15]
n HG
n PRF
(cid:0)2d + 1(cid:1) PRF
2n/d PRP
n
d 2d Hash
n PRF
n PPH
1 PRP
none
none
n
2d Hash
n
d
n2 PPH
2n
2n
(cid:0)λ + n + 2d+1(cid:1) + λ
n · h
3 · n · N
(In addition to inherent total order)
≈ Top half of the bits
Most-signiﬁcant diﬀering bit
Most-signiﬁcant diﬀering block
Equality pattern of most-signiﬁcant diﬀering bit
Insertion order
FH-OPE [39]
1 Traversal
3 Traversals
scheme is secure with a leakage L(·) if there exists an algo-
rithm (simulator) that has access to the leakage function and
can generate output indistinguishable from the one gener-
ated by the real scheme. This scheme satisﬁes ORE security
deﬁnition with the leakage L(·) of the location and value of
the ﬁrst diﬀering bit of every pair of plaintexts. Note that
the most signiﬁcant diﬀering bit also leaks the approximate
distance between two values.
Analysis and implementation challenges
On encryption the algorithm makes n calls to PRF and the
comparison procedure does not use any cryptographic prim-
itives. Ciphertext is a list of length n, where each element
is an output of a PRF modulo 3. The authors claim that
the ciphertext’s size is n log2 3, just 1.6 times larger than the
plaintext’s size. While this may be true for large enough n
if ternary encoding is used, we found that in practice the
ciphertext size is still 2n. 1.6n for 32-bit words is 51.2 bits,
which will have to occupy one 64-bit word, or two 32-bit
words, therefore resulting in 2n anyway.
3.3 Lewi-Wu ORE
Lewi and Wu [46] presented an improved version of the
CLWW scheme [18] which leaks strictly less.
The novel idea was to use the “left / right framework” in
which two ciphertexts get generated — left and right. The
right ciphertexts are semantically secure, so an adversary
will learn nothing from them. Comparison is only deﬁned
between the left ciphertext of one plaintext and the right
ciphertext of another plaintext.
The approach is to split the plaintext into blocks of d bits.
The ciphertext is computed block-wise. For the right side,
the algorithm compares the given block value to all 2d pos-
sible block values; each comparison result is added (modulo
3) to a PRF of the previous blocks. All 2d comparison re-
sults go into the right ciphertext. The left side, which is
shorter, is produced in such a way as to reveal the correct
comparison result. This way the location of the diﬀering
bit inside the block is hidden, but the location of the ﬁrst
diﬀering block is revealed.
Security. This scheme satisﬁes the ORE security deﬁnition
introduced by Chenette et al. [18] with the leakage L(·) of
the location of the ﬁrst diﬀering block. This property al-
lows a practitioner to set performance-security tradeoﬀ by
tuning the block size. Left / right framework is particularly
useful in a B+ tree since it is possible to store only one (se-
mantically secure) side of a ciphertext in the structure (see
Section 4.1).
Analysis and implementation challenges
Let n be the size of input in bits (e.g. 32) and d be the
number of bits per block (e.g. 2).
Left encryption loops n
d times making one PRP call and
d 2d
two PRF calls each iteration. Right encryption loops n
times making one PRP call, one hash call and two PRF calls
each iteration. Comparison makes n
d calls to hash at worst
and half of that number on average. Please note that the
complexity of right encryption is exponential in the block
size.
In the Table 1 the PRP usage is linear due to our
improvement. The ciphertext size is no longer negligible —
n
d
(cid:0)λ + n + 2d+1(cid:1) + λ, for λ being PRF output size.
The implementation details of this approach raise an in-
teresting security question. Although the authors suggest
using 3-rounds Feistel networks [59] for PRP and use it in
their implementation, it may not be secure for small input
sizes. Feistel networks security depends on the input size [29]
— exponential in the input size. However, the typical input
for PRP in their scheme is 2–8 bits, thus even exponential
number is small.
We have considered multiple PRP implementations to use
instead of the Feistel networks. Because the domain size is
small (from 22 to 28 elements), we have decided to build a
PRP by simply using the key as an index into the space of all
possible permutations on the domain, where a permutation
is obtained from the key via Knuth shuﬄe (this approach
was mentioned in [52]). Another important aspect of the
implementation is that for each block we need to compute
the permutation of all the values inside the block. This
operation applied many times can be expensive. To address
this, we propose to generate a PRP table once for the whole
block and then use this table when one needs to compute
the location of an element of permutation. This can reduce
the PRP usage (indeed, we observe a reduction from 80 to
32 calls in our case). We evaluate this improved approach
in our experimental section.
Table 2: Performance of protocols. Ordered by security rank — most secure below. N is a total data size, B is an I/O
page size, L is a POPE tree branching factor, r is the result size in records and bolded are weak points of the protocols. All
values are in O notation. See Table 3 for practically derived values.
I/O requests
Construction
Query
Leakage
Communication (result excluded)
Construction
Query
logB
N
B + r
B
log2
logL
N
B + r
B + r
N/B
N
B
B
(cid:18)
r
Same as ORE
1
Total order
log2 N
(cid:19)
Partial order
Fully hiding
Same as SSE
Fully hiding
(access pattern)
1
—
log2 N
B
1
log2 N
logL N
N
log2 N
log2 N
B
Protocol
B+ tree with ORE
Kerschbaum [41]
POPE [58] warm
POPE [58] cold
Logarithmic-BRC [20]
ORAM
N
B
logB
N
B
1
—
log2 N
B
log2
N
B
logB
N
B
+
r
B
3.4 CLOZ ORE
Cash et al. [15] introduced a new ORE scheme that prov-
ably leaks less than any previous scheme. The idea is to use
Chenette et al. [18] construction (see Section 3.2), but per-
mute the list of PRF outputs. The original order of those
outputs is not necessary, as one can simply ﬁnd a pair that
diﬀers by one. This is not enough to reduce leakage, how-
ever, since an adversary can count how many elements two
ciphertexts have in common.