# 十四、在云中运行容器化应用
在前一章中，我们学习了如何将多服务应用部署到 Kubernetes 集群中。我们为此应用配置了应用级路由，并使用零停机策略更新了其服务。最后，我们使用 Kubernetes 机密向正在运行的服务提供机密数据。
在本章中，我们将概述一些在云中运行容器化应用的最流行方式。我们将仔细看看最受欢迎的云供应商 AWS 在这方面提供了什么。我们将包括自托管和托管解决方案，并讨论它们的优缺点。其他厂商的产品，如微软 Azure 和**谷歌云引擎** ( **GCE** )也将被简要讨论。
以下是我们将在本章中讨论的主题:
*   将我们的应用部署到 AWS ECS 中
*   在 AWS 上部署和使用 Docker EE
*   Azure 容器产品一览
*   对谷歌容器产品的简短浏览
阅读本章后，您将能够:
*   将简单的应用部署到 AWS ECS 中
*   使用 Docker 企业版在 AWS 中创建 Kubernetes 集群
*   将一个简单的应用部署到 AWS 中的 Docker 企业版集群中
*   命名微软 Azure 和谷歌云的托管容器产品
*   列出亚马逊、微软和谷歌基于云的托管产品的两三个优缺点
# 技术要求
本章我们将使用亚马逊 AWS、微软 Azure 和谷歌云。因此，每个平台都需要有一个账户。如果您没有现有帐户，您可以为所有这些云提供商申请试用帐户。我们也使用来自 GitHub 的实验室存储库文件夹`ch14`中的文件，网址为[。](https://github.com/fundamentalsofdocker/labs/tree/master/ch14)
# 将我们的应用部署到 AWS ECS 中
在本节中，我们将学习如何将我们的 pets 应用部署到 AWS **弹性容器服务** ( **ECS** )。除了 Kubernetes 和 Docker Swarm，ECS 是最受欢迎的容器平台之一。
We are assuming that you are somewhat familiar with AWS and its core concepts, such as **security group** (**SG**), **virtual private cloud** (**VPC**), and **elastic compute cloud** (**EC2**).
作为先决条件，我们需要在 AWS 上有一个帐户。如果您还没有这样的帐户，那么请在 https://aws.amazon.com/free 创建一个免费试用帐户。使用[https://console.aws.amazon.com](https://console.aws.amazon.com)的链接登录您的帐户。导航至位于[https://console.aws.amazon.com/ecs/home](https://console.aws.amazon.com/ecs/home)[的 ECS 主页。](https://console.aws.amazon.com)
# ECS 简介
AWS ECS 有一种有点独特的定义资源的方式。从高级角度来看，AWS 使用的资源类型有点像 Docker Swarm 和 Kubernetes 资源的混合。一切的中心是 ECS 集群。有多种方法可以创建这样的集群。两个主要的如下:
*   **法盖特**:这是新的，在撰写本文时仅在美国东部地区可用。EC2 实例等基础架构由 ECS 自动调配和管理。
*   **手动**:我们调配和管理自己的基础架构，比如 EC2 实例。
一旦我们提供了一个集群，我们就可以编写任务定义了。任务定义可以比作 Kubernetes pod。它是一对多容器的抽象，这些容器位于同一个网络名称空间中并运行。因此，如果我有两个容器，`web`和`db`，其中`web`需要访问端口`3456`上的容器数据库，它可以通过本地主机，即`http://127.0.0.1:3456`来访问。
任务是任务定义的一个实例。创建任务时，我们实际上是根据任务定义中的设置在集群中运行容器。我们可以从同一个任务定义中创建多个任务。
在 AWS ECS 中，还有一个服务的概念。服务非常类似于 Docker Swarm 服务，因为它确保一组任务的生命周期是协调的。崩溃的任务被重新安排，等等。
As always on AWS, we need to have an SG and a VPC with subnets defined ahead. Unfortunately, if you're not familiar with how to do this then we have to refer you to the online documentation of AWS since this topic lies outside the scope of this book.
# 创建 AWS 的 Fargate ECS 集群
创建至少有一个子网的安全组和 VPC 后，请执行以下步骤:
1.  导航至[https://console.aws.amazon.com/ecs](https://console.aws.amazon.com/ecs)并点击创建集群按钮。
2.  选择仅联网(由 AWS Fargate 提供动力)模板，然后单击下一步。
3.  输入集群的名称，例如`pets-cluster`，并保持“创建 VPC”复选框未选中。
4.  单击创建。将为您创建集群。
这可能需要一些时间。完成后，您可以单击查看集群按钮。
# 创作任务定义
我们从一个简单的任务定义开始，然后进行测试和改进，直到我们的 pets 应用启动并运行。继续执行以下步骤:
1.  在导航窗格中，选择任务定义。
2.  然后单击创建新任务定义按钮。
3.  选择 FARGATE 作为启动类型兼容性，然后单击下一步。
4.  命名任务定义`pets-task-def`。
5.  在任务大小部分下，选择 1 GB 作为任务内存，0.5 作为任务 CPU。
6.  接下来，单击添加容器按钮。在对话框中，输入`web`作为名称，`nginx:alpine`作为映像。在端口映射部分下，添加端口`80`:
![](img/4fb731a3-5f51-4dd4-9c98-c485aa84ee2e.png)
Adding a container to the ECS task definition
7.  然后单击添加。按钮。现在我们已经准备好在我们的宠物集群中实际运行这个任务描述中的一个任务。
# 在 ECS 中运行任务
选择`pets-task-def`任务定义，并在操作**下选择运行任务。在窗口中，执行以下步骤:**
 **1.  选择 FARGATE 作为发射类型。
2.  在群集 VPC 下拉列表下，选择您事先准备好的 VPC。
3.  在子网下拉列表中，选择 VPC 的一个子网。
4.  单击“安全组”选项下的“编辑”按钮，并选择您准备好的安全组。
5.  保留所有其他字段的默认值:
![](img/f31409e7-7168-4f34-9c89-67c72a870843.png)
Running a task in our ECS cluster
6.  完成后，单击运行任务按钮。调配和运行此任务可能需要一分钟左右的时间。您可以在“任务”选项卡上的集群概述中看到该任务:
![](img/48c40f18-03ea-457c-86fe-6ff195955959.png)
Our first task is running in the pets cluster
7.  单击任务(在任务列中)导航到任务详细信息页面。在那里你会找到这个任务的公共 IP 地址。复制 IP 地址，粘贴到新的浏览器标签，点击*进入*。Nginx 的欢迎页面应该显示如下:
![](img/cbc29b47-462b-4593-a3fb-1e6c23fad463.png)
Testing the first task running in our ECS pets cluster
# 修改任务定义
现在，我们已经成功地在我们的 ECS 集群中运行了第一个任务，是时候修改任务定义以使用我们的 pets 应用的映像，而不是 Nginx 映像了。我们将在这个任务定义中使用映像`fundamentalsofdocker/ch14-web:1.0`，其源代码可以在我们的代码库中的文件夹`labs/ch14/ecs/web`中找到。
更改任务定义的步骤如下:
1.  选择`pets-task-def`任务定义，然后选择版本 1。
2.  将启用“创建新版本”按钮。单击它，在出现的页面中向下滚动到容器定义部分。在那里你应该看到我们的`web`容器。单击它并修改映像，而不是`nginx:alpine`添加值`fundamentalsofdocker/ch14-web:1.0`。
3.  单击更新，然后单击创建。这将创建我们的任务定义的新版本 2，称为`pets-task-def:2`。
4.  返回集群并停止当前任务。然后单击运行新任务。
5.  在对话框中，填写与运行第一个任务时相同的信息，但确保在任务定义下选择修订 2，即`pets-task-def:2`。
6.  单击运行任务，等待任务完成设置并运行。这可能需要一段时间，因为 ECS 需要从 Docker Hub 下载映像。任务准备就绪后，导航到其详细信息并找到分配给它的公共 IP 地址。
使用浏览器验证您是否可以访问我们的`web`组件。如果一切顺利，我们应该会看到下面的截图:
![](img/3c7dd2e0-c090-4c2b-a24f-b7bd8b65ce1a.png)
The pets web component is running in our ECS pets cluster
现在我们的`web`组件正在运行，但是我们还需要一个数据库来检索漂亮的猫映像。因此，我们需要创建任务定义的另一个版本，其中将包括我们的`db`组件。
# 将数据库组件添加到应用
让我们修改任务定义，并添加一个卷和将使用该容器的数据库容器:
1.  再次选择`pets-task-def`任务定义，然后选择版本 2。
2.  单击创建新版本按钮。首先，我们要添加一个卷定义。该体积将由`db`容器使用。
3.  向下滚动至体积部分，点击**添加体积**链接。命名卷`pets-data`并点击添加。
4.  在容器定义部分，单击添加容器按钮。定义容器名称为`db`，映像为`fundamentalsofdocker/ch08-db:1.0`。
5.  向下滚动到存储和记录部分，在挂载点**、**下，选择`pets-data`作为源卷，`/var/lib/postgresql/data`作为容器路径:
![](img/5907e835-aefd-42c0-8cff-e19de8b7367d.png)
Mounting the volume pets-data to the db container
6.  单击添加以完成此对话框，然后单击创建以创建任务定义的修订版 3。本修订版 3 包含了我们的宠物应用的完整定义。让我们看看它是否有效，好吗？
7.  导航到集群详细信息，并确保停止上一个任务。
8.  然后单击运行任务，并输入与之前相同的值，但任务定义除外。
9.  在那里，一定要选择`pets-task-def:3`。
一旦任务被提供并运行，我们可以找到它的公共 IP 地址，然后在浏览器中导航到`http:///pet`，其中``是任务的公共 IP:
![](img/221bd3f0-2623-46cf-8977-577e7a0551e7.png)
The pets application running in AWS ECS
总之，我们在 AWS 中创建了一个集群，并通过首先定义一个 ECS 任务定义，然后运行该任务定义中的一个任务，将我们的 pets 应用部署到其中。因为我们使用的是 Fargate 版本的 ECS，所以我们不必担心自己的基础设施，比如 EC2 实例。
ECS 使得在云中部署和运行容器化应用变得相对容易。当使用 Fargate 模板时，我们甚至不需要配置和管理基础设施，因为 AWS 会为我们做这些。虽然这对许多人来说可能很有吸引力，但这也是该产品最大的缺点之一。出于可以理解的商业利益，AWS 想尽一切办法将我们锁定在他们的生态系统中。一旦我们购买了 ECS，我们就不太可能改变云提供商，甚至不太可能仅仅使用不同的编排引擎，比如 Kubernetes。
# 在 AWS 上部署和使用 Docker EE
在这一部分，我们将安装 Docker **通用控制平面**(**UCP**)3.0 版本。UCP 是 Docker 企业产品的一部分，支持两个编排引擎，Docker Swarm 和 Kubernetes。UCP 可以安装在云中或内部。UCP 甚至有可能出现混合云。
要尝试这种方法，您需要 Docker EE 的有效许可证，或者您可以在 Docker Store 上申请免费测试许可证。
# 供应基础设施
使用 Ubuntu 16.04 服务器 AMI 在 AWS 中创建一个**自动缩放组**(**【ASG】**)。将 ASG 配置为包含三个大小为 t2.xlarge 的实例。结果如下:
![](img/ccab4fa3-efcf-4e86-8ad6-63c91fc8542d.png)
ASG on AWS ready for Docker EE
一旦创建了 ASG，在我们继续之前，我们需要稍微打开 SG(我们的 ASG 是其中的一部分)，这样我们就可以通过 SSH 从我们的笔记本电脑访问它，并且虚拟机也可以相互通信。导航到您的 SG 并添加两个新的入站规则，如下所示:
![](img/1bda486d-f83f-4d49-9acb-3b04b17cbfe9.png)
AWS Security Group settings
在前面的截图中: