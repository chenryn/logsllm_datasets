            r,g,b = m[x,y]
            if (r, g, b) == WHITE:
                m[x,y] = BLACK
            else:
                if (r, g, b) == BLACK:
                    num_black_pixels += 1
                m[x,y] = WHITE
    return (img, num_black_pixels)
```
שימו לב שבנוסף
ללוגיקה שפורטה קודם, הקוד סופר פיקסלים שחורים (מקוריים, לפני השינוי) בתמונה
החתוכה. דבר זה בעצם משמש עבור קיצור הדרך שהזכרתי – במידה ומספר הפיקסלים השחורים
גדול יותר מקבוע שהוגדר מראש, הקוד מוותר על השימוש ב-OCR וממשיך אל התמונה הבאה. זאת, מכיוון שהקריאה לפונקציית ה-OCR היא היקרה ביותר
מבחינת זמן, ואילו אחוז ההצלחה כאשר ישנם קווים חותכים על גבי הטקסט הוא נמוך
מאוד. כלומר, אלו מקרים ש&quot;לא משתלמים&quot;. ישנו סיכוי גדול יותר שבניסיון
הבא, הקווים השחורים יופיעו במקום פחות חשוב, ואז יהיה משתלם לבצע את הקריאה ל-OCR.
  דוגמא למקרה שאינו משתלם:
  &nbsp;
  דוגמא למקרה משתלם:
אם ביצענו את קיצור
הדרך הזה, נצטרך לבצע הרבה יותר קריאות כדי &quot;לחפות&quot; על המקרים שאינם
משתלמים (לכן קצת קשה לקרוא לו &quot;אופטימיזציה&quot;).
הקוד של הפונקציה
העיקרית במקרה הזה הוא:
```python
with requests.Session() as s:
    with open(DEBUG_FILENAME, "w") as debug_file:
        for i in range(NUM_ATTEMPTS):
            print ("-" * 15)
            print (i)
            if DEBUG:
                debug_file.write("{}\n".format(i))
            response = s.get(URL + "captcha.php", stream=True)
            img_to_filter = response.raw
            if DEBUG:
                temp = io.BytesIO(img_to_filter.read())
                debug_file.write("\n"
                                .format(base64.b64encode(temp.read()), DEBUG_IMG_SIZE))
                temp.seek(0)
                img_to_filter = temp
            raw_after_filter, black_pixels = filter_image(img_to_filter)
            if black_pixels > BLACK_PIXEL_LIMIT:
                continue
            if DEBUG:
                with io.BytesIO() as output:
                    raw_after_filter.save(output, format="PNG")
                    debug_file.write("\n"
                                 .format(base64.b64encode(output.getvalue()), DEBUG_IMG_SIZE))
            del response
            guess = get_guess(raw_after_filter)
            print (guess)
            if DEBUG:
                debug_file.write(guess.encode("utf-8") + "\n")
            math_answer = get_math_captcha_answer()
            payload = {'captcha': guess, "math_captcha": math_answer, "submit": ""}
            response = s.post(URL, data=payload)
            if "flag" in response.text or "OWASP" in response.text:
                print (response.text)
                break
            solved_captchas_match = solved_regex.search(response.text)
            if solved_captchas_match:
                print ("Solved: {}".format(solved_captchas_match.group(1)))
```
&nbsp;
בגדול, הוא עושה
בדיוק מה שאמרנו:
·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
מבצע
מספר ניסיונות (NUM_ATTEMPTS), כאשר בכל
ניסיון, הוא:
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
קורא
את התמונה
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
מנקה
את התמונה ובודק את מספר הפיקסלים השחורים (filter_image)
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
מוותר
על הניסיון אם המספר גבוה מדי
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
פותר
את המשוואה המתמטית (get_math_captcha_answer)
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
מגיש
את הפתרון
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
מדפיס
את מספר ההצלחות
o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(במידה ודגל DEBUG דלוק, הוא מטמיע בקובץ
HTML את התמונה המקורית, את התמונה
הנקייה ואת הניחוש, כך שבסוף הריצה אפשר לעבור על כל הנסיונות בקלות)
לשם השלמות, נצרף גם