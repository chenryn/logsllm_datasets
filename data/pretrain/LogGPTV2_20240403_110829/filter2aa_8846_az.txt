看上去无关紧要，但是在较大的上下文环境中就会表露出这是不是可以
允许。
56、示例：
“Julio	有权访问文件吗？”
对于内容相关访问控制：系统检查 ACL	并返回响应：
“Julio	能够访问
这个文件，但是只能执行读操作。”
对于上下文相关访问控制：系统检查：Julio	进行了其他哪些访问尝
试？这个请求是否不符合安全请求的顺序？这个请求是否在系统允许的
访问时间内（上午 8:00~下午 17:00)	ᨀ出？如果上述问题的答案都与一
组事先设置的参数相符，那么 Julio	就能够访问文件 A；否则，他就不能
访问文件 A。
57、多实例（polyinstantiation）：在一个表中有两行或更多行具有相同
的主键元素！在不同分类级别的用户使用时返回不同的数据行，常常被
用作防范推理攻击。
58、比如：一个数据库表中包含巡逻舰艇的位置（通常都是秘密级信
息），如果一艘特殊的舰艇正在暗中执行到达绝密位置。如果数据库管
理员简单地将其位置分类更改为绝密，那么秘密级用户在不能查询这艘
舰艇的位置时就会知道发生了一些不正常的事情。如果应用多实例方法，
表中可能会插入两个记录。第一条属于绝密级分类，将反映这艘舰艇的
实际位置，并且只对属于绝密安全级的用户可用。第二条记录属于秘密
级，指出舰艇正在进行例行巡逻，并且向属于秘密安全级的用户显示这
一内容。
59、噪声和干扰（Noise	and	perturbation）：DBMS	中插入错误的或欺骗
的数据，从而重定向或阻挠信息机密性攻击。在使用此技术时，必须非
常小心，确保插入数据库中的噪声不会影响业务操作。
60、开放数据库互连（ODBC）是一种数据库特性，允许应用程序与不同
数据库类型通信。ODBC	扮演了应用程序和后端数据库驱动程序之间代理
的角色，使应用程序编程人员能够自由创建解决方案，而不必考虑后端
的数据库系统。
61、主存就是RAM；辅存就是硬盘、磁带、CD等；虚拟内存使用辅存模
拟主存，如用硬盘模拟RAM；虚拟存储器用主存模拟辅存，比如供操作
系统使用“RAM盘”，在RAM中模拟C盘，那叫一个快，但断电后不恢复。
62、在敏感的环境下，如果怕攻击者绕过操作系统直接访问物理存储介
质如硬盘，可以使用加密文件系统的方法。
63、隐蔽存储通道（Covert	storage	channels	）：
不同分类级别的用户，可以通过共享内存或者硬盘，偷偷传输敏感的
数据；
可以通过操纵磁盘的可用空间或文件的大小，在安全级别间偷偷传送
信息。
64、专家系统：专家系统试图具体化人类在某个特殊学科累积的知识，
一些研究已经表明，专家系统常常能够做出比人类的常规决策更好的决
定。每个专家系统都有两个主要的组件：知识库和推理引擎。
65、知识库（knowledge	base）以一些列的if	then对人类专家的知识进行
编码：
如果飓风是 4	级或更高级别的风暴，那么洪水-般会达到海拔 20	英尺高。
如果飓风的风速超过了每小时 120	英里，那么木质结构的建筑物将被毁坏。
如果是在飓风季节末期，那么飓风在到达海岸时会变得更强。
在实际的专家系统中，知识库将包合成百，上千个如上所示的断言。
66、推理引擎（inference	engine）使用逻辑推理和模糊逻辑技术的组合
对知识库的信息推理做出结论。仍然以飓风为例，用户通知专家系统4	
级飓风已经接近海岸，风速为平均每小时 140	英里。推理系统基于知识
做出撤离建议。
67、专家系统的优劣完全取决于知识库和推理引擎的决策制定算法，优
点是不受情绪影响，在紧急事件、股票交易等场景下表现出色，贷款机
构采用专家系统作出信用决策，而不是贷款主管自言自语说：“好，虽
然 Jim	一直没有准时付账，但是他看起来是个相当不错的人。”
68、模糊逻辑（fuzzy	logic）：与利用“黑白”数据归类的代数方式或集
合论的严格数学相比，这种技术的设计更接近于人类的思维模式。通过
替换使用模糊的界限，模糊逻辑允许算法思考控制人类思维的“灰度梯
度”。专家系统通过下列 4	个步骤或阶段使用模糊逻辑：模糊化、推理、
合成以及逆模糊化。
69、神经网络：典型的神经网络涉及很多层次的合计（Summation），每
一层的合计都需要加权信息以反映在决策制定过程中的相对重要性。权
值的确定可以在培训阶段实现，在这个阶段，网络被ᨀ供正确决策已知
的输入信息。这个算法随后进行这些决策的逆向工作，从而为计算链中
的每个节点确定正确的权值。这种活动被称为 Delta	规则或学习规则。
通过使用 Delta	规则（Delta	rule	or	learning	rule	），神经网络就能够从经
验中学习知识。
70、决策支持系统（Decision	Support	System, DSS）是一种知识型应用，
它分析业务数据，并且以更容易做出业务决策的形式ᨀ供给用户，比如
以图形方式ᨀ供信息，并链接概念和内容并指导操作者。决策支持系统
更多被视为信息型应用而不是操作型应用。DSS 常常被知识型员工（例
如服务台人员或客户支持人员）和销售服务人员（例如电话推销员）所
使用。很多DSS还有专家系统做支持。
71、专家系统、神经网络都在计算机安全领域有很多应用。比如：可以
帮助管理员对大量的日志记录和审计跟踪数据进行分析。
第21章 恶意代码与应用攻击
1、病毒4	种常见的传播技术：主引导记录感染、文件感染、宏感染和服
务注入。
2、主引导记录病毒（Master	Boot	Record,	MBR）：是已知的最早的病毒
感染形式。这些病毒攻击MBR（在硬盘、软盘或CD/DVD等可启动介质上)，
这是在启动过程中加载操作系统的部分。由于 MBR 非常小（通常只有
512	字节），所以病毒将主要的代码存储在存储介质的其他部分。在系
统读取受感染的 MBR 时，病毒会引导系统读取并且执行在另一个地方存
储的代码，从而将全部的病毒加载到内存中执行。
3、文件程序感染病毒：感染可执行文件，并且在操作系统试图执行这些
文件时被触发。病毒可能只是对可执行程序进行了少许改动，也可能替
换了整个文件。一般的病毒不使用隐形或加密这样障眼法技术，通过比
较感染前后的文件特性（如大小和修改日期）或散列值，常常可以很容
易地检查出这种病毒。
4、同伴病毒（companion	virus）：同伴病毒依靠基于 Windows	的可执
行文件 com、exe	和bat这个先后顺序的操作。例如，硬盘上有一个名为
game.	exe	的程序，那么同伴病毒可能会使用名字 game.	com。如果你简
单地键入“game“，那么操作系统将执行这个病毒文件 game.	com，而不
是实际要执行的文件 game.	exe。所以，在命令行工具下执行文件，要避
免快捷方式并且使用具体的文件名。
5、宏病毒：最早出现在 20	世纪 90	年代中期，它采用拙劣的技术感染
Microsoft	Word文档（使用VBA脚本语言编写恶意代码）。1999	年，
Melissa	病毒通过 Word	文档传播，利用 Microsoft	Outlook	中的安全漏洞
进行复制。在 2000	年初，臭名昭著的 I	Love	You 病毒很快步其后尘，
也利用相似的漏洞进行传播。
6、服务注入病毒：病毒将自己注入到操作系统的可信运行进程中，如
svchost.exe、winlogin.exe 和 explorer.	exe。所以能够绕防病毒软件的检
测。一个防护办法是确保允许读取Web内容的所有软件（如浏览器、媒
体播放器、helper）打上最新的安全补丁。
7、反病毒软件的措施：能清除病毒就杀毒清除；发现有病毒却不知道怎
么杀，就隔离它；如果安全策略不允许隔离，或者文件太危险超过阈值，
就删掉它。
8、许多防病毒软件使用基于启发式的机制检测潜在的恶意软件感染。这
些方法分析软件的行为，寻找病毒活动的迹象，例如试图ᨀ高特权级别、
掩盖踪迹，以及更改不相关的或操作系统的文件。
9、Tripwire	被设计用于警示管理员发生未授权的文件修改，常常被用来
检测对 Web	服务器的破坏和类似的攻击。对关键的系统可执行文件被修
改，Tripwire也能ᨀ供某些病毒感染的警告。这通过维护系统所有文件的
散列值数据库来实现。
10、新类型的病毒为了挫败反病毒软件，使用狡猾的技术逃避检测，复
合病毒、隐形病毒、多态病毒和加密病毒。
复合病毒：使用多种传播技术，比如感染文件+感染MBR。
Multipartite	Viruses	
隐形病毒：Stealth	viruses	，通过对操作系统的实际篡改来欺骗反病毒
软件，比如覆盖MBR后，随后通过修改操作系统的访问功能，当反病毒
软件包向操作系统请求读MBR时，给他一个正常的。
多态病毒：Polymorphic	virus，病毒在传播时会修改自己的代码。导致
每次感染新的系统时病毒的特征（也称签名）略有不同。目的是通过连
续改变特征使得特征型反病毒软件包失效。然而，反病毒软件供应商已
经能够都能够检测出已知的多态病毒。但就是生成这个特征会花费供应
商较长的时间，导致多态病毒有更长的时间肆虐。
加密病毒：很像多态病毒，但不是通过改变代码来生成不同的特征，而
是在每个感染时都使用不同的密钥，使得主代码在每个系统上都呈现出
完全不同的样子。加密病毒使用一个很短的、被称为病毒解密程序的代
码段，这个代码段包含必要的密码学信息，由于这个指示特征，加密病
毒也容易被最新的反病毒软件包识破。
11、骗局（hoax）是一种无聊的资源浪费，总是通过邮件说有一个传闻
中的所谓“病毒”，说让大家小心一种很厉害的新病毒，其实根本没事。
Good	Times这种所谓的“病毒”从1994年就出现了，直到今天还在传播。
12、逻辑炸弹：是感染系统并且在达到一个或多个满足的逻辑条件（例
如，时间、程序启动、Web	站点登录等）前保持休眠状态的恶意代码对
象。大多数逻辑炸弹被软件开发人员编入用户定制的应用程序中，有些
人的目的是在被突然解雇时破坏公司的工作。
13、流氓杀毒软件：这类软件欺骗用户安装它，声称是一个防病毒包，
通常伪装成一个弹出广告，并模仿成安全警告的外观和感觉。一旦用户
安装软件，就会窃取个人信息或ᨀ示用户付款以“更新”流氓杀毒软件。
所谓“更新”只是禁用木马而已。
14、勒索软件：感染目标计算机，然后使用加密技术来加密存储在系统
上的文档、电子表格和其他文件，并使用只有恶意软件创建者知道的密
钥。接下来弹出警告要求支付赎金。最著名的是Cryptolocker。
15、蠕虫：不需要任何人为干预就可以传播自己。2001年夏天，Code	
Red	蠕虫对未安装补丁程序的IIS之间快速传播，它随机选择成百上千的IP
地址，查看这些主机是否运行存在漏洞的IIS版本。任何被找出的系统都
很快被破坏。然后破坏本地Web服务器上的HTML页面，将其改为：
Welcome	to	http:	/	/www.	Worm.	Com!	HackedBy	Chinese!	并向系统植入一
个逻辑炸弹，这个逻辑炸弹将向 IP	地址 198.137.240.91	发起拒绝服务攻
击，该地址是白宫主页的Web	网站服务器。反应敏捷的政府 Web	站点
管理员在实际攻击发生之前便改变了白宫的 IP	地址。Code	Red利用的IIS
漏洞的安全补丁早在前一个月左右就已由 Microsoft	发布。如果安全管理
员迅速地安装了这个补丁，那么 Code	Red	将会是一种失败的病毒。
16、RTM与互联网蠕虫:1988年11月，计算机专业学生Robert	Tappan	
Morris制造的一个恶意蠕虫被意外地释放到了互联网上并传播破坏了大
量的系统，蠕虫利用Unix的4个安全漏洞进行传播：Sendmail 调试模式漏
洞：这个漏洞准许蠕虫通过向远程系统上的 Sendmail 程序发送特殊的、
包含蠕虫代码的破坏性电子邮件来传播自己，远程系统在处理邮件时就
会被感染；密码攻击：使用字典攻击，通过使用一个有效系统用户的用
户名和密码来试图获得对远程系统的访问权服；finger漏洞：finger存在
一个缓冲区溢出漏洞，使得嬬虫能够进行传播；信任关系：在感染系统
后，蠕虫分析了网络中该系统与其他系统之间存在的信任关系且试图通
过可信路径传播。Morris只为其犯罪行为受到轻微控诉。根据1986年的
计算机违法犯罪法案（Computer	Fraud	and	Abuse	Act，CFAA），他被判
三年缓刑 、400	小时的社区服务、一万美元的罚款。Morris的父亲
Robert	Morris当时是NSA下属国家计算机安全中心NCSC的主管。
17、震网（Stuxnet）蠕虫：2010年年中在互联网上出现，这种高度复杂
的蠕虫使用各种高级技术来传播，包括多个零日漏洞。震网病毒使用以
下传播技术：在本地网络上搜索未受保护的管理共享系统；利用零日漏
洞攻击 Windows	服务器上的服务和打印机后台处理程序；使用默认的数
据库密码连接系统；使用共享的 USB	设备进行传播。它实际上是在寻找
西门子制造的控制器系统，据称是用于生产核武器材料的系统，发现后，