# eBook: Cloud-Native Observability: Actionable Intelligence for Complex Systems

## How to Architect Observability for Modern Applications and Infrastructure Using Metrics, Events, Logs, and Traces (MELT) Data

**© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.**

---

### Table of Contents
1. **End-to-End Monitoring and Insights Power Reliability and Innovation** ........................................ 3
2. **Observability for Cloud-Native Development** ................................................................................ 7
3. **More About MELT** ............................................................................................................................ 9
4. **Why Observability?** ...................................................................................................................... 10
5. **Who Needs Observability?** .......................................................................................................... 13
6. **Where to Start?** ............................................................................................................................. 14
7. **Data Sources** ............................................................................................................................... 15
8. **What is OpenTelemetry?** ............................................................................................................. 16
9. **The Four Golden Signals** ........................................................................................................... 19
10. **Dashboards and Visualizations** .................................................................................................. 21
11. **Key Takeaways for Observability** .............................................................................................. 25
12. **Tools for Building Cloud-Native** ............................................................................................... 26
13. **Recap: Observability Architecture** ........................................................................................... 38
14. **Conclusion** ................................................................................................................................ 40

---

### End-to-End Monitoring and Insights Power Reliability and Innovation

Many organizations aim to increase speed and agility by implementing microservices and cloud-native architectures. However, these capabilities introduce additional complexity, as cloud-native applications are decoupled and distributed. This makes systems challenging to observe, and identifying the root cause of issues can be difficult. DevOps teams may also struggle to monitor components outside their control.

In this eBook, we provide guidance on architecting end-to-end observability for cloud-native applications and infrastructure using telemetry data. You will learn practical methods for establishing baselines and uncovering the "why" behind issues, not just the "what."

---

### Modernization is a Business Priority Today

To delight customers and win new business, organizations need to build reliable, scalable, and secure applications. This involves adopting new technologies, practices, and consuming services as APIs. As an application development professional, your goal is to deliver business value quickly. Modern applications achieve this by breaking down monolithic applications into smaller, functional services—or microservices—that focus on specific tasks and can be deployed and scaled independently.

This approach forces organizations to give engineering teams the autonomy to architect, develop, deploy, and maintain each microservice. This allows for quick decision-making, as changes only impact individual services. Incremental innovation through small, frequent changes drives continuous improvement, rather than waiting for a major overhaul.

**Key Aspects of Modern Applications:**
- Independently scalable microservices (e.g., serverless and containers)
- Interconnected through APIs
- Continuous delivery of updates
- Quick adaptation to change
- Global scalability
- Fault tolerance
- Careful management of state and persistence
- Built-in security

---

### Increasing the Speed of Innovation

Modern applications were born out of the need to deliver smaller features faster to customers. To continuously deliver features, all cross-functional teams must operate as a single unit—a strategy known as "One Team." Each type of change requires its own fully automated delivery pipeline, and capabilities like test automation and security testing must be integrated to ensure high confidence in production deployments.

---

### What is Cloud-Native? Why Does It Matter?

Cloud-native is an evolving term that refers to the vast amount of software being built today, which needs a place to run and a cohesive system to work within. The Cloud Native Computing Foundation (CNCF) defines cloud-native technologies as those that enable organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds.

While this definition broadly applies to everyone, not all organizations have the same capabilities. This is known as the "lowest common denominator problem," where broad appeal limits the capabilities that can be leveraged. Amazon Web Services (AWS) provides a broad set of capabilities, including serverless technologies, which remove the burden of managing servers, allowing you to focus on core business logic and quickly adding value.

---

### Observability for Cloud-Native Development

As organizations evolve their cloud-native understanding, they gain capabilities that make releasing new features and functionality faster, better, and cheaper. In the following sections, we will focus on the capability of observability.

---

### But First: What is Observability?

The concept of observability has recently been applied to information technology (IT) and cloud computing. Originating in control systems engineering, observability was defined as a measurement of how well a system's internal states could be inferred from its external outputs. A system is observable if its current state can be determined in a finite time period using only the outputs.

In IT, observability uses four types of telemetry data: metrics, events, logs, and traces (MELT). Analyzing MELT data provides deep visibility into distributed systems, enabling teams to identify root causes and improve performance. Instrumenting each component to collect MELT data helps form a fundamental understanding of the system's connections, relationships, and health.

---

### More About MELT

Let’s break down the individual types of data that make up MELT:

- **Metrics:** Numeric measurements, such as CPU usage, aggregated over time.
- **Events:** Discrete actions, such as user interactions or system changes.
- **Logs:** Lines of text produced by a system or application during execution.
- **Traces:** Samples of causal chains of events or transactions between different components in a microservices ecosystem.

---

### What Should You Be Observing? Why Observability?

Now that we understand MELT, let’s discuss what you should be observing. Besides traditional infrastructure metrics like CPU, memory, and disk usage, expand your practice to include user experience and troubleshooting insights. Collect runtime variable values, stack traces, and other relevant data to identify root causes faster.

Cloud-native systems are highly distributed, so you need data from all components that contribute to the user experience. Observability is crucial in distributed systems because it provides a complete picture by integrating information from multiple applications.

---

### Anti-Patterns: Where Poor Observability Hurts You

There can be too much of a good thing, and in this case, it’s the misuse of observability. Common anti-patterns include:
- **Environment Inconsistency:** Development, test, stage, and production environments must be consistent.
- **Unnecessary Alerts:** Too many unactionable alerts can lead to alert fatigue, causing engineers to ignore important notifications.

Poor observability can result in:
- **Slower Mean Time to Resolution (MTTR):** Without visibility, identifying and resolving issues takes longer.
- **Higher Costs:** Over-provisioning resources without accurate traffic patterns leads to inefficiencies.

---

### Who Needs Observability?

Everyone benefits from observability, but the following personas see immediate advantages:
- **QA/Test Engineer:** Wants to know how tests impact the system and contextual data about bugs.
- **Security Engineer:** Ensures systems are secure and compliant with corporate standards.
- **Operations Engineer:** Monitors system performance and reduces signal-to-noise ratio in alerts.
- **Leadership:** Gains visibility into business KPIs and ensures systems are performant and cost-optimized.
- **Developer:** Optimizes software, troubleshoots issues, and traces transactions through the system.

---

### Where to Start?

Start by selecting an application or service to observe. Determine the data sources needed based on different personas and their requirements. Once you have a list of data sources, choose an observability platform that best serves your needs.

---

### Data Sources

Common data sources include:
- **End User Telemetry**
- **Network Data**
- **On-Premises and Cloud Data (e.g., AWS CloudWatch, AWS Config, AWS CloudTrail)**
- **Third-Party and SaaS Data**

Unified logging and standardization are essential. Standardize log data formats and adopt OpenTelemetry to instrument, generate, collect, and export telemetry data for analysis.

---

### What is OpenTelemetry?

OpenTelemetry is a CNCF incubating project that provides APIs, SDKs, and agents to instrument applications and send correlated traces and metrics to a destination of choice. It supports 11 languages and auto-instrumentation agents in Java, JavaScript, Python, .NET, and more.

- **An Observability Framework for Cloud-Native Software**
- **Instrument, Generate, Collect, and Export Telemetry Data (MELT)**
- **Supports 11 Languages and Growing**

**AWS Distro for OpenTelemetry (ADOT)**

---

**© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved.**