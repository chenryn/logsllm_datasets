我们再加载一个beacon的样本，看看入口点是否还是一致，这里发现三个样本的入口点都是14b0的地方，所以我们推测CobaltStrike的样本入口点都在14b0的地方，所以我们编写第二个规则去验证一下。
在yara3.0以下的版本中，可以直接使用entry_point变量获取入口点，在3.0以上的版本中，该变量已经被弃用。取而代之的是一个pe模块。现在可以使用pe.entry_point来获取入口点，但是需要注意的是，这里是获取到的文件偏移，也就是offset，并不是我们在IDA中看到的entry_point，这里需要注意一下。  
程序的Offset是0x8b0：
所以我们可以将条件写成如下形式：
官方文档给的写法是用关键字at：
但是需要注意，使用at是取值，并不是匹配地址。  
也就是说上图这种写法是去找一下$a变量的值是否在entrypoint这个地址能找到。  
也就是在我们这条规则中，如果要用at，可以写成如下：
这里的$name中的十六进制值需要大写，匹配的值就是IDA入口点的十六进制数据：
但是我们同时也可以看到，at的写法没有那么有通用性，我们还是使用上面 == 的写法。
那么现在第二条规则就已经写好了，我们继续来看其他的内容。  
我们静态分别看下这个样本的main函数：
在Main函数中可以看到，关键就调用了两个call，分别是4027b0和401800
我们大概看一下就可以知道sub_401800才是关键函数，在sub_401800函数中，程序会通过CreateThread创建一个新线程，并且可以看到有一个奇怪的%c%c%c%c%c%c%c%c%cMSSE-%d-server看起来像是通信协议。
这里CreateThread的lpStartAddress是sub_4016D3,在sub_4016D3的sub_401608函数中可以看到正在通过CreateNamedPipeA的方式创建管道准备通信。
我们调试器里直接过来可以看到跟我们想的应该一样，这里的确是跟通信相关的内容。
查看多个样本，可以发现%c%c%c%c%c%c%c%c%cMSSE-%d-server 这个值是固定的。  
所以可以直接尝试匹配这个串试试：
可以看到再次成功匹配。到这里，我们关于CobaltStrike的Beacon木马的yara规则基本上就提取完成了。  
最后，我们给规则加上一个PE的判断条件：
现在这个条件就比较完整了。
  1. 通过uint16(0) 的方式取文件的前两个字节，判断是否等于0x5A4D 如果等于则说明是PE，这里用于过滤PE文件
  2. 判断程序的pe.entry_point是否等于0x8B0，这里是文件的file offset，这里也算是一个很好的过滤条件，可以直接过滤掉大部分的文件。
  3. 通过两个filesize的比较限制文件的大小
  4. 最后用一个关键的字符串来做最终的验证。
这里是看到这个串的确是CobaltStrike使用来通信的，且一批CobaltStrike的马都包含了这个串，相对来说，应该不会命中到其他的正常文件，这个通信协议应该是cs专用的，所以可以直接这样写，如果不想误报，想要提高检测的精准性，可以继续找其他的特征提取。  
反正在写yara规则的时候，通用性和精准性，是分析人员需要权衡的条件，如果我们想要提高特征的通用性，势必就需要减少一些匹配条件，精准性就会下降，至于到底是通用性优先还是精准性优先就得看具体的应用场景。
###  powershell马特征
处理了CobaltStrike的PE马，我们再来看看其他类型的木马规则如何提取。  
首先是powershell木马，也就是ps1的文件。  
我这里只生成了两个。  
分别查看一下文件内容。  
32位：
64位：
这里可以看到，32位和64位的powershell马结构其实是一样的，只是32位的马使用了$DoIt=
@’’的方式来定义两个函数，其实和64位这里是一样的。
这里很明显，程序最后关键执行的数据在24行开始的地方，这里定义了超级大的base64串。经过观察可以发现32为和64执行的串的头部是不一样的：  
32位：
64位：
经过分析我们可以发现，代码的最下面，上面定义的这个$var_code的执行语句，且两个版本的ps马都是这样写的，于是我们直接尝试用字符串匹配这一段试试。
就直接在原有yara的基础上增加一个rule即可：
然后命令行测试，可以看到两个ps1脚本都被成功匹配
###  html_pe马特征
CobaltStrike的html木马分为了三种，分别是包含PE文件的hta 包含VBS的hta 包含powers的Hta，我们分别来看看。
首先是包含PE的hta：  
该类别的cs马会直接将一个PE文件的十六进制数据流硬编码到文件中：
在马最下面，程序会定义一个var_tempexe文件用于接受上面的数据流，将该文件写入到本地并且通过run执行之后删除该文件。这里其实写入的文件应该也是beacon的木马，在14行代码的位置，有着var_tempexe变量的赋值语句，经过与多个样本的对比分析发现，后面的beacon_evil.exe不是固定的，而是攻击者在使用CobaltStrike生成木马的时候给定的文件名。所以我们可以考虑用正则来匹配这一段，作为条件之一。  
编写yara特征之后进行扫描，成功捕获对应的样本
完整的正则表达式如下：  
/var_tempexe = var_basedir & \”\\\” & \”[A-z]{1,20}.exe\”\s*Set var_stream =
var_obj.CreateTextFile(var_tempexe, true , false)/
我们来一点点拆解。  
首先，我们在yara中使用正则表达式要使用  
//  
标识，我们将正则写到两个斜杠之间。  
var_tempexe = var_basedir & 这段是我们直接从原始代码中复制出来的。  
\”\\\” 用于转义匹配中间的 “\”  
由于我们刚刚已经分析过，后面的beacon_evil.exe不是固定的，是又攻击者指定，所以我这里写了一个范围，1-20，然后通过\s*将后面的语句给组合起来进行匹配。
###  html_VBS特征
接下来我们看看html的VBS马，结构如下：
经过分析，我们可以看出来，下面的一大段代码，其实是带轻微混淆的VBA代码。  
混淆方法很简单，就是通过&符号拼接由chr函数转换的ascii  
“&Chr(61)
我们尽量找一个比较通用的地方来提取特征，稍微分析一下，可以发现，上面部分都是一些函数的导入，变量的定义，没有做神什么比较奇怪的操作，在57行的位置，定义了一个很大的数组，数组名为myAr&ray
后面的Chr(61)转换之后是等于符号 = 。 后面的一大段数据都是用于给myArray赋值的。所以我们可以考虑将特征提取到这里。
这里应该可以直接写字符串进行匹配了：
###  html_powershell
最后，html类别的马就只剩下powershell类型的了，还是先来看看代码结构
cs的powershell马结构相对来说就很简单了，就是通过powershell执行了超级长一段base64编码的脚本命令。  
直接取这个base64串的头部出来解码看看是是不是常见的语句  
JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8Acg
解码之后发现是$s=New-Object IO.Memor  
结合代码分析，这里是将后面的数据加载到内存中执行，这里是在做准备工作。
结合前面的powershell -nop -w hidden
-encodedcommand本身也不是常见的powershell语句，正经人谁会这样干，所以我们直接尝试提这里的字符串看能否通杀。  
貌似可以
###  Macro
现在还有一类Macro样本，也就是Office宏代码。这个其实也是简单，但是这里我生成的时候偷了一个懒，没有按照cs的文档将宏代码存储到Office文档中。关于Office文档的查杀，在后面再结合oledump等工具继续介绍。
## 0x04 查杀效果
我们回到上级目录，看看同时查杀3.14和4.0的效果怎样  
我们将结果写入到1.txt中
一共是查杀了24个样本
可以看到，一共27个文件，除了vba和这里的两个raw没写规则外，全部查杀了。所以，对CobaltStrike木马基本查杀的yara规则就这样写好了。后面我们学习了yara的高级写法或是遇到其他cs的样本可以再继续完善，但是目前这个yara应该可以识别绝大多数的正常cs马了。
最后，CobaltStrike解压之后，目录中会有一个CobaltStrike.jar文件
使用解压缩工具将这个文件也解压：
这里面有一个名为resources的文件夹，就是CobaltStrike的配置信息，我们在CobaltStrike控制台生成的木马都来源于这个文件夹。
所以我们也可以直接分析这里面的样本，提取规则进行查杀。
## 0x05 完整yara
    import "pe"
    rule beacon32
    {
        meta:
            description = "This rule is used for discovery CobaltStrike’s beacon32PE Trojan"
            author = "int3"
            date = "2020-07-21"
            reference = "reference"
            hash = "hash"
        strings:
            $name = "%c%c%c%c%c%c%c%c%cMSSE-%d-server"
        condition:
            uint16(0) == 0x5A4D and pe.entry_point == 0x8b0 and filesize > 277KB and filesize < 304KB and $name
    }
    rule ps
    {
        meta:
            description = "This rule is used for discovery CobaltStrike’s powershell Trojan"
            author = "int3"
            date = "2020-07-21"
            reference = "reference"
            hash = "hash"
        strings:
            $str1 = "$var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)"
            $str2 = "[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)"
        condition:
           uint16(0) != 0x5A4D and $str1 and $str2
    }
    rule CobaltStrike_hta_pe
    {
        meta:
            description = "This rule is used for discovery CobaltStrike’s hta'pe Trojan"
            author = "int3"
            date = "2020-07-21"
            reference = "reference"
            hash = "hash"
        strings:
            $reg1 = /var_tempexe = var_basedir & \"\\\" & \"[A-z]{1,20}.exe\"\s*Set var_stream = var_obj.CreateTextFile\(var_tempexe, true , false\)/
        condition:
           uint16(0) != 0x5A4D and  $reg1
    }
    rule hta_VBS
    {
        meta:
            description = "This rule is used for discovery CobaltStrike’s hta'vbs Trojan"
            author = "int"
            date = "2020-07-21"
            reference = "reference"
            hash = "hash"
        strings:
            $str = "myAr\"&\"ray \"&Chr(61)&\" Array\"&Chr(40)&Chr(45)&\"4\"&Chr(44)&Chr(45)&\"24\"&Chr(44)&Chr(45)&\"119\"&Chr(44)"
        condition:
           uint16(0) != 0x5A4D and  $str
    }
    rule hta_ps1
    {
        meta:
            description = "This rule is used for discovery CobaltStrike’s hta'vbs Trojan"
            author = "int"
            date = "2020-07-21"
            reference = "reference"
            hash = "hash"
        strings:
            $str = "var_shell.run \"powershell -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8A"
        condition:
           uint16(0) != 0x5A4D and  $str
    }
## 0x06 总结
本篇是YARA规则的入门篇，通过本节的内容我们可以发现，Yara在恶意样本检测中有着至关重要的作用（虽然本节中写的YARA很简单，但是Yara可以做的远远不止于此）。此外，我们还可以通过别人写好的yara，辅助我们分析恶意软件，阅读大佬写的Yara我们可以知道大佬在分析对应的样本的时候，关注点在哪里，他提取到了目标木马/家族的哪些特征等等。