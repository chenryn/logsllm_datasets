# Title: MAC and UML for Secure Software Design

## Authors:
- Thuong Doan, University of Connecticut, 271 Fairfield Road, U-2155, Storrs, CT 06269, USA, 1-860-486-3719
- Steven A. Demurjian, University of Connecticut, 271 Fairfield Road, U-2155, Storrs, CT 06269, USA, 1-860-486-3719
- T.C. Ting, University of Connecticut, 271 Fairfield Road, U-2155, Storrs, CT 06269, USA, 1-860-486-3719
- Andreas Ketterl, University of Connecticut, 271 Fairfield Road, U-2155, Storrs, CT 06269, USA, 1-860-486-3719

## Abstract
Security must be a primary concern in the design of large-scale, interacting software applications, at all stages of the lifecycle. This includes accurate and precise policy definition, authorization, authentication, enforcement, and assurance. One of the dominant tools in software design is the Unified Modeling Language (UML), which is used for specifying, visualizing, constructing, and documenting software artifacts. UML diagrams provide different perspectives for various stakeholders, such as use case diagrams for user interactions, class diagrams for static classes and relationships, and sequence diagrams for dynamic behavior. However, UML's support for defining security requirements for these diagrams and their elements is limited.

In this paper, we address this issue by incorporating Mandatory Access Control (MAC) into use case, class, and sequence diagrams. We provide a framework for defining clearances and classifications for relevant UML elements, and we introduce security assurance rules (SARs) to ensure that security policies are consistently applied during the design process. Our approach bridges the gap between software engineers and an organization's security personnel, supporting secure software design. To demonstrate the feasibility and utility of our work, we have integrated our MAC enhancements into Borland's Together Control Center Environment.

## Categories and Subject Descriptors
- D.2.2 [Software Engineering]: Design Tools and Techniques – Object-oriented design methods.
- K.6.5 [Management of Computing and Information Systems]: Security and Protection – Unauthorized access.

## General Terms
- Design, Security.

## Keywords
- Security, Mandatory Access Control, UML, Software Design.

## Introduction
The ability to design, build, and maintain functionally rich, large-scale software applications is virtually limitless, thanks to advances in computing power, memory, and disk storage, as well as the evolution of software design and development environments. The integral nature of the World Wide Web in daily life and the increasing concern for homeland defense have elevated security to a critical position. However, security is often an afterthought in software design and development, delayed to later stages or delegated to database administration.

The scope of security considerations includes:
- Policy definition for what needs to be protected, anticipated users, and user privileges.
- Authorization to grant or revoke privileges based on the policy.
- Authentication to verify users and limit their actions to authorized privileges.
- Assurance to attain the security policy within the enforcement framework for an active application.

These considerations strongly argue for security as a primary concern in the software design and development process at all stages of the lifecycle.

To address security during software design and development, this paper details our research on incorporating Mandatory Access Control (MAC) into the Unified Modeling Language (UML). UML unifies the approaches of various models into a standard, providing the best features of the constituent models. While UML has nine types of diagrams to model an application's behavior, interactions, and implementation, it lacks direct support for security specification.

There have been other efforts to integrate security with UML, but our approach breaks new ground by integrating MAC into use case, class, and sequence diagrams, and by providing design-time security assurance. Specifically, we report on our research on the incorporation of MAC into UML use case, class, and sequence diagrams, for the definition of clearances and classifications for relevant UML elements. We initially focus on three popular UML diagrams: use case diagrams for user interactions, class diagrams for static classes and relationships, and sequence diagrams for dynamic behavior.

For these diagrams, we provide a framework for defining MAC security levels (classifications and clearances) as properties of the various elements (e.g., use cases, actors, methods, classes, etc.). This framework aims to bridge the gap between software engineers and an organization's security personnel in support of secure software design. We also propose security assurance rules (SARs) that enforce the attainment of security-level domination and MAC properties (Simple Security, Simple Integrity, Liberal *, and Strict * Properties) as users define and evolve use case, class, and sequence diagrams.

To demonstrate the feasibility and utility of our work, our MAC enhancements for UML have been integrated into Borland's Together Control Center Tool.

## Background Concepts
### Mandatory Access Control (MAC)
In the MAC model, security levels (typically unclassified (U), confidential (C), secret (S), and top secret (T)) are assigned to each subject (clearance - CLR) and each object (classification - CLS). The permission of the subject to perform some operation on the object depends on the relationship between clearance and classification, as dictated by:
- **Simple Security Property ("read down - no read up")**: A subject can read an object only if its clearance is greater than or equal to the classification of that object.
- **Strict *-Property ("write equal")**: A subject can write an object only if its clearance is equal to the classification of that object.
- **Liberal *-Property ("write up - no write down")**: A subject can write an object only if its clearance is less than or equal to the classification of that object.
- **Simple Integrity Property ("write down - no write up")**: A subject can write an object only if its clearance is greater than or equal to the classification of that object.

### Relevant UML Diagrams and Elements
#### Use Case Diagrams
A use case diagram is a collection of use cases and actors. A use case represents an encapsulation of behavior for a specific portion of an application. Use cases can be related by:
- **Generalization**: A child use case inherits behaviors and meaning from a parent use case for specialization or limitation.
- **Inclusion**: A base use case contains the behaviors defined in an included use case.
- **Extension**: An extending use case may augment a base use case under certain conditions.

An actor is an external entity that interacts with software (use cases) to represent the simulation of possible events. Actors can have generalization relationships, where a child actor inherits properties from a parent actor for specialization or limitation, and association relationships when involved in a use case.

#### Class Diagrams
A class diagram, composed of classes, represents the static structure of the conceptual model. A class is an abstraction for a set of objects that share the same attributes and operations. In implementation, an operation of the class is called a method.

#### Sequence Diagrams
A sequence diagram in UML captures and represents the dynamic behavior of instances (objects) of the class diagram. For a given task (often a use case), a sequence diagram indicates the object interactions over time to accomplish the task. The purpose of a sequence diagram is to model the flow of control and illustrate typical scenarios or processing, providing perspective on usage and flow across the various objects that comprise an application.

### Inheritance in UML
There are two types of inheritance in UML:
- **Specialization Inheritance**: The child inherits the parent with properties that may be extended. For example, a "physician" can have children "consultant physician" and "surgery physician" with more extended properties.
- **Limitation Inheritance**: The child has more restricted behavior than the parent. For example, a double-ended queue can be restricted to stack and queue, which can then be restricted to LIFO and FIFO.

### Example
To illustrate UML and our proposed security extensions, we provide a simple example that will be used throughout the paper: the "Survey Management" example. A Survey Institution performs and manages public surveys. After the raw data of the survey is collected, a senior staff person adds a survey header into the database. Another staff person (senior or junior) then adds questions to the survey, categorizes questions, and adds new question categories if needed. However, some special questions with sensitive content can only be entered by senior staff.

Figure 1 depicts a use case diagram for creating a new survey entry in the "Survey Management" example. The actor "Staff" has two children, "Junior Staff" and "Senior Staff," inherited for specialization with additional extended properties. Generally, the "Staff" actor can perform the use case "Add Question," which includes the use case "Categorize Question," and can be extended to the use case "Add Special Question" for senior staff only.