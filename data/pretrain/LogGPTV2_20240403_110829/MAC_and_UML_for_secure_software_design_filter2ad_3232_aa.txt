title:MAC and UML for secure software design
author:Thuong Doan and
Steven A. Demurjian and
T. C. Ting and
Andreas Ketterl
MAC and UML for Secure Software Design 
Thuong Doan 
University of Connecticut 
271 Fairfield Road, U-2155 
Storrs, CT 06269, USA 
1-860-486-3719 
Steven Demurjian 
University of Connecticut 
271 Fairfield Road, U-2155 
T.C. Ting 
Andreas Ketterl 
University of Connecticut 
271 Fairfield Road, U-2155 
University of Connecticut 
271 Fairfield Road, U-2155 
Storrs, CT 06269, USA 
Storrs, CT 06269, USA 
Storrs, CT 06269, USA 
1-860-486-3719 
1-860-486-3719 
1-860-486-3719 
PI:EMAIL
PI:EMAIL
PI:EMAIL 
PI:EMAIL 
seems 
ABSTRACT 
Security must be a first class citizen in the design of large scale, 
interacting,  software  applications,  at  early  and  all  stages  of  the 
lifecycle, for accurate and precise policy definition, authorization, 
authentication, enforcement, and assurance. One of the dominant 
players  in  software  design  is  the  unified  modeling  language, 
UML,  a  language  for  specifying,  visualizing,  constructing  and 
documenting  software  artifacts.  In  UML,  diagrams  provide 
alternate  perspectives  for  different  stakeholders,  e.g.:  use  case 
diagrams  for  the  interaction  of  users  with  system  components, 
class  diagrams  for  the  static  classes  and  relationships  among 
them,  and  sequence  diagrams  for  the  dynamic  behavior  of 
instances of the class diagram. However, UML's support for the 
definition  of  security  requirements  for  these  diagrams  and  their 
constituent  elements  (e.g.,  actors,  systems,  use  cases,  classes, 
instances, include/extend/generalize relationships, methods, data, 
etc.)  is  lacking.  In  this  paper,  we  address  this  issue  by 
incorporating  mandatory  access  control  (MAC)  into  use  case, 
class, and sequence diagrams, providing support for the definition 
of  clearances  and  classifications  for  relevant  UML  elements.  In 
addition, we provide a framework for security assurance as users 
are defining and evolving use case, class, and sequence diagrams, 
bridging 
software  engineers  and  an 
organization's  security  personnel  in  support  of  secure  software 
design. To demonstrate the feasibility and utility of our work on 
secure  software  design,  our  MAC  enhancements  for  UML  have 
been 
into  Borland's  Together  Control  Center 
Environment.   
the  gap  between 
integrated 
Categories and Subject Descriptors 
D.2.2  [Software  Engineering]:  Design  Tools  and  Techniques  – 
[Management  of 
Object-oriented  design  methods.  K.6.5 
Computing and Information Systems]: Security and Protection 
– Unauthorized access. 
General Terms: Design, Security. 
Keywords 
Security, Mandatory Access Control, UML, Software Design. 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee.  
FMSE’04, October 29, 2004, Washington, DC, USA. 
Copyright 2004 ACM 1-58113-971-3/04/0010...$5.00. 
interacting, 
to  users  based  on 
software  applications 
1.  INTRODUCTION 
The ability to design, build, and maintain functionally rich, large 
scale, 
limitless, 
especially given increases in computing power, memory, and disk 
storage  (at  a  reasonable  cost),  and  the  advancement  of  software 
design  and development environments tools. The integral nature 
of the WWW in daily life and the increasing concern of homeland 
defense have caused security to be elevated to a critical position. 
However,  the  inclusion  of  security  in  software  design  and 
development  has  often  been  an  afterthought,  delayed  to  latter 
stages  or  delegated  to  database  administration.  The  scope 
includes: security policy definition for what needs to be protected, 
the  anticipated  users,  user  privileges,  etc.;  authorization  to 
grant/revoke  privileges 
the  policy; 
authentication  to  verify  the  users  and  limit  their  actions  to 
authorized  privileges;  and,  security  assurance  to  attain  the 
security  policy  within  the  enforcement  framework  for  an  active 
application. These minimal security considerations strongly argue 
for  security  as  a  first  class  citizen  in  the  software  design  and 
development process at early and all stages of the lifecycle. 
To  address  security  during  software  design/development,  this 
paper  details  our  research  on  incorporating  mandatory  access 
control  (MAC)  into  the  unified  modeling  language,  UML  [6],  a 
language 
and 
documenting  software  artifacts.  UML  unified  the  approaches  of 
[5, 14, 23] and others into a standard, so that the best features of 
the constituent models were included. In UML, diagrams provide 
alternate  perspectives  and  complementary  representations  of  the 
system for different stakeholders (e.g., users, designers, software 
engineers,  etc.).  UML  has  nine  different  types  of  diagrams  to 
model an application's behavior, interactions, and implementation, 
and while there are parallels between security and UML elements, 
direct  support  for  security  specification  in  UML  [18]  is  not 
provided.  There  have  been  other  efforts  on  security  and  UML: 
[11,  24]  used  UML  as  a  language  to  represent  RBAC modeling 
and  notation;  [15,  16]  on  theoretical  security  definition  with 
UML;  [17]  introduced  SecureUML  for  model-driven  security 
with  extended  meta-model  elements  for  RBAC  only;  [22]  used 
UML elements to model MAC and RBAC based systems; and, [1, 
2]  presented  a  framework  to  incorporate  security  into  use  cases 
only.  However, we believe that our approach breaks new ground 
by  the  integration  of  MAC  into  use  case,  class,  and  sequence 
diagrams, and by providing design-time. security assurance  
Specifically,  in  this  paper,  we  report  on  our  research  on  the 
incorporation  of  MAC  into  UML  use  case,  class,  and  sequence 
diagrams,  for  the  definition  of  clearances  and  classifications  for 
relevant UML elements, which augments our efforts on including 
role-based  access  control  into  UML  [9].  We  initially  focus  on 
visualizing, 
constructing 
for 
specifying, 
three  popular  UML  diagrams:  use  case  diagrams  for  the 
interaction of users with system components, class diagrams for 
the  static  classes  and  relationships  among  them,  and  sequence 
diagrams  for  the  dynamic  behavior  of  instances  of  the  class 
diagram.  For  these  diagrams,  we  provide  a  framework  for 
defining  MAC  security  levels  (classifications  and  clearances)  as 
properties  of  the  various  elements  (e.g.,  use  cases,  actors, 
methods,  classes,  etc.)  with  the  objective  of  bridging  the  gap 
between  software  engineers  and  an  organization's  security 
personnel  in  support  of  secure  software  design.  The  work 
presented  herein  also  proposes  security  assurance  rules,  SARs, 
which enforce, as users are defining and evolving use case, class, 
and  sequence  diagrams, 
the  attainment  of  security-level 
domination,  and  MAC  Simple  Security  (“read  down  -  no  read 
up”),  Simple  Integrity  (“write  down  –  no  write  up”),  Liberal  * 
(“write  up  -  no  write  down”),  and  Strict  *  (“write  equal”) 
Properties.  These  SARs  are  realized  as  dynamic  checks  that 
analyze,  as  a  design  is  created,  the  consistency  of  the  security 
definition 
the  context  of  an  application's  content  and 
dependencies.  To  demonstrate  the  feasibility  and  utility  of  our 
work  on  secure  software  design,  our  MAC  enhancements  for 
UML  have  been  integrated  into  Borland's  Together  Control 
Center Tool.  
In  the  remainder  of  this  paper:  Section  2  details  background 
information  on  MAC,  and  relevant  UML  concepts  with  an 
example  to  be  used  in  the  paper;  Section  3  examines  the 
relationship  of  software  and  security  design  by  introducing 
principles that impact the process; Section 4 explores our research 
on  incorporating  MAC  into  UML  with  accompanying  security 
assurance  rules  that  can  be  algorithmically  verified  in  real-time 
(as  a  software  engineer  is  designing)  or  at  regular  design 
intervals; Section 5 explores our prototyping effort on integrating 
MAC  into  the  UML  tool  Together  Control  Center;  Section  6 
briefly  reviews  related  research  and  its  relevance  to  our  work; 
and, Section 7 concludes this paper and outlines ongoing research. 
in 
2.  BACKGROUND CONCEPTS 
In  this  section,  we  review  background  concepts  on  mandatory 
access  control  (MAC)  model  [3],  relevant  UML  diagrams  (use 
case,  class,  and  sequence)  and  elements,  two  versions  of 
inheritance  that  UML  supports,  and  our  example  to  be  used 
throughout  the  remainder  of  the  paper.  To  begin,  in  the  MAC 
model,  security  levels  (typically  unclassified  (U),  confidential 
(C), secret (S), and top secret (T) forming a partial order U < C < 
S < T) are assigned to each subject (clearance - CLR) and each 
object  (classification  -  CLS).  The  permission  of  the  subject  to 
perform  some  operation  on  the  object  depends  on  the  relation 
between  clearance  and  classification  as  dictated  by:  Simple 
Security Property (“read down - no read up”) [3]: a subject can 
read an object only if its clearance is greater than or equal to the 
classification  of  that  object;  Strict  *-Property  (“write  equal”) 
[19]: a subject can write an object only if its clearance is equal to 
the classification of that object; Liberal *-Property (“write up – 
no write down”) [3, 19]: a subject can write an object only if its 
clearance is less than or equal to the classification of that object; 
Simple  Integrity  Property  (“write  down  –  no  write  up”)  [4]:  a 
subject can write an object only if its clearance is greater than or 
equal to the classification of that object. 
in 
For the enhancement of UML with MAC, we concentrate on use 
case,  class,  and  sequence  diagrams.  A  use  case  diagram  is  a 
collection  of  use  cases  and  actors.  A  use  case  represents  an 
encapsulation of behavior for a specific portion of an application. 
Use cases can be related by: generalization - a child use case A 
inherits  behaviors  and  meaning  of  a  parent  use  case  B  for 
specialization or limitation; inclusion - from a base use case C to 
an  included  use  case  D  specifies  that  C  contains  the  behaviors 
defined in D; and extension - from an extending use case E to a 
base  use  case  F  specifies  that  F  may  be  augmented  with 
(incorporates under certain condition) some behaviors defined in 
E. An actor is an external entity that interacts with software (use 
cases) at some level, to represent the simulation of possible events 
the  system,  with  a  generalization 
(business  processes) 
relationship from a child actor A to a parent actor B indicating that 
A inherits properties from B for specialization or limitation, and 
an  association  relationship  utilized  when  it  is  involved  in  a  use 
case.  A  class  diagram,  composed  of  classes,  is  for  the  static 
structure of the conceptual model. A class is an abstraction for a 
set of objects that have the same attributes and operations of their 
behaviors. In implementation, an operation of the class is called 
method.  A sequence diagram in UML is intended to capture and 
represent the dynamic behavior of instances (objects) of the class 
diagram. For a given task (often a use case), a sequence diagram 
indicates the object interactions over time to accomplish the task. 
The purpose of a sequence diagram is to model flow of control, 
and  in  doing  so,  to  illustrate  a  typical  scenario  or  processing, 
thereby  providing  perspective  on  usage  and  flow  across  the 
various objects that comprise an application. There are two types 
of  inheritance  in  UML.  In  specialization  inheritance,  the  child 
inherits the parent with properties that may be extended, e.g., the 
parent  “physician”  has  children  “consultant  physician”  and 
“surgery physician” with more extended properties. In limitation 
inheritance, the child has more restricted behavior than the parent, 
e.g., a double ended queue can be restricted to stack and queue, 
which can then be restricted to LIFO and FIFO ([7]).  
To  illustrate  UML  and  our  proposed  security  extensions,  we 
provide a simple example that will be used throughout the paper. 
“Survey  Management”  Example:  A  Survey  Institution  performs 
and manages public surveys. After the raw data of the survey is 
collected, the senior staff person will add a survey header into the 
database.  Then  another  staff  person  (senior  or  junior  staff)  will 
add  questions  into  that  survey,  and  also  have  the  ability  to 
categorize questions and add a new question category if needed. 
However,  there  are  some  special  questions  that  have  more 
sensitive content, with only senior staff allowed to perform data 
entry.  Figure  1  depicts  a  use  case  diagram  for  creating  a  new 
survey  entry  in  the  “Survey  Management”  example.  The  actor 
Staff has two children Junior Staff and Senior Staff inherited for 
specialization with additional extended properties. Generally, the 
Staff actor can perform the use case Add Question which includes 
the use case Categorize Question, and can be extended to the use 