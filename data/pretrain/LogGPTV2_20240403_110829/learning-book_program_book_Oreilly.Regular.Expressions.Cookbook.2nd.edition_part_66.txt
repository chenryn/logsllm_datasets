Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
This regular expression has one altermative for each of the possible number of letters
a. Each altermative spells out how many letters b are allowed after the given number of
letters a and the x have been matched.
The other solution is to use lookahead. This is the method used for the regex within
the “Solution? section that matches an IPv6 address using compressed notation. If
you're not familiar with lookahead, see Recipe 2.16 first. Using lookahead, we can
essentially match the same text twice, checking it for rwo conditions.
A
(?=[abx]{1,8}\z)
a{0,7}xb{0,7}
Regex options: Free-spacing
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
The  at the start of the regex anchors it to the start of the subject text. Then the
positive lookahead kicks in. It checks whether a series of 1 to 8 letters cao, , and/or
x> can be matched, and that the end of the string is reached when those 1 to 8 letters
have been matched. The Z inside the lookahead is crucial. In order to limit the regex
to strings of eight characters or less, the lookahead must test that there aren’t any further
characters after those that it matched.
In a different scenario, you might use another kind of delimiter instead of \A> and
Z>. If you wanted to do a *whole words only* search for aaaaxbbb and friends, you
would use word boundaries. But to restrict the regex match to the right length, you
have to use some kind of delimiter, and you have to put the delimiter that matches the
end of the string both inside the lookahead and at the end of the regular expression. If
you don’t, the regular expression will partly match a string that has too many
characters.
When the lookahead has satisfied its requirement, it gives up the characters that it has
matched. Thus, when the regex engine attempts a{o, 7), it is back at the start of the
string. The fact that the lookahead doesn’t consume the text that it matched is the key
difference berween a lookahead and a noncapruring group, and is what allows us to
apply rwo pattems to a single piece of text.
Although  has to do is to check that they appear in the right order. In fact,
a*xb*> would have the exact same effect as a(o,7)xb(o,7) in this regular expression.
The second \Z at the end of the regex is also essential. Just like the lookahead needs
to make sure there aren’t too many letters, the second test after the lookahead needs
484 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 501
to make sure that all the letters are in the right order. This makes sure we don’t match
something like axba, even though it satisfies the lookahead by being berween 1 and 8
characters long.
Compressed mixed notation
Mixed notation canbe compressed just like standard notation. Although thefourbytes
at the end must always be specified, even when they are zero, the number of hexadec-
imal words before them again becomes variable. If all the hexadecimal words are zero,
the IPv6 address could end up looking like an IPv4 address with rwo colons before it.
Creating a regex for compressed mixed notation involves solving the same issues as for
compressed standard notation. The previous section explains all this.
The main difference berween the regex for compressed mixed notation and the regex
for compressed (standard) notation is that the one for compressed mixed notation
needs to check for the IPv4 address after the six hexadecimal words. We do this check
at the end of the regex, using the same regex for accurate IPv4 addresses from
Recipe 8.16 that we used in this recipe for noncompressed mixed notation.
We have to match the IPv4 part of the address at the end of the regex, but we also have
to check for it inside the lookahead that makes sure we have no more than six colons
or six hexadecimal words in the IPv6 address. Since we’re already doing an accurate
test at the end of the regex, the lookahead can suffice with a simple IPv4 check. The
lookahead doesn’t need to validate the IPv4 part, as the main regex already does that.
But it does have to match the IPv4 part, so that the end-of-string anchor at the end of
the lookahead can do its job.
Standard, mixed, or compressednotation
The final set of regular expressions puts it all together. These match an IPv6 address in
any notation: standard or mixed, compressed or not.,
These regular expressions are formed by alternating the ones for compressed mixed
notation and compressed (standard) notation. These regexes already use alternation to
match both the compressed and noncompressed variety of the IPv6 notation they
support.
The result is a regular expression with three top-level alternatives, with the first alter-
native consisting of two alternatives of its own. The first altermative matches an IPv6
address using mixed notation, either noncompressed or compressed. The second al-
ternative matches an IPv6 address using standard notation. The third alternative covers
the compressed (standard) notation.
We have three top-level altermatives instead of rwo alternatives that each contain their
own two alternatives because there’s no particular reason to group the alternatives fon
standard and compressed notation. For mixed notation, we do keep the compressed
8.17 Matching IPv6 Addresses | 485
---
## Page 502
and noncompressed alternatives together, because it saves us having to spell out the
IPv4 part twice.
Essenrially, we combined this regex:
^(6words|conpressed6words)1p45
and this regex:
^(8words|conpressed8uords)$
into:
^((6words|compressed6words)ip4 |8words|conpressed8words)$
rather than:
^((6words|compressed6words)ip4 |(8words |compressed8words))$
See Also
Techniques used in the regular expressions in this recipe are discussed in Chapter 2
character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains word boundaries.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.3 explains
Recipe 2.9 explains grouping. Recipe 2.8 explains altemation. Recipe 2.12 explains
repetition. Recipe 2.16 explains lookaround. Recipe 2.18 explains how to add
comments.
8.18ValidateWindowsPaths
Problem
You want to check whether a string looks like a valid path to a folder or file on the
Microsoft Windows operating system.
Solution
Drive letter paths
\A
[a-z]:\\
（？：[^/:*？<>|{r\n]+)*
# Drive
# Folder
[\\/:*?*<>|\r\n]*
# File
Z
Regexoptions: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
[a-z]:\{?：[^\/:*？<>|\r\n]+\)*[^\/:*?<>|r\n]*$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
486 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 503
Drive letter and UNC paths
LA
？:[a-z]=|\[a-z0-9_-$\-]+[a-z0-9_-$\-]+)
# Drive
(？:[^\/:*？<>|\r\n]+)*
# File
# Folder
[\\/:*？*<>|\r\n]
\Z
Regexoptions: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
(?：[a-2]：1|r\n]+)*
[^\\/:*?*<>|\r\n]*$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Drive letter, UNC, and relative paths
LA
(?:(?:[a-z]:1\[a-z0-9_-$\-]+\\[a-z0-9_-$\-]+)| # Drive
1[/:*²">rn]+)
(？：[/:*？<>|{r\n]+1)*
# Relative path
[\/:*？*<>|\r\n]*
# Folder
# File
\Z
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
(?：(？：[a-z]:[a-20-9_$-]+[a-z0-9_-$-]+)/[/:*<>|
r\n]+\2)(？:[V/:*?<>r\n]+\)*[V/:*？"<>{r\n]*$
Regexoptions: Case insensitive
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python
Discussion
Drive letter paths
Matching a full path to a file or folder on a drive that has a drive letter is very straight-
forward. The drive is indicated with a single lerter, followed by a colon and a backslash.
We easily match this with [az]:^\. The backslash is a metacharacter in regular ex-
pressions, and so we need to escape it with another backslash to match it literally.
Folder and filenames on Windows can contain all characters, except these:
V/:*?"<>|. Line breaks aren’t allowed either. We can easily match a sequence of all
characters except these with the negated character class |\r\n]+. The
backslash is a metacharacter in character classes too, so we escape it. |\r\n]\)*, which puts the regex for the folder name
and a literal backslash inside a noncapruring group (Recipe 2.9) that is repeated zero
or more times with the asterisk (Recipe 2.12).
To match the filename, we use [^\\/:*?"<>\r\n]*>. The asterisk makes the filename
optional, to allow paths that end with a backslash. If you don't want to allow paths
that end with a backslash, change the last  does that. The vertical bar is the
altermation operator (Recipe 2.8). It gives the choice between a drive letter matched
with  or a server and share name matched with |r\n]+\\?) matches the start of the relative path. The path can begin
with a backslash, but it doesn’t have to. |r^n]+) matches a folder or filename. If the relative
path consists of just a filename, the final ^\?> won’t match anything, and neither will
the *folder” and *file* parts of the regex, which are both optional. If the relative path
specifies a folder, the final ^\?) will match the backslash that delimits the first folder
in the relative path from the rest of the path. The *folder* part then matches the re-
maining folders in the path, if any, and the *file” part matches the filename.
488 | Chapter 8: URLs, Paths, and IntemetAddresses
---
## Page 505
The regular expression for matching relative paths no longer neatly uses distinct parts
of the regex to match distinct parts of the subject text. The regex part labeled *relative
path* will actually match a folder or filename if the path is relative. If the relative path
specifies one or more folders, the *relative path”" part matches the first folder, and the
"folder” and *file” paths match what'’s left. If the relative path is just a filename, it will
be matched by the °relative path" part, leaving nothing for the *folder” and *file? parts.
Since we’re only interested in validating the path, this doesn’t matter. The comments
in the regex are just labels to help us understand it.
If we wanted to extract parts of the path into capturing groups, we’d have to be more
careful to match the drive, folder, and filename separately. The next recipe handles that
problem.
See Also
folder, and file, allowing you to extract those separately.
Recipe 8.19 also validates a Windows path but adds capturing groups for the drive,
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.1 explains which special characters need to be escaped. Recipe 2.2 explains
how to match nonprinting characters. Recipe 2.3 explains character classes.
Recipe 2.5 explains anchors. Recipe 2.8 explains altermation. Recipe 2.9 explains
grouping, Recipe 2.12 explains repetition. Recipe 2.18 explains how to add comments.
8.19SplitWindowsPathsintoTheirParts
Problem
You want to check whether a string looks like a valid path to a folder or file on the
Microsoft Windows operating system. If the string turns out to hold a valid Windows
path, then you also want to extract the drive, folder, and filename parts of the path
separately.
Solution
Drive letter paths
(?[a-z]:)\\
A
(?(?:[^\V/:*?<>|x\n]+\\)*)
([u\x|)
\Z
Regex options: Free-spacing, case insensitive
Regexflver: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
8.19 Split Windows Paths into TheirParts | 489
---
## Page 506
LA
(?P[a-z]:)\\
(?P(?:[^\\V/:*?"<>|\r\n]+\\)*)
(?P[^\V/:**<>|\r\n]*)
Z
Regex options: Free-spacing, case insensitive
Regexflavers: PCRE 4 and later, Perl 5.10, Python
A
\\(: [z-e])
((？:[^\V/:*?"<>\n]+\\)*)
（[\/:*?"<>|\r\n]*)
Z
Regex options: Free-spacing, case insensitive 
Regexflarer: .NET, Java, PCRE, Perl, Python, Ruby
([a-z]:)\((？:[^/:*？<>|{r\n]+\)*)([^V/:*？*<>|\r\n]*)$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
Drive letter and UNC paths
(?[a-z]:1\[a-20-9_-$-]+\[a-20-9_$∞-]+)
LA
(?(?: [^\V:*?<>|\\n]+\\)*)
(?[^\V/:*><>|\r\n]*)
Z
Regex options: Free-spacing, case insensitive 
Regexflaver: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
LA
?P[a-z]: |\\\[a-20-9_-$-]+\\[a-z0-9_-$-]+)\
(?P(?：[\\/:*？"<>|\r\n]+\\)*)
(?P[^\\/:*?"<>x^n]*)
\Z
Regex options: Free-spacing, case insensitive
Regexflavers: PCRE 4 and later, Perl 5.10, Python
l4
([a-z]:[az0-9_-$-]+[a-20-9_$-]+)
（(？:[/:*²>|rn]+10)
([^\V/:*？"<>|\r\n]*)
Z
Regex options: Free-spacing, case insensitive 
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
([a-z]:\[a-20-9_-$-]+\[a-z0-9_-$-]+)((？：[\/:*"<>r\n]+)*)
([u\x|<>/\])
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
490 | Chapter 8: URLs, Paths, and Intemet Addresses
---
## Page 507
Drive letter, UNC, and relative paths
These regular expressions can match the empty string. See the *Discu5
sion* section for more details and an altermative solution.
(?[a-z]:/[az0-9_-$-]+[az09_$-]+？)
(?(?:[V:*<>r\n]+\\)*)
([u\x|<>/]<>)
Z
Regexoptions: Free-spacing, case insensitive
Regexflavers: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
(?P[a-z]:/\\[a-z09_.$-]+\[a-z0-9_-$-]+\/)
LA
(?P(?:[^\V/:*?"<>|\r\n]+\\)*)
(?P[^\\/:*?"<>|\r\n]*)
\Z
Regex options: Free-spacing, case insensitive
Regexflavers: PCRE 4 and later, Perl 5.10, Python
([a-z]:/[a20-9_$-]+[a-20-9_$-]+/²)
LA