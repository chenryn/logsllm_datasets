//...
return STATUS_SUCCESS;
}
void SampleUnload(_In_ PDRIVER_OBJECT DriverObject) {
UNREFERENCED_PARAMETER(DriverObject);
ExFreePool(g_RegistryPath.Buffer);
KdPrint(("Sample driver Unload called\n"));
}
Linked Lists
The kernel uses circular doubly linked lists in many of its internal data structures. For example, all processes
on the system are managed by EPROCESS structures, connected in a circular doubly linked list, where its
head is stored the kernel variable PsActiveProcessHead.
All these lists are built in the same way, centered around the LIST_ENTRY structure defined like so:
Chapter 3: Kernel Programming Basics
44
typedef struct _LIST_ENTRY {
struct _LIST_ENTRY *Flink;
struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY;
Figure 3-2 depicts an example of such a list containing a head and three instances.
Figure 3-2: Circular linked list
One such structure is embedded inside the real structure of interest. For example, in the EPROCESS
structure, the member ActiveProcessLinks is of type LIST_ENTRY, pointing to the next and previous
LIST_ENTRY objects of other EPROCESS structures. The head of a list is stored separately; in the case of
the process, that’s PsActiveProcessHead.
To get the pointer to the actual structure of interest given the address of a LIST_ENTRY can be obtained
with the CONTAINING_RECORD macro.
For example, suppose you want to manage a list of structures of type MyDataItem defined like so:
struct MyDataItem {
// some data members
LIST_ENTRY Link;
// more data members
};
When working with these linked lists, we have a head for the list, stored in a variable. This means that
natural traversal is done by using the Flink member of the list to point to the next LIST_ENTRY in the
list. Given a pointer to the LIST_ENTRY, what we’re really after is the MyDataItem that contains this
list entry member. This is where the CONTAINING_RECORD comes in:
MyDataItem* GetItem(LIST_ENTRY* pEntry) {
return CONTAINING_RECORD(pEntry, MyDataItem, Link);
}
The macro does the proper offset calculation and does the casting to the actual data type (MyDataItem in
the example).
Table 3-5 shows the common functions for working with these linked lists. All operations use constant
time.
Chapter 3: Kernel Programming Basics
45
Table 3-5: Functions for working with circular linked lists
Function
Description
InitializeListHead
Initializes a list head to make an empty list. The forward and back
pointers point to the forward pointer.
InsertHeadList
Insert an item to the head of the list.
InsertTailList
Insert an item to the tail of the list.
IsListEmpty
Check if the list is empty.
RemoveHeadList
Remove the item at the head of the list.
RemoveTailList
Remove the item at the tail of the list.
RemoveEntryList
Remove a specific item from the list.
ExInterlockedInsertHeadList
Insert an item at the head of the list atomically by using the specified
spinlock.
ExInterlockedInsertTailList
Insert an item at the tail of the list atomically by using the specified
spinlock.
ExInterlockedRemoveHeadList
Remove an item from the head of the list atomically by using the
specified spinlock.
The last three functions in table 3-4 perform the operation atomically using a synchronization primitive
called a spin lock. Spin locks are discussed in chapter 6.
The Driver Object
We’ve already seen that the DriverEntry function accepts two arguments, the first is a driver object
of some kind. This is a semi-documented structure called DRIVER_OBJECT defined in the WDK headers.
“Semi-documented” means that some of its members are documented for driver’s use and some are not.
This structure is allocated by the kernel and partially initialized. Then it’s provided to DriverEntry (and
before the driver unloads to the Unload routine as well). The role of the driver at this point is to further
initialize the structure to indicate what operations are supported by the driver.
We’ve seen one such “operation” in chapter 2 - the Unload routine. The other important set of operations
to initialize are called Dispatch Routines. This is an array of function pointers, stored in the in the
MajorFunction member of DRIVER_OBJECT. This set specifies which operations the driver supports,
such as Create, Read, Write, and so on. These indices are defined with the IRP_MJ_ prefix. Table 3-6 shows
some common major function codes and their meaning.
Chapter 3: Kernel Programming Basics
46
Table 3-6: Common major function codes
Major function
Description
IRP_MJ_CREATE (0)
Create operation. Typically invoked for CreateFile or
ZwCreateFile calls.
IRP_MJ_CLOSE (2)
Close operation. Normally invoked for CloseHandle or
ZwClose.
IRP_MJ_READ (3)
Read operation. Typically invoked for ReadFile,
ZwReadFile and similar read APIs.
IRP_MJ_WRITE (4)
Write operation. Typically invoked for WriteFile,
ZwWriteFile, and similar write APIs.
IRP_MJ_DEVICE_CONTROL (14)
Generic call to a driver, invoked because of
DeviceIoControl or ZwDeviceIoControlFile calls.
IRP_MJ_INTERNAL_DEVICE_CONTROL (15)
Similar to the previous one, but only available for kernel-mode
callers.
IRP_MJ_SHUTDOWN (16)
Called when the system shuts down if the driver has registered
for shutdown notification with
IoRegisterShutdownNotification.
IRP_MJ_CLEANUP (18)
Invoked when the last handle to a file object is closed, but the
file object’s reference count is not zero.
IRP_MJ_PNP (31)
Plug and play callback invoked by the Plug and Play Manager.
Generally interesting for hardware-based drivers or filters to
such drivers.
IRP_MJ_POWER (22)
Power callback invoked by the Power Manager. Generally
interesting for hardware-based drivers or filters to such drivers.
Initially, the MajorFunction array is initialized by the kernel to point to a kernel internal routine,
IopInvalidDeviceRequest, which returns a failure status to the caller, indicating the operation is
not supported. This means the driver, in its DriverEntry routine only needs to initialize the actual
operations it supports, leaving all the other entries in their default values.
For example, our Sample driver at this point does not support any dispatch routines, which means there is
no way to communicate with the driver. A driver must at least support the IRP_MJ_CREATE and IRP_-
MJ_CLOSE operations, to allow opening a handle to one of the device objects for the driver. We’ll put these
ideas into practice in the next chapter.
Object Attributes
One of the common structures that shows up in many kernel APIs is OBJECT_ATTRIBUTES, defined like
so:
Chapter 3: Kernel Programming Basics
47
typedef struct _OBJECT_ATTRIBUTES {
ULONG Length;
HANDLE RootDirectory;
PUNICODE_STRING ObjectName;
ULONG Attributes;
PVOID SecurityDescriptor;
// SECURITY_DESCRIPTOR
PVOID SecurityQualityOfService;
// SECURITY_QUALITY_OF_SERVICE
} OBJECT_ATTRIBUTES;
typedef OBJECT_ATTRIBUTES *POBJECT_ATTRIBUTES;
typedef CONST OBJECT_ATTRIBUTES *PCOBJECT_ATTRIBUTES;
The structure is typically initialized with the InitializeObjectAttributes macro, that allows
specifying all the structure members except Length (set automatically by the macro), and Securi-
tyQualityOfService, which is not normally needed. Here is the description of the members:
• ObjectName is the name of the object to be created/located, provided as a pointer to a UNICODE_-
STRING. In some cases it may be ok to set it to NULL. For example, the ZwOpenProcess allows
opening a handle to a process given its PID. Since processes don’t have names, the ObjectName in
this case should be initialized to NULL.
• RootDirectory is an optional directory in the object manager namespace if the name of the object
is relative one. If ObjectName specifies a fully-qualified name, RootDirectory should be set to
NULL.
• Attributes allows specifying a set of flags that has effect on the operation in question. Table 3-7
shows the defined flags and their meaning.
• SecurityDescriptor is an optional security descriptor (SECURITY_DESCRIPTOR) to set on the
newly created object. NULL indicates the new object gets a default security descriptor, based on the
caller’s token.
• SecurityQualityOfService is an optional set of attributes related to the new object’s imper-
sonation level and context tracking mode. It has no meaning for most object types. Consult the
documentation for more information.
Table 3-7: Object attributes flags
Flag (OBJ_)
Description
INHERIT (2)
The returned handle should be marked as inheritable
PERMANENT (0x10)
The object created should be marked as permanent.
Permanent objects have an additional reference count that
prevents them from dying even if all handles to them are
closed
EXCLUSIVE (0x20)
If creating an object, the object is created with exclusive
access. No other handles can be opened to the object. If
opening an object, exclusive access is requested, which is
granted only if the object was originally created with this flag
Chapter 3: Kernel Programming Basics
48
Table 3-7: Object attributes flags
Flag (OBJ_)
Description
CASE_INSENSITIVE (0x40)
When opening an object, perform a case insensitive search for
its name. Without this flag, the name must match exactly
OPENIF (0x80)
Open the object if it exists. Otherwise, fail the operation
(don’t create a new object)
OPENLINK (0x100)
If the object to open is a symbolic link object, open the
symbolic link object itself, rather than following the symbolic
link to its target
KERNEL_HANDLE (0x200)
The returned handle should be a kernel handle. Kernel
handles are valid in any process context, and cannot be used
by user mode code
FORCE_ACCESS_CHECK (0x400)
Access checks should be performed even if the object is
opened in KernelMode access mode
IGNORE_IMPERSONATED_DEVICEMAP (0x800)
Use the process device map instead of the user’s if it’s
impersonating (consult the documentation for more
information on device maps)
DONT_REPARSE (0x1000)
Don’t follow a reparse point, if encountered. Instead an error
is returned (STATUS_REPARSE_POINT_ENCOUNTERED).
Reparse points are briefly discussed in chapter 11
A second way to initialize an OBJECT_ATTRIBUTES structure is available with the RTL_CONSTANT_-
OBJECT_ATTRIBUTES macro, that uses the most common members to set - the object’s name and the
attributes.
Let’s look at a couple of examples that use OBJECT_ATTRIBUTES. The first one is a function that opens
a handle to a process given its process ID. For this purpose, we’ll use the ZwOpenProcess API, defined
like so:
NTSTATUS ZwOpenProcess (
_Out_
PHANDLE ProcessHandle,
_In_
ACCESS_MASK DesiredAccess,
_In_
POBJECT_ATTRIBUTES ObjectAttributes,
_In_opt_
PCLIENT_ID ClientId);
It uses yet another common structure, CLIENT_ID that holds a process and/or a thread ID:
typedef struct _CLIENT_ID {
HANDLE UniqueProcess;
// PID, not handle
HANDLE UniqueThread;
// TID, not handle
} CLIENT_ID;
typedef CLIENT_ID *PCLIENT_ID;
To open a process, we need to specify the process ID in the UniqueProcess member. Note that although
the type of UniqueProcess is HANDLE, it is the unique ID of the process. The reason for the HANDLE type
Chapter 3: Kernel Programming Basics
49
is that process and thread IDs are generated from a private handle table. This also explains why process
and thread IDs are always multiple of four (just like normal handles), and why they don’t overlap.
With these details at hand, here is a process opening function:
NTSTATUS
OpenProcess(ACCESS_MASK accessMask, ULONG pid, PHANDLE phProcess) {
CLIENT_ID cid;
cid.UniqueProcess = ULongToHandle(pid);
cid.UniqueThread = nullptr;
OBJECT_ATTRIBUTES procAttributes =
RTL_CONSTANT_OBJECT_ATTRIBUTES(nullptr, OBJ_KERNEL_HANDLE);
return ZwOpenProcess(phProcess, accessMask, &procAttributes, &cid);
}
The ULongToHandle function performs the required casts so that the compiler is happy (HANDLE is
64-bit on a 64-bit system, but ULONG is always 32-bit). The only member used in the above code from
OBJECT_ATTRIBUTES is the Attributes flags.
The second example is a function that opens a handle to a file for read access, by using the ZwOpenFile
API, defined like so:
NTSTATUS ZwOpenFile(
_Out_
PHANDLE FileHandle,
_In_
ACCESS_MASK DesiredAccess,
_In_
POBJECT_ATTRIBUTES ObjectAttributes,
_Out_
PIO_STATUS_BLOCK IoStatusBlock,
_In_
ULONG ShareAccess,
_In_
ULONG OpenOptions);
A full discussion of the parameters to ZwOpenFile is reserved for chapter 11, but one thing is obvious:
the file name itself is specified using the OBJECT_ATTRIBUTES structure - there is no separate parameter
for that. Here is the full function opening a handle to a file for read access:
NTSTATUS OpenFileForRead(PCWSTR path, PHANDLE phFile) {
UNICODE_STRING name;
RtlInitUnicodeString(&name, path);
OBJECT_ATTRIBUTES fileAttributes;
InitializeObjectAttributes(&fileAttributes, &name,
OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE, nullptr, nullptr);
IO_STATUS_BLOCK ioStatus;
return ZwOpenFile(phFile, FILE_GENERIC_READ,
&fileAttributes, &ioStatus, FILE_SHARE_READ, 0);
}
Chapter 3: Kernel Programming Basics
50
InitializeObjectAttributes is used to initialize the OBJECT_ATTRIBUTES structure, although the
RTL_CONSTANT_OBJECT_ATTRIBUTES could have been used just as well, since we’re only specifying
the name and attributes. Notice the need to turn the passed-in NULL-terminated C-string pointer into a
UNICODE_STRING with RtlInitUnicodeString.
Device Objects
Although a driver object may look like a good candidate for clients to talk to, this is not the case. The
actual communication endpoints for clients are device objects. Device objects are instances of the semi-
documented DEVICE_OBJECT structure. Without device objects, there is no one to talk to. This means
that at least one device object should be created by the driver and given a name, so that it may be contacted
by clients.
The CreateFile function (and its variants) accepts a first argument which is called “file name” in the
documentation, but really this should point to a device object’s name, where an actual file system file is
just one particular case. The name CreateFile is somewhat misleading - the word “file” here means
“file object”. Opening a handle to a file or device creates an instance of the kernel structure FILE_OBJECT,
another semi-documented structure.
More precisely, CreateFile accepts a symbolic link, a kernel object that knows how to point to another
kernel object. (You can think of a symbolic link as similar in principle to a file system shortcut.) All the
symbolic links that can be used from the user mode CreateFile or CreateFile2 calls are located in
the Object Manager directory named ??. You can see the contents of this directory with the Sysinternals
WinObj tool. Figure 3-3 shows this directory (named Global?? in WinObj).
Figure 3-3: Symbolic links directory in WinObj
Some of the names seem familiar, such as C:, Aux, Con, and others. Indeed, these are valid “file names”
for CreateFile calls. Other entries look like long cryptic strings, and these in fact are generated by the
Chapter 3: Kernel Programming Basics
51
I/O system for hardware-based drivers that call the IoRegisterDeviceInterface API. These types
of symbolic links are not useful for the purpose of this book.
Most of the symbolic links in the \?? directory point to an internal device name under the \Device directory.
The names in this directory are not directly accessible by user-mode callers. But they can be accessed by
kernel callers using the IoGetDeviceObjectPointer API.
A canonical example is the driver for Process Explorer. When Process Explorer is launched with
administrator rights, it installs a driver. This driver gives Process Explorer powers beyond those that can
be obtained by user-mode callers, even if running elevated. For example, Process Explorer in its Threads