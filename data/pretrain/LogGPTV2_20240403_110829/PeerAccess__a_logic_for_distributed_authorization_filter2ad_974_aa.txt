title:PeerAccess: a logic for distributed authorization
author:Marianne Winslett and
Charles C. Zhang and
Piero A. Bonatti
PeerAccess: A Logic for Distributed Authorization
Marianne Winslett
University of Illinois at
Urbana-Champaign
Urbana, IL 61801, USA
PI:EMAIL
Charles C. Zhang
University of Illinois at
Urbana-Champaign
Urbana, IL 61801, USA
PI:EMAIL
Piero A. Bonatti
Universit`a di Napoli
FEDERICO II
Napoli, Italy
PI:EMAIL
ABSTRACT
This paper introduces the PeerAccess framework for reasoning about
authorization in open distributed systems, and shows how a param-
eterization of the framework can be used to reason about access
to computational resources in a grid environment. The PeerAc-
cess framework supports a declarative description of the behavior
of peers that selectively push and/or pull information from certain
other peers. PeerAccess local knowledge bases encode the basic
knowledge of each peer (e.g., Alice’s group memberships), its poli-
cies governing the release of each possible piece of information to
other peers, and information that guides and limits its search pro-
cess when trying to obtain particular pieces of information from
other peers. PeerAccess proofs of authorization are veriﬁable and
nonrepudiable, and their construction relies only on the local infor-
mation possessed by peers and their parameterized behavior with
respect to query answering, information push/pull, and informa-
tion release policies (i.e., no omniscient viewpoint is required). We
present the PeerAccess language and peer knowledge base struc-
ture, the associated formal semantics and proof theory, and exam-
ples of the use of PeerAccess in constructing proofs of authoriza-
tion to access computational resources.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]:
Security and Protection; D.4.6 [Operating Systems]: Security and
Protection - Access Control
General Terms
Security, Languages, Theory
Keywords
P2P systems, distributed authorization, logical signature, sticky poli-
cies, release policies, proof hints
1.
INTRODUCTION AND RELATED WORK
Authorization approaches for distributed systems where resources
are accessed across organizational boundaries have become a topic
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
of industrial and research interest in recent years, with reputation
systems and trust negotiation emerging as two particularly interest-
ing research directions ([3, 5, 6, 9, 11, 12, 13, 16, 17, 20, 22, 23, 24,
25], to mention just a few). In attempting to build and deploy an au-
thorization system based on trust negotiation for a particular open
system (shared access to high-performance computing resources),
we found that the theory developed for authorization in open sys-
tems did not include all the features that we needed to reason about
the runtime behavior of the system, or to account for all the actions
that parties in the system needed to take at run time. The need was
particularly acute in the area of reasoning about helpful third par-
ties at run time, such as information brokers, credential and policy
repositories, and third-party authorization services. A peer Alice
may need to contact several such parties as she attempts to con-
struct a proof that she is authorized to use a particular service, and
she needs a principled way to determine who to contact, what to ask
for, what kind of answers to expect, and when to give up. She needs
a way to explain who she is and why she is asking for help, as her
intended purpose may determine whether a third party is willing to
help her, or may inﬂuence the answer that it gives her. Alice also
needs a way to set limits on what can be done with the personal in-
formation that she gives out, and to determine what she is allowed
to do with the information that others give to her. She also needs
to be able to ﬁlter out incoming information and queries that are of
no interest to her (e.g., spam and porn). She needs to be able to
interact successfully with parties that push information to her, and
with parties that she must query to get information.
Other researchers have examined many of the separate aspects
of this problem. For example, [2] studies the problem of creating
distributed proofs under an information pull paradigm, when all
peers cooperate to the maximum extent possible. The authors of
[18] study the problem of ﬁnding needed credentials at run time,
and propose a solution based on credential typing (e.g., query the
issuer to ﬁnd a certain kind of credential). Other papers [1, 10]
present a runtime system for constructing distributed proofs of au-
thorization, given authoritative information on where to go to ﬁnd
needed credentials. In a similar way, in [3, 4, 13, 14] policies en-
code information about where to go to ﬁnd certain needed facts.
These and the other works cited above study useful pieces of the
picture, but we found that the separate pieces often did not ﬁt to-
gether to form a solution to our real-world situation. For example,
real-world peers do not exhaustively try to answer all queries they
receive, as in [2]. A peer may behave quite differently depend-
ing on who is asking for help and why they are asking for help.
We wanted a way to talk about sticky policies [15] (release poli-
cies that are permanently attached to the information they protect),
but also wanted to be able to describe non-sticky policies within
the same open system. In [1], credentials have sticky release poli-
cies, and those policies are propagated to all conclusions derived
using those credentials. This interesting approach will be too re-
strictive for many situations, and it is embedded into the syntax of
the language, making it hard to change. A type-based credential
discovery system, as in [18], is not ﬂexible enough to model the
evolving behavior of credential and authorization servers in compu-
tational grids, where there is often no visible relationship between
the party whose signature Alice wishes to have on a fact and the
party Alice must go to to obtain that signature. In [3, 4, 10, 13],
information on where to obtain each credential is expressed by la-
beling each credential occurrence in a policy with exactly one peer.
Credential location hints are afﬁxed inside the policy and must be
replicated in each rule, although the strategy for ﬁnding a creden-
tial often depends on the credential class and not on the rule where
the credential is referred to—a kind of replication that may intro-
duce errors.
In general, decoupling access control policies from
negotiation-related decisions such as credential fetching strategies,
release policies, etc., seems a good policy engineering principle,
and a step towards declarative negotiation control. Close to our
work, [21] proposes a logic based formulation that supports dele-
gatable authorizations; [7] adopts a metapolicy-based approach as
in our paper. However, neither of them considers such features
as sticky policies, credential discovery, or exposure issues. We
know of no preexisting approach that allows one to reason about
the runtime behavior of a very diverse set of peers, some of whom
push information, some pull information, and some mix the two
paradigms. Further, preexisting work did not consider potential in-
teractions between various features (e.g., sticky policies on hints
about where to go to obtain information about sticky policies).
In this paper, we propose the PeerAccess framework, which pro-
vides an infrastructure and language to model and reason about dis-
tributed authorization in open systems. As the framework is broad
and generic, we only present an instantiation of it that is suitable
for use in reasoning about access to a grid of computational re-
sources. We introduce the architecture and describe the language
in section 2, then present PeerAccess knowledge bases in section
3, release policies in section 4, semantics and ﬁxpoint characteriza-
tion in section 5, proof theory in section 6, proof hints and queries
in section 7, and ﬁnally conclude in section 8.
2. FRAMEWORK AND LANGUAGE
The PeerAccess framework supports a possibly inﬁnite set of
peers, each with its own separate knowledge base (KB) of policy-
related information (ﬁgure 1). Peers communicate with one an-
other by pushing information in messages, or by pulling informa-
tion through queries. The high-level behavior of each peer (i.e.,
what information it pushes and to whom, whose queries it tries to
answer, how hard it tries to answer them, and the kinds of answers it
gives) is determined by declarative event-condition-action rules for
that peer. The lower-level behavior of each peer is determined by
the contents of its KB, which include its own local knowledge and
information that it has received from others. Its KB includes tight
controls on what information it can send out or receive in messages,
and hints regarding what peers to contact for help if it is trying to
prove certain types of conclusions. At a high level, the language
for KBs and messages can be thought of as logic programs with
an open-world semantics, plus two modal operators related to the
says operator of BAN logic [8] (to provide nonrepudiation for mes-
sage contents and justiﬁcation of proof results), plus a sprinkling of
second-order constructs to allow declarative speciﬁcation of infor-
mation release policies and hints about how to construct proofs (but
without introducing high runtime complexity).
The PeerAccess policy language consists of a modal language—
called the base language—and a modal metalanguage, each with a
separate countable pool of variables. Roughly speaking, the base
language speciﬁes basic access control policies and related rules;
the metalanguage speciﬁes metapolicies that determine the dynamic
behavior of the system.
The base policy language is based on standard Datalog atoms,
built from a countably inﬁnite supply of constants (to model open
domains). A distinguished subset of the constants, N , contains all
possible peer names. The set of predicates is application depen-
dent. We italicize variable names, to distinguish them from con-
stants, functions, and predicate names. At the base level, modal
atoms, called facts, are expressions of the form “P signs (cid:11)” or
“P lsigns (cid:11)”, where P 2 N and (cid:11) is a Datalog atom. A rule is
an expression f0   f1 ^ (cid:1) (cid:1) (cid:1) ^ fn, where each fi is a fact and
n (cid:21) 0. Facts are special cases of rules, where n = 0. If f0 is
of the form “P signs (cid:11)”, then the rule or fact is directly signed by
P ; otherwise, f0 has the form “P lsigns (cid:11)” and the rule or fact is
logically signed by P . (We will omit the signatures on equality and
inequality atoms, since all peers agree on the truth of such atoms.)
In the metalanguage, the set of terms includes the metavariables
plus a distinct function name (cid:22)s for each symbol s of the two lan-
guages (variables, constants, and logical connectives), satisfying
(cid:22)(cid:22)s = (cid:22)s. In this way, each base or metaexpression e can be repre-
sented by a metaterm (cid:22)e built with the naming functions. To enhance
readability, we shall simply write (cid:22)e as e; the context will always
make clear whether e is playing the role of a term or a rule. The
(nonmodal) atoms of the metalanguage are built in the usual way
from metaterms and metapredicates. Facts are deﬁned as above,
i.e., as modal metalanguage atoms. Rules have the same form
as above; their bodies may contain both base facts and metafacts,
while the head f0 must belong to the metalanguage. Variable in-
stantiations must map each variable to a term of the same level, so
that every instance of a well-formed expression is well-formed, too.
Each peer has a separate knowledge base (ﬁgure 1) of facts,
rules, and received messages. Each KB contains the following ﬁ-
nite sets of formulas, each described in detail in a later section:
1. Its basepolicies, which are rules over the base language.
2. All messages it ever received from other peers. Each mes-
sage is a ﬁnite set of rules. (In this paper, we will not make
use of the set of messages sent by a peer.)
3. Its releasepolicies, containing rules about release predicates.
4. Its hintsforﬁnding proofs, containing rules about the ‘ﬁnd’
metapredicate.
5. Its exposure policies, which act as a ﬁrewall to restrict in-
coming and outgoing information. To conserve space, we
will not discuss exposure policies in this paper.
DEFINITION 1
(KB). A PeerAccess global KB P contains one
local KB for each peer:
P = f(j; Pj) j j 2 N g
where Pj is peer j’s local KB, i.e., the set of all messages it has
received and its base, release, and proof hint policies; and N is the
set of all peer names in the language.
We will omit “global” and “local” when referring to a KB, when
the context is clear.
Figure 1: PeerAccess architecture and KB structure. Unidirectional arrows indicate information pushed from one peer to another.
Bidirectional arrows indicate queries and responses.
3. BASE POLICIES
Intuitively, the directly signed fact “Alice signs (cid:11)” in Bob’s KB