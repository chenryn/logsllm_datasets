Eki
(ml)
SSL
tunnel
secure
channel
SSL
tunnel
ki
keyboard and 
mouse events
home network
Trusted PDA
Figure 2. Three-party VNC protocol
and keyboard events sent by the untrusted terminal) is
discarded by the home computer.
several challenges and potential alternative designs dis-
cussed below:
At this point, the home computer has two open SSL
connections: one to the PDA, which is authenticated
using client authentication; the other to the untrusted
terminal, which is not authenticated on the SSL level
(but has used a one-time VNC password). The pack-
ets that come in from the authenticated connection
(the PDA) are fed into the input-event queue of the
home computer. As a result of these input message
(mouse movement, key strokes, etc.), the display of
the home computer changes, and the display updates
is sent through the other SSL connection (to the un-
trusted terminal).
• IV: Start Timer (HC ↔ PDA)
The home computer sends a “Start Timer” message
to the PDA. Both the home computer and the PDA (on
receiving the message) start a timer with timeout t and
every time period, they compute Ki = SHA1(ms(cid:2)i).
• The protocol
The home computer uses Ki as the server encryp-
tion key in the SSL session with the untrusted terminal
over which it sends RFB update messages. At the start
of each interval i, the PDA sends Ki to the untrusted
terminal for as long as the PDA wishes to delegate to
it. The PDA encodes mouse and keyboard events and
sends them to the home computer over the SSL session
already established. Figure 2 shows a graphical repre-
sentation of the secure remote terminal protocol.
4.2. Design Issues
In the design of our system, we tried to minimize
the computation involving the PDA and the communi-
cation going through it, as we consider the PDA a re-
source constrained device compared to both the VNC
server and viewer. While ultimately arriving at the de-
sign choices presented above, along the way we considered
TWO CONNECTIONS VS. ONE CONNECTION. At a ﬁrst
glance, it might seem that the SSL connection from the
PDA to the home computer is superﬂuous. Perhaps the PDA
could instead inject messages into a single SSL connec-
tion that is set up between the untrusted terminal and the
home computer (the untrusted terminal, of course, would
not have the necessary keying material to inject those mes-
sages itself). This way, the VNC server on the home com-
puter would have only needed to deal with one incoming
connection (which would have required fewer changes to
the original code base).
However, this design overlooks the fact that the untrusted
host needs to also send messages, not only to receive mes-
sages from the home computer. The reason is the design of
the RFB protocol, which is the underlying protocol for VNC
(see Section 3.3). First, in the RFB protocol, there is an
initialization phase in which the server and client establish
some parameters that the connection uses: the protocol ver-
sion, the type of encoding and the pixel format. Secondly,
during the VNC session, the viewer responds to Frame-
bufferUpdate messages (these denote changes in the screen
since the last message) from the server with a Framebuffer-
UpdateRequest message. The server sends a new Frame-
bufferUpdate only if there is a screen update and the client
has sent a FramebufferUpdateRequest message. This mech-
anism is useful for allowing the client to regulate the rate
at which it receives FramebufferUpdate messages, depend-
ing on its characteristics and network connection. Taking
this into account, we need to provide the untrusted termi-
nal with the means of sending messages to the home com-
puter, i.e., with the necessary MAC and encryption keys.
This means that the input (mouse and keyboard) messages
need to be authenticated with different keys, which we ac-
complish by opening a separate SSL connection to the home
computer.
CAPABILITIES. In our protocol, time is divided into equal
time intervals and capabilities are issued by the trusted de-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:42 UTC from IEEE Xplore.  Restrictions apply. 
vice to the untrusted host at the beginning of each time in-
terval. We chose the capability for time interval i to be a
session key used by the home computer to encrypt the com-
munication to the untrusted terminal. It is derived from the
master secret ms of the SSL session between the PDA and
the home computer and from the time period index i as
Ki = h(ms(cid:2)i), where h is a cryptographically secure hash
function such as SHA-1. The overhead for the PDA is the
computation of a hash function every time interval.
The PDA also needs to provide the untrusted terminal
with an initial VNC password and CA root certiﬁcate for the
home network so it can connect to the home computer (see
paragraph “VNC password” below). This can be viewed as
an initial capability (at the initial time 0).
Alternatively, we considered a second instantiation for
the capabilities: the capability for time interval i is a cer-
tiﬁcate signed by the PDA valid for that time period. At
the beginning of every time period, the home computer re-
quests a proof of possession of the certiﬁcate for that period
and closes the connection if the untrusted terminal is unable
to provide such a proof. We decided against this approach as
it increased the computational burden on the PDA (to sign
a certiﬁcate every time interval). In addition, it would have
added additional communication between the untrusted ter-
minal and home computer and would require much greater
changes to the VNC and SSL protocols to incorporate a
challenge-response exchange between the untrusted termi-
nal and home computer every time interval.
RESTRICTING DELEGATION. The communication between
the home computer and the untrusted terminal needs to be
restricted only to the time when the PDA is in the proxim-
ity of the untrusted terminal. In our solution, the mechanism
for achieving this is encrypting all the communication be-
tween the home computer and the untrusted terminal with a
key provided by the PDA to the untrusted terminal.
LENGTH OF THE TIME INTERVAL t. We recommend a
fairly large value for the parameter t (around 1 minute). We
believe that allowing the untrusted terminal to continue to
display the home computing environment for at most one
more minute after the PDA has left from its proximity is
reasonable. From the perspective of the PDA, computing a
hash function every minute is a negligible overhead.
We emphasize that we only require fairly weak time syn-
chronization in our protocol. The home computer starts a
timer for generating the capabilities Ki when the untrusted
terminal connects to it, and then sends a ”start timer” mes-
sage to the PDA. When receiving this message, the PDA
also starts a timer, which is delayed with the time it takes
the packet to reach the PDA (typically under a second). All
the messages sent from the home computer to the untrusted
terminal contain a key identiﬁer so that the untrusted termi-
nal knows which key it has to use to decrypt that packet. If
the untrusted terminal has not yet received the key from the
PDA, it waits an amount of time equal to double the length
of the time interval. If the timeout has elapsed, the untrusted
terminal concludes that the PDA is not in its proximity any-
more. This works as long as the clocks on the PDA and
home computer run at roughly the same speed. If the clock
speed differs signiﬁcantly, we could add a resynchroniza-
tion message from HC to PDA to our protocol. In our tests,
we did not ﬁnd this to be necessary.
VNC PASSWORD. We chose not to change the password-
based authentication mechanism used to authenticate the
untrusted terminal to the home computer (we note that we
do use strong SSL client authentication to authenticate the
PDA to the home computer). The untrusted terminal (unlike
the PDA) has no a priori relationship with the home com-
puter, so strong authentication makes less sense . Therefore,
we found it unnecessary to replace the password-based au-
thentication mechanism inside the VNC server with some-
thing stronger.
The password we use to authenticate the untrusted ter-
minal to the home computer is a one-time password derived
both by the PDA and the home computer from the SSL mas-
ter secret negotiated in their SSL handshake. This gives the
home computer some assurance that the untrusted terminal
connecting is, in fact, connected to the trusted PDA.
TRUSTED OUTPUT. In our system, we assume that the un-
trusted terminal faithfully renders the frame buffer data sent
to it by the home computer. Although the untrusted ter-
minal cannot send output events to the home computer (it
has read-only access to the home environment), it is theo-
retically possible for the untrusted computer to manipulate
what it displays to the user in a way that tricks the user into
opening up resources he did not intend to open up.
We brieﬂy experimented with a counter-measure that
consisted of displaying a snapshot of the screen (a small
portion around the location of the mouse pointer) on the
PDA. The user could move the PDA around, and thus
see faithful representations of different parts of the home
computer’s screen, and compare them to the display of
the trusted terminal. Apart from the questionable usabil-
ity properties of this approach it turned out that the perfor-
mance of the RFB protocol and VNC software on our PDA
was too poor to make this approach work efﬁciently.
Spooﬁng the output is therefore currently a vulnerabil-
ity in our system. We do point out, however, that using this
vulnerability to launch a targeted attack on a home comput-
ing environment (e.g., learning the content of a ﬁle of the
attacker’s choice) would require sophisticated software that
interpreted the frame-buffer data, drew conclusions about
the objects displayed, and then intelligently spoofed the dis-
play. While possible, we consider this threat mostly theoret-
ical. Users need to be aware, however, that our system does
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:42 UTC from IEEE Xplore.  Restrictions apply. 
not currently guarantee a trusted output path.
TRUSTED KEYBOARD INPUT. While it is quite natural to
use our augmented PDA as a mouse, generating keyboard
events on the PDA is somewhat awkward. Writing a whole
email message, for example, can be quite cumbersome. On
the other hand, we cannot let the untrusted terminal gener-
ate arbitrary keyboard events, as this would unduly expose
the home computer. As a middle ground, we considered the
following: The untrusted terminal could be allowed to send
certain restricted keyboard events to the home computer,
such as pure ASCII characters that are not accompanied by
any Ctrl or Alt keys. All other keyboard events (function
keys, those accompanied by Ctrl or Alt keys, etc.) would
be ignored by the home computer (unless they come di-
rectly from the PDA). Now, one could use our PDA/mouse
to open up, say, an email client, and compose a message
using the untrusted terminal’s keyboard. One would not be
able to switch applications (using Alt-Tab), or send the mes-
sage (using Ctrl-S) using the untrusted terminal’s keyboard.
To do this, the user would still have to use the PDA/mouse.
While this “sandboxing” is not part of our current imple-
mentation, we believe that it would be a useful addition to
future versions of our system.
SOFTWARE REQUIREMENTS. Our proof-of-concept pro-
totype requires adaptation of the VNC software on both
the untrusted terminal (the VNC client) and the home com-
puter (the VNC server), and a special-purpose client on the
trusted device to perform its part of the protocol. Requiring
software modiﬁcations on all three components of the sys-
tem seems a strong barrier to adoption. But, in order to pro-
vide a trusted secure remote access solution, it is clear that
all three components of the system must be “aware” of the
three-party nature of the interaction.
Of these, modiﬁcations to the untrusted terminal seem
the most difﬁcult to accomplish in practice, as users cur-
rently install new server software on their home computers
in order to be able to engage in new remote access proto-
cols (e.g., VNC itself, Microsoft’s remote desktop software,
or GoToMyPC [15]), and are likely to install client software
on their PDA that makes it easier for them to securely ac-
cess their home environment. We can actually deploy our
system without requiring any software to be pre-installed
on the untrusted terminal, by using a Java or ActiveX-based
viewer (e.g., in our case, VNC client) program delivered via
a web browser. This is in fact the solution adopted by Go-
ToMyPC [15].
4.3. Implementation
For our implementation, we have used the Visual C++
6.0 and eMbedded Visual C++ 3.0 environments. Our pro-
totype consists of three applications.