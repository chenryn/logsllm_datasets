title:Broad and load-aware anycast mapping with verfploeter
author:Wouter B. de Vries and
Ricardo de Oliveira Schmidt and
Wes Hardaker and
John S. Heidemann and
Pieter-Tjerk de Boer and
Aiko Pras
Broad and Load-Aware Anycast Mapping with Verfploeter
Wouter B. de Vries
University of Twente
John Heidemann
USC/ISI
Ricardo de O. Schmidt
University of Twente
Pieter-Tjerk de Boer
University of Twente
Wes Hardaker
USC/ISI
Aiko Pras
University of Twente
ABSTRACT
IP anycast provides DNS operators and CDNs with automatic fail-
over and reduced latency by breaking the Internet into catchments,
each served by a di(cid:29)erent anycast site. Unfortunately, understand-
ing and predicting changes to catchments as anycast sites are added
or removed has been challenging. Current tools such as RIPE Atlas
or commercial equivalents map from thousands of vantage points
(VPs), but their coverage can be inconsistent around the globe.
This paper proposes Verfploeter, a new method that maps anycast
catchments using active probing. Verfploeter provides around 3.8M
passive VPs, 430× the 9k physical VPs in RIPE Atlas, providing cov-
erage of the vast majority of networks around the globe. We then
add load information from prior service logs to provide calibrated
predictions of anycast changes. Verfploeter has been used to evalu-
ate the new anycast deployment for B-Root, and we also report its
use of a nine-site anycast testbed. We show that the greater cover-
age made possible by Verfploeter’s active probing is necessary to
see routing di(cid:29)erences in regions that have sparse coverage from
RIPE Atlas, like South America and China.
CCS CONCEPTS
• Networks → Network design principles; Network design
and planning algorithms; Network measurement; Naming
and addressing; Network layer protocols; Network resources alloca-
tion; Network performance analysis; Denial-of-service attacks; Logical
/ virtual topologies; Overlay and other logical network structures;
KEYWORDS
DNS, IP anycast, catchments, Internet mapping, service provision-
ing
ACM Reference Format:
Wouter B. de Vries, Ricardo de O. Schmidt, Wes Hardaker, John Heidemann,
Pieter-Tjerk de Boer, and Aiko Pras. 2017. Broad and Load-Aware Any-
cast Mapping with Verfploeter. In Proceedings of IMC ’17, London, United
Kingdom, November 1–3, 2017, 12 pages.
https://doi.org/10.1145/3131365.3131371
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:27)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:27)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:27)c permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’17, November 1–3, 2017, London, United Kingdom
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131371
1 INTRODUCTION
IP anycast allows an Internet service operator to provide services
such as DNS or HTTP content delivery from multiple sites that are,
usually, physically distributed [2]. Anycast can reduce latency [28,
43] and blunt Distributed Denial-of-Service (DDoS) attacks by
spreading tra(cid:28)c across di(cid:29)erent sites and providing greater ag-
gregate capacity than any one site might [33]. IP anycast is used
by Root DNS operators [2, 41], commercial DNS service providers
and operators of top- and second-level domains. It is also used
by multiple Content Distribution Networks (CDNs), including Mi-
crosoft/Bing [19], Verizon/Edgecast, and others.
Anycast operates by deploying servers at di(cid:29)erent sites1, and
having each site announce the same IPv4 or v6 pre(cid:27)x using the
Border Gateway Protocol (BGP—the standard protocol for inter-AS
routing). All networks that receive these routes from BGP select
their topologically closest site, as de(cid:27)ned by the BGP metrics and
policies. These networks de(cid:27)ne the catchment of that anycast site.
User send queries that are routed to the nearest anycast site; because
routing is pre-computed, there is no query-time cost for this site-
selection.
Understanding anycast catchments is important for performance
(throughput, latency, and load balancing), defending against DDoS,
and managing (cid:27)ltering. Anycast operators engineer their deploy-
ments to minimize latency to users, and to spread load over multiple
sites. Some anycast systems employ tens or hundreds of anycast
sites to minimize latency to users [10, 43], although evaluating
how well that goal has been achieved requires ongoing observa-
tion [9, 43]. Operators also often balance load across multiple sites
to manage capacity [11, 19], particularly for CDNs providing large
volumes of content. Load balancing across anycast sites is partic-
ularly important to mitigate DDoS attacks [33], where matching
attack tra(cid:28)c to capacity or isolating attack tra(cid:28)c to certain catch-
ments are essential tools.
In addition to performance, anycast catchments can interact with
country-speci(cid:27)c policies for content (cid:27)ltering. Filtering of DNS to
implement national-speci(cid:27)c policies is not uncommon [3, 21, 23, 50],
so it is important that policies and catchments align. Two examples
of Root DNS service show cases where there is a mismatch. In 2010,
the catchment I-Root DNS service’s site in Beijing expanded outside
China, imposing China’s censorship policies outside its borders [30].
More recently, at the beginning of 2017, the catchment for a K-Root
anycast site in Iran was seen outside that country, inconsistent with
the policies of the K-Root operators and the hosts of that site [1, 29].
1 Anycast documents sometimes use the term instance, but that term can apply to both
sites or individual servers. We avoid the term “instance” because it is ambiguous when
anycast sites have multiple servers, as is often the case. Similarly, RFC 4786 [2] uses
the term node for what we call a site; we avoid node because it often refers to speci(cid:27)c
servers.
IMC ’17, November 1–3, 2017, London, United Kingdom
de Vries, Schmidt, Hardaker, Heidemann, de Boer, and Pras
The challenge in managing anycast is that BGP routing is not
always what one would expect. Absent other policies, BGP de(cid:27)nes
nearness in terms of AS-hops, but one AS hop across an organi-
zation with a global network (such as AT&T, Tata, and NTT) can
have very di(cid:29)erent latency than one AS hop across a small ISP. In
addition, the trend of a (cid:30)atter Internet [27] means that AS hops
provide coarser control than it did in the past. More importantly,
BGP policy controls allow ISPs to manipulate routing for business
reasons; policy controls are widely used to do tra(cid:28)c management.
Current approaches to manage anycast catchments use one-o(cid:29)
active measurements [11], platforms for active measurement such
as RIPE Atlas [12, 43], commercial services (for example, [44]), and
analysis of anycast service logs [22]. While these approaches have
provided insight, and RIPE Atlas [40] and commercial services are
in wide use, even the largest services have relatively small numbers
of vantage points (from hundreds to 10,000 or so), and it is unclear
how these measurement systems relate to actual operational tra(cid:28)c.
Analysis of anycast service logs o(cid:29)er an accurate representation of
actual load, but require the anycast service to be in operation and
active use.
The overall contribution of this paper is to provide a new ap-
proach to mapping anycast catchments (§3) that has been validated
through real world ground truth. This approach provides broad cov-
erage and can be combined with tra(cid:28)c history to provide estimated
load, providing operational value for one anycast service, and an
approach that can be used by others. The insight in our new mea-
surement approach is to use active probing using the anycast service
itself and we can use historical tra(cid:28)c to predict future load. In §5 we
show that active probing allows coverage of the ping-responsive
Internet, currently about 4M /24 networks, providing 430× more
information than current public measurement platforms. By con-
trast, coverage from existing platforms scale relative to the ability
to deploy physical devices or virtual machines, both of which are
limited.
The second contribution of this work is to use Verfploeter to ex-
amining the operational catchment for B-Root and to study anycast
in Tangled, a nine-site anycast testbed (§6). B-Root deployed any-
cast only recently (May 2017), and our approach contributed to the
success of this planning and deployment. Analyzing this active net-
work deployment allows us to compare the predictive capability of
our approach to prior approaches such as RIPE Atlas. Evaluation of
our Tangled testbed lets us test a larger anycast deployment (nine
sites compared to B-Root’s two sites). Our approach provides a new
way to evaluate anycast stability with much broader coverage than
recent studies [48].
Although our case study with B-Root and Tangled focus on
DNS, Verfploeter can examine any anycast service, although load
prediction requires a system that can estimate historical tra(cid:28)c load.
A complete version of Verfploeter is available as open source at
https://github.com/woutifier and https://ant.isi.edu/software/
lander/. We have released all the data used in this paper (except
LN-4-12, which is not ours); see citations in Table 1 and Table 2.
Use of Open Resolvers: Early work used Open DNS Resolvers
in combination with PlanetLab and Netalyzr to map catchments
of anycast services [18]. While Open Resolvers provided a broad
view at the time of their study (300k VPs), they are being steadily
shut down out of concerns about their use in DNS ampli(cid:27)cation
attacks [31]. While open resolvers o(cid:29)ered a very large set of vantage
points, they are fewer than the method we propose that uses ping-
responsive networks. (A direct comparison is potential future work.)
Measurement Platforms: The most common method of as-
sessing anycast is to use public or private measurement platforms
that o(cid:29)er physical or passive VPs around the Internet. RIPE At-
las [40] and PlanetLab [34] are both openly available and widely
distributed, and a number of commercial platforms are also avail-
able. Systems we are aware of range from hundreds to around 10k
VPs.
Several studies, both by others and us, have used measurement
platforms to study anycast [1, 9, 11, 12, 18, 30, 33, 43]. As pre-
deployed measurement platforms these systems are available and
can measure anycast services externally (without requiring support
from the service operator). The main weaknesses of these systems
are that they are slow and expensive to grow, and deployment is
often skewed relative to the population of Internet users. This skew
has been noted in many prior studies and was recently studied
explicitly [8].
Client-side measurements: Recent work examined the Mi-
crosoft Bing CDN [11], using both log analysis (see below) and
active client-side measurements. Their client-side analysis mea-
sures performance using JavaScript injected into search results of a
small fraction of Bing users. Client-side measurements can get very
broad results (like Verfploeter), but are not possible for all services.
DNS and other non-web services do not support client-side modi(cid:27)-
cations, and may also be di(cid:28)cult for websites hosted by multiple
parties.
Tra(cid:28)c and Log Analysis: Anycast operators have always been
able to assess current anycast performance by analyzing their
own tra(cid:28)c and server logs. Recent work examined a variety of
CDNs [11, 22]. As the service operator, log analysis requires no
external measurements and can cover the entire service. While
important, analysis of existing services can only study the cur-
rent deployment—it requires active use by a large number of users
and cannot directly support pre-deployment planning. Second, log
(cid:27)les may be unavailable due to privacy concerns, cost of storage
or retrieval, or concerns about performance impact on operational
services. We use logs when available, but do not require them.
Performance Analysis of DNS Services: There have been a
number of analysis of root DNS service, both pre-anycast [20] and
with anycast for latency [9, 13, 18, 28, 43] and DDoS [33].
To the best of our knowledge, our paper is the (cid:27)rst to present this
ICMP-based anycast catchment determination approach. Further,
we do not know of any larger scale catchment measurement with
open datasets against a real-world anycast deployment.
2 RELATED WORK
There have been several prior approaches to measure anycast catch-
ment using a variety of techniques.
3 VERFPLOETER: GLOBAL PROBING
Our approach has components to map anycast catchments for a
large fraction of pre(cid:27)xes in the Internet, and to estimate load from
each of these pre(cid:27)xes.
Broad and Load-Aware Anycast Mapping with Verfploeter
IMC ’17, November 1–3, 2017, London, United Kingdom
RIPE Atlas
(active VPs, passive anycast)
Verfploeter
(active anycast, passive VPs)
anycast
Internet
collector
anycast
Internet
collector
request
reply
to collector
Figure 1: Traditional catchment mapping from active VPs
using a testbed like RIPE Atlas (left); and using Verfploeter
with queries originating in the anycast system (right).
3.1 Mapping Anycast Catchments
Traditional approaches to measuring anycast catchments use many
vantage points (VPs) around the Internet; each VP queries the
anycast service to determine its catchment. In prior work for DNS,
the VPs are typically RIPE Atlas probes [39, 43], and the queries use
DNS TXT records, with the special CHAOS network type, and the
name “hostname.bind” [49], or the newer NSID option in DNS [4].