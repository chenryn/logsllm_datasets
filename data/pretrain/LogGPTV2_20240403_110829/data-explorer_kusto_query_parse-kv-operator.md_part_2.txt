|--|--|--|--|--|
|2021-01-01 10:00:54.0000000| 10.1.1.123| 10.1.1.124| 125| connection aborted|
The values themselves may contain properly escaped quote characters, as the following example shows:
> [!div class="nextstepaction"]
> Run the query
```kusto
print str='src=10.1.1.123 dst=10.1.1.124 bytes=125 failure="the remote host sent \\"bye!\\"" time=2021-01-01T10:00:54'
| parse-kv str as (['time']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=' ', kv_delimiter='=', quote='"', escape='\\')
| project-away str
```
**Output**
|time| src| dst| bytes| failure|
|--|--|--|--|--|
|2021-01-01 10:00:54.0000000| 10.1.1.123| 10.1.1.124| 125| the remote host sent "bye!"|
### Extraction in greedy mode
There are cases when unquoted values may contain pair delimiters. In this case, use the `greedy` mode to indicate to the operator to scan until the next key appearance (or end of string) when looking for the value ending.
The following examples compare how the operator works with and without the `greedy` mode specified:
> [!div class="nextstepaction"]
> Run the query
```kusto
print str='name=John Doe phone=555 5555 city=New York'
| parse-kv str as (name:string, phone:string, city:string) with (pair_delimiter=' ', kv_delimiter='=')
| project-away str
```
**Output**
|name| phone| city|
|--|--|--|
|John| 555| New
> [!div class="nextstepaction"]
> Run the query
```kusto
print str='name=John Doe phone=555 5555 city=New York'
| parse-kv str as (name:string, phone:string, city:string) with (pair_delimiter=' ', kv_delimiter='=', greedy=true)
| project-away str
```
**Output**
|name| phone| city|
|--|--|--|
|John Doe| 555 5555| New York|
### Extraction with no well-defined delimiters
In the following example, any nonalphanumeric character is considered a valid delimiter:
> [!div class="nextstepaction"]
> Run the query
```kusto
print str="2021-01-01T10:00:34 [INFO] ThreadId:458745723, Machine:Node001, Text: Started"
| parse-kv str as (Text: string, ThreadId:long, Machine: string)
| project-away str
```
**Output**
|Text| ThreadId| Machine|
|--|--|--|
|Started| 458745723| Node001|
Values quoting and escaping is allowed in this mode as shown in the following example:
> [!div class="nextstepaction"]
> Run the query
```kusto
print str="2021-01-01T10:00:34 [INFO] ThreadId:458745723, Machine:Node001, Text: 'The service \\' is up'"
| parse-kv str as (Text: string, ThreadId:long, Machine: string) with (quote="'", escape='\\')
| project-away str
```
**Output**
|Text| ThreadId| Machine|
|--|--|--|
|The service ' is up| 458745723| Node001|
### Extraction using regex
When no delimiters define text structure well enough, regular expression-based extraction can be useful.
> [!div class="nextstepaction"]
> Run the query
```kusto
print str=@'["referer url: https://hostname.com/redirect?dest=/?h=1234", "request url: https://hostname.com/?h=1234", "advertiser id: 24fefbca-cf27-4d62-a623-249c2ad30c73"]'
| parse-kv str as (['referer url']:string, ['request url']:string, ['advertiser id']: guid) with (regex=@'"([\w ]+)\s*:\s*([^"]*)"')
| project-away str
```
**Output**
|referer url| request url| advertiser id|
|--|--|--|
|`https://hostname.com/redirect?dest=/?h=1234`| `https://hostname.com/?h=1234`| 24fefbca-cf27-4d62-a623-249c2ad30c73|