80
60
40
20
0  
45% 
43% 
34% 
21% 
20% 
36% 
30% 
0.2% 
0% 
No IP Options
Record Route
TimeStamp
Option X
IP Option Test type (SYN)
Figure 1: Handling IP Options in TCP SYN packets.
Figure 1 shows the TCP connection behavior with different IP
options in the associated SYN packets. For each attempted connec-
tion there are three possible outcomes: no connection established,
connection established with the IP option ignored, or IP option ac-
cepted. As Figure 1 shows, in many cases no connection was estab-
lished when the Record Route Option or the Timestamp Option was
included in the SYN packet. When IP Option X is included in the
SYN segment, the connection was not established to over 70% of
the web servers tested. This does not bode well for the deployment
of new IP options in the Internet.
Most IP options are usually expressed in the ﬁrst packet (e.g., the
TCP SYN packet) in the communication between end hosts. We
performed an additional test to assess the behavior when IP option
X is placed in data packets in the middle of an established con-
nection. For each established connection TBIT offers two classi-
ﬁcations: “success” or “broken connection”. The former indicates
that the server successfully delivered its data regardless of the IP
option insertion. The latter classiﬁcation indicates that the inser-
tion of the IP option forced the connection to be idle for at least
12 seconds (which we then deﬁne as “broken”). We performed two
sets of tests, with and without insertion of option X. The connec-
tion failure rate across both sets of tests is roughly 3%. The tests
without IP options show nearly 6% of the connections are “broken”
for some reason. Meanwhile, when inserting IP option X into the
middle of the transfer, 44% of the connections are broken, indi-
cating a signiﬁcant issue when attempting to utilize IP options in
mid-connection.
4.4 TCP Options
Next we turn our attention to potential problems when TCP op-
tions are employed. TCP options are more routinely used than
IP options. For instance, TCP uses the timestamp option [14] to
(among other things) take round-trip time measurements more fre-
quently than once per round-trip time, for the Protection Against
Wrapped Sequences [14] algorithm and for detecting spurious time-
outs [18].
However, middleboxes along a path can interfere with the use
of TCP options, in an attempt to thwart attackers trying to ﬁnger-
print hosts. Network mapping tools such as NMAP (Network Map-
per) use information from TCP options to gather information about
hosts; this is called ﬁngerprinting. Countermeasures to ﬁngerprint-
ing, sometimes called ﬁngerprint scrubbers [29], attempt to block
ﬁngerprinting by inspecting and minimally manipulating the trafﬁc
stream. One of the strategies used by ﬁngerprint scrubbers is to re-
order TCP options in the TCP header; any unknown options may
be included after all other options. The TCP options test checks to
see if sites reject connections negotiating speciﬁc or unknown TCP
options, or drop packets encountered in the middle of the stream
that contain those options.
The TCP options test ﬁrst assesses the behavior of the web server
when the TCP Timestamp option is included in the SYN packet. To
test for performance with unknown TCP options, we also initiate
connections using an unallocated option number, TCP Option Y ,
in the SYN packet.
Our tests indicate a connection failure rate of about 0.2% in all
scenarios. Option Y is ignored in the remainder of the connections.
The timestamp option is ignored by roughly 15% of the servers (but
the connection is otherwise ﬁne). The reason the servers ignore the
timestamp option is not visible to TBIT, but could be either a mid-
dlebox stripping or mangling the option or the web server not sup-
porting timestamps. Next we assess the use of options in the middle
of a TCP connection, by establishing a connection without TCP op-
tions and then using the Timestamp option or Option Y on a data
packet in the middle of the connection. The connection failure rate
for both options is roughly 3% – indicating that sending unknown
options midstream is not problematic for most web servers.
5. ADDITIONAL RESULTS
In addition to the measurements presented in this paper we exe-
cuted additional tests to detect and quantify the presence of various
algorithms and parameters in the web server’s TCP implementa-
tions [21]. In this section we summarize several of the results we
have obtained in the hopes of providing researchers with guidance
on constructing models for their simulation and emulation studies.
The tests that produce these results are similar to the tests outlined
in [23].
• When not using selective acknowledgments (SACK) [19] (e.g.,
because of non-SACK-capable receivers), roughly 75% of
the web servers we could classify used NewReno loss recov-
ery [13]. This suggests that studies involving only the Reno
TCP variant should be discouraged.
• Nearly 70% of web servers advertise themselves as SACK
capable. Of the servers that advertise SACK support, over
95% make some use of the SACK information sent by the
web client.
• Of the web servers that advertise SACK support, more than
95% correctly generate SACK blocks when data sent by the
client is missing.
• RFC 3390 [5] allows a TCP to use an initial congestion win-
dow of 1–4 segments, depending on their size. We found
that 42% of the web servers in our dataset used an initial
congestion window of 1 segment, while 54% used an initial
window of 2 segments. Less than 3% of the web servers used
3 or 4 segment initial congestion windows. We noted initial
congestion window values as large as 129 segments (in small
proportions of the servers).
In addition to the above results we have additional results regard-
ing TCP’s use of Limited Transmit, Appropriate Byte Counting,
Congestion Window Validation, Window Scale Option, Minimum
RTO, Minimum MSS, and the Deployment of D-SACK (Duplicate
SACK). Also, we have measurement strategies for detecting mid-
dleboxes that perform TTL-rewriting, and for detecting the effects
of reordering on transport protocols. Finally, another component of
our work uses packet traces from near a set of web servers to as-
sess the client-side deployment of various end-host algorithms and
protocol mechanisms.
6. CONCLUSIONS AND FUTURE WORK
The contribution of the work presented in this paper is to il-
lustrate the ways that the performance of protocol mechanisms in
the Internet differ from theory. The insights gathered from our
measurements involving the interactions between TCP and middle-
boxes along the network path are summarized in Table 5.
Additionally, there are a wealth of important TCP behaviors that
we have not examined in our tests, and new TCP mechanisms are
continually being proposed, standardized and deployed (e.g., High-
Speed TCP [12]). Assessing their deployment, characteristics and
behaviors in the context of the evolving Internet architecture are
useful future work.
Another class of extensions to this work is exploring the behavior
of TCP in alternate applications (e.g., peer-to-peer systems, email,
web caching, etc.).
An additional interesting area for future investigation is using
TBIT-like tools for performance evaluation. For instance, a perfor-
mance comparison of servers using various initial congestion win-
dow values might be useful or servers with and without SACK-
based loss recovery. Developing techniques for conducting this
kind of performance comparison in a solid and meaningful way
(and detecting when such a comparison is not meaningful) is a rich
area for future investigation. Furthermore, performing tests from
multiple vantage points would be an interesting extension for de-
tecting differences in behavior among multiple paths which may
point to middleboxes in some paths.
As new transport protocols such as SCTP and DCCP begin to
be deployed, another area for future work will be to construct tools
to monitor the behavior, deployment and characteristics of these
protocols in the Internet.
While we examined some ways that middleboxes interfere with
TCP communications, a key open question is that of assessing ways
that middleboxes affect the performance of transport protocols or of
applications. One middlebox that clearly affects TCP performance
is that of Performance Enhancing Proxies (PEPs) [7] that break
single TCP connections into two connections potentially changing
end-to-end behavior. While [4] presents some results in this gen-
eral area, additional active tests may be useful to investigate this
further.
Behavior
ECN
PMTUD
IP Options
4.3
TCP Options
4.4
Section Possible Interactions with Routers or Middleboxes
4.1
4.2
Advertising ECN prevents connection setup for a small (and diminishing) set of hosts.
Less than half of the web servers successfully complete Path MTU Discovery.
PMTUD is attempted but fails for one-sixth of the web servers.
For roughly one-third of the web servers, no connection is established when the client includes
an IP Record Route or Timestamp option in the TCP SYN packet.
For most servers, no connection is established when the client includes an unknown IP Option.
The use of TCP options does not interfere with connection establishment. Few problems
were detected with known and unknown TCP options included in data packets in mid-stream.
Table 5: Information on interactions between transport protocols and routers or middleboxes.
Finally, a completely different kind of test that could beneﬁt from
the active probing approach outlined in this paper would be one
to detect the presence or absence of Active Queue Management
mechanisms at the congested link along a path. To some extent, this
can be done with passive tests, by looking at the pattern of round-
trip times before and after a packet drop. However, active tests may
be much more powerful, by allowing the researcher to send short
runs of back-to-back packets, as well as potentially problematic, in
attempting to induce transient congestion in the network.
Acknowledgments
Orion Hodson assisted with our TBIT measurements. Sourabh
Ladha and the anonymous reviewers gave us detailed and useful
feedback.
This material is based in part upon work supported by the Na-
tional Science Foundation under Grant Nos. 0205519 and 0230921.
Any opinions, ﬁndings, and conclusions or recommendations ex-
pressed in this material are those of the author(s) and do not neces-
sarily reﬂect the views of the National Science Foundation.
7. REFERENCES
[1] NLANR Web Caching project. http://www.ircache.net/.
[2] PMTU Black Hole Detection Algorithm Change for
Windows NT 3.51. Microsoft Knowledge Base Artible -
136970.
[3] Mark Allman. A Web Server’s View of the Transport Layer.
Computer Communications Review, 30(5):10–20, October
2000.
[4] Mark Allman. On the Performance of Middleboxes. In ACM
SIGCOMM/USENIX Internet Measurement Conference,
pages 307–312, October 2003.
[5] Mark Allman, Sally Floyd, and Craig Partridge. Increasing
TCP’s Initial Window, October 2002. RFC 3390.
[6] Mark Allman and Vern Paxson. On Estimating End-to-End
Network Path Properties. pages 229–240, 1999.
[7] John Border, Markku Kojo, Jim Griner, Gabriel Montenegro,
and Zach Shelby. Performance Enhancing Proxies Intended
to Mitigate Link-Related Degradations, June 2001. RFC
3135.
[8] Douglas E. Comer and John C. Lin. Probing TCP
Implementations. In USENIX Summer 1994 Conference,
1994.
[9] Wesley Eddy, Shawn Ostermann, and Mark Allman. New
Techniques for Making Transport Protocols Robust to
Corruption-Based Loss. January 2004. Under submission.
[10] S. Floyd. Inappropriate TCP Resets Considered Harmful,
2002. RFC 3360.
[11] Sally Floyd. Tools for Bandwidth Estimation. Web page,
URL ‘http://www.icir.org/models/tools.html’.
[12] Sally Floyd. HighSpeed TCP for Large Congestion
Windows, December 2003. RFC 3649.
[13] Sally Floyd, Tom Henderson, and Andrei Gurtov. The
NewReno Modiﬁcation to TCP’s Fast Recovery Algorithm,
April 2004. RFC 3782.
[14] V. Jacobson, R. Barden, and D. Borman. TCP Extensions for
High Performance, May 1992. RFC 1323.
[15] Amit Jain and Sally Floyd. Quick-Start for TCP and IP,
2002. Internet-Draft draft-amit-quick-start-02.txt, expired,
URL: http://www.icir.org/ﬂoyd/papers/draft-amit-quick-
start-02.txt.
[16] Christopher Kent and Jeffrey Mogul. Fragmentation
Considered Harmful. In ACM SIGCOMM, October 1987.
[17] Kevin Lahey. TCP Problems with Path MTU Discovery,
September 2000. RFC 2923.
[18] R. Ludwig and M. Meyer. The Eifel Detection Algorithm for
TCP, 2003. RFC 3522.
[19] Matt Mathis, Jamshid Mahdavi, Sally Floyd, and Allyn
Romanow. TCP Selective Acknowledgement Options,
October 1996. RFC 2018.
[20] Jack McCann, Steve Deering, and Jeffrey C. Mogul. Path
MTU Discovery for IP version 6, August 1996. RFC 1981.
[21] Alberto Medina, Mark Allman, and Sally Floyd. Measuring
the Evolution of Transport Protocols in the Internet, 2004.
URL http://www.icir.org/tbit/.
[22] Jeffrey C. Mogul and Steve Deering. Path MTU Discovery,
November 1990. RFC 1191.
[23] Jitendra Padhye and Sally Floyd. Identifying the TCP
Behavior of Web Servers. In ACM SIGCOMM, August 2001.
[24] Vern Paxson. Automated Packet Trace Analysis of TCP
Implementations. In ACM SIGCOMM, September 1997.
[25] Vern Paxson. End-to-End Internet Packet Dynamics. In ACM
SIGCOMM, September 1997.
[26] Jon Postel. Transmission Control Protocol, September 1981.
RFC 793.
[27] K.K. Ramakrishnan, Sally Floyd, and David Black. The
Addition of Explicit Congestion Notiﬁcation (ECN) to IP,
September 2001. RFC 3168.
[28] J.H. Saltzer, D.P. Reed, and David Clark. End-to-End
Arguments in System Design. In Proceedings of the Second
International Conference on Distributed Computing Systems,
pages 509–512, August 1981.
[29] Matthew Smart, G. Robert Malan, and Farnam Jahanian.
Defeating TCP/IP Stack Fingerprinting. In 9th USENIX
Security Symposium, pages 229–240, 2000.