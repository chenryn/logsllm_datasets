    skipped=10 rescued=0 ignored=0
    ```
:::
::: orderedlist
**验证**
1.  登录到 SSH 服务器：
    ``` screen
    $ ssh user1@10.1.1.1
    ```
    其中：
    ::: itemizedlist
    -   `user1`{.literal} 是 SSH 服务器上的用户。
    -   `10.1.1.1`{.literal} 是 SSH 服务器的 IP 地址。
    :::
2.  检查 SSH 服务器上的 `sshd_config`{.literal} 文件的内容：
    ``` screen
    $ vim /etc/ssh/sshd_config
    # Ansible managed
    HostKey /etc/ssh/ssh_host_rsa_key
    HostKey /etc/ssh/ssh_host_ecdsa_key
    HostKey /etc/ssh/ssh_host_ed25519_key
    AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
    AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
    AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE
    AcceptEnv XMODIFIERS
    AuthorizedKeysFile .ssh/authorized_keys
    ChallengeResponseAuthentication no
    GSSAPIAuthentication yes
    GSSAPICleanupCredentials no
    PasswordAuthentication no
    PermitRootLogin no
    PrintMotd no
    Subsystem sftp /usr/libexec/openssh/sftp-server
    SyslogFacility AUTHPRIV
    UsePAM yes
    X11Forwarding yes
    Match Address 192.0.2.0/24
      PasswordAuthentication yes
      PermitRootLogin yes
    ```
3.  检查您可以以 root 用户身份从 `192.0.2.0/24`{.literal}
    子网连接到服务器：
    ::: orderedlist
    1.  确定您的 IP 地址：
        ``` screen
        $ hostname -I
        192.0.2.1
        ```
        如果 IP 地址在 `192.0.2.1`{.literal} - `192.0.2.254`{.literal}
        范围内，您可以连接到服务器。
    2.  以 `root`{.literal} 身份连接到服务器：
        ``` screen
        $ ssh root@10.1.1.1
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   `/usr/share/doc/rhel-system-roles/sshd/README.md`{.literal} 文件.
-   `ansible-playbook(1)`{.literal} man 手册.
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#ref_ssh-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles}SSH 系统角色变量 {.title}
:::
在 SSH 系统角色 playbook 中，您可以根据您的偏好和限制定义客户端 SSH
配置文件的参数。
如果没有配置这些变量，系统角色会生成与 RHEL 默认值匹配的全局
`ssh_config`{.literal} 文件。
在所有情况下，布尔值在 `ssh`{.literal} 配置中都正确呈现为
`yes`{.literal} 或 `no`{.literal}。您可以使用 list
定义多行配置项。例如：
``` screen
LocalForward:
  - 22 localhost:2222
  - 403 localhost:4003
```
呈现为：
``` screen
LocalForward 22 localhost:2222
LocalForward 403 localhost:4003
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
配置选项区分大小写。
:::
::: variablelist
**SSH 系统角色的变量**
[`ssh_user`{.literal}]{.term}
:   您可以定义一个现有用户名，供系统角色修改用户特定的配置。特定用户的配置保存在给定用户的
    `~/.ssh/config`{.literal} 中。默认值为
    null，它会修改所有用户的全局配置。
[`ssh_skip_defaults`{.literal}]{.term}
:   默认值为 `auto`{.literal}。如果设置为
    `auto`{.literal}，系统角色会写入系统范围的配置文件
    `/etc/ssh/ssh_config`{.literal} 并保留在其中定义的 RHEL
    默认值。创建置入配置文件（例如通过定义 `ssh_drop_in_name`{.literal}
    变量）会自动禁用 `ssh_skip_defaults`{.literal} 变量。
[`ssh_drop_in_name`{.literal}]{.term}
:   定义置入配置文件的名称，该文件放置在系统范围的置入目录中。该名称在模板
    `/etc/ssh/ssh_config.d/{ssh_drop_in_name}.conf`{.literal}
    中用于引用要修改的配置文件。如果系统不支持置入目录，则默认值为
    null。如果系统支持置入目录，则默认值为 `00-ansible`{.literal}。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    如果系统不支持置入目录，设置此选项将使 play 失败。
    :::
    建议的格式是 `NN-name`{.literal}，其中 `NN`{.literal}
    是用于对配置文件排序的两位数字，`name`{.literal}
    是内容或文件所有者的任何描述性名称。
[`ssh`{.literal}]{.term}
:   包含配置选项和对应的值的字典。
[`ssh_OptionName`{.literal}]{.term}
:   您可以使用由 `ssh_`{.literal}
    前缀和选项名称组成的简单变量而不是字典来定义选项。简单的变量覆盖
    `ssh`{.literal} 字典中的值。
[`ssh_additional_packages`{.literal}]{.term}
:   此角色会自动安装 `openssh`{.literal} 和 `openssh-clients`{.literal}
    软件包，这些软件包是最常见的用例所需要的。如果您需要安装其他软件包，例如
    `openssh-keysign`{.literal}
    用于基于主机的身份验证，您可以在这个变量中指定它们。
[`ssh_config_file`{.literal}]{.term}
:   角色保存配置文件的路径。默认值：
    ::: itemizedlist
    -   如果系统有一个置入目录，则默认值由模板
        `/etc/ssh/ssh_config.d/{ssh_drop_in_name}.conf`{.literal} 定义。
    -   如果系统没有置入目录，则默认值为
        `/etc/ssh/ssh_config`{.literal}。
    -   如果定义了 `ssh_user`{.literal} 变量，默认值为
        `~/.ssh/config`{.literal}。
    :::
[`ssh_config_owner`{.literal}, `ssh_config_group`{.literal}, `ssh_config_mode`{.literal}]{.term}
:   创建的配置文件的所有者、组和模式。默认情况下，文件的所有者是
    `root:root`{.literal}，模式是 `0644`{.literal}。如果定义了
    `ssh_user`{.literal}，则模式为 `0600`{.literal}，所有者和组是从
    `ssh_user`{.literal} 变量中指定的用户名衍生而来。
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#proc_configuring-openssh-clients-using-the-ssh-system-role_configuring-secure-communication-with-the-ssh-system-roles}使用 SSH 系统角色配置 OpenSSH 客户端 {.title}
:::
您可以通过运行 Ansible playbook，使用 SSH 系统角色来配置多个 SSH
客户端。
::: itemizedlist
**先决条件**
-   [*访问一个或多个受管节点*]{.emphasis}，它们是您要使用 SSH
    系统角色配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   已安装 Red Hat Ansible Engine。
    -   已安装 `rhel-system-roles`{.literal} 软件包。
    -   列出受管节点的清单文件。
    :::
:::
::: orderedlist
**流程**
1.  使用以下内容 `playbook.yml`{.literal} 创建新文件：
    ``` screen
    ---
    - hosts: all
      tasks:
      - name: "Configure ssh clients"
        include_role:
          name: rhel-system-roles.ssh
        vars:
          ssh_user: root
          ssh:
            Compression: true
            GSSAPIAuthentication: no
            ControlMaster: auto
            ControlPath: ~/.ssh/.cm%C
            Host:
              - Condition: example
                Hostname: example.com
                User: user1
          ssh_ForwardX11: no
    ```
    此 playbook 使用以下配置在受管节点上配置 `root`{.literal} 用户的 SSH
    客户端首选项：
    ::: itemizedlist
    -   压缩已启用。
    -   ControlMaster 多路复用设置为 `auto`{.literal}。
    -   连接到 `example.com`{.literal} 主机的 `example`{.literal} 别名是
        `user1`{.literal}。
    -   `example`{.literal} 主机别名被创建，它代表了与使用
        `user1`{.literal} 用户名的 `example.com`{.literal} 主机的连接。
    -   X11 转发被禁用。
    :::
    另外，您还可以根据您的偏好修改这些变量。如需了解更多详细信息，请参阅
    [SSH
    客户端角色变量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/ssh-system-role-variables_configuring-secure-communication-with-the-ssh-system-role){.link}。
2.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check path/custom-playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file path/custom-playbook.yml
    ```
:::
::: itemizedlist
**验证**
-   通过在文本编辑器中打开 SSH
    配置文件来验证受管节点是否具有正确的配置，例如：
    ``` screen
    # vi ~root/.ssh/config
    ```
    在应用了上面显示的示例 playbook 后，配置文件应包含以下内容：
    ``` screen
    # Ansible managed
    Compression yes
    ControlMaster auto
    ControlPath ~/.ssh/.cm%C
    ForwardX11 no
    GSSAPIAuthentication no
    Host example
      Hostname example.com
      User user1
    ```
:::
:::
:::
[]{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel}第 9 章 在系统间设置自定义加密策略 {.title}
:::
作为管理员，您可以使用 RHEL 上的 Crypto 策略系统角色快速、一致地使用 Red
Hat Ansible Automation Platform 在许多不同的系统中配置自定义加密策略。
::: section
::: titlepage
# []{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html#crypto-policies-system-role-variables_setting-a-custom-cryptographic-policy-across-systems}加密策略系统角色变量和事实 {.title}
:::
在 Crypto Policies System Role playbook 中，您可以根据您的偏好和限制为
crypto 策略配置文件定义参数。
如果没有配置任何变量，系统角色不会配置系统，仅报告事实。
::: variablelist
**Crypto 策略系统角色选择的变量**
[`crypto_policies_policy`{.literal}]{.term}
:   决定系统角色应用到受管节点的加密策略级别。[有关不同加密策略级别的详情，请参考系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/index#system-wide-crypto-policies_using-the-system-wide-cryptographic-policies){.link}。
[`crypto_policies_reload`{.literal}]{.term}
:   如果设置为 `yes`{.literal}，受影响的服务，当前为
    `ipsec`{.literal}、`bind`{.literal} 和 `sshd`{.literal}
    服务，在应用加密策略后重新载入。默认值为 `yes`{.literal}。
[`crypto_policies_reboot_ok`{.literal}]{.term}
:   如果设置为 `yes`{.literal}，在系统角色更改 crypto
    策略后需要重启，它会将 `crypto_policies_reboot_required`{.literal}
    设置为 `yes`{.literal}。默认值为 `no`{.literal}。
:::
::: variablelist
**Crypto 策略系统角色设置的事实**
[`crypto_policies_active`{.literal}]{.term}
:   列出当前选择的策略。
[`crypto_policies_available_policies`{.literal}]{.term}
:   列出系统上的所有可用策略级别。
[`crypto_policies_available_modules`{.literal}]{.term}
:   列出系统上的所有可用子策略模块。
:::
::: title
**其它资源**
:::
\*
[创建并设置自定义系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/index#creating-and-setting-a-custom-system-wide-cryptographic-policy_using-the-system-wide-cryptographic-policies){.link}。
:::
::: section
::: titlepage
# []{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html#proc_setting-a-custom-cryptographic-policy-using-the-crypto-policies-system-role_setting-a-custom-cryptographic-policy-across-systems}使用 Crypto 策略系统角色设置自定义加密策略 {.title}
:::
您可以使用 Crypto Policies 系统角色从单个控制节点配置大量受管节点。
::: itemizedlist
**先决条件**
-   [*访问一个或多个受管节点并获得权限*]{.emphasis}，它们是您要使用
    Crypto 策略系统角色配置的系统。
-   [*对控制节点的访问和权限*]{.emphasis}，这是 Red Hat Ansible Engine
    配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   已安装 Red Hat Ansible Engine
    -   已安装 `rhel-system-roles`{.literal} 软件包
    -   列出受管节点的清单文件。
    :::
:::
::: orderedlist
**流程**
1.  使用以下内容 `playbook.yml`{.literal} 创建新文件：
    ``` screen
    ---