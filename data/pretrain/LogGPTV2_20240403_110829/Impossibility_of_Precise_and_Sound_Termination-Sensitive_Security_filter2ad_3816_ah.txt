if I = [] or a (cid:6)= ch(v) or ch is not an input channel,
if a = ch(v) and ch is an input channel
and I = a : I
(cid:2)
(cid:2)
f (I1, I, ch) =
I
f (I
(cid:2)
1, g(a, I), ch)
I1 = []
I1 = a : I
(cid:2)
1
δ(I1, I) = {ch (cid:13)→ f (I1(ch), I(ch), ch)|ch ∈ dom(I)}. We
assume that I1(ch) = [] if ch (cid:6)∈ dom(I1).
Intuitively, δ(I1, I) is the tail of input stream I after
consuming stream I1.
The proof of the theorem requires a coinduction technique
since the policy to prove talks about inﬁnite streams. We rely
on the following bisimulation for the proof:
Deﬁnition XI.1 (Bisimulation). A Bl is a symmetric relation
on programs such that
(cid:10)I1, P1, μ1, Γ1(cid:11)Bl(cid:10)I2, P2, μ2, Γ2(cid:11) implies that Γ1 (cid:27) μ1 =l μ2∧
= l|I2 and one of the following holds:
Γ2 (cid:27) μ1 =l μ2 ∧ l|I1
1(cid:11) ∧ visiblel(a1) =⇒
(cid:2)
1(cid:11)Bl(cid:10)δ([a2], I2), P
2, Γ(cid:2)
(cid:2)
(cid:2)
2, μ
2(cid:11) ∧
(cid:2)
(cid:2) (cid:10)P
(1)(cid:10)P1, μ1(cid:11) a1
(cid:2)
1, μ
(cid:2) (cid:10)P
2(cid:11) ∧ a1 =l a2 ∧
(cid:10)P2, μ2(cid:11) a2
(cid:2)
(cid:2)
2, μ
(cid:10)δ([a1], I1), P
1, Γ(cid:2)
(cid:2)
(cid:2)
2, O1, O2.Pi, μi(Ii)(cid:2) (cid:10)I
1, μ
i, Oi(cid:11)
∃I
(cid:2)
(cid:2)
1, I
(2)(cid:10)P1, μ1(cid:11) I(cid:2)
(cid:10)P2, μ2(cid:11) I(cid:2)
(cid:10)δ(I
(cid:2)
1, I1), P
∃I
(cid:2)
1, I
(cid:2)
1, μ
2(cid:11) ∧ ¬visiblel(I
(cid:2)
1(cid:11)Bl(cid:10)δ(I
(cid:2)
2, O1, O2.Pi, μi(Ii)(cid:2) (cid:10)I
2, I2), P
i, Oi(cid:11)
(cid:2)
(cid:2) (cid:10)P
(cid:2) (cid:10)P
(cid:2)
2,O2
2, μ
(cid:2)
(cid:2)
1, Γ(cid:2)
1, μ
1,O1
(cid:2)
1, O1) =⇒
(cid:2)
1(cid:11) ∧ ¬visiblel(I
(cid:2)
2, O2)) ∧
(cid:2)
2(cid:11) ∧
(cid:2)
2, Γ(cid:2)
(cid:2)
2, μ
Bisimulation Bl deﬁnes a family of bisimulations. Let ∼ be
the largest of all bisimulations.
A. Auxiliary lemmas
We deﬁne lemmas HIGH and LOW (for the cases of
programs typable as high and low respectively) to state the
invariants that are preserved for typable programs after one
step of execution.
Lemma XI.1 (High). Let l be a security level, μ be a memory,
and I an input. If Γ, τ (cid:27) P : τ
(cid:2) (cid:6)(cid:15) l then
(cid:2)(cid:2)) and τ
, (Γ(cid:2)
, τ
(cid:2)
1) if (cid:10)P, μ(cid:11) a
(cid:2) (cid:10)P
(cid:2)
(cid:2)(cid:11) then ¬visiblel(a)
, μ
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
(cid:2)(cid:2)
, μ
(cid:2) (cid:10)P
(cid:2) (cid:10)P
τ1. Γ1, τ1 (cid:27) P
2) if (cid:10)P, μ(cid:11) a
3) τ (cid:15) τ
4) if (cid:10)P, μ(cid:11) a
(cid:2)(cid:2) (cid:15)
5) for all variable x such that Γ(x) (cid:15) l then Γ(cid:2)(x) = Γ(x).
(cid:2)(cid:11) then Γ(cid:2) (cid:27) μ =l μ
(cid:2)(cid:11) then ∃Γ1, τ1, τ2, η.Γ(cid:2) (cid:15) Γ1 ∧ τ
(cid:2)
, μ
(cid:2) : τ2, η and τ2 (cid:6)(cid:15) l
(cid:2)
by
ch:
Case
input
Proof. By structural induction on P .
output
ch: By
semantics we
(cid:2)(cid:2) = τ and (3) holds and Γ = Γ(cid:2) and
Case skip: By typing τ
(5) holds.
Case x := e: By semantics (cid:10)x := e, μ(cid:11) (cid:2)
(cid:2) (cid:10)skip, μ[x (cid:13)→ v](cid:11)
(cid:2)(cid:2),
(cid:2) and τ = τ
so (1) is satisﬁed. Since by typing Γ(x) = τ
(cid:2) (cid:6)(cid:15), then (2) and (3) are satisﬁed. Item
and by hypothesis τ
(4) is satisﬁed because skip is always typable with any
environments. Finally Γ = Γ(cid:2) for this case so (5) is satisﬁed.
from
semantics
Case
x
(cid:10)input x from ch, μ(cid:11) ch(v)
(cid:2) (cid:10)skip, μ[x (cid:13)→ v](cid:11). By hypothesis
(cid:2) (cid:6)= l and by typing Γ(ch) = τ
(cid:2). Hence, since ¬visiblel(ch)
τ
(cid:2) = Γ(cid:2)(x). Hence μi
holds, item (1) is satisﬁed. By typing τ
and μi[x (cid:13)→ vi] are equal in all variables x st Γ(cid:2)(x) (cid:15) l.
Since μ1 and μ2 are equal in all variables x st Γ(x) (cid:15) l
and by typing Γ and Γ(cid:2) are equal except for x, it follows
that μ1[x (cid:13)→ v1] and μ2[x (cid:13)→ v2] are equal in all variables
x st Γ(cid:2)(x) (cid:15) l and item (2) is satisﬁed. By typing τ
(cid:2)(cid:2) = τ
so item (3) is satisﬁed. Item (4) is satisﬁed because skip is
always typable with any environments. By typing Γ and Γ(cid:2)
(cid:2)(cid:2) (cid:6)=(cid:15) l. Hence item
are equal except for x whose type is τ
(5) is satisﬁed.
to
have
e
(cid:2) (cid:10)skip, μi(cid:11). By typing, Γ(ch) = τ
(cid:10)output e to ch, μi(cid:11) ch(μ(e))
(cid:2)
(cid:2) (cid:6)=(cid:15) so ¬visiblel(ch) of item (2) holds.
and by hypothesis τ
Item (2) holds trivially since memory does not change for
(cid:2)(cid:2). Item (4) is satisﬁed
this step. Item (3) holds because τ = τ
because skip is always typable with any environments. Item
(5) holds trivially because Γ = Γ(cid:2) for this case.
Case if e then P1 else P2: By semantics, we have
(cid:10)if e then P1 else P2, μ(cid:11) (cid:2)
(cid:2) (cid:10)P1, μ(cid:11). Item (1) holds since
¬visiblel((cid:3)) holds. Item (2) holds trivially since memories do
(cid:2)(cid:2) = τ so
not change in this step and =l is reﬂexive. By typing τ
item (3) holds. By hypotheses of if rule in typing, P1 is typable
using Γ and τ. Thus item (4) holds. Finally Γ = Γ(cid:2) so item
(5) holds. The case for (cid:10)if e then P1 else P2, μ(cid:11) (cid:2)
(cid:2) (cid:10)P2, μ(cid:11) is
symmetric.
Case while e do P1: By semantics we have two cases.
Subcase (cid:10)while e do P1, μ(cid:11) (cid:2)
(cid:2) (cid:10)P1; while e do P1, μ(cid:11) Item
(1) holds since ¬visiblel((cid:3)) holds. Item (2) holds trivially
since memories do not change in this step and =l
is re-
(cid:2)(cid:2) = τ (cid:16) τe (cid:16) τP then if τ (cid:6)(cid:15) l then
ﬂexive. By typing τ
(cid:6)(cid:15) l. Hence item (3) holds. By hypothesis, we have
(cid:2)(cid:2)
τ
, τ (cid:16) τe (cid:16) τP ) By typing
that Γ, τ (cid:27) while e do P1 : τ
hypotheses of while we have that (a) ΓP (cid:27) e : τe and
, τP ) and (c) Γ (cid:15) Γ(cid:2) and (d) τ (cid:15) τP
, (Γ(cid:2)
(b) Γ(cid:2)
(cid:2)
(cid:2). In order to type P1; while e do P1
and (e)
using rule SEQ, it is enough to show that the typing judg-
, τ (cid:16) τe (cid:16) τP ) holds.
ment Γ(cid:2)
We show that each hypothesis of the while typing rule is
, τP (cid:27) P1 : τ
τe (cid:15) τ
, τP (cid:27) while e do P1 : τ
, (Γ(cid:2)
, (Γ(cid:2)
(cid:2)
(cid:2)
(cid:2)
, (Γ(cid:2)
(cid:2) and τ
, τP (cid:27) P1 : τ
satisﬁed: By (a) we have that ΓP (cid:27) e : τe. By (b) we
have Γ(cid:2)
, τP ). The third hypothesis of
the typing rule is trivially satisﬁed since we are using the
same environment in the hypothesis and the conclusion. By
(c) the last hypothesis is satisﬁed. Hence (4) holds. Finally,
by inductive hypothesis on P1 (5) holds: we can apply the
(cid:2) (cid:6)(cid:15) l by
hypothesis because by (b) P1 is typable with τ
lemma hypothesis.
Subcase (cid:10)while e do P1, μ(cid:11) (cid:2)
(cid:2) (cid:10)skip, μ(cid:11) Item (1) holds since
¬visiblel((cid:3)) holds. Item (2) holds trivially since memories do
(cid:2)(cid:2) =
not change in this step and =l is reﬂexive. By typing τ
(cid:2)(cid:2) (cid:6)(cid:15) l. Hence item (3) holds.
τ (cid:16) τe (cid:16) τP then if τ (cid:6)(cid:15) l then τ
Item (4) is satisﬁed because skip is always typable with any
environments. By inductive hypothesis on P1 (5) holds.
(cid:2) such
, η, Γ(cid:2)(cid:2)(cid:2)
, τ1, η
, τ1 (cid:27) P2 : τ2, η
(cid:2)(cid:2)(cid:2) (cid:27) P1 : τ1, η and Γ(cid:2)(cid:2)(cid:2)
that Γ(cid:2)(cid:2)
(cid:2) =
(cid:2) where τ
(cid:2) (cid:6)(cid:15) l and τ1 (cid:17) τ2 (cid:15) τ1, τ2 we
τ1 (cid:17) τ2. Since by hypothesis τ
conclude that τ1 (cid:6)(cid:15) l and τ2 (cid:6)(cid:15) l. Thus, we can apply inductive
hypothesis on P1 and P2 to conclude.
Case P1; P2. By the SEQ rule ∃Γ(cid:2)(cid:2)
, τ
, τ
(cid:2)(cid:2)
(cid:2)
Lemma XI.2 (Monotonically increasing termination level).
Let Γ, τ (cid:27) P : τ
Proof. By induction on the length of the typing derivation
tree.
(cid:2)(cid:2)). Then τ ≤ τ
(cid:2) and τ ≤ τ
, (Γ(cid:2)
(cid:2)(cid:2).
, τ
(cid:2)
, (Γ(cid:2)
1) (cid:10)P, μ2(cid:11) a2
(cid:2) (cid:10)P2, μ
2) ∃τ1, τ2, τ
(cid:2)(cid:2)
1 , τ
Lemma XI.3 (Low-1Step). Let l be a security level and μ1, μ2
be memories such that Γ (cid:27) μ1 =l μ2. If Γ, τ (cid:27) P : τ
(cid:2)(cid:2))
and τ
(cid:2) (cid:15) l and (cid:10)P, μ1(cid:11) a1
(cid:2) (cid:10)P1, μ1(cid:11) then
2(cid:11) and Γ(cid:2) (cid:27) μ
(cid:2)
(cid:2)
1 =l μ
(cid:2)(cid:2) (cid:27) Pi
, τ
(cid:2)
2 and a1 =l a2
(cid:2)
i , (Γ(cid:2)
: τ
either one of the following options holds:
(cid:2) ∧ P
(cid:2)
: τ
i
1 (cid:6)= P
(cid:2)
i , (Γ(cid:2)(cid:2)
(cid:2)(cid:2)
i , τ
(cid:2)(cid:2)
2 such that Γ(cid:2)
(cid:2)
2 and
i ) ∧
(cid:2)(cid:2)(cid:2)
(cid:2)(cid:2)
i ) and
i, τ
, τ
(cid:2) ∧ P2 = P
(cid:2)
(cid:2)
2; P
1; P
i (cid:27) P
s.t. Γ(cid:2)
(cid:2)(cid:2)
(cid:2)(cid:2)(cid:2)
(cid:2)(cid:2)(cid:2)
i, τ
1 , τ
2
i(cid:11) and I1|l = I2|l.
(cid:2)
(cid:2)
i, O
a) P1 = P2
b) P1 = P
∃τ
(cid:2)
(cid:2)