to the less-than and greater-than chains.
An example of this extended TST is depicted in Figure 6.
In addition to the basic TST structure, we have two types
of nodes, representing partial and complete matches, respec-
tively. Nodes that represent partial matches link preﬁx (pf )
and substring (ss) constraints. Nodes that represent com-
plete matches link equals (=), less-than (), and suﬃx (sf ) operators. Nodes representing complete
matches are also cross linked through two singly-linked lists
representing the chains of less-than and greater-than oper-
ators. They link every complete match node to the nearest
less-than or greater-than constraint. The less-than chain is
depicted in Figure 6 using a dashed line. For sake of clarity,
only the less-than chain is shown.
The lookup function starts from the ﬁrst character of the
input string, and uses a slightly modiﬁed TST lookup sub-
function. This subfunction recognizes partial matches along
the path through the TST, in addition to ﬁnal, complete
matches. When a partial-match node is reached, the func-
tion returns the preﬁx constraint and/or the substring con-
straint associated with that partial match. The function also
returns a pointer to the corresponding internal node and
a pointer to the position reached within the input string.
These two pointers can then be passed to the same lookup
function to continue the search from the previous partial
match node. At some point, this process will terminate,
either because it cannot move forward in the TST and/or
because it has reached the end of the input string. If the
ﬁnal node touched by the lookup process is a leaf node of
the TST (i.e., if it contains the terminator character #),
then the lookup function returns the corresponding equal-
ity, inequality, and suﬃx constraints. If the terminal node
is not a leaf (i.e., if no complete match was found), then the
lookup function backtracks to the two closest leaf nodes, one
preceding and the other following the ﬁnal node in alphabet-
ical order. From a matching ﬁnal node or from the closest
matching nodes, the lookup function can immediately jump
onto the less-than and greater-than chains, reaching one-by-
one all the matching less-than and greater-than constraints.
The lookup process is then repeated for each character
of the input string, ignoring preﬁx, equality, less-than, and
greater-than operators. This iteration allows us to identify
all the substring and suﬃx constraints.
The complexity of the complete lookup function is on the
order of l times the complexity of a TST search plus the size
of the output—that is, O(l(logN +l)+|result|, where l is the
length of the input string, and N is the number of strings
in the TST.
4.3 Exploiting Attribute Selectivity
Intuitively, we can save time in processing a message if
we can eliminate interfaces from consideration as soon as
possible. Eliminating an interface can mean eliminating the
evaluation of potentially many ﬁlters, and in turn, poten-
tially many constraints. We can see that our counting algo-
rithm already succeeds in doing this to a certain degree, by
making use of the set of matched interfaces, as described in
Section 4.1.
However, we can go further than this, based on the fol-
lowing reasoning. Let us call an attribute name a the de-
#
r
r
pf
ss
d
e
#
w
pf
ss
n
g
o
pf
ss
e
r
#
a
n
p
e
x
#
h
n
p
i
z
e
t
a
#
#
pf
ss
#
x
y
#
constraints
operator
pf
ss
=
>
=
=
>
sf
=
 counters := ∅
set ifs to ignore := all ifs − B
ifs to ignore := ifs to ignore − pre process(m)
foreach a in m {
set C = matching constraints(T,a)
foreach c in C {
foreach f in c.ﬁlters {
if f.interface ∈ ifs to ignore {
if f (cid:9)∈ counters
counters := counters ∪ (cid:11)f,0(cid:12)
counters[f] := counters[f] + 1
if counters[f] = f.size {
output(m,f.interface)
ifs to ignore := ifs to ignore ∪ {f.interface}
if |ifs to ignore| = total interface count
return } } } } }
}
map> selectivity
int pre processing rounds
proc pre process(m) {
set result = ∅
int rounds = pre processing rounds
foreach (cid:11)a,s(cid:12) in selectivity {
return result
if rounds = 0
rounds := rounds − 1
if a (cid:9)∈ m {
result := result ∪ s
if |result| = total interface count
return result
} }
return result
}
Figure 7: Pseudocode of the Forwarding Algorithm with Selectivity Table and Pre-Processing
publish/subscribe communication pattern.
we present the results of our evaluation.1
5.1 Experimental Setup and Parameters
In this section
We implemented our algorithm in C++ and ran all the
experiments on a 950Mhz computer with 512Mb of main
memory. In addition to the main algorithm and data struc-
tures, we created some auxiliary programs to generate pa-
rameterized loads of ﬁlters and messages.
In particular,
we have identiﬁed and used the parameters listed in Ta-
ble 1. We performed all the experiments with 100 messages
(M = 100), each one having between 1 and 19 attributes
(al = 1,ah = 19, and an average a = 10).
M number of messages
al, ah
I
fl, fh
cl, ch
Da
Dc
Dt
Dos
Doi
Ds
Di
number of attributes per message, uniform in
[al, ah) range
number of interfaces (= number of predicates)
number of ﬁlters per interface, uniform in [fl, fh)
range
number of constraints per ﬁlter, uniform in
[cl, ch) range
distribution function for attribute names
distribution function for constraint names
distribution function for data types in both ﬁl-
ters and messages
distribution function for operators in string con-
straints
distribution function for operators in integer
constraints
distribution function for string values in both
ﬁlters and messages
distribution function for integer values in both
ﬁlters and messages
Table 1: Scenario Deﬁnition Parameters
Roughly speaking, the primary measure of scalability is
the “size” of the forwarding table, which is well characterized
1Our implementation and workload generator are available on line
at http://www.cs.colorado.edu/serl/cbn/forwarding/.
2 (fl + fh − 1) and c = 1
by the total number of elementary constraints C ≈ I × f × c,
2 (cl + ch − 1). We
where f = 1
experimented with forwarding tables of up to ﬁve million
constraints, distributed in various ways among ﬁlters, and
ﬁlters among interfaces. Speciﬁcally, we ﬁxed the range of
constraints per ﬁlter, with cl = 1 and ch = 10, and we
used diﬀerent numbers of interfaces I and diﬀerent ratios
of ﬁlters per interface, maintaining fl = 1 and varying fh.
The choice of a ﬁxed range of constraints per ﬁlter, with an
average of ﬁve constraints per ﬁlter, is based on practical
considerations on the type of ﬁlters we expect to be posed
by typical end users. The number of interfaces I gives an
indication of the characteristics of a router, its position, and
it role in the larger content-based network. The resulting
total number of ﬁlters F = I × 1
2 fh is a rough measure of
the total size of the network in terms of nodes and end users,
and therefore an important measure of scalability.
For attribute names, we experimented with a set of 1000
elements (|Da| = 1000). In order to use realistic names, we
composed our sample sets by selecting random words out
of a common dictionary, and we weighted our set of names
using a Zipf distribution. We then used the same set of
words for both attributes in messages and constraints in ﬁl-
ters (and therefore Dc = Da). Notice that while this may be
a simpliﬁcation in deﬁning the experiments, in fact it pro-
duces the most challenging scenarios for a forwarding algo-
rithm. The reason is that having two completely overlapping
sets of names maximizes the chances of having matching at-
tributes and constraints. In the opposite, extreme case of
two completely disjoint name sets (one for attributes, and
one for constraints) there would be no matches at all, and
the time complexity for the forwarding algorithm would be
O(a log C).
For attribute values, we used a combination of dictionary
values for strings and a range for integers. For strings, we
compiled a list of words by extracting 1000 words from the
dictionary. For integer values we used a range of 100 values.
For both integers and strings, we used a uniform distribu-
tion to select values. We used the same distribution of string
and integer values for both the values in messages and the
values in constraints. Notice once again that having a uni-
ﬁed set of values increases the possibilities of having positive
matches between constraints and attributes, thereby adding
complexity to the matching process.
For attribute types and constraint types we used the same
distribution Dt: 50% strings and 50% integers. For opera-
tors in integer constraints, the distribution Doi was 60%
equality, 20% less-than, and 20% greater-than. Finally, for
operators in string constraints, the distribution Dos was 35%
equality, 15% preﬁx, 15% suﬃx, 15% substring, 10% less-
than, and 10% greater-than.
5.2 Basic Results
Figures 8 and 9 show a summary of the results of our ex-
periments. The graphs show the matching time per message
over the total number of constraints in the forwarding table,
which ranges from a few hundred to over ﬁve million. Every
graph shows pairs of curves, representing the cases with no
selectivity table pre-processing rounds (r = 0) and with 10
rounds (r = 10), respectively.
)
s
m
(
e
m
i
i
t
g
n
h
c
t
a
m
350
300
250
200
150
100
50
0
0
matching time per message (I=F)
r=10
r=0
0.5
1
1.5
2
2.5
3