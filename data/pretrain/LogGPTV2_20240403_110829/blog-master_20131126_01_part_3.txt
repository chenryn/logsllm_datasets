=1)  
   Output: id, info, crt_time  
   Buffers: shared read=94393  
 Total runtime: 3065.989 ms  
(4 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.036..2039.643 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=32 read=94361  
 Total runtime: 3066.841 ms  
(4 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.034..2039.005 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=64 read=94329  
 Total runtime: 3066.746 ms  
(4 rows)  
```  
```  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
24829**94417**3277  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
24829**94361**3272  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
24829**94329**3273  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
```  
每次IO响应时间降到了3273纳秒左右, 几乎下降了一半.  
最后把STAP的亲和设置为4, (与postgres进程分开使用物理CPU)那么会怎么样呢?  
```  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.055..2032.953 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=96 read=94297  
 Total runtime: 3059.635 ms  
(4 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.044..2034.114 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=128 read=94265  
 Total runtime: 3060.832 ms  
(4 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.043..2038.548 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=160 read=94233  
 Total runtime: 3065.674 ms  
(4 rows)  
```  
测得的IO响应时间又有了一定的下降, 说明还是有一定效果的. 但是相比不使用CPU 0 这里显得效果比较弱了.  
```  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
24829**94297**3194  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
24829**94265**3200  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
24829**94233**3195  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;pid:24829  
```  
最后在附一个未开启stap得到的结果.  
```  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.037..1812.712 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=192 read=94201  
 Total runtime: 2833.760 ms  
(4 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.038..1814.074 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=224 read=94169  
 Total runtime: 2835.363 ms  
(4 rows)  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                               QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------  
----  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..195393.00 rows=10100000 width=45) (actual time=0.039..1814.641 rows=10100000 loops  
=1)  
   Output: id, info, crt_time  
   Buffers: shared hit=256 read=94137  
 Total runtime: 2840.508 ms  
(4 rows)  
```  
stap开启后, 查询时间长了220毫秒左右. 本文中每个handler带来的额外开销是 :   
```  
digoal=# select 220/94137.0;  
        ?column?          
------------------------  
 0.00233701945037551653  
(1 row)  
```  
0.002337毫秒.   
2337纳秒.  
使用numactl也可以绑定进程的物理CPU核。  
## 参考  
1\. man taskset , man numactl  
2\. https://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/main-cpu.html  
3\. http://docs.mongodb.org/manual/administration/production-notes/#mongodb-on-numa-hardware  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")