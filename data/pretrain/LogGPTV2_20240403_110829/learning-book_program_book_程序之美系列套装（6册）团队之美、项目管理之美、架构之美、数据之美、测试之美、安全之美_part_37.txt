在探索用例法的过程中我就像是刘易斯（也可能是克拉克）。我
们不知道此前有谁使用过用例法，所以我尽可能地当好先锋。在化
学家找到节奏并开始取得进步后，另外一位分析人员也旁听了我们
的讨论会，观察我们的方法并考虑着如何让这个方法适用于自已的
用户组。Janet和Devon用类似的风格组织了他们的讨论会并与用户
一起取得了不错的进展。我们三位分析人员是独立工作的，但是我
们相互分享经验和领悟的东西，这样我们都能够更好地工作。如果
能够看看同事们的工作方式并学习他们的经验，所有软件团队成员
的工作都能变得更有效。
201
---
## Page 203
用例是不够的
在检查从用例讨论会上得到的工作产品时，我意识到在描述用户如
何与CTS交互来实现不同的目标方面，我们的工作做得很好。也就
是说，用例法是描述用户需求的好方法。但是，用例似乎无法提供
程序员在系统中实现那些功能所需的所有信息。另外，把信息包装
成一个个小部分，对于并发人员来说也不是理想的处理方式。我们
认为在需求收集活动中，只有用例这种交付物是不够的。
为了进入下一级，需要根据每个用例得出相关的功能需求。我以前
是并发人员，理解并发人员实现的不是用例。并发人员实现的是特
定的系统行为一一功能需求。系统行为作为一个整体，能够让用户
执行用例。这样，在每次用例讨论会之后，我都会分析收集到的信
息并开始形成软件需求规格说明书（SRS）。对于每个用例，我都
会写一套功能需求，如果实现了这些功能需求，那么就能够让用户
完成在用例中描述的目标。
有些功能相当简明，特别是有关用户和系统之间交互的对话。但
是，可以从用例描述中推导出其他并不明显的功能。例如，如果前
置条件不满足，那么对于系统应当做些什么，用例的前置条件将无
法给出任何线索。某些必须由系统执行的操作对于用户来说是不可
见的，所以在用例中没有描述这些操作。与简单地给程序员一堆用
例并且说“做完后给我打电话"的处理方式相比，这些功能规格说明
能够向程序员提供更丰富的、对预期的系统行为的描述。
除了功能之外
人们似乎从痛苦的经历中能够学到最好的经验。我回想起了此前做
的一个项目，我们在描述功能方面做得非常好，但是没有明确挖掘
用户对质量的期望。结果，因为新发布的系统在系统效率、可用
性、可移植行和其他特征之间的权衡做得不够理想，所以遭到了严
重的抵触。我们不想再重复那段令人不愉快的经历，所以决定将质
量属性需求也作为CTS需求的一部分进行讨论。
质量属性描述的不是系统要做些什么一—这是功能说明所描述的，
而是描述系统能够多么好地完成它所做的事情。质量属性包括可用
性、可移植性、可维护性、易安装性、可用性、性能、效率、健壮
性和安全性。用户对于这些质量特征有一些隐含的期望。遗憾的
202
---
## Page 204
是，用户常常不会自发地表达他们的期望。他们很滩以一种对架构
师和并发人员有帮助的方式来理清他们对质量的期望。
简单地问问用户“你们对健壮性的需求是什么”，这种方式是不太可
能得出有用的信息的。所以我们采用了一种不同的方法。我们考虑
“健壮性”对于用户来说可能意味着什么，然后写了一些问题来帮助
他们考虑健壮性的某些方面。举一个例子，“在提交新的化学制品
订单时，如果中途出现网络连接故障，你认为系统应当做些什
么？"对于其他可能对系统成功有重要影响的质量属性我们也采取
了同样的方法。我们这些分析人员要求用户团队回答这些问题，从
他们的角度对每个属性的相对重要程度进行评级。这种模式帮助我
们确定系统的哪些部分重要，以及哪些部分重要程度稍低。那些质
量属性需求进入到了我们的SRS中，说到如何来满足客户，质量属
性的重要性一点都不比功能说明差。
游戏规则
在一次收集需求的讨论会上，化学家们讨论了一个叫做"查看储存
请求"的用例。后备小组的一位成员说道：“我不想查看Sarah的化学
制品请求，Sarah也不应当看到我的请求。”化学家们都认为这个策
略很好。我们把它作为一个业务规则记录下来。业务规则司以有各
种来源：
：公司、组织或项目的策略，例如访问信息系统的安全策略
，法律法规，例如如何编写处理与销毁化学制品的报告
业界标准，例如输入和输出化学制品体系的文件格式
：计算的算法，比如确定从单一供应商那里大量采购时的价格折扣
业务规则本身不在软件需求内。但是，规则可能是必须要实现的功
能的来源，这样系统才能与政策保持一致或服从政策。约束哪些人
证用户权限。在需求收集讨论会上，每一个用户类识别出（或发
明）了很多业务规则。这些规则有助于建立一个框架，确保软件工
程师在规则内发挥。
编写代码之前先做测试？你疯了吗？
203
---
## Page 205
需求完全是用来描述在完成系统后能够得到些什么。但是当我在一
次讨论会上使用活动挂图时我意外地发现一个情况。在用例的思考
过程似乎能够很自然地识别出测试用例，这些测试用例可以告诉我
们实际开发的东西是否和我们打算开发的一致。此前我从未听说过
在用例和测试用例之间的这种关联，但是毫无疑问，我觉得这种关
联是有意义的。
于是，我开始从用例描述中编写测试用例，不过考虑的不是如何实
现用例，而是考虑如何识别出用例是否可以正确地实现。这些是概
念性的测试，与实现方式及用户界面细节无关。
在编写这些测试用例的过程中，我发现用例中有一些错误。这是另
外一个让人得意的时刻。也许我可以利用这些概念性的测试，在需
求过程中尽早部署，在设计或构造活动远未开始的时候就发现错
误！
我在这方面继续努力着。前面说过，我从用例描述得到了功能需
求。理论上，如果一个并发人员实现了那个功能，用户就可以执行
那个用例。现在我可以使用不同的思考过程从同样的用例中导出测
试用例，我把那些测试用例与我的功能需求做了对比，想要知道两
件事：
：测试用例覆盖了每个功能需求吗？
如果快速编写一系列特定的功能需求，是否能够把每个测试用例
都“执行”一次？当我复查这个分析结果的时候，发现一些丢失的、
不正确的和没有必要存在的需求。有些是因为使用用例法的问题，
有些是在把用例分解为功能段时出现的问题。同时我还发现了丢失
的、不正确的和没有必要存在的测试用例。在修复了所有这些问题
后，对于需求的正确性，我更加自信了。
我也认识到，如果由不同的人从不同的头脑中各自从每个用例中推
导出功能需求和测试用例，那么结果还要更好一些。结果之间的不
连贯将表明用例中的模糊和遗漏会导致不同的解释。我现在知道在
编写了最初的需求后能够立即开始测试软件应用程序。这种方法肯
定比到了最后再做测试然后再花费大量时间和金钱修复由需求引起
的错误要好。我邀请产品代言人Sarah审核我为化学家的用例所编写
的测试用例。她进一步提出了需要更正和改进的地方。在最后一次
讨论会上，所有6名化学家代表都走查了测试用例，确保大家所想
204
---
## Page 206
象的CTS将来的工作方式都是一样的。对于屏幕的外观我们都有不
同的想法，在进一步设计的时候我们会考虑的。不过现在，我们可
以很自信地说，对于CTS将要提供给化学家们的功能，我们都有着
相同的期望和理解。
第3幕：帮我看看
在这一幕中，我们做了很多同行评审，尽可能多地找出需求错误。
如果只是简单地把分析人员在访谈或讨论会上听到的需求记录下
来，并不足以保证需求的正确性。可能存在很多交流错误或误解，
所以在需求开发过程中进行验证是一个非常必要的步骤。同行评审
是找出需求错误最有力的手段之一。在同行评审中，工作产品作者
之外的人检查工作产品，找出可能的缺陷及改进机会。
同行评审是一种静态测试，在动手开始编写代码之前可以把需求中
存在的问题过滤掉。通过评审的方式，用户可以确保他们的意见被
正确地解释、记录。通过评审还可以检测模糊的需求，帮助所有的
利益相关者就需求所表达的意思达成一致的理解。如果在软件项目
中只能执行一个质量实践，那么这种实践应当是对所有需求信息正
式的同行评审（也叫做审查）。考虑到同行评审的强大作用，我们
在需求活动中引入了两种评审方式：非正式评审和正式评审。
非正式的风格
在每一次用例收集讨论会之后，分析人员都会把他创建的文档提供
给参与讨论会的人。这类文档包括用例、编写的部分SRS、图形分
析模型、数据定义和讨论会上获得的其他信息。然后由讨论会的参
与者自已对这些材料进行非正式的检查，查找遗漏、错误、误解和
其他问题。
按照这种方式，我们找到了很多问题！有时候，分析人员误解了某
些东西或在需求中加入了他自己错误的解释，这些都是用户能够发
现并校正的。还有一些情况中，用户发现我们忽略了用例的替代流
程。或者发现某个错误条件应当采取一种与我们并始设想的方法不
同的方法来处理。有时对需求的评审激发出了用户的想法，他们可
能会发现一些其他有用的功能。这些独特的、增量的、非正式的和
低成本的评审极大地提高了我们这个不断增长的需求信息的质量。
我们发现的那些问题所属的类型也能告诉我们在后面的需求收集和
205
---
## Page 207
规格说明活动中如何提高质量。此外，评审过程提供了明确的证
据，告诉Paul和项目的其他利益相关者，在理解并记录他们对于
CTS的需求方面，我们取得了实实在在的进展。
团队中的分析人员尝试了不同的评审方法。我和化学家们每周举行
一次讨论会。在每次讨论会后的两关内我都会向产品代言人和支持
团队的成员提交我写好的讨论会产出物。通过对这些材料的评审，
可以帮助那些错过讨论会的人跟上进度。我的几位用户在查找错误
方面做得非常好，他们在下一次讨论会开始的时候会把发现的问题
告诉我。
我们的经验最少的分析师Devon采取了一个不同的思路。他和用户
每天进行一次讨论会，这样他必须尽快写好讨论会信息，让业务代
表在第二天的会议开始之前进行检查。这在时间上给参与者造成了
很大的压力。更严重的是，Devon报告说他的用户没有发现太多问
题。遗憾的是，需求中是存在问题的，只是评审人没有发现多少。
从中得到的观察结果是，如果你在认真考虑过一篇文档后（你可能
是创建文档的作者，也可能是作为讨论会的参与者参与了文档的编
写）很快就对它进行评审，你实际上并没有在评审文档一—你只是
在脑子里把它又背了一遍。如果在重新看这些文档之前没有一定的
“缓冲时间”，是不大可能发现问题的。反之，如果等上一两天后再
回来看一篇文档，在这段时间你的短期记忆已经消退，你会以一个
全新的视角来看待。你更有可能发现不连贯的、遗漏的地方和其他
问题。可能你在过去的几关中反复思考过，对于如何提高最初的工
作已经有些想法了。在认识到这一点后，我总是设法在评审之前把
自己写的东西在一旁放上至少24个小时。与编写之后立即进行评审
相比，这种方式能够让我以更锐利的眼光看待文档。
正式的风格
我在上一节提到的个人类型的、非正式的评审称为轮查。我们的轮
查带来很多改进，但是无法代替更为严格的、一种被称为审查的团
队同行评审。在审查中，儿位参与者各自检查工作产品，然后在会
议上提出自已的观察和问题。在审查会议上的交流过程中，常常会
发现一些审查人在各自的准备过程中没有发现的问题。
对于需求规格说明书，审查还能带来另外一个好处：能够发现模糊
的地方。不同的读者（有时候甚至是同一位读者）对于模糊的需求
206
---
## Page 208