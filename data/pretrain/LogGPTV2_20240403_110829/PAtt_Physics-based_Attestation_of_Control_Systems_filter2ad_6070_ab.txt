and the received nonce from the veriﬁer). If the hash function
is also able to cover the ﬁrmware memory space, that region
should be included in the hash as well. We note that in our
implementation, the speciﬁc PLC used is only able to cover
logic accessible memory areas, and thus not the RTOS.
3) Derivation of Actuation Strategy, and Execution of
Path. The cryptographic hash generated in the previous step
is then encoded to an actuation strategy for the actuator con-
trolled by the PLC. The intuition is that the execution of
such strategies will (deterministically) create sensor readings
unique for the physical process. To not impede on normal
process operations, the actuation strategy should essentially
represent an alternative way to reaching the normal opera-
tional goal of the process, without violating safety constraints.
Additional details on the derivation of the actuation strategy
are provided in the following subsections.
4) Veriﬁcation of Hash and Measurements. Each physical
process is unique, which will be reﬂected in a process-speciﬁc
noise signal in all reported sensor values. In PAtt, the veriﬁer
knows the unique noise signature of all prover devices and
can, therefore, identify all PLCs and the connected physical
systems based on the sensor readings transmitted during at-
testation, i.e., the attested PLC is authenticated in the process
through the reported sensor values. This noise includes any
source of random noise e.g., the noise of the system, manu-
facturing imperfections, and differences. This ensures that the
reported sensor values authenticate the attestation report. In
Section 3.4, we propose to use machine learning techniques
to compute the classiﬁer prediction probability. Along with
decoding the hash, we use the classiﬁer prediction probability
as a weight to compute the weighted distance between the
reconstructed hash and the original hash. We describe the
implementation details of the hash veriﬁcation in Section 4.
(cid:11)(cid:15)(cid:24)(cid:19)(cid:16)(cid:19)(cid:15)(cid:24)
(cid:8)(cid:24)(cid:23)(cid:28)(cid:15)(cid:24)
(cid:8)(cid:18)(cid:29)(cid:25)(cid:19)(cid:13)(cid:12)(cid:20)(cid:1)(cid:10)(cid:29)(cid:25)(cid:26)(cid:15)(cid:21)
(cid:22)(cid:23)(cid:22)(cid:13)(cid:15)
(cid:7)(cid:2)(cid:22)(cid:23)(cid:22)(cid:13)(cid:15)(cid:4)(cid:21)(cid:15)(cid:21)(cid:23)(cid:24)(cid:29)(cid:3)
(cid:9)(cid:15)(cid:12)(cid:14)(cid:19)(cid:22)(cid:17)(cid:2)(cid:5)(cid:3)
(cid:30)
(cid:9)(cid:15)(cid:12)(cid:14)(cid:19)(cid:22)(cid:17)(cid:2)(cid:21)(cid:3)
(cid:30)
(cid:5)
(cid:1)
(cid:6)
(cid:7)
(cid:5)
(cid:9)
(cid:3)
(cid:8)
(cid:4)
(cid:9)
(cid:2)
(cid:30)
(cid:7)(cid:2)(cid:22)(cid:23)(cid:22)(cid:13)(cid:15)(cid:4)(cid:21)(cid:15)(cid:21)(cid:23)(cid:24)(cid:29)(cid:3)
(cid:6)(cid:13)(cid:26)(cid:27)(cid:12)(cid:26)(cid:19)(cid:23)(cid:22)(cid:1)(cid:10)(cid:26)(cid:24)(cid:12)(cid:26)(cid:15)(cid:17)(cid:29)
(cid:6)(cid:13)(cid:26)(cid:27)(cid:12)(cid:26)(cid:19)(cid:23)(cid:22)(cid:2)(cid:5)(cid:3)
(cid:30)(cid:6)(cid:13)(cid:26)(cid:27)(cid:12)(cid:26)(cid:19)(cid:23)(cid:22)(cid:2)(cid:21)(cid:3)
(cid:30)
Figure 2: Interaction sequence of the veriﬁer, the prover, and
the physical system during attestation.
3.3 Generation of Actuation Strategy
We now discuss how the hash value of the logic-accessible
memory areas and the nonce can be interpreted as an actuation
strategy. In general, we assume that the cryptographic hash
has length m bits. Assuming that there are two different poten-
tial actuation actions (e.g., a move horizontally or vertically),
we interpret the hash as a sequence of those binary actuation
commands, with m commands being executed per iteration.
Figure 2 shows the interaction sequences of the veriﬁer, PLC,
and the physical process during the remote attestation process.
We now provide additional details on individual commands
in the strategy (which we call micro-commands).
Macro-commands
and Micro-commands. Macro-
commands are abstract movements to reach a goal from the
start. The macro-command can be executed by different
sequences of micro-commands (called a path strategy).
Consider the following example: a robot arm with three
stepper motors, which when actuated together will change the
arm hand position in the x, or y, or z directions. The designed
control logic of the robot arm will traverse the arm hand from
the position (x0,y0,z0) to the position (x1,y1,z1). We deﬁne
the macro-command as move from (x0,y0,z0) to the position
(x1,y1,z1). The coordinate system is scaled such that each
micro-command moves the arm by one unit (in particular, the
arm does not move diagonally).
Path Strategy. Continuing our example, the path strategy
now determines the sequence of micro-commands to execute
the macro-command. To simplify things, we only consider
micro-commands in direction x and y (and always use the
same z direction commands). The arm hand will start from
(x0,y0,z0) and takes x1− x0 steps towards the x direction, and
y1 − y0 steps towards the y direction. Thus, the total number
of steps (or micro-commands) is (x1 − x0) + (y1 − y0). The
order of micro-commands is deﬁned by the path strategy.
We represent the path strategy as a binary vector (which
we call a coding), with a micro-command in x-axis direc-
tion represented by a 0 bit, a micro-command in y-axis direc-
tion represented by a 1 bit. For example, our robot arm goal
168          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationmight be to take ﬁve steps in the x direction and to take three
steps in the y direction. Two possible path strategies could
be 10100010, and 00000111. Figure 8 in Appendices 10.4
shows an example path strategy. We know that the number of
unique paths u in a x×y grid can be computed as follows [57]:
u =
(x + y)!
(x!y!)
(1)
Thus, we can enumerate all possible paths, and use an
integer between 1 and u as an index to represent a speciﬁc
path strategy in a x× y grid. In PAtt, this index is a random
number resulting from the software attestation phase (i.e., the
resulting cryptographic hash is interpreted as integer). The
micro-commands of the chosen actuation strategy is then
executed, and sensor readings are recorded to be sent as part
of the attestation response.
3.4 Veriﬁcation of the Measurement Traces
In the veriﬁcation phase, the Veriﬁer checks that the hash
received from the Prover was derived from correct PLC logic
and the nonce, and that the sensor measurements ﬁt the spe-
ciﬁc physical process and hash. If the last step is successful,
the Veriﬁer has attested the integrity of the logic on the PLC.
Hash veriﬁcation. As the Veriﬁer has access to the logic that
is supposed to run on the PLC (and the nonce), it is easy to
check if the hash is correct. In particular, the Veriﬁer computes
the hash locally and compares with the received hash.
Replay Attack Detection. Next, the Veriﬁer has to ensure
that the received sensor reading sequence ﬁts the received
hash (which we call decoding) and that the sensor reading
sequence was not spoofed (e.g., by simulation of the physical
process or replay attack). The decoding process is designed to
translate the sensor readings to the original hashes considering
the physical behavior of the system and its non-deterministic
noise. The features available are the actual sensor reading
traces and information on the physical process (e.g., statistical
properties of noise from the sensors) that were measured
during the setup phase of the system. The decoding can be
done by signal processing techniques (e.g., matched ﬁlters that
detect movements and reconstruct the actuation strategy/hash),
or machine learning approaches. The detection of replayed
sensor traces can similarly be performed by statistical analysis,
signal processing techniques, or machine learning.
3.5 Security Analysis
As the hash received is a result of weak software-based attes-
tation, the veriﬁer also needs to check if the hash was received
within a speciﬁc time window. In particular, we need to pre-
vent a compromised PLC from sharing the received challenge
with a third party oracle that would provide the correct hash.
As PLCs are only able to send and received messages synchro-
nized with scan cycles, we use two scan cycles as a maximal
(cid:15)(cid:31)(cid:18)(cid:25)(cid:28)(cid:25)(cid:28)(cid:23)
(cid:13)(cid:12)(cid:1)
(cid:27)(cid:29)(cid:20)(cid:21)(cid:26)
(cid:15)(cid:31)(cid:18)(cid:25)(cid:28)(cid:25)(cid:28)(cid:23)
(cid:11)(cid:20)(cid:32)(cid:29)(cid:21)(cid:15)(cid:13)(cid:23)(cid:1)(cid:7)(cid:17)(cid:13)(cid:30)(cid:31)(cid:28)(cid:17)(cid:29)(cid:1)(cid:2)(cid:1)(cid:8)(cid:13)(cid:29)(cid:20)
(cid:10)(cid:21)(cid:18)(cid:33)(cid:34)(cid:31)(cid:21)(cid:1)
(cid:9)(cid:35)(cid:33)(cid:31)(cid:18)(cid:19)(cid:33)(cid:25)(cid:29)(cid:28)
(cid:5)(cid:20)(cid:31)(cid:25)(cid:22)(cid:1)(cid:26)(cid:18)(cid:1)(cid:12)(cid:17)(cid:13)(cid:16)(cid:21)(cid:25)(cid:19)(cid:29)(cid:1)(cid:2)(cid:1)(cid:8)(cid:13)(cid:29)(cid:20)
(cid:16)(cid:21)(cid:31)(cid:25)(cid:22)(cid:25)(cid:21)(cid:31)
(cid:7)(cid:26)(cid:18)(cid:32)(cid:32)(cid:25)(cid:22)(cid:25)(cid:19)(cid:18)(cid:33)(cid:25)(cid:29)(cid:28)
(cid:8)(cid:21)(cid:33)(cid:21)(cid:19)(cid:33)(cid:25)(cid:29)(cid:28)
(cid:7)(cid:26)(cid:18)(cid:32)(cid:32)(cid:25)(cid:22)(cid:25)(cid:19)(cid:18)(cid:33)(cid:25)(cid:29)(cid:28)
(cid:8)(cid:13)(cid:29)(cid:20)(cid:33)
(cid:14)(cid:29)(cid:32)(cid:33)(cid:30)(cid:31)(cid:29)(cid:19)(cid:21)(cid:32)(cid:32)(cid:25)(cid:28)(cid:23)
(cid:11)(cid:20)(cid:32)(cid:29)(cid:21)(cid:15)(cid:13)(cid:23)(cid:1)(cid:7)(cid:17)(cid:13)(cid:30)(cid:31)(cid:28)(cid:17)(cid:29)
(cid:10)(cid:21)(cid:18)(cid:33)(cid:34)(cid:31)(cid:21)(cid:1)
(cid:9)(cid:35)(cid:33)(cid:31)(cid:18)(cid:19)(cid:33)(cid:25)(cid:29)(cid:28)
(cid:5)(cid:20)(cid:31)(cid:25)(cid:22)(cid:1)(cid:26)(cid:18)(cid:1)(cid:12)(cid:17)(cid:13)(cid:16)(cid:21)(cid:25)(cid:19)(cid:29)
(cid:8)(cid:13)(cid:29)(cid:20)(cid:33)(cid:1)(cid:2)(cid:1)(cid:11)(cid:28)(cid:17)(cid:16)(cid:21)(cid:15)(cid:30)(cid:21)(cid:26)(cid:25)(cid:1)
(cid:11)(cid:28)(cid:26)(cid:14)(cid:13)(cid:14)(cid:21)(cid:23)(cid:21)(cid:30)(cid:32)
(cid:17)(cid:24)(cid:18)(cid:27)(cid:5)(cid:2)(cid:11)(cid:18)(cid:32)(cid:24)(cid:4)(cid:11)(cid:18)(cid:32)(cid:24)(cid:36)(cid:3)
(cid:17)(cid:11)(cid:18)(cid:27)(cid:5)(cid:1)(cid:6)(cid:1)(cid:1)
(cid:14)(cid:31)(cid:21)(cid:30)(cid:31)(cid:29)(cid:19)(cid:21)(cid:32)(cid:32)
(cid:14)(cid:31)(cid:21)(cid:30)(cid:31)(cid:29)(cid:19)(cid:21)(cid:32)(cid:32)
(cid:6)(cid:4)(cid:1)(cid:26)(cid:18)(cid:1)(cid:9)(cid:26)(cid:28)(cid:24)(cid:13)(cid:23)(cid:1)(cid:10)(cid:27)(cid:17)(cid:28)(cid:13)(cid:30)(cid:21)(cid:26)(cid:25)(cid:1)
(cid:6)(cid:13)(cid:30)(cid:13)(cid:1)(cid:12)(cid:17)(cid:13)(cid:16)(cid:21)(cid:25)(cid:19)(cid:29)(cid:1)(cid:2)(cid:1)(cid:8)(cid:13)(cid:29)(cid:20)
(cid:12)(cid:17)(cid:13)(cid:23)(cid:3)(cid:30)(cid:21)(cid:24)(cid:17)
(cid:6)(cid:13)(cid:30)(cid:13)(cid:1)(cid:12)(cid:17)(cid:13)(cid:16)(cid:21)(cid:25)(cid:19)(cid:29)
(cid:14)(cid:12)(cid:7)
Figure 3: Overview of the validation process in the Veriﬁer.
delay to provide the hash (in the ﬁrst scan cycle, a challenge
is received, and in the second the hash is computed and sent
to the Veriﬁer). In our implementation, scan cycles are 10ms
long, so the maximal delay to provide the hash is 20ms.
Full replays of earlier actuation sequences are not feasible
for the attacker, as she would need to eavesdrop and store a
signiﬁcant share of the hash space (i.e., actuation space and
its corresponding sensor readings) in order to reliably be able
to perform the replay attack. As the hash contains a fresh
nonce, and the hash itself has 256-bit length, we consider this
infeasible. As an example, a SIEMENS S7-1200 PLC might
have work memory up to 125 Kilobytes, and load memory up
to 4 Megabytes. A single trace of sensor readings of a single
SHA-256 hash will require more than 300 Kilobytes, hence,
storing the possible hashes inside the PLC is infeasible. As we
will show in Section 5, in practice our decoding solution was
able to detect attacks that could be produced on constrained
devices such as PLCs, so there we are able to do both decoding
and spooﬁng detection in one step.
4
Implementation
In this section, we provide details on our practical implemen-
tation of PAtt in an ICS use-case. We start by presenting our
solution for hash veriﬁcation and spooﬁng detection. Then,
we present the ICS setup in which we evaluated PAtt.
4.1 Machine Learning Decoder
In our implementation, we chose to use (supervised) ma-
chine learning based approaches to both decode the sen-
sor reading traces to the hash and detect spooﬁng of sen-
sor reading traces. In Figure 3, we provide an overview
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 169of the data processing at the veriﬁer, including the of-
ﬂine training phase. The classiﬁer decodes each individual
micro-command from the sensor reading trace to its corre-
sponding bit (or step) in the actuation strategy. To select
an appropriate classiﬁer, we implemented and evaluated a
number of classiﬁers using WEKA [23]. In particular, we
tested Random Forests [11], Multilayer Perceptrons [7], De-
cision Forests [25], FURIA [26], DTNB [24] NBTree [31],
LMT [34], J48 [48], PART [19], and REPTree [63]. To bench-
mark the machine learning model used in our veriﬁer, we have
evaluated a set of classiﬁers that are mostly used in related
security research works e.g. [4, 5, 45, 51, 56] as shown in Ap-
pendix 5.2. Now we thoroughly discuss different parts of the
PAtt as presented in Figure 3.
1) Training. The features that we used are trajectory position
of the arm, average movement over a window of time, and sta-
tistical features that are mostly used in the signal processing
to monitor the signal behavior. These statistical features are
the mean of the signal over a window of time and the standard
deviation of the signal. We applied the preprocessing of the
signals that were reported by the sensor, and we use those
features to recover the hash with a probability of prediction of
the classiﬁers. We used the current position, the mean (AVG)
and standard deviation (STD) of the Accelerometer and Gyro-
scope, and the change of mean of Accelerometer as features
to create the proﬁle of the physical system (see Table 1). Con-
sidering the three-dimensional trajectory of the robotic arm
and two Accelerometers and two Gyroscopes, we used 33
features to train the machine learning model, and SciPy and
NumPy libraries of Python [12] to automatically generate
these features. In total, feature extraction was roughly 300
lines of code.
Table 1: The features classes used in PAtt.
Feature
Current Position
Mean of Accelometer
STD of Accelometer
Accelometer Difference
Formula
(xA,yA,zA)
AVGt (xA,yA,zA)
STDt (xA,yA,zA)
AVGt − AVGt−1
Mean of Gyroscope AVGt (xG,yG,zG)
STDt (xG,yG,zG)
STD of Gyroscope
2) Classiﬁcation. The classiﬁers assign a class to the test data
set with a probabilistic model. Considering the sample set X,
and class labels form a ﬁnite set Y , the classiﬁer would assign
a conditional distribution Pr(Y|X) which for a given sample
x ∈ X, the classiﬁer would assign a probability of being in
y ∈ Y class. Depending on the classiﬁcation method, in hard
classiﬁcation, the sample x ∈ X will be classiﬁed as y ∈ Y
class, where it holds:
ˆy = argmaxy Pr(Y = y|X)
(2)
We use the highest classiﬁer prediction probability of de-
coding a bit as a weight in the weighted distance computation.
3) Detection. In PAtt, the Prover generates a hash from the
random nonce and memory block. Then it creates the actu-
ation strategy based on the derived hash, and the physical
system performs the actuation strategy and reports the sen-
sor reading traces to the Prover. After decoding this hash
(described above), the Veriﬁer needs to decide whether it is
authentic, for which we propose to use a weighted Hamming
distance. To compute the weighted distance of the original
hash and the recovered hash, we used the weighted Hamming
distance with the classiﬁer prediction probability as a weight
of each bit of the hash. The Hamming distance is the number
of non-matching positions between two equal-length string.
Considering a noisy channel of transmitting bit arrays, the
Hamming distance could be used to determine how many bits
are different from the original bit arrays. In this paper, we
used the Hamming distance to calculate the distance between
the original hash and the decoded hash transmitted by actua-
tion commands to the physical process and retrieved from the
physical process by sensor readings. The Hamming distance
between two-bit arrays of a[1..k] and b[1..k] is computed by:
Ham(a,b) =
ai ⊕ bi
k∑
i=1
(3)
We use the weight of speciﬁc bits in the distance computa-
tion of the Hamming distance. The PAtt is using the classiﬁer
prediction probability as the weight for each bit of the hash.
The weighted Hamming distance between two bit arrays of
a[1..k] and b[1..k], and weight w[1..k] is computed by:
WHam(a,b) =
wi(ai ⊕ bi)
k∑
i=1
(4)
The computed weighted Hamming distance over original
hash and the recovered hash will be: