The function getFilterStatement(Q) is used to retrieve these filter statements from
the query and to identify the type of Value F . If it is a Literal, the getPredicate(Q)
iValue
function will look for the connected predicate. Similar to the technique used in triples,
weusegetLogProperty()toretrievetheregularexpressiondefinedinregexPattern(RP).
Finally,thecollectedprefixesandretrievedkey-valuepairs,bothfromtriplesandfilters,
willbestoredinQueryElements(Qe)forfurtherprocessing. Figure5depictsaSPARQL
querytranslationexample.
Figure5.SPARQLQuerytranslationexample.
LogExtractionThiscomponentispartoftheLogParserthatextractstheselectedrawlog
linesandsplitsthemintoakey-valuepairrepresentationbymeansofpredefinedregular
Mach.Learn.Knowl.Extr.2022,4 381
expressionpatterns. AsoutlinedinAlgorithm2,Logsources(Ls)areincludedbasedon
theprefixesthatappearinthequery.
Algorithm2:LogExtractionandRDFMapping.
size
Input: SPARQLQuery(Q),TimeFrame(Tf),LogSources(Ls)
Output: Response(R)
1 TimeFrameTf = {startT,endT};
2 LogSourcesLs = {Ls 1,...,Ls n};
3 LogLinesLn = {Ln 1,...,Ln n}(cid:101) Ls;
4 LogSourceOptionsLsO = {vocabulary,regexPatterns}(cid:101) Ls;
5 LogLineOptionsLnO = {logTime,logProperties}(cid:101) Ln;
6 QueryElementsQe = {prefixes,triplesKV, filtersKV};
7 Qe←translateQuery(Q,LsO vocabulary,LsO regexPatterns);
8 foreachLogSourceLs i (cid:101) Lsdo
9 ifQe prefixes containsLsO ivocabulary then
10 foreachLogLinesLn j (cid:101) Lndo
11 lt← LnO jLogTime;
12 ifltTf startT &&lt
PREFIX accs: 
PREFIX res: 
SELECT ?logType ?hostOS ?hostIp ?verb ?request
WHERE {
?logEntry cl:originatesFrom ?host.
?host cl:hostOS ?hostOS.
?logEntry cl:hasLogType ?logType.
?host cl:ipAddress ?hostIp.
?logEntry accs:hasRequestVerb res:GET.
?logEntry accs:hasRequest ?request.
?logEntry accs:hasClient res:ip-192.168.2.1.
} LIMIT 4
Listing1.Webaccessquery.
ThequeryresultsinTable1showtheaccessinformationwiththeirlogsourcesand
types(cl:IISandcl:apache),thehostOS(Win10andubuntu)withtheirIPs,therequest
method,andrequestpaths. Figure8depictsthegraphvisualizationoftheresult.
Table1.Webaccessqueryresult(excerpt).
logType hostOS hostIp Verb Request
IIS Win10 192.168.0.113 GET /employee.asp&id=12345...
apache Ubuntu 192.168.0.111 GET /admin.php?userid=bob...
apache Ubuntu 192.168.0.111 GET /salary.php
IIS Win10 192.168.0.113 GET /global/lwb.min.js...
Figure8.Webaccessqueryresultvisualization(excerpt).
Mach.Learn.Knowl.Extr.2022,4 385
ScenarioII—NetworkMonitoring
Inthisscenario,weillustratehowourprototypeprovidessemanticintegration,gener-
alization,andentityresolution. WesimulatedSSHloginactivitiesacrossdifferentservers
(e.g.,DatabaseServer,WebServer,FileServer)withmultipledemousers(e.g.,BobandAlice)
andthenqueriedtheauthlogfileswithourfederatedapproach.
Typically, atomic information on the log entry level is not explicitly linked to se-
manticconcepts. Hence,weaddedextractorsto,e.g.,detectspecificlogeventsfromlog
messagesandmapthemtoeventtypesfromourinternalbackgroundknowledge(e.g.,
event:Login, event:Logout). Furthermore, we added concept mappings for program
names,IPaddressesetc. (cf. Section5).
Now, an analyst can formulate a SPARQL query as shown in Listing 2 to extract
successfullogineventsfromSSHconnections. ThequeryresultsinTable2andFigure9
showsuccessfulloginsviaSSHovermultiplehostsinthespecifiedtimerange(from11
Decmeber202113:30:23to11Decmeber202114:53:06). ThehosttypeandtargetIPaddress
comefrominternalbackgroundknowledge,asthehostnameisconnectedtoaspecific
hosttype.
Thisinformationcanbeastartingpointforsecurityanalyststoexploretherichcontext
oftheeventsinthevirtualknowledgegraph.
Table2.SSHconnectionsqueryresult(excerpt).
Timestamp User sourceIp targetHostType targetIp
Dec1013:30:23 Bob 172.24.66.19 DatabaseServer 192.168.2.1
Dec1013:33:31 Alice 172.24.2.1 WebServer 192.168.2.2
Dec1013:38:16 Alice 172.24.2.1 DatabaseServer 192.168.1.3
Dec1014:53:06 Bob 172.24.66.19 FileServer 192.168.2.4
PREFIX cl: 
PREFIX auth: 
PREFIX sys: 
PREFIX ev: 
SELECT ?timestamp ?user ?sourceIp ?targetHostType ?targetIp
WHERE {
?logEntry cl:timestamp ?timestamp.
?logEntry auth:hasUser ?user.
?logEntry auth:hasSourceIp ?sourceIp.
?logEntry auth:hasTargetHost ?th.
?logEntry auth:hasAuthEvent ?ae.
?ae sys:partOfEvent ev:Login.
?th sys:hostType ?targetHostType.
?th cl:IpAddress ?targetIp.
} LIMIT 4
Listing2.SSHconnectionsquery.
Mach.Learn.Knowl.Extr.2022,4 386
Figure9.SSHconnectionsqueryresultvisualization(excerpt).
ScenarioIII—ThreatDetectionandATT&CKLinking
In this scenario, we demonstrate how the VloGraph framework leverages existing
threatdetectionrulestoidentifyIndicatorsofCompromise(IoCs)fromlogsourcesand
linkthemtotherespectiveattacktechniquesandtactics. Forthisscenario, weusedan
existinglogdataset[6]asdescribedinthemotivationexampleinSection1. Todefineour
rule-basedthreatdetectionqueries,wereliedonexistingcommunity-basedthreatdetection
rulessuchasSigma[55]andtransformedthemintoRDF/SPARQL.Furthermore,weused
theATT&CK-KG[56],acontinuouslyupdatedcybersecurityknowledgegraphgenerated
fromtheMITREATT&CKMatrix[10]inordertolinkcyberattackstoadversarytechniques
andtactics.
Listing3showsanexamplequeryforthisscenario.UsingthetransformedSigmarule
asinternalknowledge,wecanlistsuspiciouskeywordsdefinedintherules(i.e.,via ?sigma
sigma:keywords ?keywords)andusethemtofiltermessagesfromthetargetedlogsources.
Inthiscase,wetargetrequestmessagesinApachelog(see ?logEntry apache:hasRequest
?req)andfilterthemagainstthekeywords(FILTER regex(str(?req), ?keywords)).Next,
welinkthedetectedlogentriestotherespectiveattacktechniques(notethatSigmatypically
provides tags that associate its rules with ATT&CK techniques). This can be performed
via ?sigma rule:hasAttackTechnique ?techn. The query leverages linked data princi-
ples to include external background knowledge from the ATT&CK-KG, which makes it
possible to further link the identified attack technique detailed knowledge such as tech-
niquedescription(via ?techn dcterm:description ?desc), attacktactic(via ?techn at-
tack:accomplishesTactic ?tactic),CAPEC[57]attackpatterns(?techn attack:hasCAPEC
?capec),andsoforth.