                // If the file doesn't exist, attempt a URL fopen on the src link.
                // This can occur with certain file replication plugins.
                $uploads = wp_get_upload_dir();
                $src = $uploads['baseurl'] . "/" . $src_file;
            } else {
                $src = "wp-content/uploads/" . $src_file;
            }
        $editor = wp_get_image_editor( $src );
        ⋮
经过裁剪的图片随后会被保存回文件系统中（无论是下载文件还是本地文件）。保存文件所使用的文件名为`get_post_meta()`所返回的`$src_file`，而攻击者可以控制这个值。代码中对文件名做的唯一一处修改是为文件的basename（去掉文件名的目录及后缀）添加`cropped-`前缀字符串（如下代码段中第4行）。以前面的`evil.jpg`为例，这里生成的结果文件名为`cropped-evil.jpg`。
如果结果文件路径不存在，则WordPress随后会使用`wp_mkdir_p()`创建相应的目录（参考第6行代码）。
随后，WordPress使用图像编辑器对象的`save()`方法，将图像最终写入文件系统中。`save()`方法也没有对给定的文件名执行目录遍历检查。
        ⋮
        $src = $editor->crop( $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs );
        $dst_file = str_replace( basename( $src_file ), 'cropped-' . basename( $src_file ), $src_file );
        wp_mkdir_p( dirname( $dst_file ) );
        $result = $editor->save( $dst_file );
###  利用思路
到目前为止，我们已经分析了哪个文件可能会被载入图像编辑器中，因为WordPress没有执行过滤操作。然而，如果该文件并不是有效的图像，那么图像编辑器就会抛出异常。因此这里第一个假设是，WordPress只能裁剪上传目录外的图像。
然而，由于WordPress在没找到图像时会尝试下载图像，因此会导致远程代码执行（RCE）漏洞。
| 本地文件 | HTTP下载文件  
---|---|---  
上传的文件 | evil.jpg | evil.jpg  
_wp_attached_file | evil.jpg?shell.php | evil.jpg?shell.php  
待加载的结果文件 | wp-content/uploads/evil.jpg?shell.php |
实际位置 | wp-content/uploads/evil.jpg |   
结果文件名 | None – 文件加载失败 | evil.jpg?cropped-shell.php  
我们可以将`_wp_attached_file`的值设置为`evil.jpg?shell.php`，这样WordPress就会发起一个HTTP请求，请求URL为`https://targetserver.com/wp-content/uploads/evil.jpg?shell.php`。由于在该上下文中，`?`后的所有字符都会被忽略，因此该请求会返回一个有效的图像文件。最终结果文件名会变成`evil.jpg?shell.php`。
然而，虽然图像编辑器的`save()`方法没有检查路径遍历攻击，但会将待加载的图像的`mime`扩展名附加到结果文件名中。在本例中，生成的文件名将为`evil.jpg?cropped-shell.php.jpg`。这样可以让新创建的文件再次保持无害状态。
然而，我们还是可以使用类似`evil.jpg?/../../evil.jpg`的载荷，将结果图像植入任意目录中。
###  利用路径遍历：Theme目录中的LFI
每个WordPress主题实际上都是位于`wp-content/themes`目录中的一个子目录，可以为不同场景提供模板文件。比如，如果博客的某位访问者想查看博客文章，WordPress则会在当前激活的主题中查找`post.php`文件。如果找到模板，则会`include()`该模板。
为了支持额外的自定义层，我们可以为某些文章选择自定义模板。为了完成该任务，用户需要设置数据库中的`_wp_page_template` `Post
Meta`条目，将其设置为自定义文件名。这里唯一的限制条件是：待`include()`的文件必须位于当前激活的主题目录中。
通常情况下，该目录无法访问，并且不会有文件上传到该目录中。然而，攻击者可以滥用前文描述的路径遍历漏洞，将恶意构造的图像植入当前使用的主题目录中。随后攻击者可以创建一个新的帖子，滥用同一个bug，更新`_wp_attached_file`
`Post Meta`数据库条目，以便`include()`该图像。将PHP代码注入图像后，攻击者随后就能获得任意远程代码执行权限。
###  构造恶意图像：GD及Imagick
WordPress支持PHP的两种图像编辑扩展：[GD](https://libgd.github.io/)以及[Imagick](https://www.imagemagick.org/)。这两者有所不同，Imagick并不会删除图像的`exif`元数据，这样我们就可以将PHP代码藏身其中。GD会压缩每张图像，删除所有的`exif`元数据。
然而，我们还是可以制作包含精心构造的像素的图像来利用漏洞，当GD裁剪完图像后，这些像素会以某种方式进行反转，最终达到PHP代码执行执行目标。在我们研究PHP
GD扩展的内部结构过程中，`libgd`又爆出可被利用的一个内存破坏漏洞（[CVE-2019-6977](https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/#fn:2)）。
## 四、时间线
日期 | 事件  
---|---  
2018/10/16 | 我们在Hackerone上将漏洞反馈给WordPress  
2018/10/18 | 某个WordPress安全团队成员确认该报告，并表示在验证报告后会回头联系我们  
2018/10/19 | 另一个WordPress安全团队成员请求了解更多信息  
2018/10/22 | 我们向WordPress提供了更多信息，并提供了包含270行利用代码的完整脚本，帮助对方确认漏洞  
2018/11/15 | WordPress触发该漏洞，表示可以复现该漏洞  
2018/12/06 | WordPress 5.0发布，没有修复该漏洞  
2018/12/12 | WordPress 5.0.1发布，包含安全更新。某个补丁会阻止攻击者任意设置post
meta条目，因此使该漏洞无法直接利用。然而，路径遍历漏洞依然存在，并且如果已安装的插件没有正确处理Post
Meta条目就可以利用该漏洞。WordPress 5.0.1并没有解决路径遍历或者本地文件包含漏洞  
2018/12/19 | WordPress 5.0.2发布，没有修复漏洞  
2019/01/09 | WordPress 5.0.3发布，没有修复漏洞  
2019/01/28 | 我们询问WordPress下一个安全版本的发布时间，以便协调我们的文章公布时间，准备在补丁发布后公布我们的分析文章  
2019/02/14 | WordPress推出补丁  
2019/02/14 | 我们提供补丁反馈，验证补丁的确能缓解漏洞利用过程  
## 五、总结
本文介绍了WordPress中存在的一个远程代码执行漏洞，该漏洞存在时间已超过6年。RIPS报告了5.0.1版以及4.9.9版中的另一个漏洞，打上该漏洞补丁后，这个RCE漏洞也无法正常利用。然而如果目标站点安装了允许覆盖任意Post
Data的插件，那么依然可以利用路径遍历漏洞。由于我们在攻击目标WordPress站点时需要通过身份认证，因此我们决定在报告漏洞4个月后再公开该漏洞。
感谢WordPress安全团队的志愿者们，他们在该问题沟通上非常友好并且非常专业。