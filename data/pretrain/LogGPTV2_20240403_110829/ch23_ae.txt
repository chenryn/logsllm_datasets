依赖项控制是失败域控制。
依赖地狱：任何难以（或不能）区分哪些系统彼此依赖、难以判断这些依赖是否循环依赖，或难以控制（或接收添加）新依赖关系相关通知的任何环境，以及网状依赖关系种中实体的互操作性或可用性的任何更改。在任何成熟的组织中，软件开发生命周期（SDLC）已达到旧项目和工具（因为新平台和新组件被启用）被停用的阶段，除非小心谨慎，否则将不可避免地导致这些组成部分的相互依赖性超出了任何人的熟悉程度。预测哪些更改可能会影响哪些内容，或者哪些其他更改可能会影响您控制下的系统，并相应地进行规划，这对大多数人来说变得不可能。
确保您有一个功能，可以自动检测那些时不时添加到服务中的依赖项（如有必要，可以在启动新依赖项之前进行及时的对话），并确保灾害计划和路线图也相应更新。
当然，混沌工程（有时哪怕是日常的需求）最终会向你指出这一点，但在状况达到这一步之前，最好先跟踪和规划这一点。作为额外的好处，显式跟踪可以双向使用，并可以节省服务所有者在迁移、弃用和移除过程中的大量时间和精力消耗。
反模式15：笨拙的治理
你不能像开超级巨轮一样操纵蚊子舰队。反模式15：笨拙的治理
你不能像开超级巨轮一样操纵蚊子舰队。
笨拙的治理：不愿意在非 IT 运营中采用精益和敏捷原则的大型组织中，运行敏捷服务交付和开发/生产基础架构是很困难的，或者至少无法清晰辨认其形式。
如果你所在的大型组织被锁定在传统 IT 治理的传统结构中，其中通过审批、预算和可交付成果用来管理特定的大型项目或项目组。因而将很难实现这种持续开发、改进和发布，而这些恰恰是 SRE 的核心流程，也就是让你拥有一定范围的精益和敏捷。否则，紧张的预算、缺乏功能或无人使用的功能、僵尸项目以及各种普遍存在的容量分配不当将不可避免。
预算应该是流向组织，而不是项目的东西。组织领导应对结果负责，即整个公司为在组织中投入的资源而交付的结果，而不必关心以什么价格购买哪些硬件，或者在哪些任务上花费了多少小时。激励领导者高效交付优质结果，然后信任他们在自己的组织内制定预算并推动流程，而不必直接越级指挥。最好跟踪在工作过程中如何持续改进目前或最终业务成果的指标，而不是通过遵守原始计划或预算来判断或实施结果，并使用这些指标来指导计划的更新和执行。看看使用战略对齐技术，如Hoshin Kanri、Catchball 和 目标和关键结果 （OKR），将整体的目标传递给可靠性工程组织，而不必将它们完全融入到任何更多目标中（虽然那可能适用于企业其他位置的刚性系统）。
老实说，这是行业中隐含的假设之一，没有人谈论它，因为大多数 SRE 组织存在于一种新的文化，并已经抛弃了旧的治理模式，SRE 没有意识到我们有多么自由，直到我们再次回到令人感到闭塞的老环境中。我在新旧两种系统中都已经游刃有余，如果不是马克·施瓦茨（Mark Schwartz）在政府任职后回到亚马逊后对此发表类似的观点，我很可能也不会意识到这个问题。建立这些基础、文化一致性，这对于在现有技术组织中建立有效的可靠性工程文化和团队至关重要，这样可以避免丢包袱（反模式 5）或（重新）发明站点可靠性运维（反模式 1）。
反模式 16： 考虑不周的 SLO
SLO 既不是主要技术度量，也不是静态度量。
考虑不周的 SLO：丹丹为用户和业务需要而设置的 SLO，无法与业务结果、优先级和承诺双向关联（要么太陈旧，不能反映它们的变化）。
SLO 是业务级的目标。不应基于可提供的水平进行设置，而应基于需要交付的产品，以便成功与客户（无论是内部还是外部）合作。
不止一次，我们看到团队在其系统上设置监视程序，用一个月来采集各种指标，然后选取一些服务级别指标 （SLI），并根据在此期间测量的内容设置 SLO。然后再也不去思考这些指标了。
制定 SLO 的过程应该在设计系统时开始。它应该基于系统的业务案例和可交付结果，通过产品管理、客户支持、开发人员关系和任意数量的其他渠道修正。SLI 的选择应基于工程上的周密讨论（关于系统中哪些事项很重要，以及如何验证这些事项的恰当运维）。
SLO 的设置应通过合理分析（确定客户需要，或他们偏爱什么样的性能和可用性，而不是我们目前或将来能提供的性能和可用性）。
如果你不这样做，最终会导致优化的次序错误，并且在你的目标行业中的推广会受到阻碍，即便你的服务对其他人来说很好用。另外，还会发现在性能测试中做了错误的选择，因此每当进行某种维护、或遇到某些传输问题、服务错误或容量下降时，你的系统对客户可能变得毫无用处，甚至你可能都无法意识到什么是错误的，直到有一天在社交媒体看到用户的抱怨。
SLO 应该是一个有活力的文档。如果不能对它进行定期或根据需要来更新，文档将变得无关紧要。如果目标跟不上用户不断变化的需求，他们将放弃你的服务。如果日常的运行已经几乎无法达到服务级别承诺，当你决定哪些策略可用于迁移、维护、生产测试或新部署时，你的用户肯定会大为不满。最重要的是，整个业务需要与 SLO 保持一致。每个人都需要明确地知道他们如何与收入或其他业务目标联系起来。SLO 不仅仅是一根棍子，不是用来惩罚 SRE 的工具。它应该是一个杠杆，应该能够在必要时从大型组织撬动支持和资源，并推动设计决策、启动时间表和运维工作。因为这些是业务承诺，而不仅仅是 SRE 承诺。
资本和运维预算需要反映这些指标中表达的优先事项。人员配置、设计决策和工作优先级确定，从根本上说应该按照这些指标而调整。这些指标不亚于市场调研或产品头脑风暴会议的重要性，
决策需要数据，如果一切正常，则有关当前资源分配如何影响服务，以及服务如何影响收入（或工作产出、医疗效果，或任何其他顶级组织目标）的最终联系，这类数据是推动组织发展的最基本决策输入之一。因此，请确保这些关键指标和目标选择得当、范围适当、得到广泛理解和接受。SLI 和 SLO 的核心是关于组织成功的推理工具和沟通工具。组织会不可避免地构造反映其组织通讯机制的系统，这是目前普遍接受的理论。见康威定律。
我们没有实验证据说明反向的因果关系也成立，但对于SLO，组织似乎不可避免地会进化，以反映其既定的通信结构，就像它们构造的系统一样。
反模式 17：让人恼火的 API 接口
单纯服务器端的 SLO 只能保证客户端的故障。
让人恼火的 API 接口：虽然 SRE 与内部客户（和合作伙伴）协作和集成的方法已经成熟，但却没有与关键外部各方协作和集成，且未能对系统外部进行衡量、分担责任，并尝试补救风险，导致客户感到不满。
 DevOps 哲学让我们认识到，核心问题在于，运维孤岛会导致 SLO 无法达成。不同组织之间沟通迟滞和“都是别人的问题”的想法，这对于组织之间的影响类似于对于组织内的影响。通过互联网向客户提供 API 服务（也就是由内而外的提交服务级别协议/SLA，承诺服务响应速度，兑现这个承诺，并相应客户不可避免的支持请求，这也是一种反模式。让人想到十年前开发者还要向运维团队提交代码或者二进制文件，等待他们发布的流程。