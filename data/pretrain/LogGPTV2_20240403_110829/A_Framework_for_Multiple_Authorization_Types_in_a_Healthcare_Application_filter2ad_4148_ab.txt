information,  each  individual  authorization  request  is 
assigned  a  type  and  the  conditions  needed  to  satisfy  the 
requirements  for  that  authorization  type  are  checked 
dynamically.  Once  the  conditions  are  checked  using 
certain  contextual  information  such  as  the  “current  user 
work assignments”, the DTE subject-domain table is read 
to assign the correct domain (based on the invoked subject) 
to the user session. The actual permissions required for the 
subject to carry on its intended operation are read off from 
another DTE table – i.e., the Domain-Type Access Matrix. 
Thus  the  DAFMAT  framework  strives  to  use  as  much 
information  as  possible  using  the  hybrid  RBAC-DTE 
model  structure  while  providing  support  for  dynamic 
multiple  authorization  types  instead  of  obtaining  all  the 
data needed for authorization from logical rules as in [6]. 
This  design  goal  reduces  the  information  that  is  to  be 
processed  by  the  logic-driven  authorization  engine  and 
hence the complexity of the logical implications as well.  
4.  Development of  DAFMAT Framework 
Let  us  now  examine  in  detail  each  of  the  two 
components (i.e., hybrid RBAC-DTE access control model 
and 
logic-driven  authorization  engine)  of  DAFMAT 
framework  mentioned  in  section  2.  The  hybrid  access 
control model consists of: 
(a)  Authorization Entities  
(b)  Relationships among Authorization Entities and  
(c)  Constraints governing the relationships.  
The  logic-driven  authorization  engine  consists  of  a  first 
order  predicate 
logic  based  processor  capable  of 
processing Prolog-like rules. The authorization engine will 
also have additional capabilities to print out the predicates 
and  the  binding  values  that  determined  the  approval  or 
denial of an authorization request. 
4.1  Authorization Entities 
framework are:  
(a)  USER 
(b)  ROLE 
(c)  SUBJECT 
unique object-type and there could be many objects within 
an object- type. Hence the object to object-type mapping 
is a many-to-one mapping defined using the function 
name TypeMap as: 
TypeMap(object) >>-> object-type         
(Type_Map(object, type))           
       (4.2.5) 
Associated with each object (and hence object-type) is 
a set of valid access modes (Create, Update, Delete, View 
etc). In a DTE implementation accesses from a subject to 
an object are based on the subject’s domain and object’s 
type. The set of allowable access modes are represented in 
the form of a matrix called Domain-Type Access Matrix 
with domains as rows, object-types as columns and each 
cell in the domain-object-type pair contains the valid set 
of access modes granted for that pair. Also an access 
mode denotes a particular way of accessing an object 
which is generic to any type of object. Hence the mapping 
from a domain-object-type pair to an access mode is a 
many-to-many mapping defined using the function name 
DteEntry as:  
    DteEntry (domain, object-type) >>->> access 
(Dte_Entry(domain,type,access))               (4.2.6) 
The entire set of relationships among authorization entities 
in DAFMAT showing the type of mapping between any 
two entities is given in Figure 4.1. 
4.3  Constraints on Relationships among 
Authorization Entities 
While  describing  relationships  among  authorization 
entities,  we  have  concerned  ourselves  with  mappings 
involving only a pair of  entities. Constraints in DAFMAT 
are  concerned  with  restrictions  imposed  on  mapping 
instances  for  a  given  pair  of  entities  when  taking  into 
account  the  mapping  instances  each  member  of  the  pair 
has with a third entity. To give a concrete example let us 
consider the pair of authorization entities – subject and role 
and the domain as the third entity. The constraint – “all the 
roles  from  which  a  subject  can  be  invoked  should  all  be 
assigned  to  the  same  unique  domain  which  is  associated 
with the subject” is expressed as: 
Facts 
SubjectDomain (subject) >>-> domain  
(Subject_Domain (subject, domain)) 
(4.2.4) 
  (s,d,r)    {Subject_Domain  (s,d)  &  Subject_Role(s,r)  ﬁ  
Role_Domain (r,d) } 
4.2.4  Object-Type Mapping & Domain-Type Access 
4.4  Dynamic  Authorization  Rules  and  Relevant 
Matrix 
 An Object-Type stands for a collection of objects 
carrying related information. Hence each object maps to a 
The  purpose  of  using  a  logic-driven  authorization 
engine  in  DAFMAT  in  addition  to  the  hybrid  access 
denotes the many-to-one mapping type and the symbol 
“role” stands for the target entity ROLE. The 
corresponding predicate that is used by the authorization 
engine is given in parenthesis. The name of the predicate is 
“User_Role” and the predicate variables are: user and role.  
4.2.2  Role-Domain Mapping 
A domain represents a functional area within an 
enterprise. In a healthcare enterprise a person occupying a 
job position (which is represented by a role) rarely 
performs any tasks outside his/her general functional area 
as it involves legal and professional competency issues. 
Hence several roles may be associated with a domain but 
a role always belongs to a unique domain. Therefore the 
role to domain mapping is a many-to-one mapping 
defined using the function name RoleDomain as: 
RoleDomain(role) >>-> domain        ( Role_Domain 
(role, domain))     
 (4.2.2) 
4.2.3  Subject Mappings 
Subjects stand for program entities or user agents that 
perform one or more transactions on behalf of a user and 
their execution semantics is dictated by the role from 
which they are invoked. Subjects are often designed as 
generic program entities that can be invoked by multiple 
roles and the semantics of execution of a given subject 
will depend upon the role from which it is invoked. 
Similarly a role may have to invoke multiple subjects in 
order to perform a designated task. Hence the subject to 
role mapping is a many-to-many mapping defined using 
the function name SubjectRole as: 
SubjectRole (subject) >>->>   role      ( Subject_Role 
(subject, role))    
 (4.2.3) 
A subject’s access to objects is to be mediated based 
on the domain to which it belongs and therefore the 
domain associated with a subject must be unique. In other 
words every subject is assigned a unique domain 
(although many subjects may be assigned to a single 
domain) making the subject to domain mapping a many-
to-one mapping which is defined using the function name 
SubjectDomain as: 
"
control  model  is  to  support  multiple  authorization  types. 
Since an authorization type is determined based on context 
parameters,  contextual  information  is  the  major  type  of 
information that the dynamic authorization rules processed 
by the authorization engine use. It must be mentioned that 
the  major  portion  of  information  that  an  authorization 
module based on DAFMAT framework uses pertains to all 
the  mapping  information  (that  forms  the  hybrid  access 
control  model)  described  in  section  4.2.  The  contextual 
information and the number of dynamic authorization rules 
to  be  evaluated  are  kept  to  the  minimum  to  limit  the 
processing  requirements  of  the  logic  driven  authorization 
engine.  The  context-based  authorization 
rules  are 
expressions of organizational policies within a healthcare 
enterprise that seek to limit the locality of service function 
(e.g.,  specialty,  ward  assignment  etc) 
for  various 
healthcare workers like Doctors and Nurses. The locality 
assignments  are  done  to  realize  multiple  objectives  like 
accountability,  integrity  and  competency  of  service.  For 
example to order a test, prescribe a medication or authorize 
a diagnostic procedure for a patient in a Cardiology Ward 
can only be done by the attending physician for the ward at 
that time. 
The  various  processing  steps  involved  in  DAFMAT 
framework  for  authorizing  a  user  action  are  described  in 
the following  sub-sections: 
ACCESS
MODES
M:N
D-T    PAIR
N:1
USER
ROLE
N:1
DOMAIN
(D)
M:N
N:1
SUBJECT
OBJECT-
TYPE
(T)
N:1
OBJECT
Formulation 
Predicate 
4.4.1 
Figure 4.1 – Relationships between Authorization Entities in DAFMAT 
of  Authorization  Request 
linkages  are  obtained  using  the  following  session-related 
functions in DAFMAT. 
DAFMAT 
framework 
is  an  authorization 
for 
supporting applications. Hence it should have mechanisms 
for  translating  user  actions  in  an  application  to  the 
appropriate  authorization  request  which  can  then  be 
validated.  This 
is  enabled  by 
information 
invoked  menu  option  and 
application session with the user, role, the subject invoked, 
the relevant context variable and the priority code. These 
translation  process 
linking 
the 
Current_Action (menu_option, session) – the menu option 
and session pertaining to the current user action.   
Session_User (session, user) – the user associated with the 
application session   
Session_Role(session,  role)  –  the  role  activated  for  the 
session   
 (4.4.2)  
(4.4.3) 
(4.4.1) 
(4.4.6) 
(4.4.5) 
 (4.4.4) 
Menu_Operation(menu_option, subject) – subject invoked 
by the menu option 
Menu_Context(menu_option,  cv)  –  the  context  variable 
associated with menu option 
Session_Priority(session,  pc)  –  the  priority  code  for  the 
session    
(pc = NR for normal request and  pc =  ER for emergency 
request) 
The usage of the data obtained through above mappings is 
as follows. Corresponding to the exercise of a menu option 
in  an  application  session  (given  by  mapping  4.4.1),  the 
variables  associated  with  the  action  (i.e.,  the  user,  role, 
subject,  context  variable  and  priority  code)  are  obtained 
from  predicates  4.4.2  through  4.4.6  respectively.  In 
addition there is a variable required for holding the value 
string  associated  with  a  context  variable  value  (e.g.,  the 
value  string  ‘PEDIATRIC’  associated  with  the  context 
variable  value  ‘wardname’).    Including  this  variable 
(named  cv_value)  along  with  other  variables  discussed 
above, the authorization request predicate is formulated as 
follows: 
Auth_Req(user,role,subject,cv,cv_value,pc)   
4.4.2  Designating  Authorization  Type 
Authorization Request  
The values for variables ‘pc’ and ‘cv’ in an instance of 
the authorization request predicate 4.4.7 (which represents 
a  specific  authorization  request)  helps  to  categorize  the 
request into one of the following authorization types: 
(4.4.7) 
an 
to 
(a)  Normal Authorization Request 
(b)  Emergency Authorization Request 
(c)  Context-based Authorization Request 
The logic used to categorize the current request (called the 
authorization  type  designation  logic)  into  one  of  above 
three types is as follows: 
4.4.2.1 Authorization Type Designation Logic 
IF                     pc = ‘ER’ 
THEN  Emergency_Auth_Req(user,role,subject) 
ELSE 
          IF                       cv = ‘NONE’ 
          THEN                
Normal_Auth_Req(user,role,subject) 
          ELSE   
Context_Auth_Req(user,role,subject,cv,cv_value) 
4.4.3  Rules for Validating Different Authorization 
Types 
The  last  step  in  approving  or  denying  a  user 
authorization  request  is  to  determine  the  validation 
conditions for each of the authorization type designations 
yielded  by  the  logic  in  section  4.4.2.1.  These  validation 
conditions are given below: 
4.4.3.1  Validation  Conditions  for  Normal  Authorization 
Request (Normal_Auth_Req): 
Normal  authorization  involves  checking  whether  the 
role currently active in the user session is one of the roles 
assigned  to  the  subject  under  invocation.  No  other 
information is involved in this type of authorization. 
Subject_Role(subject,role) 
Normal_Auth_Req(user,role,subject) 
4.4.3.2  Validation 
for 
Authorization Request (Emer_Auth_Req): 
Conditions 
(cid:224) 