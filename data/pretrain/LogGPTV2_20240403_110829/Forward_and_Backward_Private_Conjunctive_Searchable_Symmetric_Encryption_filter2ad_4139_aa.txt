title:Forward and Backward Private Conjunctive Searchable Symmetric Encryption
author:Sikhar Patranabis and
Debdeep Mukhopadhyay
Forward and Backward Private Conjunctive
Searchable Symmetric Encryption
Sikhar Patranabis
ETH Z¨urich
PI:EMAIL
Debdeep Mukhopadhyay
IIT Kharagpur
PI:EMAIL
Abstract—Dynamic  searchable  symmetric  encryption  (SSE) 
supports updates and keyword searches in tandem on outsourced 
symmetrically  encrypted  data,  while  aiming  to  minimize  the 
information revealed to the (untrusted) host server. The literature 
on  dynamic  SSE  has  identiﬁed  two  crucial  security  properties 
in  this  regard  -  forward  and  backward  privacy.  Forward  privacy 
makes it hard for the server to correlate an update operation with 
previously  executed  search  operations.  Backward  privacy  limits 
the amount of information learnt by the server about documents 
that  have  already  been  deleted  from  the  database.
To  date,  work  on  forward  and  backward  private  SSE  has 
focused  mainly  on  single  keyword  search.  However,  for  any 
SSE  scheme  to  be  truly  practical,  it  should  at  least  support 
conjunctive  keyword  search.  In  this  setting,  most  prior  SSE 
constructions  with  sub-linear  search  complexity  do  not  support 
dynamic databases. The only exception is the scheme of Kamara 
and Moataz (EUROCRYPT’17); however it only achieves forward 
privacy. Achieving both forward and backward privacy, which is 
the most desirable security notion for any dynamic SSE scheme, 
has remained open in the setting of conjunctive keyword search.
In  this  work,  we  develop  the  ﬁrst  forward  and  backward 
private  SSE  scheme  for  conjunctive  keyword  searches.  Our  pro-
posed  scheme,  called  Oblivious  Dynamic  Cross  Tags (or  ODXT 
in short) scales to very large arbitrarily-structured databases (in-
cluding  both  attribute-value  and  free-text  databases).  ODXT 
provides  a  realistic  trade-off  between  performance  and  security 
by  efﬁciently  supporting  fast  updates  and  conjunctive  keyword 
searches over very large databases, while incurring only moderate 
access  pattern  leakages  to  the  server  that  conform  to  existing 
notions  of  forward  and  backward  privacy.  We  precisely  deﬁne 
the  leakage  proﬁle  of  ODXT,  and  present  a  detailed  formal 
analysis  of  its  security.  We  then  demonstrate  the  practicality  of 
ODXT by developing a prototype implementation and evaluating 
its  performance  on  real  world  databases  containing  millions  of 
documents.
I. 
INTRODUCTION
The advent of cloud computing potentially allows individ-
uals and organizations to  outsource storage and processing of 
large  volumes  of  data  to  third  party  servers.  However,  this 
leads to privacy concerns - clients typically do not trust service 
providers to respect the conﬁdentiality of their data [13]. This 
lack of trust is often fortiﬁed by threats from malicious insiders 
and  external  attackers.
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23116
www.ndss-symposium.org
Consider, for instance, a client that ofﬂoads an encrypted
database of (potentially sensitive) emails to an untrusted server.
At a later point of time, the client might want to issue a query
of the form “retrieve all emails received from PI:EMAIL
or “retrieve all emails with the keyword “research” in the
subject ﬁeld”. Ideally, the client should be able to perform
this task without revealing any sensitive information to the
server, such as the sources and contents of the emails, the key-
words underlying a given query, the distribution of keywords
across emails, etc. Unfortunately,
techniques such as fully
homomorphic encryption [19], that potentially allow achieving
such an “ideal” notion of privacy, are unsuitable for practical
deployment due to large performance overheads.
Searchable Symmetric Encryption. Searchable symmetric
encryption (SSE) [33], [20], [14], [32], [9], [8], [16], [36], [24],
[29] is the study of provisioning symmetric-key encryption
schemes with search capabilities. Consider again a client that
ofﬂoads an encrypted database of emails to an untrusted server
and later issues a query of the form “retrieve all emails with
the keyword “research” in the subject ﬁeld”. The goal of SSE
is to allow the client to perform this task without revealing
any sensitive information to the server, such as the contents of
emails, the keywords underlying a given query, the distribution
of keywords across emails, etc.
Leakage Versus Efﬁciency. The most general notion of SSE
with optimal security guarantees can be achieved using the
work of Ostrovsky and Goldreich on Oblivious RAMs [21].
More precisely, using these techniques, one can evaluate a
functionally rich class of queries on encrypted data without
leaking any information to the server. However, such an ideal
notion of privacy comes at the cost of signiﬁcant computational
or communication overhead. A large number of existing SSE
schemes prefer to trade-off security for practical efﬁciency by
allowing the server to learn “some” information during query
execution. The information learnt by the server is referred to
as leakage. Some examples of leakage include the database
size, query pattern (which queries correspond to the same
keyword w) and the access pattern (the set of ﬁle identiﬁers
matching a given query). Practical implementations of such
schemes can be made extremely efﬁcient and scalable using
specially designed data structures.
Dynamic SSE. An important line of works (e.g., [11], [27],
[26], [8], [5], [6], [15]) have studied dynamic SSE schemes
that support updates on the database without the need to re-
initialize the entire protocol. To formally address the addi-
tional privacy concerns that arise when supporting the update
operations, two new notions of security for SSE have been
proposed in these works - (a) forward privacy (which requires
that adding a new ﬁle f to a database should not reveal whether
f contains keywords that have been previously searched for)
and (b) backward privacy (which requires that searching for a
keyword w should reveal no information about ﬁles containing
w that have already been deleted from the database).
Forward private SSE was introduced by Chang and Mitzen-
macher in [11], and has been subsequently studied in [35],
[5], [18], [28], [6], [15], [34]. Forward privacy has received
much attention in light of ﬁle injection attacks [7], [38],
which are potentially devastating for SSE schemes that try to
support updates without being forward private. The notion of
backward privacy is comparatively more recent, and was ﬁrst
formalized by Bost et al. in [6]. Subsequently, Chamani et
al. [10] and Sun et al. [37] proposed SSE schemes supporting
single keyword search that are backward private under various
leakage proﬁles.
However, existing dynamic SSE schemes, that satisfy both
forward and backward privacy, support only single keyword
search. As a result, despite their efﬁciency and security, these
schemes are often severely limited in terms of the expressive-
ness of queries they support. Consider, for example, a client
that can only specify a single keyword to search on, and
receives all the documents containing this keyword. In real-
life applications, such as querying large remotely stored email
databases, a single keyword query would potentially return
a large number of matching records/documents that the client
would need to download and ﬁlter locally. For any SSE scheme
to be truly practical, it should at least support conjunctive
keyword search, i.e., given a set of keywords (w1, . . . , wn),
it should be able to ﬁnd and return the set of documents that
contain all of these keywords.
frequent
Goals and Challenges. In this paper, we aim to design a
dynamic SSE scheme with both forward and backward privacy,
and with search complexity proportional to the number of
documents containing the least
term in the con-
junction. This is indeed the best possible search complexity
achieved by plaintext information retrieval algorithms, as well
as by conjunctive SSE schemes in the static setting [9], [29].
However, this is non-trivial to achieve in the dynamic SSE
setting, where we need to additionally support updates and
ensure forward and backward privacy. For instance, existing
conjunctive SSE schemes in the static setting [9], [29] facilitate
fast conjunctive searches by heavily pre-processing the dataset
during setup. Such pre-processing at setup is impossible in the
dynamic setting, where the dataset is updated on-the-ﬂy.
Handling conjunctive searches also makes the analysis
of leakage signiﬁcantly more challenging. Existing deﬁni-
tions for forward and backward privacy [5], [6], [10], [37]
assume leakage proﬁles that are tuned speciﬁcally towards
single keyword search, and are insufﬁcient to cover general
conjunctive searches. For example, suppose that we design a
dynamic SSE scheme that has the following leakage proﬁle:
given a conjunctive query over the keywords (w1, w2, w3),
it
in addition to the actual outcome
of the query, the outcome of the sub-query (w1, w2). Note
that this partial leakage is not meaningful when searching
for a single keyword; so the aforementioned SSE scheme
leaks to the server,
might well be secure according to forward/backward privacy
deﬁnitions that cover only single keyword search. But for
general conjunctive queries, such partial leakages could have
devastating consequences [38].
A. Our Contributions
We develop the ﬁrst dynamic SSE scheme supporting con-
junctive keyword searches that is both forward and backward
private. Our scheme is named Oblivious Dynamic Cross-Tags,
or ODXT in short. The performance of ODXT scales to very
large arbitrarily-structured databases, including both attribute-
value and free-text databases.
Techniques Developed. The technical centerpiece of ODXT
is a search protocol executed between the client and the
server, where server takes as input a set of encrypted records
corresponding to update operations on the database, while the
client takes as input a conjunction of keywords and some
secret state information. The outcome of this protocol is a
ﬁltered, signiﬁcantly smaller set of encrypted records, which
the client can then locally decrypt to compute the identiﬁers
for documents containing all of the queried keywords.
A straightforward realization of this protocol, however,
requires multiple rounds of communication between the client
and the server, which does not satisfy our desired level of
performance. In order to enable this search protocol with a
single round of communication, we design a novel update
mechanism based on dynamic cross-tags that pre-computes
parts of the protocol messages, and stores these in encrypted
form at the server. Then, during the actual search protocol,
the client only sends across some auxiliary information that
allows the server to unlock these pre-computed messages from
the relevant update records, without any further interaction.
Differences with Static Cross-Tags. Our idea of pre-computing
search protocol messages using cross-tags is inspired by con-
junctive SSE schemes for static databases [9], [29]. However,
applying this technique to the dynamic setting is not straight-
forward. In static SSE schemes, the pre-computation typically
happens at setup, when the client has access to the entire
database in the clear. Also, since the database is never updated,
the pre-computed messages do not need to change with time.
This is impossible to emulate in the dynamic setting, where
the database is continuously updated. Finally, these schemes
use specially designed data structures that are inherently static
with no provisions for updates such as insertions/deletions.
This makes dynamic conjunctive SSE with appropriate
performance and security guarantees non-trivial to achieve;
in particular, prior attempts to do so have been found to be
vulnerable to different classes of attacks such as leakage-abuse
and ﬁle-injection attacks [7], [38].
Novelty of Our Approach. We introduce two novel techniques
to tackle this issue that differ signiﬁcantly from existing
design-paradigms:
•
•
A specialized data structure for “dynamic cross-tags”
that can be efﬁciently updated and searched in tandem
while ensuring both forward and backward-privacy.
A round-reduction technique for conjunctive keyword
searches that combines message pre-computation with
2
the update operations, and requires no pre-processing
at setup.
At a high level, if an update operation (insertion/deletion)
affects the outcome of some future search, we ensure that
the corresponding message pre-computation for this search
is also updated simultaneously. This combination of message
pre-computation with normal update operations is done in a
manner that: (a) leaks as little information as possible to the
server, and (b) does not degrade the online efﬁciency of update
and search operations.
Performance. Some of the performance beneﬁts of ODXT
are summarized below.
Fast Conjunctive Searches. Conjunctive keyword searches in
ODXT entail only a single round of communication between
the client and the server. The search complexity is independent
of the total number of documents in the database. For a
conjunctive query over a set of keywords (w1, . . . , wn), the
search complexity of ODXT scales linearly with the number
of update operations involving the least frequent keyword in
the conjunction.
More speciﬁcally, the best possible search complexity for
any conjunctive-SSE scheme is O(n · |DB(w1)|), where n is
the number of keywords involved in the conjunction, w1 is
the least frequent of these keywords, and |DB(w1)| is the
number of ﬁles currently containing w1. ODXT incurs slightly
higher computational complexity, namely O(n.|Upd(w1)|),
where |Upd(w1)| is the number update operations involving
ﬁles containing w1 (this is primarily a tradeoff for achieving
both forward and backward privacy). Our experiments reveal
that |Upd(w1)| typically exceeds |DB(w1)| by around 10%. In
particular, any keyword that occurs in very few ﬁles is naturally
expected to be involved in very few update operations.
In summary, ODXT achieves a search performance level
“reasonably close” to the best possible search complexity
achieved by plaintext information retrieval algorithms, as well
as by conjunctive SSE schemes in the static setting [9], [29].
Fast Updates. Updates in ODXT are extremely fast and
lightweight. Each update operation entails only a constant
amount of computation at the client and the server, and a
single message transmission from the client to the server. This
matches closely the update efﬁciency of existing forward and
backward private SSE schemes for single keyword search [6],
[10], [37].
Efﬁcient Storage. The server storage requirements for ODXT
scale linearly with the number of update operations executed
on the database until a given point of time, while the client is
required to maintain a small amount of local storage that scales
only logarithmically with the number of update operations
executed on the database until a given point of time. This
closely matches some of the most storage-efﬁcient forward
and backward private SSE schemes that support only single
keyword search [6], [10], [37].
Security. We establish security by: (a) precisely enumerat-
ing the leakage proﬁle for our scheme, including leakages
from updates as well as leakages from conjunctive keyword
searches, and then (b) by proving formally that this is indeed
the entire leakage incurred by our scheme. Our formal proof
of security follows the same simulation-based framework as
existing forward and backward private SSE schemes for single
keyword queries [6], [10], [37], and assumes an adaptive
adversarial model. In this framework, we establish formally
that a probabilistic polynomial-time simulation algorithm can
simulate the view of the adversarial server (in a computation-
ally indistinguishable manner) given access to only the leakage
proﬁle for our scheme.
Leakage Analysis. We also present a detailed analysis of
the leakage proﬁle incurred by our scheme, and compare it
with the leakages incurred by existing forward and backward
private SSE schemes supporting single keyword search, as
well as existing conjunctive SSE schemes for static datasets.
We broadly categorize the leakage from our scheme into two
categories described below.
Update Leakages. These are leakages incurred during updates.
The design of our scheme ensures that update operations reveal
nothing to the adversary, including the nature of the update op-
eration (insertion/deletion), as well as the document/keyword
pair involved in the update operation.
Conjunctive Search Leakages. These are leakages incurred dur-
ing conjunctive keyword searches. Examples of such leakages
incurred by our scheme include the access pattern, the times-
tamps corresponding to updates involving the least frequent
term in the conjunction, and the timestamps corresponding to
updates involving other terms in the conjunction and the ﬁles
containing the least frequent term. Some of these leakages are
also incurred by existing forward and backward private in the
single keyword search setting. Other leakages are very speciﬁc
to the case of conjunctive queries, and we draw parallels with
conjunctive SSE schemes in the static setting to justify their
presence as a necessary performance trade-off.
Prototype Implementation. Finally, we present a prototype
implementation of ODXT, and compare its search perfor-
mances with the na¨ıve adaptation of MITRA [10] to the con-
junctive search setting, as well as IEX-2LEV and IEX-ZMF
due to Kamara and Moataz [24]. The evaluations are carried
out on 60.92GB-sized real world dataset obtained from Wiki-
media downloads [17], consisting of 16 million documents, 43
million keywords and 100 million update operations.
B. Related Work
SSE for single keyword searches was ﬁrst introduced by
Song et al. in [33], and was subsequently equipped with formal
security deﬁnitions by Goh in [20] and by Curtmola et al.
in [14]. The literature on SSE that is relevant to this work can
be broadly divided into two categories - dynamic SSE schemes
that are forward and backward private but only support single
keyword queries, and conjunctive SSE schemes that are either
static or only forward private. We summarize them below.
Forward and Backward Private Dynamic SSE. The ﬁrst
SSE schemes to efﬁciently support updates [27], [26] were
neither forward nor backward private. The notion of forward
privacy was introduced formally in [11]. Since then, numer-
ous works have proposed improved dynamic SSE schemes
with forward privacy, albeit with support for single keyword
3
searches [35], [5], [18], [28], [6], [15], [34]. Backward privacy
was introduced in [35], albeit without a formal security deﬁni-
tion or construction. Bost et al. [6] introduced the ﬁrst formal
deﬁnitions of backward privacy for single keyword search,
and proposed SSE constructions satisfying these notions. More
efﬁcient constructions of backward private SSE have been
proposed subsequently in [37], [10].
To the best of our knowledge, all forward and backward
private SSE constructions till date only support single keyword
searches. In particular, they do not support conjunctive key-
word searches, which is the goal of this paper.
Conjunctive SSE. A completely disjoint set of works have
attempted to design SSE schemes that support expressive
queries such as conjunctions, disjunctions and general Boolean
formulae over keywords. The seminal work of Cash et al. [9]
and a subsequent work of Lai et al. [29] enable efﬁcient
conjunctive keyword searches, albeit on static datasets with no
provisions for updates. The work of Kamara and Moataz [24]
enables conjunctive keyword searches over dynamic databases,
but is only forward private.
In this work, we address the open question of designing an
SSE scheme for conjunctive keyword searches over dynamic
databases while simultaneously achieving both forward and
backward privacy.
II. PRELIMINARIES
In this section we introduce the notations that are used in the
rest of the paper. We refer the reader to the full version of
the paper [31] for additional cryptographic background and
background material on dynamic SSE.
Notations. We write x R←− χ to represent that an element x is
sampled uniformly at random from a set/distribution X . The
output x of a deterministic algorithm A is denoted by x = A
and the output x(cid:48) of a randomized algorithm A(cid:48) is denoted
by x(cid:48) ← A(cid:48). For a ∈ N such that a ≥ 1, we denote by [a]
the set of integers lying between 1 and a (both inclusive). We
refer to λ ∈ N as the security parameter, and denote by poly(λ)