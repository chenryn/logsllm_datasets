or introduces a problem with a different complexity setting
(e.g., one-level symbolic array, and two-level symbolic array).
Table II demonstrates our program samples.
To avoid noise, each program in our dataset only reserves
a simple implementation of the challenge. The sizes of the
binary programs in our dataset are within the range of [10K
bytes - 25K bytes], with a median of 14K bytes. In this way,
the concolic execution tools have lower chances to be affected
by other unexpected limitations.
B. Tools and Settings
We choose three popular concolic execution tools for
evaluation: BAP, Angr, and Triton. Our choosing strategies
are that: 1) the tool should be able to perform concolic
execution on binaries; 2) the tool should have high impact
in communities and is under maintenance; 3) it should be
released as open source so that we can investigate thoroughly
via code review. To our best knowledge, only these three tools
can meet our standards. They are available on Github and
have received hundreds of stars. By default, we use their latest
stable versions for evaluation. Note that there are other famous
symbolic execution tools which do not meet our requirements.
For example, KLEE is a popular symbolic execution tool but
cannot process binaries [12]; PySymEmu has not been updated
for almost a year [23]; Mayhem is not publicly released [2].
Next, we ﬁrst brieﬂy introduce the tools and then discuss
our experimental settings for them.
1) Concolic Execution Tools: BAP is an OCaml/C++
project maintained by Carnegie Mellon University [11]. It
implements a Pin tool
instruction tracing. The
instructions are then lifted to BAP IL. BAP adopts CVC as a
default constraint modeling language and employs STP [24]
for constraint solving.
[18]
for
1https://github.com/hxuhack/logic bombs
186
Triton is a C++/Python project maintained by Quark-
sLab [6]. It also leverages Pin to trace instructions. Different
from BAP, it directly lifts the instructions into SSA (single
static assignment), which is convenient for generating con-
straint models. Triton employs SMT-Lib [20] as the constraint
modeling language and Z3 [22] as the constraint solver.
Angr is a python project maintained by University Califor-
nia of Santa Bara. The instruction lifter is based on VEX [25],
which lifts the whole program into VEX IR. Then a symbolic
execution engine (i.e., SimuVEX) is employed to perform
symbolic execution on the IR directly. To support virtual
execution on IR, Andr simulates system calls in SimuVex.
Angr also follows SMT-Lib to generate constraint models and
uses Z3 as the constraint solver.
2) Settings: Among these tools, Triton dedicates on con-
colic execution, so we can use its native script for concolic
execution. BAP and Angr have rich features for program
analysis and require users to customize their own scripts based
on tool APIs. So we should customize our testing scripts for
BAP and Angr.
For Angr, our script ﬁrst loads the binaries as VEX IR,
and then performs directed symbolic execution [26]. In this
way, the script can examine whether a bomb path is reachable
and outputs the corresponding symbolic values. Angr provides
two operations about whether loading dynamic libraries for
analysis. For a better comparison, we report results for both
the two settings separately. BAP and Triton do not have the
options because all the instructions from dynamic libraries
should be traced.
BAP is a primitive tool that provides no systematic support
for concolic execution. It can only output values that trigger
the current control ﬂow. Therefore, our experiment for BAP
includes both concolic execution and manual checking. We
ﬁrst execute the tool with concrete values that can trigger the
bomb path. If BAP correctly solves the problem, we think
it incurs no errors when handling the challenge. Then we
check whether it suffers path explosions by concolic executing
the program over several other concrete values and examine
whether BAP can merge different values that
trigger the
same path. Finally, we conﬁrm our result via reviewing the
corresponding source code.
C. Evaluation Results
Our results are shown in Table II. Among 22 logic bombs,
Angr achieves the best performance with four cases addressed;
Triton solves 1 case, and BAP solves 2. If a reachable bomb
path is deemed as unreachable, it implies an error occurs and
we label the result with a corresponding error type. If a tool
exits abnormally with exceptions (e.g., memory out), or gives
no feedback for 10 minutes, we label the result with E. It is
worth noting that for all the challenges, there exist at least one
test case which cannot be handled by all the tools. The results
imply all the proposed challenges are non-trivial.
We further investigate the root causes of the results. Angr
lengths of argv, because it
successfully handles variant
enables users to specify a ﬁxed length of bits for the symbolic
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:37 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Experimental results on whether a concolic execution tool can handle our challenging program. The error types
which incur the failures are also reported if applicable. (cid:2): Success; Es#: Fail; E: Exit abnormally; P: Partial success for Angr
if the generated symbolic values are insufﬁcient for triggering the path due to system call simulation.
Category
Challenge
Symbolic Variable
Declaration
Covert Symbolic
Propagation
Parallel Program
Symbolic Array
Accuracy
Challenge
Sample Case
Employ time info in conditions for triggering a bomb
Employ the return values of system calls in conditions
BAP
Es0
Employ web contents in conditions for triggering a bomb Es0
Es0
Es2
Es1
Es2
Es2
(cid:2)
Push symbolic values into the stack and pop out
Save symbolic values to a ﬁle and then read back
Save symbolic values via system call and then read back
Employ the length of argv[1] in conditions
Change symbolic values in an exception (argv[1] = 0)
Change symbolic values in an ﬁle operation exception
Change symbolic values in multi-threads via pthread
Change symbolic values in multi-processes via fork/pipe
Employ symbolic values as offsets for a level-one array
Employ symbolic values as offsets for a level-two array
Contextual Symbolic
Employ symbolic values as the name of a ﬁle
Value
Employ symbolic values as the name of a system call
Symbolic Jump
Floating-point
Number
Employ symbolic values as unconditional jump addresses
Employ symbolic values as offsets to an address array
Employ ﬂoating-point numbers in symbolic conditions
Scalability
Challenge
External Function
Employ symbolic values as the parameter of sin
Call
Employ symbolic values as the parameter of srand
Crypto Function
Infer the plain text from an SHA1 result
Infer the key from an AES encryption result
Tool Performance
Triton Angr Angr-NoLib
Es0
Es0
Es0
Es0
(cid:2)
Es0
E
P
(cid:2)
Es0
E
P
(cid:2)
(cid:2)
Es2
Es2
Es1
Es2
Es2
Es2
Es3
Es3
Es3
Es3
Es3
Es3
Es1
Es1
E
E
Es2
Es2
(cid:2)
Es2
Es3
Es3
Es2
Es2
Es3
Es3
Es1
Es1
Es2
E
Es2
(cid:2)
E
P
E
Es2
Es2
Es2
(cid:2)
Es3
Es2
Es2
Es2
Es3
E
E
E
E
Es2
Es2
P