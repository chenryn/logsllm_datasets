### WHITE PAPER
Â© 2015 IOActive, Inc. All Rights Reserved

**Abusing XSLT for Practical Attacks**

**White Paper**

**Fernando Arnaboldi**
IOActive Senior Security Consultant

**Abstract**

Over the years, XML has been a frequent target for attackers due to flaws in its design and implementations. It is an attractive target because it is used by various programming languages to interconnect applications and is supported by web browsers. In this paper, I will demonstrate how to use XSLT to create documents that are vulnerable to new exploits.

XSLT can be leveraged to compromise the integrity of arithmetic operations, lead to code logic failures, or cause random values to use the same initialization vector. Error disclosure has always provided valuable information, but with XSLT, it is possible to partially read system files that could reveal service or system passwords. Finally, XSLT can be used to breach end-user confidentiality by exploiting the same-origin policy concept in web browsers.

This document includes proof-of-concept attacks demonstrating the potential of XSLT to affect production systems, along with recommendations for secure development.

**Contents**

- **Abstract** ......................................................................................................................... 1
- **Introduction** ................................................................................................................... 3
- **Processors** ............................................................................................................................. 3
- **Gathering Information About Your Target** ................................................................................. 4
- **Obtaining the Current Path** ...................................................................................................... 6
- **Loss of Precision with Large Integers** ........................................................................... 8
- **Loss of Precision with Real Numbers** ......................................................................... 12
- **Insecure Random Numbers** ........................................................................................ 15
- **Pseudorandom Values Are Not Secure** .............................................................................. 15
- **No Initialization Vector (IV)** ................................................................................................ 16
- **Same-Origin Policy Bypass** ......................................................................................... 18
- **Information Disclosure (and File Reading) Through Errors** .......................................... 21

**Introduction**

XSLT (Extensible Stylesheet Language Transformations) is a language designed to manipulate XML documents. It can be used by client-side processors (e.g., web browsers) or server-side processors (standalone parsers or libraries from programming languages).

There are three major versions of XSLT: v1, v2, and v3. This research focuses on XSLT v1.0, as it is the most widely deployed version. 

Certain flaws in XSLT can put the integrity and confidentiality of user information at risk. This paper analyzes some of these flaws and provides recommendations to mitigate these issues.

**Processors**

The XSLT processors analyzed in this research include:

- **Server-side processors:**
  - **Libxslt (Gnome):**
    - Standalone: xsltproc
    - Python v2.7.10, PHP v5.5.20, Perl v5.16, and Ruby v2.0.0p481 (implemented in Nokogiri v1.6.6.2)
  - **Xalan (Apache):**
    - Standalone: Xalan-C v1.10.0 and Xalan-J v2.7.2
    - Java and C++
  - **Saxon (Saxonica):**
    - Standalone: Saxon v9.6.0.6J
    - Java, JavaScript, and .NET

- **Client-side processors:**
  - **Web browsers:**
    - Google Chrome v43.0.2357.124
    - Safari v8.0.6
    - Firefox v38.0.5
    - Internet Explorer v11
    - Opera v30.0

**Gathering Information About Your Target**

It is possible to query the XSLT processor for information about the backend system. This information can be used to target specific flaws in each processor. The XSLT processor discloses specific information when using the `system-property()` method. Typically, only three parameters are available: `version`, `vendor`, and `vendor-url`. However, certain processors provide additional system properties, and web browsers may provide additional details when using JavaScript.

**Figure 1: XML file (disclosure.xml)**
```xml
<Version>  
<Vendor>  
<VendorURL>  
<ProductName>  
<ProductVersion>  
<IsSchemaAware?>  
<SupportsSerialization>  
<SupportsBackwardsCompatibility>  
<NavigatorObject>(JavaScript stuff):  
for (i in navigator) { document.write('navigator.' + i + ' = ' + navigator[i]);}  
```

**Figure 2: Stylesheet associated to get information**

By using the above XML and XSLT, it is possible to obtain the XSLT and JavaScript properties (if supported). The following table summarizes the key information for the tested software, including the vendor and whether it supports JavaScript:

| Processor | XSL Version | Vendor | JavaScript |
|-----------|-------------|--------|------------|
| xalan-c   | 1           | Apache Software Foundation | No |
| xalan-j   | 1           | Apache Software Foundation | No |
| saxon     | 2           | Saxonica | No |
| xsltproc  | 1           | libxslt | No |
| php       | 1           | libxslt | No |
| python    | 1           | libxslt | No |
| perl      | 1           | libxslt | No |
| ruby      | 1           | libxslt | No |
| safari    | 1           | libxslt | Yes |
| opera     | 1           | libxslt | Yes |
| chrome    | 1           | libxslt | Yes |
| firefox   | 1           | Transformiix | Yes |
| internet explorer | 1 | Microsoft | Yes |

**Table 1: Summary of Information Disclosure**

All tested processors exposed some internal information, either the XSLT properties or both XSLT and JavaScript properties.

**Obtaining the Current Path**

Certain attacks may require the specific path where the files are hosted. XSLT provides the `unparsed-entity-uri()` function to obtain this information. A Document Type Definition (DTD) embedded in the XML document is also required:

**Figure 3: XML using a DTD and referencing an XSLT**
```xml
<!DOCTYPE foo [
  <!ENTITY currentpath SYSTEM "file:///etc/passwd">
]>
```

**Figure 4: XSLT using `unparsed-entity-uri()` to disclose the path of `path-disclosure.xsl`**
```xml
<xsl:value-of select="unparsed-entity-uri('currentpath')"/>
```

**Table 2: Path Disclosure on Processors Using `unparsed-entity-uri()`**

| Processor | Path Disclosure |
|-----------|-----------------|
| xalan-c   | No              |
| xalan-j   | Yes             |
| saxon     | Yes             |
| xsltproc  | No              |
| php       | Yes             |
| python    | No              |
| perl      | No              |
| ruby      | No              |
| safari    | Yes             |
| opera     | Yes             |
| chrome    | Yes             |
| firefox   | No              |
| internet explorer | Yes |

All web browsers except Firefox will expose the path of their files. For server-side processors, Xalan-J, Saxon, and PHP are affected. Note that even though certain processors may use the same library, they do not necessarily share the same behavior.

Once initial information has been gathered about the targets, we can explore the different techniques used to exploit their flaws.

**Loss of Precision with Large Integers**

When performing mathematical calculations, one expects the results to be consistent, whether done on a computer or manually. Unfortunately, XSLT 1.0 can produce unexpected results with large numbers.

Consider the following XML document that defines ten values:
```xml
<value>1e22</value>
<value>1e23</value>
<value>1e24</value>
<value>1e25</value>
<value>1e26</value>
<value>10000000000000000000000</value>
<value>100000000000000000000000</value>
<value>1000000000000000000000000</value>
<value>10000000000000000000000000</value>
<value>100000000000000000000000000</value>
```

**Figure 5: bigintegers.xml**

These values are simple numbers, each consisting of the number one followed by multiple zeros. The next step is to represent these values using the `format-number()` function, which converts a number into a string and formats it. Here, we want to add commas to separate thousands:
```xml
<xsl:template match="value">
  <xsl:value-of select="."/>: <xsl:value-of select="format-number(., '#,###')"/>
</xsl:template>
```

**Figure 6: bigintegers.xsl**

Applying this XSLT will result in ten lines, each containing the original value and its formatted representation. The output when parsing the information using web browsers is as follows:

**Figure 7: Web Browser Showing Incorrect Values**

Notice the errors introduced by `format-number()` on libxslt browsers (Safari, Opera, and Chrome on the left). Errors differ depending on whether scientific notation is used. There were no errors for Firefox and Internet Explorer (on the right).

**Figure 8: Server-Side Processors Showing Incorrect Values**

A similar situation occurs with server-side processors. On the left, libxslt processors show a similar set of results. On the right, xalan-c and xalan-j show unexpected results, while Saxon shows the correct output at the bottom right.

**Table 3: Loss of Precision with Large Integers**

| Processor | Result |
|-----------|--------|
| xalan-c (apache) | Errors |
| xalan-j (apache) | Errors |
| saxon | OK |
| xsltproc | Errors |
| php | Errors |
| python | Errors |
| perl | Errors |
| ruby | Errors |
| safari | Errors |
| opera | Errors |
| chrome | Errors |
| firefox | OK |
| internet explorer | OK |

It is also worth noting that processors may not detect missing values in very large integers. Whenever a processor uses more than 17 digits for a number, it cannot track missing numbers. The following statements in XSLT are always considered true:
```xml
<test>1 = 1</test>
<test>10000000000000000000000 = 10000000000000000000000 - 1000000</test>
```

**Figure 9: Missing Values Are Not Detected**

**Recommendation**

Use an XSLT processor capable of high-precision integer arithmetic to avoid incorrect calculations. [CWE-682: Incorrect Calculation (http://cwe.mitre.org/data/definitions/682.html)]

**Loss of Precision with Real Numbers**

Real numbers are difficult to represent exactly in computers. Some operations exhibit anomalous behavior when used with certain values due to how calculations are performed. Consider the following XML document containing two float values:

[Continued in the next section]