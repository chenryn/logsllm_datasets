Abusing	
  HTML5	
DEF	
  CON	
  19	
Ming	
  Chow	
Lecturer,	
  Department	
  of	
  Computer	
  Science	
TuCs	
  University	
Medford,	
  MA	
  02155	
PI:EMAIL	
What	
  is	
  HTML5?	
•  The	
  next	
  major	
  revision	
  of	
  HTML.	
  To	
  replace	
  XHTML?	
  Yes	
•  Close	
  enough	
  to	
  a	
  full-­‐ﬂedged	
  development	
  environment	
•  The	
  three	
  aspects	
  of	
  HTML5:	
–  Content	
  (HTML)	
–  PresentaYon	
  of	
  content	
  (CSS)	
–  InteracYon	
  with	
  content	
  (JavaScript)	
•  S"ll	
  work	
  in	
  progress	
•  Backing	
  from	
  Google,	
  MicrosoC,	
  and	
  of	
  course	
  Apple	
•  Currently	
  supported	
  (not	
  100%)	
  in	
  Chrome,	
  Firefox	
  3.5+,	
  Opera,	
Internet	
  Explorer	
  8,	
  and	
  Safari	
•  Many	
  incompaYbiliYes	
  exist;	
  perform	
  a	
  browser	
  test	
  via	
hdp://www.html5test.com	
•  Will	
  be	
  ﬂexible	
  with	
  error	
  handling	
  (i.e.,	
  incorrect	
  syntax).	
  Older	
browsers	
  will	
  safely	
  ignore	
  the	
  new	
  HTML5	
  syntax.	
HTML5:	
  What’s	
  In?	
  What’s	
  Out?	
• 
In:	
–  New	
  tags,	
  including	
  ,	
  ,	
  ,	
  ,	
  ,	
–  New	
  adributes	
  for	
  tags	
  such	
  as	
  autocomplete,	
  autofocus,	
  pattern	
  (yes,	
  regex)	
  for	
input	
–  New	
  media	
  events	
–  New	
  tag	
  for	
  2D	
  rendering	
–  New	
  form	
  controls	
  for	
  date	
  and	
  Yme	
–  GeolocaYon	
–  New	
  selectors	
–  Client-­‐side	
  storage	
  including	
  localStorage,	
  sessionStorage,	
  and	
  Web	
  SQL	
• 
Out:	
–  PresentaYon	
  elements	
  such	
  as	
  ,	
–  PresentaYon	
  adributes	
  including	
  align,	
  border 
–  ,	
–   
–  Old	
  special	
  eﬀects:	
  ,	
–   
Quick	
  Demos	
•  Video	
  capYoning	
•  Canvas	
•  GeolocaYon	
Structure	
  of	
  an	
  HTML5	
  Document	
An HTML Document 
... 
... 
... 
Everything that you practically know of stays the 
same 
... 
... 
Areas	
  of	
  Concern	
•  The	
  adack	
  surface:	
  client-­‐side	
•  Client-­‐side	
  and	
  oﬄine	
  storage	
–  No	
  longer	
  just	
  cookies	
  and	
  sessions	
–  Compared	
  to	
  cookies	
  and	
  sessions,	
  allows	
  for	
  greater	
  amount	
  of	
data	
  to	
  be	
  stored	
–  What	
  if	
  client's	
  database	
  synchronizes	
  with	
  producYon	
  database	
on	
  server	
  and	
  client's	
  database	
  contains	
  malicious?	
•  Cross-­‐origin	
  JavaScript	
  requests	
•  Sending	
  messages	
  from	
  one	
  document	
  to	
  another	
  (on	
another	
  domain)	
•  Holy	
  smokes,	
  background	
  computaYonal	
  power!	
•  The	
  complexity	
  of	
  HTML5	
  making	
  the	
  browser	
  worse	
localStorage	
  and	
sessionStorage 
• 
Provides	
  key-­‐value	
  mappings	
  (currently,	
  string-­‐to-­‐string	
  mappings)	
• 
Very	
  much	
  like	
  cookies.	
• 
Diﬀerences:	
–  Cookies	
  =>	
  4	
  KB;	
  localStorage	
  =>	
  depends	
  on	
  browser	
  (usually	
  in	
  MB)	
–  Unlike	
  cookies,	
  sessionStorage	
  and	
  localStorage	
  data	
  are	
  NOT	
  sent	
  to	
server!	
–  sessionStorage	
  data	
  conﬁned	
  to	
  browser	
  window	
  that	
  it	
  was	
  created	
  in,	
  lasts	
unYl	
  browser	
  is	
  closed	
–  localStorage	
  has	
  longer	
  persistence,	
  can	
  last	
  even	
  aCer	
  browser	
  is	
  closed	
• 
Trivial	
  to	
  use:	
–  (localStorage | sessionStorage).setItem() 
–  (localStorage | sessionStorage).getItem() 
–  (localStorage | sessionStorage).deleteItem() 
• 
Or	
  use	
  associaYve	
  array	
  syntax	
  for	
  localStorage	
  or	
sessionStorage 
Hardly	
  Any	
  Security	
  with	
  localStorage	
or	
  sessionStorage 
•  If	
  you	
  have	
  an	
  XSS	
  vulnerability	
  in	
  your	
  applicaYon,	
anything	
  stored	
  in	
  localStorage	
  is	
  available	
  to	
an	
  adacker.	
•  Example:	
  document.write(""); 
•  Never	
  a	
  good	
  idea	
  to	
  use	
  store	
  sensiYve	
  data	
  locally.	
•  Someone	
  with	
  access	
  to	
  your	
  machine	
  can	
  read	
everything	
  (via	
  Chrome	
  Developer	
  Tools	
  or	
  Firebug)	
Web	
  SQL	
•  Brings	
  SQL	
  to	
  the	
  client-­‐side	
•  Not	
  new:	
  see	
  Google	
  Gears	
•  Core	
  methods:	
–  openDatabase("Database Name", "Database 
Version", "Database Description", 
"Estimated Size"); 
–  transaction("YOUR SQL STATEMENT HERE"); 
–  executeSql(); 
•  Prepared	
  statements	
  supported	
•  The	
  usual	
  gang	
  of	
  adacks:	
  XSS,	
  SQL	
  injecYon	
•  Demos	
Web	
  SQL	
  (conYnued)	
•  The	
  usual	
  gang	
  of	
  prevenYons:	
–  Use	
  prepared	
  statements	
–  Output	
  encoding	
  (before	
  storing	
  data	
  and	
  aCer	
  fetching	
data)	
•  New	
  wrenches:	
–  Do	
  not	
  store	
  sensiYve	
  data	
  in	
  client-­‐side	
  database	
–  Like	
  localStorage	
  and	
  sessionStorage,	
  someone	
with	
  access	
  to	
  your	
  machine	
  can	
  read	
  everything	
  (via	
Chrome	
  Developer	
  Tools	
  or	
  Firebug)	
–  Can	
  you	
  really	
  trust	
  what	
  is	
  stored	
  on	
  client-­‐side	
  database?	
–  Create	
  database	
  and	
  store	
  data	
  over	
  SSL	
–  Ask	
  user	
  for	
  permission	
  before	
  creaYng	
  and	
  storing	
  local	
database	
ApplicaYon	
  Cache	
• 
Useful	
  for	
  oﬄine	
  browsing,	
  speed,	
  and	
  reduce	
  server	
  load	
• 
The	
  size	
  limit	
  for	
  cached	
  data	
  for	
  a	
  site:	
  5	
  MB	
• 
Example	
  1A,	
  enabling	
  applicaYon	
  cache:	
… 
• 
Example	
  1B,	
  the	
  manifest	
  ﬁle	
  (example.manifest):	