# Abusing HTML5

**DEF CON 19**
- **Speaker:** Ming Chow
- **Title:** Lecturer, Department of Computer Science
- **Institution:** Tufts University
- **Location:** Medford, MA 02155
- **Email:** [PI:EMAIL]

## What is HTML5?
- The next major revision of HTML, designed to replace XHTML.
- It provides a near full-fledged development environment.
- HTML5 consists of three main aspects:
  - **Content (HTML):** Structure and semantics.
  - **Presentation (CSS):** Styling and layout.
  - **Interaction (JavaScript):** Dynamic behavior and interactivity.
- Still in progress but has significant backing from Google, Microsoft, and Apple.
- Currently supported (though not fully) in Chrome, Firefox 3.5+, Opera, Internet Explorer 8, and Safari.
- Many compatibility issues exist; it is recommended to perform browser tests using [html5test.com](http://www.html5test.com).
- HTML5 will be flexible with error handling, allowing older browsers to safely ignore new syntax.

## HTML5: What’s In? What’s Out?
### New Features:
- **New Tags:** `<article>`, `<aside>`, `<details>`, `<figcaption>`, `<figure>`, `<footer>`, `<header>`, `<main>`, `<mark>`, `<nav>`, `<section>`, `<summary>`, `<time>`.
- **New Attributes for Tags:**
  - `autocomplete`
  - `autofocus`
  - `pattern` (supports regular expressions for input validation)
- **New Media Events**
- **<canvas> Tag for 2D Rendering**
- **New Form Controls:**
  - Date and time pickers
- **Geolocation API**
- **New Selectors**
- **Client-Side Storage:**
  - `localStorage`
  - `sessionStorage`
  - Web SQL (now deprecated)

### Deprecated Features:
- **Presentation Elements:**
  - `<font>`
  - `<center>`
- **Presentation Attributes:**
  - `align`
  - `border`
- **Old Special Effects:**
  - `<blink>`
  - `<marquee>`

## Quick Demos
- **Video Captioning**
- **Canvas**
- **Geolocation**

## Structure of an HTML5 Document
```html
<!DOCTYPE html>
<html>
<head>
  <title>Title of the document</title>
</head>
<body>
  <!-- Content here -->
</body>
</html>
```

## Areas of Concern
- **Attack Surface: Client-Side**
- **Client-Side and Offline Storage:**
  - No longer limited to cookies and sessions.
  - Allows for storing larger amounts of data.
  - Potential security risks if client-side databases are synchronized with production databases and contain malicious data.
- **Cross-Origin JavaScript Requests**
- **Inter-Document Messaging (on different domains)**
- **Background Computational Power**
- **Complexity of HTML5 potentially degrading browser performance**

## localStorage and sessionStorage
- **Key-Value Mappings:**
  - Currently, string-to-string mappings.
- **Similarities to Cookies:**
  - Both provide key-value storage.
- **Differences:**
  - **Cookies:** Limited to 4 KB.
  - **localStorage/sessionStorage:** Size depends on the browser (usually in MB).
  - **Data Transmission:** Unlike cookies, sessionStorage and localStorage data are not sent to the server.
  - **Persistence:**
    - **sessionStorage:** Data confined to the browser window and lasts until the browser is closed.
    - **localStorage:** Data persists even after the browser is closed.
- **Usage:**
  - `(localStorage | sessionStorage).setItem(key, value)`
  - `(localStorage | sessionStorage).getItem(key)`
  - `(localStorage | sessionStorage).removeItem(key)`
  - Alternatively, use associative array syntax.

## Security Concerns with localStorage or sessionStorage
- **XSS Vulnerabilities:**
  - If your application has an XSS vulnerability, any data stored in localStorage can be accessed by an attacker.
  - Example: `document.write(localStorage.getItem('sensitiveData'));`
  - Never store sensitive data locally.
  - Someone with access to your machine can read everything via developer tools.
  
## Web SQL
- **Brings SQL to the Client-Side:**
  - Not new, see Google Gears.
- **Core Methods:**
  - `openDatabase("Database Name", "Database Version", "Database Description", "Estimated Size")`
  - `transaction("YOUR SQL STATEMENT HERE")`
  - `executeSql()`
- **Prepared Statements Supported**
- **Security Risks:**
  - **XSS and SQL Injection**
- **Prevention:**
  - Use prepared statements.
  - Output encoding (before storing and after fetching data).
- **Additional Precautions:**
  - Do not store sensitive data in client-side databases.
  - Ensure database creation and data storage over SSL.
  - Ask user permission before creating and storing local databases.

## Application Cache
- **Useful for:**
  - Offline browsing.
  - Improving speed.
  - Reducing server load.
- **Size Limit:** 5 MB per site.
- **Example 1A: Enabling Application Cache:**
  ```html
  <!DOCTYPE html>
  <html manifest="example.manifest">
  <head>
    <title>Title of the document</title>
  </head>
  <body>
    <!-- Content here -->
  </body>
  </html>
  ```
- **Example 1B: The Manifest File (example.manifest):**
  ```plaintext
  CACHE MANIFEST
  # v1.0.0
  CACHE:
  /index.html
  /styles/main.css
  /scripts/app.js
  NETWORK:
  /api/data
  FALLBACK:
  /offline.html
  ```

This revised version aims to provide a clear, professional, and coherent overview of the topic, with improved formatting and structure.