operations. How these operations can be exploited for an attack
is out of our scope.
C. Patch Model and Components
To determine the security impacts with a given patch, we
first need to identify the components in the patch that are related
to security impacts and to build a patch model. Based on our
empirical analysis of existing patches for vulnerabilities, we
identify three key components in determining security impacts.
We then create a patch model that incorporates the components,
as shown in Table II. In this model, the three components are
security operations, critical variables, and vulnerable operations.
(The symbol, +, indicates security operations introduced by the
patch).
• Security operations are used in patches to fix at least one
security impact. Table I shows that missing or wrong security
operations are the most common root causes for security bugs.
From those statistical results, we summarize the common
security operations: security checks (e.g., bound checks,
permission checks), initialization operations, lock or unlock
operations, and pointer nullification.
• Critical variables are the ones whose (invalid) values or
status can lead to security impacts. As such, critical variables
are typically targeted by security operations. For example, a
checked bound variable is a critical variable.
• Vulnerable operations signal the risk of a security bug,
often because they can behave unsafely. Based on our
study, common vulnerable operations include buffer and
array operations, read or write operations, pointer operations,
operations involving critical data structures such as inodes
or files, and resource-release operations.
1.+ Security_op(CV, ...)
...
2. Vulnerable_op(CV, ...)
TABLE II: The common patch model and the three key components:
security operation, critical variable (CV), and vulnerable operation.
The security operation is typically added or updated by a patch.
This model shows that patch updates or adds new security
operations in the vulnerable code to eliminate the security
impacts which are introduced by the vulnerable operations.
Most commonly, a security operation is inserted before a
vulnerable operation to prevent an unsafe state. Evaluation
results in §VI-E show that about 88% of vulnerabilities in the
Linux kernel can precisely or partially fit into this model. Thus,
we can use this model to determine security impacts for most
patches.
D. Problem Scope and Assumptions
In this work, we analyze the bug patches in the Linux
kernel. We choose the Linux kernel as the target program for
the following reasons. (1) The Linux kernel is a foundational
and widely used program. Many other operating systems are
based on the Linux kernel, such as Android. Security bugs in
the Linux kernel may introduce critical security impacts in all
Linux-based systems. Thus, applying patches for security bugs
in the Linux kernel is vital. (2) The Linux kernel is an open-
source program with a well-maintained patch history, which
facilitates patch-based analyses. These reasons motivate us to
choose the Linux kernel as the experiment target. However,
SID is general and applicable to other similar software such as
FreeBSD and Firefox, as discussed in §VII.
We assume that the provided patches correctly fix actual
bugs. We may not correctly obtain the security impacts of
vulnerabilities if the patches are incorrect. Based on the
statistical results in Table I, we choose to determine all the
common security impacts listed in Table III. The current
version of SID does not include NULL-pointer dereference
because it is difficult to exploit in the Linux kernel—the zero
page is protected against being allocated. However, NULL-
pointer dereference can be naturally supported by modeling
the “non-NULL” as a constraint and the NULL dereference as
a vulnerable operation. Table XII shows how to use our model
to cover the patches for other common types of vulnerabilities.
Also, more details about extending SID to detect more types
of bugs are discussed in §VII.
To determine common security operations related to these
impacts, we selected 100 recent vulnerabilities for each security
impact in the Linux kernel from NVD. By manually checking
the patches of these vulnerabilities, we count the security
operations as shown in Table III. Based on this result, we
choose to cover the most common security operations for each
security impact including: (1) bound checks, (2) initialization
operations, (3) permission checks, and (4) pointer nullification.
In our current implementation, we do not include other security
operations such as lock or unlock operations because either
they are not common or they predominantly cause non-
security impacts such as incorrect results. In total, based on
Table III, by calculating the proportion of these covered security
operations against these common security impacts, the current
4
Common security impacts (%)
Permission bypass (21.9%)
Out-of-bound access (16.5%)
Uninitialized use (13.7%)
Use-after-free/double-free (4.3%)
Common security operations (%)
Permission check (59%)
Changing permission flags (8%)
Others (33%)
Bound check (79%)
Reset the size of buffer (10%)
Others (11%)
Initialize the variable (78)%
Others (22%)
Pointer nullification (32)%
Lock or unlock operations (25%)
Others (43%)
TABLE III: Common security operations for fixing common security
impacts.
implementation of SID can support about 38% of vulnerabilities.
However, SID’s approach is generic, and covering more types
of vulnerabilities requires only extra engineering efforts for
modeling and identifying the three patch components. Table XII
shows how to support several more types of bugs which can
cover 13% more of vulnerabilities. More discussion can be
found in §VII.
We further assume that
the bug fixed by a patch is
triggerable, which means that, by providing specific inputs,
the execution can reach the buggy code. Existing techniques,
such as guided fuzzing [55, 61] and symbolic execution over
untrusted inputs [42, 60], can search for inputs that trigger a bug.
However, determining how to trigger a bug can be challenging;
if a bug has security impacts, it is usually worthwhile to fix it,
even if it is not obvious to be triggerable.
1) Security Rules: Security impacts occur when security
rules are violated. To precisely determine if a security impact
exists, we also need to define the corresponding security rule.
The specific security rules help SID construct constraints that
can be solved. With security rules, the determination of security
impacts can be transformed into a constraint-solving problem.
For the security impacts shown in Table III, we define the
corresponding security rules as follows, which are consistent
with the standard definition in CWE [12].
• Out-of-bound access. Memory read and write operations
• Use-after-free and double-free. An object pointer should
• Uninitialized use. A variable should not be used until it
• Permission bypass. Permissions should be checked before
should be within the boundary of the current object.
performing sensitive operations such as I/O.
not be used after the object has been freed.
has been initialized.
III. OVERVIEW OF SID
Given a patch and the target program, SID automatically
determines if the patch fixes some security impacts. In this
section, we show the approach and workflow of SID.
A. The Approach of SID
We now use an example, shown in Figure 3, to illustrate
the symbolic rule comparison approach of SID. This is an
out-of-bound access security bug that is fixed by a patch that
5
inserts a bound check in line 6. Given this patch, the goal of
symbolic rule comparison is to confirm whether the patch fixes
violations of some security rules, e.g., out-of-bound access,
that introduce security impacts.
Symbolically analyzing patched code. First, SID analyzes
the patched version to prove that it will never violate a security
rule. In function iwl_sta_ucode_activate, SID identifies the
security operation in the patch, bound check in line 6. Then,
SID extracts the critical variable, sta_id, from the security
operation. By using data-flow analysis, SID identifies six
potential vulnerable operations located in lines 11, 14, 16,
19, 21, and 23. Each pair of security operation and vulnerable
operation defines a slice, and SID performs under-constrained
symbolic execution against each slice. SID will construct and
collect three sets of constraints. The first set of constraints
are constructed from the security operation of the patch,
e.g., sta_id = IWLAGN_STATION_COUNT. The second
constraint set is similarly collected from the slice through
symbolic execution. The last constraint set corresponds to the
security rule. However, the constraints are constructed in such
a way that they satisfy rather than violate the security rule, e.g.,
in-bound access of stations. Finally, the three constraint sets
are merged and proved to be unsolvable, i.e., the unpatched code
will violate the security rule in all the cases blocked by the patch.
The first and the third constraint sets of the unpatched version
are constructed in a opposite way as in the patched version,
which allows SID to leverage the conservative unsolvability of
under-constrained symbolic execution to precisely determine
the security impacts.
Confirming security impact. At last, if both cases are indeed
unsolvable, SID confirms that the patch is a fix for a security-
rule violation. In other words, the corresponding bug is a
security bug. Symbolic execution allows SID to precisely check
the match between a patch and the corresponding security
Fig. 2: Overview of SID. CSO = Constraints from security operations, CSR = Constraints from security rules, CP = Constraints from paths.
* CVE-2012-6712 */
if (!(priv->stations[sta_id].used ))
if (sta_id >= IWLAGN_STATION_COUNT) {
IWL_ERR(priv,"Error active station id %u "
IWL_ERR(priv, "invalid sta_id %u", sta_id);
return -EINVAL;
1 /* Linux: drivers/net/wireless/intel/iwlwifi/dvm/sta.c
2
3
4 int iwl_sta_ucode_activate(... , u8 sta_id)
5 {
6 +
7 +
8 +
9 +
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27 }
if (priv->stations[sta_id].used) {
IWL_DEBUG_ASSOC(priv,
} else {
return 0;
}
}
"addr %pM\n",
sta_id, priv->stations[sta_id].sta.sta.addr);
"STA id %u addr %pM already present in uCode"
sta_id, priv->stations[sta_id].sta.sta.addr);
priv->stations[sta_id].used |= IWL_STA_UCODE_ACTIVE;
IWL_DEBUG_ASSOC(priv, "Added STA id %u addr %pM\n",
sta_id, priv->stations[sta_id].sta.sta.addr);
Fig. 3: A missing bound-check bug and its patch (lines 6-9).
rule, while the under-constrained approach makes the analysis
conservative about parts of the code outside the analysis scope.
B. The Workflow of SID
Figure 2 is an overview of SID including the following three
main phases: pre-processing, dissecting patches, and symbolic
rule comparison.
Pre-processing. The pre-processing phase includes two tasks.
First, given a specific git commit, it ensures that it is a bug-
fixing patch. Commits for branch merging, documentation,
and code formatting are eliminated. Second, it identifies the
dependent files of the patch, which are collected using standard
control-dependency analysis against the patched code and taint
analysis against the variables involved in the patch, in both a
forward and backward manner. We found that the dependent
files are a single file containing the patch in most cases. It then
prepares the patched code and unpatched code (by reverting
the patch) and invokes LLVM to compile them into LLVM IR
files.
Dissecting patches.
In this phase, SID dissects the patch to
identify the key components according to the patch model
(§II-C). SID first identifies the security operations in both the
6
patched and unpatched versions. SID then extracts involved
critical variables from the identified security operations. Next,
SID applies data-flow analysis against critical variables to
collect vulnerable operations. The data-flow analysis also
helps SID collect slices from security operations to vulnerable
operations for the critical variables. It is worth noting that
security operations and vulnerable operations have a many-
to-many mapping, which means that a single patch may have
multiple slices. After obtaining these slices, SID further employs
symbolic execution to test the feasibility of the slices by
testing if the path conditions of the slices are satisfiable. If
the conditions are unsatisfiable, the path is infeasible, and is
immediately discarded.
Symbolic rule comparison. For the feasible slices, SID then
performs a symbolic rule comparison to confirm the security
impacts of the bug with the approach described in §III-A.
IV. DESIGN OF SID
In this section, we present the design of SID. In particular,
we focus on the static analysis for dissecting patches and
symbolic rule comparison for determining security impacts.
A. Static Analysis for Dissecting Patches
Given a patch and the target program, SID employs static
analysis to (1) identify security operations, critical variables,
and vulnerable operations and (2) construct slices from security
operations to vulnerable operations for the critical variables.
According the the patch model (§II-C), we summarize the patch
patterns for each class of vulnerability in Table IV.
Out-of-bound access
1.+ Security_ck(Bound);
...
...
2. Vulnerable_op(Bound, ...);
Use-after-free or double-free
1. free(Pointer);
2.+ Pointer = NULL;
...
3. Vulnerable_op(Pointer, ...);
Permission bypass
1.+ ret = Perm_func(CV, ...);
2.+ Security_check(ret);
...
3. Vulnerable_op(CV, ...);
Uninitialized use
1.+ Initialize(CV);
...
...
2. Vulnerable_op(CV,... )
TABLE IV: Patch patterns for different classes of vulnerabilities and
the key components in the patches. + denotes the security operation in
the patches, and Vulnerable_op represents some vulnerable operations.
Identifying security operations. First, SID analyzes the
patches to identify security operations. As described in §II-D,
Security operationCritical variablesVulnerable operationSecurity operationVulnerable operationCritical variablesDissecting patchesBug patchPre-processingPatched versionDependent ﬁlesLLVM IRsCompileUnpatched versionDependent ﬁlesLLVM IRsCompileStaticanalysisStaticanalysisSymbolic rules comparisonSolving constraints CP, CSO,CSRUnsolvable!Security bugsCollecting constraintsUnsolvable!C'P, C'SOC'SR,Solving constraintsCollecting constraintsSecurity rulesSID identifies four kinds of security operations: permission
check, bound check, initialization operation, and pointer nul-
lification. Based on the statistical results in Table III, we
summarize common patterns of patches in Table IV. These
patterns describe how security operations fix the corresponding
security impacts caused by the vulnerable operations. For out-
of-bound access vulnerabilities, the patches typically insert the
security operation, bound check, to make sure in-bound access
against a memory object. For permission bypass vulnerabilities,
the patches insert permission check as the security operation.
The permission checks are usually done by checking the
return value of permission functions. For use-after-free and
double-free vulnerabilities, the patches often insert pointer
nullification as the security operation. Since, in the Linux
kernel, NULL check is typically enforced before using a pointer,
nullification becomes a common way for fixing use-after-
free. For uninitialized-use vulnerabilities, the patches instead
initialize a memory object before it is being used. §V will
present further details on analyzing the code to identify the
security operations.
Extracting critical variables. Next, SID extracts the targets
of the identified security operations as critical variables. For
nullification, initialization, and bound-check cases, critical
variables can be easily identified by extracting the involved
variables (not constants). However, the critical variables in
permission-check cases can be challenging to identify. The
method SID uses to identify such critical variables is based
on permission functions (e.g., ns_capable()) which include
both critical variable and capability numbers as parameters.
Non-constant parameters (e.g., objects such as files, inodes, or
subjects such as users) used in such permission functions are
typically sensitive resources whose accesses require permission
checks. Therefore, SID identifies these parameter variables as
critical variables.
Slicing to find vulnerable operations. After extracting the
critical variables, SID then uses data-flow analysis to find
vulnerable operations using extracted critical variables, i.e.,
slicing to find vulnerable operations. An operation is regarded
as a vulnerable operation if it may introduce security impacts via
the critical variables. We do the backward or forward data-flow
analysis against the critical variables to match the vulnerable
operations, according to the corresponding patterns shown in
Table IV. With that, we also obtain slices for critical variables
that involve both security operations and vulnerable operations.
Because vulnerable operations and security operations are
many-to-many mappings, one vulnerable operation or security
operation can be in multiple slices. More details about collecting
vulnerable operations for different kinds of vulnerabilities can
be found in §V-C.
Pruning slices. After extracting these slices, SID removes
slices with the following cases. (1) The critical variables are
newly introduced in the patch. In this case, the unpatched code
will never use them. (2) The vulnerable operations exist only
in the patched version but not in the unpatched version, which
means that the vulnerable operations are also newly introduced
by the patch, and corresponding security impacts will not exist
in the unpatched version.
Removing infeasible slices. Finally, SID removes infeasible
slices using symbolic execution. SID performs the under-
constrained symbolic execution for each slice to collect path
constraints. When reaching the end of the slice, SID tries to
solve the constraints. If these constraints are unsolvable, SID
will discard this slice. Removing unsolvable slices will reduce
false positives and make sure that the unsolvability in symbolic
rule comparison must be related to security-rule violations (not
vacuous), ensuring the effectiveness of SID.
B. Symbolic Rule Comparison
SID further performs a symbolic rule comparison to
determine security impacts and identify security bugs. SID
determines that a patch is for a security bug if the patched and
unpatched versions satisfy both of the following requirements.
• The patched version never violates a security rule.
• The unpatched version always violates the security rule in
the situations excluded by the patch.
The checking against the absolute requirements is possible