title:CANvas: Fast and Inexpensive Automotive Network Mapping
author:Sekar Kulandaivel and
Tushar Goyal and
Arnav Kumar Agrawal and
Vyas Sekar
CANvas: Fast and Inexpensive Automotive 
Network Mapping
Sekar Kulandaivel, Tushar Goyal, Arnav Kumar Agrawal, and Vyas Sekar, 
Carnegie Mellon University
https://www.usenix.org/conference/usenixsecurity19/presentation/kulandaivel
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.CANvas: Fast and Inexpensive
Automotive Network Mapping
Sekar Kulandaivel
Carnegie Mellon University
PI:EMAIL
Tushar Goyal
Carnegie Mellon University
PI:EMAIL
Vyas Sekar
Carnegie Mellon University
PI:EMAIL
Arnav Kumar Agrawal
Carnegie Mellon University
PI:EMAIL
Abstract
Modern vehicles contain tens of Electronic Control Units
(ECUs), several of which communicate over the Controller
Area Network (CAN) protocol. As such, in-vehicle networks
have become a prime target for automotive network attacks.
To understand the security of these networks, we argue that we
need tools analogous to network mappers for traditional net-
works that provide an in-depth understanding of a network’s
structure. To this end, our goal is to develop an automotive
network mapping tool that assists in identifying a vehicle’s
ECUs and their communication with each other. A signiﬁcant
challenge in designing this tool is the broadcast nature of the
CAN protocol, as network messages contain no information
about their sender or recipients. To address this challenge, we
design and implement CANvas, an automotive network map-
per that identiﬁes transmitting ECUs with a pairwise clock
offset tracking algorithm and identiﬁes receiving ECUs with
a forced ECU isolation technique. CANvas generates network
maps in under an hour that identify a previously unknown
ECU in a 2009 Toyota Prius and identify lenient message
ﬁlters in a 2017 Ford Focus.
1 Introduction
Recent efforts have demonstrated numerous vulnerabilities
in automotive networks, particularly those that employ the
CAN communication protocol. Although CAN is the prevail-
ing standard for intra-vehicular communication due to its low
cost and robustness, its broadcast nature has enabled many
exploits initially exposed by the early work of Koscher et
al. [20]. These exploits target the intra-vehicular CAN bus via
either direct physical access [9, 20] or the remote exploitation
of an ECU with existing direct access [26]. For the purpose of
planning their well-known exploit [26], Miller et al. [25] ana-
lyzed the intra-vehicular networks of several vehicles, which
revealed that the 2014 Jeep Cherokee was the “most hack-
able” based on its layout of ECUs. Once the authors gained
access to the CAN via an exploited ECU, they simply had
to discover which ECUs and real physical functions react to
injected messages.
From these anecdotes, we can see that the set of ECUs
and their inter-ECU communication channels determine the
vulnerability of a vehicle’s ECU network. Consequently, we
argue that the automotive security world needs tools similar to
Nmap [21], which are used to map the structure of modern IP
networks. Such mapping tools prove useful in both attack and
defense scenarios, such as identifying potentially malicious
servers, attesting server conﬁgurations, and auditing ﬁrewalls
by identifying available network connections. Analogously,
with such a tool for scanning a car’s network, we could (1)
discover potentially malicious ECUs inserted through an at-
tacker, (2) attest to the network conﬁguration of ECUs over
time, and (3) identify potential ECUs that are vulnerable to a
recent type of attack (§2).
To aid in these scenarios, an ideal network mapper would
require three main outputs: (1) the transmitting ECU for each
unique CAN message, (2) the set of receiving ECUs for each
unique CAN message and (3) a list of all active ECUs in the
vehicle. To ensure that our network mapper is practical for our
envisioned use cases, we ideally want our tool to be (a) fast
to permit analysis of multiple vehicles at a time and limit the
time a vehicle must be running and (b) inexpensive to avoid
requiring costly equipment such as an oscilloscope or logic
analyzer.
Unfortunately, extracting the necessary information to
map these communication channels requires an unreason-
able amount of effort. In the work by Koscher et al. [20], the
authors analyzed the security of a vehicle’s components by
manually extracting ECUs to isolate and interact with them.
This type of analysis requires signiﬁcant time and effort or
access to limited or proprietary information [25]. Second,
obtaining vehicles for extended time and with permission to
disassemble is costly and expensive. Considering new model
years and over-the-air update capabilities, the frequency of
analyzing an intra-vehicular network will quickly increase in
time and cost requirements.
A key challenge we face in realizing this vision in practice
is the lack of source information in CAN messages. CAN
messages are “contents-addressed,” i.e. messages are labeled
USENIX Association
28th USENIX Security Symposium    389
based on their data and provide no indication to the message’s
sender. Another signiﬁcant challenge in mapping a CAN bus
is the broadcast nature of the CAN protocol; we cannot tell
which ECUs have received a message. A CAN message is not
explicitly addressed to its recipients, but a node can indicate
it has correctly received a message (§3).
In this paper, we present CANvas, a system that demon-
strates a fast and inexpensive automotive network mapper
without resorting to vehicle disassembly (§4). Rather than
require physically isolating each ECU, our key insight is to
extract message information by re-purposing two observa-
tions from prior work:
• Identifying message source (§5): Prior work by Cho et
al. [11] state that clock skew is a unique characteristic to
a given ECU and thus build an intrusion detection system
(IDS) that measures this skew from the timestamps of
periodic CAN messages. Using this insight, we envision
a mapper that computes clock skew per unique message
and uses skew to group messages from the same sender.
Unfortunately, due to shortcomings of their approach in
our mapping context, we instead track the clock offset
of two messages over time to determine their source.
• Identifying message destination(s) (§6): In another
prior work [10], the authors propose a denial-of-service
(DoS) attack that exploits CAN’s error-handling protocol
to disable a target ECU. Using this insight, the mapper
could disable all but one ECU via this DoS attack and
observe what messages are correctly received by the
isolated ECU. However, due to shortcomings in their
method w.r.t. our context, we develop a method to force-
fully isolate each ECU and detect which messages the
ECU receives despite the broadcast nature of CAN.
We implement the CANvas mapper on the open-source
Arduino Due microcontroller with a clock speed of 84 MHz
and an on-board CAN controller. We evaluate our mapper
on ﬁve real vehicles (2009 Toyota Prius, 2017 Ford Focus,
2008 Ford Escape, 2010 Toyota Prius, and 2013 Ford Fiesta)
and on extracted ECUs from three Ford vehicles. We show
that CANvas accurately identiﬁes ECUs in the network and
the source and destinations of each unique CAN message in
under an hour (§7).
rithm that tracks a message’s relative clock offset (§5);
Contributions and roadmap: In summary, this paper
makes the following contributions:
• Designing an accurate message source identiﬁcation algo-
• Engineering a reliable message destination identiﬁcation
method by isolating ECUs with a forced shutdown tech-
nique (§6);
• A real implementation that maps ﬁve real vehicles and
extracted ECUs (§7) along with two real examples of mo-
tivating use cases for mapping (§2).
Figure 1: A network mapper could discover potentially
malicious ECUs from an untrusted party.
After deﬁning the automotive network mapping problem
and describing typical CAN bus setups (§3), we highlight the
challenges of identifying message information via the CAN
protocol and provide an overview of our approach (§4). Fi-
nally, we discuss open issues and limitations (§8) and related
work (§9) before concluding the paper (§10).
2 Motivation
In this section, we discuss motivating scenarios for mapping
in the context of intra-vehicular networks and describe charac-
teristics of an ideal version of this security tool. To guide our
design, we draw an analogy to Nmap [21], a popular network
scanning tool that discovers hosts, services, and their inter-
connections in traditional computer networks. We identify
a number of automotive-speciﬁc scenarios to illustrate the
potential beneﬁts of mapping, although this is not meant to
be a comprehensive list.
Malicious ECU discovery: One main feature of Nmap is its
ability to discover hosts, i.e. enumerate devices on the net-
work. In the context of automotive networks, these “devices”
are equivalent to a vehicle’s ECUs. One major automotive
cybersecurity concern (depicted in Figure 1) is the potential
for an attacker to gain access to a physical network and add a
new device [26], which could be a malicious ECU installed by
an untrusted party or even by a vehicle owner who installs a
CAN-enabled device purchased from an untrusted source. For
an attacker that aims to insert this ECU into the network un-
der the guise of a new equipment installation, the ECU could
connect to the existing CAN bus and gain unfettered access
to the CAN. If a defender performs a mapping through the
vehicle’s lifetime, they could verify changes to the network’s
ECUs. We provide an example of this scenario in §7 where
we discover a previously unknown ECU that was installed in
a modiﬁed 2009 Toyota Prius.
Continuous network attestation: Another popular use for
Nmap is performing security audits to identify changes to a
network [21]. Where such audits would identify new servers
or a modiﬁcation in a server’s open ports, an audit in an auto-
motive context could identify changes to the ECUs and their
communication channels. With future over-the-air update ca-
pabilities, automakers will install new ﬁrmware or activate
390    28th USENIX Security Symposium
USENIX Association
ADBECUntampered networkADBECFMaliciously-tampered networkCase 1: Vehicle owner buys device with undisclosed CAN accessCase 2: Untrusted mechanic installs malicious CAN-enabled equipmentmapping and implement ﬁlters that prevent the message from
being received to limit the damage from a potential shutdown
attack. We provide an example of this scenario in §7 where
we discover lenient message-receive ﬁlters in a 2017 Ford
Focus.
Goals: In designing a useful automotive network mapper, we
must consider a few requirements that we impose to ensure
practicality in the context of our motivating scenarios:
Fast: First, we want to limit the amount of time a vehicle
(and its ECUs) are turned on. Also, a fast mapping process
will make it more practical for a user to verify the state of their
vehicle’s network after a repair. Considering these reasons,
we aim to achieve a mapping time of under one hour.
Inexpensive: To permit greater access to the mapper, the
mapper should consist of relatively inexpensive components
and should avoid expensive tools, such as oscilloscopes and
logic analyzers. We aim to limit costs to under $100; a low-
cost approach to network mapping will permit more users for
our system.
Vehicle-agnostic: Every vehicle has a different setup of
ECUs on the CAN bus and can employ additional features
of the CAN protocol. For our mapper to be practical, it must
work on many makes and models of vehicles as well as rely
on only standard CAN features.
Minimally-intrusive and non-destructive: One extreme ap-
proach for mapping a vehicle requires physical disassembly,
which is a very intrusive process and requires a great deal of
access to the target vehicle. We should limit this access to
simply connecting to a diagnostics port on the vehicle. If a
CAN bus is not exposed on this port, we describe a method
of getting access to these buses with minimal disassembly in
§8. Additionally, the mapper must not cause any permanent
damage to the vehicle or its network. Any of our methods
can put the network into a non-ideal state (warning lights on,
gear shift disabled, etc.), but as long as restarting the vehicle
undoes any imposed errors, we satisfy this constraint.
3 Problem Overview
In this section, we give a concrete problem formulation for the
network mapper and discuss technical challenges. We preface
with some necessary background on CAN to understand the
overall problem and mapping challenges.
3.1 CAN basics
To better understand the message information we hope to
gain using a network mapper and the associated challenges in
acquiring that information, we ﬁrst discuss some necessary
background on how the CAN protocol works.
CAN in modern vehicles: All vehicles produced for the
U.S. market in 2008 and after are required to implement the
CAN protocol for diagnostics purposes [4]. Many vehicles
will often employ either one, two or three CAN buses. In the
event of three CAN buses, it is likely that the vehicle has one
bus for powertrain components (engine, transmission, etc.),
Figure 2: A network mapper could compare a generated
map to one found on an online database. Differences
between these maps could identify changes in ECUs
(Case 1) and/or their message conﬁgurations (Case 2).
Figure 3: Assume that only the instrument cluster
should receive messages from the engine. If the exploited
telematics ECU is able to receive engine messages, then
an attacker [10] could shutdown the engine ECU via the
exploited telematics ECU.
different features in an existing vehicle. As the conﬁguration
of the network can change over time, it is necessary for vehi-
cle owners to attest to the vehicle’s expected conﬁguration. If
a user does not own the vehicle over its lifetime as in the mali-
cious ECU discovery scenario, we could implement an online
database where vehicle owners could upload the outputs of
their network maps for comparison against maps generated
from brand-new vehicles. Any differences from the expected
maps could indicate malicious or accidental network changes.
Lenient ﬁlter identiﬁcation: Nmap is often used to perform
port scanning to identify open ports [21], which are potential
vulnerabilities. These “open ports” are analogous to the set
of CAN messages that an ECU is able to correctly receive,
which we refer to as the ECU’s message-receive ﬁlter. Now
consider an attacker who aims to target a safety-critical ECU
(e.g. engine ECU) as depicted in Figure 3. If gaining direct