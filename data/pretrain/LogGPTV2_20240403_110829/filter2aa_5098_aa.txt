---
title: Python
date: 2020-12-23 18:41:20
background: bg-[#436b97]
tags:
    - script
    - interpret
categories:
    - Programming
intro: |
    The [Python](https://www.python.org/) cheat sheet is a one-page reference sheet for the Python 3 programming language.
plugins:
    - copyCode
---
Getting Started
---------------
### Introduction
- [Python](https://www.python.org/)  _(python.org)_
- [Learn X in Y minutes](https://learnxinyminutes.com/docs/python/) _(learnxinyminutes.com)_
- [Regex in python](/regex#regex-in-python) _(quickref.me)_
### Hello World
```python
>>> print("Hello, World!")
Hello, World!
```
The famous "Hello World" program in Python
### Variables
```python
age = 18      # age is of type int
name = "John" # name is now of type str
print(name)
```
Python can't declare a variable without assignment.
### Data Types {.row-span-2}
|                                    |          |
|------------------------------------|----------|
| `str`                              | Text     |
| `int`, `float`, `complex`          | Numeric  |
| `list`, `tuple`, `range`           | Sequence |
| `dict`                             | Mapping  |
| `set`, `frozenset`                 | Set      |
| `bool`                             | Boolean  |
| `bytes`, `bytearray`, `memoryview` | Binary   |
See: [Data Types](#python-data-types)
### Slicing String
```python
>>> msg = "Hello, World!"
>>> print(msg[2:5])
llo
```
See: [Strings](#python-strings)
### Lists
```python
mylist = []
mylist.append(1)
mylist.append(2)
for item in mylist:
    print(item) # prints out 1,2
```
See: [Lists](#python-lists)
### If Else                                        
```python
num = 200
if num > 0:
    print("num is greater than 0")
else:
    print("num is not greater than 0")
```
See: [Flow control](#python-flow-control)
### Loops
```python
for item in range(6):
    if item == 3: break
    print(item)
else:
    print("Finally finished!")
```
See: [Loops](#python-loops)
### Functions
```python
>>> def my_function():
...     print("Hello from a function")
...
>>> my_function()
Hello from a function
```
See: [Functions](#python-functions)
### File Handling {.col-span-2}
```python
with open("myfile.txt", "r", encoding='utf8') as file:
    for line in file:
        print(line)
```
See: [File Handling](#python-file-handling)
### Arithmetic
```python
result = 10 + 30 # => 40
result = 40 - 10 # => 30
result = 50 * 5  # => 250
result = 16 / 4  # => 4.0 (Float Division)
result = 16 // 4 # => 4 (Integer Division)
result = 25 % 2  # => 1
result = 5 ** 3  # => 125
``` 
The `/` means quotient of x and y, and the `//` means floored quotient of x and y, also see [StackOverflow](https://stackoverflow.com/a/183870/13192320)
### Plus-Equals
```python
counter = 0
counter += 10           # => 10
counter = 0
counter = counter + 10  # => 10
message = "Part 1."
# => Part 1.Part 2.
message += "Part 2."   
```
### f-Strings (Python 3.6+)
```python
>>> website = 'Quickref.ME'
>>> f"Hello, {website}"
"Hello, Quickref.ME"
>>> num = 10
>>> f'{num} + 10 = {num + 10}'
'10 + 10 = 20'
```
See: [Python F-Strings](#python-f-strings-since-python-3-6)
Python Built-in Data Types
---------------
### Strings
```python
hello = "Hello World"
hello = 'Hello World'
multi_string = """Multiline Strings
Lorem ipsum dolor sit amet,
consectetur adipiscing elit """
```
See: [Strings](#python-strings)
### Numbers
```python
x = 1    # int
y = 2.8  # float
z = 1j   # complex
>>> print(type(x))
```
### Booleans
```python
my_bool = True 
my_bool = False
bool(0)     # => False
bool(1)     # => True
```
### Lists
```python
list1 = ["apple", "banana", "cherry"]
list2 = [True, False, False]
list3 = [1, 5, 7, 9, 3]
list4 = list((1, 5, 7, 9, 3))
```
See: [Lists](#python-lists)
### Tuple
```python
my_tuple = (1, 2, 3)
my_tuple = tuple((1, 2, 3))
```
Similar to List but immutable 
### Set
```python
set1 = {"a", "b", "c"}   
set2 = set(("a", "b", "c"))
```
Set of unique items/objects
### Dictionary
```python {.wrap}
>>> empty_dict = {}
>>> a = {"one": 1, "two": 2, "three": 3}
>>> a["one"]
1
>>> a.keys()
dict_keys(['one', 'two', 'three'])
>>> a.values()
dict_values([1, 2, 3])
>>> a.update({"four": 4})
>>> a.keys()
dict_keys(['one', 'two', 'three', 'four'])
>>> a['four']
4
```
Key: Value pair, JSON like object
### Casting
#### Integers
```python
x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3
```
#### Floats
```python
x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2") # w will be 4.2
```
#### Strings
```python
x = str("s1") # x will be 's1'
y = str(2)    # y will be '2'
z = str(3.0)  # z will be '3.0'
```
Python Advanced Data Types
-----------------------
### Heaps {.col-span-2 .row-span-3}
```python
import heapq
myList = [9, 5, 4, 1, 3, 2]
heapq.heapify(myList) # turn myList into a Min Heap
print(myList)    # => [1, 3, 2, 5, 9, 4]
print(myList[0]) # first value is always the smallest in the heap
heapq.heappush(myList, 10) # insert 10
x = heapq.heappop(myList)  # pop and return smallest item
print(x)                   # => 1
```
#### Negate all values to use Min Heap as Max Heap 
```python
myList = [9, 5, 4, 1, 3, 2]
myList = [-val for val in myList] # multiply by -1 to negate
heapq.heapify(myList)
x = heapq.heappop(myList)
print(-x) # => 9 (making sure to multiply by -1 again)
```
Heaps are binary trees for which every parent node has a value less than or equal to any of its children. Useful for accessing min/max value quickly. Time complexity: O(n) for heapify, O(log n) push and pop. See: [Heapq](https://docs.python.org/3/library/heapq.html)
### Stacks and Queues {.row-span-3}
```python
from collections import deque
q = deque()          # empty
q = deque([1, 2, 3]) # with values
q.append(4)     # append to right side
q.appendleft(0) # append to left side
print(q)    # => deque([0, 1, 2, 3, 4])
x = q.pop() # remove & return from right
y = q.popleft() # remove & return from left
print(x)    # => 4
print(y)    # => 0
print(q)    # => deque([1, 2, 3])
q.rotate(1) # rotate 1 step to the right
print(q)    # => deque([3, 1, 2])
```
Deque is a double-ended queue with O(1) time for append/pop operations from both sides. Used as stacks and queues. See: [Deque](https://docs.python.org/3/library/collections.html#collections.deque)
Python Strings
------------
### Array-like
```python
>>> hello = "Hello, World"
>>> print(hello[1])
e
>>> print(hello[-1])
d
```
Get the character at position 1 or last
### Looping
```python
>>> for char in "foo":
...     print(char)
f
o
o
```
Loop through the letters in the word "foo"
### Slicing string {.row-span-4}
```java
 ┌───┬───┬───┬───┬───┬───┬───┐
 | m | y | b | a | c | o | n |
 └───┴───┴───┴───┴───┴───┴───┘
 0   1   2   3   4   5   6   7
-7  -6  -5  -4  -3  -2  -1
```
---
```python
>>> s = 'mybacon'
>>> s[2:5]
'bac'
>>> s[0:2]
'my'
```
```python
>>> s = 'mybacon'
>>> s[:2]
'my'
>>> s[2:]
'bacon'
>>> s[:2] + s[2:]
'mybacon'
>>> s[:]
'mybacon'
```
```python
>>> s = 'mybacon'
>>> s[-5:-1]
'baco'
>>> s[2:6]
'baco'
```
#### With a stride
```python
>>> s = '12345' * 5
>>> s
'1234512345123451234512345'
>>> s[::5]
'11111'
>>> s[4::5]
'55555'
>>> s[::-5]
'55555'
>>> s[::-1]
'5432154321543215432154321'
```
### String Length
```python
>>> hello = "Hello, World!"
>>> print(len(hello))
13
```
The len() function returns the length of a string
### Multiple copies
```python
>>> s = '===+'
>>> n = 8
>>> s * n
'===+===+===+===+===+===+===+===+'
```
### Check String
```python
>>> s = 'spam'
>>> s in 'I saw spamalot!'
True
>>> s not in 'I saw The Holy Grail!'
True
```
### Concatenates
```python
>>> s = 'spam'
>>> t = 'egg'
>>> s + t
'spamegg'
>>> 'spam' 'egg'
'spamegg'
```
### Formatting  {.col-span-2}
```python
name = "John"
print("Hello, %s!" % name)
```
```python
name = "John"
age = 23
print("%s is %d years old." % (name, age))
```
#### format() Method
```python
txt1 = "My name is {fname}, I'm {age}".format(fname="John", age=36)
txt2 = "My name is {0}, I'm {1}".format("John", 36)
txt3 = "My name is {}, I'm {}".format("John", 36)
```
### Input
```python
>>> name = input("Enter your name: ")
Enter your name: Tom
>>> name
'Tom'
```
Get input data from console
### Join
```python
>>> "#".join(["John", "Peter", "Vicky"])
'John#Peter#Vicky'
```
### Endswith
```python
>>> "Hello, world!".endswith("!")
True
```
Python F-Strings (Since Python 3.6+)
----------------
### f-Strings usage
```python
>>> website = 'Quickref.ME'
>>> f"Hello, {website}"
"Hello, Quickref.ME"
>>> num = 10
>>> f'{num} + 10 = {num + 10}'
'10 + 10 = 20'
>>> f"""He said {"I'm John"}"""
"He said I'm John"
>>> f'5 {"{stars}"}'
'5 {stars}'
>>> f'{{5}} {"stars"}'
'{5} stars'
>>> name = 'Eric'
>>> age = 27
>>> f"""Hello!
...     I'm {name}.
...     I'm {age}."""
"Hello!\n    I'm Eric.\n    I'm 27."
```
it is available since Python 3.6, also see: [Formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)
### f-Strings Fill Align
```python
>>> f'{"text":10}'     # [width]
'text      '
>>> f'{"test":*>10}'   # fill left
'******test'
>>> f'{"test":*>> f'{"test":*^10}'   # fill center
'***test***'
>>> f'{12345:0>10}'    # fill with numbers
'0000012345'
```
### f-Strings Type
```python
>>> f'{10:b}'        # binary type
'1010'
>>> f'{10:o}'        # octal type
'12'
>>> f'{200:x}'       # hexadecimal type
'c8'
>>> f'{200:X}'
'C8'
>>> f'{345600000000:e}' # scientific notation
'3.456000e+11'
>>> f'{65:c}'       # character type
'A'
>>> f'{10:#b}'      # [type] with notation (base)
'0b1010'
>>> f'{10:#o}'
'0o12'
>>> f'{10:#x}'
'0xa'
```
### F-Strings Others
```python
>>> f'{-12345:0=10}'  # negative numbers
'-000012345'
>>> f'{12345:010}'    # [0] shortcut (no align)
'0000012345'
>>> f'{-12345:010}'
'-000012345'
>>> import math       # [.precision]
>>> math.pi
3.141592653589793
>>> f'{math.pi:.2f}'
'3.14'
>>> f'{1000000:,.2f}' # [grouping_option]
'1,000,000.00'
>>> f'{1000000:_.2f}'
'1_000_000.00'
>>> f'{0.25:0%}'      # percentage
'25.000000%'
>>> f'{0.25:.0%}'
'25%'
```
### F-Strings Sign
```python
>>> f'{12345:+}'      # [sign] (+/-)
'+12345'
>>> f'{-12345:+}'
'-12345'
>>> f'{-12345:+10}'
'    -12345'
>>> f'{-12345:+010}'
'-000012345'
```
Python Lists
------------
### Defining
```python
>>> li1 = []
>>> li1
[]
>>> li2 = [4, 5, 6]
>>> li2
[4, 5, 6]
>>> li3 = list((1, 2, 3))
>>> li3
[1, 2, 3]
>>> li4 = list(range(1, 11))
>>> li4
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```
### Generate {.col-span-2}
```python
>>> list(filter(lambda x : x % 2 == 1, range(1, 20)))
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
>>> [x ** 2 for x in range (1, 11) if  x % 2 == 1]
[1, 9, 25, 49, 81]
>>> [x for x in [3, 4, 5, 6, 7] if x > 5]
[6, 7]
>>> list(filter(lambda x: x > 5, [3, 4, 5, 6, 7]))
[6, 7]
```
### Append
```python
>>> li = []
>>> li.append(1)
>>> li
[1]