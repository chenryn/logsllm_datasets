simulation will never escape notice by at least one verifier—
except, perhaps,
in the event of a hash collision when
constructing the Merkle tree. In other words, in the absence
of hash collisions, soundness is perfect and, consequently, the
overall soundness error is negligible in 𝜇.
□
F. Proof of Theorem 4 (from Section V-B3)
Theorem 4 (Restatement). The 2-verifier SNIP auditing
protocol with hash function Hash: {0, 1}∗ → {0, 1}𝜇 is per-
fectly simulatable and has perfect completeness and soundness
overwhelming in 𝜇.
Proof (sketch). Perfect simulatability and completeness are
immediate consequences of the perfect simulatability and
completeness of the 2-verifier SNIPs (which,
in turn, are
an immediate consequence of the perfect simulatability and
completeness of (2+1)-party auditing). To prove that sound-
ness is overwhelming in 𝜇, we note that even a single
inconsistency-free simulation among the 𝜆 parallel simula-
tions is sufficient to establish well-formedness of the DPF
with probability overwhelming in 𝜇; thus, we can assume
without loss of generality that all simulations are inconsistent
to get an upper bound on soundness error. For a given
inconsistent simulation, there are two possibilities:
1) inconsistencies are confined to the view of server 2; or
2) inconsistencies exist in the view of server 0 or server 1
(or both).
In either case, at least one verifier will observe any incon-
sistencies in the 𝑖 th parallel simulation with probability at
least 1
2 (i.e., conditioned on the 𝑖 th challenge bit, 𝑐𝑖), yielding
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
161968
an overall soundness loss of at most 1/2𝜆 relative to the 3-
verifier SNIP, which has soundness error negligible in 𝜇. □
G. Security Analysis
This appendix provides a formal definition and proof
sketch for Sabre in the ideal-world/real-world simulation
In the ideal world, all Sabre clients interact
paradigm.
through some benevolent trusted party T (the “ideal func-
tionality”), who faithfully executes the requested actions
while remaining impervious to cryptographic attacks. In the
real world, we replace T with one of the 2- or 3-server Sabre
protocols described in the main text. We then consider a
semi-honest attacker A who controls an arbitrary number
of readers and writers in addition to (at most) one of the
Sabre servers.
Informally, we wish to show that A cannot exploit its
privileged position as a Sabre server to compromise sender
anonymity. We do this by exhibiting an efficient simulator
that interacts with the ideal functionality and then attempts
to sample “simulated” views from a distribution close to
the one describing A’s view in the real world. We then
ask whether A can adaptively conjure up sequences of
events allowing it to distinguish between real and simulated
views; if not, we conclude that the real Sabre protocols leak
essentially nothing beyond what is leaked by their ideal-
world counterparts.
1) Sabre in the ideal world: The ideal world trusted party T
exposes six public interfaces. In addition to servicing requests
to these interfaces, T curates persistent variables that capture
both the state of the system and any side information that
Sabre servers can infer in the real world (without T revealing
this side information to the simulator, faithful simulations
would not be possible):
- 𝑚, 𝑤 ∈ N respectively track the numbers of readers and
writers in the system (both values are initially 0);
- addr𝑗 denotes the mailbox address/bucket index at which
reader 𝑗 will check for messages
- known denotes the sets of readers whose mailbox ad-
dresses/bucket indexes have been disclosed to A (it is
initially ∅);
- evil denotes the set of “corrupted” readers whose mail-
boxes are readable by A (it is initially ∅);
- log is an append-only log of metadata associated with all
requests received by T to date (it is initially an empty
list); and
- 𝐷 is the actual database of mailboxes/buckets (it is
initially an empty list).
The RegisterWriter interface onboards a new writer to
the system. This interface has no immediate counterpart in
real world; rather, it captures the fact that real-world Sabre
servers may be able to distinguish certain writers from one
another (e.g., by their IP addresses).
Algorithm 1 RegisterWriter()
1: 𝑤 ← 𝑤 + 1
2: return 𝑤
// increment writer count
// w is the writer’s "identity"
The RegisterReader interface onboards new readers to
the system. In the bulletin-board model, this interface has no
immediate counterpart in the real world; rather, it captures
the fact that readers and writers need to agree on a bucket
through which to pass messages. In the mailbox model, this
interface corresponds to mailbox registration.
Algorithm 2 RegisterReader()
1: 𝑚 ← 𝑚 + 1
2:
if Sabre-BB then
?← {0, 1}𝑛
addr𝑚
evil ← evil ∪ {𝑚}
addr𝑚 (cid:66) 𝐹( ˜𝑘, 𝑚)
known ← known∪ {𝑚}// server-computable addresses
// random address
// buckets are world-readable
3: else if Sabre-M then
// increment reader count
// PRF-computed address
return ⊥
if ( 𝑗 > 𝑚) then
log ← log∥"r:𝑚"
4: end if
5:
6: return 𝑚
// m is the reader’s identity
The GetAddress interface allows A to request the mailbox
address (or bucket index) of a given reader. Note that we
differentiate between A controlling a reader versus merely
knowing its mailbox address: To write messages to a mailbox,
A need only know its address; to read from the mailbox, A
must control the reader.
Algorithm 3 GetAddress(𝑗)
1:
2: known ← known ∪ { 𝑗}
3: return addr𝑗
The CorruptReader interface allows A to take control of
// no such reader!
// add j to known addresses
// then disclose j’s address
an arbitrary reader (whose address A already knows).
Algorithm 4 CorruptReader(𝑗)
1:
if ( 𝑗 ∉ known) then
evil ← evil ∪ { 𝑗}
The Write interface allows A to write a message for a
given reader, provided it knows that reader’s address. This
interface also allows A to initiate write requests that fail
address verification or auditing (by setting 𝑑  𝑤) then
if ( 𝑗 > 𝑚 ∨ addr ≠ addr𝑗) then
return ⊥
log ← log∥"w:(𝑖,⊥)" // address check failed
return ⊥
// abort without writing
log ← log∥"w:(𝑖, 𝑑)" // audit failed at level d
return ⊥
// abort without writing
// this is a valid write
4:
5: 𝐷𝑗 ← 𝐷𝑗 + 𝑀
// effectuate the write
log ← log∥"w:(𝑖,⊤)"
if (𝑑 ≠ ℎ) then
// no such writer
return ⊥
2:
2:
3:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
171969
The EndEpoch interface ends the current epoch, writing all
corrupted readers’ mailbox/bucket contents to the log.
Algorithm 6 EndEpoch()
1: msgs ← {( 𝑗, 𝐷𝑗) | 𝑗 ∈ evil} // corrupted mailbox contents
2: 𝐷 ← ⟨0, 0, . . . , 0⟩
// re-initialize the database
// new epoch after this point
3:
log ← log∥"e:msgs"
2) Security theorem: We now present and sketch a proof
for Sabre-M’s main security theorem (the theorems and
proofs for Sabre-BB and Sabre-M0 through Sabre-M2 are
similar). Intuitively, the theorem asserts that there exists a
PPT simulator that, given only the append-only log and PRF
key ˜𝑘 as input, can convincingly simulate the view of an
arbitrary semi-honest Sabre server.
Theorem 5 (somewhat informal). Sabre is a secure SAM
scheme; that is, there exists a PPT simulator that, given the
PRF key ˜𝑘 and side information reflected in log, simulates the
view of a (semi-honest, PPT) real-world attacker A controlling
at most one Sabre server and an arbitrary subset of writers and
readers.
Proof (sketch). There are 5 distinct types of entries that can
appear on log; we briefly describe how the simulator deals
with each of these five message types in turn.
1. "r:𝑚": This entry appears in the log when the 𝑚th
reader registers her mailbox.
In Sabre-M, mailbox registration consists of a server
evaluating 𝐹( ˜𝑘, 𝑚) and then sending the result to the
registrant; hence, the simulator (who is privy to ˜𝑘) need
only invoke addr𝑚 ← 𝐹( ˜𝑘, 𝑚) and record the resulting
mailbox address in its simulation transcripts.
2. "w:(𝑖,⊥)": This entry appears in the log when reader 𝑖
submits a write request that fails the mailbox address check.
In Sabre-M, the servers verify addresses by computing
[addr′] ← 𝐹( ˜𝑘, [𝑖]) and then comparing it against [addr];
hence, the simulator (who is privy to ˜𝑘) first invokes the
simulator for the DPFs to sample a valid-looking DPF key,
and then it samples uniform random values for [𝑖]𝑏 and
[addr]𝑏, and then it simulates the computation of [addr] ←
𝐹( ˜𝑘, [𝑖]). Finally,
it computes 𝐴𝑏 = [addr]𝑏 + [addr′]𝑏,
samples a uniform random 𝐴1−𝑏 ≠ 𝐴𝑏, and then records
all of these values in its simulation transcript.
3. "w:(𝑖, 𝑑)": This entry appears in the log when reader 𝑖
submits a write request that passes the mailbox check but
fails auditing at level 𝑑.
The simulator invokes the simulator for the DPF to
produce a valid-looking DPF key, and then it repeatedly
invokes the simulator for Du-Atallah multiplication to
construct an accepting proof up to level 𝑑 − 1. In Step 2
of level 𝑑, it samples uniform random 𝑣 (¯𝑖𝑑)
1 with
0
𝑣 (¯𝑖𝑑)
0 ≠ 𝑣 (¯𝑖𝑑)
(causing the servers to reject), and then it
1
records these values in its simulation transcript.
and 𝑣 (¯𝑖𝑑)
4. "w:(𝑖,⊤)": This entry appears in the log when reader 𝑖
successfully writes a message to some reader.
The simulator proceeds exactly as in the case of
"w:(𝑖, 𝑑)", except it does not reject along the way and
instead accepts after level ℎ. It then invokes the full-
domain evaluation on its (simulated) DPF key and adds the
resulting vector component-wise into its mailbox database.
5. "e:msgs": This entry appears in the log when the epoch
ends (at which point all readers receive any messages that
were written into their mailboxes.
The simulator uses the messages in msgs together with
its simulated mailbox database to solve for the matching
shares from server 𝑏 − 1 and then it records these values
in its simulation transcripts for each corrupted reader.
□
H. Sabre Communication Cost
𝑖
to the communication cost described in Table I.
In this section, we will present the calculations that lead
We first calculate the size of 𝑀𝑏→(1−𝑏)
. The transcript from
server 0 to server 1 include the following (the transcript of
server 1 to server 0 is the same).
(i) shares of the children of the root = 16 bytes, (ii) oblivi-
ous encryption, FPRG = (4·3·s·r/8)(ℎ−1) bytes, (iii) conditional
swap, FSWAP = 16 · ℎ bytes, (iv) applying the correction word
= 16 · (ℎ − 1) bytes, and (v) computing the next flag bit
(1/8+1/8)·(ℎ−1) bytes. size of 𝑀𝑏→(1−𝑏)
sr)(ℎ−1)
for 𝑏 ∈ {0, 1}. (i) seed to
Next, we calculate the size 𝑀 2→𝑏
generate the randomness = 16 bytes,, (ii) oblivious encryp-
tion, FPRG = (4 · 3 · s · r/8)(ℎ − 1), (iii) applying the correction
word = 16 · (ℎ − 1) bytes, (iv) conditional swap, FSWAP = 16 · ℎ
bytes, and (v) computing the next flag bit (1/8)·(ℎ−1) bytes.
size of 𝑀𝑏→(1−𝑏)
8+3
= 16+(16 1
= 16+(32 1
sr)(ℎ−1)
2
𝑖
𝑖
𝑖
8 + 3
2
1) 2-Verifier Sabre:
a) Client to server 𝑏: In the 2-Verifier Sabre, the client
sends the following to server 𝑏, for 𝑏 ∈ {0, 1}. (i) DPF seed,
and (ii) Proof of the well-formedness of the DPF.
Proof includes the following:
1) Merkle Tree Root = (16 bytes)
2) for one set of 64 iterations: (i) 𝑀𝑏→(1−𝑏)
, and
= (2 · 16 = 32) bytes.
3) for the other set of 64 iterations: (i) a seed = (64 · 16)
) = (2 · 16 = 32) bytes.
2) 3-Verifier Sabre: In a 3-Verifier Sabre, the client sends
(iii) 𝐻 2→(1−𝑏)
bytes, and (ii) 𝐻 𝑏→(1−𝑏)
, (ii) 𝑀 2→𝑏
, 𝐻 (1−𝑏)→𝑏
, 𝐻 2→𝑏
𝑖
𝑖
𝑖
𝑖
𝑖
𝑖
the following messages to server 2.
1) Merkle Tree Root = (16 bytes)
2) 𝐻 𝑏→(1−𝑏), 𝐻 (1−𝑏)→𝑏 = (2 · 16 bytes)
3) seed = 16 bytes.
Similarly,
server 𝑏 (𝑏 ∈ {0, 1}).
1) Merkle Tree Root = (16 bytes)
2) 𝑀𝑏→(1−𝑏), 𝑀 (1−𝑏)→𝑏
3) 𝐻 2→𝑏 = (16 bytes).
the client sends the following message to
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 14:58:18 UTC from IEEE Xplore.  Restrictions apply. 
181970