UC and forwards PPUC to C while keeping skUC secret.
• Query Phase: A and C mimic the Sipster protocol:
(1) When A sends a consume query (Consume, i) to C, C runs
TokenGen on input skSM and state τπ(i). The internal state
τπ(i) is updated. The output tk = ( ˜R, σ ˜R) is forwarded to A.
(2) A runs ReceiptGen(tk, vkSM, skUC) to obtain rcpt. If rcpt (cid:44)
⊥, A sends rcpt to C.
(3) C checks if rcpt is valid w.r.t. PPUC. If not, C aborts the
game. Otherwise, C adds rcpt to the set RCπ(i).
The above queries can be issued polynomially many times.
232Sipster: Settling IOU Privately and Quickly with Smart Meters
ACSAC ’21, December 6–10, 2021, Austin, Texas, USA
• Corruption Query: In the Query Phase, A can send a corrup-
tion query (Corrupt, i) to C at any time. C will return π(i)
and add i to ID. This query can be issued polynomially many
times.
• Challenge Phase: When A issues a bill-generation query, C
checks for all i ∈ [N] \ ID, whether RCπ(i) is empty. If
there are less than two non-empty RCπ(i), it aborts; otherwise,
for all non-empty RCπ(i), it runs BillGen on inputs (skSM,
IDi , t, τπ(i)) to get billi = (τπ(i), mIDi,t , σ B
IDi,t). Then, C runs
CombineReceipt on inputs (billi , RCπ(i), PPUC) to obtain the
IDi,t , σ R
IDi,t . C sends all such (mIDi,t , σ B
results σ R
IDi,t) to A.
• Guess Phase: A returns a pair (j, jπ) as its guess.
Definition 5 (Privacy). Sipster satisfies privacy, if the advan-
tage of any PPT adversary defined by AdvPriv
= | Pr[jπ = π(j)|j (cid:60)
A
ID] − 1
n |, is negligible in λ, where n is the number of non-empty
RCi ’s, i ∈ [N] \ ID.
The privacy game mimics the interaction among the UC, RU,
and SM. Definition 5 guarantees that neither the identity nor the
payment amount is leaked to the adversary. In the game, A has
full control over when to see receipt requests for IDπ(j) in the
Bill Settlement Phase. A can also determine the payment amount
for IDπ(j) by choosing how many Consume queries are issued for
IDπ(j). The security notion says that such a powerful adversary still
cannot guess π(j) with a non-negligible advantage. It means that
UC can infer neither the RU’s identity nor the payment amount in
the Bill Verification Phase. Effectively, RUi remains hidden among
the set of non-corrupted residential users that have made payments.
C.2 Soundness
We summarize the two properties of unforgeability and double-
spending prevention as the soundness property. Similarly, we define
this security notion via a game.
In the soundness game, adversary A plays the role of the RU
while challenger C plays the roles of both the SM and UC.
and a challenger C proceeds in steps as follows:
Definition 6. The soundness game between an adversary A
• Setup Phase: Challenger C runs the setup algorithm for the UC
and forwards PPUC to A. C runs the key generation algorithm
to get a verification/signing key pair (vkSM, skSM), and gives
the verification key vkSM to A. C plays the role of the UC and
one smart meter instance SM with the signing key skSM above.
The internal state of the SM is then initialized. A chooses an
identity ID∗ and a billing period t∗, and informs C a payment
amount K.
• Challenge Phase: A and C mimic the Sipster protocol:
(1) C runs the stateful algorithm TokenGen on input (skSM, τ )
for K times to obtain a set of K tokens {tki}K (the internal
state τ is also updated). All tokens are forwarded to A.
(2) At the end of the billing period t∗, C executes BillGen on
input (skSM, ID∗, t∗, τ ) to generate the bill for identity ID∗,
and forwards the resulting bill = (τ , mID∗,t∗ , σ B
ID∗,t∗) to A.
• Query Phase: C initializes a counter ctr = 0. A sends receipt-
generation queries:
(1) A sends tk′ to C;
(2) If ctr ≥ K, C ignores the query; otherwise, C computes
rcpt = ReceiptGen(tk′, vkSM, skUC). If rcpt (cid:44) ⊥, incre-
ments the counter ctr = ctr + 1, and sends rcpt to A; other-
wise, ignores the query.
• Output Phase: A outputs πID∗,t∗. C accepts if πID∗,t∗ is a valid
proof for ID∗ and period t∗.
Definition 7 (Soundness). Sipster satisfies soundness if the
advantage of any PPT adversary in the above game, defined by
AdvBill
A
= Pr[C accepts], is negligible in the security parameter λ.
C.3 Proof for Privacy
= 0.
Theorem 1. Sipster satisfies privacy and AdvPriv
A
Proof. In the Query Phase, the response of a (Consume, i) query
is of the form ( ˜R, σ ˜R) = (дr R, Sign(skSM, σ ˜R)). Because all r’s are
chosen independently from a uniform distribution, what A sees in
the whole Query Phase is a series of independently and identically
distributed random group elements and signatures on them. Such
distribution is independent of the index i.
IDi,t , σ R
IDπ(t),t , σ R
IDπ(t),t , σ R
IDπ(t),t , σ R
IDπ(t),t substitute RIDi,t , σ B
IDπ(t),t) is identically distributed as(RIDi,t , σ B
Assume that challenger C does not abort. We argue that the
view of A in the Challenge Phase is independent of the random
permutation π(·). Let i be an arbitrary index such thatRCπ(i) is non-
IDπ(t),t). In
empty. A sees (mIDπ(t),t = (RIDπ(t),t , IDi , t), σ B
essence, RIDπ(t),t , σ B
IDi,t , σ R
IDi,t
respectively. Therefore, the problem reduces to showing (RIDπ(t),t ,
IDπ(t),t , σ R
IDi,t).
σ B
IDi,t ) de-
The last two elements (σ B
IDi,t )
pend on the first one (mIDπ(t),t and mIDi,t ): σ B
is a signature on mIDπ(t),t (resp. mIDi,t ); σ R
IDπ(t),t (resp.
IDπ(t),t
IDi,t ). So, the problem further reduces to showing RIDπ(t),t
σ R
IDi,t
and RIDi,t are identically distributed.
To see why they are identically distributed, note that RIDπ(t),t
(as a part of the internal state τπ(t)) is a random group element
independent of RIDi,t as well as all r’s in the Query Phase. (See
Algorithm 1 and Algorithm 3.) A similar conclusion also holds
for RIDi,t . As a result, the distributions of RIDπ(t),t and RIDi,t are
identical even conditioned on what A saw in the Query Phase. □
C.4 Proof for Soundness
IDπ(t),t ) and (σ B
= Rα
IDπ(t),t (resp. σ B
IDi,t , σ R
= Rα
Theorem 2. Sipster satisfies soundness if SS is an EUF-CMA-
secure digital signature scheme and the gap-DH problem (Definition 3)
is hard in G1.
Proof. By contradiction, there exists an adversary A breaking
the soundness game with a non-negligible probability. We show that
one of the following must hold: (1) the underlying digital signature
scheme SS is not EUF-CMA secure; (2) the gap-DH problem (Defi-
nition 3) is easy in G1.
ID∗,t∗).
We classify A into two types. A Type-I adversary A satisfies the fol-
lowing requirements: (1) ˜mID∗,t∗ in πID∗,t∗ equals mID∗,t∗ received
from C in the Query Phase (in bill = (τ , mID∗,t∗ , σ B
ID∗,t∗)), and (2)
for all the receipts rcpti’s received in the Query Phase, their cor-
responding tokens tki’s are all received from C in the Challenge
Suppose the output of A is πID∗,t∗ = ( ˜mID∗,t∗, ˜σ B
ID∗,t∗, ˜σ R
233ACSAC ’21, December 6–10, 2021, Austin, Texas, USA
Sherman S. M. Chow, Ming Li, Yongjun Zhao, and Wenqiang Jin
least one forgery (a new token tk′) in the Query Phase or from
πID∗,t∗ (a forgery for ˜mID∗,t∗
Combining the two cases above, we conclude that if there exists
A breaking the soundness game with a non-negligible probability,
then either SS is not EUF-CMA-secure, or the gap-DH problem is
□
easy in G1.
(cid:44) mID∗,t∗).
q
Phase. Any adversary who is not Type-I is a Type-II adversary.
Clearly, any adversary must be either Type-I or Type-II.
Case One: A is Type-I. We build a reduction BGap-DH that solves
the gap-DH problem with a non-negligible probability by using
A. Suppose BGap-DH receives the gap-DH challenge (д, X , Y) =
(д, дx , дy). BGap-DH plays the role of C in the soundness game.
BGap-DH simulates the Setup Phase of the soundness game as
follows: it simulates the output of the setup procedure for UC
as PPUC = (G1, GT , д, X). It runs the KGen for SS to gener-
ate (vkSM, skSM). After receiving a payment amount K from A,
BGap-DH selects a random index i ∈ [1, K]. BGap-DH selects (K − 1)
random exponents (r1, . . . , ri−1, ri +1, . . . , rk) ← ZK−1
and com-
putes R1 = дr1 , . . . , Ri−1 = дri−1 , Ri = Y , Ri +1 = дri +1 , . . . , RK =
дrK . BGap-DH then simulates the Challenge Phase by computing, for
all j ∈ [1, K], tkj = (Rj , Sign(skSM, Rj)). It also selects rID∗,t∗ ← Zq,
computes RID∗,t∗ = дr1 · · · дri−1Yдri +1 · · · дrK /дrID∗,t∗ . The output
of BillGen is bill = (τ , mID∗,t∗ , σ B
ID∗,t∗), where τ = (rID∗,t∗ , RID∗,t∗)
and mID∗,t∗ = (RID∗,t∗ , ID∗, t∗). σ B
ID,t can be computed by using
skSM. The simulations of the Setup and the Challenge Phases are
perfect.
By our assumption that A is Type-I, we know that all the queries
A made in the Query Phase come from {tkj}K . Without loss of
generality, we assume that A makes (K − 1) queries to BGap-DH . If
the query tk′ = tkj for some j (cid:44) i, BGap-DH responds with X rj . If
tk′ = tki, BGap-DH aborts and restarts the simulation from scratch.
The probability that BGap-DH does not abort in the Query Phase
is 1/K, which is non-negligible. Conditioned on the event that
BGap-DH does not abort, the simulation is also perfect in the Query
Phase. Then, by our assumption, A outputs an accepting πID∗,t∗
with a non-negligible probability. BGap-DH extracts σ R
ID∗,t∗ from
ID∗,t∗ · X rID∗,t∗/(X r1 · · · X ri−1X ri +1 · · · X rK ) as
πID∗,t∗ and outputs σ R
the solution for the gap-DH problem.
ID∗,t∗ · X rID∗,t∗/(X r1 · · · X ri−1X ri +1 · · · X rK ) is the
ID∗,t∗ must satisfy the pairing equation:
correct solution, recall that σ R
To see why σ R
e(σ R
ID∗,t∗ , д) = e(RID∗,t∗ , X)
= e(дr1 · · · дri−1Yдri +1 · · · дrK /дrID,t , X)
= e(X r1 · · · X ri−1ZX ri +1 · · · X rK /X rID,t , д)
where Z = Y x is the expected solution of the gap-DH problem. It
ID∗,t∗ · X rID∗,t∗/(X r1X r2 · · · X ri−1X ri +1 · · · X rK )
follows that Z = σ R
by simple rearrangement of terms, which means BGap-DH solves
the gap-DH problem with a non-negligible probability.
Case Two: A is Type-II. Given a Type-II adversary, it is easy to
construct a reduction BEUF-CMA that breaks the EUF-CMA-security
of the signature scheme SS. BEUF-CMA simply uses the vk it re-
ceived in its EUF-CMA-game as vkSM to simulate the soundness
game for A without knowing skSM = sk. The only algorithms that
skSM would be used are TokenGen and BillGen. For the former,
BEUF-CMA queries the signing oracle for K random group elements
to compute a set of K tokens {tki}K . For the latter, it queries the
signing oracle on input mID∗,t∗ to compute the output of BillGen.
The message spaces for either kind of requests are different. By as-
sumption, a Type-II adversary A outputs an accepting proof πID∗,t∗
with a non-negligible probability. Thus BEUF-CMA can extract at
234