• Multilinear maps. We integrate in libmmap to support both the CLT and GGHLite mmaps.
• Program compilers. We support MBPs output by cryfsm, using the Sahai-Zhandry ob-
fuscator [SZ14].
Point function obfuscation. We evaluated our implementation by obfuscating point func-
tions, namely, functions that output 0 on a single (secret) input, and 1 otherwise. Previous
work [AHKM14] also evaluated obfuscation for point functions, but was only able to success-
fully obfuscate 14-bit point functions with an mmap security parameter of λ = 60. As noted by
Bernstein et al. [BHLN15], the secret input of an n-bit point function can be recovered by simply
enumerating over all 2n possible inputs.
In our experiments, we set n = λ, and consider point
function obfuscation for 40-bit and 80-bit inputs.
6The reason we consider VBB versus indistinguishability obfuscation is that we consider point functions, for which
VBB obfuscators are believed to exist.
17
)
B
G
(
e
z
i
S
t
x
e
t
r
e
h
p
C
i
1,000
100
10
1
0.1
0.01
2
10
20
GGHLite (λ = 80)
GGHLite (λ = 40)
CLT (λ = 80)
CLT (λ = 40)
30
40
50
Input Base d
60
70
80
Figure 7.1: Estimates for the ciphertext size (in GB) for point function obfuscation, for domain sizes
N = 280 = 2λ and N = 240 = 2λ. In the case of λ = 80, the minimums are achieved at d = 19 for GGHLite
and d = 8 for CLT. In the case of λ = 40, the minimums are achieved at d = 9 for GGHLite and d = 6 for
CLT.
The MBP for a λ-bit point function is of length λ and consists of a total of 2λ matrices, each of
dimension 2× 2. As a small optimization, we can apply dimension reduction to obtain a branching
program where the ﬁrst pair of matrices need only be of dimension 1 × 2. The more signiﬁcant
optimization comes by condensing the input representation through increasing the input base d.
The total number of encodings that we must publish in the obfuscation of a λ-bit point function
can be computed as M = 2 + 4· d· ‘, where ‘ is the length of the MBP. We estimate the ciphertext
size for various choices of bases in Figure 7.1, which incorporates our estimations for the size of a
single encoding in GGHLite and CLT for λ = 40 and λ = 80.
• For λ = 40, we ﬁnd that the minimal ciphertext size for domain size N = 240 is produced
using MBPs under base 9 and length 13 for GGHLite, and base 6 and length 16 for CLT.
• For λ = 80, we ﬁnd that the minimal ciphertext size for domain size N = 280 is produced
using MBPs under base 19 and length 19 for GGHLite, and base 8 and length 27 for CLT.
Obfuscator implementation. Our implementation is in a mix of Python and C, with Python
handling the frontend and with C handling all the computationally expensive portions, and provides
interfaces to both obfuscate (obf) and evaluate (eval) an MBP. We parallelize the encoding of
the elements in the MBP by using a threadpool and delegating each encoding operation to a
separate thread. Once all the threads for a given matrix in the MBP complete, we then write the
(encoded) matrix to disk. Thus, the threadpool approach has a higher RAM usage (due to keeping
multiple encodings in memory as we parallelize) than encoding one element at a time and letting
the underlying mmap library handle the parallelization, but is more eﬃcient.
Other obfuscators. Our obfuscator is built upon improvements inspired by the Sahai-Zhandry
obfuscator, which is built on the general obfuscator described by Barak et al. [BGK+14] and Ananth
et al. [AGIS14]. In addition to these obfuscators, we also implemented the Zimmerman [Zim15]
obfuscator. However, because the Zimmerman obfuscator induces a seemingly unavoidable lower
bound on the degree of multilinearity for the inputs we consider, we found that the Zimmerman
18
obfuscator was not competitive with the obfuscator we implemented. More speciﬁcally, the Zim-
merman obfuscator requires that the degree of multilinearity for the obfuscation of any program be
at least twice the number of inputs that the circuit accepts—a cost that may be insigniﬁcant when
obfuscating other programs, but was too high for point functions (even when we tried to increase
the input base representation to minimize this cost), and hence unsuitable for our purposes.
8 Experimental Analysis
All of our experiments were performed using the Google Compute Engine servers with a 32-core
Intel Haswell CPU at 2.5 GHz, 208 GB RAM, and 100 GB disk storage.
8.1 MIFE Experiments
We evaluated our multi-input functional encryption constructions with two applications: order-
revealing encryption (ORE) (cf. §6.2) and three-input DNF (3DNF) encryption (cf. §6.3). In §6,
we showed how we can accurately estimate the ciphertext size from parameters derived from the
input size and the security parameter λ, and our experiments conﬁrmed that these parameter
estimates are reasonably accurate (all within 1–2% of our reported values).
Additionally, we assessed the performance of the MIFE interface algorithms keygen, encrypt, and
eval, along with memory utilization during the encrypt computation, which was by far the most
costly step. We note that, since the ﬁles that we are working with are so large, a non-trivial amount
of time was spent in the reading and writing of these ﬁles to disk, and so an exact reproduction of
our numbers may also need to mimic the disk storage speciﬁcation we use.
As another sidenote, we reiterate that our primary interest in selecting the parameters for
our applications is to create the most compact ciphertexts possible. As a result, some of our
optimizations come with a cost of increased evaluation time, and hence, we believe that it is
possible to reduce our evaluation time (potentially at the expense of having larger ciphertexts).
Experimental results. We summarize our MIFE experiments in Tables 8.1 and 8.2. We evalu-
ated the MIFE constructions for ORE with input domain sizes N = 1010 and N = 1012, and for
3DNF encryption on 8-bit inputs, testing both GGHLite and CLT as the underlying mmap. For
each experiment, we report the computation wall time for encrypt and eval, the overall ciphertext
size |ct|, along with the memory usage during the encrypt computation. The keygenoperation varied
from several seconds (for CLT with λ = 40) to 145 minutes (for GGHLite with λ = 80). The en-
cryption statistics measured were for generating a complete ciphertext, containing all components,
as opposed to containing only the left or right (or middle) components.
Since the CLT mmap produces shorter encodings, the encryption and evaluation time for the
experiments using CLT were much faster than the corresponding experiments for GGHLite. This
is also partly due to the fact that CLT enjoys much more parallelism than GGHLite. We also only
present timings for CLT with λ = 80 because we ran out of RAM during the encryption procedure
when using GGHLite.
8.2 Program Obfuscation Experiments
To evaluate our program obfuscation implementation, we chose a random secret 40-bit and a random
secret 80-bit point, and used cryfsm to create the corresponding MBPs for the point functions
associated with these points. We selected the input base representation for these programs with
19
40
λ mmap N
1010
CLT
1012
GGH 1010
1012
1010
1012
CLT
80
d
4
4
4
4
4
4
‘
19
22
19
22
19
22
encrypt
1 s
3 s
eval
0.3 s
1.6 s
38 m 47 s
52 m 68 s
28 m 4 m 4.7 GB
37 m 6 m 6.0 GB
|ct|
RAM
13 MB 17 MB
18 MB 18 MB
7.1 GB 23 GB
9.6 GB 25 GB
5 GB
6 GB
Table 8.1: ORE experiments. “λ” denotes the security parameter of the underlying multilinear map;
“mmap” denotes the multilinear map; “N” denotes the domain size; “d” denotes the MBP base; “‘” denotes
the MBP length; “encrypt” denotes the running time of encryption; “eval” denotes the running time of
evaluation, “|ct|” denotes the size of the ciphertext; and “RAM” denotes the RAM required to encrypt. We
use “h” for hours, “m” for minutes, and “s” for seconds.
N
λ mmap
CLT
16-bit
GGH 16-bit
CLT
16-bit
80
40
d
4
4
4
‘
17
17
17
|ct|
encrypt
eval
0.6 s
0.2 s
20 m 28 s
12 m 3 m 2.5 GB
RAM
7.4 MB 18 MB
3.9 GB 22 GB
4 GB
Table 8.2: 3DNF experiments. See Table 8.1 for the column details.
the goal of minimizing the total obfuscation size for each obfuscated point function (see §7 for our
calculations). Like with MIFE, optimizing for obfuscation or evaluation time could lead to diﬀerent
optimal input base representations.
Experimental results. We tested three settings for point function obfuscation: 40-bit inputs with
λ = 40, 80-bit inputs with λ = 40, and ﬁnally, 80-bit inputs with λ = 80. We also obfuscated using
both CLT and GGHLite for λ = 40, but only used CLT for λ = 80, as the GGHLite experiment
was too resource-intensive. Our results are summarized in Table 8.3. As we observed in the
MIFE experiments, we note that GGHLite performs signiﬁcantly worse when used in obfuscation
compared to CLT. We also note that while obfuscation takes a huge amount of time and resources,
evaluation is much less resource-intensive, for both GGHLite and CLT—a consequence of the fact
that eval only requires multiplying (encoded) matrices, which is highly parallelizable and also much
less costly than the encoding operation itself.
These results, while evidently impractical, are a huge improvement over prior work [AHKM14],
which took 7 hours to obfuscate a 14-bit point function with λ = 60, resulting in an obfuscation of
31 GB. This improvement mainly come from (1) using a much tighter matrix branching program
representation of the program, and (2) operating over diﬀerent sized bases.
9 Conclusions
In this work, we presented 5Gen, a framework for the prototyping and evaluation of applications
that use multilinear maps (mmaps) and matrix branching programs. 5Gen is built as a multi-
layer software stack which oﬀers modularity and easy integration of new constructions for each
component type. Our framework oﬀers an optimized compiler that converts programs written
20
λ mmap
N
40-bit
CLT
80-bit
GGH 40-bit
80-bit
CLT
80-bit
40
80
d
6
7
9
6
8
‘
16
29
13
31
27
eval
obf
0.1 s
1.7 s
0.3 s
6.6 s
28 m 5.9 s
56 m 39 s
3.3 h 180 s
|obf|
RAM
6.3 MB 1.7 GB
21.7 MB 1.7 GB
3.5 GB 38 GB
13.7 GB 37 GB
8.3 GB 11 GB
Table 8.3: Program obfuscation experiments. “λ” denotes the security parameter of the underlying multi-
linear map; “mmap” denotes the multilinear map; “N” denotes the domain size; “d” denotes the MBP base;
“‘” denotes the MBP length; “obf” denotes the obfuscation time; “eval” denotes the evaluation time; “|obf|”
denotes the obfuscation size; and “RAM” denotes the RAM required to obfuscate (evaluation RAM usage