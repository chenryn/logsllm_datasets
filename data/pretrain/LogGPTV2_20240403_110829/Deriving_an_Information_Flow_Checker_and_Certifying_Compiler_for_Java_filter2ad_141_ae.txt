### Typing Rules for JVM Instructions

The typing rules for instructions in the Java Virtual Machine (JVM) are as follows:

1. **Field Access:**
   - **Rule 1:**
     \[
     \frac{
       \begin{array}{c}
         i \vdash k :: st, se \Rightarrow se(i) :: \epsilon, se \\
         T_P[i] = \text{getfield } f \\
         \text{Handler}(i) \downarrow \\
         k \leq \text{fieldlevel}(f) \\
         se = \text{lift}^k(se, \text{tregion}(i))
       \end{array}
     }{
       i \vdash k :: st, se \Rightarrow (\text{fieldlevel}(f) \wedge se(i)) :: \text{lift}^k(st), se
     }
     \]
   - **Rule 2:**
     \[
     \frac{
       \begin{array}{c}
         i \vdash k :: st, se \Rightarrow se(i) :: \epsilon, se \\
         T_P[i] = \text{throw} \\
         (se(i) \wedge k) = L
       \end{array}
     }{
       i \vdash k :: st, se \Rightarrow
     }
     \]

2. **Throw Instruction:**
   - **Rule 3:**
     \[
     \frac{
       \begin{array}{c}
         i \vdash k :: st, se \Rightarrow \\
         T_P[i] = \text{throw} \\
         \text{Handler}(i) = i
       \end{array}
     }{
       i \vdash k :: st, se \Rightarrow se(i') :: \epsilon, se'
     }
     \]
     where \( k \leq se(i') \).

**Figure 7.** Typing rules for instructions in JVM.

### Security Environment and Compilation

To ensure that the security type satisfies all conditions for the typing of a bytecode program, we need to define the security environment \( se \) for the compiled source program \( SP \).

1. **Definition 7 (Security Environment \( se \) Determined by \( E \)):**
   - We define \( se \) by induction on the syntax of the source commands. The domain of \( se \) is the set of program points in the compilation \( W(SP) \). Define \( se(i) \) as \( E(n) \) where \( [c]_n \) is the smallest subcommand of \( SP \) whose compilation contains program point \( i \).

2. **Lemma 7.1:**
   - Suppose \( D \vdash [c]_n : k, k' \) (introduction judgment), let \( E \) be the security environment derived from \( D \), and let \( se \) be determined by \( E \). Then \( se = \text{lift}^{k'}(se, \text{tregion}(n)) \).

3. **Lemma 7.2:**
   - Let \( c \) be a command in the source program \( SP \), typed \( \vdash c : E \), and let \( [i..j] \) be the program points in the compilation of \( c \). Let \( se \) be the security environment determined by \( E \). Then, for all \( st \), there exist \( st_{i+1}, \ldots, st_j \) such that if we define \( st_i = st \), we have:
     - \( l \vdash st_l, se \Rightarrow st_l', se \) for all \( l \rightarrow l' \), \( l \in \{i..j\} \).
     - If \( c \) is not a throw command, then \( st_j = st \).
     - If \( s \text{Handler}(n) = n \), then \( st_n' = se(n) \).

4. **Theorem 7.3:**
   - Suppose, for given \( \Gamma \) and \( \text{fieldlevel} \), we have \( \vdash SP \), i.e., this source program is typable in the high-level system. Then \( \vdash W(SP) \), i.e., its compilation is typable in the target system.

### Example

**Example 7.1:**
- The compilation \( S(c) \) of the program introduced in Example 5.1 and its types obtained with the Target type system are shown below. To construct \( se \) for this program, we use \( E \) from Example 5.1 and Definition 7 to obtain:
  \[
  se = \{1 \mapsto H, 2 \mapsto H, 3 \mapsto H, 4 \mapsto H, 5 \mapsto H, 6 \mapsto H, 7 \mapsto H, 8 \mapsto H, 9 \mapsto H, 10 \mapsto L, 11 \mapsto L, 12 \mapsto L\}.
  \]

- The bytecode and types are as follows:
  \[
  \begin{array}{lll}
  \text{load } yH & \text{push } 0 & \text{prim } = \\
  \text{ifeq } 8 & \text{load } xL & \text{store } yH \\
  \text{goto } 10 & \text{push } 1 & \text{store } yH \\
  1 & \epsilon, se & H \cdot \epsilon, se \\
  2 & H \cdot H \cdot \epsilon, se & 3 \\
  4 & \epsilon, se & 5 \\
  6 & \epsilon, se & 7 \\
  8 & \epsilon, se & 9 \\
  10 & \text{new } C & \epsilon, se \\
  11 & \text{push } 3 & L \cdot \epsilon, se \\
  12 & \text{putfield } fL & L \cdot L, se \\
  \end{array}
  \]

- It is easy to verify that the constraints of the type system to apply the transfer rules with the types given above hold. For the ifeq instruction at program point 4, \( se = \text{lift}^H(se, \text{tregion}(4)) \) can be checked using region \( \{5, 6, 7, 8, 9\} \), obtained according to Definition 6.
- The region of 12 is empty since it does not have any successors.

### Conclusion

Developing and deploying software that respects an end-to-end confidentiality policy requires several components. First, developers must specify how interfaces relate to the policy using labels and tools to provide accurate feedback. Second, execution platforms must reflect the policy's assumptions and feature security functions to enforce the policy. Verification tools and security functions aim to ensure that the labeling is correct and adheres to the policy.

This paper focuses on checking that a program is non-interferent with respect to a given labeling, controlling fine-grained flows within the program. We show a formal relation between typability at the source code and bytecode verification for an extended bytecode verifier that enforces non-interference.

We derived the typing systems for source code from the bytecode system, establishing a correspondence between regions in source and bytecode. We then formulated high-level judgments and a connection between them and the security environment, using this connection to obtain high-level rules for each source code construct.

### Future Work

1. **Richer Languages:**
   - Our language already handles some main complexities of Java, including exceptions and heap-allocated mutable objects. We expect to treat multiple exceptions similarly to JFlow and believe that type preservation can be extended to sequential Java, provided existing type systems are appropriately extended.

2. **More Sophisticated Policies:**
   - Practical end-to-end policies often need to cater for downgrading and connect flow policy with access controls. Many current proposals provide source-level type systems to express and statically enforce specific policies. We believe these type systems can be adapted to bytecode to ensure type-preservation.

3. **Optimizing Compilers:**
   - Common Java compilers perform limited optimizations, which can easily preserve information-flow typing. More aggressive optimizations may break type preservation, even though they are semantics-preserving. Adapting standard program optimizations to maintain type preservation is an area for future work.

### Acknowledgments

We thank Martín Abadi, Anindya Banerjee, Ricardo Medel, Andrei Sabelfeld, and anonymous reviewers for their valuable comments.

### References

[1] M. Abadi. Secrecy by typing in security protocols. Journal of the ACM, 46(5):749–786, 1999.

[2] A. Askarov and A. Sabelfeld. Security-typed languages for implementation of cryptographic protocols: A case study. In S. De Capitani di Vimercati, P.F. Syverson, and D. Gollmann, editors, Proceedings of ESORICS’05, volume 3679 of Lecture Notes in Computer Science, pages 197–221. Springer-Verlag, 2005.

[3] A. Banerjee and D. Naumann. Stack-based access control for secure information flow. Journal of Functional Programming, 15:131–177, March 2005. Special Issue on Language-Based Security.

[4] A. Banerjee and D. A. Naumann. Secure information flow and pointer confinement in a Java-like language. In Proceedings of CSFW’02, pages 253–270. IEEE Computer Society Press, 2002.

[5] A. Banerjee and D.A. Naumann. History-based access control and secure information flow. In G. Barthe, L. Burdy, M. Huisman, J.-L. Lanet, and T. Muntean, editors, Proceedings of CASSIS’04, volume 3362 of Lecture Notes in Computer Science, pages 27–48. Springer-Verlag, 2004.

[6] G. Barthe, A. Basu, and T. Rezk. Security types preserving compilation. In B. Steffen and G. Levi, editors, Proceedings of VMCAI’04, volume 2934 of Lecture Notes in Computer Science, pages 2–15. Springer-Verlag, 2004.

[7] G. Barthe and T. Rezk. Non-interference for a JVM-like language. In M. Fähndrich, editor, Proceedings of TLDI’05, pages 103–112. ACM Press, 2005.

[8] E. Bonelli, A. Compagnoni, and R. Medel. Information flow analysis for a typed assembly language with polymorphic stacks. In G. Barthe et al., editor, Post-proceedings of CASSIS 2005: Construction and Analysis of Safe, Secure and Interoperable Smart devices, volume 3956 of Lecture Notes in Computer Science, pages 37–56. Springer-Verlag, 2005.

[9] G. Boudol and I. Castellani. Noninterference for concurrent programs and thread systems. Theoretical Computer Science, 281(1):109–130, 2002. Preliminary version available as INRIA Research report 4254.

[10] D. Denning. A lattice model of secure information flow. Communications of the ACM, 19(5):236–242, 1976.

[11] R. Medel, A. Compagnoni, and E. Bonelli. A typed assembly language for non-interference. In Ninth Italian Conference on Theoretical Computer Science, volume 3701 of Lecture Notes in Computer Science, pages 360–374, 2005.