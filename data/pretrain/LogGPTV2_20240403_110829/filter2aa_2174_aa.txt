# Kernel Wars: Demystifying Kernel-Mode Exploitation

## Introduction to Kernel-Mode Vulnerabilities and Exploitation

### Why Exploit Kernel-Level Vulnerabilities?
- **Fun and Challenge**: It offers a unique challenge that few attempt.
- **Bypassing Defenses**: Exploits at this level can bypass many defense mechanisms and restrictions.
- **Low-Level Attacks**: 
  - Does not depend on specific applications being installed.
  - Not influenced by application configurations.
  - Unaffected by file or registry permissions.

### Reasons Not to Exploit Kernel-Level Vulnerabilities
- **Reliability**: Exploits must be highly reliable, as they are often one-shot.
- **Debugging Complexity**: Setting up kernel debugging can be tedious.
- **Knowledge Requirement**: Requires in-depth knowledge of kernel internals.

### Common Targets for Attack in the Kernel
- **System Calls**
- **I/O and IOCTL Messages** through device files
- **File Handling** in pseudo-filesystems (e.g., procfs)
- **Network Data Handling** (wired/wireless)
- **Hardware Interaction** (e.g., USB, Firewire)
- **Executable File Format Loaders** (e.g., ELF, PE)

### Payload Strategy
- **Elevating Privileges**
  - Altering the UID field (Unix)
  - Stealing access tokens (Windows)
- **Injecting Backdoors**
  - Stealthy operations performed entirely in kernel mode

### Breaking Restrictions
- **Chroot/Jail Evasion**: All restrictions can be bypassed in kernel mode.
- **Ring 0 Access**: The highest privilege level, allowing full control over the system.

### Payload Techniques
- **Address and Offset Determination**
  - Resolving symbols
  - Pattern matching
  - Hardcoding (as a last resort)
- **OS/Architecture-Specific Techniques**
  - Windows/x86: ETHREAD-pointer at 0xFFDFF124 (fs:0x124)
  - FreeBSD/x86: proc-pointer at [fs:0]
  - Linux/x86: task_struct-pointer at esp & 0xffffe000
  - NetBSD/x86: proc-pointer [[fs:4]+20]+16
  - Solaris/AMD64: _kthread-pointer at [gs:0x18]
  - Solaris/i386: _kthread-pointer at [gs:0x10]
  - Solaris/SPARC: _kthread-pointer in g7

### Exploitation Best Practices
- **Minimize Overwriting**: Avoid trashing more than necessary.
- **Cleanup Operations**
  - Rewind the stack if needed
  - Repair the heap
  - Restore overwritten data

### Case Study: Windows Local GDI Kernel Memory Overwrite

#### About the Bug
- **GDI Shared Handle Table**: A memory section containing GDI handle data, shared between user and kernel modes.
- **Read-Only Mapping**: Mapped into every GUI process, but can be remapped read-write via brute-forcing the shared memory section handle.
- **Impact**: Trivial to cause a BSOD, but exploitable?

#### Discovery and Patching
- **Found by Cesar Cerrudo from Argeniss** and made public on 2006-11-06.
- **Reported to Microsoft** on 2004-10-22, affecting all W2K/WXP systems.
- **Patched** a few weeks after our talk at BlackHat Europe.

#### Determining the GDI Section Handle
- **GDI Section Structure**:
  - pKernelInfo: Pointer to kernel-space GDI object data
  - ProcessID: Process ID
  - _nCount: Reference count
  - nUpper: Upper 16 bits of GDI object handle
  - nType: GDI object type ID
  - pUserInfo: Pointer to user-space GDI object data
- **Array Size**:
  - Windows 2000: 0x4000 entries, size >= 0x40000 bytes
  - Windows XP: 0x10000 entries, size >= 0x100000 bytes
- **Handle Calculation**:
  - Lower 16 bits: Index into the array
  - Upper 16 bits: Value of the nUpper field

#### Final Method
- **Create a GDI Object**: Handle value = H
- **Index into Table**: H & 0xFFFF
- **nUpper**: H >> 16
- **Validation**:
  - Section size check
  - Process ID match
  - nUpper match
  - nType match

#### Kernel Debugging Environment
- **Options**: SoftICE (discontinued) / WinDBG
- **WinDBG Setup**:
  - Typically requires two machines
  - Can use VMware with a named pipe for virtual serial port

#### Exploiting the Bug
- **Attack Points**:
  - pKernelInfo: Used in kernel context
  - pUserInfo: Used in privileged processes
- **Goal**: Write to an arbitrary memory address, leading to arbitrary code execution.

#### Attacking pKernelInfo
- **Naive Approach**: Overwrite with trash and hope for EIP control.
- **Realistic Approach**:
  - Use different GDI objects (windows, fonts, brushes)
  - Point pKernelInfo to valid user-mode memory
  - Fill with recognizable pattern
  - Call GDI-related system calls and analyze crashes
  - Use WinDBG and IDA Pro for analysis

#### Final Attack
- **Create a BRUSH Object**:
  - FakeKernelObj[0] = ...
  - FakeKernelObj[2] = 1
  - FakeKernelObj[9] = ...
- **Call NtGdiDeleteObjectApp()**: Reliable method for all vulnerable systems.

#### Next Steps
- **Function Pointer Overwrite**:
  - Find a suitable function pointer
  - Determine its address
  - Use partial overwrites or NtAllocateVirtualMemory() to map NULL page

#### Determining Where to Write
- **System Call Tables**:
  - KiServiceTable: Native NT API
  - W32pServiceTable: Win32 subsystem (including GDI)
- **KiServiceTable Limitations**:
  - Read-only text segment
  - Not always writable
- **W32pServiceTable**:
  - Resides in the data segment of WIN32K.SYS
  - Writable and perfect for exploitation
- **Address Determination**:
  - Search for KeAddSystemServiceTable call in the "INIT" section
  - Backtrack to find the push of W32pServiceTable argument

#### Payload
- **Privilege Elevation**:
  - Steal access token from a privileged process
  - Restore original token after use to avoid BSODs
- **Portability**:
  - Adjust payload for different Windows versions
  - Account for changes in syscall numbers and token field offsets

### Demonstration
- **Fuzzing and Tracking**:
  - Instant crash using fuzzing tools like Itchy
  - Similar to NetBSD-SA2007-004, demonstrated at BlackHat Europe

This comprehensive guide provides a detailed overview of kernel-level vulnerabilities, their exploitation, and a case study on a specific Windows GDI bug.