#whitespace
#remote user
#whitespace
#remote logname
]+"
www.TopSage.com
#first line of request
regex
'status'
'bytes_sent': '2326',
'bytes_
_sent':
‘2326'})
新
文本丨121
PDG
---
## Page 136
行分割，而是使用了编译后的正则表达式对象log_line_re来匹配日志行。如果匹配成
从regex示例到以空格为分隔符的示例，我们仅修改了函数dictify_logline()。这表
122
returnreport_dict
This function takes a file object,
else:
if m:
m = log_line_re.match(line)
Currently,
infile.close()
log_report = generate_log_report(infile)
except IoError:
try:
'return a dictionary of format remote_host=>[list of bytes sent]
reach hit on the webserver.
return {'remote_host': None,
infile = open(infile_name, 
return groupdict
sys.exit(1)
report_dict.setdefault(line_dict['remote_host'], []).append(bytes_sent)
print "You must specify a valid file to parse"
except ValueError:
try:
line_dict = dictify_logline(line)
第3章
print
continue
##totally disregard anything we don't understand
bytes_sent = int(line_dict['bytes_sent'])
 the only fields we are interested in are remote host and bytes sent,
www.TopSage.com
(.1.
忆
PDG
---
## Page 137
Apache解析脚本regex的最新版本的一次单元测试。
那么，正则表达式比字符串分割更有优势么？事实上，确实如此。下面的示例是对
下面是单元测试的结果：
的字典，但是其值为空和0。
设置为0，
class TestApachelogParser(unittest.TestCase):
import apache_log_parser_regex
import unittest
#1/usr/bin/env python
Ran 3 tests in 0.001s
jmjones@dinkgutsy:code$ python test_apache_log_parser_regex.py
unittest.main()
def setUp(self):
def
deft
def
（因为“-”表示空）。在没有任何匹配的情况下，返回一个具有相同关键字
FtestMalformedEntry(self):
self.assertEqual(apache_log_parser_regex.dictify_logline(malformed_log_entry),
self.assertEqual(apache_log_parser_regex.dictify_logline(common_log_entry)
testCommonExample(self):
testCombinedExample(self):
pass
'"GET /some/url/with white space.html HTTP/1.0"
"GET /apache_pb.gif HTTP/1.o"
{'remote_host': '127.0.0.1',
:,ureu
'127.0.0.1'，
www.TopSage.com
127.0.0.1
2002326
"Mozilla/4.08 [en] (Win98; I ;Nav)"
[10/0ct/2000:13:55:36-0700]'\
[10/0ct/200013:55:36-0700]
'200'，
2002326'
'bytes_sent': '2326′})
'bytes_sent': *2326′})
'bytes_sent':
2326'})
君
文本丨123
---
## Page 138
ElementTree对象为tcusers。tcusers的类型是xml.etree.Elementtree.ElementTree。
解析用户的XML文件，该文件来自一个已成功安装的Tomcatservlet引引擎。我们称
块，这样在使用该库时就可以使用ET，而不用输入全称。接下来，我们告诉ElementTree
为了可以在使用库时省去不必要的键盘输入，我们使用名字ET来加载ElementTree模
使用ElementTree开始解析XML文件，只须简单地加载库和使用parse(）对文件进行处理：
124
在删除了授权许可和用法提示之后，可以看到解析后的Tomcat用户文件内容如下：
们重点推荐使用ElementTree。如果需要使用XML解析器，不妨先试一试ElementTree。
使用、十分友好的API。除了代码可复用之外，它运行速度快，消耗内存较少。这里我
Python2.5之后被包括在标准库中。ElementTree感觉就像一个轻量级的DOM，具有方便
第三种选择是使用ElementTree（元素树）。ElementTree是XML解析库，已经在
点。但是DOMAPI使用起来多少有些麻烦。
DOMXML库。与SAX相比，DOM是典型的比较慢，消耗更多内存的方法，因为DOM
作XML的方法是使用DocumentObjectModel，或者称为DOM。Python标准库也包括一个
方法并进行传递。这意味着必须为数据指定句柄，以维持自己的状态，而这是非常困难
某些数据中，当它命中XML文档的某些部分时（例如开始和结束标签），它会调用某些
速的工具，在解析XML时，不会自动占用大量内存。但是这是基于回调机制的，因此在
XML，”或者称为SAX。Python标准库中包括了SAX解析器。SAX是一种典型的极为快
这样的话，还能使用什么呢？有两种典型方法可以处理xML。一种是“simpleAPIfor
状数据结构对于处理任何略微大一点的文件来说，都是一件十分令人头痛的事。
XML使用一种树结构，因此你并不希望对其按行读取。而使用正则表达式来建立一个树
式。你可能不想一行接一行地读人文件、查找模式，也不想太多地依赖正则表达式。
如果需要解析的文本是XML，那么你需要一种不同于处理面向行的日志文件的处理方
ElementTree
Out[3]:
In[3]:tcusers
In[2]:tcusers=ET.parse('/etc/tomcat5.5/tomcat-users.xml')
In[1]:from xml.etree import ElementTree as ET
|第3章
www.TopSage.com
---
## Page 139
现在调用方法并且引用tcusers对象的属性：
以下是一个XML元素ElementTree，是为fist_user元素对象创建的：
标签名的属性。text是当前元素作为文本节点时所具有的文本的属性。
空。attrib和get()都可以为当前的XML标签使用相同的属性字典。Tag是包含当前元素
处理方式。get()是一个字典方法，可以获取指定的属性，如果没有定义属性，返回为
text。attrib是一个元素属性字典。find()和findall()与ElementTree对象采用相同的
索。文本“user”定义了要查找的标签。因此，find()返回标签是“user”的第一个节
以使用find()提取第一个用户节点的标签名：
的所有子孙节点）。斜杠（/）可以用来分隔匹配格式。利用Tomcat 用户文件，我们可
搜索格式包括标签名*（匹配所有子元素）、．（匹配当前元素）和//（匹配搜索起启点
find()和findall()寻找的模式的类型都是XPath表达式的有限子集。ElementTree的有效
element对象列表，该列表由找到的所有匹配的节点组成。
findall()。find()根据传递给它的查询内容查找匹配查询的第一个节点，并返回一个基
样就可以获得XML文件中的任何节点。在树对象中，两个最有意义的方法是find()和
ElementTree在解析TomcatXML文件时创建了一个树对象，我们使用tcusers表示，这
一些更有趣的element方法和属性包括Attrib、find()、findall()、get()、tag和
给find()指定搜索格式为“/user”
于该节点的element对象。findall()会对匹配查询的所有节点进行查找，并返回一个
In [8]: first_user.get('foo')
In [7]: first_user.get('name')
In [6]: first_user.attrib
Out[6]: {'name':'tomcat','password':'tomcat','roles':'tomcat'}
Out[5]: 
In [5]: first_user
In [4]: first_user = tcusers.find('/user')
Out[7]:'tomcat'
www.TopSage.com
。最前面的斜杠定义了绝对路径，即从根节点开始搜
roles="tomcat,role1"/>
文本丨125
---
## Page 140
最后是一个ElementTree示例，该示例用来从一个写得不是很好的XML中提取信息。
结果：
示例中，我们只是使用了一个复合列表来匹配name属性。运行这个示例将返回下面的
if
from xml.etree import ElementTree as ET
#1/usr/bin/env python
例3-27：ElementTree解析Tomcat用户文件
为'tomcat'）的用户节点（参见例3-27）。
通用的示例。我们解析Tomcat用户文件并且搜索name属性匹配我们指定内容（在本例中
至此，你已经看到了一些ElementTree如何使用的基本示例。接下来看一个稍微深入且更
提取出来的信息内容是操作系统的版本号，包括在类似下面这样的XML文件中：
system_profiler支持的两种输出格式之一，但是对XML的支持似乎来得晚一些。希望被
Mac OS X有一个称为system_profiler的工具，可以显示系统的大量信息。XML是
126
In [10]: first_user.text
Out[9]:'user'
In [9]: first_user.tag
for user in [e for e in tomcat_
tomcat_users = ET.parse(infile)
('password':
print user.attrib
第3章
_items
-2
_detailLevel
SPSoftwareDataType
_dataType
main_
Mac 0S X 10.4.11 (8S2167)
os_version
Darwin 8.11.1
_name
'name':
_users.findall('/user') if
'tomcat',
www.TopSage.com
'roles':
DG
---
## Page 141
类型、正则表达式、标准输入输出、StringIO以及urllib模块。然后对其中的一些技术
本章讲述了在Python中操作文本的一些基本技术。我们使用了来自标准库的内建string
本章小结
为在你尝试之后仍会回来选择使用ElementTree。
它所带来的好处非常满意。可以尝试一下Python标准库中的SAX和DOM库，
ElementTree是Python标准库的有力补充。到目前为止，我们已经多次使用，并且对使用
OSXTiger笔记本上产生的输出结果：
点列表。另外，该示例条理非常清晰，XML也写得更好一些。下面是该脚本运行在Mac
介绍过的唯一内容是getchildren()方法。该方法可以简单地返回一个指定元素的子节
“SPSoftwareDataType”
基本上，脚本搜索dict标签，该标签有一个字符串子元素，它的文本值为
[]= proax
from xml.etree import ElementTree as ET
import sys
#1/usr/bin/env python
的父节点下（参见例3-28）。
为什么我们认为这个XML格式写得不规范呢？因为在任何一-个XML标签中都没有属
os_version
kernel_version
dink:~/code jmjones$ python elementtree_system_profile.py
name
else:
print "SPSoftwareDataType NOT FOUND"
record =[]
sys.exit(1)
break
main
->Mac 0SX 10.4.11 (8S2167)
Darwin 8.11.1
。脚本搜索的信息在该节点下。在这个示例中，我们之前没有
www.TopSage.com
，但是我们认
文本丨127
PDG
---
## Page 142
因此，我们希望你下次从事文本处理工作时，首先选择Python。
的编码方式的转变，你会认为Python比Perl更为优秀，甚至在文本处理方面同样如此。
上，如果看到Python简单的语法，以及可以轻松实现由面向过程的编码方式到面向对象
语言，特别是在文本处理方面，然而我们认为Python具有与Perl一样优秀的性能。事实
这种情况下，他们只考虑选用Perl作为更高级的替代工具。Perl是一个功能极为强大的
一些UNIx使用者认为当复杂的文本处理已经超出了使用grep或awk所能应对的程度时，
经典用法，并通过两个示例演示了实际应用效果。
进行联合，应用到两个解析Apache日志文件的示例中。最后介绍了ElementTree库的一些
128
第3章
www.TopSage.com
---
## Page 143
下，信息收集都包含了从某种格式中提取信息，例如Apache logfil，并以一个中间格式
比较而言，信息收集所涉及的内容，比定位和提取某些数据更为深人一些。大多数情况
态代码。而第7章，包含了系统信息查询的示例，包括查询RAM容量以及网络接口的速
度等。
web服务器日志中的每一行进行解析，包括解析客户端IP地址、传输字节数以及HTTP状
个大文本文件中解析和提取各种数据的方法。第3章中一个典型的示例，就是对Apache
文本（第3章）和SNMP（第7章）。文本一章中包括了一些示例，这些示例演示了从
信息共享的第一
自动信息收集
享驱动器来查找文件，但哪种方式最方便呢？
感兴趣的人手中。感兴趣的人将会通过收取电子邮件，访问一个网站，或者直接通过共
义。数据的格式可以是PDF、PNG、JPG、HTML或纯文本。最后，需要将这些信息送到
接下来，为了能够有效地共享信息，需要按照某种方式对数据进行格式化，使其更有意
行某个shell命令的结果中，也有可能是在某处的数据库中。首先，要对信息进行采集。
共享信息会被保存到某些地方，或许是日志文件的某个位置，或许是头脑中，或许是执
在本章中，我们将集中介绍如何对写的程序进行信息采集、格式化和发布。你感兴趣的
需要它们的人手中。
作。尽管Python无法写文档，但是它可以帮你搜集、格式化这些文档，并将信息发送到
欢做的工作，就会让人十分烦恼。现在，Python可以帮助我们完成与文档相关的一些工
哪种情况，创建文档都是工作中一个十分重要的内容。但是，如果发现这不是自己喜
利益，你或是你的继任者都或许会在将来对程序实施改进时用到这些文档。因此，无论
行归档。这可能是为了那些希望阅读文档的用户的直接利益，也可能是为了用户的间接
你可以能会发现，工作中最单调乏味的事情就是根据用户的需要，对各种各样的信息进
一步就是收集信息。本书已在另外两章对数据采集进行了介绍，分别是：
www.TopSage.com
文档与报告
第4章
129
---