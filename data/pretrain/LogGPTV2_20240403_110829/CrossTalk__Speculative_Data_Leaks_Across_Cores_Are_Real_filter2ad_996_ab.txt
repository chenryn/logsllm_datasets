OFF CORE RESPONSE
Mask
CORE
PORT 0–7
MS UOPS
ANY
ALL LOADS/ STORES
ALL REQUESTS
STRM ST
OTHER
Description
Number of micro-ops executed on a given CPU core.
Number of cycles where micro-ops were dispatched on a speciﬁc port.
Number of micro-ops provided from microcode.
Number of (non-FP) microcode assists invoked.
Number of load/store instructions which reached retirement.
Number of requests which “reached the Super Queue” (not in cache).
Number of streaming store requests.
Number of miscellaneous requests.
possible value for the data (typically a byte) to be leaked, and
ﬂushes it to ensure that none of these lines are in the cache.
Then, the attacker ensures that the processor uses some secret
data, for instance by prompting the victim program to read or
write such data, or by ensuring that such data is evicted from
the cache. Either way, the processor moves the in-ﬂight data
into these Line Fill Buffers (LFBs). Next, the attacker performs
a load causing an exception or assist, for instance from an
address that causes a benign page fault. The load can forward
to dependent instructions despite not completing, using the
secret data from the LFB. The attacker’s transiently executed
code then uses the data as an index into the FLUSH + RELOAD
array. The corresponding cache line will be optimistically
loaded into the cache by the pipeline when it executes the
transiently executed code. Finally, by loading every element
of the array and timing the load, the attacker can determine
which one was in the cache. The index of the cached entry is
the secret value which was obtained from the LFB.
In November 2019, Intel announced several new MDS
vulnerabilities, among which TSX Asynchronous Abort (TAA)
with CVE-2019-11135 is perhaps the most prominent [4],
[5]. In a TAA attack, an aborted TSX transaction causes
the instructions currently under execution to continue until
retirement in a manner that is akin to transient execution—
allowing the attacker to leak information from the internal
buffers as described above.
B. Intel Micro-Ops/Microcode
While Intel microcode is undocumented and its behavior is
largely unknown, it is no secret that all x86 instructions are
translated to one or more micro-ops which have a RISC-like
format. Generally, the decoder performs a direct translation to
a small number of micro-ops (at most 4). In rare cases, larger
numbers of micro-ops are required, such as for microcode
assists (handling corner cases such as marking dirty bits in
page tables, or after a faulting memory load) and complex
instructions (where more than 4 micro-ops are needed, or
control ﬂow is necessary). In those cases,
the micro-ops
are instead fetched from the microcode ROM. To allow for
post-production bug ﬁxes, Intel processors support in-ﬁeld
microcode updates since the mid-1990s [15].
C. Intel Performance Counters
Many performance counters are available on Intel CPUs,
giving developers information about potential bottlenecks in
their code. More generally, they can be used to gain insight
into CPU behavior. Some examples can be seen in Table I.
The ﬁrst two examples provide information about the decoding
and issuing of instructions, including the number of micro-
ops issued, and the number of micro-ops executed on each
execution port. Since micro-ops can only be executed on
speciﬁc (sets of) ports, the latter gives coarse information
about the types of micro-ops being executed. For example,
on Skylake, we observe [11] that the AESDEC instruction uses
port 0 (used for AES operations), and that it also uses ports
2/3 (used for loads) when the input is a memory operand.
There are other counters which can provide insight into the
micro-ops being executed. For example, one counter counts
the number of micro-ops decoded from the microcode ROM,
and another provides the number of invoked microcode assists.
Finally, we can observe information about loads and stores by
checking how many load/store instructions were retired, the
number of hits/misses at each level of the processor cache, as
well as by using the counters which provide the number and
type of ‘offcore’ requests (such as DRAM accesses).
D. Intel Software Guard Extensions (SGX)
Intel’s Software Guard Extensions (SGX) instructions create
so-called ‘enclaves’ to be executed using encrypted memory.
This protects sensitive data (such as encryption keys) from
potentially-hostile operating systems and/or hypervisors.
There have been a number of transient execution vul-
nerabilities allowing the contents of SGX enclaves to be
exposed to a hostile attacker [3], [5]. Mitigations against these
attacks have been implemented in microcode and on recent
CPUs; microcode now clears the L1 cache and internal CPU
buffers when leaving an enclave, and TSX transactions are
automatically aborted if an SGX enclave is running on a
sibling core. Enclaves can conﬁrm that they are being run
in a secure environment using attestation [16], which allows
a remote party to ensure that SGX enclaves are running on
machines with up-to-date microcode, and that SMT is disabled
when running on hardware vulnerable to L1TF/MDS.
E. RDRAND
The RDRAND x86 instruction was ﬁrst introduced in Intel’s
Ivy Bridge CPUs. It returns random numbers derived from a
digital random number generator (DRNG), and is available at
all privilege levels (including userspace and SGX enclaves).
Intel’s DRNG [17] outputs random seeds (processed using
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1854
AES-CBC-MAC) and feeds them to a deterministic random-
bit generator (DRBG), which ﬁlls the global RNG queue
using AES in counter mode. More recently,
the RDSEED
instruction was added in Intel’s Broadwell CPUs, allowing
access to higher-entropy randomness (intended for seeding
software PRNGs). AMD CPUs also support RDRAND and
RDSEED, although with a higher performance cost (around
2500 cycles for 64-bit RDRAND output on Ryzen).
Cryptographic applications often rely heavily on the con-
ﬁdentiality of random numbers; an attacker who can predict
or obtain these random numbers can often break and even
obtain private keys. RDRAND provides a convenient mecha-
nism for generating cryptographically-secure random numbers,
to prevent such attacks. In environments such as SGX, the
only available source of randomness provided by the CPU is
through RDRAND and RDSEED instructions.
III. THREAT MODEL
We assume an attacker who aims to abuse transient ex-
ecution to disclose sensitive information from a victim that
is running on the same system. We further assume that all
standard hardware and software mitigations (available at the
time of writing) against
transient execution are in effect.
Although co-location on the same physical system is required,
we assume that the operating system employs conservative
scheduling policies that avoid executing processes from dif-
ferent security domains on the same core [8]–[10]. Even
under these strong assumptions, we show that on many Intel
processors, an attacker can abuse transient execution to leak
sensitive information such as CPU-generated random numbers
from the victim regardless of the placement of the attacker and
the victim on different cores in the system.
Fig. 1: Overview of the two stages of CROSSTALK.
IV. CROSSTALK
Figure 1 shows the components of CROSSTALK. In the ﬁrst
stage, CROSSTALK proﬁles all the x86 instructions that make
Fig. 2: Flow via shared staging buffer to ﬁll buffers of speciﬁc
cores.
offcore memory requests. We use the output of this ﬁrst stage
in combination with MDS to understand the interaction of
on-core LFBs with a globally-shared offcore buffer as shown
in Figure 2. With this knowledge, CROSSTALK’s second
stage automatically discovers how information leaks from one
instruction to another as they write to different offsets within
the offcore buffer. The output of CROSSTALK’s second stage is
a number of instructions, each capable of leaking information
from other instructions that are executed on different cores in
the system.
A. Instruction Generation
However, although this existing dataset
To understand which instructions on Intel’s CPU use non-
obvious micro-ops and how these instructions are implemented
in practice, CROSSTALK attempts to execute many variants
of x86 instructions, in different contexts. Previous research
(uops.info [11]) provides a dataset containing performance
counter information for many x86 instructions, in particular
port usage information and the number of executed micro-ops.
We needed to track a wider variety of performance counters,
which can be done using the information in this dataset
together with the tool used to generate it (nanoBench [18]).
is sufﬁcient for
simple instructions which are translated directly to micro-
ops by the hardware decoder unit,
it fails to provide in-
formation about many microcoded sequences, which may
contain control ﬂow based on their context. For example,
the value of the operands to some instructions drastically
modiﬁes their behavior; for example, the leaf2 number passed
to CPUID. As noted in [11], performance differences due to
different register or intermediate values are not considered by
their tool. Error paths may only be exercised when incorrect
data is provided, and instructions behave differently in some
execution environments (such as inside virtual machines, in
different rings, or in SGX enclaves). Microcode assists [13]
are only executed in situations where they are necessary.
As such, CROSSTALK is designed to allow execution of
instructions in different situations and with different operands,
and allows us to proﬁle their behavior in multiple different
2a CPUID leaf refers to the category of data being requested
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1855
ways. This allows CROSSTALK to obtain a more compre-
hensive view of the behavior of the CPU, by increasing our
coverage of Intel’s microcode.
CROSSTALK’s ﬁrst stage uses the uops.info dataset dis-
cussed above as a starting point to automatically generate both
user and kernel mode instructions of interest. CROSSTALK
then executes the resulting code in different contexts to collect
performance counter information, recording the values of
all supported performance counters before and after running
several iterations of the generated instructions. After each
run, we manually examined the results, and added code to
improve coverage in some cases. For example, after ﬁnding
all CPUID leaves by testing all values of EAX and observing
the differences as reﬂected in performance counters, we then
updated our code to ensure we had full coverage of potential
CPUID subleaves (speciﬁed by ECX) for each of these leaves.
Privileged instructions will often crash machines if executed
with arbitrary operands; we extended the coverage to include
some of these by adding manual annotations/code, such as
providing valid values for WRMSR.
Table II summarizes some representative examples of the
output of this phase of our tool for some instructions on an
Intel i7-7700K desktop CPU running Ubuntu 18.04.3 LTS with
kernel version 5.3.0-40-generic and microcode version 0xca3.
CPUID is a normal, userspace instruction, and is present in
the uops.info dataset, which claims it executes 169 micro-ops
on Skylake. As we can see in the table, the behavior of this
instruction depends heavily on the value of EAX (the leaf),
and only some of these variants make cross-core requests.
Similarly, RDMSR is a privileged instruction which depends on
the value of ECX, which speciﬁes the MSR to read. We found
hundreds of different valid MSRs (470 on the i7-7700K), and
again we can see from the performance counters that many
of them execute different ﬂows in the microcode, many of
which make cross-core requests (205 MSRs on the i7-7700K).
The uops.info dataset only presents results for a single MSR.
These examples demonstrate the importance of the context
when analyzing these instructions, as the number and nature
of the micro-ops executed changes signiﬁcantly, depending on
the instruction’s operands.
B. Offcore Requests
We do not observe unexpected performance counter values
when executing non-microcoded instructions, where a small
number of micro-ops are generated directly by the decoder.
However, complex microcode ﬂows with larger numbers of
micro-ops are more interesting. In particular, some instruc-
tions unexpectedly perform offcore requests, according to the
relevant performance counters. Speciﬁcally, we monitor the
total number of these memory accesses performed by each in-
struction using the OFFCORE_REQUESTS.ALL_REQUESTS
counter. We found that
the responses to these offcore
requests can be broken down into categories using the
3Unless speciﬁed otherwise, we will use this system for our examples
throughout the paper.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
for (int offset = start; offset < end;
offset++)
{
}
// Execute a leak primitive
cpuid(0x1);
// Perform invalid read to
// leak from an LFB at "offset"
char value =
*(invalid_ptr + offset);
// Expose result for flush+reload
(void)reload_buf[value];
Listing 1: Simpliﬁed example of leaking offcore requests.
OFF_CORE_RESPONSE event, which Intel provides to ob-
serve requests that miss in the L2 cache.
In particular, two counters allow us to categorize the re-
quests made by these instructions: STRM_ST (which counts
streaming store requests) and OTHER (which counts miscel-
laneous accesses, including port I/O, MMIO and uncacheable
memory accesses), which we ﬁnd sufﬁcient to distinguish our
cases of interest. For example, instructions responsible for
ﬂushing caches appear to make one offcore store request for
every cache line ﬂushed; CLFLUSH and CLFLUSHOPT make a
single request. However, the OFFCORE_RESPONSE counter
remains zero for these cases.
We encounter some unexpected behavior even when restrict-
ing our analysis to this limited subset of performance counters.
For example, the VERW instruction makes as many as 28
store requests, despite the fact that VERR makes none. While
this discrepancy may appear puzzling at ﬁrst, the explanation
is simply that VERW has recently been repurposed to ﬂush
internal CPU buffers (such as the line ﬁll buffers), as a
mitigation for the MDS vulnerabilities [19].
However, our attention was drawn to the unexpected mem-
ory accesses performed by other instructions, which appear
to have no obvious reason to access memory at all. The
majority of other requests (corresponding to reads) seem to be
in the OFFCORE_RESPONSE.OTHER group, although there
are exceptions. For example, the SGX information CPUID
leaf increases the store counter by 28—the same number
of accesses as incurred by VERW, which implies that the
microcode for this leaf also performs CPU buffer clears.
C. Leaking Offcore Memory Requests
To investigate these memory reads further, we make use
of MDS [4], [5] which allows us to examine the contents of
internal CPU buffers. The hope is that doing so will reveal
the nature of these memory accesses. MDS allows attackers
to observe (normal) memory reads and writes performed by
microcode. An example is the contents of page table entries
fetched by the PMH. CROSSTALK uses the same vulnerability
to leak information about the memory accesses performed
by microcoded instructions that perform offcore memory re-
quests, as shown in Listing 1.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1856
TABLE II: Example results from the instruction proﬁling stage of CROSSTALK.
Instruction
Description
Executed
µOps
µOps from
Microcode
ROM
µOps
Dispatched
on Ports 2/3
Offcore
Requests
Offcore
Store
Responses
Other
Offcore
Responses
CPUID
CPUID
CPUID
CPUID
CPUID
CPUID
RDRAND
RDSEED
CLFLUSH
RDMSR
RDMSR
Brand String 1 (0x80000002)
Thermal/Power Mgmt (0x6)
SGX Enumeration (0x12) (Subleaf 0)
SGX Enumeration (0x12) (Subleaf 1)
SGX Enumeration (0x12) (Subleaf 2)