### 3.2. Non-Repudiable Service Invocation

**Figure 4: Non-Repudiable Service Invocation**

(a) **Service Invocation**
- **Client**: Sends a request to the server.
- **Server**: Responds to the client.

(b) **Non-Repudiable Service Invocation**
- **Client Interceptor**: Generates an NROreq token and sends it with the request to the server's interceptor.
- **Server Interceptor**: Generates an NRRreq token, returns it to the client's interceptor, and then passes the request to the server.
- **Server**: Generates a response, which is intercepted by the server's interceptor.
- **Server Interceptor**: Generates an NROresp token and sends both the response and the token to the client's interceptor.
- **Client Interceptor**: Verifies the response and generates an NRRresp token.

**Assumptions and Semantics:**
- **At-Most-Once Service Invocation**: If the client receives a response, the operation has been executed once. If no response is received, the operation may or may not have been executed.
- **Non-Repudiation Assurances for the Client**:
  1. The request either failed (server did not receive it) or succeeded (proof that the request is available to the server).
  2. If a response is received, there is proof that the server produced the response.
- **Non-Repudiation Assurances for the Server**:
  1. If a request is received, there is proof identifying the client who submitted the request.
  2. The response either failed (client did not receive it) or succeeded (proof that the response is available to the client).

**Protocol Execution:**
- **Step 1**: The client's interceptor generates an NROreq token and sends it with the request to the server's interceptor.
- **Step 2**: The server's interceptor generates an NRRreq token and returns it to the client's interceptor.
- **Step 3**: The server's interceptor passes the request to the server.
- **Step 4**: The server generates a response, which is intercepted by the server's interceptor.
- **Step 5**: The server's interceptor generates an NROresp token and sends both the response and the token to the client's interceptor.
- **Step 6**: The client's interceptor verifies the response and generates an NRRresp token.

**Simplified Interaction Model:**
- **Client Interceptor (CI)** → **Server Interceptor (SI)**: `req, NROreq`
- **Server Interceptor (SI)** → **Client Interceptor (CI)**: `resp, NRRreq, NROresp`
- **Client Interceptor (CI)** → **Server Interceptor (SI)**: `NRRresp`

**Response Handling:**
- If the request was made available to the server, the response (`resp`) includes evidence of the request's execution, failure, or timeout.
- If the request was not made available to the server, the response indicates that the request was received but not executed.
- The client-side receipt for the server's response, NRRresp, may include evidence of the client's consumption of the response.

### 3.3. Non-Repudiable Information Sharing

**Figure 5: Non-Repudiable Information Sharing**

(a) **Information Sharing**
- **Organizations A, B, and C**: Access and update shared information.
- **Agreement on Update**: A must reach agreement with B and C on the validity of the proposed update.

(b) **Non-Repudiable Information Sharing**
- **Step 1**: Organization A attempts to update the shared information.
- **Step 2**: A's interceptor executes a non-repudiable state coordination protocol with B and C to achieve:
  1. Irrefutable attribution of the update to A.
  2. Independent validation of the update by B and C, with decisions irrefutably attributable to B and C.
  3. Collective decision on the validity of the update, made available to all parties (A, B, and C).
- **Step 3**: If the protocol resolves in agreement, the shared information is updated. Otherwise, it remains unchanged.

**Non-Repudiable Connect and Disconnect Protocols:**
- Govern changes to the membership of the group of organizations sharing the information.

### 4. Component-Based Implementation

**J2EE Application Server:**
- **Components**: Enterprise JavaBeans (EJBs) deployed on the application server.
- **EJB Container**: Provides the runtime environment, intercepting remote invocations and managing services such as persistence and transaction management.
- **Application Programmer**: Focuses on business logic, while the container ensures correct, non-functional behavior.

**Figure 6: J2EE-based Non-Repudiation**
- **EJB Client**: Invokes an operation on an EJB component.
- **Container Interception**: Provides various services, including non-repudiation.

**Prototype Implementation:**
- **JBoss J2EE Application Server**: Extended to support non-repudiation using JBoss-specific mechanisms.
- **Interceptors**: Used to invoke container-level services, modify existing services, or add new services.
- **B2BCoordinator Service**: Exports a remote object for message exchange between trusted interceptors.
- **B2BProtocolHandler**: Custom protocol handlers registered with the coordinator service to execute specific protocols.

**Implementation of Non-Repudiable Service Invocation:**
- **Client Proxy**: Initiates the service invocation.
- **Trusted Interceptors**: Handle the generation and verification of non-repudiation tokens.
- **B2BCoordinators and B2B Protocol Handlers**: Manage the exchange of protocol messages.
- **JBoss NR Interceptor**: Supports the execution of additional logic at the client-side on behalf of a container-level service.

This structured approach ensures clarity, coherence, and professionalism in the presentation of the non-repudiation services and their implementation.