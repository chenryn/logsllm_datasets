    。下面的报告都是基于非法获取的用户密码数据作出的统计分析。
    -   RockYou 被盗的 3200 万个密码分析：使用最多的密码是"123456"
    -   从被泄露的 Htomail 密码中分析得出，使用的最多的是"123456"
    -   通过 MySpace 钓鱼网站收集到的密码中用的最多的是"password1"
    通过这些报告我们很容易看出用户在满足密码限制条件的前提下，更愿意使用简单的密码。估计在密码限制条件为"长度在
    10
    个字符以上，大写字母、小写字母、数字和符号至少包含一个以上"的网站里，用户使用最多的密码就是"Password1!"吧。
    在这种密码使用情况下，如何让用户设置更安全的密码，这正是网站运营方需要彰显智慧的地方。
-   **应用程序设计中关于密码的需求**
    这一节我们将整理一下在应用程序设计中需要考虑的和密码相关的需求问题。
    设置安全密码的最终责任在于用户本人，对应用程序来说最低需求是"不能妨碍用户选择安全的密码"。换句话说，就是不要超出实际需求，设置过于严格的字符种类和密码位数的限制。
    应用程序关于密码中使用的字符种类和长度要满足最低需求，典型的有下面一些组合：
    -   字符种类：英文字母和数字组合（区分大小写）
    -   位数：最多可输入 8 个字符
    但是有人可能觉得上面的限制太局限了，实际上我们也没有必要必须采用这样严格的限制，所以可以考虑下面的组合：
    -   字符种类：所有 ASCII 字符（0x20～0x7E）
    -   位数：128 位以内
    如果放宽密码的字符种类和位数的限制，那么用户可能不只是使用简单的密码，还可能会使用密码短语（Passphrase）。密码短语取代简单的单词，使用若干的词组（Phrase）组成比较长的短句作为密码使用。
    以上我们所说明的内容，是对密码的"容器"的要求。即应用程序准备了一个大的容器（即可使用的字符种类和密码位数），用户自己负责，自由地选择自己的密码。但是，现实中广泛使用的密码很多都是比较容易猜测和攻破的密码，因此越来越多的网站除了限制密码使用的字符和位数外，还对具体的密码内容进行检查、核对。
-   **严格的密码检查原则**
    为了预防用户密码被攻击，Web
    应用应该积极采取密码检查功能。其基本原则，有以下几种：
    -   关于字符种类的检查（比如字母、数字、符号至少各一个）
    -   关于密码位数（比如至少 8 位以上）
    -   禁止使用和用户 ID 一样的密码
    -   禁止使用密码词典里有的词汇做密码
    Twitter 就使用了基于密码字典的密码可用性检查，比如图 5-3 是 Twitter
    用户修改密码的页面 [3]{.注释编号}
    ，在新密码输入框里面输入"password"后的截图。
    ![{%}](Image00186.jpg)
    **图 5-3 Twitter 修改密码界面**
    页面里显示了"密码过于简单"的错误信息，这时如果坚持点击"修改"按钮的话，则会出错。
    也许这样的检查有点过于严格，甚至引起人们质疑其违反了"密码选择是用户的责任"这一原则，但是反过来说这一措施有效避免了用户使用过于简单的密码。
[1]{.注释编号下} 当然，这句话的意思并不是说系统就不存在其他安全隐患。
[2]{.注释编号下} 这些报道都是笔者在 2010 年 10 月 20 日查阅过的。
[3]{.注释编号下} 
### **5.1.2 针对暴力破解攻击的对策** {#text00000.html#nav_point_62 line-num="207 208"}
针对在线暴力破解攻击，账号锁定是一种有效的对抗方式。我们身边账号锁定最常见的例子就是银行卡，如果交易时连续
3
次输入错误密码，卡片就会被冻结。这样可以有效地防止银行卡被盗或者被别人捡到后非法使用。账号密码也一样，如果输错密码超过了一定次数，该账号也应该被锁定。
#### **初步认识账号锁定** {line-num="211 212"}
在 Web 应用程序里基本的账号锁定功能可以这样来实现：
> -   记录每个用户 ID 的密码连续错误次数
>
> -   如果密码错误次数超过了一定上限，则锁定此账号
>     ；被锁定的账号不能再次登录
>
> -   账号被锁定后，通过邮件等方式通知该用户和系统管理员
>
> -   用户正常登录后，清除之前记录的密码错误计数器
如果和 ATM 一样，最多只允许用户输入 3
次错误密码，可能有点太少，会导致用户账号频繁被锁定。所以这个次数设为 10
次比较合适 [4]{.注释编号}
[4]{.注释编号下} 在面向信用卡加盟商的安全标准 PCI DSS
2.0（
）7.5.13 节规定了"在尝试 6 次后锁定用户，阻止用户反复尝试访问"。像 PCI
DSS
一样，如果系统需要遵守的标准明确规定了账号锁定策略的话，我们需要按照该策略规定去实现。
另外，如何给被锁定的账号解除锁定，可以参考下面的规则：
-   账号被锁定后 30 分钟 [5]{.注释编号} ，自动给该用户解锁
-   管理员利用某些方法对用户进行验证后给该用户解锁
[5]{.注释编号下} 在 PCI DSS 2.0 标准里也规定为 30 分钟（7.5.14）。
之所以选择 30
分钟后给用户解锁，为的就是能让正常用户能尽早登录进来。也许有人会觉得 30
分钟有点太过短暂，但实际上 30 分钟是比较合理有效的。
尝试 10 次输入密码错误后再经过 30 分钟等待解锁，这样攻击者为了验证 100
个密码需要四个半小时以上的时间，而且还会给系统管理员发送 10
次账号被锁定的系统通知。在这段时间里，管理员可以详细调查用户被锁定的情况，且根据需要，甚至可以封掉攻击来源的
IP。
#### **暴力破解攻击的检测和对策** {line-num="231 232"}
目前暴力破解攻击的变种有以下几种攻击方法。
-   **字典攻击**
    字典攻击不是尝试所有理论上可能的密码组合，而是只选取使用频率较高的密码按顺序进行尝试。由于现实中很多人在使用比较简单且危险的密码，所以这个方法比单纯的暴力破解效率更高。
    和暴力破解一样，针对字典攻击采用账号锁定是比较有效的。
    ![{%}](Image00187.jpg)
    **图 5-4 字典攻击的例子**
-   **Joe 账号检索**
    用户 ID 和密码相同的账号称为 Joe 账号（Joe
    account），如果在应用程序里不禁止这种用户 /
    密码组合，那么系统里就可能存在一定比例的 Joe 账号。Joe
    账号检索的例子可以参考图 5-5。
    单纯的账号锁定不能解决 Joe 账户检索攻击，具体对策将在后面进行讲解。
    ![{%}](Image00188.jpg)
    **图 5-5 Joe 账号检索的例子**
-   **逆向暴力破解**
    通常的暴力破解是针对固定的用户
    ID，采用不同的密码尝试登录。与此相反，逆向暴力破解（Reverse Brute
    Force Attack）则是固定密码，轮换不同的用户 ID 组合进行尝试。图 5-6
    是使用固定密码"password1"进行逆向暴力破解的例子。
    针对逆向暴力破解，账号锁定对策也无能为力。关于其对策我们会在下面一节进行说明。
    ![{%}](Image00189.jpg)
    **图 5-6 逆向暴力破解的例子**
-   **针对变种暴力破解的对策**
    在 Joe
    账号攻击和逆向暴力破解攻击面前，单纯的账号锁定功能没有效果。但是，对这种攻击必须要采取相应对策。
    比如，通过统计 MySpace 的密码后发现，用户使用最多的密码是
    password1，占统计对象总数的 0.22%。这个数字看起来很小，但是如果用
    password1 做密码进行逆向暴力破解的话，尝试 1000
    个用户平均就能成功登录 2 次。这种攻击的成功率是非常高的
    [6]{.注释编号} 。
    所以，必须要对这种攻击采取必要的措施。但是就现实情况来说，还没有什么特别有效的对策。下面列出一些辅助措施。
    -   **严格检查密码**
        前面我们已经说明过了，在用户注册时根据字典检查用户输入的密码，如果密码是很多用户常用的密码，或者密码和用户
        ID 一样，就拒绝用户注册。这样就能完全杜绝 Joe
        账号问题了。另外，即使攻击者使用逆向暴力破解，由于其采用的密码都是平常被大量使用的密码，而如果这样的密码在系统中被禁用的话，攻击者的成功率也会大大降低。
    -   **隐藏登录 ID**
        这种方法是指系统中除了保存对外公开的昵称之外，还另外保存非公开的用于登录的用户
        ID。具体例子包括将用户的电子邮箱地址作为登录 ID。SNS 巨头 mixi
        或 GREE、facebook、MySpace、EC 巨头 Amazon
        等，都使用电子邮件作为用户的登录 ID[7]{.注释编号}
        。另一方面，Twitter
        除了支持使用电子邮件登录之外，也支持用公开的用户 ID 登录。所以
        Twitter 不能有效地预防逆向暴力破解。
        使用电子邮件作为登录 ID
        时，需要考虑到用户变更邮箱地址的需求，所以最好在内部保存一个唯一的
        ID 来标识一个用户。
    -   **监视登录失败率**
        发生密码暴力破解攻击时，登录失败率（单位时间内登录失败次数 ÷
        尝试登录总次数）一般都会激增。所以如果定时检测登录失败率，管理员就可以在失败率激增的时候调查其原因。如果是遇到攻击了，管理员可以通过封掉远程
        IP 地址等必要的措施进行处理，这也是一种有效对策。
    -   **各种对策方法的比较**
        下面总结一下到目前为止讲过的各种对策的优缺点。
        **表 5-2 解决变种暴力破解攻击的各种对策的优缺点**
          ---------------- ------------------------ ---------------------------------------------------------
                           优点                     缺点
          严格检查密码     实现、部署简单           需要花费精力去创建和维护密码字典 / 不能算作完美的对策
          隐藏登录 ID      实现、部署简单           已有的应用需要变更服务设计，实现起来有一定难度。
          监视登录失败率   对所有密码攻击都有效果   需要有监视人员，运行成本较高 / 有可能不能做到即时响应。
          ---------------- ------------------------ ---------------------------------------------------------
        上面所列举的这些措施能有效地提高系统的安全性，但不一定能有效应对其漏洞。在项目规划阶段，需要综合网站性质、对安全性的要求、项目成本等方面综合考虑，再决定是否需要实施这些对策。
[6]{.注释编号下}
也许会有人觉得这种攻击很简单，且成功率很高，所以也想尝试一下，但是即使不是出于恶意，只要拿着别人的账号密码登录了，就是触犯法律的行为，请不要在非实验环境做这样的测试。
[7]{.注释编号下} 不确定是否考虑到安全上的问题才这样设计。
### **5.1.3 密码保存方法** {#text00000.html#nav_point_63 line-num="299 300"}
在这一节里，我们将讲解为什么需要在保存密码时对其进行加密保护，以及可以采用的具体方法等。
#### **保护密码的必要性** {line-num="303 304"}
如果由于某些原因导致用户密码泄露，那么就有可能导致用户密码被恶意使用，从而给用户造成损失。一旦密码泄露，很可能导致其他机密信息也泄露出去，甚至会导致信息泄露之外的损失。
-   利用该用户权限进行购物、转账等
-   利用该用户权限进行信息发布、篡改、删除
-   如果用户在多个网站使用同一密码的话，损失也会波及到其他网站
因此，为了防止网站因为 SQL
注入漏洞等导致数据库信息泄露时不让攻击者能恶意使用保存在数据库中的密码，就需要对密码采取保护措施。
典型的密码保护方法包括加密和信息摘要（Message
Digest）（也称密码学级别的散列值，Cryptographic Hash）
下面将讲解安全的密码保存方法。
#### **利用加密方式进行密码保护及其注意事项** {line-num="317 318"}
一般来说用来开发 Web
应用的编程语言都会提供用来加密的库，密码的加密、解密从编码学的角度来说都不是什么困难的事情。但是，实际进行加密的时候，有以下几个问题需要考虑。
-   选择安全的加密算法
-   如何生成 key
-   如何管理 key
-   加密算法退化（Compromise）后的再次加密 [8]{.注释编号}
[8]{.注释编号下}
加密算法的退化是指加密算法被破解，或者随着计算机性能的提升，暴力破解等变得更容易实现等情况。这里所说的再加次加密是指先用之前已经退化的算法进行解密，再使用新的安全的加密算法进行加密。
这其中最难的问题是 key 的保管方法。由于每次登录都需要 key，所以只把 key
锁在安全的保险箱里是不可行的。而且既要确保 Web 应用能正常使用
key，还要确保 key
不会被盗取，这样的系统本身很难实现。退一步说，如果能找到理想的管理 key
的方法，那么也可以用这种方法直接来管理密码。
所以，现实中几乎不采用可逆加密的方式来保护密码，更多情况下是采用下面将要说明的信息摘要的方式。
> **专栏：数据库加密和密码保护**
>
> 现在市场上有能将整个数据库进行加密的产品。其中大部分的产品都可以称为"透明数据加密"（TDE，Transparent
> Data Encryption），即应用程序开发可以不用考虑加密功能的存在。
>
> 使用 TDE 的时候，应用程序只是使用普通的 SQL
> 语句，数据库引擎则将数据加密后进行存储。使用 SELECT
> 等语句进行数据检索时，TDE 会自动对加密的数据进行解密操作。
>
> 使用 TDE
> 数据库虽然很简单，但是它并不适合进行密码保护。其原因是它不能防御类似
> SQL 注入这样的攻击。因为 TDE 的透明加密的关系，SQL
> 注入后得到的数据都是被解密后的明文字符串了。
>