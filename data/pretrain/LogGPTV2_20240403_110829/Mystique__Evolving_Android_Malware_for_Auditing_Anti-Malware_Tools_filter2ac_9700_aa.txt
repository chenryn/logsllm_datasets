title:Mystique: Evolving Android Malware for Auditing Anti-Malware Tools
author:Guozhu Meng and
Yinxing Xue and
Mahinthan Chandramohan and
Annamalai Narayanan and
Yang Liu and
Jie Zhang and
Tieming Chen
Mystique: Evolving Android Malware for Auditing
Anti-Malware Tools
Guozhu Meng*, Yinxing Xue*, Chandramohan Mahinthan*, Annamalai Narayanan*,
Yang Liu*, Jie Zhang* and Tieming Chen†
*School of Computer Engineering, Nanyang Technological University, Singapore
†Department of Computer Science and Technology, Zhejiang University Of Technology, China
ABSTRACT
In the arms race of attackers and defenders, the defense is usually
more challenging than the attack due to the unpredicted vulnera-
bilities and newly emerging attacks every day. Currently, most of
existing malware detection solutions are individually proposed to
address certain types of attacks or certain evasion techniques. Thus,
it is desired to conduct a systematic investigation and evaluation
of anti-malware solutions and tools based on different attacks and
evasion techniques. In this paper, we ﬁrst propose a meta model for
Android malware to capture the common attack features and evasion
features in the malware. Based on this model, we develop a frame-
work, MYSTIQUE, to automatically generate malware covering four
attack features and two evasion features, by adopting the software
product line engineering approach. With the help of MYSTIQUE,
we conduct experiments to 1) understand Android malware and the
associated attack features as well as evasion techniques; 2) evaluate
and compare the 57 off-the-shelf anti-malware tools, 9 academic
solutions and 4 App market vetting processes in terms of accuracy in
detecting attack features and capability in addressing evasion. Last
but not least, we provide a benchmark of Android malware with
proper labeling of contained attack and evasion features.
Keywords
Android Feature Model, Defense Capability, Malware Generation,
Evolutionary Algorithm
1.
INTRODUCTION
Malware detection is always one of the central topics in cyber-
security. Anti-malware tools (AMTs) are getting more advanced,
but as a result surviving malware is getting increasingly sophisti-
cated. Generally speaking, the development of AMTs usually lags
behind the advance of new malware, since new malware variants
(similar malware generated by software obfuscation or conﬁguration
techniques) and zero-day vulnerabilities (a weakness that allows an
attacker to exploit the target system) keep emerging every day.
In retrospect, Android malware undergoes a stunningly rapid
increase in a short time of last ﬁve years. In 2010, we witness the
industrial age of mobile malware, and also in that year Geinimi was
one of the ﬁrst found malware that attacked the Android platform
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897856
and used the infected phone as part of a mobile botnet [3]. Ever
since then, a larger number of sophisticated mobile malware is
created by attackers due to the prevalence of Android phones. With
regard to the defence side, traditional approaches relying on textual
or hexadecimal signatures [46] are incapable of detecting variants
of existing malware and new ones. To catch up the trend, in research
community, machine learning based approaches [5, 7, 9, 52] and
information-ﬂow analysis based approaches [8, 27, 34] are proposed
to detect obfuscated malware and their variants. Recently, new
attacks (transformation attacks [41, 42] and collusion attacks [28,
46]) are revealed, and they fail the existing detection approaches.
Thus the similar arms race between malware and anti-malware is
unexceptionally observed on Android platform.
Recently, Android malware exhibits a variety of attack behaviors,
including leaking user privacy, escalating privilege without permis-
sion, conducting unknown ﬁnancial charge, and abusing application
functionality. In real malware, these attack behaviors may coex-
ist in order to increase the damage and success probability of the
attack. Even worse, evasion techniques (e.g., multiple-level obfusca-
tion [41, 42]) are further applied on the code or deployment package
to evade the scanning of AMTs. Hence, the combination of different
attack behaviors and evasion techniques indeed exist in real-world
Android malware [55] — such a fact hinders the understanding of
the reason why AMTs fail in detection.
The main challenge in auditing the AMTs is the lack of the eval-
uation criteria and well labeled benchmark such that we cannot
evaluate and the strength and weakness of AMTs systematically. To
our best knowledge, existing AMT evaluation is based on bench-
marks like GENOME [55] and DREBIN [7], which classify malware
based on families only. GENOME and DREBIN are not suitable for
auditing AMTs due to three reasons: 1) the malware are old and
well recorded in malware repository of AV tools, 2) there is no a
comprehensive coverage of different attacking and evasion tech-
niques, 3) there is no index (or label) to different malware attributes
(e.g., attack behaviors, obfuscation techniques and anti-debugging
techniques), except for (inaccurate) family names. By far, only
one existing work [41] discusses the resilience of different Defence
strategys (DS) against obfuscation techniques.
In this paper, we propose to separate different attack behaviors
and evasion techniques into basic reusable features — to summarize
the attack features and evasion features of malware on Android.
Here, attack feature (AF) means malicious behavior of a certain
attack, which links to implementation of the functional requirements
(intention) of malware. Evasion feature (EF) means the ability of
malware to evade the scanning of AMTs, including a variety of
code complication and transformation techniques that change no
functional requirements of malware. In this way, we can develop a
meta model for Android malware by modularizing various attack
365features into the various building blocks. Hence this meta model
allows us to generate malware variants to cover different AFs and
EFs, and evaluate how different DSs react to each individual feature
as well as their different combinations.
Technically, we start with detecting and analyzing the malicious
code among the similar yet different malware variants in an Android
malware sample. We then modularize the malicious code from
different malware families into different AFs, and identify evasion
techniques into EFs. Once features are modularized, we adopt the
concept of Software Product Line Engineering (SPLE) and build
a feature-oriented architecture [31] as the malware meta model to
capture the different features and their constraints inside malware.
With the malware meta model, we apply a multiple-objective
evolutionary algorithm (MOEA) to mimic the evolution of the mal-
ware. MOEA performs gene crossover (i.e., exchanging features of
two samples) and mutations (i.e., selecting or deselecting feature
under mutation) on the current malware generation to produce next
malware generation. To guide the evolution to generate better mal-
ware, we deﬁne the ﬁtness function for selecting next generation by
maximizing the number of attack behaviors, minimizing of evasion
techniques needed and the expected detection rate.
To sum up, we make the following contributions:
Finally, we develop the proposed malware generation process into
a tool called MYSTIQUE, and use it to audit 57 off-the-shelf anti-
malware tools and 9 academic solutions in terms of detection ratio
and capability with 10,000 generated malware. With the experiment
results, we test four commonsense hypothesis of AMTs. To check
the capability of online vetting of app stores, we upload 12 generated
malicious apps onto 4 mainstream app stores. In most cases, our
malware passes the online vetting process. Furthermore, we propose
some possible enhancements for the existing malware detection
approaches.
• We recognize the Android malware as AFs and EFs and present
them in a meta model. We consider and maintain the traceability
between the features and their corresponding code in MYSTIQUE.
• Based on the meta model, we develop an SPL architecture to
generate new Android malware by an MOEA. Our approach is
implemented in an automated framework named MYSTIQUE.
• We survey and evaluate the state-of-the-art AMTs using our gener-
ated malware. The experiments show that the existing AMTs are
quite weak at detecting these new malware — a detection ratio
of less than 30% on average. We propose the countermeasures in
order to detect the malware generated by MYSTIQUE.
• We have generated over 10,000 samples of Android malware by
combining different attack and evasion features. They can serve
as a benchmark to assess detection capabilities of AMTs, as they
cover different representative combinations of features, which
are missing in the current malware benchmarks.
2. BACKGROUND
2.1 Software Product Line Engineering
Software product line engineering (SPLE) is a paradigm of de-
veloping a set of similar software. SPLE adopts feature-oriented
domain analysis [31] for requirement analysis and builds core asset
architecture for reuse [17]. Here, features are attributes of system
and requirements of end-users. Technically, SPLE is a two-phase
approach composed of domain engineering and application engi-
neering. The task of domain engineering is to build the software
product line (SPL) architecture consisting of a common program
base and various variant features, while the application engineering
focuses on derivation of new products by different customizations
of variant features applied onto the common program base.
The concept of feature model in domain engineering is to repre-
sent the features within the product family as well as the structural
and semantic (require or exclude) relationships between those fea-
tures [31]. Since the proposal of SPL, feature model has even been
characterized as “the greatest contribution of domain engineering to
software engineering” [18].
A feature model is a tree-like hierarchy of features. The structural
and semantic relationships between a super (or compound) feature
and its subfeatures can be speciﬁed as:
• Mandatory – A mandatory feature must be selected if its super
• Optional – An optional feature is optional to be selected,
• Or – If the super feature is selected, at least one of the subfeatures
• Alternative – If the super feature is selected, exactly one among
feature is selected,
must be selected,
the exclusive subfeatures should be selected.
Besides the above tree-structure constraints (TCs) between features,
cross-tree constraints (CTCs) are also often adopted to represent the
mutual relationship for features across the feature model. There are
three types of common CTCs:
• f1 requires f2 – The inclusion of feature f1 implies the inclusion
• f1 excludes f2 – The inclusion of feature f1 implies the exclusion
• f1 iff f2 – The inclusion of feature f1 implies the inclusion of
of feature f2 in the same product, and vice versa.
of feature f2 in the same product.
feature f2 in the same product, and vice versa.
In SPLE, a feature model (e.g., that of Linux kernel [48]) may
even contain thousands of features. Selecting an optional set of
features, which satisﬁes the constraints (i.e., TCs and CTCs) among
features and attains the optimisation of product attributes, is not
a trivial problem. Basically, selecting such an optional set is a
searching problem, to address which, in SPLE community, the
multiple objective evolutionary algorithms (MOEAs) are commonly
adopted. In SPLE, the desired products have a set of attributes (e.g.,
performance, costs and defects) to be optimized, which means multi-
objective optimization is needed in product design when competing
features exist. IBEA (Indicator-Based Evolutionary Algorithm), has
been proved to the best MOEA for solving the problem of optimal
feature selection [44, 50].
2.2 Overview of Android Attacks
Application cloning has been observed in Android application
market by industrial developers and the academic community [13,
54]. In GENOME [55] and DREBIN [7], many malware samples
share the common attack behaviors. We identify ﬁve types of threats
from GENOME malware, namely privacy leakage, privilege escala-
tion, ﬁnancial charge, abuse of functionality, and ransomware. In
this study, we focus on the modeling and generation of the malware
of privacy leakage. The rationale is that this type of malware consti-
tutes 78.7% in GENOME, and most of existing academic prototypes
(e.g., FLOWDROID [8], DROIDSAFE [27]) are proposed to address
privacy leakage.
Privacy Leakage. A damage of this type of attack is the possibility
of exposing users’ sensitive information such as account credentials,
preferences and contacts. In Android, speciﬁcally, sensitive informa-
tion that can be leaked is twofold — contacts, messages, personal
information available on social networks, and ﬁnancial information
directly accessible by malicious users. These are examples of ex-
plicit privacy, which is mentioned in [47]. Another kind of privacy
is implicit privacy. Implicit privacy denotes the information that
malicious users cannot directly use — the attacker has to analyze
it in order to reveal valuable information. For example, Schlegel
366Figure 1: A running example to illustrate the generation of new variant of DroidKungFu
3.1 Mystique Overview
Figure 2: The partial feature model of privacy leakage malware
et al. [45] present an approach that can gather audio data from
on-board sensors and use it to recognize commercial credentials.
As introduced above, the same type of attacks may have various
implementations or adopt different channels to conduct the attacks.
We regard these different implementations of the same type of at-
tacks as attack features. For example, the attack features of privacy
leakage include a mandatory information source, an optional ﬂow of
information, and a mandatory sink of information. The implementa-
tion of accessing information source may refer to some ﬁner-grained
attack features, e.g., getting the phone number by calling method
getLine1Number. Details and more examples can be found in Section
3 and Fig. 1. To sum up, various attack features serve as the basic
building blocks for constructing malware.
In Section 7, we evaluate the state-of-the-art AMTs, including
academic prototypes and anti-virus tools, with our generated mal-
ware of privacy leakage. Note that our approach works for all types
of Android malware, as long as attack and evasion features of a
certain attack type are identiﬁed and modularized.
2.3 Adopting SPLE for Malware Generation
Identifying common attack features among Android malware
enables feature-oriented domain analysis (FODA) [31], which is a
domain analysis method to decouple and model software systems
for better reuse and reconstruction. FODA adopts the feature model
(§ 2.1) to analyze the commonality and variability inside a software
family, and guide the variant generation for the family.
Malicious apps in an Android malware family usually share much
of source code. To better understand the behaviors of Android
malware, we perform the feature-oriented domain analysis on each
malware family to identify and model their attack features (§ 4.1).
Once the attack features are identiﬁed and modularized, the state-
of-the-art development paradigm, SPLE, naturally comes into the
picture for large-scale and ﬂexible malware generation.
With the generated malware via SPLE, we can systematically
evaluate how and to what extent AMTs and the associated evidences
can help detect different attack or evasion features. Beyond that, we
can audit these AMTs and their detection mechanisms behind.
3. MYSTIQUE OVERVIEW
This section explains the high-level idea of our approach MYS-
TIQUE and depicts the major steps of our approach with a running
example. In addition, we present the potential challenges in this
study.
We show the overview of the malware generation using Fig. 3.
The input of MYSTIQUE includes the original malware collection
(i.e., GENOME [55] in this work), and the identiﬁed meta model