# Title: Mystique: Evolving Android Malware for Auditing Anti-Malware Tools

## Authors:
- Guozhu Meng
- Yinxing Xue
- Mahinthan Chandramohan
- Annamalai Narayanan
- Yang Liu
- Jie Zhang
- Tieming Chen

### Affiliations:
- *School of Computer Engineering, Nanyang Technological University, Singapore
- â€ Department of Computer Science and Technology, Zhejiang University of Technology, China

## Abstract
In the ongoing battle between attackers and defenders, defense is often more challenging due to the constant emergence of new vulnerabilities and attack techniques. Most existing malware detection solutions are designed to address specific types of attacks or evasion techniques. Therefore, a systematic evaluation of anti-malware tools (AMTs) based on various attacks and evasion techniques is essential. In this paper, we propose a meta model for Android malware that captures common attack and evasion features. Based on this model, we develop MYSTIQUE, a framework that automatically generates malware by incorporating four attack features and two evasion features using software product line engineering (SPLE). Using MYSTIQUE, we conduct experiments to:
1. Understand Android malware and its associated attack and evasion features.
2. Evaluate and compare 57 off-the-shelf AMTs, 9 academic solutions, and 4 app market vetting processes in terms of their accuracy and capability to detect and mitigate these features.
3. Provide a benchmark of Android malware with detailed labeling of attack and evasion features.

## Keywords
- Android Feature Model
- Defense Capability
- Malware Generation
- Evolutionary Algorithm

## 1. Introduction
Malware detection remains a central topic in cybersecurity. While anti-malware tools (AMTs) have become more advanced, surviving malware has also grown increasingly sophisticated. The development of AMTs typically lags behind the evolution of new malware, as new variants and zero-day vulnerabilities emerge daily.

Over the past five years, Android malware has seen a rapid increase. In 2010, the mobile malware era began, with Geinimi being one of the first known Android malware that turned infected phones into part of a botnet [3]. Since then, numerous sophisticated mobile malware has been created, driven by the widespread use of Android devices. Traditional signature-based approaches [46] are ineffective against new variants and obfuscated malware. To address this, machine learning [5, 7, 9, 52] and information-flow analysis [8, 27, 34] methods have been proposed. However, recent attacks, such as transformation [41, 42] and collusion [28, 46], still evade these detection methods.

Android malware exhibits a variety of attack behaviors, including privacy leakage, privilege escalation, financial fraud, and abuse of functionality. These behaviors can coexist in real-world malware, making detection more challenging. Evasion techniques, such as multi-level obfuscation [41, 42], further complicate the task of AMTs.

The main challenge in auditing AMTs is the lack of comprehensive evaluation criteria and well-labeled benchmarks. Existing benchmarks like GENOME [55] and DREBIN [7] classify malware based on families but do not cover different attack and evasion techniques comprehensively. This hinders the systematic evaluation of AMTs.

In this paper, we propose a meta model for Android malware that separates attack and evasion features into reusable components. We then use this model to generate malware variants and evaluate how different AMTs react to individual and combined features. Our contributions include:
- Recognizing and presenting Android malware as attack features (AFs) and evasion features (EFs) in a meta model.
- Developing an SPLE architecture to generate new Android malware using a multiple-objective evolutionary algorithm (MOEA).
- Evaluating state-of-the-art AMTs using our generated malware, revealing that they have a low detection rate (less than 30% on average).
- Generating over 10,000 samples of Android malware, which can serve as a benchmark for assessing AMT capabilities.

## 2. Background

### 2.1 Software Product Line Engineering (SPLE)
SPLE is a paradigm for developing a set of similar software products. It uses feature-oriented domain analysis (FODA) for requirement analysis and builds a core asset architecture for reuse. Features are attributes of the system and end-user requirements. SPLE involves two phases: domain engineering and application engineering. Domain engineering builds the software product line (SPL) architecture, while application engineering focuses on deriving new products through customization.

A feature model represents the features within a product family and their structural and semantic relationships. Common relationships include mandatory, optional, or, and alternative. Cross-tree constraints (CTCs) represent mutual relationships across the feature model. Selecting an optimal set of features that satisfy these constraints is a complex problem, often addressed using multiple objective evolutionary algorithms (MOEAs).

### 2.2 Overview of Android Attacks
Application cloning is a common threat in the Android ecosystem. Malware samples in GENOME [55] and DREBIN [7] share common attack behaviors, including privacy leakage, privilege escalation, financial fraud, and abuse of functionality. In this study, we focus on privacy leakage, which constitutes 78.7% of GENOME malware and is a primary concern for many academic prototypes.

Privacy Leakage: This type of attack exposes sensitive user information, such as account credentials, preferences, and contacts. In Android, sensitive information includes contacts, messages, personal data from social networks, and financial information. Another form of privacy, implicit privacy, requires analysis to reveal valuable information. For example, Schlegel et al. [45] presented a method to gather audio data and recognize commercial credentials.

### 2.3 Adopting SPLE for Malware Generation
Identifying common attack features among Android malware enables FODA, which decouples and models software systems for better reuse and reconstruction. Once attack features are identified and modularized, SPLE can be used for large-scale and flexible malware generation.

## 3. MYSTIQUE Overview
This section explains the high-level idea of MYSTIQUE and outlines the major steps of our approach, along with potential challenges.

### 3.1 Overview of Malware Generation
MYSTIQUE takes as input an original malware collection (e.g., GENOME [55]) and an identified meta model. The framework generates malware by combining different attack and evasion features. The process involves:
1. Detecting and analyzing malicious code in Android malware samples.
2. Modularizing the malicious code into AFs and identifying evasion techniques as EFs.
3. Building a feature-oriented architecture using SPLE.
4. Applying a MOEA to evolve the malware, performing gene crossover and mutations to produce new generations.
5. Defining a fitness function to guide the evolution, maximizing attack behaviors and minimizing evasion techniques while considering the expected detection rate.

### 3.2 Challenges
The main challenges in this study include:
- Accurately detecting and modularizing attack and evasion features.
- Ensuring the traceability between features and their corresponding code.
- Balancing the complexity of the generated malware to effectively test AMTs.

## 4. Conclusion
In this paper, we present MYSTIQUE, a framework for generating and evaluating Android malware. By separating malware into attack and evasion features, we provide a systematic approach to assess the effectiveness of AMTs. Our experiments show that current AMTs struggle to detect new malware, highlighting the need for improved detection methods. The generated malware samples serve as a benchmark for future research and development in malware detection.