---
title: Javascript
date: 20200402
author: Lyz
---
JavaScript is a multi-paradigm, dynamic language with types and operators,
standard built-in objects, and methods. Its syntax is based on the Java and
C languages — many structures from those languages apply to JavaScript as well.
JavaScript supports object-oriented programming with object prototypes, instead
of classes. JavaScript also supports functional programming — because they are
objects, functions may be stored in variables and passed around like any other
object.
# The basics
## Javascript types
JavaScript's types are:
* Number
* String
* Boolean
* Symbol (new in ES2015)
* Object
    * Function
    * Array
    * Date
    * RegExp
* null
* undefined
## Numbers
Numbers in JavaScript are *double-precision 64-bit format IEEE 754 values*.
There's no such thing as an integer in JavaScript, so you have to be a little
careful with your arithmetic.
The standard arithmetic operators are supported, including addition,
subtraction, modulus (or remainder) arithmetic, and so forth. Use the Math
object when in need of more advanced mathematical functions and constants.
It supports `NaN` for *Not a Number* which can be tested with `isNaN()` and
`Infinity` which can be tested with `isFinite()`.
JavaScript distinguishes between `null` and `undefined`, which indicates an
uninitialized variable.
### Convert a string to an integer
Use the built-in `parseInt()` function. It takes the base for the conversion
as an optional but recommended second argument.
```javascript
parseInt('123', 10); // 123
parseInt('010', 10); // 10
```
### Convert a string into a float
Use the built-in `parseFloat()` function. Unlike `parseInt()` , parseFloat()
always uses base 10.
## Strings
Strings in JavaScript are sequences of Unicode characters (UTF-16) which support
several
[methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods).
### Find the length of a string
```javascript
'hello'.length; // 5
```
## Booleans
JavaScript has a boolean type, with possible values `true` and `false`. Any
value will be converted when necessary to a boolean according to the following
rules:
* `false`, `0`, empty strings (`""`), `NaN`, `null`, and `undefined` all become
    `false`.
* All other values become `true`.
Boolean operations are also supported:
* and: `&&`
* or: `||`
* not: `!`
## Variables
New variables in JavaScript are declared using one of three keywords: `let`,
`const`, or `var`.
* `let` is used to declare block-level variables.
    ```javascript
    let a;
    let name = 'Simon';
    ```
    The declared variable is available from the block it is enclosed in.
    ```javascript
    // myLetVariable is *not* visible out here
    for (let myLetVariable = 0; myLetVariable `
* `=`
* `==`, performs type coercion if you give it different types, with sometimes
    interesting results
    ```javascript
    123 == '123'; // true
    1 == true; // true
    ```
    To avoid type coercion, use the triple-equals operator:
    ```javascript
    123 === '123'; // false
    1 === true;    // false
    ```
* `!=` and `!==`.
## Control structures
### If conditionals
```javascript
var name = 'kittens';
if (name == 'puppies') {
  name += ' woof';
} else if (name == 'kittens') {
  name += ' meow';
} else {
  name += '!';
}
name == 'kittens meow';
```
You can use the [conditional ternary
operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)
instead.
It's defined by a condition followed by a question mark `?`, then an
expression to execute if the condition is truthy followed by a colon `:`, and
finally the expression to execute if the condition is falsy.
`condition ? exprIfTrue : exprIfFalse`
```javascript
function getFee(isMember) {
  return (isMember ? '$2.00' : '$10.00');
}
console.log(getFee(true));
// expected output: "$2.00"
console.log(getFee(false));
// expected output: "$10.00"
console.log(getFee(null));
// expected output: "$10.00"
```
### Switch cases
```javascript
switch (action) {
  case 'draw':
    drawIt();
    break;
  case 'eat':
    eatIt();
    break;
  default:
    doNothing();
}
```
If you don't add a `break` statement, execution will "fall through" to the next
level.  The default clause is optional
### While loops
```javascript
while (true) {
  // an infinite loop!
}
var input;
do {
  input = get_input();
} while (inputIsNotValid(input));
```
### For loops
It has several types of for loops:
* Classic `for`:
    ```javascript
    for (var i = 0; i 
      Click to Remove Me!
    ```
* Methods like `call()`, `apply()`, and `bind()` can refer this to any object.
## Arrays
Arrays can be thought of as Python lists. They work very much like regular
objects but with [their own
properties and methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array),
such as `length`, which returns one more than the highest index in the array.
```javascript
var a = new Array();
a[0] = 'dog';
a[1] = 'cat';
a[2] = 'hen';
// or
var a = ['dog', 'cat', 'hen'];
a.length; // 3
```
### Iterate over the values of an array
```javascript
for (const currentValue of a) {
  // Do something with currentValue
}
// or
for (var i = 0; i  x * 2); // [2, 4, 6]
```
### [Filter the contents of an array](https://www.w3schools.com/jsref/jsref_filter.asp)
The `filter()` method creates a new array filled with elements that pass a test
provided by a function.
The `filter()` method does not execute the function for empty elements.
The `filter()` method does not change the original array.
For example:
```javascript
const ages = [32, 33, 16, 40];
const result = ages.filter(checkAdult);
function checkAdult(age) {
  return age >= 18;
}
```
### [Array useful methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods)
TBC
## Functions
```javascript
function add(x, y) {
  var total = x + y;
  return total;
}
```
Functions have an `arguments` array holding all of the values passed to the
function.
To save typing and avoid [the confusing behavior of
this](https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/),it
is recommended to use the [arrow
function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)
syntax for event handlers.
So instead of
```javascript
```
It's better to use
```javascript
 alert('click')}>
```
Notice how with `onClick={() => alert('click')}`, the function is passed as the
`onClick` prop.
Another example, from this code:
```javascript
hello = function() {
  return "Hello World!";
}
```
You get:
```javascript
hello = () => "Hello World!";
```
If you have parameters, you pass them inside the parentheses:
```javascript
hello = (val) => "Hello " + val;
```
### Define variable number of arguments
```javascript
function avg(...args) {
  var sum = 0;
  for (let value of args) {
    sum += value;
  }
  return sum / args.length;
}
avg(2, 3, 4, 5); // 3.5
```
### [Function callbacks](https://www.w3schools.com/js/js_callback.asp)
A callback is a function passed as an argument to another function.
Using a callback, you could call the calculator function `myCalculator` with a callback, and let the calculator function run the callback after the calculation is finished:
```javascript
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}
myCalculator(5, 5, myDisplayer);
```
## Custom objects
JavaScript is a prototype-based language that contains no class statement.
Instead, JavaScript uses functions as classes.
```javascript
function makePerson(first, last) {
  return {
    first: first,
    last: last,
    fullName: function() {
      return this.first + ' ' + this.last;
    },
    fullNameReversed: function() {
      return this.last + ', ' + this.first;
    }
  };
}
var s = makePerson('Simon', 'Willison');
s.fullName(); // "Simon Willison"
s.fullNameReversed(); // "Willison, Simon"
```
Used inside a function, `this` refers to the current object. If you called it
using dot notation or bracket notation on an object, that object becomes `this`.
If dot notation wasn't used for the call, `this` refers to the global object.
Which makes `this` is a frequent cause of mistakes. For example:
```javascript
var s = makePerson('Simon', 'Willison');
var fullName = s.fullName;
fullName(); // undefined undefined
```
When calling `fullName()` alone, without using `s.fullName()`, this is bound to
the global object. Since there are no global variables called `first` or `last`
we get `undefined` for each one.
### Constructor functions
We can take advantage of the `this` keyword to improve the `makePerson` function:
```javascript
function Person(first, last) {
  this.first = first;
  this.last = last;
  this.fullName = function() {
    return this.first + ' ' + this.last;
  };
  this.fullNameReversed = function() {
    return this.last + ', ' + this.first;
  };
}
var s = new Person('Simon', 'Willison');
```
`new` is strongly related to `this`. It creates a brand new empty object, and
then calls the function specified, with `this` set to that new object. Notice
though that the function specified with this does not return a value but merely
modifies the `this` object. It's `new` that returns the `this` object to the
calling site. Functions that are designed to be called by `new` are called
constructor functions. Common practice is to capitalize these functions as
a reminder to call them with `new`.
Every time we create a person object we are creating two brand new function
objects within it, to avoid it, use shared functions.
```javascript
function Person(first, last) {
  this.first = first;
  this.last = last;
}
Person.prototype.fullName = function() {
  return this.first + ' ' + this.last;
};
Person.prototype.fullNameReversed = function() {
  return this.last + ', ' + this.first;
};
```
`Person.prototype` is an object shared by all instances of `Person`. any time
you attempt to access a property of `Person` that isn't set, JavaScript will
check `Person.prototype` to see if that property exists there instead. As
a result, anything assigned to `Person.prototype` becomes available to all
instances of that constructor via the `this` object. So it's easy to add extra
methods to existing objects at runtime:
```javascript
var s = new Person('Simon', 'Willison');
s.firstNameCaps(); // TypeError on line 1: s.firstNameCaps is not a function
Person.prototype.firstNameCaps = function() {
  return this.first.toUpperCase();
};
s.firstNameCaps(); // "SIMON"
```
## Split code for readability
To split a line into several, parentheses may be used to avoid the insertion of