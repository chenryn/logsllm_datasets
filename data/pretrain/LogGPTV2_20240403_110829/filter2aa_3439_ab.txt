virtualized. Take care. J 
DEF"CON"CHINA"1.0"(2019)"
18"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Have you tried to open the packer in IDA Pro? First sight: only red 
and grey blocks (non-functions and data).  
ü  Eventually, data blocks could hold VM handlers...  
ü  Original code section could be “splitted” and “scattered” around 
the program (data and instructions are mixed in the binary, without 
having just one instruction block) 
ü  Instructions which are referencing import functions could have 
been either zeroed or replaced by NOP. L  Most certainly, they will 
be restored (re-inserted) dynamically by the packer later.  
ü  The “hidden” function code could be  copied (memcpy( )) to 
memory allocated by VirtualAlloc( ) J Of course, there must be a 
fixup in the code to get these instructions.  
DEF"CON"CHINA"1.0"(2019)"
19"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü Custom packers usually don’t virtualize all x86 instructions.  
ü It is common to see a kind of mix between virtualized, native 
instructions and data after the packing procedure.  
ü Native APIs could be redirected to stub code, which forwards the 
call to (copied) native DLLs (from the respective APIs). 
ü API call instructions, which would make direct references to the IAT, 
are usually translated to short jumps using RVA, for the same 
import address (“IAT obfuscation”) J  
ü Worse, the API names could be hashed (as used in shellcodes). J  
DEF"CON"CHINA"1.0"(2019)"
20"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü By the way, how many virtualized instructions exist?  
ü Are we able to classify virtualized instructions in groups according 
to operands and their purpose (memory access, arithmetic, 
general, an so on)?  
ü Pay attention to instruction’s stem to put similar classes of 
instructions together (for example, jump instructions, direct calls, 
indirect calls and so on). 
ü Are virtualized instructions based (similar) to x86 instructions?  
ü Have the processor  flags’s meaning been modified?   
DEF"CON"CHINA"1.0"(2019)"
21"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü What are the “key instructions” that are responsible to make the 
transition from x86 mode to “virtualized mode”?  
ü Remember: usually, registers and flags (EFLAGS) are saved onto the 
stack before “crossing over” to the VM environment.  
ü What are the responsible instructions to transfer the control back 
to the x86 world? 
ü Most of the time, during the “context transition”, parameters are 
pushed on the stack. J 
DEF"CON"CHINA"1.0"(2019)"
22"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü The VM interpreter code, which is responsible for translating x86 
instructions to VM instructions, is usually obfuscated. 
ü The own VM instructions are also compressed and encrypted (xor’ed, 
mostly) 
ü As I’ve mentioned previously, usually there are many VM instruction codes 
to only one x86 instructions.  
ü There are two stacks: one from x86 land  and another from VM land.  
ü Stack from virtualized context may grow upward, different from x86 
standard.  
ü Sometimes, the protector doesn’t copy the x86 context into the Virtual 
Machine. In this case, it prefers to save the context (registers content + 
flag) to use later. 
DEF"CON"CHINA"1.0"(2019)"
23"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü It is interesting to find out the VM instruction’s size, which we might 
fit into a structure that represents encryption key, data, RVA 
(location), opcode (type) and so on.  
ü  As custom virtualized packers don’t have a virtualized instruction to 
every single x86 instruction, so it is recommended to find handlers 
to native x86 instructions (non-virtualized instruction)  
ü Usually, handlers to non-virtualized instructions exit from VM 
environment from a short period, execute the x86 instruction and 
return to the virtual machine environment.  
ü In this case, x86 instructions are also kept encrypted and 
compressed together with the virtualized instructions.  
DEF"CON"CHINA"1.0"(2019)"
24"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Constant unfolding: technique used by obfuscators to replace a contant 
by a bunch of code that produces the same resulting constant’s value.  
ü  Pattern-based obfuscation: exchange of one instruction by a set of 
equivalent instructions. 
ü  Abusing inline functions. 
ü  Anti-VM techniques: prevents the malware sample to run inside a VM. 
ü  Dead (garbage) code: this technique is implemented by inserting codes 
whose results will be overwritten in next lines of code or, worse, they 
won’t be used anymore.  
ü  Code duplication: different paths coming into the same destination (used 
by virtualization obfuscators).  
DEF"CON"CHINA"1.0"(2019)"
25"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Control indirection 1: call instruction à stack pointer update à 
return skipping some junk code after the call instruction (RET x). 
ü  Control indirection 2: malware trigger an exception à registered 
exception is called à new branch of instructions. 
ü  Opaque predicate: Although apparently there is an evaluation 
(conditional jump: jz/jnz), the result is always evaluated to true (or 
false), which means an unconditional jump. Thus, there is a dead 
branch.   
ü  Anti-debugging: used as irritating techniques to slow the process 
analysis. 
ü  Polymorphism: it is produced by self-modification code (like 
shellcodes) and by encrypting resources (similar most malware 
samples).  
DEF"CON"CHINA"1.0"(2019)"
26"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Call stack manipulation: Changes the stack flow by using 
instruction tricks composed with the ret instruction, making the 
real ret hidden.  
ü  Is it possible to deobfuscate virtualized instructions? Yes, it is 
possible using reverse recursive substitution (similar -- not equal -- 
to backtracking feature from Metasm).  
ü  Additionally, symbolic equation system is another good approach 
(again...., Metasm and MIASM!). 
ü  There are many good plugins such as Code Unvirtualizer, 
VMAttack, VMSweeper, and so on, which could be used to handle 
simple virtualization problems.  
ü  Some evolution of the instruction virtualizers has risen using 
simple and efficient concepts of crytpography as Substitution 
Boxes (S-Boxes). 
DEF"CON"CHINA"1.0"(2019)"
27"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  It is quick to create a simple IDA Pro plugin. Download the IDA SDK from https://
www.hex-rays.com/products/ida/support/download.shtml  (likely, you will need a 
professional account). Copy it to a folder (idasdk695/) within the IDA Pro 
installation directory.  
ü  Create a project in Visual Studio 2017 (File à New à Create Project à Visual C++ 
à Windows Desktop à Dynamic-Link Library (DLL)). 
ü  Change few project properties as shown in this slide and next ones.   
DEF"CON"CHINA"1.0"(2019)"
28"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Include the “__NT__;__IDP__” in Processor Definitions and change Runtime 
Library to “Multi-threaded” (MT)  (take care: it is NOT /MTd).   
DEF"CON"CHINA"1.0"(2019)"
29"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Add ida.lib (from C:\Program Files (x86)\IDA 6.95\idasdk695\lib\x86_win_vc_32) 
to Additional Dependencies and its folder to Additional Library Directories.  
ü  Add “/EXPORT:PLUGIN” to Additional Options.  
DEF"CON"CHINA"1.0"(2019)"
30"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Don’t forget necessary headers. J 
Initialization function. 
Make the plugin available to this idb and keep the plugin 
loaded in memory. 
Clean-up tasks. 
Function to be called when user activates the 
plugin. 
Simple (and incomplete) URL regex. 
J 
DEF"CON"CHINA"1.0"(2019)"
31"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Plugin will be activated by 
combination ALT-X. J  
Plugin structure.  
The core logic is only it. It checks 
whether the string matches to the 
URL regex.  
If checks, so ea == strinfo.ea. J 
It gets the number of 
strings from “Strings 
view”.   
It gets the string. 
DEF"CON"CHINA"1.0"(2019)"
32"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
URLs found within this malicious driver.  
J 
ALT + X 
DEF"CON"CHINA"1.0"(2019)"
33"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Ø  decodes instructions and 
fill structures with the 
result (ana.cpp) 
ü  IDA processor modules continue being 
the one of best approach to handle 
virtualized packers.  
ü  Please, you should remember on few 
important points (as mentioned by Ilfak 
from Hex-Rays) about how to write an IDA 
processor modules:  
Ø  processes the commands 
decoded by analyser 
(amu.cpp) 
Ø  creates cross-references. 
Ø  tracks the register content. 
Ø  tracks the register content. 
Ø  Writes the output a 
handled output 
containing prefix, 
comments and xrefs 
(out.cpp)  
ü  write a 
analyser 
ü  Modify (or 
write) an 
emulator 
ü  write a 
outputter 
ü  The IDA Pro SDK documentation and 
samples are always great. J 
Processor 
Module 
DEF"CON"CHINA"1.0"(2019)"
34"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  This technique is used to 
hide the real control 
flow of a program. 
ü  In a general way, the 
idea is to break the 
control-flow by 
removing if-statements 
and loops, transforming 
the flow in a series of 
switch-case statements. 
ü  Thus, there is a dispatcher 
handing over the control 
flow to handlers, which 
each handler updates the 
instruction pointer to the 
value of the next handler 
to be executed (virtualize 
the flow control).  
ü  Usually there is an 
invocation stub, which 
makes the transition to 
from native instructions to 
the virtualized instruction.  
ü  Code-flow graph flattening:  
ü  This approach 
presents two 
reversing problems: 
the mapping can be 
from CISC to RISC 
instruction and the 
original registers can 
be turned into 
special registers 
from VM.   
ü  Because trade-offs, 
CFG is only applied 
to specific functions 
DEF"CON"CHINA"1.0"(2019)"
35"
#include  
int main (void)  
{ 
 int aborges = 0; 
 while (aborges <  30) 
 { 
 printf(“%d\n”, aborges); 
 aborges++; 
 } 
 return 0; 
} 
Loading libs 
aborges = 0 
aborges < 30 
 printf( ) 
aborges++ 
return 0 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
36"
cc = 1 
cc != 0 
switch(cc) 
aborges < 
30 
cc = 0 
cc = 3 
break 
aborges = 0 
cc = 2  
break 
printf 
aborges++ 
break 
cc = 2 
loading libs 
cc!=!1!
cc!=!2!
cc!=!3!
v  Disavantages: 
ü  Loss of performance 
ü  Easy to identify the CFG flattening 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
37"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Original Program 
DEF"CON"CHINA"1.0"(2019)"
38"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  The obfuscator-llvm is an excellent project to be used for code obsfuscation. To 
install it, it is recommended to add a swap file first (because the linkage stage):  
ü  fallocate -l 8GB /swapfile 
ü  chmod 600 /swapfile 
ü  mkswap /swapfile 
ü  swapon /swapfile 
ü  swapon --show 
ü  apt-get install llvm-4.0 
ü  apt-get install gcc-multilib (install gcc lib support to 32 bit) 
ü  git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git 
ü  mkdir build ; cd build/ 
ü  cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_INCLUDE_TESTS=OFF ../
obfuscator/ 
ü  make -j7 
ü  Possible usages:  
ü  ./build/bin/clang alexborges.c -o alexborges -mllvm -fla 
ü  ./build/bin/clang alexborges.c -m32 -o alexborges -mllvm -fla 
ü  ./build/bin/clang alexborges.c -o alexborges -mllvm -fla -mllvm -sub 
DEF"CON"CHINA"1.0"(2019)"
39"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Main dispatcher 
Prologue and  
initial assignment 
DEF"CON"CHINA"1.0"(2019)"
40"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Main blocks  
from the 
program 
DEF"CON"CHINA"1.0"(2019)"
41"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
General overview 
of the obfuscate code 
DEF"CON"CHINA"1.0"(2019)"
42"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
43"
.text:00401000 loc_401000:                      
 ; CODE XREF: _main+Fp 
.text:00401000                 
 push     ebp 
.text:00401001                 
 mov      ebp, esp 
.text:00401003                 
 xor      eax, eax 
.text:00401005                 
 jz      
 short near ptr loc_40100D+1 
.text:00401007                
 jnz      near ptr loc_40100D+4 
.text:0040100D 
.text:0040100D loc_40100D:                    ; CODE XREF: .text:00401005j 
.text:0040100D                                         ; .text:00401007j 
.text:0040100D                 
 jmp     near ptr 0D0A8837h 
Simple opaque predicate and anti-disassembly technique 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
44"
Decrypted 
shellcode 
Decryption 
instructions J 