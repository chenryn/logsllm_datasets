### 6. Discussion and Limitations

#### Novelty
To the best of our knowledge, RWGuard, with its decoy technique, is the first system to offer real-time (few milliseconds) detection capabilities. Even without the decoy deployment, the other monitoring modules can minimize damage by identifying ransomware processes at the time of their I/O requests. An average of 538 I/O write requests within an average detection time of 3.45 seconds demonstrates how rapidly ransomware attempts to encrypt user files. RWGuard leverages this rapid behavior to terminate ransomware at an early stage. Additionally, while existing approaches struggle to distinguish between benign and malicious file changes, the File Change Logging System (FCls) module, in conjunction with the Crypto Function Hooking (CFHk) module, effectively reduces false positives.

#### Inevitability
Our robust decoy design makes it nearly impossible for ransomware to recognize a decoy file based on its properties. To identify decoys, ransomware would need to install spyware and monitor file activities, distinguishing between those modified by end-users and applications and those executed by our decoy tool. Furthermore, obfuscation techniques can be employed to make it difficult for ransomware to analyze applications and determine which one is the decoy generator. The integrated monitoring modules, Process Monitor (PMon) and File Change Monitor (FCMon), scrutinize metrics that encompass any malicious activity by the ransomware. For example, a smart ransomware that encrypts files slowly would still be detected by the FCMon module. While DMon, PMon, and FCMon prevent false negatives by ensuring no ransomware activity goes undetected, FCls and CFHk prevent false positives by distinguishing between benign and malicious file operations. Thus, regardless of the sophistication of modern ransomware, RWGuard significantly raises the bar for evasion.

#### File Recovery
The CFHk module monitors all file encryption activities, both benign and ransomware, that leverage 'CryptoAPI' functions. If a ransomware using the CryptoAPI library (3 out of the 14 ransomware families we analyzed use this library) manages to encrypt a set of files before our early detection, the hooking mechanism can retrieve the parameters, including the decryption keys, of those specific cryptographic function calls, allowing us to restore the encrypted files. Our experiments (Section 5.4) show that the CFHk module can recover files encrypted by these 3 ransomware families with a 100% success rate. The remaining ransomware samples in our evaluation did not use CryptoAPI but instead used custom-written cryptographic libraries. Additionally, code obfuscation, such as incremental packing and unpacking, makes it more challenging to identify cryptographic primitives in the ransomware binary. Although there are techniques (e.g., [31]) that search for cryptographic operations in process memory, we have not incorporated them into our system due to their significant performance overhead.

#### Limitations
While the Decoy Monitor (DMon) module is quick in identifying malicious processes, the PMon and FCMon modules are anomaly-based and thus may probabilistically miss some malicious activity. These modules rely on logging I/O Request Packets (IRPs) and file activity. The time lag between logging these activities and parsing them for anomalies provides a small window for ransomware to perform malicious activities, as discussed in Section 5.3.

### 7. Related Work

#### Detection Techniques
Kharraz et al. [13–15] propose systems that monitor I/O request patterns for signs of ransomware-like behaviors. Scaife et al. [26] developed CryptoDrop, which alerts users during suspicious file activity, such as tampering with a large amount of user data. Sgandurra et al. [27] introduced EldeRan, a machine learning approach that monitors actions performed by applications during installation and checks for characteristics of ransomware. Lee et al. [18] proposed a ransomware prevention mechanism based on abnormal behavior analysis in cloud systems. Cabaj et al. [4] presented a software-defined networking (SDN) based detection approach that utilizes the characteristics of ransomware communication. Andronio et al. [1] proposed a technique to detect Android ransomware, where applications are analyzed in-depth before release in app markets. Huang et al. [9] proposed a measurement framework for end-to-end ransomware payments. In contrast, RWGuard is the fastest solution that identifies ransomware infection in real-time using decoy techniques, prevents malicious processes from making changes to files, and determines the original intent of file changes.

#### Post-Encryption Techniques
Kolodenker et al. [16] proposed PayBreak, a system that intercepts system-provided crypto functions, collects and stores the keys, and can decrypt files for ransomware families that use system-provided crypto functions. Continella et al. [6] proposed ShieldFS, which monitors low-level file system activity to model the system over time. When a process violates these models, the affected files are transparently rolled back. However, this method requires shadowing a file whenever it is modified, leading to high overhead. FlashGuard, developed by Huang et al. [10], leverages the fact that Solid State Drives (SSDs) perform out-of-place writes and hold invalid pages for up to 20 days to enable data recovery after ransomware encryption. However, this recovery method conflicts with secure deletion and may result in privacy issues and data leakage. Given the limitations of existing post-encryption recovery techniques, it is crucial to develop faster detection methods against ransomware.

#### Decoy Techniques
Decoy techniques have been previously proposed to defend against insider threats [2]. Some research [15, 19] recommends using decoy files for detecting ransomware, but these studies do not include an analysis of the effectiveness of decoy files. Commercial solutions that use randomly generated decoy files (e.g., [7]) are susceptible to detection by sophisticated ransomware. Unlike RWGuard, their decoy files are deployed during the installation process, leaving the files unmodified for long periods, making them less interesting to ransomware. It is also unclear how these solutions handle special ransomware families, such as Mamba, Petya, and Matsnu, which target only predefined lists of system files.

#### Cryptographic Primitives Identification Techniques
Discovering cryptographic primitives in a given binary is another research direction where cryptoransomware, including cryptographic operations, could be identified beforehand [5, 31]. Calvet et al. [5] developed such a technique and evaluated its performance on known malware samples. Lestringant et al. [20] used graph isomorphism techniques to achieve similar goals. Although these approaches can identify cryptographic primitives in obfuscated programs, their poor performance makes them impractical for real-time defense, even with the most recent work [31] resulting in a 5-6X slowdown on average.

### 8. Conclusions and Future Work

In this paper, we introduce RWGuard, a system that detects crypto-ransomware on a user's machine in real-time while minimizing false positives due to benign file operations. We evaluate RWGuard against 14 prevalent ransomware families. Our experiments show that RWGuard is effective in early detection with negligible false positives (∼0.1%) and zero false negatives, incurring an overhead of only ∼1.9%. Furthermore, RWGuard recovers all files encrypted using CryptoAPI by the corresponding ransomware. As part of future work, we plan to profile other existing encryption libraries and scan the process's memory in real-time for similar operations to recover the keys used for encryption and restore the files. Additionally, we plan to take snapshots of ransomware processes' memories before terminating them and analyze these for traces of encryption/decryption keys.

### Acknowledgements
We thank our shepherd, Alina Oprea, and the anonymous reviewers for their valuable suggestions. This work was supported by the Schlumberger Foundation under the Faculty For The Future (FFTF) Fellowship.

### References
[References remain unchanged]