2、 nginx反向代理接口跨域
跨域原理：
同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。
实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。
nginx具体配置：
#proxy服务器
server {
listen 81;
server_name www.domain1.com;
location / {
proxy_pass http://www.domain2.com:8080; #反向代理
proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名
index index.html index.htm;
\#
当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用
add_header Access-Control-Allow-Origin http://www.domain1.com;
#当前端只跨域不带cookie时，可为\*
add_header Access-Control-Allow-Credentials true; #开启多域名配置跨域
}
}
将Access-Control-Allow-Origin添加到某网站下或整个域中的单个资源
Access-Control-Allow-Origin: http://example.com
Access-Control-Allow-Credentials: true (可选)
#当该标志为真时，响应于该请求是否可以被暴露(可选)
将允许任何域向您提交请求
Access-Control-Allow-Origin: \*
Access-Control-Allow-Credentials: true (可选)
#当该标志为真时，响应于该请求是否可以被暴露(可选)
\$ curl -I -X OPTIONS -H \"Origin: http://example.com\"
http://www.example2.com
Nginx配置实例
 参考资料
实例一：允许任何的应用在gyl.168cd.cn上跨域提取数据
gyl.168cd.cn.conf
server {
listen 80;
server_name gyl.168cd.cn;
add_header Access-Control-Allow-Origin \*;
#许来自任何域的访问，可以这样配置
add_header Access-Control-Allow-Headers \'Origin, X-Requested-With,
Content-Type, Accept, Authorization, Token\';
#允许脚本访问的返回头(可选)
add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
> #指定请求的方法，可以是GET, POST, OPTIONS, PUT, DELETE等(可选)
location =/ {
proxy_pass_header Server;
proxy_set_header Host \$http_host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
proxy_pass http://172.16.148.34:8610/static/html/login.html;
}
location / {
proxy_pass_header Server;
proxy_set_header Host \$http_host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
proxy_pass http://172.16.148.34:8610;
}
}
**CORS(Cross Orign Resource-Sharing)跨域控制配置**
#是否允许请求带有验证信息
add_header Access-Control-Allow-Credentials true;
#允许跨域访问的域名,可以是一个域的列表，也可以是通配符\*
add_header Access-Control-Allow-Origin \$allow_url;
#允许脚本访问的返回头
add_header Access-Control-Allow-Headers
\'x-requested-with,content-type,Cache-Control,Pragma,Date,x-timestamp\';
#允许使用的请求方法，以逗号隔开
add_header Access-Control-Allow-Methods \'POST,GET,OPTIONS,PUT,DELETE\';
#允许自定义的头部，以逗号隔开,大小写不敏感
add_header Access-Control-Expose-Headers
\'WWW-Authenticate,Server-Authorization\';
#P3P支持跨域cookie操作
add_header P3P \'policyref=\"/w3c/p3p.xml\", CP=\"NOI DSP PSAa OUR BUS
IND ONL UNI COM NAV INT LOC\"\';
如需要允许用户请求来自xxx1.example.com或xxx1.example1.com访问xxx.example2.com域名时，返回头Access-Control-Allow-Origin，在Nginx配置文件中xxx.example2.com域名的location
/下配置以下内容
location / {
if ( \$http_origin \~ .\*.(example\|example1).com ) {
add_header Access-Control-Allow-Origin \$http_origin;
}
}
**Nginx跨域配置并支持DELETE,PUT请求**
默认Access-Control-Allow-Origin开启跨域请求只支持GET、HEAD、POST、OPTIONS请求，使用DELETE发起跨域请求时，浏览器出于安全考虑会先发起OPTIONS请求，服务器端接收到的请求方式就变成了OPTIONS，所以引起了服务器的405
Method Not Allowed。
解决方法
首先要对OPTIONS请求进行处理
if (\$request_method = \'OPTIONS\') {
add_header Access-Control-Allow-Origin \*;
add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
#其他头部信息配置，省略\...
return 204;
}
当请求方式为OPTIONS时设置Allow的响应头，重新处理这次请求。这样发出请求时第一次是OPTIONS请求，第二次才是DELETE请求。
\# 完整配置参考：将配置文件的放到对应的server {}里
add_header Access-Control-Allow-Origin \*;
location / {
if (\$request_method = \'OPTIONS\') {
add_header Access-Control-Allow-Origin \*;
add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
return 204;
}
index index.php;
try_files \$uri \@rewriteapp;
}
## 案例五：nginx 前后端分离和try_files
Jsb项目测试环境 20190827笔记
server {
listen 80;
server_name dkjtym.dakangyihu.com;
add_header Access-Control-Allow-Origin \*;
add_header Access-Control-Allow-Headers \'Origin, X-Requested-With,
Content-Type, Accept, Token\';
add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
location / {
proxy_pass_header Server; #请求头重写
#proxy_set_header Host \$host:\$server_port;
proxy_set_header Host \$http_host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
root jsbbd;
index index.html index.htm;
try_files \$uri \$uri/ /index.html; #解决了首页登陆刷新login页面问题
#try_files \$uri \$uri/ \@req;
}
location /jsb {
proxy_set_header Host \$http_host;
#proxy_set_header Host \$host:\$server_port;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forworded-For \$http_x\_forwarded_for;
\# proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
proxy_pass http://192.168.10.243:8410;
}
项目情况：原jsb项目8410端口为rest
，8400端口为8400，公司决定实行前后端分离，增加一个静态页面放置在nginx目录的jsbbd目录中，
dkjtym.dakangyihu.com域名临时调试使用，借宿宝开发目录结构第一级统一使用jsb目录，关于proxy_pass_header
请求转发相关配置请看本文上面详细介绍。
try_files指令说明
在0.7以后的版本中加入了一个try_files指令，配合命名location，可以部分替代原本常用的rewrite配置方式，提高解析效率。
try_files指令
语法：try_files file ... uri 或 try_files file ... = code
默认值：无
作用域：server location
其作用是按顺序检查文件是否存在，返回第一个找到的文件或文件夹(结尾加斜线表示为文件夹)，如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。
需要注意的是，只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误。命名的location也可以使用在最后一个参数中。与rewrite指令不同，如果回退URI不是命名的location那么\$args不会自动保留，如果你想保留\$args，则必须明确声明。
## 案例六：SSL
server {
listen 80 ;
listen 443 ssl;
server_name kkzg.youbasan.com;
add_header Access-Control-Allow-Origin \*;
add_header Access-Control-Allow-Headers \'Origin, X-Requested-With,
Content-Type, Accept, Authorization, Token\';
add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
ssl on;
ssl_certificate ./sslkey/kkzg.youbasan.com.pem;
ssl_certificate_key ./sslkey/kkzg.youbasan.com.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers
ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
location / {
proxy_pass_header Server;
proxy_set_header Host \$http_host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
proxy_pass http://172.16.148.33:8910;
}
location = /uVn4zMewKb.txt {
proxy_pass_header Server;
proxy_set_header Host \$http_host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x\_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Scheme \$scheme;
proxy_pass http://172.16.148.33:8910/static/uVn4zMewKb.txt;
}
}
Ssl配置解释：
ssl on; #表示打开SSL支持
ssl_certificate ./sslkey/kkzg.youbasan.com.pem; #指定秘钥文件
ssl_certificate_key ./sslkey/kkzg.youbasan.com.key; #指定公钥文件
ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #指定SSL协议
ssl_ciphers
ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
> #ssl_ciphers配置ssl加密算法，多个算法用:分隔，ALL表示全部算法，!表示不启
> 用该算法，+表示将该算法排到最后面去。
ssl_prefer_server_ciphers on;
#如果不指定默认为off，当为on时，在使用SSLv3和TLS协议时，服务器加密算法
将优于客户端加密算法。
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m; #缓存有效期
## 案例七：nginx 405 not allowed问题的解决
Apache、IIS、Nginx等绝大多数web服务器，都不允许静态文件响应POST请求，否则会返回"HTTP/1.1
405 Method not
allowed"错误。但在有些应用中，需要使静态文件能够响应POST请求。
对于Nginx，可以修改nginc.conf配置文件，改变"405错误"为"200
ok"，并配置location来解决，方法如下：
解决办法，添加如下配置：
配置nginx将405错误指向成功
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
upstream static_backend {
server localhost:80;
}
server {
listen 80;
\# \...
error_page 405 =200 \@405;
location \@405 {
root /srv/http;
proxy_method GET;
proxy_pass http://static_backend;
}
}
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
实际shou-cloud项目的后端配置
upstream static_backend {
server localhost:80;
}
server {
listen 80;
server_name shopadmin.siyuanv.com;