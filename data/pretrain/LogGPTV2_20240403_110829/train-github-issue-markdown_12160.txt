 **Geert Jan Sterenborg** opened **SPR-3184** and commented
Hi,
Currently we have a config-module for every specific implementation of our
product. These config-modules contain our Spring configuration-files.  
So we have a lot of duplicate bean-configs.
We initialize the configuration files like so:
\---start of boot-strap.xml  
[CODE]  
services/config-file.xml  
[/CODE]  
\---end of boot-strap.xml
I'm trying to split these modules into a kernel-config-module (i.e. generic-
config-modules) and several specific-config modules making use of the parent-
child relationship.
The problem I'm running into is the following:
Generic config-file:  
[CODE]  
[/CODE]
Bean A - uses bean C in generic config-file  
Bean B - uses bean A in generic config-file
Specific config-file:
[CODE]  
[/CODE]
Bean A - overrides bean A in generic config-file so that it uses bean D
(config: ....)  
Bean D - Some bean
And the boot-strap-files:
\---start of boot-strap-kernel.xml  
[CODE]   
services/config-file-kernel.xml  
[/CODE]  
\---end of boot-strap-kernel.xml
\---start of boot-strap-specific.xml  
[CODE]   
services/config-file.xml  
[/CODE]  
\---end of boot-strap-kernel.xml
The problem is that generic-bean B still uses the generic-bean A.
In order to use generic-bean B without having to include it in all specific-
config-modules I could add a generic-config-file,  
include it in core-services and move bean B to this file:
\---start of boot-strap-specific.xml  
[CODE]   
services/config-file-kernel-shared.xml  
services/config-file.xml  
[/CODE]  
\---end of boot-strap-kernel.xml
But what if I want to override bean B?
The alternative is to move bean B to the specific config-file. If there were
other beans depending on B they would have to be moved (in this case
duplicated) too.
Some forum-questions and issues regarding this matter all boil down to the
fact that parent-contexts know nothing of their children.
I'm not entirely sure but I guess the goal is that bean-extension should
compare to java class-extension.  
However since I'm going through the child-context to access bean B that is
configured in the parent-context it wouldn't be completely illogic to be able
to override the parent-definition.
It would be nice to have an extension that would allow to do something like
this:
[CODE]  
[/CODE]
The override tag should completely override bean A (in child-context as well
as parent-context.)
I've posted this as a question on the forum
(http://forum.springframework.org/showthread.php?t=34950), but perhaps it
could be useful to others if it were included in the core.
* * *
No further details from SPR-3184