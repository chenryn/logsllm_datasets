ity of our timed commitment construction by presenting a dis-
tributed randomness generation protocol among 𝑛 parties, where
the parties jointly generate a 256-bit random string. Our protocol is
the first to simultaneously satisfying all of the following desirable
properties.
(1) All-but-one Corruption: The output random string is unpre-
dictable and unbiased even against an attacker that corrupts any
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2664set of 𝑛−1 parties. The CCA security of our timed commitments
is crucial to achieve this guarantee.
(2) Optimistic Efficiency: In the optimistic case where all of the par-
ties behave honestly, the protocol is extremely efficient and no
sequential computation is done at all. In practice, the sequential
computation aspect would function as a deterrent to misbehave
and we expect most of the executions to terminate without the
need of force-open the commitments.
(3) Scalability: Even in the case where some party misbehaves, the
amount of sequential computation needed to terminate the pro-
tocol is always independent of the number of parties 𝑛. Thus,
increasing the number of parties does not significantly impact
the performance of our protocol, due to the homomorphic prop-
erties of our CCA timed commitment scheme.
(4) Transparent Setup: The protocol has a one-time transparent
(a.k.a. public-coin) setup and it requires otherwise minimal
interaction among parties.
To the best of our knowledge, no prior distributed randomness
generation protocol (even among the less practical ones) satisfied
all the above properties. We discuss these prior works in more detail
in Section 7.
Implementation and Experiments. We implement each of the
cryptographic techniques used in this work and our results show
that our CCA timed commitments are indeed practical. Due to the
strong security requirements, our NIZK proof involves a large num-
ber of exponentiations which results in running times of several
minutes on a single thread. This might be acceptable in applications
where users have a long time to commit. Moreover these exponen-
tiations can be parallelized which results in running times that are
under a minute. Finally, we implemented a heuristic approach using
a sigma protocol that we assume is simulation-extractable when
transformed into a NIZK proof. We gain significant efficiency im-
provements both in terms of bandwidth and running time, suitable
for any application.
1.2 Homomorphism vs CCA Security
An astute reader might wonder why the homomorphic property
of the commitments is not at odds with the CCA-security of the
primitive. It is well-known that fully-homomorphic encryption
cannot be CCA secure since one can simply evaluate some trivial
function (e.g. the identity) homomorphically over the challenge
ciphertext and query the resulting ciphertext to the decryption
oracle. However, for the case of commitments there is a subtle
aspect that one needs to consider: Our CCA timed commitments
come with a proof 𝜋, which guarantees that the commitment is well-
formed. On the other hand, the homomorphic evaluation algorithm
operates only on the commitments
(𝑐1, 𝜋𝑖, . . . , 𝑐𝑛, 𝜋𝑛) Eval(𝑓 ,·)
−−−−−−−→ ˜𝑐
and in particular does not produce a validity proof ˜𝜋 for the evalu-
ated commitment ˜𝑐. This immediately counters the attack outlined
above: Due to the missing proof, the open/decryption oracle will
refuse to open the commitment.
This however does not contradict the usefulness of the homo-
morphic evaluation procedure: Instead of force-opening all commit-
ments, we can compute the function of interest homomorphically
and then force-open (in time T) the single resulting commitment
˜𝑐 that contains the function output. Depending on the number 𝑛
of input commitments, the savings can be substantial. Note that
this is a purely efficiency-related consideration and does not affect
security, since all commitments can anyway be force-opened in
(parallel) time T.
2 TECHNICAL OVERVIEW
In this section we give a brief outline of the techniques that we de-
velop in this work. Our technical contributions can be conceptually
split into three main steps:
Step I: We construct a homomorphic time-lock puzzle from class
groups of imaginary quadratic order. The scheme has a transparent
setup and supports homomorphic evaluations of linear functions
over Z𝑞, for some prime 𝑞.
Step II: We turn our time-lock puzzle into a CCA timed commit-
ment by augmenting it with a simulation-extractable NIZK. We
then propose a new special-purpose efficient NIZK scheme with a
transparent setup.
Step III: We show how our CCA timed commitments give raise to
a distributed randomness generation protocol that is concretely
efficient and satisfies many desirable properties.
2.1 Homomorphic Time-Lock Puzzles from
Class Groups
Known constructions of linearly homomorphic time-lock puzzles
(HTLP) [55] are very close to construction of linearly homomor-
phic encryption schemes [59]. A natural approach is thus to adapt
the linearly homomorphic CL encryption scheme [27], based on
class groups, and more precisely the so-called faster variant of
this scheme. In a nutshell, the CL cryptosystem uses the relations
between two class groups, one related to a negative number (a
discriminant) Δ𝑞 = −𝑝𝑞3, 𝐶𝑙(Δ𝑞), and the other one related to the
square-free (a fundamental discriminant) Δ𝐾 = −𝑝𝑞, 𝐶𝑙(Δ𝐾). This
makes it possible to build a subgroup of order 𝑞 generated by an
element 𝐹 where the discrete logarithm problem is easy, a situation
similar to the Paillier cryptosystem [59] which uses Z∗
𝑁 2 and Z∗
𝑁
and a subgroup of order 𝑁 . Then a plaintext 𝑚 is encrypted as
in “lifted” Elgamal denoted by (𝐺𝑟 , 𝑝𝑘𝑟 · 𝐹𝑚) defined in a cyclic
subgroup of 𝐶𝑙(Δ𝑞). The faster variant of the CL scheme works by
defining 𝐺 and pk in a cyclic subgroup G ⊂ 𝐶𝑙(Δ𝐾), and encrypt-
ing 𝑚 as (𝐺𝑟 ,𝜓𝑞(𝑝𝑘𝑟) · 𝐹𝑚) where 𝜓𝑞 lifts the element to 𝐶𝑙(Δ𝑞)
where 𝐹 is defined. This is more suitable for our context: all the
NIZK proofs that we need will be defined in 𝐶𝑙(Δ𝐾) resulting in
more efficient implementation as computation in this group is faster.
Furthermore, this makes it possible to use a sequential squaring
assumption in 𝐶𝑙(Δ𝐾) where Δ𝐾 is fundamental, a setting simi-
lar to verifiable delay functions (VDF) [74] based on class groups.
However the security of this fast variant was not really analysed
in [27]. We revisit this scheme and show that one can build a HTLP
scheme (with linear homomorphism) from it, by setting the puzzle
𝑍 := (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚)
where 𝐻 := 𝐺2T is output by the puzzle setup. The solving proce-
dure simply computes 𝐻𝑟 via repeated squaring of 𝐺𝑟 and obtain
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2665𝐹𝑚, from which it is easy to extract 𝑚 since the discrete logarithm
problem is easy in this subgroup. The security of our HTLP scheme
relies on the HSM𝐶𝐿 assumption (introduced later in [28]), an adap-
tation of Paillier’s DCR assumption in class groups, and a decisional
variant of the sequential squaring assumption. A technical point is
the fact that one can efficiently compute square roots in 𝐶𝑙(Δ𝐾).
However we observe that this has only a marginal impact on the
parameters. We also show that our HTLP setup in the CL frame-
work is compatible with a transparent setup as other cryptographic
schemes based on class group. As a side contribution, we prove
that the CL fast variant is IND-CPA under the HSM𝐶𝐿 assumption,
which might be of independent interest.
2.2 CCA Timed Commitments
The notion of CCA security for timed commitments is analogous
to the one for encryption schemes: The committed message 𝑚 in
𝑐 is required to be hidden (until time T) even if the distinguisher
has access to an oracle that instantly force-opens any commitment
𝑐′ ≠ 𝑐. This models the fact that the adversary cannot maul a com-
mitment 𝑐 to produce a valid commitment 𝑐′ for a related message.
One canonical approach to lift schemes to CCA secure one is the
Naor-Yung paradigm [58]. Rephrased for timed commitments, the
idea is to augment a commitment TCom(𝑚) with
(TCom(𝑚), Enc(pk, 𝑚), 𝜋)
where Enc is the encryption algorithm of a standard semantically
secure encryption scheme, pk is a public key placed in the common
public parameters, and 𝜋 is a proof that certifies that the commit-
ment and the encryption contain the same message. In the proof,
one can simulate the force-opening oracle by using the secret key sk
to recover 𝑚 from Enc(pk, 𝑚). Clearly in the actual scheme, the pub-
lic key pk must be sampled uniformly and without the knowledge
of the sk.
How to Sample 𝑝𝑘? The immediate first attempt to implement
the above paradigm would be to sample the public key pk := 𝐾 ∈ G
as an element of the class group 𝐶𝑙(Δ𝐾) and use it to compute and
Elgamal encryption of 𝑚 as Enc(pk, 𝑚) := (𝐺𝑠, 𝐾𝑠 · 𝐺𝑚). Unfortu-
nately this simple attempt runs into an immediate barrier: There is
no known algorithm to obliviously sample a well-formed public key
𝐾. In other words, the only efficient method to sample an element
𝐾 (public key) in the cyclic subgroup G of the class group uniformly
at random is to first sample an integer 𝑘 (the secret key) and set
𝐾 := 𝐺𝑘 where 𝐺 is the generator of the group. This however re-
quires a fully trusted (private-coin) setup, which contradicts our
goal of having a transparent (public-coin) setup.
This difficulty seems to be curtailed to the class group settings, as
for standard prime-order groups ˜G we know of efficient algorithms
to sample a uniform ˜pk without knowing the corresponding secret
key. With this observation in mind, we can implement the above
paradigm bridging both groups G and ˜G. However, this needs to be
done with care, due to the structural differences among these (e.g.
the groups have different orders, and the order of G is unknown).
Recall that our time-lock puzzle is of the form
(𝑍1, 𝑍2) = (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚)
(1)
where (𝐺, 𝐹) are the generators of the respective subgroups and
𝐻 := 𝐺2T. As discussed above, the common random string is aug-
mented with a uniformly sampled public key ˜𝐾 ∈ ˜G, where ˜G is a
group of prime order ˜𝑞. Then the commitment is augmented with a
set of ciphertexts(cid:110)( ˜𝑐𝑖,0, ˜𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖 · ˜𝐺𝑟𝑖)(cid:111)
𝑖∈[𝛼]
(2)
where 𝛼 := ⌊log ˜𝑞⌋ + 1 is the bit-length of ˜𝑞, along with a proof 𝜋
that certifies that ( ˜𝑐𝑖,0, ˜𝑐𝑖,1) is indeed a “lifted” Elgamal encryption
of 𝑟𝑖 (the 𝑖-th bit of 𝑟), under the public key ˜𝐾. Note that this is in
some sense equivalent to giving an encryption of 𝑚: In particular,
in the proof, the knowledge of the secret key DLog ˜𝐺 ( ˜𝐾) = ˜𝑘, allows
the simulator to reconstruct 𝑟 and consequently recover 𝜓𝑞(𝐻𝑟),
which in turn reveals 𝑚. Another subtlety to take into account
is that we assumed that the randomness space of the time-lock
puzzles matches exactly the order ˜𝑞. For the sake of this overview
we are going to ignore these subtleties and we refer the reader to
the technical sections for a precise choice of the parameters.
Efficient NIZK for Cross-Group Relations. In principle, this
solution works and the security analysis can be carried out with
minor modifications to the argument. However, this solution re-
quires an efficient NIZK to prove relations across two groups of
different order, one of which is unknown (the class group). Concrete
efficiency for this class of statements seems to be out of reach of
generic NIZK systems, let alone the ones with a transparent setup.
A recent work by Alamati et al. [1] dealt with NIZK proofs over
cross-group relations (involving RSA groups) in the standard model.
On the contrary, we deal with Class groups and use the random
oracle model to gain practical efficiency. Intuitively, we would like
to reduce the language that we want to prove to a bunch of logical
combination of discrete-logarithm equality proofs within the same
group, for which efficient sigma protocols exist [70].
To do this, we circle back to our original idea, except that now
we let the committer sample the public key 𝐾 in the class group,
instead of placing it in the common reference string. This way, we
can use the trivial algorithm that samples an integer 𝑘 and sets
𝐾 := 𝐺𝑘. We also further augment the commitment with an bit-
wise encryption of the randomness 𝑟 (as defined above), except that
these ciphertext are computed in the class group, under the newly