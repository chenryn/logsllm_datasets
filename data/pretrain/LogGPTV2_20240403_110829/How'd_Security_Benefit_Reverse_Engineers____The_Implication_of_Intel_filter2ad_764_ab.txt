call
...
qword ptr [rbp - 16]
(a) Example in C.
Fig. 1: Example for Intel CET’s IBT protection.
(b) Corresponding assembly code.
Branch Tracking (IBT)—to protect forward and backward
indirect control ﬂows, respectively.
First, SS is a hardware-based shadow stack implementation,
which aims to store redundant copies of return addresses to
protect backward indirect control ﬂows, i.e., return edges with
ret instructions. Those shadow copies can be used to detect
stack-based buffer overﬂows [1], [36].
Second, IBT protects forward indirect branches, such as
jmp and call instructions. IBT checks for every indirect
branch instruction if it jumps to a pre-deﬁned code location
marked via an end-branch (ENDBR32 or ENDBR64) instruc-
tion. Figure 1 shows (a) an example C program containing
a switch case statement, and (b) the CET-enabled x86-64
binary counterpart. Note that every function in the binary
starts with ENDBR64, which indicates that every function
can potentially be a jump target of an indirect branch. In
Line 12 of Figure 1b, there is an indirect jump preﬁxed with
NOTRACK. The instruction represents the switch statement in
Figure 1a, and the preﬁx is used to mean that the instruction
does not need to advance to an end-branch instruction because
compilers typically put an input range checking before the
indirect jump instruction. Thus, compilers do not insert an
end-branch instruction for switch-case clauses [28].
In this paper, we are mainly interested in the IBT fea-
ture of CET, which utilizes end-branch instructions. We
note that major compilers provide a command-line option
(-fcf-protection) to control
the level of security to
be enforced by CET. By default, compilers turn on the full
protection (i.e., -fcf-protection=full) even though we
do not give any relevant option [15]. Therefore, in the rest of
the paper, when we say a CET-enabled binary, it means the
binary is compiled with both SS and IBT features turned on.
III. ANALYSIS OF END-BRANCH INSTRUCTIONS
To study the impact of end-branch instructions, we ﬁrst col-
lect CET-enabled binaries by compiling real-world packages
including 108 programs in GNU Coreutils (v9.0), 15 programs
in GNU Binutils (v2.37), and 47 programs in SPEC CPU 2017
benchmark (§III-A). We then linearly disassemble every binary
in our dataset to understand the usage patterns of end-branch
TABLE I: Distribution of end-branch instruction locations.
Func. Entry
Indirect Ret.
Exception
GCC
Clang
Coreutils
Binutils
SPEC CPU 2017
Coreutils
Binutils
SPEC CPU 2017
99.98%
99.99%
79.60%
99.98%
99.99%
72.10%
0.02%
0.01%
0.02%
0.02%
0.01%
0.02%
0.00%
0.00%
20.38%
0.00%
0.00%
27.88%
instructions. Speciﬁcally, we analyze where each end-branch
instruction is located to see if it can be placed at another
place other than a function entry (§III-B). Next, we examine
the syntactic properties of all the functions, which may or
may not include an end-branch instruction (§III-C). Finally,
we summarize our ﬁndings and discuss the implication of end-
branch instructions in terms of function identiﬁcation (§III-D).
A. Our Dataset
We used two major compilers (GCC and Clang) to produce
our dataset with varying compiler ﬂags, architectures, opti-
mization levels in order to obtain a diverse set of CET-enabled
binaries. Since both GCC (v10.0) and Clang (v13.0) emit
CET-enabled binaries by default, we did not have to specify
the -fcf-protection option. We consider both Position-
Independent Executables (PIEs) and non-PIEs because they
often result in signiﬁcantly different shapes. We target two
different Intel architectures (x86 and x86-64), and six different
optimization levels (O0, O1, O2, O3, Os, and Ofast). This
gives us 24(= 2 × 2 × 6) different conﬁgurations per binary.
We obtained a total of 8,136 CET-enabled binaries. Note that
Clang did not produce setbuf binary from GNU Coreutils
due to a package conﬁguration error.
All the binaries were compiled with debugging information
enabled (with the -g option) in order to extract precise ground
truths. However, we stripped all the binaries when evaluating
function identiﬁcation algorithms. We publicize both original
and stripped binary datasets.
B. End-Branch Locations
We ﬁrst examined our dataset to ﬁnd out where the end-
branch instructions are. As a result, we found three different
locations: (1) at a function entry, (2) after an indirect-return
function call, and (3) at an exception catch block. Table I
shows the distribution of end-branch instruction locations in
each different set of binaries in our dataset. While the majority
of end-branch instructions were found at a function entry,
more than 20% of the cases were found in an exception
handling (catch) block for the SPEC binaries. Note that the
SPEC benchmark includes C++ programs, while Coreutils and
Binutils do not. This result highlights that simply regarding
an end-branch instruction as a function entry would produce
a considerable amount of false positives for C++ binaries.
1) End-Branch at a Function Entry: Compilers tend to add
an end-branch instruction at every non-static function entry
because one cannot decide whether a non-static function will
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
560
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
sort_files:
# ...
0x40a9f4:
0x40a9f9:
0x40a9fe:
0x40aa02:
0x40aa04:
# ...
lea
call
endbr64
test
jne
__longjmp_chk:
edi, failed_strcoll
setjmp
eax, eax
0x40aa0c
# ...
# get saved return address
0x13299c:
mov
rdx, QWORD PTR [rdi+0x38]
# ... restore shadow stack ...
# perform indirect return
0x132a6e:
jmp
rdx
(a) setjmp example from ls (Coreutils).
_ZN8MoleculeC2Ev:
# ...
0x10981e:
0x109820:
pop
ret
# This is where a catch block starts.
1
2
3
4
5
6
7
8
9
(b) Exception handling example from 508.namd (SPEC CPU 2017).
r12, rax
_ZN8MoleculeC2Ev_cold
0x109821:
0x109825:
0x109828:
endbr64
mov
jmp
r12
# ...
Fig. 2: Usage patterns of end-branch instructions.
be referenced by a function pointer before linking.1 Indeed,
most of the end-branch instructions in our dataset are located
at a function entry. However, this does not mean that every
function starts with an end-branch instruction. For example,
static functions do not have an end-branch instruction unless
they are referenced by a function pointer. We also found that
there are many other cases where functions do not include an
end-branch instruction (see §III-C).
2) End-Branch at an Indirect-Return Function Call: Func-
tions may return via an indirect
jump instruction instead
of a ret. Such functions have the indirect-return
attribute [13], and an end-branch instruction is inserted right
after the call site [12], [14] to protect the return edge. For
example, setjmp is used to save the current execution context
in a dedicated buffer, and the context can be restored by
longjmp. Figure 2a illustrates this case, where an end-
branch instruction is placed right after the call instruction
at 0x40a9f9. At the end of the longjmp call, the indirect
jump instruction at 0x132a6e will transfer the control ﬂow
of the program to 0x40a9fe. We also found that compilers
predeﬁned a list of indirect-return functions, such as setjmp,
sigsetjmp, and vfork [11]. Therefore, we can easily
decide whether an end-branch instruction is for handling an
indirect-return function call or not.
3) End-Branch at an Exception Handling Block: C++
exceptions are handled by the libstdc++ library, which
uses an indirect
to a catch
clause. Therefore, each catch clause starts with an end-branch
instruction. In our dataset, C++ binaries from SPEC CPU
jump to transfer the control
1We observe that 99.85% of non-static functions have an end-branch
instruction at its entry. Also the remaining 0.15% of functions are mostly
intrinsic functions that are referenced via a direct call.
All Functions
DirCallTarget
EndBrAtHead
10.01%
48.85%
37.79%
1.44%
0.44%
1.23%
0.23%
0.01
DirJmpTarget
Fig. 3: Relation between syntactic properties of all the func-
tions in our dataset.
2017 show end-branch instructions at an exception handling
block. Figure 2b presents an example of catch block located
at 0x109821 of the 508.namd binary.
C. Functions without an End-Branch Instruction
Now that we know end-branch instructions can be placed
at several different places other than a function entry, we
now study how many functions indeed start with an end-
branch instruction. To this end, we ﬁrst extracted 11,209,121
functions from our dataset using the debugging symbols. We
then linearly disassembled the entire code section of each
binary to check if the following three properties hold for each
of the functions:
• EndBrAtHead: there is an end-branch at the entry.
• DirJmpTarget: there is a direct jump to the function.
• DirCallTarget: there is a direct call to the function.
Figure 3 illustrates how each of the properties holds and
how they overlap with each other. Note that about 89.3% (≈
48.85+37.79+1.44+1.23) of the functions start with an end-
branch instruction (EndBrAtHead). This means one cannot
completely retrieve function entries by simply looking at end-
branch instructions.
For the 11% of the functions without an end-branch in-
struction, we found most of them are referenced by a direct
jump or a direct call instruction. In other words, we found
that at least one of the three properties holds for 99.99%
of the functions. The last two properties (DirJmpTarget and
DirCallTarget) are useful to make up for the lack of end-
branch instructions because one can easily obtain the target
address of direct branches. We further analyzed the rest 0.01%
of the functions that do not satisfy any of the properties, and
found that they are all dead code that is never referenced by
any other instruction.
D. Implication of End-Branch Instructions
Recall from §III-B and §III-C, end-branch instructions have
a limited application in detecting functions: (1) it can be placed
to non-function locations, and (2) not every function has an
end-branch instruction.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
561
Algorithm 1: FunSeeker overview.
1 function FunSeeker (bin)
txt, exn ← PARSE(bin)
2
E, C, J ← DISASSEMBLE(txt) // §IV-B
3
E(cid:2) ← FILTERENDBR(E, exn) // §IV-C
4
J (cid:2) ← SELECTTAILCALL(J ) // §IV-D
5
return E(cid:2) ∪ C ∪ J (cid:2)
6
However, our study also reveals that there are potentially
exploitable patterns for both cases. First, there are only two
possible locations where end-branch instructions can be placed
other than a function entry, and both the locations are a callee
of a special function, such as longjmp. Therefore, the chal-
lenge is in distinguishing whether an end-branch instruction
is a call target of such a special function (§IV-C). Second,
most of the functions without an end-branch instruction are
referenced by one or more direct branch instruction. Therefore,
we should be able to identify those functions by analyzing
targets of direct branches. The key challenge is to determine
which of the targets represents a function entry (§IV-D).
IV. SYSTEM DESIGN
This section introduces FunSeeker, a lightweight and
efﬁcient function identiﬁcation tool. FunSeeker leverages
syntactic patterns we found from CET-enabled binaries (in
§III) to achieve efﬁcient function identiﬁcation.
A. Main Algorithm
Algorithm 1 presents the steps taken by FunSeeker to
identify functions from a given binary. At a high level,
FunSeeker takes in a binary bin as input, and returns a
set of function start addresses as output.
PARSE (in Line 2) ﬁrst analyzes the given binary bin to
extract the .text section (txt) and the C++ exception infor-
mation (exn) from it. Note exn only exists for C++ binaries,
and thus, it does not affect C binaries. Next, DISASSEMBLE
(in Line 3) linearly disassembles txt, and examines every
direct branch instruction to return a 3-tuple (E,C,J ), where
E is a set of end-branch instruction addresses found in txt,
and C and J are a set of direct call targets and a set of direct
jump targets, respectively.
FILTERENDBR (in Line 4) then tries to remove end-branch
instructions that are not relevant to a function entry to obtain
E(cid:2) (§IV-C). Next, SELECTTAILCALL (in Line 5) identiﬁes tail