### Exploitation of Cryptographic Algorithms

In our research, we successfully exploited fault-susceptible instruction patterns to achieve memory corruption without relying on software vulnerabilities, by undervolting the processor.

### 7.2 Other Attack Scenarios

In this paper, we focused on attacks against SGX enclaves. However, other attack scenarios may be feasible within our threat model. For example, an adversary might attempt to bypass Mandatory Access Control (MAC) mechanisms in SELinux [39] or other Linux Security Modules (LSMs), which restrict and separate privileged user-space access from kernel access. Additionally, System Management Mode (SMM) code, which runs at a higher privilege level than the kernel, could also be targeted. During our testing, we observed that the voltage setting through Model-Specific Register (MSR) 0x150 remains in place after a warm reset. This opens the possibility of targeting bootloader code, which typically serves as the root of trust on modern platforms.

Another interesting observation is that we occasionally encountered the Invalid Opcode processor exception while undervolting our test code. This exception is usually raised when the processor encounters a malformed instruction. Since our test code only contained valid, well-formed instructions, the exception must have been introduced by undervolting. The Machine-Check Architecture (MCA) logs confirmed this by reporting instruction decode corrected errors, leading us to conclude that it is possible to tamper with instruction decoding through undervolting. However, a more in-depth investigation of this phenomenon is left for future work.

### 7.3 Mitigations

We responsibly disclosed our findings to Intel, which developed and recently released a mitigation against malicious CPU voltage setting modifications. The mitigation consists of two parts:
1. A BIOS patch that includes a setting to enable or disable the overclocking mailbox interface configuration.
2. A microcode update that adds the current state of this setting to the SGX TCB attestation.

As a result, Intel’s Attestation Service will only accept updated platforms with access to MSR 0x150 disabled.

### 7.4 Other Platforms

Currently, our attack focuses on Intel processors that support SGX, and we have not tested or evaluated our attack on AMD systems. While the confidentiality of Intel processors has been attacked in many prior publications, V0LTpwn, along with concurrent work [38, 45], is the first successful attack on processor integrity for the x86 platform.

### 8 Related Work

Previous related attacks have been demonstrated against ARM-based devices [44, 55], and several hardware-oriented side-channel attacks have been published recently for x86, which do not involve fault injection. Concurrently with our work, Murdock et al. and Qiu et al. present similar attacks, Plundervolt [38], and the SGX version of VoltJockey [45], both of which also abuse MSR 0x150 to inject faults in SGX enclaves. They describe faults in integer multiplication and AES instructions, while our work describes faults in vector instructions (which we suspect are the root cause for the AES faults). While both focus on confidentiality by leaking cryptographic key material, V0LTpwn demonstrates control-flow deviation during enclave execution. Moreover, we analyzed desktop processors, while these works focus on laptop processors. Finally, neither Plundervolt nor VoltJockey investigate the effect of stressors, temperature, or spatial locality of bit flips.

### 8.1 Hardware-Oriented Exploits

#### 8.1.1 Software-Controlled Fault Injection

The CLKScrew [55] attack first demonstrated that sophisticated power-management APIs on some ARM-based devices allow an adversary to induce faults in the processor entirely remotely. These findings were recently reproduced independently by the TrustZone version of VoltJockey [44]. In both cases, the authors were able to break the TrustZone isolation boundary on a Nexus 6 smartphone. Unfortunately, the techniques used to conduct undervolting attacks on ARM are not transferable to x86-based platforms for several reasons:

1. **Voltage and Frequency Exposure**: Tang et al. and Qiu et al. found core voltage and frequency to be exposed directly to software with practically no limitations or restrictions imposed by the ARM architecture besides root access. This allows the attacker to freely choose arbitrary combinations of frequency and voltage pairs, enabling them to construct and apply unsafe settings entirely from software. In contrast, the x86 platform offers only a fixed, pre-defined list of selected P-states, which are extensively tested for safety margins and common operating conditions by the manufacturer before release. Thus, the attacker is constrained to use one of these predefined frequency-voltage pair definitions to conduct a V0LTpwn attack.

2. **Machine-Check Architecture**: Intel deploys the Machine-Check Architecture to explicitly check for and recover from hardware faults at runtime. Since Machine-Check Exceptions originating from any core are broadcast to all cores, certain hard glitches can be converted into soft errors on-the-fly on x86. Our evaluation shows that the attacker must push the victim core beyond a certain threshold to ensure successful faults and exploitation. Further, individual hardware components such as caches and the core must be undervolted in lock-step for any changes to take effect on x86. This means that faults generated from other components contribute to the early warning mechanism employed by the Machine-Check Architecture. No such safety net exists on ARM, significantly facilitating the reliability of faults and reproducible exploit scenarios.

3. **Core Pinning**: The core pinning technique introduced by Tang et al. [55] ensures that faults are contained within a chosen physical core, making it straightforward to launch attacks against a target core from one of the running system cores. This technique works because each core can effectively operate in its own P-state on ARM. On x86, all physical cores operate within the same P-state, meaning the same voltage settings apply to both the attacker and the victim core. Therefore, faults cannot be contained to any given core. This is why we introduce several novel techniques to ensure an overall stable system while being able to force the victim core into a fault-provoking power domain on x86.

4. **Power-Management Documentation**: Power management is a key driving factor on mobile devices, and the related low-level APIs and hardware mechanisms are extensively documented and readily available, or even built into the existing platform software [44, 55]. On x86, there is practically no official documentation regarding low-level power management, making it difficult to develop custom tools. Conducting simple tests often involves costly reverse engineering of microarchitectural features, which can differ between processor generations.

#### 8.1.2 Rowhammer

Rowhammer attacks [32] are similar to CLKScrew [55] and V0LTpwn in that they generate hardware faults from software that are also exploitable [6, 24, 31, 43, 48, 50, 56, 60, 63]. However, the main difference is that Rowhammer affects DRAM, which is widely used for implementing memory modules on off-the-shelf computing hardware. This means Rowhammer attacks cannot affect memory inside the processor, such as cached memory and register values. In contrast, V0LTpwn directly impacts in-processor values and can divert control flow. Additionally, while several countermeasures [5, 8, 56, 61] have been proposed to mitigate Rowhammer from software, no defenses currently exist to counter processor-based fault injection attacks.

#### 8.1.3 Speculative Execution

Recently, several works independently demonstrated that speculative execution (a processor feature to speed up execution by increasing instruction-level parallelism) could be exploited from software on certain platforms to extract information through a side channel [33, 36, 58, 62]. Unlike attacks based on speculative execution, remote-fault injection attacks are not limited to information disclosure but directly affect system integrity, allowing an adversary to manipulate data and execution.

### 8.2 Analyzing x86 Internals

Earlier work by Pandit et al. [40] analyzed voltage offsets with regards to safe operation limits, focusing on increased processor performance. They analyzed error handling of the Machine Check Architecture on AMD processors and found that during undervolting, they could operate it beyond safe operation points. They also observed corrected machine check errors when reaching a threshold voltage offset and showed an increased error rate at higher CPU utilization.

Another study by Papadimitriou et al. [41] investigated voltage offsets on mobile and desktop processors from Intel. They used standard benchmarks to stress cores while applying voltage offsets with Intel’s XTU application and found that voltage can be decreased up to 15% while keeping the system in an overall stable condition. They observed differences in safe voltage offsets for the analyzed processor models and calculated that safe undervolting can lead to an increased energy efficiency of up to 20% and temperature reductions of up to 25%.

More recently, Koppe et al. [34] presented a framework to analyze and synthesize x86 microcode on certain (older) platforms. Christopher Domas presented initial results on reverse engineering the x86 hardware platform and published several tools [15, 16] to automatically uncover certain aspects and features (including undocumented MSRs). Domas also discovered hardware backdoors through hidden modes on certain VIA x86 processors using those tools.

Researchers from Positive Technologies achieved remote code execution on Intel’s Converged Security and Management Engine (Intel CSME) in 2018 [19]. Intel CSME runs on a separate physical chip from the host CPU (but is located within the SoC package) and remains powered on and connected to the system's peripherals even when the main CPU is in deep sleep. Intel CSME has full platform access, drives all security-related tasks on modern Intel SoCs (including SGX, TXT, AMT), and was recently found to include a logic analyzer dubbed Intel VISA [20], revealing how Intel patches hardware vulnerabilities in microcode. A recently disclosed boot ROM bug in CSME-enabled chips prior to Ice Lake allows for escalation of privilege, denial of service, and information disclosure [29].

### 9 Conclusions

In this paper, we introduced V0LTpwn, a novel software-controlled fault-injection attack that leverages frequency and voltage control interfaces to compromise the integrity of x86 processors. We identified and discussed multiple code patterns prone to bit flips, commonly used in cryptographic code. We demonstrated that V0LTpwn can generate faults in real-world OpenSSL code running in an SGX enclave with a success rate of up to 99%. We analyzed the success rate of V0LTpwn over a variety of parameters.

### Acknowledgements

We would like to thank Mike Polowski and the entire Intel Product Security Incident Response team for swift and efficient coordination of the issue. Intel assigned a CVE [57] and released an advisory [30] regarding software-based undervolting attacks via MSR 0x150 as described in this paper.

This work was partially funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) – SFB 1119 – 236615297, by the German Federal Ministry of Education and Research (BMBF) as part of the project HWSec, and by the Intel Collaborative Research Institute for Collaborative Autonomous & Resilient Systems (ICRI-CARS).

This material is based upon work partially supported by the Defense Advanced Research Projects Agency under contract FA8750-16-C-0260, by the United States Office of Naval Research under contract N00014-17-1-2782, and by the National Science Foundation under award CNS-161921.

Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Defense Advanced Research Projects Agency or its Contracting Agents, the Office of Naval Research or its Contracting Agents, the National Science Foundation, or any other agency of the U.S. Government.

### References

[1] Intel turbo boost max technology 3.0 legacy (non HWP) enumeration driver. https://github.com/torvalds/linux/blob/master/drivers/platform/x86/intel_turbo_max_3.c, Sept. 2018.

[2] Skylake (client) - microarchitectures - Intel. https://en.wikichip.org/wiki/intel/microarchitectures/skylake_(client), May 2019.

[3] Abadi, M., Budiu, M., Erlingsson, U., and Ligatti, J. Control-flow integrity. 340–353.

[4] Ahmad, A., Joe, B., Xiao, Y., Zhang, Y., Shin, I., and Lee, B. Obfuscuro: A commodity obfuscation engine on Intel SGX. In Annual Network and Distributed System Security Symposium (2019).

[5] Aweke, Z. B., Yitbarek, S. F., Qiao, R., Das, R., Hicks, M., Oren, Y., and Austin, T. Anvil: Software-based protection against next-generation Rowhammer attacks. In Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems (2016), ACM, pp. 743–755.

[6] Bosman, E., Razavi, K., Bos, H., and Giuffrida, C. Dedup est machina: Memory deduplication as an advanced exploitation vector. In 37th IEEE Symposium on Security and Privacy (2016), S&P.

[7] Brasser, F., Capkun, S., Dmitrienko, A., Frassetto, T., Kostiainen, K., and Sadeghi, A.-R. DR.SGX: Automated and adjustable side-channel protection for SGX using data location randomization. In 35th Annual Computer Security Applications Conference (ACSAC) (December 2019).

[8] Brasser, F., Davi, L., Gens, D., Liebchen, C., and Sadeghi, A.-R. Can’t touch this: Software-only mitigation against Rowhammer attacks targeting kernel memory. In Proceedings of the 26th USENIX Security Symposium. Vancouver, BC, Canada (2017), USENIX Sec.

[9] Brasser, F., Müller, U., Dmitrienko, A., Kostiainen, K., Capkun, S., and Sadeghi, A.-R. Software grand exposure: SGX cache attacks are practical. In USENIX Workshop on