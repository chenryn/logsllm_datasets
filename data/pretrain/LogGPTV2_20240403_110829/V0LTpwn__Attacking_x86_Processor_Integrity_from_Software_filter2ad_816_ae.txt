of cryptographic algorithms. As we demonstrate, we
were able to exploit these fault-susceptible instruction
patterns to achieve memory corruption in the absence
of software vulnerabilities by undervolting the processor.
7.2 Other Attack Scenarios
In this paper we demonstrated attacks against SGX
enclaves, however, other attack scenarios might be vi-
able within our threat model. For instance, an adver-
sary might try to break Mandatory Access Control on
SELinux [39] or other LSMs, which restrict and sepa-
rate privileged user-space access from kernel access, or
System Management Mode (SMM) code, which runs at
a even higher privilege level than the kernel. Further,
during our testing we noticed that the voltage setting
through MSR 0x150 remains in place after rebooting the
system (i.e., through warm reset). This opens up the
possibility of targeting bootloader code, which typically
represents the root of trust on modern platforms.
Another interesting aspect is that we occasionally ob-
served the Invalid Opcode processor exception while un-
dervolting our testing code. This exception is usually
raised if the processor encounters a malformed instruc-
tion. However, since our testing code only contained
valid, well-formed instructions, this exception must have
been introduced by our undervolting. The MCA logs
conﬁrmed this observations by reporting instruction de-
code corrected errors, leading us to conclude that it is
possible to tamper with instruction decoding through
undervolting in principle. However, we leave an in-depth
investigation of this to future work.
7.3 Mitigations
We responsibly disclosed our ﬁndings to Intel, which
developed and recently released a mitigation against
malicious CPU voltage setting modiﬁcation, consisting
of two parts: (1) a BIOS patch that includes a setting
to enable or disable the overclocking mailbox interface
conﬁguration, and (2) a microcode update that adds the
current state of this setting to the SGX TCB attestation.
As a result, Intel’s Attestation Service will only accept
updated platforms with access to MSR 0x150 disabled.
7.4 Other Platforms
Currently, our attack focuses on Intel processors (which
support SGX) and we did not test or evaluate our at-
tack on AMD systems. While conﬁdentiality of Intel
processors has been attacked in many prior publications,
V0LTpwn is — together with concurrent work [38,45] —
the ﬁrst successful attack on processor integrity for the
x86 platform.
8 Related Work
Related attacks have been demonstrated against ARM-
based devices previously [44,55] and a number hardware-
oriented side-channel attacks were published recently for
x86 which do not involve fault injection. Further, concur-
rently to our work, Murdock et. al. and Qiu et. al present
similar attacks, Plundervolt [38], and the SGX version of
VoltJockey [45], both of which also abuse the MSR 0x150
to inject faults in SGX enclaves. They describe faults in
the integer multiplication and AES instructions, while
our work describes faults in vector instructions (which
we suspect are the root cause for the AES faults). While
both focus on conﬁdentiality by leaking cryptographic
key material, V0LTpwn demonstrates control-ﬂow devia-
tion during enclave execution. Moreover, we analyzed
desktop processors, while these works focus on laptop
processors. Finally, neither Plundervolt nor VoltJockey
investigate the eﬀect of stressors, temperature, or spatial
locality of bit ﬂips.
In this Section we ﬁrst elaborate how V0LTpwn com-
pares to related attacks that were presented previously.
Second, we present a quick overview of the related tools
and methods for conducting fault-injection attacks from
software.
1456    29th USENIX Security Symposium
USENIX Association
8.1 Hardware-Oriented Exploits
For a direct comparison, we only focus on hardware
attacks that are within the scope of our threat model,
i.e., attacks that do not require physical presence but
can be launched remotely from software.
8.1.1 Software-Controlled Fault Injection
The CLKScrew [55] attack ﬁrst demonstrated that sophis-
ticated power-management APIs on some ARM-based
devices allow an adversary to induce faults in the pro-
cessor entirely remotely. These ﬁndings were recently
reproduced independently by the TrustZone version of
VoltJockey [44]. In both cases, the authors were able to
break the TrustZone isolation boundary on a Nexus 6
smartphone. Unfortunately, the techniques used to con-
duct undervolting attacks on ARM are not transfer-
able to x86-based platforms for several reasons: ﬁrst,
both Tang et al. and Qiu et al.
found core voltage
and frequency to be exposed directly to software, with
practically no limitations or restrictions imposed by the
ARM architecture besides root access. This means, the
attacker is able to freely choose practically arbitrary
combinations of frequency and voltage pairs, allowing
them to construct and apply utterly unsafe settings en-
tirely from software to conduct their attack. By contrast,
the x86 platform oﬀers only a ﬁxed, pre-deﬁned list of
selected P-states that are extensively tested for their
safety margins and common operating conditions by the
manufacturer prior to release. Hence, the attacker is
constrained to use one of these hand-picked frequency
voltage pair deﬁnitions to conduct a V0LTpwn.
Second, Intel deploys the Machine-Check Architecture
to explicitly check for and recover from hardware faults at
run time. Since Machine-Check Exceptions originating
from any core are broadcast to all cores, certain hard
glitches can eﬀectively be converted into soft errors on-
the-ﬂy on x86 and our evaluation shows that the attacker
has to push the victim core beyond a certain threshold
to ensure successful faults and exploitation. Further,
individual hardware components such as the caches and
the core have to be undervolted in lock-step for any
changes to take eﬀect on x86. This means that faults
generated from any other of these other components
contribute to the early warning mechanism employed
by the Machine-Check Architecture. No such safety net
exists on ARM, signiﬁcantly facilitating reliability of
faults and reproducible exploit scenarios.
Third, the core pinning technique introduced by Tang
et al. [55] ensures that faults are contained within a
chosen physical core, making it straightforward to launch
attacks against a target core from one of the running
system cores as an attacker. This technique works since
each core can eﬀectively operate in its own P-state on
ARM. On x86 all physical cores operate within the same
P-state, which means that the same voltage settings
apply to the attacker as well as the victim core, and
hence, faults cannot simply be contained to any given
core. This is why we introduce several novel techniques
to ensure an overall stable system while being able to
force the victim core into a fault-provoking power domain
on x86.
Lastly, since power-management is one of the key
driving factors on mobile devices the related low-level
APIs and involved hardware mechanisms are extensively
documented and tooling is readily available, or even
built into the existing platform software [44, 55]. On
x86 practically no oﬃcial documentation regarding low-
level power management of the platform exists, making it
hard to develop custom tools and even conducting simple
tests usually involves costly reverse engineering of micro-
architectural features, which can also diﬀer between the
many processor generations.
8.1.2 Rowhammer
Rowhammer attacks [32] are similar in nature to
CLKScrew [55] and V0LTpwn in so far as they gen-
erate hardware faults from software that are also ex-
ploitable [6, 24, 31, 43, 48, 50, 56, 60, 63]. However, the
main diﬀerence from our work is that Rowhammer af-
fects DRAM, which is widely used for implementing
the memory modules on oﬀ-the-shelve computing hard-
ware. This means Rowhammer attacks cannot aﬀect
memory inside the processor, such as cached memory
and register values. In contrast to this we show that
V0LTpwn directly impacts in-processor values and can
also divert control ﬂow. Additionally, while several coun-
termeasures [5,8,56,61] have been proposed to mitigate
Rowhammer from software, no defenses currently exist
to counter processor-based fault injection attacks.
8.1.3 Speculative Execution
Recently, several works independently demonstrated that
speculative execution (a processor feature to speed up ex-
ecution by increasing instruction-level parallelism) could
be exploited from software on certain platforms to extract
information through a side channel [33,36,58,62]. Unlike
attacks based on speculative execution remote-fault in-
jection attacks are not limited to information disclosure,
but directly aﬀects the systems integrity, allowing an
adversary to manipulate data as well as execution.
8.2 Analyzing x86 Internals
Earlier work by Pandit et al. [40] analyzed voltage oﬀ-
sets with regards to safe operation limits, with a focus
USENIX Association
29th USENIX Security Symposium    1457
towards increased processor performance. In that con-
text, they analyzed error handling of the Machine Check
Architecture on AMD processors and found that during
undervolting they were able to operate it beyond safe
operation points. They also observed corrected machine
check errors when reaching a threshold voltage oﬀset and
showed an increased error rate at higher CPU utilization.
Another study by Papadimitriou et al. [41] investi-
gated voltage oﬀsets on mobile and desktop processors
from Intel. They used standard benchmarks to stress
cores while applying voltage oﬀsets with Intel’s XTU ap-
plication and found that voltage can be decreased up to
15% while keeping the system in an overall stable condi-
tion. They observed diﬀerences in safe voltage oﬀsets for
the analyzed processor models and calculated that safe
undervolting can lead to an increased energy-eﬃciency
of up to 20% and temperature reductions of up to 25%.
More recently, Koppe et al. [34] presented a frame-
work to analyze as well as synthesize x86 microcode on
certain (older) platforms. Christopher Domas presented
initial results on reverse engineering the x86 hardware
platform and published several tools [15,16] to automat-
ically uncover certain aspects and features (including
undocumented MSRs). Domas also discovered hardware
backdoors through hidden modes on certain VIA x86
processors using those tools.
Researchers from Positive Technologies achieved re-
mote code execution on Intel’s Converged Security and
Management Engine (Intel CSME) in 2018 [19].
In-
tel CSME runs on a separate physical chip from the
host CPU (but is located within the SoC package) and
remains powered on and connected to the systems pe-
ripherals even when the main CPU is in deep sleep. Intel
CSME has full platform access, drives all security-related
tasks on modern Intel SoCs (including SGX, TXT, AMT)
and was recently found to include a logic analyzer dubbed
Intel VISA [20], revealing how Intel patches hardware
vulnerabilities in microcode. A recently disclosed boot
ROM bug in CSME-enabled chips prior to Ice Lake al-
lows for escalation of privilege, denial of service, and
information disclosure [29].
9 Conclusions
In this paper we introduced V0LTpwn, a novel software-
controlled fault-injection attack that leverages frequency
and voltage control interfaces to compromise the integrity
of x86 processors. We ﬁnd and discuss multiple code pat-
terns that are prone to bit ﬂips and are commonly used
in crypto code. We show that V0LTpwn can generate
faults in real-world OpenSSL code running in an SGX
enclave with a success rate of up to 99%. We analyze the
success rate of V0LTpwn over a variety of parameters.
Acknowledgements
We would like to thank Mike Polowski and the entire
Intel Product Security Incident Response team for swift
and eﬃcient coordination of the issue. Intel assigned
a CVE [57] and released an advisory [30] regarding
software-based undervolting attacks via MSR 0x150 as
described in this paper.
This work was partially funded by the Deutsche
Forschungsgemeinschaft (DFG, German Research Foun-
dation) – SFB 1119 – 236615297, by the German Federal
Ministry of Education and Research (BMBF) as part
of the project HWSec, and by the Intel Collaborative
Research Institute for Collaborative Autonomous & Re-
silient Systems (ICRI-CARS).
This material is based upon work partially supported
by the Defense Advanced Research Projects Agency un-
der contract FA8750-16-C-0260, by the United States
Oﬃce of Naval Research under contract N00014-17-1-
2782, and by the National Science Foundation under
award CNS-161921.
Any opinions, ﬁndings, and conclusions or recommen-
dations expressed in this material are those of the authors
and do not necessarily reﬂect the views of the Defense
Advanced Research Projects Agency or its Contracting
Agents, the Oﬃce of Naval Research or its Contracting
Agents, the National Science Foundation, or any other
agency of the U.S. Government.
References
[1] Intel turbo boost max technology 3.0 legacy (non HWP)
enumeration driver.
https://github.com/torvalds/linux/
blob/master/drivers/platform/x86/intel_turbo_max_3.c,
Sept. 2018.
[2] Skylake (client) - microarchitectures - Intel.
https://
en.wikichip.org/wiki/intel/microarchitectures/skylake_
(client), May 2019.
[3] Abadi, M., Budiu, M., Erlingsson, U., and Ligatti, J.
Control-ﬂow integrity. 340–353.
[4] Ahmad, A., Joe, B., Xiao, Y., Zhang, Y., Shin, I., and
Lee, B. Obfuscuro: A commodity obfuscation engine on Intel
SGX. In Annual Network and Distributed System Security
Symposium (2019).
[5] Aweke, Z. B., Yitbarek, S. F., Qiao, R., Das, R., Hicks,
M., Oren, Y., and Austin, T. Anvil: Software-based
protection against next-generation Rowhammer attacks. In
Proceedings of the Twenty-First International Conference
on Architectural Support for Programming Languages and
Operating Systems (2016), ACM, pp. 743–755.
[6] Bosman, E., Razavi, K., Bos, H., and Giuffrida, C. Dedup
est machina: Memory deduplication as an advanced exploita-
tion vector.
In 37th IEEE Symposium on Security and
Privacy (2016), S&P.
[7] Brasser, F., Capkun, S., Dmitrienko, A., Frassetto, T.,
Kostiainen, K., and Sadeghi, A.-R. DR.SGX: Automated
and adjustable side-channel protection for SGX using data
location randomization. In 35th Annual Computer Security
Applications Conference (ACSAC) (December 2019).
1458    29th USENIX Security Symposium
USENIX Association
[8] Brasser, F., Davi, L., Gens, D., Liebchen, C., and
Sadeghi, A.-R. Can’t touch this: Software-only mitiga-
tion against Rowhammer attacks targeting kernel memory.
In Proceedings of the 26th USENIX Security Symposium.
Vancouver, BC, Canada (2017), USENIX Sec.
[9] Brasser, F., Müller, U., Dmitrienko, A., Kostiainen, K.,
Capkun, S., and Sadeghi, A.-R. Software grand exposure:
SGX cache attacks are practical. In USENIX Workshop on