When lookahead operations are performed, pt’s destina-
tion is already known. When moving downward, pt will only
pause for a ps whose destination is above pt’s. To make
checking ps’s destination easier, β is updated to pt’s desti-
nation as soon as this destination is known instead of waiting
until it is actually occupied. This ensures that destinations
of the ps pebbles can be compared with β to correctly de-
termine when each ps should move.
4. CORRECTNESS
The structural model used for proving correctness can be
simpliﬁed over the computational structures used in imple-
mentation. Abstractly, a chain is modeled as an ordered list
of all pebbles. Pebbles are simpliﬁed to a tuple represent-
ing their ID and destination. The correspondence between
a pebble’s position and value is one-to-one, so that pebbles
will output the correct values exactly when their positions
are correct. As proved by Jakobsson, pebbles’ destinations
will be correct by the time their values are needed [10]. This
applies to the targeting algorithms as well, since the amor-
tization strategy used in targeting may be overzealous and
move pebbles farther than actually necessary, but not less.
Thus, pebbles may arrive at their destinations sooner than
necessary, but never later. Due to this eager approach, peb-
bles’ values will be correct if their destinations are chosen
correctly. Proof of correct destinations follows.
idx ← idx + 1
nxtId ← 2 × nxtId
p ← L.getPebbleByIndex(idx)
β ← p.pos
/* begin iteration
while nxtId > 1 do
p ← L.getPebbleByID(nxtId)
/* Decide new position for p
if p.id  i} relative to a
pebble pi = (cid:104)i, d(cid:105).
Lemma 1. Given a pebble pi = (cid:104)i, di(cid:105) to move, let df be a
valid ﬁnal destination. The locations df − i and df + i must
be valid destinations for two pebbles in Ai. Moreover, df + i
and df − i are the closest destinations to df which are valid
for any pebble in Ai.
Proof. The precise set of destinations for each pebble
does not overlap with any of the other pebbles, limiting the
pebbles that may occupy a given location. Speciﬁcally, for
a pebble (cid:104)i, d(cid:105), all legal values for d ﬁt the form
d = dk where (cid:104)i, dk(cid:105) = ζ k((cid:104)i, i(cid:105))
= i + 2i × k
(7)
Where k ∈ Z+ and ζ k represents repeated application of ζ
k times. Equation 7 is useful for determining relative oﬀsets
between pebbles. Let (cid:104)ia, da(cid:105) ,(cid:104)ib, db(cid:105) ∈ Ai be the pebbles
above and below df . Because i, ia and ib are each a power
of two, ia = 2ja i and ib = 2jb i for some ja, jb ∈ Z+. Using
Equation 7, da and db can be rewritten to obtain expressions
/* make t even
if t is odd then t ← t + 1
/* amortized hashing of pebbles not at their
destinations not shown
/* initialize iteration control variables
idx ← (cid:98) log2(t − L.getPebbleByIndex(0).pos + 1)(cid:99);
nxtId ← 2idx
p ← L.getPebbleByIndex(idx)
while p.dest  1 do
p ← L.getPebbleByID(nxtId)
/* a check could be added here to ensure
that p actually needs to move and is not
to be retired
if p.dest  1 and q.dest > β do
p.dest ← q.dest
p.hashT oDestination()
movePebble(L, q, idx)
idx ← idx − 1
nxtId ← nxtId/2
p.dest ← β
p.hashT oDestination()
else
movePebble(L, p, idx + 1)
p.hashT oDestination()
/* set up for next iteration
idx ← idx − 1
nxtId ← nxtId/2
*/
*/
*/
a new state, ψ is evaluated repeatedly until the target t cor-
responds to the lowest pebble.
From these deﬁnitions, each destination can be found in
a unique way.
Theorem 1. For a state associated with the retrieval of
t, there is only one legal position for each pebble.
Proof. Initial pebble positions are ﬁxed, and subsequent
destinations are chosen only from previous ones. Thus, the
possible destinations of any pebble over the course of the
1281in terms of df and i:
For da:
da = ia + 2iaka
= 2ja i + 2(2ja ika)
= 2i(2ja−1 + 2ja ka)
Setting k = 2ja ka + 2ja−1 − 1 :
And similarly for db:
da = 2i(k + 1)
= 2i + 2ik
= df + i
db = ib + 2ibkb
= 2jb i + 2(2jb ikb)
= 2i(2jb−1 + 2jb kb)
Setting k = 2jb kb + 2jb−1 :
db = 2i(k)
= df − i
(9)
The fact that there is no third pebble (cid:104)ic, dc(cid:105) ∈ Ai sat-
isfying db ≤ dc ≤ da stems from the same positional rela-
tionships that relate i, ia and ib. By Equations 8 and 9, the
distance between ia and ib is 2i. Moreover, the distances
between any two pebbles in Ai must be a multiple of 2i. No
pebble from Ai could be between da and db without violating
this condition.
Lemma 2 shifts perspective, building on Lemma 1 to show
that the destinations for larger pebbles surrounding each
new destination can be used to ﬁnd this new destination.
Lemma 2. Let (cid:104)i, d(cid:105) be a pebble to be moved to an un-
known destination df . Assume that all pebbles in Ai cur-
rently have destinations above t. In this situation, a pebble
from Ai will be located at either df + i or df − i.
Proof. By deﬁnition, Ai must contain a pebble, (cid:104)i2i, d2i(cid:105),
such that i2i = 2i. Corollary 1 requires that t ≤ d2i <
t + 2i2i. Note 2i2i = 4i, so if
t ≤ d2i < t + 3i,
then Lemma 2 is clearly satisﬁed with df − i = d2i. In the
remaining case,
t + 3i ≤ d2i < t + 4i.
Here, Equation 9 states that there must be a pebble desti-
nation at d2i − i2i = df − i. Furthermore, with df ± i above
t, the pebbles corresponding to these destinations must be
in Ai and therefore actively present in these positions.
The Ψ function applies the above procedure, ﬁnding a
pebble pi with a valid Ai set and updating its destination.
Induction can now be applied in a full proof of Theorem 2,
showing that starting from any correct state, the new desti-
nations found for all pebbles form a new correct state.
Proof. Base case: A pebble pi = (cid:104)i, d(cid:105) exists such that
the corresponding Ai set contains only pebbles that are
above t. This is necessarily true unless pi will move beyond
the end of the chain, in which case this proof is unnecessary.
In such a state, a new destination for pi can be correctly
determined.
Inductive Step: Given a state where a new destination can
be determined for pi = (cid:104)i, d(cid:105), applying Ψ(S) and updating
this pebble’s destination will result in a state where either 1)
no more pebbles need to be updated, or 2) there is now a new
pebble to which Ψ can be applied. The ﬁrst case trivially
halts the induction. In the second, using Ψ to determine a
new destination for pi automatically results in a new parti-
tioning where all the pebbles in Ai/2 = Ai∪{(cid:104)i, d(cid:105)} now have
destinations above t. Thus, a new pebble, p1/2 =(cid:10)ii/2, di/2
(cid:11),
(8)
is found for which a new destination can be found. In some
cases, d1/2 will already be above t, however, this causes no
change since exactly the same two cases apply as if p1/2 had
just been updated.
Targeting transitions follow these steps of iteratively ap-
plying Ψ(S) and moving each pebble, and hence the new
destination of each pebble will be correct. Thus, each state