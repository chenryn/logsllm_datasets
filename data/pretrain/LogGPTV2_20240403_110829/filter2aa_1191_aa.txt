2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
1/12
A blueprint for evading industry leading endpoint
protection in 2022
MONDAY. APRIL 18, 2022 - 19 MINS
EVASION  
OBFUSCATION
About two years ago I quit being a full-time red team operator. However, it still is a field of
expertise that stays very close to my heart. A few weeks ago, I was looking for a new side project
and decided to pick up an old red teaming hobby of mine: bypassing/evading endpoint protection
solutions.
In this post, I’d like to lay out a collection of techniques that together can be used to bypassed
industry leading enterprise endpoint protection solutions. This is purely for educational purposes
for (ethical) red teamers and alike, so I’ve decided not to publicly release the source code. The
aim for this post is to be accessible to a wide audience in the security industry, but not to drill
down to the nitty gritty details of every technique. Instead, I will refer to writeups of others that
deep dive better than I can.
In adversary simulations, a key challenge in the “initial access” phase is bypassing the detection
and response capabilities (EDR) on enterprise endpoints. Commercial command and control
frameworks provide unmodifiable shellcode and binaries to the red team operator that are heavily
signatured by the endpoint protection industry and in order to execute that implant, the signatures
(both static and behavioural) of that shellcode need to be obfuscated.
In this post, I will cover the following techniques, with the ultimate goal of executing malicious
shellcode, also known as a (shellcode) loader:
Home  Blog  Projects
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
2/12
1. Shellcode encryption
2. Reducing entropy
3. Escaping the (local) AV sandbox
4. Import table obfuscation
5. Disabling Event Tracing for Windows (ETW)
6. Evading common malicious API call patterns
7. Direct system calls and evading “mark of the syscall”
8. Removing hooks in ntdll.dll
9. Spooﬁng the thread call stack
10. In-memory encryption of beacon
11. A custom reﬂective loader
12. OpSec conﬁgurations in your Malleable proﬁle
1. Shellcode encryption
Let’s start with a basic but important topic, static shellcode obfuscation. In my loader, I leverage a
XOR or RC4 encryption algorithm, because it is easy to implement and doesn’t leave a lot of
external indicators of encryption activities performed by the loader. AES encryption to obfuscate
static signatures of the shellcode leaves traces in the import address table of the binary, which
increase suspicion. I’ve had Windows Defender specifically trigger on AES decryption functions
(e.g. CryptDecrypt, CryptHashData, CryptDeriveKey etc.) in earlier versions of this loader.
2. Reducing entropy
Many AV/EDR solutions consider binary entropy in their assessment of an unknown binary. Since
we’re encrypting the shellcode, the entropy of our binary is rather high, which is a clear indicator
of obfuscated parts of code in the binary.
There are several ways of reducing the entropy of our binary, two simple ones that work are:
Output of dumpbin /imports, an easy giveaway of only AES decryption functions being used in the binary.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
3/12
1. Adding low entropy resources to the binary, such as (low entropy) images.
2. Adding strings, such as the English dictionary or some of "strings C:\Program
Files\Google\Chrome\Application\100.0.4896.88\chrome.dll" output.
A more elegant solution would be to design and implement an algorithm that would obfuscate
(encode/encrypt) the shellcode into English words (low entropy). That would kill two birds with one
stone.
3. Escaping the (local) AV sandbox
Many EDR solutions will run the binary in a local sandbox for a few seconds to inspect its
behaviour. To avoid compromising on the end user experience, they cannot afford to inspect the
binary for longer than a few seconds (I’ve seen Avast taking up to 30 seconds in the past, but that
was an exception). We can abuse this limitation by delaying the execution of our shellcode. Simply
calculating a large prime number is my personal favourite. You can go a bit further and
deterministically calculate a prime number and use that number as (a part of) the key to your
encrypted shellcode.
4. Import table obfuscation
You want to avoid suspicious Windows API (WINAPI) from ending up in our IAT (import address
table). This table consists of an overview of all the Windows APIs that your binary imports from
other system libraries. A list of suspicious (oftentimes therefore inspected by EDR solutions) APIs
can be found here. Typically, these are VirtualAlloc, VirtualProtect, WriteProcessMemory,
CreateRemoteThread, SetThreadContext etc. Running dumpbin /exports  will list all the
imports. For the most part, we’ll use Direct System calls to bypass both EDR hooks (refer to
section 7) of suspicious WINAPI calls, but for less suspicious API calls this method works just fine.
We add the function signature of the WINAPI call, get the address of the WINAPI in ntdll.dll and
then create a function pointer to that address:
typedef BOOL (WINAPI * pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, 
pVirtualProtect fnVirtualProtect; 
unsigned char sVirtualProtect[] = { 'V','i','r','t','u','a','l','P','r','o','t','e','c','t', 0x
unsigned char sKernel32[] = { 'k','e','r','n','e','l','3','2','.','d','l','l', 0x0 }; 
fnVirtualProtect = (pVirtualProtect) GetProcAddress(GetModuleHandle((LPCSTR) sKernel32), (LPCST
// call VirtualProtect 
fnVirtualProtect(address, dwSize, PAGE_READWRITE, &oldProt); 
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
4/12
Obfuscating strings using a character array cuts the string up in smaller pieces making them more
difficult to extract from a binary.
The call will still be to an ntdll.dll WINAPI, and will not bypass any hooks in WINAPIs in
ntdll.dll, but is purely to remove suspicious functions from the IAT.
5. Disabling Event Tracing for Windows (ETW)
Many EDR solutions leverage Event Tracing for Windows (ETW) extensively, in particular Microsoft
Defender for Endpoint (formerly known as Microsoft ATP). ETW allows for extensive
instrumentation and tracing of a process’ functionality and WINAPI calls. ETW has components in
the kernel, mainly to register callbacks for system calls and other kernel operations, but also
consists of a userland component that is part of ntdll.dll (ETW deep dive and attack vectors).
Since ntdll.dll is a DLL loaded into the process of our binary, we have full control over this DLL
and therefore the ETW functionality. There are quite a few different bypasses for ETW in
userspace, but the most common one is patching the function EtwEventWrite which is called to
write/log ETW events. We fetch its address in ntdll.dll, and replace its first instructions with
instructions to return 0 (SUCCESS).
void disableETW(void) { 
// return 0 
unsigned char patch[] = { 0x48, 0x33, 0xc0, 0xc3};     // xor rax, rax; ret 
ULONG oldprotect = 0; 
size_t size = sizeof(patch); 
HANDLE hCurrentProc = GetCurrentProcess(); 
unsigned char sEtwEventWrite[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e'
void *pEventWrite = GetProcAddress(GetModuleHandle((LPCSTR) sNtdll), (LPCSTR) sEtwEven
NtProtectVirtualMemory(hCurrentProc, &pEventWrite, (PSIZE_T) &size, PAGE_READWRITE, &o
memcpy(pEventWrite, patch, size / sizeof(patch[0])); 
NtProtectVirtualMemory(hCurrentProc, &pEventWrite, (PSIZE_T) &size, oldprotect, &oldpr
FlushInstructionCache(hCurrentProc, pEventWrite, size); 
} 
I’ve found the above method to still work on the two tested EDRs, but this is a noisy ETW patch.
2022/4/25 09:43
A blueprint for evading industry leading endpoint protection in 2022 | Vincent Van Mieghem
https://vanmieghem.io/blueprint-for-evading-edr-in-2022/
5/12
6. Evading common malicious API call patterns
Most behavioural detection is ultimately based on detecting malicious patterns. One of these
patters is the order of specific WINAPI calls in a short timeframe. The suspicious WINAPI calls
briefly mentioned in section 4 are typically used to execute shellcode and therefore heavily
monitored. However, these calls are also used for benign activity (the VirtualAlloc, WriteProcess,
CreateThread pattern in combination with a memory allocation and write of ~250KB of shellcode)
and so the challenge for EDR solutions is to distinguish benign from malicious calls. Filip Olszak
wrote a great blog post leveraging delays and smaller chunks of allocating and writing memory to
blend in with benign WINAPI call behaviour. In short, his method adjusts the following behaviour of
a typical shellcode loader:
1. Instead of allocating one large chuck of memory and directly write the ~250KB implant shellcode
into that memory, allocate small contiguous chunks of e.g. <64KB memory and mark them as
NO_ACCESS. Then write the shellcode in a similar chunk size to the allocated memory pages.
2. Introduce delays between every of the above mentioned operations. This will increase the time
required to execute the shellcode, but will also make the consecutive execution pattern stand out
much less.
One catch with this technique is to make sure you find a memory location that can fit your entire
shellcode in consecutive memory pages. Filip’s DripLoader implements this concept.
The loader I’ve built does not inject the shellcode into another process but instead starts the
shellcode in a thread in its own process space using NtCreateThread. An unknown process (our
binary will de facto have low prevalence) into other processes (typically a Windows native ones) is
suspicious activity that stands out (recommended read “Fork&Run – you’re history”). It is much
easier to blend into the noise of benign thread executions and memory operations within a
process when we run the shellcode within a thread in the loader’s process space. The downside
however is that any crashing post-exploitation modules will also crash the process of the loader
and therefore the implant. Persistence techniques as well as running stable and reliable BOFs can
help to overcome this downside.