**作者：Strawberry @ QAX A-TEAM  
原文链接： **
2020年3月11日，微软发布了115个漏洞的补丁程序和一个安全指南（禁用SMBv3压缩指南 ----ADV200005），ADV200005中暴露了一个SMBv3的远程代码执行漏洞，该漏洞可能未经身份验证的攻击者在SMB服务器或客户端上远程执行代码，业内安全专家猜测该漏洞可能会造成蠕虫级传播。补丁日之后，微软又发布了Windows
SMBv3 客户端/服务器远程代码执行漏洞的安全更新细节和补丁程序，漏洞编号为CVE-2020-0796，由于一些小插曲，该漏洞又被称为SMBGhost。
2020年6月10日，微软公开修复了Microsoft Server Message Block 3.1.1
(SMBv3)协议中的另一个信息泄露漏洞CVE-2020-1206。该漏洞是由ZecOps安全研究人员在SMBGhost同一漏洞函数中发现的，又被称为SMBleed。未经身份验证的攻击者可通过向目标SMB服务器发特制数据包来利用此漏洞，或配置一个恶意的
SMBv3 服务器并诱导用户连接来利用此漏洞。成功利用此漏洞的远程攻击者可获取敏感信息。
SMBGhost 和 SMBleed 漏洞产生于同一个函数，不同的是，SMBGhost 漏洞源于OriginalCompressedSize 和
Offset 相加产生的整数溢出，SMBleed 漏洞在于 OriginalCompressedSize 或 Offset
欺骗产生的数据泄露。本文对以上漏洞进行分析总结，主要包括以下几个部分：
  * SMBGhost 漏洞回顾
  * SMBleed 漏洞复现分析
  * 物理地址读 && SMBGhost 远程代码执行
  * SMBGhost && SMBleed 远程代码执行
  * Shellcode 调试分析
# SMBGhost 漏洞回顾
CVE-2020-0796漏洞源于Srv2DecompressData函数，该函数主要负责将压缩过的SMB数据包还原（解压），但在使用SrvNetAllocateBuffer函数分配缓冲区时，传入了参数OriginalCompressedSegmentSize
+
Offset，由于未对这两个值进行额外判断，存在整数溢出的可能。如果SrvNetAllocateBuffer函数使用较小的值作为第一个参数为SMB数据分配缓冲区，获取的缓冲区的长度或小于待解压数据解压后的数据的长度，这将导致程序在解压（SmbCompressionDecompress）的过程中产生缓冲区溢出。
    NTSTATUS Srv2DecompressData(PCOMPRESSION_TRANSFORM_HEADER Header, SIZE_T TotalSize)
    {
        PALLOCATION_HEADER Alloc = SrvNetAllocateBuffer(
            (ULONG)(Header->OriginalCompressedSegmentSize + Header->Offset),
            NULL);
        If (!Alloc) {
            return STATUS_INSUFFICIENT_RESOURCES;
        }
        ULONG FinalCompressedSize = 0;
        NTSTATUS Status = SmbCompressionDecompress(
            Header->CompressionAlgorithm,
            (PUCHAR)Header + sizeof(COMPRESSION_TRANSFORM_HEADER) + Header->Offset,
            (ULONG)(TotalSize - sizeof(COMPRESSION_TRANSFORM_HEADER) - Header->Offset),
            (PUCHAR)Alloc->UserBuffer + Header->Offset,
            Header->OriginalCompressedSegmentSize,
            &FinalCompressedSize);
        if (Status OriginalCompressedSegmentSize) {
            SrvNetFreeBuffer(Alloc);
            return STATUS_BAD_DATA;
        }
        if (Header->Offset > 0) {
            memcpy(
                Alloc->UserBuffer,
                (PUCHAR)Header + sizeof(COMPRESSION_TRANSFORM_HEADER),
                Header->Offset);
        }
        Srv2ReplaceReceiveBuffer(some_session_handle, Alloc);
        return STATUS_SUCCESS;
    }
通过SrvNetAllocateBuffer函数获取的缓冲区结构如下，函数返回的是SRVNET_BUFFER_HDR结构的指针，其偏移0x18处存放了User
Buffer指针，User Buffer区域用来存放还原的SMB数据，解压操作其实就是向User Buffer偏移offset处释放解压数据：
原本程序设计的逻辑是，在解压成功之后调用memcpy函数将raw data（压缩数据之前的offset大小的没有被压缩的数据）复制到User
Buffer的起始处，解压后的数据是从offset偏移处开始存放的。正常的情况如下图所示，未压缩的数据后面跟着解压后的数据，复制的数据没有超过User
Buffer的范围：
但由于整数溢出，分配的User Buffer空间会小，User
Buffer减offset剩下的空间不足以容纳解压后的数据，如下图所示。根据该结构的特点，可通过构造Offset、Raw Data和Compressed
Data，在解压时覆盖后面SRVNET BUFFER
HDR结构体中的UserBuffer指针，从而在后续memcpy时向UserBuffer（任意地址）写入可控的数据（任意数据）。
**任意地址写是该漏洞利用的关键。**
3月份跟风分析过此漏洞并学习了通过任意地址写进行本地提权的利用方式，链接如下：
# SMBleed 漏洞
根据ZecOps公开的信息可知，引发该漏洞的函数也是srv2.sys中的Srv2DecompressData函数，与SMBGhost漏洞（CVE-2020-0796）相同。
### 漏洞分析
再来回顾一下Srv2DecompressData函数吧，该函数用于还原（解压）SMB数据。首先根据原始压缩数据中的OriginalCompressedSegmentSize和Offset计算出解压后结构的大小，然后通过SrvNetAllocateBuffer函数获取SRVNET
BUFFER HDR结构（该结构中指明了可存放无需解压的Offset长度的数据和解压数据的缓冲区的User
Buffer），然后调用SmbCompressionDecompress函数向User
Buffer的Offset偏移处写入数据。CVE-2020-0796漏洞是由于OriginalCompressedSegmentSize和Offset相加的过程中出现整数溢出，从而导致获取的缓冲区不足以存放解压后的数据，最终在解压过程中产生溢出。
  * (ULONG)(Header->OriginalCompressedSegmentSize + Header->Offset) 处产生整数溢出，假设结果为x
  * SrvNetAllocateBuffer函数会根据x的大小去LookAside中寻找大小合适的缓冲区，并返回其后面的SRVNET BUFFER HDR结构，该结构偏移0x18处指向该缓冲区User Buffer
  * SmbCompressionDecompress函数依据指定的压缩算法将待解压数据解压到 User Buffer偏移Offset处，但其实压缩前的数据长度大于剩余的缓冲区长度，解压复制的过程中产生缓冲区溢出
    NTSTATUS Srv2DecompressData(PCOMPRESSION_TRANSFORM_HEADER Header, SIZE_T TotalSize)
    {
        PALLOCATION_HEADER Alloc = SrvNetAllocateBuffer(
            (ULONG)(Header->OriginalCompressedSegmentSize + Header->Offset),
            NULL);
        If (!Alloc) {
            return STATUS_INSUFFICIENT_RESOURCES;
        }
        ULONG FinalCompressedSize = 0;
        NTSTATUS Status = SmbCompressionDecompress(
            Header->CompressionAlgorithm,
            (PUCHAR)Header + sizeof(COMPRESSION_TRANSFORM_HEADER) + Header->Offset,
            (ULONG)(TotalSize - sizeof(COMPRESSION_TRANSFORM_HEADER) - Header->Offset),
            (PUCHAR)Alloc->UserBuffer + Header->Offset,
            Header->OriginalCompressedSegmentSize,
            &FinalCompressedSize);
        if (Status OriginalCompressedSegmentSize) {
            SrvNetFreeBuffer(Alloc);
            return STATUS_BAD_DATA;
        }
        if (Header->Offset > 0) {
            memcpy(
                Alloc->UserBuffer,
                (PUCHAR)Header + sizeof(COMPRESSION_TRANSFORM_HEADER),
                Header->Offset);
        }
        Srv2ReplaceReceiveBuffer(some_session_handle, Alloc);
        return STATUS_SUCCESS;
    }
在SmbCompressionDecompress函数中有一个神操作，如下所示，如果nt!RtlDecompressBufferEx2返回值非负（解压成功），则将FinalCompressedSize赋值为OriginalCompressedSegmentSize。因而，只要数据解压成功，就不会进入SrvNetFreeBuffer等流程，即使解压操作后会判断FinalCompressedSize和OriginalCompressedSegmentSize是否相等。这是0796任意地址写的前提条件。
      if ( (int)RtlGetCompressionWorkSpaceSize(v13, &NumberOfBytes, &v18) = 0 )
          *v14 = v15;
        if ( v6 )
          ExFreePoolWithTag(v6, 0x2532534Cu);
      }
这也是CVE-2020-1206的漏洞成因之一，SmbCompressionDecompress函数会对FinalCompressedSize值进行更新，导致实际解压出来的数据长度和OriginalCompressedSegmentSize不相等时也不会进入释放流程。而且在解压成功之后会将SRVNET
BUFFER HDR结构中的UserBufferSizeUsed赋值为Offset与FinalCompressedSize之和，这个操作也是挺重要的。
    //Srv2DecompressData
        if (Status OriginalCompressedSegmentSize) {
            SrvNetFreeBuffer(Alloc);
            return STATUS_BAD_DATA;
        }
        if (Header->Offset > 0) {
            memcpy(
                Alloc->UserBuffer,
                (PUCHAR)Header + sizeof(COMPRESSION_TRANSFORM_HEADER),
                Header->Offset);
        }
        Alloc->UserBufferSizeUsed = Header->Offset + FinalCompressedSize;
        Srv2ReplaceReceiveBuffer(some_session_handle, Alloc);
        return STATUS_SUCCESS;
    }
那如果我们将OriginalCompressedSegmentSize设置为比实际压缩的数据长度大的数，让系统认为解压后的数据长度就是OriginalCompressedSegmentSize大小，是不是也可以泄露内存中的数据（类似于心脏滴血）。如下所示，POC中将OriginalCompressedSegmentSize设置为x
+ 0x1000，offset设置为0，最终得到解压后的数据 (长度为x)，其后面跟有未初始化的内核数据 ，然后利用解压后的SMB2 WRITE
消息泄露后面紧跟着的长度为0x1000的未初始化数据。
### 漏洞复现
在Win10 1903下使用公开的SMBleed.exe进行测试（需要身份认证和可写权限）。步骤如下：
_共享C盘，确保允许Everyone进行更改（或添加其他用户并赋予其读取和更改权限）_ 在C盘下创建share目录，以便对文件写入和读取 *
按照提示运行SMBleed.exe程序，例：SMBleed.exe win10 127.0.0.1 DESKTOP-C2C92C6 strawberry
123123 c share\test.bin local.bin
以下为获得的local.bin中的部分信息：
### 抓包分析
在复现的同时可以抓包，可以发现协商之后的大部分包都采用了SMB
压缩（ProtocalId为0x424D53FC）。根据数据包可判断POC流程大概是这样的：SMB协商->用户认证->创建文件->利用漏洞泄露内存信息并写入文件->将文件读取到本地->结束连接。
注意到一个来自服务端的Write
Response数据包，其status为STATUS_SUCCESS，说明写入操作成功。ZecOps在文章中提到过他们利用[SMB2
WRITE消息](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/e7046961-3318-4350-be2a-a8d69bb59ce8)来演示此漏洞，因而我们需要关注一下其对应的请求包，也就是下图中id为43的那个数据包。
下面为触发漏洞的SMB压缩请求包，粉色方框里的OriginalCompressedSegmentSize字段值为0x1070，但实际压缩前的数据只有0x70，可借助
SMB2 WRITE 将未初始化的内存泄露出来。
以下为解压前后数据对比，解压前数据大小为0x3f，解压后数据大小为0x70（真实解压大小，后面为未初始化内存），解压后的数据包括SMB2数据包头（0x40长度）和偏移0x40处的SMB2
WRITE结构。在这SMB2 WRITE结构中指明了向目标文件写入后面未初始化的0x1000长度的数据。
    3: kd> 
    srv2!Srv2DecompressData+0xdc: