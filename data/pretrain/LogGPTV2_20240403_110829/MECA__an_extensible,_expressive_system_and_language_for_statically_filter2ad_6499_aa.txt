title:MECA: an extensible, expressive system and language for statically
checking security properties
author:Junfeng Yang and
Ted Kremenek and
Yichen Xie and
Dawson R. Engler
MECA: an Extensible, Expressive System and Language
for Statically Checking Security Properties
Junfeng Yang, Ted Kremenek, Yichen Xie and Dawson Engler
Computer Systems Laboratory
Stanford University
Stanford, CA 94305, U.S.A.
ABSTRACT
This paper describes a system and annotation language,
MECA, for checking security rules. MECA is expressive
and designed for checking real systems. It provides a variety
of practical constructs to eﬀectively annotate large bodies of
code. For example, it allows programmers to write program-
matic annotators that automatically annotate large bodies
of source code. As another example, it lets programmers use
general predicates to determine if an annotation is applied;
we have used this ability to easily handle kernel backdoors
and other false-positive inducing constructs. Once code is
annotated, MECA propagates annotations aggressively, al-
lowing a single manual annotation to derive many additional
annotations (e.g., over one hundred in our experiments) free-
ing programmers from the heavy manual eﬀort required by
most past systems.
MECA is eﬀective. Our most thorough case study was
a user-pointer checker that used 75 annotations to check
thousands of declarations in millions of lines of code in the
Linux system.
It found over forty errors, many of which
were serious, while only having eight false positives.
Categories and Subject Descriptors
D.3.3 [Programming Languages]: Languages Constructs
and Features; D.2.4 [Software Engineering]: Software/
Program Veriﬁcation—Statistical methods; D.4.6 [Operating
System]: Security and Protection
General Terms
Reliability, Security, Measurement.
Keywords
annotation language, static analysis
1.
INTRODUCTION
Static analysis can ﬁnd many security holes. Bishop and
Dilger [2] describe how to statically ﬁnd “time-of-check-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
to-time-of-use” (TOCTTOU) race conditions in privileged
Unix applications. More recently, there has been work on
ﬁnding information leaks [17], intrusion detection [21], and
checking uses of unsanitized user input [1]. And, of course,
signiﬁcant attention has been paid to ﬁnding buﬀer over-
ﬂows [6, 15, 18, 20, 22].
While checking analyses have made progress, the features
needed to apply these analyses to a given system have not
enjoyed similar advances. First, programmers are given rela-
tively limited means of expressing what program constructs
to check. Some systems require programmers to specify
properties using external text ﬁles [1]. Others use source an-
notations that are largely limited to inserting textual names
in front of variables [9, 12]. Their focus on unary type
qualiﬁers makes expressing even simple properties such as
“check X before Y” either impossible or painful [7, 23]. Fur-
thermore, past systems provide a ﬁxed, one-size-ﬁts-all set
of rules for how annotations propagate. When these hard-
wired decisions are too aggressive, they cause a signiﬁcant
number of false positives [12]. When they are too weak, they
require programmers to compensate by manually inserting
an (often impractical) large amount of annotations. For ex-
ample, systems such as Splint do not propagate annotations
across function boundaries, programmers must annotate ev-
ery function interface that needs to be checked [9]. Even
advanced systems such as the race detector in Flanagan and
Freund [10] have overheads of roughly one annotation per
50 lines of code at a cost of one programmer hour per thou-
sand lines of code [10]. Finally, past systems do not give
programmers a way to exploit the signiﬁcant amount of la-
tent speciﬁcations [8] (such as naming conventions) already
present in most programs. Instead they must redundantly
re-annotate them, rather than simply mapping these pre-
existing speciﬁcations to those needed by the checker.
This paper describes an annotation system, MECA, that
attempts to counter these problems. MECA is an extensible
annotation language coupled to a ﬂexible, powerful anno-
tation propagation framework. We have combined MECA
with the MC checking system [1, 8, 4], which allows pro-
grammers to write custom extensions that can check a rich
set of security properties [1] such as “check capability X
before doing operation Y” and “sanitize untrusted variables
before using them.” MECA allows implementors to (1) write
a custom checker and (2) deﬁne a set of annotations that are
relevant to that checker. The annotations are then used by
the programmer to annotate checker-relevant parts of their
source code. MECA then propagates these annotations au-
tomatically through the source code, possibly in a checker-
speciﬁc way. Simple propagation examples would be across
function calls and from the right-hand side of an assignment
to the left. More aggressive examples include propagating
annotations across all functions assigned to the same func-
tion pointer and using statistical inference to annotate func-
tion formal parameters based on the (possibly conﬂicting)
annotation information of the function’s callers (§ 5).
MECA was designed with the following goals in mind:
1. Expressiveness. Extension writers should be able to ex-
press all program information relevant for their security
checkers. We currently focus on the requirements of the
most common security properties: attaching annotations
to program objects (e.g., functions, variables, ﬁeld types)
and allowing these to be bound together. These allow
checking common rules such as: variables must be vetted
before use and and certain operations (e.g., permission
checks) must precede others (e.g., mutations).
2. Low annotation overhead. We want to minimize user la-
bor, since this also minimizes the amount of programmer
mistakes and maximizes the chance that they will use the
tool. Programmers should get as much eﬀect as possible
from each annotation they add.
3. Intuitive syntax and semantics. Programmers should be
able to deﬁne annotations that express their properties
in a direct, intuitive way.
4. Low false positive rates. We favor eﬀectiveness over sound-
ness and want to ﬁnd as many bugs as possible while
minimizing false positives.
We have explicitly designed MECA to work well with al-
ready written source code bases (or, equivalently, new code
bases that were initially built without checking in mind).
In practice, even a few annotations can be suﬃcient for the
checker to check hundreds of diﬀerent locations.
MECA combines existing techniques with several novel
ones. Its main technical contributions are:
1. A simple but powerful set of annotation primitives. These
include data-dependent annotations (§ 3.2), programmatic
annotations (§ 3.3), and general n-ary annotation predi-
cates.
2. Annotation inference (§ 5), which uses statistical analysis
to detect missing annotations.
3. Measurements of the eﬀectiveness of our propagation meth-
ods. These show that MECA can derive hundreds of
checks for each manual annotation, which to the best of
our knowledge signiﬁcantly exceeds the ratio of current
approaches.
The next section gives a quick overview of the system.
Section 3 describes the annotation language in more detail,
Section 4 describes the propagation algorithms and Section 5
discusses annotation inference. Section 6 gives a toy exam-
ple of how to use MECA to ﬁnd missing permission checks.
Section 7-8 presents our main case study, which uses MECA
to detect illegal uses of tainted pointers in operating system
code. Its experiments show that the system ﬁnds many er-
rors with few false positives and derives many checks from
a single annotation. Section 9 discusses related work and
ﬁnally we conclude.
Source
Files
annotation
   parser
gcc parser
Annotated Trees
Emitter
Call Graph
Fn Pointers
f
g
h
p
q
f
g
h
...
Retriever
Annotation
Propagator
Control Flow Graph
MC Extension
Error
Report
Figure 1: An Overview of the Analysis
2. OVERVIEW
Figure 1 gives an overview of the MECA system. It con-
sists of an emitter, a retriever, an annotation propagator,
and one or more checking extensions. The emitter uses
a modiﬁed version of the GNU C Compiler (GCC 3.1) to
parse the checked system’s source code and its associated
annotations into abstract syntax trees (ASTs). The ASTs
are serialized and dumped onto the disk for further process-
ing, along with the call graph and a ﬁle containing all the
function pointer assignments. The retriever retrieves these
emitted trees and constructs a control-ﬂow graph for each
function with sets of AST trees as basic blocks and branch-
ing statements as edges [4]. The CFGs are linked into a
global call graph, which is then processed by the propa-
gator. The propagator propagates annotations throughout
this global call graph and then runs the given checking ex-
tensions over it. (Section 4 describes propagation in more
detail.)
Checking extensions are written in a system based on the
MC checking framework [1, 8]. Our variant is written in
the ML programming language rather than C, but much of
the features are the same: extensions match on program
features they care about, potentially associating these fea-
tures with states (such as “tainted”), and are applied in a
ﬂow-sensitive, inter-procedural manner down all control ﬂow
paths [4]. Because of the close similarities and the fact that
the prior system has been amply documented this paper
takes the checking system as a given and instead focuses on
the annotation language and the propagation algorithm.
To illustrate how the pieces ﬁt together, consider a checker
that enforces the property “operating system code should
not dereference user (i.e., tainted) pointers.” (For concrete-
ness, we will refer to this example repeatedly in the sub-
sequent sections.)
Instead operating system programmers
must access the pointed-to data using special “paranoid”
routines (e.g. copyin and copyout on BSD-derived sys-
tems). A single unsafe dereference can crash the system
or, worse, give a malicious party control of it. A checker
annot def ::= ’annot’ annotation ’prop’ proptype
’annotates’ binding;
proptype ::= ’FNPTR’ | ’CALLCHAIN’
| ’(’ proptype ’)’
| ’(’ proptype ’|’ proptype ’)’
;
binding ::=
’$variable’ | ’$parameter’ | ’$ret’ | ’$function’
| ’(’ binding ’)’
| ’(’ binding ’,’ binding ’)’
;
Figure 2: Annotation declaration grammar.
for this rule would deﬁne a set of annotations for specify-
ing: (1) which variables, parameters and ﬁelds are tainted,
(2) which functions produce tainted values and (3) which
variables or ﬁelds indicate kernel “back-doors” (where an
ostensibly “tainted” pointer is actually safe and can be ex-
plicitly dereferenced). Programmers would then apply these
annotations to their source code, both manually and possi-
bly also using a programmatic-annotation, such as one that
automatically marks all pointers passed in through system
calls as tainted. MECA would then propagate these anno-
tations throughout the source code, statistically infer addi-
tional ones, and run the checker.
3. ANNOTATION LANGUAGE
This section gives an overview of our annotation language.
3.1 Syntax and grammar
Annotation keywords are deﬁned by the extension writer.
They must be declared before use; typically they reside in a
header ﬁle that is included by the checked code. Undeﬁned
annotations are ﬂagged as errors to catch misspellings and
mismatches between annotations and extensions. Annota-
tions appear in comments. Programmers place these where
appropriate. Our system applies an extension to each pro-
gram point (e.g., statement, expression) down every path in
the source code and the extension searches for annotations
and constructs it cares about.
A simple declaration of a “tainted” annotation would be
as follows:
annot tainted annotates ($variable)
This declaration speciﬁes that the tainted annotation can
be used to bind to any variable (“$variable”), where vari-
able includes the actual value returned by a function, as
well as the more obvious parameters and global and local
variables. Figure 3 shows some sample uses.
Figure 2 gives the general annotation declaration. The
speciﬁer “binding” speciﬁes how the annotation should bind
in a use, and is used to resolve ambiguities. In the example
above, we could have simply used the C language default
bindings of type-qualiﬁer to declarations, but this causes
diﬃculties when annotations are more than just simple type
qualiﬁers. Programmers can specify that annotations bind
to variables in general (as above), to functions ($function),
to parameters ($parameter) or to return values ($ret). To
specify that an annotation binds to more than one type,
the programmer gives a comma-delimited list. However,
some combinations are either redundant or conﬂict and will
/*@ tainted */ int *p; // p is a tainted variable.
struct foo {
/*@ tainted */ int *p; // the ﬁeld p is tainted
};
// foo takes a tainted parameter p and returns
// a tainted pointer.
/*@ tainted */ int *foo(/*@ tainted */int *p);
// neither dst nor src can be tainted.
void memcpy( /*@ !tainted */void *dst,
/*@ !tainted */ void *src, unsigned nbytes);
// the data copied into dst is tainted, and the
// pointer src is tainted. Label POST tells the
// system that the content of dst is tainted only
// the call to copyin
void copyin(/*@ POST:tainted (*dst) */ void *dst,
/*@ tainted */ void *src, unsigned len);
Figure 3:
checker in Section 7.
Sample Annotations for the tainted
// implied: p is tainted
void *f root(/*@ tainted */ void *p);
// error: "deref of tainted pointer"
// p becomes tainted because of f root
void g root(void *p) {
*p;
}
struct ops { void (*fptr)(void *p); };
struct ops f = { f root };
struct ops g = { g root };
Figure 4: A contrived example to illustrate FNPTR
annotation propagation. The implied annotation of
f root propagates across the function pointer that
f root is assigned to, tainting the parameter p passed
to g root.
be ﬂagged. Since $variable includes $ret, “($variable,
$ret)” would be a redundant combination. Since annota-
tions can only bind to the return type or the function def-
inition itself, “($function, $ret)” would be an error. In
general, $variable and $function make up the majority of
all declarations.
The prop part of the declaration allows the extension
writer to specify two built-in propagation methods: LOCAL
and FNPTR. LOCAL indicates that the analysis is solely intra-
procedural; by default our analysis is inter-procedural and
formal parameter annotations are propagated to callers. FNPTR
propagates annotations across function pointer assignments:
if one function has an annotation, and it is assigned to a
function pointer fp, then the annotation is propagated to
all other functions assigned to the same function pointer.
Figure 4 gives a contrived example of how such propagation
works.
3.1.1 Binding annotations together
Often a checker needs to express relationships between
multiple program objects or between diﬀerent annotations.
The stylized way to do this is for the checker to deﬁne an
annotation that takes multiple arguments, where the objects
to be bound together are placed in the argument slots. For
gen annotation := label annotation args;
args ::= /* empty */
| ’(’ arg list ’)’
;
| arg ’,’ arg
;
arg list ::= arg
arg ::= gen annotation | C−expr
;
label := /* empty */
| ’PRE:’ | ’POST:’
;
struct foo {
/* Non-zero value implies struct data comes from the user. */
int user;
/* If user is unknown mark the ﬁeld
/*@ user != 0 | | unknown ==> tainted*/ void *conservative;
as tainted, otherwise mark as untainted. */
/* If user is non-zero mark ﬁeld as tainted,
otherwise do not annot. */
/*@ user != 0 ==> tainted */ void *non conservative;
};
Figure 5: Grammar for the fully-general annotation.
Figure 6: Example of structure ﬁeld annotation cou-
pled with the use of the unknown keyword.
example, a buﬀer overﬂow checker could deﬁne a
“set length” annotation that speciﬁes that an integer binds
to a pointed-to object. The programmer could then deﬁne a
“check access” annotation to specify that the length ﬁeld
to memcpy binds both the dst and src parameters:
/*@ check access(src, len) check access(dst, len) */
void memcpy(void *dst, void *src, unsigned len);
Another possibility is that the returned value of malloc
is bound by its size parameter:
/*@ set length($ret, sz) */
void *malloc(unsigned sz);
The check access annotation will be matched by the buﬀer-
overﬂow checker, which extracts the two arguments and uses
the given bound to check them.
Figure 5 gives the more general grammar for these anno-
tations. The annotation is a comma-separated list contain-
ing zero or more elements. Each element can be a checker-
deﬁned annotation or a C expression (C-expr). There are
two restrictions on the C-expression. First it cannot be a
compound expression such as “(x, y).” Second, the expres-
sion must be able to be parsed by the C compiler at this
point. Besides these restrictions, the annotations can refer
to arbitrary program values: function addresses, variables,
general arithmetic expressions, and macros. Additionally,
the expression can refer to ﬁeld names and parameters be-
fore they are deﬁned, though they cannot refer to undeﬁned
variables. Annotations for functions or parameters can be
labeled with “PRE” or “POST,” which means the annotations
are bound to the targets before or after the function call. By