### Notice on Patched and Vulnerable Versions

- **CVE-2017-13209**: This vulnerability has been patched, resulting in a lower false positive rate for the patched versions compared to the vulnerable ones.
- **CVE-2018-9412**: This vulnerability remains unpatched. Figure 7 illustrates that the false positive rate for the patched version is higher than that of the vulnerable version.

### Analysis of CVE-2017-13209 in Android Things

- **Table VI** indicates that the vulnerable function in Android Things for CVE-2017-13209 results in 0 true positives and 1 false negative.
- This outcome is due to the fact that CVE-2017-13209 has been patched in Android Things. Consequently, when PATCHECKO uses the vulnerable function, the deep learning model may fail to identify the correct target function.
- Intuitively, it is reasonable that a known vulnerability discovery might miss a patched function as a vulnerability.

### Dynamic Analysis Engine

- The primary goal of the dynamic analysis engine is to reduce the set of candidate functions.
- **Tables VI and VII** show the results for the dynamic analysis engine, which include only the Execution and Ranking metrics.
- To minimize the number of candidate functions requiring dynamic feature profiling, PATCHECKO validates the candidate functions using the concrete input of the vulnerable functions.
- For example, after deep learning, CVE-2018-9412 still has 252 candidate functions. By validating these with different inputs, only 38 candidate functions remain, making the process more manageable.
- Finally, PATCHECKO calculates the function similarity score. Tables VI and VII demonstrate that PATCHECKO can rank the target function in the top 3 candidates 100% of the time, except for CVE-2017-13209, where the deep learning model already missed the target function.

### Patch Detection

- Based on the differential signature, semantic static features, and the results from Tables VI and VII, PATCHECKO generates the final results in Table VIII.
- There is only one missed classification for the patched version of CVE-2018-9470, attributed to the minor difference between the vulnerable and patched versions, which is a single integer change.

### Limitations

- If the difference between a vulnerable function and a patched function is very minor, our similarity measures may not detect the difference, as seen in CVE-2018-9470.
- The missed classification occurs because the static and dynamic features do not represent the subtle differences between the vulnerable and patched code.
- A potential solution would be to incorporate more fine-grained features from known vulnerability exploits, but this assumes the availability of such exploits and involves a trade-off in generalizability.

### Processing Time

- **Tables VI and VII** list the processing times for deep learning detection and dynamic analysis for both vulnerable and patched functions.
- The deep learning detection phase takes approximately 3 seconds on average.
- The dynamic analysis execution time varies based on the number of candidate functions and the number of execution environments (program states) to replicate.
- For instance, CVE-2017-13208 requires less time than CVE-2017-13182 due to the significant difference in the number of candidate functions (72).
- PATCHECKO currently parallelizes the execution environment testing for all candidate functions, and future work will focus on further reducing the dynamic analysis processing time by parallelizing the candidate function execution in each environment.

### Related Work

- We briefly survey related work, focusing on approaches that use code similarity for known vulnerabilities without access to source code.
- **Programming Language-Based Solutions**: Traditional approaches often use matching algorithms for control flow graphs (CFGs). Examples include BinDiff, which matches nodes based on syntax, and methods that use expression trees and edit distances.
- **Machine Learning-Based Solutions**: Recent approaches leverage deep learning for graph embedding and binary similarity checking. These methods aim to reduce the number of candidate functions and improve accuracy.

### Conclusion

- **PATCHECKO** is a vulnerability assessment framework that combines deep learning and hybrid static-dynamic binary analysis to perform cross-platform binary code similarity analysis.
- It accurately identifies known vulnerabilities without source code access, with an accuracy of over 93%.
- Dynamic analysis significantly reduces the number of candidate functions, eliminating false positives, and PATCHECKO ranks the correct matches among the top 3 outcomes 100% of the time.
- The differential engine distinguishes between vulnerable and patched functions with an accuracy of 96%.

### Acknowledgments

- We thank the Office of Naval Research (ONR) and the National Science Foundation (NSF) for their support of our project.