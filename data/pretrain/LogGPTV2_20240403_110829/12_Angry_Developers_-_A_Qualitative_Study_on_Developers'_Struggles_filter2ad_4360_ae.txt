browser decides that in case of CSP and then forbids it [...] but
when I then come to cross-origin resource sharing, that this is then
the server, [...] and teaching that to my customers is always diffi-
cult, too." (P9). Another misunderstanding of CSPs capabilities is
that three of our participants only explained that if CSP would be
present on the attacked page, it would prohibit the data exfiltration
to an attacker controller server, but not mentioned that the actual
code execution is also forbidden. The full results of our drawing
task analysis are available in Appendix H. Notably, one participant
did not draw an XSS attack, but rather a CSRF attack.
Key Takeaways: The server-side variants of XSS are far
more prominent in the developer’s mindset. Two even had
the misconceptions that XSS is a server-side problem and
concluded that CSP is, therefore, enforced on the server.
5.3 Reflections on Methodology
Due to the extensive pre-study, we eliminated any application bugs
that could have resulted in problems during the programming task.
In general, the coding task achieved the intended goal. Participants
revealed strategies, information sources, and roadblocks only dur-
ing the coding task, either because it resulted in additional concepts
or shed light on problems that the participant forgot about during
the interview but then remembered during the coding task. The
way how the coding task was performed revealed different pros
and cons. While the remote-control process drastically reduced the
time required for the setup, it seemed to be more exhausting for
the participants. This is because they needed to control a foreign
system, not set up to their liking. Moreover, depending on the net-
work connection, remote control incurred lags. On the other hand,
natively running our application requires significant effort to set
up, but it also resulted in the participants being able to work as
they wish. Conducting the coding task using the provided docker
files has shown to be a good tradeoff between the aforementioned
options. The setup was not complicated because the docker image
only required a few minutes (usually less than three) to build. Be-
cause the files were on the participant’s machines, it was possible
to use their coding setup for code changes. However, one drawback
of this approach was that changes to the code required a docker
rebuild, causing a slight delay of few seconds (less than 20). While
in theory, we could have also mounted the directory directly into
the docker to allow live updates. However, this would require ad-
ditional packages to allow for auto-reload and incurs the risk of
inconsistencies between the developer’s view and the docker-run
system. Moreover, some participants changed the Web server config
through nginx, which would have required a reload in either case.
Similar to the results of the coding task, the drawing task helped
us to enrich our data and get a deeper understanding of the partic-
ipant’s mindset about XSS and CSP. Some of the misconceptions
regarding CSP and the underlying threat model would not have
been uncovered without the drawing task, which is why we rec-
ommend this addition to a study like ours. Ten participants used
Zoom’s annotate feature to draw, which in some cases were not
present in the recordings. Fortunately, we made screenshots of the
drawings during the interview, and therefore we did not lose any
data due to that problem. Using diagrams.net for the drawing task
required one or two minutes of setup, but seems to be easier for
the participants and was present in both recordings.
Only a small fraction of Web sites actually deploys a CSP. Thus,
recruiting Web developers of real-world applications that have dealt
with CSP before is even more challenging than recruiting devel-
opers in general. Not only is our targeted group limited and hard
to reach, in addition to that, they are also educated in both Web
development and IT-Security. This high level of education was the
reason why we decided to compensate the participation with a 50€
voucher for their time. In total 30 possible participants completed
the screening survey. The first recruitment attempt, to send bulk
emails to the top sites that deployed CSP, resulted in zero responses.
Thus, we continued with the attempt to use the OWASP as a trusted
third party to advertise our study. After this campaign 13 potential
participants completed our survey. We invited all of those partici-
pants to the online interview, but we only received answers from
six of them even after two additional reminders. The next idea
to increase the number of potential participants was to cold-call
Web development companies from our country. This attempt again
resulted in zero responses. Thus, we decided to try out recruitment
via LinkedIn advertisement, which was seemingly successful with
eleven new entries in our database. However, we had indications
that ten of those were only bots that entered data in the survey as
a result of the LinkedIn advertisement. Those bots not only entered
Session 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3096bogus values in the fields of the survey but also supplied emails of
randomly concatenated words and numbers. Nevertheless, we send
an invitation email to three of those because they entered occupa-
tions similar to Web developer but got no response to that email. We
also invited one non-bogus entry, but this potential participant did
not reach back to us even after the reminders. Right before the ad-
vertisement campaign, two colleagues from our research institution
gave a talk at an OWASP event. At the end of their talk, they also
advertised our study, which resulted in five new database entries,
from which four actually took part in the interview. Notably, the
OWASP event resulted in one additional participant, who did not
take part in the survey but participated in the interview. In addition
to that, one participant that completed both survey and interview
was recruited via word-of-mouth propaganda. Notably, we did not
ask the participants from where they found out about our study.
Thus, the numbers above are the results of temporal coherence
between the recruitment procedure and the participant completing
the survey. In total 20 (30-10 bots) people finished the survey, and
12 people participated in our interview, including the drawing and
coding task. While we tried several ways to recruit those, we must
admit that using a trusted third party, in our case the OWASP, for
recruitment surpassed all other recruitment procedures.
5.4 Limitations
Our work has three main limitations that are either tied to the re-
cruitment process or the methods we used to gather our data. First,
our sample might be biased towards security-aware developers,
given our main recruiting path through the OWASP. We invested a
lot of time in various recruitment efforts, including contacting web
development companies, sending emails to websites with CSP, and
advertising on LinkedIn. However, it proved to be very difficult to re-
cruit specialized developers. Yet, as depicted in Section 4.1 only half
of our participants reported having a security background. Second,
we acknowledge the limitations that interviews entail. Although
we made every effort to build rapport and ensure that participants
freely and willingly recounted their experiences, we cannot guaran-
tee that no concepts were missing or misstated. This portion of the
data is based on the recollection of the participants, and it is possi-
ble that portions may have been forgotten, intentionally omitted,
or misremembered. For this reason, we decided to supplement the
interview with the coding task. Nevertheless, we do not claim the
completeness of the interview results. Third, the coding task was
likely biased due to its artificial setting. To mitigate this, we tried to
make the coding task as pleasant as possible for the participants by
offering three popular programming languages and various setup
options. To avoid that participants feel pressured, we clarified that
we do not rate any of their solutions regarding their correctness
but are only interested in the process of how they approached the
problem and developed the CSP.
6 CONCLUSION
In this paper, we present the first qualitative study involving 12
real-world Web developers to evaluate the usability of the CSP.
Throughout our interview that involved a drawing and coding task,
we investigate the participant’s mindset regarding XSS and uncover
the reason behind the usage of some insecure CSP practices as well
as strategies and motivations that interact with the deployment
procedure of a CSP. The motivation to deploy CSP is, in the best
case, the incentive to mitigate XSS; in the worst case, it is only a
checkbox that arose from a penetration test. We shed light on dif-
ferent kinds of roadblocks for CSP deployment. For the roadblocks
based on knowledge gaps and conceptual issues, we argue that
better information sources can mitigate this problem. However, the
technical roadblocks require that the browser vendors finally need
to agree upon how CSP should be implemented, how error mes-
sages should look like, and introduce warnings and information for
poorly configured CSP in the developer console. Those steps would
reduce the uncertainty of many developers and reduce the impact
of lousy information sources on the deployment procedure to ease
the deployment procedure. Our participants tend to use the old way
of allowing scripts via their hostname, but some also use hashes
or nonces to allow scripts, while usage of the latter is focused on
inline code. Also, tools for generating an initial CSP, evaluating the
policy, or analyzing the violation reports seem common for CSP
deployment. In addition to that, we also discuss our methodological
choices and share the lessons we learned from those, such as the
success or failure of certain recruitment techniques. We believe
the insights highlight that secure-but-complex technology on the
Web leads to confusion and lacking deployment. CSP is arguably
one the most complex mechanism in Web security, but we hope
our insights will inform the design process of new mechanisms to
avoid such problems.
ACKNOWLEDGEMENTS
We want to thank the reviewers for their insights and construc-
tive feedback regarding our paper’s presentation. Furthermore, we
want to thank our colleagues Marius Steffens, Carolyn Guthoff,
and our student helpers Moritz Wilhelm, Daniel Emmel, Simon
Anell, Priyasha Chatterjee, Xin Yun, Richard Bergs, Florian Ro-
mann, and Tim Recktenwald for their feedback during the prestudy
and their assistance in the transcription process. Finally, we would
like to thank all of our participants for their time and insights that
ultimately made this project possible.
REFERENCES
[1] Vishal Arghode. Qualitative and quantitative research: Paradigmatic differences.
Global Education Journal, 2012(4), 2012.
rfc6454.txt, 2011.
[2] A. Barth. RFC 6454: The Web Origin Concept. Online at https://www.ietf.org/rfc/
[3] A Blandford, D Furniss, and S Makri. Introduction: Behind the scenes. 2016.
[4] Chromium Blog. Protecting users from insecure downloads in google chrome.
https://blog.chromium.org/2020/02/protecting-users-from-insecure.html, .
[5] Mozilla Security Blog. Firefox 83 introduces https-only mode. https://blog.mozilla.
org/security/2020/11/17/firefox-83-introduces-https-only-mode/, .
[6] Virginia Braun and Victoria Clarke. Using thematic analysis in psychology.
Qualitative research in psychology, 3(2):77–101, 2006.
[7] Stefano Calzavara, Alvise Rabitti, and Michele Bugliesi. Content security prob-
lems?: Evaluating the effectiveness of content security policy in the wild. In CCS,
2016.
[8] Stefano Calzavara, Sebastian Roth, Alvise Rabitti, Michael Backes, and Ben Stock.
A tale of two headers: a formal analysis of inconsistent click-jacking protection
on the web. In 29th {USENIX} Security Symposium ({USENIX} Security 20), pages
683–697, 2020.
[9] Stefano Calzavara, Tobias Urban, Dennis Tatang, Marius Steffens, and Ben Stock.
Reining in the web’s inconsistencies with site policy. In NDSS, 2021.
[10] John L Campbell, Charles Quincy, Jordan Osserman, and Ove K Pedersen. Cod-
ing in-depth semistructured interviews: Problems of unitization and intercoder
reliability and agreement. Sociological Methods & Research, 42(3):294–320, 2013.
Session 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3097[11] content-security policy.com. Csp: Hashing. https://content-security-policy.com/
[12] content-security policy.com. Csp: Nonces. https://content-security-policy.com/
hash/, .
nonce/, .
[13] MITRE Common Weakness Enumeration (CWE). Cve search for security vulner-
abilities (cross site scripting (xss)). https://www.cvedetails.com/vulnerability-
list.php?vendor_id=0&product_id=0&version_id=0&page=15&hasexp=0&
opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=1&opdirt=
0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=
0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=19379&sha=
e3bb5586965f5a13bfaa78233a10ebc3f9606d12.
[14] diagrams.net. Diagrams. https://www.diagrams.net/.
[15] Adam Doupé, Weidong Cui, Mariusz H Jakubowski, Marcus Peinado, Christopher
Kruegel, and Giovanni Vigna. dedacota: toward preventing server-side xss via
automatic code and data separation. In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security, pages 1205–1216, 2013.
[16] TeamViewer Germany GmbH. Teamviewer. https://www.teamviewer.com/.
[17] Google. Withgoogle: Content security policy. https://csp.withgoogle.com/docs/
strict-csp.html.
[18] Peter Leo Gorski, Luigi Lo Iacono, Stephan Wiefling, and Sebastian Möller. Warn
if secure or how to deal with security by default in software development?. In
HAISA, pages 170–190, 2018.
[19] Daniel Hausknecht, Jonas Magazinius, and Andrei Sabelfeld. May i?-content
security policy endorsement for browser extensions. In International Conference
on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 261–
281. Springer, 2015.
[20] Ben Hayak. Same Origin Method Execution (SOME). Online at http://www.
benhayak.com/2015/06/same-origin-method-execution-some.html, 2015.
[21] Mario Heiderich, Marcus Niemietz, Felix Schuster, Thorsten Holz, and Jörg
Schwenk. Scriptless attacks: stealing the pie without touching the sill. In Pro-
ceedings of the 2012 ACM conference on Computer and communications security.
ACM, 2012.
[22] Mario Heiderich, Jörg Schwenk, Tilman Frosch, Jonas Magazinius, and Edward Z
Yang. mxss attacks: Attacking well-secured web-applications by using innerhtml
mutations. In ACM SIGSAC conference on Computer & communications security.
ACM, 2013.
[23] Iulia Ion, Niharika Sachdeva, Ponnurangam Kumaraguru, and Srdjan Čapkun.
Home is safer than the cloud! privacy concerns for consumer cloud storage. In
Proceedings of the Seventh Symposium on Usable Privacy and Security, pages 1–20,
2011.
[24] Internet Security Research Group (ISRG). Let’s encrypt. https://letsencrypt.org/.
[25] Markus Jakobsson, Zulfikar Ramzan, and Sid Stamm. Javascript breaks free. http://
citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.3195&rep=rep1&type=pdf .
[26] Burke Johnson and Larry Christensen. Educational research: Quantitative, quali-
tative, and mixed approaches. Sage, 2008.
[27] Ruogu Kang, Laura Dabbish, Nathaniel Fruchter, and Sara Kiesler. “my data
just goes everywhere:” user mental models of the internet and implications for
privacy and security. In Eleventh Symposium On Usable Privacy and Security
({SOUPS} 2015), pages 39–52, 2015.
[28] Amit Klein. Dom based cross site scripting or xss of the third kind. http:
//www.webappsec.org/projects/articles/071105.shtml, 2005.
[29] Klaus Krippendorff. Content analysis: An introduction to its methodology. Sage,
London, 2004.
[30] Katharina Krombholz, Karoline Busse, Katharina Pfeffer, Matthew Smith, and
Emanuel von Zezschwitz. "If HTTPS Were Secure, I Wouldn’t Need 2FA"-End
User and Administrator Mental Models of HTTPS. IEEE Security & Privacy, 2019.
[31] Thomas D LaToza, Gina Venolia, and Robert DeLine. Maintaining mental models:
a study of developer work habits. In Proceedings of the 28th international conference
on Software engineering, pages 492–501, 2006.
[32] Jonathan Lazar, Jinjuan Heidi Feng, and Harry Hochheiser. Research methods in
human-computer interaction. Morgan Kaufmann, 2017.
[33] Sebastian Lekies, Ben Stock, and Martin Johns. 25 million flows later: Large-scale
detection of dom-based xss. In CCS, 2013.
[34] Sebastian Lekies, Krzysztof Kotowicz, Samuel Groß, Eduardo A Vela Nava, and
Martin Johns. Code-reuse attacks for the web: Breaking cross-site scripting
mitigations via script gadgets. In ACM SIGSAC Conference on Computer and
Communications Security (CCS). ACM, 2017.
[35] Calendly LLC. Calendly. https://calendly.com/.
[36] Alena Naiakshina, Anastasia Danilova, Christian Tiefenau, and Matthew Smith.
Deception task design in developer password studies: Exploring a student sample.
In Fourteenth Symposium on Usable Privacy and Security ({SOUPS} 2018), pages
297–313, 2018.
[37] Alena Naiakshina, Anastasia Danilova, Eva Gerlitz, and Matthew Smith. On
conducting security developer studies with cs students: Examining a password-
storage study with cs students, freelancers, and company developers. In Proceed-
ings of the 2020 CHI Conference on Human Factors in Computing Systems, pages
1–13, 2020.
[38] Mozilla Development Network. Csp: frame-ancestors.
https://developer.
mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-
ancestors.
[39] Open Web Application Security Project (OWASP). Owasp top 10 web applica-
tion security risks 2017. https://owasp.org/www-project-top-ten/2017/A7_2017-
Cross-Site_Scripting_(XSS).
[40] Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou, Yan Chen, and Tingzhe Zhou.
Cspautogen: Black-box enforcement of content security policy upon real-world
websites. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, pages 653–665, 2016.
[41] Phil Ringnalda. Getting around IE’s MIME type mangling. http://weblog.
philringnalda.com/2004/04/06/getting-around-ies-mime-type-mangling.
[42] David Ross. Happy 10th birthday cross-site scripting. Online at https://blogs.msdn.
microsoft.com/dross/2009/12/15/happy-10th-birthday-cross-site-scripting/, 2009.