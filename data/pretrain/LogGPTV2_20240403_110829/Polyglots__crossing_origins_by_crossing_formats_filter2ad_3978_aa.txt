title:Polyglots: crossing origins by crossing formats
author:Jonas Magazinius and
Billy K. Rios and
Andrei Sabelfeld
Polyglots: Crossing Origins by Crossing Formats
Jonas Magazinius
Chalmers University of
Technology
Gothenburg, Sweden
PI:EMAIL
Billy K. Rios
Cylance, Inc.
Irvine, CA, USA
Andrei Sabelfeld
Chalmers University of
Technology
Gothenburg, Sweden
PI:EMAIL
ABSTRACT
In a heterogeneous system like the web, information is ex-
changed between components in versatile formats. A new
breed of attacks is on the rise that exploit the mismatch
between the expected and provided content. This paper
focuses on the root cause of a large class of attacks: poly-
glots. A polyglot is a program that is valid in multiple pro-
gramming languages. Polyglots allow multiple interpreta-
tion of the content, providing a new space of attack vec-
tors. We characterize what constitutes a dangerous format
in the web setting and identify particularly dangerous for-
mats, with PDF as the prime example. We demonstrate
that polyglot-based attacks on the web open up for insecure
communication across Internet origins. The paper presents
novel attack vectors that inﬁltrate the trusted origin by syn-
tax injection across multiple languages and by content smug-
gling of malicious payload that appears formatted as benign
content. The attacks lead to both cross-domain leakage and
cross-site request forgery. We perform a systematic study
of PDF-based injection and content smuggling attacks. We
evaluate the current practice in client/server content ﬁlter-
ing and PDF readers for polyglot-based attacks, and report
on vulnerabilities in the top 100 Alexa web sites. We identify
ﬁve web sites to be vulnerable to syntax injection attacks.
Further, we have found two major enterprise cloud storage
services to be susceptible to content smuggling attacks. Our
recommendations for protective measures on server side, in
browsers, and in content interpreters (in particular, PDF
readers) show how to mitigate the attacks.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
Keywords
Web Security; Polyglot; Injection; Cross-domain
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516685.
1.
INTRODUCTION
Web application security is concerned with protecting in-
formation as it is manipulated by web applications. This
is an important area because “attacks against web applica-
tions constitute more than 60% of the total attack attempts
observed on the Internet” [11].
Internet origins at stake.
The diﬀerent trust domains correspond to diﬀerent In-
ternet origins. A major goal for web application security
is preventing undesired communication across origins. With
the goal of separating information from the diﬀerent origins,
today’s browsers enforce the same-origin policy (SOP). SOP
only allows access between two documents if they share the
origin. In addition, a document can only directly communi-
cate with the server from which it originates.
Classical cross-domain attacks.
There are several classes of cross-domain attacks that cir-
cumvent SOP. The OWASP top 10 list [10] places both injec-
tion and cross-site scripting (XSS) attacks among the three
top security risks for web applications. A classical XSS at-
tack injects a malicious script in the context of a trusted
origin. This opens up opportunities for leaking sensitive in-
formation that users might have in the context of the trusted
origin such as cookies, personal information, and session to-
kens.
XSS attacks are relatively well understood by researchers
and developers [17]. Known defenses include various ﬂavors
of sanitization on server side and the content security pol-
icy [12] (CSP) on client side. Sanitization is often performed
by the server to ﬁlter possibly malicious input data before it
is used in the generated web pages. Content security policy
puts requirement on the structure of the document and the
origins of the scripts that are included by web pages.
Crossing origins by crossing formats.
This paper focuses on a new breed of attacks and its root
cause: polyglots. A polyglot is a program that is valid in
multiple programming languages.
In a heterogeneous sys-
tem like the web, information is exchanged between compo-
nents in versatile formats. This gives rise to attacks that
exploit the mismatch between the expected and provided
content. Polyglots allow multiple interpretation of the con-
tent, providing a new space of attack vectors. An attacker
can use a malicious polyglot to inﬁltrate a vulnerable origin.
Once inﬁltrated, the polyglot is embedded from within the
attacker’s web site, such that the browser is coerced to inter-
753pret the polyglot in an unexpected context, e.g., a plug-in.
According to the SOP, content loaded in a plug-in is con-
sidered to belong to the origin from which the content was
requested. Thus, the polyglot is allowed to communicate
with the vulnerable origin. A victim, authenticated in the
vulnerable origin, who visits the attacker’s web site will trig-
ger the malicious polyglot. This allows the polyglot to abuse
the credentials of the victim in its communication with the
vulnerable service. The scenario is explained in detail in
Section 2.3, where we present novel attack vectors that are
based on (i) syntax injection that operate across multiple
languages and on (ii) content smuggling that supply ma-
licious payload that appears formatted as benign content.
The attacks lead to both cross-domain leakage and cross-
site request forgery.
The existing defense mechanisms fall short to prevent these
attacks from achieving cross-domain communication. On
the server side, sanitization is speciﬁc to the target language
of the web application. Sanitizing unexpected formats is
typically not considered. On the client side, CSP has no ef-
fect unless the content is interpreted as HTML. This opens
up opportunities for attacks that are based on other formats.
The ﬁrst steps in exploiting formats in the context of the
web have been taken by researchers. Two noteworthy ex-
amples are GIFAR [4] and cross-origin CSS attacks [7] (Sec-
tion 6 discusses further related work). GIFAR is based on
polyglots that combine the GIF and JAR (Java archive)
formats. The former is used as benign and the latter as
malicious to bypass SOP. Cross-origin CSS attacks inject
fragments of CSS code into an existing web page to extract
information from the existing web page.
Generalizing polyglot attacks.
The paper is the ﬁrst to present a generalized description
of polyglot attacks. We identify the necessary ingredients
for polyglot attacks. We characterize what constitutes a
dangerous format in the web setting and identify particularly
dangerous formats, with PDF as the prime example. We
demonstrate that polyglot-based attacks on the web open
up for insecure communication across Internet origins.
PDF polyglots.
Having identiﬁed PDF as a particularly dangerous format,
we perform a novel in-depth study of PDF-based injection
and content smuggling attacks. Our ﬁndings expose new
attack vectors, which we demonstrate both conceptually and
by proof-of-concept web pages.
Evaluation and mitigation.
We evaluate the current practice in client/server content
ﬁltering and PDF readers for polyglot-based attacks, and
report on vulnerabilities in the top 100 Alexa web sites. Un-
fortunately, several major web sites do not protect against
polyglot attacks. Five out of the top 100 Alexa web sites
are vulnerable to syntax injection attacks. In addition, we
have found two major enterprise cloud storage services to be
susceptible to content smuggling attacks. Our recommenda-
tions for protective measures on server side, in browsers, and
in content interpreters (such as PDF readers) show how to
mitigate the attacks.
Overview.
The paper is organized as follows. Section 2 explains the
concept of crossing origins by crossing formats, identiﬁes
necessary ingredients, and provides attack scenarios. Sec-
tion 3 focuses on the PDF format and describes concrete
vulnerabilities and attacks. Section 4 evaluates the current
practice in client/server content ﬁltering and PDF readers
and report on vulnerabilities in the top 100 Alexa web sites.
Section 5 suggests mitigation for servers, clients, and PDF
readers. Section 6 discusses the related work. Section 7
concludes and outlines future work.
2. CROSSING ORIGINS AND FORMATS
This section describes how formats can be crossed and
how that can be abused to cross origins by circumventing
the same-origin policy. We describe cross-origin information
leaks, generalize the problem of crossing formats to polyglots,
and present the characteristics of a malicious polyglot. From
that we derive two attack vectors and show how previous
work on the subject relate to these vectors.
2.1 Crossing origins
By crossing origins we mean being able to request and
access content across domains, which is normally restricted
under the same-origin policy. Recall that SOP only allows
two documents accessing each others’ content and resources
if they share the origin. Similarly, a document can only di-
rectly communicate with the server from which it originates.
This is not to be confused with cross-origin resource sharing
(CORS) [16], which is an intentional relaxation of SOP.
While there are exceptions to this policy, e.g., images,
scripts, and style sheets are allowed to be included as re-
sources across origins, access to these resources is restricted
to prevent information leaks. As an example, the includ-
ing document is prevented from accessing the image data of
images loaded across origins.
Not all elements are as carefully restricted from informa-
tion leaks as images. Scripts loaded across origins become
part of the document and inherit the origin of the includ-
ing document, which allows the script to communicate with
the server from which the document originates. Such scripts
are also able to interact with the document, e.g. by adding
nodes, which in turn require new content to be requested.
Since these requests are not restricted by the SOP, this cre-
ates a side channel that permits cross-origin information
leakage. At the same time, the including document is pre-
vented from inspecting the source of the script and can only
observe the public side-eﬀects that the script produce as it
is executed.
Other examples of problematic elements include the object
and embed tags. These tags allow inclusion of resources that
may require a plug-in to run. The plug-in is selected based
on the MIME-type of the content, but because the server
delivering the content might not be able to determine its
format, the tags allow a developer to set the type attribute
to guide the browser in which plug-in to run. When the type
attribute is used, the corresponding plug-in is run regardless
of the MIME-type provided by the server. In the event that
the provided MIME-type do not match that for which the
plug-in is designed, e.g., text/html for a PDF plug-in, it is up
to the plug-in to respond to the content it is served. Known
methods of handling MIME-types, such as content-sniﬃng,
are eﬀective in this situation, but they have to be employed
754by each and every plug-in. Most plug-ins will disregard the
MIME-type of the content and attempt to parse it. As with
images, the content handled by the plug-in is executed in the
origin it was served from. This implies that the containing
page is restricted from directly accessing the content handled
by the plug-in, and that the content can communicate freely
with the origin it was loaded from. However, a number of
plug-ins provide an API for interaction between the plug-
in and the document. The browsers are forced to rely on
the plug-ins to employ correct security measures. Section 4
shows that even state-of-the-art plug-ins fail to properly do
so, emphasizing the importance of the issue.
2.2 Crossing formats
A polyglot is perhaps most commonly known as a per-
son who speaks several languages. However, the term is
widely used in several scientiﬁc ﬁelds. In computer science,
a polyglot is a program that is valid in multiple programming
languages. In this paper we use a broader deﬁnition of a pro-
gramming language, not limited to code meant for compila-
tion to machine code or scripting languages, but extended
to any format that requires interpretation before rendering.
A polyglot is composed by combining syntax from two dif-
ferent formats A and B. It leverages various syntactic lan-
guage constructs that are either common between the for-
mats; or constructs that are language speciﬁc but carrying
diﬀerent meaning in each language. To maintain validity
across languages, one must ensure that constructs speciﬁc
to A are not interpreted in the format of B, and vice versa.
This is often accomplished by hiding the language speciﬁc
constructs, in segments interpreted as comments or plain
text of the other format.
Certain languages are particularly suitable for creating
polyglots. These languages either have a lot of constructs
in common with other languages, such as the C language,
or are error tolerant in that the parser ignores that which it
cannot interpret, such as HTML. The latter allows for ample
opportunity to hide any code speciﬁc to format A, as long
as there is no overlap with the syntax of format B.
A malicious polyglot of two formats, A and B, where A
is benign in nature and B contains a malicious payload, is
composed as A||B. he benign format, A, is a widely accepted
format with limited capabilities, but with the opportunity
of hiding arbitrary data, e.g. an image with comment ﬁelds.
The malicious format, B, has additional capabilities, e.g.,
execute scripts or send requests. This kind of polyglot can
be used for malicious purposes when there is a diﬀerence be-
tween the assumed run-time context, and the actual context
it is executed in. In the assumed context A||B is interpreted
as the benign format, A. In the actual context, however,
A||B is coerced to be interpreted as the malicious format,
B, containing the payload.
Even if a veriﬁcation process exists, it will verify that the
content is valid in the assumed context. Due to the nature of
the polyglot, the content is veriﬁed as valid and benign, but