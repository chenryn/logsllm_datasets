---
author: Michał Derkacz
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4840
date: '2020-10-24 09:01:41'
editorchoice: false
excerpt: 我将展示一个简单的示例，来说明如何定义和使用接口，以及如何利用无处不在的 io.Writer 接口。
fromurl: https://ziutek.github.io/2018/04/14/go_on_very_small_hardware2.html
id: 12747
islctt: true
largepic: /data/attachment/album/202010/24/090026to9c9sweyrw9ww37.png
permalink: /article-12747-1.html
pic: /data/attachment/album/202010/24/090026to9c9sweyrw9ww37.png.thumb.jpg
related:
- displayorder: 0
  raid: 11383
- displayorder: 0
  raid: 12782
reviewer: wxy
selector: ''
summary: 我将展示一个简单的示例，来说明如何定义和使用接口，以及如何利用无处不在的 io.Writer 接口。
tags:
- Go
- 极小硬件
thumb: false
title: Go 语言在极小硬件上的运用（二）
titlepic: true
translator: gxlct008
updated: '2020-10-24 09:01:41'
---
![](/data/attachment/album/202010/24/090026to9c9sweyrw9ww37.png)
在本文的 [第一部分](/article-11383-1.html) 的结尾，我承诺要写关于接口的内容。我不想在这里写有关接口或完整或简短的讲义。相反，我将展示一个简单的示例，来说明如何定义和使用接口，以及如何利用无处不在的 `io.Writer` 接口。还有一些关于 反射   reflection 和 半主机   semihosting 的内容。
![STM32F030F4P6](/data/attachment/album/202010/24/090147a1kqxkhkqzxv8mzj.jpg)]
接口是 Go 语言的重要组成部分。如果你想了解更多有关它们的信息，我建议你阅读《[高效的 Go 编程](https://golang.org/doc/effective_go.html#interfaces)》 和 [Russ Cox 的文章](https://research.swtch.com/interfaces)。
### 并发 Blinky – 回顾
当你阅读前面示例的代码时，你可能会注意到一中打开或关闭 LED 的反直觉方式。 `Set` 方法用于关闭 LED，`Clear` 方法用于打开 LED。这是由于在  漏极开路配置   open-drain configuration  下驱动了 LED。我们可以做些什么来减少代码的混乱？让我们用 `On` 和 `Off` 方法来定义 `LED` 类型：
```
type LED struct {
    pin gpio.Pin
}
func (led LED) On() {
    led.pin.Clear()
}
func (led LED) Off() {
    led.pin.Set()
}
```
现在我们可以简单地调用 `led.On()` 和 `led.Off()`，这不会再引起任何疑惑了。
在前面的所有示例中，我都尝试使用相同的  漏极开路配置   open-drain configuration 来避免代码复杂化。但是在最后一个示例中，对于我来说，将第三个 LED 连接到 GND 和 PA3 引脚之间并将 PA3 配置为 推挽模式   push-pull mode 会更容易。下一个示例将使用以此方式连接的 LED。
但是我们的新 `LED` 类型不支持推挽配置，实际上，我们应该将其称为 `OpenDrainLED`，并定义另一个类型 `PushPullLED`：
```
type PushPullLED struct {
    pin gpio.Pin
}
func (led PushPullLED) On() {
    led.pin.Set()
}
func (led PushPullLED) Off() {
    led.pin.Clear()
}
```
请注意，这两种类型都具有相同的方法，它们的工作方式也相同。如果在 LED 上运行的代码可以同时使用这两种类型，而不必注意当前使用的是哪种类型，那就太好了。 接口类型可以提供帮助：
```
package main
import (
    "delay"
    "stm32/hal/gpio"
    "stm32/hal/system"
    "stm32/hal/system/timer/systick"
)
type LED interface {
    On()
    Off()
}
type PushPullLED struct{ pin gpio.Pin }
func (led PushPullLED) On()  {
    led.pin.Set()
}
func (led PushPullLED) Off() {
    led.pin.Clear()
}
func MakePushPullLED(pin gpio.Pin) PushPullLED {
    pin.Setup(&gpio.Config{Mode: gpio.Out, Driver: gpio.PushPull})
    return PushPullLED{pin}
}
type OpenDrainLED struct{ pin gpio.Pin }
func (led OpenDrainLED) On()  {
    led.pin.Clear()
}
func (led OpenDrainLED) Off() {
    led.pin.Set()
}
func MakeOpenDrainLED(pin gpio.Pin) OpenDrainLED {
    pin.Setup(&gpio.Config{Mode: gpio.Out, Driver: gpio.OpenDrain})
    return OpenDrainLED{pin}
}
var led1, led2 LED
func init() {
    system.SetupPLL(8, 1, 48/8)
    systick.Setup(2e6)
    gpio.A.EnableClock(false)
    led1 = MakeOpenDrainLED(gpio.A.Pin(4))
    led2 = MakePushPullLED(gpio.A.Pin(3))
}
func blinky(led LED, period int) {
    for {
        led.On()
        delay.Millisec(100)
        led.Off()
        delay.Millisec(period - 100)
    }
}
func main() {
    go blinky(led1, 500)
    blinky(led2, 1000)
}
```
我们定义了 `LED` 接口，它有两个方法： `On` 和 `Off`。 `PushPullLED` 和 `OpenDrainLED` 类型代表两种驱动 LED 的方式。我们还定义了两个用作构造函数的 `Make*LED` 函数。这两种类型都实现了 `LED` 接口，因此可以将这些类型的值赋给 `LED` 类型的变量：
```
led1 = MakeOpenDrainLED(gpio.A.Pin(4))
led2 = MakePushPullLED(gpio.A.Pin(3))
```
在这种情况下， 可赋值性   assignability 在编译时检查。赋值后，`led1` 变量包含一个 `OpenDrainLED{gpio.A.Pin(4)}`，以及一个指向 `OpenDrainLED` 类型的方法集的指针。 `led1.On()` 调用大致对应于以下 C 代码：
```
led1.methods->On(led1.value)
```
如你所见，如果仅考虑函数调用的开销，这是相当廉价的抽象。
但是，对接口的任何赋值都会导致包含有关已赋值类型的大量信息。对于由许多其他类型组成的复杂类型，可能会有很多信息：
```
$ egc
$ arm-none-eabi-size cortexm0.elf
   text    data     bss     dec     hex filename
  10356     196     212   10764    2a0c cortexm0.elf
```
如果我们不使用 [反射](https://blog.golang.org/laws-of-reflection)，可以通过避免包含类型和结构字段的名称来节省一些字节：
```
$ egc -nf -nt
$ arm-none-eabi-size cortexm0.elf
   text    data     bss     dec     hex filename
  10312     196     212   10720    29e0 cortexm0.elf
```
生成的二进制文件仍然包含一些有关类型的必要信息和关于所有导出方法（带有名称）的完整信息。在运行时，主要是当你将存储在接口变量中的一个值赋值给任何其他变量时，需要此信息来检查可赋值性。
我们还可以通过重新编译所导入的包来删除它们的类型和字段名称：
```
$ cd $HOME/emgo
$ ./clean.sh
$ cd $HOME/firstemgo
$ egc -nf -nt
$ arm-none-eabi-size cortexm0.elf
   text    data     bss     dec     hex filename
  10272     196     212   10680    29b8 cortexm0.elf
```
让我们加载这个程序，看看它是否按预期工作。这一次我们将使用 [st-flash](https://github.com/texane/stlink) 命令：
```
$ arm-none-eabi-objcopy -O binary cortexm0.elf cortexm0.bin
$ st-flash write cortexm0.bin 0x8000000
st-flash 1.4.0-33-gd76e3c7
2018-04-10T22:04:34 INFO usb.c: -- exit_dfu_mode
2018-04-10T22:04:34 INFO common.c: Loading device parameters....
2018-04-10T22:04:34 INFO common.c: Device connected is: F0 small device, id 0x10006444
2018-04-10T22:04:34 INFO common.c: SRAM size: 0x1000 bytes (4 KiB), Flash: 0x4000 bytes (16 KiB) in pages of 1024 bytes
2018-04-10T22:04:34 INFO common.c: Attempting to write 10468 (0x28e4) bytes to stm32 address: 134217728 (0x8000000)
Flash page at addr: 0x08002800 erased
2018-04-10T22:04:34 INFO common.c: Finished erasing 11 pages of 1024 (0x400) bytes
2018-04-10T22:04:34 INFO common.c: Starting Flash write for VL/F0/F3/F1_XL core id
2018-04-10T22:04:34 INFO flash_loader.c: Successfully loaded flash loader in sram
 11/11 pages written
2018-04-10T22:04:35 INFO common.c: Starting verification of write complete
2018-04-10T22:04:35 INFO common.c: Flash written and verified! jolly good!
```
我没有将 NRST 信号连接到编程器，因此无法使用 `-reset` 选项，必须按下复位按钮才能运行程序。
![Interfaces](/data/attachment/album/202010/24/090341dhi6yarzti080yh3.png)
看来，`st-flash` 与此板配合使用有点不可靠（通常需要复位 ST-LINK 加密狗）。此外，当前版本不会通过 SWD 发出复位命令（仅使用 NRST 信号）。软件复位是不现实的，但是它通常是有效的，缺少它会将会带来不便。对于 板卡程序员   board-programmer  来说 OpenOCD 工作得更好。
### UART
UART（ 通用异步收发传输器   Universal Aynchronous Receiver-Transmitter ）仍然是当今微控制器最重要的外设之一。它的优点是以下属性的独特组合：
* 相对较高的速度，
* 仅两条信号线（在  半双工   half-duplex  通信的情况下甚至一条），
* 角色对称，
* 关于新数据的  同步带内信令   synchronous in-band signaling （起始位），
* 在传输  字   words  内的精确计时。
这使得最初用于传输由 7-9 位的字组成的异步消息的 UART，也被用于有效地实现各种其他物理协议，例如被 [WS28xx LEDs](http://www.world-semi.com/solution/list-4-1.html) 或 [1-wire](https://en.wikipedia.org/wiki/1-Wire) 设备使用的协议。
但是，我们将以其通常的角色使用 UART：从程序中打印文本消息。
```
package main
import (
    "io"
    "rtos"
    "stm32/hal/dma"
    "stm32/hal/gpio"
    "stm32/hal/irq"
    "stm32/hal/system"
    "stm32/hal/system/timer/systick"
    "stm32/hal/usart"
)
var tts *usart.Driver
func init() {
    system.SetupPLL(8, 1, 48/8)
    systick.Setup(2e6)
    gpio.A.EnableClock(true)
    tx := gpio.A.Pin(9)
    tx.Setup(&gpio.Config{Mode: gpio.Alt})
    tx.SetAltFunc(gpio.USART1_AF1)
    d := dma.DMA1
    d.EnableClock(true)
    tts = usart.NewDriver(usart.USART1, d.Channel(2, 0), nil, nil)
    tts.Periph().EnableClock(true)
    tts.Periph().SetBaudRate(115200)
    tts.Periph().Enable()
    tts.EnableTx()
    rtos.IRQ(irq.USART1).Enable()
    rtos.IRQ(irq.DMA1_Channel2_3).Enable()
}
func main() {
    io.WriteString(tts, "Hello, World!\r\n")
}
func ttsISR() {
    tts.ISR()
}
func ttsDMAISR() {
    tts.TxDMAISR()
}
//c:__attribute__((section(".ISRs")))
var ISRs = [...]func(){
    irq.USART1:          ttsISR,
    irq.DMA1_Channel2_3: ttsDMAISR,
}
```
你会发现此代码可能有些复杂，但目前 STM32 HAL 中没有更简单的 UART 驱动程序（在某些情况下，简单的轮询驱动程序可能会很有用）。 `usart.Driver` 是使用 DMA 和中断来减轻 CPU 负担的高效驱动程序。
STM32 USART 外设提供传统的 UART 及其同步版本。要将其用作输出，我们必须将其 Tx 信号连接到正确的 GPIO 引脚：
```
tx.Setup(&gpio.Config{Mode: gpio.Alt})
tx.SetAltFunc(gpio.USART1_AF1)
```
在 Tx-only 模式下配置 `usart.Driver` （rxdma 和 rxbuf 设置为 nil）：
```
tts = usart.NewDriver(usart.USART1, d.Channel(2, 0), nil, nil)
```
我们使用它的 `WriteString` 方法来打印这句名言。让我们清理所有内容并编译该程序：