title:Understanding Trust Management Systems
author:Stephen Weeks
Understanding Trust Management Systems 
Strategic Technologies and Architectural Research Laboratory 
Stephen Weeks 
InterTrust Technologies Corporation 
4750 Patrick Henry 
Santa Clara, CA 95054, USA 
sweeks@ intertrust.com 
Abstract 
This paper presents  a mathematical framework for ex- 
pressing trust management systems.  The framework makes 
it  easier  to  understand  existing  systems  and  to  compare 
them to one anothei; as well as to design new systems.  The 
framework defines the semantics of a trust management en- 
gine  via a  least fixpoint  in a  lattice, which, in some situa- 
tions, leads to an eficient implementation.  To denionstrate 
its j?exibilit>: we  present  KeyNote  and  SPKI  as instantia- 
tions of the framework. 
1  Introduction 
Systems in  which  multiple  entities  share  resources  of- 
ten  use an access control mechanism.  The problem of ac- 
cess  control  can  be  broken  into  two  subproblems:  deter- 
mining whether or not a request should be allowed, and en- 
forcing the decision.  Trust management  systems  solve the 
first  subproblem by  defining languages  for expressing  au- 
thorizations and access control policies, and by providing a 
trust management engine  for determining  when  a particu- 
lar request is authorized.  Traditional access control mech- 
anisms  are  centralized  and  operate  under  a  closed  world 
assumption  in  which  all  of  the  parties  are  known.  Trust 
management systems generalize traditional mechanisms by 
operating in distributed  systems and eliminating the closed 
world  assumption.  Over  the  last  ten  years,  a  number  of 
trust management systems have been  developed,  some fo- 
cusing on authentication [20, 21, 221, others for specialized 
purposes  [3, 8,  181, others  for  general  purpose  authoriza- 
tion  [4, 6, 131, and others based  on logics  [ 1,  2,  171.  Be- 
cause of the wide range in precision in the specification of 
these systems and the wide variety of trust management lan- 
guages, it is difficult to compare the systems in order to in- 
telligently  decide which  to  apply  to  a  new  situation.  Be- 
cause of the lack of formality in many of the specifications, 
it is difficult to understand their weaknesses, which is espe- 
cially troubling since the domain of interest is often security 
related.  Finally,  because  there  is  no  common conceptual 
framework underlying the  systems, it  is difficult to reason 
about the tradeoffs made in their design. This makes the de- 
sign of new trust management systems more of an art than 
a science. 
This paper  presents  a mathematical  framework for ex- 
pressing  trust  management  systems.  The  framework can 
express many well-known systems, including KeyNote  [4.1 
and  SPKI  [ 131.  Trust  management  systems  can  be  con- 
cisely  specificied,  which  helps  in  comparing current  sys- 
tems and in analyzing the design tradeoffs of new systems. 
The framework defines the semantics of a trust management 
engine as a least fixpoint in a lattice, which for many instan- 
tiations directly leads to an implementation.  In the case of 
SPKI, the  paper  shows how  an  implementation  of  the  se- 
mantics can  make a trust  management decision more sim- 
ply  and efficiently than the combination of certificate path 
discovery [9, 1 I ]  and tuple reduction [13]. 
This paper  is not concerned with the cryptographic un- 
derpinnings of trust management. It assumes that the appro- 
priate  integrity  checking  and signature  validation  happens 
before the trust management engine begins computation. It 
also does not discuss the important issue of revocation.  Fi- 
nally, it does not present a proposal for a new trust manage- 
ment system, although it lays the foundation for exploration 
of a range of new systems. 
Section 2 defines the framework and presents an instan- 
tiation via an extended example of a toy trust management 
system. Sections 3 - 5 show how to express SPKI, Keynote, 
and logic-based systems as instantiations of the framework. 
Section 6 formalizes several concepts generally applicable 
to  trust  management  systems.  Section  7  concludes  and 
presents several unanswered questions that this work raises. 
Appendix A reviews mathematical background and defines 
notation.  Readers  unfamiliar  with  lambda expressions  or 
lattices should refer to the appendix as necessary. 
1081-601 1/01 $10.00 0 2001 IEEE 
94 
2  Framework 
This section defines the framework for expressing trust 
management systems  and  presents  an  extended  example. 
The idea behind  the framework  is  to leave  open the kinds 
of authorizations that can be made by  the system, only re- 
quiring that  they  satisfy a few natural  mathematical  prop- 
erties.  The framework defines the  kinds  of assertions that 
can  be made by  entities in  the system and  gives a precise 
semantics specifying what a collection of assertions means 
and when a request should be granted. In many cases, a di- 
rect implementation of this semantics leads to a viable trust 
management engine. 
The elements of the framework are principals, authoriza- 
tions, authorization maps (abbreviated authmaps), licenses, 
and  assertions.  A principal  is  an  atomic  entity  that  may 
make or authorize requests.  We  use p  to range over princi- 
pals. 
p  E Principal 
For the framework, the only  necessary  property  of princi- 
pals  is  that  they  are distinguishable.  In  a  real  implemen- 
tation,  for cryptographic reasons,  a principal  might corre- 
spond to  a public key.  In  the example of this  section,  we 
will deal with the principals Alice, Bob, Carl, and Dave. 
An authorization expresses the permissions granted by a 
principal. Authorizations form a lattice, Auth, where U  5 U’ 
means that U’  permits more operations than U .  
U  E Auth 
For a given trust management decision, each principal in the 
system  will  be  associated  with  a  single authorization that 
describes  the  permissions  granted  by  that  principal.  The 
least upper bound operator U defines how to sensibly com- 
bine  multiple  authorizations made  by  the  same  principal 
into a single authorization. The Auth  lattice can be instanti- 
ated in  varying ways to express different trust management 
systems. 
As  an example,  imagine that Auth specifies  whether or 
not  Alice  may  read  some  particular  file,  write  that  file, 
or  both.  Let  R  denote  that  Alice  may  read  the  file,  W 
denote  she may  write  the  file,  RW denote  she  may  read 
and  write  the  file, and N denote  she may  do neither.  So, 
Auth  = {N, R, W, RW}.  In  order to make Auth into a lat- 
R, N  C W,  R  5 RW, W  5 RW and 
tice,  define  N 
U{ R, W}  = RW. Note that this authorization lattice only 
specifies the authorizations granted to Alice for a particular 
file, not for any other principal or any other file.  To repre- 
sent such authorizations, we could use a more complicated 
lattice  like Principal  x  File 
will stick with the simple lattice as the example for this sec- 
tion. 
- {N, R, W. RW},  but  we 
An  authmap is a function mapping principals to autho- 
rizations  that  describes  the  authorizations  made  by  each 
principal in a trust management decision. 
- 
m E AuthMup = Principal 
Auth 
Recall from Appendix A that AuthMup is a lattice under the 
pointwise  ordering  because Auth  is  a  lattice.  For  our ex- 
ample lattice, an authmap expresses the authorization each 
principal grants to Alice to read or write the file. Such a map 
might be m, where m(8ob) = R  and m(Carl) = RW. 
A license grants authorization, expressed as a monotone 
function from authmaps to authorizations. 
1  E  License  =  AuthMap - - jm  Auth 
Intuitively, the meaning of license 1 is that if principals grant 
authorizations as given by authmap m, then 1 grants the au- 
thorization l(m). Figure  1 shows some licenses for the ex- 
ample lattice.  License  2, which  delegates to  Bob, shows 
how the dependence of licenses on authmaps expresses del- 
egation.  The monotonicity requirement means that the au- 
thorizations granted by a license can only increase as a con- 
sequence of an increase in  other principals’ authorizations. 
The reader should verify that all of the licenses in Figure  1 
are monotone.  In  particular,  in  licenses 6, 7, and  8,  note 
that if  = were used  instead of 5, the license would  not be 
monotone. Monotonicity is required  in order to give a sen- 
sible meaning to a collection  of assertions so that the trust 
management engine will be well-defined. 
An  assertion is an expression of  authorization  made by 
a principal.  Assertions are the framework’s abstraction of 
digital certificates. Formally, an assertion consists of a prin- 
cipal and a license. 
U  E  Assertion  =  Principal x  License 
Assertion  ( p ,  1) should be read as “ p  authorizes 1”.  Princi- 
pal p  is referred to as the issuer.  Any principal could issue 
an  assertion  with  any  of  the  licenses from Figure  1.  In  a 
real  implementation,  assertions  would  typically  be  signed 
by  the public key of the issuing principal and would require 
signature checking before being processed by the trust man- 
agement engine. 
A trust management engine must take a set of assertions 
made by various principals, some of whom may delegate to 
each other, and find a coherent authmap representing the au- 
thorizations of those principals.  The assertions may reside 
in the local machine, or may  be presented  by  the principal 
making the request,  and may  have been created in various 
places. The act of finding a coherent authmap from various 
assertions is the component that distinguishes trust manage- 
ment from traditional  access control mechanisms.  We de- 
fine the  semantics of a set of  assertions as follows (as we 
do throughout the document, we use M  with a subscript to 
denote a semantic function). 
M,Am,on,(A) = Ifp(Xm.Xp. U ( [ ( m )  1  (P, 1 )   E A}) 
: P(Assertion )  --tm AuthMap 
95 
~~~ 
1  E License 
~ 
1)  Am.W 
2 )   Am.m(Bob) 
3)  Am.  U{W;m(Bob)) 
4)  Am.  n{W, m(Bob)} 
I  intended meaning 
Alice may write the file. 
Alice may do whatever Bob allows. 
Alice may write and do anything else Bob allows. 
1  Alice may write if Bob allows her to write. 
5 )   Am. n{W, m(Bob), m(Cat-I)} 
Alice may write if both Bob and Carl say she can. 
then R else N 
Am. if card{p E  {Bob, Carl, Dave} I R E m ( p ) }  2 2 
Am. if W C m(Bob) then R else N 
Am. if c a r d { p  I R 
m(p) } 2 2 then  R else N 
6) 
7 )  
8) 
Alice may read if any two of Bob, Carl, and Dave 
say she can. 
Alice may read if Bob says she may write. 
Alice may read if any two principals say she can. 
The  intuition  behind  the  definition  of  M4,rm,on, 
is  that  it 
combines  all  of  the  assertions  issued  by  each  principal 
into  one  authorization  for  that  principal,  taking  delega- 
tion  into  account. 
In  more  detail,  the  set  of  assertions 
made  by  a  principal p  is  (1  I  ( p , l )  E A } .   Given the  au- 
thorization  map m, the  set of  authorizations granted by  p 
is  {l(m) I  (p. 1) E A } .  By  taking a least  upper bound, we 
can combine the authorizations into a single authorization 
granted  by  p ,  namely  U{l(m) [  ( p , l )  E  A } .   Finally,  to 
find an authorization map that  is consistent with  all of  the 
licenses,  we  take  a  least  fixpoint in  the AurhMup  lattice, 
which relies on the fact that licenses are monotone. Because 
the licenses in assertions are monotone, so is 
That 
is, if more assertions are input to 
then more autho- 
rizations  will  be made by the resulting  authmap.  The defi- 
nition of M,nm,on, as a least fixpoint also makes it clear why 
the framework cannot handle revocation, since that would 
require non-monotone assertions. 
Figure 2 shows some example computations of M41,e,,,onS. 
Each row has a set of assertions in the left column, a fixpoint 
computation of  an authmap in the middle, and a comment 
about  the  example in  the right  column.  The order of  as- 
sertions in  the left column is irrelevant.  The fixpoint com- 
putation  (see Appendix  A  for an explanation) is shown as 
a sequence of  authmaps, one per  row, where each column 
contains the authorizations made by  a principal.  Each row 
contains an authmap consisting of the least upper bound of 
all of  the assertions applied to the authmap in the previous 
row.  The final  row  is the least fixpoint authmap of the set 
of  assertions.  The examples give  some idea of  how  least 
fixpoint computation can express concepts like path valida- 
tion [20], chaining and five-tuple reduction [ 131, and inter- 
assertion communication [7]. 
A  trust management engine makes a decision  based on 
a  request,  an  authorizing  principal,  and  a  set  of  asser- 
tions.  The authorizing principal reflects the policy  govern- 
ing the  request.  A  request  is expressed  as an  element of 
the Auth lattice.  The semantics is defined by MUnx,nrr where 
M,,,,,(p,  U ,  A) means that principal p  authorizes request U 
according to the assertions in A. 
- Boo1 
M,,,,,,  : Principal x Auth x P(Assertion) 
M,"wt(~l U ,  A )  = U  E MA,,~n,"n,(A)(p) 
The trust  engine computes the  authmap corresponding to 
the  provided  assertions  A  and  determines  if  the  request 
requires  less  authorization  than  is  granted  by  the  autho- 
For  the  example  lattice,  if  Alice 
rizing  principal  p. 
would  like  to  write  the  file  (which is  denoted  by  the  re- 
quest  W)  under  Bob's  control  and  the  assertions  al, a~ 
and  u3  are  available,  the  trust  engine  would  compute 
M,,,,,,(Bob. W, {all u2, u s } )  to  determine  if  Bob autho- 
rizes Alice to write. 