For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].
Given an integer n, return 1 - n in lexicographical order.
386. Lexicographical Numbers
代码
给定一个整数 n,返回从 1 到 n 的字典顺序。例如，给定 n =13，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。
题目
·DFS 暴力求解即可。
·给出一个数字n，
func lexicalorder(n int) []int { 
package leetcode
return res 
dfs386(1,n, &res)
res := make([]int,O,n) 
return cur
case s[i] ==
case s[i] == ']':
1++
 cur = stack[len(stack)-1]
stack = append(stack, next)
if len(stack) > 0 { 
++
stack = stack[:len(stack)-1]
1++
 stack[len(stack)-1] .List = append(stack[len(stack)-1] .GetList(), next)
：要求按照字典序对 1-n 这 n 个数排序。
---
## Page 475
题目大意
Note: You may assume the string contain only lowercase letters.
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist,
 387. First Unique Character in a String
代码
解题思路
给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回-1。
Examples:
return -1.
题目
·简单题，要求输出第一个没有重复的字符。
func firstuniqchar(s string) int {
S = "loveleetcode",
return 0. 
S = "leetcode"
package leetcode
return 2.
func dfs386(x,
result := make([]int, 26)
for x = 1B, and you want to check
 Example 2:
"(ou s! oae alum apoge yo aouanbasqns e s! ,aoe 'a) 'saoeseuo 
A subsequence of a string is a new string which is formed from the original string by deleting 
long (length ~= 500,000) string, and s is a short string ( 0 & len(t) > 0 {
return true
for i := O; i = 248 { // 11111000 = 248
(hexadecimal)
if d = 192 {
else {
} else if d > 127 { // 01111111 = 127
} else if d >= 240 { // 11110000 = 240
-,d := range data {
return false
count = 1 
else if d >= 192 { // 11000000 = 192
count =
else if d :
count = 3
 return false
1 >= 224 { // 11100000 = 224
，其实严格按照UTF8 定义来模拟就可以了。
110xxxxx
0xxxxxxx
~
 UTF-8 octet sequence
 10xxxxxx 10xxxxxx
10xxxxxx
(binary)
---
## Page 481
代码
联起来即可。
在多位的，所以需要往前找到不为数字的那一位，把数字转换出来。最后用把 stack 里面的字符串都串
解题思路
输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。此外，你可以认为原始数据不包
号内部的 encoded_string 正好重复k次。注意k 保证为正整数。你可以认为输入字符串总是有效的;
给定一个经过编码的字符串，返回它解码后的字符串。编码规则为:k[encoded_string]，表示其中方括
题目大意
Examples:
are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].
ip neun pue shlp Sue uuon ou sap ep ieuio au neun aunsse eu nor aoaune 
You may assume that the input string is always valid; No extra white spaces, square brackets are
being repeated exactly ktimes. Note that k is guaranteed to be a positive integer.
The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is 
Given an encoded string, return its decoded string.
题目
394. Decode String
这一题和第 880 题大体类似。用栈处理，遇到""，就要开始重复字符串了，另外重复的数字是可能存
含数字，所有的数字只表示重复的次数k，例如不会出现像 3a 或 2[4] 的输入。
well-formed, etc.
S
'"ooe. ua '.z]e = s
S
 = "2[abc]3[cd]ef", return "abcabccdcdcdef",
= "3[a]2[bc]", return "aaabcbc".
return count == 0
count--
return false
---
## Page 482
题目
397. Integer Replacement
func decodestring(s string) 
import （
package leetcode 
for -, s := range stack { 
stack, res := []stringf},
"strconv'
return res
 res += s 
} else{ 
 stack = append(stack, string(str))
stack[index+l] = tmp
for i := O; i = "o" && stack[index] = O; index--
6
---
## Page 483
解题思路
问 n 变为 1 所需的最小替换次数是多少?
给定一个正整数n，
题目大意
 Example 2: 
 Example 1: 
What is the minimum number of replacements needed for n to become 1?
mollt se suoeado op uen nor pue u laau ansod e uan
·当n为奇数的时候，什么时候需要加1，什么时候需要减1，通过观察规律可以发现，除了 3和
·题目给出一个整数，然后让我们通过变换将它为 1，如果 是偶数，可以直接变为 n/2，如果
2．如果 n 是奇数，则可以用 n+1 或n-1 替换 n。
1．如果 n 是偶数，则用 n / 2 替换 n。
 2. If n is odd, you can replace n with either n + 1 or n - 1.
7 -> 6 -> 3 -> 2 -> 1 
Output:
8 -> 4 -> 2 -> 1
Explanation: 
Output:
1. If n is even, replace n with n/2. 
Explanation:
4
Input:
w
X
Input:
是奇数，可以先 n+1 或 n-1，问最终变为 1 的最少步骤。
7以外，所有加1就变成4的倍数的奇数，都适合先加1运算，比如15:
你可以做如下操作：
---
## Page 484
Example:
If the answer does not exist, return -1.0.
strings, and k is a real number (floating point number). Given some queries, return the answers.
Equations are given in the format A / B = k, where A and B are variables represented as 
题目
399. Evaluate Division
代码
func integerReplacement(n int) int {
package leetcode
·最后如何判断某个数字加1后是4的倍数呢？这里有一个小技巧，由于之前判断了其是奇数了，
·对于7来说，加1和减1的结果相同，可以不用管，对于3 来说，减1的步骤更少，所以需要先
return res
res := 0
判定是偶数，那么直接除以2(右移一位)即可。
去掉这种特殊情况。
for n>1{
出现两个0，则一定是 4的倍数。于是就可以判断出来了。剩下的情况就是偶数的情况，如果之前
那么最右边一位肯定是1，如果其右边第二位也是1的话，那么进行加1运算，进位后右边肯定会
} else if (n+1)%4 == 0 && n != 3  // 末尾 2 位为 11
if（n ＆ 1）==0{// 判断是否是偶数
res++
}else{// 末尾2位为 01
111011 -> 111100 -> 11110 -> 1111 -> 10000 -> 1000 -> 100 -> 10 -> 1
111011 -> 111010 -> 11101 -> 11100 -> 1110 -> 111 -> 1000 -> 100 -> 10 ->
15 -> 16 -> 8 -> 4 -> 2 -> 1 
 n >>= 1 
++u
---
## Page 485
假设输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。
vector类型。
与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。返回
输入为: vector> equations, vector& values, vector> 
给定 a / b = 2.0, b / c = 3.0 
问题，并返回计算结果。如果结果不存在，则返回-1.0。
给出方程式 A/ B=k,其中 A 和 B 均为代表字符串的变量，k是一个浮点型数字。根据已知方程式求解
题目大意
The input is always valid. You may assume that evaluating the queries will result in no division by
According to the example above:
the values are positive. This represents the equations. Return vector.
vector> queries , where equations.size() == values.size(), and 
The input is: vector> equations, vector& values,
=?, x / x = ? .return [6.0, 0.5, -1.0, 1.0, -1.0 ].
解题思路
queries(方程式，方程式结果，问题方程式)，其中 equations.size() ==values.size()，即方程式的长度
返回 [6.0, 0.5, -1.0, 1.0, -1.0 ] 
问题: a I c=?, b / a=?, a / e =?, a / a=?, x/ x=?
zero and there is no contradiction.
Given a / b = 2.0, b / c = 3.0. queries are: a / c = ?, b / a = ?, a / e = ?, a / a
示例：