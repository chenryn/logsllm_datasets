### PostgreSQL 性能优化与索引管理

#### 可视性映射（Visibility Map, VM）

- **用途**:
  - 加速空闲页查找
  - 降低热点页访问频率

- **结构**:
  - 每个堆页（HEAP PAGE）使用2个比特位。
  - 定义的标志位如下：
    ```c
    #define VISIBILITYMAP_ALL_VISIBLE 0x01
    #define VISIBILITYMAP_ALL_FROZEN 0x02
    #define VISIBILITYMAP_VALID_BITS 0x03 /* OR of all valid visibilitymap flags bits */
    ```

- **应用场景**:
  - 索引仅扫描（Index Only Scan）
  - `VACUUM` 跳过所有可见或冻结的页面
  - `VACUUM FREEZE` 跳过所有冻结的页面

#### 扫描方法介绍

- **顺序扫描（SeqScan）**:
  - 当表大小超过共享缓冲区（Shared Buffer, SB）的四分之一时，添加TAG。
  - 从0号数据块开始扫描，优先淘汰共享缓冲区中的数据。
  - 分批处理，不会将共享缓冲区塞满。
  - 如果启用`synchronize_seqscans`参数，可能会从中间开始扫描，并尽量保持多会话并行扫描的步调一致。

- **索引仅扫描（Index Only Scan）**:
  - 利用可视性映射（VM），当索引中没有版本信息时，查看VM以确定是否需要回表读取堆页。

- **索引扫描（Index Scan）**:
  - 标准的索引扫描方式。

- **索引跳过扫描（Index Skip Scan）**:
  - 在某些特定条件下，可以显著提高查询性能。例如，从150多毫秒降低到0.256毫秒。
  - 示例：
     ```sql
     CREATE TABLE t (sex INT, name TEXT);
     INSERT INTO t SELECT random(), md5(random()::text) FROM generate_series(1, 10000000);
     CREATE INDEX idx_t ON t(sex, name);
     SELECT * FROM t WHERE name = 'abc';
     ```

- **位图扫描（Bitmap Scan）**:
  - 多索引合并（OR内部合并，GIN索引）
  - 消除离散、重复读取堆页的问题
  - 优化器参考指标：相关性和IO放大问题

- **CTID扫描**:
  - 基于物理位置的扫描方式。

#### 性能分析与优化

- **如何分析性能瓶颈**:
  - 通过TOP SQL定位主要性能瓶颈
  - 分析SQL执行计划
  - 数据库内核代码层瓶颈分析
  - 慢SQL定位和优化
  - 锁等待问题定位
  - 等待事件透视
  - 全面健康报告

- **索引维护**:
  - PostgreSQL支持重复索引（例如一个字段可以创建多个相同的索引）
  - 在线新建索引不阻塞DML操作
  - 语法示例：
     ```sql
     CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ [ IF NOT EXISTS ] name ] ON table_name [ USING method ]
     ( { column_name | ( expression ) } [ COLLATE collation ] [ opclass ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
     [ WITH ( storage_parameter = value [, ... ] ) ]
     [ TABLESPACE tablespace_name ]
     [ WHERE predicate ]
     ```

- **在线加列**:
  - 不要设置默认值
  - 如果必须有默认值，建议后台分批更新

- **在线回收空间**:
  - 使用工具如`pg_repack`进行空间回收

- **批量DML操作**:
  - 批量插入：使用`INSERT`语句或`COPY`命令
  - 批量更新：使用`UPDATE ... FROM`语法
  - 批量删除：使用`DELETE ... USING`语法

- **DELETE/UPDATE limit**:
  - 限制删除或更新的数量，避免一次性操作过多数据
  - 示例：
     ```sql
     DELETE FROM tbl WHERE ctid = ANY (ARRAY (SELECT ctid FROM tbl WHERE xxxx LIMIT n));
     UPDATE tbl SET xx = xx WHERE ctid = ANY (ARRAY (SELECT ctid FROM tbl WHERE xxxx LIMIT n));
     ```

- **性能分析利器**:
  - `pg_stat_statements`插件：用于统计最耗时、最耗IO、响应时间抖动最严重等SQL
  - `EXPLAIN`命令：分析查询执行计划

- **经典问题案例**:
  - 大量长连接 + 大共享缓冲区导致page table膨胀
  - 会话级缓存霸占内存
  - 分区表分区过多导致元数据占用大量内存
  - 递归查询死循环导致临时空间跑满

通过以上方法和技术，可以有效地管理和优化PostgreSQL数据库的性能。