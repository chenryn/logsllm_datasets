the static and evolving network. In the following, we ﬁrst
describe our crawling method, followed by post-processing of
the crawled data. Last, we present properties of the resulting
datasets.
Dataset Processing: We restricted our evaluation to
funded accounts: a Ripple account is funded when it owns a
certain amount of XRP.4 In April 2017, a user needed 20 XRP
to fund an account. In this paper, we disregard transferring
credit from one currency to another. Hence, we converted all
values to US dollars and deleted all links and transactions
in non-ﬁat currencies. After cleaning the dataset according
to these three rules, we derived the credit network C(cid:48)
N ov16
for November 2016 and lists of both transactions and link
value changes, sorted in temporal order. Based on the resulting
transaction and link modiﬁcations lists, we then generated
the credit network C(cid:48)
0 at the time of the ﬁrst transaction as
a starting point of our second mode, the evolving network.
As our data does not reveal when nodes join and leave the
network, we included all crawled nodes and links in our initial
credit network but set the weight of links (u, v) that come
into existence at a later point to 0. During the spanning tree
construction, such links are ignored.
We resolved three inconsistencies between our model and
the datasets. In rare cases, Ripple exhibits invalid credit ar-
rangements; i.e., links (u, v) such that their weight exceeds the
upper limit of granted credit. Usually, such occurrences result
from changes to the extended credit agreement. We deleted
all such links from the dataset. Furthermore, we removed self-
transactions from the dataset, as they do not require routing
algorithms according to our model. Last, landmark routing
requires paths between all nodes and the landmarks, so that
we restricted our evaluation to the giant component. These
processing steps turned the initial snapshots C(cid:48)
N ov16 and C(cid:48)
0
into our processed datasets CN ov16 and C0. We obtained
the ﬁnal datasets by restricting the previous lists to entries
involving only nodes in the ﬁnal snapshots.
Final Datasets: C0 contained 93,502 nodes and a total
of 331,096 links, whereas CN ov16 contained 67,149 nodes and
199,574 links. The reason for the disparity is that C0 contained
all active links and their adjacent nodes for a period of more
than 3 years, whereas CN ov16 was a snapshot of the network on
one particular date. Our ﬁnal transaction lists had 970,472 and
692,737 entries for C0 and CN ov16, respectively. We recorded
a total of 652,216 link modiﬁcations for the evolving network
C0. The datasets and the code are publicly available.5
C. Simulation Setup
Our ﬁrst simulation setup realized the static simulation
mode on the basis of the snapshot CN ov16. We repeated simu-
lations 20 times, using a different set of 50,000 transaction for
each run. We chose these transactions pseudorandomly, seeded
by the run number, from all transactions that were successful
using Ford-Fulkerson, a total of 331,642 transactions. We then
evaluated all 8 possible combinations of routing algorithms
(landmark routing or embedding-based), credit assignments
to paths (multi-party computation or random assignment),
and stabilization algorithms (periodic or on-demand) for the
parameters |L| = 3 and a = 2. We chose epoch = 1000,
meaning we recomputed spanning trees each 1000 transactions.
We choose the re-queuing interval as tl = 2 · epoch. For the
landmark selection, we considered both options: random and
highest degree. Note that random choices were deterministic
in the run number, ensuring comparability of all approaches
under the same circumstances. For comparison with related
approaches, we evaluated two versions of tree-only routing,
using SilentWhispers’ multi-party computation and periodic
stabilization for the ﬁrst version and SpeedyMurmurs’ random
credit assignment and on-demand stabilization for the second.
We then evaluated the impact of the different parameters for
SilentWhispers and SpeedyMurmurs. We vary the number of
landmarks |L| between 1 and 7 and the number of attempts a
between 1 and 10.
Our second simulation setup realized the evolution of the
network under different algorithms: Ford-Fulkerson, Silent-
Whispers, and SpeedyMurmurs. Starting from the initial net-
work C0, the simulation initiated the transactions and changes
link values according to the dataset. For SilentWhispers and
SpeedyMurmurs, we set |L| = 3, a = 2, epoch = 1000δAv,
and tl = 2δAv with δAv denoting the average time between
two transactions. In this manner, an epoch roughly corresponds
to a day. We chose landmarks of the highest degree for
SpeedyMurmurs and SilentWhispers. As Ford-Fulkerson is a
deterministic algorithm, we only executed it once but averaged
our results for SpeedyMurmurs and SilentWhispers over 20
runs.
D. Results
We start by comparing a wide range of algorithms for
the static simulation setup. Table I displays the results for
different combinations of the three proposed modiﬁcations to
SilentWhispers as well as our implementations of tree-only
routing and Ford-Fulkerson. Note that Ford-Fulkerson is a
4XRP is the symbol of the Ripple currency.
5https://crysp.uwaterloo.ca/software/speedymurmurs/
11
TABLE I: Performance of different transaction schemes in the static scenario, varying the routing algorithm (LM-Landmark,
GE-greedy embedding, TO-Tree-only), the stabilization method (PER-periodic, OND-on-demand), the assignment of credit on
paths (MUL-multi-party computation, RAND-random), and the landmark selection (HD-highest degree, RL-random landmark)
for ﬁve metrics: success ratio: fraction of successful transactions (higher is better), delay: longest chain of messages (lower
is better), transaction: messages sent per transaction (lower is better), path length: length of discovered paths between sender
and receiver (lower is better), stabilization: messages for stabilizing the trees sent per epoch (lower is better). SilentWhispers
corresponds to the setting LM-MUL-PER whereas SpeedyMurmurs is GE-RAND-OND.
Setting
Success Ratio
0.651± 0.005
SilentWhispers-HD
0.62 ± 0.03
LM-MUL-OND-HD
0.09 ± 0.01
LM-RAND-PER-HD
0.09 ± 0.09
LM-RAND-OND-HD
0.908± 0.001
GE-MUL-PER-HD
0.905± 0.004
GE-MUL-OND-HD
0.913± 0.001
GE-RAND-PER-HD
SpeedyMurmurs-HD 0.906± 0.006
0.863± 0.003
TO-SW-HD
0.54 ± 0.04
TO-SM-HD
1.00 ± 0.00
Ford-Fulkerson
0.1 ± 0.2
SilentWhispers-RL
0.912± 0.007
SpeedyMurmurs-RL
Delay
(Hops)
15.01 ±
0.08
14.7 ±
0.5
8.3 ±
0.1
±
1
9
11.52 ±
0.03
11.5 ±
0.2
6.016±
0.009
6.02 ±
0.04
15.9 ±
0.1
6.7 ±
0.3
± 900
49500
±
2
15
5.99 ±
0.06
Transaction
(Messages)
82.0 ±
0.2
81 ±
2
35.1 ±
0.5
37 ±
4
49.0 ±
0.1
49.0 ±
0.5
18.30±
0.04
18.3 ±
0.1
81.9 ±
0.3
23.5 ±
0.7
49500 ± 900
130 ± 10
18.2 ±
0.2
Path Length
(Hops)
5.30 ± 0.01
5.3 ± 0.1
3.23 ± 0.05
3.4 ± 0.4
1.951± 0.003
1.954± 0.007
1.867± 0.003
1.87 ± 0.01
3.17 ± 0.01
2.01 ± 0.07
3.2 ± 0.1
7.6 ± 0.6
1.863± 0.009
Stabilization
(Messages)
598722 ±
0
8000000 ± 2000000
598722 ±
0
2000 ±
2000
598722 ±
0
4000 ±
4000
598722 ±
0
300 ±
300
598722 ±
0
5000 ±
5000
0 ±
0
598722 ±
0
1000 ±
1000
deterministic algorithm but its delays and overheads vary as
the set of transactions varies between runs.
Impact of Design Decisions: As expected, greedy em-
beddings led to shorter paths due to ﬁnding shortcuts between
different branches of the tree. Hence, all settings using greedy
embeddings, i.e., rows starting in “GE-” and SpeedyMurmurs,
exhibited lower delays and transaction overheads than the
corresponding landmark-based algorithms. Indeed, greedy em-
beddings reduced the path length and the transaction overhead
by nearly a factor of 2. Greedy embeddings also increased the
success ratio due to the shorter paths and the lower probability
of encountering a link with low available credit.
The impact of the random assignment of credit, used by
SpeedyMurmurs and all algorithms with “RAND” in their
name, was less clear-cut: While removing the need to involve
landmarks into the routing process reduced the delay and the
transaction overhead for all parameter settings, the impact on
the success ratio differed between embedding-based and land-
mark routing. When combined with landmark routing, random
credit assignments resulted in a deﬁnite drop in success from
more than 60% to only 8%. The reason for the low success
ratio was the high probability of encountering at least one link
with insufﬁcient credit to satisfy the random assignment. In
contrast, greedy embeddings exhibited much shorter paths and
the ﬂexibility to potentially choose between several neighbors.
These two properties negated the disadvantageous impact of
the random credit assignment, so that greedy embedding in
combination with random assignment resulted in the same
success ratio of 91% as in combination with multi-party
computation.
On-demand stabilization reduced the stabilization overhead
(abbreviated by Stabilization in Table I) drastically: While
rebuilding the spanning trees periodically, as applied by Silent-
Whispers and all algorithms with “PER” in their name, resulted
in more than half a million messages per epoch, on-demand
stabilization only required a few thousands of messages, as
shown in the last column of Table I. On-demand stabilization
induced high variance because the value of links close to the
root of a spanning tree rarely drops to 0 but incurred enormous
overhead in these rare occurrences. The simulation showed a
clear advantage of on-demand stabilization. We admit that the
considerable advantage of on-demand stabilization is partially
due to lack of link value changes and actual dynamics in
the static simulation. In the second part of this section, we
therefore evaluate the stabilization overhead in a dynamic
environment.
Comparison to Other Algorithms: We compared Silent-
Whispers and SpeedyMurmurs with tree-only routing and
Ford-Fulkerson based on the results in Table I. As expected,
Ford-Fulkerson exhibited prohibitive delays and transaction
overheads. The fact that Ford-Fulkerson also results in a longer
average path length seems counterintuitive at ﬁrst. However,
the result was a side effect of Ford-Fulkerson discovering long
paths to maximize the available credit that the other approaches
failed to discover. As illustrated in Fig. 1 and detailed in
Sec. II, tree-only routing ﬁnds the shortest route in the span-
ning tree, possibly without passing a landmark, but does not
include links that are not contained in the tree. Thus, tree-
only routing is a compromise between SilentWhispers’ routing
algorithm and embedding-based routing. As a consequence, the
performance results when using only tree links are in between
the performance of SilentWhispers and SpeedyMurmurs.
Impact of |L| and a: Next, we evaluate the impact
of different conﬁguration parameters on the performance. As
indicated in the last
two rows of Table I, choosing ran-
dom landmarks did not considerably affect the performance
of SpeedyMurmurs but reduced the performance of Silent-
Whispers due to the existence of longer paths to a landmark
with few connections. In contrast, increasing the number of
trees |L| affected the success ratio of SpeedyMurmurs nega-
tively and SilentWhispers positively, as Fig. 2a indicates. The
reason for the observed decrease in success was the increased
likelihood that at least one path did not have sufﬁcient credit.
12
(a) Success Ratio : Trees (Higher is Better)
(c) Success Ratio : Attempts (Higher is Better)
Fig. 2: SilentWhispers vs. SpeedyMurmurs: Impact of number of parallel trees and attempts at performing a transaction
(b) Delay : Trees (Lower is Better)
(a) Events/Epoch
(b) Stabilization (Lower is Better)
(c) Success (Higher is Better)
Fig. 3: Comparing SpeedyMurmurs and SilentWhispers in a dynamic setting based upon Ripple transaction and link changes
from 2013 to 2016 on per-epoch scale; success is computed as the ratio of the actual success ratio and the success ratio of the
Ford-Fulkerson algorithm as a baseline; for c), we present moving averages over 50 epochs to increase readability
An increased |L| further increased the delays, as shown in
Fig. 2b. The impact was more pronounced for SilentWhispers
because landmarks had to wait until all messages for the multi-
party computation arrived. The number of attempts a had a
slight positive effect on the success ratio, as shown in Fig. 2c.
Yet, as the transaction overhead is linear in the number of