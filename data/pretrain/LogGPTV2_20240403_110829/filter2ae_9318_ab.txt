        *((_BYTE *)a1 - 4) = 0;
        v10 = v9;
        sub_23007479(a1 - 10);
        if ( v10 )
        {
          v11 = sub_230BEA21(*(a1 - 6), v10);
          if ( v11 == -1 )
          {
            v8 = 0;
          }
          else
          {
            v12 = 1;
            if ( v11 )
              v12 = -1;
            v8 = v12;
          }
          (*(void (__cdecl **)(int))(dword_23124EF4 + 12))(v10);
        }
        (*(void (__cdecl **)(_DWORD, signed int))(dword_23124F64 + 108))(a1[5], v8);
      }
      else
      {
        (*(void (__cdecl **)(int, _DWORD, _DWORD, _DWORD, _DWORD))(dword_23124F64 + 352))(
          v1,
          a1[3],
          a1[4],
          *(a1 - 8),
          *(a1 - 7));
      }
      sub_2300DAE9(a1 - 13);
      return sub_230022F2();
    }
但是调试发现，根本没有触发到这里的代码逻辑。
追踪堆内存
        address 46df9f98 found in
        _DPH_HEAP_ROOT @ 5c91000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                    471b1820:         46df9f98               67 -         46df9000             2000
        5a52abb0 verifier!VerifierDisableFaultInjectionExclusionRange+0x000034c0
        7707246b ntdll!RtlDebugAllocateHeap+0x00000039
        76fd6dd9 ntdll!RtlpAllocateHeap+0x000000f9
        76fd5ec9 ntdll!RtlpAllocateHeapInternal+0x00000179
        76fd5d3e ntdll!RtlAllocateHeap+0x0000003e
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Windows\System32\ucrtbase.dll - 
        74840106 ucrtbase!malloc_base+0x00000026
        5782a2bc AcroRd32!AXWasInitViaPDFL+0x000008cf
        5782e829 AcroRd32!CTJPEGLibInit+0x00002039
        542245d8 EScript!PlugInMain+0x00002b5b //this will call alloc func
        54224331 EScript!PlugInMain+0x000028b4
        542776d5 EScript!mozilla::HashBytes+0x00047edf
        542729f4 EScript!mozilla::HashBytes+0x000431fe
        54263bb3 EScript!mozilla::HashBytes+0x000343bd
        54263912 EScript!mozilla::HashBytes+0x0003411c
        54271f86 EScript!mozilla::HashBytes+0x00042790
        54256d06 EScript!mozilla::HashBytes+0x00027510
        5425175d EScript!mozilla::HashBytes+0x00021f67
        54250606 EScript!mozilla::HashBytes+0x00020e10
        54250517 EScript!mozilla::HashBytes+0x00020d21
        54250460 EScript!mozilla::HashBytes+0x00020c6a
        54238ec3 EScript!mozilla::HashBytes+0x000096cd
        542787ac EScript!mozilla::HashBytes+0x00048fb6
        542784ec EScript!mozilla::HashBytes+0x00048cf6
        542780e5 EScript!mozilla::HashBytes+0x000488ef
        542770b4 EScript!mozilla::HashBytes+0x000478be
        542e85e9 EScript!double_conversion::DoubleToStringConverter::CreateDecimalRepresentation+0x00061731
        5803da6f AcroRd32!AIDE::PixelPartInfo::operator=+0x0010536f
        57f6723a AcroRd32!AIDE::PixelPartInfo::operator=+0x0002eb3a
        57f6345e AcroRd32!AIDE::PixelPartInfo::operator=+0x0002ad5e
        57d3002d AcroRd32!AX_PDXlateToHostEx+0x001ff9b5
        57d3057c AcroRd32!AX_PDXlateToHostEx+0x001fff04
        57f66e8e AcroRd32!AIDE::PixelPartInfo::operator=+0x0002e78e
callstack 和 堆追踪 得到的结果 前部分重合，内存在
这个call里分配，这个call一直到核心dll再到ntdll去分配内存。
分析的参数来源发现：
    else if ( a3 == 2 )
      {
        v17 = (*(int (__cdecl **)(_DWORD, void *))(dword_23A65354 + 0x60))(*v4, Src);// 
                                                  // 
                                                  // 0:000> dd 4bc86fe8 
                                                  // 4bc86fe8  000000cc 4f6d0f30 00000000 00000000
                                                  // 4bc86ff8  00000000 00000000 ???????? ????????
                                                  // 4bc87008  ???????? ???????? ???????? ????????
                                                  // 4bc87018  ???????? ???????? ???????? ????????
                                                  // 4bc87028  ???????? ???????? ???????? ????????
                                                  // 4bc87038  ???????? ???????? ???????? ????????
                                                  // 4bc87048  ???????? ???????? ???????? ????????
                                                  // 4bc87058  ???????? ???????? ???????? ????????
                                                  // 
                                                  // length str
                                                  // 
                                                  // unicode str--> ascii str
      }
这个调用对数据作处理，输入数据：
    0:000> dd 4f6d0f30 
    4f6d0f30  00ff00fe 00410041 00410041 00410041
    4f6d0f40  00410041 00410041 00410041 00410041
    4f6d0f50  00410041 00410041 00410041 00410041
    4f6d0f60  00410041 00410041 00410041 00410041
    4f6d0f70  00410041 00410041 00410041 00410041
    4f6d0f80  00410041 00410041 00410041 00410041
    4f6d0f90  00410041 00410041 00410041 00410041
    4f6d0fa0  00410041 00410041 00410041 00410041
    0:000> dd 4f6d0f30  + 0xcc
    4f6d0ffc  d0d00000 ???????? ???????? ????????
    4f6d100c  ???????? ???????? ???????? ????????
    4f6d101c  ???????? ???????? ???????? ????????
    4f6d102c  ???????? ???????? ???????? ????????
    4f6d103c  ???????? ???????? ???????? ????????
    4f6d104c  ???????? ???????? ???????? ????????
    4f6d105c  ???????? ???????? ???????? ????????
    4f6d106c  ???????? ???????? ???????? ????????
得到的结果是:
    0:000> r eax
    eax=4b9cef98
    0:000> dd eax
    4b9cef98  4141fffe 41414141 41414141 41414141
    4b9cefa8  41414141 41414141 41414141 41414141
    4b9cefb8  41414141 41414141 41414141 41414141
    4b9cefc8  41414141 41414141 41414141 41414141
    4b9cefd8  41414141 41414141 41414141 41414141
    4b9cefe8  41414141 41414141 41414141 41414141
    4b9ceff8  41414141 d0004141 ???????? ????????
    4b9cf008  ???????? ???????? ???????? ????????
然后直接把这个`buffer`为参数传递给处理函数（此时这是一个ascii string)
    0:000> p
    Breakpoint 2 hit
    eax=4b9cef98 ebx=0098cec4 ecx=00000000 edx=7fffff99 esi=4b9cef98 edi=0098ce4c
    eip=529145bf esp=0098ce10 ebp=0098ce28 iopl=0         nv up ei pl nz na po nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    EScript!PlugInMain+0x2b42:
    529145bf e8b1e5ffff      call    EScript!PlugInMain+0x10f8 (52912b75)
    0:000> dd esi
    4b9cef98  4141fffe 41414141 41414141 41414141
    4b9cefa8  41414141 41414141 41414141 41414141
    4b9cefb8  41414141 41414141 41414141 41414141
    4b9cefc8  41414141 41414141 41414141 41414141
    4b9cefd8  41414141 41414141 41414141 41414141
    4b9cefe8  41414141 41414141 41414141 41414141
    4b9ceff8  41414141 d0004141 ???????? ????????
    4b9cf008  ???????? ???????? ???????? ????????
处理函数判断是不是`unicode`，只是判断前两个字符是不是`\xFE\xFF`，就走了`unicode`逻辑，所以导致越界读。
## 0x03 : what is root cause
其实就是上层一点的逻辑对输入的参数没做转换(to
unicode)，导致后面获取长度的函数处理字符串的时候，误认为`\xFE\xFF`开头的就是unicode字符串，然后就越界读取了。
## 0x04 : Conclusion
几个月前写的分析了，可能会有错误，有问题欢迎和我沟通 : -)
这个攻击面可能就这么一点一点的消失了吧 :-)
* * *