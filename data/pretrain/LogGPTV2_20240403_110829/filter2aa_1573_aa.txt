大海捞针：使用沙箱捕获多个零日漏洞
李琦
安全开发工程师
金权
漏洞挖掘和利用工程师
2019-5-30
关于我们
李琦 (@leeqwind)
360 核心安全高级威胁自动化团队
安全开发工程师
金权 (@jq0904)
360 核心安全高级威胁自动化团队
漏洞挖掘和利用工程师
• 高级威胁自动化和沙箱
• 使用沙箱发现在野 0day 漏洞
大纲
无处不在的网络攻击
我们至今捕获的五次在野利用 0day 漏洞的攻击事件
CVE-2018-15982
捕获到一次使用新的 Flash 0day (CVE-2018-15982) 针对政府机
构的国际网络攻击。
2018-11
CVE-2018-8174
首家捕获新的使用浏览器 0day 漏洞 (CVE-2018-8174) 的 APT MS 
Office 攻击。该漏洞影响当时最新版的 Internet Explorer 浏览
器和所有使用 IE 内核的应用程序。
2018-04
2018-06
CVE-2018-5002
全球首家捕获在野利用的 Flash 0day 漏洞 (CVE-2018-5002)。 
该漏洞影响 Adobe Flash Player 29.0.0.171 和更早的所有版
本。
2017-12
CVE-2018-0802
全球首家捕获  噩梦公式二代  (CVE-2018-0802) 0day 漏洞，
2018年微软修复的首个在野 0day 漏洞。
CVE-2017-11826
全球独家捕获在野利用的 0day 漏洞 (CVE-2017-11826)。 这是中
国安全厂商捕获的第一个 Office 在野 0day 攻击。
2017-09
无处不在的网络攻击
1
10
100
1000
10000
100000
1000000
doc
docm
docx
eml
html
hwp
msi
nsis
pdf
ppt
pptm
pptx
rtf
swf
vbs
xls
xlsm
xlsx
exe
dll
others
Flash
HWP
IE
Kernel
Office
PDF
CVE-2012-0158
CVE-2015-1641
CVE-2015-1726
CVE-2015-2545
CVE-2016-7255
CVE-2017-11882
CVE-2017-8570
CVE-2018-0798
CVE-2018-0802
CVE-2018-4878
从 2018-03 至 2019-03 期间我们监测到的部分 N-day 漏洞攻击文件统计
部分文件类型分类
漏洞模块分类
部分漏洞计数
高级威胁自动化
• 大规模的样本云
• 静态反病毒引擎
• AVE QEX QVM
• 样本预筛选策略
• 沙箱服务器集群
• 虚拟机隔离环境
• 沙箱自动化检测引擎
• 规则评分系统
• 检测结果告警和响应
样本云
分布式调度
扫描和筛选
搜索
告警
订阅
数据汇集
中心
工作服务器
工作服务器
工作服务器
数据源和预先筛选
沙箱服务器集群
面向使用者
高级威胁自动化
• 大规模的样本云
• 静态反病毒引擎
• AVE QEX QVM
• 样本预筛选策略
• 沙箱服务器集群
• 虚拟机隔离环境
• 沙箱自动化检测引擎
• 规则评分系统
• 检测结果告警和响应
虚拟机镜像中心
沙箱环境
规则评分
日志
报告
日志处理
虚拟机
操作
VM
该怎么做？
沙箱检测引擎
• 最初的方案：动态库
• 注入目标进程执行检测功能
• 挂钩各系统动态库导出函数
沙箱检测引擎
运行 + 注入
检测模块
辅助进程
目标进程
子进程
Hook
Exploit
VEH
Logging
检测模块
Hook
Exploit
VEH
Logging
检测模块
运行
进程
注入检测模块
消息
• 最初的方案：动态库
• 注入目标进程执行检测功能
• 挂钩各系统动态库导出函数
• 轻量级 😀
沙箱检测引擎
运行 + 注入
检测模块
辅助进程
目标进程
子进程
Hook
Exploit
VEH
Logging
检测模块
Hook
Exploit
VEH
Logging
检测模块
运行
进程
注入检测模块
消息
• 最初的方案：动态库
• 注入目标进程执行检测功能
• 挂钩各系统动态库导出函数
• 轻量级 😀
• 这样就可以了吗？
沙箱检测引擎
运行 + 注入
检测模块
辅助进程
目标进程
子进程
Hook
Exploit
VEH
Logging
检测模块
Hook
Exploit
VEH
Logging
检测模块
运行
进程
注入检测模块
消息
运行 + 注入
检测模块
辅助进程
目标进程
子进程
Hook
Exploit
VEH
Logging
检测模块
Hook
Exploit
VEH
Logging
检测模块
运行
进程
注入检测模块
消息
• 最初的方案：动态库
• 注入目标进程执行检测功能
• 挂钩各系统动态库导出函数
• 轻量级 😀
• 这样就可以了吗？
• 容易被探测 ☹
沙箱检测引擎
运行 + 注入
检测模块
辅助进程
目标进程
子进程
Hook
Exploit
VEH
Logging
检测模块
Hook
Exploit
VEH
Logging
检测模块
运行
进程
注入检测模块
消息
• 最初的方案：动态库
• 注入目标进程执行检测功能
• 挂钩各系统动态库导出函数
• 轻量级 😀
• 这样就可以了吗？
• 容易被探测 ☹
• 容易被绕过 ☹
沙箱检测引擎
运行 + 注入
检测模块
辅助进程
目标进程
子进程
Hook
Exploit
VEH
Logging
检测模块
Hook
Exploit
VEH
Logging
检测模块
运行
进程
注入检测模块
消息
• 最初的方案：动态库
• 注入目标进程执行检测功能
• 挂钩各系统动态库导出函数
• 轻量级 😀
• 这样就可以了吗？
• 容易被探测 ☹
• 容易被绕过 ☹
• 容易丢失远程方式启动进程的追踪链 ☹
沙箱检测引擎
• 第二种方案：驱动程序
• 内核层监控目标系统调用
• 系统回调，通知，过滤
沙箱检测引擎
用
户
空
间
内
核
lib
系统调用
obj
proc
fsflt
drv
沙箱检测驱动程序
lib
lib
• 第二种方案：驱动程序
• 内核层监控目标系统调用
• 系统回调，通知，过滤
• 更完整监控覆盖面 😀
• 更全面的污点追踪 😀
沙箱检测引擎
用
户
空
间
内
核
lib
系统调用
obj
proc
fsflt
drv
沙箱检测驱动程序
lib
lib
• 第二种方案：驱动程序
• 内核层监控目标系统调用
• 系统回调，通知，过滤
• 更完整监控覆盖面 😀
• 更全面的污点追踪 😀
• 这就没问题了吗？
沙箱检测引擎
用
户
空
间
内
核
lib
系统调用
obj
proc
fsflt
drv
沙箱检测驱动程序
lib
lib
用
户
空
间
内
核
lib
系统调用
obj
proc
fsflt
drv
沙箱检测驱动程序
lib
lib
• 第二种方案：驱动程序
• 内核层监控目标系统调用
• 系统回调，通知，过滤
• 更完整监控覆盖面 😀
• 更全面的污点追踪 😀
• 这就没问题了吗？
• 64 位操作系统的 PATCH GUARD 机制 ☹
沙箱检测引擎
用
户
空
间
内
核
lib
系统调用
obj
proc
fsflt
drv
沙箱检测驱动程序
lib
lib
• 第二种方案：驱动程序
• 内核层监控目标系统调用
• 系统回调，通知，过滤
• 更完整监控覆盖面 😀
• 更全面的污点追踪 😀
• 这就没问题了吗？
• 64 位操作系统的 PATCH GUARD 机制 ☹
• 加载驱动的恶意程序的干扰 ☹
沙箱检测引擎
• 第三种方案：基于硬件虚拟化的驱动程序
• 基于虚拟化的系统调用监控功能
• 针对敏感内存读写访问监控功能
沙箱检测引擎
用
户
空