‘’.__class.__mro__[1]  
Note   you   can   also   use   the   __base__   method   on   an   empty   array   to   get   this   object   as   
shown   in   the   below   command:  
●
[].__class__.__base__  
The   __subclasses__()   method   can   be   used   to   list   all   the   subclasses   of   a   class.   With  this   
we   can   get   a   handle   to   every   class   the   application   uses.   Depending   on   the   results   you   
could   have   the   ability   to   execute   terminal   commands,   read   files,   and   much   more.  
●
{{[].__class__.__mro__[1].__subclasses__()}}  
As   you   can   see   above   all   subclasses   of   the   root   object   have   been   displayed.   Next   you   
want   to   look   for   something   interesting.   We   have   access   to   the   ‘subprocess.Popen’   
class,   an   attacker   could   leverage   this   class   to   execute   commands   on   the   server   as   
shown   below:  
●
{{[].__class__.__mro__[1].__subclasses__()[-3]('whoami',shell=True,stdout=-1).co 
mmunicate()[0]  }}  
If   you   are   familiar   with   python   and   know   the   popen   method   then   you   can   tell   that   there   is   
nothing   special   going   on   here,   we   are   using   legit   functionalities   of    python   to   execute   a   
system   command.   Note   you   can   also   use   the   following   command   for   code   execution   if   
the   command   above   doesn't   work:  
●
{{config.__class__.__init__.__globals__['os'].popen('whoami').read()}}  
If   you   find   server   side   template   injection   in   the   Jinja   2   template   engine   the   severity   of   
your   finding   depends   on   what   python   classes   you   have   access   to.   If   you   don’t   have   
access   to   any   system   command   classes   then   code   execution   might   be   impossible(not   
always).   If   you   have   access   to   the   file   class   you   might   be   able   to   read/write   files   to   the   
system.   Make   sure   to   properly   enumerate   all   the   classes   the   root   object   has   access   to   
so   you   can   figure   out   what   you   can   and   can't   do.  
Python  -  Tornado  
According   to   Google   Tornado   is   a   scalable,   non-blocking   web   server   and   web   
application   framework   written   in   Python.   Tornado   also   has   its  own   template   engine   
which   like   many   others   is   vulnerable   to   server   side   template   injection   if  implemented   
incorrectly   as   shown   below:  
Exploiting   SSTI   in   the   tornado   template   engine   is   relatively   easy   compared   to   other   
engines.   Looking   at   the   tornado   template   engine   documentation   it  mentions   that   you   
can   import   python   libraries   as   shown   below:  
Any   library   available   to   python   is   also   available   to   the   template   engine.This   means   that   
you   can   import   a   python   library   and   call   it.   This   functionality   can   be   abused   to   make   
system   commands   as   shown   below:  
●
{%  import  os  %}{{  os.popen("whoami").read()  }}  
●
{%  import  subprocess   
%}{{subprocess.Popen('whoami',shell=True,stdout=-1).communicate()[0]}}  
As   you   can   see   above   the   ‘whoami’   command   was   run   on   the   server   and   the   output   was   
displayed   on   the   screen.   We   are   not   limited   to   just    executing   shell   commands,   since   we   
can   import   any   library   python   we   can   do   anything   we   want.  
Ruby-  ERB  
ERB   is   an   Eruby   templating   engine   used   to   embed   ruby   code.   According   to   Google   “An   
ERB   template   looks   like   a   plain-text   document   interspersed   with   tags   containing   Ruby   
code.   When   evaluated,   this   tagged   code   can   modify   text   in   the   template”.   An   example   of   
a   vulnerable   template   can   be   found   in   the   below   image:  
Note   that   ERB   uses   the   following   tags   for   embedding   code:  
●
●
The   first   example   “”   is   used   to   execute   ruby   code   and   the   second   example   
“”   is   used   to   execute   ruby   code   and   return   the   results.   To   test   for   for   
server   side   template   injection   in   this   engine   use   the   following   command:  
●
As   you   can   see   above   the   code   was   executed   and   it  returned   the   value   of   “49”.   This   is   a   
strong   indicator   that   the   server   is   vulnerable   to   server   side   template   injection.   To   test   for   
code   execution   simply   run   your   ruby   code   as   shown   below:  
●
●
●
●
As   you   can   see   above   the   “whoami”   command   ran   and   the   results   were   outputted   to   the   
screen.   
Ruby  -  Slim  
According   to   Google   “Slim   is   a   fast,   lightweight   templating   engine   with   support   for   Rails   
3   and   later”.   Like   many   other   template   engines   when   improperly   implemented   SSTI   can   
arise.   An    example   of   a   vulnerable   template   can   be   found   in   the   below   image:  
  In   terms  of   exploiting   SSTI   the   slim   template   engine   is   very   similar   to   ERB   except   for   
the   syntax   as   shown   below:  
●
#{code}  
To   execute   a   shell   command   just   wrap   your   command   in   backticks   as   shown   below:  
●
#{   `whoami`   }  
Again   just   like   the   ERB   template   engine   you   can   execute   any   ruby   command   you   want.  
Java  -  Freemarker  
Freemarker   is   the   most   popular   template   engine   for   java   so   it's   a   good   idea   to   learn   how   
to   exploit   it.   Example   vulnerable   code   can   be   found   in   the   below   image:  
As   you   can   see   above   this   vulnerability   stems   from  concatenating   user   supplied   input   
with   a   template   just   like   every   other   template   engine.   To   test   for   SSTI   vulnerability   use   
the   following   payload:  
●
${7*7}  
Similar   to   other   template   engines   to   exploit   this   vulnerability   we   are   going   to   use   an   
object   to   execute   shell   commands.   The    new()   command   can   be   used   to   instantiate   
classes   so   all   we   need   is   a   class   that   can   execute   shell   commands.  
As   shown   above   the   Execute   class   can   be   used   to   execute   shell   commands.   The   
documentation   even   mentions   that   this   class   can   be   used   to   run   arbitrary   code   on   your   
server.   To   use   this   class   we   can   run   the   following   command:  
●
${   ex("whoami")}  
●
[#assign   ex   =   'freemarker.template.utility.Execute'?new()]${   ex('whoami')}  
●
${"freemarker.template.utility.Execute"?new()("whoami")}  
As   you   can   see   above   the   command   “whoami”   ran   and   the   output   was   displayed   in   the   
browser.   From   here   it  would   be   trivial   to   run   a   command   to   execute   your   backdoor   or   
anything   else   you   want.  
Summary  
On-site  Request  Forgery  (OSRF)  
Introduction  
On   site   request   forgery   is   a   fairly   old   vulnerability   that   most   people   don’t   know   about.   
Similar   to   cross   site   request   forgery(CSRF)   with   OSRF   an   attacker   can   force   a   users   
web   browser   to   make   requests   on   the   attackers   behalf.   The   only   difference   is   that   the   
request   is   initiated   from  the   target   application   whereas   CSRF   is   initiated   from  an   
attacker   controlled   site.  
OSRF  
When   looking   at   OSRF   it  can   feel   very   similar   to   XSS.   This   is   because   the   root   cause   of   
this   vulnerability   is   using   user   supplied   input   to   make   HTTP   requests.   An   example   
vulnerable   application   can   be   found   below:  
The   whole   goal   of   this   vulnerable   application   is   to   force   the   user   to   send   a   request   to   the   
“/admin/add”   endpoint.   Doing   so   will   cause   the   application   to   add   an   admin   user   which   
the   attacker   could   use   to   login   to   the   victims   application.   
If   you   see   XSS   on   line   8   you're   absolutely   correct   but   for   the   purpose   of   the   exercise   
let's   assume   that   the   user's   input   is   sanitized   and   we   can't   break   out   of   the   single   
quotes.   In   that   scenario   XSS   wouldn't   work   but   OSRF   will.   Remember   the   goal   is   to   
make   the   user   browser   send   a   request   to   
“127.0.0.1/admin/add?username=ghost&password=lulz”.   This   would   create   a   new   
admin   user   called   “ghost”   with   the   password   of   “lulz”.    Take   a   closer   look   at   the   “/”   
endpoint   and   how   the   “vuln_param”   is   used   to   create   the   src   attribute   of   the   image   tag.   
What   if  an   attacker   were   to   input   “../../”?  
As   you   can   see   above   it  caused   the   application   to   send   a   GET   request   to   the   path“/”   
instead   of   “/images”.   This   is   because   the   “../”   characters   tell   the   server   to   go   back   one   
directory,   if  you're   familiar   with   linux   you   probably   already   know   this.  
The   above   request   is   a   little   better,   if  you   look   at   the   bottom   right   of   the   image   you   can   
see   the   browser   make   a   request   to   “/admin/add.jpg”.   If   we   add   the   username   and   
password   parameters   we   should   be   able   to   add   an   admin   account   as   shown   below:  
Note   when   sending   multiple   parameters   we   must   URL   encode   the   “&”   character   
otherwise   the   browser   will   think   it  belongs   to   the   first   request   not   the   second.   Also   notice   
how   the   password   is   “lulz.jpg”   and   not   “lulz”.   This   is   because   “.jpg”   is   appended   to   the   
string   at   the   end   to   get   rid   of   these   characters   in   our   password   we   can   just   add   a   
dummy   parameter   as   shown   below:  
●
http://127.0.0.1:5000/?vuln_param=../../admin/add?username=ghost%26password=lulz 
%26dummy_param=  
Finally   we   are   able   to   make   a   request   to   the   “/admin/add”   endpoint   causing   the   
application   to   add   a   new   user   called   “ghost”   with   the   password   of   “lulz”.   Note   that   since   
this   is   coming   from  the   users   browser   it  will   contain   all   the   users   authentication   cookies,   
applications   origin   header,   and   more   depending   on   how   the   request   is   sent.  
Summary  
If   you're   able   to   control   part   of   the   URL   used   to   make   an   HTTP   request   you   probably   
have   OSRF.   To   confirm,   try   injecting   the   “../”   characters   which   will   cause   the   request   to   
go   up   one   directory,   if  this   is   possible   you   definitely   have   OSRF   you   just   need   to   find   an   
interesting   endpoint   to   call.   This   is   a   fairly   old   bug   that   most   people   don’t   know   exists  
and   on   top   of   that   it's   really   easy   to   implement   this   vulnerability   in   your   application.   That   
stacked   with   the   fact   that   it's   easy   to   exploit   makes   this   vulnerability   fairly   dangerous.  
Prototype  Pollution  
Introduction  
Javascript   is   a   prototype   based   language.   Prototypes   are   the   mechanism   by   which   
JavaScript   objects   inherit   features   from  one   another.   This   means   that   if  the   prototype   
object   is   modified   in   one   object   it  will   apply   to   every   other   object   as   shown   in   the   below   
example:  
As   you   can   see   above   we   have   two   variables   called   “a”   and   “b”.  We   modify   the  
prototype   object   in   variable   “a”   by   adding   a   variable   called   “foo”   and   giving   it  the   value   of   
“bar”.   You   might   think   that   this   would   have   no   effect   on   variable   “b”   but   it  does.   The   
modified   prototype   object   is   inherited   by   variable   “b”,  so   when   we   call   the   “foo”   variable   
on   “b”   it  prints   “bar”.  
Prototype  Pollution  
As   stated   earlier   javascript   is   a   prototype   based   language,   this   means   that   if  we   modify   
the   prototype   object   it  will   persist   to   all   other   objects.   Take   a   look   at   the   following   code,   
the   goal   here   is   to   set   the   “admin”   variable   to   true:  
As   shown   above   we   are   merging   user   supplied   data   with   the   user   object.   Next   it  will   
create   a   variable   called   admin   and   it  will   check   if  “admin.admin”   is   set   to   true.   If   it  is,  we   
win.   Under   normal   circumstances   this   would   be   impossible   as   we   never   get   the   change   
to   modify   this   variable   but   with   prototype   pollution   we   can.  
During   the   merge   process   if  it  comes   across   a   prototype   object   it  will   add   that   to   the   
user   object.   Since   the   prototype   object   is   inherited   by   all   other   objects   we   can   potentially   
modify   other   variables   as   shown   in   the   below   curl   request.  
In   the   above   image   we   are   sending   a   prototype   object   with   a   variable   called   “admin”   
which   is   set   to   “true”.   When   the   line   checks   to   see   if  admin.admin   is   set   to   true   it  will   
pass   because   the   admin   object   inherited   the   admin   variable   from  the   prototype   object   
which   we   modified.  
Summary  
Prototype   pollution   can   be   thought   of   as   a   type   of   object   injection.   The   prototype   object   
is   inherited   by   all   objects   so   if  we   can   modify   it  in   one   place   it  will   be   inherited   by   
everything   else.   This   can   be   used   to   overwrite   functions,   variables,   and   anything   else.   
Although   this   is   a   lesser   known   vulnerability   it  is   just   as   deadly   as   anything   else.   In   the   
past   this   has   led   to   XSS,   DOS   attacks,   and   RCE   so   there   is   no   limit   to   what   you   can   
potentially   do   with   this.  
Client  Side  Template  Injection  (CSTI)  
Introduction  
Front   end   development   has   rapidly   changed   over   the   past   decade.   Most   modern   day   
web   applications   are   built   using   javascript   frameworks   like   AngularJS,   React,   Vue,   and   
more.   According   to   google   “AngularJS   is   a   JavaScript-based   open-source   front-end   web   
framework   mainly   maintained   by   Google   and   by   a   community   of   individuals   and   
corporations   to   address   many   of   the   challenges   encountered   in   developing   single-page   
applications”.   Most   people   think   these   frameworks   are   immune   to   vulnerabilities   like   
XSS   but   that   is   not   the   case,   it's   just   a   little   different   to   exploit.  
Angular  Basics  
There   are   a   few   things   you   need   to   understand   when   dealing   with   Angular   applications.   
I   will   briefly   go   over   a   few   topics   such   as   templates,   expressions,   and   scopes   which   is   
vital   for   understanding   client   side   template   injection   in   Angular.  
When   you   are   looking   at   an   Angular   application   in   your   browser   you're   actually   looking   
at   a   template.   A   template   is   an   HTML   snippet   that   tells   Angular   how   to   render   the   