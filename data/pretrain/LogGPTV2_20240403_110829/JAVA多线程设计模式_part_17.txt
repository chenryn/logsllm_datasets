islnterrupted 方法-
线程A终于执行到 sleep、wait、join 这些方法时，才马上抛出 InterruptedException:
态。所以线程 Alice 不会抛出 InterruptedException，而会--直继续着自己的操作。
指定而已，即使是for语句、while 语句、if语句、调用方法，都不会去检查中断状
InterruptedException 异常，而会继续处理白己后续的操作。事实上并不只是计算跟
就算这时Bobby调用Alice的interrupt方法，线程Alice也不会抛
InterruptedExccptione
是在 sleep、wait、join 这些方法内部会不断检查中断状态的值，而白己抛出的
所谓中断状态（interrupt starus），是用来表示这个线程有没有被中断的状态。
白己抛出InterruptedException，那 InterruptedException是不会抛出来的。
方法，的确这个时候线程Alice 里会有InterruptedException 异常抛出来。但这其实
芥没有调用 slecp、wait、join 这些方法，或是没有在线程里白已检查中断状态，
如果线程Alice 正在执行的是1+2的计算操作或a=123这类的指定操作。那么，
线程 Alice 在执 sleep、wait、join 时，线程 Bobby 调用了Alice 的 interrupt
Thrcad 类的实例方法 isInterrupted 方法可用来检查指定线程的中断状态。当线
下而就要说明检查线程中断状态的方法，如图5-4所示。
法，线程会成为非中断状态
调用Thrcadinteupted方
-检查中断状态
图5-4线程的中断状态
断状态还是不变
即使调用islnterrupted方法中
(被中断）
中断状态
成为中断状态
调用internupi方法线程会
业
出
---
## Page 169
享互斥。在Channel 参与者中，“从 Producer 参与者接收Data 参与者”与“传送Data
者。并委托ill Channel 参与者米保管想要传递的 Data 参与者。Channel 参与者的工
参与者传递给Consumer 参与者。
参与者的线程（Consumer 参与者）在运行。而现在要从Producer参与者，将Data
界区间的内容应该要连申作完，不该间断。
临界区间的内容，也可以结束掉线程。以安全性的观点米看，这是有危险性的。临
全性，所以不能使川l。这是因为调用 Thread 类的 stop 方法时，就算线程正在执行
方法本来是用来强制结束还在运行中的线程。不过，现在因为 stop 方法可能破坏安
Thread类的stop方法不能使用
中断状态。
法检查的对象是现在的线程（也就是自己这条线程），所以我们无法清除其他线程的
调用Thread.intermupted方法后，中断状态会被清除（设置为非中断状态）。
Thread.interrupted 方法—
作可说是Data 参与者的中继站、桥梁及沟通管路。
关系。
重点回顾
除了这个方法以外，没有其他用来清除中断状态的方法。Thread.interrupted 方
因为可能会有多个线程使用到Channel参与者，所以Channel 参与者中必须进行共
另外 java.applet.Applet 类还有一个 stop 方法，这与 Thread 类的 stop 方法没有
这时，我们在 Producer 参与者与Consumer 参与者之间，安插了Channel参与
intenmupt方法与intermupted方法外观类似，但意义并不相同。请注意结尾有无“ed”
而 Thread.interrupted 方法会检查现在线程的中断状态，并清除之（Thread 类的
这个Patterm 中，有若建立Data 参与者的线程（Producer 参与者）与使用Data
然而，Thread 类里还有 stop 这个 deprecated 方法（不建议使用的方法）。这个
这章的进阶说明讨论了interrupt 方法的取消等待。
interrupted 方法是检查并清除中断状态的方法.
这一章我们学习了Producer-Consumer Pattern。
interrupt 方法是将线程切换到中断状态的方法。
一检查并清除中断状态
Producer-Consumer-
一我来做，你来用
5载
---
## Page 170
尝试将范例程序的Main类（List 5-1）改写如下（List 5-5，但如执行范例（见
[下列语句中，正确的请同答○，不正确的请回答×。
参与者的空间足够，可作为Producer 参与者与 Consumer 参与者处理速度差的缓冲，
练习问题
因为这样的设计，使线程之间可以安全地沟通。若Channel参与者可围积Data
pubiic class Main [
问题5-1（基础知识的确认）
解答请见附录A
那么，就进入练习问题吧。
这就是Producer-Consumer Pattern。
图5-5）所示，程序却停下来了。请问发生了什么问题呢？
问题5-2（停住的程序）
（6）head 字段的值不会超过 buffer.length。
（5）桌上放满了蛋糕，再也放不下时，count字段的值等于buffer.length-1。
（1）MakerThread类的构造器中所写的 super(name)调用出 Thread类的构造器。
List 5-5
（4）
3)
(2）MakerThread 类的 nextld 方法变成 Synchronized，是由于 EaterThread 类
 public static void main(Stringll args) 1
如果桌上没有任何蛋糕时，count字段的值就是 0。
进行block。
在桌上没有放蛋糕时调用take，线程就会去获取 Table 的实例的 lock，而
也在调用它的原因。
new EaterThread("Bobby", new Table(3), 92653) .start();
new MakerThread("Alice", new Table(3),
不能正常执行的Main类（Main.java）
《停在这里。CTRL+C 结束程序)
Alice puts [ Cake No.3 by Alice
Alice puts [ Cake No.2 by Alice
Alice puts [ Cake No.l by Alice
Alice puts [ Cake No.O by Alice
图5-5执行结果
31415).start ();
---
## Page 171
Host 类(List 5-6 ）exccute 方法，会按参数 count指定的次数，连续调用 doHeavyJob
请在范例程序的 Tablc 类中（List 5-4），加上用来清除桌上所有蛋糕的 clear
[ 某个对 Single Threaded Execution Pattcm(第 1 章)与 Guarded Suspension Patterm
va
ava
public ciass Host ↑
方法。doHeavyJob是很繁重的工作（线程会花很多时间处理的“作），而且还
问题5-7（使繁重的工作可以取消）
改写范例程序的 Main类（List 5-1），使程序能在开始执行约 10秒后结束掉所
请改写 Host类的execute 方法，使它可以中途取消，
执行很长一段的时间。
有线程。然后程序就此结束，但是请不要更改到Main类以外的部分。
问题5-6（结束线程）
方法。clcar 方法没有参数，返回值是void。
问题5-5（加上清除蛋糕的方法）
更加目了然。
请在Table类（List 5-4）加上调试用的输出，使线程是否有在进行wait 等待能
取消不掉。当count参数传入的数字一人，线程光要从退出exexute方法，就要
问题5-4（加上调试输出）
请回答这个问题。
什么--定需要到 synchronized方法呢？实在是令人不解。
问题5-3（单纯的疑惑）
“take 方法只不过是“没有蛋糕的时候就等，有蛋糕就拿”而己，不是吗？为
（第3章）不共熟悉的人看完这一-章，出现下面这样单纯的疑惑：
List 5-6
private static void doHeavyJob() f
public static vcid execute(int count) {
for (int i = Q;   System.currentTimeMillis())
long start = System.currentTimeMillis(l; 
System.out.println("dcHeavyJob BEGIN");
！！（停留约10秒的循环）
11是用来取代“无法取消的繁重工作”
！！下面的程序代码
doHeavyJob ();
繁重的工作（Hostjava)
Producer-Consumer---
我来做，你来用
5载
5
---
## Page 172
[List 5-7将范例程序Table类（List 5-4）的 notifyAll改成 notify。使用这个类，
public class Table ↑
请思考问题的原因，并写出程序证明您的想法。
有可能出现蛋糕无法传递的情况，
问题5-8（notify无法正常运行的情况）
InterruptedException I
List 5-7
public synchronized String take() throws InterruptedExceptior
public
private int court;
private int head;
private int tail;
privace final Strirg[l buffer; 
//获取蛋糕
/！放置蛋糕
public Tableiint count) l
System.out.println(Thread.currentThreaa().getName() +
nctify();
while (count >= buffer.length) {
this.count - 0;
this.tail = 0;
this.buffer = new String[count];
tail = (tail + l) & buffer.length;
buffer[tal]
this.head = 0;
System.out.println("doHeavyJcb END");
count++;
wait();
不用notifyAll， 而用 notify 的 Table 类（Table.java）
// busy loop
syrchronized
- cake;
//buffer内的蛋糕数
/！下一个take的地方
//下--个 put 的地方
void
put(string
cake)
throws
---
## Page 173
在这里休息·下，来玩个智力激荡转换心情吧。
public class Something ↑
Something 类(List 5-8)声明了一个 method方法，请问这个方法有什么功能呢？
问题5-9（智力激荡）
takes " + cake);
 public static voii method (long x) throws Interruptedexception
List 5-8
if (x!= 0）{
return cakei
notify();
count--
head:
String cake - buffer[head];
whiie (count <- O){
wait{);
synchronized (object) 
:(lanaLqo meu - ioaCqo iceCac
这是做什么的（Something.java）
object.wait(x);
[head + l)  buffer.length;
Producer-Consumer
-我来做，你来用
5
---
## Page 175
Read-Write Lock
看吧，不过看的
时候不能写喔
大家想看就
第6章
---
## Page 176
例程序，是有多个线程，会对Data类的实例进行读取或写入的操作。
特别强调读取端（Readers）是复数的。
Lock Patterm（参考附录E [Lewis00]）。其中 Readers/Writer Lock Patterm这个名称，
[Lea]）.Reader/Writer Lock Pattern （参考附录 E [Holub00][Lewis00])、Readers/Writer
享互斥分开来思考，就可以提升程序的性能。
线程就不可以有进行读取或写入。
没有关系。但，有人在读取的时候，不可以做写入的操作。
用来读取的锁定。而要写入的时候，则必须获取用来写入的锁定。
只有线程对线程“写入”的操作而已。把视点放在实例状态变化的角度来看时，“读
请先不要擦！”于是老师就等待火家都看完。
取”
师想要擦掉黑板，写上下一段的说明。这时候学生们出声了：“老师，我们还在看！
范例程序
 Read-Write Lock Pattern
接着我们米看看使用Read-Write Lock Pattern 的范例程序吧。在这里要写的范
--般来说，进行共享瓦斥会使程序性能变差，但将写入的共享互斥与读取的共
写入的时候，实例的状态就会改变。于是，当有一个线程在写入的时候，其他
范例程序的类图如图6-1所示。
ReaderThread
Data
Main
类--览如表6-1所示。
Read-Write Lock Patterm 将读取与写入分开来处理。在读取数据之前，必须获取
ReadWriteLock
WriterThread
与“入”本身是不同的东西。
因为进行读取时，实例的状态不会改变，所以，就算有多个线程在同时读取也
老师写在黑板上的说明，全班的学生都一起看着。当大家都还在看的时候，老
当线程“读取”实例的状态时，实例的状态不会变化。会使实例状态变化的，
这一章所要学习的是Rcad-Write Lock Pattern。
名
称
提供读，写锁定的类
进行读取操作的类
进行写入操作的类
可读可写的类
操作测试用的类
说
---
## Page 177
Data类
取”这个Data 实例的线程（ReaderThread）与用来“写入”这个 Data 实例的线程
Main 类
(WriterThread )。
Data类（List 6-2）是可以进行读取（read）与写入（write）的类。
Main类（List 6-1）首先会构建出一个Data类的实例。再建立并启动用来“读
buffer 字段是实际写入对象的 char 数组。
public class Main ↑
在这里启动6条读访问的线程，与2条写入用的线程。
R+aderThread
List 6-1
public static void main(String[l args) {
new Writerrhreadi(data, "abcdefghijklmnopqrstuvwxyz") .start ();
[new WriLerThread (data, "ABCDEFCHIJKLMNOPQRSTUVWXYZ") ,start () ;
new ReaderThread(data).start();
new ReaderThread(data).start();
new ReaderThread(data).start();
Data data = riew Data(lc);
lew
new ReaderThread(data).start().
Read-Write Lock-
ReaderThread(data).start()
ReaderThread(data).start():
Main 类 (Main.java)
Reads+
图6-1
rete
readUnlock
readLock
AeadwriteEock
范例程序的类图
一大家想看就看吧，不过看的时候不能写喔
Data
Uses -
4Writes
data
Nriterrhread
3
---
## Page 178
新的char 数组（mewbuf)，并将newbuf 返回。
buffer字段。
适用。lock.readLock(}～lock.readUnlock()在保护的是仆么呢？在这里所保护的是
3
个部分将在 Before/After Pattern 的实现。这个 Patterm的主要结构如下所示：
以后，无论 doRcad 里面发生了什么事，都还是要调川 lock.readUnlockO的关系。这
锁定，而lock.readUnlock(表示解除读访问的锁定。
的前后夹着lock.readLock()与lock.readUnlock()。lock.readLock()表示获取读访问的
*字符填满 buffer，*在这里表示初始值。
doWrite 方法会进行实际的写入操作。在这里，会使用参数c所传入的字符，将
央住 doRead的地方，使用了 try..finally 结构。这是因为在调川了 lockreadLock()
doRead 方法会进行实际的读取操作。在这里，会拷贝 bufer 的内容，分配一个
write 方法与 read 方法的结构一样。只不过是下面这几行取代掉而已：
read 方法是“读取”的操作。实际的读取操作是由 doRead 方法进行的，doRead
lock.readUnlock()
所以，看到 synchronized，就息考它在保护的是什么这个原则，在这里应该也
解除锁定
这两种写法，在概念上都是…-样的结构。两者都会执行
前置处理（获取锁定）
构造器会初始化 buffer 字段，分配出一个 char 数组，而长度由参数指定。并以
doReadl)
lock.readLock()
这
实际的操作
获取锁定
synchrohized（锁定用的实例）{
在这里，请您回想 synchronized块。synchronized块是这样子使用的：
try 1 
lock 字段是这个 Pattern 的主角—ReadWriteLock的实例。
冏一
 finally l
一连串的操作。
实际的操作
实际的操作
后续处理（解除锁定）
lock.writeUrlock()
dowrite(c)
lock.writeLock()
---
## Page 179
间会比读取来的长。
对 buffer 写入一个字时，就调用一次 slowly。也就是说这个类是假定写入所花的时
每调用一次doRead，slowly也会被调用-一次。
过为了使程序的执行结果更容易理解，此处就采用这种方式。
buffer 的内容填满。“使用传入的字符把数组填满”这种操作虽然没有什么意义，不
doRead方法与doWrite方法都有调用这个slowly方法，不过调用的方法有点不--样
slowly方法则是用来模拟需要花点时间的L作。在这里会让程序 sleep 约 50ms。
public class Data 1 
List 6-2
private charil doRead()
public void write(char c) throws InterruptedException
public char[l read() throws InterruptedException l
public Data(int size) [
private final ReadwriteLock lock = new ReadwriteLock();