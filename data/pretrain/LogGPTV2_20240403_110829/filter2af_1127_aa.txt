### 一、前言
在上文中，我们主要是针对随机数安全进行了理论方面的密码学研究。在理论层面上我们又进行了简单代码的分析。而本文不在过多的介绍理论知识，而更多的将重点放在代码层面，针对现实实例中的代码进行安全分析。
### 二、比特币随机种子生成详解
首先我们来研究下区块链最大的应用——比特币在随机数方面是如何实现的。
首先我们将源码下载到本地，对`random.h`进行查看。得到源码：
    /* Seed OpenSSL PRNG with additional entropy data */
    void RandAddSeed();
    /**
     * Functions to gather random data via the OpenSSL PRNG
     */
    void GetRandBytes(unsigned char* buf, int num);
    uint64_t GetRand(uint64_t nMax);
    int GetRandInt(int nMax);
    uint256 GetRandHash();
    void RandAddSeedSleep();
    /**
     * Function to gather random data from multiple sources, failing whenever any
     * of those source fail to provide a result.
     */
    void GetStrongRandBytes(unsigned char* buf, int num);
    /** Get 32 bytes of system entropy. Do not use this in application code: use
     * GetStrongRandBytes instead.
     */
    void GetOSRand(unsigned char *ent32);
    /** Check that OS randomness is available and returning the requested number
     * of bytes.
     */
    bool Random_SanityCheck();
    /** Initialize the RNG. */
    void RandomInit();
我们对这些函数进行分析：
第一个函数`void RandAddSeed();`：通过OpenSSL的伪随机数发生器生成随机数种子。
`void GetRandBytes(unsigned char* buf, int num)`为通过OpenSSL的伪随机数发生器生成随机数据。
`uint64_t GetRand(uint64_t nMax)`为对生成的随机数进行获取。
`int GetRandInt(int nMax)`用于获取整数随机数。
`uint256 GetRandHash()`用于获取随机数哈希。
`void RandAddSeedSleep()`设置随机数生成的休眠时间。
`void GetStrongRandBytes(unsigned char* buf, int num)`从多个源进行随机数获取。
`void GetOSRand(unsigned char *ent32)`从操作系统底层获取随机数。
`bool Random_SanityCheck()`用于检查操作系统随机数是否可用。
`void RandomInit()`对伪随机数发生器进行初始化。
下面我们详细讲解下其中的部分函数功能：
首先我们可以看：
    void RandAddSeed()
    {
        // Seed with CPU performance counter
        int64_t nCounter = GetPerformanceCounter();
        RAND_add(&nCounter, sizeof(nCounter), 1.5);
        memory_cleanse((void*)&nCounter, sizeof(nCounter));
    }
其中包含了三句话：  
首先函数会获取硬件的时间戳，并将时间戳赋值给`nCounter`。之后调用了`RAND_add`函数以时间戳为种子生成了随机数。最后执行了内存清理函数。
而区块链还可以利用用户本地的操作系统数据进行随机数的生成：
我们来看`GetOSRand(unsigned char *ent32)`方法：
    /** Get 32 bytes of system entropy. */
    void GetOSRand(unsigned char *ent32)
    {
    #if defined(WIN32)
        HCRYPTPROV hProvider;
        int ret = CryptAcquireContextW(&hProvider, nullptr, nullptr, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
        if (!ret) {
            RandFailure();
        }
        ret = CryptGenRandom(hProvider, NUM_OS_RANDOM_BYTES, ent32);
        if (!ret) {
            RandFailure();
        }
        CryptReleaseContext(hProvider, 0);
    #elif defined(HAVE_SYS_GETRANDOM)
        /* Linux. From the getrandom(2) man page:
         * "If the urandom source has been initialized, reads of up to 256 bytes
         * will always return as many bytes as requested and will not be
         * interrupted by signals."
         */
        int rv = syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0);
        if (rv != NUM_OS_RANDOM_BYTES) {
            if (rv  1 && modulo = MIN_BET && amount  0 && betMask  0 && betMask  placeBlockNumber, "settleBet in the same block as placeBet, or before.");
            require (block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, "Blockhash can't be queried by EVM.");
            require (blockhash(placeBlockNumber) == blockHash);
            // Settle bet using reveal and blockHash as entropy sources.
            settleBetCommon(bet, reveal, blockHash);
        }
在这个代码中，主要函数为placeBet和settleBet，其中placeBet函数主要为建立赌博，而settleBet为开奖。而在此合约中，我们完全遵守了`hash-commit-reveal`方案，随机数的实现放在了服务端，过程如下：
  * 用户首先在项目平台中选择好自己需要下注的方式，之后点击确认下注。
  * 之后服务端生成随机数reveal，生成本次赌博的随机数hash信息，有效最大blockNumber，并将这些数据进行签名，并将commit和信息签名传给用户。
  * 用户将上述由随机数而得到的hash以及lastBlockNumber信息打包，并传入placebet函数。
  * 服务端在一段时间之后，将带有随机数和服务端执行settlebet开奖，而此时开奖信息则可控，即选择部分对自己不利的中止，以使庄家获得更大的利润。
下面我们再看一个实例：
    pragma solidity ^0.4.16;
    contract Ethraffle_v4b {
        struct Contestant {
            address addr;
            uint raffleId;
        }
        event RaffleResult(
            uint raffleId,
            uint winningNumber,
            address winningAddress,
            address seed1,
            address seed2,
            uint seed3,
            bytes32 randHash
        );
        event TicketPurchase(
            uint raffleId,
            address contestant,
            uint number
        );
        event TicketRefund(
            uint raffleId,
            address contestant,
            uint number
        );
        function chooseWinner() private {
            address seed1 = contestants[uint(block.coinbase) % totalTickets].addr;
            address seed2 = contestants[uint(msg.sender) % totalTickets].addr;
            uint seed3 = block.difficulty;
            bytes32 randHash = keccak256(seed1, seed2, seed3);
            uint winningNumber = uint(randHash) % totalTickets;
            address winningAddress = contestants[winningNumber].addr;
            RaffleResult(raffleId, winningNumber, winningAddress, seed1, seed2, seed3, randHash);
            // Start next raffle
            raffleId++;
            nextTicket = 0;
            blockNumber = block.number;