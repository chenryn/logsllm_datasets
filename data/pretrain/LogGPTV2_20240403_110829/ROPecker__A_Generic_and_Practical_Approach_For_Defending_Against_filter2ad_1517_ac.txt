the instructions in a temporally created environment with an
initial context identical to the present one. The implementation
details of the emulator is provided in Section VI-B4.
VI.
IMPLEMENTATION
To evaluate the effectiveness and performance of our
approach, we have implemented a prototype ROPecker for
x86 32bit Ubuntu 12.04 with kernel 3.2.0-29-general-pae. The
ROPecker system consists of two key components: 1) an ofﬂine
pre-processor which aims to generate a database accelerating
run-time checking, and 2) a loadable kernel module which
responds to the run-time events and invokes the ROP checking
algorithm.
A. Ofﬂine Pre-processor
Given a target application, the ROPecker pre-processor
collects the application binaries and their dependent shared
libraries. For each binary, the pre-processor extracts the size
of the executable code segments from the binary header. For
a code segment of n bytes, the pre-processor allocates a bit-
vector of n/2 bytes, such that each byte in the executable
code segment corresponds to a 4-bit slot in the bit-vector.
The slots are indexed by the byte offset in the executable
code segment. As shown in Table II,
the slot values are
assigned according to: 1) the type and optional alignment
information of the instruction starting from this byte; and
2) the type and stack modiﬁcation behavior of the gadget
(in our case, a maximum of six contiguous instructions that
ended with an indirect branch) starting from this byte. During
emulation, instruction information is used to decide whether
the end of the emulated gadget is reached, which is an indirect
branch instruction. During run-time gadget chain detection,
we use the gadget information to identify gadgets and their
chaining points (e.g., a gadget manipulates the stack pointers
6
TABLE II.
THE FORMAT OF THE BIT-VECTOR TABLE.
Value
0000
0001
0010
0011
0100
Instruction Information
Instruction Type
Aligned non-branch
Aligned direct branch
Aligned indirect branch (ret)
Aligned indirect branch (call *,jmp *)
Aligned non-branch
0101 to 1110 Aligned non-branch
1111
Unaligned
Gadget Information
Gadget Type
Emulation Decision
Continue emulation. Not a gadget
Not a gadget
Stop emulation
Ret-based gadget
Stop emulation
Jmp-based gadget
Stop emulation
1) Stack pivoting
2) Jmp-based gadget
3) Stack offset too large
Ret-based gadget
Unaligned gadget
Continue emulation
Stop Emulation
Continue emulation
Payload Detection
Stop gadget chaining
Stop gadget chaining
Stack offset 4
Need emulation
Need emulation
Stack offset 4*(Value-4)
ROP Found
to point to the next gadget). The bit-vector tables from all
binaries form the IG database. The IG database covers the most
frequently used instruction types, gadget types and their stack
manipulation behavior, and leaves only the rare cases to the
run-time emulator. This design minimizes the invocations of
our emulator and thus reduces the run-time detection overhead.
To build the IG database, we develop a tool to analyze the
gadget information of a given binary, based on the disassembly
library diStorm [21] (around 11K SLOC). Speciﬁcally, for
each byte in the executable code segment, we run the gadget-
analysis tool to disassemble six instructions starting at that
byte. If an indirect branch instruction is found, we further
analyze the stack manipulation behavior of the gadget, and
store the result in the IG database. The alignment information
in our implementation is extracted from readelf and objdump
outputs. Note that we could use other disassembler tools
(e.t., IDA Pro or the tool in [22]) to verify the alignment
information.
The alignment information is optional since it is platform-
dependent and the alignment analysis may not be completely
accurate for certain applications. Thus, end users can se-
lectively or completely disable the alignment checking. The
main beneﬁt of the alignment checking is to increase the
bar for launching ROP attacks on x86 platform, because the
adversary has to give up using unaligned gadgets. By doing
so, the adversary generally needs more gadgets to launch an
ROP attack. According to the analysis on the Q data set,
the adversary generally needs two more gadgets for an ROP
attack. Moreover, the adversary also needs more code base.
For example, Q generally requires 100KB or more code base
for constructing an ROP payload with only aligned gadgets.
We choose bit-vectors as our pre-processing database in-
stead of hash tables, because the bit-vector indexing/query is
more efﬁcient and stable. For the bit-vector, the time cost of a
query is only one memory access without false positive, while
for a hash table, the time cost of a query is the computation
cost of the hash function plus one or more memory access if
there is a collision. In addition, the bit-vector is also space
efﬁcient, as indicated in our experiment (Section VIII-B).
B. Kernel Module
We build the ROPecker module as a loadable kernel
module, which can be automatically installed when the system
boots up. The module consists of 7K SLOC, where a large
portion (around 4.4K) is attributed to the instruction emula-
tor [23]. The ROPecker module undertakes four main tasks:
1) to set up ROP checking triggers; 2) to collect the address
locations of the shared libraries, 3) to check the branching
history; and 4) to emulate instructions.
1) ROP Checking Triggers: The module inserts hooks in
the Interrupt Descriptor Table (IDT) and the system call table
to intercept the page fault exceptions and risky system calls,
respectively.
Sliding Window Setup. We use the NX (Never eXecute)
page table permission in any DEP-capable modern processor,
to set up the sliding window. ROPecker initially sets the NX
bits in the loaded virtual memory pages of the application
and library code. During execution, the application will trig-
ger page faults by trying to execute code in non-executable
pages. Once the page fault is captured, the ROPecker module
identiﬁes the relevant faults by using process ID and page
fault error code. The error code is a special combination
(P F IN ST R|P F U SER|P F P ROT ), which means that
the page fault exception is triggered due to the protection
violation during instruction fetching from user space. In the
normal application execution, the code (NX pages) without
execution right will never be executed. Thus, this error code
conﬁrms that the exception is triggered by the sliding window
mechanism.
Risky System Call Interception. The system calls to inter-
cept are mprotect, mmap2 and execve. For the mprotect and
mmap2 calls, the module checks the request before passing it
to the kernel. Any request to change a read-only code region
to writable is rejected. Any request to change the data regions
to executable is rejected. Then, the module invokes the ROP
checking algorithm to ensure that there is no ROP gadget
chain in the current stack. Otherwise ROPecker will return
the system call with an error code to indicate the failure of the
request.
The system call execve is able to start a new process with
some prepared input parameters. For instance, the adversary
may use the libc function system or directly invoke the system
call execve to open a shell, in which the adversary is able
to execute arbitrary commands. The end user can create a
simple policy: ROPecker directly rejects all such requests
for all selected applications. In most cases, it works well.
However, for some legitimate applications, they may also send
such requests for certain purposes. The ﬁrst policy may lead
to the non-coexistence of ROP with these applications. To
support such applications, ROPecker can be conﬁgured to
launch the ROP checking algorithm to verify if there is an
ROP attack. If not, ROPecker passes the request to the kernel.
7
By doing so, ROPecker and such applications can coexist, but
the performance overhead may slightly increase due to the
extra checking.
2) Memory Mapping Acquisition: ROPecker should ac-
quire the virtual memory mapping of the protected application
and its shared libraries. If the Address Space Layout Random-
ization (ASLR) mechanism is enabled, the shared libraries are
loaded to random addresses in different application instances.
In the commodity OSes, there is no exported interface for
kernel modules to get the mappings of a particular application.
Thus, in order to locate the exact memory mappings for the
target application, the ROPecker module has to intercept the
mapping-manipulation operations or analyze the corresponding
kernel data structures to construct the mappings.
Operation Interception. For the memory mapping manipu-
lation operations, they are driven by the application requests
through certain system calls. In a Linux system, the kernel
reserves the mapping region for the application binary in the
system call execve, while in the system call mmap2/mummap,
the kernel reserves/releases the mapping region for shared
libraries. By intercepting such system calls, ROPecker can
get the mapping information from the parameters and the
return values. For instance, in the system call mmap2, the
base address of a shared library can be obtained either from
the return value or the ﬁrst parameter, and the length of the
occupied memory region can be obtained from the second
parameter. In addition, we need to intercept the open and close
system calls, as they provide the name of the shared libraries.
The names will be used in the database installation phase.
Data Structure Analysis. Certain shared libraries (e.g., the
library loader) are loaded by the kernel by default, rather than
being driven by the application request. Thus, we can not
ﬁnd their mapping information by intercepting system calls.
To handle such cases, we can analyze the corresponding data
structures to get the needed information. In a commodity oper-
ating system, the kernel usually has one or more dedicated data
structure to maintain the memory mapping information. The
Virtual Memory Area (VMA) is the data structure in Linux that
maintains the start and end of memory mappings/segments.
Each library is represented by a VMA structure (i.e., memory
segment). The name of the shared library is also linked to
the VMA structure. In addition, all VMAs are linked together
and the list header can be easily found following the task
structure. Thus, by traversing the VMA list, we can easily
locate the corresponding VMA and get the memory mapping
information. Note that the traversing is only done once, since
the library locations are ﬁxed when the application starts to
run.
3) LBR Access: The IA32 DEBU GCT L MSR is the
control register in the LBR mechanism. Through this MSR,
ROPecker can enable, disable and manipulate the record-
ing behaviors, e.g.,
it allows the LBR to only record us-
er space branches. The LBR values are stored in the M-
SR registers, from MSR LASTBRANCH k FROM IP and M-
SR LASTBRANCH k TO IP, where k is the number of the
branch record, e.g., the range of k is 0-16 on the Intel i5
processors. To read and write such LBR MSRs, ROPecker
must leverage the privileged instructions such as rdmsr and
wrmsr.
4) Instruction Emulation: The ROPecker module creates a
shadow environment for emulating instructions. In the shadow
environment, the initial context is initialized using the context
of the interrupted application. It is challenging to create the
shadow virtual address space. The virtual address space is
quite large, e.g., 3GB in an x86-32bit system. To get a
complete copy, the time and space cost will be extremely
high. In addition, the shadow environment will be immediately
dropped when the current round of the checking ﬁnishes. To
save cost, we borrow the copy-on-write idea from the Linux
kernel. Speciﬁcally, we make the virtual address space read-
only for the emulator, meaning that the emulator can freely
read any address but can not write. When a write operation
is needed, ROPecker creates a mapping table which records
the destination address together with the new value. Later, any
reading or writing to this address will be redirected to the
corresponding table entry. After the checking algorithm, the
mapping table is cleared for avoiding polluting the next round
emulation.
VII. PARAMETER EFFECTS
In this section, we discuss and evaluate the effects of
in terms of performance and
ROPecker parameter tuning,
security (accuracy).
A. Gadget Chain Threshold
The gadget chain threshold affects the performance of the
monitored processes. Bigger threshold generally incurs higher
performance overhead. However, the performance degradation
is very limited according to our experiment results. Figure 4
indicates that ROPecker stops the ROP detection after one or
two attempts in up to 96.8% cases. The gadget chain threshold
also affects the detection accuracy. An ideal threshold should
be smaller than the minimum length minrop of all ROP gadget
chains, and at the same time, be larger than the maximum
length maxnor of the gadget chains identiﬁed from normal
execution ﬂows. The threshold can be any number between
maxnor and minrop, and the choice does not affect
the
performance, because the ROP detection algorithm always
stops before it reaches the threshold. If maxnor is larger than
minrop for certain applications, it is impossible to ﬁnd out
an ideal threshold and ROPecker inevitably produces false
positives and/or false negatives.
To ﬁnd maxnor, we measured the lengths of gadget chains
from many normal applications, which include 17 popular
Linux tools (e.g., grep, ﬁnd, less and netstat) under directory
/bin and /user/bin, 12 benchmark tools of SPEC INT2006, and
3 large binaries (the video processing tool ffmpeg 2.2.0, the
graphic processing tool graphics-magick-1.5.1, and the Apache
web server httpd-2.4.6). In our experiments, ROPecker counts
the lengths of the identiﬁed gadget chain in each invocation.
As shown in Figure 4, no gadget
is detected in 84.37%
of the ROPecker invocation. The counts of detected gadget
chain drops when gadget chain length increases. The detected
chains with 6, 7, 8, 9 and 10 gadgets together only occupy
0.00006% in the total measurements. 10 is the largest length
of gadget chain we have detected in the experiments. Note that
the percentage results also reﬂect the efﬁciency of our ROP
detection algorithm on normal applications, i.e., in the major
cases (84.37%) the future payload detection stops the analysis
8
TABLE III.
THE CONFIGURATIONS OF THE EXPERIMENT MACHINE.
Conﬁgurations
CPU
Memory
Network Card
Disk
Descriptions
Intel i5 M540 with two 2.53GHZ cores
4GB DDR3 1333MHZ
Intel 82577LM Gigabit
320G ATA 7200RPM
attack, allowing our algorithm to distinguish ROP attacks from
normal executions. For a particular application, the gap is even
larger, e.g., the maximum length of htediter is 9. Even so, if the
adversary inserts too many long gadgets, our detection sill fails.
The extra space cost for the multiple-window accumulation
extension is small, since ROPecker only needs a short cycle
buffer (i.e., the length is 3 in our example) to maintain the
gadget lengths. In addition, the extra time cost is also small,
because the checking only needs one integer comparison.
C. Sliding Window Size
The sliding window size is also a critical parameter for
ROP detection. Larger window size offers better performance,
but it may give more opportunities for the adversary to collect
enough gadgets within the sliding window to launch a mean-
ingful ROP attack. Thus, we should select a proper window
size to balance the performance and security. According to the
statistical results from Q [17], the adversary has low possibility
to launch a meaningful ROP attack, if we can limit the scope
of the executable code at any time within 20KB. To be safety,
we recommend setting the window size smaller than 20KB.
In our experiment we set the window size as 8KB (2 pages)
and 16KB (4 pages). According to the performance results in
Section VIII-C, the performances with larger window size are
generally better, but the performance differences are not that
big. Even in some cases, they can achieve almost the same
performance.
VIII. EVALUATION
We evaluate the security effectiveness,