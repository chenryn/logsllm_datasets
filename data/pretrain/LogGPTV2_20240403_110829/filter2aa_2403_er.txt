612 
逆向工程权威指南（下册） 
        14: astore_1 
        15: getstatic  
#5   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        18: new   
#8   
// class java/lang/StringBuilder 
        21: dup 
        22: invokespecial #9   
// Method java/lang/StringBuilder."":()V 
        25: ldc   
#10   
// String incorrect month index: 
        27: invokevirtual #11   
// Method java/lang/StringBuilder.append:(Ljava/  
     lang/String;)Ljava/lang/StringBuilder; 
        30: aload_1 
        31: invokevirtual  #12   
// Method IncorrectMonthException.getIndex:()I 
        34: invokevirtual #13   
// Method java/lang/StringBuilder.append:(I)Ljava  
     /lang/StringBuilder; 
        37: invokevirtual  #14  
// Method java/lang/StringBuilder.toString:()  
     Ljava/lang/String; 
        40: invokevirtual  #7   
// Method java/io/PrintStream.println:(Ljava/lang  
     /String;)V 
        43: aload_1 
        44: invokevirtual  #15   
// Method IncorrectMonthException.printStackTrace  
:()V 
        47: return 
      Exception table: 
        from      to target type 
            0      11    14   Class IncorrectMonthException 
自偏移量为 14 的指令开始的内容就是异常表 Exception table。在程序从偏移量 0 运行到偏移量 11（含）
期间，发生的全部异常状况都会交给 IncorrectMonthException 处理。当输入值为无效值时，程序流向导至
偏移量为 14 的指令。实际上，主程序在偏移量为 11 的地方就已经结束。正常情况下，程序不会执行到偏
移量为 14 的指令，而且也没有任何条件转移指令或者无条件转移指令会跳转到该处。只有当程序遇到例外
情况时，程序才运行到偏移量大于 11 的指令。异常处理的第一条位于偏移量 14。此处的 astore_1 会把外部
传入的、异常处理实例的引用指针存储到 LVA 的第一个存储槽。在此之后，偏移量为 31 的指令将会通过这
个引用指针调用异常处理实例的 getIndex()方法。此时偏移量为 30 的指令把这个引用指针已经提取出来了。
异常表的其他指令都是字符串处理指令：getIndex()方法返回局部变量 index 的整数值，这个值由 toString()方
法转换为字符串，再与字符串“incorrect month index:”连接，最终通过 println()和 printStackTrace()方法显示
出来。在调用了 printStackTrace()之后，整个异常处理过程宣告完毕，程序恢复正常状态。虽然本例偏移量位
47 的指令是结束 main()函数的 return 指令，但是此处可以是其他的、在正常状态下需要执行的任何指令。 
接下来，我们来看看 IDA 显示异常处理方法的具体方式。 
指令清单 54.14  笔者计算机里某个 class 文件的异常处理方法 
      .catch java/io/FileNotFoundException from met001_335 to met001_360\ 
  using met001_360 
      .catch java/io/FileNotFoundException from met001_185 to met001_214\ 
  using met001_214 
      .catch java/io/FileNotFoundException from met001_181 to met001_192\ 
  using met001_195 
      .catch java/io/FileNotFoundException from met001_155 to met001_176\ 
  using met001_176 
      .catch java/io/FileNotFoundException from met001_83 to met001_129 using \ 
met001_129 
      .catch java/io/FileNotFoundException from met001_42 to met001_66 using \ 
met001_69 
      .catch java/io/FileNotFoundException from met001_begin to met001_37\ 
  using met001_37 
54.16  类 
一个简单的类如下所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
613 
指令清单 54.15  test.java 
public class test 
{ 
        public static int a; 
        private static int b; 
        public test() 
        { 
            a=0; 
            b=0; 
        } 
        public static void set_a (int input) 
        { 
                a=input; 
        } 
        public static int get_a () 
        { 
                return a; 
        } 
        public static void set_b (int input) 
        { 
                b=input; 
        } 
        public static int get_b () 
        { 
                return b; 
        } 
}  
构造函数把两个变量设置为 0： 
  public test(); 
    flags: ACC_PUBLIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: aload_0 
         1: invokespecial  #1   
// Method java/lang/Object."":()V 
         4: iconst_0 
         5: putstatic  
#2   
// Field a:I 
         8: iconst_0 
         9: putstatic  
#3   
// Field b:I 
        12: return 
设置 a： 
  public static void set_a(int); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: iload_0 
         1: putstatic  
#2   
// Field a:I 
         4: return 
获取 a： 
  public static int get_a(); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=0, args_size=0 
         0: getstatic  
#2   
// Field a:I 
         3: ireturn 
设置 b： 
  public static void set_b(int); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
614 
逆向工程权威指南（下册） 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=1, args_size=1 
         0: iload_0 
         1: putstatic  
#3   
// Field b:I 
         4: return 
获取 b： 
  public static int get_b(); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=1, locals=0, args_size=0 
         0: getstatic  
#3   
// Field b:I 
         3: ireturn 
在底层指令层面上，类中那些具有 public 和 private 属性的成员对象没有实质区别。但是.class 文件级
别，外部指令无法直接访问其他类里的 private 属性成员。 
接下来，我们演示创建对象和调用方法。 
指令清单 54.16  ex1.java 程序 
public class ex1 
{ 
        public static void main(String[] args) 
        { 
                test obj=new test(); 
                obj.set_a (1234); 
                System.out.println(obj.a); 
        } 
} 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=2, args_size=1 
         0: new   
#2   
// class test 
         3: dup 
         4: invokespecial #3   
// Method test."":()V 
         7: astore_1 
         8: aload_1 
         9: pop 
        10: sipush 1234 
        13: invokestatic 
#4   
// Method test.set_a:(I)V 
        16: getstatic  
#5   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        19: aload_1 
        20: pop 
        21: getstatic  
#6   
// Field test.a:I 
        24: invokevirtual  #7   
// Method java/io/PrintStream.println:(I)V 
        27: return 
new 指令可以创建新的对象，但是它并没有调用构造函数（偏移量为 4 的指令调用了构造函数）。偏移
量为 13 的指令调用了 set_a()方法。偏移量为 21 的 getstatic 指令访问了类的一个字段。 
54.17  简单的补丁 
54.17.1  第一个例子 
本节通过一个简单的程序演示补丁的实现方法： 
public class nag 
{ 
        public static void nag_screen() 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
615 
        { 
                System.out.println("This program is not registered"); 
        }; 
        public static void main(String[] args) 
        { 
                System.out.println("Greetings from the mega-software"); 
                nag_screen(); 
        } 
}  
我们可否去掉字符串“This program is not registered”？ 
我们使用调试工具 IDA 加载类文件.class，如图 54.1 所示。 
图 54.1  IDA 
如图 54.2 所示，我们试图把该函数的第一个字节改为 177，即 return 的字节码。 
图 54.2  IDA 
但是如此一来程序就崩溃了（运行环境为 JRE 1.7）： 
Exception in thread "main" java.lang.VerifyError: Expecting a stack map frame 
Exception Details: 
  Location: 
    nag.nag_screen()V @1: nop 
  Reason: 
    Error exists in the bytecode 
  Bytecode: 
    0000000: b100 0212 03b6 0004 b1 
        at java.lang.Class.getDeclaredMethods0(Native Method) 
        at java.lang.Class.privateGetDeclaredMethods(Class.java:2615) 
        at java.lang.Class.getMethod0(Class.java:2856) 
        at java.lang.Class.getMethod(Class.java:1668) 
        at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:494) 
        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:486) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
616 
逆向工程权威指南（下册） 
也许，JVM 还存在某种与栈有关的检查机制。 
好吧，我们采用一个其他的方法来“打补丁”：直接覆盖 nag()的调用指令，如图 54.3 所示。 
图 54.3  IDA 
0 就是 NOP 的字节码。 
经过运行检验，这次的“打补丁”是成功的。 
54.17.2  第二个例子 
下面我们再看看另外一个简单的例子： 
public class password 
{ 
        public static void main(String[] args) 
        { 
                System.out.println("Please enter the password"); 
                String input = System.console().readLine(); 
                if (input.equals("secret")) 
                        System.out.println("password is correct"); 
                else 
                        System.out.println("password is not correct"); 
        } 
}  
其实现的基本思路是按照提示输入密码字符串，当输入的密码字符串为“secret”时，显示字符串密码
正确（password is correct）；否则显示字符串密码不正确（password is not correct）。 
将该程序调入到调试工具 IDA 中，如图 54.4 所示。 
图 54.4  IDA 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
617 
关键之处是比较字符串的 ifeq 指令。这个指令其实是英文 if equal（如果相等）的缩写。实际上这个助
记符不太贴切，它要是 ifz（也就是如果 TOS 是零）就更加确切了。也就是说，如果栈顶 TOS 的值是零，
它就进行跳转。在这个例子中，只有当输入的密码有误才会触发跳转（布尔“假”/False 的对应值是 0）。
我们的第一个想法就是调整这个指令。在 ifeq 的字节码里，有两个字节专门封装转移目标地址的偏移量。
要想把它强行改为“无条件不转移”，必须把第三个字节的改为 3（ifeq 占用 3 个字节，PC 的偏移量加 3
就是执行下一条指令）： 
我们把相应指令改为如图 54.5 所示的样子 。 
图 54.5  IDA 
结果，修改后的程序无法在 JRE 1.7 环境下正确执行。 
Exception in thread "main" java.lang.VerifyError: Expecting a stackmap frame at branch target 24 
Exception Details: 
  Location: 
    password.main([Ljava/lang/String;]V @21: ifeq 
  Reason: 
    Expected stackmap frame at this location. 
  Bytecode: 
    0000000: b200 0212 03b6 0004 b800 05b6 0006 4c2b 
    0000010: 1207 b600 0899 0003 b200 0212 09b6 0004 
    0000020: a700 0bb2 0002 120a b600 04b1 
  Stackmap Table: 
    append_frame(@35,Object[#20]) 
    same_frame(@43) 
        at java.lang.Class.getDeclaredMethods0(Native Method) 
        at java.lang.Class.privateGetDeclaredMethods(Class.java:2615) 
        at java.lang.Class.getMethod0(Class.java:2856) 
        at java.lang.Class.getMethod(Class.java:1668) 
        at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:494) 
        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:486) 
但是在 JRE 1.6 版本下，如此修改的程序的确可以正常运行。 
笔者也尝试了“将这个 ifeq 指令的字节码直接更换成 3 个空指令 NOP”的做法。即使是这样，修改后的
程序仍然不能正常运行。大概是 JRE 1.7 的栈映射核查更为全面吧！ 
接下来，我们更换一种方法：把 ifeq 之前的、调用 input.equals 方法的全部指令全都替换为 NOP，把
它改为如图 54.6 所示的样子。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
618 
逆向工程权威指南（下册） 
图 54.6  IDA 
如此修改之后，在执行到 ifeq 指令的时候栈顶的值永远是 1，因此不会满足 ifeq 的跳转条件。 
试验说明，这种方法果然有效。 
54.18  总结 
和 C/C++语言相比，Java 语言少了些什么数据类型？ 
① 结构：采用类。 
② 联合：采用类继承。 
③ 无符号数据类型：这也直接导致了在 JAVA 下，实现密码算法比较困难。 
④ 函数指针。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第五
五部
部分
分  
在
在代
代码