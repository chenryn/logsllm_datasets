C2 (right-hand side). Therefore, it waits for the appropriate
time ΔA after the transmission of C1, i.e. t2 = t1 + ΔA. By
plugging this into Equation (3), we obtain
(cid:2) (cid:3)(cid:4) (cid:5)
(cid:4)
(cid:5)(cid:2)
A = (cid:4)(cid:2)pA − (cid:2)px(cid:4)/c being the propagation delay from
with Δx
the adversary to Vx. This equation can be solved for ΔA and
thus, the attacker can simply use
(cid:4)
(cid:5)(cid:2)
− (t1 + Δx
A)
= (t2 − t1) + (Δx
t1 + ΔA +Δx
A)
2 − Δx
1 )
(cid:3)
(cid:3)
=tx
2
=tx
1
=t2
(
ΔA = (t2 − t1) + (Δx
2 − Δx
1 )
to spoof C1 and C2.
This result means that adversaries are able to spoof arbitrary
tracks by simply adjusting the time between the transmissions
of the location claims if there is only one veriﬁer (and they
are close enough to the veriﬁer). An illustration of such an
attack is provided in Figure 3.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
Spoofed track
Veriﬁer Vx
Adversary
Δx
1,2
Δx
2
Δx
1
t1
t2
t1
tx
1
Δx
A
ΔA
time
t2
tx
2
Δx
A
Fig. 3.
Illustration of an attack on a single veriﬁer. By adjusting the
transmission time t2 with respect to t1 and the desired Δx
i,j, the adversary’s
location claims C1 and C2 are received by the veriﬁer Vx as they were sent
from the spoofed track.
Case |V | = 2: As above, the adversary tries to forge a
location claim by adapting the difference in transmission times
Δ1,2 such that its location claims C1 and C2 seem honest for
two veriﬁers Vx and Vy. The difference to the previous case is
that the adversary’s signal now experiences two independent
propagation delays Δx
A and both veriﬁers expect
independent propagation delays Δx
i . As a result and
similar to the previous case, the adversary has to ﬁnd ΔA such
that the following system of equations is satisﬁed:
A and Δy
i and Δy
ΔA = (t2 − t1) + (Δx
ΔA = (t2 − t1) + (Δy
2 − Δx
1 )
2 − Δy
1)
Hence, the adversary is limited in its choice of (cid:2)p1 and (cid:2)p2.
In particular, it has to choose them such that
2 − Δx
Δx
1 = Δy
2 − Δy
1.
Without loss of generality, we ﬁx position (cid:2)p1 for the ﬁrst
location claim. Then,
the adversary can use any position
(cid:2)p2 ∈ H((cid:2)p1, (cid:2)px, (cid:2)py) for its second location claim C2 with
H((cid:2)p1, (cid:2)px, (cid:2)py) = {(cid:2)p ∈ R
n (cid:4)(cid:2)p − (cid:2)px(cid:4) − (cid:4)(cid:2)p − (cid:2)py(cid:4) =
(cid:4)(cid:2)p1 − (cid:2)px(cid:4) − (cid:4)(cid:2)p1 − (cid:2)py(cid:4) }
where n is the number of dimensions. In the two-dimensional
case, this set of positions H((cid:2)p1, (cid:2)px, (cid:2)py) corresponds to one
arm of a hyperbola with foci (cid:2)px and (cid:2)py and a difference of
distances to the foci of (cid:4)(cid:2)p1 − (cid:2)px(cid:4) − (cid:4)(cid:2)p1 − (cid:2)py(cid:4). With n = 3,
H is one sheet of a hyperboloid with the same parameters.
The key insight is that the adversary cannot claim arbitrary
tracks anymore. In particular, it loses one degree of freedom
with the introduction of a second veriﬁer. It is limited in
its choice for the second position (cid:2)p2 to positions that lie on
H((cid:2)p1, (cid:2)px, (cid:2)py).
In conclusion, the adversary can still spoof tracks that go
through one arbitrary position of interest. Although this might
be sufﬁcient for some attacks, being restricted to a hyperbola is
already a signiﬁcant limitation. Furthermore, the two veriﬁers
can easily check whether the locations of the track lie on such
a hyperbola. In case they do, they can consider the track
being suspicious. In scenarios where hyperbolic tracks are
impossible (e.g. roads in a vehicular network), attacks would
not remain undetected.
Case |V | = 3: Analogously to the previous case, we can
derive the constraint
2 − Δx
Δx
1 = Δy
2 − Δy
1 = Δz
2 − Δz
1
for two location claims C1 and C2 and three veriﬁers Vx, Vy,
and Vz. This constraint can only be satisﬁed by an adversary
if it forges the location claims C1 and C2 such that
the
pairwise hyperbolas (or hyperboloids, respectively) with the
three veriﬁers intersect at (cid:2)p1 and (cid:2)p2. That means, for a position
(cid:2)p1, (cid:2)p2 it must satisfy the following constraint:
(cid:2)p2 ∈ H((cid:2)p1, (cid:2)px, (cid:2)py)
(cid:6)
(4)
{Vx,Vy}∈V
Vx(cid:3)=Vy
We now analyze these intersections. For the sake of concise
presentation, we only consider the two-dimensional case.
Extending our results to three dimensions is straightforward:
intersections of hyperboloids instead of hyperbolas must be
considered.
With dxy((cid:2)p1) = (cid:4)(cid:2)p1−(cid:2)px(cid:4)−(cid:4)(cid:2)p1−(cid:2)py(cid:4) and (cid:2)pi = (xi, yi), we
can set up a system of equations for the intersections of two
hyperbolas H((cid:2)p1, (cid:2)px, (cid:2)py) and H((cid:2)p1, (cid:2)px, (cid:2)pz). Each intersection
(x, y) ∈ R
2 must be a solution for the system of equations
(cid:7)
(x − xx)2 + (y − yx)2 −(cid:7)
derived by the deﬁnition of H:
(x − xx)2 + (y − yx)2 −(cid:7)
(cid:7)
(cid:7)
By squaring and rearranging these equations, we obtain
(cid:7)
(x − xx)2 + (y − yx)2 = x · c1 + y · c2 + c3
(x − xx)2 + (y − yx)2 = x · c4 + y · c5 + c6
(x − xy)2 + (y − yy)2 = dxy((cid:2)p1)
(x − xz)2 + (y − yz)2 = dxz((cid:2)p1)
(5)
(6)
with constants
c1 = (xx − xy)/dxy((cid:2)p1)
c2 = (yx − yy)/dxy((cid:2)p1)
x − y2
c3 = (x2
c4 = (xx − xz)/dxz((cid:2)p1)
c5 = (yx − yz)/dxz((cid:2)p1)
x − y2
c6 = (x2
y − x2
z − x2
y + y2
z + y2
x + dxy((cid:2)p1)2)/(2dxy((cid:2)p1))
x + dxz((cid:2)p1)2)/(2dxz((cid:2)p1))
Subtracting Equation (6) from Equation (5) results in
y = x · c1 − c4
c5 − c2
c3 − c6
c5 − c2
+
Plugging this equation into one of the initial equations results
in a quadratic equation for x and y. Quadratic equations have
either zero, one, or two solutions. In our case, we even know
that by construction of the hyperbolas, it has at least one
solution, that is (cid:2)p1. Thus, there is either no or at most one
possible position left for the adversary to spoof a track without
violating Equation (2) for one of the veriﬁers.
202202
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 4. Example with three veriﬁers and their pairwise hyperbolas for a
claimed position (cid:2)p1. No further position can be spoofed without being detected
since there is no other intersection.
A scenario with three veriﬁers and their pairwise hyperbolas
is depicted in Figure 4. The adversary wants to spoof a track
and claims to be at (cid:2)p1. As there is no further intersection of the
three hyperbolas, it cannot claim any second position without
being detected by at least one veriﬁer.
In three dimensions and similar to navigation methods based
on time-difference of arrival measurements (e.g. multilatera-
tion), a fourth veriﬁer would be necessary to pin the attacker
|V | veriﬁers result
down to a single position. In general,
in |V | − 1 pairwise hyperboloids. With three-dimensional
locations and |V | = 3, the two hyperboloids intersect on a
curve. As in the two-dimensional case, adding a fourth veriﬁer
reduces the number of intersections to at most two points in
space.
Case |V | > 3: Equation (4) is a general result which also
holds for more than three veriﬁers. For the two-dimensional
case,
the guarantees given by three veriﬁers are already
sufﬁcient since attacks using tracks with two intersections can
simply be prevented by requiring |T| ≥ 3. However, more
than three veriﬁers can be beneﬁcial to mitigate noise in the
veriﬁcation data such as measurement errors or clock drifts.
This interesting issue of imperfect veriﬁcation data and how
to use |V | > 3 to improve the accuracy of veriﬁcation is dealt
with below in Sections IV and VI.
B. Conclusions from the Analysis
The above analysis shows that
the adversary loses one
degree of freedom with each additional veriﬁer. The intuition
behind this is as follows: As the adversary is changing its
position between individual location claims, the propagation
delay to each veriﬁer must also change in order to satisfy
Equation (2) at all veriﬁers. Thus, adversaries would have to
vary the propagation delays to each of the veriﬁers indepen-
dently to successfully pretend movement. Since all veriﬁers
receive the same messages (due to the broadcast transmission),
this is not possible. As a result, the only spoofable track for
a stationary adversary is the track on which the difference in
propagation delay to each veriﬁer is constant. For two veriﬁers,
this is a hyperbola. For more than two veriﬁers, this property
only holds for the intersections of the pairwise hyperbolas (see
Figure 4).
In summary, we can generalize the assumptions for secure
track veriﬁcation as follows. Let n be the number of dimen-
sions, that is (cid:2)pi ∈ R
n. Then our scheme can detect track
spooﬁng attacks if any of the following two conditions is met:
1) |V | ≥ n ∧ ∃(cid:2)p1,(cid:2)p2∈T p2 (cid:2)∈ H((cid:2)p1, (cid:2)px, (cid:2)py): The location
claims of T are received by at least n veriﬁers and there are
two different positions in T , where one position does not lie
on the hyperbola (or the hyperboloid, respectively) spanned
by the other position and the two veriﬁers’ positions.
2) |T| ≥ 3 ∧ |V | ≥ n + 1: The track consists of at least
three location claims and the claims are received by at least
n + 1 veriﬁers.
IV. DEALING WITH NOISE
In practice, veriﬁers have to deal with imperfect veriﬁcation
data since time and position measurements are error-prone. For
instance, clocks have different speeds which results in non-
negligible drifts. In order to assess the practicality and perfor-
mance of our veriﬁcation scheme under realistic conditions,
we use the following error model.
A. Error Model
1) Clock Drift: The speed of clocks is highly dependent on
environmental conditions such as pressure or temperature [15].
However, we assume that the duration of the veriﬁcation pro-
cess is on the order of seconds or minutes. Most environments
(such as the interior of vehicles) are sufﬁciently stable within
such time periods. Hence, we assume that clock drift is linear
and thus increases at a constant rate during the veriﬁcation
process.
In accordance to that, we model clock drift as follows. The
error due to clock drift drift linearly depends on the duration
between two time measurements. It can be modeled by a drift
coefﬁcient tdrift for an entity X. Assuming that X wants to
measure a period of time Δi,j = tj − ti, the clock drift error
drift of X’s measurement ΔX
i,j is given by
drift = Δi,j · tdrift = (tj − ti) · tdrift .
2) Measurement & Channel Noise: Measuring points in
time at which events occur always involves measurement
errors. For instance, systems are clocked by an oscillator at
a certain rate and they only perform actions if a pulse or
pulse edge of the oscillator is present. Hence, observations
can only be made at discrete points in time. This leads to
measurement errors when events of interest (such as the arrival
of a signal) occur between two clock ticks. Besides timing
errors, wireless transmission characteristics such as multipath
propagation distort the signal. This may also results in noise
when determining timestamps for signal arrivals. In addition
to erroneous time measurements, our scheme may also suffer
from erroneous position information. If provers use GPS to
determine their positions, the location claims may contain
errors of up to 15 m.
We assume that measurement and channel noise are in-
dependent for each location claim and each of its associ-
ated timestamps. In accordance with [16], we summarize all
203203
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:31 UTC from IEEE Xplore.  Restrictions apply. 
sources of noise in a zero-mean Gaussian random variable
 ∼ N (0, σ2). The variance σ2 depends on the accuracy of
the system components involved in the veriﬁcation process.
For instance, if clocks with higher rates are used, σ2 becomes
smaller.
By combining clock drift and noise, we conclude that the
for our
error contained in measuring a time period Δi,j
veriﬁcation scheme can be modeled as
Δi,j − Δi,j = drift +  = (tj − ti) · tdrift + 
(7)
In the following, we propose two versions of our scheme:
local and global veriﬁcation. In local veriﬁcation, veriﬁers cal-
culate and check their veriﬁcation results locally. They do not
need to communicate with each other. This has the advantage,
that communication overhead is minimal and veriﬁers do not
have to be connected. They could simply send an alarm to a
central entity in case an attack was detected. This simplicity,
however, comes at a price. Local veriﬁcation does not take
full advantage of the total number of veriﬁers. Therefore, we
also propose a global scheme, which is based on the local
scheme but veriﬁers collaborate in order to reduce the impact
of noise. We conclude the section with a comparison of both
approaches.
B. Local Track Veriﬁcation Scheme
The noise in real systems makes a simple check of Equation
(2) to verify a track impractical. Therefore, we adapt our basic
veriﬁcation scheme to deal with noisy values. The idea is
to use all received location claims to estimate the error. As
shown in [16], jointly estimating clock drift and measurement
error is not feasible since the Cramer-Rao lower bound of
the estimation error is too large. Therefore, we perform our
veriﬁcation in two steps.
The ﬁrst step estimates the clock drift. This estimate is
then used in the second step to cancel out drift from our
measurements. Let n = |T| be the number of received location
claims. The clock drift coefﬁcient tx
drift of Vx can then be
estimated using
(cid:12)
Δx
i,j
Δi,j + (Δx
j − Δx
i )