### Optimized Text

#### Oracles and Their Functions

- **corrupt(E)**
  This oracle marks a party `E` as "corrupt" in the list `P`. The challenger checks if the party exists in its list `P`. If it does, the status is updated to "corrupt". If the input is malformed or the checks fail, the call is discarded.

- **term(E)**
  This oracle terminates all running sessions of the party `E`. The termination is recorded in the list `P` (where the party `E` is marked as inactive) and in the list `Sess` (where its sessions are set to "finished").

- **move(E, loc)**
  This oracle moves a party `E` from its current location to a new location `loc` in the metric space. The challenger verifies in `P` that `E` is a card and is corrupt. If so, the challenger calculates the distance between `E`'s current location `loc1` and the new location `loc`. The records in `P` are then updated to reflect the new location `loc` after a proportional amount of time.

- **check_prox(sid)**
  The challenger verifies if `sid` is a valid session for `[PC, T]`. If valid, it retrieves the transcript from `Sess` and passes it to `[PC, T]`. The attacker receives the public output `Out[PC, T]` and the private output `τ[PC, T]`, along with the IDs of the card `C` and reader `R` involved in the session.

- **validate_prox(sid)**
  The challenger checks if `sid` is a valid session ID for `W`. If valid, it retrieves the transcript from `Sess` and passes it to the coupling `[W, X]`. The attacker receives the public output `OutW` and the private output `τW`, along with the IDs of the card `C` and reader `R` involved in the session. The entry for `sid` in `Sess` is marked as "finished".

#### Additional Actions by the Challenger

The list `Sess` of sessions is maintained by the challenger, including out-of-bound actions. Specifically, if certain messages in a `PC` or `W`-linked session take too long to arrive, the session is marked as "finished" and the transcript contains `OutPC=0` and `OutW=0` in the list `Sess`.

#### Remarks on the v-DB Security Model

The model for proximity checking is standard, with explicit timing and distance-related aspects, similar to [14]. It extends to operate over couplings (both intra and inter-couplings). This is inherent to lifting DB protocols to validated DB protocols, which also includes the management of communication (including timed aspects) with `[W, Y]` where `Y ∈ {C, R, X}`. A notable feature is the ability of the attacker to move (card) parties, and the model has precise session management due to the involvement of multiple parties in the v-DB primitive.

#### 4.4 Security Properties for Validated Distance Bounding

##### 4.4.1 Correctness of v-DB Protocols

Definition 4.1: **Correctness of Validated Distance Bounding**

Let Π = (C, R, T, PC, W, B) be a v-DB protocol, and `real = (C, PC, T, R, W, X, B)` be a validated DB system. We say that Π and `real` are terminating and complete validated distance-bounding if the following holds:

- **Termination**: For any unbounded C' and R', and for any `init[C', R', (PC, T), W, X]` call yielding a macro-session `mid`, `(PC, T)` and `W` halt in polynomial computational steps, and `finished` is recorded in `Sess` for the sessions of `[PC, T]` and `W` corresponding to the macro-session `mid`.
- **p-Completeness**: For any security parameter `s`, if the distance (C, R) ≤ B, then for any `init[C, R, (PC, T), W, X]` call yielding a macro-session `mid`, the probability that both `Out_sid(PC, T) = 1` and `Out_sid'(W) = 1` is at least `p`.

In practice, the parameter `p` needs to be tuned with the security parameters. For meaningful security, `p` should be overwhelming in the security parameter.

##### 4.4.2 Security of v-DB Protocols

We define the security of v-DB systems in terms of a game. The attacker can interact with multiple cards, readers, and validating bodies in a given coupling. There is a target card and a target reader. The game has two phases: a learning phase and an attack phase.

- **Learning Phase**: The target parties may be in mutual proximity but are not corrupt, and the PC on board one of them is not corrupt.
- **Attack Phase**: The target parties are far away, and the one with the PC on board can be corrupted. The attacker wins if they can make the validating party `[W, X]` output 1, despite the corrupt PC lying about the proximity.

The game-based definition can be split into two cases:
- **Case (a)**: PC is on-board the target reader.
- **Case (b)**: PC is on-board the target card.

Each case yields different security properties. In the first case, the attacker colludes with a PC-coupled reader to mount a strong relay attack. In the second case, the attacker colludes with a far-away PC-coupled card to mount a distance-fraud.

**Definition 4.2: (ℓ, z, n, qC, qR, qT, type)-v-DB Experiment**

For any security parameter `s`, an (ℓ, z, n, qC, qR, qT, type)-v-DB experiment is an interaction between the Challenger and Adversary as follows:

1. **Setup**:
   - ℓ > m card-parties `C1(·), ..., Cm(·), ..., Cℓ(·)` and a card-party `C(·)`.
   - z reader-parties `R1(·), ..., Rp(·), ..., Rz(·)` and a reader party `R(·)`.
   - n on-board algorithms `[PC1, T1], ..., [PCn, Tn]` and one other on-board algorithm `[PC, T]`.
   - n machines `X1, ..., Xn` and one X-machine `X`.
   - Apart from the cryptographic material used to authenticate `C` to `R`, other card-parties and reader-parties can have the same cryptographic material.

2. **Learning Phase**:
   - The adversary has access to the first `m` card-parties and `C(·)`, the first `p` reader-parties and `R(·)`, and the `[PC, T]` algorithms and `X` machines fitting the coupling.
   - The Challenger reveals the IDs of `C(·)` and `R(·)`.
   - The adversary cannot call `corrupt` on `C(·)`, `R(·)`, or `PC(·)`.
   - The experiment starts when at least one macro-session is running.
   - The Challenger stops the learning phase after a polynomial number of X sessions are marked as "finished".

3. **Attack Phase**:
   - The adversary has access to `Cm+1(·), ..., Cℓ(·), C(·)`, the reader-parties `Rp(·), ..., Rz(·), R(·)`, and the `[PC, T]` algorithms and `X` machines fitting the coupling.
   - The Challenger reveals the IDs of `C(·)` and `R(·)`.
   - The Challenger calls `corrupt` on the PC on board `C(·)` or `R(·)`.
   - The Challenger calls `init([C(·), PC(·), T(·)], R(·), W, X)` or `init([C(·), C(·), T(·)], R(·), [W, X])` depending on the coupling.
   - The adversary can call `corrupt` on other card-parties or reader-parties and their PCs, but not on `C(·)` or `R(·)`.
   - The adversary cannot call `move(C(·))`.

4. **Outcome**:
   - The adversary makes `qC, qR, qT` queries to `init(C, ...)`, `init(..., R, ...)`, and `init(..., [PC, T], ...)` in total.
   - The experiment continues until `PC` and `X` finish their respective sessions, or the allowed number of queries is reached.
   - The adversary wins if `Out_sid'(W) = 1`.

**Definition 4.3: Strong Relaying Security**

For a given v-DB protocol Π, the (ℓ, z, n, qC, qR, qT, reader-coupled)-v-DB experiment gives the game for strong relaying over Π. If the advantage of the adversary is negligible in this game, then Π is secure w.r.t. strong relaying. In this case, the adversary controls the PC algorithm on board a reader `R` and may control `R` itself, attempting to make the attester `W` accept a transcript when the card `C` was far from the reader, despite the PC algorithm lying about the proximity.