为了尽快到达公主，骑士决定每次只向右或向下移动一步。编写一个函数来计算确保骑士能够拯救到公
（若房间里的值为正整数，则表示骑士将增加健康点数）。
士将损失健康点数）；其他房间要么是空的（房间里的值为0），要么包含增加骑士健康点数的魔法球
骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至〇或以下，他会立即死亡。
我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由M×N个房间组成的二维网格。
题目大意
在二维地图上给出每个格子扣血数，负数代表扣血，正数代表补血。左上角第一个格子是起点，右
这个区间，每次二分的中间值，再用 dp 在地图中去判断是否能到达终点，如果能，就缩小搜索空
这一题还可以用二分搜索来求解。骑士的血量取值范围一定是在［1，+∞）这个区间内。那么二分
这一题首先想到的解题思路是动态规划。从终点逆推回起点。dp[][j]代表骑士进入坐标为
下角最后一个格子是终点。问骑士初始最少多少血才能走完迷宫，顺利营救位于终点的公主。需要
房间以及公主被监禁的右下角房间。
任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角
骑士的健康点数没有上限。
间复杂度 O(m*n)。
[j])]。DP 完成以后，dp[O][O］ 中记录的就是骑士初始最低血量值。时间复杂度 O(m*n)，空
[j] = min(max(1, dp[i][j+1]-dungeon[i] [j]), max(1, dp[i+1] [j]-dungeon[i] 
低血量值，从这两个值里面取最小，即是当前格子所需的最低血量，所以状态转移方程为dp[i订
二个式子化简即 dp[i] [j] = max(1，dp[i] [j+1]-dungeon[i] [j]]。求得了这两种走法的最
的最低血量要求。第一个式子化简即 dp[i][j]=max(1，dp[i+1] [j]-dungeon[i] [j]]，第
dp[i][j+1] 这两者有关系。即 dp[i] [j] 经过自己本格子的扣血以后，要能至少满足下一行和
了。那么状态转移方程是什么呢？分析一般的情况，dp[i][j] 这个值应该是和 dp[i+1] [j］ 和
骑士只能往右走和往下走。往回推，即只能往上走和往左走。到这里，DP 的初始条件都准备好
出 dp[m-1][n-1] 以后，接着可以推出 dp[m-1][i] 这一行和 dp[i] [n-1] 这一列的值。因为
的，取交集以后，起决定作用的是数轴最右边的数，即max(1-dungeon[m-1][n-1]，1)。算
上面不等式中第一组不等式是满足下一行格子的最低血量要求，第二组不等式是满足右一列格子
1]+ dungeon[m-1] [n-1] ≥ 1 并且 dp[m-1] [n-1] ≥ 1，由于这两个不等式的方向是相同 
(i,j） 的格子之前最少的血量值。那么 dp[m-1] [n-1] 应该同时满足两个条件，dp[m-1] [n-
点血，骑士就会死去。
注意的是，起点和终点都会对血量进行影响。每到一个格子，骑士的血都不能少于1，一旦少于1
右一列格子血量的最少要求。并且自己的血量也应该 ≥1。即需要满足下面这两组不等式。
dp[][j] + dungeon[][] ≥ dp[i +1][]
dp[国[]≥1
dp[国][] + dungeon[][] ≥ dp[词][ + 1]
dp[][] ≥1
---
## Page 316
代码
func calculateMinimumHPl(dungeon [][]int) int 
//解法二二分搜索
dungeon[i][j]]]
func calculateMinimumHP(dungeon [][]int) int {
//解法－动态规划
import "math"
package leetcode
return low
return dp[o][0]
dp := make([][]int, m) 
m, n := len(dungeon)， len(dungeon[o])
if len(dungeon) == 0 {
math.MaxInt64)，空间复杂度 O(m*n)。
for low = 0; i-- { 
for i := n - 2; i >= 0; i-- { 
dp[m-1][n-1] = max(1-dungeon[m-1][n-1], 1) 
for i := O; i >1
dp[i][j] = min(max(1, dp[i][j+1]-dungeon[i][j]), max(1, dp[i+l][j]-
for j := n - 2; j >= O; j-- { 
return 0 
 high = mid 
low = mid + 1
---
## Page 317
Example 2:
 Example 1:
Given a list of non negative integers, arrange them such that they form the largest number.
题目
179. Largest Number
Output: "9534330"
Input: [3,30,34,5,9] 
Output: "210"
Input: [10,2]
func cancross(dungeon [][]int, start int) bool {
return dp[m-1][n-1] > 0 
for i := O; i0 &&dp[i][j-1]> 0{
if i>0&& dp[i-1][j]>0 { 
b=dp[i][j-l]+ dungeon[i][j]
 a = dp[i-l][j] + dungeon[i][j]
---
## Page 318
代码
通过互相补齐位数之后再进行比较，
举个例子，还是"3"和"30"的例子，比较这2个字符串的大小。
通过比较 aStr 和 bStr 的大小来得出是 a 大还是 b 大。
在比较2个字符串大小的时候，不单纯的只用字符串顺序进行比较，还加入一个顺序。
这一题很容易想到把数字都转化为字符串，利用字符串比较，来排序，这样9开头的一定排在最前面。
解题思路
给出一个数组，
题目大意
The result may be very large, so you need to return a string instead of an integer.
出错了。实际上就这道题而言，
不过这样做有一个地方是错误的，比如："3"和"30"比较，
Note:
func largestNumber(nums []int) string {
packageleetcode
bstr :=
bstr := b + a 
astr := a + b 
"strconv"
mport （
quicksortstring(numstrs, 0, len(numstrs)-1)
if len(nums) == 0 { 
numStrs := tostringArray(nums)
，要求排列这些数组里的元素，使得最终排列出来的数字是最大的。
="330"
，"3"应该排在"30"前面。
，就没有问题了。很显然这里"3"比"30"要大。
"30"比"3"的字符序要大，这样排序以后就
---
## Page 319
within the DNA.
"ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences 
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for Example: 
题目
187. Repeated DNA Sequences
func quicksortstring(a []string, lo, hi int) {
func partitionstring(a []string, lo, hi int) int 
func tostringArray(nums []int) []string 
quicksortstring(a, p+l, hi)
quicksortstring(a, lo, p-1)
p := partitionstring(a, lo, hi)
if lo >= hi { 
a[i+l], a[hi] = a[hi], a[i+l]
pivot := a[hi] 
strs := make([]string, 0) 
return i + 1
for j := lo; j 1就输出。
func findRepeatedDnasequences(s string) []string {
//解法一
package leetcode
Input: S = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
for i:= 0；i2， 重复
mp[cur] = 1 
result = append(result, s[i-9:i+1])
|charMap[s[i]]
---
## Page 321
Note:
Example 2: 
 Example 1:
Reverse bits of a given 32 bits unsigned integer.
题目
190. Reverse Bits
● Note that in some languages such as Java, there is no unsigned integer type. In this case,
represents the unsigned integer 4294967293, s0 return 3221225471 which its 
Explanation: The input binary string lll11l11l11111111l1l11l111111101
TITTTTTTTTTTTTTTTTTTTTTTTTTTTTOT :andanO
TOTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT :anduI
represents the unsigned integer 43261596, s0 return 964176192 which its binary
Explanation: The input binary string 00000010100101000001111010011100
output: 00111001011110000010100101000000
Input: 00000010100101000001111010011100
func findRepeatedDnasequencesl(s string) []string {
//解法二
ans, cache := make([]string, O), make(map[string]int)
if len(s)>= 1 
res = res<<l l num&1
。在这种情况下，输入和输出都将被指
---
## Page 323
代码
解题思路
编写一个函数，
题目大意
Note:
 Example 3:
Example 2: 
●最简单的方法即是直接调用库函数bits.OnesCount(uint(num)）。
●求uint32数的二进制位中1的个数。
量）。
● Note that in some languages such as Java, there is no unsigned integer type. In this case, the
//解法一
import "math/bits"
package leetcode
total of thirty one 'l' bits.
Explanation: The input binary string ll11l111ll111111111l111l1111101 has a
Output: 31 
Input: 1l111111111111111111111111111101
total of one '
Output: 1
Input: 00000000000000000000000010000000
total of three 'l' bits.
Explanation: The input binary string 00000000000000000000000000001011 has a
Output: 3 
Input: 00000000000000000000000000001011
制位1，利用这个操作，直至把数清零。操作了几次即为有几个二进制位1。
这一题的解题思路就是利用二进制位操作。×=×&（×-1 ）这个操作可以清除最低位的二进
 Therefore, in Example 3 above the input represents the signed integer -3.
 internal binary representation of the integer is the same whether it is signed or unsigned.
input will be given as signed integer type and should not affect your implementation, as the
，输入是一个无符号整数，返回其二进制表达式中数字位数为‘1′的个数（也被称为汉明
'1' bit.
---
## Page 324
警
就
题目大意
Example 2: 
Example 1: 
determine the maximum amount of money you can rob tonight without alerting the police.
Given a list of non-negative integers representing the amount of money of each house, 
two adjacent houses were broken into on the same night.
amount of money stashed, the only constraint stopping you from robbing each of them is that 
You are a professional robber planning to rob houses along a street. Each house has a certain
题目
198. House Robber
是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报
是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素
(money = 1).
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 
output:12
Input: [2,7,9,3,1]
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
output: 4 
Input: [1,2,3,1]
// 解法二
func hammingweight(num uint32) int {
func hammingweightl(num uint32) int {
 return bits.OnesCount(uint(num))
return count
for num != O { 
count := 0 
Y
num = num & (num - 1) 
count++
Total amount you can rob = 2 + 9 + 1 = 12.
Total amount you can rob = 1 + 3 = 4.
---
## Page 325
代码
解题思路
高金额。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最
func rob198_1(nums []int) int {
//解法二DP优化辅助空间，把迭代的值保存在 2个变量中
·DP 的状态定义是：dp[i] 代表抢 nums[O,i] 这个区间内房子的最大值，状态转移方程是 
·你是一个专业的小偷，打算洗劫一条街的所有房子。每个房子里面有不同价值的宝物，但是如果你
func rob198(nums
//解法－ DP
package leetcode
curMax, preMax := 0, 
n := len(nums)
//dp[i］代表抢 nums[O...i]房子的最大价值
if n == 1 { 
if n == o {
n := len(nums)
for i := O; i < n; i++ {
return dp[n-1]
for i := 2; i < n; i++ { 
dp[0], dp[1] = nums[0], max(nums[1], nums[0]]
dp := make([]int, n) 
这一题可以用 DP 来解答，也可以用找规律的方法来解答。
选择偷窃连续的2栋房子，就会触发警报系统，编程求出你最多可以偷窃价值多少的宝物？
dp[i] = max(dp[i-1], nums[i]+dp[i-2]]
中间结果，以节约辅助空间。
dp[i]=max(dp[i-1]，nums[i]+dp[i-2]]。可以优化选代的过程，用两个临时变量来存储
 return 0
 return 0
preMax = tmp 
curMax = max(curMax, nums [i]+preMax)
tmp := curMax 
return nums[o]
[]int）int {
---
## Page 326
解题思路
从右边看一个树，输出看到的数字。注意有遮挡。
题目大意
Example:
nodes you can see ordered from top to bottom.
Given a binary tree, imagine yourself standing on the right side of it, return the values of the
题目
199. Binary Tree Right Side View