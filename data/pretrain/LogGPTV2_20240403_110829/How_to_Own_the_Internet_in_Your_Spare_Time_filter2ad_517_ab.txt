already.)
This give us the differential equation:
= Ka(1 − a)
da
dt
with solution:
a = eK(t−T )
1 + eK(t−T )
,
(2)
(3)
where T is a constant of integration that ﬁxes the time
position of the incident. This equation has been well
known for many years as the logistic equation, and gov-
erns the rate of growth of epidemics in ﬁnite systems
when all entities are equally likely to infect any other
entity (which is true for randomized spreading among
Internet-connected servers, in the absence of ﬁrewall ﬁl-
tering rules that differentially affect infectability from or
to different addresses).
This is an interesting equation. For early t (signiﬁcantly
before T ), a grows exponentially. For large t (signiﬁ-
cantly after T ), a goes to 1 (all vulnerable machines are
compromised). The rate at which this happens depends
only on K (the rate at which one machine can compro-
mise others), and not at all on the number of machines.
0100,000200,000300,000400,000500,000600,0000246810121416Hour of the dayNumber seen in an hour# of scans# of unique IPsPredicted # of scansFinally, with probability 1/8 it would choose a random
address from the whole Internet.
This strategy appears quite successful. The localized
spreading allows the worm to quickly infect parts of the
Internet that contain many vulnerable hosts, and also
means that the infection often proceeds quicker since
hosts with similar IP addresses are often close together
in the network topology also. This strategy also allows a
worm to spread very rapidly within an internal network
once it manages to pass through the external ﬁrewall.
Unfortunately, developing an analytic model for the
spread of a worm employing this type of localized scan-
ning strategy is signiﬁcantly more difﬁcult than the mod-
eling effort in Section 2, because it requires incorpo-
rating potentially highly non-homogeneous patterns of
population locality. The empirical data is also harder
to interpret, because Code Red I was quite active when
Code Red II was released. Indeed, it appears that Code
Red II took a while to overcome Code Red I (see Fig-
ure 1), but fully determining the interplay between the
two appears to be a signiﬁcant undertaking.
3.2 Multi-vector worms—Nimda
As well illustrated by the Nimda worm/virus (and, in-
deed, the original Internet Worm [Sp89, ER89]), malev-
olent code is not restricted to a single technique. Nimda
began on September 18th, 2001, spread very rapidly,
and maintained itself on the Internet for months after it
started. Nimda spread extensively behind ﬁrewalls, and
illustrates the ferocity and wide reach that a multi-mode
worm can exhibit. The worm is thought to have used at
least ﬁve different methods to spread itself.
• By infecting Web servers from infected client ma-
chines via active probing for a Microsoft IIS vul-
nerability (CVE-2000-0884).
• By bulk emailing of itself as an attachment based
on email addresses determined from the infected
machine.
• By copying itself across open network shares
• By adding exploit code to Web pages on com-
promised servers in order to infect clients which
browse the page.
• By scanning for the backdoors left behind by Code
Red II and also the “sadmind” worm [CE03].
Figure 4: Hourly probe rate data for inbound port 80 at the
Chemical Abstracts Service, for Code Red I’s reemergence on
August 1st. The x-axis the time of day on August 1st (Central
US Time). The y-axis shows the monitored probe rate and a ﬁt
for the data discussed in the text.
3 “Better” worms—practice
In this section, we explore the strategies adopted by the
two major worms released subsequent to Code Red I:
“Code Red II” and “Nimda.”
3.1 Localized scanning—Code Red II
The Code Red II worm was released on Saturday August
4th, 2001 and spread rapidly [CE01, SA01]. The worm
code contained a comment stating that it was “Code
Red II,” but it was an unrelated code base. It did use the
same vulnerability, however—a buffer overﬂow in Mi-
crosoft’s IIS Web server with CVE number CVE-2001-
0500. When successful, the payload installed a root
backdoor allowing unrestricted remote access to the in-
fected host. The worm exploit only worked correctly
when IIS was running on Microsoft Windows 2000; on
Windows NT it caused a system crash rather than an in-
fection.
The worm was also a single-stage scanning worm that
chose random IP addresses and attempted to infect them.
However, it used a localized scanning strategy, where it
was differentially likely to attempt to infect addresses
close to it. Speciﬁcally, with probability 3/8 it chose a
random IP address from within the class B address space
(/16 network) of the infected machine. With probability
1/2 it chose randomly from its own class A (/8 network).
050,000100,000150,000200,000250,00002468101214161820Hour of the dayNumber seen in an hour# of scansPredicted # of scansing, if it receives the right trigger, or a prearranged time
rolls around. We return to this point in Section 7.
4 “Better” worms—theory
There are several techniques which, although not yet em-
ployed, could further signiﬁcantly increase the virulence
of a worm. Beyond the obvious factors of discover-
ing more widespread security holes and increasing the
scanning rate, some additional strategies a worm author
could employ are: (i) hit-list scanning, (ii) permutation
scanning, (iii) topologically aware worms, and (iv) In-
ternet scale hit-lists. The goal is very rapid infection—in
particular, considerably faster than any possible human-
mediated response.
A worm’s scanner can obviously be made signiﬁcantly
faster than the ones seen today, by careful use of thread-
ing and an understanding of the protocols. By having
many requests outstanding, a worm should be capable
of scanning targets at a rate proportional to its access
bandwidth. Since it only takes 40 bytes for a TCP SYN
packet to determine if a service is accessible, and often
only a few hundred bytes to attempt an exploit, the po-
tential scans per second can easily exceed 100 for even
poor Internet connections. This increases K by allow-
ing a worm to search for a greater number of targets in a
given period of time.
Similarly, the more widespread the vulnerable software
is, the faster a worm using that vulnerability can spread,
because each random scan of the network is more likely
to pick up a target, also increasing K. We should there-
fore expect that worm authors will devote considerable
scrutiny to highly homogeneous, highly deployed ser-
vices, both for the faster spreading and for the greater
number of machines that could be compromised in a sin-
gle attack.
4.1 Hit-list Scanning
One of the biggest problems a worm faces in achieving
a very rapid rate of infection is “getting off the ground.”
Although a worm spreads exponentially during the early
stages of infection, the time needed to infect say the ﬁrst
10,000 hosts dominates the infection time, as can be seen
in Figure 3.
There is a simple way for an active worm to overcome
HTTP connections per second seen at
Figure 5:
the
Lawrence Berkeley National Laboratory, rising due to the on-
set of Nimda, September 18.
Figure 5 illustrates how rapidly the worm tried to in-
fect one site, the Lawrence Berkeley National Labora-
tory. The x-axis plots hours past midnight, PDT, while
the y-axis plots HTTP connection attempts per second.
Only connections from hosts conﬁrmed to have harbored
Nimda are counted, to avoid possible confusion with
concurrent Code Red connection attempts. After the on-
set of the infection, the total rate of probing was about
3 times that from the hosts subsequently conﬁrmed to
harbor Nimda.
Clearly, onset was quite rapid, rising in just half an hour
from essentially no probing to a sustained rate of nearly
100 probes/sec.
There is an additional synergy in Nimda’s use of mul-
tiple infection vectors: many ﬁrewalls allow mail to
pass untouched, relying on the mail servers to re-
move pathogens. Yet since many mail servers remove
pathogens based on signatures, they aren’t effective dur-
ing the ﬁrst few minutes to hours of an outbreak, giving
Nimda a reasonably effective means of crossing ﬁrewalls
to invade internal networks.
Finally, we note that Nimda’s full functionality is still
not known: all that is known is how it spreads, but not
what it might be capable of doing in addition to spread-
Onset of NIMDATime (PDT) 18 September, 2001Conn / Sec6.06.57.07.58.0020406080100120140Connections/Secondthis obstacle, which we term hit-list scanning. Before
the worm is released, the worm author collects a list of
say 10,000 to 50,000 potentially vulnerable machines,
ideally ones with good network connections. The worm,
when released onto an initial machine on this hit-list, be-
gins scanning down the list. When it infects a machine,
it divides the hit-list in half, communicating half to the
recipient worm, keeping the other half.
This quick division ensures that even if only 10–20% of
the machines on the hit-list are actually vulnerable, an
active worm will quickly go through the hit-list and es-
tablish itself on all vulnerable machines in only a few
seconds. Although the hit-list may start at 200 kilo-
bytes, it quickly shrinks to nothing during the partition-
ing. This provides a great beneﬁt in constructing a fast
worm by speeding the initial infection.
The hit-list needn’t be perfect: a simple list of machines
running a particular server type may sufﬁce, although
greater accuracy will improve the spread. The hit-list
itself can be generated using one or several of the fol-
lowing techniques, prepared well in advance, generally
with little fear of detection.
• Stealthy scans. Portscans are so common and so
widely ignored that even a fast scan of the entire
Internet would be unlikely to attract law enforce-
ment attention or more than mild comment in the
incident response community. However, for attack-
ers wishing to be especially careful, a randomized
stealthy scan taking several months would be very
unlikely to attract much attention, as most intrusion
detection systems are not currently capable of de-
tecting such low-proﬁle scans. Some portion of the
scan would be out of date by the time it was used,
but much of it would not.
• Distributed scanning. An attacker could scan the
Internet using a few dozen to a few thousand
already-compromised “zombies,” similar to what
DDOS attackers assemble in a fairly routine fash-
ion. Such distributed scanning has already been
seen in the wild—Lawrence Berkeley National
Laboratory received 10 during the past year.
• DNS searches. Assemble a list of domains (for ex-
ample, by using widely available spam mail lists, or
trolling the address registries). The DNS can then
be searched for the IP addresses of mail-servers
(via MX records) or Web servers (by looking for
www.domain.com).
• Spiders. For Web server worms (like Code Red),
use Web-crawling techniques similar to search en-
gines in order to produce a list of most Internet-
connected Web sites. This would be unlikely to at-
tract serious attention.
• Public surveys. For many potential targets there
may be surveys available listing them, such as the
Netcraft survey [Ne02].
• Just listen. Some applications, such as peer-to-
peer networks, wind up advertising many of their
servers. Similarly, many previous worms effec-
tively broadcast that the infected machine is vul-
nerable to further attack. For example, because of
its widespread scanning, during the Code Red I in-
fection it was easy to pick up the addresses of up-
wards of 300,000 vulnerable IIS servers—because
each one came knocking on everyone’s door!
Indeed, some individuals produced active counter-
measures to Code Red II by exploiting this obser-
vation, when combined with the backdoor which
Code Red II installs [DA01]. However, it is not a
given that future worms will broadcast their pres-
ence, and we also note that worms could readily ﬁx
the very security holes they exploit (such as is often
already observed for attackers performing break-
ins manually), which undermines the superﬁcially
appealing countermeasure of using the worm’s vec-
tor as a means by which to disable it.
4.2 Permutation Scanning
Another limitation to very fast infection is the general
inefﬁciency of random scanning: many addresses are
probed multiple times. Similarly there is no means for a
randomly scanning worm to effectively determine when
all vulnerable machines are infected. Permutation scan-
ning solves these problems by assuming that a worm can
detect that a particular target is already infected.
In a permutation scan, all worms share a common
pseudo random permutation of the IP address space.
Such a permutation can be efﬁciently generated using
a 32-bit block cipher and a preselected key: simply en-
crypt an index to get the corresponding address in the
permutation, and decrypt an address to get its index.
Any machines infected during the hit-list phase (or lo-
cal subnet scanning) start scanning just after their point
in the permutation, working their way through the per-
mutation, looking for vulnerable machines. Whenever
the worm sees an already infected machine, it chooses a
new, random start point and proceeds from there. Worms
infected by permutation scanning would start at a ran-
dom point.
This has the effect of providing a self-coordinated, com-
prehensive scan while maintaining the beneﬁts of ran-
dom probing. Each worm looks like it is conducting a
random scan, but it attempts to minimize duplication of
effort. Any time an instance of the worm, W , encounters
an already-infected host, it knows that W
, the original
infector of the host, is already working along the cur-
rent sequence in the permutation, and is further ahead.
Hence, there’s no need for W to continue working on
the current sequence in addition to W
(cid:48)
(cid:48)
.
Self-coordination keeps the infection rate high and guar-
antees an eventual comprehensive scan. Furthermore, it
allows the worm to make a local decision that further
scanning is of little beneﬁt. After any particular copy
of the worm sees several infected machines without dis-
covering new vulnerable targets, the worm assumes that
effectively complete infection has occurred and stops the
scanning process.
A timer could then induce the worms to wake up, change
the permutation key to the next one in a prespeciﬁed se-
quence, and begin scanning through the new permuta-
tion, starting at its own index and halting when another
instance is discovered. This process insures that every
address would be efﬁciently rescanned at regular inter-
vals, detecting any machines which came onto the net
or were reinstalled but not patched, greatly increasing a
worm’s staying power. Otherwise, the worms are silent
and difﬁcult to detect, until they receive attack orders
(see Section 6).
A further optimization is a partitioned permutation scan.
In this scheme, the worm has a range of the permutation
that it is initially responsible for. When it infects another
machine, it reduces its range in half, with the newly in-
fected worm taking the other section. When the range
gets below a certain level, it switches to simple permu-
tation scanning and otherwise behaves like a permuta-
tion scan. This scheme offers a slight but noticeable
increase in scanning efﬁciency, by dividing up the ini-
tial workload using an approximate divide-and-conquer
technique.
Permutation scanning interacts particularly well with a
worm which attacks multiple security holes: after de-
ciding that the initial exploit is exhausted, the worm re-
sets the permutation to its current address, changes the
permutation key, and exploits the second security hole.
Thus, even relatively rare secondary holes can be efﬁ-
ciently and quickly scanned once the worm has estab-
Figure 6: The spread of a simulated worm capable of 10
scans/second in a population of 300,000 vulnerable machines
and its comparison to the model developed in Section 2. The
simulation and theoretical results overlap completely.
lished itself on the network.
It may seem that the permutation scanning algorithm is
spoofable, but only to a very limited degree. If an unin-
fected machine responds to the scan in the same way as
a worm, by falsely claiming to be infected, it will tem-
porarily protect those machines which exist later in the
current permutation from being scanned by the worm.