SECRET STR may be applied to pointer ﬁelds whose des-
tinations are dynamic-length byte sequences bounded by
a null terminator (strings).
To avoid augmenting the source language’s gram-
mar,
these type qualiﬁers are deﬁned using source-
level attributes (speciﬁed with attribute ) followed
by a speciﬁer. SECRET uses the annotate speciﬁer,
which deﬁnes a purely syntactic qualiﬁer visible only
at the compiler’s front-end.
In contrast, NONSECRET
and SECRET STR are required during the back-end instru-
mentation. To this end, we leverage Quala [39], which
extends LLVM with an overlay type system. Quala’s
type annotate speciﬁer propagates the type qualiﬁers
throughout the IL code.
1named after pointillism co-founder Paul Signac
150  24th USENIX Security Symposium 
USENIX Association
6
Annotated Types
struct request_rec {
   NONSECRET ... *pool;
   apr_uri_t parsed_uri;
   ...
} SECRET;
Rewriting
clang transformation
new = (request_rec *) apr_pcalloc(r->pool,  );
new = (request_rec *) signac_alloc(apr_pcalloc, r->pool,  );
Instrumentation
clang/LLVM 
-dfsan -pc2s
instrumented
binary
libsignaC 
Figure 6: Architectural overview of SignaC illustrating its three-step, static instrumentation process: (1) annotation of
security-relevant types, (2) source-code rewriting, and (3) compilation with the sanitizer’s instrumentation pass.
Type attribute rewriting. In the preprocessing step, the
target application undergoes a source-to-source transfor-
mation pass that rewrites all dynamic allocations of anno-
tated data types with taint-introducing wrappers. Imple-
menting this transformation at the source level allows us
to utilize the full type information that is available at the
compiler’s front-end, including purely syntactic attributes
such as SECRET annotations.
Our implementation leverages Clang’s tooling API [12]
to traverse and apply the desired transformations directly
into the program’s AST. At a high-level, the rewriting
algorithm takes the following steps:
1. It ﬁrst amasses a list of all security-relevant data-
types, which are deﬁned as (a) all structs and unions
annotated SECRET, (b) all types deﬁned as aliases
(e.g., via typedef) of security-relevant datatypes, and
(c) all structs and unions containing secret-relevant
datatypes not separated from the containing structure
by a level of pointer indirection (e.g., nested struct
deﬁnitions). This deﬁnition is recursive, so the list
is computed iteratively from the transitive closure of
the graph of datatype deﬁnition references.
2. It next ﬁnds all calls to memory allocation functions
(e.g., malloc, calloc) whose return values are explic-
itly or implicitly cast to a security-relevant datatype.
Such calls are wrapped in calls to SignaC’s runtime
library, which dynamically introduces an appropriate
taint label to the newly allocated structure.
The task of identifying memory allocation functions is
facilitated by a user-supplied list that speciﬁes the mem-
ory allocation API. This allows the rewriter to handle
programs that employ custom memory management. For
example, Apache deﬁnes custom allocators in its Apache
Portable Runtime (APR) memory management interface.
4.2 PC2S Instrumentation
The instrumentation pass next introduces LLVM IR code
during compilation that propagates taint labels during
program execution. Our implementation extends DFSan
with the PC2S label propagation policy speciﬁed in §3.
Taint representation. To support a large number of taint
labels, DFSan adopts a low-overhead representation of
labels as 16-bit integers, with new labels allocated se-
quentially from a pool. Rather than reserving 2n labels to
represent the full power set of a set of n primitive taints,
DFSan lazily reserves labels denoting non-singleton sets
on-demand. When a label union operation is requested
at a join point (e.g., during binary operations on tainted
operands), the instrumentation ﬁrst checks whether a new
label is required. If a label denoting the union has already
been reserved, or if one operand label subsumes the other,
DFSan returns the already-reserved label; otherwise, it
reserves a fresh union label from the label pool. The fresh
label is deﬁned by pointers to the two labels that were
joined to form it. Union labels are thus organized as a
dynamically growing binary DAG—the union table.
This strategy beneﬁts applications whose label-joins
are sparse, visiting only a small subset of the universe of
possible labels. Our PC2S semantics’ curtailment of label
creep thus synergizes with DFSan’s lazy label allocation
strategy, allowing us to realize taint-tracking for legacy
code that otherwise exceeds the maximum label limit.
This beneﬁt is further evidenced in our evaluation (§5).
Table 1 shows the memory layout of an instrumented
program. DFSan maps (without reserving) the lower
32 TB of the process address space for shadow mem-
ory, which stores the taint labels of the values stored at
the corresponding application memory addresses. This
layout allows for efﬁcient lookup of shadow addresses by
masking and shifting the application’s addresses. Labels
of values not stored in memory (e.g., those stored in ma-
chine registers or optimized away at compile-time) are
tracked at the IL level in SSA registers, and compiled to
suitable taint-tracking object code.
Function calls. Propagation context A deﬁned in §3 mod-
els label propagation across external library function calls,
expressed in DFSan as an Application Binary Interface
(ABI). The ABI lists functions whose label-propagation
Table 1: Memory layout of an instrumented program.
Start
Memory Region
End
0x700000008000
0x200000000000
0x000000010000
0x000000000000
0x800000000000
0x200200000000
0x200000000000
0x000000010000
application memory
union table
shadow memory
reserved by kernel
USENIX Association  
24th USENIX Security Symposium  151
7
behavior (if any) should be replaced with a ﬁxed, user-
deﬁned propagation policy at call sites. For each such
function, the ABI speciﬁes how the labels of its arguments
relate to the label of its return value.
DFSan natively supports three such semantics: (1)
discard, which corresponds to propagation function
ρdis(γ) := ⊥ (return value is unlabeled); (2) functional,
corresponding to propagation function ρfun(γ) := (cid:31) γ
(label of return value is the union of labels of the function
arguments); and (3) custom, denoting a custom-deﬁned
label propagation wrapper function.
DFSan pre-deﬁnes an ABI list that covers glibc’s in-
terface. Users may extend this with the API functions
of external libraries for which source code is not avail-
able or cannot be instrumented. For example, to in-
strument Apache with mod ssl, we mapped OpenSSL’s
API functions to the ABI list. In addition, we extended
the custom ABI wrappers of memory transfer functions
(e.g., strcpy, strdup) and input functions (e.g., read,
pread) to implement PC2S. For instance, we modiﬁed
the wrapper for strcpy(dest,src) to taint dest with
γsrc (cid:30) γdest when instrumenting code under PC2S.
Static instrumentation. The instrumentation pass is
placed at the end of LLVM’s optimization pipeline. This
ensures that only memory accesses surviving all compiler
optimizations are instrumented, and that instrumentation
takes place just before target code is generated. Like
other LLVM transform passes, the program transforma-
tion operates on LLVM IR, traversing the entire program
to insert label propagation code. At the front-end, compi-
lation ﬂags parametrize the label propagation policies for
the store and load operations discussed in §3.3.
String handling. Strings in C are not ﬁrst-class types; they
are implemented as character pointers. C’s type system
does not track their lengths or enforce proper termination.
This means that purely static typing information is insuf-
ﬁcient for the instrumentation to reliably identify strings
or propagate their taints to all constituent bytes on store.
To overcome this problem, users must annotate secret-
containing, string ﬁelds with SECRET STR. This cues the
runtime library to taint up to and including the pointee’s
null terminator when a string is assigned to such a ﬁeld.
For safety, our runtime library (see §4.3) zeros the ﬁrst
byte of all fresh memory allocations, so that uninitialized
strings are always null-terminated.
Store instructions. Listing 4 summarizes the instrumenta-
tion procedure for stores in diff style. By default, DFSan
instruments NCS on store instructions: it reads the shadow
memory of the value operand (line 1) and copies it onto
the shadow of the pointer operand (line 10). If PC2S is
enabled (lines 2 and 11), the instrumentation consults the
static type of the value operand and checks whether it is a
non-pointer or non-exempt pointer ﬁeld (which also sub-
Listing 4: Store instruction instrumentation
Value* Shadow = DFSF.getShadow(SI.getValueOperand());
1
2 + if (Cl PC2S OnStore) {
3 +
Type *t = SI.getValueOperand()->getType();
if (!t->isPointerTy() || !isExemptPtr(&SI)) {
4 +
5 +
Value *PtrShadow = DFSF.getShadow(SI.getPointerOperand());
6 +
Shadow = DFSF.combineShadows(Shadow, PtrShadow, &SI);
7 +
}
8 + }
...
9
10
DFSF.storeShadow(SI.getPointerOperand(), Size, Align, Shadow, &SI);
11 + if (Cl PC2S OnStore) {
if (isSecretStr(&SI)) {
12 +
Value *Str = IRB.CreateBitCast(v, Type::getInt8PtrTy(Ctx));
13 +
IRB.CreateCall2(DFSF.DFS.DFSanSetLabelStrFn, Shadow, Str);
14 +
15 +
}
16 + }
Listing 5: Load instruction instrumentation
Value *Shadow = DFSF.loadShadow(LI.getPointerOperand(), Size, ...);
1
2 + if (Cl PC2S OnLoad) {
3 + if (!isExemptPtr(&LI)) {
4 + Value *PtrShadow = DFSF.getShadow(LI.getPointerOperand());
5 +
6 + }
7 + }
...
8
9
DFSF.setShadow(&LI, Shadow);
Shadow = DFSF.combineShadows(Shadow, PtrShadow, &LI);
sumes SECRET STR) in lines 3–4. If so, the shadows of
the pointer and value operands are joined (lines 5–6), and
the resulting label is stored into the shadow of the pointer
operand. If the instruction stores a string annotated with
SECRET STR, the instrumentation calls a runtime library
function that copies the computed shadow to all bytes of
the null-terminated string (lines 12–15).
Load instructions. Listing 5 summarizes the analogous
instrumentation for load instructions. First, the instrumen-
tation loads the shadow of the value pointed by the pointer
operand (line 1). If PC2S is enabled (line 2), then the in-
strumentation checks whether the dereferenced pointer is
tainted (line 3). If so, the shadow of the pointer operand
is joined with the shadow of its value (lines 4–5), and the
resulting label is saved to the shadow (line 9).
Memory transfer intrinsics. LLVM deﬁnes intrinsics for
standard memory transfer operations, such as memcpy
and memmove. These functions accept a source pointer
src, a destination pointer dst, and the number of bytes
len to be transferred. DFSan’s default instrumentation
destructively copies the shadow associated with src to
the shadow of dst, which is not the intended propagation
policy of PC2S. We therefore instrument these functions
as shown in Listing 6. The instrumentation reads the
shadows of src and dst (lines 2–3), computes the union
of the two shadows (line 4), and stores the combined
shadows to the shadow of dst (line 5).
4.3 Runtime Library
Runtime support for the type annotation mechanism is
encapsulated in a tiny C library, allowing for low coupling
152  24th USENIX Security Symposium 
USENIX Association
8
Listing 6: Memory transfer intrinsics instrumentation
1 + if (Cl PC2S OnStore && !isExemptPtr(&I)) {
2 + Value *DestShadow = DFSF.getShadow(I.getDest());
3 + Value *SrcShadow = DFSF.getShadow(I.getSource());
4 + DestShadow = DFSF.combineShadows(SrcShadow, DestShadow, &I);
5 + DFSF.storeShadow(I.getDest(), Size, Align, DestShadow, &I);
6 + }
Listing 7: Taint-introducing memory allocations
#deﬁne signac alloc(alloc, args...) ({ \
void * p = alloc ( args ); \
signac taint(& p, sizeof(void*)); \
p; })
1
2
3
4
between a target application and the sanitizer’s logic. The
source-to-source rewriter and instrumentation phases in-
line logic that calls this library at runtime to introduce
taints, handle special taint-propagation cases (e.g., string
support), and check taints at sinks (e.g., during redaction).
The library exposes three API functions:
• signac init(pl): initialize a tainting context with
a fresh label instantiation pl for the current principal.
• signac taint(addr ,size): taint each address in
interval [addr , addr +size) with pl.
• signac alloc(alloc,. . . ): wrap allocator alloc
and taint the address of its returned pointer with pl.
Function signac init instantiates a fresh taint label and
stores it in a thread-global context, which function f of
annotation SECRET(cid:31)f(cid:30) may consult to identify the own-
ing principal at taint-introduction points. In typical web
server architectures, this function is strategically hooked
at the start of a new connection’s processing cycle. Func-
tion signac taint sets the labels of each address in in-
terval [addr , addr +size) with the label pl retrieved from
the session’s context.
Listing 7 details signac alloc, which wraps alloca-
tions of SECRET-annotated data structures. This variadic
macro takes a memory allocation function alloc and its
arguments, invokes it (line 2), and taints the address of
the pointer returned by the allocator (line 3).
4.4 Apache Instrumentation
To instrument a particular server application, such as
Apache, our approach requires two small, one-time devel-
oper interventions: First, add a call to signac init at
the start of a user session to initialize a new tainting con-
text for the newly identiﬁed principal. Second, annotate
the security-relevant data structures whose instances are
to be tracked. For instance, in Apache, signac init
is called upon the acceptance of a new server con-
nection, and annotated types include request rec,
connection rec, session rec, and modssl ctx t.
These structures are where Apache stores URI param-
eters and request content information, private connection
data such as remote IPs, key-value entries in user sessions,
and encrypted connection information.
attacker process
attack 