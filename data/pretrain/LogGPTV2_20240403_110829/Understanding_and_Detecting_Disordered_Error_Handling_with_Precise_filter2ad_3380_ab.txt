24
25
26
27
28
29
30
31
32
33
34
35
36 rel_vdev:
37
38 unreg_video_dev:
39
40 unreg_v4l2_dev:
41
42 err_put_clk:
43
44
45 }
v4l2_err(&rga->v4l2_dev, "Failed to ...");
goto rel_vdev;
pm_runtime_disable(rga->dev);
return ret;
video_device_release(vfd);
video_unregister_device(rga->vfd);
v4l2_device_unregister(&rga->v4l2_dev);
}
...
return 0;
...
goto unreg_video_dev;
}
...
/* Create CMD buffer */
rga->cmdbuf_virt = dma_alloc_attrs(...);
rga->src_mmu_pages = (unsigned int *)__get_free_pages(...);
rga->dst_mmu_pages = (unsigned int *)__get_free_pages(...);
ret = video_register_device(vfd, VFL_TYPE_VIDEO, -1);
if (ret) {
Figure 3: An example showing various new DiEH bugs, found by
HERO, in a single function in the Linux kernel.
2.2.2 Classification of DiEH bugs
In §2.2.1, we present three situations that result in [FL] ̸=
[FL]′. In this section, we present concrete cases for them.
Incorrect-order follower functions. Using correct fol-
lower functions but in an incorrect order can cause secu-
rity bugs. For example, Figure 3 contains a use-after-
free bug caused by using the follower functions in an
incorrect order. The function video_device_alloc() is
called in line 9, which is before the function call of
video_register_device() in line 28. Thus, the correspond-
ing follower function video_device_release() should be
called after video_unregister_device(). However, the er-
ror path starting from line 31 calls video_device_release()
before video_unregister_device(). This incorrect-order
DiEH results in a use-after-free because rga->vfd is an alias
of vfd (line 15), and line 39 uses rga->vfd which uses the
memory freed by line 37.
Redundant follower functions. Follower functions of a
leader function might be called redundantly. This can hap-
pen when either multiple follower functions are called by
mistake, or a follower can actually correspond to multiple
leader functions, which confuses developers. For example, in
Figure 3, the follower function video_unregister_device()
(line 39) is called even when the call of its leader function
video_register_device() (line 28) returns an error, which
is unnecessary, leading to a redundant DiEH bug. A correct
case is to call video_unregister_device() only when its
leader function video_register_device() succeeds. Com-
mon issues resulting from redundant DiEH include double
free, double unlock, double refcount, etc.
Inadequate follower functions. This situation refers to
that necessary follower functions are missing.
Com-
mon cases include missing release, missing unlock, miss-
ing refcount decrease, etc.
For example, Figure 3
also contains several missing-release bugs. When the
call of the function video_register_device() failed (line
28), pointers rga->cmdbuf_virt, rga->src_mmu_pages, and
rga->dst_mmu_pages are not released, which are allocated in
lines 24, 25, and 26. These bugs are common, and the Linux
kernel has more than two thousand patches to fix inadequate
follower functions. Prior research has studied such inadequate
follower functions like missing resource release [48]; how-
ever, the other two situations, incorrect-order and redundant
follower functions remain unexplored.
2.2.3 Causes of DiEH
In this section, we summarize three major causes of DiEH
based on our empirical analysis, which are hard to avoid.
Poor design of follower functions. Different programmers
have various programming habits. Some follower functions
are hard to use if they do not follow the programming conven-
tion. For example, functions pm_runtime_get_sync() and
kobject_init_and_add() are called many times in the Linux
kernel, but they are actually poorly designed. Both of these
functions would increase the kernel refcount, even when they
failed, violating good design practice. Some Linux maintain-
ers we interacted with even complained that “if you follow the
common convention, you will get it wrong.” Though patterns
2044    30th USENIX Security Symposium
USENIX Association
and anti-patterns in API design are widely discussed [46],
factors such as a need for backward compatibility and a large
developer base makes API design a challenge.
Complexity and dependency of cleanup operations. Error
paths are prevalent in a large program, and each may contain
various cleanup operations (follower functions). Our analysis
shows that, in the Linux kernel, there are more than 120K
intra-procedural error paths, and 61.6% of them include at
least one follower function, and on average, there are 2.46
follower functions per error path. The most complex error
path contains 143 follower functions. More critically, some
follower functions are dependent on each other, e.g., a pa-
rameter of a memory-release function is a nested field of a
parameter of another function. The dependency requires the
follower functions to be called in a specific order.
Custom follower functions. Different modules employ dif-
ferent leader and follower functions. We determined that
about 80% of function pairs in the Linux kernel are custom
(§7.1). These function pairs are defined and used within a spe-
cific module such as a driver. Avoiding DiEH bugs requires
programmers to be knowledgeable about all the custom func-
tions, which is a burden.
2.2.4 Prevalence of DiEH
It is hard to avoid DiEH due to the causes mentioned in §2.2.3.
After manually checking 100 CVE-assigned vulnerabilities in
2019 from the Linux kernel, we found that DiEH causes 22
of them. Further, after checking the patches over the past two
years from the Linux kernel, we found 42% of memory leaks
and 45% of double-free bugs are due to DiEH. These results
indicate that DiEH bugs are prevalent in the OS kernels, and
can cause a wide range of security impacts. By employing a
systematic detection, we expect to find many DiEH bugs.
2.2.5 Security Impacts of DiEH
Most DiEH bugs can cause severe security impacts, depend-
ing on their contexts. Common security impacts of DiEH in-
clude use-after-free, double-free, NULL-pointer dereference,
deadlock, memory leak, refcount leak, etc. In the following,
we showcase how DiEH leads to critical security issues.
Memory corruption. DiEH bugs often cause critical mem-
ory corruption such as use-after-free, double free, and NULL-
pointer dereference. In Figure 3, we have shown how an
incorrect-order DiEH leads to a use-after-free. Also, redun-
dant and inadequate DiEH can lead to memory corruption.
For example, CVE-2019-15504 [32] is a double-free vulner-
ability in the Linux kernel caused by redundant DiEH. This
vulnerability has the highest CVSS score (10), which may be
exploited remotely to compromise the system. CVE-2019-
15292 [31] is a use-after-free vulnerability in the Linux kernel
caused by inadequate DiEH. This vulnerability also has the
highest CVSS score (10), which can compromise the confi-
dentiality, integrity, and availability of the system. Further,
DiEH is a source for NULL-pointer dereference. For example,
CVE-2019-15923 [34] is a NULL-pointer dereference vul-
nerability in the Linux kernel, which is caused by inadequate
DiEH.
Privilege escalation. DiEH can cause privilege escalation,
which is considered one of the most critical security problems.
CVE-2019-5607 [37] and CVE-2016-0728 [30] are refcount-
leak bugs found in FreeBSD and the Linux kernel. Both bugs
can cause privilege escalation because an overflowing refer-
ence count triggers a use-after-free. Similarly, CVE-2019-
0685 [29, 39] is a refcount-leak vulnerability in Windows,
which can be exploited to launch privilege-elevation attacks.
These results show that DiEH can also compromise the confi-
dentiality and integrity of OS systems.
Denial-of-Service. The most common security impact of in-
adequate follower functions is resource leak such as memory
leak and refcount leak. Memory leaks in the OS kernels are
considered critical because they can crash the whole system
and lead to Denial-of-Service (DoS) [33, 35]. Figure 3 is vul-
nerable to a memory leak in case video_register_device()
fails.
3 Overview
Based on the study, we develop an effective detection system
for DiEH bugs. In this section, we first discuss the challenges
in identifying DiEH, and then outline our solutions.
3.1 Challenges in Identifying DiEH
While prior research [28, 48] attempted to detect cases of
inadequate follower functions, cases of incorrect-order and
redundant follower functions remain unexplored. Systemati-
cally detecting DiEH bugs involves three major challenges.
Analysis of error-handling structures. HERO first needs
to analyze the error-handling structures, so as to extract EH
stacks and deltas, which will be leveraged to identify function
pairs. In particular, HERO needs to: (1) identify the normal
paths (e.g., 4 , 7 , and 13 in Figure 1) and error paths (e.g.,
22 , 24 , and 26 in Figure 1) in a function, (2) identify the
leader and follower functions in the normal and error paths.
Normal and error paths are often interleaved in the program.
Thus, to identify and distinguish them, we need to know their
demarcation points, which is a non-trivial task. In a function,
there may be many normal and error paths, but only some of
them should be associated together. Thus, we should map
the normal paths to their corresponding error-paths. Further,
numerous functions are called in normal and error paths, but
not all of them should be called in pairs. Therefore, we need
to extract the leader functions from normal paths and follower
USENIX Association
30th USENIX Security Symposium    2045
Figure 4: An overview of HERO. It has four steps; by taking the source code of a program, it automatically reports ranked DiEH bugs. CFG =
Control flow graph, CG = call graph, EHG = error-handling graph, EHS = error-handling stack, LF = leader function, FF = follower function,
FPL = function-pair list, Sym sum = symbolic summary.
functions from the corresponding error paths. More impor-
tantly, as we will describe in §4, the pairing of a leader and a
follower function can be either conditional or unconditional.
A precise pairing analysis requires distinguishing them, which
is hard.
Function-pair identification. According to our definition
of DiEH (§2.2.1), the detection of DiEH is essentially check-
ing [FL] ̸= [FL]′, which requires the foreknowledge of
leader-follower function pairs. This would previously re-
quire domain knowledge or manual efforts, and its automa-
tion is a significant challenge. In particular, programs tend
to extensively use custom functions—defined and used in a
specific module. Such functions have a limited number of
uses, so existing mining-based inferences may not work. In
fact, our study estimates that 80% of follower functions in
the Linux kernel are custom. Moreover, there are a num-
ber of different classes of leader-follower pairs, such as al-
location/deallocation, lock/unlock, getter/putter, and regis-
ter/unregister. As a result, previous works (e.g., [15, 61])
either assume that function pairs are provided or only target a
specific class of common pairs.
Elimination of harmless DiEH cases. The checking of
“[FL] ̸= [FL]′” returns DiEH cases which may not be harmful,
i.e., false positives. There are two major causes of harm-
less DiEH cases. First, by nature, the path of an EH stack
often involves path constraints (i.e., return-value check). A
path is infeasible if conflicting constraints exist. The intu-
itive solution, symbolic execution, may not work in complex
programs. Second, for the incorrect-order DiEH cases if the
follower functions are independent, their order does not mat-
ter. Therefore, for these incorrect order DiEH cases, we need
to understand the potentially complicated data dependencies
among different follower functions to determine potential
bugs. Note that redundant and inadequate DiEH cases do not
have this challenge because they are independent of ordering.
3.2 HERO Techniques
To address the challenges, we propose multiple new tech-
niques. In this section, we briefly introduce them.
Understanding error-handling structures. To identify
function pairs, HERO first automatically understands the
error-handling structures and represents them with a graph.
This technique starts with identifying error checks. An error
check is basically an if statement that checks whether a func-
tion returns an error code. For example, lines 5, 8, 14, and 15
are error checks in Figure 1. With the identified error checks,
we can identify normal paths and error paths—the code path
prior to the error check is the normal path, while the taken
path (as opposed to the fall-through) of the error check is the
error path. This technique also identifies leader and follower
functions on the normal and error paths by removing irrele-
vant functions (e.g., via dependency analysis), and stores all
the information in a graph, referred to as the error-handling
graph or EHG. We will present details of the technique in
§4.1.
Pairing functions with EH deltas. To identify function
pairs in a program, we propose delta-based analysis, which
can precisely pair functions even when they are custom (i.e.,
only with a small number of occurrences). The key insight is
that follower functions in the error path are called in a spe-
cific (reverse) order, corresponding to the leader functions
in the normal path, which constitutes EH stacks, as shown
in Figure 2. More importantly, when we compare two ad-
jacent EH stacks, we naturally obtain the EH delta, which
oftentimes has only one leader function and one follower
function—therefore, we can infer that this follower function
is paired to the specific leader function. For example, by
comparing EH stacks 1 and 2 in Figure 2, we obtain the EH
delta, 4 – 26 , which constitutes a function pair. Similarly,
EH stacks 2 and 3 generate the EH delta, 7 – 24 , forming an-
other function pair. To further improve the pairing precision,
we propose EH-stack calibration to distinguish conditional
and unconditional pairs. Details are presented in §4.
2046    30th USENIX Security Symposium
USENIX Association
EHS1EHS2EHS3EHS5EHS6EHS4Collecting & RankingBuilding EHGPrep environmentsCFGExtractSource codeLLVM IRsIRCompileAnalysisFPLFP1FP2...Bug detectionPair detectionFFLF-Delta pairingCG1.Symbolic summaryEHSLF1()LF2()...FF1()DetectingNP31211122112EHS2EHS3EPDiEH casesLFB() -  ???LFC() - FFC()LFC()-FFC'()?...BUG1DiEH bugsBUG2...2.Dependency reasoning 3.Cross-validationEHS calibrationDetecting DiEH bugs with identified pairs. To detect
DiEH bugs, we first detect DiEH cases, and then remove
infeasible and harmless cases to report DiEH bugs. HERO
detects DiEH cases by comparing the follower function list
[FL] with the expected follower function list [FL]′. To re-
move infeasible DiEH cases, we propose a scalable symbolic
summary for conflicting constraints, which helps eliminate
infeasible paths. In addition, to remove harmless incorrect-
order DiEH cases, we propose follower-dependency reason-
ing, which finds independent follower functions whose order
does not matter. Finally, we provide a ranking of detected
DiEH bugs to facilitate manual confirmation. More design
details will appear in §5.
3.3 The HERO Framework
We now briefly introduce the workflow of HERO, shown
in Figure 4. HERO consists of four steps. (1) Preparing
the analysis environment. HERO first prepares the analysis
environments by compiling the source code to LLVM IRs
(bitcode files), and building the control-flow graph (CFG)
and call-graph (CG) for the program. (2) Constructing error-
handling graph. Second, HERO analyzes the unique error-
handling structures to extract errors and EH stacks for each
function. After that, the HERO constructs an EHG to record
all the information. (3) Leader-follower pairing. Third, based
on the EH stacks, the HERO computes the EH deltas and
leverages them to pair functions. (4) DiEH detection. Finally,
based on function pairs and the EHG, HERO detects DiEH
bugs in the program. As a result, HERO reports the DiEH
bugs. The reports include details such as disordered situations
and suggested fixes.
4 Delta-Based Precise Function Pairing
A key challenge to detect DiEH bugs involves identifying
function pairs including custom ones. We propose a novel
technique that leverages the unique error-handling structure—
EH stacks and deltas—to precisely pair functions. In this
section, we present the design of the pairing analysis.
4.1 Extracting Error-Handling Structures
Identifying error checks, normal and error paths. To ex-
tract EH stacks of a function, we first identify error checks to
collect normal paths and error paths. To identify error checks,
we collect common error codes such as ENOMEM, and common
error-handling functions such as pr_err() and panic(); §6
presents more details. Such error codes and error-handling
functions are typically uniformly defined in dedicated header
files. HERO regards a path as an error path if it returns an
error code or a NULL pointer, or calls at least one error-
handling functions. This design is consistent with existing
works [19, 20, 27, 48].With the identified error checks, we
naturally collect both normal paths and error paths of each
error check. A path is represented with a list of code blocks,
and a function can potentially contain a large number of paths.
Filtering follower functions by removing noises. Not all
the functions in the normal and error paths should be paired,
e.g., kprintf(). Therefore, we want to remove irrelevant
functions. We first remove noisy functions in the error paths,
i.e., filtering follower functions. We observe that unlike nor-
mal paths, error paths tend to be much simpler, in which irrel-
evant functions are typically commonly used error-messaging
(e.g., dev_err()) and exiting (e.g., panic()) functions. There-
fore, we remove such functions, and details are presented in
§6.
Filtering leader functions through data dependency.
Compared to error paths, normal paths are more complicated,
which call diverse functions. As such, we instead employ
data dependency to filter potential leader functions, given that
we have already selected potential follower functions men-
tioned above. The insight is that follower functions clean
up resources obtained by or operations performed by leader
functions; a leader function and the corresponding follower
function should be connected through variables. For exam-
ple, kfree() takes the pointer returned by kmalloc() as the
parameter. With the insight, we select potential leader func-
tions based on data dependencies on the selected follower
functions. Specifically, if the return value or a parameter of
a function is used by a follower function, we select it as a
potential leader function. To be conservative, our dependency
analysis is field-insensitive. That is, different fields of an
object are also considered dependent.
Constructing EH stacks. With the potential leader and
follower functions collected, we next construct EH stacks.
An EH stack consists of three parts: .
Here, [LD] is a non-empty list of leader functions, which
are in the normal path; [FL] is a non-empty list of follower
functions, which are in the error path; ERROR is the call-site
to the error-generating function corresponding to the error
check. We bypass the path-explosion problem by collecting
EH stacks using intra-procedural analysis.
Figure 5: Constructing the EHG for the function in Figure 1. EHS
= EH stack. With the EHG, we can quickly find adjacent EH stacks
to compute EH deltas.
USENIX Association
30th USENIX Security Symposium    2047
CFGEHGROOTEHS1EHS2EHS3EHS434-57-81213-141617-18...EH Stacks34726283428ConstructBuilding error-handling graph. To record all the identified
error-handling information for a function, we then build an
error-handling graph (EHG). Another purpose of building
EHG is to also capture the adjacency of EH stacks, which
facilitates the pairing analysis. The nodes of the EHG are EH