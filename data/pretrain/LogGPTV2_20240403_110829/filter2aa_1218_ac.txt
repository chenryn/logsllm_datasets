request.form/request.files。
multipart-parse.md
5/19/2021
22 / 33
使⽤的是ImmutableMultiDict，在werkzeug/datastructures.py中定义，可以看到，最终form和
files都是把所有multipart数据都获取了，即使具有相同的key。如果我们使⽤常⽤的
keys()/values()/item()函数，都会因为相同key，⽽只能取到第⼀个key的值，想获取相同key的所有
取值，需要使⽤ImmutableMultiDict.to_dict()⽅法，并设置参数flat=True。
httpbin就是在处理request.form时，多加了这种处理，导致最后看到两个取值的列表，但是在
request.files处理时没有进⾏to_dict。
由此可⻅，不同的后端程序，实现起来可能会不⼀样，如果waf在实现时，并没有将所有key重复的数据
都解析出来，并且进入waf规则匹配，那么使⽤重复的key，也会成为很好的绕过waf的⽅式。
引号
上文提到，_option_header_piece_re这个正则在flask中也会⽤来解析Content-Disposition，所以对于
name/filename的取值，和boundary取值机制是⼀样的，加了双引号是quoted string，没有双引号的是
token。
所以主要分析php是如何处理的，⾸先php在处理boundary时，如果空格开头，那么空格将作为boundary的⼀
部分即使空格后存在正常的双引号闭合的boundary。但是在Content-Disposition中，双引号外的空格是可以被
忽略的，当然不使⽤双引号，参数值两边的空格也会被忽略。
multipart-parse.md
5/19/2021
23 / 33
此⼩段标题引号，并没有像上⼀⼤段⼀样使⽤双引号，是因为php不仅⽀持双引号取值，也⽀持单引号取值，
这很php。
flask肯定是不⽀持单引号的，上⾯的正则能看出来，单引号会被当作参数值的⼀部分，这⾥看了下Java的
commons-fileuploadv1.2的实现org.apache.commons.fileupload.ParameterParser.java:L76，在解析
参数值的时候也是不⽀持单引号的。
multipart-parse.md
5/19/2021
24 / 33
所以如果waf在multipart解析中是不⽀持参数值⽤单引号取值的，对于php⽽⾔，出现这种payload就可以导致
waf解析错误。
Content-Disposition: form-data; name='key3; filename='file_name.txt; name='key3'
⽀持单引号的会将之解析为{"name": "key3"}，并没有filename参数，视为非文件参数
不⽀持单引号的会将之解析为{"name": "'key3'", "filename": "'file_name.txt"}，视为文件参数，将
之后参数值视为文件内容。
这种waf和后端处理程序解析的不⼀致可能会导致waf被绕过。
此时，还有⼀个引号的问题没有解决，就是如果出现多余的引号会发⽣什么，形如Content-Disposition:
form-data; name="key3"a"; filename="file_name;txt"，上文在boundary的解析中已经看到了结果，
name会取key3，并忽略之后的内容，即使含有双引号，那么后⾯的filename内容还能正确解析吗？正好看看
flask使⽤正则和Java/php使⽤字符解析带来的⼀些差异。
看⼀下flask的具体实现werkzeug/http.py:L402。
result = [] 
value = "," + value.replace("\n", ",") # ',form-data; name="key3"aaaa"; 
filename="file_name.txt"'
while value: 
    match = _option_header_start_mime_type.match(value) 
    if not match: 
        break 
    result.append(match.group(1))  # mimetype 
    options = {} 
    # Parse options 
    rest = match.group(2) 
# '; name="key3"aaaa"; filename="file_name.txt"' 
    continued_encoding = None 
    while rest: 
        optmatch = _option_header_piece_re.match(rest) 
        if not optmatch: 
            break 
        option, count, encoding, language, option_value = optmatch.groups() # 
multipart-parse.md
5/19/2021
25 / 33
option_value: "key3" 
        ... 
        ... 
        ... # 省略 
        rest = rest[optmatch.end() :] 
    result.append(options) 
使⽤_option_header_piece_re匹配到之后，会继续从下⼀个字符开始继续进入正则匹配，所以第⼆次进入
正则时，rest为aaaa"; filename="file_name.txt"，以a开头就⽆法匹配中正则了，直接退出，导致
filename解析失败，并且name取key3。
Java的代码在上⾯已经贴出，其中的terminators=";"，也就是说当出现双引号时，会忽略;，但是当找到闭
合双引号时，取值没有结束，会继续寻找;，这就导致会⼀直取到闭合双引号外的;才会停⽌，这和php是不⼀
致的，php虽然后⾯多余的双引号会影响后续filename取值，但是会在第⼀次出现闭合双引号时取值结束。
对于flask/php来说，如果waf解析⽅式和后端不相同，也可能会错误判断文件和非文件参数，但是Java后端很难
使⽤，因为对于name的取值会导致后端⽆法正确获取。但是这个取值特性依旧有⽤，下文文件扩展名将进⾏介
绍。
multipart-parse.md
5/19/2021
26 / 33
转义符号
php和flask都⽀持参数值中含有转移符号，从上⾯的_option_header_piece_re正则可以看出，和boundary
取值⼀致，flask在quoted string 类型的参数值中的转义符具有转义作⽤，在token类型中只是⼀个字符\，
不具有转义作⽤。
php虽然在token类型中，解析和对boundary解析⼀致，转义符号具有转义作⽤，但是在解析quoted string
类型时解析⽅式和boundary竟然不⼀样了，解析boundary时，转义符为⼀个\字符不具有转义作⽤，所以
boundary="aa\"bbb"会被解析为aa\，⽽在Content-Disposition中，转义符号具有转义作⽤。
和上文提到的php解析单引号的⽅式⼀样，存在这么⼀种payload
Content-Disposition: form-data; name="key3\"; filename="file_name.txt; name="key3"
multipart-parse.md
5/19/2021
27 / 33
flask/php将之解析为非文件参数，并且根据多个重复的name/filename解析机制，最终解析结果{"name":
"key3"}
如果waf并不⽀持转义符号的解析，只是简单的字符匹配双引号闭合，那么解析结果为{"name": "key3\\",
"filename": "\"file_name.txt"}，视为文件参数，将之后参数值视为文件内容，造成解析差异，导致waf
可能被绕过。
上文提到php可以使⽤单引号取值，在单引号中增加转义符的解析⽅式会和双引号不同，具体可参考php单引号
和双引号的区别与⽤法。
文件扩展名
前文主要提出⼀些mutlipart整体上的waf绕过，在源站后端解析正常的情况下让waf解析失败不进入规则匹配，
或者waf解析与后端有差异，判断是否为文件失败，导致规则⽆法匹配，或者filename参数根本没有进入waf的
规则匹配。⽆论是在CTF比赛中还是在实际渗透测试中，如何绕过文件扩展名是⼤家很关注的⼀个点，所以这
⼀段内容主要介绍，在waf解析到filename参数的情况下，从协议和后端解析的层⾯如何绕过文件扩展名。
其实这种绕过就⼀个思路，举个简单的例⼦filename="file_name.php"，对于⼀个正常的waf来说取到
file_name.php，发现扩展名为php，接着进⾏拦截，此处并不讨论waf规则中不含有php关键字等等waf规则
本⾝不完善的情况，我们只有⼀个⽬标，那就是waf解析出的filename不出现php关键字，并且后端程序在验证
扩展名的时候会认为这是⼀个php文件。
从各种程序解析的代码来看，为了让waf解析出现问题，⼲扰的字符除了上文说的引号，空格，转义符，还
有:;，这⾥还是要分为两种形式的测试。
token形式
Content-Disposition: form-data; name=key3; filename=file_name:.php
Content-Disposition: form-data; name=key3; filename=file_name'.php
Content-Disposition: form-data; name=key3; filename=file_name".php
Content-Disposition: form-data; name=key3; filename=file_name\".php
Content-Disposition: form-data; name=key3; filename=file_name .php
multipart-parse.md
5/19/2021
28 / 33
Content-Disposition: form-data; name=key3; filename=file_name;.php
前五种情况flask/Java解析结果都是⼀致的，会取整体作为filename的值，都是含有php关键字的，这也
说明如果waf解析存在差异，将特殊字符直接截断取值，会导致waf被绕过。
最后⼀种情况，flask/Java/php解析都会直接截断，filename=file_name，这样后端获取不了，⽆论waf解
析⽅式如何，⽆法绕过。
对于php⽽⾔，前三种会如flask以⼀样，将整体作为filename的值，第五种空格类型，php会截断，最终
取filename=file_name，这种容易理解，当没出现引号时，出现空格，即认为参数值结束。
然后再测试转义符号的时候，出现了从\开始截断，并去\后⾯的值最为filename的值，这种解析⽅式和
boundary解析也不相同，当然双引号和单引号相同效果。
看代码才发现，php并没有把\当作转义符号，⽽是贴⼼地将filename看做⼀个路径，并取路径中文件的
名称，毕竟参数名是filename啊:)
multipart-parse.md
5/19/2021
29 / 33
所以这个解析⽅式和引号跟本没关系，只是php在解析filename时，会取最后的\或者/后⾯的值作为文件
名。
quoted string形式
Content-Disposition: form-data; name=key3; filename="file_name:.php"
Content-Disposition: form-data; name=key3; filename="file_name'.php"
Content-Disposition: form-data; name=key3; filename="file_name".php"
Content-Disposition: form-data; name=key3; filename="file_name\".php"
Content-Disposition: form-data; name=key3; filename="file_name .php"
Content-Disposition: form-data; name=key3; filename="file_name;.php"
flask解析结果还是依照_option_header_piece_re正则，除第三种filename取file_name之外，其他都会
取双引号内整体的值作为filename，转义符具有转义作⽤。php第三种也会解析出file_name，但是在第四
种转义符是具有转义作⽤的，所以进入上文的*php_ap_basename函数时，是没有\的，所以其解析结果
也会是file_name".php，使⽤单引号的情况和上文引号部分分析⼀致。
multipart-parse.md
5/19/2021
30 / 33
对于Java来说，除第三种情况外，都是会取引号内整体作为filename值，但是第三种情况就非常有趣，上
文引号部分已经分析，Java会继续取值，那么最后filename取值为"file_name".php"。
所以对于Java这个异常的特性来说，通常waf会像php/flask那样在第⼀次出现闭合双引号时，直接取双引
号内内容作为filename的取值，这样就可以绕过文件扩展名的检测。
4. Content-Type(Body)
对于⼀些不具有编码解析功能的waf，可以通过对参数值的编码绕过waf。
Charset
对于Java，可以使⽤UTF-16编码。
multipart-parse.md
5/19/2021
31 / 33
flask可以使⽤UTF-7编码。
由于Java代码中，会把文件和非文件参数都⽤org.apache.commons.fileupload.FileItem来存储，所以都
会进⾏解码操作，⽽flask将两者分成了form和files，⽽且files并没⽤使⽤Content-Type中的charset进⾏解码
werkzeug/formparser.py:L564。
其他
multipart-parse.md
5/19/2021
32 / 33
RFC7578中写了⼀些其他form-data的解析⽅式，可以通过_charset_参数指定charset，或者使⽤encoded-
word，但是测试的三种程序都没有做相关的解析，很多只是在邮件中⽤到。
5. Content-Transfer-Encoding
RFC7578明确写出只有三种参数类型可以出现在multipart/form-data中，其他类型MUST被忽略，这⾥的第三种
Content-Transfer-Encoding其实也被废弃。
然⽽在flask代码中发现werkzeug实现了此部分。
multipart-parse.md
5/19/2021
33 / 33
也可以使⽤QUOTED-PRINTABLE编码⽅式。
参考链接
https://github.com/postmanlabs/httpbin
https://www.ietf.org/rfc/rfc1867.txt
https://tools.ietf.org/html/rfc7578
https://tools.ietf.org/html/rfc2046#section-5.1
https://www.php.net/manual/zh/language.variables.external.php
https://www.cnblogs.com/youxin/archive/2012/02/13/2348551.html
https://xz.aliyun.com/t/9432