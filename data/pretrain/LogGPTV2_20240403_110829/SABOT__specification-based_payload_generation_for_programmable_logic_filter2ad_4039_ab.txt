Intuitively, this control system never dispenses A, but rather ﬁlls
the tank with B. Unfortunately, the adversary does not know how
to specify to the PLC which device is meant by “Valve A” or “Start
Button.” This is because PLCs do not necessarily label their I/O
devices with semantically meaningful names like “Drain Valve.”2
2Some PLCs such as the Rockwell Controllogix line allow pro-
grammers to give names to I/O ports, but these names are still of
no use autonomous malware.
PLC CodeProcess SpeciﬁcationVTDM RecoveryVTDMGeneric MalcodePayloadPayload ConstructionPLCMalcodeDecompilationModel441Desc.
Bytecode Accumulator α
Stack
And x1
Nested Or
And x2
And y1
Pop stack
Store α to y2 = y2
A x1
O(
A x2
A y1
)
x1 ∨ (x2 ∧ y1)
C ← C ∪ {y2 ← x1 ∨ (x2 ∧ y1)}
VM ← VM ∪ {x1, x2, y1, y2}
(cid:62)
(cid:62)
x1
(cid:62)
x2
x2 ∧ y1
x1 : ∨
x1 : ∨
x1 : ∨
-
-
-
-
Table 1: Example accumulation of a constraint.
Instead, PLCs use memory addresses, e.g., x1, y2, to read values
from and write values to sensors and physical devices. We refer
to this set of address names as VM. The adversary, who does not
know the semantics of the names in VM, prefers to use the set of
semantically meaningful names Vφ = { Start Button, Valve B, . . .}.
This raises the problem, How can an adversary project attack
payloads using names in Vφ onto a system that uses the unknown
memory references VM? One of SABOT’s main tasks is to ﬁnd a
mapping from the names in Vφ to those in VM. Here, SABOT re-
quires one additional piece of information from the adversary: a
speciﬁcation of the target behavior.
If the adversary is to write a payload such as the one above for
the mixing plant, then it is assumed that he knows some facts about
the plant. For example, the adversary can make statements like:
“The plant contains two ingredient valves, and one drain valve,”
and “When the start button is pressed, the valve for ingredient A
opens.” The adversary encodes such statements into a behavioral
speciﬁcation of the target plant. When SABOT is then given a spec-
iﬁcation and control logic from a plant PLC, it will try to locate the
device addresses that behave the same under the rules of the logic
as the semantically meaningful names in the adversary’s speciﬁca-
tion.
Like the payload, the sensors and devices speciﬁed in the spec-
iﬁcation are deﬁned using semantically meaningful names from
Vφ. Given a control logic implementation, SABOT will construct
a model M from the control logic (Var(M) = VM), and perform
a model checking analysis to ﬁnd the Variable To Device Mapping
(VTDM) µ : Vφ → VM. SABOT assumes it has the correct
mapping µ when all properties in the speciﬁcation hold under the
control logic after their names have been mapped according to µ.
For example, the above property, “When the start button is pressed,
the valve for ingredient A opens,” will be checked as, “Under the
rules of the control logic, When x4 is pressed, then y1 opens,” un-
der the mapping µ = {Start Button (cid:55)→ x4, Valve A (cid:55)→ y1}.
The speciﬁcation is written as one or more temporal logic for-
mulas φ (Var(φ) ⊆ Vφ) with some additional hints for SABOT.
For a given mapping µ, the adversary supplied payload or spec-
iﬁcation under µ, denoted µ/payload or µ/φ, is identical to the
original, except with any names from Vφ replaced by names from
VM. Thus, to check whether a given mapping µ maps Vφ to the
devices is correct, SABOT checks:
M |= µ/φ
Read, “The temporal logic formula φ with literal names mapped
by µ holds over the labeled transition system M.” If these checks
are satisﬁed under a given µ, then SABOT instantiates the payload
over Vφ into a payload over VM.
3.2 Decompilation
To obtain a process model M, SABOT must ﬁrst bridge the gap
between the bytecode-level control logic, and the model itself. This
Constraint
input x
output or local y
c = y ← α
timer t
c = t ← α
NuSMV Model M
VAR x : boolean;
ASSIGN
init(x) := ⊥;
next(x) := {(cid:62), ⊥};
VAR y : boolean;
ASSIGN
init(y) := ⊥;
next(y) := α;
VAR t : boolean, tp : boolean;
ASSIGN
init(t) := ⊥;
next(t) := α ∧ (tp ∨ t) ? (cid:62) : ⊥;
init(tp) := ⊥;
next(tp) := α;
Table 2: Constructing M from constraints C.
means decompiling a list of assembly mnemonics that execute on
an accumulator-based architecture into a labeled transition system
deﬁned over state variables. SABOT performs this decompilation
in two steps. (1) The disassembled control logic bytecode is con-
verted to an intermediate set of constraints C on local, output, and
timer variables from the PLC. (2) The constraints in C are then
translated to M using the modeling language of the NuSMV model
checker [9].
For step 1, the constraints are obtained via symbolic execution of
the bytecode. This requires a preprocessing to remove nonstandard
instructions not handled by our symbolic execution. The resulting
code conforms to the IEC 61131-3 standard for PLC instruction
lists [21]. The control ﬂow graph (CFG) of the resulting code is
constructed and a symbolic execution is done over the CFG accord-
ing to a topological ordering. Several register values are tracked,
most importantly the logic accumulator α. An example symbolic
accumulation of control logic is shown in Table 1.
Step 2 translates the set of constraints resulting from step 1 into a
control logic model M that can be evaluated by the NuSMV model
checker. NuSMV takes deﬁnitions of labeled transitions systems
with states consisting of state variables. SABOT uses the VAR · :
boolean expression to declare a state variable for each name in
VM. Each Boolean variable is ﬁrst initialized using the init( · )
expression, and updated at each state transition using the next( · )
expression. A Boolean variable may be initialized or updated to a
constant value of (cid:62) or ⊥, another expression, or a nondeterministic
assignment {(cid:62),⊥}, where both transitions are considered when
checking a property. For a complete speciﬁcation of the NuSMV
input language, see [7].
As shown in Table 2, there are three translation rules. In the case
of input variables, a new Boolean variable is declared, initialized to
⊥, and updated nondeterministically. The nondeterministic update
is necessary because all possible combinations of sensor readings
must be factored into the model. Output and local variables are
initialized to ⊥ and updated according to the expression α.
Timer variables require an extra bit of state. Recall that a PLC
timer t = (cid:62) only when its input expression α = (cid:62) continuously
for at least t’s preset time duration. Furthermore, any input variable
in the model may change state while the timer is expiring. Thus, for
each timer, α must hold for two state transitions. The ﬁrst transi-
tion simulates the starting of the timer’s countdown, and the second
simulates the expiration, allowing the timer to output (cid:62).
The decompilation process includes several other steps such as
preprocessing bytecode to rewrite vendor speciﬁc instructions. Full
details can be found in our technical report [30].
4423.3 VTDM Recovery
SABOT attempts to ﬁnd a Variable To Device Mapping (VTDM)
µ from names in the adversary’s speciﬁcation to names in the con-
trol logic model M. If the correct mapping is found, then the se-
mantics are known for each name in VM mapped to by µ.
A speciﬁcation is an ordered list of properties. A property with
name id has the following syntax:
id :  
  φ
As an example, we can now restate our earlier speciﬁcation for the
plant start button, “When the start button is pressed, the valve for
ingredient A opens,” as the following property sbutton:
∗
sbutton : input start
∗
output vA INIT start
∗ ⇒ AX vA
start
The only mandatory part of a property is the Computational Tree
Logic (CTL) formul φ [19]. (Interpretations of CTL formulae are
given in quotes for the unfamiliar reader.) The CTL formula is
deﬁned over names given after the input and output keywords,
where {input-list} ∪ {output-list} ⊆ Vφ. SABOT will
check φ under the control logic model M in three steps:
1. Choose µ :{input-list}∪{output-list}→ VM.
2. Apply µ to φ by substituting all names in φ with their map-
pings in µ. This is denoted by µ/φ, read “The property φ
under the mapping µ.”
3. Check M |= µ/φ.
These three steps are applied over all possible mappings for a given
speciﬁcation. There are two optional parts to each speciﬁcation, the
list of inputs that will be initially ON INIT, and the conﬂict reso-
lution hint UNIQUE. Any names in init-input-list will be ini-
tialized to (cid:62) by the model checker. The keyword UNIQUE declares
that the names in input-list and output-list will not appear
in any conﬂict mappings.
A conﬂict mapping is a satisfactory mapping of multiple distinct
sets of variables in Vφ into a property. Conﬂict mappings repre-
sent ambiguity in the speciﬁcation, and must be resolved by adding
additional properties to the speciﬁcation. In practice, one or two
additional properties are required to resolved such conﬂicts. The
addition of properties only modiﬁes the constant factor of the map-
ping algorithm’s running time. A full discussion of conﬂict map-
pings with examples can be found in Section 3.3.2.
3.3.1 Mapping Speciﬁcations to Models
SABOT searches for a mapping µ : Vφ → VM such that M |=
µ/φ for every speciﬁcation φ in the speciﬁcation. This is done
incrementally, ﬁnding a satisfying mapping for each speciﬁcation
before moving to the next. If no satisfying mapping is found for
a given speciﬁcation, the previous speciﬁcation’s mapping is dis-
carded, and it is searched again for another satisfying mapping. If
no more satisfying mappings are found for the ﬁrst speciﬁcation
in the speciﬁcation, the algorithm terminates without identifying a
mapping. If a satisfying mapping is found for all speciﬁcations, the
algorithm accepts this as the correct mapping µSAT Algorithm 1
shows the basic mapping procedure (except for the UNIQUE fea-
ture).
We use the NuSMV model checker [9] for deciding M |= µ/φ.
The running time of IncMapping is dependent on the number of
false positive mappings for each speciﬁcation in the speciﬁcation
bounded below by Ω(|specif ication|) and above by O(|VM||Vφ|
).
Algorithm 1: IncMapping
: µ, spec, VM, M
Input
Output: The satisfying mapping µSAT or none
1 if spec = ∅ then
µSAT ← µ
2
return (cid:62)
3
4 φ ←Pop(spec)
5 foreach µ0 :Var(φ) → VM do
6
7
if M |= µ0/φ then
if IncMapping(µ ∪ µ0, spec, VM− µ0(Var(φ)), M)
then
return (cid:62)
8
9 return ⊥
3.3.2 Resolving Conﬂicts
Consider the problem of writing a speciﬁcation for the chemical
mixer process shown in Figure 1. First, one must deﬁne the names
in Vφ. Denoting input variable names with an ‘∗’, let l
∗
∗
2, and l
3
be the names of the low, mid, and high level switches respectively,
∗ be the start button. Additionally, let vA and vB be
and let start
the valves for ingredients A and B, mixer be the mixer, and vd
be the drainage valve. As in the ﬁgure, VM = {x1, x2, x3, x4} ∪
{y1, y2, y3, y4}.
∗
1, l
Recall the speciﬁcation sbutton from above. While sbutton is
an accurate speciﬁcation of plant behavior, it is also ambiguous.
To see this, we ﬁrst consider the case of the correct (true positive)
mapping µT P = {start
∗ (cid:55)→ x4, vA (cid:55)→ y1}. When the map-
ping is applied to the CTL speciﬁcation, we get: µT P /sbutton =
INIT x4 x4 ⇒ AX y1. µT P is the correct mapping because, (1)
µT P /sbutton holds under the control logic (Figure 1(c)), and (2)
x4, and y1 are the names of the control input and output for the
devices that the adversary intended.
∗ (cid:55)→
x2, vA (cid:55)→ y2}. Judging by the same criteria as above, we can see
that (1) µF P /sbutton holds under the control logic, but criterion
(2) fails because x2 and y2 (the mid level switch and the B in-
gredient valve respectively) are not the names of control variables
intended by the adversary. This raises the question: how can the
adversary remove this ambiguity from the speciﬁcation without a
priori knowledge of the semantics of x1, x2, y1, and y2?
Consider an example false positive mapping: µF P = {start
While the adversary does not know the semantics of names in
VM, he does know the semantics of names in Vφ. Thus, the adver-
sary need not know that x2 is a name for a mid level switch and
not a start button, only that there is some control variable name that
corresponds to a mid level switch. But the adversary already has
∗
an abstraction for this, the name l
2. The same goes for y2 and its
abstraction, the name vB. Thus, the adversary can reliably remove
this ambiguity by checking which names in Vφ are in conﬂict with
names in the property sbutton. For example, consider a speciﬁca-
tion that has the same structure as sbutton but with different names
(Read, “Switch 2 activates valve B”):
cf lict : input l
∗
2 output vB INIT l