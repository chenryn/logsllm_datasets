。左结合和右结合这两个概念只对
第 17章计算机体系结构基础
---
## Page 257
4.运算符总结
打下基础。
中的数据。本章简要介绍组成计算机的CPU、内存和设备以及它们之间的关系，为后续章节的学习
令，CPU从内存中取指令（Fetch）执行，其中有些指令让CPU做运算，
构的主要特点是：CPU（CPU，Central Processing Unit，
现代计算机都是基于Von Neumann体系结构的，不管是嵌入式系统、PC还是服务器。这种体系结
5. Memory Hierarchy
4. MMU
3.设备
2. CPU
目录
第17章计算机体系结构基础请点评
1.内存与地址
上二
第17章计算机体系结构基础
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分IⅡI. C语言本质
起始页
上一级
，中央处理器，或简称处理
，有些指令让CPU读写内存
1.内存与地址
下一页
---
## Page 258
的起始地址。
多字节的数据类型保存在内存中要占用连续的多个地址，这种情况下数据的地址是它所占内存单元
始编号的整数，CPU通过地址找到相应的内存单元，
箱投入信件或取出信件。内存与此类似，
我们都见过像这样挂在墙上的很多个邮箱，
第17章计算机体系结构基础
同的是，
1.内存与地址 请点评
图17.1.邮箱的地址
一个地址所对应的内存单元不能存很多东西，
2216
2208
2204
第17章计算机体系结构基础
2217
全国嵌入式人才培训基地
全国嵌入式人才培训基地
每个内存单元有一个地址（Address）
1.内存与地址 
 每个邮箱有一个房间编号，
起始页
上一级
，取其中的指令或者读写其中的数据。与邮箱不
27
8
 根据房间编号找到相应的邮
2219
2
内存地址是从0开
2. CPU
258
下一页
---
## Page 259
执行。CPU最核心的功能单元包括：
CPU总是周而复始地做同一件事：从内存取指令，然后解释执行它，然后再取下一条指令，再解释
2. CPU 请点评
·地址和数据总线（Bus）。
器，执行过程可以想像成这样：
线上有1和0两种状态。
结果保存到哪里，
算术逻辑单元（ALU，
是读写内存，指令译码器负责解释这条指令的含义，然后调动相应的执行单元去执行它。
指令译码器（Instruction Decoder）。
令，
位表示内存地址,
址会自动加上该指令的长度，
程序计数器（PC,
称为通用寄存器（General-purpose Register）。
Register)
止，
某种特定的用途,
快得多。
，就调动算术逻辑单元去做运算,
，CPU按程序计数器保存的地址去内存中取指令然后解释执行，这时程序计数器保存的地
图17.2.访问内存读数据的过程
而另外一
，可能保存到寄存器中，也可能保存到内存中。
有些位表示寄存器编号，
。如果在执行指令过程中需要访问内存，
Arithmetic and Logic Unit）
一些寄存器可以用在各种运算和读写内存的指令中，
 是CPU内部的高速存储器，像内存一样可以存取数据，但比访问内存
。CPU和内存之间用地址总线、数据总线和控制线连接起来，每条
，指向内存中的下-
第17章计算机体系结构基础
全国嵌入式人才培训基地
比如加减乘除、
。CPU取上来的指令由若干个字节组成，
 2. CPU 
是一种特殊寄存器，
 有些位表示这种指令做什么操作，
，这称为特殊寄存器（Special-purpose 
一条指令。
位运算、逻辑运算。指令中会指示运算
 如果译码器将一条指令解释为运算指
，比如从内存读一个数到寄存
，保存着CPU取下一条指令的地
，比如eax寄存器，
这些字节中有些
 是加减乘除还
2
下一页
这
---
## Page 260
我们结合表1.1“一个语句的三种表示"看一下CPU取指执行的过程。
"MMU"再详细解释。
的，内总线经过MMU和总线接口的转换之后引出到芯片引脚才是外总线，
最后还要说明一点，
线，地址空间（Address Space）从0x00000000到Oxffff，共4GB，而64位计算机有更大的地址
是32位那么一个字就是32位，如果处理器是64位那么一
指32位（这种情况下16位被称为半字HalfWord）
也称为字长，
程序计数器)
位数通常是一
如x86就是这样的体系结构，
上图中画了32条地址线和32条数据线，CPU寄存器也是32位，
往内存里写数据的过程与此类似，
图 17.3.CPU的取指执行过程
3．内存收到地址和读请求之后，
2．CPU通过控制线发一个读请求，并且将内存地址通过地址线发给内存。
1．CPU内部将寄存器对接到数据总线上，使寄存器的每一位对接到一条数据线，等待接收
送。
单元每一位的1或0状态通过一条数据线到达CPU寄存器中相应的位，
数据。
ls
致的，从上图可以看出数据线和CPU寄存器的位数应该一致，
CPU
，本节所说的地址线、
↑
 目前主流的处理器是32位或64位的。地址线、
D31
D2
口
8
A31
RD
，因而地址线和CPU寄存器的位数也应该一致。处理器的位类
，只是数据线上的传输方向相反。
：数据线是指CPU的内总线，
，将相应的内存单元对接到数据总线的另一端，
Memory
 在有些上下文中指16位，
在有些上下文中指处理器的字长,
一个字就是64位。32位计算机有32条地址
，可以说这种体系结构是32位的，
是直接和CPU的执行单元相连
 外地址线和外数据线的
数据线和CPU寄存器
在有些上下文中
另外有些寄存器（比
就完成了数据传
，如果处理器
这样，
内存
F
数
如
---
## Page 261
9.执行指令，把4这个值保存到从地址0x804a018开始的4个字节（按小端字节序保存）
8.
6.
5.（
3．执行指令，
4.
2
1.
的4个字节。
CPU对这5个字节译码，
执行指令，现在eax寄存器中的数是4。
CPU对这3个字节译码，
址0x80483aa。
CPU从eip寄存器指向的地址取一条3个字节的指令，然后eip寄存器指向下一条指令的起始地
CPU对这5个字节译码，
址0x80483af。
要按地址从高到低的顺序看成0x00000003。也就是说，
址0x804a01c~0x804a01f里存储的四个字节不能按地址从低到高的顺序看成0x03000000，
器。
是整数的低位，
eip: 80483a2 -> 80483a7
读内存地址804a01c到eax
3.执行指令
取指令
eax:3
，读内存，
1c a0 04 08
CPU
，取上来的数是3,
，得知这条指令要求把eax寄存器的值保存到从地址0x804a018开始
，得知这条指令要求把eax寄存器的值加1，结果仍保存到eax寄存器。
，得知这条指令要求从地址0x804a01c开始取4个字节保存到eax寄存
，保存到eax寄存器。注意，
80483a2
80483a3
80483a4
80483a5
80483a6
80483a7
80483a8
80483a9
80483aa
80483ab
80483ac
80483ad
80483ae
804a018
804a019
804a01a
804a01b
804a01c
804a01d
804a0le
804a01f
内存
%
8
a3
%
如
18
C
0
o
0
，对于多字节的整数类型,
mov 0x804a01c,%eax
add $0x1,%eax
mov %eax, 0x804a018
地
，低地址保
261
存
而
---
## Page 262
1.内存与地址
上一页
全国嵌入式人才培训基地
起始页
级
3.设备
---
## Page 263
那么它们和CPU之间如何连接呢？如下图所示。
CPU执行指令除了访问内存之外还要访问很多设备（Device），如键盘、鼠标、硬盘、显示器等，
3.设备 请点评
总线，
一样，
专用的指令访问。其实访问设备是相当复杂的，计算机的设备五花八门,
从CPU的角度来看，访问设备只有内存映射I/O和端口I/O两种，要么像内存一样访问，要么用一种
存用同样的指令，
是x86比较特殊，x86对于设备有独立的端口地址空间，CPU核需要引出额外的地址线来连接片内
还有一些设备集成在处理器芯片中。在上图中，
设
本
是得到设备的当前状态。设备中可供读写访问的单元通常称为设备寄存器（注意和CPU寄存器不是
备就像访问内存一样，
有些设备像内存芯片一样连接到处理器的地址总线和数据总线,
一
设备就会把数据发送出去，读串口接收寄存器的值，就可以读取串口设备接收到的数据。
一
备（和访问内存所用的地址线不同）
系结构（比如ARM）采用这种方式操作设备，
线的设备还是在CPU内部接总线的设备都有各自的地址范围，
出到芯片引脚上了，
回事)
个命令，
设备和内存芯片所以才叫“总线",
，比如PCI、AGP、USB、1394、SATA等等，这些设备总线并不直接和CPU相连，CPU通过
有的要求带宽大，有的要求响应快，有的要求热插拔，
处理器芯片
图17.4.设备
CPU核
 操作设备的过程就是读写这些设备寄存器的过程，
 数据不一定要保存，
这种方式称为端口I/O（Port I/O）。
，还有一端没有引出，
，按地址读写即可，但和访问内存不同的是，往一个地址写数据只是给设备发
而从-
第17章计算机体系结构基础
一个地址读数据也不一定是读先前保存在这个地址的数据，
总线接口
设备
全国嵌入式人才培训基地
，访问设备寄存器时用特殊的in/out指令，而不是和访问内
 而是接到芯片内部集成的设备上，无论是在CPU外部
3.设备
，称为内存映射I/O（Memory-mapped I/O）
 从CPU核引出的地址和数据总线有一端经总线接I
内存芯片
设备
 于是出现了各种适应不同要求的设备
比如向串口发送寄存器里写数据,
，都可以像访问内存一样访问，
正因为地址线和数据线上可以挂多
 各种设备的性能要求都不
263
但
下二
多
串
是
目
接
口
贝
---
## Page 264
化、读、写等操作，有些设备还要提供一个中断处理函数供ISR调用。
是设备驱动程序。设备驱动程序通常是内核里的一组函数，
操作系统为了支持广泛的设备就需要有大量的设备驱动程序，
由于各种设备的操作方法各不相同，每种设备都需要专门的设备驱动程序（Device Driver）
而Office办公套件则是可有可无的，
操作系统的概念还包括一些必不可少的用户程序，
的
操作系统（Operating System）
执行，
被CPU直接取指令执行的，操作系统在执行程序时会把它从硬盘拷贝到内存，
在x86平台上,
上图中标有“设备"的框可能是实际的设备，也可能是设备总线的控制器。
内存映射IO或端口IO访问相应的总线控制器，
2. CPU
要
司
数
它
访
牛
管理内存的分配使用和管理各种设备，
哪
的
都
称
上一页
个设备引发了中断，然后调用该设备的中断处理函数做进一步处理。
事先把一段ISR程序加载到这个地址,
定的地址 
要主动通知CPU时就引发-
应自己的输入，这就要求键盘设备主动通知CPU来读这个字符并做相应处理，
据
也不需要
问设备还有-
启动代码（称为Bootloader）
的多个进程，例如可以同时开多个终端窗口，每个窗口都运行一个Shel进程，而它们对应的程
个禾
为进禾
而其它
程序，
，执行中凶
需要的其它
并且需要主动通知CPU来读这些数据，
这个过程称为加载（Load）
程
（Process）。进程和程序不是一
要
，操作系统就把它终止掉，
主动提供数据给CPU，
（这个地址由体系
断服务程序
它程序加载到内存。操作系统和其它月
，硬盘是挂在IDE、SATA或SCSI总线上的设备，
一点和访问内存不同。内存只是保存数据而不会产生新的数据，
（ISR，Interrupt Service Routine）
系结构定）
用户需要运行
首先把操作系统从磁盘加载到内存，
 本身也是一段保存在磁盘上的程序，
 每个设备都有一条中断线，
，所以内存总是被动地等待被读或者被写。而设备往往会自己
 所以前者也属于广义上操作系统的范畴，而后者
释放它所
。程序加载到内存之后，
义）
全国嵌入式人才培训基地
做这些工作的程序称为内核（Kernel），
ISR程序是内核代码的一部分，
于是CPU从这个地址开始取指
CPU正在执行的指令将被打断，
所占的内不
行哪个程序，
一对应的。
 例如敲键盘产生一个输入字符，
起始页
上一级
 通过总线控制器再去访问挂在总线上的设备。所以
，它在计算机启动时加载到内存并常驻内存。广义
比如Shell是每个Linux系统必不可少的，
用户程序的不同之处在于：操作系统是常驻内不
一个程序可以多次加载到内存，成为同时运
。操作系统最核心的功能是管理进程调度、
，操作系统就把它加载到内存，
 通过读写设备寄存器实现对设备的初始
 成为操作系统调度执行的一个任务，
，事实上Linux内核源代码中绝大部分
 通过中断控制器连接到CPU，当设名
保存在硬盘上的程序是不能
，完成中断处理之后再返回先前被打
然后执行操作系统中的代码
，计算机在启动时执行一段固
 在这段代码中首先判断是
令
 程序计数器会指向某>
·（或者说跳转到这个地
用户希望计算机马
如果CPU不去读它
，这样CPU才能取指4
，给用户响应。这