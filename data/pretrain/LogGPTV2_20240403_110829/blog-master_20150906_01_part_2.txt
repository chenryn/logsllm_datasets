		if (best_valid_delta page_dirty[bestvalidslot])  // 如果这个页面已经不是脏页（例如被CHECKPOINT刷出了），那么直接返回  
			return bestvalidslot;  
......  
仅仅当以上所有的步骤，都没有找到一个EMPTY SLOT时，才需要主动刷脏页（在SlruInternalWritePage调用pg_fsync)。  
                /*  
                 * Write the page.  注意第三个参数为NULL，即fdata  
                 */  
                SlruInternalWritePage(ctl, bestvalidslot, NULL);  
......  
SlruInternalWritePage(SlruCtl ctl, int slotno, SlruFlush fdata)，调用SlruPhysicalWritePage，执行write。  
/*  
 * Write a page from a shared buffer, if necessary.  
 * Does nothing if the specified slot is not dirty.  
 *  
 * NOTE: only one write attempt is made here.  Hence, it is possible that  
 * the page is still dirty at exit (if someone else re-dirtied it during  
 * the write).  However, we *do* attempt a fresh write even if the page  
 * is already being written; this is for checkpoints.  
 *  
 * Control lock must be held at entry, and will be held at exit.  
 */  
static void  
SlruInternalWritePage(SlruCtl ctl, int slotno, SlruFlush fdata)  
{  
......  
        /* Do the write */  
        ok = SlruPhysicalWritePage(ctl, pageno, slotno, fdata);  
......  
SLRU PAGE状态  
/*  
 * Page status codes.  Note that these do not include the "dirty" bit.  
 * page_dirty can be TRUE only in the VALID or WRITE_IN_PROGRESS states;  
 * in the latter case it implies that the page has been re-dirtied since  
 * the write started.  
 */  
typedef enum  
{  
	SLRU_PAGE_EMPTY,			/* buffer is not in use */  
	SLRU_PAGE_READ_IN_PROGRESS, /* page is being read in */  
	SLRU_PAGE_VALID,			/* page is valid and not being written */  
	SLRU_PAGE_WRITE_IN_PROGRESS /* page is being written out */  
} SlruPageStatus;  
SlruPhysicalWritePage(ctl, pageno, slotno, fdata);，这里涉及pg_clog相关的SlruCtlData结构，do_fsync=true。  
/*  
 * Physical write of a page from a buffer slot  
 *  
 * On failure, we cannot just ereport(ERROR) since caller has put state in  
 * shared memory that must be undone.  So, we return FALSE and save enough  
 * info in static variables to let SlruReportIOError make the report.  
 *  
 * For now, assume it's not worth keeping a file pointer open across  
 * independent read/write operations.  We do batch operations during  
 * SimpleLruFlush, though.  
 *  
 * fdata is NULL for a standalone write, pointer to open-file info during  
 * SimpleLruFlush.  
 */  
static bool  
SlruPhysicalWritePage(SlruCtl ctl, int pageno, int slotno,  
                                          SlruFlush fdata);  
......  
        int                     fd = -1;  
......  
//   如果文件不存在，自动创建  
        if (fd do_fsync=true，所以以下pg_fsync被调用。  
        {  
                if (ctl->do_fsync && pg_fsync(fd))  // 对于pg_clog和multixact，do_fsync=true。  
                {  
                        slru_errcause = SLRU_FSYNC_FAILED;  
                        slru_errno = errno;  
                        CloseTransientFile(fd);  
                        return false;  
                }  
                if (CloseTransientFile(fd))  
                {  
                        slru_errcause = SLRU_CLOSE_FAILED;  
                        slru_errno = errno;  
                        return false;  
                }  
        }  
```  
ctl->do_fsync && pg_fsync(fd)涉及的代码：  
src/include/access/slru.h  
```  
/*  
 * SlruCtlData is an unshared structure that points to the active information  
 * in shared memory.  
 */  
typedef struct SlruCtlData  
{  
        SlruShared      shared;  
        /*  
         * This flag tells whether to fsync writes (true for pg_clog and multixact  
         * stuff, false for pg_subtrans and pg_notify).  
         */  
        bool            do_fsync;  
        /*  
         * Decide which of two page numbers is "older" for truncation purposes. We  
         * need to use comparison of TransactionIds here in order to do the right  
         * thing with wraparound XID arithmetic.  
         */  
        bool            (*PagePrecedes) (int, int);  
        /*  
         * Dir is set during SimpleLruInit and does not change thereafter. Since  
         * it's always the same, it doesn't need to be in shared memory.  
         */  
        char            Dir[64];  
} SlruCtlData;  
typedef SlruCtlData *SlruCtl;  
```  
src/backend/access/transam/slru.c  
```  
......  
void  
SimpleLruInit(SlruCtl ctl, const char *name, int nslots, int nlsns,  
                          LWLock *ctllock, const char *subdir)  
......  
        ctl->do_fsync = true;           /* default behavior */  // 初始化LRU时，do_fsync默认是true的。  
......  
```  
以下是clog初始化LRU的调用，可以看到它没有修改do_fsync，所以是TURE。  
src/backend/access/transam/clog.c  
```  
/*  
 * Number of shared CLOG buffers.  
 *  
 * Testing during the PostgreSQL 9.2 development cycle revealed that on a  
 * large multi-processor system, it was possible to have more CLOG page  
 * requests in flight at one time than the number of CLOG buffers which existed  
 * at that time, which was hardcoded to 8.  Further testing revealed that  
 * performance dropped off with more than 32 CLOG buffers, possibly because  
 * the linear buffer search algorithm doesn't scale well.  
 *  
 * Unconditionally increasing the number of CLOG buffers to 32 did not seem  
 * like a good idea, because it would increase the minimum amount of shared  
 * memory required to start, which could be a problem for people running very  
 * small configurations.  The following formula seems to represent a reasonable  
 * compromise: people with very low values for shared_buffers will get fewer  
 * CLOG buffers as well, and everyone else will get 32.  
 *  
 * It is likely that some further work will be needed here in future releases;  
 * for example, on a 64-core server, the maximum number of CLOG requests that  
 * can be simultaneously in flight will be even larger.  But that will  
 * apparently require more than just changing the formula, so for now we take  
 * the easy way out.  
 */  
Size  
CLOGShmemBuffers(void)  
{  
        return Min(32, Max(4, NBuffers / 512));  
}  
void  
CLOGShmemInit(void)  
{  
        ClogCtl->PagePrecedes = CLOGPagePrecedes;  
        SimpleLruInit(ClogCtl, "CLOG Ctl", CLOGShmemBuffers(), CLOG_LSNS_PER_PAGE,  
                                  CLogControlLock, "pg_clog");  
}  
```  
以下是subtrans初始化LRU的调用，看到它修改了do_fsync=false。所以subtrans扩展PAGE时不需要调用pg_fsync。  
src/backend/access/transam/subtrans.c  
```  
void  
SUBTRANSShmemInit(void)  
{  
        SubTransCtl->PagePrecedes = SubTransPagePrecedes;  
        SimpleLruInit(SubTransCtl, "SUBTRANS Ctl", NUM_SUBTRANS_BUFFERS, 0,  
                                  SubtransControlLock, "pg_subtrans");  
        /* Override default assumption that writes should be fsync'd */  
        SubTransCtl->do_fsync = false;  
}  
```  
multixact.c也没有修改do_fsync，所以也是需要fsync的。  
MultiXactShmemInit(void)@src/backend/access/transam/multixact.c  
pg_fsync代码：  
src/backend/storage/file/fd.c  
```  
/*  
 * pg_fsync --- do fsync with or without writethrough  
 */  
int  
pg_fsync(int fd)  
{  
        /* #if is to skip the sync_method test if there's no need for it */  
#if defined(HAVE_FSYNC_WRITETHROUGH) && !defined(FSYNC_WRITETHROUGH_IS_FSYNC)  
        if (sync_method == SYNC_METHOD_FSYNC_WRITETHROUGH)  
                return pg_fsync_writethrough(fd);  
        else  
#endif  
                return pg_fsync_no_writethrough(fd);  
}  
/*  
 * pg_fsync_no_writethrough --- same as fsync except does nothing if  
 *      enableFsync is off  
 */  
int  
pg_fsync_no_writethrough(int fd)  
{  
        if (enableFsync)  
                return fsync(fd);  
        else  
                return 0;  
}  
/*  
 * pg_fsync_writethrough  
 */  
int  
pg_fsync_writethrough(int fd)  
{  
        if (enableFsync)  
        {  
#ifdef WIN32  
                return _commit(fd);  
#elif defined(F_FULLFSYNC)  
                return (fcntl(fd, F_FULLFSYNC, 0) == -1) ? -1 : 0;  
#else  
                errno = ENOSYS;  
                return -1;  
#endif  
        }  
        else  
                return 0;  
}  
```  
从上面的代码分析，扩展clog page时，如果在CLOG BUFFER中没有EMPTY SLOT，则需要backend process主动刷CLOG PAGE，所以会有调用pg_fsync的动作。  
clog page和数据库BLOCKSZ (database block size)一样大，默认是8K（如果编译数据库软件时没有修改的话，默认是8KB），最大可以设置为32KB。  
每个事务在pg_clog中需要2个比特位来存储事务信息(xmin commit/abort,xmax commit/abort)。  
所以8K的clog page可以存储32K个事务信息，换句话说，每32K个事务，需要扩展一次clog page。  
下面的代码是clog的一些常用宏。  
src/backend/access/transam/clog.c  
```  
/*  
 * Defines for CLOG page sizes.  A page is the same BLCKSZ as is used  
 * everywhere else in Postgres.  
 *  
 * Note: because TransactionIds are 32 bits and wrap around at 0xFFFFFFFF,  
 * CLOG page numbering also wraps around at 0xFFFFFFFF/CLOG_XACTS_PER_PAGE,  
 * and CLOG segment numbering at  
 * 0xFFFFFFFF/CLOG_XACTS_PER_PAGE/SLRU_PAGES_PER_SEGMENT.  We need take no  
 * explicit notice of that fact in this module, except when comparing segment  
 * and page numbers in TruncateCLOG (see CLOGPagePrecedes).  
 */  
/* We need two bits per xact, so four xacts fit in a byte */  
#define CLOG_BITS_PER_XACT      2  
#define CLOG_XACTS_PER_BYTE 4  
#define CLOG_XACTS_PER_PAGE (BLCKSZ * CLOG_XACTS_PER_BYTE)  
#define CLOG_XACT_BITMASK       ((1 << CLOG_BITS_PER_XACT) - 1)  
#define TransactionIdToPage(xid)         ((xid) / (TransactionId) CLOG_XACTS_PER_PAGE)  
#define TransactionIdToPgIndex(xid)     ((xid) % (TransactionId) CLOG_XACTS_PER_PAGE)  
#define TransactionIdToByte(xid)          (TransactionIdToPgIndex(xid) / CLOG_XACTS_PER_BYTE)  
#define TransactionIdToBIndex(xid)       ((xid) % (TransactionId) CLOG_XACTS_PER_BYTE)  
```  
查看数据库的block size：  