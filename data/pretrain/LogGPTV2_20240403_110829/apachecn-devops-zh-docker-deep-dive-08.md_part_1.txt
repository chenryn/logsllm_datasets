## 八、将应用容器化
Docker 主要是获取应用并在容器中运行它们。
获取应用并将其配置为作为容器运行的过程称为“容器化”。
在本章中，我们将介绍一个简单的基于 Linux 的 web 应用的容器化过程。如果你没有一个 Linux Docker 环境可以跟随，你可以免费使用*玩转 Docker* 。只需将您的网络浏览器指向 https://play-with-docker.com，并旋转一些 Linux Docker 节点。这是我最喜欢的加速 Docker 并进行测试的方式！
我们将把这一章分成通常的三个部分:
*   TLDR
*   深潜
*   命令
让我们容器化一个应用！
### 将应用容器化——TLDR
容器就是让应用变得简单到可以构建、**运送**和**运行**。
应用容器化的过程如下所示:
1.  从应用代码和依赖项开始
2.  创建一个描述你的应用、它的依赖关系以及如何运行它的文件
3.  将*文件*输入`docker image build`命令
4.  将新映像推送到注册表(可选)
5.  从映像运行容器
一旦你的应用被容器化(做成容器映像)，你就可以共享它并作为容器运行了。
图 8.1 以图片的形式展示了这个过程。
![Figure 8.1 - Basic flow of containerizing an app](img/figure8-1.png)
Figure 8.1 - Basic flow of containerizing an app
### 应用容器化——深潜
我们将把本章的深度潜水部分分解如下:
*   将单容器应用容器化
*   通过多阶段构建转移到生产
*   一些最佳实践
#### 将单容器应用容器化
本章的其余部分将介绍一个简单的 Node.js web 应用的容器化过程。
我们将完成以下高级步骤:
*   克隆回购以获取应用代码
*   检查文件
*   将应用容器化
*   运行应用
*   测试应用
*   靠近一点看
*   通过**多阶段构建**转移到生产
*   一些最佳实践
本章中的例子是单容器应用。下一章将包括一个稍微复杂一点的多容器应用，我们将在 Docker Stacks 一章中继续讨论一个更复杂的应用。
##### 获取应用代码
本例中使用的应用可在 GitHub 上获得，网址为:
*   https://github.com/nigelpoulton/psweb.git
从 GitHub 克隆示例应用。
```
$ git clone https://github.com/nigelpoulton/psweb.git
Cloning into 'psweb'...
remote: Counting objects: 15, done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 15 (delta 2), reused 15 (delta 2), pack-reused 0
Unpacking objects: 100% (15/15), done.
Checking connectivity... done. 
```
 `克隆操作会创建一个名为`psweb`的新目录。将目录更改为`psweb`并列出其内容。
```
$ cd psweb
$ ls -l
total 28
-rw-r--r-- 1 root root  341 Sep 29 16:26 app.js
-rw-r--r-- 1 root root  216 Sep 29 16:26 circle.yml
-rw-r--r-- 1 root root  338 Sep 29 16:26 Dockerfile
-rw-r--r-- 1 root root  421 Sep 29 16:26 package.json
-rw-r--r-- 1 root root  370 Sep 29 16:26 README.md
drwxr-xr-x 2 root root 4096 Sep 29 16:26 test
drwxr-xr-x 2 root root 4096 Sep 29 16:26 views 
```
 `该目录包含所有应用源代码，以及视图和单元测试的子目录。请随意查看文件——这个应用非常简单。我们不会在本章中使用单元测试。
现在我们有了应用代码，让我们看看它的 Dockerfile。
##### 检查文件
一个 **Dockerfile** 是创建容器映像的起点——它描述了一个应用，并告诉 Docker 如何将其构建成一个映像。
包含应用和依赖项的目录被称为*构建上下文*。将 Dockerfile 保存在*构建上下文*的根目录中是一种常见的做法。同样重要的是 **Dockerfile** 以大写“ **D** ”开头，并且都是一个字。“dockerfile”和“Docker file”无效。
让我们看看 Dockerfile 的内容。
```
$ cat Dockerfile
FROM alpine
LABEL maintainer="PI:EMAIL"
RUN apk add --update nodejs nodejs-npm
COPY . /src
WORKDIR /src
RUN npm install
EXPOSE 8080
ENTRYPOINT ["node", "./app.js"] 
```
 `不要低估 Dockerfile 作为一种文档形式的影响。这是一份弥合开发和运营之间差距的伟大文件。它也有能力加快新开发者的加入等。这是因为该文件以易于阅读的格式准确描述了应用及其依赖关系。您应该像对待源代码一样对待它，并将其检查到版本控制系统中。
在高层，示例 Dockerfile 表示:从`alpine`映像开始，注意“PI:EMAIL”是维护者，安装 Node.js 和 NPM，将构建上下文中的所有内容复制到映像中的`/src`目录，将工作目录设置为`/src`，安装依赖项，记录应用的网络端口，并将`app.js`设置为运行的默认应用。
让我们更详细地看一下。
所有文件都以`FROM`指令开始。这将是映像的基础层，应用的其余部分将作为附加层添加到顶部。这个特殊的应用是一个 Linux 应用，所以 FROM 指令引用一个基于 Linux 的映像是很重要的。如果你正在组装一个视窗应用，你需要指定合适的视窗基础映像，比如`mcr.microsoft.com/dotnet/core/aspnet`。
在 Dockerfile 中的这一点上，映像有一个单层，如图 8.2 所示。
![Figure 8.2](img/figure8-2.png)
Figure 8.2
接下来，Dockerfile 创建一个标签，指定“PI:EMAIL”作为映像的维护者。标签是简单的键值对，是向映像添加自定义元数据的一种极好的方式。列出一个映像的维护者，以便其他潜在用户在使用它时有一个联系点，这被认为是最佳实践。
`RUN apk add --update nodejs nodejs-npm`指令使用 Alpine `apk`包管理器将`nodejs`和`nodejs-npm`安装到映像中。它在 Alpine 基础层的正上方创建一个新的映像层，并在该层中安装软件包。在 Dockerfile 中的这一点上，映像看起来像图 8.3。
![Figure 8.3](img/figure8-3.png)
Figure 8.3
`COPY . /src`指令创建另一个新层，并从*构建上下文*复制应用和依赖文件。在 Dockerfile 中的这一点上，映像有三层，如图 8.4 所示。
![Figure 8.4](img/figure8-4.png)
Figure 8.4
接下来，Dockerfile 使用`WORKDIR`指令为文件中的其余指令设置映像文件系统内的工作目录。该指令不会创建新的映像层。
然后`RUN npm install`指令创建一个新层，并使用`npm`在构建上下文中安装`package.json`文件中列出的应用依赖项。它在先前指令中设置的`WORKDIR`的上下文中运行，并将依赖项安装到新创建的层中。在 Dockerfile 中的这一点上，映像有四层，如图 8.5 所示。
![Figure 8.5](img/figure8-5.png)
Figure 8.5
应用在 TCP 端口 8080 上公开了一个 web 服务，因此 Dockerfile 用`EXPOSE 8080`指令记录了这一点。这是作为映像元数据而不是映像图层添加的。
最后`ENTRYPOINT`指令用于设置镜像(容器)应该运行的主应用。这也是作为元数据而不是映像层添加的。
##### 将应用容器化/构建映像
既然我们了解了它的工作原理，就让我们来构建它吧！
以下命令将构建一个名为`web:latest`的新映像。命令末尾的句点(`.`)告诉 Docker 使用 shell 的当前工作目录作为*构建上下文*。
请确保包含结尾句点(。)并确保从包含 Dockerfile 和应用代码的`psweb`目录运行命令。
```
$ docker image build -t web:latest .
Sending build context to Docker daemon  76.29kB
Step 1/8 : FROM alpine
latest: Pulling from library/alpine
ff3a5c916c92: Pull complete
Digest: sha256:7df6db5aa6...0bedab9b8df6b1c0
Status: Downloaded newer image for alpine:latest
 ---> 76da55c8019d
Step 8/8 : ENTRYPOINT node ./app.js
 ---> Running in 13977a4f3b21
 ---> fc69fdc4c18e
Removing intermediate container 13977a4f3b21
Successfully built fc69fdc4c18e
Successfully tagged web:latest 
```
 `检查映像是否存在于 Docker 主机的本地存储库中。
```
$ docker image ls
REPO    TAG       IMAGE ID          CREATED              SIZE
web     latest    fc69fdc4c18e      10 seconds ago       81.5MB 
```
 `恭喜你，这个应用是容器化的！
您可以使用`docker image inspect web:latest`命令来验证映像的配置。它将列出从 Dockerfile 配置的所有设置。注意映像图层列表和`Entrypoint`命令。
##### 推送映像
一旦您创建了一个映像，最好将其存储在映像注册表中，以确保其安全并可供他人使用。Docker Hub 是最常见的公共映像注册表，也是`docker image push`命令的默认推送位置。
为了将映像推送到 Docker Hub，您需要使用您的 Docker ID 登录。您还需要适当地标记映像。