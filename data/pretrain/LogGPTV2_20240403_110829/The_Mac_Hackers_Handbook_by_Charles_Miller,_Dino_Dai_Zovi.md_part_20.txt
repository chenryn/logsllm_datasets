156 Part II ■ Discovering Vulnerabilities
Figure 6-22: Changing the calculator to subtract
instead of add is a one-byte change.
Save the modifi ed Calculate library on top of the old Calculate library and
try to run it. Either make a backup of the old version or use DYLD_INSERT_
LIBRARIES to avoid using the existing library. Run it to see that, functionally
speaking, there are now two - buttons and no + button! It is interesting that this
drastic change occurred by exchanging only two bits in the library.
Conclusion
You have now seen how to tear apart a Mac OS X binary and fi gure out how
it works. By using a combination of dynamic and static techniques you have
learned how to trace and look at static disassembly to see how binaries function.
We have demonstrated some methods that improve the way IDA Pro works on
Mach-O fi les, including fi nding missed functions, fi xing up switch statements,
relabeling Obj-C sections of the binaries, and adding cross-references for calls
to objc_msgSend. Finally, we walked you through a simple example to demon-
strate everything discussed.
9955336633cc0066..iinndddd 115566 11//2255//0099 44::4411::2277 PPMM
Chapter 6 ■ Reverse Engineering 157
References
http://dvlabs.tippingpoint.com/pub/chotchkies/
SeattleToorcon2008_RECookbook.pdf
https://sourceforge.net/projects/ida-x86emu
http://www.suavetech.com/0xed/0xed.html
http://www.nah6.com/~itsme/cvs-xdadevtools/ida/idcscripts/
http://developer.apple.com/documentation/Cocoa/Conceptual/
ObjectiveC/Introduction/chapter_1_section_1.html
http://www.recon.cx/2008/a/tiller_beauchamp/RETrace-Applied_
Reverse_Engineering_on_OS_X.pdf
http://objc.toodarkpark.net/moreobjc.html
9955336633cc0066..iinndddd 115577 11//2255//0099 44::4411::2277 PPMM
9955336633cc0066..iinndddd 115588 11//2255//0099 44::4411::2277 PPMM
Par t
III
Exploitation
9955336633cc0077..iinndddd 115599 11//2255//0099 44::4411::4466 PPMM
9955336633cc0077..iinndddd 116600 11//2255//0099 44::4411::4466 PPMM
CHAPTER
7
Exploiting Stack Overfl ows
The stack buffer overfl ow is the “classic” buffer-overfl ow vulnerability. This
vulnerability class has been known publicly since at least November 1988, when
the Robert Morris Internet worm exploited a stack buffer overfl ow in the BSD
fi nger daemon on VAX machines.
A connection was established to the remote fi nger service daemon and then a
specially constructed string of 536 bytes was passed to the daemon, overfl owing
its input buffer and overwriting parts of the stack.
—Eugene H. Spafford, “The Internet Worm Program: An Analysis”
Stack buffer overfl ow attacks and defenses have evolved signifi cantly since
then, but the core principles have remained the same: overwrite the function
return address, and redirect execution into dynamically injected code, com-
monly referred to as the shellcode or the exploit payload.
In Leopard, Apple has implemented several defenses against the exploitation
of stack buffer overfl ows, including randomizing portions of the process memory
address space, making thread stack segments non-executable on the x86 architec-
ture, and leveraging the GNU C compiler’s stack protector in some executables.
This chapter starts with background on how the stack works in Mac OS X, what
happens when the stack is “smashed,” and how to exploit a simple stack buffer
overfl ow vulnerability. Subsequent sections will detail the stack buffer overfl ow
exploit protections in Leopard and how to overcome them in real-world exploits.
161
9955336633cc0077..iinndddd 116611 11//2255//0099 44::4411::4466 PPMM
162 Part III ■ Exploitation
We will start demonstrating these vulnerabilities with simple attack strings
to trigger the vulnerabilities. The attack string is the crafted input in an exploit
that triggers or exploits a vulnerability. It does not typically include various
protocol or syntax elements that may be needed to reach the vulnerability, but
it will typically include the injection vector (the elements or aspects of the attack
string that are used to obtain control of the target), and the payload (the position-
independent machine code that is injected and executed by the target). A com-
plete exploit will include the necessary functionality to trigger the vulnerability,
the injection vector to take full control, the payload to be executed by the target,
and local payload handlers to implement attacker-side functionality. In most of
this chapter and the next we will demonstrate various injection vectors using
simplifi ed payloads that avoid adding unnecessary complications at this early
stage. In later chapters we will discuss how to build full shell code and other
more-complicated exploit payloads, as well as topics like payload encoders and
application-specifi c attacks.
Stack Basics
To understand how a stack buffer overfl ow works, it is important fi rst to under-
stand what the stack is and how it is used under normal circumstances. The
stack is a special region of memory that is used to support calling subroutines
(typically called functions in source-code form). The stack is used to keep track
of subroutine parameters, local variables, and where to resume execution after
the subroutine has completed. On most computer architectures, including all
of the architectures supported by Mac OS X, the stack automatically grows
downward toward lower memory addresses.
Stack memory is divided into successive frames where each time a subroutine
is called, even if it is recursive and calls itself, it allocates itself a fresh stack
frame. The current bottom of the stack is pointed to by a special register used
as the stack pointer and the top of the current stack frame is usually pointed to
by another special register used as the frame pointer. Values are typically read or
written to the stack and then the stack pointer is adjusted accordingly to point
to the new bottom of the stack. This is referred to as pushing when new values
are written to the stack, and popping when values are read from the stack.
Exactly how the stack is used depends on the calling conventions specifi c
to the architecture for which the program binary was compiled. The calling
conventions defi ne how subroutines are called and what actions are taken in
the subroutine’s prolog and epilog, the code inserted by the compiler before and
after the function body, respectively. The stack may be used to store subroutine
parameters, linkage, saved registers, and local variables, but some architectures
may use registers for some of these purposes. The stack is used most extensively
9955336633cc0077..iinndddd 116622 11//2255//0099 44::4411::4466 PPMM
Chapter 7 ■ Exploiting Stack Overflows 163
on x86, where there are relatively few general-purpose registers; on PowerPC
where there are more general-purpose registers available, registers are used
for subroutine parameters and linkage. In this chapter we will focus on the
exploitation of stack-buffer overfl ows on the 32-bit PowerPC and x86 architec-
tures. While Leopard also supports 64-bit PowerPC and x86-64 binaries, very
few security-sensitive applications are compiled for the 64-bit architectures.
Therefore we will only focus on the 32-bit architectures in this book.
Stack Usage on PowerPC
The PowerPC calling convention places subroutine parameters in registers
where possible for higher performance. Register-sized parameters are placed
in registers r3 through r10, but space is still reserved on the stack for them in
case the called function needs to use those registers for another purpose. Any
arguments larger than the register size are pushed onto the stack.
One notable difference between the PowerPC architectures and the x86 archi-
tectures is that the PowerPC uses a dedicated link register (lr) instead of the
stack to store the return address when a subroutine is called. To support sub-
routines calling other subroutines, the value of that register must be saved to
the stack. In effect, this means stack-buffer overfl ows are still exploitable; they
only obtain control a little later, after the restored (and overwritten) link register
is actually used.
The subroutine prolog, shown below, allocates itself a stack frame by decre-
menting the stack pointer, saving the old values of the stack pointer and link
register to the stack, and fi nally saving the values of any nonvolatile registers
that get clobbered by the subroutine.
00001f64 mfspr r0,lr ; Obtain value of link register
00001f68 stmw r30,0xfff8(r1) ; Save r30 - r31 to stack
00001f6c stw r0,0x8(r1) ; Save link register to stack
00001f70 stwu r1,0xfbb0(r1) ; Save old stack pointer to stack
00001f74 or r30,r1,r1 ; Copy stack pointer to frame
; pointer
The subroutine epilog, shown below, reverses this process by restoring
nonvolatile registers, restoring the link register and stack pointer, and fi nally
branching to the link register to return from the subroutine.
00001f88 lwz r1,0x0(r1) ; Load old stack pointer from stack
00001f8c lwz r0,0x8(r1) ; Load link register from stack
00001f90 mtspr lr,r0 ; Restore link register
00001f94 lmw r30,0xfff8(r1) ; Restore r30 - r31
00001f98 blr ; Return from subroutine
9955336633cc0077..iinndddd 116633 11//2255//0099 44::4411::4466 PPMM
164 Part III ■ Exploitation
The PowerPC stack usage conventions also defi ne the area below the stack
pointer as the red zone, a scratch storage area that the subroutine may use tem-
porarily knowing that it will be overwritten when it calls another subroutine.
Figure 7-1 shows the layout of a PowerPC stack frame, including the red zone
scratch space.
Previous
frame
Saved
registers
Local
variables
Parameter
save space
(r3–r10)
Subroutine
linkage
(sp, cr, lr)
SP
Red zone
Figure 7-1: PowerPC stack frame
Stack Usage on x86
Since there are few general-purpose registers on x86, the stack is used quite
extensively. We will cover the basic concepts here, but for a comprehensive treat-
ment of how the stack is used on x86, consult The Art of Assembly Language (No
Starch, 2003). There are several calling conventions possible on the x86 architec-
ture, but Mac OS X uses a single calling convention on x86, which is what we will
describe here. When a subroutine is called, the caller pushes the parameters on
the stack and executes the call instruction, which pushes the address of the next
instruction onto the stack and transfers control to the subroutine. The function
prolog pushes the caller’s frame pointer onto the stack, moves the stack pointer
value to use as its own frame pointer, pushes clobbered registers to the stack,
9955336633cc0077..iinndddd 116644 11//2255//0099 44::4411::4466 PPMM
Chapter 7 ■ Exploiting Stack Overflows 165
and fi nally allocates space for its own local variables by subtracting their total
size from the stack pointer. A simple function prolog is shown below.
1fc6: push ebp
1fc7: mov ebp,esp
1fc9: sub esp,0x418
The called subroutine must save the values of the following registers and
restore them before returning if it changes (clobbers) their values: EBX, EBP,
ESI, EDI, and ESP. The function epilog reverses this process by issuing the leave
instruction to restore the ESP register from EBP and issuing the ret instruction
to jump to the return address stored on the stack.
1fe4: leave
1fe5: ret
Figure 7-2 shows the layout of an x86 stack frame.
Previous
frame
Parameters
Return
address
Saved
frame
pointer
EBP
Saved
registers
Local
variables
ESP
Figure 7-2: x86 stack frame
Smashing the Stack on PowerPC
You now know how a correctly running program uses the stack. What is more
interesting, however, is what happens when things go wrong, and especially
what happens when an attacker intentionally makes things go wrong. For the
9955336633cc0077..iinndddd 116655 11//2255//0099 44::4411::4466 PPMM
166 Part III ■ Exploitation
fi rst example, we will demonstrate how to exploit a simple, local stack buffer
overfl ow on PowerPC, intentionally ignoring Leopard’s Library Randomization
for the moment. Leopard’s Library Randomization changes the load addresses
of system frameworks and libraries when system libraries or default applica-
tions are changed. Since this only happens periodically, it does not affect the
exploitation of local vulnerabilities.
Our fi rst example will examine a trivially simple program with a stack buffer
overfl ow vulnerability.
/*
* smashmystack - A program with the simplest stack
* buffer overflow possible
*/
#include 
#include 
void smashmystack(char* str)
{
char buf[1024];
/*
* Copy str into a fixed size stack buffer without
* checking the length of source string str, causing
* a stack buffer overflow.
*/
strcpy(buf, str);
}
int main(int argc, char* argv[])
{
smashmystack(argv[1]);
return 0;
}
We will show you how to develop an exploit for this vulnerability incremen-
tally by creating the attack string with one-line Ruby (an open-source, object-
oriented scripting language installed by default on Mac OS X and available at
http://www.ruby-lang.org) scripts and examining the results in ReportCrash
logs and GDB. On Leopard, ReportCrash replaces the CrashReporter daemon
present in older releases of Mac OS X but it still stores its logs in ~/Library/
Logs/CrashReporter and /Library/Logs/CrashReporter for legacy compat-
ibility. Where possible, we will try to use only the ReportCrash output since
running a process in the debugger may change several aspects of its execution.
For example, the values of the stack pointer will be different because GDB and
the dynamic linker (dyld) communicate through some special environment
variables that are not present when the program is not running under GDB,
adding more space to the environment variables stored on the stack.
9955336633cc0077..iinndddd 116666 11//2255//0099 44::4411::4466 PPMM
Chapter 7 ■ Exploiting Stack Overflows 167
If you run this program with an overly long fi rst argument consisting of all
ASCII ‘A’ characters, it will crash after it tries to return from the smashmystack()
function. You can do this with a simple Ruby one-liner that prints a string of
2000 ASCII ‘A’ characters, as shown below.
% ./smashmystack.ppc `ruby -e ‘puts “A” * 2000’`
Segmentation fault
Examining the ReportCrash log reveals the following:
Exception Type: EXC_BAD_ACCESS (SIGSEGV)
Exception Codes: KERN_INVALID_ADDRESS at 0x0000000041414140
Crashed Thread: 0
Thread 0 Crashed:
0 ??? 0x41414140 0 + 1094795584
Thread 0 crashed with PPC Thread State 32:
srr0: 0x41414140 srr1: 0x4000f030 dar: 0x00003138 dsisr: 0x40000000
r0: 0x41414141 r1: 0xbfffe9b0 r2: 0x00000001 r3: 0xbfffe598
r4: 0xbffff2b4 r5: 0xbfffea54 r6: 0xfefefeff r7: 0x80808080
r8: 0x00000000 r9: 0xbfffed69 r10: 0x40403fff r11: 0x8fe33c48
r12: 0x80808080 r13: 0x00000000 r14: 0x00000000 r15: 0x00000000
r16: 0x00000000 r17: 0x00000000 r18: 0x00000000 r19: 0x00000000
r20: 0x00000000 r21: 0x00000000 r22: 0x00000000 r23: 0x00000000
r24: 0x00000000 r25: 0x00000000 r26: 0xbfffea44 r27: 0x0000000c
r28: 0x00000000 r29: 0x00000000 r30: 0x41414141 r31: 0x41414141
cr: 0x22000022 xer: 0x20000000 lr: 0x41414141 ctr: 0x00000000
vrsave: 0x00000000
You can easily spot which registers you control; look for registers with
the hexadecimal value 0x41414141, the hexadecimal value of the ASCII string
“AAAA.” The attack string has clearly corrupted the r0, r30, r31, and lr registers.
The most important register to control is the link register lr, since it contains the
address where execution will resume when the subroutine returns using the blr
instruction. Since you can control the lr register, you can control the execution
of the target program.
In order to place chosen values in controlled registers, you will fi rst need to
identify the locations in the attack string that correspond to the overwritten values
of each controlled register. This can be done using a specially patterned string
that will let you quickly calculate the position in the pattern string based on the
register’s value. The pattern consists of every ASCII character from ‘A’ to ‘z’, each
repeated four times. To fi nd the offset in the pattern string from which the regis-
ter’s value is taken, subtract 0x41 (the hexadecimal ASCII value for ‘A’) from the
repeated hexadecimal byte value in the register, convert to decimal, and multiply
by 4. For example, if a register’s value is 0x58585858, then it is (0x58 – 0x41) × 4 =
9955336633cc0077..iinndddd 116677 11//2255//0099 44::4411::4466 PPMM
168 Part III ■ Exploitation
0x17 × 4 = 23 × 4 = 92 bytes from the beginning of the pattern string. The pattern
string is generated by the following Ruby code.
pattern = ((‘A’..’Z’).to_a + [‘[‘, ‘\\’, ‘]’, ‘^’, ‘_’, ‘`’] +
(‘a’..’z’).to_a).inject(“”) {|s, c| s += c.to_s * 4}
In the following examples, you can assume that this variable is already
defi ned (for brevity). Metasploit uses a similar pattern string, but the string