BP. Next, we describe the simulator Sim
(cid:48)
BP which takes as input (1s, BP(x)),
(cid:48)
BP(1s, BP(x)):
Sim
- If BP(x) = 0, output whatever SimBP(1s, 0) outputs. Else, pick a α uniformly at random
from Z∗
p and output whatever SimBP(1s, α) outputs.
Now, we prove the following.
Theorem 6. Consider an oblivious dual-input RMBP BP = (inp1, inp2,{Bi,b1,b2}i∈[n],b1,b2∈{0,1})
(cid:48)
of length n, width w and input of (cid:96) bits. Then there exists a PPT simulator Sim
BP such that for
every x ∈ {0, 1}(cid:96), (cid:110)
(cid:111)
(cid:111) ≡ (cid:110)
(cid:48)
randBP
(randBP(BP))
Sim
(cid:48)
BP(1s, BP(x))
.
(cid:12)(cid:12)(cid:12)x
(cid:111) ≡(cid:110)
(cid:12)(cid:12)(cid:12)x
17
(cid:12)(cid:12)(cid:12)x
(cid:110)
Proof. Let us denote BP
by (M1, M2, . . . , Mn). Observe that
(cid:48)
randBP
(randBP(BP))
(cid:48)
randBP(randBP
(M1, M2, . . . , Mn))
(cid:111)
.
(randBP(·)) operation on the relaxed matrix
(cid:48)
This holds by just observing that applying randBP
branching program and then evaluating the result on an input x is equivalent to ﬁrst evaluating
(randBP(·))
(cid:48)
the relaxed matrix branching program on an input x and then applying the randBP
operation. Now, we need to show that
(cid:48)
randBP(randBP
(M1, M2, . . . , Mn))
Sim
(cid:48)
BP(1s, BP(x))
(cid:111) ≡ (cid:110)
(cid:111)
.
(cid:110)
We will show that for any tuple V , the probability of output being V is identical in the real
and simulated experiments above. We begin by calculating the probability of V in the real
(cid:48)
experiment, where probability is taken over the random coins of both randBP and randBP
. Let
V2 = M1, M2, . . . , Mn.
(cid:48)
Pr[randBP(randBP
(V2)) = V ] =
=
Pr[randBP(V1) = V ∧ randBP
(cid:48)
(V2) = V1]
Pr[randBP(V1) = V ] · Pr[randBP
(cid:48)
(V2) = V1]
(cid:88)
(cid:88)
V1
V1
Now let V1 = (N1, N2, . . . , Nn) and βV1 denote ((cid:81)
i
V ] = Pr[SimBP(1s, βV1) = V ]. Substituting in above, we get
Ni)[1, w]. Then by Theorem 4, Pr[randBP(V1) =
(cid:88)
(cid:88)
(cid:88)
V1
α
(cid:48)
Pr[randBP(randBP
(V2)) = V ] =
=
=
Pr[SimBP(1s, βV1) = V ] · Pr[randBP
(cid:48)
(cid:88)
Pr[SimBP(1s, α) = V ] · (cid:88)
V1s.t.βV1 =α
Pr[SimBP(1s, α) = V ] · Pr[randBP
(cid:48)
(cid:48)
Pr[randBP
(V2) = V1]
(V2) = V1]
(V2) = V1]
α
V1s.t.βV1 =α
- BP(x) = 0: This case is easy to handle. Note that in this case, (cid:81)
We have two cases based on whether BP(x) = 1 or BP(x) = 0.
Hence, in the above expression,(cid:80)
(cid:48)
V1s.t.βV1 =α Pr[randBP
otherwise. Substituting in the above expression we get,
i Mi[1, w] = 0 = βV1.
(V2) = V1] = 1 for βV1 = 0 and 0
(cid:48)
Pr[randBP(randBP
(V2)) = V ] = Pr[SimBP(1s, 0) = V ]
(cid:48)
BP(1s, BP(x)) = V ]
= Pr[Sim
- BP(x) = 1: In this case,(cid:81)
i Mi[1, w] (cid:54)= 0. By Claim 3,(cid:80)
·(cid:88)
(V2)) = V ] =
(cid:48)
Pr[randBP(randBP
1
p−1 . Substituting in above equation we get,
(cid:48)
V1s.t.βV1 =α Pr[randBP
(V2) = V1] =
Pr[SimBP(1s, α) = V ]
1
p − 1
(cid:48)
BP(1s, BP(x)) = V ]
= Pr[Sim
α
18
5
Ideal Graded Encoding Model
In this section, we describe the ideal graded encoding model. This section has been taken
almost verbatim from [4]. All parties have access to an oracle M, implementing an ideal
graded encoding. The oracle M implements an idealized and simpliﬁed version of the graded
encoding schemes from [26]. The parties are provided with encodings of various elements at
diﬀerent levels. They are allowed to perform arithmetic operations of addition/multiplication
and testing equality to zero as long as they respect the constraints of the multilinear setting.
We start by deﬁning an algebra over the elements.
Deﬁnition 5. Given a ring R and a universe set U, an element is a pair (α, S) where α ∈ R is
the value of the element and S ⊆ U is the index of the element. Given an element e we denote
by α(e) the value of the element, and we denote by S(e) the index of the element. We also deﬁne
the following binary operations over elements:
• For two elements e1, e2 such that S(e1) = S(e2), we deﬁne e1 + e2 to be the element
• For two elements e1, e2 such that S(e1) ∩ S(e2) = ∅, we deﬁne e1 · e2 to be the element
(α(e1) + α(e2), S(e1)), and e1 − e2 to be the element (α(e1) − α(e2), S(e1)).
(α(e1) · α(e2), S(e1) ∪ S(e2)).
Next, we describe the oracle M. M is a stateful oracle mapping elements to “generic” repre-
sentations called handles. Given handles to elements, M allows the user to perform operations
on the elements. M will implement the following interfaces:
Initialization. M will be initialized with a ring R, a universe set U, and a list L of initial
elements. For every element e ∈ L, M generates a handle. We do not specify how the handles
are generated, but only require that the value of the handles are independent of the elements
being encoded, and that the handles are distinct (even if L contains the same element twice).
M maintains a handle table where it saves the mapping from elements to handles. M outputs
the handles generated for all the elements in L. After M has been initialized, all subsequent
calls to the initialization interface fail.
Algebraic operations. Given two input handles h1, h2 and an operation ◦ ∈ {+,−,·}, M
If any of the input handles do
ﬁrst locates the relevant elements e1, e2 in the handle table.
not appear in the handle table (that is, if the handle was not previously generated by M) the
call to M fails. If the expression e1 ◦ e2 is undeﬁned (i.e., S(e1) (cid:54)= S(e2) for ◦ ∈ {+,−}, or
S(e1) ∩ S(e2) (cid:54)= ∅ for ◦ ∈ {·}) the call fails. Otherwise, M generates a new handle for e1 ◦ e2,
saves this element and the new handle in the handle table, and returns the new handle.
Zero testing. Given an input handle h, M ﬁrst locates relevant element e in the handle
table. If h does not appear in the handle table (that is, if h was not previously generated by
M) the call to M fails. If S(e) (cid:54)= U, the call fails. Otherwise, M returns 1 if α(e) = 0, and
returns 0 if α(e) (cid:54)= 0.
6 Straddling Set System
In this section, we describe a straddling set system which is same as the one considered in [4].
Then we will prove two combinatorial properties of this set system, which will be very useful in
proving the VBB security of our scheme.
Deﬁnition 6. A straddling set system Sn = {Si,b : i ∈ [n], b ∈ {0, 1}} with n entries over the
universe U = {1, 2, . . . , 2n − 1} is as follows:
S1,0 = {1}, S2,0 = {2, 3}, . . . , Si,0 = {2i−2, 2i−1}, . . . , Sn−1,0 = {2n−4, 2n−3}, Sn,0 = {2n−2, 2n−1}
19
S1,1 = {1, 2}, S2,1 = {3, 4}, . . . , Si,1 = {2i− 1, 2i}, . . . , Sn−1,1 = {2n− 3, 2n− 2}, Sn,1 = {2n− 1}
Claim 4 (Two unique covers of universe). The only exact covers of U are {Si,0}i∈[n] and
{Si,1}i∈[n].
Proof. Since any exact cover of U needs to pick a set with element 1, it either contains the set
S1,0 or S1,1. Let C be a cover of U containing S1,0. Then, we prove that Si,0 ∈ C,∀i ∈ [n]. We
will prove this via induction on i. It is trivially true for i = 1. Let us assume that the statement
is true for i, and prove the statement for i + 1. There are only two sets, namely Si+1,0 and Si,1
which contain the element 2i ∈ U. Since, by induction hypothesis, Si,0 ∈ C and Si,0 ∩ Si,1 (cid:54)= ∅,
Si+1,0 ∈ C in order to cover all the elements in U. This shows that there is a unique cover of U
containing S1,0.
Similarly, we can show that there is a unique cover of U containing the set S1,1 which is
{Si,1}i∈[n]. As mentioned before, any exact cover of U contains either S1,0 or S1,1 in order to
cover the element 1 ∈ U. This proves the claim.
Claim 5 (Collision at universe). Let C and D be non-empty collections of sets such that C ⊆
{Si,0}i∈[n], D ⊆ {Si,1}i∈[n], and(cid:83)
S∈C S =(cid:83)
S∈D S, then following must hold:
C = {Si,0}i∈[n] , D = {Si,1}i∈[n].
Proof. We will prove this claim by contradiction. Let us assume that C ⊂ {Si,0}i∈[n]. Then
there exists a maximal sub-interval [i, j] ⊂ [n] such that Sk,0 ∈ C for all i ≤ k ≤ j but either (1)
i > 1 and Si−1,0 /∈ C or (2) j  1 and Si−1,0 /∈ C.
S∈D S, it should be the case that Sj,1 ∈ D. Now
S∈D S, it should be the case
S∈C S =(cid:83)
S∈C S =(cid:83)
S∈C S =(cid:83)
that Sj+1,0 ∈ C. This contradicts the assumption that j < n and Sj+1,0 /∈ C.
Since C = {Si,0}[n], it has to be the case that D = {Si,1}[n].
7 Obfuscation in the Ideal Graded Encoding Model
In this section, we describe our VBB obfuscator O for polynomial sized formulae in the ideal
graded encoding model.
Input. The input to our obfuscator O is a dual-input oblivious relaxed matrix branching
program BP of length n, width w, input length (cid:96):
BP = (inp1, inp2,{Bi,b1,b2}i∈[n],b1,b2∈{0,1})
such that inp1 and inp2 are evaluation functions mapping [n] → [(cid:96)], and each Bi,b1,b2 ∈ {0, 1}w×w
is a full rank matrix.
We make a simplifying assumption that every input bit is inspected by BP exactly (cid:96)(cid:48) number
of times. We denote the set of indices that inspect the input bit j by ind(j).