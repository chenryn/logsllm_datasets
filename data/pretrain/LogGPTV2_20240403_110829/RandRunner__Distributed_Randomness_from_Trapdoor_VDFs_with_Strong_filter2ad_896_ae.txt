upper bound for the number of predictable rounds, we only
have to consider rounds with adversarial leaders. Within a pe-
riod of n consecutive rounds, there are exactly f such rounds,
which are consecutive in the worst case. Let us consider this
worst case for our upper bound: At the beginning of these f
rounds, the adversary immediately obtains the results of all
of those rounds, as it can use the adversarial leaders’ VDF
trapdoors to compute the results. The honest nodes, on the
other hand, have to compute f VDFs without the trapdoor
(assuming that the adversary withholds the results), requiring
f ·∆VDF seconds to complete. In the same time, the adversary
may already try to compute the VDFs of the honest leaders
in the next few rounds. As it takes the adversary ∆VDF /α
time to compute one such VDF (without the trapdoor), it can
compute at most
f · ∆VDF
∆VDF /α
= f · α
(12)
outputs during this time period. Consequently, as soon as
the honest nodes ﬁnish the computations for the f rounds
of adversarial leaders and hence catch up by f rounds, the
adversary’s ability to predict future protocol outputs increases
from f to f − f + f · α = f · α rounds. From that point on,
there are only rounds with correct leaders remaining, and as
the number of rounds the adversary can predict cannot increase
in rounds with correct leaders, the correctness of the lemma
follows.
Next, we prove a claim that will be important for the
induction step of the proof of Theorem 4.
Lemma 3. For all protocol conﬁgurations which fulﬁll In-
equality 10, the following holds: If the adversary has advan-
tage v ≤ f · α with respect to some round r, its advantage
with respect to round r + n is at most v(cid:48) ≤ f · α.
Proof: In the worst case, all correct nodes can complete
n consecutive rounds within
∆w = f · ∆VDF + (n − f ) · ∆NET
(13)
seconds, because there are f rounds in which the adversarial
leader may not broadcast the result, requiring ∆VDF time
each, and (n − f ) rounds with correct leaders which make
progress immediately and broadcast the results within ∆NET
seconds. If during this time period the adversary obtains a
round’s output by relying on a correct node’s message, instead
of obtaining it via computation by itself, the adversary could
not predict this value – its advantage with respect to this
round is zero. Consequently, this lemma immediately holds
by Lemma 2. If, on the other hand, the adversary does not
rely on messages from correct nodes for its progress, it can
compute the outputs of at most
w = f +
∆w
∆VDF /α
= f +
f · ∆VDF + (n − f ) · ∆NET
∆VDF /α
(14)
rounds during the period of ∆w seconds, because there are
f steps in which the adversary immediately obtains the result
as an adversarial node is leader, whereas all other steps rely
on computing a VDF without a trapdoor, taking ∆VDF /α
time each. In other words,
the adversary advances by w
rounds, while, during the same period of time, the correct
nodes advance by n rounds. As w ≤ n follows directly from
rearranging Inequality 10, the adversary cannot increase its
advantage (v(cid:48) ≤ v) and the lemma holds.
Theorem 4. (Unpredictability): All protocol conﬁgurations
satisfying Inequality 10 guarantee absolute unpredictability for
d = f · α.
Proof: The statement is equivalent to the claim that the
adversary’s advantage with respect to any round never exceeds
f · α. We give a proof by induction on the kth periods of
rounds and start with the induction base k = 1. Since the
adversary cannot predict the initial random beacon value R0,
Lemma 2 implies that the adversary’s advantage with respect
to the rounds 1, 2, ..., n is bounded by f·α. This already proves
that the statement is true for the ﬁrst period.
For the induction step, we have to show that if the adver-
sary’s advantage with respect to the rounds in the kth period is
bounded by f·α, the same is true for the rounds in the (k+1)th
period. Consider the rounds (k− 1)n + 1, (k− 1)n + 2, . . . , kn
of the kth period. We apply the induction assumption together
with Lemma 3 and obtain that the advantage of the adversary
in the rounds kn + 1, kn + 2, ..., (k + 1)n is at most f · α,
which we wanted to prove.
We have shown that there is no kth period of the protocol
containing a round in which the adversary’s advantage exceeds
f · α. This covers all rounds and hence concludes the proof.
In order to simplify the exposition of the proof, Theorem 4
and deﬁnition 5 consider the adversary’s ability to predict
future protocol outputs relative to some honest node. However,
if one wants to consider the unpredictability guarantee relative
to all / the slowest honest node, a very similar result applies
as all correct nodes synchronize within ∆NET time in the
broadcasting step of the protocol. Therefore, the same security
bound of f · α rounds holds for all nodes if we add an additive
term of ∆NET , i.e., the adversary does not have advantage
f · α + 1 for longer than ∆NET time. The additional term
of ∆NET time is required as we assume that the adversary
can send and receive messages (also from the correct nodes)
without any network delay, whereas messages between correct
nodes experience a network delay of up to ∆NET seconds.
4) Unpredictability for RandRunner-RS: As described in
Section V-D, the leaders in RandRunner can also be selected
uniformly at random (RandRunner-RS) as an alternative to
the round-robin style leader selection (RandRunner-RR) anal-
ysed in the previous section. Due to the probabilistic nature
of selecting leaders, RandRunner-RS provides a probabilistic
11
guarantee of unpredictability, whereas RandRunner-RR guar-
antees an absolute bound for the adversary’s ability to predict
future outputs. The reason for this difference is that the round-
robin leader selection ensures that there cannot be more than
f adversarial nodes within any period of n rounds at any point
in the protocol execution. When leaders are picked at random,
however, there can be up to u ≤ v adversarial leaders in any
period of v rounds (for an arbitrary number of rounds v),
although the likelihood of having a high fraction of adversarial
leaders during such a period decreases exponentially for longer
periods.
Similar to the round-robin case, the probabilistic guarantee
for unpredictability can be provided as long as the honest nodes
make progress faster than the adversarial nodes. Let pA :=
f /n and pH := 1 − pA denote the probability of selecting
an adversarial or honest leader respectively. Then the rates of
progress, i.e., the average time required per protocol round,
λH for the correct nodes and λA for the adversary, are given
as follows:
Fig. 2: Simulation of RandRunner-RS’ unpredictability guar-
antees, showing the likelihood of adversaries with different
strengths (pA, α) being able to predict future protocol outputs
at any particular point of the protocol’s execution, simulated
over a duration of 1010 rounds. (∆NET /∆VDF = 1/10)
λH :=
λA :=
∆NET · pH + ∆VDF · pA
∆VDF /α · pH
1
1
.
(15)
(16)
i.e.,
Intuitively, RandRunner-RS works as long as correct nodes
progress faster than adversarial nodes,
if λH > λA,
because any advantage an adversary has in some round will
disappear after a sufﬁcient number of rounds. The more both
rates differ,
the quicker any advantage disappears and the
more unlikely a big advantage becomes. Obtaining a closed
form expression for the corresponding probability appears
difﬁcult, as the advantage of the adversary in a particular
round depends on the previous protocol state as well as on the
sequence of future leaders. However, by simulating protocol
executions we can derive these probabilities empirically. This
is illustrated in Figure 2 which presents our simulation results,
considering different assumptions in regard to the fraction of
adversarial nodes (pA) and the adversary’s advantage in terms
of sequential computation speed for the VDF, denoted by α.
For the parameters ∆NET and ∆VDF , we select a ﬁxed ratio
of ∆NET /∆VDF = 1/10, as we observe that the simulation
is typically more sensitive to a change of pA and α. For each
of the exemplary parameters picked, we simulate the protocol
execution for 1010 rounds10. At any point in time where a
state change happens, i.e., when a new value is received or
computed, we measure any potential advantage the adversary
has in comparison to the other nodes, and use this measurement
to derive the probabilities that it can predict a certain number of
rounds at any particular point in time. An extended evaluation
is provided in Appendix B. The source code used to obtain
the simulation results is publicly available on Github [43].
5) Unpredictability against a covert adversary:
In the
previous sections, we analysed the unpredictability guarantees
RandRunner provides in regards to an adversary which actively
attacks the protocol during execution. However, in practice an
adversary can hardly proﬁt from any attack on unpredictability
if the correct network participants are aware of the fact that
the protocol is being attacked. The base for the detection
10For ∆NET = 5 seconds, this corresponds to more than 1500 years of
protocol execution in real time.
Fig. 3: Simulation of RandRunner-RS’ unpredictability guaran-
tees against covert adversaries. As in Figure 2, the simulation
shows the likelihood of successful prediction by adversaries of
different strengths (pA, α) considering a simulation duration of
1010 rounds. (∆NET /∆VDF = 1/10)
of ongoing attacks is that correct nodes expect new protocol
outputs in intervals of at most ∆NET seconds. There are only
two reasons for protocol outputs being delayed any further:
1)
2)
leader withholds the next protocol
an adversarial
output or
the network behaves asynchronously.
As the second case is unlikely if ∆NET is properly conﬁgured,
any delay is a strong indicator for an attack. This leads us to
the notion of a covert adversary [1] which aims to hide all
traces that can be used for detecting the attack.
RandRunner is resilient against covert adversaries, because
a covert adversary has to broadcast new protocol outputs
after at most ∆NET seconds to make sure the attack stays
invisible. Also, the computation time available to compute
honest leaders’ VDFs is reduced to ∆NET . Therefore, the
bound of λH > λA for achieving unpredictability in the
general case is reduced to the following inequality considering
the covert case:
∆NET < ∆VDF /α · pH .
(17)
The bigger the (relative) difference between both sides, the
more the fraction of adversarial nodes pA and their com-
putational advantage can be increased. A particular distin-
12
01020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionpA=0.25,α=1.0pA=0.25,α=1.25pA=0.33,α=1.0pA=0.33,α=1.25pA=0.41,α=1.0pA=0.41,α=1.2501020304050607080numberofroundstopredict10−610−510−410−310−210−1100probabilityofsuccessfulpredictionpA=0.33,α=1.0pA=0.33,α=1.25pA=0.50,α=1.0pA=0.50,α=1.25pA=0.66,α=1.0pA=0.66,α=1.25pA=0.75,α=1.0pA=0.75,α=1.25guishing advantage compared to other protocol designs is that
RandRunner even works against an attacker which controls
a majority of nodes in the covert adversary model. This is
illustrated in Figure 3, where we, among others, consider an
adversary which controls 75% of all nodes in the system.
As for the non-covert case, we provide additional simulation
results for a range of different parameters in Appendix B.
6) Unpredictability against an adaptive adversary: In the
static adversary model, it is assumed that the adversary may
control up to a threshold of f nodes. Those nodes may
behave Byzantine, however the set of nodes controlled by
the adversary is ﬁxed and deﬁned prior to the start of the
protocol. Another commonly encountered adversarial model
is concerned with adaptive corruptions [14], [36]. Adaptive
adversaries may decide which nodes to corrupt (take control
of) based on information collected during the execution of the
protocol. As in the static case, the adversary’s capabilities are
bounded by the threshold f. A further distinction can be made
between fully adaptive and mildly adaptive adversaries [36],
where the former implies practically instantaneous corruptions,
whereas the latter incurs some non-zero delay before a cor-
ruption takes effect. In practice, a fully adaptive adversary is
likely an unrealistically strong assumption, in particular if we
consider communication delay to be non-zero. Nevertheless,
we discuss the resilience of the RandRunner protocols against
both variants of adaptive adversaries.
We recall that the security proof provided for RandRunner-
RR explicitly covers the worst case of f consecutive ad-
versarial nodes. Consequently, the absolute unpredictability
bound (see Theorem 4) remains unaffected even if an adaptive
adversary of either ﬂavor is assumed. As we elaborate in Ap-
pendix D, RandRunner-RR additionally provides probabilistic
unpredictability guarantees before this unpredictability bound
is reached, very similar to the probabilistic guarantee shown
for RandRunner-RS. However, because in essence this is
achieved by randomizing the round-robin sequence of leaders
after (static) corruptions have taken place, these additional
probabilistic guarantees in RandRunner-RR do not hold for
mildly or fully adaptive corruptions.
RandRunner-RS provides probabilistic guarantees regard-
ing unpredictability. Intuitively, the further into the future an
adversary wishes to predict beacon values,
the less likely
they are to succeed. Considering an adaptive adversary,
RandRunner-RS’s probabilistic guarantees degrade gracefully,
depending on the number of corruptions and the time required
to corrupt the nodes. In the worst case, considering a fully
adaptive adversary which may instantaneously corrupt up to
f nodes, our simulations show that the adversary’s prediction
capabilities are shifted by f rounds. In other words, in this
case the adversary can pick a single point in time at which it
is able to once instantaneously corrupt at most the sequence of
the next f leaders, and thereby predict the outcome of the next
f protocol rounds. However, after that point the probability of
predicting any further rounds again start to drop exponentially.
This is to be expected behavior and can be seen as granting
the adversary a one-time lead of f rounds. Fortunately, in
practice the worst case of a fully adaptive adversary is highly
unrealistic. In a more realistic case, corruptions would require a
considerable amount of time, i.e., much longer than ∆NET and
∆VDF . In this case however, by the time the adversary is able
to successfully corrupt the next leader it has already fulﬁlled
its duty of broadcasting the next beacon value, rendering the
attack ineffective for gaining an additional advantage over
static corruptions. Thus, such mildly adaptive corruptions do
not affect the guarantees provided.
The analysis of adaptive adversaries for both RandRunner-
RR and RandRunner-RS serves to further highlight
their
different properties and potential use cases. In particular, if
resilience against fully adaptive adversaries is deemed a ne-
cessity, utilizing RandRunner-RR and waiting for the absolute
unpredictability bound presents a solution. We point out that
for this scenario a smaller set of participants is advantageous in
regard to the required waiting periods before unpredictability
can be guaranteed. On the other hand, RandRunner-RS can
offer unpredictability with probabilistic guarantees that incurs
shorter waiting periods,
if mildly adaptive adversaries are
assumed.
VII. RELATED WORK
In recent years, a wide range of possible approaches to ob-