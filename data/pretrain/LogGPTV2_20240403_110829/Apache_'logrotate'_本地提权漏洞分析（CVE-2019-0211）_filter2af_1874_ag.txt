        /* general object functions */
        zend_object_free_obj_t                  free_obj;
    ...
    }
###  变量
zend_string  
    struct _zend_string {
        zend_refcounted_h gc;  // 引用计数器，8字节
        zend_ulong h;
        size_t len;
        char val[1];
    }
    struct _zend_string     zend_string;
    #define ZSTR_VAL(zstr)  (zstr)->val
    #define ZSTR_LEN(zstr)  (zstr)->len
## 7\. 其他
###  CVE-2019-6977
这个是作者提到的后来发现的一个PHP的越界写漏洞，可以替代上面的UAF来读写apache内存  
imagecreatetruecolor函数  
主要是调用gdImageCreateTrueColor分配内存并初始化一个gdImage结构体
gdImage
    typedef struct gdImageStruct {
        /* Palette-based image pixels */
        unsigned char ** pixels;
        int sx;
        int sy;
        ...
        int ** tpixels;
        ...
    } gdImage;
    typedef gdImage * gdImagePtr;
imagecreatetruecolor
    // php/ext/gd/gd.c
    PHP_FUNCTION(imagecreatetruecolor)
    {
    ...
        im = gdImageCreateTrueColor(x_size, y_size);
    ...
    }
    // php/ext/gd/libgd/gd.c
    gdImagePtr gdImageCreateTrueColor (int sx, int sy)
    {
        int i;
        gdImagePtr im;
    ...
        im = (gdImage *) gdMalloc(sizeof(gdImage));
        memset(im, 0, sizeof(gdImage));
        im->tpixels = (int **) gdMalloc(sizeof(int *) * sy);
        ...
        for (i = 0; i tpixels[i] = (int *) gdCalloc(sx, sizeof(int));
        }
    ...
        im->trueColor = 1;
    ...
        return im;
    }
    #define gdMalloc(size)      emalloc(size)
    #define gdCalloc(nmemb, size)   ecalloc(nmemb, size)
imagecolorallocate函数  
给一个图像分配颜色
    // php
    int imagecolorallocate ( resource $image , int $red , int $green , int $blue )
    PHP_FUNCTION(imagecolorallocate)
    {
        zval *IM;
        zend_long red, green, blue;
        gdImagePtr im;
        int ct = (-1);
    ...
        ct = gdImageColorAllocate(im, red, green, blue);
     ...
    }
    int gdImageColorAllocate (gdImagePtr im, int r, int g, int b)
    {
        return gdImageColorAllocateAlpha (im, r, g, b, gdAlphaOpaque);
    }
    // truecolor 图像
    int gdImageColorAllocateAlpha (gdImagePtr im, int r, int g, int b, int a)
    {
        int i;
        int ct = (-1);
        if (im->trueColor) {
            return gdTrueColorAlpha(r, g, b, a);
        }
    ...
    }
    #define gdTrueColorAlpha(r, g, b, a) (((a) pixels = (unsigned char **) gdMalloc(sizeof(unsigned char *) * sy);
    ...
        for (i = 0; i pixels[i] = (unsigned char *) gdCalloc(sx, sizeof(unsigned char));
        }
        im->sx = sx;
        im->sy = sy;
    ...
        for (i = 0; i open[i] = 1;
            im->red[i] = 0;
            im->green[i] = 0;
            im->blue[i] = 0;
        }
        im->trueColor = 0;
        im->tpixels = 0;
    ...
        return im;
    }
对一个调色板图像对象，每调用imagecolorallocate会使im->colorsTotal加1
    int gdImageColorAllocateAlpha (gdImagePtr im, int r, int g, int b, int a)
    {
        int i;
        int ct = (-1);
    ...
        for (i = 0; i colorsTotal; i++) {
            if (im->open[i]) {
                ct = i;
                break;
            }
        }
        if (ct == (-1)) {
            ct = im->colorsTotal;
            if (ct == gdMaxColors) {
                return -1;
            }
            im->colorsTotal++;
        }
        im->red[ct] = r;
        im->green[ct] = g;
        im->blue[ct] = b;
        im->alpha[ct] = a;
        im->open[ct] = 0;
        return ct;
    }
imagecolormatch函数
    PHP_FUNCTION(imagecolormatch)
    {
    ...
        result = gdImageColorMatch(im1, im2);
    ...
    }
    iint gdImageColorMatch (gdImagePtr im1, gdImagePtr im2)
    {
        unsigned long *buf; /* stores our calculations */
        unsigned long *bp; /* buf ptr */
        int color, rgb;
        int x,y;
        int count;
    ...
        buf = (unsigned long *)safe_emalloc(sizeof(unsigned long), 5 * im2->colorsTotal, 0);
        memset( buf, 0, sizeof(unsigned long) * 5 * im2->colorsTotal );
        for (x=0; xsx; x++) {
            for( y=0; ysy; y++ ) {
                color = im2->pixels[y][x];
                rgb = im1->tpixels[y][x];
          // 一共有0～255个颜色(color)，每个颜色占五个long：每个color的次数，红色的深度(0~255)，绿色的深度，蓝色的深度，alpha大小
                bp = buf + (color * 5);
                (*(bp++))++;
                *(bp++) += gdTrueColorGetRed(rgb);
                *(bp++) += gdTrueColorGetGreen(rgb);
                *(bp++) += gdTrueColorGetBlue(rgb);
                *(bp++) += gdTrueColorGetAlpha(rgb);
            }
        }
        bp = buf;
        for (color=0; colorcolorsTotal; color++) {
            count = *(bp++);
            if( count > 0 ) {
                im2->red[color]     = *(bp++) / count;
                im2->green[color]   = *(bp++) / count;
                im2->blue[color]    = *(bp++) / count;
                im2->alpha[color]   = *(bp++) / count;
            } else {
                bp += 4;
            }
        }
        gdFree(buf);
        return 0;
    }
    # define safe_emalloc(a,b,c) emalloc((a)*(b)+(c))
    #define gdTrueColorGetAlpha(c) (((c) & 0x7F000000) >> 24)
    #define gdTrueColorGetRed(c) (((c) & 0xFF0000) >> 16)
    #define gdTrueColorGetGreen(c) (((c) & 0x00FF00) >> 8)
    #define gdTrueColorGetBlue(c) ((c) & 0x0000FF)
漏洞原理  
imagecolormatch会根据调色板图像的im->colorsTotal创建一个缓冲区：
     buf = (unsigned long *)safe_emalloc(sizeof(unsigned long), 5 * im2->colorsTotal, 0);
对缓冲区的写入使用的是
    bp = buf + (color * 5);
而color的范围是`(0~255)` ，且colorsTotal和color都可以由用户控制，最终可以实现越界写。
###  调试环境搭建
我从源码编译Apache后，它的all_buckets位于heap区域，无法通过PHP获取其地址，猜测是编译选项或者编译器的问题，做了很多尝试最终还是没有解决这个问题，这里记录一下相关的内容，
方便以后有机会再分析。
    非源码环境的进程maps：
    gdb-peda$ p all_buckets
    $5 = (prefork_child_bucket *) 0x7f2847b501d0
    7f2847ae3000-7f2847af7000 rw-s 00000000 00:01 279724                     /dev/zero (deleted)
    7f2847af7000-7f2847b46000 rw-p 00000000 00:00 0 
    7f2847b46000-7f2847bf9000 rw-p 00000000 00:00 0 
    7f2847bf9000-7f2847c0b000 rw-p 00000000 00:00 0 
    7f2847c0b000-7f2847c0c000 r--p 00027000 08:01 661145                     /lib/x86_64-linux-gnu/ld-2.27.so
    7f2847c0c000-7f2847c0d000 rw-p 00028000 08:01 661145                     /lib/x86_64-linux-gnu/ld-2.27.so
    ...
    源码环境的进程maps：
    gdb-peda$ p all_buckets 
    $1 = (prefork_child_bucket *) 0x557e1eddf878
    $ sudo cat /proc/130839/maps
    557e1ddf4000-557e1dea8000 r-xp 00000000 08:01 2114741                    /usr/local/httpd/bin/httpd
    557e1e0a8000-557e1e0ab000 r--p 000b4000 08:01 2114741                    /usr/local/httpd/bin/httpd
    557e1e0ab000-557e1e0af000 rw-p 000b7000 08:01 2114741                    /usr/local/httpd/bin/httpd
    557e1e0af000-557e1e0b2000 rw-p 00000000 00:00 0 
    557e1ed67000-557e1ee10000 rw-p 00000000 00:00 0                          [heap]
    557e1ee10000-557e1ef18000 rw-p 00000000 00:00 0                          [heap]
源码安装Apache httpd
    sudo apt update
    sudo apt-get -y install build-essential git autoconf vim
    wget http://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.6.5.tar.gz
    tar xf apr-1.6.5.tar.gz 
    cd apr-1.6.5
    ./configure --prefix=/usr/local/apr/ CFLAGS=-g
    make
    sudo make install
    cd ..
    sudo apt-get install libexpat1-dev
    wget http://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-util-1.6.1.tar.gz
    tar -zxvf apr-util-1.6.1.tar.gz
    cd apr-util-1.6.1
    ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr CFLAGS=-g
    make 
    sudo make install
    cd ..
    sudo apt-get -y install libpcre3-dev zlib1g-dev 
    wget http://archive.apache.org/dist/httpd/httpd-2.4.38.tar.gz
    tar -zxvf httpd-2.4.38.tar.gz
    cd httpd-2.4.38
    ./configure --prefix=/usr/local/httpd/ 
    --sysconfdir=/etc/httpd/ 
    --with-include-apr 
    --disable-userdir 
    --enable-headers 
    --with-mpm=prefork 
    --enable-modules=most 
    --enable-so 
    --enable-deflate 
    --enable-defate=shared 
    --enable-expires-shared 
    --enable-rewrite=shared 
    --enable-static-support 
    --with-apr=/usr/local/apr/ 
    --with-apr-util=/usr/local/apr-util/bin 
    --with-ssl 
    --with-z 
    CFLAGS=-g
    make
    sudo make install
    sudo ln -s /usr/local/httpd/bin/apachectl /usr/sbin/apachectl
    sudo groupadd www
    sudo useradd -g www www -s /bin/false
    sudo sed -i 's,#ServerName www.example.com,ServerName localhost,'  /usr/local/httpd/conf/httpd.conf
    sudo sed -i 's,User daemon,User www,'  /usr/local/httpd/conf/httpd.conf
    sudo sed -i 's,Group daemon,Group www,'  /usr/local/httpd/conf/httpd.conf
    sudo echo -e "nListen 8080nAddType application/x-httpd-php .php" >> /usr/local/httpd/conf/httpd.conf
    sudo apachectl start
    测试
    ps -aux|grep httpd
    curl localhost
    web目录
    cat /etc/httpd/httpd.conf |grep DocumentRoot
    参考
    https://blog.csdn.net/m0_37886429/article/details/79643078
    https://segmentfault.com/a/1190000002763150
源码安装PHP
    sudo apt-get -y install 
        libxml2-dev 
        libcurl4-openssl-dev 
        libjpeg-dev 
        libpng-dev 
        libxpm-dev 
        libmysqlclient-dev 
        libpq-dev 
        libicu-dev 
        libfreetype6-dev 
        libldap2-dev 
        libxslt-dev 
        libssl-dev 
        libldb-dev
    sudo apt-get -y install build-essential
    wget https://www.php.net/distributions/php-7.2.13.tar.gz
    tar -zxvf php-7.2.13.tar.gz
    cd php-7.2.13
    ./configure --prefix=/usr/local/php7.2.13  --with-apxs2=/usr/local/httpd/bin/apxs --with-gd CFLAGS=-g
    make 
    sudo make install
    测试
    $ sudo ln -s /usr/local/php7.2.13/bin/php /usr/sbin/php
    $ php -v
    PHP 7.2.13 (cli) (built: May  8 2020 01:10:56) ( ZTS )
    Copyright (c) 1997-2018 The PHP Group
    Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
    参考
    https://docs.moodle.org/38/en/Compiling_PHP_from_source