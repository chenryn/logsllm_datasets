User: I recently discovered (Much to my surprised) you can call command line args in files other than the one that is explicitly called when you enter it. 
So, you can run python file1.py abc in command line, and use sys.argv[1] to get the string 'abc' from within file2.py or file3.py.
I still feel like this shouldn't work, but I'm glad it does, since it saved me a lot of trouble.
But now I'd really appreciate an answer as to why/how this works. I had assumed that sys.argv[1] would be local to each file.
Assistant: As for the how/why, sys is only imported once (when python starts up).  When sys is imported, it's argv member gets populated with the commandline arguements.  Subsequent import statements return the same sys module object so no matter where you import sys from, you'll always get the same object and therefore sys.argv will always be the same list no matter where you reference it in your application.

Whether you should be doing commandline parsing in more than one place is a different question.  Generally, my answer would be "NO" unless you are only hacking together a script to work for the next 2 or 3 days.  Anything that you expect to last should do all it's parsing up front (probably with a robust argument parser like argparse) and pass the data necessary for the various functions/classes to them from it's entry point.