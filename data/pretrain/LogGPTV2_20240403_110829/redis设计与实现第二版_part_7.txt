函数
地完成的。
释放给定字典，以及字典中包含的所有键值对
从字典中删除给定键所对应的键值对
作
其中包括数据库和哈希键。
O(M)，N为字典包含的键值对数量
0(1)
时间复杂度
第4章   宇 
（续）
典37
---
## Page 42
跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构，除此之外，跳
（node）都保存了一款水果的价钱信息，所有水果按价钱的高低从低到高在跳跃表里面排序：
钱为分值，保存了130款水果的价钱：
跃表来作为有序集合键的底层实现。
比较多，又或者有序集合中元素的成员（member）是比较长的字符串时，Redis 就会使用跳
要来得更为简单，所以有不少程序都使用跳跃表来代替平衡树。
量处理节点。
指针，从而达到快速访问节点的目的。
举个例子，fruit-price 是一个有序集合键，这个有序集合以水果名为成员，水果价
Redis 使用跳跃表作为有序集合键的底层实现之一，如果一个有序集合包含的元素数量
在大部分情况下，跳跃表的效率可以和平衡树相媲美，并且因为跳跃表的实现比平衡树
跳跃表支持平均 O(logM)、最坏 O(M)复杂度的节点查找，还可以通过顺序性操作来批
和链表、字典等数据结构被广泛地应用在 Redis 内部不同，Redis 只在两个地方用到了
口跳跃表的第一个元素的成员为"banana"，它的分值为 5；
fruit-price 有序集合的所有数据都保存在一个跳跃表里面，其中每个跳跃表节点
跳跃表（skiplist）是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的
口跳跃表的第三个元素的成员为"apple"，它的分值为 8；
跳跃表的第二个元素的成员为"cherry"，它的分值为6.5;
(integer)130
redis> ZCARD fruit-price
)"banana
redis> ZRANGE fruit-price 0 2 WITHSCORES
"6.5"
)"cherry"
"5n
跳跃表
第5章
---
## Page 43
下属性：
跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针等等。
义，其中 zskiplistNode 结构用于表示跳跃表节点，而zskiplist 结构则用于保存跳
5.1
Trees》，或者《算法：C语言实现（第1～4部分）》一书的13.5节。
以参考WilliamPugh关于跳跃表的论文《Skip Lists:A Probabilistic Alternative to Balanced
表的操作API。本章不会对跳跃表的基本定义和基础算法进行介绍，如果有需要的话，可
跃表在 Redis 里面没有其他用途。本章将对 Redis 中的跳跃表实现进行介绍，并列出跳跃
口后退（backward）指针：节点中用 BW字样标记节点的后退指针，它指向位于当前节
图 5-1展示了一个跳跃表示例，位于图片最左边的是 zskiplist 结构，该结构包含以
位于zskiplist 结构右方的是四个 zskiplistNode 结构，该结构包含以下属性：
口length：记录跳跃表的长度，也即是，跳跃表目前包含节点的数量（表头节点不计
header：指向跳跃表的表头节点。
Redis 的跳联表由 redis.h/zskiplistNode 和 redis.h/zskiplist 两个结构定
D
tail：指向跳跃表的表尾节点。
算在内)。
level：记录目前跳跃表内，层数最大的那个节点的层数（表头节点的层数不计算
点的前一个节点。后退指针在程序从表尾向表头遍历时使用。
跨度。当程序从表头向表尾进行遍历时，访问会沿着层的前进指针进行。
距离。在上面的图片中，连线上带有数字的箭头就代表前进指针，而那个数字就是
代表第二层，以此类推。每个层都带有两个属性：前进指针和跨度。前进指针用于
在内）。
跳跃表的实现
length
header
level
tail
5
NULL←
L1
L2
L32
L3
→NUEL
图5-1一个跳跃表
01
BW
2.0
02
L1
2
03
3.0
M
L1
L2
ET
L5
第5章跳跃表39
NULL
NULL
---
## Page 44
40·第一部分数据结构与对象
点的路径：
向表尾方向访问节点。图5-3用虚线表示出了程序从表头向表尾方向，遍历跳跃表中所有节
0开始的，所以节点的第一层是level［0］，而第二层是level[1］，以此类推。
层的“高度”。
的概率越小）随机生成一个介于1和 32之间的值作为1eve1数组的大小，这个大小就是
节点的速度就越快。
针，程序可以通过这些层来加快访问其他节点的速度，一般来说，层的数量越多，访问其他
5.1.1跳跃表节点
过表头节点的这些属性都不会被用到，所以图中省略了这些部分，只显示了表头节点的各个层。
图5-2 分别展示了三个高度为1 层、3层和5 层的节点，因为C 语言的数组索引总是从
每次创建一个新跳跃表节点的时候，程序都根据幂次定律（power law，越大的数出现
每个层都有一个指向表尾方向的前进指针（level[i］.forward 属性），用于从表头
跳跃表节点的leve1数组可以包含多个元素，每个元素都包含一个指向其他节点的指
跳跃表节点的实现由 redis.h/zskiplistNode 结构定义：
2.前进指针
1.层 
typedef struct zskiplistNode [
注意表头节点和其他节点的构造是一样的：表头节点也有后退指针、分值和成员对象，不
口成员对象（obj）：各个节点中的o1、o2 和o3是节点所保存的成员对象。
口分值（score）：各个节点中的1.0、2.0和3.0是节点所保存的分值。在跳跃表中，
 zskiplistNode;
节点按各自所保存的分值从小到大排列。
robj *obj;
//成员对象
double score;
//分值
struct zskiplistNode *backward;
1/后退指针
struct zskiplistLevel {
/层
level[];
unsigned int span;
1/跨度
struct zskiplistNode *forward;
//前进指针
---
## Page 45
的排位为3。
沿途经历的层：查找的过程只经过了一个层，并且层的跨度为3，所以目标节点在跳跃表中
将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。
进指针就可以完成了，跨度实际上是用来计算排位（rank）的：在查找某个节点的过程中
已经到达了跳跃表的表尾，于是结束这次遍历。
中的第二个节点。
举个例子，图5-4用虚线标记了在跳跃表中查找分值为3.0、成员对象为03的节点时，
4）当程序再次沿着第四个节点的前进指针移动时，它碰到一个 NULL，程序知道这时
3）在第三个节点时，程序同样沿着第二层的前进指针移动到表中的第四个节点。
2）在第二个节点时，
1）选代程序首先访问跳跃表的第一个节点（表头），然后从第四层的前进指针移动到表
初看上去，很容易以为跨度和遍历操作有关，但实际上并不是这样，遍历操作只使用前
口指向 NULL 的所有前进指针的跨度都为O，因为它们没有连向任何节点。
口两个节点之间的跨度越大，它们相距得就越远。
层的跨度（level［i］.span属性）用于记录两个节点之间的距离：
3.跨度
length
level
tail
header
5
 zskiplistNode
backward
level[0]
score
obj
程序沿着第二层的前进指针移动到表中的第三个节点。
L32
L1
NULL <
3
·
图5-2带有不同层高的节点
图 5-3遍历整个跳跃表
zskiplistNode
1.0
L1
L2
L4
backward
level[0]
level[1]
level[2]
ao
score
02
2.0
MB
L1
L2
zskiplistNode
+
7
backward
level[1]
level[4]
level[0]
level[2]
level[3]
03
3.0
L1
2
L3
L5
score
Tao
第5章跳跃表é41
NULL
NULL
NULL
NULL
---
## Page 46
42·第一部分数据结构与对象
却可以是相同的：分值相同的节点将按照成员对象在字典序中的大小来进行排序，成员对象
存着一个 SDS 值。
分值从小到大来排序。
访问倒数第三个节点，再之后遇到指向 NULL 的后退指针，于是访问结束。
的tail指针访问表尾节点，然后通过后退指针访问倒数第二个节点，之后再沿着后退指针
多个节点的前进指针不同，因为每个节点只有一个后退指针，所以每次只能后退至前一个节点。
时
在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值
图5-6用虚线展示了如果从表尾向表头遍历跳跃表中的所有节点：程序首先通过跳跃表
节点的成员对象（obj属性）是一个指针，它指向一个字符串对象，而字符串对象则保
节点的分值（score 属性）是一个 double类型的浮点数，跳跃表中的所有节点都按
，目标节点在跳跃表中的排位为2。
5.分值和成员
节点的后退指针（backward属性）用于从表尾向表头方向访问节点：跟可以一次跳过
4.后退指针 
沿途经历的层：在查找节点的过程中，程序经过了两个跨度为1的节点，因此可以计算
再举个例子，图 5-5 用虚线标记了在跳跃表中查找分值为 2.0、成员对象为2 的节点
level
header
length
level
tail
header
tail
5
L32
L1
2
NULL <
L1
L2
L3
L4
L5
L32
图5-5另一个计算节点排位的例子
一
图5-4计算节点的排位
NULL
01
MB
L2
LI
L3
L4
01
1
L2
3
2.0
02
BW
L1
03
3.0
BW
L4
L5
3.0
BW
L1
2
L3
S
0NULL
NULL
NULL
NULL
NULL
NULI
NULI
NULI
---
## Page 47
（也即是跳跃表的长度）等信息，如图5-9所示。
行处理，比如快速访问跳跃表的表头节点和表尾节点，或者快速地获取跳跃表节点的数量
5.1.2
中的排序为o1<=o2<=03。
的节点又排在保存成员对象o3的节点之前，由此可见，1、o2、3三个成员对象在字典
但保存成员对象o1的节点却排在保存成员对象o2和3的节点之前，而保存成员对象o2
尾的方向)
较小的节点会排在前面（靠近表头的方向），而成员对象较大的节点则会排在后面（靠近表
zskiplist结构的定义如下：
但通过使用一个 zskiplist 结构来持有这些节点，程序可以更方便地对整个跳跃表进
仅靠多个跳跃表节点就可以组成一个跳跃表，如图5-8所示。
举个例子，在图5-7所示的跳跃表中，三个跳跃表节点都保存了相同的分值10086.0，
typedef struct zskiplist (
跳跃表
//表头节点和表尾节点
length
level
tail
header
length
header
level
tail
5
L1