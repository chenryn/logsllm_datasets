### C. Anti-Terror Intelligence

An intriguing use case for the PRI (Privacy-Preserving Inspection) system is in the context of governments gathering intelligence from their own citizens to combat terrorism. This use case is highly controversial and subject to significant ongoing debates [1], due to the trade-off between preserving civil liberties (i.e., the right to privacy) and the government's duty to protect lives. The PRI system allows both governments and citizens to decide and control the level of inspection and privacy infringement applied to private data.

For the anti-terror intelligence use case, some adaptations to the PRI model may be necessary. For example, the PRI system can be operated by Internet Service Providers (ISPs), which, as part of the PRI software, can correlate network traffic with client information. The rules are securely provided by the government, but some aggregated information about these rules can be made accessible to the public or their representatives. To prevent immediate disclosure of exact matches of user traffic, which could hinder the authorities' ability to react to threats, the PRI system may implement a notification delay, defined a priori.

### VI. Discussion and Related Work

In an era where more resources and services are being outsourced, there is a growing need for solutions that preserve critical security aspects. This problem has been particularly intensively discussed in the context of cloud computing. Although users of cloud computing infrastructure expect their data to remain confidential, today's clouds are built using a classical hierarchical security model that aims to protect privileged code (of the cloud provider) from untrusted code (the user’s virtual machine). However, this model does nothing to protect user data from access by privileged code [3].

For many large-scale computations, the use of cloud computing resources is either unavoidable or financially very attractive. However, users may not be willing to trust their cloud provider to keep their data confidential. In fact, the cloud user must trust not only the hardware on which their data is analyzed but also:

1. The provider’s software, including privileged software such as a hypervisor and firmware, as well as the provider’s full stack of management software.
2. The provider’s staff, including system administrators and those with physical access to hardware, such as cleaners and security guards.
3. Law enforcement bodies in any jurisdiction where their data may be replicated, as revealed by the Snowden leaks [3], [10].

Recently, researchers have started investigating whether similar approaches proposed for cloud computing can be applied to computer networks, which come with different requirements. Existing systems based on proxies are vulnerable to man-in-the-middle attacks on SSL, where fake certificates can be installed at the middlebox [14], [23]. This can break the security of SSL and allow Deep Packet Inspection (DPI). The removal of end-to-end SSL security results in numerous issues. Some proposals allow users to tunnel their traffic to a third-party middlebox provider [22], [24], but these approaches still allow the middlebox owner to inspect all traffic. An alternative is distributed firewalls, a client-side approach to implementing intrusion detection/prevention.

A notable approach is BlindBox [25], which performs deep-packet inspection directly on encrypted traffic. In BlindBox, the endpoint generates a tokenized version of the traffic, which can be inspected in a privacy-preserving manner at a special server. However, BlindBox requires the user to compute hashes of traffic segments and send them to the inspection box, introducing computational overhead to the user's PC and increasing network traffic. Additionally, BlindBox only supports exact match rules and not regular expressions, which are commonly used in security policies.

We believe that our PRI approach complements these works and focuses on a relevant use case: traffic inspection. An SGX (Software Guard Extensions) approach, as recently suggested in the context of cloud computing, could be used to implement our secure server, and the decoupling of various roles identified in our paper.

Table II summarizes the advantages and disadvantages of different architectures: man-in-the-middle proxies, client-side distributed firewalls, BlindBox, and PRI. Among these solutions, only BlindBox and PRI provide the required privacy guarantees. The main limitation of BlindBox is its expressive power, while the main limitation of PRI is its dependency on SGX hardware (although a single box is sufficient).

### VII. Conclusion

This paper examines the classic problem of traffic inspection from a new, privacy-preserving perspective. While it is commonly believed that users must blindly trust the administrator managing the intrusion detection or prevention system, we question this assumption. We show that it is possible to reduce trust assumptions in enterprise networks and present an intrusion detection system that preserves privacy regarding both user traffic and the rules used in the IDS/IPS. Notably, the PRI system requires only a single secured server, with no modifications to the user's hardware.

In summary, the PRI system features the following properties:
1. It decrypts and inspects network traffic in a privacy-preserving manner.
2. It accepts new security rules from administrators and applies them to the traffic in a secure and privacy-preserving manner, ensuring that the inspecting device does not leak unnecessary information about the user traffic.
3. It can be configured with new rules from rule providers in a secure and privacy-preserving manner, ensuring that the inspecting device does not leak unnecessary information about the user traffic.

We believe that the ideas underlying PRI can be applied in various contexts beyond the use cases discussed in this paper. It is not limited to rule-based intrusion detection systems and can be useful in more sophisticated and offline systems, such as those required to handle advanced insider threats [2], [6], [7].

Our approach raises several interesting questions for future research. Clearly, the performance of our architecture needs to be evaluated in detail. Additionally, it will be interesting to explore further applications of trusted execution environments in the context of computer networking and network function virtualization.

We have begun implementing a simple test version of the PRI intrusion detection/prevention system. Due to the delayed introduction of SGX hardware, the code is still very simple and contains untrusted parts.