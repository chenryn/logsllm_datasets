5 Privacy: Tracking Apple Device Users
In this section, we assess privacy issues in AWDL and ﬁnd
that AWDL devices are easily trackable. First, we discuss
protocol ﬁelds that enable tracking. Then, we leverage the
attack presented in Section 4 to perform an experimental
vulnerability assessment at different locations and compare
the results with a user study spanning 500 participants. Finally,
we discuss possible mitigations.
5.1
Identifying Devices and Users via AWDL
Protocol Fields
Even though AWDL implements MAC randomization for the
IEEE 802.11 header, AWDL-speciﬁc ﬁelds contain long-term
device identiﬁers that disclose sensitive information about the
user, undermining MAC randomization. In particular, AWDL
includes the following sensitive ﬁelds in the AFs which de-
vices broadcast in the clear multiple times per second when
the AWDL interface is active:
• The hostname may include parts of the user’s name, e. g.,
“Janes-iPhone,” which is the default when setting up a
new device.
• The real MAC address as well as the AP the device is
currently connected to.
• The device class differentiates between devices running
macOS, iOS/watchOS, and tvOS.
• In combination with the protocol version, this can be
used to infer the OS version, e. g., AWDL v2 is used in
macOS 10.12 while AWDL v3 is used in macOS 10.13.
The attacker could exploit the OS information during
42    28th USENIX Security Symposium
USENIX Association
101001000EveryoneContactIdentiﬁers10−210−1100101102ResponseTime[s]ExperimentAnalysisreconnaissance to mount attacks on vulnerable driver
implementations.
Targets need to broadcast AFs to make these vulnerabilities ex-
ploitable, which an attacker can practically enforce by mount-
ing the attack presented in Section 4.
5.2 A Survey on the Potential of Apple Device
User Tracking
The hostname set by default during Apple iOS and macOS
device installation includes the user’s name [3]. Due to its
frame structure, the AWDL protocol aids an adversary in map-
ping a hostname with the MAC address of the device. This
enables them to track users even if users change this hostname
on their device. The combination also enables more sophis-
ticated threats as the person’s name can be combined with
information from public databases (e. g., US census [86]) to
infer their home and work locations, while the MAC address
can be used to track them in real-time. To assess what percent-
age of device hostnames contain parts of the owner’s name,
we conducted a survey among 500 Apple device users on
Amazon Mechanical Turk. This survey contained questions7
relevant to the attacks demonstrated in this paper, and we re-
port the statistics in the relevant sections. In particular, in the
context of tracking, we asked the surveyors if it was easy for
other users to ﬁnd their device because their hostname con-
tained parts of their real name. We report the results of this
question along with the results of an experimental evaluation
in the next section.
5.3 Experimental Vulnerability Analysis
To demonstrate the feasibility of user tracking using AWDL,
we collect the number of discovered devices and check
whether that device’s hostname includes a person’s name
in four different locations within the US. We selected the
locations to reﬂect static as well as dynamic environments. In
particular, we recorded at a departure gate of an airport, in the
reading section of a public library, in a moving metro train,
and in the food court of a university.
Determining Whether a Hostname Contains a Person’s
Name. We use two databases to determine whether a host-
name contains a person’s name: the 2010 US Census [85]
containing 162 253 family names, and the 1918–2017 baby
names from the US Social Security Administration [87] con-
taining 96 743 given names. When detecting a new AWDL
node, we check string segments separated by hyphens against
these two databases.8 Note that when one segment matches
7The survey questionnaire is available at https://goo.gl/forms/
0okC4UphTQBnQ0FB3
8If a segment ends with the letter “s,” we also check the segment with-
out a trailing “s.” In addition, we ignore segments containing common de-
vice names such as “iPhone,” “Mac,” etc. For example, for the hostname
“Johns-iPhone,” we try to match the strings “Johns” and “John” to our name
databases.
Figure 7: Discovered AWDL devices at one location during
one minute.
Figure 8: Persons’ names distribution in hostnames.
the given name database, it is not matched again as a fam-
ily name because it is more likely that an Apple device will
include a person’s given name [3].
Ethical Statement. To preserve user privacy and not having
to store any sensitive user information, we fully automated
the name matching procedure. In particular, we only stored
salted hashes of the discovered hostnames (to differentiate
between devices) together with two bits indicating whether
the hostname contained a given or a family name. The salt
was generated randomly, kept in memory only, and discarded
after the completion of each experiment.
Setup. We do the measurements (a) without an attack (pas-
sive), (b) with static BLE advertisements containing only the
“zero” contact hash, and (c) with our BLE brute force ap-
proach. With (b), only devices in the everyone mode should
respond, with (c) we also capture those that are in contacts-
only mode. We run each setting for 60 seconds and repeat
it 10 times per location. To avoid statistical bias, we cycle
through the (a) to (c) settings back to back in each iteration
and use a cooldown time of 40 seconds between them. The
cooldown ensures that all devices in proximity have turned
off their AWDL interfaces again.
Experimental Results. Fig. 7 shows the number of discov-
ered AWDL devices in the different locations. By using the
USENIX Association
28th USENIX Security Symposium    43
AirportLibraryMetroUniversityLocation0255075100125CountAdvertisementsBruteForceStaticNoneGivenandFamily12.6%None24.1%OnlyFamily2.3%OnlyGiven61.0%GivenandFamilyNoneOnlyFamilyOnlyGivenbrute force approach, we can discover about twice as many de-
vices compared to sending only regular advertisements. This
means that in our experiments, approximately 50 % of the
Apple devices are in AirDrop’s everyone mode. Our survey
complements our experimental results by indicating that 20 %
of Apple device users have AirDrop turned off and, thus, are
not trackable via AWDL. It is interesting to note that we are
able to pick up AWDL devices even when not sending any
advertisements. This can happen if a device (not controlled
by us) sends out advertisements itself, for example, when a
user opens the AirDrop sharing pane which apparently oc-
curred regularly at the university location. Finally, we found
that among all discovered devices, more than 75 % contain
a person’s name in the hostname. Most devices contain only
a given name which is the default for freshly set up Apple
devices [3], some contain a combination of a given and family
name, and very few contain only a family name. Our survey
conﬁrms these results as 68 % answered that it was “easy”
or “very easy” for others to recognize their device because it
contained their name.
Outlook for Large-Scale Attack. In this analysis, we show
what kind of information a motivated attacker would be able
to collect. We used a single ﬁxed physical location for each
experiment and did not attempt to track any user movement.
However, given that we can receive unique identiﬁers of Ap-
ple devices (Wi-Fi MAC address and hostname), mounting
a large-scale tracking attack should be trivial for an adver-
sary that can deploy multiple low-cost Wi-Fi and BLE nodes
throughout an area.
5.4 Mitigation
We present a short-term solution and then propose two mit-
igation techniques that remove stable device identiﬁers to
prevent user tracking via AWDL.
Disable AirDrop. Until Apple ﬁxes the problem, the only
way to thwart user tracking is to disable AirDrop completely.
This presents a countermeasure to our attack presented in Sec-
tion 4, i. e., the AWDL interface cannot be remotely activated
via BLE advertisements.
Hide Real MAC Address When Not Connected to an AP.
When a device connects to an AP it uses its real MAC address
for communication, in which case AWDL does not disclose
new information. However, we have found that the MAC
address is occasionally included in AFs even when the device
is not connected to an AP. This appears to be unintended
behavior and should be ﬁxed via a software update.
Randomize Hostname for AWDL. Apple devices transmit
their hostname in AWDL AFs as well as the mDNS responses
during service discovery that are used to ﬁnd AirDrop in-
stances (see Section 3). As a countermeasure, we propose
to use randomized hostname with AWDL similar to MAC
address randomization. If an application such as AirDrop
needs the real hostname for identiﬁcation, it should only be
transmitted via an encrypted and authenticated channel such
as TLS. In fact, AirDrop already transmits the device name in
the HTTPS handshake and uses this name in the UI ignoring
the hostname from mDNS responses. Therefore, hostname
randomization would not require any changes to the AirDrop
implementation which would retain backward compatibility.
5.5 Related Work: User Tracking
Several related works have studied the topic of user tracking
from mobile devices. Some common attack vectors include us-
ing the GPS sensor [35, 48, 55, 83, 95], cellular [5, 44, 50, 67],
Wi-Fi [15, 40, 69, 96, 97], radio interface ﬁngerprinting [90],
and motion sensors [25, 39, 59, 61, 62]. We believe that the
above works are orthogonal to our approach, and could be
used in conjunction with our approach to improve tracking
performance. Many countermeasures have also been pro-
posed to prevent tracking from the above vectors. Some
of them include recommending new location frameworks
and privacy metrics [9, 28, 29, 30, 49, 64], location obfusca-
tion [1, 6, 18, 72, 92], location cloaking [42, 43], synthesizing
locations [16, 46, 53, 82, 98], sensor data obfuscation [22, 23],
and permission analysis [32, 45, 68]. Along with resource per-
missions on mobile devices, these countermeasures limit the
practicality of some of the above attacks.
Some device-speciﬁc identiﬁers have also been used for
tracking, e. g., IMEI [36, 93], BLE addresses [24, 31, 47], and
MAC addresses [21, 33, 54, 60]. While IMEI-based tracking
can be easily mitigated by protecting access to this infor-
mation, BLE is a dominant standard for ﬁtness trackers and
smartphone communication and their addresses must be ex-
posed. Tracking using BLE identiﬁers has been demonstrated
to be easy. However, our approach has the added beneﬁt for an
attacker that the hostname is exposed. This allows inferring
additional user information such as home and work locations,
family members, or movement patterns, which are useful for
more targeted tracking [34, 84]. Like BLE addresses, MAC
addresses are also essential as they form the backbone of layer
2 network communication and must be exposed for network-
ing (e. g., Wi-Fi probe requests).
MAC address randomization has been proposed to prevent
device tracking through Wi-Fi probe requests [11, 26]. Today,
both Apple and Google implement MAC address randomiza-
tion in their mobile operating systems. Randomization does
improve user privacy; however, some works have demon-
strated that devices are still trackable. For example, [89] im-
plemented an algorithm using probe request ﬁngerprinting
that has a 50 percent success rate for tracking users for 20
minutes. Another work [56] demonstrated that MAC random-
ization could be defeated through timing attacks, where a
signature based on inter-frame arrival times of probe requests
can be used to group frames coming from the same device
with distinct MAC addresses. Their framework could group
random MAC addresses of the same device up to 75% of
cases for about 500 devices. Our work advances the scalabil-
44    28th USENIX Security Symposium
USENIX Association
(a) In normal operation, two channel sequences result in non-zero
overlap, allowing two nodes to communicate. In this example, they
can communicate during four out of 16 EAWs.
(b) A phase shift of a quarter period (φ = τ/4) results in zero overlap
preventing the two nodes from communicating with each other.
Figure 9: Sketch of the desynchronization attack.
ity, tracking time and accuracy of the prior works. We show
that, owing to implementation nuances in the AWDL proto-
col, an adversary can track millions of Apple device owners
globally with 100 % accuracy.
6 DoS:
Impairing Communication with
Desynchronization
AWDL does not employ any security mechanisms. Instead,
Apple decided to leave security mechanisms to the upper lay-
ers. Thus, while end-to-end conﬁdentiality and integrity can
be achieved using a secure transport protocol such as TLS,
AWDL frames are vulnerable to forgery which renders any
upper layer using AWDL susceptible to attacks on availability.
In this section, we present a novel DoS attack that targets
AWDL’s synchronization mechanism (Section 2) to prevent
two nodes from communication with each other. In the fol-
lowing, we describe a novel desynchronization attack which
aims to minimize the channel sequence overlap of two targets.
Next, we evaluate the attack’s performance and present an
effective mitigation method. Finally, we discuss related work.
6.1 Desynchronizing Two Targets
We exploit AWDL’s synchronization mechanism to reduce
the channel overlap by inducing an artiﬁcial phase offset be-
tween two targets. In order to succeed, the attacker needs to
(1) get recognized as the master by both targets, (2) commu-
nicate with each target separately to (3) send different sets
of synchronization parameters that result in zero (or mini-
mal) channel overlap. Figure 9 depicts the non-zero overlap
in normal operation and the zero overlap as the result of the
desynchronization attack. We describe the three steps in the
following.
(1) Winning the Master Election. The master election in
AWDL is based on a numeric comparison of two values that
are transmitted in the election parameters. The ﬁrst value
Figure 10: Phase offset between two targets before and after
mounting a desynchronization attack which induces a phase
shift of φ = τ/4.
is called metric, and each node draws one randomly upon
initialization. The numeric range of the metric is bounded
and depends on the AWDL version that runs on the node [79].
The second value is called counter which is initialized to a
random value and increases linearly over time while the node
is elected as a master. Given the metric and counter values
of two nodes A and B as (mA,cA) and (mB,cB), respectively,
then, A wins the master election if
cA > cB ∨ (cA = cB ∧ mA > mB)
(15)
and loses otherwise. To consistently win the election, the
attacker sets c and m to their maximum values.
(2) Unicasting AFs. The attacker needs to send the synchro-
nization parameters to each target without the other one notic-
ing. We have found that while AFs are typically sent to the
broadcast MAC address ff:ff:ff:ff:ff:ff, AWDL nodes
also accept unicast AFs. Therefore, the attacker can unicast
their AFs to make sure that only the intended target receives
them.
(3) Phase Shift: Different Synchronization Parameters.
To desynchronize two targets, the attacker needs to send in-
compatible synchronization parameters that will result in a
controllable offset. We explain how the attacker calculates the
relevant parameters i and tAW for both targets. Let us assume
that the attack starts at some time Ts. An AF sent to the ﬁrst
target at some time TTx with t =
(in TU) will include
the following parameters:
(cid:107)
mod 216
and,
(16)
(17)
(cid:106) TTx−Ts−φ