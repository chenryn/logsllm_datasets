0.16s, with only 2,310 probes. With SafeHidden deployed,
all probes are captured before succeeding. Figure 6 (b)
shows the distribution of the number of probes before be-
ing captured. The distribution is concentrated in the range
between [50, 300], which is much lower than those in the
second experiment. There are two reasons for that: 1) The
other threads’ local safe areas become the current thread’s
shielded areas, which increases the probability of the probes
being captured; 2) All safe areas will be randomized after
each probe, which increases the number of trap areas quickly.
In the fourth experiment, we emulated a cache side-
channel attack against page tables using Revanc [54], which
is a tool based on [46]. This tool allocates a memory buffer
and then measures the access time of different pages in this
buffer repeatedly.
It could infer the base address of this
buffer. To utilize this attack method against IH, we kept this
memory buffer in a safe area by modifying the source code
to force any access to this memory buffer through an offset
from the %gs register. When SafeHidden is not deployed,
this attack can obtain the correct base address of this buffer.
The attack fails when SafeHidden is deployed.
6.2 Performance Evaluation
We evaluated SafeHidden’s impact on the application’s per-
formance in terms of CPU computation, network I/O, and
disk I/O, respectively. For the experiment of CPU compu-
tation, we ran SPEC CPU2006 benchmarks with ref input
and multi-threaded Parsec-2.1 benchmarks using native in-
put with 8 threads; For the experiment of network I/O, We
chose the Apache web server httpd-2.4.38 and Nginx-1.14.2
web server. Apache was conﬁgured to work in mpm-worker
mode, running in one worker process with 8 threads. Ng-
inx was conﬁgured to work with 4 worker processes; For
the experiment of disk I/O, we chose benchmark tool Bon-
nie++ (version 1.03e). For each benchmark, we prepared
two versions of the benchmark: (1) protected by SS, and (2)
protected by OCFI. We evaluated both the performance over-
head of protecting these benchmarks using SS and OCFI de-
fenses and the additional overhead of deploying SafeHidden
to enhance the SS and OCFI defenses.
6.2.1 CPU Intensive Performance Evaluation
Figure 7 shows the performance overhead of the OCFI and
SS defenses, and also the performance overhead of SafeHid-
den when applied to enhance the OCFI and SS defenses. For
SPEC benchmarks, we can see that the geometric mean per-
formance overhead incurred by OCFI and SS is 4.94% and
5.79%, respectively. For Parsec benchmarks, the geomet-
ric mean performance overhead incurred by OCFI and SS is
7.23% and 6.24%. The overhead of some applications (e.g.,
perlbench, povray, Xalancbmk and blacksholes) is higher be-
cause these applications frequently execute direct function
calls and indirect control transfer instructions, which trigger
accesses to safe areas. Note these overheads were caused by
1250    28th USENIX Security Symposium
USENIX Association
Program
#randomization
OCFI
SS
Details of #randomization
#brk()
#mmap()
#tlb miss
SS
OCFI
Program
#randomization
OCFI
SS
Details of #randomization
#brk()
#mmap()
#tlb miss
SS
OCFI
100
194
45
30
11
44
10
36
66
27
31
594
53
49
3,124
143,540
11
135
435,623
683,057
95
207
2,821
28
343
9,409
12,957
168,246
4,816
148,649
764
311
424,266
576,056
425
134
11,826
94
630
64,491
53,618
186,807
SPEC CPU2006 benchmark
3,260
bzip2
150,550
gcc
757
bwaves
192
gamess
435,637
mcf
685,788
milc
108
zeusmp
287
gromacs
11,884
cactusADM
60
leslie3d
474
namd
10,062
gobmk
53,113
dealII
168,463
soplex
Parsec-2.1 benchmark
175,562
156,968
blackscholes
1,842
11,205
bodytrack
7,851
41,775
facesim
245,297
ferret
93,815
31,345
3,729
freqmine
raytrace
219,542
27,510
67,048
swaptions
6,477
Table 3: Statistical data of SafeHidden when applied to the SS and OCFI defenses to protect SPEC CPU2006 and Parsec-2.1 benchmarks.
calculix
hmmer
sjeng
GemsFDTD
libquantum
h264ref
tonto
lbm
omnetpp
astar
wrf
sphinx3
xalancbmk
average
40,914
2,851
207,559
184
373,904
6,650
327
6,110
320,474
872,397
53,018
3,572
921,406
151,131
4,680
141,639
18
254
424,252
573,325
412
54
2,763
62
499
63,838
13,462
186,590
114,350
1,382
22,385
23,616
1,823
21,523
5,102
8,680
2,813
207,546
13
373,851
6,045
9
6,096
319,173
868,423
52,346
3,282
918,213
147,268
168,642
2,256
5,564
238,728
56,582
273,654
79,710
37,319
2,430
196,562
205
201,652
2,496
335
5,822
223,832
667,817
49,230
2,790
781,973
129,452
175,816
1,961
8,055
251,238
33,631
219,572
71,625
36
6,816
701
27
3
2,687
3
44
8,997
5
100
59
40,103
168
3
2,486
359
222
499
1,279
3
32,095
13
3
11
14
545
298
3
1,245
3,928
419
144
3,099
3,778
231
4
42
5,917
1,571
7
971
ﬂuidanimate
vips
x264