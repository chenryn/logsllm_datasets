certain sources (e.g. Tag_InputSrc) in our SDS, so that implicit
intra-split data-ﬂows can be considered during analysis. On the
other hand, control dependency analysis can also easily bring false
positives. The study of this trade-off is out of the scope of this
paper.
7. RELATED WORK
Event-driven (callback-based) programming is widely used in
implementing graphical user interface (GUI) and web systems. To
statically analyze GUI systems, previous work [30, 31] leverage
on domain knowledge to identify and to conﬁgure the entry point
(callback) methods. In web systems, event handler functions are
easy to identify given the uniform ways to deﬁne them. However,
in Android, the large number of entry point types makes it difﬁcult
to identify them completely—previous work relied on speciﬁc do-
main knowledge to detect common component entry points without
guarantee for completeness [21]. We devise a heuristic-based ap-
proach to discover all possible entry points to the apps with low
false positives. To model the execution of multiple entry points,
previous work [30, 31] employ a synthetic main function to mimic
Vulnerability Class Hijacking Type Case-Studied Vulnerable App Data Theft G1/G3 (Read Write) [Case A1] de.cellular.xxx: Sending GPS data to URL speciﬁed by input string Capability Leak G2 (Write) [Case B1] com.appspot.xxx: Input string used as URL for Internet connection [Case B2] com.gmail.xxx: Input string used as hostname for socket connection Intent Proxy G1/G2 (Read Write) [Case C1] com.outﬁt7.xxx: Object embedded in input used to start Activity Code Injection G2 (Write) [Case D1] com.utagoe.xxx: Input string used for raw SQL query statement [Case D2] cn.myprivate.xxx: Input string used as shell command Data tampering G2 (Write) [Case E1] com.akbur.xxx: Input string submitted to server as game score    238the event loop dispatcher in GUI systems. We introduce SDS to
summarize intra-split data-ﬂows and permute the splits to model
their asynchronous invocations and derive the inter-split data-ﬂow
behaviors. Comparing with [30, 31], we divided the global data-
ﬂow analysis problem into much smaller but self-contained sub-
problems, which improves the performance and scalability.
Static analysis and model checking have a history in assisting
vulnerability discoveries [9, 18, 26, 28]. For web systems, Jo-
vanovic et al. designed Pixy [26] to detect input validation ﬂaws
in server side scripts written in PHP through an inter-procedural
context-sensitive data ﬂow analysis. A similar study has been car-
ried for cross site scripting vulnerabilities [33]. Bandhakavi et al.
applied a context-sensitive and ﬂow-sensitive static analysis for an-
alyzing the security vulnerabilities of Firefox plugins written in
JavaScripts [7]. For Java programs, Livshits et al. designed a dat-
alog language to describe the security policies that direct vulnera-
bility detection [28]. Tripp et al. built an industrial strength static
taint analysis tool [32]. Comparing with the aforementioned ef-
forts, we focused on detecting component hijacking vulnerabilities
in Android apps. We ﬁrst tackled general challenges faced by static
app analyzers due to Android’s special programming paradigm, and
then proposed a data-ﬂow-based detection approach.
Security mechanism based on information ﬂows, such as JIF [29],
HiStar [34] and Asbestos [13], are also related in that our work de-
ﬁne and detect component hijacking by means of data-ﬂow poli-
cies, despite that we do not enforce the policies in runtime.
Mobile security issues have gained much attention recently. Mal-
ware are not strangers for both the ofﬁcial Android market and
alternative ones [36]. Research efforts were made on detect-
ing repackaged apps [35] or apps with known malicious behav-
ior [21, 37]. Recently Google also launched its malware ﬁltering
engine [1]. Information leakage is another major security threat for
mobile devices. Kirin [17] detects apps whose permissions might
indicate potential leakage. TaintDroid [15] leverages dynamic taint
analysis to detect information leakage at runtime. PiOS [14] ad-
dressed the same problem using static analysis for iPhone app.
In general, information leakage detection reveals the potential out
bound propagation of sensitive information, which might be benign
in many cases. Instead, component hijacking detection captures the
information leakages resulted from an exploitation (i.e. sensitive
data theft), in addition to other hijacking types.
Enck et al. introduced Ded [16] to convert Dalvik bytecode back
to Java bytecode, and then used existing decompilers to obtain the
source code of the apps for analysis. Our Dalysis framework di-
rectly converts Dalvik byte code to an SSA IR and enables var-
ious types of static analysis. Unlike the decompilation process,
our IR conversion is sound (e.g. no heuristics or failures) and costs
much less time. We model the Android framework and its special
program paradigm rather than coarsely treating apps as traditional
Java programs. As a result, our analysis is more tailored for An-
droid apps and thus has better precision.
Android mediates access to protected resources using a permis-
sion system. However, its effectiveness hinges on app developers
correctly implementing it. Chin et al. showed that apps may be
exploitable when servicing external intents [10]. They built Com-
Droid to identify publicly exported components and warn devel-
opers about the potential threats. For this purpose, it is sufﬁcient
for ComDroid to only check app metadata and speciﬁc API usages,
rather than performing an in-depth program analysis as CHEX does.
As a result, warned public components are not necessarily ex-
ploitable or harmful (i.e. the openness can be by design or the com-
ponent is not security critical). On the other hand, Android permis-
sion system is subject to several instances of the classic confused
deputy attack [23]. As demonstrated by [11, 20, 21, 27], an un-
privileged malicious app can access permission-protected resources
through privileged agents (or app components) that do not properly
enforce permission checks. Recently proposed runtime mitigations
either reduce the agent’s effective permissions to that of the origi-
nal requestor [20] or inspect the IPC chains for implicit permission
escalations [8, 12]. While these runtime solutions are effective at
protecting end users adopting them, scalable detection methods for
the problematic agents in question (i.e. hijack-able components)
are still important to have in order to prevent vulnerable apps from
reaching the vast users in the ﬁrst place. Grace et al. [21] employed
an intra-procedural path-sensitive static analysis to discover per-
mission leaks speciﬁc to stock apps from multiple device vendors.
In comparison, CHEX targets at a more general vulnerability in all
types of Android apps and performs inter-procedural analysis with
high degrees of sensitivity. Thanks to our novel entry point discov-
ery and app-splitting techniques, CHEX is capable of accommodat-
ing Android’s special programming paradigm and ﬁnding complex
hijack-enabling ﬂows.
It is also noteworthy that the component
hijacking attacks we address includes but is not limited to attacks
targeting at permission-protected resources.
8. CONCLUSIONS
In conclusion, we deﬁned and studied the component hijacking
problem, a general category of vulnerabilities found in Android
apps. By modeling the vulnerabilities from a data-ﬂow perspec-
tive, we designed a static analyzer, CHEX, to detect hijack-enabling
data-ﬂows in a large volume of apps. In doing so, we introduced
our method to automatically discover entry points in Android app,
as well as the novel analysis technique, app splitting, as an efﬁcient
and accurate way to model executions of multiple entry points and
facilitate global data-ﬂow analysis. We also built the Dalysis frame-
work to support various types of static analysis directly performed
on Android bytecode. CHEX prototype was implemented based on
Dalysis and was evaluated with 5,486 real-world apps. The empir-
ical experiment demonstrated a satisfactory scalability and perfor-
mance of our analysis method, as well as provided an insight into
the real-world vulnerable apps we detected.
9. ACKNOLEDGEMENT
The authors would like to thank the anonymous reviewers for
helpful comments on earlier versions of the paper. We thank
Ahmad-Reza Sadeghi for the thoughtful feedback that guided the
paper’s ﬁnal revisions. Wenke Lee and Long Lu were partially
supported by the National Science Foundation under grant no.
0831300, the Department of Homeland Security under contract no.
FA8750-08-2-0141, the Ofﬁce of Naval Research under grants no.
N000140710907 and no. N000140911042. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views of the
National Science Foundation, the Department of Homeland Secu-
rity, or the Ofﬁce of Naval Research.
10. REFERENCES
[1] Android and security.
http://googlemobile.blogspot.com/2012/
02/android-and-security.html.
[2] Baksmali: a disassembler for Android’s dex format.
http://code.google.com/p/smali/.
239[3] Google’s 10 billion android app downloads.
www.wired.com/gadgetlab/2011/12/
10-billion-apps-detailed/.
[4] Quality of Android market apps is pathetically low.
http://www.huffingtonpost.com/2011/06/
20/android-market-quality_n_880478.html.
[5] WALA: T.J. Watson libraries for analysis.
http://wala.sourceforge.netl.
[6] Android application components.
http://developer.android.com/guide/
topics/fundamentals.html#Components, 2012.
[7] BANDHAKAVI, S., KING, S. T., MADHUSUDAN, P., AND
WINSLETT, M. Vex: vetting browser extensions for security
vulnerabilities. In Proceedings of the 19th USENIX Security
Symposium (2010).
[8] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T.,
AND SADEGHI, A.-R. Xmandroid: A new android evolution
to mitigate privilege escalation attacks. Tech. Rep.
TR-2011-04, Technische Universitat Darmstadt, 2011.
[9] CHEN, H., AND WAGNER, D. Mops: an infrastructure for
examining security properties of software. In Proceedings of
the 9th ACM CCS (2002).
[10] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER,
D. Analyzing inter-application communication in android. In
Proceedings of the 9th MobiSys (2011).
[11] DAVI, L., DMITRIENKO, A., SADEGHI, A.-R., AND
WINANDY, M. Privilege escalation attacks on android. In
Proceedings of the 13th ISC (2010).
[12] DIETZ, M., SHEKHAR, S., PISETSKY, Y., SHU, A., AND
WALLACH, D. S. Quire: Lightweight provenance for smart
phone operating systems. In Proceedings of the 20th
USENIX Security Symposium (2011).
[13] EFSTATHOPOULOS, P., KROHN, M., VANDEBOGART, S.,
FREY, C., ZIEGLER, D., KOHLER, E., MAZIÈRES, D.,
KAASHOEK, F., AND MORRIS, R. Labels and event
processes in the asbestos operating system. In Proceedings of
the 20th ACM SOSP (2005).
[14] EGELE, M., KRUEGEL, C., KIRDA, E., AND VIGNA, G.
Pios: Detecting privacy leaks in ios applications. In
Proceedings of the 19th NDSS (2011).
[15] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG,
J., MCDANIEL, P., AND SHETH, A. N. Taintdroid: an
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. In Proceedings of the 9th
USENIX OSDI (2010).
[16] ENCK, W., OCTEAU, D., MCDANIEL, P., AND
CHAUDHURI, S. A study of android application security. In
Proceedings of the 20th USENIX Security Symposium
(2011).
[17] ENCK, W., ONGTANG, M., AND MCDANIEL, P. On
lightweight mobile phone application certiﬁcation. In
Proceedings of the 16th ACM CCS (2009).
[18] FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND
VIGNA, G. Toward automated detection of logic
vulnerabilities in web applications. In Proceedings of the
19th USENIX Security Symposium (2010).
[19] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND
WAGNER, D. Android permissions demystiﬁed. In
Proceedings of the 18th ACM CCS (2011).
[20] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S.,
AND CHIN, E. Permission re-delegation: attacks and
defenses. In Proceedings of the 20th USENIX Security
Symposium (2011).
[21] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X.
Systematic detection of capability leaks in stock Android
smartphones. In Proceedings of the 19th NDSS (2012).
[22] GUNDOTRA, V., AND BARRA, H. Android: Momentum,
mobile and more at Google I/O.
http://www.google.com/events/io/2011/.
[23] HARDY, N. The confused deputy: (or why capabilities might
have been invented). SIGOPS Oper. Syst. Rev. 22, 4 (1988),
36–38.
[24] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND
WETHERALL, D. These aren’t the droids you’re looking for:
retroﬁtting android to protect data from imperious
applications. In Proceedings of the 18th ACM CCS (2011).
[25] HORWITZ, S., REPS, T., AND BINKLEY, D. Interprocedural
slicing using dependence graphs. SIGPLAN Not. 23, 7
(1988), 35–46.
[26] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A
static analysis tool for detecting web application
vulnerabilities (short paper). In Proceedings of the IEEE
S&P’06 (2006).
[27] LINEBERRY, A., RICHARDSON, D. L., AND WYATT, T.
These aren’t permissions you’re looking for. In Proceedings
of the Blackhat’10 (2010).
[28] LIVSHITS, V. B., AND LAM, M. S. Finding security
vulnerabilities in java applications with static analysis. In
Proceedings of the 14th USENIX Security Symposium
(2005).
[29] MYERS, A. C. Jﬂow: practical mostly-static information
ﬂow control. In Proceedings of the 26th ACM POPL (1999).
[30] STAIGER, S. Reverse engineering of graphical user
interfaces using static analyses. In Proceedings of the 14th
IEEE WCRE (2007).
[31] STAIGER, S. Static analysis of programs with graphical user
interface. In Proceedings of the 11th IEEE CSMR (2007).
[32] TRIPP, O., PISTOIA, M., FINK, S. J., SRIDHARAN, M.,
AND WEISMAN, O. TAJ: effective taint analysis of web
applications. In Proceedings of the ACM PLDI ’09 (2009).
[33] WASSERMANN, G., AND SU, Z. Static detection of
cross-site scripting vulnerabilities. In Proceedings of the 30th
ACM ICSE (2008).
[34] ZELDOVICH, N., BOYD-WICKIZER, S., KOHLER, E., AND
MAZIÈRES, D. Making information ﬂow explicit in histar. In
Proceedings of the 7th USENIX OSDI (2006).
[35] ZHOU, W., ZHOU, Y., JIANG, X., AND NING, P.
DroidMOSS: Detecting repackaged smartphone applications
in third-party android. In Proceedings of ACM CODASPY’12
(2012).
[36] ZHOU, Y., AND JIANG, X. Dissecting android malware:
Characterization and evolution. In Proceedings of the IEEE
Symposium on S&P’12 (2012).
[37] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey,
you, get off of my market: Detecting malicious apps in
ofﬁcial and alternative android markets. In Proceedings of
the 20th NDSS (2012).
240