tablename | public.vac
dead_tup | 0
max_dead_tup | 50
ins_tup | 1000
max_ins_tup | 1000
last_autovacuum |
133
Chapter6 VacuumandAutovacuum
The actual threshold value is max_dead_tup = 50, although the formula listed
abovesuggeststhatitshouldbe50+0.2×1000=250.Thethingisthatstatistics
onthistablearenotavailableyetsincethecommanddoesnotupdateit:
=> SELECT reltuples FROM pg_class WHERE relname = 'vac';
reltuples
−−−−−−−−−−−
−1
(1 row)
v. The pg_class.reltuples value is set to −1; this special constant is used instead of
zerotodifferentiatebetweenatablewithoutanystatisticsandareallyemptytable
thathasalreadybeenanalyzed.Forthepurposeofcalculation,thenegativevalue
istakenaszero,whichgivesus50+0.2×0=50.
Thevalueofmax_ins_tup = 1000differsfromtheprojectedvalueof,forthe
samereason.
Let’shavealookattheanalysisview:
=> SELECT * FROM need_analyze WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−−+−−−−−−−−−−−
tablename | public.vac
mod_tup | 1006
max_mod_tup | 50
last_autoanalyze |
We have updated (inserted in this case) , rows; as a result, the threshold is
exceeded: sincethetablesizeisunknown,itiscurrentlysetto. Itmeansthat
autoanalysiswillbetriggeredimmediatelywhenweturniton:
=> ALTER TABLE vac SET (autovacuum_enabled = on);
Oncethetableanalysiscompletes,thethresholdisresettoanadequatevalueof
rows.
=> SELECT reltuples FROM pg_class WHERE relname = 'vac';
reltuples
−−−−−−−−−−−
1000
(1 row)
134
6.5 AutomaticVacuumandAnalysis
=> SELECT * FROM need_analyze WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
tablename | public.vac
mod_tup | 0
max_mod_tup | 150
last_autoanalyze | 2022−11−25 22:57:44.714517+03
Let’sgetbacktoautovacuum:
=> SELECT * FROM need_vacuum WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−+−−−−−−−−−−−
tablename | public.vac
dead_tup | 0
max_dead_tup | 250
ins_tup | 1000
max_ins_tup | 1200
last_autovacuum |
The max_dead_tup and max_ins_tup values have also been updated based on the
actualtablesizediscoveredbytheanalysis.
Vacuumingwillbestartedifatleastoneofthefollowingconditionsismet:
• Morethandeadtuplesareaccumulated.
• Morethanrowsareinsertedintothetable. v.
Let’sturnoffautovacuumagainandupdaterowssothatthethresholdvalue
isexceededbyone:
=> ALTER TABLE vac SET (autovacuum_enabled = off);
=> UPDATE vac SET s = 'B' WHERE id  SELECT * FROM need_vacuum WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−+−−−−−−−−−−−
tablename | public.vac
dead_tup | 251
max_dead_tup | 250
ins_tup | 1000
max_ins_tup | 1200
last_autovacuum |
Nowthetriggerconditionissatisfied. Let’senableautovacuum;afterawhile,we
willseethatthetablehasbeenprocessed,anditsusagestatisticshasbeenreset:
135
Chapter6 VacuumandAutovacuum
=> ALTER TABLE vac SET (autovacuum_enabled = on);
=> SELECT * FROM need_vacuum WHERE tablename = 'public.vac' \gx
−[ RECORD 1 ]−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
tablename | public.vac
dead_tup | 0
max_dead_tup | 250
ins_tup | 0
max_ins_tup | 1200
last_autovacuum | 2022−11−25 22:57:51.025012+03
6.6 Managing the Load
Operatingatthepagelevel,vacuumingdoesnotblockotherprocesses;butnever-
theless,it increases the system load and can have a noticeable impact on perfor-
mance.
VacuumThrottling
To control vacuuming intensity, Postgre makes regular pauses in table pro-
200 cessing. Aftercompletingaboutvacuum_cost_limitunitsofwork,theprocessfalls
0 asleepandremainsidleforthevacuum_cost_delaytimeinterval.
Thedefaultzerovalueofvacuum_cost_delay meansthatroutinevacuumingactu-
ally never sleeps,so the exact vacuum_cost_limit value makes no difference. It is
assumedthatifadministratorshavetoresorttomanualvacuuming,theyarelikely
toexpectitscompletionassoonaspossible.
If the sleep time is set, then the process will pause each time it has spent vac-
p. uum_cost_limit units of work on page processing in the buffer cache. The cost of
1 eachpagereadisestimatedatvacuum_cost_page_hit unitsifthepageisfoundin
2 thebuffercache,orvacuum_cost_page_missunitsotherwise.1 Ifacleanpageisdirt-
20 iedbyvacuum,itaddsanothervacuum_cost_page_dirtyunits.2
1 backend/storage/buffer/bufmgr.c,ReadBuffer_commonfunction
2 backend/storage/buffer/bufmgr.c,MarkBufferDirtyfunction
136
6.6 ManagingtheLoad
Ifyoukeepthedefaultvalueofthevacuum_cost_limit parameter,canpro-
cessuptopagespercycleinthebest-casescenario(ifallthepagesarecached,
andnopagesaredirtiedby)andonlyninepagesintheworstcase(ifallthe
pagesarereadfromdiskandbecomedirty).
AutovacuumThrottling
Throttling for autovacuum1 is quite similar to throttling. However,auto-
vacuumcanberunwithadifferentintensityasithasitsownsetofparameters:
• autovacuum_vacuum_cost_limit −1
• autovacuum_vacuum_cost_delay 2ms
Ifanyoftheseparametersissetto−1,itfallsbackonthecorrespondingparameter
for regular. Thus,the autovacuum_vacuum_cost_limit parameter relies on
thevacuum_cost_limitvaluebydefault.
Priortoversion,thedefaultvalueofautovacuum_vacuum_cost_delay wasms,andit
ledtoverypoorperformanceonmodernhardware.
Autovacuumworkunitsarelimitedtoautovacuum_vacuum_cost_limitpercycle,and
sincetheyaresharedbetweenalltheworkers,theoverallimpactonthesystemre-
mainsroughlythesame,regardlessoftheirnumber.Soifyouneedtospeedupau-
tovacuum, both the autovacuum_max_workers and autovacuum_vacuum_cost_limit
valuesshouldbeincreasedproportionally.
Ifrequired,youcanoverridethesesettingsforparticulartablesbysettingthefol-
lowingstorageparameters:
• autovacuum_vacuum_cost_delayandtoast.autovacuum_vacuum_cost_delay
• autovacuum_vacuum_cost_limitandtoast.autovacuum_vacuum_cost_limit
1 backend/postmaster/autovacuum.c,autovac_balance_costfunction
137
Chapter6 VacuumandAutovacuum
6.7 Monitoring
Ifvacuumingismonitored,youcandetectsituationswhendeadtuplescannotbe
removed in one go, as references to them do not fit the maintenance_work_mem
memorychunk. Inthiscase,alltheindexeswillhavetobefullyscannedseveral
times. It can take a substantial amount of time for large tables, thus creating a
significantloadonthesystem. Eventhoughquerieswillnotbeblocked,extra/
operationscanseriouslylimitsystemthroughput.
Such issues can be corrected either by vacuuming the table more often (so that
eachruncleansupfewertuples)orbyallocatingmorememory.
MonitoringVacuum
Whenrunwiththeclause,thecommandperformsthecleanupand
v.. displays the status report, whereas the pg_stat_progress_vacuum view shows the
currentstateofthestartedprocess.
v. Thereisalsoasimilarviewforanalysis(pg_stat_progress_analyze),eventhoughit
isusuallyperformedveryfastandisunlikelytocauseanyissues.
Let’sinsertmorerowsintothetableandupdatethemallsothathastorun
foranoticeableperiodoftime:
=> TRUNCATE vac;
=> INSERT INTO vac(id,s)
SELECT id, 'A' FROM generate_series(1,500000) id;
=> UPDATE vac SET s = 'B';
Forthepurposeofthisdemonstration,wewilllimittheamountofmemoryallo-
catedforthetidarrayby:
=> ALTER SYSTEM SET maintenance_work_mem = '1MB';
=> SELECT pg_reload_conf();
Launchthecommandandquerythepg_stat_progress_vacuumviewseveral
timeswhileitisrunning:
138
6.7 Monitoring
=> VACUUM VERBOSE vac;
=> SELECT * FROM pg_stat_progress_vacuum \gx
−[ RECORD 1 ]−−−−−−+−−−−−−−−−−−−−−−−−−
pid | 14654
datid | 16391
datname | internals
relid | 16479
phase | vacuuming indexes
heap_blks_total | 17242
heap_blks_scanned | 3009
heap_blks_vacuumed | 0
index_vacuum_count | 0
max_dead_tuples | 174761
num_dead_tuples | 174522
=> SELECT * FROM pg_stat_progress_vacuum \gx
−[ RECORD 1 ]−−−−−−+−−−−−−−−−−−−−−−−−−
pid | 14654
datid | 16391
datname | internals
relid | 16479
phase | vacuuming indexes
heap_blks_total | 17242
heap_blks_scanned | 17242
heap_blks_vacuumed | 6017
index_vacuum_count | 2
max_dead_tuples | 174761
num_dead_tuples | 150956
Inparticular,thisviewshows:
• phase—thenameofthecurrentvacuumphase(Ihavedescribedthemainones,
butthereareactuallymoreofthem1)
• heap_blks_total—thetotalnumberofpagesinatable
• heap_blks_scanned—thenumberofscannedpages
• heap_blks_vacuumed—thenumberofvacuumedpages
• index_vacuum_count—thenumberofindexscans
1 postgresql.org/docs/14/progress-reporting.html#VACUUM-PHASES
139
Chapter6 VacuumandAutovacuum
Theoverallvacuumingprogressisdefinedbytheratioofheap_blks_vacuumedto
heap_blks_total,butyouhavetokeepinmindthatitchangesinspurtsbecauseof
indexscans.Infact,itismoreimportanttopayattentiontothenumberofvacuum
cycles: ifthisvalueisgreaterthanone,itmeansthattheallocatedmemorywas
notenoughtocompletevacuuminginonego.
Youcanseethewholepictureintheoutputofthecommand,which
hasalreadyfinishedbythistime:
INFO: vacuuming "public.vac"
INFO: scanned index "vac_s" to remove 174522 row versions index
DETAIL: CPU: user: 0.02 s, system: 0.00 s, elapsed: 0.05 s vacuum
INFO: table "vac": removed 174522 dead item identifiers in
table
3009 pages
vacuum
DETAIL: CPU: user: 0.01 s, system: 0.00 s, elapsed: 0.06 s
INFO: scanned index "vac_s" to remove 174522 row versions index
DETAIL: CPU: user: 0.02 s, system: 0.00 s, elapsed: 0.05 s vacuum
INFO: table "vac": removed 174522 dead item identifiers in
table
3009 pages
vacuum
DETAIL: CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s
INFO: scanned index "vac_s" to remove 150956 row versions index
DETAIL: CPU: user: 0.02 s, system: 0.00 s, elapsed: 0.07 s vacuum
INFO: table "vac": removed 150956 dead item identifiers in
table
2603 pages
vacuum
DETAIL: CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s
INFO: index "vac_s" now contains 500000 row versions in
932 pages
DETAIL: 500000 index row versions were removed.
433 index pages were newly deleted.
433 index pages are currently deleted, of which 0 are
currently reusable.
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.
INFO: table "vac": found 500000 removable, 500000
nonremovable row versions in 17242 out of 17242 pages
DETAIL: 0 dead row versions cannot be removed yet, oldest
xmin: 851
Skipped 0 pages due to buffer pins, 0 frozen pages.
CPU: user: 0.20 s, system: 0.01 s, elapsed: 0.47 s.
VACUUM
All in all, there have been three index scans; each scan has removed ,
pointers to dead tuples at the most. This value is defined by the number of
tid pointers (each of them takes  bytes) that can fit into an array of the main-
140
6.7 Monitoring
tenance_work_mem size. The maximum size possible is shown by pg_stat_prog-
ress_vacuum.max_dead_tuples,buttheactuallyusedspaceisalwaysabitsmaller.It
guaranteesthatwhenthenextpageisread,allitspointerstodeadtuples,nomat-
terhowmanyofthemarelocatedinthispage,willfitintotheremainingmemory.
MonitoringAutovacuum
The main approach to monitoring autovacuum is to print its status information
(which is similar to the output of the   command) into the server
log for further analysis. If the log_autovacuum_min_duration parameter is set to −1
zero,allautovacuumrunsarelogged:
=> ALTER SYSTEM SET log_autovacuum_min_duration = 0;
=> SELECT pg_reload_conf();
=> UPDATE vac SET s = 'C';
UPDATE 500000
postgres$ tail -n 13 /home/postgres/logfile
2022−11−25 22:58:12.754 MSK [17505] LOG: automatic vacuum of table
"internals.public.vac": index scans: 3
pages: 0 removed, 17242 remain, 0 skipped due to pins, 0
skipped frozen
tuples: 500000 removed, 500000 remain, 0 are dead but not
yet removable, oldest xmin: 853
index scan needed: 8622 pages from table (50.01% of total)
had 500000 dead item identifiers removed
index "vac_s": pages: 1428 in total, 496 newly deleted, 929
currently deleted, 433 reusable
avg read rate: 13.152 MB/s, avg write rate: 17.475 MB/s
buffer usage: 45852 hits, 5855 misses, 7780 dirtied
WAL usage: 41366 records, 15059 full page images, 96970827
bytes
system usage: CPU: user: 0.27 s, system: 0.20 s, elapsed:
3.47 s
2022−11−25 22:58:13.146 MSK [17505] LOG: automatic analyze of table
"internals.public.vac"
avg read rate: 40.765 MB/s, avg write rate: 0.020 MB/s
buffer usage: 15353 hits, 2035 misses, 1 dirtied
system usage: CPU: user: 0.10 s, system: 0.00 s, elapsed:
0.38 s
141
Chapter6 VacuumandAutovacuum
To track the list of tables that have to be vacuumed and analyzed, you can use
theneed_vacuumandneed_analyzeviews,whichwehavealreadyreviewed. Ifthis
list grows, it means that autovacuum does not cope with the load and has to be
spedupbyeitherreducingthegap(autovacuum_vacuum_cost_delay)orincreasing
theamountofworkdonebetweenthegaps(autovacuum_vacuum_cost_limit). Itis
notunlikelythatthedegreeofparallelismwillalsohavetobeincreased(autovac-
uum_max_workers).
142
7
Freezing
7.1 Transaction ID Wraparound
InPostgre,atransactiontakesbits. Fourbillionsseemstobequiteabig
number,butitcanbeexhaustedveryfastifthesystemisbeingactivelyused. For