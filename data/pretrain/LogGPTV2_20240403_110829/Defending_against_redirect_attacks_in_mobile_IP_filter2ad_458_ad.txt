COOKIE0 = {HoA, CN, C0} 
to CN. In reply, CN creates a nonce n1 and a cookie C1, and sends 
COOKIE1 = {CN, HoA, C0, C1, n1} 
to  MN.  Note  that  the  destination  address  in  COOKIE1  is  MN’s 
home address HoA. As a result, this message is delivered to MN’s 
home link and intercepted by HA using IPv6 Neighbor Discovery. 
After  receiving  COOKIE1,  HA  checks  on  the  validity  of  C0, 
generates  a  nonce  n2  and  a  Diffie-Hellman  secret  value  x  <  p, 
computes its Diffie-Hellman public value gx and its signature 
SIGH = SH(HoA|CN|gx| n1| n2|TS) 
using home link’s private key SH, where TS is a time stamp. This 
time  stamp  does  not  have  to  be checked by the recipient during 
the  message  exchange.  It  will  be  used  to  trace  back  the  culprit 
should  a  malicious  mobile  node  flooding  attack  have  occurred. 
This point will be made clearer later.  Finally, HA replies CN with 
EXCH0 = {HoA, CN, C0, C1, n1, n2, gx, TS, SIGH, CertH}, 
where CertH = {HL, PH, VI, SIGCA} is the public key certificate of 
the home link as defined before. Note that the values of n1 and n2 
are included in the signature SIGH in order to counter reply of old 
signatures  and  to  resist  chosen  message  attacks  to  the  signature 
scheme, respectively. 
When  CN  receives  EXCH0,  it  validates  the  cookies,  the  home 
link’s public key certificate CertH, the signature and importantly, 
checks  for  equality  of  the  home  link  subnet  prefix  strings 
embedded  in  both  CertH  and  HoA.  If  all  the  validations  and 
checking are positive, CN can be confident that the home address 
HoA of MN is authorized by its home link and the Diffie-Hellman 
public vaule gx is freshly generated by MN’s home link. CN next 
generates its Diffie-Hellman secret value y < p. It then computes 
its Diffie-Hellman public value gy, the Diffie-Hellman  key kDH = 
(gx)y, a session key 
kBU = prf(kDH, n1|n2) 
MAC1 = prf(kBU, gy|EXCH0), 
and a MAC 
and sends 
EXCH1 = {CN, HoA, C0, C1, gy, MAC1} 
to  MN.  Again,  this  message  is  intercepted  by  HA,  which  first 
validates  the  cookies,  calculates  the  Diffie-Hellman  key  kDH  = 
(gy)x and the session key kBU = prf(kDH, n1|n2). HA then computes 
MAC2 = prf(kBU, EXCH1), 
and sends 
CONFIRM  = {HoA, CN, MAC2} 
to CN.  The validity of MAC2 is checked by CN and if it is valid, 
CN creates a cache entry for HoA and the session key kBU, which 
will be used for authenticating binding update messages from MN. 
Upon positive verification of MAC1, HA also sends 
REP = {CN, HoA, n0, kBU} 
to  MN  through  the  secure  IPsec  ESP  protected  tunnel.  After 
receiving REP, MN checks that n0 is the same as the one it sent 
out  in  REQ.  If  so,  MN  proceeds  to  send  CN  binding  update 
messages protected using kBU as in the RR protocol. It should be 
noted  that  the  CONFIRM  message  serves  to  confirm  the  key  to 
CN and hence is optional. 
Discussion: With a straightforward informal analysis it is easy to 
show  that  the  above  protocol  performs  a  strong  one-way 
authentication  of  MN/HoA  to  CN  and  provides  CN  with  the 
confidence that it shares a secret session key with MN. A formal 
analysis of the protocol is beyond scope of the paper. Here we just 
would  like  to  point  out  that  the  most  important  message  is 
EXCH0.    Recall  that  after  receiving  EXCH0,  CN  checks  on  the 
equality  of  the  home  link  subnet  prefix  contained  in  both CertH 
and HoA. This check is critical to detect man-in-the-middle attack. 
The  signature  SIGH  =  SH(HoA|CN|gx|n1|n2|TS)  serves 
two 
purposes.  First,  it  certifies  that  the  Diffie-Hellman  value  gx  was 
originated by MN’s home agent HA on behalf of MN and second, 
it  testifies  that  HoA  is  under  HA’s  (or  equivalently  the  home 
link’s) jurisdiction and is a legitimate home address for its mobile 
node MN. This authenticates MN’s HoA to CN. 
Since  a  successful  completion  of  the  protocol  allows  CN  to 
authenticate MN’s HoA as well as allows the two nodes to set up a 
secret  session  key  for  securing  binding  updates,  the  protocol 
prevents  the  session  hijacking  attack  shown in Figure 2(a). This 
protocol, as any other protocols, is not able to completely prevent 
malicious  mobile  node  flooding  attacks. 
if  a 
correspondent  node  were  blamed  to  have  bombarded  a  network 
the  signature  SIGH  = 
service  or  site, 
SH(HoA|CN|gx|n1|n2|TS)    and  point  its  fingers  at  the  home  agent 
HA. HA can subsequently nail down the mobile node MN which 
had a home address HoA and performed a binding update at the 
time specified by TS. 
In  our  protocol,  mobile  nodes  are  not  required  to  perform  any 
public key cryptographic operations but correspondent nodes are. 
it  could  present 
  However, 
65 
is  a 
Public key cryptographic operations may not a great concern if a 
correspondent  node 
server  machine.  However,  a 
correspondent  node  can  also  be  a  mobile  node  with  limited 
computational  power  and  battery  life.  In  this  case,  public  key 
operations  supposed  to  be  performed  by  the correspondent code 
can be off-loaded to its home agent. This scenario is depicted in 
Figure 6, where HAMN and HACN  are the the home agents of MN 
and CN, respectively. Since in MIPv6 it is assumed that a mobile 
node  has  a  pre-established  security  association  with  its  home 
agent,  it  is  natural  in  our  protocol  to  have  HAMN  and  HACN 
perform public key cryptographic operations on behalf of MN and 
CN,  respectively.  Also  due  to  the  symmetric  arrangement  of  the 
entities,  it  is  possible  to  perform  a  mutual  authenticated  key-
exchange  between  MN  and  CN  and  establish  session  keys  to 
secure binding updates messages in both directions. 
  CN 
 HACN 
 Secure tunnels 
  MN 
 HAMN 
Figure 6. Scenario where CN is a mobile node. 
Since  our  protocol  uses  strong  cryptosystems,  the  secret  session 
key  kBU  established  from  the  protocol  could  be  used  for  a  long 
period of time. This is in contrast to the RR protocol, where the 
protocol must be executed at least every 420 seconds even if the 
mobile node stays at the same foreign location. 
5.  CONCLUDING REMARKS 
Mobile IP allows mobile nodes to have seamless communications 
when they change their point of attachment in the Internet and is 
poised  to  take  off  in  a  big  way  in  the  not  too  distant  future. 
However,  introduction  of  mobility  into  IP  also  brought  with  it 
new security issues and attacks, among them redirect attacks are 
perhaps the ones need the most urgent attention. 
In this paper, we first classified redirect attacks into two types. In 
the  first  type  of  attacks  -Session  Hijacking  attacks,  an  intruder 
hijacks  an  existing  session  between  a  mobile  node  and  a 
correspondent node and redirects the correspondent node’s traffic 
to a malicious location.  In the second type of attacks - Malicious 
Mobile Node Flooding attacks, a mischievous mobile node sets up 
communication  sessions  with  correspondent  nodes,  and  then 
redirect  traffic  from  the  correspondent  nodes  to  flood  a  victim 
node or network. 
Next  we  reviewed  and  analyzed  two  protocols,  the  RR  protocol 
and  the  CGA  protocol,  as  proposed  by  the  IETF  Mobile  IP 
Working Group. We showed that both protocols could be broken 
quite easily and are virtually not much use in defending redirect 
attacks. 
We  then  proposed  a  new  protocol  to  guard  against  redirect 
attacks. Our protocol makes use of a digital signature scheme and 
the  Diffie-Hellman  key  exchange  algorithm.  An 
important 
contribution of our protocol is that we issue public key certificates 
for  home  links  based  on  home  link  subnet  prefixes,  instead  of 
issuing  public  key  certificates  for  each  and  every  mobile  nodes 
based on their individual home addresses. We argued that such an 
approach makes certificate issuing, tracking, and revocation much 
more  practical  and  manageable.  In  our  protocol,  a  home  agent 
functions as security proxy for its mobile nodes and testifies the 
legitimacy  of  a  mobile  node’s  home  address  to  a  correspondent 
node  during  protocol  execution.  Recognizing  that  most  mobile 
nodes  are  constrained  in  processing  power  and  battery  life  and 
that  home  agents  can  be  easily  equipped  with  increasingly  low 
cost yet powerful cryptographic processing hardware accelerators, 
the protocol was designed to off load all the expensive public key 
cryptosystem operations from mobile nodes to their home agents. 
We  showed  that our protocol is secure against session hijacking 
attack.  In  addition,  it  is  also  capable  of  providing  evidence  to 
trace  back  the  culprit  should  a  malicious  mobile  node  flooding 
attack has occurred. 
The validity of the RR protocol authorized bindings is limited to a 
maximum of 420 seconds [2]. Consequently, a mobile node and a 
correspondent  node  need  to  perform  the  protocol  once  at  least 
every  7  minutes.  This  introduces  periodic  overheads  for  the 
mobile and correspondent nodes and may degrade communication 
quality 
sensitive 
communication  sessions)  due  to  congestion  or  slow  response  of 
the  home  agent.  The  CGA  protocol  requires  a  mobile  node  to 
generate a digital signature for every binding update it sends and 
the correspondent node to verify the signature for every binding 
update  it  receives.  This  could  be  a  substantial  computational 
burden  if  the  mobile  node  moves  quickly  from  one  subnet  to 
another.  In  our  approach,  the  protocol  needs  just  be  performed 
once,  say  at  the  starting  point  of  a  communication  session 
between  a  mobile  node  and  a  correspondent  node.  The  secret 
session key resulted from the protocol execution can be used for 
authenticating binding updates for a relatively long period of time, 
say, throughout a communication session. 
introducing 
(such  as 
jitters 
in 
time 
6.  REFERENCES 
[1]  C. Perkins, “IP Mobility Support”, IETF RFC 2002, October 
1996. 
[2]  D. Johnson, C. Perkins and J. Arkko, “Mobility Support in 
IPv6”, IETF draft-ietf-mobileip-ipv6-18.txt, 1 June 2002. 
[3]  A. Mankin et. al., “Threat Models Introduced by Mobile 
Ipv6 and Requirements for Security in Mobile Ipv6”, IETF 
draft-ietf-mipv6-scrty-reqts-02.txt, May 2001. 
[4]  S. Thomas and T. Narten, “IPv6 Stateless Address 
Autoconfiguration”, IETF RFC 2462, December 1998. 
[5]  J. Bound et. al, “Dynamic Host Configuration Protocol for 
IPv6 (DHCPv6)”, IETF draft-ietf-dhc-dhcpv6-23.txt, 22 
April 2002. 
[6]  S. Deering and R. Hinden, “Internet Protocol, Version 6 
(IPv6) Specifications”, IETF RFC 2460, December 1998. 
[7]  S. Kent and R. Atkinson,  “IP Encapsulating Security 
Payload (ESP)”, IETF RFC 2406, November 1998. 
[8]  R. Rivest, “The MD5 Message Digest Algorithms”, IETF 
RFC 1321, April 1992. 
66 
[9]  NIST, “Secure Hash Standard”, NIST FIPS PUB 180, May 
1993. 
[10] H. Krawczyk, M. Bellare and R. Canetti, “HMAC: Keyed-
Hashing for Messaging Authentication”, IETF RFC 2104, 
February 1997. 
[11] R. Rivest, A. Shamir and L. Adleman, “A Method for 
Obtaining Digital Signatures and Public-Key 
Cryptosystems”, Commun. ACM, Vol. 21, February 1978, 
pp. 120-126. 
[12] NIST, “Digital Signature Standard”, NIST FIPS PUB 186, 
May 1994. 
[13] Security Group, DoCoMo USA Labs, “Mobile IP – Making 
it Secure and Practical”, Proceedings of the RSA Conference 
2002, February 18-22, 2002, San Jose. 
[14] G. O’Shea and M. Roe, “Child-Proof Authentication for 
MIPv6 (CAM)”, Computer Communications Review, April 
2001. 
[15] E. Rescorla, SSL and TLS: Designing and Building Secure 
Systems, Addison-Wesley, 2001. 
[16] T. Narten and R. Draves, “Privacy Extensions for Stateless 
Address Autoconfiguration in IPv6”, IETF draft-ietf-ipngwg-
temp-addresses-v2-00.txt, July 2001. 
[17] P. Karn and W. Simpson, “Photuris: Session-Key 
Management Protocol”, IETF RFC 2522, 1999. 
[18] T. Narten, E. Nordmark, and W. Simpson, “Neighbor 
Discovery for IP Version 6 (IPv6)”, IETF RFC 2461, 
December 1998.
67