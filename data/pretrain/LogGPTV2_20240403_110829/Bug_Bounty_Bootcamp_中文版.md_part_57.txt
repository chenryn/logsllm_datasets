，您可以实现的通常取决于网络上发现的内部服务。根据情况，您可以使用 SSRF
扫描可访问主机的网络，对内部机器进行端口扫描以指纹内部服务，收集实例元数据，绕过访问控制，泄漏机密数据，甚至在可访问机器上执行代码。
### Perform Network Scanning {#c13.xhtml#h2-123456c13-0006}
You may sometimes want to scan the network for other reachable machines.
*Reachable machines* are other network hosts that can be connected to
via the current machine. These internal machines might host databases,
internal websites, and otherwise sensitive functionalities that an
attacker can exploit [ ]{#c13.xhtml#Page_225 .pagebreak title="225"} to
their advantage. To perform the scan, feed the vulnerable endpoint a
range of internal IP addresses and see if the server responds
differently to each address. For example, when you request the address
10.0.0.1
有时候，你可能想要扫描网络中其他可达的机器。可达机器指的是可以通过当前机器连接到的其他网络主机。这些内部机器可能托管数据库、内部网站和其他敏感功能，黑客可以利用它们来攻击。为了进行扫描，需要将一个范围的内部IP地址输入到易受攻击的终端，看看服务器是否对每个地址有不同的响应。例如，当你请求地址10.0.0.1时。
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=https://10.0.0.1
the server may respond with this message:
服务器可能会响应此消息：
    Error: cannot upload image: http-server-header: Apache/2.2.8 (Ubuntu) DAV/2
But when you request the address 10.0.0.2
当你请求地址10.0.0.2时。
    POST /upload_profile_from_url
    Host: public.example.com
    (POST request body)
    user_id=1234&url=https://10.0.0.2
the server may respond with this message:
服务器可能会响应此消息：
    Error: cannot upload image: Connection Failed
You can deduce that 10.0.0.1 is the address of a valid host on the
network, while 10.0.0.2 is not. Using the differences in server
behavior, you can gather info about the network structure, like the
number of reachable hosts and their IP addresses.
您可以推断出10.0.0.1是网络上有效主机的地址，而10.0.0.2不是。利用服务器行为的差异，您可以收集有关网络结构的信息，例如可达主机的数量和它们的IP地址。
You can also use SSRF to port-scan network machines and reveal services
running on those machines. Open ports provide a good indicator of the
services running on the machine, because services often run on certain
ports by default. For example, by default, SSH runs on port 22, HTTP
runs on port 80, and HTTPS runs on port 443. Port-scan results often
point you to the ports that you should inspect manually, and they can
help you plan further attacks tailored to the services found.
您也可以使用SSRF来扫描网络设备的端口，并揭示这些设备上运行的服务。开放的端口可以很好地指示设备上运行的服务，因为服务通常默认运行在某些端口上。例如，SSH默认运行在22号端口上，HTTP运行在80号端口上，而HTTPS运行在443号端口上。端口扫描结果通常指向您应该手动检查的端口，并且它们可以帮助您计划更多针对发现的服务的攻击。
Provide the vulnerable endpoint with different port numbers, and then
determine if the server behavior differs between ports. It's the same
process as scanning for hosts, except this time, switch out port numbers
rather than hosts. Port numbers range from 0 to 65,535.
提供不安全的终端点不同的端口号，然后确定服务器在端口之间的行为是否有所不同。这与扫描主机的过程相同，只不过这一次需要更改端口号而不是主机。端口号范围从0到65,535。
Let's say you want to find out which ports are open on an internal
machine. When you send a request to port 80 on an internal machine, the
server responds with this message:
假设您想找出内部计算机开放的端口。当您向内部计算机上的端口80发送请求时，服务器会以以下消息进行响应：
    Error: cannot upload image: http-server-header: Apache/2.2.8 (Ubuntu) DAV/2
And when you send a request to port 11 on the same machine, the machine
responds with this message:
当您向同一台机器的11号端口发送请求时，该机器将以此消息作出回应：
    Error: cannot upload image: Connection Failed
[ ]{#c13.xhtml#Page_226 .pagebreak title="226"} We can deduce that port
80 is open on the machine, while port 11 is not. You can also figure out
from the response that the machine is running an Apache web server and
the Ubuntu Linux distribution. You can use the software information
revealed here to construct further attacks against the system.
我们可以推断出在这台机器上，80端口是开放的，而11端口则不是。从响应可以推断出，这台机器运行的是Apache
Web服务器和Ubuntu
Linux发行版。您可以使用在此处揭示的软件信息，构建进一步的攻击来攻击该系统。
### Pull Instance Metadata {#c13.xhtml#h2-123456c13-0007}
Cloud computing services allow businesses to run their applications on
other people's servers. One such service, Amazon Elastic Compute Cloud
(EC2), offers an instance metadata tool that enables EC2 instances to
access data about themselves by querying the API endpoint at
169.254.169.254. *Instances* are virtual servers used for running
applications on a cloud provider's infrastructure. Google Cloud offers a
similar instance metadata API service.
云计算服务允许企业在其他人的服务器上运行其应用程序。 Amazon Elastic
Compute
Cloud（EC2）是这样一项服务，它提供了实例元数据工具，使EC2实例能够通过在API端点上查询169.254.169.254来访问有关自身的数据。实例是用于在云提供商基础架构上运行应用程序的虚拟服务器。谷歌云提供类似的实例元数据API服务。
These API endpoints are accessible by default unless network admins
specifically block or disable them. The information these services
reveal is often extremely sensitive and could allow attackers to
escalate SSRFs to serious information leaks and even RCE.
这些API端点默认情况下是可访问的，除非网络管理员特别阻止或禁用它们。这些所提供的服务信息通常非常敏感，可能会让攻击者将SSRF升级成严重的信息泄漏、甚至RCE。
#### Querying EC2 Metadata {#c13.xhtml#h3-123456c13-0005}
If a company hosts its infrastructure on Amazon EC2, try querying
various instance metadata about the host using this endpoint. For
example, this API request fetches all instance metadata from the running
instance:
如果公司将其基础设施托管在Amazon
EC2上，请尝试使用此端点查询有关主机的各种实例元数据。例如，此API请求从正在运行的实例中提取所有实例元数据：
    http://169.254.169.254/latest/meta-data/
Use this URL in an endpoint vulnerable to SSRF:
在易受SSRF攻击的终端点中使用该URL：
    https://public.example.com/proxy?url=http://169.254.169.254/latest/meta-data/
These endpoints reveal information such as API keys, Amazon S3 tokens
(tokens used to access Amazon S3 buckets), and passwords. Try requesting
these especially useful API endpoints:
这些终端节点揭示了诸如API密钥、Amazon S3令牌（用于访问Amazon
S3桶的令牌）和密码等信息。尝试请求这些特别有用的API终端节点：
-    *http://169.254.169.254/latest/meta-data/* returns the list of
    available metadata that you can query.
-    *http://169.254.169.254/latest/meta-data/local-hostname/* returns
    the internal hostname used by the host.
-   
    *http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE_NAME*
    returns the security credentials of that role.
-    *http://169.254.169.254/latest/dynamic/instance-identity/document/*
    reveals the private IP address of the current instance.
-    *http://169.254.169.254/latest/user-data/* returns user data on the
    current instance.
You can find the complete documentation for the API endpoint at
[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html){.LinkURL}
.
你可以在https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html找到完整的API端点文档。
#### [ ]{#c13.xhtml#Page_227 .pagebreak title="227"} Querying Google Cloud Metadata {#c13.xhtml#h3-123456c13-0006}
If the company uses Google Cloud, query the Google Instance Metadata API
instead. Google implements additional security measures for its API
endpoints, so querying Google Cloud Metadata APIv1 requires one of these
special headers:
如果公司使用Google Cloud，请查询Google Instance Metadata
API。Google为其API端点实施了额外的安全措施，因此查询Google Cloud
Metadata APIv1需要其中的特殊标头之一：
    Metadata-Flavor: Google
    X-Google-Metadata-Request: True
These headers offer protection against SSRFs because most often during
an SSRF, you cannot specify special headers for the forged request. But
you can easily bypass this protection, because most endpoints accessible
through APIv1 can be accessed via the API v1beta1 endpoints instead.
*API v1beta1* is an older version of the metadata API that doesn't have
the same header requirements. Begin by targeting these critical
endpoints:
由于在SSRF期间，您通常无法为伪造的请求指定特殊标头，因此这些标头提供对抗SSRF的保护。但是，您可以轻松绕过此保护，因为大多数通过APIv1可访问的终端点可以通过API
v1beta1终端点访问。 API
v1beta1是元数据API的较旧版本，不具有相同的标头要求。首先针对这些关键终端点开始：
由于SSRF的影响，这些标头提供保护。但可以轻松规避此保护，因为可以通过API
v1beta1接口访问API v1的大多数端点。 API
v1beta1是元数据API的旧版，不具有相同的标头要求。从攻击这些关键端点开始：
-   
    *http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token*
    returns the access token of the default account on the instance.
-   
    *http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys*
    returns SSH keys that can connect to other instances in this
    project.
Read the full API documentation at
[https://cloud.google.com/compute/docs/storing-retrieving-metadata/](https://cloud.google.com/compute/docs/storing-retrieving-metadata/){.LinkURL}
. Note that the API v1beta1 was deprecated in 2020 and is in the process
of being shut down. In the future, you might be required to query
metadata with APIv1 and will need to find a way to forge the required
headers to request instance metadata for targets that use Google Cloud.
请访问https://cloud.google.com/compute/docs/storing-retrieving-metadata/
阅读完整的API文档。请注意，API
v1beta1在2020年已经被弃用并正在逐步关闭。未来，您可能需要使用APIv1查询元数据，并需要找到一种方式来伪造所需的标头以请求使用Google
Cloud的目标实例元数据。
Amazon and Google aren't the only web services that provide metadata
APIs. However, these two companies control a large share of the market,
so the company you're testing is likely on one of these platforms. If
not, DigitalOcean and Kubernetes clusters are also vulnerable to the
same issue. For DigitalOcean, for example, you can retrieve a list of
metadata endpoints by visiting the *http://169.254.169.254/metadata/v1/*
endpoint. You can then retrieve key pieces of information such as the
instance's hostname and user data. For Kubernetes, try accessing
*https://kubernetes.default* and
*https://kubernetes.default.svc/metrics* for information about the
system.
亚马逊和谷歌并非唯一提供元数据API的网络服务。然而，这两家公司控制着较大的市场份额，因此您测试的公司可能在其中一个平台上。如果不是，DigitalOcean和Kubernetes集群也容易受到同样的问题影响。例如，对于DigitalOcean，您可以通过访问http://169.254.169.254/metadata/v1/端点来检索元数据端点的列表。然后，您可以检索关键的信息，例如实例的主机名和用户数据。对于Kubernetes，尝试访问https://kubernetes.default和https://kubernetes.default.svc/metrics以获取有关系统的信息。
### Exploit Blind SSRFs {#c13.xhtml#h2-123456c13-0008}
Because blind SSRFs don't return a response or error message, their
exploitation is often limited to network mapping, port scanning, and
service discovery. Also, since you can't extract information directly
from the target server, this exploitation relies heavily on inference.
Yet by analyzing HTTP status codes and server response times, we can
often achieve results similar to regular SSRF.
由于盲目的SSRF不会返回响应或错误信息，他们的利用通常局限于网络映射、端口扫描和服务发现。此外，由于无法直接从目标服务器提取信息，因此这种利用非常依赖推理。然而，通过分析HTTP状态代码和服务器响应时间，我们通常可以达到类似常规SSRF的结果。
#### [ ]{#c13.xhtml#Page_228 .pagebreak title="228"} Network and Port Scanning Using HTTP Status Codes {#c13.xhtml#h3-123456c13-0007}
Remember from [ Chapter 5 ]{.xref itemid="xref_target_Chapter 5"} that
HTTP status codes provide information about whether the request
succeeded. By comparing the response codes returned for requests to
different endpoints, we can infer which of them are valid. For example,
if a request for *https://public.example.com/webhook?url=10.0.0.1*
results in an HTTP status code of 200, while a request for
*https://public.example.com/webhook?url=10.0.0.2* results in an HTTP
status code of 500, we can deduce that 10.0.0.1 is the address of a
valid host on the network while 10.0.0.2 is not.
记住第5章提到的HTTP状态码提供关于请求是否成功的信息。通过比较不同端点请求返回的响应码，我们可以推断哪些是有效的。例如，如果对https：//public.example.com/webhook？url
=
10.0.0.1的请求返回HTTP状态码200，而对http：//public.example.com/webhook？url
=
10.0.0.2的请求返回HTTP状态码500，则我们可以推断10.0.0.1是网络上一个有效的主机地址，而10
.0.0.2不是。
Port scanning with blind SSRF works the same way. If the server returns
a 200 status code for some ports, and 500 for others, the 200 status
code might indicate open ports on the machine. On the other hand, if all
requests return the same status code, the site might have implemented
protection against SSRF port scanning.
使用盲目 SSRF 进行端口扫描的方式是相同的。如果服务器针对某些端口返回 200
状态码，而针对其他端口返回 500 状态码，则 200
状态码可能表示计算机上的开放端口。另一方面，如果所有请求返回相同的状态码，则该站点可能已经实施了对
SSRF 端口扫描的保护。
#### Network and Port Scanning Using Server Response Times {#c13.xhtml#h3-123456c13-0008}
If the server isn't returning any useful information in the form of
status codes, you might still be able to figure out the network