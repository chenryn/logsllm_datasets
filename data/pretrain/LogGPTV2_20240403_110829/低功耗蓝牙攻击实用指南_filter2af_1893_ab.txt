gatttool -t random -b [adr] -I | 使用随机 LE 地址在交互模式下启动 gattool。连接到地址为 adr
的远程蓝牙设备。  
primary | 检查已连接 BLE 设备的可用服务。  
characteristic | 检查已连接 BLE 设备的可用属性，以便从中读取数据。  
char-desc | 特征描述符的发现。检查 n 个 handle。  
char-read-hnd | 使用 handle 读取属性 。  
char-write-req | 向 handle 写入值。  
更多命令：
###  使用示例
`hciconfig`: 用于列出所有连接的 BLE 适配器。
`hciconfig hicX up`: 启用名为 hciX 的 BLE 适配器。
`hciconfig hciX down`: 禁用名为 hciX 的 BLE 适配器
`hcitool lescan`: 扫描附近的 BLE 设备。
在获得 BLE 设备的地址后，我们需要连接它。这就是我们使用 gattool 的时候。
`gatttool -I`: 以类似 REPL 的交互模式启动 gatttool，用户可以按照下列的方式执行各种命令。
`connect `：使用给定的地址连接 BLE 设备。
如果设备只与手机相连而不能与电脑相连，上述步骤可能无效。为了连接这样的设备，我们需要使用随机的地址。
`gatttool -t random -b  -I`: 使用随机地址连接设备。
在成功连接后，我们可用使用以下命令查看设备的服务和属性。
**Primary**
**Characteristics**
在找到服务和属性后，我们需要知道读/写数据的 handle。这可以使用`char-desc`命令得到。
我们可以使用形如`char-desc 01 05`（该显示从1 到 5 的5 个 handle）的命令过滤特定范围的 handle 并显示。
在找到 handle 后，我们使用命令`char-read-hnd `从 handle 中读取数据。
为了能够写入特定的 handle，我们需要知道哪个是可写 handle。为此，我们可以选择一个 hit 和 try 方法，然后逐个读取所有
handle，直到遇到读取错误为止。读取错误意味着这是一个写 handle（写 handle 不能被读取）。或者，类似 nRF Connect
的应用可以自动计算出写 handle。
handle **0x000b** 的UUID 下图所示。
使用 nRF Connect，我们得到了以下的输出，确认 0x000b 确实是写 handle。上图中 0x000b的 UUID 和下图中 nRF
Connect 的相匹配。
在连接到灯泡后，我们可以向不用同的属性写入随机值。在大多数情况下，写入随机值不会像预期的那样工作。在 handle
中写入正确的值，我们需要解密数据协议，我们可用使用嗅探工具来解密，如 wireshark 和 ubertooth。
在解密数据协议后，我们可以命令`char-write-req  ` 向 handle 中写入值。
如果`char-write-req`报错，可以使用`char-write-cmd`替换。
###  蓝牙数据包日志（Bluetooth HCI snoop log）
Android 4.4 及以上有一个选项，可以记录设备所有进出的蓝牙数据包。要捕获蓝牙通信，请遵循以下步骤。确保安装了Android 应用程序。
**第一步** ： 进入设置中的开发者选项。
**第二步** : 在开发者选项中启用“打开蓝牙数据包日志”。
**第三步** ： 运行 Android 程序（magic blue），并发送一些改变灯泡颜色的命令。重复发送几次。
**第四步** ：对应于我们的命令，我们可以在`sdcard/btsnoop_hci.log` 或者`/internal
Storage/btsnoop_hci.log`中找到捕获的蓝牙流量文件。
注意 – 在部分设备上, btsnoop_hci.log
被创建在不同的位置，例如`/sdcard/Android/data/btsnoop_hci.log`。
使用Emal 、 Google Drive 或者 USB 数据线将捕获的日志文件传输到台式/笔记本电脑上。
**第四步** ： 在 Wireshark 中分析流量，Wireshark 是一个免费开源的数据包分析工具，使用以下命令安装。
    sudo apt install wireshark-qt
更多关于如何使用 Wireshark 说明见我们的博客：。
或者，使用文本编辑器打开捕获的文件，如nano。
###  使用 nRF Connect
Nordic 半导体的[nRF
Connect](https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=en_IN)
可以用与 BLE hacking。它可以嗅探和写入数据，就像gatttool 一样。
**第五步** ： 打开 nRF Connect 应用并连接 BLE 灯泡。
**第六步** ： 一旦连接，写入 payload 值`56b0306000f0aa`,点击发送。灯泡的颜色会变成紫红色。
这是因为颜色使用了RGB 值 176, 48, 96 或者十六进制值 B03060。此条命令发送非灯泡的值是 `56 b0 30 60 00 f0
aa`。注意，第二字节、第三字节、第四字节分别对应十六进制中的 RGB 值。
我们可以通过人工分析流量并试图从中找到协议中的模式。
###  使用 Blash 进行 BLE 攻击
[Blash](https://github.com/evilsocket/bleah) 是一个 BLE 扫描工具，它基于 python库
[bluepy](https://github.com/IanHarvey/bluepy)。在此节中，我们将了解如何使用Bleah 黑掉 BLE设备。
在开始之前，我们需要
**硬件**
  * 做好是运行 Ubuntu 的笔记本
  * 一个智能 BLE 灯泡或者其他蓝牙智能设备
  * 一个蓝牙适配器
**软件**
  * Python 2.7 （Ubuntu中默认已安装）
  * Bluepy 库
  * Bleah
首先确保，Bluepy 如预期一样工作。
前往 bluepy 目录，打开终端，然后输入``sudo ./bluepy-helper 0`然后输入le on，如下所示。
（注意：可用使用命令`which bluepy-helper`找到 Bluepy 的安装路径）
success 消息表明 Bluepy 运行正常。现在，让我们看看如何使用 Bleah 进行 BLE 攻击。
**第一步** ： 在同一终端中输入 `scan`扫描附近的 BLE 设备。
我们的 BLE 设备的地址是 `F81D78607184` 。
**第二步** ： 开一个新终端并运行`sudo bleah -t0`，`t0`表示连续扫描。
**第三步** ： 我们可以连接指定的设备并枚举所有的服务和属性，使用以下命令。
    sudo bleah -b "aa:bb:cc:dd:ee:ff" -e
`aa:bb:cc:dd:ee:ff` 代表设备地址
`-b` 表示按照设备地址过滤
`-e` 代表连接设备并执行枚举操作
**第四步** ：向特定的属性中写入数据运行。
    sudo bleah -b "aa:bb:cc:dd:ee:ff" -u "0000ffe9-0000-1000-8000-00805f9b34fb" -d "data"
正如我们看到的，Blash 是一个实施 BLE 设备攻击的强大工具。它自动化实现了许多步骤，否则我们需要手工完成。
在这篇博文中，我们学习了对蓝牙低功耗设备进行攻击的各种工具和技术。希望你从此文中受益。