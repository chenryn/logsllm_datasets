### 优化后的文本

#### X_h, X, and SWA Variation
- **(3)d**: SWA variation
- **X- X, X**: SWA variation
- **ITH (2)e**: X-X, X
- **ITH (2,/)**: SWA variation
- **X_h, X**: l/SWA (3)d
- **X-X, X**: l/SWA (3,)
- **X-X, X**: Young/Old
- **X_h, X**: Resource
- **X, X-**: (l/SWA variation)ITH
- **X-X, X**: (l/SWA variation)ITH
- **X, X-**: (RiSWA variation)ITH
- **X-X, X**: (RiSWA variation)ITH
- **X, X-**: SWA Resource
- **X, X-**: Time to Failure

**Notes:**
- **a**: Exp. 4.3 Complete-Expo
- **b**: (X) number of variables
- **c**: Sliding
- **d**: For Num. Threads,
- **e**: For Tomcat Memory Used and System Memory Used
- **f**: For Young Zone Used and Old Zone Used
- **g**: For Response Time, Throughput, Tomcat Memory Used
- **h**: Removed only Tomcat Memory Used and System Memory Used variables

#### Machine Characteristics and Experiments
In our experiments, we have manipulated two different resources: Threads and Memory, individually or combined. To simulate aging-related errors, we modified the TPC-W implementation. Specifically, we used Emulated Browsers (EBs) to access the `TPCW-SearchRequestservlet` with varying workloads (75EBs and 150EBs). We injected a random memory consumption, where the frequency of injection depends on the number of clients. This setup simulates memory leaks, with higher workloads leading to more frequent injections and lower workloads resulting in less frequent injections.

#### Simulation of Aging-Related Errors
To simulate memory leaks, we injected a random amount of memory into the system. The frequency of this injection is determined by a random number between 0 and N. This frequency depends on the number of servlet visits, making it such that high workloads lead to more frequent memory leaks, while low workloads result in fewer leaks. Over time, the average memory consumption stabilizes, but fluctuations become less relevant. We decided to use a single relevant parameter, N, to simulate these scenarios.

#### Thread and Memory Consumption
We also simulated thread consumption by modifying a servlet to inject a random number of threads and a random amount of memory. The number of threads and the amount of memory are independent of the workload. These two errors help us validate our hypothesis under different scenarios. The TPC-W has three types of workload: Browsing, Shopping, and Ordering. In our case, we conducted experiments under different workloads to observe the impact on the system.

#### Experiment Results
**4.1 Deterministic Software Aging**
Our first approach was to evaluate the M5P model for predicting software aging due to deterministic memory leaks. We injected 1MB of memory leak with N = 30. The M5P model was trained using 25 EBs, 50EBs, 100EBs, and 200EBs, generating a tree with 33 leafs and 30 inner nodes. The model was evaluated for accuracy, and the results are presented in Table 3.

**Table 3: MAEs obtained in Exp. 4.1**

| Metric            | 75EBs MAE     | 75EBs S-MAE   | 150EBs MAE    | 150EBs S-MAE  |
|-------------------|---------------|---------------|---------------|---------------|
| Linear Regression | 19 min 35 sec | 15 min 14 sec | 14 min 17 sec | 9 min 34 sec  |
| M5P               | 20 min 24 sec | 5 min 46 sec  | 17 min 24 sec | 2 min 52 sec  |

**4.2 Dynamic and Variable Software Aging**
Our next experiment evaluated the model's ability to predict dynamic software aging under constant workload. We trained the model with one execution without any memory leak and three executions with a 1MB memory leak at different injection rates (N = 15, N = 30, and N = 75). The model generated had 36 leafs and 35 inner nodes. The model was tested over an experiment where the injection rate changed every 20 minutes. The results are shown in Figure 3.

**Figure 3: Predicted time (dark line) vs. Tomcat memory evolution (grey line) during the execution.**

**4.3 Two-Resource Experiment**
In this experiment, we considered both memory and thread consumption. The experiment had four phases, each lasting around 30 minutes. The first phase had no injection, followed by phases with varying injection rates. The results are shown in Table 4 and Figure 5.

**Table 4: MAEs obtained in Exp 4.3**

| Metric            | MAE           | S-MAE         | PRE-MAE       | POST-MAE      |
|-------------------|---------------|---------------|---------------|---------------|
| Linear Regression | 15 min 57 sec | 4 min 53 sec  | 16 min 10 sec | 8 min 14 sec  |
| M5P               | 3 min 34 sec  | 21 sec        | 3 min 31 sec  | 5 min 29 sec  |

**Figure 5: Time predicted and resource evolution during the two-resource experiment.**

#### Conclusion
The M5P model showed better performance than linear regression in predicting software aging, especially in handling changes in the aging trend. The experiments validated our hypothesis and provided insights into the behavior of the system under different workloads and resource consumption scenarios.