title:A Peek into the DNS Cookie Jar - An Analysis of DNS Cookie Use
author:Jacob Davis and
Casey T. Deccio
A Peek into the DNS Cookie Jar
An Analysis of DNS Cookie Use
Jacob Davis1,2(B)
and Casey Deccio2
1 Sandia National Laboratories, Livermore, CA 94551, USA
PI:EMAIL
2 Brigham Young University, Provo, UT 84602, USA
{jacobdavis,casey}@byu.edu
Abstract. The Domain Name System (DNS) has been frequently
abused for Distributed Denial of Service (DDoS) attacks and cache poi-
soning because it relies on the User Datagram Protocol (UDP). Since
UDP is connection-less, it is trivial for an attacker to spoof the source of
a DNS query or response. DNS Cookies, a protocol standardized in 2016,
add pseudo-random values to DNS packets to provide identity manage-
ment and prevent spooﬁng attacks. In this paper, we present the ﬁrst
study measuring the deployment of DNS Cookies in nearly all aspects of
the DNS architecture. We also provide an analysis of the current beneﬁts
of DNS Cookies and the next steps for stricter deployment. Our ﬁndings
show that cookie use is limited to less than 30% of servers and 10% of
recursive clients. We also ﬁnd several conﬁguration issues that could lead
to substantial problems if cookies were strictly required. Overall, DNS
Cookies provide limited beneﬁt in a majority of situations, and, given
current deployment, do not prevent DDoS or cache poisoning attacks.
Keywords: Internet measurement · DNS · DNS Cookies · DNS
security
1 Introduction
The Domain Name System (DNS) is an essential backbone of the internet used to
translate domain names to Internet Protocol (IP) addresses. Since its inception
in the 1980s, the DNS has been reliant on the User Datagram Protocol (UDP).
While UDP has a major beneﬁt of speed, its lack of identity management is
easily exploitable. Oﬀ-path attackers can spoof UDP packets to pretend they, or
a victim, are the source of the packet.
There are two major attacks utilizing spooﬁng. The ﬁrst is cache poisoning,
wherein an attacker sends malicious responses pretending to be a legitimate
server. If successful, the victim is unknowingly directed towards a malicious IP
address. The other attack is a DNS reﬂection attack. This attack is carried out
by sending many DNS queries with the victim’s IP address as the spoofed source
and results in the victim being ﬂooded with unsolicited response traﬃc—a form
of distributed denial-of-service (DDoS).
c(cid:2) Springer Nature Switzerland AG 2021
O. Hohlfeld et al. (Eds.): PAM 2021, LNCS 12671, pp. 302–316, 2021.
https://doi.org/10.1007/978-3-030-72582-2_18
A Peek into the DNS Cookie Jar
303
Both cache poisoning and reﬂection-based DDoS attacks exploit the lack of
veriﬁcation inherent with UDP. In an attempt to solve this issue, and provid.e
identity management in the DNS, a new protocol, known as DNS Cookies, was
standardized through the Request for Comments (RFC) process in 2016 [11].
With DNS Cookies, both client and server include a cryptographic identiﬁer (the
cookie) in their DNS messages which can then be veriﬁed in future messages. An
oﬀ-path attacker is unable to learn the cookie values and thus cannot feasibly
spoof them.
Since 2016, DNS Cookies have become increasingly common and are sup-
ported by many open-source DNS software vendors. However, to the best of our
knowledge, no research has been done to quantify the level of support for cookies.
The major contribution of this paper is a study of client- and server-side
support for DNS cookies—the ﬁrst such measurement of its kind. Addition-
ally, we analyze DNS Cookie enforcement to see if any client or server rejects
illegitimate DNS messages based on cookies. While clients and servers may be
exchanging cookies, there is no beneﬁt unless a missing or incorrect cookie aﬀects
the server’s response.
In this paper, we make the following contributions:
– We measure support for DNS Cookies in high-demand authoritative DNS
servers and open resolvers Internet-wide; we ﬁnd that 30% of servers fully
support cookies, and only 10% of recursive clients send cookies.
– We analyze the DNS Cookies we observed and discover several potential mis-
conﬁgurations, such as inaccurate server clocks, some of which could break
implementations.
– We examine the behavior of DNS clients and servers when encountering miss-
ing or illegitimate cookies and ﬁnd that 80% of clients do not reject responses
when they should and that 99% of servers handle these situations in the least
restrictive manner by responding indiﬀerently.
– We discuss the path forward for wider DNS Cookie adoption and possible
solutions for enforcing the use of cookies.
Overall, our work, which is the ﬁrst to measure DNS Cookies in the wild,
reveals a low level of adoption and minimal enforcement of DNS Cookies. We
believe that DNS Cookies have the potential to beneﬁt the DNS, but greater
adoption and strategies for enforcement are required.
Artifacts: The source code and datasets used to produce this paper can be found
at the following link: https://imaal.byu.edu/papers/2021 pam dns cookies/.
2 Background
The Domain Name System (DNS) is primarily used to convert domain names
(e.g. example.com) to Internet Protocol (IP) addresses (e.g. 192.0.2.1) [18,19].
There are three components in the DNS: stub resolvers, recursive resolvers, and
authoritative servers.
304
J. Davis and C. Deccio
Stub resolvers are typically associated with end-devices such as a phone or
desktop. To visit a given domain, a stub sends a DNS query to its conﬁgured
recursive resolver. The recursive resolver can respond to the query immediately
if the answer is cached. Otherwise, it queries several authoritative servers sys-
tematically until it obtains the answer.
The DNS continues to utilize the User Datagram Protocol (UDP) as its pri-
mary transport protocol. UDP does not provide identity management and there-
fore does not protect against spooﬁng attacks, wherein an attacker impersonates
a client or server by using their IP address as the source.
One attack that utilizes spooﬁng to impersonate an authoritative server is
DNS cache poisoning. With cache poisoning, an attacker can respond to a client
with a malicious IP address, causing that client, and all who rely on its cache,
to be redirected to the malicious IP.
Due to the severity of a successful cache poisoning attack, several measures
have been encouraged to reduce the chance of a successful cache poisoning.
These include source port randomization [15] and 0x20 encoding (randomized
capitalization) [6]—both of which require only changes to client-side software.
Another avenue would be for a client to use DNS-over-TCP [10], DNS-over-
TLS (DoT) [14], or DNS-over-HTTPS (DoH) [13]. These three protocols all
provide the identity management inherent in the TCP handshake, and DoT and
DoH are showing increased adoption [9,17]. However, they result in increased
latency [7]. A ﬁnal approach, which avoids identity management altogether, is
cryptographically authenticating DNS responses. This strategy is employed by
DNSCurve [1] and the DNS Security Extensions (DNSSEC) [3–5]. Neither of
these methods has seen widespread adoption.
Another attack that exploits the lack of identity management in UDP and the
DNS is distributed denial-of-service (DDoS) attacks. Here the attacker imper-
sonates the victim’s client and sends many DNS queries. This results in traﬃc
being reﬂected oﬀ of DNS servers and the victim being ﬂooded with unsolicited
response traﬃc. Past attacks have reached traﬃc volumes of 300 Gbps to 1.2 Tbps
and are capable of aﬀecting major services such as Amazon and Netﬂix [12,20].
Both of these attacks can have major eﬀects but can be prevented with some
form of identity management.
DNS Cookies [11] are designed as a lightweight mechanism that provides
identity management at a strength similar to TCP, but without the latency bur-
den. They are included in DNS messages as a COOKIE option inside the Extended
DNS (EDNS) OPT resource record [8]. Both the client and server in a given com-
munication can provide a plain-text cookie in their DNS messages. The client
can then verify that the server includes the client cookie (i.e., provided by the
client) in future communications—and vice-versa—to ensure that messages have
not been spoofed by an oﬀ-path attacker. An example of this process is shown
in Fig. 1. DNS Cookies do not provide protection against on-path attackers, but
should still provide substantial beneﬁt to securing the internet as a whole.
Client cookies are 8 bytes in length and are used to prevent cache poisoning by
enabling the client to verify the server’s identity. A stub or recursive resolver can
A Peek into the DNS Cookie Jar
305
Fig. 1. An example communication using DNS Cookies. Here the client starts from a
fresh state and reuses its cookie whereas the server generates a new cookie per query.
include a DNS client cookie in their queries and only accept a response containing
the cookie. The suggested implementation for generating a client cookie is to use
a cryptographic hash of the (Client IP |Server IP |Client Secret). More recent
suggestions remove the inclusion of the Client IP as it may not be known at
the time of generation [21]. Regardless, a client should use a unique cookie per
server and should not reuse a cookie across IP addresses as this would enable
tracking the client.
A server cookie ranges in size from 8 to 32 bytes and is used to conﬁrm a
client’s identity, in turn preventing reﬂection-based attacks. Authoritative and
recursive servers may choose to send a server cookie when responding to a query
with a client cookie in it. Clients should then include this cookie in future queries
to verify their identity. If a server receives a query without a valid server cookie
they may enforce cookie use by responding with the BADCOOKIE response code
(rcode), a valid server cookie, and no DNS answers. The speciﬁcation suggests
that a server cookie consists of a 4-byte nonce, 4-byte timestamp, and an 8-byte
cryptographic hash of the (Server Secret |Client Cookie |Nonce |Time |Client
IP). The time ﬁeld results in a new cookie for every request and makes rejection
of outdated cookies easy. Additionally, the server does not need to save any state
to verify a cookie as the nonce and timestamp are provided in plain-text.
In 2019 an Internet draft was created to standardize the format for DNS
Cookies to allow interoperability between diﬀerent DNS software [21]. Of note,
server cookies were visibly changed as the nonce was replaced with a version and
reserved ﬁeld.
3 Support for DNS Cookies
Here we establish a baseline measurement for DNS Cookie usage from the per-
spective of both clients and servers. We analyze DNS server-side cookie behavior,
306
J. Davis and C. Deccio
which includes both authoritative DNS servers and recursive resolvers in their
“server” role to clients. For this analysis, we classify varying levels of support:
EDNS capability (via the inclusion of an option (OPT) record in a response),
echoing of a sent client cookie (only), and full support with a returned server
cookie. While echoing a client cookie is not a speciﬁed option in the proto-
col, it does still protect the client. We also measure cookie usage of recursive
resolvers in the “client” role in connection with queries to authoritative servers
under our control. An analysis that included all perspectives would have included
DNS Cookie use by stub resolvers in their communications with DNS recursive
resolvers. However, that data is available only to recursive server operators, so
we were unable to perform an analysis of stub resolver behavior with respect to
DNS Cookies.
3.1 Server-Side Cookie Support
We queried a set of open recursive resolvers and two sets of authoritative servers
to measure DNS Cookie support for “servers”.
To generate a set of recursive resolvers to test, we issued a DNS query (for
a domain we control) to every IPv4 address. We classiﬁed an IP address as a
recursive resolver if it 1) queried our authoritative server or 2) responded to our
query with the recursion available (RA) ﬂag set and a response code of either
NOERROR or NXDOMAIN. This data was collected from September 24–26, 2020. In
total, we identiﬁed 1,908,397 open recursive resolvers.
For authoritative servers, we analyzed servers authoritative for the top 1
million Alexa domains [2] (actually 770,631 domains) and servers authoritative
for the 1,509 top-level domains (TLDs) [16] (including the root servers). All
data was collected on September 30, 2020, using the latest Alexa ﬁle and root
zone available. The names and IP addresses (IPv4 and IPv6) for each domain
in the collective lists were determined through 1) a lookup of type NS (name
server) for the domain and 2) a lookup of type A and AAAA (IPv4 and IPv6
address, respectively) for each name returned in the NS query response. In total,
we recorded 157,679 IP addresses for the Alexa sites and 6,615 for the TLDs.
To identify support for cookies, we issued up to 6 DNS queries to each
server—stopping early if we received a response with a server cookie. We included
the same client cookie in every query. During these queries, we experienced errors
with 48% of resolvers, likely due to high churn. In particular, queries for 32% of
resolvers timed out, and for 16% of resolvers, we received a response from a dif-
ferent IP address (often Cloudﬂare’s 1.1.1.1) than we had queried. Removing
these cases leaves us with 999,228 error-free resolvers. For authoritative servers,
queries to 6,724 (4.3%) of Alexa IPs resulted in an error, as did queries to 58
(0.88%) TLD IPs. The errors associated with querying authoritative servers pri-
marily consisted of time outs (98% of Alexa errors and 100% of TLD errors),
though there were a handful of malformed packets or unexpected responses. We
report all of our results as percentages of communications with error-free servers.
EDNS, which is a prerequisite for cookies, was supported (as evidenced by an
OPT record in responses) by 699,402 (70%) of recursive resolvers, 147,878 (98%)
A Peek into the DNS Cookie Jar
307
of Alexa IPs, and 6,557 (100%) of TLD IPs. The client cookie that we sent in our
queries was returned by 208,526 (21%) of recursive resolvers, 48,262 (32%) of