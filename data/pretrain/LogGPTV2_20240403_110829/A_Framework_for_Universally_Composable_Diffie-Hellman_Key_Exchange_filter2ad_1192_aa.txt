# A Framework for Universally Composable Diffie-Hellman Key Exchange

**Authors:** Ralf Küsters and Daniel Rausch  
**Affiliation:** University of Stuttgart, Stuttgart, Germany  
**Email:** {ralf.kuesters, daniel.rausch}@informatik.uni-stuttgart.de  
**Conference:** 2017 IEEE Symposium on Security and Privacy

## Abstract
The analysis of real-world protocols, particularly key exchange protocols and those built upon them, is a complex, error-prone, and tedious task. This complexity arises not only from the protocols themselves but also from the need to reduce their security to that of the underlying cryptographic primitives repeatedly.

Our goal is to minimize or eliminate reduction proofs for real-world key exchange protocols, including higher-level protocols that use the exchanged keys. While some initial steps have been taken in this direction, existing work is limited and does not support Diffie-Hellman (DH) key exchange, a prevalent cryptographic primitive in real-world protocols.

In this paper, building on the work by Küsters and Tuengerthal, we introduce an ideal functionality in the universal composability (UC) setting that supports several common cryptographic primitives, including DH key exchange. This functionality helps to avoid reduction proofs in the analysis of real-world protocols and often eliminates them entirely. We also propose a new general ideal key exchange functionality that allows higher-level protocols to use exchanged keys in an ideal manner. As a proof of concept, we apply our framework to three practical DH key exchange protocols: ISO 9798-3, SIGMA, and OPTLS.

**Keywords:** Protocol security, universal composability, Diffie-Hellman key exchange, reduction proofs, IITM model

## 1. Introduction
Analyzing the security of real-world protocols is a challenging and complex task, which has received significant attention in recent years [1]–[12]. Various approaches exist, ranging from manual to tool-supported methods, and from symbolic (Dolev-Yao-style) approaches that abstract from cryptographic details to those based on cryptographic games and direct cryptographic reasoning on implementations. Our focus is on cryptographic approaches.

These approaches aim to achieve modularity to manage the complexity of the analysis [3], [9], [13], [14]. However, security proofs remain intricate, tedious, and error-prone, primarily because each protocol requires repeated reduction proofs from its security notions to the underlying cryptographic primitives. Even in UC models [15]–[18], where modularity is a key feature, protocol designers must still perform these repetitive and error-prone reduction proofs.

Our primary goal is to provide a framework within the UC setting that minimizes or eliminates reduction proofs, making it applicable to a wide range of real-world security protocols. This should lead to shorter, more precise, and easier-to-understand proofs. The framework should also facilitate modular reasoning, allow reusing existing results, and provide security in arbitrary adversarial environments (universal composition).

The main idea behind our framework, which builds on and extends the work by Küsters and Tuengerthal [11], [19], is as follows. In UC models, security properties are expressed by ideal functionalities that perform tasks in an ideal secure way. A real protocol \( P \) may use an ideal functionality \( F \) (or several such functionalities) as a subroutine. Typically, one shows that \( P \) (along with \( F \)) realizes another (higher-level) ideal functionality \( F' \). Composition theorems in UC models then allow replacing \( F \) with its realization \( P \), implying that \( P \) using \( P \) realizes \( F' \).

In our framework, we provide an ideal functionality \( F_{\text{crypto}} \) that covers various cryptographic primitives, including standard DH key exchanges based on the DDH assumption, symmetric/asymmetric encryption, key derivation, MACing, and signing. We show that \( F_{\text{crypto}} \) can be realized by standard cryptographic assumptions, a one-time effort. In contrast, other approaches require reduction to cryptographic assumptions for each protocol. In our framework, one can prove the security of a protocol \( P \) using \( F_{\text{crypto}} \) without reduction proofs or hybrid arguments, at least for the primitives supported by \( F_{\text{crypto}} \). By composition theorems, \( F_{\text{crypto}} \) can be replaced by its realization, substituting ideal cryptographic primitives with their real counterparts.

All primitives provided by \( F_{\text{crypto}} \) can be used in an idealized way. For example, a protocol \( P \) using \( F_{\text{crypto}} \) can first exchange a key via an ideal DH key exchange, where messages are ideally signed, and then derive a MAC and a symmetric encryption key from the DH key. Both keys can still be used in an idealized way, performing ideal MACing and encryption.

In addition to \( F_{\text{crypto}} \), our framework provides new functionalities for ideal key exchange, allowing higher-level protocols to use session keys in an idealized manner. This greatly reduces or eliminates the need for reduction proofs, enabling protocol designers to argue on an intuitive information-theoretic level while providing universally composable security guarantees.

### Contributions
- **Extension of \( F_{\text{crypto}} \):** We extend the ideal functionality \( F_{\text{crypto}} \) from [19] to support standard DH key exchange with two key shares \( g^a \) and \( g^b \). This is crucial as many real-world protocols use DH key exchanges.
- **Adversary Interference Prevention:** Our functionality \( F_{\text{crypto}} \) ensures that the adversary cannot interfere with higher-level protocols while they use \( F_{\text{crypto}} \) for local computations. Leveraging the concept of responsive environments from Camenisch et al. [20], we provide this property, simplifying security proofs.
- **Realization of \( F_{\text{crypto}} \):** We propose and prove a realization for \( F_{\text{crypto}} \) based on standard cryptographic assumptions. The proof is complex, involving several hybrid arguments, but due to the modularity of our framework, this is a one-time effort.
- **New Key Exchange Functionalities:** Inspired by [11], we propose two new functionalities for both mutually and unilaterally authenticated key exchange with perfect forward secrecy. Unlike most other key exchange functionalities, ours allow higher-level protocols to use the exchanged key in an ideal way, avoiding reduction proofs.
- **Case Studies:** We demonstrate the usefulness of our framework by analyzing three real-world key exchange protocols: ISO 9798-3, SIGMA, and OPTLS. Using \( F_{\text{crypto}} \), none of the security proofs require reductions, hybrid arguments, or probabilistic reasoning.
- **First Analyses:** We provide the first analyses of unaltered versions of ISO 9798-3 and SIGMA in a UC model. We also analyze the 1-RTT non-static mode of OPTLS, identifying a subtle bug in the original reduction proof and showing that a slight variation of the protocol is secure under the original assumptions.

### Structure of the Paper
- **Section 2:** Briefly recalls the IITM model, the UC model used in this paper.
- **Section 3:** Details the ideal functionality \( F_{\text{crypto}} \).
- **Section 4:** Proposes and proves a realization for \( F_{\text{crypto}} \).
- **Section 5:** Presents our ideal key exchange functionalities.
- **Section 6:** Carries out case studies.
- **Section 7:** Discusses advantages, limitations, and related work.
- **Section 8:** Concludes the paper.
- **Appendix:** Provides further details and all proofs.

## 2. The IITM Model
In this section, we briefly recall the IITM model with responsive environments from [20], the UC model used in this paper. This model is based on the IITM model proposed in [16], [25].

### 2.1. The General Idea Behind Universal Composability
In UC models, one considers real and ideal protocols. An ideal protocol, or ideal functionality, specifies the desired behavior and security properties of a protocol. The real protocol, the one being analyzed, should realize the ideal protocol, meaning it should be at least as secure. Specifically, for every real adversary, there should exist an ideal adversary (simulator) such that no environment can distinguish the real from the ideal setting. Since, by definition, there are no successful attacks on the ideal protocol, attacks on the real protocol cannot be successful either.

### 2.2. The General Computational Model
The IITM model defines a general computational model in terms of systems of interactive Turing machines (IITMs). An IITM is a probabilistic polynomial-time Turing machine with named bidirectional tapes. The names determine how different machines are connected in a system.

A system \( S \) of IITMs is of the form \( S = M_1 | \cdots | M_k | !M_1' | \cdots | !M_j' \), where \( M_i \) and \( M_i' \) are machines. The operator ‘!’ indicates that an unbounded number of fresh copies of a machine may be generated; otherwise, there is at most one instance of the machine in every run. Systems with multiple copies of machines are needed for multi-party protocols or concurrent execution of multiple protocol instances. In a run, only one machine is active at a time, and a machine \( M \) can trigger another machine \( M' \) by sending a message on a connecting tape. Identifiers in the message can address specific copies of \( M' \). The first machine triggered is the master machine, and the environment always plays this role. A run stops if the master machine does not produce output or a machine outputs a message on a special decision tape. Systems have polynomial runtime in the security parameter and possibly the length of auxiliary input.

Two systems \( P \) and \( Q \) are indistinguishable (\( P \equiv Q \)) if the difference between the probability that \( P \) outputs 1 and the probability that \( Q \) outputs 1 is negligible in the security parameter \( \eta \).

### 2.3. Types of Systems
We use the following terminology for systems:
- **Protocol and Environmental Systems:** These have I/O and network interfaces, i.e., I/O and network tapes.
- **Adversarial Systems:** These only have a network interface.
- **Environmental Systems:** These may contain a master machine and may produce output on the decision tape.

**Responsive Environments and Adversaries:** These answer so-called restricting messages on the network immediately. Restricting messages are of the form \((\text{Respond}, \text{id}, m)\), where \(\text{id}\) and \(m\) are bit strings. When a responsive environment/adversary receives such a message from a system \( Q \) on a network tape \( t \), it must ensure that the next message \( Q \) receives is \((\text{id}, m')\) on tape \( t \) (except for a negligible set of runs). Restricting messages are useful for exchanging modeling-related information with the adversary without letting the adversary interfere with the protocol. For example, a restricting message can ask the adversary whether it wants to corrupt a new protocol instance, ensuring the adversary does not abuse this request to disrupt the protocol.

This completes the overview of the IITM model. In the following sections, we will detail the ideal functionality \( F_{\text{crypto}} \) and its realization, present our new key exchange functionalities, and carry out case studies to demonstrate the effectiveness of our framework.