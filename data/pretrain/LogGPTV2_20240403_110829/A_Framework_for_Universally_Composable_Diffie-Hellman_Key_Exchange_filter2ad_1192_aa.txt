title:A Framework for Universally Composable Diffie-Hellman Key Exchange
author:Ralf K&quot;usters and
Daniel Rausch
2017 IEEE Symposium on Security and Privacy
A Framework for Universally Composable Difﬁe-Hellman Key Exchange
Ralf K¨usters and Daniel Rausch
University of Stuttgart
Email: {ralf.kuesters, daniel.rausch}@informatik.uni-stuttgart.de
Stuttgart, Germany
Abstract—The analysis of real-world protocols, in particular
key exchange protocols and protocols building on these proto-
cols, is a very complex, error-prone, and tedious task. Besides
the complexity of the protocols itself, one important reason for
this is that the security of the protocols has to be reduced to the
security of the underlying cryptographic primitives for every
protocol time and again.
We would therefore like to get rid of reduction proofs for
real-world key exchange protocols as much as possible and in
many cases altogether, also for higher-level protocols which use
the exchanged keys. So far some ﬁrst steps have been taken in
this direction. But existing work is still quite limited, and, for
example, does not support Difﬁe-Hellman (DH) key exchange,
a prevalent cryptographic primitive for real-world protocols.
In this paper, building on work by K¨usters and Tuengerthal,
we provide an ideal functionality in the universal composability
setting which supports several common cryptographic primi-
tives, including DH key exchange. This functionality helps to
avoid reduction proofs in the analysis of real-world protocols
and often eliminates them completely. We also propose a new
general ideal key exchange functionality which allows higher-
level protocols to use exchanged keys in an ideal way. As a
proof of concept, we apply our framework to three practical
DH key exchange protocols, namely ISO 9798-3, SIGMA, and
OPTLS.
Keywords-protocol security, universal composability, Difﬁe-
Hellman key exchange, reduction proofs, IITM model
I. INTRODUCTION
The analysis of security protocols, in particular real-world
security protocols is a very complex and challenging task,
which has gained a lot of attention in the past few years (see,
e.g., [1]–[12]). Several approaches for the analysis of such
protocols exist, ranging from manual to tool-supported ap-
proaches and from symbolic (Dolev-Yao-style) approaches,
which abstract from cryptographic details, to approaches
based on cryptographic games and those which perform
cryptographic reasoning on implementations directly. In this
work, our focus lies on cryptographic approaches.
All such approaches strive to achieve some kind of mod-
ularity in order to tame the complexity of the analysis (see,
e.g., [3], [9], [13], [14]). But security proofs are typically
still very complex, tedious, and error-prone. Besides the
complexity of the protocols itself, an important reason for
this is that for every protocol one has to carry out reduction
proofs from the security notions of the protocols to the
cryptographic primitives employed time and again. Even in
universal composability models [15]–[18], for which modu-
larity is the driving force, protocol designers typically have
to carry out (tedious, repetitive, and error-prone) reduction
proofs.
One important goal of this work is therefore to provide
a framework within the setting of universal composability
(cf. Section II) which gets rid of reduction proofs as much as
possible or ideally even altogether, and which is applicable
to a wide range of real-world security protocols. This should
lead to proofs that are shorter, without being imprecise, as
well as easier to understand and carry out. Being based in
the setting of universal composability, the framework should
also facilitate modular reasoning, allow for re-using existing
results, and of course provide security in arbitrary adversarial
environments (universal composition).
The main idea behind our framework, which builds on
and extends work by K¨usters and Tuengerthal [11], [19] (see
below), is as follows. First recall that in models for universal
composability security properties are expressed by so-called
ideal functionalities, which perform their tasks in an ideal
secure way. A real protocol P(cid:2) may use an ideal function-
ality F (or several such functionalities) as a subroutine to
perform its task. Typically one shows that P(cid:2) (along with
F) realizes another (higher-level) ideal functionality, say
F(cid:2). Composition theorems available in models for universal
composability then allow one to replace F by its realization
P, which then implies that P(cid:2) using P realizes F(cid:2). Now,
in our framework we provide an ideal functionality Fcrypto
which covers various cryptographic primitives,
including
standard Difﬁe-Hellman (DH) key exchanges based on the
DDH assumption, symmetric/asymmetric encryption, key
derivation, MACing, and signing. We show that Fcrypto can
be realized by standard cryptographic assumptions, which is
a once and for all effort. In essentially all other approaches
for protocol analysis this kind of reduction to the crypto-
graphic assumptions of primitives has to be carried out time
and again in the analysis of every single protocol. In contrast,
in our framework one can prove the security of a protocol P
using Fcrypto without using any reduction proofs or hybrid
least not for the primitives supported by
arguments (at
Fcrypto). In a last step, by composition theorems, Fcrypto can
be replaced by its realization so that the ideal cryptographic
primitives are replaced by their real counterparts.
All primitives provided by Fcrypto can be used with each
© 2017, Ralf Küsters. Under license to IEEE.
DOI 10.1109/SP.2017.63
881
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
Altogether, when using these functionalities,
other in an idealized way. For example, a protocol P using
Fcrypto can ﬁrst exchange a key via an ideal Difﬁe-Hellman
key exchange where some messages are (ideally) signed
and then derive a MAC and a symmetric encryption key
from the DH key. Importantly, both keys can still be used in
an idealized way, i.e., one can perform ideal MACing and
encryption using these keys.
In addition to Fcrypto, our framework also provides new
functionalities for ideal key exchange that allow a higher
level protocol to still use a session key in an idealized way.
the need
for reduction proofs is greatly reduced or such proofs are
avoided completely in many cases. Protocol designers can
argue on an intuitive information theoretic level while being
able to analyze a protocol in a very modular way with
universally composable security guarantees.
Contributions. More speciﬁcally, our contributions are as
follows.
- We extend the ideal functionality Fcrypto from [19] to
also support standard DH key exchange with two key
shares ga and gb. This is a crucial step as many real-
world protocols support Difﬁe-Hellman key exchanges
and thus could not have been analyzed before using
Fcrypto. Designing such an extension requires care in order
for the extension to, on the one hand, provide all expected
properties and, on the other hand, still be realizable under
standard cryptographic assumptions.
- Our functionality Fcrypto ensures that the adversary on the
network cannot interfere with higher level protocols while
they use Fcrypto to perform local computations. While this
is expected and natural for such an ideal functionality, it
previously was impossible to model this property. Lever-
aging fundamental results of recent work by Camenisch
et al. [20], who have introduced the concept of responsive
environments, we can now indeed provide this property
for Fcrypto, which further simpliﬁes security proofs.
- We propose and prove a realization for Fcrypto based on
standard cryptographic assumptions. The proof is quite
involved, with several hybrid arguments, as Fcrypto allows
for a wide range of operations. But, as explained above,
due to the modularity of our framework this is a once and
for all effort.
- Inspired by an ideal functionality from [11], we propose
two new functionalities for both mutually and unilat-
erally authenticated key exchange with perfect forward
secrecy. Unlike most other key exchange functionalities,
which output the key, our functionalities allow higher-
level protocols to still use the exchanged key in an
ideal way, namely for idealized key derivation, symmetric
encryption, and MACing. Hence, as mentioned, one can
avoid reductions proofs also for the higher-level protocols,
such as secure channel protocols. Further discussion and
comparison with other key exchange functionalities is
provided in Section V.
- We illustrate the usefulness of our framework by showing
for three different real-world key exchange protocols that
they realize our key exchange functionalities with mutual
or unilateral authentication. Due to the use of Fcrypto,
none of the security proofs require any reductions, hybrid
arguments, or even probabilistic reasoning.
– We provide the ﬁrst analyses of unaltered versions of
the ISO 9798-3 [21] and the SIGMA [22] key exchange
protocols in an universal composability model (see also
Section VII).
– We analyze the 1-RTT non-static mode of the OPTLS
key exchange protocol [23] and ﬁnd a subtle bug
in the original reduction proof. We show that, under
the original security assumptions, a slight variation of
the protocol is a secure unilaterally authenticated and
universally composable key exchange protocol.
Structure of the Paper. In Section II, we brieﬂy recall the
IITM model, which is the universal composability model we
use in this paper. Section III details the ideal functionality
Fcrypto, with a realization proposed and proven in Section IV.
Our ideal key exchange functionalities are presented in
Section V. The case studies are carried out in Section VI. We
further discuss advantages and limitations of our framework
along with related work in Section VII. We conclude in
Section VIII. Further details are provided in the appendix.
Full details with all proofs are provided in our technical
report [24].
II. THE IITM MODEL
In this section, we brieﬂy recall the IITM model with
responsive environments from [20]. This is the model for
universal composability we use in this paper. This model
in turn is based on the IITM model proposed in [16], [25].
We provide a simpliﬁed and high level overview only as
the details of this model are not important to follow the
rest of the paper. In the IITM model, notions of universal
composability are deﬁned based on a general computational
model. The model also comes with general composition
theorems.
Before we recall the IITM model, we ﬁrst brieﬂy recall
the general idea behind universal composability.
The General Idea Behind Universal Composability. In
universal composability models, one considers real and ideal
protocols. An ideal protocol, also called ideal functionality,
speciﬁes the desired behavior of a protocol, and in particular,
its intended security properties. The real protocol, which is
the protocol one would like to analyze, is supposed to realize
the ideal protocol, i.e., it should be at least as secure as the
ideal protocol. More speciﬁcally, for every adversary on the
real protocol, called the real adversary, there should exist
an adversary on the ideal protocol, the ideal adversary (or
simulator), such that no environment can distinguish the real
882
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
k(cid:2) where the Mi and M
from the ideal setting. Now, since, by deﬁnition, there exists
no successful attack on the ideal protocol, attacks on the real
protocol cannot be successful either.
The General Computational Model. The general compu-
tational model of the IITM model is deﬁned in terms of sys-
tems of interactive Turing machines. An interactive Turing
machine (machine, for short) is a probabilistic polynomial-
time Turing machine with named bidirectional tapes. The
names determine how different machines are connected in a
system of machines.
A system S of IITMs is of the form S = M1 | ··· | Mk |
1 | ··· | !M
(cid:2)
(cid:2)
!M
j are machines. The
operator ‘ !’ indicates that in a run of a system an unbounded
number of (fresh) copies of a machine may be generated; for
machines without this operator there is at most one instance
of this machine in every run of the system. Systems in
which multiple copies of machines may be generated are
often needed, e.g., for multi-party protocols or for systems
describing the concurrent execution of multiple instances
of a protocol. In a run of a system S, at any time only
one machine is active and all other machines wait for
new input. A (copy of a) machine M can trigger another
(cid:2) by sending a message on a tape
(copy of a) machine M
that connects both machines. Identiﬁers, e.g., session and/or
party identiﬁers, contained in the message can be used to
(cid:2).1 If a new identiﬁer is used,
address a speciﬁc copy of M
(cid:2) is preﬁxed
a fresh copy of M
with ‘ !’). The ﬁrst machine to be triggered in a run of a
system is the so-called master machine. This machine is also
triggered if a machine does not produce output. In this paper,
the environment (see below) will always play the role of the
master machine. A run stops if the master machine does not
produce output or a machine outputs a message on a special
tape named decision. Such a message is considered to be
the overall output of the system. Systems will always have
polynomial runtime in the security parameter (and possibly
the length of auxiliary input).
Two systems P and Q are called indistinguishable (P ≡
Q) if the difference between the probability that P outputs
1 (on the decision tape) and the probability that Q outputs
1 is negligible in the security parameter η.
Types of Systems. We need the following terminology. For
a system S, the tapes of machines in S that do not have a
matching tape (belonging to another machine in S) are called
external. These tapes are grouped into I/O and network
tapes. We consider three different types of systems, model-
ing i) real and ideal protocols/functionalities, ii) adversaries
and simulators, and iii) environments: Protocol systems and
environmental systems are systems which have an I/O and
network interface,
they may have I/O and network
(cid:2) will be generated (if M
i.e.,
1The IITM model contains a general addressing mechanisms. In this
paper, we use a speciﬁc instantiation of this mechanism as will be clear
from the subsequent sections.
883
tapes. Adversarial systems only have a network interface.
Environmental systems may contain a master machine and
may produce output on the decision tape.
(cid:2)), for some bit string m
Environmental systems and adversarial systems are called
responsive if they answer so-called restricting messages on
the network immediately. Restricting messages are of the
form (Respond, id , m) where id and m are arbitrary bit
strings. When a responsive environment/adversary receives
such a message from a system Q on some network tape t,
it has to ensure that the next message that Q receives is
(cid:2), and that this
of the form (id , m
message is received on tape t (except for a negligible set
of runs). In this sense, responsive environments/adversaries
have to respond immediately to restricting messages, i.e.,
if an environment wants to continue its interaction with Q
(cid:2). Restricting
it ﬁrst has to send the expected response m
messages are useful for exchanging purely modeling related
information with the adversary without letting the adversary
interfere with the protocol in-between. For example, one can
use a restricting message to ask the adversary whether he
wants to corrupt a new protocol instance. Note that such
a request does not actually exist in reality and thus no real
adversary can abuse it to disrupt the protocol execution. Con-
sequently, in a security model, the adversary should also not
have this ability. Restricting messages allow us enforce this