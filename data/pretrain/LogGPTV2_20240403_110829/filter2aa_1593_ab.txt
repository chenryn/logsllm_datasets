# Scanning vs. List Traversal

### Scanning
- **Performance**: Can be very slow.
- **Assurance**: Tends to be high assurance.

### Link/Pointer Traversal
- **Clarity**: Easily confused.
- **Performance**: Super fast!

---

## What is a Process?

A process is an address space configuration that serves as a container for threads, which are executed on a CPU. Threads within the same process share the address space. It can be challenging to determine if all threads are accounted for. Additionally, injecting a library or thread into an existing process is possible, which raises integrity concerns, such as code overwrite or injection. One method to ensure integrity is through hash checks.

---

## Process Detection

**Volatility** is a powerful tool for process detection. It compares several logical identifiers:
- **PsActiveProcessHead linked list**
- **EPROCESS pool scanning**
- **ETHREAD pool scanning** (then references the owning EPROCESS)
- **PspCidTable**
- **Csrss.exe handle table**
- **Csrss.exe internal linked list** (unavailable in Vista and later versions)

For more information, refer to: [Volatility Command Reference](https://code.google.com/p/volatility/wiki/CommandReference#psxview)

---

## 64-bit Process Detection

### Earlier Kernel Code Presentation
- **Example**: CSW14 Diff CPU Page Table & Logical Kernel Objects (to detect hidden kernel modules, "rootkit revealer").
- **Page Tables**: Uses page tables for locating x86 paging structures in memory images. Refer to: [Locating x86 Paging Structures in Memory Images](https://www.cs.umd.edu/~ksaur/saurgrizzard.pdf) by Karla Saur and Julian B. Grizzard.
- **New Technique**: The new process detection technique is faster, requiring only a single pass. It is similar to "pmodump" but enhanced with 64-bit support and additional checks, providing much more verifiability.

### Integrity of 64-bit Process Detection
- **Security**: Not easily attacked; many modifications result in a Blue Screen of Death (BSOD).
- **Memory Checks**: Can extract candidate memory for integrity checking of memory pages to fully qualify.
- **Non-Abortable Check**: Can make the check non-abortable, though it will be slower.
- **Current Check**: The current check is highly effective, with room for improvement in countermeasures and performance.

---

## A Quick Indirection

### Slides 37-39 from Dave Probert (Windows Kernel Architect, Microsoft)
- **Topic**: Windows Kernel Architecture Internals.
- **Next Slide**: Shows a big hint related to process page table layout/configuration, with numerous arrows for clarity.

---

## Self Map Trick in Linux

### Virtual Memory in the IA-64 Linux Kernel
- **Authors**: Stephane Eranian and David Mosberger.
- **Section 4.3.2**: Virtually-mapped linear page tables.
- **Quote**: "Linear page tables are not very practical when implemented in physical memory. The trick that makes this possible is to place a self-mapping entry in the global directory."

---

## Self Map Process Detection in Windows AMD64

- **Self Map**: Exists for each process, not just the kernel.
- **Examining a Page Table**: Use `!process 0 0 dirbase/cr3` (e.g., 7820e000) and `!dq 7820e000` to find the current PFN.
- **PFN FTW Trick**: Valid PFNs are bounded by system physical memory constraints.

### Attacks on Self Map Detection
- **Performance Attacks**: De-tuning performance can validate spoof entries and malformed cases.
- **Windows Behavior**: Windows zeros memory quickly, so far, no exiting processes have been observed.
- **Validation**: Using `!ed [physical]` can assess evasive techniques. Destroying the self map results in a BSOD.
- **Feedback Testing**: Needed to identify better, more comprehensive PTE flag checks (edge cases, missed tables, or extra checks).

---

## Implementation

- **Single Line**: The implementation is essentially in one line.
- **Example Execution**: `.vmem` starts at offset 0, `.DMP` at 0x2000+, or other auto-detected header offsets.

---

## Detecting Guest Processes from Host Dump

- **Host Memory Dump**: Includes page tables for every guest VM process and host process entries.
- **Growth Potential**: Deep integration with Hypervisor page mapping data (e.g., parsing of MMInternal.h / MMPAGESUBPOOL in VirtualBox).
- **Issues**:
  - **Hypervisor Wiping**: May not wipe when moving an instance or after suspension (ghost processes).
  - **Nested Paging**: Not a problem.

### Skew in Guest Instances

- **Kernel PFN**: Observed as the first large jump in a range of skewed diff values.
- **Initial Values**: Reflective of the host system, with consistent diff values.
- **Final Host Processes**: Identifiable by diff realignment.

---

## Detected Memory Runs

- **Gap Size**: Round value by offset to find gap size, adjust to automate memory run detection.
- **Blog Post**: Takahiro Haruyama's blog post on related issues (large memory) and memory run detection issues from logical sources.
- **Rounding Example**:
  - `ROUND_UP(0xb4b56000, 0x40000000) = 0xc0000..`
  - `ROUND_DOWN(0x1181f1000, 0x40000000)`

---

## Future Weird Machine Overload

- **Microsoft Research**: Tracking Rootkit Footprints with a Practical Memory Analysis System (MAS) by Weidong Cui, Marcus Peinado, Zhilei Xu, and Ellick Chan.
- **MAS Steps**: Static analysis, memory traversal, and integrity checking.
- **Verification Challenge**: Verifying this level of state without source code is a significant challenge.

---

## Public Symbols for Verification

- **Public Symbols, RTTI, or Type Inference**: To find and verify all pointers.
- **Thread Stack Return**: Into verifiable code (anti-ROP attack).
- **Advanced Methods**: Kernel pool verification without source code.
- **Integrity Checking**: Function pointers in kernel pools via virtual machine introspection.
- **Trusted Logs and Tracing**: If code integrity, process, and thread detection are in place, the future looks promising for defense.

---

## Summary

- **Attacks**: Worst-case scenario, most weird machine activity can be detected through simple tracing, logging, and monitoring tools.
- **Defenses**: Detecting hidden 64-bit processes.
- **Future**: Deep verifiability for more devices (get free The Memory Cruncher™ TMC & BlockWatch™).
- **Final Note**: Defensive fun and profit with the D!

### Recommendations
- **Use a VM**: Simplify memory dumping.
- **Use ProcDetect**: Have fun detecting!
- **Process Hiding Rootkits**: Are now dead.
- **64-bits**: Provides peace of mind.
- **Detection Scope**: Can detect a process anywhere (host, guest, nested, on the network).

### Issues, Considerations, and Caveats
- **Hypervisor Use**: Secure the guest/host (very hardened host).
- **Hypervisor Escape**: High-value risk for exploitation (likely not you).
- **BluePill Type Attacks**: Performance hit of nesting should be obvious.
- **SelfMap Detection**: Relies on page tables. Consider "no paging process," TSS considerations, and remote DMA.

---

## Thank You & Questions

- **Acknowledgments**: Thanks to the many security professionals who analyze memory, reverse-engineer, and discuss their understanding.
- **References**: Follow embedded links and their links.

---

**IOActive, Inc. Copyright ©2014. All Rights Reserved.**