# 请参见
*   `docker container run`的`help`选项:
```
$ docker container run --help 
```
*   Docker 网站上的文档:
[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)T2】
[https://docs . docker . com/engine/user guide/networking/default _ network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)
# 与其他容器共享 IP 地址
通常，当我们启动一个容器时，Docker 引擎会为该容器分配一个 IP 地址。当然，我们可以使用`host`网络模式将容器附加到 Docker 主机的 IP 地址，或者使用`none`网络模式启动一个没有分配任何 IP 地址的容器。但是，您可能会遇到多个服务必须共享同一个 IP 地址的情况。在这种情况下，您可以在一个容器中运行多个服务；然而，这种做法被认为是反容器模式。
更好的选择是在单独的容器中运行每个服务，但共享 IP 地址，如下图所示:
![](img/ac4f5cf6-c227-4edf-8b37-958743a0de67.png)
本质上，Docker 引擎为 IP 容器分配一个 IP 地址，然后该 IP 地址被 **Service1** 、 **Service2、**和 **Service3** 容器继承。在这个食谱中，我们将启动一个容器，并与另一个容器共享 IP 地址。
# 准备好
Before we begin, ensure that the Docker daemon is running and has access to the alpine image.
# 怎么做...
执行以下步骤:
1.  首先，在后台启动一个容器，如下图所示:
![](img/4879f8d6-4681-4e41-8a87-de195137c117.png)
在这里，容器被命名为`ipcontainer`。
2.  看`ipcontainer`的 IP 地址，如下图截图所示:
![](img/5999a32c-f649-430d-81aa-1a33a90a87f1.png)
3.  最后，让我们通过将其网络附加到`ipcontainer`来启动一个容器，并显示附加到该容器的 IP 地址:
![](img/bd58e2bc-3bd3-452a-a9f1-4c96bee71e09.png)
如步骤 2 和步骤 3 所示，步骤 2 中`ipcontainer`的`eth0`和步骤 3 中的瞬态容器具有相同的`4`接口索引和`172.17.0.2`的 IP 地址。
# 它是如何工作的...
在这个配方中，我们创建了一个容器，然后创建了后续的容器来使用第一个容器的网络。在这种情况下，Docker 引擎将为第一个容器创建一个网络名称空间，然后也为其他容器分配相同的名称空间。
# 还有更多...
当容器共享网络命名空间时，创建命名空间的原始容器必须处于运行状态，直到其他容器运行。如果原始容器在其他容器之前停止，它将使其他容器处于不可用状态，如以下代码所示:
![](img/46553fe6-4453-4b09-a913-6b36de7e2b1f.png)
Kubernetes([http://kubernetes.io/](http://kubernetes.io/))容器中的容器使用这个技巧在容器中的容器之间共享 IP 地址。我们将在[第 8 章](08.html)、 *Docker 编排和托管平台*中再次讨论这一点。
# 请参见
*   `docker container run`的`help`选项:
```
$ docker container run --help
```
*   Docker 网站上的文档:
    *   [https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)
    *   [https://docs . docker . com/engine/user guide/networking/default _ network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)
# 创建用户定义的桥接网络
在前面的食谱中，我们使用了默认的桥，当我们安装 Docker 时，它会被激活。通过默认网桥连接的容器可以使用 IP 地址相互通信，但不能使用容器的名称。在微服务体系结构中，多个容器被协调起来以提供有意义的更高级服务，这些容器必须有效地相互通信。容器 IP 地址是在容器启动时分配的，因此它不适用于多容器编排。Docker 试图通过使用`docker container run`命令的`--link`选项静态链接容器来解决这个问题。不幸的是，链接的容器有一个紧密耦合的容器生命周期，因此容器的重启可能会妨碍完整的解决方案，并且它也不可扩展。后来，在 1.9 和 1.12 版本之间，Docker 通过用户定义的网络引入了一系列新功能，解决了前面提到的多容器编排和通信的许多缺点。
用户定义的网桥网络在功能上非常类似于默认网桥；但是，它提供了以下附加功能:
*   通过嵌入式 DNS 服务器进行服务发现，非常适合多容器编排和通信。
*   基于 DNS 的负载平衡，另一个很酷的功能，补充了多容器编排和通信。值得注意的是，这个特性允许我们无缝透明地扩展容器。
*   或者，我们可以为网桥配置自己的子网。
*   或者，我们可以从网桥的子网手动为容器分配一个 IP 地址。
在这个食谱中，我们将创建一个用户定义的网络，并仔细检查它的一些基本结构。在下面的方法中，我们将在用户定义的网桥中创建容器，并演示用户定义的网桥网络的功能。
# 准备好
在我们开始之前，请确保 Docker 守护程序正在运行。
# 怎么做...
1.  让我们首先使用`docker network create`命令创建一个新的用户定义的桥接网络，如下图所示:
![](img/e3e227db-7f53-4643-af9a-b03b6cda6d1b.png)
这里，用户定义的桥接网络被命名为`cookbook`。
2.  使用`docker network inspect`命令检查用户定义的网桥网络`cookbook`:
![](img/8232c52a-1ffc-4ca7-8b9d-c8f8f8a83218.png)
这里，`172.18.0.0/16`子网被分配给用户定义的网桥网络食谱，`172.18.0.1 ` IP 地址被分配给网关。
3.  现在让我们看看 Docker 主机的接口细节:
![](img/4133ca60-f3c4-4a8d-a743-7f27cf2f9166.png)
显然，一个新的 Linux 桥接口`br-408276d6b1f2`被创建，并被分配了地址`172.18.0.1/16`。网桥名称是通过将`br-`字符串与网络标识的前 12 位数字连接起来而得到的。
4.  最后，让我们看看`iptables`来理解用户定义桥的行为:
![](img/75c6ec27-5f70-47c6-97d5-f702f6394f14.png)
如前一张截图中突出显示的，已经为`172.18.0.0/16`子网添加了一个 NAT `POSTROUTING`规则，就像默认网桥一样。
# 它是如何工作的...
当我们创建一个用户定义的网桥时，Docker 会创建一个 Linux 网桥接口，并在`iptables`中创建必要的 NAT 规则。
# 还有更多...
`docker network create`命令提供了十几个选项来根据您的业务需求定制您的网络。在以下示例中，我们在`10.1.0.0/16`子网中创建了一个用户定义的网络:
```
$ docker network create 10dot1net --subnet 10.1.0.0/16
```
# 请参见
*   `docker network create`的`help`选项:
```
$ docker network create --help
```
*   Docker 网站上的文档:
[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)
[https://docs . docker . com/engine/user guide/networking/default _ network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)
# 发现和负载平衡容器
在前面的方法中，我们研究了用户定义的桥接网络的优势，以及创建和检查用户定义的桥接网络的步骤。在这个配方中，我们将构建一个容器拓扑，如下图所示:
![](img/bca26213-7ec7-47f3-bf11-259439de01a0.png)
在这个拓扑中，我们将像服务一样启动`container1`和`container2`，并使用一个临时容器来演示用户定义的桥接网络的以下功能:
*   通过嵌入式域名系统服务器发现服务
*   基于域名系统的负载平衡
# 准备好
在我们开始之前，请确保 Docker 守护程序正在运行。
# 怎么做...
执行以下步骤:
1.  让我们从旋转两个容器`container1`和`container2`开始，使用`docker container run`命令将它们连接到用户定义的桥接网络`cookbook`，如下图所示:
![](img/a8081a8d-3540-442e-81a7-5be4db3adec8.png)
在这里，`--network-alias`选项帮助我们使用一个别名对多个容器进行分组，并使用嵌入式 DNS 进行负载平衡。嵌入式域名系统提供循环负载平衡。
2.  使用`docker container inspect`命令查看`container1`和`container2`的 IP 地址:
![](img/9377c3b1-277f-46f2-813e-7489e3d0ff09.png)
这里，`.NetworkSettings.Networks.cookbook.IPAddress`过滤器应用于`--format`选项，因为我们知道容器连接到用户定义的桥接网络`cookbook`。
3.  现在，让我们使用瞬态容器来理解用户定义网络的服务发现功能，如下图所示:
![](img/03bb6779-a6a7-4c59-8b94-6224d11f8dcd.png)
很酷，不是吗！现在，容器可以通过使用容器的名称相互通信。这种服务发现功能极大地简化了多容器编排。
4.  深入研究了服务发现功能之后，让我们通过 ping 网络别名`netalias`，进一步了解用户自定义网络的 DNS 负载均衡能力，如下图截图所示:
![](img/986ee677-ef65-4d1e-91d6-795fa391b3b6.png)
从前面的截图中我们可以看出，`netalias`上的第一个`ping`得到了 IP 地址`172.18.0.3`的响应，就是`container2`，而`netalias`上的第二个 ping 得到了`172.18.0.2`的响应，就是`container1`。本质上，嵌入式域名系统负载平衡器使用循环算法解决了`netalias`。
# 它是如何工作的...
当容器连接到用户定义的网络时，Docker 引擎会将容器的名称及其网络别名(如果存在)添加到用户定义的网络的 DNS 记录中。然后 Docker 通过`127.0.0.11`托管的嵌入式 DNS 将这些细节共享给连接到同一用户定义网络的其他容器。
# 还有更多...
*   像任何 DNS 服务器一样，我们可以使用`dig`或`nslookup`查询我们的嵌入式 DNS 服务器的 DNS 记录。这里，我们使用名为`sequenceiq/alpine-dig`的第三方映像来查询 DNS 记录，因为该映像附带有`dig`命令，而不是没有`dig`命令的官方`alpine`映像:
![](img/e2f8949d-bace-49a8-b283-c4f01f8d4be7.png)
显然，域名系统条目`netalias`有两个 IP 地址`172.18.0.3`和`172.18.0.2`，作为其`A`记录。
*   像`nginx`这样的应用通常会缓存 IP 地址，因此基于 DNS 的负载平衡解决方案通常不能很好地适用于此类应用。