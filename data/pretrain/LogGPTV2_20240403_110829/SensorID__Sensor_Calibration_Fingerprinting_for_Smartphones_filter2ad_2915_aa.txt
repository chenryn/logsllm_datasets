title:SensorID: Sensor Calibration Fingerprinting for Smartphones
author:Jiexin Zhang and
Alastair R. Beresford and
Ian Sheret
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
SENSORID: Sensor Calibration Fingerprinting for
Smartphones
Jiexin Zhang, Alastair R. Beresford
Ian Sheret
University of Cambridge
{jz448, arb33}@cl.cam.ac.uk
Polymath Insight Limited
PI:EMAIL
Abstract—Sensors are an essential component of many com-
puter systems today. Mobile devices are a good example, con-
taining a vast array of sensors from accelerometers and GPS
units, to cameras and microphones. Data from these sensors
are accessible to application programmers who can use this
data to build context-aware applications. Good sensor accuracy
is often crucial, and therefore manufacturers often use per-
device factory calibration to compensate for systematic errors
introduced during manufacture. In this paper we explore a
new type of ﬁngerprinting attack on sensor data: calibration
ﬁngerprinting. A calibration ﬁngerprinting attack infers the per-
device factory calibration data from a device by careful analysis
of the sensor output alone. Such an attack does not require
direct access to any calibration parameters since these are
often embedded inside the ﬁrmware of the device and are not
directly accessible by application developers. We demonstrate the
potential of this new class of attack by performing calibration
ﬁngerprinting attacks on the inertial measurement unit sensors
found in iOS and Android devices. These sensors are good
candidates because access to these sensors does not require any
special permissions, and the data can be accessed via both a
native app installed on a device and also by JavaScript when
visiting a website on an iOS and Android device. We ﬁnd we are
able to perform a very effective calibration ﬁngerprinting attack:
our approach requires fewer than 100 samples of sensor data and
takes less than one second to collect and process into a device
ﬁngerprint that does not change over time or after factory reset.
We demonstrate that our approach is very likely to produce
globally unique ﬁngerprints for iOS devices, with an estimated
67 bits of entropy in the ﬁngerprint for iPhone 6S devices. In
addition, we ﬁnd that the accelerometer of Google Pixel 2 and
Pixel 3 devices can also be ﬁngerprinted by our approach.
Index Terms—Fingerprint; Calibration; Motion Sensors; iOS
I. INTRODUCTION
Mobile devices, especially smartphones and tablets, have
gained considerable popularity due to their portability, user
experience, and rich functionality. Recent statistics show that
around 69% of the total digital media time spent by Americans
was taken up by mobile devices and 87% of the total mobile
time was spent in apps in December 2016 [1]. The faltering
engagement with laptops and desktops has driven advertisers
to enthusiastically seek effective approaches to track the ac-
tivities of users on mobile platforms.
Device ﬁngerprinting aims to generate a distinctive signa-
ture, or ﬁngerprint, that uniquely identiﬁes a speciﬁc com-
puting device. Once a reliable device ﬁngerprint is available,
advertisers can use it to track users online and ofﬂine, study
their behavior, deliver tailored content, etc. It can also help
advertisers target potential customers and grow their business.
To protect user privacy, both Android and iOS have applied
a variety of measures to prevent device ﬁngerprinting. In An-
droid, the countermeasures are usually enforced by requiring
developers to ask for user permission to use privacy-sensitive
the READ_PHONE_STATE permission
APIs. For instance,
enables developers to access the IMEI (International Mobile
Equipment Identity) number and the phone number. The
ACCESS_WIFI_STATE and BLUETOOTH permissions allow
developers to access the MAC address of the WLAN and
Bluetooth modules, respectively. These identiﬁers make good
device ﬁngerprints since they are globally unique and are
difﬁcult to change, and a recent study has shown that the
ACCESS_WIFI_STATE permission, an install-time permis-
sion, has been used in 41% of 2700 most popular apps in the
Google Play Store [2].
Currently, there is no reliable way to get a unique identiﬁer
for iOS devices. To address privacy concerns, Apple removed
developer access to the UDID (Unique Device Identiﬁer)
and MAC addresses of hardware modules in iOS 7. From
iOS 11, Apple introduced Intelligent Tracking Prevention
(ITP) to mobile Safari, the default web browser on iOS that
holds around 15% of the global browser market, to restrict
cookie tracking. With iOS 12, Apple also prevents advertisers
from collecting unique characteristics of iOS devices through
mobile Safari.1 While it is still possible to track iOS users
by the advertising identiﬁer built into the operating system,
this method comes with several drawbacks. First, iOS allows
users to reset the advertising identiﬁer at any time. In addition,
enabling the “limit ad tracking” option in iOS prevents access
to this identiﬁer. Moreover, apps that request this identiﬁer
but do not serve any in-app advertisements will be rejected by
App Store. Last but not least, the advertising identiﬁer is not
accessible from mobile browsers. Thus, it cannot be used to
track users across apps and websites.
In this paper we show that our calibration ﬁngerprinting
attack on iOS and Android (Google Pixel 2 and Pixel 3)
devices provides a device ﬁngerprint which the user cannot
change and which works across both apps and websites.
Modern mobile devices are shipped with a variety of
embedded sensors, such as an accelerometer, gyroscope, and
1https://www.apple.com/ios/ios-12/features
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:43)(cid:74)(cid:70)(cid:89)(cid:74)(cid:79)(cid:1)(cid:59)(cid:73)(cid:66)(cid:79)(cid:72)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:24)(cid:19)
(cid:23)(cid:20)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
magnetometer. Mobile apps rely on these sensors to provide
rich functionality, such as workout tracking, improved user
interface interaction, and better gaming performance. Natural
variation during the manufacture of embedded sensors means
that the output of each sensor is unique and therefore they
may be exploited to create a device ﬁngerprint.
Previous studies applied machine learning techniques di-
rectly to sensor data in an attempt to create device ﬁngerprints
for smartphones [3], [4]. Unfortunately,
this approach has
several drawbacks. First,
these models are susceptible to
environmental conditions, such as temperature and noise, so
accuracy decreases over time. Second, they either require the
smartphone to be placed in a stationary position (e.g., on a
desk) or have a relatively low accuracy when devices are
moved. When devices were held in a hand, state-of-the-art
work by Das et al. achieved an accuracy of around 60% in an
open-world setting with the iPhone 6, which is equivalent to
13 bits of entropy (§VII-D) [4]. In comparison, we achieve 67
bits of entropy for the iPhone 6S.
In our work, we take a different approach. Instead of feeding
sensor outputs into machine learning algorithms, we infer the
per-device factory calibration data from the output of sensors
such as the gyroscope, accelerometer, and magnetometer. This
calibration data can then be used to construct a unique device
ﬁngerprint. We call this a calibration ﬁngerprinting attack.
This paper describes this new type of attack and demon-
strates its effectiveness on gyroscope and magnetometer data
available in iOS, and on accelerometer data in Google Pixel
2/3. We chose these sensors because they do not require
any special permissions to access, and the accelerometer
and gyroscope data can be accessed via both a native app
installed on a device and also by JavaScript when the user
visits a website. While we have focused on motion sensors,
we anticipate that a calibration-based ﬁngerprint can also be
generated for other sensors across many different devices,
including the camera, touchscreen, and battery.
We make the following contributions in this paper:
1) We introduce a new method of ﬁngerprinting a device:
the calibration ﬁngerprinting attack.
2) We describe how factory calibration data can be ex-
tracted from both the magnetometer and gyroscope
found on all recent iOS devices.
3) We demonstrate that the magnetometer and gyroscope
calibration data together form a reliable ﬁngerprint,
which we call the SENSORID; the SENSORID does not
change after factory reset or operating system update.
4) We collect motion sensor data from 870 iOS devices and
show that our approach can generate a globally unique
identiﬁer; we show that the SENSORID of the iPhone
6S has about 67 bits of entropy.
5) We implement our approach as an iOS app and ﬁnd the
approach is lightweight and efﬁcient: data collection and
processing typically takes less than one second in total.
6) We ﬁnd that the accelerometer of Google Pixel 2 and
Pixel 3 can be ﬁngerprinted using the proposed method.
7) We propose several mitigation techniques.
II. CALIBRATION BACKGROUND
Motion sensors used in modern smartphones, including the
accelerometer, gyroscope, and magnetometer, are based on
MEMS (Micro-Electro-Mechanical Systems) technology and
use microfabrication to emulate the mechanical parts. The
accelerometer and gyroscope measure the proper acceleration
and rotation speed of a device in each of the axes, respectively.
Most smartphones and smartwatches are equipped with one
triaxial accelerometer and one triaxial gyroscope. In particular,
gyroscope has appeared in every iOS device since the iPhone
3GS and iPad 1. The magnetometer measures the Earth’s
magnetic ﬁeld relative to the device. It is included in all iPhone
and iPad models, excluding the iPhone 2G/3G.
Although MEMS technology has greatly reduced the size
and cost of motion sensors, MEMS sensors are usually less
accurate than their optical counterparts due to various types of
error. In general, these errors can be categorized as determinis-
tic and random: random errors are usually caused by electronic
noise interfering with the output of sensors, which change
over time and have to be modeled stochastically; deterministic
errors are produced by manufacturing imperfections and can
be classiﬁed into three categories: bias, scaling factor, and
nonorthogonality misalignment errors [5], [6].
Calibration aims to identify and remove the deterministic
errors from the sensor. Many commercial sensors are fac-
tory calibrated and their calibration parameters are stored in
ﬁrmware or non-volatile memory, providing accurate measure-
ments off the shelf [7]. In the context of mobile devices, the
main beneﬁt of per-device calibration is that it allows more
accurate attitude estimation [8]. By contrast, sensors embedded
in low-cost smartphones are usually poorly calibrated due to
the high cost and complexity of factory calibration [9]. For an
individual manufacturer, the choice of sensor calibration is,
therefore, an engineering trade-off.
MEMS sensors usually convert and store the analog mea-
surement in a digital register through an Analog-to-Digital
Converter (ADC) module. For a triaxial motion sensor, let
A = [Ax, Ay, Az]T
be the sensor ADC output. Considering
all three kinds of deterministic errors, the output of the motion
sensor can be represented by the following equation [10]:
⎤
⎦ =
⎡
⎣Ox
Oy
Oz
⎡
⎣Sx
0
0
⎤
⎦
⎡
⎣Nxx Nxy Nxz
Nyx Nyy Nyz
Nzx Nzy Nzz
⎤
⎦
⎡
⎣Ax
Ay
Az
⎤
⎦ +
0
Sy
0
0
0
Sz
⎤
⎦ (1)
⎡
⎣Bx
By
Bz
Here, Si ∈ S is the scale factor; Nij ∈ N represents the
nonorthogonality between axis i and j; and Bi ∈ B is the bias.
A sensor’s sensitivity, or gain, is deﬁned as the ratio between
the output signal and measured property. A sensor’s nominal
gain is the intended operating sensitivity of the sensor. It is a
single value that is usually documented in the sensor datasheet.
We use F to denote a sensor’s nominal gain in this paper.
If a sensor is ideal, its scale matrix S and nonorthogonality
matrix N should be F · I and I, respectively, where I is an
identity matrix. However, due to the existence of errors, the
(cid:23)(cid:20)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
scale factors can be as large as 2% of the nominal gain [11].
The above equation can be further simpliﬁed as:
O = GA + B
(2)
where G = SN is referred to as the gain matrix.
A myriad of calibration techniques have been proposed to
calculate the gain matrix and bias vector during manufacture.
Overall, these methods can be divided into four groups: high-
precision equipment, multi-position, Kalman ﬁlter, and vision
based [5]. Manufacturers can choose to only calibrate the bias
vector to lower the cost. Once factory calibration is ﬁnished,
the calibration parameters of the sensor will be stored in non-
volatile memory inside the device and should not change over
time [12], [13]. Details of the calibration process used by
manufacturers are not made public.
III. ATTACK METHOD
The goal of the adversary in this paper is to obtain a reliable
ﬁngerprint from the built-in motion sensors of a smartphone.
Our threat model is as follows. We assume an adversary is
able to record motion sensor samples from a smartphone. The
attacker can do this if the user installs an app, or visits a
website (currently accelerometer and gyroscope only), under
the control of the attacker. Furthermore, we assume that
the software embedded in the app or web page is able to
communicate with a remote server under the control of the
attacker; this is typically the case for both apps and web
pages. We ﬁrst look at the gyroscope on iOS; the calibration
ﬁngerprinting for other sensors and devices is discussed later.
A. Factory Calibration in Mobile Devices
Both Android and iOS provide APIs to access the raw and
fused motion sensor data. Web developers can also access
the fused accelerometer and gyroscope data via JavaScript.
According to the Android documentation, the raw or uncali-
brated data is the sensor output after factory calibration and
temperature compensation, while the fused or calibrated sen-
sor data API applies bias compensation and noise correction
on the raw measurements.2 On iOS, it is less clear from the
documentation whether the raw data is factory calibrated. To
investigate this, we collect the raw gyroscope data from both
an iPhone X and a Samsung Galaxy S8. Both phones are
placed on a ﬂat desk and stay still during data collection.
Fig. 1 (a) presents the raw gyroscope measurements col-
lected by the two devices. From the ﬁgure, we can clearly
observe the quantization. This is because the outputs of the
gyroscope ADC are integers. Taking the difference between
two sensor readings directly reveals the gain of the sensor.
According to Equation 2, the difference between two mea-
surements, ΔO, can be calculated as:
ΔO = GΔA
(3)
where ΔA is the difference between the corresponding ADC
outputs.
2https://developer.android.com/guide/topics/sensors/sensors motion.html
Samsung Galaxy S8
iPhone X
1
0
−1
−2
)
s
/
g
e
d
(
t
u
p
t
u
O
e
p
o
c
s
o
r
y
G
0.4
0.0
−0.4
0
500
1000
1500
−0.8
2000
0
Sequence
500
1000
1500
2000
Axis
x
y
z
(a) Raw gyroscope measurements
Samsung Galaxy S8
iPhone X
0.06
0.04
0.02
0.00
−0.02
−0.04
−0.06
/
)
s
g
e
d
(
s
t
u
p
t
u
O
e
p
o
c
s
o
r
y
G
n
e
e
w
t
e
b
e
c
n
e
r
e
f
f
i
D
0
500
1000
1500
2000 0
Sequence
500
1000
1500
2000
Axis
x
y