**作者：腾讯安全科恩实验室  
原文链接：**
## 概要
近年来，5G蜂窝网络被广泛应用。设备为了加入5G网络，都必须配备一个5G调制解调器，负责调制信号和执行无线电协议。该组件通常也被称为基带。这些组件非常重要，因为它们负责处理来自无线电网络的不可信数据。在之前的工作中，科恩实验室研究了上一代网络（2G
3G 4G）的安全调制解调器，并实现了远程无接触的0-click代码执行。
本次 **Black Hat USA 2021** ，科恩实验室成员Marco与Xingyu Chen在北京时间8月6日凌晨以线上形式分享了议题
**《基带利用：远程5G智能手机代码执行》**
。该议题探讨了5G网络发生的变化以及安全性方面的改进，并证明了仍然有可能通过无线的方式攻击5G调制解调器完成远程代码执行。
**议题完整白皮书下载见文末**
## 作者简介
**Marco：** 腾讯科恩实验室高级研究员，研究涉猎iOS、Safari、VMWare、基带等多个方向，多次作为核心成员参与Pwn2Own、Mobile
Pwn2Own并获得冠军，多次在国际安全会议上进行演讲，包括Black Hat USA, DEF CON, CanSecWest, ZeroNights,
Codegate, HITB and ShakaCon等。
**Xingyu Chen：**
腾讯科恩实验室安全研究员。主要研究虚拟化和移动安全，曾在不同的云产品和智能手机的低级固件中发现了许多关键漏洞。曾作为A*0*E联合战队选手参加多场CTF比赛，也是DEF
CON 28 CTF 决赛总冠军队伍成员。多次在国内外安全会议上进行演讲，包括OffensiveCon、Zer0Con和Tensec等。
## 1.背景
多年来，5G网络和基带的安全问题一直没有得到全面的讨论。我们之前的工作是研究老一代网络的安全性，并研究了市面上多款调制解调器的实现，安全研究员Amat
Cama也发表了一项关于老一代网络的研究，展示了如何在pwn2own竞赛上成功地攻破三星Shannon基带。来自Comsecuris的研究分析了三星和英特尔基带的安全性。
建议读者将上述这些研究作为理解和熟悉本文的参考。我们也将对研究背景和5G网络的新概念进行简单描述。
## 2.目标介绍
我们购买了当时可用的几款5G智能手机，他们都支持5G中的“New Radio”。 **5G设备区分：** \-非独立模式（NSA）：该模式使用了5G新无线电，并利用了4G网络的其他组件。 \- 独立模式（SA）：该模式完全实现并使用了5G New
Radio和5G网络规范。由于我们认为未来将使用独立模式（SA）作为标准，因此我们决定专注于该模式的研究。
我们的测试设备的SoC为Exynos 980并具有三星Shannon基带。 基带在其自己的ARM
Cortex内核上运行自己的固件和RTOS，与运行Android操作系统的应用处理器 (AP) 分开。
AP和基带可以例如通过PCI-e、共享内存或其他方式进行通信。我们从设备的OTA包中恢复了基带固件。基带固件位于modem.bin二进制文件中。解压并找到加载地址后，我们可以在IDA
Pro中加载它并开始寻找漏洞。
## 3.审计范围和漏洞挖掘
经过一段时间的5G相关代码审计，我们发现了多处漏洞，在此我们选择了其中最稳定的一个来分享，希望您也会通过它对基带当前的安全状态有所认识。在审计调制解调器固件时，我们发现它仍然缺少Stack
cookie保护。因此，考虑到在这种环境中缺乏调试功能，使用传统的栈溢出将使我们的利用更容易。
本文选择的bug是一个栈溢出。它不仅是栈溢出，而且是基带内部XML解析器中的栈溢出。此 XML解析器负责解析从网络到设备调制解调器的IMS消息。
### 3.1 攻击背景
IMS是4G和5G网络中的专用架构，常用的语音呼叫建立在其之上，稍后我们将看到为什么这对本研究很重要。基带是一个IMS客户端，负责处理VoLTE、VoNR消息，因此它必须能够处理SIP消息，IMS服务器使用这些消息与基带进行通信。
**白皮书内查看INVITE消息示例** SIP 是一种基于文本的类似HTTP的协议，包括标头和内容。
接收方（在本文中为基带）需要解析来自服务器的消息。对于不同的消息，内容不仅可以是键值对，还可以是XML格式的文本。XML是一种复杂得多的数据格式，通常由专用库处理。
以上都为基带引入了一个新的攻击面。
### 3.2 漏洞
我们的OTA RCE漏洞在基带的IMS模块。 在解析SIP协议消息的XML内容时，它会调用函数`IMSPL_XmlGetNextTagName` 。
由于我们的目标基带没有调试符号或信息，所以所有的函数名称、类型和函数签名，都是从日志字符串中提取，或是通过逆向工程手动恢复。
我们在这里提供了一个反编译版本，其中省略了一些代码。
    int IMSPL_XmlGetNextTagName(char *src, char *dst) {
        // 1. Skip space characters
        // 2. Find the beginning mark '`到目标缓冲区。接下来，我们展示反编译函数`find_tag_end`（手动命名）并解释它是如何工作的：
    char **find_tag_end(char **result) {
        char *i;               // r1
        unsigned int v2;       // r3
        unsigned int cur_char; // r3
        for (i = *result;; ++i) {
            cur_char = (unsigned __int8)*i;
            if (cur_char  ?
                break;
        }
        *result = i;
        return result;
    }
该函数通过跳过特殊字符来查找标签的结尾，例如空格、‘/’、‘>’、‘?’。在了解整个功能的工作原理后，我们注意到根本没有安全检查。该函数不知道目标缓冲区和源缓冲区有多长。
因此，该函数的所有调用者都可能被传统的缓冲区溢出所利用。通过交叉引用函数`IMSPL_XmlGetNextTagName`,我们发现了数百个调用位置。
它们中的大多数都容易受到攻击，因为源缓冲区是从OTA 消息中获取的，完全由攻击者控制。
## 4\. Exploit
我们选择栈溢出是为了漏洞利用的便捷和可靠。正如我们之前所说，由于没有栈cookie，所以我们可以简单地溢出缓冲区，控制存储在栈上的返回地址，并获得代码执行。
我们终于通过逆向工程找到了一个很好的候选者：
    int IMSPL_XmlParser_ContactLstDecode(int *a1, int *a2) {
        unsigned __int8 *v4; // r0
        int v5;              // r1
        log_info_s *v7;      // [sp+0h] [bp-98h] BYREF
        int v8;              // [sp+4h] [bp-94h]
        unsigned __int8 *v9; // [sp+8h] [bp-90h] BYREF
        int v10;             // [sp+Ch] [bp-8Ch] BYREF
        char v11[136];       // [sp+10h] [bp-88h] BYREF
        bzero(v11, 100);
        v10 = 0;
        v4 = (unsigned __int8 *)*a1;
        v8 = 10597;