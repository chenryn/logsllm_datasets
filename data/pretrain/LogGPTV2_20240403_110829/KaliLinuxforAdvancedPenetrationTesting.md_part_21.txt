To apply the fix, you must re-patch the OpenSSL application using the following
steps (ensure that the path used reflects the download directory used):
1. Install quilt, a program used to manage multiple patches to an application's
source code, using the following command:
root@kali:~# apt-get install devscripts quilt
2. Download the openssl source code, verify patches that have been applied,
update the configuration files, and then rebuild the application. Use the
following commands:
root@kali:~# apt-get source openssl
root@kali:~# cd openssl-1.0.1e
root@kali:~/openssl-1.0.1e# quilt pop -a
[ 267 ]
Exploiting Remote Access Communications
3. Edit the /openssl-1.0.1e/debian/patches/series file, and delete the
following line from the file:
ssltest_no_sslv2.patch
4. Edit the /openssl-1.0.1e/debian/rules file, and delete the no-ssl2
argument. Then, reapply patches to openssl. Use the following commands:
root@kali:~/openssl-1.0.1e# quilt push -a
root@kali:~/openssl-1.0.1e# dch -n 'Allow SSLv2'
5. When this is complete, rebuild the openssl package, and then reinstall it.
This step can be performed with the following commands:
root@kali:~/openssl-1.0.1e# dpkg-source --commit
root@kali:~/openssl-1.0.1e# debuild -uc -us
root@kali:~/openssl-1.0.1e# cd /root
root@kali:~# dpkg -i *ssl*.deb
6. Confirm that patches have been successfully applied by reissuing the
command to connect using SSLv2, as shown in the following screenshot:
Kali scripts that rely on openssl, particularly sslscan, will need to be recompiled.
To recompile, first download the source and then rebuild it. When this is complete,
reinstall it using the following commands:
root@kali:~# apt-get source sslscan
root@kali:~# cd sslscan-1.8.2
root@kali:~/sslscan-1.8.2# debuild -uc -us
root@kali:~/sslscan-1.8.2# cd /root
rootl@kali:~# dpkg -i *sslscan*.deb
[ 268 ]
Chapter 10
Kali's issue with SSLv2 may be fixed in a future release, therefore, verify this before
testing the SSL connectivity.
Reconnaissance of SSL connections
The reconnaissance phase of the kill chain remains important when assessing the SSL
connectivity, especially when reviewing the following items:
• The x.509 certificate used to identify the parties involved in establishing the
secure SSL connection
• The type of encryption being used
• The configuration information, such as whether automatic renegotiation of
SSL sessions is permitted
The SSL certificate can provide information that may be used to facilitate social
engineering.
More frequently, a tester or attacker wants to determine whether the certificate is
valid or not. Certificates that are invalid may result from an error in checking the
signature, a broken certificate chain, the domain specified in the certificate does not
match the system, or the certificate has expired, been revoked, or is known to have
been compromised.
If a user has previously accepted an invalid certificate, they will most likely accept a
new invalid certificate, making the attacker's job significantly easier.
The type of encryption used to secure an SSL connection is particularly important.
Encryption ciphers are divided into the following categories:
• Null ciphers: These ciphers are used to verify the authenticity and/or
integrity of a transmission. Because no encryption is applied, they do
not provide any security.
• Weak ciphers: This is a term used to descript all of the ciphers with a key
length of 128 bits or less. Ciphers that use the Diffie-Hellman algorithm for
a key exchange may also be considered to be weak as they are vulnerable to
man-in-the-middle attacks. The use of MD5 hashes may be considered to be
weak due to collision attacks. Finally, recent attacks against RC4 have also
called its continued use into question.
• Strong ciphers: These are those ciphers that exceed 128 bits. Presently,
the accepted, most secure option is the AES encryption with a 256-bit key.
If possible, this should be used with the Galois/Counter mode, a modern
block cipher that supports both authentication and encryption.
[ 269 ]
Exploiting Remote Access Communications
SSL and TLS rely on cipher suites (specific combinations of authentication,
encryption, and message authentication code algorithms) to establish the security
settings for each connection. There are more than 30 such suites, and the complexity
of selecting the best option for each security requirement frequently results in users
defaulting to less secure options. Therefore, each SSL and TLC connection must be
thoroughly tested.
To conduct reconnaissance against SSL connections, use the NSE modules of
nmap or SSL-specific applications. The nmap NSE modules are described in the
following table.
Nmap NSE module Module Function
ssl-cert Retrieves a server's SSL certificate. The amount of information
returned depends on the verbosity level (none, -v, and -vv).
ssl-date Retrieves a target host's date and time from its TLS
ServerHello response.
ssl-enum-ciphers Repeatedly initiates SSL and TLS connections, each time
trying a new cipher and recording if the host accepts or
rejects it. Ciphers are shown with a strength rate. This is a
highly intrusive scan, and may be blocked by the target.
ssl-google-cert- Queries Google's Certificate Catalogue for information
catalog that pertains to the SSL certificate retrieved from the target.
It provides information on how recently, and for how long,
Google has been aware of the certificate. If a certificate is
not recognized by Google, it may be suspicious/false.
ssl-known-key Checks whether the SSL certificate used by a host has a
fingerprint that matches a databases of compromised or
faulty keys. Presently, it uses the LittleBlackBox database.
However, any database of fingerprints can be used.
sslv2 Determines whether the server supports the obsolete and less
secure SSL Version 2 and which ciphers are supported.
To invoke a single script from the command line, use the following command:
root@kali:~# nmap --script  -p 443 
[ 270 ]
Chapter 10
In the following example, the ssl-cert script was invoked with the -vv option for
maximum verbosity. The data on from this script is shown in the following screenshot:
During the reconnaissance, a tester can elect to launch all SLL-specific modules using
the following command:
root@kali:~# nmap --script "ssl*" 
Kali's reconnaissance and attack tools that are specific to SSL and TLS can be
invoked from the command line or selected from the menu by navigating to Kali
Linux | Information Gathering | SSL Analysis. The tools are summarized in the
following table:
Tool Function
sslcaudit Automates the testing of SSL and TLS clients to determine the resistance
against man-in-the-middle attacks.
ssldump Conducts network protocol analysis of SSLv3 and TLS communications.
If provided with the appropriate encryption key, it will decrypt SSL
traffic and display it in the clear.
sslscan Queries SSL services to determine which ciphers are supported. Output
includes the preferred SSL ciphers and is displayed in
text and XML formats.
sslsniff Enables man-in-the-middle attack conditions on all SSL connections
over a particular LAN, dynamically generating certificates for the
domains that are being accessed on the fly.
[ 271 ]
Exploiting Remote Access Communications
Tool Function
sslsplit Performs man-in-the-middle attacks against SSL and TLS networks.
Connections are transparently intercepted through a network address
translation engine and redirected to sslsplit, which terminates
the original connection and initiates a new connection to the original
destination while logging all the transmitted data. It supports plain
TCP, SSL, HTTP/HTTPs, and IPv4 and IPv6.
sslstrip Designed to transparently hijack the HTTP traffic on a network, watch for
HTTPS links, and redirect and then map these links to spoofed HTTP or
HTTPS links. It also supports modes to supply a favicon that looks like a
lock icon as well as selective logging of intercepted communications.
sslyze Analyzes the SSL configuration of a server.
tlssled Unifies the use and output of several other SSL-specific applications,
checks for encryption strength, certificate parameters, and renegotiation
capabilities.
The most commonly used program is sslscan, which queries the SSL services in
order to determine the certificate details and the supported ciphers. The output is
in text and XML formats.
When testing a particular connection, use the --no-failed option, as shown in the
following screenshot, to have sslscan show only the accepted cipher suites.
[ 272 ]
Chapter 10
The sslyze python tool analyzes a server's SSL configuration and validates
the certificate, tests for weak cipher suites, and identifies the configuration
information that may support additional attacks. In the sample output, shown
in the following screenshot, it has identified a certificate mismatch that could
support some attack types.
Another SSL reconnaissance tool is tlssled, as shown in the following screenshot.
It is very fast, simple to operate, and the output is user friendly.
[ 273 ]
Exploiting Remote Access Communications
No matter what approach you use for the SSL reconnaissance, make sure that you
cross validate your results by running at least two different tools. In addition, not all
SSL configured devices will be online at the same time. Therefore, on large networks,
make sure that you scan for the SSL vulnerabilities several times during the course of
the testing.
A new tool that is presently emerging from development is OWASP's
O-Saft (www.owasp.org/index.php/O-Saft), which provides
a comprehensive overview of the SSL configuration, ciphers, and
certificate data.
[ 274 ]
Chapter 10
Using sslstrip to conduct a man-in-the-middle
attack
Despite the security offered by the SSL protection, there are some effective attacks
against the protocol. In 2009, Moxie Marlinspike demonstrated sslstrip, a tool that
transparently hijacks the HTTP traffic on a network and redirects the traffic to look
like HTTP or HTTPS links. It removes the SSL protection and returns the secured lock
icon to the victim's browser so that the interception cannot be readily detected.
In short, sslstrip launches a man-in-the-middle attack against SSL, allowing the
previously secured data to be intercepted.
To use sslstrip, you must first configure the intercept system into the forwarding
mode using the following command:
root@kali:~# echo "1" > /proc/sys/net/ipv4/ip_forward
Next, set up the iptables firewall to redirect the HTTP traffic to sslstrip using the
following command:
root@kali:~# iptables –t nat –A PREROUTING –p tcp
–destination-port 80 –j REDIRECT –to-port 
In this example, the listening port has been set to port 5353.
Now that the configuration is complete, run sslstrip using the following command:
root@kali:~# sslstrip –l 5353
The execution of the previous commands is shown in the following screenshot:
Minimize the active terminal window that is executing sslstrip, and open a new
terminal window. Use ettercap to spoof ARP and redirect the traffic from the network
or target system directly to the intercepting system using the following command:
root@kali:~# ettercap –TqM arp:remote /192.168.75.128/ /192.168.75.2/
[ 275 ]
Exploiting Remote Access Communications
Here, the ettercap -T switch selects the text-only interface, -q forces the console
into the quiet mode, and the –M option activates the man-in-the-middle attack to
hijack and redirect data packets. The arp:remote switch implements the ARP
poisoning attack and places the attacker as a man-in-the-middle with the ability
to view and modify packets in the transmission. The remote portion of the switch
is required if you want to view the remote IP addresses and communications that
pass through a gateway.
The execution of the previous command is shown in the following screenshot:
If the target system goes to access SSL-secured content, their queries are directed
through the gateway to the intercepting system.
[ 276 ]
Chapter 10
From the user's perspective, they will be directed to the site and presented with
a There is a problem with the site's security certificate security alert, prompting
them with a decision to proceed. If they select Yes, they will be directed to their
selected page. The lock icon in the lower-right corner of the browser will still
indicate that SSL is engaged, indicating that their communications are secure.
In the background, the sslstrip tool removes SSL, leaving raw content that can
be viewed in the ettercap log, as shown in the following screenshot:
This attack is only effective from the same Layer 2 network segment. However,
it is successful on both wired and wireless networks. Although the ARP redirect
can be applied against a network segment, such an attack will impact the network
bandwidth, which may be detected. Therefore, it is most effective to direct this
attack against single devices.
To disable the PREROUTING rule, replace –A with –D.
To clear the firewall rules, use iptables –t nat –F
(to flush the commands) and iptables –t nat –L
(to verify that the tables have been cleared).
Denial-of-service attacks against SSL
When an SSL connection is established, the server must complete a series of
computationally intense calculations to initiate the handshake and start the
encryption. This involves a small amount of computational effort on the part
of the client and a more significant amount by the server.
If a client initiates an SSL connection but rejects the server's response, the SSL
connection will not be established. However, if the SSL server is configured to
automatically renegotiate the connection, the computational workload will
result in a DoS.
[ 277 ]
Exploiting Remote Access Communications
Kali Linux has several tools that will allow you to determine whether automatic
renegotiation is permitted, including sslyze and tssled.
If the automatic renegotiation is permitted, then entering the following command
will allow a tester to assess the resilience to the DoS attack:
root@kali:~# thc-ssl- dos  
The execution of the previous command is shown in the following screenshot:
Attacking an IPSec Virtual Private Network
A virtual private network (VPN), uses the Internet to provide secure (encrypted)
communications between remote locations or users within the same network.
There are two types of VPNs: IPSec and SSL.
IPSec is the most commonly used protocol to establish secure connections between
networks and connect hosts in virtual private networks.
Within IPSec, there are several subsidiary protocols that perform specific functions,
such as the following:
• Authentication Header (AH): This provides proof of origin for IP packets,
protecting them against replay attacks.
• Encapsulation Security Protocol (ESP): This protocol provides the origin
authenticity, integrity, and confidentiality of the transmitted data.
[ 278 ]
Chapter 10
• Security Association: This is the set of algorithms used to encrypt and
authenticate the transmitted data. Because SA is associated with data
transmission in one direction, two-way communications are secured by
a pair of security associations. Security associations are established using
Internet Security Association and Key Management Protocol (ISAKMP),
which can be implemented by several means. When testing the security of
VPN, one of the most vulnerable configurations relies on pre-shared secrets,
Internet Key Exchange (IKE).
To assess the security of VPN, testers follow these basic steps:
1. Scan for the presence of VPN gateways.
2. Fingerprint the VPN gateway to determine the vendor and
configuration details.
3. Look for vulnerabilities associated with the VPN vendor or
related products.
4. Capture pre-shared keys.
5. Perform offline PSK cracking.
6. Check for the default user accounts.
Scanning for VPN gateways
To scan for the presence of VPN gateways, use nmap or ike-scan. To use nmap,
issue the following command:
root@kali@:~# nmap -–sU -Pn –p 500 
In this example, -sU instructs nmap to scan the host range for possible targets
using UDP packets (instead of TCP), -Pn ensures that nmap will not send a ping
scan (which can alert the target about the scan and identify the tester), and –p
500 identifies the specific port to be scanned.
The nmap tool does not locate all VPN gateways due to how it handles the IKE
packets; the most effective tool is one that sends a correctly formatted IKE packet
to the target system and displays the returned message.
The best tool to locate a VPN gateway is ike-scan (which can be found by
navigating to Kali Linux | Information Gathering | VPN Analysis). The ike-
scan command-line tool uses the IKE protocol to discover and fingerprint private
networks. It also supports pre-shared key cracking in the IKE aggressive mode.
To use ike-scan to locate targets, issue the following command:
root@kali@:~# ike-scan -M 
[ 279 ]
Exploiting Remote Access Communications
The execution of the previous command is shown in the following screenshot:
The -M switch returns each payload in a line, simplifying the output.
The ike-scan tool tests various transforms against the target device. A transform
contains a number of attributes: the encryption algorithm (DES and 3DES), the hash
algorithm (MD5 and SHA1), the authentication method (the pre-shared key), the
Diffie-Hellman group (option one is 768 bit and option two is 1024 bit) and the lifetime
(28,800 seconds). It will identify which transforms elicited a successful response.
After completing ike-scan of each identified device, the program will return one of
the following:
• 0 returned handshake; 0 returned notify: This indicates that
the target is not an IPSec gateway
• 0 returned handshake; 1 returned notify: This indicates that
although a VPN gateway is present, none of the transforms provided
to it by ike-scan are acceptable
• 1 returned handshake; 0 returned notify: As shown in the
previous screenshot, this indicates that the target is configured for
IPSec and will perform an IKE negotiation against one or more of
the transforms that have been provided to it
Fingerprinting the VPN gateway
If you can establish a handshake with the VPN gateway, you can conduct the
fingerprinting of the device to return the following information:
• The vendor and model
• The software version
This information is used to identify a vendor-specific attack or fine tune a
generic attack.
[ 280 ]
Chapter 10
If VPN is hosted by a firewall, the fingerprinting will also
identify the firewall in use.