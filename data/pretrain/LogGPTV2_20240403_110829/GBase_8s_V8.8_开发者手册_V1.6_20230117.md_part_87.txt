图 18-9open_for::=
参数说明：
 cursor_name：要打开的游标名。
 dynamic_string：动态查询语句。
南大通用数据技术股份有限公司
649
GBase 8s V8.8开发者手册
 USING value：在dynamic_string中存在占位符时使用。游标的使用请参考游标。
17.7.2 执行动态非查询语句
17.7.2.1 语法
语法请参见图18-10。
图 18-10noselect::=
using_clause子句的语法参见图18-11。
图 18-11using_clause::=
对以上语法格式的解释如下：
USING IN bind_argument 用 于 指 定 存 放 传 递 给 动 态 SQL 值 的 变 量 ， 在
dynamic_noselect_string中存在占位符时使用，即动态SQL语句执行时， bind_argument将
替换相对应的占位符。要注意的是，bind_argument只能是值、变 量或表达式，不能是表名、
列名、数据类型等数据库对象。如果存储过程需要通过声明参数传递数据库对象来构造动态
SQL语句（常见于执行DDL语句时），建议采用连接运算符“||”拼接dynamic_select_clause。
另外，动态语句允许出现重复的占位符，相同占位符只能与唯一一个 bind_argument
按位置一一对应。
17.7.2.2 示例
--创建表
gbase=#CREATETABLEsections_t1(
section NUMBER(4),section_nameVARCHAR2(30),manager_idNUMBER(6),
place_id NUMBER(4)
);
南大通用数据技术股份有限公司
650
GBase 8s V8.8开发者手册
--声明变量gbase=#DECLARE
section NUMBER(4):=280;
section_nameVARCHAR2(30):='Infosupport';manager_idNUMBER(6):=103;
place_id NUMBER(4):=1400;new_colnameVARCHAR2(10):='sec_name';
BEGIN
--执行查询
EXECUTEIMMEDIATE'insertintosections_t1values(:1,:2,:3,:4)'USINGsection,
section_name,manager_id,place_id;
--执行查询（重复占位符）
EXECUTEIMMEDIATE'insertintosections_t1values(:1,:2,:3,:1)'USINGsection,
section_name,manager_id;
--执行ALTER语句（建议采用“||”拼接数据库对象构造DDL语句）
EXECUTEIMMEDIATE'altertablesections_t1renamesection_nameto'||new_colname;
END;
/
--查询数据
gbase=#SELECT*FROMsections_t1;
--删除表
gbase=#DROPTABLEsections_t1;
17.7.3 动态调用存储过程
动态调用存储过程必须使用匿名的语句块将存储过程或语句块包在里面，使用
EXECUTEIMMEDIATE…USING语句后面带IN、OUT来输入、输出参数。
17.7.3.1 语法
语法请参见图18-12。
图 18-12call_procedure::=
南大通用数据技术股份有限公司
651
GBase 8s V8.8开发者手册
using_clause子句的语法参见图18-13。
图 18-13using_clause::=
对以上语法格式的解释如下：
CALLprocedure_name: 调用存储过程。
[:placeholder1，:placeholder2，…]: 存储过程参数占位符列表。占位符个数与参数个
数相同。
USING[IN|OUT|INOUT]bind_argument: 用于指定存放传递给存储过程参数值的变量。
bind_argument前的修饰符与对应参数的修饰符一致。
17.7.4 动态调用匿名块
动态调用匿名块是指在动态语句中执行匿名块，使用EXECUTEIMMEDIATE…USING
语句后面带IN、OUT来输入、输出参数。
17.7.4.1 语法
语法请参见图18-14。
南大通用数据技术股份有限公司
652
GBase 8s V8.8开发者手册
图 18-14call_anonymous_block::=
using_clause子句的语法参见图18-15。
图 18-15using_clause::=
对以上语法格式的解释如下：
 匿名块程序实施部分，以BEGIN语句开始，以END语句停顿，以一个分号结束。
 USING[IN|OUT|INOUT]bind_argument，用于指定存放传递给存储过程参数值的变量。
bind_argument前的修饰符与对应参数的修饰符一致。
 匿名块中间的输入输出参数使用占位符来指明，要求占位符个数与参数个数相同，并且
占位符所对应参数的顺序和USING中参数的顺序一致。
 目前GBase8s在动态语句调用匿名块时，EXCEPTION语句中暂不支持使用占位 符进
行输入输出参数的传递。
17.8控制语句
17.8.1 返回语句
GBase8s提供两种方式返回数据：RETURN或RETURNNEXT及RETURNQUERY。
其中，RETURNNEXT和RETURNQUERY只适用于函数，不适用存储过程。
17.8.1.1 RETURN
语法
返回语句的语法请参见图18-16。
南大通用数据技术股份有限公司
653
GBase 8s V8.8开发者手册
图 18-16return_clause::=
对以上语法的解释如下：
用于将控制从存储过程或函数返回给调用者。
示例
请参见调用语句的示例。
17.8.1.2 RETURN NEXT 及 RETURN QUERY
语法
创建函数时需要指定返回值SETOFdatatype。
return_next_clause::=
return_query_clause::=
对以上语法的解释如下：
当需要函数返回一个集合时，使用RETURN NEXT或者RETURN QUERY向结果
集追加结果，然后继续执行函数的下一条语句。随着后续的RETURN NEXT或RETURN
QUERY命令的执行，结果集中会有多个结果。函数执行完成后会一起返回所有结果。
RETURNNEXT可用于标量和复合数据类型。
RETURNQUERY有一种变体RETURN QUERY EXECUTE，后面还可以增加动态查
询， 通过USING向查询插入参数。
示例
gbase=#CREATETABLEt1(aint);gbase=#INSERTINTOt1VALUES(1),(10);
--RETURNNEXT
gbase=#CREATEORREPLACEFUNCTIONfun_for_return_next()RETURNSSETOFt1
AS$$DECLARE
rt1%ROWTYPE;
南大通用数据技术股份有限公司
654
GBase 8s V8.8开发者手册
BEGIN
FORrINselect*fromt1LOOP
RETURNNEXTr;ENDLOOP;RETURN;
END;
$$LANGUAGEPLPGSQL;
gbase=#callfun_for_return_next();a
---1
10
(2rows)
--RETURNQUERY
gbase=#CREATEORREPLACEFUNCTIONfun_for_return_query()RETURNSSETOF
t1AS$$DECLARE
rt1%ROWTYPE;
BEGIN
RETURNQUERYselect*fromt1;END;
$$
languageplpgsql;
gbase=#callfun_for_return_query();a
---
1
10
(2rows)
17.8.2 条件语句
条件语句的主要作用是判断参数或者语句是否满足已给定的条件，根据判定结果执行相
南大通用数据技术股份有限公司
655
GBase 8s V8.8开发者手册
应的操作。
GBase8s有五种形式的IF：
 IF_THEN
图 1IF_THEN::=
IF_THEN语句是IF的最简单形式。如果条件为真，statements将被执行。否则，将忽
略它们的结果使该IF_THEN语句执行结束。
示例
gbase=#IFv_user_id<>0THEN
UPDATEusersSETemail=v_emailWHEREuser_id=v_user_id;
ENDIF;
 IF_THEN_ELSE
图 2IF_THEN_ELSE::=
IF_THEN_ELSE语句增加了ELSE的分支，可以声明在条件为假的时候执行的语句。
示例
gbase=#IFparentidISNULLORparentid=''
THEN
RETURN;
ELSE
南大通用数据技术股份有限公司
656
GBase 8s V8.8开发者手册
hp_true_filename(parentid);--表示调用存储过程
ENDIF;
 IF_THEN_ELSEIF
IF语句可以嵌套，嵌套方式如下：
gbase=#IFsex='m'THEN
pretty_sex:='man';
ELSE
IFsex='f'THEN
pretty_sex:='woman';
ENDIF;
这种形式实际上就是在一个IF语句的ELSE部分嵌套了另一个IF语句。因此需要一个
ENDIF语句给每个嵌套的IF，另外还需要一个ENDIF语句结束父IF-ELSE。如果有多个
选项，可使用下面的形式。
 IF_THEN_ELSIF_ELSE
图 3IF_THEN_ELSIF_ELSE::=
示例
IFnumber_tmp=0THEN
result:='zero';
ELSIFnumber_tmp>0THEN
result:='positive';
南大通用数据技术股份有限公司
657
GBase 8s V8.8开发者手册
ELSIFnumber_tmp0THEN
raiseinfo'i:%isgreaterthan0.',i;
ELSIFiiTHEN
raiseinfo'countis%.',count;
EXIT;
ELSE
count:=count+1;
ENDIF;
ENDLOOP;
END;
/
南大通用数据技术股份有限公司
659
GBase 8s V8.8开发者手册
CALLproc_loop(10,5);
须知：该循环必须要结合EXIT使用，否则将陷入死循环。
17.8.3.2 WHILE_LOOP 语句
语法图
只要条件表达式为真，WHILE语句就会不停的在一系列语句上进行循环，在每次进入
循环体的时候进行条件判断。
示例
CREATETABLEintegertable(c1integer);
CREATEORREPLACEPROCEDUREproc_while_loop(maxvalininteger)
AS
DECLARE
iint:=1;
BEGIN
WHILEi<maxvalLOOP
INSERTINTOintegertableVALUES(i);
i:=i+1;
ENDLOOP;
END;
南大通用数据技术股份有限公司
660
GBase 8s V8.8开发者手册
/
--调用函数
CALLproc_while_loop(10);
--删除存储过程和表
DROPPROCEDUREproc_while_loop;