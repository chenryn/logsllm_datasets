of CT [21]. It encourages middlebox service providers or CAs
to submit middlebox certiﬁcates to the MT log server. Further,
once a middlebox certiﬁcate is accepted at the MT log server,
the log server returns a Signed Certiﬁcate Timestamp (SCT).
A client can check its membership by verifying the SCT with
the public key of the log server.
In this section, we describe the maTLS protocol, which
is designed to allow middleboxes to participate in a TLS
session. As we have middleboxes equipped with certiﬁcates,
we extend the security goals of TLS to the seven objectives
below, divided into three categories. For the sake of exposition,
we explain maTLS based on TLS 1.2 with ephemeral Difﬁe-
Hellman (DHE) key exchange in the server-only authentication
mode.
5
A. Security Goals
Authentication:
Similar to the authentication process
of TLS certiﬁcates, clients should be able to receive and
check the validity of the certiﬁcate of the server that the
clients intended to connect. This should hold even when there
are middleboxes splitting the TLS connection between them.
Thus, we extend the notion of the authentication to cover
both the intended server and middleboxes, and we call this
property of the maTLS protocol (1) Server Authentication.
Clients should also be able to authenticate the middleboxes
by verifying the middlebox certiﬁcates, which we call (2)
Middlebox Authentication.
Conﬁdentiality: Browsers warn a user if her session is
negotiated with a low TLS version or a weak ciphersuite. Thus,
each maTLS segment should be encrypted with a sufﬁciently
high version of TLS and a strong ciphersuite; we apply this
requirement to each maTLS segments, which is called (3)
Segment Secrecy. Further, each maTLS segment should have its
own security association (e.g., a unique session key) to prevent
the same keystream from being reused across the overall
maTLS session. This goal is called (4) Individual Secrecy.
Integrity: The notion of integrity can be extended such
that only authorized entities can generate or modify messages
depending on their permissions. To this end, we deﬁne (5) Data
Source Authentication, which means that a client should be
able to conﬁrm that a received message has originated from a
valid endpoint such as a web server or cache proxy. Moreover,
a client should be able to ﬁgure out which middleboxes have
made each modiﬁcation to the message, ensuring accountabil-
ity. We call this (6) Modiﬁcation Accountability. Moreover, not
only the integrity of the messages should be preserved, but
also the order of the middleboxes; the network attacker could
also capture and redirect packets, or bypass some middleboxes.
Therefore an endpoint should be able to conﬁrm that all
messages passed through the authorized middleboxes in the
established order. We call this property (7) Path Integrity.
B. maTLS Design Overview
Session Establishment Approaches:
First of all, we
explain how a client establishes an maTLS session with the
server through multiple middleboxes. There are two possible
approaches to establish an maTLS session and its segments,
as shown in Figure 2. In the top-down approach, the client
ﬁrst establishes a TLS session directly with the server, and
the server determines the security parameters of the session.
After that, either or both of the endpoints should pass the
segment keys to the authorized middleboxes via separate
TLS connections. In the bottom-up approach, the client and
middleboxes ﬁrst initiate TLS segments sequentially up to the
server. In this approach, the two participants of each segment
negotiate their security parameters individually, and the session
is eventually constructed from these segments.
In maTLS, we adopt
the bottom-up approach for the
following reasons. First, an maTLS session can be partially
established even if not all entities support maTLS. For ex-
ample, even if the server does not support maTLS, the client
and the next middlebox that supports maTLS can still nego-
tiate security parameters for their segment and establish an
maTLS session. Second, each different maTLS segment can
(a) Top-down approach: The initial negotiation is performed
between two endpoints. Then the key materials are exchanged
with middleboxes.
(b) Bottom-up approach: The two participants of each maTLS
segment negotiate security parameters independently, and then the
maTLS session is established by connecting the maTLS segments.
Fig. 2: Two approaches to establish a TLS session with mid-
dleboxes. We adopt the bottom-up approach since it efﬁciently
supports incremental deployment.
beneﬁt from using strong ciphersuites or newer TLS version
independently because maTLS does not require all entities
to share the same ciphersuite or TLS version. Third,
the
bottom-up approach efﬁciently achieves Individual Secrecy.
This is because the two entities involved in each segment use
different random numbers to establish a master secret; thus, the
probability that all the segment keys are identical is negligible.
It is worth noting that most of the top-down approach
schemes, such as mcTLS [30], TLMSP, and TLS Keyshare
extension [31], do not support incremental deployment. This
is mainly because only the server picks the version, ciphersuite,
and extensions that are supported across all entities (i.e., both
endpoints as well as middleboxes), which makes it challenging
to deploy them incrementally. Even worse, it is highly likely
that
the security level of the session will be decided by
the “intersection” of the security parameters supported by
all the entities. Furthermore, the entire session needs to use
the same shared secret, which undermines the security of the
communication as well.
Among the top-down approach schemes, the only solution
that supports incremental deployment is mbTLS [29]. If the
server does not support mbTLS, the client ﬁrst establishes a
standard TLS session with the server. Then, the client sends the
segment keys to each middlebox that does support mbTLS. To
achieve individual secrecy, the client generates the different
segment keys for all the segments and distributes keys to
the corresponding middleboxes (two segment keys per one
middlebox), which is inefﬁcient.
Audit Mechanisms: We propose three audit mechanisms
for the clients to audit middleboxes while performing an
maTLS session: Explicit Authentication, Security Parameter
Veriﬁcation, and Valid Modiﬁcation Checks. These mecha-
nisms necessitate some data structures for middleboxes, such
as signatures or message authentication codes (MACs),
to
demonstrate accountability for every message. We prefer to
6
Audit Mechanism
Proof Data Structure
Explicit Authentication
Security Parameter Veriﬁcation
A sequence of certiﬁcate blocks,
including the server certiﬁcate and
any middlebox certiﬁcates with their
signed certiﬁcate timestamps.
Security parameters of every maTLS
segment including a negotiated TLS
version, an agreed ciphersuite, and a
transcript of the handshake
Valid Modiﬁcation Checks
A modiﬁcation log that keeps track
of the modiﬁcations of a packet
Description & Advantages
The client authenticates the server and middleboxes by check-
ing their certiﬁcates, and conﬁrms their names and the middle-
boxes’ permissions
• No custom root certiﬁcate and no private key sharing
• EV certiﬁcates are not degraded due to fabricated certiﬁcates
• Support for Certiﬁcate Transparency [21] and DANE [38]
The client conﬁrms the conﬁdentiality of every segment
• Neither a low TLS version nor a weak ciphersuite is permitted
without the client’s knowledge
• The two points of each segment perform a TLS handshake
and establish a segment key
The client conﬁrms that only authorized entities can generate
or modify messages
• Only an authorized data origin (a server or a cache proxy)
can generate messages
• Only trusted writer middleboxes can modify messages
• The order of middleboxes is always preserved
TABLE I: Three audit mechanisms of endpoints in maTLS: Explicit authentication guarantees the authentication of all the
participants. Security parameter veriﬁcation ensures the conﬁdentiality of all the maTLS segments. Valid modiﬁcation checks
ensure that only authorized entities can modify messages.
use MACs, as signatures require higher computation overhead
on their generation. Thus, entities will use hash-based message
authentication codes (HMACs) when signatures are not neces-
sary. To this end, we introduce accountability keys that are to
be used as HMAC keys. The accountability key is established
between the endpoints and middleboxes; thus, each middlebox
should establish one accountability key with each endpoint
(two in total), while the client and the server each need one
accountability key for each middlebox, and share one more
key between them.
We overview the audit mechanisms in Table I, alongside
their notation in Table II.
If
there are any suspicious middleboxes,
(1) Explicit Authentication guarantees authentication of
the server as well as the middleboxes by validating received
certiﬁcates.
the
maTLS session can be aborted. The server sends its certiﬁcate
in the ServerCertificate message during the maTLS
handshake. Whenever the middleboxes receive this message,
each of them simply appends its certiﬁcate, so that the client
can receive all the certiﬁcates up to the server. As the client
receives all the certiﬁcates, she does not need to worry about
the degradation of certiﬁcate-level due to forged certiﬁcates by
middleboxes. Similarly, DANE or CT can also be supported
with middleboxes.
When receiving a sequence of certiﬁcates, the client should
validate all of the certiﬁcates as well as recording the order of
the certiﬁcates, up to the server.
(2) Security Parameter Veriﬁcation allows the client to
audit the security association of each maTLS segment, and
to conﬁrm the accountability keys as well as their order.
To this end, the middleboxes have to present the security
parameters (of each segment), that is, the chosen TLS ver-
sion,
the hashed master secret,
and a (hashed) transcript of the TLS handshake (i.e.,
the
verify_data in the Finished message). The selected
TLS version and ciphersuite show the degree of conﬁdentiality
of the corresponding maTLS segment. The hashed master
the negotiated ciphersuite,
7
secret demonstrates the uniqueness of segment keys. The
transcript, a digest of handshake messages in the maTLS
segment, is used to prove that two entities involved in the
segment performed the handshake without any modiﬁcation
by an attacker.
However, middleboxes could potentially give false infor-
mation to the client. To avoid such misbehavior, we propose
a security parameter block – an unforgeable cryptographic
proof of security information for each segment. Each block
contains the security parameters and their HMAC value. The
two entities of an maTLS segment, say segmenti,i+1, present
the security parameters of the segment, respectively for cross-
veriﬁcation.
All the entities except the client in the maTLS session
generate the security parameter block. The basic structure of
the block is in the form of:
IDi||pi,i+1||Sign(ski, Hmac(aki,0, pi−1,i||pi,i+1))
One entity ei ﬁrst generates an HMAC over the security
parameters in its two segments, namely segmenti−1,i and
segmenti,i+1, and signs on the resultant HMAC. Then, ei
prepends its identiﬁer and the security parameters of the
segment in the direction of the server with the signature. When
the block is generated, ei forwards it toward the client.
a
For
that
(S = en)
i.e., segmentn−1,n,
server
is only involved
in one segment,
the server
sends
IDn||Sign(skn, Hmac(akn,0, pn−1,n)) in which the term
corresponding to pi,i+1 in the above expression is removed.
When the client receives a series of security parameter
blocks, it can conﬁrm all security parameters negotiated be-
tween each entity by verifying the signature of signed HMACs.
Veriﬁcation fails could be due to modiﬁed security parame-
ters, missing or incorrect order of the middleboxes; thus the
client must abort the negotiation process. Once the client can
successfully verify all the security parameters, accountability
keys, the order of the middleboxes in the maTLS session, it
can further decide whether to accept the session based on its
Notation
C
S
M Bi
ei
segmenti,j
mi
a||b
P RF (a, b, c)
Sign(k, m)
H(m)
Hmac(k, m)
Ae(k, m)
(ski, pki)
Certi
IDi
g
(a, ga)
pi,j
aki,j
HM ACi
M Li
Meaning
Client
Server
ith Middlebox in the session (1 ≤ i ≤ n − 1)
ith Entity in the session where (e0 = C, en = S)
The maTLS segment between ei and ej
Message sent from ei
a concatenated with b
Pseudorandom function in [9] to derive keys
(a : secret, b : label, c : seed)
Signature function on m with a key k
Hash function on m