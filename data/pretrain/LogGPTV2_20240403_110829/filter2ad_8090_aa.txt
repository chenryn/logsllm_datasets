* * *
  * 原文地址：
  * 作者：[Metasploit Community](https://github.com/rapid7/metasploit-framework)
  * 译者：王一航 & Google 2018-06-15
  * 校对：王一航 2018-06-15
**译者注：**
> 在国内建议使用 Gem 的 [国内镜像源](https://gems.ruby-china.org/)
>  
>  
>     gem sources --add https://gems.ruby-china.org/ --remove
> https://rubygems.org/
>     bundle config mirror.https://rubygems.org https://gems.ruby-china.org
* * *
本文将着重讲述如何搭建 Metasploit Framework 的开发环境以便于贡献者可以高效迅速地进行贡献。  
如果你只是想对 Metasploit Framework
进行授权的合法的渗透测试，我们建议直接下载[商业版本安装包](http://metasploit.com/download)或者
[开源版本安装包](https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers)，因为我们已经在这些包中为您解决了所有的依赖问题。商业版本安装包还包括可选的可以更新到 Metasploit Pro
的部分并且会每周更新两次，而开源版本则会在每天晚上进行更新。
如果你正在使用 Kali Linux，Metasploit
已经预先安装好了。可以参考这个[指南](http://docs.kali.org/general-use/starting-metasploit-framework-in-kali)，该指南提供了如何使用提供好的 Metasploit-Framework 软件包以及配置数据库。
如果你想参与开发或者对 Metasploit 进行[贡献](http://r-7.co/MSF-CONTRIB)，那么本文很适合你，继续读下去吧！本文应该可以让你使用任何基于 Debian 的 Linux 操作系统进行工作。
那么废话少说，开始吧！
# 前提
  * 你已经有了一个基于 Debian 的 Linux 环境
  * 你有一个非 Root 的用户，本文中我们使用 `msfdev` 这个用户
  * 你有一个 GitHub 账号，并且关联了一个 [SSH 密钥](https://help.github.com/articles/generating-ssh-keys/) 到你的 GitHub 账号。
# 安装基础开发软件包
    sudo apt-get -y install \
      autoconf \
      bison \
      build-essential \
      curl \
      git-core \
      libapr1 \
      libaprutil1 \
      libcurl4-openssl-dev \
      libgmp3-dev \
      libpcap-dev \
      libpq-dev \
      libreadline6-dev \
      libsqlite3-dev \
      libssl-dev \
      libsvn1 \
      libtool \
      libxml2 \
      libxml2-dev \
      libxslt-dev \
      libyaml-dev \
      locate \
      ncurses-dev \
      openssl \
      postgresql \
      postgresql-contrib \
      wget \
      xsel \
      zlib1g \
      zlib1g-dev
请注意：目前我们还没有安装 Ruby，但是我们将会在后续步骤中进行安装。
# Fork 并克隆 Metasploit-Framework 仓库
你可以参考这篇 GitHub 提供的关于 [forking](https://help.github.com/articles/fork-a-repo/)
的指南，但是其实你只需要点击仓库主页右上角的 “Fork” 按钮就可以完成 Fork 操作了。
## 克隆
一旦你已经在 GitHub 上 Fork 了该仓库，现在就可以将该仓库拉取到本地的开发机了。  
同样，你也可以参考 GitHub 提供的这篇关于 [cloning](https://help.github.com/articles/fork-a-repo/#step-2-create-a-local-clone-of-your-fork) 的指南
    mkdir -p $HOME/git
    cd $HOME/git
    git clone PI:EMAIL:YOUR_USERNAME_FOR_GITHUB/metasploit-framework
    cd metasploit-framework
## 设置 Git 仓库的 Upstream
首先，如果你打算使用最新的上游（upstream）来更新您的本地克隆，那么您需要跟踪（track）它  
在 `metasploit-framework` Checkout 的目录中，运行如下命令：
    git remote add upstream PI:EMAIL:rapid7/metasploit-framework.git
    git fetch upstream
    git checkout -b upstream-master --track upstream/master
现在你已经有了一个指向了 upstream 的分支（也就是 GitHub 上的 `rapid7/Metasploit-Framework`
这个仓库），与你自己 Fork 得到的仓库不同（指向 `origin/master` 的源 `master` 分支） 。  
你或许会发现，拥有 `upstream-master` 和 `master` 两个不同的分支是非常方便的（尤其是当你是一个 [Metasploit
committer](https://github.com/rapid7/metasploit-framework/wiki/Committer-Rights) 的时候，因为这会将避免你意外地将代码直接推送到 `rapid7/master` 分支上）
# 安装 RVM（译者注：Ruby Version Manager）
大部分的 Linux 发行版并不会提供可预测频率的最新版本的 Ruby，因此我们使用 RVM （Ruby Version Manager）进行 Ruby
版本的管理，你可以参考[官网](https://rvm.io/)获取相关信息，看起来很不错。当然也有些人比较青睐 rbenv，你也可以参考 [rbenv
教程](https://github.com/sstephenson/rbenv#installation)。
但是你就得自己保证你有合适版本的 Ruby。因为大部分和 Commiters 使用 RVM，所有本篇教程中，我们也会就 RVM 进行接下来的操作。
首先，你需要为获取 RVM 发行版的签名文件
    curl -sSL https://rvm.io/mpapis.asc | gpg --import -
然后，安装 RVM：
    curl -L https://get.rvm.io | bash -s stable
上面的命令是直接使用管道将所有的命令定向到了 Bash
中，但是这可能会引起一些比较[敏感的问题](http://www.seancassidy.me/dont-pipe-to-your-shell.html)。因此有一个更安全的方法如下：
    curl -o rvm.sh -L https://get.rvm.io
    less rvm.sh # Read it and see it's all good
    cat rvm.sh | bash -s stable
当上面的操作都成功完成后，就可以修复你的终端（Terminal）来使用 RVM 版的 Ruby 了
    source ~/.rvm/scripts/rvm
    cd ~/git/metasploit-framework
    rvm --install $(cat .ruby-version)
最后，安装 `bundler` 这个 gem 包来获取其他所有需要的的 gem 包：
    gem install bundler
## 为 Gnome Terminal 配置使用 RVM
Gnome Terminal 真是个混蛋，默认情况下它并没有将你的 Shell 作为 Login shell，所以没有对 tweak 进行配置的话， RVM
将无法正常工作。如下：
> Navigate to Edit > Profiles > Highlight Default > Edit > Title and Command
选中如下复选框：
**[√] Run command as a login shell**.
看起来应该像下图这样，具体可能根据不同的 Gnome 版本有微小差异：
最后，你就可以运行在 [.ruby-version](https://github.com/rapid7/metasploit-framework/blob/master/.ruby-version) 这个文件中指定的特定的 Ruby 版本了。
    ruby -v
如果你发现当前正在运行的 Ruby 版本仍然不是在 `.ruby-version` 这个文件里面定义的版本的话，你或许需要重启你的终端。如果你初始安装的
RVM 不具备如下功能的话，那么请确保你已经将 rvm 添加到了你的 Termianl 的启动脚本中。
    echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"' >> .bashrc
# 安装打包组件 Gems
Metasploit 依赖许多 gems（Ruby 库）。因为你正在使用 RVM，因此你可以直接在本地安装它们而不用考虑与 Debian 打包好的 Gems
产生冲突，感谢 [Bundler](http://bundler.io/) 的黑科技。
先进入你的 Checkout 的根目录，然后运行：
    cd ~/git/metasploit-framework/
    bundle install
一两分钟后，你就可以开始你的 Metasploit 之旅了，在你的 Checkout 目录，输入：
    ./msfconsole
沐浴在 Metasploit 启动带来的光辉中吧！（译者注：原文 And bask in the glory that is a functioning
source checkout）  
第一次运行的时候，将会顺便创建一个 `~/.msf4` 的目录
    msfdev@lys:~/git/metasploit-framework$ ./msfconsole
        [*] Starting the Metasploit Framework console.../
                        _---------.
                    .' #######   ;."
          .---,.    ;@             @@`;   .---,..
        ." @@@@@'.,'@@            @@@@@',.'@@@@ ".
        '-.@@@@@@@@@@@@@          @@@@@@@@@@@@@ @;
          `.@@@@@@@@@@@@        @@@@@@@@@@@@@@ .'
            "--'.@@@  -.@        @ ,'-   .'--"
                  ".@' ; @       @ `.  ;'
                    |@@@@ @@@     @    .
                    ' @@@ @@   @@    ,
                      `.@@@@    @@   .
                        ',@@     @   ;           _____________
                        (   3 C    )     /|___ / Metasploit! \
                        ;@'. __*__,."    \|--- \_____________/
                          '(.,...."/
           =[ metasploit v5.0.0-dev-26bf96b                   ]
    + -- --=[ 1744 exploits - 1001 auxiliary - 302 post       ]
    + -- --=[ 536 payloads - 40 encoders - 10 nops            ]
    + -- --=[ ** This is Metasploit 5 development branch **   ]
        msf > ls ~/.msf4
        [*] exec: ls ~/.msf4
        history
        local
        logos
        logs
        loot
        modules
        plugins
        msf > exit
唉，我们似乎还没有成功配置数据库来使用这些狂暴的 Hacking，要解决？简单！
# 配置 PostgreSQL
Kali Linux 已经自带了 PostgreSQL，所以我们可以直接使用。在 Ubuntu 和其他基于 Debian
的发行版上，所有的配置应该都是类似的，并且可以很好的工作。我们假设使用别的发行版的人已经安装好了 `PostgreSQL`，TLDR
也确保数据库能在系统启动时启动。
## 启动数据库
#### TLDR（以 msfdev 用户的身份运行）
* * *
    echo 'YOUR_PASSWORD_FOR_KALI' | sudo -kS update-rc.d postgresql enable &&
    echo 'YOUR_PASSWORD_FOR_KALI' | sudo -S service postgresql start &&
    cat  $HOME/pg-utf8.sql
    update pg_database set datallowconn = TRUE where datname = 'template0';
    \c template0
    update pg_database set datistemplate = FALSE where datname = 'template1';
    drop database template1;
    create database template1 with template = template0 encoding = 'UTF8';
    update pg_database set datistemplate = TRUE where datname = 'template1';
    \c template1