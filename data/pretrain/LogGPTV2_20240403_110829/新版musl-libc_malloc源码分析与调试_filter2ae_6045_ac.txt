            p[-4] = 0;
        }
        *(uint16_t *)(p-2) = (size_t)(p-g->mem->storage)/UNIT;
        p[-3] = idx;
        set_size(p, end, n);
        return p;
    }
这两个函数设置了chunk的头部与尾部的控制字段。
## free
    void free(void *p)
    {
        if (!p) return;
        struct meta *g = get_meta(p);     // 获取对应的meta
        int idx = get_slot_index(p);    // 获取在group中的idx，p[-3]&31，五位的idx说明一个最多32个chunk
        size_t stride = get_stride(g);    // 获取group中一个chunk的大小，步幅
        unsigned char *start = g->mem->storage + stride*idx;    // chunk的起始地址
        unsigned char *end = start + stride - IB;        // chunk的结尾地址，减去一个chunk的头部大小
        get_nominal_size(p, end);        // 检查用户使用的大小是否溢出
        uint32_t self = 1ulast_idx)-1;
        // idx字段置为0xff,offset置为0
        ((unsigned char *)p)[-3] = 255;
        // invalidate offset to group header, and cycle offset of
        // used region within slot if current offset is zero.
        *(uint16_t *)((char *)p-2) = 0;
        // release any whole pages contained in the slot to be freed
        // unless it's a single-slot group that will be unmapped.
        // 如果该group中的chunk比页大，并且包含多个chunk，则将group到这个chunk的这段空间交给操作系统处置，程序提出建议free。madvise的操作不再赘述
        if (((uintptr_t)(start-1) ^ (uintptr_t)end) >= 2*PGSZ && g->last_idx) {
            unsigned char *base = start + (-(uintptr_t)start & (PGSZ-1));
            size_t len = (end-base) & -PGSZ;
            if (len) madvise(base, len, MADV_FREE);
        }
        // atomic free without locking if this is neither first or last slot
        for (;;) {    // 设置对应的mask，但是free的chunk并不会马上avail
            uint32_t freed = g->freed_mask;
            uint32_t avail = g->avail_mask;
            uint32_t mask = freed | avail;
            assert(!(mask&self));
            if (!freed || mask+self==all) break; // 如果当前chunk被free后，这个group中的chunk都处于avail或free，跳出由nontrivial_free处理
            if (!MT)
                g->freed_mask = freed+self;
            else if (a_cas(&g->freed_mask, freed, freed+self)!=freed)
                continue;
            return;
        }
        wrlock();
        struct mapinfo mi = nontrivial_free(g, idx);
        unlock();
        if (mi.len) munmap(mi.base, mi.len);
    }
###  get_meta
    static inline struct meta *get_meta(const unsigned char *p)
    {
        assert(!((uintptr_t)p & 15));     // 16自己对齐检查
        int offset = *(const uint16_t *)(p - 2);
        int index = get_slot_index(p);
        if (p[-4]) {    // 如果头部第一字节不为0，这个chunk只能是第一个chunk
            assert(!offset);
            offset = *(uint32_t *)(p - 8);
            assert(offset > 0xffff);
        }
        const struct group *base = (const void *)(p - UNIT*offset - UNIT);
        const struct meta *meta = base->meta;
        assert(meta->mem == base);    // group与meta的对应检查
        assert(index last_idx);    // idx未超出范围检查
        assert(!(meta->avail_mask & (1ufreed_mask & (1ucheck == ctx.secret);    // secret检查
        if (meta->sizeclass = size_classes[meta->sizeclass]*index);    
            assert(offset sizeclass]*(index+1));
        } else {
            assert(meta->sizeclass == 63);
        }
        if (meta->maplen) {
            assert(offset maplen*4096UL/UNIT - 1);
        }
        return (struct meta *)meta;
    }
###  get_nominal_size
    static inline size_t get_nominal_size(const unsigned char *p, const unsigned char *end)
    {
        size_t reserved = p[-3] >> 5;    // 保留字段，猜测是标识该chunk已被active，5= 5) {
            assert(reserved == 5);
            reserved = *(const uint32_t *)(end-4);    // 取了尾部的四个字节
            assert(reserved >= 5);
            assert(!end[-5]);
        }
        assert(reserved sizeclass;
        uint32_t mask = g->freed_mask | g->avail_mask;
        // 如果当前chunk被free后，这个group中的chunk都处于avail或free
        if (mask+self == (2ulast_idx)-1 && okay_to_free(g)) {
            // any multi-slot group is necessarily on an active list
            // here, but single-slot groups might or might not be.
            if (g->next) {    // 如果它在链表中且scfreed_mask, self);    // 更新mask
        return (struct mapinfo){ 0 };
    }
## Debug Details
    #include
    #include
    int  main()
    {
        void *p1, *p2, *p3;
        p1 = malloc(0x10);
        malloc(0x10);
        malloc(0x10);
        p2 = malloc(0x30);
        malloc(0x30);
        malloc(0x30);
        p3 = malloc(0x50);
        malloc(0x50);
        malloc(0x50);
        free(p1);
        free(p2);
        free(p3);
        return 0;
    }
首先，申请三个0x10的chunk
    gef➤  p __malloc_context
    $1 = {
      secret = 0xb64bf19b04a64b1a,
      init_done = 0x1,
      mmap_counter = 0x0,
      free_meta_head = 0x0,
      avail_meta = 0x55555555a1f8,
      avail_meta_count = 0x59,
      avail_meta_area_count = 0x0,
      meta_alloc_shift = 0x0,
      meta_area_head = 0x55555555a000,
      meta_area_tail = 0x55555555a000,
      avail_meta_areas = 0x55555555b000 ,
      active = {0x0, 0x55555555a1d0, 0x0, 0x55555555a0e0, 0x0, 0x0, 0x0, 0x55555555a0b8, 0x0, 0x0, 0x0, 0x55555555a090, 0x0, 0x0, 0x0, 0x55555555a158, 0x0, 0x0, 0x0, 0x55555555a040, 0x0, 0x0, 0x0, 0x55555555a018, 0x0 },
      usage_by_class = {0x0, 0xf, 0x0 },
      unmap_seq = '\000' ,
      bounces = '\000' ,
      seq = 0x0,
      brk = 0x55555555b000
    }
现在申请了一个`meta_area`，`avail_meta_areas`指向下一个可用的`meta_area`与当前的`brk`相同。
    gef➤   p *(struct meta_area*)0x55555555a000
    $2 = {
      check = 0xb64bf19b04a64b1a,
      next = 0x0,
      nslots = 0x65,
      slots = 0x55555555a018
    }
可以看到check与secret相同，next指向null。当前区域最多0x65个meta。
    gef➤  p *(struct meta*)0x55555555a1d0
    $3 = {
      prev = 0x55555555a1d0,
      next = 0x55555555a1d0,
      mem = 0x7ffff7ffecb0,    // 指向group
      avail_mask = 0x7ff8, // 0b111 1111 1111 1000 我们申请了三个chunk，前三个不可用
      freed_mask = 0x0,        // 目前没有chunk被free
      last_idx = 0xe,        // 最后一个chunk的下标为0xe，与总共15个chunk对应
      freeable = 0x1,        // 当前meta可被free
      sizeclass = 0x1,        // 用户空间由0x1这个group管理
      maplen = 0x0
    }
    gef➤  p *(struct group*)0x7ffff7ffecb0
    $4 = {
      meta = 0x55555555a1d0,
      active_idx = 0xe,            // 与之前的`last_idx`对应了
      pad = "\000\000\000\000\240\000",
      storage = 0x7ffff7ffecc0 ""    // 用户使用空间的开始
    }
一个chunk的头部只有四字节，再向前的四字节由前面的chunk使用。0xa0，0xa1，0xa2表示这个是group的第0，1，2的chunk。再向前一字节，0x00和0x02代表当前chunk与第一个chunk的偏移，以0x10为单位。0xc代表剩余的字节。
free(p1)
    gef➤  tel 0x00007ffff7ffecb0 15
    0x00007ffff7ffecb0│+0x0000: 0x000055555555a1d0  →  0x000055555555a1d0  →  [loop detected]
    0x00007ffff7ffecb8│+0x0008: 0x0000ff000000000e
    0x00007ffff7ffecc0│+0x0010: 0x0000000000000000     ← $r9
    0x00007ffff7ffecc8│+0x0018: 0x0000000000000000
    0x00007ffff7ffecd0│+0x0020: 0x0000000000000000
    0x00007ffff7ffecd8│+0x0028: 0x0002a1000000000c
    0x00007ffff7ffece0│+0x0030: 0x0000000000000000
    0x00007ffff7ffece8│+0x0038: 0x0000000000000000
    0x00007ffff7ffecf0│+0x0040: 0x0000000000000000
    0x00007ffff7ffecf8│+0x0048: 0x0004a2000000000c
    0x00007ffff7ffed00│+0x0050: 0x0000000000000000
    0x00007ffff7ffed08│+0x0058: 0x0000000000000000
    0x00007ffff7ffed10│+0x0060: 0x0000000000000000
    0x00007ffff7ffed18│+0x0068: 0x000000000000000c
    0x00007ffff7ffed20│+0x0070: 0x0000000000000000
    gef➤  p *(struct meta*)0x55555555a1d0
    $18 = {
      prev = 0x55555555a1d0,
      next = 0x55555555a1d0,
      mem = 0x7ffff7ffecb0,
      avail_mask = 0x7ff8,
      freed_mask = 0x1,
      last_idx = 0xe,
      freeable = 0x1,
      sizeclass = 0x1,
      maplen = 0x0
    }
`avail_mask`没有发生变化，被free的chunk不会马上可用。`freed_mask`变成1，说明当前第一个chunk被free了。
    #include
    #include
    #include
    int  main()
    {
        void *p1, *p2, *p3, *p4;
        void *buf;
        p1 = malloc(0xd);
        p2 = malloc(0x10);
        memset(p2,'A',0x10);
        p3 = malloc(0x11);
        malloc(0x1c-6);
        malloc(0x1c-5);
        buf = malloc(0x1c);
        malloc(0x1c);
        memset(buf,'A',0x1c);
        p4 = malloc(0x1d);
        exit(0);
    }
再用这个例子验证chunk的结构
再申请一个p4(0x1d)
p3与p4已经不在一个group中了。
如果溢出一字节
    memset(p2,'A',0x11);
    free(p2);
    niebelungen@pwn:~/Desktop$ /usr/local/musl/bin/musl-gcc -g ./exp.c -o exp
    niebelungen@pwn:~/Desktop$ ./exp 
    Segmentation fault (core dumped)
我之前介绍过exit劫持的方法在1.2.x中还是可以使用。博客指路：
## At last
源码的view差不多就这样。通过调试可以对其chunk的结构有更深的了解不然代码部分很难看懂。