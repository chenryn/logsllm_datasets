[26] HANSEN, D.
[v3] KAISER: unmap most of the kernel from
userspace page tables, https://lkml.org/lkml/2017/11/
10/433 Nov 2017.
[27] HANSEN, D.
[v4] KAISER: unmap most of the kernel from
userspace page tables, https://lkml.org/lkml/2017/11/
22/956 Nov 2017.
[28] HENNESSY, J. L., AND PATTERSON, D. A. Computer Architec-
ture: A Quantitative Approach, 6 ed. Morgan Kaufmann, 2017.
[29] HUND, R., WILLEMS, C., AND HOLZ, T. Practical Timing Side
Channel Attacks against Kernel Space ASLR. In S&P (2013).
[30] HUTCHINGS, B. Linux 3.16.53, https://cdn.kernel.org/
pub/linux/kernel/v3.x/ChangeLog-3.16.53 2018.
[31] INTEL. An introduction to the intel quickpath interconnect, Jan
[32] INTEL. Intel R(cid:13) 64 and IA-32 Architectures Optimization Refer-
2009.
ence Manual, 2017.
[33] INTEL.
Intel analysis of speculative execution side channels,
https://newsroom.intel.com/wp-content/uploads/
sites/11/2018/01/Intel-Analysis-of-Speculative-
Execution-Side-Channels.pdf Jan 2018.
[34] IONESCU, A. Twitter: Apple Double Map, https://twitter.
com/aionescu/status/948609809540046849 2017.
[35] IONESCU, A.
Twitter:
uncached
https://twitter.com/aionescu/status/
Meltdown with
memory,
950994906759143425 Jan 2018.
[36] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B.
Wait a minute! A fast, Cross-VM attack on AES. In RAID’14
(2014).
988    27th USENIX Security Symposium
USENIX Association
[37] JANG, Y., LEE, S., AND KIM, T. Breaking Kernel Address
Space Layout Randomization with Intel TSX. In CCS (2016).
[38] JIM ´ENEZ, D. A., AND LIN, C. Dynamic branch prediction with
perceptrons. In High-Performance Computer Architecture, 2001.
HPCA. The Seventh International Symposium on (2001), IEEE,
pp. 197–206.
[39] JOHNSON, K. KVA Shadow: Mitigating Meltdown on Windows,
https://blogs.technet.microsoft.com/srd/2018/03/
23/kva-shadow-mitigating-meltdown-on-windows/
Mar 2018.
[40] KOCHER, P., HORN, J., FOGH, A., GENKIN, D., GRUSS,
G., HAAS, W., HAMBURG, M., LIPP, M., MANGARD, S.,
PRESCHER, T., SCHWARZ, M., AND YAROM, Y. Spectre at-
tacks: Exploiting speculative execution. In S&P (2019). A pre-
print was published in 2018 as arXiv:1801.01203.
[41] KOCHER, P. C. Timing Attacks on Implementations of Diffe-
Hellman, RSA, DSS, and Other Systems. In CRYPTO (1996).
[42] KROAH-HARTMAN, G.
Linux 4.14.11, https://cdn.
kernel.org/pub/linux/kernel/v4.x/ChangeLog-
4.14.11 2018.
[43] KROAH-HARTMAN, G.
Linux 4.4.110, https://cdn.
kernel.org/pub/linux/kernel/v4.x/ChangeLog-
4.4.110 2018.
[44] KROAH-HARTMAN, G. Linux 4.9.75, https://cdn.kernel.
org/pub/linux/kernel/v4.x/ChangeLog-4.9.75 2018.
[45] LEE, B., MALISHEVSKY, A., BECK, D., SCHMID, A., AND
LANDRY, E. Dynamic branch prediction. Oregon State Univer-
sity.
[46] LEVIN, J. Mac OS X and IOS Internals: To the Apple’s Core.
John Wiley & Sons, 2012.
[47] LIPP, M., GRUSS, D., SPREITZER, R., MAURICE, C., AND
MANGARD, S. ARMageddon: Cache Attacks on Mobile De-
vices. In USENIX Security Symposium (2016).
[48] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
Last-Level Cache Side-Channel Attacks are Practical. In IEEE
Symposium on Security and Privacy – SP (2015), IEEE Computer
Society, pp. 605–622.
[49] LWN. The current state of kernel page-table isolation, https://
lwn.net/SubscriberLink/741878/eb6c9d3913d7cb2b/
Dec. 2017.
[50] MAISURADZE, G., AND ROSSOW, C.
Speculose: Analyz-
ing the Security Implications of Speculative Execution in CPUs.
arXiv:1801.04084 (2018).
[51] MANDT, T. Attacking the iOS Kernel: A Look at ’evasi0n’,
www.nislab.no/content/download/38610/481190/
file/NISlecture201303.pdf 2013.
[52] MAURICE, C., WEBER, M., SCHWARZ, M., GINER, L.,
GRUSS, D., ALBERTO BOANO, C., MANGARD, S., AND
R ¨OMER, K. Hello from the Other Side: SSH over Robust Cache
Covert Channels in the Cloud. In NDSS (2017).
[53] MILLER, M. Mitigating speculative execution side channel hard-
ware vulnerabilities, https://blogs.technet.microsoft.
com/srd/2018/03/15/mitigating-speculative-
execution-side-channel-hardware-vulnerabilities/
Mar 2018.
[54] MOLNAR,
de-
I.
https://git.kernel.org/pub/scm/linux/
fault,
kernel/git/torvalds/linux.git/commit/?id=
6807c84652b0b7e2e198e50a9ad47ef41b236e59 2017.
x86:
Enable KASLR by
[55] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache Attacks
and Countermeasures: the Case of AES. In CT-RSA (2006).
[56] PERCIVAL, C. Cache missing for fun and proﬁt. In Proceedings
of BSDCan (2005).
[57] PHORONIX.
Linux 4.12 To Enable KASLR By De-
fault, https://www.phoronix.com/scan.php?page=news_
item&px=KASLR-Default-Linux-4.12 2017.
[58] SCHWARZ, M., LIPP, M., GRUSS, D., WEISER, S., MAURICE,
C., SPREITZER, R., AND MANGARD, S. KeyDrown: Eliminat-
ing Software-Based Keystroke Timing Side-Channel Attacks. In
NDSS’18 (2018).
[59] SORIN, D. J., HILL, M. D., AND WOOD, D. A. A Primer on
Memory Consistency and Cache Coherence. 2011.
[60] TERAN, E., WANG, Z., AND JIM ´ENEZ, D. A. Perceptron learn-
In Microarchitecture (MICRO), 2016
ing for reuse prediction.
49th Annual IEEE/ACM International Symposium on (2016),
IEEE, pp. 1–12.
[61] TOMASULO, R. M. An efﬁcient algorithm for exploiting multi-
ple arithmetic units. IBM Journal of research and Development
11, 1 (1967), 25–33.
[62] VINTAN, L. N., AND IRIDON, M. Towards a high performance
neural branch predictor. In Neural Networks, 1999. IJCNN’99.
International Joint Conference on (1999), vol. 2, IEEE, pp. 868–
873.
[63] YAROM, Y., AND FALKNER, K. Flush+Reload: a High Reso-
lution, Low Noise, L3 Cache Side-Channel Attack. In USENIX
Security Symposium (2014).
[64] YEH, T.-Y., AND PATT, Y. N. Two-level adaptive training
In Proceedings of the 24th annual interna-
branch prediction.
tional symposium on Microarchitecture (1991), ACM, pp. 51–61.
[65] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART,
T. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In CCS
(2014).
A Meltdown in Practice
In this section, we show how Meltdown can be used in
practice. In Appendix A.1, we show physical memory
dumps obtained via Meltdown, including passwords of
the Firefox password manager.
In Appendix A.2, we
demonstrate a real-world exploit.
A.1 Physical-memory Dump using Melt-
down
Listing 3 shows a memory dump using Meltdown on
an Intel Core i7-6700K running Ubuntu 16.10 with the
Linux kernel 4.8.0.
In this example, we can identify
HTTP headers of a request to a web server running on
the machine. The XX cases represent bytes where the side
channel did not yield any results, i.e., no Flush+Reload
hit. Additional repetitions of the attack may still be able
to read these bytes.
Listing 4 shows a memory dump of Firefox 56 using
Meltdown on the same machine. We can clearly iden-
tify some of the passwords that are stored in the internal
password manager, i.e., Dolphin18, insta 0203, and
secretpwd0. The attack also recovered a URL which
appears to be related to a Firefox add-on.
USENIX Association
27th USENIX Security Symposium    989
79cbb80: 6c4c 48 32 5a 78 66 56 44
79cbb90: 3364 2f 41 4d 41 45 44 41
79cbba0: 4141 41 41 41 41 3d 3d XX
79cbbb0: XXXX XX XX XX XX XX XX XX
79cbbc0: XXXX XX 65 2d 68 65 61 64
79cbbd0: XXXX XX XX XX XX XX XX XX
79cbbe0: XXXX XX XX XX XX XX XX XX
79cbbf0: XXXX XX XX XX XX XX XX XX
79cbc00: XXXX XX XX XX XX XX XX XX
79cbc10: XXXX XX XX XX XX XX XX XX
79cbc20: XXXX XX XX XX XX XX XX XX
79cbc30: XXXX XX XX XX XX XX XX XX
79cbc40: XXXX XX XX XX XX XX XX XX
79cbc50: XXXX XX XX 0d 0a XX 6f 72
79cbc60: 7265 73 70 6f 6e 73 65 2d
79cbc70: XX44 61 74 65 3a 20 53 61
79cbc80: 6563 20 32 30 31 37 20 32
79cbc90: 2047 4d 54 0d 0a 43 6f 6e
79cbca0: 6e67 74 68 3a 20 31 0d 0a
79cbcb0: 2d54 79 70 65 3a 20 74 65
79cbcc0: 3b20 63 68 61 72 73 65 74
73 4b 57 39 34 68 6d |lLH2ZxfVDsKW94hm|
41 41 41 41 51 45 42 |3d/AMAEDAAAAAQEB|
XX XX XX XX XX XX XX |AAAAAA==........|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |...e-head.......|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
69 67 69 6e 61 6c 2d |.......original-|
68 65 61 64 65 72 73 |response-headers|
74 2c 20 30 39 20 44 |.Date: Sat, 09 D|
32 3a 32 39 3a 32 35 |ec 2017 22:29:25|
74 65 6e 74 2d 4c 65 | GMT..Content-Le|
43 6f 6e 74 65 6e 74 |ngth: 1..Content|
78 74 2f 68 74 6d 6c |-Type: text/html|
3d 75 74 66 2d 38 0d |; charset=utf-8.|
f94b76f0: 12 XX e0 81 19 XX e0 81 44
f94b7700: 38 e5 e5 e5 e5 e5 e5 e5 e5
f94b7710: 70 52 b8 6b 96 7f XX XX XX
f94b7720: XX XX XX XX XX XX XX XX XX
f94b7730: XX XX XX XX 4a XX XX XX XX
f94b7740: XX XX XX XX XX XX XX XX XX
f94b7750: XX XX XX XX XX XX XX XX XX
f94b7760: 61 5f 30 32 30 33 e5 e5 e5
f94b7770: 70 52 18 7d 28 7f XX XX XX
f94b7780: XX XX XX XX XX XX XX XX XX
f94b7790: XX XX XX XX 54 XX XX XX XX
f94b77a0: XX XX XX XX XX XX XX XX XX
f94b77b0: XX XX XX XX XX XX XX XX XX
f94b77c0: 65 74 70 77 64 30 e5 e5 e5
f94b77d0: 30 b4 18 7d 28 7f XX XX XX
f94b77e0: XX XX XX XX XX XX XX XX XX
f94b77f0: XX XX XX XX XX XX XX XX XX
f94b7800: e5 e5 e5 e5 e5 e5 e5 e5 e5
f94b7810: 68 74 74 70 73 3a 2f 2f 61
f94b7820: 64 6e 2e 6d 6f 7a 69 6c 6c
f94b7830: 73 65 72 2d 6d 65 64 69 61
6f 6c 70 68 69 6e 31 |........Dolphin1|
e5 e5 e5 e5 e5 e5 e5 |8...............|
XX XX XX XX XX XX XX |pR.k............|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |....J...........|
XX XX XX XX XX XX XX |................|
XX e0 81 69 6e 73 74 |............inst|
e5 e5 e5 e5 e5 e5 e5 |a_0203..........|
XX XX XX XX XX XX XX |pR.}(...........|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |....T...........|
XX XX XX XX XX XX XX |................|
XX XX XX 73 65 63 72 |............secr|
e5 e5 e5 e5 e5 e5 e5 |etpwd0..........|
XX XX XX XX XX XX XX |0..}(...........|
XX XX XX XX XX XX XX |................|
XX XX XX XX XX XX XX |................|
e5 e5 e5 e5 e5 e5 e5 |................|
64 64 6f 6e 73 2e 63 |https://addons.c|
61 2e 6e 65 74 2f 75 |dn.mozilla.net/u|
2f 61 64 64 6f 6e 5f |ser-media/addon_|
Listing (3) Memory dump showing HTTP Headers on Ubuntu
16.10 on a Intel Core i7-6700K
Listing (4) Memory dump of Firefox 56 on Ubuntu 16.10 on
a Intel Core i7-6700K disclosing saved passwords.
A.2 Real-world Meltdown Exploit
In this section, we present a real-world exploit showing
the applicability of Meltdown in practice, implemented
by Pavel Boldin in collaboration with Raphael Carvalho.
The exploit dumps the memory of a speciﬁc process, pro-
vided either the process id (PID) or the process name.
First, the exploit de-randomizes the kernel address
space layout to be able to access internal kernel struc-
tures. Second, the kernel’s task list is traversed until the
victim process is found. Finally, the root of the victim’s
multilevel page table is extracted from the task structure
and traversed to dump any of the victim’s pages.
The three steps of the exploit are combined to an end-
to-end exploit which targets a speciﬁc kernel build and
a speciﬁc victim. The exploit can easily be adapted to
work on any kernel build. The only requirement is ac-
cess to either the binary or the symbol table of the kernel,
which is true for all public kernels which are distributed
as packages, i.e., not self-compiled.
In the remainder
of this section, we provide a detailed explanation of the
three steps.
A.2.1 Breaking KASLR
The ﬁrst step is to de-randomize KASLR to access in-
ternal kernel structures. The exploit locates a known
value inside the kernel, speciﬁcally the Linux banner
string, as the content is known and it is large enough to
rule out false positives. It starts looking for the banner
string at the (non-randomized) default address according
to the symbol table of the running kernel. If the string
is not found, the next attempt is made at the next pos-
sible randomized address until the target is found. As
the Linux KASLR implementation only has an entropy
of 6 bits [37], there are only 64 possible randomization
offsets, making this approach practical.
The difference between the found address and the non-
randomized base address is then the randomization offset
of the kernel address space. The remainder of this section
assumes that addresses are already de-randomized using
the detected offset.
A.2.2 Locating the Victim Process
Linux manages all processes (including their hierarchy)
in a linked list. The head of this task list is stored in the
init task structure, which is at a ﬁxed offset that only
varies among different kernel builds. Thus, knowledge
of the kernel build is sufﬁcient to locate the task list.
Among other members, each task list structure con-
tains a pointer to the next element in the task list as well
as a task’s PID, name, and the root of the multilevel page
table. Thus, the exploit traverses the task list until the
victim process is found.
A.2.3 Dumping the Victim Process
The root of the multilevel page table is extracted from
the victim’s task list entry. The page table entries on
all levels are physical page addresses. Meltdown can
read these addresses via the direct-physical map, i.e., by
adding the base address of the direct-physical map to the
physical addresses. This base address is 0xffff 8800
0000 0000 if the direct-physical map is not randomized.
If the direct-physical map is randomized, it can be ex-
tracted from the kernel’s page offset base variable.
Starting at the root of the victim’s multilevel page ta-
ble, the exploit can simply traverse the levels down to the
lowest level. For a speciﬁc address of the victim, the ex-
ploit uses the paging structures to resolve the respective
physical address and read the content of this physical ad-
dress via the direct-physical map. The exploit can also
be easily extended to enumerate all pages belonging to
the victim process, and then dump any (or all) of these
pages.
990    27th USENIX Security Symposium
USENIX Association