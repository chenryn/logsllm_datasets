### 优化后的文本

#### 数据概览
- **数值数据**:
  - 137, 250, 704, 727, 566, 435, 618, 381, 2227, 2771, 565
- **查询数据** (Co. Query):
  - 1.0, 0.1, 0.3, 0.4, 4.7, 0.6, 0.1, 1.8, 2.0, 1.1, 21.5, 34.0, 9.1, 14.4, 22.2, 30.1, 41.5, 49.7, 13.0
- **其他数据**:
  - 1, 1, 3, 6, 41, 45, 14, 108, 67, 93, 49, 52, 317, 260, 344, 317, 96, 408, 124
- **存储数据** (Storage):
  - 1.6, 1.0, 4.0, 14.5, 26.7, 26.1, 29.3, 231.2, 404.0, 417.5, 291.0, 463.2, 560.4, 523.1, 545.1, 417.6, 591.1, 733.7, 293.4

#### 性能分析
为了评估FLOWDIST的运行时复杂度，我们使用了与图6相同的格式绘制了拟合曲线（见图7）。该曲线的R²值大于0.88，表明FLOWDIST在大规模系统中的运行时开销具有良好的扩展性。无论是总分析时间还是运行时开销，都随着被测对象和跟踪规模的增长而线性增长，这进一步证实了其在实际应用中的高可扩展性。

#### 已知漏洞检测
表4列出了FLOWDIST检测到的已知漏洞。我们从多个来源（如错误库和CVE报告）中查找了这些漏洞，并选择了与信息流安全相关的部分。对于每个被测对象，我们列出了一些案例及其参考链接，标记了哪些被发现，哪些未被发现。最后一列表示假阴性的数量（#FN）。

- **HSQLDB**: 
  - CVE-2005-3280: 检测成功
- **Netty**:
  - CVE-2014-0193, CVE-2014-3488, CVE-2015-2156, CVE-2016-4970, Issue 8869, Issue 9112, Issue 9229, Issue 9243, Issue 9291, Issue 9362: 检测失败
- **RocketMQ**:
  - CVE-2019-17572, CVE-2015-3254: 检测成功
- **Thrift**:
  - Issue 101, Issue 381, Issue 387, Issue 352, Issue 378, Issue 377, Bug 21, CVE-2014-0085, Bug 2569, CVE-2018-8012, CVE-2019-0201: 检测成功
- **Voldemort**:
  - Issue 9: 检测失败
- **xSocket**:
  - [1], [3], [4], [5], [7], [10], [11], [12], [13], [14], [15]: 检测成功
- **ZooKeeper**:
  - [9], [6], [16], [20], [21], [17], [19], [18], [22], [2], [23], [32], [8]: 检测成功

#### 新漏洞发现
表5列出了FLOWDIST新发现的24个漏洞，涉及8个被测对象。我们向相关开发者报告了这些漏洞，其中17个已被确认，2个已被修复。需要注意的是，FLOWDIST不需要任何错误报告即可发现已知或新的漏洞/错误——它只需计算指定或默认输入源和汇之间的所有信息流路径进行漏洞检查。

- **HSQLDB**:
  - #Fixed: 2, #Confirmed: 0, #Pending: 0
- **Netty**:
  - #Fixed: 0, #Confirmed: 0, #Pending: 0
- **Raining Sockets**:
  - #Fixed: 0, #Confirmed: 0, #Pending: 0
- **RocketMQ**:
  - #Fixed: 0, #Confirmed: 0, #Pending: 0
- **Thrift**:
  - #Fixed: 4, #Confirmed: 1, #Pending: 0
- **Voldemort**:
  - #Fixed: 0, #Confirmed: 0, #Pending: 0
- **xSocket**:
  - #Fixed: 1, #Confirmed: 0, #Pending: 0
- **Zookeeper**:
  - #Fixed: 5, #Confirmed: 1, #Pending: 4

#### 具体案例
- **Case 1 (Netty)**:
  - 在Netty-Integration执行过程中，这个已修复的案例是一个通过异常控制流导致的日志记录数据泄露。敏感数据（selectionKey）在Nio进程中读取，在Concurrent进程中传递，并最终在Nio进程中泄露。
- **Case 2 (Thrift)**:
  - 在Thrift-Integration执行过程中，我们再次发现了由正常控制流引起的日志记录数据泄露。用户输入的数据在Transport进程中读取，通过Calculator进程传递，并在Transport进程中泄露。

#### 准确性分析
图10展示了FLOWDIST与基线方法的准确性比较。由于各种安全上下文因素的存在，FLOWDIST报告的信息流路径中只有一部分会被确认为真实漏洞；其余的则为误报。在我们的实验中，我们专注于跨进程路径来发现新的漏洞。从总共323个唯一报告中，通过仔细考虑安全上下文因素，我们确认了209个漏洞。由于与开发者的进一步确认进展缓慢，我们在撰写本文时仅报告了我们认为最严重的24个漏洞。

#### 附加分析
并非FLOWDIST报告的所有信息流路径都代表真正的漏洞。因此，需要额外的分析来确认漏洞。对于已知漏洞，一旦确定了相关的源和汇，根据错误报告描述，FLOWDIST找到的路径可以立即确认漏洞。对于新发现的漏洞，需要通过检查FLOWDIST生成的相关路径来进行确认。