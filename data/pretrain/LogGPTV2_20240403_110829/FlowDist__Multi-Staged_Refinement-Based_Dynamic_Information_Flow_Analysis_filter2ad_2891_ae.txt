137
250
704
727
566
435
618
381
2227
2771
565
Co. Query
1.0
0.1
0.3
0.4
4.7
0.6
0.1
1.8
2.0
1.1
21.5
34.0
9.1
14.4
22.2
30.1
41.5
49.7
13.0
1
1
3
6
41
45
14
108
67
93
49
52
317
260
344
317
96
408
124
Storage
1.6
1.0
4.0
14.5
26.7
26.1
29.3
231.2
404.0
417.5
291.0
463.2
560.4
523.1
545.1
417.6
591.1
733.7
293.4
sequence in it as a run-time complexity measure. In the
same format as Figure 6, Figure 7 shows the ﬁtting curve
with R2>0.88, indicating that FLOWDIST scaled gracefully to
large-scale systems in terms of the runtime overhead.
Both the total analysis time and runtime overhead of
FLOWDIST grew linearly with the growth of subject and
trace sizes, suggesting its high scalability in practice.
Table 4: Known vulnerabilities detected by FLOWDIST
Reference Found #Case
6.3.4 RQ4: Finding Real-World Vulnerabilities
We searched real-world vulnerabilities from varied sources
(e.g., bug repositories and CVE reports) on our subjects and
then selected those on information ﬂow security. We identiﬁed
one or more vulnerabilities for 7 of our studied subjects, as
shown in Table 4. For each of these subjects, cases along
with reference links are listed, with marks indicating which
was found and which was missed. The last column gives the
numbers of false negatives (#FN).
We started with the information ﬂow paths computed in
our experiments for RQ1 and RQ2 (i.e., the paths between
all the sources and sinks in the default lists). Next, for each
of the known vulnerabilities, we narrowed the search down
to the paths between the source/sink that are most relevant
to the vulnerability according to its bug report/description,
while navigating the associated subject’s code to gain more
conﬁdence. Finally, we considered that FLOWDIST found the
vulnerability case if any of those paths is responsible for the
vulnerability as per the bug report/description.
FLOWDIST successfully found most of the cases for all
these 7 subjects but Netty. 5 cases for Netty and 1 for Voldemort
were missed by FLOWDIST. The reason, as we veriﬁed, was
that the missed vulnerabilities were not exercised during
the executions we considered—we did not purposely select
Subject
HSQLDB
Netty
Vulnerability
CVE-2005-3280
CVE-2014-0193
CVE-2014-3488
CVE-2015-2156
CVE-2016-4970
Issue 8869
Issue 9112
Issue 9229
Issue 9243
Issue 9291
Issue 9362
RocketMQ CVE-2019-17572
CVE-2015-3254
Thrift
Issue 101
Issue 381
Issue 387
Issue 352
Issue 378
Issue 377
Bug 21
CVE-2014-0085
Bug 2569
CVE-2018-8012
CVE-2019-0201
ZooKeeper
Voldemort
xSocket
[1]
[3]
[4]
[5]
[7]
[10]
[11]
[12]
[13]
[14]
[15]
[9]
[6]
[16]
[20]
[21]
[17]
[19]
[18]
[22]
[2]
[23]
[32]
[8]
#FN
0
5
0
0
1
0
0
1
10
1
1
6
1
4
(cid:88)





(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
USENIX Association
30th USENIX Security Symposium    2103
Table 5: New vulnerabilities discovered by FLOWDIST
Subject
HSQLDB
Netty
Raining Sockets
RocketMQ
Thrift
Voldemort
xSocket
Zookeeper
#Fixed #Conﬁrmed #Pending
2
0
0
0
0
4
1
0
0
1
0
0
0
0
0
1
5
1
1
4
5
0
0
1
run-time inputs to cover the vulnerabilities but just used those
available to us to represent the operational scenarios of these
systems. We note that for all the 18 successful cases the
underlying information ﬂow paths were interprocess ones.
FLOWDIST found 18 out of 24 vulnerability cases related
to our subjects, all on interprocess ﬂow paths. The other
6 were missed as the respective vulnerabilities were not
covered by the executions analyzed.
6.3.5 RQ5: Discovering New Vulnerabilities
From the information ﬂow paths found by FLOWDIST, we
identiﬁed 24 new vulnerabilities related to 8 of our subjects,
as listed in Table 5. We reported these to the respective
developers, with 17 having been conﬁrmed and 2 already
ﬁxed so far. It is important to note that FLOWDIST does
not need any bug reports or the like to ﬁnd known or new
vulnerabilities/bugs—it just computes all information ﬂow
paths between the speciﬁed or default input sources and sinks
in the given execution for vulnerability inspection, albeit using
such reports that include particular sources/sinks/executions
of interest would facilitate the inspection.
Full details on these 24 cases are documented in [65]. Next,
we illustrate with one ﬁxed case and one conﬁrmed case.
Figure 8: New vulnerabilities discovered: Case 1.
Case 1. In the Netty-Integration execution, this ﬁxed case is a
data leak induced by logging via exceptional control ﬂow, as
depicted in Figure 8. The sensitive data (object selectionKey)
was read in class AbstractNioChannel of the Nio process (at
the source), passed through class SingleThreadEventExecutor of
the Concurrent process, and reached class NioEventLoop of
the Nio process where the data went out of the system (at
the sink). The throwable object t exposed selectionKey in
the log, with which a client registers a socket channel and
connects to the server. An adversary can exploit this leaked
data to launch denial-of-service (DoS) attacks against the
server. A single-process DIFA/DTA would have missed the
interprocess information ﬂow here hence this vulnerability.
Figure 9: New vulnerabilities discovered: Case 2.
Case 2. During the Thrift-Integration execution, we found again
a logging-induced data leak, but in normal control ﬂows, as
depicted in Figure 9. At the source, an user input was read
into buf in class TIOStreamTransport of the Transport process,
passed through class CalculatorClient of the Calculator process,
and ﬂowed back into class TSaslTransport of the Transport
process where the data went out of the system (at the sink).
Any sensitive data (e.g., personal identiﬁcation information)
included in the user input would be leaked into the log,
hence possibly enable intrusions into the system or cause
losses. This vulnerability would be missed by existing
application-level DIFA/DTA too since it occurs also via an
interprocess information ﬂow.
FLOWDIST discovered 24 new vulnerabilities in 8
real-world distributed systems, with 17 conﬁrmed and 2
ﬁxed, suggesting its promising capability in this regard.
Additional analysis. Not every information ﬂow path
reported by FLOWDIST represents a real vulnerability. Thus,
additional analysis is expected for bug conﬁrmation.
For a known vulnerability, once the relevant source and sink
are identiﬁed as described earlier (§6.3.4), the vulnerability
is readily conﬁrmed as per the bug report/description after
FLOWDIST found a path between the source and the sink.
For a new vulnerability, found from given sources/sinks,
the additional analysis/effort is to conﬁrm it by checking the
relevant paths FLOWDIST produced. A path from a source
s to a sink t reported may not always be a really critical
bug to the user: for instance, the data retrieved at s may
not actually be considered sensitive by the user even if t
2104    30th USENIX Security Symposium
USENIX Association
public class AbstractNioChannel extends AbstractChannel { . . . // Executed in a Nio process …… final SelectionKey selectionKey = this.selectionKey;  public void doBeginRead() throws Exception { . . .selectionKey.interestOps(interestOps | readInterestOp);  . . . }}public abstract class SingleThreadEventExecutor extends  . . . {. . . // Executed in a Concurrent process  thread = Thread.currentThread();SingleThreadEventExecutor.this.run(); …… public void run() {public final class NioEventLoop extends SingleThreadEventLoop { . . . // Executed in a Nio process Blue line: source information flow path segment (SOFPS)Green line: remote information flow path segment (REFPS)Red line: sink information flow path segment (SIFPS)Solid line: intraprocess flowDashed line: interprocess flow. . . }}}} private void rebuildSelector0() { . . . } catch (Throwable t) {…… try { oldSelector.close(); final SelectionKey selectionKey = this.selectionKey;  // Source readPending = true; if (logger.isWarnEnabled()) { logger.warn("Failed to close the old Selector.", t);  // Sink. . . }}}public class TIOStreamTransport extends TTransport { . . . // Executed in a Transport process  int bytesRead; public int read(byte[] buf, int off, int len) throws TTransportException { . . .public abstract class CalculatorClient extends  . . . {. . . // Executed in a Calculator process  public static void main(String[] args) {. . . abstract class TSaslTransport extends TTransport { . . . // Executed in a  Transport process . . . }}} public void open() throws TTransportException { . . . bytesRead = inputStream_.read(buf, off, len);  // Source LOGGER.debug("opening transport {}", this);  // Sink transport = createTTransport();  openTTransport(transport);  transport = createTTransport();  . . . }}…… boolean readSaslHeader = false;return bytesRead;   }}Figure 10: The accuracy of FLOWDIST versus the baselines.
represents a data-leaking operation, or the sink is considered
critical (e.g., making a branch decision) but s retrieves data
not from any user input. It is also possible that in the user’s
speciﬁc application scenario there are some external security
protection mechanisms (e.g., logging sensitive data into
protected logs). Such security context factors are not currently
considered by FLOWDIST itself (and it is hard to do so). Thus,
conﬁrmation is generally a necessary additional step.
False positives/negatives. Due to the presence of various
security context factors, only part of the information ﬂow
paths reported by FLOWDIST will be conﬁrmed as real
bugs as described above; others are false positives from a
vulnerability-discovery’s point of view. Note that in RQ1
we reported a zero false positive rate, which was from the
perspective of DIFA reporting true dynamic dependencies.
Given that all the known vulnerabilities were reproduced
on interprocess ﬂows according to the results for RQ4, in
our experiments for RQ5 we focused on interprocess paths
to discover new vulnerabilities. From a total of 323 unique
reports, by carefully considering security context factors, we
conﬁrmed 209 bugs. Further conﬁrmation with developers
went slow, thus we only reported 24 most critical (in our
view) ones by the time of writing this paper. Yet others are