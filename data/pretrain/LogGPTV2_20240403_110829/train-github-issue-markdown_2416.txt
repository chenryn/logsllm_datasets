I recently accepted a pull request for the `Hwloc` package to ensure its compatibility with Julia 0.6. Now, I would like to tag a new minor release so that users can depend on this update. However, I encounter error messages when attempting to publish this tag. I have tried this process using both Julia 0.6 and 0.5.

Here are the steps I followed:
```julia
Pkg.update()
using PkgDev
PkgDev.tag("Hwloc", :minor)
PkgDev.publish()
```
The final step, `PkgDev.publish()`, fails. The first step, `Pkg.update()`, may have generated some warnings or errors, as I have some experimental packages installed. Running `Pkg.update()` or `Pkg.status()` now does not report any issues.

This is the error message I receive (with Julia 0.5):
```julia
julia> PkgDev.publish()
INFO: Validating METADATA
ERROR: packages with unsatisfiable requirements found:
    EEG v0.0.3 â€“ no valid versions exist for package ImageFiltering
 in check_metadata(::Set{String}) at /Users/eschnett/.julia/v0.5/PkgDev/src/entry.jl:301
 in (::PkgDev.Entry.##4#9{String,Dict{String,Array{String,1}},String})(::Base.LibGit2.GitRepo) at /Users/eschnett/.julia/v0.5/PkgDev/src/entry.jl:93
 in with(::PkgDev.Entry.##4#9{String,Dict{String,Array{String,1}},String}, ::Base.LibGit2.GitRepo) at ./libgit2/types.jl:701
 in publish(::String, ::String) at /Users/eschnett/.julia/v0.5/PkgDev/src/entry.jl:64
 in publish() at /Users/eschnett/.julia/v0.5/PkgDev/src/PkgDev.jl:70
```

I have several suggestions for improving this situation:

1. **Simplified Tagging and Publishing**: Publishing a new tag should not necessitate debugging my entire package layout. It's easy to get entangled in package dependencies, especially when developing packages or working with package heads. Since Julia packages are installed globally, it's challenging to set up a separate environment just for tagging and publishing. A solution similar to Haskell's `stack` could be beneficial.

2. **Clearer Error Messages**: The error message is overly verbose. The package manager should provide a clear, concise error message rather than a full stack trace from `libgit2`. Users generally do not need to know the internal communication details between `PkgDev` and git servers.

3. **Consistent Error Reporting**: Both `Pkg.status()` and `Pkg.update()` should also report the same errors. Without consistent reporting, it becomes difficult to diagnose and resolve issues.

4. **Handling Upstream Changes**: When I retried a few days later, `Pkg.update()` got stuck due to upstream changes in `METADATA`. Julia suggested resolving things manually. I attempted to reset local uncommitted changes and rebase, but this only brought me back to the original problem.

5. **Documentation and Workarounds**: There are no instructions for working around these issues. I would appreciate guidance on issuing manual git commands if Julia gets confused. The documentation at https://docs.julialang.org/en/stable/manual/packages/#package-development is detailed but could include more information on common errors and their resolutions. Instructions for manually cloning, pushing, and creating pull requests, as well as creating branches after the fact, would be very helpful.

Thank you for your attention to these suggestions.