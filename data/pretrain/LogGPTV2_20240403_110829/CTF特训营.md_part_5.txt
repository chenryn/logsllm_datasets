---
## Page 55
CTF特训营：技术详解、解题方法与
2.8注入点的位置及发现
55/1144
2.8注入点的位置及发现
前面我们介绍了多种注入方式及利用方式，下面继续介绍注入点
的位置及注入点的发现方法。
1.常见的注入点位置
在CTF中，我们遇到的不一定是注入点是表单中usemame字段
的情况，有时候注入点会隐藏在不同的地方，下面我们就来介绍几个
常见的注入点的位置。
（1）GET参数中的注入
GET中的注入点一般最容易发现，因为我们可以在地址栏获得
URL和参数等，可以用Sqlmap或者手工验证是否存在注入。
(2）POST中的注入
POST中的注入点一般需要我们通过抓包操作来发现，如使用
Burp或者浏览器插件Hackbar来发送POST包。同样，也可以使用
Sqlmap或者手工验证。
(3）User-Agent中的注入
---
## Page 56
CTF特训营：技术详解、解题方法与，
2.8注入点的位置及发现
56/1144
在希望发现User-Agent中的注入时，笔者在这里推荐大家使用
Burp的Repeater模块，或者Sqlmap。将Sqlmap的参数设置为level=3
这样Sqlmap会自动检测user-Agent中是否存在注入。
（4）Cookies中的注入
想要发现Cookies中的注入，笔者同样推荐大家使用Burp的
Repeater模块。当然，在Sqlmap中，我们也可以设置参数为
level=2，这样Sqlmap就会自动检测Cookies中是否存在注入了。
2.判断注入点是否存在
接下来就要确定注入点的位置。在判断输入点是否存在注入时
可以先假设原程序执行的SQL语句，如：
SELECTUserNameFROMUserWHEREid=$id';//参数为字符串
或
SELECTUserNameFROMUserWHEREid=Sid;/I参数为数字
然后通过以下几种方法进行判断：
---
## Page 57
CTF特训营：技术详解、解题方法与
2.8注入点的位置及发现
57/1144
（1）插入单引号
插入单引号是我们最常使用的检测方法，原理在于未闭合的单引
号会引起SQL语句单引号未闭合的错误。
（2）数字型判断
通过and1=1（数字型）和闭合单引|号测试语句and1='1（字符
串型）进行判断，这里采用Payload1=1的自的是为了闭合原语句后
方的单引号。
（3）通过数字的加减进行判断
比如，我们在遇到的题目中抓到了链接http://example.com/?id=2
就可以进行如下的尝试http://example.com/?id=3-1，如果结果与http://
example.com/?id=2相同，则证明id这个输入点可能存在SQL注入漏洞。
---
## Page 58
CTF特训营：技术详解、解题方法与
2.9绕过
58/1144
2.9 绕过
在CTF中，关于SQL注入的题目一般都会涉及绕过。所以，掌握
花式的绕过技术是必不可少的。我们需要熟悉数据库的各种特性，并
利用开阔的思维来对SQL注入的防护措施进行绕过操作。
SQL注入的题目中一般都有绕过这样的类型，常见的绕过方式有
以下几个分类。
1.过滤关键字
即过滤如select、or、from等的关键字。有些题目在过滤时没有
进行递归过滤，而且刚好将关键字替换为空。这时候，我们可以使用
穿插关键字的方法进行绕过操作，如：
select
selselectect
or
oorr
union
uniunionon
也可以通过大小写转换来进行绕过，如：
select
"*
SelECt
or
oR
---
## Page 59
CTF特训营：技术详解、解题方法与
2.9绕过
59/1144
union
NOINn
有时候，过滤函数是通过十六进制进行过滤的。我们可以对关键
字的个别字母进行替换，如：
select
seleclx74
or
olx72
union
uniolx6e
有时还可以通过双重URL编码进行绕过操作，如：
form
%25%36%36%25%36%66%25%37%32%25%36%64
or
%25%36%66%25%37%32
union
%25%37%35%25%36%39%25%36%65%25%36%66%25%36%
65
在CTF题目中，我们通常需要根据一些提示信息及题目的变化来
选择绕过方法。
2.过滤空格
在一些题目中，我们发现出题人并没有对关键字进行过滤，反而
对空格进行了过滤，这时候就需要用到下面这几种绕过方法。
---
## Page 60
CTF特训营：技术详解、解题方法与
2.9绕过
60/1144
1）通过注释绕过，一般的注释符有如下几个：
#
-/**
;%00
这时候，我们就可以通过这些注释符来绕过空格符，比如：
select/**/username/**/from/**/user
2）通过URL编码绕过，我们知道空格的编码是%20，所以可以
通过二次URL编码进行绕过：
%20
%2520
3）通过空白字符绕过，下面列举了数据库中一些常见的可以用
来绕过空格过滤的空白字符（十六进制）：
SQLite3
OA,0D,0C,09,20
---
## Page 61
CTF特训营：技术详解、解题方法与
2.9绕过
61/1144
MySQL5
09,0A,0B,0C,0D,A0,20
PosgresSQL
OA,0D,0C,09,20
Oracle11g
00,0A,0D,0C,09,20
MSSQL
01,02,03,04,05,06,0708,09,0A,0B,0C,0D,0E,0F,10,11,12,13
14,15,16
17,1819,1A,1B,1C,1D,1E,1F,0
如图2-4所示的操作为利用换行符来替代空格的例子。
4）通过特殊符号（如反引号、加号等），利用反引号绕过空格
的语句如下：
..select'user','passwordfrom.
如图2-5所示的是使用反引号对空格进行绕过的示例。这样就能
获取全部的username和password
在不同的场景下，加号、减号、感叹号也会有同样的效果，这里
不一一进行举例说明了，读者可以自行测试。
5）科学计数法绕过，语句如下：
SELECTuser,passwordfromusers
whereuser_id=0e1union select 1,2
---
## Page 62
CTF特训营：技术详解、解题方法与
2.9绕过
62/1144
mysql>use dvwa;
Reading table information for completion of table and column names
Youcan turn off this feature to get a quicker startup with-A
Database changed
mysql>select
->user,password
from
users;
user
password
admin
5f4dcc3b5aa765d61d8327deb882cf99
gordonb
e99a18c428cb38d5f260853678922e03
1337
8d3533d75ae2c3966d7e0d4fcc69216b
pablo
0d107d09f5bbe40cade3de5c71e9e9b7
smithy
5f4dcc3b5aa765d61d8327deb882cf99
set（o.eesec）
图2-4空白字符（换行符）绕过空格过滤的示例
SELECT 1,2 from userswhere user_id-1union selectuser
2
admin
5f4dcc3b5aa765d61d8327deb882cf99
gordonb
e99a18c428cb38d5f260853678922e03
1337
8d3533d75ae2c3966d7e0d4fcc69216b
pablo
ed107de9f5bbe40cade3de5c71e9e9b7
smithy
5f4dcc3b5aa765d61d8327deb882cf99
sec)
图2-5使用反引号绕过空格过滤的示例
结果如图2-6所示，同样可以达到绕过的效果。
---
## Page 63
CTF特训营：技术详解、解题方法与
2.9绕过
63/1144
图2-6使用科学计数法进行绕过
3.过滤单引号
绕过单引号过滤遇到题目最多的是魔术引号，也就是PHP配置文
件php.ini中的magic_quote_gpc。
当PHP版本号小于5.4时（PHP5.3废弃魔术引号，PHP5.4移除），
如果我们遇到的是GB2312、GBK等宽字节编码（不是网页的编
码），可以在注入点增加%df尝试进行宽字节注入（如%df%27）。原
理在于PHP发送请求到MySQL时学符集使用character_set_client设置
值进行了一次编码，从而绕过了对单引号的过滤。
这种绕过方式现在已不多见，基本上也不会出现在未来的CTF比
赛中。
4.绕过相等过滤
根据“猪猪侠”的微博：MySQL中存在utf8_unicode_ci和
utf8_general_ci两种编码格式。utf8_general_ci不仅不区分大小写，而
且A=A，O=O，U=U这三种等式都成立。对于utf8_general_ci等式B=s是
成立的，但是，对于utf8_unicode_ci，等式B=ss才是成立的。
---
## Page 64
CTF特训营：技术详解、解题方法与
2.9绕过
64/1144
这种绕过方式曾在2016年HITCON的BabyTrick题目中作为一个绕
过的考点出现过。
---
## Page 65
CTF特训营：技术详解、解题方法与
2.10SQL读写文件
65/1144
2.10SQL读写文件
在了解了SQL注入方法与过滤绕过的方法之后，我们再来看一下
如何用SQL语句来读写系统文件。有一些比赛题目存在SQL注入漏洞
但是flag并不在数据库中，这时候就需要考虑是否要读取文件或是写
Shell来进一步进行渗透。
这里依I日以MySQL数据库为例，在MySQL用户拥有File权限的情
况下，可以使用load_file和intooutile/dumpfile进行读写。
我们假设一个题目存在注入的SQL语句，代码如下
select username from user where uld =$id
此时，我们就可以构造读文件的Payload了，代码如下：
?id=-1+union+select+load_file(/etc/hosts)
在某些需要绕过单引号的情况下，还可以使用文件名的十六进制
作为load_file函数的参数，如：
---
## Page 66
CTF特训营：技术详解、解题方法与
2.10SQL读写文件
66/1144
?id=-1+union+select+load_file(0x2f6574632f686f737473)
如果题目给出或通过其他漏洞泄露了flag文件的位置，则可以直
接读取flag文件；若没有给出，则可以考虑读取常见的配置文件或敏
感文件，如MySQL的配置文件、Apache的配置文件、.bash_history等。
此外，如果题目所考察的点并不是通过SQL读取文件，则可以考
虑是否能通过SQL语句进行写文件，包括但不限于Webshell、计划任
务等。写文件的Payload如下：
?id=-1+union+select+'+into+outile 'var/www/html/shell.
php
?id=-1+union+select+unhex（—句话Shell的十六进制)+into+dumpfil/var/www/htmll
shell.php
这里需要注意的是，写文件的时候除了要确定有写文件的权限
还要确定自标文件名不能是已经存在的，尝试写入一个已存在的文件
将会直接报错。
此外，在权限足够高的时候，还可以写入UDF库执行系统命令来
---
## Page 67
CTF特训营：技术详解、解题方法与.
2.10SQL读写文件
67/1144
进一步扩大攻击面。
---
## Page 68
CTF特训营：技术详解、解题方法与
2.11小结
68/1144
2.11小结
SQL注入单独作为比赛中的考点就已经较为复杂了，出题人可能
还会配合其他的漏洞考察一些“脑洞大开”的获取flag的方式，那就
更复杂了。
而且在实战过程中，如果单一的过滤手段不能达到自的时，则应
该考虑使用多种绕过手段的组合来实现绕过的自的。若考察点不是为
了得到数据库中的数据，则还应该考虑是否要读写文件。
SQL注入的知识暂时就先讲解这么多，在了解SQL注入的原理
成因、绕过方法之后，将没有什么题自能难倒你了。
---
## Page 69
CTF特训营：技术详解、解题方法与
第3章跨站脚本攻击
69/1144
第3章跨站脚本攻击
现代网站为了提高用户体验往往会包含大量的动态内容，所谓动
态内容，就是Web应用程序根据用户环境和需要来输出相应的内容。
经常遭受跨站脚本攻击的典型应用有：邮件、论坛、即时通信
留言板、社交平台等。
---
## Page 70
CTF特训营：技术详解、解题方法与
3.1概述
70/1144
3.1概述
跨站脚本攻击（CrossSiteScripting，为避免与层叠样式表CSS
混淆，通常简称为XSS）是一种网站应用程序的安全漏洞，是代码注
入漏洞的一种。它使得攻击者可以通过巧妙的方法向网页中注入恶意
代码，导致用户浏览器在加载网页、渲染HTML文档时就会执行攻击
者的恶意代码。
大量的网站曾遭受过XSS漏洞攻击或被发现此类漏洞，如Twitter
Facebook、新浪微博和百度贴吧等。根据OWASP（OpenWeb
ApplicationSecurityProject）公布的2010年的统计数据，在Web安全
威胁前10位中，XSS排名第2，仅次于SQL注入攻击漏洞。
近年的CTF比赛中，XSS漏洞也很常见，如在AlibabaCTF
2015、HCTF2016中均有相关题目。
---
## Page 71
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
71/1144
3.2常见XSS漏洞分类
按漏洞成因，一般可以把XSS漏洞分为反射型、存储型、DOM
型。
基于上述三种XSS类型，还可以根据输出点的不同，依照输出点
的位置分成3类，具体如下。
输出在HTML属性中。
输出在CSS代码中。
输出在JavaScript中。
下面将分别为大家介绍这几种类型
1.反射型XSS
XSS代码作为客户端输入的内容提交给服务端，服务端解析后
在响应内容中返回输入的XSS代码，最终由浏览器解释执行。原型如
下：
---
## Page 72
CTF特训营：技术详解、解题方法与
3.2常见XSS漏洞分类
72/1144