are
in 
User scenario
(cid:47)(cid:47)(cid:47)(cid:47)i, Class A
(cid:47)(cid:47)(cid:47)(cid:47)i, Class B
1: St-Ho-Ex
2: St-Br-Ex
3: St-{Ho- Br}*-Ex
4: St-Ho-Se-Ex
5: St-Br-Se-Ex
6: St-{Ho- Br}*-Se-Ex
7: St-Ho-{Se-Bo}*-Ex
8: St-Br-{Se-Bo}*-Ex
9: St-{Ho- Br}*-{Se-Bo}*-Ex
10: St-Ho-{Se-Bo}*-Pa-Ex
11: St-Br-{Se-Bo}*-Pa-Ex
12:St-{Ho-Br}*-{Se-Bo}*-Pa-Ex
St: Start  Ho: Home   Br: Browse   Se: Search Bo: Book    Pa: Pay    Ex: Exit
10.0
26.7
11.3
18.4
12.2
7.6
3.0
2.0
1.3
3.6
2.4
1.5
10.0
6.6
4.2
13.9
20.4
9.7
4.7
6.9
3.3
6.4
9.4
4.5
Table 1. User scenario probabilities (in%)
For the  class  A  profile,  a  high  proportion  of  users  are
mainly  seeking  for 
information  without  a  buying
intention, whereas the class B profile is  characterized  by  a
higher  proportion  of  users  really  seeking  for  booking  a
trip.  Indeed,  the  percentage  of  transactions  that  end  up
with  a  payment  of  a  trip  is  around  20%  for  user  class B
while  it  is  almost  3  times  lower  for  user  class  A.
Moreover, it  can  be  seen  from  Table  1  that,  for  the  class
B profile, 80% of user  transactions  lead  to  the  invocation
of  the  functions  Search,  Book  or  Pay.  Such  scenarios
involve the external reservation systems in addition  to  the
TA  system.  Therefore, the  quality  of  the  service offered
by  these  reservation  systems  has  a  significant  impact  on
the  user  perceived dependability.  The  percentage  is  lower
(50%) when considering the class A profile.
These two examples of user classes are  used  in  Section
4 to evaluate the user perceived availability.
3.2.  Service  and  Function  levels
The service level  identifies  the  set  of  servers involved
in  the  execution  of  each function  and  describes  their
interactions.  This  analysis  requires  a  deep  understanding
of 
technical  solutions
implemented by the TA system provider.
the  business 
logic  and 
the 
For the sake of illustration,  Table  2  gives  a  simplified
example  of  mapping  between the  functions  provided  at
the TA site, the internal  servers directly  controlled  by  the
TA system provider  and  the  external  servers  operated  and
controlled by external suppliers.
The  external  suppliers correspond  to  the  flight,  hotel,
and car reservation systems  that  provide  information  on
the  corresponding  items  of  a  trip.  Also,  we  assume  that
the TA  provider  uses  the  services  of  an  external  payment
system for handling card-based transactions.
The  internal  services  are supported  by  three  types  of
servers: 1) Web servers that receive user  requests  and  send
back the requested data,  2)  Application  servers that
implement  the  main  operations  needed  to  process  user
requests,  and  Database  servers  handling  data  related
operations (for storing  and  retrieving  information  about
flight,  hotel  and  car reservation  companies,  as  well  as
information on customer orders).
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:04:19 UTC from IEEE Xplore.  Restrictions apply. 
Internal services
Web
Appli-
cation
Data
base
External services
Flight Hotel
Car
Home
(cid:22)
Browse (cid:22)
Search
(cid:22)
Book
(cid:22)
Pay
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
(cid:22)
Pay
ment
(cid:22)
(cid:22)
(cid:22)
(cid:22)
Table 2. Mapping between functions and services
The “Home” function  execution  involves  the  web
server only. However,  for  the  other  functions  several
servers are required. In this case, it is  necessary  to  analyze
for each function  the  interactions  among  the  servers
involved  and  all  possible  execution  scenarios (referred  to
as  function  scenarios).  This  is  achieved through  the
interaction  diagram  dedicated  to  each function.  Examples
of interaction diagrams for the  Browse,  Search,  Book  and
Pay functions are given hereafter.
Browse:  Figure  3  describes  the  interactions  among  the
servers involved  in  the  accomplishment  of  the  Browse
function.  The  “Begin”  and  “End” nodes  identify  the
beginning  and  the  end  of  each function  execution.  Each
path  from  the  “Begin”  node  to  the  “End”  node  identifies
one  possible  function  scenario.  The  probability  of
activation of each scenario can be evaluated by  taking  into
account the  probabilities  qij  associated  to  the  transitions
involved  in  the  corresponding  scenario.  Note  that  the
probability of activation of non-labeled transitions is one.
We can identify three scenarios described as follows:
•  1(cid:65)2(cid:65)3:  The  user  sends  a  request  to  the  web  server
(node 2). The data requested is available in the  local  cache
and returned back to the user (node 3).
• 1(cid:65)2(cid:65)4(cid:65)5(cid:65)6: The web server accepts the user  request
and sends it to the application server (node 4). In this  case
the requested data is  not  available  in  the  local  cache.  The
application server  processes  the  request  and  returns  a
dynamically generated  page  to  the  web  server (node  5).
The  latter  is  then  forwarded  to  the  user  (node  6).  The
database is not involved in this case.
•  1(cid:65)2(cid:65)4(cid:65)7(cid:65)8(cid:65)9(cid:65)10:  The 
server
requires some specific  information  that  is  on  the  TA
database  server  (node  7). After the database  server  has
answered the  application  server,  the  latter  processes  the
user  request  (node 8)  and  sends  the  results  to  the  web
server (node  9).  The  latter  generates  an  HTML page
incorporating the corresponding outputs (node 10).
application 
3
End
5
WS
6
End
1
Begin
2
WS
q2,3
q2,4
4
AS
q4,5
q4,7
7
DS
8
AS
9
WS
10
End
WS : web server
AS : application server
S : database server
Figure 3. Interaction diagram of the “Browse” function
Search:  The  interaction  diagram  describing  the  execution
of  the  Search function  is  decomposed  into  9  stages
(Figure  4).  The  input  data  provided  in  the  search  request
issued by the user (node 1)  are first processed  by  the  web
server  WS  (node 2).  WS  performs  necessary  checks,  and
then breaks down  the  user  request  into three individual
requests corresponding to each aspect of the trip. If  data  is
correct and  in  the  right  format,  it  is  forwarded  to  the
application server AS  (node  4),  otherwise  an  exception  is
sent to the user (node 3). AS uses  the  request  information
to formulate a query and asks the  database  server  (node  5)
for the list of booking systems  to  be  contacted.  Based  on
the answer  received,  AS  sends  a  query  (node  6)  to  the
selected systems  (identified  by  the  Flight, Hotel  and  Car
nodes).  The  AND  operator means  that  the  request  is
submitted  to  the  three types  of  booking  systems  (nodes
7.a,  7.b,  7.c).  The  answers  returned  to  AS  are formatted
(node  8)  and  sent  to  WS  (node  9)  that  forwards them  to
the user (node 10).
The  number  of  Flight, Hotel  and  Car  reservation
systems  is  not  indicated  in  this  figure.  We  assume  that
the  TA  always  interacts  with  the  same  systems.  A
transaction  is  successful  when,  for  each  service  (Flight,
Hotel and Car reservation), at least one system responds.
3
End
1
Begin
2
WS
q2,3
4
AS
q2,4
5
DS
6
AS
AND
7.a
Flight
7.b
Hotel
7.c
Car
8
AS
9
WS
10
End
Figure 4. Interaction diagram of the “Search” function
Book: An  example  of  interaction  diagram  of  the  Book
function  is  given  in  Figure  5.  The  trip  booking  order
received from  the  user  through  WS  is  processed  by  AS.
Using  the  parameters  embedded  in  the  book  order,  AS
interacts  with  the  corresponding  flight,  hotel  and  car
booking  systems  to  book  the  selected trip.  The  booking
references returned to the application server are  then stored
in  the  database,  before  a  confirmation  is  sent  to  the  user
through the web server.
4.a
1
Begin
2
WS
3
AS
AND
Flight
4.b
Hotel
4.c
Car
5
AS
6
DS
7
AS
8
WS
9
End
Figure 5. Interaction diagram of the “Book” function
Pay:  The  interaction  diagram  for  the  Pay  function  is
presented  in  Figure  6.  When  a  payment  call  is  received
through the  web  server,  the  booking  data  is  first  checked
by  the  application  server,  then  a  call  is  sent  to  the
payment  server, 
for  authentication  and  verification
purposes,  and  also  to  accomplish  the  payment.  Finally,
the  application  server updates  the  information  in  the
database  concerning  client  orders,  before sending  a
confirmation to the user.
1
Begin
2
WS
3
AS
4
PS
5
AS
6
DS
7
WS
8
End
WS : web server
AS : application server
DS : database server
PS : payment server
Figure 6. Interaction diagram of the “Pay” function
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:04:19 UTC from IEEE Xplore.  Restrictions apply. 
3.3.  Resource  level
Various  architectural  solutions
The  various  services  are mapped  into  the  resources
involved  in  their  accomplishment.  Therefore,  we  need  to
take into account
the real  hardware  and software
organization  of  the  system.  With  respect  to  external
services, as the architecture on which  these  services  is  not
known,  we  associate  to  each external  service  a  single
resource that  is  considered  as  a  black  box.  For  internal
services,  it  is  possible  to  detail  the  organization  of
internal resources for which the architecture is known.
possible 
for
implementing  the  internal  services,  considering  different
organizations of the servers on the  hardware support (e.g.,
dedicated hosts for each server, vs. multiple servers on  the
same  host)  or  different fault
tolerance strategies (non-
redundant  servers  vs.  replicated  servers).  Replicated
servers  can  be  located  at  one  site  or  be  geographically
distributed  at  distinct  sites.  Also,  fault  tolerance  can  be
applied  to  provide  redundant  accesses  to  the  Internet  or
redundant 
internal
resources. Additionally,  the  architecture solutions  might
be  compared  with regards  to  the maintenance  strategy
adopted by  the  TA  provider  (e.g.,  immediate  vs.  deferred
maintenance, dedicated vs. shared repair resources).
communication 
between 
links
are
the 
For 
illustration  purposes,  we  consider 
two
architectures presented in figures 7 and 8.  We  assume  that
the external  resources  are identical  for  both  architectures.
They  correspond  to  Flight reservation,  Hotel  reservation,
Car  reservation  and  Payment.  We  assume  that  the  flight,
hotel  and  car
reservation  services  are provided  by
respectively NF, NH and NC components each.
The basic  architecture (Figure  7)  consists  in  allocating
a  dedicated  host  to  each  server  and  interconnecting  these
hosts  through  a  LAN.  The  LAN  is  viewed  as  a  single
resource providing communication between the servers.
TA provider site
Disk
Database
server
Payment
server
Web
server
Internet
Flight reservation
Flight reservation
Flight reservation
component system #NF
component system #2
component system #1
Hotel reservation
component system #1
Hotel reservation
component system #2
Hotel reservation
component system #NH
Application
server
LAN
Car reservation
component system #1
Car reservation
component system #2
Car reservation
component system #NC
Figure 7. Basic architecture
TA Provider site
Database
server 1
Database
server 2
D1
D2
Application
server 1
Application
server 2
Payment
server
Web
server 1
Web
server 2
Web
server NW
LAN
Flight reservation
Flight reservation
Flight reservation
component system #NF
component system #2
component system #1
Internet
Hotel reservation
component system #1
Hotel reservation
component system #2
Hotel reservation
component system #NH
Car reservation
component system #1
Car reservation
component system #2
Car reservation
component system #NC
Figure 8. Redundant architecture
The basic architecture  suffers  from  several  weak  points
due  to  the  lack  of  redundancy and  scalability.  The
architecture  described  in  Figure  8  applies  redundancy  in
several places to improve the dependability and  scalability
of  the  basic  architecture.  It  is  based  on  a  server farm
configuration  with  load  balancing,  including  NW  web
servers,  two  application  servers and  two  database servers
with  two  mirrored disks.  The  servers  are  connected
through  a  LAN.  Indeed,  several LANs are generally  used
to interconnect these servers,  nevertheless  we  will assume
that all of them are represented as  a  single  LAN.  Also,  to
simplify 
the  load  balancers  are  not
explicitly described in this architecture.
the  modeling, 
In  the  next  section,  we  will  model  the  availability  of