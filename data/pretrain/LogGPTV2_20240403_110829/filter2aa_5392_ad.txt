.PP
.nf
\&   $field = $query->radio_group(
\&               name      => 'group_name',
\&               values    => ['eenie','meenie','minie'],
\&               default   => 'meenie',
\&               linebreak => 'true',
\&               labels    =>\e%labels
\&   );
.fi
.PP
注意哈希初始化时的顺序和输出时的顺序并不一定相同. 要得到顺序的输出可以参见 perlfunc 中的\[lq]sort\[rq]
.SS "Subscripts 下标"
.\".IX Subsection "Subscripts"
数组可以用一个美元符号，加上它的名字(不包括前导的`@'\fR)，加上方括号和其中包含的下标来取得值。例如：
.PP
.nf
\&    @myarray = (5, 50, 500, 5000);
\&    print "Element Number 2 is", $myarray[2], "\en";
.fi
.PP
数组下标从 0 开始。负值下标返回从尾部开始数的值。在我们的例子中，$myarray[\-1]\fR 将是 5000,$myarray[\-2]\fR 是 500。
.PP
Hash 下标与此类似，但是不使用方括号而是花括号。例如：
.PP
.nf
\&    %scientists = 
\&    (
\&        "Newton" => "Isaac",
\&        "Einstein" => "Albert",
\&        "Darwin" => "Charles",
\&        "Feynman" => "Richard",
\&    );
.fi
.PP
\&    print "Darwin's First Name is ", $scientists{"Darwin"}, "\en";
.SS "Slices 片段"
.\".IX Subsection "Slices"
通常对哈希或数组一次访问一个元素. 也可以使用下标对列表元素进行访问.
.PP
.nf
\&    $whoami = $ENV{"USER"};             # one element from the hash
\&    $parent = $ISA[0];                  # one element from the array
\&    $dir    = (getpwnam("daemon"))[7];  # likewise, but with list
.fi
.PP
片段可以一次访问列表,数组或哈希中的几个元素, 这是通过列表下标来实现的. 这比分别写出每个值要方便一些.
.PP
.nf
\&    ($him, $her)   = @folks[0,-1];              # array slice
\&    @them          = @folks[0 .. 3];            # array slice
\&    ($who, $home)  = @ENV{"USER", "HOME"};      # hash slice
\&    ($uid, $dir)   = (getpwnam("daemon"))[2,7]; # list slice
.fi
.PP
既然可以给列表赋值, 当然也可以哈希或数组的片段赋值.
.PP
.nf
\&    @days[3..5]    = qw/Wed Thu Fri/;
\&    @colors{'red','blue','green'} 
\&                   = (0xff0000, 0x0000ff, 0x00ff00);
\&    @folks[0, -1]  = @folks[-1, 0];
.fi
.PP
上面的操作与下列语句等价:
.PP
.nf
\&    ($days[3], $days[4], $days[5]) = qw/Wed Thu Fri/;
\&    ($colors{'red'}, $colors{'blue'}, $colors{'green'})
\&                   = (0xff0000, 0x0000ff, 0x00ff00);
\&    ($folks[0], $folks[-1]) = ($folks[-1], $folks[0]);
.fi
.PP
既然改变片段就会改变数组或哈希的原始值, 那么`foreach'\fR 结构可以部分或全部地改变数组或哈希的值.
.PP
\&    foreach (@array[ 4 .. 10 ]) { s/peter/paul/ }
.PP
.nf
\&    foreach (@hash{qw[key1 key2]}) {
\&        s/^\es+//;           # trim leading whitespace
\&        s/\es+$//;           # trim trailing whitespace
\&        s/(\ew+)/\eu\eL$1/g;   # "titlecase" words
\&    }
.fi
.PP
空列表的片段还是空列表, 因此:
.PP
.nf
\&    @a = ()[1,0];           # @a has no elements
\&    @b = (@a)[0,1];         # @b has no elements
\&    @c = (0,1)[2,3];        # @c has no elements
.fi
.PP
但是:
.PP
.nf
\&    @a = (1)[1,0];          # @a has two elements
\&    @b = (1,undef)[1,0,2];  # @b has three elements
.fi
.PP
下例利用了这一特性,当返回空列表时循环终止:
.PP
.nf
\&    while ( ($home, $user) = (getpwent)[7,0]) {
\&        printf "%-8s %s\en", $user, $home;
\&    }
.fi
.PP
我们在前面说过, 标量上下文中的列表赋值返回值是右侧的元素个数. 空列表没有元素, 所以当口令文件读完后, 返回值是0而不是2.
.PP
为什么对哈希的片段使用'@'而不是'%'呢. 因为括号的类型(方括号或花括号)决定了它是数组还是哈希. 而数组或哈希的开始字符('$'或'@')表示返回值是单个值还是多个值(列表).
.SS "Typeglobs and Filehandles 全局类型和文件句柄"
.\".IX Subsection "Typeglobs and Filehandles"
Perl 使用叫做 全局类型 的类型来支持整个符号表项. 全局类型的前缀是*, 因为它表示所有的类型. 这在过去通常用来给函数传递数组或哈希的引用, 但是现在有了真正的引用, 这就几乎不需要了.
.PP
现在,全局类型的主要用途是创建符号表别名. 如下赋值:
.PP
\&    *this = *that;
.PP
使得$this 成为 $that的别名, @this 成为 @that的别名,%this 成为 %that的别名, &this 成为 &that的别名, 等等. 使用引用会更安全. 这样:
.PP
\&    local *Here::blue =\e$There::green;
.PP
暂时使 $Here::blue 成为 $There::green的别名, 但不会使 @Here::blue 成为 @There::green的别名, 也不会使 %Here::blue 成为 %There::green的别名, 等等. 参见 perlmod 中的 Symbol Tables 有多个例子. 看起来可能有些怪异, 不过这却是整个import/export系统的基础.
.PP
全局类型的其它用途还有, 给函数传输文件句柄或是创建新的文件句柄. 如果你要使用全局类型代替文件句柄, 可以这样做:
.PP
\&    $fh = *STDOUT;
.PP
或者使用真正的引用, 象这样:
.PP
.nf
\&    $fh =\e*STDOUT;
.fi
.PP
参见 perlsub 有关于间接句柄的多个例子.
.PP
全局类型也是使用local() 创建局部文件句柄的一种方法. 作用范围在当前块之内, 但是可以被传回.例如:
.PP
.nf
\&    sub newopen {
\&        my $path = shift;
\&        local  *FH;  # not my!
\&        open   (FH, $path)          or  return undef;
\&        return *FH;
\&    }
\&    $fh = newopen('/etc/passwd');
.fi
.PP
既然我们有*foo{THING} 这样的记法, 全局类型不再多用于文件句柄,但在从函数传出或向函数传入新的文件句柄时它还是必需的.因为*HANDLE{IO} 只有在HANDLE 已经是文件句柄时才起作用. 换言之, 在建立新符号表项时必须使用 *FH; *foo{THING} 是不行的. 不知道该用谁时, 使用 *FH
.PP
所有能创建文件句柄的函数 (open(), opendir(), pipe(), socketpair(), sysopen(), socket(), 和 accept()) ,在传递给它们的句柄是标量时,会自动创建一个匿名句柄. 这使得象open(my $fh, ...) 和 open(local $fh,...) 这样的结构可以创建一个在超出范围时可以自动关闭的句柄,如果没有另外的对它们的引用的话. 这大大减少了全局类型的使用,当需要打开一个可以到处使用的句柄时, 可以这样做：
.PP
.nf
\&    sub myopen {
\&        open my $fh, "@_"
\&             or die "Can't open '@_': $!";
\&        return $fh;
\&    }
.fi
.PP
.nf
\&    {
\&        my $f = myopen(";
\&        # $f implicitly closed here
\&    }
.fi
.PP
注意如果使用了初始化的标量，那么结果会有不同：`my $fh='zzz'; open($fh, ...)'\fR 与`open( *{'zzz'}, ...)'\fR 等价。`use strict 'refs''\fR 禁止了这样做。
.PP
另一个创建匿名句柄的方法是用Symbol 模块或IO::Handle 模块或诸如此类的东西. These modules have the advantage of not hiding different types of the same name during the local(). 在 open() in the perlfunc manpage 的文末有个例子.(译者注:说实话,对匿名句柄我现在也是一头雾水,翻译的不当之处,请高手指出.)
.SH "SEE ALSO 参见"
.\".IX Header "SEE ALSO"
参见 the perlvar manpage 了解 Perl的内建变量和合法变量。参见the perlref manpage, the perlsub manpage, 和 Symbol Tables in the perlmod manpage 了解全局类型和 *foo{THING} 语法。
.SH "中文版维护人"
.B redcandle 
.SH "中文版最新更新"
.B 2001年12月4日星期二
.SH "中文手册页翻译计划"
.B http://cmpp.linuxforum.net