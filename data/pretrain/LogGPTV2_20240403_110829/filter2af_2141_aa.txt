#### 0x00 简介
此篇文章针对jsp版本的哥斯拉webshell进行分析, 主要分析对应JAVA_AES_BASE64载荷,
JAVA_AES_RAW载荷分析类似。另外此篇文章分析采用的哥斯拉版本为V3.03, 但是该版本和V4.01版本不论是客户端还是服务端处理均无太大不同,
甚至哥斯拉V3.03和V4.01的服务端jsp代码都一模一样, 请放心食用。
#### 0x01 哥斯拉源码解析
##### 哥斯拉webshell文件生成分析
哥斯拉webshell生成功能在菜单栏的`管理 -> 生成`处
    点击生成选项后, 会弹出webshell配置选项让我们进行选择, 其中包含了密码、密钥、有效载荷和加密器，这四大选项分别代表的含义如下：
    密码: 哥斯拉客户端发起请求时的参数名， 例如若密码为pass, 则哥斯拉客户端请求包格式为： pass=请求密文; 若密码设置为test, 则哥斯拉客户端请求包格式为： test=请求密文。
    密钥：哥斯拉加密数据所用到的密钥, 请注意该密钥并不是直接用来进行加密处理, 在进行加密处理前该密钥还需经过一道步骤, 即 md5(密钥).substring(0,16) ，处理后的结果就是用来加密的真正的密钥。
    有效载荷： 有效载荷表示webshell的类型, 如果选择JavaDynamicPayload, 则表示webshell是jsp或者jspx类型; 如果选择PhpDynamicPayload, 则表示webshell是php类型。
    加密器：加密器表示选择的有效载荷的加密方式, 也就是选择要生成的webshell在发送和接受请求时采用那种方式加密数据包。如果有效载荷选择JavaDynamic, 加密器选择了JAVA_AES_BASE64, 则表示访问生成的jsp或者jspx文件时, 数据使用AES + BASE64 的方式进行加密传输。
选择好webshell的配置选项后, 点击生成, 然后指定生成的文件后缀, 就可以在选定的目录下生成我们所需要的webshell文件，
这里我密码密钥使用默认的, 有效载荷选择 JavaDynamicPayload, 加密器选择 JAVA_AES_BASE64,
生成一个1.jsp文件。将该文件部署在个人虚拟机搭建的tomcat服务器上, 用来模拟成功上传哥斯拉木马。
webshell已经生成并成功部署后, 我们来分析一下哥斯拉木马生成的代码逻辑。
哥斯拉webshell生成的配置界面为GenerateShellLoder.java,
我们查看该文件。在该文件中我们可以发现生成webshell的按钮点击事件是通过
automaticBindClick.bindJButtonClick方法来调用反射机制来动态绑定点击事件的, 即绑定的点击事件为
generateButtonClick 函数, 我们查看该函数。
该函数首先判断生成webshell的密码、密钥、有效载荷以及加密器是否都已填写, 如果都填写之后则通过Application.getCryption
函数获取到一个Cryption加密器的实例, 然后调用该实体的generate方法生成webshell文件的字节数组。因Cryption是接口类型,
具体generate功能根据选择的加载器不同实现方式不同, 因为我们选择的是JAVA_AES_BASE64加载器,
因此我们查看JavaAesBase64这个加载器类来查看具体generate功能实现。
查看JavaAesBase64类的generate方法实现如下：
该generate方法调用Generate.GenerateShellLoder方法, 传入password,
md5后在截取前16字符的secretKey`(也就是之前说的密钥在真正使用前所需要经过的处理)`, 以及一个boolean类型参数,
该参数用来指定是读取JAVA_AES_BASE64模板, 还是JAVA_AES_RAW模板, 若为false
则表示读取JAVA_AES_BASE64模板。我们进入该Generate.GenerateShellLoder方法查看。
该方法首先会从 shells/java/template/ 资源目录下读取两个模板文件的内容, 根据传入 isBin 参数的boolean 值来决定读取的是
rawGlobalCode.bin 以及 rawCode.bin 还是读取base64GlobalCode.bin 以及 base64Code.bin
文件。因为JavaAesBase64类型调用Generate.GenerateShellLoder方法传入的isBin参数为false,
因此我们以传入false来分析这个Generate.GenerateShellLoder方法,
传入true的情况类似。shells/java/template/ 资源目录中的文件如下：
在读取完 base64GlobalCode.bin 以及 base64Code.bin 文件内容后, 首先用传入
Generate.GenerateShellLoder 方法时的password 和处理过的 secretKey
来替换从base64GlobalCode.bin 模板读取出来的 {pass} 以及 {secretKey} 字符,
base64GlobalCode.bin 模板内容如下：
字符替换完成后, 由用户选择生成的文件后缀是jsp结尾还是jspx结尾。根据用户选择的后缀来读取 shells/java/template/ 资源目录下的
shell.jsp, 或者jspx文件。这里我们选择jsp后缀, 读取的是 shells/java/template/ 资源目录下的shell.jsp
文件。之后程序用处理过后的 base64GlobalCode.bin内容以及读取到的base64Code.bin
内容来分别替换shell.jsp文件中的{globalCode} 以及 {code}字符,
替换成功后就会在用户指定的目录下生成真正的哥斯拉jsp版本的webshell文件。`(如果用户选择了哥斯拉的上帝模式,
会对读取到的shell.jsp采用不同的处理方法, 但为了不复杂化, 这里我们采用普通模式的处理方式。)`哥斯拉上帝模式切换界面和
shells/java/template/ 资源目录下的shell.jsp文件的内容如下：
由此我们可以看出, 哥斯拉webshell文件基本上是写死的, 只是根据每次生成webshell时传入的 pass 和 secretKey 不同,
来替换模板文件中的 {pass} 以及 {secretKey} 字符, 也就是说每次哥斯拉生成的webshell文件除了 pass 和
secretKey可能不一样之外, 剩下的内容全都是一模一样的, 其中包括了流量加解密算法。
##### 哥斯拉测试连接请求过程分析
分析完哥斯拉webshell生成流程后, 我们来分析一下哥斯拉的请求过程。首先我们将之前生成的1.jsp文件放置到本地虚拟机搭建的tomcat服务器上：
哥斯拉客户端请求webshell有多种类型, 有测试webshell连接情况、发送命令执行请求等, 但是请求包加解密方式是一致的,
这里我们首先分析添加webshell到客户端时, 测试webshell连接情况的请求加解密, 添加webshell到客户端的界面如下：
当我们在添加webshell界面配置好要连接的webshell信息后, 点击测试连接, 如果可以成功连接配置的webshell, 则提示 success：
为了对连接webshell流量进行, 我们在webshell配置界面设置http代理到burpsuite：
点击测试连接后, 会发送三个请求包到服务端的1.jsp文件。所发送的请求包与响应包都是经过加密的密文：
接下来我们对这测试webshell连接情况的代码进行分析。配置webshell的界面文件为ShellSetting.java 文件：
查看该java文件代码, 我们会发现哥斯拉作者依旧使用 automaticBindClick.bindJButtonClick 方法来绑定点击事件,
测试连接按钮所对应的鼠标点击事件调用的方法为testButtonClick 方法：
该方法首先调用 updateTempShellEntity() 方法来对shellContext对象进行重新赋值,
这里主要是将webshell配置界面修改的内容同步到shellContext对象上, `(shellContext对象是shellEntity类型,
用来记录webshell配置信息)`：
ShellEntity类型定义如下：
更新好shellContext对象后, 调用该对象的initShellOperation方法：
该方法首先初始化一个Http对象赋值给ShellEntity对象的http成员变量`(每个ShellEntity对象都有自己的http成员变量,
用于各自ShellEntity的Http请求)`, 然后初始化payloadModel 和 cryptionModel 对象,
payloadModel对应于 Payload接口类型, cryptionModel 对应于上文提及的 Cryption接口类型。这里主要对Payload
接口类型进行讲解, 首先查看一下 Payload 接口类型定义：
从该 Payload接口类型定义的方法我们可以看出 Payload接口类型负责定义webshell管理工具的功能动作, 而
Cryption接口类型负责定义webshell管理工具的加解密行为。上文中Cryption接口的实现类型是JavaAesBase64类型,
这里的Payload接口的实现类型为JavaShell类型, 如下`(
因Cryption以及Payload具体的实现类型要讲解的话还需要涉及到哥斯拉初始化扫描payloads 以及cryptions 目录,
然后添加加密器、载荷与类的对应关系到HashMap等内容, 这篇文章主要涉及哥斯拉流量加解密, 为避免复杂化文章内容,
因此这里直接给出此处Payload接口的实现类型为JavaShell类型)`：
初始化好payloadModel 以及 cryptionModel 对象后, 首先调用cryptionModel 的init 和 check方法,
也就是调用 JavaAesBase64类的 init 和 check方法。首先查看init方法：
该方法首先获取到传入该方法的ShellEntity对象的Http成员变量, 然后下面有一段md5操作, 这一操作用于哥斯拉响应包流量的解密,
这一内容会在下文分析哥斯拉响应包解密时讲解。获取到http成员变量后, 因为该http成员变量有ShellEntity对象的相关信息,
包括连接url、代理、password、secretKey等内容, 即保存有对应的webshell配置信息,
因此可以直接对相关的webshell发起请求。但是发起请求还需要请求内容, 这里的请求内容是通过获取ShellEntity对象的payloadModel,
然后调用payloadModel的getPayload() 方法来拿到。这里的payloadModel也就是JavaShell对象,
我们进入该对象的getPayload() 方法：
在该方法中首先读取 shells/java/assets/payload.class 类文件的字节码,
然后将内容传递到dynamicUpdateClassName 方法, 我们进入该方法：
该方法实际上就是根据不同情况往 dynamicClassNameHashMap 中添加内容, 但是对传入的classContent 不会造成太多影响,
我们可以理解为该方法返回的内容就是从 shells/java/assets/payload.class
类文件中读取到的字节码。即JavaShell对象调用的getPayload()方法就是获取 shells/java/assets/payload.class
类文件字节码。我们回到JavaAesBase64类的init方法, 获取到 payload.class类的字节码内容后,
该init方法将获取到的字节码内容通过http请求发送到服务端。那么问题来了, 哥斯拉请求是加密的, 这里并没有调用加密算法对获取到的字节码进行加密,
那么加密流程是在哪里, 我们进入发送http请求的sendHttpResponse 方法：
发现是方法重载, 还会调用重载的sendHttpResponse方法, 继续进入重载的 sendHttpResponse方法：
又是方法重载, 继续进入重载的sendHttpResponse 方法：
我们可以看到代码行：
    byte[] requestData2 = this.shellContext.getCryptionModel().encode(requestData);
这里通过getCryptionModel()方法 获取到 ShellEntity 的Cryption对象,
不同的ShellEntity会采用不同的加密算法, 也就是不同的Cryption对象, 然后调用该对象的encode方法对传输的流量进行加密,
所有哥斯拉请求流量的加密都是在这里进行处理的。对于请求响应的后续处理, 我们在下文的请求响应包加解密时再进行分析, 到这里我们就完成了
this.cryptionModel.init(this) 代码行的分析：
我们接下来分析 this.cryptionModel.check 方法, 该方法很简单, 这里实际上就是调用JavaAesBase64的 check 方法：
这里会返回 JavaAesBase64的state成员变量的值, 而该值在之前调用 JavaAesBase64的init方法时会涉及到,
如果init方法调用成功, 也就是上文所讲述的请求发起成功后, 会将该state值设置为true：
this.cryptionModel.check方法返回true之后, 会开始调用 this.payloadModel.init() 方法,
也就是调用JavaShell的init方法, 我们进入该方法：
该方法会根据传入的ShellEntity实例赋值shell成员变量, 获取shell对象的Http对象来赋值http成员变量,
然后获取shell对象的编码方式`(UTF-8、GBK等)`赋值encoding成员变量。执行完成 this.payloadModel.init()
方法后, 我们开始查看this.payloadModel.test() 方法, 也就是调用JavaShell的 test 方法：
该方法调用evalFunc() 方法, 进入该方法：
这里传入的className是null, 因此不进行if语句中的处理操作, if语句判断过后, 向parameter参数添加 methodName 和
funcName的键值对配对, 之后将parameter参数进行formatEx() 格式化处理后获取到byte数组, 然后进行gzip压缩,