    ```
    使用分区的挂载点替换 [*/mount/point*]{.emphasis}。
7.  编辑 `/etc/fstab`{.literal} 文件，以便在系统引导时自动挂载文件系统：
    ``` screen
    # vi /etc/fstab
    /dev/disk_name /mount/point ext4 _netdev 0 0
    ```
    使用 iSCSI 磁盘名称替换
    [*disk_name*]{.emphasis}，使用分区的挂载点替换
    [*/mount/point*]{.emphasis}。
:::
::: itemizedlist
**其他资源**
-   `targetcli(8)`{.literal} 和 `iscsiadm(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-initiator_managing-storage-devices.html#setting-up-the-challenge-handshake-authentication-protocol-for-the-initiator_configuring-an-iscsi-initiator}为发起方设置 Challenge-Handshake Authentication Protocol {.title}
:::
通过使用
`Challenge-Handshake Authentication Protocol(CHAP)`{.literal}，用户可以使用密码保护目标。发起方必须了解这个密码才能连接到目标。
::: itemizedlist
**先决条件**
-   创建 iSCSI initiator。如需更多信息，请参阅[创建 iSCSI
    启动器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-initiator_managing-storage-devices#creating-an-iscsi-initiator_configuring-an-iscsi-initiator){.link}。
-   为目标设置 `CHAP`{.literal}。如需更多信息，请参阅 [为目标设置
    Challenge-Handshake Authentication
    Protocol](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/configuring-an-iscsi-target_managing-storage-devices#setting-up-the-challenge-handshake-authentication-protocol-for-the-target_configuring-an-iscsi-target){.link}。
:::
::: orderedlist
**步骤**
1.  在 `iscsid.conf`{.literal} 文件中启用 CHAP 验证：
    ``` screen
    # vi /etc/iscsi/iscsid.conf
    node.session.auth.authmethod = CHAP
    ```
    默认情况下，`node.session.auth.authmethod`{.literal} 设置为
    `None`{.literal}
2.  在 `iscsid.conf`{.literal}
    文件中添加目标`用户名`{.literal}和`密码`{.literal} ：
    ``` screen
    node.session.auth.username = redhat
    node.session.auth.password = redhat_passwd
    ```
3.  启动 `iscsid`{.literal} 守护进程：
    ``` screen
    # systemctl start iscsid.service
    ```
:::
::: itemizedlist
**其他资源**
-   `iscsiadm(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-initiator_managing-storage-devices.html#monitoring-an-iscsi-session-using-the-iscsiadm-utility_configuring-an-iscsi-initiator}使用 iscsiadm 程序监控 iSCSI 会话 {.title}
:::
这个步骤描述了如何使用 `iscsiadm`{.literal} 程序监控 iscsi 会话。
默认情况下，iSCSI 服务是`懒`{.literal}启动，服务只在运行
`iscsiadm`{.literal} 命令后才启动。如果 root 没有位于 iSCSI
设备，或者没有标记为 `node.startup = automatic`{.literal} 的节点，则
iSCSI 服务将不会启动，直到执行 `iscsiadm`{.literal} 命令后，需要
`iscsid`{.literal} 或 `iscsi`{.literal} 内核模块启动。
以 root 用户身份执行 `systemctl start iscsid.service`{.literal}
命令，以强制 `iscsid`{.literal} 守护进程运行和 iSCSI 内核模块来加载。
::: orderedlist
**步骤**
1.  在客户端机器上安装 `iscsi-initiator-utils`{.literal}:
    ``` screen
    # dnf install iscsi-initiator-utils
    ```
2.  查找正在运行的会话的信息：
    ``` screen
    # iscsiadm -m session -P 3
    ```
    这个命令显示会话或设备状态、会话
    ID(sid)、一些协商的参数以及可通过会话访问的 SCSI 设备。
    ::: itemizedlist
    -   如果只需要简短的输出，例如：只显示 `sid-to-node`{.literal}
        映射，请运行：
        ``` screen
        # iscsiadm -m session -P 0
                or
        # iscsiadm -m session
        tcp [2] 10.15.84.19:3260,2 iqn.1992-08.com.netapp:sn.33615311
        tcp [3] 10.15.85.19:3260,3 iqn.1992-08.com.netapp:sn.33615311
        ```
        这些命令以以下格式显示了正在运行的会话列表：
        `driver [sid] target_ip:port,target_portal_group_tag proper_target_name`{.literal}。
    :::
:::
::: itemizedlist
**其他资源**
-   `/usr/share/doc/iscsi-initiator-utils-version/README`{.literal} 文件
-   `iscsiadm(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-iscsi-initiator_managing-storage-devices.html#dm-multipath-overrides-of-the-device-timeout_configuring-an-iscsi-initiator}DM 多路径覆盖设备超时 {.title}
:::
`restore_tmo`{.literal} `sysfs`{.literal} 选项控制一个特定 iSCSI
设备的超时时间。以下选项全局覆盖 `recovery_tmo`{.literal} 值：
::: itemizedlist
-   `replacement_timeout`{.literal} 配置选项会全局覆盖所有 iSCSI 设备的
    `recovery_tmo`{.literal} 值。
-   对于由 DM 多路径管理的所有 iSCSI 设备，DM 多路径中的
    `fast_io_fail_tmo`{.literal} 选项会全局覆盖 `recovery_tmo`{.literal}
    值。
    DM 多路径中的 `fast_io_fail_tmo`{.literal} 选项会覆盖光纤通道设备的
    `fast_io_fail_tmo`{.literal} 选项。
:::
DM 多路径 `fast_io_fail_tmo`{.literal} 选项优先于
`replacement_timeout`{.literal}。红帽不推荐使用
`replacement_timeout`{.literal} 在由 DM 多路径管理
`的设备中覆盖 restore_tmo`{.literal}，因为当多路径服务重新加载时，DM
多路径总是重置 restore `_tmo`{.literal}。``{.literal}
:::
:::
[]{#using-fibre-channel-devices_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#using-fibre-channel-devices_managing-storage-devices.html#using-fibre-channel-devices_managing-storage-devices}第 4 章 使用光纤通道设备 {.title}
:::
Red Hat Enterprise Linux 9 提供以下原生光纤频道驱动程序：
::: itemizedlist
-   `lpfc`{.literal}
-   `qla2xxx`{.literal}
-   `zfcp`{.literal}
:::
::: section
::: titlepage
# []{#using-fibre-channel-devices_managing-storage-devices.html#resizing-fibre-channel-logical-units_using-fibre-channel-devices}重新调整光纤通道逻辑单元的大小 {.title}
:::
作为系统管理员，您可以重新定义光纤通道逻辑单元大小。
::: orderedlist
**步骤**
1.  确定哪些设备是 `多路径`{.literal} 逻辑单元的路径：
    ``` screen
    multipath -ll
    ```
2.  在使用多路径的系统中重新扫描光纤通道逻辑单元：
    ``` screen
    $ echo 1 > /sys/block/sdX/device/rescan
    ```
:::
::: itemizedlist
**其他资源**
-   `multipath(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-fibre-channel-devices_managing-storage-devices.html#determining-the-link-loss-behavior-of-device-using-fibre-channel_using-fibre-channel-devices}使用光纤通道确定设备链路丢失行为 {.title}
:::
如果驱动程序实现了传输 `dev_loss_tmo`{.literal}
回调，当检测到传输问题时，通过链接访问设备的尝试将被阻止。
::: itemizedlist
**步骤**
-   确定远程端口的状态：
    ``` screen
    $ cat /sys/class/fc_remote_port/rport-host:bus:remote-port/port_state
    ```
    这个命令返回以下输出结果之一：
    ::: itemizedlist
    -   当远程端口以及通过它访问的设备被阻止时为 `Blocked`{.literal}。
    -   如果远程端口正常运行，则为 `Online`{.literal}
        如果在 `dev_loss_tmo`{.literal} 秒内没有解决这个问题，则
        `rport`{.literal} 和设备将被取消阻塞。所有在该设备上运行的 I/O
        以及发送到该设备的新 I/O 将失败。
    :::
:::
当链路丢失超过 `dev_loss_tmo`{.literal} 时，会删除
`scsi_device`{.literal} 和 `sd_N_`{.literal}
设备。通常，光纤通道类会将设备保留原样，即 `/dev/sdx`{.literal} 将保留
`/dev/sdx`{.literal}。这是因为目标绑定由 Fibre Channel
驱动程序保存，当目标端口返回时，SCSI
地址会被重新创建。但是，这无法保证，只有在无法进行 LUN
的存储框中配置时，才会恢复 `sdx`{.literal} 设备。
::: itemizedlist
**其他资源**
-   `multipath.conf(5)`{.literal} 手册页
-   [推荐在 scsi、multipath 和应用程序层进行调优，同时配置 Oracle RAC
    集群](https://access.redhat.com/solutions/3182081){.link} 知识库文章
:::
:::
::: section
::: titlepage
# []{#using-fibre-channel-devices_managing-storage-devices.html#fibre-channel-configuration-files_using-fibre-channel-devices}Fibre Channel 配置文件 {.title}
:::
以下是 `/sys/class/`{.literal} 目录中为 Fibre Channel 提供用户空间 API
的配置文件列表。
项目使用以下变量：
::: variablelist
[`H`{.literal}]{.term}
:   主机号
[`B`{.literal}]{.term}
:   总线号
[`T`{.literal}]{.term}
:   目标
[`L`{.literal}]{.term}
:   逻辑单元(LUN)
[`R`{.literal}]{.term}
:   远程端口号
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果您的系统使用多路径软件，红帽建议您在更改本节中描述的任何值前咨询您的硬件供应商。
:::
::: variablelist
**传输配置 `/sys/class/fc_transport/targetH:B:T/`{.literal}**
[`port_id`{.literal}]{.term}
:   24 位端口 ID/地址
[`node_name`{.literal}]{.term}
:   64 位节点名称
[`port_name`{.literal}]{.term}
:   64 位端口名称
:::
::: itemizedlist
**远程端口配置 `/sys/class/fc_remote_ports/rport-H:B-R/`{.literal}**
-   `port_id`{.literal}
-   `node_name`{.literal}
-   `port_name`{.literal}
-   `dev_loss_tmo`{.literal}
    控制 scsi 设备从系统中删除的时间。在 `dev_loss_tmo`{.literal}
    触发后，scsi 设备被删除。在 `multipath.conf`{.literal}
    文件中，您可以将 `dev_loss_tmo`{.literal} 设置为
    `infinity`{.literal}。
    在 Red Hat Enterprise Linux 9 中，如果您没有设置
    `fast_io_fail_tmo`{.literal} 选项，`dev_loss_tmo`{.literal}
    的上限将为 `600`{.literal} 秒。默认情况下，在 Red Hat
    Enterprise Linux 9 中， 如果 `multipathd`{.literal}
    服务正在运行，`fast_io_fail_tmo`{.literal} 会被设置为 `5`{.literal}
    秒，如果没有运行，会被设置为 `off`{.literal}。
-   `fast_io_fail_tmo`{.literal}
    指定在将链接标记为\"bad\"之前要等待的秒数。链接被标记为坏的后，现有正在运行的
    I/O 或相应路径上的任何新 I/O 都将失败。
    如果 I/O 处于阻塞队列中，则在 `dev_loss_tmo`{.literal}