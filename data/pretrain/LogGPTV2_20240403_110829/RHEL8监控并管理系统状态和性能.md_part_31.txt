# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#why-perf-displays-some-function-names-as-raw-function-addresses_profiling-cpu-usage-in-real-time-with-top}为什么 perf 显示一些功能名称作为原始函数地址 {.title}
:::
对于内核函数，`perf 使用`{.literal} `/proc/kallsyms`{.literal}
文件中的信息将样本映射到对应的功能名称或符号。但是，对于在用户空间中执行的功能，您可能会看到原始功能地址，因为二进制已被剥离。
必须安装可执行文件的 `debuginfo`{.literal}
软件包；如果可执行文件是本地开发的应用程序，则必须使用打开调试信息（GCC
中的 `-g`{.literal}
选项）编译应用程序，以显示在这种情况下的功能名称或符号。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
安装与可执行文件关联的 `debuginfo`{.literal} 后，不需要重新运行
`perf 记录`{.literal} 命令。只需重新运行 `perf 报告`{.literal} 命令。
:::
::: itemizedlist
**其它资源**
-   [使用调试信息启用调试](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/enabling-debugging-with-debugging-information_debugging-applications){.link}
:::
:::
::: section
::: titlepage
# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#enabling-debug-and-source-repositories_profiling-cpu-usage-in-real-time-with-top}启用 debug 和源存储库 {.title}
:::
Red Hat Enterprise Linux 的标准安装不会启用 debug
和源存储库。这些存储库包含调试系统组件和衡量其性能所需的信息。
::: itemizedlist
**流程**
-   启用源和调试信息软件包频道：
    ``` screen
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-baseos-debug-rpms
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-baseos-source-rpms
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-appstream-debug-rpms
    # subscription-manager repos --enable rhel-8-for-$(uname -i)-appstream-source-rpms
    ```
    `$(uname -i)`{.literal} 部分会自动替换为您的系统构架的匹配值：
    ::: informaltable
      架构名称             值
      -------------------- ---------
      64 位 Intel 和 AMD   x86_64
      64-bit ARM           aarch64
      IBM POWER            ppc64le
      64-bit IBM Z         s390x
    :::
:::
:::
::: section
::: titlepage
# []{#profiling-cpu-usage-in-real-time-with-top_monitoring-and-managing-system-status-and-performance.html#getting-debuginfo-packages-for-an-application-or-library-using-gdb_profiling-cpu-usage-in-real-time-with-top}使用 GDB 为应用程序或库获取 debuginfo 软件包 {.title}
:::
调试信息需要调试信息。对于从软件包安装的代码，GNU
Debugger(GDB)会自动识别缺少的调试信息，解决软件包名称并提供了有关如何获取软件包的具体建议。
::: itemizedlist
**先决条件**
-   您要调试的应用程序或库必须安装在系统上。
-   在系统中必须安装 GDB 和 `debuginfo-install`{.literal}
    工具。详情请查看
    [设置调试应用程序](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/setting-up-a-development-workstation_developing-applications#setting-up-to-debug-applications_setting-up-a-development-workstation){.link}。
-   在系统上必须配置并启用提供 ` debuginfo`{.literal} 和
    debugsource``{=html} 软件包的频道。
:::
::: orderedlist
**流程**
1.  启动附加到您要调试的应用程序或库的 GDB。GDB
    自动识别缺少的调试信息，并建议运行 命令。
    ``` screen
    $ gdb -q /bin/ls
    Reading symbols from /bin/ls...Reading symbols from .gnu_debugdata for /usr/bin/ls...(no debugging symbols found)...done.
    (no debugging symbols found)...done.
    Missing separate debuginfos, use: dnf debuginfo-install coreutils-8.30-6.el8.x86_64
    (gdb)
    ```
2.  退出 GDB: 键入 [**q**]{.keycap}，然后使用 [**Enter
    进行确认**]{.keycap}。
    ``` screen
    (gdb) q
    ```
3.  运行 GDB 建议的命令以安装所需的 `debuginfo`{.literal} 软件包：
    ``` screen
    # dnf debuginfo-install coreutils-8.30-6.el8.x86_64
    ```
    `dnf`{.literal}
    软件包管理工具提供更改摘要，要求确认，下载并安装所有必要的文件。
4.  如果 GDB 无法推荐 `debuginfo`{.literal} 软件包，请按照
    [手动为应用程序或库获取 debuginfo
    软件包](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/enabling-debugging-with-debugging-information_debugging-applications#getting-debuginfo-packages-for-an-application-or-library-manually_enabling-debugging-with-debugging-information){.link}
    的步骤进行操作。
:::
::: itemizedlist
**其它资源**
-   [Red Hat Developer Toolset
    用户指南，安装调试信息一节](https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/10/html-single/user_guide/index#sect-Red_Hat_Developer_Toolset-Install-Debugging){.link}
-   [如何下载或安装适用于 RHEL 系统的 debuginfo
    软件包？](https://access.redhat.com/solutions/9907){.link} -
    红帽知识库解决方案
:::
:::
:::
[]{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance}第 20 章 使用 perf stat 计算进程执行期间的事件 {.title}
:::
您可以使用 `perf stat 命令统计`{.literal} 进程执行期间的硬件和软件事件。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: section
::: titlepage
# []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#the-purpose-of-perf-stat_counting-events-during-process-execution-with-perf-stat}perf stat 的目的 {.title}
:::
`perf stat`{.literal}
命令执行指定命令，在命令执行期间保留出现硬件和软件事件的运行计数，并且生成这些计数的统计信息。如果您不指定任何事件，则
`perf stat`{.literal} 计算一组常见的硬件和软件事件。
:::
::: section
::: titlepage
# []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#counting-events-with-perf-stat_counting-events-during-process-execution-with-perf-stat}使用 perf stat 计算事件 {.title}
:::
您可以使用 `perf stat`{.literal}
统计命令执行期间出现的硬件和软件事件，并生成这些计数的统计信息。默认情况下，`perf 统计数据`{.literal}
以每个线程模式运行。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。
:::
::: itemizedlist
**流程**
-   计算事件数。
    ::: itemizedlist
    -   在没有 root 访问权限的情况下运行 `perf stat`{.literal}
        命令只会计算用户空间中发生的事件：
        ``` screen
        $ perf stat ls
        ```
        ::: example
        []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#idm139675497469488}
        **例 20.1. perf stat 的输出在没有 root 访问权限的情况下运行**
        ::: example-contents
        ``` screen
        Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
         Performance counter stats for 'ls':
                      1.28 msec task-clock:u               #    0.165 CPUs utilized
                         0      context-switches:u         #    0.000 M/sec
                         0      cpu-migrations:u           #    0.000 K/sec
                       104      page-faults:u              #    0.081 M/sec
                 1,054,302      cycles:u                   #    0.823 GHz
                 1,136,989      instructions:u             #    1.08  insn per cycle
                   228,531      branches:u                 #  178.447 M/sec
                    11,331      branch-misses:u            #    4.96% of all branches
               0.007754312 seconds time elapsed
               0.000000000 seconds user
               0.007717000 seconds sys
        ```
        :::
        :::
        如上例中所示，当 `perf stat`{.literal} 运行时没有 root
        访问权限时，事件名称后面会加上
        `:u`{.literal}，表示这些事件仅计在用户空间中。
    -   要同时计算用户空间和内核空间事件，在运行 `perf stat`{.literal}
        时，您必须具有 root 访问权限：
        ``` screen
        # perf stat ls
        ```
        ::: example
        []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#idm139675531553152}
        **例 20.2. perf stat 的输出使用 root 访问权限运行**
        ::: example-contents
        ``` screen
        Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
         Performance counter stats for 'ls':
                      3.09 msec task-clock                #    0.119 CPUs utilized
                        18      context-switches          #    0.006 M/sec
                         3      cpu-migrations            #    0.969 K/sec
                       108      page-faults               #    0.035 M/sec
                 6,576,004      cycles                    #    2.125 GHz
                 5,694,223      instructions              #    0.87  insn per cycle
                 1,092,372      branches                  #  352.960 M/sec
                    31,515      branch-misses             #    2.89% of all branches
               0.026020043 seconds time elapsed
               0.000000000 seconds user
               0.014061000 seconds sys
        ```
        :::
        :::
        ::: itemizedlist
        -   默认情况下，`perf 统计数据`{.literal}
            以每个线程模式运行。要更改为 CPU 范围的事件计数，请将
            `-a`{.literal} 选项传递到 `perf stat`{.literal}。要计算 CPU
            范围的事件，您需要 root 访问权限：
            ``` screen
            # perf stat -a ls
            ```
        :::
    :::
:::
::: itemizedlist
**其它资源**
-   `perf-stat(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#interpretation-of-perf-stat-output_counting-events-during-process-execution-with-perf-stat}perf stat 输出的解读 {.title}
:::
`perf stat`{.literal}
执行命令期间执行一个指定命令并计算发生的事件，并在三列中显示这些计数的统计信息：
::: orderedlist
1.  给定事件的出现次数
2.  所计算的事件的名称
3.  当相关指标可用时，最右侧列的 hash
    符号(`#`{.literal})后会显示一个比率或百分比。
    例如，在默认模式下运行时，`perf stat`{.literal}
    计算周期和指令，因此在最右侧列中计算并显示每个周期的指令。您可以看到与分支缺少相关的类似行为，因为默认情况下这两个事件都被计算为两个分支的百分比。
:::
:::
::: section
::: titlepage
# []{#counting-events-during-process-execution-with-perf-stat_monitoring-and-managing-system-status-and-performance.html#attaching-perf-stat-to-a-running-process_counting-events-during-process-execution-with-perf-stat}将 perf stat 附加到正在运行的进程 {.title}
:::
您可以将 `perf stat`{.literal} 附加到正在运行的进程。这将指示
`perf stat`{.literal} 计算命令执行期间仅在指定进程中发生的事件。
::: itemizedlist
**先决条件**
-   您已安装 `perf`{.literal} 用户空间工具，如 [安装
    perf](#getting-started-with-perf_monitoring-and-managing-system-status-and-performance.html#installing-perf_getting-started-with-perf "安装 perf"){.link}
    所述。