### Stack Overflow and Insecure Code Snippets

Based on insecure code snippets found on Stack Overflow, [13] demonstrated the ability to attack several high-profile applications and extract private data. Additionally, [27] discovered that only 45 out of 639,283 Android apps implemented certificate pinning, while 25% of developers found it too complex to use. [2] reported that tasks similar to Trust Manager (TM) could not be effectively addressed with simplified cryptographic APIs in a user study.

### Nudge Treatment Results

The nudge treatment performed well, but only slightly better than the control treatment, with 86.7% and 81.8% secure solutions, respectively. For Cipher, IV, and TLS, the nudge results were less desirable, achieving 46.2% and 38.5% secure solutions, respectively. Although these results were better than the control treatment, they were not statistically significant (p < 0.077 and p < 0.53; Chi-Square).

To understand these observations, we analyzed the visited posts, copy-and-paste history, and submitted code from participants who provided insecure solutions. For IV, four insecure solutions reused patterns from code snippets incorrectly marked as recommended. Interestingly, the remaining insecure solutions were created by users combining secure code from different correctly marked recommendations into insecure code. Users reused the seed statement for IV from one snippet and initialized it with an empty array from another snippet that did not use IV. For TLS, all insecure solutions were copied from clearly marked insecure snippets.

### Copy-and-Paste Behavior

We calculated the average copy-paste rate per task for both treatments, which measures the relative frequency of copied code being reused in a submitted solution (see Figure 7b). In the nudge treatment, no insecure copy-and-paste events were observed for Cipher, Key, and TM, while secure code was reused at rates of 0.45, 0.55, and 0.72, respectively. This aligns with the observed security outcomes in Figure 7a, where more secure than insecure solutions were provided. However, insecure copy-and-paste events were observed for IV and TLS, explaining the higher number of insecure solutions. In the control treatment, the copy-paste rate for insecure snippets closely followed the observed frequencies of insecure results for all tasks except Cipher.

### Warnings, Recommendations, and Reminders

Even though all users in the nudge group saw security warnings, the insecure-to-secure copy event ratio was 0.27 for both treatments, indicating that warnings alone are insufficient to prevent users from placing insecure code on the clipboard. The copy-paste rate showed that the nudge group tended to discard insecure copies and paste more secure copies into their solutions, likely due to the reminder nudge triggered by insecure copy events. In contrast, the control group pasted insecure snippets into their solutions. Therefore, the interaction of several nudges improved the security decisions of the participants. In the exit survey, users rated the relevant nudges highly, with average Likert scores above 4 (on a 5-point scale).

### Limitations

The response rate during recruitment for our developer study was low, but the participation count per treatment was similar to comparable peer-reviewed studies. Participation may introduce self-selection bias, but we avoided any security framing during recruitment. The study was conducted in a laboratory under strict time constraints, using unfamiliar tools, which may limit the generalizability of the results. Most participants were students, with a minority having professional backgrounds. Professionals performed slightly better in achieving functional solutions but not in security across both treatments, making comparisons valid.

### Future Work

Our recommendation approach may be subject to attacks. In an adversarial setting, machine learning algorithms can be vulnerable to manipulated input data. An attacker might craft malicious code that is mistakenly classified as secure, potentially spreading it on a large scale. However, techniques have been proposed to counter such adversarial effects [18, 24, 28].

Stack Overflow provides code examples for almost every programming language. Our framework learns the optimal code representation for a given classification task based on general code features, making it applicable to different languages. A language-specific compiler or universal parser can generate the Program Dependence Graph (PDG), which is then fed to our pattern embedding network. The representation learning of API-specific lexical features is independent of the programming language.

Additional UI testing is suggested to identify the optimal design. Following Felt et al. [15], different security indicators such as alternative candidate icons and text should be tested, for instance, within user surveys or by repeating the developer study. Stack Overflow's partnership program with academia could facilitate this.

### Conclusion

In this paper, we propose an approach for deep learning security nudges to help software developers write strong encryption code. Our system, integrated into Stack Overflow, includes several security nudges: warnings, recommendations, reminders, and defaults. We train a classification model that predicts secure and insecure cryptographic usage patterns with an AUC-ROC of 0.999 and 0.992, respectively. Applying this model, we conducted a user study where participants solved error-prone cryptographic programming tasks, demonstrating the effectiveness of nudges in improving security decisions.

### Acknowledgements

The authors thank Fraunhofer AISEC for technical support, DIVSI for research support, and the anonymous reviewers for their valuable comments.

### References

[References listed here as per the original text]

---

This optimized version aims to enhance clarity, coherence, and professionalism, ensuring the content is more accessible and structured.