### NTFS Transactions and Reservations

NTFS maintains a counter, known as the Total Free Available Space, during normal I/O activities. This counter represents the final space that a user can see and use for storing new files or data. This concept, along with others, is part of NTFS Reservations. A key characteristic of NTFS Reservations is that the counters are in-memory volatile representations, which are destroyed when the volume is dismounted.

#### Storage Reserve
Storage Reserve is a feature based on NTFS Reservations, allowing files to have an assigned Storage Reserve area. There are 15 different reservation areas, with 2 reserved by the operating system. These areas are defined and stored both in memory and in the NTFS on-disk data structures.

To use the new on-disk reservations, an application defines a volume’s Storage Reserve area using the `FSCTL_QUERY_STORAGE_RESERVE` file system control code. This code specifies the total amount of reserved space and an Area ID through a data structure. This process updates multiple counters in the Volume Control Block (VCB) and inserts new data into the `$SRAT` named data stream of the Bitmap metadata file. The `$SRAT` data stream contains a data structure that tracks each Reserve area, including the number of reserved and used clusters.

An application can query information about Storage Reserve areas using the `FSCTL_QUERY_STORAGE_RESERVE` file system control code and delete a Storage Reserve using the `FSCTL_DELETE_STORAGE_RESERVE` code.

Once a Storage Reserve area is defined, the application is guaranteed that the space will not be used by any other components. Files and directories can be assigned to a Storage Reserve area using the `NtSetInformationFile` native API with the `FileStorageReserveIdInformationEx` information class. The NTFS file system driver manages this request by updating the in-memory reserved and used clusters counters of the Reserve area and the volume’s total number of reserved clusters. It also stores and updates the on-disk `STANDARD_INFO` attribute of the target file, which maintains 4 bits to store the Storage Reserve area ID. This allows the system to quickly enumerate each file that belongs to a reserve area by parsing MFT entries. Users can enumerate the files that belong to a Storage Reserve using the `fsutil storageReserve findyID` command, specifying the volume path name and Storage Reserve ID.

#### Basic File Operations and Storage Reserves
Several basic file operations, such as file creation and renaming, have new side effects due to Storage Reserves. Newly created files or directories automatically inherit the storage reserve ID of their parent. The same applies to files or directories that are renamed (moved) to a new parent. Since a rename operation can change the Storage Reserve ID, it might fail due to a lack of disk space. Moving a non-empty directory to a new parent implies that the new Storage Reserve ID is recursively applied to all the files and subdirectories. When the reserved space of a Storage Reserve ends, the system starts to use the volume’s free available space, so there is no guarantee that the operation will always succeed.

### Experiment: Witnessing Storage Reserves
Starting from the May 2019 Update of Windows 10 (19H1), you can view existing NTFS reserves using the built-in `fsutil.exe` tool:

```sh
C:\>fsutil storagereserve query c:
```

Example output:
```
Reserve ID:       1
Flags:            0x00000000
Space Guarantee:  0x0 (0 MB)
Space Used:       0x0 (0 MB)

Reserve ID:       2
Flags:            0x00000000
Space Guarantee:  0x0 (0 MB)
Space Used:       0x199ed000 (409 MB)
```

Windows Setup defines two NTFS reserves: a Hard reserve (ID 1) used by the Setup application to store its files, which cannot be deleted or replaced by other applications, and a Soft reserve (ID 2) used to store temporary files like system logs and Windows Update downloaded files. In the example, the Setup application has installed all its files, and no Windows Update is executing, so the Hard Reserve is empty, while the Soft reserve has all its reserved space allocated.

You can enumerate all the files that belong to the reserve using the `fsutil storagereserve findbyid` command. For example:

```sh
C:\>fsutil storagereserve findbyid c: 2
```

Example output:
```
********* File 0x0002000000018762 *********
File reference number   : 0x0002000000018762
File attributes         : 0x00000020: Archive
File entry flags        : 0x00000000
Link (ParentID: Name)   : 0x0001000000001165: NTFS Name    : Windows\System32\winevt\Logs\OAlerts.evtx
Link (ParentID: Name)   : 0x0001000000001165: DOS Name     : OALERT~1.EVT
Creation Time           : 12/9/2018 3:26:55
Last Access Time        : 12/10/2018 0:21:57
Last Write Time         : 12/10/2018 0:21:57
Change Time             : 12/10/2018 0:21:57
LastUsn                 : 44,846,752
OwnerId                 : 0
SecurityId              : 551
StorageReserveId        : 2

Stream: 0x010  ::$STANDARD_INFORMATION
    Attributes: 0x00000000: *NONE*
    Flags: 0x0000000c: Resident | No clusters allocated
    Size: 72
    Allocated Size: 72

Stream: 0x030  ::$FILE_NAME
    Attributes: 0x00000000: *NONE*
    Flags: 0x0000000c: Resident | No clusters allocated
    Size: 90
    Allocated Size: 96

Stream: 0x080  ::$DATA
    Attributes: 0x00000000: *NONE*
    Flags: 0x00000000: *NONE*
    Size: 69,632
    Allocated Size: 69,632
    Extents: 1 Extents: 1: VCN: 0 Clusters: 17 LCN: 3,820,235
```

### Transaction Support
NTFS leverages the Kernel Transaction Manager (KTM) support in the kernel and the facilities provided by the Common Log File System (CLFS) to implement a transactional model called Transactional NTFS (TxF). TxF provides a set of user-mode APIs that applications can use for transacted operations on their files and directories, as well as a file system control (FSCTL) interface for managing its resource managers.

#### TxF Architecture
The overall architecture for TxF, shown in Figure 11-54, uses several components:
- Transacted APIs implemented in the `Kernel32.dll` library
- A library for reading TxF logs (`%SystemRoot%\System32\Txfw32.dll`)
- A COM component for TxF logging functionality (`%SystemRoot%\System32\Txflog.dll`)
- The transactional NTFS library inside the NTFS driver
- The CLFS infrastructure for reading and writing log records

#### Isolation
Transactional file operations are opt-in, similar to the transactional registry (TxR) operations described in Chapter 10. TxF ensures that transactional operations are isolated, even for regular applications that are not transaction-aware. For example, if an antivirus program scans a file being modified by another application via a transacted operation, TxF ensures that the scanner reads the pre-transaction data, while applications within the transaction work with the modified data. This model is called read-committed isolation.

Read-committed isolation involves the concepts of transacted writers and transacted readers. Transacted writers always view the most up-to-date version of a file, including all changes made by the transaction associated with the file. Only one transacted writer can exist for a file at any given time, ensuring exclusive write access. Transacted readers, on the other hand, have access only to the committed version of the file at the time they open the file, isolating them from changes made by transacted writers. To see the updated data, transacted readers must open a new handle to the modified file.

Nontransacted writers are prevented from opening the file by both transacted writers and transacted readers, so they cannot make changes to the file without being part of the transaction. Nontransacted readers act similarly to transacted readers in that they see only the file contents that were last committed when the file handle was opened. Unlike transacted readers, however, they do not receive read-committed isolation and always see the latest committed version of a transacted file without having to open a new file handle. This allows non-transaction-aware applications to behave as expected.

To summarize, TxF’s read-committed isolation model has the following characteristics:
- Changes are isolated from transacted readers.