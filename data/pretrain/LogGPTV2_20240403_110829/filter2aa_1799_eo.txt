and NTFS transactions.
NTFS maintains another counter during normal I/O activities, Total Free Available Space, which is the 
final space that a user can see and use for storing new files or data. These three concepts are parts of 
NTFS Reservations. The important characteristic of NTFS Reservations is that the counters are only in-
memory volatile representations, which will be destroyed at volume dismounting time.
Storage Reserve is a feature based on NTFS reservations, which allow files to have an assigned 
Storage Reserve area. Storage Reserve defines 15 different reservation areas (2 of which are reserved by 
the OS), which are defined and stored both in memory and in the NTFS on-disk data structures. 
To use the new on-disk reservations, an application defines a volume’s Storage Reserve area by 
using the FSCTL_QUERY_STORAGE_RESERVE file system control code, which specifies, through a data 
structure, the total amount of reserved space and an Area ID. This will update multiple counters in the 
VCB (Storage Reserve areas are maintained in-memory) and insert new data in the $SRAT named data 
stream of the Bitmap metadata file. The SRAT data stream contains a data structure that tracks each 
Reserve area, including the number of reserved and used clusters. An application can query informa-
tion about Storage Reserve areas through the FSCTL_QUERY_STORAGE_RESERVE file system control 
code and can delete a Storage Reserve using the FSCTL_DELETE_STORAGE_RESERVE code.
After a Storage Reserve area is defined, the application is guaranteed that the space will no lon-
ger be used by any other components. Applications can then assign files and directories to a Storage 
Reserve area using the NtSetInformationFile native API with the FileStorageReserveIdInformationEx in-
formation class. The NTFS file system driver manages the request by updating the in-memory reserved 
and used clusters counters of the Reserve area, and by updating the volume’s total number of reserved 
clusters that belong to NTFS reservations. It also stores and updates the on-disk STANDARD_INFO at-
tribute of the target file. The latter maintains 4 bits to store the Storage Reserve area ID. In this way, the 
system is able to quickly enumerate each file that belongs to a reserve area by just parsing MFT entries. 
(NTFS implements the enumeration in the FSCTL_QUERY_FILE_LAYOUT code’s dispatch function.) A 
user can enumerate the files that belong to a Storage Reserve by using the fsutil storageReserve 
findyID command, specifying the volume path name and Storage Reserve ID she is interested in.
CHAPTER 11
Caching and file systems
687
Several basic file operations have new side effects due to Storage Reserves, like file creation and 
renaming. Newly created files or directories will automatically inherit the storage reserve ID of their 
parent; the same applies for files or directories that get renamed (moved) to a new parent. Since a 
rename operation can change the Storage Reserve ID of the file or directory, this implies that the op-
eration might fail due to lack of disk space. Moving a nonempty directory to a new parent implies that 
the new Storage Reserve ID is recursively applied to all the files and subdirectories. When the reserved 
space of a Storage Reserve ends, the system starts to use the volume’s free available space, so there is 
no guarantee that the operation always succeeds.
EXPERIMENT: Witnessing storage reserves
Starting from the May 2019 Update of Windows 10 (19H1), you can look at the existing NTFS 
reserves through the built-in fsutil.exe tool:
C:\>fsutil storagereserve query c: 
Reserve ID:       1 
Flags:            0x00000000 
Space Guarantee:  0x0
(0 MB) 
Space Used:       0x0
(0 MB) 
Reserve ID:       2 
Flags:
0x00000000 
Space Guarantee:  0x0
(0 MB) 
Space Used:
0x199ed000
(409 MB)
Windows Setup defines two NTFS reserves: a Hard reserve (ID 1), used by the Setup applica-
tion to store its files, which can’t be deleted or replaced by other applications, and a Soft reserve 
(ID 2), which is used to store temporary files, like system logs and Windows Update downloaded 
files. In the preceding example, the Setup application has been already able to install all its files 
(and no Windows Update is executing), so the Hard Reserve is empty; the Soft reserve has all its 
reserved space allocated. You can enumerate all the files that belong to the reserve using the 
fsutil storagereserve findyId command. (Be aware that the output is very large, so you might 
consider redirecting the output to a file using the > operator.)
C:\>fsutil storagereserve findbyid c: 2 
...
********* File 0x0002000000018762 ********* 
File reference number   : 0x0002000000018762 
File attributes
: 0x00000020: Archive 
File entry flags        : 0x00000000 
Link (ParentID: Name)   : 0x0001000000001165: NTFS Name    : 
Windows\System32\winevt\Logs\OAlerts.evtx
Link (ParentID: Name)   : 0x0001000000001165: DOS Name     : OALERT~1.EVT 
Creation Time
: 12/9/2018 3:26:55 
Last Access Time
: 12/10/2018 0:21:57 
Last Write Time
: 12/10/2018 0:21:57 
Change Time
: 12/10/2018 0:21:57 
LastUsn
: 44,846,752 
OwnerId
: 0 
SecurityId
: 551 
EXPERIMENT: Witnessing storage reserves
Starting from the May 2019 Update of Windows 10 (19H1), you can look at the existing NTFS 
reserves through the built-in fsutil.exe tool:
C:\>fsutil storagereserve query c:
Reserve ID:       1
Flags:            0x00000000
Space Guarantee:  0x0
(0 MB)
Space Used:       0x0
(0 MB)
Reserve ID:       2
Flags:
0x00000000
Space Guarantee:  0x0
(0 MB)
Space Used:
0x199ed000
(409 MB)
Windows Setup defines two NTFS reserves: a Hard reserve (ID 1), used by the Setup applica-
tion to store its files, which can’t be deleted or replaced by other applications, and a Soft reserve 
(ID 2), which is used to store temporary files, like system logs and Windows Update downloaded 
files. In the preceding example, the Setup application has been already able to install all its files 
(and no Windows Update is executing), so the Hard Reserve is empty; the Soft reserve has all its 
reserved space allocated. You can enumerate all the files that belong to the reserve using the 
fsutil storagereserve findyId command. (Be aware that the output is very large, so you might 
consider redirecting the output to a file using the > operator.)
C:\>fsutil storagereserve findbyid c: 2
...
********* File 0x0002000000018762 *********
File reference number   : 0x0002000000018762
File attributes
: 0x00000020: Archive
File entry flags        : 0x00000000
Link (ParentID: Name)   : 0x0001000000001165: NTFS Name    : 
Windows\System32\winevt\Logs\OAlerts.evtx
Link (ParentID: Name)   : 0x0001000000001165: DOS Name     : OALERT~1.EVT
Creation Time
: 12/9/2018 3:26:55
Last Access Time
: 12/10/2018 0:21:57
Last Write Time
: 12/10/2018 0:21:57
Change Time
: 12/10/2018 0:21:57
LastUsn
: 44,846,752
OwnerId
: 0
SecurityId
: 551
688
CHAPTER 11
Caching and file systems
StorageReserveId
: 2 
Stream
: 0x010  ::$STANDARD_INFORMATION 
    Attributes
: 0x00000000: *NONE* 
    Flags
: 0x0000000c: Resident | No clusters allocated 
    Size
: 72 
    Allocated Size
: 72 
Stream
: 0x030  ::$FILE_NAME 
    Attributes
: 0x00000000: *NONE* 
    Flags
: 0x0000000c: Resident | No clusters allocated 
    Size
: 90 
    Allocated Size
: 96 
Stream
: 0x030  ::$FILE_NAME 
    Attributes
: 0x00000000: *NONE* 
    Flags
: 0x0000000c: Resident | No clusters allocated 
    Size
: 90 
    Allocated Size
: 96 
Stream
: 0x080  ::$DATA 
    Attributes
: 0x00000000: *NONE* 
    Flags
: 0x00000000: *NONE* 
    Size
: 69,632 
    Allocated Size
: 69,632 
    Extents
: 1 Extents 
: 1: VCN: 0 Clusters: 17 LCN: 3,820,235
Transaction support
By leveraging the Kernel Transaction Manager (KTM) support in the kernel, as well as the facilities pro-
vided by the Common Log File System, NTFS implements a transactional model called transactional NTFS
or TxF. TxF provides a set of user-mode APIs that applications can use for transacted operations on their 
files and directories and also a file system control (FSCTL) interface for managing its resource managers.
Note Windows Vista added the support for TxF as a means to introduce atomic transac-
tions to Windows. The NTFS driver was modified without actually changing the format of 
the NTFS data structures, which is why the NTFS format version number, 3.1, is the same as it 
has been since Windows XP and Windows Server 2003. TxF achieves backward compatibility 
by reusing the attribute type (LOGGED_UTILITY_STREAM) that was previously used only for 
EFS support instead of adding a new one.
TxF is a powerful API, but due to its complexity and various issues that developers need to consider, 
they have been adopted by a low number of applications. At the time of this writing, Microsoft is con-
sidering deprecating TxF APIs in a future version of Windows. For the sake of completeness, we present 
only a general overview of the TxF architecture in this book.
The overall architecture for TxF, shown in Figure 11-54, uses several components:
I 
Transacted APIs implemented in the Kernel32.dll library
I 
A library for reading TxF logs (%SystemRoot%\System32\Txfw32.dll)
StorageReserveId
: 2
Stream
: 0x010  ::$STANDARD_INFORMATION
    Attributes
: 0x00000000: *NONE*
    Flags
: 0x0000000c: Resident | No clusters allocated
    Size
: 72
    Allocated Size
: 72
Stream
: 0x030  ::$FILE_NAME
    Attributes
: 0x00000000: *NONE*
    Flags
: 0x0000000c: Resident | No clusters allocated
    Size
: 90
    Allocated Size
: 96
Stream
: 0x030  ::$FILE_NAME
    Attributes
: 0x00000000: *NONE*
    Flags
: 0x0000000c: Resident | No clusters allocated
    Size
: 90
    Allocated Size
: 96
Stream
: 0x080  ::$DATA
    Attributes
: 0x00000000: *NONE*
    Flags
: 0x00000000: *NONE*
    Size
: 69,632
    Allocated Size
: 69,632
    Extents
: 1 Extents
: 1: VCN: 0 Clusters: 17 LCN: 3,820,235
CHAPTER 11
Caching and file systems
689
I 
A COM component for TxF logging functionality (%SystemRoot\System32\Txflog.dll)
I 
The transactional NTFS library inside the NTFS driver
I 
The CLFS infrastructure for reading and writing log records
User mode
Kernel mode
CLFS library
TxF library
Application
Transacted APIs
NTFS driver
CLFS driver
FIGURE 11-54 TxF architecture.
Isolation
Although transactional file operations are opt-in, just like the transactional registry (TxR) operations 
described in Chapter 10, TxF has an effect on regular applications that are not transaction-aware 
because it ensures that the transactional operations are isolated. For example, if an antivirus program 
is scanning a file that’s currently being modified by another application via a transacted operation, 
TxF must ensure that the scanner reads the pretransaction data, while applications that access the file 
within the transaction work with the modified data. This model is called read-committed isolation.
Read-committed isolation involves the concept of transacted writers and transacted readers. The 
former always view the most up-to-date version of a file, including all changes made by the transaction 
that is currently associated with the file. At any given time, there can be only one transacted writer for 
a file, which means that its write access is exclusive. Transacted readers, on the other hand, have access 
only to the committed version of the file at the time they open the file. They are therefore isolated from 
changes made by transacted writers. This allows for readers to have a consistent view of a file, even 
when a transacted writer commits its changes. To see the updated data, the transacted reader must 
open a new handle to the modified file.
Nontransacted writers, on the other hand, are prevented from opening the file by both transacted 
writers and transacted readers, so they cannot make changes to the file without being part of the 
transaction. Nontransacted readers act similarly to transacted readers in that they see only the file 
contents that were last committed when the file handle was open. Unlike transacted readers, however, 
they do not receive read-committed isolation, and as such they always receive the updated view of the 
latest committed version of a transacted file without having to open a new file handle. This allows non-
transaction-aware applications to behave as expected.
690
CHAPTER 11
Caching and file systems
To summarize, TxF’s read-committed isolation model has the following characteristics:
I 
Changes are isolated from transacted readers.