Sincronia employs a straightforward optimization for work conservation, effectively mitigating the aforementioned problem. Each orphan coflow is assigned an ordering among all other orphan coflows based on its "oracle completion time (OCT)." The OCT is defined as the time required for the coflow to complete if it were the only one in the network. For a given coflow \( c \), the OCT is calculated as \( \max_p \left( \frac{d_c}{b_p} \right) \), where \( b_p \) represents the bandwidth at port \( p \).

The orphan coflows are scheduled for work conservation in ascending order of the following metric:
\[
\text{current\_time} + \text{max\_epoch\_size} - \text{arrival\_time}
\]
\[
\text{OCT}
\]

This metric is particularly useful for work conservation because it strikes a balance between smaller coflows (those with lower OCTs) and larger coflows that have been waiting for a long time (starved coflows). For example, consider a scenario where three coflows are present: two arrived at time 20 with OCTs of 1 and 10, respectively, and the third arrived at time 0 with an OCT of 25. If the max_epoch_length is 4, at time 21, Sincronia will first schedule the coflow with an OCT of 1 (metric value 1/5), then the coflow with an OCT of 25 (metric value 1), and finally the coflow with an OCT of 10. This approach ensures a balanced selection between small and starved coflows for work conservation.

### 4.5 Other Practical Considerations

Sincronia incorporates several additional techniques to address practical issues in real-world scenarios.

#### Co-existence of Flows and Coflows
In typical datacenter networks, multiple applications coexist, some of which may require network fabric optimization for coflow-based metrics, while others may prioritize individual flow performance. Previous research has enabled coexistence by treating each individual flow as a coflow, but this can be restrictive as flow-based and coflow-based applications may have different performance goals. Sincronia addresses this by using coflow weights. Specifically, Sincronia optimizes for a "weighted" average CCT, allowing network operators to set weights for each coflow. This flexibility enables the system to accommodate different application requirements, though the mechanism for setting these weights depends on the specific applications and is beyond the scope of this paper.

#### Achieving Other Performance Objectives
Sincronia also supports other performance objectives through the use of coflow weights. For instance, deadline-aware scheduling can be handled by assigning coflow weights inversely proportional to their deadlines. Sincronia also supports admission control by assigning zero weights to coflows that are certain to miss their deadlines, thus scheduling them after other coflows. Designing coflow scheduling algorithms with provable guarantees for deadlines remains an open research problem.

#### Starvation Freedom
Minimizing average completion time often leads to starvation. However, Sincronia's prioritized work conservation mechanism helps mitigate this issue. As the waiting time of a coflow increases, its chances of being selected for work conservation also improve, thereby reducing the likelihood of starvation.

### 5 Evaluation

We now present evaluation results for Sincronia, starting with a description of the workloads and performance metrics used (§5.1). We then evaluate Sincronia using simulations (§5.2) and a 16-server testbed (§5.3).

#### 5.1 Workloads and Performance Metrics
We use two workloads for our evaluation. The first is a 526-coflow trace from a one-hour run of MapReduce jobs on a 3000-machine cluster at Facebook. The second is a collection of traces generated using a coflow workload generator, allowing us to upscale the Facebook trace to a desired number of coflows and network load while maintaining similar characteristics. Unless otherwise specified, our custom traces use 2000 coflows, a network load of 0.9, and a time horizon reset after 8 epochs. Varys does not support weighted coflow scheduling, so we use unit weights for all coflows for a fair comparison.

**Metrics:**
- **Offline Algorithm:** Evaluated in terms of average and high percentile CCT.
- **Online Algorithm:** Evaluated using the slowdown metric, defined as the ratio of a coflow's CCT to its OCT.

#### 5.2 Simulation Results
We evaluate Sincronia against the state-of-the-art [10] using simulations and perform sensitivity analysis over various parameters.

**Setup:**
- Varys uses a flow-level simulator. For a fair comparison, we incorporate Sincronia within the Varys simulator, using BSSI for coflow ordering and a greedy algorithm for flow scheduling.
- The network is modeled using a non-blocking 150-port switch, with each port corresponding to a top-of-the-rack switch in a 3000-machine cluster.

**Offline Algorithm:**
- Figures 5(a)-5(c) show that Sincronia significantly outperforms existing designs, improving CCT by 1.7× on average and 7.9× at the 99th percentile compared to TCF and Varys.
- Figure 5(d)-5(e) provide insights into how Sincronia achieves these improvements, primarily through its BSSI algorithm.

**Online Algorithm:**
- Figures 6(a)-6(c) demonstrate that Sincronia handles online coflow arrivals well, achieving performance within 1.7× on average and 5.7× at high percentiles compared to an unloaded network.
- Larger coflows experience higher slowdowns, which is expected due to the prioritization of smaller coflows and the work conservation heuristic.

**Sensitivity Analysis:**
- Figures 7(a)-7(c) show the impact of varying network load, number of epochs, and epoch mechanisms on Sincronia's performance.

#### 5.3 Implementation Results
We present evaluation results for Sincronia's implementation on top of TCP (using DiffServ for priority scheduling) on a 16-server testbed with a FatTree topology. We compare Sincronia's performance against a coflow-agnostic TCP implementation.

**Results:**
- For a workload of 526 coflows at 0.7×MSL, Sincronia improves CCT by 18.61× on average, 46.95× at the 90th percentile, and 149.05× at the 99th percentile compared to coflow-agnostic TCP.
- Sincronia achieves these improvements by slowing down less than 10% of the coflows by more than 2×, even under higher loads.

This evaluation highlights the significant benefits of Sincronia in managing coflows, especially in high-load scenarios.