HITCON GIRLS 的第一个软体
破解课程 
Charles 
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 
• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
逆向工程与软体破解 
• 何谓逆向工程 – 从宅仔和小P的爱情故事说
起 
逆向工程与软体破解 
• 何谓逆向工程 – 宅仔深爱著小 p，却发现自 
己听不懂她说的话 
!@#$%^&*
()_+ 
int main(){ 
    printf(“I love you\n!!”); 
} 
817C24 08 1101>CMP DWORD PTR SS:[ESP+8],111 
75 74          JNZ SHORT ncrackme.004010CE 
8B4424 0C      MOV EAX,DWORD PTR SS:[ESP+C] 
66:3D EA03     CMP AX,3EA 
75 42          JNZ SHORT ncrackme.004010A6 
E8 C7010000    CALL ncrackme.00401230 
85C0           TEST EAX,EAX 
逆向工程与软体破解 
• 何谓逆向工程 – 痴心的宅仔想更了解小p的
内心世界，于是努力学习小p的语言 – 机器
语言。 
逆向工程与软体破解 
• 何谓逆向工程 –宅仔成功了，他学会了逆向
工程，成为了 
• 成功掳获小p的心。 
骇客 
逆向工程与软体破解 
• 逆向工程：工程师在写程式时， 
– 通常是以高阶语言(high level language)作撰写， 
– 再借由Compiler的帮助将其转化成电脑所能接
受的机器语言(Machine language)。 
– 逆向工程是将一个编译过的二进位程式档，试
图重制，或了解该程式运作方式的过程。 
• 软体破解：借由逆向工程的手法，了解程
式的架构或流程后，尝试对其进行修改，
以改变其原始运作方式 
    (让它乖乖听话)。 
软体破解实例 – 序号破解 
逆向工程与软体破解 
• 为什么我们要学逆向工程： 
– 破解软体保护 (跟朋友炫耀，用免钱的程式) 
– 让没有原始码的软体程式可以二次利用 
– 评估软体程式品质和健全性 (黑箱测试) 
– 研究病毒和恶意程式 (like Charles ) 
– 帮现有程式增加功能 (写游戏外挂) 
逆向工程与软体破解 
• 作逆向工程前，你必须： 
– 写过简单程式，了解何谓程式架构、逻辑判断
及流程跳转 
– 碰过一点组合语言 
– 具备耐心与热忱 
逆向工程与软体破解 
• 逆向工程常用到的工具： 
– 除错器(Debuggers) 
– 16进位编辑器(Hex editors) 
– PE and resource viewers/editors 
– System Monitoring tools 
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 
• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
Lab 0 
• 用资源编辑器来作我们的第一个程式修改： 
Lab 0 
• 目的：修改出中文的小算盘： 
Lab 0 
• 用XN Resource Editor打开”Lab 0”里面附
的calc.exe [File]  [Open] 
Lab 0 
• 选择左方栏String Table, 依次展开，寻找想
要修改的项目 
• 找到想要修改的项目后，在该栏位上按右
键修改 
Lab 0 
• 动手时间：10 mins 
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 
• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
程式破解前你必须知道的二三事 
• 程式流程跳转: if-else 
int main(){ 
    unsigned int age; 
    printf("Please enter your age: "); 
    scanf("%d", &age); 
    printf("\n"); 
    if(age age.exe 
Please enter your age: 18 
Let's have a crazy party !! :D 
C:\Documents and Settings\Administrator\桌面
\Hitcon_girls\Lab>age.exe 
Please enter your age: 12 
I'm sorry, deer cutie, you are not allowed to drink beer :( 
程式操作 
程式破解前你必须知道的二三事 
• 程式流程跳转(示意图) 
Action 1 
Action2 
印出讯息并读入使用者输入的数字 
printf("Please enter your age: "); 
scanf("%d", &age); 
if(age < 18){ 
    printf("I'm sorry, deer cutie, you are not allowed to drink beer :(\n");} 
else{ 
    printf("Let's have a crazy party !! :D\n");} 
程式破解前你必须知道的二三事 
• 除错器 : 借由除错器(debugger)的帮助，可
以一步步观察目标程式在各时间点的状态 
– 记忆体(memory)状态、 
– 程式码跳转(code branch)， 
• 有效帮助我们了解目标程式的运作逻辑。 
程式破解前你必须知道的二三事 
• 除错器 - 
Code 
Memory 
Register 
Stack 
程式破解前你必须知道的二三事 
• 除错器 – Debugger 指令： 
• 中断点：cpu的特殊instruction，会使程式
流程在该处中断 
– bp xxxx: 在位址xxxx设置软体断点 
– F9: 执行程式，直到遇到断点为止 
– F8: 执行单一指令 
• Debugger操作 
程式破解前你必须知道的二三事 
记忆体位址 
机器码 
组合语言 
Action 1 
Action 2 
 • 我们的程式经编译过后长什么样子呢？ 
程式破解前你必须知道的二三事 
比较变数跟0x12(18)的大小值 
如果条件(不小于)成立，程式跳到0x401037(Action 2)去执行 
Action 1 
Action 2 
 • 机器语言如何实作“流程分支”的概念： 
JNB: Jmp if Not Below 
cmp: compare 
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 