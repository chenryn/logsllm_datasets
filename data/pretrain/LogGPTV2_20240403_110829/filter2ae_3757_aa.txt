**Author: Badcode@Knownsec 404 Team  
Chinese Version: **
On March 20, 2019, Confluence released a [security
alert](https://confluence.atlassian.com/doc/confluence-security-advisory-2019-03-20-966660264.html), there was a server-side template
injection vulnerability(CVE-2019-3396) in Confluence Server and Data Center,
in the Widget Connector. An attacker is able to exploit this issue to achieve
path traversal and remote code execution on systems that run a vulnerable
version of Confluence Server or Data Center.I started researching this
vulnerability.
![
](https://images.seebug.org/content/images/2019/04/9bb154de-a086-4cf1-ac09-6283de9fe1d0.png-w331s)
Confirmed that the vulnerability point occurred in the Widget Connector, I
download the latest version of the comparison patch. There is an additional
filter in the
`com\atlassian\confluence\extra\widgetconnector\WidgetMacro.java` file, I
think this should be the key point in the vulnerability.
![
](https://images.seebug.org/content/images/2019/04/552c7a1b-4dad-4fa9-8bb0-626419b02098.png-w331s)
    this.sanitizeFields = Collections.unmodifiableList(Arrays.asList(VelocityRenderService.TEMPLATE_PARAM));
As we can see, the value of `TEMPLATE_PARAM` is `_template`, so this patch
filters the external incoming `_template` parameter.
    public interface VelocityRenderService {
        public static final String WIDTH_PARAM = "width";
        public static final String HEIGHT_PARAM = "height";
        public static final String TEMPLATE_PARAM = "_template";
Looked at the files inside the Widget Connector and found that
`TEMPLATE_PARAM` is the path to the template file.
    public class FriendFeedRenderer implements WidgetRenderer {
        private static final String MATCH_URL = "friendfeed.com";
        private static final String PATTERN = "friendfeed.com/(\\w+)/?";
        private static final String VELOCITY_TEMPLATE = "com/atlassian/confluence/extra/widgetconnector/templates/simplejscript.vm";
        private VelocityRenderService velocityRenderService;
    ......
        public String getEmbeddedHtml(String url, Map params) {
            params.put(VelocityRenderService.TEMPLATE_PARAM, VELOCITY_TEMPLATE);
            return velocityRenderService.render(getEmbedUrl(url), params);
        }
When the external link is loaded, the relative template is called to render.
As above, the path of templates is generally Hard coding, but there are
exceptions. The role of the patch also indicates that someone broke the limit
and invoked an unexpected template, resulting in a template injection.
After knowing the patch and having some rough guesses, I began to try.
First of all, I found this function. I looked through the official documents
and found this function. You can embed some videos, documents and so on in the
documents.
![
](https://images.seebug.org/content/images/2019/04/8f35d723-2e9b-4687-aa67-ae81612461e6.png-w331s)
Seeing this, I was a little excited, because in the process of watching the
patch, I found several parameters, `url`, `width`, `height` exactly correspond
to here, is `_template` also passed in from here?
Just find a Youtube video to insert, click Preview, use Burpsuite to capture
the package.
![
](https://images.seebug.org/content/images/2019/04/b8b048e4-cdcb-46f0-9c4c-5c5291911b68.png-w331s)
Try inserting the `_template` parameter in params, well, nothing happens. .
![
](https://images.seebug.org/content/images/2019/04/7eb17ac6-a1b5-4566-a709-b213482e0cd7.png-w331s)
Start the debug mode, because the test inserts Youtube video, so the call is
`com/atlassian/confluence/extra/widgetconnector/video/YoutubeRenderer.class`
    public class YoutubeRenderer implements WidgetRenderer, WidgetImagePlaceholder {
        private static final Pattern YOUTUBE_URL_PATTERN = Pattern.compile("https?://(.+\\.)?youtube.com.*(\\?v=([^&]+)).*$");
        private final PlaceholderService placeholderService;
        private final String DEFAULT_YOUTUBE_TEMPLATE = "com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm";
    ......
        public String getEmbedUrl(String url) {
            Matcher youtubeUrlMatcher = YOUTUBE_URL_PATTERN.matcher(this.verifyEmbeddedPlayerString(url));
            return youtubeUrlMatcher.matches() ? String.format("//www.youtube.com/embed/%s?wmode=opaque", youtubeUrlMatcher.group(3)) : null;
        }
        public boolean matches(String url) {
            return YOUTUBE_URL_PATTERN.matcher(this.verifyEmbeddedPlayerString(url)).matches();
        }
        private String verifyEmbeddedPlayerString(String url) {
            return !url.contains("feature=player_embedded&") ? url : url.replace("feature=player_embedded&", "");
        }
        public String getEmbeddedHtml(String url, Map params) {
            return this.velocityRenderService.render(this.getEmbedUrl(url), this.setDefaultParam(params));
        }
In `getEmbeddedHtml` breakpoint, first call `getEmbedUrl` to the user's
incoming url for regular matching, because we are passing a normal youtube
video, so here is no problem, then call `setDefaultParam` function to process
other parameters passed in.
        private Map setDefaultParam(Map params) {
            String width = (String)params.get("width");
            String height = (String)params.get("height");
            if (!params.containsKey("_template")) {
                params.put("_template", "com/atlassian/confluence/extra/widgetconnector/templates/youtube.vm");
            }
            if (StringUtils.isEmpty(width)) {
                params.put("width", "400px");
            } else if (StringUtils.isNumeric(width)) {
                params.put("width", width.concat("px"));
            }
            if (StringUtils.isEmpty(height)) {
                params.put("height", "300px");
            } else if (StringUtils.isNumeric(height)) {
                params.put("height", height.concat("px"));
            }
            return params;
        }
Take the values of `width` and `height` from params to judge whether it is
empty, and set the default value if it is empty. The key `_template` parameter
comes up. If the externally passed parameter does not have `_template`, the
default Youtube template will be set. If it is passed in, it will be passed
in, that is to say, `aaaa` is successfully passed in.
![
](https://images.seebug.org/content/images/2019/04/2349415b-a320-439f-8e5c-470348af962f.png-w331s)
After looking at the Renderer in Widget Connector, most of them can't set
`_template`, which is a direct hardcode. There are also some exceptions, such
as Youtube, Viddler, DailyMotion, etc., which can be passed to `_template`
from the outside.
Can pass `_template` now, let's look at how to get and render the template.
Follow up with `this.velocityresiderservice.render`ï¼Œwhich is the render method
in
`com/atlassian/confluence/extra/widgetconnector/services/DefaultVelocityRenderService.class`
        public String render(String url, Map params) {
            String width = (String)params.get("width");
            String height = (String)params.get("height");
            String template = (String)params.get("_template");
            if (StringUtils.isEmpty(template)) {
                template = "com/atlassian/confluence/extra/widgetconnector/templates/embed.vm";
            }
            if (StringUtils.isEmpty(url)) {
                return null;
            } else {
                Map contextMap = this.getDefaultVelocityContext();
                Iterator var7 = params.entrySet().iterator();
                while(var7.hasNext()) {
                    Entry entry = (Entry)var7.next();
                    if (((String)entry.getKey()).contentEquals("tweetHtml")) {
                        contextMap.put(entry.getKey(), entry.getValue());
                    } else {
                        contextMap.put(entry.getKey(), GeneralUtil.htmlEncode((String)entry.getValue()));
                    }
                }
                contextMap.put("urlHtml", GeneralUtil.htmlEncode(url));
                if (StringUtils.isNotEmpty(width)) {
                    contextMap.put("width", GeneralUtil.htmlEncode(width));
                } else {
                    contextMap.put("width", "400");
                }
                if (StringUtils.isNotEmpty(height)) {
                    contextMap.put("height", GeneralUtil.htmlEncode(height));
                } else {
                    contextMap.put("height", "300");
                }
                return this.getRenderedTemplate(template, contextMap);
            }
        }
`_template` is taken out and assigned to the template. The other parameters
passed in are taken out and put into the `contextMap` after the judgment, and
the `getRenderedTemplate` function is called, that is, the
`VelocityUtils.getRenderedTemplate` is called.
       protected String getRenderedTemplate(String template, Map contextMap){
            return VelocityUtils.getRenderedTemplate(template, contextMap);
        }
All the way to call, the call chain is as shown below, and finally comes to
the `loadResource` function of
`/com/atlassian/confluence/util/velocity/ConfigurableResourceManager.class` to
get the template.
![
](https://images.seebug.org/content/images/2019/04/133e1155-3bb4-4bdc-96a5-a3d368b17c36.png-w331s)
Here we call 4 `ResourceLoaders` to get the template.
    com.atlassian.confluence.setup.velocity.HibernateResourceLoader
    org.apache.velocity.runtime.resource.loader.FileResourceLoader
    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
    com.atlassian.confluence.setup.velocity.DynamicPluginResourceLoader
Here mainly look at the `FileResourceLoader` and `ClasspathResourceLoader`
that comes with Velocity.