Lemma 6.3. Suppose ΠOPE is IND-OCPA secure. Then, for any M(cid:48) ≤ M where Pr[d12 ≤ M(cid:48)] =
1 − negl(λ), it follows that M(cid:48) = 2ω(log λ) (that is, M(cid:48) is superpolynomial in λ).
Proof. We proceed via contradiction. Suppose that ΠOPE is IND-OCPA-secure and that M(cid:48) =
poly(λ). Then, there must exist some x ∈ [M(cid:48)] such that Pr[d12 = x] ≥ 1/M(cid:48) − negl(λ), which is
non-negligible. Let x ∈ [M(cid:48)] be the smallest such x such that Pr[d12 = x] is non-negligible. Next,
using the fact that d13 = d12 + d23, we have
Pr[d13 = x] = Pr[d12 = x] · Pr[d23 = 0 | d12 = x] +
(Pr[d12 = z] · Pr[d23 = x − z | d12 = z])
= negl(λ) + negl(λ),
z M(cid:48)/2] =
negl(λ).
Proof. Suppose by contradiction that Pr[d12 > M(cid:48)/2] = ε1 for some non-negligible ε1. By the law
of total probability,
Pr[d23 ≤ M(cid:48)/2] = Pr[d23 ≤ M(cid:48)/2 | d12 ≤ M(cid:48)/2] · Pr[d12 ≤ M(cid:48)/2]
+ Pr[d23 ≤ M(cid:48)/2 | d12 > M(cid:48)/2] · Pr[d12 > M(cid:48)/2]
(cid:122)
(cid:125)(cid:124)
at least 0
(cid:123)
=
(1 − ε1) Pr[d23 ≤ M(cid:48)/2 | d12 ≤ M(cid:48)/2] +ε1 Pr[d23 ≤ M(cid:48)/2 | d12 > M(cid:48)/2]
(6.1)
By assumption Pr[d12 > M(cid:48)] = negl(λ), and since D13
c≈ D12, it follows that Pr[d13 > M(cid:48)] = negl(λ).
Since d13 > M(cid:48) with negligible probability, and d12 > M(cid:48)/2 with non-negligible probability ε1, and
d13 = d12 + d23, it must be the case that Pr[d23 ≤ M(cid:48)/2 | d12 > M(cid:48)/2] = 1 − negl(λ). We conclude
from Eq. (6.1) that
Pr[d23 ≤ M(cid:48)/2] ≥ ε1 Pr[d23 ≤ M(cid:48)/2 | d12 > M(cid:48)/2]
= ε1 − negl(λ).
Next, we use the fact that d13 ≤ M(cid:48)/2 only if d12 ≤ M(cid:48)/2 and d23 ≤ M(cid:48)/2. Let ε2 = Pr[d13 ≤ M(cid:48)/2].
Then,
ε2 ≤ Pr[d12 ≤ M(cid:48)/2] · Pr[d23 ≤ M(cid:48)/2 | d12 ≤ M(cid:48)/2]
= (1 − ε1) · Pr[d23 ≤ M(cid:48)/2 | d12 ≤ M(cid:48)/2].
(6.2)
Substituting Eq. (6.2) into Eq. (6.1), we have that
Pr[d23 ≤ M(cid:48)/2] =
(1 − ε1) Pr[d23 ≤ M(cid:48)/2 | d12 ≤ M(cid:48)/2] +
ε1 Pr[d23 ≤ M(cid:48)/2 | d12 > M(cid:48)/2]
(cid:123)
(cid:122)
equal to ε1−negl(λ)
(cid:125)(cid:124)
(cid:123)
(cid:122)
(cid:125)(cid:124)
at least ε2
≥ ε1 + ε2 − negl(λ).
21
c≈ D23, we conclude that Pr[d13 ≤ M(cid:48)/2] ≥ ε1 + ε2 − negl(λ). By
Again using the fact that D13
deﬁnition, ε2 = Pr[d13 ≤ M(cid:48)/2], so we obtain the relation ε2 ≥ ε1 + ε2 − negl(λ). By assumption,
ε1 is non-negligible, so this is impossible. The claim follows.
The theorem now follows by a straightforward invocation of Lemma 6.3 and 6.4. Let ΠOPE be
an IND-OCPA secure OPE scheme with ciphertext space [M ] where M = 2λc for some c ∈ N.
In other words, log M = λc = poly(λ). Deﬁne M0 = M and for i ∈ [λc], set Mi = M/2i. By
assumption, Pr[d12 ≤ M ] = 1, so invoking Lemma 6.4, Pr[d12 > M/2] = negl(λ). This means that
Pr[d12 ≤ M1] = 1 − negl(λ). We can now inductively apply Lemma 6.4 (a polynomial number
of times) to conclude that Pr[d12 ≤ Mλc] = 1 − negl(λ). However, if ΠOPE is IND-OCPA secure,
then invoking Lemma 6.3, we require that Mλc = 2ω(log λ). But Mλc = M/2λc = O(1), so this is
impossible. The claim follows.
Upper bound for OPE schemes. We now give an explicit construction of a stateless OPE
scheme for a 3-message plaintext space that achieves best-possible security and whose ciphertext
space has size 22ω(log λ). This matches the lower bound from Theorem 6.2.
Take any function f (·) where f (λ) = ω(log λ), and set M = 22f (λ)+1. The ciphertext space in
our scheme will be [M ]. Let ΠOPE = (OPE.Setup, OPE.Encrypt) be an OPE scheme with plaintext
space {1, 2, 3}, where the algorithms are given as follows:
• OPE.Setup(1λ): On input the security parameter λ, the setup algorithm chooses a value
r←− [M ], and δ ← [2f (λ)]. It outputs the secret key sk = (z, δ).
z
• OPE.Encrypt(sk, x): On input a secret key sk = (z, ∆) and a message x ∈ {1, 2, 3}, the
encryption algorithm writes x as x = 2 + i for some i ∈ {−1, 0, 1}, and computes y = z + i · 2δ.
The algorithm outputs y if y ∈ [M ], and ⊥ otherwise.
Correctness. Since the oﬀset 2δ is always positive, it suﬃces to argue that OPE.Encrypt(sk, x)
does not output ⊥ with overwhelming probability. By construction, 2δ ≤ 22f (λ). Therefore, the
quantity z − 2δ is less than 1 only in cases where z ≤ 22f (λ). But this happens with probability
22f (λ)/22f (λ)+1 = 1/22f (λ) = negl(λ). Similarly, z + 2δ is greater than 22f (λ)+1 only in cases where
z ≥ 22f (λ)+1 − 22f (λ), which again happens with probability 1/22f (λ) = negl(λ). Thus, correctness
holds with overwhelming probability.
Security. For i ∈ {1, 2, 3}, deﬁne the random variable yi = OPE.Encrypt(sk, i), and let Di be the
distribution of yi taken over the randomness used to sample sk. For 1 ≤ i < j ≤ 3, let Dij be the
distribution of yj − yi. First, we argue that for all i ∈ {1, 2, 3}, Di
s≈ Unif([M ]). By construction,
s≈ Unif([M ]), we examine the quantity Pr[y1 = t] for t ∈ [M ]. Since δ
D2 ≡ Unif([M ]). To show D1
is uniform over 2f (λ), we have that
Pr[y1 = t] =
=
1
2f (λ)
1
2f (λ)
Pr[y1 = t | δ = δ(cid:48)]
Pr[z = t + 2δ(cid:48)
].
(cid:88)
(cid:88)
δ(cid:48)∈[2f (λ)]
δ(cid:48)∈[2f (λ)]
22
If t + 2δ(cid:48) ≤ M , then by the fact that z is uniform over [M ], Pr[z = t + 2δ(cid:48)
] = 1/M . Thus, for all
t ≤ M − 22f (λ), Pr[y1 = t] = 1/M . More generally, we have for all t ∈ [M ], Pr[y1 = t] ≤ 1/M . The
statistical distance between D1 and Unif([M ]) can then be bounded as follows:
(cid:12)(cid:12)(cid:12)(cid:12)Pr[y1 = t] − 1
M
(cid:12)(cid:12)(cid:12)(cid:12) =
(cid:88)
t∈[M ]
(cid:88)
(cid:12)(cid:12)(cid:12)(cid:12)Pr[y1 = t] − 1
M
(cid:12)(cid:12)(cid:12)(cid:12)
M−22f (λ) <t≤M
22f (λ)
M
≤ 22f (λ)
M
+
= negl(λ),
(cid:110)
21, 22, . . . , 22f (λ)(cid:111)
where we used the triangle inequality in the second line. A similar argument shows that D3
Unif([M ]).
To conclude the proof, we argue that for 1 ≤ i < j ≤ 3, Dij
s≈ Unif(Sλ), where Sλ =
. By construction, D12 ≡ Unif(Sλ) ≡ D23, so it suﬃces to consider D13. By
λ|, the
(cid:110)
22, 23, . . . , 22f (λ)+1(cid:111)
. Since |Sλ| = 2f (λ) = |S(cid:48)
construction, D13 ≡ Unif(S(cid:48)
statistical distance between Unif(Sλ) and Unif(S(cid:48)
λ) where S(cid:48)
λ =
λ) is 2/2f (λ) = negl(λ).
s≈
7 Experimental Evaluation
To assess the practicality of our order-revealing encryption scheme from Section 4, we give a
full implementation of our scheme and measure its performance on a wide range of parameter
settings. We then compare the performance against the Boldyreva et al. [BCLO09] OPE scheme
and the Chenette et al. [CLWW16] ORE scheme. In our implementation, we use the technique from
Remark 3.1 to shrink the ciphertexts.
Instantiating primitives. Our implementation is entirely written in C. We operate at 128-bits
of security (λ = 128). We instantiate the PRF with AES-128. To construct a PRP on 2d-bit
domains (for d < 128), we use a 3-round Feistel network using a PRF on d-bit inputs [LR88].8 In
our experiments, we only consider d < 128, and thus, can instantiate the PRF using AES (where the
d-bit input is padded to 128-bits). For the random oracle, we consider two candidate constructions.
In the ﬁrst, we use SHA-256, a standard cryptographic hash function commonly modeled as a
random oracle.
For our second instantiation of the random oracle, we use an AES-based construction. This allows
us to leverage the AES-NI instruction set for hardware-accelerated evaluation of AES. Recall from
Section 4 that our construction requires a random oracle mapping from a domain {0, 1}2λ = {0, 1}256
to Z2 (after applying the modiﬁcation from Remark 3.1). On an input (k, x) ∈ {0, 1}128 × {0, 1}128,
we take the output of the random oracle to be the least signiﬁcant bit of AES(k, x). Certainly, if we
model AES as an ideal cipher, then this construction implements a random oracle. We note that
modeling AES as an idealized object such as a random permutation or an ideal cipher has been
used in many other recent works such as constructing eﬃcient garbling schemes [BHKR13] or the
Simpira family of permutations [GM16].
8The security of a Feistel-based PRP is (roughly) proportional to the block size. When the block size d is small, the
Feistel construction does not provide the desired level of security. We refer to [BKR18] for an updated instantiation
of our ORE scheme with a secure implementation of the small-domain random permutation based on the Knuth
shuﬄe [Knu98].
23
In our implementation, we use the OpenSSL [The03] implementations of AES and SHA-256
as well as the GMP [Gt12] library for big integer arithmetic. Our full implementation contains
approximately 750 lines of code. For our implementation of Boldyreva et al.’s OPE scheme, we use
the C++ implementation from CryptDB [PRZB11],9 and for our implementation of Chenette et al.’s
ORE scheme, we use the C implementation FastORE.10 In our benchmarks, we substitute AES
for HMAC as the underlying PRF used in the FastORE library. We believe this provides a more
balanced comparison of the performance tradeoﬀs between the Chenette et al. scheme and our new
ORE scheme.
Benchmarks and evaluation. We run all of our experiments on a laptop running Ubuntu 14.04
with a 2.3 GHz Intel Core i7 CPU (Haswell microarchitecture) and 16 GB of RAM. Although our
encryption algorithm is easily parallelizable, we do not leverage parallelism in our benchmarks.
The processor supports the AES-NI instruction set, hence our decision to base as many primitives
as possible on AES. Our micro-benchmarks for encrypting and comparing 32-bit integers are
summarized in Table 1. In Figure 1, we compare the cost of encryption for the diﬀerent schemes
across diﬀerent-sized message spaces.
From Table 1, the time needed to compare two ORE ciphertexts is similar to the time needed
to compare two integers (in the OPE setting). Thus, while it is the case that deploying ORE in
encrypted database systems would require implementing a custom comparator in the database
management system, in practice, this incurs a very small computational overhead.
Compared to OPE, our new ORE scheme is signiﬁcantly faster. For instance, when processing
byte-size blocks, encrypting a single 32-bit value requires just over 50 µs of computation and is over
65 times faster compared to vanilla OPE. Even our SHA-256-based implementation is about 10x
faster compared to OPE. Moreover, as shown in [CLWW16, Remark 2.6 and §4], an ORE scheme
which leaks the ﬁrst bit that diﬀers between two encrypted messages is provably more secure than
any OPE scheme which behaves like a truly random order-preserving function. Since our new ORE
scheme leaks strictly less information than the Chenette et al. scheme, we conclude that our new
ORE scheme is both more secure and faster compared to OPE schemes. Of course, when compared
to the bit-by-bit construction of [CLWW16], our new ORE scheme is much slower. However, in
exchange, our new ORE scheme confers stronger security as well as lends itself nicely towards a
range query system that provides robustness against inference attacks.
One of the main limitations of our new ORE scheme is the increase in the ciphertext size. Both
OPE and the Chenette et al. ORE schemes are able to achieve ciphertexts where the overhead is an
additive or (small) multiplicative factor in the length of the messages. In our setting, because our
main construction relies critically on a small-domain ORE scheme that oﬀers best-possible security,
and the existing small-domain ORE scheme have ciphertexts that grow linearly in the size of the
message space, the size of the ciphertexts in our composed scheme grows quickly in the block size.
Nonetheless, when encrypting byte-by-byte, encrypting a 32-bit integer requires just 224 bytes,
which is quite modest for many practical applications. An interesting direction for future work is
to construct a more compact small-domain ORE with best-possible security. Such a construction
can be extended to a large-domain ORE with shorter ciphertexts by applying our techniques from
Section 4.
9https://github.com/CryptDB/cryptdb
10https://github.com/kevinlewi/fastore
24
Scheme
Boldyreva et al. OPE [BCLO09]
Chenette et al. ORE [CLWW16]
Our ORE scheme (RO: SHA-256)
Our ORE scheme (RO: AES)
Encrypt Compare
|ct| Leakage
3601.82 µs
0.36 µs
8 bytes
(Hard to quantify)
2.06 µs
0.48 µs
8 bytes First bit that diﬀers
54.48 µs
361.04 µs