will scale it up so that it has enough bit resolution.
The AGC has no memory across packets and makes
a fresh gain decision for each packet. This unfortu-
nately creates problems for distributed MIMO, which
requires a predictable relationship between channel mea-
surements across time.
Recall that distributed MIMO works by having each
slave node maintain an estimate of its channel from the
lead AP. Every time the slave hears from the lead, it
recomputes this channel estimate. It assumes that any
change in the phase of the channel estimate is due to os-
cillator drift between master and slave, and hence com-
pensates for the change in channel phase. This process
can interact adversely with the AGC function. Speciﬁ-
cally, since the AGC has no memory between packets,
it makes an independent scaling decision every time it
hears a new signal from the lead. While, in principle, the
decision should be similar since the signal is coming from
the same source, in practice, due to noise in the medium,
there is a level of uncertainty in the AGC decision. Dif-
ferent AGC decisions can introduce diﬀerent scaling of
the estimated channel, which the slave would incorrectly
attribute to oscillator drift, leading to synchronization
errors. Note that AGC scaling involves both magnitude
and phase as diﬀerent gains involve activating diﬀerent
elements of the analog chain. In fact, even a small vari-
ation of one step in the AGC can introduce very large
variations in phase. For instance, in our step, changing
the AGC gain by just 1 dB (for instance, from 34 to 35
dB) can introduce a phase change of π radians (since
417
this activates a diﬀerent analog element - this is an in-
verting ampliﬁer in our RF front-end). Not accounting
for this would completely destroy the synchronization of
the slave with the lead AP.
MegaMIMO 2.0 addresses this problem by inferring
the phase introduced by each gain setting, and correct-
ing for it on a per-packet basis so that it does not
impact the synchronization of distributed MIMO. Es-
timating the phase introduced by the AGC, however, is
not straightforward. The problem is that the hardware
knows the AGC setting; however, it does not know the
phase introduced by each speciﬁc setting. So, the device
needs to calibrate the phase introduced by each gain
value. Note that these phases are not the same across
all radios from the same manufacturer; in fact, every in-
dividual device needs to do this calibration on its own
to account for hardware variations.
MegaMIMO 2.0 performs this calibration as follows.
For each antenna, the device transmits and receives on
the same antenna measuring the loopback channel. It
does this by operating the AGC in a mode where the
AGC gain is set manually, and then stepping through
the entire range of gains supported by the RF chain.
For each gain setting, it measures the received chan-
nel. Of course, this received channel contains phase con-
tributions from both the actual channel as well as the
gain setting. However, note that as described earlier,
MIMO only needs channel measurements relative to a
reference. The same principle applies here, and hence
MegaMIMO 2.0 simply computes the change in phase
of the measured channel relative to the channel at a
reference gain setting.
Note that simply doing this process naively by trans-
mitting the same signal and simply changing the re-
ceived gain setting will not work correctly. This is be-
cause the loopback channel is typically quite strong,
and hence setting a high gain setting will cause the
receiver to saturate and therefore report an incorrect
channel. Hence, MegaMIMO 2.0 performs the process
in two steps: It ﬁrst estimates the ideal gain setting for
the loopback channel by running the AGC in its regu-
lar mode where it is free to adapt the gain to the op-
timal setting. The hardware reports this gain setting
to the calibration software. As the calibration software
increases the receiver gain above this optimal AGC set-
ting, it simultaneously digitally scales down the trans-
mitted power by a corresponding amount. Speciﬁcally,
for an increase in X dB in the receive gain setting, the
calibration software applies a digital scaling factor of -X
dB to the transmitted signal. This ensures that the sig-
nal swing at the ADC stays in the optimal range even
as the gain setting is increased to larger values.
We calibrate all our boards using the technique de-
scribed above. Fig. 3 plots a histogram of the relative
phase between the diﬀerent gains computed on diﬀer-
ent boards and across diﬀerent subcarriers. The ﬁgure
shows that it is essential to calibrate and account for the
phase changes introduced by gains. In fact, some gain
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
-4
-3
-2
-1
 0
 1
 2
 3
 4
 5
 6
 7
Magnitude error (dB)
Figure 4: CDF of the diﬀerence between nominal
and actual AGC gains. The ﬁgure shows that there
are signiﬁcant diﬀerences between nominal and actual
gains, sometimes as large as 6-7 dB.
settings introduce a phase change as large as π radians.
Not correcting for this phase change would completely
destroy phase synchronization and beamforming in dis-
tributed MIMO. The same is true even of the smaller
changes. There are diﬀerences on the order of 0.2-0.3
radians, which if not corrected for, would cap the maxi-
mum achievable SNR at any client at around 12-14 dB.
It is worth noting that the phase correction for AGC
should be applied to all transmissions from the lead AP:
the reference channel, the synchronization header trans-
missions for joint transmissions, as well as the synchro-
nization trailer for client channel estimation transmis-
sions described in §4.3.
5.2 Coordinating AGC across space
channel
As described in §4.3,
estimation in
MegaMIMO 2.0 is performed independently by the dif-
ferent APs from a client’s transmission. Since each AP
applies gain control independently to its reception, the
client’s signal and hence the estimated channel from
the client is scaled diﬀerently at diﬀerent nodes. If
these channels were simply communicated to the mas-
ter without accounting for the AGC at each slave, they
would each have an unknown scale component, and
hence could not be used for joint precoding. Hence, each
MegaMIMO 2.0 slave needs to compensate for the mag-
nitude (and phase) change introduced by its AGC before
communicating its estimated channels to the master.
Of course, the most straightforward way to do this
would be for the receiver hardware to simply undo the
eﬀect of gain control. Speciﬁcally, if the receiver AGC
applies a gain setting of X dB, it could simply scale
down the measured channel magnitude by a correspond-
ing amount. Since P ower(dB) = 20 log10(M agnitude),
we can compute the channel magnitude corresponding
20 . However, this does not
to an AGC gain of XdB as 10
work for two reasons. First, due to hardware variations,
a gain setting of X dB does not actually provide an exact
gain corresponding to that amount but has some errors
around that number. Second, even if the gain is accu-
X
418
rate, it represents an average gain across all subcarriers.
The actual gain in each subcarrier is diﬀerent due to the
presence of various receive ﬁlters.
MegaMIMO 2.0 addresses this issue by extending
the calibration process described in the previous sec-
tion. Speciﬁcally, in addition to the change in phase in-
troduced by each gain, MegaMIMO 2.0 also computes
the ratio of the channel magnitude in each subcarrier
relative to the reference channel, during the calibration
step. It then corrects each reported channel by the mag-
nitude scaling factor in each subcarrier before using the
channel for further beamforming computations.
the calibration factor
The result of this calibration process can be used
to see the eﬀects of the deviation due to hard-
ware variations and across subcarriers described above.
Speciﬁcally, we convert
for
each gain computed as described above to the ac-
tual power gain, ˆXdB (this is simply computed as
20 log10(Calibration F actor). We then compute its dif-
ference from the nominal AGC gain, XdB expected for
that AGC setting. We repeat this process for all gain
settings and all subcarriers across all the boards in our
system. Fig. 4 plots the CDF of all these values. As can
be seen, the variations are signiﬁcant, with the 90th per-
centile going to 1 dB, and the maximums as large as 6
dB. To understand the impact of this error, consider
a simple case where the diﬀerence between the nomi-
nal and actual AGC gain is 3 dB. Such an error can
lead to an incorrect estimate of the channel magnitude
by a factor of 1.4. Using a channel with this incorrect
magnitude to null another signal of comparable power
would lead to a residual noise of 0.4 times the magni-
tude of the channel, thereby capping the SNR of the sys-
tem to 20 log 10(1/0.4) = 8dB independent of the actual
SNR. This shows that calibrating AGC gain magnitude
is fundamental to the correct functioning of distributed
MIMO.
5.3 Coordinating transmit power
In distributed MIMO, each transmitter creates its
transmitted signal by multiplying the user data with a
precoding matrix. This precoding matrix ensures that
the joint transmission satisﬁes the desired beamforming
and nulling constraints. In principle, there are two ways
to perform this multiplication. The ﬁrst way is to per-
form the multiplication completely in the digital domain
after which the signal is passed to the DAC and then to
the power ampliﬁer (PA). The problem with this ap-
proach is that if the multiplier signiﬁcantly reduces the
value of the signal such that it uses only a few bits of
the DAC, the ﬁnal signal will have very low resolution.
Thus, a better approach is to split the multiplication
between the analog and the digital domain. Speciﬁcally,
the multiplication is split into two factors: the ﬁrst is
applied in the digital domain and ensures that the sig-
nal after multiplication still spans the range of the DAC,
the second factor is then applied in the analog domain
by controlling the attenuation of the PA. This ensures
that the ﬁnal signal has high resolution and therefore
improves the overall SNR of the system.
Of course, changing the attenuation of the PA can
cause phase oﬀsets which one needs to precompensate
for in the digital domain. This eﬀect is similar to the
AGC eﬀect mentioned earlier and is calibrated using a
similar technique.
6. Architecture
In the previous sections, we have described algorith-
mic modiﬁcations to the PHY layer in order to support
eﬃcient channel estimation and coordinated distributed
power control. In this section, we describe how to modify
the interface between the PHY and the MAC to support
distributed MIMO, and the design of the time critical
lower layer MAC subsystem to control the PHY.
A full-ﬂedged distributed MIMO MAC has various
functions, including updating channels from clients, de-
termining which APs should jointly transmit to which
clients at any time, computing the associated precoding
matrices, and so on. Many of these functions occur at
long timescales, corresponding to multiple packets, and
we do not address these MAC functions in this paper.
This paper focuses on the PHY and the real-time con-
trols needed for the PHY.
The PHY interface to the MAC has two components:
control of the PHY transmit subsystem by the MAC,
and reporting from the PHY receiver subsystem to the
MAC. The interface enables the PHY to be stateless
across packets while still supporting distributed MIMO
functionality. We ﬁrst describe the enhancements to the
interface, and then describe the enhancements to the
time critical MAC subsystem to utilize these enhance-
ments.
6.1 Transmitter PHY-MAC Interface
In the 802.11 standard, the interface between PHY
and MAC for a packet transmission is called TXVEC-
TOR. It provides the ability for the MAC to specify
for each packet the associated payload, payload length,
precoding matrix (if applicable), modulation and cod-
ing scheme (rate) to be used for the packet, and similar
metadata. For distributed MIMO, the PHY needs to
provide additional support for timing, phase, and fre-
quency synchronization.
In particular, it supports the following additional
functionalities:
In addition to regular
Timing Synchronization:
CSMA/CA transmission, the PHY provides the ability
to transmit packets at speciﬁc time stamps deﬁned rel-
ative to a system timer. This feature is to be used in
triggered transmissions which is described later in this
section.
Initial Phase Correction: For successful joint trans-
mission, all slave APs are required to correct for any
phase oﬀset relative to the master AP at the instance of
transmission. In order to do so the PHY transmit inter-
419
face provides an initial phase correction capability. This
feature enables the MAC to deﬁne a slope and intercept
to be applied on the OFDM subcarriers for the given
packet. Using this initial phase correction all APs can
be conﬁgured to start the joint transmission with no rel-
ative phase oﬀset. However, due to the frequency oﬀset
between the APs the relative phase will keep changing
during the packet.
Frequency Oﬀset Correction: This feature provides
the slave APs with the ability to correct for the rela-
tive frequency oﬀset to the master AP during the given
packet. It enables the MAC to deﬁne two diﬀerent rates
to correct for CFO and SFO. The ﬁrst rate is the CFO
correction and is provided as a phase change per sam-
ple, while the second rate is the SFO correction and is
provided as a change in the phase slope (over the sub-
carriers) per symbol.
6.2 Receiver PHY-MAC interface
Similar to the TXVECTOR, the 802.11 standard de-
ﬁnes the RXVECTOR to provide the interface between
the PHY and MAC for a packet reception. For dis-
tributed MIMO, the PHY needs to provide additional
support for MAC in order to adapt the transmitter
metadata for future transmissions.
Speciﬁcally, for each packet, the receiver reports the
following:
Frequency Oﬀset Estimation: The receiver com-
putes an estimate of the frequency oﬀset with the trans-
mitter for each packet and reports it along with the re-
ceived data and other metadata to the MAC. The MAC
maintains this information for every master transmit-
ter, to be used in frequency corrections for future joint
transmissions.
Channel: The receiver also reports the measured chan-
nels in each subcarrier to the MAC. Depending on the
type of packet and its source, the MAC deals with the
channels diﬀerently: either as a reference channel from
the master, or as a channel corresponding to a synchro-
nization header to be used for phase synchronization
for joint transmission, or a channel measurement from
a client that can be utilized for later beamforming.
6.3 Real-time MAC interface to the PHY
In this section, we describe the real-time components
of the MAC that need to be implemented in hardware
to ensure timing, phase, and frequency synchronization.
Fig. 5 shows a schematic of the timing, frequency and
phase synchronization subsystem.
Timing Synchronization Subsystem: In order to
support timing synchronization, the real-time MAC
component has the abstraction of triggered transmis-
sions. A triggered transmission has two elements: a trig-
gering condition, and an elapsed time after the trigger-
ing condition at which a packet is transmitted. A trig-
gering condition comprises of either a transmission or
reception of a packet with the MAC address of the mas-
420
Yes
Master?
No