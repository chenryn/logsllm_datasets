the source encoding is that of the current locale.
.ip
if the input name contains non-ascii characters, then the idn encoding
is used.
those parts of the node name (delimited by dots) that contain
non-ascii characters are encoded using ascii compatible encoding (ace)
before being passed to the name resolution functions.
.\" implementation detail:
.\" to minimize effects on system performance the implementation might
.\" want to check whether the input string contains any non-ascii
.\" characters.  if there are none the idn step can be skipped completely.
.\" on systems which allow not-ascii safe encodings for a locale this
.\" might be a problem.
.tp
.b ai_canonidn
after a successful name lookup, and if the
.b ai_canonname
flag was specified,
.br getaddrinfo ()
will return the canonical name of the
node corresponding to the
.i addrinfo
structure value passed back.
the return value is an exact copy of the value returned by the name
resolution function.
.ip
if the name is encoded using ace, then it will contain the
.i xn\-\-
prefix for one or more components of the name.
to convert these components into a readable form the
.b ai_canonidn
flag can be passed in addition to
.br ai_canonname .
the resulting string is encoded using the current locale's encoding.
.\"
.\"implementation detail:
.\"if no component of the returned name starts with xn\-\- the idn
.\"step can be skipped, therefore avoiding unnecessary slowdowns.
.tp
.br ai_idn_allow_unassigned ", " ai_idn_use_std3_ascii_rules
setting these flags will enable the
idna_allow_unassigned (allow unassigned unicode code points) and
idna_use_std3_ascii_rules (check output to make sure it is a std3
conforming hostname)
flags respectively to be used in the idna handling.
.sh return value
.\" fixme glibc defines the following additional errors, some which
.\" can probably be returned by getaddrinfo(); they need to
.\" be documented.
.\"    #ifdef __use_gnu
.\"    #define eai_inprogress  -100  /* processing request in progress.  */
.\"    #define eai_canceled    -101  /* request canceled.  */
.\"    #define eai_notcanceled -102  /* request not canceled.  */
.\"    #define eai_alldone     -103  /* all requests done.  */
.\"    #define eai_intr        -104  /* interrupted by a signal.  */
.\"    #define eai_idn_encode  -105  /* idn encoding failed.  */
.\"    #endif
.br getaddrinfo ()
returns 0 if it succeeds, or one of the following nonzero error codes:
.tp
.b eai_addrfamily
.\" not in susv3
the specified network host does not have any network addresses in the
requested address family.
.tp
.b eai_again
the name server returned a temporary failure indication.
try again later.
.tp
.b eai_badflags
.i hints.ai_flags
contains invalid flags; or,
.i hints.ai_flags
included
.b ai_canonname
and
.i name
was null.
.tp
.b eai_fail
the name server returned a permanent failure indication.
.tp
.b eai_family
the requested address family is not supported.
.tp
.b eai_memory
out of memory.
.tp
.b eai_nodata
.\" not in susv3
the specified network host exists, but does not have any
network addresses defined.
.tp
.b eai_noname
the
.i node
or
.i service
is not known; or both
.i node
and
.i service
are null; or
.b ai_numericserv
was specified in
.i hints.ai_flags
and
.i service
was not a numeric port-number string.
.tp
.b eai_service
the requested service is not available for the requested socket type.
it may be available through another socket type.
for example, this error could occur if
.i service
was "shell" (a service available only on stream sockets), and either
.i hints.ai_protocol
was
.br ipproto_udp ,
or
.i hints.ai_socktype
was
.br sock_dgram ;
or the error could occur if
.i service
was not null, and
.i hints.ai_socktype
was
.br sock_raw
(a socket type that does not support the concept of services).
.tp
.b eai_socktype
the requested socket type is not supported.
this could occur, for example, if
.i hints.ai_socktype
and
.i hints.ai_protocol
are inconsistent (e.g.,
.br sock_dgram
and
.br ipproto_tcp ,
respectively).
.tp
.b eai_system
other system error;
.i errno
is set to indicate the error.
.pp
the
.br gai_strerror ()
function translates these error codes to a human readable string,
suitable for error reporting.
.sh files
.i /etc/gai.conf
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br getaddrinfo ()
t}	thread safety	mt-safe env locale
t{
.br freeaddrinfo (),
.br gai_strerror ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
the
.br getaddrinfo ()
function is documented in rfc\ 2553.
.sh notes
.br getaddrinfo ()
supports the
.ib address % scope-id
notation for specifying the ipv6 scope-id.
.pp
.br ai_addrconfig ,
.br ai_all ,
and
.b ai_v4mapped
are available since glibc 2.3.3.
.b ai_numericserv
is available since glibc 2.3.4.
.pp
according to posix.1, specifying
.\" posix.1-2001, posix.1-2008
.i hints
as null should cause
.i ai_flags
to be assumed as 0.
the gnu c library instead assumes a value of
.br "(ai_v4mapped\ |\ ai_addrconfig)"
for this case,
since this value is considered an improvement on the specification.
.sh examples
.\" getnameinfo.3 refers to this example
.\" socket.2 refers to this example
.\" bind.2 refers to this example
.\" connect.2 refers to this example
.\" recvfrom.2 refers to this example
.\" sendto.2 refers to this example
the following programs demonstrate the use of
.br getaddrinfo (),
.br gai_strerror (),
.br freeaddrinfo (),
and
.br getnameinfo (3).
the programs are an echo server and client for udp datagrams.
.ss server program
\&
.ex
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define buf_size 500
int
main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s;
    struct sockaddr_storage peer_addr;
    socklen_t peer_addr_len;
    ssize_t nread;
    char buf[buf_size];
    if (argc != 2) {
        fprintf(stderr, "usage: %s port\en", argv[0]);
        exit(exit_failure);
    }
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = af_unspec;    /* allow ipv4 or ipv6 */
    hints.ai_socktype = sock_dgram; /* datagram socket */
    hints.ai_flags = ai_passive;    /* for wildcard ip address */
    hints.ai_protocol = 0;          /* any protocol */
    hints.ai_canonname = null;
    hints.ai_addr = null;
    hints.ai_next = null;
    s = getaddrinfo(null, argv[1], &hints, &result);
    if (s != 0) {
        fprintf(stderr, "getaddrinfo: %s\en", gai_strerror(s));
        exit(exit_failure);
    }
    /* getaddrinfo() returns a list of address structures.
       try each address until we successfully bind(2).
       if socket(2) (or bind(2)) fails, we (close the socket
       and) try the next address. */
    for (rp = result; rp != null; rp = rp\->ai_next) {
        sfd = socket(rp\->ai_family, rp\->ai_socktype,
                rp\->ai_protocol);
        if (sfd == \-1)
            continue;
        if (bind(sfd, rp\->ai_addr, rp\->ai_addrlen) == 0)
            break;                  /* success */
        close(sfd);
    }
    freeaddrinfo(result);           /* no longer needed */
    if (rp == null) {               /* no address succeeded */
        fprintf(stderr, "could not bind\en");
        exit(exit_failure);
    }
    /* read datagrams and echo them back to sender. */
    for (;;) {
        peer_addr_len = sizeof(peer_addr);
        nread = recvfrom(sfd, buf, buf_size, 0,
                (struct sockaddr *) &peer_addr, &peer_addr_len);
        if (nread == \-1)
            continue;               /* ignore failed request */
        char host[ni_maxhost], service[ni_maxserv];
        s = getnameinfo((struct sockaddr *) &peer_addr,
                        peer_addr_len, host, ni_maxhost,
                        service, ni_maxserv, ni_numericserv);
        if (s == 0)
            printf("received %zd bytes from %s:%s\en",
                    nread, host, service);
        else
            fprintf(stderr, "getnameinfo: %s\en", gai_strerror(s));
        if (sendto(sfd, buf, nread, 0,
                    (struct sockaddr *) &peer_addr,
                    peer_addr_len) != nread)
            fprintf(stderr, "error sending response\en");
    }
}
.ee
.ss client program
\&
.ex
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define buf_size 500
int
main(int argc, char *argv[])
{
    struct addrinfo hints;
    struct addrinfo *result, *rp;
    int sfd, s;
    size_t len;
    ssize_t nread;
    char buf[buf_size];
    if (argc ai_next) {
        sfd = socket(rp\->ai_family, rp\->ai_socktype,
                     rp\->ai_protocol);
        if (sfd == \-1)
            continue;
        if (connect(sfd, rp\->ai_addr, rp\->ai_addrlen) != \-1)
            break;                  /* success */
        close(sfd);
    }
    freeaddrinfo(result);           /* no longer needed */
    if (rp == null) {               /* no address succeeded */
        fprintf(stderr, "could not connect\en");
        exit(exit_failure);
    }
    /* send remaining command\-line arguments as separate
       datagrams, and read responses from server. */
    for (int j = 3; j  buf_size) {
            fprintf(stderr,
                    "ignoring long message in argument %d\en", j);
            continue;
        }
        if (write(sfd, argv[j], len) != len) {
            fprintf(stderr, "partial/failed write\en");
            exit(exit_failure);
        }
        nread = read(sfd, buf, buf_size);
        if (nread == \-1) {
            perror("read");
            exit(exit_failure);
        }
        printf("received %zd bytes: %s\en", nread, buf);
    }
    exit(exit_success);
}
.ee
.sh see also
.\" .br getipnodebyaddr (3),
.\" .br getipnodebyname (3),
.br getaddrinfo_a (3),
.br gethostbyname (3),
.br getnameinfo (3),
.br inet (3),
.br gai.conf (5),
.br hostname (7),
.br ip (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 19:46:03 1993 by rik faith (PI:EMAIL)
.th drand48 3  2021-03-22 "" "linux programmer's manual"
.sh name
drand48, erand48, lrand48, nrand48, mrand48, jrand48, srand48, seed48,
lcong48 \- generate uniformly distributed pseudo-random numbers
.sh synopsis
.nf
.b #include 
.pp
.b double drand48(void);
.bi "double erand48(unsigned short " xsubi [3]);
.pp
.b long lrand48(void);
.bi "long nrand48(unsigned short " xsubi [3]);
.pp
.b long mrand48(void);
.bi "long jrand48(unsigned short " xsubi [3]);
.pp
.bi "void srand48(long " seedval );
.bi "unsigned short *seed48(unsigned short " seed16v [3]);
.bi "void lcong48(unsigned short " param [7]);
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
all functions shown above:
.\" .br drand48 (),
.\" .br erand48 (),
.\" .br lrand48 (),
.\" .br nrand48 (),
.\" .br mrand48 (),
.\" .br jrand48 (),
.\" .br srand48 (),
.\" .br seed48 (),
.\" .br lcong48 ():
.nf
    _xopen_source
        || /* glibc since 2.19: */ _default_source
        || /* glibc = 0
.ee
.in
.pp