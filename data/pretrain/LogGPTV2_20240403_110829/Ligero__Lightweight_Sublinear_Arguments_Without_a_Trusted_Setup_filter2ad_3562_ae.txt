0(ηj) is at most 2k − 2. Let Q(cid:48) be the
set of indices on which p0 and p(cid:48)
0 agree. Then V rejects in Step
5(b) whenever Q selected in Step 4 contains an index i (cid:60) Q(cid:48) ∪ E,
where E = ∆(U ∗, L
3m). This fails to happen with probability at
(cid:1) ≤ ((e + 2k)/n)t . The lemma now follows by a
most(cid:0)e +2k−2
(cid:1)/(cid:0)n
union bound.
t
t
(cid:3)
4.4 IPCP for Arithmetic Circuits
In this section, we provide our IPCP for arithmetic circuits. Fix
a large (cid:27)nite (cid:27)eld F. Let C : Fni → F be an arithmetic circuit.
Without loss of generality, we will assume that the circuit contains
only ADD and MULTIPLY gates with fan-in two. We show how a
prover can convince a veri(cid:27)er that C(w) = 1.
Protocol IPCP(C, F).
• Input: The prover P and the veri(cid:27)er V share a common in-
put arithmetic circuit C : Fni → F and input statement x. P
additionally has input α = (α1, . . . , αni) such that C(α) = 1.
• Oracle π: Let m, (cid:96) be integers such that m · (cid:96) > ni + s where s is
the number of gates in the circuit. Then P generates an extended
witness w ∈ Fm(cid:96) where the (cid:27)rst ni + s entries of w are
(α1, . . . , αni , β1, . . . , βs)
where βi is the output of the ith gate when evaluating C(α).
P de(cid:27)nes a system of constraints that contains the following
constraint for every multiplication gate ❕ in the circuit C
βa · βb − βc = 0
and for every addition gate, the constraint
βa + βb − βc = 0
where βa and βb are the input values to the gate ❕ and βc is
the output value in the extended witness. For the output gate
we include the constraint βa + βb − 1 = 1 if the (cid:27)nal gate is an
addition gate, and βa · βb − 1 = 0 if it is a multiplication gate. P
constructs vectors x, y and z in Fm(cid:96) where the jth entry of x, y
and z contains the values βa, βb, and βc corresponding to the
jth multiplication gate in w. P and V construct matrices Px , Py
and Pz in Fm(cid:96)×m(cid:96) such that
x = Px w, y = Pyw, z = Pzw.
Finally, it constructs matrix Padd ∈ Fm(cid:96)×m(cid:96) such that the jth
position of Paddw equals βa + βb − βc where βa, βb, and βc corre-
spond to the jth addition gate of the circuit in w. Let U w , U x , U y , U z ∈
Lm respectively encode w, x, y, z where L = RSF,n,k,η. P sets
the oracle π as U ∈ L
4m which is set as the vertical juxtaposition
of the following four matrices U w , U x , U y , U z ∈ Lm.
• Notation: We denote by (−1)m(cid:96) (respectively, 0m(cid:96)) the vector
in Fm(cid:96) whose entries are all equal to −1 (respectively, equal to
0). We further denote by In, the n × n identity matrix.
V and P run the following tests.
(1) // Test if U is e-close to a code in L
• The interactive protocol:
4m
Test-Interleaved(F, L, 4m, t; U)
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2095(2) // Test if addition gates are correct.
Test-Linear-Constraints-IRS
(F, L, m, t, ζ , Padd, 0m(cid:96); U w)
(3) // Test if multiplication gates are correct.
– Test-Linear-Constraints-IRS
(cid:18)
(cid:18)
(cid:18)
F, L, 2m, t, ζ ,(cid:2)Im(cid:96)| − Px
F, L, 2m, t, ζ ,(cid:2)Im(cid:96)| − Py
F, L, 2m, t, ζ ,(cid:2)Im(cid:96)| − Pz
(cid:3) , 02m(cid:96);
(cid:3) , 02m(cid:96);
(cid:3) , 02m(cid:96);
– Test-Linear-Constraints-IRS
– Test-Linear-Constraints-IRS
U w
(cid:20)U x
(cid:20)U y
(cid:20)U a
U w
(cid:21)(cid:19)
(cid:21)(cid:19)
(cid:21)(cid:19)
– Test-Quadratic-Constraints-IRS
U w
(F, L, m, t, ζ ,(−1)m(cid:96), 0m(cid:96); U x , U y , U z)
Since all the tests open the same number of columns t in Uw , Ux , Uy , Uz,
the V will simply open t columns of U . V rejects if it rejects in
any of the tests above.
The completeness of our IPCP follows from the following lemma.
Lemma 4.9. If U w , U x , U y , U z ∈ Lm encode vectors w, x, y, z ∈
Fm(cid:96) satisfying
x = Px w, y = Pyw, z = Pzw, x(cid:12)y+(−1)m(cid:96)(cid:12)z = 0m(cid:96), Paddw = 0m(cid:96)
and P is honest, V always accepts.
The proof follows directly from Lemmas 4.1, 4.5 and 4.7. Next,
soundness is argued by the following lemma.
maliciously formed oracle(cid:98)U and any malicious prover strategy, the
Lemma 4.10. Let e be a positive integer such that e  e: Since e  ni + s. Then protocol IPCP(C, F) satis(cid:27)es the following:
• Completeness: If α is such that C(α) = 1 and oracle π is
generated honestly as described in the protocol, then
Pr[(P(C, w),Vπ(C)) = 1] = 1.
• Soundness: If there is no α is such that C(α) = 1, then for
every (unbounded) prover strategy P∗ and every ˜π ∈ F4mn,
Pr[(P∗,V ˜π(C)) = 1] ≤ (e + 6)/|F| + (1 − e/n)t + 5((e +
2k)/n)t .
• Complexity: The number of (cid:27)eld operations performed is
poly(|C|, n). The number of (cid:27)eld elements communicated by
P to V is n + 4 · (k + (cid:96) − 1) + 2 · k − 1 whereas V reads t
symbols from F4m.
The (cid:27)rst term in the communication cost is the communication
incurred by the test-interleaved protocol, the second term is due to
the four linear-constraints tests and the (cid:27)nal term results from our
quadratic-constraint test.
We remark here that we can improve the communication of the
protocol by letting s only count the number of multiplication gates
by incorporating the linear constraints resulting from the addition
gates into the linear constraints used to de(cid:27)ne the vectors x, y and
z.
4.5 IPCP for Boolean Circuits
In order to obtain the bene(cid:27)ts in soundness from running our IPCP
over a large (cid:27)eld F, we show how we can prove the validity of a
Boolean circuit C : {0, 1}ni → {0, 1} by encoding the witness in
any larger (cid:27)eld F. First, in the witness, the prover will map the
Boolean 0 to the additive identity 0 in F and 1 to the multiplicative
identity 1 in F. Now, we can enforce that each element in the
2 − β = 0.
witness is a 0 or 1, by introducing a quadratic constraint β
Given that binary constraints are already enforced, next, we
proceed to demonstrating how we incorporate the constraints from
XOR and ADD gates.
In fact, we will show all gate constraints can be expressed as
a linear relation on the witness bits. Let x be a column vector
consisting of the witness string to the evaluation of the circuit. We
will construct a matrix A and a column vector w such that if w is
binary and is a valid witness then the elements of Aw will all be
0, and if w is binary and is not a valid witness then at least one
element of Aw will be nonzero. For each XOR and AND gate in
the circuit we will create a row of the matrix corresponding to the
enforcement of that relation in the witness. The vector w besides
including the input bits x, will include one additional bit for each
XOR and AND gate in the circuit. We explain the purpose of these
extra bits next.
Given integers b1 and b2 consider the arithmetic constraint b1 +
b2 = r0 + 2 · r1 over integers. In this constraint, if we enforce that
all values are bits then r0 is the XOR of b1 and b2 and r1 is the AND
of b1 and b2. If in our witness w we want to make sure that b1 XOR
b2 is b3 then we include an auxiliary bit d and enforce the linear
constraint b1 +b2 = b3 +2·d. A similar constraint can be established
for an AND relation analogously. To conclude, we observe that if the
values have been enforced to be a binary constraint then checking
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA209631
i =0
31
i =0
31
i =0
the arithmetic constraints over integers can be done by checking
the equation modulo a su(cid:28)ciently large prime (p ≥ 3).
We can also extend this idea to consider more complex gates
such as addition modulo 232 over 32-bit inputs and outputs. This
can be expressed as a linear constraint over the bits. Suppose a =
(a0, . . . , a31), b = (b0, . . . , b31) and c = (c0, . . . , c31) are the input
and output bits, the constraint a + b = c mod 232 can be expressed
as
2i · ai +
2i · bi = 232 · d +
2i · ci
where d is an auxiliary input bit and all values are enforced to be
bits. However, this will require F with characteristic p > 233.
4.6 Achieving Zero-Knowledge
Note (cid:27)rst that the veri(cid:27)er obtains two types of information in
two di(cid:29)erent building blocks of the IPCP. First, it obtains linear
combinations of codewords in a linear code L. Second, it probes a
small number of symbols from each codeword. Since codewords
are used to encode the NP witness, both types of information give
the veri(cid:27)er partial information about the NP witness, and thus the
basic IPCP we described is not zero-knowledge.
Fortunately, making the IPCP zero-knowledge only requires in-
troducing small modi(cid:27)cations to the construction and analysis. The
second type of “local” information about codewords is made harm-
less by making the encoding randomized, so that probing just a
few symbols in each codeword reveals no information about the
encoded message. The high level idea for making the (cid:27)rst type
of information harmless is to use an additional random codeword
for blinding the linear combination of codewords revealed to the
veri(cid:27)er. However, this needs to be done in a way that does not com-
promise soundness. Below we describe the modi(cid:27)cations required
for each of the IPCP ingredients.
4.6.1 ZK Testing of Interleaved Linear Codes. Recall that in the
veri(cid:27)cation algorithm Test-Interleaved from Section 4.1, V ob-
tains a linear combination of the form w = rT U , where U ∈ Fm×n
is a matrix whose rows should be codewords in L. A natural ap-
proach for making this linear combination hide U is by allowing
the prover to add to the rows of U an additional random codeword
u(cid:48) that is used for blinding.
A simple implementation of this idea that provides a slightly
inferior soundness guarantee is the following. Apply the algorithm
Test-Interleaved to Lm+1, with an extended oracle U (cid:48) whose (cid:27)rst
m rows contain U and whose last row is u(cid:48). Letting w(cid:48) = rT U +r(cid:48)u(cid:48)
be the random linear combination obtained by V, the test fails to be
zero-knowledge when r(cid:48) = 0, which occurs with 1/|F| probability.
Alternatively, settling for a slightly worse soundness guarantee
(where e/|F| is replaced by e/(|F| − 1)), one could just let r(cid:48) be a
random nonzero (cid:27)eld element, and get perfect zero-knowledge.
It turns out, however, that one could (cid:27)x r(cid:48) to 1 and still get the
same soundness guarantee about U as in Lemma 4.2 since we can
apply the same the decomposition argument. This “a(cid:28)ne” variant
of Test-Interleaved is described and analyzed in Appendix C.
4.6.2 ZK Testing of Linear Constraints over Interleaved Reed-
Solomon Codes. The veri(cid:27)cation algorithm for the linear constraints
Ax = b samples a random vector r, obtains rT Ax, and compares
ity
c∈[(cid:96)] q(ζc) =
that
it with rT b. Looking more carefully at our actual protocol, the
veri(cid:27)er obtains a polynomial q(•) and checks whether the equal-
i∈[m],c∈[(cid:96)] ricbic holds. While the sum itself
does not reveal any additional information beyond what is already
known, namely rT b, the individual evaluations of q, i.e. q(ζc) them-
selves may reveal information about the inputs.
To hide this, a simple idea is for P to provide an additional
vector u(cid:48) along with U that encodes a message (γ1, . . . , γ(cid:96)) such
c∈[(cid:96)] γc = 0, and append to A constraints that sum the entries
in the message encoded in u(cid:48) and check if it is equal to 0.
However, as before, this will yield less than optimal soundness
guarantee. Instead we take the following approach that provides
the same soundness guarantee as the original (non-a(cid:28)ne version
of the) test. In We apply the algorithm Test-Linear-Constraints-IRS