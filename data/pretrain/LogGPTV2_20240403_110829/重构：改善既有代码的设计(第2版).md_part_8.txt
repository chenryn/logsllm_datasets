## Page 64
交）。
function renderPlainText...
function renderPlainText...
statementData.performances =
function statement...
Function totalvolumeCredits(data) {
function totalAmount(data) {
result
For
let result :
statementData.totalvolumeCredits = totalvolumeCredits(statementData);
statementData.
statementData.customer 
（231）对几个地方进行重构。
（反正它在作用域内）：
return
return
result +=
retur
.reduce((total, p)=> total + p.amount, );
等到搬移完成，
尽管我可以修改函数体，
(let perf 
。
现在我可以把第一阶段的代码提炼到一个独立的函数里了（编译、测试、提
.reduce((total，p)
最后，我将两个计算总数的函数搬移到statement函数中。
result;
You earned ${data.totalvolumeCredits} credits\n`;
d.p
${perf.play.name}: ${usd(perf.amount)} (${perf.audience} seats)\n`;
`Statement for ${data.customer}\n`;
totalAmount
=> total + p.volumeCredits, 0);
编译、
 invoice.customer;
，但我更喜欢显式地传入函数参数。
: invoice.performances.map(enrichPerformance) ;
测试、提交也做完，我便忍不住以管道取代循环
，让这些计算总数的函数直接使用statementData变量
---
## Page 65
statement.js..
就很简单了
createStatementData.js..
import createStatementData from './createStatementData.js';
statement.js..
了返回结果的变量名，与我一贯的编码风格保持一致）。
顶层作用域...
Function renderHtml (data）{
function createStatementData(invoice, plays） {
function statement
result += "\n";
function enrichPerformance(aPerformance) {...}
const result = {};
let
return result; 
result.customer
return statementData;
statementData.
statementData.totalA
result
statementData.per
statementData.cust
最后再做一次编译、测试、提交，接下来，要编写一个HTML版本的对账单
function
function volumeCreditsFor(aPerformance) {...}
function
function
由于两个阶段已经彻底分离，
result =
.total
IVolumeCredits = totaivolumeCredits(result);
Statement for ${data.customer}\n`;
. totalvolumeCredits = totaivolumeCredits(statementData);
 invoice.customer;
formances=
（invoice，
omer
LAmount
 invoice.customer;
plays）{
ince)
totalAmount(statementData) ;
，我干脆把它搬移到另一个文件里去（并且修改
---
## Page 66
function usd(aNumber） {...}
return result;
esuit
result
esult
for
result
（我把usd函数也搬移到顶层作用域中，以便renderHtml也能访问它。
 += "\n";
perf
ame}${perf.audience}`;
---
## Page 67
createStatementData.js
export default function createStatementData(invoice, plays) {
statement.js
有了两个代码文件。
function usd(aNumber) {
function htmlstatement (invoice, 
function 
import createStatementData from
Function renderHtml (data） {
 return renderHtml(createStatementData(invoice, plays));
 return renderPlainText(createStatementData(invoice, plays));
1.7进展：分离到两个文件（和两个阶段)
result.customer
 return new Intl.NumberFormat("en-Us",
return result;
result.totalAmount = totalAmount(result);
result.performances =
const
return result; 
result
result
result += "\n"; 
result 
let
return
for
let result
result.
resul
result +=
现在正是停下来重新回顾一下代码的好时机，思考一下重构的进展。现在我
(let
result
result
 += "playseatscost";
result;
十二
、u\{(unowe'↓ad)psn}$、=+ 
+
perf
 perf
Amount owed is ${usd(data.totalAmount)}\n^;
Statement for ${data.customer}\n`;
 ${perf.play.name}: ${usd(perf.amount)} (${perf.audience} seats)\n`;
invoice.customer;
(invoice,
 invoice.performances.map(enrichPerformance);
for
plays)
 ${data.customer}\n`;
plays）{
./createStatementData.js';
---
## Page 68
辑。
码的模块化，我可以轻易地添加HTML版本的代码，而无须重复计算部分的逻
它们的协作关系。虽说言以简为贵，但可演化的软件却以明确为贵。通过增强代
离了详单的计算逻辑与样式。
也带来了代码可读性的提高。额外的包装将混杂的逻辑分解成可辨别的部分，分
要是将代码抽取到函数里带来的额外包装成本。
康
function totalAmount(data){
 function amountFor(aPerformance) {
function playFor(aPerformance) {
 function enrichPerformance(aPerformance) {
function totalvolumeCredits(data） {
function volumeCreditsFor(aPerformance) {
return
return result;
result +
return result;
default:
case "tragedy"
switch 
let result
 return plays[aPerformance.playID]
return result;
result.amount 
 const result = object.assign({}, aPerformance);
代码行数由我开始重构时的44行增加到了70行（不算htmlStatement）
let
case
.reduce((total, p) => total + p.volumecredits, );
.reduce((total, p) => total + p.amount, );
break;
break;
throw new Error( unknown type: ${aPerformance.play.type}');
result += 3oo * aPerformance.audience;
result += 100o0 + 500 *
result += 1000 *
"comedy'
result = o;
 编程时，需要遵循营地法则：保证你离开时的代码库一定比来时更健
(aPerformar
"comedy":
 data.perf
(aPerformance.play.type)
Math.max(aPerformance.audience - 30, 0);
40000;
mecredits = volumecreditsFor(result);
== aPerformance.play.type) result += Math.floor(aPerformance.audience / 5);
= amountFor(result);
formances
(aPerformance.audience - 30);
(aPerformance.audience - 20);
 这种模块化使我更容易辨别代码的不同部分，
{
虽然代码的行数增加了，
，但重构
这
主
---
## Page 69
应该时时都勤加拂拭。
则无异：保证离开时的代码库一定比你来时更加健康。完美的境界很难达到，但
择时，似乎多以延缓重构而告终一
有可做的重构与添加新特性之间寻找平衡。
其实打印逻辑还可以进一步简化，
一当然这也是一种选择。我的观点则与营地法
，但当前的代码也够用了。我经常需要在所
在当今业界，
大多数人面临同样的选
---
## Page 70
createStatementData.js..
保证中转数据结构不会被意外修改。
忽略那些格式化代码，只要不改变中转数据结构就行。
要先创建-
在合适的场景下使用面向对象是合理的一
ECMAScript 2015规范有意为类和多态引入了一个相当实用的语法糖。这说明，
语言提供了更基础的编程语言元素来防止代码堆积。
择上起着关键的作用一
它们各自的价格计算和观众量积分计算。对于现在的结构，我只需要在计算函数
export default function createStatementData(invoice, plays) {
景
多途径，
1.8按类型重组计算过程
function enrichPerformance(aPerformance) {
return result;
result.totalvolumeCredits = totaivolumeCredits(result);
result.performances =
以多态取代条件表达式（272）之前，我得先创建一个基本的继承结构。我需
数白
态的amount函数，让语言帮你分发到不同的子类的计算过程中。volumeCredits
const
多不
o
 我先从检查计算代码开始。
return result; 
result.volumecredits = volumecreditsFor(result);
result.amount
result.play = playFor(resuit);
我的设想是先建立一个继承体系，它有“喜剧”（comedy）和“悲
const
态取代条件表达式（272），将多个同样的类型码分支用多态取代。但在施
的处理也是如法炮制。为此我需要用到多种重构方法，其中最核心的一招是
要为程序引入结构、
接下来我将注意力集中到下一个特性改动：支持更多类型的戏剧，
resuit
 不过最自然的解决办法还是使用面向对象世界里的一个经典特性-
result
一个类，并将价格计算函数和观众量积分计算函数放进去。
comer
 = Object.assign({}, aPerformance);
 amountFor(result);
: invoice.customer;.
invoice.per
显式地表达出“计算逻辑的差异是由类型代码确定"有许
一但这样的分支逻辑很容易随代码堆积而腐坏，除非编程
formances.map(enrichPerformance) ;
（之前的重构带来的一
一显然我们这个就是一个合适的使用场
，戏剧类型在计算分支的选
：我可以进一步添加测试来
一大好处是，现在我大可以
以及支持
类
---
## Page 71
function enrichPerformance(aPerformance)
function createStatementData...
函数，
类，通过这个类来调用这些函数。由于这个类存放了与每场演出相关数据的计算
转数据结构。
创建演出计算器
return result;
result.amount
result.play = playFor(resuit)
const
function totalvolumeCredits(data) {
function totalAmount(data){
function volumeCreditsFor(aPerformance） {
function amountFor(aPerformance） {
result.
function playFor(aPerformance) {
_enrichPerformance函数是关键所在，
case "comedy":
switch (aPerformance.play.type） {
let result
return plays[aPerformance.playID]
return
return result; 
result
letresult
return result;
default:
case
f
于是我把它称为演出计算器（performance calculator）。
break;
result += 3oo * aPerformance.audience;
result
break;
result = 40000;
resuit=
"comedy
result += 10000 + 500 *
result += 1000 
.volumeCredits = volumeCreditsFor(result);
目前它直接调用了计算价格和观众量积分的函数，我需要创建一个
30000;
 = amountFor(result);.
Q：
(aPerformance.audience - 20);
因为正是它用每场演出的数据来填充中
---