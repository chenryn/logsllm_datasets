# 浅谈LDAP注入攻击

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。
作者：ca01h@星盟

最近我在HackTheBox平台上进行了一些已经退役的高质量靶机练习（虽然花费不菲:sob:），其中一台名为**CTF**的靶机难度极高，主要考察了较为冷门的知识点——LDAP注入。可能许多读者对这一漏洞并不熟悉，主要原因在于LDAP协议的应用相对较少，在国内的CTF比赛中也鲜有涉及。我查阅了相关资料，发现最近一次在[CSAW CTF Qualification Round 2018](https://ctftime.org/event/633)中出现了这个考点。恰巧上周在星盟内部分享中我也提到了这一点，因此决定撰写这篇关于LDAP注入攻击的文章，希望能为大家提供一些参考。

## 0x01 LDAP介绍

### 什么是LDAP？

在深入探讨靶机之前，我们首先需要了解LDAP的基本概念。根据2018年BlackHat会议上的《LDAP Injection & Blind LDAP Injection》报告，LDAP（Lightweight Directory Access Protocol）是一种轻量级目录访问协议，主要用于在线目录服务中的资源搜索与查询，是X.500标准的一种简化实现。简单来说，LDAP是一种用于访问基于X.500目录服务的客户端-服务器协议，通过TCP/IP传输层运行。其核心特点在于数据存储于目录而非传统数据库中。目录适合存储静态数据，且能容纳多种类型的数据文件，如音频、视频、可执行文件和文本等。此外，目录结构支持递归，优化后更适合读取操作而非频繁写入或修改。

为了更直观地理解LDAP的结构，请参见下图：
```
cn=baby, ou=marketing, ou=people, dc=mydomain, dc=org
```

### LDAP的基本概念

了解了LDAP的功能和外观后，接下来我们将探讨几个关键术语：条目（Entry）、属性（Attribute）以及对象类（ObjectClass）。

- **条目**：作为LDAP中最基本的数据单元，条目类似于字典中的词条或数据库中的记录。所有针对LDAP的操作，如添加、删除、修改和搜索，均以条目为基础单位执行。
- **属性**：每个条目都包含多个属性，例如人的姓名、地址、电话等。这些属性由名称及其对应的值组成，允许单个或多个值存在。LDAP预定义了许多常见属性，如`commonName`和`surname`。
- **对象类**：对象类是由一组特定属性组成的集合。LDAP为常见的人员组织机构定义了多个对象类，比如`person`对象类包括姓氏（sn）、名字（cn）、电话号码（telephoneNumber）和密码（userPassword）。而`organizationalPerson`则是`person`的一个子类，额外包含了职务（title）、邮政编码（postalCode）和通信地址（postalAddress）等属性。通过继承多个对象类，条目可以拥有丰富的属性组合，同时确保必要属性的存在。

### LDAP的基本语法

LDAP查询语句非常简洁易懂，主要包括以下几种逻辑运算符：

- **等于（=）**：如`(givenName=John)`将返回所有`givenName`为"John"的对象。
- **逻辑与（&）**：如`(&(givenName=John)(l=Dallas))`会查找既名为John又居住在Dallas的所有对象。
- **逻辑或（|）**：如`(|(givenName=Jhon)(givenName=Jack))`则匹配名为Jhon或Jack的对象。
- **逻辑非（!）**：如`(!givenName=John)`用于排除所有名为John的对象。
- **通配符（*）**：可用于表示任意值，如`(title=*)`返回所有具有`title`属性的对象；而`(givenName=Jo*)`则匹配以"Jo"开头的名字。

以上就是LDAP数据结构的基础知识。那么实际部署的LDAP系统是什么样子呢？我们可以通过Google Hacking技巧，使用`intitle:"phpLDAPadmin" inurl:cmd.php`来查找公开可用的LDAP服务实例。

## 0x02 LDAP注入攻击面

LDAP注入的原理与SQL注入相似，即利用未充分过滤的用户输入构造恶意查询。以下是几种典型的LDAP注入类型：

- **AND注入**：当应用程序构建了一个由"&"操作符连接的查询时，攻击者可通过注入代码绕过某些条件检查。例如，如果验证用户名/密码的过滤器为`(&(USER=Uname)(PASSWORD=Pwd))`，攻击者可以通过注入合适的参数使密码校验失效。
- **OR注入**：对于使用"|"操作符的查询，同样存在类似的风险。假设查询为`(|(type=Rsc1)(type=Rsc2))`，攻击者可以通过注入适当的参数扩大查询范围。
- **盲注**：即使应用程序没有直接显示错误信息，攻击者仍可根据服务器响应推断出有用的信息。这种技术常被用来逐步揭示敏感数据。

## 0x03 从HTB靶机中学习LDAP注入

### 初始侦察

首先使用Nmap扫描目标IP地址10.10.10.122开放的端口：
```bash
nmap -sC -sV -oN ctf 10.10.10.122
```
结果显示该主机仅开放了SSH (22/tcp) 和HTTP (80/tcp) 服务。进一步查看HTTP服务内容，提示我们需要尝试登录系统，但不能使用SQLMap或Dirbuster暴力破解用户名和密码。

登录页面显示这是一个一次性密码（OTP）系统，每分钟更新一次。查看源码发现两个关键词`schema`和`existing attribute`暗示了可能存在LDAP注入漏洞。结合已知信息推测，我们需要找到一个81位数字组成的token，并使用stoken工具生成相应的OTP。

经过一系列测试，确定了部分特殊字符被过滤的情况。最终确认该应用确实存在LDAP注入漏洞。

### 获取用户权限

...（后续内容待补充）

希望这篇文章能够帮助大家更好地理解和防御LDAP注入攻击。