I wanted to wrap the OpenGL API to create a safer interface. Like many other
APIs the OpenGL API gives away integer tokens representing created objects.
For example, the call glCreateProgram creates a GLuint token representing a
shader program object. These tokens in the OpenGL API (and other similar APIs)
are basically the same idea as pointer types. Because these tokens behave
similarly to pointers I would like to wrap them in a type which has similar
behaviours. For example, the glGetAttribLocation call gets a token
representing an attribute, or buffer to fill with data of a shader program. I
would like to wrap the token returned by glGetAttribLocation in a structure
which has the same lifetime as the program token returned by glCreateProgram,
but to do this I have to use an unneeded amount of pointers (to get proper
lifetime guarantees.) Basically, I would like my wrapped glGetAttribLocation
call to be like:
     impl GLContext {
      fn get_attrib_location  (
         &self,
         program: Program ,
         name: ~str
      ) -> Option > { /* Definition Omitted */ }
Instead of:
     impl GLContext {
      fn get_attrib_location  (
         &self,
         program: &'r Program,
         name: ~str
      ) -> Option > { /* Definition Omitted */ }