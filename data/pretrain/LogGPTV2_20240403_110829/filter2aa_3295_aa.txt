# IT Audit: Security Beyond the Checklist

This document is from the SANS IT Audit site. Reposting is not permitted without express written permission.

**Copyright:** SANS Institute  
**Author Rights:** The author retains full rights.  
**Key Fingerprint:** AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46

For more information, visit the list of upcoming events offering "IT Security Audit and Control Essentials (Audit 410)" at [SANS IT Audit Events](http://it-audit.sans.org/events/).

---

## Abstract

This paper presents an audit of a web application hosted on the Internet, which is built using PHP, MySQL, Apache, and Linuxâ€”a combination commonly known as a LAMP system. The web hosting company manages the application, so the audit's scope is limited to the components accessible to the developer: the PHP source code and any available site configuration options.

### Sections
1. **Research in Audit, Measurement Practice, and Control**
   - System Identification
   - Most Significant Risks to the System
   - Current State of Practice
2. **Audit Checklist**
   - Testing Procedures and Compliance Criteria
3. **Audit Testing, Evidence, and Findings**
   - Detailed Results of the Audit
4. **Audit Report**
   - Executive Summary
   - Audit Findings
   - Audit Recommendations

---

## Table of Contents

1. **Research in Audit, Measurement Practice, and Control**
   1.1. System Identification
   1.2. Most Significant Risks to the System
     1.2.1. Threats to the System
     1.2.2. Information Assets Affected by Audited Device
     1.2.3. Major Vulnerabilities of the Web Application
   1.3. Current State of Practice
     1.3.1. Articles, Papers, and Mailing Lists
     1.3.2. Tools
2. **Audit Checklist**
   2.1. Check for Hidden Comments in HTML
   2.2. Session Hijacking via Cookie Manipulation
   2.3. SQL Injection
   2.4. Test for Adequate Safeguards Against Bandwidth Theft
   2.5. Scan for Sample Files or Scripts
   2.6. Test Backup Procedures
   2.7. Unsafe Hidden Form Elements
   2.8. Ensure Directory Browsing Settings Are Correct
   2.9. Attempt to Brute Force Administrative Account
   2.10. Verify Security of Any Client-Side JavaScript
3. **Audit Testing, Evidence, and Findings**
   3.1. Check for Hidden Comments in HTML
   3.2. Session Hijacking via Cookie Manipulation
   3.3. SQL Injection
   3.4. Test for Adequate Safeguards Against Bandwidth Theft
   3.5. Scan for Sample Files or Scripts
   3.6. Test Backup Procedures
   3.7. Unsafe Hidden Form Elements
   3.8. Ensure Directory Browsing Settings Are Correct
   3.9. Attempt to Brute Force Administrative Account
   3.10. Verify Security of Any Client-Side JavaScript
4. **Audit Report**
   4.1. Executive Summary
   4.2. Audit Findings
   4.3. Audit Recommendations
     4.3.1. Highly Recommended Actions
       4.3.1.1. Protect Against Bandwidth Theft
         4.3.1.1.1. Description
         4.3.1.1.2. Costs
         4.3.1.1.3. Compensating Controls
     4.3.2. Lower Priority Recommendations
       4.3.2.1. SQL Injection
       4.3.2.2. Hidden Form Elements
       4.3.2.3. Future Password Safety
5. **References**

---

## 1. Research in Audit, Measurement Practice, and Control

### 1.1. System Identification

The system to be audited is a database-driven web application, referred to as **AuditApp**, which allows public users to create free accounts, search a review database, submit new votes and reviews, and add new items to the database. It also includes administrative functionality for users with appropriate rights.

- **Technology Stack:** LAMP (Linux, Apache, MySQL, PHP)
- **Specific Versions:**
  - Debian Linux 3.0r2
  - Apache 1.3.29
  - MySQL 4.0.17
  - PHP 4.2.3

The web and database servers are managed by a large web hosting company. The audit scope includes:
- **PHP Code:** The core of the web application.
- **Customer Workflow and Interactions:** Potential vulnerabilities introduced through these interactions.
- **Configuration Options:** Available to the developer but not those set by the web hosting company.

### 1.2. Most Significant Risks to the System

#### 1.2.1. Threats to the System

- **Internal Threats:** Not applicable, as the system is owned and developed by a single individual.
- **External Threats:**
  - **Accidental Programming Error:** Can lead to improper site operation, divulging sensitive information, and loss of public confidence.
  - **Exploit Against Programming Error:** Can result in unauthorized access to user-level accounts, full access to the database, and potential data breaches.
  - **Loss of Data by Web Hosting Company:** Due to attacks or environmental threats, this can lead to catastrophic data loss and the need for complete re-registration.

#### 1.2.2. Information Assets Affected by Audited Device

- **User Data:** E-mail addresses, which could be valuable to spammers.
- **Database Content:** Reviews, votes, and other user-generated content.

#### 1.2.3. Major Vulnerabilities of the Web Application

- **Insecure Coding Practices:** Potential SQL injection, session hijacking, and other common web application vulnerabilities.
- **Lack of Comprehensive Security Review:** The application was made public without a thorough security evaluation.

### 1.3. Current State of Practice

#### 1.3.1. Articles, Papers, and Mailing Lists

- **Resources:** Various articles, papers, and mailing lists provide best practices and insights into web application security.

#### 1.3.2. Tools

- **Security Tools:** Tools such as OWASP ZAP, Burp Suite, and others are used to identify and mitigate security vulnerabilities.

---

This optimized version of the text provides a clearer and more professional structure, making it easier to follow and understand.