# Post-Quantum TLS Without Handshake Signatures

## Authors
- Peter Schwabe, Max Planck Institute for Security and Privacy & Radboud University
- Douglas Stebila, University of Waterloo
- Thom Wiggers, Radboud University

## Abstract
We introduce KEMTLS, an alternative to the TLS 1.3 handshake that uses key-encapsulation mechanisms (KEMs) instead of signatures for server authentication. Among post-quantum cryptographic candidates, signature schemes generally have larger public key and signature sizes compared to KEMs. By using an IND-CCA-secure KEM for server authentication in post-quantum TLS, we achieve multiple benefits. A size-optimized post-quantum instantiation of KEMTLS requires less than half the bandwidth of a size-optimized post-quantum instantiation of TLS 1.3. In a speed-optimized instantiation, KEMTLS reduces the amount of server CPU cycles by almost 90% compared to TLS 1.3, while also reducing communication size, decreasing the time until the client can start sending encrypted application data, and eliminating the need for signature code in the server’s trusted code base.

### CCS Concepts
- **Security and Privacy**: Security protocols, Web protocol security, Public key encryption

### Keywords
- Post-quantum cryptography
- Key-encapsulation mechanisms
- Transport Layer Security
- NIST PQC

### ACM Reference Format
Peter Schwabe, Douglas Stebila, and Thom Wiggers. 2020. Post-Quantum TLS Without Handshake Signatures: Full version, September 29, 2020. In 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS '20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 26 pages. https://doi.org/10.1145/3372297.3423350

## 1. Introduction

The Transport Layer Security (TLS) protocol is one of the most widely used secure-channel protocols. It provides a secure way to transfer web pages, secure communications with mail servers, and set up VPN connections. The most recent iteration, TLS 1.3, was standardized in August 2018. The TLS 1.3 handshake uses ephemeral (elliptic-curve) Diffie–Hellman (DH) key exchange to establish forward-secret session keys. Authentication of both the server and (optionally) the client is provided by either RSA or elliptic-curve signatures. Public keys for these signatures are embedded in certificates and transmitted during the handshake. Figure 1 provides a high-level overview of the TLS 1.3 protocol, focusing on the signed-Diffie–Hellman aspect of the handshake.

### Preparing for Post-Quantum TLS
In the past five years, there has been significant research and experimentation on moving the TLS ecosystem to post-quantum cryptography. Most of this work has focused on adding post-quantum key exchange to TLS, often in the context of hybrid key exchange that combines a post-quantum algorithm with a traditional (usually elliptic curve) algorithm. This began with an experimental demonstration in 2015 of ring-LWE-based key exchange in TLS 1.2 [21].

Public experiments by industry started in 2016 with Google's CECPQ1 experiment, which combined X25519 ECDH [9] with the lattice-based key exchange NewHope [2] in the TLS 1.2 handshake. A follow-up experiment, CECPQ2, was announced in late 2018 and is currently being run by Google using a combination of X25519 and the lattice-based scheme NTRU-HRSS [54, 55], and by Cloudflare using X25519/NTRU-HRSS and X25519 together with the supersingular-isogeny scheme SIKE [61]. First results from this experiment were presented in [74]. In late 2019, Amazon announced that the AWS Key Management Service (AWS KMS) now supports two ECDH-post-quantum hybrid modes, one using SIKE and the other using the code-based scheme BIKE [3]. Our focus is on public-key authenticated TLS, rather than pre-shared key or password-authenticated TLS.

Additionally, the Open Quantum Safe (OQS) initiative [105] provides prototype integrations of post-quantum and hybrid key exchange in TLS 1.2 and TLS 1.3 via modifications to the OpenSSL library [85]. Initial results on the feasibility of migration and performance using OQS were presented in [32], with more detailed benchmarks in [87]. Draft specifications for hybrid key exchange in TLS 1.3 have already started to appear [65, 106, 108].

Most of the above efforts only target what is often called "transitional security": they focus on quantum-resistant confidentiality using post-quantum key exchange but not quantum-resistant authentication. The OQS OpenSSL prototypes do support post-quantum authentication in TLS 1.3, and there has been some research on the efficiency of this approach [100]. While post-quantum algorithms generally have larger public keys, ciphertexts, and signatures compared to pre-quantum elliptic curve schemes, the gap is bigger for post-quantum signatures than for post-quantum KEMs; see, for example, Table 1 or [81].

### Authenticated Key Exchange Without Signatures
There is a long history of protocols for authenticated key exchange without signatures. Key transport uses public key encryption: authentication is demonstrated by successfully decrypting a challenge value. Examples include the SKEME protocol by Krawczyk [66] and RSA key-transport ciphersuites in all versions of SSL and TLS up to TLS version 1.2 (though RSA key transport did not provide forward secrecy). Bellare, Canetti, and Rogaway [5] gave a protocol that obtained authentication from Diffie–Hellman key exchange: DH keys are used as long-term credentials for authentication, and the resulting shared secret is mixed into the session key calculation to derive a key that is implicitly authenticated, meaning that no one but the intended parties could compute it. Some of these protocols go on to obtain explicit authentication via some form of key confirmation. Many DH-based AKE protocols have been developed in the literature, and some are currently used in real-world protocols such as Signal [90], the Noise framework [89], and WireGuard [37].

There are a few constructions that use generic KEMs for AKE, rather than static DH [22, 44]. A slightly modified version of the [44] KEM AKE has recently been used to upgrade the WireGuard handshake to post-quantum security [57]. One might think that the same approach can be used for KEM-based TLS, but there are two major differences between the WireGuard handshake and a TLS handshake. First, the WireGuard handshake is mutually authenticated, while the TLS handshake typically features server-only authentication. Second, and more importantly, the WireGuard handshake assumes that long-term keys are known to the communicating parties in advance, while the distribution of the server’s long-term certified key is part of the handshake in TLS, leading to different constraints on the order of messages and number of round trips.

The OPTLS proposal by Krawczyk and Wee [72] also aims at a signature-free alternative for the common TLS handshake, with authentication via long-term DH keys. OPTLS was at the heart of early drafts of TLS 1.3 but was dropped in favor of signed-Diffie–Hellman. As pointed out in [73], OPTLS makes use of DH as a non-interactive key exchange (NIKE). First, the client sends their ephemeral DH public key, which the server combines with its own long-term secret key to obtain a shared key; the server’s reply thus implicitly authenticates the server to the client. However, the client speaks first, without knowing the server’s public key: a straightforward adaptation of OPTLS to a post-quantum setting would thus require a post-quantum NIKE. Unfortunately, the only somewhat efficient construction for a post-quantum NIKE is CSIDH [28], which is rather slow and whose concrete security is the subject of intense debate [10, 11, 13, 19, 88]. The obvious workaround when using only KEMs is to increase the number of round trips, but this comes at a steep performance cost.

### Our Contributions
Our goal is to achieve a TLS handshake that provides full post-quantum security, including confidentiality and authentication, while optimizing for the number of round trips, communication bandwidth, and computational costs. Our main technique is to rely on KEMs for authentication, rather than signatures.

We present an alternative TLS handshake, which we call KEMTLS, that uses key-encapsulation mechanisms as primary asymmetric building blocks for both forward-secure ephemeral key exchange and authentication. (We still rely on signatures by certificate authorities to authenticate long-term KEM keys.) A high-level overview of KEMTLS is given in Figure 2, and the detailed protocol appears in Figure 4. We focus on the most common use case for web browsing, namely key agreement with server-only authentication, but our techniques can be extended to client authentication as shown in Appendix C. Note that the scenario we are considering in this paper is orthogonal to resumption mechanisms such as 0-RTT introduced by TLS 1.3.

With KEMTLS, we are able to retain the same number of round trips until the client can start sending encrypted application data as in TLS 1.3 while reducing the communication bandwidth. Compared to TLS 1.3, application data transmitted during the handshake is implicitly, rather than explicitly, authenticated, and has slightly weaker downgrade resilience and forward secrecy than when signatures are used. However, full downgrade resilience and forward secrecy are achieved once the KEMTLS handshake completes; see Section 4 for details.

---

**Note:** This paper is published under the Creative Commons Attribution 4.0 license.
**Event Details:** CCS '20, November 9–13, 2020, Virtual Event, USA
**ACM ISBN:** 978-1-4503-7089-9/20/11
**DOI:** https://doi.org/10.1145/3372297.3423350