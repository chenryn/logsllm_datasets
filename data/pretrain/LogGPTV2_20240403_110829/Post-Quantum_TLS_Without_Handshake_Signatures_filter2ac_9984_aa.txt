title:Post-Quantum TLS Without Handshake Signatures
author:Peter Schwabe and
Douglas Stebila and
Thom Wiggers
Post-Quantum TLS Without Handshake Signatures
Max Planck Institute for Security and
Privacy & Radboud University
Peter Schwabe
PI:EMAIL
Full version, September 29, 2020
Douglas Stebila
University of Waterloo
PI:EMAIL
Thom Wiggers
Radboud University
PI:EMAIL
ABSTRACT
We present KEMTLS, an alternative to the TLS 1.3 handshake that
uses key-encapsulation mechanisms (KEMs) instead of signatures
for server authentication. Among existing post-quantum candidates,
signature schemes generally have larger public key/signature sizes
compared to the public key/ciphertext sizes of KEMs: by using an
IND-CCA-secure KEM for server authentication in post-quantum
TLS, we obtain multiple benefits. A size-optimized post-quantum
instantiation of KEMTLS requires less than half the bandwidth of a
size-optimized post-quantum instantiation of TLS 1.3. In a speed-
optimized instantiation, KEMTLS reduces the amount of server CPU
cycles by almost 90% compared to TLS 1.3, while at the same time
reducing communication size, reducing the time until the client can
start sending encrypted application data, and eliminating code for
signatures from the server’s trusted code base.
CCS CONCEPTS
• Security and privacy → Security protocols; Web protocol
security; Public key encryption.
KEYWORDS
Post-quantum cryptography; key-encapsulation mechanisms; Trans-
port Layer Security; NIST PQC
ACM Reference Format:
Peter Schwabe, Douglas Stebila, and Thom Wiggers. 2020. Post-Quantum
TLS Without Handshake Signatures: Full version, September 29, 2020. In
2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 26 pages. https://doi.org/10.1145/3372297.3423350
1 INTRODUCTION
The Transport Layer Security (TLS) protocol is possibly one of the
most-used secure-channel protocols. It provides not only a secure
way to transfer web pages [92], but is also to secure communications
to mail servers [52, 84] or to set up VPN connections [86]. The most
recent iteration is TLS 1.3, standardized in August 2018 [93]. The
TLS 1.3 handshake uses ephemeral (elliptic-curve) Diffie–Hellman
(DH) key exchange to establish forward-secret session keys. Authen-
tication of both server and (optionally) client is provided by either
RSA or elliptic-curve signatures. Public keys for the signatures are
This paper is published under the Creative Commons
Attribution 4.0 license.
CCS ’20, November 9–13, 2020, Virtual Event, USA
2020. ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3423350
Client
𝑥 ←$ Z𝑞
Server
static (sig): pk𝑆, sk𝑆
TCP SYN
TCP SYN-ACK
𝑔𝑥
𝑦 ←$ Z𝑞
ss ← 𝑔𝑥 𝑦
𝐾, 𝐾′, 𝐾′′, 𝐾′′′ ← KDF(ss)
𝑔𝑦, AEAD𝐾(cert[pk𝑆]∥Sig(sk𝑆, transcript)∥key confirmation)
ss ← 𝑔𝑦𝑥
𝐾, 𝐾′, 𝐾′′, 𝐾′′′ ← KDF(ss)
AEAD𝐾′(application data)
AEAD𝐾′′(key confirmation)
AEAD𝐾′′′(application data)
Figure 1: High-level overview of TLS 1.3, using signatures
for server authentication.
embedded in certificates and transmitted during the handshake. Fig-
ure 1 gives a high-level overview of the TLS 1.3 protocol, focusing
on the signed-Diffie–Hellman aspect of the handshake.
Preparing for post-quantum TLS. There have been many exper-
iments and much research in the past five years on moving the TLS
ecosystem to post-quantum cryptography. Most of the work has
focused on adding post-quantum key exchange to TLS, usually in
the context of so-called “hybrid” key exchange that uses both a
post-quantum algorithm and a traditional (usually elliptic curve)
algorithm, beginning with an experimental demonstration in 2015
of ring-LWE-based key exchange in TLS 1.2 [21].
Public experiments by industry started in 2016 with the CECPQ1
experiment by Google [76], combining X25519 ECDH [9] with
NewHope lattice-based key exchange [2] in the TLS 1.2 handshake.
A CECPQ2 followup experiment with TLS 1.3 was announced in late
2018 [75, 77] and is currently being run by Google using a combina-
tion of X25519 and the lattice-based scheme NTRU-HRSS [54, 55],
and by Cloudflare using X25519/NTRU-HRSS and X25519 together
with the supersingular-isogeny scheme SIKE [61]. First results from
this experiment are presented in [74]. In late 2019, Amazon an-
nounced that the AWS Key Management Service (AWS KMS) now
supports two ECDH-post-quantum hybrid modes; one also using
SIKE, the other one using the code-based scheme BIKE [3]. Our
focus is on public-key authenticated TLS, rather than pre-shared
key (which uses symmetric algorithms for most operations, and
can readily have its ephemeral key exchange replaced with a post-
quantum KEM) or password-authenticated TLS (for which there
has been some exploration of post-quantum algorithms [47]).
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
Additionally, the Open Quantum Safe (OQS) initiative [105] pro-
vides prototype integrations of post-quantum and hybrid key ex-
change in TLS 1.2 and TLS 1.3 via modifications to the OpenSSL
library [85]. First results in terms of feasibility of migration and per-
formance using OQS were presented in [32]; more detailed bench-
marks are presented in [87]. Draft specifications for hybrid key
exchange in TLS 1.3 have already started to appear [65, 106, 108].
Most of the above efforts only target what is often called “tran-
sitional security”: they focus on quantum-resistant confidential-
ity using post-quantum key exchange, but not quantum-resistant
authentication. The OQS OpenSSL prototypes do support post-
quantum authentication in TLS 1.3, and there has been a small
amount of research on the efficiency of this approach [100]. While
post-quantum algorithms generally have larger public keys, ci-
phertexts, and signatures compared to pre-quantum elliptic curve
schemes, the gap is bigger for post-quantum signatures than post-
quantum key encapsulation mechanisms (KEMs); see for example
Table 1 or [81].
Authenticated key exchange without signatures. There is a
long history of protocols for authenticated key exchange without
signatures. Key transport uses public key encryption: authentication
is demonstrated by successfully decrypting a challenge value. Exam-
ples of key transport include the SKEME protocol by Krawczyk [66]
and RSA key-transport ciphersuites in all versions of SSL and TLS
up to TLS version 1.2 (but RSA key transport did not provide for-
ward secrecy). Bellare, Canetti, and Rogaway [5] gave a protocol
that obtained authentication from Diffie–Hellman key exchange:
DH keys are used as long-term credentials for authentication, and
the resulting shared secret is mixed into the session key calculation
to derive a key that is implicitly authenticated, meaning that no one
but the intended parties could compute it. Some of these protocols
go on to obtain explicit authentication via some form of key con-
firmation. Many DH-based AKE protocols have been developed in
the literature. Some are currently used in real-world protocols such
as Signal [90], the Noise framework [89], and WireGuard [37].
There are a few constructions that use generic KEMs for AKE,
rather than static DH [22, 44]. A slightly modified version of the [44]
KEM AKE has recently been used to upgrade the WireGuard hand-
shake to post-quantum security [57]. One might think that the same
approach can be used for KEM-based TLS, but there are two major
differences between the WireGuard handshake and a TLS hand-
shake. First, the WireGuard handshake is mutually authenticated,
while the TLS handshake typically features server-only authenti-
cation. Second, and more importantly, the WireGuard handshake
assumes that long-term keys are known to the communicating par-
ties in advance, while the distribution of the server’s long-term
certified key is part of the handshake in TLS, leading to different
constraints on the order of messages and number of round trips.
The OPTLS proposal by Krawczyk and Wee [72] also aims at a
signature-free alternative for the common TLS handshake, with
authentication via long-term DH keys. OPTLS was at the heart
of early drafts of TLS 1.3, but was dropped in favour of signed-
Diffie–Hellman. As pointed out in [73], OPTLS makes use of DH
as a non-interactive key exchange (NIKE). First the client sends
their ephemeral DH public key, which the server combines with its
own long-term secret key to obtain a shared key; the server’s reply
Client
Server
static (KEMs): pk𝑆, sk𝑆
TCP SYN
TCP SYN-ACK
(pk𝑒, sk𝑒) ← KEMe.Keygen()
pk𝑒
(ss𝑒, ct𝑒) ← KEMe.Encapsulate(pk𝑒)
1 ← KDF(ss𝑒)
𝐾1, 𝐾′
ct𝑒, AEAD𝐾1(cert[pk𝑆])
1 ← KDF(ss𝑒)
ss𝑒 ← KEMe.Decapsulate(ct𝑒, sk𝑒)
𝐾1, 𝐾′
(ss𝑆, ct𝑆) ← KEMs.Encapsulate pk𝑆)
AEAD𝐾′
1
(ct𝑆)
ss𝑆 ← KEMs.Decapsulate(ct𝑆, sk𝑆)
𝐾2, 𝐾′
2, 𝐾′′
2 , 𝐾′′′
2 ← KDF(ss𝑒∥ss𝑆)
AEAD𝐾2(key confirmation), AEAD𝐾′
2
(application data)
AEAD𝐾′′
2
AEAD𝐾′′′
2
(key confirmation)
(application data)
Figure 2: High-level overview of KEMTLS, using KEMs for
server authentication.
thus implicitly authenticates the server to the client. Note however
that the client speaks first, without knowing the server’s public
key: a straight-forward adaptation of OPTLS to a post-quantum
setting would thus require a post-quantum NIKE. Unfortunately,
the only somewhat efficient construction for a post-quantum NIKE
is CSIDH [28], which is rather slow and whose concrete security
is the subject of intense debate [10, 11, 13, 19, 88]. The obvious
workaround when using only KEMs is to increase the number of
round trips, but this comes at a steep performance cost.
Our contributions. Our goal is to achieve a TLS handshake that
provides full post-quantum security—including confidentiality and
authentication—optimizing for number of round trips, communica-
tion bandwidth, and computational costs. Our main technique is to
rely on KEMs for authentication, rather than signatures.
We present an alternative TLS handshake, which we call KEM-
TLS, that uses key-encapsulation mechanisms as primary asym-
metric building blocks, for both forward-secure ephemeral key
exchange and authentication. (We unavoidably still rely on sig-
natures by certificate authorities to authenticate long-term KEM
keys.) A high level overview of KEMTLS is given in Fig. 2, and the
detailed protocol appears in Fig. 4. We focus on the most common
use case for web browsing, namely key agreement with server-only
authentication, but our techniques can be extended to client au-
thentication as shown in Appendix C. Note that the scenario we are
considering in this paper is orthogonal to resumption mechanisms
such as 0-RTT introduced by TLS 1.3.
With KEMTLS, we are able to retain the same number of round
trips until the client can start sending encrypted application data
as in TLS 1.3 while reducing the communication bandwidth. Com-
pared to TLS 1.3, application data transmitted during the handshake
is implicitly, rather than explicitly authenticated, and has slightly
weaker downgrade resilience and forward secrecy than when sig-
natures are used; but full downgrade resilience and forward secrecy
is achieved once the KEMTLS handshake completes; see Section 4
Post-Quantum TLS Without Handshake Signatures
CCS ’20, November 9–13, 2020, Virtual Event, USA
d
e
v
i
e
c
e
r
t
n
e
i
l
c
l
i
t
n
u
e
m
T
i
m
(
a
t
a
d
n
o
i
t
a
c
i
l
p
p
a
d
e
t
p
y
r
c
n
e
150
100
50
0
0
signed KEX
incl. int. CA cert.
KEMTLS
incl. int. CA cert.
signed KEX
excl. int. CA cert.