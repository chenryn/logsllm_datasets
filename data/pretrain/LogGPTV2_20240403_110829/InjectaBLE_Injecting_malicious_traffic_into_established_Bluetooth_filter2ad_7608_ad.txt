The attacker can synchronise with the Master,
the Slave or both of them simultaneously 
Fig. 7: Description of the Man-in-the-Middle attack
parameters that may have a signiﬁcant impact on the attack
success: the Hop Interval, the payload size and the distance
between the attacker and the target Slave. One parameter at
a time was changed and its impact on the attack success
was assessed by monitoring the number of injection attempts
before a successful injection.
A. Experiment 1: Hop Interval
Our ﬁrst experiment focused on the Hop Interval parameter.
Indeed, this parameter is directly involved in the estimation of
the window widening as indicated in equation 5. Theoretically,
as the attack relies on a race condition based on this window
with the legitimate Master,
the injection should be more
difﬁcult when the Hop Interval value is lower.
According to the speciﬁcation, the theoretical Hop Interval
range is from 6 to 3200. However, we chose to focus on six
different values from 25 to 150 for two main reasons:
• We wanted to focus on the worst case of an injection
attempt, which occurs when the injected frame collides
with the legitimate frame, which means considering low
Hop Interval values. Since the injected frame used during
this experiment was 22 bytes long over the air (i.e., 176
μs of transmission time using the LE 1M physical layer),
none of the window widening values calculated from the
tested Hop Intervals allowed an injected frame to be
entirely transmitted without a collision.
• We wanted to conduct our experiment on target real-life
devices and most of them do not allow the use of high
Hop Interval values, because the resulting connections
could be extremely unstable and break quickly. We thus
used the Hop Interval values in the range supported by
a connected lightbulb, which was the commercial device
supporting the widest range of Hop Interval values we
were able to ﬁnd.
To be able to precisely tune the Hop Interval parameter,
we used a modiﬁed version of the open-source Mirage frame-
work [11], [12] to simulate a Central device, because of its
capability to access the HCI on a low level.
We reversed the communication protocol built over GATT
used by this lightbulb, then selected a Write Request allowing
to turn the light off as our injection frame. The corresponding
payload is 14 bytes long, making the entire frame 22 bytes
long. We chose a frame with a visible effect on the device to
validate our heuristic.
The experimental setup was quite simple: the legitimate
Peripheral and Central devices and the attacker were placed
on the three vertices of an equilateral triangle, with 2 meters
edges. The Central initiates connections with the Peripheral
repeatedly while the attacker synchronises with these connec-
tions and starts the injection attack at a speciﬁc connection
event. The experiment was conducted in a realistic envi-
ronment, including several other BLE devices and multiple
WiFi routers. Let us note that synchronising the attack tool
with a connection is not trivial, especially in such a noisy
environment. For each Hop Interval value, we performed
25 injection attacks, and monitored the number of injection
attempts required before a successful injection. The results
are presented in ﬁgure 9.
The attack was successful for every tested connection. The
variance of the number of unsuccessful attempts decreases
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
396
2m
A
B
C
D
E
F
1m 1m 1m 1m
2m
4m
Fig. 8: Experimental setup
quickly between 25 and 100, and stabilises afterwards. Sim-
ilarly, the median value remains at a low value less than 4.
These results show that the injection is always feasible even
with small Hop Intervals, and the number of injection attempts
required before a successful injection is generally low. The
experiment conﬁrms that the Hop Interval has a signiﬁcant
impact on the injection attack success. However, the injection
is more reliable with higher values.
B. Experiment 2: Payload size
This experiment was focused on the payload size of the
injected frame, and was intended to empirically conﬁrm that
injecting shorter frames increases the probability of success.
The experimental setup and the environment are similar to
the one presented above. We selected four different values of
payload size: 4, 9, 14 and 16, which correspond to frames that
have an observable effect on the target lightbulb (such as dis-
connecting it, turning it off, or changing its colour), allowing
to conﬁrm the success of an injection attempt independently
from our success detection heuristic.
We repeated the experiment 1, this time with a ﬁxed Hop
Interval of 75, and iterating over the different payload sizes.
The results are displayed in ﬁgure 9.
Similarly to experiment 1, we observe higher reliability
when the payload size decreases, which is consistent with
the theory as a smaller portion of the injected frame collides.
The number of injection attempts required before a successful
injection remains very low (less than 3 for the median).
C. Experiment 3: distance
Our last experiment was conducted to evaluate the impact of
the distance between the attacker and the legitimate Peripheral.
Theoretically, since the distance impacts the signal strength of
the injection from the Peripheral’s perspective, it may lower
even more the success rate when a collision with the legitimate
frame occurs. We used the same lightbulb as Peripheral, but
used a smartphone as legitimate Central to get closer to a real-
life scenario. The phone was used to establish 25 connections
per tested distance, using its default Hop Interval value equal
to 36. As we chose to only inject the 22 bytes long Write
Request allowing to turn the bulb off, this Hop Interval value
doesn’t allow for collision-free transmissions.
The experimental setup was slightly different from the one
used in experiments 1 and 2: we placed the lightbulb and
the phone within two meters of each other, then we tested
six different positions for the attacker, from 1 to 10 meters,
as illustrated in ﬁgure 8. This allowed us to evaluate the
attack success when the attacker is closer to the Peripheral
than the legitimate Central (position A), when they are at the
same distance (position B) and when the attacker is further
(positions C,D,E and F).
The results are presented in ﬁgure 9. They show a signiﬁcant
impact of the distance between the attacker and the Peripheral
on the reliability, as the variance increases when the distance
is higher. It validates our assumption that the attacker has an
higher probability to quickly perform a successful injection
if closer to the target. However, let us note that each tested
connection leads to a successful injection: it means that the
attacker can perform a successful attack from every location,
including position F which is 10 meters away from the Periph-
eral, while the legitimate Master is only 2 meters away. This
experiment highlights the practical feasibility of the attack,
and shows that, even under adverse conditions in a realistic
environment, the attack is still possible.
We also tested the attack effectiveness behind a wall, to eval-
uate the impact of obstacles. The experimental setup was very
similar to the distance experiment: the lightbulb (legitimate
Peripheral) and the phone (legitimate Master) were placed
within two meters of each other in the same room, while the
attacker was located at four different positions behind a wall,
from 2 to 8 meters from the Peripheral. Similarly to the other
experiments, we established 25 connections per tested distance
and measured the number of injection attempts needed before
a successful injection. Results are presented in ﬁgure 9: as
expected, the presence of a wall increases the number of
injection attempts needed to perform a successful injection,
and the variance increases with the distance. However, even if
the attack requires more attempts, we managed to successfully
inject a frame for every connection we tested, even in the worst
case from the attacker’s perspective. These results show that
this attack is realistic and could be carried out even if the
attacker is not in the same room as the target.
VIII. COUNTER-MEASURES
The InjectaBLE attack exploits a vulnerability that is inher-
ent to the BLE protocol speciﬁcation. As a result, we should
consider every BLE communication as potentially vulnerable
and the environments exposed to BLE devices should be
designed and monitored with the assumption that some attacks
could potentially be carried out through legitimate communi-
cations. Several counter-measures could be investigated either
to limit the impact of the attack, or to prevent or detect it.
As explained in section III-B, the practical implementation
of the InjectaBLE attack requires injecting arbitrary frames
at speciﬁc moments. Three solutions could be investigated.
Each one requires more or less deep changes in the BLE stack
or in the usage of BLE chips. These changes may not be
appropriate from the user’s point of view in the case of an
industrial environment, because of a possibly high number of
devices to reprogram and the cost of certiﬁcation processes.
The ﬁrst solution deals with some communication time
parameters of the stack itself. For example, by reducing the du-
ration of the widening windows the possibility for an attacker
to inject a frame at the right time will be mechanically reduced.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
397
Fig. 9: Experiment Results
More precisely, the rate of successful injection will decrease
due to the collision with a legitimate frame. However it
should be noted that such an approach requires changes to the
BLE standard which could have side effects on the reliability
and stability of the communications. The second solution is
slightly less restrictive. Without going as far as modifying
the BLE standard, it requires to systematically activate the
encryption mechanisms deﬁned in BLE speciﬁcation. If all
frames are correctly ciphered, an attacker will not be able to
easily sniff the connection parameters and forge a valid frame.
In this speciﬁc case, the vulnerability is still present, even
if its impact is limited to Denial of Service attacks. While
this solution could be straightforward, it is not in reality. It
must be noted that the majority of BLE communications are
poorly or not at all encrypted today (see [26] for a qualitative
study of the percentage of BLE devices activating encryption
mechanisms). As a consequence, in most cases, this counter-
measure requires end-users to reprogram all their devices,
which could be tricky, especially in the context of industrial
devices.
During our experiments, we noticed that some manufactur-
ers do not use the native protocol encryption but rather choose
to implement their own over the GATT application layer. We
strongly advise against this solution, since in this case the
LL control frames will not be encrypted and we have already
demonstrated in our attack scenarios that an attacker could
achieve interesting objectives by injecting this kind of frames,
such as initiating a Man-in-the-Middle and not forwarding the
legitimate trafﬁc to perform a denial of service.
The last solution is based on a non intrusive approach.
Defensive solutions dedicated to the IoT context could be
considered to monitor and detect in real time or not attacks
targeting wireless protocols. An Intrusion Detection System
(IDS) designed to monitor BLE Link Layer could be able to
detect, at the right instant, the presence of double frames: the
legitimate Master frame and the attacker one. For instance,
the IDS proposed in [18] is able to identify deviations from
legitimate behaviour by monitoring the radio activity of the
wireless environment. F. Galtier et al. also propose, in [13],
an IDS able to ﬁngerprint legitimate devices (based on physical
characteristics of the radio signals) and to detect inappro-
priate ﬁngerprints related to the attacker frames. Monitoring
solutions designed to detect BLE spooﬁng attacks, such as
[24] or [25], may also detect behavioural anomalies in the
communication between the devices, for example variations in
the timing between packet emissions or change of BLE proﬁle,
and hence detect the injection attempts. Machine Learning
oriented solutions can also be effective, as in [16], where
A. Lahmadi et al. used Neural Networks to build an attacker
model, and detect Man-in-The-Middle attacks.
IX. CONCLUSION
In this paper, we demonstrated the feasibility of a new
injection attack named InjectaBLE targeting the BLE protocol,
allowing to inject malicious frames into an established connec-
tion. This attack signiﬁcantly increases the attack surface of
BLE communications, because it exploits a vulnerability of the
speciﬁcation itself independently of the stack implementations,
and can be achieved quite easily using common BLE chips.
We analysed the impact of multiple factors on the attack
success rate and demonstrated that exploiting this weakness
could allow an attacker to perform critical attack scenarios that
were not realistic until now, such as Slave hijacking or Man-in-
the-Middle attack targeting established connections. We also
performed sensitivity analyses that showed that this injection
always succeeds in various experimental conditions.
Activating the BLE native cryptographic mechanisms can
efﬁciently mitigate this attack. However, in practice, the vast
majority of commercial devices do not use encryption, making
them vulnerable by design to InjectaBLE. The results pre-
sented in this paper clearly highlight the need to generalise
the systematic use of encryption in BLE communications.
The new offensive capabilities provided by InjectaBLE open
opportunities for other critical attack scenarios that need to be
carefully investigated. For example, being able to hijack the
Slave role may potentially allow an attacker to transmit an ATT
notiﬁcation indicating that the ATT server structure has been
modiﬁed: it could be used to expose a malicious keyboard
proﬁle instead of the original one, and inject keystrokes to
the Master by implementing HID over GATT protocol. We
plan to explore the practical feasibility of this attack as future
work. In parallel, it’s important to design efﬁcient defensive
approaches, e.g., a passive monitoring system allowing to
detect InjectaBLE in real time.
REFERENCES
[1] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen, “Key negotiation
downgrade attacks on bluetooth and bluetooth low energy,” ACM
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
398
[25] M. Yaseen, W. Iqbal, I. Rashid, H. Abbas, M. Mohsin, K. Saleem, and
Y. A. Bangash, “Marc: A novel framework for detecting mitm attacks in
ehealthcare ble systems,” Journal of Medical Systems, vol. 43, no. 11,
p. 324, 2019.
[26] C. Zuo, H. Wen, Z. Lin, and Y. Zhang, “Automatic ﬁngerprinting
of vulnerable ble iot devices with static uuids from mobile apps,” in
Proceedings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security, 2019, pp. 1469–1483.
Paper,”
Paper.pdf,
Trans. Priv. Secur., vol. 23, no. 3, Jun. 2020. [Online]. Available:
https://doi.org/10.1145/3394497
[2] D. Antonioli, N. O. Tippenhauer, K. Rasmussen, and M. Payer, “Blur-
tooth: Exploiting cross-transport key derivation in bluetooth classic and
bluetooth low energy,” 2020.
[3] Armis,
“Blueborne
Technical
White
https://go.armis.com/hubfs/BlueBorne Technical White
2017.
[4] ——,
“BleedingBit
Technical
https://go.armis.com/hubfs/BLEEDINGBIT
Paper.pdf, 2018.
-
White
Paper,”
Technical White
[5] Bluetooth Core Speciﬁcation, Bluetooth SIG, 12 2019.
[6] S. Br¨auer, A. Zubow, S. Zehl, M. Roshandel, and S. Mashhadi-Sohi, “On
practical selective jamming of bluetooth low energy advertising,” in 2016
IEEE Conference on Standards for Communications and Networking
(CSCN), 2016, pp. 1–6.
[7] D. Cauquil, “BtleJuice, un framework d’interception pour le Bluetooth
https://www.slideshare.net/NetSecureDay/nsd16-btle-
Low Energy,”
juice-un-framework-dinterception-pour-le-bluetooth-low-energy-
damien-cauquil, 2017.
[8] ——, “Snifﬁng btle with the micro:bit,” PoC or GTFO, vol. 17, pp.
13–20, 2017.
[10] ——, “Defeating Bluetooth Low Energy 5 PRNG for
[9] ——, “You’d better secure your BLE devices or we’ll kick your butts
!” 2018, https://media.defcon.org/DEF CON 26/DEF CON 26 presenta-
tions/Damien Cauquil - Updated/DEFCON-26-Damien-Cauquil-Extras/.
fun and
jamming,” 2019, https://media.defcon.org/DEF CON 27/DEF CON 27
presentations/DEFCON-27-Damien-Cauquil-Defeating-Bluetooth-Low-
Energy-5-PRNG-for-fun-and-jamming.PDF.
[11] R.
“Mirage
https://github.com/RCayre/mirage/.
Cayre,
github
repository,”
[12] R. Cayre, V. Nicomette, G. Auriol, E. Alata, M. Kaˆaniche, and G. Mar-
conato, “Mirage: towards a metasploit-like framework for iot,” in 2019
IEEE 30th International Symposium on Software Reliability Engineering
(ISSRE).
IEEE, 2019, pp. 261–270.
[13] F. Galtier, R. Cayre, G. Auriol, M. Kaˆaniche, and V. Nicomette, “A
psd-based ﬁngerprinting approach to detect iot device spooﬁng,” in 25th
IEEE Paciﬁc Rim International Symposium on Dependable Computing
(PRDC 2020).
[14] M. E. Garbelini, C. Wang, S. Chattopadhyay, S. Sumei, and
E. Kurniawan, “Sweyntooth: Unleashing mayhem over bluetooth low
energy,” in 2020 USENIX Annual Technical Conference (USENIX ATC
20). USENIX Association, Jul. 2020, pp. 911–925. [Online]. Available:
https://www.usenix.org/conference/atc20/presentation/garbelini
[15] S. Jasek, “Gattacking Bluetooth Smart Devices,” 2017.
[16] A. Lahmadi, A. Duque, N. Heraief, and J. Francq, “Mitm attack
detection in ble networks using reconstruction and classiﬁcation ma-
chine learning techniques,” in MLCS 2020-2nd Workshop on Machine
Learning for Cybersecurity, 2020.
[17] S. Qasim Khan, “Snifﬂe: A sniffer for Bluetooth 5 (LE),” 2019,
https://hardwear.io/netherlands-2019/presentation/snifﬂe-talk-hardwear-
io-nl-2019.pdf.
[18] J. Roux, E. Alata, G. Auriol, M. Kaˆaniche, V. Nicomette, and R. Cayre,
“Radiot: Radio communications intrusion detection for iot-a protocol
independent approach,” in 2018 IEEE 17th International Symposium on
Network Computing and Applications (NCA).
IEEE, 2018, pp. 1–8.
[19] M. Ryan, “Bluetooth: With Low Energy comes Low Security,” 2013.
[20] ——, “How Smart is Bluetooth Smart ?” 2013.
[21] A. Santos, J. Filho, A. Silva, V. Nigam, and I. Fonseca, “Ble injection-
free attack: a novel attack on bluetooth low energy devices,” Journal of
Ambient Intelligence and Humanized Computing, 09 2019.
[22] M. von Tschirschnitz, L. Peuckert, F. Franzen, and J. Grossklags,
“Method confusion attack on bluetooth pairing,” in 2021 2021 IEEE
Symposium on Security and Privacy (SP). Los Alamitos, CA, USA:
IEEE Computer Society, may 2021, pp. 213–228. [Online]. Available:
https://doi.ieeecomputersociety.org/10.1109/SP40001.2021.00013
[23] J.-L. Wu, Y. Nan, V. Kumar, D. Tian, A. Bianchi, M. Payer, and D. Xu,
“Blesa: Spooﬁng attacks against reconnections in bluetooth low energy,”
in WOOT @ USENIX Security Symposium, 2020.
[24] J. Wu, Y. Nan, V. Kumar, M. Payer, and D. Xu, “Blueshield: Detecting
spooﬁng attacks in bluetooth low energy networks,” in 23rd Inter-
national Symposium on Research in Attacks, Intrusions and Defenses
({RAID} 2020), 2020, pp. 397–411.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:32 UTC from IEEE Xplore.  Restrictions apply. 
399