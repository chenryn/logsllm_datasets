+
非常简单，看起来很像是使用纯 JS 处理内联的 onClick 事件。而在
Vue 中，需要花费更长的时间来设置事件监听器。input 标签需要处理
onKeyPress 事件，如下所示：
只要用户按下了 'enter' 键，这个函数就会触发 createNewToDoItem 函
46
理论派 | Theory
数，如下所示：
handleKeyPress = (e) => {
if (e.key === ‘Enter’) {
this.createNewToDoItem();
}
};
Vue
：
在 Vue 中，要实现这个功能非常简单。我们只需要使用 @ 符号和事
件监听器的类型。例如，要添加 click 事件侦听器，我们可以这样写：
+
注意：@click 实际上是写 v-on:click 的简写。在 Vue 中，我们可以将
很多东西链接到事件监听器上，例如 .once 可以防止事件监听器被多次触
发。在编写用于处理按键特定事件侦听器时，还可以使用一些快捷方式。
我发现，在 React 中为添加待办事项按钮创建一个事件监听器需要花费更
长的时间。而在 Vue 中，我可以简单地写成：
我们如何将数据传给子组件？
React：
在 React 中，当创建子组件时，我们将 props 传给它。
我们将 todo props 传给了 ToDoItem 组件。从现在开始，我们可以在
子组件中通过 this.props 引用它们。因此，要访问 item.todo，我们只需调
用 this.props.todo。
Vue：
在 Vue 中，当创建子组件时，我们将 props 传给它。
47
InfoQ 架构师 2018 年 9 月
然 后， 我 们 将 它 们 加 入 到 子 组 件 的 props 数 组， 如：
props:‘[id,’'todo']。然后可以在子组件中通过名字来引用它们，入'id'和'todo'。
我们如何将数据发送回父组件？
React：
我们在调用子组件时将函数作为 prop 传给子组件，然后通过任意方
式调用子组件的函数，这将触发位于父组件中的函数。我们可以在“如何
删除待办事项”一节中看到整个过程的示例。
Vue：
在我们的子组件中，我们只需写一个函数，让它向父函数发回一个值。
在父组件中，我们写了一个函数来监听这个值，然后触发函数调用。我们
可以在“如何删除待办事项”一节中看到整个过程的示例。
示例代码链接：
Vue：https://github.com/sunil-sandhu/vue-todo
React：https://github.com/sunil-sandhu/react-todo
48
观点 | Opinion
REST 将会过时，而 GraphQL 则会长存
作者 Samer Buna 译者 张卫滨
本文最初发布于 Medium 上 freeCodeCamp 的博客站点，经原作者
Samer Buna 授权由 InfoQ 中文站翻译并分享。
在处理过多年的 REST API 之后，当我第一次学习到 GraphQL 以及
它试图要解决的问题时，我禁不住发了一条推文，这条推文的内容恰好就
是本文的标题。
49
InfoQ 架构师 2018 年 9 月
当然，那个时候，我只是抱着好奇的心态进行了尝试，但现在，我相
信当时的戏言却正在变成现实。
请不要误解，我并不是说 GraphQL 将会“杀死”REST 或类似的断定。
REST 可能永远都不会消亡，就像 XML 永远也不会灭亡一样。我只是认
为 GraphQL 之于 REST，就像 JSON 之于 XML 那样。
本文不会 100% 地鼓吹 GraphQL，这里面会有一个很重要的章节讨论
GraphQL 灵活性的代价。巨大的灵活性会带来巨大的成本。
简而言之：为何要使用 GraphQL ？
GraphQL 能够非常漂亮地解决三个重要的问题：
为了得到视图所需的数据，需要进行多轮的网络调用：借助
GraphQL，要获取所有的初始化数据，我们仅需一次到服务器的网络调用。
要在REST API中达到相同的目的，我们需要引入非结构化的参数和条件，
这是很难管理和扩展的。
客户端对服务端的依赖：借助GraphQL，客户端会使用一种请求语言，
该语言：1）消除了服务器端硬编码数据形式或数量大小的必要性；2）将
客户端与服务端解耦。这意味着我们能够独立于服务器端维护和改善客户
端。
糟糕的前端开发体验：借助 GraphQL，开发人员只需使用一种声明
式的语言表达用户的界面数据需求即可。他们所描述的是需要什么数据，
而不是如何得到这些数据。在 GraphQL 中，UI 所需的数据以及开发人员
描述数据的方式之间存在紧密的联系。
本文将会详细阐述 GraphQL 是如何解决这些问题的。
在开始之前，有些人可能还不熟悉 GraphQL，所以我们先给出一个
简单的定义。
什么是 GraphQL ？
GraphQL 是一门语言。如果我们将 GraphQL 传授给一个软件应用的
50
观点 | Opinion
话，这个应用能够以声明式的方式与同样使用 GraphQL 的后端数据服务
交流任意的数据需求。
孩子能够快速学习一门新的语言，而成人学起来就会更困难一些。与
之类似，在一个新应用中从头开始使用 GraphQL 要比将其引入到一个成
熟的语言中更容易一些。
要教会一个数据服务使用 GraphQL 语言，我们需要实现一个运行时
层，并将其暴露给想要与服务通信的客户端。我们可以将服务器端的这个
层视为一个简单的 GraphQL 翻译器，或者是讲 GraphQL 语言的代理，它
代表了数据服务。GraphQL 不是一个存储引擎，所以它自己无法成为一
个解决方案。这也是为什么我们无法具备一个只使用 GraphQL 语言的服
务器，而是要实现一个转换运行时的原因。
这个运行时层，可以使用任何语言编写，它定义了一个基于图的通用
模式（schema），该模式能够发布数据服务的能力（capabilities）。使用
GraphQL 语言的客户端应用能够在它的能力范围内查询该模式。这种方
式将客户端和服务端进行了解耦，允许它们都能独立地演化和扩展。
GraphQL 可以是查询（读操作），也可以是变更（写操作）。在这
两种情况下，请求都是一个简单字符串，该字符串能够被 GraphQL 服务
解析、执行并以特定的格式解析数据。在移动和 Web 应用中，流行的响
应格式是 JSON。
什么是 GraphQL ？（通俗讲解版）
GraphQL 就是关于数据通信的。我们有客户端和服务器端，它们之
间都需要进行对话。客户端需要告诉服务器端它需要什么数据，而服务器
端要以实际的数据满足客户端的需求。GraphQL 就位于这种通信之间。
你可能会问，我们为什么不能让客户端和服务器端直接通信呢？当然
可以。
有多个原因促使我们在客户端和服务器端之间放置一个GraphQL层。
其中有个原因，可能也是最常见的，那就是效率。客户端通常需要跟服务
51
InfoQ 架构师 2018 年 9 月
端要求多个资源，而服务端通常只能理解如何响应单个资源。所以，客户
端需要发起多轮请求，这样才能收集到它需要的所有数据。
图片来源于作者Pluralsight课程的截图：使用GraphQL构建可扩展的API
借助 GraphQL，我们可以将这种多请求的复杂性转移到服务端，让
GraphQL 层来对其进行处理。客户端对 GraphQL 层发起一个请求并且会
得到一个响应，该响应中精确包含了客户端所需的内容。
使用 GraphQL 还会有很多收益，比如，另外一个收益就是与多个服
务进行通信的时候。如果你有多个客户端要从多个服务请求数据的话，
位于中间的 GraphQL 层能够简化和标准化这种通信。尽管这并不是针对
REST API 的（因为它也能很容易地实现），但是 GraphQL 运行时提供了
一个结构化和标准化的方式来实现这一点。
图片来源于作者Pluralsight课程的截图：使用GraphQL构建可扩展的API
52
观点 | Opinion
客户端不会与两个不同的数据服务直接交互，我们现在可以让客户端
与 GraphQL 层进行通信。然后，GraphQL 层会与两个不同的数据服务进
行通信。这样的话，GraphQL 首先能够将客户端进行隔离，这样它们就
没有必要使用多种语言进行通信了，同时，GraphQL 还会将一个请求转
换为针对不同服务的多个请求，这些不同的服务可能会使用不同的语言编
写。
让我们假设有三个不同的人，他们使用不同的语言并且具备不同类型
的知识。假设你有一个问题，该问题需要组合这三个人的知识才能给出答
案。如果你有一个能够说这三门语言的翻译器，那么为你的问题给出答案
就会变得很容易。这其实就是 GraphQL 运行时所做的事情。
计算机还没有足够智能来回答任意的问题（至少目前还不可以），所
以它们必须要在某些地方遵循一定的算法。这也是我们需要在 GraphQL
运行时上定义模式的原因，客户端会使用该模式。
基本上来讲，模式就是一个能力文档，它包含了客户端可以请求
GraphQL 层的所有问题的列表。在如何使用模式方面有一定的灵活性，
因为我们在这里所讨论的是一个节点图。模式主要体现的是 GraphQL 层
所能回答的问题都有哪些限制。
还感到不清楚吗？那我们一针见血地回答 GraphQL 是什么：REST
API 的替代品。那么接下来，我们来回答你最可能会提出的一个问题。
那 REST API 有什么问题呢？
REST API 最大的问题在于其多端点的特质。这需要客户端进行多轮
请求才能获取到想要的数据。
REST API通常是端点的集合，其中每个端点代表了一个资源。所以，
当客户端需要来自多个资源的数据时，就需要针对 REST API 发起多轮请
求，这样才能将客户端所需的数据组合完整。
在 REST API 中，没有客户端请求语言。客户端对服务端返回的数据
没有控制权。在这方面，没有语言能够帮助它们实现这一点。更精确地说，
53
InfoQ 架构师 2018 年 9 月
客户端可用的语言非常有限。
例如，用来实现读取（READ）的REST API一般不外乎如下两种形式：