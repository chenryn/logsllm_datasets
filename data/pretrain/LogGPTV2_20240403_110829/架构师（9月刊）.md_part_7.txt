### 使用纯 JavaScript 和 Vue 处理内联事件

在处理内联的 `onClick` 事件时，使用纯 JavaScript 非常简单。而在 Vue 中，设置事件监听器可能需要更多的步骤。例如，在 `input` 标签中处理 `onKeyPress` 事件，当用户按下 'Enter' 键时，可以触发 `createNewToDoItem` 函数：

```javascript
handleKeyPress = (e) => {
    if (e.key === 'Enter') {
        this.createNewToDoItem();
    }
};
```

在 Vue 中，实现类似的功能非常直观。我们可以使用 `@` 符号和事件监听器类型来添加事件侦听器。例如，要添加 `click` 事件侦听器，可以这样写：

```vue
<button @click="someFunction">Click me</button>
```

注意：`@click` 实际上是 `v-on:click` 的简写。Vue 提供了许多便捷的方式，如 `.once` 可以防止事件监听器被多次触发。对于特定的按键事件，也可以使用一些快捷方式。

### React 与 Vue 中的数据传递

#### 将数据传递给子组件

**React:**
在 React 中，创建子组件时，可以通过 `props` 传递数据。例如，我们将 `todo` 作为 `prop` 传递给 `ToDoItem` 组件，并在子组件中通过 `this.props` 访问它们：

```javascript
<ToDoItem todo={item.todo} />
```

在子组件中访问 `item.todo`：

```javascript
const { todo } = this.props;
```

**Vue:**
在 Vue 中，创建子组件时，同样可以通过 `props` 传递数据。首先在父组件中将数据传递给子组件，然后在子组件中定义 `props` 数组并引用它们：

```vue
<ToDoItem :id="id" :todo="todo" />
```

在子组件中定义 `props`：

```vue
props: ['id', 'todo']
```

#### 将数据发送回父组件

**React:**
在调用子组件时，将函数作为 `prop` 传递给子组件。子组件通过调用该函数将数据发送回父组件。例如，在删除待办事项时，可以在子组件中调用父组件传递的函数：

```javascript
<ToDoItem onDelete={this.handleDelete} />
```

在子组件中调用 `onDelete` 函数：

```javascript
this.props.onDelete(item.id);
```

**Vue:**
在 Vue 中，子组件可以通过 `$emit` 方法将数据发送回父组件。父组件通过监听子组件的自定义事件来接收数据。例如，在删除待办事项时，子组件可以触发一个自定义事件：

```vue
<ToDoItem @delete="handleDelete" />
```

在子组件中触发 `delete` 事件：

```vue
this.$emit('delete', item.id);
```

### 示例代码链接
- **Vue:** [https://github.com/sunil-sandhu/vue-todo](https://github.com/sunil-sandhu/vue-todo)
- **React:** [https://github.com/sunil-sandhu/react-todo](https://github.com/sunil-sandhu/react-todo)

### GraphQL 与 REST API

**REST 将会过时，而 GraphQL 则会长存**

作者：Samer Buna  
译者：张卫滨  
本文最初发布于 Medium 上 freeCodeCamp 的博客站点，经原作者 Samer Buna 授权由 InfoQ 中文站翻译并分享。

在多年的 REST API 开发经验后，当我第一次接触到 GraphQL 时，我忍不住发了一条推文，内容正是本文的标题。当时只是出于好奇，但现在我相信这个观点正在成为现实。

当然，这并不意味着 GraphQL 会“杀死”REST。REST 可能永远不会消失，就像 XML 永远不会消失一样。我认为 GraphQL 对 REST 的影响类似于 JSON 对 XML 的影响。

**为什么选择 GraphQL？**

GraphQL 能够优雅地解决以下三个重要问题：

1. **减少多轮网络调用：** 在 GraphQL 中，获取所有初始化数据只需一次网络请求。而在 REST API 中，这通常需要多次请求和复杂的参数管理。
2. **客户端与服务端解耦：** GraphQL 允许客户端使用一种声明式语言，消除了服务器端硬编码数据形式或数量大小的必要性，使客户端和服务端能够独立演化。
3. **改善前端开发体验：** 开发人员只需描述所需数据，而不是如何获取数据。这使得 UI 所需的数据与开发人员描述数据的方式之间存在紧密联系。

**什么是 GraphQL？**

GraphQL 是一种查询语言，允许客户端以声明式的方式与后端数据服务进行通信。它不是存储引擎，因此需要实现一个运行时层来解析和执行查询。这个运行时层可以使用任何语言编写，并定义了一个基于图的模式（schema），客户端可以在其能力范围内查询该模式。

**总结**

GraphQL 作为一种新的数据通信方式，提供了许多优于 REST API 的特性。虽然 REST API 仍然有用，但 GraphQL 的灵活性和效率使其成为未来的一种重要选择。