       +0x044 User32Reserved   : [26] 0
       +0x0ac UserReserved     : [5] 0
       +0x0c0 WOW32Reserved    : (null) 
       +0x0c4 CurrentLocale    : 0x804
       +0x0c8 FpSoftwareStatusRegister : 0
       +0x0cc ReservedForDebuggerInstrumentation : [16] (null) 
       +0x10c SystemReserved1  : [26] (null) 
       +0x174 PlaceholderCompatibilityMode : 0 ''
       +0x175 PlaceholderReserved : [11]  ""
所以这里的PEB地址为：`0x003ef000`
## 3\. 分析PEB结构
进程环境块PEB中偏移位置为`0x0C`的地方存放着指向`PEB_LDR_DATA`结构体的指针，其中，存放着已经被进程装载的动态链接库的信息
在`x86`上`PEB_LDR_DATA结构体的指针`位于`0x0C`
    0:000> dt _peb 003ef000
    ntdll!_PEB
       +0x000 InheritedAddressSpace : 0 ''
       +0x001 ReadImageFileExecOptions : 0 ''
       +0x002 BeingDebugged    : 0x1 ''
       +0x003 BitField         : 0 ''
       +0x003 ImageUsesLargePages : 0y0
       +0x003 IsProtectedProcess : 0y0
       +0x003 IsImageDynamicallyRelocated : 0y0
       +0x003 SkipPatchingUser32Forwarders : 0y0
       +0x003 IsPackagedProcess : 0y0
       +0x003 IsAppContainer   : 0y0
       +0x003 IsProtectedProcessLight : 0y0
       +0x003 IsLongPathAwareProcess : 0y0
       +0x004 Mutant           : 0xffffffff Void
       +0x008 ImageBaseAddress : 0x00400000 Void
       +0x00c Ldr              : 0x77d3ab40 _PEB_LDR_DATA
## 4.PEB_LDR_DATA结构体
  * 偏移位置为`0x0C`的地方存放着指向模块加载顺序链表的头指针`InLoadOrderModuleList`
  * 偏移位置为`0x14`的地方存放着指向模块在运行中的模块链表的头指针`InMemoryOrderModuleList`
  * 偏移位置为`0x1C`的地方存放着指向模块初始化装载顺序链表的头指针`InInitizationOrderModuleList`
    0:000> dt _peb_ldr_data 0x77d3ab40
    ntdll!_PEB_LDR_DATA
       +0x000 Length           : 0x30
       +0x004 Initialized      : 0x1 ''
       +0x008 SsHandle         : (null) 
       +0x00c InLoadOrderModuleList : _LIST_ENTRY [ 0x481ed0 - 0x482660 ]
       +0x014 InMemoryOrderModuleList : _LIST_ENTRY [ 0x481ed8 - 0x482668 ]
       +0x01c InInitializationOrderModuleList : _LIST_ENTRY [ 0x481dd8 - 0x4822c0 ]
       +0x024 EntryInProgress  : (null) 
       +0x028 ShutdownInProgress : 0 ''
       +0x02c ShutdownThreadId : (null)
  * 我们先观察模块`InLoadOrderModuleList`的链表顺序
    0:000> lm
    start    end        module name
    00400000 00426000   test03   C (no symbols)           
    74710000 748e8000   KERNELBASE   (deferred)             
    77950000 779e5000   KERNEL32   (pdb symbols)          C:\ProgramData\Dbg\sym\kernel32.pdb\EFA698598E9A5A3CB89EC02E7DE288041\kernel32.pdb
    77c20000 77db0000   ntdll      (pdb symbols)          C:\ProgramData\Dbg\sym\ntdll.pdb\C771EA3FB471AEB18DF6186EC9D80CD81\ntdll.pdb
## 5\. 链表`InLoadOrderModuleList`中按顺序存放着PE装入运行时初始化模块信息
第一个链表节点是`test03`的内置内存块,第二个链表结点是`ntdll.dll`，第三个链表节点是`kernel32.dll`
## 6\. 跟踪`3步`找到属于`kernel32.dll`的结点后，在其基础上再偏移`0x18`就是`kernel32.dll`在内存中的加载基地址
    0:000> dd 0x481ed0
    00481ed0  00481dc8 77d3ab4c 00481dd0 77d3ab54
    00481ee0  00000000 00000000 00400000 00401170    dd 00481dc8
    00481dc8  004822b0 00481ed0 004822b8 00481ed8
    00481dd8  00482670 77d3ab5c 77c20000 00000000    dd 004822b0
    004822b0  00482660 00481dc8 00482668 00481dd0
    004822c0  77d3ab5c 00482670 77950000 779695e0   #includeint main() {    _asm    {       // 将要调用的函数hash值入栈保存     CLD                             // 清空标志位DF      push 0x1e380a6a                 // 压入 MessageBoxA 字符串的hash      push 0x4fd18963                 // 压入 ExitProcess 字符串的hash      push 0x0c917432                 // 压入 LoadLibraryA 字符串的hash     mov esi, esp                    // 指向栈中存放LoadLibraryA的 hash 地址      lea edi, [esi - 0xc]            // 用于存放后边找到的 三个函数地址     // 开辟0x400大小的栈空间        xor ebx, ebx                    //ebx清零     mov bh, 0x04        sub esp, ebx                    //sub esp,0x400     // 将user32.dll入栈        mov bx, 0x3233      push ebx                        // 压入字符'32'     push 0x72657375                 // 压入字符 'user'      push esp        xor edx, edx        // 查找 kernel32.dll 的基地址     mov ebx, fs: [edx + 0x30]       // FS得到当前线程环境块TEB TEB+0x30 是进程环境块 PEB       mov ecx, [ebx + 0x0c]               // PEB+0x0c 是PEB_LDR_DATA结构体指针 存放这已经被进程加载的动态链接库的信息      mov ecx, [ecx + 0x0c]               // PEB_LDR_DATA+0x0c 指向模块初始化链表的头指针 InLoadOrderModuleList        mov ecx, [ecx]                      // ntdll.dll链表      mov ecx, [ecx]                      // Kernel32.dll链表       mov ebp, [ecx + 0x18]               // ebp即kernel32.dll基地址      // 与 hash 的查找相关     find_lib_funcs :        lodsd                           // 将[esi]中的4字节 传到eax中       cmp eax, 0x1e380a6a             // 比较 MessageBoxA 字符串的hash值     jne find_funcs                  // 如果不相等则继续查找       xchg eax, ebp                   // 记录当前hash值        call[edi - 0x8]     xchg eax, ebp                   // 还原当前hash值 并且把exa基地址更新为 user32.dll的基地址        //在PE文件中查找相应的API函数      //获取导出函数名称表内存虚拟地址(VA)    //ebp为获取的Kernel32.dll基址    find_funcs :        pushad                          // 保存寄存器环境          mov eax, [ebp + 0x3c]           // 指向PE头            mov ecx, [ebp + eax + 0x78]     // 得到导出表的指针         add ecx, ebp                    // 得到导出函数表内存虚拟地址(VA)            mov ebx, [ecx + 0x20]           // 得到导出函数名称表(RVA)           add ebx, ebp                    // 得到导出函数名称表内存虚拟地址(VA)          xor edi, edi                    // 初始化计数器           // 循环读取导出表函数对比是否是自己需要的          next_func_loop :        inc edi                         // 函数计数器+1          mov esi, [ebx + edi * 4]        // 得到 当前函数名的地址(RVA)         add esi, ebp                    // 得到 当前函数名的内存虚拟地址(VA)          cdq;        // 计算hash值  hash_loop:                          // 循环得到当前函数名的hash       movsx eax, byte ptr[esi]        // 得到当前函数名称 第esi的一个字母           cmp al, ah                      // 比较到达函数名最后的0没有            jz compare_hash                 // 函数名hash 计算完毕后跳到 下一个流程            ror edx, 7                      // 循环右移7位           add edx, eax                    // 累加得到hash         inc esi                         // 计数+1 得到函数名的下一个字母         jmp hash_loop                   // 循环跳到 hash_loop           // hash值的比较         compare_hash :      cmp edx, [esp + 0x1c]           // 比较 目标函数名hash 和 当前函数名的hash            jnz next_func_loop              // 如果 不等于 继续下一个函数名          mov ebx, [ecx + 0x24]           // 得到 PE导出表中的 函数序号列表的 相对位置          add ebx, ebp                    // 得到 PE导出表中的 函数序号列表的 绝对位置          mov di, [ebx + 2 * edi]         // 得到 PE导出表中的 当前函数的序号           mov ebx, [ecx + 0x1c]           // 得到 PE导出表中的 函数地址列表的 相对位置          add ebx, ebp                    // 得到 PE导出表中的 函数地址列表的 绝对位置          add ebp, [ebx + 4 * edi]        // 得到 PE导出表中的 当前函数的绝对地址                                             // 循环依次得到kernel32.dll中的 LoadLibraryA  ExitProcess                                           // 和user32.dll中的 MessageBoxA            xchg eax, ebp                   // 把函数地址放入eax中          pop edi                         // pushad中最后一个压入的是edi 正好是开始预留 用于存放的三个函数地址 的栈空间          stosd                           // 把找到函数地址出入 edi对应的栈空间          push edi                        // 继续压栈 平衡栈         popad                           // 还原环境         cmp eax, 0x1e380a6a             // 比较是否是 MessageBoxA 函数 如果是说明全部函数已经找齐 可以调用函数执行功能            jne find_lib_funcs          // 下方的代码，就是弹窗           func_call :     xor ebx, ebx        // 将 ebx 清0         push ebx      push 0x206f7265           push 0x5a5f7466 // 注意数据大小端问题            push 0x6973696d // 标题“misift_Zero”          mov eax, esp        // 把标题赋值给 eax           push ebx            push 0x216e7770 // 再push一个“pwn!”当做内容            mov ecx, esp        // 把内容 hello 赋值给 ecx            // 下面就是将MessageBox的参数压栈         push ebx        // messageBox 第四个参数         push eax        // messageBox 第三个参数         push ecx        // messageBox 第二个参数         push ebx        // messageBox 第一个参数         call[edi - 0x04]                // 调用   MessageBoxA         push ebx            call[edi - 0x08]                // 调用 ExitProcess           nop         nop         nop         nop }   return 0;}
# 结果示例
* * *
* * *
### 学习链接
  * [动态定位API函数之shellcode编写](https://blog.csdn.net/mdp1234/article/details/110287856)
  * [c++动态定位API地址的shellcode锁定](https://blog.csdn.net/weixin_41986518/article/details/90034723)