import re
class MRCounter（MRJob）：
def mapper（self， key， line）：
i=0
for url in line.split（）：
if i==6： #获取日志中URL文件资源字段，作为key
yield url， 1
i+=1
def reducer（self， url， occurrences）：
yield url， sum（occurrences）
if __name__ == '__main__'：
MRCounter.run（）
执行结果如图12-20所示。
图12-20 任务分析结果（部分截图）
同理，我们可以使用以上方法对User-Agent域进行分析，包括浏览器类型及
版本、操作系统及版本、浏览器内核等信息，为更好地提升用户体验提供数据
支持。
参考提示 12.2.1小节原生Python编写mapreduce示例参考
http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-
python/。
第三部分 案例篇
·第13章 从零开始打造B/S自动化运维平台
·第14章 打造Linux系统安全审计功能
·第15章 构建分布式质量监控平台
·第16章 构建桌面版C/S自动化运维平台
第13章 从零开始打造B/S自动化运维平台
随着企业业务的不断发展，在运营方面，如何保障业务的高可用及服务质
量，系统管理员将面临越来越多的挑战。目前，很多企业还处在传统的“半自动
化”状态，一旦出现运维事故，技术部的每个人都会加入“救火”行列，最后弄得
疲惫不堪。因此，构建高效的运营模式已迫在眉睫，可以从以下几个方面入
手，包括定制符合企业特点的IT制度、流程规范、质量与成本管理、运营效率
建设等。本章将介绍如何使用Python从零开始打造一个易用、扩展性强、安全、
高效的自动化运维平台，从而提高运营人员的工作效率。
13.1 平台功能介绍
作为ITIL体系当中的一部分，本平台同样遵循ITIL标准设计规范。OMServer
是本平台的名称，后面的内容将使用它作为平台的称号。OMServer实现了一个
集中式的Linux集群管理基础平台，提供了模块扩展的支持，可以随意添加集群
操作任务模块，服务器端模块支持前端HTML表单参数动态定制，可灵活实现日
常运维远程操作、文件分发等任务；在安全方面，采用加密（RC4算法）指令传
输、操作日志记录、分离Web Server与主控设备等；在效率方面，管理员只需选
择操作目标对象及操作模块即可完成一个现网变更任务。另外，在用户体验方
面，采用前端异步请求，模拟Linux终端效果接收返回串。任何人都可以根据自
身的业务特点对OMServer平台进行扩展，比如与现有资产平台进行对接，或整
合到现有的运营平台当中。平台首页如图13-1所示。
图13-1 平台首页界面
13.2 系统构架设计
OMServer平台采用了三层设计模式，第一层为Web交互层，采用了
Django+prototype.js+MySQL实现，服务器端采用了Nginx+uwsgi构建高效的Web
服务；第二层为分布式计算层，采用rpyc分布式计算框架实现，作为第一层与第
三层的数据交互及实现主控端物理分离，提高整体安全性，同时具备第三层的
多机服务的能力；第三层为集群主控端服务层，支持Saltstack、Ansible、Func等
平台。具体见如图13-2所示的系统架构图。
图13-2 系统架构图
从图13-2可以看出系统的三个层次，首先管理员向OMServer平台所在Web服
务器发起HTTP请求，OMServer接收HTTP POST的数据并采
用“RC4+b64encode+密钥key”进行加密，再作为rpyc客户端向rpyc服务器发送加
密指令串，rpyc服务器端同时也是Saltstack、Ansible、Func等的主控端，主控端
将接收到的数据通过“RC4+b64decode+密钥key”进行解密，解析成OMServer调用
的任务模块，结合Saltstack、Ansible或Func向目标业务服务器集群发送执行任
务，执行完毕后，将返回的执行结果加解密处理，最后逐级返回给系统管理
员，整个任务模块分发执行流程结束。
13.3 数据库结构设计
13.3.1 数据库分析
OMServer平台采用了开源数据库MySQL作为数据存储，将数据库命名为
OMServer，该数据库总共有4张表，表信息说明如下。
·server_fun_categ：服务功能分类表。
·server_app_categ：服务应用分类表。
·server_list：服务器列表。
·module_list：模块列表。
13.3.2 数据字典
server_fun_categ服务功能分类表。
server_app_categ服务应用分类表。
server_list服务器列表。
module_list模块列表。
13.3.3 数据库模型
在ITIL体系中有一种比较典型的资产定义方法，即采用“功能分类”作为根
类，其子类为“应用分类”，在最小单位的“服务器”中指定“应用分类”进行关联，
完成其层次关系的定义，例如，Linux.Web（一级功能类
别），bbs.domain.com（二级应用类别），10.11.100.10（服务器归
bbs.domain.com类别），详见图13-3所示的数据库模型图。
图13-3 数据库模型
从模型关系图中可以看出，server_list表中的server_app_id字段被设置为外
键，与server_app_categ表中的ID字段进行关联；server_app_categ表中的
server_categ_id字段被设置为外键，与server_fun_categ表中的ID字段进行关联。
13.4 系统环境部署
13.4.1 系统环境说明
OMServer采用Django-1.4.9、nginx-1.5.9、uwsgi-2.0.4、rpyc-3.2.3等开源组件
来构建。为了便于读者理解，下面对平台的运行环境、安装部署、开发环境优
化等进行详细说明。环境设备角色表如表13-1所示。
表13-1 系统环境说明表
13.4.2 系统平台搭建
OMServer平台涉及两个角色，其中一个为Web服务端，运行Django及rpyc环
境，另一角色为主控端，需要部署Saltstack、Ansible或Func主控端环境，可参与
本书第9~11章内容，本节不予详细介绍。另外同样需要部署rpyc环境。
（1）Django环境部署
本示例部署主机为192.168.1.10（SN2012-07-010）。
# cd /home
# mkdir -p /home/install/Django && cd /home/install/Django #创建安装包目录
# mkdir –p /data/logs/ #创建uwsgi日志目录
1）安装pcre。pcre是一个轻量级的正则表达式函数库，Nginx的HTTP
Rewrite模块会用到，最新版本为8.34（对于OMServer平台环境来说非必选
项）。
# wget ftp：//ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-
8.34.tar.gz
# tar -zxvf pcre-8.34.tar.gz
# cd pcre-8.34
#./configure
# make && make install
# cd ..
2）安装Nginx。Nginx是最流行的高性能HTTP服务器，最新版本为1.5.9。
# wget http：//nginx.org/download/nginx-1.5.9.tar.gz
# tar -zxvf nginx-1.5.9.tar.gz
# cd nginx-1.5.9
#./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-
http_stub_status_module --with-cc-opt='-O3' --with-cpu-opt=opteron
# make && make install
# cd ..
3）安装MySQL-python。MySQL-python是Python访问MySQL数据库的第三
方模块库，最新版本为1.2.3c1。
# yum install -y MySQL-python #yum安装方式
# wget http：//nchc.dl.sourceforge.net/project/mysql-python/mysql-
python/1.2.2/
# tar -zxvf MySQL-python-1.2.2.tar.gz #源码安装方式
# cd MySQL-python-1.2.2
# python setup.py install
# cd ..
4）安装uwsgi。uwsgi是一个快速的、纯C语言开发的、自维护、对开发者友
好的WSGI服务器，旨在提供专业的Python Web应用发布和开发功能，最新版本
为2.0.4。
# wget http：//projects.unbit.it/downloads/uwsgi-2.0.4.tar.gz
# tar -zxvf uwsgi-2.0.4.tar.gz
# cd uwsgi-2.0.4
# make
# cp uwsgi /usr/bin
# cd ..
5）安装Django。Django是一个Python最流行的开源Web开发框架，最新版本
为1.6.5。考虑到兼容与稳定性，本示例使用1.4.9版本进行开发。
# wget https：//www.djangoproject.com/m/releases/1.4/Django-1.4.9.tar.gz
# tar -zxvf Django-1.4.9.tar.gz
# cd Django-1.4.9
# python setup.py install
6）配置Nginx。修改/usr/local/nginx/conf/nginx.conf，添加以下server域配
置：
server {
listen 80；
server_name omserver.domain.com；
location / {
uwsgi_pass 192.168.1.10：9000；
include uwsgi_params；
uwsgi_param UWSGI_CHDIR /data/www/OMserverweb；
uwsgi_param UWSGI_SCRIPT django_wsgi；
access_log off；
}
location ^~ /static {
root /data/www/OMserverweb；
}
location ~* ^.+\.
（mpg|avi|mp3|swf|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|txt |tar|mid|midi|wav|rtf|mpeg）$ {
root /data/www/OMserverweb/static；
access_log off；
}
}
其中“omserver.domain.com”为平台访问域名，“/data/www/OMserverweb”为项
目根目录，可以根据具体环境进行修改。
7）配置uwsgi。创建uwsgi配置文件/usr/local/nginx/conf/uwsgi.ini，详细内容
如下：
[uwsgi]
socket = 0.0.0.0：9000 #监听的地址及端口
master = true #启动主进程
pidfile = /usr/local/nginx/uwsgi.pid
processes = 8 #uwsgi开启的进程数
chdir = /data/www/OMserverweb #项目主目录
pythonpath = /data/www
profiler=true
memory-report=true
enable-threads = true
logdate=true
limit-as=6048
daemonize=/data/logs/django.log
启动uwsgi与nginx服务，建议配置成服务自启动脚本，便于后续的日常维
护。详细启动脚本这里不展开说明，有兴趣的读者可参阅互联网上已经存在的
相关资源。
# /usr/bin/uwsgi --ini /usr/local/nginx/conf/uwsgi.ini
# /usr/local/nginx/sbin/nginx
访问http://omserver.domain.com，出现如图4-4所示的页面说明Django+uwsgi
环境部署成功！
图13-4 Django默认首页
（2）rpyc模块安装。
rpyc（Remote Python Call）是Python提供分布式计算的基础服务平台，可以
理解成封装程度更高的Socket编程，最新版本为3.3。本示例需要部署rpyc模块的
主机为192.168.1.20（SN2013-08-020）、192.168.1.10（SN2012-07-010）。
# wget https：//pypi.python.org/packages/source/r/rpyc/rpyc-3.2.3.tar.gz --
no-check-certificate
# tar -zxvf rpyc-3.2.3.tar.gz
# cd rpyc-3.2.3
# python setup.py install
13.4.3 开发环境优化
开发环境相对于生产环境更注重调试便捷性，好的调试工具对软件开发将起
到事半功倍的作用，方便高效地定位问题。本节介绍Django必备调试工具
django-debug-toolbar的安装与配置，同时介绍如何实现一种Django代码自动刷新
生效的方法。
（1）django-debug-toolbar的安装
# wget https：//github.com/robhudson/django-debug-toolbar/archive/master.zip
# unzip master
# cd django-debug-toolbar-master/
# python setup.py install
修改Django的setting.py配置，关键参数如下：
INTERNAL_IPS = （'127.0.0.1'，'192.168.1.101'，） #添加启动调试器的来源IP
MIDDLEWARE_CLASSES = （ # MIDDLEWARE_CLASSES添加以下行
… …
'debug_toolbar.middleware.DebugToolbarMiddleware'，
）
INSTALLED_APPS = （ # INSTALLED_APPS添加以下行
… …
'debug_toolbar'，
}
TEMPLATE_DIRS = （ #TEMPLATE_DIRS添加以下行，注意与python的安装路径保持一致
… …
'/usr/lib/python2.6/site-packages/django_debug_toolbar-0.8.5-
py2.6.egg/debug_toolbar/templates/'，
）
务必要渲染一个模板，这样debug_toolbar才会自动附加调试信息到当前的页
面，否则看不到debug_tool的界面。debug_toolbar在业务前端页面设计成可伸缩
展示，展开后的调试界面如图13-5所示。
图13-5 debug_toolbar界面
（2）Django源码自动重载（reload）方案
本方案结合uwsgi的“--touch-reload”参数来实现，参数格式：--touch-
reload"文件"，即当该参数值指定的文件发生变化（修改或touch操作）
时，uwsgi进程将自动重载（reload），从而使我们的项目代码刷新生效。另外，
如何保证一旦更新项目源码立即触发变更--touch-reload指定的文件？Linux系统
下的inotify可以做到这点，具体操作如下。
1）在项目目录中创建一个监视文件：
# mkdir /data/www/OMserverweb/shell #在项目目录中创建一个存放监视文件的目录shell
# touch reload.set #创建一个监视文件reload.set
# yum -y install inotify-tools #安装inotify程序包
# uwsgi启动脚本添加“--touch-reload”项
# /usr/bin/uwsgi --ini "/usr/local/nginx/conf/*.ini" --touch-
reload "/data/www/OMserverweb/shell/reload.set"
2）编写监视脚本：
# vi /data/www/OMserverweb/shell/autoreload.sh
#！/bin/sh
objectdir="/data/www/OMserverweb"
# 启动inotify监视项目目录，参数“--exclude”为忽略的文件或目录正则
/usr/bin/inotifywait -mrq --