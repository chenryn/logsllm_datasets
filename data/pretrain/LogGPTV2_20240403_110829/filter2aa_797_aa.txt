2019/2/26
GET来的漏洞 | WooYun知识库
http://www.anquan.us/static/drops/web-7112.html
1/10
GET来的漏洞
呆子不开口 (/author/呆子不开口) ·  2015/07/15 10:04
0x00 前言
这篇文章主要讲目前互联网上get方法被不规范使用带来的一些安全漏洞。其中重点会讲get请求在账号登陆体系中被滥用
的场景和攻击方式。
0x01 Get方法的定义
在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST
GET - 从指定的资源请求数据  
POST - 向指定的资源提交要被处理的数据 
GET 方法的查询字符串是在 GET 请求的 URL 中发送的，常见的场景是地址栏请求和超链接。
0x02 Get请求常见于如下场景中
浏览器地址栏中可见，会被别人看到
浏览器历史记录
被云加速的cdn服务商收集，proxy
被运营商或网络设备收集重放
在不安全的网络环境中被网络嗅探
用户的收藏夹
http的header的referrer字段中
web服务器日志、应用日志
被搜索引擎爬到，或者被客户端软件不规范收集
被用户邮件或微信分享出去
各种可能的地方，甚至山岗上田野上（一个黑客盗取了你的get请求后，路过一个山岗时，被大灰狼吃掉了，U盘掉在
了山岗上）
0x03 Get请求的风险
根据HTTP规范，GET用于信息获取，是安全的和幂等的。安全的意思是get请求不会让服务端的资源或状态改变。幂等的
意思是无论请求多少次，返回的结果都一样，都不会对服务端资源有任何副作用。
所以从被设计和现实中被使用的场景来看，get请求有如下特性
因为是获取资源的请求，所以会在客户端、缓存端和服务器端等地方到处出现，容易泄露被第三方获得
因为是安全和幂等的，所以各环节重放get请求时不用顾忌，不用提示用户。重放post有时浏览器会提示用户是否确定
要重新发送数据
所以get请求的使用应该遵循
(/author/呆
开口)
呆子不开口 (
呆子不开
(/)
(/n
ew
se
nd)
✏
(/w
p-
logi
n.p
hp
?
acti
on
=lo
go
ut&
red
ire
ct_
to=
htt
p%
3A
%2
F%
2F
dro
ps.
wo
oy
un.
org
)
2019/2/26
GET来的漏洞 | WooYun知识库
http://www.anquan.us/static/drops/web-7112.html
2/10
不应有增删改的操作
不应包含敏感信息
当你的实现不符合别人对你的预期，就可能产生漏洞，如
隐私泄露，被csrf漏洞利用，账号被盗……
0x04 若你非要用get实现增删改
会被重放，导致服务端资源状态发生改变
浏览器的重新打开可能会重放请求，而不会提示用户
爬虫或安全扫描会重放你的请求
获取到你get请求的各种势力可能会重放此请求，如安全厂商，搜索引擎，神秘力量（除了山岗上那个黑客，因为他已
经被大灰狼吃掉了）
get操作的csrf防护很难实施，因为get没有防伪造的需求，它的场景不一定配合你的防护。referrer信任可能被利用，token
可能被偷。举个例子，一个塑料盒子，它本就不是被设计用来存钱的，你若非要用它存钱，并还要加上一把锁，效果肯定
不会好。见下面例子：
网站允许用户发表第三方链接、图片等，那么用户构造的csrf请求的referrer是可信域的url，可以绕过referrer的防护
存在js端的跳转漏洞跳到第三方，同理可以绕过referrer
Get请求中防护的token容易被偷，原理同上，后面的章节会细讲
常见的场景：一些使用了mvc框架的程序，直接用urlrewrite后的url来实现了增删改等操作
0x06 若你非用get传输敏感信息
互联网上常见的敏感信息举例：
隐私信息
http://weibo.com/lvwei 
大家可能觉得微博id不算隐私，但一旦你的id和某些操作绑定的时候，那就算是隐私了
校验信息
https://mp.weixin.qq.com/cgi-bin/home?t=home/index&lang=zh_CN&token=371767643 
这是微博公众平台管理后台的首页，首页url里会包含csrf防护的token
认证信息
http://XXX.XXXXXX.XXX/index.php?ticket=***************** 
http://XXX.XXXXXX.XXX/index.php?gsid=****************** 
很多登录认证如单点登录，绑定第三方账号登录等会用get请求来完成登录
如果你的get请求中包含如上一些信息，那么你的敏感信息将会被偷被泄露，然后你会被搞！！！
0x07 敏感信息泄露举例
(/)
(/n
ew
se
nd)
✏
(/w
p-
logi
n.p
hp
?
acti
on
=lo
go
ut&
red
ire
ct_
to=
htt
p%
3A
%2
F%
2F
dro
ps.
wo
oy
un.
org
)
2019/2/26
GET来的漏洞 | WooYun知识库
http://www.anquan.us/static/drops/web-7112.html
3/10
隐私信息泄露举例
用户登录微博后，首页的url会含有用户ID信息。所以timeline上的链接的主人会通过referrer知道哪些用户访问了它。可能
大家都不会在意，它可能会帮你逮微博马甲、捉奸在网……
比如如下场景：
某天你男友出差，长夜漫漫，你很无聊，写了一篇博客，记录下了盛夏夜中你此刻的心情。喝完咖啡，你正打算上床睡觉
了，突然你又好奇想知道自己青春的文采已被多少人阅读。于是你打开电脑，登上服务器，去查看你博客的访问日志，从
referrer中你发现，你的男朋友和你的男同事在凌晨一点，都访问了你发的链接，并且IP一样。这个时候，作为一个男子
汉，你可能要考虑下，应该哭多大声才不会吵到邻居……当然，你还可以安慰自己，他们是一起在网吧通宵玩游戏
我还曾经用此方法帮人揪出了一些人的微博马甲。只要你够无聊，你还可以玩些别的，比如在用户打开的页面上再放上些
兴趣爱好治病寻医类的广告，如果他点了，你就可能会知道她平时爱逛的是不是三里屯的优衣库了。
我不清楚微博的首页地址为何要这样设计，服务端若要读当前用户id，完全从当前会话中就可读取，而且从安全的角度考
虑，也不应该会从url中读取用户id信息。那为什么要显示用户的id呢…
token信息泄露举例
如上图，这是微信公众平台后台管理员点击了网友发来的信息后的打开第三方页面的请求，referrer字段中的url中包含了管
理后台的csrf防护的token
微信公众后台的操作大多是post，csrf的防护有token和referrer，但在每个页面的get请求中，也会含有这个token。这样的
话token很容易被referrer偷，见上图，token已经发给了第三方域了。这样csrf的防护体系就被削弱了
顺便说一句，这个后台是https的，所以我们的链接也要是https的才会发送referrer。在网上申请个免费的https站点即可
好在这个问题目前没什么危害，管理后台的csrf防护是referrer和token都做了的，而且用户想给公众号发一个链接需要一些
小技巧，直接发链接在后台是不可以形成链接的。
认证信息泄露举例——被referrer发到第三方
(/)
(/n
ew
se
nd)
✏
(/w
p-
logi
n.p
hp
?
acti
on
=lo
go
ut&
red
ire
ct_
to=
htt
p%
3A
%2
F%
2F
dro
ps.
wo
oy
un.
org
)
2019/2/26
GET来的漏洞 | WooYun知识库
http://www.anquan.us/static/drops/web-7112.html
4/10
上图是现在的乌云的厂商用户的查看漏洞详情的临时页面，原来的页面是没有查看密码的，是可以通过地址栏里那个含有
auth信息的get请求直接查看漏洞详情的
但某一漏洞详情页包含了一个优酷的视频，这个查看详情的链接会在优酷的视频页显示。因为优酷为了告诉用户展示来
源，显示了referrer信息。这样这个漏洞详情的临时查看页面就可以被网友在网上无意撞见了，厂商的漏洞详情可能会被提
前泄露。见下图
详情可参考 WooYun: 乌云某临时授权查看链接在某些极小可能性下有泄露的可能 (http://www.wooyun.org/bugs/wooyun-
2015-0102609)
然后我想看看这个查看漏洞的授权页在网上泄露了多少，去百度搜了下
一个月内泄露的乌云厂商用户的临时查看链接竟然有十二页之多，我觉得应该不可能全是厂商管理员分享出去的。所以我
有了一个猜测，不一定是错的，那就是：乌云的所有get请求都已被百度云加速收集，用来帮助用户进行搜索的seo优化。
0x08 偷最敏感的信息——认证信息
使用get请求认证的一些场景
单点登陆从sso拿ticket信息，参数名如ticket、auth
网站绑定第三方账号登陆，由第三方给的登陆凭证
App给内嵌页面请求加上认证信息，参数名如sid、gsid
(/)
(/n
ew
se
nd)
✏
(/w
p-
logi
n.p
hp
?
acti
on
=lo
go
ut&
red
ire
ct_
to=
htt
p%
3A
%2
F%
2F
dro
ps.
wo
oy
un.
org
)
2019/2/26
GET来的漏洞 | WooYun知识库
http://www.anquan.us/static/drops/web-7112.html
5/10
Xss偷不了httponly的cookie了？
你可以试试偷上面的这些认证信息
Xss能做的比你想象的要多，它毕竟是个代码执行漏洞
如果Xss不好找？你还可以试试referrer，它不产生漏洞，但它是漏洞的搬运工
首先我们了解些背景知识，我简单介绍下单点登陆
需求：如果用户已经登陆B站，则自动登陆A站
实现：用户访问A站，A站把用户跳转到B站，B站验证用户已登陆，给用户一张票，用户拿着票去找A站，A拿着票去B
那，验证成功后放用户进去
下文中将大量出现如下示例站点
A:http://www.t99y.com
B:http://passport.wangzhan.com
举例：用户访问 http://passport.wangzhan.com/login.php?url=http://www.t99y.com/a.php
B站检验A站是白名单域后，然后302跳转到
http://www.t99y.com/a.php?ticket=****** 
然后a.php用ticket参数去B站验证用户合法后，再给用户种认证cookie
偷认证信息的大概流程如下，后面会细讲。总之攻击的目的就是，拿到用户的ticket信息
0x09 How
互联网上常见的几个单点登陆场景，通行证或第三方站给的登陆凭的证使用的方式各有不同，分别该怎么偷
场景一，直接使用票据来做验证，get型csrf的token和此类似
http://t99y.com/a.php?ticket=XXXXXXXXXXXXXXXX 
(/)
(/n
ew
se
nd)
✏
(/w
p-
logi
n.p
hp
?
acti
on
=lo
go
ut&
red
ire
ct_
to=
htt
p%
3A
%2
F%
2F
dro
ps.
wo
oy
un.
org
)
2019/2/26
GET来的漏洞 | WooYun知识库
http://www.anquan.us/static/drops/web-7112.html
6/10
服务端使用此ticket去sso验证此用户身份，然后在本域种认证cookie
偷的思路：
让我们构造的页面获取到凭证后请求我们控制的服务器上的资源，这样referrer里就有ticket信息了
偷的几种方式
找能发自定义src的图片的页面去sso取票，带着ticket信息的页面会发起图片请求，图片服务是我们自己的，我们可以
读到请求中的referrer，referrer中会包含ticket信息
找能发自定义src的iframe的页面，iframe请求中的referre有ticket
找一个有js跳转漏洞的页面去取票，跳转目的地址是我们的服务，js的跳转是带上referrer的，读取此请求的referrer，
里面包含ticket
如果img和iframe的src值只允许白名单域的url，那就再找一个白名单域的302跳转漏洞来绕过白名单，302跳转可以传
递上个请求的referrer
Xss获取地址栏信息
示意图如下，如下是我画的一个chrome浏览器，地址栏里ticket参数会被包含到下面的一些元素的请求的referrer中
(/)
(/n
ew
se
nd)
✏
(/w