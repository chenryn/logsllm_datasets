对语法的使用越熟悉，
你必须了解一组单字母的命令。使
，使它有可能执行各种数据处理任
你必须学会：
这是awk 的最普遍的用法，但是也
第一章强大的编辑工具
而需要的是快速跃过
那么对 sed 和 awk 的
，本书大
，并使
字
---
## Page 23
用 ed 打开文件时，它显示了文件中的字符个数并定位在最后一行。
使用行编辑器，每次可以处理一行。要知道处于文件那一行是很重要的。当使
作有一个了解（如果你已经很熟悉ed，可以直接跳到下一节）
和稍后要学到的 sed 命令相同。你可以自由地使用ed 做实验，以便对它如何工
和 awk 的练习，
我们来看一些使用行编辑器ed的基本操作。不要担心，这只是帮助你了解 sed 
特征的扩展集).
vi（全屏幕的编辑器），那么你一定熟悉由底层的行编辑器ex(它依次是ed 中
如果使用行为编辑器，
unix行编辑器）
可以将 awk 的起源追溯到 sed 和 grep，并且经由这两个程序追溯到 ed(最初的 
awk起源于
awk 之前，先阅读它们的脚本是很有价值的。
本章将介绍 sed 和 awk 的命令行语法和脚本的基本结构。
Sed 和 awk 的区别在于它们控制所做的工作时所用的指令不同。这是一个主要
程的编辑器的。
它们有如此多的共同点，原因之一是它们都起拳于相同的行编辑器--ed。在这
如果你正要开学习 sed 和 awk,最好从了解他们的共同点入手：
了解基本操作
1
第二章
一个指南，
区别，
章中，
它们都是面向字符流的，都是从文本文件中一次一行的读取输入，并将输
它们都允许用户在脚本中指定指令。
它们都使用正则表达式进行模式匹配。
它们都使用相似的语法来调用
出直接送到标准输出端。
$ ed tes
，而且这影响了这些程序最适于处理的任务类型。
我们首先对 ed 做简短介绍，再介绍 sed 和 awk 是如何一步步形成可编
这将会为你编写脚本提供一定的感性认识。
而不是想让你相信行编辑器的奇妙。这个练习中出现的ed 命令
QQ群：
那么理解 sed 和 awk 的行定位就会更容易，如果使用过
50192241
第二章
本章内容
在集中理解 sed 和
，还使用邮件列表提供
同时使用 sed 和 awk 
使用awk
使用sed
命令行的语法
了解基本操作
---
## Page 24
pattern 是一个正则表达式，度用replacement 替代当中行中与这个正则表达
分）更有趣。ed 中的替换命令s 是：
迄今为止你只接触到了删除文件。替代文件（用文本中的一部分取代另一部
全局命令使匹配正则表达式的所有行成为特定命令的对象。
令是一个全局命令。
要删除包含这个正则表达式的所有行，
注意：
命
可以使用下面的命令：
还可以把一个正则表达式作为一个地址。
如果输入“1d”
输入“1”使第一行成为当前行，
那一行。
正则表达式组成。通过输入行号1可以转到第一行，
(address)．一个地址可以由一个行号,
要编辑的行
默认情况下
以输入打印命令p来显示当前的行。
没有提示符。
对
中
某一行或某些行的地址，
是删除当前行。与移到某行然后再对它进行编辑不同的是，
 g/regular/d
/regular/d
[address]s /pattern/replacement/flag
You might think of a regular expression
Iabel on the first box.
339
行上的单词“regular”
确信你已经理解了使用删除命令来删除整个行。它不只是删除那一
然后应用相应该的命令。要移到某一行，就要指定它的地址
，如果输入了ed 不理解命令，
一个命令只影响当前的行。要进行一项编辑工作，首先要移至想
，那么第一行会被删除。
QQ群：
放在编辑命令的前面作为编辑命令的前缀。例如,
50192241
，并在屏幕上显示它。Ed 中删除命令是d,上例
-24-
可以在命令前面加上字母g，表示该命
一个指示文件中特定位置的符号或一个
“regular”是想要匹配的字符串。这个
，为了删除包含单词“regular”的行，
它将打印一个问号作为错误消息。可
然后输入删除命令来删除
第二章
可以将标识命令
了解基本操作
---
## Page 25
却只是一带而过，不要担心，稍后还要讲到这些命令。
表示在包含字符串“regular expression”的任意行上，用“comolex”代替
地址和模式不必相同。例如：
在这个例子中，
现在，
局命令，
个地址，
这个命令影响文件中与这个地址匹配的第一行。记住，
这个命令改变了当前行上的所有的出现。必须指定地址从而使该命令不只是对
作为标志：
式匹配的字符串。例如，下面的命令中“complex"取代当前行上第一次出现的
模
“regular”
宗
有
由于没有指定地址，
"regular".
式。这些命令中有大量的内容需要掌握、然而看上去我们对这些命令的介绍
（//）来告诉 ed.
前行操作。
有找到“regular”则出现一个错误。为了寻找同一行上多次出现，必须指定g
 g/regular/s//complex/g
g/regular expression/s/regular/complex/g
g/regular/s/regular/complex/g
 s/regular/complex/g 
/regular/s/regular/complex/g
s/regular/complex/ 
这个替换应用于所有的地方，
既在地址前放置 g:
第
第二个是匹配替换命令的模式。要将它应用于所有的行，必须使用全
一行上的每个出现，不只是第一个。
地址匹配的行进行改变。结尾处的“g”是一个标志、意味着改变
意“g”的不同含义。开始处的“g”是全局命令，意味着对所有
下面的替换命令指定了一个地址：
，如果地址和模式相同，那么可以通过指定两个连续的定界符
“regular”被指定为“地址”
QQ群：
所以它只影响当前行上的第一次出现。如果在当前行上没
50192241
即所有行上的所有出现。
 同时应用相应的地址匹配替换
第
二章
了解基本操作
---
## Page 26
应用于文件的最后一行（ed 的默认当前行）。然而，在 sed 脚本中，相同的命
如果在ed 中交互式地输入这个命令，则用“complex”取代当前行上第一次出
看一下下面的替换命令：
Sed 的字符流定位对如何应用寻址有重要影响。在ed 中没有指定地址的命令只
并退出编辑器的命令。它不产生到达屏幕的输出，但由特殊命令生成的东西除
ed 不是面向字符流的，并且文件本身会发生改变。Ed 脚本必须包含保存文件
对所做的编辑工作满意时，用修改后的版本代替最初的文件。
改变。哪果确实想改变输入文件，
sed 的所有输入都会经过相应的处理，并转为标准输出。输入文件本身不发生
能交互使用。Sed 与 ed 的主要区别在于它是面向字符流的。
sed 是作为特殊目的的编辑器而创建的，用于专门执行脚本;与 ed 不同，
这个特征使ed 成为可编程的编辑器。也就是说，你可以脚本化任何手动执行的
中并将它们作为行编辑器的输入。例如，如果将一系列放到名为 ed-script 的
ed 的一个更有趣的特征是脚本化编辑工作的能力，将编辑命令放在独立的文件
它打印匹配正则表达式的所有的行。
的行：
配“box”
式作为命令行上的一个参数并将它用做要打印行的地址。如下例所示，寻找匹
编辑命令，
它表示“全局正则表达式打印”。
乡响当前行。Sed 遍历文件，每次一行，这样每一行都成为当前行，而且每一
作。
ed test < ed-script
$ grep 
g/re/p
 s/regular/complex/
label on the first box.
它只是执行一个编辑命令的“硬连接（hard-wired)”。将正则表达
’box'
QQ群：
test
50192241
。Grep 是从 ed 中提取并可用做外部程序的行
一盘使用 shel机制进行输入重定向，当个
- 26 -
第二章
默认情况下，
了解基本操作
它不
你
---
## Page 27
含处理后的信息。标准输出是指屏幕，而且一般来自这些程序的输出都输出到
可以用大至相同的方式调用 sed 和 awk。命令行讲法是：
命令行的语法
较小的改进）目前已经由posix组织作为标准。
认识到 awk 能这样使用以后，
虽然 awk 是作为可编程的编辑器设计的，但是用户全发现，awk 脚本也能完成
动，或者使一个单词成为操作对象，但是这些特征只能在交互方式下使用）。
Awk 最独特的特征之一是它分析或拆分每个输入行，并生成可用于脚本处理的
在脚本中使用程序设计语言的优点是，
一个或多个语句。
用于打印匹配“regular”的那些行。大括号（Ⅱ）用于包围应用于同一地址的
是延续了寻址的概念，例如：
awk 是作为可编程的编辑器而开发的，
看到一部分这样的命令。
sed 还具有一些支持编写脚本的额外命令。在第六章“高级 sed 命令”中可以
出发送到标准输出。如果指定文件名filename，输入就取自那个文件。输出包
几乎和所有的unix程序一样，sed和awk 都可以从标准输入中取得输入并将输
注意：
个示例的命令和ed 中如下所示的全局命令结果相同。
令应用于所有的行。也就是说，sed 命令是隐式的全局命令。在 sed 中，上一
辑
立的单词（一个编辑器，
器所做的事情。Awk 提供了表达式、
美。它提供了仿效C语言的程序设计语言，例如，print 语句取代了p命令;但
解释编辑命令的脚本。Awk 与 sed 不同的地址是它废弃了行编辑器的命令
 command [options] script filename
/regular/ { print }
g/regular/s//complex/
限制受命令影响的行数。
的。在ed 中，
理解 ed 中的当前行寻址与 sed 中全局行寻址之间的区别是很重要 
QQ群：
使用寻址扩大受命令影响的行数;在 sed 中，使用寻址
例如vi,也识别单词，
50192241
，作者们修订了这种语言，创建了 nawk，
、条件语句、循环和其他程序设计结构。
同 sed 一样,
它提供了更多的方式来控制可编程的编
允许一个单词一个单词地移
它也是面向字符流的，
第二章
了解基本操作
为编写
并
庞
---
## Page 28
果没有匹配，
当读取输入的每行时，
分隔的正则表达式。过程指定一个或多个将被执行的动作。
记住指令执行的顺序以及每个指令如何改变输入行。
入行，
图 2-1 展示了 sed 和 awk 的基本操作。
sed 和 awk 一个共同的选项是-f 选项，
shelI解释的空格或任意字符（例如$和*），那么它必须用单引号括起。
scipt 指定了要执行的指令。
以在附录二“awk的快速参考”
每个命令的 options 是不同的。我们将在以后讨论这些选项(sed 命令行选项的
到向程序提供输入的同一个文件。
在 sed 和 awk 中，
行上指定，
脚本就是告诉程序做什么的地方。至少要包含一行指令。短的脚本可以在命令
脚本化
完
那里。输出也可被送到一个文件。
图
用
彤
图 2-1：sed 和 awk 的工作方式
 sed:
寸着脚本大小的增长，将它放置在文件中比较方便。因此，可以按如下方式调
整列表可以在附录一“sed 的快速参考”中找到，awk 命令选项的完整列表可
 sed -f scriptfile inputfile
长的脚本通常放在容易被修改和测式的文件中。在编写脚本时，要
，这个过程被忽略并读取下一个指令。如果有
每个指令都包括两个部分：模式和过程。
QQ群：
，程序读取脚本中的第一个指令并检测当前行的模式。如
50192241
如果在命令行上 script，
’中找到）。
，例如 shel中的I/0重定向，但是不允许送
-28
。每个程序每次从输入文件中读取一个输
这个选项允许你指定脚本文件的名字。
.
第二章
有一个不匹配，那么执
假如它包含有可以由
，模式是由斜杠（/)
了解基本操作
8
---
## Page 29
为指令。当只有一个指令时，sed 可以自己做决定。看一些示例。
只有在命令行上给出多个指令时才需要用-e 选项。它告诉 sed 将一下参数解释
可以在命令行上指定简单的编辑命令。
指定简单的指令 
并提供这个文件的名字。
调用 sed 有两种方法：在命令行上指定编辑指令，或者将它们放到一个文件中
使用 sed
如果愿意，可以在你的系统上创建这个文件或者创建一个类似的文件。因为本
址的列表。
在接下来的一节中，示例中使用了样本的文件，名为list。它包含了名字和地
邮件列表的示例
在下面的一节中，我们将看到几个处理邮件列表的脚本示例。
在 awk中，过程由程序设计语句和函数组成。过程必须用大括号括起。
使用的那些编辑命令组成。大部分命令由单个字母组成。
行。另一方面，awk不自动输出行，
当所有可用指令被解释并应用于单个行后，
配的第一条指令。
行过程中指定的一个或多个动作。读取所有的指令，而不只是读取与输入行匹
章
在 sed 和 awk 中过程的内容有很大不同。
中多数示例都很短并且是可交互的，
Alice Ford, 22 East Broadway,
$ sed ’ s/MA/Massachusetts/'
Sal Carpenter,
Orville Thomas, 11345 0ak Bridge Road, Tulsa 0K
Alice Ford, 22 East Broadway,
John Daggett, 341 King Road,
$ cat list 
John Daggett, 341 King Road, Plymouth Massachusetts
Amy Wilde, 334 Bayshore Pkwy,
Hubert Sims, 328A Brook Road,
Eric Adams, 20 Post Road, Sudbury MA 
Terry Kalkas, 402 Lans Road, Beaver Falls PA
。如下图所示：
QQ群：
 73 6th Street,
50192241
file
，脚本中的指令控制 awk 最终所做的事情。
，Plymouth MA 
 Richmond VA
，你可以从键盘上输入它们并确认最终结
Boston MA
Mountain View CA
 Richmond VA
list
在 sed 中，
 sed 输出该行并循环处理每个输入
过程由类似于行编辑器中
第二章
了解基本操作
---
## Page 30