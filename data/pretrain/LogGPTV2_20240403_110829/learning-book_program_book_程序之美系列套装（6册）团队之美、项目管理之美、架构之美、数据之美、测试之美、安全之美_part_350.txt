巧、准则、简单和乐趣。
当然，技巧和准则是必需的，但并不是本章最感兴趣的部分，因为
它们可以使用一些比较客观和可靠的方法来度量。
我们感兴趣的是简单和乐趣。在一个软件开发项目中评价简单和乐
趣的唯一可能的方法是使用纯美学的标准。我们能用任何理性的分
析来讨论99.9999%的简单或者乐趣的成熟度模型吗？当然不能。这
样做看起来就很滑稽。
不过Marick很看重简单和乐趣，他多次在会议的主题发言中谈到它
们，还写了文章进行讨论。但是，究竞应当怎样评价它们呢？来自
暂学和心理学领域的批判工具在这个方面似乎很有前景。
在从20世纪40年代到60年代的文学批判中，新批判主义（New
Criticism）是一个相当有影响的运动。尽管在今天它已经不是那么有
名了，但我还是愿意以新批判主义为例来说明一—用于决定作品的
美学价值的标准很容易描述：如果一件作品具有协调性、复杂性和
专注性，那么它是有价值的。简单性也应当这样进行评价。
项目的每个方面都应当简单。从编写代码到提交代码，到连续运行
的单元测试，到构建和部署测试环境和产品环境，所有的工具和过
程都应当随手可用，而不需要关注于不相干的细节。因此，简单性
应当贯穿于项目始终。如果不是这样，那么项目的价值就会受到损
害。
复杂性是必需的，但是必须得到有效管理。高效的软件团队（不论
是否敏捷团队）使用许多抽象层次的工具来管理复杂性。现有的一
些工具已经使大型代码库的复杂性变得易于管理了。有工具来运行
测试，有工具来部署环境，甚至有更多的工具来管理其他的工具以
使得更大型的操作尽可能简单。复杂性是一个给定条件；对复杂性
进行简单管理的能力是一个高效团队的标志。如果无法管理复杂
性，那么项目的价值也会打折扣。
1997
---
## Page 1999
专注性存在于软件项目的各个方面。当我测试软件（或者极其偶尔
的情况下开发软件）的时候，需要极其关注于有效的工作之上。即
使一点小小的打扰也可能会导致关键性的失败。从另一方面来看，
优秀软件的用户体验也应当是专注的体验。软件创建了易用性，它
提供一个不会被缺陷所妨碍的专注体验。如果专注性被（开发过程
和用户体验中的）打扰所冲淡，那么项目价值也降低了。
评价乐趣需要使用不同的工具。我认为乐趣可以使用一些著名的心
理学方法来评价。尽管这个领域比较窄，但是这些专注于乐趣之上
的心理学工作也是很重要的。《纽约时报》1998年的一篇文章就专
门提到了这个问题（参见本章末的“参考文献”）。
但是正如Marick所指出的，在软件开发项目中谈论乐趣通常是很困
滩的。我们这些软件工人成关呆在这儿的目的并不只是为了快乐。
我们需要有产品！真的！软件项目不包括乐趣！
但也许也应该有一些。就像《Times》上的文章说的：
在过去的30年中，心理学杂志发表了45000篇关于抑郁的文章，但
是有关快乐的只有400篇.....事实并不总是这样的。当心理学作为一
个专业开始发展的时候，它有三个目标：识别关赋，医治疾病，以
及帮助人们生活得更好更快乐。然而，在过去的半个世纪中，心理
学的注意力几乎完全放在病理学之上，将这个围绕疾病而构建的关
于药理的科学作为自已的模型。
软件开发领域中的一些工作关注于这项工作的负面影响。例如，想
想有多少时间、精力和金钱被投入到缺陷跟踪上面。跟踪缺陷的预
期回报是提高根据报告和修复的缺陷的特点来进行趋势分析的能力
然而，就我所知，没有人在这上面真止成功过。
如果不是把所有的时间和金钱都花在缺陷跟踪上，而是放在防正或
修复缺陷上面，又会怎么样呢？软件开发会变得有趣得多。
当然，现在的一些团队并不需要跟踪缺陷，因为他们只是在发现缺
陷的时候简单地修复它们。这些团队中的软件缺陷生命期很短。尽
管与那些在不太敏捷的团队中工作的人比起来，在这些团队中工作
的人在我看来显得更快乐一些，但我并不知道这些团队有什么样的
心理学特征。我鼓励有兴趣的读者把它建立起来。
软件测试运动
1998
---
## Page 2000
如果我们承认软件开发在本质上是一个创新过程，它与制造学或工
程学没有任何关系，我们就会得到更多有趣的结论。例如，当我们
可以自由地怀疑实践的时候，我们也能够自由地改变实践。
好的软件测试员不去验证函数的功能。他们的工具替他们完成这些
工作。好的软件测试员根据不同的目的对软件的适合性作美学判
断，正如一本书的编辑或者一个乐队的领队或者一出戏的导演一
样。好的软件测试员向人们提供关于软件价值的关键信息，这些人
关心软件价值，他们的角色类似于书的审阅人或影评人。
好的测试员针对软件开发本身进行关于整个实现方法的适合性的美
学判断。让我们想想测试网页应用程序的Watir和Selenium工具的起
源。它们是成功的持续项目的极佳例子。这些项目开始于当时可怜
的软件测试实践，并且越来越多地定义了软件测试的今大和未来。
在20世纪90年代晚期几乎没有免费的软件测试工具，特别是用户界
面测试和基于浏览器的测试。而当时的专有工具在真正的UI上运行
时也会（而且继续会）经常性地失败。JamesBach的文章"Test
Automation Snake Oil"（1999）和BretPettichord的文章"Hey
Vendors,GiveUsRealScriptingLanguages"（2001）很好地描绘了当时
的情形（参见本章末的“参考文献”）。人们经常不高兴。
Pettichord曾与BrianMarick一起教一门叫做"ScriptingforTesters"的课
程，他们使用ChrisMorris用Ruby写的一个简单的名叫IEC的浏览器
控制器。我试过IEC儿次，总是很容易前溃。但是在PaulRogers花了
ApplicationTestingInRuby）之后，它一下子变成了一个能够真正胜
任这个工作的真正的工具。我非常自豪能成为Watir的第一批真正用
户之一（也许是第一个，我也不确定）。至少有两次我非常简单并
且成功地使用watir诊断了商业测试自动化工具的失败。
在Watir诞生的同时，JasonHuggins也在ThoughtWorks公司（一家著名
的芝加哥的软件咨询公司）开发一个内部的时间和花费项目。他想
测试代码，但是没有合适的工具。于是他想出了一个巧妙的方法：
在iframe中打开浏览器，然后向页面注入JavaScript来生成页面元
素。ThoughtWorks同意把Jason的方法作为开源软件发布，从而诞生
了Selenium项目。BretPettichord也参与了这项工作。
最后，WardCunningham（最为知名的也许是他发明了wiki）发明了
一个简单而精巧的工具Fit，为商业用户提供了一种指定代码的内部
1999
---
## Page 2001
函数的方法。多数时候这些商业用户都是测试员，或者至少获得了
专业测试员的协助。他们通过Fit告诉软件应当做什么。
软件开发辅助工具的发展速度总是远远超过软件测试辅助工具。但
是通过反复检查被测试应用程序的正确功能，Watir、Selenium和Fit
充许专业的软件测试员跟上发展的脚步。软件测试的技艺现在可以
与软件开发的技艺同步前进。所有这些工具都在飞速发展，并且继
续吸引新的用户和新的维护者。
敏捷测试之美
Pettichord还写了另外一篇有名的文章——"FourSchoolsofSoftware
Testing"。Watir、Selenium和Fit的存在带来了被广泛认可的第五个领
域：“敏捷测试”（AgileTesting）。它一直提倡高水平的测试自动
化，并认可有经验的测试员所做的手动程序检查的价值。
优秀的测试自动化的前景总是在于将测试员从反复检查正确功能的
单调工作中解放出来。但是如果对正确功能的反复检查已经自动化
了，那么软件测试员又该做些什么呢？
首先，测试员可以成为设计和实现系统测试框架的专家。这项工作
包括编程，但是，对这样的系统测试框架进行编程与应用程序开发
是完全不一样的。编写一个漂亮的测试自动化工具需要对被测系统
的理解，需要对可能将要编写的测试的理解，需要知道哪些测试对
项目最有价值，还需要知道哪些测试最可能在将来随着被测软件的
变化而具有可维护性。这是一件吸引人的并且有回报的工作，也是
我自已职业生涯的一个主要部分。
一个敏捷测试员同时也是一个美学批评家。通过使用测试自动化检
查应用程序的死角，测试员得以有时间用批判的眼光来评价新功
能，评价用户场景和总体目标的适合性，也许还能评价软件开发过
程本身。
QA不是魔鬼
有一些软件测试员强烈坚持在工作中使用术语质量保证（quality
assurance）。这些测试员不想与“质量警察"有任何关联，例如维护
移交过程和质量关口，以及其他来自于生产车间和装配线的那些阻
2000
---
## Page 2002
碍性的工作。不过，历史上这些工作都是与术语软件质量保证
（softwarequality assurance）联系在一起的。
但是，测试员本来就是好的流程的促进者。例如，测试员有时候是
团队里唯一能准确发现（至少在发布之前）软件需求与实现之间不
吻合的人。测试员通常也是团队里最厂泛了解软件开发实践的人。
测试员通常是团队里对项目的总体状态最了解的人。
对于优秀的电影导演、优秀的乐队领队和优秀的批评家来说，他们
的优秀在于他们被同事和观众所欣赏。传统的软件质量保证工作中
的经典错误在于：那些人认为自己是软件开发项目中的质量仲裁
者，而不需要来自于自己工作的团队或最终需要软件的用户的任何
支持。在一个美学软件开发过程中，QA的工作是引导软件开发过程
以提高成功率，以及建设性地批判软件开发过程而不是阻碍这个过
程并成为拖后腿的人。
在一个敏捷团队中，工作流程是相当有弹性的。敏捷团队经常回顾
过去的工作，每一次回顾对于团队来说都是一次改变当前流程的机
会。经过一年、两年或三年的敏捷回顾之后，一个团队的工作流程
将变得独一无二，并且因为拥有有经验的质量保证人员，团队的工
作流程将比刚开始的时候高效得多。
美是内在
思考、谈论和写作软件开发流程的人喜欢用比拟来描述这项工作。
他们说：“软件开发就像..""当我们进行软件开发的时候，就像我
们在做..”
本书没有这样的类比。非常清楚的是：开发软件不是像一个表演艺
术家的工作；开发软件就是一个表演艺术家的工作。评估软件质量
不是像评估一个艺术表演；它就是评估一个艺术表演。这不是理
论。这实际上就是高效率软件并发团队并展工作的方式。如果承认
这一点，那么我们就能极大地改善自已的工作。
我非常希望，软件开发群体作为一个整体（特别是软件测试人
员），不仅认可而且庆祝创建软件这个本质上的美学过程。不管我
们意识到与否，这是我们能够谈论美丽测试的根本原因。
参考文献
2001
---
## Page 2003
Bach,J.1999."Test Automation Snake
Oil."http://www.satisfice.com/articles/test_autom ation_snake_oil.pdf
Hall,T.1998."Seeking a Focus on Joy In Field of Psychology."New York
Times,April 28,Science
section.http://www.nytimes.com/1998/04/28/science/seeking-a-focus-on
joy-in-field-of-psychology.html.
Marick,B.2007."Six years later: What the Agile Manifesto left
agile-manifesto-left-out/.
Marick,B.2008."AgileDevelopmentPractices
development-practices-keynote-text/.
Pettichord,B.2001."Hey Vendors,Give Us Real Scripting
Languages."http://www.stickyminds.com/sitewide.asp?Objectld=2326&
ObjectType=COL&Function=edetail.
Pettichord,B.2007."Schools ofSoftware
Testing."http://www.io.com/%7Ewazmo/papers/four_schools.pdf.
第14章测试驱动开发：驾驭美之新标准
Jennitta Andrea
比例与平衡之美
美的定义是主观的和不断变化的，随环境的不同而存在差异。纵观
历史，不同组织和团队在一整套复杂因素如经济、地理、文化等的