# 【技术分享】智能家居DIY——如何通过逆向RF协议自制一个智能遥控器
|
##### 译文声明
本文是翻译文章，文章来源：nickwhyte.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[紫曦归来](http://bobao.360.cn/member/contribute?uid=2937531371)
预估稿费：260RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
随着家庭生活品质的提高，家用电器设备也越来越多，遥控器逐渐成为了家中不小的负担。厂家本身的想法是配备了遥控器，日常使用这些家电设备更加方便，但是实际却事与愿违，因为生活水平的提高，家中电器及数码设备提供了一堆的遥控器。相信大家都经历过，满屋找遥控器的尴尬。来自澳大利亚的软件工程师尼克·怀特（Nick
Whyte）通过逆向遥控器的RF协议，最终DIY了一个可以操控家中所有百叶窗的遥控器。下面小编就带大家看看他是如何进行智能家居DIY的。
我对集成DIY智能家居非常感兴趣，也曾经通过黑进部分家用电器的内部系统，来进行家庭自动化的DIY改造。几个月前，我父亲购买了多个瑞克斯（RAEX）品牌433兆赫射频的电动百叶窗，以取代家里的手动窗帘。
图1：瑞克斯牌433兆赫射频电动百叶窗
注：购买的百叶窗在Spotlight上以“Motion Motorized Roller Blind”的名义销售
百叶窗给这个家带来了非同凡响的感受，尤其是对于比较懒惰的我来说，不用手动开关窗帘，这一点大为省事。但是，遥控百叶窗需要购买瑞克斯品牌遥控器。瑞克斯公司生产了不同型号的遥控器，我挑选了以下两款遥控器：
R型遥控器 （YRL2016）
X型遥控器（YR3144）
每一个房间里都放一个遥控器的做法不可行，因为遥控器的部分功能用不上，购买过多的遥控器就显得非常浪费了。事实上，不同房间的百叶窗可以被编程到同一个遥控器上使用。因此，购买多个遥控器就没有必要了。
解决这一问题就是使用名为“ RM Pro”的App。这款App，可允许用户通过智能手机来操控家电等设备。
但是，在我看来，这个App运行起来非常缓慢，完全不适合家庭自动化系统。我希望家里的百叶窗可以通过苹果智能家居系统（Apple Homekit）进行操控。
如果想要遥控到这些百叶窗，我需要做以下两件事中的任意一件：
1、逆向出RM Pro的应用程序（App）与RM Pro之间是如何实现通信的。
2、逆向出遥控器操控百叶窗的RF协议。
首先，我尝试了第一种选项，但是我无法弄清楚iPhone和集线器之间是如何进行通信的，所以我选择了放弃。此后，我开始逆向RF协议。
我在Ebay网站上购进了一套433兆赫兹Arduino开源电子原型平台的发射器和接收器。以防发射器和接收器之间链接断掉，大家也可以尝试在Ebay上购买一套433兆赫兹Arduino开源电子原型平台的发射器和接收器的链接工具。
**初步研究结果**
我在Google上反复搜索RAEX正在使用的协议的技术指标，但没有任何结果：
我通过FCC认证查询网站和专利查询网站找不到协议的任何技术指标。
我向RM Pro发送电子邮件想要获取其技术指标，但依旧毫无所获。
我向瑞克斯公司发送电子邮件想要获取其技术指标，他们表示不会在没有保密协议的情况下给我提供产品技术指标。
我发现RFXTRX可以在百叶窗处于T4模式和Outlook Motion模式下操控百叶窗。
我拆开了一个百叶窗遥控器，发现遥控器内部还装有微控制器（micro-controller）。但我找不到关于通用RF协议如何进行编码的相关说明文档。
我发现似乎可以通过I2C工程远程固件上的ROM芯片逆向出遥控器的固件。
**获取信号数据**
在收到网购的Arduino开源电子原型平台的发射器和接收器后，我将接收器与Arduino开源电子原型平台相连接，并开始尝试进行信号数据搜索。我反复进行了多次尝试，最后我找到了一条可以获取数据的路径。
获取了足够的信号数据信息后，我开始进行数据分析。我发现这些数据颇难理解，我甚至不能确定这些数据的准确性。
我进行了延伸学习，阅读了如何进行RF
逆向的相关书籍和文档。这些书本里介绍了一种方法，就是将接收器插入电脑的麦克风端口来捕捉信号，之后通过Audacity音频软件进行分析。（如下图所示）我想，何不尝试一下呢？
这一办法帮助我搜集了许多的信号数据。我搜集到了4个不同的R型遥控器和2个不同的X型遥控器的信号数据。意外的是，我还搜集到了与Broadlink RM
Pro（B型）配对的8种不同设备的信号数据。
通过分析这些信号数据，我可以得出以下结论：
1、 设备之间传输的信号没有使用滚动码（rolling code）。因此，我可以通过重播捕获的信号，使百叶窗进行重复动作。
2、 设备之间传输的信号要重复至少3遍（根据所使用的遥控器类型不同而有所区别）。
缩小信号的波形，我们可以看到捕获到的信号的不同部分。下图展示了遥控器与百叶窗配对状态下1号遥控器，在1频道时的信号波形：
放大信号波形：
在缩放图像中，不难看出信号首先以振荡0101 AGC模式（oscillating 0101 AGC
pattern）进行传输，此后以双宽度前导码模式传输，再之后以较长的header模式传输，此后转为data模式。
R型遥控器的传输信号中，Header和data模式要重复三边，AGC模式仅在开头出现过一次。
纯粹研究这些信号并不会有太大的帮助。我需要将这些信号数字化，并对其进行分析，找出不同遥控器和频道之间信号传输模式的差异。
**解码信号波形**
我们需要确定信号波形是如何编码的。这一类硬件应用通常会使用下列方法之一：
**曼彻斯特编码（又称相位编码）**
**三态/三位编码，附加信息** ****
**PWM编码** **** ****
原始数据？high long = 11，high short = 1，low long = 00，low short = 0？
通过一些研究，我能够确定其最有可能使用的是曼彻斯特编码。这一点需要我们谨记！
**信号数字化**
我开始按照上述原始方案处理信号（即使我认为其采用了曼彻斯特编码）。这样做的理由是，如果编码方式并不是曼彻斯特编码，我还可以尝试通过另一种方案解码。（另外，手抄原始信号的方式总比我通过思考进行曼彻斯特解码更容易）。
我将每次捕获的信号写入Google
Sheets电子表格。写下每个频道的每次动作大概需要5分钟时间，每个遥控器都有6个频道。我开始认为这将需要一段时间才能真正得到足够的数据进行分析。（考虑到我需要对160条捕获信号进行数字化）
在从2个遥控器中收集8个不同频道的所有动作后，我选择了暂停。我获得了32条捕获信号用于分析。从这些数据中，我能够推断出一些关于原始bits的特点：
不同频道会有一些bits改变。
不同遥控器会有一些bits改变。
对于不同频道/遥控器/动作组合，有些bits似乎会随机变化。
我仍然需要更多的数据，但这也使得我必须手动解码大量捕获信号。为了能够在任意地点实现操作，我还需要一个脚本来帮助处理这些通过Audacity软件捕获的WAV文件。我编写了一个脚本，使其可以通过原始编码方式检测标头和提取数据（就是我一直手动在做的）。该脚本生成了JSON格式的输出文件，我可以添加额外的元数据，并反复检查捕获信号的波形：
    [
      {
        "filename": "/Users/nickw/Dropbox/RF_Blinds/Export_Audio2/tracks2/R1_CH1.wav",
        "captures": [
          {
            "data": "01100101100110011001100101101001011010010110011010011010101010101010101010011001101010101010101010101010101",
            "header_pos": 15751,
            "preamble_pos": 15071
          },
          {
            "data": "01100101100110011001100101101001011010010110011010100110101010101001101010011001101010101010101010101010101",
            "header_pos": 46307,
            "preamble_pos": 45628
          },
          {
            "data": "01100101100110011001100101101001011010010110011010010110101010101010011010011001101010101010101010101010101",
            "header_pos": 73514,
            "preamble_pos": 72836
          },
          {