```  
状态信息  
```  
[root@db-172-16-3-150 sda1+sdc3]# cat /proc/flashcache/sda1+sdc3/flashcache_stats   
reads=2477 writes=6   
read_hits=0 read_hit_percent=0 write_hits=0 write_hit_percent=0 dirty_write_hits=0 dirty_write_hit_percent=0 replacement=0 write_replacement=0 write_invalidates=0 read_invalidates=0 pending_enqueues=0 pending_inval=0 metadata_dirties=0 metadata_cleans=0 metadata_batch=0 metadata_ssd_writes=0 cleanings=0 fallow_cleanings=0 no_room=0 front_merge=0 back_merge=0 disk_reads=2477 disk_writes=6 ssd_reads=0 ssd_writes=0 uncached_reads=2477 uncached_writes=6 uncached_IO_requeue=0 uncached_sequential_reads=0 uncached_sequential_writes=0 pid_adds=0 pid_dels=0 pid_drops=0 pid_expiry=0  
```  
8\. 红帽或centos的自启动脚本, 脚本内容见 https://github.com/facebook/flashcache/blob/master/utils/flashcache  
用于开机时自动加载flashcache模块, 自动创建cache dev, 自动挂载.   
关机时自动remove device mapper block dev.  (注意关机时如果没有remove cache dev, 可能导致关机失败.)  
需要在脚本中配置几个变量: SSD_DISK, BACKEND_DISK, CACHEDEV_NAME, MOUNTPOINT, FLASHCACHE_NAME  
但是这个目前仅支持1个cachedev的自动加载和自动卸载.  
```  
Using Flashcache sysVinit script (Redhat based systems):  
=======================================================  
Kindly note that, this sections only applies to the Redhat based systems. Use  
'utils/flashcache' from the repository as the sysvinit script.  
This script is to load, unload and get statistics of an existing flashcache   
writeback cache volume. It helps in loading the already created cachedev during   
system boot and removes the flashcache volume before system halt happens.  
This script is necessary, because, when a flashcache volume is not removed   
before the system halt, kernel panic occurs.  
注意关机时如果没有remove cache dev, 可能导致关机失败.  
Configuring the script using chkconfig:  
1. Copy 'utils/flashcache' from the repo to '/etc/init.d/flashcache'  
2. Make sure this file has execute permissions,  
   'sudo chmod +x /etc/init.d/flashcache'.  
3. Edit this file and specify the values for the following variables  
   SSD_DISK, BACKEND_DISK, CACHEDEV_NAME, MOUNTPOINT, FLASHCACHE_NAME  
4. Modify the headers in the file if necessary.  
   By default, it starts in runlevel 3, with start-stop priority 90-10  
5. Register this file using chkconfig  
   'chkconfig --add /etc/init.d/flashcache'  
```  
例如 :   
```  
[root@db-172-16-3-150 ~]# cp /opt/soft_bak/flashcache/flashcache-master/utils/flashcache /etc/init.d/  
[root@db-172-16-3-150 ~]# chmod 755 /etc/init.d/flashcache   
[root@db-172-16-3-150 ~]# vi /etc/init.d/flashcache  
SSD_DISK=/dev/sda1  
BACKEND_DISK=/dev/sdc3  
CACHEDEV_NAME=cachedev1  
MOUNTPOINT=/opt  
FLASHCACHE_NAME=sda1+sdc3  
[root@db-172-16-3-150 ~]# service flashcache start  
Starting Flashcache...  
[root@db-172-16-3-150 ~]# df -h  
/dev/mapper/cachedev1  
                       98G   51G   42G  55% /opt  
[root@db-172-16-3-150 ~]# service flashcache status  
Flashcache status: loaded  
0 207254565 flashcache stats:   
        reads(1598), writes(1)  
        read hits(0), read hit percent(0)  
        write hits(0) write hit percent(0)  
        dirty write hits(0) dirty write hit percent(0)  
        replacement(0), write replacement(0)  
        write invalidates(0), read invalidates(0)  
        pending enqueues(0), pending inval(0)  
        metadata dirties(0), metadata cleans(0)  
        metadata batch(0) metadata ssd writes(0)  
        cleanings(0) fallow cleanings(0)  
        no room(0) front merge(0) back merge(0)  
        force_clean_block(0)  
        disk reads(1598), disk writes(1) ssd reads(0) ssd writes(0)  
        uncached reads(1598), uncached writes(1), uncached IO requeue(0)  
        disk read errors(0), disk write errors(0) ssd read errors(0) ssd write errors(0)  
        uncached sequential reads(0), uncached sequential writes(0)  
        pid_adds(0), pid_dels(0), pid_drops(0) pid_expiry(0)  
        lru hot blocks(6144), lru warm blocks(6144)  
        lru promotions(0), lru demotions(0)  
[root@db-172-16-3-150 ~]# service flashcache stop  
dev.flashcache.sda1+sdc3.fast_remove = 0  
Flushing flashcache: Flushes to /dev/sdc3  
```  
9\. flashcache 模块参数设置, 需要针对ssd devname+disk devname配置  :   
```  
FlashCache Sysctls :  
==================  
Flashcache sysctls operate on a per-cache device basis. A couple of examples  
first.  
Sysctls for a writearound or writethrough mode cache :  
cache device /dev/ram3, disk device /dev/ram4  
dev.flashcache.ram3+ram4.cache_all = 1  
dev.flashcache.ram3+ram4.zero_stats = 0  
dev.flashcache.ram3+ram4.reclaim_policy = 0  
dev.flashcache.ram3+ram4.pid_expiry_secs = 60  
dev.flashcache.ram3+ram4.max_pids = 100  
dev.flashcache.ram3+ram4.do_pid_expiry = 0  
dev.flashcache.ram3+ram4.io_latency_hist = 0  
dev.flashcache.ram3+ram4.skip_seq_thresh_kb = 0  
Sysctls for a writeback mode cache :  
cache device /dev/sdb, disk device /dev/cciss/c0d2  
dev.flashcache.sdb+c0d2.fallow_delay = 900  
dev.flashcache.sdb+c0d2.fallow_clean_speed = 2  
dev.flashcache.sdb+c0d2.cache_all = 1  
dev.flashcache.sdb+c0d2.fast_remove = 0  
dev.flashcache.sdb+c0d2.zero_stats = 0  
dev.flashcache.sdb+c0d2.reclaim_policy = 0  
dev.flashcache.sdb+c0d2.pid_expiry_secs = 60  
dev.flashcache.sdb+c0d2.max_pids = 100  
dev.flashcache.sdb+c0d2.do_pid_expiry = 0  
dev.flashcache.sdb+c0d2.max_clean_ios_set = 2  
dev.flashcache.sdb+c0d2.max_clean_ios_total = 4  
dev.flashcache.sdb+c0d2.dirty_thresh_pct = 20  
dev.flashcache.sdb+c0d2.stop_sync = 0  
dev.flashcache.sdb+c0d2.do_sync = 0  
dev.flashcache.sdb+c0d2.io_latency_hist = 0  
dev.flashcache.sdb+c0d2.skip_seq_thresh_kb = 0  
Sysctls common to all cache modes :  
dev.flashcache..cache_all:  
	Global caching mode to cache everything or cache nothing.  
	See section on Caching Controls. Defaults to "cache everything". 时候缓存所有或啥都不缓存( 另外可以通过进程ID白名单和黑名单控制) , 如果要用白名单, cache_all=0, 如果要用黑名单, 那就设置为cache_all=1;  
dev.flashcache..zero_stats:  
	Zero stats (once).  
dev.flashcache..reclaim_policy: 缓存回收策略, 可以动态调整.  
	FIFO (0) vs LRU (1). Defaults to FIFO. Can be switched at   
	runtime.  
dev.flashcache..io_latency_hist:  是否统计IO延迟柱状图, 对clocksource慢的机器有比较大的性能影响.   
	Compute IO latencies and plot these out on a histogram.  
	The scale is 250 usecs. This is disabled by default since   
	internally flashcache uses gettimeofday() to compute latency  
	and this can get expensive depending on the clocksource used.  
	Setting this to 1 enables computation of IO latencies.  
	The IO latency histogram is appended to 'dmsetup status'.  
```  
以下不建议调整  
```  
(There is little reason to tune these)  
dev.flashcache..max_pids:  
	Maximum number of pids in the white/black lists.  
dev.flashcache..do_pid_expiry:  
	Enable expiry on the list of pids in the white/black lists.  
dev.flashcache..pid_expiry_secs:  
	Set the expiry on the pid white/black lists.  
dev.flashcache..skip_seq_thresh_kb:  有点类似ZFS在ARC的设计, 跳过连续IO扫描的CACHE, 例如数据库大表的全表扫描, 可能不推荐加载到CACHE中. 但是因为是后触发的, 所以必须先达到这么大的IO量才会关闭后续的写入CACHE, 也就是说连续IO的开始部分(触发skip前)的数据还是写入SSD了. 结合cache dev所对应的机械盘的连续IO能力来判断, 例如100MB.  
	Skip (don't cache) sequential IO larger than this number (in kb).  
	0 (default) means cache all IO, both sequential and random.  
	Sequential IO can only be determined 'after the fact', so  
	this much of each sequential I/O will be cached before we skip   
	the rest.  Does not affect searching for IO in an existing cache.  
```  
以下只有writeback模式才允许的设置 :   
```  
Sysctls for writeback mode only :  
dev.flashcache..fallow_delay = 900   多少秒之后, 未有读写的缓存脏数据会写入磁盘.  
	In seconds. Clean dirty blocks that have been "idle" (not   
	read or written) for fallow_delay seconds. Default is 15  
	minutes.    
	Setting this to 0 disables idle cleaning completely.  
dev.flashcache..fallow_clean_speed = 2  
	The maximum number of "fallow clean" disk writes per set   
	per second. Defaults to 2.  
dev.flashcache..fast_remove = 0  是否在remove device mapper设备前将脏数据写入对应的磁盘.  
	Don't sync dirty blocks when removing cache. On a reload  
	both DIRTY and CLEAN blocks persist in the cache. This   
	option can be used to do a quick cache remove.   
	CAUTION: The cache still has uncommitted (to disk) dirty  
	blocks after a fast_remove.  
dev.flashcache..dirty_thresh_pct = 20   允许的脏数据的比例.  
	Flashcache will attempt to keep the dirty blocks in each set   
	under this %. A lower dirty threshold increases disk writes,   
	and reduces block overwrites, but increases the blocks  
	available for read caching.  
dev.flashcache..stop_sync = 0    停止sync.  
	Stop the sync in progress.  
dev.flashcache..do_sync = 0    执行sync, 将脏数据写入磁盘.  
	Schedule cleaning of all dirty blocks in the cache.   
```  
以下不建议调整  :   
```  
(There is little reason to tune these)  
dev.flashcache..max_clean_ios_set = 2  
	Maximum writes that can be issues per set when cleaning  
	blocks.  
dev.flashcache..max_clean_ios_total = 4  
	Maximum writes that can be issued when syncing all blocks.  
```  
10\. 直接使用dmsetup管理cache device. 可以直接使用flashcache_xxx来封装管理, 所以dmsetup可以不必使用.  
```  
Using dmsetup to create and load flashcache volumes :  
===================================================  
Few users will need to use dmsetup natively to create and load   
flashcache volumes. This section covers that.  
dmsetup create device_name table_file  
where  
device_name: name of the flashcache device being created or loaded.  
table_file : other cache args (format below). If this is omitted, dmsetup   
	     attempts to read this from stdin.  
table_file format :  
0  flashcache       [size of cache in sectors] [cache set size]  
cache mode:  
	   1: Write Back  
	   2: Write Through  
	   3: Write Around  
flashcache cmd:   
	   1: load existing cache  
	   2: create cache  
	   3: force create cache (overwriting existing cache). USE WITH CAUTION  
blksize in sectors:  
	   4KB (8 sectors, PAGE_SIZE) is the right choice for most applications.  
	   See note on block size selection below.  
	   Unused (can be omitted) for cache loads.  
size of cache in sectors:  
	   Optional. if size is not specified, the entire ssd device is used as  
	   cache. Needs to be a power of 2.  
	   Unused (can be omitted) for cache loads.  
cache set size:  
	   Optional. The default set size is 512, which works well for most   
	   applications. Little reason to change this. Needs to be a  
	   power of 2.  
	   Unused (can be omitted) for cache loads.  
Example :  
echo 0 `blockdev --getsize /dev/cciss/c0d1p2` flashcache /dev/cciss/c0d1p2 /dev/fioa2 cachedev 1 2 8 522000000 | dmsetup create cachedev  
This creates a writeback cache device called "cachedev" (/dev/mapper/cachedev)  
with a 4KB blocksize to cache /dev/cciss/c0d1p2 on /dev/fioa2.  
The size of the cache is 522000000 sectors.  
(TODO : Change loading of the cache happen via "dmsetup load" instead  
of "dmsetup create").  
```  
11\. 缓存的控制 , 白名单和黑名单.  
```  
Caching Controls  
================  
Flashcache can be put in one of 2 modes - Cache Everything or   
Cache Nothing (dev.flashcache.cache_all). The defaults is to "cache  
everything".  
These 2 modes have a blacklist and a whitelist.  
The tgid (thread group id) for a group of pthreads can be used as a  
shorthand to tag all threads in an application. The tgid for a pthread  
is returned by getpid() and the pid of the individual thread is  
returned by gettid().  
```  
pid和tgid分别使用getpid()和gettid()获取, 可以用systemtap试一试. 参见  
https://sourceware.org/systemtap/documentation.html  
http://blog.163.com/digoal@126/blog/#m=0&t=1&c=fks_084068084086080075085082085095085080082075083081086071084  
```  
The algorithm works as follows :  
In "cache everything" mode, 缓存所有, 先查黑名单(不缓存), 再查白名单(缓存), 最后达到连续IO限制的话跳过缓存.  
1) If the pid of the process issuing the IO is in the blacklist, do  
not cache the IO. ELSE,  
2) If the tgid is in the blacklist, don't cache this IO. UNLESS  
3) The particular pid is marked as an exception (and entered in the  
whitelist, which makes the IO cacheable).  
4) Finally, even if IO is cacheable up to this point, skip sequential IO   
if configured by the sysctl.  
Conversely, in "cache nothing" mode, 不缓存任何, 先查白名单(缓存), 再查黑名单(不换成), 最后达到连续IO限制的话跳过缓存.  
1) If the pid of the process issuing the IO is in the whitelist,  
cache the IO. ELSE,  
2) If the tgid is in the whitelist, cache this IO. UNLESS  
3) The particular pid is marked as an exception (and entered in the  
blacklist, which makes the IO non-cacheable).  
4) Anything whitelisted is cached, regardless of sequential or random  
IO.  
Examples :  
--------  
1) You can make the global cache setting "cache nothing", and add the  
tgid of your pthreaded application to the whitelist. Which makes only  
IOs issued by your application cacheable by Flashcache.   
2) You can make the global cache setting "cache everything" and add  
tgids (or pids) of other applications that may issue IOs on this  
volume to the blacklist, which will make those un-interesting IOs not  
cacheable.   
Note that this only works for O_DIRECT IOs. For buffered IOs, pdflush,  
kswapd would also do the writes, with flashcache caching those. 只对O_DIRECT IO请求有效控制.  
The following cacheability ioctls are supported on /dev/mapper/   
FLASHCACHEADDBLACKLIST: add the pid (or tgid) to the blacklist.  
FLASHCACHEDELBLACKLIST: Remove the pid (or tgid) from the blacklist.  
FLASHCACHEDELALLBLACKLIST: Clear the blacklist. This can be used to  
cleanup if a process dies.  
FLASHCACHEADDWHITELIST: add the pid (or tgid) to the whitelist.  
FLASHCACHEDELWHITELIST: Remove the pid (or tgid) from the whitelist.  
FLASHCACHEDELALLWHITELIST: Clear the whitelist. This can be used to  
cleanup if a process dies.  
/proc/flashcache_pidlists shows the list of pids on the whitelist and the blacklist.  
```  