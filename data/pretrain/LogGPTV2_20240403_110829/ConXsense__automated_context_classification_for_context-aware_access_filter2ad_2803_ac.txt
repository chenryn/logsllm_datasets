Example. When our example user arrives at her work-
place, a WiFi snapshot wiﬁ is recorded. This snapshot and
following snapshots having a Jaccard distance of less than or
equal to 0.5 to the ﬁrst one form a WiFi stay point wiﬁ sp,
given that the time diﬀerence of the ﬁrst and last snap-
shot is greater than t minsp and there are no gaps in the
WiFi snapshot observations longer than t gapsp. The char-
acteristic set char(wiﬁ sp) of access points of this stay point
consists of access points mostly observed at the workplace.
During subsequent visits to the workplace, more WiFi stay
points with the same characteristic set will be generated. If
at least f mincoi such stay points have been observed and the
total visit duration dur(wiﬁ sp) of these stay points reaches
t mincoi , the characteristic set constitutes a WiFi-based CoI
C for the user’s workplace.
6.2 Context Detection
Once the GPS- and WiFi-based CoIs have been identiﬁed,
new incoming GPS, WiFi and Bluetooth observations can be
used to identify the location context and social context of
the user at any point in time.
6.2.1 Location context
The location context of the user is deﬁned in terms of the
CoIs that the user visits at a speciﬁc point in time.
Definition 1
(Visits). A user’s visit VC to a GPS-
based CoI C = (latmin, lonmin, latmax, lonmax) is a sequence
of position observations pos i = (lati, loni) falling within the
CoI and having timestamps at most V apart from each
other: VC = (pos 1, pos 2, . . . , pos n), where ∀pos i ∈ VC :
latmin < lati ∧ lonmin < loni ∧ lati < latmax ∧ loni <
lonmax, and ∀i, 1 < i ≤ n : t(pos i) − t(pos i−1) < V .
Similarly, a visit VC to a WiFi-based CoI C is a sequence
of WiFi snapshots wiﬁ falling within the CoI and having
timestamps at most V apart from each other. That is,
VC = (wiﬁ 1, wiﬁ 2, . . . , wiﬁ n), where Jδ(C , wiﬁ i) ≤ 0.5 and
2The Jaccard distance measures the dissimilarity between
two sets A and B as Jδ(A, B) =
|A∪B|−|A∩B|
|A∪B|
297∀i, 1 < i ≤ n : t(wiﬁ i) − t(wiﬁ i−1) < V . We denote the set
of all visits VC of the user to CoI C with VC .
Definition 2
(Location Context). A location con-
text Lt at timestamp t is the set of CoIs C that the user is
visiting during that point of time.
Note, that CoIs can be overlapping, which means that a
user can be visiting several CoIs simultaneously. If the user
is not visiting any of the CoIs at a speciﬁc point in time, the
corresponding location context will be empty.
6.2.2 Social context
In order to capture people in the user’s surroundings, we
observe their mobile devices that can be sensed through
proximity sensing technologies like Bluetooth (BT). Blue-
tooth has a range of approximately 30 meters given a di-
rect line of sight, so its physical properties quite well reﬂect
our notion of a context comprising the space immediately
observable by the user (e.g., a room). Bluetooth has been
commonly used in ubiquitous computing literature to model
the presence of persons in a perimeter (cf., e.g., [27]). To
capture only devices that are typically carried by persons,
we ﬁlter the BT observations by their device class so that
we consider only mobile devices like cell phones, headsets,
PDAs and other portable devices.
Some users may not keep Bluetooth enabled and discover-
able on their devices or always carry their devices with them.
Therefore, we will not always be able to reliably detect the
presence of all persons in the context using Bluetooth alone.
However, this is not necessary, since our probabilistic frame-
work utilizes Bluetooth as one factor for identifying the type
of context the user is in and not as a ’tripwire’ for detecting
potentially malicious users. Especially in public contexts
where many persons are present and the likelihood that at
least some Bluetooth devices can be detected is high, Blue-
tooth works well as a context classiﬁcation factor.
In ad-
dition, familiar, known devices (e.g. devices of family and
friends) can be polled even if they are in hidden mode, if the
BDADDR of the target device is known. For example, two
devices that are paired can detect each other this way even
if they remain invisible to other devices.
The social context is deﬁned in terms of the devices that
are detected in the user’s context at a speciﬁc point in time.
Definition 3
(Encounters). An encounter Ed of a
user with a device d is a sequence of Bluetooth observations
bt i of device d with timestamps that are at most E apart
from each other: E = (bt 1, bt 2, . . . , bt n), where ∀i, 1 < i ≤
n : bt i = d ∧ t(bt i)− t(bt i−1) < E. We denote the set of all
encounters of the user with a device d with Ed .
When our example user arrives at her workplace, her de-
vice obtains a Bluetooth observation bt 1 = d of her col-
league’s device d . This observation and any subsequent
device observations bt i = d of the colleague’s device form
an encounter Ed with the colleague’s device, as long as the
time distance between consecutive device observations is less
than E = 5 minutes. The purpose of allowing gaps of this
size is to be able to handle missed device observations not
uncommon with Bluetooth sensing.
Definition 5
(Familiar Devices). The set of famil-
iar devices Df am is the set of all such devices that the user
has encountered at least f minfamdev times and for which the
total duration of the encounters is at least t minfamdev .
Familiar devices d for our example user would be the mo-
bile devices of familiar people like her spouse or her col-
leagues at work which she has encountered more often than
f minfamdev = 5 times and the total duration of these en-
counters is longer than t minfamdev = 30 minutes.
6.3 Context Proﬁles
Based on the above context model, context proﬁles are
aggregated for the user: a CoI proﬁle CoIs and a device
proﬁle Devs. The CoI proﬁle CoIs = {C, P} consists of the
set of all identiﬁed CoIs C, and a mapping P : C → N ×
R, C (cid:55)→ (visits C , dur C ) providing the total amount visits C
and total duration dur C of visits to each CoI C ∈ C.
Similarly, the device proﬁle Devs = {D,Df am, O} consists
of the set of all encountered devices D, the set of familiar de-
vices Df am and a mapping O : D → N×R, d (cid:55)→ (encd , dur d )
providing the total amount encd and total duration dur d of
encounters with each device d ∈ D.
6.4 Context Features
Based on the context model, we deﬁne following features:
Context familiarity features.
Let CGPS denote the subset of all GPS-based CoIs and CWiFi
the subset of all Wiﬁ-based CoIs in C. Then we have:
f GPS
maxdur : maximum total visit time of any GPS-based CoI in
current location context
f GPS
maxdur (t) =
f GPS
maxdur (t) =
f WiFi
maxdur (t) =
0, otherwise
0, otherwise
i = arg maxC∈{CGPS∩Lt} dur C∧
Lt ∩ CGPS (cid:54)= ∅
(cid:26) maxC∈{CGPS∩Lt} dur C , Lt ∩ CGPS (cid:54)= ∅
 visits Ci ,
(cid:26) maxC∈{CWiFi∩Lt} dur C , Lt ∩ CWiFi (cid:54)= ∅
 visits Ci ,
i = arg maxC∈{CWiFi∩Lt} dur C∧
Lt ∩ CWiFi (cid:54)= ∅
0, otherwise
f GPS
maxdur : number of visits to the GPS-based CoI with the
maximum total visit time
f WiFi
maxdur : maximum visit time of any WiFi-based CoI in the
location context
f WiFi
maxfreq : number of visits to the WiFi-based CoI with the
maximum total visit time
f WiFi
maxfreq (t) =
0, otherwise
Device familiarity features.
f BT
num: Number of Bluetooth devices and familiar Bluetooth
devices in device context Dt
num(t) = |Dt|, f BT
f BT
fam(t) = |Dt ∩ Df am|
f BT
famavg-time : Average encounter time of familiar devices in Dt
(cid:40) (cid:80)
Definition 4
(Device Context). The device context
Dt at timestamp t is the set of devices d that are encountered
during that point of time.
f BT
famavg-time (t) =
d∈{Dt∩Df am} dur d
|Dt∩Df am|
, Dt ∩ Df am (cid:54)= ∅
0, otherwise
298f BT
famavg-freq : Average number of encounters of familiar de-
vices in Dt
d∈{Dt∩Df am} encd
|Dt∩Df am|
, Dt ∩ Df am| (cid:54)= ∅
0, otherwise
(cid:40) (cid:80)
f BT
famavg-freq (t) =
The Proﬁler calculates context feature values based on a
history of observation data and labels them based on user
feedback. The feature values are used by the Classiﬁer to
train machine learning-based classiﬁers for classifying new
observations.
In the following sections, we show how we
applied this context model on real-world context data to
evaluate the eﬀectiveness of the model and the Classiﬁer.
7.
IMPLEMENTATION
To evaluate the ConXsense framework, we created a pro-
totype implementation consisting of a Data Collector app,
a Proﬁler and Classiﬁer. The output of the Classiﬁer was
integrated with the Access Control Layer (cf. section 9) to
provide enforcement.
7.1 Data Collector
For collecting context data, we implemented a Data Collec-
tor app for Android. It uses a background Service to collect
context data in intervals of 60 seconds. This is a required
tradeoﬀ between the battery lifetime and the quantity of
collected data for reaching a battery lifetime of at least a
working day (12h) on, e.g., the Samsung Galaxy Nexus and
Nexus S devices. The collected data comprise location infor-
mation, nearby Bluetooth devices and WiFi access points,
acceleration sensor information as well as information about
user presence and her interaction with apps (Activities).3
The Data Collector app also collects ground truth data.
The user regularly reports the perceived risk of device mis-
use in the current context by specifying the context to be
“safe” (low risk of misuse) or “unsafe” (high risk of misuse).
In addition, users are asked to classify the current context as
“home” or “work”, if the context has high privacy exposure
due to context information being either private or conﬁden-
tial, respectively, or, “public” if the context has low privacy
exposure. By using concise words that are easy to follow and
relate to helped us in keeping the user interaction as simple
as possible. To avoid misunderstandings, an introductory
explanation was given to study participants beforehand.
The users provided the above feedback for the current con-
text either by using context feedback buttons on the device’s
UI or by using dedicated NFC tags provided to the partic-
ipants for triggering context reporting (cf. Figure 2). The
feedback UI was either spontaneously invoked by the user,
or, if no ground truth had been provided during the last
two hours, the app reminded the user to do so via sound, vi-
bration and ﬂashing LED notiﬁcations. Context and ground
truth data were stored in a SQLite database and periodically
uploaded to a server via HTTPS.
7.2 Proﬁler and Classiﬁer
We implemented the functionality of the Proﬁler as oﬀ-line
data processing scripts utilizing bash shell scripting, awk and
Python. The scripts were used to identify individual GPS
3Data Collector is a generic solution collecting more data
than required by the current Proﬁler.
(a) Feedback using Con-
text Feedback Buttons
(b) Feedback using Con-
text NFC Tags.
Figure 2: Android Data Collector App
and WiFi CoIs for each user, and to calculate the famil-
iarity of Bluetooth devices that the users had encountered
during the data collection period. Scripts were also used for
extracting the context feature vectors.
The functionality of the Classiﬁer was realized and evalu-
ated using the Weka data mining suite [18] and its provided
algorithm implementations for k-NN, Random Forest and
Na¨ıve Bayes classiﬁers.
8. EVALUATION
To evaluate the context classiﬁcation, the Data Collector
app was installed on the Android smartphones of 15 test
users having technical and non-technical backgrounds. A
test user group of this size is large enough for verifying the
validity of the concept and is in line with previous works
evaluating context-aware access control by Riva et al. [31]
(n = 9) and Sadeh et al. [33] (n = 12 and n = 19). Users
provided context and feedback data over a period of 68 days,
56 days per user on the average. The total dataset contained
data from 844 distinct user days. On the average, users pro-
vided ground truth feedback on 46 days of the data collection
period, resulting in a ground truth dataset containing 3757
labeled data points.
From the collected data, the Proﬁler calculated personal
context proﬁles and context features. The features were used
by the Classiﬁer to train classiﬁcation models for predicting
the privacy exposure and misuse risk levels of contexts. The
context labels obtained through user feedback were used to
attach class labels to the context feature vectors.
Each test user provided at least 50 or more feedback la-
bels. This would roughly correspond to the user providing
2-3 feedbacks per day over a period of three weeks, which
seems like a manageable burden on the user. After this ini-
tial training period of the Classiﬁer, the need for explicit
user feedback would signiﬁcantly diminish. The user would
need to provide only occasional corrective feedback in cases
of incorrect predictions of the Classiﬁer.
In constructing the Classiﬁer, we experimented with three
diﬀerent machine learning algorithms: 1) A k-nearest neigh-
bors (kNN) classiﬁer, which bases its prediction on compar-