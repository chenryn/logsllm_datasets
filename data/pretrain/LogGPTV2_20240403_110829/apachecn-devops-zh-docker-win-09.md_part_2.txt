Docker 具有防止单个容器使用过多资源的机制。您可以使用显式约束来启动容器，以限制它们可以使用的资源，从而确保没有一个容器消耗主机的大部分计算能力。您可以将容器限制在明确的 CPU 内核和内存数量。
我有个简单的.NET 控制台应用和一个 Dockerfile 来将它打包到`ch09-resource-check`文件夹中。构建该应用是为了占用计算资源，我可以在一个容器中运行它来展示 Docker 如何限制流氓应用的影响。我可以使用该应用成功分配 600 MB 内存，如下所示:
```
> docker container run dockeronwindows/ch09-resource-check:2e /r Memory /p 600
I allocated 600MB of memory, and now I'm done.
```
控制台应用在容器中分配 600 兆内存，这实际上是 600 兆内存，来自窗口服务器容器中的服务器。我在没有任何限制的情况下运行了容器，因此该应用能够使用与服务器一样多的内存。如果我使用`docker container run`命令中的`--memory`限制将容器限制为 500 兆内存，则应用无法分配 600 兆内存:
```
> docker container run --memory 500M dockeronwindows/ch09-resource-check:2e /r Memory /p 600 
Unhandled Exception: OutOfMemoryException.
```
示例应用也会占用中央处理器。它将π计算到给定的小数位数，这是一个计算量很大的操作。在不受限制的容器中，在我的四核开发笔记本电脑上计算π到 20，000 个小数位只需要不到一秒钟的时间:
```
> docker container run dockeronwindows/ch09-resource-check:2e /r Cpu /p 20000
I calculated Pi to 20000 decimal places in 924ms. The last digit is 8.
```
我可以通过在`run`命令中指定`--cpu`限制来使用 CPU 限制，Docker 将限制这个容器可用的计算资源，为其他任务保留更多的 CPU。同样的计算需要两倍多的时间:
```
> docker container run --cpus 1 dockeronwindows/ch09-resource-check:2e /r Cpu /p 20000
I calculated Pi to 20000 decimal places in 2208ms. The last digit is 8.
```
通过使用部署部分中的资源限制，可以将相同的内存和 CPU 限制应用于生产 Docker Swarm 部署。此示例将新的 NerdDinner REST API 限制为 25%的可用 CPU 和 250 MB 的内存:
```
nerd-dinner-api:
  image: dockeronwindows/ch07-nerd-dinner-api:2e
  deploy:
    resources:
      limits:
        cpus: '0.25'
        memory: 250M
...
```
验证资源限制是否到位可能很有挑战性。获取中央处理器数量和内存容量的底层窗口应用编程接口使用操作系统内核，并且在一个容器中，该容器将是主机的内核。内核报告完整的硬件规格，因此限制似乎不在容器内，但它们是强制执行的。您可以使用 WMI 检查约束，但输出不会如预期的那样:
```
> docker container run --cpus 1 --memory 1G mcr.microsoft.com/windows/servercore:ltsc2019 powershell `
 "Get-WmiObject Win32_ComputerSystem | select NumberOfLogicalProcessors, TotalPhysicalMemory"
NumberOfLogicalProcessors TotalPhysicalMemory
------------------------- -------------------
                        4         17101447168
```
这里，容器报告了四个中央处理器和 16 GB 内存，尽管它被限制为一个中央处理器和 1 GB 内存。这些限制实际上已经存在，但它们的运作水平高于 WMI 呼吁。如果在容器内运行的进程试图分配超过 1 GB 的内存，那么它将失败。
Remember that only Windows Server containers have access to all the host's compute power, where the container process is actually running on the host. Hyper-V containers each have a lightweight VM where the process is running, and that VM has its own allocation of CPU and memory. You can apply container limits using the same Docker commands, and they're applied to the container's VM.
# 运行具有受限功能的容器
Docker 平台有两个有用的特性来限制应用在容器中可以做什么。目前，它们只与 Linux 容器一起工作，但是如果您需要处理混合工作负载，它们值得理解，并且对 Windows 的支持可能会出现在未来的版本中。
Linux 容器可以使用`read-only`标志运行，这将创建一个具有只读文件系统的容器。该选项可用于任何映像，它将启动一个容器，其输入过程与平时相同。不同之处在于，容器没有可写文件系统层，因此不能添加或更改任何文件—容器不能修改映像的内容。
这是一个有用的安全特性。web 应用可能存在允许攻击者在服务器上执行代码的漏洞，但是只读容器严重限制了攻击者的能力。他们不能更改应用配置文件、更改访问权限、下载新的恶意软件或替换应用二进制文件。
只读容器可以与 Docker 卷相结合，因此应用可以写入已知位置以记录或缓存数据。如果您有一个向文件系统写入的应用，那就是如何在只读容器中运行它而不改变功能。您需要注意的是，如果您将日志写入卷中的文件，并且攻击者已经获得了对文件系统的访问权限，他们就可以读取历史日志，如果日志被写入标准输出并被 Docker 平台使用，他们就无法读取历史日志。
当您运行 Linux 容器时，您还可以显式地添加或删除容器可用的系统功能。例如，您可以在没有`chown`功能的情况下启动一个容器，因此容器内的任何进程都不能更改文件访问权限。同样，您可以限制对网络端口的绑定或对内核日志的写访问。
`read-only`、`cap-add`和`cap-drop`选项对 Windows 容器没有影响，但是在 Windows 上的 Docker 的未来版本中可能会提供支持。
One great thing about Docker is that the open source components are built into the supported Docker Enterprise version. You can make feature requests and track bugs on GitHub in the `moby/moby` repository, which is the source code for Docker Community Edition. When features are implemented in Docker CE, they become available in the subsequent Docker Enterprise release.
# Windows 容器和活动目录
大型组织使用**活动目录** ( **公元**)来管理其 Windows 网络中的所有用户、组和机器。应用服务器可以加入域，使它们能够访问 AD 进行认证和授权。这就是内部网络应用.NET 通常被部署。该应用使用 Windows 认证为用户提供单点登录，IIS 应用池作为可以访问 SQL Server 的服务帐户运行。
运行 Docker 的服务器可以加入域，但机器上的容器不能。您可以在容器中运行传统的 ASP.NET 应用，但是使用默认部署时，您会发现 Windows 认证对用户不起作用，并且应用本身无法连接到数据库。
这是一个部署问题，您可以使用**组管理的服务帐户** ( **gMSA** )让窗口容器访问广告，这是一种无需密码即可使用的广告帐户。活动目录很快成为一个复杂的话题，所以我将在这里给出一个概述，这样您就知道您可以在容器中使用广告服务:
*   域管理员在活动目录中创建 gMSA。这需要一个域控制器在 Windows Server 2012 或更高版本上运行。
*   向您的 Docker 服务器授予对 gMSA 的访问权限。
*   使用`CredentialSpec` PowerShell 模块为 gMSA 生成 JSON 格式的凭据规范。
*   运行带有`security-opt`标志的容器，指定 JSON 凭证规范的路径。
*   容器中的应用实际上是域连接的，并且可以使用分配给 gMSA 的权限来使用 AD。
在 Windows Server 2019 中，从容器内部访问广告服务要容易得多。以前，对 gMSA 必须使用的名称有限制，这使得在 Docker Swarm 中运行时很难应用凭据规范。现在，您可以为您的 gMSA 使用任何名称，并为许多容器使用一个 gMSA。Docker Swarm 通过使用`credential_spec`值支持合成文件中的凭据规范。
There's a full walkthrough of creating and using a gMSA and a credential spec in Microsoft's container documentation on GitHub: [https://github.com/MicrosoftDocs/Virtualization-Documentation/tree/live/windows-server-container-tools/ServiceAccounts](https://github.com/MicrosoftDocs/Virtualization-Documentation/tree/live/windows-server-container-tools/ServiceAccounts).
# 在超高压容器中隔离
Windows 上的 Docker 有一个 Linux 上的 Docker 没有的大安全特性:使用 Hyper-V 容器的扩展隔离。运行在 Windows Server 2019 上的容器使用主机的操作系统内核。当您运行一个容器时，您可以看到这一点，并且容器内的进程在主机上的任务管理器中列出。
在 Windows 10 上，默认行为是不同的。通过 Windows 1809 更新，您可以在 Windows 10 上运行带有进程隔离的 Windows Server 容器，方法是在 docker 容器运行命令中添加`--isolation=process`标志。您需要在命令或 Docker 配置文件中指定隔离级别，因为 Windows 10 上的默认值是`hyperv`。
有自己内核的容器叫做 **Hyper-V** 容器。它们是用提供服务器内核的轻量级虚拟机实现的，但这不是完整的虚拟机，也没有虚拟机的典型开销。Hyper-V 容器使用普通的 Docker 映像，它们以与所有容器相同的方式在普通的 Docker 引擎中运行。它们不会显示在 Hyper-V 管理工具中，因为它们不是完整的虚拟机。
Hyper-V 容器也可以使用`isolation`选项在 Windows Server 上运行。此命令将 IIS 映像作为 Hyper-V 容器运行，将端口`80`发布到主机上的随机端口:
```
docker container run -d -p 80 --isolation=hyperv `
  mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019
```