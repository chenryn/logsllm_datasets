rules.
Suppose there are three access control rules for the docu-
ment described in Section 2.1:
Role: Doctor
+R, /record
Role:
Intern
+R, /record
-R, //comment
Each rule is categorized by the role of the requesting sub-
ject. The ﬁrst rule says that “Doctor can read record ele-
ments”. The second rule says that “Intern can read record
elements”. The third rule says that “Intern cannot read any
comment elements” because comment nodes may include con-
ﬁdential information and should be hidden from access by
Intern. Please refer to Section 3.2 for more precise seman-
tics.
2The syntax of the policy can be represented in a standard-
ized way using XACML[16] but we use the above syntax for
simplicity.
Well differentiated adeno carcinoma
5-FU 500mg and CDDP 10mg
Figure 2: The XML document that Intern can see
3.1.1 Using XPath for XML Access Control
Many reports[21, 10, 3, 15] on the node-level access con-
trol for XML document use XPath to locate the target node
in the XML document.
There are a couple of reasons why we use XPath for our
access control policy. First, XPath provides a suﬃcient num-
ber of ways to refer to the smallest unit of an XML document
structure such as an element, an attribute, a text node, or a
comment node. Therefore it allows a policy writer to write
a policy in ﬂexible manner (e.g. grant access to a certain
element but deny access to the enclosing attributes).
In
this paper, for simplicity, we limit target nodes of the pol-
icy only to elements and attributes. We assume that other
nodes such as text and comment nodes are governed by the
policy associated with the parent element.
Second, it is often the case that the access to a certain
node is determined by a value in the target XML document.
For a medical record, a patient may be allowed to read his or
her own record but not another patient’s record. Therefore
the access control policy should provide a way to represent
a necessary constraint on the record. By using an XPath
predicate expression, such a policy could be speciﬁed as
3
(Role:patient, +R, /record[@patientId = $userid
/diagnosis). This policy says that the access to a diagnosis
element below the record element is allowed if the value of
the patientId attribute is equal to the user ID of the re-
questing subject. We use the term value-based access control
to refer to an access control policy (or rule) that includes
such an XPath predicate that references a value.
3.2 Semantics of Access Control Policy
]
In general, an access control policy should be designed to
satisfy the following requirements: succinctness, least priv-
ilege, and soundness. Succinctness means that the policy
semantics should provide a way to specify a smaller number
of rules rather than to specify rules on every single node
in the document. Least privilege means that the policy
should grant the minimum privilege to the requesting sub-
ject. Soundness means that the policy evaluation must al-
ways generate either a grant or a denial decision in response
to any access request.
In this paper, we consider another requirement called de-
nial downward consistency, which is a new requirement spe-
ciﬁc to XML access control.
It requires that whenever a
policy denies the access to an element, it must also deny the
access to its subordinate elements and attributes. In other
3We use a variable $userid to refer to the identity of the
requesting user in the access control policies.
words, whenever access to a node is allowed, access to all
the ancestor elements must be allowed as well. We impose
this requirement since we believe that elements or attributes
isolated from their ancestor elements are meaningless.
For example, if an element or attribute speciﬁes a relative
URI, its interpretation depends on the attribute xml:base
[22] speciﬁed at the ancestor elements. Another advantage
of the denial downward consistency is that it makes imple-
mentation of runtime policy evaluation easier.
To satisfy the above requirements, the semantics of our
access control policy is deﬁned as follows:
1. An access control rule with +R or -R (capital letter)
propagates downward through the XML document struc-
ture. An access control rule with +r or -r (small letter)
does not propagate and just describes the rule on the
speciﬁed node.
2. A rule with denial permission for a node overrules any
rules with grant permission for the same node.
3. If no rule is associated with a certain node, the default
denial permission “-” is applied to that node.
Now we informally describe an algorithm to generate an
access decision according to the above deﬁnitions. First, the
algorithm gathers every grant rule with +r and marks “+”
on the target nodes referred to by the XPath expression. If
the node type is an element, the algorithm marks “+” on
immediate children nodes (e.g. a text and comment nodes)
except for the attributes and the elements.
It also marks
a “+” on all the descendant nodes if the action is R. Next,
the algorithm gathers the remaining rules (denial rules) and
marks “-” on the target nodes in the same way. The “-”
mark overwrites the “+” mark if any. Finally, the algorithm
marks “-” on every node that is not yet marked. This opera-
tion is performed for each subject and action independently.
For example, the access control policy in Section 3.1 is
interpreted as follows: The ﬁrst rule marks the entire tree
with “+” and therefore Doctor is allowed to read every node
(including attributes and text nodes) equal to or below any
record element. The second and third rules are policies for
Intern. The second rule marks the entire tree with “+” as
the ﬁrst rule does and the third rule marks comment elements
and subordinate text nodes with “-”, which overwrites +
marks. Thus, three comment elements and text nodes are
determined as “access denied”. The XML document that
Intern can see is shown in Figure 2.
Note that the above algorithm does not always force a
policy to satisfy the denial downward consistency. For ex-
ample, if a rule with +R is speciﬁed on a certain node and a
rule with -R is speciﬁed on an ancestor element of the explic-
itly access-granted node, the denial rule revokes the grant
permission intended by the policy writer. Policy authoring
tools (or analysis tools) can assist policy writers to detect
such cases.
A rule that uses +R or -R can be converted to the rule with
+r or -r. For example, (Sbj,+R,/a) is semantically equiv-
alent to a set of three rules: (Sbj,+r,/a), (Sbj,+r,/a//*)
and (Sbj ,+r,/a//@*). Thus, +R and -R are technically
syntactic sugar, but enable a more succinct representation
of the policy speciﬁcation.
Query
Step 3
Query 
Automata
Schema
Access 
Control 
Policy
Step 1
Step 2
Schema 
Automata
Access 
Control 
Automata
Step 4
Analysis Result
Figure 3: Framework of the analysis
3.3 Run-time Access Control
For the integration of access control and query processing,
we assume that if there exist access-denied nodes in a target
XML document, the query processor behaves as if they do
not exist in the document. We believe that the node-level
access control will greatly beneﬁt by returning only autho-
rized nodes without raising an error 4.
We explain how the semantics described above are en-
forced by the access control system at run-time. A sample
scenario is the following: Whenever an access to a node
(and its descendant nodes) is requested, the node-level ac-
cess controller makes an access decision on each node. The
controller ﬁrst retrieves access control rules applicable to
the requested node(s). Then, the controller computes the
access decision(s) according to the rules and returns grant
or denial for each node. Obviously, a naive implementation
of this scenario can lead to poor performance by repeating
evaluations of the rules per node.
4. STATIC ANALYSIS
In this section, we introduce our framework for static
analysis. The key idea is to use automata for comparing
schemas, access control policies, and query expressions.
Figure 3 depicts an overview of our static analysis. Static
analysis has four steps as below:
Step 1: creating schema automata from schemas
Step 2: creating access control automata from access con-
trol policies
Step 3: creating query automata from XQuery queries
Step 4: comparison of schema automata, query automata,
and access control automata
When schemas are not available, we skip Step 1 and do
not use schema automata in Step 4.
4.1 Automata and XPath expressions
In preparation, we introduce automata and show how we
capture XPath expressions by automata.
4Another semantic model
is to raise an access violation
whenever the query processor encounters the “access de-
nied” node.
A non-deterministic ﬁnite state automaton (NFA) M is
a tuple (Ω, Q, Qinit, Qﬁn, δ), where Ω is an alphabet, Q is
a ﬁnite set of states, Qinit ⊆ Q is a set of initial states,
Qﬁn ⊆ Q is a set of ﬁnal states, and δ is a transition function
from Q × Ω to the power set of Q [18]. The set of strings
accepted by M is denoted L(M ).
where
ΣE = {record, diagnosis, chemotherapy, comment,
pathology, prescription},
ΣA = {@type},
N = {Record, Diag, Chem, Com, Patho, Presc},
δ(qini, record) = {Record},
δ(Record, diagnosis) = {Diag},
δ(Record, chemotherapy) = {Chem},
δ(Record, comment) = {Com},
δ(Record, record) = {Record},
δ(Diag, pathology) = {Patho},
δ(Diag, comment) = {Com},
δ(Chem, prescription) = {Presc},
δ(Chem, comment) = {Com},
δ(Patho, @type) = {qﬁn}.
Recall that we have allowed only three axes of XPath (see
Section 2.3). This restriction allows us to capture XPath
expressions with automata. As long as an XPath expression
contains no predicates, we can easily construct an automa-
ton from it. We ﬁrst create a regular expression by replac-
∗·”, respectively, where
ing “/” and “//” with “·” and “· Ω
“·” denotes the concatenation of two regular sets, and then
create an automaton from this regular expression. The con-
structed automaton accepts a path if and only if it matches
the XPath expression.
When an XPath expression r contains predicates, we can-
not capture its semantics exactly by using an automaton.
However, we can still approximate r by constructing an
over-estimation automaton M [r] and an under-estimation
automaton M [r]. To construct M [r], we assume that predi-
cates are always satisﬁed. That is, we ﬁrst remove all predi-
cates from r and then create an automaton M [r]. Obviously,
M [r] accepts all paths matching r and may accept other
paths (over-estimation). For example, if r is /record[...],
then L(M [r]) = {/record}.
Meanwhile, to construct M [r], we assume that predicates
are never satisﬁed. That is, if a step in r contains one or
more predicates, we ﬁrst replace this step with an empty
set, and then create an automaton M [r]. Obviously, M [r]
does not accept any paths if r contains predicates (under-
estimation). For example, if r is /record[...], then L(M [r])
is an empty set.
As a special case, when r does not contain any predicates,
M [r] is identical to M [r] and we simply write M [r] for de-
noting both.
4.2 Step 1: Creating schema automata
Since we are interested in permissible paths rather than
permissible trees, we construct a schema automaton from
a schema. A schema automaton accepts permissible paths
rather than permissible documents.
Let G = (N, ΣE, ΣA, S, P ) be a schema. To construct a
schema automaton from G, we use all non-terminals (i.e.,
N ) of G as ﬁnal states. We further introduce an additional
ﬁnal state qﬁn and a start state qini. Formally, the schema
automaton for G is
E ∪ Σ
A, N ∪ {qini, qﬁn},{qini}, N ∪ {qﬁn}, δ),
= (Σ
M G
where δ is a transition function from (N∪{qini, qﬁn})×(ΣE∪
ΣA) to the power set of N ∪ {qini, qﬁn} such that
δ(x, e) = {x(cid:2) | for some x → rA in P, e[x(cid:2)
in r} ∪ {x(cid:2) | x = qini, e[x(cid:2)
] occurs
] ∈ S},
δ(x, a) = {qﬁn | a ∈ A for some x → r A in P},
where e is an element name in ΣE and a is an attribute
name in ΣA.
For example, consider the example schema in Section 2.
The schema automaton for this schema is
M G
E ∪ Σ
A, N ∪ {qini, qﬁn}, {qini}, N ∪ {qﬁn}, δ)
= (Σ
Observe that this automaton accepts the following paths.
/record,
/record/comment,
/record/diagnosis,
/record/diagnosis/pathology,
/record/diagnosis/pathology/@type,
/record/diagnosis/comment,
/record/chemotherapy,
/record/chemotherapy/prescription,
/record/chemotherapy/comment,
/record/record,
/record/record/comment,...
/record/record/record,
/record/record/record/comment,...
Since the example schema in Section 2 allows record ele-
ments to nest freely, this automaton allows an inﬁnite num-
ber of paths.
4.3 Step 2: Creating access control automata
An access control policy consists of rules, each of which
applies to some roles. For each role, we create a pair of au-
tomata: an under-estimation access control automaton and
an over-estimation access control automata. This pair cap-
tures the set of those paths to elements or attributes which
are exposed by the access control policy.
In preparation, we replace +R and -R rules with +r and
-r rules, respectively (see Section 3.2). Let r1, ..., rm be the
XPath expressions occurring in the grant rules (+r), and let
r(cid:2)
1, ..., r(cid:2)
n be the XPath expressions occurring in the denial
rules (-r).
We ﬁrst assume that none of r1, ..., rm, r(cid:2)
n contain
predicates. Recall that we interpret the policy according to
the “denial-takes-precedence” principle. M Γ accepts those
paths which are allowed by one of r1, ..., rm but are denied
by any of r(cid:2)
1, ...., r(cid:2)
n. Formally,
1, ..., r(cid:2)
L(M Γ
) = (L(M [r1]) ∪ ··· ∪ L(M [rm]))
1]) ∪ ··· ∪ L(M [r(cid:2)
\ (L(M [r(cid:2)
n]))
where Σ = ΣE ∪ ΣA and “\” denotes the set diﬀerence.
We can construct M Γ by applying boolean operations to
M [r1], ..., M [rm], M [r(cid:2)
1], ..., M [r(cid:2)
n].
We demonstrate this construction for the access control
policy in Section 3.1. For the role Intern, this policy con-
tains a grant rule and a denial rule, both of which propa-
gate downward. The grant rule contains an XPath /record,
while the denial rule contains an XPath //comment. Thus,
L(M Γ
) = {record}· (Σ
)
\ (Σ
∗· (Σ
A ∪ {})
∗·{comment}· (Σ
)
E
E
E
∗· (Σ
A ∪ {})
)
1, ..., r(cid:2)
Now, let us consider the case that predicates occur in
r1, ..., rm, r(cid:2)
n. Since predicates cannot be captured by
automata, we have to construct an over-estimation access
control automaton M Γ as well as an under-estimation access
control automaton M Γ. Rather than exactly accepting the
set of exposed paths, the former and latter automata over-
estimates and under-estimates this set, respectively. Ob-
serve that L(M [r1]), ..., L(M [rm]) are positive atoms and
L(M [r(cid:2)
n]) are negative atoms in the above equa-
tion. To construct an under-estimation access control au-
tomaton M Γ, we under-estimate positive atoms and over-
estimate negative atoms. On the other hand, to construct
an over-estimation access control automaton M Γ, we over-
estimate positive atoms and under-estimate negative atoms.
Formally,
1]), ..., L(M [r(cid:2)
L(M Γ
) = (L(M [r1]) ∪ ·· · ∪ L(M [rm]))
\ (L(M [r(cid:2)
1]) ∪ ·· · ∪ L(M [r(cid:2)
n])),
L(M Γ) = (L(M [r1]) ∪ ·· · ∪ L(M [rm]))
\ (L(M [r(cid:2)
1]) ∪ ·· · ∪ L(M [r(cid:2)
n])).
Again, we can construct M Γ and M Γ by applying boolean
operations to automata occurring in the right-hand side of
the above equations.
Suppose that the grant rule and denial rules in the exam-
ple policy, use /record[...] and //comment[...], respec-
tively. Then,
L(M Γ
) = ∅· (Σ
E
)
\ (Σ
∗· (Σ
)
A ∪ {})
∗·{comment}· (Σ
E
E
∗· (Σ
A ∪ {})
)
= ∅,
L(M Γ) = {record}· (Σ
)
= {record}· (Σ
\ (Σ
E
E
)
∗·∅· (Σ
A ∪ {})
∗· (Σ
∗· (Σ
)
A ∪ {})