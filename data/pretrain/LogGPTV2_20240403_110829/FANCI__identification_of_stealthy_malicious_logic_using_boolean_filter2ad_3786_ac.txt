wires that belong to stealthy backdoor triggers. Thus, the vectors
will contain at least some small values. The practical question is
how to deal with these vectors and identify the output wires that
are truly suspect from ones that are benign. Toward this end, we
consider a few (but not all) different heuristics for evaluating these
vectors. The general description is shown in Algorithm 4.
Median: The ﬁrst option we consider is the median. In the case
of backdoor triggers, the wires on the critical paths of the trigger
generally have mostly unaffecting or very weakly-affecting depen-
dencies, such as in the example displayed in Figure 1. Thus, the
median is often close to zero. The median can be an imperfect
metric when the data distribution is irregular, which does happen.
Using only the median (as we conﬁrm in our evaluation), can result
in a few unnecessary false positives.
Algorithm 4 Compute a Heuristic for an Output Wire
1: w ← output wire
2: h ← heuristic function (e.g., median)
3: t ← threshold (between zero and one)
4: v(w) ← vector of control values
5: result(w) ← h(v(w))
6: if result(w) < t then
7:
8: else {result(w) ≥ t}
9:
10: end if
return not suspicious
return suspicious
Mean: In addition to the median, we also consider the mean of
the control values. The mean is slightly more sensitive to outliers.
For example, if there are only a few dependencies, and one of them
is unaffecting, that is likely to get noticed.
Both: Since there are potential limitations with both median and
mean, we also consider the option of using both, i.e. ﬂagging wires
that have extreme values for both the mean and the median. We
set a threshold for both the median and the mean, and we ﬂag a
wire as suspicious only if the median value is low and the mean
value is also low. This helps in some cases to slightly diminish
false positives. Details and comparisons are presented in Section 5.
Triviality: One last heuristic we consider in our implementation
is one that we call triviality. In terms of control values, this is a
701weighted average of the values in the vector. We weight them by
how often they are the only wire inﬂuencing the output to deter-
mine how much an output is inﬂuenced overall by its inputs. The
purpose is to learn more about the output wire and less about the
individual inputs. For instance, in a circuit that XORs many inputs,
each input has a control value of 1.0, but it is never the case that one
input completely controls the output, and the triviality of the out-
put is only 0.5. Equivalently, this heuristic computes the fraction of
the rows in the truth table in which the dependent output wire has
the value zero (or symmetrically, the value one). In practice, we
can compute triviality directly in this way by looking only at the
output column, which often allows for faster runtime than the other
heuristics.
The name ’triviality’ refers to the fact that if the triviality value
is zero or one then the circuit is completely trivial (always outputs
zero or always outputs one). This metric quantiﬁes how function-
ally trivial the sub-circuit computing a speciﬁc output wire is. Note
that this metric is not a simple function of the control values, as it
makes use of correlations, but we went with it because it worked
well in practice. The exact value for triviality can vary from run to
run depending on which rows are randomly selected, but it is proba-
bilistically likely to vary by only a very small amount. Empirically,
we did not see signiﬁcant variance. Additionally, since triviality
can be computed in this alternative way, it might be a good metric
for unusually large modules or if computational runtime becomes
relevant.
For each metric, it is necessary to have a cut-off threshold for
what is suspicious and what is not. This value (between zero and
one) can be chosen either a priori or after looking at the distrub-
tion of computed values. In practice, the latter often works better,
as there are often natural breakpoints to choose as the threshold.
Either way, the threshold is generally very small, i.e. ≪ .001. Var-
ious other heuristics and/or thresholds could be considered in the
future to attempt to gain improvements in terms of false positive
rates.
4. RELATION TO STEALTHY, MALICIOUS
CIRCUITS
Prior to our work, UCI [5] was the state-of-the-art in analyzing
backdoors inserted during the design phase. The state-of-the-art
in design backdoor attacks is a class of attacks known as stealthy,
malicious circuits (SMCs) [9]. This class of attacks deterministi-
cally evades UCI and was a viable way to attack hardware designs
prior to our work. As we will see, FANCI catches SMCs with high
probability (approaching 1).
UCI is an analysis algorithm that looks at dataﬂow dependencies
in hardware designs and looks for completely unused intermediate
logic. It is a form of dynamic validation; in terms of our terminol-
ogy, they identify dependencies that are always-affecting depen-
dencies for a given test suite. Given the inputs in the test suite, if
two wires always carry the same values as each other, there is an
identity relationship, and the internal logic is unneeded. If the test
suites were exhaustive, then UCI would have signiﬁcantly fewer
false positives. However, given the incompleteness of standard val-
idation test suites, UCI has many false positives. For this reason,
the Bluechip system was built to replace the removed logic with ex-
ception handlers that invoke runtime simulation software whenever
false positives are encountered.
There are a few key differences between FANCI and UCI. The
ﬁrst is that FANCI does not require a validation test suite. This is
valuable for two reasons. Today, third-party IP blocks often do not
come with a validation test suite. Furthermore, if a validation suite
is supplied, the malicious provider can change the validation test
suite to help the compromised hardware evade UCI. A common
problem in validation and veriﬁcation is that achieving good code
coverage and good interface coverage does not mean good cover-
age of internal states and wires. Certain rare states may never get
tested at all, which can lead to bugs in commercial designs and also
offers ways for backdoor designers to evade detection, such as mis-
using ‘don’t care’ states. FANCI tests all logic equally, regardless
of whether or not it is an input interface, and so it is impossible for
a portion of the logic to go untested.
The second key difference between UCI and FANCI is that UCI
is deterministic and discrete-valued in its approach. Given a test
suite, a wire is only ﬂagged if it is completely unused, regardless
of its relations to other wires.
In FANCI, we also catch nearly-
unused wires, meaning wires that are not completely unused but
which rarely alter output signals. For example, if a wire strongly
affects the value of a nearby wire (and thus is not quiescent) but
ultimately has only a small impact on an output wire a few hops
away, we will notice that. A wire that is part of a backdoor trigger
might also do useful work in a different part of the circuit, and
we account for that. Another aspect of FANCI is that it takes into
account the full vector of dependencies and uses heuristics to make
a ﬁnal decision. For example, if a wire affects two different outputs,
one in a reasonable way and one only rarely, FANCI can notice
that. In the designs we tested, there were many always-affecting
dependency relationships that FANCI correctly did not ﬂag. Those
relationships could have been false positives in UCI.
To give a toy example, consider a double-inverter path, two in-
verters placed one after the other. This is a logical identify func-
tion, so it generates an always-affecting relationship that would be
ﬂagged by UCI. However, as long as the output of the double-
inverter path is used, it would not be ﬂagged by any of FANCI’s
current heuristics. This is a small example and could easily be
hard-coded for in a practical implementation of UCI. However, it
serves as a microcosm of the difference between the deterministic
approach of UCI and the heuristic-based approach of FANCI.
Sturton et al. introduced stealthy, malicious circuits as a way to
evade UCI. FANCI detects SMCs, and we explain the intuition be-
hind why that is. The basic idea behind SMCs is to use logic that
alters the values of intermediate wires but ultimately does not af-
fect outputs. Using this backdoor class, Sturton et al. demonstrated
basic circuit building blocks — such as AND and OR gates — that
can be used to implement stealthy hardware backdoors. Thus, any
small backdoor can be turned into an SMC and evade UCI. The
truth table for one of the simplest SMCs is the following (repro-
duced from [9]):
t1
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
t0
0
0
0
0
1
1
1
1
0
0
0
0
1
1
1
1
i1
0
0
1
1
0
0
1
1
0
0
1
1
0
0
1
1
i0
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
h
0
1
0
1
0
1
0
1
0
1
0
1
1
1
1
1
Operation
f
Normal Operation
0
Normal Operation
0
Normal Operation
0
Normal Operation
1
Normal Operation
0
Normal Operation
0
Normal Operation
0
Normal Operation
1
Normal Operation
0
Normal Operation
0
Normal Operation
0
1
Normal Operation
1 Malicious Operation
0 Malicious Operation
1 Malicious Operation
1 Malicious Operation
702There are two normal input bits i1 and i0 and two trigger bits t1
and t0. In terms of the output f , this is a classic backdoor trigger.
Only when all of the trigger bits are set to one does the functionality
change. In the other cases, the functionality is ﬁxed, and the circuit
looks like f is the AND of i1 and i0. The use of the intermediate
variable h, which is distinct from f , makes it so that t1 and t0 are
not truly quiescent. Thus, Sturton proved that UCI’s defenses could
be evaded.
Can FANCI detect stealthy, malicious circuits? Observe that the
trigger wires – t1 and t0 – are weakly-affecting for the output f , i.e.,
they only affect the value of f during malicious operation, which
is a smaller fraction compared to normal operation. This fraction
diminishes as the number of trigger bits increases. Thus, for the
backdoors in this class of stealthy, malicious circuits, the trigger
inputs will have low control values and will be caught by FANCI
with high probability.
5. EVALUATION
For our implementation of FANCI, we developed a parser for