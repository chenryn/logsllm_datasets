:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#buildroots_rpm-packages}BuildRoots {.title}
:::
在 RPM 打包的上下文中，`buildroot`{.literal} 是一个 chroot
环境。这意味着构建工件使用与最终用户系统将来层次结构相同的文件系统层次结构，并将
`buildroot`{.literal}
用作根目录。构建工件的放置应符合最终用户系统的文件系统层次结构标准。
`buildroot`{.literal} 中的文件稍后被放入 `cpio`{.literal} 归档中，它成为
RPM 的主要部分。当在最终用户系统中安装 RPM 时，这些文件会在
`root`{.literal} 目录中提取，保留正确的层次结构。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
从 Red Hat Enterprise Linux 6 开始，`rpmbuild`{.literal}
程序有其自身的默认值。覆盖这些默认值会导致几个问题；因此，红帽不建议定义您自己的宏值。您可以使用
`%{buildroot}`{.literal} 宏以及 `rpmbuild`{.literal} 目录中的默认值。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#rpm-macros_rpm-packages}RPM 宏 {.title}
:::
[rpm
宏是一种直接文本替换](http://rpm.org/user_doc/macros.html){.link}，可以在使用特定内置功能时根据对语句的可选求值进行有条件地分配。因此，RPM
可以为您执行文本替换。
例如，在 SPEC [*文件中多次引用打包软件版本*]{.emphasis}。您只在
`%{version}`{.literal} [*宏中定义版本一次*]{.emphasis}，并在 SPEC
文件中使用此宏。[*每次出现时，系统将自动替换为您之前定义的版本*]{.emphasis}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果看到不熟悉的宏，您可以使用以下命令对其进行评估：
``` literallayout
$ rpm --eval %{_MACRO}
```
::: title
**评估 %{\_bindir} 和 %{\_libexecdir} 宏**
:::
``` literallayout
$ rpm --eval %{_bindir}
/usr/bin
$ rpm --eval %{_libexecdir}
/usr/libexec
```
:::
在常用的宏中，`%{?dist}`{.literal} 宏为用于构建的信号（分发标签）。
``` literallayout
# On a RHEL 8.x machine
$ rpm --eval %{?dist}
.el8
```
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#working-with-spec-files}使用 SPEC 文件 {.title}
:::
这部分论述了如何创建和修改 SPEC 文件。
::: title
**先决条件**
:::
本节使用 `Hello World!`{.literal}
[程序的三个示例实现，它在什么源代码中描述。](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "源代码是什么"){.link}
下表也全面描述了每个程序。
::: informaltable
  ---------- ----------------------------------------------------------------------------------------------------------------------------------------------------------
  软件名称   示例说明
  Bello      使用原始解释编程语言编写的程序。它演示了何时不需要构建源代码，而只需要安装。如果需要打包预编译的二进制文件，您也可以使用此方法，因为二进制文件也是文件。
  pello      使用字节编译解释编程语言编写的程序。它演示了字节编译源代码并安装字节码 - 生成的预优化文件。
  unito      使用原生编译编程语言编写的程序。它演示了将源代码编译到计算机代码并安装生成的可执行文件的一个常见流程。
  ---------- ----------------------------------------------------------------------------------------------------------------------------------------------------------
:::
`Hello World!`{.literal} 的实现包括：
::: itemizedlist
-   [bello-0.1.tar.gz](https://github.com/redhat-developer/rpm-packaging-guide/raw/master/example-code/bello-0.1.tar.gz){.link}
:::
::: itemizedlist
-   [pello-0.1.2.tar.gz](https://github.com/redhat-developer/rpm-packaging-guide/raw/master/example-code/pello-0.1.2.tar.gz){.link}
-   [cello-1.0.tar.gz](https://github.com/redhat-developer/rpm-packaging-guide/raw/master/example-code/cello-1.0.tar.gz){.link}
    ::: itemizedlist
    -   [cello-output-first-patch.patch](https://raw.githubusercontent.com/redhat-developer/rpm-packaging-guide/master/example-code/cello-output-first-patch.patch){.link}
    :::
:::
作为前提条件，这些实施需要放在 `~/rpmbuild/SOURCES`{.literal} 目录中。
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#ways_to_create_a_new_spec_file}创建新 SPEC 文件的方法 {.title}
:::
要打包新软件，您需要创建新的 SPEC 文件。
要做到这一点，有两个：
::: itemizedlist
-   从头开始手动编写新的 SPEC 文件
-   使用 `rpmdev-newspec`{.literal} 工具
    这个工具会创建一个未填充的 SPEC 文件，并填写必要的指令和字段。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
某些面向程序员的文本编辑器使用自己的 SPEC 模板预先填充新的
`.spec`{.literal} 文件。`rpmdev-newspec`{.literal}
工具提供了编辑器无关的方法。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#creating-spec-files-with-rpmdev-newspec_working-with-spec-files}使用 rpmdev-newspec 创建新的 SPEC 文件 {.title}
:::
以下步骤演示了如何使用 `rpmdev-newspec`{.literal} 实用程序为上述每个
`Hello World!`{.literal} 程序创建 SPEC 文件。
::: orderedlist
**流程**
1.  进入 `~/rpmbuild/SPECS`{.literal} 目录并使用
    `rpmdev-newspec`{.literal} 实用程序：
    ``` literallayout
    $ cd ~/rpmbuild/SPECS
    $ rpmdev-newspec bello
    bello.spec created; type minimal, rpm version >= 4.11.
    $ rpmdev-newspec cello
    cello.spec created; type minimal, rpm version >= 4.11.
    $ rpmdev-newspec pello
    pello.spec created; type minimal, rpm version >= 4.11.
    ```
    `~/rpmbuild/SPECS/`{.literal} 目录现在包含三个名为
    `bello.spec`{.literal}、`cello.spec`{.literal} 和
    `pello.spec`{.literal} 的 SPEC 文件。
2.  检查文件：
    文件中的指令代表 ["SPEC
    文件是什么"一节](#packaging-software_packaging-and-distributing-software.html#what-is-a-spec-file_rpm-packages "SPEC 文件是什么"){.xref}
    部分中描述的指令。在以下部分中，您将在 `rpmdev-newspec`{.literal}
    的输出文件中填充特定的部分。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`rpmdev-newspec`{.literal} 实用程序不使用特定于任何特定 Linux
发行版的指南或惯例。但是，本文以 Red Hat Enterprise Linux
为目标，因此在引用 RPM 的 Buildroot 时，`%{buildroot}`{.literal}
表示法优先于 `$RPM_BUILD_ROOT`{.literal} 表示法，以便与整个 SPEC
文件中定义或提供的宏保持一致。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#modifying-a-spec-file_working-with-spec-files}修改原始 SPEC 文件以创建 RPM {.title}
:::
以下流程演示了如何修改 `rpmdev-newspec`{.literal} 提供的用于创建 RPM
的输出 SPEC 文件。
::: title
**先决条件**
:::
请确定：
::: itemizedlist
-   特定程序的源代码已放置到 `~/rpmbuild/SOURCES/`{.literal} 目录中。
-   未填充的 SPEC 文件 `~/rpmbuild/SPECS/.spec`{.literal} 文件由
    `rpmdev-newspec`{.literal} 实用程序创建。
:::
::: orderedlist
**流程**
1.  打开由 `rpmdev-newspec`{.literal} 实用程序提供的
    `~/rpmbuild/SPECS/.spec`{.literal} 文件的输出模板：
2.  填充 SPEC 文件的第一个部分：
    第一部分包括 `rpmdev-newspec`{.literal} 分组在一起的指令：
    ::: itemizedlist
    -   `Name`{.literal}
    -   `Version`{.literal}
    -   `Release`{.literal}
    -   `Summary`{.literal}
        `Name`{.literal} 已指定为 `rpmdev-newspec`{.literal} 的参数。
        将 `Version`{.literal} 设置为与源代码的上游发行版匹配。
        `Release`{.literal} 自动设置为 `1%{?dist}`{.literal}，最初是
        `1`{.literal}。每当更新软件包时不更改上游版本
        `Version`{.literal} 时会递增初始值 -
        例如当包含补丁时。发生新的上游版本时，将 `Release`{.literal}
        重置为 `1`{.literal}。
        `Summary`{.literal} 是这个软件的简短说明。
    :::
3.  填充 `License`{.literal}、`URL`{.literal} 和 `Source0`{.literal}
    指令：
    `License`{.literal}
    字段是与上游发行版本中源代码关联的软件许可证。如何在您的 SPEC
    文件中标记 `License`{.literal} 的具体格式会因您所遵循的基于特定 RPM
    的 Linux 发行版指南而有所不同。
    例如，您可以使用
    [GPLv3+](https://www.gnu.org/licenses/quick-guide-gplv3.html){.link}。
    `URL`{.literal} 字段提供上游软件网站的 URL。为保持一致性，请使用
    `%{name}`{.literal} 的 RPM 宏变量，并使用
    `https://example.com/%{name}`{.literal}。
    `Source0`{.literal} 字段提供上游软件源代码的
    URL。它应当直接链接到要打包的软件的特定版本。请注意，本文档给出的示例
    URL
    包含硬编码值，将来可能会更改这些值。同样，发行版本也会改变。要简化这些潜在的将来更改，请使用
    `%{name}`{.literal} 和 `%{version}`{.literal}
    宏。通过使用这些，您只需要更新 SPEC 文件中的一个字段。
4.  填充 `BuildRequires`{.literal}、`Requires`{.literal} 和
    `BuildArch`{.literal} 指令：
    `BuildRequires`{.literal} 指定软件包的构建时间依赖关系。
    `Requires`{.literal} 指定软件包的运行时依赖项。
    这是使用解释编程语言编写的软件，没有原生编译的扩展。因此，使用
    `noarch`{.literal} 值添加 `BuildArch`{.literal} 指令。这告知
    RPM，此软件包不需要与其所构建的处理器体系结构绑定。
5.  填充
    `%description`{.literal}、`%prep`{.literal}、`%build`{.literal}、`%install`{.literal}、`%files`{.literal}
    和 `%license`{.literal} 指令：
    这些指令可以视为小节标题，因为它们是可定义要发生的多行、多指令或脚本化任务的指令。
    `%description`{.literal} 是 `Summary`{.literal}
    软件的较长、更完整的描述，包含一个或多个段落。
    `%prep`{.literal}
    部分指定如何准备构建环境。这通常涉及扩展源代码的压缩存档、补丁应用，以及解析源代码中提供的信息以供
    SPEC 文件后续部分使用。在本节中，您可以使用内置的
    `%setup -q`{.literal} 宏。
    `%build`{.literal} 部分指定如何构建软件。
    `%install`{.literal} 部分包含 `rpmbuild`{.literal}
    如何在构建后将其安装到 `BUILDROOT`{.literal} 目录中的说明。
    该目录是空的 chroot
    基础目录，类似于最终用户的根目录。您可以在此处创建包含已安装文件的任何目录。要创建这样的目录，您可以使用
    RPM 宏而无需硬编码路径。
    `%files`{.literal} 部分指定此 RPM
    提供的文件列表及其在最终用户系统中的完整路径位置。
    在本节中，您可以使用内置宏指示各种文件的角色。这可用于使用
    `rpm`{.literal} 命令查询软件包文件清单元数据。例如：要指明 LICENSE
    文件是一个软件许可证文件，请使用 `%license`{.literal} 宏。
6.  最后部分 `%changelog`{.literal} 是每个 Version-Release
    的软件包日期标记条目列表。它们记录打包更改，而不是软件更改。打包更改示例：添加补丁，更改
    `%build`{.literal} 部分中的构建过程。
    第一行遵循以下格式：
    以 `*`{.literal} 字符开头，后跟
    `Day-of-Week Month Day Year Name Surname  - Version-Release`{.literal}
    在实际更改条目中遵循以下格式：
    ::: itemizedlist
    -   每个更改条目可以包含多个项目，每次更改一次。
    -   每个项目都在新行上启动。
    -   每个项目都以 `-`{.literal} 字符开头。
    :::
:::
您现在已为所需程序编写完整的 SPEC 文件。
有关使用不同编程语言编写的 SPEC 文件示例，请参考：
::: itemizedlist
-   [使用 bash 写入的程序的 SPEC
    文件示例](#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-bello_working-with-spec-files "使用 bash 写入的程序的 SPEC 文件示例"){.link}
-   [使用 Python 编写的程序的 SPEC
    文件示例](#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-pello_working-with-spec-files "使用 Python 编写的程序的 SPEC 文件示例"){.link}
-   [使用 C 编写的程序的 SPEC
    文件示例](#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-cello_working-with-spec-files "使用 C 编写的程序的 SPEC 文件示例"){.link}
:::
从 SPEC 文件中构建 RPM 的信息包括在 ["构建
RPM"一节](#packaging-software_packaging-and-distributing-software.html#building-rpms_packaging-software "构建 RPM"){.xref}
中。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-bello_working-with-spec-files}使用 bash 写入的程序的 SPEC 文件示例 {.title}
:::
本节显示在 bash 中编写的 [**Bllo**]{.strong} 程序的一个 SPEC
文件示例。有关 [**Bllo**]{.strong} [的更多信息，请参阅第 2.1
节，\"What源代码是\"。](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "源代码是什么"){.link}
::: title
**使用 bash 编写的 [**bello**]{.strong} 程序的示例**
:::
``` literallayout
Name:           bello
Version:        0.1
Release:        1%{?dist}
Summary:        Hello World example implemented in bash script
License:        GPLv3+
URL:            https://www.example.com/%{name}
Source0:        https://www.example.com/%{name}/releases/%{name}-%{version}.tar.gz