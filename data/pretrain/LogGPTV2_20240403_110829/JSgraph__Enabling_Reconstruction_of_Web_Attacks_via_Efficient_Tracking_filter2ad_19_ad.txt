Referring again to the legend in Figure 6 and the example
backward tracking graph in Figure 2, we should notice that
the critical events essentially represent calls to the JS APIs we
discussed in Section II-F. Also, notice that a script can create
a node and insert it into the DOM as child of another parent
node, thus producing a parent-child relationship. Similarly,
a JS script can deﬁne a JS function, and then register that
function as a callback.
The forward tracking graph aims to visualize different type
of information. Speciﬁcally, given a starting node, we visualize
signiﬁcant events that have been “caused” by the starting
node. We then recursively proceed by considering all nodes
affected by the starting node, and performing forward tracking
from each of them. An example of forward tracking graph
related to the example in Section I-B is shown in Figure 8 (in
Section IV). This graph was obtained by selecting the second-
to-last URL from the backward tracking graph in Figure 2
(i.e., the URL of the page immediately preceding the malware
download event), and walking forward through the logs.
To better explain what type of relationships are captured
by JSgraph’s visualization module, we now provide another
example, for which we can analyze both the HTML content
and the related graph. Figure 7 shows the forward tracking
graph related to the HTML content in the top left quadrant.
The logs were produced using our instrumented browser to
load the HTML page, and then click on the “Click me” button.
Notice that the showHello function is deﬁned as part of a
script, but registered as an event listener via a DOM level
0 onclick attribute. Also, notice that the deﬁnition of the
anonymous function that is set as a callback for setTimeout,
is also represented in the graph, with an edge from Script 52 to
the Scheduled Callback node (notice that the function name is
missing from the graph, since this is an anonymous function).
Also, the graph shows that Script 51 is loaded from an external
URL, and that it performs critical operations on the window
object (an attempt to create a popunder window).
IV. ANALYSIS OF WEB ATTACKS
In this section, we report details on three experiments
aimed at demonstrating how JSgraph can record ﬁne-grained
8
Fig. 6: Audit Logs Visualization – Graph Legend
logging its children. In addition, we should notice that some
HTML elements may contain attributes with large amounts of
data. For instance, the img tag may have a src that embeds
an entire (e.g., base64 encoded) image into a data: URL4.
Similarly, CSS styles could also include data: URLs (e.g.,
to include a background image)5. To avoid storing the same
large markup every time a DOM attribute or style is changed,
therefore improving performance and storage overhead, we
proceed as follows. The ﬁrst time a node containing a data:
URL is observed by our instrumentation hooks, we cache a
hash of the data: URL. Next time an attribute or style is
modiﬁed and we log the event, if the data: URL has not
changed we only log a placeholder that indicates that the
data: URL has not changed since we have last seen that
node. This will be reﬂected in the logs, from which it is then
easy to reconstruct the complete representation of the node by
retrieving the full data: URL from the earlier logs related
to the same node.
In large part, the overhead imposed by JSgraph comes from
the log I/O overhead (i.e., writing the logs to disk). To reduce
this overhead, we ofﬂoad the job of storing the audit logs
to disk to a separate Blink thread. To this end, we leverage
base::SingleThreadTaskRunner6, which allows us to
create log writing tasks that are responsible for periodically
storing batches of recorded events and can be executed in a
separate thread (via PostTask).
III. VISUALIZING JSgraph’S AUDIT LOGS
As discussed in Section II, JSgraph’s audit logs are very
detailed, as they contain ﬁne-grained information about all
DOM modiﬁcations, the source code of JS scripts, critical JS
API calls and parameters, ﬁle download events, etc. Finding
interesting information among these detailed logs can be time
consuming.
To aid the investigation process, JSgraph allows for visu-
alizing important events captured in the audit logs in the form
of a graph. A complete legend showing the meaning of the
node shapes and what relationships are tracked by JSgraph
4https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics of HTTP/
Data URIs
5https://css-tricks.com/data-uris/
6see /src/base/single thread task runner.h
Node LegendPageiframeUSER NAVRelationship LegendCritical EventHTTP redirectionREDIRECTuser-drivenpage navigationJS NAVJS-driven navigationScriptCallback deﬁnitionand registrationJS-driven insertion of DOM elementCREATEDEFINITION(, )REGISTERCallbackEXECUTEJS code executes critical eventPARENT-CHILDElementlistener for the load and DOMContentLoaded events,
whereas Script 628 deﬁnes the showPopup function that will
display the “fake” download dialog box in Figure 1d, and
registers it as a scheduled callback. As it executes, Script 629
will raise a system alert with the message “Update the latest
version of Flash Player. Your current Adobe Flash Player
version is out of date,” as shown in Figure 1c. This has
the effect of “freezing” the tab, including the execution of
all scheduled callbacks and the parsing of the rest of the
page, until the user clicks “OK”. As the user clicks on “OK”
to close the alert window, the browser ﬁnishes loading the
page, and ﬁres the DOMContentLoaded and load event
listeners, at logic order 2936 and 2937, respectively. Then, the
scheduled callback at logic order 2938 is activated to show
the “fake” download dialog box (Figure 1d), using JS-driven
animations activated at logic order 2939-2955. When the user
clicks on the download button, the static HTML anchor shown
in the previous attack code excerpt is activated, to navigate
to the malware download URL. At the same time, the DOM
level 0 onclick callback will execute the registration of the
scheduled callback, which will be triggered one second later
(at logic order 2957) to make sure the malware download is
indeed initiated.
B. Social Engineering Extension Download Attack
We also found that visiting the gomovies[.]to site from a
Linux machine would lead to the installation of a malicious
browser extension, rather than a .dmg software package7.
As in the malware download case, clicking on the play
button on gomovies[.]to causes a new window to popup, under
the getsportscore[.]com domain name. As shown in Figure 9,
a popup dialog box lures the user to add an extension called
Sport Score to Chrome, which has been found to be responsible
for delivering unwanted ads and PUP software8 and is detected
by the ESET anti-virus as JS/Adware.StreamItOnline9. Then,
clicking the “ADD TO CHROME” button causes a browser
extension installation popup.
The backward and forward tracking graphs for this attack
are shown in Figure 10 and 11, respectively. The backward
tracking graph is quite similar to the malware download
case (though the ad-delivering and extension serving domains
are different), and we therefore show only part of it, for
space reasons. The forward tracking graph is more complex.
The reason is that the install.getsportscore[.]com site, which
lures the user into installing the extension, contains a large
amount of user tracking code (due to space constraints, we
omit a detailed analysis of the tracking code). However,
the mechanism that triggers Chrome’s extension installation
authorization popup is fairly straightforward, and can be seen
in both the backward and forward tracking graphs. Speciﬁcally,
the JS code at install.getsportscore[.]com uses jQuery to ﬁrst
register a callback on mouse clicks, as shown in the attack
code snippet below (extracted from our audit logs).
$addToBrowser.click(function (e) {
e.preventDefault();
installExtension();
});
7The User-Agent string used during the recording of the previous malware
download attack was purposely set to advertise a Mac OS machine, rather
than a Linux machine
8Simply search for: chrome ”Sports Score” extension adware
9http://www.virusradar.com/en/JS Adware.StreamItOnline/map/day
Fig. 7: HTML+JS content and related forward tracking graph
details about web-based attacks and make their post-mortem
analysis easier. We will ﬁrst provide details on the forward
tracking graph for the malware download attack discussed
in Section I-B. Then, we will analyze an in-the-wild social
engineering attack that tricks users into installing a malicious
extension, and a phishing attack based on a cross-site scripting
(XSS) vulnerability in real web software [18].
A. Forward Tracking for Malware Download Attack
In Section I-B, we presented the backward tracking graph
in Figure 1, which reconstructs the navigation steps and
events that took the user from the starting page (the Google
search) to the malware download event. On the other hand,
Figure 8 reconstructs the JS scripts, callbacks, critical events,
and navigations that occurred starting from the URL the user
visited right before the malware download event (i.e., starting
from the second-to-last node in Figure 1).
Figure 8 shows that an “inline” (i.e., not externally loaded)
script (Script 624) ﬁrst deﬁnes an anonymous function (at
source line 13, column 19) to be registered as a scheduled
callback. The scheduled callback registration is actually ex-
ecuted later, after a user’s click, which activates the event
callback at logic order 2956. This behavior corresponds to
the excerpt from the attack code shown below. By analyzing
the audit logs related to these graph nodes, we found that the
onclick callback will be used later to display the installation
instructions (hence the function name “showStep”) for the
downloaded software (see Figure 1e).
//DOM level 0 event
//Script_624 (simplified)
Script 625 and Script 627 deﬁne and register an event
9
 // s2.js window.open("http://wikipedia.org").blur(); window.focus(); // HTML content     Click here to show "Hello"  Click me  mainhxxp://anonymous/test_for_callback.htmlLogic Order: 0USER NAVScript_51hxxp://anonymous/s2.jsLogic Order: 1PARENT-CHILDScript_52InlineLogic Order: 5PARENT-CHILDEvent_Callback:clickPosition: (36,50)Logic Order: 6DEFINITIONonclick(8,22)REGISTERwindow.open:URL: hxxp://wikipedia.orgLogic Order: 2EXECUTEwindow.blurframe: 40063644059904Logic Order: 3EXECUTEwindow.focous:frame: 40063644058176Logic Order: 4EXECUTEScheduled_CallbackLogic Order: 7DEFINITION(5,19)REGISTERAlertMessage: Hello!Logic Order: 8EXECUTEFig. 8: Forward tracking of a social engineering malware download attack.
(a)
(b)
(c)
Fig. 9: In-the-wild social engineering extension download attack
The jQuery library translates the above code into the reg-
istration of two callbacks: one on the DOMContentLoaded
event, which in turn registers a callback for click events on
the “ADD TO CHROME” button shown in Figure 9b.
C. XSS Attack Analysis
We now discuss an attack based on an XSS vulnerability
on the PHPEcho CMS 2.0-rc3, a content management system
(this vulnerability was ﬁrst disclosed by Jose Luis Gongora
Fernandez in June 2009 [18]). We use this vulnerability to
conveniently reproduce a possible XSS-driven phishing attack
using a keylogger to steal Facebook login credentials. To
reproduce the attack, we deploy PHPEcho CMS 2.0-rc3 on
a virtual machine with CentOS 5.11, Apache 2.2.3, PHP
5.1.6, and MYSQL 5.0.95,
to satisfy PHPEcho’s software
dependencies. We then leverage third-party attack code to
trigger the XSS vulnerability, and launch the phishing attacks.
We reproduce the Facebook phishing attack by making
use of a JS-based key-logger adapted from [18]. First, using
the XSS vulnerability, a fake Facebook login user interface is
injected and forced to alway appears in the middle of the page,
as shown in Firgure 12a. A site visitor may get confused by this
window, and type in their username and password to make the
window disappear. In the background, a key-logger captures
the victim’s keypresses and sends them to the attacker in real
time. Even if the victim realized that this may be a phishing
attempt before submitting the credentials, the attacker will have
gained precious information that may be used for reducing the
search space in a following brute-force attack, or other social
10
Fig. 10: Extension download attack: backtracking graph (partial)
hxxp://upnow2app.pressupdateforsafesoft.download./Ea5j7QwuOrbRLJRiPc_lcut6oqo3...Logic Order: 2928Script_624InlineLogic Order: 2929PARENT-CHILDScript_625InlineLogic Order: 2930PARENT-CHILDScript_626InlineLogic Order: 2931PARENT-CHILDScript_627hxxp://code.jquery.com/jquery-latest.min.jsLogic Order: 2932PARENT-CHILDScript_628InlineLogic Order: 2933PARENT-CHILDScript_629InlineLogic Order: 2934PARENT-CHILDEvent_Callback:clickPosition: (644,244)Logic Order: 2956DEFINITIONonclick(43,30)REGISTERhxxp://update4soft.pressbuttonforupdate.bid/dl.php?pcl=Ea5j7QwuOrbRLJRiPc_lcut...Logic Order: 2958USER NAVScheduled_CallbackLogic Order: 2957DEFINITION(13,19)Event_Callback:loadLogic Order: 2937DEFINITION(33,169)REGISTEREvent_Callback:DOMContentLoadedLogic Order: 2936DEFINITIONJ(1,30176)REGISTERScheduled_CallbackLogic Order: 2939DEFINITION(3,1635)Scheduled_Callback x16Logic Order: 2940-2955DEFINITION(3,6878)Scheduled_CallbackLogic Order: 2938DEFINITIONshowPopup(57,29)REGISTERAlertMessage: Update the latest version of Flash Player. Your c...Logic Order: 2935EXECUTEREGISTERREGISTERREGISTERhxxp://www.bitadexchange.com/a/display.php?stamat=m%7C%2C%2CA2IWYiLyoGU3B09GH0...Logic Order: 3309JS NAVhxxp://install.getsportscore.com/?pid=51851&clickid=US149496919611924653623609...Logic Order: 3310REDIRECTScript_666hxxp://code.jquery.com/jquery-1.11.3.min.jsLogic Order: 3313PARENT-CHILDEvent_Callback:DOMContentLoadedLogic Order: 3337DEFINITIONJ(1,30241)REGISTEREvent_Callback:clickPosition: (830,371)Logic Order: 3375DEFINITION(3,5172)REGISTERExtension InstallURL: hxxps://chrome.google.com/webstore/detail/fciohdpjmgn...Logic Order: 3382EXECUTEFig. 11: Extension download attack: forward tracking graph
engineering efforts, for example.
To identify similar attacks in the audit logs, an analyst may
start by looking for frequent callbacks triggered by keypress
events, paired with critical events such as XMLHttpRequests,
loading a third-party image, iframe, etc., that may be used to
exﬁltrate the stolen information. In our speciﬁc example, the
analysis may start from the pair of keypress event callback and
loading of a third-party image, as highlighted in red in Fig-
ure 12b. An analysis of the (partial) backward tracking graph,
drawn by starting from those events, shows that Script 62 is
responsible for registering the keypress callbacks. Also, the
script registers a scheduled callback that periodically loads
an external image. Looking at the image’s URL parameters,
we can notice that this is likely used to encode the key code
captured by the keypress callback, thus sending them to the
attacker. From the forward tracking graph in Figure 12c, which
was drawn starting from the page that contains Script 62, we
can see that the scheduled callback deﬁned by Script 62 at line
15, column 27, is activated multiple times during the attack
(once every 200 milliseconds, via a setTimeInterval),
and that every time it is called, it loads the same third-party
image with different parameter values.
V. PERFORMANCE EVALUATION
In this section, we present a set of experiments dedicated
to measuring the overhead introduced by our JSgraph browser
instrumentations.
A. Experimental Setup
JSgraph is built upon Chromium’s codebase version
48.0.2528.1. Our source code modiﬁcation amount to approx-
imately 2,400 lines of C++ code, 150 lines of IDL code
and 800 lines of Python code. We plan to make JSgraph
available at https://github.com/perdisci/JSgraph. To evaluate
the overhead imposed by our code changes to Chromium, we
performed three different sets of experiments using both Linux
and Android systems, as described below. In all experiments,
we leveraged Chromium’s TRACE_EVENT instrumentation
infrastructure [5] to accurately measure the time spent exe-
cuting our instrumentation code, and to create the baseline
performance measurements needed to compute the relative
overhead introduced by JSgraph.
Linux – automated browsing (Linux Top1K): The goal of this
experiment
is to measure the performance of JSgraph on