### s ∈ S? Can this Selection be Performed in a Computationally Efficient Way?
- **How are the QoS Profiles Obtained?** Are they manually designed, or can they be automatically constructed?

### Our Vision for This Research Project
Our vision for this research project is to explore, from both theoretical and practical perspectives, the boundaries of what can be formally specified and automatically analyzed concerning Quality of Service (QoS) and non-functional requirements. We leverage existing literature on the problem and approach the research from a Formal Methods perspective [2,10].

### 3. Related Work
There has been extensive discussion on what constitutes non-functional requirements [5,15]. However, most research in service selection has focused on QoS attributes that allow some type of measurement. We follow this assumption since it is a consequence of having formal treatment and automatic analysis as goals. According to the taxonomy of requirements presented in [5], we call this subset quantitative attributes. Examples of these attributes include response time, memory usage, price, reputation, etc. For an extensive study of the state of the art in the service selection problem, we refer the interested reader to [14] where Moghaddam et al. present a comparative review of existing approaches, and to [7] where the authors perform a systematic literature review. A clear overview of the problem and its foundations can also be found in [8].

One way to classify the literature is by how each work models QoS attributes and policies. This yields three broad categories: single-value attributes, range-valued attributes, and probabilistic attributes. In the single-value setting, the QoS provided for a particular attribute is modeled as a constant value. An example of this can be seen in [18], where the initial quality model proposed by the authors is a vector with specific values of attributes such as price, duration, reputation, etc. In the range-valued setting, the model is usually an interval or a set of values (e.g., resp. time = {100, 200, 300, 400} or resp. time = [100, 400]). A description of these kinds of models can be found in [11, Section 2]. The latter perspective emerges by acknowledging the limitations of the former: there are scenarios in which the single value model becomes insufficient. Similarly, recent years have seen the proposal of models that capture the probabilistic nature of many quality of service attributes, as seen in [19].

In this context, one of the distinctive points of our research program is the perspective of treating QoS attributes from a general point of view while aiming to contribute with practical implementations of our proposals. Instead of studying the behavior of specific quality attributes such as time, memory consumption, or availability, our approach makes no assumption on the attribute other than that they are interpreted as values. Such a homogeneous treatment of attributes enables the modeling of interdependencies between them and a more holistic treatment of their space of values. Furthermore, this general point of view will also have an impact when we discuss our approach to the probabilistic setting.

### 4. Contributions

#### 4.1. Towards a Formalization of Quality of Service Contracts
A relatively new approach to the analysis of hybrid systems' specifications, due to Pappas et al. [17], integrates SMT-solving [4] with convex constraints [6], under the name of SMC – Satisfiability Modulo Convex Optimization. As a first step in our research program, we adopted SMC as a specification language and developed an efficient two-phase procedure for evaluating SLAs based on SMC. A formula in this language is essentially a boolean combination of convex constraints and propositional variables, as shown in the following example.

**Example 1 (QoS Requirement in SMC):** Consider a client interested in setting an upper bound for the execution time of the service with attributes that model the initialization time and the time it takes to process a kilobyte of information. A possible requirement can be stated like this:
\[ \text{initTime} + 256 \cdot \text{timePerKB} \leq 50 \]

The two-phase analysis procedure for deciding whether \( s \models R_q \) is adapted to profit from the fact that specifications can be minimized in a preprocessing phase when the service is registered in the repository. The expectation is that such preprocessing might produce an efficiency gain when, at runtime, \( s \models R_q \) is checked to evaluate if an SLA is met. A detailed presentation, both theoretical and experimental, of the technique can be found in [12]. An interesting aspect of our proposal is that the minimization procedure is susceptible to being done incrementally by performing successive partial minimizations of a given specification before it is fully minimized. This exposes that most of the efficiency gain in the analysis is reached after investing a small portion of the total minimization time required.

#### 4.2. Quality of Service Ranking
The aforementioned view guarantees the selection of a service satisfying the requirements of the executing application but does not provide any insight when there is no service whose QoS profile fully complies with those requirements. In this scenario, an application would be pushed to abort its execution as there is no possible SLA on the QoS required.

A geometrical interpretation of the judgment \( s \models R_q \) expresses that all satisfying values of real variables of \( s \) also satisfy \( R_q \). On the other hand, a negative answer just means that there exists at least one value satisfying \( s \) and not satisfying \( R_q \). This perspective opens up the possibility of evaluating partial compliance of QoS contracts by estimating what we call the inclusion ratio, serving the purpose of ranking services by their degree of QoS compliance. A detailed explanation of the notion of inclusion ratio can be found in [13, Section 2.1]. In the following, we introduce the main concepts.

Given a formula \( \alpha \) in a formal QoS specification language such as [13, Definition 1], we define the set of values satisfying the formula as \( [\![\alpha]\!] = \{ x \mid x \models \alpha \} \). Based on this definition, proving the formula \( s \models R_q \) is to check whether \( [\![s]\!] \subseteq [\![R_q]\!] \) (i.e., whether all of the values of the quantitative attributes offered by the service are accepted by the requirements). Then, we propose to compute the volume of the intersection between \( [\![s]\!] \) and \( [\![R_q]\!] \) relative to the volume of \( [\![s]\!] \), referred to as the inclusion ratio. This indicator essentially quantifies what percentage of the QoS values offered by the QoS profile are actually accepted by the requirements contract. Under this interpretation, we argue that such an indicator serves the purpose of quantifying the partial compliance of \( R_q \) by \( s \), and then functionally compliant services can be QoS ranked by ordering them through the inclusion ratio.

We developed a prototype tool based on a state-of-the-art convex polytope volume estimator to analyze the partial compliance of \( R_q \) by \( s \) represented as sets of polytopes. The interested reader is referred to [13] for further details of the technique, together with a nontrivial discussion about its implementation in the context of contracts consisting of sets of convex polytopes with non-empty intersections.

#### 4.3. Probabilistic Treatment of Quality of Service
Recently, there has been a lot of interest in the probabilistic treatment of QoS attributes in the context of web services [9,16,19]. This is a consequence of recognizing that: a) the behavior of many attributes is intrinsically probabilistic, and b) summarized metrics such as min, max, or average that give rise to single-value or range-valued models may not be sufficient to distinguish between different services. To the best of our knowledge, most of the research has focused on adopting QoS models based on discrete probabilistic distributions where each attribute is independent. To overcome these limitations, we are currently developing an approach that considers probability density functions of continuous multivariate distributions as QoS profiles and probability bounds over regions of attribute values as QoS requirements. For the development of the procedure that verifies if a given QoS requirement holds, we are studying state-of-the-art mathematical tools for integration and for operating with continuous distributions.

#### 4.4. Validation and Experimental Evaluation
The methodology we propose for validating our work is both theoretical and experimental. On the one hand, rigorous mathematical proofs allow us to draw conclusions about the expressive power and limits of the formal languages we propose and the correctness and computational complexity of the analysis methods we develop. On the other hand, extensive experimentation allows us to draw statistically meaningful conclusions to reason about the efficiency and scalability of the tools we develop. The difficulty of finding real-life scenarios where QoS specifications are formally described pushes us to construct case studies by automatically generating synthetic randomized specifications of different sizes and shapes. As noted in [7], this is a common and accepted practice in the field. Nevertheless, to face the challenge of constructing more realistic case studies, our approach for future work is the inclusion of data from publicly available datasets on QoS, such as the QWS dataset [1] or the WS-DREAM dataset [20].

### 5. Summary
We presented a research program consisting of the development of formal languages and tools to analyze QoS attributes in the context of the Service Selection problem. In particular, our research focuses on what is called quantitative attributes, the fragment of the QoS attributes that is considered to admit formal treatment. We discussed our vision and methodology in the context of the state of the art and briefly overviewed the main contributions of our approach. We believe the rapid development and radical transformation of cloud computing technologies offer exciting possibilities for the research into Service Selection and the treatment of QoS in the context of Service-Oriented Computing.

### References
1. Al-Masri, E., Mahmoud, Q.H.: QoS-based discovery and ranking of web services. In: 2007 16th International Conference on Computer Communications and Networks, pp. 529–534, August 2007. https://doi.org/10.1109/ICCCN.2007.4317873
2. Bjørner, D., Havelund, K.: 40 years of formal methods. In: Jones, C., Pihlajasaari, P., Sun, J. (eds.) FM 2014. LNCS, vol. 8442, pp. 42–61. Springer, Cham (2014). https://doi.org/10.1007/978-3-319-06410-9_4
3. Bouguettaya, A., Sheng, Q.Z., Daniel, F. (eds.): Web Services Foundations. Springer, New York (2014). https://doi.org/10.1007/978-1-4614-7518-7
4. De Moura, L., Bjørner, N.: Satisfiability modulo theories: introduction and applications. Commun. ACM 54(9), 69–77 (2011). https://doi.org/10.1145/1995376.1995394
5. Glinz, M.: On non-functional requirements. In: 15th IEEE International Requirements Engineering Conference (RE 2007), pp. 21–26, October 2007. https://doi.org/10.1109/RE.2007.45
6. Grünbaum, B.: Convex Polytopes. Graduate Texts in Mathematics, Springer, New York (2003). https://doi.org/10.1007/978-1-4613-0019-9
7. Hayyolalam, V., Pourhaji Kazem, A.A.: A systematic literature review on QoS-aware service composition and selection in cloud environment. J. Netw. Comput. Appl. 110, 52–74 (2018). https://doi.org/10.1016/j.jnca.2018.03.003
8. Ishikawa, F.: QoS-based service selection. In: Bouguettaya, A., Sheng, Q.Z., Daniel, F. (eds.) Web Services Foundations, pp. 375–397. Springer, New York (2014). https://doi.org/10.1007/978-1-4614-7518-7_15
9. Klein, A., Ishikawa, F., Bauer, B.: A probabilistic approach to service selection with conditional contracts and usage patterns. In: Baresi, L., Chi, C.-H., Suzuki, J. (eds.) ICSOC/ServiceWave 2009. LNCS, vol. 5900, pp. 253–268. Springer, Heidelberg (2009). https://doi.org/10.1007/978-3-642-10383-4_17
10. Kreiker, J., Tarlecki, A., Vardi, M.Y., Wilhelm, R.: Modeling, Analysis, and Verification - The Formal Methods Manifesto 2010 (Dagstuhl Perspectives Workshop 10482) (2011). https://doi.org/10.4230/DAGMAN.1.1.21. 20 pages
11. Martín-Díaz, O., Ruiz-Cortés, A., Durán, A., Benavides, D., Toro, M.: Automating the procurement of web services. In: Orlowska, M.E., Weerawarana, S., Papazoglou, M.P., Yang, J. (eds.) ICSOC 2003. LNCS, vol. 2910, pp. 91–103. Springer, Heidelberg (2003). https://doi.org/10.1007/978-3-540-24593-3_7
12. MartinezSune, A.E., LopezPombo, C.G.: Automatic quality-of-service evaluation in service-oriented computing. In: Riis Nielson, H., Tuosto, E. (eds.) COORDINATION 2019. LNCS, vol. 11533, pp. 221–236. Springer, Cham (2019). https://doi.org/10.1007/978-3-030-22397-7_13
13. MartinezSune, A.E., LopezPombo, C.G.: Quality of service ranking by quantifying partial compliance of requirements. In: Bliudze, S., Bocchi, L. (eds.) COORDINATION 2020. LNCS, vol. 12134, pp. 181–189. Springer, Cham (2020). https://doi.org/10.1007/978-3-030-50029-0_12
14. Moghaddam, M., Davis, J.G.: Service selection in web service composition: a comparative review of existing approaches. In: Bouguettaya, A., Sheng, Q.Z., Daniel, F. (eds.) Web Services Foundations, pp. 321–346. Springer, New York (2014). https://doi.org/10.1007/978-1-4614-7518-7_13
15. O’Sullivan, J., Edmond, D., ter Hofstede, A.: What’s in a service? Distrib. Parallel Databases 12(2), 117–133 (2002). https://doi.org/10.1023/A:1016547000822
16. Rosario, S., Benveniste, A., Haar, S., Jard, C.: Probabilistic QoS and soft contracts for transaction-based web services orchestrations. IEEE Trans. Serv. Comput. 1(4), 187–200 (2008). https://doi.org/10.1109/TSC.2008.17
17. Shoukry, Y., Nuzzo, P., Sangiovanni-Vincentelli, A.L., Seshia, S.A., Pappas, G.J., Tabuada, P.: SMC: satisfiability modulo convex optimization. In: Proceedings of the 20th International Conference on Hybrid Systems: Computation and Control, HSCC 2017, New York, NY, USA, pp. 19–28. Association for Computing Machinery, April 2017. https://doi.org/10.1145/3049797.3049819
18. Zeng, L., Benatallah, B., Ngu, A., Dumas, M., Kalagnanam, J., Chang, H.: QoS-aware middleware for Web services composition. IEEE Trans. Software Eng. 30(5), 311–327 (2004). https://doi.org/10.1109/TSE.2004.11
19. Zheng, H., Yang, J., Zhao, W.: Probabilistic QoS aggregations for service composition. ACM Trans. Web 10(2), 12:1–12:36 (2016). https://doi.org/10.1145/2876513
20. Zheng, Z., Lyu, M.R.: WS-DREAM: a distributed reliability assessment mechanism for web services. In: 2008 IEEE International Conference on Dependable Systems and Networks with FTCS and DCC (DSN), pp. 392–397 (2008). https://doi.org/10.1109/DSN.2008.4630108

### Software Demonstrations
**A Crowdsourcing-Based Knowledge Graph Construction Platform**

**Authors:**
- Xingkun Liu
- Zhiying Tu
- Zhongjie Wang
- Xiaofei Xu
- Yin Chen

**Affiliation:**
School of Computer Science and Technology, Harbin Institute of Technology, Harbin, China

**Contact:**
PI: EMAIL, {tzy_hit, rainy, xiaofei, chenyin}@hit.edu.cn

**Abstract:**
Nowadays, knowledge graphs are backbones of many information systems that require access to structured knowledge. While there are many openly available knowledge graphs, self-constructed knowledge graphs in specific domains are still in need, and the process of construction usually consumes a lot of manpower. In this paper, we present a novel platform that takes advantage of crowdsourcing to construct and manage knowledge graphs. The platform aims to provide knowledge graph automatic construction as a service and reduce the tenants' effort to construct knowledge graphs.

**Keywords:**
- Knowledge graph
- Crowdsourcing
- Ontology alignment

### 1. Introduction
Nowadays, knowledge graphs are backbones of many information systems that require access to structured knowledge. A large number of knowledge graphs such as YAGO [7], Freebase [1], and DBPedia [4] have been constructed and applied to many real-world applications. A knowledge graph is composed of entities that present as nodes and relations that present as different types of edges between nodes. While there are many openly available knowledge graphs, self-constructed knowledge graphs in specific domains are still in need, and the process of construction usually consumes a lot of manpower.

In this paper, we present a novel platform that takes advantage of crowdsourcing to construct and manage knowledge graphs. The platform aims to provide knowledge graph automatic construction as a service and reduce the tenants' effort to construct knowledge graphs. Tenants are able to define knowledge graph schemas according to the format of their resources for building knowledge graphs. While different tenants define knowledge graph schemas differently, the platform will align and merge those schemas and generate a unified schema. Multiple tenants could contribute resources used for constructing knowledge graphs incrementally. Additionally, for convenience, the platform provides several general application interfaces for manipulating knowledge graphs, such as querying interfaces.

c Springer Nature Switzerland AG 2021