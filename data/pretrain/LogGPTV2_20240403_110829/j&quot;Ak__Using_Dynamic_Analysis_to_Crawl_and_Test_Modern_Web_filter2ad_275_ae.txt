# Analysis of Web Application Crawlers and Vulnerability Detection

## Overview
This section analyzes the performance of several web application crawlers, focusing on their ability to discover unique URL structures and detect cross-site scripting (XSS) vulnerabilities. The tools compared include j¨Ak, W3af, Skipfish, Crawljax, and Wget.

## Unique URL Structures Extraction
- **j¨Ak** extracted the highest number of unique URL structures in 10 applications.
- In one application, Nibbleblog, j¨Ak, W3af, and Skipfish extracted the same number of URL structures.
- For the remaining two applications, W3af extracted the highest number of URL structures:
  - In Joomla, W3af extracted 3 more URL structures than j¨Ak.
  - In Tidios, W3af extracted 251 URLs, while j¨Ak extracted 166.

### Qualitative Interpretation
To understand the extent to which each tool explores the web application surface, we analyzed the URLs extracted by j¨Ak and the other tools. We calculated the complement sets:
- **Set 1**: URLs extracted by j¨Ak but missed by other crawlers.
- **Set 2**: URLs not discovered by j¨Ak but extracted by other tools.

The results are summarized in Table 4:

| Tool        | Surface Discovered Only by j¨Ak | Surface Missed by j¨Ak |
|-------------|---------------------------------|------------------------|
| Crawljax    | +85%                           | -18%                   |
| W3af        | +98%                           | -0.5%                  |
| Wget        | +70%                           | -20%                   |
| Skipfish    | +90%                           | -22%                   |

On average, j¨Ak explored a surface 86% larger than the other tools. The unexplored surface by j¨Ak ranged from 0.5% (Crawljax) to 22% (Skipfish).

### Manual Inspection
We manually inspected a random sample of 1030 (15%) URLs not discovered by j¨Ak and identified eight classes of URLs, as shown in Table 5:

| URL Origin              | URLs | Fraction   |
|-------------------------|------|------------|
| URL Forgery             | 774  | 75.15%     |
| Static Resources        | 57   | 5.53%      |
| Unsupported Actions     | 55   | 5.34%      |
| User Session Management | 53   | 5.15%      |
| Bugs                    | 74   | 7.18%      |
| New Content             | 17   | 1.65%      |
| Beyond Max Depth (W3af) | 41   | 3.98%      |
| Unknown                 | 13   | 1.26%      |
| **Total**               | 1030 | **100.00%**|

### XSS Vulnerability Detection
- **j¨Ak** detected XSS vulnerabilities in three out of five web applications: phpBB, Piwigo, and MyBB 1.8.1.
- **Wget** and **Crawljax** were excluded as they are pure crawlers and cannot discover vulnerabilities.
- **W3af** and **Skipfish** detected the XSS vulnerability in MyBB 1.8.1 but had issues with false positives:
  - W3af reported 49 false positives in Mediawiki.
  - Skipfish reported 13 false positives in Gallery.
- **j¨Ak** did not report any false positives, attributed to its dynamic analysis approach.

## Related Work
### Analysis of Web Application Scanners
- **Bau et al. [15]** and **Doupé et al. [16]** studied the detection power of web application scanners, concluding that while effective for reflected XSS and SQLi, they perform poorly for more sophisticated vulnerabilities due to a lack of client-side support.
- **Doupé et al. [16]** also explored the coverage of web applications, focusing on multi-step operations.

### Improvements in Web Application Scanning
- **State-aware-crawler [14]**: Uses page clustering to improve detection of higher-order XSS and SQLi.
- **Crawljax [2]**: Proposes model inference based on user-clickable areas for AJAX-based web applications.
- **AUTHSCAN [17]** and **SSOScan [18]**: Focus on Web-based Single Sign-On functionalities and Facebook SSO integration, respectively.

### Comparison with j¨Ak
- **Artemis [19]**: A JavaScript testing framework that generates and executes test cases to increase client-side code coverage. Artemis and j¨Ak share similarities in input generation but differ in server-side control assumptions.

## Conclusion
This paper presents a novel technique for crawling web applications using dynamic analysis of client-side JavaScript. The tool, j¨Ak, was evaluated against four other web application scanners using 13 web applications. Results show that j¨Ak can explore a surface 86% larger than the other tools.

## Acknowledgements
This work was supported by the German Ministry for Education and Research (BMBF), Hessian LOEWE excellence initiative, and DFG projects RUNSECURE, TESTIFY, and INTERFLOW.

## References
1. Zhou, J., Ding, Y.: An analysis of URLs generated from JavaScript code. In: 2012 IEEE/ACIS 11th International Conference on Computer and Information Science (ICIS), vol. 5, pp. 688–693 (2012)
2. Mesbah, A., van Deursen, A., Lenselink, S.: Crawling AJAX-based web applications through dynamic analysis of user interface state changes. ACM Trans. Web 6(1), 3:1–3:30 (2012)
3. Urgun, B.: Web Input Vector Extractor Teaser (2015). https://github.com/bedirhan/wivet
4. Hickson, I.: A vocabulary and associated APIs for HTML and XHTML (2014). http://dev.w3.org/html5/workers/
5. van Kesteren, A., Gregor, A., Ms2ger, Russell, A., Berjon, R.: W3C DOM4 (2015). http://www.w3.org/TR/dom/
6. The Python Software Foundation: Python (2015). https://www.python.org/
7. Apple Inc.: The WebKit Open Source Project (2015). https://www.webkit.org/
8. Riverbank Computing Limited: PyQt - The GPL Licensed Python Bindings for the Qt Application Framework (2015). http://pyqt.sourceforge.net/
9. Google Inc.: V8 JavaScript Engine (2015). https://code.google.com/p/v8/
10. Mozilla Foundation: SpiderMonkey (2015). https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey
11. Zalewski, M.: Skipfish (2015). https://code.google.com/p/skipfish/
12. Riancho, A.: w3af: Web Application Attack and Audit Framework (2015). http://w3af.org/
13. Nikšić, H., Scrivano, G.: GNU Wget (2015). http://www.gnu.org/software/wget/
14. Doupé, A., Cavedon, L., Kruegel, C., Vigna, G.: Enemy of the state: a state-aware black-box vulnerability scanner. In: Proceedings of the 2012 USENIX Security Symposium (USENIX 2012), Bellevue, WA (2012)
15. Bau, J., Bursztein, E., Gupta, D., Mitchell, J.: State of the art: automated black-box web application vulnerability testing. In: 2010 IEEE Symposium on Security and Privacy (SP) (2010)
16. Doupé, A., Cova, M., Vigna, G.: Why Johnny can’t pentest: an analysis of black-box web vulnerability scanners. In: Kreibich, C., Jahnke, M. (eds.) DIMVA 2010. LNCS, vol. 6201, pp. 111–131. Springer, Heidelberg (2010)
17. Guangdong, B., Guozhu, M., Jike, L., Sai, S.V., Prateek, S., Jun, S., Yang, L., Jinsong, D.: Authscan: Automatic extraction of web authentication protocols from implementations. In: 2013 Annual Network and Distributed System Security Symposium (NDSS). The Internet Society (2013)
18. Zhou, Y., Evans, D.: Ssoscan: automated testing of web applications for single sign-on vulnerabilities. In: 23rd USENIX Security Symposium (USENIX Security 2014), pp. 495–510. USENIX Association, San Diego, CA (2014)
19. Artzi, S., Dolby, J., Jensen, S.H., Møller, A., Tip, F.: A framework for automated testing of JavaScript web applications. In: Proceedings of the 33rd International Conference on Software Engineering, ICSE 2011, pp. 571–580. ACM, New York, NY, USA (2011). http://doi.acm.org/10.1145/1985793.1985871