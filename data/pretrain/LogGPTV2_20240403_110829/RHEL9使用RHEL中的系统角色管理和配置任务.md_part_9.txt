    ::: itemizedlist
    -   如果系统有一个 drop-in 目录，则默认值通过模板
        `/etc/ssh/ssh_config.d/{ssh_drop_in_name}.conf`{.literal}
        来定义。
    -   如果系统没有随时可访问的目录，则默认值为
        `/etc/ssh/ssh_config`{.literal}。
    -   如果定义了 `ssh_user`{.literal} 变量，则默认值为
        `~/.ssh/config`{.literal}。
    :::
[`ssh_config_owner`{.literal},`ssh_config_group`{.literal},`ssh_config_mode`{.literal}]{.term}
:   所创建的配置文件的所有者、组和模式。默认情况下，文件的所有者是
    `root:root`{.literal}，模式是 `0644`{.literal}。如果定义了
    `ssh_user`{.literal}，则模式为 `0600`{.literal}，所有者和组派生自
    `ssh_user`{.literal} 变量中指定的用户名。
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#proc_configuring-openssh-clients-using-the-ssh-system-role_configuring-secure-communication-with-the-ssh-system-roles}使用 SSH 客户端系统角色配置 OpenSSH 客户端 {.title}
:::
您可以通过运行 Ansible playbook，使用 SSH 客户端系统角色来配置多个 SSH
客户端。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以将 SSH 客户端系统角色用于更改 SSH 和 SSHD 配置的其他系统角色，例如
Identity Management RHEL 系统角色。要防止配置被覆盖，请确保 SSH
客户端角色使用置入目录（默认为 RHEL 8）。
:::
::: itemizedlist
**先决条件**
-   访问一个或多个 [*受管节点*]{.emphasis} （这是您要使用 SSH
    客户端系统角色配置的系统）。
-   对 [*控制节点*]{.emphasis} 的访问和权限，控制节点是 Red Hat Ansible
    Engine 配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
        软件包已安装 。
    :::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0-8.5 提供对一个独立的 Ansible 存储库的访问权限，该存储库包含基于
Ansible 的自动化 Ansible Engine 2.9。Ansible Engine
包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}、连接器（如
`docker`{.literal} 和 `podman`{.literal}
）以及许多插件和模块。有关如何获取并安装 Ansible Engine 的详情，请参考
[如何下载并安装 Red Hat Ansible
Engine](https://access.redhat.com/articles/3174981){.link} 知识库文章。
RHEL 8.6 和 9.0 引入了 Ansible Core（作为 `ansible-core`{.literal}
软件包提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。RHEL 通过 AppStream
软件仓库提供此软件包，它有一个有限的支持范围。如需更多信息，请参阅 [RHEL
9 和 RHEL 8.6 及更新的 AppStream 软件仓库文档中的 Ansible Core
软件包的支持范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: itemizedlist
-   列出受管节点的清单文件。
:::
::: orderedlist
**流程**
1.  使用以下内容创建一个新的 `playbook.yml`{.literal} 文件：
    ``` screen
    ---
    - hosts: all
      tasks:
      - name: "Configure ssh clients"
        include_role:
          name: rhel-system-roles.ssh
        vars:
          ssh_user: root
          ssh:
            Compression: true
            GSSAPIAuthentication: no
            ControlMaster: auto
            ControlPath: ~/.ssh/.cm%C
            Host:
              - Condition: example
                Hostname: example.com
                User: user1
          ssh_ForwardX11: no
    ```
    此 playbook 使用以下配置在受管节点上配置 `root`{.literal} 用户的 SSH
    客户端首选项：
    ::: itemizedlist
    -   压缩已启用。
    -   ControlMaster 多路复用设置为 `auto`{.literal}。
    -   连接到 `example.com`{.literal} 主机的`example`{.literal} 别名是
        `user1`{.literal}。
    -   `example`{.literal} 主机别名已创建，它表示使用 `user1`{.literal}
        用户名连接到 `example.com`{.literal} 主机。
    -   X11 转发被禁用。
    :::
    另外，您还可以根据您的偏好修改这些变量。如需了解更多详细信息，请参阅
    [SSH
    系统角色变量](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/configuring-secure-communication-with-the-ssh-system-roles_securing-networks#ref_ssh-system-role-variables_configuring-secure-communication-with-the-ssh-system-roles){.link}。
2.  可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check path/custom-playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory_file path/custom-playbook.yml
    ```
:::
::: itemizedlist
**验证**
-   通过在文本编辑器中打开 SSH
    配置文件来验证受管节点是否具有正确的配置，例如：
    ``` screen
    # vi ~root/.ssh/config
    ```
    在应用了上述示例 playbook 后，配置文件应具有以下内容：
    ``` screen
    # Ansible managed
    Compression yes
    ControlMaster auto
    ControlPath ~/.ssh/.cm%C
    ForwardX11 no
    GSSAPIAuthentication no
    Host example
      Hostname example.com
      User user1
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#proc_using-the-ssh-server-system-role-for-non-exclusive-configuration_configuring-secure-communication-with-the-ssh-system-roles}对非独占配置使用 SSH 服务器系统角色 {.title}
:::
通常，应用 SSH Server
系统角色会覆盖整个配置。如果您之前调整了配置，例如使用不同的系统角色或
playbook，这可能会出现问题。要仅将 SSH Server
系统角色应用于所选配置选项，同时保留其他选项，您可以使用非排除的配置。
在 RHEL 8
和更早版本中，您可以使用配置段来应用非独占配置。如需更多信息，请参阅
RHEL 8 文档中的 [对非独占配置使用 SSH
服务器系统角色](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/administration_and_configuration_tasks_using_system_roles_in_rhel/configuring-secure-communication-with-the-ssh-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#proc_using-the-ssh-server-system-role-for-non-exclusive-configuration_configuring-secure-communication-with-the-ssh-system-roles){.link}。
在 RHEL 9
中，您可以使用随时可访问目录中的文件来应用非独占配置。默认配置文件已放入随时可访问的目录中，存为
`/etc/ssh/sshd_config.d/00-ansible_system_role.conf`{.literal}。
::: itemizedlist
**先决条件**
-   访问一个或多个 [*受管节点*]{.emphasis} （这是您要使用 SSH Server
    系统角色配置的系统）。
-   对 [*控制节点*]{.emphasis} 的访问和权限，控制节点是 Red Hat Ansible
    Engine 配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   `ansible-core`{.literal} 软件包已安装 。
    -   列出受管节点的清单文件。
    -   不同 RHEL 系统角色的 playbook。如需更多信息，请参阅
        [应用角色](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#applying-a-role_getting-started-with-rhel-system-roles){.link}。
    :::
:::
::: orderedlist
**流程**
1.  在 playbook 中添加带有 `sshd_config_file`{.literal} 变量的配置段：
    ``` screen
    ---
    - hosts: all
      tasks:
      - name: 
        include_role:
          name: rhel-system-roles.sshd
        vars:
          sshd_config_file: /etc/ssh/sshd_config.d/.conf
          sshd:
            # Environment variables to accept
            AcceptEnv:
              LANG
              LS_COLORS
              EDITOR
    ```
    在 `sshd_config_file`{.literal} 变量中，定义 SSH Server
    系统角色在其中写入配置选项的 `.conf`{.literal} 文件。
    使用两位前缀，例如 `42-`{.literal} 来指定应用配置文件的顺序。
    将 playbook 应用到清单时，角色会将以下配置选项添加到
    `sshd_config_file`{.literal} 变量定义的文件中。
    ``` screen
    # Ansible managed
    #
    AcceptEnv LANG LS_COLORS EDITOR
    ```
:::
::: itemizedlist
**验证**
-   可选：验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml -i inventory_file
    ```
:::
::: itemizedlist
**其他资源**
-   `/usr/share/doc/rhel-system-roles/sshd/README.md`{.literal} 文件。
-   `ansible-playbook(1)`{.literal} 手册页。
:::
:::
:::
[]{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel}第 7 章 设置跨系统的自定义加密策略 {.title}
:::
作为管理员，您可以使用 Cryptographic 策略 RHEL 系统角色快速并一致地使用
Ansible Core 软件包在许多不同的系统中配置自定义加密策略。
::: section
::: titlepage
# []{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html#crypto-policies-system-role-variables_setting-a-custom-cryptographic-policy-across-systems}加密策略系统角色变量和事实 {.title}
:::
在 Cryptographic Policies System Role playbook
中，您可以根据您的首选项和限制定义加密策略配置文件的参数。
如果您没有配置任何变量，则系统角色不会配置系统，仅报告事实。
::: variablelist
**Cryptographic Policies 系统角色选择的变量**
[`crypto_policies_policy`{.literal}]{.term}
:   确定系统角色应用到受管节点的加密策略。有关不同加密策略的详情，请参阅
    [系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
[`crypto_policies_reload`{.literal}]{.term}
:   如果设置为 `yes`{.literal}，则目前受影响的服务
    `ipsec`{.literal}、`bind`{.literal} 和 `sshd`{.literal}
    服务，在应用加密策略后重新加载。默认值为 `yes`{.literal}。
[`crypto_policies_reboot_ok`{.literal}]{.term}
:   如果设置为
    `yes`{.literal}，在系统角色更改了加密策略后需要重新启动，它会将
    `crypto_policies_reboot_required`{.literal} 设置为
    `yes`{.literal}。默认值为 `no`{.literal}。
:::
::: variablelist
**由 Cryptographic Policies 系统角色设置的事实**
[`crypto_policies_active`{.literal}]{.term}
:   列出当前选择的策略。
[`crypto_policies_available_policies`{.literal}]{.term}
:   列出系统上所有可用的策略。
[`crypto_policies_available_subpolicies`{.literal}]{.term}
:   列出系统上所有可用的子策略。
:::
::: itemizedlist
**其他资源**
-   [创建并设置自定义系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#creating-and-setting-a-custom-system-wide-cryptographic-policy_using-the-system-wide-cryptographic-policies){.link}。
:::
:::
::: section
::: titlepage
# []{#setting-a-custom-cryptographic-policy-across-systems_administration-and-configuration-tasks-using-system-roles-in-rhel.html#proc_setting-a-custom-cryptographic-policy-using-the-crypto-policies-system-role_setting-a-custom-cryptographic-policy-across-systems}使用 Cryptographic Policies 系统角色设置自定义加密策略 {.title}
:::
您可以使用 Cryptographic Policies
系统角色配置大量受管节点，从单一控制节点一致。
::: itemizedlist
**先决条件**
-   对一个或多个 [*受管节点*]{.emphasis}
    的访问和权限，受管节点是您要使用加密策略系统角色配置的系统。
-   对 [*控制节点*]{.emphasis} 的访问和权限，控制节点是 Red Hat Ansible
    Engine 配置其他系统的系统。
    在控制节点上：
    ::: itemizedlist
    -   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
        软件包已安装 。
    :::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0-8.5 提供对一个独立的 Ansible 存储库的访问权限，该存储库包含基于
Ansible 的自动化 Ansible Engine 2.9。Ansible Engine
包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}、连接器（如
`docker`{.literal} 和 `podman`{.literal}
）以及许多插件和模块。有关如何获取并安装 Ansible Engine 的详情，请参考
[如何下载并安装 Red Hat Ansible
Engine](https://access.redhat.com/articles/3174981){.link} 知识库文章。
RHEL 8.6 和 9.0 引入了 Ansible Core（作为 `ansible-core`{.literal}
软件包提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。RHEL 通过 AppStream
软件仓库提供此软件包，它有一个有限的支持范围。如需更多信息，请参阅 [RHEL
9 和 RHEL 8.6 及更新的 AppStream 软件仓库文档中的 Ansible Core
软件包的支持范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: itemizedlist
-   列出受管节点的清单文件。
:::
::: orderedlist
**流程**