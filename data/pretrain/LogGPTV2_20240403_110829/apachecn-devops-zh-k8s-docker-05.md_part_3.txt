您也可以使用节点对象，使用`describe`命令获取单个节点的详细信息。要获得前面列出的 KinD 节点的描述，我们可以执行`kubectl describe node KinD-control-plane`，它将返回节点的详细信息，包括消耗的资源、运行的 Pods、IP **无类域间路由** ( **CIDR** )范围等等。
### 持续批量索赔
我们将在后面的章节中更深入地描述**持久卷声明**(**PVC**，但是现在您只需要知道一个 PVC 被一个 Pod 用来消耗持久存储。聚氯乙烯使用**持久卷** ( **PV** )来映射存储资源。与我们讨论过的大多数其他对象一样，您可以在聚氯乙烯对象上发出`get`、`describe`和`delete`命令。因为这些是由 Pod 使用的，所以它们是一个`namespaced`对象，并且必须在与将使用 PVC 的 Pod 相同的命名空间中创建。
### post-vietnam syndrome 越战战后综合征
物理卷被物理卷用来在物理卷和底层存储系统之间创建链接。手动维护 PVs 是一项麻烦的任务，在现实世界中应该避免，因为 Kubernetes 能够使用**容器存储接口** ( **CSI** )管理大多数常见存储系统。如**聚氯乙烯**对象部分所述，我们将讨论 Kubernetes 如何自动创建将链接到聚氯乙烯的聚氯乙烯。
### 分离舱
吊舱对象用于与运行您的容器的吊舱交互。使用`kubectl`实用程序，您可以使用诸如`get`、`delete`和`describe`等命令。例如，如果您想要获取`kube-system`命名空间中所有 Pods 的列表，您将执行`kubectl get Pods -n kube-system`命令，该命令将返回命名空间中的所有 Pods，如下所示:
![Figure 5.8 – All Pods in the kube-system namespace ](img/Fig_5.8_B15514.jpg)
图 5.8–kube 系统命名空间中的所有 Pods
虽然您可以直接创建 Pod，但是您应该避免这样做，除非您使用 Pod 进行快速故障排除。直接创建的 Pods 不能使用 Kubernetes 提供的许多功能，包括缩放、自动重启或滚动升级。您应该使用部署，或者在某些罕见的情况下使用`ReplicaSet`对象或复制控制器，而不是直接创建 Pod。
### 复制控制器
复制控制器将管理运行 Pods 的数量，保持指定的所需副本始终运行。如果您创建一个复制控制器并将副本计数设置为`5`，控制器将始终保持应用的五个 Pods 运行。
复制控制器已经被`ReplicaSet`对象所取代，我们将在它自己的部分中讨论。虽然您仍然可以使用复制控制器，但是您应该考虑使用部署或`ReplicaSet`对象。
### 资源配额
在多个团队之间共享 Kubernetes 集群变得非常普遍，称为多租户集群。由于您将有多个团队在单个集群中工作，因此您应该考虑创建配额，以限制单个租户消耗集群或节点中所有资源的可能性。可以对大多数集群对象设置限制，包括以下内容:
*   **中央处理器** ( **中央处理器**)
*   记忆
*   聚氯乙烯
*   配置地图
*   部署
*   豆荚等等
一旦达到限制，设置限制将停止创建任何其他对象。如果您为命名空间设置了 10 个 Pod 的限制，并且用户创建了一个尝试启动 11 个 Pod 的新部署，则第 11 个 Pod 将无法启动，并且用户将收到一个错误。
创建内存和 CPU 配额的基本清单文件如下所示:
```
apiVersion: v1
KinD: ResourceQuota
metadata:
  name: base-memory-cpu
spec:
  hard:
    requests.cpu: "2"
    requests.memory: 8Gi
    limits.cpu: "4"
    limits.memory: 16Gi
```
这将对名称空间可用于 CPU 和内存请求的资源总量设置限制。
创建配额后，您可以使用`kubectl describe`命令查看使用情况。在我们的例子中，我们将`ResourceQuota`命名为`base-memory-cpu`。为了查看用法，我们将执行`kubectl get resourcequotas base-memory-cpu`命令，产生以下输出:
```
Name:            	base-memory-cpu
Namespace:       	default
Resource         	Used     Hard
--------       	  	----  	----
limits.cpu      	 	 0     	4
limits.memory    	 0     	16Gi
requests.cpu    		 0     	2
requests.memory  	 0     	8Gi
```
`ResourceQuota`对象用于控制集群的资源。通过将资源分配给一个命名空间，您可以保证单个租户拥有运行其应用所需的 CPU 和内存，同时限制写得不好的应用对其他应用的影响。
### 机密
前面我们描述了如何使用`ConfigMap`对象来存储配置信息。我们提到`ConfigMap`对象绝不应该用来存储任何类型的敏感数据。这是一个机密的工作。
机密存储为 Base64 编码的字符串，这不是一种加密形式。那么，为什么要把机密和`ConfigMap`对象分开呢？提供单独的对象类型提供了一种更简单的方法来维护访问控制，并能够使用外部系统注入敏感信息。
可以使用文件、目录或从文字字符串创建机密。例如，我们有一个要执行的 MySQL 映像，我们希望使用一个密码将密码传递给 Pod。在我们的工作站上，我们当前的工作目录中有一个名为`dbpwd`的文件，里面有我们的密码。使用`kubectl`命令，我们可以通过执行`kubectl create secret generic mysql-admin --from-file=./dbpwd`来创建一个机密。
这将在当前命名空间中创建一个名为`mysql-admin`的新机密，其内容为`dbpwd`文件。使用`kubectl`，我们可以通过运行`kubectl get secret mysql-admin -o yaml`命令获得机密的输出，该命令将输出以下内容:
```
apiVersion: v1
data:
  dbpwd: c3VwZXJzZWNyZXQtcGFzc3dvcmQK
KinD: Secret
metadata:
  creationTimestamp: "2020-03-24T18:39:31Z"
  name: mysql-admin
  namespace: default
  resourceVersion: "464059"
  selfLink: /api/v1/namespaces/default/secrets/mysql-admin
  uid: 69220ebd-c9fe-4688-829b-242ffc9e94fc
type: Opaque
```
查看前面的输出，您可以看到`data`部分包含我们的文件名，然后是一个 Base64 编码的值，它是根据文件的内容创建的。
如果我们从 Secret 中复制 Base64 值并将其传送到`base64`实用程序，我们可以轻松解码密码，如下所示:
```
echo c3VwZXJzZWNyZXQtcGFzc3dvcmQK | base64 -d
supersecret-password
```
小费
当使用`echo`命令对字符串进行 Base64 编码时，添加`-n`标志以避免添加额外的`\n`。用`echo -n 'test' | base64`代替`echo 'test' | base64`。
一切都存储在 Etcd 中，但我们担心有人可能会侵入主服务器并窃取 Etcd 数据库的副本。一旦有人有了数据库的副本，他们就可以很容易地使用`etcdctl`实用程序来浏览内容，以检索我们所有的 Base64 编码的机密。幸运的是，Kubernetes 增加了一项功能，可以在机密写入数据库时对其进行加密。
对于许多用户来说，启用这个功能可能相当复杂，虽然这听起来是个好主意，但它确实提出了一些潜在的问题，您应该在实现它之前考虑一下。如果你想在休息时阅读加密你的机密的步骤，你可以在[网站上查看这些步骤，网址是:https://Kubernetes . io/docs/tasks/administrator-cluster/encrypt-data/](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)。
保护机密的另一个选择是使用第三方机密管理工具，如哈希公司的保险库或赛博方舟的魔术师。
### 服务帐户
Kubernetes 使用服务帐户来启用工作负载的访问控制。创建部署时，您可能需要访问其他服务或 Kubernetes 对象。由于 Kubernetes 是一个安全系统，您的应用尝试访问的每个对象或服务都将评估**基于角色的访问控制** ( **RBAC** )规则，以接受或拒绝请求。
使用清单创建服务帐户是一个简单的过程，只需要清单中的几行。以下代码片段显示了为 Grafana 部署创建服务帐户的服务帐户清单:
```
apiVersion: v1
KinD: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
```
您将服务帐户与角色绑定和角色相结合，以允许访问所需的服务或对象。
### 服务
为了使在 Pod 中运行的应用对网络可用，您需要创建一个服务。服务对象存储关于如何公开应用的信息，包括应用上运行的 Pods 和到达它们的网络端口。
每个服务都有一个在创建时分配的网络类型，包括以下内容:
*   `ClusterIP`:只能在集群内部访问的网络类型。这种类型仍然可以用于使用入口控制器的外部请求，这将在后面的章节中讨论。
*   `NodePort`:将服务暴露给端口`30000` - `32767`之间的随机端口的网络类型。该端口可通过定位指定`NodePort`上集群中的任何工作节点来访问。一旦创建，集群中的每个节点将接收端口信息，传入的请求将通过`kube-proxy`路由。
*   `LoadBalancer`:这种类型需要在集群内部使用附加组件。如果您在公共云提供商上运行 Kubernetes，这种类型将创建一个外部负载平衡器，为您的服务分配一个 IP 地址。大多数内部 Kubernetes 安装不包括对`LoadBalancer`类型的支持，但一些产品，如谷歌的 Anthos 确实提供了对它的支持。在后面的章节中，我们将解释如何向 Kubernetes 集群添加一个名为`MetalLB`的开源项目，为`LoadBalancer`类型提供支持。
*   `ExternalName`:这个类型和其他三个不一样。与其他三个选项不同，这种类型不会为服务分配 IP 地址。相反，这用于将内部 Kubernetes**域名系统** ( **域名系统**)名称映射到外部服务。
举个例子，我们已经在端口`80`上部署了一个运行 Nginx 的 Pod。我们想要创建一个服务，它将允许这个 Pod 在端口`80`上接收来自集群内部的传入请求。这方面的代码可以在下面的代码片段中看到:
```
apiVersion: v1
KinD: Service
metadata:
  labels:
    app: nginx-web-frontend
  name: nginx-web
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: nginx-web
```
在我们的清单中，我们创建一个值为`app`的标签，并分配一个值为`nginx-web-frontend`。我们称该服务本身为`nginx-web`，并在端口`80`上公开了该服务，目标是`80`的 Pod 端口。清单的最后两行用于分配服务将转发到的 Pods，也称为端点。在这个清单中，名称空间中标签为`app`值为`nginx-web`的任何 Pod 都将作为端点添加到服务中。
### 自定义资源定义