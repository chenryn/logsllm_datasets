title:SDDR: Light-Weight, Secure Mobile Encounters
author:Matthew Lentz and
Viktor Erd&apos;elyi and
Paarijaat Aditya and
Elaine Shi and
Peter Druschel and
Bobby Bhattacharjee
SDDR: Light-Weight, Secure Mobile Encounters
Matthew Lentz, University of Maryland; Viktor Erdélyi and Paarijaat Aditya, Max Planck 
Institute for Software Systems (MPI-SWS); Elaine Shi, University of Maryland;  
Peter Druschel, Max Planck Institute for Software Systems (MPI-SWS);  
Bobby Bhattacharjee, University of Maryland 
https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/lentz
This paper is included in the Proceedings of the 23rd USENIX Security Symposium.August 20–22, 2014 • San Diego, CAISBN 978-1-931971-15-7Open access to the Proceedings of  the 23rd USENIX Security Symposium is sponsored by USENIXSDDR: Light-Weight, Secure Mobile Encounters
Matthew Lentz† Viktor Erd´elyi‡
Paarijaat Aditya‡
Elaine Shi†
Peter Druschel‡ Bobby Bhattacharjee†
†University of Maryland
‡MPI-SWS
Abstract
Emerging mobile social apps use short-range radios to dis-
cover nearby devices and users. The device discovery proto-
col used by these apps must be highly energy-efﬁcient since it
runs frequently in the background. Also, a good protocol must
enable secure communication (both during and after a period
of device co-location), preserve user privacy (users must not
be tracked by unauthorized third parties), while providing se-
lective linkability (users can recognize friends when strangers
cannot) and efﬁcient silent revocation (users can permanently
or temporarily cloak themselves from certain friends, unilater-
ally and without re-keying their entire friend set).
We introduce SDDR (Secure Device Discovery and Recog-
nition), a protocol that provides secure encounters and satisﬁes
all of the privacy requirements while remaining highly energy-
efﬁcient. We formally prove the correctness of SDDR, present
a prototype implementation over Bluetooth, and show how ex-
isting frameworks, such as Haggle, can directly use SDDR. Our
results show that the SDDR implementation, run continuously
over a day, uses only ∼10% of the battery capacity of a typical
smartphone. This level of energy consumption is four orders
of magnitude more efﬁcient than prior cryptographic protocols
with proven security, and one order of magnitude more efﬁ-
cient than prior (unproven) protocols designed speciﬁcally for
energy-constrained devices.
1 Introduction
Mobile social applications discover nearby users and
provide services based on user activity (what the user is
doing) and context (who and what is nearby). Services
provided include notiﬁcations when friends are nearby
(Foursquare [6], Google Latitude [7]), deals from nearby
stores (Foursquare), content sharing with nearby users
(FireChat [5], Whisper [15], Haggle [50]), messaging for
missed connections (SMILE [43], SmokeScreen [27]),
lost and found (Tile [13], StickNFind [12]), sharing pay-
ments with nearby users (Venmo [14]). At their low-
est layer, these applications all discover nearby devices;
many also associate previously linked users to discovered
devices and provide communication among presently or
previously co-located devices.
Most commercially deployed solutions rely on a
trusted cloud service [6, 7], which tracks users’ activ-
ity and location, so that it can match co-located users
and relay information among them. Discovery using a
centralized matchmaking service forces users to disclose
their whereabouts, perils of which have been extensively
noted [16, 19, 24, 48, 52].
Instead of relying on cen-
tralized services, an alternate class of discovery proto-
cols make use of local, short-range radio-to-radio com-
munication [1, 9, 27, 50]. The common practice of us-
ing static identiﬁer(s) in the discovery process [2] leaks
information, since it allows an eavesdropper to track
a user’s locations and movements. To protect against
such tracking, previous work [35–37] has suggested that
ephemeral identiﬁers should be used in place of static
ones. Simply replacing static identiﬁers with strictly ran-
dom ephemeral identiﬁers is insufﬁcient: while eliminat-
ing tracking, it also prevents friends (or users with prior
trust relations) from recognizing each other when nearby.
In this paper, we describe a light-weight, energy-
efﬁcient cryptographic protocol for secure encounters
called SDDR. At a high level, secure encounters provide
the following properties: 1) discovering nearby devices,
2) mapping devices to known principals (if possible), and
3) enabling secure communication for encounter peers.
Device discovery and secure encounter SDDR per-
forms a pair-wise exchange of a secret with each nearby
device. The shared secret enables encounter peers to
communicate securely during and after the encounter,
anonymously and without trusting a third party (e.g.,
sharing related content with event participants).
Selective linkability and revocation Additionally,
SDDR enables a user’s device to be identiﬁable by spe-
ciﬁc other users, while revealing no linkable information
to other devices. For instance, friends can agree to recog-
USENIX Association  
23rd USENIX Security Symposium  925
nize each others’ devices, while third parties are unable
to link and track devices upon repeat encounters. More-
over, users can efﬁciently and unilaterally revoke or sus-
pend this linkability, for instance based on the current
time or location (e.g., discoverable by colleagues only
during work hours and on company premises).
Challenges: Energy efﬁciency and DoS resilience In
theory, designing a protocol that satisﬁes the above func-
tional and security requirements is straightforward. For
example, an inefﬁcient strawman scheme can be con-
structed using existing cryptographic primitives. Pairs
of devices can perform a Difﬁe-Hellman key exchange
to establish a shared secret, enabling the users to se-
curely communicate. To support selective linkability,
two users can participate in a standard Private Set Inter-
section (PSI) protocol. A user can allow (or disallow) a
peer to recognize them in a future encounter by includ-
ing (or excluding) a past shared encounter secret from
the set.
However, as we will show in Section 6, using a full-
ﬂedged PSI protocol is impractical. Because the shared
encounter secrets (i.e., elements in the set) are high-
entropy values, it is possible to implement a secure PSI
protocol through an efﬁcient Bloom ﬁlter based con-
struction. Unfortunately, even when using an efﬁcient
Bloom ﬁlter based PSI scheme,
the above strawman
scheme—implemented naively—has high energy con-
sumption. Speciﬁcally, a naive implementation requires
a device to wake up its CPU each time it receives a mes-
sage from a nearby device, an expensive operation for
energy-constrained mobile devices. The protocol would
deplete the battery in crowded spaces (e.g., a subway
train) where hundreds of devices may be within radio
range. Furthermore, an attacker mounting a DoS attack
could deplete the victim device’s battery by frequently
injecting messages to cause unnecessary wake ups.
1.1 Contributions
We designed,
implemented, and formally proved the
security of SDDR, a light-weight secure encounter
protocol suitable for resource-constrained mobile de-
vices. Our reference implementation source code (us-
ing Bluetooth 2.1 as the short-range radio) is available at
http://www.cs.umd.edu/projects/ebn.
Achieving energy efﬁciency The main feature of SDDR
is its non-interactiveness, i.e., the encounter protocol
consists of periodic broadcasts of beacon messages,
which enable both the key exchange and selective recog-
nition. Because the SDDR protocol is non-interactive,
the Bluetooth controller can be initialized so that it re-
sponds to discovery requests from peers with a beacon
message, while the main CPU remains completely in the
idle state. A device only needs to wake up its CPU when
actively discovering nearby peers.
Our evaluation shows that such a non-interactive pro-
tocol allows us to improve the energy efﬁciency by at
least 4 times in comparison with any interactive proto-
col (even if the interactive protocol performs no work),
under a typical setting with 5 new devices nearby on av-
erage during every 60 second discovery interval. Under
the same parameters, we show that an otherwise idle de-
vice running SDDR over Bluetooth 2.1 will operate for
9.3 days on a single charge.
First formal treatment of the problem We are the ﬁrst
(to the best of our knowledge) to provide a formal treat-
ment of secure device discovery and recognition. We
deﬁne a security model that captures the requirements
of secure encounters and selective linkability, and prove
that our solution is secure under the random oracle model
(see Appendix A.3).
Applications over SDDR To demonstrate some of
SDDR’s capabilities, we have modiﬁed the Haggle mo-
bile networking platform to use SDDR, enabling efﬁcient
and secure discovery and communication via Bluetooth
for all Haggle apps. For demonstration, we have modi-
ﬁed the PhotoShare app to enable private photo sharing
among friends using SDDR selective linking.
Roadmap The remainder of the paper is organized as
follows. We discuss related work in Section 2. Next, we
review security requirements, formulate the problem and
provide security deﬁnitions in Section 3. We present de-
tails of the SDDR discovery protocol in Section 4, fol-
lowed by our reference Bluetooth implementation and
evaluation results in Sections 5 and 6, respectively. We
discuss the properties and implications of SDDR’s en-
counter model in Section 7. We conclude in Section 8.
2 Related Work
Device discovery protocols Several device discovery
protocols have been proposed; however, none simulta-
neously offer the full functionality and security offered
by our SDDR protocol. Since SDDR provides secure de-
vice discovery and recognition for a large range of mo-
bile encounter applications, it allows developers to focus
on their application logic.
Unlinkability
Selective
Linkability
Revocability
Efﬁcient
NoTrusted
Party
Encounters
Record


Bluetooth 4.0
SMILE

SmokeScreen 
SDDR

Table 1: Comparison of related device discovery and
recognition protocols in terms of supported properties.









926  23rd USENIX Security Symposium 
USENIX Association
Bluetooth 4.0 (BT4) is the most recent version of
the Bluetooth standard, introducing a new low-energy
mode [3], as well as support for random MAC addresses
to be used in communication. Building on top of the
MAC address change support, BT4 adds a form of selec-
tive linkability in which paired (trusted) devices can rec-
ognize each other across MAC address changes, while
remaining unlinkable to all other devices. Since BT4
uses a single shared key for all currently linkable users,
it does not allow for efﬁcient revocation of a subset of
users. Further, BT4 does not natively support encounters
with unlinkable devices.
SMILE [43] is a mobile “missed connections” appli-
cation, which enables users to contact people they pre-
viously met, but for who they don’t have contact infor-
mation. The SMILE protocol creates an identiﬁer and
shared key with any set of devices that are within Blue-
tooth range at a given time. Users can subsequently ex-
change messages (encrypted with the shared key) anony-
mously through a cloud-based, untrusted mailbox associ-
ated with the identiﬁer. Unlike SDDR, SMILE does not
address selective linkability and revocation.
MeetUp [44] is an encounter-based social networking
application that argues for (and uses) strong authentica-
tion within an encounter. This authentication comes in
the form of exchanging signed certiﬁcates (from a trusted
authority) attesting to a public key and picture of a user.
However, we feel that in many applications, users should
be unlinkable by default, and should not be required to
distribute any identiﬁable information (e.g., public key,
user picture) in an encounter. We discuss authentication
in Section 4.4.
SmokeScreen [27], a system that allows friends to
share presence while ensuring privacy, also implements
a selectively linkable discovery protocol for encounter
peers. In SmokeScreen’s discovery protocol, devices pe-
riodically broadcast two types of messages: clique sig-
nals and opaque identiﬁers. Clique signals enable private
presence sharing among friends, announcing the device’s
presence to all members of a mutually trusting clique. In
comparison with SDDR, SmokeScreen requires a trusted
third-party service and achieves slightly weaker security:
an adversary can infer that two users belong to the same
clique, since all users broadcast the same clique signal
during each time epoch. Furthermore, SDDR can han-
dle 35 nearby devices for the same energy as 3 devices
in SmokeScreen. Additionally, SDDR supports efﬁcient
revocation of linked users, which is not possible with
cliques in SmokeScreen.
SlyFi [35] is a link layer protocol for 802.11 networks
that obfuscates MAC addresses and other information to
prevent tracking by third parties. Unlike SDDR, SlyFi
does not address selective linkability or revocation, nor
does it negotiate shared keys among co-located devices.
SDDR includes a Bluetooth MAC address change proto-
col similar to SlyFi’s to prevent tracking.
Related protocols using Bloom ﬁlters Bloom ﬁl-
ters [20] are a space-efﬁcient probabilistic data structure
for set membership. Bloom ﬁlters have been used in
many cryptographic protocols [23], including (private)
set-intersection and secure indexes. However, none of
the protocols address the precise problem and security
requirements of SDDR.
Secure indexes are data structures that allow queriers
to perform membership tests for a given word in O(1)
time if they have knowledge of the associated secret.
Secure indexes were ﬁrst deﬁned and formalized by
Goh [33], who provided a practical
implementation
using Bloom ﬁlters.
Similar work has focused on
privacy-preserving searches over encrypted data [26] and
databases [54] using Bloom ﬁlters.
If applied to de-
vice recognition, all protocols would allow adversaries
to track users due to the static Bloom ﬁlter content.
PrudentExposure [56] allows users to privately dis-
cover appropriate services, where the user and service
belong to the same domain. To maintain user privacy,
PrudentExposure relies on Bloom ﬁlters containing time-
varying hashes of domain identities for intersecting the
requested and available domains.
E-SmallTalker [55] and D-Card [25], which builds
on E-SmallTalker,
support social networking with
nearby strangers (E-SmallTalker) and friends (D-Card).
BCE [31] enables users to estimate the set of common
friends with other users. These protocols would be in-
secure when applied to the device recognition problem,
as none of the protocols use time-varying information in
the Bloom ﬁlters, allowing users to be linked across mul-
tiple handshakes. Additionally, E-SmallTalker does not
apply the Bloom Filter to high-entropy secrets, and thus
is vulnerable to an ofﬂine dictionary attack.
Sun et al. [51] present a new way of building trust re-
lationships between users by comparing spatiotemporal
proﬁles (log of time and location pairs). In addition to
a PSI-based scheme, they present another scheme using
Bloom ﬁlters that trades off estimation accuracy and pri-
vacy in a user-deﬁned manner. In SDDR, we avoid the
privacy vs. accuracy trade off since the linkable users
share a high-entropy secret as opposed to low-entropy
time, location pairs.
Dong et al. [30] use garbled Bloom ﬁlters to create a