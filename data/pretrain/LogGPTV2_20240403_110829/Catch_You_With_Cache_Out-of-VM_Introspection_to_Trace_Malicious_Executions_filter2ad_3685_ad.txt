process communication.
3) Epilogue phase: The outputs from the previous phase
are a list of virtual addresses that Cather captures. To turn these
virtual addresses into a control ﬂow transfer trace, we need to
combine this address list with the basic block relationship from
the prologue phase. We highlight the blocks whose address
contains any of the virtual addresses from the list. Then we
extend it by adding basic blocks that can be inferred. However,
not all pruned basic blocks are able to be recovered. We will
mark these blocks as uncertain blocks, meaning one of them
should have been executed, but we are not sure which one it
is. In CFG generation, code blocks are turned into nodes and
all the transfers are turned into edges to connect nodes.
V. EVALUATION
In this section, we evaluate Catcher’s usability, effective-
ness, and performance overhead. We perform our experiments
on a DELL OPTIPLEX 7010 desktop custom with an Intel
Core i5-3470 3.2GHz processor and 8GB DRAM. This CPU
is equipped with 6MB of L3 cache. ASLR is turned off for the
sake of convenience. ASLR has no impact on the tracing since
the code is dynamically fetched. Turning it off only simpliﬁes
the process of evaluation.
A. Usability
Although Catcher is designed on Linux KVM, the target
OS can be either Windows or Linux. To get CR3 value in
Windows, we check a kernel structure called the EPROCESS.
Inside EPROCESS there is a member called DirectoryTable-
Base. We set the DirectoryTableBase[0] as the value
of CR3 of the target process.
Malware like keyloggers and rootkits tries to hide. Analyz-
ers and AV scanners are not able to ﬁnd the process because
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:25 UTC from IEEE Xplore.  Restrictions apply. 
333
lost tracelost tracerevealingagentprobingagentmonitoringagentcode segmentreturn address1...return address2...RSPmain tracing analyzershared library.so/.DLLaddress poolstack support analyzersuggested addressIPCIPCtargetagentsanalyzersPrologue phaseTrace phaseEpilogue phase1248357cache states on code612845736control flowrecoverit hides its process directory in /proc of the ﬁle system. It
also manipulates kernel queue data structures by deleting itself
from task_struct. Although pointers (*prev_task and
*next_task) are removed, the process is still in memory.
Catcher can catch it with a given CR3. We test Catcher on 4
keyloggers that can work secretively.
programs
based
detection
detect whether
the
on
utilizes API
QueryPerformanceCounter()
under
Time-based
(e.g.,
Some malicious
analysis
they
system artifacts
are
functions
[1].
and
[26]
GetTickCount()) or rdtsc instruction to get
the
time experienced by certain events, in order to infer whether
there is a debugger. Some malware can even use external
resources to assist timing (NTP for example). Once noticing
the time of some speciﬁc events surpasses the threshold, they
take a different path of execution and act benignly. Catcher is
born with a great advantage in this situation because it does
not intervene in the execution of the target process. Running
in onsite mode, it has such an extremely subtle impact on
the time of the events that malware cannot speculate whether
there is a debugger. We test Catcher against three malware
known to use timing-based detection to expose the presence
of a debugger: HIV [17], Ratos [25] and Mydoom [20].
Malicious programs often use packers to deform their own
code, thereby changing the shape and feature of their exe-
cutable binaries. A different appearance helps to evade the
detection of signature-based anti-virus scanners. Unpacking
has no adverse impact on Catcher because the agent shares
the same memory mapping with the target. Different from the
legacy methods, EPT update in the target is also visible to
the analyzer in Catcher, so the analysis is performed on the
unpacked memory. We test four programs packed by packers:
UPX, Upack, Armadillo, and Themida.
B. Effectiveness
To demonstrate how effective this analysis method base
on CPU caches, we measure its accuracy performance. The
notations in use are listed in Table II below.
TABLE II
NOTATIONS AND DEFINITIONS
P
e
O(e)
C(e)
T P
F N
F P
target process in memory to analyze
execution of P
the oracle we constructed
the execution trace caught by Catcher
true positive number, i.e., the number of code blocks b ∈
O(e) such that b ∈ C(e).
false negative number, i.e., the number of code blocks b ∈
O(e) such that b /∈ C(e). This means it is actually executed
while is not captured by Catcher.
false positive number, i.e., the number of code blocks b ∈
C(e) such that b /∈ O(e). This means Catcher falsely
captured a code block that has not been executed.
We also deﬁne three notations for precision: p, recall r and
f-score as follows:
p = T P/(T P + F P )
r = T P/(T P + F N )
f-score = 2p · r/(p + r)
(1)
(2)
(3)
1) Ground Truth: To evaluate the accuracy of Catcher, we
need to construct an oracle of the actual execution path, that
is, the ground truth. We need to record the addresses of all the
code blocks executed. We use dynamic binary instrumentation
to record the execution path. An Intel Pin tool is designed to
monitor the execution at instruction level. It records the source
address and destination address of all the control ﬂow transfer
instructions.
Using Intel Pin to instrument a program can be both
intrusive and reboot-needed, which is against our assumption.
The instruction level dynamic binary instrumentation also
introduces massive overhead if it suspends the process for
every instruction.
There are two hardware features widely available on com-
modity processors that can be used to help us obtain the
ground truth. Last Branch Recording (LBR) is a mechanism
that
tracks branches. Previous work [3], [28], [29] shows
that using LBR to record source and destination of ﬁltered
instructions incurs almost zero-overhead. LBR can record up
to 16 from-to records in Model-Speciﬁc Registers (MSRs),
according to our CPU model. That is, we can ﬁnd 16 pairs
of source and destination addresses of branch instructions
at one time. Nevertheless, when it comes up with a 17th
branch instruction, one of the 16 records will be wiped out.
We log them before the 17th branch instruction is executed.
[36] proposes an idea that utilizes Performance Monitoring
Unit (PMU) to co-operate with LBR. PMU can be conﬁgured
to set the events it needs to monitor. It contains a counter
named Performance Monitoring Counters (PMC). Whenever
the conﬁgured event occurs, the PMC in the PMU will increase
automatically. PMU will trigger an interrupt when the PMC
overﬂows.
BIT FIELD FOR FILTERING DIFFERENT TYPES OF BRANCH INSTRUCTIONS
TABLE III
Bit Field
Bit Offset
CPL_EQ_0
CPL_NEQ_0
JCC
NEAR_REL_CALL
NEAR_IND_CALL
NEAR_RET
NEAR_IND_JMP
NEAR_REL_JMP
FAR_BRANCH
0
1
2
3
4
5
6
7
8
Description
branches in ring 0
branches in ring 3
conditional branches
near relative calls
near indirect calls
near returns
near indirect jumps ex-
cept near indirect calls
and near returns
relative
jumps
near relative calls
far branches
except
According to Intel developer’s manual, we conﬁgure
IA32_DEBUG_MSR and IA32_PERF_GLOBAL_CTRL to
enable Last Branch Recording and Performance Monitoring
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:25 UTC from IEEE Xplore.  Restrictions apply. 
334
PRECISIONS, RECALLS AND F-SCORES FOR TARGET PROGRAMS
TABLE IV
Type
Keylogger
Virus
Packer
Target
Spyrix
Blackbox Express
kidlogger
Revealer keylogger
MyDoom
Ratos
HIV
Armadillo
Themida
WinUpack
UPX
p
0.81
0.99
0.72
0.69
0.72
0.94
0.75
0.84
0.98
0.68
0.88
r
0.38
0.03
0.77
0.43
0.43
0.29
0.27
0.62
0.09
0.53
0.39
f − score
0.52
0.05
0.74
0.53
0.54
0.44
0.40
0.71
0.17
0.59
0.54
Unit. A ground truth needs to capture all types of control-
ﬂow transfers. We set up a sub-event mask for the types of
instructions that we need. Table III lists the ﬂags that we set
in MSR_LBR_SELECT so that all these control-ﬂow transfers
can been captured. When PMU triggers an interrupt, a handler
is designed in kernel that outputs the source and destination
addresses into a log ﬁle. It shows the ground truth of the basic
block sequence, that is, the execution trace.
Although LBR can decide to monitor user-mode program
or kernel-mode program through two ﬂags of CPL_EQ_0
and CPL_NEQ_0, it cannot distinguish the branch instructions
both generated by the processes in user-mode. Branch instruc-
tions in different user-mode processes will all be captured by
LBR and then recorded. To solve this, we modify the Linux
kernel so that it can mark the Process Control Block (PCB)
of the target process. When the target is scheduled in, LBR
is turned on and the PMC is reset. It is turned off when the
target process is scheduled out. All the address pairs in the
log ﬁle are generated by the target process.
2) Coverage: To measure the percentage of codes covered
in the analysis, we calculate the precision (p) and recall (r). r
represents the completeness of Catcher’s result. In other words,
r deﬁnes the ratio of how many executed blocks are captured.
p represents the correctness of the result. That is, how many
blocks in Catcher’s output are actually executed.
According to the exhaustive result in Table IV, Catcher
provides an analysis result not as accurate as legacy methods,
yet it is still usable. Compared with the methodology that
needs to modify or reboot the system, Catcher is completely
non-intrusive. This is important in face of malicious processes
with anti-analysis capabilities. When the program or system
cannot be restarted, our non-intrusive method can provide a
practical result. The average value of r is 0.385 (0.457 if
remove the abnormally low malware) while p is 0.817. The
reason for a low r is that Catcher misses parts of executed
code blocks because of no pausing. Unlike intrusive analysis
methods, e.g., dynamic binary instrumentation, the lack of
event trigger of Catcher makes it impossible for Catcher to
ﬁnd all the executed blocks. In addition, some code blocks
are sacriﬁced to reduce the impact of the synchronization
problem, which will lead to a drop in recall r. The reduction
of recall is actually a kind of compromise to perform analysis
in harsh environments. The result also shows precision p
is satisfying. A practical precision indicates the feasibility
of using cache to analyze program execution. By adopting
the heuristics introduced in section III, Catcher mitigates the
adverse effect of cache instability. Compared with the ground
truth, the inferences on more than 80% of basic blocks is
correct.
3) Smilarity: Merely using precision and recall to measure
the accuracy of the generated control ﬂow is not complete
because it does not take execution order into consideration.
For instance, a process is executed as block a, block b then
block c. However the analyzer comes to a sequence as block c,
block b and then block a. In this extreme case, we can present
a perfect precision, recall, and f-score, while the control ﬂow
obtained is actually wrong.
To avoid this situation, we use similarity in NLP to deﬁne
the difference between the obtained trace and ground truth. We
treat the complete sequence as one sentence and every block
in it as a word. We ﬁrst calculate the Levenshtein distance (as
known as edit distance) between O(e) and C(e), and then get
the Levenshtein ratio to deﬁne the similarity.
For a random trace that picks a random branch in every