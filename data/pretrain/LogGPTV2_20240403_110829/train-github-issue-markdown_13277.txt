**I'm submitting a ...** (check one with "x")
    [x] feature request
**Current behavior**
I have to store subscriptions and unsubscribe on destroy:
    @Component({ /* ... */ })
    export class MyComponent {
        public data;
        private dataSubscription: Subscription;
        constructor(private http: Http, private route: ActivatedRoute) {
        }
        ngOnInit() {
            this.dataSubscription = this.route.params
                .switchMap(() => this.http.get('/api'))
                .subscribe(response => this.data = response.json());
        }
        ngOnDestroy() {
            if (this.dataSubscription) {
                this.dataSubscription.unsubscribe();
            }
        }
    }
**Expected/desired behavior**
I would rather do `observable.takeUntil(componentDestroyEmitter)....` like:
    @Component({ /* ... */ })
    export class MyComponent {
        public data;
        constructor(private ngDestroyEmitter: NgDestroyEmitter, private http: Http, private route: ActivatedRoute) {
        }
        ngOnInit() {
            this.route.params
                .takeUntil(this.ngDestroyEmitter)
                .switchMap(() => this.http.get('/api'))
                .subscribe(response => this.data = response.json());
        }
    }
To avoid additional Subscription state and manual cleanup code.
  * **Angular version:** 2.0.0-rc.4
  * **Browser:** [all]
  * **Language:** [all]