`pg_analytics` embeds Arrow, Parquet, and DataFusion inside Postgres via executor hooks and the table access method API. Executor hooks intercept queries to these tables and reroute them to DataFusion, which generates an optimized query plan, executes the query, and sends the results back to Postgres. The table access method persists Postgres tables as Parquet files and registers them with Postgres' system catalogs. The Parquet files are managed by Delta Lake, which provides ACID transactions.  
## Development  
### Install Rust  
To develop the extension, first install Rust v1.73.0 using `rustup`. We will soon make the extension compatible with newer versions of Rust:  
```bash  
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  
rustup install 1.73.0  
# We recommend setting the default version to 1.73.0 for consistency across your system  
rustup default 1.73.0  
```  
Note: While it is possible to install Rust via your package manager, we recommend using `rustup` as we've observed inconcistencies with Homebrew's Rust installation on macOS.  
Then, install the PostgreSQL version of your choice using your system package manager. Here we provide the commands for the default PostgreSQL version used by this project:  
### Install Postgres  
```bash  
# macOS  
brew install postgresql@16  
# Ubuntu  
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -  
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'  
sudo apt-get update && sudo apt-get install -y postgresql-16 postgresql-server-dev-16  
```  
If you are using Postgres.app to manage your macOS PostgreSQL, you'll need to add the `pg_config` binary to your path before continuing:  
```bash  
export PATH="$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin"  
```  
### Install pgrx  
Then, install and initialize `pgrx`:  
```bash  
# Note: Replace --pg16 with your version of Postgres, if different (i.e. --pg15, --pg14, etc.)  
cargo install --locked cargo-pgrx --version 0.11.2  
# macOS arm64  
cargo pgrx init --pg16=/opt/homebrew/opt/postgresql@16/bin/pg_config  
# macOS amd64  
cargo pgrx init --pg16=/usr/local/opt/postgresql@16/bin/pg_config  
# Ubuntu  
cargo pgrx init --pg16=/usr/lib/postgresql/16/bin/pg_config  
```  
If you prefer to use a different version of Postgres, update the `--pg` flag accordingly.  
Note: While it is possible to develop using pgrx's own Postgres installation(s), via `cargo pgrx init` without specifying a `pg_config` path, we recommend using your system package manager's Postgres as we've observed inconsistent behaviours when using pgrx's.  
### Configure Shared Preload Libraries  
This extension uses Postgres hooks to intercept Postgres queries. In order to enable these hooks, the extension  
must be added to `shared_preload_libraries` inside `postgresql.conf`. If you are using Postgres 16, this file can be found under `~/.pgrx/data-16`.  
```bash  
# Inside postgresql.conf  
shared_preload_libraries = 'pg_analytics'  
```  
### Run Without Optimized Build  
The extension can be developed with or without an optimized build. An optimized build improves query times by 10-20x but also significantly increases build times.  
To launch the extension without an optimized build, run  
```bash  
cargo pgrx run  
```  
### Run With Optimized Build  
First, switch to latest Rust Nightly (as of writing, 1.77) via:  
```bash  
rustup update nightly  
rustup override set nightly  
```  
Then, reinstall `pgrx` for the new version of Rust:  
```bash  
cargo install --locked cargo-pgrx --version 0.11.2 --force  
```  
Finally, run to build in release mode with SIMD:  
```bash  
cargo pgrx run --release  
```  
Note that this may take several minutes to execute.  
To revert back to the stable version of Rust, run:  
```bash  
rustup override unset  
```  
### Run Benchmarks  
To run benchmarks locally, enter the `pg_analytics/` directory and run `cargo clickbench`. This runs a minified version of the ClickBench benchmark suite on `pg_analytics`.  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")