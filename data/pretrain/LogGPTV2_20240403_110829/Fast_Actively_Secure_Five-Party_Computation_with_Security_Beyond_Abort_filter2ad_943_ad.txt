If verified, they use (m0, r0, m1, r1) to compute the commitments
(pp, c0, c1) and send the same to the receiver. One of the attesters,
say Pa1 also sends the opening corresponding to cb to Pr . If the
verification fails, the attesters send ⊥ to Pr . The receiver Pr then
checks if all the copies of commitments received are the same. If
not, aborts. Else, Pr uses the opening of cb to obtain mb.
When coupled with seed distribution, the standalone realization
of F4AOT can be simplified as follows: The attesters are chosen s.t
they possess the inputs (derived from seed) of both sender and
receiver. For instance, when Ps = P1, Pr = P2, the attesters are
P3, P4 and the inputs of the sender are derived from the seed s1,
while the input of the receiver is derived from seed s2 (both seeds are
with P3, P4). Thus, Ps, now sends (pp, c0, c1) to Pr and the attesters
send H((pp, c0, c1)) to Pr . Also, Pa1 sends opening corresponding
to commitment cb. All these steps can be done in only one round
and hence AOT in our garbling scheme needs only one round. This
process is formally depicted in Fig 6.
The protocol realization specific to god is presented in Fig 7. This
protocol is same as Π4AOT, except that the sender’s and attesters’
messages are broadcast to enable the identification of conflict in
case of mismatching messages. Thus the protocol either outputs
the OT message to the receiver or identifies a 3PC P3 for all.
3.4 Correctness of 4DG
Lemma 3.4. The protocols Garble and Eval are correct.
w
u λj
Common Inputs: Circuit C that computes f .
Primitives and Notation: A double-keyed PRF F [13]. Sд denotes the
indices of parties who hold sд as well as the indices of seeds held by Pд.
Output: Each party Pд , д ∈ [4] outputs GC j , j ∈ Sд or ⊥.
Sampling Phase: Each Pд , д ∈ [4] samples ∆j from sj , j ∈ Sд. Also,
the following is done for each wire w in C corresponding to seed sj :
w ,0 from sj .
– If w is not an output wire of XOR gate, sample λj
w and k j
Set k j
w ,1 = k j
w ,0 ⊕ ∆j .
u λj
u λд
v , k j
u λj
u λд
u λk
u λj
w ,1 = k j
v]S ,[λk
u ⊕ λj
λj
– If w is an output wire of XOR gate with input wires u, v, set λj
w =
The mask and super-key pair for a wire w is defined as λw = ⊕д∈[4]λд
(cid:17). Run in parallel for every AND gate in
w ,0 = k j
w ,0}д∈[4], {kд
u ,0 ⊕ k j
w ,1}д∈[4]
and(cid:16){kд
w ,0 ⊕ ∆j .
v ,0 and k j
v]S ⊕ λk
u λj
v]S) ⊕ (⊕i(cid:44)j[λi
u) derived from sk .
w . Similarly, it computes the shares for λ2, λ3, λ4.
v . For each k (cid:44) j, sample [λj
v]R = [λk
u)(⊕д∈[4]λд
v).
uv of λuv for every j ∈ Sд as below:
C with input wires u, v and output wire w:
R1: Product Phase I: Define λuv = λu λv = (⊕д∈[4]λд
Likewise define λuv , λuv , λu v that can be derived from shares of λuv .
Each garbler Pд computes λj
v]S from seed sj .
– locally compute λj
– for every k ∈ Sд, locally compute [λk
v]S ⊕ λk
v with
the knowledge of sj and sk .
v]R from F4AOT as receiver with input
– for each k (cid:60) Sд, obtain [λk
v and Pk as sender with inputs ([λk
u) derived
u λд
λд
from sk . Further, for each k (cid:60) Sд, j (cid:44) д, obtain [λk
v]R from F4AOT
v , and sender Ps , s = [4] \ {д, j, k } with
as receiver with input λj
inputs ([λk
v]S ,[λk
v]S ⊕ λk
u λj
u λj
v ⊕ (⊕i(cid:44)j[λj
– compute λj
u λj
uv = λj
Define λ1 = λu λv ⊕ λw , λ2 = λu λv ⊕ λw , λ3 = λu λv ⊕ λw , λ4 =
λu λv ⊕ λw . Every Pд computes jth share λj
1 of λ1 for all j ∈ Sд as
uv ⊕ λj
λj
R2: Product Phase II: Pд computes share [∆j λγ ]j (jth additive share)
of ∆j λγ for every γ ∈ [4] and j ∈ Sд as follows:
γ ]S from sj .
– locally compute ∆j λj
– compute [∆j λγ ]j = ∆j λj
Pд computes [∆k λγ ]j of ∆k λγ for each k (cid:44) j, γ ∈ [4], j ∈ Sд as:
◦ For every k ∈ Sд, compute [∆k λγ ]j = [∆k λj
knowledge of sj and sk .
◦ For k (cid:60) Sд, j = д, obtain [∆k λд
with input λд
[∆k λд
◦ For k (cid:60) Sд, j (cid:44) д, obtain [∆k λj
input λj
[∆k λj
γ ]S ⊕ ∆k derived from sk . Set [∆k λγ ]j = [∆k λj
γ and Ps , s = [4] \ {д, j, k } as sender with inputs [∆k λj
γ ]S ⊕ ∆k (from sk ). Set [∆k λγ ]j = [∆k λj
Super-CT Construction Phase: For each j ∈ Sд , Pд constructs c j
γ ∈ [4], as in FGC (Fig 3) and outputs
GC j = {{c j
γ }γ ∈[4]}∀ AND gates||{H(kд
γ ]R locally from the
γ ]R from F4AOT acting as receiver
γ ]S and
γ ]R from F4AOT acting as receiver with
γ ]S ,
γ and with Pk as sender whose inputs are [∆k λд
γ . For every k (cid:44) j, sample [∆j λk
γ ⊕k(cid:44)j [∆j λk
w ,1)}∀ output wires w.
w ,0), H(kд
v]R).
γ ]R.
γ ]R.
γ ]S .
γ for
u λi
u λj
Figure 4: Protocol Garble()
Proof. To prove the lemma we argue that the super-key en-
crypted in the super-CT of a row decrypts to the correct super-key
when evaluated on the blinded inputs corresponding to that row.
Consider an AND gate with input wires u, v and output wire w with
corresponding masks λu, λv and λw respectively. Let the blinded
inputs bu, bv received for evaluation have values bu = bv = 0. This
means γ = 1 (row 1). We prove that bw and {k
}д∈[4] are cor-
rectly computed given bu, bv and super-keys {(k
)}д∈[4].
For simplicity we consider λw = 0. The values bu = bv = 0 imply
xu = λu and xv = λv. Since, λw = 0, λγ = λ1 = λu λv. This
д
w ,bw
д
v ,bv
д
u,bu
, k
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1578w ,bw
Inputs: P5 holds GC = GC1||GC2||GC3||GC4, blinded bit bw , the
corresponding super-key {kд
}д∈[4] for every input wire w and mask
λw for every output wire w.
Output: P5 outputs y = C(x) where x is the actual input or ⊥.
Evaluation: Evaluation is done topologically. For a gate with input wires
}д∈[4]).
u, v and output wire w, P5 has (bu , {kд
u ,bu
– For XOR gate, P5 sets bw = bu ⊕ bv , {kд
}д∈[4].
– For AND gate, P5 sets γ = 2bu +bv +1 and computes bw = ⊕д∈[4]λд
γ
w ⊕ (⊕д
and kд
γ in
= kд
γ th super-CT as:
γ ||{[∆д′
λγ ]д }д′(cid:44)д ||kд
(λд
}д∈[4]), (bv , {kд
v ,bv
⊕ kд
w ,bw
′) by decrypting every CT cд
′ (cid:44)д[∆д λγ ]д
w) := Fkд
= kд
w ,bw
u ,bv
u ,bu
(j ||д) ⊕ cд
γ .
v ,bv
}д∈[4] and checks if the
w ,bw
), д ∈ [4]. If so, P5 outputs
,kд
For an output wire w, P5 assigns Y := {kд
hash on дth key in Y verifies to H(kд
yw := bw ⊕ (⊕д∈[4]λд
w ,bw
u ,bu
w) for every output wire w. Else P5 aborts.
Figure 5: Protocol Eval()
Ps , Pr denote the sender and receiver respectively. Pa1, Pa2 are attesters.
All are distinct parties.
Inputs: Ps holds m0, m1, Pr holds choice bit b.
Output Pr outputs mb/⊥.
Primitives: A secure NICOM (Com, Open) (Appendix B).
– Ps samples pp and random r0, r1 ← {0, 1}κ (derived from si ,
i ∈ Ss \ Sr ) and computes (c0, o0) ← Com(pp, m0), (c1, o1) ←
Com(pp, m1). Ps sends (pp, c0, c1) to Pr . Pa1 , Pa2 who know (r0, r1)
(since they know si ) also compute (c0, o0) ← Com(pp, m0), (c1, o1)
← Com(pp, m1) and each send H((pp, c0, c1)) to Pr (The exact re-
alization of the functionality F4AOT involves Ps and Pr sending
(r0, m0, r1, m1) and b respectively to Pa1 and Pa2 who in turn ex-
change their copies received from Ps , Pr for correctness).
– Pr has b (derived using sj , j ∈ Sr \ Ss ) which is known to Pa1 , Pa2
(since they know sj ). Pa1 (wlog) sends ob to Pr .
(Local Computation by Pr ): If the commitment sent by Ps and the hash
values sent by Pa1 , Pa2 do not match, then Pr outputs ⊥. Else, output
mb = Open(cb , ob).
Figure 6: Protocol Π4AOT(Ps , Pr , {Pa1, Pa2}) for Garble
Ps , Pr denote the sender and receiver respectively. Pa1, Pa2 are attesters.
Pa denotes the auditor. All are distinct parties.
Inputs: Ps holds m0, m1, Pr holds choice bit b.
Notations P3 is the 3PC committee with at most 1 corruption.
Output Pr outputs mb/P3. All other parties output ⊥/P3.
Primitives: A secure NICOM (Com, Open) (Appendix B).
– Ps samples pp and random r0, r1 ← {0, 1}κ (derived from si ,
i ∈ Ss \ Sr ) and computes (c0, o0) ← Com(pp, m0), (c1, o1) ←
Com(pp, m1). Ps broadcasts (pp, c0, c1). Pa1 , Pa2 who know (r0, r1)
(since they know si ) also compute (c0, o0) ← Com(pp, m0), (c1, o1)
← Com(pp, m1) and each broadcast (c0, c1).
– Pr has b (derived using sj , j ∈ Sr \ Ss ) which is known to Pa1 , Pa2
(since they know sj ). Pa1 (wlog) sends ob to Pr .
If the broadcast values sent by Ps , Pa1 , Pa2 do not match, each Pγ , γ ∈
[5] sets P3 := {a1, r , a}. Output P3.
Computation by Pr : If no ob is received or Open(cb , ob) = ⊥, broadcast
conflict with Pa1. All parties set P3 := {s , a2, a} and output P3. Else,
Pr outputs mb = Open(cb , ob) and the remaining parties output ⊥.
Figure 7: Protocol Π4AOTGOD(Ps , Pr , {Pa1, Pa2}, Pa)
means that g(λu, λv) = g(xu, xv) where g is the AND gate func-
tion. Thus, the encrypted super-key must be {k
w ,g(xu ,xv)}д∈[4] as
д
∆дλ1 = ∆дg(xu, xv) (thus λ1 = g(xu, xv)) for each garbler Pд. Now,
we show that on decryption of the super-CT in row γ = 1, the
evaluator obtains {k
w ,g(xu ,xv)}д∈[4]. The plaintext of super-CT of
row 1 on unmasking the one-time pad of PRF appears as follows:
д
1||{[∆д′
{ (λ
1
1||{[∆д′
(λ
2
1||{[∆д′
(λ
3
1||{[∆д′