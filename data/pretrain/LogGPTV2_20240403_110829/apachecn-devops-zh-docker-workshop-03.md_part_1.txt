# 三、管理您的 Docker 映像
概观
在本章中，我们将研究 Docker 层，并分析缓存如何帮助加快映像构建。我们还将深入研究 Docker 映像，并建立 Docker 注册表来提高映像的可重用性。
在本章结束时，您将能够演示 Docker 如何使用图层来构建映像，以及如何通过缓存来加快映像构建。您将使用映像标签，并为 Docker 映像设置标签策略。本章将使您能够在项目中使用 Docker Hub，并区分公共和私有注册中心。它还将帮助您在处理项目时建立自己的 Docker 注册表。
# 简介
我们前面的章节已经用 Docker 映像做了很多工作。正如您所看到的，我们已经能够拍摄现有的映像，并在 Docker Hub 中提供给公众，然后能够运行它们，或者在为我们的目的构建它们之后重用它们。映像本身帮助我们简化流程，减少我们需要做的工作。
在本章中，我们将更深入地了解映像以及如何在您的系统上使用它们。我们将学习如何更好地组织和标记映像，了解映像的不同层是如何工作的，并建立公共和私有的注册表，以进一步重用我们创建的映像。
Docker 映像也非常适合应用开发。映像本身是应用的一个独立版本，包括运行所需的一切。这使开发人员能够在他们的本地机器上构建一个映像，并将其部署在开发或测试环境中，以确保它能与应用的其他部分很好地协同工作。如果一切顺利，他们可以将相同的映像作为发行版推送到生产环境中，供用户使用。我们在使用映像时也需要保持一致，尤其是当我们开始在更大的开发团队中工作时。
本章还将帮助您设置策略，使您的服务具有一致的标记，以帮助限制问题，并确保您可以在出现问题时进行跟踪或回滚。了解如何分发映像以供消费和协作也是我们将在本章中进一步讨论的内容。因此，不再拖延，让我们从这一章开始，了解 Docker 中有哪些层和缓存。
# Docker 层和缓存
注册表是存储和分发 Docker 映像的一种方式。当您从注册表中提取 Docker 映像时，您可能已经注意到该映像是以碎片的形式提取的，而不是作为单个映像。当您在系统上构建映像时，也会发生同样的事情。
这是因为 Docker 映像由层组成。当你使用`Dockerfile`创建一个新的映像时，它会在你已经创建的现有映像上创建更多的层。您在`Dockerfile`中指定的每个命令将创建一个新层，每个层包含在执行命令之前和之后发生的所有文件系统更改。当您从`Dockerfile`中运行映像作为容器时，您正在现有的只读图层组之上创建可读和可写图层。这个可写层被称为**容器层**。
正如您将在以下练习中看到的，当您从`Dockerfile`构建容器时，呈现的输出显示了在`Dockerfile`中运行的每个命令。它还显示了通过运行每个命令创建的层，这些层由随机生成的标识表示。一旦映像完成构建，您就可以使用`docker history`命令查看构建过程中创建的图层，包括映像名称或 ID。
注意
设置构建环境时，当您在开发过程中继续前进时，请记住您拥有的层越多，您的映像就越大。因此，无论是构建时间还是开发和生产环境中使用的磁盘空间量，这些额外的存储和空间都非常昂贵。
从`Dockerfile`构建映像时，使用`RUN`、`ADD`和`COPY`命令创建图层。`Dockerfile`中的所有其他命令创建中间层。这些中间层大小为 0b；因此，它们不会增加 Docker 映像的大小。
构建 Docker 映像时，我们可以使用`docker history`命令和映像名称或 ID 来查看用于创建映像的图层。输出将提供用于生成图层的命令以及图层大小的详细信息:
```
docker history 
```
`docker image inspect`命令有助于提供更多关于映像图层位置的详细信息:
```
docker image inspect 
```
在本章的稍后部分，当我们考虑创建我们的基础映像时，我们将使用`docker image`命令，该命令与我们正在创建的映像的 TAR 文件版本结合使用。如果我们能够访问正在运行的容器或虚拟机，我们将能够获取正在运行的系统的副本，并将其放入 TAR 归档中。档案的输出然后通过管道输出到`docker import`命令，如下所示:
```
cat  | docker import - 
```
下一个练习将让您亲身体验我们到目前为止所学的内容，以及如何使用 Docker 映像图层。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 3.01:使用 Docker 映像图层
在本练习中，您将使用一些基本的`Dockerfiles`来查看 Docker 如何使用图层来构建映像。你将从创建一个`Dockerfile`和建立一个新的形象开始。然后，您将重建映像，以了解使用缓存的优势，以及使用缓存如何减少构建时间:
1.  用你喜欢的文本编辑器创建一个名为`Dockerfile`的新文件，并添加以下细节:
    ```
    FROM alpine
    RUN apk update
    RUN apk add wget
    ```
2.  Save the `Dockerfile` and then, from the command line, make sure you are in the same directory as the `Dockerfile` you have created. Use the `docker build` command to create the new image using the `–t` option to name it `basic-app`:
    ```
    docker build -t basic-app .
    ```
    如果映像构建成功，您应该会看到类似以下的输出。我们用粗体突出显示了每个构建步骤。每个步骤都被构建为一个中间层，如果成功完成，它将被转移到只读层:
    ```
    Sending build context to Docker daemon 4.096kB
    Step 1/3 : FROM alpine
    latest: Pulling from library/alpine
    9d48c3bd43c5: Pull complete 
    Digest: sha256:72c42ed48c3a2db31b7dafe17d275b634664a
            708d901ec9fd57b1529280f01fb
    Status: Downloaded newer image for alpine:latest
      ---> 961769676411
    Step 2/3 : RUN apk update
      ---> Running in 4bf85f0c3676
    fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/main/
      x86_64/APKINDEX.tar.gz
    fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/community/
      x86_64/APKINDEX.tar.gz
    v3.10.2-64-g631934be3a [http://dl-cdn.alpinelinux.org/alpine
      /v3.10/main]
    v3.10.2-65-ge877e766a2 [http://dl-cdn.alpinelinux.org/alpine
      /v3.10/community]
    OK: 10336 distinct packages available
    Removing intermediate container 4bf85f0c3676
      ---> bcecd2429ac0
    Step 3/3 : RUN apk add wget
      ---> Running in ce2a61d90f77
    (1/1) Installing wget (1.20.3-r0)
    Executing busybox-1.30.1-r2.trigger
    OK: 6 MiB in 15 packages
    Removing intermediate container ce2a61d90f77
      ---> a6d7e99283d9
    Successfully built 0e86ae52098d
    Successfully tagged basic-app:latest
    ```
3.  Use the `docker history` command along with the image name of `basic-app` to see the different layers of the image:
    ```
    docker history basic-app
    ```
    历史记录为您提供了创建细节，包括每个层的大小:
    ```
    IMAGE         CREATED            CREATED BY 
                          SIZE
    a6d7e99283d9  About a minute ago /bin/sh -c apk add wget
                          476kB
    bcecd2429ac0  About a minute ago /bin/sh -c apk update
                          1.4MB
    961769676411  5 weeks ago        /bin/sh -c #(nop)
    CMD ["/bin/sh"]       0B
         5 weeks ago        /bin/sh -c #(nop) 
    ADD file:fe6407fb…    5.6MB
    ```
    注意
    `docker history`命令将原始映像中用作`Dockerfile` `FROM`命令一部分的图层显示为``。它在我们的输出中显示为`missing`，因为它是在不同的系统上创建的，然后被拉进您的系统。
4.  Run the build again without making any changes:
    ```
    docker build -t basic-app .
    ```
    这将向您展示构建是使用存储在 Docker 映像缓存中的图层完成的，从而加快我们的构建。虽然这只是一个小映像，但大得多的映像会显示出显著的增加:
    ```
    Sending build context to Docker daemon  4.096kB
    Step 1/3 : FROM alpine
      ---> 961769676411
    Step 2/3 : RUN apk update
     ---> Using cache
      ---> bcecd2429ac0
    Step 3/3 : RUN apk add wget
     ---> Using cache
      ---> a6d7e99283d9
    Successfully built a6d7e99283d9
    Successfully tagged basic-app:latest
    ```
5.  假设您在创建映像时忘记安装`curl`包。从*第 1 步*
    ```
    FROM alpine
    RUN apk update
    RUN apk add wget curl
    ```
    开始，在`Dockerfile`中添加以下行
6.  Build the image again, and you'll now see the image created with a mix of cached layers and new layers that need to be created:
    ```
    docker build -t basic-app .
    ```
    输出的第三步突出显示了我们正在构建的`Dockerfile`中所做的更改:
    ```
    Sending build context to Docker daemon 4.096kB
    Step 1/3 : FROM alpine
      ---> 961769676411
    Step 2/3 : RUN apk update
      ---> Using cache
      ---> cb8098d0c33d
    Step 3/3 : RUN apk add wget curl
      ---> Running in b041735ff408
    (1/5) Installing ca-certificates (20190108-r0)
    (2/5) Installing nghttp2-libs (1.39.2-r0)
    (3/5) Installing libcurl (7.66.0-r0)
    (4/5) Installing curl (7.66.0-r0)
    (5/5) Installing wget (1.20.3-r0)
    Executing busybox-1.30.1-r2.trigger
    Executing ca-certificates-20190108-r0.trigger
    OK: 8 MiB in 19 packages
    Removing intermediate container b041735ff408
      ---> c7918f4f95b9
    Successfully built c7918f4f95b9
    Successfully tagged basic-app:latest
    ```
7.  Run the `docker images` command again:
    ```
    docker images
    ```
    现在，您将注意到名为``并标记为``的映像，以显示我们现在已经创建了一个悬空映像:
    ```
    REPOSITORY   TAG      IMAGE ID        CREATED           SIZE
    basic-app    latest   c7918f4f95b9    25 seconds ago    8.8MB
              0e86ae52098d    2 minutes ago     7.48MB
    Alpine       latest   961769676411    5 weeks ago       5.58MB
    ```
    注意
    悬空映像，在我们的映像列表中用``表示，是当一个图层与我们系统中的任何映像都没有关系时引起的。这些晃来晃去的映像不再有任何用途，并且会消耗系统上的磁盘空间。我们的示例悬空映像只有 7.48 MB，这很小，但随着时间的推移，这可能会增加。
8.  Run the `docker image inspect` command using the image ID to see the location of where the dangling images are located on our system:
    ```
    docker image inspect 0e86ae52098d
    ```
    以下输出已从实际输出缩减为仅显示映像的目录:
    ```
    ... 
      "Data": {
        "LowerDir": "/var/lib/docker/overlay2/
          41230f31bb6e89b6c3d619cafc309ff3d4ca169f9576fb003cd60fd4ff
          4c2f1f/diff:/var/lib/docker/overlay2/
          b8b90262d0a039db8d63c003d96347efcfcf57117081730b17585e163f
          04518a/diff",
        "MergedDir": "/var/lib/docker/overlay2/
          c7ea9cb56c5bf515a1b329ca9fcb2614f4b7f1caff30624e9f6a219049
          32f585/
          merged",
        "UpperDir": "/var/lib/docker/overlay2/
          c7ea9cb56c5bf515a1b329ca9fcb2614f4b7f1caff30624e9f6a21904
          932f585/diff",
        "WorkDir": "/var/lib/docker/overlay2/
          c7ea9cb56c5bf515a1b329ca9fcb2614f4b7f1caff30624e9f6a21904
          932f585/work"
      },
    ...
    ```
    我们所有的映像都位于与悬空映像相同的位置。由于它们共享同一个目录，任何悬挂的映像都会浪费我们系统的空间。
9.  Run the `du` command from the command line to see the total disk space being used by our images:
    ```
    du -sh /var/lib/docker/overlay2/
    ```
    该命令将返回映像使用的总磁盘空间
    ```
    11M    /var/lib/docker/overlay2/
    ```