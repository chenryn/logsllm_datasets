title:Neural Machine Translation Inspired Binary Code Similarity Comparison
beyond Function Pairs
author:Fei Zuo and
Xiaopeng Li and
Patrick Young and
Lannan Luo and
Qiang Zeng and
Zhexin Zhang
Neural Machine Translation Inspired Binary Code
Similarity Comparison beyond Function Pairs
Fei Zuo†, Xiaopeng Li†, Patrick Young‡, Lannan Luo†*, Qiang Zeng†*, Zhexin Zhang†
†University of South Carolina, ‡Temple University
{fzuo, xl4, zhexin}@email.sc.edu, {lluo, zeng1}@cse.sc.edu
Abstract—Binary code analysis allows analyzing binary code
without having access to the corresponding source code. A binary,
after disassembly, is expressed in an assembly language. This
inspires us to approach binary analysis by leveraging ideas and
techniques from Natural Language Processing (NLP), a fruitful
area focused on processing text of various natural languages. We
notice that binary code analysis and NLP share many analogical
topics, such as semantics extraction, classiﬁcation, and code/text
comparison. This work thus borrows ideas from NLP to address
two important code similarity comparison problems. (I) Given
a pair of basic blocks of different instruction set architectures
(ISAs), determining whether their semantics is similar; and (II)
given a piece of code of interest, determining if it is contained in
another piece of code of a different ISA. The solutions to these
two problems have many applications, such as cross-architecture
vulnerability discovery and code plagiarism detection.
Despite the evident importance of Problem I, existing solutions
are either inefﬁcient or imprecise. Inspired by Neural Machine
Translation (NMT), which is a new approach that tackles text
across natural languages very well, we regard instructions as
words and basic blocks as sentences, and propose a novel cross-
(assembly)-lingual deep learning approach to solving Problem I,
attaining high efﬁciency and precision. Many solutions have been
proposed to determine whether two pieces of code, e.g., functions,
are equivalent (called the equivalence problem), which is different
from Problem II (called the containment problem). Resolving
the cross-architecture code containment problem is a new and
more challenging endeavor. Employing our technique for cross-
architecture basic-block comparison, we propose the ﬁrst solution
to Problem II. We implement a prototype system INNEREYE and
perform a comprehensive evaluation. A comparison between our
approach and existing approaches to Problem I shows that our
system outperforms them in terms of accuracy, efﬁciency and
scalability. The case studies applying the system demonstrate that
our solution to Problem II is effective. Moreover, this research
showcases how to apply ideas and techniques from NLP to large-
scale binary code analysis.
I.
INTRODUCTION
Binary code analysis allows one to analyze binary code
without access to the corresponding source code. It is widely
used for vulnerability discovery, code clone detection, user-side
crash analysis, etc. Today, binary code analysis has become
more important than ever. Gartner forecasts that 8.4 billion IoT
devices will be in use worldwide in 2017, up 31 percent from
* Corresponding authors.
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23492
www.ndss-symposium.org
2016, and will reach 20.4 billion by 2020 [22]. Due to code
reuse and sharing, a single vulnerability at source code level
may spread across hundreds or more devices that have diverse
hardware architectures and software platforms [52]. However,
it is difﬁcult, often unlikely, to obtain the source code from
the many IoT device companies. Thus, binary code analysis
becomes the only feasible approach.
Given a code component that is known to contain some
vulnerability and a large number of programs that are compiled
for different ISAs, by ﬁnding programs that contain similar
code components, more instances of the vulnerability can be
found. Thus, cross-architecture binary code analysis draws great
interests [52], [18], [19], [65].
Our insight. A binary, after disassembly, is represented in some
assembly language. This inspires us to approach binary code
analysis by learning from Natural Language Processing (NLP),
a fruitful area focused on processing natural language corpora
effectively and efﬁciently. Interestingly, the two seemingly
remote areas—binary code analysis and NLP—actually share
plenty of analogical topics, such as semantics extraction from
code/text, summarization of paragraphs/functions, classiﬁcation
of code/articles, and code/text similarity comparison. We thus
propose to adapt the ideas, methods, and techniques used in
NLP to resolving binary code analysis problems. As a showcase,
we use this idea to perform cross-architecture binary code
similarity comparison.
Previous work [52], [18], [19], [65] essentially resolves the
code equivalence problem at the function level: given a pair of
functions, it is to determine whether they are equivalent. We
consider a different problem: given a code component, which
can be part of a function (e.g., the code in a web server that
parses the URL) or a set of functions (e.g., an implementation
of a crypto algorithm), to determine whether it is contained
in a program. Thus, it is a code containment problem. The
problem has been emphasized by previous work [27], [37],
[45], [66], [60], [61], [38], but the proposed solutions can only
work for code of the same ISA. Resolving the cross-architecture
code containment problem is a new and important endeavor. A
solution to this problem is critical for tasks such as ﬁne-grained
code plagiarism detection, thorough vulnerability search, and
virus detection. For example, a code plagiarist may steal part
of a function or a bunch of functions, and insert the stolen
code into other code; that is, the stolen code is not necessarily
a function. Code plagiarism detection based on searching for
equivalent functions is too limited to handle such cases.
We deﬁne two concrete research problems: (I) given a pair
of binary basic blocks of different instruction set architectures
(ISAs), determining whether their semantics is similar or not;
and (II) given a piece of critical code, determining whether it is
contained in another piece of code of a different ISA. Problem I
is a core sub-task in recent work on cross-architecture similarity
comparison [52], [18], [19], [65], while Problem II is new.
Solution to Problem I. Problem I is one of the most
fundamental problems for code comparison; therefore, many ap-
proaches have been proposed to resolve it, such as fuzzing [52]
and representing a basic block using some features [18],
[19], [65]. However, none of existing approaches are able to
achieve both high efﬁciency and precision for this important
problem. Fuzzing takes much time to try different inputs,
while the feature-based representation is imprecise (A SVM
classiﬁer based on such features can only achieve AUC =
85% according to our evaluation). Given a pair of blocks of
different architectures, they, after being disassembled, are two
sequences of instructions in two different assembly languages.
In light of this insight, we propose to learn from the ideas
and techniques of Neural Machine Translation (NMT), a
new machine translation framework based on neural networks
proposed by NLP researchers that handles text across languages
very well [29], [57]. NMT frequently uses word embedding
and Long Short-Term Memory (LSTM), which are capable of
learning features of words and dependencies between words in a
sentence and encoding the sentence into a vector representation
that captures its semantic meaning [50], [48], [64]. In addition
to translating sentences, the NMT model has also been extended
to measure the similarity of sentences by comparing their vector
representations [48], [50].
We regard instructions as words and basic blocks as
sentences, and consider that the task of detecting whether
two basic blocks of different ISAs are semantically similar is
analogous to that of determining whether two sentences of
different human languages have similar meanings. Following
this idea and learning from NMT, we propose a novel neural
network-based cross-(assembly)-lingual basic-block embedding
model, which converts a basic block into an embedding, i.e.,
a high dimensional numerical vector. The embeddings not
only encode basic-block semantics, but also capture semantic
relationships across architectures, such that the similarity of
two basic blocks can be detected efﬁciently by measuring the
distance between their embeddings.
Recent work [18], [19], [65] uses several manually selected
features (such as the number of instructions and the number
of constants) of a basic block to represent it. This inevitably
causes signiﬁcant information loss in terms of the contained
instructions and the dependencies between these instructions. In
contrast to using manually selected features, our NMT-inspired
approach applies deep learning to automatically capturing
such information into a vector. Speciﬁcally, we propose to
employ LSTM to automatically encode a basic block into
an embedding that captures the semantic information of the
instruction sequence, just like LSTM is used in NMT to
capture the semantic information of sentences. This way, our
cross-(assembly)-lingual deep learning approach to Problem I
achieves both high efﬁciency and precision (AUC = 98%).
Gemini [65] also applies neural networks. There are two
main differences between Gemini and our work. First, as
described above, Gemini uses manually selected features to
represent a basic block. Second, Gemini handles the code
equivalence problem rather than the code containment problem.
Solution to Problem II. A special case of Problem II,
under the context of a single architecture, is well studied [31],
[28], [2], [55], [54], [21], [37], [58], [56], [60], [27]. No prior
solutions to Problem II under the cross-architecture context
exist. To resolve it, we decompose the control ﬂow graph (CFG)
of the code of interest into multiple paths, each of which can be
regarded as a sequence of basic blocks. Our idea is to leverage
our solution to Problem I (for efﬁcient and precise basic-block
comparison), when applying the Longest Common Subsequence
(LCS) algorithm to comparing the similarity of those paths
(i.e., basic-block sequences). From there, we can calculate the
similarity of two pieces of code quantitatively.
Note that we do not consider an arbitrary piece of code
(unless it is a basic block) as a sentence, because it should
not be simply treated as a straight-line sequence. For example,
when a function is invoked, its code is not executed sequentially;
instead, only a part of the code belonging to a particular path
gets executed. The paths of a function can be scrambled (by
compilers) without changing the semantics of the function.
We have implemented a prototype system INNEREYE
consisting of two sub-systems: INNEREYE-BB to resolving
Problem I and INNEREYE-CC to resolving Problem II. We
have evaluated INNEREYE-BB in terms of accuracy, efﬁciency
and scalability, and the evaluation results show that it outper-
forms existing approaches by large margins. Our case studies
applying INNEREYE-CC demonstrate that it can successfully
resolve cross-architecture code similarity comparison tasks and
is much more capable than recent work that is limited to
comparison of function pairs. The datasets, neural network
models, and evaluation results are publicly available.1
We summarize our contributions as follows:
• We propose to learn from the successful NMT ﬁeld
to solve the cross-architecture binary code similarity
comparison problem. We regard instructions as words
and basic blocks as sentences. Thus, the ideas and
methodologies for comparing the meanings of sen-
tences in different natural languages can be adapted
to cross-architecture code similarity comparison.
• We design a precise and efﬁcient cross-(assembly)-
lingual basic block embedding model. It utilizes word
embedding and LSTM, which are frequently used
in NMT, to automatically capture the semantics and
dependencies of instructions. This is in contrast to prior
work which largely ignores such information.
• We propose the ﬁrst solution to the cross-architecture
code containment problem. It has many applications,
such as code plagiarism detection and virus detection.
• We implement a prototype INNEREYE and evaluate
its accuracy, efﬁciency, and scalability. We use real-
world software across architectures to demonstrate the
applications of INNEREYE.
is
This research successfully demonstrates that
promising to approach binary analysis from the angle
of language processing by adapting methodologies,
ideas and techniques in NLP.
•
it
1https://nmt4binaries.github.io
2
II. RELATED WORK
A. Traditional Code Similarity Comparison
Mono-architecture solutions. Static plagiarism detection or
clone detection includes string-based [2], [5], [16], token-
based [31], [55], [54], tree-based [28], [32], [53], and PDG
(program dependence graph)-based [20], [36], [13], [34]. Some
approaches are source code based, and are less applicable
in practice, especially concerning closed-source software; e.g.,
CCFINDER [31] ﬁnds equal sufﬁx chains of source code tokens.
TEDEM [53] introduces tree edit distances to measure code
similarity at the level of basic blocks, which is costly for
matching and does not handle all syntactical variation. Others
compare the semantics of binary code using symbolic execution
and theorem prover, such as BinHunt [21] and CoP [37], but
they are computation expensive and thus not applicable for
large codebases.
Second, dynamic birthmark based approaches include API
birthmark [58], [56], [7] system call birthmark [60], function
call birthmark [58], instruction birthmark [59], [51], and core-
value birthmark [27]. Tamada et al. propose an API birthmark
for Windows application [58]. Schuler et al. propose a dynamic
birthmark for Java [56]. Wang et al. introduce two system
call based birthmarks suitable for programs invoking sufﬁcient
system calls [60]. Jhi et al. propose a core-value based birthmark
for detecting plagiarism [27]. However, as they rely on dynamic
analysis, extending them to other architectures and adapting to
embedded devices would be hard and tedious. Code coverage
of dynamic analysis is another inherent challenge.
Cross-architecture solutions. Recently, researchers start to
address the problem of cross-architecture binary code similarity
detection. Multi-MH and Multi-k-MH [52] are the ﬁrst two
methods for comparing function code across different archi-
tectures. However, their fuzzing-based basic block similarity
comparison and graph (i.e., CFG) matching-based algorithm
are too expensive to handle a large number of function
pairs. discovRE [18] utilizes pre-ﬁltering to boost CFG based
matching process, but it is still expensive, and the pre-ﬁltering is
unreliable, outputting too many false negatives. Both Esh [14]
and its successor [15] deﬁne strands (data-ﬂow slices of basic
blocks) as the basic comparable unit. Esh uses SMT solver to
verify function similarity, which makes it unscalable. As an
improvement, the authors lift binaries to IR level and further
create function-centric signatures [15].
B. Machine Learning-based Code Similarity Comparison
Mono-architecture solutions. Recent research has demon-
strated the usefulness of applying machine learning and deep
learning techniques to code analysis [46], [39], [47], [26],
[63], [25], [49], [23], [39]. White et al. further propose
DeepRepair to detect the similarity between source code
fragments [63]. Mou et al. introduce a tree-based convolutional
neural network based on program abstract syntax trees to
detect similar source code snippets [47]. Huo et al. devise
NP-CNN [26] and LS-CNN [25] to identify buggy source
code ﬁles. Asm2Vec [17] produces a numeric vector for each
function based on the PV-DM model [33]. Similarity between
two functions can be measured with the distances between
the two corresponding representation vectors. αDiff [35]
characterizes a binary function using its code feature, invocation
feature and module interactions feature, where the ﬁrst category
of feature is learned from raw bytes with a DNN. However, this
work only focuses on similarity detection between cross-version
binaries. Zheng et al. [11] independently propose to use word
embedding to represent instructions, but their word-embedding
model does not address the issue of out-of-vocabulary (OOV)
instructions, while handling OOV words has been a critical
step in NLP and is resolved in our system (Section IV-C);
plus, their goal is to recover function signature from binaries
of the same architecture, which is different from our cross-
architecture code similarity comparison task. Nguyen et al.
develop API2VEC for the API elements in source code to
measure code similarity [49], which is not applicable if there
are insufﬁcient API calls.
Cross-architecture solutions. Genius [19] and Gemini [65]
are two prior state-of-the-art works on cross-architecture bug
search. They make use of conventional machine learning and
deep learning, respectively, to convert CFGs of functions into