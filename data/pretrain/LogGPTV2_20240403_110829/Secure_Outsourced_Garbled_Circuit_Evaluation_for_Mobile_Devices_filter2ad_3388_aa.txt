title:Secure Outsourced Garbled Circuit Evaluation for Mobile Devices
author:Henry Carter and
Benjamin Mood and
Patrick Traynor and
Kevin R. B. Butler
Secure Outsourced Garbled Circuit Evaluation 
for Mobile Devices
Henry Carter, Georgia Institute of Technology; Benjamin Mood, University of Oregon;  
Patrick Traynor, Georgia Institute of Technology; Kevin Butler, University of Oregon
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Secure Outsourced Garbled Circuit Evaluation for Mobile Devices
Henry Carter
Georgia Institute of Technology
PI:EMAIL
Patrick Traynor
Georgia Institute of Technology
PI:EMAIL
Benjamin Mood
University of Oregon
PI:EMAIL
Kevin Butler
University of Oregon
PI:EMAIL
Abstract
Garbled circuits provide a powerful tool for jointly
evaluating functions while preserving the privacy of each
user’s inputs. While recent research has made the use
of this primitive more practical, such solutions generally
assume that participants are symmetrically provisioned
with massive computing resources. In reality, most peo-
ple on the planet only have access to the comparatively
sparse computational resources associated with their mo-
bile phones, and those willing and able to pay for ac-
cess to public cloud computing infrastructure cannot be
assured that their data will remain unexposed. We ad-
dress this problem by creating a new SFE protocol that
allows mobile devices to securely outsource the major-
ity of computation required to evaluate a garbled circuit.
Our protocol, which builds on the most efﬁcient gar-
bled circuit evaluation techniques, includes a new out-
sourced oblivious transfer primitive that requires signiﬁ-
cantly less bandwidth and computation than standard OT
primitives and outsourced input validation techniques
that force the cloud to prove that it is executing all pro-
tocols correctly. After showing that our extensions are
secure in the malicious model, we conduct an extensive
performance evaluation for a number of standard SFE
test applications as well as a privacy-preserving naviga-
tion application designed speciﬁcally for the mobile use-
case. Our system reduces execution time by 98.92% and
bandwidth by 99.95% for the edit distance problem of
size 128 compared to non-outsourced evaluation. These
results show that even the least capable devices are ca-
pable of evaluating some of the largest garbled circuits
generated for any platform.
1
Introduction
Secure Function Evaluation (SFE) allows two parties to
compute the result of a function without either side hav-
ing to expose their potentially sensitive inputs to the
other. While considered a generally theoretical curios-
ity even after the discovery of Yao’s garbled circuit [43],
recent advances in this space have made such computa-
tion increasingly practical. Today, functions as complex
as AES-128 and approaching one billion gates in size are
possible at reasonable throughputs, even in the presence
of a malicious adversary.
While recent research has made the constructions in
this space appreciably more performant, the majority of
related work makes a crucial assumption - that both par-
ties are symmetrically provisioned with massive comput-
ing resources. For instance, Kreuter et al. [25] rely on the
Ranger cluster at the Texas Advanced Computing Center
to compute their results using 512 cores. In reality, the
extent of a user’s computing power may be their mobile
phone, which has many orders of magnitude less compu-
tational ability. Moreover, even with access to a public
compute cloud such as Amazon EC2 or Windows Azure,
the sensitive nature of the user’s data and the history of
data leakage from cloud services [40, 42] prevent the di-
rect porting of known SFE techniques.
In this paper, we develop mechanisms for the secure
outsourcing of SFE computation from constrained de-
vices to more capable infrastructure. Our protocol main-
tains the privacy of both participant’s inputs and outputs
while signiﬁcantly reducing the computation and net-
work overhead required by the mobile device for garbled
circuit evaluation. We develop a number of extensions
to allow the mobile device to check for malicious behav-
ior from the circuit generator or the cloud and a novel
Outsourced Oblivious Transfer for sending garbled input
data to the cloud. We then implement the new proto-
col on a commodity mobile device and reasonably provi-
sioned servers and demonstrate signiﬁcant performance
improvements over evaluating garbled circuits directly
on the mobile device.
We make the following contributions:
• Outsourced oblivious transfer & outsourced con-
sistency checks:
Instead of blindly trusting the
cloud with sensitive inputs, we develop a highly
USENIX Association  
22nd USENIX Security Symposium  289
1
efﬁcient Outsourced Oblivious Transfer primitive
that allows mobile devices to securely delegate the
majority of computation associated with oblivious
transfers. We also provide mechanisms to outsource
consistency checks to prevent a malicious circuit
generator from providing corrupt garbled values.
These checks are designed in such a way that the
computational load is almost exclusively on the
cloud, but cannot be forged by a malicious or “lazy”
cloud. We demonstrate that both of our additions
are secure in the malicious model as deﬁned by Ka-
mara et al. [21].
• Performance Analysis: Extending upon the imple-
mentation by Kreuter et al. [25], we conduct an ex-
tensive performance analysis against a number of
simple applications (e.g., edit distance) and crypto-
graphic benchmarks (e.g., AES-128). Our results
show that outsourcing SFE provides improvements
to both execution time and bandwidth overhead. For
the edit distance problem of size 128, we reduce ex-
ecution time by 98.92% and bandwidth by 99.95%
compared to direct execution without outsourcing
on the mobile device.
• Privacy Preserving Navigation App: To demon-
strate the practical need for our techniques, we de-
sign and implement an outsourced version of Dijk-
stra’s shortest path algorithm as part of a Naviga-
tion mobile app. Our app provides directions for
a Presidential motorcade without exposing its loca-
tion, destination, or known hazards that should be
avoided (but remain secret should the mobile device
be compromised). The optimized circuits generated
for this app represent the largest circuits evaluated
to date. Without our outsourcing techniques, such
an application is far too processor, memory and
bandwidth intensive for any mobile phone.
While this work is similar in function and provides
equivalent security guarantees to the Salus protocols re-
cently developed by Kamara et al. [21], our approach
is dramatically different. The Salus protocol frame-
work builds their scheme on a completely different as-
sumption, speciﬁcally, that they are outsourcing work
from low-computation devices with high communication
bandwidth. With provider-imposed bandwidth caps and
relatively slow and unreliable cellular data connections,
this is not a realistic assumption when developing solu-
tions in the mobile environment. Moreover, rather than
providing a proof-of-concept work demonstrating that
ofﬂoading computation is possible, this work seeks to
develop and thoroughly demonstrate the practical poten-
tial for evaluating large garbled circuits in a resource-
constrained mobile environment.
The remainder of this work is organized as follows:
Section 2 presents important related work and discusses
how this paper differs from Salus; Section 3 provides
cryptographic assumptions and deﬁnitions; Section 4 for-
mally describes our protocols; Section 5 provides secu-
rity discussion - we direct readers to our technical re-
port [6] for full security proofs; Section 6 shows the re-
sults of our extensive performance analysis; Section 7
presents our privacy preserving navigation application
for mobile phones; and Section 8 provides concluding
remarks.
2 Related Work
Beginning with Fairplay [32], several secure two-party
computation implementations and applications have
been developed using Yao garbled circuits [43] in the
semi-honest adversarial model [3, 15, 17, 19, 26, 28, 31,
38]. However, a malicious party using corrupted in-
puts or circuits can learn more information about the
other party’s inputs in these constructions [23]. To re-
solve these issues, new protocols have been developed to
achieve security in the malicious model, using cut-and-
choose constructions [30], input commitments [41], and
other various techniques [22,34]. To improve the perfor-
mance of these schemes in both the malicious and semi-
honest adversarial models, a number of circuit optimiza-
tion techniques have also been developed to reduce the
cost of generating and evaluating circuits [8, 11, 24, 35].
Kreuter et al. [25] combined several of these techniques
into a general garbled circuit protocol that is secure in
the malicious model and can efﬁciently evaluate circuits
on the order of billions of gates using parallelized server-
class machines. This SFE protocol is currently the most
efﬁcient implementation that is fully secure in the mali-
cious model. (The dual execution construction by Huang
et al. leaks one bit of input [16].)
Garbled circuit protocols rely on oblivious transfer
schemes to exchange certain private values. While sev-
eral OT schemes of various efﬁciencies have been de-
veloped [1, 30, 36, 39], Ishai et al. demonstrated that any
of these schemes can be extended to reduce kc oblivi-
ous transfers to k oblivious transfers for any given con-
stant c [18]. Using this extension, exchanging potentially
large inputs to garbled circuits became much less costly
in terms of cryptographic operations and network over-
head. Even with this drastic improvement in efﬁciency,
oblivious transfers still tend to be a costly step in evalu-
ating garbled circuits.
Currently, the performance of garbled circuit protocols
executed directly on mobile devices has been shown to
be feasible only for small circuits in the semi-honest ad-
versarial model [5, 13]. While outsourcing general com-
putation to the cloud has been widely considered for im-
proving the efﬁciency of applications running on mobile
devices, the concept has yet to be widely applied to cryp-
290  22nd USENIX Security Symposium 
USENIX Association
2
tographic constructions. Green et al. began exploring
this idea by outsourcing the costly decryption of ABE
ciphertexts to server-class machines while still maintain-
ing data privacy [12]. Considering the costs of exchang-
ing inputs and evaluating garbled circuits securely, an
outsourcing technique would be useful in allowing lim-
ited capability devices to execute SFE protocols. Naor
et al. [37] develop an oblivious transfer technique that
sends the chooser’s private selections to a third party,
termed a proxy. While this idea is applied to a limited
application in their work, it could be leveraged more gen-
erally into existing garbled circuit protocols. Our work
develops a novel extension to this technique to construct
a garbled circuit evaluation protocol that securely out-
sources computation to the cloud.
In work performed concurrently and independently
from our technique, Kamara et al. recently developed
two protocols for outsourcing secure multiparty compu-
tation to the cloud in their Salus system [21]. While their
work achieves similar functionality to ours, we distin-
guish our work in the following ways: ﬁrst, their protocol
is constructed with the assumption that they are outsourc-
ing work from devices with low-computation but high-
bandwidth capabilities. With cellular providers impos-
ing bandwidth caps on customers and cellular data net-
works providing highly limited data transmission speed,
we construct our protocol without this assumption using
completely different cryptographic constructions. Sec-
ond, their work focuses on demonstrating outsourced
SFE as a proof-of-concept. Our work offers a rigorous
performance analysis on mobile devices, and outlines a
practical application that allows a mobile device to par-
ticipate in the evaluation of garbled circuits that are or-
ders of magnitude larger than those evaluated in the Salus
system. Finally, their protocol that is secure in the ma-
licious model requires that all parties share a secret key,
which must be generated in a secure fashion before the
protocol can be executed. Our protocol does not require
any shared information prior to running the protocol, re-
ducing the overhead of performing a multiparty fair coin
tossing protocol a priori. While our work currently con-
siders only the two-party model, by not requiring a pre-
liminary multiparty fair coin toss, expanding our proto-
col to more parties will not incur the same expense as
scaling such a protocol to a large number of participants.
To properly compare security guarantees, we apply their
security deﬁnitions in our analysis.
3 Assumptions and Deﬁnitions
To construct a secure scheme for outsourcing garbled cir-
cuit evaluation, some new assumptions must be consid-
ered in addition to the standard security measures taken
in a two-party secure computation. In this section, we
discuss the intuition and practicality of assuming a non-
colluding cloud, and we outline our extensions on stan-
dard techniques for preventing malicious behavior when
evaluating garbled circuits. Finally, we conclude the sec-
tion with formal deﬁnitions of security.
3.1 Non-collusion with the cloud
Throughout our protocol, we assume that none of the
parties involved will ever collude with the cloud. This
requirement is based in theoretical bounds on the efﬁ-
ciency of garbled circuit evaluation and represents a re-
alistic adversarial model. The fact that theoretical limi-
tations exist when considering collusion in secure multi-
party computation has been known and studied for many
years [2, 7, 27], and other schemes considering secure
computation with multiple parties require similar restric-
tions on who and how many parties may collude while
preserving security [4, 9, 10, 20, 21]. Kamara et al. [21]
observe that if an outsourcing protocol is secure when
both the party generating the circuit and the cloud eval-
uating the circuit are malicious and colluding, this im-
plies a secure two-party scheme where one party has
sub-linear work with respect to the size of the circuit,
which is currently only possible with fully homomor-
phic encryption. However, making the assumption that
the cloud will not collude with the participating parties
makes outsourcing securely a theoretical possibility. In
reality, many cloud providers such as Amazon or Mi-
crosoft would not allow outside parties to control or af-
fect computation within their cloud system for reasons
of trust and to preserve a professional reputation.
In
spite of this assumption, we cannot assume the cloud
will always be semi-honest. For example, our protocol
requires a number of consistency checks to be performed
by the cloud that ensure the participants are not behaving
maliciously. Without mechanisms to force the cloud to
make these checks, a “lazy” cloud provider could save
resources by simply returning that all checks veriﬁed
without actually performing them. Thus, our adversar-
ial model encompasses a non-colluding but potentially
malicious cloud provider that is hosting the outsourced
computation.
3.2 Attacks in the malicious setting
When running garbled circuit based secure multiparty
computation in the malicious model, a number of well-
documented attacks exist. We address here how our sys-
tem counters each.
Malicious circuit generation: In the original Yao gar-
bled circuit construction, a malicious generator can gar-
ble a circuit to evaluate a function f (cid:31) that is not the func-
tion f agreed upon by both parties and could compromise
the security of the evaluator’s input. To counter this, we
USENIX Association  
22nd USENIX Security Symposium  291
3
employ an extension of the random seed technique devel-
oped by Goyal et al. [11] and implemented by Kreuter et
al. [25]. Essentially, the technique uses a cut-and-choose,
where the generator commits to a set of circuits that all
presumably compute the same function. The parties then
use a fair coin toss to select some of the circuits to be
evaluated and some that will be re-generated and hashed
by the cloud given the random seeds used to generate
them initially. The evaluating party then inspects the cir-
cuit commitments and compares them to the hash of the
regenerated circuits to verify that all the check circuits
were generated properly.
Selective failure attack: If, when the generator is send-
ing the evaluator’s garbled inputs during the oblivious
transfer, he lets the evaluator choose between a valid gar-
bled input bit and a corrupted garbled input, the evalua-
tor’s ability to complete the circuit evaluation will reveal
to the generator which input bit was used. To prevent this
attack, we use the input encoding technique from Lindell
and Pinkas [29], which lets the evaluator encode her in-
put in such a way that a selective failure of the circuit
reveals nothing about the actual input value. To prevent
the generator from swapping garbled wire values, we use
a commitment technique employed by Kreuter et al. [25].
Input consistency: Since multiple circuits are evaluated
to ensure that a majority of circuits are correct, it is pos-
sible for either party to input different inputs to differ-
ent evaluation circuits, which could reveal information
about the other party’s inputs. To keep the evaluator’s
inputs consistent, we again use the technique from Lin-
dell and Pinkas [29], which sends all garbled inputs for
every evaluation circuit in one oblivious transfer execu-
tion. To keep the generator’s inputs consistent, we use
the malleable claw-free collection construction of shelat
and Shen [41]. This technique is described in further de-
tail in Section 4.
Output consistency: When evaluating a two-output
function, we ensure that outputs of both parties are kept
private from the cloud using an extension of the tech-
nique developed by Kiraz [23]. The outputs of both par-
ties are XORed with random strings within the garbled
circuit, and the cloud uses a witness-indistinguishable
zero-knowledge proof as in the implementation by
Kreuter et al. [25]. This allows the cloud to choose a
majority output value without learning either party’s out-
put or undetectably tampering with the output. At the
same time, the witness-indistinguishable proofs prevent
either party from learning the index of the majority cir-
cuit. This prevents the generator from learning anything
by knowing which circuit evaluated to the majority out-
put value.
Bob
(generator)
Phase 1
Phase 2
Phase 3
Alice
(evaluator)
Phase 1
Phase 2
Phase 3