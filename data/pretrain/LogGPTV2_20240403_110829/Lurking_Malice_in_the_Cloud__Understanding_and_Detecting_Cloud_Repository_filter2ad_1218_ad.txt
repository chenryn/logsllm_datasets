their individual redirection graphs: that is, the number of the sites
utilizing these Bars. On average, each Bar shows up on 252 sites
and 12% of them are used by more than 200 websites. Table 5 lists
the 10 most popular Bars we found. Among them, eight, including
s3.amazonaws.com_content.sitezoogle.com, s3.amazonaws.com_
publisher_conﬁgurations.shareaholic, etc., host services for website
generation, blackhat SEO or Spam. Particularly, akamaihd.net_
cdncache3-a turns out to be a distributor of Adware, whose scripts
are loaded into the victim’s browser to redirect it to other sites for
downloading different Adware. Also, we found that another Bar
s3.amazonaws.com_ﬁles.enjin.com hosts exploits utilized by 1,020
bad sites. Finding Bars can help to effectively detect more sites with
malicious contents.
Another interesting observation is that malicious content is also
extensively shared across different Bars. To understand such content
reuse, we grouped the malicious programs retrieved from different
Bars based on the similarity of their code in terms of edit distance.
Speciﬁcally, we removed the spaces within the programs and ran
the Python library scipy.cluster.hierarchy.linkage [?] to hierarchi-
cally cluster them (now in the form of strings) according to their
Jaro scores [?]. In this way, we were able to discover three types
of content sharing: intra-bucket sharing, cross-bucket sharing, and
cross-platform sharing. Speciﬁcally, within the Amazon bucket
akamaihd.net_asrv-a, we found that many of its cloud URLs are
in the form of http://asrv-a.akamaihd.net/sd/[num]/[num].js. The
JavaScript code turns out to be all identical, except that each script
redirects the visitor to a different website. The similar code also
appears in another Amazon bucket akamaihd.net_cdncache-a. As
another example, we discovered the same malicious JavaScript
(JS.ExploitBlacole.zm) from the Bars on CloudFront and Qiniudn re-
spectively, even under the same path (i.e., media/system/js/modal.js).
Moreover, we found that attackers used sub-domain generation al-
gorithm to automatically generate sub-domain for Bars, then further
reused the same malicious contents for these Bars. Speciﬁcally, we
found that 28 content sharing Bars on Akamaihd have the same
format in their names. Attackers utilized a word bank based sub-
domain generation algorithms [?], which concatenates ﬁxed terms
and a series of domain names (remove dot), then truncates the string
if its length is over 13, e.g., apismarterpoweru-a (truncated from
smarterpowerunite.com). The common patterns of Bars indicate the
potential of developing an accurate detection procedure.
Correlation. We further studied the relationships between different
Bars, fetched by the same websites. From our dataset, 11,442
(3.5%) websites are found to access at least two Bars. Among
them, 8,283 were served as front-end websites, and 3,159 other
sites on redirection chains. Also, 60.9% of these sites link to the
repositories on the same cloud platforms and 39.1% use those on
different platforms.
In some cases, two buckets are often used
together. For example, we found that a click-hijacking program was
separated into the code part and the conﬁguration part: the former is
kept on CloudFront while the latter is on Akamaihd; the two buckets
always show up together on redirection chains. Such a separation
seems to be done deliberately, in an attempt to evade detection.
Also we saw that Bars carrying the same attack vectors are often
used together, which are apparently deliberately put there to serve
parties of the same interests: as another example, a compromised
website was observed to access four different Bars on different cloud
platforms, redirecting its visitors to different places for downloading
Adware to the visitor’s system. Our ﬁndings show that Bars are
widely deployed in attacks and serve in a complex infrastructure.
4.2 Bucket Pollution
Polluted repositories. To ﬁnd polluted buckets, we searched the
Alexa top 20K websites for the Bars in our dataset and 276 Bars were
found. When a legitimate site links to a Bar, the reason might be
either the website or the repository is hacked. Differentiating these
two situations with certainty is hard, and in some cases, it may not
be possible. All we could do is to get an idea about the prevalence of
such bucket pollution, based on the intuition that if a website is less
1548(a) Cumulative distribution of Alexa
global ranks per Bars’ front-end sites.
(b) Cumulative distribution of Alexa
bounce rate per Bar’s front-end sites.
(c) Cumulative distribution of trafﬁc in-
crease rate per Bar’s front-end sites.
Figure 8: Alexa global rank, bounce rate and trafﬁc increase rate of Bar’s front-end websites.
GET /?delimiter=/ HTTP/1.1
Host: (bucket-name).s3.amazonaws.com
Accept-Encoding: identity
content-length: 0
Authorization: AWS (access key):(secret key)
Figure 9: Constructed request header.
vulnerable, then it is less likely to be compromised. To this end, we
ran WhatWeb, a powerful web vulnerability scanner, on these sites
and found 134 Bar’s front-end websites contain various ﬂaws, such
as using CMS in vulnerable version (e.g. wordpress 3.9), vulnerable
plugins (e.g., JCE Extension 2.0.10) and vulnerable software (e.g.,
Apache 2.2). The remaining 142 Bar’s front-end websites look
pretty solid in web protection and therefore it is likely that the Bars
they include were polluted. This set of potentially compromised
buckets takes 19% of all the Bars ﬂagged by BarFinder. These
buckets, together with the additional 30 randomly sampled from the
set, went through a manual analysis, which shows that indeed they
were legitimate buckets contaminated with malicious content.
Misconﬁguration and impact. It is even more challenging to deter-
mine how these buckets were compromised, which could be caused
by exploiting either the cloud platform vulnerabilities or the bucket
misconﬁgurations. Without an extensive test on the cloud platform
and the repositories, which requires at least direct access to them, a
comprehensive study on the issue is impossible. Nevertheless, we
were able to identify a misconﬁguration problem widely existing in
popular buckets. This ﬂaw has never been reported before but was
likely known to the underground community and has already been
utilized to exploit these repositories. We reported the ﬂaws to the
vendors and they conﬁrmed our ﬁnding.
Speciﬁcally, on Amazon S3, one can conﬁgure the access policies
for her bucket to deﬁnes which AWS accounts or groups are granted
access and the type of access (i.e., list, upload/modify, delete and
download):
this can be done through specifying access control
list on the AWS Management Console. Once this happens, the
cloud veriﬁes the content of the authorization ﬁeld within
the client’s HTTP request header before the requested access is
allowed to go through. However, we found that by default, the
policy is not in place, and in this case, the cloud only checks whether
the authorization key (i.e., access key and secret key) belongs to
an S3 user, not the authorized party for this speciﬁc bucket: in
other words, anyone, as long as she is a legitimate user of the S3,
has the right to upload/modify, delete and list the resources in the
bucket and download the content. Note that this does not mean
that the bucket can be directly touched through the browser, since
it does not put anything into the authorization ﬁeld. However, the
adversary can easily build his own HTTP header, ﬁlling in his own
S3 key, as illustrated in Figure 9, to gain access to the misconﬁgured
repository. In our research, we veriﬁed that all such operations can
be performed on any repositories with the conﬁguration ﬂaw, which
suggests that site operators need to take more caution when setting
the conﬁguration rules.
To understand the impact of this problem, we developed a simple
web testing tool, which checked a bucket’s conﬁguration using our
own S3 key. By scanning all 6,885 repositories (including both
Bars and legitimate buckets), we discovered that 472 are vulnerable,
which were associated with 1,306 front-end websites. The Alexa
global ranks and the bounce rates of their front-end websites are
illustrated in Figure 8(a) and Figure 8(b). 63% of them have bounce
rates from 20% to 60%; 9 sites are ranked within Alexa top 5000
(e.g., groupon.com, space.com).
Focusing on the 104 bad buckets with the ﬂaws, we further manu-
ally sampled 50 and conﬁrmed that these buckets were indeed legiti-
mate, including high-proﬁle ones like s3.amazonaws.com_groupon.
Further, looking into the these buckets’ ﬁle uploading time (retrieved
from the buckets through the ﬂaw), we found that in some cases,
the attack has been there for six years. Particularly the Amazon
bucket s3.amazonaws.com_groupon, Groupon’s ofﬁcial bucket, was
apparently compromised ﬁve times between 2012 and 2015 (see
Section 4.4 for details), according to the changes to the bucket
we observed from the bucket historical dataset we collected from
archive.org. We also estimated the volume of trafﬁc to those Bar-
related sites using a PassiveDNS dataset [?], which contains DNS
lookups recorded by the Security Information Exchange. Figure 8(c)
illustrates the trafﬁc of the websites during the time period when
their buckets were compromised, which was increased signiﬁcantly
compared with what those sites received before their compromise,
indicating that they likely received a lot of visits. This provides
evidence that the impact of such compromised buckets is indeed
signiﬁcant.
4.3 Lifetime and Evasion
In the presence of the severe threat from Bars, we found that
cloud providers’ responses, however, are far from adequate. This is
highlighted by the relatively long lifetimes of malicious repositories
we observed.
Lifetime. To understand the duration of Bars’ impacts, we con-
tinuously crawled the front-end bad sites every ﬁve days to check
whether they were still using the same set of Bars, and also mali-
cious cloud URLs to ﬁnd out whether the repositories were still alive.
Figure 10(a) illustrates the distributions of such bad repositories’
life spans within those front-end sites and on cloud platforms. As
can be seen in the ﬁgure, on average, the references of these Bars on
the websites were removed much faster than their cloud URLs and
1549Table 6: Comparison of Bars’ lifetime under different evasion
techniques.
Evasion technique
# of Bars
Content separation
Content change
Redirect cloaking
Obfuscation
None
10
10
10
10
10
front-end
# of
sites
743
1045
1220
1032
984
Avg. life
span
25-30 days
> 30 days
10-15 days
10-15 days
5-10 days
to Bars within front-end websites were obfuscated in some cases,
apparently, for the purpose of protecting the repositories.
Further, our study shows that these techniques were also utilized
together to make identiﬁcation of Bars even harder. Speciﬁcally,
we manually choose 10 Bars with each evasion technique (40 in
total), combined with 10 Bars without evasion technique, and then
compare their life spans. It is clear that evasion techniques do allow
Bars to hide longer, as illustrated in Table 6.
4.4 Case Studies
In this section, we discuss two prominent examples.
PUP campaign. Our study reveals a malicious web campaign
dubbed Potentially Unwanted Programs (PUP) distribution: the
attack redirects the victim to an attack page, which shows her fake
system diagnosis results or patch requirements through the images
fetched from a Bar, in an attempt to cheat the victim into download-
ing “unwanted programs” such as Spyware, Adware or a virus. This
campaign was ﬁrst discovered in our dataset. Altogether, at least 11
Bars from 3 different cloud platforms and 772 websites (not hosted
on the cloud) were involved in.
Through analyzing the redirection traces of the campaign, we
found that two Akamai Bars, akamaid.net_cdncache3-a and akamaihd_
asrv-a, frequently inject scripts into compromised websites, which
serve as ﬁrst-hop redirectors to move a visitor down the redirection
chain before hitting malicious landing pages (that serve malicious
content). Interestingly, all the follow-up redirectors are compro-
mised or malicious websites that are not hosted on the cloud. The
scripts in the Bars were found to change over time, redirecting the
visitor to different next-hop sites (also redirectors). On average,
the life span of such sites is only 120 hours, but the Bar was still
alive when we submitted this paper. Such redirections end at at
least 216 malicious landing sites, which all retrieve deceptive im-
ages from an Amazon S3 bucket s3.amazonaws.com_cicloudfront
(a Bar never reported before and is still alive). An example is a
system update warning, as shown in Figure 1. From the reposi-
tory, we collected 134 images, including those for free software
installation, updates on all mainstream OSes, browsers and some
popular applications. If she clicks and downloads the program pro-
moted on the site, the code will be fetched from multiple Bars, such
as s3.amazonaws.com_wbt_media where the PUP puts a Bitcoin
miner on the victim’s system, and cloudfront.net_d12mrm7igk59vq,
whose program modiﬁes Chrome’s security setting.
Groupon Bar. We discovered that a misconﬁgured Amazon S3
bucket s3.amazonaws.com_groupon belongs to Groupon (Alexa
global rank 265), a global e-commerce marketplace serving 48.1
million customers worldwide. The bucket was used as the resource
repository for Groupon’s ofﬁcial website (i.e., groupon.com) as
well as its marketing sites (12 websites observed in our dataset).
When tracking its historical content from archive.org, we were sur-
prised to see that the Groupon S3 bucket has been compromised at
least eight times in the past ﬁve years (e.g., 2015/08/06, 2014/12/18,
(a) Distributions of Bars’ life
spans on front-end sites and
on cloud platforms.
(b) Percentage of Bars re-
moved within 5 days in top
5 cloud platforms with most
Bars.
Figure 10: Lifetime of Bars.
ultimately their accounts on the cloud platforms. Apparently, the
cloud providers are less aggressive, relative to the website owners,
in addressing Bar-related infections. In Figure 10(b), we further
compare Bars’ life spans on different platforms: interestingly, with
more bad buckets on its servers, Amazon AWS acted more promptly
than other clouds; Google, however, moved much slower: for exam-
ple, on Google Drive, a repository hosting malware-serving pages,
googledrive.com_0B8D1eUrPT_z3OVpBTVJ3LUg2UEk, stayed
there for over 150 days, longer than the average duration of other
exploit servers (non-cloud) reported by the prior work [?][?] (2.5
hours). The observation indicates that cloud providers have noticed
such problem, but a likely lack of effective methods to identify and
clean Bars.
Evasion. Such a long lifetime could be related to a spectrum of
evading techniques the adversary deploys to protect his cloud assets,
which are described as follows:
• Content separation. Apparently, the adversary tends to break
his attack assets into pieces and store them at different places. As
mentioned earlier, we found that malware’s code and conﬁguration
ﬁles were placed in different buckets. Also, we discovered in this
study that there are 32 Bars that host nothing but images used in
various attacks, Phishing and Fake AV campaigns in particular.
Since the images themselves do not contain any malicious code,
these repositories typically stay on the clouds for a long time, >30
days on average.
• Content change. Another interesting observation is that the mali-
cious content within Bars changes over time, in an attempt to avoid
being linked to blacklisted malicious websites. Speciﬁcally, looking
into the history of the content (from archive.org) retrieved from
the Bar through the same cloud URL, we found that part of the
content (e.g., the destination of a redirection) changes frequently,
moving quickly away from known malicious sites.
• Redirect cloaking. Like malicious or compromised websites, Bars
are also found to leverage cloaking techniques (rendering different
content based on the visitor’ cookie, IP, user agent, etc.) to avoid
detection. However, different from websites, cloud hosting services
typically do not support server-side scripting. As a result, Bars
have to run the cloaking code on the client (browser) side, which