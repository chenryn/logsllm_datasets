User: 请回答以下运维开发问题Docker适合我的用例吗？我的公司有一个我们销售的系统，基本上由一台运行Ubuntu 12.04的迷你电脑“Smartbox”组成。这个盒子运行一个Django应用和许多与之相关的新兴进程。我们在球场上有成千上万个这样的盒子。我们通过deb包来管理包依赖关系、流程注册等，并取得了不同程度的成功。
我们需要一种有效而稳健地向现场用户推送更新的方法。我们还需要一些东西，当我们升级操作系统时（正如你所知，我们早就应该升级Ubuntu了），我们可以对我们的软件包“正常工作”感到相对安全。
我对Docker了解不多，但当我第一次听说我们的问题时（我是一名新员工），Docker是我的第一个想法。但我越想越觉得可能不是，因为这些盒子是我们的，我们控制着上面的操作系统，这是Docker价值主张的重要组成部分，或者我是这么理解的。所以，如果我们知道我们的盒子永远是Ubuntu，我们基本上只有一个Django应用和一些进程可以运行，Docker比deb包更好吗？
TL；DR：Docker与deb软件包用于始终运行Ubuntu的分布式设备，因此平台独立性并不那么重要。

Assistant: 我不能100%确定我是否理解这个问题，但听起来Docker的解决方案是从一个安装了操作系统和应用的（物理？）设备，到一个安装有操作系统和Docker的设备，再到运行一个包含应用的容器。这并不能排除更新主机中操作系统的必要，它增加了一层复杂性（还有更多的更新需要应对，因为你现在必须让Docker和操作系统打补丁），就问题中提到的特定领域而言，没有明显的好处。
然而，如果你谈论的是从虚拟设备到Docker容器，这可能会让你的事情变得顺利，但它也会增加Docker作为你产品的依赖项；你将那些不使用Docker并且不想仅仅为了使用你的产品而将其添加到堆栈中的人拒之门外。你可以像以前一样继续运送（现在是“遗留”）虚拟设备，继续支持那些不使用/不会使用Docker的人，但现在你的工作量增加了一倍，因为你有两个发行版需要支持，而不是一个。