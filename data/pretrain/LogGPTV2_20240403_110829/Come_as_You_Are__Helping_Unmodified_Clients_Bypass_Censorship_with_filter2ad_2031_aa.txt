title:Come as You Are: Helping Unmodified Clients Bypass Censorship with
Server-side Evasion
author:Kevin Bock and
George Hughey and
Louis-Henri Merino and
Tania Arya and
Daniel Liscinsky and
Regina Pogosian and
Dave Levin
Come as You Are: Helping Unmodified Clients
Bypass Censorship with Server-side Evasion
Kevin Bock George Hughey
Louis-Henri Merino
Tania Arya Daniel Liscinsky
Regina Pogosian Dave Levin
University of Maryland
ABSTRACT
Decades of work on censorship evasion have resulted in myriad
ways to empower clients with the ability to access censored con-
tent, but to our knowledge all of them have required some de-
gree of client-side participation. Having to download and run anti-
censorship software can put users at risk, and does not help the
many users who do not even realize they are being censored in the
first place.
In this paper, we present the first purely server-side censorship
evasion strategies—11 in total. We extend a recent tool, Geneva, to
automate the discovery and implementation of server-side strate-
gies, and we apply it to four countries (China, India, Iran, and Kaza-
khstan) and five protocols (DNS-over-TCP, FTP, HTTP, HTTPS,
and SMTP). We also perform follow-on experiments to understand
why the strategies Geneva finds work, and to glean new insights
into how censors operate. Among these, we find that China runs a
completely separate network stack (each with its own unique bugs)
for each application-layer protocol that it censors.
The server-side techniques we find are easier and safer to deploy
than client-side strategies. Our code and data are publicly available.
CCS CONCEPTS
• Social and professional topics → Technology and censor-
ship; • General and reference → Measurement;
KEYWORDS
Censorship; Geneva; Server-side
ACM Reference Format:
Kevin Bock, George Hughey, Louis-Henri Merino, Tania Arya, Daniel Liscin-
sky, Regina Pogosian, and Dave Levin. 2020. Come as You Are: Helping Un-
modified Clients Bypass Censorship with Server-side Evasion. In Annual con-
ference of the ACM Special Interest Group on Data Communication on the appli-
cations, technologies, architectures, and protocols for computer communication
(SIGCOMM ’20), August 10–14, 2020, Virtual Event, USA. ACM, New York,
NY, USA, 13 pages. https://doi.org/10.1145/3387514.3405889
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
ACM ISBN 978-1-4503-7955-7/20/08...$15.00
https://doi.org/10.1145/3387514.3405889
586
1 INTRODUCTION
For a client inside of a censoring regime to access censored con-
tent, it seems quite natural that the client would have to deploy
something. Indeed, to the best of our knowledge, all prior work in
censorship evasion has required some degree of deployment at the
clients within the censoring regime. Proxies [12, 15], decoy rout-
ing [40, 41], VPNs, anonymous communication protocols [13], do-
main fronting [16], protocol obfuscation [24, 25, 37], and recent ad-
vances that confuse censors by manipulating packets [9, 21, 23, 36]—
all of these prior solutions require various degrees of active partici-
pation on behalf of clients.
Unfortunately, active participation on the part of clients can
limit the reach of censorship evasion techniques. In some scenarios,
installing anti-censorship software can put users at risk [30]. For
users who are willing to take on this risk, it can be difficult to boot-
strap censorship evasion, as the anti-censorship tools themselves
may be censored [4, 39]. Worse yet, there are many users who do
not seek out tools to evade censorship because they do not even
know they are being censored [44].
Ideally, servers located outside of a censoring regime would be
able to help clients evade censorship without the client having to
install any extra software whatsoever. If possible, this could result
in a more open Internet for users who are otherwise unable (or
unfamiliar with how) to access censored content.
To our knowledge, there has been no prior work that has ex-
plored evasion techniques that involve no client-side participation
whatsoever. This is not for lack of want; rather, at first glance, it
would appear that server-side-only techniques could not possibly
provide a sufficient solution. To see why, let us consider all of the
packets that are transmitted that lead up to an HTTP connection be-
ing censored due to the client issuing a GET request for a censored
keyword. First, the client would initiate a TCP three-way hand-
shake, during which the client sends a SYN, the server responds
with a SYN+ACK, and the client responds with an ACK. Then, the
client would send a PSH+ACK packet containing the HTTP request
with the censored keyword, at which point the censor would tear
down the connection (e.g., by injecting RST packets to both the
client and the server). Note that the only packet a server sends before
a typical censorship event is just a SYN+ACK—this would seem to
leave very little room for a censorship evasion strategy.
In this paper, we present the first purely server-side censorship
evasion strategies—11 in total, spanning four countries (China,
India, Iran, and Kazakhstan). Like a recent string of papers [9, 21,
23, 36], these strategies do not involve a custom protocol, but rather
operate by manipulating packets of existing applications, e.g., by
inserting, duplicating, tampering, or dropping packets. We verify
that each of these strategies (sometimes with small tweaks) work
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Bock et al.
with completely unmodified clients running any major operating
system.
To find these strategies, we make use of an existing tool, called
Geneva [9], which has been shown to be able to automate the dis-
covery of client-side strategies. While this required several modest
extensions to the tool, we do not claim them as a primary con-
tribution of this paper. Rather, our primary contributions are the
discovery that server-side strategies are possible at all, and the
various insights we have gained from follow-up experiments that
explain why the strategies Geneva found work. Though the specific
circumvention strategies may be patchable, the underlying insights
they allowed us to glean are, we believe, more fundamental. These
findings include:
• Server-side-only circumvention strategies are possible! We suc-
ceeded in finding them in every country we tested (China, India,
Iran, and Kazakhstan) and for all of the protocols we were able
to trigger censorship with (DNS-over-TCP, FTP, HTTP, HTTPS,
and SMTP).
• The so-called Great Firewall (GFW) of China has a more nuanced
“resynchronization state” than previously reported [9, 36].
• China uses different network stacks for each of the protocols that
it censors; circumvention strategies that work for one application-
layer protocol (e.g., HTTPS) do not necessarily work for another
(e.g., HTTP or SMTP).
The rest of this paper is organized as follows. §2 reviews nation-
state censorship and prior work. §3 empirically shows that, unfor-
tunately, client-side techniques do not generalize to server-side. §4
presents our experiment methodology. We present 11 new server-
side evasion strategies in §5, and through further examination, shed
new light on the inner workings of censorship in China, India, Iran,
and Kazakhstan. §6 explores our theory that censors employ differ-
ent network stacks for each censored application. §7 shows that our
server-side strategies work for a wide diversity of client OSes. We
discuss deployment considerations in §8 and ethical considerations
in §9. Finally, §10 concludes.
2 BACKGROUND AND RELATED WORK
Here, we review nation-state network censors, and we provide an
overview of prior work on evading such censors.
2.1 Nation-state Censors
We focus on nation-state-level censors. These are very powerful
entities who are able to inspect [21], inject [5], and sometimes also
drop [31] traffic throughout their countries. Nation-state censors
operate in two broad ways: on-path (man-on-the-side) or in-path
(man-in-the-middle) [9, 36]. Our experiments span both kinds; we
describe them here.
On-path Censors On-path (man-on-the-side) censors can obtain
copies of packets, allowing them to overhear all communication
on a connection. To determine whether or not to censor, these
attackers perform deep-packet inspection (DPI) and typically look
for keywords they wish to censor, such as DNS queries [5, 6, 43] or
resources in HTTP GETs [11, 23, 36].
On-path censors are also able to inject packets to both ends of
the connection. Because they are able to view all traffic on the
connection, they can trivially inject packets that the end-hosts
will accept—unlike traditional off-path attackers who must guess
sequence numbers, query IDs, or port numbers [10, 20]. On-path
censors have been observed to inject TCP RSTs to tear down con-
nections [3, 9, 11, 21, 23, 36, 38] and DNS lemon responses to thwart
address lookup [5, 6].
To reconstruct application-layer messages and track sequence
numbers, on-path censors maintain a Transmission Control Block
(TCB) for each flow. A TCB comprises sequence numbers, received
packets, and other information about the connection. A consid-
erable amount of work has gone into modeling and understand-
ing how censors synchronize and re-synchronize their TCB state
with the ongoing connection’s [23, 36]. Prior work has found, for
instance, that the presence of a SYN+ACK packet with an incor-
rect acknowledgement number will cause the GFW to enter a “re-
synchronization state,” after which it will update its TCB using
the next SYN+ACK packet from the server or the next data packet
from the client [36]. Prior work tacitly assumed that censors enter
these re-synchronization states in the same way regardless of the
application-layer protocol being censored; we show in §5 that this
is not the case.
Maintaining a TCB on a per-flow basis is challenging at scale, and
thus on-path censors naturally take several shortcuts. For example,
prior work has found that when on-path censors believe that a TCP
connection has been terminated (e.g., if one of the endpoints sent
a valid RST packet), then they delete the corresponding TCB and
ignore subsequent packets on that connection [9, 11, 23, 36]. Such
shortcuts make censors more scalable, but also more susceptible to
evasion.
In-path Censors In-path (man-in-the-middle) censors also per-
form DPI to determine whether to block a connection, but they
can do more than just inject a RST or lemon response. For example,
an in-path censor is able to simply drop a connection’s packets
altogether. Alternatively (as we will see in Kazakhstan), an in-path
censor can also hijack a connection entirely, inject a block-page,
and prevent the client’s packets from reaching the server. Evad-
ing an in-path censor requires tricking the censor into believing
that a connection should not be censored, for instance by hiding
the true identity of the server [13, 40, 41], obfuscating the proto-
col [18, 25, 37], or modifying the packets in such a way that the
censor no longer recognizes the forbidden query as a target.
Measuring Censors There has been a wide range of work mea-
suring how censors work. This can be broadly broken down into
two broad categories:
First are studies into what specific content or destinations cen-
sors block [27, 28, 31, 34]. Our work is largely orthogonal to these
prior efforts; our primary goal is not to discover who or what is
being censored, but to understand how it is being censored (and
evade it).
Second is the body of work that studies how censors operate [5,
7, 14, 19, 26, 42, 43]. Our work is complementary to these prior
efforts, in that we are able to lend new insights into how several
censors perform on-path censorship, as well as gaps in their logic
and bugs in their implementations. For instance, we believe we
are the first to observe that censors use different transport-layer
techniques depending on the overlying application.
587
Come as You Are: Helping Unmodified Clients
Bypass Censorship with Server-side Evasion
2.2 Evasion via Packet Manipulation
There is a long history of evading on-path and in-path censorship
through the application of packet-manipulation strategies. At a high
level, these techniques alter and inject packets at one of the com-
municating endpoints (typically the client). In so doing, their goal
is to either de-synchronize the censor’s state (e.g., by injecting TTL-
limited RSTs [29]) or to confuse the censor into not recognizing a
censored keyword (e.g., by segmenting TCP packets).
Client-side evasion The earliest packet-manipulation strategies
to evade on-path censors come from an open-source project from
2011, sniffjoke [3]. sniffjoke introduced a handful of client-side
strategies, such as injecting packets with random sequence numbers
or injecting packets that shift the sequence number but corrupt the
payload. Unfortunately, many of the specific strategies sniffjoke
employed have long been defunct, but its broad approaches were
later re-discovered by other work [23, 36].
Recently, there have been four key efforts towards evading
on-path censors. Khattak et al. [21], lib·erate [23], INTANG [36],
and Geneva [9] introduced myriad client-side packet-manipulation
strategies. Each of these focused primarily on strategies that ma-
nipulated IPv4 and TCP packets, along with a handful of strategies
that manipulated HTTP.
Our work is complementary to these prior efforts. Whereas prior
published work focused strictly on client-side strategies, we explore
server-side. Also, prior work focused almost exclusively on HTTP;
we explore strategies for more protocols, and show that many
strategies that work for one protocol do not work for another. Our
results from investigating multiple protocols lead us to refine prior
work’s findings. For instance, Wang et al. [36] showed that the
GFW was capable of reassembling TCP streams to detect censored
keywords in HTTP requests; our result confirms this for HTTP, but
show that the GFW is frequently incapable of doing so over FTP,
indicating that censors use different transport-layer techniques
depending on the application.
Server-side evasion To the best of our knowledge, all prior cen-
sorship evasion systems require some degree of client-side evasion
software. Even techniques that rely on server-side features, such
as domain fronting [16] or decoy routing [41], require client-side
changes. However, there are two server-side strategies that are
similar in spirit. In 2010, Beardsley and Qian [8] demonstrated that
a variant of TCP simultaneous open was able to bypass some intru-
sion detection systems; these do not appear to work against censors,
but we show in §5 that Geneva discovered multiple simultaneous
open-based strategies that work against China’s GFW. brdgrd [38]
intercepted packets sent by a Tor bridge to the Tor client, and em-
ployed a relatively simple strategy—it lowered the TCP window
size of outbound SYN+ACK packets. This caused Tor clients to seg-
ment their TLS handshake packets, splitting the set of supported
ciphersuites across multiple TCP packets. At that time, the GFW
was unable to reassemble TCP segments, and thus this strategy
avoided detection and blocking. In 2013, the GFW added the ability
to reassemble TCP segments, rendering brdgrd defunct. Since then,
we are aware of no other work on this topic: all prior literature in
this space has explored only client-side strategies [9, 21, 23, 36].
Geneva Geneva employs a genetic algorithm to automatically
discover packet-manipulation strategies to circumvent censorship.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Like with all genetic algorithms, Geneva composes basic “genetic
building blocks” to form more sophisticated actions. In particular, it
composes five packet-manipulation building blocks: (1) duplicate
(which duplicates a given packet), (2) fragment (which fragments
a packet at the IP- or TCP-layer), (3) tamper (which modifies fields
in a packet header), (4) drop (which discards a packet), and (5) send
(which sends the packet). For completeness, we include in the Ap-
pendix a short guide to Geneva’s syntax; for more details, see [9].
Bock et al. showed that Geneva’s simple primitives can be com-