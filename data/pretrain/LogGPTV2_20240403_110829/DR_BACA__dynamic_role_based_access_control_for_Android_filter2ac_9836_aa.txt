title:DR BACA: dynamic role based access control for Android
author:Felix Rohrer and
Yuting Zhang and
Lou Chitkushev and
Tanya Zlateva
DR BACA: Dynamic Role Based Access Control
for Android
Felix Rohrer, Yuting Zhang, Lou Chitkushev, and Tanya Zlateva
{felixro, danazh, ltc, zlateva}@bu.edu
Metropolitan College, Boston University
ABSTRACT
Android as an open platform dominates the booming mobile
market. However its permission mechanism is inﬂexible and
often results in over-privileged applications. This in turn
creates severe security issues. Aiming to support the Princi-
ple of Least Privilege, we propose and implement a Dynamic
Role Based Access Control for Android (DR BACA) model
to enhance Android security, particularly in corporate en-
vironment. Our system oﬀers multi-user management on
Android mobile devices comparable to traditional worksta-
tions, and provides ﬁne-grained Role Based Access Control
(RBAC) to enhance Android security at both the application
and permission level. Moreover, by leveraging context-aware
capabilities of mobile devices and Near Field communication
(NFC) technology, our solution supports dynamic RBAC to
provide more ﬂexible access control while still being able
to mitigate some of the most serious security risks on mo-
bile devices. The DR BACA system can easily be managed,
even in large business environments with many mobile de-
vices. We show that our DR BACA system can be deployed
and used with ease. With a proper security policy, our eval-
uation shows that DR BACA can eﬀectively mitigate the
security risks posed by both malicious and vulnerable non-
malicious applications while incurring only a small overall
system overhead.
Categories and Subject Descriptors
D46 [Security and Protection]: Access controls
General Terms
Security
Keywords
Android, security, role based access control
Permission to make digital or hard copies of all or part of this work for per-
sonal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than the author(s) must be honored. Abstract-
ing with credit is permitted. To copy otherwise, or republish, to post on
servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from Permissions@acm.org.
ACSAC 2013 Annual Computer Security Applications Conference, New
Orleans, Louisiana, USA
Copyright is held by the owner/author(s). Publication rights licensed to
ACM. ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2523649.2523676.
1.
INTRODUCTION
As a new emerging platform, the mobile device is becom-
ing pervasive and has changed the traditional IT environ-
ment in enterprises in the last couple of years. With BYOD
(bring your own device) becoming more popular, mobile de-
vices are widely deployed in corporations. Smartphones with
the open platform Android operating system are especially
skyrocketing in numbers. A report published by Gartner
[10] states that not only did Smartphone sales increase by
47% compared to 2011, but that Android based smartphones
now make up 72.4 % of the entire mobile device sales in
2012. Meanwhile, the malware community has also been
paying more attention and devised many attacks to gener-
ate revenue from smartphones and putting end-users and
businesses at risk. According to a report by McAfee [15],
mobile malware increased by 700% with almost 85% attacks
targeting Android smartphones since 2011.
While the popularity and openness of the Android plat-
form contributes to this tremendous malware increase, the
way Android handles security is yet another reason for this
malware increase. In particular, Android’s permission model
has been addressed by various research groups such as [2]
and [7]. While the Android permission model’s intention
is to provide better security when accessing sensitive re-
sources (GPS, WiFi) and functions (sending an SMS), its
”install-time all or nothing” mechanism leaves many appli-
cations vulnerable and over-privileged for most of their run-
ning time. Also, many developers handle these permissions
with little care thereby leaving applications even more vul-
nerable. Malicious applications can directly use dangerous
permissions, such as sending an SMS to a premium number,
or launch a permission re-delegation attack by cheating an-
other application into performing this job. Over-privileged
applications can therefore inadvertently be used to execute
malicious code. Therefore, we argue a fundamental problem
of Android’s installation-time permission model is that it
does not conform to the Principle of Least Privilege (PLP).
Role Based Access Control (RBAC) is a widely used ap-
proach in enterprises to support PLP by restricting resource
access to authorized users based on their roles. It has been
implemented in many database systems, security manage-
ment systems and network operating systems. However,
how this approach can be applied to mobile systems such
as Android devices is still an open issue. Actually We pro-
pose and implement a Dynamic Role Based Access Control
for Android (DR BACA) model to extend the current An-
droid permission model. Though DR BACA is not the ﬁrst
solution to apply RBAC on Android, it is done in a novel
299
and better way that enhances the Android system with the
following capabilities:
• Enable multi-user functionality. DR BACA of-
fers multi-user management on Android mobile sys-
tems comparable to traditional workstations. It allows
a single Android device to be used by diﬀerent users
without interference. At the same time, a single user
can use diﬀerent devices seamlessly. This enables uni-
form access control for all users on any mobile devices
based on an organization level security policy.
• Provide static RBAC at both the application
and permission level. DR BACA provides ﬁne-
grained access control at both the application and per-
mission level for any user thereby enhancing Android
security. Aiming to support PLP, DR BACA helps
mitigate the risk of malicious applications executing
sensitive functions in the background and reduces the
risk of permission re-delegation attacks.
• Oﬀer dynamic RBAC with more ﬂexibility. In
addition, DR BACA oﬀers more ﬂexible ﬁne-grained
access control by taking advantage of the unique context-
aware capabilities of mobile devices, as well as embrac-
ing the Near Field Communication (NFC) technology
available to Android.
• Simple management. DR BACA provides easy con-
ﬁguration and management options, particularly for
large corporate environments with many mobile de-
vices, by distributing a uniform security policy to all
involved devices.
Section 2 discusses Android security is-
Paper Outline:
sues in more detail.
In Section 3, we introduce the DR
BACA model followed by the DR BACA system implemen-
tation in Section 4. Section 6 illustrates the usefulness of DR
BACA using a hospital scenario and Section 7 evaluates our
proposed solution through various experiments. We com-
pare related work with our own solution in Section 8, and
ﬁnally conclude and refer to future work in Section 9.
2. ANDROID SECURITY ISSUES
Android was designed with security in mind as each appli-
cation has its own user id and runs in its own instance of the
Dalvik virtual machine, essentially creating a sandbox envi-
ronment. Applications are only able to communicate with
each other through controlled interprocess communication
channels provided by Android. In addition, Android’s per-
mission model is used to protect sensitive resources and func-
tions. During an application installation process, Android
asks the user to accept all requested permissions. The user
can either accept all requested permissions or cancel the in-
stallation. Once the application is installed, the granted per-
missions cannot be changed or restricted any more. Though
very convenient for developers and users, this mechanism re-
sults in over privileged applications, because these permis-
sions can be exposed to other (maybe malicious) applica-
tions as long as that application is installed. The following
paragraphs explain two possible attacks that are possible
because of such over privileged applications.
Granted permission to malicious application: Of-
ten, malicious applications trick users into accepting dan-
gerous permissions. Many malicious applications request
the SEND SMS permission in order to send SMS to pre-
mium numbers. The INTERNET permission is also often
requested in order for the malware creator to collect sensi-
tive information such as contacts, phone numbers, etc.
A mali-
Permission Re-Delegation(PRD) Attack:
cious application that performs a PRD attack delegates a
request for a permission to another application. This attack
is more involved and therefore harder to ﬁnd in the wild.
However, if this attack is successfully executed, it results
in very stealthy malware because the malicious application
itself does not contain any dangerous permissions.
For example, a malicious application A did not request any
permission at install-time. Therefore, a direct request to
send an SMS will result in a rejection. However, A can send
an intent to application B which has SEND SMS permission
and happens to listen for these kind of intents. B does
not appropriately check the permissions of A, accepting any
intent it receives. This is the actual vulnerability which A
exploits. Since B is allowed to send SMS, the SMS will be
successfully sent. Depending on how the intent was initially
requested, B will notify A that the request has been fulﬁlled.
3. DR BACA MODEL
A natural way of mitigating over-privileged applications
(or users) is to make use of an access control model which
adheres to the Principle of Least Privilege, as discussed in
[28], [23] and [5]. One very popular model that achieves this
is the Role-Based Access Control (RBAC) model as noted by
the work of [9] and [27]. We propose a Dynamic Role Based
Access Control for Android (DR BACA) model to enhance
Android security, with a particular focus on environments
with a large number of mobile devices.
Figure 1: DR BACA overview
Figure 1 shows the basic elements of the DR BACA model
and how they are associated with each other. DR BACA
enables multiple users to share mobile devices, with users
assigned to a set of roles as in the traditional RBAC model.
These roles are then associated with privileges deﬁned by a
set of rules in DR BACA. All are many-to-many associa-
tions. By associating rules with both applications and An-
droid permissions, we extend Android’s permission model
with a static RBAC model to provide ﬁne-grained access
control.
In addition, dynamic RBAC is provided through
context-aware rules and sharable rules.
Multi-User Enabled: One may argue that current mo-
300
bile devices are mostly designed as single user devices and
there is no need for multi-user capable devices. However,
as the computer power of mobile devices improves and their
business uses widen, we expect that it is only a matter of
time until smartphones are expected to oﬀer user manage-
ment comparable to computer desktops. Actually, Android
version 4.2 oﬀers a feature to manage diﬀerent users on the
same device [11]. We believe that user management on mo-
bile devices can be particularly useful in a corporate environ-
ment. For example, a hospital may provide smartphones or
tablets to its employees to support their daily interactions.
A single device may be used by diﬀerent people on duty at
various time periods. In addition, a user may want to be
able to use diﬀerent devices. Our here proposed DR BACA
model can be used to implement an organization level secu-
rity policy in order to provide uniform access control for all
users on any mobile devices.
Static Role Based Access Control: As in a traditional
RBAC system, users are assigned with roles, where role hi-
erarchy can be applied in DR BACA. Moreover, instead of
associating roles to permissions directly, DR BACA intro-
duces an additional layer, which we call rules. A rule is
deﬁned as a 6-tuple (ruleLabel, allowed, shareable, P, A, C)
as explained in Table 1:
ruleLabel
Unique name of this rule.
allowed
shareable
P
A
C
A flag to indicate if it is a granting (T) or denying (F) rule
A flag to indicate if the rule is shareable (T or F)
The Permission set {p1, p2 , ..., pn} assigned to this rule
The Application set {a1, a2, ..., an} assigned to this rule
Context set {c1, c2, ..., cn} assigned to this rule
Table 1: DR BACA rule syntax
Rules allow DR BACA to deﬁne both static and dynamic ac-
cess control. By associating rules with both applications and
permissions, DR BACA provides both levels of access con-
trol. An application is simply an object that uniquely iden-
tiﬁes a given Android application. The permissions are ob-
jects that uniquely identify each Android permission, both
documented and undocumented ones. At the application
level, DR BACA can allow or reject the execution of ap-
plications. At the permission level, it can allow or reject
permission requests.
The allowed ﬂag can either be true or false and deter-
mines, if the rule is a granting or a denying rule: a granting
rule permits a execution or permission request while a deny-
ing rule forbids the request. Depending on what applications
and permissions are deﬁned in a rule, the allowed ﬂag can be
automatically applied at either the application or the per-
mission level. Therefore, only one allowed ﬂag is needed for
both levels of control. To clarify this, Table 2 below shows
all possible combinations of permissions and applications in
a given rule (P = permission set, A = application set). The
shareable ﬂag will be described later as part of dynamic role
based access control.
When combined with the existing Android permission model,
DR BACA can deﬁne the currently available permission set
of each application for every user through this static RBAC
as shown in the following equation. Pi deﬁnes the permis-
sion set granted during installation time for application ai,
P deny
is the permission set speciﬁed in all relevant denying
i
rules. A relevant rule is any rule that is associated with
the current user (via his/her roles), and applicable to the
∅P ∧ ∅A
∅P ∧ ∃A
∃P ∧ ∅A
∃P ∧ ∃A
A rule without permissions or applications does not define any-
thing and is therefore superfluous
The allowed flag is applied at the application level to al-
low/deny the execution of application(s) in A
The allowed flag is applied at the permission level to al-
low/deny permission(s) in P for any applications on the device
The allowed flag is applied at the permission level to al-
low/deny the permission(s) in P for application(s) in A
Table 2: Permission and application combinations in a rule
application ai. P allow
relevant granting rules.
i
is the permission set speciﬁed in all
i = (Pi ∩ P allow
P cur
i
) ∪ (Pi − P deny
i
)
(1)
Any permission request that is both part of the original per-
mission set Pi and the related granting rules P allow
will be
accepted.
It is important to note that granting rules su-
persede denying rules if two rules are in conﬂict with each
other. The same concept can be applied at the application
level. If there is any relevant granting rule, or if there is no
relevant denying rule, the application is allowed to execute.
i
Dynamic Role Based Access Control: One drawback