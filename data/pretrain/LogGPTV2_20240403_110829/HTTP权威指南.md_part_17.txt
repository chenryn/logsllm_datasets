### 4.2 对TCP性能的考虑

HTTP位于TCP之上，因此HTTP事务的性能很大程度上取决于底层TCP通道的性能。本节将重点介绍对TCP连接性能的一些关键考虑因素。理解TCP的基本性能特性有助于更好地优化HTTP连接，从而设计出更高性能的HTTP应用程序。

**先决条件：** 本节要求读者对TCP协议有一定的了解。如果对TCP性能细节不感兴趣或已熟悉这些内容，可以直接跳至4.3节。TCP是一个复杂的话题，因此这里仅提供一个简要概述。更多详细信息，请参见本章末尾4.8节推荐的TCP参考书。

#### 4.2.1 HTTP事务的时延

我们首先回顾一下在HTTP请求过程中可能出现的网络时延，并以此开始我们的TCP性能讨论。图4-7展示了HTTP事务的主要连接、传输和处理时延。

![图4-7 串行HTTP事务的时间线](http://example.com/image4-7.png)

注意，与建立TCP连接以及传输请求和响应报文所需的时间相比，事务处理时间可能较短。除非客户端或服务器过载，或者正在处理复杂的动态资源，否则HTTP时延主要由TCP网络时延构成。

HTTP事务时延的主要原因如下：

1. **DNS查询**：客户端需要根据URI确定Web服务器的IP地址和端口号。如果最近没有访问过该主机名，通过DNS解析系统将其转换为IP地址可能需要数十秒。
2. **TCP连接建立**：客户端向服务器发送TCP连接请求，并等待服务器回送确认。每个新的TCP连接都会产生连接建立时延，通常最多一两秒钟，但如果涉及数百个HTTP事务，这个值会迅速累积。
3. **请求传输**：一旦连接建立，客户端通过新建立的TCP管道发送HTTP请求。数据到达后，Web服务器从TCP连接中读取请求报文并进行处理。
4. **响应传输**：Web服务器回送HTTP响应，这也需要时间。

这些TCP网络时延受硬件速度、网络和服务器负载、请求和响应报文大小以及客户端和服务器之间的距离影响。TCP协议的技术复杂性也会显著影响时延。

#### 4.2.2 性能聚焦区域

以下是一些常见的TCP相关时延，它们会对HTTP程序员产生影响：

- **TCP连接建立握手**
- **TCP慢启动拥塞控制**
- **Nagle算法的数据聚合**
- **用于捎带确认的TCP延迟确认算法**
- **TIME_WAIT时延和端口耗尽**

理解这些因素对于编写高性能的HTTP软件至关重要。如果不需要进行这种级别的性能优化，可以跳过这部分内容。

#### 4.2.3 TCP连接的握手时延

建立新的TCP连接时，即使在发送任何数据之前，TCP软件之间也需要交换一系列IP分组以协商连接参数（参见图4-8）。如果连接仅用于传输少量数据，这些交换过程会严重降低HTTP性能。

![图4-8 在发送数据之前，TCP要传送两个分组来建立连接](http://example.com/image4-8.png)

TCP连接握手步骤如下：

1. **SYN**：客户端向服务器发送一个小的TCP分组（通常40-60字节），设置SYN标志表示连接请求。
2. **SYN+ACK**：如果服务器接受连接，计算一些连接参数并向客户端回送一个包含SYN和ACK标志的TCP分组。
3. **ACK**：客户端向服务器回送一条确认信息，通知连接已成功建立。现代TCP栈允许客户端在此确认分组中发送数据。

HTTP程序员不会直接看到这些分组，因为它们由TCP/IP软件管理。然而，他们会感受到创建TCP连接时的时延。对于小的HTTP事务，SYN/SYN+ACK握手会产生显著的时延。后续小节将讨论如何通过重用现有连接来减少这种TCP建立时延的影响。

#### 4.2.4 延迟确认

因特网本身无法保证可靠的分组传输，因此TCP实现了自己的确认机制来确保数据的成功传输。每个TCP段都有序列号和校验和，接收者收到完整段后会回送确认分组。如果发送者在指定时间内未收到确认，将重发数据。

为了更有效地利用网络，TCP允许在相同方向的输出数据分组中“捎带”确认信息。许多TCP栈实现了一种“延迟确认”算法，该算法会在特定窗口时间（通常是100-200毫秒）内将输出确认存放在缓冲区中，以寻找能够捎带它的输出数据分组。如果没有合适的输出数据分组，确认信息将单独发送。

然而，HTTP的请求-应答行为降低了捎带的可能性，导致延迟确认算法引入较大的时延。根据操作系统不同，可以调整或禁用延迟确认算法。在修改TCP栈参数之前，必须确保不会引发这些问题。

#### 4.2.5 TCP慢启动

TCP数据传输性能还取决于TCP连接的使用期。TCP连接会随着时间自我“调谐”，初始限制最大速度，成功传输数据后逐渐提高速度。这种调谐称为TCP慢启动，用于防止因特网突然过载和拥塞。

TCP慢启动限制了任意时刻可传输的分组数。每成功接收一个分组，发送端就可以发送另外两个分组。这种方式被称为“打开拥塞窗口”。新连接的传输速度比已经交换过一定量数据的“已调谐”连接慢。由于已调谐连接更快，HTTP中有一些工具可以重用现有连接。稍后将介绍这些HTTP“持久连接”。

#### 4.2.6 Nagle算法与TCP_NODELAY

TCP有一个数据流接口，应用程序可以通过它将任意尺寸的数据放入TCP栈中。但是，每个TCP段至少包含40字节的标记和首部，因此发送大量小数据分组会严重影响网络性能。

Nagle算法试图在发送分组之前将大量TCP数据绑定在一起，以提高网络效率。只有当所有其他分组都被确认后，Nagle算法才允许发送非全尺寸分组。如果其他分组仍在传输，数据会被缓存，直到挂起分组被确认或缓存中有足够数据发送一个全尺寸分组。

Nagle算法会导致几种HTTP性能问题。小的HTTP报文可能无法填满一个分组，可能会因为等待永远不会到来的额外数据而产生时延。此外，Nagle算法与延迟确认之间的交互存在问题——Nagle算法会阻止数据发送，直到有确认分组抵达，但确认分组自身会被延迟确认算法延迟100-200毫秒。

HTTP应用程序通常会在其栈中设置参数`TCP_NODELAY`，禁用Nagle算法以提高性能。如果这样做，必须确保会向TCP写入大块数据，避免产生大量小分组。

#### 4.2.7 TIME_WAIT累积与端口耗尽

TIME_WAIT端口耗尽是严重的性能问题，尤其在性能基准测试中。大多数遇到性能基准问题的人最终都会碰到这个问题，且性能会变得非常差，因此值得特别关注。

当某个TCP端点关闭连接时，会在内存中维护一个小的控制块，记录最近关闭连接的IP地址和端口号。这类信息通常维持一段时间（通常是最大分段生存期的两倍，约2分钟），以确保在这段时间内不会创建具有相同地址和端口号的新连接。

现在高速路由器的使用使得重复分组几乎不可能在连接关闭几分钟后出现在服务器上。有些操作系统会将2MSL设置为较小的值，但修改此值时需谨慎。分组确实会被复制，如果来自之前连接的复制分组插入到具有相同连接值的新TCP流中，会破坏TCP数据。

2MSL的连接关闭延迟通常不是问题，但在性能基准环境下可能会成为问题。进行性能基准测试时，通常只有一台或几台计算机连接到系统，限制了连接到服务器的客户端IP地址数。服务器通常在HTTP默认的TCP端口80上监听。用TIME_WAIT防止端口号重用时，这些情况也限制了可用的连接值组合。

在只有一个客户端和一台Web服务器的情况下，构建TCP连接的四个值中，三个是固定的，只有源端口号可以改变。客户端每次连接到服务器时都会获得一个新的源端口以实现唯一性。但由于可用源端口数量有限（例如60,000个），且在2MSL秒（例如120秒）内连接无法重用，连接率被限制在60,000/120=500次/秒。如果不断进行优化并且服务器连接率不超过500次/秒，就不会遇到TIME_WAIT端口耗尽问题。要解决这个问题，可以增加客户端负载生成机器的数量，或确保客户端和服务器循环使用几个虚拟IP地址以增加更多的连接组合。

即使没有遇到端口耗尽问题，也要小心大量连接处于打开状态的情况，或为等待状态的连接分配大量控制块的情况。在这种情况下，某些操作系统的速度会显著减慢。

### 4.3 HTTP连接的处理

本章前两节简要介绍了TCP连接及其性能含义。要了解更多关于TCP联网的知识，请参见本章末尾的资源列表。

接下来我们将回到HTTP，解释操作和优化连接的HTTP技术。从HTTP的Connection首部开始介绍，这是HTTP连接管理中一个容易被误解但重要的部分。然后会介绍一些HTTP连接优化技术。

#### 4.3.1 常被误解的Connection首部

HTTP允许在客户端和最终源服务器之间存在多个中间实体（如代理、缓存等）。HTTP报文可以从客户端逐跳转发到源服务器（或反向传输）。

在某些情况下，两个相邻的HTTP应用程序会为其共享的连接应用一组选项。HTTP的Connection首部字段包含一个逗号分隔的连接标签列表，这些标签为此连接指定了不会传播到其他连接中的选项。例如，可以使用`Connection: close`说明发送完下一条报文后必须关闭连接。

Connection首部可以承载三种类型的标签，因此有时会令人困惑：

- **HTTP首部字段名**：列出与此连接相关的首部；
- **任意标签值**：描述此连接的非标准选项；
- **值close**：说明操作完成后需关闭这条持久连接。

如果连接标签中包含了一个HTTP首部字段的名称，则该首部字段包含了与连接有关的信息，不能转发出去。在将报文转发出去之前，必须删除Connection首部列出的所有首部字段。由于Connection首部可以防止无意中转发本地首部，因此将逐跳首部名放入Connection首部被称为“对首部的保护”。图4-9显示了一个这样的例子。

![图4-9 Connection首部示例](http://example.com/image4-9.png)

首部说明：不应该转发Meter首部，应该在转发前删除。

希望这些改进使文本更加清晰、连贯和专业。如果有进一步的需求或修改意见，请随时告知！