# An Open Guide to Evaluating Software Composition Analysis Tools

**By Ibrahim Haddad, PhD.**  
**November 2020**  
**www.linuxfoundation.org**

---

## Introduction

Software Composition Analysis (SCA) tools enable development teams to track and analyze open source code in their projects, addressing both licensing compliance and security vulnerabilities. These tools can identify open source components, their dependencies, associated licenses, and known security issues. While numerous SCA solutions are available, including commercial and open-source options, selecting the most appropriate tool for a specific environment and use case can be challenging due to the lack of standardized evaluation methods.

This guide aims to provide a comprehensive set of metrics for comparing and evaluating SCA tools. It is an enhanced version of Chapter 12 from "Open Source Compliance in the Enterprise (2nd Edition)" and is intended to help organizations make informed decisions by providing a structured approach to tool evaluation.

**Note:** No single solution fits all needs. The features, maturity, and deployment models of SCA tools vary widely. We recommend identifying your key requirements and testing tools against these criteria.

---

## Evaluation Metrics

### 1. Knowledge Base
- **Size of the Knowledge Base:** Measured by the number of open source projects and files tracked. A larger database increases the likelihood of identifying more open source code.
- **Major Repositories Tracked:** List of repositories (e.g., NPM, SourceForge).
- **Tracked Ecosystems:** Examples include R, Delphi.
- **Supported Source Languages:** Based on file extensions and repository types. Ideally, the tool should be language-agnostic, but this is rare.
- **Detection Level:** Distinguish between package-level detection (e.g., Maven) and file-level scanning (e.g., .java files).
- **Update Frequency:** Regular updates are crucial to keep pace with open source developments. Some providers update daily, while others do so less frequently.
- **Customer Request Handling:** Time taken to add customer requests to the knowledge base and any Service Level Agreements (SLAs) in place.

### 2. Detection Capabilities
- **Whole Component Detection:** Ability to detect entire components.
- **Configuration Flexibility:** Support for configuring the analyzer to handle different build setups.
- **Detection Methodology:** Summary of the detection approach used.
- **Partial Snippet Detection:** Ranging from a few lines to partial files.
- **Result Verification Options:** Features for ranking and verifying results (e.g., P1 or Serious).
- **Auto-Identification of Code:** Reduces the need for manual intervention to resolve false positives.
- **Types of Analysis:**
  - **Source Scanners:** Identify which open source packages the code belongs to.
  - **Binary Scanners:** Identify which open source packages the binary belongs to.
  - **Snippet Scanners:** Identify which open source packages the code fragment was copied from.
  - **Dependency Scanners:** Identify included dependencies via package managers.
  - **License Scanners:** Identify open source licenses.
  - **Security Scanners:** Identify security vulnerabilities.
- **Language Support:** Specify if snippet analysis is supported for all languages.

### 3. Ease of Use
- **Intuitive Design and User Interface:**
- **Local Client or Browser Plugin Availability:**
- **Mobile Client Availability:**
- **Training Requirements:** Minimal training required, but detailed training provided for result interpretation.

**Note:** Ease of use is subjective and varies among users.

### 4. Operational Capabilities
- **Scan Speed:** Important for continuous integration processes.
- **Usage Model Flexibility:** Ability to use the tool for M&A activities without licensing restrictions.
- **Audit Models Supported:** Traditional, blind, and DIY.
- **Programming Language Agnosticism:**
- **Reusability of Scan Clarifications:**
- **Build System Agnosticism:**

### 5. Integration Capabilities
- **API and CLI Support:** For easy integration with existing systems.
- **UI Integration Capabilities:**
- **Policy Integration:** Ability to integrate organizational compliance policies and flag code based on these policies.

### 6. Security Vulnerabilities Database
- **Database Size:** Number of vulnerabilities tracked.
- **Update Frequency:** Regular updates are essential.
- **Sources of Information:** Multiple sources for vulnerability data.
- **Validation Research:** Additional research conducted by the provider to validate alerts.
- **Precision and Recall:** Accuracy of true positive identifications and coverage of potential vulnerabilities.
- **Contextual Prioritization:** Ability to contextualize severity scores (e.g., CVSS3) for more accurate prioritization.

### 7. Advanced Vulnerability Discovery
- **Support for Identifying Copied Vulnerable Code:** Requires snippet identification capabilities.

### 8. Associated Costs
- **Infrastructure Cost:** Hosting and maintenance costs.
- **Operational Cost:** Management and action on scan results.
- **Licensing Cost:** Yearly software license and access to SDK.
- **Integration Cost:** Initial setup and integration with existing systems.
- **Export and Migration Capabilities:**
- **Lock-in Cost:** Consideration for switching to another solution.
- **Customization Cost:** Engineering customization for specific needs.

### 9. Deployment Model Support
- **On-Site Only:**
- **Cloud Only:**
- **Hybrid:**
- **Data Privacy:** Clear understanding of what information leaves the network (e.g., source and binary content, hashes, inventory lists).

### 10. Reporting Capabilities
- **Compliance Notices Generation:** Based on scan results and license information.
- **Subcomponent and Subfile Notices:**
- **Snippet Notices:**
- **Reporting Formats:** Support for various formats (e.g., Excel, SPDX, SARIF, CVE, CVSS).
- **Detailed Sample Reports:**

---

## Conclusion

This guide was developed to address the need for a unified method to evaluate SCA tools. We hope it helps you make informed decisions when choosing the right tool for your organization. Feedback and suggestions for additional metrics or updates are welcome via the live document on Google Drive.

---

## Contributors

The author would like to thank the following contributors for their valuable feedback and contributions:
- Thomas Steenbergen, Head of Open Source at HERE Technologies
- Gilles Gravier, Director, Senior Open Source and Blockchain Strategy Advisor, Wipro
- Jeff Luszcz, Founder and CTO, Palamida
- Gandharva Kumar, Senior Engineering Manager, GOJEK
- Emil WÃ¥reus, Head of Data Science, Debricked

---

## Linux Foundation Open Source Compliance Resources

The Linux Foundation hosts several community-driven projects focused on collaborative approaches to managing licensing and compliance. Key resources include:
- **Open Compliance Program:** A starting point for developers and lawyers to learn about best practices and tools for open source compliance.
- **ACT (Automating Compliance Tooling):** Improves interoperability of open source compliance tools.
- **OpenChain:** Defines key requirements for open source compliance programs and offers a conformance program.
- **SPDX (Software Package Data Exchange):** Standardizes the communication of Software Bill of Materials information.
- **Open Source Licensing Basics for Software Developers:** Free online training for developers.
- **Whitepapers and Blog Posts:** Regularly published content on open source legal issues.

---

## Disclaimer

The opinions expressed in this paper are solely those of the author and do not necessarily represent the views of current or past employers. The author welcomes feedback and updates via the online document.

---

## Author

**Ibrahim Haddad (Ph.D.)**  
Executive Director, LF AI & Data Foundation  
Email: [PI:EMAIL]  
LinkedIn: linkedin.com/in/ibrahimhaddad  
Twitter: @IbrahimAtLinux  
Web: ibrahimatlinux.com

**The Linux Foundation** promotes, protects, and standardizes Linux by providing unified resources and services needed for open source to successfully compete with closed platforms.  
To learn more, visit: www.linuxfoundation.org