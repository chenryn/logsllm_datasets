控制链接过程使得输出的可执行文件能够满足某些特殊的需求，比如不使用默认C语言运
行库的程序、运行于嵌入式系统的程序，甚至是操作系统内核、驱动程序，等等。
程序员的自我修养一链接、装载与库
---
## Page 156
WindowsPE/COFF
5.1Windows的二进制文件格式PE/COFF
5.2PE的前身—COFF
5.3链接指示信息
5.4调试信息
5.5大家都有符号表
5.6Windows下的 ELF——PE
5.7本章小结
程序员的自我修养——链接、装载与库
---
## Page 157
134
第5章WindowsPE/COFF
5.1Windows的二进制文件格式PE/COFF
在32位Windows 平台下，微软引入了一种叫PE（ProtableExecutable）的可执行格
式。作为Win32平台的标准可执行文件格式，PE有着跟ELF一样良好的平台扩展性和灵活
性。PE文件格式事实上与ELF同根网源，它们都是由 COFF（CommonObject Fle Format）
格式发展而来的，更加具体地讲是来源于当时著名的DEC（Digital EquipmentCorporation）
的VAX/VMS上的COFF文件格式。因为当微软开始开发Windows NT的时候，最初的成员
都是来自于DEC公司的VAX/VMS小组，所以他们很自然就将原来系统上熟悉的工具和文
件格式都搬了过来，并且在此基础上做重新设计和改动。
微软将它的可执行文件格式命名为“PortableExecutable”，从字面意义上讲是希望这个
可执行文件格式能够在不同版本的Windows平台上使用，并且可以支持各种CPU，比如从
Windows NT、 Windows 95 到 Windows XP 及 Windows Vista, 还有 Windows CE 都是使用 PE
可执行文件格式。不过可惜的是Windows的PC版只支持x86的CPU，所以我们儿乎只要
关注PE在x86上的各种性质就行了。
请注意，上面在讲到PE文件格式的时候，只是说Windows平台下的可执行文件采
用该格式.事实上，在Windows平台，VISUALC++编译器产生的目标文件仍然使用COFF
格式。由于PE是COFF的一种扩展，所以它们的结构在很大程度上相同，甚至跟ELF
文件的基本结构也相同，都是基于段的结构。所以我们下面在讨论 Windows 平台上的文
件结构时，目标文件默认为COFF格式，而可执行文件为PE格式。但很多时候我们可以
将它们统称为PE/COFF文件，当然我们在下文中也会对比PE与COFF在结构方面的区
别之处。
随着64位Windows的发布，微软对64位Windows平台上的PE文件结构稍微做了一
些修改，这个新的文件格式叫做PE32+，新的PE32+并没有添加任何结构，最大的变化就是
把那些原来32位的字段变成了64位，比如文件头中与地址相关的字段。绝大部分情况下，
PE32+与PE的格式一致，我们可以将它看作是一般的PE文件。
与ELF文件相同，PE/COFF格式也是采用了那种基于段的格式。一个段可以包含代码、
数据或其他信息，在PE/COFF文件中，至少包含一个代码段，这个代码段的名字往往叫做
“code”，数据段叫做“.data”，不同的编译器产生的目标文件的段名不同，VISUALC++使
样，段名只有提示性作用，并没有实际意义。当然，如果使用链接脚本来控制链接，段名可
能会起到一定的作用。
程序员的自我修养一链接、装载与库
---
## Page 158
5.2PE的前身—COFF
135
跟ELF一样，PE中也允许程序员将变量或函数放到自定义的段。在GCC中我们使用
“_atribute_(section(“name")）)”扩展属性，在 VISUALC++中可以使用“#pragma”编译
器指示。比如下面这个语句：
#pragna data_seg (*Fo0*)
#pragma data_seg (* ,data*)
int g1oba1 • 1;
编译器指示换回来，恢复到“data”，否则，任何全局变量和静态变量都会被放到“FOO”
段。
5.2PE的前身一COFF
还记得刚开始分析ELF文件格式时的那个SimpleSection.c吗？我们接下来还是以它为
例子，看看在Windows下，它被编译成COFF目标文件时，所有的变量和函数是怎么存储
接器“link”，可执行文件查看器“dumpbin”等，你可以通过Microsoft的官方网站下载免费
的 Visual C++ Express 2005 版，这已经足够用了。
要使用这些工具，我们要在Windows命令行下面运行它们，Visual C++在安装完成后就
会有一个批处理文件用来建立运行这些工具所须要的环境。它位于开始/程序/Microsoft
Visual Studio 2005/Visual Studio Tools/ Visual Studio 2005 Command Prompt,i这样我价们]
行：
c1 /c /Za SimpleSection.c
“cl”是VISUALC++的编译器，即“Compiler”的缩写.lc参数表示只编译，不链接，
即将.c文件编译成.obj文件，而不调用链接器生成.exe文件，如果不加这个参数，cl会在编
认的C运行库链接，产生可执行文件SimpleSection.exe，
VISUALC++有一些C和C++语言的专有扩展，这些扩展并没有定义ANSIC标准或
ANSI C++标准，其体可以参阅 MSDN的 Microsoft Exlensions to C and C++这一节。“Za”
参数禁用这些扩展，使得我们的程序跟标准的C/C++兼容，这样可以尽量地看到问题的本质。
另外值得一提的是，使用/Za参数时，编译器自动定义了_STDC_这个宏，我们可以在程
序里通过判断这个宏是否被定文面确定编译器是否禁用了MicrosoftC/C++语法扩展。
编译完成以后我们得到了一个971字节的 SimpleSection.obj目标文件，当然文件大小可
程序员的自我修养——链接、装载与库
---
## Page 159
136
第5章WindowsPE/COFF
能会因为编泽器版本、选项及机器平台不间面不同。跟GNU 的工具链中的“objdump”
样，Visual C++也提供了一个用于查看目标文件和可执行文件的工具，就是“dumpbin”，下
面这个命令可以查看 SimpleSection.obj的结构：
dumpbin /ALL SimpleSection.oby > SimpleSection.txt
“/ALL”参数是将打印输出目标文件的所有相关信息，包括文件头、每个段的属性和
段的原始数据及符号表。由于输出信息较多，如果直接打印到终端上，可能不太便于查看，
中，以便后面分析时逐一对照。我们也可以用“/SUMMARY”选项来查看整个文件的基本
信息，它只输出所有段的段名和长度：
dumpbin SimpleSection.obj /sunARY
Copyright (C) Microsoft Corporation. All rights reserved.
Microsoft (R) CoFF/PE Dumper Ver8ion 8.00.50727,762
Dump of fi1e SimgleSection.obj
Fi1e Type: COFF OBJECT
Sunnary
C,data
4.bss
18 ,drectve
86
, debug$.S
4E .text
COFF文件结构
几乎跟ELF文件一样，COFF也是由文件头及后面的若干个段组成，再加上文件末尾的
符号表、调试信息的内容，就构成了COFF文件的基本结构，我们在COFF文件中儿乎都可
以找到与ELF文件结构相对应的地方。COFF文件的文件头部包括了两部分，一个是描述文
件总体结构和属性的映像头（ImageHeader），另外一个是描述该文件中包含的段属性的段
表（SectionTable）。文件头后面紧跟着的就是文件的段，包括代码段、数据段等，最后还
有符号表等。整体结构如图5-1所示。
映像（Image1：因为PE文件在装载时被直接映射到进程的虚拟空间中运行，它是进
程的虚拟空间的映像。所以 PE可执行文件很多时候被叫做映像文件（Image File。
程序员的自我修养一链接、装载与库
---
## Page 160
5.2PE的前身
COFF
137
Image Header IMAGE_FILE_HEADER
Section Table IMAGE_SECTION_HEADER(}
fext
.data
.drectve
debugSS
other sections
Symbor Table
COFF Object File Format
图5-1COFF目标文件格式
文件头里描述COFF文件总体属性的映像头是一个“IMAGE_FILE_HEADER”的结构，
很明显，它跟ELF中的“Elf32_Ehdr”结构的作用相同。这个结构及相关常数被定义在
“VCPlatformSDKinclude\WinNT.h” 里面:
typedef struct _INAGE_FILE_HEADER (
WORD
WORD
NumberOfSections;
Kachine;
DWORD
DWORD
PointerToSymbo1Tab1e;
TineDateStamp:
DWORD
NumberOfSymbols;
WORD
SizeOfOpt ionalHeader:
WORD
Characteristics;
)IMAGE_FILB_HEADER, *PIMAGE_PIL&_HBAD&R;
再回头对照前面“SimpleSection.txt”中的输出信息，我们可以看到输出的信息里面最
开始一段“FILEHEADERVALUES”中的内容跟COFF映像头中的成员是一一对应的：
File Type: COFF OBJECT
FILE HEADER VALUES
14C machine (x86)
45C975E6 cine date 8tamp Wed Feb 07 14:47:02 2007
5 number of sections
1E0file pointer tosymboltable
14 nunber of symbols
0 size of optional header
0 characteristics
可以看到这个目标文件的文件类型是“COFFOBJECT”，也就是COFF目标文件格式。
文件头里面还包含了目标机器类型，例子里的类型是0x14C，微软定义该类型为x86兼容
CPU。按照微软的预想，PE/COFF结构的可执行文件应该可以在不网类型的硬件平台上使
用，所以预留了该字段。如果你安装了VC或Windows SDK（也叫 Platform SDK），就可以
程序员的自我修养一链接、装载与库
---
## Page 161
138
第5章Windows PE/COFF
VISUALC++里面附带的PlatformSDK定文了28种CPU类型，从x86到MIPSR系列、
ALPHA、ARM、PowerPC等。但是由于目前Windows只能应用在为数不多的平台上（目前
只有x86平台），所以我们看到的这个类型值几乎都是0x14C。文件头里面的“Numberof
Sections”是指该PE所包含的“段”的数量。“Time date stamp”是指PE文件的创建时间。
“File pointer to symbol table”是符号表在 PE 中的位置。“Size of optional header”是指 Optional
Header的大小，这个结构只存在于PE可执行文件，COFF目标文件中该结构不存在，所以
为0，我们在后面介绍PE文件结构时还会提到这个成员，
映像头后面紧跟着的就是COF文件的段表，它是一个类型为“IMAGE_SECTION_
HEADER”结构的数组，数组里面每个元素代表一个段，这个结构跟ELF文件中的
“EIf32_Shdr”很相似。很明显，这个数组元素的个数刚好是该COF文件所包含的段的数
量，也就是映像头里面的“NumberOfSections”。这个结构是用来描述每个段的属性的，它
也被定义在WinNT.h里面：
typedef struct _IMAGB_SECTION_HEADER (
BYTE  Name[8];
union (
DWORD
DWORD
PhysicalAddress;
Virtualsize:
}Misc;
DWORD
VirtualAddress:
DWORD
SizeOfRawData;
DWORD
PointerToRawDataj
DWORD
PointerToRelocations;
DWORD
WORD
PointexToLinenumbers;
WORD
NumberOfLinenumbers
NumberOfRelocat ions;
)IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
DWORD
Characteristics;
可以看到每个段所拥有的属性包括段名（SectionName）、物理地址（Physical
address）、虚拟地址（Virtualaddress）、原始数据大小（Size of raw data）、段在文件中的
位置（File pointer to raw data）、该段的重定位表在文件中的位置（File pointer to relocation
table）、该段的行号表在文件中的位置（Filepointer tolinenumbers）、标志位
（Characteristics）等。我们挑儿个重要的字段来进行分析，主要有VirtualSize、
VirtualAddress、SizeOfRawData 和 Characteristics 这儿个字段，如表5-1所示。
表5-1
字段
VirtualSize
该段被加载至内存后的大小
VirtualAddress
该段被加载至内存后的虚拟地址
程序员的自我修养一—链接、装载与库
---
## Page 162
5.3链接指示信息
139
续表
字段
含义
该段在文件中的大小，注意：这个值有可能跟VirtualSize的值不一样，比
如.bss 段的 SizeOfRawData 是0.而 VirtualSize 值是.bss段的大小，另外涉
SizeOfRawData
及一些内存对齐等问题，这个值往往比VirtualSize小
关于.bss的内容请阅读后面的“.bss段”一节
段的属性，属性里包含的主要是段的类型（代码、数据、bss）、对齐方式
及可读可写可执行等权限，段的属性是一些标志位的组合，这些标志位被
Characteristics
定义在WinNT.h里，比如 IMAGE_SCN_CNT_CODE（0x00000020）表示
该段里面包含的是代码：IMAGE_SCN_MEM_READ（0x40000000）表示
该段在内存中是可读的：IMAGE_SCN_MEM_EXECUTE（0x20000000）
表示该段在内存申是可执行的，等等