It follows that in Case 1
the probability Pr [Win0] is upper bounded by max{λ, γ} ·
instructions than Read during round N .
In particular a
could not be chosen in dependence of aN , hence being in-
In Case 1 the response (cid:101)xN is the direct result of a query
to the Read oracle, i.e., (cid:101)xN = Read((cid:101)S, a) for some address
a. If a = aN the probability of (cid:101)xN := Read((cid:101)S, aN ) = sN :=
consider that a (cid:54)= aN . Since (cid:101)xN = Read((cid:101)S, a) and due
to the fact that (cid:101)P must respond with (cid:101)xN in time δRead af-
ter receiving aN , (cid:101)P has no time left to perform any other
dependent of aN . Then (cid:101)xN = sN happens with probability
Pr [(cid:101)x1 = Read(S, a1) ∧ . . . ∧(cid:101)xN−1 = Read(S, aN−1)].
Next we consider Case 2, where (cid:101)xN is not the result of a
i < N , that the probability of (cid:101)xN = Read(S, aN ) is upper
γ · Pr [(cid:101)x1 = Read(S, a1) ∧ . . . ∧(cid:101)xN−1 = Read(S, aN−1)]
Pr [Win0] ≤ max{λ, γ} · Pr(cid:2)(cid:101)x1 = Read(S, a1)
∧ . . . ∧(cid:101)xN−1 = Read(S, aN−1)(cid:3)
query to the Read oracle. It follows from the incompressibil-
ity of S (Deﬁnition 3) and the fact that aN has been sampled
uniformly and independent of all previous addresses ai with
is an upper bound of Pr [Win0] in Case 2. It follows from
Cases 1 and 2 that
bounded by γ. Hence,
and by induction Pr [Win0] ≤ π0 = π0(N ) := (max{λ, γ})N .
Game 1: Prover Controls the Address Generation Time.
Game Description. In this game we increase the power
how much time he devotes to determine each value si, as
long as the total time for determining (s1, . . . , sN ) does not
exceed N · δRead. This reﬂects the fact that in the attestation
of the malicious prover (cid:101)P and allow him to freely choose
protocol, a malicious prover (cid:101)P may generate the memory
message which (cid:101)P needs to send to O for receiving the next
sends ai to (cid:101)P only when (cid:101)P sent the i-th request req to O.
Formally, this is captured by introducing a req protocol
address ai during the challenge phase. More precisely, O
addresses (a1, . . . , aN ) on its own whenever it wants to.
5This is a consequence of Remark 7.
Since each round may take a diﬀerent time period, the
winning conditions are relaxed by replacing the time restric-
tion on the individual rounds by an overall time-bound for
the entire challenge phase. This means that (cid:101)P wins Game 1
if (1) (cid:101)xi = si for all i ∈ {1, . . . , N} and (2) the duration of
Pr [Win1] that (cid:101)P wins Game 1. To this end, we divide the
the challenge phase does not exceed the time N · δRead. The
size of the primary memory remains as in Game 0.
Success Probability. We now upper bound the probability
number of rounds into four distinct sets. Let Ncoll denote the
number of rounds where the address sampled by O is equal
to an address of some previous round by coincidence, i.e.,
Ncoll := |{i ∈ {2, . . . , N}|∃j ∈ {1, . . . , i − 1} : ai = aj}| .
With respect to the remaining N −Ncoll rounds, let Nequal
(resp. Nmore, resp. Nless) be the number of rounds where
(cid:101)P responds in time equal (resp. more, resp. less) than δRead.
Thus we have N = Ncoll + Nequal + Nless + Nmore.
Let Coll(Ncoll) denote the event that exactly Ncoll of the
N addresses are equal to some previous addresses. This
implies that in N − Ncoll rounds pairwise diﬀerent addresses
are sampled. Moreover, since there are only 2la diﬀerent
addresses, N − Ncoll is upper bound by 2la . It follows that
N − Ncoll ≤ 2la ⇔ Ncoll ≥ N − 2la . Thus it must hold that
Ncoll ≥ max{0, N − 2la}. Hence, Pr [Win1] is equal to
Pr [Win1|Coll(Ncoll)] · Pr [Coll(Ncoll)].
Ncoll=max{0,N−2la}
We now derive upper bounds for Pr [Win1|Coll(Ncoll)] and
Pr [Coll(Ncoll)].
In general, Pr [Coll(Ncoll)] can be expressed by (number
combinations of rounds with equal addresses) × (probabil-
ity that addresses in N − Ncoll rounds are pairwise diﬀer-
ent) × (probability that addresses in the remaining rounds
are equal to some previous address). The ﬁrst term is at
while an upper bound for the last term is
N−1(cid:88)
most
(cid:16) N
(cid:17)
(cid:16) N−Ncoll
(cid:17)Ncoll
(cid:18) N
(cid:19)
Ncoll
2la
Ncoll
·
. This gives an upper bound
N−Ncoll(cid:89)
i=0
2la − i
2la
 ·
(cid:18) N − Ncoll
(cid:19)Ncoll
.
(3)
2la
for Pr [Coll(Ncoll)] if max{0, N − 2la} ≤ Ncoll ≤ N − 1. We
now ﬁx a value for Ncoll and aim for an upper bound for the
probability Pr [Win1|Coll(Ncoll)]. We do so by giving sepa-
rate upper bounds on the success probability for the four
diﬀerent types of rounds. Let ops = ops(δRead) be the num-
ber of instructions that can be executed by the computing
engine of (cid:101)P in time δRead. Since we are interested in an upper
bound of (cid:101)P’s success probability, we make several assump-
tions in favor of (cid:101)P: (1) For rounds where (cid:101)P invested more
time than δRead, we use the trivial upper bound of 1 even if
the time period exceeded δRead only by the time required to
execute one single instruction. (2) For rounds where the re-
quested address coincides with an address previously asked,
we likewise use the bound of 1. Moreover we assume that
these rounds take no time at all and the ops instructions
saved can be used in ops other rounds. (3) In rounds that
take less time than δRead, it follows from the incompressibil-
ity of S (Deﬁnition 3) and the fact that all addresses are
pairwise distinct that (cid:101)xi = si with probability ≤ γ. Again,
we assume that these rounds take no time at all and that
9the ops instructions saved can be used in ops other rounds.
most with probability max{λ, γ} (cf. Game 0).
(4) In a round that takes exactly time δRead (cid:101)P succeeds at
ities of (cid:101)P, they allow to identify optimum strategies. More
precisely for each round where (cid:101)P uses less time than δRead
While these assumptions strongly exaggerate the possibil-
or where a previously asked address is requested again, the
best approach is to spend the ops saved instructions in ops
other rounds such that for each of these rounds the probabil-
ity of correctly determining si is equal to 1. It follows that
Nmore = ops· (Ncoll + Nless) and hence N = Ncoll + Nequal +
Nless + Nmore = Nequal + (ops + 1) · (Ncoll + Nless). Hence,
we have
(cid:111)
(cid:110)
Pr [Win1|Coll(Ncoll)] ≤ π0(Nequal) · γNless · 1Ncoll+Nmore =
λN−(ops+1)·(Ncoll+Nless)·γNless , γN−(ops+1)·Ncoll−ops·Nless
max
Nless
(cid:16)
(cid:110)
(cid:111)(cid:17)
cf. Apx. A
=
max
λops(δRead)+1, γ
N
ops(δRead )+1 −Ncoll
,
(4)
where the last equation is shown in Appendix A. This shows
that π (N, ops(δRead)) is an upper bound for the probability
Pr [Win1], where π(n, x) is deﬁned as in Equation 2. Observe
that for any ﬁxed value of Ncoll, the probability of having
Ncoll collisions (Equation 3) increases with N (as long as
Ncoll ≥ max{0, N − 2la}) while the probability to determine
the values (s1, . . . , sN ) (Equation 4) decreases for N .
Game 2: Skipping Address Generation.
that honestly generate all addresses (a1, . . . , aN ). Now we
more time for determining the values si but at the “cost”
of not knowing ai. Formally this is captured by deﬁning a
second message skip besides req. Speciﬁcally, in each round
In
case of req, O behaves as in Game 1 and sends the next ai
Game Description. So far we covered only provers (cid:101)P
change the game such that (cid:101)P may decide in each round i
to skip the generation of address ai. This allows (cid:101)P to “buy”
i of the challenge phase, (cid:101)P either sends req or skip.
to (cid:101)P. However, when (cid:101)P sends skip then O does not send
ai to (cid:101)P and extends the time-bound by δGen. That is, at
are that (1) all responses ((cid:101)x1, . . . ,(cid:101)xN ) of (cid:101)P are correct, i.e.,
(cid:101)xi = si ∀i ∈ {1, . . . , N} and (2) the challenge phase does not
take more time than N · δRead. However each time (cid:101)P sends
Pr [Win2] that (cid:101)P wins Game 2. To this end we follow the
a skip message to O, the time-bound is extended by δGen.
Success Probability. We now determine the probability
the beginning of the challenge phase, the winning conditions
same line of arguments as in Game 1. The only diﬀerence is
that rounds where collisions in the addresses took place or
where either Read or Gen have been skipped take no time at
all and free ops(δRead + δGen) instructions for other rounds.
That is we get a bound with the same structure as in Game 1
but where ops(δRead) is replaced by ops(δRead + δGen), i.e.,
Pr [Win2] ≤ π (N, ops(δRead + δGen)).
Game 3: Replacing the Random Sampling with Gen .
Game Description. Now we consider a variant of Game 2
with the only diﬀerence being that the addresses (a1, . . . , aN )
are generated by Gen instead of being randomly sampled by
O. That is, during the setup phase O randomly samples g0
and generates (a1, . . . , aN ) using Gen.
Success Probability. Let Pr [Win3] be the probability that
(cid:101)P wins Game 3. Using a standard argument, it follows
from the pseudo-randomness of the outputs of Gen (Deﬁni-
tion 4) that |Pr [Win3]− Pr [Win2]| ≤  and hence Pr [Win3] ≤
Pr [Win2] +  ≤ π (N, ops(δRead + δGen)) + .
Game 4: Giving Access to Gen.
Game Description.
In the ﬁnal game O no longer gen-
erates (a1, . . . , aN ) for (cid:101)P. Instead (cid:101)P now queries the Gen
gives this value to (cid:101)P.
Observe that the size of the primary memory of (cid:101)P is in-
oracle, which on input gi returns (gi, ai) = Gen(gi−1) after
time δGen. To this end, O samples g0 in the setup phase and
creased to additionally store a value g. Further, the time-
bound of the challenge phase is increased to N · (δGen + δRead).
Success Probability. The only diﬀerence between Game 4
Gen oracle. Recall that g0 is used by Gen for computing
and Game 3 is that (cid:101)P now knows g0 and can query the
(a1, . . . , aN ). Hence (cid:101)P may decide to skip the generation of
νGen-unpredictable (Deﬁnition 5), (cid:101)P cannot derive any infor-
if (cid:101)P never queries Gen with some value gi it cannot distin-
one or more addresses and save the time and memory for
other computations. However, since Gen is assumed to be
mation on ai+1 or gi+1 from gi without querying Gen. Thus
guish the subsequent values (gi+1, . . . , gN ) with a probabil-
ity better than (N − i) · νGen. Therefore we can restrict to
provers that compute (a1, g1), . . . , (aM , gM ) and that skip
(aM +1, gM +1), . . . , (aN , gN ).
Let Pr [Win4] be the probability to win Game 4 and let
Pr [Win4(M )] be the probability to win Game 4 for a ﬁxed
M . That is we have Pr [Win4] ≤ maxM {Pr [Win4(M )]}.
Now consider a variation of Game 4 where O replaces the
values (aM +1, gM +1), . . . , (aN , gN ) by independent and uni-
formly sampled values and we denote with Pr [Win(cid:48)4(M )]
the probability that (cid:101)P wins this game. Since Gen is as-
sumed to be νGen-unpredictable (cf. Deﬁnition 5), it holds
that Pr [Win4(M )] ≤ Pr [Win(cid:48)4(M )] + νGen · (N − M ).
With respect to Pr [Win4(M )], observe that for the ﬁrst
M rounds the situation is as in Game 3. Hence the suc-
cess probability for the ﬁrst M rounds is upper bounded
by π (M, ops(δRead + δGen)) + . For the remaining N − M
rounds, O uses uniformly sampled values (aM +1, . . . , aN )
that are unknown to (cid:101)P. Hence the probability of (cid:101)P deriving
(sM +1, . . . , sN ) correctly is upper bounded by γN−M . This
yields Pr [Win(cid:48)4(M )] ≤ (π (M, ops(δRead + δGen)) + ) · γN−M
and hence Pr [Correct] is at most
(cid:8)(π(M, ops(δRead + δGen)) + )· γN−M + νGen · (N − M )(cid:9).
0≤M≤N
7. DISCUSSION AND CONCLUSION
max
We presented the ﬁrst formal security framework for soft-
ware attestation and precisely deﬁned various of the underly-
ing system and design parameters. Moreover we presented a
generic software attestation protocol that encompasses most
existing schemes in the literature. For this generic scheme
we derived an upper bound on the success probability of a
malicious prover that depends on the formalized parameters.
We see the generic scheme and its proof as blueprints that
can be adapted to concrete instantiations.
10One lesson learned is the impact of these parameters on
the security of the generic scheme. For example,
it has