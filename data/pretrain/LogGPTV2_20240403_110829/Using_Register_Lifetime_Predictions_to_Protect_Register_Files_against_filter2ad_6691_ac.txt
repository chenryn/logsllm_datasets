In reality, there is rarely any queueing. One reason is that
many instructions have fewer than two register operands.
Moreover, many reads obtain their data from the bypass
network and, therefore, do not access the ECC table.
In
addition, many register writes do not create an entry in the
ECC table. Speciﬁcally, dead versions (Section 3.2.1), ul-
trashort versions that ﬁnd the table full with non-ultrashort
versions, and short versions that ﬁnd the table full with long
versions, skip ECC generation and table update.
In some cases, ParShield adds additional updates to the
ECC table tags. These are caused by the eviction signals
(Section 3.3). However, these signals are infrequent. They
are only sent when the physical register to be freed was pre-
dicted as long. The rationale is that short and ultrashort
register versions are aged automatically and evicted from
the ECC table at a much faster pace than long ones — typi-
cally before the register is freed. Since Figure 5 shows that,
on average, less than 10% of the register versions are long,
the eviction signals are infrequent.
4.3. Using More Architectural Knowledge to Im-
prove Efﬁciency
We extend the algorithm of Section 3.2.1 that predicts
the lifespan of register versions, to leverage the usage pat-
terns of one architectural register. The goal is to improve
the prediction accuracy, given that some architectural reg-
isters have a speciﬁc purpose and, therefore, special usage
patterns. Speciﬁcally, the global pointer register is writ-
ten very few times during the execution of a program but is
read many times and has a very long lifespan. Therefore,
in the ECC table, we pin the entry that protects the physical
mapping of the global pointer until it receives an eviction
signal. Similar optimizations could be done by also consid-
ering other architectural registers.
5. Evaluation Methodology
We use a cycle-accurate execution-driven simulator [14]
to model the processor and memory system architecture of
Table 3. The architecture is a MIPS-like 3-issue out-of-
order processor with two levels of caches, a 128-entry inte-
ger register ﬁle with 6 read and 3 write ports, and a 64-entry
ﬂoating-point register ﬁle with 4 read and 2 write ports.
We evaluate the performance and the power of this ar-
chitecture with the register ﬁle conﬁgurations of Table 2.
Baseline is the architecture with no protection for the reg-
ister ﬁles. Shield is Baseline plus the Shield architecture of
Section 3.1. As shown in Table 3, the ECC table for the
Table 2. Register conﬁgurations evaluated.
Conﬁguration
Baseline
Shield
ParShield
FullECC
Description
Register ﬁles with no parity or ECC protection
Baseline + Shield (Section 3.1)
Shield + parity for all registers (Section 3.6)
Baseline + ECC for all registers
integer register ﬁle has 32 entries and 3 read and 3 write
ports; the ECC table for the ﬂoating-point register ﬁle has
16 entries and 2 read and 2 write ports. The number of ECC
generators and checkers is the same as the number of write
and read ports in the ECC table, respectively. ParShield is
Shield plus the parity bit for all registers (Section 3.6). Fi-
nally, FullECC is Baseline plus ECC for all the 128 integer
registers and 64 ﬂoating-point registers. In all cases, 8-bit
ECC codes are used to protect the 64-bit registers.
We evaluate the architectures with SPECint and SPECfp
2000 applications running the Ref data set. All of the appli-
cations are included except those that are not supported by
our current framework. The applications are compiled us-
ing gcc-3.4 with -O3 optimization enabled. After skipping
the initialization (typically 1-6 billion instructions), each
application executes around 1 billion instructions.
Since applications do not run to completion, we are un-
able to determine whether or not a register is in ACE state
when the simulation ﬁnishes. For example, if a simulation
ends right after tw in Figure 2(a), we would not know if the
period after the write is ACE or un-ACE. To handle these
edge effects, we use the cooldown technique that was pro-
posed by Biswas et al. [1]. During the cooldown interval,
we track the registers that were live at the moment that the
simulation stopped. This helps us determine if a register
was in ACE or un-ACE state.
6. Evaluation
In this section, we ﬁrst examine the AVF results and
the power and area consumption, then perform a sensitivity
analysis, and ﬁnally examine register lifespan prediction.
6.1. AVF Results
We compare the AVF of Baseline to that of Shield with
different replacement policies in the ECC table: Random,
LRU, Effective (proposed in Section 3.2.2), and OptEffec-
tive. The latter augments Effective with the pinning opti-
mization described in Section 4.3. Recall that ParShield
has an SDC AVF equal to zero (all errors are detected) and
a DUE AVF equal to Shield’s AVF. Finally, the AVF of Ful-
lECC is zero.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Table 3. Processor and memory system modeled. Cycle counts are in processor cycles.
Processor
Register File
Cache & Memory
ParShield
Integer:
ECC table entries, width
R/W ports
ECC latency
FP:
ECC table entries, width
R/W ports
ECC latency
32, 18 bits
3/3
4 cycles
16, 17 bits
2/2
4 cycles
Baseline
Shield
ParShield
FullECC
L1 Cache:
Size, assoc, line
Latency
L2 Cache:
Size, assoc, line
Latency
Memory:
Latency
r
e
w
o
P
d
e
z
i
l
a
m
r
o
N
16KB, 4, 64B
2 cycles
1MB, 8, 64B
12 cycles
500 cycles
3
2.5
2
1.5
1
0.5
0
Frequency
Fetch/Issue/Retire
ROB size
I-window
LD/ST queue
Mem/Int/FP unit
Branch predictor:
Mispred. Penalty
BTB
4 GHz
6/3/3
126
68
48/42
2/3/2
14 cycles
2K, 2-way
Integer:
Entries
Width
R/W ports:
FP:
Entries
Width
R/W ports:
128
64 bits
6/3
64
64 bits
4/2
F
V
A
e
l
i
.
F
g
e
R
.
t
n
I
0.25
0.2
0.15
0.1
0.05
0
F
V
A
e
l
i
F
.
g
e
R
P
F
.
0.15
0.12
0.09
0.06
0.03
0
Baseline
Random
LRU
Effective
OptEffective
2
p
z
b
i
y
t
f
a
r
c
p
a
g
i
p
z
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
f
l
o
w
t
r
p
v
x
e
t
r
o
v
g .
v
A
n
t
I
t
r
a
a
s
e
m
d
i
r
g
m
i
m
w
s
e
k
a
u
q
e
g
v
A
P
F
i
e
s
w
p
u
w
Baseline
Random
LRU
Effective
OptEffective
2
p
z
b
i
y
t
f
a
r
c
p
a
g
i
p
z
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
f
l
o
w
t
r
p
v
x
e
t
r
o
v
g .
v
A
n
t
I
t
r
a
a
s
e
m
d
i
r
g
m
i
m
w
s
e
k
a
u
q
e
g
v
A
P
F
i
e
s
w
p
u
w
Figure 11. Integer (top) and ﬂoating-point (bottom)
register ﬁle AVFs.
Figure 11 and shows the AVFs of the integer (AVFint)
and ﬂoating-point (AVFfp) register ﬁles for the described
conﬁgurations. The AVFs are shown for all simulated
SPECint and SPECfp applications. Since there are almost
no ﬂoating-point operations in the SPECint applications, we
do not discuss the AVFfp for SPECint, and only show it in
Figure 11 for completeness.
Figure 11 shows that, for all applications and on both
register ﬁles, Effective and, especially OptEffective, have an
AVF much lower than Baseline. For example, Effective re-
duces the AVFint for SPECint by 63% on average and the
AVFfp for SPECfp by 42% on average relative to Baseline.
OptEffective reduces the AVFint for SPECint by up to 84%
(on average 73%) and the AVFfp for SPECfp by up to 100%
(on average 85%) relative to Baseline. The resulting aver-
age AVFint for SPECint is 0.040 and the average AVFfp for
SPECfp is 0.010. As expected, Random and LRU perform
worse than chosen policies.
In general, Shield works slightly better for the ﬂoating-
point register ﬁle because it has a smaller fraction of reg-
isters in useful state than the integer one. In addition, it is
easier to predict the lifespan of ﬂoating-point registers. As
shown in Figure 11, Shield reduces the AVFfp to nearly zero
for art, mgrid, swim and wupwise.
6.2. Power and Area Consumption
Register ﬁles consume a signiﬁcant fraction of the power
in modern processors. For example, one estimate suggests
2
p
z
b
i
y
t
f
a
r
c
p
a
g
i
p
z
g
f
c
m
r
e
s
r
a
p
k
m
b
l
r
e
p
f
l
o
w
t
r
p
v
x
e
t
r
o
v
g .
v
A
n
t
I
t
r
a
a
s
e
m
d
i
r
g
m
i
m
w
s
e
k
a
u
q
e
g
v
A
P
F
i
e
s
w
p
u
w
Figure 12. Integer register ﬁle power consumption.
that the integer register ﬁle consumes around 14% of the dy-
namic power in the processor [17]. We use CACTI 4.2 [19]
to estimate the dynamic and static power of storage struc-
tures such as the register ﬁle, the ECC table, and the ECC
and parity bit-ﬁelds. We use HSpice [5] models to estimate
the dynamic and static power of the ECC logic.
In Figure 12, we show the total power (dynamic plus
static) consumed in the integer register ﬁle for the differ-
ent register conﬁgurations. For each application, the bars
are normalized to Baseline. We do not include data for
the ﬂoating-point register ﬁle because, as explained before,
many of our applications do not use it much and, therefore,
the average differences between conﬁgurations are small.
The ﬁgure shows that FullECC consumes on average
100% more power than Baseline for both SPECint and
SPECfp applications. This is due to the combination of
the ECC generators and checkers, and the additional stor-
age for the ECC bits. With Shield, the average power is
only 78% and 74% of FullECC for SPECint and SPECfp,
respectively. This results mainly from the fewer ECC gen-
erators and checkers, and the fewer ECC operations per-
formed — although the tags and ports in the ECC table are
a signiﬁcant source of power consumption.
Figure 12 also shows that ParShield consumes only
slightly more power than Shield. The difference is small
because the parity bits consume little power to generate,
store and check. Overall, with ParShield, the average power
is 81% and 78% of FullECC for SPECint and SPECfp,
respectively. Both ParShield and Shield are more power-
efﬁcient than FullECC.
Finally, we estimate the area of the register ﬁle and the
additional ECC and parity structures using CACTI 4.2. The
area of the ECC logic is not added because it is negligi-
ble. Adding up the contributions of both the integer and the
ﬂoating-point register ﬁles, we ﬁnd that FullECC uses 4.9%
more area than Baseline. Moreover, Shield and ParShield
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007C
P
I
d
e
z
i
l
a
m
r
o
N
(6R,4W)
(3R,3W)
(2R,3W)
(1R,3W)
1
0.8
0.6
0.4