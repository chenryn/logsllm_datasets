### Optimized Text

In practice, queueing is rarely observed. This can be attributed to several factors: many instructions involve fewer than two register operands, and a significant number of reads obtain their data directly from the bypass network, bypassing the ECC table. Additionally, many register writes do not create an entry in the ECC table. Specifically, dead versions (Section 3.2.1), ultrashort versions that find the table full with non-ultrashort versions, and short versions that find the table full with long versions, all skip ECC generation and table updates.

In certain scenarios, ParShield introduces additional updates to the ECC table tags. These updates are triggered by eviction signals (Section 3.3). However, these signals are infrequent, occurring only when the physical register to be freed was predicted as long. The rationale is that short and ultrashort register versions are automatically aged and evicted from the ECC table at a much faster rate than long ones, typically before the register is freed. As Figure 5 illustrates, on average, less than 10% of register versions are long, making eviction signals rare.

### 4.3. Leveraging Architectural Knowledge for Improved Efficiency

We extend the algorithm described in Section 3.2.1, which predicts the lifespan of register versions, to incorporate usage patterns of specific architectural registers. The aim is to enhance prediction accuracy, given that some architectural registers have distinct purposes and usage patterns. For example, the global pointer register is written very few times during program execution but is read frequently and has a long lifespan. In the ECC table, we pin the entry that protects the physical mapping of the global pointer until it receives an eviction signal. Similar optimizations could be applied to other architectural registers.

### 5. Evaluation Methodology

We use a cycle-accurate, execution-driven simulator [14] to model the processor and memory system architecture detailed in Table 3. The architecture is a MIPS-like 3-issue out-of-order processor with two levels of caches, a 128-entry integer register file with 6 read and 3 write ports, and a 64-entry floating-point register file with 4 read and 2 write ports.

We evaluate the performance and power consumption of this architecture with the register file configurations listed in Table 2. The baseline configuration has no protection for the register files. Shield adds the Shield architecture (Section 3.1) to the baseline. ParShield combines Shield with parity for all registers (Section 3.6). FullECC provides ECC for all 128 integer registers and 64 floating-point registers. The ECC table for the integer register file has 32 entries and 3 read and 3 write ports, while the ECC table for the floating-point register file has 16 entries and 2 read and 2 write ports. The number of ECC generators and checkers matches the number of write and read ports in the ECC table, respectively. All configurations use 8-bit ECC codes to protect the 64-bit registers.

We evaluate the architectures using SPECint and SPECfp 2000 applications running the Ref data set. All applications are included except those unsupported by our current framework. The applications are compiled with gcc-3.4 using -O3 optimization. After skipping the initialization (typically 1-6 billion instructions), each application executes around 1 billion instructions.

Since applications do not run to completion, we cannot determine if a register is in ACE state at the end of the simulation. To handle this, we use the cooldown technique proposed by Biswas et al. [1]. During the cooldown interval, we track the registers that were live at the moment the simulation stopped, helping us determine if a register was in ACE or un-ACE state.

### 6. Evaluation

In this section, we first examine the AVF results and power and area consumption, then perform a sensitivity analysis, and finally examine register lifespan prediction.

#### 6.1. AVF Results

We compare the AVF of the baseline to that of Shield with different replacement policies in the ECC table: Random, LRU, Effective (proposed in Section 3.2.2), and OptEffective. The latter augments Effective with the pinning optimization described in Section 4.3. Recall that ParShield has an SDC AVF of zero (all errors are detected) and a DUE AVF equal to Shieldâ€™s AVF. Finally, the AVF of FullECC is zero.

Figure 11 shows the AVFs of the integer (AVFint) and floating-point (AVFfp) register files for the described configurations. The AVFs are shown for all simulated SPECint and SPECfp applications. Since there are almost no floating-point operations in the SPECint applications, we do not discuss the AVFfp for SPECint and only show it in Figure 11 for completeness.

Figure 11 indicates that, for all applications and both register files, Effective and, especially OptEffective, have significantly lower AVFs compared to the baseline. For example, Effective reduces the AVFint for SPECint by 63% on average and the AVFfp for SPECfp by 42% on average relative to the baseline. OptEffective reduces the AVFint for SPECint by up to 84% (on average 73%) and the AVFfp for SPECfp by up to 100% (on average 85%) relative to the baseline. The resulting average AVFint for SPECint is 0.040, and the average AVFfp for SPECfp is 0.010. As expected, Random and LRU perform worse than the chosen policies.

Generally, Shield performs slightly better for the floating-point register file because it has a smaller fraction of registers in useful state than the integer one. Additionally, it is easier to predict the lifespan of floating-point registers. As shown in Figure 11, Shield reduces the AVFfp to nearly zero for art, mgrid, swim, and wupwise.

#### 6.2. Power and Area Consumption

Register files consume a significant fraction of the power in modern processors. For instance, one estimate suggests that the integer register file consumes around 14% of the dynamic power in the processor [17]. We use CACTI 4.2 [19] to estimate the dynamic and static power of storage structures such as the register file, the ECC table, and the ECC and parity bit-fields. We use HSpice [5] models to estimate the dynamic and static power of the ECC logic.

Figure 12 shows the total power (dynamic plus static) consumed in the integer register file for the different register configurations. For each application, the bars are normalized to the baseline. Data for the floating-point register file are not included because many of our applications do not use it much, and the average differences between configurations are small.

The figure shows that FullECC consumes on average 100% more power than the baseline for both SPECint and SPECfp applications. This is due to the combination of ECC generators and checkers, and the additional storage for ECC bits. With Shield, the average power is only 78% and 74% of FullECC for SPECint and SPECfp, respectively. This reduction is primarily due to fewer ECC generators and checkers, and fewer ECC operations performed, although the tags and ports in the ECC table are a significant source of power consumption.

Figure 12 also shows that ParShield consumes only slightly more power than Shield. The difference is small because the parity bits consume little power to generate, store, and check. Overall, with ParShield, the average power is 81% and 78% of FullECC for SPECint and SPECfp, respectively. Both ParShield and Shield are more power-efficient than FullECC.

Finally, we estimate the area of the register file and the additional ECC and parity structures using CACTI 4.2. The area of the ECC logic is negligible. Adding up the contributions of both the integer and floating-point register files, we find that FullECC uses 4.9% more area than the baseline. Moreover, Shield and ParShield use slightly more area than the baseline, but significantly less than FullECC.